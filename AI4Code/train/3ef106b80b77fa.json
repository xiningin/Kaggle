{"cell_type":{"52a87aef":"code","70f319b4":"code","ac609cfd":"code","27163acf":"code","56fdbff3":"code","cd1de9f5":"code","cf0567df":"code","a213cbb4":"code","7e35e428":"code","4e7618ee":"code","9ed15090":"code","a96e257d":"code","dd8ae338":"code","355da0e9":"code","b9f59300":"code","824078bc":"code","b60bc7fd":"code","710b0f63":"code","05475b47":"code","6b39a981":"code","1d8136c8":"code","5f3b4ad1":"code","dc22e65d":"code","1163cbd0":"code","e4982278":"code","e254611d":"code","a1e83b26":"code","a2cbd41d":"code","63524b31":"code","b8e19195":"code","61b261e1":"markdown","41fa9f6f":"markdown","06642090":"markdown","ac5467ee":"markdown","9ebe50cd":"markdown","74f0a3d3":"markdown","ee438d19":"markdown","1e5f7625":"markdown","77e1121b":"markdown","ddf9e20f":"markdown","b3e3a9b4":"markdown","2651fc86":"markdown","d7c4a04d":"markdown","c53ff44b":"markdown","97adc395":"markdown","94b76d73":"markdown","162131e4":"markdown","9c32f99c":"markdown","d3f1fa34":"markdown","5fdaed72":"markdown","0e162f83":"markdown","b6ffecf4":"markdown","87bbd80e":"markdown","fe21da8f":"markdown","3d8a94c9":"markdown","850cf1f3":"markdown","8ca0daee":"markdown","60b2be86":"markdown","79c3681b":"markdown","28101846":"markdown","4a91fc6c":"markdown","56aca2e4":"markdown","38d5087e":"markdown","644f04b1":"markdown","2fa1a457":"markdown","b465e829":"markdown","acb9116c":"markdown","183965b4":"markdown"},"source":{"52a87aef":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","70f319b4":"import numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport time\nimport datetime as dt\n\ndata=pd.read_csv(\"..\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv\")\ndata_competitions=pd.read_csv(\"..\/input\/meta-kaggle\/Competitions.csv\")\n\n# we don't use the row with questions\ndata = data.iloc[1:, :]\n\n# rename long names of countries\ndata.Q3[data.Q3 == 'United States of America'] = 'USA'\ndata.Q3[data.Q3 == 'United Kingdom of Great Britain and Northern Ireland'] = 'UK'\n\n# plot formatting\ntitlefont = dict(size=16, family='Courier New')\ntextfont = dict(size=12, family='Courier New')\ntickfont = dict(size=12, family='Courier New')\nannotationfont=dict(family=\"Courier New\", size=12)\naxistitlefont = dict(size=14, family='Courier New')\nlineformat=dict(width=1, dash=\"dashdot\")\nhoverlabelformat=dict(bgcolor=\"white\", font_size=14)","ac609cfd":"data_age = data.copy()\n\ndata_age = data_age[\"Q1\"].dropna()\npercentages_total = data_age.value_counts(normalize=True).sort_index()\ncounts_total = data_age.value_counts(normalize=False).sort_index()\n\ndata_age_for_graph = pd.DataFrame(\n    np.hstack([percentages_total.values.reshape(-1, 1), counts_total.values.reshape(-1, 1)]),\n    index=percentages_total.index,\n    columns=[\"Percent\", \"Count\"],\n).reset_index()\n\nfig = px.bar(data_age_for_graph, x=\"index\", y=\"Count\", text=\"Percent\", range_y=[0,4400])\n\nfig.update_traces(\n    hovertemplate=\"Users: %{x}<br>Count: %{y:,.0f}\",\n    marker_color='#4682B4',\n    marker_opacity=0.7,\n    texttemplate=\"%{text:.0%}\",\n    textfont=textfont,\n    textposition='inside'\n)\n\nfig.update_layout(\n    xaxis=dict(\n        title_text=\"\", \n        tickfont=tickfont,\n        titlefont=axistitlefont\n    ),\n    yaxis=dict(\n        tickfont=tickfont,\n        titlefont=axistitlefont,\n        tickformat=\",\", \n        title_text=\"Counts\"),\n    hoverlabel=hoverlabelformat,\n    margin=dict(pad=5, t=100),\n    height=500,\n    width=800,\n    title=dict(text=\"Users age ditribution\", font=titlefont),\n)\nfig.add_shape(type=\"line\", y0=0, x0=2.5, y1=4400, x1=2.5, line=lineformat)\n\nfig.add_vrect(x0=-0.5, x1=2.5, y0=0, y1=1, fillcolor=\"darkgray\", opacity=0.4, layer=\"below\", line_width=0,)\n\nfig.add_annotation(\n    y=4200, x=1,\n    xref='x',yref='y',\n    text='<i>56% users younger 30 years<\/i>',\n    textangle=0,\n    showarrow=False,\n    font=annotationfont,\n)\n\nfig.show()","27163acf":"data_country = data.copy()\n\ndata_country = data_country[\"Q3\"].dropna()\npercentages_total = data_country.value_counts(normalize=True).sort_values(ascending=False)[:20:]\ncounts_total = data_country.value_counts(normalize=False).sort_values(ascending=False)[:20:]\n\ndata_country_for_graph = pd.DataFrame(\n    np.hstack([percentages_total.values.reshape(-1, 1), counts_total.values.reshape(-1, 1)]),\n    index=percentages_total.index,\n    columns=[\"Percent\", \"Count\"],\n).reset_index()\n\nfig = px.bar(data_country_for_graph, x=\"index\", y=\"Count\", text=\"Percent\", range_y=[0,6000])\n\nfig.update_traces(\n    hovertemplate=\"Country: %{x}<br>Count: %{y:,.0f}\",\n    marker_color='#4682B4',\n    marker_opacity=0.7,\n    texttemplate=\"%{text:.0%}\",\n    textfont=textfont,\n    textposition='inside'\n)\n\nfig.update_layout(\n    xaxis=dict(\n        title_text=\"\", \n        tickfont=tickfont,\n        titlefont=axistitlefont\n    ),\n    yaxis=dict(\n        tickfont=tickfont,\n        titlefont=axistitlefont,\n        tickformat=\",\", \n        title_text=\"Counts\"),\n    hoverlabel=hoverlabelformat,\n    margin=dict(pad=5, t=100),\n    height=500,\n    width=800,\n    title=dict(text=\"Users country ditribution (TOP-20)\", font=titlefont),\n)\nfig.show()","56fdbff3":"data_positions = data.copy()\n\ndata_positions_for_graph = data_positions[\"Q5\"].dropna()\npercentages_total = data_positions_for_graph.value_counts(normalize=True).sort_values(ascending=False)\ncounts_total = data_positions_for_graph.value_counts(normalize=False).sort_values(ascending=False)\n\ndata_positions_for_graph = pd.DataFrame(\n    np.hstack([percentages_total.values.reshape(-1, 1), counts_total.values.reshape(-1, 1)]),\n    index=percentages_total.index,\n    columns=[\"Percent\", \"Count\"],\n).reset_index()\n\n\nfig = px.bar(data_positions_for_graph, x=\"index\", y=\"Count\", text=\"Percent\", range_y=[0,5500])\n\nfig.update_traces(\n    hovertemplate=\"Job title: %{x}<br>Count: %{y:,.0f}\",\n    marker_color='#4682B4',\n    marker_opacity=0.7,\n    texttemplate=\"%{text:.0%}\",\n    textfont=textfont,\n    textposition='inside'\n)\n\nfig.update_layout(\n    xaxis=dict(\n        title_text=\"\", \n        tickfont=tickfont,\n        titlefont=axistitlefont\n    ),\n    yaxis=dict(\n        tickfont=tickfont,\n        titlefont=axistitlefont,\n        tickformat=\",\", \n        title_text=\"Counts\"),\n    hoverlabel=hoverlabelformat,\n    margin=dict(pad=5, t=100),\n    height=500,\n    width=800,\n    title=dict(text=\"Users jobs title ditribution (Total)\", font=titlefont),\n)\nfig.show()","cd1de9f5":"data_salaries = data.copy()\n\nsalaries_order = ['Not defined', '$0-999', '1,000-1,999', '2,000-2,999', '3,000-3,999', '4,000-4,999', '5,000-7,499', '7,500-9,999',\n'10,000-14,999','15,000-19,999', '20,000-24,999', '25,000-29,999', '30,000-39,999', '40,000-49,999', '50,000-59,999', '60,000-69,999', '70,000-79,999', '80,000-89,999', '90,000-99,999',\n'100,000-124,999', '125,000-149,999',  '150,000-199,999', '200,000-249,999',  '250,000-299,999', '300,000-500,000', '> $500,000']\n\nsalaries_order_more_than_1000 = ['1,000-1,999', '2,000-2,999', '3,000-3,999', '4,000-4,999', '5,000-7,499', '7,500-9,999',\n'10,000-14,999','15,000-19,999', '20,000-24,999', '25,000-29,999', '30,000-39,999', '40,000-49,999', '50,000-59,999', '60,000-69,999', '70,000-79,999', '80,000-89,999', '90,000-99,999',\n'100,000-124,999', '125,000-149,999',  '150,000-199,999', '200,000-249,999',  '250,000-299,999', '300,000-500,000', '> $500,000']\n\n# insert the new column with int values of salaries\ndata_salaries.insert(0, 'Q24_int', np.zeros((data_salaries['Q1'].count(),1), dtype='int64'))\n\n# transform the string to an int to perform simpler calculations later\ndata_salaries.Q24_int = pd.Series(data_salaries.Q24, dtype=\"string\").str.split(\"-\").str.get(0).str.replace(\"$\", \"\").str.replace(\">\", \"\").str.replace(',', '').fillna(-1).astype(int)\ndata_salaries.Q24 = pd.Series(data_salaries.Q24, dtype=\"string\").fillna('Not defined')\n\ndata_studying_salaries = data_salaries[(data_salaries.Q5 == 'Student') |\n                                       (data_salaries.Q5 == 'Currently not employed') | \n                                       (data_salaries.Q5 == 'Other')]\n\ndata_working_salaries = data_salaries[(data_salaries.Q5 != 'Student') & \n                                      (data_salaries.Q5 != 'Currently not employed') & \n                                      (data_salaries.Q5 != 'Other')]\n\ngroup_studying_salaries = data_studying_salaries['Q24'].value_counts()[salaries_order]\ngroup_working_salaries = data_working_salaries['Q24'].value_counts()[salaries_order]\n\n#---------------------\n\ndata_studying_salaries_for_graph = data_studying_salaries[\"Q24\"].dropna()\ndata_working_salaries_for_graph = data_working_salaries[\"Q24\"].dropna()\n\npercent_group_studying_salaries = data_studying_salaries_for_graph.value_counts(normalize=True)[salaries_order]\npercent_group_working_salaries = data_working_salaries_for_graph.value_counts(normalize=True)[salaries_order]\ncount_group_studying_salaries = data_studying_salaries_for_graph.value_counts(normalize=False).astype('float64')[salaries_order]\ncount_group_working_salaries = data_working_salaries_for_graph.value_counts(normalize=False).astype('float64')[salaries_order]\n\ndata_studying_salaries_for_graph = pd.DataFrame(\n    np.hstack([percent_group_studying_salaries.values.reshape(-1, 1), count_group_studying_salaries.values.reshape(-1, 1)]),\n    index=percent_group_studying_salaries.index,\n    columns=[\"Percent\", \"Count\"],\n).reset_index()\n\ndata_working_salaries_for_graph = pd.DataFrame(\n    np.hstack([percent_group_working_salaries.values.reshape(-1, 1), count_group_working_salaries.values.reshape(-1, 1)]),\n    index=percent_group_working_salaries.index,\n    columns=[\"Percent\", \"Count\"],\n).reset_index()\n\n\nfig = px.bar(data_studying_salaries_for_graph, x=\"index\", y=\"Count\", text=\"Percent\", range_y=[0,7100])\n\nfig.update_traces(\n    hovertemplate=\"Salary: %{x}<br>Count: %{y:,.0f}\",\n    marker_color='#CD5B45',\n    marker_opacity=0.7,\n    texttemplate=\"%{text:.0%}\",\n    textfont=textfont,\n    textposition='inside'\n)\n\nfig.update_layout(\n    xaxis=dict(\n        title_text=\"\", \n        tickfont=tickfont,\n        titlefont=axistitlefont\n    ),\n    yaxis=dict(\n        tickfont=tickfont,\n        titlefont=axistitlefont,\n        tickformat=\",\", \n        title_text=\"Counts\"),\n    hoverlabel=hoverlabelformat,\n    margin=dict(pad=5, t=100),\n    height=500,\n    width=800,\n    title=dict(text=\"Salary of studying users (Total)\", font=titlefont),\n)\nfig.show()\n\n#------------------------\n\nfig = px.bar(data_working_salaries_for_graph, x=\"index\", y=\"Count\", text=\"Percent\", range_y=[0,2400])\n\nfig.update_traces(\n    hovertemplate=\"Salary: %{x}<br>Count: %{y:,.0f}\",\n    marker_color='#4C9141',\n    marker_opacity=0.7,\n    texttemplate=\"%{text:.0%}\",\n    textfont=textfont,\n    textposition='inside'\n)\n\nfig.update_layout(\n    xaxis=dict(\n        title_text=\"\", \n        tickfont=tickfont,\n        titlefont=axistitlefont\n    ),\n    yaxis=dict(\n        tickfont=tickfont,\n        titlefont=axistitlefont,\n        tickformat=\",\", \n        title_text=\"Counts\"),\n    hoverlabel=hoverlabelformat,\n    margin=dict(pad=5, t=100),\n    height=500,\n    width=800,\n    title=dict(text=\"Salary of working users (Total)\", font=titlefont),\n)\nfig.show()","cf0567df":"data_not_defined_salaries = data_salaries[(data_salaries.Q24_int < 1000) &\n                                          (data_salaries.Q5 != 'Student') & \n                                          (data_salaries.Q5 != 'Currently not employed') & \n                                          (data_salaries.Q5 != 'Other')]\n\ndata_working_salaries = data_salaries[(data_salaries.Q24_int != 0) & \n                                    (data_salaries.Q24_int != -1) & \n                                    (data_salaries.Q5 != 'Student') & \n                                    (data_salaries.Q5 != 'Currently not employed') & \n                                    (data_salaries.Q5 != 'Other')]\n\ngroup_not_defined_salaries = data_not_defined_salaries.groupby('Q24')[['Q1']].count()\ngroup_not_defined_salaries.rename(columns={\"Q1\": \"count\"},inplace=True)\n\ngroup_working_salaries = data_working_salaries['Q24'].value_counts()[salaries_order_more_than_1000]\n\n#-----------------------\ndata_working_salaries_for_graph = data_working_salaries[\"Q24\"].dropna()\n\npercent_group_working_salaries = data_working_salaries_for_graph.value_counts(normalize=True)[salaries_order_more_than_1000]\ncount_group_working_salaries = data_working_salaries_for_graph.value_counts(normalize=False).astype('float64')[salaries_order_more_than_1000]\n\ndata_working_salaries_for_graph = pd.DataFrame(\n    np.hstack([percent_group_working_salaries.values.reshape(-1, 1), count_group_working_salaries.values.reshape(-1, 1)]),\n    index=percent_group_working_salaries.index,\n    columns=[\"Percent\", \"Count\"],\n).reset_index()\n\n#------------------------\n\nfig = px.bar(data_working_salaries_for_graph, x=\"index\", y=\"Count\", text=\"Percent\", range_y=[0,600])\n\nfig.update_traces(\n    hovertemplate=\"Salary: %{x}<br>Count: %{y:,.0f}\",\n    marker_color='#4C9141',\n    marker_opacity=0.7,\n    texttemplate=\"%{text:.0%}\",\n    textfont=textfont,\n    textposition='inside'\n)\n\nfig.update_layout(\n    xaxis=dict(\n        title_text=\"\", \n        tickfont=tickfont,\n        titlefont=axistitlefont\n    ),\n    yaxis=dict(\n        tickfont=tickfont,\n        titlefont=axistitlefont,\n        tickformat=\",\", \n        title_text=\"Counts\"),\n    hoverlabel=hoverlabelformat,\n    margin=dict(pad=5, t=100),\n    height=500,\n    width=800,\n    title=dict(text=\"Salary of working users (without not defined users)\", font=titlefont),\n)\nfig.show()","a213cbb4":"sum_studying_users = group_studying_salaries.sum()\nsum_working_users = group_working_salaries.sum()\nsum_working_not_defined_users = group_not_defined_salaries['count'].sum()\nsum_counts = [sum_studying_users, sum_working_users, sum_working_not_defined_users]\n\nlabels = ['Studying DS Users', 'Working DS Users', 'Not defined DS Users']\nfig = go.Figure()\nfig.add_trace(go.Pie(values=sum_counts, \n                     labels=labels, \n                     textinfo='label+percent', \n                     showlegend=False, \n                     insidetextorientation='radial', \n                     hole=0.3))\n\nfig.update_layout(\n    title=\"Studying\/working DS Kaggle users\",\n    title_x = 0.5,\n    margin=dict(l=0, r=0, t=40, b=0),\n    legend_orientation=\"h\")\nfig.show()","7e35e428":"# calculate the average prize pool for this year's competitions\ndata_comp = data_competitions.copy()\ndata_comp = data_comp[(pd.to_datetime(data_comp['DeadlineDate']) > pd.to_datetime('2020-01-01 23:59:59')) & \n                      (pd.to_datetime(data_comp['DeadlineDate']) < pd.to_datetime('2021-01-01 23:59:59'))]\ndata_comp = data_comp[(data_comp.RewardQuantity.notnull()) & \n                  (data_comp.RewardType == 'USD')]\n\n# remove competition with $1,000,000 prizes\ndata_comp = data_comp.RewardQuantity.sort_values(ascending=False).iloc[1:]\ndata_1st_place_comp = data_comp\/2\n\naverage_1st_prize = round(data_1st_place_comp.sum()\/data_1st_place_comp.count())\n\n#-------------------------------------------\n# Dataset Successful\/Usual DS Kaggle users that participated in survey\n\ndata_usual_users_working = data_working_salaries[(data_working_salaries.Q24_int < average_1st_prize*2)]\ndata_usual_users_studying = data_studying_salaries[(data_studying_salaries.Q24_int < average_1st_prize*2)]\ndata_successful_users_working = data_working_salaries[(data_working_salaries.Q24_int >= average_1st_prize*2)]\ndata_successful_users_studying = data_studying_salaries[(data_studying_salaries.Q24_int >= average_1st_prize*2)]\n\n# dataframe with usual users\ndata_u = data_usual_users_working.append(data_usual_users_studying)\n\n# dataframe with successful users\ndata_s = data_successful_users_working.append(data_successful_users_studying)\n\ncount_data_usual = data_u['Q1'].count()\ncount_data_successful = data_s['Q1'].count()\n\nsum_users = [count_data_usual, count_data_successful]\n\n#-------------------------------------------\n\nlabels = ['Usual DS Users', 'Successful DS Users']\nfig = go.Figure()\nfig.add_trace(go.Pie(values=sum_users, \n                     labels=labels, \n                     textinfo='label+percent', \n                     showlegend=False, \n                     insidetextorientation='radial', \n                     hole=0.3))\n\nfig.update_layout(\n    title=\"Successful\/Usual DS Kaggle users\",\n    title_x = 0.5,\n    margin=dict(l=0, r=0, t=40, b=0),\n    legend_orientation=\"h\")\nfig.show()","4e7618ee":"data_u_for_graph = data_u[\"Q1\"].dropna()\npercentages_u = data_u_for_graph.value_counts(normalize=True).sort_index()\ncounts_u = data_u_for_graph.value_counts(normalize=False).sort_index()\n\ndata_s_for_graph = data_s[\"Q1\"].dropna()\npercentages_s = data_s_for_graph.value_counts(normalize=True).sort_index()\ncounts_s = data_s_for_graph.value_counts(normalize=False).sort_index()\n\ndata_u_for_graph = pd.DataFrame(\n    np.hstack([percentages_u.values.reshape(-1, 1), counts_u.values.reshape(-1, 1)]),\n    index=percentages_u.index,\n    columns=[\"Percent\", \"Count\"],\n).reset_index()\n\ndata_s_for_graph = pd.DataFrame(\n    np.hstack([percentages_s.values.reshape(-1, 1), counts_s.values.reshape(-1, 1)]),\n    index=percentages_s.index,\n    columns=[\"Percent\", \"Count\"],\n).reset_index()\n\nfig = px.bar(data_u_for_graph, x=\"index\", y=\"Count\", text=\"Percent\",range_y=[0,3500])\n\nfig.update_traces(\n    hovertemplate=\"Age: %{x}<br>Count: %{y:,.0f}\",\n    marker_color='#CD5B45',\n    marker_opacity=0.7,\n    texttemplate=\"%{text:.0%}\",\n    textfont=textfont,\n    textposition='inside'\n)\n\nfig.update_layout(\n    xaxis=dict(\n        title_text=\"\", \n        tickfont=tickfont,\n        titlefont=axistitlefont\n    ),\n    yaxis=dict(\n        tickfont=tickfont,\n        titlefont=axistitlefont,\n        tickformat=\",\", \n        title_text=\"Counts\"),\n    hoverlabel=hoverlabelformat,\n    margin=dict(pad=5, t=100),\n    height=500,\n    width=800,\n    title=dict(text=\"Age groups (Usual users)\", font=titlefont),\n)\nfig.add_shape(type=\"line\", y0=0, x0=2.5, y1=3500, x1=2.5, line=lineformat)\nfig.add_vrect(x0=-0.5, x1=2.5, y0=0, y1=1, fillcolor=\"darkgray\", opacity=0.2, layer=\"below\", line_width=0)\n\nfig.add_annotation(\n    y=3300, x=1,\n    xref='x',yref='y',\n    text='<i>66% are below 30 yrs old<\/i>',\n    textangle=0,\n    showarrow=False,\n    font=annotationfont\n)\nfig.show()\n\n#---------------------------------------------\n\nfig = px.bar(data_s_for_graph, x=\"index\", y=\"Count\", text=\"Percent\",range_y=[0,1000])\n\nfig.update_traces(\n    hovertemplate=\"Age: %{x}<br>Count: %{y:,.0f}\",\n    marker_color='#4C9141',\n    marker_opacity=0.7,\n    texttemplate=\"%{text:.0%}\",\n    textfont=textfont,\n    textposition='inside'\n)\n\nfig.update_layout(\n    xaxis=dict(\n        title_text=\"\", \n        tickfont=tickfont,\n        titlefont=axistitlefont\n    ),\n    yaxis=dict(\n        tickfont=tickfont,\n        titlefont=axistitlefont,\n        tickformat=\",\", \n        title_text=\"Counts\"),\n    hoverlabel=hoverlabelformat,\n    margin=dict(pad=5, t=100),\n    height=500,\n    width=800,\n    title=dict(text=\"Age groups (Successful users)\", font=titlefont),\n)\nfig.add_shape(type=\"line\", y0=0, x0=2.5, y1=1000, x1=2.5, line=lineformat)\nfig.add_shape(type=\"line\", y0=0, x0=5.5, y1=1000, x1=5.5, line=lineformat)\nfig.add_vrect(x0=2.5, x1=5.5, y0=0, y1=1, fillcolor=\"darkgray\", opacity=0.2, layer=\"below\", line_width=0)\n\nfig.add_annotation(\n    y=900, x=4,\n    xref='x',yref='y',\n    text='<i>51% are 30 - 45 yrs old<\/i>',\n    textangle=0,\n    showarrow=False,\n    font=annotationfont\n)\nfig.show()","9ed15090":"data_u_for_graph = data_u[\"Q2\"].dropna()\npercentages_u = data_u_for_graph.value_counts(normalize=True).sort_values(ascending=False)\ncounts_u = data_u_for_graph.value_counts(normalize=False).sort_values(ascending=False)\n\ndata_s_for_graph = data_s[\"Q2\"].dropna()\npercentages_s = data_s_for_graph.value_counts(normalize=True).sort_values(ascending=False)\ncounts_s = data_s_for_graph.value_counts(normalize=False).sort_values(ascending=False)\n\ndata_u_for_graph = pd.DataFrame(\n    np.hstack([percentages_u.values.reshape(-1, 1), counts_u.values.reshape(-1, 1)]),\n    index=percentages_u.index,\n    columns=[\"Percent\", \"Count\"],\n).reset_index()\n\ndata_s_for_graph = pd.DataFrame(\n    np.hstack([percentages_s.values.reshape(-1, 1), counts_s.values.reshape(-1, 1)]),\n    index=percentages_s.index,\n    columns=[\"Percent\", \"Count\"],\n).reset_index()\n\nfig = px.bar(data_u_for_graph, x=\"index\", y=\"Count\", text=\"Percent\",range_y=[0,10000])\n\nfig.update_traces(\n    hovertemplate=\"Gender: %{x}<br>Count: %{y:,.0f}\",\n    marker_color='#CD5B45',\n    marker_opacity=0.7,\n    texttemplate=\"%{text:.0%}\",\n    textfont=textfont,\n    textposition='inside'\n)\n\nfig.update_layout(\n    xaxis=dict(\n        title_text=\"\", \n        tickfont=tickfont,\n        titlefont=axistitlefont\n    ),\n    yaxis=dict(\n        tickfont=tickfont,\n        titlefont=axistitlefont,\n        tickformat=\",\", \n        title_text=\"Counts\"),\n    hoverlabel=hoverlabelformat,\n    margin=dict(pad=5, t=100),\n    height=500,\n    width=800,\n    title=dict(text=\"Gender groups (Usual users)\", font=titlefont),\n)\nfig.show()\n\n#---------------------------------------------\n\nfig = px.bar(data_s_for_graph, x=\"index\", y=\"Count\", text=\"Percent\",range_y=[0,3500])\n\nfig.update_traces(\n    hovertemplate=\"Gender: %{x}<br>Count: %{y:,.0f}\",\n    marker_color='#4C9141',\n    marker_opacity=0.7,\n    texttemplate=\"%{text:.0%}\",\n    textfont=textfont,\n    textposition='inside'\n)\n\nfig.update_layout(\n    xaxis=dict(\n        title_text=\"\", \n        tickfont=tickfont,\n        titlefont=axistitlefont\n    ),\n    yaxis=dict(\n        tickfont=tickfont,\n        titlefont=axistitlefont,\n        tickformat=\",\", \n        title_text=\"Counts\"),\n    hoverlabel=hoverlabelformat,\n    margin=dict(pad=5, t=100),\n    height=500,\n    width=800,\n    title=dict(text=\"Gender groups (Successful users)\", font=titlefont),\n)\nfig.show()","a96e257d":"data_u_for_graph = data_u[data_u['Q3'] != 'Other'][\"Q3\"].dropna()\npercentages_u = data_u_for_graph.value_counts(normalize=True).sort_values(ascending=False)[:10:]\ncounts_u = data_u_for_graph.value_counts(normalize=False).sort_values(ascending=False)[:10:]\n\ndata_s_for_graph = data_s[data_s['Q3'] != 'Other'][\"Q3\"].dropna()\npercentages_s = data_s_for_graph.value_counts(normalize=True).sort_values(ascending=False)[:10:]\ncounts_s = data_s_for_graph.value_counts(normalize=False).sort_values(ascending=False)[:10:]\n\ndata_u_for_graph = pd.DataFrame(\n    np.hstack([percentages_u.values.reshape(-1, 1), counts_u.values.reshape(-1, 1)]),\n    index=percentages_u.index,\n    columns=[\"Percent\", \"Count\"],\n).reset_index()\n\ndata_s_for_graph = pd.DataFrame(\n    np.hstack([percentages_s.values.reshape(-1, 1), counts_s.values.reshape(-1, 1)]),\n    index=percentages_s.index,\n    columns=[\"Percent\", \"Count\"],\n).reset_index()\n\nfig = px.bar(data_u_for_graph, x=\"index\", y=\"Count\", text=\"Percent\", range_y=[0,5000])\n\nfig.update_traces(\n    hovertemplate=\"Country: %{x}<br>Count: %{y:,.0f}\",\n    marker_color='#CD5B45',\n    marker_opacity=0.7,\n    texttemplate=\"%{text:.0%}\",\n    textfont=textfont,\n    textposition='inside'\n)\n\nfig.update_layout(\n    xaxis=dict(\n        title_text=\"\", \n        tickfont=tickfont,\n        titlefont=axistitlefont\n    ),\n    yaxis=dict(\n        tickfont=tickfont,\n        titlefont=axistitlefont,\n        tickformat=\",\", \n        title_text=\"Counts\"),\n    hoverlabel=hoverlabelformat,\n    margin=dict(pad=5, t=100),\n    height=500,\n    width=800,\n    title=dict(text=\"Countries (Usual users)\", font=titlefont),\n)\nfig.add_shape(type=\"line\", y0=0, x0=2.5, y1=5000, x1=2.5, line=lineformat)\nfig.add_vrect(x0=-1, x1=2.5, y0=0, y1=1, fillcolor=\"darkgray\", opacity=0.2, layer=\"below\", line_width=0)\n\nfig.add_annotation(\n    y=4700, x=1,\n    xref='x',yref='y',\n    text='<i>49% users TOP-3 countries<\/i>',\n    textangle=0,\n    showarrow=False,\n    font=annotationfont\n)\nfig.show()\n\n#---------------------------------------------\n\nfig = px.bar(data_s_for_graph, x=\"index\", y=\"Count\", text=\"Percent\", range_y=[0,1500])\n\nfig.update_traces(\n    hovertemplate=\"Country: %{x}<br>Count: %{y:,.0f}\",\n    marker_color='#4C9141',\n    marker_opacity=0.7,\n    texttemplate=\"%{text:.0%}\",\n    textfont=textfont,\n    textposition='inside'\n)\nfig.update_layout(\n    xaxis=dict(\n        title_text=\"\", \n        tickfont=tickfont,\n        titlefont=axistitlefont\n    ),\n    yaxis=dict(\n        tickfont=tickfont,\n        titlefont=axistitlefont,\n        tickformat=\",\", \n        title_text=\"Counts\"),\n    hoverlabel=hoverlabelformat,\n    margin=dict(pad=5, t=100),\n    height=500,\n    width=800,\n    title=dict(text=\"Countries (Successful users)\", font=titlefont),\n)\nfig.add_shape(type=\"line\", y0=0, x0=2.5, y1=1500, x1=2.5, line=lineformat)\nfig.add_vrect(x0=-1, x1=2.5, y0=0, y1=1, fillcolor=\"darkgray\", opacity=0.2, layer=\"below\", line_width=0)\n\nfig.add_annotation(\n    y=1400, x=1,\n    xref='x',yref='y',\n    text='<i>49% users TOP-3 countries<\/i>',\n    textangle=0,\n    showarrow=False,\n    font=annotationfont\n)\nfig.show()","dd8ae338":"countries = data_working_salaries[(data_working_salaries.Q3 != 'Other')].groupby('Q3')[['Q1']].count().sort_values(by='Q1', ascending=False)\ncountries.reset_index(inplace=True)\n\n# TOP-20 countries by amount of participants\ncountries = countries[(countries['Q1'] > 80)]\n\navg_country_salaries = pd.DataFrame(columns = ['Average_Salary'], dtype='int64')\n\n\nfor country in countries['Q3']:\n    data_country_salaries = data_working_salaries[(data_working_salaries.Q3 == country)]\n    data_country_salaries = data_country_salaries.groupby('Q24_int')[['Q1']].count()\n    data_country_salaries.rename(columns={\"Q1\": \"count\"},inplace=True)\n    data_country_salaries.reset_index(inplace=True)\n    data_country_salaries = data_country_salaries[data_country_salaries['count'] > data_country_salaries['count'].mean(0)].sort_values('count',ascending=False)\n    avg_country_salaries.loc[country] = round((data_country_salaries.prod(1).sum(0))\/data_country_salaries['count'].sum(0))\n       \navg_country_salaries = avg_country_salaries.sort_values(by='Average_Salary', ascending=False)\n\nfig = px.bar(avg_country_salaries, y=avg_country_salaries.index, x=\"Average_Salary\",text=\"Average_Salary\", orientation=\"h\", range_x=[0,120000])\n\nfig.update_traces(\n    hovertemplate=\"Country: %{y}<br>Summa: %{x:,.f}\",\n    marker_color='#4682B4',\n    marker_opacity=0.7,\n    texttemplate=\"%{text:.}\",\n    textfont=textfont,\n    textposition='inside'\n)\nfig.update_layout(\n    xaxis=dict(\n        title_text=\"Annual average salaries, USD\", \n        tickfont=tickfont,\n        titlefont=axistitlefont\n    ),\n    yaxis=dict(\n        categoryorder= \"total ascending\",\n        tickfont=tickfont,\n        titlefont=axistitlefont,\n        tickformat=\",\", \n        title_text=\"\"),\n    hoverlabel=hoverlabelformat,\n    margin=dict(pad=5, t=100),\n    height=700,\n    width=800,\n    title=dict(text=\"Average salaries of working users by countries (TOP-20)\", font=titlefont),\n)\nfig.show()","355da0e9":"data_u_for_graph = data_u[\"Q4\"].dropna()\npercentages_u = data_u_for_graph.value_counts(normalize=True).sort_values(ascending=False)\ncounts_u = data_u_for_graph.value_counts(normalize=False).sort_values(ascending=False)\n\ndata_s_for_graph = data_s[\"Q4\"].dropna()\npercentages_s = data_s_for_graph.value_counts(normalize=True).sort_values(ascending=False)\ncounts_s = data_s_for_graph.value_counts(normalize=False).sort_values(ascending=False)\n\ndata_u_for_graph = pd.DataFrame(\n    np.hstack([percentages_u.values.reshape(-1, 1), counts_u.values.reshape(-1, 1)]),\n    index=percentages_u.index,\n    columns=[\"Percent\", \"Count\"],\n).reset_index()\n\ndata_u_for_graph.loc[data_u_for_graph['index'] == \"Some college\/university study without earning a bachelor\u2019s degree\", 'index'] = \"Some college\/university study\"\ndata_u_for_graph.loc[data_u_for_graph['index'] == \"No formal education past high school\", 'index'] = \"No formal education\"\n\ndata_s_for_graph = pd.DataFrame(\n    np.hstack([percentages_s.values.reshape(-1, 1), counts_s.values.reshape(-1, 1)]),\n    index=percentages_s.index,\n    columns=[\"Percent\", \"Count\"],\n).reset_index()\n\ndata_s_for_graph.loc[data_s_for_graph['index'] == \"Some college\/university study without earning a bachelor\u2019s degree\", 'index'] = \"Some college\/university study\"\ndata_s_for_graph.loc[data_s_for_graph['index'] == \"No formal education past high school\", 'index'] = \"No formal education\"\n\nfig = px.bar(data_u_for_graph, x=\"index\", y=\"Count\", text=\"Percent\",range_y=[0,5100])\n\nfig.update_traces(\n    hovertemplate=\"Edu: %{x}<br>Count: %{y:,.0f}\",\n    marker_color='#CD5B45',\n    marker_opacity=0.7,\n    texttemplate=\"%{text:.0%}\",\n    textfont=textfont,\n    textposition='inside'\n)\n\nfig.update_layout(\n    xaxis=dict(\n        title_text=\"\", \n        tickfont=tickfont,\n        titlefont=axistitlefont\n    ),\n    yaxis=dict(\n        tickfont=tickfont,\n        titlefont=axistitlefont,\n        tickformat=\",\", \n        title_text=\"Counts\"),\n    hoverlabel=hoverlabelformat,\n    margin=dict(pad=5, t=100),\n    height=500,\n    width=800,\n    title=dict(text=\"Education (Usual users)\", font=titlefont),\n)\nfig.show()\n\n#---------------------------------------------\n\nfig = px.bar(data_s_for_graph, x=\"index\", y=\"Count\", text=\"Percent\",range_y=[0,2100])\n\nfig.update_traces(\n    hovertemplate=\"Edu: %{x}<br>Count: %{y:,.0f}\",\n    marker_color='#4C9141',\n    marker_opacity=0.7,\n    texttemplate=\"%{text:.0%}\",\n    textfont=textfont,\n    textposition='inside'\n)\n\nfig.update_layout(\n    xaxis=dict(\n        title_text=\"\", \n        tickfont=tickfont,\n        titlefont=axistitlefont\n    ),\n    yaxis=dict(\n        tickfont=tickfont,\n        titlefont=axistitlefont,\n        tickformat=\",\", \n        title_text=\"Counts\"),\n    hoverlabel=hoverlabelformat,\n    margin=dict(pad=5, t=100),\n    height=500,\n    width=800,\n    title=dict(text=\"Education (Successful users)\", font=titlefont),\n)\nfig.show()","b9f59300":"data_u_for_graph = data_u[\"Q5\"].dropna()\npercentages_u = data_u_for_graph.value_counts(normalize=True).sort_values(ascending=False)\ncounts_u = data_u_for_graph.value_counts(normalize=False).sort_values(ascending=False)\n\ndata_s_for_graph = data_s[\"Q5\"].dropna()\npercentages_s = data_s_for_graph.value_counts(normalize=True).sort_values(ascending=False)\ncounts_s = data_s_for_graph.value_counts(normalize=False).sort_values(ascending=False)\n\ndata_u_for_graph = pd.DataFrame(\n    np.hstack([percentages_u.values.reshape(-1, 1), counts_u.values.reshape(-1, 1)]),\n    index=percentages_u.index,\n    columns=[\"Percent\", \"Count\"],\n).reset_index()\n\ndata_s_for_graph = pd.DataFrame(\n    np.hstack([percentages_s.values.reshape(-1, 1), counts_s.values.reshape(-1, 1)]),\n    index=percentages_s.index,\n    columns=[\"Percent\", \"Count\"],\n).reset_index()\n\nfig = px.bar(data_u_for_graph, x=\"index\", y=\"Count\", text=\"Percent\", range_y=[0,5700])\n\nfig.update_traces(\n    hovertemplate=\"Position: %{x}<br>Count: %{y:,.0f}\",\n    marker_color='#CD5B45',\n    marker_opacity=0.7,\n    texttemplate=\"%{text:.0%}\",\n    textfont=textfont,\n    textposition='inside'\n)\nfig.update_layout(\n    xaxis=dict(\n        title_text=\"\", \n        tickfont=tickfont,\n        titlefont=axistitlefont\n    ),\n    yaxis=dict(\n        tickfont=tickfont,\n        titlefont=axistitlefont,\n        tickformat=\",\", \n        title_text=\"Counts\"),\n    hoverlabel=hoverlabelformat,\n    margin=dict(pad=5, t=100),\n    height=500,\n    width=800,\n    title=dict(text=\"Job Title (Usual users)\", font=titlefont),\n)\nfig.add_shape(type=\"line\", y0=0, x0=2.5, y1=5700, x1=2.5, line=lineformat)\nfig.add_vrect(x0=-1, x1=2.5, y0=0,y1=1, fillcolor=\"darkgray\", opacity=0.2, layer=\"below\", line_width=0)\n\nfig.add_annotation(\n    y=5500, x=1,\n    xref='x',yref='y',\n    text='<b><i>67% usual users<\/i><b>',\n    textangle=0,\n    showarrow=False,\n    font=annotationfont\n)\nfig.show()\n\n#---------------------------------------------\n\nfig = px.bar(data_s_for_graph, x=\"index\", y=\"Count\", text=\"Percent\", range_y=[0,1250])\n\nfig.update_traces(\n    hovertemplate=\"Position: %{x}<br>Count: %{y:,.0f}\",\n    marker_color='#4C9141',\n    marker_opacity=0.7,\n    texttemplate=\"%{text:.0%}\",\n    textfont=textfont,\n    textposition='inside'\n)\nfig.update_layout(\n    xaxis=dict(\n        title_text=\"\", \n        tickfont=tickfont,\n        titlefont=axistitlefont\n    ),\n    yaxis=dict(\n        tickfont=tickfont,\n        titlefont=axistitlefont,\n        tickformat=\",\", \n        title_text=\"Counts\"),\n    hoverlabel=hoverlabelformat,\n    margin=dict(pad=5, t=100),\n    height=500,\n    width=800,\n    title=dict(text=\"Job Title (Successful users)\", font=titlefont),\n)\nfig.add_shape(type=\"line\", y0=0, x0=2.5, y1=1250, x1=2.5, line=lineformat)\nfig.add_vrect(x0=-1, x1=2.5, y0=0,y1=1, fillcolor=\"darkgray\", opacity=0.2, layer=\"below\", line_width=0)\n\nfig.add_annotation(\n    y=1150,\n    x=1,\n    xref='x',yref='y',\n    text='<b><i>54% successful users<\/i><\/b>',\n    textangle=0,\n    showarrow=False,\n    font=annotationfont\n)\nfig.show()","824078bc":"data_u_for_graph = data_u[\"Q20\"].dropna()\npercentages_u = data_u_for_graph.value_counts(normalize=True)\ncounts_u = data_u_for_graph.value_counts(normalize=False)\n\ndata_s_for_graph = data_s[\"Q20\"].dropna()\npercentages_s = data_s_for_graph.value_counts(normalize=True)\ncounts_s = data_s_for_graph.value_counts(normalize=False)\n\ndata_u_for_graph = pd.DataFrame(\n    np.hstack([percentages_u.values.reshape(-1, 1), counts_u.values.reshape(-1, 1)]),\n    index=percentages_u.index,\n    columns=[\"Percent\", \"Count\"],\n).reset_index()\n\ndata_s_for_graph = pd.DataFrame(\n    np.hstack([percentages_s.values.reshape(-1, 1), counts_s.values.reshape(-1, 1)]),\n    index=percentages_s.index,\n    columns=[\"Percent\", \"Count\"],\n).reset_index()\n\nsorting = [\n    '0-49 employees', \n    '50-249 employees', \n    '250-999 employees', \n    '1000-9,999 employees', \n    '10,000 or more employees'\n]\n\nfig = px.bar(data_u_for_graph, x=\"index\", y=\"Count\", text=\"Percent\", range_y=[0,1800])\n\nfig.update_traces(\n    hovertemplate=\"Company: %{x}<br>Count: %{y:,.0f}\",\n    marker_color='#CD5B45',\n    marker_opacity=0.7,\n    texttemplate=\"%{text:.0%}\",\n    textfont=textfont,\n    textposition='inside'\n)\nfig.update_layout(\n    xaxis=dict(\n        categoryorder= \"array\", \n        categoryarray= sorting,\n        title_text=\"\", \n        tickfont=tickfont,\n        titlefont=axistitlefont\n    ),\n    yaxis=dict(\n        tickfont=tickfont,\n        titlefont=axistitlefont,\n        tickformat=\",\", \n        title_text=\"Counts\"),\n    hoverlabel=hoverlabelformat,\n    margin=dict(pad=5, t=100),\n    height=500,\n    width=800,\n    title=dict(text=\"Company size (Usual users)\", font=titlefont),\n)\nfig.show()\n\n#---------------------------------------------\n\nfig = px.bar(data_s_for_graph, x=\"index\", y=\"Count\", text=\"Percent\", range_y=[0,1100])\n\nfig.update_traces(\n    hovertemplate=\"Company: %{x}<br>Count: %{y:,.0f}\",\n    marker_color='#4C9141',\n    marker_opacity=0.7,\n    texttemplate=\"%{text:.0%}\",\n    textfont=textfont,\n    textposition='inside'\n)\nfig.update_layout(\n    xaxis=dict(\n        categoryorder= \"array\", \n        categoryarray= sorting,\n        title_text=\"\", \n        tickfont=tickfont,\n        titlefont=axistitlefont\n    ),\n    yaxis=dict(\n        tickfont=tickfont,\n        titlefont=axistitlefont,\n        tickformat=\",\", \n        title_text=\"Counts\"),\n    hoverlabel=hoverlabelformat,\n    margin=dict(pad=5, t=100),\n    height=500,\n    width=800,\n    title=dict(text=\"Company size (Successful users)\", font=titlefont),\n)\nfig.show()","b60bc7fd":"data_u_for_graph = data_u[\"Q6\"].dropna()\npercentages_u = data_u_for_graph.value_counts(normalize=True).sort_values(ascending=False)\ncounts_u = data_u_for_graph.value_counts(normalize=False).sort_values(ascending=False)\n\ndata_s_for_graph = data_s[\"Q6\"].dropna()\npercentages_s = data_s_for_graph.value_counts(normalize=True).sort_values(ascending=False)\ncounts_s = data_s_for_graph.value_counts(normalize=False).sort_values(ascending=False)\n\ndata_u_for_graph = pd.DataFrame(\n    np.hstack([percentages_u.values.reshape(-1, 1), counts_u.values.reshape(-1, 1)]),\n    index=percentages_u.index,\n    columns=[\"Percent\", \"Count\"],\n).reset_index()\n\ndata_s_for_graph = pd.DataFrame(\n    np.hstack([percentages_s.values.reshape(-1, 1), counts_s.values.reshape(-1, 1)]),\n    index=percentages_s.index,\n    columns=[\"Percent\", \"Count\"],\n).reset_index()\n\nsorting = [\n    \"I have never written code\",\n    \"< 1 years\",\n    \"1-2 years\",\n    \"3-5 years\",\n    \"5-10 years\",\n    \"10-20 years\",\n    \"20+ years\",\n]\n\nfig = px.bar(data_u_for_graph, x=\"index\", y=\"Count\", text=\"Percent\", range_y=[0,3800])\n\nfig.update_traces(\n    hovertemplate=\"Programming: %{x}<br>Count: %{y:,.0f}\",\n    marker_color='#CD5B45',\n    marker_opacity=0.7,\n    texttemplate=\"%{text:.0%}\",\n    textfont=textfont,\n    textposition='inside'\n)\nfig.update_layout(\n    xaxis=dict(\n        categoryorder= \"array\", \n        categoryarray= sorting,\n        title_text=\"\", \n        tickfont=tickfont,\n        titlefont=axistitlefont\n    ),\n    yaxis=dict(\n        tickfont=tickfont,\n        titlefont=axistitlefont,\n        tickformat=\",\", \n        title_text=\"Counts\"),\n    hoverlabel=hoverlabelformat,\n    margin=dict(pad=5, t=100),\n    height=500,\n    width=800,\n    title=dict(text=\"Programming experience (Usual users)\", font=titlefont),\n)\nfig.add_shape(type=\"line\", y0=0, x0=0.5, y1=3800, x1=0.5, line=lineformat)\nfig.add_shape(type=\"line\", y0=0, x0=3.5, y1=3800, x1=3.5, line=lineformat)\n\nfig.add_vrect(x0=0.5, x1=3.5, y0=0, y1=1, fillcolor=\"darkgray\", opacity=0.2, layer=\"below\", line_width=0)\n\nfig.add_annotation(\n    y=3700, x=2,\n    xref='x',yref='y',\n    text='<b><i>73% usual users<\/i><b>',\n    textangle=0,\n    showarrow=False,\n    font=annotationfont\n)\nfig.show()\n\n#---------------------------------------------\n\nfig = px.bar(data_s_for_graph, x=\"index\", y=\"Count\", text=\"Percent\", range_y=[0,1000])\n\nfig.update_traces(\n    hovertemplate=\"Programming: %{x}<br>Count: %{y:,.0f}\",\n    marker_color='#4C9141',\n    marker_opacity=0.7,\n    texttemplate=\"%{text:.0%}\",\n    textfont=textfont,\n    textposition='inside'\n)\nfig.update_layout(\n    xaxis=dict(\n        categoryorder= \"array\", \n        categoryarray= sorting,\n        title_text=\"\", \n        tickfont=tickfont,\n        titlefont=axistitlefont\n    ),\n    yaxis=dict(\n        tickfont=tickfont,\n        titlefont=axistitlefont,\n        tickformat=\",\", \n        title_text=\"Counts\"),\n    hoverlabel=hoverlabelformat,\n    margin=dict(pad=5, t=100),\n    height=500,\n    width=800,\n    title=dict(text=\"Programming experience (Successful users)\", font=titlefont),\n)\nfig.add_shape(type=\"line\", y0=0, x0=2.5, y1=1000, x1=2.5, line=lineformat)\nfig.add_vrect(x0=2.5, x1=6.5, y0=0, y1=1, fillcolor=\"darkgray\", opacity=0.2, layer=\"below\", line_width=0)\n\nfig.add_annotation(\n    y=950, x=4.5,\n    xref='x',yref='y',\n    text='<b><i>82% succeded users<\/i><\/b>',\n    textangle=0,\n    showarrow=False,\n    font=annotationfont\n)\nfig.show()","710b0f63":"Q7_u = [question for question in data_u.columns if 'Q7' in question]\n\nprog_languages_u = []\nfor question in Q7_u:\n    for val in data_u[question].unique():\n        prog_languages_u.append(val)\n        \nprog_languages_u = [lang for lang in prog_languages_u if str(lang)!='nan']\npercent_langs_u = ((data_u.shape[0] - data_u[Q7_u].isnull().sum()) \/ data_u.shape[0]).sort_values(ascending=False)\npercent_langs_u.index = prog_languages_u\n\ndata_u_for_graph = pd.DataFrame(\n    percent_langs_u.values.reshape(-1, 1),\n    index=percent_langs_u.index,\n    columns=[\"Percent\"],\n).reset_index()\n\nQ7_s = [question for question in data_s.columns if 'Q7' in question]\n\nprog_languages_s = []\nfor question in Q7_s:\n    for val in data_s[question].unique():\n        prog_languages_s.append(val)\n        \nprog_languages_s = [lang for lang in prog_languages_s if str(lang)!='nan']\npercent_langs_s = ((data_s.shape[0] - data_s[Q7_s].isnull().sum()) \/ data_s.shape[0]).sort_values(ascending=False)\npercent_langs_s.index = prog_languages_s\n\ndata_s_for_graph = pd.DataFrame(\n    percent_langs_s.values.reshape(-1, 1),\n    index=percent_langs_s.index,\n    columns=[\"Percent\"],\n).reset_index()\n\nfig = px.bar(data_u_for_graph, x=\"index\", y=\"Percent\", text=\"Percent\", range_y=[0,0.9])\n\nfig.update_traces(\n    hovertemplate=\"Lang: %{x}<br>Percent: %{y:,.2f}\",\n    marker_color='#CD5B45',\n    marker_opacity=0.7,\n    texttemplate=\"%{text:.0%}\",\n    textfont=textfont,\n    textposition='inside'\n)\nfig.update_layout(\n    xaxis=dict(\n        title_text=\"\", \n        tickfont=tickfont,\n        titlefont=axistitlefont\n    ),\n    yaxis=dict(\n        tickfont=tickfont,\n        titlefont=axistitlefont,\n        tickformat=\",\", \n        title_text=\"Percent\"),\n    hoverlabel=hoverlabelformat,\n    margin=dict(pad=5, t=100),\n    height=500,\n    width=800,\n    title=dict(text=\"Programming languages (Usual users)\", font=titlefont),\n)\nfig.add_shape(type=\"line\", y0=0, x0=2.5, y1=0.9, x1=2.5, line=lineformat)\nfig.add_vrect(x0=-0.5, x1=2.5, y0=0, y1=1, fillcolor=\"darkgray\", opacity=0.2, layer=\"below\", line_width=0)\n\nfig.add_annotation(\n    y=0.85, x=1,\n    xref='x',yref='y',\n    text='<b><i>TOP-3 languages<\/i><b>',\n    textangle=0,\n    showarrow=False,\n    font=annotationfont\n)\nfig.show()\n\n#---------------------------------------------\n\nfig = px.bar(data_s_for_graph, x=\"index\", y=\"Percent\", text=\"Percent\", range_y=[0,0.9])\n\nfig.update_traces(\n    hovertemplate=\"Lang: %{x}<br>Percent: %{y:,.2f}\",\n    marker_color='#4C9141',\n    marker_opacity=0.7,\n    texttemplate=\"%{text:.0%}\",\n    textfont=textfont,\n    textposition='inside'\n)\nfig.update_layout(\n    xaxis=dict(\n        title_text=\"\", \n        tickfont=tickfont,\n        titlefont=axistitlefont\n    ),\n    yaxis=dict(\n        tickfont=tickfont,\n        titlefont=axistitlefont,\n        tickformat=\",\", \n        title_text=\"Percent\"),\n    hoverlabel=hoverlabelformat,\n    margin=dict(pad=5, t=100),\n    height=500,\n    width=800,\n    title=dict(text=\"Programming languages (Successful users)\", font=titlefont),\n)\nfig.add_shape(type=\"line\", y0=0, x0=2.5, y1=0.9, x1=2.5, line=lineformat)\nfig.add_vrect(x0=-0.5, x1=2.5, y0=0, y1=1, fillcolor=\"darkgray\", opacity=0.2, layer=\"below\", line_width=0)\n\nfig.add_annotation(\n    y=0.85, x=1,\n    xref='x',yref='y',\n    text='<b><i>TOP-3 languages<\/i><b>',\n    textangle=0,\n    showarrow=False,\n    font=annotationfont\n)\nfig.show()","05475b47":"Q9_u = [question for question in data_u.columns if 'Q9' in question]\n\nprog_languages_u = []\nfor question in Q9_u:\n    for val in data_u[question].unique():\n        prog_languages_u.append(val)\n        \nprog_languages_u = [lang for lang in prog_languages_u if str(lang)!='nan']\npercent_langs_u = ((data_u.shape[0] - data_u[Q9_u].isnull().sum()) \/ data_u.shape[0]).sort_values(ascending=False)\npercent_langs_u.index = prog_languages_u\n\ndata_u_for_graph = pd.DataFrame(\n    percent_langs_u.values.reshape(-1, 1),\n    index=percent_langs_u.index,\n    columns=[\"Percent\"],\n).reset_index()\n\nQ9_s = [question for question in data_s.columns if 'Q9' in question]\n\nprog_languages_s = []\nfor question in Q9_s:\n    for val in data_s[question].unique():\n        prog_languages_s.append(val)\n        \nprog_languages_s = [lang for lang in prog_languages_s if str(lang)!='nan']\npercent_langs_s = ((data_s.shape[0] - data_s[Q9_s].isnull().sum()) \/ data_s.shape[0]).sort_values(ascending=False)\npercent_langs_s.index = prog_languages_s\n\ndata_s_for_graph = pd.DataFrame(\n    percent_langs_s.values.reshape(-1, 1),\n    index=percent_langs_s.index,\n    columns=[\"Percent\"],\n).reset_index()\n\nfig = px.bar(data_u_for_graph, x=\"index\", y=\"Percent\", text=\"Percent\", range_y=[0,0.65])\n\nfig.update_traces(\n    hovertemplate=\"Framework: %{x}<br>Percent: %{y:,.2f}\",\n    marker_color='#CD5B45',\n    marker_opacity=0.7,\n    texttemplate=\"%{text:.0%}\",\n    textfont=textfont,\n    textposition='inside'\n)\nfig.update_layout(\n    xaxis=dict(\n        title_text=\"\", \n        tickfont=tickfont,\n        titlefont=axistitlefont\n    ),\n    yaxis=dict(\n        tickfont=tickfont,\n        titlefont=axistitlefont,\n        tickformat=\",\", \n        title_text=\"Percent\"),\n    hoverlabel=hoverlabelformat,\n    margin=dict(pad=5, t=100),\n    height=500,\n    width=800,\n    title=dict(text=\"Usage of programming frameworks (Usual users)\", font=titlefont),\n)\nfig.add_shape(type=\"line\", y0=0, x0=2.5, y1=0.9, x1=2.5, line=lineformat)\nfig.add_vrect(x0=-0.5, x1=2.5, y0=0, y1=1, fillcolor=\"darkgray\", opacity=0.2, layer=\"below\", line_width=0)\n\nfig.add_annotation(\n    y=0.62, x=1,\n    xref='x',yref='y',\n    text='<b><i>TOP-3 Frameworks<\/i><b>',\n    textangle=0,\n    showarrow=False,\n    font=annotationfont\n)\nfig.show()\n\n#---------------------------------------------\n\nfig = px.bar(data_s_for_graph, x=\"index\", y=\"Percent\", text=\"Percent\", range_y=[0,0.64])\n\nfig.update_traces(\n    hovertemplate=\"Framework: %{x}<br>Percent: %{y:,.2f}\",\n    marker_color='#4C9141',\n    marker_opacity=0.7,\n    texttemplate=\"%{text:.0%}\",\n    textfont=textfont,\n    textposition='inside'\n)\nfig.update_layout(\n    xaxis=dict(\n        title_text=\"\", \n        tickfont=tickfont,\n        titlefont=axistitlefont\n    ),\n    yaxis=dict(\n        tickfont=tickfont,\n        titlefont=axistitlefont,\n        tickformat=\",\", \n        title_text=\"Percent\"),\n    hoverlabel=hoverlabelformat,\n    margin=dict(pad=5, t=100),\n    height=500,\n    width=800,\n    title=dict(text=\"Usage of programming frameworks (Successful users)\", font=titlefont),\n)\nfig.add_shape(type=\"line\", y0=0, x0=2.5, y1=0.9, x1=2.5, line=lineformat)\nfig.add_vrect(x0=-0.5, x1=2.5, y0=0, y1=1, fillcolor=\"darkgray\", opacity=0.2, layer=\"below\", line_width=0)\n\nfig.add_annotation(\n    y=0.62, x=1,\n    xref='x',yref='y',\n    text='<b><i>TOP-3 Frameworks<\/i><b>',\n    textangle=0,\n    showarrow=False,\n    font=annotationfont\n)\nfig.show()","6b39a981":"Q10_u = [question for question in data_u.columns if 'Q10' in question]\n\nprog_languages_u = []\nfor question in Q10_u:\n    for val in data_u[question].unique():\n        prog_languages_u.append(val)\n        \nprog_languages_u = [lang for lang in prog_languages_u if str(lang)!='nan']\npercent_langs_u = ((data_u.shape[0] - data_u[Q10_u].isnull().sum()) \/ data_u.shape[0]).sort_values(ascending=False)\npercent_langs_u.index = prog_languages_u\n\ndata_u_for_graph = pd.DataFrame(\n    percent_langs_u.values.reshape(-1, 1),\n    index=percent_langs_u.index,\n    columns=[\"Percent\"],\n).reset_index()\n\nQ10_s = [question for question in data_s.columns if 'Q10' in question]\n\nprog_languages_s = []\nfor question in Q10_s:\n    for val in data_s[question].unique():\n        prog_languages_s.append(val)\n        \nprog_languages_s = [lang for lang in prog_languages_s if str(lang)!='nan']\npercent_langs_s = ((data_s.shape[0] - data_s[Q10_s].isnull().sum()) \/ data_s.shape[0]).sort_values(ascending=False)\npercent_langs_s.index = prog_languages_s\n\ndata_s_for_graph = pd.DataFrame(\n    percent_langs_s.values.reshape(-1, 1),\n    index=percent_langs_s.index,\n    columns=[\"Percent\"],\n).reset_index()\n\nfig = px.bar(data_u_for_graph, x=\"index\", y=\"Percent\", text=\"Percent\", range_y=[0,0.38])\n\nfig.update_traces(\n    hovertemplate=\"Notebook: %{x}<br>Percent: %{y:,.2f}\",\n    marker_color='#CD5B45',\n    marker_opacity=0.7,\n    texttemplate=\"%{text:.0%}\",\n    textfont=textfont,\n    textposition='inside'\n)\nfig.update_layout(\n    xaxis=dict(\n        title_text=\"\", \n        tickfont=tickfont,\n        titlefont=axistitlefont\n    ),\n    yaxis=dict(\n        tickfont=tickfont,\n        titlefont=axistitlefont,\n        tickformat=\",\", \n        title_text=\"Percent\"),\n    hoverlabel=hoverlabelformat,\n    margin=dict(pad=5, t=100),\n    height=500,\n    width=800,\n    title=dict(text=\"Usage of notebooks (Usual users)\", font=titlefont),\n)\nfig.add_shape(type=\"line\", y0=0, x0=2.5, y1=0.9, x1=2.5, line=lineformat)\nfig.add_vrect(x0=-0.5, x1=2.5, y0=0, y1=1, fillcolor=\"darkgray\", opacity=0.2, layer=\"below\", line_width=0)\n\nfig.add_annotation(\n    y=0.37, x=1,\n    xref='x',yref='y',\n    text='<b><i>TOP-3 Notebooks<\/i><b>',\n    textangle=0,\n    showarrow=False,\n    font=annotationfont\n)\nfig.show()\n\n#---------------------------------------------\n\nfig = px.bar(data_s_for_graph, x=\"index\", y=\"Percent\", text=\"Percent\", range_y=[0,0.4])\n\nfig.update_traces(\n    hovertemplate=\"Notebook: %{x}<br>Percent: %{y:,.2f}\",\n    marker_color='#4C9141',\n    marker_opacity=0.7,\n    texttemplate=\"%{text:.0%}\",\n    textfont=textfont,\n    textposition='inside'\n)\nfig.update_layout(\n    xaxis=dict(\n        title_text=\"\", \n        tickfont=tickfont,\n        titlefont=axistitlefont\n    ),\n    yaxis=dict(\n        tickfont=tickfont,\n        titlefont=axistitlefont,\n        tickformat=\",\", \n        title_text=\"Percent\"),\n    hoverlabel=hoverlabelformat,\n    margin=dict(pad=5, t=100),\n    height=500,\n    width=800,\n    title=dict(text=\"Usage of notebooks (Successful users)\", font=titlefont),\n)\nfig.add_shape(type=\"line\", y0=0, x0=2.5, y1=0.9, x1=2.5, line=lineformat)\nfig.add_vrect(x0=-0.5, x1=2.5, y0=0, y1=1, fillcolor=\"darkgray\", opacity=0.2, layer=\"below\", line_width=0)\n\nfig.add_annotation(\n    y=0.39, x=1,\n    xref='x',yref='y',\n    text='<b><i>TOP-3 Notebooks<\/i><b>',\n    textangle=0,\n    showarrow=False,\n    font=annotationfont\n)\nfig.show()","1d8136c8":"Q14_u = [question for question in data_u.columns if 'Q14' in question]\n\nprog_languages_u = []\nfor question in Q14_u:\n    for val in data_u[question].unique():\n        prog_languages_u.append(val)\n        \nprog_languages_u = [lang for lang in prog_languages_u if str(lang)!='nan']\npercent_langs_u = ((data_u.shape[0] - data_u[Q14_u].isnull().sum()) \/ data_u.shape[0]).sort_values(ascending=False)\npercent_langs_u.index = prog_languages_u\n\ndata_u_for_graph = pd.DataFrame(\n    percent_langs_u.values.reshape(-1, 1),\n    index=percent_langs_u.index,\n    columns=[\"Percent\"],\n).reset_index()\n\nQ14_s = [question for question in data_s.columns if 'Q14' in question]\n\nprog_languages_s = []\nfor question in Q14_s:\n    for val in data_s[question].unique():\n        prog_languages_s.append(val)\n        \nprog_languages_s = [lang for lang in prog_languages_s if str(lang)!='nan']\npercent_langs_s = ((data_s.shape[0] - data_s[Q14_s].isnull().sum()) \/ data_s.shape[0]).sort_values(ascending=False)\npercent_langs_s.index = prog_languages_s\n\ndata_s_for_graph = pd.DataFrame(\n    percent_langs_s.values.reshape(-1, 1),\n    index=percent_langs_s.index,\n    columns=[\"Percent\"],\n).reset_index()\n\nfig = px.bar(data_u_for_graph, x=\"index\", y=\"Percent\", text=\"Percent\", range_y=[0,0.7])\n\nfig.update_traces(\n    hovertemplate=\"Framework: %{x}<br>Percent: %{y:,.2f}\",\n    marker_color='#CD5B45',\n    marker_opacity=0.7,\n    texttemplate=\"%{text:.0%}\",\n    textfont=textfont,\n    textposition='inside'\n)\nfig.update_layout(\n    xaxis=dict(\n        title_text=\"\", \n        tickfont=tickfont,\n        titlefont=axistitlefont\n    ),\n    yaxis=dict(\n        tickfont=tickfont,\n        titlefont=axistitlefont,\n        tickformat=\",\", \n        title_text=\"Percent\"),\n    hoverlabel=hoverlabelformat,\n    margin=dict(pad=5, t=100),\n    height=500,\n    width=800,\n    title=dict(text=\"Usage of visualizations (Usual users)\", font=titlefont),\n)\nfig.add_shape(type=\"line\", y0=0, x0=2.5, y1=0.9, x1=2.5, line=lineformat)\nfig.add_vrect(x0=-0.5, x1=2.5, y0=0, y1=1, fillcolor=\"darkgray\", opacity=0.2, layer=\"below\", line_width=0)\n\nfig.add_annotation(\n    y=0.68, x=1,\n    xref='x',yref='y',\n    text='<b><i>TOP-3 Visualizations<\/i><b>',\n    textangle=0,\n    showarrow=False,\n    font=annotationfont\n)\nfig.show()\n\n#---------------------------------------------\n\nfig = px.bar(data_s_for_graph, x=\"index\", y=\"Percent\", text=\"Percent\", range_y=[0,0.75])\n\nfig.update_traces(\n    hovertemplate=\"Framework: %{x}<br>Percent: %{y:,.2f}\",\n    marker_color='#4C9141',\n    marker_opacity=0.7,\n    texttemplate=\"%{text:.0%}\",\n    textfont=textfont,\n    textposition='inside'\n)\nfig.update_layout(\n    xaxis=dict(\n        title_text=\"\", \n        tickfont=tickfont,\n        titlefont=axistitlefont\n    ),\n    yaxis=dict(\n        tickfont=tickfont,\n        titlefont=axistitlefont,\n        tickformat=\",\", \n        title_text=\"Percent\"),\n    hoverlabel=hoverlabelformat,\n    margin=dict(pad=5, t=100),\n    height=500,\n    width=800,\n    title=dict(text=\"Usage of visualizations (Successful users)\", font=titlefont),\n)\nfig.add_shape(type=\"line\", y0=0, x0=2.5, y1=0.9, x1=2.5, line=lineformat)\nfig.add_vrect(x0=-0.5, x1=2.5, y0=0, y1=1, fillcolor=\"darkgray\", opacity=0.2, layer=\"below\", line_width=0)\n\nfig.add_annotation(\n    y=0.72, x=1,\n    xref='x',yref='y',\n    text='<b><i>TOP-3 Visualizations<\/i><b>',\n    textangle=0,\n    showarrow=False,\n    font=annotationfont\n)\nfig.show()","5f3b4ad1":"data_u_for_graph = data_u[\"Q15\"].dropna()\npercentages_u = data_u_for_graph.value_counts(normalize=True)\ncounts_u = data_u_for_graph.value_counts(normalize=False)\n\ndata_s_for_graph = data_s[\"Q15\"].dropna()\npercentages_s = data_s_for_graph.value_counts(normalize=True)\ncounts_s = data_s_for_graph.value_counts(normalize=False)\n\ndata_u_for_graph = pd.DataFrame(\n    np.hstack([percentages_u.values.reshape(-1, 1), counts_u.values.reshape(-1, 1)]),\n    index=percentages_u.index,\n    columns=[\"Percent\", \"Count\"],\n).reset_index()\n\ndata_s_for_graph = pd.DataFrame(\n    np.hstack([percentages_s.values.reshape(-1, 1), counts_s.values.reshape(-1, 1)]),\n    index=percentages_s.index,\n    columns=[\"Percent\", \"Count\"],\n).reset_index()\n\nsorting = [\n    \"I do not use machine learning methods\",\n    \"Under 1 year\",\n    \"1-2 years\",\n    \"2-3 years\",\n    \"3-4 years\",\n    \"4-5 years\",\n    \"5-10 years\",\n    \"10-20 years\",\n    \"20 or more years\",\n]\n\nfig = px.bar(data_u_for_graph, x=\"index\", y=\"Count\", text=\"Percent\", range_y=[0,5000])\n\nfig.update_traces(\n    hovertemplate=\"Experience: %{x}<br>Count: %{y:,.0f}\",\n    marker_color='#CD5B45',\n    marker_opacity=0.7,\n    texttemplate=\"%{text:.0%}\",\n    textfont=textfont,\n    textposition='inside'\n)\nfig.update_layout(\n    xaxis=dict(\n        categoryorder= \"array\", \n        categoryarray= sorting,\n        title_text=\"\", \n        tickfont=tickfont,\n        titlefont=axistitlefont\n    ),\n    yaxis=dict(\n        tickfont=tickfont,\n        titlefont=axistitlefont,\n        tickformat=\",\", \n        title_text=\"Counts\"),\n    hoverlabel=hoverlabelformat,\n    margin=dict(pad=5, t=100),\n    height=500,\n    width=800,\n    title=dict(text=\"ML experience (Usual users)\", font=titlefont),\n)\nfig.add_shape(type=\"line\", y0=0, x0=0.5, y1=5700, x1=0.5, line=lineformat)\nfig.add_shape(type=\"line\", y0=0, x0=2.5, y1=5700, x1=2.5, line=lineformat)\nfig.add_vrect(x0=0.5, x1=2.5, y0=0, y1=1, fillcolor=\"darkgray\", opacity=0.2, layer=\"below\", line_width=0)\n\nfig.add_annotation(\n    y=4800, x=1.5,\n    xref='x',yref='y',\n    text='<b><i>67% usual users<\/i><b>',\n    textangle=0,\n    showarrow=False,\n    font=annotationfont\n)\nfig.show()\n\n#---------------------------------------------\n\nfig = px.bar(data_s_for_graph, x=\"index\", y=\"Count\", text=\"Percent\", range_y=[0,850])\n\nfig.update_traces(\n    hovertemplate=\"Users: %{x}<br>Count: %{y:,.0f}\",\n    marker_color='#4C9141',\n    marker_opacity=0.7,\n    texttemplate=\"%{text:.0%}\",\n    textfont=textfont,\n    textposition='inside'\n)\nfig.update_layout(\n    xaxis=dict(\n        categoryorder= \"array\", \n        categoryarray= sorting,\n        title_text=\"\", \n        tickfont=tickfont,\n        titlefont=axistitlefont\n    ),\n    yaxis=dict(\n        tickfont=tickfont,\n        titlefont=axistitlefont,\n        tickformat=\",\", \n        title_text=\"Counts\"),\n    hoverlabel=hoverlabelformat,\n    margin=dict(pad=5, t=100),\n    height=500,\n    width=800,\n    title=dict(text=\"ML experience (Successful users)\", font=titlefont),\n)\nfig.add_shape(type=\"line\", y0=0, x0=0.5, y1=1250, x1=0.5, line=lineformat)\nfig.add_shape(type=\"line\", y0=0, x0=2.5, y1=1250, x1=2.5, line=lineformat)\nfig.add_shape(type=\"line\", y0=0, x0=5.5, y1=1250, x1=5.5, line=lineformat)\nfig.add_shape(type=\"line\", y0=0, x0=6.5, y1=1250, x1=6.5, line=lineformat)\nfig.add_vrect(x0=0.5, x1=2.5, y0=0, y1=1, fillcolor=\"darkgray\", opacity=0.2, layer=\"below\", line_width=0)\nfig.add_vrect(x0=5.5, x1=6.5, y0=0, y1=1, fillcolor=\"darkgray\", opacity=0.2, layer=\"below\", line_width=0)\n\nfig.add_annotation(\n    y=800, x=4,\n    xref='x',yref='y',\n    text='<b><i>50% successful users<\/i><b>',\n    textangle=0,\n    showarrow=False,\n    font=annotationfont\n)\nfig.show()","dc22e65d":"Q16_u = [question for question in data_u.columns if 'Q16' in question]\n\nprog_languages_u = []\nfor question in Q16_u:\n    for val in data_u[question].unique():\n        prog_languages_u.append(val)\n        \nprog_languages_u = [lang for lang in prog_languages_u if str(lang)!='nan']\npercent_langs_u = ((data_u.shape[0] - data_u[Q16_u].isnull().sum()) \/ data_u.shape[0]).sort_values(ascending=False)\npercent_langs_u.index = prog_languages_u\n\ndata_u_for_graph = pd.DataFrame(\n    percent_langs_u.values.reshape(-1, 1),\n    index=percent_langs_u.index,\n    columns=[\"Percent\"],\n).reset_index()\n\nQ16_s = [question for question in data_s.columns if 'Q16' in question]\n\nprog_languages_s = []\nfor question in Q16_s:\n    for val in data_s[question].unique():\n        prog_languages_s.append(val)\n        \nprog_languages_s = [lang for lang in prog_languages_s if str(lang)!='nan']\npercent_langs_s = ((data_s.shape[0] - data_s[Q16_s].isnull().sum()) \/ data_s.shape[0]).sort_values(ascending=False)\npercent_langs_s.index = prog_languages_s\n\ndata_s_for_graph = pd.DataFrame(\n    percent_langs_s.values.reshape(-1, 1),\n    index=percent_langs_s.index,\n    columns=[\"Percent\"],\n).reset_index()\n\nfig = px.bar(data_u_for_graph, x=\"index\", y=\"Percent\", text=\"Percent\", range_y=[0,0.6])\n\nfig.update_traces(\n    hovertemplate=\"ML Framework: %{x}<br>Percent: %{y:,.2f}\",\n    marker_color='#CD5B45',\n    marker_opacity=0.7,\n    texttemplate=\"%{text:.0%}\",\n    textfont=textfont,\n    textposition='inside'\n)\nfig.update_layout(\n    xaxis=dict(\n        title_text=\"\", \n        tickfont=tickfont,\n        titlefont=axistitlefont\n    ),\n    yaxis=dict(\n        tickfont=tickfont,\n        titlefont=axistitlefont,\n        tickformat=\",\", \n        title_text=\"Percent\"),\n    hoverlabel=hoverlabelformat,\n    margin=dict(pad=5, t=100),\n    height=500,\n    width=800,\n    title=dict(text=\"Usage of ML frameworks (Usual users)\", font=titlefont),\n)\nfig.add_shape(type=\"line\", y0=0, x0=2.5, y1=0.9, x1=2.5, line=lineformat)\nfig.add_vrect(x0=-1, x1=2.5, y0=0, y1=1, fillcolor=\"darkgray\", opacity=0.2, layer=\"below\", line_width=0)\n\nfig.add_annotation(\n    y=0.57, x=1,\n    xref='x',yref='y',\n    text='<b><i>TOP-3 Frameworks<\/i><b>',\n    textangle=0,\n    showarrow=False,\n    font=annotationfont\n)\nfig.show()\n\n#---------------------------------------------\n\nfig = px.bar(data_s_for_graph, x=\"index\", y=\"Percent\", text=\"Percent\", range_y=[0,0.7])\n\nfig.update_traces(\n    hovertemplate=\"ML Framework: %{x}<br>Percent: %{y:,.2f}\",\n    marker_color='#4C9141',\n    marker_opacity=0.7,\n    texttemplate=\"%{text:.0%}\",\n    textfont=textfont,\n    textposition='inside'\n)\nfig.update_layout(\n    xaxis=dict(\n        title_text=\"\", \n        tickfont=tickfont,\n        titlefont=axistitlefont\n    ),\n    yaxis=dict(\n        tickfont=tickfont,\n        titlefont=axistitlefont,\n        tickformat=\",\", \n        title_text=\"Percent\"),\n    hoverlabel=hoverlabelformat,\n    margin=dict(pad=5, t=100),\n    height=500,\n    width=800,\n    title=dict(text=\"Usage of ML frameworks (Successful users)\", font=titlefont),\n)\nfig.add_shape(type=\"line\", y0=0, x0=2.5, y1=0.9, x1=2.5, line=lineformat)\nfig.add_vrect(x0=-1, x1=2.5, y0=0, y1=1, fillcolor=\"darkgray\", opacity=0.2, layer=\"below\", line_width=0)\n\nfig.add_annotation(\n    y=0.67, x=1,\n    xref='x',yref='y',\n    text='<b><i>TOP-3 Frameworks<\/i><b>',\n    textangle=0,\n    showarrow=False,\n    font=annotationfont\n)\nfig.show()","1163cbd0":"Q17_u = [question for question in data_u.columns if 'Q17' in question]\n\nprog_languages_u = []\nfor question in Q17_u:\n    for val in data_u[question].unique():\n        prog_languages_u.append(val)\n        \nprog_languages_u = [lang for lang in prog_languages_u if str(lang)!='nan']\npercent_langs_u = ((data_u.shape[0] - data_u[Q17_u].isnull().sum()) \/ data_u.shape[0]).sort_values(ascending=False)\npercent_langs_u.index = prog_languages_u\n\ndata_u_for_graph = pd.DataFrame(\n    percent_langs_u.values.reshape(-1, 1),\n    index=percent_langs_u.index,\n    columns=[\"Percent\"],\n).reset_index()\n\ndata_u_for_graph.loc[data_u_for_graph['index'] == \"Gradient Boosting Machines (xgboost, lightgbm, etc)\", 'index'] = \"Gradient Boosting Machines\"\ndata_u_for_graph.loc[data_u_for_graph['index'] == \"Dense Neural Networks (MLPs, etc)\", 'index'] = \"Dense Neural Networks\"\ndata_u_for_graph.loc[data_u_for_graph['index'] == \"Transformer Networks (BERT, gpt-3, etc)\", 'index'] = \"Transformer Networks\"\n\nQ17_s = [question for question in data_s.columns if 'Q17' in question]\n\nprog_languages_s = []\nfor question in Q17_s:\n    for val in data_s[question].unique():\n        prog_languages_s.append(val)\n        \nprog_languages_s = [lang for lang in prog_languages_s if str(lang)!='nan']\npercent_langs_s = ((data_s.shape[0] - data_s[Q17_s].isnull().sum()) \/ data_s.shape[0]).sort_values(ascending=False)\npercent_langs_s.index = prog_languages_s\n\ndata_s_for_graph = pd.DataFrame(\n    percent_langs_s.values.reshape(-1, 1),\n    index=percent_langs_s.index,\n    columns=[\"Percent\"],\n).reset_index()\n\ndata_s_for_graph.loc[data_s_for_graph['index'] == \"Gradient Boosting Machines (xgboost, lightgbm, etc)\", 'index'] = \"Gradient Boosting Machines\"\ndata_s_for_graph.loc[data_s_for_graph['index'] == \"Dense Neural Networks (MLPs, etc)\", 'index'] = \"Dense Neural Networks\"\ndata_s_for_graph.loc[data_s_for_graph['index'] == \"Transformer Networks (BERT, gpt-3, etc)\", 'index'] = \"Transformer Networks\"\n\nfig = px.bar(data_u_for_graph, x=\"index\", y=\"Percent\", text=\"Percent\", range_y=[0,0.6])\n\nfig.update_traces(\n    hovertemplate=\"ML Methods: %{x}<br>Percent: %{y:,.2f}\",\n    marker_color='#CD5B45',\n    marker_opacity=0.7,\n    texttemplate=\"%{text:.0%}\",\n    textfont=textfont,\n    textposition='inside'\n)\nfig.update_layout(\n    xaxis=dict(\n        title_text=\"\", \n        tickfont=tickfont,\n        titlefont=axistitlefont\n    ),\n    yaxis=dict(\n        tickfont=tickfont,\n        titlefont=axistitlefont,\n        tickformat=\",\", \n        title_text=\"Percent\"),\n    hoverlabel=hoverlabelformat,\n    margin=dict(pad=5, t=100),\n    height=500,\n    width=800,\n    title=dict(text=\"Usage of ML Methods (Usual users)\", font=titlefont),\n)\nfig.add_shape(type=\"line\", y0=0, x0=2.5, y1=0.9, x1=2.5, line=lineformat)\nfig.add_vrect(x0=-1, x1=2.5, y0=0, y1=1, fillcolor=\"darkgray\", opacity=0.2, layer=\"below\", line_width=0)\n\nfig.add_annotation(\n    y=0.57, x=1,\n    xref='x',yref='y',\n    text='<b><i>TOP-3 Methods<\/i><b>',\n    textangle=0,\n    showarrow=False,\n    font=annotationfont\n)\nfig.show()\n\n#---------------------------------------------\n\nfig = px.bar(data_s_for_graph, x=\"index\", y=\"Percent\", text=\"Percent\", range_y=[0,0.75])\n\nfig.update_traces(\n    hovertemplate=\"ML Methods: %{x}<br>Percent: %{y:,.2f}\",\n    marker_color='#4C9141',\n    marker_opacity=0.7,\n    texttemplate=\"%{text:.0%}\",\n    textfont=textfont,\n    textposition='inside'\n)\nfig.update_layout(\n    xaxis=dict(\n        title_text=\"\", \n        tickfont=tickfont,\n        titlefont=axistitlefont\n    ),\n    yaxis=dict(\n        tickfont=tickfont,\n        titlefont=axistitlefont,\n        tickformat=\",\", \n        title_text=\"Percent\"),\n    hoverlabel=hoverlabelformat,\n    margin=dict(pad=5, t=100),\n    height=500,\n    width=800,\n    title=dict(text=\"Usage of ML Methods (Successful users)\", font=titlefont),\n)\nfig.add_shape(type=\"line\", y0=0, x0=2.5, y1=0.9, x1=2.5, line=lineformat)\nfig.add_vrect(x0=-1, x1=2.5, y0=0, y1=1, fillcolor=\"darkgray\", opacity=0.2, layer=\"below\", line_width=0)\n\nfig.add_annotation(\n    y=0.72, x=1,\n    xref='x',yref='y',\n    text='<b><i>TOP-3 Methods<\/i><b>',\n    textangle=0,\n    showarrow=False,\n    font=annotationfont\n)\nfig.show()","e4982278":"Q18_u = [question for question in data_u.columns if 'Q18' in question]\n\nprog_languages_u = []\nfor question in Q18_u:\n    for val in data_u[question].unique():\n        prog_languages_u.append(val)\n        \nprog_languages_u = [lang for lang in prog_languages_u if str(lang)!='nan']\npercent_langs_u = ((data_u.shape[0] - data_u[Q18_u].isnull().sum()) \/ data_u.shape[0]).sort_values(ascending=False)\npercent_langs_u.index = prog_languages_u\n\ndata_u_for_graph = pd.DataFrame(\n    percent_langs_u.values.reshape(-1, 1),\n    index=percent_langs_u.index,\n    columns=[\"Percent\"],\n).reset_index()\n\ndata_u_for_graph.loc[data_u_for_graph['index'] == \"General purpose image\/video tools (PIL, cv2, skimage, etc)\", 'index'] = \"General purpose image\/video tools\"\ndata_u_for_graph.loc[data_u_for_graph['index'] == \"Image segmentation methods (U-Net, Mask R-CNN, etc)\", 'index'] = \"Image segmentation methods\"\ndata_u_for_graph.loc[data_u_for_graph['index'] == \"Object detection methods (YOLOv3, RetinaNet, etc)\", 'index'] = \"Object detection methods\"\ndata_u_for_graph.loc[data_u_for_graph['index'] == \"Image classification and other general purpose networks (VGG, Inception, ResNet, ResNeXt, NASNet, EfficientNet, etc)\", 'index'] = \"Image classification & oth general networks\"\ndata_u_for_graph.loc[data_u_for_graph['index'] == \"Generative Networks (GAN, VAE, etc)\", 'index'] = \"Generative Networks\"\n\nQ18_s = [question for question in data_s.columns if 'Q18' in question]\n\nprog_languages_s = []\nfor question in Q18_s:\n    for val in data_s[question].unique():\n        prog_languages_s.append(val)\n        \nprog_languages_s = [lang for lang in prog_languages_s if str(lang)!='nan']\npercent_langs_s = ((data_s.shape[0] - data_s[Q18_s].isnull().sum()) \/ data_s.shape[0]).sort_values(ascending=False)\npercent_langs_s.index = prog_languages_s\n\ndata_s_for_graph = pd.DataFrame(\n    percent_langs_s.values.reshape(-1, 1),\n    index=percent_langs_s.index,\n    columns=[\"Percent\"],\n).reset_index()\n\ndata_s_for_graph.loc[data_s_for_graph['index'] == \"General purpose image\/video tools (PIL, cv2, skimage, etc)\", 'index'] = \"General purpose image\/video tools\"\ndata_s_for_graph.loc[data_s_for_graph['index'] == \"Image segmentation methods (U-Net, Mask R-CNN, etc)\", 'index'] = \"Image segmentation methods\"\ndata_s_for_graph.loc[data_s_for_graph['index'] == \"Object detection methods (YOLOv3, RetinaNet, etc)\", 'index'] = \"Object detection methods\"\ndata_s_for_graph.loc[data_s_for_graph['index'] == \"Image classification and other general purpose networks (VGG, Inception, ResNet, ResNeXt, NASNet, EfficientNet, etc)\", 'index'] = \"Image classification & oth general networks\"\ndata_s_for_graph.loc[data_s_for_graph['index'] == \"Generative Networks (GAN, VAE, etc)\", 'index'] = \"Generative Networks\"\n\nfig = px.bar(data_u_for_graph, x=\"Percent\", y=\"index\", text=\"Percent\",orientation=\"h\", range_x=[0,0.2])\n\nfig.update_traces(\n    hovertemplate=\"Method: %{y}<br>Percent: %{x:,.0f}\",\n    marker_color='#CD5B45',\n    marker_opacity=0.7,\n    texttemplate=\"%{text:.0%}\",\n    textfont=textfont,\n    textposition='inside'\n)\nfig.update_layout(\n    yaxis=dict(\n        categoryorder= \"total ascending\",\n        title_text=\"\", \n        tickfont=tickfont,\n        titlefont=axistitlefont\n    ),\n    xaxis=dict(\n        tickfont=tickfont,\n        titlefont=axistitlefont,\n        tickformat=\",\", \n        title_text=\"\"),\n    hoverlabel=hoverlabelformat,\n    margin=dict(pad=5, t=100),\n    height=500,\n    width=800,\n    title=dict(text=\"Usage of CV Methods (Usual users)\", font=titlefont),\n)\nfig.show()\n\nfig = px.bar(data_s_for_graph, x=\"Percent\", y=\"index\", text=\"Percent\",orientation=\"h\", range_x=[0,0.25])\n\nfig.update_traces(\n    hovertemplate=\"Method: %{y}<br>Percent: %{x:,.0f}\",\n    marker_color='#4C9141',\n    marker_opacity=0.7,\n    texttemplate=\"%{text:.0%}\",\n    textfont=textfont,\n    textposition='inside'\n)\nfig.update_layout(\n    yaxis=dict(\n        categoryorder= \"total ascending\",\n        title_text=\"\", \n        tickfont=tickfont,\n        titlefont=axistitlefont\n    ),\n    xaxis=dict(\n        tickfont=tickfont,\n        titlefont=axistitlefont,\n        tickformat=\",\", \n        title_text=\"\"),\n    hoverlabel=hoverlabelformat,\n    margin=dict(pad=5, t=100),\n    height=500,\n    width=800,\n    title=dict(text=\"Usage of CV Methods (Successful users)\", font=titlefont),\n)\nfig.show()","e254611d":"Q19_u = [question for question in data_u.columns if 'Q19' in question]\n\nprog_languages_u = []\nfor question in Q19_u:\n    for val in data_u[question].unique():\n        prog_languages_u.append(val)\n        \nprog_languages_u = [lang for lang in prog_languages_u if str(lang)!='nan']\npercent_langs_u = ((data_u.shape[0] - data_u[Q19_u].isnull().sum()) \/ data_u.shape[0]).sort_values(ascending=False)\npercent_langs_u.index = prog_languages_u\n\ndata_u_for_graph = pd.DataFrame(\n    percent_langs_u.values.reshape(-1, 1),\n    index=percent_langs_u.index,\n    columns=[\"Percent\"],\n).reset_index()\n\ndata_u_for_graph.loc[data_u_for_graph['index'] == \"Word embeddings\/vectors (GLoVe, fastText, word2vec)\", 'index'] = \"Word embeddings\\n\/vectors\"\ndata_u_for_graph.loc[data_u_for_graph['index'] == \"Encoder-decorder models (seq2seq, vanilla transformers)\", 'index'] = \"Encoder-decoder\\nmodels\"\ndata_u_for_graph.loc[data_u_for_graph['index'] == \"Contextualized embeddings (ELMo, CoVe)\", 'index'] = \"Contextualized\\nembeddings\"\ndata_u_for_graph.loc[data_u_for_graph['index'] == \"Transformer language models (GPT-3, BERT, XLnet, etc)\", 'index'] = \"Transformer\\nlanguage models\"\n\nQ19_s = [question for question in data_s.columns if 'Q19' in question]\n\nprog_languages_s = []\nfor question in Q19_s:\n    for val in data_s[question].unique():\n        prog_languages_s.append(val)\n        \nprog_languages_s = [lang for lang in prog_languages_s if str(lang)!='nan']\npercent_langs_s = ((data_s.shape[0] - data_s[Q19_s].isnull().sum()) \/ data_s.shape[0]).sort_values(ascending=False)\npercent_langs_s.index = prog_languages_s\n\ndata_s_for_graph = pd.DataFrame(\n    percent_langs_s.values.reshape(-1, 1),\n    index=percent_langs_s.index,\n    columns=[\"Percent\"],\n).reset_index()\n\ndata_s_for_graph.loc[data_s_for_graph['index'] == \"Word embeddings\/vectors (GLoVe, fastText, word2vec)\", 'index'] = \"Word embeddings\\n\/vectors\"\ndata_s_for_graph.loc[data_s_for_graph['index'] == \"Encoder-decorder models (seq2seq, vanilla transformers)\", 'index'] = \"Encoder-decoder\\nmodels\"\ndata_s_for_graph.loc[data_s_for_graph['index'] == \"Contextualized embeddings (ELMo, CoVe)\", 'index'] = \"Contextualized\\nembeddings\"\ndata_s_for_graph.loc[data_s_for_graph['index'] == \"Transformer language models (GPT-3, BERT, XLnet, etc)\", 'index'] = \"Transformer\\nlanguage models\"\n\nfig = px.bar(data_u_for_graph, x=\"Percent\", y=\"index\", text=\"Percent\",orientation=\"h\", range_x=[0,0.11])\n\nfig.update_traces(\n    hovertemplate=\"Method: %{y}<br>Percent: %{x:,.0f}\",\n    marker_color='#CD5B45',\n    marker_opacity=0.7,\n    texttemplate=\"%{text:.0%}\",\n    textfont=textfont,\n    textposition='inside'\n)\nfig.update_layout(\n    yaxis=dict(\n        categoryorder= \"total ascending\",\n        title_text=\"\", \n        tickfont=tickfont,\n        titlefont=axistitlefont\n    ),\n    xaxis=dict(\n        tickfont=tickfont,\n        titlefont=axistitlefont,\n        tickformat=\",\", \n        title_text=\"\"),\n    hoverlabel=hoverlabelformat,\n    margin=dict(pad=5, t=100),\n    height=500,\n    width=800,\n    title=dict(text=\"Usage of NLP Methods (Usual users)\", font=titlefont),\n)\nfig.show()\n\nfig = px.bar(data_s_for_graph, x=\"Percent\", y=\"index\", text=\"Percent\",orientation=\"h\", range_x=[0,0.17])\n\nfig.update_traces(\n    hovertemplate=\"Method: %{y}<br>Percent: %{x:,.0f}\",\n    marker_color='#4C9141',\n    marker_opacity=0.7,\n    texttemplate=\"%{text:.0%}\",\n    textfont=textfont,\n    textposition='inside'\n)\nfig.update_layout(\n    yaxis=dict(\n        categoryorder= \"total ascending\",\n        title_text=\"\", \n        tickfont=tickfont,\n        titlefont=axistitlefont\n    ),\n    xaxis=dict(\n        tickfont=tickfont,\n        titlefont=axistitlefont,\n        tickformat=\",\", \n        title_text=\"\"),\n    hoverlabel=hoverlabelformat,\n    margin=dict(pad=5, t=100),\n    height=500,\n    width=800,\n    title=dict(text=\"Usage of NLP Methods (Successful users)\", font=titlefont),\n)\nfig.show()","a1e83b26":"data_u_for_graph = data_u[\"Q22\"].dropna()\npercentages_u = data_u_for_graph.value_counts(normalize=True).sort_values(ascending=False)\ncounts_u = data_u_for_graph.value_counts(normalize=False).sort_values(ascending=False)\n\ndata_s_for_graph = data_s[\"Q22\"].dropna()\npercentages_s = data_s_for_graph.value_counts(normalize=True).sort_values(ascending=False)\ncounts_s = data_s_for_graph.value_counts(normalize=False).sort_values(ascending=False)\n\ndata_u_for_graph = pd.DataFrame(\n    np.hstack([percentages_u.values.reshape(-1, 1), counts_u.values.reshape(-1, 1)]),\n    index=percentages_u.index,\n    columns=[\"Percent\", \"Count\"],\n).reset_index()\n\n#print(data_u_for_graph['index'][5])\ndata_u_for_graph.loc[data_u_for_graph['index'] == \"We recently started using ML methods (i.e., models in production for less than 2 years)\", 'index'] = \"We recently started using ML methods\"\ndata_u_for_graph.loc[data_u_for_graph['index'] == \"We are exploring ML methods (and may one day put a model into production)\", 'index'] = \"We are exploring ML methods\"\ndata_u_for_graph.loc[data_u_for_graph['index'] == \"We have well established ML methods (i.e., models in production for more than 2 years)\", 'index'] = \"We have well established ML methods\"\ndata_u_for_graph.loc[data_u_for_graph['index'] == \"We use ML methods for generating insights (but do not put working models into production)\", 'index'] = \"We use ML methods for generating insights\"\n\ndata_s_for_graph = pd.DataFrame(\n    np.hstack([percentages_s.values.reshape(-1, 1), counts_s.values.reshape(-1, 1)]),\n    index=percentages_s.index,\n    columns=[\"Percent\", \"Count\"],\n).reset_index()\n\ndata_s_for_graph.loc[data_s_for_graph['index'] == \"We recently started using ML methods (i.e., models in production for less than 2 years)\", 'index'] = \"We recently started using ML methods\"\ndata_s_for_graph.loc[data_s_for_graph['index'] == \"We are exploring ML methods (and may one day put a model into production)\", 'index'] = \"We are exploring ML methods\"\ndata_s_for_graph.loc[data_s_for_graph['index'] == \"We have well established ML methods (i.e., models in production for more than 2 years)\", 'index'] = \"We have well established ML methods\"\ndata_s_for_graph.loc[data_s_for_graph['index'] == \"We use ML methods for generating insights (but do not put working models into production)\", 'index'] = \"We use ML methods for generating insights\"\n\nfig = px.bar(data_u_for_graph, x=\"Count\", y=\"index\", text=\"Percent\",orientation=\"h\", range_x=[0,1300])\n\nfig.update_traces(\n    hovertemplate=\"ML Usage: %{y}<br>Percent: %{x:,.0f}\",\n    marker_color='#CD5B45',\n    marker_opacity=0.7,\n    texttemplate=\"%{text:.0%}\",\n    textfont=textfont,\n    textposition='inside'\n)\nfig.update_layout(\n    xaxis=dict(\n        title_text=\"\", \n        tickfont=tickfont,\n        titlefont=axistitlefont\n    ),\n    yaxis=dict(\n        categoryorder= \"total ascending\",\n        tickfont=tickfont,\n        titlefont=axistitlefont,\n        tickformat=\",\", \n        title_text=\"\"),\n    hoverlabel=hoverlabelformat,\n    margin=dict(pad=5, t=100),\n    height=500,\n    width=800,\n    title=dict(text=\"Usage of ML methods (Usual users)\", font=titlefont),\n)\nfig.show()\n\n#---------------------------------------------\n\nfig = px.bar(data_s_for_graph, x=\"Count\", y=\"index\", text=\"Percent\",orientation=\"h\", range_x=[0,1100])\n\nfig.update_traces(\n    hovertemplate=\"ML Usage: %{y}<br>Percent: %{x:,.0f}\",\n    marker_color='#4C9141',\n    marker_opacity=0.7,\n    texttemplate=\"%{text:.0%}\",\n    textfont=textfont,\n    textposition='inside'\n)\nfig.update_layout(\n    xaxis=dict(\n        title_text=\"\", \n        tickfont=tickfont,\n        titlefont=axistitlefont\n    ),\n    yaxis=dict(\n        categoryorder= \"total ascending\",\n        tickfont=tickfont,\n        titlefont=axistitlefont,\n        tickformat=\",\", \n        title_text=\"\"),\n    hoverlabel=hoverlabelformat,\n    margin=dict(pad=5, t=100),\n    height=500,\n    width=800,\n    title=dict(text=\"Usage of ML methods (Successful users)\", font=titlefont),\n)\nfig.show()","a2cbd41d":"Q23_u = [question for question in data_u.columns if 'Q23' in question]\n\nprog_languages_u = []\nfor question in Q23_u:\n    for val in data_u[question].unique():\n        prog_languages_u.append(val)\n        \nprog_languages_u = [lang for lang in prog_languages_u if str(lang)!='nan']\npercent_langs_u = ((data_u.shape[0] - data_u[Q23_u].isnull().sum()) \/ data_u.shape[0]).sort_values(ascending=False)\npercent_langs_u.index = prog_languages_u\n\ndata_u_for_graph = pd.DataFrame(\n    percent_langs_u.values.reshape(-1, 1),\n    index=percent_langs_u.index,\n    columns=[\"Percent\"],\n).reset_index()\n\ndata_u_for_graph.loc[data_u_for_graph['index'] == \"Analyze and understand data to influence product or business decisions\", 'index'] = \"Analyze and understand data\"\ndata_u_for_graph.loc[data_u_for_graph['index'] == \"Build and\/or run the data infrastructure that my business uses for storing, analyzing, and operationalizing data\", 'index'] = \"Build and\/or run the data infrastructure\"\ndata_u_for_graph.loc[data_u_for_graph['index'] == \"Build prototypes to explore applying machine learning to new areas\", 'index'] = \"Build prototypes\"\ndata_u_for_graph.loc[data_u_for_graph['index'] == \"Build and\/or run a machine learning service that operationally improves my product or workflows\", 'index'] = \"Build and\/or run a machine learning service\"\n\n\nQ23_s = [question for question in data_s.columns if 'Q23' in question]\n\nprog_languages_s = []\nfor question in Q23_s:\n    for val in data_s[question].unique():\n        prog_languages_s.append(val)\n        \nprog_languages_s = [lang for lang in prog_languages_s if str(lang)!='nan']\npercent_langs_s = ((data_s.shape[0] - data_s[Q23_s].isnull().sum()) \/ data_s.shape[0]).sort_values(ascending=True)\npercent_langs_s.index = prog_languages_s\n\ndata_s_for_graph = pd.DataFrame(\n    percent_langs_s.values.reshape(-1, 1),\n    index=percent_langs_s.index,\n    columns=[\"Percent\"],\n).reset_index()\n\ndata_s_for_graph.loc[data_s_for_graph['index'] == \"Analyze and understand data to influence product or business decisions\", 'index'] = \"Analyze and understand data\"\ndata_s_for_graph.loc[data_s_for_graph['index'] == \"Build and\/or run the data infrastructure that my business uses for storing, analyzing, and operationalizing data\", 'index'] = \"Build and\/or run the data infrastructure\"\ndata_s_for_graph.loc[data_s_for_graph['index'] == \"Build prototypes to explore applying machine learning to new areas\", 'index'] = \"Build prototypes\"\ndata_s_for_graph.loc[data_s_for_graph['index'] == \"Build and\/or run a machine learning service that operationally improves my product or workflows\", 'index'] = \"Build and\/or run a machine learning service\"\n\nfig = px.bar(data_u_for_graph, x=\"Percent\", y=\"index\", text=\"Percent\",orientation=\"h\", range_x=[0,0.25])\n\nfig.update_traces(\n    hovertemplate=\"Activity: %{y}<br>Percent: %{x:,.0f}\",\n    marker_color='#CD5B45',\n    marker_opacity=0.7,\n    texttemplate=\"%{text:.0%}\",\n    textfont=textfont,\n    textposition='inside'\n)\nfig.update_layout(\n    yaxis=dict(\n        categoryorder= \"total ascending\",\n        title_text=\"\", \n        tickfont=tickfont,\n        titlefont=axistitlefont\n    ),\n    xaxis=dict(\n        tickfont=tickfont,\n        titlefont=axistitlefont,\n        tickformat=\",\", \n        title_text=\"\"),\n    hoverlabel=hoverlabelformat,\n    margin=dict(pad=5, t=100),\n    height=500,\n    width=800,\n    title=dict(text=\"Job activities (Usual users)\", font=titlefont),\n)\nfig.show()\n\nfig = px.bar(data_s_for_graph, x=\"Percent\", y=\"index\", text=\"Percent\",orientation=\"h\", range_x=[0,0.7])\n\nfig.update_traces(\n    hovertemplate=\"Activity: %{y}<br>Percent: %{x:,.0f}\",\n    marker_color='#4C9141',\n    marker_opacity=0.7,\n    texttemplate=\"%{text:.0%}\",\n    textfont=textfont,\n    textposition='inside'\n)\nfig.update_layout(\n    yaxis=dict(\n        categoryorder= \"total ascending\",\n        title_text=\"\", \n        tickfont=tickfont,\n        titlefont=axistitlefont,\n    ),\n    xaxis=dict(\n        tickfont=tickfont,\n        titlefont=axistitlefont,\n        tickformat=\",\", \n        title_text=\"\"),\n    hoverlabel=hoverlabelformat,\n    margin=dict(pad=5, t=100),\n    height=500,\n    width=800,\n    title=dict(text=\"Job activities (Successful users)\", font=titlefont),\n)\nfig.show()","63524b31":"Q37_u = [question for question in data_u.columns if 'Q37' in question]\n\nprog_languages_u = []\nfor question in Q37_u:\n    for val in data_u[question].unique():\n        prog_languages_u.append(val)\n        \nprog_languages_u = [lang for lang in prog_languages_u if str(lang)!='nan']\npercent_langs_u = ((data_u.shape[0] - data_u[Q37_u].isnull().sum()) \/ data_u.shape[0]).sort_values(ascending=False)\npercent_langs_u.index = prog_languages_u\n\ndata_u_for_graph = pd.DataFrame(\n    percent_langs_u.values.reshape(-1, 1),\n    index=percent_langs_u.index,\n    columns=[\"Percent\"],\n).reset_index()\n\ndata_u_for_graph.loc[data_u_for_graph['index'] == \"Cloud-certification programs (direct from AWS, Azure, GCP, or similar)\", 'index'] = \"Cloud-certification programs\"\ndata_u_for_graph.loc[data_u_for_graph['index'] == \"University Courses (resulting in a university degree)\", 'index'] = \"University Courses\"\n\nQ37_s = [question for question in data_s.columns if 'Q37' in question]\n\nprog_languages_s = []\nfor question in Q37_s:\n    for val in data_s[question].unique():\n        prog_languages_s.append(val)\n        \nprog_languages_s = [lang for lang in prog_languages_s if str(lang)!='nan']\npercent_langs_s = ((data_s.shape[0] - data_s[Q37_s].isnull().sum()) \/ data_s.shape[0]).sort_values(ascending=False)\npercent_langs_s.index = prog_languages_s\n\ndata_s_for_graph = pd.DataFrame(\n    percent_langs_s.values.reshape(-1, 1),\n    index=percent_langs_s.index,\n    columns=[\"Percent\"],\n).reset_index()\n\ndata_s_for_graph.loc[data_s_for_graph['index'] == \"Cloud-certification programs (direct from AWS, Azure, GCP, or similar)\", 'index'] = \"Cloud-certification programs\"\ndata_s_for_graph.loc[data_s_for_graph['index'] == \"University Courses (resulting in a university degree)\", 'index'] = \"University Courses\"\n\nfig = px.bar(data_u_for_graph, x=\"index\", y=\"Percent\", text=\"Percent\", range_y=[0,0.42])\n\nfig.update_traces(\n    hovertemplate=\"Platform: %{x}<br>Percent: %{y:,.2f}\",\n    marker_color='#CD5B45',\n    marker_opacity=0.7,\n    texttemplate=\"%{text:.0%}\",\n    textfont=textfont,\n    textposition='inside'\n)\nfig.update_layout(\n    xaxis=dict(\n        title_text=\"\", \n        tickfont=tickfont,\n        titlefont=axistitlefont\n    ),\n    yaxis=dict(\n        tickfont=tickfont,\n        titlefont=axistitlefont,\n        tickformat=\",\", \n        title_text=\"Percent\"),\n    hoverlabel=hoverlabelformat,\n    margin=dict(pad=5, t=100),\n    height=500,\n    width=800,\n    title=dict(text=\"Usage of education platforms (Usual users)\", font=titlefont),\n)\nfig.add_shape(type=\"line\", y0=0, x0=2.5, y1=0.9, x1=2.5, line=lineformat)\nfig.add_vrect(x0=-0.5, x1=2.5, y0=0, y1=1, fillcolor=\"darkgray\", opacity=0.2, layer=\"below\", line_width=0)\n\nfig.add_annotation(\n    y=0.4, x=1,\n    xref='x',yref='y',\n    text='<b><i>TOP-3 Platforms<\/i><b>',\n    textangle=0,\n    showarrow=False,\n    font=annotationfont\n)\nfig.show()\n\n#---------------------------------------------\n\nfig = px.bar(data_s_for_graph, x=\"index\", y=\"Percent\", text=\"Percent\", range_y=[0,0.6])\n\nfig.update_traces(\n    hovertemplate=\"Platform: %{x}<br>Percent: %{y:,.2f}\",\n    marker_color='#4C9141',\n    marker_opacity=0.7,\n    texttemplate=\"%{text:.0%}\",\n    textfont=textfont,\n    textposition='inside'\n)\nfig.update_layout(\n    xaxis=dict(\n        title_text=\"\", \n        tickfont=tickfont,\n        titlefont=axistitlefont\n    ),\n    yaxis=dict(\n        tickfont=tickfont,\n        titlefont=axistitlefont,\n        tickformat=\",\", \n        title_text=\"Percent\"),\n    hoverlabel=hoverlabelformat,\n    margin=dict(pad=5, t=100),\n    height=500,\n    width=800,\n    title=dict(text=\"Usage of education platforms (Successful users)\", font=titlefont),\n)\nfig.add_shape(type=\"line\", y0=0, x0=2.5, y1=0.9, x1=2.5, line=lineformat)\nfig.add_vrect(x0=-0.5, x1=2.5, y0=0, y1=1, fillcolor=\"darkgray\", opacity=0.2, layer=\"below\", line_width=0)\n\nfig.add_annotation(\n    y=0.57, x=1,\n    xref='x',yref='y',\n    text='<b><i>TOP-3 Platforms<\/i><b>',\n    textangle=0,\n    showarrow=False,\n    font=annotationfont\n)\nfig.show()","b8e19195":"Q39_u = [question for question in data_u.columns if 'Q39' in question]\n\nprog_languages_u = []\nfor question in Q39_u:\n    for val in data_u[question].unique():\n        prog_languages_u.append(val)\n        \nprog_languages_u = [lang for lang in prog_languages_u if str(lang)!='nan']\npercent_langs_u = ((data_u.shape[0] - data_u[Q39_u].isnull().sum()) \/ data_u.shape[0]).sort_values(ascending=False)\npercent_langs_u.index = prog_languages_u\n\ndata_u_for_graph = pd.DataFrame(\n    percent_langs_u.values.reshape(-1, 1),\n    index=percent_langs_u.index,\n    columns=[\"Percent\"],\n).reset_index()\n\ndata_u_for_graph.loc[data_u_for_graph['index'] == \"Twitter (data science influencers)\", 'index'] = \"Twitter\"\ndata_u_for_graph.loc[data_u_for_graph['index'] == \"Email newsletters (Data Elixir, O'Reilly Data & AI, etc)\", 'index'] = \"Email newsletters\"\ndata_u_for_graph.loc[data_u_for_graph['index'] == \"Reddit (r\/machinelearning, etc)\", 'index'] = \"Reddit\"\ndata_u_for_graph.loc[data_u_for_graph['index'] == \"Kaggle (notebooks, forums, etc)\", 'index'] = \"Kaggle\"\ndata_u_for_graph.loc[data_u_for_graph['index'] == \"Course Forums (forums.fast.ai, Coursera forums, etc)\", 'index'] = \"Course Forums\"\ndata_u_for_graph.loc[data_u_for_graph['index'] == \"YouTube (Kaggle YouTube, Cloud AI Adventures, etc)\", 'index'] = \"YouTube\"\ndata_u_for_graph.loc[data_u_for_graph['index'] == \"Podcasts (Chai Time Data Science, O\u2019Reilly Data Show, etc)\", 'index'] = \"Podcasts\"\ndata_u_for_graph.loc[data_u_for_graph['index'] == \"Blogs (Towards Data Science, Analytics Vidhya, etc)\", 'index'] = \"Blogs\"\ndata_u_for_graph.loc[data_u_for_graph['index'] == \"Journal Publications (peer-reviewed journals, conference proceedings, etc)\", 'index'] = \"Journal Publications\"\ndata_u_for_graph.loc[data_u_for_graph['index'] == \"Slack Communities (ods.ai, kagglenoobs, etc)\", 'index'] = \"Slack Communities\"\n\n\nQ39_s = [question for question in data_s.columns if 'Q39' in question]\n\nprog_languages_s = []\nfor question in Q39_s:\n    for val in data_s[question].unique():\n        prog_languages_s.append(val)\n        \nprog_languages_s = [lang for lang in prog_languages_s if str(lang)!='nan']\npercent_langs_s = ((data_s.shape[0] - data_s[Q39_s].isnull().sum()) \/ data_s.shape[0]).sort_values(ascending=False)\npercent_langs_s.index = prog_languages_s\n\ndata_s_for_graph = pd.DataFrame(\n    percent_langs_s.values.reshape(-1, 1),\n    index=percent_langs_s.index,\n    columns=[\"Percent\"],\n).reset_index()\n\ndata_s_for_graph.loc[data_s_for_graph['index'] == \"Twitter (data science influencers)\", 'index'] = \"Twitter\"\ndata_s_for_graph.loc[data_s_for_graph['index'] == \"Email newsletters (Data Elixir, O'Reilly Data & AI, etc)\", 'index'] = \"Email newsletters\"\ndata_s_for_graph.loc[data_s_for_graph['index'] == \"Reddit (r\/machinelearning, etc)\", 'index'] = \"Reddit\"\ndata_s_for_graph.loc[data_s_for_graph['index'] == \"Kaggle (notebooks, forums, etc)\", 'index'] = \"Kaggle\"\ndata_s_for_graph.loc[data_s_for_graph['index'] == \"Course Forums (forums.fast.ai, Coursera forums, etc)\", 'index'] = \"Course Forums\"\ndata_s_for_graph.loc[data_s_for_graph['index'] == \"YouTube (Kaggle YouTube, Cloud AI Adventures, etc)\", 'index'] = \"YouTube\"\ndata_s_for_graph.loc[data_s_for_graph['index'] == \"Podcasts (Chai Time Data Science, O\u2019Reilly Data Show, etc)\", 'index'] = \"Podcasts\"\ndata_s_for_graph.loc[data_s_for_graph['index'] == \"Blogs (Towards Data Science, Analytics Vidhya, etc)\", 'index'] = \"Blogs\"\ndata_s_for_graph.loc[data_s_for_graph['index'] == \"Journal Publications (peer-reviewed journals, conference proceedings, etc)\", 'index'] = \"Journal Publications\"\ndata_s_for_graph.loc[data_s_for_graph['index'] == \"Slack Communities (ods.ai, kagglenoobs, etc)\", 'index'] = \"Slack Communities\"\n\nfig = px.bar(data_u_for_graph, x=\"index\", y=\"Percent\", text=\"Percent\", range_y=[0,0.46])\n\nfig.update_traces(\n    hovertemplate=\"Resource: %{x}<br>Percent: %{y:,.2f}\",\n    marker_color='#CD5B45',\n    marker_opacity=0.7,\n    texttemplate=\"%{text:.0%}\",\n    textfont=textfont,\n    textposition='inside'\n)\nfig.update_layout(\n    xaxis=dict(\n        title_text=\"\", \n        tickfont=tickfont,\n        titlefont=axistitlefont\n    ),\n    yaxis=dict(\n        tickfont=tickfont,\n        titlefont=axistitlefont,\n        tickformat=\",\", \n        title_text=\"Percent\"),\n    hoverlabel=hoverlabelformat,\n    margin=dict(pad=5, t=100),\n    height=500,\n    width=800,\n    title=dict(text=\"Usage of education resources (Usual users)\", font=titlefont),\n)\nfig.add_shape(type=\"line\", y0=0, x0=2.5, y1=0.9, x1=2.5, line=lineformat)\nfig.add_vrect(x0=-0.5, x1=2.5, y0=0, y1=1, fillcolor=\"darkgray\", opacity=0.2, layer=\"below\", line_width=0)\n\nfig.add_annotation(\n    y=0.44, x=1,\n    xref='x',yref='y',\n    text='<b><i>TOP-3 Resources<\/i><b>',\n    textangle=0,\n    showarrow=False,\n    font=annotationfont\n)\nfig.show()\n\n#---------------------------------------------\n\nfig = px.bar(data_s_for_graph, x=\"index\", y=\"Percent\", text=\"Percent\", range_y=[0,0.52])\n\nfig.update_traces(\n    hovertemplate=\"Resource: %{x}<br>Percent: %{y:,.2f}\",\n    marker_color='#4C9141',\n    marker_opacity=0.7,\n    texttemplate=\"%{text:.0%}\",\n    textfont=textfont,\n    textposition='inside'\n)\nfig.update_layout(\n    xaxis=dict(\n        title_text=\"\", \n        tickfont=tickfont,\n        titlefont=axistitlefont\n    ),\n    yaxis=dict(\n        tickfont=tickfont,\n        titlefont=axistitlefont,\n        tickformat=\",\", \n        title_text=\"Percent\"),\n    hoverlabel=hoverlabelformat,\n    margin=dict(pad=5, t=100),\n    height=500,\n    width=800,\n    title=dict(text=\"Usage of education resources (Successful users)\", font=titlefont),\n)\nfig.add_shape(type=\"line\", y0=0, x0=2.5, y1=0.9, x1=2.5, line=lineformat)\nfig.add_vrect(x0=-0.5, x1=2.5, y0=0, y1=1, fillcolor=\"darkgray\", opacity=0.2, layer=\"below\", line_width=0)\n\nfig.add_annotation(\n    y=0.5, x=1,\n    xref='x',yref='y',\n    text='<b><i>TOP-3 Resources<\/i><b>',\n    textangle=0,\n    showarrow=False,\n    font=annotationfont\n)\nfig.show()","61b261e1":"Data Science is dominated by specialists with higher education, namely Bachelor, Master and PhD. Among Usual Kaggler, respondents with a Bachelor degree predominate. This indicates that most people who want to enter Data Science already have a college degree and are continuing to improve their skills. However, among Successful Kagglers, the majority of respondents have a Master's degree. It is the fact that a Master is sufficient education to fully immerse yourself in the field of Data Science and become a Successful Kaggler.","41fa9f6f":"# **Study in terms of two groups on all questions**","06642090":"# Portrait of an usual Kaggler","ac5467ee":"Unsurprisingly, on the platform where the survey was conducted, Kaggle Notebooks ranks first in both groups, indicating that the tool is recognized by the Kaggle community. This is a success and it once again underlines that the Kaggle platform is currently one of the best in the world!","9ebe50cd":"In conclusion, I would like to note that the portraits of participants from two different groups turned out to be very close to reality in life. Despite the fact that the only factor by which I divided the groups is just the indicator of financial factor, this indicator allowed us to clearly break down two groups in which the majority of survey participants will fall.\nThe fact of financial stability was chosen primarily because this indicator is the only one that pulls along all other indicators, such as education, knowledge, work experience, etc. If a person was able to get a high-paying job in a large corporation or create his own startup, then he was able to acquire all the necessary skills and knowledge through training courses, self-study, overcoming huge difficulties on the way in the field of very dynamically developing Data Science through extensive work experience.\n\nThe notebook theme was named Portrait of Successful Kaggler, but perhaps with such a level of salary, such people have little motivation to take part in competitions. Most likely, some of these people in the recent past were novice specialists in Data Science. Some of them became Successful Kaggler thanks to the competition on the Kaggle platform, they were able to achieve the title of Master or Grandmaster. In any case, these are all my assumptions.\nThe only thing missing in the survey is bindings in current statuses or some kind of meta-data Kaggle. Of course, no names or specific private identification. But if survey organizers in future years can add some questions like:\nWhat is your current status (Master \/ Grandmaster)?\nWhat competitions did you participate in?\nWhat places were taken (top 10, top 20, top 50, etc.)?\nWhat methods were used in the competition?\nHow much time was spent on the competition?\nit would be great.\n\nAnswering these questions will allow you to link the above data from the current survey with the data on participation in the competition and get a fuller picture of the Successful Kaggler.\nFor Usual Kaggler, this knowledge will give an additional leap in which direction to move, because Usual Kaggle is very strongly motivated to achieve the goal of Successeful Kaggler. And the Kaggle platform contributes a lot to this! **Huge thanks to the organizers of this Kaggle platform!**","74f0a3d3":"Job activities again allow us to clearly separate Usual and Successful Kagglers. Usual Kagglers are more connected with daily routine work, or they are just studying \/ researching data for the subsequent decision-making on which methods to use to achieve a set goal.\n\nSuccessful Kagglers are engaged in activities related to decision-making within the company, the implementation of large projects, i.e. do not do the day-to-day work. This once again confirms the high class of specialists from the Successful Kagglers group.","ee438d19":"The population of planet Earth is strongly biased towards Asia (China, India), which cannot but affect the number of people interested in or working in the field of Data Science. The level of development of countries, average per capita income, technology development in countries, etc. In fact, the majority of Kaggle users are from India and the United States. In the future, in our search for successful Kagglers, we will see this distribution reflected in our charts.","1e5f7625":"* **Age**: Under 30\n* **Gender**: Male\n* **Country of residence**: India\n* **Education**: Bachelor's degree\n* **Job title**: Student\n* **Company size**: 0-49 employees (part-time)\n* **Programming experience**: 1-2 years\n* **Main programming language**: Python\n* **Programming framework**: Jupyter\n* **Notebook**: Use Kaggle Notebook\n* **Vizualizations**: Matplotlib\n* **ML experience**: <1 years\n* **ML framework**: Scikit-learn\n* **ML methods**: Linear and logistic regression\n* **CV methods**: General purpose image \/ video tools\n* **NLP methods**: Word embeddings \/ vectors\n* **Usage ML methods**: Most of all - \"No\". If \"Yes\", than exploring ML methods\n* **Job activities**: Analyze and understand data to influence product\n* **Education courses**: Coursera and Twitter","77e1121b":"This pie allows us to understand that further we are working with only about 80% of the data from all responses from survey. Now let's calculate the average prize pool for this year's competitions and calculate the share of successfull Kagglers and usual Kagglers.","ddf9e20f":"The vast majority of Usual Kagglers have little experience with ML methods. And this is natural, because most of them are budding data scientists. However, an interesting fact remains that among Successful Kagglers there are also many users with little experience in ML methods. This only testifies to the fact that the field of Data Science is relatively new and rapidly developing. Among Successful Kagglers, there are a sufficient number of users who have rich experience in ML methods. Linking these numbers with the above knowledge about education, we can see that highly experienced specialists are likely to have PhDs and are engaged in the development of new algorithms, i.e. are doing ML Research.","b3e3a9b4":"A survey of respondents on the use of machine learning in general indicates a clear belonging to one group or another. Most of the members of the Usual Kagglers group responded that they do not use ML methods. But some still said that they are investigating the possibility of using these methods. This once again emphasizes that these people are only at the very beginning of their journey in Data Science.\n\nIn the Successful Kagglers group, the majority clearly answered that their use of these ML methods is well established. This once again emphasizes that the majority of Successful Kagglers work either in large corporations, where all processes are in place, or in a startup, where they focus on technological breakthroughs.","2651fc86":"# Portrait of a successful Kaggler vs usual Kaggler\n\nKaggle has over 5 million registered users. Some of these people have achieved outstanding results and became Grandmaster or Master, but most of those people who come here also want to succeed and win competitions. I think most of those who want to take part in the competition do not know how to start. After all, most people are people who want to learn how to solve Data Science problems. To do this, they take various courses, read scientific publications, watch training videos about Data Scence, and of course, take part in competitions, trying to suggest the best solution of the task.\n\n**The main goal of this inverstigation is to try to understand who the successful Kaggler is, what tools and frameworks he uses, in which companies he works, where successful people live.** I will try to draw a portrait of this successful person in terms of the answers to the survey. On the other hand, I will try to show those typical Kaggler who, at the beginning of their path to Data Science, who have not yet achieved success, but are very strongly motivated to achieve success.\n\nTo select the criteria for dividing into two groups, I used the average prize pool of the competition in 2020. By a successful Kaggler, I mean someone who has won one or more competitions and received prize money equal to twice the average prize pool of a 2020 competition. Also, a successful Kaggler can be understood as a person who did not take part in the competition, but at the same time has a good job in Data Science, the annual salary exceeds twice the average amount of the prize fund of the 2020 competition. For simplicity of naming, we will call the first group of successful Kagglers - ***successfull Kaggler***. The second group is a group of ordinary highly motivated Kaggler - ***usual Kaggler***.\n\nIf you are wondering what the portrait of a successful Kaggler is, what tasks he performs, what tools he uses to achieve successful problem solving, then let's start ...","d7c4a04d":"* **General overview**\n    1. Age\n    2. Residence of countries\n    3. Job title.\n* **Split into two groups**\n    1. Studying and working users\n    2. Two groups - successfull Kagglers and usual Kagglers\n* **Study in terms of two groups on all questions**\n* **Portrait of an usual Kaggler**\n* **Portrait of a successful Kaggler**\n* **Conclusion**\n","c53ff44b":"In the analysis by gender, the overall picture is similar, but there is a slight difference - the number of men among Successful Kagglers is greater than the number of men among Usual Kagglers. The trend in women is the opposite. Data Science is young enough to appeal primarily to men with a technical mindset, but it is also starting to attract more and more women. This is why we see more women among students and young professionals than women from Successful Kagglers.","97adc395":"It's no secret that the vast majority of users on the Kaggle platform are students. They come here for new knowledge in the field of Data Science, develop their skills and achieve success in this field of activity. In second place is Data Scientist, and this is also not surprising, since here people go from students to Data Scientist.","94b76d73":"To split it down into two groups, I suggest looking at the other two groups first - working and student users. The fact is that there is some imbalance in the received data from the survey and we need to decide what to do with it.","162131e4":"# **Split into two groups**","9c32f99c":"Novice Data Science specialists mostly choose relatively small companies, and this is natural, since in small companies, you can learn a lot and gain experience, and then move to the position of leading specialists in large corporations.\n\nAs we mentioned above about Job Titles among Successful Kagglers, these are mainly either top employees or managers. If we compare this picture with the size of the company, then we can assume that the top employees work in large corporations such as Google, Facebook, Amazon, and so on. In turn, executives organize startups with a small number of employees.","d3f1fa34":"TOP-3 Frameworks is equally used by both Usual and Successful Kagglers, because they are convenient and intuitive to use.","5fdaed72":"The distribution chart of Job titles among Successful and Usual Kagglers provides us with interesting knowledge. As you can see, among Usual Kagglers, students, unemployed and others predominate. The last two are of interest, since these are people who want to retrain in a new field for them - Data Science. Those. this means that among ordinary users there are mainly the following categories: students and those who want to change their lives and start working in the sexiest profession of the century!\n\nAmong Successful Kagglers, the picture is slightly different. Basically, and this is obvious - this is Data Scientist. However, since the field of Data Science is relatively new, clear rules for naming job titles have not yet been formed, and for this reason many Software Engineers are the same Data Scientists, but with a wider range of responsibilities. As for the Other category with high annual income, here I can assume that these are executives, for example, startup organizers, or those people who influence the company as a whole.","0e162f83":"The most popular data science learning resources are Coursera. This is true, since there are many courses from leading experts and professors from the USA working at the forefront of the data science field. One of the most popular Data Science courses from Andrew Ng, which takes the student from the ground up to the more complex aspects of Data Science and Machine Learning algorithms.","b6ffecf4":"# Portrait of a successful Kaggler","87bbd80e":"At the moment, TOP-3 frameworks are popular in the world of Data Science and they are equally well used by both groups of Usual and Successful Kagglers.","fe21da8f":"Coding experience is quite an important part of the Data Science profession. For this reason, questions related to the use of different methods and programming experience are present in the Survey. What we see in the graphs based on the answers of Usual and Successful Kagglers is quite predictable, but at the same time it is an interesting fact in the sense that this division by programming experience is very clear. That is, Usual Kaggler is a beginner programmer with little programming experience, while Successful Kaggler is a very experienced specialist with long programming experience.","3d8a94c9":"TOP-3 visualization and charting tools are used equally well by experienced successful and novice professionals. This once again emphasizes the convenience, simplicity and efficiency of using these tools. But due to the growing popularity of Plotly, it seems to me that in 1-2 years the distribution of these instruments on the charts will be slightly different.","850cf1f3":"As you know, Data Science is one of the most widely discussed areas at the present time. Large corporations and entire industries are integrating Data Science technologies into their products. The popularization of Data Science leads to interest in it from students and young professionals. That is why we see a huge number of young people in this field of activity.","8ca0daee":"# **Conclusion**","60b2be86":"It's no secret that most data scientists use Python as their primary programming language. The use of this language provides a huge number of opportunities for quickly writing code, as well as performing calculations efficiently using many libraries specially adapted for matrix calculations. It is for this reason that in the survey, many users of both Usual and Successful Kagglers chose this programming language.\nR is in second place, and SQL is in third place. Since Data Science is the science of data, then SQL is used to effectively work with data.","79c3681b":"# **General overview**","28101846":"The Usual Kaggler group is consist of students and a portion of the working users whose annual salaries are below twice the average prize of all competitions in 2020. The average prize for all competitions in 2020 is approximately 17,000 dollars. \nAccordingly, all working users, whose annual income is less than 34,000 dollars, fall into the category of Usual Kagglers. The group of Successful Kagglers includes almost all working users, whose annual income is above 34,000 dollars.\n\nThus, we got two groups of interest to us - Successful Kagglers (24.6\\%) and Usual Kagglers (75.4\\%). Next, we will go through all the issues in terms of these two groups and draw up a portrait of each of them. Let's start!","4a91fc6c":"Now the graph of distribution of salaries of working users has become more visual, but not more informative. The level of salaries varies greatly depending on the country of residence, position, work experience, and much more. Below, when we select two groups of users and go through all the questions from the survey, the picture becomes clearer.","56aca2e4":"Immediately on the first question, we see an interesting picture. Usual Kagglers are mostly users under the age of 30 and this is 66%. Successful Kagglers are mostly 30-45 years old. In general, this is a natural result, because young specialists are only now entering this field of Data Science and they are mostly students. Professionals have already come some way in programming and Data Science. It takes time to gain experience, which is why we see older people among successful and experienced professionals.","38d5087e":"It is not surprising that the simplest models are chosen as the most popular machine learning methods. But if you look deeper, the motivation for using these methods is different for different groups of Usual and Successful Kagglers. \n\nFor the first group, the motivation for learning these methods is that they are easier to understand and master, and to acquire skills in machine learning. Accordingly, only after learning these methods can you begin to move on to more complex ones, such as Neural Networks or Transformer Networks.\n\nThe motivation for using the most popular methods for the Successful Kagglers is slightly different. These are mainly working people in large companies and the use of complex methods is not yet highly welcomed by company leaders. Since most business problems can be solved by simpler methods, they are mainly used.","644f04b1":"As we have seen earlier, the largest number of resident Kaggle users are India and the United States. But as it turned out, India is mostly include Data Science students, while the US is mostly Data Science professionals. However, the countries in second place on both charts are still the same India and the USA. Also, one cannot ignore the fact that the level of annual income in India and the United States is completely different, which leads to the fact that Successful Kagglers are mainly US residents. This fact reflects reality, since all technological breakthroughs and developments are carried out in the United States, and also in this country the maximum number of people involved in the field of Data Science works.\n\nTo compare salaries by country, below I calculated the average salaries of working survey participants, depending on the country. Only countries were taken into account, the number of answers from working respondents was more than 80. Thus, it was possible to form the TOP-20 countries with average salaries.","2fa1a457":"Using CV and NLP methods for Usual Kagglers is not the easiest thing to do compared to other activities. Therefore, the share of answers to these questions is very small. The experience of using these methods in CV and NLP is rather small in both groups among both Usual and Successful Kagglers among those interviewed in the survey at Kaggle and for this reason the results are almost the same.","b465e829":"As you can see from the first chart, students are not paid. The rest of the values of users who study Data Science most likely consist of salaries from other activities. Some of the users from the first graph are those who decided to change their field of activity to Data Science. Accordingly, they have a salary, but their income has nothing to do with their activities in Data Science.\n\nOn the second chart, everything is much more interesting, since the part of users who did not want to report their income is clearly expressed. Unfortunately, we have to remove them from our further research. There are also some respondents whose annual salaries are too low under $ 1000 for the Data Science. On this score, I have two assumptions. The first is that these people work in areas not related to Data Science and want to retrain. Second, the respondents did not see that they were asked about the annual salary and indicated their monthly income. For example, in Russia it is not customary to carry out calculations based on the annual salary, we are always talking about the monthly salary. In any case, since we do not know for sure, and we have no right to guess in the study, we will also have to remove these respondents from the dataset.\n\nNext, we will build an adequate salary chart for working users. ","acb9116c":"* **Age**: between 30 and 45\n* **Gender**: Male\n* **Country of residence**: USA\n* **Education**: Master's degree\n* **Job title**: Data Scientist\n* **Company size**: 10,000 or more employees\n* **Programming experience**: 5+ years\n* **Main programming language**: Python\n* **Programming framework**: Jupyter\n* **Notebook**: Use Kaggle Notebook\n* **Vizualizations**: Matplotlib\n* **ML experience**: <1 years or >5 years\n* **ML framework**: Scikit-learn\n* **ML methods**: Linear and logistic regression\n* **CV methods**: General purpose image \/ video tools\n* **NLP methods**: Word embeddings \/ vectors\n* **Usage ML methods**: have well established ML methods\n* **Job activities**: None in the survey. Possibly either leadership of people or research scientist.\n* **Education courses**: Coursera and Twitter","183965b4":"Educational resources are the same for both Usual and Successful Kagglers and this is not surprising, since all Survey participants use the same information channels to gain knowledge."}}