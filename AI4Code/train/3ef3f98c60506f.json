{"cell_type":{"3f1f418c":"code","98ec7fee":"code","0b44dab4":"code","4fda5019":"code","a23fb45e":"code","3c2cbca7":"code","b7e56bc3":"code","efffa17d":"code","43f00fc4":"code","21f6fd6d":"code","d35bfbb8":"code","2f7302cb":"code","7ae062ec":"code","ed9920ad":"code","3ac62f33":"code","7858a788":"code","6e528492":"code","10d847c9":"code","c09ab477":"code","c4d58226":"code","dcfc7177":"code","9ca0f711":"code","dfe59bc2":"code","6a1e5f31":"code","059d660a":"code","db3b1f5f":"markdown","f9bbdce1":"markdown","8e17e583":"markdown","4af48d37":"markdown","37f3b13b":"markdown","a2d8e520":"markdown","35284843":"markdown","9848e41d":"markdown","358f7ae6":"markdown","a54be53a":"markdown","d75cb2ca":"markdown"},"source":{"3f1f418c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","98ec7fee":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, roc_curve, confusion_matrix, accuracy_score\nfrom sklearn.neighbors import KNeighborsClassifier\nplt.style.use('seaborn')","0b44dab4":"# read in csv file of diabetes\ndf = pd.read_csv('\/kaggle\/input\/diabetes.csv')\ndf.head()","4fda5019":"# use info() method to get an idea of the data-types, column names, and null value counts\ndf.info()","a23fb45e":"df.describe().T","3c2cbca7":"df.shape","b7e56bc3":"# create a copy of data frame \ndf_new = df.copy(deep=True)","efffa17d":"# calculate mean of each column\/feature that has null values\ngluc_avg = df_new['Glucose'].mean()\nblood_avg = df_new['BloodPressure'].mean()\nskin_avg = df_new['SkinThickness'].mean()\ninsu_avg = df_new['Insulin'].mean()\nbmi_avg = df_new['BMI'].mean()","43f00fc4":"# replace null values with mean\ndf_new['Glucose'].replace(0, gluc_avg, inplace = True)\ndf_new['BloodPressure'].replace(0, blood_avg, inplace = True)\ndf_new['SkinThickness'].replace(0, skin_avg, inplace = True)\ndf_new['Insulin'].replace(0, insu_avg, inplace = True)\ndf_new['BMI'].replace(0, bmi_avg, inplace = True)","21f6fd6d":"df_new.describe().T","d35bfbb8":"# pd.to_csv(df_new)","2f7302cb":"# view distribution of variable\ndf_new.hist(figsize=(15,15))","7ae062ec":"# identify 'outcome' column and count values for each outcome\noutcome_counts = df['Outcome'].value_counts().sort_values()\nprint(outcome_counts)\noutcome_counts.plot(kind='bar')\nplt.title('Outcome')\nplt.ylabel('Total')","ed9920ad":"sns.pairplot(df_new, hue='Outcome')","3ac62f33":"# identify correlation between dependent and independent variables\ndf_new.corr()['Outcome'].sort_values()","7858a788":"# independent\/feature variables\nX = df_new[['Pregnancies', 'Glucose', \n            'BloodPressure', 'SkinThickness', \n            'Insulin', 'BMI', 'DiabetesPedigreeFunction', \n            'Age']]\n# dependent\/target variablea\nY = df_new['Outcome']\n\n# create scale object\nscale = StandardScaler()\n# scale x_data ie features\nX = scale.fit_transform(X)","6e528492":"# train test and split data\nx_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.20, random_state=0)\n\nprint(x_train.shape, y_train.shape)\nprint(x_test.shape, y_train.shape)","10d847c9":"ks = 30\ntrain_score = []\ntest_score = []\n\nfor i in range(1,ks):\n    \n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(x_train, y_train)\n    yhat = knn.predict(x_test)\n    \n    train_score.append(knn.score(x_train, y_train))\n    test_score.append(knn.score(x_test, y_test))     # alternatively use metrics.accuracy_score(y_test, yhat)","c09ab477":"# convert to numpy array for access of best k value\ntest_score = np.array(test_score)\ntrain_score = np.array(train_score)","c4d58226":"# best k value\nbest_k = test_score.argmax()\nprint('Best value for k: ', best_k)\nhigh_score = test_score.max()  # alternatively use test_score[9]\nprint('Accuracy score of: ', high_score)","dcfc7177":"# visualise training and testing data\nsns.lineplot(range(ks-1), test_score, color='g', label='Testing Score')\nsns.lineplot(range(ks-1), train_score, color='b', label='Training Score')\nplt.title('Best Values for K')\nplt.xlabel('K Values')\nplt.ylabel('Accuracy Scores')\nplt.show()","9ca0f711":"k = 23\n\n# build model\nKNN = KNeighborsClassifier(n_neighbors=k)\nKNN.fit(x_train, y_train)\n\n# prediction\nyhat = KNN.predict(x_test)\nfinal_score = KNN.score(x_test, y_test)\nprint('Score: ', final_score)\n","dfe59bc2":"# Confusion Matrix\nmatrix = confusion_matrix(y_test, yhat)\n\nsns.heatmap(pd.DataFrame(matrix), annot=True,  cmap=\"YlGnBu\" , fmt='.2g')\nplt.title('Confusion matrix')\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')","6a1e5f31":"# Classification report\nclass_report = classification_report(y_test,yhat)\nprint(class_report)","059d660a":"# another way to see results from the confusion matrix\nprint('TP - True Negative: ',matrix[0,0])\nprint('FP - False Positive: ', matrix[0,1])\nprint('FN - False Negative: ', matrix[1,0])\nprint('TP - True Positive: ', matrix[1,1])\nprint('Accuracy Rate: ', np.divide(np.sum([matrix[0,0],matrix[1,1]]),np.sum(matrix)))\nprint('Misclassification Rate: ', np.divide(np.sum([matrix[0,1],matrix[1,0]]),np.sum(matrix)))","db3b1f5f":"**The Dataset will benefit by using normalization techniques**","f9bbdce1":"**There is a weak correlation between features and target variable, except for 'Glucose', and 'BMI'**","8e17e583":"# Conclusion  \n\n*The KNN model can predict the outcome of diabetes with an accuracy (f1_score) of 81.818%*  \n*Misclassification rate of 18.181%, showing our model fit the data well.*","4af48d37":"# Normalization","37f3b13b":"## Build Final Model  \n\n**Use k=23 for the KNN classifier as it produces the highest score**","a2d8e520":"## From the above analyses  \n\n*Glucose, BloodPressure, SkinThickness, Insulin, BMI contain zero values which logically do not make sense*  \n**Fill these values with np.nan values then replace it with the mean of the column**  \n*Data set has 768 rows and 9 columns*","35284843":"**We see here that the outcome for non-diabetes is almost double that of patients with diabetes. It is biased towards the data points with a zero value**  \n\n*Use seaborns pairplot to analyse the data further. The distplot shows the distribution of the variables while the scatter plot shows the relationship between variables (linear\/non-linear etc).*","9848e41d":"### Import Necessary Libraries for Analyses","358f7ae6":"### Export cleaned file","a54be53a":"# Data Exploration","d75cb2ca":"# Data Preprocessing"}}