{"cell_type":{"a290e86b":"code","9cd02a28":"code","64a9de80":"code","4f5e76cf":"code","dcae874c":"code","6bc152a2":"code","e608734e":"code","0776abe4":"code","b2f9badd":"code","3500873e":"code","fb75db20":"code","ddd771b3":"code","e7823457":"code","e2ff50b5":"code","fef14d31":"code","2aa7abf5":"code","7d7bcf3e":"code","d582dda3":"code","1755709e":"code","4991644c":"code","1b22b2ca":"code","f2d7df26":"code","8a0d30d0":"markdown","0a766f94":"markdown","f82d2ef4":"markdown","5065e00b":"markdown","d50fccb5":"markdown","884ce96e":"markdown","b23f20d1":"markdown","348722a4":"markdown","346a1856":"markdown","4e516ae9":"markdown","a816f0ad":"markdown","dc274b58":"markdown","2350d844":"markdown","db8faac5":"markdown"},"source":{"a290e86b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np\nimport pandas as pd \nimport tensorflow as tf\nfrom tensorflow import keras\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9cd02a28":"train_df = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest_df = pd.read_csv('..\/input\/digit-recognizer\/test.csv')\n\nprint('The training dataset size : ',train_df.shape)\nprint('The test dataset size : ', test_df.shape)","64a9de80":"train_df.head(5)","4f5e76cf":"train_df.isnull().sum().describe()","dcae874c":"test_df.isnull().sum().describe()","6bc152a2":"y_train = train_df['label']\n#For x values we will drop label column as it is already been assigned \nX_train = train_df.drop(['label'], axis=1)\n#we will delete train_df to free space though it can still be kept\ndel train_df\n\nsns.countplot(y_train)\ny_train.value_counts()","e608734e":"X_train.head(5)","0776abe4":"X_train = X_train\/255.0\ntest_df = test_df \/ 255.0","b2f9badd":"# Reshape image in 3 dimensions (height = 28px, width = 28px , canal = 1)\nX_train = X_train.values.reshape(-1,28,28,1)\ntest_df = test_df.values.reshape(-1,28,28,1)","3500873e":"from keras.utils.np_utils import to_categorical\ny_train = to_categorical(y_train, num_classes = 10)","fb75db20":"X_train, X_validate, y_train, y_validate = train_test_split(X_train, y_train, test_size=0.1, random_state = 2)\nprint('The training set size after model selection : ',X_train.shape, y_train.shape)\nprint('The validation set size after model selection : ',X_validate.shape, y_validate.shape)","ddd771b3":"g = plt.imshow(X_train[0][:,:,0])","e7823457":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Flatten, Conv2D, MaxPool2D, Dense, Dropout\n\nmodel = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))","e2ff50b5":"optimizer = tf.keras.optimizers.RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)\nmodel.compile(optimizer = optimizer, loss = 'categorical_crossentropy', metrics = ['accuracy'])","fef14d31":"from keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)\nepochs = 30 \nbatch_size = 64","2aa7abf5":"#IMAGE AUGMENTATION\ndatagen = ImageDataGenerator(\n        rotation_range=10, \n        zoom_range = 0.1,\n        width_shift_range=0.1,  \n        height_shift_range=0.1\n        )\n\ndatagen.fit(X_train)","7d7bcf3e":"history = model.fit_generator(datagen.flow(X_train,y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (X_validate, y_validate),\n                              verbose = 2, steps_per_epoch=X_train.shape[0] \/\/ batch_size\n                              , callbacks=[learning_rate_reduction])","d582dda3":"plt.figure(figsize=(17,17))\n\nplt.subplot(2, 2, 1)\nplt.plot(history.history['loss'], label='Loss')\nplt.plot(history.history['val_loss'], label='Validation Loss')\nplt.legend()\nplt.title('Training - Loss Function')\n\nplt.subplot(2, 2, 2)\nplt.plot(history.history['accuracy'], label='Accuracy')\nplt.plot(history.history['val_accuracy'], label='Validation Accuracy')\nplt.legend()\nplt.title('Train - Accuracy')","1755709e":"results = model.predict(X_validate)\nresults = np.argmax(results, axis=1)","4991644c":"results = pd.Series(results,name=\"Label\")\nresults","1b22b2ca":"submission = pd.read_csv('..\/input\/digit-recognizer\/sample_submission.csv')\nsubmission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\nsubmission.to_csv(\"CNN_Digit_recognizer.csv\",index=False)\nprint('Successfull Submission!!')","f2d7df26":"submission","8a0d30d0":"# Checking Missing values","0a766f94":"# References\n1. https:\/\/www.kaggle.com\/yassineghouzam\/introduction-to-cnn-keras-0-997-top-6#4.-Evaluate-the-model","f82d2ef4":"# CNN Model","5065e00b":"# Training and Validation Model development\nWe will use the sci-kit learn library's train_test_split to split the training and validation datasets in order to prevent overfitting in the model","d50fccb5":"**Let's compile the model and then deploy the model !!**","884ce96e":"# Data Visualization","b23f20d1":"# Data Visualization on Validation set loss and Accuracy","348722a4":"# Predictions","346a1856":"**Certain conditions for accuracy performance are set up here**","4e516ae9":"# Label Encoding\nNow we convert the data in label col to categorical values as label consists of digits from 0 to 9 we want convert them to one hot-encoding vectors","a816f0ad":"**So our dataset is pretty clean that saves us from deploying data cleaning techniques which is time consuming**","dc274b58":"**Normalize the data to prevent illumination effects on the images**","2350d844":"# Submission","db8faac5":"**We predict the values**"}}