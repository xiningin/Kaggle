{"cell_type":{"acc35c51":"code","8c076490":"code","788e8abe":"code","c4e19800":"code","16652913":"code","4cf04251":"code","9375396a":"code","93bb00b4":"code","843f13dd":"markdown","235a89af":"markdown","cddefa81":"markdown"},"source":{"acc35c51":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom PIL import Image\nimport glob\nimport matplotlib.pyplot as plt\nimport os","8c076490":"## dataset will be released.\nlandmark = pd.read_csv('..\/input\/animeface\/512x512_landmark.csv')","788e8abe":"index = landmark['input'].apply(lambda x : x.split('\/')[-1])","c4e19800":"landmark.head()","16652913":"fig, ax = plt.subplots(8, 8, figsize=(30, 30), dpi=200)\n\nimg_path = '\/kaggle\/input\/highresolution-anime-face-dataset-512x512\/portraits\/'\n\nfor i in range(8):\n    for j in range(8):\n        idx = i*8+j\n        img = Image.open(os.path.join(img_path, index[idx]))\n        \n        ax[i][j].imshow(img)\n        ax[i][j].axis('off')\n\nplt.tight_layout()\nplt.subplots_adjust(hspace=0.03, wspace=0.03)\nplt.show()","4cf04251":"fig, ax = plt.subplots(30, 8, figsize=(24, 90))\n\nimg_path = '\/kaggle\/input\/highresolution-anime-face-dataset-512x512\/portraits\/'\n\nfor i in range(30):\n    for j in range(8):\n        idx = i*8+j\n        img = Image.open(os.path.join(img_path, index[idx]))\n        \n        x = landmark.iloc[idx, 1]\n        y = landmark.iloc[idx, 2]\n        lx = landmark.iloc[idx, 3:][::2] + x\n        ly = landmark.iloc[idx, 3:][1::2] + y\n        ax[i][j].scatter(lx, ly, color='red')\n        \n        ax[i][j].imshow(img, alpha=0.7)\n        ax[i][j].axis('off')\n\nplt.tight_layout()\nplt.subplots_adjust(hspace=0.03, wspace=0.03)\nplt.show()","9375396a":"fig, ax = plt.subplots(30, 8, figsize=(24, 90))\n\nimg_path = '\/kaggle\/input\/highresolution-anime-face-dataset-512x512\/portraits\/'\n\nfor i in range(30):\n    for j in range(8):\n        idx = i*8+j\n        img = Image.open(os.path.join(img_path, index.values[-idx]))\n        \n        x = landmark.iloc[-idx, 1]\n        y = landmark.iloc[-idx, 2]\n        lx = landmark.iloc[-idx, 3:][::2] + x\n        ly = landmark.iloc[-idx, 3:][1::2] + y\n        ax[i][j].scatter(lx, ly, color='red')\n        \n        ax[i][j].imshow(img, alpha=0.7)\n        ax[i][j].axis('off')\n\nplt.tight_layout()\nplt.subplots_adjust(hspace=0.03, wspace=0.03)\nplt.show()","93bb00b4":"fig, ax = plt.subplots(2, 2, figsize=(15, 15), dpi=200)\n\nimg_path = '\/kaggle\/input\/highresolution-anime-face-dataset-512x512\/portraits\/'\n\nfor idx, ax in enumerate(ax.flatten()):\n\n    img = Image.open(os.path.join(img_path, index[idx]))\n\n    ax.imshow(img, alpha=0.7)\n    ax.axis('off')\n\n    x = landmark.iloc[idx, 1]\n    y = landmark.iloc[idx, 2]\n    lx = landmark.iloc[idx, 3:][::2] + x\n    ly = landmark.iloc[idx, 3:][1::2] + y\n    ax.scatter(lx, ly, color='red')\n\n    for lx_i, ly_i, idx in zip(lx, ly, range(24)):\n        ax.annotate(xy=(lx_i, ly_i), text=idx)\n\n\nplt.tight_layout()\nplt.subplots_adjust(hspace=0.03, wspace=0.03)\nplt.show()","843f13dd":"## Face Landmark Detection\n\n- I made new dataset for this.","235a89af":"## Dataset for Anime-Face Generation Model\n\n\nAlthough various Danbooru datasets have already been uploaded to Kaggle, the high-resolution face dataset was not uploaded separately, so I uploaded it with the consent of the author.\n\nI hope that various studies related to the creation of anime faces will be conducted conveniently.\n\n\n### Description\n\nAccording to the original data description, all data is from danbooru and was created through super-resolution(biggan). All data is in 512x512 format.","cddefa81":"## Landmark numbering"}}