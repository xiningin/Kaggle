{"cell_type":{"c70e2ade":"code","fbd81273":"code","d954c12d":"code","850dc2d2":"code","a753cd19":"code","8e8948f8":"code","f0109cee":"code","13e245c7":"code","ffcbb00a":"code","fa7a4ef2":"code","61194783":"code","16a564aa":"code","f086d18e":"code","9536e051":"code","d7bf45eb":"code","72d4a13e":"code","44254907":"code","704f9d4a":"code","701ffc5a":"code","c2f84206":"code","d3d83729":"code","75f3258a":"code","d14d1bad":"code","d33d6675":"code","a58ef6b2":"code","ff124df0":"code","021c5645":"code","7b8c1217":"code","c4a1a0c4":"code","7d959422":"code","531727f6":"code","5f8ff87b":"code","e0859a16":"code","8ed284f6":"code","c8d8b37c":"code","5c8ac782":"code","07cca187":"code","8482a7a0":"code","878efb46":"code","474add80":"code","f5bef79a":"code","361880c6":"code","963d5e9d":"code","fc7c1321":"code","f46e0f32":"code","f1fd494b":"markdown","9bb6241b":"markdown","7778b2f8":"markdown","71bf7f01":"markdown","7664b3f2":"markdown","21aac565":"markdown","e09f174b":"markdown","f59dcc53":"markdown","a9e08834":"markdown","1648c217":"markdown","a95f2af4":"markdown","2244ed77":"markdown","69675e1c":"markdown","f46f616f":"markdown","ad6ded3b":"markdown","9269affa":"markdown","b8198442":"markdown","e6793a42":"markdown"},"source":{"c70e2ade":"%matplotlib inline\n\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier, forest\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score\nimport matplotlib.pyplot as plt\nfrom IPython.display import display\nimport numpy as np\nimport scipy\nimport re","fbd81273":"!ls ..\/input","d954c12d":"dtypes = {\n        'MachineIdentifier':                                    'category',\n        'ProductName':                                          'category',\n        'EngineVersion':                                        'category',\n        'AppVersion':                                           'category',\n        'AvSigVersion':                                         'category',\n        'IsBeta':                                               'int8',\n        'RtpStateBitfield':                                     'float16',\n        'IsSxsPassiveMode':                                     'int8',\n        'DefaultBrowsersIdentifier':                            'float16',\n        'AVProductStatesIdentifier':                            'float32',\n        'AVProductsInstalled':                                  'float16',\n        'AVProductsEnabled':                                    'float16',\n        'HasTpm':                                               'int8',\n        'CountryIdentifier':                                    'int16',\n        'CityIdentifier':                                       'float32',\n        'OrganizationIdentifier':                               'float16',\n        'GeoNameIdentifier':                                    'float16',\n        'LocaleEnglishNameIdentifier':                          'int8',\n        'Platform':                                             'category',\n        'Processor':                                            'category',\n        'OsVer':                                                'category',\n        'OsBuild':                                              'int16',\n        'OsSuite':                                              'int16',\n        'OsPlatformSubRelease':                                 'category',\n        'OsBuildLab':                                           'category',\n        'SkuEdition':                                           'category',\n        'IsProtected':                                          'float16',\n        'AutoSampleOptIn':                                      'int8',\n        'PuaMode':                                              'category',\n        'SMode':                                                'float16',\n        'IeVerIdentifier':                                      'float16',\n        'SmartScreen':                                          'category',\n        'Firewall':                                             'float16',\n        'UacLuaenable':                                         'float32',\n        'Census_MDC2FormFactor':                                'category',\n        'Census_DeviceFamily':                                  'category',\n        'Census_OEMNameIdentifier':                             'float16',\n        'Census_OEMModelIdentifier':                            'float32',\n        'Census_ProcessorCoreCount':                            'float16',\n        'Census_ProcessorManufacturerIdentifier':               'float16',\n        'Census_ProcessorModelIdentifier':                      'float16',\n        'Census_ProcessorClass':                                'category',\n        'Census_PrimaryDiskTotalCapacity':                      'float32',\n        'Census_PrimaryDiskTypeName':                           'category',\n        'Census_SystemVolumeTotalCapacity':                     'float32',\n        'Census_HasOpticalDiskDrive':                           'int8',\n        'Census_TotalPhysicalRAM':                              'float32',\n        'Census_ChassisTypeName':                               'category',\n        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float16',\n        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float16',\n        'Census_InternalPrimaryDisplayResolutionVertical':      'float16',\n        'Census_PowerPlatformRoleName':                         'category',\n        'Census_InternalBatteryType':                           'category',\n        'Census_InternalBatteryNumberOfCharges':                'float32',\n        'Census_OSVersion':                                     'category',\n        'Census_OSArchitecture':                                'category',\n        'Census_OSBranch':                                      'category',\n        'Census_OSBuildNumber':                                 'int16',\n        'Census_OSBuildRevision':                               'int32',\n        'Census_OSEdition':                                     'category',\n        'Census_OSSkuName':                                     'category',\n        'Census_OSInstallTypeName':                             'category',\n        'Census_OSInstallLanguageIdentifier':                   'float16',\n        'Census_OSUILocaleIdentifier':                          'int16',\n        'Census_OSWUAutoUpdateOptionsName':                     'category',\n        'Census_IsPortableOperatingSystem':                     'int8',\n        'Census_GenuineStateName':                              'category',\n        'Census_ActivationChannel':                             'category',\n        'Census_IsFlightingInternal':                           'float16',\n        'Census_IsFlightsDisabled':                             'float16',\n        'Census_FlightRing':                                    'category',\n        'Census_ThresholdOptIn':                                'float16',\n        'Census_FirmwareManufacturerIdentifier':                'float16',\n        'Census_FirmwareVersionIdentifier':                     'float32',\n        'Census_IsSecureBootEnabled':                           'int8',\n        'Census_IsWIMBootEnabled':                              'float16',\n        'Census_IsVirtualDevice':                               'float16',\n        'Census_IsTouchEnabled':                                'int8',\n        'Census_IsPenCapable':                                  'int8',\n        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',\n        'Wdft_IsGamer':                                         'float16',\n        'Wdft_RegionIdentifier':                                'float16',\n        'HasDetections':                                        'int8'\n        }\n\n%time train = pd.read_csv('..\/input\/train.csv', nrows=1000000, usecols=dtypes.keys(), low_memory=False)\n\ndisplay(train.describe(include='all').T)","850dc2d2":"col = ['EngineVersion', 'AppVersion', 'AvSigVersion', 'OsBuildLab', 'Census_OSVersion']\nfor c in col:\n    for i in range(6):\n        train[c + str(i)] = train[c].map(lambda x: re.split('\\.|-', str(x))[i] if len(re.split('\\.|-', str(x))) > i else -1)\n        try:\n            train[c + str(i)] = pd.to_numeric(train[c + str(i)])\n        except:\n            print(f'{c + str(i)} cannot be casted to number')","a753cd19":"train['HasExistsNotSet'] = train['SmartScreen'] == 'ExistsNotSet'","8e8948f8":"def split_train_val_set(X, Y, n):\n    if n < 1: n=int(len(X.index) * n)\n    return X.iloc[:n], X.iloc[n:], Y.iloc[:n], Y.iloc[n:]","f0109cee":"for col, val in train.items():\n    if pd.api.types.is_string_dtype(val): \n        train[col] = val.astype('category').cat.as_ordered()\n        train[col] = train[col].cat.codes\n    elif pd.api.types.is_numeric_dtype(val) and val.isnull().sum() > 0:\n        train[col] = val.fillna(val.median())\n\nX, Y = train.drop('HasDetections', axis=1), train['HasDetections']\n#X_train, X_val, Y_train, Y_val = train_test_split(X, Y, test_size=0.2)\nX_train, X_val, Y_train, Y_val = split_train_val_set(X, Y, n=0.1)\nX_train.head(5)","13e245c7":"def print_score(m):\n    res = [roc_auc_score(m.predict(X_train), Y_train), roc_auc_score(m.predict(X_val), Y_val), \n           m.score(X_train, Y_train), m.score(X_val, Y_val)\n          ]\n    if hasattr(m, 'oob_score_'): res.append(m.oob_score_)\n    print(res)","ffcbb00a":"def set_rf_samples(n):\n    \"\"\" Changes Scikit learn's random forests to give each tree a random sample of\n    n random rows.\n    \"\"\"\n    forest._generate_sample_indices = (lambda rs, n_samples: forest.check_random_state(rs).randint(0, n_samples, n))","fa7a4ef2":"def reset_rf_samples():\n    \"\"\" Undoes the changes produced by set_rf_samples.\n    \"\"\"\n    forest._generate_sample_indices = (lambda rs, n_samples:\n        forest.check_random_state(rs).randint(0, n_samples, n_samples))","61194783":"set_rf_samples(50000)","16a564aa":"m = RandomForestClassifier(n_estimators=40, min_samples_leaf=1, max_features=0.5, n_jobs=-1, oob_score=False)\n%time m.fit(X_train, Y_train)\n\nprint_score(m)","f086d18e":"m = RandomForestClassifier(n_estimators=100, min_samples_leaf=3, max_features=0.5, n_jobs=-1, oob_score=False)\n%time m.fit(X_train, Y_train)\n\nprint_score(m)","9536e051":"m = RandomForestClassifier(n_estimators=100, min_samples_leaf=5, max_features=0.5, n_jobs=-1, oob_score=False)\n%time m.fit(X_train, Y_train)\n\nprint_score(m)","d7bf45eb":"m = RandomForestClassifier(n_estimators=100, min_samples_leaf=10, max_features=0.5, n_jobs=-1, oob_score=False)\n%time m.fit(X_train, Y_train)\n\nprint_score(m)","72d4a13e":"m = RandomForestClassifier(n_estimators=100, min_samples_leaf=25, max_features=0.5, n_jobs=-1, oob_score=False)\n%time m.fit(X_train, Y_train)\n\nprint_score(m)","44254907":"m = RandomForestClassifier(n_estimators=100, min_samples_leaf=50, max_features=0.5, n_jobs=-1, oob_score=False)\n%time m.fit(X_train, Y_train)\n\nprint_score(m)","704f9d4a":"fi = pd.DataFrame({'feature': X_train.columns, 'importance': m.feature_importances_}).sort_values(by='importance', ascending=False)\nfi = fi.reset_index()\nfi","701ffc5a":"def plot_feature_importance(fi):\n    fig, (ax1, ax2) = plt.subplots(nrows=1, ncols=2, figsize=(24,8))\n    ax1.plot(np.arange(0, len(fi.index)), fi['importance'])\n    label_nrs = np.arange(0, len(fi.index), 5 )\n    ax1.set_xticks(label_nrs)\n    ax1.set_xticklabels(fi['feature'][label_nrs], rotation=90)\n    \n    num_bar = min(len(fi.index), 30)\n    ax2.barh(np.arange(0, num_bar), fi['importance'][:num_bar], align='center', alpha=0.5)\n    ax2.set_yticks(np.arange(0, num_bar))\n    ax2.set_yticklabels(fi['feature'][:num_bar])\n\nplot_feature_importance(fi)","c2f84206":"to_keep = fi.loc[fi['importance']>0.005, 'feature']\nlen(to_keep)","d3d83729":"X_keep = X.copy()[to_keep]\nX_keep.sample(5)","75f3258a":"X_train, X_val, Y_train, Y_val = split_train_val_set(X_keep, Y, n=0.1)","d14d1bad":"m = RandomForestClassifier(n_estimators=100, min_samples_leaf=25, max_features=0.5, n_jobs=-1, oob_score=False)\n%time m.fit(X_train, Y_train)\n\nprint_score(m)","d33d6675":"fi = pd.DataFrame({'feature': X_train.columns, 'importance': m.feature_importances_}).sort_values(by='importance', ascending=False)\nfi = fi.reset_index()\nfi","a58ef6b2":"plot_feature_importance(fi)","ff124df0":"from scipy.cluster import hierarchy as hc","021c5645":"corr = np.round(scipy.stats.spearmanr(X_keep).correlation, 4)\ncorr_condensed = hc.distance.squareform(1-corr)\nz = hc.linkage(corr_condensed, method='average')\nfig = plt.figure(figsize=(16,10))\ndendrogram = hc.dendrogram(z, labels=X_keep.columns, orientation='left', leaf_font_size=16)\nplt.show()","7b8c1217":"def get_val_score(X_tr, X_v, Y_tr, Y_v):\n    m = RandomForestClassifier(n_estimators=40, min_samples_leaf=25, max_features=0.5, n_jobs=-1, oob_score=False)\n    m.fit(X_tr, Y_tr)\n    scores = [roc_auc_score(m.predict(X_tr), Y_tr), roc_auc_score(m.predict(X_v), Y_v), m.score(X_tr, Y_tr), m.score(X_v, Y_v)]\n    print(scores)\n    \n    return scores","c4a1a0c4":"sim_cols = []\nnum_cols = X_keep.shape[-1]\n\nfor row in z[z[:, 2] < 0.1, :2]:\n    while np.any(row >= num_cols):\n        vals_remove = row[row >= num_cols]\n        \n        row = np.append(row, z[int(row[row >= num_cols][0]) - num_cols, :2])\n        mask = np.isin(row, vals_remove)\n        row = row[~mask]\n    row = row.astype(int)\n    \n    sim_cols.append(list(X_keep.columns[row]))\nprint(sim_cols)","7d959422":"for i, val in enumerate(sim_cols):\n    for j in sim_cols:\n        if not np.array_equal(val, j):\n            if np.all(np.isin(val, j)):\n                sim_cols.pop(i)\n                break\nprint(sim_cols)","531727f6":"to_keep = []\nget_val_score(X_train, X_val, Y_train, Y_val)\nfor row in sim_cols:\n    scores = []\n    for c in row:\n        print(c)\n        scores.append(get_val_score(X_train.drop(c, axis=1), X_val.drop(c, axis=1), Y_train, Y_val)[1])\n    to_keep.append(row[np.argmax(scores)])\nto_keep","5f8ff87b":"to_drop = [x for row in sim_cols for x in row if x not in to_keep]\nX_train = X_train.drop(to_drop, axis=1)\nX_val = X_val.drop(to_drop, axis=1)","e0859a16":"m = RandomForestClassifier(n_estimators=100, min_samples_leaf=25, max_features=0.5, n_jobs=-1, oob_score=False)\n%time m.fit(X_train, Y_train)\n\nprint_score(m)","8ed284f6":"calc_field = [x for x in X_train.columns if x[-1].isdigit()]\ninclude_cols = [x[:-1] if x[-1].isdigit() else x for x in X_train.columns if x != 'HasExistsNotSet']\n\ncols_del = [x for x in include_cols if x not in X_train.columns]\nprint(cols_del)\n\ninclude_cols += ['HasDetections']\nprint(include_cols)\nprint(calc_field)","c8d8b37c":"import multiprocessing\nimport gc","5c8ac782":"reset_rf_samples()\ngc.collect()","07cca187":"del train, X, Y\ndel X_train, X_val, Y_train, Y_val\ndel X_keep\n\ndel corr, hc, dendrogram","8482a7a0":"%who","878efb46":"def load_dataframe(dataset):\n    cols = include_cols.copy()\n    if dataset == 'test':\n        cols.remove('HasDetections')\n        \n    df = pd.read_csv(f'..\/input\/{dataset}.csv', dtype=dtypes, usecols=cols)\n    return df","474add80":"with multiprocessing.Pool(2) as pool: \n    train_df, test_df = pool.map(load_dataframe, [\"train\", \"test\"])","f5bef79a":"#calculate features\nfor f in calc_field:\n    col = f[:-1]\n    num = int(f[-1])\n    train_df[f] = train_df[col].map(lambda x: re.split('\\.|-', str(x))[num] if len(re.split('\\.|-', str(x))) > num else -1)\n    test_df[f] = test_df[col].map(lambda x: re.split('\\.|-', str(x))[num] if len(re.split('\\.|-', str(x))) > num else -1)\n    \n    try:\n        train_df[f] = pd.to_numeric(train_df[f], downcast='integer')\n        test_df[f] = pd.to_numeric(test_df[f], downcast='integer')\n    except:\n        train_df[f] = train_df[f].astype('category')\n        test_df[f] = test_df[f].astype('category')\n        \ntrain_df['HasExistsNotSet'] = train_df['SmartScreen'] == 'ExistsNotSet'\ntest_df['HasExistsNotSet'] = test_df['SmartScreen'] == 'ExistsNotSet'","361880c6":"Y_train = train_df['HasDetections']\nX_train = train_df.drop(['MachineIdentifier', 'HasDetections'], axis=1)\nX_test = test_df.copy()\n\ncat_columns = X_train.select_dtypes(['category']).columns\nnum_columns = X_train.select_dtypes(['number', 'bool']).columns\n\ncat_dict = {}\nfor c, val in X_train[cat_columns].items():\n    cat_dict[c] = dict([(category, code) for code, category in enumerate(val.cat.categories)])\n\nfor c, val in cat_dict.items():\n    X_train[c] = X_train[c].cat.codes\n    X_test[c].cat.set_categories(train_df[c].cat.categories, inplace=True)\n    X_test[c] = X_test[c].cat.codes\n\nnum_dict = {c: val.median() for c, val in train_df.loc[:, num_columns].items()}\n\nX_train.loc[:, num_columns] = X_train.loc[:, num_columns].fillna(num_dict)\nX_test.loc[:, num_columns] = X_test.loc[:, num_columns].fillna(num_dict)","963d5e9d":"gc.collect()","fc7c1321":"m = RandomForestClassifier(n_estimators=128, min_samples_leaf=25, max_features=0.5, n_jobs=-1, oob_score=True)\n%time m.fit(X_train, Y_train)\n\npred = m.predict_proba(X_test.drop('MachineIdentifier', axis=1))","f46e0f32":"test_df['HasDetections'] = pred[:, -1]\ntest_df = test_df.loc[:, ['MachineIdentifier', 'HasDetections']]\ntest_df.to_csv('submissionv.csv', index=False)","f1fd494b":"<h2> Correlated features <\/h2>\nThis looks good. We can now check dive a bit deeper in the similarities of these features to see if we can remove some more.","9bb6241b":"As in the fastai course, the rf_samples can be reduced to allow for faster repetition cycles. We also immediately create a reset function to check the model performance on the entire dataset.","7778b2f8":"<h2> The final model <\/h2>\nNow lets reload the data and check how we will do on the public leaderboard.","71bf7f01":"This model was created on the following columns:","7664b3f2":"Our model is clearly overfitting, lets increase the min_samples_leaf to reduce overfitting.","21aac565":"Now lets import the data. The dtypes come from this kernel: [Load the Totality of the Data](https:\/\/www.kaggle.com\/theoviel\/load-the-totality-of-the-data)","e09f174b":"So when we remove the variables, the model is not performing worse so lets remove some more columns.","f59dcc53":"We have to preprocess the test and train dataset in the same way.","a9e08834":"It seems that some of the features are highly correclated. Lets try to remove these one at a time.","1648c217":"In the competition details, a strong time component was indicated. At this point, I am not aware of any columns which show this time component, so lets for now split our validation set based on the index","a95f2af4":"To be able to test the models rapidly, we create a function to print the scores of the model.","2244ed77":"We prepare the training data by replacing the category variables with the category codes and replacing the nan values in the numerical columns with the median","69675e1c":"<h1>EDA Using Random Forest feature importances<\/h1>\nThis kernel is based on the fastai course, specifically[ lesson 2 of the \"Introduction to Machine Learning for Coders!\"](https:\/\/github.com\/fastai\/fastai\/blob\/master\/courses\/ml1\/lesson2-rf_interpretation.ipynb) course.","f46f616f":"Train a Random Forest on the whole training set.","ad6ded3b":"Apparently, a lot of features are not important according to the model. Lets try to remove these features and see how our model performs.","9269affa":"<h2> Create the model <\/h2>\nLets manually try some parameters and check what the model performance looks like.","b8198442":"Now lets check what our model looks like.","e6793a42":"This looks better, now lets look at the feature importances of the model."}}