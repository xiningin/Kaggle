{"cell_type":{"6a051cc8":"code","d005a3eb":"code","63826a29":"code","c99cf157":"code","37331a65":"code","16a792b2":"code","a6f94f10":"code","3c9917e8":"code","2aa84f7c":"code","671b6ae0":"code","c495f5b1":"code","ccee1180":"code","0736e691":"code","b26487eb":"code","27b6fe31":"code","1564b258":"code","9c374689":"code","980320e7":"code","24eec9a9":"code","52fa05b5":"code","936f1d94":"code","d17f5fd0":"code","8b6e56f5":"code","1f87b8bd":"markdown","adfd8324":"markdown","24a1682b":"markdown","f1831d3f":"markdown","5ceda14b":"markdown","cdb486bc":"markdown"},"source":{"6a051cc8":"!pip install -q efficientnet\n\n","d005a3eb":"import pandas as pd\nimport numpy as np\nimport tensorflow as tf\nimport tensorflow.keras as keras\nimport PIL\nimport cv2\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nimport random\nfrom tqdm import tqdm\nimport tensorflow_addons as tfa\nimport random\nfrom sklearn.preprocessing import MultiLabelBinarizer\nfrom kaggle_datasets import KaggleDatasets\n\nimport efficientnet.tfkeras as efn\n\npd.set_option(\"display.max_columns\", None)","63826a29":"train = pd.read_csv('..\/input\/plant-pathology-2021-fgvc8\/train.csv')\n","c99cf157":"train.head()\n","37331a65":"print(len(train))\nprint(train.columns)\nprint(train['labels'].value_counts().plot.bar())","16a792b2":"from sklearn.preprocessing import MultiLabelBinarizer\nlabel_split = train.labels.apply(lambda x: x.split()) #chia 1 chu\u1ed7i c\u00e1c nh\u00e3n th\u00e0nh nhi\u1ec1u nh\u00e3n n\u1ebfu c\u00f3 d\u1ea5u c\u00e1ch\nlabel_split.head()\n","a6f94f10":"trans_label = MultiLabelBinarizer().fit(label_split)\nlabels = pd.DataFrame(trans_label.transform(label_split), columns=trans_label.classes_)\n\nlabels.sum().plot.bar(title='Target Class Distribution');","3c9917e8":"labels.sum(axis=1).value_counts().plot.bar(title='Distribution of Number of Labels per Image');","2aa84f7c":"# fig1 = plt.figure(figsize=(26,10))\n\n# for i in range(1, 13):\n    \n#     rand =  random.randrange(1, 18000)\n#     sample = os.path.join('..\/input\/plant-pathology-2021-fgvc8\/train_images', train['image'][rand])\n    \n#     img = PIL.Image.open(sample)\n    \n#     ax = fig1.add_subplot(4,3,i)\n#     ax.imshow(img)\n    \n#     title = f\"{train['labels'][rand]}{img.size}\"\n#     plt.title(title)\n    \n#     fig1.tight_layout()","671b6ae0":"\ntrain_df = pd.concat([train['image'], labels], axis=1)\ntrain_df.head()","c495f5b1":"w_target = 256\nh_target = 256\nbatch_size = 32","ccee1180":"image_data_generator = tf.keras.preprocessing.image.ImageDataGenerator(\n    horizontal_flip=True,\n    vertical_flip=True,\n    rotation_range=5,\n    zoom_range=0.1,\n    shear_range=0.05,\n    validation_split=0.03,\n    rescale=1.\/255)\n\ntrain_generator = image_data_generator.flow_from_dataframe(\n    dataframe=train_df,\n    directory='..\/input\/resized-plant2021\/img_sz_512',\n    x_col='image',\n    y_col=train_df.columns.tolist()[1:],\n    class_mode='raw',\n    color_mode=\"rgb\",\n    target_size=(h_target, w_target),\n    batch_size=batch_size,\n    subset='training'\n)\n\nvalid_generator = image_data_generator.flow_from_dataframe(\n    dataframe=train_df,\n    directory='..\/input\/resized-plant2021\/img_sz_512',\n    x_col='image',\n    y_col=train_df.columns.tolist()[1:],\n    class_mode='raw',\n    color_mode=\"rgb\",\n    target_size=(h_target, w_target),\n    batch_size=batch_size,\n    subset='validation'\n)","0736e691":"!pip install -q efficientnet\n","b26487eb":"# inputs = tf.keras.Input(shape=(h_target, w_target, 3)\nEffnet=efn.EfficientNetB4(\n        include_top=False,\n        input_shape=(h_target,w_target, 3),\n        weights='noisy-student',\n        pooling='avg')\n# Effnet= tf.keras.applications.EfficientNetB4(weights='imagenet',include_top=False, input_shape=(h_target,w_target, 3))\nx = Effnet.output\n# for layer in VGG_16.layers:\n#     layer.trainable=False\n# x = tf.keras.layers.GlobalAveragePooling2D()(x)\n# x = tf.keras.layers.Flatten()(x)\n# x = tf.keras.layers.Dropout(0.8)(x)\noutputs = tf.keras.layers.Dense(6, activation='sigmoid')(x)\n\nmodel = tf.keras.models.Model(inputs=Effnet.input, outputs=outputs)\n\nmodel.summary()\ntf.keras.utils.plot_model(model, show_shapes=True)","27b6fe31":"f1 = tfa.metrics.F1Score(num_classes=6, average='micro', threshold=0.5)\n\nrlp = tf.keras.callbacks.ReduceLROnPlateau(monitor='val_loss',mode='min', patience=2, verbose=1, factor=0.01)\nes = tf.keras.callbacks.EarlyStopping(monitor='val_loss',mode='min', patience=5, verbose=1, restore_best_weights=True)\n\nmodel.compile(loss='binary_crossentropy', optimizer=keras.optimizers.Adam(lr=0.0001), \n              metrics= [f1])\n\nhistory = model.fit(train_generator,validation_data=valid_generator, epochs=10, callbacks=[rlp,es])\n","1564b258":"fix, ax = plt.subplots(figsize=(20, 6))\npd.DataFrame(history.history)[['loss', 'val_loss']].plot(ax=ax, title='Model Loss Curve')","9c374689":"model.compile(loss='binary_crossentropy', optimizer=keras.optimizers.Adam(lr=0.0014), \n              metrics= [f1])\nhistory = model.fit(train_generator,validation_data=valid_generator, epochs=25, callbacks=[rlp,es])\n","980320e7":"fix, ax = plt.subplots(figsize=(20, 6))\npd.DataFrame(history.history)[['loss','val_loss']].plot(ax=ax, title='Model Loss Curve')","24eec9a9":"submissions = pd.read_csv('..\/input\/plant-pathology-2021-fgvc8\/sample_submission.csv')\nsubmissions.head()","52fa05b5":"test_data_generator = tf.keras.preprocessing.image.ImageDataGenerator(rescale=1.\/255)\n\ntest_generator = test_data_generator.flow_from_dataframe(\n    submissions,\n    directory = '..\/input\/plant-pathology-2021-fgvc8\/test_images',\n    x_col=\"image\",\n    y_col=None,\n    target_size=(h_target, w_target),\n    color_mode=\"rgb\",\n    classes=None,\n    class_mode=None,\n    shuffle=False,\n    batch_size=batch_size\n)\n\npreds = model.predict(test_generator)\nprint(preds)","936f1d94":"thresh = 0.5\nfor i in range(3):\n    submissions.iloc[i, 1] = ' '.join(train_df.columns[1:][preds[i] >= thresh])\n    if submissions['labels'][i] == '':\n        submissions['labels'][i] = ' '.join(train_df.columns[1:][preds[i] >= np.max(preds[i])])\n        \nsubmissions.to_csv('submission.csv', index=False)    \n","d17f5fd0":"submissions","8b6e56f5":"model.save('EffnetB4.h5')","1f87b8bd":"# Preprocessing and Augmentation","adfd8324":"# Modelling","24a1682b":"# Submission","f1831d3f":"size c\u00e1c \u1ea3nh kh\u00e1c nhau\n","5ceda14b":"# Dataset Exploration","cdb486bc":"c\u00e1c lo\u1ea1i nh\u00e3n kh\u00e1c nhau\n"}}