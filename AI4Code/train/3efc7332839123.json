{"cell_type":{"c53fdfcb":"code","2ded0654":"code","99e9a839":"code","6d2606a8":"markdown","bc4cdc93":"markdown","ae21e66a":"markdown","b52dc385":"markdown"},"source":{"c53fdfcb":"# It takes annotation as an input and decodes the data into a list of integers\ndef RLD(s):\n    s=s.split(\" \")\n    ans=[]\n    i=0\n    while i<len(s):\n        j=0\n        n=int(s[i])\n        while j<int(s[i+1]):\n            ans.append(int(n))\n            n=n+1\n            j=j+1\n        i=i+2\n    return ans","2ded0654":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\ntrain=pd.read_csv(\"..\/input\/sartorius-cell-instance-segmentation\/train.csv\")","99e9a839":"#giving annotation as an input\n\na=RLD(train[\"annotation\"][0])\n\na\n\n#Upvote","6d2606a8":"consider the list of numbers,\n\nl=[ 1 , 2 , 3 , 4 , 5 ,15 , 16 , 17 , 18 ]\n\nAs we can see it is a sequential data, In such cases instead of wasting space for every element we can say\n> *start from **1** and increment it **4** times* and \n*start from **15** and increment it **3** times*\n","bc4cdc93":"The Above sentence can be encoded in Run length as **\"1 4 15 3\"**\n\nSample code for usage of the function explained below.","ae21e66a":"**feel free to use the function and please upvote**","b52dc385":"**Run length encoding and decoding**\n\nRun length encoding is a way of compressing information without the loss of any information."}}