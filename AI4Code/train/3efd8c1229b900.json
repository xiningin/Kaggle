{"cell_type":{"d7b51ed2":"code","04631aa8":"code","66cb3581":"code","88f5fa96":"code","dcb8e95f":"code","b3374919":"code","f5930d53":"code","3860eb38":"code","9b2491fd":"code","40ffa24d":"code","81b1367b":"code","50e13162":"markdown"},"source":{"d7b51ed2":"import tensorflow as tf\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.layers import Embedding, LSTM, Dense\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.optimizers import Adam\nimport numpy as np","04631aa8":"import pandas as pd\nloc = pd.read_csv('..\/input\/data-pos\/mar05l.csv', sep='|')\nauto = pd.read_csv('..\/input\/data-pos\/mar05p.csv', names=['auto'], header=0)\n\ndf = auto.join(loc).sort_values(by=['auto', 'time'])","66cb3581":"df['point'] = list(zip(df.x, df.y))\ndf['point_number'], points = pd.factorize(df['point']) #\u0434\u0430\u0434\u0438\u043c \u0441\u0432\u043e\u0439 \u043d\u043e\u043c\u0435\u0440 \u043a\u0430\u0436\u0434\u043e\u0439 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u0442\u043e\u0447\u043a\u0435 \u0447\u0435\u0440\u0435\u0437 \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043f\u0440\u043e\u0435\u0437\u0436\u0430\u043b\u043e \u0422\u0421\n\n#points - \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0442\u043e\u0447\u0435\u043a, \u043c\u0435\u0436\u0434\u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0430\u043b\u0438\u0441\u044c \u0422\u0421","88f5fa96":"#\u0422\u043e\u043f 1\u043a \u0422\u0421 (\u043a\u0440\u043e\u043c\u0435 \u0441\u0430\u043c\u043e\u0433\u043e \u043f\u0435\u0440\u0432\u043e\u0433\u043e - \u0432 \u043d\u0451\u043c \u043e\u0448\u0438\u0431\u043a\u0430):\ntop = df['auto'].value_counts()[1:1000]\ntopcars = list(top.index.values)\n\n#\u0411\u0435\u0440\u0451\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0438\u0445 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b:\nroutes = df.loc[df['auto'].isin(topcars)]\nroutes = routes.loc[routes.point_number.shift() != routes.point_number] #\u0443\u0434\u0430\u043b\u044f\u0435\u043c \u0437\u0430\u043f\u0438\u0441\u0438, \u043a\u043e\u0433\u0434\u0430 \u0441\u0442\u043e\u044f\u043b\u0438 \u043d\u0430 \u043e\u0434\u043d\u043e\u043c \u043c\u0435\u0441\u0442\u0435 (\u043e\u0434\u043d\u0430 \u0442\u043e\u0447\u043a\u0430 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u0442\u0441\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u043f\u043e\u0434\u0440\u044f\u0434)\nroutes = routes.groupby('auto')['point_number'].agg(list) #\u043f\u0440\u0435\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0432 \u0432\u0438\u0434 \"\u0430\u0432\u0442\u043e - \u043c\u0430\u0440\u0448\u0440\u0443\u0442\"\nroutes","dcb8e95f":"#\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u0438\u043c \u043c\u0435\u043b\u043a\u0438\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0438\u0437 \u043f\u043e\u0441\u0435\u0449\u0435\u043d\u043d\u044b\u0445 \u0442\u043e\u0447\u0435\u043a \u0434\u043b\u044f \u0420\u041d\u041d:\nSEQUENCE_LENGTH = 15\nsequences = []\nfor route in routes:\n    for i in range(SEQUENCE_LENGTH, len(route), 3):\n        seq = route[i-SEQUENCE_LENGTH: i]\n        sequences.append(seq)\nsequences = np.array(sequences)\nsequences[:10]","b3374919":"#X - \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0435 \u0442\u043e\u0447\u043a\u0438 (\u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0447\u0435\u0433\u043e \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u0443\u0435\u043c), y - \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0442\u043e\u0447\u043a\u0430 (\u0447\u0442\u043e \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u0443\u0435\u043c)\nX, y = sequences[:,0:SEQUENCE_LENGTH-1],sequences[:,SEQUENCE_LENGTH-1]\n\n#\u041f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c y \u0432 \u0444\u043e\u0440\u043c\u0430\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043d\u044f\u0442\u0435\u043d \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u0435\u0442\u0438:\npoints_count = len(points)\ny = to_categorical(y, num_classes=points_count)","f5930d53":"#\u0421\u043e\u0437\u0434\u0430\u0451\u043c \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u0443\u044e \u0441\u0435\u0442\u044c\nmodel1 = Sequential()\n\n#5 \u0441\u043b\u043e\u0451\u0432:\nmodel1.add(Embedding(points_count, 10, input_length=len(X[0])))\nmodel1.add(LSTM(1000, return_sequences=True))\nmodel1.add(LSTM(1000))\nmodel1.add(Dense(1000, activation=\"relu\"))\nmodel1.add(Dense(points_count, activation=\"softmax\"))","3860eb38":"#\u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435:\nmodel1.compile(loss=\"categorical_crossentropy\", optimizer=Adam(lr=0.0001), metrics=['accuracy'])\nmodel1.fit(X, y, epochs=20, batch_size=128, validation_split=0.2)","9b2491fd":"import matplotlib.pyplot as plt\n# summarize history for loss\nplt.plot(model1.history.history['loss'])\nplt.plot(model1.history.history['val_loss'])\nplt.title('\u041a\u0440\u0438\u0432\u0430\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['\u0422\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439', '\u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0439'], loc='upper left')\nplt.show()","40ffa24d":"#\u043a\u0430\u0440\u0442\u0430:\nimport folium\n\n#\u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u0440\u0438\u0441\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u043e\u0432 \u043d\u0430 \u043a\u0430\u0440\u0442\u0435\ndef draw_route(car_number, last_n):\n    route = points[routes[car_number]]\n    if (last_n):\n        route = route[-last_n:]\n    folium.PolyLine(route, color='red', weight=5, opacity=0.8).add_to(m)\n    \ndef draw_route_predicted(car_number):\n    route = routes[car_number][-(SEQUENCE_LENGTH-1):]\n    current_point = points[route[-1]]\n    next_point = points[np.argmax(model1.predict([route]))]\n    folium.PolyLine([current_point, next_point], color='blue', weight=5, opacity=0.8).add_to(m)","81b1367b":"#\u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043f\u0440\u043e\u0433\u043d\u043e\u0437:\nm = folium.Map(location=[58.04231694304495, 56.04897379875183], zoom_start = 11)\ndraw_route(1273796, 10)\ndraw_route_predicted(1273796)","50e13162":"\u041f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u0435\u0441\u0442\u043e\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0422\u0421 \u043f\u043e \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u0435\u0433\u043e \u043f\u0435\u0440\u0435\u0434\u0432\u0438\u0436\u0435\u043d\u0438\u044f"}}