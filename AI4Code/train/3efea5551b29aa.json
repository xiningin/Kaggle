{"cell_type":{"77cca398":"code","406c0101":"code","ed2eeadb":"code","0aefcaa5":"code","e02a3da8":"code","f2698c7f":"code","9dd70b29":"code","9e7d4a44":"code","6d192224":"code","0d5d9893":"code","e59abe43":"code","454205af":"code","308350f5":"code","481c4908":"code","2738892f":"code","03657e46":"code","08a4c25c":"code","9a896eb8":"code","df9ee330":"code","bd1448ec":"code","1ce60829":"code","9f690750":"code","9c797b2a":"code","12e65608":"code","71936f8b":"code","f85763e1":"code","fc621025":"code","99b5f622":"code","19fb2c1e":"code","d7dfae83":"code","95ad4817":"code","3645d236":"code","3ccdc4aa":"code","8d75ed39":"code","50f9c528":"code","d9a1b00e":"code","f73a2151":"code","493c8313":"code","70209866":"code","e846d784":"code","e12bc752":"code","9288cb8a":"code","05ff61ae":"code","c4d87abc":"code","5b3f7c2b":"code","68b4e6e7":"code","c2463014":"code","9ada2f8b":"code","c9a3684d":"code","347ec518":"code","6ab51d7b":"code","977d936a":"markdown","cf60121b":"markdown","af2585f4":"markdown","5d629928":"markdown","f557eacb":"markdown","91bcbfcd":"markdown","724f8ccc":"markdown","4ce6d796":"markdown","1c778814":"markdown","ec3ad266":"markdown","4e1022f1":"markdown","91809613":"markdown","be9a4e98":"markdown","88a4f4b1":"markdown","9a457873":"markdown","31bb98d0":"markdown"},"source":{"77cca398":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","406c0101":"##Training & Testing Dataset\ntrain = pd.read_csv('\/kaggle\/input\/food-demand-forecasting\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/food-demand-forecasting\/test.csv')\nfullfil_center = pd.read_csv('\/kaggle\/input\/food-demand-forecasting\/fulfilment_center_info.csv')\nmeal_info = pd.read_csv('\/kaggle\/input\/food-demand-forecasting\/meal_info.csv')","ed2eeadb":"train.head()","0aefcaa5":"fullfil_center.head()","e02a3da8":"meal_info.head()","f2698c7f":"data = pd.merge(train, fullfil_center, on='center_id')","9dd70b29":"data.head()","9e7d4a44":"data.tail()","6d192224":"all_data = pd.merge(data, meal_info, on='meal_id')","0d5d9893":"all_data.head()","e59abe43":"test.head()","454205af":"all_data.shape","308350f5":"test.shape","481c4908":"##Statistical Summary of data\nall_data.describe()","2738892f":"##Information of training data\nall_data.info()","03657e46":"test.info()","08a4c25c":"##Checking Null values\nall_data.isnull().sum()","9a896eb8":"##EDA\nimport matplotlib.pyplot as plt\nplt.scatter(all_data['base_price'], all_data['checkout_price'])\nplt.title('Scatter plot Base Price Vs Checkout Price')\nplt.xlabel('Base Price')\nplt.ylabel('Checkout Price')\nplt.show()","df9ee330":"plt.scatter(all_data['base_price'], all_data['num_orders'])\nplt.title('Scatter plot Base Price Vs Number of Orders')\nplt.xlabel('Base Price')\nplt.ylabel('Number of Orders')\nplt.show()","bd1448ec":"plt.scatter(all_data['checkout_price'], all_data['num_orders'])\nplt.title('Scatter plot Checkout Price Vs Number of Orders')\nplt.xlabel('Checkout Price')\nplt.ylabel('Number of Orders')\nplt.show()","1ce60829":"##Distribution Plot\nimport seaborn as sns\nsns.distplot(all_data['base_price'])","9f690750":"sns.distplot(all_data['checkout_price'])","9c797b2a":"sns.boxplot(all_data['num_orders'])","12e65608":"##Correlation Plot\nimport seaborn as sns\nplt.figure(figsize=(30,15))\ncorrelation = all_data.corr()\nsns.heatmap(correlation, annot=True)","71936f8b":"data_cp = all_data.copy()\ndata_cp.head()","f85763e1":"# Label Encoding\nfrom sklearn.preprocessing import LabelEncoder\n\nlb_enc = LabelEncoder()\ndata_cp[\"make_Cent_type\"] = lb_enc.fit_transform(data_cp[\"center_type\"])\ndata_cp[[\"center_type\", \"make_Cent_type\"]].head(10)","fc621025":"data_cp[\"make_category\"] = lb_enc.fit_transform(data_cp[\"category\"])\ndata_cp[[\"category\", \"make_category\"]].head(10)","99b5f622":"data_cp[\"make_cuisine\"] = lb_enc.fit_transform(data_cp[\"cuisine\"])\ndata_cp[[\"cuisine\", \"make_cuisine\"]].head(10)","19fb2c1e":"cp_data = data_cp.drop(['center_type','category','cuisine'], axis=1)","d7dfae83":"cp_data.head()","95ad4817":"##Traning and Testing data spliting\nX = cp_data.drop('num_orders', axis=1)\ny = cp_data['num_orders']","3645d236":"y.shape","3ccdc4aa":"X.shape","8d75ed39":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression \nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_log_error\nfrom sklearn.metrics import mean_squared_error\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)","50f9c528":"###Linear Regression Model\nlin_reg_model = LinearRegression()\nlin_reg_model.fit(X_train, y_train)","d9a1b00e":"print('Coefficient of model :', lin_reg_model.coef_)","f73a2151":"print('Intercept of model :',lin_reg_model.intercept_)","493c8313":"# Root Mean Squared Error on training dataset\npredict_train = lin_reg_model.predict(X_train)\nrmse_train = mean_squared_error(y_train,predict_train)**(0.5)\nprint('\\nRMSE on train dataset : ', rmse_train)","70209866":"## prediction on test data splitting from metadata\npredict_test = lin_reg_model.predict(X_test)\nrmse_test = mean_squared_error(y_test,predict_test)**(0.5)\nprint('\\nRMSE on test dataset : ', rmse_test)","e846d784":"# ## prediction on test data\n# predict_test = lin_reg_model.predict(test)\n# rmse_test = mean_squared_error(test.id,predict_test)**(0.5)\n# print('\\nRMSE on test dataset : ', rmse_test)","e12bc752":"dec_reg_model = DecisionTreeRegressor(random_state=1)\ndec_reg_model.fit(X_train, y_train)","9288cb8a":"## prediction on test data spliting of metadata\nx_pred_dec = dec_reg_model.predict(X_test)\nprint(\"Mean Squared Log Error is \", mean_squared_log_error(y_test, x_pred_dec))","05ff61ae":"print(\"Root Mean Squared Error is \", mean_squared_error(y_test, x_pred_dec)**(0.5))","c4d87abc":"# ## prediction on test data\n# x_pred_dec = dec_reg_model.predict(test)\n# print(\"Mean Squared Log Error is \", mean_squared_log_error(test.id, x_pred_dec))","5b3f7c2b":"# print(\"Root Mean Squared Error is \", mean_squared_error(test.id, x_pred_dec)**(0.5))","68b4e6e7":"##RandomForest Regressor\nran_reg_model = RandomForestRegressor(random_state=1)\nran_reg_model.fit(X_train, y_train)","c2463014":"## prediction on test data splitting from metadata\nx_pred_ran = ran_reg_model.predict(X_test)\nprint(\"Mean Squared Log Error is \", mean_squared_log_error(y_test, x_pred_ran))","9ada2f8b":"print(\"Root Mean Squared Error is \", mean_squared_error(y_test, x_pred_ran)**(0.5))","c9a3684d":"# ## prediction on test data\n# x_pred_ran = ran_reg_model.predict(test)\n# print(\"Mean Squared Log Error is \", mean_squared_log_error(test.id, x_pred_ran))","347ec518":"# ## prediction on test data\n# x_pred_ran = ran_reg_model.predict(test)\n# print(\"Root Mean Squared Error is \", mean_squared_error(test.id, x_pred_ran)**(0.5))","6ab51d7b":"# ##File creation for submission\n# final_out = pd.DataFrame({'id': test.id,'num_orders': x_pred_dec})\n# final_out.to_csv('submission.csv', index=False)","977d936a":"# Correlation","cf60121b":"# Preparing Dataset","af2585f4":"# Top Row of dataset","5d629928":"### Creating copy of main dataset","f557eacb":"## Statistical Summary of data","91bcbfcd":"## Checking Null Values","724f8ccc":"## Decision Tree Regressor","4ce6d796":"## Random Forest Regressor","1c778814":"### Output file creation for submission","ec3ad266":"I hope you Liked my Notebook. An upvote is a gesture of appreciation and encouragement that fills me with energy to keep improving my efforts ,be kind to show one. \nThanks!","4e1022f1":"# Exploratory Data Analysis","91809613":"## Linear Regression","be9a4e98":"# Regression Model","88a4f4b1":"# Merging Datasets","9a457873":"## Label Encoding","31bb98d0":"## Preparing Dataset for Training and Testing"}}