{"cell_type":{"1ff84c0c":"code","32eafaf6":"code","bd84a769":"code","7af415e1":"code","c6d89308":"code","1eaf4fa1":"code","25531660":"code","74aa34c2":"code","847db1c0":"code","87240653":"code","442005e5":"code","167c0dd4":"code","983b2ecd":"code","aaf81817":"code","f3f68d70":"code","ecad8c7c":"code","636303fd":"code","21b954b1":"code","aae1b8c6":"code","ae99e472":"code","fc42a0b2":"code","7e20be63":"markdown","c3ac6799":"markdown","42982b66":"markdown","28971c61":"markdown","356eff54":"markdown","bb332789":"markdown","fde7ecdb":"markdown","4ec806a5":"markdown","981a9740":"markdown","c91fe5aa":"markdown","2cba9512":"markdown","87c2f728":"markdown","bcd6923c":"markdown","be3d6097":"markdown"},"source":{"1ff84c0c":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport time\nsns.set()\n%matplotlib notebook","32eafaf6":"KAGGLE_DIR = '..\/input\/'\n\ntrain = pd.read_csv(KAGGLE_DIR + \"train\/train.csv\")\ntest = pd.read_csv(KAGGLE_DIR + \"test\/test.csv\")\nfull=train.append(test)","bd84a769":"print(train.shape)\nprint(test.shape)\nprint(full.shape)","7af415e1":"train.columns","c6d89308":"plt.figure()\nhealth_states =['Not Specified','Healthy', 'Minor Injury','Serious Injury']\npos = np.arange(len(health_states))\nhealth=[np.sum(full.Health==0),np.sum(full.Health==1),np.sum(full.Health==2),np.sum(full.Health==3)]\n# change the bar color to be less bright blue\nbars = plt.bar(pos, health, align='center', linewidth=0, color='lightslategrey')\n# soften all labels by turning grey\nplt.xticks(pos, health_states, alpha=0.8)\nplt.title('Health States of the Animals', alpha=3)\n# remove all the ticks (both axes), and tick labels on the Y axis\nplt.tick_params(top='off', bottom='off', left='off', right='off', labelleft='off', labelbottom='on')\n# remove the frame of the chart\nfor spine in plt.gca().spines.values():\n    spine.set_visible(False)\nfor bar in bars:\n    plt.gca().text(bar.get_x() + bar.get_width()\/2, bar.get_height() - 1, str(int(bar.get_height())), \n                 ha='center', color='k', fontsize=11)\nplt.show()","1eaf4fa1":"plt.figure()\nsns.distplot(full.Age)\nplt.ylabel('% of times')\nplt.title('Histogram of the age of the different pets')\nplt.show()\nfull.Age.describe()","25531660":"from collections import Counter\nrescuer_counts = Counter(full.RescuerID)","74aa34c2":"plt.figure()\nsns.distplot(list(rescuer_counts.values()))\nplt.ylabel('% of times')\nplt.title('Histogram of the number of rescues by rescuers')\nplt.show()\npd.Series(list(rescuer_counts.values())).describe()","847db1c0":"plt.figure()\nsns.distplot(train.AdoptionSpeed)\nplt.ylabel('No of times')\nplt.title('Histogram of the Adoption Speed of the different pets')\nplt.show()\npd.Series(train.AdoptionSpeed.describe())\n","87240653":"plt.figure()\nsns.distplot(train.Vaccinated)\nplt.ylabel('No of times')\nplt.title('Histogram of the age of the different pets')\nplt.show()\npd.Series(train.Vaccinated.describe())\n# Pet has been vaccinated (1 = Yes, 2 = No, 3 = Not Sure)","442005e5":"#Easy DataCleaning to avoid categorical features\nfrom sklearn.preprocessing import LabelEncoder\n\ncols=[]\n\nfor i in full:\n    if type(full[i][4])==str: #I put a 4. Works any other but 0\n        cols.append(i)        \n\nfor c in cols:\n    lbl = LabelEncoder() \n    lbl.fit(list(full[c].values)) \n    full[c] = lbl.transform(list(full[c].values))\n\n# shape        \nprint('Shape all_data: {}'.format(full.shape))","167c0dd4":"test=full.query('AdoptionSpeed ==\"NaN\"')\ntrain=full.query('AdoptionSpeed !=\"NaN\"')\ntarget=train['AdoptionSpeed']\ntrain.drop(columns=['AdoptionSpeed','Description','Name','PetID','RescuerID'],inplace=True)\ntest.drop(columns=['AdoptionSpeed','Name', 'RescuerID', 'Description', 'PetID'],inplace=True)","983b2ecd":"from sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier, AdaBoostClassifier\nfrom sklearn.metrics import cohen_kappa_score\nfrom sklearn.metrics import make_scorer\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.model_selection import GridSearchCV\n# Seed for reproducability\nseed = 12345\nnp.random.seed(seed)\n","aaf81817":"tic=time.time()\n# Number of trees in random forest\nn_estimators = [int(x) for x in np.linspace(start = 800, stop = 2000, num = 5)]\n# Number of features to consider at every split\nmax_features = ['auto', 'sqrt']\n# Maximum number of levels in tree\nmax_depth = [int(x) for x in np.linspace(2, 50, num = 5)]\nmax_depth.append(None)\n# Minimum number of samples required to split a node\nmin_samples_split = [5]\n# Minimum number of samples required at each leaf node\nmin_samples_leaf = [1]\n# Method of selecting samples for training each tree\nbootstrap = [True]\n# Create the random grid\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf,\n               'bootstrap': bootstrap}\nprint(random_grid)\ntoc=time.time()\nprint('The time elapsed is {}s'.format(np.round(np.abs(tic-toc))))","f3f68d70":"{'n_estimators': 800,\n 'min_samples_split': 5,\n 'min_samples_leaf': 1,\n 'max_features': 'sqrt',\n 'max_depth': 14,\n 'bootstrap': True}","ecad8c7c":"rf=RandomForestClassifier(n_estimators=800,min_samples_split=5,min_samples_leaf=1,max_features='sqrt',max_depth=14,bootstrap=True)\nrf.fit(train,target)\n","636303fd":"# Metric used for this competition (Quadratic Weigthed Kappa aka Cohen Kappa Score)\ndef metric(y1,y2):\n    return cohen_kappa_score(y1,y2, weights='quadratic')","21b954b1":"metric(rf.predict(train), target)","aae1b8c6":"# Get and store predictions\npredictions = rf.predict(test)\ntest = pd.read_csv(KAGGLE_DIR + \"test\/test.csv\")\nsubmission_df = pd.DataFrame(data={\"PetID\" : test[\"PetID\"], \n                                   \"AdoptionSpeed\" : predictions})","ae99e472":"submission_df['AdoptionSpeed']=submission_df['AdoptionSpeed'].astype('int32');\nsubmission_df.to_csv(\"submission.csv\", index=False)","fc42a0b2":"submission_df.head()","7e20be63":"### Rescuer ID","c3ac6799":"We can appreciate that the split between trainning and test is 26%","42982b66":"### Health","28971c61":"We can appreciate that all animals in the train set have a health report, and most of them are healthy","356eff54":"### Predictions","bb332789":"### Vaccinated","fde7ecdb":"# Use the random grid to search for best hyperparameters\n# First create the base model to tune\nrf = RandomForestClassifier()\n# Random search of parameters, using 3 fold cross validation, \n# search across 100 different combinations, and use all available cores\nrf_random = RandomizedSearchCV(estimator = rf, param_distributions = random_grid, n_iter = 100, cv = 5, verbose=2, random_state=42, n_jobs = -1)\n# Fit the random search model\nrf_random.fit(train, target)\nrf_random.best_params_","4ec806a5":"We observe that the number of pets adopted in the same day is minimum while the maximum is pets that have not been adopted after +90 days","981a9740":"We can appreciate that most of the the Rescuers just report a dog, we can assume that this is random people that give only a founded dog or have a litter and they are turning the dogs\nThere is a rescuer that gave more than 459 dogs in rescue","c91fe5aa":"We can appreciate that the pets are normally young, understanding that Age=0 is less than a month and not a Nan\n","2cba9512":"0 - Pet was adopted on the same day as it was listed. \n\n1 - Pet was adopted between 1 and 7 days (1st week) after being listed. \n\n2 - Pet was adopted between 8 and 30 days (1st month) after being listed. \n\n3 - Pet was adopted between 31 and 90 days (2nd & 3rd month) after being listed. \n\n4 - No adoption after 100 days of being listed. (There are no pets in this dataset that waited between 90 and 100 days).","87c2f728":"Surprisingly there are more  not vaccinated dogs than vaccinated. I guess that would be good to assume that people that dont know that if the dog is vaccinated put them in the no vaccinated group ","bcd6923c":"# Data Cleaning","be3d6097":"### Age"}}