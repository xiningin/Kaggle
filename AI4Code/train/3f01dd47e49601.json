{"cell_type":{"73595b3c":"code","0e187d7d":"code","58cadb47":"code","e3a916a3":"code","08d2ff3a":"code","aa5d752c":"code","5d55d31c":"code","eb5bdb4b":"code","32211cf1":"code","6f3a42fa":"code","ba357465":"code","fb48275a":"code","af9f1e2c":"code","b69bdaf8":"code","5d45bb69":"code","7eeb55de":"code","3875ea72":"code","7a71160c":"code","e659f52f":"code","39619fad":"code","f9c23d9a":"code","8b53386f":"code","63725e7b":"code","4ee3d9de":"code","1a6d8056":"code","9b2e42b7":"code","ff236ef3":"code","457123af":"code","ccd9956d":"code","810e6c3c":"code","5fbb8a16":"code","f1a92b62":"code","4413c3a7":"code","692997a1":"code","75c5616a":"code","09d56ac3":"code","d59e8827":"code","59c16aa9":"code","7f5b62ca":"code","44430419":"code","20a01442":"code","15830aa9":"code","c4ee3e42":"code","801690c3":"code","8821d7d1":"code","e4227170":"code","4450bb63":"code","0e46c437":"code","c8d3998d":"code","c1d50b30":"code","f96da4cd":"code","701a56f4":"code","938b8e2e":"code","184a767a":"code","6077c20a":"code","e1f10449":"code","0fba8c61":"code","61967226":"code","29ecda16":"code","f3d850e6":"code","7057b90f":"code","54f82620":"code","88e39a47":"code","57d664a8":"code","adb736a3":"code","e8267cb1":"code","0a074c71":"code","01b703b5":"code","8fb99588":"code","cd753860":"code","6d997816":"code","32647ac8":"code","ee48b68f":"code","a0a19f4b":"code","9a0eb473":"code","a133026c":"code","b1236f3e":"code","1bccb6e5":"code","bc708513":"code","0f79714d":"code","385048e0":"code","acfc6e3f":"code","2be4a7e3":"code","acb6701a":"markdown","e437516c":"markdown","a34fbce0":"markdown","4d430fc9":"markdown","a81cb2cf":"markdown","587f18a1":"markdown","9d979c7d":"markdown","1d7a2908":"markdown","bc74546c":"markdown","3904f665":"markdown","495edcf3":"markdown","4a2750ba":"markdown","3ac86af0":"markdown","dd30f015":"markdown","c66e0af1":"markdown","a51c73e5":"markdown","35ad6688":"markdown","51c9306b":"markdown","c8bd5d8a":"markdown","2cf30ac3":"markdown","8eeb2710":"markdown","49e3ef30":"markdown","2cc73177":"markdown","9e4d0763":"markdown","7ad25763":"markdown","41896289":"markdown","dd91d6a7":"markdown","bb33d96f":"markdown","af156e82":"markdown","b7bc15d5":"markdown","f036cd8c":"markdown","215bc3f1":"markdown","4342f080":"markdown","9b936bdd":"markdown","8c97133a":"markdown","f04edc65":"markdown","0d353c55":"markdown","fba164d8":"markdown","dd5a2b9d":"markdown","c5bcbd1d":"markdown"},"source":{"73595b3c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0e187d7d":"train_df=pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df=pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId=test_df[\"PassengerId\"]","58cadb47":"train_df.columns","e3a916a3":"train_df.head()","08d2ff3a":"train_df.describe()","aa5d752c":"train_df.info()","5d55d31c":"def bar_plot(variable):\n    \"\"\"\n    input: variable ex: \"Sex\"\n    output: bar plot & value count\n    \"\"\"\n    var=train_df[variable] # get feature\n    varValue= var.value_counts() # count number of categorical variable(value\/sample)\n    \n    #data visulation\n    plt.figure(figsize=(9,3))\n    plt.bar(varValue.index,varValue)\n    plt.xticks(varValue.index,varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))\n    \n    \n    ","eb5bdb4b":"category1=[\"Survived\",\"Sex\", \"Pclass\", \"Embarked\",\"SibSp\",\"Parch\"]\nfor c in category1:\n    bar_plot(c)","32211cf1":"category2=[\"Cabin\",\"Name\",\"Ticket\"]\n\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","6f3a42fa":"def plot_hist(variable):\n    plt.figure(figsize=(9,3))\n    plt.hist(train_df[variable],bins=50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","ba357465":"numericVar=[\"Fare\",\"Age\",\"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","fb48275a":"# Pclass vs Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"],as_index=False).mean().sort_values(by=\"Survived\",ascending= False)","af9f1e2c":"# Sex vs Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"],as_index=False).mean().sort_values(by=\"Survived\",ascending= False)","b69bdaf8":"# SibSp vs Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"],as_index=False).mean().sort_values(by=\"Survived\",ascending= False)","5d45bb69":"# Parch vs Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"],as_index=False).mean().sort_values(by=\"Survived\",ascending= False)","7eeb55de":"def detect_outliers(df,features):\n    outlier_indices=[]\n    for c in features:\n        Q1= np.percentile(df[c],25)\n        Q3=np.percentile(df[c],75)\n        IQR=Q3-Q1\n        outlier_step=IQR*1.5\n        outlier_list_col=df[(df[c]<Q1-outlier_step) | (df[c]> Q3+outlier_step)].index\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices=Counter(outlier_indices)\n    multiple_outliers=list(i for i,v in outlier_indices.items() if v>2)\n    \n    return multiple_outliers","3875ea72":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","7a71160c":"train_df=train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis=0).reset_index(drop=True)","e659f52f":"train_df_len=len(train_df)\ntrain_df=pd.concat([train_df,test_df],axis=0).reset_index(drop=True)","39619fad":"train_df.head()","f9c23d9a":"train_df.columns[train_df.isnull().any()]","8b53386f":"train_df.isnull().sum()","63725e7b":"train_df[train_df[\"Embarked\"].isnull()]","4ee3d9de":"train_df.boxplot(column=\"Fare\",by=\"Embarked\")\nplt.show()","1a6d8056":"train_df[\"Embarked\"]=train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","9b2e42b7":"train_df[train_df[\"Fare\"].isnull()]","ff236ef3":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))","457123af":"list1=[\"SibSp\",\"Parch\",\"Age\",\"Fare\",\"Survived\"]\nsns.heatmap(train_df[list1].corr(),annot= True, fmt=\".2f\")\nplt.show()","ccd9956d":"g= sns.factorplot(x=\"SibSp\",y= \"Survived\", data=train_df, kind=\"bar\",size=6)\ng.set_ylabels(\"Survived Probabilit\")\nplt.show()","810e6c3c":"g=sns.factorplot(x=\"Parch\",y=\"Survived\", kind=\"bar\", data=train_df,size=6)\ng.set_ylabels(\"Survived Probabilit\")\nplt.show()\n","5fbb8a16":"g=sns.factorplot(x=\"Pclass\",y=\"Survived\", kind=\"bar\", data=train_df,size=6)\ng.set_ylabels(\"Survived Probabilit\")\nplt.show()","f1a92b62":"g=sns.FacetGrid(train_df, col=\"Survived\")\ng.map(sns.distplot,\"Age\",bins=25)\nplt.show()","4413c3a7":"g=sns.FacetGrid(train_df, col=\"Survived\",row=\"Pclass\",size=2)\ng.map(plt.hist,\"Age\",bins=25)\ng.add_legend()\nplt.show()","692997a1":"g=sns.FacetGrid(train_df,row=\"Embarked\",size=2)\ng.map(sns.pointplot,\"Pclass\", \"Survived\",\"Sex\")\ng.add_legend()\nplt.show()","75c5616a":"g=sns.FacetGrid(train_df,row=\"Embarked\",col=\"Survived\",size=2)\ng.map(sns.barplot,\"Sex\",\"Fare\")\ng.add_legend()\nplt.show()","09d56ac3":"train_df[train_df[\"Age\"].isnull()]","d59e8827":"sns.factorplot(x=\"Sex\",y=\"Age\",data=train_df,kind=\"box\")\nplt.show()","59c16aa9":"sns.factorplot(x=\"Sex\",y=\"Age\",hue=\"Pclass\",data=train_df,kind=\"box\")\nplt.show()","7f5b62ca":"sns.factorplot(x=\"Parch\",y=\"Age\",data=train_df,kind=\"box\")\nsns.factorplot(x=\"SibSp\",y=\"Age\",data=train_df,kind=\"box\")\n\nplt.show()","44430419":"#train_df[\"Sex\"]=[1 if i ==\"male\" else 0 for i in train_df[\"Sex\"]]","20a01442":"sns.heatmap(train_df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\"]].corr(),annot=True)\nplt.show()","15830aa9":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) &(train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"])& (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med","c4ee3e42":"train_df[train_df[\"Age\"].isnull()]","801690c3":"train_df[\"Name\"].head()","8821d7d1":"name = train_df[\"Name\"]\ntrain_df[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name]","e4227170":"train_df[\"Title\"].head(10)","4450bb63":"sns.countplot(x=\"Title\", data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","0e46c437":"# convert to categorical\ntrain_df[\"Title\"] = train_df[\"Title\"].replace([\"Lady\",\"the Countess\",\"Capt\",\"Col\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"other\")\ntrain_df[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Ms\" or i == \"Mlle\" or i == \"Mrs\" else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"]]\ntrain_df[\"Title\"].head(20)","c8d3998d":"sns.countplot(x=\"Title\", data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","c1d50b30":"g = sns.factorplot(x = \"Title\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_xticklabels([\"Master\",\"Mrs\",\"Mr\",\"Other\"])\ng.set_ylabels(\"Survival Probability\")\nplt.show()","f96da4cd":"train_df.drop(labels = [\"Name\"], axis = 1, inplace = True)\ntrain_df.head()","701a56f4":"train_df = pd.get_dummies(train_df,columns=[\"Title\"])\ntrain_df.head()","938b8e2e":"train_df.head()","184a767a":"train_df[\"Fsize\"] = train_df[\"SibSp\"] + train_df[\"Parch\"] + 1 #+1 means passenger","6077c20a":"train_df.head()","e1f10449":"g = sns.factorplot(x = \"Fsize\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","0fba8c61":"train_df[\"family_size\"] = [1 if i < 5 else 0 for i in train_df[\"Fsize\"]] #different\ntrain_df.head(10)","61967226":"sns.countplot(x = \"family_size\", data = train_df)\nplt.show()","29ecda16":"g = sns.factorplot(x = \"family_size\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","f3d850e6":"train_df = pd.get_dummies(train_df, columns= [\"family_size\"])\ntrain_df.head()","7057b90f":"train_df[\"Embarked\"].head()","54f82620":"sns.countplot(x = \"Embarked\", data = train_df)\nplt.show()","88e39a47":"train_df = pd.get_dummies(train_df, columns=[\"Embarked\"])\ntrain_df.head()","57d664a8":"train_df[\"Ticket\"].head(20)","adb736a3":"tickets = []\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"] = tickets\ntrain_df[\"Ticket\"].head(20)","e8267cb1":"train_df.head()","0a074c71":"train_df = pd.get_dummies(train_df, columns= [\"Ticket\"], prefix = \"T\") #prefix for better name space\ntrain_df.head(10)","01b703b5":"sns.countplot(x = \"Pclass\", data = train_df)\nplt.show()","8fb99588":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns= [\"Pclass\"])\ntrain_df.head()","cd753860":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns=[\"Sex\"])\ntrain_df.head()","6d997816":"train_df.drop(labels = [\"PassengerId\", \"Cabin\"], axis = 1, inplace = True)\n","32647ac8":"train_df.columns","ee48b68f":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","a0a19f4b":"train_df_len","9a0eb473":"test = train_df[train_df_len:]\ntest.drop(labels = [\"Survived\"],axis = 1, inplace = True)\n","a133026c":"test.head()","b1236f3e":"train = train_df[:train_df_len]\nX_train = train.drop(labels = \"Survived\", axis = 1)\ny_train = train[\"Survived\"]\nX_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size = 0.33, random_state = 42)\nprint(\"X_train\",len(X_train))\nprint(\"X_test\",len(X_test))\nprint(\"y_train\",len(y_train))\nprint(\"y_test\",len(y_test))\nprint(\"test\",len(test))","1bccb6e5":"logreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\nacc_log_train = round(logreg.score(X_train, y_train)*100,2) \nacc_log_test = round(logreg.score(X_test,y_test)*100,2)\nprint(\"Training Accuracy: % {}\".format(acc_log_train))\nprint(\"Testing Accuracy: % {}\".format(acc_log_test))","bc708513":"random_state = 42\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                \"max_depth\": range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\": [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid]","0f79714d":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1,verbose = 1)\n    clf.fit(X_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","385048e0":"cv_results = pd.DataFrame({\"Cross Validation Means\":cv_result, \"ML Models\":[\"DecisionTreeClassifier\", \"SVM\",\"RandomForestClassifier\",\n             \"LogisticRegression\",\n             \"KNeighborsClassifier\"]})\n\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")","acfc6e3f":"votingC = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),\n                                        (\"rfc\",best_estimators[2]),\n                                        (\"lr\",best_estimators[3])],\n                                        voting = \"soft\", n_jobs = -1)\nvotingC = votingC.fit(X_train, y_train)\nprint(accuracy_score(votingC.predict(X_test),y_test))","2be4a7e3":"test_survived = pd.Series(votingC.predict(test), name = \"Survived\")\nresults = pd.concat([test_PassengerId, test_survived],axis = 1)\nresults.to_csv(\"titanic.csv\", index = False)","acb6701a":"<a id=26><\/a>\n## Pclass","e437516c":"<a id=\"1\"> <\/a>\n# Load and Check Data","a34fbce0":"<a id=16><\/a>\n## Age -- Survived","4d430fc9":"<a id=\"7\"><\/a>\n# Outlier Detection","a81cb2cf":"<a id=19><\/a>\n## Embarked -- Sex-- Fare -- Survived !!!!!!!!!!!!Visulation change","587f18a1":"<a id=\"4\"><\/a>\n## Categorical Variable","9d979c7d":"<a id=23><\/a>\n## Family Size","1d7a2908":"<a id=14><\/a>\n## Parch -- Survived","bc74546c":"<a id=11><\/a>\n# Visulation","3904f665":"<a id=22><\/a>\n## Name -- Title","495edcf3":"* Female passengers have much better survival than males.\n* Between Pclass and Embarked has relation.\n* Males have better survival rate in Pclass in C.\n* Embarked and sex will be used in training.","4a2750ba":"* Pclass is important feature for model  training.","3ac86af0":"<a id=21><\/a>\n# Feature Engineering","dd30f015":"<a id=32><\/a>\n## Hyperparameter Tuning -- Grid Search -- Cross Validation\nWe will compare 5 ml classifier and evaluate mean accuracy of each of them by stratified cross validation.\n\n* Decision Tree\n* SVM\n* Random Forest\n* KNN\n* Logistic Regression","c66e0af1":"<a id=27><\/a>\n## Sex","a51c73e5":"<a id=24><\/a>\n## Embarked","35ad6688":"# Introduction\n\n<font color=\"blue\">\nContent:\n    \n1. [Load and Check Data](#1)\n2. [Variable Describtion](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable Analysis](#4)\n        * [Numerical Variable Analysis](#5)\n3. [Basic Data Analysis](#6)\n4. [Outlier Detection](#7)\n5. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n6. [Visulation](#11)\n    * [Correlation Between Sibsp -- Parch -- Age -- Fare -- Survived](#12)\n    * [SibSp -- Survived](#13)\n    * [Parch -- Survived](#14)\n    * [Pclass -- Survived](#15)\n    * [Age -- Survived](#16)\n    * [Pclass -- Survived -- Age](#17)\n    * [Embarked -- Sex -- Pclass -- Survived](#18)\n    * [Embarked -- Sex -- Fare -- Survived](#19)\n    * [Fill Missing: Age Feature](#20)\n7. [Feature Engineering](#21)\n    * [Name -- Title](#22)\n    * [Family Size](#23)\n    * [Embarked](#24)\n    * [Ticket](#25)\n    * [Pclass](#26)\n    * [Sex](#27)\n    * [Drop PassengerId and Cabin](#28)\n8. [Modeling](#29)\n    * [Train - Test Split](#30)\n    * [Simple Logistic Regression](#31)\n    * [Hyperparameter Tuning -- Grid Search -- Cross Validation](#32)\n    * [Ensemble Modeling](#33)\n    * [Prediction and Submission](#34)","51c9306b":"<a id=33><\/a>\n1. ## Emsemble Modeling","c8bd5d8a":"<a id=\"6\"><\/a>\n# Basic Data Analysis\n\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived\n--------------------------------\n* Pclass - Parch\n* Sex - Fare","2cf30ac3":"<a id=28><\/a>\n## Drop Passenger ID and Cabin","8eeb2710":"* First class passengers are older than second class passengers and second class older than third class passengers.","49e3ef30":"<a id=20><\/a>\n## Fill Missing: Age Feature","2cc73177":"<a id=\"2\"> <\/a>\n# Variable Description\n\n1. PassengerId : unique identifier number to passenger\n1. Survived : passenger survive(1) or not(0)\n1. Pclass : passenger class\n1. Name : name \n1. Sex : gender of passenger\n1. Age : age of passenger\n1. SibSp : number of siblings or spouses\n1. Parch : number of parents or children\n1. Ticket : ticket number\n1. Fare : amount of money to spent on ticket\n1. Cabin : cabin category\n1. Embarked : port where passenger embarked(C: Cherbourg, Q: Queenstown, S: Southampton)\n","9e4d0763":"<a id=25><\/a>\n## Ticket\n","7ad25763":"<a id=\"9\"><\/a>\n## Find Missing Value","41896289":"<a id=\"10\"><\/a>\n## Fill Missing Value\n* Embarked has 2 missing value\n* Fare has only 1","dd91d6a7":"<a id=30><\/a>\n## Train - Test Split","bb33d96f":"<a id=31><\/a>\n## Simple Logistic Regression","af156e82":"<a id=17><\/a>\n## Pclass -- Survived -- Age","b7bc15d5":"<a id=12><\/a>\n## Correlation Between Sibsp -- Parch -- Age-- Fare -- Survived","f036cd8c":"<a id=\"8\"><\/a>\n# Missing Value\n* Find Missing Value \n* Fill Missing Value","215bc3f1":"<a id=18><\/a>\n## Embarked -- Sex-- Pclass -- Survived","4342f080":"* Sex is not informative for age prediction, age distribution seems to be same.","9b936bdd":"<a id=34><\/a>\n## Prediction and Submission","8c97133a":"<a id=15><\/a>\n## Pclass -- Survived","f04edc65":"* float64(2) : Fare and Age\n* int64(5) : Pclass, SinSp, Parch, PassengerId and Survived\n* object(5) : Cabin, Embarked, Ticket, Name and Sex","0d353c55":"<a id=\"5\"><\/a>\n## Numerical Variable","fba164d8":"<a id=\"3\"><\/a>\n# Univariate Variable Analysis\n* Categorical Variable: Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsb and Parch \n* Numerical Variable: Fare, Age and PassengerId","dd5a2b9d":"<a id=13><\/a>\n## SibSp -- Survived","c5bcbd1d":"<a id=29><\/a>\n# Modeling"}}