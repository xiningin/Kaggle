{"cell_type":{"180ad4df":"code","e0eb6a6f":"code","d984f733":"code","a5286611":"code","2e2a50ce":"code","adc74b3a":"code","5822f058":"code","129d5b7b":"code","2aa857d2":"code","0d31a240":"code","da0e1211":"code","6f98ec70":"code","79c32d97":"code","c84fb6b4":"code","ccfea5a6":"code","58776690":"code","4d78e6ec":"markdown","d1e7a146":"markdown","04b50fac":"markdown","27ad4de7":"markdown","32e883f6":"markdown","9aa3cfd7":"markdown"},"source":{"180ad4df":"# Import packages\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Set style & figures inline\nsns.set()\n%matplotlib inline","e0eb6a6f":"confirmed_cases_data_url = 'https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv'\ndeath_cases_data_url     = 'https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv'\nrecovery_cases_data_url  = 'https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv'","d984f733":"# Import data & check it out\nraw_data_confirmed = pd.read_csv(confirmed_cases_data_url)\nraw_data_confirmed.head()","a5286611":"# Group by region\ndata_day = raw_data_confirmed.groupby(['Country\/Region']).sum().drop(['Lat', 'Long'], axis=1)\ndata_day.head()","2e2a50ce":"df = data_day.transpose()","adc74b3a":"# Melt data so that it is long\ndata = data_day.reset_index().melt(id_vars='Country\/Region', var_name='date')\ndata.head()","5822f058":"data.loc[(data.value < 1),'value'] = None\ndata.head()","129d5b7b":"# Pivot data to wide & index by date\ndf = data.pivot(index='date', columns='Country\/Region', values='value')\ndf.tail()","2aa857d2":"# Set index as DateTimeIndex\ndatetime_index = pd.DatetimeIndex(df.index)\ndf.set_index(datetime_index, inplace=True)\ndf.head()","0d31a240":"# Class for grouping data by region\nclass grouping_by_region:\n    def __init__(self,raw_data,min_val):\n        super().__init__()\n        self.raw_data = raw_data\n        self.min_val  = min_val\n        self.axis     = 1\n        self.index    = 'date'\n        self.columns  = 'Country\/Region'\n    def Grouping(self):\n        self.data_day = self.raw_data.groupby([self.columns]).sum().drop(['Lat', 'Long'], axis = self.axis)\n        self.df       = self.data_day.transpose()\n        self.data     = self.data_day.reset_index().melt(id_vars = self.columns, var_name = self.index)\n        self.data.loc[(self.data.value < self.min_val), 'value'] = None \n        self.df       = self.data.pivot(index = self.index,columns = self.columns,values='value')\n        # Set index as DateTimeIndex\n        self.datetime_index = pd.DatetimeIndex(self.df.index)\n        self.df.set_index(datetime_index, inplace=True)\n        df = self.df\n        return df\n\n# Function to plot time series of several countries of interest\ndef plot_time_series(df, plot_title, x_label, y_label, isLogY=False):\n    df.plot(figsize=(20,10), linewidth=5, fontsize=20, logy=isLogY)\n    plt.xlabel(x_label, fontsize=20);\n    plt.ylabel(y_label, fontsize=20);\n    plt.title(plot_title, fontsize=20);\n        \n# Function to manipulate the data\ndef data_manipulation(df):\n    df.dropna(axis=1, how='all', inplace=True)\n    df = df.sort_index()\n    df1 = df.reset_index().drop(['date'], axis=1)\n    for col in df1.columns:\n        df1[col] = df1[col].shift(-df1[col].first_valid_index())\n        \n    df2 = df1.apply(lambda x: x.shift(-x.first_valid_index()))\n    return df2\n\n","da0e1211":"# Plot time series of several countries of interest\npoi = ['China', 'US', 'Italy', 'France', 'Australia']\ndf[poi].plot(figsize=(20,10), linewidth=5, fontsize=20, logy=True)\nplt.xlabel('Dates', fontsize=20)\nplt.ylabel('Confirmed Patients Logarithmic count', fontsize=20)\nplt.title('Confirmed Patients Logarithmic Time Series', fontsize=20)","6f98ec70":"# Import data & check it out\nraw_data_deaths = pd.read_csv(death_cases_data_url)\nraw_data_deaths.head()","79c32d97":"# Usage of our class\nk = grouping_by_region(raw_data_deaths,25)\nk.Grouping()","c84fb6b4":"# Plot time series of several countries of interest\npoi = ['China', 'US', 'Italy', 'France', 'Australia']\ndf[poi].plot(figsize=(20,10), linewidth=5, fontsize=20)\nplt.xlabel('Date', fontsize=20);\nplt.ylabel('Deaths Patients count', fontsize=20);\nplt.title('Deaths Patients Time Series', fontsize=20);","ccfea5a6":"class Graph_Builder:\n    def __init__(self,country_list,time_index):\n        super().__init__()\n        self.countries_list = country_list\n        self.time_index     = time_index\n        self.time   = ['Dates','Days']\n        self.data   = []\n        print()\n    def Nump_infected(self):\n        if self.time[self.time_index] == 'Dates':\n            df[self.countries_list].plot(figsize=(20,10), linewidth=5, fontsize=20, logy=True)\n            plt.xlabel(self.time[self.time_index], fontsize=20)\n            plt.ylabel('Confirmed Patients Logarithmic count', fontsize=20)\n            plt.title('Confirmed Patients Logarithmic Time Series', fontsize=20)\n        else:\n            df1 = df.reset_index().drop(['date'], axis=1)\n            df1.head()\n            df2 = df1.apply(lambda x: x.shift(-x.first_valid_index()))\n            df2[self.countries_list].plot(figsize=(20,10), linewidth=5, fontsize=20, logy=True)\n            plt.xlabel(self.time[self.time_index], fontsize=20)\n            plt.ylabel('Confirmed Patients Logarithmic count', fontsize=20)\n            plt.title('Confirmed Patients Logarithmic Time Series', fontsize=20)\n\n            \n    def Deaths(self):\n        if self.time[self.time_index] == 'Dates':\n            df[self.countries_list].plot(figsize=(20,10), linewidth=5, fontsize=20)\n            plt.xlabel(self.time[self.time_index], fontsize=20)\n            plt.ylabel('Deaths Patients count', fontsize=20)\n            plt.title('Deaths Patients Time Series', fontsize=20)\n        if self.time[self.time_index] == 'Days':\n            df1 = df.reset_index().drop(['date'], axis=1)\n            df2 = df1.apply(lambda x: x.shift(-x.first_valid_index()))\n            df2[self.countries_list].plot(figsize=(20,10), linewidth=5, fontsize=20, logy=True)\n            plt.xlabel(self.time[self.time_index], fontsize=20)\n            plt.xlabel(self.time[self.time_index], fontsize=20)\n            plt.ylabel('Deaths Patients count', fontsize=20)\n            plt.title('Deaths Patients Time Series', fontsize=20)\n            \n    def Recovered(self):\n        if self.time[self.time_index] == 'Dates':\n            plot_time_series(df[self.countries_list], 'Recovered Patients Time Series', 'Date', 'Recovered Patients count', False)\n        \n\n        ","58776690":"# Example of usage class builder\ncountries_lists = ['US','Uzbekistan','France','Italy','Russia','Ukraine','France',]\ntime_index = 0\nk = Graph_Builder(countries_lists,time_index)\nk.Recovered()\nk.Deaths()\nk.Nump_infected()\n\ntime_index = 1\nk = Graph_Builder(countries_lists,time_index)\nk.Recovered()\nk.Deaths()\nk.Nump_infected()","4d78e6ec":"Deaths VIS","d1e7a146":"# COVID19 VISUALIZATION USING JOHN HOPKINS CSSE DATASET.\n# This notebook was created to show coronavirus's spread.\n![university.logo_.small_.vertical.white_.png](attachment:university.logo_.small_.vertical.white_.png)\n\n\nRESOURSES:\n* Covid-19: active cases and extrapolation by Ga\u00ebl Varoquaux, Emmanuelle Gouillart, Russell Poldrack, and Guillaume Lemaitre\n* NYC Covid-19 data dashboard by Sue Marquez\n* All of these dashboards contributed to by many and powered by the work of Hamel Husain.\n* also this is useful.\n\nAuthor: Bagdasarov ALbert\n\n![2AP1TD2-b598c7937e0cb7c3ddb3d98f6d897d82.jpg](attachment:2AP1TD2-b598c7937e0cb7c3ddb3d98f6d897d82.jpg)","04b50fac":"****CLASSES AND FUNCTIONS FOR WORKING WITH DATA.****","27ad4de7":"**BUILDING A CLASS FOR CREATING THE COVID19 SREAD GRAPHS**","32e883f6":"So we have created python class for building graph,manipulating with datset.Potentially you could use it for other covi19 datasets.\n\n\nIf you find this notebook useful,please upvote. :)","9aa3cfd7":"NUMBER OF INFECTED VIS"}}