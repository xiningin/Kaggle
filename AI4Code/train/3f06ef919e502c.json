{"cell_type":{"26034027":"code","f588c7c0":"code","68491459":"code","fccd1dc3":"code","4734e1ef":"code","2c9e5aec":"code","ae3d50f5":"code","5619584d":"code","d731ace0":"code","08be5139":"code","ceb68c6f":"code","7d2e60f3":"code","758a42ed":"code","58dfc7cd":"code","1d23b565":"code","90568547":"code","f551e795":"code","2ffd267a":"code","8c9a49f8":"code","ee6040d9":"code","e3455309":"code","07cfacce":"code","e755c9bc":"code","dc186f42":"code","61327238":"code","d7c761ff":"code","ed31abc7":"code","6e9453a9":"code","b546bd5a":"code","fb020ef7":"code","b87f9048":"code","671fd379":"code","6b3782cb":"code","0ec2e299":"code","849bfa34":"code","41193111":"code","83638658":"markdown","8b4c772b":"markdown","08551d4f":"markdown","510f4aaa":"markdown","cdfcc051":"markdown","b11491c8":"markdown"},"source":{"26034027":"import pandas as pd\nimport numpy as np\nimport math","f588c7c0":"df= pd.read_csv('..\/input\/drug-classification\/drug200.csv')\ndf","68491459":"set(df['Drug'])","fccd1dc3":"{0:'DrugY', 1:'drugA', 2:'drugB', 3:'drugC', 4:'drugX'}","4734e1ef":"df.describe()","2c9e5aec":"df.info()","ae3d50f5":"X=df.drop('Drug', axis=1)\nY=df['Drug']\n\nX=pd.get_dummies(X)","5619584d":"Y=Y.map(lambda x:0 if x.strip()=='DrugY' else 1 if x.strip()=='drugA' else 2 if x.strip()=='drugB' else 3 if x.strip()=='drugC' else 4)","d731ace0":"X","08be5139":"Y","ceb68c6f":"X.info()","7d2e60f3":"X.isnull().sum()","758a42ed":"X.describe()","58dfc7cd":"Y.value_counts()","1d23b565":"print(X.shape)\nprint(Y.shape)","90568547":"print('X=', X.shape)\nprint('Y=', Y.shape)\nprint(Y.value_counts())","f551e795":"from sklearn.model_selection import train_test_split","2ffd267a":"x_train, x_test, y_train, y_test= train_test_split(X, Y, train_size=0.9, random_state=42, stratify=Y)","8c9a49f8":"print('x train:',x_train.shape)\nprint('x test',x_test.shape)\nprint('y train',y_train.shape)\nprint('y test', y_test.shape)","ee6040d9":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.dummy import DummyClassifier\nfrom sklearn.svm import SVC\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import BaggingClassifier","e3455309":"scc=StandardScaler()\nx_train=scc.fit_transform(x_train)","07cfacce":"#pipe=Pipeline([('standardscaler', StandardScaler()),('classifier', BaggingClassifier())])\npipe=Pipeline([('classifier', BaggingClassifier())])\n\n# You can run all algorithms but running all algorithms takes very long time\n# DecisionTreeClassifier gives best accuracy and f1-score than remaining so I only ran this algorithm \n\ngrid_param=[\n                #{\n                #    'classifier': [LogisticRegression()],\n                #    'classifier__penalty':['l2','l1'],\n                #    'classifier__C':np.logspace(0,4,10)\n                #},\n                #{\n                #    'classifier':[SVC()],\n                #    'classifier__kernel':['rbf'],\n                #    'classifier__gamma':[0.001,0.0001,0.01,0.1, 0,1,10,100,1000,10000],\n                #    'classifier__C':[0.001,0.0001,0.01,0.1, 0,1,10,100,1000,10000],\n                #},\n                {\n                    'classifier':[DecisionTreeClassifier()],\n                    'classifier__max_leaf_nodes':np.arange(1,11)\n                },\n                #{\n                #    'classifier':[RandomForestClassifier()],\n                #    'classifier__n_estimators':np.arange(50,1050,50),\n                #    'classifier__max_leaf_nodes':np.arange(1,11)\n                #},\n                #{\n                #    'classifier':[XGBClassifier()],\n                #    'classifier__n_estimators':np.arange(50,1050,50),\n                    #'classifier__max_leaf_nodes':np.arange(1,11)\n                #    'classifier__max_depth':np.arange(1,21)\n                #}\n]","e755c9bc":"from sklearn.model_selection import StratifiedKFold\n\nskf=StratifiedKFold(n_splits=3, random_state=None)   ","dc186f42":"grid_search= GridSearchCV(pipe, grid_param, cv=skf, verbose=4, n_jobs=-1, scoring='f1_macro')\nbest_model=grid_search.fit(x_train, y_train)","61327238":"print(best_model.best_estimator_)","d7c761ff":"print(best_model.best_params_)","ed31abc7":"print(best_model.best_score_)","6e9453a9":"#pd.DataFrame(best_model.cv_results_)","b546bd5a":"print(y_train.value_counts())\nprint(y_test.value_counts())","fb020ef7":"dic={}\n\nfor p,s in zip(best_model.cv_results_['params'],best_model.cv_results_['mean_test_score']):\n    dic[s]=p\n    #print(s,p)\n#for p,s in sorted(dic, reverse=True):\n#    print(s,p)\nfor zzz in sorted(dic, reverse=True):\n    print(zzz,dic[zzz])","b87f9048":"from sklearn.model_selection import cross_val_predict\n\ny_train_pred = cross_val_predict(best_model.best_estimator_, x_train, y_train, cv=5)","671fd379":"from sklearn.metrics import confusion_matrix\n\nconfusion_matrix(y_train, y_train_pred)","6b3782cb":"from sklearn.metrics import classification_report\n\nprint(classification_report(y_train, y_train_pred))","0ec2e299":"x_test_scaled=scc.transform(x_test)\n\ny_test_pred=best_model.best_estimator_.predict(x_test_scaled)","849bfa34":"confusion_matrix(y_test, y_test_pred)","41193111":"print(classification_report(y_test, y_test_pred))","83638658":"# Evaluation","8b4c772b":"## Splitting data into Train and Test data","08551d4f":"## Training","510f4aaa":"## Handling Categorical Variables","cdfcc051":"## Identifing Missing Values","b11491c8":"## Identifing occurence of each category"}}