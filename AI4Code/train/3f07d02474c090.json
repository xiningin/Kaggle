{"cell_type":{"89f73d98":"code","cf57ff41":"code","30d137f5":"code","e9d5c4a0":"code","75fca843":"code","5eb01059":"code","7ccfbf83":"code","8a7040c9":"code","42d8f3f9":"code","87c6e878":"code","2c1598ae":"code","4f31c627":"code","2b0f8c06":"code","4c6323eb":"code","5c0d8c0c":"code","9fbbc94f":"code","a2f1191d":"code","0481ac60":"code","a9fde901":"code","d2b7cd88":"code","749784ba":"code","d8a2dbc5":"code","12d44a05":"code","8ae4e779":"code","8a487122":"code","a828bf1f":"code","5a2bccea":"code","fab11a6f":"code","8b3437e4":"code","ac23236d":"markdown","a522fab7":"markdown","0b00129f":"markdown","95ece2be":"markdown","12eff0eb":"markdown","2b1a42bd":"markdown","756222cc":"markdown","191f21fb":"markdown","605a4326":"markdown","99975008":"markdown","fd75a2cc":"markdown","ffd5f00a":"markdown","e2c9b230":"markdown","bff5fd50":"markdown","ed991e59":"markdown","b44b1f49":"markdown","0f1c6602":"markdown","c1db9307":"markdown","390d5ae2":"markdown","59df5e91":"markdown"},"source":{"89f73d98":"%matplotlib inline\nimport random\nrandom.seed(10)\nimport numpy as np \nnp.random.seed(10)\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport statsmodels.api as sm\nfrom statsmodels.formula.api import ols\nimport multiprocessing\ncpn_cnt = multiprocessing.cpu_count()\n","cf57ff41":"DATA = pd.read_csv('..\/input\/Speed Dating Data.csv', encoding='ISO-8859-1')\nDATA.head()","30d137f5":"# print('features: ', list(DATA))\nprint('samples: ', len(DATA.iloc[:,0]))","e9d5c4a0":"# DATA.isnull().sum()","75fca843":"DATA.drop(['id', 'iid'], axis=1, inplace=True)","5eb01059":"pd.crosstab(DATA['match'], 'count')","7ccfbf83":"filter_1 = ['gender', 'match', 'int_corr', 'age_o', 'pf_o_att', 'pf_o_sin', 'pf_o_int', 'pf_o_fun', 'pf_o_amb', 'pf_o_sha', 'dec_o', 'attr_o', 'sinc_o', 'intel_o', 'fun_o', 'amb_o', 'shar_o', 'like_o', 'prob_o', 'met_o', 'age', 'imprace', 'imprelig', 'income', 'goal', 'date', 'go_out', 'career', 'career_c', 'sports', 'tvsports', 'exercise', 'dining', 'museums', 'art', 'hiking', 'gaming', 'clubbing', 'reading', 'tv', 'theater', 'movies', 'concerts', 'music', 'shopping', 'yoga', 'exphappy', 'expnum', 'attr1_1', 'sinc1_1', 'intel1_1', 'fun1_1', 'amb1_1', 'shar1_1', 'attr4_1', 'sinc4_1', 'intel4_1', 'fun4_1', 'amb4_1', 'shar4_1', 'attr2_1', 'sinc2_1', 'intel2_1', 'fun2_1', 'amb2_1', 'shar2_1', 'attr3_1', 'sinc3_1', 'fun3_1', 'intel3_1', 'amb3_1', 'attr5_1', 'sinc5_1', 'intel5_1', 'fun5_1', 'amb5_1', 'dec', 'attr', 'sinc', 'intel', 'fun', 'amb', 'shar', 'like', 'prob', 'met', 'match_es', 'attr1_s', 'sinc1_s', 'intel1_s', 'fun1_s', 'amb1_s', 'shar1_s', 'attr3_s', 'sinc3_s', 'intel3_s', 'fun3_s', 'amb3_s', 'satis_2', 'length', 'numdat_2', 'attr7_2', 'sinc7_2', 'intel7_2', 'fun7_2', 'amb7_2', 'shar7_2', 'attr1_2', 'sinc1_2', 'intel1_2', 'fun1_2', 'amb1_2', 'shar1_2', 'attr4_2', 'sinc4_2', 'intel4_2', 'fun4_2', 'amb4_2', 'shar4_2', 'attr2_2', 'sinc2_2', 'intel2_2', 'fun2_2', 'amb2_2', 'shar2_2', 'attr3_2', 'sinc3_2', 'intel3_2', 'fun3_2', 'amb3_2', 'attr5_2', 'sinc5_2', 'intel5_2', 'fun5_2', 'amb5_2', 'you_call', 'them_cal', 'date_3', 'numdat_3', 'num_in_3', 'attr1_3', 'sinc1_3', 'intel1_3', 'fun1_3', 'amb1_3', 'shar1_3', 'attr7_3', 'sinc7_3', 'intel7_3', 'fun7_3', 'amb7_3', 'shar7_3', 'attr4_3', 'sinc4_3', 'intel4_3', 'fun4_3', 'amb4_3', 'shar4_3', 'attr2_3', 'sinc2_3', 'intel2_3', 'fun2_3', 'amb2_3', 'shar2_3', 'attr3_3', 'sinc3_3', 'intel3_3', 'fun3_3', 'amb3_3', 'attr5_3', 'sinc5_3', 'intel5_3', 'fun5_3', 'amb5_3']\nDATA = DATA[filter_1]\nfor f in sorted(list(DATA)):\n    print(f)","8a7040c9":"ambs = '''amb\namb1_1\namb1_2\namb1_3\namb1_s\namb2_1\namb2_2\namb2_3\namb3_1\namb3_2\namb3_3\namb3_s\namb4_1\namb4_2\namb4_3\namb5_1\namb5_2\namb5_3\namb7_2\namb7_3\namb_o'''.split()\n\nattrs = '''attr\nattr1_1\nattr1_2\nattr1_3\nattr1_s\nattr2_1\nattr2_2\nattr2_3\nattr3_1\nattr3_2\nattr3_3\nattr3_s\nattr4_1\nattr4_2\nattr4_3\nattr5_1\nattr5_2\nattr5_3\nattr7_2\nattr7_3\nattr_o'''.split()\n\nfuns = '''fun\nfun1_1\nfun1_2\nfun1_3\nfun1_s\nfun2_1\nfun2_2\nfun2_3\nfun3_1\nfun3_2\nfun3_3\nfun3_s\nfun4_1\nfun4_2\nfun4_3\nfun5_1\nfun5_2\nfun5_3\nfun7_2\nfun7_3\nfun_o'''.split()\n\nintels = '''intel\nintel1_1\nintel1_2\nintel1_3\nintel1_s\nintel2_1\nintel2_2\nintel2_3\nintel3_1\nintel3_2\nintel3_3\nintel3_s\nintel4_1\nintel4_2\nintel4_3\nintel5_1\nintel5_2\nintel5_3\nintel7_2\nintel7_3\nintel_o'''.split()\n\nshars = '''shar\nshar1_1\nshar1_2\nshar1_3\nshar1_s\nshar2_1\nshar2_2\nshar2_3\nshar4_1\nshar4_2\nshar4_3\nshar7_2\nshar7_3\nshar_o'''.split()\n\nsincs = '''sinc\nsinc1_1\nsinc1_2\nsinc1_3\nsinc1_s\nsinc2_1\nsinc2_2\nsinc2_3\nsinc3_1\nsinc3_2\nsinc3_3\nsinc3_s\nsinc4_1\nsinc4_2\nsinc4_3\nsinc5_1\nsinc5_2\nsinc5_3\nsinc7_2\nsinc7_3\nsinc_o'''.split()","42d8f3f9":"intersted_field = [ambs, attrs, funs, intels, shars, sincs]","87c6e878":"for f in intersted_field:\n    fig, ax = plt.subplots(dpi=90)\n    corr = DATA[f].corr()\n    sns.heatmap(corr, \n            xticklabels=corr.columns.values,\n            yticklabels=corr.columns.values, ax=ax)\n    plt.show()","2c1598ae":"others = '''age\nage_o\nart\ncareer_c\nclubbing\nconcerts\ndate\ndate_3\ndec\ndec_o\ndining\nexercise\nexphappy\nexpnum\ngaming\ngender\ngo_out\ngoal\nhiking\nimprace\nimprelig\nincome\nint_corr\nlength\nlike\nlike_o\nmatch_es\nmet\nmet_o\nmovies\nmuseums\nmusic\nnum_in_3\nnumdat_2\nnumdat_3\npf_o_amb\npf_o_att\npf_o_fun\npf_o_int\npf_o_sha\npf_o_sin\nprob\nprob_o\nreading\nsatis_2\nshopping\nsports\ntheater\nthem_cal\ntv\ntvsports\nyoga\nyou_call'''.split()\n\nfilter_2 = ['match', 'amb', 'amb1_1', 'amb2_1', 'amb3_1', 'amb4_1', 'amb5_1', 'amb7_2', 'amb_o', \n'attr', 'attr1_1', 'attr2_1', 'attr3_1', 'attr4_1', 'attr5_1', 'attr7_2', 'attr_o',\n'fun', 'fun1_1', 'fun2_1', 'fun3_1', 'fun4_1', 'fun5_1', 'fun7_2', 'fun_o',\n'intel', 'intel1_1', 'intel2_1', 'intel2_3', 'intel3_1', 'intel4_1', 'intel5_1', 'intel7_2', 'intel_o',\n'sinc', 'sinc1_1', 'sinc2_1', 'sinc2_3', 'sinc3_1', 'sinc4_1', 'sinc5_1', 'sinc7_2', 'sinc_o'] + shars + others","4f31c627":"DATA = DATA[filter_2]\nDATA.isnull().sum()","2b0f8c06":"DATA = DATA.iloc[:, np.asarray(DATA.isnull().sum()<1000, dtype=np.bool)]\nDATA.isnull().sum()","4c6323eb":"# corrlations with match\ncorr = DATA.corrwith(DATA['match'])\ncorr.sort_values(ascending=False)","5c0d8c0c":"neg = np.abs(corr)<0.01\nblack_list = list(corr[neg].keys())\nblack_list","9fbbc94f":"### We don't know potential parter's decision in real world. \n\nblack_list += ['dec_o'] \nblack_list += ['career_c', 'length'] # not interested in career and length of night event","a2f1191d":"DATA.drop(black_list, axis=1, inplace=True)\nfor key, val in DATA.dtypes.items():\n    print('{:>10}: {:s}'.format(str(key), str(val)))","0481ac60":"DATA.dropna(inplace=True)\nDATA.isnull().sum()","a9fde901":"print('samples: ', len(DATA.iloc[:,0]))","d2b7cd88":"formula = 'match ~ amb*amb_o + attr*attr_o + fun*fun_o + intel*intel_o + sinc*sinc_o + C(shar1_1) + age*age_o + clubbing + date + dining + go_out + sports + int_corr + like*like_o + met*met_o + movies + museums + music + numdat_2 + prob*prob_o + reading + satis_2 + tv + yoga + gaming + goal + C(met)*C(met_o)' # \u89c0\u5bdf\u8b8a\u6578\nlm_model = ols(formula, DATA).fit()\naov_table = sm.stats.anova_lm(lm_model, typ=2)\nsignificat_fators = aov_table['PR(>F)']<0.05\naov_table['significant'] = np.where(significat_fators, '*', ' ')\ndisplay(aov_table)","749784ba":"display(aov_table[significat_fators]) # ","d8a2dbc5":"X, Y = np.array(DATA.iloc[:, 1:], dtype=np.float32), np.array(DATA.iloc[:, 0], dtype=np.int16)\nprint(X.shape)\nprint(Y.shape)","12d44a05":"random.seed(10) # \u56fa\u5b9a\u8b8a\u6578\uff0c\u8b93\u7d50\u679c\u53ef\u4ee5\u91cd\u73fe\nnp.random.seed(10)","8ae4e779":"from sklearn.metrics import accuracy_score, f1_score, recall_score, precision_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\nfrom IPython.display import display","8a487122":"parameters = {'C': [0.1, 1, 10], 'max_iter': [500, 1000], 'solver': ['lbfgs', 'liblinear']}","a828bf1f":"X, X_test, Y, Y_test = train_test_split(X, Y, test_size=0.2, shuffle=True, stratify=Y)\nprint('{:d} samples for train\/val, {:d} samples for testing.'.format(len(X), len(X_test)))\n\nlr = GridSearchCV(LogisticRegression(), param_grid=parameters, cv=10, scoring='accuracy', n_jobs=max(1, cpn_cnt-1))\nlr.fit(X, Y)\ndisplay(lr.cv_results_)","5a2bccea":"display(lr.best_params_)","fab11a6f":"print('Testing set performance: ')\npreds = lr.predict(X_test) # prediction\nacc = accuracy_score(Y_test, preds) # evaluations\nprecision = precision_score(Y_test, preds)\nrecall = recall_score(Y_test, preds)\nf1 = f1_score(Y_test, preds)\nprint('acc: {:.2f}, precision: {:.2f}, recall: {:.2f}, f1: {:.2f}'.format(acc, precision, recall, f1))","8b3437e4":"best_lr = lr.best_estimator_\nW_inspect = np.append(best_lr.coef_.flatten(), best_lr.intercept_.flatten(), axis=-1) # Check weights of perceptron to acquire knowledge of dating? ;)\nfeatures_key = np.array(list(DATA.iloc[:, 1:]) + ['w0 (+1)'])\norder = np.argsort(-W_inspect)\nweights, keys = W_inspect[order], features_key[order]\nfor w, k in zip(weights, keys):\n    print('{:>10}: {:.4f}'.format(k, w))","ac23236d":"\u6a21\u578b\u8a13\u7df4","a522fab7":"\u4e0b\u9762\u7684\u8868\u683c\u53ea\u5217\u51fa\u986f\u8457\u7684\u8b8a\u6578","0b00129f":"\u5e95\u4e0b\u5370\u51fa\u6a21\u578b\u6b0a\u91cd\n\n\u6a21\u578b\u6b0a\u91cd\u9810\u9ad8\uff0c\u4ee3\u8868\u5c0d\u61c9\u7684 feature \u6108\u80fd\u53e5\u63d0\u9ad8\u6210\u529f\u914d\u5c0d\u7684\u6a5f\u7387\n\n\u53cd\u4e4b\u6b0a\u91cd\u6108\u4f4e\u7684 feature \u6108\u964d\u4f4e\u6210\u529f\u914d\u5c0d\u7684\u6a5f\u7387","95ece2be":"ID \u548c IID \u53ea\u662f\u8cc7\u6599\u88e1\u4eba\u5011\u7684\u7de8\u865f\uff0c\u4e0d\u662f\u5f88\u91cd\u8981","12eff0eb":"\u4f86\u7d71\u8a08\u4e00\u4e0b\u6210\u529f\/\u6c92\u6709\u6210\u529f\u914d\u5c0d\u7684\u6578\u91cf","2b1a42bd":"\u505a\u4e00\u4e0b ANOVA \u89c0\u5bdf \"match\" \u53ef\u80fd\u53d7\u54ea\u4e9b\u56e0\u7d20\u5f71\u97ff\n\n\u5982\u679c\u67d0\u8b8a\u6578\u986f\u8457 (p<0.05)\uff0c\u6211\u5011\u5728\u8868\u683c\u6700\u53f3\u5074\u6a19\u4e0a '\\*' \u865f","756222cc":"\u89c0\u5bdf\u8cc7\u6599\u4e2d\u7684 feature \u540d\u7a31\uff0c\u5c0d\u7167\u6558\u8ff0\u6a94 (Speed Dating Data Key.doc) \u627e\u5230\u6211\u5011\u6709\u8208\u8da3\u7684 feature","191f21fb":"\u522a\u9664\u7f3a\u5931\u503c","605a4326":"\u7b2c\u4e00\u6b65\uff0c\u5148\u89c0\u5bdf\u4e00\u4e0b\u8cc7\u6599\uff1a","99975008":"feature \u8207\u300c\u6210\u529f\u914d\u5c0d\u300d\u7684\u76f8\u95dc\u6027 (correlation)","fd75a2cc":"\u9078\u64c7 feature","ffd5f00a":"\u6a23\u672c\u6578\uff1a 8378 \u500b\u4eba","e2c9b230":"\u6700\u5f8c\u5269\u9918\u6a23\u672c\u6578\uff1a 5567 \u4eba","bff5fd50":"\u9019\u500b notebook \u7684\u8cc7\u6599\u96c6\u4f86\u81ea Kaggle \u4e0a\u7684 Speed Dating Experiment Dataset (\u5feb\u901f\u914d\u5c0d\u5be6\u9a57\u8cc7\u6599\u96c6)\n\n\u6211\u5011\u53ef\u4ee5\u8a13\u7df4\u4e00\u500b\u7c21\u55ae\u7684\u908f\u8f2f\u56de\u6b78\u6a21\u578b\uff08\u4e00\u7a2e\u7dda\u6027\u6a21\u578b\uff09\n\n\u85c9\u7531\u89c0\u5bdf\u6a21\u578b\u4e2d\u7684\u6b0a\u91cd\uff0c\u53bb\u6316\u6398\u600e\u6a23\u7684\u300c\u6a21\u5f0f\u300d\n\n\u80fd\u5920\u66f4\uff08\u5bb9\u6613\/\u4e0d\u5bb9\u6613\uff09\u7d04\u5230\u7b2c\u4e8c\u6b21\u7d04\u6703","ed991e59":"feature \u540d\u7a31\u4e2d\uff0c\u5982\u679c\u5e36\u6709 \n\n*_o\n\n\u7684\u5f8c\u7db4\uff0c\u4ee3\u8868\u9019\u662f\u5c0d\u65b9\u5c0d\u81ea\u5df1\u7684\u8a55\u50f9\n\n\u800c dec_o \u9019\u4e00\u9805\uff0c\u4ee3\u8868\u5c0d\u65b9\u53e3\u982d\u7b54\u61c9\u4e0b\u4e00\u6b21\u7d04\u6703\n\n\u4f46\u5be6\u969b\u60c5\u6cc1\u4e0d\u592a\u53ef\u80fd\u77e5\u9053 dec_o\n\n\u6240\u4ee5\u628a dec_o \u522a\u9664\n\n\u53e6\u5916\uff0c\u6211\u5011\u5c0d\u5c0d\u65b9\u7684\u8077\u696d\u7a2e\u985e\u6c92\u8208\u8da3\uff0c\u56e0\u70ba\u6bd4\u8f03\u96e3\u91cf\u5316\n\n\u5982\u679c\u8981\u7528\u8077\u696d\u7a2e\u985e\u4f5c\u70ba feature \u3001\u8a13\u7df4\u6a21\u578b\uff0c\n\n\u8f03\u63a8\u85a6\u4f7f\u7528\u6c7a\u7b56\u6a39","b44b1f49":"\u5f9e\u4e0a\u8ff0\u8868\u683c\u53ef\u4ee5\u770b\u51fa\uff1a\n\n1. \u6709\u5171\u540c\u611b\u597d\n2. \u81ea\u5df1\u6709\u4f01\u5716\u5fc3 \/ \u5c0d\u65b9\u8a8d\u70ba\u4f60\u6709\u4f01\u5716\u5fc3\n3. \u81ea\u5df1\u89ba\u5f97\u81ea\u5df1\u6709\u5438\u5f15\u529b \/ \u5c0d\u65b9\u89ba\u5f97\u4f60\u5c0d\u4ed6\u4f86\u8aaa\u6709\u5438\u5f15\u529b\n4. \u81ea\u5df1\u89ba\u5f97\u81ea\u5df1\u662f\u6709\u8da3\u7684\u4eba \/ \u5c0d\u65b9\u89ba\u5f97\u4f60\u662f\u6709\u8da3\u7684\u4eba\n5. \u81ea\u5df1\u89ba\u5f97\u81ea\u5df1\u5f88\u771f\u8aa0 \/ \u5c0d\u65b9\u89ba\u5f97\u4f60\u5f88\u771f\u8aa0\n6. \u81ea\u5df1\u6709\u53c3\u8207\u793e\u5718\u7684\u8208\u8da3\n7. \u81ea\u5df1\u6709\u904b\u52d5\u7684\u8208\u8da3\n8. \u4f60\u559c\u6b61\u4ed6 \/ \u4ed6\u559c\u6b61\u4f60\n9. \u4f60\u89ba\u5f97\"\u6709\u6a5f\u6703\" \/ \u4ed6\u89ba\u5f97\"\u6709\u6a5f\u6703\"\n10. \u4f60\u5c0d\u9019\u6b21\u7d04\u6703\u7684\u5728\u610f\u7a0b\u5ea6\n\n\u9019\u5e7e\u500b\u56e0\u7d20\u6709\u53ef\u80fd\u8ddf\u6700\u5f8c\u914d\u5c0d(match)\u6210\u529f\/\u5931\u6557\u6709\u95dc\u4fc2\n\n\u4f46\u662f\u5176\u4e2d\u6709\u5e7e\u9805\u7531\u65bc\u8b8a\u6578\u9593\u4ea4\u4e92\u4f5c\u7528\u5c0d\u5f71\u97ff match \u662f\u986f\u8457\u7684\uff0c\u4f8b\u5982\uff1a\n\n1. \u81ea\u5df1\u89ba\u5f97\u81ea\u5df1\u6709\u5438\u5f15\u529b * \u5c0d\u65b9\u89ba\u5f97\u4f60\u5c0d\u4ed6\u4f86\u8aaa\u6709\u5438\u5f15\u529b\n2. \u4f60\u559c\u6b61\u4ed6 * \u4ed6\u559c\u6b61\u4f60\n3. \u4f60\u89ba\u5f97\"\u6709\u6232\" * \u4ed6\u89ba\u5f97\"\u6709\u6232\"\n\n\u9019\u4e9b\u8b8a\u6578\u7684\u4ea4\u4e92\u4f5c\u7528\u53ef\u80fd\u5f71\u97ff match \u7d50\u679c\u986f\u8457\uff0c\u6240\u4ee5\u9019\u4e9b\u8b8a\u6578\u4e0d\u80fd\u55ae\u7368\u62c6\u958b\u4f86\u770b\uff0c\u8981\u8003\u616e\u5230\u8b8a\u6578\u9593\u7684\u4ea4\u4e92\u4f5c\u7528\u5c0d\u6700\u5f8c match \u7684\u5f71\u97ff\u3002\n\n\u6700\u5f8c\u8981\u5f37\u8abf\uff0c\"\u986f\u8457\" \u4e26\u4e0d\u4ee3\u8868\u4e00\u5b9a\u5c0d \"match\" \u6709\u5f71\u97ff\uff0c\n\u5c31\u7b97\u6709\u5f71\u97ff\uff0c\u4e5f\u770b\u4e0d\u51fa\u662f\u597d\u662f\u58de\u3002\u63a5\u4e0b\u4f86\u6211\u5011\u8a13\u7df4\u4e00\u500b\u7c21\u55ae\u7684\u908f\u8f2f\u56de\u6b78\u6a21\u578b\uff0c\u770b\u770b\u6709\u54ea\u4e9b\u56e0\u7d20 \"\u53ef\u80fd\" \u5c0d \"match\" \u6709\u6b63\u5411\/\u8ca0\u9762\u5f71\u97ff\u3002\n","0f1c6602":"\u8dd1\u51fa\u4f86\u7684\u7d50\u679c\u975e\u5e38\u6709\u8da3\uff0c\u4e4b\u5f8c\u4e5f\u8a31\u53ef\u4ee5\u5617\u8a66\u6c7a\u7b56\u6a39\n\n\u5c31\u4e0d\u6703\u53d7\u9650\u65bc\u7dda\u6027\u6a21\u578b\u9019\u6a23\u985e\u4f3c\u52a0\u6e1b\u5206\u7684\u6027\u8cea\n\n\u4e5f\u53ef\u4ee5\u66f4\u597d\u5730\u89c0\u5bdf\u6f5b\u5728\u7684\u6a21\u5f0f","c1db9307":"\u89c0\u5bdf prefix \u91cd\u8907\u7684 feature\n\n\u4e0b\u9762\u4f7f\u7528 corrlation matrix \u4f86\u89c0\u5bdf feature \u9593\u662f\u5426\u9ad8\u5ea6\u76f8\u95dc\n\n\u82e5\u6709\u5e7e\u7a2e feature \u9ad8\u5ea6\u76f8\u95dc\uff0c\u4ee3\u8868 feature \u9593\u5f88\u985e\u4f3c\n\n\u6211\u5011\u53ea\u7559\u4e0b\u5176\u4e2d\u4e00\u7a2e\u7576 feature","390d5ae2":"\u89c0\u5bdf\u8cc7\u6599\uff0c\u6700\u9ad8\u6b0a\u91cd\u7684\u5e7e\u500b feature \u70ba\uff1a\n\n1. dec: \u81ea\u5df1\u60f3\u7d04\u4e0b\u4e00\u6b21\n2. like_o: \u5c0d\u65b9\u559c\u6b61\u81ea\u5df1\n3. attr_o: \u5c0d\u65b9\u89ba\u5f97\u81ea\u5df1\u5f88\u6709\u9b45\u529b\n4. prob_o: \u5c0d\u65b9\u89ba\u5f97 \"\u6709\u6a5f\u6703\"\n5. int_corr: \u96d9\u65b9\u8208\u8da3\u76f8\u8fd1\n6. prob: \u81ea\u5df1\u89ba\u5f97 \"\u6709\u6a5f\u6703\"\n7. fun_o: \u5c0d\u65b9\u89ba\u5f97\u81ea\u5df1\u6709\u8da3\n8. art: \u81ea\u5df1\u559c\u6b61\u85dd\u8853\u985e\u7684\u6771\u897f\n9. intel: \u81ea\u5df1\u89ba\u5f97\u81ea\u5df1\u8070\u660e\n10. hiking: \u559c\u6b61\u722c\u5c71\n11. tv: \u559c\u6b61\u770b\u96fb\u8996\n12. sinc: \u81ea\u5df1\u614b\u5ea6\u5f88\u771f\u8aa0\n13. intel_o: \u5c0d\u65b9\u89ba\u5f97\u81ea\u5df1\u8070\u660e\n\n...\n\n\u6b0a\u91cd\u6700\u4f4e\u3001\u800c\u4e14\u662f\u8ca0\u7684\u5e7e\u500b feature:\n\n1. met_o: \u5c0d\u65b9\u5728\u7d04\u6703\u524d\u8a8d\u8b58\u4f60\uff08\u9a5a\uff09\n2. amb_o: \u5c0d\u65b9\u89ba\u5f97\u4f60\u5f88\u6709\u91ce\u5fc3\n3. sinc_o: \u5c0d\u65b9\u89ba\u5f97\u4f60\u5f88\u771f\u8aa0\uff08\u9a5a\uff09\n4. attr: \u81ea\u5df1\u89ba\u5f97\u81ea\u5df1\u5f88\u6709\u9b45\u529b\uff08\u9a5a\uff09\n5. numdat_2: \u53c3\u52a0 \"\u5feb\u901f\u914d\u5c0d\" \u985e\u6d3b\u52d5\u7684\u6b21\u6578\n6. date: \u6108\u9ad8\u4ee3\u8868\u5e73\u5e38\u7d04\u6703\u983b\u7387\u9810\u4f4e\uff08\u63db\u53e5\u8a71\u8aaa\uff1a\u5e73\u5e38\u6c92\u6709\u7d04\u6703\u7684\u4eba\uff0c\u6bd4\u8f03\u96e3\u6210\u529f\u7d04\u5230\u4e0b\u4e00\u6b21\u7d04\u6703\uff09\n7. satis_2: \u4f60\u5c0d\u65bc\u9019\u6b21\u7d04\u6703\u5c0d\u8c61\u591a\u6eff\u610f\n8. shar1_1: \u6709\u5171\u540c\u611b\u597d\n9. gaming: \u559c\u6b61\u6253\u904a\u6232\n10. movies: \u559c\u6b61\u770b\u96fb\u5f71\n11. goal: \u6108\u9ad8\u4ee3\u8868\u5c0d\u9019\u6b21\u7d04\u6703\u7684\u7d50\u679c\u6108\u8a8d\u771f\u3001\u6108\u5728\u610f\n12. age: \u5e74\u9f61\n13. age_o: \u5c0d\u65b9\u5e74\u9f61\n\n...","59df5e91":"\u6aa2\u67e5\u3001\u522a\u9664\u7f3a\u5931\u503c"}}