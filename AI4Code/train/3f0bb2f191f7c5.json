{"cell_type":{"84222ecc":"code","ceb191e1":"code","669fa8b3":"code","3c827f75":"code","2b7484c2":"code","29de3c58":"code","f52fb8b8":"code","76876248":"code","1fd2f58d":"code","d9474a31":"code","1569dedf":"code","03b3f491":"code","5e84dd18":"code","5ed7bd7c":"code","41aa6ea3":"code","09ffa618":"code","a44c718f":"code","cb333520":"code","a32bd5ee":"code","9d3851c3":"code","018a1915":"code","d0928d2b":"code","ef59c7ce":"code","7f36f5bc":"code","0b3e91b9":"code","d7e263ce":"markdown"},"source":{"84222ecc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ceb191e1":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier","669fa8b3":"PATH = '\/kaggle\/input\/tabular-playground-series-jun-2021\/'\ntrain_path = os.path.join(PATH,'train.csv')\ntest_path = os.path.join(PATH,'test.csv')\nsub = os.path.join(PATH,'sample_submission.csv')","3c827f75":"train_df = pd.read_csv(train_path)\ntest_df = pd.read_csv(test_path)","2b7484c2":"train_df.head()","29de3c58":"y = train_df['target']\nX = train_df.drop(columns= ['id','target'],axis=1)\nX","f52fb8b8":"\nmapper = {'Class_1':1,'Class_2':2,'Class_3':3,'Class_4':4,'Class_5':5\n         ,'Class_6':6,'Class_7':7,'Class_8':8,'Class_9':9}\n\ny_cat = y.copy()\ny.replace(mapper,inplace=True)","76876248":"# y_test = test_df['target']\ntest_x = test_df.drop(columns= ['id'],axis=1)\ntest_x","1fd2f58d":"# from sklearn.model_selection import train_test_split\n\n# train_x, test_x, train_y, test_y = train_test_split(X, y, random_state = 9 , stratify = y,)\n# train_x.shape,train_y.shape,test_x.shape,test_y.shape","d9474a31":"train_x  = X\ntrain_y= y","1569dedf":"def model_predictions(model, train_x, train_y, test_x,name):\n    #train the model\n    \n    # we are just storing predictions not probabilities if decision tree because \n    # dt only gives boolean when we use predcit_proba\n    if name == \"dt\":\n        model.fit(train_x,train_y)   \n        \n        #storing predictions for train and test\n        pred_train=model.predict(train_x)\n        pred_test=model.predict(test_x)\n    else:\n        model.fit(train_x,train_y)      \n        #storing predictions for train and test\n        pred_train=model.predict_proba(train_x)\n        pred_test=model.predict_proba(test_x)\n    return pred_train, pred_test","03b3f491":"#Model 1 - Decision Tree\nDT=DecisionTreeClassifier(random_state= 101)\nM1_train, M1_test = model_predictions(DT, train_x, train_y, test_x,\"dt\")","5e84dd18":"#Model 4 - Random Forest\nRF=RandomForestClassifier(random_state= 101)\nM4_train, M4_test = model_predictions(RF, train_x, train_y, test_x,\"rf\")","5ed7bd7c":"#Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nscaler.fit(X=train_x)\n\ntrain_x = scaler.transform(train_x)\ntest_x = scaler.transform(test_x)","41aa6ea3":"#Model 2 - Logistic Regression\nLR=LogisticRegression(random_state= 101,solver='saga')\nM2_train, M2_test = model_predictions(LR, train_x, train_y, test_x,\"lg\")","09ffa618":"# #Model 3 - k Nearest Neighbour\n# knn=KNeighborsClassifier(n_neighbors=9)\n# M3_train, M3_test = model_predictions(knn, train_x, train_y, test_x,\"kn\")","a44c718f":"a1 = pd.DataFrame(data = M1_train)\na2 = pd.DataFrame(data = M2_train)\n# a3 = pd.DataFrame(data = M3_train)\na4 = pd.DataFrame(data = M4_train)","cb333520":"train_prediction = pd.concat([a1,a2,a4],axis=1,ignore_index=True)\ntrain_prediction","a32bd5ee":"a1 = pd.DataFrame(data = M1_test)\na2 = pd.DataFrame(data = M2_test)\n# a3 = pd.DataFrame(data = M3_test)\na4 = pd.DataFrame(data = M4_test)\ntest_prediction = pd.concat([a1,a2,a4],axis=1,ignore_index=True)\ntest_prediction","9d3851c3":"# Stacker Model\nfrom sklearn.svm import SVC\nmodel = SVC(probability=True)\nmodel.fit(train_prediction, train_y)\n\ny_pred_prob = model.predict_proba(test_prediction)\ny_pred = model.predict(test_prediction)\ny_pred\n# model.score(test_prediction,test_y)","018a1915":"from sklearn.metrics import log_loss\nlog_loss(y_pred, y_pred_prob)","d0928d2b":"test_df = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jun-2021\/test.csv')\nids = test_df['id']\ntest_df = test_df.drop(columns=['id'])\n# sc.transform(test_df)\n# test_df = pca.transform(test_df)\nprint(test_df.shape)","ef59c7ce":"col_names = ['Class_1', 'Class_2', 'Class_3', 'Class_4', 'Class_5', 'Class_6', \n             'Class_7', 'Class_8', 'Class_9']\ndf_sub = pd.DataFrame(data=y_pred_prob, columns=col_names)\ndf_sub.shape","7f36f5bc":"df_ids = pd.DataFrame(data=ids, columns=['id'])\nprint(df_ids.shape)\n\n\ndf_final = pd.concat([df_ids, df_sub], axis=1)\ndf_final.head()","0b3e91b9":"df_final.to_csv('submission.csv', index=False)","d7e263ce":"### Model training and Stacking"}}