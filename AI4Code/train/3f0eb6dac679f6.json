{"cell_type":{"573fa235":"code","f42ac455":"code","348886af":"code","6e1b9c8f":"code","0d256110":"code","33e7364a":"code","de624f94":"code","a6813701":"code","bbddc3a4":"code","a05eb149":"code","905619ab":"code","d9a8957b":"code","f9663838":"code","1f3d61ff":"code","019088c8":"code","d61b58dd":"code","7410463f":"code","fc4d94b7":"code","99e703df":"code","2124424b":"code","a9db240e":"code","5f90a44c":"code","191930ab":"code","b505bff9":"code","046fa459":"code","8e8c7f6a":"code","a3c30ae8":"code","180795fd":"code","fa0d0e53":"code","bc70569b":"code","47e30bd0":"code","15d531cc":"code","61037f4d":"code","58ee4d94":"code","ef07a634":"code","0032eb8b":"code","a197a373":"code","457b703b":"code","9941e8af":"code","ab3105cb":"code","fde8f85d":"code","f22f432f":"code","bf160d02":"code","ff3a6f8f":"code","683be883":"code","ad773f1f":"code","8d8fd02a":"code","68933e10":"code","92460378":"code","6cc1c75f":"markdown","3fef59fa":"markdown","98d31417":"markdown","32163a7c":"markdown","de75b5a1":"markdown","b4182404":"markdown","ee571ad2":"markdown","bbced367":"markdown","77a641f7":"markdown"},"source":{"573fa235":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f42ac455":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy.stats as stats\nplt.rcParams[\"figure.figsize\"] = (10,6)\nimport warnings\nwarnings.filterwarnings('ignore')","348886af":"df=pd.read_csv(\"..\/input\/bostonhoustingmlnd\/housing.csv\")\ndf.head()","6e1b9c8f":"df.shape","0d256110":"df.info()","33e7364a":"df.describe()","de624f94":"def check_dist(df, var):\n    plt.subplot(1, 2, 1)\n    sns.histplot(x=var, data=df, kde = True)\n    plt.subplot(1, 2, 2)\n    stats.probplot(df[var], dist=\"norm\", plot=plt)\n    plt.show()","a6813701":"for col in df.drop(\"MEDV\", axis =1).columns:\n    check_dist(df, col)","bbddc3a4":"from scipy.stats import skew\nfor i in df.drop(columns=\"MEDV\").columns:\n    print(i, skew(df[i]))      ","a05eb149":"sns.pairplot(df);","905619ab":"df.corr()","d9a8957b":"sns.heatmap(df.corr(), annot = True);","f9663838":"X = df.drop(columns =\"MEDV\") #df[[\"RM\", \"LSTAT\", \"PTRATIO\"]]\ny = df[\"MEDV\"]","1f3d61ff":"from sklearn.model_selection import train_test_split","019088c8":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state =42)","d61b58dd":"X_train","7410463f":"X_test","fc4d94b7":"from sklearn.linear_model import LinearRegression","99e703df":"model = LinearRegression()","2124424b":"model.fit(X_train, y_train)","a9db240e":"y_pred = model.predict(X_test)","5f90a44c":"y_pred","191930ab":"my_dict = {\"Actual\": y_test, \"Pred\": y_pred, \"Residual\":y_test-y_pred}","b505bff9":"comparing = pd.DataFrame(my_dict)\ncomparing","046fa459":"result_sample = comparing.head(25)\nresult_sample","8e8c7f6a":"result_sample.plot(kind =\"bar\", figsize=(15,9))\nplt.show()","a3c30ae8":"from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score","180795fd":"R2_score = r2_score(y_test, y_pred)\nR2_score","fa0d0e53":"mae = mean_absolute_error(y_test, y_pred)\nmae","bc70569b":"rmse = np.sqrt(mean_squared_error(y_test, y_pred))\nrmse","47e30bd0":"sales_mean = df[\"MEDV\"].mean()\nsales_mean","15d531cc":"mae \/ sales_mean","61037f4d":"rmse \/ sales_mean","58ee4d94":"def eval_metric(actual, pred):\n    mae = mean_absolute_error(actual, pred)\n    mse = mean_squared_error(actual, pred)\n    rmse = np.sqrt(mean_squared_error(actual, pred))\n    R2_score = r2_score(actual, pred)\n    print(\"Model testing performance:\")\n    print(\"--------------------------\")\n    print(f\"R2_score \\t: {R2_score}\")\n    print(f\"MAE \\t\\t: {mae}\")\n    print(f\"MSE \\t\\t: {mse}\")\n    print(f\"RMSE \\t\\t: {rmse}\")","ef07a634":"eval_metric(y_test, y_pred)","0032eb8b":"y_train_pred = model.predict(X_train)","a197a373":"eval_metric(y_train, y_train_pred)","457b703b":"residuals = y_test-y_pred","9941e8af":"plt.figure(figsize = (10,6))\nsns.scatterplot(x = y_test, y = residuals) #-residuals\nplt.axhline(y = 0, color =\"r\", linestyle = \"--\")\nplt.show()","ab3105cb":"sns.kdeplot(residuals);","fde8f85d":"stats.probplot(residuals, dist =\"norm\", plot =plt);","f22f432f":"skew(residuals)","bf160d02":"from yellowbrick.regressor import ResidualsPlot\n\n# Instantiate the linear model and visualizer\nmodel = LinearRegression()\nvisualizer = ResidualsPlot(model)\n\nvisualizer.fit(X_train, y_train)  # Fit the training data to the visualizer\nvisualizer.score(X_test, y_test)  # Evaluate the model on the test data\nvisualizer.show();        # Finalize and render the figure","ff3a6f8f":"from yellowbrick.regressor import PredictionError\n# Instantiate the linear model and visualizer\nmodel = LinearRegression()\nvisualizer = PredictionError(model)\n\nvisualizer.fit(X_train, y_train)  # Fit the training data to the visualizer\nvisualizer.score(X_test, y_test)  # Evaluate the model on the test data\nvisualizer.show();","683be883":"final_model = LinearRegression()","ad773f1f":"final_model.fit(X, y)","8d8fd02a":"final_model.coef_","68933e10":"final_model.intercept_","92460378":"coef_df = pd.DataFrame(final_model.coef_, index = X.columns, columns = ['Coefficient'])\ncoef_df","6cc1c75f":"## **Model Fitting and Compare Actual and Predicted Labels**","3fef59fa":"## **Evaluation Model**","98d31417":"## **Train -Test Split**","32163a7c":"## **Retraining Model on Full Data**","de75b5a1":"'RM', mahalledeki evler aras\u0131ndaki ortalama oda say\u0131s\u0131d\u0131r.\n'LSTAT', mahallede \"alt s\u0131n\u0131f\" (\u00e7al\u0131\u015fan yoksul) olarak kabul edilen ev sahiplerinin y\u00fczdesidir.\n'PTRATIO' mahalledeki ilk ve orta okullarda \u00f6\u011frencilerin \u00f6\u011fretmenlere oran\u0131d\u0131r.","b4182404":"'RM' is the average number of rooms among homes in the neighborhood.\n'LSTAT' is the percentage of homeowners in the neighborhood considered \"lower class\" (working poor).\n'PTRATIO' is the ratio of students to teachers in primary and secondary schools in the neighborhood.","ee571ad2":"## **Coefficients**","bbced367":"## **Erorr Metrics**","77a641f7":"## **Plotting residuals**"}}