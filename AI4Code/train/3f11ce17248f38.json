{"cell_type":{"94bcaa99":"code","ee217b10":"code","d6783d0e":"code","b6a22533":"code","c0911480":"code","d3604e7c":"code","a781d4b1":"code","b3487ced":"code","6d0f73d1":"code","babb5a10":"code","b625d602":"code","573db449":"code","9ce641d2":"code","7692dc55":"markdown","ed28d2aa":"markdown","12f93c5a":"markdown","4ef0b608":"markdown","f873016d":"markdown","ade44e6e":"markdown","7ce4ac70":"markdown","9637234d":"markdown","99254f18":"markdown","e0ad6887":"markdown","aebe6119":"markdown","8b0038c4":"markdown"},"source":{"94bcaa99":"!pip install -q git+https:\/\/github.com\/huggingface\/transformers.git","ee217b10":"from transformers import pipeline\nimport pandas as pd\nimport numpy as np\nimport json\nfrom tqdm import tqdm","d6783d0e":"data_file = '..\/input\/arxiv\/arxiv-metadata-oai-snapshot.json'\n\n\"\"\" Using `yield` to load the JSON file in a loop to prevent Python memory issues if JSON is loaded directly\"\"\"\n\ndef get_metadata():\n    with open(data_file, 'r') as f:\n        for line in f:\n            yield line","b6a22533":"category_map = {'astro-ph': 'Astrophysics',\n                'astro-ph.CO': 'Cosmology and Nongalactic Astrophysics',\n                'astro-ph.EP': 'Earth and Planetary Astrophysics',\n                'astro-ph.GA': 'Astrophysics of Galaxies',\n                'astro-ph.HE': 'High Energy Astrophysical Phenomena',\n                'astro-ph.IM': 'Instrumentation and Methods for Astrophysics',\n                'astro-ph.SR': 'Solar and Stellar Astrophysics',\n                'cond-mat.dis-nn': 'Disordered Systems and Neural Networks',\n                'cond-mat.mes-hall': 'Mesoscale and Nanoscale Physics',\n                'cond-mat.mtrl-sci': 'Materials Science',\n                'cond-mat.other': 'Other Condensed Matter',\n                'cond-mat.quant-gas': 'Quantum Gases',\n                'cond-mat.soft': 'Soft Condensed Matter',\n                'cond-mat.stat-mech': 'Statistical Mechanics',\n                'cond-mat.str-el': 'Strongly Correlated Electrons',\n                'cond-mat.supr-con': 'Superconductivity',\n                'cs.AI': 'Artificial Intelligence',\n                'cs.AR': 'Hardware Architecture',\n                'cs.CC': 'Computational Complexity',\n                'cs.CE': 'Computational Engineering, Finance, and Science',\n                'cs.CG': 'Computational Geometry',\n                'cs.CL': 'Computation and Language',\n                'cs.CR': 'Cryptography and Security',\n                'cs.CV': 'Computer Vision and Pattern Recognition',\n                'cs.CY': 'Computers and Society',\n                'cs.DB': 'Databases',\n                'cs.DC': 'Distributed, Parallel, and Cluster Computing',\n                'cs.DL': 'Digital Libraries',\n                'cs.DM': 'Discrete Mathematics',\n                'cs.DS': 'Data Structures and Algorithms',\n                'cs.ET': 'Emerging Technologies',\n                'cs.FL': 'Formal Languages and Automata Theory',\n                'cs.GL': 'General Literature',\n                'cs.GR': 'Graphics',\n                'cs.GT': 'Computer Science and Game Theory',\n                'cs.HC': 'Human-Computer Interaction',\n                'cs.IR': 'Information Retrieval',\n                'cs.IT': 'Information Theory',\n                'cs.LG': 'Machine Learning',\n                'cs.LO': 'Logic in Computer Science',\n                'cs.MA': 'Multiagent Systems',\n                'cs.MM': 'Multimedia',\n                'cs.MS': 'Mathematical Software',\n                'cs.NA': 'Numerical Analysis',\n                'cs.NE': 'Neural and Evolutionary Computing',\n                'cs.NI': 'Networking and Internet Architecture',\n                'cs.OH': 'Other Computer Science',\n                'cs.OS': 'Operating Systems',\n                'cs.PF': 'Performance',\n                'cs.PL': 'Programming Languages',\n                'cs.RO': 'Robotics',\n                'cs.SC': 'Symbolic Computation',\n                'cs.SD': 'Sound',\n                'cs.SE': 'Software Engineering',\n                'cs.SI': 'Social and Information Networks',\n                'cs.SY': 'Systems and Control',\n                'econ.EM': 'Econometrics',\n                'eess.AS': 'Audio and Speech Processing',\n                'eess.IV': 'Image and Video Processing',\n                'eess.SP': 'Signal Processing',\n                'gr-qc': 'General Relativity and Quantum Cosmology',\n                'hep-ex': 'High Energy Physics - Experiment',\n                'hep-lat': 'High Energy Physics - Lattice',\n                'hep-ph': 'High Energy Physics - Phenomenology',\n                'hep-th': 'High Energy Physics - Theory',\n                'math.AC': 'Commutative Algebra',\n                'math.AG': 'Algebraic Geometry',\n                'math.AP': 'Analysis of PDEs',\n                'math.AT': 'Algebraic Topology',\n                'math.CA': 'Classical Analysis and ODEs',\n                'math.CO': 'Combinatorics',\n                'math.CT': 'Category Theory',\n                'math.CV': 'Complex Variables',\n                'math.DG': 'Differential Geometry',\n                'math.DS': 'Dynamical Systems',\n                'math.FA': 'Functional Analysis',\n                'math.GM': 'General Mathematics',\n                'math.GN': 'General Topology',\n                'math.GR': 'Group Theory',\n                'math.GT': 'Geometric Topology',\n                'math.HO': 'History and Overview',\n                'math.IT': 'Information Theory',\n                'math.KT': 'K-Theory and Homology',\n                'math.LO': 'Logic',\n                'math.MG': 'Metric Geometry',\n                'math.MP': 'Mathematical Physics',\n                'math.NA': 'Numerical Analysis',\n                'math.NT': 'Number Theory',\n                'math.OA': 'Operator Algebras',\n                'math.OC': 'Optimization and Control',\n                'math.PR': 'Probability',\n                'math.QA': 'Quantum Algebra',\n                'math.RA': 'Rings and Algebras',\n                'math.RT': 'Representation Theory',\n                'math.SG': 'Symplectic Geometry',\n                'math.SP': 'Spectral Theory',\n                'math.ST': 'Statistics Theory',\n                'math-ph': 'Mathematical Physics',\n                'nlin.AO': 'Adaptation and Self-Organizing Systems',\n                'nlin.CD': 'Chaotic Dynamics',\n                'nlin.CG': 'Cellular Automata and Lattice Gases',\n                'nlin.PS': 'Pattern Formation and Solitons',\n                'nlin.SI': 'Exactly Solvable and Integrable Systems',\n                'nucl-ex': 'Nuclear Experiment',\n                'nucl-th': 'Nuclear Theory',\n                'physics.acc-ph': 'Accelerator Physics',\n                'physics.ao-ph': 'Atmospheric and Oceanic Physics',\n                'physics.app-ph': 'Applied Physics',\n                'physics.atm-clus': 'Atomic and Molecular Clusters',\n                'physics.atom-ph': 'Atomic Physics',\n                'physics.bio-ph': 'Biological Physics',\n                'physics.chem-ph': 'Chemical Physics',\n                'physics.class-ph': 'Classical Physics',\n                'physics.comp-ph': 'Computational Physics',\n                'physics.data-an': 'Data Analysis, Statistics and Probability',\n                'physics.ed-ph': 'Physics Education',\n                'physics.flu-dyn': 'Fluid Dynamics',\n                'physics.gen-ph': 'General Physics',\n                'physics.geo-ph': 'Geophysics',\n                'physics.hist-ph': 'History and Philosophy of Physics',\n                'physics.ins-det': 'Instrumentation and Detectors',\n                'physics.med-ph': 'Medical Physics',\n                'physics.optics': 'Optics',\n                'physics.plasm-ph': 'Plasma Physics',\n                'physics.pop-ph': 'Popular Physics',\n                'physics.soc-ph': 'Physics and Society',\n                'physics.space-ph': 'Space Physics',\n                'q-bio.BM': 'Biomolecules',\n                'q-bio.CB': 'Cell Behavior',\n                'q-bio.GN': 'Genomics',\n                'q-bio.MN': 'Molecular Networks',\n                'q-bio.NC': 'Neurons and Cognition',\n                'q-bio.OT': 'Other Quantitative Biology',\n                'q-bio.PE': 'Populations and Evolution',\n                'q-bio.QM': 'Quantitative Methods',\n                'q-bio.SC': 'Subcellular Processes',\n                'q-bio.TO': 'Tissues and Organs',\n                'q-fin.CP': 'Computational Finance',\n                'q-fin.EC': 'Economics',\n                'q-fin.GN': 'General Finance',\n                'q-fin.MF': 'Mathematical Finance',\n                'q-fin.PM': 'Portfolio Management',\n                'q-fin.PR': 'Pricing of Securities',\n                'q-fin.RM': 'Risk Management',\n                'q-fin.ST': 'Statistical Finance',\n                'q-fin.TR': 'Trading and Market Microstructure',\n                'quant-ph': 'Quantum Physics',\n                'stat.AP': 'Applications',\n                'stat.CO': 'Computation',\n                'stat.ME': 'Methodology',\n                'stat.ML': 'Machine Learning',\n                'stat.OT': 'Other Statistics',\n                'stat.TH': 'Statistics Theory'}","c0911480":"metadata = get_metadata()\nids = []\ntitles = []\nabstracts = []\ncategories = []\nfor paper in metadata:\n    metaDict = json.loads(paper)\n    try:\n        try:\n            year = int(metaDict['journal-ref'][-4:])    ### Example Format: \"Phys.Rev.D76:013009,2007\"\n        except:\n            year = int(metaDict['journal-ref'][-5:-1])    ### Example Format: \"Phys.Rev.D76:013009,(2007)\"\n        if(year == 2020):\n            ids.append(metaDict['id'])\n            titles.append(metaDict['title'])\n            abstracts.append(metaDict['abstract'])\n            categories.append(metaDict['categories'])\n    except:\n        pass","d3604e7c":"df = pd.DataFrame({'id' : ids,'title' : titles,'abstract' : abstracts, 'categories' : categories})\ndf.head()","a781d4b1":"print(f'There are {df.shape[0]} rows in the dataset')","b3487ced":"classifier = pipeline(\"zero-shot-classification\",device = 0)","6d0f73d1":"candidate_labels = list(category_map.values()) #candidate labels are basically the classes that the classifier will predict\npredictedCategories = []\ntrueCategories = []\nfor i in tqdm(range(100)):\n    text = df.iloc[i,]['abstract']\n    cat = df.iloc[i,]['categories']\n    cat = cat.split()\n    res = classifier(text, candidate_labels, multi_class=True)#setting multi-class as True\n    labels = res['labels'] \n    scores = res['scores'] #extracting the scores associated with the labels\n    res_dict = {label : score for label,score in zip(labels, scores)}\n    sorted_dict = dict(sorted(res_dict.items(), key=lambda x:x[1],reverse = True)) #sorting the dictionary of labels in descending order based on their score\n    categories  = []\n    for i, (k,v) in enumerate(sorted_dict.items()):\n        if(i > 2): #storing only the best 3 predictions\n            break\n        else:\n            categories.append(k)\n    predictedCategories.append(categories)\n    trueCats = [category_map[x] for x in cat]\n    trueCategories.append(trueCats)","babb5a10":"for y_true, y_pred in zip(trueCategories[:3], predictedCategories[:3]):\n    print(f'True Categories {y_true}')\n    print(f'Predicted Categories {y_pred}')\n    print('#'*50)","b625d602":"category_idx = {cat : i for i,cat in enumerate(category_map.values())} ","573db449":"y_trueEncoded = []\ny_predEncoded = []\nfor y_true, y_pred in zip(trueCategories, predictedCategories):\n    encTrue = [0] * len(category_map)\n    for cat in y_true:\n        idx = category_idx[cat]\n        encTrue[idx] = 1\n    y_trueEncoded.append(encTrue)\n    encPred = [0] * len(category_map)\n    for cat in y_pred:\n        idx = category_idx[cat]\n        encPred[idx] = 1\n    y_predEncoded.append(encPred)","9ce641d2":"from sklearn.metrics import hamming_loss\nprint(f'The hamming loss is {hamming_loss(y_trueEncoded,y_predEncoded):.4f}')","7692dc55":"# <center><b>Zero-Shot Classification<\/b><\/center>\n\nQuite simply put, zero-shot classification refers to the class of machine learning problems where we want our models to predict output for classes which it did not encounter during training time. \n\n![Zero Shot Learning](https:\/\/amitness.com\/images\/zero-shot-vs-transfer.png)\n\nYup. In spite of no labelled training data, we can still get an output. How cool is that!","ed28d2aa":"# <center>Manual One-Hot Encoding<\/center>","12f93c5a":"# <center>Making Predictions<\/center>\n\nFor the purpose of this notebook, I am only making predictions on the first 100 data samples","4ef0b608":"# <center>HuggingFace<\/center>\n\nIf you are interested in the field of NLP, chances are you've heard of HuggingFace Transformers. As their [GitHub page](https:\/\/github.com\/huggingface\/transformers) says, they provide **State-of-the-art Natural Language Processing for PyTorch and TensorFlow 2.0**\n\n[Recently](https:\/\/discuss.huggingface.co\/t\/new-pipeline-for-zero-shot-text-classification\/681), they included support for zero-shot-classification. I am going to use this Zero-Shot Classification Pipeline for multi-class classification on the Arxiv Dataset.","f873016d":"# <center>How does HuggingFace do Zero-Shot Classification?<\/center>\n\nQuoting from their [introductory colab notebook](https:\/\/colab.research.google.com\/drive\/1jocViLorbwWIkTXKwxCOV9HLTaDDgCaw?usp=sharing) : \n> The underlying model is trained on the task of Natural Language Inference (NLI), which takes in two sequences and determines whether they contradict each other, entail each other, or neither.\n> \n> This can be adapted to the task of zero-shot classification by treating the sequence which we want to classify as one NLI sequence (called the premise) and turning a candidate label into the other (the hypothesis). If the model predicts that the constructed premise _entails_ the hypothesis, then we can take that as a prediction that the label applies to the text.","ade44e6e":"## Hamming Loss\n\n### The Hamming loss is the fraction of labels that are incorrectly predicted.","7ce4ac70":"# <center>Preparing the pipeline in one-line of code!<\/center>","9637234d":"![image.png](attachment:image.png)","99254f18":"# <center>Evaluation<\/center>","e0ad6887":"# <center>Preparing the data<\/center>\n\nWe are only using training samples of papers which were published in the year 2020 for the purpose of this notebook\n\nSource : [Notebook](https:\/\/www.kaggle.com\/balraj98\/arxiv-abstract-classification-using-roberta)","aebe6119":"![image.png](attachment:image.png)","8b0038c4":"![image.png](attachment:image.png)"}}