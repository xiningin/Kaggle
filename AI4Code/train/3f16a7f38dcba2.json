{"cell_type":{"f5247ee2":"code","39654b00":"code","a9773445":"code","1016b083":"code","044b4b64":"code","62c7f1c5":"code","30e67993":"code","87efb984":"code","b732d637":"code","6322bf43":"code","4d0f847b":"code","94e7db06":"code","ed04d153":"code","9aadc592":"code","17686e0e":"code","7970a87c":"code","c99c958d":"code","cd015708":"code","12dec294":"code","b2b3f31e":"code","80113191":"code","3ce33c99":"code","1de44fca":"code","0e838b57":"code","71fdf39c":"code","48154bc3":"code","2183c5a6":"markdown"},"source":{"f5247ee2":"import pandas as pd\nimport numpy as np\nimport lightgbm as lgb\nimport pandas_profiling as pdp\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import KFold, train_test_split\nfrom sklearn.metrics import accuracy_score\nimport warnings\nwarnings.filterwarnings('ignore')\nimport os","39654b00":"ls ..\/input","a9773445":"# csv\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\ntrain = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\nsample_submission = pd.read_csv('..\/input\/gender_submission.csv')","1016b083":"display(train.shape)\ndisplay(test.shape)","044b4b64":"total = pd.concat([train,test],ignore_index = True,axis = 0,sort = False)\ntotal.info()","62c7f1c5":"#\u6027\u5225\u3068\u751f\u5b58\u306e\u95a2\u4fc2\nsns.barplot(x = \"Sex\",y = \"Survived\",data = total)","30e67993":"#Age\u3092Pclass\uff0cSex\uff0cParch\uff0cSibSp\u3000\u304b\u3089\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3092\u7528\u3044\u3066\u63a8\u5b9a\nfrom sklearn.ensemble import RandomForestRegressor\n\nage_df = total[['Age','Pclass','Sex','Parch','SibSp']]\n\nprint(age_df.info())\n\nage_df = pd.get_dummies(age_df)\n\nprint(age_df.info())\n\nprint(age_df.Age.notnull())\nprint(age_df.Age.isnull())\n\nknown_age = age_df[age_df.Age.notnull()].values\nunknown_age = age_df[age_df.Age.isnull()].values\n\nprint(known_age)\nprint(unknown_age)\n\nX = known_age[:,1:]\ny = known_age[:,0]\n\n\nrfr = RandomForestRegressor(random_state = 0,n_estimators = 100, n_jobs = -1)\nrfr.fit(X,y)\n\npredictedAge = rfr.predict(unknown_age[:,1:])\n\ntotal.loc[(total.Age.isnull()),'Age'] = predictedAge\n\n#\u5e74\u9f62\u5225\u751f\u5b58\u66f2\u7dda\u3068\u6b7b\u4ea1\u66f2\u7dda\n\nfacet = sns.FacetGrid(total[0:890],hue = 'Survived',aspect = 2)\nfacet.map(sns.kdeplot,'Age',shade = True)\nfacet.set(xlim =(0,total.loc[0:890,\"Age\"].max()))\nfacet.add_legend()\nplt.show()\n","87efb984":"#Name\u304b\u3089\u65b0\u305f\u306a\u7279\u5fb4\u91cf\u3092\u4f5c\u308a\u51fa\u3059\ntotal[\"Title\"]= total.Name.str.extract('([A-Za-z]+)\\.',expand = False)\ntotal.Title.unique()\n\n#\u540d\u524d\u304b\u3089\"Mr\"\u7b49\u3092\u53d6\u308a\u51fa\u3059\u95a2\u6570\u5b9a\u7fa9\n\ndef title_to_num(title):\n    if title in [\"Master\",'Jonkheer']:\n        return 1\n    elif title in [\"Miss\",'Mlle']:\n        return 2\n    elif title in [\"Mr\"]:\n        return 3\n    elif title in [\"Mrs\",'Ms','Mme']:\n        return 4\n    elif title in ['Col', 'Capt','Major','Dr','Rev']:\n        return 5\n    else:\n        return 6\n\ntotal[\"Title\"] = [title_to_num(i) for i in total[\"Title\"]]\nplt.figure(figsize=(15,5))\nsns.barplot(x = 'Title', y = 'Survived',data = total,palette = \"Set3\")\n","b732d637":"print(total.Name)","6322bf43":"#Name \u304b\u3089\u82d7\u5b57\u3092\u53d6\u308a\u51fa\u3057\u3001\u540c\u3058\u82d7\u5b57\u304c\u8907\u6570\u3044\u308b\u30b0\u30eb\u30fc\u30d7\u306b\u6ce8\u76ee\u3059\u308b\n\ntotal['Surname'] = total.Name.str.extract('([A-Za-z]+)\\,',expand = False)\n\ntotal['Surname'].value_counts().plot(figsize = (15,5))\n\ntotal[\"FamilyGroup\"] = total['Surname'].map(total['Surname'].value_counts())","4d0f847b":"#\u5bb6\u65cf\u3067\uff11\uff16\u624d\u4ee5\u4e0b\u307e\u305f\u306f\u5973\u6027\u306e\u751f\u5b58\u7387\n\nFemale_Child_Group = total.loc[(total[\"FamilyGroup\"]>=2) & ((total['Age']<=16) | (total[\"Sex\"] == 'female'))]\n\nFemale_Child_Group = Female_Child_Group.groupby(\"Surname\").mean()\n#print(Female_Child_Group.head(100))\n\nFemale_Child_Group[\"Survived\"].value_counts()","94e7db06":"#\u5bb6\u65cf\u3067\uff11\uff16\u624d\u8d85\u3048\u304b\u3064\u7537\u6027\u306e\u751f\u5b58\u7387\n\nMale_Adult_Group = total.loc[(total['FamilyGroup']>=2) & (total[\"Age\"]>=16) & (total['Sex']== 'male')]\nMale_Adult_Group = Male_Adult_Group.groupby('Surname').mean()\nMale_Adult_Group['Survived'].value_counts()\n\nMale_Adult_Group","ed04d153":"#\u30c7\u30c3\u30c9\u30ea\u30b9\u30c8\u3068\u30b5\u30d0\u30a4\u30d6\u30ea\u30b9\u30c8\u306e\u4f5c\u6210\ndead_list = set(Female_Child_Group[Female_Child_Group['Survived'] == 0].index)\nsurvived_list = set(Male_Adult_Group[Male_Adult_Group['Survived']==1].index)\n\n#\u30c7\u30c3\u30c9\u30ea\u30b9\u30c8\u3068\u30b5\u30d0\u30a4\u30d6\u30ea\u30b9\u30c8\u306e\u8868\u793a\nprint('dead_list = ',dead_list)\nprint('survived_list = ',survived_list)\n\n\n#\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3078\u53cd\u6620\u3059\u308b\ntotal.loc[(total['Surname'].apply(lambda x : x in dead_list))][['Sex','Age','Title']] = ['male',28.0,3]\ntotal.loc[(total['Surname'].apply(lambda x : x in survived_list))][['Sex','Age','Title']] = ['female',5.0,4]\n\n","9aadc592":"#Fare\u306e\u6b20\u640d\u5024\u88dc\u5b8c\n\nfare = total.loc[(total['Embarked']=='S') & (total['Pclass'] == 3), \"Fare\"].median()\ntotal['Fare'] = total['Fare'].fillna(fare)\ntotal.info()","17686e0e":"#Ticket\u304b\u3089\u610f\u5473\u306e\u3042\u308b\u7279\u5fb4\u91cf\u3092\u53d6\u308a\u51fa\u3059\nticket_count = dict(total['Ticket'].value_counts())\ntotal['TicketGroup'] = total['Ticket'].map(ticket_count)\n\nsns.barplot(x = 'TicketGroup',y = 'Survived',data = total, palette = 'Set3')","7970a87c":"#\u751f\u5b58\u7387\u3067\uff13\u3064\u306b\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\n\ntotal.loc[(total['TicketGroup']>=2) & (total['TicketGroup'] <= 4),'Ticket_label'] = 2\ntotal.loc[(total['TicketGroup']>=5) & (total['TicketGroup'] <= 8)|(total['TicketGroup']==1),'Ticket_label'] = 1\ntotal.loc[(total['TicketGroup']>=11),'Ticket_label']= 0\nsns.barplot(x = 'Ticket_label', y = 'Survived',data = total,palette = 'Set3')","c99c958d":"#Cabin\n\ntotal['Cabin'] = total['Cabin'].fillna('unknown')\ntotal['Cabin_label'] = total['Cabin'].str.get(0)\nsns.barplot(x = \"Cabin_label\", y = 'Survived',data = total,palette = 'Set3')","cd015708":"#Embarked\n\ntotal['Embarked'] = total['Embarked'].fillna('S')","12dec294":"total[\"FamilySize\"] = total[\"SibSp\"]+total[\"Parch\"]+1\n\n\ntotal.loc[(total['FamilySize']>=2) & (total['FamilySize']<=4),'Family_label'] = 2\ntotal.loc[(total['FamilySize']>=5) & (total['FamilySize']<=7)|(total['FamilySize']==1),'Family_label'] = 1\ntotal.loc[(total['FamilySize']>=8),'Family_label'] = 0\n\nsns.barplot(x = 'Family_label',y= 'Survived',data = total,palette = 'Set3')","b2b3f31e":"#\u7279\u5fb4\u91cf\u306e\u8ffd\u52a0 \n#total[\"CategoricalAge\"] = pd.cut(total[\"Age\"],8,labels = False)\n#total[\"SibSp_0_1_2over\"] = [i if i <=1 else 2 for i in total[\"SibSp\"]]\n#total[\"Parch_0_1_2_3over\"] = [i if i <=2 else 3 for i in total[\"Parch\"]]\n#total[\"IsAlone\"] = 0\n#total.loc[total[\"FamilySize\"]>=2,\"IsAlone\"] = 1\n#total[\"CategoricalFare\"] = pd.qcut(total[\"Fare\"],4,labels = False)\n\n# \u4e0d\u8981\u306a\u5217\u306e\u524a\u9664\ntotal.drop(['PassengerId', 'Name', 'Cabin', 'Ticket','SibSp','Parch','Surname',\"FamilySize\",'TicketGroup','FamilyGroup'], axis=1, inplace=True)\n\n#\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306eOneHot-encoding\n\ncateg = ['Sex', 'Embarked',\"Title\",'Cabin_label']\ntotal = pd.get_dummies(total, columns=categ)\n\ntotal.head(1000)","80113191":"'''\ntopfeature =['Fare', 'Pclass_2', 'Cabin_label_D', 'Sex_female', 'Title_3', 'Age', 'Ticket_label_1.0', 'Family_label_2.0', 'Embarked_C', 'Title_4', 'Ticket_label_2.0', 'Title_1', 'Embarked_S', 'Cabin_label_C', 'FamilyGroup', 'Sex_male', 'Pclass_1', 'Pclass_3', 'Cabin_label_u']\n\ntopfeature.append('Survived')\n\ntotal = total[topfeature]\n'''\n\ntrain = total.iloc[:len(train)]\ntest  = total.iloc[len(train):len(total)].reset_index(drop = True).drop(\"Survived\",axis = 1)\n\ndisplay(train.shape)\ndisplay(test.shape)","3ce33c99":"X_train = train.drop(['Survived'], axis=1)  # X_train\u306ftrain\u306eSurvived\u5217\u4ee5\u5916\nY_train = train['Survived'].astype(\"int8\")  # Y_train\u306ftrain\u306eSurvived\u5217","1de44fca":"'''\n# GridSearchCV\u3092import\nfrom sklearn.model_selection import GridSearchCV\n\ngbm = lgb.LGBMClassifier(objective='binary')\n\n# \u8a66\u884c\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u7f85\u5217\u3059\u308b\nparams = {\n    'max_depth': [2, 3, 4, 5,6,7,8],\n    'reg_alpha': [0,.1,.2,.3,.4,.5,.6],\n    'reg_lambda': [0,.1,.2,.3,.4,.5,.6],\n    'learning_rate': [0.01],\n    'num_iterations':[1000],\n}\n\n\n\ngrid_search = GridSearchCV(\n                           gbm,  # \u5206\u985e\u5668\u3092\u6e21\u3059\n                           param_grid=params,  # \u8a66\u884c\u3057\u3066\u307b\u3057\u3044\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6e21\u3059\n                           cv=5,  # 5\u5206\u5272\u4ea4\u5dee\u691c\u8a3c\u3067\u30b9\u30b3\u30a2\u3092\u78ba\u8a8d\n                          )\n\ngrid_search.fit(X_train, Y_train)  # \u30c7\u30fc\u30bf\u3092\u6e21\u3059\n\nprint(grid_search.best_score_)  # \u30d9\u30b9\u30c8\u30b9\u30b3\u30a2\u3092\u8868\u793a\nprint(grid_search.best_params_)  # \u30d9\u30b9\u30c8\u30b9\u30b3\u30a2\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8868\u793a\n\n\npred = (grid_search.best_estimator_.predict(test) > 0.5).astype(int)  \nsample_submission['Survived'] = pred\nsample_submission.to_csv('submission.csv', index=False)  # score\u306f0.77511\n'''","0e838b57":"# \u30b9\u30b3\u30a2\u3068\u30e2\u30c7\u30eb\u3092\u683c\u7d0d\u3059\u308b\u30ea\u30b9\u30c8\nfrom sklearn.model_selection import KFold\nkf = KFold(n_splits=5)\nimp_feature =[]\n\nscore_list = []\ntest_pred = np.zeros((len(test), 5))\n\n\nfor fold_, (train_index, valid_index) in enumerate(kf.split(X_train, Y_train)):\n    train_x = X_train.iloc[train_index]\n    valid_x = X_train.iloc[valid_index]\n    train_y = Y_train[train_index]\n    valid_y = Y_train[valid_index]\n    \n    print(f'fold{fold_ + 1} start')\n\n    gbm = lgb.LGBMClassifier(objective='binary', max_depth=8, reg_alpha=1.0,\n                             reg_lambda=1.0,num_iterations = 100000,learning_rate = 0.0001)\n    gbm.fit(train_x, train_y,\n            eval_set = [(valid_x, valid_y)],\n            early_stopping_rounds=20,\n            verbose= -1)\n    \n    oof = gbm.predict(valid_x, num_iteration=gbm.best_iteration_)\n    score_list.append(round(accuracy_score(valid_y, oof)*100,2))\n    test_pred[:, fold_] = gbm.predict(test, num_iteration=gbm.best_iteration_)\n    importance = pd.DataFrame(gbm.feature_importances_, index=X_train.columns, \n                              columns=['importance']).sort_values('importance',ascending = False)\n    imp_feature.extend(list(importance[importance.importance.rank(ascending = False) <= 13].index))\n    \n    print(f'fold{fold_ + 1} end\\n' )\nprint(score_list, '\u5e73\u5747score', np.mean(score_list))\nprint(set(imp_feature))\n\npred = (np.mean(test_pred, axis=1) > 0.5).astype(int)\nsample_submission['Survived'] = pred\nsample_submission.to_csv('gbm_submission.csv', index=False)  # score\u306f0.77511","71fdf39c":"# ----------- \u63a8\u5b9a\u30e2\u30c7\u30eb\u69cb\u7bc9 ---------------\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.model_selection import cross_validate\n\n# \u63a1\u7528\u3059\u308b\u7279\u5fb4\u91cf\u309220\u500b\u306b\u7d5e\u308a\u8fbc\u3080\nselect = SelectKBest(k = 20)\n\nclf = RandomForestClassifier(random_state = 10, \n                             warm_start = True,  # \u65e2\u306b\u30d5\u30a3\u30c3\u30c8\u3057\u305f\u30e2\u30c7\u30eb\u306b\u5b66\u7fd2\u3092\u8ffd\u52a0 \n                             n_estimators = 26,\n                             max_depth = 6, \n                             max_features = 'sqrt')\npipeline = make_pipeline(select, clf)\npipeline.fit(X_train, Y_train)\n\n# \u30d5\u30a3\u30c3\u30c8\u7d50\u679c\u306e\u8868\u793a\ncv_result = cross_validate(pipeline, X_train, Y_train, cv= 10)\nprint('mean_score = ', np.mean(cv_result['test_score']))\nprint('mean_std = ', np.std(cv_result['test_score']))","48154bc3":"mask= select.get_support()\n\n# \u9805\u76ee\u306e\u30ea\u30b9\u30c8\nlist_col = list(X_train.columns[0:])\n\n# \u9805\u76ee\u5225\u306e\u63a1\u7528\u53ef\u5426\u306e\u4e00\u89a7\u8868\nfor i, j in enumerate(list_col):\n    print('No'+str(i+1), j,'=',  mask[i])\n\n# \u30b7\u30a7\u30a4\u30d7\u306e\u78ba\u8a8d\nX_selected = select.transform(X_train)\nprint('X.shape={}, X_selected.shape={}'.format(X_train.shape, X_selected.shape))\n\n# ----- Submit data\u306e\u4f5c\u6210\u3000------- \nPassengerId=sample_submission['PassengerId']\npredictions = pipeline.predict(test)\nsubmission = pd.DataFrame({\"PassengerId\": PassengerId, \"Survived\": predictions.astype(np.int32)})\nsubmission.to_csv(\"rfr_submission.csv\", index=False)","2183c5a6":"\u30b3\u30d4\u30fc\u5143\u306eNotebook\nURL\uff1ahttps:\/\/www.kaggle.com\/currypurin\/titanic-lightgbm"}}