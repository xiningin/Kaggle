{"cell_type":{"a6b6a11d":"code","fbbad9aa":"code","bbcadb11":"code","dd470759":"code","28e08147":"code","04313f4a":"code","dabac914":"code","139b2692":"code","9b5e05fa":"code","77214ce6":"code","1c00c7bb":"code","ca0cfb76":"code","f67b8275":"code","41354be0":"code","aca4a452":"code","1635ccf6":"code","c0aed96a":"code","67b01601":"code","b6ba9b66":"markdown","8cdf7457":"markdown","86d8a1ba":"markdown","fb7b66d1":"markdown","617ddae1":"markdown","b4232aed":"markdown"},"source":{"a6b6a11d":"# importing libraries\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","fbbad9aa":"ds = pd.read_csv('\/kaggle\/input\/cartier-jewelry-catalog\/cartier_catalog.csv')\nds.head()","bbcadb11":"ds.info()","dd470759":"ds.isnull().sum()","28e08147":"# dropping unnecessary columns\nds.drop(['ref','description','image'], axis = 1, inplace=True)\nds","04313f4a":"# Converting strings columns into integar\n\nfrom sklearn.preprocessing import LabelEncoder\n\ncategorie = LabelEncoder()\ntitle = LabelEncoder()\ntags = LabelEncoder()\n\nds['categorie_n'] = categorie.fit_transform(ds['categorie'])\nds['title_n'] = title.fit_transform(ds['title'])\nds['tags_n'] = tags.fit_transform(ds['tags'])\n\nds","dabac914":"# dropping unnecessary columns\nds.drop(['categorie','title','tags'],axis=1, inplace=True)\nds","139b2692":"value_bar = ds['categorie_n'].value_counts()\nvalue_bar","9b5e05fa":"plt.figure(figsize=(5,3))\nplt.bar(x = [' Label 3','Label 0','Label 2','Label 1'], height = value_bar, color = 'orange')","77214ce6":"x = ds.drop('categorie_n', axis = 1)\ny = ds['categorie_n']","1c00c7bb":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.2)\n\nx_train.shape , x_test.shape","ca0cfb76":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\n\nx_train = scaler.fit_transform(x_train)\nx_test = scaler.transform(x_test)","f67b8275":"from sklearn.tree import DecisionTreeClassifier \nfrom xgboost import XGBClassifier","41354be0":"dt = DecisionTreeClassifier()\ndt.fit(x_train,y_train)\ndt.score(x_test,y_test)","aca4a452":"xg = XGBClassifier()\nxg.fit(x_train,y_train)\nxg.score(x_test,y_test)","1635ccf6":"from sklearn.metrics import confusion_matrix, classification_report\n\ny_pred = xg.predict(x_test)\n\ncm = confusion_matrix(y_test, y_pred)\nprint('Confusion Matrix\\n',cm)","c0aed96a":"plt.figure(figsize=(7,5))\nsns.heatmap(cm,annot=True)\nplt.xlabel('Predicted')\nplt.ylabel('truth')","67b01601":"print(classification_report(y_test, y_pred, target_names=['class 0','class 1','class 2','class 3']))","b6ba9b66":"## Visualizing the values of Target labels","8cdf7457":"# Machine Learning Classifiers","86d8a1ba":"## splitting the data into train & test","fb7b66d1":"# Standardizing data","617ddae1":"# Confusion matrix","b4232aed":"# Classification Report"}}