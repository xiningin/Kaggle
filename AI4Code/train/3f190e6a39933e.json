{"cell_type":{"9ff1f95c":"code","ceba10e1":"code","ea096703":"code","bb73dfee":"code","60621e52":"code","9b82fa6d":"code","7840bbbb":"code","7f88bd9f":"code","da0a4cab":"code","40ff2076":"code","15375a92":"code","ae42bc69":"code","bd79b764":"code","a9c904c6":"code","633df475":"code","95d274a8":"code","35494f0a":"code","d0a9fd3f":"code","8f520335":"code","98f402ed":"code","16f3be19":"code","50000e20":"code","cb073da5":"code","afd967cd":"code","d12a5955":"code","bf1fef67":"code","a77ea9ab":"code","b50979e6":"code","02c4ca70":"code","fe55210e":"code","8a60ef73":"code","18bf505a":"code","2954dfe6":"code","c3490da9":"code","cf71f0ef":"code","75f8a7e7":"code","54dfb58c":"code","ff8a1059":"code","e6935154":"code","db4c92b4":"code","ccdb501b":"code","ad148002":"code","c24d830e":"code","cf353275":"code","30db2e4e":"code","0fce0504":"code","13de32ed":"code","5dd87f9e":"code","4326b23b":"code","2645db1d":"code","e014a2d3":"markdown","1edaf996":"markdown","f5ac17d1":"markdown","c1623c13":"markdown","e8441d05":"markdown","a2ba226c":"markdown","de8c0454":"markdown","34477591":"markdown","dcc2ff5b":"markdown","26c8cb2a":"markdown","42da18e7":"markdown","f5fc2f4b":"markdown"},"source":{"9ff1f95c":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","ceba10e1":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ea096703":"dataframe = pd.read_csv('\/kaggle\/input\/car-price-prediction\/CarPrice_Assignment.csv')\ndataframe.head()","bb73dfee":"dataframe.info()","60621e52":"dataframe.nunique()","9b82fa6d":"dataframe.describe()","7840bbbb":"dataframe.describe(include='object')","7f88bd9f":"dataframe.drop('car_ID', axis=1, inplace=True)","da0a4cab":"dataframe['CarName'] = dataframe['CarName'].apply(lambda x: x.split()[0])","40ff2076":"dataframe.head()","15375a92":"dataframe['CarName'].value_counts()","ae42bc69":"correct_mapping = {\n    'toyouta' : 'toyota',\n    'Nissan' : 'nissan',\n    'maxda' : 'mazda',\n    'porcshce' : 'porsche',\n    'vokswagen' : 'volkswagen',\n    'vw':'volkswagen'\n}","bd79b764":"dataframe['CarName'] = dataframe['CarName'].apply(lambda x: correct_mapping[x] if x in correct_mapping else x)","a9c904c6":"dataframe['CarName'].value_counts()","633df475":"dataframe.drop('CarName', axis=1, inplace=True)","95d274a8":"dataframe.head()","35494f0a":"corr = abs(dataframe.corr())","d0a9fd3f":"plt.figure(figsize=(12,12))\nsns.heatmap(corr, annot=True)\nplt.show()","8f520335":"plt.figure(figsize=(10,10))\nsns.heatmap(pd.DataFrame(corr.iloc[:-1,-1]), annot=True)\nplt.show()","98f402ed":"temp = pd.DataFrame(corr.iloc[:-1,-1])\nnumeric_cols_to_consider = temp[temp['price']>0.5]\nprint(numeric_cols_to_consider)\nnumeric_cols_to_consider = numeric_cols_to_consider.index.tolist()","16f3be19":"# numeric_cols_to_consider = numeric_cols_to_consider + ['carheight', 'peakrpm']","50000e20":"df = dataframe.loc[:,dataframe.dtypes=='object']\ndf.head()","cb073da5":"cols = df.columns.tolist()\ncols.append('price')\ntemp = dataframe.loc[:,cols]\ntemp.head()","afd967cd":"fig, ax = plt.subplots(ncols=3, nrows=3, figsize=(20,20))\nfor i,col in enumerate(temp.columns.tolist()[:-1]):\n    sns.boxplot(x=col, y='price', data=temp, ax=ax[i\/\/3][i%3])\nplt.show()","d12a5955":"temp = pd.get_dummies(temp, columns=temp.columns.tolist()[:-1])","bf1fef67":"temp_corr = pd.DataFrame(abs(temp.corr())['price'])\ntemp_corr[temp_corr['price']>0.5]","a77ea9ab":"category_cols_to_consider = dataframe.loc[:,dataframe.dtypes=='object'].columns.tolist()","b50979e6":"from sklearn import linear_model\nfrom sklearn.model_selection import train_test_split","02c4ca70":"# numeric_cols_to_consider = corr.iloc[:-1,-1].index.tolist()","fe55210e":"cols = numeric_cols_to_consider + category_cols_to_consider + ['price']\ncols","8a60ef73":"df = dataframe.loc[:,cols]\ndf = pd.get_dummies(df, columns=category_cols_to_consider, dtype=int)\ndf.info()","18bf505a":"heatmap_df = pd.DataFrame(abs(df.corr()['price']))\ncriteria = 0.5\nheatmap_df[heatmap_df['price']>=criteria]","2954dfe6":"# important_cols = [x for x in df.columns.tolist() if x!='price']\nimportant_cols = [x for x in heatmap_df[heatmap_df['price']>criteria].index.tolist() if x!='price']","c3490da9":"train_independent_columns = important_cols\ntrain_dependent_column = 'price'","cf71f0ef":"X = df.loc[:,train_independent_columns]\nY = df.loc[:,train_dependent_column]","75f8a7e7":"x_train, x_test,y_train,y_test = train_test_split(X,Y,test_size=0.2, random_state=12)","54dfb58c":"regression_model = linear_model.LinearRegression()","ff8a1059":"regression_model.fit(x_train, y_train)","e6935154":"regression_model.score(x_train, y_train)","db4c92b4":"regression_model.score(x_test, y_test)","ccdb501b":"predicted_y = regression_model.predict(x_test)","ad148002":"MAPE = round((sum(abs(y_test-predicted_y)\/y_test)\/y_test.size) * 100, 2)\nprint(\"MAPE = {0}%\".format(MAPE))","c24d830e":"from xgboost import XGBRegressor","cf353275":"size = 200\nbase_score = np.random.uniform(0.5,1,size)\nlearning_rate = np.random.uniform(0.3,1,size)\nn_estimators = np.random.randint(100,500,size)","30db2e4e":"dataa = pd.DataFrame({\"base_score\":base_score, \"learning_rate\":learning_rate, \"n_estimators\":n_estimators})\ndataa.head()","0fce0504":"dataa = dataa.sample(frac=1)\ndataa.head()","13de32ed":"lowest_MAPE = 20\ncount = 0\nfor index in dataa.index:\n    base_score, learning_rate, n_estimators = dataa.loc[index,\n                                                        'base_score'], dataa.loc[index, 'learning_rate'], dataa.loc[index, 'n_estimators']\n\n    model = XGBRegressor(base_score = base_score, learning_rate=learning_rate, n_estimators=n_estimators)\n    model.fit(x_train, y_train)\n    y_pred = model.predict(x_test)\n    MAPE = round((sum(abs(y_test-y_pred)\/y_test)\/y_test.size) * 100, 2)\n    if(MAPE <= lowest_MAPE):\n        lowest_MAPE = MAPE\n        print(base_score, learning_rate, n_estimators)\n        print(\"MAPE = {0}%\\n\".format(MAPE))\n        \n        \nprint(\"Minimum MAPE is {0}%\".format(lowest_MAPE))","5dd87f9e":"model = XGBRegressor(base_score = 0.8714602023456752, learning_rate=0.8179946161849307 , n_estimators=157)\nmodel.fit(x_train, y_train)\nmodel.score(x_test, y_test)","4326b23b":"temp = dataframe.loc[:,['carlength','carwidth','price']]\ntemp['sumofdimension'] = dataframe['carlength'] + dataframe['carwidth']\ntemp.drop(columns=['carlength','carwidth'],inplace=True)\ntemp","2645db1d":"temp.corr()['sumofdimension'][0]","e014a2d3":"### XGBoost Machine Learning Model","1edaf996":"## Importing the libraries","f5ac17d1":"## Implementing Machine Learning Model","c1623c13":"## Importing the data","e8441d05":"### Rough Work","a2ba226c":"### Finding Correlation for the Integer Datatype","de8c0454":"### Finding Important Columns for the Non-integer Datatype","34477591":"## Data Preparation","dcc2ff5b":"### Trying implementing Linear Regression","26c8cb2a":"### Taking a look at the columns","42da18e7":"#### Model Learning and Testing","f5fc2f4b":"## Data Analysis"}}