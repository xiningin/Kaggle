{"cell_type":{"714f9be1":"code","d7facc6c":"code","4aef0061":"code","3ec32ac5":"code","9d802361":"code","8f81bd76":"code","3514030e":"code","ad4e0e2d":"code","3544661f":"code","bd0ec1d0":"code","885ceed4":"code","09026101":"code","a0594ea0":"code","af3cdbbd":"code","b2bbfb27":"code","db9350bd":"code","ed5b5f25":"code","625f7a30":"code","438da80c":"code","cdcd421a":"code","c4186cc5":"code","790ac9ff":"code","dfc76f36":"code","0ed4ccf3":"code","f3f4d6eb":"code","f17e0b1b":"markdown","bfa14397":"markdown","e3aae93b":"markdown","fa254037":"markdown","0e5b28d7":"markdown","4820dc5b":"markdown","5d572241":"markdown","cb701b2b":"markdown","63707034":"markdown","92b0d353":"markdown","2cbbc222":"markdown","6e58e7d9":"markdown","1f32b909":"markdown","4ca7738b":"markdown","0f09ed1f":"markdown","2b9a0196":"markdown","e253bef5":"markdown","300ee484":"markdown","4a7bb538":"markdown","157a1cae":"markdown","0dad8a5a":"markdown","da6307eb":"markdown"},"source":{"714f9be1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns #visualization\nimport matplotlib.pyplot as plt #visualization\n%matplotlib inline\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.offline as py\nimport plotly.express as px\nfrom wordcloud import WordCloud, STOPWORDS\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d7facc6c":"#Code by Rawwar https:\/\/www.kaggle.com\/rawwar\/eda-pandas-profile-based-conclusions\ndf = pd.read_csv(\"..\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv\",skiprows=1)\ndf.head(2)","4aef0061":"df4 = pd.read_csv('..\/input\/world-development-indicators\/wdi-csv-zip-57-mb-\/WDICountry.csv', delimiter=',')\ndf4.head(2)","3ec32ac5":"import pycountry\n\n# Make sure that the countries are all standardized\nstandard_countries = pycountry.countries\nstandard_countries_names = [country.name for country in standard_countries]\nunique_kaggle_countries_names = sorted(df['In which country do you currently reside?'].unique())\n\nprint ('***** Countries in Kaggle but not in Standard')\nfor country_name in unique_kaggle_countries_names:\n    if country_name not in standard_countries_names:\n        print (country_name)\n        \nunique_countries = sorted(df['In which country do you currently reside?'].unique())\nprint ('There are ', len(unique_countries) , 'counties in the survey.')\nprint (unique_countries)","9d802361":"replace_countries = {\n    'Czech Republic': 'Czechia',\n    'Hong Kong (S.A.R.)': 'Hong Kong',\n    'Iran, Islamic Republic of...': 'Iran, Islamic Republic of',\n    'Republic of Korea': 'Korea',\n    'South Korea': 'Korea',\n    'Russia': 'Russian Federation',\n    'Taiwan': 'Taiwan, Province of China',\n    'United Kingdom of Great Britain and Northern Ireland': 'United Kingdom',\n    'United States of America': 'United States',\n}\n\ndef replace_value(df, column, old_value, new_value):\n    old_before = sum(df[column]==old_value)\n    new_before = sum(df[column]==new_value)\n    df[column].replace(old_value, new_value, inplace = True)\n    old_after = sum(df[column]==old_value)\n    new_after = sum(df[column]==new_value)\n    \n    print ('Replacing ', old_value, ' with ', new_value, 'Before Counts - (old, new)', old_before, new_before, 'After Counts - (Old, new)', old_after, new_after)\n    \nfor key in replace_countries:\n    replace_value(df, 'In which country do you currently reside?', key, replace_countries[key])\n        \nunique_countries = sorted(df['In which country do you currently reside?'].unique())\nprint ('There are ', len(unique_countries) , 'counties in the survey.')\nprint (unique_countries)\n\nunique_wdi_countries_names = df4['Short Name'].values\n\nprint ('***** Countries in Kaggle but not in WDI')\nunique_kaggle_countries_names = sorted(df['In which country do you currently reside?'].unique())\nfor country_name in unique_kaggle_countries_names:\n    if country_name not in unique_wdi_countries_names:\n        print (country_name)","8f81bd76":"replace_countries = {\n    'Czech Republic': 'Czechia',\n    'Hong Kong SAR, China': 'Hong Kong',\n    'Iran': 'Iran, Islamic Republic of',\n    'Russia': 'Russian Federation',\n    'Taiwan': 'Taiwan, Province of China',\n    'Vietnam': 'Viet Nam',\n}\n\nfor key in replace_countries:\n    replace_value(df4, 'Short Name', key, replace_countries[key])","3514030e":"# Showing the map of 4 groups\ncountries_income_groups = df4[['Short Name', 'Income Group']]\ncountries_income_groups['income_group'] = 1*(countries_income_groups['Income Group'] == 'Low income').astype(np.int)\ncountries_income_groups['income_group'] += 2*(countries_income_groups['Income Group'] == 'Lower middle income').astype(np.int)\ncountries_income_groups['income_group'] += 3*(countries_income_groups['Income Group'] == 'Upper middle income').astype(np.int)\ncountries_income_groups['income_group'] += 4*(countries_income_groups['Income Group'] == 'High income').astype(np.int)\n\nfig = go.Figure(data=go.Choropleth(type = 'choropleth', locationmode = 'country names', colorscale = 'Blues',\n                                   locations = countries_income_groups['Short Name'], z = countries_income_groups['income_group'], \n                                   colorbar_title = 'Income<br>Groups', colorbar_tickmode = 'array', colorbar_tickvals = [1,2,3,4], colorbar_ticktext = ['Low', 'Lower-Middle', 'Upper-Middle', 'High']),\n               layout = dict(title = 'World Bank 4 Income Groups'))\npy.iplot(fig)","ad4e0e2d":"# A bar showing the 3 groups in the Kaggle Survey\nkaggle_countries = df['In which country do you currently reside?'].unique()\n\n# Get the countries in the current survey\nkaggle_countries_income_groups = countries_income_groups[countries_income_groups['Short Name'].isin(kaggle_countries)]\ncounts = kaggle_countries_income_groups.groupby('Income Group').count()['Short Name']\ncolors = [\"#083069\", \"#1F6EB1\", \"#6BAED6\"]# High, Upper, Lower\n\nlabels = ['High income', 'Upper middle income', 'Lower middle income']\nvalues = counts.loc[labels]\n\nlabels = ['High income', 'Upper-Middle income', 'Lower-Middle income']\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, textinfo='label+percent', marker=dict(colors=colors))],\n                layout = dict(title='Percentage of Unique Countries in the Survey and Their Income Group'))\nfig.show()","3544661f":"high_countries = kaggle_countries_income_groups[kaggle_countries_income_groups['income_group']==4]['Short Name'].values.tolist()\nupper_countries = kaggle_countries_income_groups[kaggle_countries_income_groups['income_group']==3]['Short Name'].values.tolist()\nlower_countries = kaggle_countries_income_groups[kaggle_countries_income_groups['income_group']==2]['Short Name'].values.tolist()\n\nnumber_of_participants_from_high = df[df['In which country do you currently reside?'].isin(high_countries)].shape[0]\nnumber_of_participants_from_upper = df[df['In which country do you currently reside?'].isin(upper_countries)].shape[0]\nnumber_of_participants_from_lower = df[df['In which country do you currently reside?'].isin(lower_countries)].shape[0]\n\nvalues = [number_of_participants_from_high, number_of_participants_from_upper, number_of_participants_from_lower]\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, textinfo='label+percent', marker=dict(colors=colors))],\n                layout = dict(title='Percentage of Participants According to Their Income Groups'))\nfig.show()","bd0ec1d0":"# Show the word cloud of the 3 Kaggle Groups\n\nhigh_countries = kaggle_countries_income_groups[kaggle_countries_income_groups['income_group']==4]['Short Name'].values.tolist()\nupper_countries = kaggle_countries_income_groups[kaggle_countries_income_groups['income_group']==3]['Short Name'].values.tolist()\nlower_countries = kaggle_countries_income_groups[kaggle_countries_income_groups['income_group']==2]['Short Name'].values.tolist()\n\nhigh_wcl = df[df['In which country do you currently reside?'].isin(high_countries)]['In which country do you currently reside?'].values.tolist()\nupper_wcl = df[df['In which country do you currently reside?'].isin(upper_countries)]['In which country do you currently reside?'].values.tolist()\nlower_wcl = df[df['In which country do you currently reside?'].isin(lower_countries)]['In which country do you currently reside?'].values.tolist()\n\nhigh_wcl = [x.replace(' ','_') for x in high_wcl]\nupper_wcl = [x.replace(' ','_').replace('Iran,_Islamic_Republic_of','Iran').replace('Russian_Federation','Russia') for x in upper_wcl]\nlower_wcl = [x.replace(' ','_') for x in lower_wcl]\n\nhigh_wordcloud = WordCloud(relative_scaling=.5, collocations=False, colormap='Blues').generate(\" \".join(high_wcl))\nupper_wordcloud = WordCloud(relative_scaling=.5, collocations=False, colormap='Blues').generate(\" \".join(upper_wcl))\nlower_wordcloud = WordCloud(relative_scaling=.5, collocations=False, colormap='Blues').generate(\" \".join(lower_wcl))\n\nfig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=[50, 10])\nax1.imshow(high_wordcloud)\nax1.axis('off')\nax1.set_title('High Income Countries',fontsize=40);\nax2.imshow(upper_wordcloud)\nax2.axis('off')\nax2.set_title('Upper-Middle Income Countries',fontsize=40);\nax3.imshow(lower_wordcloud)\nax3.axis('off')\nax3.set_title('Lower-Middle Income Countries',fontsize=40);","885ceed4":"# Let's group the pandas into 3 groups to make it easier to analyze the income groups\nhigh_df = df[df['In which country do you currently reside?'].isin(high_countries)]\nupper_df = df[df['In which country do you currently reside?'].isin(upper_countries)]\nlower_df = df[df['In which country do you currently reside?'].isin(lower_countries)]\nhigh_df['Income Group'] = 'High Income'\nupper_df['Income Group'] = 'Upper-Middle Income'\nlower_df['Income Group'] = 'Lower-Middle Income'\n\nall_df = pd.concat([high_df, upper_df, lower_df])","09026101":"gender_df = all_df.groupby('What is your gender? - Selected Choice').count()['Duration (in seconds)'].rename('What is your gender? - Selected Choice')\ncolors = [\"#083069\", \"#1F6EB1\", \"#6BAED6\", \"E7F1FA\"]# High, Upper, Lower\n\nlabels = ['Man', 'Woman']\nvalues = gender_df[labels]\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, textinfo='label+percent', marker=dict(colors=colors))],\n                layout = dict(title='Most Participants Identify as Man'))\nfig.show()","a0594ea0":"from plotly.subplots import make_subplots\n\nhigh_gender_groups = high_df.groupby('What is your gender? - Selected Choice').count()['Duration (in seconds)'].rename('What is your gender? - Selected Choice')\nupper_gender_groups = upper_df.groupby('What is your gender? - Selected Choice').count()['Duration (in seconds)'].rename('What is your gender? - Selected Choice')\nlower_gender_groups = lower_df.groupby('What is your gender? - Selected Choice').count()['Duration (in seconds)'].rename('What is your gender? - Selected Choice')\n\ngender_indices = ['Man', 'Woman']\nhigh_gender_groups = high_gender_groups[gender_indices] \/ sum(high_gender_groups[gender_indices])\nupper_gender_groups = upper_gender_groups[gender_indices] \/ sum(upper_gender_groups[gender_indices])\nlower_gender_groups = lower_gender_groups[gender_indices] \/ sum(lower_gender_groups[gender_indices])\n\nwoman_X = [high_gender_groups['Woman'], upper_gender_groups['Woman'], lower_gender_groups['Woman']][::-1]\nman_X = [high_gender_groups['Man'], upper_gender_groups['Man'], lower_gender_groups['Man']][::-1]\ny = ['High Income', 'Upper-Middle Income', 'Lower-Middle Income'][::-1]\n\nbars1 = go.Bar(x=woman_X, y=y, text=[str(round(100*x,2))+'%' for x in woman_X], textposition='auto', name='Woman', orientation='h', marker=dict(color=colors[1]))\nbars2 = go.Bar(x=man_X, y=y, text=[str(round(100*x,2))+'%' for x in man_X], name='Man', orientation='h', marker=dict(color=colors[0]))\nline = go.Scatter(x=[.5, .5], name=\"Equality Line\", y=[0,1], mode=\"lines\", marker=dict(color=\"red\"), line=dict(dash='dash'))\n\nfig = make_subplots(specs=[[{\"secondary_y\": True}]], print_grid=False)\nfig.add_trace(bars1, 1, 1, secondary_y=False)\nfig.add_trace(bars2, 1, 1, secondary_y=False)\nfig.add_trace(line, 1, 1, secondary_y=True)\nfig.update_layout(title='Percentage of Woman accross Income Groups', barmode='stack', xaxis=dict(tickformat=\".2%\"), yaxis2= dict(fixedrange= True, range= [0, 1], visible= False))\nfig.show()","af3cdbbd":"num_salaries = {'$0-999': 500, '1,000-1,999': 1500, '2,000-2,999': 2500, '3,000-3,999': 3500, '4,000-4,999': 4500, '5,000-7,499':6500, '7,500-9,999': 8750, \n                   '10,000-14,999':12500, '15,000-19,999':17500, '20,000-24,999': 22500, '25,000-29,999':27500, '30,000-39,999':35000, '40,000-49,999': 45000, \n                   '50,000-59,999': 55000, '60,000-69,999': 65000, '70,000-79,999': 75000, '80,000-89,999': 85000,  '90,000-99,999': 95000, \n                   '100,000-124,999': 112000, '125,000-149,999':137500, '150,000-199,999':175000, '200,000-249,999': 225000, '250,000-299,999': 275000, '300,000-500,000': 400000, '> $500,000': 500000}\n\nhigh_woman_df = high_df[high_df['What is your gender? - Selected Choice']=='Woman']\nhigh_man_df = high_df[high_df['What is your gender? - Selected Choice']=='Man']\n\nupper_woman_df = upper_df[upper_df['What is your gender? - Selected Choice']=='Woman']\nupper_man_df = upper_df[upper_df['What is your gender? - Selected Choice']=='Man']\n\nlower_woman_df = lower_df[lower_df['What is your gender? - Selected Choice']=='Woman']\nlower_man_df = lower_df[lower_df['What is your gender? - Selected Choice']=='Man']\n\nhigh_woman_df['num_salaries'] = high_woman_df['What is your current yearly compensation (approximate $USD)?'].replace(num_salaries)\nhigh_man_df['num_salaries'] = high_man_df['What is your current yearly compensation (approximate $USD)?'].replace(num_salaries)\n\nupper_woman_df['num_salaries'] = upper_woman_df['What is your current yearly compensation (approximate $USD)?'].replace(num_salaries)\nupper_man_df['num_salaries'] = upper_man_df['What is your current yearly compensation (approximate $USD)?'].replace(num_salaries)\n\nlower_woman_df['num_salaries'] = lower_woman_df['What is your current yearly compensation (approximate $USD)?'].replace(num_salaries)\nlower_man_df['num_salaries'] = lower_man_df['What is your current yearly compensation (approximate $USD)?'].replace(num_salaries)\n\nman_y = high_man_df['num_salaries'].mean(), upper_man_df['num_salaries'].mean(), lower_man_df['num_salaries'].mean()\nwoman_y = high_woman_df['num_salaries'].mean(), upper_woman_df['num_salaries'].mean(), lower_woman_df['num_salaries'].mean()\n\nhigh_y = high_man_df['num_salaries'].mean(), high_woman_df['num_salaries'].mean()\nupper_y = upper_man_df['num_salaries'].mean(), upper_woman_df['num_salaries'].mean()\nlower_y = lower_man_df['num_salaries'].mean(), lower_woman_df['num_salaries'].mean()\n\nfig = go.Figure([go.Bar(x=['High Income<br>Salary Gap (dollars): $16K', 'Upper-Middle Income<br>Salary Gap (dollars): $9K', 'Lower-Middle Income<br>Salary Gap (dollars): $10K'], y=man_y, text=['$'+str(round(x,2)) for x in man_y], textposition='auto', name='Man', marker=dict(color=colors[0])),\n                 go.Bar(x=['High Income<br>Salary Gap (dollars): $16K', 'Upper-Middle Income<br>Salary Gap (dollars): $9K', 'Lower-Middle Income<br>Salary Gap (dollars): $10K'], y=woman_y, text=['$'+str(round(x,2)) for x in woman_y], textposition='auto', name='Woman', marker=dict(color=colors[1]))\n                 ],\n               layout = dict(title = 'Salary Gap accross Income Groups', xaxis=dict(title = 'Income'), yaxis=dict(title = 'Yearly Salary (Dollars)'),))\nfig.show()","b2bbfb27":"num_salaries = {'$0-999': 500, '1,000-1,999': 1500, '2,000-2,999': 2500, '3,000-3,999': 3500, '4,000-4,999': 4500, '5,000-7,499':6500, '7,500-9,999': 8750, \n                   '10,000-14,999':12500, '15,000-19,999':17500, '20,000-24,999': 22500, '25,000-29,999':27500, '30,000-39,999':35000, '40,000-49,999': 45000, \n                   '50,000-59,999': 55000, '60,000-69,999': 65000, '70,000-79,999': 75000, '80,000-89,999': 85000,  '90,000-99,999': 95000, \n                   '100,000-124,999': 112000, '125,000-149,999':137500, '150,000-199,999':175000, '200,000-249,999': 225000, '250,000-299,999': 275000, '300,000-500,000': 400000, '> $500,000': 500000}\n\nhigh_woman_df = high_df[high_df['What is your gender? - Selected Choice']=='Woman']\nhigh_man_df = high_df[high_df['What is your gender? - Selected Choice']=='Man']\n\nupper_woman_df = upper_df[upper_df['What is your gender? - Selected Choice']=='Woman']\nupper_man_df = upper_df[upper_df['What is your gender? - Selected Choice']=='Man']\n\nlower_woman_df = lower_df[lower_df['What is your gender? - Selected Choice']=='Woman']\nlower_man_df = lower_df[lower_df['What is your gender? - Selected Choice']=='Man']\n\nhigh_woman_df['num_salaries'] = high_woman_df['What is your current yearly compensation (approximate $USD)?'].replace(num_salaries)\nhigh_man_df['num_salaries'] = high_man_df['What is your current yearly compensation (approximate $USD)?'].replace(num_salaries)\n\nupper_woman_df['num_salaries'] = upper_woman_df['What is your current yearly compensation (approximate $USD)?'].replace(num_salaries)\nupper_man_df['num_salaries'] = upper_man_df['What is your current yearly compensation (approximate $USD)?'].replace(num_salaries)\n\nlower_woman_df['num_salaries'] = lower_woman_df['What is your current yearly compensation (approximate $USD)?'].replace(num_salaries)\nlower_man_df['num_salaries'] = lower_man_df['What is your current yearly compensation (approximate $USD)?'].replace(num_salaries)\n\nman_y = high_man_df['num_salaries'].mean(), upper_man_df['num_salaries'].mean(), lower_man_df['num_salaries'].mean()\nwoman_y = high_woman_df['num_salaries'].mean(), upper_woman_df['num_salaries'].mean(), lower_woman_df['num_salaries'].mean()\n\nhigh_y = [(high_man_df['num_salaries'].mean() \/ high_woman_df['num_salaries'].mean())-1]\nupper_y = [(upper_man_df['num_salaries'].mean() \/ upper_woman_df['num_salaries'].mean())-1]\nlower_y = [(lower_man_df['num_salaries'].mean() \/ lower_woman_df['num_salaries'].mean())-1]\n\nfig = go.Figure([go.Bar(x=['High Income'], y=high_y, text=[str(round(100*x,2))+'%' for x in high_y], textposition='auto', name='High Income', marker=dict(color=colors[0])),\n                 go.Bar(x=['Upper-Middle Income'], y=upper_y, text=[str(round(100*x,2))+'%' for x in upper_y], textposition='auto', name='Upper-Middle Income', marker=dict(color=colors[1])),\n                 go.Bar(x=['Lower-Middle Income'], y=lower_y, text=[str(round(100*x,2))+'%' for x in lower_y], textposition='auto', name='Lower-Middle Income', marker=dict(color=colors[2]))\n                 ],\n               layout = dict(title = 'Salary Gap Percentage', xaxis=dict(title = 'Income Group'), yaxis=dict(tickformat=\".2%\", title = 'Percentage'),))\nfig.show()","db9350bd":"# Female Education Gap\ngender_q = 'What is your gender? - Selected Choice'\neducation_q = 'What is the highest level of formal education that you have attained or plan to attain within the next 2 years?'\neducation_indices = ['Master\u2019s degree', 'Doctoral degree']\n\nhigh_woman_total = high_df[high_df[gender_q]=='Woman']\nhigh_man_total = high_df[high_df[gender_q]=='Man']\n\nupper_woman_total = upper_df[upper_df[gender_q]=='Woman']\nupper_man_total = upper_df[upper_df[gender_q]=='Man']\n\nlower_woman_total = lower_df[lower_df[gender_q]=='Woman']\nlower_man_total = lower_df[lower_df[gender_q]=='Man']\n\nhigh_woman_percentages, high_man_percentages, upper_woman_percentages, upper_man_percentages, lower_woman_percentages, lower_man_percentages = [], [], [], [], [], []\nfor education in education_indices:\n    high_woman_percentages.append(high_woman_total[high_woman_total[education_q]==education].shape[0]\/high_woman_total.shape[0])\n    high_man_percentages.append(high_man_total[high_man_total[education_q]==education].shape[0]\/high_man_total.shape[0])\n    \n    upper_woman_percentages.append(upper_woman_total[upper_woman_total[education_q]==education].shape[0]\/upper_woman_total.shape[0])\n    upper_man_percentages.append(upper_man_total[upper_man_total[education_q]==education].shape[0]\/upper_man_total.shape[0])\n    \n    lower_woman_percentages.append(lower_woman_total[lower_woman_total[education_q]==education].shape[0]\/lower_woman_total.shape[0])\n    lower_man_percentages.append(lower_man_total[lower_man_total[education_q]==education].shape[0]\/lower_man_total.shape[0])\n\nhigh_woman_diff = np.array(high_woman_percentages) - np.array(high_man_percentages)\nupper_woman_diff = np.array(upper_woman_percentages) - np.array(upper_man_percentages)\nlower_woman_diff = np.array(lower_woman_percentages) - np.array(lower_man_percentages)\n\nfig = go.Figure([go.Bar(x=education_indices, y=high_woman_diff, marker_color=colors[0], name='High Income', text=[str(round(100*x,2))+'%' for x in high_woman_diff], textposition='auto'),\n                 go.Bar(x=education_indices, y=upper_woman_diff, marker_color=colors[1], name='Upper-Middle Income', text=[str(round(100*x,2))+'%' for x in upper_woman_diff], textposition='auto'),\n                 go.Bar(x=education_indices, y=lower_woman_diff, marker_color=colors[2], name='Lower-Middle Income', text=[str(round(100*x,2))+'%' for x in lower_woman_diff], textposition='auto'),\n                 ],\n               layout = dict(title = 'Difference Between Women and Men Percentages for Masters and Doctoral', xaxis=dict(title = 'Degree'), yaxis=dict(tickformat=\".2%\", title = 'Difference Percentage'),))\nfig.show()","ed5b5f25":"values = [['<b>STRENGTHS<\/b>', '<b>WEAKNESSES<\/b>', '<b>OPPORTNITIES<\/b>', '<b>THREATS<\/b>'], #1st col\n[\n# high_strengths\n\"<b>1. Women are more likely<br>\\\nto have an advanced<br>\\\ndegree (masters and PhDs.)<\/b>\", \n# high_weaknesses\n\"<b>1. Large Gender Gap<\/b>\", \n# high_opportunities\n\"<b>1. Women are more likely<br>\\\nto have postgraduate degree.<br>\\\nInitiatives to close the <br>\\\nsalary gap are likely<br>\\\nto lead to more<br>\\\nfemale graduates and hires.<\/b>\", \n# high_threats\n\"<b>1. Gender Bias issues are<br>\\\npossible because most people<br>\\\ndoing data science are<br>\\\nmale.<\/b>\"\n],\n[\n# Upper_strengths\n\"<b>1. Women are more likely<br>\\\nto have an advanced degree<br>\\\n(masters and PhDs.)<\/b>\", \n# Upper_weaknesses\n\"<b>1. Large Gender Gap<br><br>\\\n2. Has Largest gender gap<br>\\\nwhen measured by survey<br>\\\nparticiptation.<\/b>\", \n# Upper_opportunities\n\"<b>1. Women are more likely<br>\\\nto have postgraduate degree.<br>\\\nInitiatives to close the<br>\\\nsalary gap are likely<br>\\\nto lead to more female<br>\\\ngraduates and hires.<\/b>\", \n# Upper_threats\n\"<b>1. Gender Bias issues are<br>\\\npossible because most people<br>\\\ndoing data science are<br>\\\nmale.<\/b>\"\n],\n# Lower_strengths\n[\n\"<b>1. Women are more likely<br>\\\nto have an advanced degrees<br>\\\n(masters and PhDs.)\", \n# Lower_weaknesses\n\"<b>1. Large Gender Gap<br><br>\\\n2. Has Largest gender gap <br>\\\nwhen measured by salary<br>\\\n(Men paid 2x Women).<\/b>\", \n# Lower_opportunities\n\"<b>1. Women are more likely<br>\\\nto have postgraduate degree.<br>\\\nInitiatives to close the<br>\\\nsalary gap are likely<br>\\\nto lead to more<br>\\\nfemale graduates and hires.\", \n# lower_threats\n\"<b>1. Gender Bias issues are<br>\\\npossible because most people<br>\\\ndoing data science are<br>\\\nmale.<\/b>\"],\n]\n\nfig = go.Figure(data=[go.Table(columnorder = [1,2,3,4], columnwidth = [13,29,29,29],\n                               header = dict(values = [[''], ['<b>HIGH INCOME<\/b>'], ['<b>UPPER-MIDDLE INCOME<\/b>'], ['<b>LOWER-MIDDLE INCOME<\/b>']],\n                                             line_color='darkslategray', fill_color=colors[0], font=dict(color='white', size=12)),\n                               cells=dict(values=values, line_color='darkslategray', fill=dict(color=[['#00AF50', '#C55B11', '#0071C1', '#FE0000'], 'white']), align=['left', 'left', 'left', 'left'], font_color = ['white','black'], font_size=10)\n                              )\n                     ],\n                layout = dict(margin=go.layout.Margin(l=0, r=0, b=0, t=0), height=500)\n               )\nfig.show()","625f7a30":"high_age_groups = high_df.groupby(\"What is your age (# years)?\").count()[\"Duration (in seconds)\"]\nhigh_age_groups \/= sum(high_age_groups)\n\nupper_age_groups = upper_df.groupby(\"What is your age (# years)?\").count()[\"Duration (in seconds)\"]\nupper_age_groups \/= sum(upper_age_groups)\n\nlower_age_groups = lower_df.groupby(\"What is your age (# years)?\").count()[\"Duration (in seconds)\"]\nlower_age_groups \/= sum(lower_age_groups)\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(y=high_age_groups.values.tolist(), x=high_age_groups.index.tolist(), line_color = colors[0], name=\"High Income\", mode='lines+markers', marker=dict(size=len(high_age_groups.index.tolist())*[18]), line=dict(width=6, shape='spline', smoothing=1) ))\nfig.add_trace(go.Scatter(y=upper_age_groups.values.tolist(), x=upper_age_groups.index.tolist(), line_color=colors[1], name=\"Upper-Middle Income\", mode='lines+markers', marker=dict(size=len(upper_age_groups.index.tolist())*[18]), line=dict(width=6, shape='spline', smoothing=1)))\nfig.add_trace(go.Scatter(y=lower_age_groups.values.tolist(), x=lower_age_groups.index.tolist(), line_color=colors[2], name=\"Lower-Middle Income\", mode='lines+markers', marker=dict(size=len(lower_age_groups.index.tolist())*[18]), line=dict(width=6, shape='spline', smoothing=1)))\n\nfig.update_layout(xaxis=dict(title = 'Age Groups (years)'), yaxis=dict(tickformat=\".2%\", title = 'Percentage'), barmode='overlay', title='Distribution of Age Group for the 3 Income Groups')\nfig.show()","438da80c":"num_salaries = {'$0-999': 500, '1,000-1,999': 1500, '2,000-2,999': 2500, '3,000-3,999': 3500, '4,000-4,999': 4500, '5,000-7,499':6500, '7,500-9,999': 8750, \n                   '10,000-14,999':12500, '15,000-19,999':17500, '20,000-24,999': 22500, '25,000-29,999':27500, '30,000-39,999':35000, '40,000-49,999': 45000, \n                   '50,000-59,999': 55000, '60,000-69,999': 65000, '70,000-79,999': 75000, '80,000-89,999': 85000,  '90,000-99,999': 95000, \n                   '100,000-124,999': 112000, '125,000-149,999':137500, '150,000-199,999':175000, '200,000-249,999': 225000, '250,000-299,999': 275000, '300,000-500,000': 400000, '> $500,000': 500000}\n# Salary Q = 'What is your current yearly compensation (approximate $USD)?'\n\nhigh_df['num_salaries'] = high_df['What is your current yearly compensation (approximate $USD)?'].replace(num_salaries)\nupper_df['num_salaries'] = upper_df['What is your current yearly compensation (approximate $USD)?'].replace(num_salaries)\nlower_df['num_salaries'] = lower_df['What is your current yearly compensation (approximate $USD)?'].replace(num_salaries)\n\nhigh_age_groups = high_df.groupby(\"What is your age (# years)?\").mean()[\"num_salaries\"]\nupper_age_groups = upper_df.groupby(\"What is your age (# years)?\").mean()[\"num_salaries\"]\nlower_age_groups = lower_df.groupby(\"What is your age (# years)?\").mean()[\"num_salaries\"]\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(y=high_age_groups.values.tolist(), x=high_age_groups.index.tolist(), line_color = colors[0], name=\"High Income\", mode='lines+markers', marker=dict(size=len(high_age_groups.index.tolist())*[18]), line=dict(width=6, shape='spline', smoothing=1) ))\nfig.add_trace(go.Scatter(y=upper_age_groups.values.tolist(), x=upper_age_groups.index.tolist(), line_color=colors[1], name=\"Upper-Middle Income\", mode='lines+markers', marker=dict(size=len(upper_age_groups.index.tolist())*[18]), line=dict(width=6, shape='spline', smoothing=1)))\nfig.add_trace(go.Scatter(y=lower_age_groups.values.tolist(), x=lower_age_groups.index.tolist(), line_color=colors[2], name=\"Lower-Middle Income\", mode='lines+markers', marker=dict(size=len(lower_age_groups.index.tolist())*[18]), line=dict(width=6, shape='spline', smoothing=1)))\n\nfig.update_layout(xaxis=dict(title = 'Age Groups (years)'), yaxis=dict(title = 'Salary ($)'), barmode='overlay', title='Salaries Growth by Age Group')\nfig.show()","cdcd421a":"values = [['<b>STRENGTHS<\/b>', '<b>WEAKNESSES<\/b>', '<b>OPPORTNITIES<\/b>', '<b>THREATS<\/b>'], #1st col\n[\n# high_strengths\n\"1. Women are more likely<br>\\\nto have an advanced<br>\\\ndegree (masters and PhDs.)<br><br>\\\n<b>2. Great Salaries that grow<br>\\\nsignificantly.<\/b>\", \n# high_weaknesses\n\"1. Large Gender Gap<br><br>\\\n<b>2. Low Number of young<br>\\\nKagglers.<\/b>\", \n# high_opportunities\n\"1. Women are more likely<br>\\\nto have postgraduate degree.<br>\\\nInitiatives to close the <br>\\\nsalary gap are likely<br>\\\nto lead to more<br>\\\nfemale graduates and hires.\", \n# high_threats\n\"1. Gender Bias issues are<br>\\\npossible because most people<br>\\\ndoing data science are<br>\\\nman.<br><br>\\\n<b> 2. The percentage of younger<br>\\\nKagglers is much lower<br>\\\nthan middle income categories.<br>\\\nThis could lead to <br>\\\nexpertise shortage in the<br>\\\nfuture. <\/b>\"\n],\n[\n# Upper_strengths\n\"1. Women are more likely<br>\\\nto have an advanced degree<br>\\\n(masters and PhDs.)<br><br>\\\n<b>2. Youthful Population of<br>\\\nKagglers<\/b>\", \n# Upper_weaknesses\n\"1. Large Gender Gap<br><br>\\\n2. Has Largest gender gap<br>\\\nwhen measured by survey<br>\\\nparticiptation.<br><br>\\\n<b>3. Salaries are relatively low<br>\\\nand they don't grow<br>\\\nmuch. <\/b>\", \n# Upper_opportunities\n\"1. Women are more likely<br>\\\nto have postgraduate degree.<br>\\\nInitiatives to close the<br>\\\nsalary gap are likely<br>\\\nto lead to more<br>\\\nwomen graduates and hires.<br><br>\\\n<b>2.Decent supply of young<br>\\\nexpertise to fill future<br>\\\njobs.<\/b>\", \n# Upper_threats\n\"1. Gender Bias issues are<br>\\\npossible because most people<br>\\\ndoing data science are<br>\\\nmale.\"\n],\n# Lower_strengths\n[\n\"1. Women are more likely<br>\\\nto have an advanced degrees<br>\\\n(masters and PhDs.)<br><br>\\\n<b>2. Tend to have the<br>\\\nyoungest Kagglers.<\/b>\", \n# Lower_weaknesses\n\"1. Large Gender Gap<br><br>\\\n2. Has Largest gender gap<br>\\\nwhen measured by salary<br>\\\n(Men paid 2x Women).<br><br>\\\n<b>3. Salaries are relatively low<br>\\\nand they don't grow<br>\\\nmuch. <\/b>\", \n# Lower_opportunities\n\"1. Women are more likely<br>\\\nto have postgraduate degree.<br>\\\nInitiatives to close the<br>\\\nsalary gap are likely<br>\\\nto lead to more women<br>\\\ngraduates and hires.<br><br>\\\n<b>2.Large supply of young<br>\\\nexpertise to fill<br>\\\nfuture jobs.<\/b>\", \n# lower_threats\n\"1. Gender Bias issues are<br>\\\npossible because most people<br>\\\ndoing data science are<br>\\\nmale.\"],\n]\n\nfig = go.Figure(data=[go.Table(columnorder = [1,2,3,4], columnwidth = [10,30,30,30],\n                               header = dict(values = [[''], ['<b>HIGH INCOME<\/b>'], ['<b>UPPER-MIDDLE INCOME<\/b>'], ['<b>LOWER-MIDDLE INCOME<\/b>']],\n                                             line_color='darkslategray', fill_color=colors[0], font=dict(color='white', size=12)),\n                               cells=dict(values=values, line_color='darkslategray', fill=dict(color=[['#00AF50', '#C55B11', '#0071C1', '#FE0000'], 'white']), align=['left', 'left', 'left', 'left'], font_color = ['white','black'], font_size=10)\n                              )\n                     ],\n                layout = dict(margin=go.layout.Margin(l=0, r=0, b=0, t=0), height=700)# You can update the height like this.\n               )\nfig.show()","c4186cc5":"# Formal Education\ntitle_q = 'Select the title most similar to your current role (or most recent title if retired): - Selected Choice'\n\nhigh_education_groups = high_df[high_df[title_q] == 'Data Scientist'].groupby('What is the highest level of formal education that you have attained or plan to attain within the next 2 years?').count()['Duration (in seconds)'].rename('What is the highest level of formal education that you have attained or plan to attain within the next 2 years?')\nupper_education_groups = upper_df[upper_df[title_q] == 'Data Scientist'].groupby('What is the highest level of formal education that you have attained or plan to attain within the next 2 years?').count()['Duration (in seconds)'].rename('What is the highest level of formal education that you have attained or plan to attain within the next 2 years?')\nlower_education_groups = lower_df[lower_df[title_q] == 'Data Scientist'].groupby('What is the highest level of formal education that you have attained or plan to attain within the next 2 years?').count()['Duration (in seconds)'].rename('What is the highest level of formal education that you have attained or plan to attain within the next 2 years?')\n\nhigh_education_groups = high_education_groups\/sum(high_education_groups)\nupper_education_groups = upper_education_groups\/sum(upper_education_groups)\nlower_education_groups = lower_education_groups\/sum(lower_education_groups)\n\neducation_indices = ['No formal education past high school', 'Professional degree', 'Some college\/university study without earning a bachelor\u2019s degree', 'Bachelor\u2019s degree', 'Master\u2019s degree', 'Doctoral degree', 'I prefer not to answer']\nhigh_education_counts = high_education_groups[education_indices].values.tolist()\nupper_education_counts = upper_education_groups[education_indices].values.tolist()\nlower_education_counts = lower_education_groups[education_indices].values.tolist()\n\neducation_indices[0] = 'High School'\neducation_indices[2] = 'Attended University but No Bachelor'\neducation_indices[3] = 'Bachelor'\neducation_indices[4] = 'Masters'\neducation_indices[5] = 'Doctoral'\neducation_indices[6] = 'No Answer'\n\nfig = go.Figure([go.Bar(x=education_indices, y=high_education_counts, marker_color=colors[0], name='High Income', text=[str(round(100*x,2))+'%' for x in high_education_counts], textposition='auto'),\n                 go.Bar(x=education_indices, y=upper_education_counts, marker_color=colors[1], name='Upper-Middle Income', text=[str(round(100*x,2))+'%' for x in upper_education_counts], textposition='auto'),\n                 go.Bar(x=education_indices, y=lower_education_counts, marker_color=colors[2], name='Lower-Middle Income', text=[str(round(100*x,2))+'%' for x in lower_education_counts], textposition='auto'),\n                ],\n               layout = dict(title = 'Distribution of the Formal Education', xaxis=dict(title = 'Formal Education'), yaxis=dict(tickformat=\".2%\", title = 'Percentage'),))\nfig.show()","790ac9ff":"# Salaries & Degrees\n\ntitle_q = 'Select the title most similar to your current role (or most recent title if retired): - Selected Choice'\n\nhigh_education_groups = high_df[high_df[title_q] == 'Data Scientist'].groupby('What is the highest level of formal education that you have attained or plan to attain within the next 2 years?').mean()['num_salaries']\nupper_education_groups = upper_df[upper_df[title_q] == 'Data Scientist'].groupby('What is the highest level of formal education that you have attained or plan to attain within the next 2 years?').mean()['num_salaries']\nlower_education_groups = lower_df[lower_df[title_q] == 'Data Scientist'].groupby('What is the highest level of formal education that you have attained or plan to attain within the next 2 years?').mean()['num_salaries']\n\neducation_indices = ['Bachelor\u2019s degree', 'Master\u2019s degree', 'Doctoral degree']\nhigh_education_counts = high_education_groups[education_indices].values.tolist()\nupper_education_counts = upper_education_groups[education_indices].values.tolist()\nlower_education_counts = lower_education_groups[education_indices].values.tolist()\n\neducation_indices[0] = 'Bachelor'\neducation_indices[1] = 'Masters'\neducation_indices[2] = 'Doctoral'\n\nfig = go.Figure([go.Bar(x=education_indices, y=high_education_counts, marker_color=colors[0], name='High Income', text=['$'+str(round(x,2)) for x in high_education_counts], textposition='auto'),\n                 go.Bar(x=education_indices, y=upper_education_counts, marker_color=colors[1], name='Upper-Middle Income', text=['$'+str(round(x,2)) for x in upper_education_counts], textposition='auto'),\n                 go.Bar(x=education_indices, y=lower_education_counts, marker_color=colors[2], name='Lower-Middle Income', text=['$'+str(round(x,2)) for x in lower_education_counts], textposition='auto'),\n                ],\n               layout = dict(title = 'Salaries of Data Scientists based on Education', xaxis=dict(title = 'Formal Education'), yaxis=dict(title = 'Yearly Salary'),))\nfig.show()","dfc76f36":"values = [['<b>STRENGTHS<\/b>', '<b>WEAKNESSES<\/b>', '<b>OPPORTNITIES<\/b>', '<b>THREATS<\/b>'], #1st col\n[\n# high_strengths\n\"1. Women are more likely to<br>\\\nhave an advanced degree<br>\\\n(masters and PhDs.)<br><br>\\\n2. Great Salaries that grow<br>\\\nsignificantly.<br><br>\\\n<b>3. A strong set of qualifications.<br>\\\n80% data scientists have either<br>\\\nmasters or PhD.<\/b>\", \n# high_weaknesses\n\"1. Large Gender Gap<br><br>\\\n2. Low Number of young Kagglers.\", \n# high_opportunities\n\"1. Women are more likely<br>\\\nto have postgraduate degree.<br>\\\nInitiatives to close the salary<br>\\\ngap are likely to<br>\\\nlead to more female<br>\\\ngraduates and hires.<br><br>\\\n<b>2. Earning a PhD can<br>\\\nlead to 6 figures<br>\\\nsalary<\/b>\", \n# high_threats\n\"1. Gender Bias issues are<br>\\\npossible because most people<br>\\\ndoing data science are men.<br><br>\\\n2. The percentage of younger<br>\\\nKagglers is much lower<br>\\\nthan middle income <br>\\\ncategories. This could lead<br>\\\nto expertise shortage in the<br>\\\nfuture.<br><br>\"\n],\n[\n# Upper_strengths\n\"1. Women are more likely<br>\\\nto have an advanced<br>\\\ndegree (masters <br>\\\nand PhDs.)<br><br>\\\n2. Youthful Population of Kagglers<br><br>\\\n<b>3. Two thirds of data<br>\\\nscientists have a<br>\\\nmasters or PhD.<\/b>\", \n# Upper_weaknesses\n\"1. Large Gender Gap<br><br>\\\n2. Has Largest gender gap<br>\\\nwhen measured by survey<br>\\\nparticiptation.<br><br>\\\n2. Salaries are relatively<br>\\\nlow and they don't<br>\\\ngrow much. \", \n# Upper_opportunities\n\"1. Women are more likely<br>\\\nto have postgraduate degree.<br>\\\nInitiatives to close the<br>\\\nsalary gap are likely<br>\\\nto lead to more<br>\\\nfemale graduates and hires.<br><br>\\\n2.Decent supply of young<br>\\\nexpertise to fill future<br>\\\njobs.<br><br>\\\n<b>3. You can signifcantly increase<br>\\\nyour salary by having<br>\\\na masters or PhD. <\/b>\", \n# Upper_threats\n\"1. Gender Bias issues are<br>\\\npossible because most people<br>\\\ndoing data science are men.\"\n],\n# Lower_strengths\n[\n\"1. Women are more likely<br>\\\nto have an advanced<br>\\\ndegrees (masters and PhDs.)<br><br>\\\n2. Tend to have the<br>\\\nyoungest Kagglers.\", \n# Lower_weaknesses\n\"1. Large Gender Gap<br><br>\\\n2. Has Largest gender gap<br>\\\nwhen measured by salary<br>\\\n(Men paid 2x Women).<br><br>\\\n2. Salaries are relatively low<br>\\\nand they don't grow<br>\\\nmuch.<br><br>\\\n<b>3. Having a doctoral degree<br>\\\ndoesn't lead to higher<br>\\\nsalary.<\/b>\", \n# Lower_opportunities\n\"1. Women are more likely<br>\\\nto have postgraduate degree.<br>\\\nInitiatives to close the<br>\\\nsalary gap are likely<br>\\\nto lead to more<br>\\\nfemale graduates and hires.<br><br>\\\n3.Large supply of young<br>\\\nexpertise to fill future<br>\\\njobs.<br><br>\\\n<b>4. Earning a masters degree<br>\\\ncan increase your salary.<\/b>\", \n# lower_threats\n\"1. Gender Bias issues are<br>\\\npossible because most people<br>\\\ndoing data science are<br>\\\nmen.<br><br>\\\n<b>2. Low Salaries for data<br>\\\nscientists with doctoral degrees<br>\\\ncan discourage them from<br>\\\nworking as data scientists. <\/b>\"],\n]\n\nfig = go.Figure(data=[go.Table(columnorder = [1,2,3,4], columnwidth = [10,30,30,30],\n                               header = dict(values = [[''], ['<b>HIGH INCOME<\/b>'], ['<b>UPPER-MIDDLE INCOME<\/b>'], ['<b>LOWER-MIDDLE INCOME<\/b>']],\n                                             line_color='darkslategray', fill_color=colors[0], font=dict(color='white', size=12)),\n                               cells=dict(values=values, line_color='darkslategray', fill=dict(color=[['#00AF50', '#C55B11', '#0071C1', '#FE0000'], 'white']), align=['left', 'left', 'left', 'left'], font_color = ['white','black'], font_size=10)\n                              )\n                     ],\n                layout = dict(margin=go.layout.Margin(l=0, r=0, b=0, t=0), height=900)# You can update the height like this.\n               )\nfig.show()","0ed4ccf3":"# Title & Salary\n\n\nhigh_title_groups = high_df.groupby('Select the title most similar to your current role (or most recent title if retired): - Selected Choice').mean()['num_salaries']\nupper_title_groups = upper_df.groupby('Select the title most similar to your current role (or most recent title if retired): - Selected Choice').mean()['num_salaries']\nlower_title_groups = lower_df.groupby('Select the title most similar to your current role (or most recent title if retired): - Selected Choice').mean()['num_salaries']\n\n#title_indices = high_title_groups.index.tolist()\ntitle_indices = ['Data Scientist', 'Software Engineer', 'Research Scientist', 'Data Analyst', 'Business Analyst', 'Data Engineer', 'Product\/Project Manager', 'Statistician', 'DBA\/Database Engineer']\n\nhigh_title_counts = high_title_groups[title_indices]\nupper_title_counts = upper_title_groups[title_indices]\nlower_title_counts = lower_title_groups[title_indices]\n\nfig = go.Figure([go.Bar(x=title_indices, y=high_title_counts, marker_color=colors[0], name='High Income', text=['$'+str(round(x,2)) for x in high_title_counts], textposition='auto'),\n                 go.Bar(x=title_indices, y=upper_title_counts, marker_color=colors[1], name='Upper-Middle Income', text=['$'+str(round(x,2)) for x in upper_title_counts], textposition='auto'),\n                 go.Bar(x=title_indices, y=lower_title_counts, marker_color=colors[2], name='Lower-Middle Income', text=['$'+str(round(x,2)) for x in lower_title_counts], textposition='auto'),\n                ],\n               layout = dict(title = 'Average Salaries by Job Title', xaxis=dict(title = 'Job Title'), yaxis=dict(title = 'Salary ($)'),))\nfig.show()","f3f4d6eb":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#eb3434','#eb3446','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('That is all Kagglers! Mar\u00edlia Prata, @mpwolke Was here' )","f17e0b1b":"Fig. Above 37.6 per cent of the participants come from high income country. 17.9% come from upper-middle income country. 44.5% come from lower-middle income country.\n\nSurvey 2019 numbers: 47% High income, 17.4% upper-middle and 35.4% lower-middle. ","bfa14397":"By Mukharbek Organokov\n![](https:\/\/www.googleapis.com\/download\/storage\/v1\/b\/kaggle-user-content\/o\/inbox%2F1788308%2F670a541e1154ce16c38b83583354c598%2F3gzz73.jpg?generation=1574279614673509&alt=media)https:\/\/www.kaggle.com\/c\/3d-object-detection-for-autonomous-vehicles\/discussion\/118001","e3aae93b":"#Credits to:\n\n#AbdulWanab Kabani \n\nhttps:\/\/www.kaggle.com\/abdulwahabkabani\/a-swot-analysis-of-the-world-of-data-science\n\n#Paul Mooney\n\nhttps:\/\/www.kaggle.com\/paultimothymooney\/responses-from-job-title-data-scientist-only\n\n#Olga Belitskaya \n\nhttps:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\n\n\n#Rawwar\n\nhttps:\/\/www.kaggle.com\/rawwar\/eda-pandas-profile-based-conclusions\n\n\n#Mukharbek Organokov\n\n\n#And All Kagglers that share their works. That's the only way I can go forward.","fa254037":"The chart is so different in last year. Is someone avoiding to say the real salary? \n\nIn 2020, as a kaggler ages, the salary grows signicantly in Lower-middle countries?\n\nWords explaining last year Survey(2019):\n\n\"The average yearly compensation. As a kaggler ages, the salary grows signicantly in high income countries from 35K to 120K. In middle income countries, the salary grows at a slower rate than high income countries.\"","0e5b28d7":"#Above: SWOT matrix with education discussion (in bold)","4820dc5b":"#Salaries and Degrees","5d572241":"#Education","cb701b2b":"The percentage of participants who identify themselves as female in the survey. In this survey, Man make up 80.2% of the participants while only around 19.8% identify themselves as Woman. \n\nIn 2019 the respective numbers are 82% and 16%.  ","63707034":"#The gap in terms of average salary across the different income groups.\n\nIn lower-middle income countries, the average salary gap is $ 10 K.\n\nIn high income countries, the average salaray gap is $16K.\n\nThe gap is $9K for upper-middle income countries.","92b0d353":"#Our Numbers are rising Girls! \n\nFig. shows how the percentage of female participants is low across all 3 income groups. Female in lower-middle income economies have the smallest gap. The percentage of Woman participants in lower-middle income countries(21.83%) is slightly better than the percentage of Woman participants in high income countries (18.11%). The gap is the largest in upper-middle income countries and the Woman participation is only (18.36%).\n\nLast year (2019) numbers respectively: 17.8% (Woman lower-middle income countries), 16.93% (Woman high-income countries), 15.15% (Woman upper-middle income countries).  ","2cbbc222":"#Jobs","6e58e7d9":"This chart is based on the number of unique countries in the survey and does not take into consideration the number of participants from each country. The majority of the countries in the survey are high income countries. The second largest group is the upper-middle income countries followed by the lower-middle income countries. There are no low income countries in the survey.","1f32b909":"#Pandemic's times effects in Masters\/Doctoral Degrees?\n\nWomen are more likely to hold a masters degree or a doctoral degree in all three income groups. In lower-middle income countries where the salary gap is almost double, Women hold a doctoral degree by 2.74%.\n\nLast year women in Lower-middle income countries hold a doctoral degree by 6%.\n\nI'm not sure if I made something wrong, because last year there was No Upside Down Negative Bar.","4ca7738b":"In high income countries, data scientists earn on average more than 100K a year. In upper-middle income countries, data scientists who have a masters or doctoral degrees earn higher salaries than those a bachelor degree. In lower-middle income countries, data scientists who have a doctoral degree reported having lower average yearly salary than those who have a bachelor degree.","0f09ed1f":"#What a Gap!\n\nThe largest gap is in lower-middle income countries because the gap is 141.83% (Men earn twice as much as Women). On the other hand, the salary percentage gap is 22.53% and 73.22% for high and upper-middle income groups, respectively.\n\nLast year numbers respectively: 90%, 23% and 49% ","2b9a0196":"The figure above only shows the formal education of people who work as a Data Scientist. In high and upper-middle income economies, more than half of the data scientists have a masters degree.","e253bef5":"#Above the SWOT matrix for all three income groups based on our gender discussion.","300ee484":"#Gender","4a7bb538":"#Younger Kagglers?\n\nThe distribution of age for all 3 income groups. The large percentage of kagglers in lower-middle income countries are younger than 21 years old. In high income countries, most kagglers are older than 30 years old.\n\nLast year (2019), (18-21 years) kagglers in lower-middle income countries 26.7%.\nin upper-middle 9.88%, in high income 4.41%","157a1cae":"#Codes by AbdulWanab Kabani https:\/\/www.kaggle.com\/abdulwahabkabani\/a-swot-analysis-of-the-world-of-data-science","0dad8a5a":"#Age","da6307eb":"The updated SWOT matrix with age discussion (in bold)\n\nThis is it for the age analysis. In the next section, performing SWOT analysis on the education data"}}