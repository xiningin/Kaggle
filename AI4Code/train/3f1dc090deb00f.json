{"cell_type":{"c77663f7":"code","9d5dd108":"code","798964cd":"code","8a9e6930":"code","d77c5f7f":"code","a7c6a03e":"code","b356522e":"code","e6ebe3f8":"code","ea6d8d4d":"code","22f63894":"code","e339aada":"code","b983e871":"code","9f3ca236":"code","d7bff25e":"code","1d1fc4e0":"markdown","0de8c3cc":"markdown","86cecc8e":"markdown","d31e8952":"markdown","fd1588e0":"markdown","1bfb0276":"markdown","54d9b924":"markdown","1a0bdcc6":"markdown","f93a5071":"markdown","4c7e0d25":"markdown","c6468036":"markdown"},"source":{"c77663f7":"# basis\nimport numpy as np \nimport pandas as pd \nimport warnings\nwarnings.filterwarnings('ignore')\n\n# display\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# data split \nfrom sklearn.model_selection import train_test_split\n\n# engine\nimport keras\nfrom keras.models import Sequential \nfrom keras.layers import Flatten,Dense","9d5dd108":"SEED = 2021\n\nTRAIN_PATH =\"..\/input\/fashionmnist\/fashion-mnist_train.csv\"\nTEST_PATH = \"..\/input\/fashionmnist\/fashion-mnist_test.csv\"\n\nTARGET = \"label\"\nSCALE_SIZE = 255\n\nTEST_SIZE = 0.25\n\nclass_labels= ['T-shirt\/top','Trouser','Pullover','Dress','Coat',\n               'Sandal','Shirt','Sneakers','Bag','Ankle boot']","798964cd":"train=pd.read_csv(TRAIN_PATH)\ntest=pd.read_csv(TEST_PATH)","8a9e6930":"sns.countplot(data=train,y=TARGET)","d77c5f7f":"# split data #1 (input data and target data )\n# train.csv => train target + train input \ny=train[TARGET] # target \nX= train.drop([TARGET],axis=1) # input\n# test.csv => test target + test input \ny_test = test[TARGET] # this target is correct answer\nX_test = test.drop([TARGET],axis=1) #input \n\n# split data #2 (train set and validation set)\nX_train,X_val,y_train,y_val = train_test_split(X,y,test_size=TEST_SIZE,random_state=SEED)","a7c6a03e":"INPUT_SHAPE = (28,28)\nTARGET_COUNT = 10\nDENSE_COUNT_ARRAY = [50,20,30]\n\nMID_ACTIVATION = \"relu\"\nLAST_ACTIVATION = \"softmax\"\n\nMODEL_OPTIMIZER = \"adam\"\nMODEL_LOSS = \"sparse_categorical_crossentropy\"\nMODEL_METRICS = ['accuracy']\n\nBATCH_SIZE = 100\nEPOCHS = 30","b356522e":"model=Sequential()\nmodel.add(Flatten(input_shape=INPUT_SHAPE))\nmodel.add(Dense(units=DENSE_COUNT_ARRAY[0],activation=MID_ACTIVATION))\nmodel.add(Dense(units=DENSE_COUNT_ARRAY[1],activation=MID_ACTIVATION))\nmodel.add(Dense(units=DENSE_COUNT_ARRAY[2],activation=MID_ACTIVATION))\nmodel.add(Dense(units=TARGET_COUNT,activation=LAST_ACTIVATION))\n\nmodel.compile(optimizer=MODEL_OPTIMIZER,loss=MODEL_LOSS,metrics=MODEL_METRICS)","e6ebe3f8":"model.fit(X_train,y_train,batch_size=BATCH_SIZE,epochs=EPOCHS)","ea6d8d4d":"model.evaluate(X_val,y_val)","22f63894":"pred_test = model.predict(X_test)\npred_test[:5]","e339aada":"np.argmax(pred_test,axis=1)","b983e871":"model.evaluate(X_test,y_test)","9f3ca236":"X_test = X_test.to_numpy()","d7bff25e":"plt.figure(figsize=(16,16))\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.imshow(X_test[i].reshape(28,28),cmap=\"Greys\")\n    plt.axis('off')\n    plt.title(\"ORIGINAL= {} \\n PREDICTED = {}\".format(class_labels[y_test[i]], class_labels[np.argmax(pred_test[i])]))","1d1fc4e0":"### prediction probability","0de8c3cc":"# load data","86cecc8e":"# target count check","d31e8952":"### prediction label","fd1588e0":"# global variables","1bfb0276":"# train model","54d9b924":"# evaluate model (train.csv data)","1a0bdcc6":"# define model","f93a5071":"# predict test data target using trained model","4c7e0d25":"# split data ","c6468036":"# evaluate model (test.csv data)"}}