{"cell_type":{"257f95a9":"code","824219d7":"code","846191c2":"code","5a2dff0f":"code","93b493ad":"code","f71b646b":"code","9256fbf7":"code","62b509b3":"code","945dd3a5":"code","2907ebab":"code","59b78ef3":"code","d5a76014":"code","21666090":"code","2aa6e469":"code","45696794":"code","7e80ac6d":"code","1bf9c6b8":"code","bdbc6404":"code","8022a128":"code","38297da0":"code","cad78b35":"code","0ede4abe":"code","07ec3da1":"code","5cdc6186":"code","8c1d77e4":"code","010747a5":"markdown","8d7014fb":"markdown"},"source":{"257f95a9":"\nimport numpy as np\nimport pandas as pd\nimport urllib.request\nfrom PIL import Image\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.svm import SVR\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn import svm, datasets\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.datasets import make_regression\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_log_error, mean_squared_error, r2_score, mean_absolute_error\nimport math\n\n\n\nimport warnings\n\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning)","824219d7":"diamonds = pd.read_csv(\"diamonds_train.csv\", index_col=0)","846191c2":"#Poner una categoria de mayor valor al clarity\ndiamonds_df = diamonds.copy()\ndiamonds_df[\"clarity_value\"] = diamonds_df[\"clarity\"].map({'I1': 1, 'SI2': 2, 'SI1': 3, 'VS2':4, 'VS1':5, 'VVS2':6, 'VVS1':7, 'IF':8 })","5a2dff0f":"#Poner una categoria de mayor valor al color\ndiamonds_df[\"color_value\"] = diamonds_df[\"color\"].map({'J': 1, 'I': 2, 'H': 3, 'G':4, 'F':5, 'E':6, 'D':7})","93b493ad":"#Poner una categoria de mayor valor al corte\ndiamonds_df[\"cut_value\"] = diamonds_df[\"cut\"].map({'Fair': 1, 'Good': 2, 'Very Good': 3, 'Premium':4, 'Ideal':5})\ndiamonds_df","f71b646b":"X = np.array(diamonds_df[['carat','x','y','z','depth', 'table', 'clarity_value', 'color_value', 'cut_value' ]])\ny = np.array(diamonds_df['price'])","9256fbf7":"X = np.array(diamonds_df[['carat','x','y','z', 'clarity_value', 'color_value', 'cut_value' ]])\ny = np.array(diamonds_df['price'])","62b509b3":"# el test_size 0.20 y el random state puede cambiar \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.10, random_state = 40)","945dd3a5":"model = RandomForestRegressor()","2907ebab":"model = RandomForestRegressor(n_estimators = 600, max_features= 'auto', max_depth= 25, min_samples_split= 5, min_samples_leaf= 2, n_jobs = 1, verbose=2, random_state =1)","59b78ef3":"model.fit(X_train, y_train)","d5a76014":"y_pred = model.predict(X_test)","21666090":"np.sqrt(mean_squared_error(y_test, y_pred))","2aa6e469":"X_pred = pd.read_csv(\"diamonds_test.csv\", index_col=0)\nX_pred.head()","45696794":"X_pred = X_pred.copy()\nX_pred[\"clarity_value\"] = X_pred[\"clarity\"].map({'I1': 1, 'SI2': 2, 'SI1': 3, 'VS2':4, 'VS1':5, 'VVS2':6, 'VVS1':7, 'IF':8 })","7e80ac6d":"X_pred[\"cut_value\"] = X_pred[\"cut\"].map({'Fair': 1, 'Good': 2, 'Very Good': 3, 'Premium':4, 'Ideal':5})","1bf9c6b8":"X_pred[\"color_value\"] = X_pred[\"color\"].map({'J': 1, 'I': 2, 'H': 3, 'G':4, 'F':5, 'E':6, 'D':7})\nX_pred","bdbc6404":"X_pred = np.array(X_pred[['carat','x','y','z', 'depth', 'table','clarity_value', 'color_value', 'cut_value']])\n ","8022a128":"X_pred","38297da0":"predictions_submit = model.predict(X_pred)\npredictions_submit","cad78b35":"sample = pd.read_csv(\"sample_submission.csv\")","0ede4abe":"submission = pd.DataFrame({\"id\": range(len(predictions_submit)), \"price\": predictions_submit})","07ec3da1":"def chequeator(df_to_submit):\n    \"\"\"\n    Esta funci\u00f3n se asegura de que tu submission tenga la forma requerida por Kaggle.\n    \n    Si es as\u00ed, se guardar\u00e1 el dataframe en un `csv` y estar\u00e1 listo para subir a Kaggle.\n    \n    Si no, LEE EL MENSAJE Y HAZLE CASO.\n    \n    Si a\u00fan no:\n    - apaga tu ordenador, \n    - date una vuelta, \n    - enciendelo otra vez, \n    - abre este notebook y \n    - leelo todo de nuevo. \n    Todos nos merecemos una segunda oportunidad. Tambi\u00e9n t\u00fa.\n    \"\"\"\n    if df_to_submit.shape == sample.shape:\n        if df_to_submit.columns.all() == sample.columns.all():\n            if df_to_submit.id.all() == sample.id.all():\n                print(\"You're ready to submit!\")\n                submission.to_csv(\"submission.csv\", index = False) #muy importante el index = False\n                urllib.request.urlretrieve(\"https:\/\/i.kym-cdn.com\/photos\/images\/facebook\/000\/747\/556\/27a.jpg\", \"gfg.png\")     \n                img = Image.open(\"gfg.png\")\n                img.show()   \n            else:\n                print(\"Check the ids and try again\")\n        else:\n            print(\"Check the names of the columns and try again\")\n    else:\n        print(\"Check the number of rows and\/or columns and try again\")\n        print(\"\\nMensaje secreto de Clara: No me puedo creer que despu\u00e9s de todo este notebook hayas hecho alg\u00fan cambio en las filas de `diamonds_test.csv`. Lloro.\")\n","5cdc6186":"chequeator(submission)","8c1d77e4":"## AL FINAL ESTE ME LO CALIFICARON COMO UN 530","010747a5":"### 2. Dividir X_train, X_test, y_train, y_test","8d7014fb":"### 1. Definir X e y"}}