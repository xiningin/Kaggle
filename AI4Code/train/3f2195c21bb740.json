{"cell_type":{"8d1a1272":"code","4c4c7a5d":"code","d10c319c":"code","3c2ef853":"code","018c86f2":"code","e0170e3a":"code","a72ef17f":"code","7e002e2e":"code","fbf9a133":"code","17d7835b":"code","21e2096c":"code","e1d40685":"code","a13466f1":"code","ce62a8b4":"code","b0e36271":"code","bede5363":"code","68cb955c":"code","e7120656":"code","c8b62b4f":"code","ef1656fc":"code","3e31d581":"code","fc8b4cea":"code","0c1706ad":"code","7ef2c71e":"code","bc86b686":"code","c8dfbe12":"code","abbbb602":"code","1a269762":"code","ed668cf5":"code","774ec89f":"code","ecc2b873":"code","556914aa":"code","9dbf9dde":"code","4b7122a3":"markdown","36302ec4":"markdown","869306b7":"markdown","cdc07950":"markdown","9408cafc":"markdown","f074993b":"markdown","b2fbcd10":"markdown","f6e1b633":"markdown","2f392f24":"markdown","08d19db1":"markdown","0a193749":"markdown","6468213b":"markdown","9c4d37eb":"markdown","7d53ee14":"markdown","613c0504":"markdown","7b84bcc2":"markdown","c603cdfa":"markdown","559bf562":"markdown","7293a70f":"markdown","6661feea":"markdown","35962128":"markdown","96c4a26d":"markdown","fc52cfbe":"markdown","a9bb80c8":"markdown","17b7efe9":"markdown","e80494d4":"markdown"},"source":{"8d1a1272":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4c4c7a5d":"\n\nfrom pandas_profiling import ProfileReport\n#from dataprep.eda import create_report\n\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\n\nfrom plotly.offline import plot, iplot, init_notebook_mode\nimport plotly.express as px\ninit_notebook_mode(connected=True)\n\n#plotly did not import properly and was giving error. Using the solution from the reference doc : https:\/\/www.kaggle.com\/product-feedback\/138599","d10c319c":"#conda install dask==2021.12.0\n#pip install -U dataprep\n#from dataprep.eda import create_report","3c2ef853":"# Reading the input file","018c86f2":"df = pd.read_csv('..\/input\/netflix-shows\/netflix_titles.csv')\ndf.head(10)","e0170e3a":"# To see the high level data details\ndf.info()\n","a72ef17f":"def missing_pct(df):\n    # Calculate missing value and their percentage for each column\n    missing_count_percent = df.isnull().sum() * 100 \/ df.shape[0]\n    df_missing_count_percent = pd.DataFrame(missing_count_percent).round(2)\n    df_missing_count_percent = df_missing_count_percent.reset_index().rename(\n                    columns={\n                            'index':'Column',\n                            0:'Missing_Percentage (%)'\n                    }\n                )\n    df_missing_value = df.isnull().sum()\n    df_missing_value = df_missing_value.reset_index().rename(\n                    columns={\n                            'index':'Column',\n                            0:'Missing_value_count'\n                    }\n                )\n    # Sort the data frame\n    #df_missing = df_missing.sort_values('Missing_Percentage (%)', ascending=False)\n    Final = df_missing_value.merge(df_missing_count_percent, how = 'inner', left_on = 'Column', right_on = 'Column')\n    Final = Final.sort_values(by = 'Missing_Percentage (%)',ascending = False)\n    return Final\n\nmissing_pct(df)","7e002e2e":"# Dataset information\n\n# Approach 3\nProfileReport(df)","fbf9a133":"#create_report(df)","17d7835b":"# Rating data is mentioned incorrectly for few titles in the input file. Hence correcting it by checking the Maturity rating online\n\ndf['rating'] = df['rating'].replace({'74 min': 'TV-MA', '84 min': 'TV-MA', '66 min': 'TV-MA'})\ndf['rating'] = df['rating'].replace({'TV-Y7-FV': 'TV-Y7'})","21e2096c":"df['rating'].unique()","e1d40685":"# Renaming vaules for Rating for better understanding\n# Source : https:\/\/help.netflix.com\/en\/node\/2064\ndf['rating'] = df['rating'].replace({\n                'PG-13': 'Teens - Age above 12',\n                'TV-MA': 'Adults',\n                'PG': 'Kids - with parental guidence',\n                'TV-14': 'Teens - Age above 14',\n                'TV-PG': 'Kids - with parental guidence',\n                'TV-Y': 'Kids',\n                'TV-Y7': 'Kids - Age above 7',\n                'R': 'Adults',\n                'TV-G': 'Kids',\n                 'G': 'Kids',\n                'NC-17': 'Adults',\n                'NR': 'NR',\n                'UR' : 'UR'\n                \n})","a13466f1":"df['rating'].unique()","ce62a8b4":"df['country'] = df['country'].fillna(df['country'].mode()[0])\n\ndf['cast'].replace(np.nan, 'No Data',inplace  = True)\ndf['director'].replace(np.nan, 'No Data',inplace  = True)\ndf.dropna(inplace=True)\n\n# Drop Duplicates\ndf.drop_duplicates(inplace= True)","b0e36271":"# splitting the genres in different rows to use it in the viz later\n\n#df_genre = df[df['title'].isin(['Blood & Water', 'Dick Johnson Is Dead', 'Ganglands' ])]\ndf_genre = df[['show_id', 'title','type', 'listed_in' ]]\ndf_genre = (df_genre.drop('listed_in', axis=1)\n             .join\n             (\n             df_genre.listed_in\n             .str\n             .split(', ',expand=True)\n             .stack()\n             .reset_index(drop=True, level=1)\n             .rename('listed_in')           \n             ))\n","bede5363":"# Creating new columns\n\ndf['month'] = pd.DatetimeIndex(df['date_added']).month","68cb955c":"# Total Shows and movies\n\ndf_count = df['show_id'].count().sum()\nprint(df_count)\n# Split of showes and TV\ndf_type = df.groupby('type')['show_id'].count().reset_index()\ndf_type = df_type.rename(columns = {\"show_id\":\"count_showids\"})","e7120656":"import plotly.graph_objects as go\nfig = go.Figure()\nfig.add_trace(go.Indicator(\n    value = df_count))\n\nfig = fig.update_layout(\n        template = {'data' : {'indicator': [{\n        'title': {'text': \"Total content on Netflix\"},}]\n        }})\n\nfig = fig.update_layout(\n    #autosize=False,\n    #width=500,\n    height=100,\n    margin=dict(l=50,r=50,b=0,t=1),)\n\n# fig2 = px.pie(df_type, values='count_showids', names='type', color_discrete_sequence=px.colors.sequential.RdBu,\n#        title='What type of titles are uploaded more on Netflix' , width=500, height=450)\n\nfig.show()\n#fig2.show()\n\n\nfig = make_subplots(rows=1, cols=2, specs=[[{'type':'bar'}, {'type':'pie'}]])\nfig.add_trace(\n    \n    go.Bar(x= df_type['count_showids'], y= df_type['type'], orientation = 'h', marker=dict(color=[\"Maroon\", \"Grey\"]), showlegend=False, \n           text = df_type['count_showids'], textposition='auto'),\n    row=1, col=1)\n\nfig.add_trace(\n    \n    go.Pie(labels=df_type['type'], values=df_type['count_showids'], marker_colors= [\"Maroon\", \"Grey\"]),\n    row=1, col=2)\n\nfig.update_layout(\n    title_text=\"'What type of content is more uploaded more on Netflix?\")\nfig.show()\n","c8b62b4f":"# splitting the countries in different rows \n#df_genre = df[df['title'].isin(['Blood & Water', 'Dick Johnson Is Dead', 'Ganglands' ])]\ndf_country = df[['show_id', 'title','type', 'country' ]]\ndf_country = (df_country.drop('country', axis=1)\n             .join\n             (\n             df_country.country\n             .str\n             .split(', ',expand=True)\n             .stack()\n             .reset_index(drop=True, level=1)\n             .rename('country')           \n             ))\n","ef1656fc":"df_country_viz_total = df_country[[\"title\", \"country\"]]\ndf_country_viz_total = df_country_viz_total.groupby(['country'])[\"title\"].count().reset_index().sort_values('title', ascending= False).head(10)\ndf_country_viz_total = df_country_viz_total.rename(columns = {\"title\": \"movies_count\",})\n\n \nfig1 = px.bar(df_country_viz_total, x='country', y='movies_count', color_discrete_sequence=px.colors.sequential.RdBu,\n       title='Top 10 countries with Netflix Content ')\n\n\ndf_country_viz = df_country[[\"title\", \"country\"]]\ndf_country_viz = df_country_viz.groupby(['country'])[\"title\"].count().reset_index().sort_values('title', ascending= False).head(10)\n\ndf_country_viz1 = df_country[[\"title\", \"type\", \"country\"]]\ndf_country_viz1 = df_country_viz1.groupby(['country', 'type'])[\"title\"].count().reset_index().sort_values('title', ascending= False)\ndf_country_viz1 = df_country_viz1.rename(columns = {\"title\": \"movies_count\",})\n\nfinal1 = df_country_viz.merge(df_country_viz1, how = 'left', left_on = 'country', right_on = 'country')\nfinal1['percentage'] = (final1['movies_count']\/final1['title'])*100\nfinal1['percentage'] = final1['percentage'].round(1)\nfinal1['percent_string'] = final1['percentage'].astype(str)+ '%'\n\n\nfig2 = px.bar(final1, x='country', y='percentage', color = 'type',\n       title='Top 10 countries with Movie\/TV show split ')","3e31d581":"fig = go.Figure()\nfig.add_trace(\n    \ngo.Bar(x= df_country_viz_total['country'], y= df_country_viz_total['movies_count'], marker_color = 'Maroon',\n           text = df_country_viz_total['movies_count'], textposition='auto'))\n\nfig.update_layout(title_text = \"Top 10 countries with Netflix Content\"\n                  , yaxis=dict(title='Movies\/TV Shows Count'))\nfig.show()\n\nfinal_movie = final1.query(\"type == 'Movie'\")\nfinal_show = final1.query(\"type == 'TV Show'\")\n\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    x=  final_movie['country'],\n    y= final_movie['percentage'],\n    showlegend=True,\n    text = final_movie['percent_string'], \n    textposition='auto',\n    name='Movie',\n    marker_color='Maroon'    \n    \n))\nfig.add_trace(go.Bar(\n    x= final_show['country'],\n    y= final_show['percentage'],\n    showlegend=True,\n    text = final_show['percent_string'], \n    textposition='auto',\n    name='TV Show',\n    marker_color='Grey' \n))\n\n\n\n# Here we modify the tickangle of the xaxis, resulting in rotated labels.\nfig.update_layout(barmode='stack', title_text = 'Top 10 countries with Movie\/TV show split '\n                  , yaxis=dict(title='% Movies\/TV Shows Count'))\nfig.show()\n\n\n","fc8b4cea":"# df_country_viz = df_country[[\"title\", \"type\", \"country\"]]\n# df_country_viz = df_country_viz.groupby(['country', 'type'])[\"title\"].count().reset_index().sort_values('title', ascending= False)\n# df_country_viz = df_country_viz.rename(columns = {\"title\": \"movies_count\",})\n\n# df_country_movie = df_country_viz.query(\"type == 'Movie'\").head(10) \n# fig1 = px.bar(df_country_movie, x='country', y='movies_count',color_discrete_sequence=['Maroon'],\n#        title='Top 10 countries with the most Netflix movies')\n\n# df_country_movie = df_country_viz.query(\"type == 'TV Show'\").head(10)\n# fig2 = px.bar(df_country_movie, x='country', y='movies_count', color_discrete_sequence=['gray'],\n#        title='Top 10 countries with the most Netflix TV Shows')\n\n# fig1.show()\n# fig2.show()","0c1706ad":"df_2 = df.query(\"type == 'Movie'\")\ndf_2 = df_2[[\"title\", \"rating\"]]\ndf_2 = df_2.groupby(['rating'])[\"title\"].count().reset_index().sort_values('title', ascending = False)\ndf_2 = df_2.rename(columns = {\"title\": \"movies_count\"})\npx.bar(df_2, x='rating', y='movies_count', color_discrete_sequence=px.colors.sequential.RdBu,\n       title='For which category the maximum content(Movies) are uploaded? ')\n","7ef2c71e":"df_3 = df.query(\"type == 'TV Show'\")\ndf_3 = df_3[[\"title\", \"rating\"]]\ndf_3 = df_3.groupby('rating')[\"title\"].count().reset_index().sort_values('title', ascending = False)\ndf_3 = df_3.rename(columns = {\"title\": \"movies_count\"})\npx.bar(df_3, x='rating', y='movies_count', color_discrete_sequence=['grey'],\n       title='For which category the maximum content(TV Shows) are uploaded?')\n","bc86b686":"df_5 = df.query(\"release_year >= 2007\")\ndf_5 = df_5.groupby(\"release_year\")[\"show_id\"].count().reset_index()\n\nfig = px.area(df_5, x='release_year', y='show_id', color_discrete_sequence=px.colors.sequential.RdBu,\n      title='Overall content release Trend')\nfig.show()","c8dfbe12":"# #df_4 = df.query(\"type == 'Movie'\")\n# df_4 = df.query(\"release_year >= 2007\")\n# df_4 = df_4.groupby([\"type\",\"release_year\"])[\"show_id\"].count().reset_index()\n\n# fig  = px.line(df_4, x='release_year', y='show_id', color = 'type',\n#       title='Movies\/TV Show release yearly Trend')\n# fig.show()","abbbb602":"#df_4 = df.query(\"type == 'Movie'\")\ndf_4 = df.query(\"release_year >= 2007\")\ndf_4 = df_4.groupby([\"type\",\"release_year\"])[\"show_id\"].count().reset_index()\ndf_4_movie = df_4.query(\"type == 'Movie'\")\ndf_4_show = df_4.query(\"type == 'TV Show'\")\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(\n    x=  df_4_movie['release_year'],\n    y= df_4_movie['show_id'],\n    showlegend=True,\n    text = df_4_movie['show_id'], \n    \n    name='Movie',\n    marker_color='Maroon'    \n    \n))\nfig.add_trace(go.Scatter(\n    x=  df_4_show['release_year'],\n    y= df_4_show['show_id'],\n    showlegend=True,\n    text = df_4_show['show_id'], \n \n    name='TV Show',\n    marker_color='Grey' \n))\n\nfig.update_traces( mode='lines+markers')\nfig.update_layout(title_text = 'Movies\/TV Show release yearly Trend' )\nfig.show()","1a269762":"# df_4 = df.query(\"release_year >= 2007\")\n\n# df_4 = df_4[[\"type\",\"month\",'release_year', \"show_id\"]]\n# df_4 = df_4.groupby(['release_year', 'month', 'type'])['show_id'].count().reset_index()\n# df_4 = df_4.rename(columns = {\"show_id\": \"total_shows\"})\n# df_4 = df_4.groupby(['month', 'type'])['total_shows'].mean().reset_index()\n\n\n\n# fig  = px.line(df_4, x='month', y='total_shows', color = 'type',\n#       title='All years Movies\/TV Show release Month Trend')\n# fig.show()","ed668cf5":"df_4 = df.query(\"release_year >= 2007\")\n\ndf_4 = df_4[[\"type\",\"month\",'release_year', \"show_id\"]]\ndf_4 = df_4.groupby(['release_year', 'month', 'type'])['show_id'].count().reset_index()\ndf_4 = df_4.rename(columns = {\"show_id\": \"total_shows\"})\ndf_4 = df_4.groupby(['month', 'type'])['total_shows'].mean().reset_index()\n\ndf_4_movie = df_4.query(\"type == 'Movie'\")\ndf_4_show = df_4.query(\"type == 'TV Show'\")\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(\n    x=  df_4_movie['month'],\n    y= df_4_movie['total_shows'],\n    showlegend=True,\n    text = df_4_movie['total_shows'], \n    name='Movie',\n    marker_color='Maroon'    \n    \n))\nfig.add_trace(go.Scatter(\n    x=  df_4_show['month'],\n    y= df_4_show['total_shows'],\n    showlegend=True,\n    text = df_4_show['total_shows'], \n    name='TV Show',\n    marker_color='Grey' \n))\n\nfig.update_traces( mode='lines+markers')\nfig.update_layout(title_text = 'Movies\/TV Shows average release monthly trend' )\nfig.show()\n\n","774ec89f":"def trend_yearwise(year):\n    \n    title = (f'Movies\/TV Show release Month Trend for year {year}' )\n    df_6 = df.query(\"release_year == @year\")\n    df_6 = df_6.groupby([\"type\",\"month\"])[\"show_id\"].count().reset_index()\n    df_6_movie = df_6.query(\"type == 'Movie'\")\n    df_6_show = df_6.query(\"type == 'TV Show'\")\n    \n    fig = go.Figure()\n    fig.add_trace(go.Scatter(\n    x=  df_6_movie['month'],\n    y= df_6_movie['show_id'],\n    showlegend=True,\n    text = df_6_movie['show_id'], \n    name='Movie',\n    marker_color='Maroon'    \n\n    ))\n    fig.add_trace(go.Scatter(\n    x=  df_6_show['month'],\n    y= df_6_show['show_id'],\n    showlegend=True,\n    text = df_6_show['show_id'], \n    name='TV Show',\n    marker_color='Grey' \n    ))\n\n    fig.update_traces( mode='lines+markers')\n    fig.update_layout(title_text =  title )\n    fig.show()\n    \ntrend_yearwise(2019)    ","ecc2b873":"df_genre_viz = df_genre[[\"title\", \"type\", \"listed_in\"]]\ndf_genre_viz = df_genre_viz.groupby(['listed_in', 'type'])[\"title\"].count().reset_index().sort_values('title')\ndf_genre_viz = df_genre_viz.rename(columns = {\"title\": \"movies_count\", \"listed_in\": \"Genre\"})\n\ndf_genre_movie = df_genre_viz.query(\"type == 'Movie'\")\ndf_genre_tvshow = df_genre_viz.query(\"type == 'TV Show'\")\n# fig1 = px.bar(df_genre_movie, x='movies_count', y='Genre', color_discrete_sequence=px.colors.sequential.RdBu,\n#        title='For which Genre the maximum content(Movies) are uploaded? ', height=600)\n# fig2 = px.bar(df_genre_tvshow, x='Genre', y='movies_count', color_discrete_sequence=['Grey'],\n#        title='For which Genre the maximum content(Shows) are uploaded? ')\n#fig1.show() \n#fig2.show()\nfig = make_subplots(rows=1, cols=2, specs=[[{'type':'bar'}, {'type':'bar'}]],\n                   subplot_titles = ['For which Genre the maximum Movies are uploaded?', 'For which Genre the maximum Shows are uploaded? ' ],\n                   horizontal_spacing = 0.3)\nfig.add_trace(\n    \n    go.Bar(x= df_genre_movie['movies_count'], y= df_genre_movie['Genre'], orientation = 'h', marker_color='Maroon',  name=\"Movie\",\n           text = df_type['count_showids'], textposition='auto'),\n    row=1, col=1)\n\nfig.add_trace(\n    \n    go.Bar(x= df_genre_tvshow['movies_count'], y= df_genre_tvshow['Genre'], orientation = 'h', marker_color = 'Grey', name = \"TV Show\"),\n    row=1, col=2)\n\nfig.update_layout( height = 600)\nfig.show()","556914aa":"df_9 = df.query(\"type == 'TV Show'\")\ndf_9 = df_9[[ \"title\", \"duration\"]]\ndf_9 = df_9.groupby(['duration'])[\"title\"].count().reset_index().sort_values('title', ascending = False)\n#df_9 = df_9['duration'].replace(\"seasons\", \"\")\ndf_9 = df_9.rename(columns = {\"title\": \"TV Shows\", \"duration\" : \"Seasons\"})\n\n\ndf_10 = df.query(\"type == 'Movie'\")\ndf_10['duration'] = df_10['duration'].fillna(\"0\")\ndf_10['duration'] = df_10['duration'].str.split(\" \").str[0].astype(int)\n\n\n\n\nfig_show = px.bar(df_9, x='Seasons', y='TV Shows', color_discrete_sequence=['grey'],\n       title='TV Shows seasons ')\nfig_Movie = px.histogram(df_10, x=\"duration\" , nbins = 20, color_discrete_sequence=px.colors.sequential.RdBu\n                  , title = \"Movie Duration\")\n\nfig_Movie.show()\nfig_show.show()\n","9dbf9dde":"#Work in progress","4b7122a3":"<a id=\"section-four\"><\/a>\n# Visualization","36302ec4":"<a id=\"section-two\"><\/a>\n# Handling the missing data and deleting duplicates","869306b7":"We observe that there are more movies than TV shows on Netflix","cdc07950":"As expected, \n1. Unites States tops the chart followed by India, United Kingdom, and Canada.\n2. Interestingly, the content available in India is heavily skewed towards movies, confirming the intuition about big influence of bollywood in-house movie production. \n3. South Korea has the highest percentage of TV shows","9408cafc":"It appears that there is no specific pattern in which we could see more movies are added to particular months,","f074993b":"It seems like Netflix focused on movies, and the movie count increases significantly till 2018. There's been a decline in the movies count but a steady growth in the TV shows since 2018. ","b2fbcd10":"In 2007, Netflix introduced streaming media and video on demand. We see a slow in the beginning but then it picked up in 2014-2015 and there is a rapid increase till 2018.\n\nBy 2018, the content on netlix was 13 times of 2007 year's content. But it has declined since 2019 since the beginning of covid. The other factor could be - In 2019, Disney plus was also launched. Films and television series produced by The Walt Disney Studios and Walt Disney Television, such as Marvel movies moved to Disney plus.","f6e1b633":"<a id=\"section-one\"><\/a>\n### Data Information","2f392f24":"### Other libraries to see dataset information and automated basic charts are :\n\nPandas-Profiling\n\nSweetviz\n\nAutoviz - this notebook used Autoviz for Netflix data https:\/\/www.kaggle.com\/rsesha\/autoviz-on-netflix-dataset?scriptVersionId=83019093\n\nD-Tale\n\nSource link : https:\/\/towardsdatascience.com\/4-libraries-that-can-perform-eda-in-one-line-of-python-code-b13938a06ae\n        \n        ","08d19db1":"We did exploratory data analysis on Netflix Movie Data. We found a lot of insights from the data. This is the first step in our series.  \n\nNext, we will engineer useful features and begin developing our recommendation model.\n\nFor modelling step, we will start with the rating data from here : https:\/\/www.kaggle.com\/netflix-inc\/netflix-prize-data . Then we will see if the extended movie features from this dataset helps to improve our recommendation system.\n\nStay tuned! \n","0a193749":"It seems the most content(Movies) on Netflix caters to Adults and then teens.","6468213b":"1. Rating - manually filling the data usin data from Netflix website\n\n2. Country - replacing blank countries with the most common country\n\n3. Cast - replacing null value with \"Data not available\"\n\n4. Director - replacing null value with \"Data not available\"","9c4d37eb":"The function ```missing_pct``` takes a data frame as an input and returns a data frame, where each row corresponds to a column in the original dataframe and contains column's name, number of missing values in that column as well as percentage of the missing values.\n\nThis is a standard template that I use for every dataset that I want to analyze.","7d53ee14":"### Approach 1","613c0504":"### Observations:\n\n    1. The above code shows that there are some null values in the data\n    \n    2. Shows the total rows, name and number of columns and their datatypes\n   ","7b84bcc2":"<a id=\"section-five\"><\/a>\n# Conclusion","c603cdfa":"It is important to handle missing data because any statistical results based on a dataset with non-random missing values could be biased. So you really want to see if these are random or non-random missing values.\n\nDrop the columns which has high number of missing values.\n\nWe can impute(filling the missing values using the available information such as mean, median) but we should carefully see the pattern of the column before doing imputation.\n\nFor example - You want to fill the height of a person who male. Simpley adding 0 in the missing column would not make sense. So we can take the averega of male height and use that value inplace of missing values.","559bf562":"### Shortcuts that I used for the most common things in the notebook for easy flow:\n\na  - adding a cell above\n\nb - adding the cell below\n\ndd - delete the cell\n\n'###', '##', '#' - used in markdown cells to make the heading slightly bigger\n\nshift tab - to see the function descriptions\n\npip install packagename - Install new packages, make sure internet option on the right side is turn on","7293a70f":"### Approach 2","6661feea":"## Table of Content\n\n* [Data Information](#section-one)\n* [Handling Missing Data](#section-two)\n* [Creating New Columns](#section-three)\n* [Visualization](#section-four)\n* [Conclusion](#section-five)","35962128":"The duration for most movies on netflix falls between 80-120 mins with very few movies more than 150 mins.\n\nMost shows on Netflix has only season1.","96c4a26d":"It seems the most content(TV shows) on Netflix caters to Adults and then teens.","fc52cfbe":"United States is the top leaader in both movie and TV shows. India followed US in the overall content and it seems that it has the most number of movies with very less percentage of TV shows comapred to UK and Japan.","a9bb80c8":"### Thanks Shivam Bansal for keeping the data updated!","17b7efe9":"<a id=\"section-three\"><\/a>\n# Creating new columns\n","e80494d4":"It looks like for both TV shows and movies - the three most common genres are international movies and dramas."}}