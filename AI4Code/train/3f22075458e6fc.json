{"cell_type":{"78b24f97":"code","16be9323":"code","0df8c7f6":"code","818459ca":"code","2d5bd095":"code","4f7c5b64":"code","09e7da8b":"code","62e3ad1d":"code","8045232c":"code","2390d403":"code","a6b2a340":"code","38e79650":"code","97e274a2":"code","ddbaec94":"code","9b7d1b9c":"code","6289752b":"code","8fd9a523":"code","bb9d73dc":"code","4d008e57":"code","d933d587":"code","dec79f48":"code","75ad0214":"code","2f69708f":"markdown","61320c8b":"markdown","dd535b22":"markdown","b2bb6f0d":"markdown","c49de62c":"markdown","f8099542":"markdown","4184287f":"markdown","7a14d389":"markdown","1c82e64e":"markdown","ba33e691":"markdown","d2368ca2":"markdown","ead8237b":"markdown","a0b1a91a":"markdown","5e635223":"markdown","15189e19":"markdown","0d141592":"markdown","d54981b7":"markdown","cecf8f77":"markdown","be1f8dca":"markdown","68d5b9e7":"markdown","e0821d2e":"markdown","14dc41cc":"markdown","0516caa3":"markdown","e6075742":"markdown","7b6f5501":"markdown"},"source":{"78b24f97":"import pandas as pd\nimport re # For regular expressions","16be9323":"path = '..\/input\/'\ndf = pd.read_csv(path + 'train.csv') \ndf = df.set_index('PassengerId')\ndf.head()","0df8c7f6":"df['Title'] = df['Name'].map(lambda name: re.findall(\"\\w+[.]\", name)[0])\n\ntitle_dictionary = {'Ms.': 'Miss.', 'Mlle.': 'Miss.', \n              'Dr.': 'Rare', 'Mme.': 'Mr.', \n              'Major.': 'Rare', 'Lady.': 'Rare', \n              'Sir.': 'Rare', 'Col.': 'Rare', \n              'Capt.': 'Rare', 'Countess.': 'Rare', \n              'Jonkheer.': 'Rare', 'Dona.': 'Rare', \n              'Don.': 'Rare', 'Rev.': 'Rare'}\n\ndf['Title'] = df['Title'].replace(title_dictionary)\n\ndf.head()","818459ca":"df.groupby('Title')","2d5bd095":"df.groupby('Title').median()","4f7c5b64":"df.groupby('Title').mean()","09e7da8b":"df['MedianAge'] = df.groupby('Title')['Age'].transform(\"median\")\ndf.head(15)","62e3ad1d":"df['Age'] = df['Age'].fillna(df['MedianAge'])\ndf.head()","8045232c":"df = df.drop('MedianAge', axis=1)\ndf.head()","2390d403":"df.isnull().sum()","a6b2a340":"df.dtypes","38e79650":"df['Sex'].value_counts()","97e274a2":"df = df.replace({'male': 0, 'female': 1})","ddbaec94":"df.dtypes","9b7d1b9c":"df['Embarked'].value_counts()","6289752b":"pd.get_dummies(df['Embarked']).head()","8fd9a523":"port_df = pd.get_dummies(df['Embarked'], prefix='Port')","bb9d73dc":"port_df.head()","4d008e57":"df = pd.concat([df, port_df], axis=1)","d933d587":"df.head()","dec79f48":"df = df.drop('Embarked', axis=1)","75ad0214":"df.columns","2f69708f":"Next, we check the columns in our dataframe.","61320c8b":"Notes:\n- One of the columns in the one-hot encoding obtained in the above manner is always redundant. In case of features with just two classes such as gender in our dataset, one-hot encoding is not truly useful. One of its column is same as what we obtained by simply replacing classes with 0 and 1 and the other is redundant.  \n- The main disadvantage of using one-hot encoding is the increase in the number of features that can negatively affect our model which we will discuss in the later sessions.\n","dd535b22":"There are two columns with `object` datatype - *Sex* and *Embarked*. These two along with *Pclass* are categorical variables. The feature *Pclass* has an innate order in its categories and hence, is ordinal, whereas *Sex* and *Embarked* are inordinal categorical variables. Most machine learning models require the features or input variables to be numerical. One way to accomplish that is to encode the categories with numbers.","b2bb6f0d":"### 2. Encoding categorical variables\nLet us check the datatype of each column. Hint: Use `dtypes`.","c49de62c":"### Next step:\n\nPlease proceed to the [hands-on exercises](https:\/\/www.kaggle.com\/aashita\/exercise-2).","f8099542":"### Acknowledgement:\n* [Titanic dataset from Kaggle](https:\/\/www.kaggle.com\/c\/titanic) dataset openly available in Kaggle is used in the exercises.\n\n**Note:**\nThe solutions for this exercise can be found [here](https:\/\/github.com\/AashitaK\/ML-Workshops\/blob\/master\/Session%202\/Guided%20session%202.ipynb).","4184287f":"We drop off the *MedianAge* column since we no longer need it.","7a14d389":"Check the datatypes again and make note of datatype for the column *Sex*. Discuss what can possibly go wrong with randomly assigning numbers to categories.","1c82e64e":"Convert the gender values to numerical values 0 and 1. Hint: Use `replace` with the suitable dictionary. ","ba33e691":"Now we fill in the missing values in the *Age* column using the values in the *MedianAge* column.","d2368ca2":"The most common way to derive a dataframe from a groupby object is by transformation. We create a new column *MedianAge* which consists of the groupwise median age depending on the passengers' title using [`transform()`](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.transform.html).","ead8237b":"## Guided session 2\n\nThis is the first notebook for the second session of the [Machine Learning workshop series at Harvey Mudd College](http:\/\/www.aashitak.com\/ML-Workshops\/).\n\nMain topics for today's session:\n* Split-apply-combine operations by grouping rows of a dataframe\n* Encoding categorical variables\n* Concatentating and merging dataframes","a0b1a91a":"The expected output is  \n```Index(['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Port_C', 'Port_Q', 'Port_S'], dtype='object')```","5e635223":"Next, drop the column for *Embarked*. ","15189e19":"Let us check for the missing values. There are none in the *Age* column!","0d141592":"In today's guided session, we will continue exploring the [Titanic dataset from Kaggle](https:\/\/www.kaggle.com\/c\/titanic). Let us set *Passengerid* as the index.","d54981b7":"The median age vary greatly for each group ranging from 3.5 to 48 years.","cecf8f77":"Note: if you run the above cell more than once, it will give an error, since the column *Embarked* is no more present in the dataframe for the code to work. ","be1f8dca":"One of the ways to derive a dataframe from a groupby object is by aggregation, that is computing a summary statistic (or statistics) about each group. For example, we can get the median values for the columns in each group of titles.","68d5b9e7":"Now check that the new columns are added. ","e0821d2e":"Numbers have a natural order and so do ordered categories such as passengers' ticket class in our case. Number also have  an inherent quantitive value attached to them that categories do not. For example, the difference between the numbers 1 and 2 is the same as the difference between the numbers 2 and 3 but the same cannot be said for ordinal categories. So, converting categories to numbers means adding untrue assumptions that may or may not adversely affect our model. \n\nFor this reason, the prefered method is one-hot encoding. In this method, we build a one-hot encoded vector with dimension equal to the number of classes in the categories. This vector consists of all 0's except for a 1 corresponding to the class of the instance. For example, the *Embarked* column will have one-hot encoded vectors of [1,0,0], [0,1,0] and [0,0,1] for the three ports.\n\nOne-hot encoding is accomplished in pandas using `get_dummies` as given below. It simply creates a column for each class of a categorical variable.","14dc41cc":"To add this dataframe of two new columns to the original dataframe, we can use `concat` with `axis=1`.","0516caa3":"We want the column names to be `'Port_C', 'Port_Q', 'Port_S'`. Copy the above code with `get_dummies` and modify it to [make use of the `prefix` keyword](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.get_dummies.html) to alter the column names. Next, save this to a new dataframe named `port_df`.","e6075742":"### 1. [GroupBy object](https:\/\/pandas.pydata.org\/pandas-docs\/version\/0.22\/groupby.html)\nIn the last exercise session, we noticed the *Age* column has a lot of missing values. To fill these values, we can group the passengers based on the titles derived from their name and then take the median value from each group to fill the missing values of the group.\n\nThe below code is a repetition from the exercises in the previous session to create a new column named *Title* from the *Name* column using regular expressions. ","7b6f5501":"We can use [`groupby()`](https:\/\/pandas.pydata.org\/pandas-docs\/version\/0.21\/generated\/pandas.DataFrame.groupby.html) to group the rows of the dataframe based on column(s), say *Title*, but we need to apply some operation on the grouped object to derive a dataframe."}}