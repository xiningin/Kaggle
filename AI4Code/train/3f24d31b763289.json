{"cell_type":{"4e6c8fd9":"code","789d06f2":"code","99210d84":"code","b1e7bdfd":"code","899c6957":"code","f696c526":"code","84e43d96":"code","cef229d0":"code","f607a910":"code","f37c72e3":"code","fb5a7f1a":"code","d6043fbb":"code","1c8357bc":"code","e692202f":"code","0c702706":"code","c8f7ef64":"code","f2ddbb6a":"code","864b6759":"code","2a490f71":"code","384eff0c":"code","3db12f0d":"code","a6010d82":"code","8696857f":"code","6a2cad22":"code","dab889ad":"code","050a779e":"code","1fdaef84":"code","ee54b9c9":"code","2f83c84b":"code","6200bf51":"code","129386b6":"markdown","7f5d0106":"markdown","3006db87":"markdown","420e026f":"markdown","fceee9f0":"markdown","f654b755":"markdown","23453fa8":"markdown","d256ce04":"markdown","49e0d6b1":"markdown","c3e4faa5":"markdown","3c6265ad":"markdown","1ebbb40c":"markdown"},"source":{"4e6c8fd9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","789d06f2":"!pip install pycaret\nfrom pycaret.regression import *","99210d84":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest  = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\nsub   = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\n\nprint('Training Data = ',train.shape)\nprint('Testing Data = ',test.shape)\ntrain.head(3)","b1e7bdfd":"def impute_missing_values(df):\n    \n    # Get Continuous and Categorical Features\n    missing_cols = df.columns[df.isna().sum()>0]\n    mean_cols = df[missing_cols].describe().columns\n    mode_cols = list((set(missing_cols) - set(mean_cols)))\n\n    # Impute Missing Values\n    for col in mean_cols:\n        df[col].fillna(df[col].mean(),axis=0,inplace=True)    \n\n    for col in mode_cols:\n        df[col].fillna('Unknown',axis=0,inplace=True)\n        \n    return df\n\ntrain = impute_missing_values(train)\ntest  = impute_missing_values(test)\n\nprint('\\nTraining Set after Imputation\\nShape=',train.shape,'\\nMissing Values=',train.isna().sum().sum())    \nprint('\\nTesting Set after Imputation\\nShape=',test.shape,'\\nMissing Values=',test.isna().sum().sum())    ","899c6957":"A = set(train.columns)\nB = set(test.columns)\n\nprint('Uncommon Columns are ',A.union(B) - A.intersection(B))","f696c526":"clf1 = setup(data       = train, \n             target     = 'SalePrice',             \n             session_id = 123)","84e43d96":"compare_models(sort='MSE', fold=2)","cef229d0":"cat = create_model('catboost',fold=10)\ntune_cat = tune_model('catboost',fold=10,optimize='mse')","f607a910":"interpret_model(cat)","f37c72e3":"interpret_model(tune_cat)","fb5a7f1a":"xgb = create_model('xgboost',fold=10)","d6043fbb":"tune_xgb = tune_model('xgboost',fold=10,optimize='mse')","1c8357bc":"plot_model(xgb,plot='residuals')","e692202f":"plot_model(xgb,plot='error')","0c702706":"plot_model(xgb,plot='feature')","c8f7ef64":"plot_model(tune_xgb,plot='residuals')","f2ddbb6a":"plot_model(tune_xgb, plot='error')","864b6759":"plot_model(tune_xgb,plot='feature')","2a490f71":"rf = create_model('rf',fold=10)","384eff0c":"tune_rf = tune_model('rf',fold=10,optimize='mse')","3db12f0d":"plot_model(rf, plot='residuals')","a6010d82":"plot_model(tune_rf, plot='residuals')","8696857f":"plot_model(rf, plot='error')","6a2cad22":"plot_model(tune_rf, plot='error')","dab889ad":"plot_model(rf, plot='feature')","050a779e":"plot_model(tune_rf, plot='feature')","1fdaef84":"xgb_pred = predict_model(xgb, data=test)\nxgb_pred.head(3)\n","ee54b9c9":"tune_cat_pred = predict_model(tune_cat, data=test)\ntune_cat_pred.head(3)\n","2f83c84b":"sub1 = xgb_pred[['Id','Label']]\nsub1.columns = ['Id','SalePrice']\nsub1.to_csv('submission_xgb.csv',index=False)\nsub1.head()","6200bf51":"sub2 = tune_cat_pred[['Id','Label']]\nsub2.columns = ['Id','SalePrice']\nsub2.to_csv('submission_tune_cat.csv',index=False)\nsub2.head()","129386b6":"## Handle Missing Values in Training and Testing Dataset","7f5d0106":"### Uncommon Columns\n- Target Variable","3006db87":"# XGBoost","420e026f":"# Predict Test Set","fceee9f0":"## Finding the Suitable Model ","f654b755":"## Install PyCaret Library","23453fa8":"# Random Forest","d256ce04":"## Save Output Result","49e0d6b1":"# CATBoost","c3e4faa5":"## Data Setup","3c6265ad":"# <font color='green'> PyCaret - Machine Learning Made Easy<\/font>\n\n***3 things why I like PyCaret,***\n## <font color='brown'> SuperEasy - SuperFast - SuperPowerful <\/font>\n\n### PyCaret is an open source, low-code machine learning library in Python that allows you to go from preparing your data to deploying your model within seconds in your choice of notebook environment.\n\n\n\nPyCaret runs on Jupyter Notebook, Google Colab and Kaggle. So, it is platform friendly. \n\nGet PyCaret it from: https:\/\/pycaret.org\/\nLearn PyCaret  from: https:\/\/pycaret.org\/tutorial\/\n\nIf you are a beginer, start here https:\/\/colab.research.google.com\/drive\/1GqQ3XAIzg4krBbnOpKyeRqT0qBQhdwYL\n\nOr if you are good enough, go to https:\/\/github.com\/pycaret\/pycaret\/blob\/master\/Tutorials\/Binary%20Classification%20Tutorial%20Level%20Intermediate%20-%20CLF102.ipynb\n\n**Great Learning !**","1ebbb40c":"# Get Data"}}