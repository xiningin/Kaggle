{"cell_type":{"c4dee29b":"code","f47b4999":"code","8bb6a7a7":"code","4e78d3e1":"code","90a026d3":"code","853c1a77":"code","e2ced10b":"code","f5dd8175":"code","837b558c":"code","03fa9e7e":"code","cbffb2d4":"code","d528812b":"code","875f2fe1":"code","ac2cd8ff":"code","ecac10a4":"code","4b284b48":"code","703dcf20":"code","993c1d47":"code","05c81e1f":"code","2a754912":"code","bb01108d":"code","f0adcb74":"markdown","0661177c":"markdown","3d6757a6":"markdown","5f8bef6f":"markdown","5482506b":"markdown","e9c03a59":"markdown","1ed832e6":"markdown","f0e7980f":"markdown","fc7638d8":"markdown","4024b5c2":"markdown","b5f611a2":"markdown","6bf43f04":"markdown","022bc2d8":"markdown","36a241d9":"markdown","24288734":"markdown","e660c445":"markdown","4f3fee88":"markdown","2fa3260c":"markdown","81d00561":"markdown","d7d7893b":"markdown","e5612121":"markdown","cd99d487":"markdown","10bb8390":"markdown","ded9dd54":"markdown","304e443e":"markdown","efb2a7fd":"markdown"},"source":{"c4dee29b":"# To print multiple output in a cell\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = 'all'","f47b4999":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom pprint import pprint\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\n\n%matplotlib inline","8bb6a7a7":"# Let's see what each of these file contains.\n\ndata_dictionary=pd.read_excel('..\/input\/janatahack-healthcare-analytics\/Train\/Data_Dictionary.xlsx')\nfor i in data_dictionary['Details of the Files']:\n    pprint(i)","4e78d3e1":"# train data\ntrain = pd.read_csv('\/kaggle\/input\/janatahack-healthcare-analytics\/Train\/Train.csv')\n\n# test data\ntest = pd.read_csv('\/kaggle\/input\/janatahack-healthcare-analytics\/Test.csv')\n\n\n\n# first and second format provides people with an instantaneous health score\n\n#contains details about people who attended health camp of first format\nfirst_camp = pd.read_csv('\/kaggle\/input\/janatahack-healthcare-analytics\/Train\/First_Health_Camp_Attended.csv',\n                         usecols=['Patient_ID', 'Health_Camp_ID', 'Donation', 'Health_Score'])\n\n\n#contains details about people who attended health camp of second format.\nsecond_camp = pd.read_csv('\/kaggle\/input\/janatahack-healthcare-analytics\/Train\/Second_Health_Camp_Attended.csv')\n\n\n#third format provides information about several health issues through various awareness stalls\n#contains details about people who attended health camp of third format\nthird_camp = pd.read_csv('\/kaggle\/input\/janatahack-healthcare-analytics\/Train\/Third_Health_Camp_Attended.csv')\n\n\n\n#details of each camp\nhealthcamp_details = pd.read_csv('\/kaggle\/input\/janatahack-healthcare-analytics\/Train\/Health_Camp_Detail.csv')\n\n#Patient profile details \npatient_details = pd.read_csv('\/kaggle\/input\/janatahack-healthcare-analytics\/Train\/Patient_Profile.csv', na_values=[\"None\"])","90a026d3":"train.head()\ntrain.isnull().sum()\ntrain.shape\nprint('-----------'*10)\ntest.head()\ntest.isnull().sum()\ntest.shape","853c1a77":"healthcamp_details.head()\nhealthcamp_details.isnull().sum()\nhealthcamp_details.shape\n\nprint('-------'*10)\npatient_details.head()\npatient_details.isnull().sum()\npatient_details.shape\n\n","e2ced10b":"first_camp.head()\nfirst_camp.isnull().sum()\nfirst_camp.shape\n\nprint('-----SecondOne------'*5)\n\n\nsecond_camp.head()\nsecond_camp.isnull().sum()\nsecond_camp.shape\n\nprint('-----ThirdOne------'*5)\n\n\nthird_camp.head()\nthird_camp.isnull().sum()\nthird_camp.shape\n","f5dd8175":"# train data\ntrain.head()\nprint('Unique number of patients {}'.format(len(train['Patient_ID'].unique())))","837b558c":"print('Unique number of Health_camps {}'.format(len(train['Health_Camp_ID'].unique())))","03fa9e7e":"# figure out the relation between Patients and Health_Camp\n\ntrain.groupby(['Patient_ID'])['Health_Camp_ID'].count().unique()","cbffb2d4":"\ngrouped_df = train.groupby('Patient_ID').agg('size').reset_index()\ngrouped_df.columns = [\"Patient_ID\", \"Number_of_entries_per_person\"]\ngrouped_df = grouped_df.groupby('Number_of_entries_per_person').agg('size').reset_index()\ngrouped_df.columns = [\"Number_of_entries_per_person\", \"Count\"]\nplt.bar(grouped_df.Number_of_entries_per_person, grouped_df.Count, color='r')\nplt.show()\ngrouped_df","d528812b":"print (\"Number of Health Camp ID in the train dataset : \", len(train.Health_Camp_ID.unique()))","875f2fe1":"plt.subplots(figsize=(8,8))\ngrouped_df = train.groupby(\"Health_Camp_ID\").agg('size').reset_index()\ngrouped_df.columns = [\"Health_Camp_ID\", \"Count\"]\ngrouped_df = grouped_df.sort_values('Count', ascending=False).reset_index(drop=True)\nplt.bar(range(len(grouped_df.Health_Camp_ID)), grouped_df.Count, tick_label=grouped_df.Health_Camp_ID, color='r')\nplt.show()\ngrouped_df\n","ac2cd8ff":"# Let us take a look at the top few rows\ntest.head()\n\n\n# Number of unique persons present in the test\nprint(\"Number of unique patients in the test : \", len(test.Patient_ID.unique()))","ecac10a4":"grouped_df = test.groupby('Patient_ID').agg('size').reset_index()\ngrouped_df.columns = [\"Patient_ID\", \"Number_of_entries_per_person\"]\ngrouped_df = grouped_df.groupby('Number_of_entries_per_person').agg('size').reset_index()\ngrouped_df.columns = [\"Number_of_entries_per_person\", \"Count\"]\nplt.bar(grouped_df.Number_of_entries_per_person, grouped_df.Count, color='r')\nplt.show()\ngrouped_df","4b284b48":"print (\"Number of common patients between train and test : \",len(set(train.Patient_ID).intersection(test.Patient_ID)))\nprint (\"Number of common health camps between train and test :\", len(set(train.Health_Camp_ID).intersection(test.Health_Camp_ID)))","703dcf20":"# filling missing values in patients\n\npatient_details.isnull().sum()\n","993c1d47":"# here we fill all the missing values with -1, a very simple missing imputation strategy.\n# Can check with value -999 and see wheather score improves or not.\npatient_details.fillna(-1)","05c81e1f":"first_camp.head(1)\nsecond_camp.head(1)\nthird_camp.head(1)","2a754912":"## Get only the necessary columns and rename them for concatenating ##\ncol_names = [['Patient_ID','Health_Camp_ID','Outcome']]\nfirst_camp = first_camp[['Patient_ID','Health_Camp_ID','Health_Score']]\nfirst_camp.columns = col_names\nsecond_camp = second_camp[['Patient_ID','Health_Camp_ID','Health Score']]\nsecond_camp.columns = col_names\nthird_camp = third_camp[['Patient_ID','Health_Camp_ID','Number_of_stall_visited']]\nthird_camp = third_camp[third_camp['Number_of_stall_visited']>0]\nthird_camp.columns = col_names","bb01108d":"## concat all the three camps ##\nall_camps = pd.concat([first_camp, second_camp, third_camp])\nall_camps.head()","f0adcb74":"# About \n\nCongratulations \u2013 you have been hired as Chief Data Scientist of MedCamp \u2013 a not for profit organization dedicated in making health conditions for working professionals better. MedCamp was started because the founders saw their family suffer due to bad work life balance and neglected health.\n\nMedCamp organizes health camps in several cities with low work life balance. They reach out to working people and ask them to register for these health camps. For those who attend, MedCamp provides them facility to undergo health checks or increase awareness by visiting various stalls (depending on the format of camp).\n\nMedCamp has conducted 65 such events over a period of 4 years and they see a high drop off between \u201cRegistration\u201d and Number of people taking tests at the Camps. In last 4 years, they have stored data of ~110,000 registrations they have done.\n\nOne of the huge costs in arranging these camps is the amount of inventory you need to carry. If you carry more than required inventory, you incur unnecessarily high costs. On the other hand, if you carry less than required inventory for conducting these medical checks, people end up having bad experience.\n\n \n  \n## Process:\n \nMedCamp employees \/ volunteers reach out to people and drive registrations.\nDuring the camp, People who \u201cShowUp\u201d either undergo the medical tests or visit stalls depending on the format of healthcamp.\n \n\n### Note:\n\nSince this is a completely voluntary activity for the working professionals, MedCamp usually has little profile information about these people.\nFor a few camps, there was hardware failure, so some information about date and time of registration is lost.\nMedCamp runs 3 formats of these camps. The first and second format provides people with an instantaneous health score. The third format provides information about several health issues through various awareness stalls.\n \n\n### Favorable outcome:\nFor the first 2 formats, a favourable outcome is defined as getting a health_score, while in the third format it is defined as visiting at least a stall.\nYou need to predict the chances (probability) of having a ```favourable outcome```.","0661177c":"If you check leaderboard my current ranking is 14, So instead of giving you a complete notebook i gave you this version because\n\n- Let's learn through experiementation.\n- Learn together and earn together\n\nNow i want to know from you what do you think, how this problem should approached further let me know in the comment section.\n\n<center>................**Waiting for your response**...................<\/center>\n<br>\n\n<center><img src='https:\/\/clientinsight.ca\/wp-content\/uploads\/2018\/03\/waiting-for-phone.jpg' height=400 width=500\/><\/center>\n\n\nIf you have any doubts till here let me know in the comment section too...\n\n### Come to leaderboard i m waiting for you.","3d6757a6":"For ```second_camp``` Health_Score column is difined in a different way let's first replace the name of column.","5f8bef6f":"### Imputing missing values","5482506b":"## Let's Begin with the Hackathon\n\nAs the competition progresses and I apply multiple methodologies and based on those we will learn together. \n\nWithout violating the competitive spirit, will not directly publish my solution but will provide you some hints if you implement them in your notebook might get better results.\n\nSo keep your eye on given hints.","e9c03a59":"Creating the predictor variable i.e ```The outcome variable```","1ed832e6":"```concat()``` all three camps data together.","f0e7980f":"Now let us see the distribution just like train set","fc7638d8":"8460 patients are common between train and test","4024b5c2":"## Test data exploration","b5f611a2":"So 15,714 patients have 1 entry, 5878 have 2 entries and so on.\n\n- Now let us look at the number of health camps in train data and their distribution","6bf43f04":"As we can se there are multiple data files are available fore this competition. So probably you gussed it right various data merging technique gonna come in action.\n\n#### I suggest you to check this [notebook ](https:\/\/www.kaggle.com\/vin1234\/merge-join-and-concat-with-pandas)to understand better all data merging techniques better.","022bc2d8":"Here what we do is print out the data in combinations so we got better idea about each of the dataset.","36a241d9":"So the number of patients per medical camp in train set ranges from 6543 for campid=6543 to 44 for campid=6558","24288734":"<center><img src='https:\/\/raw.githubusercontent.com\/AIVenture0\/-JanataHack---Healthcare-Analytics\/master\/img.png'\/><\/center>","e660c445":"## Creating the outcome variable.\n\n--- In progress","4f3fee88":"## Evaluation Metric\nThe evaluation metric for this hackathon is ```ROC AUC Score```.","2fa3260c":"Before delving in to the competition my simple rule is to visulize the data and try to learn what data says.","81d00561":"### Data concatination for all camps\n","d7d7893b":"## Let's read all the data files ","e5612121":"# <center> Healthcare Analytics<\/center>","cd99d487":"## Data preparation","10bb8390":"Number of common patients and Health camps between train and test set","ded9dd54":"### Data Description \n\n```train.zip``` contains 6 different csv files apart from the data dictionary as described below:\n\nHealth_Camp_Detail.csv \u2013 File containing Health_Camp_Id, Camp_Start_Date, Camp_End_Date and Category details of each camp.\n\n```Train.csv``` \u2013 File containing registration details for all the test camps. This includes Patient_ID, Health_Camp_ID, Registration_Date and a few anonymized variables as on registration date.\n\n```Patient_Profile.csv``` \u2013 This file contains Patient profile details like Patient_ID, Online_Follower, Social media details, Income, Education, Age, First_Interaction_Date, City_Type and Employer_Category\n\n```First_Health_Camp_Attended.csv``` \u2013 This file contains details about people who attended health camp of first format. This includes Donation (amount) & Health_Score of the person.\n\n```Second_Health_Camp_Attended.csv``` - This file contains details about people who attended health camp of second format. This includes Health_Score of the person.\n\n```Third_Health_Camp_Attended.csv``` - This file contains details about people who attended health camp of third format. This includes Number_of_stall_visited & Last_Stall_Visited_Number.\n\n\n\n### Test Data\n\n```Test.csv``` \u2013 File containing registration details for all the camps done after 1st April 2006. This includes Patient_ID, Health_Camp_ID, Registration_Date and a few anonymized variables as on registration date. Participant should make predictions for these patient camp combinations\n\n\n\n### sample_submission.csv\n\n```Patient_ID```: Unique Identifier for each patient. This ID is not sequential in nature and can not be used in modeling\n\n```Health_Camp_ID```: Unique Identifier for each camp. This ID is not sequential in nature and can not be used in modeling\n\n```Outcome```: Predicted probability for having a favourable outcome depending on the format","304e443e":"### Hopefully this all will get you started with the competition. Stay tuned with the notebook very soon will upload further code without ```violate competition laws```.","efb2a7fd":"## Data Visualization"}}