{"cell_type":{"8132f33c":"code","b3e487da":"code","b42ec9c0":"code","d2166b39":"code","0f8d8643":"code","37338cc0":"code","3bad3400":"code","84391dcf":"code","29bae4b6":"code","f5ef7886":"code","9299530c":"code","1fb3847a":"code","6faa0b48":"code","bf67c860":"code","74b2f0f7":"code","b1b39924":"code","797e20e4":"code","e565b5c6":"code","5b95107b":"code","c298b6fb":"markdown","8f432328":"markdown","d96e32f8":"markdown","f5a50faf":"markdown","5dce39e0":"markdown","23a3fb79":"markdown","18394b73":"markdown","1519384d":"markdown","efa32302":"markdown","4ede1b3e":"markdown","65c001b1":"markdown","34db2dff":"markdown","3763c0af":"markdown","87f8f4f4":"markdown"},"source":{"8132f33c":"import numpy as np \nimport pandas as pd \n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))","b3e487da":"import scipy\nimport numpy as np\nimport matplotlib \nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport sklearn\nimport seaborn as sns\nimport warnings\n\nsns.set_style(\"whitegrid\")\n%matplotlib inline","b42ec9c0":"import plotly.offline as pyo\npyo.init_notebook_mode()\nfrom plotly.graph_objs import *\nimport plotly.graph_objs as go","d2166b39":"import json\n#__________________\ndef load_tmdb_movies(path):\n    df = pd.read_csv(path)\n    df['release_date'] = pd.to_datetime(df['release_date']).apply(lambda x: x.date())\n    json_columns = ['genres', 'keywords', 'production_countries', 'production_companies', 'spoken_languages']\n    for column in json_columns:\n        df[column] = df[column].apply(json.loads)\n    return df\n#____________________________\ndef load_tmdb_credits(path):\n    df = pd.read_csv(path)\n    json_columns = ['cast', 'crew']\n    for column in json_columns:\n        df[column] = df[column].apply(json.loads)\n    return df\n#_______________________________________\ndef safe_access(container, index_values):\n    result = container\n    try:\n        for idx in index_values:\n            result = result[idx]\n        return result\n    except IndexError or KeyError:\n        return pd.np.nan\n#_______________________________________\nLOST_COLUMNS = [\n    'actor_1_facebook_likes',\n    'actor_2_facebook_likes',\n    'actor_3_facebook_likes',\n    'aspect_ratio',\n    'cast_total_facebook_likes',\n    'color',\n    'content_rating',\n    'director_facebook_likes',\n    'facenumber_in_poster',\n    'movie_facebook_likes',\n    'movie_imdb_link',\n    'num_critic_for_reviews',\n    'num_user_for_reviews']\n#_______________________________________\nTMDB_TO_IMDB_SIMPLE_EQUIVALENCIES = {\n    'budget': 'budget',\n    'genres': 'genres',\n    'revenue': 'gross',\n    'title': 'movie_title',\n    'runtime': 'duration',\n    'original_language': 'language',  \n    'keywords': 'plot_keywords',\n    'vote_count': 'num_voted_users'}\n#_______________________________________     \nIMDB_COLUMNS_TO_REMAP = {'imdb_score': 'vote_average'}\n#_______________________________________\ndef get_director(crew_data):\n    directors = [x['name'] for x in crew_data if x['job'] == 'Director']\n    return safe_access(directors, [0])\n#_______________________________________\ndef pipe_flatten_names(keywords):\n    return '|'.join([x['name'] for x in keywords])\n#_______________________________________\ndef convert_to_original_format(movies, credits):\n    tmdb_movies = movies.copy()\n    tmdb_movies.rename(columns=TMDB_TO_IMDB_SIMPLE_EQUIVALENCIES, inplace=True)\n    tmdb_movies['title_year'] = pd.to_datetime(tmdb_movies['release_date']).apply(lambda x: x.year)\n    tmdb_movies['country'] = tmdb_movies['production_countries'].apply(lambda x: safe_access(x, [0, 'name']))\n    tmdb_movies['language'] = tmdb_movies['spoken_languages'].apply(lambda x: safe_access(x, [0, 'name']))\n    tmdb_movies['director_name'] = credits['crew'].apply(get_director)\n    tmdb_movies['actor_1_name'] = credits['cast'].apply(lambda x: safe_access(x, [1, 'name']))\n    tmdb_movies['actor_2_name'] = credits['cast'].apply(lambda x: safe_access(x, [2, 'name']))\n    tmdb_movies['actor_3_name'] = credits['cast'].apply(lambda x: safe_access(x, [3, 'name']))\n    tmdb_movies['actor_4_name'] = credits['cast'].apply(lambda x: safe_access(x, [4, 'name']))\n    tmdb_movies['actor_5_name'] = credits['cast'].apply(lambda x: safe_access(x, [5, 'name']))\n    tmdb_movies['genres'] = tmdb_movies['genres'].apply(pipe_flatten_names)\n    tmdb_movies['plot_keywords'] = tmdb_movies['plot_keywords'].apply(pipe_flatten_names)\n    return tmdb_movies","0f8d8643":"credits = load_tmdb_credits(\"..\/input\/tmdb_5000_credits.csv\")\nmovies = load_tmdb_movies(\"..\/input\/tmdb_5000_movies.csv\")\nmovie = convert_to_original_format(movies, credits)","37338cc0":"movie.head()","3bad3400":"movie.describe()","84391dcf":"corr = movie.select_dtypes(include = ['float64', 'int64']).iloc[:, 1:].corr()\nplt.figure(figsize=(16, 16))\nsns.heatmap(corr, vmax=1, square=True)\nplt.show()","29bae4b6":"actor = movie[['actor_1_name', 'actor_2_name', 'actor_3_name', 'actor_4_name', 'actor_5_name', 'gross', 'vote_average', 'num_voted_users', 'popularity']]\nactor.head()","f5ef7886":"actor_list = pd.melt(actor, id_vars=['vote_average', 'num_voted_users'], value_vars=['actor_1_name', 'actor_2_name', 'actor_3_name', 'actor_4_name', 'actor_5_name'],\n                    var_name='variable', value_name='actor_name')\nactor_list.head()","9299530c":"actor_score = (actor_list['vote_average'] * actor_list['num_voted_users']).groupby(actor_list['actor_name']).sum()","1fb3847a":"actor_list_gross = pd.melt(actor, id_vars=['gross'], value_vars=['actor_1_name', 'actor_2_name', 'actor_3_name', 'actor_4_name', 'actor_5_name'],\n                    var_name='variable', value_name='actor_name')\nactor_score_gross= actor_list_gross['gross'].groupby(actor_list_gross['actor_name']).sum()","6faa0b48":"df = pd.concat([actor_score, actor_score_gross], axis=1)\ndf.columns = [['vote_average', 'gross']]","bf67c860":"warnings.filterwarnings(\"ignore\")\n\nartemis_actors = ['Kenneth Choi', 'Sterling K. Brown', 'Jeff Goldblum', 'Zachary Quinto', \n               'Charlie Day', 'Dave Bautista', 'Sofia Boutella', 'Brian Tyree Henry']\n\na = df.loc[[i for i in df.index if i not in artemis_actors], :]\nb = df.loc[artemis_actors, :]\ndf = pd.concat([a, b]).dropna()","74b2f0f7":"def quality_graph(df):\n    edge_trace = Scatter(\n    x=[],\n    y=[],\n    line = Line(width=0.5,color='#888'),\n    hoverinfo = 'none',\n    mode = 'lines')\n\n    node_trace = Scatter(\n        x=[],\n        y=[],\n        text=[],\n        mode='markers',\n        hoverinfo='text',\n        marker=Marker(\n            colorscale='YlGnBu',\n            reversescale=True,\n            color=[],\n            size=10,\n            line=dict(width=2)))\n    \n    for ind, col in df.iterrows():\n        node_trace['x'] += (col['gross'].values[0], )\n        node_trace['y'] += (col['vote_average'].values[0], )\n        node_trace['text'] += (ind,)\n        if ind in artemis_actors:\n            node_trace['marker']['color'] += (10, )\n        else:\n            node_trace['marker']['color'] += (1, )\n        \n    fig = Figure(data=Data([node_trace]),\n                 layout=Layout(\n                    title='<br>Quality of actors',\n                    titlefont=dict(size=16),\n                    showlegend=False,\n                    hovermode='closest',\n                    margin=dict(b=20,l=5,r=5,t=40),\n                    annotations=[ dict(\n                        showarrow=False,\n                        xref=\"paper\", yref=\"paper\",\n                        x=0.005, y=-0.002 ) ],\n                    xaxis=XAxis(title='Sum Gross', showgrid=True, zeroline=False, showticklabels=True),\n                    yaxis=YAxis(title='IMDB score x Users count', showgrid=True, zeroline=False, showticklabels=True)))    \n    return fig","b1b39924":"warnings.filterwarnings(\"ignore\")\n\nfig = quality_graph(df)\npyo.iplot(fig)","797e20e4":"def quality_graph_artemis_actors(df):\n    edge_trace = Scatter(\n    x=[],\n    y=[],\n    line = Line(width=0.5,color='#888'),\n    hoverinfo = 'none',\n    mode = 'lines')\n\n    node_trace = Scatter(\n        x=[],\n        y=[],\n        text=[],\n        mode='markers',\n        hoverinfo='text',\n        marker=Marker(\n            colorscale='YlGnBu',\n            reversescale=True,\n            color=[],\n            size=10,\n            line=dict(width=2)))\n    \n    for ind, col in df.iterrows():\n        if ind in artemis_actors:\n            node_trace['x'] += (col['gross'].values[0], )\n            node_trace['y'] += (col['vote_average'].values[0], )\n            node_trace['text'] += (ind,)\n            node_trace['marker']['color'] += (10, )\n                \n        \n    fig = Figure(data=Data([node_trace]),\n                 layout=Layout(\n                    title='<br>Quality of actors in Hotel Artemis',\n                    titlefont=dict(size=16),\n                    showlegend=False,\n                    hovermode='closest',\n                    margin=dict(b=20,l=5,r=5,t=40),\n                    annotations=[ dict(\n                        showarrow=False,\n                        xref=\"paper\", yref=\"paper\",\n                        x=0.005, y=-0.002 ) ],\n                    xaxis=XAxis(title='Sum Gross', showgrid=True, zeroline=False, showticklabels=True),\n                    yaxis=YAxis(title='IMDB score x Users count', showgrid=True, zeroline=False, showticklabels=True)))\n    \n    return fig","e565b5c6":"warnings.filterwarnings(\"ignore\")\n\nfig = quality_graph_artemis_actors(df)\npyo.iplot(fig)","5b95107b":"from sklearn.metrics.pairwise import pairwise_distances_argmin\nfrom sklearn.cluster import KMeans\n\nk_means = KMeans(init='k-means++', n_clusters=2, n_init=10)\nk_means.fit(df)\ncolors = ['#4EACC5', '#FF9C34']\ntitles = ['NoNames', 'Popular Actors']\n\n\nk_means_cluster_centers = np.sort(k_means.cluster_centers_, axis=0)\nk_means_labels = pairwise_distances_argmin(df, k_means_cluster_centers)\n\nfor k, col, title in zip(range(len(k_means.cluster_centers_)), colors, titles):\n    my_members = k_means_labels == k\n    cluster_center = k_means_cluster_centers[k]\n    kmeans1 = go.Scatter(x=df.iloc[my_members, 1], y=df.iloc[my_members, 0],\n                        showlegend=False, \n                         text = df.index[my_members],\n                         mode='markers',         \n                         marker=Marker(\n                                    colorscale='YlGnBu',\n                                    size=5,\n                                    line=dict(width=2)))\n    kmeans2 = go.Scatter(x=[cluster_center[1]], y=[cluster_center[0]],\n                         showlegend=False,\n                         mode='markers', marker=dict(color=col, size=14,\n                                                    line=dict(color='black',\n                                                              width=1)))\n    \n    actors_ = list(set(artemis_actors).intersection(df.index[my_members]))\n    print(actors_, ' are ', title)\n    actors =  go.Scatter(x=[x[0] for x in df.loc[actors_, 'gross'].values],\n                          y=[x[0] for x in df.loc[actors_, 'vote_average'].values],\n                         showlegend=False, \n                         text = actors_,\n                         mode='markers', \n                         marker=dict(color='red', size=14))\n    layout = dict(title = title)\n    pyo.iplot(dict(data=[kmeans1, kmeans2, actors], layout=layout))","c298b6fb":"Let's see clusters of \"popular\" actors and \"nonames\":\n\nI've used K-means algorithm for 2 clusters: https:\/\/en.wikipedia.org\/wiki\/K-means_clustering\n\nRed points are actors from Hotel Artemis","8f432328":"About a week ago the movie Hotel Artemis have launched in Russian cinemas. My colleagues described it as \"super-cool premiere\", but I haven't been so optimistic about this movie, because of mediocre director and mostly unknown cast, imho of course. So when I claimed this, I received a lot of opinions different from my point of view. \n\nIn this notebook,\u00a0I have tried to research actors space and clusterize it to \"popular actors\" cluster and \"no-names actors\" cluster. And of course I have tried to prove that the majority of Hotel Artemis's cast are \"no-names actors\".","d96e32f8":"# Measurement of actor's quality","f5a50faf":"## 1. Preprocessing\n\nI have used functions taken from [Sohier's code](https:\/\/www.kaggle.com\/sohier\/getting-imdb-kernels-working-with-tmdb-data) to change data structure:","5dce39e0":"### Conclusion\n\nThis approach allows to define 2 clusters of actors: \"nonames\" and \"popular\".\n\nThere are 2 popular actors in Hotel Artemis: Jeff Goldblum and Zachary Quinto.\n\nAnd a lot of no-names: 'Kenneth Choi', 'Sterling K. Brown', 'Charlie Day', 'Dave Bautista', 'Sofia Boutella', 'Brian Tyree Henry'. Most of them are not presented in dataset, to be honest.","23a3fb79":"Let's load the data and convert it to original structure","18394b73":"So lets take a look a little bit closer at actors from Hotel Artemis movie","1519384d":"I've decided to use top-5 actors from each movie in my research. I think it's an appropriate measure to define actors popularity good enough.\n\nFirst metric I've used was multiplication of IMDB score and number of users who voted and summarizing it for each movie of each actor. In my opinion it's a good idea to use sum among actor's movies instead of mean metric. And of course it reflects quality of actor's film. \n\nSecond metric was aggregated gross of actor's movies. It reflects popularity of actor and his movies (not always corellates with quality)","efa32302":"Summary Statistics","4ede1b3e":"For research I've used a dataset of movies from IMDB which contains data of approximately 5000 movies: https:\/\/www.kaggle.com\/tmdb\/tmdb-movie-metadata","65c001b1":"# Actor Aggregate Imdb Score and Gross of movies","34db2dff":"Correlations Between Attributes","3763c0af":"# **Actors clusterization**\n*Artem Panin (August 2018)*","87f8f4f4":"Lets make scatter plots and define clusters of \"popular\" actors and \"no-name\" actors. \n\nOn the graph below you can see actors from Hotel Artemis movie (blue markers) and other actors (white markers). \n\nX-axis responds to Gross metrics, Y-axis responds to IMDB scores metrics. \n\nSo, the bigger this metrics the more popular actor is\n\nThe list of Artemis actors is 'Kenneth Choi', 'Sterling K. Brown', 'Jeff Goldblum', 'Zachary Quinto', 'Charlie Day', 'Dave Bautista', 'Sofia Boutella', 'Brian Tyree Henry'"}}