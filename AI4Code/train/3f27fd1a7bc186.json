{"cell_type":{"d2fa74d6":"code","ca7a9480":"code","98d5adba":"code","4ae912bf":"code","093f92ad":"code","81543a3d":"code","f77580c6":"code","d2d703df":"code","1cce7ddf":"code","98175239":"code","e2041934":"code","80a8b09b":"code","8ba48c06":"code","4b91a142":"code","2653b6d5":"code","3c40607c":"code","4f94e4a3":"code","43f769bd":"code","6d54793a":"markdown","ac2ba103":"markdown","ffb7a920":"markdown","662add55":"markdown","c0bcae16":"markdown","840d533f":"markdown","f0e9411c":"markdown","0800d730":"markdown","57f564c9":"markdown","5447667f":"markdown","2e97e883":"markdown","33fc14a8":"markdown","d4d3e88d":"markdown","3a6111e7":"markdown","b4e1343e":"markdown","81debbcd":"markdown","60c376e0":"markdown","96c08ed6":"markdown"},"source":{"d2fa74d6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt \nimport seaborn as sns\nsns.set_palette('dark')\n\nimport datetime\n\nimport os\n\nimport folium\nfrom folium import * # This is the library for interactively visualizing data on the map","ca7a9480":"# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nfile_list = []\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","98d5adba":"measurement_summary = pd.read_csv('\/kaggle\/input\/air-pollution-in-seoul\/AirPollutionSeoul\/Measurement_summary.csv')\nmeasurement_item_info = pd.read_csv('\/kaggle\/input\/air-pollution-in-seoul\/AirPollutionSeoul\/Original Data\/Measurement_item_info.csv')\nmeasurement_info = pd.read_csv('\/kaggle\/input\/air-pollution-in-seoul\/AirPollutionSeoul\/Original Data\/Measurement_info.csv')\nmeasurement_station_info = pd.read_csv('\/kaggle\/input\/air-pollution-in-seoul\/AirPollutionSeoul\/Original Data\/Measurement_station_info.csv')","4ae912bf":"print('Measurement Item info shape: {}'.format(measurement_item_info.shape))\nmeasurement_item_info.head()","093f92ad":"print('Measurement Station info shape: {}'.format(measurement_station_info.shape))\nmeasurement_station_info.head()","81543a3d":"print('Measurement Summary shape: {}'.format(measurement_summary.shape))\nmeasurement_summary.head()","f77580c6":"print('Measurement Info shape: {}'.format(measurement_info.shape))\nmeasurement_info.head()","d2d703df":"pollutants = measurement_item_info['Item name'].tolist()\nprint(pollutants)","1cce7ddf":"measurement_station_info.set_index('Station code', inplace=True)","98175239":"for p in pollutants:\n    measurement_summary[measurement_summary[p] < 0] = 0","e2041934":"station_mean = measurement_summary.groupby(['Station code']).mean()\nstation_mean.drop(['Latitude', 'Longitude'], axis=1, inplace=True)\nstation_mean = station_mean.drop(station_mean.index[0])","80a8b09b":"pollutant_class = measurement_item_info.drop(['Item code', 'Unit of measurement'], axis=1).set_index('Item name')\npollutant_class.head(10)","8ba48c06":"def classifier(measurements, info, color=True):\n    classified = pd.DataFrame(columns = measurements.columns)\n    \n    # classification to use\n    if color:\n        description = ['blue', 'green', 'yellow', 'red']\n    else:\n        description = ['Good', 'Normal', 'Bad', 'Very Bad']\n    \n    for i in measurements.index:\n        for p in info.index:\n            if measurements.loc[i, p] <= info.loc[p,'Good(Blue)']:\n                classified.loc[i, p] = description[0]\n            elif measurements.loc[i, p] <= info.loc[p, 'Normal(Green)']:\n                classified.loc[i, p] = description[1]\n            elif measurements.loc[i, p] <= info.loc[p, 'Bad(Yellow)']:\n                classified.loc[i, p] = description[2]\n            else:\n                classified.loc[i, p] = description[3]\n    return classified\n\nmeans_classified = classifier(station_mean,pollutant_class)","4b91a142":"measurement_summary['Measurement date'] = pd.to_datetime(measurement_summary['Measurement date'])\nmonthly_mean = measurement_summary.groupby(measurement_summary['Measurement date'].dt.month).mean()\nmonthly_mean.drop(['Station code', 'Latitude', 'Longitude'], axis=1, inplace=True)\nmonthly_mean.rename_axis('Month', inplace=True)\nmonthly_mean.head(12)","2653b6d5":"# chart each one of the means per month\n\nfig, axs = plt.subplots(2,3, figsize=(12,8), tight_layout=True)\n\nsns.barplot(monthly_mean.index, monthly_mean['SO2'], ax=axs[0,0]).set_title('SO2')\nsns.barplot(monthly_mean.index, monthly_mean['NO2'], ax=axs[0,1]).set_title('NO2')\nsns.barplot(monthly_mean.index, monthly_mean['CO'], ax=axs[0,2]).set_title('CO')\nsns.barplot(monthly_mean.index, monthly_mean['O3'], ax=axs[1,0]).set_title('O3')\nsns.barplot(monthly_mean.index, monthly_mean['PM10'], ax=axs[1,1]).set_title('PM10')\nsns.barplot(monthly_mean.index, monthly_mean['PM2.5'], ax=axs[1,2]).set_title('PM2.5')\n\nplt.show()","3c40607c":"# This creates the map object\nm = folium.Map(\n    location=[37.541, 126.981], # center of where the map initializes\n    tiles='Stamen Toner', # the style used for the map (defaults to OSM)\n    zoom_start=12) # the initial zoom level\n\n# Diplay the map\nm","4f94e4a3":"means_classified = classifier(station_mean,pollutant_class)","43f769bd":"def pollutant_map(pollutant, measurements, station_info):\n     \n    # takes an input of a pollutant reference sheet, classified measurement data per station, and measurement\n    # station information and outputs a Foilum Map with one layer for each pollutant type\n    \n    \n    #initialize the folium map\n    m = folium.Map(\n    location=[37.541, 126.981], \n    tiles='Stamen Toner',\n    zoom_start=11)\n\n    for p in pollutants:\n        feature_group = FeatureGroup(name=p, show=False)\n        \n        for i in means_classified.index:\n            feature_group.add_child(Marker(station_info.loc[i, ['Latitude', 'Longitude']],\n                         icon=folium.Icon(color=measurements.loc[i, p],\n                                          icon='warning',\n                                          prefix='fa')))\n            m.add_child(feature_group)\n            \n    m.add_child(folium.map.LayerControl())\n    m.save('pollutant_map.html')\n\n    return m\n\npollutant_map(pollutant_class, means_classified, measurement_station_info)","6d54793a":"You can find the `.html` output file in the working directory for this notebook.\n\nAfter viewing these maps, the mean measurements for each station are all within Good or Normal ranges (which should be expected). It might be more interesting to look at the outliers in these measurements, and see how each section of the city is affected","ac2ba103":"## Mapping the Data","ffb7a920":"### Mapping the means\nWe'll start by mapping the mean value for each pollutant, that we have calculated in the `station_means` DataFrame. The first thing we need to do is run our data throught he classifier function created earlier.","662add55":"## Data Preprocessing","c0bcae16":"## Mapping the Outliers (coming soon!)\nI'll be following up on this quick overview using folium to map some of the outlying measurements, and provide some data visualization too. Stay tuned!","840d533f":"#### Using the Pandas' `read_csv()` function to create DataFrames of the CSV's.","f0e9411c":"From the `.head()` we can see that some measurements of PPM are coming out negative. This likely indicates an error or a distortion of the spectral baseline. We'll go ahead and set all of these to NaN for now.","0800d730":"Next, we'll get the mean for each pollutant type per station","57f564c9":"## Introduction\n<img align=\"right\" width=\"100\" src=\"https:\/\/python-visualization.github.io\/folium\/_images\/folium_logo.jpg\">\n\nThis is meant to be an exploratory dive into visualizing data on maps using Folium. I referenced this great [introduction to folium](https:\/\/www.kaggle.com\/daveianhickey\/how-to-folium-for-maps-heatmaps-time-data) for a lot of the basic principles. More information can be found in the [Folium Documentation](https:\/\/python-visualization.github.io\/folium\/). Thanks to the creator of this great data set, and [their excellent kernel](https:\/\/www.kaggle.com\/bappekim\/visualizing-the-location-of-station-using-folium) that outlines some of the Folium methods. ","5447667f":"### Building a classifier function\nBuilding a quick function that returns either the string descriptor of the pollutant (`Good`, `Bad`, etc) or the corresponding color","2e97e883":"## Data Visualization\nNow that we done some precursory processing to our data, time to start visualizing!","33fc14a8":"Now that we've imported all the CSV data in to Panda's DataFrames, we can use the `.head()` function to get a sense of the type of information contained in each","d4d3e88d":"First, I'm going to set the station code as the index for the `measurement_station_info` DataFrame, so we can easily use each station code to index into the DataFrame later.\n","3a6111e7":"### Import and view Data","b4e1343e":"For the purpose of visualizing the air quality in the Folium Map, we're going to create a \"Pollutant Class\" DataFrame containing the pollutant name and threshold for what is considered `Good`, `Normal`, `Bad`, and `Very Bad`\n","81debbcd":"### Import Libraries","60c376e0":"#### Here we'll use the classified pollutants to create a map displaying pins based on the mean measurement of that pollutant per station","96c08ed6":"### Setting up the Folium Map\nIt's time to get that data onto a map! First, We'll initialize a blank map centered over Seoul"}}