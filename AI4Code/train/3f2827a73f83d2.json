{"cell_type":{"670001be":"code","d3013b73":"code","18efdd51":"code","73e786ff":"code","7c0cbaa9":"code","56fe9bb9":"code","ed7ac800":"code","f9da2b0a":"code","da159847":"code","c571f0a9":"code","fc7c6f92":"code","de033099":"code","7577c9d8":"code","315fcd1d":"code","c67841eb":"code","9ba26b5b":"code","2d6e75a7":"code","b645e81d":"code","1717803e":"code","a87d4644":"code","68887627":"code","6cdf9e8d":"code","5b26173c":"code","9bff0be9":"markdown"},"source":{"670001be":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d3013b73":"import tensorflow as tf\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\ndata = pd.read_csv(\"..\/input\/temperature-on-top-of-kathmandu-airport\/KTM AIRPORT.csv\")\ndata.set_index(\"DATE\",inplace=True)\ndata.tail(10)","18efdd51":"data.head(5)","73e786ff":"data.isnull().sum().plot.barh()","7c0cbaa9":"#lets drop TMIN and TMAX\n\ndata['TAVG'] = (data['TMAX']+ data['TMIN'])\/2\ndata.head()","56fe9bb9":"data.drop(['STATION','NAME','PRCP','SNWD'],axis=1,inplace=True)\ndata.head()","ed7ac800":"data['TAVG'].isnull().sum()","f9da2b0a":"data.dropna(inplace=True)\ndata.head()","da159847":"#lets turn the temperature to celsius\ndata['TAVG'] = data['TAVG'].apply(lambda x: round((x - 32) * 5\/9),2)\ndata['TMAX'] = data['TMAX'].apply(lambda x: round((x - 32) * 5\/9),2) \ndata['TMIN'] = data['TMIN'].apply(lambda x: round((x - 32) * 5\/9),2)","c571f0a9":"data.head()","fc7c6f92":"data.index","de033099":"data.isnull().sum()","7577c9d8":"plt.figure(figsize=(20,10))\nplt.style.use(\"fivethirtyeight\")\ny=list( range( 0,len(data['TAVG'][-730:]) ) )\nplt.plot(y, data['TAVG'][-730:], label=\"Average Temperature\")\nplt.plot(y, data['TMAX'][-730:], label=\"Maximum Temperature\")\nplt.plot(y, data['TMIN'][-730:], label=\"Minimum Temperature\")\nplt.legend(loc=\"upper left\")\nplt.title(\"Temperature in Kathmandu\")\nplt.xlabel(\"Temperature in Degree Celsius\")\nplt.xlabel(\"X Days Ago\")\nplt.show()","315fcd1d":"data.describe()","c67841eb":"data.index.shape","9ba26b5b":"X=[]\nfor x in data.index:\n    X.append(x.replace(\"-\",\"\"))\n    \nX[1:6]","2d6e75a7":"from sklearn.preprocessing import MinMaxScaler\nX=np.array(X)\n\nminmax = MinMaxScaler(feature_range=(0,1))\nminmax.fit(X.reshape(1,-1))\nX = minmax.transform(X.reshape(1,-1))\nX.ndim","b645e81d":"data['TAVG'] = data['TAVG']\ndata.tail()","1717803e":"X=X.reshape(-1,1,1)\nX.shape","a87d4644":"def build_model():\n    model = tf.keras.models.Sequential(name=\"Weather-Fn\")\n    \n    model.add(tf.keras.layers.LSTM(64, input_shape=(32,1), activation=\"relu\", return_sequences = True,name='layer-1'))\n    model.add(tf.keras.layers.Dropout(0.2))\n    \n    model.add(tf.keras.layers.LSTM(64, activation=\"relu\", return_sequences=False, name=\"layer-2\"))\n    model.add(tf.keras.layers.Dropout(0.2))\n    model.add(tf.keras.layers.Flatten())\n    \n    model.add(tf.keras.layers.Dense(1,activation=\"sigmoid\",name=\"Output_Layer\"))\n    print(model.summary())\n    return model\n    \n    \nmodel = build_model()","68887627":"Y = np.array(data['TAVG'])\nY = Y.reshape(-1,1,1)\n\nprint(Y)\n","6cdf9e8d":"\nmodel.compile(\n    loss=\"mse\",\n    optimizer=\"sgd\",\n    metrics=[\"accuracy\"],\n)\nmodel.fit(X,Y,batch_size=32,epochs=10)","5b26173c":"def predictweather(date):\n    date = np.array(date)\n    date = date.reshape(-1,1)\n    \n    date = minmax.fit_transform(date)\n    x = date.reshape(-1,1,1)\n    \n    pred = model.predict(x)\n    return pred\n\nfor dates in [20200528,20200529,20200530,20200628]:\n    print(predictweather(dates))","9bff0be9":"## Listen \nSince temperature will not exceed 100 in degree celsius we can divide the<br>\nTemperature by 100"}}