{"cell_type":{"9f26f7aa":"code","3aaf1b3e":"code","846cae57":"code","d0507676":"code","98892ef2":"code","2efc4e9f":"code","17c04d98":"code","8f4185c3":"code","3e1602dd":"code","a057bf9b":"markdown","08b987b8":"markdown","23ad6e22":"markdown"},"source":{"9f26f7aa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.io as pio\nimport plotly.express as px\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3aaf1b3e":"#read the data\ndf = pd.read_csv(os.path.join(dirname, 'indexProcessed.csv'))\ndf.head(10)","846cae57":"#Change the type of data from string to datetime that allows easy handling of time-series analysis. \ndf = df.astype({'Date':'datetime64[ns]'})\ndf['Year'] = df['Date'].dt.year","d0507676":"#Pull out the CloseUSD value based on the index and date\ndef getPrice(x, df):\n    df = df.loc[(df['Index']  == x['Index'])  & (df['Date'] == x['Date'])]\n    if len(df['CloseUSD'])>0:\n        return df['CloseUSD'].values[0]\n    return 0","98892ef2":"#Look for last day of an year for an Index\ndf_last_date = df.groupby(['Index', 'Year']).agg({'Date':['max']})\n\n#reduce the column hierarachy to one.\ndf_last_date.columns = df_last_date.columns.get_level_values(0)\n\ndf_last_date.reset_index(inplace = True)\n\n\n#Look for the price in the main df dataframe for last date of a year for an Index\ndf_last_date['Price'] = df_last_date.apply(lambda x: getPrice(x, df), axis = 1)\ndf_last_date.head(10)                         ","2efc4e9f":"df_sorted = df_last_date.sort_values(by = ['Index', 'Year'])\ndf_sorted['ChangePer'] = df_sorted['Price'].pct_change()","17c04d98":"#Removing those years which are not continouse from previous year\ndf_sorted['Change_in_year']  =  df_sorted['Year'].diff()\ndf_yoy = df_sorted[df_sorted['Change_in_year'] == 1]\ndf_yoy.drop(columns = ['Date', 'Price', 'Change_in_year'], inplace = True)\ndf_yoy","8f4185c3":"#Adding graph elements\nfig = px.bar(x = df_yoy['Index'], y = df_yoy['ChangePer'], animation_frame=df_yoy['Year'] )\n   \nfig.update_layout(title_text='YoY change of index')\nfig.update_xaxes(title_text=\"<b> Index <\/b>\")\nfig.update_yaxes(title_text=\"<b> YoY change <\/b>\")\nfig.show()","3e1602dd":"d","a057bf9b":"Now, I sliced the dataframe and pulled out all the close USD value for end of each year for each Index. I am in a position to calculate the YOY return for each Index","08b987b8":"Lets create a timeseries animation for the data","23ad6e22":"pct_change function gave me YOY% change for each year. I need to remove first year for each index as those values are calcuated considering last value of a different index. "}}