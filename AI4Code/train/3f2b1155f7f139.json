{"cell_type":{"2d7ae0ae":"code","fb4f7ed3":"code","4414b634":"code","b0dc3414":"code","9c8243d7":"code","047f559c":"code","eb4c79f0":"code","20f06caa":"code","6efa94ea":"code","c023c9b5":"code","bcc88d9f":"code","4ac1e23b":"code","3c140d05":"code","136894ec":"code","2d159900":"code","5f96bf4f":"code","c5bb6559":"code","29ab1c9d":"code","4d218fd4":"code","362575c4":"code","77ba0623":"code","9bfe2616":"code","c72019a4":"code","c9ffe559":"code","9141e8f8":"code","9f7f018e":"code","e71dd342":"code","29cf2b54":"code","cc52e993":"code","83c2698c":"code","5fb391eb":"code","9afe0cba":"code","711327da":"code","6809892b":"code","454bc814":"code","7d46199b":"code","27d077d6":"code","1d9643b5":"code","0ea5101c":"code","9963f9dc":"code","bfa1d550":"code","97211a6c":"code","4d3662e8":"code","bbb14c4f":"code","53e45213":"code","41f937b7":"code","6afbf3a8":"code","8e092775":"code","f7cfd30d":"code","960c8e91":"code","e2cf91c6":"code","094b54ef":"code","8433b071":"code","9a2af75e":"code","a08f8e38":"code","cf398eb0":"code","5103c896":"code","d6fa77ec":"code","f7517fd7":"code","31fd0428":"code","2702490e":"code","c70a7af1":"code","9fe45b38":"code","f2df78a1":"code","58a10d1a":"code","f8d88b25":"code","ddde00da":"code","44143818":"code","43070b71":"code","2fb74da6":"code","d1596d0d":"code","70543b87":"code","05ff3931":"code","6bc9f403":"code","5524589e":"code","86120a11":"code","d0a29e25":"code","c7d6a4de":"code","3534390e":"code","12013d96":"code","738f5e0d":"code","254486b2":"code","3d1116cb":"code","846cb1a7":"code","b88d0838":"code","785a77a6":"code","778d7916":"code","6b08ed54":"code","696aafaf":"code","1744dc99":"code","3fee0990":"code","60d2893a":"code","4f623998":"code","b5192186":"code","87fe6377":"code","14bb0b8f":"code","8d179afb":"code","4bfacb53":"code","632fd226":"code","6d2eb15c":"code","5885f08c":"code","df32256e":"code","cecd3248":"code","97939ee6":"code","5ded97be":"code","ceea951a":"code","a026b3c2":"code","433b29eb":"code","99e96af9":"code","62167252":"code","2b853909":"code","ccfb947e":"code","09f28a8e":"code","d471fc73":"code","5e1587be":"code","9a0ea8b9":"code","fa4fcfea":"code","a890e7a6":"code","15eb2dc7":"code","38310ea0":"code","bd07de1f":"code","5a574554":"code","d0e9d1ec":"code","b86aa142":"code","4c05e41c":"code","699b2356":"code","27d6c447":"code","6491737a":"code","27447e67":"code","153bf1d5":"code","27f8396c":"code","1d551060":"code","8e7602d5":"code","1b2886f1":"code","327106b1":"code","d01fe757":"code","7e7c39b0":"code","c462dfc8":"code","bd1972eb":"code","ebfcea9e":"code","82d8a9ff":"code","abef1141":"code","cec3a14c":"code","6f17399a":"code","b2d1973f":"code","9dd5e781":"code","645620de":"code","74c74817":"code","c48bbf50":"code","c0a429f8":"code","e60c94b8":"code","e47ce1fa":"code","ebe7d242":"code","8edab9fa":"code","f33c6483":"code","a2b9d4cd":"code","bdf15db4":"code","8ca5fda6":"code","18eb426f":"code","5ec6d05b":"code","913b2c13":"code","32abfb8e":"code","dc7a7f4c":"code","9c4b31e7":"code","c61fbf67":"code","bef1381c":"code","28bb592d":"code","424f3772":"code","64949059":"code","fe2c8dcf":"code","d8ee0c90":"code","3e3a1ccf":"code","9aa0a604":"code","05a79b2c":"code","1ac7e46e":"code","18be2c1c":"code","7ea367c5":"code","4fd33df9":"code","a7115a61":"code","1d7ff838":"code","2446807c":"code","30bce797":"code","c779d377":"markdown","b442aeab":"markdown","7a63ee81":"markdown","04bbb326":"markdown","4ec2a7f4":"markdown","abd1e8c1":"markdown","f255a432":"markdown","361b3734":"markdown","0c6bc816":"markdown","54e9c467":"markdown","a78d72f0":"markdown","5ab2be66":"markdown","80007446":"markdown","491bf053":"markdown","d4fcafc7":"markdown","d1fb716e":"markdown","fe47cc00":"markdown","bc8f868e":"markdown","b8d6f072":"markdown","ba673926":"markdown","89813be3":"markdown","2e7c09cc":"markdown","7a413477":"markdown","3b8b4d2b":"markdown","6c11314b":"markdown","bd49347b":"markdown","d20aebb6":"markdown","96f06ba9":"markdown","36d041d2":"markdown","b73b5bbb":"markdown","ed25a49b":"markdown","1cc4fe4e":"markdown","d79747eb":"markdown","55d18faf":"markdown","8ee2bb09":"markdown","a0175b28":"markdown","22a12560":"markdown","9c935fd6":"markdown","c834c797":"markdown","ee7eb137":"markdown","ea6e44f6":"markdown","1baa0ea3":"markdown","d0a439d8":"markdown","7917121e":"markdown","010af725":"markdown","f62f98d3":"markdown","de1d44ce":"markdown","6312d7af":"markdown","8c98a75b":"markdown","495d389d":"markdown","930cb424":"markdown","f1c303e3":"markdown","6bfc9777":"markdown","d1d9d0b9":"markdown","7211b682":"markdown","89753b69":"markdown","eb86221e":"markdown","dcc1a3fa":"markdown","9e01e1a8":"markdown","99ce606c":"markdown","4fef5fc7":"markdown","75f710f5":"markdown","132cb16b":"markdown","0fc99815":"markdown","5a5422ce":"markdown","14293dfb":"markdown","d93e3f42":"markdown","59251e16":"markdown","cdd6e92e":"markdown","cfe80af1":"markdown"},"source":{"2d7ae0ae":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score\n%matplotlib inline\nsns.set_style('darkgrid')","fb4f7ed3":"train = pd.read_csv('..\/input\/used-cars-price-prediction\/train-data.csv')","4414b634":"train.head()","b0dc3414":"train.shape","9c8243d7":"train.info()","047f559c":"train.describe()","eb4c79f0":"train.isnull().sum()","20f06caa":"print(\"The percentage of null objects of Mileage column :\",(2\/train['Mileage'].size)*100,\"%\")","6efa94ea":"print(\"The percentage of null objects of Engine column :\",(36\/train['Engine'].size)*100,\"%\")","c023c9b5":"print(\"The percentage of null objects of Power column :\",(36\/train['Power'].size)*100,\"%\")","bcc88d9f":"print(\"The percentage of null objects of Seat column :\",(42\/train['Seats'].size)*100,\"%\")","4ac1e23b":"train.groupby('Seats')['Price'].nunique()","3c140d05":"train.groupby('Mileage')['Price'].nunique()","136894ec":"train.groupby('Engine')['Price'].nunique()","2d159900":"train.groupby('Power')['Price'].nunique()","5f96bf4f":"train['Mileage'] = train['Mileage'].str.replace(' km\/kg', '')\ntrain['Mileage'] = train['Mileage'].str.replace(' kmpl', '')\ntrain['Mileage'] = pd.to_numeric(train['Mileage'], errors='coerce')","c5bb6559":"train.head()","29ab1c9d":"train['Engine'] = train['Engine'].str.replace(' CC', '')\ntrain['Engine'] = pd.to_numeric(train['Engine'], errors='coerce')","4d218fd4":"train.head()","362575c4":"train['Power'] = train['Power'].str.replace(' bhp', '')\ntrain['Power'] = train['Power'].str.replace('null', '0.0')\ntrain['Power'] = pd.to_numeric(train['Power'], errors='coerce')","77ba0623":"train.head()","9bfe2616":"train['Mileage'].replace(0.0,np.nan,inplace=True)\nprint(\"Mean of Mileage =\",np.mean(train['Mileage']))\ntrain['Mileage'].fillna(value=np.mean(train['Mileage']),inplace=True)","c72019a4":"train['Engine'].replace(0.0,np.nan,inplace=True)\nprint(\"Mean of Engine =\",np.mean(train['Engine']))\ntrain['Engine'].fillna(value=np.mean(train['Engine']),inplace=True)","c9ffe559":"train['Power'].replace(0.0,np.nan,inplace=True)\nprint(\"Mean of Power =\",np.mean(train['Power']))\ntrain['Power'].fillna(value=np.mean(train['Power']),inplace=True)","9141e8f8":"train['Seats'].replace(0.0,np.nan,inplace=True)\nprint(\"Mean of Seats = \",np.mean(train['Seats']))\ntrain['Seats'].fillna(value=np.mean(train['Seats']),inplace=True)","9f7f018e":"train.isna().sum()","e71dd342":"train.info()","29cf2b54":"train.describe()","cc52e993":"test = pd.read_csv('..\/input\/used-cars-price-prediction\/test-data.csv')","83c2698c":"test.head()","5fb391eb":"test.isna().sum()","9afe0cba":"test['Mileage'] = test['Mileage'].str.replace(' km\/kg', '')\ntest['Mileage'] = test['Mileage'].str.replace(' kmpl', '')\ntest['Mileage'] = pd.to_numeric(test['Mileage'], errors='coerce')","711327da":"test.head()","6809892b":"test['Engine'] = test['Engine'].str.replace(' CC', '')\ntest['Engine'] = pd.to_numeric(test['Engine'], errors='coerce')","454bc814":"test.head()","7d46199b":"test['Power'] = test['Power'].str.replace(' bhp', '')\ntest['Power'] = test['Power'].str.replace('null', '0.0')\ntest['Power'] = pd.to_numeric(test['Power'], errors='coerce')","27d077d6":"test.head()","1d9643b5":"test['Mileage'].replace(0.0,np.nan,inplace=True)\nprint(\"Mean of Mileage =\",np.mean(test['Mileage']))\ntest['Mileage'].fillna(value=np.mean(test['Mileage']),inplace=True)","0ea5101c":"test['Engine'].replace(0.0,np.nan,inplace=True)\nprint(\"Mean of Engine =\",np.mean(test['Engine']))\ntest['Engine'].fillna(value=np.mean(test['Engine']),inplace=True)","9963f9dc":"test['Power'].replace(0.0,np.nan,inplace=True)\nprint(\"Mean of Power =\",np.mean(test['Power']))\ntest['Power'].fillna(value=np.mean(test['Power']),inplace=True)","bfa1d550":"test['Seats'].replace(0.0,np.nan,inplace=True)\nprint(\"Mean of Seats =\",np.mean(test['Seats']))\ntest['Seats'].fillna(value=np.mean(test['Seats']),inplace=True)","97211a6c":"test.head()","4d3662e8":"test.info()","bbb14c4f":"test.isna().sum()","53e45213":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline\nsns.set_style('darkgrid')","41f937b7":"train.head()","6afbf3a8":"train.shape","8e092775":"train.columns.tolist()","f7cfd30d":"train.describe() #summary statistics","960c8e91":"train.Location.nunique() #the no. of locations","e2cf91c6":"train.Location.unique() #the different locations","094b54ef":"train.Location.value_counts()","8433b071":"train['Location'].value_counts().plot.pie()","9a2af75e":"train.Location.value_counts().plot()","a08f8e38":"train.Year.unique()","cf398eb0":"train.Year.value_counts().plot(kind='bar')","5103c896":"train.Year.plot(kind='hist',color='Maroon')","d6fa77ec":"print(\"Mean kilometers driven in the data is:\",train.Kilometers_Driven.mean())","f7517fd7":"print(\"Maximum kilometers driven in the data is:\",train.Kilometers_Driven.max())","31fd0428":"print(\"Minimum kilometers driven in the data is:\",train.Kilometers_Driven.min())","2702490e":"train.Kilometers_Driven.plot(kind='hist',color='Maroon',bins=40)","c70a7af1":"train.Fuel_Type.unique()","9fe45b38":"train.Fuel_Type.value_counts()","f2df78a1":"sns.countplot(data=train,x='Fuel_Type')","58a10d1a":"train.Fuel_Type.value_counts().plot(kind='barh')","f8d88b25":"train.Transmission.value_counts()","ddde00da":"sns.countplot(data=train,x='Transmission')","44143818":"train.Transmission.value_counts().plot(kind='barh',color=\"violet\")","43070b71":"train.Owner_Type.value_counts()","2fb74da6":"\nsns.countplot(x='Owner_Type',data=train)","d1596d0d":"print(\"Minimum Mileage in the data is:\",train.Mileage.min())\nprint(\"Maximum Mileage in the data is:\",train.Mileage.max())\nprint(\"Range of Mileage is from {} to {}\".format(train.Mileage.min(),train.Mileage.max()))","70543b87":"train.Mileage.mean()","05ff3931":"train[train.Mileage > 18.33].Name.count()","6bc9f403":"train[train.Mileage < 18.33].Name.count()","5524589e":"sns.boxplot(train['Mileage'])","86120a11":"print(\"Minimum engine volume in the data is:\",train.Engine.min())\nprint(\"Maximum engine volume in the data is:\",train.Engine.max())\nprint(\"Range of engine volume is from {} to {}\".format(train.Engine.min(),train.Engine.max()))","d0a29e25":"train[train.Engine==72].Name","c7d6a4de":"train[train.Engine==5998].Name","3534390e":"train.Engine.mean()","12013d96":"sns.distplot(train['Engine'],kde=False,hist_kws=dict(edgecolor=\"k\", linewidth=2), color='red')","738f5e0d":"print(\"Minimum power in the data is:\",train.Power.min())\nprint(\"Maximum power in the data is:\",train.Power.max())\nprint(\"Range of power is from {} to {}\".format(train.Power.min(),train.Power.max()))","254486b2":"train[train.Power==34.2].Name.count()","3d1116cb":"train[train.Power==34.2].Name","846cb1a7":"train[train.Power==560.0].Name.count()","b88d0838":"train[train.Power==560].Name","785a77a6":"train.Power.mean()","778d7916":"sns.distplot(train['Power'],kde=False,hist_kws=dict(edgecolor=\"k\", linewidth=2))","6b08ed54":"print(\"Minimum seats in the data is:\",train.Seats.min())\nprint(\"Maximum seats in the data is:\",train.Seats.max())","696aafaf":"train.Seats.mean()","1744dc99":"sns.distplot(train['Seats'],kde=False,hist_kws=dict(edgecolor=\"k\", linewidth=2))","3fee0990":"train.Seats.value_counts()","60d2893a":"print(\"Minimum price in the data is:\",train.Price.min())\nprint(\"Maximum price in the data is:\",train.Price.max())\nprint(\"Price range is from {} to {}\".format(train.Price.min(),train.Price.max()))","4f623998":"train.Price.mean()","b5192186":"train[train.Price==0.44].Name #cheapest car","87fe6377":"train[train.Price==160].Name #costliest car","14bb0b8f":"train.Price.plot(kind='hist')","8d179afb":"train['Brand'] = train.Name.str.split().str.get(0)\ntrain.head()","4bfacb53":"plt.figure(figsize=(25,10))\nplt.subplot(131)\nplt.title('Location vs Price',fontsize = 30)\nplt.ylabel(\"Price\")\ntrain.groupby('Location')['Price'].mean().plot.bar()\nplt.subplot(132)\nplt.title('Transmission vs Price',fontsize = 30)\nplt.ylabel(\"Price\")\ntrain.groupby('Transmission')['Price'].mean().plot.bar()\nplt.subplot(133)\nplt.title('Fuel_Type vs Price',fontsize = 30)\nplt.ylabel(\"Price\")\ntrain.groupby('Fuel_Type')['Price'].mean().plot.bar()","632fd226":"plt.figure(figsize=(25,10))\nplt.subplot(131)\nplt.title('Seats vs Price',fontsize = 30)\nplt.ylabel(\"Price\")\ntrain.groupby('Seats')['Price'].mean().plot.bar()\nplt.subplot(132)\nplt.title('Owner_Type vs Price',fontsize = 30)\nplt.ylabel(\"Price\")\ntrain.groupby('Owner_Type')['Price'].mean().plot.bar()\nplt.subplot(133)\nplt.title('Brand vs Price',fontsize = 30)\nplt.ylabel(\"Price\")\ntrain.groupby('Brand')['Price'].mean().plot.bar()","6d2eb15c":"plt.figure(figsize=(25,10))\nplt.subplot(131)\nplt.title('Price vs Owner Type',fontsize = 30)\nplt.ylabel(\"Price\")\ntrain.groupby('Owner_Type')['Price'].mean().plot.bar(color=\"red\")\nplt.subplot(132)\nplt.title('Owner Type vs Engine',fontsize = 30)\nplt.ylabel(\"Price\")\ntrain.groupby('Owner_Type')['Engine'].mean().plot.bar(color=\"orange\")\nplt.subplot(133)\nplt.title('Owner_Type vs Mileage',fontsize = 30)\nplt.ylabel(\"Price\")\ntrain.groupby('Owner_Type')['Mileage'].mean().plot.bar(color=\"yellow\")","5885f08c":"plt.figure(figsize=(10,5))\nsns.stripplot(x='Transmission',y='Price',data=train,hue='Owner_Type')","df32256e":"plt.figure(figsize=(10,5))\nplt.title('Year vs Price',fontsize = 15)\nplt.ylabel(\"Price\")\ntrain.groupby('Year')['Price'].mean().plot.line()","cecd3248":"plt.figure(figsize=(25,10))\nplt.subplot(131)\nplt.scatter(train['Kilometers_Driven'], train['Price'], s=90,marker='x')\nplt.title('Kilometers_Driven vs Price',fontsize = 30)\nplt.xlabel('Kilometers_Driven')\nplt.ylabel('Price')\nplt.grid()\nplt.subplot(132)\nplt.title('Mileage vs Price',fontsize = 30)\nplt.ylabel(\"Price\")\nplt.scatter(train['Mileage'], train['Price'], s=90,marker='x')\nplt.subplot(133)\nplt.title('Power vs Price',fontsize = 30)\nplt.ylabel(\"Price\")\nplt.scatter(train['Power'], train['Price'], s=90,marker='x')\nplt.show()","97939ee6":"sns.lmplot('Mileage','Price',data=train)\nsns.lmplot('Power','Price',data=train)\nsns.lmplot('Kilometers_Driven','Price',data=train)\nsns.lmplot('Engine','Price',data=train)","5ded97be":"plt.figure(figsize=(25,5))\nplt.subplot(131)\nplt.title('Brand vs Mileage',fontsize = 30)\nplt.ylabel(\"Mileage\")\ntrain.groupby('Brand')['Mileage'].mean().plot.bar()\nplt.subplot(132)\ntrain.groupby('Year')['Mileage'].mean().plot.bar()\nplt.title('Year vs Mileage',fontsize = 30)\nplt.ylabel(\"Mileage\")\nplt.subplot(133)\ntrain.groupby('Fuel_Type')['Mileage'].mean().plot.bar()\nplt.title('Fuel_type vs Mileage',fontsize = 30)\nplt.ylabel(\"Mileage\")","ceea951a":"fig=plt.figure(figsize=(12,6))\nplt.title('Transmission vs Mileage',fontsize = 30)\nsns.boxplot(y='Mileage',x='Transmission',data=train)","a026b3c2":"plt.title('Brand vs Power',fontsize = 30)\nplt.ylabel(\"Power\")\ntrain.groupby('Brand')['Power'].mean().plot.bar()","433b29eb":"sns.jointplot(x='Power',y='Engine',data=train)","99e96af9":"plt.title('Brand vs Fuel type',fontsize = 30)\nplt.ylabel(\"Power\")\ntrain.groupby('Fuel_Type')['Power'].mean().plot.bar()","62167252":"plt.figure(figsize=(10,8))\nsns.boxplot(x='Owner_Type', y='Year', data=train, width=0.8)","2b853909":"train = train.iloc[:,:-1]\ntrain","ccfb947e":"train.Name.unique()","09f28a8e":"namemapping = {label:idx+1 for idx, label in enumerate(np.unique(train['Name']))}\nnamemapping.update({\"Not Applicable\": 0})\ninvnamemapping = {v : x for x, v in namemapping.items()}\ntrain['Name'] = train['Name'].map(namemapping).astype(float)\ntrain","d471fc73":"train.Location.unique()","5e1587be":"locationmapping = {label:idx+1 for idx, label in enumerate(np.unique(train['Location']))}\nlocationmapping.update({\"null\": 0})\ninvlocationmapping = {v : x for x, v in locationmapping.items()}\ntrain['Location'] = train['Location'].map(locationmapping).astype(float)\ntrain","9a0ea8b9":"train.Fuel_Type.unique()","fa4fcfea":"fueltypemapping = {label:idx+1 for idx, label in enumerate(np.unique(train['Fuel_Type']))}\nfueltypemapping.update({\"null\": 0})\ninvfueltypemapping = {v : x for x, v in fueltypemapping.items()}\ntrain['Fuel_Type'] = train['Fuel_Type'].map(fueltypemapping).astype(float)\ntrain","a890e7a6":"train.Transmission.unique()","15eb2dc7":"transmissionmapping = {label:idx+1 for idx, label in enumerate(np.unique(train['Transmission']))}\ntransmissionmapping.update({\"null\": 0})\ninvtransmissionmapping = {v : x for x, v in transmissionmapping.items()}\ntrain['Transmission'] = train['Transmission'].map(transmissionmapping).astype(float)\ntrain","38310ea0":"train.Owner_Type.unique()","bd07de1f":"ownertypemapping = {label:idx+1 for idx, label in enumerate(np.unique(train['Owner_Type']))}\nownertypemapping.update({\"null\": 0 })\ninvownertypemapping = {v : x for x, v in ownertypemapping.items()}\ntrain['Owner_Type'] = train['Owner_Type'].map(ownertypemapping).astype(float)\ntrain\n","5a574554":"yearmapping = {label:idx+1 for idx, label in enumerate(np.unique(train['Year']))}\nyearmapping.update({0: 0})\ninvyearmapping = {v : x for x, v in yearmapping.items()}\ntrain['Year'] = train['Year'].map(yearmapping).astype(float)\ntrain","d0e9d1ec":"drivenmapping = {label:idx+1 for idx, label in enumerate(np.unique(train['Kilometers_Driven']))}\ndrivenmapping.update({0: 0})\ninvdrivenmapping = {v : x for x, v in drivenmapping.items()}\ntrain['Kilometers_Driven'] = train['Kilometers_Driven'].map(drivenmapping).astype(float)\ntrain","b86aa142":"train.info()","4c05e41c":"test['Name'] = test['Name'].map(namemapping).astype(float)\ntest","699b2356":"test['Location'] = test['Location'].map(locationmapping).astype(float)\ntest","27d6c447":"test['Fuel_Type'] = test['Fuel_Type'].map(fueltypemapping).astype(float)\ntest","6491737a":"test['Transmission'] = test['Transmission'].map(transmissionmapping).astype(float)\ntest","27447e67":"test['Owner_Type'] = test['Owner_Type'].map(ownertypemapping).astype(float)\ntest","153bf1d5":"test['Year'] = test['Year'].astype(float)\ntest","27f8396c":"test['Kilometers_Driven'] = test['Kilometers_Driven'].astype(float)\ntest","1d551060":"test['Name'].fillna(0.0, inplace=True)\ntest['Location'].fillna(0.0, inplace=True)\ntest['Year'].fillna(0.0, inplace=True)\ntest['Kilometers_Driven'].fillna(0.0, inplace=True)\ntest['Fuel_Type'].fillna(0.0, inplace=True)\ntest['Power'].fillna(0.0, inplace=True)\ntest['Transmission'].fillna(0.0, inplace=True)\ntest['Owner_Type'].fillna(0.0, inplace=True)\ntest['Seats'].fillna(0.0, inplace=True)","8e7602d5":"test.info()","1b2886f1":"cols=[ 'Name', 'Location', 'Year', 'Kilometers_Driven', 'Fuel_Type', 'Transmission', 'Owner_Type', 'Mileage', 'Engine', 'Power', 'Seats']\nplt.figure(figsize=(20,10))\nplt.title('Heat Map', fontsize=20)\nsns.set(font_scale=1.0)\nsns.heatmap(train.corr(), cbar=True, annot =True, square=True, fmt='.2f',annot_kws={'size':15},yticklabels=cols,xticklabels=cols, linewidth=3)","327106b1":"from sklearn.linear_model import LinearRegression","d01fe757":"train = train.drop(columns = ['New_Price'])\ntrain = train.drop(columns = ['Unnamed: 0'])","7e7c39b0":"x_lr = train.iloc[:, :-1].values\ny_lr = train['Price'].values\nxtrain_lr, xtest_lr, ytrain_lr, ytest_lr = train_test_split(x_lr, y_lr, test_size=0.3, random_state=1)","c462dfc8":"lr = LinearRegression()\nlr.fit(xtrain_lr, ytrain_lr)","bd1972eb":"ytrainpredict_lr = lr.predict(xtrain_lr)\nytestpredict_lr = lr.predict(xtest_lr)","ebfcea9e":"print(f'MAE train: {metrics.mean_absolute_error(ytrain_lr, ytrainpredict_lr)}, test: {metrics.mean_absolute_error(ytest_lr, ytestpredict_lr)}')\nprint(f'RMSE train: {np.sqrt(metrics.mean_squared_error(ytrain_lr, ytrainpredict_lr))}, test: {np.sqrt(metrics.mean_squared_error(ytest_lr, ytestpredict_lr))}')\nprint(f'R^2 train: {(r2_score(ytrain_lr, ytrainpredict_lr))}, test: {(r2_score(ytest_lr, ytestpredict_lr))}')\nprint(f'MSE train: {(mean_squared_error(ytrain_lr, ytrainpredict_lr))}, test: {(mean_squared_error(ytest_lr, ytestpredict_lr))}')","82d8a9ff":"sns.set(font_scale=1.0)\nplt.scatter(ytrainpredict_lr, ytrainpredict_lr - ytrain_lr, c='steelblue', marker='o', edgecolors='white', s=35, alpha=0.9, label=\"Training data\")\nplt.xlabel('Predicted Values')\nplt.ylabel('Residuals')\nplt.legend(loc='upper left')\nplt.hlines(y=0, xmin=ytrainpredict_lr.min()-2, xmax=ytrainpredict_lr.max()+5, lw=1, color='black')\nplt.xlim([ytrainpredict_lr.min()-1, ytrainpredict_lr.max()+1])\nplt.show()","abef1141":"plt.scatter(ytestpredict_lr, ytestpredict_lr-ytest_lr, c='limegreen', marker='s', edgecolors='white', s=30, alpha=0.99, label=\"Train Test data\")\nplt.xlabel('Predicted Values')\nplt.ylabel('Residuals')\nplt.legend(loc='upper left')\nplt.hlines(y=0, xmin=ytestpredict_lr.min()-1, xmax=ytestpredict_lr.max()+1, lw=1, color='black')\nplt.xlim([ytestpredict_lr.min()-1, ytestpredict_lr.max()+1])\nplt.show()","cec3a14c":"print(lr.intercept_)","6f17399a":"print(train.columns)","b2d1973f":"cols=[ 'Name', 'Location', 'Year', 'Kilometers_Driven', 'Fuel_Type', 'Transmission', 'Owner_Type', 'Mileage', 'Engine', 'Power', 'Seats']\ncoeff_df = pd.DataFrame(lr.coef_,cols,columns=['Coefficient'])\ncoeff_df","9dd5e781":"from sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import RANSACRegressor","645620de":"ransac = RANSACRegressor(LinearRegression(), max_trials =100, min_samples=4213, loss='absolute_loss', residual_threshold=5.0, random_state=0)\n# min_samples is integer value of 0.75 * 6019","74c74817":"x_r = train.iloc[:, :-1].values\ny_r = train['Price'].values\nxtrain_r, xtest_r, ytrain_r, ytest_r = train_test_split(x_r, y_r, test_size=0.3, random_state=1)\nransac.fit(xtrain_r, ytrain_r)\ninlier = ransac.inlier_mask_\ninlier.size","c48bbf50":"lr = LinearRegression()\nlr.fit(xtrain_r[inlier], ytrain_lr[inlier])\nytrainpredict_lr = lr.predict(xtrain_lr)\nytestpredict_lr = lr.predict(xtest_lr)","c0a429f8":"print(f'MAE train: {metrics.mean_absolute_error(ytrain_lr, ytrainpredict_lr)}, test: {metrics.mean_absolute_error(ytest_lr, ytestpredict_lr)}')\nprint(f'RMSE train: {np.sqrt(metrics.mean_squared_error(ytrain_lr, ytrainpredict_lr))}, test: {np.sqrt(metrics.mean_squared_error(ytest_lr, ytestpredict_lr))}')\nprint(f'R^2 train: {(r2_score(ytrain_lr, ytrainpredict_lr))}, test: {(r2_score(ytest_lr, ytestpredict_lr))}')\nprint(f'MSE train: {(mean_squared_error(ytrain_lr, ytrainpredict_lr))}, test: {(mean_squared_error(ytest_lr, ytestpredict_lr))}')","e60c94b8":"sns.set(font_scale=1.0)\nplt.scatter(ytrainpredict_lr, ytrainpredict_lr - ytrain_lr, c='steelblue', marker='o', edgecolors='white', s=35, alpha=0.9, label=\"Training data\")\nplt.xlabel('Predicted Values')\nplt.ylabel('Residuals')\nplt.legend(loc='upper left')\nplt.hlines(y=0, xmin=ytrainpredict_lr.min()-2, xmax=ytrainpredict_lr.max()+5, lw=1, color='black')\nplt.xlim([ytrainpredict_lr.min()-1, ytrainpredict_lr.max()+1])\nplt.show()","e47ce1fa":"plt.scatter(ytestpredict_lr, ytestpredict_lr-ytest_lr, c='limegreen', marker='s', edgecolors='white', s=30, alpha=0.99, label=\"Train Test data\")\nplt.xlabel('Predicted Values')\nplt.ylabel('Residuals')\nplt.legend(loc='upper left')\nplt.hlines(y=0, xmin=ytestpredict_lr.min()-1, xmax=ytestpredict_lr.max()+1, lw=1, color='black')\nplt.xlim([ytestpredict_lr.min()-1, ytestpredict_lr.max()+1])\nplt.show()","ebe7d242":"print(lr.intercept_)","8edab9fa":"cols=[ 'Name', 'Location', 'Year', 'Kilometers_Driven', 'Fuel_Type', 'Transmission', 'Owner_Type', 'Mileage', 'Engine', 'Power', 'Seats']\ncoeff_df = pd.DataFrame(lr.coef_,cols,columns=['Coefficient'])\ncoeff_df","f33c6483":"from sklearn.linear_model import Ridge\n\nx_rd = train.iloc[:, :-1].values\ny_rd = train['Price'].values\nxtrain_rd, xtest_rd, ytrain_rd, ytest_rd = train_test_split(x_rd, y_rd, test_size=0.3, random_state=1)\nrd = Ridge(alpha=1.0)\nrd.fit(xtrain_rd, ytrain_rd)\nytrainpredict_rd = rd.predict(xtrain_rd)\nytestpredict_rd = rd.predict(xtest_rd)","a2b9d4cd":"print(f'MAE train: {metrics.mean_absolute_error(ytrain_rd, ytrainpredict_rd)}, test: {metrics.mean_absolute_error(ytest_rd, ytestpredict_rd)}')\nprint(f'RMSE train: {np.sqrt(metrics.mean_squared_error(ytrain_rd, ytrainpredict_rd))}, test: {np.sqrt(metrics.mean_squared_error(ytest_rd, ytestpredict_rd))}')\nprint(f'R^2 train: {(r2_score(ytrain_rd, ytrainpredict_rd))}, test: {(r2_score(ytest_rd, ytestpredict_rd))}')\nprint(f'MSE train: {(mean_squared_error(ytrain_rd, ytrainpredict_rd))}, test: {(mean_squared_error(ytest_rd, ytestpredict_rd))}')","bdf15db4":"plt.scatter(ytrainpredict_rd, ytrainpredict_rd-ytrain_rd, c='steelblue', marker='o', edgecolors='white', s=35, alpha=0.9, label=\"Training data\")\nplt.xlabel('Predicted Values')\nplt.ylabel('Residuals')\nplt.legend(loc='upper left')\nplt.hlines(y=0, xmin=ytrainpredict_rd.min()-2, xmax=ytrainpredict_rd.max()+5, lw=1, color='black')\nplt.xlim([ytrainpredict_rd.min()-1, ytrainpredict_rd.max()+1])\nplt.show()","8ca5fda6":"plt.scatter(ytestpredict_rd, ytestpredict_rd-ytest_rd, c='limegreen', marker='s', edgecolors='white', s=35, alpha=0.9, label=\"Test data\")\nplt.xlabel('Predicted Values')\nplt.ylabel('Residuals')\nplt.legend(loc='upper left')\nplt.hlines(y=0, xmin=ytestpredict_rd.min()-1, xmax=ytestpredict_rd.max()+1, lw=1, color='black')\nplt.xlim([ytestpredict_rd.min()-1, ytestpredict_rd.max()+1])\nplt.show()","18eb426f":"print(rd.intercept_)","5ec6d05b":"cols=[ 'Name', 'Location', 'Year', 'Kilometers_Driven', 'Fuel_Type', 'Transmission', 'Owner_Type', 'Mileage', 'Engine', 'Power', 'Seats']\ncoeff_df = pd.DataFrame(rd.coef_,cols,columns=['Coefficient'])\ncoeff_df","913b2c13":"from sklearn.linear_model import Lasso\n\nx_ls = train.iloc[:, :-1].values\ny_ls = train['Price'].values\nxtrain_ls, xtest_ls, ytrain_ls, ytest_ls = train_test_split(x_ls, y_ls, test_size=0.3, random_state=1)\nls = Ridge(alpha=1.0)\nls.fit(xtrain_rd, ytrain_ls)\nytrainpredict_ls = rd.predict(xtrain_ls)\nytestpredict_ls = rd.predict(xtest_ls)","32abfb8e":"print(f'MAE train: {metrics.mean_absolute_error(ytrain_ls, ytrainpredict_ls)}, test: {metrics.mean_absolute_error(ytest_ls, ytestpredict_ls)}')\nprint(f'RMSE train: {np.sqrt(metrics.mean_squared_error(ytrain_ls, ytrainpredict_ls))}, test: {np.sqrt(metrics.mean_squared_error(ytest_ls, ytestpredict_ls))}')\nprint(f'R^2 train: {(r2_score(ytrain_ls, ytrainpredict_ls))}, test: {(r2_score(ytest_ls, ytestpredict_ls))}')\nprint(f'MSE train: {(mean_squared_error(ytrain_ls, ytrainpredict_ls))}, test: {(mean_squared_error(ytest_ls, ytestpredict_ls))}')","dc7a7f4c":"plt.scatter(ytrainpredict_ls, ytrainpredict_ls-ytrain_ls, c='steelblue', marker='o', edgecolors='white', s=35, alpha=0.9, label=\"Training data\")\nplt.xlabel('Predicted Values')\nplt.ylabel('Residuals')\nplt.legend(loc='upper left')\nplt.hlines(y=0, xmin=ytrainpredict_ls.min()-2, xmax=ytrainpredict_ls.max()+5, lw=1, color='black')\nplt.xlim([ytrainpredict_ls.min()-1, ytrainpredict_ls.max()+1])\nplt.show()","9c4b31e7":"plt.scatter(ytestpredict_ls, ytestpredict_ls-ytest_ls, c='limegreen', marker='s', edgecolors='white', s=35, alpha=0.9, label=\"Test data\")\nplt.xlabel('Predicted Values')\nplt.ylabel('Residuals')\nplt.legend(loc='upper left')\nplt.hlines(y=0, xmin=ytestpredict_ls.min()-1, xmax=ytestpredict_ls.max()+1, lw=1, color='black')\nplt.xlim([ytestpredict_ls.min()-1, ytestpredict_ls.max()+1])\nplt.show()","c61fbf67":"print(ls.intercept_)","bef1381c":"cols=[ 'Name', 'Location', 'Year', 'Kilometers_Driven', 'Fuel_Type', 'Transmission', 'Owner_Type', 'Mileage', 'Engine', 'Power', 'Seats']\ncoeff_df = pd.DataFrame(ls.coef_,cols,columns=['Coefficient'])\ncoeff_df","28bb592d":"from sklearn.ensemble import RandomForestRegressor\nx_rf = train.iloc[:, :-1].values\ny_rf = train['Price'].values\nxtrain_rf, xtest_rf, ytrain_rf, ytest_rf = train_test_split(x_rf, y_rf, test_size=0.3, random_state=1)\n\nforest_rf = RandomForestRegressor(n_estimators=1000, criterion='mse', random_state=1, n_jobs=-1)\nforest_rf.fit(xtrain_rf, ytrain_rf)\nytrainpredict_rf = forest_rf.predict(xtrain_rf)\nytestpredict_rf = forest_rf.predict(xtest_rf)","424f3772":"print(f'MAE train: {metrics.mean_absolute_error(ytrain_rf, ytrainpredict_rf)}, test: {metrics.mean_absolute_error(ytest_rf, ytestpredict_rf)}')\nprint(f'RMSE train: {np.sqrt(metrics.mean_squared_error(ytrain_rf, ytrainpredict_rf))}, test: {np.sqrt(metrics.mean_squared_error(ytest_rf, ytestpredict_rf))}')\nprint(f'R^2 train: {(r2_score(ytrain_rf, ytrainpredict_rf))}, test: {(r2_score(ytest_rf, ytestpredict_rf))}')\nprint(f'MSE train: {(mean_squared_error(ytrain_rf, ytrainpredict_rf))}, test: {(mean_squared_error(ytest_rf, ytestpredict_rf))}')","64949059":"plt.scatter(ytrainpredict_rf, ytrainpredict_rf-ytrain_rf, c='steelblue', marker='o', edgecolors='white', s=35, alpha=0.9, label=\"Training data\")\nplt.xlabel('Predicted Values')\nplt.ylabel('Residuals')\nplt.legend(loc='upper left')\nplt.hlines(y=0, xmin=ytrainpredict_rf.min()-2, xmax=ytrainpredict_rf.max()+5, lw=1, color='black')\nplt.xlim([ytrainpredict_rf.min()-1, ytrainpredict_rf.max()+1])\nplt.show()","fe2c8dcf":"plt.scatter(ytestpredict_rf, ytestpredict_rf-ytest_rf, c='limegreen', marker='s', edgecolors='white', s=35, alpha=0.9, label=\"Test data\")\nplt.xlabel('Predicted Values')\nplt.ylabel('Residuals')\nplt.legend(loc='upper left')\nplt.hlines(y=0, xmin=ytestpredict_rf.min()-1, xmax=ytestpredict_rf.max()+1, lw=1, color='black')\nplt.xlim([ytestpredict_rf.min()-1, ytestpredict_rf.max()+1])\nplt.show()","d8ee0c90":"from sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.metrics import mean_squared_error\nx_kk = train.iloc[:, :-1].values\ny_kk = train['Price'].values\nxtrain_kk, xtest_kk, ytrain_kk, ytest_kk = train_test_split(x_kk, y_kk, test_size=0.3, random_state=1)\nL=[];\nfor i in range(3,15,2):\n    M=[];\n    knn = KNeighborsRegressor(n_neighbors=i)\n    knn.fit(xtrain_kk, ytrain_kk)\n    y_pred = knn.predict(xtest_kk)\n    rmse = np.sqrt(mean_squared_error(ytest_kk, y_pred))\n    M.append(i);\n    M.append(rmse);\n    L.append(M);","3e3a1ccf":"min=L[0];\nfor i in range(len(L)):\n    if L[i][1]<min[1]:\n        min=L[i];\nn=min[0];\nprint(n);","9aa0a604":"knn = KNeighborsRegressor(n_neighbors=n)\nknn.fit(xtrain_kk, ytrain_kk)\nytrainpredict_kk = knn.predict(xtrain_kk)\nytestpredict_kk = knn.predict(xtest_kk)","05a79b2c":"print(f'MAE train: {metrics.mean_absolute_error(ytrain_kk, ytrainpredict_kk)}, test: {metrics.mean_absolute_error(ytest_kk, ytestpredict_kk)}')\nprint(f'RMSE train: {np.sqrt(metrics.mean_squared_error(ytrain_kk, ytrainpredict_kk))}, test: {np.sqrt(metrics.mean_squared_error(ytest_kk, ytestpredict_kk))}')\nprint(f'R^2 train: {(r2_score(ytrain_kk, ytrainpredict_kk))}, test: {(r2_score(ytest_kk, ytestpredict_kk))}')\nprint(f'MSE train: {(mean_squared_error(ytrain_kk, ytrainpredict_kk))}, test: {(mean_squared_error(ytest_kk, ytestpredict_kk))}')","1ac7e46e":"plt.scatter(ytrainpredict_kk, ytrainpredict_kk-ytrain_kk, c='steelblue', marker='o', edgecolors='white', s=35, alpha=0.9, label=\"Training data\")\nplt.xlabel('Predicted Values')\nplt.ylabel('Residuals')\nplt.legend(loc='upper left')\nplt.hlines(y=0, xmin=ytrainpredict_kk.min()-2, xmax=ytrainpredict_kk.max()+5, lw=1, color='black')\nplt.xlim([ytrainpredict_kk.min()-1, ytrainpredict_kk.max()+1])\nplt.show()","18be2c1c":"plt.scatter(ytestpredict_kk, ytestpredict_kk-ytest_kk, c='limegreen', marker='s', edgecolors='white', s=35, alpha=0.9, label=\"Test data\")\nplt.xlabel('Predicted Values')\nplt.ylabel('Residuals')\nplt.legend(loc='upper left')\nplt.hlines(y=0, xmin=ytestpredict_kk.min()-1, xmax=ytestpredict_kk.max()+1, lw=1, color='black')\nplt.xlim([ytestpredict_kk.min()-1, ytestpredict_kk.max()+1])\nplt.show()","7ea367c5":"plt.figure(figsize=(10,8))\ny = np.array([r2_score(ytest_lr,ytestpredict_lr),r2_score(ytest_rd,ytestpredict_rd),r2_score(ytest_ls,ytestpredict_ls),r2_score(ytest_rf,ytestpredict_rf),r2_score(ytest_kk,ytestpredict_kk)])\nx = [\"LinearRegression\",\"RidgeRegression\",\"Lasso\",\"RandomForest\",\"KNN\"]\nplt.bar(x,y)\nplt.title(\"Comparison of Regression Algorithms\")\nplt.ylabel(\"r2_score\")\nplt.show()","4fd33df9":"test.info()","a7115a61":"test = test.drop(columns = ['New_Price'])\ntest = test.drop(columns = ['Unnamed: 0'])","1d7ff838":"x_testdata_rf = test.iloc[:, :].values\nytestpredict_rf = forest_rf.predict(x_testdata_rf)\ntest[\"Predicted Price(Random Forest)\"] = ytestpredict_rf\ntest","2446807c":"test['Name'] = test['Name'].map(invnamemapping).astype(object)\ntest['Location'] = test['Location'].map(invlocationmapping).astype(object)\ntest['Year'] = test['Year'].astype(int)\ntest['Kilometers_Driven'] = test['Kilometers_Driven'].astype(int)\ntest['Fuel_Type'] = test['Fuel_Type'].map(invfueltypemapping).astype(object)\ntest['Transmission'] = test['Transmission'].map(invtransmissionmapping).astype(object)\ntest['Owner_Type'] = test['Owner_Type'].map(invownertypemapping).astype(object)","30bce797":"test","c779d377":"Inferences:\n- Around 5000 cars are firsthand cars and less than 10 belong to the fourth or above category","b442aeab":"Inferences:\n- There are 11 different locations\n- The Maximum number of cars are from Mumbai\n- The Minimum number of cars are from Ahmedabad","7a63ee81":"## Cleaning Data ","04bbb326":"Thus, in conclusion, **Random Forest** is used for predicting the car prices as shown above in the last column.","4ec2a7f4":"Inferences:\n- The number of manual cars are greater than the automatic cars","abd1e8c1":"Inferences:\n- The mean price of cars is 9.4 lakhs\n- The highest price is 160 lakhs\n- The lowest price is 0.44 lakhs","f255a432":"### Model 2 : LINEAR REGRESSION (REMOVING OUTLIERS)\n### Training Data","361b3734":"#### So we have succesfully imputed all the empty values and got the numeric values from the columns of Mileage, Power, Engine and Seats of Training Data","0c6bc816":"### ANALYSIS ON ENGINE","54e9c467":"### ANALYSIS ON YEAR","a78d72f0":"### ANALYSIS ON LOCATION","5ab2be66":"Inferences: \n- Maximum no. of cars are in the price range of 0.44 to 20 lakhs","80007446":"#### FACTORS AFFECTING PRICE ","491bf053":"#### We find that the column of Engine contains unit as \"CC\"as units. ","d4fcafc7":"### ANALYSIS ON TRANSMISSION","d1fb716e":"Interpreting the coefficients:\n- Holding all other features fixed, a 1 unit increase in **Year** is associated with an **increase of Rs.0.758493 lakhs**.\n- Holding all other features fixed, a 1 unit increase in **Kilometers_Driven** is associated with an **decrease of Rs. 0.001637 lakhs**.\n- Holding all other features fixed, **Going from Automatic to Manual** is associated with an **decrease of Rs. 2.439466 lakhs**.\n- Holding all other features fixed, a 1 unit increase in **Mileage** is associated with an **decrease of Rs. 0.148787 lakhs**.\n- Holding all other features fixed, a 1 unit increase in **Engine** is associated with an **increase of Rs. 0.001102 lakhs**.\n- Holding all other features fixed, a 1 unit increase in **Power** is associated with an **increase of Rs. 0.122601 lakhs**.\n- Holding all other features fixed, a 1 unit increase in **Seats** is associated with an **decrease of Rs. 0.825532 lakhs**.","fe47cc00":"Importing library -","bc8f868e":"#### We find that the column of Power contains unit as \"bhp\"as units. ","b8d6f072":"### ANALYSIS ON PRICE","ba673926":"Inferences:\n- Maximum no. of cars are 5 seaters followed by 7 seaters","89813be3":"Evaluating the model using accuracy metrics -","2e7c09cc":"## Univariate Analysis","7a413477":"Splitting into training and testing data -","3b8b4d2b":"### ANALYSIS ON OWNER TYPE","6c11314b":"### ANALYSIS ON KILOMETERS DRIVEN","bd49347b":"Inferences\n- Maximum no. of cars are diesal cars\n- Only two cars are electric cars and is at the minimum ","d20aebb6":"### Inferences:\n - From the above five models, it will be our best interest to use Random Forest Regression Model for our objective.","96f06ba9":"Since the relationship between variables is not clear from the above graphs, lmplot is used in the below graphs to determine the regression line that is followed by most of the points.","36d041d2":"### Heatmap to show the relationships of the variables using Correlation Matrix ","b73b5bbb":"## Model 3: LINEAR REGRESSION (RIDGE REGRESSION)\n### Training Data","ed25a49b":"Inferences \n- 2941 cars have mileage above the mean mileage\n- 3073 cars have mileage below the mean mileage","1cc4fe4e":"- The best value for KNN is n=5","d79747eb":"#### Now, we replace the null values as well as \"0.0\" with the mean of the non-null data of their respective columns (Mileage, Engine, Power and Seat)","55d18faf":"### ANALYSIS ON FUEL TYPE","8ee2bb09":"#### Univariate analysis is completed.","a0175b28":"Creating the model and fitting it -","22a12560":"Inferences:\n- Both Bentley and Lambhorgini have the same power almost which is more than the rest. Ambassador has the least.","9c935fd6":"Inferences:\n- The first handed cars are the most expensive.\n- The fourth and above handed cars have the largest engine displacement volume.\n- Mileage is best for first handed cars.","c834c797":"#### Here, every data of each columns is inversed mapped in the testing dataset and mark the data not present in the mapping of training dataset previously as zero.  ","ee7eb137":"#### Here, the columns of the training data, having strings as values, are mapped from 1 to 6020 since we want each values to have some meaningful numerical value and to increase accuracy of predictions.\n#### Below, every data of each columns are mapped with some values from the training dataset","ea6e44f6":"#### From the above, we can see the  columns of Mileage, Seats, Engine and Power have zero as a data. For our convenience, we consider it as an empty data and will impute it with mean or mode.\n#### Also, the columns of Mileage, Engine and Power are of string types and so we need to remove the string associated with it and convert it to float type","1baa0ea3":"Predicting the values on training and test dataset separately -","d0a439d8":"### ANALYSIS ON SEATS","7917121e":"#### FACTORS AFFECTING POWER","010af725":"#### FACTORS AFFECTING MILEAGE","f62f98d3":"#### We find that the column of Mileage contains unit as either \"kg\/gm\" or \"kmpl\" as units. ","de1d44ce":"Inferences:\n- Datsun has the maximum mileage among all and Lambhorgini has the lowest mileage.\n- The recent cars have slightly better mileage than old ones.\n- CNG gives the best mileage whereas the others- LPG,Diesel,Electric and Petrol are almost the same.\n- Manual cars have a greater mileage than automatic cars.","6312d7af":"A new column brand from the column name is added for the analysis.","8c98a75b":"INFERENCE:\n- The 2 seater cars have the highest price and the price of cars with 9 and 10 seats is the minimum.\n- The first handed cars are the most expensive and fourth and above are the cheapest.\n- Lambhorgini has the highest price whereas Ambassador has the lowest.","495d389d":"\n\n## Objective:\n### To predict the costs of used cars given the data collected from various sources and distributed across various locations in India.\n\n## Features:\n\n- Name: The brand and model of the car.\n- Location: The location in which the car is being sold or is available for purchase.\n- Year: The year or edition of the model.\n- Kilometers_Driven: The total kilometres driven in the car by the previous owner(s) in KM.\n- Fuel_Type: The type of fuel used by the car.\n- Transmission: The type of transmission used by the car.\n- Owner_Type: Whether the ownership is Firsthand, Second hand or other.\n- Mileage: The standard mileage offered by the car company in kmpl or km\/kg\n- Engine: The displacement volume of the engine in cc.\n- Power: The maximum power of the engine in bhp.\n- Seats: The number of seats in the car.\n- New_Price: The price of a new car of the same model.\n- Price: The price of the used car in INR Lakhs.\n\n\n#### For the above purpose we need to import some necessary modules and packages given as below:\n","930cb424":"After inverse mapping and converting some some floats to integers, we get the following:","f1c303e3":"# EVALUATION","6bfc9777":"### Cleaning testing data","d1d9d0b9":"### ANALYSIS ON MILEAGE","7211b682":"INFERENCE: \n- The cars of Coimbatore have the maximum price and Kolkata has the minimum price car.\n- Automatic cars have more price than manual ones.\n- Diesel and Electric cars have almost the same price which is maximum and LPG cars have the lowest price.","89753b69":"Interpreting the coefficients:\n- Holding all other features fixed, a 1 unit increase in **Year** is associated with an **increase of Rs. 0.598566 lakhs**.\n- Holding all other features fixed, a 1 unit increase in **Kilometers_Driven** is associated with an **decrease of Rs. 0.000932 lakhs**.\n- Holding all other features fixed, **Going from Automatic to Manual** is associated with an **decrease of Rs. 2.666072 lakhs**.\n- Holding all other features fixed, a 1 unit increase in **Mileage** is associated with an **decrease of Rs. 0.071795 lakhs**.\n- Holding all other features fixed, a 1 unit increase in **Engine** is associated with an **increase of Rs. 0.001326 lakhs**.\n- Holding all other features fixed, a 1 unit increase in **Power** is associated with an **increase of Rs. 0.106093 lakhs**.\n- Holding all other features fixed, a 1 unit increase in **Seats** is associated with an **decrease of Rs. 0.490021 lakhs**.","eb86221e":"### ANALYSIS ON POWER","dcc1a3fa":"# EDA ","9e01e1a8":"# Labeling ","99ce606c":"## Bivariate Analysis","4fef5fc7":"Interpreting the coefficients:\n- Holding all other features fixed, a 1 unit increase in **Year** is associated with an **increase of Rs. 0.758493 lakhs**.\n- Holding all other features fixed, a 1 unit increase in **Kilometers_Driven** is associated with an **decrease of Rs. 0.001637 lakhs**.\n- Holding all other features fixed, a 1 unit increase in **Mileage** is associated with an **decrease of Rs. 0.148787 lakhs**.\n- Holding all other features fixed, a 1 unit increase in **Engine** is associated with an **increase of Rs. 0.001102 lakhs**.\n- Holding all other features fixed, a 1 unit increase in **Power** is associated with an **increase of Rs. 0.122601 lakhs**.\n- Holding all other features fixed, a 1 unit increase in **Seats** is associated with an **decrease of Rs. 0.825532 lakhs**.","75f710f5":"Interpreting the coefficients:\n- Holding all other features fixed, a 1 unit increase in **Year** is associated with an **increase of Rs. 0.758469 lakhs**.\n- Holding all other features fixed, a 1 unit increase in **Kilometers_Driven** is associated with an **decrease of Rs. 0.001637 lakhs**.\n- Holding all other features fixed, **Going from Automatic to Manual** is associated with an **decrease of Rs. 2.444360 lakhs**.\n- Holding all other features fixed, a 1 unit increase in **Mileage** is associated with an **decrease of Rs. 0.148774 lakhs**.\n- Holding all other features fixed, a 1 unit increase in **Engine** is associated with an **increase of Rs. 0.001103 lakhs**.\n- Holding all other features fixed, a 1 unit increase in **Power** is associated with an **increase of Rs. 0.122569 lakhs**.\n- Holding all other features fixed, a 1 unit increase in **Seats** is associated with an **decrease of Rs. 0.825729 lakhs**.","132cb16b":"Inferences \n- 7 cars have minimum power\n- 1 car has maximum power","0fc99815":"## Model 5: RANDOM FOREST REGRESSION\n### Training Data","5a5422ce":"## Model 4: LINEAR REGRESSION (LASSO)\n### Training Data","14293dfb":"### Cleaning Training Data","d93e3f42":"Inferences:\n- The maximum number of cars are from the year 2014 although the latest year in the data list is 2019 which had considerably lesser no. of cars ","59251e16":"### Model 1:  LINEAR REGRESSION \n### Training Data","cdd6e92e":"# PREDICTION\nRandom Forest Regression Model has been used for predicting the costs of used cars given the data collected from various sources and distributed across various locations in India.","cfe80af1":"## Model 6: KNN\n### Training Data"}}