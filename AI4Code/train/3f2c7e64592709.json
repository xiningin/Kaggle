{"cell_type":{"7fd7e23f":"code","34b330c3":"code","ffde8567":"code","7f4e5bd4":"code","60c0e78e":"code","19a39819":"code","c145ebf4":"code","72fcc2e5":"code","196b002e":"code","b7569254":"code","1c937e4c":"code","8ab2e57c":"code","143557e8":"code","c343578c":"code","af9a5c81":"code","5cfc27f6":"markdown","90c443fc":"markdown","45695ee5":"markdown","e49c4c2e":"markdown","b9d86585":"markdown","32cc7c57":"markdown","bbc52eaf":"markdown","4a82bf21":"markdown","d769341d":"markdown","6f68e5d7":"markdown","c2fc981b":"markdown","fc530f12":"markdown","2a5a97db":"markdown","82bc11fe":"markdown","5f5a5ef8":"markdown","b4c10a7e":"markdown","34e93c9f":"markdown","2c1e3728":"markdown"},"source":{"7fd7e23f":"import numpy as np\nnp.random.seed(1000)\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split","34b330c3":"import keras\nfrom keras.layers import Convolution2D, MaxPooling2D, Flatten, Dense, BatchNormalization, Dropout\nfrom keras.models import Sequential","ffde8567":"import os\nimport cv2\nfrom PIL import Image","7f4e5bd4":"DATA_DIR = '..\/input\/cell_images\/cell_images\/'\nSIZE = 64\ndataset = []\nlabel = []","60c0e78e":"parasitized_images = os.listdir(DATA_DIR + 'Parasitized\/')\nfor i, image_name in enumerate(parasitized_images):\n    try:\n        if (image_name.split('.')[1] == 'png'):\n            image = cv2.imread(DATA_DIR + 'Parasitized\/' + image_name)\n            image = Image.fromarray(image, 'RGB')\n            image = image.resize((SIZE, SIZE))\n            dataset.append(np.array(image))\n            label.append(0)\n    except Exception:\n        print(\"Could not read image {} with name {}\".format(i, image_name))","19a39819":"uninfected_images = os.listdir(DATA_DIR + 'Uninfected\/')\nfor i, image_name in enumerate(uninfected_images):\n    try:\n        if (image_name.split('.')[1] == 'png'):\n            image = cv2.imread(DATA_DIR + 'Uninfected\/' + image_name)\n            image = Image.fromarray(image, 'RGB')\n            image = image.resize((SIZE, SIZE))\n            dataset.append(np.array(image))\n            label.append(1)\n    except Exception:\n        print(\"Could not read image {} with name {}\".format(i, image_name))","c145ebf4":"plt.figure(figsize = (20, 12))\nfor index, image_index in enumerate(np.random.randint(len(parasitized_images), size = 5)):\n    plt.subplot(1, 5, index+1)\n    plt.imshow(dataset[image_index])","72fcc2e5":"plt.figure(figsize = (20, 12))\nfor index, image_index in enumerate(np.random.randint(len(uninfected_images), size = 5)):\n    plt.subplot(1, 5, index+1)\n    plt.imshow(dataset[len(parasitized_images) + image_index])","196b002e":"classifier = None\nclassifier = Sequential()\nclassifier.add(Convolution2D(32, (3, 3), input_shape = (SIZE, SIZE, 3), activation = 'relu'))\nclassifier.add(MaxPooling2D(pool_size = (2, 2), data_format=\"channels_last\"))\nclassifier.add(BatchNormalization(axis = -1))\nclassifier.add(Dropout(0.2))\nclassifier.add(Convolution2D(32, (3, 3), activation = 'relu'))\nclassifier.add(MaxPooling2D(pool_size = (2, 2), data_format=\"channels_last\"))\nclassifier.add(BatchNormalization(axis = -1))\nclassifier.add(Dropout(0.2))\nclassifier.add(Flatten())\nclassifier.add(Dense(activation = 'relu', units=512))\nclassifier.add(BatchNormalization(axis = -1))\nclassifier.add(Dropout(0.2))\nclassifier.add(Dense(activation = 'relu', units=256))\nclassifier.add(BatchNormalization(axis = -1))\nclassifier.add(Dropout(0.2))\nclassifier.add(Dense(activation = 'sigmoid', units=2))\nclassifier.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])\nprint(classifier.summary())","b7569254":"from keras.utils import to_categorical\n\nX_train, X_test, y_train, y_test = train_test_split(dataset, to_categorical(np.array(label)), test_size = 0.20, random_state = 0)","1c937e4c":"history = classifier.fit(np.array(X_train), \n                         y_train, \n                         batch_size = 64, \n                         verbose = 2, \n                         epochs = 50, \n                         validation_split = 0.1,\n                         shuffle = False)","8ab2e57c":"print(\"Test_Accuracy: {:.2f}%\".format(classifier.evaluate(np.array(X_test), np.array(y_test))[1]*100))","143557e8":"from keras.preprocessing.image import ImageDataGenerator\n\ntrain_generator = ImageDataGenerator(rescale = 1\/255,\n                                     zoom_range = 0.3,\n                                     horizontal_flip = True,\n                                     rotation_range = 30)\n\ntest_generator = ImageDataGenerator(rescale = 1\/255)\n\ntrain_generator = train_generator.flow(np.array(X_train),\n                                       y_train,\n                                       batch_size = 64,\n                                       shuffle = False)\n\ntest_generator = test_generator.flow(np.array(X_test),\n                                     y_test,\n                                     batch_size = 64,\n                                     shuffle = False)","c343578c":"history = classifier.fit_generator(train_generator,\n                                   steps_per_epoch = len(X_train)\/64,\n                                   epochs = 50,\n                                   shuffle = False)","af9a5c81":"print(\"Test_Accuracy(after augmentation): {:.2f}%\".format(classifier.evaluate_generator(test_generator, steps = len(X_test), verbose = 1)[1]*100))","5cfc27f6":"## Improving the accuracy with Augmentation\n\nI will use **ImageDataGenerator** to generate more image data and then train the model on the same.","90c443fc":"### Training the model\n\nAs the training data is now ready, I will use it to train the classifier.","45695ee5":"Now I will use `fit_generator` methods to train the model and test on the validation data.","e49c4c2e":"### Exploring new accuracy\n\nFinally, after training on augmented data, I'll check the accuracy on the testing data.","b9d86585":"### Uninfected images\n\nI randomly select 5 values from the number of uninfected images and then display them in a row. I add the count of images of parasitized images to these index such that I am now showing images with label 1.","32cc7c57":"### Parasitized cell images\n\nI iterate through all images in the **Parasitized** folder. I check if the file extension of the file being read is *png*.\nI then resize the image to 64x64 and then save it to the `dataset` variable as numpy array. The label for this is set as `0`.","bbc52eaf":"### Build the classifier\n\nI create a Sequential model with all the layers. I used the metric as `accuracy`.","4a82bf21":"# Classification using Keras\n\nIn this notebook, I'll work with the Malaria Cell Images dataset to classify cells as either **Parasitized** or **Uninfected**. I'll use **Convolutional Neural Networks** to make the classification.","d769341d":"### Parasitized images\n\nI randomly select 5 values from the number of parasitized images and then display them in a row.","6f68e5d7":"## Accuracy calculation\n\nI'll now calculate the accuracy on the test data.","c2fc981b":"As we can see, with **Data Augmentation** I was able to improve the accuracy further. Such a technique can be highly useful whenever we have limited dataset. This can ensure proper training of the model.","fc530f12":"### Split the dataset\n\nI split the dataset into training and testing dataset.\n1. Training data: 80%\n2. Testing data: 20%","2a5a97db":"## Applying CNN\n\nI'll apply Convolutional Neural Networks with 2 Convolutional Layers followed by 2 Dense layers.","82bc11fe":"## Visualize data\n\nNow, I'll take a look at 5 random images from both **Parasitized** and **Uninfected** pools.","5f5a5ef8":"## Import dataset\n\nI'll now import the dataset and take a look at the two types of image data available. I'll use the image size to be 64x64.","b4c10a7e":"## Conclusion\n\nIn this notebook, I worked with the Malaria Cell Images dataset and applied **Convolutional Neural Networks** using Keras.\nI observed high accuracy which further increased with data augmentation.","34e93c9f":"### Uninfected cell images\n\nI iterate through all images in the **Uninfected** folder. I check if the file extension of the file being read is *png*.\nI then resize the image to 64x64 and then save it to the `dataset` variable as numpy array. The label for this is set as `0`.","2c1e3728":"## Import libraries\n\nThe first step is to import all the necessary packages including `sklearn`, `pandas`, `numpy`, `matplotlib` and `keras`. I'll work with **Tensorflow** as the backend. I'll also import `Image`, `cv2` and `os` to work with images."}}