{"cell_type":{"97df029d":"code","7b9cefa7":"code","c125a66c":"code","1559fd43":"code","324ed5bf":"code","9648b49f":"code","90c9e713":"code","8abdb7cd":"code","40e6c4ac":"code","83a52652":"code","bf9ac057":"code","d1e0cfa4":"code","71771462":"code","c20d6ea4":"code","200db8f6":"code","1fa02c25":"code","992aeb93":"code","d55ba274":"code","ffa10701":"code","d937438b":"code","28a9b9b3":"code","6b845c2f":"code","e2016098":"code","e54bd01d":"code","15abcaaf":"code","de97b484":"code","b93c37ce":"code","5053c668":"code","92178d54":"code","8b904d2e":"code","c621ad41":"code","acb157bb":"code","0ae8648a":"code","42917cd9":"code","9492d0b2":"code","28807a01":"code","23da9ad3":"code","f25af887":"code","6fa1dd39":"code","c3e6e81e":"code","f75a4d2a":"code","24681bbc":"code","197aa546":"code","83cca04b":"code","3097120c":"code","126dee1e":"code","7ec228f0":"code","f96f6a6c":"code","b5402c57":"code","c72b845a":"code","675f462e":"code","0e117379":"code","97286ff9":"code","71905147":"code","8b2501f3":"code","d0125c30":"code","b6ab8830":"code","17bf6855":"markdown","57ef72e8":"markdown","0007768e":"markdown","63a19b26":"markdown","87209816":"markdown","d142b7ac":"markdown","64e36cf3":"markdown","dc5beb6c":"markdown","16e86e56":"markdown","9df0fb4c":"markdown","43362b3c":"markdown","4532aa9d":"markdown","f14ee790":"markdown","7a196349":"markdown","9079a40d":"markdown","9ca0ce5a":"markdown","b6ede858":"markdown","708a25ba":"markdown","4d28fc27":"markdown","30d5a399":"markdown","705a5ce0":"markdown","da2a7909":"markdown","c83c1117":"markdown","aa86566c":"markdown","b56a790c":"markdown","c33b3bbe":"markdown","9661f4a9":"markdown","823500ba":"markdown","d7731989":"markdown","f3f86996":"markdown","1153299f":"markdown","affab9ac":"markdown","b59893ac":"markdown","5bfeaa94":"markdown","3d9e650f":"markdown","ca154ca2":"markdown","ac52955e":"markdown","dae8bcf7":"markdown","c1214ef5":"markdown","74eb90be":"markdown","49d05c36":"markdown","17b6a98d":"markdown","37f9e81a":"markdown","a6914efc":"markdown","52d9ddb4":"markdown","e3d8aa9b":"markdown","1173a9f8":"markdown"},"source":{"97df029d":"#importing libraries for the analysis:\nimport pandas as pd\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom matplotlib import dates\n# Load specific forecasting tools\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\n!pip install --upgrade numpy==1.18.3 \nimport numpy as np\n!pip install pmdarima\nfrom pmdarima import auto_arima                              # for determining ARIMA orders","7b9cefa7":"# Converting the csv files to pandas dataframe:\ncalender=pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/calendar.csv',parse_dates=True)\nsales=pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sales_train_evaluation.csv',parse_dates=True)\nprices=pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sell_prices.csv')\ncalender['date']=pd.to_datetime(calender['date'])\nsample_submission=pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sample_submission.csv')","c125a66c":"# get the dimensions of the first dataframe 'calender' and show the first five rows:\nprint(calender.shape)\ncalender.head()","1559fd43":"# Information on the different columns of the dataframe:\ncalender.info()","324ed5bf":"# get the dimensions of the first dataframe 'sales' and show the first five rows:\nprint(sales.shape)\nsales.head(5)","9648b49f":"# Information on the different columns of the dataframe:\nsales.info()","90c9e713":"# get the dimensions of the first dataframe 'prices' and show the first five rows:\nprint(prices.shape)\nprices.head()","8abdb7cd":"# Information on the different columns of the dataframe:\nprices.info()","40e6c4ac":"#Converting dtypes to 'categorical' and filling nans with -1( we use -1 to further reduce the dataset size as compared to nans) for all the 3 dataframes:\ncalender=calender.fillna(-1)\ncalender[['event_type_1','event_type_2','event_name_1','event_name_2']]=calender[['event_type_1','event_type_2','event_name_1','event_name_2']].astype(('category'))\n\nsales[['id','item_id','cat_id','store_id','state_id']]=sales[['id','item_id','cat_id','store_id','state_id']].astype('category')\n\n# For prices column we combine the item_id and store_id to form the id of the data which can later be joined with sales dataframe:\nprices['id']=prices['item_id']+'_'+prices['store_id']+'_evaluation'\n\nprices[['id','store_id','item_id']]=prices[['id','store_id','item_id']].astype('category')\n# We also drop store_id and item_id as they no longer play any role in the dataset and all the information is stored in 'id'.\nprices.drop(['store_id','item_id'],axis=1,inplace=True)\n# We also drop dept_id from sales as we will note be using the column:\nsales.drop('dept_id',axis=1,inplace=True)\n","83a52652":"# This very convinient piece of code is commonly found on kaggle competitions which performs the above tasks for all the rows:\ndef reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df\n    ","bf9ac057":"# Applying the above function to the prices dataframe and calander dataframe:\n# We apply the function to sales dataframe after applying melt to sales:\nprices=reduce_mem_usage(prices)\ncalender=reduce_mem_usage(calender)","d1e0cfa4":"# We use pd.melt to do the task above, which essentially bring the table to the format given below:\nsales=pd.melt(sales,id_vars=['id','item_id','cat_id','store_id','state_id'])\nsales.head()","71771462":"sales=reduce_mem_usage(sales)","c20d6ea4":"# Here we merge all three dataframes:\ndf=pd.merge(pd.merge(calender[['date','d','wm_yr_wk',\n       'event_name_1', 'event_type_1', 'event_name_2', 'event_type_2',\n       'snap_CA', 'snap_TX', 'snap_WI']],sales,left_on='d',right_on='variable',how='inner'),prices,left_on=['id','wm_yr_wk'],right_on=['id','wm_yr_wk'],how='inner')\n\n# We get rid of the columns on which the dataframe was joined on as we already have the date column instead:\ndf.drop(['d','variable','wm_yr_wk'],axis=1,inplace=True)\n# Rearranging the columns to our convinience:\ncols=['date','id', 'item_id', 'cat_id', 'store_id', 'state_id','sell_price','event_name_1', 'event_type_1', 'event_name_2','event_type_2', 'snap_CA', 'snap_TX', 'snap_WI','value']\ndf=df[cols]\n","200db8f6":"df.tail()","1fa02c25":"# Given below is information on the various columns of the dataframe:\ndf.info()","992aeb93":"df.tail()","d55ba274":"df[['date','value']].groupby('date').agg({'value':'sum'}).plot(figsize=(20,8),grid=True);","ffa10701":"df.loc[(df.date>'2015-01-01')&(df.date<'2016-01-01')][['date','value']].groupby('date').agg({'value':'sum'}).plot(figsize=(20,8),grid=True);","d937438b":"ax=df.loc[(df.date>'2014-08-01')&(df.date<'2014-09-01')][['date','value']].groupby('date').agg({'value':'sum'}).plot(figsize=(20,8))\nax.xaxis.set_minor_locator(dates.DayLocator())\nax.xaxis.set_minor_formatter(dates.DateFormatter(\"%a-%B-%d\"))\nax.tick_params(which='minor', rotation=45)\nax.grid(b=True, which='minor')","28a9b9b3":"storewise=df[['date','store_id','value']].groupby(['date','store_id']).agg({'value':'sum'})\nstorewise.reset_index(inplace=True)\nstorewise.pivot(index=\"date\", columns=\"store_id\", values=\"value\").rolling(window=90).mean().plot(figsize=(20,8),grid=True,title='Sum of sales by store');","6b845c2f":"category_wise=df[['date','cat_id','value']].groupby(['date','cat_id']).agg({'value':'sum'})\ncategory_wise.reset_index(inplace=True)\ncategory_wise.pivot(index=\"date\", columns=\"cat_id\", values=\"value\").rolling(window=90).mean().plot(figsize=(20,8),grid=True,title='Sum of sales by category');","e2016098":"statewise=df[['date','state_id','value']].groupby(['date','state_id']).agg({'value':'sum'})\nstatewise.reset_index(inplace=True)\nstatewise.pivot(index=\"date\", columns=\"state_id\", values=\"value\").rolling(window=90).mean().plot(figsize=(20,8),grid=True,title='Sum of sales by state');","e54bd01d":"item1=df[['item_id','sell_price','value']].loc[df['item_id']=='HOBBIES_1_008']\nsns.barplot(x='sell_price',y='value',data=item1).set_title('Item1')\nsns.set(rc={'figure.figsize':(10,5)})\nplt.show()\n","15abcaaf":"item1= df[['cat_id','sell_price','value']].loc[df['cat_id']=='FOODS']\nsns.scatterplot(x='sell_price',y='value',data=item1).set_title('Effect of price on sales for food')\nsns.set(rc={'figure.figsize':(10,5)})\nplt.show()","de97b484":"ax=sns.barplot(x='event_name_1',y='value',data=df[['event_name_1','value']].groupby('event_name_1').agg({'value':'mean'}).sort_values(['value']).reset_index())\nax.tick_params(which='both',rotation=90)\nsns.set(rc={'figure.figsize':(20,8)})","b93c37ce":"fig, ax =plt.subplots(1,3)\nsns.barplot(x='snap_CA',y='value',data=df[['snap_CA','value']].groupby('snap_CA').agg({'value':'mean'}).sort_values(['value']).reset_index(),ax=ax[0])\nsns.set(rc={'figure.figsize':(10,6)})\nsns.barplot(x='snap_TX',y='value',data=df[['snap_TX','value']].groupby('snap_TX').agg({'value':'mean'}).sort_values(['value']).reset_index(),ax=ax[1])\nsns.barplot(x='snap_WI',y='value',data=df[['snap_WI','value']].groupby('snap_WI').agg({'value':'mean'}).sort_values(['value']).reset_index(),ax=ax[2])\nplt.show()","5053c668":"df['snap']=np.where(df['state_id']=='CA',df['snap_CA'] ,np.where( df['state_id']=='TX',df['snap_TX'],np.where(df['state_id']=='WI',df['snap_WI'],0 )))","92178d54":"item1=df[['date', 'id', 'cat_id', 'sell_price','event_name_1',  'event_name_2','snap_CA', 'snap_TX', 'snap_WI','snap', 'value']].loc[df['id']=='HOBBIES_1_001_CA_1_evaluation']","8b904d2e":"train=item1[:-28]\ntest=item1.iloc[-28:]","c621ad41":"len(test)","acb157bb":"item1.set_index('date')\nauto_arima(train['value'],seasonal=True,m=7,start_Q=0,start_P=0).summary()","0ae8648a":"model = SARIMAX(train['value'],exog=train[['sell_price','snap']].astype('float'),order=(0,1,1))\nresults = model.fit()\nresults.summary()","42917cd9":"exog=test[['snap', 'sell_price']].astype(float)\npredictions=results.predict(start=len(train),end=len(train)+len(test)-1,exog=exog)","9492d0b2":"predictions=predictions.to_numpy()","28807a01":"test=test.copy()\n\ntest['predictions']=predictions","23da9ad3":"test.reset_index(drop=True,inplace=True)","f25af887":"test[['value','predictions']].plot()","6fa1dd39":"from statsmodels.tools.eval_measures import mse,rmse\nRMSE= rmse(test['value'],test['predictions'])\nprint(\"RMSE:\",RMSE)","c3e6e81e":"#Importing required libraries:\nimport pandas as pd\nfrom fbprophet import Prophet\nfrom tqdm.notebook import tqdm","f75a4d2a":"# Forming the holidays dataframe:\nholidays_df=df[['date','event_name_1']].loc[df['event_name_1']!=-1]\nholidays_df.drop_duplicates(inplace=True)","24681bbc":"holidays_df.columns=['ds','holiday']\nholidays_df","197aa546":"# Making the columns in the required format:\ncols=['ds','y','sell_price','snap']\nid=sample_submission['id']","83cca04b":"# Training and fitting the data:\nitem=train[['date','value','sell_price','snap']]\nitem.columns=cols  \nm = Prophet(weekly_seasonality=True,holidays=holidays_df)\nm.add_regressor('sell_price')\nm.add_regressor('snap')\nm.fit(item[-365:])","3097120c":"#  Forming the dataframe for our forecast:\nfuture = m.make_future_dataframe(periods=28)\nfuture['sell_price']=item1['sell_price'][-393:].to_numpy()\nfuture['snap']=item1['snap'][-393:].to_numpy()","126dee1e":"# Forecasting the data:\nforecast = m.predict(future)[-28:]","7ec228f0":"# Putting the forecasted data with the actual values to test:\npreds=forecast['yhat']\npreds=preds.to_numpy()\ntest['yhat']=preds","f96f6a6c":"# Plotting the data:\nm.plot(m.predict(future));","b5402c57":"test[['yhat','value']].plot();","c72b845a":"RMSE = rmse(test['yhat'],test['value'])\nprint(\"RMSE:\",RMSE) ","675f462e":"# Forming the necessary dataframes for our final model:\ncols=['ds','y','sell_price','snap_TX']\nid=sample_submission['id']\n# Forming the submission dataframe:\nsubmission=pd.DataFrame(index=('F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10',\n       'F11', 'F12', 'F13', 'F14', 'F15', 'F16', 'F17', 'F18', 'F19', 'F20',\n       'F21', 'F22', 'F23', 'F24', 'F25', 'F26', 'F27', 'F28'))\nfuture_data=pd.merge(prices[['id','sell_price','wm_yr_wk']],calender[['date','wm_yr_wk']],left_on='wm_yr_wk',right_on='wm_yr_wk')","0e117379":"# To find where 'ID' for California ends and Texas begins:\nprint(id[id=='HOBBIES_1_001_TX_1_evaluation'].index)\nprint(id[id=='HOBBIES_1_001_WI_1_evaluation'].index)","97286ff9":"def predict(i) :\n   item=df[['date','value','sell_price','snap_TX']].loc[df['id']==i]\n   future_id=future_data[['sell_price','date']].loc[future_data['id']==i].sort_values('date')\n   item.columns=cols  \n   m = Prophet(yearly_seasonality=False,daily_seasonality=False,holidays=holidays_df)\n   m.add_regressor('sell_price')\n   m.add_regressor('snap_TX')\n   m.fit(item[-365:])\n   future = m.make_future_dataframe(periods=28)[-28:]\n   future['sell_price']=future_id['sell_price'][-28:].to_numpy()\n   future['snap_TX']=calender['snap_TX'][-28:].to_numpy()\n   forecast = m.predict(future)[['yhat']]\n   submission[i]=forecast.to_numpy()\n   if n%100==0:\n     submission.to_csv('submission_TX.csv')\nfor i,n in zip(tqdm(id[47590:47592]),range(0,2)):\n  predict(i)","71905147":"submission.tail()","8b2501f3":"# Transposing them from being horizontal to vertical:\nTX1=TX1.transpose()\nTX2=TX2.transpose()\nWI1=WI1.transpose()\nWI2=WI2.transpose()\nWI3=WI3.transpose()\nCA1=CA1.transpose()\nCA2=CA2.transpose()\nCA3=CA3.transpose()\nCA4=CA4.transpose()\nCA5=CA5.transpose()\nCA6=CA6.transpose()\nCA7=CA7.transpose()\nCA8=CA8.transpose()","d0125c30":"#Combining all of them into one dataframe:\nsubmission=CA1.append([CA2,CA3,CA4,CA5,CA6,CA7,CA8,TX1,TX2,WI1,WI2,WI3])","b6ab8830":"# Formatting to specifications for kaggle submission:\nsubmission.reset_index(inplace=True)\nsubmission.columns=[sample_submission.columns]\nsubmission.to_csv('submission.csv')\nsubmission=pd.read_csv('\/content\/submission.csv')\nfinal=sample_submission[:30490].append(submission)\nfinal.drop('Unnamed: 0',inplace=True,axis=1)\nfinal.reset_index(drop=True,inplace=True)\nfinal.to_csv('final_submission.csv')","17bf6855":"Next, to further reduce the size of the dataframes we downscale the integer and float types of the various columns in the dataframe. For eg, if the data has a range less that int(8) but the data type is attributed to int(32), the code below reduces to the datatype to int(8) saving a lot  of storage.","57ef72e8":"## Modelling using Facebook's Prophet:\nFor our final model,we will be using Facebook's Prophet. Now how we will implement is as so:\nRunning on only one vm\/machine will take a long time. Hence we are dividing the work into three, and for convinience we will be dividing by state. Colab will be predicting for the items in stores in Texas, I will be using my own machine for California and Wisconsin will be run on Kaggle's notebook. The code will be the same for all with a slight modification. After that all the predictions will be combined together on this notebook made in Google's Colaboratory.","0007768e":"We observe that more expensive items are much less often bought and the graph is highly right skewed. A similar trend is observed in all three categories. \n\nWe can see that prices play a big role in the sales as expected.\nNext we will see how events affect the sales.\n\n### Effect of events on sales:","63a19b26":"Next, we make the dataframe sales into a more usable format where each day is a column rather than a row. This essentially makes the table vertical.","87209816":"Now we will take a look at how sales varies by state.","d142b7ac":"With this we have come to an end of this section. Now we can proceed with our Exploratory Data Analysis for our final dataset.","64e36cf3":"We have got the orders to be (0,1,1)X(0,0,0,7), now we will input these orders into the model and form our predictions.","dc5beb6c":"There is a marked difference in this case. The model seems to performs quite a lot better. This does not mean that our model is anywhere close to being optimum. There are many points for improvement and more sophisticated, better tuned models are likely to perfrom a lot better. Let us take a look at the rmse values.","16e86e56":"We will now use our memory reduction function on this dataframe as pandas\/numpy processes data much slower on multiple columns as compared to multiple rows.","9df0fb4c":"Given below is a brief look at our final dataframe:","43362b3c":"Again, as expected, we see similar trends and seasonal compenents as the other graphs above. The main point to note is the difference between the sales in terms of sales and how WI has such a high growth rate in comparison to TX.","4532aa9d":"Given below is simply a sample of how the output will look. All the subsets are combined and made into the desired format and submitted. To get more values change the id range to whatever you feel in the code above. Also the model above is not perfect either. Feel free to tweak the parameters in the library for better results.","f14ee790":"# A brief look at the various dataframes given:\nNow that we have assigned the csv files to dataframes, let us take a look at the data given to us.","7a196349":"In all three there is a notable difference in terms of sales showing that there are more sales when SNAP is allowed which is intuitve but the scale is also quite notable and hence will be important for our analysis to include.\n","9079a40d":"## Choosing a model: \nNow we will decide which model to choose. For doing so we will run the model on a single item for a single store and we will check \n1. The accuracy\n2. The run time\nIf the run time for one of the models far exceeds the other, regardless of the accuracy we will be using the faster model.\nFirst we will start off with forming a dataset with one item.","9ca0ce5a":"## Forming the final dataframe:\nNow that we have optimized our individual dataframes we will combine them three to make a convinient dataframe with all the information needed for our analysis in one place.","b6ede858":"Given above is the plot for the total duration for all the sales of all items. There are a few notable features. One is the general upward trend seen over the years. There also seems to be a visible seasonality that is consistent through the years. Another point that can be noted is the huge dip around the christmas season as well as lesser dips in other points which indicates the importance of inputting holiday details.\n\nNext we will take a look at one years worth of data","708a25ba":"Straight away we can notice a few important points. For one, we see an inital upward trend followed by stability over the past few years and a very gradual rise overall. Most prominent is the seasonality in the year which is very pronounced and consistent through the years. There a few anomalies like the WI_2 store shows a great surge towards the end and a similar surge is notice in CA_2. We can see that there are distinct differences between the stores.","4d28fc27":"The RMSE values are a lot lower than that than using ARIMA, that too without using exogenous variables. Hence we will proceed with Facebook's Prophet as our final model. We will include exogenous models for our final model. Even the run times are considerably lower for Prophet.","30d5a399":"### Sum of sales by state:","705a5ce0":"Now we know how to divide the predictions between the various. We will be doing our predictions below and will run it on a for loop. Note that we save the data every 100 loops so as to not lose the data in case the runtime gets disconnected.","da2a7909":"With that,we have come to an end to the project! Hope you enjoyed it!","c83c1117":"# Overview of the project:\nBefore we start with the EDA, we need to figure out what we need to look for. Especially considering the size of the dataframe and the reduced computational power I personally possess, the main aim of the EDA is going to select a suitable model for our final analysis. Especially considering the complex heriarchy and the many variables we have to choose how we perform our EDA very conservatively. Performing EDA will only work in subsets of the main dataset(trying otherwise inevitibly leads to Colab crashing). So we will decide now what we need to do in our EDA section to get to our goal of choosing an appropriate model.\n\nBefore we even start our EDA we can start by eliminating models that will not be suitable for our use. \n\nSome basic concepts:\nTop down model: In this kind of models, we look at all the 3049 items, and forecast them for all the stores together rather than forecast for individual stores. Since sales in the stores are correlated, after we forecast for the items, we can distribute the items according to the store's market share. \nThe primary advantage of this kind of a method is that we have to run a relatively smaller number of time series analysis models at the sacrifice at some approximation.\nBottom up model: This is right the opposite of the model above. We make a forecast for every item in every store individually. Which means that we will need to run 30490 models which is quite an incredible number. The advantage being we wont have to approximately divide the market share and predict. Another disadvantage to note is that sometimes, trends which can be noted in the overall scheme goes missing for individual store, but if that is prevelant here we can find out.\n\nGlobal model: These models considering all the items together as sales of each are not independant to one another.\n\n### Elimination of models: \nWe will start by eliminating the most complex models and going from there.\n1. RNN's(Recurrent Neural Networks) with LSTM via the global  model. Here we feed the entire final dataset to the RNN. The advantage of this is that the RNN can potentially figure the dependance of the various variables on each other. It is an extremely complex model which we cannot simply run due to the fact that putting the entire dataset into any model to process is simply out of scope in terms of computational power, RAM, complexity of hyper parameter tuning etc.\n2. Another such global bottom up method is VAR,VARIMA,seasonal VARIMA etc, again,due to its sheer complexity, various tuning difficulties, size etc we will not even consider these methods.\n3. RNN's in general: Even the simplest two layer RNN done for 3049 items is simply out of our scope and even if it was computationally viable, it would much better be to use another less complex method made specifically for our use case.\n4. Combination\/ensemble: We will only be running a single model on the entire dataset for reducing the complexity and computational needs.\n5. Models such as Simple exponential smoothing, MA model etc. These models are not considered as almost in most cases SARIMA or Prophet performs considerably better than these especially with the datasets large number of exogenous variables, multiple seasonality etc.\n\n## Models under consideration:\n\nThere are still a fair number of models not considered, but with the current domain knowledge the final options from which we will choose from are:\n\n\n1. SARIMAX  :A traditional model which is still quite widely used and very poweful as well. It can include exogenous variables as well as seasonality. If we do indeed have the computational capabilities and there is a potential gain in accuracy we will implement SARIMAX bottom up.\n2. Facebook's : This is a library put out by facebook which could potentially be extremely useful in this use case. It is easy to implement yet very powerful capable of taking external variables and is known to perform very well with various seasonal changes as it is modelled based on FB's forecasting algorithms.\n\nThis is the final list of the models we have in consideration. We will start of with a general EDA for the table trying to compare check the extent of relation between the various states, stores, values etc,effects of holidays and exogenous variables etc and how we reduce the dimensions etc. We mostly do this to check whether top down model will give us satisfactory results,reduce dimensionality and gain insights into the data. Once we have completed the EDA, we will based on our results etc, choose subsets of the total data and try the  models on it giving us a better understanding on which model we should choose without high computational costs. \n\n\nWith this we have come to the end of this section and now will proceed with the EDA.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","aa86566c":"We can see that there is a huge reduction in all the dataframes sizes which will prevent colab from crashing due to excessive RAM usage.\nWith this, we come to an end to data optimization.","b56a790c":"To find the ARIMA orders and the seasonality order we will be using auto_arima.","c33b3bbe":"# Exploratory Data analysis:\n\nFor our EDA, initially we will take a look at how each of the explanotory variables influence the target variable.\n\n### Total sales over time : \nFirst we will check how the total sales varies over time of all items to get an idea of the trends, seasonality etc.We will be doing this in two steps, we will plot out the data for the entire duration of the dataset. And then, take a look at subsets of data to check for further weekly\/monthly seasonality etc.","9661f4a9":"### Sum of sales by category :\nSimilar to the previous section we will try to asses the effect of the category on the sum of sales.","823500ba":"# Optimizing the dataframes:\nWe first want to start by making a final dataset which contains all the necessary values in one table so we can do our analysis with ease.\n\nA major roadblock while doing this analysis is the size of the final dataset I intended to create. With more than 40 million rows and quite a few columns, I realized that my code platform(colab) could not support the ram usage(colab provides 12 gb ram,a little less than my personal computer) of such a large unoptimized dataset. Hence, this section tries to reduce the size of the dataset so as to be able to run the notebook.\n\nFirst, we start of by changing all the most of the columns with string type data to categorical dtype as almost all the columns are categories in this dataset.","d7731989":"Note that we use an older version of numpy as the library pmdarima(used for finding order for SARIMA) is not compatible with the current version(as of 3\/6\/2020) with colab.","f3f86996":"# M5 forecasting -Accuracy\n\nThe M5 forecasting(Accuracy) challenge, is a challenge put up by the  University of Nicosia which comprises of sales data from 10 Walmart stores in 3 states with 3049 items in the stores. The objective as given by the host is as follows:\nThe objective of the M5 forecasting competition is to advance the theory and practice of forecasting by identifying the method(s) that provide the most accurate point forecasts for each of the 42,840 time series of the competition.\nThe value 42840 is formed as a result of the hierarchical nature of the problem with each step requiring a solution. \nThe different hiearchies are:\n\n1\tUnit sales of all products, aggregated for all stores\/states:\t1\n\n2\tUnit sales of\u00a0all products, aggregated for each State:\t3\n\n3\tUnit sales of all products, aggregated for each store\u00a0:\t10\n\n4\tUnit sales of\u00a0all products, aggregated for each category:\t3\n\n5\tUnit sales of\u00a0all products, aggregated for each department:\t7\n\n6\tUnit sales of\u00a0all products, aggregated for each State and category:\t9\n\n7\tUnit sales of\u00a0all products, aggregated for each State and department:\t21\n\n8\tUnit sales of\u00a0all products, aggregated for each store and category:\t30\n\n9\tUnit sales of\u00a0all products, aggregated for each store and department:\t70\n\n10\tUnit sales of product x, aggregated for all stores\/states:\t3,049\n\n11\tUnit sales of product x, aggregated for each State:\t9,147\n\n12\tUnit sales of product x, aggregated for each store:\t30,490\n\nTotal\t42,840\u00a0\n\nFor further details on the competion visit: https:\/\/www.kaggle.com\/c\/m5-forecasting-accuracy\/data\n\nIn this kernel, we will take a look at this huge dataset,doing EDA,optimizing for lower end workstations and apply computationally inexpensive models(Prophet,SARIMAX) using Colab and Kaggle Notebooks.\n\nThis kernel is for those who are starting out with time series and using Prophet, a very straightforward library for time series and very limited resources. You may find it helpful to get your data in proper format as well and the code written in very straightforward terms! Hope you enjoy this kernel!\n\n\n\n","1153299f":"We can notice a few things right away, the major American holidays like christmas, thankgiving,New year etc have a reduced sales. This is most likely due to the fact that these days are spent with family with purchases for the day done much earlier, perhaps a look into a week earlier than these dates would have a relative spike .There is almost no sales on christmas as it is the only holiday for all the  stores. Some other days like the SuperBowl, another important American event is marked with high sales. We can see how events play a role in the sales data. \nAnd in our final part of our EDA, we will take a look at how SNAP affects sales.\n\n### Effect of SNAP(Supplemental Nutrition Assistance Program) on sales:\nSNAP provides a monthly supplement for purchasing nutritious food. The columns for the three states tell us whether the store allows purchase using this program on any given date. Our goal is to see how much SNAP affects sales.","affab9ac":"Here we can see a few interesting trends. The food category's sales are fairly seasonal and has a steady increase over the past few years and has much higher sales as compared to  household items and hobbies which is to be expected. The other two also show some extend of growth and seasonality but nowehere as pronounced as food.","b59893ac":"Looking through a few individual months worth of data, we notice that the shopping activity is least during the weeekends and increases over the week as shown above. Also, there seems to be a slight downward trend across the month maybe because people tend to spend more when their salary comes which often is at the start of a month.","5bfeaa94":"## Importing the data and installing the required libraries:\n","3d9e650f":"### Combination of all the predictions to  a single dataframe:\nHaving done the predictions in sections there are quite a few to combine. Feel free to skip this section as it provides no further info. All the code below was done on colab and will not  run in this notebook, but its put to give an idea of how to format the final dataset into the output format expected in the competition and how to join the various predictions we have made from the various sources.","ca154ca2":"### Prices:\nThe prices dataframe gives us the prices of the all the items in the stores on a weekly basis.","ac52955e":"Straight away we can see that the predictions are very innacurate, this could be due to the fact that there are so many 0 values and that there is a lot of noise and barely any signal. One thing to note is that even using SARIMA, the model did not detect any weekly seasonality. The very sparse data points can lead to the predictions going so off. Some modifications can be made, such as introduce Fourier Terms, denoising and maybe even using the top down method so as to get overall trends etc will help.\nNext we will take a look at prophets predictions.\n\n### Prophet:\n\nA major advantage prophet holds is that it can take into consideration multiple seasonality, a part of the function is that it produces its own Fourier terms for seasonality.","dae8bcf7":"Straightaway we can see how price influences the sale of a particular item and it's importance in the analysis. Let us take a  look at how price affects the sales of items for categories as whole.","c1214ef5":"### Sales by price:\nThis is potentially one of the most important exogenous variables given to us. The price often influences greatly how much people purchase an item.  For this particular section we will not be using all of the data to plot, instead we will look at  a random item to check how price changes affects the sales of an item and then check the general trends by category.","74eb90be":"Given above is the dataframe for one item, now we will run the SARIMAX model.","49d05c36":"Note that the first 30490 rows are filled with 0s as they are the validation data set predictions which have not been done. Only the evaluation dataset predictions are taken into consideration for the final score.","17b6a98d":"### SARIMAX:\nThere are a few drawbacks of arima, for one, SARIMAX does not support multiple seasonality. Only one seasonality is taken into consideration. There is a way to overcome this by adding Fourier terms in the exogenous variable,however, for ease we will avoid it and use a much smaller timeframe. The past 365 days. The advantage of this, the size of the dataset is much reduced and also has the advantage of not needing to take into consideration, yearly seasonality. It also has drawbacks but for simplicity and lack of computational power we will stick to using this highly simplified model.","37f9e81a":"### Sales:\nThe sales data gives us the number of items sold everyday for each item in a store for all the 3049 items in 10 stores.\n","a6914efc":"### Calender:\nThe calender dataframe gives us details on the dates, events,holidays SNAP(explained in the EDA section) etc for the duration for around the 5 years the sales data is provided.","52d9ddb4":"We have run the model with the exogenous variables and now we will try plotting the predicted values against the actual ones and after that we will find the RMSE values.","e3d8aa9b":"Similar to the graph above, this too shows seasonality, we can see the slight seasonality over the year as well as monthly\/weekly seasonality. We can see a small spike at the start of almost everymonth as well as weekly fluctuations. It could be  that people purchase more during the weekend than on weekdays.Let us have a closer look at a random normal month and check how the weekly seasonality varies.\n","1173a9f8":"### Sum of sales by store:\n\n I would like to see how the sales vary by store for all the products. We can get an  idea of how items pass through each store and their respective market shares and trends in general.  We will be using a rolling 90 day window to understand the trends and seasonality a little better. However, note that, the weekly seasonality gets lost due to the fact that we are using a 90 day rolling window."}}