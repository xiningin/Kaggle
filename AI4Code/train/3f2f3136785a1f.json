{"cell_type":{"96ff6cbe":"code","bfddcdf1":"code","6c95c0ff":"code","16e01405":"code","7cfa1a21":"code","19c4e3af":"code","7dcf12ba":"code","3a0b5a68":"code","c7d25bb6":"code","4389589e":"code","9148dd5e":"code","4f1d250c":"code","fefabcfc":"code","10d87bc0":"code","f46f8f22":"code","20e6cebc":"markdown"},"source":{"96ff6cbe":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bfddcdf1":"data= pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\n","6c95c0ff":"train.head()","16e01405":"data.isnull().sum()","7cfa1a21":"data2=data.dropna()","19c4e3af":"data2.isnull().sum()","7dcf12ba":"data['Embarked'].unique()","3a0b5a68":"data2['sex_boolean'] =data['Sex'].apply(lambda x: 1 if x == \"female\" else 0)","c7d25bb6":"data2","4389589e":"from sklearn.model_selection import train_test_split","9148dd5e":"\nX=data2[['Age','sex_boolean','SibSp','Fare']]\ny=data2[['Survived']]\n\n# X_test=data2[['Age','sex_boolean','SibSp','Fare']]\n# y_test=data2[['Survived']]","4f1d250c":"X_train,X_test, y_train, y_test = train_test_split(X, y,test_size=0.3)","fefabcfc":"from sklearn.linear_model import LogisticRegression\nlogreg = LogisticRegression()\nlogreg.fit(X_train,y_train)","10d87bc0":"y_pred = logreg.predict(X_test)","f46f8f22":"from sklearn.metrics import accuracy_score\nprint(\"accuray = %.2f\" % accuracy_score(y_test, y_pred))","20e6cebc":"> "}}