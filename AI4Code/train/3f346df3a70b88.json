{"cell_type":{"059e2308":"code","47e66f08":"code","3f26ab8d":"code","36672106":"code","a18365f3":"code","cadec640":"code","33851401":"code","0bc8eb02":"code","bf903b93":"code","3a0f300d":"code","211863ce":"code","59a1253b":"code","d826e57b":"code","3c415fd7":"code","6a859255":"code","d030d540":"code","a54cdcbf":"code","e5a65994":"code","a33773b0":"code","bfde5dd2":"code","a336eaea":"code","11b9b42d":"code","f7846bc8":"code","32bd9e9e":"code","8b9768dd":"code","7d78e791":"code","b2ddccbe":"code","43ee22f9":"code","f1d1f3fe":"code","9ed1e88c":"code","20af6ad4":"code","24263a00":"code","c13f382f":"code","fb1a36d8":"code","42a7ae78":"code","063986e3":"code","465c64a1":"code","3f232891":"code","3ccafef5":"code","724ff062":"code","755a367e":"code","4ab95c8a":"code","7df65596":"code","a28f15c4":"code","3a438701":"code","08070aa9":"code","54bedb4f":"code","9d4f8998":"code","2123dd61":"code","a445d3df":"code","2f92d3e6":"code","0a30229a":"code","1f00aa05":"code","096adf8f":"code","fc50cee3":"markdown","2cd45ab5":"markdown","3924f0fd":"markdown","2fe9aa9c":"markdown","41eb9233":"markdown","5d993440":"markdown","3cfeaf8f":"markdown","ef6ec7d7":"markdown"},"source":{"059e2308":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","47e66f08":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport statsmodels.api as sm\nfrom scipy import stats\nimport altair as alt\nalt.data_transformers.disable_max_rows()","3f26ab8d":"df_nyc = pd.read_csv('..\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv', index_col = 0)\ndf_nyc.columns","36672106":"df_nyc.reset_index(drop = True, )\ndf_nyc.head(3)","a18365f3":"df_nyc.info()","cadec640":"df_nyc.isna().sum()","33851401":"df_nyc[\"name\"].fillna(\"Unknown\", inplace = True)\n","0bc8eb02":"df_nyc[\"host_name\"].describe()","bf903b93":"df_nyc[\"host_name\"].fillna(\"Unknown\", inplace = True)","3a0f300d":"df_nyc[\"last_review\"].describe()","211863ce":"df_nyc[\"reviews_per_month\"].describe()","59a1253b":"df_nyc[\"reviews_per_month\"].isna().sum()","d826e57b":"for i in df_nyc.columns:\n    display(pd.DataFrame(df_nyc[i].isnull().value_counts()))","3c415fd7":"np.mean(df_nyc.isna(), axis = 0)","6a859255":"df_nyc[\"reviews_per_month\"].fillna(0, inplace = True)","d030d540":"df_nyc[\"last_review\"] = pd.to_datetime(df_nyc[\"last_review\"])","a54cdcbf":"df_nyc[\"last_review\"].fillna(max(df_nyc[\"last_review\"]), inplace = True)","e5a65994":"df_nyc.isna().sum()","a33773b0":"sns.pairplot(df_nyc[[\"price\",\"number_of_reviews\",\"minimum_nights\",\"neighbourhood_group\"]], hue = \"neighbourhood_group\");","bfde5dd2":"data = df_nyc\n\nalt.Chart(df_nyc).mark_circle().encode(\n    x='number_of_reviews:Q',\n    y='price:Q',\n    color = \"neighbourhood_group\"\n)","a336eaea":"data = df_nyc\n\nalt.Chart(df_nyc).mark_circle().encode(\n    x='number_of_reviews:Q',\n    y = \"neighbourhood_group\",\n    color= \"room_type\"\n)","11b9b42d":"data = df_nyc\n\nalt.Chart(df_nyc).mark_circle().encode(\n    x='price:Q',\n    y = \"neighbourhood_group\",\n    color= \"room_type\"\n)","f7846bc8":"sns.distplot(df_nyc[\"calculated_host_listings_count\"], bins = 6)","32bd9e9e":"price_min = df_nyc.loc[df_nyc[\"price\"] <= 300]\nprice_max = df_nyc.loc[df_nyc[\"price\"] > 300]\nprice_min[[\"price\"]].count()\/df_nyc[[\"price\"]].count()","8b9768dd":"df_nyc.groupby(\"neighbourhood_group\").agg([\"mean\"])","7d78e791":"sns.distplot(price_min[\"price\"])","b2ddccbe":"alt.Chart(price_min).mark_rect().encode(\n    alt.X('price:Q', bin=alt.Bin(maxbins=60)),\n    alt.Y('number_of_reviews:Q', bin=alt.Bin(maxbins=40)),\n    alt.Color('neighbourhood_group'),\n)\n","43ee22f9":"alt.Chart(price_max).mark_rect().encode(\n    alt.X('price:Q', bin=alt.Bin(maxbins=70)),\n    alt.Y('number_of_reviews:Q', bin=alt.Bin(maxbins=40)),\n    alt.Color('neighbourhood_group'),\n)","f1d1f3fe":"alt.Chart(df_nyc).mark_bar().encode(\n    alt.X('mean(price):Q'),\n    alt.Y('neighbourhood_group'),\n)","9ed1e88c":"sns.boxplot(x = \"room_type\", y = \"price\", data = price_min);\n","20af6ad4":"sns.boxplot(x = \"room_type\", y = \"price\", data = price_max);","24263a00":"sns.boxplot(x = \"neighbourhood_group\", y = \"price\", data = price_min);","c13f382f":"plt.figure(figsize=(10.0,8.0))\n\ncorr=price_min.corr(method='pearson')\nsns.heatmap(corr, annot=True, fmt=\".2f\", vmax=.3, center=0,\n            square=True, linewidths= 0.5, cbar_kws={\"shrink\": 0.5}).set(ylim=(11, 0))\nplt.xticks(rotation=45)\nplt.title(\"Correlation Matrix\",size=15, weight='bold')","fb1a36d8":"plt.figure(figsize=(10,6))\nsns.scatterplot(df_nyc.longitude,df_nyc.latitude,hue=df_nyc.room_type)\nplt.ioff()","42a7ae78":"plt.figure(figsize=(10,6))\nsns.scatterplot(df_nyc.longitude,df_nyc.latitude,hue=df_nyc.availability_365)\nplt.ioff()","063986e3":"price_min[\"host_id\"].value_counts()","465c64a1":"price_min.drop(['name', 'host_id', 'host_name','last_review'], axis = 1, inplace = True)","3f232891":"#neighbourhood threshold:\nprice_min[\"neighbourhood\"].value_counts()\n\nneighbourhood_threshhold = 300\n\n\nbinary_value_counts = price_min[\"neighbourhood\"].value_counts() > neighbourhood_threshhold\nneighbourhood_to_keep =list(binary_value_counts[binary_value_counts == True].index)\nneighbourhood_to_keep","3ccafef5":"price_min.loc[~price_min[\"neighbourhood\"].isin(neighbourhood_to_keep),'neighbourhood'] = \"other\"","724ff062":"price_min[\"neighbourhood\"].value_counts().sort_values().plot.barh()","755a367e":"price_min.shape","4ab95c8a":"price_model= pd.get_dummies(price_min,drop_first = True)","7df65596":"price_model.shape","a28f15c4":"target = price_model[\"price\"]","3a438701":"price_model.drop(\"price\", axis = 1, inplace = True)","08070aa9":"price_model[\"price\"] = target\nprice_model.head()","54bedb4f":"X = price_model[price_model.columns[:-1]]\ny = price_model[\"price\"]\n\nX.drop([\"neighbourhood_Upper East Side\",\"neighbourhood_East Village\", \"neighbourhood_Ditmars Steinway\", \"neighbourhood_Kips Bay\",\"neighbourhood_Crown Heights\",\"neighbourhood_Bedford-Stuyvesant\",\"neighbourhood_Upper West Side\",\"reviews_per_month\"], axis = 1, inplace = True)\nX_withconstant = sm.add_constant(X)\nlinear_model = sm.OLS(y,X_withconstant).fit()\nlinear_model.summary()","9d4f8998":"coefficients = linear_model.summary().tables[1]\ncoefficients_model = pd.DataFrame(data = coefficients.data[1:],columns = coefficients.data[0])\ncoefficients_model.rename(mapper = {\"\": \"Data\"}, axis = 1, inplace = True)\ncoefficients_model[\"coef\"] = coefficients_model[\"coef\"].astype(float)\ncoefficients_model[\"P>|t|\"] = coefficients_model[\"P>|t|\"].astype(float)","2123dd61":"coefficients_model[coefficients_model[\"P>|t|\"] > 0.05].sort_values(\"P>|t|\", ascending = False)","a445d3df":"coefficients2 = linear_model.summary().tables[1]\ncoefficients_model2 = pd.DataFrame(data = coefficients2.data[1:],columns = coefficients2.data[0])\ncoefficients_model2.rename(mapper = {\"\": \"Data\"}, axis = 1, inplace = True)\ncoefficients_model2[\"coef\"] = coefficients_model2[\"coef\"].astype(float)\ncoefficients_model2[\"P>|t|\"] = coefficients_model2[\"P>|t|\"].astype(float)\ncoefficients_model2[coefficients_model2[\"P>|t|\"] > 0.05].sort_values(\"P>|t|\", ascending = False)","2f92d3e6":"coefficients_model2[\"abs_coef\"] =np.abs(coefficients_model2[\"coef\"])\ncoefficients_by_magnitude = coefficients_model2.sort_values(\"abs_coef\", ascending = False)\ncoefficients_by_magnitude","0a30229a":"predictions = linear_model.predict(X_withconstant)\nprice_model[\"predictions\"] = predictions\nprice_model.head(10)","1f00aa05":"plt.figure()\nplt.scatter(linear_model.fittedvalues, linear_model.resid)\nplt.show()","096adf8f":"plt.figure()\n\n\nax1 = sns.distplot(price_model['price'], hist=False, color=\"r\", label=\"Actual Value\")\nsns.distplot(predictions, hist=False, color=\"b\", label=\"Fitted Values\" , ax=ax1)\n\n\nplt.title('Actual vs Fitted Values for Prices')\nplt.xlabel('Price')\nplt.ylabel('Proportion of Airbnbs')\n\nplt.show()\nplt.close()","fc50cee3":"## LINEAR REGRESSION USING STATSMODEL","2cd45ab5":" - deleting the variables that were not significant for our model, I discovered that reviews per month doesn't affect prices the way I tought it would. When I took it off the model, it didn't change my R squared. After deleting those variables, we ended up with a model of 0.5108, meaning that 51% of our prices can be explained by the room type, neighbourhood groups, availability, minimum nights, location (lat and long), number of reviews.","3924f0fd":"## PREDICTIONS","2fe9aa9c":"## EXPLORATORY ANALYSIS","41eb9233":"## DATA CLEANING\n","5d993440":"As expected, the variables that most affect our model are:\n    longitude, room_type, neighbourhood such as Manhattan group. Please check below the coefficients magnitude. ","3cfeaf8f":" -  93% of the data has a price lower than R$ 300 per night. Knowing that, I have decided to use the threshold of max price of 300\/night to predict prices!","ef6ec7d7":"![Image of NYC](https:\/\/miro.medium.com\/max\/997\/1*8Zz18eO-oIGQwZIAESgWJg.jpeg)"}}