{"cell_type":{"87466b01":"code","8aaecc3b":"code","2da6706b":"code","c19eb9f4":"code","dd829a96":"code","7d7cfcb1":"code","afa32a59":"code","66e85cb4":"code","74118f95":"code","3791ec5f":"code","7175d66f":"code","9dadd7c1":"code","86eb8f74":"code","c8180539":"code","ec1515f2":"code","78b92c54":"code","ebc72f48":"code","d21c6683":"code","4b03b55e":"code","e2107567":"code","6339b61a":"code","3f892f71":"code","c9435d1a":"code","4cf091fa":"code","d98229ca":"code","f9812120":"code","ffe3c808":"code","ff4cbccf":"code","098d52db":"code","9ca31598":"code","0b98f43d":"code","461b86e9":"code","a78f66ec":"code","f6c8b7f3":"code","14a7b352":"markdown","6667bd8f":"markdown","21e513c5":"markdown","781f051d":"markdown"},"source":{"87466b01":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nfrom sklearn.preprocessing import LabelEncoder, MinMaxScaler\nwarnings.filterwarnings('ignore')\n%matplotlib inline\nfrom scipy import signal","8aaecc3b":"df_train = pd.read_csv(\"..\/input\/data-science-spring-osaka-hard-mode\/train.csv\")\ntrain_action = df_train.action_seq.unique()","2da6706b":"input_base_path = \"..\/input\/makedatayaw\/\"","c19eb9f4":"# describe \u3092\u4f7f\u3063\u3066\u591a\u304f\u306e\u7279\u5fb4\u91cf\u3092\u62bd\u51fa\u3057\u3066\u307f\u308b\u3001\u6570\u3067\u52dd\u8ca0\uff01\n# \u4ed6\u306b\u3082\u3084\u308a\u65b9\u305f\u304f\u3055\u3093\u3042\u308b\u306e\u3067\u3001\u3069\u3093\u3069\u3093\u63a2\u7d22\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\ndef add_describe_as_features(row):\n    file_path = row['file_path']\n    df = pd.read_csv(input_base_path + file_path)\n    s = df.describe().unstack(1)\n    return s.tolist()","dd829a96":"# \u30ab\u30e9\u30e0\u540d\u306e\u30ea\u30b9\u30c8\u3092\u6e96\u5099\u3001\u6700\u521d\u306e\u6700\u5f8c\u3092\u307f\u308b\n# train\u306e\u4e2d\u304b\u3089\u6700\u521d\u306e\u884c\u306b\u3064\u3044\u3066\u3001\u5b9f\u969b\u306e\u30bb\u30f3\u30b5\u30fc\u30c7\u30fc\u30bf\u3092\u307f\u3066\u307f\u307e\u3057\u3087\u3046\ndf = pd.read_csv(\"..\/input\/makedatayaw\/test\/test_0000.csv\")\nlist_columns = ['_'.join(idx).strip() for idx in df.describe().unstack(1).index]\nlist_columns[:5]+list_columns[-5:]","7d7cfcb1":"# \u4e0a\u8a18\u51e6\u7406\u3092\u9069\u7528\u3057\u307e\u3059\ndf_train[list_columns] = df_train.apply(add_describe_as_features, axis=1, result_type='expand')","afa32a59":"#\u6642\u9593\u9577\u3055\u3068\u52d5\u304d\u306b\u76f8\u95a2\u304c\u3042\u308b\u304b\u307f\u3066\u307f\u308b\ndf_train[\"length_time\"] = df_train[\"Time_max\"] - df_train[\"Time_min\"]\ndf_train[\"mean\"] = df_train.groupby(\"action_seq\")[\"length_time\"].transform(\"mean\")","66e85cb4":"temp = df_train.groupby(\"action_seq\")[[\"length_time\"]].mean().reset_index()\ntemp#\u5e73\u5747\u6642\u9593\u3092\u6bd4\u8f03","74118f95":"sns.barplot(x = \"length_time\", y=\"action_seq\", data = temp)","3791ec5f":"#\ncolumn_num = 3\nline = int(np.ceil(len(train_action)\/column_num))","7175d66f":"color = [\"blue\",\"green\",\"red\",\"black\",\"m\"]# \u5404\u30d7\u30ed\u30c3\u30c8\u306e\u8272\nfig, ax = plt.subplots(line,column_num,figsize=(20, 15))\nplt.subplots_adjust(hspace=0.4)\nfor j,label in enumerate(train_action):\n    q, mod = divmod(j, 3)\n    file_paths = df_train[df_train[\"action_seq\"] == label][\"file_path\"]\n    ax[q,mod].set_xlabel('time')  # x\u8ef8\u30e9\u30d9\u30eb\n    ax[q,mod].set_title(label) # \u30b0\u30e9\u30d5\u30bf\u30a4\u30c8\u30eb\n    ax[q,mod].set_xlim(0,6000) # \u6642\u9593\u30b9\u30b1\u30fc\u30eb\u3092\u5408\u308f\u305b\u3066\u6bd4\u8f03\n    \n    for i,file_path in enumerate(file_paths):\n        if 10 >= i:\n            df_temp = pd.read_csv(input_base_path + file_path)\n            ax[q,mod].plot(df_temp[\"Time\"], df_temp[\"yaw\"],label=\"row\")\n    plt.legend()     \nplt.show()","9dadd7c1":"time_cut_file = df_train[df_train[\"length_time\"]>=6500].file_path\ntime_cut_file","86eb8f74":"color = [\"blue\",\"green\",\"red\",\"black\",\"m\"]# \u5404\u30d7\u30ed\u30c3\u30c8\u306e\u8272\nfig, ax = plt.subplots(line,column_num,figsize=(20, 15))\nplt.subplots_adjust(hspace=0.4)\nfor j,label in enumerate(train_action):\n    q, mod = divmod(j, 3)\n    file_paths = df_train[df_train[\"action_seq\"] == label][\"file_path\"]\n    ax[q,mod].set_xlabel('time')  # x\u8ef8\u30e9\u30d9\u30eb\n    ax[q,mod].set_title(label) # \u30b0\u30e9\u30d5\u30bf\u30a4\u30c8\u30eb\n    ax[q,mod].set_xlim(0,6500) # \u6642\u9593\u30b9\u30b1\u30fc\u30eb\u3092\u5408\u308f\u305b\u3066\u6bd4\u8f03\n    \n    for i,file_path in enumerate(file_paths):\n        if 10 >= i:\n            df_temp = pd.read_csv(input_base_path + file_path)\n            if file_path in list(time_cut_file):\n                df_temp = df_temp[df_temp.Time >= 3000].reset_index(drop=True)\n                df_temp.Time = df_temp.Time - 3000   \n            ax[q,mod].plot(df_temp[\"Time\"], df_temp[\"yaw\"],label=\"row\")\n        else:\n            break\n    plt.legend()     \nplt.show()","c8180539":"#\u305d\u3053\u3067fft\u306b\u304b\u3051\u3066sin\u6ce2\u306b\u5206\u3051\u308c\u306a\u3044\u304b\u691c\u8a0e\u3057\u3066\u307f\u308b\ndf_test_hard = pd.read_csv(\"..\/input\/data-science-spring-osaka-hard-mode\/test_hard.csv\")","ec1515f2":"#\nf = df_temp[\"yaw\"]\nN = len(f)\nt = df_temp[\"Time\"]\nfps = 60 #fps\ndt = 1\/fps","78b92c54":"#add yaw data\ndef make_yaw_data(df):\n    temp_list = []\n    temp = 0\n    for gx in df[\"GYRO_Y\"]:\n        temp += (gx+550) * dt\n        temp_list.append(temp)\n    df[\"yaw\"] = temp_list\n    return df","ebc72f48":"# \u9ad8\u901f\u30d5\u30fc\u30ea\u30a8\u5909\u63db(FFT)\n#https:\/\/momonoki2017.blogspot.com\/2018\/03\/pythonfft-1-fft.html \u30b3\u30d4\u30da\nF = np.fft.fft(f)\nF_abs = np.abs(F) # \u8907\u7d20\u6570\u3092\u7d76\u5bfe\u5024\u306b\u5909\u63db\nF_abs_amp = F_abs \/ N * 2 # \u632f\u5e45\u3092\u3082\u3068\u306e\u4fe1\u53f7\u306b\u63c3\u3048\u308b(\u4ea4\u6d41\u6210\u52062\u500d)\nF_abs_amp[0] = F_abs_amp[0] \/ 2 # \u632f\u5e45\u3092\u3082\u3068\u306e\u4fe1\u53f7\u306b\u63c3\u3048\u308b(\u76f4\u6d41\u6210\u5206\u975e2\u500d)\n\n# \u5468\u6ce2\u6570\u8ef8\u306e\u30c7\u30fc\u30bf\u4f5c\u6210\nfq = np.linspace(0, 1.0\/dt, N) # \u5468\u6ce2\u6570\u8ef8\u3000linspace(\u958b\u59cb,\u7d42\u4e86,\u5206\u5272\u6570)\n\n# \u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u2460\uff08\u5468\u6ce2\u6570\u3067\u30ab\u30c3\u30c8\uff09\uff0a\uff0a\uff0a\uff0a\uff0a\uff0a\nF2 = np.copy(F) # FFT\u7d50\u679c\u30b3\u30d4\u30fc\nfc = 2.5 # \u30ab\u30c3\u30c8\u30aa\u30d5\uff08\u5468\u6ce2\u6570\uff09\nF2[(fq > fc)] = 0 # \u30ab\u30c3\u30c8\u30aa\u30d5\u3092\u8d85\u3048\u308b\u5468\u6ce2\u6570\u306e\u30c7\u30fc\u30bf\u3092\u30bc\u30ed\u306b\u3059\u308b\uff08\u30ce\u30a4\u30ba\u9664\u53bb\uff09\nF2_abs = np.abs(F2) # FFT\u306e\u8907\u7d20\u6570\u7d50\u679c\u3092\u7d76\u5bfe\u5024\u306b\u5909\u63db\nF2_abs_amp = F2_abs \/ N * 2 # \u632f\u5e45\u3092\u3082\u3068\u306e\u4fe1\u53f7\u306b\u63c3\u3048\u308b(\u4ea4\u6d41\u6210\u52062\u500d)\nF2_abs_amp[0] = F2_abs_amp[0] \/ 2 # \u632f\u5e45\u3092\u3082\u3068\u306e\u4fe1\u53f7\u306b\u63c3\u3048\u308b(\u76f4\u6d41\u6210\u5206\u975e2\u500d)\nF2_ifft = np.fft.ifft(F2) # IFFT\nF2_ifft_real = F2_ifft.real * 2 # \u5b9f\u6570\u90e8\u306e\u53d6\u5f97\u3001\u632f\u5e45\u3092\u5143\u30b9\u30b1\u30fc\u30eb\u306b\u623b\u3059\n\n# \u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u2461\uff08\u632f\u5e45\u5f37\u5ea6\u3067\u30ab\u30c3\u30c8\uff09\uff0a\uff0a\uff0a\uff0a\uff0a\uff0a\nF3 = np.copy(F) # FFT\u7d50\u679c\u30b3\u30d4\u30fc\nac = 50 # \u632f\u5e45\u5f37\u5ea6\u306e\u95be\u5024\nF3[(F_abs_amp < ac)] = 0 # \u632f\u5e45\u304c\u95be\u5024\u672a\u6e80\u306f\u30bc\u30ed\u306b\u3059\u308b\uff08\u30ce\u30a4\u30ba\u9664\u53bb\uff09\nF3_abs = np.abs(F3)# \u8907\u7d20\u6570\u3092\u7d76\u5bfe\u5024\u306b\u5909\u63db\nF3_abs_amp = F3_abs \/ N * 2 # \u4ea4\u6d41\u6210\u5206\u306f\u30c7\u30fc\u30bf\u6570\u3067\u5272\u3063\u30662\u500d\nF3_abs_amp[0] = F3_abs_amp[0] \/ 2 # \u76f4\u6d41\u6210\u5206\uff08\u4eca\u56de\u306f\u6271\u308f\u306a\u3044\u3051\u3069\uff09\u306f2\u500d\u4e0d\u8981\nF3_ifft = np.fft.ifft(F3) # IFFT\nF3_ifft_real = F3_ifft.real # \u5b9f\u6570\u90e8\u306e\u53d6\u5f97\n\n# \u30b0\u30e9\u30d5\u8868\u793a\nfig = plt.figure(figsize=(8, 8))\n\n# \u30b0\u30e9\u30d5\u8868\u793a\n# \u30aa\u30ea\u30b8\u30ca\u30eb\u4fe1\u53f7\nfig.add_subplot(321) \nplt.xlabel('time(sec)', fontsize=14)\nplt.ylabel('signal', fontsize=14)\nplt.plot(t, f)\n\n# \u30aa\u30ea\u30b8\u30ca\u30eb\u4fe1\u53f7 ->FFT\nfig.add_subplot(322) \nplt.xlabel('freqency(Hz)', fontsize=14)\nplt.ylabel('amplitude', fontsize=14)\nplt.plot(fq, F_abs_amp)\n\n# \u30aa\u30ea\u30b8\u30ca\u30eb\u4fe1\u53f7 ->FFT ->\u5468\u6ce2\u6570filter ->IFFT\nfig.add_subplot(323) \nplt.xlabel('time(sec)', fontsize=14)\nplt.ylabel('signal(freq.filter)', fontsize=14)\nplt.plot(t, F2_ifft_real)\n\n# \u30aa\u30ea\u30b8\u30ca\u30eb\u4fe1\u53f7 ->FFT ->\u5468\u6ce2\u6570filter\nfig.add_subplot(324) \nplt.xlabel('freqency(Hz)', fontsize=14)\nplt.ylabel('amplitude(freq.filter)', fontsize=14)\n# plt.vlines(x=[10], ymin=0, ymax=1, colors='r', linestyles='dashed')\nplt.fill_between([10 ,100], [0, 0], [1, 1], color='g', alpha=0.2)\nplt.plot(fq, F2_abs_amp)\n\n# \u30aa\u30ea\u30b8\u30ca\u30eb\u4fe1\u53f7 ->FFT ->\u632f\u5e45\u5f37\u5ea6filter ->IFFT\nfig.add_subplot(325) \nplt.xlabel('time(sec)', fontsize=14)\nplt.ylabel('signal(amp.filter)', fontsize=14)\nplt.plot(t, F3_ifft_real)\n\n# \u30aa\u30ea\u30b8\u30ca\u30eb\u4fe1\u53f7 ->FFT ->\u632f\u5e45\u5f37\u5ea6filter\nfig.add_subplot(326) \nplt.xlabel('freqency(Hz)', fontsize=14)\nplt.ylabel('amplitude(amp.filter)', fontsize=14)\n# plt.hlines(y=[0.2], xmin=0, xmax=100, colors='r', linestyles='dashed')\nplt.fill_between([0 ,100], [0, 0], [0.2, 0.2], color='g', alpha=0.2)\nplt.plot(fq, F3_abs_amp)\n\nplt.tight_layout()","d21c6683":"t = np.arange(0, N*dt, dt)\nt[-1]","4b03b55e":"freq = np.linspace(0, 1.0\/dt, N) # \u5468\u6ce2\u6570\u8ef8\n# \u9ad8\u901f\u30d5\u30fc\u30ea\u30a8\u5909\u63db\nF = np.fft.fft(f)\n\nF_abs = np.abs(F) # \u8907\u7d20\u6570 ->\u7d76\u5bfe\u5024\u306b\u5909\u63db\n# \u632f\u5e45\u3092\u5143\u306e\u4fe1\u53f7\u306e\u30b9\u30b1\u30fc\u30eb\u306b\u63c3\u3048\u308b\nF_abs = F_abs \/ (N\/2) # \u4ea4\u6d41\u6210\u5206\nF_abs[0] = F_abs[0] \/ 2 # \u76f4\u6d41\u6210\u5206\n# FFT\u30c7\u30fc\u30bf\u304b\u3089\u30d4\u30fc\u30af\u3092\u81ea\u52d5\u691c\u51fa\nmaximal_idx = signal.argrelmax(F_abs, order=1)[0] # \u30d4\u30fc\u30af\uff08\u6975\u5927\u5024\uff09\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u53d6\u5f97\n# \u30d4\u30fc\u30af\u691c\u51fa\u611f\u5ea6\u8abf\u6574\u3082\u3069\u304d\u3001\u5f8c\u534a\u5074\uff08\u30ca\u30a4\u30ad\u30b9\u30c8\u8d85\uff09\u3068\u95be\u5024\u3088\u308a\u5c0f\u3055\u3044\u632f\u5e45\u30d4\u30fc\u30af\u3092\u9664\u5916\npeak_cut = 100 # \u30d4\u30fc\u30af\u95be\u5024\nmaximal_idx = maximal_idx[(F_abs[maximal_idx] > peak_cut) & (maximal_idx <= N\/2)]\n# \u30b0\u30e9\u30d5\u8868\u793a\uff08\u5468\u6ce2\u6570\u8ef8\uff09\nplt.subplot(212)\nplt.xlabel('Frequency(Hz)')\nplt.ylabel('Amplitude')\n\nplt.axis([0,1.0\/dt\/2,0,max(F_abs)*1.5])\nplt.plot(freq, F_abs)\nplt.plot(freq[maximal_idx], F_abs[maximal_idx],'ro')\n\n# \u30b0\u30e9\u30d5\u306b\u30d4\u30fc\u30af\u306e\u5468\u6ce2\u6570\u3092\u30c6\u30ad\u30b9\u30c8\u3067\u8868\u793a\nfor i in range(len(maximal_idx)):\n    plt.annotate('{0:.0f}(Hz)'.format(np.round(freq[maximal_idx[i]])),\n                 xy=(freq[maximal_idx[i]], F_abs[maximal_idx[i]]),\n                 xytext=(10, 20),\n                 textcoords='offset points',\n                 arrowprops=dict(arrowstyle=\"->\",connectionstyle=\"arc3,rad=.2\")\n                )\n\nplt.subplots_adjust(hspace=0.4)\nplt.show()\nprint('peak', freq[maximal_idx])","e2107567":"def FFT_peak(df_temp):\n    f = df_temp[\"yaw\"]\n    N = len(f)\n    freq = np.linspace(0, 1.0\/dt, N) # \u5468\u6ce2\u6570\u8ef8\n    t = np.arange(0, N*dt, dt) # \u6642\u9593\u8ef8\n    # \u9ad8\u901f\u30d5\u30fc\u30ea\u30a8\u5909\u63db\n    F = np.fft.fft(f)\n    fc = 2 # \u30ab\u30c3\u30c8\u30aa\u30d5\uff08\u5468\u6ce2\u6570\uff09\n    F[(freq > fc)] = 0\n    F_abs = np.abs(F) # \u8907\u7d20\u6570 ->\u7d76\u5bfe\u5024\u306b\u5909\u63db\n    # \u632f\u5e45\u3092\u5143\u306e\u4fe1\u53f7\u306e\u30b9\u30b1\u30fc\u30eb\u306b\u63c3\u3048\u308b\n    F_abs = F_abs \/ (N\/2) # \u4ea4\u6d41\u6210\u5206\n    F_abs[0] = F_abs[0] \/ 2 # \u76f4\u6d41\u6210\u5206\n    # FFT\u30c7\u30fc\u30bf\u304b\u3089\u30d4\u30fc\u30af\u3092\u81ea\u52d5\u691c\u51fa\n    maximal_idx = signal.argrelmax(F_abs, order=1)[0] # \u30d4\u30fc\u30af\uff08\u6975\u5927\u5024\uff09\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u53d6\u5f97\n    # \u30d4\u30fc\u30af\u691c\u51fa\u611f\u5ea6\u8abf\u6574\u3082\u3069\u304d\u3001\u5f8c\u534a\u5074\uff08\u30ca\u30a4\u30ad\u30b9\u30c8\u8d85\uff09\u3068\u95be\u5024\u3088\u308a\u5c0f\u3055\u3044\u632f\u5e45\u30d4\u30fc\u30af\u3092\u9664\u5916\n    peak_cut = 30 # \u30d4\u30fc\u30af\u95be\u5024\n    maximal_idx = maximal_idx[(F_abs[maximal_idx] > peak_cut) & (maximal_idx <= N\/2)]\n    return freq[maximal_idx],t","6339b61a":"column_num = 3\nline = int(np.ceil(len(train_action)\/column_num))\nfig, ax = plt.subplots(line,column_num,figsize=(20, 15))\nplt.subplots_adjust(hspace=0.4)\nfor j,label in enumerate(train_action):\n    q, mod = divmod(j, 3)\n    file_paths = df_train[df_train[\"action_seq\"] == label][\"file_path\"]\n    ax[q,mod].set_xlabel('time')  # x\u8ef8\u30e9\u30d9\u30eb\n    ax[q,mod].set_title(label) # \u30b0\u30e9\u30d5\u30bf\u30a4\u30c8\u30eb\n    for i,file_path in enumerate(file_paths):\n        if 5 >= i:\n            df_temp = pd.read_csv(input_base_path + file_path)\n            peak,t = FFT_peak(df_temp)\n            ax[q,mod].plot(df_temp[\"Time\"],df_temp[\"yaw\"],label=peak)\n#             ax[q,mod].set_xlim(0,t[-1]) # \u6642\u9593\u30b9\u30b1\u30fc\u30eb\u3092\u5408\u308f\u305b\u3066\u6bd4\u8f03\n        else:\n            break\n    ax[q,mod].legend()     \nplt.show()","3f892f71":"freq[maximal_idx]","c9435d1a":"column_num = 8\nline = 10","4cf091fa":"df_test_hard = pd.read_csv(\"..\/input\/data-science-spring-osaka-hard-mode\/test_hard.csv\")\nfile_paths = df_test_hard[\"file_path\"]","d98229ca":"df_test_hard","f9812120":"color = [\"blue\",\"green\",\"red\",\"black\",\"m\"]# \u5404\u30d7\u30ed\u30c3\u30c8\u306e\u8272\nfig, ax = plt.subplots(line,column_num,figsize=(50, 35))\nplt.subplots_adjust(hspace=0.4)\nfor i,file_path in enumerate(file_paths):\n    q, mod = divmod(i, column_num)\n    if column_num*line-1 >= i:\n        df_temp = pd.read_csv(\"..\/input\/data-science-spring-osaka-hard-mode\/test_hard\"+ file_path)\n        df_temp = make_yaw_data(df_temp)\n        peak,t = FFT_peak(df_temp)\n        ax[q,mod].plot(df_temp[\"Time\"], df_temp[\"yaw\"],label=peak,color=color[len(peak)])\n    else:\n        break\n    ax[q,mod].legend()     \nplt.show()","ffe3c808":"df_action_hard = pd.read_csv(\"..\/input\/data-science-spring-osaka-hard-mode\/actions_hard.csv\")\ndf_action_hard","ff4cbccf":"#peak\u5024\u3092\u3059\u3079\u3066\u3067\u8a08\u7b97\ntemp = []\nfor i,file_path in enumerate(file_paths):\n    df_temp = pd.read_csv(\"..\/input\/data-science-spring-osaka-hard-mode\/test_hard\"+ file_path)\n    df_temp = make_yaw_data(df_temp)\n    peak,freq = FFT_peak(df_temp)\n    temp.append(len(peak))\ndf_test_hard[\"num_peak\"] = temp","098d52db":"u_list = df_test_hard[\"num_peak\"].unique()","9ca31598":"column_num = 3\nline = int(np.ceil(len(u_list)\/column_num))\nfig, ax = plt.subplots(line,column_num,figsize=(20, 15))\nplt.subplots_adjust(hspace=0.4)\nfor j,num_peak in enumerate(u_list):\n    q, mod = divmod(j, 3)\n    file_paths = df_test_hard[df_test_hard[\"num_peak\"] == num_peak][\"file_path\"]\n    ax[q,mod].set_xlabel('time')  # x\u8ef8\u30e9\u30d9\u30eb\n    \n    for i,file_path in enumerate(file_paths):\n        if 3 >= i:\n            df_temp = pd.read_csv(\"..\/input\/data-science-spring-osaka-hard-mode\/test_hard\" + file_path)\n            df_temp = make_yaw_data(df_temp)\n            peak,t = FFT_peak(df_temp)\n            ax[q,mod].plot(df_temp[\"Time\"], df_temp[\"yaw\"],label=peak)\n            ax[q,mod].set_title(num_peak) # \u30b0\u30e9\u30d5\u30bf\u30a4\u30c8\u30eb\n#             ax[q,mod].set_xlim(0,freq[-1]) # \u6642\u9593\u30b9\u30b1\u30fc\u30eb\u3092\u5408\u308f\u305b\u3066\u6bd4\u8f03\n        else:\n            break\n    ax[q,mod].legend()     \nplt.show()","0b98f43d":"df_test_hard[\"action_seq\"] = \"jab-jab-jab-straight\"\ndf_test_hard","461b86e9":"df_test_hard.loc[df_test_hard.num_peak == 1 ,\"action_seq\"] = \"jab-upper-ducking\"\ndf_test_hard.loc[df_test_hard.num_peak == 2 ,\"action_seq\"] = \"stepinjab-straight-backstep-straight\"\ndf_test_hard.loc[df_test_hard.num_peak == 3 ,\"action_seq\"] = \"jab-straight-hook-bodyhook\"\ndf_test_hard.loc[df_test_hard.num_peak == 4 ,\"action_seq\"] = \"stepinjab-backstep-sway-upper\"","a78f66ec":"df_test_hard_ = df_test_hard.drop(columns = [\"num_peak\"])\ndf_test_hard_","f6c8b7f3":"df_test_hard_.to_csv(\"sub.csv\",index=False)","14a7b352":"\u3053\u308c\u3092\u3067\u304d\u308b\u3060\u3051\u5206\u6563\u304c\u5c11\u306a\u304f\u306a\u308b\u3088\u3046\u306b\u6642\u9593\u306e\u51e6\u7406\u3057\u3066\u307f\u308b","6667bd8f":"\u6642\u9593\u3068\u52d5\u4f5c\u306e\u9577\u3055\u306b\u76f8\u95a2\u304c\u3042\u308b\u304b\u78ba\u8a8d\u3057\u305f\u304c\uff0c\u305d\u3093\u306a\u306b\u7c21\u5358\u3067\u306f\u306a\u304b\u3063\u305f\uff0e","21e513c5":"model\u306e\u5909\u6570\u91cd\u8981\u5ea6\u306e\u78ba\u8a8d\uff08https:\/\/www.kaggle.com\/mugentk\/model-mean-to-describe\uff09\n\u53c2\u8003\n","781f051d":"\u307e\u3060\uff0c\u3088\u304f\u308f\u304b\u3089\u3093\uff0cjab,upper\u306a\u3069\u306e\u69cb\u6210\u8981\u7d20\u306b\u5206\u3051\u3066\u5b66\u7fd2\u3092\u3057\u305f\u3044\uff0e\uff0e\uff0e\uff0e\u3051\u3069\u5358\u7d14\u306b\u6642\u9593\u306b\u3088\u308a\u8981\u7d20\u3092\u5206\u3051\u308b\u3053\u3068\u306f\u53b3\u3057\u3044"}}