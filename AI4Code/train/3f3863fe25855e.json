{"cell_type":{"c830fa14":"code","c5257539":"code","ab72b12e":"code","868837c2":"code","696fbda1":"code","e8e412c3":"code","3dee1a08":"code","c8ab572d":"code","6b877b99":"code","1d77a2a4":"code","be63b763":"code","79001806":"code","0c267eb2":"code","41df3a63":"code","872ca527":"code","68b3eeb9":"code","912a3e0e":"code","81e47fc7":"code","935a4898":"code","27108443":"markdown","ce5b35e6":"markdown","62321f7d":"markdown","eff89405":"markdown","cea76673":"markdown","0718fc2c":"markdown","08cd3fcf":"markdown","e418ba22":"markdown","4e449358":"markdown","25deb1c3":"markdown","215a0db7":"markdown","d784c459":"markdown"},"source":{"c830fa14":"from keras.models import Sequential\nfrom keras.layers import Conv2D,MaxPooling2D,Activation,Dropout,Flatten,Dense\nfrom keras.preprocessing.image import ImageDataGenerator, img_to_array,load_img\nfrom glob import glob # To understand how many classes we have","c5257539":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns  \nimport matplotlib.pyplot as plt\n","ab72b12e":"train_path = \"\/kaggle\/input\/fruits\/fruits-360\/Training\/\"\ntest_path = \"\/kaggle\/input\/fruits\/fruits-360\/Test\/\"","868837c2":"img = load_img(test_path +\"Salak\/140_100.jpg\") #\"+\" means add directory","696fbda1":"plt.imshow(img)\nplt.axis(\"off\")\nplt.show()","e8e412c3":"x = img_to_array(img)\nprint(x.shape) #100px x 100px x 3(rgb = color code)","3dee1a08":"className = glob(train_path + '\/*') #go through train path after that add all the files names in train path to ClassName\n#First method to learn number of classes when that is list.\nnum_of_classes = len(className)\nprint(\"Number of Classes : \",num_of_classes)","c8ab572d":"examplefruit = glob(train_path + \"Nectarine Flat\" +  '\/*') #go through train path after that add all the files names in train path to ClassName\n#First method to learn number of classes when that is list.\nnum_of_classesex = len(examplefruit)\nprint(\"Number of Classes : \",num_of_classesex) ","6b877b99":"#Second method to learn num of classes\nclassname = pd.DataFrame(className) # We convert our list to DataFrame for using nunique function.\nclassname.nunique() # We got 131 classes","1d77a2a4":"example = glob(train_path + '\/*') #go through train path after that add all the files names in train path to ClassName\n#First method to learn number of classes when that is list.\nnum_of_classes = len(className)\nprint(\"Number of Classes : \",num_of_classes)","be63b763":"model = Sequential()\nmodel.add(Conv2D(32,(3,3),input_shape = x.shape)) # 3x3 32 Filter\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPooling2D())\n\nmodel.add(Conv2D(64,(3,3))) # 3x3 64 Filter\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPooling2D())\n\nmodel.add(Flatten())\nmodel.add(Dense(1024)) #1024 Layer\nmodel.add(Activation(\"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(num_of_classes)) #Output layer >> Output layer size must equal to output(this model = classes)\nmodel.add(Activation(\"softmax\"))","79001806":"model.compile(loss = \"categorical_crossentropy\",\n             optimizer = \"rmsprop\",\n             metrics = [\"accuracy\"])\nbatch_size = 32","0c267eb2":"train_datagen = ImageDataGenerator(rescale = 1.\/255, #Rgb 0-255 ,we normalized the data\n                  shear_range = 0.3, #Randomly rotated\n                  horizontal_flip = True, #Rotated horizontally \n                  zoom_range = 0.3)\n\ntest_datagen = ImageDataGenerator(rescale = 1.\/255)\n\n# -------------------------------------------------------------------------------\n\ntrain_generator = train_datagen.flow_from_directory(train_path,\n                                                   target_size = x.shape[:2],\n                                                   batch_size = batch_size,\n                                                   color_mode = \"rgb\",\n                                                   class_mode = \"categorical\")\n                                                                                             \n#To use this method train method have to describe like we did after that there should be classes then the pics.\n#The right directory for this method must be like that. \n\ntest_generator = test_datagen.flow_from_directory(test_path,\n                                                   target_size = x.shape[:2],\n                                                   batch_size = batch_size,\n                                                   color_mode = \"rgb\",\n                                                   class_mode = \"categorical\")","41df3a63":"hist = model.fit_generator(\n    generator = train_generator, \n    steps_per_epoch = 1600\/\/ batch_size,\n    epochs = 75,\n    validation_data = test_generator,\n    validation_steps = 800 \/\/ batch_size)","872ca527":"model.save_weights(\"trial.h5\") # Saving our results\n","68b3eeb9":"print(hist.history.keys())\nplt.plot(hist.history[\"loss\"], label =\"Train Loss\")\nplt.plot(hist.history[\"val_loss\"], label =\"Test Loss\")\nplt.legend()\nplt.show()\n\n#-----------------------------------------------------------------------\n\nprint(hist.history.keys())\nplt.plot(hist.history[\"accuracy\"], label =\"Train Accuracy\")\nplt.plot(hist.history[\"val_accuracy\"], label =\"Test Accuracy\")\nplt.legend()\nplt.show()","912a3e0e":"import json \nwith open(\"trial.json\",\"w\") as f:\n    json.dump(hist.history,f)","81e47fc7":"import codecs \nwith codecs.open(\".\/trial.json\",\"r\",encoding = \"utf-8\") as f:\n    h = json.loads(f.read())","935a4898":"# print(h.keys())\n# plt.plot(h[\"loss\"], label =\"Train Loss\")\n# plt.plot(h[\"val_loss\"], label =\"Test Loss\")\n# plt.legend()\n# plt.show()\n# \n# #-----------------------------------------------------------------------\n# \n# print(h.keys())\n# plt.plot(h[\"accuracy\"], label =\"Train Accuracy\")\n# plt.plot(h[\"val_accuracy\"], label =\"Test Accuracy\")\n# plt.legend()\n# plt.show()","27108443":"### Saving Results","ce5b35e6":"## Creating the CNN Model ","62321f7d":"### Model Evaluation","eff89405":"### Save History","cea76673":"### Data Augmentation","0718fc2c":"**So we know the input and output shapes, also we know num of classes, so let's create our CNN Model**\n","08cd3fcf":"As you see there are roughly 480 samples for each type of fruits but \u0131t won't be enough for Deep Learning Model that's why we need to do \"Data Augmentation\"\n","e418ba22":"### Load History","4e449358":"### Import Libraries ","25deb1c3":"By using Data Augmentation we gonna supply many various type of same pics such as rotated, mirrored, zoomed etc. versions.","215a0db7":"**We used categorical_crossentropy as loss function because we used softmax activation (Multi-Class activation)**","d784c459":"### Describing Paths"}}