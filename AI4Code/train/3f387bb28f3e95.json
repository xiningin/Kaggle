{"cell_type":{"b3a0d948":"code","a5084799":"code","fbc24f5f":"code","d97641b7":"code","f2fe8da5":"code","b6321581":"code","a886fbc7":"code","ae4e9c2f":"code","5c83fe58":"code","d14510dd":"code","d22b0aae":"code","c7dfc353":"code","2fde6f4e":"code","47074739":"code","0a34a359":"code","3fbe9ac6":"code","c89db72c":"markdown","059d3816":"markdown","289b69be":"markdown"},"source":{"b3a0d948":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a5084799":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndata=pd.read_csv(\"\/kaggle\/input\/covid19-in-italy\/covid19_italy_region.csv\")\ndata.head()","fbc24f5f":"data.columns","d97641b7":"data.info()","f2fe8da5":"data.describe()","b6321581":"data.corr()","a886fbc7":"df = data.groupby('Date')[['HospitalizedPatients', 'IntensiveCarePatients',\n       'TotalHospitalizedPatients', 'HomeConfinement', 'CurrentPositiveCases',\n       'NewPositiveCases', 'Recovered', 'Deaths', 'TotalPositiveCases',\n       'TestsPerformed']].sum()\ndf[\"day\"]=range(1,len(df.Deaths)+1)","ae4e9c2f":"df.head()","5c83fe58":"plt.figure(figsize=(10,10))\nsns.barplot(x=df['day'], y=df['Deaths'])\nplt.xticks(rotation= 90)\nplt.xlabel('Days')\nplt.ylabel('Deaths')","d14510dd":"data1 = df[['day','CurrentPositiveCases']]\nsns.pairplot(data1,kind=\"reg\");","d22b0aae":"#Linear\n\n# Pandas k\u00fct\u00fcphanesinden iloc fonksiyonu yard\u0131m\u0131yla \"day\" kolonunun de\u011ferlerini bir de\u011fi\u015fkene atad\u0131k\n\nday= df.iloc[:,-1].values.reshape(-1,1)\n\n# CurrentPositiveCases kolonunun de\u011ferlerini bir de\u011fi\u015fkene atad\u0131k\nCurrentPositiveCases= df.iloc[:,4:5].values.reshape(-1,1)\n\n# sklearn library\nfrom sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(day,CurrentPositiveCases,test_size=0.33,random_state=0)\n\n# sklearn k\u00fct\u00fcphanesini kullanarak LinearRegression s\u0131n\u0131f\u0131n\u0131 dahil ediyoruz.\nfrom sklearn.linear_model import LinearRegression\n\n#S\u0131n\u0131ftan bir nesne olu\u015fturuyoruz.\nlr = LinearRegression()\n\n# Train veri k\u00fcmelerini vererek makineyi e\u011fitiyoruz.\nlr.fit(x_train,y_train)\n\n# gunlerin'\u0131n test k\u00fcmesini vererek CurrentPositiveCases'leri tahmin etmesini sa\u011fl\u0131yoruz\ntahmin = lr.predict(x_test)\n\nx_train=np.sort(x_train)\ny_train=np.sort(y_train)\n\n\n\nb0 = lr.predict([[0]])\nprint(\"b0: \",b0)     # y eksenini kestigi nokta predict ile\n\nb0_ =lr.intercept_\nprint(\"b0_: \",b0_)   # y eksenini kestigi nokta intercept ile\n\nb1 = lr.coef_\nprint(\"b1: \",b1)     # egim slope\n\n# Grafik \u015feklinde ekrana bas\u0131yoruz.\nplt.scatter(x_train,y_train)\nplt.plot(x_test,tahmin,color=\"red\")\nplt.show()\n\n#tahmin ornek...100 gun sonra \nprint('100 gun sonra :',lr.predict([[100]]))","c7dfc353":"\n# day kolonunun de\u011ferlerini bir de\u011fi\u015fkene atad\u0131k\nday= df.iloc[:,-1].values.reshape(-1,1)\n\n# Deaths kolonunun de\u011ferlerini bir de\u011fi\u015fkene atad\u0131k\nDeaths= df.iloc[:,7:8].values.reshape(-1,1)\n\n# sklearn k\u00fct\u00fcphanesini kullanarak LinearRegression s\u0131n\u0131f\u0131n\u0131 dahil ediyoruz.\nfrom sklearn.linear_model import LinearRegression\n\n# LinearRegression s\u0131n\u0131ftan bir nesne olu\u015fturuyoruz.\nlr = LinearRegression()\n\n#PolynomialFeatures s\u0131n\u0131fini import ettik\nfrom sklearn.preprocessing import PolynomialFeatures\n\n# PolynomialFeatures s\u0131n\u0131f\u0131ndan bir nesne \u00fcrettik.\npoly = PolynomialFeatures(degree=5)\n\n# Makineyi e\u011fitmeden \u00f6nce day kolonundaki de\u011ferleri PolynomialFeatures ile d\u00f6n\u00fc\u015f\u00fcm yap\u0131yoruz.\nday_poly = poly.fit_transform(day)\n\n# Makineyi e\u011fitiyoruz.\nlr.fit(day_poly, Deaths)\n\n# Makineyi e\u011fittikten sonra bir tahmin yapt\u0131rt\u0131yoruz.\npredict = lr.predict(day_poly)\n\n\nplt.scatter(day, Deaths, color='red')\nplt.plot(day, predict, color='blue')\nplt.xlabel('days')\nplt.ylabel('Deaths')\nplt.show()","2fde6f4e":"#df[['day','Deaths']]","47074739":"# Polinom\n\nCurrentPositiveCases= df.iloc[:,4:5].values.reshape(-1,1)\nrecorved= df.iloc[:,6:7].values.reshape(-1,1)\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\nlr = LinearRegression()\n\npoly = PolynomialFeatures(degree=5)\n\nCurrentPositiveCases_poly = poly.fit_transform(CurrentPositiveCases)\n\nlr.fit(CurrentPositiveCases_poly, recorved)\n\npredict = lr.predict(CurrentPositiveCases_poly)\n\nplt.scatter(CurrentPositiveCases, recorved, color='red')\nplt.plot(CurrentPositiveCases, predict, color='blue')\nplt.show()","0a34a359":"# Kurtulan sayisinda evde,hastanede ve yogun bakimdakilerin sayisini kullandik","3fbe9ac6":"x = df.iloc[:,[0,1,3]].values\ny = df.Recovered.values.reshape(-1,1)\n\nmultiple_linear_regression = LinearRegression()\nmultiple_linear_regression.fit(x,y)\n\nprint(\"b0: \", multiple_linear_regression.intercept_)\nprint(\"b1,b2,b3: \",multiple_linear_regression.coef_)\n\n","c89db72c":"# linear_reg","059d3816":"# Polynomial","289b69be":"# multiple_linear_regression"}}