{"cell_type":{"ee6a38e3":"code","82f459d0":"code","7a61e9b0":"code","bdd4fd05":"code","8ff338f9":"code","3c24c2fb":"code","e0b1cde0":"code","43aa9830":"code","c1942b88":"code","5eb3b70c":"code","48776125":"code","32154078":"code","4be0070e":"code","ee876394":"code","17265793":"code","ce71ec8b":"code","41c50f57":"code","5ba211eb":"code","a2148a02":"code","648c8efc":"code","947a0930":"code","7ba5f0f4":"code","f35d08c1":"code","689d95d3":"code","3d7fd414":"code","a6c21a8b":"code","9408bf7f":"code","f761044f":"code","c72ab7ad":"code","21666d4c":"code","f42206a4":"code","42ac9508":"markdown","5a6ee013":"markdown","1b13648f":"markdown","8b799ead":"markdown","062374db":"markdown","4ebde320":"markdown","8b1bcffb":"markdown","d1dc3217":"markdown","0a10cc38":"markdown","c01cdff8":"markdown","e1b52690":"markdown","fe8dc7c1":"markdown","c77617ef":"markdown","7dffcd22":"markdown","13b4d4dd":"markdown","5f88c916":"markdown","15bd664e":"markdown","8792e45f":"markdown","2ebe59f8":"markdown","0eef9b66":"markdown","3f525c8d":"markdown","b67ffdf8":"markdown","0878a9ee":"markdown","790a2d2a":"markdown","57be5d3c":"markdown","f2defc5b":"markdown","de579cf5":"markdown","c258f220":"markdown","5549b951":"markdown","31fe3acf":"markdown","5ee61ff1":"markdown","fb1b6035":"markdown","8fbb0507":"markdown","9a734a2a":"markdown","41c200ea":"markdown","3f2f76a3":"markdown"},"source":{"ee6a38e3":"## Upgrade library\n!\/opt\/conda\/bin\/python3.7 -m pip install --upgrade pip\n!pip install -U seaborn","82f459d0":"import os\nimport numpy as np\nimport pandas as pd\n\n# general for visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nplt.style.use(\"fivethirtyeight\")","7a61e9b0":"def init_seed(SEED=42):\n    os.environ['PYTHONHASHSEED'] = str(SEED)\n    np.random.seed(SEED)\ninit_seed(42)","bdd4fd05":"train = pd.read_csv('\/kaggle\/input\/lish-moa\/train_features.csv')\ntest = pd.read_csv('\/kaggle\/input\/lish-moa\/test_features.csv')\ntrain_target = pd.read_csv('\/kaggle\/input\/lish-moa\/train_targets_scored.csv')\nsub= pd.read_csv('\/kaggle\/input\/lish-moa\/sample_submission.csv')\n\n# concat train and target\ndf = train.set_index(['sig_id']).join(train_target.set_index('sig_id'))\n(train.shape, train_target.shape, test.shape)","8ff338f9":"train.head(10)","3c24c2fb":"test.head(10)","e0b1cde0":"train_target.head(10)","43aa9830":"# Top 10 missing values\nfig, axes = plt.subplots(2, 2, figsize=(15, 8))\n(train.isna().sum().sort_values()*100\/len(train)).head(10).plot.barh(ax = axes[0][0])\n(test.isna().sum().sort_values()*100\/len(train)).head(10).plot.barh(ax = axes[0][1])\n(train_target.isna().sum().sort_values()*100\/len(train)).head(10).plot.barh(ax = axes[1][0])","c1942b88":"fig, axes = plt.subplots(1, 3, figsize=(15, 8))\nsns.countplot(data=train, x='cp_type', ax=axes[0])\nsns.countplot(data=train, x='cp_dose', ax=axes[1])\nsns.countplot(data=train, x='cp_time', ax=axes[2])\n\naxes[0].set_title('Sample Treatment', fontsize=15)\naxes[1].set_title('Dose Treatment', fontsize=15)\naxes[2].set_title('Time Treatment', fontsize=15)","5eb3b70c":"train['g_mean'] = train[[x for x in train.columns if x.startswith('g-')]].mean(axis=1)\nsns.displot(data=train, x = f'g_mean', height=6, aspect=2)\nprint('Description of g-mean: ', train['g_mean'].describe())","48776125":"sns.displot(data=train, x = f'g_mean', hue='cp_type', height=6, aspect=2)\nsns.displot(data=train, x = f'g_mean', hue='cp_dose', height=6, aspect=2)\nsns.displot(data=train, x = f'g_mean', hue='cp_time', height=6, aspect=2)","32154078":"train['c_mean'] = train[[x for x in train.columns if x.startswith('c-')]].mean(axis=1)\nsns.displot(data=train, x = 'c_mean', height=6, aspect=2)\nprint(train['c_mean'].describe())","4be0070e":"sns.displot(data=train, x = f'c_mean', hue='cp_type', height=6, aspect=2)\nsns.displot(data=train, x = f'c_mean', hue='cp_dose', height=6, aspect=2)\nsns.displot(data=train, x = f'c_mean', hue='cp_time', height=6, aspect=2)","ee876394":"sns.countplot(data=df, x='cp_type', hue='trpv_agonist')","17265793":"fig, axes = plt.subplots(1, 1, figsize=(50, 30))\ncols = [x for x in train.columns if x.startswith('g-')]\nsns.heatmap(data=train.drop(columns=['cp_type', 'cp_dose', 'sig_id'])[cols[:30]].corr(), ax=axes)","ce71ec8b":"\ncols = [x for x in train.columns if x.startswith('g-')]\nsns.clustermap(data=train.drop(columns=['cp_type', 'cp_dose', 'sig_id'])[cols[:30]].corr())","41c50f57":"#PCA\nfrom sklearn.decomposition import PCA\n#TSNE\nfrom sklearn.manifold import TSNE\n#UMAP\nfrom umap import UMAP","5ba211eb":"import warnings\nwarnings.filterwarnings('ignore')\ng_cols = [x for x in train.columns if x.startswith('g-')]\n\npca = PCA(n_components=3).fit_transform(train[g_cols])\nprint('Done PCA')\npca_fake = PCA(n_components=10)\npca_result = pca_fake.fit_transform(train[g_cols])\nprint('Done PCA results')\ntsne = TSNE(n_components=3).fit_transform(pca_result)\nprint('Done TSNE')\numap = UMAP(random_state=42,n_components=3).fit_transform(pca_result)\nprint('Done UMAP')\n\nfig, axes = plt.subplots(3, 1, figsize=(12, 16))\nsns.scatterplot(x=pca[:, 0], y=pca[:, 1], ax=axes[0])\nsns.scatterplot(x=tsne[:, 0], y=tsne[:, 1], ax=axes[1])\nsns.scatterplot(x=umap[:, 0], y=umap[:, 1], ax=axes[2])\n","a2148a02":"ax = plt.figure(figsize=(10,8)).gca(projection='3d')\nax.scatter(\n    xs=pca[:, 0], \n    ys=pca[:, 1], \n    zs=pca[:, 2], \n    cmap='gist_rainbow'\n)\nax.set_xlabel('Principal Component 1')\nax.set_ylabel('Principal Component 2')\nax.set_zlabel('Principal Component 3')\nplt.title('Visualizing g-feature PCA in 3D', fontsize=24);\nplt.show()","648c8efc":"ax = plt.figure(figsize=(10,8)).gca(projection='3d')\nax.scatter(\n    xs=tsne[:, 0], \n    ys=tsne[:, 1], \n    zs=tsne[:, 2], \n    cmap='gist_rainbow'\n)\nax.set_xlabel('TSNE 1')\nax.set_ylabel('TSNE 2')\nax.set_zlabel('TSNE 3')\nplt.title('Visualizing g-feature TSNE in 3D', fontsize=24);\nplt.show()","947a0930":"ax = plt.figure(figsize=(10,8)).gca(projection='3d')\nax.scatter(\n    xs=umap[:, 0], \n    ys=umap[:, 1], \n    zs=umap[:, 2], \n    cmap='gist_rainbow'\n)\nax.set_xlabel('UMAP 1')\nax.set_ylabel('UMAP 2')\nax.set_zlabel('UMAP 3')\nplt.title('Visualizing g-feature UMAP in 3D', fontsize=24);\nplt.show()","7ba5f0f4":"c_cols = [x for x in train.columns if x.startswith('c-')]\n\npca = PCA(n_components=3).fit_transform(train[c_cols])\nprint('Done PCA')\npca_fake = PCA(n_components=10)\npca_result = pca_fake.fit_transform(train[g_cols])\nprint('Done PCA results')\ntsne = TSNE(n_components=3).fit_transform(pca_result)\nprint('Done TSNE')\numap = UMAP(random_state=42,n_components=3).fit_transform(pca_result)\nprint('Done UMAP')\n\nfig, axes = plt.subplots(3, 1, figsize=(12, 16))\nsns.scatterplot(x=pca[:, 0], y=pca[:, 1], ax=axes[0])\nsns.scatterplot(x=tsne[:, 0], y=tsne[:, 1], ax=axes[1])\nsns.scatterplot(x=umap[:, 0], y=umap[:, 1], ax=axes[2])\n","f35d08c1":"ax = plt.figure(figsize=(10,8)).gca(projection='3d')\nax.scatter(\n    xs=pca[:, 0], \n    ys=pca[:, 1], \n    zs=pca[:, 2], \n    cmap='gist_rainbow'\n)\nax.set_xlabel('Principal Component 1')\nax.set_ylabel('Principal Component 2')\nax.set_zlabel('Principal Component 3')\nplt.title('Visualizing c-feature PCA in 3D', fontsize=24);\nplt.show()","689d95d3":"ax = plt.figure(figsize=(10,8)).gca(projection='3d')\nax.scatter(\n    xs=tsne[:, 0], \n    ys=tsne[:, 1], \n    zs=tsne[:, 2], \n    cmap='gist_rainbow'\n)\nax.set_xlabel('TSNE 1')\nax.set_ylabel('TSNE 2')\nax.set_zlabel('TSNE 3')\nplt.title('Visualizing c-feature TSNE in 3D', fontsize=24);\nplt.show()","3d7fd414":"ax = plt.figure(figsize=(10,8)).gca(projection='3d')\nax.scatter(\n    xs=umap[:, 0], \n    ys=umap[:, 1], \n    zs=umap[:, 2], \n    cmap='gist_rainbow'\n)\nax.set_xlabel('UMAP 1')\nax.set_ylabel('UMAP 2')\nax.set_zlabel('UMAP 3')\nplt.title('Visualizing c-feature UMAP in 3D', fontsize=24);\nplt.show()","a6c21a8b":"train_target.drop(columns=['sig_id']).sum().sort_values(ascending=False).head(30).plot.barh(figsize=(8, 8))","9408bf7f":"train_target.drop(columns=['sig_id']).sum().sort_values(ascending=True).head(30).plot.barh(figsize=(8, 8))","f761044f":"train['cp_type'] = train['cp_type'].replace({'trt_cp': 0, \"ctl_vehicle\": 1})\ntrain['cp_dose'] = train['cp_dose'].replace({'D1': 0, \"D2\": 1})\n\ntest['cp_type'] = test['cp_type'].replace({'trt_cp': 0, \"ctl_vehicle\": 1})\ntest['cp_dose'] = test['cp_dose'].replace({'D1': 0, \"D2\": 1})","c72ab7ad":"column_X = train.drop(columns=['sig_id']).columns\ncolumn_y = train_target.drop(columns=['sig_id']).columns","21666d4c":"datatrain = train.set_index(['sig_id']).join(train_target.set_index('sig_id'))","f42206a4":"\n## submission\nsub['sig_id'] = test['sig_id']\nparams = {\n    \"task\": 'train',\n    \"boosting_type\": 'gbdt',\n    \"num_leaves\": 128,\n    \"max_depth\": 20,\n    \"n_estimators\": 150,\n    \"metrics\": \"auc\"\n\n}\n\ndata_train, data_val = train_test_split(datatrain, test_size=0.2)\nfor col in tqdm(column_y):\n    train_lgb = lgb.Dataset(data_train[column_X], data_train[col])\n    val_lgb = lgb.Dataset(data_val[column_X], data_val[col])\n    clf = lgb.train(params = params, train_set=train_lgb, valid_sets=val_lgb, verbose_eval=50)\n    sub[col] = np.where(clf.predict(test.drop(columns=['sig_id']))>0.5, 1, 0)\n    \n    print(\"{} Done^^\".format(col))\n    break\nprint('CPU chan qua=)) To be continue...')\n","42ac9508":"#### 6.1 PCA, TNSE, UMAP 2D visualization for gene","5a6ee013":"#### 2.1 Load libraries","1b13648f":"#### 7. Target EDA","8b799ead":"6.3 Distribution  3D for gene","062374db":"#### 4.6 Distribution of c_mean base on treatment","4ebde320":"#### 2.2 Helper functions","8b1bcffb":"##### 4.2 Distribution of g_mean","d1dc3217":"#### 6.5 PCA 3D SPACE of c","0a10cc38":"#### 2.3 Load data","c01cdff8":"### 4. Individual feature visualization","e1b52690":"#### 3.2 testing dataset","fe8dc7c1":"#### 4.1 Treatment feature","c77617ef":"### UMAP 3D SPACE of c-feature","7dffcd22":"### 5. Multiple Feature interaction visuals","13b4d4dd":"#### 3.5 Missing values","5f88c916":"### 2. Preparation","15bd664e":"#### 6.4 Dimension Reduction of UMAP for gene","8792e45f":"#### 4.5 Distribution of c-mean","2ebe59f8":"### 3. Overview File Struture and Content","0eef9b66":"#### 4.3 Distribution of g-mean base on treatment","3f525c8d":"#### 6.6 TSNE 3D SPACE of c","b67ffdf8":"## Category encoding","0878a9ee":"### 6. Dimensional Reduction","790a2d2a":"## Modeling","57be5d3c":"In the past, scientists derived drugs from natural products or were inspired by traditional remedies. Very common drugs, such as paracetamol, known in the US as acetaminophen, were put into clinical use decades before the biological mechanisms driving their pharmacological activities were understood. Today, with the advent of more powerful technologies, drug discovery has changed from the serendipitous approaches of the past to a more targeted model based on an understanding of the underlying biological mechanism of a disease. In this new framework, scientists seek to identify a protein target associated with a disease and develop a molecule that can modulate that protein target. As a shorthand to describe the biological activity of a given molecule, scientists assign a label referred to as mechanism-of-action or MoA for short.","f2defc5b":"#### 5.1  Treatment feature","de579cf5":"we find","c258f220":"#### 6.2 PCA visualization for gene","5549b951":"#### 3.3 target dataset","31fe3acf":"#### 5.2 Correlation Plot","5ee61ff1":"### 1. Introduction","fb1b6035":"### 5.4 Cluster Plot","8fbb0507":"#### 7.1 Top targets","9a734a2a":"#### 7.2 Lowest target","41c200ea":"#### 6.3 Distribution 2d for c","3f2f76a3":"#### 3.1 Training dataset"}}