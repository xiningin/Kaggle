{"cell_type":{"81c0612c":"code","21c5c25f":"code","55ce9fef":"code","f1ed513b":"code","1232e90b":"code","57492592":"code","fcd425f7":"code","9e138307":"code","1c8f09d5":"code","84f4996f":"code","c86057d1":"code","ec73474d":"code","d9d377c8":"code","ff37154c":"code","781d5c5b":"code","30705a57":"code","01decb33":"code","256dc2a6":"code","19e247f9":"code","2862606e":"code","c163e3c4":"code","faee4c28":"code","2bddc2c3":"code","19017845":"code","62ec5d15":"code","777a6960":"code","bb6493ef":"code","3d1bb55c":"code","b1be6e5e":"code","e9b15fcd":"code","2b46164e":"code","59a4b5b2":"code","b7fa4be0":"code","5f4d049e":"code","f551a130":"code","aa9922c4":"code","18dfc8f4":"code","6b99571c":"code","eccefc64":"code","eee6bdc8":"code","0adc9747":"code","845f6f11":"code","bc58fff8":"code","77b93bea":"code","fddc54cb":"markdown","2d7c9334":"markdown","218b0415":"markdown","8ef08d35":"markdown","8dd580cc":"markdown","2742b2c5":"markdown","a7a79b99":"markdown","eaa34ee4":"markdown","3780ba33":"markdown","1b8c5f56":"markdown","c3e69a13":"markdown","656423b8":"markdown","326219f1":"markdown","f8818416":"markdown","bf6de9ec":"markdown","fc42fdae":"markdown","79919b8d":"markdown","ab4b7972":"markdown","d045cad4":"markdown","21f76abf":"markdown","280d4a1e":"markdown","ebbfff6b":"markdown","1482a359":"markdown","6ddfc4d4":"markdown","530bbb3b":"markdown","23edc342":"markdown","758ad43e":"markdown","b19db4d1":"markdown","5bdcf311":"markdown","04318036":"markdown","f84d62c1":"markdown","09e816c7":"markdown"},"source":{"81c0612c":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nplt.style.use(\"dark_background\")\nimport seaborn as sns\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","21c5c25f":"train_df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest_PassengerId = test_df[\"PassengerId\"]\n","55ce9fef":"train_df.columns #checking columns","f1ed513b":"train_df.head() #taking the first 5 entries to check","1232e90b":"train_df.describe() #gaining some information about data","57492592":"train_df.info() #checking Dtypes","fcd425f7":"def bar_plot(variable):\n    \"\"\" input: variable ex: \"Sex\"\n        output: bar plot & value count\n    \"\"\"\n    #get feature\n    var = train_df[variable]\n    #count number of categorical variable(value\/sample)\n    varValue =var.value_counts()\n    \n    #visualize\n    plt.figure(figsize=(9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))\n","9e138307":"category1=[\"Survived\", \"Sex\", \"Pclass\", \"Embarked\",\"SibSp\",\"Parch\"]\nfor c in category1:\n    bar_plot(c)","1c8f09d5":"category2=[\"Cabin\",\"Name\",\"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","84f4996f":"def plot_hist(variable):\n    plt.figure(figsize=(9,3))\n    plt.hist(train_df[variable], bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","c86057d1":"numericVar = [\"Fare\",\"Age\",\"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)\n","ec73474d":"# Pclass versus Survived\ntrain_df[[\"Pclass\", \"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by=\"Survived\", ascending = False)\n#Taken Pclass and Survived as a group, then taken the mean to see the relation.\n#Shown that from Class 1 to 3, survival probability decreases.","d9d377c8":"#Sex versus Survived\ntrain_df[[\"Sex\", \"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by=\"Survived\", ascending = False)\n#Taken Sex and Survived as a group, then taken the mean to see the relation.\n#Shown that female were more likely to survive.","ff37154c":"#SibSp versus Survived\ntrain_df[[\"SibSp\", \"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by=\"Survived\", ascending = False)\n#Taken SibSp and Survived as a group, then taken the mean to see the relation.","781d5c5b":"#Parch versus Survived\ntrain_df[[\"Parch\", \"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by=\"Survived\", ascending = False)\n#Taken Parch and Survived as a group, then taken the mean to see the relation.","30705a57":"def detect_outliers(df,features):\n    outlier_indices = []\n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c], 25)\n        \n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        \n        #IQR\n        IQR = Q3 - Q1\n        \n        #Outlier step\n        outlier_step = IQR * 1.5\n        \n        #detect outlier and their indices\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        \n        #store indices\n        outlier_indices.extend(outlier_list_col)\n        \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n\n    return multiple_outliers","01decb33":"train_df.loc[detect_outliers(train_df, [\"Age\", \"SibSp\",\"Parch\",\"Fare\"])]","256dc2a6":"#drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df, [\"Age\", \"SibSp\",\"Parch\",\"Fare\"]), axis= 0).reset_index(drop = True)","19e247f9":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df, test_df], axis = 0).reset_index(drop=True)","2862606e":"train_df.head()","c163e3c4":"train_df.columns[train_df.isnull().any()]","faee4c28":"train_df.isnull().sum()","2bddc2c3":"#Checking for Embarked\ntrain_df[train_df[\"Embarked\"].isnull()]","19017845":"train_df.boxplot(column= \"Fare\", by=\"Embarked\")\nplt.show() \n#C is more likely to fill the NaN Embarked.","62ec5d15":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]\n#They're filled.","777a6960":"#Checking for Fare\ntrain_df[train_df[\"Fare\"].isnull()]","bb6493ef":"#Filling NaN Fare by the mean.\ntrain_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] ==3][\"Fare\"]))","3d1bb55c":"#Checking if there are any NaN Fare.\ntrain_df[train_df[\"Fare\"].isnull()]","b1be6e5e":"list1=[\"SibSp\",\"Parch\",\"Age\",\"Fare\",\"Survived\"]\nsns.heatmap(train_df[list1].corr(), annot=True, fmt=\".2f\")\nplt.style.use(\"seaborn-whitegrid\")","e9b15fcd":"g = sns.factorplot(x =\"SibSp\",y=\"Survived\", data=train_df, kind=\"bar\",size=6)\ng.set_ylabels(\"Survived Probability\")\nplt.style.use(\"seaborn-whitegrid\")\nplt.show()","2b46164e":"g = sns.factorplot(x = \"Parch\", y= \"Survived\",data= train_df, kind=\"bar\", size=6)\ng.set_ylabels(\"Survived Probability\")\nplt.style.use(\"seaborn-whitegrid\")\nplt.show()","59a4b5b2":"g = sns.factorplot(x = \"Pclass\", y= \"Survived\",data= train_df, kind=\"bar\", size=6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","b7fa4be0":"g = sns.FacetGrid(train_df,col=\"Survived\")\ng.map(sns.distplot, \"Age\", bins=25)\nplt.show()","5f4d049e":"g = sns.FacetGrid(train_df, col =\"Survived\", row =\"Pclass\", size=2)\ng.map(plt.hist, \"Age\", bins=25)\ng.add_legend()\nplt.show()","f551a130":"g = sns.FacetGrid(train_df, row = \"Embarked\", size = 2)\ng.map(sns.pointplot, \"Pclass\",\"Survived\",\"Sex\")\ng.add_legend()\nplt.show()","aa9922c4":"g = sns.FacetGrid(train_df, row = \"Embarked\", col = \"Survived\", size = 2.3)\ng.map(sns.barplot, \"Sex\",\"Fare\")\ng.add_legend()\nplt.show()","18dfc8f4":"train_df[train_df[\"Age\"].isnull()]","6b99571c":"sns.factorplot(x=\"Sex\", y=\"Age\", data=train_df, kind=\"box\")\nplt.show()","eccefc64":"sns.factorplot(x=\"Sex\", y=\"Age\", hue = \"Pclass\", data=train_df, kind=\"box\")\nplt.show()","eee6bdc8":"sns.factorplot(x=\"Parch\", y=\"Age\", data=train_df, kind=\"box\")\nsns.factorplot(x=\"SibSp\", y=\"Age\", data=train_df, kind=\"box\")\nplt.show()","0adc9747":"train_df[\"Sex\"] = [1 if i == \"male\" else 0 for i in train_df[\"Sex\"]]","845f6f11":"sns.heatmap(train_df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\"]].corr(), annot=True)\nplt.show()","bc58fff8":"index_nan_age=list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred=train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"])&\n                            (train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"])&\n                            (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i]=age_pred\n    else:\n        train_df[\"Age\"].iloc[i]=age_med","77b93bea":"train_df[train_df[\"Age\"].isnull()]","fddc54cb":"<a id = \"6\"><\/a><br>\n## Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","2d7c9334":"* Age <= 10 has a high survival rate\n* Oldest passengers (80) survived.\n* Large number of 20 years old did not survive.\n* Most passengers are in 15-35 age range.\n* Use age distribution for missing value of age.","218b0415":"<a id = \"12\"><\/a><dr>\n\n### Correlation Between SibSp -- Parch -- Age -- Fare -- Survived","8ef08d35":"<a id = \"15\"><\/a><dr>\n### Pclass - Survived","8dd580cc":"<a id = \"14\"><\/a><dr>\n### Parch -- Survived","2742b2c5":"* Passengers who pay higher fare have better survival. Fare can be used as categorical for training.","a7a79b99":"<a id=\"7\"><\/a><br>\n## Outlier Detection","eaa34ee4":"Sex is not informative for age prediction. Age distribition seems to be same.","3780ba33":"<a id= \"8\"><\/a><br>\n## Missing Value\n* Find Missing Value\n* Fill Missing Value","1b8c5f56":"<a id = \"1\"><\/a><dr>\n## Load and Check Data","c3e69a13":"# **Introduction**\n> One of the most famous tragedies in modern history, the sinknig of Titanic, happened in April 14-15, 1912 during its voyage. About 1500 out of 2,200 passengers and crew died.\n\n<font color = 'blue'>\nContent:\n\n1. [Load and Check Data](#1)\n2. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable](#4)\n        * [Numerical Variable](#5)\n3. [Basic Data Analysis](#6)\n4. [Outlier Detection](#7)\n5. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n6. [Visualization](#11)\n    * [Correlation Between SibSp -- Parch -- Age -- Fare -- Survived](#12)\n    * [SibSp -- Survived](#13)\n    * [Parch -- Survived](#14)\n    * [Pclass - Survived](#15)\n    * [Age -- Survived](#16)\n    * [Pclass -- Survived -- Age](#17)\n    * [Embarked -- Sex -- Pclass -- Survived](#18)\n    * [Embarked -- Sex -- Fare -- Survived](#19)\n    * [Fill Missing: Age Feature](#20)","656423b8":"<a id = \"16\"><\/a><dr>\n### Age -- Survived","326219f1":"<a id = \"20\"><\/a><dr>\n\n### Fill Missing: Age Feature","f8818416":"<a id = \"18\"><\/a><dr>\n### Embarked -- Sex -- Pclass -- Survived","bf6de9ec":"<a id = \"17\"><\/a><dr>\n### Pclass -- Survived -- Age\n","fc42fdae":"<a id = \"5\"><\/a><br>\n### Numerical Variable","79919b8d":"* Pclass is an important feature for model training.","ab4b7972":"<a id = \"4\"><\/a><br>\n### Categorical Variable","d045cad4":"Fare feature seems to have correalation with survived feature. (0.26)","21f76abf":"<a id = \"11\"><\/a><dr>\n## Visualization","280d4a1e":"<a id = \"13\"><\/a><dr>\n\n### SibSp -- Survived","ebbfff6b":"<a id= \"10\"><\/a><br>\n### Fill Missing Value\n* Embarked has 2 missing value\n* Fare has only 1 missing value","1482a359":"<a id = \"19\"><\/a><dr>\n### Embarked -- Sex -- Fare -- Survived","6ddfc4d4":"* float64(2): Fare and Age\n* int64(5): Pclass, SibSp, Parch, PassengerId and Survived\n* object(5): Cabin, Embarked, Name, Sex and Ticket","530bbb3b":"Age is not correlated with sex but it is correlated with parch, sibsp and pclass.","23edc342":"* Female passengers have much better survival rate than males.\n* Males have better survival rate in Pclass 3 in C.\n* Embarked and sex will be used in training.","758ad43e":"* SibSp and parch can be used for new feature extraction with th=3\n* Small families have more chance to survive.\n* There is a std in survival of passenger with parch=3","b19db4d1":"* Having a lot of SibSp have less chance to survive.\n* If SibSp == 0 or 1 or 2, passenger has more chance to survive.\n* We can consider a new feature describing these categories.","5bdcf311":"1st class passengers are older than 2nd, and 2nd is older than 3rd class.","04318036":"<a id = \"3\"><\/a><br>\n## Univariate Variable Analysis\n* Categorical Variable: Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, SibSp and Parch\n* Numerical Variable: Age, PassengerId and Fare","f84d62c1":"<a id= \"9\"><\/a><br>\n### Find Missing Value","09e816c7":"<a id = \"2\"><\/a><br>\n## Variable Description\n1. PassengerId: Unique ID for each Passenger\n2. Survived: Life State of Passenger (survived(1) or died(0))\n3. Pclass:   Class of Passenger\n4. Name:   Name of Passenger\n5. Sex:   Gender of Passenger\n6. Age:   Age of Passenger\n7. SibSp:   Number of Siblings\/Spouses\n8. Parch:   Number of Parents\/Children\n9. Ticket:   Ticket Number\n10. Fare:   Amount of Money Spent on Ticket\n11. Cabin:   Cabin Category\n12. Embarked:  Port where Passenger embarked(C= Cherbourg, Q= Queenstown, S= Southampton)\n"}}