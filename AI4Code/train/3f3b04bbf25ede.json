{"cell_type":{"da6471d7":"code","5b2bb67f":"code","dff1aec6":"code","627ba07b":"code","cd9ab834":"code","e1a64d08":"code","cfc3dca7":"code","8795697d":"code","4270caac":"code","167f93f3":"code","d1235eb8":"code","ceab4fa8":"code","2dfadd9d":"code","eb3babef":"markdown","465b1441":"markdown","21051240":"markdown","b91bd005":"markdown"},"source":{"da6471d7":"import pandas as pd\nimport numpy as np\nfrom datetime import datetime\nimport time\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\nimport seaborn as sns","5b2bb67f":"path = \"\/kaggle\/input\/g-research-crypto-forecasting\/\"\ndf_train = pd.read_csv(path + \"train.csv\")\ndf_test = pd.read_csv(path + \"example_test.csv\")\ndf_asset_details = pd.read_csv(path + \"asset_details.csv\")\ndf_supp_train = pd.read_csv(path + \"supplemental_train.csv\")","dff1aec6":"df_train.head(10)","627ba07b":"df_train.info(10)","cd9ab834":"df_asset_details.head(10)","e1a64d08":"df_train[\"Asset_ID\"].unique()","cfc3dca7":"sns.set(rc={'figure.figsize':(20,10)})\nasset_count= []\nfor i in range(14):\n    count = (df_train[\"Asset_ID\"]==i).sum()\n    asset_count.append(count)\nfig = sns.barplot(x = df_asset_details.sort_values(\"Asset_ID\")[\"Asset_Name\"],\n             y = asset_count,palette=\"Blues_d\") \nfig.set(xlabel =\"Assets\", ylabel = \"Number of Rows\", title ='Data Distribution')","8795697d":"df_asset_details['Name'] = df_asset_details['Asset_Name'].str.replace(\" \",\"_\")","4270caac":"df_asset_details","167f93f3":"## Checking Time Range\ndict1={}\nfor i in range(14):\n    dict1[df_asset_details[df_asset_details['Asset_ID']==i]['Name'].values[0]] = df_train[df_train[\"Asset_ID\"]==i].set_index(\"timestamp\") \n    beg = datetime.fromtimestamp(dict1[df_asset_details[df_asset_details['Asset_ID']==i]['Name'].values[0]].index[0]).strftime(\"%A, %B %d, %Y %I:%M:%S\") \n    end = datetime.fromtimestamp(dict1[df_asset_details[df_asset_details['Asset_ID']==i]['Name'].values[0]].index[-1]).strftime(\"%A, %B %d, %Y %I:%M:%S\") \n    print(df_asset_details[df_asset_details['Asset_ID']==i]['Name'].values[0],'data goes from ', beg, ' to ', end) ","d1235eb8":"plt.figure(figsize=(8,6))\nsns.heatmap(dict1['Bitcoin'][['Count','Open','High','Low','Close','Volume','VWAP','Target']].corr(), \n            vmin=-1.0, vmax=1.0, annot=True, cmap='PuBu_r', linewidths=0.1)\nplt.show()","ceab4fa8":"for i in dict1: \n    mini = dict1[i].iloc[-200:] # Select recent data rows\n\n    fig = go.Figure(data=[go.Candlestick(x=mini.index, open=mini['Open'], high=mini['High'], low=mini['Low'], close=mini['Close'])])\n    fig.update_xaxes(title_text=\"$\")\n    fig.update_yaxes(title_text=\"Index\")\n    fig.update_layout(title=i+\" Price, 200 Last Minutes\")\n    fig.show()\n","2dfadd9d":"for i in dict1: \n    plt.figure(figsize=(15,4))\n    dict1[i] = dict1[i].reindex(range(dict1[i].index[0],dict1[i].index[-1]+60,60),method='pad')\n    plt.plot(dict1[i]['Close'], color='green', label=i)\n    plt.legend()\n    plt.xlabel('Time (timestamp)')\n    plt.ylabel(i)\n    plt.show()","eb3babef":"Plotting closing prices","465b1441":"Finished","21051240":"Heatmap: Features of BTC","b91bd005":"Candlesticks Charts For Last 200 Minutes"}}