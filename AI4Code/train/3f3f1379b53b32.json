{"cell_type":{"f31345bd":"code","25b203cc":"code","c5f7d60d":"code","1e2cb5d3":"code","b33f99bf":"code","f0959844":"code","f37445aa":"code","e8e1862b":"code","eb4da991":"code","3bcc2ac3":"code","bfe4defb":"code","b31361f3":"code","0de3d143":"code","7e38bc7b":"code","2d0dd2ab":"code","bdba446f":"code","82cd4fca":"markdown","522cf713":"markdown","ec75ad97":"markdown","f7b8c0b2":"markdown","a44146b6":"markdown","d000834b":"markdown","c8d6f8c9":"markdown","2e0fbed5":"markdown","947197ee":"markdown"},"source":{"f31345bd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","25b203cc":"df=pd.read_csv(\"..\/input\/titanicdataset-traincsv\/train.csv\")","c5f7d60d":"import pandas_profiling","1e2cb5d3":"pandas_profiling.ProfileReport(df)","b33f99bf":"df.head()","f0959844":"df.isnull().sum()","f37445aa":"df[df['Embarked'].isnull()]","e8e1862b":"df['Cabin_null']=np.where(df['Cabin'].isnull(),1,0)\n\ndf['Cabin_null'].mean()","eb4da991":"df.groupby(['Survived'])['Cabin_null'].mean()","3bcc2ac3":"df=pd.read_csv(\"..\/input\/titanicdataset-traincsv\/train.csv\",usecols=['Age','Fare','Survived'])","bfe4defb":"df.isnull().mean()","b31361f3":"def impute_median(df,variable,median):\n    df[variable+'med']=df[variable].fillna(median)","0de3d143":"med=df.Age.median()\nmed","7e38bc7b":"impute_median(df,'Age',med)\ndf[df['Age'].isnull()]","2d0dd2ab":"print(df['Age'].std())\nprint(df['Agemed'].std())","bdba446f":"fig = plt.figure() \nax = fig.add_subplot(111) \ndf['Age'].plot(kind='kde', ax=ax) \ndf.Agemed.plot(kind='kde', ax=ax, color='red') \nlines, labels = ax.get_legend_handles_labels()\nax.legend(lines,labels,loc='best')","82cd4fca":"**There is relationship between data missing and existing values**","522cf713":"# Missing data not at random (MNAR) Systematic Missing values","ec75ad97":"# Missing at random(MAR)","f7b8c0b2":"# Missing Completely at random MCAR","a44146b6":"# EDA report using ProfileReport","d000834b":"### **Mean, median and mode imputation**","c8d6f8c9":"It should be used when the data is missing completely at random(MCAR)","2e0fbed5":"# Techniques of handling missing values\n\n1. Mean, median and mode\n2. Random Sample imputation\n3. Capturing NAN values with a new feature\n4. End of distribution imputation\n5. Arbitrary imputation\n6. Frequent categories imputation","947197ee":"**Adv of Mean\/median imputation**\n* Robust to outliers\n* Faster way to obtain the complete dataset\n\n**Disadv:**\n* Change or distortion in  original variance"}}