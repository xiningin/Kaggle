{"cell_type":{"ae04b9af":"code","b2c251fe":"code","92566edf":"code","31f363b0":"code","1af6a6b1":"code","185b0dd7":"code","e315563f":"code","939fb5b6":"markdown","c9202c1b":"markdown"},"source":{"ae04b9af":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","b2c251fe":"from tensorflow.python.keras.applications import ResNet50\nfrom tensorflow.python.keras.models import Sequential\nfrom tensorflow.python.keras.layers import Dense, Flatten, GlobalAveragePooling2D\n\n# num_classes is the number of categories your model chooses between for each prediction\nnum_classes = 10\n\n#pooling: Optional pooling mode for feature extraction when include_top is False.\n#         None means that the output of the model will be the 4D tensor output of the last convolutional layer.\n#        'avg' means that global average pooling will be applied to the output of the last convolutional layer, and thus the output of the model will be a 2D tensor.\n#        'max' means that global max pooling will be applied.\n\nmy_new_model = Sequential()\nmy_new_model.add(ResNet50(include_top=False, pooling='avg', weights='imagenet'))\nmy_new_model.add(Dense(num_classes, activation='softmax'))\n\n# The value below is either True or False.  If you choose the wrong answer, your modeling results\n# won't be very good.  Recall whether the first layer should be trained\/changed or not.\nmy_new_model.layers[0].trainable = False","92566edf":"train_dir = '..\/input\/training\/training\/'\nval_dir = '..\/input\/validation\/validation\/'\n\nlabels = pd.read_csv(\"..\/input\/monkey_labels.txt\")\nnum_classes = labels['Label'].size\nlabels","31f363b0":"# We are calling the compile command for some python object. \nmy_new_model.compile(optimizer='sgd', loss='categorical_crossentropy', metrics=['accuracy'])","1af6a6b1":"#Fit the model using Data Augemnetation, will improve accuracy of the model\nfrom tensorflow.python.keras.applications.resnet50 import preprocess_input\nfrom tensorflow.python.keras.preprocessing.image import ImageDataGenerator\n\ndata_generator_with_aug = ImageDataGenerator(preprocessing_function=preprocess_input,\n                                              horizontal_flip = True,\n                                              width_shift_range = 0.2,\n                                              height_shift_range = 0.2)\n            \ndata_generator_no_aug = ImageDataGenerator(preprocessing_function=preprocess_input)\n","185b0dd7":"image_size = 224\n\ntrain_generator = data_generator_with_aug.flow_from_directory(\n       directory = train_dir,\n       target_size=(image_size, image_size),\n       batch_size=24,\n       class_mode='categorical')\n\nvalidation_generator = data_generator_no_aug.flow_from_directory(\n       directory = val_dir,\n       target_size=(image_size, image_size),\n       class_mode='categorical')\n\nmy_new_model.fit_generator(\n        train_generator,\n        epochs=3,\n        validation_data=validation_generator,\n        validation_steps=1)\n","e315563f":"\n#from keras.applications.resnet50 import decode_predictions\n#from keras.preprocessing import image\n#from IPython.display import Image, display\n\n#img_path = '..\/input\/validation\/validation\/n5\/n5011.jpg'\n#img = image.load_img(img_path, target_size=(224, 224))\n#x = image.img_to_array(img)\n#x = np.expand_dims(x, axis=0)\n#x = preprocess_input(x)\n\n#preds = my_new_model.predict(x)\n# decode the results into a list of tuples (class, description, probability)\n# (one such list for each sample in the batch)\n#print('Predicted:', decode_predictions(preds, top=3)[0])\n#display(Image(img_path))","939fb5b6":"#### The Goal is  in to apply the techniques I learned in the Kaggle Deep Learning - Learn material ","c9202c1b":"#### The Code below doesn't work as the array shape is  (1, 10) as there are 10 classes and it is expecting (samples, 1000) as used on ResNet.\n#### If someoane has any sugestions please comment"}}