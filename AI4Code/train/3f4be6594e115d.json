{"cell_type":{"08c518d8":"code","d04bf53e":"code","b35ac512":"code","78c5476f":"code","8d5115e8":"code","da928b3f":"code","f16a3ef6":"code","abffc3ce":"code","c7d98c3c":"code","01fdb35f":"code","a7d2bcbc":"code","17e41d2e":"code","ec6093e3":"code","8e2f6b3c":"code","8414a437":"code","d8188962":"code","6d74d943":"markdown","b5807a5e":"markdown","d94f7852":"markdown","d5f9c168":"markdown","1f562424":"markdown","142b8df7":"markdown","59da1ef7":"markdown","15fc2a46":"markdown","6c753351":"markdown","8e6f8186":"markdown","515943e1":"markdown","940f218f":"markdown","a34434a0":"markdown","20072700":"markdown","0374fdd2":"markdown"},"source":{"08c518d8":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d04bf53e":"eeg_data_dir = \"..\/input\/eeg-brainwave-dataset-feeling-emotions\/emotions.csv\"\neeg_data = pd.read_csv(eeg_data_dir)\n#eeg_data.head()\n#eeg_data.describe()\neeg_data_columns = eeg_data.columns.values.tolist()\nprint (eeg_data_columns[1:6])","b35ac512":"#checks the names of categories\nprint(eeg_data[\"label\"].value_counts())\n\n#rules for replace\ncleanup_rules = ({'NEUTRAL': 0, 'POSITIVE': 1, 'NEGATIVE': 2} )\n#new dataset with replaced values\neeg_data_encoded = eeg_data.replace(cleanup_rules, inplace=False)\n\n##print(eeg_data_encoded.head())\nprint(eeg_data_encoded['label'].value_counts())","78c5476f":"y = eeg_data_encoded.label\n\n##eeg_data_features = ['mean_1_a', 'mean_2_a', 'mean_3_a', 'mean_4_a','mean_d_0_a', 'mean_d_1_a', 'mean_d_2_a', 'mean_d_3_a', 'mean_d_4_a']\neeg_data_features = eeg_data_columns[1:10]\nX=eeg_data_encoded[eeg_data_features]\n\nprint(\"Predictions:\")\nprint(y.head())\nprint(\"Features:\")\nprint(X.head())","8d5115e8":"from pandas.plotting import parallel_coordinates\nfrom sklearn.preprocessing import StandardScaler \n#from sklearn import preprocessing\nfrom matplotlib import pyplot as plt\nimport plotly.express as px\n","da928b3f":"eeg_data_selected_columns = eeg_data_columns[1:10]\neeg_data_selected_columns.append(\"label\")\nprint(eeg_data_selected_columns)\nfor_fig = eeg_data_encoded[eeg_data_selected_columns]\n\n#scaler\n##sc = StandardScaler()\n##for_fig_scaled = sc.fit_transform(for_fig)\n##ffc = pd.DataFrame(for_fig_scaled)\n##print(ffc.head())\n\nfig = px.parallel_coordinates(for_fig, color='label' ,color_continuous_scale=px.colors.diverging.Portland,color_continuous_midpoint=1)\nfig.show()","f16a3ef6":"eeg_data_neutral = eeg_data_encoded[eeg_data_encoded.label==0]\ncols_neutral = ['mean_1_a', 'mean_2_a', 'mean_3_a', 'mean_4_a','mean_d_0_a', 'mean_d_1_a', 'mean_d_2_a', 'mean_d_3_a', 'mean_d_4_a']\neeg_data_positive = eeg_data_encoded[eeg_data_encoded.label==1]\neeg_data_negative = eeg_data_encoded[eeg_data_encoded.label==2]\n\n","abffc3ce":"boxplot = eeg_data.boxplot(column=['mean_1_a', 'mean_2_a', 'mean_3_a', 'mean_4_a','mean_d_0_a', 'mean_d_1_a', 'mean_d_2_a', 'mean_d_3_a', 'mean_d_4_a'], by='label',rot=0, fontsize=12, figsize=(20, 15))","c7d98c3c":"from sklearn.tree import DecisionTreeRegressor \n\neeg_model = DecisionTreeRegressor(random_state=1)\n\neeg_model.fit(X,y)","01fdb35f":"eeg_model_1_result = eeg_model.predict(X.head())\nprint(\"Predictions:\")\nprint(eeg_model_1_result)\nprint(\"Actuals:\")\nprint(y.head())\nprint(cleanup_rules)","a7d2bcbc":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1)","17e41d2e":"eeg_model_2 = DecisionTreeRegressor(random_state=1)\neeg_model_2.fit(X_train,y_train)\neeg_model_2_result = eeg_model_2.predict(X_test.head())\nprint(\"Predictions:\")\nprint(eeg_model_2_result)\nprint(\"Actuals:\")\nprint(y_test.head())\nprint(cleanup_rules)","ec6093e3":"import matplotlib.pyplot as plt\n\nimport tensorflow as tf\nimport sklearn\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Activation\nfrom keras.optimizers import SGD\n\nfrom sklearn.metrics import confusion_matrix","8e2f6b3c":"eeg_model_3 = Sequential()\n#First Hidden Layer \n###>>9 is the number of features\neeg_model_3.add(Dense(12, activation='relu', kernel_initializer='random_normal', input_dim=9))\n#Second  Hidden Layer\neeg_model_3.add(Dense(8, activation='relu', kernel_initializer='random_normal'))\n#Output Layer\neeg_model_3.add(Dense(1, activation='sigmoid', kernel_initializer='random_normal'))\n#Compiling the neural network\neeg_model_3.compile(optimizer ='adam',loss='binary_crossentropy', metrics =['accuracy'])\n#Fitting the data to the training dataset\neeg_model_3.fit(X_train,y_train, batch_size=10, epochs=150)\neval_eeg_model_3=eeg_model_3.evaluate(X_train, y_train)\n\ny_pred=eeg_model_3.predict(X_test)\ny_pred =(y_pred>0.5)\n\nmodel_3_con_mat = confusion_matrix(y_test, y_pred)\nprint(\"Confusion Matrix is:\")\nprint(model_3_con_mat)\nprint(\"Evaluation is:\")\nprint(eval_eeg_model_3)\n\nplt.show()\n\nprint(\"Predictions:\")\neeg_model_3_result = eeg_model_3.predict(X_test.head())\nprint(eeg_model_3_result)\nprint(\"Actuals:\")\nprint(y_test.head())\nprint(cleanup_rules)","8414a437":"from sklearn import svm","d8188962":"eeg_model_4 = svm.LinearSVC()\neeg_model_4.fit(X_train, y_train)\nprint(\"Predictions:\")\neeg_model_4_result = eeg_model_4.predict(X_test.head())\nprint(eeg_model_4_result)\nprint(\"Actuals:\")\nprint(y_test.head())\nprint(cleanup_rules)","6d74d943":"2. Splitting Data for test and train","b5807a5e":"Loads data:","d94f7852":"4. Neural Network Classifier for test\/train datasets (poor in terms of accuracy)","d5f9c168":"Visualization:","1f562424":"Imports basic libraries","142b8df7":"\n\n\n\n**CLASSIFICATION**","59da1ef7":"BOXPLOT:","15fc2a46":"3. Decision Tree Classifier for test\/train datasets","6c753351":"**A simple raw EEG classifier based on labled emotions and means of selected electrodes**","8e6f8186":"PARALLEL COORDINATES:","515943e1":"1. Imports DecisionTree classifier:","940f218f":"Encodes categorical values:","a34434a0":"Defines predicitons and features:","20072700":"Prints the result of a simple predictions and actual values:","0374fdd2":"5. SVM Classifier for test\/train datasets"}}