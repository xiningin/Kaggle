{"cell_type":{"2aaa588f":"code","10e2cbba":"code","e7e6c41a":"code","87b6bbac":"code","5e9bf809":"code","85eb9024":"code","ec41b0ba":"code","2c4e3f21":"code","4223d374":"code","0964f9c3":"code","e29b3ad2":"code","790ee459":"code","1e2435a2":"code","f4683caa":"code","8a5bdc4d":"code","8c88ad9d":"code","8940d417":"code","5ddfa766":"code","2ef6b52f":"code","0899bd95":"code","97b895c7":"code","510a1225":"code","102bd8f8":"markdown","e09ddf18":"markdown","2a4dd5a1":"markdown","39e1b911":"markdown","a2ba3d83":"markdown","b85023e3":"markdown","1372379a":"markdown"},"source":{"2aaa588f":"!pip install openpyxl","10e2cbba":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objs as go\n\nimport plotly\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e7e6c41a":"df = pd.read_excel('\/kaggle\/input\/scientificamerican\/Physics.xlsx')\ndf.head(10)","87b6bbac":"#Second Row. Second column: title\n\ndf.iloc[1,1]","5e9bf809":"#Second Row. First column: articleText. \n\ndf.iloc[1,0]","85eb9024":"train = pd.read_excel('\/kaggle\/input\/scientificamerican\/Math.xlsx')\ntrain.head()","ec41b0ba":"#Second Row. Second column: title. \n\ntrain.iloc[2,1]","2c4e3f21":"train.isnull().sum()","4223d374":"# categorical features with missing values\ncategorical_nan = [feature for feature in train.columns if train[feature].isna().sum()>0 and train[feature].dtypes=='O']\nprint(categorical_nan)","0964f9c3":"# replacing missing values in categorical features\nfor feature in categorical_nan:\n    train[feature] = train[feature].fillna('None')","e29b3ad2":"train[categorical_nan].isna().sum()","790ee459":"!pip install -U nltk","1e2435a2":"!pip install mosestokenizer","f4683caa":"import nltk\nnltk.download('perluniprops')\n\nfrom mosestokenizer import MosesTokenizer, MosesDetokenizer","8a5bdc4d":"# here we will call .close() explicitly at the end:\ntokenize = MosesTokenizer('en')\ntokenize('Is the Standard Model of Physics Now Broken?')\n['Is', 'the', 'Standard', 'Model', 'of', 'Physics', 'Now', 'Broken', '?']\ntokenize.close()","8c88ad9d":"#MosesTokenizer callable objects take a string and return a list of tokens (strings).\n\n# here we take advantage of the context manager interface:\nwith MosesTokenizer('en') as tokenize:\n     tokenize('Is the Standard Model of Physics Now Broken?')\n\n['Is', 'the', 'Standard', 'Model', 'of', 'Physics', 'Now', 'Broken', '?']","8940d417":"#MosesDetokenizer takes a list of tokens and returns a string:\n\nwith MosesDetokenizer('en') as detokenize:\n     detokenize(['Is', 'the', 'Standard', 'Model', 'of', 'Physics', 'Now', 'Broken', '?'])\n\n'Is the Standard Model of Physics Now Broken?'","5ddfa766":" from mosestokenizer import MosesSentenceSplitter","2ef6b52f":"with MosesSentenceSplitter('en') as splitsents:\n     splitsents([\n         'physicists create muons. And keep them going',\n         'Is the Standard Model of Physics Now Broken?'\n     ])\n\n['Physicists create muons.', 'And keep them going. Is the Standard Model of Physics Now Broken?']","0899bd95":"from mosestokenizer import MosesPunctuationNormalizer","97b895c7":"with MosesPunctuationNormalizer('en') as normalize:\n     normalize('\u00abHadrons are composite particles\u00bb - made of several quarks held together by gluons.')\n\n'\"Hadrons are composite particles\" - made of several quarks held together by gluons.'","510a1225":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#eb3434','#eb3446','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('How our Free Will is free in the Presence of Algorithms?' )","102bd8f8":"<center style=\"font-family:verdana;\"><h1 style=\"font-size:200%; padding: 10px; background: #001f3f;\"><b style=\"color:orange;\">'Quantum Mechanics, Free Will and the Game of Life'<\/b><\/h1><\/center\n\n\n\nBy John Horgan on February 14, 2021\n\n\"A cellular automaton is a grid of cells whose states depend on the states of neighboring cells, as determined by preset rules. The Game of Life is a two-dimensional cellular automaton with square cells that can be in one of two states, alive or dead (often represented by black or white). A given cell\u2019s state depends on the state of its eight immediate neighbors. A dead cell comes to life if three of its neighbors are alive, and a live cell stays alive if two or three of its neighbors are alive. Otherwise, the cell dies or remains dead. So simple! And yet Life, when the rules are applied over and over, ideally by a computer, yields endlessly varied patterns, including quasianimated clusters of cells known as \u201clongboats,\u201d \u201cgliders,\u201d \u201cspaceships\u201d and the authors favorite, \u201cSpeed Demonoids\"\n\n\"The Game of Life inspired the fields of chaos and complexity, which are so similar that the author lumped them together under a single term: chaoplexity. With the help of computer simulations, chaoplexologists hoped to discover the rules, or algorithms, underpinning stuff that has long resisted conventional scientific analysis, from immune systems and brains to stock markets and whole civilizations(The \u201cbig data\u201d movement has recycled the hope, and hype, of chaoplexology.).\"\n \n\"John Conway, Life\u2019s creator, also defended free will. In a 2009 paper, \u201cThe Strong Free Will Theorem,\u201d Conway and Simon Kochen argue that quantum mechanics, plus relativity, provide grounds for belief in free will.\"\n\n\"Conway and Kochen concluded that physicists possess free will\u2014and so do the particles they are measuring. They examined free will within the narrow, reductionistic framework of physics and mathematics, and they equated free will with randomness and unpredictability. If we grant electrons consciousness, why not give them free will, too?\"\n\nhttps:\/\/www.scientificamerican.com\/article\/quantum-mechanics-free-will-and-the-game-of-life\/","e09ddf18":"### <b><mark style=\"background-color: #DC143C\"><font color=\"white\">Sorry. I can't help avoiding to include that image below. Blame it to my Free Will.<\/font><\/mark><\/b>\n\n![](https:\/\/i1.wp.com\/ctrlzmag.com\/wp-content\/uploads\/2021\/04\/YT-Meme-algorithms.png?resize=781%2C502&ssl=1)ctrlzmag.com","2a4dd5a1":"![](https:\/\/slideplayer.com\/1473517\/4\/images\/slide_1.jpg)slideplayer.com","39e1b911":"#Mosestokenizer by Luis MS Gomes\n\n#https:\/\/pypi.org\/project\/mosestokenizer\/","a2ba3d83":"### <b><mark style=\"background-color: #DC143C\"><font color=\"white\">Even in Quantum Mechanics, Free Will and the Game of Life there is a Bird.<\/font><\/mark><\/b>\n\n![](https:\/\/static.scientificamerican.com\/sciam\/cache\/file\/33C0BAC9-7F3F-42DE-9135495C7C97CD4B.jpg)https:\/\/www.scientificamerican.com\/article\/quantum-mechanics-free-will-and-the-game-of-life\/","b85023e3":"![](https:\/\/i2.wp.com\/croneconfidence.com\/wp-content\/uploads\/2018\/03\/algorithm.jpg?fit=803%2C675&ssl=1&w=640)croneconfidence.com","1372379a":"![](https:\/\/qph.fs.quoracdn.net\/main-qimg-1b6a51d107850fc519e4f94c8ea57c8c)quora.com"}}