{"cell_type":{"971e4e25":"code","e5a8db11":"code","80e43ff6":"code","7b0b97a8":"code","117f59a9":"code","c77fdb15":"code","fa541852":"code","c5c3369c":"code","0cfdeca4":"code","830884e2":"code","4e99912a":"code","3803c0da":"code","47934408":"code","2c866550":"code","1371134b":"code","95edf19b":"code","f1a30856":"code","d1a2befc":"code","57a4ab6c":"code","513816e1":"code","b1d6cf4f":"code","537a3ea8":"code","02cf113c":"code","de0119fd":"code","de99421a":"code","6e03543e":"code","7e0c35c5":"code","618dc8a0":"code","209e84f1":"code","8263fc4d":"code","e359be88":"code","35e44e2d":"code","4dab9a4d":"code","00715acf":"code","e241d382":"code","4cb89297":"code","e6d185bd":"code","61466129":"code","f371aaa5":"code","acfbc7bf":"code","4af268f3":"code","bbe27e91":"code","70de5584":"code","167155c0":"code","df899813":"code","aba35ae1":"code","5490464a":"code","4b36a3ae":"markdown","ba7463fc":"markdown","3682792a":"markdown","8241479c":"markdown","025a45a5":"markdown","93eb6cb2":"markdown","61ee9563":"markdown","f94b3ded":"markdown","922b3f60":"markdown","caa666af":"markdown","d8bdac99":"markdown","937b6e1c":"markdown","ff11ab4c":"markdown","1a3f59e8":"markdown","528b1772":"markdown","9a8a1857":"markdown","c4bb59b2":"markdown","9af14b13":"markdown","ff2648bc":"markdown","8a008997":"markdown","8860ae37":"markdown","46927bcc":"markdown","efcbc759":"markdown","f38cabed":"markdown","001e2f10":"markdown","8487c778":"markdown","1395207d":"markdown","db350564":"markdown","abf6371a":"markdown","0f61298c":"markdown","be6e653f":"markdown","cab3be5d":"markdown","7840b91d":"markdown","854a0f32":"markdown","aa4195cf":"markdown","71ed8005":"markdown"},"source":{"971e4e25":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport missingno as msno\n\nimport plotly.io as pio\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\nfrom plotly.validators.scatter.marker import SymbolValidator\n\nimport plotly.offline as pyo\npyo.init_notebook_mode()\n\ntrain = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")","e5a8db11":"msno.bar(train)","80e43ff6":"sns.displot(train[\"Age\"], kde=True)\nplt.title(\"Age distribution\")\nplt.show()","7b0b97a8":"def make_name_brief(name):\n    return name.split(' ')[1]\n\ntrain['Name'] = train['Name'].map(make_name_brief)\ntest['Name'] = test['Name'].map(make_name_brief)\n\n\ndef make_name_brief2(name):\n    if name == 'Mr.':\n        return 'Mr'\n    elif name == 'Miss.':\n        return 'Miss'\n    elif name =='Mrs.':\n        return 'Mrs'\n    elif name =='Master.':\n        return 'Master'\n    else:\n        return 'others'\n\ntrain.Name = train.Name.map(make_name_brief2)\ntest.Name = test.Name.map(make_name_brief2)\n\ntrain.groupby('Name')['Age'].median()","117f59a9":"train[\"Age\"] = train[\"Age\"].fillna(train.groupby('Name')[\"Age\"].transform(\"median\"))\ntest[\"Age\"] = test[\"Age\"].fillna(test.groupby('Name')[\"Age\"].transform(\"median\"))","c77fdb15":"train.Cabin.unique()","fa541852":"def make_Cabin_brief(cabin):\n    print(cabin[0])\n\ntrain[\"Cabin\"] = train[\"Cabin\"].str[:1]\ntest[\"Cabin\"] = test[\"Cabin\"].str[:1]\n\n\ntrain.Cabin.value_counts()","c5c3369c":"px.bar(train.sort_values(by='Pclass'), x=\"Cabin\",range_y=(0,80),color=\"Pclass\",title=\"Relation Cabin and Pclass\")","0cfdeca4":"tmp = train.sort_values(by='Pclass').dropna().groupby('Cabin')[['Fare','Pclass']].mean().reset_index()\n\nfig = px.bar(tmp,x='Cabin',y='Fare', color = 'Pclass',text='Fare',labels='Pclass',title=\"Relation Cabin and Fare with Pclass\")\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')","830884e2":"num = train[train.Cabin.isna()].index\n\nfor i in num:\n    if train.loc[i, 'Pclass'] == 1:\n        train.loc[i,'Cabin'] = 'B'\n    elif train.loc[i, 'Pclass'] == 2:\n        train.loc[i,'Cabin'] = 'F'\n    else:\n        train.loc[i,'Cabin'] = 'G'\n        \nnum = test[test.Cabin.isna()].index\n\nfor i in num:\n    if test.loc[i, 'Pclass'] == 1:\n        test.loc[i,'Cabin'] = 'B'\n    elif test.loc[i, 'Pclass'] == 2:\n        test.loc[i,'Cabin'] = 'F'\n    else:\n        test.loc[i,'Cabin'] = 'G'","4e99912a":"train = train.dropna()","3803c0da":"train.isna().sum()","47934408":"train","2c866550":"train = train.drop([\"PassengerId\",\"Ticket\"], axis=1)\ntest = test.drop([\"PassengerId\",\"Ticket\"], axis=1)","1371134b":"tmp = pd.DataFrame(train.groupby('Pclass')[\"Survived\"].mean()).reset_index()\n\nfig = px.bar(tmp, x=\"Pclass\", y=\"Survived\",color =\"Pclass\",text=\"Survived\",title=\"Relationship of Pclass and Survived\")\nfig.update_traces(texttemplate='%{text:.2f}', textposition='outside')\nfig.show()","95edf19b":"tmp = pd.DataFrame(train.groupby('Sex')[\"Survived\"].mean()).reset_index()\n\nfig = px.bar(tmp, x=\"Sex\", y=\"Survived\",color =\"Sex\",text=\"Survived\",title=\"Relationship of Sex and Survived\")\nfig.update_traces(texttemplate='%{text:.2f}', textposition='outside')\nfig.show()","f1a30856":"tmp = pd.DataFrame(train.groupby('Name')[\"Survived\"].mean()).reset_index()\n\nfig = px.bar(tmp, x=\"Name\", y=\"Survived\",color =\"Name\",text=\"Survived\",title=\"Relationship of Name and Survived\")\nfig.update_traces(texttemplate='%{text:.2f}', textposition='outside')\nfig.show()","d1a2befc":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(0)\nplt.show()","57a4ab6c":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(5, 30)\nplt.show()","513816e1":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(30, 40)\nplt.show()","b1d6cf4f":"tmp = pd.DataFrame(train.groupby('SibSp')[\"Survived\"].mean()).reset_index()\n\nfig = px.bar(tmp, x=\"SibSp\", y=\"Survived\",color =\"SibSp\",text=\"Survived\",title=\"Relationship of SibSp and Survived\")\nfig.update_traces(texttemplate='%{text:.2f}', textposition='outside')\nfig.show()","537a3ea8":"tmp = pd.DataFrame(train.groupby('Parch')[\"Survived\"].mean()).reset_index()\n\nfig = px.bar(tmp, x=\"Parch\", y=\"Survived\",color =\"Parch\",text=\"Survived\",title=\"Relationship of Parch and Survived\")\nfig.update_traces(texttemplate='%{text:.2f}', textposition='outside')\nfig.show()","02cf113c":"train[\"FamilySize\"] = train[\"SibSp\"] + train[\"Parch\"] + 1\ntest[\"FamilySize\"] = test[\"SibSp\"] + test[\"Parch\"] + 1","de0119fd":"tmp = pd.DataFrame(train.groupby('FamilySize')[\"Survived\"].mean()).reset_index()\n\nfig = px.bar(tmp, x=\"FamilySize\", y=\"Survived\",color =\"FamilySize\",text=\"Survived\",title=\"Relationship of FamilySize and Survived\")\nfig.update_traces(texttemplate='%{text:.2f}', textposition='outside')\nfig.show()","de99421a":"tmp = pd.DataFrame(train.groupby('Cabin')[\"Survived\"].mean()).reset_index()\n\nfig = px.bar(tmp, x=\"Cabin\", y=\"Survived\",color =\"Cabin\",text=\"Survived\",title=\"Relationship of Cabin and Survived\")\nfig.update_traces(texttemplate='%{text:.2f}', textposition='outside')\nfig.show()","6e03543e":"train = train.drop(['SibSp','Parch'],axis=1)\ntest = test.drop(['SibSp','Parch'],axis=1)","7e0c35c5":"train = pd.get_dummies(train, columns=['Name','Sex','Cabin','Embarked'],drop_first=True)\ntest = pd.get_dummies(test, columns=['Name','Sex','Cabin','Embarked'],drop_first=True)","618dc8a0":"train.head()","209e84f1":"test.head()","8263fc4d":"test.isna().sum()","e359be88":"test[\"Fare\"] = test[\"Fare\"].fillna(test.groupby('Pclass')[\"Fare\"].transform(\"median\"))\n\ntest[\"Cabin_T\"] = 0","35e44e2d":"from sklearn.model_selection import train_test_split","4dab9a4d":"X = train.drop(\"Survived\",axis=1)\ny = train[\"Survived\"]","00715acf":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=.2, random_state=100)","e241d382":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix","4cb89297":"score = []\nfor i in range(2, 31):\n    tree =DecisionTreeClassifier(max_depth=i)\n\n    tree.fit(X_train, y_train)\n\n    pred = tree.predict(X_test)\n    score.append(accuracy_score(y_test,pred))","e6d185bd":"score","61466129":"tree =DecisionTreeClassifier(max_depth=4)\ntree.fit(X, y)","f371aaa5":"from sklearn.tree import plot_tree","acfbc7bf":"plt.figure(figsize=(20,10))\nplot_tree(tree, feature_names= X_train.columns,fontsize=15,label=None)\nplt.show()","4af268f3":"pred = tree.predict(test)","bbe27e91":"df = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")","70de5584":"df[\"pred\"] = pred","167155c0":"df","df899813":"accuracy_score(df[\"Survived\"],df['pred'])","aba35ae1":"pd.DataFrame(confusion_matrix(df[\"Survived\"],df['pred']))","5490464a":"result = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\n\nresult[\"Survived\"] = pred\n\n\nresult.to_csv(\"result.csv\",index=False)\n\npd.read_csv(\".\/result.csv\")","4b36a3ae":"### Make New Data => FamilySize = SibSp + Parch + 1 ","ba7463fc":"### We predict 0.95. Through Confusion_matrix, We miss that FP is 14, FN is 4.","3682792a":"### Control some test's data ( missing data and no columns : T cabin ) ****","8241479c":"### Now we are ready to analysis and predict survival","025a45a5":" <div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:blue;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n<h1 style=\"text-align: center;\n           padding: 10px;\n              color:white\">\nAnalysis the Titanic data - Cabin\n<\/h1>\n<\/div>","93eb6cb2":" <div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:blue;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n<h1 style=\"text-align: center;\n           padding: 10px;\n              color:white\">\nAnalysis the Titanic data - Relationship of Pclass and Survived\n<\/h1>\n<\/div>","61ee9563":"### Similarly with sex, The Miss and Mrs, Master recored high value, But Mr recored only 16%","f94b3ded":" <div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:blue;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n<h1 style=\"text-align: center;\n           padding: 10px;\n              color:white\">\nAnalysis the Titanic data - SibSp and Parch\n<\/h1>\n<\/div>","922b3f60":"### Using get_dummies, control the dataset to more prediction","caa666af":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:blue;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n<h1 style=\"text-align: center;\n           padding: 10px;\n              color:white\">\nTitanic : Predict survival\n<\/h1>\n<\/div>","d8bdac99":" <div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:blue;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n<h1 style=\"text-align: center;\n           padding: 10px;\n              color:white\">\nFill in the missing data - Cabin -\n<\/h1>\n<\/div>","937b6e1c":"### Through the graph, We can know about 17 ~ 35 range of age that did not Survived.","ff11ab4c":"### We make FamilySize previous, So drop SibSp and Parch data","1a3f59e8":"### Features\n* survival - Survival\t0 = No, 1 = Yes\n* pclass - Ticket class\t1 = 1st, 2 = 2nd, 3 = 3rd\n* sex - Sex\t\n* Age - Age in years\t\n* sibsp\t- of siblings \/ spouses aboard the Titanic\t\n* parch\t- of parents \/ children aboard the Titanic\t\n* ticket - Ticket number\t\n* fare - Passenger fare\t\n* cabin - Cabin number\t\n* embarked - Port of Embarkation\tC = Cherbourg, Q = Queenstown, S = Southampton","528b1772":"### I think, PassengerId and Ticket is not useful to predict survival. So, I will drop these data","9a8a1857":"### 1st class survived 63%, 2nd class survived 47%, and 3th clas survived only 24%","c4bb59b2":"### Now we are ready to predict survival","9af14b13":"### From two bar chart, we can guess A,B,C,D,T is 1st class cabin, and some F is 2 ~ 3 class cabin and G is 3th class cabin\n\n### Clearly, I will input if 1st class -> B cabin, 2nd class -> F cabin, 3th class -> G cabin","ff2648bc":"![](https:\/\/media.nationalgeographic.org\/assets\/photos\/000\/273\/27302_c0-41-990-701_r1050x700.jpg?d4ccf3044d9da0d0118103be3a76bd1319370847)","8a008997":"### Using name data, We can guess their age. And Fill in it to the missing age data","8860ae37":"### The D Cabin and E Cabin recored high value of Survived, and G Cabin recored lowest survived ","46927bcc":"### Cabin data consist of Char + num, In that, I will use only Char.","efcbc759":"### Using missingno, We can know missing data that Age, Cabin and some Embarked","f38cabed":" <div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:blue;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n<h1 style=\"text-align: center;\n           padding: 10px;\n              color:white\">\nPredict survival\n<\/h1>\n<\/div>","001e2f10":"### only 2 data has no Embarked so, I will drop these data","8487c778":" <div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:blue;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n<h1 style=\"text-align: center;\n           padding: 10px;\n              color:white\">\nFill in the missing data - Age -\n<\/h1>\n<\/div>","1395207d":" <div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:blue;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n<h1 style=\"text-align: center;\n           padding: 10px;\n              color:white\">\nAnalysis the Titanic data - Age\n<\/h1>\n<\/div>","db350564":" <div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:blue;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n<h1 style=\"text-align: center;\n           padding: 10px;\n              color:white\">\nDrop the embarked missing data and delete not used data\n<\/h1>\n<\/div>","abf6371a":"### Surprisingly, Female survived 74% but, Male survived only 19%","0f61298c":" <div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:blue;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n<h1 style=\"text-align: center;\n           padding: 10px;\n              color:white\">\nAnalysis the Titanic data - Relationship of Sex and Survived and, Names\n<\/h1>\n<\/div>","be6e653f":"### Check age distribution first. I think use median age is more useful to predict survival","cab3be5d":"### Through FamilySize, We can know that 2 ~ 4 FamilySize Survived than other Size of group","7840b91d":"### Now, split the train data to fit the model and load sklearn decisiontree","854a0f32":"## Import and Load Datasets","aa4195cf":" <div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:blue;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n<h1 style=\"text-align: center;\n           padding: 10px;\n              color:white\">\n1. Check the missing data\n<\/h1>\n<\/div>","71ed8005":" <div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:blue;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n<h1 style=\"text-align: center;\n           padding: 10px;\n              color:white\">\nMachine learning modeling - DecisionTree\n<\/h1>\n<\/div>"}}