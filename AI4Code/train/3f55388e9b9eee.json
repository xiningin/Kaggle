{"cell_type":{"a6d2e2d8":"code","940504ea":"code","f6ab932a":"code","5f2f272e":"code","05d81f6f":"code","a9096919":"code","d0d1037a":"code","675c5b58":"code","2d5c4aab":"code","93adb3ce":"code","1643ddbe":"code","6f807002":"code","a066a716":"code","8de13490":"code","bac7bd82":"code","71d23f48":"code","9d64db23":"code","40da45f8":"code","dfeb2da1":"code","02467439":"code","34700d7a":"code","9361241a":"code","1dda24f4":"code","f9185146":"code","c80b5113":"code","7cbef713":"markdown","45303c6a":"markdown","f86b032c":"markdown","bc8fc772":"markdown"},"source":{"a6d2e2d8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","940504ea":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","f6ab932a":"import numpy as np \nimport pandas as pd \nimport random\n\nimport matplotlib.pyplot as plt\n\nimport os\nimport zipfile\n\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf\nfrom tensorflow.keras.optimizers import RMSprop\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img","5f2f272e":"local_zip = '\/kaggle\/input\/dogs-vs-cats\/train.zip'\nzip_ref = zipfile.ZipFile(local_zip, 'r')\nzip_ref.extractall('\/tmp')\nzip_ref.close()","05d81f6f":"base_dir = '\/tmp\/train'\nimg_names = os.listdir(os.path.join(base_dir))\nimg_names[:10]","a9096919":"sample = random.choice(img_names)\nimage = load_img(\"\/tmp\/train\/\"+sample)\nplt.imshow(image)\nplt.show()","d0d1037a":"# \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043c \u043c\u0435\u0442\u043a\u0443 \u0441\u043e\u0431\u0430\u043a\u0430 \u0438 \u043a\u043e\u0448\u043a\u0430 \u0434\u043b\u044f \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439\nlabel = []\n\nfor i in img_names:\n    if(i.split(\".\")[0] == \"dog\"):\n        label.append(\"Dog\")\n    else:\n        label.append(\"Cat\")\n\nlabel[:10]","675c5b58":"df = pd.DataFrame({\"Image\" : img_names, \"Label\" : label})\ndf.head()","2d5c4aab":"df.shape","93adb3ce":"df.Label.value_counts().plot.bar(color = ['yellow','green'])\nplt.show()","1643ddbe":"train_df, validate_df = train_test_split(df, test_size = 0.2)\ntrain_df = train_df.reset_index(drop = True)\nvalidate_df = validate_df.reset_index(drop = True)","6f807002":"model = tf.keras.models.Sequential([\n    \n    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3)),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    \n    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    \n    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    \n    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    \n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(512, activation='relu'),\n    \n    tf.keras.layers.Dense(1, activation='sigmoid')\n])","a066a716":"model.summary()","8de13490":"model.compile(loss = 'binary_crossentropy',\n              optimizer = 'SGD',\n              metrics = ['accuracy'])","bac7bd82":"#\u041e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0439 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u0441 \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u0435\u043c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\ntrain_datagen = ImageDataGenerator(\n      rescale=1.\/255,\n      rotation_range=40,\n      width_shift_range=0.2,\n      height_shift_range=0.2,\n      shear_range=0.2,\n      zoom_range=0.2,\n      horizontal_flip=True,\n      fill_mode='nearest')\n\ntrain_generator = train_datagen.flow_from_dataframe(\n    train_df, \n    \"\/tmp\/train\/\", \n    x_col='Image',\n    y_col='Label',\n    target_size = (150, 150),\n    class_mode = 'binary',\n    batch_size = 20\n)","71d23f48":"#validation generator\nvalidation_datagen = ImageDataGenerator(rescale=1.\/255)\n\nvalidation_generator = validation_datagen.flow_from_dataframe(\n    validate_df, \n    \"\/tmp\/train\/\", \n    x_col='Image',\n    y_col='Label',\n    target_size = (150, 150),\n    class_mode = 'binary',\n    batch_size = 20\n)","9d64db23":"\nlocal_zip = '\/kaggle\/input\/dogs-vs-cats\/test1.zip'\nzip_ref = zipfile.ZipFile(local_zip, 'r')\nzip_ref.extractall('\/tmp')\nzip_ref.close()\n\ntest_dir = '\/tmp\/test1\/'\ntest_img = os.listdir(os.path.join(test_dir))\ntest_img[:10]\n\ntest_df = pd.DataFrame({'Image': test_img})","40da45f8":"test_gen = ImageDataGenerator(rescale=1.\/255)\n\ntest_generator = test_gen.flow_from_dataframe(\n    test_df, \n    \"\/tmp\/test1\/\", \n    x_col = 'Image',\n    y_col = None,\n    class_mode = None,\n    target_size = (150, 150),\n    batch_size = 20,\n    shuffle = False\n)","dfeb2da1":"predict = model.predict_generator(test_generator, steps = np.ceil(12500\/20))","02467439":"predict","34700d7a":"def label(predict):\n    if(predict > 0.5):\n        return \"Dog\"\n    else:\n        return \"Cat\"","9361241a":"test_df['Label'] = predict\ntest_df['Label'] = test_df['Label'].apply(label)","1dda24f4":"test_df.head()","f9185146":"test_df.Label.value_counts().plot.bar(color = ['red','blue'])\nplt.show()","c80b5113":"v = random.randint(0, 12000)\n\nsample_test = test_df.iloc[v:(v+18)].reset_index(drop = True)\nsample_test.head()\n\nplt.figure(figsize=(12, 24))\nfor index, row in sample_test.iterrows():\n    filename = row['Image']\n    category = row['Label']\n    img = load_img(\"\/tmp\/test1\/\" + filename, target_size = (150, 150))\n    plt.subplot(6, 3, index + 1)\n    plt.imshow(img)\n    plt.xlabel(filename + ' ( ' + \"{}\".format(category) + ' )' )\nplt.tight_layout()\nplt.show()","7cbef713":"**\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445**","45303c6a":"**\u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0443\u0436\u043d\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438**","f86b032c":"* \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 zip-\u0444\u0430\u0439\u043b\u0430","bc8fc772":"**\u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c**\n\n* Conv Layer: \u044d\u0442\u043e\u0442 \u0441\u043b\u043e\u0439 \u0431\u0443\u0434\u0435\u0442 \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0442\u044c \u0432\u0430\u0436\u043d\u044b\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0438\u0437 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\n* Pooling Layer: \u044d\u0442\u043e\u0442 \u0441\u043b\u043e\u0439 \u0443\u043c\u0435\u043d\u044c\u0448\u0430\u0435\u0442 \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043c \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043f\u043e\u0441\u043b\u0435 \u0441\u0432\u0435\u0440\u0442\u043a\u0438, \u0438\u0437\u043e\u043b\u0438\u0440\u0443\u044f \u0432\u0430\u0436\u043d\u044b\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b\n* Hidden Layer: \u041e\u043d \u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u0441\u0435\u0442\u044c \u043e\u0442 \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u043b\u043e\u044f \u043a \u0434\u0440\u0443\u0433\u043e\u043c\u0443 \u0441\u043b\u043e\u044e\n* Output Layer: \u044d\u0442\u043e \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0439 \u0441\u043b\u043e\u0439 \u0441 \u043d\u0435\u0439\u0440\u043e\u043d\u0430\u043c\u0438, \u0440\u0430\u0432\u043d\u044b\u043c\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u043a\u043b\u0430\u0441\u0441\u043e\u0432"}}