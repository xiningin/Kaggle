{"cell_type":{"b04aa938":"code","ae699ed1":"code","4a178784":"code","c8dd20ae":"code","10f90b79":"code","67ec01ea":"code","009df949":"code","8af317d9":"code","63474590":"code","be116199":"code","fee92ad3":"code","b8569e02":"code","61a09985":"code","190ef187":"code","afa9d772":"code","3e396c53":"code","5088cc09":"code","e0d177f4":"code","167ca446":"code","5afbfa7b":"code","dbbbaa31":"code","3f25c516":"code","d2ba49e8":"markdown"},"source":{"b04aa938":"import numpy as np \nimport pandas as pd \nimport os\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mplimg\nfrom matplotlib.pyplot import imshow\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OneHotEncoder\n\nfrom keras import layers\nfrom keras.preprocessing import image\nfrom keras.applications.imagenet_utils import preprocess_input\nfrom keras.layers import Input, Dense, Activation, BatchNormalization, Flatten, Conv2D\nfrom keras.layers import AveragePooling2D, MaxPooling2D, Dropout, GlobalAveragePooling2D\nfrom keras.models import Model\n\nimport keras.backend as K\nfrom keras.models import Sequential\n\nimport warnings\nwarnings.simplefilter(\"ignore\", category=DeprecationWarning)","ae699ed1":"os.listdir(\"..\/input\/\")","4a178784":"train_df = pd.read_csv(\"..\/input\/train.csv\")\ntrain_df.head()","c8dd20ae":"img_size = 100","10f90b79":"def prepareImages(data, m, dataset):\n    print(\"Preparing images\")\n    X_train = np.zeros((m, img_size, img_size, 3))\n    count = 0\n    \n    for fig in data['Image']:\n        img = image.load_img(\"..\/input\/\"+dataset+\"\/\"+fig, target_size=(img_size, img_size, 3))\n        x = image.img_to_array(img)\n        x = preprocess_input(x)\n\n        X_train[count] = x\n        if (count%500 == 0):\n            print(\"Processing image: \", count+1, \", \", fig)\n        count += 1\n    \n    return X_train","67ec01ea":"def prepare_labels(y):\n    values = np.array(y)\n    label_encoder = LabelEncoder()\n    integer_encoded = label_encoder.fit_transform(values)\n    # print(integer_encoded)\n\n    onehot_encoder = OneHotEncoder(sparse=False)\n    integer_encoded = integer_encoded.reshape(len(integer_encoded), 1)\n    onehot_encoded = onehot_encoder.fit_transform(integer_encoded)\n    # print(onehot_encoded)\n\n    y = onehot_encoded\n    # print(y.shape)\n    return y, label_encoder","009df949":"X = prepareImages(train_df, train_df.shape[0], \"train\")\nX \/= 255","8af317d9":"y, label_encoder = prepare_labels(train_df['Id'])","63474590":"y.shape","be116199":"from keras.applications.resnet50 import ResNet50\nfrom keras.metrics import categorical_accuracy, top_k_categorical_accuracy, categorical_crossentropy\nfrom keras.optimizers import Adam\n\ndef top_5_accuracy(y_true, y_pred):\n    return top_k_categorical_accuracy(y_true, y_pred, k=5)","fee92ad3":"def pre_model():\n    base_model = ResNet50(input_shape=(img_size, img_size, 3), weights=None, classes=5005)\n    base_model.compile(optimizer=Adam(lr=0.002), loss='categorical_crossentropy', metrics=[categorical_crossentropy, categorical_accuracy, top_5_accuracy])\n    return base_model","b8569e02":"model = pre_model()\nmodel.summary()","61a09985":"from keras.callbacks import EarlyStopping, ReduceLROnPlateau","190ef187":"early_stopping = EarlyStopping(monitor='val_loss', mode='min', restore_best_weights=False)\nreduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.1, patience=3)\n\ncallback = [reduce_lr]","afa9d772":"history = model.fit(X, y, epochs=100, batch_size=128, verbose=1, validation_split=0.1, callbacks=callback)","3e396c53":"plt.plot(history.history['top_5_accuracy'])\nplt.plot(history.history['val_top_5_accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.show()","5088cc09":"test = os.listdir(\"..\/input\/test\/\")\nprint(len(test))","e0d177f4":"col = ['Image']\ntest_df = pd.DataFrame(test, columns=col)\ntest_df['Id'] = ''","167ca446":"X = prepareImages(test_df, test_df.shape[0], \"test\")\nX \/= 255","5afbfa7b":"predictions = model.predict(np.array(X), verbose=1)","dbbbaa31":"for i, pred in enumerate(predictions):\n    test_df.loc[i, 'Id'] = ' '.join(label_encoder.inverse_transform(pred.argsort()[-5:][::-1]))","3f25c516":"test_df.head(10)\ntest_df.to_csv('submission.csv', index=False)","d2ba49e8":"# Humpback Whale Identification - CNN with Keras\nThis kernel is based on [Anezka Kolaceke](https:\/\/www.kaggle.com\/anezka)'s awesome work: [CNN with Keras for Humpback Whale ID](https:\/\/www.kaggle.com\/anezka\/cnn-with-keras-for-humpback-whale-id)"}}