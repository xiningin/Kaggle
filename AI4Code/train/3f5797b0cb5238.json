{"cell_type":{"703c45da":"code","a4e3dfc4":"code","af5ccf24":"code","866fc6b5":"code","c557a02a":"code","b1888462":"code","b30b9c6c":"code","b473f3a9":"code","c9a4742a":"code","96e05349":"code","1a3c65ec":"code","65266d1e":"code","3edc5294":"code","64659cce":"code","2f235f98":"code","20ef07b2":"code","3d48040c":"code","916689f2":"code","c0978716":"code","813b1d21":"code","975ae31e":"code","d97f48ae":"code","3b82ee6d":"code","564dba53":"code","e1534024":"markdown","6d690133":"markdown","9b824b6a":"markdown","4cdec0ec":"markdown","3c7ebff2":"markdown"},"source":{"703c45da":"import numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\ndata_paths = []\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        data_paths.append(os.path.join(dirname, filename))","a4e3dfc4":"data = pd.read_csv(data_paths[0])\ndata = data.drop(['title','Unnamed: 0','id','uri','track_href','analysis_url','type','song_name'],axis=1)\nprint(data.columns)\ndata.head()\n","af5ccf24":"data.isna().sum()","866fc6b5":"data.shape","c557a02a":"numeric = data._get_numeric_data()\ngenre = data['genre']\nprint(numeric.head())\nprint(\"Numeric columns: \",end=\" \")\nprint(numeric.columns)\nprint(len(numeric.columns))\n\n\nnumeric.describe()\n","b1888462":"num_hist = numeric.hist(layout=(3,5),figsize=(20,10))\nplt.show()","b30b9c6c":"np.unique(genre)","b473f3a9":"grouped_genre = data.groupby('genre')\n\nfor col in numeric.columns:\n    fig,ax = plt.subplots()\n    \n    for i, d in grouped_genre:\n        d[col].hist(alpha=0.4, ax=ax, label=i,figsize=(10,4))\n        ax.set_title(col)\n\n    ax.legend()\n    plt.show()","c9a4742a":"grouped_genre.mean()","96e05349":"grouped_genre.std()","1a3c65ec":"grouped_genre.min()","65266d1e":"grouped_genre.max()","3edc5294":"genre_count = {}\nfor gen in np.unique(genre):\n    genre_count[gen] = len(data[data['genre'] == gen])\ngenre_count","64659cce":"fig = plt.figure(figsize=(20,10))\nplt.bar(height=list(genre_count.values()),x=list(genre_count.keys()))\nplt.show()","2f235f98":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder,OneHotEncoder,StandardScaler\nfrom imblearn.over_sampling import SMOTE\n\ndata['genre'] = LabelEncoder().fit_transform(data['genre'])\ncorr = data.corr()\nprint(corr)","20ef07b2":"corr['genre']","3d48040c":"features = data.drop(['key','mode','time_signature','danceability','genre'],axis=1)\nfeatures","916689f2":"\nlabels = data['genre']\nfeatures = StandardScaler().fit_transform(features)\n\n\noversample = SMOTE()\nfeatures, labels = oversample.fit_resample(features, labels)\n\nxtrain,xtest,ytrain,ytest = train_test_split(features,labels,test_size=0.2,shuffle=True)","c0978716":"labels","813b1d21":"from sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import RepeatedStratifiedKFold\nfrom sklearn.ensemble import BaggingClassifier\n\nmodel = BaggingClassifier()\n\ncv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\nn_scores = cross_val_score(model, xtrain, ytrain, scoring='accuracy', cv=cv, n_jobs=-1, error_score='raise')","975ae31e":"n_scores","d97f48ae":"n_scores.mean()","3b82ee6d":"model = BaggingClassifier()\nmodel.fit(xtrain,ytrain)\npred = model.predict(xtest)\npred","564dba53":"from sklearn.metrics import accuracy_score\naccuracy_score(ytest,pred)","e1534024":"## Data Analysis","6d690133":"### Features of each genre","9b824b6a":"#### Dataset a little imbalanced","4cdec0ec":"### Select features","3c7ebff2":"### Correlation Analysis"}}