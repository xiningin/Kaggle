{"cell_type":{"c8e7a5ba":"code","8aa0e554":"code","a7b8b760":"code","478c7d3b":"code","263c881d":"code","11c00ce3":"code","6b6cd32a":"code","ccaaea96":"code","023e214d":"code","d505eddd":"code","b9b16143":"code","b6c02643":"code","1d183ad6":"code","4d3ad64f":"code","375a8dca":"code","f8f49ce8":"code","296fc84f":"code","26980697":"code","ec7e422c":"code","f7b4c550":"code","d39a8afc":"markdown","339029a8":"markdown","9c512c90":"markdown","d912e748":"markdown"},"source":{"c8e7a5ba":"%matplotlib inline\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os, glob, time, copy, random, zipfile\nimport matplotlib.pyplot as plt\nfrom PIL import Image\nfrom sklearn.model_selection import train_test_split\nfrom tqdm.notebook import tqdm as tqdm\n\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport torch.utils.data as data\nimport torch.nn.functional as F\nimport torchvision\nfrom torchvision import models, transforms\n#from efficientnet_pytorch import EfficientNet","8aa0e554":"os.makedirs('..\/data', exist_ok=True)","a7b8b760":"# Train_dir, Test_dir\nbase_dir = '..\/input\/dogs-vs-cats-redux-kernels-edition'\ntrain_dir = '..\/data\/train'\ntest_dir = '..\/data\/test'","478c7d3b":"# Extract All Data From Zip to \"..\/data\" Directory\nwith zipfile.ZipFile(os.path.join(base_dir, 'train.zip')) as train_zip:\n    train_zip.extractall('..\/data')\n    \nwith zipfile.ZipFile(os.path.join(base_dir, 'test.zip')) as test_zip:\n    test_zip.extractall('..\/data')","263c881d":"# FilePath List\ntrain_list = glob.glob(os.path.join(train_dir, '*.jpg'))\ntest_list = glob.glob(os.path.join(test_dir, '*.jpg'))","11c00ce3":"# Divide Train, Valid Data\ntrain_list, val_list = train_test_split(train_list, test_size=0.1)","6b6cd32a":"# Data Augumentation\nclass ImageTransform():\n    \n    def __init__(self, resize, mean, std):\n        self.data_transform = {\n            'train': transforms.Compose([\n                transforms.RandomResizedCrop(resize),\n                transforms.RandomHorizontalFlip(),\n                transforms.ToTensor(),\n                transforms.Normalize(mean, std)\n            ]),\n            'val': transforms.Compose([\n                transforms.Resize(256),\n                transforms.CenterCrop(resize),\n                transforms.ToTensor(),\n                transforms.Normalize(mean, std)\n            ])\n        }\n        \n    def __call__(self, img, phase):\n        return self.data_transform[phase](img)","ccaaea96":"# Dataset\nclass DogvsCatDataset(data.Dataset):\n    \n    def __init__(self, file_list, transform=None, phase='train'):    \n        self.file_list = file_list\n        self.transform = transform\n        self.phase = phase\n        \n    def __len__(self):\n        return len(self.file_list)\n    \n    def __getitem__(self, idx):\n        \n        img_path = self.file_list[idx]\n        img = Image.open(img_path)\n        \n        img_transformed = self.transform(img, self.phase)\n        \n        # Get Label\n        label = img_path.split('\/')[-1].split('.')[0]\n        if label == 'dog':\n            label = 1\n        elif label == 'cat':\n            label = 0\n\n        return img_transformed, label","023e214d":"# Config\nsize = 224\nmean = (0.485, 0.456, 0.406)\nstd = (0.229, 0.224, 0.225)\nbatch_size = 32\nlearning_rate = 1e-4\ndevice = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")","d505eddd":"# Dataset\ntrain_dataset = DogvsCatDataset(train_list, transform=ImageTransform(size, mean, std), phase='train')\nval_dataset = DogvsCatDataset(val_list, transform=ImageTransform(size, mean, std), phase='val')","b9b16143":"# DataLoader\ntrain_dataloader = data.DataLoader(train_dataset, batch_size=batch_size, shuffle=True, num_workers=4, pin_memory=True)\nval_dataloader = data.DataLoader(val_dataset, batch_size=batch_size, shuffle=False, num_workers=4, pin_memory=True)\n\ndataloader_dict = {'train': train_dataloader, 'val': val_dataloader}","b6c02643":"net = torch.hub.load('pytorch\/vision:v0.6.0', 'resnet50', pretrained=True)\nprint(net)","1d183ad6":"# Change Last Layer\n# Output Features 1000 \u2192 2\nnet.fc = nn.Linear(in_features=2048, out_features=2)","4d3ad64f":"# Specify The Layers for updating\nparams_to_update_1 = []\nparams_to_update_2 = []\nparams_to_update_3 = []\n\nupdate_params_name_1 = ['fc.weight', 'fc.bias']\nupdate_params_name_2 = ['layer4.2.conv3.weight', 'layer4.2.bn3.weight', 'layer4.2.bn3.bias']\nupdate_params_name_3 = ['layer4.2.conv2.weight', 'layer4.2.bn2.weight', 'layer4.2.bn2.bias']\n\nfor name, param in net.named_parameters():\n    if name in update_params_name_1:\n        param.requires_grad = True\n        params_to_update_1.append(param)\n        print(\"{} 1\".format(name))\n    elif name in update_params_name_2:\n        param.requires_grad = True\n        params_to_update_2.append(param)\n        print(\"{} 2\".format(name))\n    elif name in update_params_name_3:\n        param.requires_grad = True\n        params_to_update_3.append(param)\n        print(\"{} 3\".format(name))\n    else:\n        param.requires_grad = False\n        print(name)","375a8dca":"criterion = nn.CrossEntropyLoss()\nparams_to_update = [\n    {'params': params_to_update_1, 'lr': 1e-4}\n]\noptimizer = optim.Adam(params=params_to_update, lr=learning_rate, weight_decay=1e-4)","f8f49ce8":"def adjust_learning_rate(optimizer, epoch):\n    \"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"\n    lr = learning_rate * (0.1**(epoch \/\/ 30))\n    for param_group in optimizer.state_dict()['param_groups']:\n        param_group['lr'] = lr","296fc84f":"def train_model(net, dataloader_dict, criterion, optimizer, num_epoch):\n    \n    since = time.time()\n    best_model_wts = copy.deepcopy(net.state_dict())\n    best_acc = 0.0\n    net = net.to(device)\n    \n    for epoch in range(num_epoch):\n        print('Epoch {}\/{}'.format(epoch + 1, num_epoch))\n        print('-'*20)\n        \n        for phase in ['train', 'val']:\n            \n            if phase == 'train':\n                net.train()\n            else:\n                net.eval()\n                \n            epoch_loss = 0.0\n            epoch_corrects = 0\n            \n            for inputs, labels in tqdm(dataloader_dict[phase]):\n                inputs = inputs.to(device)\n                labels = labels.to(device)\n                optimizer.zero_grad()\n                \n                with torch.set_grad_enabled(phase == 'train'):\n                    outputs = net(inputs)\n                    _, preds = torch.max(outputs, 1)\n                    loss = criterion(outputs, labels)\n                    \n                    if phase == 'train':\n                        loss.backward()\n                        optimizer.step()\n                        \n                    epoch_loss += loss.item() * inputs.size(0)\n                    epoch_corrects += torch.sum(preds == labels.data)\n                    \n            epoch_loss = epoch_loss \/ len(dataloader_dict[phase].dataset)\n            epoch_acc = epoch_corrects.double() \/ len(dataloader_dict[phase].dataset)\n            \n            print('{} Loss: {:.4f} Acc: {:.4f}'.format(phase, epoch_loss, epoch_acc))\n            \n            # deep copy the model\n            if phase == 'val' and epoch_acc > best_acc:\n                best_acc = epoch_acc\n                best_model_wts = copy.deepcopy(net.state_dict())\n                \n    time_elapsed = time.time() - since\n    print('Training complete in {:.0f}m {:.0f}s'.format(\n        time_elapsed \/\/ 60, time_elapsed % 60))\n    print('Best val acc: {:4f}'.format(best_acc))\n\n    # load best model weights\n    net.load_state_dict(best_model_wts)\n    return net","26980697":"# Train\nnum_epoch = 30\nnet = train_model(net, dataloader_dict, criterion, optimizer, num_epoch)","ec7e422c":"# Prediction\nid_list = []\npred_list = []\n\nwith torch.no_grad():\n    for test_path in tqdm(test_list):\n        img = Image.open(test_path)\n        _id = int(test_path.split('\/')[-1].split('.')[0])\n\n        transform = ImageTransform(size, mean, std)\n        img = transform(img, phase='val')\n        img = img.unsqueeze(0)\n        img = img.to(device)\n\n        net.eval()\n\n        outputs = net(img)\n        preds = F.softmax(outputs, dim=1)[:, 1].tolist()\n        \n        id_list.append(_id)\n        pred_list.append(preds[0])\n    \n    \nres = pd.DataFrame({\n    'id': id_list,\n    'label': pred_list\n})\n\nres.sort_values(by='id', inplace=True)\nres.reset_index(drop=True, inplace=True)\n\nres.to_csv('submission.csv', index=False)","f7b4c550":"# Visualize Prediction\nid_list = []\nclass_ = {0: 'cat', 1: 'dog'}\n\nfig, axes = plt.subplots(2, 5, figsize=(20, 12), facecolor='w')\n\nfor ax in axes.ravel():\n    \n    i = random.choice(res['id'].values)\n    \n    label = res.loc[res['id'] == i, 'label'].values[0]\n    if label > 0.5:\n        label = 1\n    else:\n        label = 0\n        \n    img_path = os.path.join(test_dir, '{}.jpg'.format(i))\n    img = Image.open(img_path)\n    \n    ax.set_title(class_[label])\n    ax.imshow(img)","d39a8afc":"---\n## Predict","339029a8":"---\n## Data Confirm","9c512c90":"---\n## Train","d912e748":"---\n## Model"}}