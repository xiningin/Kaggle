{"cell_type":{"c78fb7b4":"code","9d566a41":"code","3bdeb889":"code","f242d31f":"code","f54491c8":"code","28301564":"code","515e4138":"code","024bc6ec":"code","18daebe9":"code","f0904e3c":"code","5d5c963c":"code","375cba2c":"code","28f04aee":"code","e37560b9":"code","00b3b9df":"code","65602284":"code","2cd01e7b":"code","6603e86c":"code","eb15515e":"code","5f8770d4":"code","d94a54a3":"code","b35c3264":"code","1361151b":"markdown"},"source":{"c78fb7b4":"# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9d566a41":"import matplotlib.pyplot as plt\nimport numpy as np \nimport pandas as pd\nimport os\nfrom sklearn.model_selection import train_test_split\nfrom keras.models import Sequential\nfrom keras.models import load_model\nfrom keras.layers import Dense, Flatten, Dropout\nfrom keras.layers import Conv2D, MaxPooling2D, BatchNormalization\nfrom keras.utils import np_utils\nfrom sklearn.preprocessing import LabelEncoder, LabelBinarizer\nfrom keras.callbacks import ModelCheckpoint, EarlyStopping, ReduceLROnPlateau\nfrom keras.preprocessing.image import img_to_array, load_img\nfrom keras.preprocessing.image import ImageDataGenerator \nfrom zipfile import ZipFile","3bdeb889":"ZipFile(\"\/kaggle\/input\/dogs-vs-cats\/train.zip\",\"r\").extractall()\nZipFile(\"\/kaggle\/input\/dogs-vs-cats\/test1.zip\", \"r\").extractall()","f242d31f":"train_path = \".\/train\"\ntest_path = \".\/test1\"","f54491c8":"# Get images of dogs and cats\nfile_names = os.listdir(train_path)\ncategories = []\nfor path in file_names:\n    animal_type = path.split('.')[0]\n    categories.append(animal_type)","28301564":"df = pd.DataFrame({'Image': file_names, 'Animal': categories})\ndf.sample(5)","515e4138":"df_train, df_valid = train_test_split(df, test_size=0.2, random_state=42)\n\ndf_train.reset_index(drop=True, inplace=True)\ndf_valid.reset_index(drop=True, inplace=True)\n\nprint(df_train.shape)\nprint(df_valid.shape)","024bc6ec":"# Augment training data\ndatagen_train = ImageDataGenerator(rescale=1.\/255, rotation_range=30,\n                              width_shift_range=0.1, height_shift_range=0.1,\n                              shear_range=0.2, zoom_range=0.2,\n                              horizontal_flip=True, fill_mode='nearest')\n\n# Augment validating data\ndatagen_valid = ImageDataGenerator(rescale=1.\/255)","18daebe9":"aug_train = datagen_train.flow_from_dataframe(df_train, directory=train_path, \n                                             x_col='Image', y_col='Animal',\n                                             target_size=(224, 224), class_mode='binary',\n                                             batch_size=64)\n\naug_valid = datagen_valid.flow_from_dataframe(df_valid, directory=train_path,\n                                             x_col='Image', y_col='Animal',\n                                             target_size=(224, 224), class_mode='binary',\n                                             batch_size=64)","f0904e3c":"checkpoint = ModelCheckpoint('best_model.h5', monitor='val_accuracy', verbose=1,\n                           save_best_only=True, mode='max')\nes = EarlyStopping(monitor='val_accuracy', mode='max', patience=9, verbose=1)\nrdlr = ReduceLROnPlateau(monitor='val_accuracy', factor=0.1, patience=4, min_lr=0.00001, verbose=1)\n\ncallbacks = [checkpoint, rdlr, es]","5d5c963c":"model = Sequential()\nmodel.add(Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform',\n                padding='same', input_shape=(224, 224, 3)))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Dropout(0.2))  \n\nmodel.add(Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Dropout(0.3))\n\nmodel.add(Flatten())\nmodel.add(Dense(1024, activation='relu', kernel_initializer='he_uniform'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.35))\nmodel.add(Dense(128, activation='relu', kernel_initializer='he_uniform'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.4))\nmodel.add(Dense(2, activation='relu', kernel_initializer='he_uniform'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.5))\nmodel.add(Dense(1, activation='sigmoid'))\n\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics='accuracy')","375cba2c":"model.summary()","28f04aee":"hist = model.fit(aug_train, validation_data=aug_valid, epochs=50, verbose=1, callbacks=callbacks)","e37560b9":"plt.figure(figsize=(18, 4))\n\nplt.subplot(121)\nplt.title('Loss')\nplt.plot(hist.history['loss'], label='training loss')\nplt.plot(hist.history['val_loss'], label='validation loss')\nplt.xlabel('Epoch')\nplt.legend()\n\nplt.subplot(122)\nplt.title('Accuracy')\nplt.plot(hist.history['accuracy'], label='training accuracy')\nplt.plot(hist.history['val_accuracy'], label='validation accuracy')\nplt.xlabel('Epoch')\nplt.legend()\n\nplt.tight_layout()\nplt.savefig('Learning rate.png')\nplt.show()","00b3b9df":"best_model = load_model('best_model.h5')","65602284":"file_names = os.listdir(test_path)\ndf_test = pd.DataFrame({'Image':file_names})\n\ndf_test.sample(5)","2cd01e7b":"aug_test = datagen_valid.flow_from_dataframe(df_test, directory=test_path, x_col='Image',\n                                             y_col=None, class_mode=None, target_size= (224, 224),\n                                             batch_size=64, shuffle=False)","6603e86c":"pred = best_model.predict(aug_test)","eb15515e":"pred = np.where(pred > 0.5, 'Dog', 'Cat')","5f8770d4":"plt.figure(figsize=(15,15))\nfor i in range(9):\n    plt.subplot(3,3,i+1)\n    plt.imshow(aug_test[0][i])\n    plt.xlabel(pred[i])\n    \nplt.show()","d94a54a3":"label = np.where(pred == 'Cat', 0, 1)","b35c3264":"df_submission = pd.read_csv('..\/input\/dogs-vs-cats\/sampleSubmission.csv')\ndf_submission['label'] = label\ndf_submission.to_csv('submission.csv', index=False)","1361151b":"Import library"}}