{"cell_type":{"ef669dd6":"code","5483724c":"code","05bb58e7":"code","f8000954":"code","f5bae28a":"code","4417e68c":"code","4bd079fe":"code","5e7c2949":"code","8c4af4bf":"code","4121263d":"code","ece5fa2f":"code","78e8a6de":"code","a7e80abf":"code","0cb3e730":"code","1ce7cac1":"code","7bece1a4":"code","b88f694d":"code","4fa29b70":"code","d994a67c":"code","87c50626":"code","7097e360":"code","2f93ca38":"markdown","47d55052":"markdown","a6b9254f":"markdown","1d692a7f":"markdown","39f1889d":"markdown","72607b53":"markdown","e71b44d6":"markdown"},"source":{"ef669dd6":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","5483724c":"from scipy import stats\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Conv2D, MaxPool2D, Flatten, UpSampling2D,Dropout, GlobalMaxPooling2D\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.utils.vis_utils import plot_model\nfrom keras.applications import VGG16, VGG19, InceptionV3\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau,EarlyStopping","05bb58e7":"path, dirs, files = next(os.walk(\"..\/input\/intel-image-classification\/seg_train\/seg_train\/\"))\nfile_count = len(dirs)","f8000954":"list_classes = ['mountain', 'street', 'buildings', 'sea', 'forest', 'glacier']\nlist_counts = []\nfor i in list_classes:\n    path, dirs, files = next(os.walk(\"..\/input\/intel-image-classification\/seg_train\/seg_train\/{name}\".format(name=i)))\n    file_count = len(files)\n    list_counts.append(file_count)","f5bae28a":"list_counts","4417e68c":"df_value = pd.DataFrame({'classes': list_classes,\n                   'count': list_counts})\nax = df_value.plot.bar(rot=0)","4bd079fe":"##Data Preprocessing Training Set\ntrain_datagen = ImageDataGenerator(\n        rescale=1.\/255,\n        shear_range=0.2,\n        zoom_range=0.2\n        #vertical_flip=True\n    )\n\n\ntraining_set = train_datagen.flow_from_directory(\n        '\/kaggle\/input\/intel-image-classification\/seg_train\/seg_train\/',\n        target_size=(150,150),\n        batch_size=32, \n        class_mode='categorical')\n\n\n##Data Preprocessing Test Set\ntest_datagen = ImageDataGenerator(rescale=1.\/255) \ntest_set = test_datagen.flow_from_directory(\n        '\/kaggle\/input\/intel-image-classification\/seg_test\/seg_test',\n        target_size=(150,150),\n        batch_size=32,\n        class_mode='categorical')","5e7c2949":"class_names_dict=training_set.class_indices\nclass_names_dict","8c4af4bf":"class_indeces = pd.Series({v: k for k, v in class_names_dict.items()})\nprint(class_indeces)","4121263d":"input_shape=(150,150,3)\nnum_classes = 6\nepochs = 25","ece5fa2f":"def VGG_16(input_shape=input_shape, num_classes=num_classes):\n    \n    vgg16 = VGG16(weights = \"imagenet\", include_top = False, input_shape=input_shape)\n    \n    model = Sequential()\n    #model.add(UpSampling2D((224, 224), input_shape=input_shape, interpolation='bilinear'))\n    model.add(vgg16)\n    model.add(Flatten())\n    model.add(Dense(num_classes, activation='softmax'))\n    model.compile(loss='categorical_crossentropy', \n                  optimizer='sgd', \n                  metrics=['accuracy'])    \n    #print(model.summary())\n    return model ","78e8a6de":"def VGG_19(input_shape=input_shape, num_classes=num_classes):\n    \n    vgg19 = VGG19(weights = \"imagenet\", include_top = False, input_shape=input_shape)\n    \n    model = Sequential()\n    #model.add(UpSampling2D((224, 224), input_shape=input_shape, interpolation='bilinear'))\n    model.add(vgg19)\n    model.add(Flatten())\n    model.add(Dense(num_classes, activation='softmax'))\n    model.compile(loss='categorical_crossentropy', \n                  optimizer='sgd', \n                  metrics=['accuracy'])    \n    #print(model.summary())\n    return model ","a7e80abf":"def Inception_v3(input_shape=input_shape, num_classes=num_classes):\n    \n    inc_v3 = InceptionV3(weights = \"imagenet\", include_top = False, input_shape=input_shape)\n    \n    model = Sequential()\n    #model.add(UpSampling2D((224, 224), input_shape=input_shape, interpolation='bilinear'))\n    model.add(inc_v3)\n    model.add(Flatten())\n    model.add(Dense(num_classes, activation='softmax'))\n    model.compile(loss='categorical_crossentropy', \n                  optimizer='adam', \n                  metrics=['accuracy'])    \n    #print(model.summary())\n    return model ","0cb3e730":"model = []\nmodel.append(VGG_16())\nmodel.append(VGG_19())\nmodel.append(Inception_v3())","1ce7cac1":"reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.05, patience=5, min_lr=0.000002) #Optimizing Learning Rate\nearly_stop = EarlyStopping(monitor='val_accuracy', patience=5)","7bece1a4":"#history=model[0].fit(x=training_set,validation_data=test_set,epochs=2,callbacks=[reduce_lr, early_stop],use_multiprocessing=True,workers=8)\n\nmodels = []\nfor i in range(len(model)):\n    model[i].fit(x=training_set,validation_data=test_set,epochs=epochs,callbacks=[reduce_lr, early_stop],use_multiprocessing=True,workers=8)\n    models.append(model[i])\n    model[i].save_weights(\"model{name}.h5\".format(name=str(i)))","b88f694d":"# Predict labels with models\nlabels = []\nfor m in models:\n    predicts = np.argmax(m.predict(test_set), axis=1)\n    labels.append(predicts)\n    \n# Ensemble with voting\nlabels = np.array(labels)\nlabels = np.transpose(labels,(1,0))","4fa29b70":"labels","d994a67c":"labels = stats.mode(labels, axis=1)[0]","87c50626":"labels =  np.squeeze(labels)","7097e360":"df_last = pd.DataFrame(labels,columns =['Ensemble_Preds'])\ndf_last","2f93ca38":"# Intel Image Classification\n","47d55052":"![image.png](attachment:image.png)","a6b9254f":"## Analyze dataset","1d692a7f":"## Results of Ensemble Learning","39f1889d":"## Training","72607b53":"- ### Analyze dataset\n- ### Adding models(VGG16,VGG19, Inceptionv3)\n- ### Training\n- ### Results of Ensemble Learning","e71b44d6":"## Adding Models(VGG16,VGG19,Inceptionv3)"}}