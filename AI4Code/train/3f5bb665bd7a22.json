{"cell_type":{"1a05a9a8":"code","469e54d8":"code","5ea0e051":"code","f3a827bc":"code","e252c550":"code","4fb967fd":"code","d1d58a31":"code","9f974e85":"code","bb21ed92":"code","c85041a5":"code","692deeb9":"code","fd9421de":"code","53c93ae9":"code","6e577e51":"code","4a465520":"markdown","e3b8af83":"markdown","2d7e22d0":"markdown","7dd01401":"markdown","01e52433":"markdown","38ecf803":"markdown","073779a4":"markdown","38599656":"markdown","971c86f4":"markdown","33580f9d":"markdown"},"source":{"1a05a9a8":"import numpy as np\nimport pandas as pd\n\nimport warnings\nwarnings.simplefilter('ignore')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","469e54d8":"train = pd.read_csv('..\/input\/cat-in-the-dat\/train.csv', index_col='id')\ntest = pd.read_csv('..\/input\/cat-in-the-dat\/test.csv', index_col='id')","5ea0e051":"train['ord_5_1'] = train['ord_5'].str[0]\ntrain['ord_5_2'] = train['ord_5'].str[1]\ntrain = train.drop('ord_5', axis=1)\n\ntest['ord_5_1'] = test['ord_5'].str[0]\ntest['ord_5_2'] = test['ord_5'].str[1]\ntest = test.drop('ord_5', axis=1)","f3a827bc":"# columns_to_test = list(test.columns)\ncolumns_to_test = ['nom_7', 'nom_8', 'nom_9']\n\nreplace_xor = lambda x: 'xor' if x in xor_values else x\n\nfor column in columns_to_test:\n    xor_values = set(train[column].unique()) ^ set(test[column].unique())\n    if xor_values:\n        print('Column', column, 'has', len(xor_values), 'XOR values')\n        train[column] = train[column].apply(replace_xor)\n        test[column] = test[column].apply(replace_xor)\n    else:\n        print('Column', column, 'has no XOR values')","e252c550":"y_train = train['target'].copy()\nx_train = train.drop('target', axis=1)\ndel train\n\nx_test = test.copy()\ndel test","4fb967fd":"train_part = len(x_train)\ntraintest = pd.concat([x_train, x_test])\ndf = pd.get_dummies(traintest, columns=traintest.columns, drop_first=True, sparse=True)\nx_train = df[:train_part]\nx_test = df[train_part:]\ndel df\ndel traintest","d1d58a31":"x_train = x_train.sparse.to_coo().tocsr()\nx_test = x_test.sparse.to_coo().tocsr()","9f974e85":"from sklearn.model_selection import KFold, StratifiedKFold\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import roc_auc_score\nfrom cross_validation_framework import *","bb21ed92":"logit_param_grid = {\n    'C': [0.100, 0.150, 0.120, 0.125, 0.130, 0.135, 0.140, 0.145, 0.150]\n}\n\nlogit_grid = GridSearchCV(LogisticRegression(solver='lbfgs'), logit_param_grid,\n                          scoring='roc_auc', cv=5, n_jobs=-1, verbose=0)\nlogit_grid.fit(x_train, y_train)\n\nbest_C = logit_grid.best_params_['C']\n# best_C = 0.12345\n\nprint('Best C:', best_C)","c85041a5":"logit = LogisticRegression(C=best_C, solver='lbfgs', class_weight='balanced', max_iter=10000)\ncv = KFold(n_splits=10, random_state=42)\noof, trained_estimators = fit(ScikitLearnPredictProbaEstimator(logit), roc_auc_score, x_train, y_train, cv)\ny = predict(trained_estimators, x_test)","692deeb9":"# From https:\/\/scikit-learn.org\/stable\/auto_examples\/model_selection\/plot_confusion_matrix.html\n\nimport matplotlib.pyplot as plt\n\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.utils.multiclass import unique_labels\n\n\ndef plot_confusion_matrix(y_true, y_pred, classes,\n                          normalize=False,\n                          title=None,\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    if not title:\n        if normalize:\n            title = 'Normalized confusion matrix'\n        else:\n            title = 'Confusion matrix, without normalization'\n\n    # Compute confusion matrix\n    cm = confusion_matrix(y_true, y_pred)\n    # Only use the labels that appear in the data\n    classes = classes[unique_labels(y_true, y_pred)]\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        print(\"Normalized confusion matrix\")\n    else:\n        print('Confusion matrix, without normalization')\n\n    print(cm)\n\n    fig, ax = plt.subplots()\n    im = ax.imshow(cm, interpolation='nearest', cmap=cmap)\n    ax.figure.colorbar(im, ax=ax)\n    # We want to show all ticks...\n    ax.set(xticks=np.arange(cm.shape[1]),\n           yticks=np.arange(cm.shape[0]),\n           # ... and label them with the respective list entries\n           xticklabels=classes, yticklabels=classes,\n           title=title,\n           ylabel='True label',\n           xlabel='Predicted label')\n\n    # Rotate the tick labels and set their alignment.\n    plt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n             rotation_mode=\"anchor\")\n\n    # Loop over data dimensions and create text annotations.\n    fmt = '.2f' if normalize else 'd'\n    thresh = cm.max() \/ 2.\n    for i in range(cm.shape[0]):\n        for j in range(cm.shape[1]):\n            ax.text(j, i, format(cm[i, j], fmt),\n                    ha=\"center\", va=\"center\",\n                    color=\"white\" if cm[i, j] > thresh else \"black\")\n    fig.tight_layout()\n    return ax","fd9421de":"classes = pd.Series([0,1])\nplot_confusion_matrix(y_train, oof.round(), classes=classes, normalize=True, title='Confusion matrix')\nplt.show()","53c93ae9":"submission = pd.read_csv('..\/input\/cat-in-the-dat\/sample_submission.csv', index_col='id')\nsubmission['target'] = y\nsubmission.to_csv('logit.csv')","6e577e51":"submission.head()","4a465520":"## Load data","e3b8af83":"## Extract target variable","2d7e22d0":"### Split 'ord_5'","7dd01401":"## Ligistic regression","01e52433":"### Replace values that not presented in both train and test sets with single value","38ecf803":"# OHE and Logistic regression\n\n* split 'ord_5'\n* handle XOR values\n* one-hot encoding for all features\n* logistic regression with grid search parameters tuning","073779a4":"## OHE","38599656":"## Submit predictions","971c86f4":"## Confusion matrix","33580f9d":"## Feature engineering"}}