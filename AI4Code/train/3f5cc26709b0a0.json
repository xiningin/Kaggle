{"cell_type":{"c197d497":"code","935fd385":"code","b2529c6d":"code","25dcc85c":"code","c790f599":"code","215ed39e":"code","2ca1991a":"code","381a19be":"code","e31400f7":"code","ee6d6272":"code","99e78595":"code","3d1b6983":"code","d3c0400f":"code","25f10364":"code","2bad7ee5":"code","e9635895":"code","6ac50f23":"code","f8dd8cfb":"code","8d638751":"code","b59200bf":"code","91e45a7c":"code","bc9424dd":"code","31effc12":"code","b27fe164":"code","29dd2700":"code","8f7e8b5d":"code","b6033fd1":"code","392e53d1":"code","1e1e13e2":"code","a1fc5ad3":"code","33282344":"code","2c33b988":"code","04624f55":"code","a67285ef":"code","1d0b1e9f":"code","fc581edc":"code","480ad1ea":"code","023a30d3":"code","3e3f843e":"code","156c194a":"code","3cce1c11":"code","041b367f":"markdown","7c465fc6":"markdown","03b58ded":"markdown","9446f114":"markdown","1c647615":"markdown","435d4c94":"markdown","cc52e43a":"markdown","32d40b26":"markdown","e3b9605b":"markdown","4060b340":"markdown","bc7f6155":"markdown","86b351c7":"markdown","bebc55f9":"markdown","da4c7124":"markdown","3d1ee82e":"markdown","862f2af0":"markdown","a6ddba3b":"markdown","6b2aeb93":"markdown","8a800ab7":"markdown","0f544a5c":"markdown","bc51ad57":"markdown","be03694f":"markdown","2c43c16f":"markdown","15e27788":"markdown","39f608a8":"markdown","f406496d":"markdown","8c8de30a":"markdown","b5fb5c6b":"markdown","0e2b2da0":"markdown","b4718654":"markdown","6914b08e":"markdown","74cf13e3":"markdown","088a4acc":"markdown"},"source":{"c197d497":"from shutil import copyfile\ncopyfile(src = \"..\/input\/attention\/attention.py\", dst = \"..\/working\/attention.py\")","935fd385":"import numpy as np\nimport pandas as pd \nimport re\nfrom bs4 import BeautifulSoup\nfrom keras.preprocessing.text import Tokenizer \nfrom keras.preprocessing.sequence import pad_sequences\nfrom nltk.corpus import stopwords\nfrom tensorflow.keras.layers import Input, LSTM, Embedding, Dense, Concatenate, TimeDistributed\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\nimport warnings\nfrom attention import AttentionLayer\npd.set_option(\"display.max_colwidth\", 200)\nwarnings.filterwarnings(\"ignore\")","b2529c6d":"data=pd.read_csv(\"..\/input\/amazon-fine-food-reviews\/Reviews.csv\")","25dcc85c":"data.drop_duplicates(subset=['Text'],inplace=True)#dropping duplicates\ndata.dropna(axis=0,inplace=True)#dropping na","c790f599":"data.info()","215ed39e":"contraction_mapping = {\"ain't\": \"is not\", \"aren't\": \"are not\",\"can't\": \"cannot\", \"'cause\": \"because\", \"could've\": \"could have\", \"couldn't\": \"could not\",\n                           \"didn't\": \"did not\",  \"doesn't\": \"does not\", \"don't\": \"do not\", \"hadn't\": \"had not\", \"hasn't\": \"has not\", \"haven't\": \"have not\",\n                           \"he'd\": \"he would\",\"he'll\": \"he will\", \"he's\": \"he is\", \"how'd\": \"how did\", \"how'd'y\": \"how do you\", \"how'll\": \"how will\", \"how's\": \"how is\",\n                           \"I'd\": \"I would\", \"I'd've\": \"I would have\", \"I'll\": \"I will\", \"I'll've\": \"I will have\",\"I'm\": \"I am\", \"I've\": \"I have\", \"i'd\": \"i would\",\n                           \"i'd've\": \"i would have\", \"i'll\": \"i will\",  \"i'll've\": \"i will have\",\"i'm\": \"i am\", \"i've\": \"i have\", \"isn't\": \"is not\", \"it'd\": \"it would\",\n                           \"it'd've\": \"it would have\", \"it'll\": \"it will\", \"it'll've\": \"it will have\",\"it's\": \"it is\", \"let's\": \"let us\", \"ma'am\": \"madam\",\n                           \"mayn't\": \"may not\", \"might've\": \"might have\",\"mightn't\": \"might not\",\"mightn't've\": \"might not have\", \"must've\": \"must have\",\n                           \"mustn't\": \"must not\", \"mustn't've\": \"must not have\", \"needn't\": \"need not\", \"needn't've\": \"need not have\",\"o'clock\": \"of the clock\",\n                           \"oughtn't\": \"ought not\", \"oughtn't've\": \"ought not have\", \"shan't\": \"shall not\", \"sha'n't\": \"shall not\", \"shan't've\": \"shall not have\",\n                           \"she'd\": \"she would\", \"she'd've\": \"she would have\", \"she'll\": \"she will\", \"she'll've\": \"she will have\", \"she's\": \"she is\",\n                           \"should've\": \"should have\", \"shouldn't\": \"should not\", \"shouldn't've\": \"should not have\", \"so've\": \"so have\",\"so's\": \"so as\",\n                           \"this's\": \"this is\",\"that'd\": \"that would\", \"that'd've\": \"that would have\", \"that's\": \"that is\", \"there'd\": \"there would\",\n                           \"there'd've\": \"there would have\", \"there's\": \"there is\", \"here's\": \"here is\",\"they'd\": \"they would\", \"they'd've\": \"they would have\",\n                           \"they'll\": \"they will\", \"they'll've\": \"they will have\", \"they're\": \"they are\", \"they've\": \"they have\", \"to've\": \"to have\",\n                           \"wasn't\": \"was not\", \"we'd\": \"we would\", \"we'd've\": \"we would have\", \"we'll\": \"we will\", \"we'll've\": \"we will have\", \"we're\": \"we are\",\n                           \"we've\": \"we have\", \"weren't\": \"were not\", \"what'll\": \"what will\", \"what'll've\": \"what will have\", \"what're\": \"what are\",\n                           \"what's\": \"what is\", \"what've\": \"what have\", \"when's\": \"when is\", \"when've\": \"when have\", \"where'd\": \"where did\", \"where's\": \"where is\",\n                           \"where've\": \"where have\", \"who'll\": \"who will\", \"who'll've\": \"who will have\", \"who's\": \"who is\", \"who've\": \"who have\",\n                           \"why's\": \"why is\", \"why've\": \"why have\", \"will've\": \"will have\", \"won't\": \"will not\", \"won't've\": \"will not have\",\n                           \"would've\": \"would have\", \"wouldn't\": \"would not\", \"wouldn't've\": \"would not have\", \"y'all\": \"you all\",\n                           \"y'all'd\": \"you all would\",\"y'all'd've\": \"you all would have\",\"y'all're\": \"you all are\",\"y'all've\": \"you all have\",\n                           \"you'd\": \"you would\", \"you'd've\": \"you would have\", \"you'll\": \"you will\", \"you'll've\": \"you will have\",\n                           \"you're\": \"you are\", \"you've\": \"you have\"}","2ca1991a":"stop_words = set(stopwords.words('english')) ","381a19be":"def text_cleaner(text,num):\n    newString = text.lower()\n    newString = BeautifulSoup(newString, \"lxml\").text\n    newString = re.sub(r'\\([^)]*\\)', '', newString)\n    newString = re.sub('\"','', newString)\n    newString = ' '.join([contraction_mapping[t] if t in contraction_mapping else t for t in newString.split(\" \")])    \n    newString = re.sub(r\"'s\\b\",\"\",newString)\n    newString = re.sub(\"[^a-zA-Z]\", \" \", newString) \n    newString = re.sub('[m]{2,}', 'mm', newString)\n    if(num==0):\n        tokens = [w for w in newString.split() if not w in stop_words]\n    else:\n        tokens=newString.split()\n    long_words=[]\n    for i in tokens:\n        if len(i)>1:                                                 #removing short word\n            long_words.append(i)   \n    return (\" \".join(long_words)).strip()","e31400f7":"#call the function\ncleaned_text = []\nfor t in data['Text']:\n    cleaned_text.append(text_cleaner(t,0))\ncleaned_text[:5]  ","ee6d6272":"#call the function\ncleaned_summary = []\nfor t in data['Summary']:\n    cleaned_summary.append(text_cleaner(t,1))\ncleaned_summary[:10]","99e78595":"data['cleaned_text']=cleaned_text\ndata['cleaned_summary']=cleaned_summary","3d1b6983":"data.replace('', np.nan, inplace=True)\ndata.dropna(axis=0,inplace=True)","d3c0400f":"import matplotlib.pyplot as plt\n\ntext_word_count = []\nsummary_word_count = []\n\n# populate the lists with sentence lengths\nfor i in data['cleaned_text']:\n      text_word_count.append(len(i.split()))\n\nfor i in data['cleaned_summary']:\n      summary_word_count.append(len(i.split()))\n\nlength_df = pd.DataFrame({'text':text_word_count, 'summary':summary_word_count})\n\nlength_df.hist(bins = 30)\nplt.show()","25f10364":"cnt=0\nfor i in data['cleaned_summary']:\n    if(len(i.split())<=10):\n        cnt=cnt+1\nprint(cnt\/len(data['cleaned_summary']))","2bad7ee5":"cnt=0\nfor i in data['cleaned_text']:\n    if(len(i.split())<=80):\n        cnt=cnt+1\nprint(cnt\/len(data['cleaned_text']))","e9635895":"max_text_len=80\nmax_summary_len=10","6ac50f23":"cleaned_text =np.array(data['cleaned_text'])\ncleaned_summary=np.array(data['cleaned_summary'])\n\nshort_text=[]\nshort_summary=[]\n\nfor i in range(len(cleaned_text)):\n    if(len(cleaned_summary[i].split())<=max_summary_len and len(cleaned_text[i].split())<=max_text_len):\n        short_text.append(cleaned_text[i])\n        short_summary.append(cleaned_summary[i])\n        \ndf=pd.DataFrame({'text':short_text,'summary':short_summary})","f8dd8cfb":"df['summary'] = df['summary'].apply(lambda x : 'sostok '+ x + ' eostok')","8d638751":"for i in range(5):\n    print(\"Review:\",df['text'][i])\n    print(\"Summary:\",df['summary'][i])\n    print(\"\\n\")","b59200bf":"from sklearn.model_selection import train_test_split\nx_tr,x_val,y_tr,y_val=train_test_split(np.array(df['text']),np.array(df['summary']),test_size=0.05,random_state=0,shuffle=True) ","91e45a7c":"x_tokenizer = Tokenizer() \nx_tokenizer.fit_on_texts(list(x_tr))","bc9424dd":"thresh=4\n\ncnt=0\ntot_cnt=0\nfreq=0\ntot_freq=0\n\nfor key,value in x_tokenizer.word_counts.items():\n    tot_cnt=tot_cnt+1\n    tot_freq=tot_freq+value\n    if(value<thresh):\n        cnt=cnt+1\n        freq=freq+value\n    \nprint(\"% of rare words in vocabulary:\",(cnt\/tot_cnt)*100)\nprint(\"Total Coverage of rare words:\",(freq\/tot_freq)*100)","31effc12":"#prepare a tokenizer for reviews on training data\nx_tokenizer = Tokenizer(num_words=tot_cnt-cnt) \nx_tokenizer.fit_on_texts(list(x_tr))\n\n#convert text sequences into integer sequences\nx_tr_seq    =   x_tokenizer.texts_to_sequences(x_tr) \nx_val_seq   =   x_tokenizer.texts_to_sequences(x_val)\n\n#padding zero upto maximum length\nx_tr    =   pad_sequences(x_tr_seq,  maxlen=max_text_len, padding='post')\nx_val   =   pad_sequences(x_val_seq, maxlen=max_text_len, padding='post')\n\n#size of vocabulary ( +1 for padding token)\nx_voc   =  x_tokenizer.num_words + 1","b27fe164":"x_voc","29dd2700":"y_tokenizer = Tokenizer()\ny_tokenizer.fit_on_texts(list(y_tr))","8f7e8b5d":"thresh=6\n\ncnt=0\ntot_cnt=0\nfreq=0\ntot_freq=0\n\nfor key,value in y_tokenizer.word_counts.items():\n    tot_cnt=tot_cnt+1\n    tot_freq=tot_freq+value\n    if(value<thresh):\n        cnt=cnt+1\n        freq=freq+value\n    \nprint(\"% of rare words in vocabulary:\",(cnt\/tot_cnt)*100)\nprint(\"Total Coverage of rare words:\",(freq\/tot_freq)*100)","b6033fd1":"#prepare a tokenizer for summaries on training data\ny_tokenizer = Tokenizer(num_words=tot_cnt-cnt) \ny_tokenizer.fit_on_texts(list(y_tr))\n\n#convert text sequences into integer sequences\ny_tr_seq    =   y_tokenizer.texts_to_sequences(y_tr) \ny_val_seq   =   y_tokenizer.texts_to_sequences(y_val) \n\n#padding zero upto maximum length\ny_tr    =   pad_sequences(y_tr_seq, maxlen=max_summary_len, padding='post')\ny_val   =   pad_sequences(y_val_seq, maxlen=max_summary_len, padding='post')\n\n#size of vocabulary\ny_voc  =   y_tokenizer.num_words +1","392e53d1":"y_tokenizer.word_counts['sostok'],len(y_tr)","1e1e13e2":"ind=[]\nfor i in range(len(y_tr)):\n    cnt=0\n    for j in y_tr[i]:\n        if j!=0:\n            cnt=cnt+1\n    if(cnt==2):\n        ind.append(i)\n\ny_tr=np.delete(y_tr,ind, axis=0)\nx_tr=np.delete(x_tr,ind, axis=0)","a1fc5ad3":"ind=[]\nfor i in range(len(y_val)):\n    cnt=0\n    for j in y_val[i]:\n        if j!=0:\n            cnt=cnt+1\n    if(cnt==2):\n        ind.append(i)\n\ny_val=np.delete(y_val,ind, axis=0)\nx_val=np.delete(x_val,ind, axis=0)","33282344":"from keras import backend as K \nK.clear_session()\n\nlatent_dim = 300\nembedding_dim=100\n\n# Encoder\nencoder_inputs = Input(shape=(max_text_len,))\n\n#embedding layer\nenc_emb =  Embedding(x_voc, embedding_dim,trainable=True)(encoder_inputs)\n\n#encoder lstm 1\nencoder_lstm1 = LSTM(latent_dim,return_sequences=True,return_state=True,dropout=0.4,recurrent_dropout=0.4)\nencoder_output1, state_h1, state_c1 = encoder_lstm1(enc_emb)\n\n#encoder lstm 2\nencoder_lstm2 = LSTM(latent_dim,return_sequences=True,return_state=True,dropout=0.4,recurrent_dropout=0.4)\nencoder_output2, state_h2, state_c2 = encoder_lstm2(encoder_output1)\n\n#encoder lstm 3\nencoder_lstm3=LSTM(latent_dim, return_state=True, return_sequences=True,dropout=0.4,recurrent_dropout=0.4)\nencoder_outputs, state_h, state_c= encoder_lstm3(encoder_output2)\n\n# Set up the decoder, using `encoder_states` as initial state.\ndecoder_inputs = Input(shape=(None,))\n\n#embedding layer\ndec_emb_layer = Embedding(y_voc, embedding_dim,trainable=True)\ndec_emb = dec_emb_layer(decoder_inputs)\n\ndecoder_lstm = LSTM(latent_dim, return_sequences=True, return_state=True,dropout=0.4,recurrent_dropout=0.2)\ndecoder_outputs,decoder_fwd_state, decoder_back_state = decoder_lstm(dec_emb,initial_state=[state_h, state_c])\n\n# Attention layer\nattn_layer = AttentionLayer(name='attention_layer')\nattn_out, attn_states = attn_layer([encoder_outputs, decoder_outputs])\n\n# Concat attention input and decoder LSTM output\ndecoder_concat_input = Concatenate(axis=-1, name='concat_layer')([decoder_outputs, attn_out])\n\n#dense layer\ndecoder_dense =  TimeDistributed(Dense(y_voc, activation='softmax'))\ndecoder_outputs = decoder_dense(decoder_concat_input)\n\n# Define the model \nmodel = Model([encoder_inputs, decoder_inputs], decoder_outputs)\n\nmodel.summary() ","2c33b988":"model.compile(optimizer='rmsprop', loss='sparse_categorical_crossentropy')","04624f55":"es = [EarlyStopping(monitor='val_loss', mode='min', verbose=1,patience=2), \n      ModelCheckpoint('.\/MyModel_tf',monitor='val_loss', verbose=1,\n                      save_best_only=True, mode='min', save_weights_only = False)]","a67285ef":"history=model.fit([x_tr,y_tr[:,:-1]], y_tr.reshape(y_tr.shape[0],y_tr.shape[1], 1)[:,1:] ,epochs=50,callbacks=[es],batch_size=512, validation_data=([x_val,y_val[:,:-1]], y_val.reshape(y_val.shape[0],y_val.shape[1], 1)[:,1:]))","1d0b1e9f":"# serialize model to JSON\nmodel_json = model.to_json()\nwith open(\"summary.json\", \"w\") as json_file:\n    json_file.write(model_json)\n# serialize weights to HDF5\nmodel.save_weights(\"summary.h5\")\nprint(\"Saved model to disk\")","fc581edc":"from matplotlib import pyplot\npyplot.plot(history.history['loss'], label='train')\npyplot.plot(history.history['val_loss'], label='test')\npyplot.legend()\npyplot.show()","480ad1ea":"reverse_target_word_index=y_tokenizer.index_word\nreverse_source_word_index=x_tokenizer.index_word\ntarget_word_index=y_tokenizer.word_index","023a30d3":"# Encode the input sequence to get the feature vector\nencoder_model = Model(inputs=encoder_inputs,outputs=[encoder_outputs, state_h, state_c])\n\n# Decoder setup\n# Below tensors will hold the states of the previous time step\ndecoder_state_input_h = Input(shape=(latent_dim,))\ndecoder_state_input_c = Input(shape=(latent_dim,))\ndecoder_hidden_state_input = Input(shape=(max_text_len,latent_dim))\n\n# Get the embeddings of the decoder sequence\ndec_emb2= dec_emb_layer(decoder_inputs) \n# To predict the next word in the sequence, set the initial states to the states from the previous time step\ndecoder_outputs2, state_h2, state_c2 = decoder_lstm(dec_emb2, initial_state=[decoder_state_input_h, decoder_state_input_c])\n\n#attention inference\nattn_out_inf, attn_states_inf = attn_layer([decoder_hidden_state_input, decoder_outputs2])\ndecoder_inf_concat = Concatenate(axis=-1, name='concat')([decoder_outputs2, attn_out_inf])\n\n# A dense softmax layer to generate prob dist. over the target vocabulary\ndecoder_outputs2 = decoder_dense(decoder_inf_concat) \n\n# Final decoder model\ndecoder_model = Model(\n    [decoder_inputs] + [decoder_hidden_state_input,decoder_state_input_h, decoder_state_input_c],\n    [decoder_outputs2] + [state_h2, state_c2])","3e3f843e":"def decode_sequence(input_seq):\n    # Encode the input as state vectors.\n    e_out, e_h, e_c = encoder_model.predict(input_seq)\n    \n    # Generate empty target sequence of length 1.\n    target_seq = np.zeros((1,1))\n    \n    # Populate the first word of target sequence with the start word.\n    target_seq[0, 0] = target_word_index['sostok']\n\n    stop_condition = False\n    decoded_sentence = ''\n    while not stop_condition:\n      \n        output_tokens, h, c = decoder_model.predict([target_seq] + [e_out, e_h, e_c])\n\n        # Sample a token\n        sampled_token_index = np.argmax(output_tokens[0, -1, :])\n        sampled_token = reverse_target_word_index[sampled_token_index]\n        \n        if(sampled_token!='eostok'):\n            decoded_sentence += ' '+sampled_token\n\n        # Exit condition: either hit max length or find stop word.\n        if (sampled_token == 'eostok'  or len(decoded_sentence.split()) >= (max_summary_len-1)):\n            stop_condition = True\n\n        # Update the target sequence (of length 1).\n        target_seq = np.zeros((1,1))\n        target_seq[0, 0] = sampled_token_index\n\n        # Update internal states\n        e_h, e_c = h, c\n\n    return decoded_sentence","156c194a":"def seq2summary(input_seq):\n    newString=''\n    for i in input_seq:\n        if((i!=0 and i!=target_word_index['sostok']) and i!=target_word_index['eostok']):\n            newString=newString+reverse_target_word_index[i]+' '\n    return newString\n\ndef seq2text(input_seq):\n    newString=''\n    for i in input_seq:\n        if(i!=0):\n            newString=newString+reverse_source_word_index[i]+' '\n    return newString","3cce1c11":"for i in range(0,100):\n    print(\"Review:\",seq2text(x_tr[i]))\n    print(\"Original summary:\",seq2summary(y_tr[i]))\n    print(\"Predicted summary:\",decode_sequence(x_tr[i].reshape(1,max_text_len)))\n    print(\"\\n\")","041b367f":"# ***train the model on a batch size of 512 and validate it on the 10% of dataset***","7c465fc6":"# ***understanding the behavior of model over time***","03b58ded":"# ***importing required libraries***","9446f114":"# ***Information about datatypes and shape of the dataset***","1c647615":"# ***defining tokenizer with most common words for summaries***","435d4c94":"# ***cleaning reviews and displaying***","cc52e43a":"# ***splitting traing and test set***","32d40b26":"# ***convert the index to word for summaries and reviews vocabulary***","e3b9605b":"# ***calculating number of rare and common words in reviews***","4060b340":"# ***Visualization distribution of reviews and summaries***","bc7f6155":"# ***Adding columns into the dataset***","86b351c7":"# ***Adding requirement for attention layer***","bebc55f9":"# ***prepare a tokenizer for summaries on training data***","da4c7124":"# ***Setting up the inference for the encoder and decoder***","3d1ee82e":"# ***monitoring the validation loss***","862f2af0":"# ***getting rid of outliers***","a6ddba3b":"# ***Function for cleaning reviews and summaries***","6b2aeb93":"# ***defining tokenizer with most common words for reviews***","8a800ab7":"# ***Model building, defining LSTM layers, Encoder and Decoder***","0f544a5c":"# ***For removing stopwords***","bc51ad57":"# ***calculating number of rare and common words in summaries***","be03694f":"# ***cleaning summaries and displaying***","2c43c16f":"# ***Dictionary for expanding the contractions***","15e27788":"# ***converting an integer sequence to a word sequence for summaries and reviews***","39f608a8":"# ***Adding tokens at the beginning and the end of summary***","f406496d":"# ***Dropping duplicate reviews and null values***","8c8de30a":"# ***checking word count of start token is equal to length of the training data***","b5fb5c6b":"# ***displaying some summaries generated by the model***","0e2b2da0":"# ***Loading dataset to the notebook***","b4718654":"# ***prepare a tokenizer for reviews on training data***","6914b08e":"# ***Dropping empty rows***","74cf13e3":"# ***Defining a functio for implementation of the inference process***","088a4acc":"# ***deleting the rows that contain only START and END tokens***"}}