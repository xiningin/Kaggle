{"cell_type":{"8029f0aa":"code","c3d6f473":"code","5e2ec3de":"code","2d27734b":"code","9272cd1f":"code","075f465d":"code","92eccac7":"code","9794c2b5":"code","cdcde6ab":"code","ada998fe":"code","a8b0a342":"code","1321b94b":"code","3b22e159":"markdown","d83eaab8":"markdown","385a62a7":"markdown","208e6cea":"markdown","581ab227":"markdown","f715e703":"markdown"},"source":{"8029f0aa":"import numpy as np\nimport matplotlib.pyplot as plt","c3d6f473":"rng = np.random.default_rng(seed=5)","5e2ec3de":"n = 100\nW = 2.5\nb = -1.1\n\nX = np.linspace(-2, 5, n).reshape(-1, 1)\ny = W * X + b + rng.uniform(size=(n, 1))\ny = y.ravel()\n\nX_train, X_val, y_train, y_val = X[:80, :], X[80:, :], y[:80], y[80:]\nX_train.shape, X_val.shape, y_train.shape, y_val.shape","2d27734b":"plt.scatter(X_train, y_train, s=2)\nplt.scatter(X_val, y_val, s=2)","9272cd1f":"from sklearn.metrics import mean_squared_error as mse\n\ndef show_result(pred):\n    print(\"MSE:\", mse(y_val, pred))\n    \n    plt.scatter(X_train, y_train, s=2)\n    plt.scatter(X_val, y_val, s=2)\n    plt.plot(X_val, pred)","075f465d":"from sklearn.linear_model import LinearRegression\n\nlrm = LinearRegression().fit(X_train, y_train)\n\nshow_result(lrm.predict(X_val))","92eccac7":"from sklearn.tree import DecisionTreeRegressor\n\ndtm = DecisionTreeRegressor().fit(X_train, y_train)\n\nshow_result(dtm.predict(X_val))","9794c2b5":"from sklearn.ensemble import RandomForestRegressor\n\nrfm = RandomForestRegressor().fit(X_train, y_train)\n\nshow_result(rfm.predict(X_val))","cdcde6ab":"from sklearn.ensemble import GradientBoostingRegressor\n\ngbm = GradientBoostingRegressor().fit(X_train, y_train)\n\nshow_result(gbm.predict(X_val))","ada998fe":"n = 100\nW = 2.5\nb = -1.1\n\nX = np.linspace(-2, 5, n).reshape(-1, 1)\ny = W * X + b + rng.uniform(size=(n, 1))\ny = y.ravel()\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2)\nX_train.shape, X_val.shape, y_train.shape, y_val.shape","a8b0a342":"from sklearn.linear_model import LinearRegression\n\nlrm = LinearRegression().fit(X_train, y_train)\n\nmse(y_val, lrm.predict(X_val))","1321b94b":"from sklearn.tree import DecisionTreeRegressor\n\ndtm = DecisionTreeRegressor(max_depth=10).fit(X_train, y_train)\n\nmse(y_val, dtm.predict(X_val))","3b22e159":"# Random Forest","d83eaab8":"# Linear Model","385a62a7":"# Choose val data randomly","208e6cea":"# Decision Tree","581ab227":"# Generate data","f715e703":"# Gradient Boosting"}}