{"cell_type":{"20e282e1":"code","d286b88b":"code","4c610cb9":"code","95d6eee2":"code","b8e4e061":"code","575d40fe":"code","8c5e596b":"code","b7879037":"code","3f27acdd":"code","5a699935":"code","8d4f1e9c":"code","40e5a4a5":"code","97a9f6a3":"code","0ba6c574":"code","d48c01c7":"code","9d9b749a":"code","a60fd089":"code","49319fd6":"markdown","f99ad70f":"markdown","2ab71515":"markdown","13de97a0":"markdown","8db314e7":"markdown","9747616a":"markdown","7ca3a09f":"markdown","ce214a5d":"markdown","49126ae9":"markdown","796dc145":"markdown","ebf64bc5":"markdown","7529d298":"markdown","f441c663":"markdown","c4c2e6c8":"markdown","97552fb3":"markdown","ff4273b1":"markdown","3e04b1ac":"markdown","1e0ea5ec":"markdown"},"source":{"20e282e1":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn import metrics \nfrom sklearn.metrics import r2_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\n\nsales_train=pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/sales_train.csv')\ntest=pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/test.csv')\nsubmission=pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/sample_submission.csv')","d286b88b":"print(\"Sales train data info\")\nsales_train.info()\nsales_train.head(5)","4c610cb9":"print(\"Test data info\")\ntest.info()\ntest.head(5)","95d6eee2":"print(\"Sales Train data\")\nprint(\"Null values:\",sales_train.isnull().values.any())\nprint(\"NaN values:\",sales_train.isna().values.any())\nprint()\nprint(\"Test data\")\nprint(\"Null values:\",test.isnull().values.any())\nprint(\"NaN values:\",test.isna().values.any())","b8e4e061":"plt.figure(figsize=(10,4))\nsns.scatterplot(x=sales_train.item_cnt_day, y=sales_train.item_price, data=sales_train)","575d40fe":"sales_train = sales_train[sales_train.item_price<75000]\nsales_train = sales_train[sales_train.item_cnt_day<1001]\nsales_train = sales_train[sales_train.item_cnt_day>=0]","8c5e596b":"plt.figure(figsize=(10,4))\nsns.scatterplot(x=sales_train.item_cnt_day, y=sales_train.item_price, data=sales_train)","b7879037":"grouped_train = sales_train.groupby([\"date_block_num\",\"shop_id\",\"item_id\"])[\"item_cnt_day\"].agg('sum').reset_index()\nx=grouped_train.iloc[:,:-1]\ny=grouped_train.iloc[:,-1:]\ny=y.clip(0,20)\nprint(\"X:\")\nprint(x.head(5))\nprint(\"Y:\")\nprint(y.head(5))","3f27acdd":"x_train, x_test,y_train,y_test = train_test_split(x,y,test_size=0.25, random_state=0)","5a699935":"model = RandomForestRegressor(n_estimators=25,random_state=0)\nmodel.fit(x_train,y_train)\n\ny_pred = model.predict(x_test)\n\nprint(\"---Random Forest Regressor---\")\nprint(\"R2 Score:\",r2_score(y_test,y_pred))\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))\nprint('Root Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred, squared=False))","8d4f1e9c":"from sklearn.ensemble import ExtraTreesRegressor\nmodel = ExtraTreesRegressor(n_estimators=25,random_state=0)\nmodel.fit(x_train,y_train)\ny_pred = model.predict(x_test)\n\nprint(\"---Extra Trees Regressor---\")\nprint(\"R2 Score:\",r2_score(y_test,y_pred))\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))\nprint('Root Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred, squared=False))","40e5a4a5":"from sklearn.ensemble import BaggingRegressor\nmodel = BaggingRegressor(n_estimators=25,random_state=0)\nmodel.fit(x_train,y_train)\ny_pred = model.predict(x_test)\n\nprint(\"---Bagging Regressor---\")\nprint(\"R2 Score:\",r2_score(y_test,y_pred))\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))\nprint('Root Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred, squared=False))","97a9f6a3":"test.head(5)","0ba6c574":"test_df=test.iloc[:,1:]\ntest_df['date_block_num']=34\ncols = test_df.columns.tolist()\ncols = cols[-1:] + cols[:-1]\ntest_df=test_df[cols]\n\ntest_df.head(5)","d48c01c7":"model.fit(x,y)\ntest_pred=model.predict(test_df)\npred_df=pd.DataFrame(test_pred,columns=[\"item_cnt_month\"])","9d9b749a":"pred_df=pred_df.clip(0,20)\nsubmission.drop(columns=['item_cnt_month'],inplace=True)\nsubmission=pd.concat([submission,pred_df],axis=1)\nsubmission.head(5)","a60fd089":"submission.to_csv('submission.csv', index=False)","49319fd6":"Importing libraries and loading data","f99ad70f":"# Model Selection\n\nRandom Forest Regressor Model","2ab71515":"Output file","13de97a0":"Predicting next month sales with Random Forest Regressor","8db314e7":"Bagging Regressor Model","9747616a":"Grouping data by month and splitting x,y","7ca3a09f":"According to model performances, Random Forest Regressor selected for next month sales","ce214a5d":"Test data info","49126ae9":"Preparing test data for prediction","796dc145":"Removing outliers","ebf64bc5":"Test data","7529d298":"Output data","f441c663":"Checking missing values on train and test data","c4c2e6c8":"Sales train data info","97552fb3":"Extra Trees Regressor Model","ff4273b1":"Sales_train data train, test split","3e04b1ac":"Checking for outliers","1e0ea5ec":"# B\u00fcy\u00fck Veri Final\n\n**Mert H\u00fcseyin UZAN**\n\n160202009\n"}}