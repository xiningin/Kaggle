{"cell_type":{"0f8d85cc":"code","8a54ab25":"code","c1cb3604":"code","c05a856b":"code","5c03968d":"code","3790f08f":"code","64a176cc":"code","7a1fa749":"markdown","f26e3efa":"markdown","2625908f":"markdown","9556c82e":"markdown","0a6dd171":"markdown","2bf66348":"markdown","8dc74fba":"markdown"},"source":{"0f8d85cc":"import socket\nfrom concurrent import futures\n\n\nimport pandas as pd","8a54ab25":"!head -n 1000000 \/kaggle\/input\/web-server-access-logs\/access.log | egrep \"^\\S+\" -o > ip_addresses.txt","c1cb3604":"!wc ip_addresses.txt","c05a856b":"!head -n 25 ip_addresses.txt","5c03968d":"def reverse_dns_lookup(ip_list, timeout=10, max_workers=640):\n    \"\"\"Return the hostname, aliaslist, and ipaddrlist for a list of IP addresses.\n    \n    ip_list: a list of IP addresses.\n    timeout: The time in seconds to wait before timing out a request.\n    max_workers: The maximum number of workers ot use for multi threading.\n    \"\"\"\n    socket.setdefaulttimeout(timeout)\n    count_df = (pd.Series(ip_list)\n                .value_counts()\n                .reset_index())\n    count_df.columns = ['ip_address', 'count']\n    count_df = count_df.assign(perc=count_df['count'].div(count_df['count'].sum()),\n                               cum_perc=lambda df: df['perc'].cumsum())\n    hosts = []\n    def single_request(ip):\n        nonlocal hosts\n        try:\n            hostname, aliaslist, ipaddrlist = socket.gethostbyaddr(ip)\n            hosts.append([ip, hostname, '@@'.join(aliaslist), '@@'.join(ipaddrlist)])\n        except Exception as e:\n            hosts.append([ip, None, None, None, str(e)])\n    with futures.ThreadPoolExecutor(max_workers=max_workers) as executor:\n        executor.map(single_request, count_df['ip_address'])\n    df = pd.DataFrame(hosts, columns=['ip', 'hostname', 'aliaslist', 'ipaddrlist', 'errors'])\n    final_df = pd.merge(count_df, df, left_on='ip_address', right_on='ip', how='left').drop('ip', axis=1)\n    return final_df","3790f08f":"ip_list = []\nwith open('ip_addresses.txt') as file:\n    for line in file:\n        ip_list.append(line[:-1])\nip_list[:20]","64a176cc":"%%time\nreverse_lookups = reverse_dns_lookup(ip_list)\nprint(f'Rows, columns: {reverse_lookups.shape}.')\n(reverse_lookups\n .head(20)\n .style\n .background_gradient(subset=['count', 'perc', 'cum_perc'], cmap='cividis')\n .format({'count': '{:,}', 'perc': '{:.1%}', 'cum_perc': '{:.1%}'}))","7a1fa749":"Get the IPs from the `ip_addresses.txt` file and put them in a Python list: ","f26e3efa":"Extract the first one million IP addresses from a log file. The regex here is not generalizable, but good enough for this case, as we know that pretty much all lines start with an IP address. Then write them to a new file `ip_addresses.txt`.","2625908f":"# Run the `reverse_dns_lookup` function: \n\n* `ip_list`: A list of IP address to check.\n* `timeout`: The number of seconds after which the request will timeout, defaults to ten.\n* `max_workers`: The number of workers for multi threading. Since we are hittting each IP once, it doens't matter if we set this to a very high number, because we won't be \"attacking\" any server, and our requests are tiny. Defaults to 640 (specific numbers give an impression that you know what you are doing, please don't be fooled!).\n\n\n> Note: The Python `gethostbyaddr` function returns the hostname, aliaslist and ipaddrlist for a given IP address. On Linux (this notebook runs on Linux), there is an [issue causing the aliaslist not to be returned](https:\/\/bugs.python.org\/issue1085069). I'm thinking of ways to solve this for Linux machines. It works as documented on Windows and Mac.\n","9556c82e":"We were able to perform a reverse DNS lookup on 22,844 IPs in about a minute. Not bad!\n\nWe also got them sorted by count, percentage of total, and the cumulative percentage, so we see how important those top IPs are.","0a6dd171":"Run the function for one million IPs. Actually we will be checking the unique values, so we will be making around 23k requests: ","2bf66348":"Count the lines to verify the number:","8dc74fba":"# Reverse DNS Lookup\n\nA simple function to get the hostname, aliaslist, and IP address list for a long list of duplicated IP addresses. You typically would run this for a list of IPs in a log file for example.\n\nIt also shows the counts of each IP, absolute, relative, and cumulative, for a better view on the importance and frequency of each."}}