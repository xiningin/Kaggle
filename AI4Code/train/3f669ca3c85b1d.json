{"cell_type":{"10c817dc":"code","d1660d51":"code","29ee9eb2":"code","ab280907":"code","160062bc":"code","2c6edd2a":"code","c106edcf":"code","4c706f8e":"code","b11eab3d":"code","b77e2311":"code","9b5ed8ab":"code","5acbb1a1":"code","1053f7f9":"code","4fc5783b":"code","29df11a6":"code","27604168":"code","c8b6a1d7":"code","6321cefe":"code","a9d8bfe5":"code","5ac19c1b":"code","6af1e499":"code","f4425465":"code","a332ed1c":"code","eb88827d":"code","92a27265":"code","0dda2111":"code","e1ffd46d":"code","ef4b1911":"code","4e843ae7":"code","240f3d2d":"code","24f7f26d":"code","17b02648":"code","f8013c15":"code","22c53f13":"code","8576cd48":"code","17e5ca38":"code","338c2011":"code","a74ffaf0":"code","d7c0b8bc":"markdown"},"source":{"10c817dc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d1660d51":"df = pd.read_csv('\/kaggle\/input\/pokemon\/Pokemon.csv')\ndf.head()","29ee9eb2":"df.isnull().sum()","ab280907":"cat_vars = df.select_dtypes(include = ['object']).columns\nnum_vars = df.select_dtypes(include = ['int64','float64']).columns\nprint(f' num_vars are {num_vars}\\n cat_vars are {cat_vars}')","160062bc":"df['Type 2'].fillna('others',inplace = True)","2c6edd2a":"df.isnull().sum()","c106edcf":"mean_map = []\nfor i in df[cat_vars].columns:\n    mean_map.append(df.groupby([i])['Total'].mean())","4c706f8e":"j = 0\nfor i in df[cat_vars].columns:\n    df[i] = df[i].map(mean_map[j]);j+=1","b11eab3d":"df.head()","b77e2311":"df.head()","9b5ed8ab":"df = df.drop(['#'],axis = 1)","5acbb1a1":"df['Legendary'] = pd.get_dummies(df['Legendary'])","1053f7f9":"import seaborn as sn\nimport matplotlib.pyplot as plt\n%matplotlib inline","4fc5783b":"df.head()","29df11a6":"plt.figure(figsize=(16,9))\nsn.heatmap(df.corr(),annot=True,linewidths=3,linecolor='red')","27604168":"from sklearn.preprocessing import MinMaxScaler\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.model_selection import RandomizedSearchCV,cross_val_score,train_test_split","c8b6a1d7":"temp = df.copy()","6321cefe":"upper_limit = temp.HP.mean() + (temp.HP.std()*3)\nlower_limit = temp.HP.mean() - (temp.HP.std()*3)\ntemp[(temp.HP > upper_limit) | (temp.HP < lower_limit)]","a9d8bfe5":"data_new = temp[(temp.HP<upper_limit) & (temp.HP>lower_limit)]\ndata_new.head()","5ac19c1b":"data_new[(data_new.HP>upper_limit)|(data_new.HP<lower_limit)]","6af1e499":"test = data_new['Total']\n\ntrain = data_new.drop(['Total'],axis = 1)","f4425465":"mm = MinMaxScaler()\ntrain_scaled = mm.fit_transform(train)","a332ed1c":"params = {\n    'Random_forest':{\n        'model':RandomForestRegressor(),\n        'params':{\n            'n_estimators':[int(x) for x in np.linspace(start=1,stop=1200,num = 10)],\n            'max_depth':[int(x) for x in np.linspace(start=1,stop=30,num = 5)],\n            'min_samples_split':[2,5,10,12],\n            'min_samples_leaf':[2,5,10,12],\n            'max_features':['auto','sqrt'],\n            'ccp_alpha':[0.015,0.010,0.005]\n        }\n    },\n    'SVR':{\n        'model': SVR(gamma='auto'),\n        'params':{\n            'kernel':['rbf','poly','linear','sigmoid'],\n            'C':[0.25,0.50,0.75,1.0],\n            'tol':[1e-10,1e-5,0.005],\n            \n        }\n    }\n}","eb88827d":"scores = []\nfor model_name,mp in params.items():\n    clf = RandomizedSearchCV(mp['model'],mp['params'],cv = 5,verbose = 2,n_iter=10,scoring='neg_mean_squared_error')\n    clf.fit(train_scaled,test)\n    scores.append({\n        'model_name':model_name,\n        'best_score':clf.best_score_,\n        'best_estimator':clf.best_estimator_,\n    })","92a27265":"score_df = pd.DataFrame(scores,columns = ['model_name','best_score','best_estimator'])\nscore_df","0dda2111":"X_train, X_test, y_train, y_test = train_test_split(train_scaled,test,test_size = 0.2)","e1ffd46d":"from sklearn.model_selection import cross_val_score","ef4b1911":"rf_score = cross_val_score(RandomForestRegressor(ccp_alpha=0.015, max_depth=22, min_samples_leaf=2,\n                      min_samples_split=5, n_estimators=533),X_train,y_train,cv = 10)\nsvr_score = cross_val_score(SVR(gamma='auto', kernel='linear', tol=1e-10),X_train,y_train,cv = 10)","4e843ae7":"print(f' mean score of rf is {rf_score.mean()}\\n mean score of svr is {svr_score.mean()}')","240f3d2d":"rf_score = cross_val_score(RandomForestRegressor(ccp_alpha=0.015, max_depth=22, min_samples_leaf=2,\n                      min_samples_split=5, n_estimators=533),X_test,y_test,cv = 10)","24f7f26d":"print(f' This is testing score:...\\n mean score of rf is {rf_score.mean()}')","17b02648":"rf = RandomForestRegressor(ccp_alpha=0.015, max_depth=22, min_samples_leaf=2,\n                      min_samples_split=5, n_estimators=533)\nrf.fit(X_train,y_train)\nrf.score(X_train,y_train)","f8013c15":"y_pred = rf.predict(X_test)","22c53f13":"sn.distplot(y_pred-y_test)","8576cd48":"predict = []\nfor i in range(0,len(train_scaled)):\n    predict.append(rf.predict([train_scaled[i]]))","17e5ca38":"predict = np.array(predict)\ndata_new['predict'] = predict","338c2011":"sn.distplot(data_new['Total'],label = 'Total',kde= True,hist=False)\nsn.distplot(data_new['predict'],label = 'predicted',kde = True,hist=False)\nplt.legend()\nplt.show()","a74ffaf0":"data_new.head()","d7c0b8bc":"### AS WE CAN SEE THAT THE PREDICTED ALMOST MATCHES WITH THE TOTAL SCORE...RANDOM FOREST DOES A GOOD JOB\u263b"}}