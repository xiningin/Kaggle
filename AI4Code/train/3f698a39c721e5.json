{"cell_type":{"702630ad":"code","0a714e10":"code","dff291c3":"code","7f00d551":"code","5bc2aea8":"code","b118bbd6":"code","68d6c475":"code","8e03fe37":"code","8aa6c552":"code","228ef256":"code","84fbb0cd":"code","a5d60fdc":"code","15b656ad":"code","c8f34735":"code","128e85c4":"markdown"},"source":{"702630ad":"# import library\nimport numpy as np\nimport pandas as pd\nimport xgboost as xgb\nimport gc\nimport warnings\nwarnings.filterwarnings('ignore')","0a714e10":"train = pd.read_csv('..\/input\/zillow-prize-1\/train_2016_v2.csv')\nprop = pd.read_csv('..\/input\/zillow-prize-1\/properties_2016.csv')\nsample = pd.read_csv('..\/input\/zillow-prize-1\/sample_submission.csv')","dff291c3":"for c, dtype in zip(prop.columns, prop.dtypes):\n    if dtype == np.float64:\n        prop[c] = prop[c].astype(np.float32)\n\nprint('creating training set ...')","7f00d551":"df_train = train.merge(prop, how='left', on='parcelid')\n\nx_train = df_train.drop(['parcelid', 'logerror', 'transactiondate', 'propertyzoningdesc', 'propertycountylandusecode'], axis=1)\ny_train = df_train['logerror'].values\nprint(x_train.shape, y_train.shape)","5bc2aea8":"train_columns = x_train.columns\n\nfor c in x_train.dtypes[x_train.dtypes == object].index.values:\n    x_train[c] = (x_train[c] == True)\n\ndel df_train; gc.collect()","b118bbd6":"split = 80000\nx_train, y_train, x_valid, y_valid = x_train[:split], y_train[:split], x_train[split:], y_train[split:]\n\nprint('Building DMatrix...')","68d6c475":"# DMatrix : \ub118\ud30c\uc774 \uc785\ub825 \ud30c\ub77c\ubbf8\ud130\ub97c \ubc1b\uc544\uc11c \ub9cc\ub4e4\uc5b4\uc9c0\ub294 XGBoost\ub9cc\uc758 \uc804\uc6a9 \ub370\uc774\ud130 \uc138\ud2b8\n\n# \uc8fc\uc694 \uc785\ub825 \ud30c\ub77c\ubbf8\ud130\ub294 data(\ud53c\ucc98 \ub370\uc774\ud130 \uc138\ud2b8)\uc640 label\n# (\ubd84\ub958: \ub808\uc774\ube14 \ub370\uc774\ud130 \uc138\ud2b8\/\ud68c\uadc0: \uc22b\uc790\ud615\uc778 \uc885\uc18d\uac12 \ub370\uc774\ud130 \uc138\ud2b8)\n\nd_train = xgb.DMatrix(x_train, label = y_train)\nd_valid = xgb.DMatrix(x_valid, label = y_valid)\n\ndel x_train, x_valid; gc.collect()","8e03fe37":"params = {}\nparams['eta'] = 0.02\nparams['objective'] = 'reg:linear'\nparams['eval_metric'] = 'mae'\nparams['max_depth'] = 4\nparams['silent'] = 1","8aa6c552":"watchlist = [(d_train, 'train'), (d_valid, 'valid')]\nclf = xgb.train(params, d_train, 10000, watchlist,\n                early_stopping_rounds=100, verbose_eval=10)\n\ndel d_train, d_valid\n\nprint('Bulidng test set ...')","228ef256":"sample['parcelid'] = sample['ParcelId']\ndf_test = sample.merge(prop, on='parcelid', how = 'left')\n\ndel prop; gc.collect()","84fbb0cd":"x_test = df_test[train_columns]\nfor c in x_test.dtypes[x_test.dtypes == object].index.values:\n    x_test[c] = (x_test[c] == True)\n    \ndel df_test, sample; gc.collect()","a5d60fdc":"d_test = xgb.DMatrix(x_test)\n\ndel x_test; gc.collect()\n\nprint('Predicting on test ...')","15b656ad":"p_test = clf.predict(d_test)\n\ndel d_test; gc.collect()","c8f34735":"sub = pd.read_csv('..\/input\/zillow-prize-1\/sample_submission.csv')\nfor c in sub.columns[sub.columns != 'ParcelId']:\n    sub[c] = p_test\n\nprint('Writting csv ...')\n\nsub.to_csv('xgb_starter.csv', index=False, float_format='%.4f')","128e85c4":"#### This kernel used dataset from the Zillow Prize: Zillow\u2019s Home Value Prediction and copied from the 'Simple XGBoost Starter' written by anokas.\n#### Introduction to 'Simple XGBoost Starter' : [URL](https:\/\/www.kaggle.com\/anokas\/simple-xgboost-starter-0-0655)\n#### Thanks for sharing kernel, anokas"}}