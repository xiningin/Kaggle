{"cell_type":{"d68c4241":"code","ec877071":"code","169847a3":"code","762586f2":"code","293ec5f5":"code","747f266c":"code","848dc914":"code","937d4dac":"code","3fc661b6":"code","c547e89a":"code","d6b70fbd":"code","97c01c75":"code","174a0436":"code","7497829a":"code","701b6a30":"code","0a980d08":"code","08fd0dc9":"code","e277fd7b":"code","77ad7039":"code","8675378a":"code","f096fc7b":"code","d03b253f":"code","18696fb3":"code","1269ed26":"code","29273c34":"code","6cd3dd1f":"code","f26c895d":"code","da3d6c38":"code","2ee6583f":"markdown","0d0b745f":"markdown","af08cc4b":"markdown","bc0fbf38":"markdown","2ff8657f":"markdown","d1fb6e84":"markdown","b53189e2":"markdown","61e00ee2":"markdown","1ada613c":"markdown","e5e6eadd":"markdown","9c62837b":"markdown","edaaa0ba":"markdown","c26b3ad4":"markdown","c2b8a139":"markdown","24efbfa6":"markdown","de563a71":"markdown","c4b41f85":"markdown","c2df6c77":"markdown"},"source":{"d68c4241":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n%matplotlib inline\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import GradientBoostingClassifier\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","ec877071":"df = pd.read_csv('\/kaggle\/input\/hmeq-data\/hmeq.csv')\ndf2 = df.copy()","169847a3":"display(df.sample(10).T)\ndisplay(df.shape)","762586f2":"df.info()","293ec5f5":"df.describe().T","747f266c":"def missing_values(data_frame):\n    total = data_frame.isnull().count()\n    missing = data_frame.isnull().sum()\n    missing_percent = missing\/total * 100\n    display(missing_percent)\n    \nmissing_values(df)\n\n","848dc914":"import matplotlib.pyplot as plt\n%matplotlib inline\ndf.hist(figsize=(20,10))","937d4dac":"numeric_feats = [c for c in df.columns if df[c].dtype != 'object' and c not in ['BAD']]\ndf_numeric_feats = df[numeric_feats]","3fc661b6":"df_numeric_feats.hist(figsize=(20,8), bins=30)\nplt.tight_layout() ","c547e89a":"jobs = df['JOB'].dropna().unique()\nplt.figure(figsize=(14,15))\nc=1\nfor i in jobs:\n    plt.subplot(7,1,c)\n    plt.title(i)\n    df[df['JOB'] == i]['VALUE'].hist(bins=20)\n    c+=1\nplt.tight_layout() ","d6b70fbd":"df.groupby('JOB')['YOJ'].mean()","97c01c75":"value_mean_by_job = df.groupby('JOB')['VALUE'].mean()\nvalue_mean_by_job","174a0436":"qtd1 = df.groupby(['BAD'])['JOB'].value_counts()\n\nqtd1","7497829a":"plt.figure(figsize=(12,6))\nplt.subplot(1,2,1)\nfig=sns.boxplot(x='LOAN', data=df, orient='v')\nfig.set_title('BoxPlot de Empr\u00e9stimo (LOAN)')\nfig.set_ylabel('Valores de Empr\u00e9stimos')","701b6a30":"import sklearn\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nimport scikitplot as skplt\nfrom sklearn.model_selection import cross_val_score","0a980d08":"df_rf = pd.get_dummies(df, df.dtypes[(df.dtypes==np.object) | (df.dtypes=='category')].index.values, drop_first=True)\ndf_rf.head()","08fd0dc9":"train, test = train_test_split(df_rf, test_size=0.20, random_state=42)","e277fd7b":"train, valid = train_test_split(train, test_size=0.20, random_state=42)\n\ntrain.shape, valid.shape, test.shape","77ad7039":"df_rf.info()","8675378a":"rf = RandomForestClassifier(n_jobs=-1, oob_score=True, n_estimators = 150, random_state=150)","f096fc7b":"feats = [c for c in df_rf.columns if c not in ['BAD']]\nfeats","d03b253f":"df_rf['BAD'] = pd.to_numeric(df['BAD'])","18696fb3":"missing_values(df)","1269ed26":"rf.fit(train[feats],train['BAD'])","29273c34":"preds = rf.predict(valid[feats])","6cd3dd1f":"accuracy_score(valid['BAD'], preds_val)","f26c895d":"preds_test = rf.predict(test[feats])\n\npreds_test","da3d6c38":"skplt.metrics.plot_confusion_matrix(test['BAD'], preds_test)","2ee6583f":"**Cria\u00e7\u00e3o da base para modelo Random Forest**\n\nCria\u00e7\u00e3o de um dataframe para este modelo","0d0b745f":"**Tratamento dos Dados**\n\nAntes do in\u00edcio das an\u00e1lises a base de dados foi tratada, pois foram identificados linhas que n\u00e3o possuiam informa\u00e7\u00f5es e estas foram eliminadas.","af08cc4b":"**Introdu\u00e7\u00e3o**\n\nNo presente estudo foi utilizada a base de dados HME_Data (Home Equity)disponibilizada no Kaggle. \u00c9 uma base de dados de empr\u00e9stimos onde encontramos 5960 amostras distribuidas em 13 vari\u00e1veis. \nO objetivo \u00e9 analisar o comportamento distribu\u00eddos entre os bons e maus pagadores.\n","bc0fbf38":"Verificado a m\u00e9dia de tempo de trabalho por tipo de trabalho e valor m\u00e9dio","2ff8657f":"**Acur\u00e1cia do modelo**","d1fb6e84":"Podemos verificar uma acur\u00e1cia acima de 90% onde conclu\u00edmos que o modelo \u00e9 muito bom.","b53189e2":"Verificamos que a m\u00e9dia de valores dos empr\u00e9stimos est\u00e1 na faixa de 10000 a 30000","61e00ee2":"**Dicion\u00e1rio de Vari\u00e1veis**\n\n* BAD - cliente inadimplente no empr\u00e9stimo 0 = empr\u00e9stimo reembolsado\n* LOAN - Montante da solicita\u00e7\u00e3o de empr\u00e9stimo\n* MORTDUE - Valor devido da hipoteca existente\n* VALUE - Valor da propriedade atual\n* REASON - DebtCon = consolida\u00e7\u00e3o da d\u00edvida \/ HomeImp - melhoramento da casa\n* JOB - Seis categorias profissionais\n* YOJ - Anos no emprego atual\n* DEROG - N\u00famero de principais relat\u00f3rios depreciativos\n* DELINQ - N\u00famero de linhas de cr\u00e9dito inadimplentes\n* CLAGE - Idade da linha comercial mais antiga em meses\n* NINQ - N\u00famero de linhas de cr\u00e9dito recentes\n* CLNO - N\u00famero de linhas de cr\u00e9dito\n* DEBTINC - R\u00e1cio d\u00edvida \/ rendimento\n","1ada613c":"**Verificando os histogramas**","e5e6eadd":"Verificada a quantidade de bons e maus pagadores de acordo com o tipo de trabalho","9c62837b":"**Modelo Random Forest Classifier**","edaaa0ba":"**An\u00e1lise Explorat\u00f3ria**\n\nEm seguida fazemos uma an\u00e1lise apresentando um resumo geral dos dados utilizados como m\u00e9dia, desvio padr\u00e3o, entre outros.","c26b3ad4":"**INSTITUTO DE EDUCA\u00c7\u00c3O SUPERIOR \u2013 IESB**\n\n**P\u00d3S-GRADUA\u00c7\u00c3O EM CI\u00caNCIA DE DADOS**\n\nData Mining e Machine Learning II\n\nCarolina Silva Baptistella\n\nMatr\u00edcula:1931133089\n","c2b8a139":"**An\u00e1lise**\n\nA an\u00e1lise inicial, mostra possui um n\u00famero pequeno de 'maus pagadores'(=1).\n","24efbfa6":"Separados por tipo de trabalhos, pode-se verificar que a maior parte foi classificado como outros.\n","de563a71":"**Modelo Preditivo**","c4b41f85":"**Importa\u00e7\u00e3o dos Dados**","c2df6c77":"**Prevendo os dados de valida\u00e7\u00e3o**"}}