{"cell_type":{"d44955db":"code","002de82a":"code","e4eb468b":"code","fff57683":"code","2c75b669":"code","2724a072":"code","42498aa5":"code","73ac8dd0":"code","de34e247":"code","7f18d456":"code","596e1d28":"code","11c6b8d3":"code","009c42ec":"markdown","b6f11837":"markdown","57c68813":"markdown","9105cdeb":"markdown"},"source":{"d44955db":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport random\nfrom sklearn.metrics import log_loss\nfrom sklearn.linear_model import LinearRegression","002de82a":"dt = {'WTeamID':'str', 'LTeamID':'str'}\ninp = '..\/input\/ncaaw-march-mania-2021\/'\nss = pd.read_csv(inp+'WSampleSubmissionStage1.csv')\nsd = pd.read_csv(inp+'WRegularSeasonCompactResults.csv',dtype=dt)\ntd = pd.read_csv(inp+'WNCAATourneyCompactResults.csv',dtype=dt)\nts = pd.read_csv(inp+'WNCAATourneySeeds.csv',dtype={'TeamID':'str'})","e4eb468b":"ts['Seed'] = ts['Seed'].map(lambda s: s[1:])\nsd['DScore'] = sd['WScore'] - sd['LScore']","fff57683":"for i in range(len(td.index)):\n    if random.choices([0,1]) == [1]:\n        td.at[i, 'Team1'] = td.at[i, 'WTeamID']\n        td.at[i, 'Team2'] = td.at[i, 'LTeamID']\n        td.at[i, 'target'] = 1.0\n    else:\n        td.at[i, 'Team1'] = td.at[i, 'LTeamID']\n        td.at[i, 'Team2'] = td.at[i, 'WTeamID']\n        td.at[i, 'target'] = 0.0","2c75b669":"ss['Team1'] = ss['ID'].map(lambda s: s[5:9])\nss['Team2'] = ss['ID'].map(lambda s: s[10:])\nss['Season'] = ss['ID'].map(lambda s: s[:4])","2724a072":"stat = {}\ndef calculate_stat(season, team):\n    if (season, team) in stat.keys():\n        return\n    t_w = sd.loc[(sd['Season']==season)&(sd['WTeamID']==team),'DScore']\n    t_l = sd.loc[(sd['Season']==season)&(sd['LTeamID']==team),'DScore']\n    t_wc = len(t_w.index)\n    t_lc = len(t_l.index)\n    t_ws = t_w.sum()\n    t_ls = t_l.sum()\n    stat[(season, team)] = {}\n    stat[(season, team)]['WinRate'] = t_wc \/ (t_wc+t_lc)\n    stat[(season, team)]['ScoreDiff'] = t_ws - t_ls\n    stat[(season, team)]['Seed'] = int(ts.loc[(ts['Season']==season)&(ts['TeamID']==team),'Seed'].any())","42498aa5":"def feat(df):\n    for i in df.index:\n        season = int(df.at[i, 'Season'])\n        team1 = df.at[i, 'Team1']\n        team2 = df.at[i, 'Team2']\n        calculate_stat(season, team1)\n        calculate_stat(season, team2)\n        df.at[i, 'T1WinRate'] = stat[(season, team1)]['WinRate']\n        df.at[i, 'T2WinRate'] = stat[(season, team2)]['WinRate']\n        df.at[i, 'T1ScoreDiff'] = stat[(season, team1)]['ScoreDiff']\n        df.at[i, 'T2ScoreDiff'] = stat[(season, team2)]['ScoreDiff']\n        df.at[i, 'T1Seed'] = stat[(season, team1)]['Seed']\n        df.at[i, 'T2Seed'] = stat[(season, team2)]['Seed']\n    return df","73ac8dd0":"td = feat(td)\nss = feat(ss)","de34e247":"model = LinearRegression()\ncols = ['T1ScoreDiff','T2ScoreDiff','T1WinRate','T2WinRate','T1Seed','T2Seed']","7f18d456":"def get_train_test(df, test_season):\n    train_df = df.loc[df['Season']!=test_season, cols+['target']]\n    test_df = df.loc[df['Season']==test_season, cols+['target']]\n    return train_df, test_df","596e1d28":"gloss = 0\nseasons = [2015, 2016, 2017, 2018, 2019]\n\nfor season in seasons:\n    train, test = get_train_test(td, season)\n    model.fit(train.drop('target', axis=1), train['target'])\n    pred = model.predict(test.drop('target', axis=1))\n    loss = log_loss(test['target'], pred)\n    print(season, loss)\n    gloss += loss\n\nprint('average', gloss\/len(seasons))","11c6b8d3":"model.fit(td[cols], td['target'])\npred = model.predict(ss[cols])\nss['Pred'] = pred.clip(0, 1)\nss.to_csv('submission.csv', columns=['ID','Pred'], index=None)\nss","009c42ec":"### Evaluate on last five years data","b6f11837":"### Define such simple model","57c68813":"### Dataframe formation with feature engineering ","9105cdeb":"### Prepare submission\nSubmission results will be leaky, so it is better to focus on evaluation in the previous section of this notebook."}}