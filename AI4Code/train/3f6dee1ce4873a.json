{"cell_type":{"b9572e86":"code","e78c0706":"code","00cdea86":"code","de6d8c78":"code","cfaf2c1c":"code","a6395528":"code","8efb8e11":"code","56a0e313":"code","cc2259fe":"code","26c2a239":"code","e8d30e0d":"code","df87f8f4":"code","6a03c284":"code","f8331a67":"code","f4891e18":"code","834a0424":"code","b081645e":"code","61f418cc":"code","b06c0677":"code","b2d3450a":"code","94ae3eec":"code","c57067a4":"code","65b30723":"code","4c38ad1c":"markdown","d083ecd5":"markdown","96bd77ac":"markdown"},"source":{"b9572e86":"import pandas as pd \nimport numpy as np\nfrom sklearn.model_selection import train_test_split, KFold, StratifiedKFold\nimport optuna\nimport plotly.express as px\n\nfrom sklearn.metrics import log_loss\npd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\n%matplotlib inline\nsns.set(color_codes=True)\npal = sns.color_palette(\"viridis\", 10)\nsns.set_palette(pal)","e78c0706":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        if filename.find(\"rain\")>0:\n            print('reading train')            \n            train=pd.read_csv(os.path.join(dirname, filename) )#,error_bad_lines=False)#,names=['id','body','headline']\n        if filename.find(\"est\")>0:\n            print('reading test')\n            test=pd.read_csv(os.path.join(dirname, filename))# ,header=0,names=['woord','type','datcr','datmod','id','synoniem','leeg5'])#,error_bad_lines=False )\n        if filename.find(\"accide\")>0:\n            print('reading rail')            \n            rail=pd.read_csv(os.path.join(dirname, filename),error_bad_lines=False ,sep=',',engine='python')#,names=['id','body','headline']\n        if filename==\"prodnm.csv\":\n            print('reading prod')            \n            prodnm=pd.read_csv(os.path.join(dirname, filename),sep=';',error_bad_lines=False )#,delimiter=',',header=0,names=['class','headline','body'])\n        if filename==\"product.csv\":\n            print('reading prod')            \n            prod=pd.read_csv(os.path.join(dirname, filename),sep=';',error_bad_lines=False )#,delimiter=',',header=0,names=['class','headline','body'])","00cdea86":"train","de6d8c78":"test","cfaf2c1c":"target = 'Interest_Rate'\nidnr='Loan_ID'","a6395528":"def describepd(data):\n    output=[]\n    for li in data.columns:\n        aantal=len(data)\n        vul=len(data[li].dropna())\n        vtyp=data[li].dtypes\n        uniek=len(data[li].unique())\n        if uniek==aantal:\n            veldindex='indexfield'\n        elif uniek==1:\n            veldindex='constant'\n        else:\n            veldindex=''\n        output.append([li,vtyp,np.round(100-vul\/aantal*100),np.round(uniek\/aantal*100),uniek,veldindex] )\n    return pd.DataFrame(output,columns=['label','dtype','%empty','%uniek','aantaluniek','keyparam'])\ndescribepd(train).sort_values('aantaluniek')[-50:]\n","8efb8e11":"train.describe().T.style.bar(subset=['mean'],color=px.colors.qualitative.G10[1]).background_gradient(subset=['std'],cmap='Blues').background_gradient(subset=['50%'],cmap='BuGn')","56a0e313":"plt.figure(figsize=(10,8))\nsns.heatmap(train.corr(),cmap='coolwarm',vmin=-1)","cc2259fe":"import h2o\nfrom h2o.automl import H2OAutoML\nh2o.init()","26c2a239":"%%time\nh2o_train = h2o.H2OFrame(train)\nh2o_test = h2o.H2OFrame(test)","e8d30e0d":"h2o_train[target] = h2o_train[[target]].asfactor()","df87f8f4":"atml = H2OAutoML(seed=13, exclude_algos = ['DeepLearning'],\n                 balance_classes=True,\n                 preprocessing = [\"target_encoding\"] ,\n                 exploitation_ratio = 0.1, \n                 sort_metric = 'logloss')","6a03c284":"features = h2o_train.drop([target,idnr]).columns\n","f8331a67":"%%time\n\natml.train(x = features, y= target, training_frame= h2o_train)","f4891e18":"board = atml.leaderboard\nboard","834a0424":"%%time\npreds = atml.leader.predict(h2o_test.drop([idnr],axis=1))","b081645e":"    def vervangkleur(datal,origlabel):\n        vervlabel=list([x for x in range(len(origlabel))])\n        temp=pd.DataFrame(datal)\n        temp=temp.replace(list(origlabel),list(vervlabel))\n        return temp\n\n    def H2Oreport(ydata,target,xpredi,tpredi):\n        \n        Xpredi=xpredi.as_data_frame(preds)['predict'].values\n        Tpredi=tpredi.as_data_frame(preds)['predict'].values\n        #print(ydata)\n        from sklearn.metrics import brier_score_loss, precision_score, recall_score,f1_score,classification_report\n        grens=0\n        print( classification_report(ydata[target][-grens:], Xpredi[-grens:])  )\n        \n        try:\n            #print(\"\\tBrier: %1.3f\" % (clf_score))\n            print(\"\\tPrecision: %1.3f\" % precision_score(ydata[target][-grens:], Xpredi[-grens:]) )\n            print(\"\\tRecall: %1.3f\" % recall_score(ydata[target][-grens:], Xpredi[-grens:]) )\n            print(\"\\tF1: %1.3f\\n\" % f1_score(ydata[target][-grens:], Xpredi[-grens:]) )\n            #str( roc_auc_score(ydata[target][-grens:], Xpredi[-grens:])\n        except:\n            print('')\n        try:\n            plt.scatter(x=ydata[target], y=Xpredi[:len(ydata)], marker='.', alpha=1)\n            plt.scatter(x=np.mean(ydata[target]), y=np.mean(Xpredi[:len(ydata)]), marker='o', color='green')\n            plt.scatter(x=np.mean(ydata[target]), y=np.mean(Tpredi), marker='x', color='red')\n            plt.xlabel('Real test'); plt.ylabel('Pred. test')\n        except:\n            uniek=ydata[target].unique()\n            ydata=vervangkleur(ydata,uniek)\n            Xpredi=vervangkleur(Xpredi,uniek)\n            plt.scatter(x=ydata, y=Xpredi, marker='.', alpha=1)\n            plt.scatter(x=np.mean(ydata), y=np.mean(Xpredi), marker='o', color='green')\n            plt.scatter(x=np.mean(ydata), y=np.mean(Xpredi), marker='x', color='red')\n            plt.xlabel('Real test'); plt.ylabel('Pred. test')\n            \n        plt.show()\n        \n        \n\n        try:\n                    features=pd.DataFrame( cla.feature_importances_,index=features,columns=['importance'])\n                    features=features.sort_values('importance',ascending=False)\n                    features[:15].plot(kind='barh')\n                    plt.show()\n\n        except:\n                    print('')        \n        return \n    Xpredi=atml.leader.predict(h2o_train.drop([target],axis=1))\n    Tpredi=atml.leader.predict(h2o_test.drop([idnr],axis=1))\n    H2Oreport(pd.DataFrame(train[target]),target,Xpredi,Tpredi)","61f418cc":"preds","b06c0677":"#preds = h2o.as_list(preds)\n#preds = preds.drop(['predict'],axis=1)\n#preds = np.clip(preds,0.05,0.95)\nsubm = pd.DataFrame(test[idnr])\nsubm[target]=preds.as_data_frame(preds)['predict'].values\nsubm[target]=subm[target].astype('float')\n","b2d3450a":"preds.as_data_frame()","94ae3eec":"subm","c57067a4":"subm.to_csv('submit.csv',index=False)","65b30723":"preds","4c38ad1c":"## Insights\n1. check corelation target with the features\n2. check features are skewed with 0 values even >90%, that means feature selection will be necessary.\n3. how are features left\/right skewed \n4. Outlier Detection and removal will also be handy to improve score.\n5. No correlation means that there are some unnecessary features.\n6. try feature engineering by trying feature interaction or ratio and increase corelation.","d083ecd5":"# H2o AutoMl","96bd77ac":"fill in target,  id"}}