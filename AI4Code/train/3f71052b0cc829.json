{"cell_type":{"2e6beabf":"code","d34143e3":"code","1685ea2f":"code","970029d3":"code","e02aa946":"code","7efbfd3a":"code","3869b57b":"code","cb70db9d":"code","b8dd742e":"code","fa67f746":"code","75bf356a":"code","3aaec7fa":"code","01aec013":"code","2a5e06bc":"code","742df178":"code","8e53f198":"code","55cc1ac0":"code","f9b60651":"code","de5ab603":"markdown"},"source":{"2e6beabf":"df = pd.read_csv('..\/input\/netflix-movie-rating-dataset\/Netflix_Dataset_Rating.csv')\ndf.head()","d34143e3":"df_title = pd.read_csv('..\/input\/netflix-movie-rating-dataset\/Netflix_Dataset_Movie.csv')\ndf_title","1685ea2f":"no_of_rated_products_per_users = df.groupby(by='User_ID')['Rating'].count().sort_values(ascending=False)\nno_of_rated_products_per_users.head(30)","970029d3":"quantiles = no_of_rated_products_per_users.quantile(np.arange(0,1.01,0.01), interpolation='higher')\n\nplt.figure(figsize=(10,10))\nplt.title(\"Quantiles and their Values\")\nquantiles.plot()\nplt.scatter(x=quantiles.index[::5], y=quantiles.values[::5], c='orange', label=\"quantiles with 0.05 intervals\")\nplt.scatter(x=quantiles.index[::25], y=quantiles.values[::25], c='m', label = \"quantiles with 0.25 intervals\")\nplt.ylabel('No of ratings given by user')\nplt.xlabel('Value at the quantile')\nplt.legend(loc='best')\nplt.show()","e02aa946":"no_of_rated_products_per_movies = df.groupby(by='Movie_ID')['Rating'].count().sort_values(ascending=False)\nno_of_rated_products_per_movies.head()","7efbfd3a":"quantiles = no_of_rated_products_per_movies.quantile(np.arange(0,1.01,0.01), interpolation='higher')\n\nplt.figure(figsize=(10,10))\nplt.title(\"Quantiles and their Values\")\nquantiles.plot()\nplt.scatter(x=quantiles.index[::5], y=quantiles.values[::5], c='orange', label=\"quantiles with 0.05 intervals\")\nplt.scatter(x=quantiles.index[::25], y=quantiles.values[::25], c='m', label = \"quantiles with 0.25 intervals\")\nplt.ylabel('No of ratings given to movies')\nplt.xlabel('Value at the quantile')\nplt.legend(loc='best')\nplt.show()","3869b57b":"f = ['count','mean']\ndf_movie_summary = df.groupby('Movie_ID')['Rating'].agg(f)\ndf_movie_summary.index = df_movie_summary.index.map(int)\nmovie_benchmark = round(df_movie_summary['count'].quantile(0.7),0)\ndrop_movie_list = df_movie_summary[df_movie_summary['count'] < movie_benchmark].index\n\ndf__title = df_title.set_index('Movie_ID')","cb70db9d":"data = df['Rating'].value_counts()\n\ntrace = go.Bar(x = data.index,y = data.values,text = ['{:.1f} %'.format(val) for val in (data.values \/ df.shape[0] * 100)],textposition = 'auto')\n\nlayout = dict(title = 'Distribution of {} Movie-ratings'.format(df.shape[0]), xaxis = dict(title = 'Rating'), yaxis = dict(title = 'Movies'))\n\nfig = go.Figure(data=[trace], layout=layout)\n\niplot(fig)","b8dd742e":"data = df_title['Year'].value_counts()\n\ntrace = go.Bar(x = data.index,y = data.values,text = ['{:.1f} %'.format(val) for val in (data.values \/ df_title.shape[0] * 100)],textposition = 'auto')\n\nlayout = dict(title = 'Distribution of {} Movie - Year-wise'.format(df.shape[0]), xaxis = dict(title = 'Year'), yaxis = dict(title = 'Movies'))\n\nfig = go.Figure(data=[trace], layout=layout)\n\niplot(fig)","fa67f746":"df_2004 = df_title[df_title['Year']==2004]\ndf_2004 = df_2004.merge(df,on='Movie_ID')\n\ndata = df_2004['Rating'].value_counts()\n\ntrace = go.Bar(x = data.index,y = data.values,text = ['{:.1f} %'.format(val) for val in (data.values \/ df_2004.shape[0] * 100)],textposition = 'auto')\n\nlayout = dict(title = 'Distribution of {} Movie-ratings released in 2004'.format(df.shape[0]), xaxis = dict(title = 'Rating'), yaxis = dict(title = 'Movies'))\n\nfig = go.Figure(data=[trace], layout=layout)\n\niplot(fig)","75bf356a":"df_max_ratings = df_movie_summary[df_movie_summary['count']==df_movie_summary['count'].max()]\n\nreq_MID = df_max_ratings.index[0]\ndf_max_ratings = df[df['Movie_ID'] ==req_MID]\n\nMovie_name_max_raings = df_title['Name'][df_title['Movie_ID']==req_MID].to_string(index=False)\n\ndata = df_max_ratings['Rating'].value_counts()\n\ntrace = go.Bar(x = data.index,y = data.values,text = ['{:.1f} %'.format(val) for val in (data.values \/ df_max_ratings.shape[0] * 100)],textposition = 'auto')\n\nlayout = dict(title = 'Distribution of Most Rated Movie -'+Movie_name_max_raings+ ' Movie-Ratings')\n\nfig = go.Figure(data=[trace], layout=layout)\n\niplot(fig)","3aaec7fa":"model = SVD(n_epochs=10,verbose = True)\n\ndata = Dataset.load_from_df(df[['User_ID', 'Movie_ID', 'Rating']], Reader())\n\ntrainset, testset = train_test_split(data, test_size=0.3,random_state=10)\n\ntrainset = data.build_full_trainset()\n\nmodel.fit(trainset)","01aec013":"predictions = model.test(testset)\n\naccuracy.rmse(predictions, verbose=True)","2a5e06bc":"def Recommendation(given_user_id,n_movies):\n    given_user = df_title.copy()\n    given_user = given_user.reset_index()\n    given_user = given_user[~given_user['Movie_ID'].isin(drop_movie_list)]\n\n\n    given_user['Estimated_Rating'] = given_user['Movie_ID'].apply(lambda x: model.predict(given_user_id, x).est)\n\n    given_user = given_user.drop('Movie_ID', axis = 1)\n\n    given_user = given_user.sort_values('Estimated_Rating', ascending=False)\n    given_user.drop(['index'], axis = 1,inplace=True)\n    given_user.reset_index(inplace=True,drop=True)\n    return given_user.head(n_movies)","742df178":"Recommendation(712664,10)","8e53f198":"df_p = pd.pivot_table(df,values='Rating',index='User_ID',columns='Movie_ID')\n\ndef Recommend_based_on_movie(movie_title, min_count):\n    i = int(df__title.index[df__title['Name'] == movie_title][0])\n    target = df_p[i]\n    similar_to_target = df_p.corrwith(target)\n    corr_target = pd.DataFrame(similar_to_target, columns = ['PearsonR'])\n    corr_target.dropna(inplace = True)\n    corr_target = corr_target.sort_values('PearsonR', ascending = False)\n    corr_target.index = corr_target.index.map(int)\n    corr_target = corr_target.join(df__title).join(df_movie_summary)[['PearsonR', 'Name', 'count', 'mean']]\n    corr_target = corr_target[corr_target['count']>min_count][:10]\n    corr_target.reset_index(drop=True,inplace=True)\n    return corr_target","55cc1ac0":"Recommend_based_on_movie(\"The Education of Little Tree\", 0)","f9b60651":"Recommend_based_on_movie(\"Character\", 0)","de5ab603":"\n\n# Libraraies Discription : \n**1. surprise**\n\n**Surprise is a Python scikit for building and analyzing recommender systems that deal with explicit rating data.**\nSurprise was designed with the **following purposes** in mind:\n* Give users perfect control over their experiments. To this end, a strong emphasis is laid on documentation, which we have tried to make as clear and precise as possible by pointing out every detail of the algorithms.\n* Alleviate the pain of Dataset handling. Users can use both built-in datasets (Movielens, Jester), and their own custom datasets.\n* Provide various ready-to-use prediction algorithms such as baseline algorithms, neighborhood methods, matrix factorization-based ( SVD, PMF, SVD++, NMF), and many others. Also, various similarity measures (cosine, MSD, pearson\u2026) are built-in.\n* Make it easy to implement new algorithm ideas.\n* Provide tools to evaluate, analyse and compare the algorithms\u2019 performance. Cross-validation procedures can be run very easily using powerful CV iterators (inspired by scikit-learn excellent tools), as well as exhaustive search over a set of parameters.\n\n**2. Plotly**\n* Plotly's Python graphing library makes interactive, publication-quality graphs. Examples of how to make line plots, scatter plots, area charts, bar charts, error bars, box plots, histograms, heatmaps, subplots, multiple-axes, polar charts, and bubble charts."}}