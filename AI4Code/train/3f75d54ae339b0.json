{"cell_type":{"da565c4b":"code","72649e69":"code","df2ca54e":"code","7402e3fa":"code","52cf64ec":"code","b04a2b5b":"code","1d934072":"code","879c92ba":"code","f8abe663":"code","f08a68a4":"code","08678a70":"code","6df1d8e7":"code","3783b83d":"markdown","cd25e3b0":"markdown","6df41dea":"markdown","9c55f40c":"markdown","bd473f1a":"markdown","b40caea2":"markdown","8bc3873c":"markdown","eb5d8415":"markdown"},"source":{"da565c4b":"import pandas as pd\nimport numpy as np\nimport matplotlib.pylab as plt\nimport seaborn as sns\nimport sklearn\nfrom itertools import cycle\n\nplt.style.use(\"ggplot\")\ncolor_pal = plt.rcParams[\"axes.prop_cycle\"].by_key()[\"color\"]\ncolor_cycle = cycle(plt.rcParams[\"axes.prop_cycle\"].by_key()[\"color\"])","72649e69":"train = pd.read_parquet('..\/input\/kaggle-pog-series-s01e01\/\/train.parquet')\ntest = pd.read_parquet('..\/input\/kaggle-pog-series-s01e01\/\/test.parquet')\nss = pd.read_csv('..\/input\/kaggle-pog-series-s01e01\/sample_submission.csv')","df2ca54e":"train.shape, test.shape, ss.shape","7402e3fa":"ss.head()","52cf64ec":"# Category Mapping Names\ncategory_id_map = {\n    1: \"Film & Animation\",\n    2: \"Autos & Vehicles\",\n    10: \"Music\",\n    15: \"Pets & Animals\",\n    17: \"Sports\",\n    19: \"Travel & Events\",\n    20: \"Gaming\",\n    22: \"People & Blogs\",\n    23: \"Comedy\",\n    24: \"Entertainment\",\n    25: \"News & Politics\",\n    26: \"Howto & Style\",\n    27: \"Education\",\n    28: \"Science & Technology\",\n    29: \"Nonprofits & Activism\",\n}\n\ntrain['category_name'] = train['categoryId'].map(category_id_map)","b04a2b5b":"fig, axs = plt.subplots(5, 3, figsize=(15, 15), sharex=True)\naxs = axs.flatten()\nplt_idx = 0\nfor cat_id, d in train.groupby('categoryId'):\n    title = f'{cat_id}: {category_id_map[cat_id]} - target'\n    d['target'].apply(np.log1p) \\\n        .plot(kind='hist',\n              bins=100,\n              title=title,\n              ax=axs[plt_idx],\n              color=next(color_cycle)\n             )\n    plt_idx += 1\nplt.tight_layout()\nplt.show()","1d934072":"# Take average of categoryId in train\ncat_to_view = train.groupby(['categoryId'])['target'].mean().to_dict()\n\n# Predicted View Count\ntest['target'] = test['categoryId'].map(cat_to_view)\n# Save Our Submission\ntest[ss.columns].to_csv('submission.csv', index=False)","879c92ba":"top_video = train['video_id'].value_counts().index[0]\ntop_video_title = train.query('video_id == @top_video')['title'].values[0]\n\ntrain['trending_date'] = pd.to_datetime(train['trending_date'])\nax = train.query('video_id == @top_video').set_index('trending_date')['view_count'] \\\n    .plot(figsize=(12, 5), title=top_video_title, style='.-')\nax.set_ylabel('Video View Count')\nplt.show()","f8abe663":"train['isTrain'] = True\ntest['isTrain'] = False\ntt = pd.concat([train, test])\n\ntrain_occurance = tt.query('isTrain').groupby('video_id').size().to_dict()\ntest_occurance = tt.query('isTrain == False').groupby('video_id').size().to_dict()\n\ntt['train_occurance'] = tt['video_id'].map(train_occurance).fillna(0).astype('int')\ntt['test_occurance'] = tt['video_id'].map(test_occurance).fillna(0).astype('int')\ntt['isOverlap'] = (tt['train_occurance'] > 0) & (tt['test_occurance'] > 0)","f08a68a4":"# JfVOs4VSpmA <--- Example Video that is in train and test\ntt.query('video_id == \"JfVOs4VSpmA\"').set_index('trending_date') \\\n    .groupby('isTrain')['target'] \\\n    .plot(title='Video in Train and test', figsize=(12, 5), style='.-')\nplt.legend()\nplt.show()","08678a70":"tt['trending_date'] = pd.to_datetime(tt['trending_date'])\ntt = tt.sort_values('trending_date').reset_index(drop=True).copy()\n\ntrain_target = tt.query('isOverlap and isTrain') \\\n    .groupby('video_id')['target'].last().to_dict()\ntest['last_known_target'] = test['video_id'].map(train_target)\n# Post Process by imputing last known view count value\ntest['pp_target'] = test['last_known_target'] \\\n        .fillna(test['target']) \\\n    .astype('int')\n\ntest[['id','pp_target']] \\\n    .rename(columns={'pp_view_count':'view_count'}) \\\n    .to_csv('submission_pp_last_known.csv', index=False)","6df1d8e7":"train['isTrain'] = True\ntest['isTrain'] = False\ntt = pd.concat([train, test])\n\ntrain_occurance = tt.query('isTrain').groupby('video_id').size().to_dict()\ntest_occurance = tt.query('isTrain == False').groupby('video_id').size().to_dict()\n\ntt['train_occurance'] = tt['video_id'].map(train_occurance).fillna(0).astype('int')\ntt['test_occurance'] = tt['video_id'].map(test_occurance).fillna(0).astype('int')\ntt['isOverlap'] = (tt['train_occurance'] > 0) & (tt['test_occurance'] > 0)\n\n# JfVOs4VSpmA <--- Example Video that is in train and test\nax = tt.query('video_id == \"JfVOs4VSpmA\"').set_index('trending_date') \\\n    .groupby('isTrain')['target'] \\\n    .plot(title='Video in Train and test', figsize=(12, 5), style='.-')\n\ntt.query('video_id == \"JfVOs4VSpmA\"').set_index('trending_date') \\\n    ['pp_target'].plot(ax=ax[0], style='.-')\n\n\nplt.legend()\nplt.show()","3783b83d":"# Basic EDA of Training Data","cd25e3b0":"# Training\/Test Data (train.parquet\/test.parquet)\n- `id` - Unique Identifier for the row (combindation of video id and trending date)                      \n- `video_id` - Unique Identifier for the video\n- `title` - Title of the Video\n- `publishedAt` - Datetime the video was published\n- `channelId` - Id of the channel hosting the video\n- `channelTitle` - Title of the channel hosting the video\n- `categoryId` - Video category\n- `trending_date ` - Date on which we are predicting the view count\n- `tags` - Video Tags\n- `view_count` - **TARGET COLUMN** Number of views as of the trending date\n- `likes` - Number of likes as of the trending date **Not provided in the test set**\n- `dislikes` - Number of dislikes **Not provided in the test set**\n- `comment_count` Comment Count **Not provided in the test set**\n- `thumbnail_link` Link to the thumbnail of the video.\n- `comments_disabled` True\/False if comments are disabled.\n- `ratings_disabled` True\/False if ratings are disabled.\n- `duration_seconds` The duration of the video.\n- `has_thumbnail` True\/False if the thumbnail is available for the video.\n- `description` Video description","6df41dea":"# Baseline Submission\n\n- This submission basically takes the average view count for each category from the training set, and predicts that as the test set value.\n- Scores **2,495,658** on the Public Leaderboard","9c55f40c":"# Welcome to the Competition!\nThis is a test of kaggle's new platform. This baseline should help you get started.\n\nIn this competition you are tasked with predicting the ratio of `likes to view count` of youtube videos based titles, video metadata and thumbnails.","bd473f1a":"## Plotting the Target by Category","b40caea2":"# Sample Submission\nWe need to include the `id` column and are prediction for the `target` in out submission csv file.","8bc3873c":"# Improve Baseline with Overlapping videos\nSome videos are in both the train and test set. We can use that information to our advantage.","eb5d8415":"# Viz of Post Processing Technique"}}