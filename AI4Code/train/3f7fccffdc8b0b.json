{"cell_type":{"475b1e6a":"code","d6a0c4ad":"code","9aa4e972":"code","4438982a":"code","b1256df8":"code","788426e5":"code","3482d2f8":"code","203b25d9":"code","37610ed8":"code","e74501a4":"code","6c87cf5f":"code","bd5222b2":"code","faacd49f":"code","6516e8ea":"code","0bc91d76":"code","cad40cb9":"code","c5089050":"code","842fc485":"code","d1357537":"code","652e3ca7":"code","405e79cf":"code","03fa56ed":"code","819ab5a0":"code","0bb50531":"code","2e8529c8":"code","cb6ea3a1":"code","34485a72":"code","ef3a8042":"code","64bf6dce":"code","865ae7a5":"code","7655e7d6":"code","34ee62d3":"code","40e2bd2b":"code","8dfd561b":"code","d9a8f69a":"code","3c68a002":"markdown","7b2bb01e":"markdown","c1275e0f":"markdown","2a81039f":"markdown","9517ccd6":"markdown","27b62f00":"markdown","b7cbc5da":"markdown","fcef160f":"markdown","ad697626":"markdown","b8865b04":"markdown"},"source":{"475b1e6a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport cv2\nimport random\nfrom tqdm import tqdm\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import load_img,ImageDataGenerator\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d6a0c4ad":"os.listdir(\"..\/input\/brain-tumor-classification-mri\/Training\")","9aa4e972":"train_dir = \"..\/input\/brain-tumor-classification-mri\/Training\"\ntest_dir = \"..\/input\/brain-tumor-classification-mri\/Testing\"\nglioma = \"..\/input\/brain-tumor-classification-mri\/Training\/glioma_tumor\"\nmeningioma = \"..\/input\/brain-tumor-classification-mri\/Training\/meningioma_tumor\"\nno_tumour = \"..\/input\/brain-tumor-classification-mri\/Training\/no_tumor\"\npituitary = \"..\/input\/brain-tumor-classification-mri\/Training\/pituitary_tumor\"","4438982a":"#Visualization of Glioma and Meningioma Tumour\n\nplt.figure(figsize=(12,6))\ngli_samp = random.sample(os.listdir(glioma),5)\n\nfor i,image in enumerate(gli_samp):\n    path = os.path.join(glioma,image)\n    img = load_img(path,target_size=(150,150))\n    plt.subplot(1,5,i+1)\n    plt.imshow(img)\n    plt.xlabel(\"Glioma Tumor\")\n    plt.xticks([])\n    plt.yticks([])\n    \nplt.tight_layout();\n\nplt.figure(figsize=(12,6))\nmenin_samp = random.sample(os.listdir(meningioma),5)\n\nfor i,image in enumerate(menin_samp):\n    path = os.path.join(meningioma,image)\n    img = load_img(path,target_size=(150,150))\n    plt.subplot(1,5,i+1)\n    plt.imshow(img)\n    plt.xlabel(\"Meningioma Tumor\")\n    plt.xticks([])\n    plt.yticks([])\n    \nplt.tight_layout();","b1256df8":"#Visualization of No Tumour and Pituitary Tumour\n\nplt.figure(figsize=(12,6))\nno_samp = random.sample(os.listdir(no_tumour),5)\n\nfor i,image in enumerate(no_samp):\n    path = os.path.join(no_tumour,image)\n    img = load_img(path,target_size=(150,150))\n    plt.subplot(1,5,i+1)\n    plt.imshow(img)\n    plt.xlabel(\"No Tumor\")\n    plt.xticks([])\n    plt.yticks([])\n    \nplt.tight_layout();\n\nplt.figure(figsize=(12,6))\npit_samp = random.sample(os.listdir(pituitary),5)\n\nfor i,image in enumerate(pit_samp):\n    path = os.path.join(pituitary,image)\n    img = load_img(path,target_size=(150,150))\n    plt.subplot(1,5,i+1)\n    plt.imshow(img)\n    plt.xlabel(\"Pituitary Tumor\")\n    plt.xticks([])\n    plt.yticks([])\n    \nplt.tight_layout();","788426e5":"#Feeding Training Data to X_train and y_train\n\ntrain_dir = \"..\/input\/brain-tumor-classification-mri\/Training\"\ntest_dir = \"..\/input\/brain-tumor-classification-mri\/Testing\"\ntrain_glioma = \"..\/input\/brain-tumor-classification-mri\/Training\/glioma_tumor\"\ntrain_meningioma = \"..\/input\/brain-tumor-classification-mri\/Training\/meningioma_tumor\"\ntrain_no_tumour = \"..\/input\/brain-tumor-classification-mri\/Training\/no_tumor\"\ntrain_pituitary = \"..\/input\/brain-tumor-classification-mri\/Training\/pituitary_tumor\"\n\nX_train = []\ny_train = []\n\nfor i in tqdm(os.listdir(train_glioma)):\n    path = os.path.join(train_glioma,i)\n    img = cv2.imread(path)\n    img = cv2.resize(img,(224,224))\n    X_train.append(img)\n    y_train.append('Glioma')\n    \nfor i in tqdm(os.listdir(train_meningioma)):\n    path = os.path.join(train_meningioma,i)\n    img = cv2.imread(path)\n    img = cv2.resize(img,(224,224))\n    X_train.append(img)\n    y_train.append('Meningioma')\n    \nfor i in tqdm(os.listdir(train_no_tumour)):\n    path = os.path.join(train_no_tumour,i)\n    img = cv2.imread(path)\n    img = cv2.resize(img,(224,224))\n    X_train.append(img)\n    y_train.append('No_Tumour')   \n    \nfor i in tqdm(os.listdir(train_pituitary)):\n    path = os.path.join(train_pituitary,i)\n    img = cv2.imread(path)\n    img = cv2.resize(img,(224,224))\n    X_train.append(img)\n    y_train.append('Pituitary')    ","3482d2f8":"#Feeding Testing Data to X_train and y_train\n\ntrain_dir = \"..\/input\/brain-tumor-classification-mri\/Training\"\ntest_dir = \"..\/input\/brain-tumor-classification-mri\/Testing\"\ntest_glioma = \"..\/input\/brain-tumor-classification-mri\/Testing\/glioma_tumor\"\ntest_meningioma = \"..\/input\/brain-tumor-classification-mri\/Testing\/meningioma_tumor\"\ntest_no_tumour = \"..\/input\/brain-tumor-classification-mri\/Testing\/no_tumor\"\ntest_pituitary = \"..\/input\/brain-tumor-classification-mri\/Testing\/pituitary_tumor\"\n\nX_test = []\ny_test = []\n\nfor i in tqdm(os.listdir(test_glioma)):\n    path = os.path.join(test_glioma,i)\n    img = cv2.imread(path)\n    img = cv2.resize(img,(224,224))\n    X_test.append(img)\n    y_test.append('Glioma')\n    \nfor i in tqdm(os.listdir(test_meningioma)):\n    path = os.path.join(test_meningioma,i)\n    img = cv2.imread(path)\n    img = cv2.resize(img,(224,224))\n    X_test.append(img)\n    y_test.append('Meningioma')\n    \n\nfor i in tqdm(os.listdir(test_no_tumour)):\n    path = os.path.join(test_no_tumour,i)\n    img = cv2.imread(path)\n    img = cv2.resize(img,(224,224))\n    X_test.append(img)\n    y_test.append('No_Tumour') \n    \nfor i in tqdm(os.listdir(test_pituitary)):\n    path = os.path.join(test_pituitary,i)\n    img = cv2.imread(path)\n    img = cv2.resize(img,(224,224))\n    X_test.append(img)\n    y_test.append('Pituitary')    ","203b25d9":"X_train = np.array(X_train)\ny_train = np.array(y_train)\nX_train.shape,y_train.shape","37610ed8":"X_test = np.array(X_test)\ny_test = np.array(y_test)\nX_test.shape,y_test.shape","e74501a4":"import seaborn as sns\nplt.style.use(\"ggplot\")\nplt.figure(figsize=(9,5))\nsns.countplot(y_train)\nplt.show()","6c87cf5f":"import seaborn as sns\nplt.style.use(\"ggplot\")\nplt.figure(figsize=(9,5))\nsns.countplot(y_test)\nplt.show()","bd5222b2":"y_train","faacd49f":"from tensorflow.keras.utils import to_categorical\nfrom sklearn.preprocessing import LabelEncoder\n\nLE = LabelEncoder()\ny_train = LE.fit_transform(y_train)","6516e8ea":"y_train","0bc91d76":"y_test","cad40cb9":"from tensorflow.keras.utils import to_categorical\nfrom sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\ny_test = le.fit_transform(y_test)","c5089050":"y_test","842fc485":"unique,counts = np.unique(y_train,return_counts=True)\nprint(unique,counts)","d1357537":"unique1,counts1 = np.unique(y_test,return_counts=True)\nprint(unique1,counts1)","652e3ca7":"y_train = to_categorical(y_train)#num_classes = 4\ny_train.shape","405e79cf":"y_test = to_categorical(y_test)#num_classes = 4\ny_test.shape","03fa56ed":"img_size=224\ntrain_datagen = ImageDataGenerator(rotation_range=30,height_shift_range=0.2,\n                                  zoom_range = 0.3,horizontal_flip=True)#rescale=(1.\/255),\ntest_datagen = ImageDataGenerator()#rescale=(1.\/255)\n\ntrain_gen = train_datagen.flow_from_directory(directory = train_dir,target_size=(img_size,img_size),class_mode =\"categorical\",\n                                              batch_size=32)\ntest_gen = test_datagen.flow_from_directory(directory = test_dir,target_size=(img_size,img_size),class_mode =\"categorical\",\n                                              batch_size=32)","819ab5a0":"from tensorflow.keras.preprocessing import image\nsample_x,sample_y = next(train_gen)\nplt.figure(figsize=(12,9))\nfor i in range(6):\n    plt.subplot(2,3,i+1)\n    sample = image.array_to_img(sample_x[i])\n    plt.xlabel(np.argmax(sample_y[i]))\n    plt.imshow(sample)\nplt.show()","0bb50531":"from tensorflow.keras.applications.vgg19 import VGG19\nfrom tensorflow.keras.applications import EfficientNetB0\neffnet = EfficientNetB0(weights = \"imagenet\",include_top=False,input_shape=(img_size,img_size,3))","2e8529c8":"from tensorflow.keras import Sequential\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import Flatten,Dense,Conv2D,MaxPooling2D,Dropout,GlobalAveragePooling2D\n\nmodel = effnet.output\nmodel = GlobalAveragePooling2D()(model)\nmodel = Dropout(0.5)(model)\nmodel = Dense(4,activation = \"softmax\")(model)\n\nmodel = Model(inputs = effnet.input,outputs = model)\n\nmodel.summary()","cb6ea3a1":"from tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.callbacks import ModelCheckpoint,EarlyStopping,ReduceLROnPlateau\n\nmodel.compile(optimizer=Adam(lr=0.0001),loss=\"categorical_crossentropy\",metrics = [\"accuracy\"])\n\ncheckpoint = ModelCheckpoint(\"effnet.h5\",monitor=\"val_accuracy\",save_best_only=True,mode=\"auto\",verbose=1)\nearlystop = EarlyStopping(monitor=\"val_accuracy\",patience=5,mode=\"auto\",verbose=1)\nreduce_lr = ReduceLROnPlateau(monitor = 'val_accuracy', factor = 0.3, \n                              patience = 2, min_delta = 0.001, \n                              mode = 'auto', verbose = 1)","34485a72":"history = model.fit(X_train,y_train,epochs=15,validation_data = (X_test,y_test),verbose=1,\n                              callbacks=[checkpoint,reduce_lr])","ef3a8042":"val_loss,val_acc = model.evaluate(X_test,y_test)\nprint(f\"Validation Loss: {val_loss}\")\nprint(f\"Validation Accuracy: {val_acc}\")","64bf6dce":"plt.style.use(\"ggplot\")\nplt.figure(figsize=(12,6))\nepochs = range(1,16)\nplt.subplot(1,2,1)\nplt.plot(epochs,history.history[\"accuracy\"],'go-')\nplt.plot(epochs,history.history[\"val_accuracy\"],'ro-')\nplt.title(\"Model Accuracy\")\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Accuracy\")\nplt.legend(['Train','Val'],loc = \"upper left\")\n\nplt.subplot(1,2,2)\nplt.plot(epochs,history.history[\"loss\"],'go-')\nplt.plot(epochs,history.history[\"val_loss\"],'ro-')\nplt.title(\"Model Loss\")\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend(['Train','Val'],loc = \"upper left\")\n\nplt.show()","865ae7a5":"y_pred= model.predict(X_test)\ny_pred = np.argmax(y_pred,axis=1)\ny_pred[:15]","7655e7d6":"unique,counts = np.unique(y_pred,return_counts=True)\nprint(unique,counts)","34ee62d3":"y_test_new = np.argmax(y_test,axis=1)","40e2bd2b":"from sklearn.metrics import classification_report,confusion_matrix\n\nclf_report = classification_report(y_test_new,y_pred)\nprint(clf_report)","8dfd561b":"from sklearn.metrics import confusion_matrix\nfrom mlxtend.plotting import plot_confusion_matrix\n\ncm = confusion_matrix(y_test_new,y_pred)\nplot_confusion_matrix(conf_mat = cm,figsize=(8,7),class_names = ['Glioma',\n                                                                 'Meningioma','No_Tumour','Pituitary'],\n                      show_normed=True);","d9a8f69a":"plt.figure(figsize=(12,9))\nfor i in range(10):\n    sample_idx = random.choice(range(len(X_test)))\n    plt.subplot(2,5,i+1)\n    plt.imshow(X_test[sample_idx])\n    plt.xlabel(f\"Actual: {y_test_new[sample_idx]}\\n Predicted: {y_pred[sample_idx]}\")\n    \nplt.tight_layout()\nplt.show()","3c68a002":"# **Model Testing**","7b2bb01e":"# **Confusion Matrix**","c1275e0f":" #  **Converting to array form**","2a81039f":"# **Classification Report**","9517ccd6":"#  **Visualizing y_train and y_test count** ","27b62f00":"# **Changing target to Category**","b7cbc5da":"# **Modelling**","fcef160f":"# **Evaluation**","ad697626":"# **Getting Unique Counts**","b8865b04":"# **Applying Label Encoding**"}}