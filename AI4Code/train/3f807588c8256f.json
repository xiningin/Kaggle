{"cell_type":{"de60849d":"code","8d05db6a":"code","2888b2ad":"code","2cb22469":"code","cf6dd851":"code","689ca552":"code","94461930":"code","8600981b":"code","ad44b994":"code","15dcf7c3":"code","68343639":"code","0d3d5ca7":"code","d1394c94":"code","4bfeb641":"code","714556ed":"code","c316106c":"code","6512229b":"code","a0e648cf":"markdown","5409dbed":"markdown","72506f4d":"markdown"},"source":{"de60849d":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n#Ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')","8d05db6a":"df = pd.read_json('..\/input\/isnacoronanews\/data.json', encoding='utf8')\ndf.head()","2888b2ad":"df.isnull().sum()","2cb22469":"!pip install qalsadi","cf6dd851":"import qalsadi.lemmatizer","689ca552":"#Code by https:\/\/pypi.org\/project\/qalsadi\/\n\n#Developper: Taha Zerrouki: http:\/\/tahadz.com taha dot zerrouki at gmail dot com\n\ntext = u\"\"\"\u0647\u0644 \u062a\u062d\u062a\u0627\u062c \u0625\u0644\u0649 \u062a\u0631\u062c\u0645\u0629 \u0643\u064a \u062a\u0641\u0647\u0645 \u062e\u0637\u0627\u0628 \u0627\u0644\u0645\u0644\u0643\u061f \u0627\u0644\u0644\u063a\u0629 \"\u0627\u0644\u0643\u0644\u0627\u0633\u064a\u0643\u064a\u0629\" (\u0627\u0644\u0641\u0635\u062d\u0649) \u0645\u0648\u062c\u0648\u062f\u0629 \u0641\u064a \u0643\u0644 \u0627\u0644\u0644\u063a\u0627\u062a \u0648\u0643\u0630\u0644\u0643 \u0627\u0644\u0644\u063a\u0629 \"\u0627\u0644\u062f\u0627\u0631\u062c\u0629\" .. \u0627\u0644\u0641\u0631\u0646\u0633\u064a\u0629 \u0627\u0644\u062a\u064a \u0646\u062f\u0631\u0633 \u0641\u064a \u0627\u0644\u0645\u062f\u0631\u0633\u0629 \u0644\u064a\u0633\u062a \u0627\u0644\u0641\u0631\u0646\u0633\u064a\u0629 \u0627\u0644\u062a\u064a \u064a\u0633\u062a\u062e\u062f\u0645\u0647\u0627 \u0627\u0644\u0646\u0627\u0633 \u0641\u064a \u0634\u0648\u0627\u0631\u0639 \u0628\u0627\u0631\u064a\u0633 .. \u0648\u0645\u0644\u0643\u0629 \u0628\u0631\u064a\u0637\u0627\u0646\u064a\u0627 \u0644\u0627 \u062a\u062e\u0637\u0628 \u0628\u0644\u063a\u0629 \u0634\u0648\u0627\u0631\u0639 \u0644\u0646\u062f\u0646 .. \u0644\u0643\u0644 \u0645\u0642\u0627\u0645 \u0645\u0642\u0627\u0644\"\"\"\nlemmer = qalsadi.lemmatizer.Lemmatizer()\n# lemmatize a word\nlemmer.lemmatize(\"\u064a\u062d\u062a\u0627\u062c\")\n      \n# lemmatize a word with a specific pos\nlemmer.lemmatize(\"\u0648\u0641\u064a\")\n    \nlemmer.lemmatize(\"\u0648\u0641\u064a\", pos=\"v\")\n        \nlemmas = lemmer.lemmatize_text(text)\nprint(lemmas)\n['\u0647\u0644', '\u0627\u062d\u062a\u0627\u062c', '\u0625\u0644\u0649', '\u062a\u0631\u062c\u0645\u0629', '\u0643\u064a', '\u062a\u0641\u0647\u0645', '\u062e\u0637\u0627\u0628', '\u0645\u0644\u0643', '\u061f', '\u0644\u063a\u0629', '\"', '\u0643\u0644\u0627\u0633\u064a\u0643\u064a', '\"(', '\u0641\u0635\u062d\u0649', ')', '\u0645\u0648\u062c\u0648\u062f', '\u0641\u064a', '\u0643\u0644', '\u0644\u063a\u0629', '\u0630\u0644\u0643', '\u0644\u063a\u0629', '\"', '\u062f\u0627\u0631\u062c', '\"..', '\u0641\u0631\u0646\u0633\u064a', '\u0627\u0644\u062a\u064a', '\u062f\u0631\u0633', '\u0641\u064a', '\u0645\u062f\u0631\u0633\u0629', '\u0644\u064a\u0633\u062a', '\u0641\u0631\u0646\u0633\u064a', '\u0627\u0644\u062a\u064a', '\u0627\u0633\u062a\u062e\u062f\u0645', '\u0646\u0627\u0633', '\u0641\u064a', '\u0634\u0648\u0627\u0631\u0639', '\u0628\u0627\u0631\u064a\u0633', '..', '\u0645\u0644\u0643', '\u0628\u0631\u064a\u0637\u0627\u0646\u064a\u0627', '\u0644\u0627', '\u062e\u0637\u0628', '\u0628\u0644\u063a\u0629', '\u0634\u0648\u0627\u0631\u0639', '\u062f\u0646\u0648', '..', '\u0643\u0644', '\u0645\u0642\u0627\u0645', '\u0645\u0642\u0627\u0644\u064a']\n     # lemmatize a text and return lemma pos\nlemmas = lemmer.lemmatize_text(text, return_pos=True)\nprint(lemmas)\n[('\u0647\u0644', 'stopword'), ('\u0627\u062d\u062a\u0627\u062c', 'verb'), ('\u0625\u0644\u0649', 'stopword'), ('\u062a\u0631\u062c\u0645\u0629', 'noun'), ('\u0643\u064a', 'stopword'), ('\u062a\u0641\u0647\u0645', 'noun'), ('\u062e\u0637\u0627\u0628', 'noun'), ('\u0645\u0644\u0643', 'noun'), '\u061f', ('\u0644\u063a\u0629', 'noun'), '\"', ('\u0643\u0644\u0627\u0633\u064a\u0643\u064a', 'noun'), '\"(', ('\u0641\u0635\u062d\u0649', 'noun'), ')', ('\u0645\u0648\u062c\u0648\u062f', 'noun'), ('\u0641\u064a', 'stopword'), ('\u0643\u0644', 'stopword'), ('\u0644\u063a\u0629', 'noun'), ('\u0630\u0644\u0643', 'stopword'), ('\u0644\u063a\u0629', 'noun'), '\"', ('\u062f\u0627\u0631\u062c', 'noun'), '\"..', ('\u0641\u0631\u0646\u0633\u064a', 'noun'), ('\u0627\u0644\u062a\u064a', 'stopword'), ('\u062f\u0631\u0633', 'verb'), ('\u0641\u064a', 'stopword'), ('\u0645\u062f\u0631\u0633\u0629', 'noun'), ('\u0644\u064a\u0633\u062a', 'stopword'), ('\u0641\u0631\u0646\u0633\u064a', 'noun'), ('\u0627\u0644\u062a\u064a', 'stopword'), ('\u0627\u0633\u062a\u062e\u062f\u0645', 'verb'), ('\u0646\u0627\u0633', 'noun'), ('\u0641\u064a', 'stopword'), ('\u0634\u0648\u0627\u0631\u0639', 'noun'), ('\u0628\u0627\u0631\u064a\u0633', 'all'), '..', ('\u0645\u0644\u0643', 'noun'), ('\u0628\u0631\u064a\u0637\u0627\u0646\u064a\u0627', 'noun'), ('\u0644\u0627', 'stopword'), ('\u062e\u0637\u0628', 'verb'), ('\u0628\u0644\u063a\u0629', 'noun'), ('\u0634\u0648\u0627\u0631\u0639', 'noun'), ('\u062f\u0646\u0648', 'verb'), '..', ('\u0643\u0644', 'stopword'), ('\u0645\u0642\u0627\u0645', 'noun'), ('\u0645\u0642\u0627\u0644\u064a', 'noun')]","94461930":"#Code by https:\/\/pypi.org\/project\/qalsadi\/\n\n#Developper: Taha Zerrouki: http:\/\/tahadz.com taha dot zerrouki at gmail dot com\n\nfilename=\"..\/input\/isnacoronanews\/data.json\"\nimport qalsadi.analex as qa\ntry:\n    myfile=open(filename)\n    text=(myfile.read()).decode('utf8');\n\n    if text == None:\n        text=\"\u06f1\u06f3\u06f3\u06f0\u06f8 \u0627\u0628\u062a\u0644\u0627\u06cc \u062c\u062f\u06cc\u062f \u06a9\u0631\u0648\u0646\u0627 \u062f\u0631 \u06a9\u0634\u0648\u0631 \/ \u06f1\u06f6\u06f7 \u062a\u0646 \u062f\u06cc\u06af\u0631\"\nexcept:\n    text=u\"\u06f1\u06f3\u06f3\u06f0\u06f8 \u0627\u0628\u062a\u0644\u0627\u06cc \u062c\u062f\u06cc\u062f \u06a9\u0631\u0648\u0646\u0627 \u062f\u0631 \u06a9\u0634\u0648\u0631 \/ \u06f1\u06f6\u06f7 \u062a\u0646 \u062f\u06cc\u06af\u0631\"\n    print (\"\u06f1\u06f3\u06f3\u06f0\u06f8 \u0627\u0628\u062a\u0644\u0627\u06cc \u062c\u062f\u06cc\u062f \u06a9\u0631\u0648\u0646\u0627 \u062f\u0631 \u06a9\u0634\u0648\u0631 \/ \u06f1\u06f6\u06f7 \u062a\u0646 \u062f\u06cc\u06af\u0631\")\n\ndebug=False;\nlimit=500\nanalyzer = qa.Analex()\nanalyzer.set_debug(debug);\nresult = analyzer.check_text(text);\nprint ('----------------python format result-------')\nprint \nresult\nfor i in range(len(result)):\n#       print \"--------\u062a\u062d\u0644\u064a\u0644 \u0643\u0644\u0645\u0629  ------------\", word.encode('utf8');\n    print (\"\u06f1\u06f3\u06f3\u06f0\u06f8 \u0627\u0628\u062a\u0644\u0627\u06cc \u062c\u062f\u06cc\u062f \u06a9\u0631\u0648\u0646\u0627 \u062f\u0631 \u06a9\u0634\u0648\u0631 \/ \u06f1\u06f6\u06f7 \u062a\u0646 \u062f\u06cc\u06af\u0631\");\n    for analyzed in  result[i]:\n        print (\"\u06f1\u06f3\u06f3\u06f0\u06f8 \u0627\u0628\u062a\u0644\u0627\u06cc \u062c\u062f\u06cc\u062f \u06a9\u0631\u0648\u0646\u0627 \u062f\u0631 \u06a9\u0634\u0648\u0631 \/ \u06f1\u06f6\u06f7 \u062a\u0646 \u062f\u06cc\u06af\u0631\");\n        print ('repr analyzed');","8600981b":"!pip install arabic-reshaper","ad44b994":"import arabic_reshaper as arabic_reshaper\nfrom bidi.algorithm import get_display","15dcf7c3":"data=pd.read_json(r'..\/input\/isnacoronanews\/data.json')","68343639":"#Code by MAHMOUD MOHAMED ALY ABDALLAH JOBEEL  https:\/\/www.kaggle.com\/mahmoudjobeel\/data-analysis-of-egyptian-arabic-movies\n\ndef describe_column(colNames):\n    \n    fig, ax = plt.subplots()\n\n    # hide axes\n    fig.patch.set_visible(False)\n    ax.axis('off')\n    ax.axis('tight')\n\n    plt.subplots_adjust(left=0.5, top=0.4)\n    temp=[]\n    for i in data[colNames].describe().values:\n        if type(i)==str:\n            temp.append(get_display(arabic_reshaper.reshape(i)))\n        elif type(i)==np.float64:\n            temp.append(round(i, 3))\n        else:\n            temp.append(i)\n    df = pd.DataFrame(temp, columns=[get_display(arabic_reshaper.reshape(colNames))])\n\n    ax.table(cellText=df.values, colLabels=df.columns,rowLabels=data[colNames].describe().index ,loc='center')\n\n    fig.tight_layout()\n\n    plt.show()","0d3d5ca7":"#Code by MAHMOUD MOHAMED ALY ABDALLAH JOBEEL  https:\/\/www.kaggle.com\/mahmoudjobeel\/data-analysis-of-egyptian-arabic-movies\n\ndef describe_dataframe(df):\n    for colName in df.columns:\n        describe_column(colName)","d1394c94":"describe_column(\"title\")","4bfeb641":"describe_column(\"publish_datetime\")","714556ed":"describe_column(\"publish_day\")","c316106c":"describe_column(\"category\")","6512229b":"describe_column(\"tags\")","a0e648cf":"#Why tags outputs are so small. More data, tiny outputs? Have you any clue about that?\n\nI simply can NOT read it. ","5409dbed":"#Thanks to MAHMOUD MOHAMED ALY ABDALLAH JOBEEL https:\/\/www.kaggle.com\/mahmoudjobeel\/data-analysis-of-egyptian-arabic-movies\n\n#Thanks to Taha Zerrouki https:\/\/pypi.org\/project\/qalsadi\/\n\n#Developper: Taha Zerrouki: http:\/\/tahadz.com taha dot zerrouki at gmail dot com\n\n#Arman Malekzadeh Lashkaryani  @malekzadeharman for the ISNA-CoronaNews Dataset.\n\n#I'm so sorry, I don't know how to code and I don't understand persian\/arabic language too. Though I expect those that know it make publish Notebooks, so that we can learn from you and make our multicultural Kaggle community grow each day more and stronger.","72506f4d":"![](https:\/\/www.liftingcovered.com\/wp-content\/uploads\/2011\/07\/isna-logo.jpg)liftingcovered.com"}}