{"cell_type":{"2b701315":"code","65922a26":"markdown","047c98b5":"markdown","65500161":"markdown"},"source":{"2b701315":"train['first_value_u_in'] = train.groupby(['breath_id'])['u_in'].transform('first')\ntrain['last_value_u_in'] = train.groupby(['breath_id'])['u_in'].transform('last')\n\nfor i in range(1,11):\n    train[f'u_in_lag{i}'] = train.groupby('breath_id')['u_in'].shift(i)\ntrain = train.fillna(0)\nfor i in range(1,11):\n    train[f'u_in_lag{i}'] = train[f'u_in_lag{i}'].astype(np.float32)\nfor i in range(1,11):\n\n\nfor i in range(1,11):\n    train[f'u_out_lag{i}'] = train.groupby('breath_id')['u_out'].shift(i)\ntrain = train.fillna(0)\nfor i in range(1,11):\n    train[f'u_out_lag{i}'] = train[f'u_out_lag{i}'].astype(np.float32)\n\n# u_in_diff2to10\nfor i in range(1,11):\n    train[f'u_in_lag{i}'] = train.groupby('breath_id')['u_in'].shift(i)\ntrain = train.fillna(0)\nfor i in range(1,11):\n    train[f'u_in_lagdiff{i}'] = train['u_in'] - train[f'u_in_lag{i}']\n    train[f'u_in_lagdiff{i}'] = train[f'u_in_lagdiff{i}'].astype(np.float16)\n\nfor i in range(1,11):\n    test[f'u_in_lag{i}'] = test.groupby('breath_id')['u_in'].shift(i)\ntest = test.fillna(0)\nfor i in range(1,11):\n    test[f'u_in_lagdiff{i}'] = test['u_in'] - test[f'u_in_lag{i}']\n    test[f'u_in_lagdiff{i}'] = test[f'u_in_lagdiff{i}'].astype(np.float16)\n\n\nfor i in range(1,11):\n    train[f'u_in_lagback{-i}'] = train.groupby('breath_id')['u_in'].shift(-i)\ntrain = train.fillna(0)\nfor i in range(1,11):\n    train[f'u_in_lagback{-i}'] = train[f'u_in_lagback{-i}'].astype(np.float16)\n\nfor i in range(1,11):\n    test[f'u_in_lagback{-i}'] = test.groupby('breath_id')['u_in'].shift(-i)\ntest = test.fillna(0)\nfor i in range(1,11):\n    test[f'u_in_lagback{-i}'] = test[f'u_in_lagback{-i}'].astype(np.float16)\n\nfor i in range(1,11):\n    train[f'u_in_lagback{-i}'] = train.groupby('breath_id')['u_in'].shift(-i)\ntrain = train.fillna(0)\nfor i in range(1,11):\n    train[f'u_in_lagbackdiff{-i}'] = train['u_in'] - train[f'u_in_lagback{-i}']\n    train[f'u_in_lagbackdiff{-i}'] = train[f'u_in_lagbackdiff{-i}'].astype(np.int16)\nfor i in range(1,11):\n    test[f'u_in_lagback{-i}'] = test.groupby('breath_id')['u_in'].shift(-i)\ntest = test.fillna(0)\nfor i in range(1,11):\n    test[f'u_in_lagbackdiff{-i}'] = test['u_in'] - test[f'u_in_lagback{-i}']\n    test[f'u_in_lagbackdiff{-i}'] = test[f'u_in_lagbackdiff{-i}'].astype(np.int16)\n\n\ntmp=pd.DataFrame()\nfor j in [60,55,50,45,40,35,30,12,10,6]:\n    tmp[f'time_step_binning_{j}'] = pd.cut(train['time_step'],\n                    bins=j,\n                    labels=[i for i in range(1, j+1)],right=True)\n\ntmp=pd.DataFrame()\nfor j in [60,40,35,30,12,10]:\n    tmp[f'time_step_binning_{j}'] = pd.cut(train['time_step'],\n                    bins=j,\n                    labels=[i for i in range(1, j+1)],right=True)\n    tmp[f'time_step_binning_{j}'] = tmp[f'time_step_binning_{j}'].astype('int16')\n\ntmp = pd.get_dummies(train['C'], prefix='C_OHE')\ntmp = pd.get_dummies(train['R'], prefix='R_OHE')\n\ndef rename_multicol(df):\n    df_col=df.columns #\u5217\u540d\u3092\u30b3\u30d4\u30fc\n    df = df.T.reset_index(drop=False).T #\u4e00\u56de\u5217\u540d\u3092\u30ea\u30bb\u30c3\u30c8\n    for i in range(df.shape[1]): #\u5217\u540d\u3092\u65b0\u305f\u306b\u5b9a\u7fa9\n        rename_col = {i:\"_\".join(df_col[i])}\n        df = df.rename(columns = rename_col)     \n    df = df.drop([\"level_0\",\"level_1\"],axis=0)\n    return df\n\ntmp = train.groupby(['R','C']).agg({'pressure': ['min','max','mean','median','std']}).reset_index()\ntmp = rename_multicol(tmp)\ntmp = tmp.rename(columns={'R_': 'R', 'C_': 'C'})\n\ntrain = train.merge(tmp, how='inner',on=['R','C'])\ntest = test.merge(tmp, how='inner',on=['R','C'])\n\n\n\ntmp = train.groupby(['breath_id']).agg({'u_in': ['min','max','mean','median','std']}).reset_index()\ntmp = rename_multicol(tmp)\ntmp = tmp.rename(columns={'breath_id_': 'breath_id'})\ntrain = train.merge(tmp, how='inner',on=['breath_id'])\n\n\ntrain['breath_id_u_in_diffmax'] = train.groupby(['breath_id'])['u_in'].transform('max') - train['u_in']\ntrain['breath_id_u_in_diffmean'] = train.groupby(['breath_id'])['u_in'].transform('mean') - train['u_in']\ntrain['breath_id_u_in_diffmedian'] = train.groupby(['breath_id'])['u_in'].transform('median') - train['u_in']\ntrain['breath_id_u_out_u_in_min'] = train.groupby(['breath_id','u_out'])['u_in'].transform('min').astype(np.float32)\ntrain['breath_id_u_out_u_in_max'] = train.groupby(['breath_id','u_out'])['u_in'].transform('max').astype(np.float32)\ntrain['breath_id_u_out_u_in_mean'] = train.groupby(['breath_id','u_out'])['u_in'].transform('mean').astype(np.float32)\ntrain['breath_id_u_out_u_in_median'] = train.groupby(['breath_id','u_out'])['u_in'].transform('median').astype(np.float32)\ntrain['breath_id_u_out_u_in_std'] = train.groupby(['breath_id','u_out'])['u_in'].transform('std').astype(np.float32)\n\ntmp = pd.DataFrame()\ntmp['u_in_cumsum'] = train.groupby(['breath_id'])['u_in'].cumsum()\ntmp = pd.DataFrame()\ntmp['u_in_cumsum'] = test.groupby(['breath_id'])['u_in'].cumsum()\n\n\ntrain['one'] = 1\ntrain['count'] = (train['one']).groupby(train['breath_id']).cumsum()\ntrain['u_in_cumsum'] = train.groupby(['breath_id'])['u_in'].cumsum()\ntrain['u_in_cummean'] =train['u_in_cumsum'] \/train['count']\n\ntmp = pd.DataFrame()\ntmp['time_step_cumsum'] = train.groupby(['breath_id'])['time_step'].cumsum()\ntmp = pd.DataFrame()\ntmp['time_step_cumsum'] = test.groupby(['breath_id'])['time_step'].cumsum()\n\n\ntrain['cross']= train['u_in']*train['u_out']\ntrain['cross2']= train['time_step']*train['u_out']\n\ndef area(df):\n    df['area_u_in_u_out']= df['u_in']*df['u_out']\n    df['area_time_step_u_in'] = df['time_step'] * df['u_in']\n    df['area_time_step_u_incumsum'] = df.groupby('breath_id')['area_time_step_u_in'].cumsum()\n\n    for i in range(1,5):\n        df[f'u_in_lag{i}'] = df.groupby('breath_id')['u_in'].shift(i)\n    df = df.fillna(0)\n    for i in range(1,5):\n        df[f'u_in_lag{i}'] = df[f'u_in_lag{i}'].astype(np.float32)\n        df[f'u_in_lagdiff{i}'] = df['u_in'] - df[f'u_in_lag{i}']\n\n    for i in range(1,5):\n        df[f'time_step_lag{i}'] = df.groupby('breath_id')['time_step'].shift(i)\n    df = df.fillna(0)\n    for i in range(1,5):\n        df[f'time_step_lag{i}'] = df[f'time_step_lag{i}'].astype(np.float32)\n        df[f'time_step_lagdiff{i}'] = df['time_step'] - df[f'time_step_lag{i}']\n\n    for i in range(1,5):\n        df[f'area_time_steplagdiff_u_inlagdiff{i}'] = df[f'time_step_lagdiff{i}'] * df[f'u_in_lagdiff{i}']\n\n    return df\n\n\ndef breath_id_u_in_rolling10meanmedianmaxstd(df):\n    df['breath_id_u_in_rolling_10_mean'] = train.groupby(['breath_id'])['u_in'].transform(lambda x: x.rolling(10, 1).mean())\n    df['breath_id_u_in_rolling_10_median'] = train.groupby(['breath_id'])['u_in'].transform(lambda x: x.rolling(10, 1).median())\n    df['breath_id_u_in_rolling_10_max'] = train.groupby(['breath_id'])['u_in'].transform(lambda x: x.rolling(10, 1).max())\n    df['breath_id_u_in_rolling_10_std'] = train.groupby(['breath_id'])['u_in'].transform(lambda x: x.rolling(10, 1).std())\n    return df\n\ntrain = breath_id_u_in_rolling10meanmedianmaxstd(train)\ntrain = train.fillna(0)\ntest = breath_id_u_in_rolling10meanmedianmaxstd(test)\ntest = test.fillna(0)\n\ndef breath_id_u_in_expand_meanmaxstd(df):\n    df['breath_id_u_in_expand_mean'] = df.groupby('breath_id')['u_in'].expanding(2).mean().reset_index(level=0,drop=True)\n    # df['breath_id_u_in_expand_median'] = df.groupby('breath_id')['u_in'].expanding(2).median().reset_index(level=0,drop=True)\n    df['breath_id_u_in_expand_max'] = df.groupby('breath_id')['u_in'].expanding(2).max().reset_index(level=0,drop=True)\n    df['breath_id_u_in_expand_std'] = df.groupby('breath_id')['u_in'].expanding(2).std().reset_index(level=0,drop=True)\n    return df\n\ntrain = breath_id_u_in_expand_meanmaxstd(train)\ntrain = train.fillna(0)\ntest = breath_id_u_in_expand_meanmaxstd(test)\ntest = test.fillna(0)\n\n\ndef breath_id_u_in_ewm_u_in_meanstdcorr(df):\n    df['breath_id_u_in_ewm_u_in_mean'] = df.groupby('breath_id')['u_in'].ewm(halflife=10).mean().reset_index(level=0,drop=True)\n    df['breath_id_u_in_ewm_u_in_std'] = df.groupby('breath_id')['u_in'].ewm(halflife=10).std().reset_index(level=0,drop=True)\n    df['breath_id_u_in_ewm_u_in_corr'] = df.groupby('breath_id')['u_in'].ewm(halflife=10).corr().reset_index(level=0,drop=True)\n    return df\n\ntrain = breath_id_u_in_ewm_u_in_meanstdcorr(train)\ntest = breath_id_u_in_ewm_u_in_meanstdcorr(test)\ntrain = train.fillna(0)\ntest = test.fillna(0)\n\n\ndef breath_id_u_in_ewm_u_in_meanstd001to09(df):\n    df['breath_id_u_in_ewm_u_in_mean'] = df.groupby('breath_id')['u_in'].ewm(halflife=10).mean().reset_index(level=0,drop=True)\n    df['breath_id_u_in_ewm_u_in_mean0.01'] = df.groupby('breath_id')['u_in'].ewm(alpha=0.01,min_periods=2,adjust=False).mean().reset_index(level=0,drop=True)\n    df['breath_id_u_in_ewm_u_in_mean0.05'] = df.groupby('breath_id')['u_in'].ewm(alpha=0.05,min_periods=2,adjust=False).mean().reset_index(level=0,drop=True)\n    df['breath_id_u_in_ewm_u_in_mean0.1'] = df.groupby('breath_id')['u_in'].ewm(alpha=0.1,min_periods=2,adjust=False).mean().reset_index(level=0,drop=True)\n    df['breath_id_u_in_ewm_u_in_mean0.2'] = df.groupby('breath_id')['u_in'].ewm(alpha=0.2,min_periods=2,adjust=False).mean().reset_index(level=0,drop=True)\n    df['breath_id_u_in_ewm_u_in_mean0.3'] = df.groupby('breath_id')['u_in'].ewm(alpha=0.3,min_periods=2,adjust=False).mean().reset_index(level=0,drop=True)\n    df['breath_id_u_in_ewm_u_in_mean0.4'] = df.groupby('breath_id')['u_in'].ewm(alpha=0.4,min_periods=2,adjust=False).mean().reset_index(level=0,drop=True)\n    df['breath_id_u_in_ewm_u_in_mean0.5'] = df.groupby('breath_id')['u_in'].ewm(alpha=0.5,min_periods=2,adjust=False).mean().reset_index(level=0,drop=True)\n    df['breath_id_u_in_ewm_u_in_mean0.6'] = df.groupby('breath_id')['u_in'].ewm(alpha=0.6,min_periods=2,adjust=False).mean().reset_index(level=0,drop=True)\n    df['breath_id_u_in_ewm_u_in_mean0.7'] = df.groupby('breath_id')['u_in'].ewm(alpha=0.7,min_periods=2,adjust=False).mean().reset_index(level=0,drop=True)\n    df['breath_id_u_in_ewm_u_in_mean0.8'] = df.groupby('breath_id')['u_in'].ewm(alpha=0.8,min_periods=2,adjust=False).mean().reset_index(level=0,drop=True)\n\n    df['breath_id_u_in_ewm_u_in_std0.01'] = df.groupby('breath_id')['u_in'].ewm(alpha=0.01,min_periods=2,adjust=False).std().reset_index(level=0,drop=True)\n    df['breath_id_u_in_ewm_u_in_std0.05'] = df.groupby('breath_id')['u_in'].ewm(alpha=0.05,min_periods=2,adjust=False).std().reset_index(level=0,drop=True)\n    df['breath_id_u_in_ewm_u_in_std0.1'] = df.groupby('breath_id')['u_in'].ewm(alpha=0.1,min_periods=2,adjust=False).std().reset_index(level=0,drop=True)\n    df['breath_id_u_in_ewm_u_in_std0.2'] = df.groupby('breath_id')['u_in'].ewm(alpha=0.2,min_periods=2,adjust=False).std().reset_index(level=0,drop=True)\n    df['breath_id_u_in_ewm_u_in_std0.3'] = df.groupby('breath_id')['u_in'].ewm(alpha=0.3,min_periods=2,adjust=False).std().reset_index(level=0,drop=True)\n    df['breath_id_u_in_ewm_u_in_std0.4'] = df.groupby('breath_id')['u_in'].ewm(alpha=0.4,min_periods=2,adjust=False).std().reset_index(level=0,drop=True)\n    df['breath_id_u_in_ewm_u_in_std0.5'] = df.groupby('breath_id')['u_in'].ewm(alpha=0.5,min_periods=2,adjust=False).std().reset_index(level=0,drop=True)\n    df['breath_id_u_in_ewm_u_in_std0.6'] = df.groupby('breath_id')['u_in'].ewm(alpha=0.6,min_periods=2,adjust=False).std().reset_index(level=0,drop=True)\n    df['breath_id_u_in_ewm_u_in_std0.7'] = df.groupby('breath_id')['u_in'].ewm(alpha=0.7,min_periods=2,adjust=False).std().reset_index(level=0,drop=True)\n    df['breath_id_u_in_ewm_u_in_std0.8'] = df.groupby('breath_id')['u_in'].ewm(alpha=0.8,min_periods=2,adjust=False).std().reset_index(level=0,drop=True)\n    return df\n\ntrain = breath_id_u_in_ewm_u_in_meanstd001to09(train)\ntest = breath_id_u_in_ewm_u_in_meanstd001to09(test)\ntrain = train.fillna(0)\ntest = test.fillna(0)\n\ndef mktime_step_end(df):\n    df['time_step_end'] = df.groupby([\"breath_id\"])['time_step'].transform('last').astype(np.float32)\n    return df\n\ndef mk_sign_and_vib(df):\n    for i in range(1,2):\n        df[f'u_in_lag{i}'] = df.groupby('breath_id')['u_in'].shift(i)\n    df = df.fillna(0)\n    for i in range(1,2):\n        df[f'u_in_lag{i}'] = df[f'u_in_lag{i}'].astype(np.float32)\n        df[f'u_in_lagdiff{i}'] = df['u_in'] - df[f'u_in_lag{i}']\n    first_df = df.loc[0::80,:]\n\n\n    df['u_out_diff'] = df['u_out'].diff()\n    df['u_out_diff'].fillna(0, inplace=True)\n    df['u_out_diff'].replace(-1, 0, inplace=True)\n    uout1_df = df[df['u_out_diff']==1]\n    first_0_dict = dict(zip(first_df['id'], [0]*len(uout1_df)))\n\n    df['diff_sign'] = np.sign(df['u_in_lagdiff1'])\n    df['sign_diff'] = df['diff_sign'].diff()\n    df['tmp'] = df['id'].map(first_0_dict)\n    df.iloc[0::80, df.columns.get_loc('sign_diff')] = df.iloc[0::80, df.columns.get_loc('tmp')]\n    df.drop(['tmp','u_out_diff'],axis=1,inplace=True)\n    del first_0_dict\n\n    df['sign_diff'] = abs(df['sign_diff']) \n    df['diff_vib'] = df.groupby(['breath_id'])['sign_diff'].transform('sum')\n\n    return df\n\ntrain = mk_sign_and_vib(train)\ntest = mk_sign_and_vib(test)\n\n\n\n# 1013\n\n# P alv = V \/ C RS + PEEP\n# P alv = u_in \/ C + PEEP\ndef p_alveolar(df):\n    df['u_in\/C'] = df['u_in']\/df['C']\n    df['peep'] = df.groupby(['breath_id'])['u_in'].transform(\"last\")\n    df['P_alv'] = df['u_in\/C'] + df['peep']\n    return df\ntrain = p_alveolar(train)\ntest = p_alveolar(test)\n\n\ndef p_plat(df):\n    df['Vt'] = df.groupby(['breath_id'])['u_in'].transform('sum') +1e-3\n    df['pip'] = df.groupby(['breath_id'])['u_in'].transform('max')\n    df['peep'] = df.groupby(['breath_id'])['u_in'].transform(\"last\")\n\n    # ###########################################################\n    # exhaled_VT\n    # VEXH\n    # tE \n    df['breath_id__u_in__lag1'] = df.groupby(['breath_id'])['u_in'].shift(1)\n    df = df.fillna(0)\n    df['u_in_lagdiff1'] = df['u_in'] - df['breath_id__u_in__lag1']\n    df['minus_u_in_lagdiff1'] = df['u_in_lagdiff1'] * -1\n\n    tmpdf = df.query('u_out==1')\n\n    exhaled_VT = tmpdf.groupby(['breath_id'])['u_in'].agg('max')-tmpdf.groupby(['breath_id'])['u_in'].agg('min')\n    exhaled_VT_dict = exhaled_VT.to_dict()\n    VEXH = tmpdf.groupby(['breath_id'])['minus_u_in_lagdiff1'].max() + 1e-3\n    VEXH_dict = VEXH.to_dict()\n\n    exhaled_VT = np.array(list(exhaled_VT_dict.values()))\n    VEXH = np.array(list(VEXH_dict.values()))\n    tE = exhaled_VT \/ VEXH\n    tE = pd.DataFrame(tE,index=VEXH_dict.keys())\n\n    df = pd.merge(df, tE, left_on=\"breath_id\", right_index=True)\n    df = df.rename(columns={0: 'tE'})\n    #################################################################################################\n    df['Pplat'] = ((df['Vt'] * df['pip'])-(df['Vt'] * df['peep']))  \/  (df['Vt'] + (df['tE'] * df['u_in']))\n\n    return df\n\ndef p_plat_escape0(df):\n    df['Vt'] = df.groupby(['breath_id'])['u_in'].transform('sum') +1e-3\n    df['pip'] = df.groupby(['breath_id'])['u_in'].transform('max')\n    df['peep'] = df.groupby(['breath_id'])['u_in'].transform(\"last\")\n\n    # ###########################################################\n    # exhaled_VT\n    # VEXH\n    # tE \n    df['breath_id__u_in__lag1'] = df.groupby(['breath_id'])['u_in'].shift(1)\n    df = df.fillna(0)\n    df['u_in_lagdiff1'] = df['u_in'] - df['breath_id__u_in__lag1']\n    df['minus_u_in_lagdiff1'] = df['u_in_lagdiff1'] * -1\n\n    tmpdf = df.query('u_out==1')\n\n    exhaled_VT = tmpdf.groupby(['breath_id'])['u_in'].agg('max')-tmpdf.groupby(['breath_id'])['u_in'].agg('min')\n    exhaled_VT_dict = exhaled_VT.to_dict()\n    VEXH = tmpdf.groupby(['breath_id'])['minus_u_in_lagdiff1'].max() + 1e-3\n    VEXH_dict = VEXH.to_dict()\n\n    exhaled_VT = np.array(list(exhaled_VT_dict.values()))\n    VEXH = np.array(list(VEXH_dict.values()))\n    tE = exhaled_VT \/ VEXH\n    tE = pd.DataFrame(tE,index=VEXH_dict.keys())\n\n    df = pd.merge(df, tE, left_on=\"breath_id\", right_index=True)\n    df = df.rename(columns={0: 'tE'})\n    #################################################################################################\n    df['Vt*pip'] = (df['Vt'] * df['pip'])\n    df['-(Vt-peep)'] = -(df['Vt'] * df['peep'])\n    df['Vt+(tE*Vi)'] = (df['Vt'] + (df['tE'] * df['u_in']))\n\n    return df\n\ntrain['u_in_lag1'] = train.groupby('breath_id')['u_in'].shift(1)\ntrain = train.fillna(0)\ntrain['u_in_lagdiff1'] = train['u_in'] - train['u_in_lag1']\ntrain['pressurediff'] = train.groupby('breath_id')['pressure'].diff(1)\ntrain = train.fillna(0)\ntrain['Pseudo_change'] = train['pressurediff']\/train['u_in_lagdiff1'] # \u5727\u529b\u306e\u5909\u5316\u306b\u5bfe\u3059\u308bu_iN\u306e\u5909\u5316\ntrain = train.fillna(0)\ntrain = train.replace({np.inf:0,-np.inf:0})\n\ndef rename_multicol(df):\n            df_col=df.columns #\u5217\u540d\u3092\u30b3\u30d4\u30fc\n            df = df.T.reset_index(drop=False).T #\u4e00\u56de\u5217\u540d\u3092\u30ea\u30bb\u30c3\u30c8\n            for i in range(df.shape[1]): #\u5217\u540d\u3092\u65b0\u305f\u306b\u5b9a\u7fa9\n                rename_col = {i:\"_\".join(df_col[i])}\n                df = df.rename(columns = rename_col)     \n            df = df.drop([\"level_0\",\"level_1\"],axis=0)\n            return df\n\ntmpc = train.groupby(['C']).agg({'Pseudo_change': ['min','max','mean','std']}).reset_index()\ntmp = rename_multicol(tmpc)\ntmp = tmp.rename(columns={'C_': 'C'})\ntrain = train.merge(tmp, how='inner',on=['C'])\ntrain = train.rename(\n    {\"Pseudo_change_min\":\"C_Pseudo_change_min\",\n        \"Pseudo_change_max\":\"C_Pseudo_change_max\",\n        \"Pseudo_change_mean\":\"C_Pseudo_change_mean\",\n        \"Pseudo_change_std\":\"C_Pseudo_change_std\"},axis=1)\n\ntmpr = train.groupby(['R']).agg({'Pseudo_change': ['min','max','mean','std']}).reset_index()\ntmp = rename_multicol(tmpr)\ntmp = tmp.rename(columns={'R_': 'R'})\ntrain = train.merge(tmp, how='inner',on=['R'])\ntrain = train.rename(\n    {\"Pseudo_change_min\":\"R_Pseudo_change_min\",\n        \"Pseudo_change_max\":\"R_Pseudo_change_max\",\n        \"Pseudo_change_mean\":\"R_Pseudo_change_mean\",\n        \"Pseudo_change_std\":\"R_Pseudo_change_std\"},axis=1)\n\n\ndef u_in_in_second(df):\n    df['u_in_lag1'] = df.groupby('breath_id')['u_in'].shift(1)\n    df = df.fillna(0)\n    df['u_in_lagdiff1'] = df['u_in'] - df['u_in_lag1']\n    df['u_in_lagdiff1'] = df['u_in_lagdiff1'].astype(np.float16)\n\n    df['time_step_lag1'] = df.groupby('breath_id')['time_step'].shift(1)\n    df = df.fillna(0)\n    df['time_step_lagdiff1'] = df['time_step'] - df['time_step_lag1']\n    df['time_step_lagdiff1'] = df['time_step_lagdiff1'].astype(np.float16)\n    df['u_in\/s'] = df['u_in_lagdiff1']\/df['time_step_lagdiff1']\n    df = df.fillna(0)\n    df = df.replace({np.inf:0,-np.inf:0})\n    return df\n\ndef peaknum(df):\n    user = df.breath_id.unique()\n    peaklist=[]\n    for i in tqdm(user):\n        df_ = df.query(f'breath_id == {i}')\n        ispeak = []\n        for j in range(0,80):\n            # print(np.max(df_['u_in'][:j+1].values)==df_['u_in'].values[j])\n            ispeak.append(np.max(df_['u_in'][:j+1].values)==df_['u_in'].values[j])\n        peaklist.extend(list(np.cumsum(ispeak)))\n    return peaklist\n\ndef differential_10(df):\n    window=15\n    from tqdm import tqdm\n    user = df.breath_id.unique()\n\n    window=10\n    list10 = []\n    for i in tqdm(user):\n        df_ = df.query(f'breath_id =={i}')\n        numrow = len(df_.query('u_out==0'))\n        tmp = np.zeros((80))\n        j=0\n        while j < 40:\n            tmp[j] = ((df_['u_in'].values[j+window]-df_['u_in'].values[j]))\n            # print((df_['u_in'].values[j+window],df_['u_in'].values[j]))\n            j+=1\n        tmp[numrow:]=0\n        list10.extend(list(tmp))\n\n    df['differential10'] = pd.DataFrame(list10)\n    return df\n\ntrain =  differential_10(train)\ntest =  differential_10(test)\n\n\n\ndef differential_10(df):\n    window=15\n    from tqdm import tqdm\n    user = df.breath_id.unique()\n\n    # df['differential15'] = pd.DataFrame(list15)\n    df['differential10'] = pd.DataFrame(list10)\n    # df['differential5'] = pd.DataFrame(list5)\n    return df\n\ndef rolling_2to10_summaxmean(df):\n    print('add features...')\n    df[[\"rolling_2_in_sum\",\"rolling_2_in_max\",\"rolling_2_in_mean\"]] = \\\n        (df.groupby('breath_id')['u_in'].rolling(window=2,min_periods=1)\\\n                                        .agg({\"rolling_2_in_sum\":\"sum\",\n                                            \"rolling_2_in_max\":\"max\",\n                                            \"rolling_2_in_mean\":\"mean\"})\\\n                                        .reset_index(level=0,drop=True))\n    df[[\"rolling_4_in_sum\",\"rolling_4_in_max\",\"rolling_4_in_mean\"]] = \\\n        (df.groupby('breath_id')['u_in'].rolling(window=4,min_periods=1)\\\n                                        .agg({\"rolling_4_in_sum\":\"sum\",\n                                            \"rolling_4_in_max\":\"max\",\n                                            \"rolling_4_in_mean\":\"mean\"})\\\n                                        .reset_index(level=0,drop=True))\n    df[[\"rolling_6_in_sum\",\"rolling_6_in_max\",\"rolling_6_in_mean\"]] = \\\n        (df.groupby('breath_id')['u_in'].rolling(window=6,min_periods=1)\\\n                                        .agg({\"rolling_6_in_sum\":\"sum\",\n                                            \"rolling_6_in_max\":\"max\",\n                                            \"rolling_6_in_mean\":\"mean\"})\\\n                                        .reset_index(level=0,drop=True))\n    df[[\"rolling_8_in_sum\",\"rolling_8_in_max\",\"rolling_8_in_mean\"]] = \\\n        (df.groupby('breath_id')['u_in'].rolling(window=8,min_periods=1)\\\n                                        .agg({\"rolling_8_in_sum\":\"sum\",\n                                            \"rolling_8_in_max\":\"max\",\n                                            \"rolling_8_in_mean\":\"mean\"})\\\n                                        .reset_index(level=0,drop=True))\n    df[[\"rolling_10_in_sum\",\"rolling_10_in_max\",\"rolling_10_in_mean\"]] = \\\n        (df.groupby('breath_id')['u_in'].rolling(window=10,min_periods=1)\\\n                                        .agg({\"rolling_10_in_sum\":\"sum\",\n\n                                            \"rolling_10_in_max\":\"max\",\n                                            \"rolling_10_in_mean\":\"mean\"})\\\n                                        .reset_index(level=0,drop=True))\n    print('add features finished')\n    return df\n\n\n# from https:\/\/www.kaggle.com\/lucasmorin\/spectral-analysis-feature-engineering\ndef ffts(df):\n    N = 80\n    w = blackman(N+1)\n    ffta = lambda x: np.abs(fft(np.append(x.values,x.values[0]))[:80])\n    ffta.__name__ = 'ffta'\n\n    fftw = lambda x: np.abs(fft(np.append(x.values,x.values[0])*w)[:80])\n    fftw.__name__ = 'fftw'\n\n    df['fft_u_in'] = df.groupby('breath_id')['u_in'].transform(ffta)\n    df['fft_u_in_w'] = df.groupby('breath_id')['u_in'].transform(fftw)\n    df['analytical'] = abs(df.groupby('breath_id')['u_in'].transform(hilbert))\n    df['envelope'] = np.abs(df['analytical'])\n    df['phase'] = np.angle(df['analytical'])\n    df['unwrapped_phase'] = df.groupby('breath_id')['phase'].transform(np.unwrap)\n    df['phase_shift1'] = df.groupby('breath_id')['unwrapped_phase'].shift(1).astype(np.float32)\n    df['IF'] = df['unwrapped_phase'] - df['phase_shift1'].astype(np.float32)\n    df = df.fillna(0)\n    return df","65922a26":"# Overview","047c98b5":"This is a notebook with over 100 features created in this competition. The cause of my failure was clear.  \n\u30fb In the first neural network competition, I stuck to feature engineering in anticipation of a score increase similar to that of lightgbm.  \n\u30fb I couldn't make a model. Obviously too complex models won't work, but transformers and simple lstm are on top.  \n\u30fb I couldn't fully understand control engineering. The mediocre and general feature I thought of was something that many could come up with, and the losses did not diminish and did not differentiate.  \n\nI hope you can learn from my mistakes and these features will help people who are learning feature engineering.Let's do our best next time.","65500161":"I learned from these notebooks. thank you very much!\n\nhttps:\/\/www.kaggle.com\/carlmcbrideellis\/ventilator-pressure-eda-and-simple-submission  \nhttps:\/\/www.kaggle.com\/marutama\/eda-about-u-in  \nhttps:\/\/www.kaggle.com\/lucasmorin\/u-in-mae-exploration-with-umap-hdbscan  \nhttps:\/\/www.kaggle.com\/lucasmorin\/time-series-agregation-functions  \nhttps:\/\/www.kaggle.com\/aerdem4\/google-ventilator-lofo-feature-importance  https:\/\/www.kaggle.com\/lucasmorin\/spectral-analysis-feature-engineering\n\n"}}