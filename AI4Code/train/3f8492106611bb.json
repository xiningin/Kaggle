{"cell_type":{"f7c0c736":"code","d60b9fc2":"code","cb7b0782":"code","5a374971":"code","ad124be6":"code","5e80123a":"code","674465ee":"code","b5cd8e44":"code","475ff1ad":"code","76c13d92":"code","ae04960b":"code","ac8c320a":"code","7dc699b8":"code","2032b0e0":"code","ef7665e3":"code","a78edc93":"code","a855f681":"code","5b60579d":"code","a39a5722":"code","16760f0c":"code","52c39a30":"code","8781561e":"code","ba384274":"code","681ae45f":"markdown"},"source":{"f7c0c736":"import lightgbm as lgb\nimport numpy as np\nimport pandas as pd\nimport random\nimport optuna\nfrom sklearn.model_selection import KFold, train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import mean_squared_error","d60b9fc2":"dataset = pd.read_csv(\"..\/input\/rice-type-classification\/riceClassification.csv\")\ndataset[0:5].T","cb7b0782":"Name0=dataset['Class'].unique()\nName=sorted(Name0)\nprint(Name)","5a374971":"n=len(dataset)\nN=[]\nfor i in range(n):\n    N+=[i]\nrandom.shuffle(N)","ad124be6":"train=dataset.loc[N[0:(n\/\/4)*3]]\ntest=dataset.loc[N[(n\/\/4)*3:]]","5e80123a":"target=train['Class']\ndata=train.drop(['Class','id'],axis=1)\ntesty=test['Class']","674465ee":"columns=data.columns.to_list()\nprint(columns)","b5cd8e44":"def objective(trial,data=data,target=target):\n    \n    train_x, test_x, train_y, test_y = train_test_split(data, target, test_size=0.2,random_state=42)\n    param =   {\n        'num_leaves': trial.suggest_int('num_leaves', 2, 256),\n        'objective': trial.suggest_categorical('objective',['regression','rmse','binary']),  \n        'max_depth': -1,\n        'learning_rate': 0.1,\n        \"boosting\": \"gbdt\",\n        'lambda_l1': trial.suggest_loguniform('lambda_l1', 1e-8, 10.0),\n        'lambda_l2': trial.suggest_loguniform('lambda_l2', 1e-8, 10.0),\n        \"bagging_freq\": 5,\n        \"bagging_fraction\": trial.suggest_uniform('bagging_fraction', 0.1, 1.0),\n        \"feature_fraction\": trial.suggest_uniform('feature_fraction', 0.4, 1.0),\n        \"verbosity\": -1,\n    }\n    model = lgb.LGBMClassifier(**param)      \n    model.fit(train_x,train_y,eval_set=[(test_x,test_y)],early_stopping_rounds=100,verbose=False)\n    preds = model.predict(test_x)\n    rmse = mean_squared_error(test_y, preds,squared=False)\n    \n    return rmse","475ff1ad":"study = optuna.create_study(direction='minimize')\nstudy.optimize(objective, n_trials=12)   ###\nprint('Number of finished trials:', len(study.trials))\nprint('Best trial:', study.best_trial.params)","76c13d92":"study.trials_dataframe()","ae04960b":"# shows the scores from all trials\noptuna.visualization.plot_optimization_history(study)","ac8c320a":"# interactively visualizes the hyperparameters and scores\noptuna.visualization.plot_parallel_coordinate(study)","7dc699b8":"# shows the evolution of the search\noptuna.visualization.plot_slice(study)","2032b0e0":"# parameter interactions on an interactive chart.\noptuna.visualization.plot_contour(study, params=['bagging_fraction','feature_fraction'])","ef7665e3":"# Visualize parameter importances.\noptuna.visualization.plot_param_importances(study)","a78edc93":"# Visualize empirical distribution function\noptuna.visualization.plot_edf(study)","a855f681":"Best_trial=study.best_trial.params\nprint(Best_trial)","5b60579d":"test[0:5].T","a39a5722":"test.shape","16760f0c":"preds = np.zeros((test.shape[0]))\nkf = KFold(n_splits=5,random_state=48,shuffle=True)\nfor trn_idx, test_idx in kf.split(train[columns],target):\n    X_tr,X_val=train[columns].iloc[trn_idx],train[columns].iloc[test_idx]\n    y_tr,y_val=target.iloc[trn_idx],target.iloc[test_idx]\n    model = lgb.LGBMClassifier(**Best_trial)\n    model.fit(X_tr,y_tr,eval_set=[(X_val,y_val)],early_stopping_rounds=100,verbose=False)\n    preds+=model.predict(test[columns])\/kf.n_splits   ###### predict_proba\n    rmse=mean_squared_error(y_val, model.predict(X_val),squared=False)\n    print(rmse)\n    print()","52c39a30":"PRED=list(preds.astype(int))\nprint(PRED[0:10])","8781561e":"ANS=list(testy)\nprint(ANS[0:10])","ba384274":"accuracy=accuracy_score(ANS,PRED)\nprint(accuracy)","681ae45f":"# LightGBM with Optuna tuning\n* doc: \nhttps:\/\/github.com\/optuna\/optuna"}}