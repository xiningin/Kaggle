{"cell_type":{"d99088ac":"code","4e11c229":"code","83ac7287":"code","9e21ef3a":"code","0a75fdb8":"code","fbaf7fb3":"code","3c20ace0":"code","2f2024b8":"code","344b6f9d":"code","3ca41884":"code","882d712b":"code","fa3e41cc":"code","7aed21ae":"code","24f6b490":"code","413d1e65":"code","260b2135":"code","d2dac731":"code","50d3cd58":"markdown","3e260d8e":"markdown","98240bdc":"markdown","ad599cf4":"markdown","b1e6d1bb":"markdown","2a1189cf":"markdown"},"source":{"d99088ac":"!pip install  efficientnet\n\nimport efficientnet.tfkeras as efn\nimport re, os, math\nimport numpy as np\n\nfrom kaggle_datasets import KaggleDatasets\nfrom matplotlib import pyplot as plt\n\nimport tensorflow as tf\nfrom tensorflow import keras\nimport tensorflow.keras.backend as K\nfrom tensorflow.keras.models import load_model\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.callbacks import LearningRateScheduler\nprint(\"Tensorflow version \" + tf.__version__)","4e11c229":"# This is basically -1\nAUTO = tf.data.experimental.AUTOTUNE\n\n# Cluster Resolver for Google Cloud TPUs.\ntpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n\n# Connects to the given cluster.\ntf.config.experimental_connect_to_cluster(tpu)\n\n# Initialize the TPU devices.\ntf.tpu.experimental.initialize_tpu_system(tpu)\n\n# TPU distribution strategy implementation.\nstrategy = tf.distribute.experimental.TPUStrategy(tpu)","83ac7287":"#set seed\n\nSEED = 42\ndef seed_everything(seed):\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    tf.random.set_seed(seed)\nseed_everything(SEED)","9e21ef3a":"# Configurations\nIMAGE_SIZE = [[512, 512]]\nEPOCHS = 30\nBATCH_SIZE = 32 * strategy.num_replicas_in_sync\nAUG_BATCH = BATCH_SIZE\nLEARNING_RATE = 1e-3\nTTA_NUM = 3\nRESUME_TRAINING = True\nprint(\"Batch size used: \", BATCH_SIZE)","0a75fdb8":"# As TPUs require access to the GCS path\nGCS_DS_PATH = KaggleDatasets().get_gcs_path('tpu-getting-started')\nMORE_IMAGES_GCS_DS_PATH = KaggleDatasets().get_gcs_path('tf-flower-photo-tfrec')\n\nGCS_PATH_SELECT = { 512: GCS_DS_PATH + '\/tfrecords-jpeg-512x512' }\nMOREIMAGES_PATH_SELECT = { 512: '\/tfrecords-jpeg-512x512' }\n","fbaf7fb3":"def decode_image(image_data, img_size):\n    image = tf.image.decode_jpeg(image_data, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0  # convert image to floats in [0, 1] range\n    image = tf.reshape(image, [*img_size, 3]) # explicit size needed for TPU\n    return image\n\ndef read_labeled_tfrecord(example, img_size):\n    LABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"class\": tf.io.FixedLenFeature([], tf.int64),  # shape [] means single element\n    }\n    example = tf.io.parse_single_example(example, LABELED_TFREC_FORMAT)\n    image = decode_image(example['image'], img_size)\n    label = tf.cast(example['class'], tf.int32)\n    return image, label # returns a dataset of (image, label) pairs\n\ndef read_unlabeled_tfrecord(example, img_size):\n    UNLABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"id\": tf.io.FixedLenFeature([], tf.string),  # shape [] means single element\n        # class is missing, this competitions's challenge is to predict flower classes for the test dataset\n    }\n    example = tf.io.parse_single_example(example, UNLABELED_TFREC_FORMAT)\n    image = decode_image(example['image'], img_size)\n    idnum = example['id']\n    return image, idnum # returns a dataset of image(s)\n\ndef data_augment(image, label, seed=SEED):\n    # data augmentation. Thanks to the dataset.prefetch(AUTO) statement in the next function (below),\n    # this happens essentially for free on TPU. Data pipeline code is executed on the \"CPU\" part\n    # of the TPU while the TPU itself is computing gradients.\n    image = tf.image.random_flip_left_right(image, seed=seed)\n    image = tf.image.random_brightness(image, 0.1, seed=seed)\n    image = tf.image.random_hue(image, 0.01)\n    image = tf.image.random_saturation(image, 0.7, 1.3)\n    image = tf.image.random_contrast(image, 0.8, 1.2)\n    image = tf.image.random_brightness(image, 0.1)\n    image = tf.image.random_saturation(image, 0, 2)\n    \n    return image, label   \n\ndef get_training_dataset(IMG_SIZE=None, do_aug=True, cutmixup=True, mataug=False):\n    dataset = load_dataset(TRAINING_FILENAMES, labeled=True, IMG_SIZE= IMG_SIZE)\n    if do_aug:\n        dataset = dataset.map(data_augment, num_parallel_calls=AUTO)\n    if mataug:\n        dataset = dataset.map(transform2, num_parallel_calls=AUTO)\n    dataset = dataset.repeat() # the training dataset must repeat for several epochs\n    if cutmixup: \n        dataset = dataset.batch(AUG_BATCH)\n        dataset = dataset.map(lambda image, label: transform(image, label, DIM=IMG_SIZE[0]), num_parallel_calls=AUTO)\n        dataset = dataset.unbatch()\n        dataset = dataset.shuffle(2048)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef get_validation_dataset(ordered=False, IMG_SIZE=None):\n    dataset = load_dataset(VALIDATION_FILENAMES, labeled=True, ordered=ordered, IMG_SIZE=IMG_SIZE)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.cache()\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef get_train_valid_datasets(IMG_SIZE=None):\n    dataset = load_dataset(TRAINING_FILENAMES + VALIDATION_FILENAMES, labeled=True, IMG_SIZE=IMG_SIZE)\n    dataset = dataset.map(data_augment, num_parallel_calls=AUTO)\n    dataset = dataset.repeat() # the training dataset must repeat for several epochs\n    dataset = dataset.shuffle(2048)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef get_test_dataset(ordered=False, IMG_SIZE=None):\n    dataset = load_dataset(TEST_FILENAMES, labeled=False, ordered=ordered, IMG_SIZE=IMG_SIZE)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef count_data_items(filenames):\n    # the number of data items is written in the name of the .tfrec files, i.e. flowers00-230.tfrec = 230 data items\n    n = [int(re.compile(r\"-([0-9]*)\\.\").search(filename).group(1)) for filename in filenames]\n    return np.sum(n)\n\ndef load_dataset(filenames, labeled=True, ordered=False, IMG_SIZE=None):\n    # Read from TFRecords. For optimal performance, reading from multiple files at once and\n    # disregarding data order. Order does not matter since we will be shuffling the data anyway.\n\n    ignore_order = tf.data.Options()\n    if not ordered:\n        ignore_order.experimental_deterministic = False # disable order, increase speed\n\n    dataset = tf.data.TFRecordDataset(filenames, num_parallel_reads=AUTO) # automatically interleaves reads from multiple files\n    dataset = dataset.with_options(ignore_order) # uses data as soon as it streams in, rather than in its original order\n    dataset = dataset.map(lambda example: read_labeled_tfrecord(example, IMG_SIZE) if labeled else \n                          read_unlabeled_tfrecord(example, IMG_SIZE), num_parallel_calls=AUTO)\n    # returns a dataset of (image, label) pairs if labeled=True or (image, id) pairs if labeled=False\n    return dataset\n\ndef plot_training(H):\n\t# construct a plot that plots and saves the training history\n\twith plt.xkcd():\n\t\tplt.figure()\n\t\tplt.plot(H.history[\"loss\"], label=\"train_loss\")\n\t\tplt.title(\"Training Loss\")\n\t\tplt.xlabel(\"Epoch #\")\n\t\tplt.ylabel(\"Loss\")\n\t\tplt.legend(loc=\"lower left\")\n\t\tplt.show()","3c20ace0":"# function to get train,val,test filenames according to img_size from gcs path\n\nGCS_PATH = GCS_PATH_SELECT[IMAGE_SIZE[0][0]]\nTRAINING_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/train\/*.tfrec')\nVALIDATION_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/val\/*.tfrec')\nTEST_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/test\/*.tfrec') # predictions on this dataset should be submitted for the competition\n\nMOREIMAGES_PATH = MOREIMAGES_PATH_SELECT[IMAGE_SIZE[0][0]]\nIMAGENET_FILES = tf.io.gfile.glob(MORE_IMAGES_GCS_DS_PATH + '\/imagenet' + MOREIMAGES_PATH + '\/*.tfrec')\nINATURELIST_FILES = tf.io.gfile.glob(MORE_IMAGES_GCS_DS_PATH + '\/inaturalist' + MOREIMAGES_PATH + '\/*.tfrec')\nOPENIMAGE_FILES = tf.io.gfile.glob(MORE_IMAGES_GCS_DS_PATH + '\/openimage' + MOREIMAGES_PATH + '\/*.tfrec')\n\nSKIP_VALIDATION = True\n\nif SKIP_VALIDATION:\n    TRAINING_FILENAMES = TRAINING_FILENAMES + VALIDATION_FILENAMES + IMAGENET_FILES + INATURELIST_FILES + OPENIMAGE_FILES\n\n# No of images in dataset\nNUM_TRAINING_IMAGES = count_data_items(TRAINING_FILENAMES)\nNUM_VALIDATION_IMAGES = count_data_items(VALIDATION_FILENAMES)\nNUM_TEST_IMAGES = count_data_items(TEST_FILENAMES)\nSTEPS_PER_EPOCH = (NUM_TRAINING_IMAGES + NUM_VALIDATION_IMAGES) \/\/ BATCH_SIZE\nprint('Dataset: {} training images, {} unlabeled test images'.format(NUM_TRAINING_IMAGES+NUM_VALIDATION_IMAGES, NUM_TEST_IMAGES))  ","2f2024b8":"# taken from https:\/\/www.kaggle.com\/cdeotte\/rotation-augmentation-gpu-tpu-0-96\n\ndef get_mat(rotation, shear, height_zoom, width_zoom, height_shift, width_shift):\n    # returns 3x3 transformmatrix which transforms indicies\n        \n    # CONVERT DEGREES TO RADIANS\n    rotation = math.pi * rotation \/ 180.\n    shear = math.pi * shear \/ 180.\n    \n    # ROTATION MATRIX\n    c1 = tf.math.cos(rotation)\n    s1 = tf.math.sin(rotation)\n    one = tf.constant([1],dtype='float32')\n    zero = tf.constant([0],dtype='float32')\n    rotation_matrix = tf.reshape( tf.concat([c1,s1,zero, -s1,c1,zero, zero,zero,one],axis=0),[3,3] )\n        \n    # SHEAR MATRIX\n    c2 = tf.math.cos(shear)\n    s2 = tf.math.sin(shear)\n    shear_matrix = tf.reshape( tf.concat([one,s2,zero, zero,c2,zero, zero,zero,one],axis=0),[3,3] )    \n    \n    # ZOOM MATRIX\n    zoom_matrix = tf.reshape( tf.concat([one\/height_zoom,zero,zero, zero,one\/width_zoom,zero, zero,zero,one],axis=0),[3,3] )\n    \n    # SHIFT MATRIX\n    shift_matrix = tf.reshape( tf.concat([one,zero,height_shift, zero,one,width_shift, zero,zero,one],axis=0),[3,3] )\n    \n    return K.dot(K.dot(rotation_matrix, shear_matrix), K.dot(zoom_matrix, shift_matrix))\n\ndef transform2(image, label, DIM = IMAGE_SIZE[0][0]):\n    # input image - is one image of size [dim,dim,3] not a batch of [b,dim,dim,3]\n    # output - image randomly rotated, sheared, zoomed, and shifted\n\n    XDIM = DIM % 2\n    \n    rot = 15. * tf.random.normal([1],dtype='float32')\n    shr = 5. * tf.random.normal([1],dtype='float32') \n    h_zoom = 1.0 + tf.random.normal([1],dtype='float32')\/10.\n    w_zoom = 1.0 + tf.random.normal([1],dtype='float32')\/10.\n    h_shift = 16. * tf.random.normal([1],dtype='float32') \n    w_shift = 16. * tf.random.normal([1],dtype='float32') \n  \n    # GET TRANSFORMATION MATRIX\n    m = get_mat(rot,shr,h_zoom,w_zoom,h_shift,w_shift) \n\n    # LIST DESTINATION PIXEL INDICES\n    x = tf.repeat( tf.range(DIM\/\/2,-DIM\/\/2,-1), DIM )\n    y = tf.tile( tf.range(-DIM\/\/2,DIM\/\/2),[DIM] )\n    z = tf.ones([DIM*DIM],dtype='int32')\n    idx = tf.stack( [x,y,z] )\n    \n    # ROTATE DESTINATION PIXELS ONTO ORIGIN PIXELS\n    idx2 = K.dot(m,tf.cast(idx,dtype='float32'))\n    idx2 = K.cast(idx2,dtype='int32')\n    idx2 = K.clip(idx2,-DIM\/\/2+XDIM+1,DIM\/\/2)\n    \n    # FIND ORIGIN PIXEL VALUES           \n    idx3 = tf.stack( [DIM\/\/2-idx2[0,], DIM\/\/2-1+idx2[1,]] )\n    d = tf.gather_nd(image,tf.transpose(idx3))\n        \n    return tf.reshape(d,[DIM,DIM,3]),label","344b6f9d":"# taken from https:\/\/www.kaggle.com\/tuckerarrants\/kfold-efficientnet-augmentations-s\n\ndef cutmix(image, label, PROBABILITY = 1.0, DIM = None):\n    # input image - is a batch of images of size [n,dim,dim,3] not a single image of [dim,dim,3]\n    # output - a batch of images with cutmix applied\n    CLASSES = 104\n    \n    imgs = []; labs = []\n    for j in range(AUG_BATCH):\n        # DO CUTMIX WITH PROBABILITY DEFINED ABOVE\n        P = tf.cast( tf.random.uniform([],0,1)<=PROBABILITY, tf.int32)\n        # CHOOSE RANDOM IMAGE TO CUTMIX WITH\n        k = tf.cast( tf.random.uniform([],0,AUG_BATCH),tf.int32)\n        # CHOOSE RANDOM LOCATION\n        x = tf.cast( tf.random.uniform([],0,DIM),tf.int32)\n        y = tf.cast( tf.random.uniform([],0,DIM),tf.int32)\n        b = tf.random.uniform([],0,1) # this is beta dist with alpha=1.0\n        WIDTH = tf.cast( DIM * tf.math.sqrt(1-b),tf.int32) * P\n        ya = tf.math.maximum(0,y-WIDTH\/\/2)\n        yb = tf.math.minimum(DIM,y+WIDTH\/\/2)\n        xa = tf.math.maximum(0,x-WIDTH\/\/2)\n        xb = tf.math.minimum(DIM,x+WIDTH\/\/2)\n        # MAKE CUTMIX IMAGE\n        one = image[j,ya:yb,0:xa,:]\n        two = image[k,ya:yb,xa:xb,:]\n        three = image[j,ya:yb,xb:DIM,:]\n        middle = tf.concat([one,two,three],axis=1)\n        img = tf.concat([image[j,0:ya,:,:],middle,image[j,yb:DIM,:,:]],axis=0)\n        imgs.append(img)\n        # MAKE CUTMIX LABEL\n        a = tf.cast(WIDTH*WIDTH\/DIM\/DIM,tf.float32)\n        if len(label.shape)==1:\n            lab1 = tf.one_hot(label[j],CLASSES)\n            lab2 = tf.one_hot(label[k],CLASSES)\n        else:\n            lab1 = label[j,]\n            lab2 = label[k,]\n        labs.append((1-a)*lab1 + a*lab2)\n            \n    # RESHAPE HACK SO TPU COMPILER KNOWS SHAPE OF OUTPUT TENSOR (maybe use Python typing instead?)\n    image2 = tf.reshape(tf.stack(imgs),(AUG_BATCH,DIM,DIM,3))\n    label2 = tf.reshape(tf.stack(labs),(AUG_BATCH,CLASSES))\n    return image2,label2","3ca41884":"def mixup(image, label, PROBABILITY = 1.0, DIM=None):\n    # input image - is a batch of images of size [n,dim,dim,3] not a single image of [dim,dim,3]\n    # output - a batch of images with mixup applied\n    CLASSES = 104\n    \n    imgs = []; labs = []\n    for j in range(AUG_BATCH):\n        # DO MIXUP WITH PROBABILITY DEFINED ABOVE\n        P = tf.cast( tf.random.uniform([],0,1)<=PROBABILITY, tf.float32)\n        # CHOOSE RANDOM\n        k = tf.cast( tf.random.uniform([],0,AUG_BATCH),tf.int32)\n        a = tf.random.uniform([],0,1)*P # this is beta dist with alpha=1.0\n        # MAKE MIXUP IMAGE\n        img1 = image[j,]\n        img2 = image[k,]\n        imgs.append((1-a)*img1 + a*img2)\n        # MAKE CUTMIX LABEL\n        if len(label.shape)==1:\n            lab1 = tf.one_hot(label[j],CLASSES)\n            lab2 = tf.one_hot(label[k],CLASSES)\n        else:\n            lab1 = label[j,]\n            lab2 = label[k,]\n        labs.append((1-a)*lab1 + a*lab2)\n            \n    # RESHAPE HACK SO TPU COMPILER KNOWS SHAPE OF OUTPUT TENSOR (maybe use Python typing instead?)\n    image2 = tf.reshape(tf.stack(imgs),(AUG_BATCH,DIM,DIM,3))\n    label2 = tf.reshape(tf.stack(labs),(AUG_BATCH,CLASSES))\n    return image2,label2","882d712b":"def transform(image,label, DIM=None):\n    # THIS FUNCTION APPLIES BOTH CUTMIX AND MIXUP\n    # DIM is image size eg 224\n    CLASSES = 104\n    SWITCH = 0.5\n    CUTMIX_PROB = 0.666\n    MIXUP_PROB = 0.666\n    # FOR SWITCH PERCENT OF TIME WE DO CUTMIX AND (1-SWITCH) WE DO MIXUP\n    image2, label2 = cutmix(image, label, CUTMIX_PROB, DIM)\n    image3, label3 = mixup(image, label, MIXUP_PROB, DIM)\n    imgs = []; labs = []\n    for j in range(AUG_BATCH):\n        P = tf.cast( tf.random.uniform([],0,1)<=SWITCH, tf.float32)\n        imgs.append(P*image2[j,]+(1-P)*image3[j,])\n        labs.append(P*label2[j,]+(1-P)*label3[j,])\n    # RESHAPE HACK SO TPU COMPILER KNOWS SHAPE OF OUTPUT TENSOR (maybe use Python typing instead?)\n    image4 = tf.reshape(tf.stack(imgs),(AUG_BATCH,DIM,DIM,3))\n    label4 = tf.reshape(tf.stack(labs),(AUG_BATCH,CLASSES))\n    return image4,label4","fa3e41cc":"# Using an LR ramp up because fine-tuning a pre-trained model.\n# Starting with a high LR would break the pre-trained weights.\n\nLR_START = 0.00001\nLR_MAX = 0.00005 * strategy.num_replicas_in_sync\nLR_MIN = 0.00001\nLR_RAMPUP_EPOCHS = 5\nLR_SUSTAIN_EPOCHS = 0\nLR_EXP_DECAY = .7\n\ndef lrfn(epoch):\n    if epoch < LR_RAMPUP_EPOCHS:\n        lr = (LR_MAX - LR_START) \/ LR_RAMPUP_EPOCHS * epoch + LR_START\n    elif epoch < LR_RAMPUP_EPOCHS + LR_SUSTAIN_EPOCHS:\n        lr = LR_MAX\n    else:\n        lr = (LR_MAX - LR_MIN) * LR_EXP_DECAY**(epoch - LR_RAMPUP_EPOCHS - LR_SUSTAIN_EPOCHS) + LR_MIN\n    return lr\n    \nlr_callback = tf.keras.callbacks.LearningRateScheduler(lrfn, verbose=True)\n\nrng = [i for i in range(EPOCHS)]\ny = [lrfn(x) for x in rng]\nplt.plot(rng, y)\nprint(\"Learning rate schedule: {:.3g} to {:.3g} to {:.3g}\".format(y[0], max(y), y[-1]))","7aed21ae":"def get_efficientnet():\n    with strategy.scope():\n        efficient = efn.EfficientNetB5(\n            input_shape = (IMAGE_SIZE[0][0], IMAGE_SIZE[0][1], 3),\n            weights = 'noisy-student', #or imagenet\n            include_top = False\n        )\n        #make trainable so we can fine-tune\n        efficient.trainable = True\n        model = tf.keras.Sequential([\n            efficient,\n            tf.keras.layers.GlobalAveragePooling2D(),\n            #tf.keras.layers.Dropout(0.2),\n            tf.keras.layers.Dense(104, activation = 'softmax',dtype = 'float32')\n        ])\n        model.compile(optimizer='adam', loss = 'categorical_crossentropy', metrics=['categorical_accuracy'])\n    return model","24f6b490":"%%time\n# loading previously trained model to resume training(for 10+ epoch)\n\nif RESUME_TRAINING:\n    with strategy.scope():\n        model1 = load_model('..\/input\/train-efficientnet\/Effnet_save.h5') \nelse:\n    model1 = get_efficientnet()\n    \nCheckpoint=tf.keras.callbacks.ModelCheckpoint(f\"Effnet_30ep.h5\", verbose=1, mode='max')\n\ntrain_history0 = model1.fit(\n    get_training_dataset(IMAGE_SIZE[0], mataug=True, cutmixup=True, do_aug=True), \n    steps_per_epoch=STEPS_PER_EPOCH,\n    epochs=EPOCHS,\n    initial_epoch=20,\n    callbacks=[lr_callback, Checkpoint],\n)","413d1e65":"plot_training(train_history0)","260b2135":"def predict(model, img_size, n_iter):\n    probs  = []\n    data = get_test_dataset(ordered=True, IMG_SIZE=img_size)\n    for i in range(n_iter):\n        # Add TTA\n        test_images_ds = data.map(lambda image, idnum: image)\n        probs.append(model.predict(test_images_ds,verbose=0))\n    return probs","d2dac731":"print('Calculating predictions...')\nprobs1 = np.mean(predict(model1, IMAGE_SIZE[0], TTA_NUM), axis=0)\npredictions = np.argmax(probs1, axis=-1)\n\nprint('Generating submission file...')\ntest_ds = get_test_dataset(ordered=True, IMG_SIZE=IMAGE_SIZE[0])\ntest_ids_ds = test_ds.map(lambda image, idnum: idnum).unbatch()\ntest_ids = next(iter(test_ids_ds.batch(NUM_TEST_IMAGES))).numpy().astype('U') # all in one batch\nnp.savetxt('submission.csv', np.rec.fromarrays([test_ids, predictions]), fmt=['%s', '%d'], delimiter=',', header='id,label', comments='')\n","50d3cd58":"Augumentations","3e260d8e":"Submission","98240bdc":"Training Efficient-net B5 model on 104-Flowers + Extra tf-flower-dataset [found here](https:\/\/www.kaggle.com\/kirillblinov\/tf-flower-photo-tfrec) on TPU with Tensorflow.\n\n**Common Settings**\n* Augumentations: Cutmix+Mixup, Rotation Auguments + Some Tf-image transformations.\n* 30 epochs, Batch_size 256, Image-size 512.\n* Lr-schedule: Cosine Annealing.\n\n**Previous Runs**\n\n* FirstRun For 10 Epochs, categorical_accuracy: 0.8287, loss: 0.9035, lb: 0.96407\n* SecondRun For 10 Epochs, categorical_accuracy: 0.8433, loss: 0.8195, lb: 0.96348\n* ThirdRun For 10 Epochs, Current....\n\nMany thanks to @cdeotte, @tuckerarrants and @atamazian for their valuable notebooks.","ad599cf4":"LR-Schedule","b1e6d1bb":"Cutmix+Mixup","2a1189cf":"Rotation, Shift, Zoom, Shear"}}