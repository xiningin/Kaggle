{"cell_type":{"df91196b":"code","9642c585":"code","1294c42d":"code","cfdbe9f9":"code","e6a5da22":"code","c6937916":"code","a13564c7":"code","d6b13477":"code","3f2b03bd":"code","63692c28":"code","22dc8654":"code","954ceb65":"code","e9c8ded8":"code","70f1d87d":"code","79bfe15d":"code","5c33d0d2":"code","d21a3280":"code","1b67a8b5":"code","0eae9c1a":"code","ce45a5bd":"code","700a56ce":"code","2855146f":"code","9c47cf50":"code","71b3e9cf":"code","d2ffa6f5":"code","e313f7e0":"code","5683c55a":"code","609e15d2":"code","2062d923":"code","c36fe1ab":"code","87832ab9":"markdown"},"source":{"df91196b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nnp.random.seed(2)\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\nsns.set(style='white', context='notebook', palette='deep')","9642c585":"train = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")","1294c42d":"Y_train = train[\"label\"]\n\nX_train = train.drop(labels=[\"label\"], axis = 1)\ndel train\n\nsns.countplot(Y_train)\nY_train.value_counts()","cfdbe9f9":"X_train.isnull().any().describe()","e6a5da22":"test.isnull().any().describe()","c6937916":"X_train\/=255.0\ntest\/=255.0","a13564c7":"X_train = X_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)","d6b13477":"Y_train = to_categorical(Y_train, num_classes = 10)","3f2b03bd":"random_seed = 2","63692c28":"X_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size=0.1, random_state = random_seed)","22dc8654":"plt.imshow(X_train[0][:,:,0])","954ceb65":"model = Sequential()\n\n#model.add(Conv2D(filters = 32, kernel_size = (5,5), padding = 'Same', activation = 'relu', input_shape = (28,28,1)))\n#model.add(Conv2D(filters = 32, kernel_size = (5,5), padding = 'Same', activation = 'relu'))\n#model.add(MaxPool2D(pool_size = (2,2)))\n#model.add(Dropout(0.25))\n\n#model.add(Conv2D(filters = 64, kernel_size = (3,3), padding = 'Same', activation = 'relu'))\n#model.add(Conv2D(filters = 64, kernel_size = (3,3), padding = 'Same', activation = 'relu'))\n#model.add(MaxPool2D(pool_size = (2,2), strides = (2,2)))\n#model.add(Dropout(0.25))\n\n#model.add(Flatten())\n#model.add(Dense(256, activation = 'relu'))\n#model.add(Dropout(0.5))\n\n#model.add(Dense(10, activation = 'softmax'))\n\n\n\n\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5), padding = 'Same', activation = 'relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5), padding = 'Same', activation = 'relu'))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5), padding = 'Same', activation = 'relu'))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5), padding = 'Same', activation = 'relu'))\nmodel.add(MaxPool2D(pool_size = (2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3), padding = 'Same', activation = 'relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3), padding = 'Same', activation = 'relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3), padding = 'Same', activation = 'relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3), padding = 'Same', activation = 'relu'))\nmodel.add(MaxPool2D(pool_size = (2,2), strides = (2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(512, activation = 'relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(256, activation = 'relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(126, activation = 'relu'))\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(10, activation = 'softmax'))","e9c8ded8":"optimizer = RMSprop(lr = 0.001, rho = 0.9, epsilon = 1e-08, decay = 0.0)\nmodel.compile(optimizer = optimizer, loss = 'categorical_crossentropy', metrics = ['accuracy'])","70f1d87d":"# For model Visualization\nfrom keras.utils import plot_model\nplot_model(model, to_file='model.png')\n\nfrom IPython.display import SVG\nfrom keras.utils import model_to_dot\nSVG(model_to_dot(model).create(prog='dot', format='svg'))","79bfe15d":"lr_reduction = ReduceLROnPlateau(monitor = 'val_acc', patience = 3, verbose = 1, factor = 0.5, min_lr = 0.00001)","5c33d0d2":"epochs = 30\nbatch_size = 86","d21a3280":"# Without data augmentation i obtained an accuracy of 0.98114\n#history = model.fit(X_train, Y_train, batch_size = batch_size, epochs = epochs, validation_data = (X_val, Y_val), verbose = 2)","1b67a8b5":"# Plot the loss and accuracy curves for training and validation \n#fig, ax = plt.subplots(2,1)\n#ax[0].plot(history.history['loss'], color='b', label=\"Training loss\")\n#ax[0].plot(history.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\n#legend = ax[0].legend(loc='best', shadow=True)\n\n#ax[1].plot(history.history['acc'], color='b', label=\"Training accuracy\")\n#ax[1].plot(history.history['val_acc'], color='r',label=\"Validation accuracy\")\n#legend = ax[1].legend(loc='best', shadow=True)","0eae9c1a":"# Data Augmentation\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.2, # Randomly zoom image \n        width_shift_range=0.2,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.2,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\n\ndatagen.fit(X_train)","ce45a5bd":"# Fit the model\nhistory = model.fit_generator(datagen.flow(X_train,Y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (X_val,Y_val),\n                              verbose = 2, steps_per_epoch=X_train.shape[0] \/\/ batch_size\n                              , callbacks=[lr_reduction])","700a56ce":"# Plot the loss and accuracy curves for training and validation \nfig, ax = plt.subplots(2,1)\nax[0].plot(history.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(history.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(history.history['acc'], color='b', label=\"Training accuracy\")\nax[1].plot(history.history['val_acc'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)","2855146f":"# Look at confusion matrix \n\ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n\n# Predict the values from the validation dataset\nY_pred = model.predict(X_val)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(Y_val,axis = 1) \n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n# plot the confusion matrix\nplot_confusion_matrix(confusion_mtx, classes = range(10)) ","9c47cf50":"errors = (Y_pred_classes - Y_true != 0)\n\nY_pred_classes_errors = Y_pred_classes[errors]\nY_pred_errors = Y_pred[errors]\nY_true_errors = Y_true[errors]\nX_val_errors = X_val[errors]\n\ndef display_errors(errors_index,img_errors,pred_errors, obs_errors):\n    \"\"\" This function shows 6 images with their predicted and real labels\"\"\"\n    n = 0\n    nrows = 2\n    ncols = 3\n    fig, ax = plt.subplots(nrows,ncols,sharex=True,sharey=True)\n    for row in range(nrows):\n        for col in range(ncols):\n            error = errors_index[n]\n            ax[row,col].imshow((img_errors[error]).reshape((28,28)))\n            ax[row,col].set_title(\"Predicted label :{}\\nTrue label :{}\".format(pred_errors[error],obs_errors[error]))\n            n += 1\n\n# Probabilities of the wrong predicted numbers\nY_pred_errors_prob = np.max(Y_pred_errors,axis = 1)\n\n# Predicted probabilities of the true values in the error set\ntrue_prob_errors = np.diagonal(np.take(Y_pred_errors, Y_true_errors, axis=1))\n\n# Difference between the probability of the predicted label and the true label\ndelta_pred_true_errors = Y_pred_errors_prob - true_prob_errors\n\n# Sorted list of the delta prob errors\nsorted_dela_errors = np.argsort(delta_pred_true_errors)\n\n# Top 6 errors \nmost_important_errors = sorted_dela_errors[-6:]\n\n# Show the top 6 errors\ndisplay_errors(most_important_errors, X_val_errors, Y_pred_classes_errors, Y_true_errors)","71b3e9cf":"# predict results\nresults = model.predict(test)\n\n# select the indix with the maximum probability\nresults = np.argmax(results,axis = 1)\n\nresults = pd.Series(results,name=\"Label\")","d2ffa6f5":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"cnn_mnist_datagen.csv\",index=False)","e313f7e0":"model.save_weights(\"DigitRecogWeights.h5\")\nmodel.save(\"DigitRecogModel.h5\")\nmodel_json = model.to_json()\nwith open(\"model.json\", \"w\") as json_file:\n    json_file.write(model_json)","5683c55a":"test = pd.read_csv(\"..\/input\/test.csv\")","609e15d2":"img1 = test.iloc[34].values.reshape(-1,28,28,1)\nimg1 = img1\/255.0\nplt.imshow(img1[0][:,:,0], cmap = 'gray')\npred = model.predict(img1)\npred_ans = np.argmax(pred)\nprint(pred_ans)\n","2062d923":"img1 = test.iloc[34].values\nimg1","c36fe1ab":"img = np.array([  0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   1,\n         0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n         0,   0,   0,   0,   1,   0,   1,   0,   0,   0,   0,   0,   0,\n         0,   1,  14,  26,  23,   8,   0,   0,   0,   0,   0,   0,   0,\n         0,   0,   0,   0,   0,   1,   0,   0,   1,   0,   0,   0,   0,\n         0,   0,   5,  41, 115, 162, 145,  61,   8,   0,   0,   0,   0,\n         0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,\n         0,   0,   0,   8,  68, 176, 240, 250, 235, 128,  19,   0,   0,\n         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n         1,   0,   0,   0,  13,  86, 206, 253, 253, 255, 236, 122,  17,\n         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   0,\n         0,   0,   0,   1,   0,  13,  88, 211, 251, 254, 255, 233, 154,\n        51,   5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,\n         0,   0,   1,   0,   0,   0,  10,  84, 214, 253, 255, 252, 215,\n       111,  33,   4,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,\n         0,   0,   0,   0,   0,   0,   0,   4,  64, 198, 252, 254, 251,\n       204,  84,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n         0,   0,   0,   0,   0,   0,   0,   0,   0,  30, 167, 248, 253,\n       253, 208,  80,  10,   0,   0,   0,   0,   0,   0,   0,   1,   0,\n         0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   8, 102, 235,\n       253, 255, 217,  88,  12,   0,   0,   0,   0,   0,   0,   0,   0,\n         0,   0,   0,   1,  12,  22,  10,   0,   1,   0,   1,   0,  38,\n       188, 252, 254, 239, 120,  16,   0,   0,   0,   0,   0,   0,   1,\n         0,   0,   0,   0,   0,  13,  87, 143,  95,   0,   0,   1,   0,\n         4,  90, 238, 254, 251, 181,  39,   0,   0,   0,   0,   0,   0,\n         0,   0,   0,   0,   0,   0,   0,  41, 200, 248, 213,   0,   0,\n         0,   0,  22, 156, 251, 255, 241, 103,   8,   0,   0,   1,   0,\n         0,   0,   0,   0,   1,   0,   0,   0,   0,  68, 231, 254, 245,\n         0,   0,   0,   0,  42, 208, 255, 253, 207,  51,   0,   1,   0,\n         0,   0,   0,   0,   0,   1,   0,   0,   1,   4,  32, 136, 245,\n       255, 247,   0,   0,   0,   0,  63, 235, 254, 254, 158,  22,   1,\n         0,   0,   0,   0,   1,   0,   0,   0,   0,   7,  29,  79, 163,\n       237, 254, 254, 236,   0,   1,   0,   0,  81, 247, 255, 250, 113,\n         6,   0,   1,   0,   0,   0,   0,   0,   4,  18,  49,  97, 172,\n       226, 251, 255, 254, 249, 172,   0,   0,   0,   3,  90, 249, 255,\n       249,  98,   4,   0,   0,   1,   1,   9,  26,  52,  90, 148, 206,\n       241, 252, 254, 255, 254, 245, 173,  58,   0,   0,   1,   1,  78,\n       246, 255, 252, 161,  54,  35,  39,  53,  78, 117, 169, 212, 240,\n       251, 253, 255, 254, 253, 245, 211, 129,  39,   4,   1,   1,   0,\n         0,  53, 217, 254, 255, 242, 205, 186, 196, 216, 233, 246, 251,\n       253, 254, 253, 254, 250, 236, 193, 126,  56,  15,   1,   0,   0,\n         0,   1,   0,  17, 143, 247, 254, 254, 253, 252, 253, 253, 254,\n       254, 254, 252, 249, 239, 209, 155,  90,  43,  13,   1,   0,   0,\n         0,   1,   0,   0,   0,   2,  44, 170, 240, 250, 254, 253, 252,\n       253, 249, 245, 230, 197, 144,  89,  49,  24,   5,   0,   1,   0,\n         0,   1,   0,   0,   0,   0,   0,   0,   3,  39, 115, 175, 203,\n       212, 207, 186, 151, 108,  70,  41,  18,   4,   0,   0,   0,   0,\n         0,   0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   2,  14,\n        30,  45,  49,  48,  35,  24,   8,   2,   0,   0,   0,   0,   0,\n         0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0,\n         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   0,\n         0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   0,\n         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n         0,   0,   0,   0])\nplt.imshow(img.reshape(28,28))\nplt.show()\nimg = img.reshape(-1,28,28,1)\npred = model.predict(img)\nprint(pred, np.argmax(pred))","87832ab9":"# Model Starts Here"}}