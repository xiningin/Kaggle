{"cell_type":{"7b6fc9c1":"code","5366838c":"code","6e2183a7":"code","cc1b11ca":"code","fcdfc80a":"code","71795e1e":"code","e037df62":"code","e5d23449":"code","4f5951e0":"code","c64cf045":"code","564a1aa7":"code","2a1e1ba2":"code","b4188dbb":"code","88bcbd11":"code","04427a03":"code","36f4a78d":"code","d825182e":"code","e002e9a1":"code","9a3bb83f":"code","8fa5302a":"markdown","ddb4ead3":"markdown","3efd6624":"markdown","9f2c4921":"markdown","bbbaabeb":"markdown","e0aa4107":"markdown","dec6923c":"markdown","6c3a7094":"markdown","c7538d50":"markdown","a60ba5bf":"markdown","aeef0694":"markdown","ef06f8ca":"markdown","93c0b7fd":"markdown","21cc3479":"markdown","3a8cf13e":"markdown","cac85300":"markdown","576fbb8d":"markdown","803125ce":"markdown","d3509c47":"markdown"},"source":{"7b6fc9c1":"%config InlineBackend.figure_formats = ['retina']\nimport numpy as np, pandas as pd, seaborn as sns, matplotlib.pyplot as plt\nfrom sklearn.preprocessing import scale\nfrom sklearn.cluster import KMeans","5366838c":"plt.rcParams['figure.figsize'] = [6,6]\nsns.set_style(\"whitegrid\")\nsns.set_context(\"talk\")","6e2183a7":"img = plt.imread('..\/input\/kmeans\/peppers.jpg')\nplt.imshow(img)\nplt.axis('off')","cc1b11ca":"img.shape","fcdfc80a":"img_flat = img.reshape(img.shape[0]*img.shape[1],3) #This is well known transformation of the images in order to be modeled.\nimg_flat[:10,:]   #Print the first ten rows","71795e1e":"img_flat.shape","e037df62":"kmeans = KMeans(n_clusters=8, random_state=0).fit(img_flat) ","e5d23449":"kmeans.cluster_centers_","4f5951e0":"kmeans.labels_","c64cf045":"np.unique(kmeans.labels_)","564a1aa7":"kmeans.inertia_","2a1e1ba2":"plt.figure(figsize=[10,5])\nfor i in range(0,8):\n    plt.subplot(2,4,i+1)\n    plt.imshow([[np.array(kmeans.cluster_centers_[i]).astype('uint8')]])\n    plt.title('label'+str(i))\n    plt.axis('off')","b4188dbb":"img_flat2 = img_flat.copy()\n\n# loops for each cluster center\nfor i in np.unique(kmeans.labels_):\n    img_flat2[kmeans.labels_==i,:] = kmeans.cluster_centers_[i]\n#Here above we are saying for all pixels with label = i replace its content with the cluster center i. ","88bcbd11":"img2 = img_flat2.reshape(img.shape)\nplt.imshow(img2)\nplt.axis('off')","04427a03":"def clustering(pic,k):\n    pic_flat=pic.reshape(pic.shape[0]*pic.shape[1],3)\n    k_clusters=KMeans(n_clusters=k, random_state=0).fit(pic_flat)\n    pic_flat2=pic_flat.copy()\n    for i in np.unique(k_clusters.labels_):\n        pic_flat2[k_clusters.labels_ == i,:]=k_clusters.cluster_centers_[i]\n    pic2=pic_flat2.reshape(pic.shape)\n    return pic2, k_clusters.inertia_","36f4a78d":"k_numbers = list(range(2,21,2))\ninertia = []\nimg_list = []\nfor k in k_numbers:\n    img2, iner_k = clustering(img,k)\n    img_list.append(img2)\n    inertia.append(iner_k)","d825182e":"plt.plot(k_numbers,inertia, marker='o')\n#plt.scatter(k_numbers,inertia)\nplt.xlabel('K numbers')\nplt.ylabel('Inertia')","e002e9a1":"plt.figure(figsize=[10,20])\nfor i in range(len(k_numbers)):\n    plt.subplot(5,2,i+1)\n    plt.imshow(img_list[i])\n    plt.title('k = ' + str(k_numbers[i]))\n    plt.axis('off')","9a3bb83f":"len(np.unique(img_flat, axis=0))","8fa5302a":"# Compute kmeans for k between 2-20, and draw the inertia curve:","ddb4ead3":"#### Let's print the cluster centers of our model:","3efd6624":"Now let's replace each row with its closest cluster center.","9f2c4921":"### Images after clustering: ","bbbaabeb":"**First we will reshape the image into a table that has a pixel per row and each column represents the red, green and blue value.**","e0aa4107":"### Plotting inertia curve:","dec6923c":"Above we can see that as we have 480 rows and 640 columns, we will produce 307.200 pixels with 3 intensities, one for each color.","6c3a7094":"The image above has 480 pixels in height and 640 pixels in width. Each pixel has 3 values that represent how much red, green and blue it has.","c7538d50":"Let's read the image with function imread( ) from matplotlib: ","a60ba5bf":"Now let's reshape the data from 307200x3 to 480x640x3:","aeef0694":"**IMPORTANT: Notice that as you run the model again, the clusters will be different than before, (this is well known for Kmeans), but take into account that the resulting colors will be the same, they are just sorted differently.** ","ef06f8ca":"## Let's run K-means with 8 clusters:","93c0b7fd":"As we suppose the number of unique labels is the same as number of clusters we defined before:","21cc3479":"### Hi, welcome to my project!, Today we will cover Unsupervised ML clustering with K-means algorithm. With this model we will see how we can group a variety of colors from an image into a specific number of centroids (in this case colors) which will represent significatively well the original spectrum of colors in our image.","3a8cf13e":"Firstly we are going to define a function which allows us to load an image and the number of k-clusters that we want, then it returns the image replaced with centroids and the corresponding inertia.","cac85300":"As we are working with unsupervised models we will only fit in our algorithm the entire dataset \"img_flat\":","576fbb8d":"#### We can display a figure which shows the color corresponding to each center:","803125ce":"In the figures above for K=20, we can see an image which is not too much different than the original one, and based on its inertia we could easily replace the images and we will see that too much information and details will not be lost by this replacement, also notice the number of unique colors in the original image 98.452! and the model grouped them quite well in only 20 possible colors!","d3509c47":"# Clustering Colors from an Image:"}}