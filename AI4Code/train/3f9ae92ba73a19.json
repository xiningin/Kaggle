{"cell_type":{"44443afd":"code","1221bd37":"code","7e51038c":"code","5d4e179c":"code","f3d330ed":"code","9dcbf7ce":"code","8c6dedbd":"code","73c2935f":"code","246ca656":"code","d92f454d":"code","075f2ee9":"code","c721d52b":"code","4a4e2021":"code","35eed067":"code","bbdec4a7":"code","3fe5d1bf":"markdown"},"source":{"44443afd":"import os\nimport gc\nimport numpy as np\nimport pandas as pd\nimport skimage.io\nimport cv2","1221bd37":"df_train = pd.read_csv('\/kaggle\/input\/prostate-cancer-grade-assessment\/train.csv')\ndf_train.head()","7e51038c":"result_dicts = []\nfor i, row in df_train.iterrows():\n    if i%1000 == 0:\n        for i in range(10):\n            gc.collect()  # to be really effective need to run it several times... \n    \n    # new columns in csv with default values\n    row[\"size\"] = -1\n    for j in range(6):\n        row[f\"gleason_{j}_size\"] = -1\n\n    image_id = row[\"image_id\"]\n    mimg_mask = skimage.io.MultiImage(\"\/kaggle\/input\/prostate-cancer-grade-assessment\/train_label_masks\/\" + image_id + \"_mask.tiff\")\n    if len(mimg_mask) < 1:\n        result_dicts += [row]\n        continue\n              \n    # for this rough estiamte take only smallest zoom\n    mask = mimg_mask[2][...,0]\n    # be conservative and dilate pixels\n    mask = cv2.morphologyEx(mask, cv2.MORPH_DILATE, np.ones((21,21),np.uint8))\n    row[\"size\"] = mask.size\n    for j in range(6):\n        row[f\"size_gleason_{j}\"] = np.sum(mask==j)\n    result_dicts += [row]\n    \n    del mimg_mask\n    del mask\n\ndf_train = pd.DataFrame(result_dicts)\ndf_train.head()","5d4e179c":"df_train[\"size_tissue\"] = df_train[[f\"size_gleason_{i}\" for i in range(6)]].sum(axis=1)\nfor i in range(6):\n    df_train[f\"percent_gleason_{i}\"] = df_train[f\"size_gleason_{i}\"] \/ df_train[\"size_tissue\"] * 100","f3d330ed":"df_train.describe()","9dcbf7ce":"def test_mask(df, query, comment):\n    print(f\"{comment}: {len(df.query(query))}\")\n    if \"good_mask\" not in df:\n        df.loc[:, \"good_mask\"] = True\n    df_good = df.query(f\"not ({query})\")\n    df_bad = df.query(query)\n    df_bad.loc[:, \"good_mask\"] = False\n    return pd.concat([df_good, df_bad], sort=False)","8c6dedbd":"# no data\ndf_train = test_mask(df_train, \"size < 1\", \"no mask at all\")","73c2935f":"# gleason-score (most common + second most common pattern) | ISUP Grade\n# 3+3 | 1\n# 3+4 | 2\n# 4+3 | 3\n# 4+4 | 4\n# 3+5 | 4\n# 5+3 | 4\n# 4+5 | 5\n# 5+4 | 5\n# 5+5 | 5","246ca656":"# isup 1\ndf_train = test_mask(df_train, \"(percent_gleason_4 > 5 or percent_gleason_5 > 5) and isup_grade == 1\", \"gleason pattern too large for isup 1\")\ndf_train = test_mask(df_train, \"percent_gleason_3 < 5 and isup_grade == 1\", \"gleason pattern too small for isup 1\")","d92f454d":"# isup 2\ndf_train = test_mask(df_train, \"(percent_gleason_5 > 5) and isup_grade == 2\", \"gleason pattern too large for isup 2\")\ndf_train = test_mask(df_train, \"(percent_gleason_3 < 5 or percent_gleason_4 < 5) and isup_grade == 2\", \"gleason pattern too small for isup 2\")","075f2ee9":"# isup 3\ndf_train = test_mask(df_train, \"(percent_gleason_5 > 5) and isup_grade == 3\", \"gleason pattern too large for isup 3\")\ndf_train = test_mask(df_train, \"(percent_gleason_3 < 5 and percent_gleason_4 < 5) and isup_grade == 3\", \"gleason pattern too small for isup 3\")","c721d52b":"# isup 4\ndf_train = test_mask(df_train, \"(percent_gleason_5 > 10) and isup_grade == 4\", \"gleason pattern too large for isup 4\")\ndf_train = test_mask(df_train, \"(percent_gleason_4 < 10 or (percent_gleason_3 < 5 and percent_gleason_5 < 5)) and isup_grade == 4\", \"gleason pattern too small for isup 4\")","4a4e2021":"# isup 5\ndf_train = test_mask(df_train, \"(percent_gleason_5 < 5) and isup_grade == 5\", \"gleason pattern too small for isup 5\")","35eed067":"print(f\"Good masks: {np.sum(df_train.good_mask)}\/{len(df_train)} ({round(100*np.sum(df_train.good_mask)\/len(df_train),1)}%)\")","bbdec4a7":"df_train.to_csv(\"\/kaggle\/working\/train_mask_cleanup.csv\")","3fe5d1bf":"Filter out images where gleason pattern in mask match more or less isup grade of train.csv.\nNo clusterization done here. Only look if percentage of masked areas could in principle describe the isup grade.\nFor example, if a mask has no gleason pattern 5, it is not possible to reach isup grade 5."}}