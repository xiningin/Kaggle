{"cell_type":{"1a0d72d0":"code","69976ff6":"code","d83c0607":"code","6aaec3d3":"code","d9de4495":"code","a855d8de":"code","ddf0122d":"code","0799395e":"code","7eb37ab2":"code","9531a2d1":"code","073b9033":"code","35babf82":"code","673e0d62":"code","44584bd2":"code","3ad879ba":"code","028a0ec5":"code","df0b55b0":"code","27ff6c92":"code","f46a5292":"code","bdf95757":"code","82de2b94":"code","2775cc3a":"code","7519b234":"code","768f92ba":"markdown","5dbd5123":"markdown"},"source":{"1a0d72d0":"# \u5bfc\u5165\u5fc5\u8981\u7684libs\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\n%matplotlib inline\n\nnp.random.seed(2)\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\nfrom keras.datasets import mnist\n\nsns.set(style='white', context='notebook', palette='deep')","69976ff6":"# \u52a0\u8f7d\u6570\u636e\ntrain = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")\n\nY_train = train[\"label\"]\nX_train = train.drop(labels = [\"label\"], axis = 1) ","d83c0607":"# \u52a0\u8f7d\u66f4\u591a\u7684\u6570\u636e\u96c6\uff0c\u5982\u679c\u6ca1\u8fd9\u6279\u6570\u636e\uff0cvalidation accuracy = 0.9964\n# \u6709\u8fd9\u6279\u6570\u636e\u540e\uff0cvalidation accuracy \u53ef\u4ee5\u5230\u8fbe 0.9985\n(x_train1, y_train1), (x_test1, y_test1) = mnist.load_data()\n\ntrain1 = np.concatenate([x_train1, x_test1], axis=0)\ny_train1 = np.concatenate([y_train1, y_test1], axis=0)\n\nY_train1 = y_train1\nX_train1 = train1.reshape(-1, 28*28)","6aaec3d3":"# \u6253\u5370\u6570\u636e\u7684\u76f4\u65b9\u56fe\ng = sns.countplot(Y_train)","d9de4495":"# \u5f52\u4e00\u5316\u6570\u636e\uff0c\u8ba9CNN\u66f4\u5feb\nX_train = X_train \/ 255.0\ntest = test \/ 255.0\n\nX_train1 = X_train1 \/ 255.0","a855d8de":"# Reshape \u56fe\u7247\u4e3a 3D array (height = 28px, width = 28px , canal = 1)\nX_train = np.concatenate((X_train.values, X_train1))\nY_train = np.concatenate((Y_train, Y_train1))","ddf0122d":"X_train = X_train.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)","0799395e":"# \u628alabel\u8f6c\u6362\u4e3aone hot vectors (ex : 2 -> [0,0,1,0,0,0,0,0,0,0])\nY_train = to_categorical(Y_train, num_classes = 10)","7eb37ab2":"# \u62c6\u5206\u6570\u636e\u96c6\u4e3a\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6\nX_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size = 0.1, random_state=2)","9531a2d1":"# \u753b\u4e00\u4e2a\u6570\u636e\u96c6\u7684\u4f8b\u5b50\u6765\u770b\u770b\ng = plt.imshow(X_train[0][:,:,0])","073b9033":"# \u521b\u5efaCNN model \n# \u6a21\u578b\uff1a\n\"\"\"\n  [[Conv2D->relu]*2 -> BatchNormalization -> MaxPool2D -> Dropout]*2 -> \n  [Conv2D->relu]*2 -> BatchNormalization -> Dropout -> \n  Flatten -> Dense -> BatchNormalization -> Dropout -> Out\n\"\"\"\nmodel = Sequential()\n\nmodel.add(Conv2D(filters = 64, kernel_size = (5,5),padding = 'Same', activation ='relu', input_shape = (28,28,1)))\nmodel.add(BatchNormalization())\n\nmodel.add(Conv2D(filters = 64, kernel_size = (5,5),padding = 'Same', activation ='relu'))\nmodel.add(BatchNormalization())\n\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', activation ='relu'))\nmodel.add(BatchNormalization())\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', activation ='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3), padding = 'Same',  activation ='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.25))\n\nmodel.add(Dense(10, activation = \"softmax\"))","35babf82":"# \u6253\u5370\u51famodel \u770b\u770b\nfrom keras.utils import plot_model\nplot_model(model, to_file='model.png', show_shapes=True, show_layer_names=True)\nfrom IPython.display import Image\nImage(\"model.png\")","673e0d62":"# \u5b9a\u4e49Optimizer\noptimizer = RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)","44584bd2":"# \u7f16\u8bd1model\nmodel.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])","3ad879ba":"# \u8bbe\u7f6e\u5b66\u4e60\u7387\u7684\u52a8\u6001\u8c03\u6574\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)","028a0ec5":"epochs = 50\nbatch_size = 128","df0b55b0":"# \u901a\u8fc7\u6570\u636e\u589e\u5f3a\u6765\u9632\u6b62\u8fc7\u5ea6\u62df\u5408\ndatagen = ImageDataGenerator(\n        featurewise_center=False, # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\ndatagen.fit(X_train)","27ff6c92":"# \u8bad\u7ec3\u6a21\u578b\nhistory = model.fit_generator(datagen.flow(X_train,Y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (X_val,Y_val),\n                              verbose = 2, steps_per_epoch=X_train.shape[0] \/\/ batch_size\n                              , callbacks=[learning_rate_reduction])","f46a5292":"# \u753b\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6\u7684loss\u548caccuracy\u66f2\u7ebf\u3002\u53ef\u4ee5\u5224\u65ad\u662f\u5426\u6b20\u62df\u5408\u6216\u8fc7\u62df\u5408\nfig, ax = plt.subplots(2,1)\nax[0].plot(history.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(history.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(history.history['acc'], color='b', label=\"Training accuracy\")\nax[1].plot(history.history['val_acc'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)","bdf95757":"# \u753b\u51fa\u6df7\u6dc6\u77e9\u9635\uff0c\u53ef\u4ee5\u7528\u6765\u89c2\u5bdf\u8bef\u5224\u6bd4\u8f83\u9ad8\u7684\u60c5\u51b5\n\ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n\n# Predict the values from the validation dataset\nY_pred = model.predict(X_val)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(Y_val,axis = 1) \n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n# plot the confusion matrix\nplot_confusion_matrix(confusion_mtx, classes = range(10)) ","82de2b94":"# \u663e\u793a\u4e00\u4e9b\u9519\u8bef\u7ed3\u679c\uff0c\u53ca\u9884\u6d4b\u6807\u7b7e\u548c\u771f\u5b9e\u6807\u7b7e\u4e4b\u95f4\u7684\u4e0d\u540c\nerrors = (Y_pred_classes - Y_true != 0)\n\nY_pred_classes_errors = Y_pred_classes[errors]\nY_pred_errors = Y_pred[errors]\nY_true_errors = Y_true[errors]\nX_val_errors = X_val[errors]\n\ndef display_errors(errors_index,img_errors,pred_errors, obs_errors):\n    \"\"\" This function shows 6 images with their predicted and real labels\"\"\"\n    n = 0\n    nrows = 2\n    ncols = 3\n    fig, ax = plt.subplots(nrows,ncols,sharex=True,sharey=True)\n    for row in range(nrows):\n        for col in range(ncols):\n            error = errors_index[n]\n            ax[row,col].imshow((img_errors[error]).reshape((28,28)))\n            ax[row,col].set_title(\"Predicted label :{}\\nTrue label :{}\".format(pred_errors[error],obs_errors[error]))\n            n += 1\n\n# Probabilities of the wrong predicted numbers\nY_pred_errors_prob = np.max(Y_pred_errors,axis = 1)\n\n# Predicted probabilities of the true values in the error set\ntrue_prob_errors = np.diagonal(np.take(Y_pred_errors, Y_true_errors, axis=1))\n\n# Difference between the probability of the predicted label and the true label\ndelta_pred_true_errors = Y_pred_errors_prob - true_prob_errors\n\n# Sorted list of the delta prob errors\nsorted_dela_errors = np.argsort(delta_pred_true_errors)\n\n# Top 6 errors \nmost_important_errors = sorted_dela_errors[-6:]\n\n# Show the top 6 errors\ndisplay_errors(most_important_errors, X_val_errors, Y_pred_classes_errors, Y_true_errors)","2775cc3a":"# \u5bf9\u6d4b\u8bd5\u96c6\u505a\u9884\u6d4b\nresults = model.predict(test)\n\n# \u628aone-hot vector\u8f6c\u6362\u4e3a\u6570\u5b57\nresults = np.argmax(results,axis = 1)\n\nresults = pd.Series(results,name=\"Label\")","7519b234":"# \u4fdd\u5b58\u6700\u7ec8\u7684\u7ed3\u679c\nsubmission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"cnn_mnist_submission.csv\",index=False)","768f92ba":"# \u5199\u5728\u6700\u540e\n\u5173\u4e8e\u673a\u5668\u5b66\u4e60\uff0c\u6211\u4e5f\u662f\u5728\u4e0d\u65ad\u7684\u603b\u7ed3\u548c\u79ef\u7d2f\u4e2d\u3002\n\u6b22\u8fce\u6765[\u6211\u7684\u77e5\u4e4e](https:\/\/www.zhihu.com\/people\/kaikai.ai) \u4e00\u8d77\u4ea4\u6d41\u6216\u4f9b\u7a3f :)","5dbd5123":"# \u524d\u8a00\nDigit Recognizer\u662f\u6211\u63a5\u89e6\u5230\u7684\u7b2c\u4e00\u4e2aKaggle\u7ec3\u4e60\u9898\u3002\n\n\u7136\u540e\u9ebb\u96c0\u867d\u5c0f\uff0c\u4e94\u810f\u4ff1\u5168\u3002\u4e3a\u4e86\u4f18\u5316Score\uff0c\u524d\u524d\u540e\u540e\u957f\u4e86\u591a\u4e2a\u65b9\u6cd5\u7684\u548c\u591a\u6b21\u6a21\u578b\u7684\u6539\u8fdb\uff0cAccuracy score\u4e5f\u4ece~0.96 -> 0.98-> 0.99 -> \u5230\u76ee\u524d\u76841.0\u3002\n\n\u8fd9\u4e2a\u4ee3\u7801\u6b63\u662f\u83b7\u5f97test accuracy 100%\u7684Notebook\uff0c\u5c06\u5176\u5206\u4eab\u7ed9\u4f60\uff0c\u4ec5\u4f9b\u53c2\u8003\u548c\u4ea4\u6d41\u3002\n\n\uff08\u5f53\u7136\u8fd9\u4e2anotebook\u7684\u6846\u67b6\u4e5f\u662f\u7ad9\u5728\u524d\u4efb\u7684\u57fa\u7840\u4e0a\uff0c\u611f\u8c22\u5728kaggle\u548c\u5176\u4ed6\u7f51\u7ad9\u5206\u4eabnotebook\u548c\u7ed3\u9898\u601d\u8def\u7684\u670b\u53cb\uff09\n\n# \u4e0b\u9762\u8fdb\u5165\u6b63\u9898"}}