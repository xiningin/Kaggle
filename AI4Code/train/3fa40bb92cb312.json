{"cell_type":{"d9854c72":"code","9e5fa608":"code","f23c6c4b":"code","f8a6ba55":"code","7d7c1389":"code","64b862a0":"code","39d30a2a":"code","5e8af506":"code","b2a7541f":"code","fae03a6e":"code","9a209cab":"code","ece7870a":"code","59c2b0d9":"code","56d8247b":"code","35f19ec5":"code","bae0e0d6":"code","87a61461":"code","ef0be827":"code","80d2b5cf":"code","ad2140ee":"code","c4f82f9c":"code","e0fbf406":"code","d2ae1f6c":"code","0b996875":"code","9161d043":"code","63528215":"code","8cede3bb":"code","3b61578b":"code","c96c6518":"code","b5cdd9fa":"code","a06a9a66":"code","9fbc69d0":"code","4b37cb85":"code","184c8f6d":"code","a44d6c6a":"code","0ca71c4c":"code","956a81a2":"code","cc103db2":"code","5a87832d":"code","972ba7f4":"code","006dbb0f":"code","7427f344":"code","dc3ca44b":"markdown","e872e466":"markdown","de7dc59d":"markdown","a995688e":"markdown","25a36617":"markdown","9b2d7bea":"markdown","7a343171":"markdown","4deaf4ce":"markdown","2f730f03":"markdown","3ed8ed3d":"markdown","26929c8d":"markdown"},"source":{"d9854c72":"import math\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport plotly.express as px\nimport plotly.graph_objs as go\n\nfrom matplotlib.ticker import FuncFormatter,ScalarFormatter\nimport matplotlib.animation as animation\nfrom IPython.display import HTML\n\nfrom plotly.offline import plot, iplot, init_notebook_mode\ninit_notebook_mode(connected=True)\n%matplotlib inline\npd.options.mode.chained_assignment = None\nsns.set(style=\"darkgrid\")","9e5fa608":"gt = pd.read_csv('\/kaggle\/input\/gtd\/globalterrorismdb_0718dist.csv',encoding='ISO-8859-1',\n                 usecols=['eventid', 'iyear', 'imonth', 'iday', 'region','region_txt', 'country', \n               'country_txt', 'provstate', 'city', 'latitude', 'longitude', 'extended', 'suicide', \n               'attacktype1', 'attacktype1_txt', 'targtype1', 'targtype1_txt','weaptype1','weaptype1_txt',\n               'nkill','nwound','gname'])\n                 ","f23c6c4b":"gt.rename(columns={'country':'country_code','country_txt':'country','region':'region_code','region_txt':'region_name',\n                   'attacktype1':'attack_type_code','attacktype1_txt':'attack_type',\n                   'targtype1':'target_type_code','targtype1_txt':'target_type','weaptype1':'weapon_type_code',\n                   'weaptype1_txt':'weapon_type'},inplace = True)","f8a6ba55":"#Creating date column\ntemp1 = gt[['iyear', 'imonth', 'iday']]\ntemp1.rename(columns={'iyear':'year','imonth':'month','iday':'day'},inplace = True)\ngt['date']= pd.to_datetime(temp1[['year', 'month', 'day']],errors='coerce').dt.date.astype('datetime64')","7d7c1389":"gt.info()","64b862a0":"#Filling missing values\ngt['nkill'] = gt['nkill'].fillna(0).astype(np.int64)\ngt['nwound'] = gt['nwound'].fillna(0).astype(np.int64)\n\n#Adding new columns\ngt['casualities'] = gt['nwound'] + gt['nkill']\n\n#Altering large values\ngt['weapon_type'].replace({\"Vehicle (not to include vehicle-borne explosives, i.e., car or truck bombs)\":\"Bombless Vehicle\"},inplace =True)","39d30a2a":"gt.sample(10)","5e8af506":"#Function to obtain formats such as 1K,10K,1M for large numbers \ndef count_format(num,pos):\n    num = float('{:.3g}'.format(num))\n    mag = 0\n    while abs(num) >= 1000:\n        mag += 1\n        num \/= 1000.0\n    return '{}{}'.format('{:f}'.format(num).rstrip('0').rstrip('.'), ['', 'K', 'M'][mag])\n\n\nformatter = FuncFormatter(count_format)\n","b2a7541f":"year_group = gt.groupby('iyear',as_index = False)['eventid'].count()\nplt.figure(figsize=(12,8))\nplt.boxplot(year_group['eventid'],patch_artist = True)\nplt.title('Total count of terrorist attacks over the years ')\nplt.xticks([1],['Total count of terrorist attacks over the years '])\nplt.ylabel('Count')\nax = plt.gca()\nax.yaxis.set_major_formatter(formatter)\nplt.show()","fae03a6e":"print('Statistics on total count of terrorist attacks every year from',year_group['iyear'].min(), 'to', year_group['iyear'].max(),':')\nprint('\\t Total: ',year_group['eventid'].sum())\nprint('\\t Average: ',round(year_group['eventid'].mean()))\nprint('\\t Maximum: ',year_group['eventid'].max())\nprint('\\t Minimum: ',year_group['eventid'].min())\n","9a209cab":"plt.figure(figsize=(12,8))\nax=sns.distplot(year_group['eventid'], \n             bins=20, color='blue',rug= True)\nplt.xlabel('Count of terrorist attacks every year')\nplt.ylabel('Probability density')\nplt.xticks(range(0,20001,1000),rotation =70)\nax.xaxis.set_major_formatter(formatter)\nplt.title('Probability density distribution of total count of terrorist attacks from {0} to {1}'.format(year_group['iyear'].min(),\n                                                                                             year_group['iyear'].max()))\n","ece7870a":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=year_group['iyear'], y=year_group['eventid'],\n                    mode='lines+markers',\n                    name='lines+markers'))\nfig.update_layout(xaxis_rangeslider_visible=True)\nfig.update_layout(xaxis = dict(title='Year',\n        tickmode = 'array',\n        tickvals = list(range(year_group['iyear'].min(),year_group['iyear'].max()+1,5))),\n        yaxis=dict(title='Total attacks'),\n        height=600,width=600,\n        title=\"Spread of total count of terrorist attacks every year\")\n\nfig.data[0].hovertemplate = '<b>Year: %{x} <\/b><br>Attack count: %{y}<extra><\/extra>'\n\nfig.show()","59c2b0d9":"print('The highest number of terrorist attacks took place in the year',\n      year_group.loc[year_group['eventid']==year_group['eventid'].max(),'iyear'].iloc[0])\n     \nprint('The lowest number of terrorist attacks took place in the year',\n      year_group.loc[year_group['eventid']==year_group['eventid'].min(),'iyear'].iloc[0])","56d8247b":"#Dateframe for daywise terrorist attacks and their resulting casualities\ndate_cas = gt.groupby('date',as_index = False)['casualities'].sum()\ndate_group = gt.groupby('date',as_index = False)['eventid'].count()\nresult = pd.concat([date_group,date_cas], axis=1, sort=False)\ncols = [x for x in range(result.shape[1])] \ncols.remove(2)\ndaywise_attacks_cas = result.iloc[:, cols]\n\ndef cas_category(x):\n    if x == 0:\n        return 'No casualities'\n    elif 1 <=  x <= 100:\n        return '1 to 100'\n    elif 101 <= x <= 500:\n        return '101 to 500'\n    elif 501 <= x <= 999:\n        return '501 to 999'\n    elif  x >= 1000:\n        return '1000 and above'\n\n\nc_color={'No casualities':'rgb(60,179,113)','1 to 100':'rgb(93, 164, 214)',\n         '101 to 500' :'rgb(238,130,238)','501 to 999':'rgb(255,215,0)',\n         '1000 and above': 'rgb(255,99,71)'}\nc_size= {'No casualities':10,'1 to 100' :20,'101 to 500': 30,'501 to 999':40,\n         '1000 and above':50}\n\ndaywise_attacks_cas['cas_stats'] = daywise_attacks_cas['casualities'].map(cas_category)\ndaywise_attacks_cas['cas_color'] = daywise_attacks_cas['cas_stats'].map(c_color)\ndaywise_attacks_cas['cas_size'] = daywise_attacks_cas['cas_stats'].map(c_size)\n\n# Dictionary with dataframes for each casualities groups\ncas_stats_list = list(daywise_attacks_cas.cas_stats.unique())\ncas_stats_data = {cas_stats:daywise_attacks_cas.query(\"cas_stats == '%s'\" %cas_stats)\n                              for cas_stats in cas_stats_list}\n\nfig = go.Figure()\nfor cas_stats_name, cas_stats in cas_stats_data.items():\n    fig.add_trace(go.Scattergl(\n        x=cas_stats['date'], y=cas_stats['eventid'],\n        name=cas_stats_name,\n        marker_size=cas_stats['cas_size'], \n        mode='markers',\n        customdata = cas_stats['casualities'],\n        marker_color= cas_stats['cas_color'],\n        hovertemplate =  '<b>%{x} <\/b><br>Number of attacks: %{y}<br>Casualities: %{customdata}<extra><\/extra>'))\n    \nfig.update_layout(height=600,width=1000,\n                title=\"How terrorism and resulting casualities spread through days?\",\n                xaxis_range=[daywise_attacks_cas['date'].min(),daywise_attacks_cas['date'].max()],\n                xaxis = dict(title='Timeline',\n                rangeselector=dict(buttons=list([                    \n                        dict(count=1,label=\"1M\",step=\"month\",stepmode=\"backward\"),\n                        dict(count=6,label=\"6M\",step=\"month\",stepmode=\"backward\"),\n                        dict(count=1,label=\"YTD\",step=\"year\",stepmode=\"todate\"),\n                        dict(count=1,label=\"1Y\",step=\"year\",stepmode=\"backward\"),\n                        dict(count=5,label=\"5Y\",step=\"year\",stepmode=\"backward\"),\n                        dict(count=10,label=\"10Y\",step=\"year\",stepmode=\"backward\"),\n                        dict(step=\"all\",label='All')]))),\n                yaxis=dict(title='Count of terroirst attacks',\n                           range=[0,daywise_attacks_cas['eventid'].max()+30]),\n                legend = dict(title= 'Casualities'),\n                plot_bgcolor='rgb(243, 243, 243)',)                 \nfig.show()","35f19ec5":"cg = gt.groupby('iyear',as_index =False).sum()\ncas_group = cg[['iyear','casualities','nkill','nwound']]\ncas_group_array = cas_group[['nkill','nwound']].values\n\nsum_of_cas = pd.DataFrame(np.array([['Casualities: '+str(cas_group['casualities'].sum()),\n                        cas_group['nkill'].sum(), cas_group['nwound'].sum()]]),    \n                        columns=['Casualities','Dead', 'Wounded'])\ntemp = sum_of_cas.melt(id_vars=\"Casualities\", value_vars=['Dead', 'Wounded'])\n\nfig = go.Figure(go.Treemap(\n    labels=temp['variable'],\n    parents =temp['Casualities'],values= temp['value'],\n    textinfo='label+text+value+percent parent',\n    hoverinfo='label+text+value'))\n\nfig.update_layout(height=275,title='People killed vs People wounded')\nfig.show()","bae0e0d6":"plt.figure(figsize=(12,8))\ncas_group_columns = ['Number of people killed','Number of people wounded']\nbp = plt.boxplot(cas_group_array,patch_artist = True,labels=cas_group_columns)\ncolors = ['r','b']\nfor i in range(len(bp['boxes'])):\n    bp['boxes'][i].set(facecolor = colors[i])\nplt.title('Count of casualities over the years ')\nplt.ylabel('Count')\nax= plt.gca()\nax.yaxis.set_major_formatter(formatter)\nplt.yticks(range(0,cas_group['nkill'].max()+10001,5000))\nplt.show()","87a61461":"print('Statistics on people killed from the year',cas_group['iyear'].min(),\n      'to', cas_group['iyear'].max(),'due to terrorism: ')\nprint('\\t Total:', cas_group['nkill'].sum())\nprint('\\t Average:' ,round(cas_group['nkill'].mean()))\nprint('\\t Minimum:',cas_group['nkill'].min())\nprint('\\t Maximum:',cas_group['nkill'].max())\nprint('')\nprint('Statistics on people wounded from the year',cas_group['iyear'].min(),\n      'to', cas_group['iyear'].max(),'due to terrorism: ')\nprint('\\t Total:',cas_group['nwound'].sum())\nprint('\\t Average:',round(cas_group['nwound'].mean()))\nprint('\\t Minimum:',cas_group['nwound'].min())\nprint('\\t Maximum:',cas_group['nwound'].max())","ef0be827":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=cas_group['iyear'], y=cas_group['nkill'],\n                    mode='lines+markers',marker_color='rgba(255, 0, 0, 0.7)',\n                    name='Number of people killed'))\nfig.add_trace(go.Scatter(x=cas_group['iyear'], y=cas_group['nwound'],\n                    mode='lines+markers',marker_color='rgba(0, 0, 255, 0.7)',\n                    name='Number of people wounded'))\nfig.update_layout(xaxis_rangeslider_visible=True)\nfig.update_layout(xaxis = dict(title = 'Year',\n        tickmode = 'array',\n        tickvals = list(range(cas_group['iyear'].min(),cas_group['iyear'].max()+1,5))),\n        height=600,width=800,\n        title=\"Total count of casualities over the years\",\n        yaxis=dict(title='Total count'))\n\nfig.data[0].hovertemplate = '<b>Year: %{x} <\/b><br>People killed: %{y}<extra><\/extra>'\nfig.data[1].hovertemplate = '<b>Year: %{x} <\/b><br>People wounded: %{y}<extra><\/extra>'\nfig.show()","80d2b5cf":"def generate_tenth_power(max_value):\n    return math.pow(10, len(str(max_value)));\n\ndef plot_count(col):\n    plt.figure(figsize=(15, 12))\n\n    ax = sns.countplot(y=col,\n                  data=gt, order = gt[col].value_counts().index)\n    total = len(gt[col])\n    for p in ax.patches:\n        percentage = '{:.2f}%'.format(p.get_width()\/total*100)\n        x= p.get_x()+p.get_width()\n        y= p.get_y()+p.get_height()\n        ax.annotate(percentage, (x, y))\n    plt.title('Count and Percentage of different '+col.split('_')[0]+' types')\n    ax.set_xscale('log')\n    max_value = generate_tenth_power(gt[col].value_counts().max())\n    ax.set_xticks([max_value*0.0005,max_value*0.001,max_value*0.005,max_value*0.01, \n                   max_value*0.05,max_value*0.1,max_value*0.5,max_value])\n    ax.xaxis.set_major_formatter(formatter)\n    plt.ylabel(col.split('_')[0].title()+' types')\n    plt.show()","ad2140ee":"plot_count('attack_type')","c4f82f9c":"plot_count('weapon_type')","e0fbf406":"plot_count('target_type')","d2ae1f6c":"plot_count('region_name')","0b996875":"def plot_double_category(col,a,b):\n    plt.figure(figsize=(6, 6))\n    ax = sns.countplot(y=col,data=gt,order=gt[col].value_counts().index)\n    total = len(gt[col])\n    for p in ax.patches:\n        percentage = '{:.2f}%'.format(p.get_width()\/total*100)\n        x= p.get_x()+p.get_width()\n        y= p.get_y()+p.get_height()\n        ax.annotate(percentage, (x, y))\n    plt.title('Count and Percentage of '+a.lower()+' vs '+b.lower())\n    ax.set_xscale('log')\n    max_value = generate_tenth_power(gt[col].value_counts().max())\n    ax.set_xticks([max_value*0.0005,max_value*0.001,max_value*0.005,max_value*0.01, \n                   max_value*0.05,max_value*0.1,max_value*0.5,max_value])\n    ax.xaxis.set_major_formatter(formatter)\n    plt.yticks([0,1],[a,b])\n    plt.ylabel('')\n    plt.show()  ","9161d043":"plot_double_category('extended','Attacks lasting one day','Extended attacks')","63528215":"plot_double_category('suicide','Non suicidal attacks','Suicidal attacks')","8cede3bb":"wg = gt.groupby('weapon_type',as_index=False).count()\nwg.sort_values('eventid',ascending=False,inplace=True)\nwg.rename(columns={'eventid':'Total attacks'},inplace =True)\nweapon_group= wg[['weapon_type','Total attacks']]\ntop_weapons = weapon_group.loc[weapon_group[\"Total attacks\"]>10000]\ntop_weapons_list = list(top_weapons['weapon_type'])\n\nplt.figure(figsize=(18, 12))\nax= sns.countplot(x='attack_type',hue='weapon_type',data=gt,hue_order=top_weapons_list)\nplt.title('Count of top weapons used in different attack types')\nplt.xticks(rotation = 60)\nax.set_yscale('log')\nax.yaxis.set_major_formatter(formatter)\nplt.ylabel('Count of weapons used')\nplt.xlabel('Attack types')\nplt.legend(title='Top weapon types',loc='upper left',bbox_to_anchor=(1.0, 1.0))\nplt.show()","3b61578b":"def plot_tree(col,title):\n    temp1 = gt.groupby(col,as_index = False).sum()[[col,'casualities']]\n    temp1[\"node\"] =  title.title()\n    fig = px.treemap(temp1, path=['node', col], values='casualities',template=\"seaborn\",\n                     title=\"Different \"+title+' and their resulting casualities')\n    fig.data[0].texttemplate = '<b>%{label} <\/b> <br>Casualities: %{value}'\n    fig.data[0].hovertemplate = '<b>%{label} <\/b> <br>Casualities: %{value}'\n    fig.show()","c96c6518":"plot_tree('attack_type','attack types')","b5cdd9fa":"plot_tree('weapon_type','weapon types')","a06a9a66":"plot_tree('target_type','target types')","9fbc69d0":"plot_tree('gname','terrorist groups')","4b37cb85":"plot_tree('region_name','regions of the world')","184c8f6d":"#Functions to generate custom groups based on total casualites or attack count\n\ndef create_yearwise_cas_group(col):\n    cas_sum = gt.groupby(['iyear',col],as_index=False).sum()\n    temp = cas_sum[['iyear',col,'casualities']]\n    cas_df= temp.loc[(temp.casualities > 0)]\n    cas_df.rename(columns={'iyear':'year'},inplace =True)\n    return cas_df\n\ndef create_yearwise_attacks_group(col):\n    att_sum = gt.groupby(['iyear',col],as_index=False).count()\n    temp = att_sum[['iyear',col,'eventid']]\n    att_df = temp.loc[(temp.eventid > 0)]\n    att_df.rename(columns={'iyear':'Year','eventid':'Number of attacks'},inplace =True)\n    return att_df","a44d6c6a":"def plot_heatmap(col):\n    temp_df = create_yearwise_cas_group(col)\n    fig = go.Figure(data=go.Heatmap(\n        z=temp_df['casualities'],\n        x=temp_df['year'],\n        y=temp_df[col],\n        zmin=10,\n        zmax=10000,\n        colorscale='burg', \n        colorbar=dict(\n            title='Casualities',\n            tickmode=\"array\",\n            tickvals = [100,1000,2500,5000,7500,10000],\n            ticktext=[100,1000,2500,5000,7500,'10000 & above'],\n            ticks='outside' ),\n        hoverongaps = False,\n        text=temp_df['casualities'],\n        hovertemplate = '<b>%{y} <\/b><br>Year: %{x} <br>Casualities: %{z}<extra><\/extra>'))        \n    fig.update_layout(\n    yaxis = dict(dtick = 1,title=str(col.split('_')[0]).title()+' types',\n                 categoryarray=temp_df[col].sort_values(ascending=False)),\n    xaxis= dict(title='Year'),\n    height=500,\n    title='Timeline of how casualities spread by different '+str(col.split('_')[0])+'s')\n    fig.show()","0ca71c4c":"plot_heatmap('attack_type')","956a81a2":"plot_heatmap('weapon_type')","cc103db2":"plot_heatmap('target_type')","5a87832d":"plot_heatmap('region_name')","972ba7f4":"world_cas = create_yearwise_cas_group('country')\nworld_attacks =  create_yearwise_attacks_group('country')\n\n#Dataframe containing terrorist attacks count and their resulting casualities\nresult = pd.concat([world_attacks,world_cas], axis=1, sort=False)\ncols = [x for x in range(result.shape[1])] \ncols.remove(3)\ncols.remove(4)\n\nworld_attacks_cas = result.iloc[:, cols]\nworld_attacks_cas['casualities'] = world_attacks_cas['casualities'].fillna(0).astype('int64')\nworld_attacks_cas = world_attacks_cas.rename(columns={'country':'Country'})\n\nfig = px.choropleth(world_attacks_cas, color='Number of attacks', locations='Country', locationmode='country names', \n                    color_continuous_scale=px.colors.sequential.amp, \n                    title='Terrorism and their resulting casualities around the world',\n                    custom_data=['casualities'],\n                    animation_frame=world_attacks_cas[\"Year\"])\n\nfig.data[0].hovertemplate = str(fig.data[0].hovertemplate)+'<br><b>Casualities= %{customdata}<b>'\n\n#updating year frames to include casualities count\nfor i in range(len(fig.frames)):\n    fig.frames[i].data[0].hovertemplate =str(fig.frames[i].data[0].hovertemplate)+'<br><b>Casualities= %{customdata}<b>'\nfig.show()","006dbb0f":"usa_event_count = gt.groupby(['iyear','country','provstate'],as_index=False).count()\ntemp= usa_event_count.loc[(usa_event_count.country=='United States')&(usa_event_count.eventid > 0)]\nusa_event_group = temp[['iyear','country','provstate','eventid']]\nusa_cas_sum = gt.groupby(['iyear','country','provstate'],as_index=False).sum()\ntemp= usa_cas_sum.loc[(usa_cas_sum.country=='United States')&(usa_cas_sum.casualities > 0)]\nusa_cas_group = temp[['iyear','country','provstate','casualities']]\n\n#Dataframe containing terrorist attacks count and their resulting casualities\nresult = pd.concat([usa_event_group, usa_cas_group], axis=1, sort=False)\ncols = [x for x in range(result.shape[1])] \ncols.remove(4)\ncols.remove(5)\ncols.remove(6)\nus_states_attacks_cas = result.iloc[:, cols]\nus_states_attacks_cas['casualities'] = us_states_attacks_cas['casualities'].fillna(0).astype('int64')\nus_states_attacks_cas = us_states_attacks_cas.rename(columns={'iyear':'Year','eventid':'Number of attacks'})\n\nus_code = {'Alabama': 'AL', 'Alaska': 'AK', 'American Samoa': 'AS','Arizona': 'AZ', 'Arkansas': 'AR', \n    'California': 'CA','Colorado': 'CO','Connecticut': 'CT','Delaware': 'DE', 'District of Columbia': 'DC', \n    'Florida': 'FL', 'Georgia': 'GA', 'Guam': 'GU', 'Hawaii': 'HI', 'Idaho': 'ID', 'Illinois': 'IL',\n    'Indiana': 'IN','Iowa': 'IA','Kansas': 'KS','Kentucky': 'KY','Louisiana': 'LA','Maine': 'ME',\n    'Maryland': 'MD','Massachusetts': 'MA','Michigan': 'MI','Minnesota': 'MN','Mississippi': 'MS',\n    'Missouri': 'MO','Montana': 'MT','Nebraska': 'NE','Nevada': 'NV','New Hampshire': 'NH', 'New Jersey': 'NJ',\n    'New Mexico': 'NM', 'New York': 'NY', 'North Carolina': 'NC', 'North Dakota': 'ND', 'Northern Mariana Islands':'MP',\n    'Ohio': 'OH', 'Oklahoma': 'OK', 'Oregon': 'OR', 'Pennsylvania': 'PA', 'Puerto Rico': 'PR',\n    'Rhode Island': 'RI', 'South Carolina': 'SC', 'South Dakota': 'SD', 'Tennessee': 'TN', 'Texas': 'TX',\n    'Utah': 'UT', 'Vermont': 'VT', 'Virgin Islands': 'VI', 'Virginia': 'VA', 'Washington': 'WA',\n    'West Virginia': 'WV', 'Wisconsin': 'WI', 'Wyoming': 'WY'}\n\n\nus_states_attacks_cas['State'] = us_states_attacks_cas['provstate'].map(us_code)\n\nfig = px.choropleth(us_states_attacks_cas, color='Number of attacks', locations='State', locationmode=\"USA-states\", \n                    scope=\"usa\", \n                    color_continuous_scale=px.colors.sequential.amp, \n                    title='Terrorism and their resulting casualities in USA',\n                    custom_data=['casualities'],\n                    animation_frame=us_states_attacks_cas[\"Year\"])\n\nfig.data[0].hovertemplate = str(fig.data[0].hovertemplate)+'<br><b>Casualities= %{customdata}<b>'\n\n#updating year frames to include casualities count\nfor i in range(len(fig.frames)):\n    fig.frames[i].data[0].hovertemplate =str(fig.frames[i].data[0].hovertemplate)+'<br><b>Casualities= %{customdata}<b>'\nfig.show()","7427f344":"ycr_group = gt.groupby(['iyear','region_name','country'],as_index= False).count() \nycr_events= ycr_group[['iyear','region_name','country','eventid']]\nall_regions = list(ycr_events['region_name'].unique())\ncolor_code = ['#C39953','#A17A74','#6D9BC3','#CD607E','#6EAEA1','#E97451','#FC80A5','#C9A0DC',\n                '#76D7EA','#FFCBA4','#FCD667','#29AB87']\ncolors = dict(zip(all_regions, color_code))\ngroup_cr = ycr_events.set_index('country')['region_name'].to_dict()\n\nfig, ax = plt.subplots(figsize=(16, 12))\n\ndef plot_racing_bars(current_year):\n    year_df = ycr_events.loc[ycr_events['iyear']==current_year].sort_values(by='eventid').tail(10)\n    ax.clear()\n    ax.barh(year_df['country'], year_df['eventid'], color=[colors[group_cr[x]] for x in year_df['country']])\n    dx = year_df['eventid'].max() \/ 200\n    for i, (value, name) in enumerate(zip(year_df['eventid'], year_df['country'])):\n        ax.text(value-dx, i,     name,           size=14, weight=600, ha='right', va='bottom')\n        ax.text(value-dx, i-.25, group_cr[name], size=10, color='#444444', ha='right', va='baseline')\n        ax.text(value+dx, i,     value,  size=14, ha='left',  va='center')\n    ax.text(1, 0.4, current_year, transform=ax.transAxes, color='#777777', size=46, ha='right', weight=800)\n    ax.text(0, 1.06, 'Total terrorist attacks', transform=ax.transAxes, size=12, color='#777777')    \n    ax.set_xticks(range(0,(year_df['eventid'].max()+(int(year_df['eventid'].max()\/20))),int(year_df['eventid'].max()\/20)))\n    ax.xaxis.set_ticks_position('top')\n    ax.tick_params(axis='x', colors='#777777', labelsize=12)\n    ax.set_yticks([])   \n    ax.margins(0, 0.01)\n    ax.grid(which='major', axis='x', linestyle='-')\n    ax.set_axisbelow(True)\n    ax.text(0, 1.15, 'Top 10 countries affected by terrorism every year from '\n            + str(ycr_events['iyear'].min())+' to '+ str(ycr_events['iyear'].max()),\n            transform=ax.transAxes, size=24, weight=600, ha='left', va='top')\n    plt.box(False)\n    plt.legend()\n    plt.close()\n\nanimator = animation.FuncAnimation(fig, plot_racing_bars, frames=ycr_events['iyear'].unique(),\n                                   save_count=ycr_events['iyear'].nunique())\nHTML(animator.to_jshtml())","dc3ca44b":"This is my first notebook on Kaggle. Kindly upvote the notebook to help me get motivated. Also please provide your valuable thoughts if any in the comments.  ","e872e466":"Preparing data","de7dc59d":"Dataset Information","a995688e":"A detailed analysis on how terrorism spread around the world and the impact caused. \n","25a36617":"Imports and settings","9b2d7bea":"Sample Data","7a343171":"Acknowledgements:\n\n   1) Helpul Kaggle notebook for this analysis: https:\/\/www.kaggle.com\/imdevskp\/covid-19-analysis-visualization-comparisons\/\n  ","4deaf4ce":"2) Animated bar chart is inspired from this example https:\/\/github.com\/pratapvardhan\/notebooks\/blob\/master\/barchart-race-matplotlib.ipynb","2f730f03":"Top weapons and their usage in different attack types","3ed8ed3d":"Overview:","26929c8d":"Terrorist attack over the years"}}