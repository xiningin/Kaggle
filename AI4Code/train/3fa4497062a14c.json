{"cell_type":{"c0a152c0":"code","4ad59fcb":"code","2d38d4ed":"code","430fe073":"code","05d54e18":"code","2838263d":"code","737f31f0":"code","f0cad964":"code","066d4b53":"code","3348513b":"code","170fb58e":"code","45ce61f8":"code","08d9201b":"code","24d6ca30":"code","0ed360eb":"code","c0b1b309":"code","a8fca513":"code","cf54552e":"code","45ddd48f":"code","bc66b411":"code","468df3fa":"code","97b04ecc":"code","6704d44e":"code","710382c7":"code","6a16fc8d":"code","2a9d3c65":"code","f637ff08":"code","eab2314e":"code","ef7bada1":"code","b7993994":"code","bb387fc5":"code","b25d0b01":"code","12560d70":"code","9f194bcb":"code","f4bc2da5":"code","1b07b833":"code","4bf72257":"code","158737c4":"code","c2063375":"code","3c09fb90":"code","be8e6aa8":"code","c9e873de":"code","ea0711e2":"code","994e1d8b":"code","edbdac5a":"code","ed7089fc":"code","d8816b8f":"code","0fba6391":"code","273b2277":"code","d9f7459e":"code","ba96f767":"code","64379c2b":"code","05562ea8":"code","59deec01":"code","342790d8":"code","e87e249d":"code","071feb49":"code","242fd2e5":"code","bf2ca1db":"code","f75d2d25":"code","8d6f3f8f":"code","007893bc":"code","0b960112":"markdown","76b40d31":"markdown","3b142880":"markdown","12ecb8b9":"markdown","2622f3fc":"markdown","5eede5d0":"markdown"},"source":{"c0a152c0":"import os, gc, pickle, copy, datetime, warnings\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport lightgbm as lgb\nfrom sklearn import metrics\npd.set_option('display.max_columns', 100)\nwarnings.filterwarnings('ignore')\nprint('open libraries')","4ad59fcb":"print(\"Print Directories\")\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","2d38d4ed":"df_train = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-2\/train.csv\")\n#print(df_train.shape)\ndf_train.head()","430fe073":"df_test = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-2\/test.csv\")\n#print(df_test.shape)\ndf_test.head()","05d54e18":"# concat train and test\ndf_traintest = pd.concat([df_train, df_test])\nprint(df_train.shape, df_test.shape, df_traintest.shape)","2838263d":"# concat Country\/Region and Province\/State\ndef func(x):\n    try:\n        x_new = x['Country_Region'] + \"\/\" + x['Province_State']\n    except:\n        x_new = x['Country_Region']\n    return x_new\n        \ndf_traintest['place_id'] = df_traintest.apply(lambda x: func(x), axis=1)\ntmp = np.sort(df_traintest['place_id'].unique())\nprint(\"num unique places: {}\".format(len(tmp)))\nprint(tmp[:10])","737f31f0":"# get place list\nplaces = np.sort(df_traintest['place_id'].unique())\nplaces","f0cad964":"# process date\ndf_traintest['Date'] = pd.to_datetime(df_traintest['Date'])\ndf_traintest['day'] = df_traintest['Date'].apply(lambda x: x.dayofyear).astype(np.int16)\ndf_traintest.tail()","066d4b53":"df_traintest.to_csv(\"date_check.csv\", index=None)","3348513b":"# calc cases, fatalities, recover per day\ndf_traintest2 = copy.deepcopy(df_traintest)\ndf_traintest2['cases\/day'] = 0\ndf_traintest2['fatal\/day'] = 0\ntmp_list = np.zeros(len(df_traintest2))\nfor place in places:\n    tmp = df_traintest2['ConfirmedCases'][df_traintest2['place_id']==place].values\n    tmp[1:] -= tmp[:-1]\n    df_traintest2['cases\/day'][df_traintest2['place_id']==place] = tmp\n    tmp = df_traintest2['Fatalities'][df_traintest2['place_id']==place].values\n    tmp[1:] -= tmp[:-1]\n    df_traintest2['fatal\/day'][df_traintest2['place_id']==place] = tmp\nprint(df_traintest2.shape)\ndf_traintest2[df_traintest2['place_id']=='China\/Hubei'].head()","170fb58e":"# aggregate cases and fatalities\nprint(\"create aggregation functions\")\ndef do_aggregation(df, col, mean_range):\n    df_new = copy.deepcopy(df)\n    col_new = '{}_({}-{})'.format(col, mean_range[0], mean_range[1])\n    df_new[col_new] = 0\n    tmp = df_new[col].rolling(mean_range[1]-mean_range[0]+1).mean()\n    df_new[col_new][mean_range[0]:] = tmp[:-(mean_range[0])]\n    df_new[col_new][pd.isna(df_new[col_new])] = 0\n    return df_new[[col_new]].reset_index(drop=True)\n\ndef do_aggregations(df):\n    df = pd.concat([df, do_aggregation(df, 'cases\/day', [1,1]).reset_index(drop=True)], axis=1)\n    df = pd.concat([df, do_aggregation(df, 'cases\/day', [1,7]).reset_index(drop=True)], axis=1)\n    df = pd.concat([df, do_aggregation(df, 'cases\/day', [8,14]).reset_index(drop=True)], axis=1)\n    df = pd.concat([df, do_aggregation(df, 'cases\/day', [15,21]).reset_index(drop=True)], axis=1)\n    df = pd.concat([df, do_aggregation(df, 'fatal\/day', [1,1]).reset_index(drop=True)], axis=1)\n    df = pd.concat([df, do_aggregation(df, 'fatal\/day', [1,7]).reset_index(drop=True)], axis=1)\n    df = pd.concat([df, do_aggregation(df, 'fatal\/day', [8,14]).reset_index(drop=True)], axis=1)\n    df = pd.concat([df, do_aggregation(df, 'fatal\/day', [15,21]).reset_index(drop=True)], axis=1)\n    for threshold in [1, 10, 100]:\n        days_under_threshold = (df['ConfirmedCases']<threshold).sum()\n        tmp = df['day'].values - 22 - days_under_threshold\n        tmp[tmp<=0] = 0\n        df['days_since_{}cases'.format(threshold)] = tmp\n            \n    for threshold in [1, 10, 100]:\n        days_under_threshold = (df['Fatalities']<threshold).sum()\n        tmp = df['day'].values - 22 - days_under_threshold\n        tmp[tmp<=0] = 0\n        df['days_since_{}fatal'.format(threshold)] = tmp\n    \n    # process China\/Hubei\n    if df['place_id'][0]=='China\/Hubei':\n        df['days_since_1cases'] += 35 # 2019\/12\/8\n        df['days_since_10cases'] += 35-13 # 2019\/12\/8-2020\/1\/2 assume 2019\/12\/8+13\n        df['days_since_100cases'] += 4 # 2020\/1\/18\n        df['days_since_1fatal'] += 13 # 2020\/1\/9\n    return df","45ce61f8":"df_traintest3 = []\nfor place in places[:]:\n    df_tmp = df_traintest2[df_traintest2['place_id']==place].reset_index(drop=True)\n    df_tmp = do_aggregations(df_tmp)\n    df_traintest3.append(df_tmp)\ndf_traintest3 = pd.concat(df_traintest3).reset_index(drop=True)\ndf_traintest3[df_traintest3['place_id']=='China\/Hubei'].head()","08d9201b":"# add Smoking rate per country\n# data of smoking rate is obtained from https:\/\/ourworldindata.org\/smoking\ndf_smoking = pd.read_csv(\"..\/input\/smokingstats\/share-of-adults-who-smoke.csv\")\nprint(np.sort(df_smoking['Entity'].unique())[:10])\ndf_smoking.head()","24d6ca30":"# extract newest data\ndf_smoking_recent = df_smoking.sort_values('Year', ascending=False).reset_index(drop=True)\ndf_smoking_recent = df_smoking_recent[df_smoking_recent['Entity'].duplicated()==False]\ndf_smoking_recent['Country\/Region'] = df_smoking_recent['Entity']\ndf_smoking_recent['SmokingRate'] = df_smoking_recent['Smoking prevalence, total (ages 15+) (% of adults)']\ndf_smoking_recent.head()","0ed360eb":"# merge\ndf_traintest4 = pd.merge(df_traintest3, df_smoking_recent[['Country\/Region', 'SmokingRate']], \n                         left_on='Country_Region', right_on ='Country\/Region',how='left')\n#print(df_traintest4.shape)\ndf_traintest4.tail()","c0b1b309":"# fill na with world smoking rate\nSmokingRate = df_smoking_recent['SmokingRate'][df_smoking_recent['Entity']=='World'].values[0]\nprint(\"Smoking rate of the world: {:.6f}\".format(SmokingRate))\ndf_traintest4['SmokingRate'][pd.isna(df_traintest4['SmokingRate'])] = SmokingRate\ndf_traintest4.head()","a8fca513":"# add data from World Economic Outlook Database\n# https:\/\/www.imf.org\/external\/pubs\/ft\/weo\/2017\/01\/weodata\/index.aspx\ndf_weo = pd.read_csv(\"..\/input\/smokingstats\/WEO.csv\")\ndf_weo.head()","cf54552e":"print(df_weo['Subject Descriptor'].unique())","45ddd48f":"subs  = df_weo['Subject Descriptor'].unique()[:-1]\ndf_weo_agg = df_weo[['Country']][df_weo['Country'].duplicated()==False].reset_index(drop=True)\nfor sub in subs[:]:\n    df_tmp = df_weo[['Country', '2019']][df_weo['Subject Descriptor']==sub].reset_index(drop=True)\n    df_tmp = df_tmp[df_tmp['Country'].duplicated()==False].reset_index(drop=True)\n    df_tmp.columns = ['Country', sub]\n    df_weo_agg = df_weo_agg.merge(df_tmp, on='Country', how='left')\ndf_weo_agg.columns = [\"\".join (c if c.isalnum() else \"_\" for c in str(x)) for x in df_weo_agg.columns]\ndf_weo_agg.columns\ndf_weo_agg['Country\/Region'] = df_weo_agg['Country']\ndf_weo_agg.head()","bc66b411":"# merge\ndf_traintest5 = pd.merge(df_traintest4, df_weo_agg, left_on='Country_Region',right_on='Country\/Region', how='left')\nprint(df_traintest5.shape)\ndf_traintest5.head()","468df3fa":"# add Life expectancy\n# Life expectancy at birth obtained from http:\/\/hdr.undp.org\/en\/data\ndf_life = pd.read_csv(\"..\/input\/smokingstats\/Life expectancy at birth.csv\")\ntmp = df_life.iloc[:,1].values.tolist()\ndf_life = df_life[['Country', '2018']]\ndef func(x):\n    x_new = 0\n    try:\n        x_new = float(x.replace(\",\", \"\"))\n    except:\n#         print(x)\n        x_new = np.nan\n    return x_new\n    \ndf_life['2018'] = df_life['2018'].apply(lambda x: func(x))\ndf_life.head()","97b04ecc":"df_life = df_life[['Country', '2018']]\ndf_life.columns = ['Country\/Region', 'LifeExpectancy']","6704d44e":"# merge\ndf_traintest6 = pd.merge(df_traintest5, df_life, left_on='Country_Region',right_on='Country\/Region', how='left')\nprint(len(df_traintest6))\ndf_traintest6.head()","710382c7":"# add additional info from countryinfo dataset\ndf_country = pd.read_csv(\"..\/input\/countryinfo\/covid19countryinfo.csv\")\ndf_country.head()","6a16fc8d":"df_country['Country\/Region'] = df_country['country']\ndf_country = df_country[df_country['country'].duplicated()==False]","2a9d3c65":"print(df_country[df_country['country'].duplicated()].shape)","f637ff08":"df_country[df_country['country'].duplicated()]","eab2314e":"df_traintest7 = pd.merge(df_traintest6, \n                         df_country.drop(['tests', 'testpop', 'country'], axis=1), \n                         left_on='Country_Region',right_on='Country\/Region', how='left')\nprint(df_traintest7.shape)\ndf_traintest7.head()","ef7bada1":"def encode_label(df, col, freq_limit=0):\n    df[col][pd.isna(df[col])] = 'nan'\n    tmp = df[col].value_counts()\n    cols = tmp.index.values\n    freq = tmp.values\n    num_cols = (freq>=freq_limit).sum()\n    print(\"col: {}, num_cat: {}, num_reduced: {}\".format(col, len(cols), num_cols))\n\n    col_new = '{}_le'.format(col)\n    df_new = pd.DataFrame(np.ones(len(df), np.int16)*(num_cols-1), columns=[col_new])\n    for i, item in enumerate(cols[:num_cols]):\n        df_new[col_new][df[col]==item] = i\n\n    return df_new\n\ndef get_df_le(df, col_index, col_cat):\n    df_new = df[[col_index]]\n    for col in col_cat:\n        df_tmp = encode_label(df, col)\n        df_new = pd.concat([df_new, df_tmp], axis=1)\n    return df_new\n\nprint('encoding labels')","b7993994":"df_traintest7['id'] = np.arange(len(df_traintest7))\ndf_le = get_df_le(df_traintest7, 'id', ['Country_Region', 'Province_State'])\ndf_traintest8 = pd.merge(df_traintest7, df_le, on='id', how='left')","bb387fc5":"df_traintest8['cases\/day'] = df_traintest8['cases\/day'].astype(np.float)\ndf_traintest8['fatal\/day'] = df_traintest8['fatal\/day'].astype(np.float)","b25d0b01":"df_traintest8.head()","12560d70":"# covert object type to float\ndef func(x):\n    x_new = 0\n    try:\n        x_new = float(x.replace(\",\", \"\"))\n    except:\n#         print(x)\n        x_new = np.nan\n    return x_new\ncols = [\n    'Gross_domestic_product__constant_prices', \n    'Gross_domestic_product__current_prices', \n    'Gross_domestic_product__deflator', \n    'Gross_domestic_product_per_capita__constant_prices', \n    'Gross_domestic_product_per_capita__current_prices', \n    'Output_gap_in_percent_of_potential_GDP', \n    'Gross_domestic_product_based_on_purchasing_power_parity__PPP__valuation_of_country_GDP', \n    'Gross_domestic_product_based_on_purchasing_power_parity__PPP__per_capita_GDP', \n    'Gross_domestic_product_based_on_purchasing_power_parity__PPP__share_of_world_total', \n    'Implied_PPP_conversion_rate', 'Total_investment', \n    'Gross_national_savings', 'Inflation__average_consumer_prices', \n    'Inflation__end_of_period_consumer_prices', \n    'Six_month_London_interbank_offered_rate__LIBOR_', \n    'Volume_of_imports_of_goods_and_services', \n    'Volume_of_Imports_of_goods', \n    'Volume_of_exports_of_goods_and_services', \n    'Volume_of_exports_of_goods', 'Unemployment_rate', 'Employment', 'Population', \n    'General_government_revenue', 'General_government_total_expenditure', \n    'General_government_net_lending_borrowing', 'General_government_structural_balance', \n    'General_government_primary_net_lending_borrowing', 'General_government_net_debt', \n    'General_government_gross_debt', 'Gross_domestic_product_corresponding_to_fiscal_year__current_prices', \n    'Current_account_balance', 'pop'\n]\nfor col in cols:\n    df_traintest8[col] = df_traintest8[col].apply(lambda x: func(x))  \nprint(df_traintest8['pop'].dtype)","9f194bcb":"def calc_score(y_true, y_pred):\n    y_true[y_true<0] = 0\n    score = metrics.mean_squared_error(np.log(y_true.clip(0, 1e10)+1), np.log(y_pred[:]+1))**0.5\n    return score","f4bc2da5":"# train model to predict fatalities\/day\n# params\nSEED = 42\nparams = {'num_leaves': 8,\n          'min_data_in_leaf': 5,  # 42,\n          'objective': 'regression',\n          'max_depth': 8,\n          'learning_rate': 0.02,\n          'boosting': 'gbdt',\n          'bagging_freq': 5,  # 5\n          'bagging_fraction': 0.8,  # 0.5,\n          'feature_fraction': 0.8201,\n          'bagging_seed': SEED,\n          'reg_alpha': 1,  # 1.728910519108444,\n          'reg_lambda': 4.9847051755586085,\n          'random_state': SEED,\n          'metric': 'mse',\n          'verbosity': 100,\n          'min_gain_to_split': 0.02,  # 0.01077313523861969,\n          'min_child_weight': 5,  # 19.428902804238373,\n          'num_threads': 6,\n          }\n","1b07b833":"# train model to predict fatalities\/day\ncol_target = 'fatal\/day'\ncol_var = [\n    #'Lat', 'Long',\n#     'days_since_1cases', \n#     'days_since_10cases', \n#     'days_since_100cases',\n#     'days_since_1fatal', \n#     'days_since_10fatal', 'days_since_100fatal',\n#     'days_since_1recov',\n#     'days_since_10recov', 'days_since_100recov', \n    'cases\/day_(1-1)', \n    'cases\/day_(1-7)', \n#     'cases\/day_(8-14)',  \n#     'cases\/day_(15-21)', \n    \n#     'fatal\/day_(1-1)', \n    'fatal\/day_(1-7)', \n    'fatal\/day_(8-14)', \n    'fatal\/day_(15-21)', \n    'SmokingRate',\n#     'Gross_domestic_product__constant_prices',\n#     'Gross_domestic_product__current_prices',\n#     'Gross_domestic_product__deflator',\n#     'Gross_domestic_product_per_capita__constant_prices',\n#     'Gross_domestic_product_per_capita__current_prices',\n#     'Output_gap_in_percent_of_potential_GDP',\n#     'Gross_domestic_product_based_on_purchasing_power_parity__PPP__valuation_of_country_GDP',\n#     'Gross_domestic_product_based_on_purchasing_power_parity__PPP__per_capita_GDP',\n#     'Gross_domestic_product_based_on_purchasing_power_parity__PPP__share_of_world_total',\n#     'Implied_PPP_conversion_rate', 'Total_investment',\n#     'Gross_national_savings', 'Inflation__average_consumer_prices',\n#     'Inflation__end_of_period_consumer_prices',\n#     'Six_month_London_interbank_offered_rate__LIBOR_',\n#     'Volume_of_imports_of_goods_and_services', 'Volume_of_Imports_of_goods',\n#     'Volume_of_exports_of_goods_and_services', 'Volume_of_exports_of_goods',\n#     'Unemployment_rate', \n#     'Employment', 'Population',\n#     'General_government_revenue', 'General_government_total_expenditure',\n#     'General_government_net_lending_borrowing',\n#     'General_government_structural_balance',\n#     'General_government_primary_net_lending_borrowing',\n#     'General_government_net_debt', 'General_government_gross_debt',\n#     'Gross_domestic_product_corresponding_to_fiscal_year__current_prices',\n#     'Current_account_balance', \n#     'LifeExpectancy',\n#     'pop',\n    'density', \n#     'medianage', \n#     'urbanpop', \n#     'hospibed', 'smokers',\n]\ncol_cat = []\ndf_train = df_traintest8[(pd.isna(df_traintest8['ForecastId'])) & (df_traintest8['day']<71)]\ndf_valid = df_traintest8[(pd.isna(df_traintest8['ForecastId'])) & (df_traintest8['day']>=71) & (df_traintest8['day']<79)]\ndf_test = df_traintest8[pd.isna(df_traintest8['ForecastId'])==False]\nX_train = df_train[col_var]\nX_valid = df_valid[col_var]\ny_train = np.log(df_train[col_target].values.clip(0, 1e10)+1)\ny_valid = np.log(df_valid[col_target].values.clip(0, 1e10)+1)\ntrain_data = lgb.Dataset(X_train, label=y_train, categorical_feature=col_cat)\nvalid_data = lgb.Dataset(X_valid, label=y_valid, categorical_feature=col_cat)\nnum_round = 15000\nmodel = lgb.train(params, train_data, num_round, valid_sets=[train_data, valid_data],\n                  verbose_eval=100,\n                  early_stopping_rounds=150,)\n\nbest_itr = model.best_iteration","4bf72257":"y_true = df_valid['fatal\/day'].values\ny_pred = np.exp(model.predict(X_valid))-1\nscore = calc_score(y_true, y_pred)\nprint(\"{:.6f}\".format(score))","158737c4":"# display feature importance\ntmp = pd.DataFrame()\ntmp[\"feature\"] = col_var\ntmp[\"importance\"] = model.feature_importance()\ntmp = tmp.sort_values('importance', ascending=False)\ntmp","c2063375":"df_train = df_traintest8[(pd.isna(df_traintest8['ForecastId'])) & (df_traintest8['day']<79)]\ndf_valid = df_traintest8[(pd.isna(df_traintest8['ForecastId'])) & (df_traintest8['day']<79)]\n# df_valid = df_traintest8[(pd.isna(df_traintest8['ForecastId'])) & (df_traintest8['day']>=61)]\ndf_test = df_traintest8[pd.isna(df_traintest8['ForecastId'])==False]\nX_train = df_train[col_var]\nX_valid = df_valid[col_var]\ny_train = np.log(df_train[col_target].values.clip(0, 1e10)+1)\ny_valid = np.log(df_valid[col_target].values.clip(0, 1e10)+1)\ntrain_data = lgb.Dataset(X_train, label=y_train, categorical_feature=col_cat)\nvalid_data = lgb.Dataset(X_valid, label=y_valid, categorical_feature=col_cat)\nmodel = lgb.train(params, train_data, best_itr, valid_sets=[train_data, valid_data],\n                  verbose_eval=100,\n                  early_stopping_rounds=150,)","3c09fb90":"# train model to predict fatalities\/day\ncol_target2 = 'cases\/day'\ncol_var2 = [\n#    'Lat', 'Long',\n#     'days_since_1cases', \n    'days_since_10cases', #selected\n#     'days_since_100cases',\n#     'days_since_1fatal', \n#     'days_since_10fatal',\n#     'days_since_100fatal',\n#     'days_since_1recov',\n#     'days_since_10recov', 'days_since_100recov', \n    'cases\/day_(1-1)', \n    'cases\/day_(1-7)', \n    'cases\/day_(8-14)',  \n    'cases\/day_(15-21)', \n    \n#     'fatal\/day_(1-1)', \n#     'fatal\/day_(1-7)', \n#     'fatal\/day_(8-14)', \n#     'fatal\/day_(15-21)', \n#     'recov\/day_(1-1)', 'recov\/day_(1-7)', \n#     'recov\/day_(8-14)',  'recov\/day_(15-21)',\n#     'active_(1-1)', \n#     'active_(1-7)', \n#     'active_(8-14)',  'active_(15-21)', \n#     'SmokingRate',\n#     'Gross_domestic_product__constant_prices',\n#     'Gross_domestic_product__current_prices',\n#     'Gross_domestic_product__deflator',\n#     'Gross_domestic_product_per_capita__constant_prices',\n#     'Gross_domestic_product_per_capita__current_prices',\n#     'Output_gap_in_percent_of_potential_GDP',\n#     'Gross_domestic_product_based_on_purchasing_power_parity__PPP__valuation_of_country_GDP',\n#     'Gross_domestic_product_based_on_purchasing_power_parity__PPP__per_capita_GDP',\n#     'Gross_domestic_product_based_on_purchasing_power_parity__PPP__share_of_world_total',\n#     'Implied_PPP_conversion_rate', 'Total_investment',\n#     'Gross_national_savings', 'Inflation__average_consumer_prices',\n#     'Inflation__end_of_period_consumer_prices',\n#     'Six_month_London_interbank_offered_rate__LIBOR_',\n#     'Volume_of_imports_of_goods_and_services', 'Volume_of_Imports_of_goods',\n#     'Volume_of_exports_of_goods_and_services', 'Volume_of_exports_of_goods',\n#     'Unemployment_rate', \n#     'Employment', \n#     'Population',\n#     'General_government_revenue', 'General_government_total_expenditure',\n#     'General_government_net_lending_borrowing',\n#     'General_government_structural_balance',\n#     'General_government_primary_net_lending_borrowing',\n#     'General_government_net_debt', 'General_government_gross_debt',\n#     'Gross_domestic_product_corresponding_to_fiscal_year__current_prices',\n#     'Current_account_balance', \n#     'LifeExpectancy',\n#     'pop',\n#     'density', \n#     'medianage', \n#     'urbanpop', \n#     'hospibed', 'smokers', \n]\ncol_cat = []\ndf_train = df_traintest8[(pd.isna(df_traintest8['ForecastId'])) & (df_traintest8['day']<71)]\ndf_valid = df_traintest8[(pd.isna(df_traintest8['ForecastId'])) & (df_traintest8['day']>=71) & (df_traintest8['day']<79)]\n# df_valid = df_traintest8[(pd.isna(df_traintest8['ForecastId'])) & (df_traintest8['day']>=61)]\ndf_test = df_traintest8[pd.isna(df_traintest8['ForecastId'])==False]\nX_train = df_train[col_var2]\nX_valid = df_valid[col_var2]\ny_train = np.log(df_train[col_target2].values.clip(0, 1e10)+1)\ny_valid = np.log(df_valid[col_target2].values.clip(0, 1e10)+1)\ntrain_data = lgb.Dataset(X_train, label=y_train, categorical_feature=col_cat)\nvalid_data = lgb.Dataset(X_valid, label=y_valid, categorical_feature=col_cat)\nmodel2 = lgb.train(params, train_data, num_round, valid_sets=[train_data, valid_data],\n                  verbose_eval=100,\n                  early_stopping_rounds=150,)\nbest_itr = model2.best_iteration","be8e6aa8":"y_true = df_valid['cases\/day'].values\ny_pred = np.exp(model2.predict(X_valid))-1\nscore = calc_score(y_true, y_pred)\nprint(\"{:.6f}\".format(score))\n","c9e873de":"df_train = df_traintest8[(pd.isna(df_traintest8['ForecastId'])) & (df_traintest8['day']<79)]\ndf_valid = df_traintest8[(pd.isna(df_traintest8['ForecastId'])) & (df_traintest8['day']<79)]\n# df_valid = df_traintest8[(pd.isna(df_traintest8['ForecastId'])) & (df_traintest8['day']>=61)]\ndf_test = df_traintest8[pd.isna(df_traintest8['ForecastId'])==False]\nX_train = df_train[col_var2]\nX_valid = df_valid[col_var2]\ny_train = np.log(df_train[col_target2].values.clip(0, 1e10)+1)\ny_valid = np.log(df_valid[col_target2].values.clip(0, 1e10)+1)\ntrain_data = lgb.Dataset(X_train, label=y_train, categorical_feature=col_cat)\nvalid_data = lgb.Dataset(X_valid, label=y_valid, categorical_feature=col_cat)\nmodel2 = lgb.train(params, train_data, best_itr, valid_sets=[train_data, valid_data],\n                  verbose_eval=100,\n                  early_stopping_rounds=150,)","ea0711e2":"# train model to predict fatalities\/day\ndf_train = df_traintest8[(pd.isna(df_traintest8['ForecastId'])) & (df_traintest8['day']<79)]\ndf_valid = df_traintest8[(pd.isna(df_traintest8['ForecastId'])) & (df_traintest8['day']>=79)]\ndf_test = df_traintest8[pd.isna(df_traintest8['ForecastId'])==False]\nX_train = df_train[col_var]\nX_valid = df_valid[col_var]\ny_train = np.log(df_train[col_target].values.clip(0, 1e10)+1)\ny_valid = np.log(df_valid[col_target].values.clip(0, 1e10)+1)\ntrain_data = lgb.Dataset(X_train, label=y_train, categorical_feature=col_cat)\nvalid_data = lgb.Dataset(X_valid, label=y_valid, categorical_feature=col_cat)\nmodel_pri = lgb.train(params, train_data, num_round, valid_sets=[train_data, valid_data],\n                  verbose_eval=100,\n                  early_stopping_rounds=150,)\nbest_itr = model_pri.best_iteration","994e1d8b":"df_train = df_traintest8[(pd.isna(df_traintest8['ForecastId']))]\ndf_valid = df_traintest8[(pd.isna(df_traintest8['ForecastId']))]\n# df_valid = df_traintest8[(pd.isna(df_traintest8['ForecastId'])) & (df_traintest8['day']>=61)]\ndf_test = df_traintest8[pd.isna(df_traintest8['ForecastId'])==False]\nX_train = df_train[col_var]\nX_valid = df_valid[col_var]\ny_train = np.log(df_train[col_target].values.clip(0, 1e10)+1)\ny_valid = np.log(df_valid[col_target].values.clip(0, 1e10)+1)\ntrain_data = lgb.Dataset(X_train, label=y_train, categorical_feature=col_cat)\nvalid_data = lgb.Dataset(X_valid, label=y_valid, categorical_feature=col_cat)\nmodel_pri = lgb.train(params, train_data, best_itr, valid_sets=[train_data, valid_data],\n                  verbose_eval=100,\n                  early_stopping_rounds=150,)\n","edbdac5a":"# train model to predict fatalities\/day\ndf_train = df_traintest8[(pd.isna(df_traintest8['ForecastId'])) & (df_traintest8['day']<79)]\ndf_valid = df_traintest8[(pd.isna(df_traintest8['ForecastId'])) & (df_traintest8['day']>=79)]\n# df_valid = df_traintest8[(pd.isna(df_traintest8['ForecastId'])) & (df_traintest8['day']>=61)]\ndf_test = df_traintest8[pd.isna(df_traintest8['ForecastId'])==False]\nX_train = df_train[col_var2]\nX_valid = df_valid[col_var2]\ny_train = np.log(df_train[col_target2].values.clip(0, 1e10)+1)\ny_valid = np.log(df_valid[col_target2].values.clip(0, 1e10)+1)\ntrain_data = lgb.Dataset(X_train, label=y_train, categorical_feature=col_cat)\nvalid_data = lgb.Dataset(X_valid, label=y_valid, categorical_feature=col_cat)\nmodel2_pri = lgb.train(params, train_data, num_round, valid_sets=[train_data, valid_data],\n                  verbose_eval=100,\n                  early_stopping_rounds=150,)\nbest_itr = model2_pri.best_iteration","ed7089fc":"#df_traintest8.columns\ndf_traintest8[['day','Date']][df_traintest8.day==79]","d8816b8f":"df_train = df_traintest8[(pd.isna(df_traintest8['ForecastId']))]\ndf_valid = df_traintest8[(pd.isna(df_traintest8['ForecastId']))]\n# df_valid = df_traintest8[(pd.isna(df_traintest8['ForecastId'])) & (df_traintest8['day']>=61)]\ndf_test = df_traintest8[pd.isna(df_traintest8['ForecastId'])==False]\nX_train = df_train[col_var2]\nX_valid = df_valid[col_var2]\ny_train = np.log(df_train[col_target2].values.clip(0, 1e10)+1)\ny_valid = np.log(df_valid[col_target2].values.clip(0, 1e10)+1)\ntrain_data = lgb.Dataset(X_train, label=y_train, categorical_feature=col_cat)\nvalid_data = lgb.Dataset(X_valid, label=y_valid, categorical_feature=col_cat)\nmodel2_pri = lgb.train(params, train_data, best_itr, valid_sets=[train_data, valid_data],\n                  verbose_eval=100,\n                  early_stopping_rounds=150,)\nbest_itr = model2_pri.best_iteration","0fba6391":"df_tmp = df_traintest8[(df_traintest8['day']<79) | (pd.isna(df_traintest8['ForecastId'])==False)].reset_index(drop=True)\ndf_tmp = df_tmp.drop([\n    'cases\/day_(1-1)', 'cases\/day_(1-7)', 'cases\/day_(8-14)', 'cases\/day_(15-21)', \n    'fatal\/day_(1-1)', 'fatal\/day_(1-7)', 'fatal\/day_(8-14)', 'fatal\/day_(15-21)',\n    'days_since_1cases', 'days_since_10cases', 'days_since_100cases',\n    'days_since_1fatal', 'days_since_10fatal', 'days_since_100fatal',\n                               ],  axis=1)\ndf_traintest9 = []\nfor i, place in enumerate(places[:]):\n    df_tmp2 = df_tmp[df_tmp['place_id']==place].reset_index(drop=True)\n    df_tmp2 = do_aggregations(df_tmp2)\n    df_traintest9.append(df_tmp2)\ndf_traintest9 = pd.concat(df_traintest9).reset_index(drop=True)\ndf_traintest9[df_traintest9['day']>68].head()","273b2277":"# Check the predictions of of Cases Public\nplace = 'Bhutan'\n# place = places[np.random.randint(len(places))]\n# place = 'Iran'\ndf_interest_base = df_traintest9[df_traintest9['place_id']==place].reset_index(drop=True)\ndf_interest = copy.deepcopy(df_interest_base)\ndf_interest['ConfirmedCases'] = df_interest['ConfirmedCases'].astype(np.float)\ndf_interest['cases\/day'] = df_interest['cases\/day'].astype(np.float)\ndf_interest['fatal\/day'] = df_interest['fatal\/day'].astype(np.float)\ndf_interest['Fatalities'] = df_interest['Fatalities'].astype(np.float)\ndf_interest['cases\/day'][df_interest['day']>=79] = -1\ndf_interest['fatal\/day'][df_interest['day']>=79] = -1\nlen_known = (df_interest['cases\/day']!=-1).sum()\nlen_unknown = (df_interest['cases\/day']==-1).sum()\nprint(\"len train: {}, len prediction: {}\".format(len_known, len_unknown))\nX_valid = df_interest[col_var][df_interest['day']>=79]\nX_valid2 = df_interest[col_var2][df_interest['day']>=79]\npred_f =  np.exp(model.predict(X_valid))-1\npred_c = np.exp(model2.predict(X_valid2))-1\ndf_interest['fatal\/day'][df_interest['day']>=79] = pred_f.clip(0, 1e10)\ndf_interest['cases\/day'][df_interest['day']>=79] = pred_c.clip(0, 1e10)\ndf_interest['Fatalities'] = np.cumsum(df_interest['fatal\/day'].values)\ndf_interest['ConfirmedCases'] = np.cumsum(df_interest['cases\/day'].values)\nfor j in range(len_unknown): # use predicted cases and fatal for next days' prediction\n    X_valid = df_interest[col_var].iloc[j+len_known]\n    X_valid2 = df_interest[col_var2].iloc[j+len_known]\n    pred_f = model.predict(X_valid)\n    pred_c = model2.predict(X_valid2)\n    pred_c = (np.exp(pred_c)-1).clip(0, 1e10)\n    pred_f = (np.exp(pred_f)-1).clip(0, 1e10)\n    df_interest['fatal\/day'][j+len_known] = pred_f\n    df_interest['cases\/day'][j+len_known] = pred_c\n    df_interest['Fatalities'][j+len_known] = df_interest['Fatalities'][j+len_known-1] + pred_f\n    df_interest['ConfirmedCases'][j+len_known] = df_interest['ConfirmedCases'][j+len_known-1] + pred_c\n    df_interest = df_interest.drop([\n        'cases\/day_(1-1)', 'cases\/day_(1-7)', 'cases\/day_(8-14)', 'cases\/day_(15-21)', \n        'fatal\/day_(1-1)', 'fatal\/day_(1-7)', 'fatal\/day_(8-14)', 'fatal\/day_(15-21)', \n        'days_since_1cases', 'days_since_10cases', 'days_since_100cases',\n        'days_since_1fatal', 'days_since_10fatal', 'days_since_100fatal',\n                                   \n                                   ],  axis=1)\n    df_interest = do_aggregations(df_interest.reset_index(drop=True))\n\n# visualize\ntmp = df_interest['cases\/day'].values\ntmp = np.cumsum(tmp)\nsns.lineplot(x=df_interest_base['day'], y=tmp, label='pred')\ntmp = df_traintest8['ConfirmedCases'][(df_traintest8['place_id']==place)& (pd.isna(df_traintest8['ForecastId']))].values\nprint(len(tmp), tmp)\nsns.lineplot(x=df_traintest8['day'][(df_traintest8['place_id']==place)& (pd.isna(df_traintest8['ForecastId']))].values,\n             y=tmp, label='true')\nprint(place)\nplt.show()","d9f7459e":"last_day_train = df_traintest8['day'][pd.isna(df_traintest8['ForecastId'])].max()\nprint(last_day_train)\ndf_tmp = df_traintest8[\n    (pd.isna(df_traintest8['ForecastId'])) |\n    ((df_traintest8['day']>last_day_train) & (pd.isna(df_traintest8['ForecastId'])==False))].reset_index(drop=True)\ndf_tmp = df_tmp.drop([\n    'cases\/day_(1-1)', 'cases\/day_(1-7)', 'cases\/day_(8-14)', 'cases\/day_(15-21)', \n    'fatal\/day_(1-1)', 'fatal\/day_(1-7)', 'fatal\/day_(8-14)', 'fatal\/day_(15-21)',\n    'days_since_1cases', 'days_since_10cases', 'days_since_100cases',\n    'days_since_1fatal', 'days_since_10fatal', 'days_since_100fatal',\n                               ],  axis=1)\ndf_traintest10 = []\nfor i, place in enumerate(places[:]):\n    df_tmp2 = df_tmp[df_tmp['place_id']==place].reset_index(drop=True)\n    df_tmp2 = do_aggregations(df_tmp2)\n    df_traintest10.append(df_tmp2)\ndf_traintest10 = pd.concat(df_traintest10).reset_index(drop=True)\ndf_traintest10[df_traintest10['day']>last_day_train-5].head(10)","ba96f767":"# Check the predictions of of Fatal Public\nplace = 'Sweden'\nplace = places[np.random.randint(len(places))]\n# place = 'Iran'\ndf_interest_base = df_traintest9[df_traintest9['place_id']==place].reset_index(drop=True)\ndf_interest = copy.deepcopy(df_interest_base)\ndf_interest['ConfirmedCases'] = df_interest['ConfirmedCases'].astype(np.float)\ndf_interest['cases\/day'] = df_interest['cases\/day'].astype(np.float)\ndf_interest['fatal\/day'] = df_interest['fatal\/day'].astype(np.float)\ndf_interest['Fatalities'] = df_interest['Fatalities'].astype(np.float)\ndf_interest['cases\/day'][df_interest['day']>=79] = -1\ndf_interest['fatal\/day'][df_interest['day']>=79] = -1\nlen_known = (df_interest['cases\/day']!=-1).sum()\nlen_unknown = (df_interest['cases\/day']==-1).sum()\nprint(\"len train: {}, len prediction: {}\".format(len_known, len_unknown))\nX_valid = df_interest[col_var][df_interest['day']>=79]\nX_valid2 = df_interest[col_var2][df_interest['day']>=79]\npred_f =  np.exp(model.predict(X_valid))-1\npred_c = np.exp(model2.predict(X_valid2))-1\ndf_interest['fatal\/day'][df_interest['day']>=79] = pred_f.clip(0, 1e10)\ndf_interest['cases\/day'][df_interest['day']>=79] = pred_c.clip(0, 1e10)\ndf_interest['Fatalities'] = np.cumsum(df_interest['fatal\/day'].values)\ndf_interest['ConfirmedCases'] = np.cumsum(df_interest['cases\/day'].values)\nfor j in range(len_unknown): # use predicted cases and fatal for next days' prediction\n    X_valid = df_interest[col_var].iloc[j+len_known]\n    X_valid2 = df_interest[col_var2].iloc[j+len_known]\n    pred_f = model.predict(X_valid)\n    pred_c = model2.predict(X_valid2)\n    pred_c = (np.exp(pred_c)-1).clip(0, 1e10)\n    pred_f = (np.exp(pred_f)-1).clip(0, 1e10)\n    df_interest['fatal\/day'][j+len_known] = pred_f\n    df_interest['cases\/day'][j+len_known] = pred_c\n    df_interest['Fatalities'][j+len_known] = df_interest['Fatalities'][j+len_known-1] + pred_f\n    df_interest['ConfirmedCases'][j+len_known] = df_interest['ConfirmedCases'][j+len_known-1] + pred_c\n    df_interest = df_interest.drop([\n        'cases\/day_(1-1)', 'cases\/day_(1-7)', 'cases\/day_(8-14)', 'cases\/day_(15-21)', \n        'fatal\/day_(1-1)', 'fatal\/day_(1-7)', 'fatal\/day_(8-14)', 'fatal\/day_(15-21)', \n        'days_since_1cases', 'days_since_10cases', 'days_since_100cases',\n        'days_since_1fatal', 'days_since_10fatal', 'days_since_100fatal',\n                                   \n                                   ],  axis=1)\n    df_interest = do_aggregations(df_interest.reset_index(drop=True))\n\n# visualize\ntmp = df_interest['fatal\/day'].values\ntmp = np.cumsum(tmp)\nsns.lineplot(x=df_interest_base['day'], y=tmp, label='pred')\ntmp = df_traintest8['Fatalities'][(df_traintest8['place_id']==place)& (pd.isna(df_traintest8['ForecastId']))].values\nprint(len(tmp), tmp)\nsns.lineplot(x=df_traintest8['day'][(df_traintest8['place_id']==place)& (pd.isna(df_traintest8['ForecastId']))].values,\n             y=tmp, label='true')\nprint(place)\nplt.show()","64379c2b":"# Check the predictions of Cases Private\nplace = 'Bhutan'\nplace = places[np.random.randint(len(places))]\n# place = 'Iran'\ndf_interest_base = df_traintest10[df_traintest10['place_id']==place].reset_index(drop=True)\ndf_interest = copy.deepcopy(df_interest_base)\ndf_interest['ConfirmedCases'] = df_interest['ConfirmedCases'].astype(np.float)\ndf_interest['cases\/day'] = df_interest['cases\/day'].astype(np.float)\ndf_interest['fatal\/day'] = df_interest['fatal\/day'].astype(np.float)\ndf_interest['Fatalities'] = df_interest['Fatalities'].astype(np.float)\ndf_interest['cases\/day'][df_interest['day']>last_day_train] = -1\ndf_interest['fatal\/day'][df_interest['day']>last_day_train] = -1\nlen_known = (df_interest['cases\/day']!=-1).sum()\nlen_unknown = (df_interest['cases\/day']==-1).sum()\nprint(\"len train: {}, len prediction: {}\".format(len_known, len_unknown))\nX_valid = df_interest[col_var][df_interest['day']>91]\nX_valid2 = df_interest[col_var2][df_interest['day']>91]\npred_f =  np.exp(model.predict(X_valid))-1\npred_c = np.exp(model2.predict(X_valid2))-1\ndf_interest['fatal\/day'][df_interest['day']>last_day_train] = pred_f.clip(0, 1e10)\ndf_interest['cases\/day'][df_interest['day']>last_day_train] = pred_c.clip(0, 1e10)\ndf_interest['Fatalities'] = np.cumsum(df_interest['fatal\/day'].values)\ndf_interest['ConfirmedCases'] = np.cumsum(df_interest['cases\/day'].values)\nfor j in range(len_unknown): # use predicted cases and fatal for next days' prediction\n    X_valid = df_interest[col_var].iloc[j+len_known]\n    X_valid2 = df_interest[col_var2].iloc[j+len_known]\n    pred_f = model_pri.predict(X_valid)\n    pred_c = model2_pri.predict(X_valid2)\n    pred_c = (np.exp(pred_c)-1).clip(0, 1e10)\n    pred_f = (np.exp(pred_f)-1).clip(0, 1e10)\n    df_interest['fatal\/day'][j+len_known] = pred_f\n    df_interest['cases\/day'][j+len_known] = pred_c\n    df_interest['Fatalities'][j+len_known] = df_interest['Fatalities'][j+len_known-1] + pred_f\n    df_interest['ConfirmedCases'][j+len_known] = df_interest['ConfirmedCases'][j+len_known-1] + pred_c\n    df_interest = df_interest.drop([\n        'cases\/day_(1-1)', 'cases\/day_(1-7)', 'cases\/day_(8-14)', 'cases\/day_(15-21)', \n        'fatal\/day_(1-1)', 'fatal\/day_(1-7)', 'fatal\/day_(8-14)', 'fatal\/day_(15-21)', \n        'days_since_1cases', 'days_since_10cases', 'days_since_100cases',\n        'days_since_1fatal', 'days_since_10fatal', 'days_since_100fatal',\n                                   \n                                   ],  axis=1)\n    df_interest = do_aggregations(df_interest.reset_index(drop=True))\n\n# visualize\ntmp = df_interest['cases\/day'].values\ntmp = np.cumsum(tmp)\nsns.lineplot(x=df_interest_base['day'], y=tmp, label='pred')\ntmp = df_traintest10['ConfirmedCases'][(df_traintest10['place_id']==place)& (pd.isna(df_traintest10['ForecastId']))].values\nprint(len(tmp), tmp)\nsns.lineplot(x=df_traintest10['day'][(df_traintest10['place_id']==place)& (pd.isna(df_traintest10['ForecastId']))].values,\n             y=tmp, label='true')\nprint(place)\nplt.show()","05562ea8":"# Check the predictions of of Fatal Private\nplace = 'Bhutan'\nplace = places[np.random.randint(len(places))]\n# place = 'Iran'\ndf_interest_base = df_traintest10[df_traintest10['place_id']==place].reset_index(drop=True)\ndf_interest = copy.deepcopy(df_interest_base)\ndf_interest['ConfirmedCases'] = df_interest['ConfirmedCases'].astype(np.float)\ndf_interest['cases\/day'] = df_interest['cases\/day'].astype(np.float)\ndf_interest['fatal\/day'] = df_interest['fatal\/day'].astype(np.float)\ndf_interest['Fatalities'] = df_interest['Fatalities'].astype(np.float)\ndf_interest['cases\/day'][df_interest['day']>last_day_train] = -1\ndf_interest['fatal\/day'][df_interest['day']>last_day_train] = -1\nlen_known = (df_interest['cases\/day']!=-1).sum()\nlen_unknown = (df_interest['cases\/day']==-1).sum()\nprint(\"len train: {}, len prediction: {}\".format(len_known, len_unknown))\nX_valid = df_interest[col_var][df_interest['day']>91]\nX_valid2 = df_interest[col_var2][df_interest['day']>91]\npred_f =  np.exp(model.predict(X_valid))-1\npred_c = np.exp(model2.predict(X_valid2))-1\ndf_interest['fatal\/day'][df_interest['day']>last_day_train] = pred_f.clip(0, 1e10)\ndf_interest['cases\/day'][df_interest['day']>last_day_train] = pred_c.clip(0, 1e10)\ndf_interest['Fatalities'] = np.cumsum(df_interest['fatal\/day'].values)\ndf_interest['ConfirmedCases'] = np.cumsum(df_interest['cases\/day'].values)\nfor j in range(len_unknown): # use predicted cases and fatal for next days' prediction\n    X_valid = df_interest[col_var].iloc[j+len_known]\n    X_valid2 = df_interest[col_var2].iloc[j+len_known]\n    pred_f = model_pri.predict(X_valid)\n    pred_c = model2_pri.predict(X_valid2)\n    pred_c = (np.exp(pred_c)-1).clip(0, 1e10)\n    pred_f = (np.exp(pred_f)-1).clip(0, 1e10)\n    df_interest['fatal\/day'][j+len_known] = pred_f\n    df_interest['cases\/day'][j+len_known] = pred_c\n    df_interest['Fatalities'][j+len_known] = df_interest['Fatalities'][j+len_known-1] + pred_f\n    df_interest['ConfirmedCases'][j+len_known] = df_interest['ConfirmedCases'][j+len_known-1] + pred_c\n    df_interest = df_interest.drop([\n        'cases\/day_(1-1)', 'cases\/day_(1-7)', 'cases\/day_(8-14)', 'cases\/day_(15-21)', \n        'fatal\/day_(1-1)', 'fatal\/day_(1-7)', 'fatal\/day_(8-14)', 'fatal\/day_(15-21)', \n        'days_since_1cases', 'days_since_10cases', 'days_since_100cases',\n        'days_since_1fatal', 'days_since_10fatal', 'days_since_100fatal',\n                                   \n                                   ],  axis=1)\n    df_interest = do_aggregations(df_interest.reset_index(drop=True))\n\n# visualize\ntmp = df_interest['fatal\/day'].values\ntmp = np.cumsum(tmp)\nsns.lineplot(x=df_interest_base['day'], y=tmp, label='pred')\ntmp = df_traintest10['Fatalities'][(df_traintest10['place_id']==place)& (pd.isna(df_traintest10['ForecastId']))].values\nprint(len(tmp), tmp)\nsns.lineplot(x=df_traintest10['day'][(df_traintest10['place_id']==place)& (pd.isna(df_traintest10['ForecastId']))].values,\n             y=tmp, label='true')\nprint(place)\nplt.show()","59deec01":"# predict test data in public\nday_before_public = 78\ndf_preds = []\nfor i, place in enumerate(places[:]):\n#     if place!='Japan' and place!='Afghanistan' :continue\n    df_interest = copy.deepcopy(df_traintest9[df_traintest9['place_id']==place].reset_index(drop=True))\n    df_interest['cases\/day'][(pd.isna(df_interest['ForecastId']))==False] = -1\n    df_interest['fatal\/day'][(pd.isna(df_interest['ForecastId']))==False] = -1\n    len_known = (df_interest['day']<=day_before_public).sum()\n    len_unknown = (day_before_public<df_interest['day']).sum()\n    for j in range(len_unknown): # use predicted cases and fatal for next days' prediction\n        X_valid = df_interest[col_var].iloc[j+len_known]\n        X_valid2 = df_interest[col_var2].iloc[j+len_known]\n        pred_f = model.predict(X_valid)\n        #pred_c = model2.predict(X_valid2)\n        pred_c = model2.predict(X_valid2.astype('float32'))\n        pred_c = (np.exp(pred_c)-1).clip(0, 1e10)\n        pred_f = (np.exp(pred_f)-1).clip(0, 1e10)\n        df_interest['fatal\/day'][j+len_known] = pred_f\n        df_interest['cases\/day'][j+len_known] = pred_c\n        df_interest['Fatalities'][j+len_known] = df_interest['Fatalities'][j+len_known-1] + pred_f\n        df_interest['ConfirmedCases'][j+len_known] = df_interest['ConfirmedCases'][j+len_known-1] + pred_c\n        df_interest = df_interest.drop([\n            'cases\/day_(1-1)', 'cases\/day_(1-7)', 'cases\/day_(8-14)', 'cases\/day_(15-21)', \n            'fatal\/day_(1-1)', 'fatal\/day_(1-7)', 'fatal\/day_(8-14)', 'fatal\/day_(15-21)',\n            'days_since_1cases', 'days_since_10cases', 'days_since_100cases',\n            'days_since_1fatal', 'days_since_10fatal', 'days_since_100fatal',\n\n                                       ],  axis=1)\n        df_interest = do_aggregations(df_interest)\n    if (i+1)%10==0:\n        print(\"{:3d}\/{}  {}, len known: {}, len unknown: {}\".format(i+1, len(places), place, len_known, len_unknown), df_interest.shape)\n    df_interest['fatal_pred'] = np.cumsum(df_interest['fatal\/day'].values)\n    df_interest['cases_pred'] = np.cumsum(df_interest['cases\/day'].values)\n    df_preds.append(df_interest)","342790d8":"# concat prediction\ndf_preds= pd.concat(df_preds)\ndf_preds = df_preds.sort_values('day')\ncol_tmp = ['place_id', 'ForecastId', 'day', 'cases\/day', 'cases_pred', 'fatal\/day', 'fatal_pred',]\ndf_preds[col_tmp][(df_preds['place_id']=='Afghanistan') & (df_preds['day']>75)].head(10)","e87e249d":"# predict test data in public\nday_before_private = 91\ndf_preds_pri = []\nfor i, place in enumerate(places[:]):\n#     if place!='Japan' and place!='Afghanistan' :continue\n    df_interest = copy.deepcopy(df_traintest10[df_traintest10['place_id']==place].reset_index(drop=True))\n    df_interest['cases\/day'][(pd.isna(df_interest['ForecastId']))==False] = -1\n    df_interest['fatal\/day'][(pd.isna(df_interest['ForecastId']))==False] = -1\n    len_known = (df_interest['day']<=day_before_private).sum()\n    len_unknown = (day_before_private<df_interest['day']).sum()\n    for j in range(len_unknown): # use predicted cases and fatal for next days' prediction\n        X_valid = df_interest[col_var].iloc[j+len_known]\n        X_valid2 = df_interest[col_var2].iloc[j+len_known]\n        pred_f = model_pri.predict(X_valid)\n        pred_c = model2_pri.predict(X_valid2.astype('float32'))\n        pred_c = (np.exp(pred_c)-1).clip(0, 1e10)\n        pred_f = (np.exp(pred_f)-1).clip(0, 1e10)\n        df_interest['fatal\/day'][j+len_known] = pred_f\n        df_interest['cases\/day'][j+len_known] = pred_c\n        df_interest['Fatalities'][j+len_known] = df_interest['Fatalities'][j+len_known-1] + pred_f\n        df_interest['ConfirmedCases'][j+len_known] = df_interest['ConfirmedCases'][j+len_known-1] + pred_c\n        df_interest = df_interest.drop([\n            'cases\/day_(1-1)', 'cases\/day_(1-7)', 'cases\/day_(8-14)', 'cases\/day_(15-21)', \n            'fatal\/day_(1-1)', 'fatal\/day_(1-7)', 'fatal\/day_(8-14)', 'fatal\/day_(15-21)',\n            'days_since_1cases', 'days_since_10cases', 'days_since_100cases',\n            'days_since_1fatal', 'days_since_10fatal', 'days_since_100fatal',\n\n                                       ],  axis=1)\n        df_interest = do_aggregations(df_interest)\n    if (i+1)%10==0:\n        print(\"{:3d}\/{}  {}, len known: {}, len unknown: {}\".format(i+1, len(places), place, len_known, len_unknown), df_interest.shape)\n    df_interest['fatal_pred'] = np.cumsum(df_interest['fatal\/day'].values)\n    df_interest['cases_pred'] = np.cumsum(df_interest['cases\/day'].values)\n    df_preds_pri.append(df_interest)","071feb49":"# concat prediction\ndf_preds_pri= pd.concat(df_preds_pri)\ndf_preds_pri = df_preds_pri.sort_values('day')\ncol_tmp = ['place_id', 'ForecastId', 'Date', 'day', 'cases\/day', 'cases_pred', 'fatal\/day', 'fatal_pred',]\n#df_preds_pri[col_tmp][(df_preds_pri['place_id']=='Japan') & (df_preds_pri['day']>79)].head(10)","242fd2e5":"# merge 2 preds\ndf_preds[df_preds['day']>last_day_train] = df_preds_pri[df_preds['day']>last_day_train]","bf2ca1db":"df_preds.to_csv(\"df_preds.csv\", index=None)","f75d2d25":"# load sample submission\ndf_sub = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-1\/submission.csv\")\nprint(len(df_sub))\ndf_sub.head()","8d6f3f8f":"# merge prediction with sub\ndf_sub = pd.merge(df_sub, df_traintest3[['ForecastId', 'place_id', 'day']])\ndf_sub = pd.merge(df_sub, df_preds[['place_id', 'day', 'cases_pred', 'fatal_pred']], on=['place_id', 'day',], how='left')\ndf_sub.head(10)","007893bc":"# save\ndf_sub['ConfirmedCases'] = df_sub['cases_pred']\ndf_sub['Fatalities'] = df_sub['fatal_pred']\ndf_sub = df_sub[['ForecastId', 'ConfirmedCases', 'Fatalities']]\ndf_sub.to_csv(\"submission.csv\", index=None)\ndf_sub.head(10)","0b960112":"# Visualize Prediction","76b40d31":"### Traing for private","3b142880":"### Preprocessing","12ecb8b9":"# Data loading","2622f3fc":"# Making submission","5eede5d0":"# Model training\n### train for public model"}}