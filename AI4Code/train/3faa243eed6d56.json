{"cell_type":{"e816962e":"code","14d6b667":"code","2423ba99":"code","ba39716f":"code","deb42c4e":"code","a42c284a":"code","ed713a91":"code","43fab8d0":"code","b578c75c":"code","a39c2800":"code","5034488e":"code","c7effb92":"code","68b2c957":"code","aeb25e06":"code","ddc95144":"code","3a41200d":"code","a0949c90":"code","704ce6e6":"code","8cd4a4d1":"code","cb4c46b1":"code","1fa57507":"code","f19dbedc":"code","b5576560":"code","a3b9c3e2":"code","7d1ac0db":"code","c6cc16b1":"code","08b52297":"code","d8586126":"code","50c68fee":"code","10421d8e":"code","43093964":"code","9dfe9139":"code","c9537d13":"code","0e839e31":"code","75519fb3":"code","ebbcdb06":"code","819409f8":"code","f84a30d4":"code","4322c3f1":"code","baab04a5":"code","327f80c2":"code","8bd66930":"code","0b13b5be":"markdown","44139149":"markdown","c8b799b3":"markdown","f07e1484":"markdown","a4151fe9":"markdown","bcb05c42":"markdown","d343a21e":"markdown","6004340b":"markdown","bf06540e":"markdown","bc829bbc":"markdown","8e7350c8":"markdown","fee5625c":"markdown","880b6212":"markdown","3fb3853e":"markdown","8d1a5f58":"markdown","b3cefaf3":"markdown","7ea202c9":"markdown","590d1eee":"markdown","2a286c91":"markdown","bcf7816b":"markdown","876f00f3":"markdown","e41d3fa6":"markdown","682f7f6d":"markdown","5a26e25e":"markdown","62a4bddd":"markdown","043dfd59":"markdown","0ccbe6b2":"markdown","c2d5a838":"markdown","256ce8d6":"markdown","79b1b1a8":"markdown"},"source":{"e816962e":"import pandas as pd\nimport numpy as np\n\n#reading csv file\nautos = pd.read_csv('..\/input\/autos.csv',encoding='latin-1')","14d6b667":"autos","2423ba99":"autos.info()","ba39716f":"autos.head()","deb42c4e":"#changing the column names\n\nautos.columns = ['date_crawled', 'name', 'seller', 'offer_type', 'price', \n                 'ab_test','vehicle_type', 'registration_year', 'gearbox', \n                 'power_ps', 'model','odometer', 'registration_month', \n                 'fuel_type', 'brand','unrepaired_damage', 'ad_created', \n                 'num_photos', 'postal_code','last_seen']\n\n","a42c284a":"autos.head()","ed713a91":"autos.describe(include='all')","43fab8d0":"autos = autos.drop(columns=['seller','offer_type','num_photos'])","b578c75c":"#converting column 'price' from object to numeric type\nautos['price'] = (autos['price']\n                 .str.replace('$','')\n                 .str.replace(',','')\n                  .astype(float)\n                 )\n","a39c2800":"#converting column 'odometer' from object to numeric type\nautos['odometer'] = (autos['odometer']\n                    .str.replace(',','')\n                    .str.replace('km','')\n                    .astype(float)\n                    )","5034488e":"#renaming the column 'odometer' to 'odometer_km'\nautos = autos.rename({'odometer':'odometer_km'}, axis=1)","c7effb92":"print(autos['price'].unique().shape)\nprint(autos['price'].describe())\nprint(autos['price'].value_counts().head(20))","68b2c957":"autos['price'].value_counts().sort_index(ascending=False).head(20)","aeb25e06":"autos['price'].value_counts().sort_index(ascending=True).head(20)","ddc95144":"autos = autos[autos['price'].between(1,350000)]\nautos['price'].describe()","3a41200d":"autos['odometer_km'].value_counts().sort_index(ascending=False)","a0949c90":"autos[['date_crawled','last_seen',\n      'ad_created','registration_month',\n      'registration_year']].info()","704ce6e6":"autos[['date_crawled','ad_created','last_seen']][0:5]","8cd4a4d1":"(autos['date_crawled']\n .str[:10]\n .value_counts(normalize=True,dropna=False)\n .sort_index()\n)","cb4c46b1":"(autos['date_crawled']\n .str[:10]\n .value_counts(normalize=True,dropna=False)\n .sort_values()\n)","1fa57507":"(autos['last_seen']\n .str[:10]\n .value_counts(normalize=True,dropna=False)\n .sort_index()\n)","f19dbedc":"print(autos[\"ad_created\"].str[:10].unique().shape)\n(autos[\"ad_created\"]\n        .str[:10]\n        .value_counts(normalize=True, dropna=False)\n        .sort_index()\n        )","b5576560":"autos['registration_year'].describe()","a3b9c3e2":"(~autos['registration_year'].between(1900,2016)).sum()\/autos.shape[0]","7d1ac0db":"autos = autos[autos['registration_year'].between(1900,2016)]\nautos['registration_year'].value_counts(normalize=True).head(10)\n\n","c6cc16b1":"autos['brand'].value_counts(normalize=True)","08b52297":"brand_counts = autos['brand'].value_counts(normalize=True)\ncommon_brands = brand_counts[brand_counts > .05].index\nprint(common_brands)","d8586126":"brand_mean_prices = {}\n\nfor b in common_brands:\n    b_only = autos[autos['brand'] == b]\n    mean_price = b_only['price'].mean()\n    brand_mean_prices[b] = int(mean_price)\n\nbrand_mean_prices","50c68fee":"brand_mean_mileage = {}\nfor b in common_brands:\n    b_only = autos[autos['brand'] == b]\n    mean_mil = b_only['odometer_km'].mean()\n    brand_mean_mileage[b] = int(mean_mil)\n    \n\nmean_mileage = pd.Series(brand_mean_mileage).sort_values(ascending=False)\nmean_price = pd.Series(brand_mean_prices).sort_values(ascending=False)","10421d8e":"brand_agg = pd.DataFrame(mean_mileage,columns=['mean_mileage'])\nbrand_agg","43093964":"brand_agg['mean_price'] = mean_price\nbrand_agg","9dfe9139":"autos.head()","c9537d13":"autos['vehicle_type'].unique()","0e839e31":"autos['gearbox'].unique()","75519fb3":"autos['fuel_type'].unique()","ebbcdb06":"autos['unrepaired_damage'].unique()","819409f8":"words_translated = {\n    'bus':'bus',\n    'limousine':'limousine',\n    'kleinwagen':'supermini',\n    'kombi':'station_wagon',\n    'coupe':'coupe',\n    'suv':'suv',\n    'cabrio':'cabrio',\n    'andere' :'other',\n    'manuell':'manual',\n    'automatik':'automatic',\n    'lpg':'lpg',\n    'benzin':'petrol',\n    'diesel':'diesel',\n    'cng':'cng',\n    'hybrid':'hybrid',\n    'elektro':'electro',\n    'nein':'no',\n    'ja':'yes'\n}\nfor each in ['vehicle_type','gearbox','fuel_type','unrepaired_damage']:\n    autos[each] = autos[each].map(words_translated)\n    ","f84a30d4":"print(autos['vehicle_type'].unique())\nprint(autos['gearbox'].unique())\nprint(autos['fuel_type'].unique())\nprint(autos['unrepaired_damage'].unique())","4322c3f1":"autos.head()","baab04a5":"date_cols = ['date_crawled','ad_created','last_seen']\n\nfor each in date_cols:\n    autos[each] = (autos[each]\n                  .str[:10]\n                  .str.replace('-','')\n                  .astype(int)\n                  )","327f80c2":"autos.head()\n","8bd66930":"autos.info()","0b13b5be":"The first ten characters represent the day. In order to understand the date range, I am going to extract the date values from each column to generate distribution and then sort it by index.","44139149":"Findings:\n- There are 2357 unique values in column `price`.\n- Around 3% of prices equal 0, these rows might be considered for removing from the dataset.\n- The minimum price is 0 and maximum price is one hundred million dollars, they look too small and too large respectively. \n\nLet's explore the lowest and the highest prices further on.\n","c8b799b3":"In the cells above I have made the following modifications:\n- I changed the style of writing the column names from camelcase to snakecase. This change will make column names easier to read, and I won't have to remember which letter is capitalized.\n- I reworded some of the column names in order for them to be more descriptive and obvious.","f07e1484":"Findings:\n\n- The most expensive brand is audi\n- The least expensive is opel\n- volkswagen has the average price comparing to others, and if considering the fact that it has the greatest value of posted ads, ","a4151fe9":" In this project (guided by Dataquest) I worked with a dataset of used cars from eBay Kleinanzeigen, a classifieds section of the German eBay website. The dataset was taken from Kaggle with a few modifications:\n\n- Only 50000 data points were taken from the original dataset in order to ensure the below code runs quickly\n- Because version of this dataset uploaded to Kaggle was cleaned to be easier to work with, this piece of dataset was dirtied for the reason to learn how to clean data\n\nData dictionary is the following:\n- dateCrawled - When this ad was first crawled. All field-values are taken from  this date.\n- name - Name of the car.\n- seller - Whether the seller is private or a dealer.\n- offerType - The type of listing\n- price - The price on the ad to sell the car.\n- abtest - Whether the listing is included in an A\/B test.\n- vehicleType - The vehicle Type.\n- yearOfRegistration - The year in which which year the car was first registered.\n- gearbox - The transmission type.\n- powerPS - The power of the car in PS.\n- model - The car model name.\n- kilometer - How many kilometers the car has driven.\n- monthOfRegistration - The month in which which year the car was first registered.\n- fuelType - What type of fuel the car uses.\n- brand - The brand of the car.\n- notRepairedDamage - If the car has a damage which is not yet repaired.\n- dateCreated - The date on which the eBay listing was created.\n- nrOfPictures - The number of pictures in the ad.\n- postalCode - The postal code for the location of the vehicle.\n- lastSeenOnline - When the crawler saw this ad last online.\n\nThe aim of this project is to learn how to clean data and then try to analyze the included used car listings. \n\n\n","bcb05c42":"Findings:\n\n- The data was crawled every day within a month starting from 5 March 2016 and ending at 7 April 2016\n- The distribution of listings crawled on each day is roughly uniform.","d343a21e":"In order to translate the German words in the columns mentioned above, I will create a dictionary, with German words as keys and their English translations as values","6004340b":"Findings:\n\nThis distribution shows the percent of created ads per each date. The variety is large, it seems that the majority of ads were created in March, however some ads are much older, up to 10 months","bf06540e":"Next, let's explore the column `odometer_km'","bc829bbc":"Findings:\n- More than half of vehicles have 150000 km on their odometer (65%). It is also the most frequent value (31414 rows)\n- The mileage of the car and the number of published ads is in direct proportion \n- There are no outliers\n\n","8e7350c8":"German brands represent four out of five top brands, in total it is almost 50% of our dataset. The most popular brand is Volkswagen, the next two brands are twice less presented.\n\nSome brands don't have a significant percentage so they may be excluded from dataset and only those brands with percentage of 5 percent or higher will be left for further analysis.","fee5625c":"Brief observation:\n- The dataset consists of 20 columns\n- 15 columns contain data of object type, 5 columns are int.64 type. Changing of data type might be required for some object columns, e.g. `price`.\n- 5 columns contain missing values, but none of them contain more than 20% missing values\n- camelcase in column names is needed to be changed to snakecase\n","880b6212":"Findings:\n- The minimum and maximum values don't seem to be true, therefore it is impossible to consider the calculations above for further analysis.\n\nFurther investigation of this column is required. Let's calculate the percentage of data with invalid registration year.","3fb3853e":"Let's check the result:","8d1a5f58":"It seems that only 4% of rows in our dataset have invalid registration year, which means that these rows can be removed.","b3cefaf3":"Findings:\n\nThe distribution above shows the percent of removed ads per each day. It looks like in the last three day the percent of removed ads was the highest, however it is not necessarily because of the increased number of cars sold. \n\nIt is impossible to make any definite conclusions from this distribution.","7ea202c9":"The task is completed!","590d1eee":"\n- Convert the dates to be uniform numeric data, so \"2016-03-21\" becomes the integer 20160321.\n\nLet's identify columns in the dataset that contain dates.","2a286c91":"Thus, we can draw a conclusion that the most of the vehicles were registered in the period of 20 years.","bcf7816b":"Findings:\n\n- A number of prices are below 30 dollars, the most frequent of them is 0 (1421 rows).\n- Around 15 prices are higher than one million which seems too much. \n- Starting from 350000 dollars, prices become twice higher.\n\nConsidering the fact that prices on Ebay could start at 1$ because it is an auction site, I will keep prices from 1 dollar to 350000 dollars in the dataset and remove the rest.","876f00f3":"it looks like data in German is presented in the following columns:\n- `vehicle_type`\n- `gearbox`\n- `fuel_type`\n- `unrepaired_damage`\n\nLet's explore each column.","e41d3fa6":"The columns `registration_month` and `registration_year` contain numeric values, while `date_crawled`, `last_seen` and `ad_created` represent strings. \n\nFirst, I am going to explore string columns.","682f7f6d":"Findings:\n\n- Columns with mostly one values are: `seller`, `offer_type`, `num_photos`. These columns are candidates to be dropped, because no useful information can be extracted.\n- Numeric data stored as text: `price`, `odometer`. \n- Column `ad_created` needs further investigation, so far it seems that it consists of just one value\n\nLet's drop three columns: `seller`, `offer_type`, `num_photos`","5a26e25e":"Checking the result:","62a4bddd":"Now, let's move to the date columns.\n\nThey are presented in the dataset as follows:\n- date_crawled\n- registration_month\n- registration_year\n- ad_created\n- last_seen\n\nSome of them are created by crawler, and some are taken from the website.","043dfd59":"Next, I am going to convert the data in these two columns to numeric type and rename column `odometer` ","0ccbe6b2":"The task is completed!","c2d5a838":"Findings:\n- The more expensive the car, the greater value of mileage it has (with the exception of opel)\n","256ce8d6":"There are three columns with dates in them: `date_crawled`, `ad_created` and `last_seen`. Before converting the dates to numeric, I will have to extract the dates from each column. I see that data in all three columns has identical format and it will make my work easier.\n\nFor each column I will:\n- extract first nine symbols\n- clean the data from \"-\" sign\n- convert the remained data to numeric","79b1b1a8":"Next steps:\n\n- Identify categorical data that uses german words in the dataset, translate them and map the values to their english counterparts"}}