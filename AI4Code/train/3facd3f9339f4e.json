{"cell_type":{"3567c28e":"code","58d87c2d":"code","e77cf5e0":"code","23cdaf4f":"code","ed20935d":"code","367923c3":"code","f64bb606":"code","7c830e8f":"code","eac0c2fa":"code","818ef638":"code","2c7c727a":"code","3cb2f9b8":"code","48190b1d":"code","8993a792":"code","6cd7c251":"code","90ab324e":"code","c215df2d":"code","814d4a3e":"code","397788ae":"code","eb46879b":"code","5ecd7f54":"code","64ffa2fe":"code","a52c7cae":"code","6d5f8e9e":"code","4388a3ee":"code","f7599671":"code","c9f191dd":"code","97074b79":"code","ac44e6b0":"code","59316e12":"markdown","6512d654":"markdown","ecbcd83c":"markdown","c49e6bd1":"markdown","4d36fdf6":"markdown","d23885b7":"markdown"},"source":{"3567c28e":"# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","58d87c2d":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","e77cf5e0":"train_fp = '..\/input\/tabular-playground-series-sep-2021\/train.csv'\ntrain = pd.read_csv(train_fp)\n\ntest_fp = '..\/input\/tabular-playground-series-sep-2021\/test.csv'\ntest = pd.read_csv(test_fp)","23cdaf4f":"display(train)\nprint(train.info())","ed20935d":"print(train.isnull().values.any())\nprint(' ')\nprint(train.isnull().sum())","367923c3":"train_filled = train.fillna(train.mean())\n\ntrain_filled","f64bb606":"#train_dropped = train.dropna()\n\n#train_dropped","7c830e8f":"#train_dropped.info()","eac0c2fa":"test","818ef638":"print(test.isnull().values.any())\nprint(' ')\nprint(test.isnull().sum())","2c7c727a":"test_filled = test.fillna(test.mean())\n\ntest_filled","3cb2f9b8":"#test_dropped = test.dropna()\n\n#test_dropped","48190b1d":"#test_dropped.info()","8993a792":"plt.figure(figsize=(5,10))\nsns.countplot(train.claim)\nplt.show()","6cd7c251":"train_corr = train.corr()\nmask = np.triu(np.ones_like(train_corr, dtype=np.bool))\n\nfig = plt.figure(figsize=(16,13))\nsns.heatmap(train_corr, mask=mask)\nplt.title('Correlation between features')","90ab324e":"X = train_filled.drop(['claim'], axis=1)\ny = train_filled.claim","c215df2d":"from sklearn.model_selection import train_test_split\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, random_state=0, test_size=0.5)\n","814d4a3e":"'''\nfrom xgboost import XGBRegressor\nfrom sklearn.model_selection import GridSearchCV, RandomizedSearchCV\n\nxgbr = XGBRegressor(seed=20)\n\nparams = { \"max_depth\": [2, 3, 4],\n           \"learning_rate\": [0.03, 0.04, 0.05],\n           \"n_estimators\": np.arange(100, 1000, 100),\n           \"colsample_bytree\": np.arange(0.2, 0.7, 0.1),\n            \"colsample_bylevel\": np.arange(0.2, 0.7, 0.1),\n            \"colsample_bynode\": np.arange(0.2, 0.7, 0.1)\n            }\n\nreg = RandomizedSearchCV(estimator=xgbr,\n                  param_distributions=params,\n                  scoring='neg_root_mean_squared_error',\n                    n_iter=50,\n                  verbose=1)\n'''","397788ae":"#reg.fit(X_train, y_train)\n\n#print(\"Best parameters:\", reg.best_params_)","eb46879b":"\nfrom xgboost import XGBRegressor\n\nparams = {'n_estimators': 800,\n         'learning_rate': 0.05,\n         'max_depth': 4,\n         'colsample_bytree': 0.2,\n         'colsample_bynode': 0.6000000000000001,\n         'colsample_bylevel': 0.5000000000000001,\n         'objective': 'binary:logistic'}\n\nmodel = XGBRegressor(**params)\n\nmodel.fit(X_train, y_train,\n         early_stopping_rounds=10,\n         eval_set=[(X_val, y_val)],\n          eval_metric='auc',\n         verbose=False)\n\npreds = model.predict(X_val)\n","5ecd7f54":"\nfrom sklearn.model_selection import cross_val_score, KFold\n\ncv = KFold(n_splits=5, random_state=1, shuffle=True)\n\nscores = -1 * cross_val_score(model, X, y, cv=cv, \n                              scoring='neg_mean_absolute_error', \n                              n_jobs=1)\nprint('MAE Scores: ', scores)\nprint('Average score: ', scores.mean())\n","64ffa2fe":"\nfrom sklearn.metrics import accuracy_score, mean_absolute_error, r2_score\n\nmae = \"Mean absolute error: {}\".format(mean_absolute_error(y_val, preds))\nprint(mae)\n\nr2 = \"r2 score: {}\".format(r2_score(y_val, preds))\nprint(r2)\n","a52c7cae":"final_output = model.predict(test_filled)","6d5f8e9e":"final_output","4388a3ee":"trimmed_output = final_output[:478960]\n\nfinal_mae = \"Mean absolute error: {}\".format(mean_absolute_error(y_val, trimmed_output))\nprint(final_mae)\n\nfinal_r2 = \"r2 score: {}\".format(r2_score(y_val, trimmed_output))\nprint(final_r2)\n","f7599671":"sample_fp = '..\/input\/tabular-playground-series-sep-2021\/sample_solution.csv'\nsample = pd.read_csv(sample_fp)","c9f191dd":"sample","97074b79":"\nsubmission = sample.copy()\nsubmission['claim'] = final_output\n\nsubmission\n","ac44e6b0":"submission.to_csv('submission.csv', index=False)","59316e12":"# Imports","6512d654":"<center><h1>Tabular Playground - September 2021<\/h1><\/center>\n<center><h2>EDA & XGBoost Implementation<\/h2><\/center>\n<center><h2>By Tariq Hussain<\/h2><\/center>","ecbcd83c":"# Model prep, training and analysis","c49e6bd1":"# Preparing for submission","4d36fdf6":"# Exploratory Data Analysis","d23885b7":"# Data preparation and processing"}}