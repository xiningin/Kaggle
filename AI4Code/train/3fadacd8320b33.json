{"cell_type":{"3ca3242b":"code","169e87c2":"code","838235ca":"code","b434c51d":"code","d9cb3467":"code","3f712615":"code","615b813e":"code","e8472d0e":"code","dec5e314":"code","51949feb":"code","c24515de":"code","43857847":"code","9d8b5c36":"code","cc1386c2":"code","58c76ecf":"code","ee2623ac":"code","3cb6d740":"code","86385cbe":"code","0babe41e":"code","31be6e4e":"code","97573035":"code","b9f93cad":"code","3bfa4a5d":"code","97a873ca":"code","6af121dd":"code","ec0c7cd4":"code","720a4464":"code","d6fa9cca":"markdown","0b2d3668":"markdown","89ace9c1":"markdown","087d8de5":"markdown","a326ceb8":"markdown","d2afd7f2":"markdown","8dff5315":"markdown","dbd7ec48":"markdown","9cb1e5cd":"markdown","1ad885c8":"markdown","38d48c13":"markdown","55886cd1":"markdown","9dbac50f":"markdown","79b78ea1":"markdown"},"source":{"3ca3242b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        break\n        \n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","169e87c2":"from sklearn.preprocessing import OneHotEncoder\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf \nimport keras \nfrom keras.layers import Conv2D\nfrom keras.models import Sequential\nfrom keras.layers import MaxPool2D\nfrom keras.layers import Flatten\nfrom keras.layers import Dense\nfrom keras.models import Model\nfrom keras.preprocessing.image import ImageDataGenerator\nimport cv2\nimport re\nimport random\nrandom.seed(0)\nnp.random.seed(0)","838235ca":"wheat = plt.imread(\"\/kaggle\/input\/agriculture-crop-images\/kag2\/wheat\/wheat0004a.jpeg\")\njute = plt.imread(\"\/kaggle\/input\/agriculture-crop-images\/kag2\/jute\/jute005a.jpeg\")\ncane = plt.imread(\"\/kaggle\/input\/agriculture-crop-images\/kag2\/sugarcane\/sugarcane0010arot.jpeg\")\nrice = plt.imread(\"\/kaggle\/input\/agriculture-crop-images\/kag2\/rice\/rice032ahs.jpeg\")\nmaize = plt.imread(\"\/kaggle\/input\/agriculture-crop-images\/kag2\/maize\/maize003a.jpeg\")\nplt.figure(figsize=(20,3))\nplt.subplot(1,5,1)\nplt.imshow(jute)\nplt.title(\"jute\")\nplt.subplot(1,5,2)\nplt.imshow(maize)\nplt.title(\"maize\")\nplt.subplot(1,5,3)\nplt.imshow(rice)\nplt.title(\"rice\")\nplt.subplot(1,5,4)\nplt.imshow(cane)\nplt.title(\"sugarcane\")\nplt.subplot(1,5,5)\nplt.imshow(wheat)\nplt.title(\"wheat\")","b434c51d":"jutepath = \"..\/input\/agriculture-crop-images\/kag2\/jute\"\nmaizepath = \"..\/input\/agriculture-crop-images\/kag2\/maize\"\nricepath = \"..\/input\/agriculture-crop-images\/kag2\/rice\"\nsugarcanepath = \"..\/input\/agriculture-crop-images\/kag2\/sugarcane\"\nwheatpath = \"..\/input\/agriculture-crop-images\/kag2\/wheat\"\n\njutefilename = os.listdir(jutepath)\nmaizefilename = os.listdir(maizepath)\nricefilename = os.listdir(ricepath)\nsugarcanefilename = os.listdir(sugarcanepath)\nwheatfilename = os.listdir(wheatpath)\n\nX= []","d9cb3467":"for fname in jutefilename:\n    X.append([os.path.join(jutepath,fname),0])\nfor fname in maizefilename:\n    X.append([os.path.join(maizepath,fname),1])\nfor fname in ricefilename:\n    X.append([os.path.join(ricepath,fname),2])\nfor fname in sugarcanefilename:\n    X.append([os.path.join(sugarcanepath,fname),3]) \nfor fname in wheatfilename:\n    X.append([os.path.join(wheatpath,fname),4])  \nX = pd.DataFrame(X,columns = ['path','labels'])    ","3f712615":"X.head()","615b813e":"\nohencoder = OneHotEncoder(handle_unknown='ignore',sparse=False)\nohlabel = pd.DataFrame(ohencoder.fit_transform(X[['labels']]),dtype = 'int64',columns = ['label0','label1','label2','label3','label4'])\nlabel_X = X.copy()\nX = pd.concat([X,ohlabel],axis = 1)\nnew_X = X.drop(['labels'],axis = 1)","e8472d0e":"train,test = train_test_split(label_X,test_size=0.2,random_state=0,shuffle = True)","dec5e314":"X_train = train['path'].values\ny_train = train.drop(['path'],axis=1).values\nX_test = test['path'].values\ny_test = test.drop(['path'],axis=1).values","51949feb":"def flat_x(data):\n    flat = []\n    for i in data:\n        img = plt.imread(i)\n        img = img\/255.\n        flat.append(img.reshape([1,-1]))\n    flat =  np.array(flat)    \n    flat = flat.reshape(-1,224*224*3)       \n    return flat\ndef flat_x_oned(data):\n    data = flat_x(data)\n    data  = data[:,:224*224]\n    return flat","c24515de":"flat_X_train = flat_x(X_train)\nflat_X_test = flat_x(X_test)","43857847":"from sklearn.decomposition import PCA\npca = PCA(n_components=2)\nX_train_pca=pca.fit_transform(flat_X_train)\nprint(flat_X_train.shape)\nprint(X_train_pca.shape)","9d8b5c36":"import seaborn as sns\nplt.figure(figsize=(15,8))\nsns.scatterplot(X_train_pca[:,0],X_train_pca[:,1],hue = np.ravel(y_train),palette='Paired_r',s=80)\nplt.title(\"PCA decomposition of 150528 columns to 2 columns\")\nplt.grid()","cc1386c2":"from sklearn.manifold import TSNE\ntsne=TSNE(n_components=2,random_state=0)\nX_train_tsne=tsne.fit_transform(flat_X_train[:,:224*224])\nprint(flat_X_train.shape)\nprint(X_train_pca.shape)","58c76ecf":"plt.figure(figsize=(15,8))\nsns.scatterplot(X_train_tsne[:,0],X_train_tsne[:,1],hue = np.ravel(y_train),palette='Paired_r',s=80)\nplt.title(\"2d scatter plot of one dimensions of images using tsne\")\nplt.grid()","ee2623ac":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()\nlr.fit(flat_X_train,np.ravel(y_train))","3cb6d740":"lr.score(flat_X_test,np.ravel(y_test))","86385cbe":"def modelpipeline(imagepath,model = lr,label=-1):\n    pdict = {0:\"jute\",1:\"maize\",2:\"rice\",3:\"sugarcane\",4:\"wheat\"}\n    pred_x = flat_x([imagepath])\n    pred = model.predict(pred_x)\n    plt.imshow(plt.imread(imagepath))\n    if (label!=-1):\n        plt.title(\"prediction : {} \\naccurate  : {}\".format(pdict[pred[0]],pdict[label]))\n    else:\n        plt.title(\"prediction : {}\".format(pdict[pred[0]]))","0babe41e":"modelpipeline('\/kaggle\/input\/agriculture-crop-images\/kag2\/rice\/rice024ahs.jpeg')","31be6e4e":"modelpipeline('..\/input\/agriculture-crop-images\/kag2\/wheat\/wheat0004a.jpeg')","97573035":"modelpipeline(\"..\/input\/agriculture-crop-images\/kag2\/maize\/maize008ahf.jpeg\")","b9f93cad":"modelpipeline(\"..\/input\/agriculture-crop-images\/kag2\/jute\/jute005a.jpeg\")","3bfa4a5d":"plt.figure(figsize=(20,20))\nfor num,path in enumerate(X_test[0:20]):\n    plt.subplot(4,5,num+1)\n    modelpipeline(path,lr,y_test[num][0])","97a873ca":"plt.figure(figsize=(20,20))\nfor num,path in enumerate(X_test[20:40]):\n    plt.subplot(4,5,num+1)\n    modelpipeline(path,lr,y_test[num+20][0])","6af121dd":"plt.figure(figsize=(20,20))\nfor num,path in enumerate(X_test[40:60]):\n    plt.subplot(4,5,num+1)\n    modelpipeline(path,lr,y_test[num+40][0])","ec0c7cd4":"import joblib\nfilename = 'lr_model.sav'\njoblib.dump(lr, filename)","720a4464":"# load the model from disk\n# loaded_model = joblib.load(filename)","d6fa9cca":"# Prediction on test images","0b2d3668":"# Prediction on sample images","89ace9c1":"# Pipelining","087d8de5":"# <font color = \"red\"> If you like this kernel. Then appreciate me with an upvote<\/font>","a326ceb8":"# Loading modules","d2afd7f2":"# Saving Model","8dff5315":"# Test Score","dbd7ec48":"# This kernel is related to classification of agriculture crop images\n# over 85 % accuracy only by linear model.","9cb1e5cd":"# Model training","1ad885c8":"# PCA decomposition","38d48c13":"# TSNE decomposition","55886cd1":"# Converting to training and testing data","9dbac50f":"# Plotting some images","79b78ea1":"# <font color = \"red\"> If you like this kernel. Then appreciate me with an upvote<\/font>"}}