{"cell_type":{"58e9e97e":"code","8dd8c46f":"code","1c037427":"code","3609b20e":"code","5919d123":"code","e46489af":"code","c76b0cad":"code","68249abd":"code","80b920af":"code","91820bc0":"code","1ccadad8":"code","f1b5ba58":"code","4dd27a0c":"code","debb2985":"code","8e180604":"code","e04158d5":"code","f4942474":"code","18983901":"code","29a34c35":"code","5fae2dd1":"code","dcd49bd1":"code","71911ec9":"code","ba3ac530":"code","05928861":"code","7cb79ffd":"code","411125d7":"code","e6694689":"code","9ec50f50":"code","f0d863e2":"code","913440d7":"code","e4812536":"code","2bf2ef76":"code","dee51fef":"code","128fed43":"markdown","9a96bfeb":"markdown","429d6f03":"markdown","16865e67":"markdown","7c8442cd":"markdown","cc72b9ce":"markdown","32839574":"markdown","8f90f4c3":"markdown","fc085b95":"markdown","5b96740d":"markdown","c5e3e69f":"markdown","d553de04":"markdown","31367db5":"markdown","22a644d2":"markdown","68aea85f":"markdown","d986063a":"markdown","75ef2831":"markdown","54b4189f":"markdown","c08df6a7":"markdown","5b2cdabf":"markdown","f154fcda":"markdown","b680e751":"markdown","965a9682":"markdown","62d08cab":"markdown","633993ff":"markdown","b1b696a9":"markdown","efc44ec2":"markdown","34d08407":"markdown","80db7e56":"markdown","0f424de3":"markdown","108243d5":"markdown","067296fb":"markdown","121f4465":"markdown","ccd2f29d":"markdown","fd880cb4":"markdown","7eddca31":"markdown","36e4ecae":"markdown","e7590d28":"markdown","69db57f6":"markdown","2914e827":"markdown","04cff38f":"markdown","6cdcd6b2":"markdown","c01c986d":"markdown","3a3c55be":"markdown","5a1b5c2b":"markdown","32c14828":"markdown","aad015d4":"markdown","4b3ca637":"markdown"},"source":{"58e9e97e":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\nfrom plotly.offline import init_notebook_mode, iplot \nimport plotly.graph_objects as go\nimport plotly.offline as py\nimport plotly.express as px\nimport pycountry\npy.init_notebook_mode(connected=True)\nimport folium \nfrom folium import plugins\n%config InlineBackend.figure_format = 'retina' \nplt.rcParams['figure.figsize'] = 8, 5\npd.options.mode.chained_assignment = None \npd.set_option('display.max_columns',None)\nimport warnings\nwarnings.filterwarnings('ignore')","8dd8c46f":"df = pd.read_csv('\/kaggle\/input\/indian-candidates-for-general-election-2019\/LS_2.0.csv')\ndf.head()","1c037427":"print('Number of rows and columns :',df.shape) # Number of rows and columns","3609b20e":"df.columns = df.columns.str.replace('\\n',' ') # To rename columns","5919d123":"df.describe()","e46489af":"df1 = df[df['PARTY']!= 'NOTA']\npercentage_missing_values = round(df1.isnull().sum()*100\/len(df1),2).reset_index()\npercentage_missing_values.columns = ['column_name','percentage_missing_values']\npercentage_missing_values = percentage_missing_values.sort_values('percentage_missing_values',ascending = False)\npercentage_missing_values","c76b0cad":"constituencies_per_state = df.groupby('STATE')['CONSTITUENCY'].nunique().reset_index().sort_values('CONSTITUENCY',ascending = False)\nfig = px.bar(constituencies_per_state, x='STATE', y='CONSTITUENCY', color='CONSTITUENCY', height=600)\nfig.show()","68249abd":"candidates_per_party = df.PARTY.value_counts().reset_index().rename(columns = {'index':'Party','PARTY':'Total Candidates'}).head(50)\ncandidates_per_party = candidates_per_party[candidates_per_party['Party'] != 'NOTA']\nfig = px.bar(candidates_per_party, x='Party', y='Total Candidates', color='Total Candidates', height=500)\nfig.show()","80b920af":"vote_share_top5 = df.groupby('PARTY')['TOTAL VOTES'].sum().nlargest(5).index.tolist()\ndef vote_share(row):\n    if row['PARTY'] not in vote_share_top5:\n        return 'Other'\n    else:\n        return row['PARTY']\ndf['Party New'] = df.apply(vote_share,axis =1)\ncounts = df.groupby('Party New')['TOTAL VOTES'].sum(sort=True)\nlabels = counts.index\nvalues = counts.values\npie = go.Pie(labels=labels, values=values, marker=dict(line=dict(color='#000000', width=1)))\nlayout = go.Layout(title='Partywise Vote Share')\nfig = go.Figure(data=[pie], layout=layout)\npy.iplot(fig)","91820bc0":"winning_candidates_per_party = df.groupby(['PARTY','SYMBOL'])['WINNER'].sum().reset_index().sort_values('WINNER',ascending = False)\nwinning_candidates_per_party = winning_candidates_per_party[winning_candidates_per_party['WINNER'] > 0]\nfig = px.bar(winning_candidates_per_party, x='PARTY', y='WINNER',hover_data =['SYMBOL'], color='WINNER', height=500)\nfig.show()","1ccadad8":"fig = px.histogram(df, x=\"AGE\")\nfig.show()","f1b5ba58":"fig = px.histogram(df.dropna(), x=\"AGE\", y=\"WINNER\", color=\"GENDER\", marginal=\"violin\",hover_data=df.columns)\nfig.show()","4dd27a0c":"df_winners = df[df['WINNER']==1]\ndf_winners = df_winners.sort_values('AGE').head(10)\nfig = px.bar(df_winners, x='NAME', y='AGE', color='AGE', height=500, hover_data=['PARTY','SYMBOL','CONSTITUENCY','STATE'])\nfig.show()","debb2985":"df_winners = df[df['WINNER']==1]\ndf_winners = df_winners.sort_values('AGE',ascending=False).head(10)\nfig = px.bar(df_winners, x='NAME', y='AGE', color='AGE', height=500, hover_data=['PARTY','SYMBOL','CONSTITUENCY','STATE'])\nfig.show()","8e180604":"df['CRIMINAL CASES'] = df['CRIMINAL CASES'].str.replace('Not Available','0')\ndf['CRIMINAL CASES'] = df['CRIMINAL CASES'].fillna(0)\ndf['CRIMINAL CASES'] = df['CRIMINAL CASES'].astype(int)\ncriminal_cases = df[(df['CRIMINAL CASES'] != 'Not Available') & (df['CRIMINAL CASES'].notnull())]\ncriminal_cases = criminal_cases.groupby('PARTY')['CRIMINAL CASES'].sum().reset_index().sort_values('CRIMINAL CASES',ascending=False).head(30)\nfig = px.bar(criminal_cases, x='PARTY', y='CRIMINAL CASES', color='CRIMINAL CASES', height=500)\nfig.show()","e04158d5":"df['EDUCATION'] = df['EDUCATION'].str.replace('Post Graduate\\n','Post Graduate')\ndf['EDUCATION'] = df['EDUCATION'].fillna('Others') \neducation = df[df['EDUCATION'] != 'Not Available']\neducation = education['EDUCATION'].value_counts().reset_index()\neducation.columns = ['EDUCATION','COUNT']\nfig = px.bar(education, x='EDUCATION', y='COUNT', color='COUNT', height=500)\nfig.show()","f4942474":"won_educated_candidates = df[df['WINNER']==1]\nfig = px.bar(won_educated_candidates, x='EDUCATION', y='WINNER', color='EDUCATION', height=500).update_xaxes(categoryorder = \"total descending\")\nfig.show()","18983901":"fig = px.histogram(df.dropna(), x=\"AGE\", y=\"PARTY\", color=\"WINNER\", marginal=\"violin\",hover_data=df.columns)\nfig.show()","29a34c35":"df_criminal_cases = df.loc[(df['CRIMINAL CASES'].notnull()) & (df['CRIMINAL CASES'] != 'Not Available')]\ndef criminal_cases(row):\n    if row['CRIMINAL CASES'] == 0:\n        return 'No'\n    else:\n        return 'Yes'\ndf_criminal_cases['HAS CRIMINAL CASE'] = df_criminal_cases.apply(criminal_cases,axis = 1)\ndf_criminal_cases_count = df_criminal_cases.groupby(['HAS CRIMINAL CASE','WINNER']).size().reset_index()\ndf_criminal_cases_count.columns = ['HAS CRIMINAL CASE','WINNER','COUNT']\n# pivot_df_criminal_cases_count = df_criminal_cases_count.pivot(index='HAS CRIMINAL CASE', columns='WINNER', values='COUNT')\n# pivot_df_criminal_cases_count.plot.bar(stacked=True,figsize=(10,7))\n# plt.xticks(rotation=0)\n# plt.show()\nfig = px.bar(df_criminal_cases_count, x=\"HAS CRIMINAL CASE\", y=\"COUNT\", color='WINNER')\nfig.show()","5fae2dd1":"df_votes_perct_constituency = df.groupby(['STATE','CONSTITUENCY','TOTAL ELECTORS'])['TOTAL VOTES'].sum().reset_index()\ndf_votes_perct_constituency['% VOTED IN CONSTITUENCY'] = round(df_votes_perct_constituency['TOTAL VOTES']*100\/df_votes_perct_constituency['TOTAL ELECTORS'],2)\ndf_voters_state = df[['STATE','CONSTITUENCY','TOTAL ELECTORS']].drop_duplicates()\ndf_voters_state = df_voters_state.groupby('STATE')['TOTAL ELECTORS'].sum().reset_index()\ndf_votes_state = df.groupby('STATE')['TOTAL VOTES'].sum().reset_index().sort_values('TOTAL VOTES',ascending = False)\ndf_votes_perct_state = pd.merge(df_votes_state,df_voters_state, on ='STATE',how = 'left')\ndf_votes_perct_state['% VOTED IN STATE'] = round(df_votes_perct_state['TOTAL VOTES']*100\/df_votes_perct_state['TOTAL ELECTORS'],2)\ndf_votes_perct_state = df_votes_perct_state.sort_values('% VOTED IN STATE',ascending = False)\nfig = px.bar(df_votes_perct_state, x='STATE', y='% VOTED IN STATE', color='% VOTED IN STATE', height=500)\nfig.show()","dcd49bd1":"fig = px.bar(df_votes_state, x='STATE', y='TOTAL VOTES', color='TOTAL VOTES', height=500)\nfig.show()","71911ec9":"df_assets = df.copy()\ndf_assets[['ASSETS2','ASSETS_VALUE']] = df_assets['ASSETS'].str.split('~',expand=True)\ndf_assets.drop(['ASSETS2'],axis =1,inplace=True)\ndf_assets = df_assets[df_assets['ASSETS_VALUE'].notnull()]\ndef asset_range(row):\n    if row['ASSETS_VALUE'].endswith('Crore+'):\n        return 'Crore+'\n    elif row['ASSETS_VALUE'].endswith('Lacs+'):\n        return 'Lakh+'\n    elif row['ASSETS_VALUE'].endswith('Thou+'):\n        return 'Thousand+'\n    else:\n        return 'NAN'\n\ndf_assets['ASSETS_RANGE'] = df_assets.apply(asset_range,axis =1)\ndf_assets['COUNT'] = 1\ndf_assets = df_assets[df_assets['ASSETS_RANGE'] != 'NAN']\ncounts = df_assets.groupby('ASSETS_RANGE')['COUNT'].sum(sort=True)\nlabels = counts.index\nvalues = counts.values\npie = go.Pie(labels=labels, values=values, marker=dict(line=dict(color='#000000', width=1)))\nlayout = go.Layout(title='Assests of Candidates')\nfig = go.Figure(data=[pie], layout=layout)\npy.iplot(fig)","ba3ac530":"df_category = df['CATEGORY'].value_counts().reset_index()\ndf_category.columns = ['CATEGORY','COUNT']\nfig = px.bar(df_category, x='CATEGORY', y='COUNT', color='CATEGORY', height=500)\nfig.show()","05928861":"df_gender = df['GENDER'].value_counts().reset_index()\ndf_gender.columns = ['GENDER','COUNT']\npie = go.Pie(labels=df_gender['GENDER'], values=df_gender['COUNT'], marker=dict(line=dict(color='black', width=1)))\nlayout = go.Layout(title='Male vs Female Ratio - All Candidates')\nfig = go.Figure(data=[pie], layout=layout)\npy.iplot(fig)","7cb79ffd":"df_gender_won =df[df['WINNER'] == 1]\ndf_gender_won = df_gender_won['GENDER'].value_counts().reset_index()\ndf_gender_won.columns = ['GENDER','COUNT']\npie = go.Pie(labels=df_gender_won['GENDER'], values=df_gender_won['COUNT'], marker=dict(line=dict(color='black', width=1)))\nlayout = go.Layout(title='Male vs Female Ratio - Winners')\nfig = go.Figure(data=[pie], layout=layout)\npy.iplot(fig)","411125d7":"df = df[df['PARTY']!= 'NOTA']\ndf[['ASSETS2','ASSETS_VALUE']] = df['ASSETS'].str.split('~',expand=True)\ndf.drop(['ASSETS2'],axis =1,inplace=True)\ndf = df[df['ASSETS_VALUE'].notnull()]\ndf['ASSETS_RANGE'] = df.apply(asset_range,axis =1)\n\ndf[['LIABILITY2','LIABILITY_VALUE']] = df['LIABILITIES'].str.split('~',expand=True)\ndf.drop(['LIABILITY2'],axis =1,inplace=True)\ndf = df[df['LIABILITY_VALUE'].notnull()]\n\ndef liability_range(row):\n    if row['LIABILITY_VALUE'].endswith('Crore+'):\n        return 'Crore+'\n    elif row['LIABILITY_VALUE'].endswith('Lacs+'):\n        return 'Lakh+'\n    elif row['LIABILITY_VALUE'].endswith('Thou+'):\n        return 'Thousand+'\n    else:\n        return 'NAN'\ndf['LIABILITY_RANGE'] = df.apply(liability_range,axis =1)","e6694689":"df1 = df[['STATE','CONSTITUENCY','WINNER','Party New','SYMBOL','GENDER','CRIMINAL CASES','AGE','CATEGORY','EDUCATION','TOTAL VOTES','TOTAL ELECTORS','ASSETS_RANGE','LIABILITY_RANGE']]\ncat_cols = ['STATE','CONSTITUENCY','Party New','SYMBOL','GENDER','CATEGORY','EDUCATION','ASSETS_RANGE','LIABILITY_RANGE']\nnum_cols = ['CRIMINAL CASES','AGE','TOTAL VOTES','TOTAL ELECTORS']","9ec50f50":"df_winner = df1['WINNER'].value_counts().reset_index()\ndf_winner.columns = ['RESULT','COUNT']\npie = go.Pie(labels=df_winner['RESULT'], values=df_winner['COUNT'], marker=dict(line=dict(color='black', width=1)))\nlayout = go.Layout(title='Total Candidates vs Winners')\nfig = go.Figure(data=[pie], layout=layout)\npy.iplot(fig)","f0d863e2":"dataset = pd.get_dummies(df1, columns = cat_cols)\nfrom sklearn.preprocessing import StandardScaler\nstandardScaler = StandardScaler()\ncolumns_to_scale = num_cols\ndataset[columns_to_scale] = standardScaler.fit_transform(dataset[columns_to_scale])\ndataset.head()","913440d7":"from sklearn.utils import resample\ndf_majority = dataset[dataset.WINNER == 0]\ndf_minority = dataset[dataset.WINNER == 1]\ndf_minority_upsampled = resample(df_minority, replace = True,n_samples = 1452, random_state = 0) \ndf_upsampled = pd.concat([df_majority, df_minority_upsampled])\ndf_upsampled.WINNER.value_counts()\n","e4812536":"y = df_upsampled['WINNER']\nX = df_upsampled.drop(['WINNER'], axis = 1)","2bf2ef76":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score\nrfc_scores = []\nfor k in range(1,21):\n    randomforest_classifier= RandomForestClassifier(n_estimators=k,random_state=0)\n    score=cross_val_score(randomforest_classifier,X,y,cv=10)\n    rfc_scores.append(score.mean())\nplt.figure(figsize =(20,7))\nplt.plot([k for k in range(1, 21)], rfc_scores, color = 'red')\nfor i in range(1,21):\n    plt.text(i, rfc_scores[i-1], (i, round(rfc_scores[i-1],3)))\nplt.xticks([i for i in range(1, 21)])\nplt.xlabel('Number of Estimators (K)')\nplt.ylabel('Scores')\nplt.title('Random Forest Classifier scores for different K values')","dee51fef":"randomforest_classifier= RandomForestClassifier(n_estimators=14,random_state=0)\nscore=cross_val_score(randomforest_classifier,X,y,cv=10)\nprint('% Accuracy :', round(score.mean()*100,4))","128fed43":"### Youngest MP's in India","9a96bfeb":"BJP got the highest vote share of 38.5% whereas INC was the distant second with 20.1% votes.","429d6f03":"### Reservations","16865e67":"BJP had fielded the highest of 420 candidates whereas INC had 413 candidates.","7c8442cd":"![](https:\/\/pragativadi.com\/wp-content\/uploads\/2019\/03\/Cabinet-approves-issue-of-notifications-for-General-Elections.jpg)","cc72b9ce":"Almost 70% of the candidates who contested election in 2019 had assets worth more than a crore!!!","32839574":"### Criminal Cases against Candidates","8f90f4c3":"### Candidates by Party","fc085b95":"### Total Voters by State","5b96740d":"Lakshadweep witnessed highest percentage of voting whereas voting was least in Jammu & Kashmir.","c5e3e69f":"### Age of Candidates","d553de04":"### Total Constituencies per State","31367db5":"### Data Scaling","22a644d2":"Uttar Pradesh has the highest of 80 constituencies.","68aea85f":"Now as we can see the dataset is balanced.So we can divide the dataset now into dependant & Independant variables.","d986063a":"## Please do upvote if you like my work. Happy Learning!","75ef2831":"### Educational Qualification of Candidates","54b4189f":"### Assests of Candidates","c08df6a7":"### Percentage of Voting by State","5b2cdabf":"By looking at the above graph, we can clearly see that this dataset is imbalanced. So, in order to balance the dataset, we need to either upsample or down sample the dataset. Down sampling of majority class might result in loss of some important information. So, we will be up-sampling the minority class using **resample**. Before doing that we need to scale the categorical columns using **get_dummies** and the numerical columns using **StandardScaler** library.","f154fcda":"### Candidates with Criminal Cases","b680e751":"### Percentage of missing values","965a9682":"In India, reservations exist in almost every field. Entire political game runs on the basis of religion,caste and all other forms of reservations.","62d08cab":"Age of all the candidates who contested election follows normal distribution with mean 52.","633993ff":"### Age of Candidates by Gender","b1b696a9":"### Oldest MP's in India","efc44ec2":"#### Observations:\n* There were 2018 candidates who contested 2019 LokSabha Election.\n* Minimum age of the candidates was 25 whereas maximum age was 86.\n* Average age of all the candidates who contested election was 52.\n* 19367 postal votes were casted in the election.","34d08407":"Average age females who contested election was slightly less than all the males who contested election.","80db7e56":"BJP Candidates had highest number of criminal cases against them. INC cnadidates were not too far behind.","0f424de3":"### Up-Sampling of Minority Class","108243d5":"As we can see from the graph accuracy is maximum at k =14. Hence we will be selecting **n_estimators**=14.","067296fb":"### Gender of Winning Candidates","121f4465":"### Classification of Winning & Losing Candidates based on Age","ccd2f29d":"BJP achieved a landslide victory winning 300 seats whereas INC won only 52 seats.","fd880cb4":"### Seats Won by Party","7eddca31":"### Gender of Candidates","36e4ecae":"If we exclude NOTA(None Of The Above) rows, there are no missing values.","e7590d28":"### Random Forest Classifier","69db57f6":"There is very clear gap between number of male & female representatives in the assembly.","2914e827":"Utatr Pradesh has highest number of people who are eligible for voting.","04cff38f":"We will be using **Random Forest Classifier** to predict the winners of the election. In order to know the optimum number of trees required to predict the result with highest accuracy, we will be plotting the accuracy score for various values of k and will be selecting k value that gives highest accuracy.","6cdcd6b2":"In order to predict the target variable \"WINNER\", first we need to select the columns necessary for prediction and exclude all the redundant columns. Also we nedd to categorize the columns into categorical & numerical columns.","c01c986d":"We have achieved an accuracy of about **96.3%** using Random Forest Classifier. Using Hyper Parameter Tuning we can try to achieve better accuracy.","3a3c55be":"### Partywise Vote Share","5a1b5c2b":"# Winner Prediction Using Random Forest","32c14828":"It looks like having criminal cases has no effect on election result!!","aad015d4":"Everything about Indian general elections is colossal - the Economist magazine once compared it to a \"lumbering elephant embarking on an epic trek\".The number of voters is bigger than the population of Europe and Australia combined.India's Centre for Media Studies estimated parties and candidates spent some $5bn (\u00a33.8bn) for the 2014 elections. A total of 10 lakh polling stations were  set up in 2019 as compared to around nine lakh in 2014. Looking at all these stats it is only going to get bigger in future. Now let's just jump into the analysis of 2019 Loksabha election data.","4b3ca637":"### Educational Qualification of Winning Candidates"}}