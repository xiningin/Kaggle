{"cell_type":{"0df42f1c":"code","b739c866":"code","41e4e42c":"code","30805c22":"code","b2c478f8":"code","261e830b":"code","b4f56a5c":"code","52d14e53":"code","4ecf508c":"code","6f49832a":"code","81f9321d":"code","ba9e8513":"code","11aa955e":"code","20dcdf8f":"code","88e55ca8":"code","67450f3b":"code","4a1e7d36":"markdown","16781b1f":"markdown","be9f8c80":"markdown","1d1800b3":"markdown","a4a1abf7":"markdown","eeb5222f":"markdown","d3ed2998":"markdown"},"source":{"0df42f1c":"! pip install timm","b739c866":"import numpy as np\nimport pandas as pd\nimport shutil\n\nimport torch\nimport torchvision\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torchvision import datasets, models, transforms\nfrom torch.utils.data.sampler import SubsetRandomSampler\n\nimport matplotlib.pyplot as plt\nimport time\nimport copy\nfrom random import shuffle\nimport random\n\nimport tqdm.notebook as tqdm\n\nimport sklearn\nfrom sklearn.metrics import accuracy_score, cohen_kappa_score\nfrom sklearn.metrics import classification_report\n\nfrom PIL import Image\nimport cv2\nimport glob\nfrom torch.autograd import Variable\n\nimport os\nimport pathlib\n\nfrom pathlib import Path\nfrom torch.utils.data import DataLoader, Dataset\n\nimport timm\nimport matplotlib.pyplot as plt\n\nimport PIL\nimport torchvision.transforms as T\nfrom torch.utils.data import DataLoader, Dataset\nfrom torchvision.datasets import ImageFolder","41e4e42c":"assert torch.cuda.is_available()\n\ndevice = torch.device(\"cuda\")","30805c22":"def seed_torch(seed=42):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n\nseed_torch()","b2c478f8":"train_data_dir = '..\/input\/1056lab-bird-image-classification\/train'\ntest_data_dir = '..\/input\/1056lab-bird-image-classification\/test'\nsub_path = '..\/input\/1056lab-bird-image-classification\/sampleSubmission.csv'","261e830b":"class BirdModel(nn.Module):\n    def __init__(\n        self,\n        model_name: str, pretrained : bool,\n        hidden_dim : int, out_dim : int\n    ):\n        \n        super().__init__()\n        \n        self.backbone = timm.create_model(\n            model_name, pretrained=pretrained, num_classes = 0)\n        \n        self.in_features = self.backbone.num_features\n        \n        self.head = nn.Sequential(\n                    nn.Linear(self.in_features, hidden_dim),\n                    nn.ReLU(),\n                    nn.Dropout(),\n                    nn.Linear(hidden_dim, 1024),\n                    nn.Dropout(),\n                    nn.Linear(1024, out_dim)\n                    )\n        \n    def forward(self, x):\n        x = self.backbone(x)\n        x = self.head(x)\n        \n        return x","b4f56a5c":"model = BirdModel(model_name = 'efficientnet_b0', pretrained=True, hidden_dim=2048, out_dim=300)\nmodel = model.to(device)\n\ncriterion = nn.CrossEntropyLoss() \noptimizer = optim.Adam(model.parameters(), lr=1e-3)\nexp_lr_scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=7, gamma=0.1)","52d14e53":"class TestDataset(Dataset):\n    def __init__(self, df, transform):\n        self.df = df\n        self.studyuid = df[\"filename\"]\n        self.transform = transform                \n        \n    def __len__(self):\n        return self.df.shape[0]\n\n    def __getitem__(self, idx):\n        path = self.studyuid[idx]\n        path = test_data_dir + \"\/\" + path\n        image = PIL.Image.open(path)\n        image = self.transform(image)\n        \n        return image","4ecf508c":"IMG_MEAN = [0.485, 0.456, 0.406]\nIMG_STD = [0.229, 0.224, 0.225]\n\ntransforms = transforms.Compose([\n                                      transforms.Resize((224,224)),\n                                      transforms.ToTensor(),\n                                      transforms.Normalize(mean=IMG_MEAN, std=IMG_STD)\n])","6f49832a":"test = pd.read_csv(sub_path)\ntest_dataset = TestDataset(df=test, transform = transforms)\ntest_loader = DataLoader(test_dataset, batch_size = 1, shuffle = False,num_workers = 4)","81f9321d":"inf_model = model\ninf_model.to(device)\ninf_model.load_state_dict(torch.load('..\/input\/birdimage-baseline-training\/best_model.pth'))\ninf_model.eval()\ny_pred = []","ba9e8513":"for image in tqdm.tqdm(test_loader):\n    if torch.cuda.is_available():\n        image = image.to(device)  \n    y = inf_model(image)\n    y = torch.argmax(y, dim=1).to('cpu')\n    y_pred.append(y)","11aa955e":"y_pre = []\nfor i in range(0, len(test_loader)):\n    y_pre.append(y_pred[i].to('cpu').detach().numpy().copy())\n    \npre = pd.Series(y_pre)\npre = pd.DataFrame(pre,dtype='str')\npre['species'] = pre[0].str[1:]\npre['se'] = pre['species'].str[0:-1]\npre['species'] = pre[0].str[1:]\npre['se'].astype(int)","20dcdf8f":"bird = []\nfor directory in os.listdir(train_data_dir):\n    if '.' not in directory:\n        bird.append(directory)\nbird = pd.DataFrame(bird)\nbird = bird.rename(columns={0:'tori'})","88e55ca8":"sub = pd.read_csv(sub_path)\nbird = pd.DataFrame(bird)\nbird = bird.rename(columns={0:'tori'})\n\nfor i in range(0,len(pre)):\n    a = pre['se'][i]\n    pre['se'][i] = bird['tori'][int(a)]\nsub['species'] = pre['se']","67450f3b":"sub.to_csv('submit.csv',index = False)","4a1e7d36":"# Dataloader","16781b1f":"# SEED\u56fa\u5b9a","be9f8c80":"# \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u5b9a\u7fa9","1d1800b3":"# Model","a4a1abf7":"# GPU","eeb5222f":"# Library","d3ed2998":"# Inference"}}