{"cell_type":{"3a2c6ad7":"code","6f37da14":"code","90c8aa3b":"code","5fe8b503":"code","b10075c1":"code","d692af2a":"code","1337c16d":"code","04ac2491":"code","acd86532":"code","f1e7277f":"code","00c4554e":"code","a2066f06":"code","aec30106":"code","5c2b788e":"code","43665c7c":"code","7a2f3376":"code","2b669045":"code","75ed92e7":"code","612ccd50":"code","9d94322d":"code","39adb978":"markdown","38daba6b":"markdown","e02398ad":"markdown","7d2e90ec":"markdown"},"source":{"3a2c6ad7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt # to plot charts\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nfrom collections import Counter\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6f37da14":"df = pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")\ndf.head(5)","90c8aa3b":"len(df)\n#Check Data size","5fe8b503":"df.info()\n#Check Data types","b10075c1":"df.isnull()\n#Check basic null values","d692af2a":"df.isnull().sum()","1337c16d":"df.describe()\n#Check basic Stats from data","04ac2491":"df.isnull().sum()","acd86532":"plt.figure(figsize=(13,10))\nsns.heatmap(df.corr(),annot=True, fmt = \".2f\", cmap = \"coolwarm\")","f1e7277f":"plt.figure(figsize=(13,6))\ng = sns.kdeplot(df[\"Pregnancies\"][df[\"Outcome\"] == 1], color=\"Red\", shade = True)\ng = sns.kdeplot(df[\"Pregnancies\"][df[\"Outcome\"] == 0], ax =g, color=\"Green\", shade= True)\ng.set_xlabel(\"Pregnancies\")\ng.set_ylabel(\"Frequency\")\ng.legend([\"Positive\",\"Negative\"])","00c4554e":"sns.countplot('Outcome',data=df)","a2066f06":"df","aec30106":"plt.figure(figsize=(10,6))\nsns.violinplot(data=df, x=\"Outcome\", y=\"Glucose\",\n               split=True, inner=\"quart\", linewidth=1)","5c2b788e":"# Explore Glucose vs Outcome\n\nplt.figure(figsize=(13,6))\ng = sns.kdeplot(df[\"Glucose\"][df[\"Outcome\"] == 1], color=\"blue\", shade = True)\ng = sns.kdeplot(df[\"Glucose\"][df[\"Outcome\"] == 0], ax =g, color=\"Green\", shade= True)\ng.set_xlabel(\"Glucose\")\ng.set_ylabel(\"Frequency\")\ng.legend([\"Positive\",\"Negative\"])","43665c7c":"# Glucose vs BMI vs Age\n\nplt.figure(figsize=(20,10))\nsns.scatterplot(data=df, x=\"Glucose\", y=\"BMI\", hue=\"Age\", size=\"Age\")","7a2f3376":"# Explore Age vs Sex, Parch , Pclass and SibSP\ng = sns.catplot(y=\"BloodPressure\",x=\"Outcome\",data=df,kind=\"box\")\ng.set_ylabels(\"Blood Pressure\")\ng.set_xlabels(\"Outcome\")","2b669045":"sns.set_theme(style=\"whitegrid\")\nplt.figure(figsize=(8,7))\n\nsns.boxenplot(x=\"Outcome\", y=\"DiabetesPedigreeFunction\",\n              color=\"b\", \n              scale=\"linear\", data=df)\ng.set_ylabels(\"Diabetes Pedigree Function\")\ng.set_xlabels(\"Outcome\")","75ed92e7":"def detect_outliers(df,n,features):\n    outlier_indices = []\n    \"\"\"\n    Detect outliers from given list of features. It returns a list of the indices\n    according to the observations containing more than n outliers according\n    to the Tukey method\n    \"\"\"\n    # iterate over features(columns)\n    for col in features:\n        Q1 = np.percentile(df[col], 25)\n        Q3 = np.percentile(df[col],75)\n        IQR = Q3 - Q1\n        \n        # outlier step\n        outlier_step = 1.5 * IQR\n        \n        # Determine a list of indices of outliers for feature col\n        outlier_list_col = df[(df[col] < Q1 - outlier_step) | (df[col] > Q3 + outlier_step )].index\n        \n        # append the found outlier indices for col to the list of outlier indices \n        outlier_indices.extend(outlier_list_col)\n        \n    # select observations containing more than 2 outliers\n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list( k for k, v in outlier_indices.items() if v > n )\n    \n    return multiple_outliers   \n\n# detect outliers from numeric features\noutliers_to_drop = detect_outliers(df, 2 ,[\"Pregnancies\", 'Glucose', 'BloodPressure', 'BMI', 'DiabetesPedigreeFunction', 'SkinThickness', 'Insulin', 'Age'])","612ccd50":"df.loc[outliers_to_drop]\n#no outlier is available in our dataset","9d94322d":"df.corr()\n#Checked Co relation  Between different Features.","39adb978":"load dataset","38daba6b":"Check Co relation  Between different Features.","e02398ad":"Feature Engineering","7d2e90ec":"Define ML type of Above dataset\nThis is supervised learning classification problem.\n"}}