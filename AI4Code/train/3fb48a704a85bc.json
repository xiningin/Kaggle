{"cell_type":{"c2eab199":"code","58c63830":"code","49966fa1":"code","f4a83b89":"code","09b285ba":"code","0965dc63":"code","b1523585":"code","e5c76991":"code","90937ff0":"code","a78b2c62":"code","69736cf5":"code","fb23285b":"code","4f64c4af":"markdown","52d4aecc":"markdown","828712cc":"markdown","20463d8f":"markdown","57d28a2b":"markdown","08ee9255":"markdown","83efc69e":"markdown","f094ebbd":"markdown","a65cfa9d":"markdown"},"source":{"c2eab199":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy.stats as stats\n%matplotlib inline\n\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot, init_notebook_mode\nimport plotly.figure_factory as ff\nfrom plotly import subplots\nfrom plotly.subplots import make_subplots\ninit_notebook_mode(connected=True)\n\nfrom datetime import date, datetime, timedelta\n\npd.set_option('display.max_columns', 100)\npd.set_option('display.max_rows', 100)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","58c63830":"def resumetable(df):\n    print(f\"Dataset Shape: {df.shape}\")\n    summary = pd.DataFrame(df.dtypes, columns=['dtypes'])\n    summary = summary.reset_index()\n    summary['Name'] = summary['index']\n    summary = summary[['Name','dtypes']]\n    summary['Missing'] = df.isnull().sum().values    \n    summary['Uniques'] = df.nunique().values\n\n    return summary","49966fa1":"df = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/2019_nCoV_data.csv\",)\nresumetable(df)","f4a83b89":"df.rename(columns={'Last Update': 'LastUpdate',\n                   'Province\/State': 'PS'},\n         inplace=True)\ndf['Date'] = pd.to_datetime(df['Date']).dt.date\n\nvirus_cols=['Confirmed', 'Deaths', 'Recovered']\n\ndf = df[df[virus_cols].sum(axis=1)!=0]\n\nresumetable(df)","09b285ba":"df.loc[(df['PS'].isnull()) & (df.groupby('Country')['PS'].transform('nunique') == 0), 'PS'] = \\\n        df.loc[(df['PS'].isnull()) & (df.groupby('Country')['PS'].transform('nunique') == 0), 'Country'].to_numpy()\n\ndf['Country'] = np.where(df['Country']=='Mainland China', 'China', df['Country'])\ndf.dropna(inplace=True)\nresumetable(df)","0965dc63":"#import time\n#import geopy\n#locator = geopy.Nominatim(user_agent='uagent')\n#\n#pairs = df[['Country', 'PS']].drop_duplicates().to_numpy()\n##d={}\n#for p in pairs:\n#    if p[0] + ', ' + p[1] not in d:\n#        l = p[0] + ', ' + p[1] if p[0]!=p[1] else p[0]\n#        location = locator.geocode(l)\n#\n#        d[l] = [location.latitude, location.longitude]\n#        print(l, location.latitude, location.longitude)\n#        time.sleep(1)","b1523585":"d = {'Australia, Victoria': [-36.5986096, 144.6780052],\n 'Australia, Queensland': [-22.1646782, 144.5844903],\n 'Australia, New South Wales': [-31.8759835, 147.2869493],\n 'Cambodia': [13.5066394, 104.869423],\n 'Canada, Ontario': [50.000678, -86.000977],\n 'Canada, British Columbia': [55.001251, -125.002441],\n 'China, Anhui': [32.0, 117.0],\n 'China, Fujian': [26.5450001, 117.842778],\n 'China, Guizhou': [27.0, 107.0],\n 'China, Hebei': [39.0000001, 116.0],\n 'China, Jiangsu': [33.0000001, 119.9999999],\n 'China, Macau': [22.1757605, 113.5514142],\n 'China, Ningxia': [37.0000001, 105.9999999],\n 'China, Shanxi': [37.0, 112.0],\n 'China, Taiwan': [23.9739374, 120.9820179],\n 'China, Yunnan': [25.0, 102.0],\n 'China, Jilin': [42.9995032, 125.9816054],\n 'China, Inner Mongolia': [43.2443242, 114.3251664],\n 'China, Qinghai': [35.40709525, 95.95211573241954],\n 'China, Tibet': [31.894343149999997, 87.07813712706509],\n 'China, Guangxi': [24.0, 109.0],\n 'China, Jiangxi': [28.0, 116.0],\n 'China, Liaoning': [40.9975197, 122.9955469],\n 'China, Shandong': [36.0000001, 118.9999999],\n 'China, Gansu': [38.0000001, 101.9999999],\n 'China, Heilongjiang': [48.0000047, 127.999992],\n 'China, Xinjiang': [41.7574769, 87.16738423046897],\n 'China, Shaanxi': [36.0, 109.0],\n 'China, Hainan': [19.2000001, 109.5999999],\n 'China, Hunan': [27.9995878, 112.009538],\n 'China, Tianjin': [39.1235635, 117.1980785],\n 'China, Henan': [34.0000001, 113.9999999],\n 'China, Sichuan': [30.5000001, 102.4999999],\n 'China, Chongqing': [30.05518, 107.8748712],\n 'China, Shanghai': [31.2322758, 121.4692071],\n 'China, Zhejiang': [29.0000001, 119.9999999],\n 'China, Beijing': [39.906217, 116.3912757],\n 'China, Guangdong': [23.1357694, 113.1982688],\n 'China, Hubei': [31.15172525, 112.87832224656043],\n 'Finland': [63.2467777, 25.9209164],\n 'France': [46.603354, 1.8883335],\n 'Germany, Bavaria': [48.9467562, 11.4038717],\n 'Hong Kong': [22.2793278, 114.1628131],\n 'India': [22.3511148, 78.6677428],\n 'Italy': [42.6384261, 12.674297],\n 'Japan': [36.5748441, 139.2394179],\n 'Macau': [22.1757605, 113.5514142],\n 'Malaysia': [4.5693754, 102.2656823],\n 'Nepal': [28.1083929, 84.0917139],\n 'Philippines': [12.7503486, 122.7312101],\n 'Russia': [64.6863136, 97.7453061],\n 'Singapore': [1.357107, 103.8194992],\n 'South Korea': [36.5581914, 127.9408564],\n 'Spain': [39.3262345, -4.8380649],\n 'Sri Lanka': [7.5554942, 80.7137847],\n 'Sweden': [59.6749712, 14.5208584],\n 'Taiwan': [23.9739374, 120.9820179],\n 'Thailand': [14.8971921, 100.83273],\n 'UK': [54.7023545, -3.2765753],\n 'US, Washington': [38.8948932, -77.0365529],\n 'US, Chicago': [41.8755616, -87.6244212],\n 'US, Illinois': [40.0796606, -89.4337288],\n 'US, Arizona': [34.395342, -111.7632755],\n 'US, California': [36.7014631, -118.7559974],\n 'United Arab Emirates': [24.0002488, 53.9994829],\n 'Vietnam': [13.2904027, 108.4265113],\n 'Australia, South Australia': [-30.5343665, 135.6301212],\n 'Germany, Hong Kong': [51.49144235, 11.974836546938391],\n 'US, Boston, MA': [42.3602534, -71.0582912],\n 'US, Los Angeles, CA': [34.0536909, -118.2427666],\n 'US, Orange, CA': [29.7742659, -95.3341066],\n 'US, Santa Clara, CA': [37.3541132, -121.9551744],\n 'US, Seattle, WA': [47.6038321, -122.3300624],\n 'US, Tempe, AZ': [33.4255056, -111.9400125],\n 'US, Chicago, IL': [41.8755616, -87.6244212],\n 'Canada, Toronto, ON': [43.651070, -79.347015],\n 'US, San Benito, CA': [26.132576, -97.6311006],\n 'Canada, London, ON': [42.983612, -81.249725],\n 'Belgium': [50.85045, 4.34878] #using Brussels\n    }","e5c76991":"def coords(row):\n    \n    k = row['Country'] +', '+ row['PS'] if row['Country'] != row['PS'] else row['Country']\n    try:\n      row['lat'] = d[k][0]\n      row['lon'] = d[k][1]\n    except:\n        print(\"Need lat and lon for\", k)\n    return row\n\ndf = df.apply(coords, axis=1)\ndf.head(10)","90937ff0":"df = df.groupby(['PS', 'Country', 'Date']).agg({'Confirmed': 'sum',\n                                                'Deaths': 'sum',\n                                                'Recovered': 'sum',\n                                                'lat': 'max',\n                                                'lon': 'max'}).reset_index()\ndf = df[df['Date']>date(2020,1,20)]","a78b2c62":"dates = np.sort(df['Date'].unique())\ndata = [go.Scattergeo(\n            locationmode='country names',\n            lon = df.loc[df['Date']==dt, 'lon'],\n            lat = df.loc[df['Date']==dt, 'lat'],\n            text = df.loc[df['Date']==dt, 'Country'] + ', ' + df.loc[df['Date']==dt, 'PS'] +   '-> Deaths: ' + df.loc[df['Date']==dt, 'Deaths'].astype(str) + ' Confirmed: ' + df.loc[df['Date']==dt,'Confirmed'].astype(str),\n            mode = 'markers',\n            marker = dict(\n                size = (df.loc[df['Date']==dt,'Confirmed'])**(1\/2.7)+3,\n                opacity = 0.6,\n                reversescale = True,\n                autocolorscale = False,\n                line = dict(\n                    width=0.5,\n                    color='rgba(0, 0, 0)'\n                        ),\n                #colorscale='rdgy', #'jet',rdylbu, 'oryel', \n                cmin=0,\n                color=df.loc[df['Date']==dt,'Deaths'],\n                cmax=df['Deaths'].max(),\n                colorbar_title=\"Number of Deaths\"\n            )) \n        for dt in dates]\n\n\nfig = go.Figure(\n    data=data[0],\n    layout=go.Layout(\n        title = {'text': f'Corona Virus spreading in Asia, {dates[0]}',\n                                'y':0.98,\n                                'x':0.5,\n                                'xanchor': 'center',\n                                'yanchor': 'top'},\n        geo = dict(\n            scope='asia',\n            projection_type='robinson',\n            showland = True,\n            landcolor = \"rgb(252, 240, 220)\",\n            showcountries=True,\n            showocean=True,\n            oceancolor=\"rgb(219, 245, 255)\",\n            countrycolor = \"rgb(128, 128, 128)\",\n            lakecolor =\"rgb(219, 245, 255)\",\n            showrivers=True,\n            showlakes=True,\n            showcoastlines=True,\n            countrywidth = 1,\n            \n            ),\n     updatemenus=[dict(\n            type=\"buttons\",\n            buttons=[dict(label=\"Play\",\n                          method=\"animate\",\n                          args=[None])])]),\n    \n    frames=[go.Frame(data=dt, \n                     layout=go.Layout(\n                          title={'text': f'Corona Virus spreading in Asia, {date}',\n                                'y':0.98,\n                                'x':0.5,\n                                'xanchor': 'center',\n                                'yanchor': 'top'}\n                           ))\n            for dt,date in zip(data[1:],dates[1:])])\n\nfig.show()","69736cf5":"dates = np.sort(df['Date'].unique())\ndata = [go.Scattergeo(\n            locationmode='country names',\n            lon = df.loc[df['Date']==dt, 'lon'],\n            lat = df.loc[df['Date']==dt, 'lat'],\n            text = df.loc[df['Date']==dt, 'Country'] + ', ' + df.loc[df['Date']==dt, 'PS'] +   '-> Deaths: ' + df.loc[df['Date']==dt, 'Deaths'].astype(str) + ' Confirmed: ' + df.loc[df['Date']==dt,'Confirmed'].astype(str),\n            mode = 'markers',\n            marker = dict(\n                size = (df.loc[df['Date']==dt,'Confirmed'])**(1\/2.7)+3,\n                opacity = 0.6,\n                reversescale = True,\n                autocolorscale = False,\n                line = dict(\n                    width=0.5,\n                    color='rgba(0, 0, 0)'\n                        ),\n                #colorscale='rdgy', #'jet',rdylbu, 'oryel', \n                cmin=0,\n                color=df.loc[df['Date']==dt,'Deaths'],\n                cmax=df['Deaths'].max(),\n                colorbar_title=\"Number of Deaths\"\n            )) \n        for dt in dates]\n\n\nfig = go.Figure(\n    data=data[0],\n    layout=go.Layout(\n        title = {'text': f'Corona Virus, {dates[0]}',\n                                'y':0.98,\n                                'x':0.5,\n                                'xanchor': 'center',\n                                'yanchor': 'top'},\n        geo = dict(\n            scope='world',\n            projection_type='robinson',\n            showland = True,\n            landcolor = \"rgb(252, 240, 220)\",\n            showcountries=True,\n            showocean=True,\n            oceancolor=\"rgb(219, 245, 255)\",\n            countrycolor = \"rgb(128, 128, 128)\",\n            lakecolor =\"rgb(219, 245, 255)\",\n            showrivers=True,\n            showlakes=True,\n            showcoastlines=True,\n            countrywidth = 1,\n            \n            ),\n     updatemenus=[dict(\n            type=\"buttons\",\n            buttons=[dict(label=\"Play\",\n                          method=\"animate\",\n                          args=[None])])]),\n    \n    frames=[go.Frame(data=dt, \n                     layout=go.Layout(\n                          title={'text': f'Corona Virus, {date}',\n                                'y':0.98,\n                                'x':0.5,\n                                'xanchor': 'center',\n                                'yanchor': 'top'}\n                           ))\n            for dt,date in zip(data[1:],dates[1:])])\n\nfig.show()","fb23285b":"import plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot, init_notebook_mode\nimport plotly.figure_factory as ff\nfrom plotly import subplots\ninit_notebook_mode(connected=True)\n\nfrom datetime import timedelta\n\nchina=df.loc[df['Country']=='China']\nhubei=china.loc[china['PS']=='Hubei']\nrest_of_china=china.loc[china['PS']!='Hubei'].groupby('Date').sum().reset_index()\n\nchina=china.groupby('Date').sum().reset_index()\n\nagg_df=df.groupby(['Country', 'Date']).sum().reset_index()\n\nrest_df=agg_df.loc[agg_df['Country']!='China'].groupby('Date').sum().reset_index()\n\n\n\ndates = np.sort(df['Date'].unique())\ndt_range = [np.min(dates)-timedelta(days=1), np.max(dates)+timedelta(days=1)]\n\n# Row 1\nframes_hubei = [go.Scatter(x=hubei['Date'],\n                           y=hubei.loc[hubei['Date']<=dt, 'Confirmed'],\n                           name='Hubei, Confirmed',\n                           legendgroup=\"21\") for dt in dates]\n\nframes_rchina = [go.Scatter(x=rest_of_china['Date'],\n                           y=rest_of_china.loc[rest_of_china['Date']<=dt, 'Confirmed'],\n                           name='Rest of China, Confirmed',\n                           legendgroup=\"21\") for dt in dates]\n\n\nframes_world = [go.Scatter(x=rest_df['Date'],\n                           y=rest_df.loc[rest_df['Date']<=dt, 'Confirmed'],\n                           name='Rest of the World, Confirmed',\n                           legendgroup=\"22\") for dt in dates]\n\n\n# Row 2\nframes_china_d = [go.Scatter(x=china['Date'],\n                           y=china.loc[china['Date']<=dt, 'Deaths'],\n                           name='China, Deaths',\n                           legendgroup=\"31\") for dt in dates]\n\nframes_china_r = [go.Scatter(x=china['Date'],\n                           y=china.loc[china['Date']<=dt, 'Recovered'],\n                           name='China, Recovered',\n                           legendgroup=\"31\") for dt in dates]\n\n\nframes_world_d = [go.Scatter(x=rest_df['Date'],\n                           y=rest_df.loc[rest_df['Date']<=dt, 'Deaths'],\n                           name='Rest of World, Deaths',\n                           legendgroup=\"32\") for dt in dates]\n\nframes_world_r = [go.Scatter(x=rest_df['Date'],\n                           y=rest_df.loc[rest_df['Date']<=dt, 'Recovered'],\n                           name='Rest of World, Recovered',\n                           legendgroup=\"32\") for dt in dates]\n\n\n\n\nfig = make_subplots(\n    rows=2, cols=2,\n    specs=[[{}, {}],\n           [{}, {}]],\n    subplot_titles=(\"China, Confirmed\", 'Rest of the World, Confirmed',\n                    \"China, Deaths & Recovered\", 'Rest of the World, Deaths & Recovered'))\n\n\n# Row 1: Confirmed\nfig.add_trace(frames_hubei[0], row=1, col=1)\nfig.add_trace(frames_rchina[0], row=1, col=1)\nfig.add_trace(frames_world[0], row=1,col=2)\n\n\n# Row 2: Deaths & Recovered\nfig.add_trace(frames_china_d[0], row=2, col=1)\nfig.add_trace(frames_china_r[0], row=2, col=1)\nfig.add_trace(frames_world_d[0], row=2,col=2)\nfig.add_trace(frames_world_r[0], row=2,col=2)\n\n\n# Add Layout\nfig.update_xaxes(showgrid=False)\n\nfig.update_layout(\n        title={\n            'text': 'Corona Virus: Confirmed, Deaths & Recovered',\n            'y':0.98,\n            'x':0.5,\n            'xanchor': 'center',\n            'yanchor': 'top'},\n        height=750,\n        legend_orientation=\"h\",\n        #legend=dict(x=1, y=0.4),\n        xaxis1=dict(range=dt_range, autorange=False),\n        yaxis1=dict(range=[-10, hubei['Confirmed'].max()*1.1 ], autorange=False),\n        xaxis2=dict(range=dt_range, autorange=False),\n        yaxis2=dict(range=[-10, rest_df['Confirmed'].max()*1.1 ], autorange=False),\n        xaxis3=dict(range=dt_range, autorange=False),\n        yaxis3=dict(range=[-10, np.max([china['Recovered'].max(), china['Deaths'].max()])*1.1 ], autorange=False),\n        xaxis4=dict(range=dt_range, autorange=False),\n        yaxis4=dict(range=[-0.5, np.max([rest_df['Recovered'].max(), rest_df['Deaths'].max()])*1.1], autorange=False),\n        )\n\n\nframes = [dict(\n               name = str(dt),\n               data = [frames_hubei[i], frames_rchina[i], frames_world[i],\n                       frames_china_d[i], frames_china_r[i],\n                       frames_world_d[i], frames_world_r[i]\n                       ],\n               traces=[0, 1, 2, 3, 4 ,5 ,6, 7]\n              ) for i, dt in enumerate(dates)]\n\n\n\nupdatemenus = [dict(type='buttons',\n                    buttons=[dict(label='Play',\n                                  method='animate',\n                                  args=[[str(dt) for dt in dates[1:]], \n                                         dict(frame=dict(duration=500, redraw=False), \n                                              transition=dict(duration=0),\n                                              easing='linear',\n                                              fromcurrent=True,\n                                              mode='immediate'\n                                                                 )])],\n                    direction= 'left', \n                    pad=dict(r= 10, t=85), \n                    showactive =True, x= 0.6, y= -0.1, xanchor= 'right', yanchor= 'top')\n            ]\n\nsliders = [{'yanchor': 'top',\n            'xanchor': 'left', \n            'currentvalue': {'font': {'size': 16}, 'prefix': 'Date: ', 'visible': True, 'xanchor': 'right'},\n            'transition': {'duration': 500.0, 'easing': 'linear'},\n            'pad': {'b': 10, 't': 50}, \n            'len': 0.9, 'x': 0.1, 'y': -0.2, \n            'steps': [{'args': [[str(dt)], {'frame': {'duration': 500.0, 'easing': 'linear', 'redraw': False},\n                                      'transition': {'duration': 0, 'easing': 'linear'}}], \n                       'label': str(dt), 'method': 'animate'} for dt in dates     \n                    ]}]\n\n\n\nfig.update(frames=frames),\nfig.update_layout(updatemenus=updatemenus,\n                  sliders=sliders);\nfig.show() ","4f64c4af":"Let's plot the virus spreading in Asia and in the rest of the world over time. Size is related to number of confirmed cases, colorscale depends upon the number of deaths.","52d4aecc":"**Remark**: Many great kernels have already been posted. My goal is to explore the data using the Plotly animation feature in scatter and geo plots!\nFor the moment this kernel has no further insights nor predictions.","828712cc":"We see that there are lots of missing values in the Province\/State column, let's fill with Country value if there are no other Province\/State, and drop the remaining 2 rows.","20463d8f":"Great Kernel created by FBruzzesi.  Updated with new latitudes and longitutdes so kernel can run through Feb 4","57d28a2b":"Retrieve latitute and longitude for each Country-Province pair using geopy package.","08ee9255":"Let's rename columns, change datetime to date format, drop rows with (0,0,0) triplets.","83efc69e":"Yet, since I cannot make it work on kaggle notebook, here the full list ","f094ebbd":"Load libraries and the dataset.","a65cfa9d":"Lastly, let's see how number of confirmed, deaths and recovered evolve over time, in China and the rest of the world.\n\n**Take care**, y-scales are very different!"}}