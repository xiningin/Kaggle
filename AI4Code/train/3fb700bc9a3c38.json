{"cell_type":{"7eff1461":"code","f30f2753":"code","50a90198":"code","67617745":"code","8bd8e29b":"code","1851191a":"code","78455cf9":"code","38d7ca55":"code","87b9d64e":"code","48acbdf3":"code","c91e2ed5":"code","f328d588":"code","0cc3b414":"code","5ebf2be8":"code","cedf07f3":"code","700ac729":"code","8beb9095":"code","679fb72e":"code","0e78b11b":"code","80f4b500":"code","032f313d":"code","94415330":"code","d20a9fc4":"code","f86ed956":"code","304e5b34":"code","5f532d62":"code","a748b85e":"code","771dfe54":"code","4a0f90ef":"code","197f60bb":"code","e91b1980":"code","686d24ba":"code","bce1ac53":"code","db2b2014":"code","88cb6ad1":"code","a9b078a9":"code","d69d7cca":"code","db7f91db":"code","3dedcc76":"code","b4d9e7c5":"code","4e210b44":"code","96ac9a90":"code","a66e53dd":"markdown","858dc624":"markdown","61252e5c":"markdown","aa22f6f2":"markdown","4e48724d":"markdown","7111c7be":"markdown","17def6d1":"markdown","11b21de2":"markdown","3a386e3d":"markdown","47379c64":"markdown","1f683eeb":"markdown"},"source":{"7eff1461":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f30f2753":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","50a90198":"df = pd.read_csv(\"..\/input\/diabetes\/diabetes.csv\")","67617745":"df.head()","8bd8e29b":"df.shape","1851191a":"df.isnull().sum()","78455cf9":"sns.heatmap(df.corr())","38d7ca55":"sns.countplot(df['Outcome'])","87b9d64e":"sns.pairplot(df, hue = \"Outcome\")","48acbdf3":"features = [df.columns]\nfeatures","c91e2ed5":"plt.figure(figsize=(20,10))\nsns.boxplot(data =df, orient='v', palette='rainbow')","f328d588":"index_s = df[df['SkinThickness'] == 0].index.values\nfor i in index_s:\n    df['SkinThickness'][i] = df['SkinThickness'].mean()","0cc3b414":"index_I = df[df['Insulin'] == 0].index.values\nfor i in index_I:\n    df['Insulin'][i] = df['Insulin'].mean()","5ebf2be8":"index_g = df[df['Glucose'] == 0].index.values\nfor i in index_g:\n    df['Glucose'][i] = df['Glucose'].mean()","cedf07f3":"index_b = df[df['BloodPressure'] == 0].index.values\nfor i in index_b:\n    df['BloodPressure'][i] = df['BloodPressure'].mean()","700ac729":"index_bmi = df[df['BMI'] == 0].index.values\nfor i in index_bmi:\n    df['BMI'][i] = df['BMI'].mean()","8beb9095":"index_d = df[df['Pregnancies'] == 0].index.values\nlen(index_d)","679fb72e":"from sklearn.preprocessing import StandardScaler","0e78b11b":"scaler = StandardScaler()","80f4b500":"scaler.fit(df.drop('Outcome', axis = 1))","032f313d":"scaled_features = scaler.transform(df.drop('Outcome', axis = 1))","94415330":"scaled_data = pd.DataFrame(scaled_features, columns = df.columns[ : -1])","d20a9fc4":"scaled_data.head()","f86ed956":"plt.figure(figsize=(20,10))\nsns.boxplot(data = scaled_data, orient='v', palette='rainbow')","304e5b34":"scaled_data['Insulin'].describe()","5f532d62":"feature_data = scaled_data.columns","a748b85e":"for i in feature_data:\n    q1 = scaled_data[i].describe()['25%']\n    q3 = scaled_data[i].describe()['75%']\n    IQR = q3 - q1\n    high = q3 + (1.5*IQR)\n    out_data_1 = scaled_data[scaled_data[i] > high]\n    idx_1 = out_data_1.index.values\n    \n    for j in idx_1:\n        scaled_data[i].iloc[j] = high\n    \n    low = q3 - (1.5*IQR)\n    out_data_2 = scaled_data[scaled_data[i] < low]\n    idx_2 = out_data_2.index.values\n    \n    for k in idx_2:\n        scaled_data[i].iloc[k] = low","771dfe54":"plt.figure(figsize=(20,10))\nsns.boxplot(data = scaled_data, orient='v', palette='rainbow')","4a0f90ef":"from sklearn.model_selection import train_test_split","197f60bb":"X_train, X_test, y_train, y_test = train_test_split(scaled_data, df['Outcome'], test_size = 0.3)","e91b1980":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier()\nknn.fit(X_train, y_train)","686d24ba":"predict = knn.predict(X_test)","bce1ac53":"predict","db2b2014":"from sklearn.metrics import classification_report, confusion_matrix","88cb6ad1":"print(confusion_matrix(y_test, predict))","a9b078a9":"print(classification_report(y_test, predict))","d69d7cca":"error_rate = []\nfor i in range(1,40):\n    knn = KNeighborsClassifier(n_neighbors = i)\n    knn.fit(X_train, y_train)\n    prad_i = knn.predict(X_test)\n    error_rate.append(np.mean(prad_i != y_test))","db7f91db":"error_rate.index(min(error_rate))","3dedcc76":"plt.figure(figsize=(10,6))\nplt.plot(range(1,40),error_rate,'g-', marker='o',\n         markerfacecolor='red', markersize=10)\nplt.title('Error Rate vs. K Value')\nplt.xlabel('K')\nplt.ylabel('Error Rate')","b4d9e7c5":"knn = KNeighborsClassifier(n_neighbors = 1)\nknn.fit(X_train, y_train)","4e210b44":"predictt = knn.predict(X_test)\nprint(confusion_matrix(y_test, predictt))","96ac9a90":"print(classification_report(y_test, predictt))","a66e53dd":"### Build Model","858dc624":"### Decide K value","61252e5c":"### Count outcome","aa22f6f2":"### Fill null Values","4e48724d":"### Handling Outlier Value","7111c7be":"### Relation with pair plot","17def6d1":"## KNearest Neighbors","11b21de2":"### Scale The data","3a386e3d":"#### Here Less Error Rate for K = 1.","47379c64":"Analysis of outlier with Boxplot","1f683eeb":"### Heat map to show correlation Between the data"}}