{"cell_type":{"e7f5c199":"code","56eb372c":"code","61e3943c":"code","8458fdd2":"code","353e6f78":"code","4ccc5ea3":"code","e5d0f2e2":"code","c30ce8ed":"code","24df0578":"code","307e35eb":"code","ebb01302":"code","2e568cd9":"code","7bd4ec01":"markdown"},"source":{"e7f5c199":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","56eb372c":"import pandas as pd\n#datapath = 'C:\/Users\/prateek.g\/Downloads\/titanic\/'\ndatapath = '..\/input\/airline-passenger-satisfaction\/'\n","61e3943c":"!pip install autoviml","8458fdd2":"### If you want to see the sitepackages version use this\nfrom autoviml.Auto_ViML import Auto_ViML\n","353e6f78":"train = pd.read_csv(datapath+'train.csv')\n#test = train[-15:]\ntest = pd.read_csv(datapath+'test.csv')\nprint(train.shape)\nprint(test.shape)\nprint(train.head())","4ccc5ea3":"target = 'satisfaction'\ntrain[target].value_counts()","e5d0f2e2":"sample_submission=''\nscoring_parameter = 'roc_auc'","c30ce8ed":"#### If Boosting_Flag = True => XGBoost, Fase=>ExtraTrees, None=>Linear Model\nm, feats, trainm, testm = Auto_ViML(train, target, test, sample_submission,\n                                    scoring_parameter=scoring_parameter,\n                                    hyper_param='RS',feature_reduction=True,\n                                     Boosting_Flag=True,Binning_Flag=True,\n                                    Add_Poly=0, Stacking_Flag=True,                                    \n                                    Imbalanced_Flag=False, \n                                    verbose=1)","24df0578":"submission= testm.drop(feats,axis=1)\nsubmission.head()","307e35eb":"submission['target']=testm['target_Stacked_Linear Discriminant_predictions']\nsubmission.to_csv('submission.csv',index=False)","ebb01302":"######## Use this to Test Classification Problems Only ####\nmodelname='Naive_Bayes'\ndef accu(results, y_cv):\n    return (results==y_cv).astype(int).sum(axis=0)\/(y_cv.shape[0])\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.metrics import balanced_accuracy_score\ntry:\n    print('Test results since target variable is present in test data:')\n    print(confusion_matrix(test[target].values,testm[target+'_'+modelname+'_predictions'].values))\n    print('\\nBalanced Accuracy = %0.2f%%\\n' %(100*balanced_accuracy_score(test[target].values, testm[target+'_'+modelname+'_predictions'].values)))\n    print(classification_report(test[target].values,testm[target+'_'+modelname+'_predictions'].values))\nexcept:\n    print('No target variable present in test data. No results')","2e568cd9":"testm.head()","7bd4ec01":"### Make sure you click on the +Add Data button on the top right and when a search box appears type, \"airline passenger satisfaction\", then all you have to do is select that data and add it to your session here. That's a quick way to work with Kaggle Kernels!"}}