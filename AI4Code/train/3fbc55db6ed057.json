{"cell_type":{"86c96178":"code","b0aa41a3":"code","920396d4":"code","011e2e23":"code","041bb773":"code","ee10b68e":"code","edca42aa":"code","dfa63f82":"code","36e2dd19":"code","937b3f4e":"code","6d80bcb4":"code","271c45c1":"code","11486ebb":"code","5b8f7be9":"code","bbf871e0":"code","8cbf0d0f":"code","f39bf672":"code","1e0ab6bf":"code","85c47fc1":"code","9088394b":"code","30b39194":"code","47e16732":"code","af49b54a":"code","3833123d":"code","c199b81e":"code","be5aaca4":"code","16284d9d":"code","ec55b05e":"code","f6f5c156":"code","5e7ef441":"code","93b73b21":"code","5c2358b1":"code","edea8769":"code","f88d5810":"code","7bc36a38":"code","b7020905":"code","eef99456":"code","024221f3":"code","ae8d2508":"code","9e5a1ce1":"code","7e463460":"code","2851f095":"code","8e2f6e86":"code","4ba3c736":"code","bf1534a0":"code","fca42eba":"code","a16a45e9":"code","edfb7ff4":"code","002643ab":"code","9195726b":"markdown","5588db4d":"markdown","56cf33ca":"markdown","bc907e73":"markdown","a85027da":"markdown"},"source":{"86c96178":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport timeit\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.figure_factory as ff\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n%matplotlib inline","b0aa41a3":"df = pd.read_csv(r\"..\/input\/sri-lanka-vehicle-prices-dataset\/vehicle_data.csv\")\ndf.head()","920396d4":"df.info()","011e2e23":"#Data Transformation Needed to Convert Object Columns into Numerical Columns\n%timeit df['Price'] = df['Price'].str.replace(\"Rs\",\"\")\n%timeit df['Price'] = df['Price'].apply(lambda a: str(a).replace(\"Rs\",\"\"))","041bb773":"#For Price Column\ndf['Price'] = df['Price'].apply(lambda a: str(a).replace(\"Rs\",\"\"))\ndf['Price'] = df['Price'].apply(lambda a: str(a).replace(\",\",\"\"))\ndf['Price'] = df['Price'].astype(float)\n\n#For Capacity\ndf['Capacity'] = df['Capacity'].apply(lambda a: str(a).replace(\"cc\",\"\"))\ndf['Capacity'] = df['Capacity'].apply(lambda a: str(a).replace(\",\",\"\"))\ndf['Capacity'] = df['Capacity'].astype(int)\n\n#For Mileage\ndf['Mileage'] = df['Mileage'].apply(lambda a: str(a).replace(\"km\",\"\"))\ndf['Mileage'] = df['Mileage'].apply(lambda a: str(a).replace(\",\",\"\"))\ndf['Mileage'] = df['Mileage'].astype(int)\n\n#Cleaned Dataset with Renamed Column\ndf = df.rename(columns={'Price': 'Price_rs','Capacity': 'Capacity_cc','Mileage': 'Mileage_km'})\ndf.head()","ee10b68e":"df.describe()","edca42aa":"#Getting only those Columns that we need, so Drop that we don't need\ndata = df.drop(['Sub_title','Edition'],axis=1)","dfa63f82":"data[['Brand','Model']]\ndata['Brand_Model'] = data['Brand'] + \" \" + data['Model']\ndata = data.drop(['Brand','Model'],axis=1)","36e2dd19":"data.isna().sum()","937b3f4e":"#Dataset Cleaned for all nan Values and Replaced with MODE\ndata['Body'] = data['Body'].fillna(data['Body'].mode()[0])","6d80bcb4":"data.head(1)","271c45c1":"#Unique Values in all Categorical Variables\nprint(data['Brand_Model'].unique()) # Build using DASH uploaded Soon # We can build model that predict Top 10 Brand and Model on the Basis of Specifications Given \nprint(\"*\"*50)\nprint(data['Condition'].unique()) # Get to know the Price Distribution in different conditions and impact on Price\nprint(\"*\"*50)\nprint(data['Transmission'].unique()) # Get to know which Transmission is used more and Why and impact on Price\nprint(\"*\"*50)\nprint(data['Body'].unique()) # Get to know how Body Type impact on Price and which body type is used latest and which is old\nprint(\"*\"*50)\nprint(data['Fuel'].unique()) # Which Fuel gives more mileage\nprint(\"*\"*50)\nprint(data['Seller_name'].unique()) # which seller is most successfull or having more cars\nprint(\"*\"*50)\nprint(data['Seller_type'].unique()) # We can build that predicts what Seller Membership is given to Seller on the basis of this Data","11486ebb":"car = data[['Brand_Model','Price_rs','Year','Condition','Transmission','Body','Fuel','Capacity_cc','Mileage_km','Seller_name','Seller_type']]","5b8f7be9":"car['serial'] = car.index\ncar = car[['serial','Brand_Model','Price_rs','Year','Condition','Transmission','Body','Fuel','Capacity_cc','Mileage_km','Seller_name','Seller_type']]\ncar.head(1)","bbf871e0":"car['Year'] = pd.to_datetime(car['Year'].astype(str)).values\ncar.head(1)","8cbf0d0f":"#Getting count of Used, New and Re-Conditioned Cars\nprint(\"New Cars :\",len(car[car['Condition'] == 'New']))\nprint(\"Reconditioned Cars :\",len(car[car['Condition'] == 'Reconditioned']))\nprint(\"Used Cars :\",len(car[car['Condition'] == 'Used']))","f39bf672":"#Price of Cars Brand Model Scatter Plot with Conditions\nfig1 = px.scatter(car, x=car['Brand_Model'], y=car['Price_rs'], size='Price_rs',color='Condition')\nfig1","1e0ab6bf":"def carPriceData(data):\n    rating = data.groupby(['Price_rs', 'Brand_Model','Condition']).agg({'serial': 'count'}).reset_index()\n    rating = rating[rating['serial'] != 0]\n    rating.columns = ['Price_rs', 'Brand_Model', 'Condition','count']\n    rating = rating.sort_values('Price_rs',ascending=False)\n    return rating","85c47fc1":"carPrice = carPriceData(car)\nfig = px.bar(carPrice[:20], x='Brand_Model', y='Price_rs', color='Condition')\nfig.show()","9088394b":"# Transmission check in All Conditions\ndef carConditionData(data):\n    rating = data.groupby(['Brand_Model', 'Condition','Transmission']).agg({'serial': 'count'}).reset_index()\n    rating = rating[rating['serial'] != 0]\n    rating.columns = ['Brand_Model', 'Condition','Transmission','count']\n    rating = rating.sort_values('count',ascending=False)\n    return rating\n\ncar_new = car[car['Condition'] == 'New']\ncar_re = car[car['Condition'] == 'Reconditioned']\ncar_use = car[car['Condition'] == 'Used']\n\ncar_newdf = carConditionData(car_new)\ncar_redf = carConditionData(car_re)\ncar_usedf = carConditionData(car_use)","30b39194":"  fig = make_subplots(rows=1, cols=3, specs=[[{\"type\": \"pie\"}, {\"type\": \"pie\"}, {\"type\": \"pie\"}]])\n\n  fig.add_trace(\n      go.Pie(labels=car_newdf['Transmission'], values=car_newdf['count']),\n      row=1, col=1\n  )\n\n  fig.add_trace(\n      go.Pie(labels=car_redf['Transmission'], values=car_redf['count']),\n      row=1, col=2\n  )\n\n  fig.add_trace(\n      go.Pie(labels=car_usedf['Transmission'], values=car_usedf['count']),\n      row=1, col=3\n  )\n\n  fig.update_traces(textposition='outside', hole=.4, hoverinfo=\"label+percent\")\n  fig.update_layout(\n      title_text=\"Transmission in Each Conditioned DataFrame\",\n      # Add annotations in the center of the donut pies.\n      annotations=[dict(text='New', x=0.11, y=0.5, font_size=12, showarrow=False),\n                  dict(text='Reconditioned', x=0.50, y=0.5, font_size=12, showarrow=False),\n                  dict(text='Used', x=0.89, y=0.5, font_size=12, showarrow=False)])\n  fig.show()","47e16732":"#WordCloud of Brand_Models to See which has more impact\nfrom wordcloud import WordCloud\n\ntext = str(list(car['Brand_Model'])).replace(',', '').replace('[', '').replace(\"'\", '').replace(']', '')\n\nplt.rcParams['figure.figsize'] = (15, 15)\nwordcloud = WordCloud(background_color = 'white', width = 1200,  height = 1200, max_words = 121).generate(text)\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.show()\n","af49b54a":"# Model mileage vs Price Details on the Basis of Seller Type\ndef carSelect(carModel,seller):\n  selected = car[car['Brand_Model'] == carModel]\n  selected = selected[selected['Seller_type'] == seller]\n  selected = selected.sort_values(by=['Mileage_km'], ascending=False)\n  return selected","3833123d":"carSelected = carSelect('Land Rover Range Rover','Member')\ncarSelected.head(5)","c199b81e":"fig = px.histogram(carSelected, x='Mileage_km', y='Brand_Model', color='Condition')\nfig.show()","be5aaca4":"#Best Seller \n\ndata2 = car[['Price_rs','Seller_name']].groupby('Seller_name').sum()","16284d9d":"data2 = pd.DataFrame(data2.to_records()) # Multi index to Single Index","ec55b05e":"data2 = data2.sort_values(by=['Price_rs'], ascending=False)","f6f5c156":"data2 = data2[:10]\ndata2","5e7ef441":"px.bar(data2,x = data2['Seller_name'], y=data2['Price_rs'],color='Price_rs')","93b73b21":"data.head(1)","5c2358b1":"cond = data[['Brand_Model','Price_rs','Year','Condition','Mileage_km']]","edea8769":"cond.head(1)","f88d5810":"def conditionPriceCompare(model):\n  result = []\n  #New\n  data_new = cond[(cond['Brand_Model'] == model) & (car['Condition'] == 'New')]\n  data_new = data_new.sort_values(by='Mileage_km',ascending=False)\n  if len(data_new) > 0:\n    result.append(data_new[:1].values[0])\n  else:\n    print(\"Car in this Condition Not Available\")\n    result.append([model, 0, 0, 'New', 0])\n  #Reconditioned \n  data_recond = cond[(cond['Brand_Model'] == model) & (car['Condition'] == 'Reconditioned')]\n  data_recond = data_recond.sort_values(by='Mileage_km',ascending=False)\n  if len(data_recond) > 0:\n    result.append(data_recond[:1].values[0])\n  else:\n    print(\"Car in this Condition Not Available\")\n    result.append([model, 0, 0, 'Reconditioned', 0])\n  #Used\n  data_used = cond[(cond['Brand_Model'] == model) & (car['Condition'] == 'Used')]\n  data_used = data_used.sort_values(by='Mileage_km',ascending=False)\n  if len(data_used) > 0:\n    result.append(data_used[:1].values[0])\n  else:\n    print(\"Car in this Condition Not Available\")\n    result.append([model, 0, 0, 'Used', 0])\n  \n  return result","7bc36a38":"res = conditionPriceCompare('Nissan Dayz')\ndf_cond = pd.DataFrame(res,columns =['Brand_Model', 'Price_rs','Year','Condition','Mileage_km'])\ndf_cond","b7020905":"px.bar(df_cond,x = df_cond['Mileage_km'], y=df_cond['Price_rs'],color='Condition')","eef99456":"car.head(1)","024221f3":"#Which Seller has Most New, Used and Reconditioned Car\nnew = car[car['Condition'] == 'New']\nnew_2 = new[['Condition','Seller_name']].groupby('Seller_name').count()\nnew_2 = pd.DataFrame(new_2.to_records())\nnew_cars_seller = new_2.sort_values(by='Condition',ascending=False).values[:5]\nnewdf = pd.DataFrame(new_cars_seller,columns = ['Seller_name','Count'])\nnewdf['Condition'] = 'New'\nnewdf","ae8d2508":"old = car[car['Condition'] == 'Used']\nold_2 = old[['Condition','Seller_name']].groupby('Seller_name').count()\nold_2 = pd.DataFrame(old_2.to_records())\nold_cars_seller = old_2.sort_values(by='Condition',ascending=False).values[:5]\nolddf = pd.DataFrame(old_cars_seller,columns = ['Seller_name','Count'])\nolddf['Condition'] = 'Used'\nolddf","9e5a1ce1":"recon = car[car['Condition'] == 'Reconditioned']\nrecon = recon[['Condition','Seller_name']].groupby('Seller_name').count()\nrecon = pd.DataFrame(recon.to_records())\nrecon_cars_seller = recon.sort_values(by='Condition',ascending=False).values[:5]\nrecondf = pd.DataFrame(recon_cars_seller,columns = ['Seller_name','Count'])\nrecondf['Condition'] = 'Reconditioned'\nrecondf","7e463460":"seller_con = pd.concat([newdf, olddf,recondf]).reset_index(drop=True)\nseller_con.info()","2851f095":"seller_con['Count'] = seller_con['Count'].astype(int)","8e2f6e86":"px.bar(seller_con, x=seller_con['Seller_name'], y=seller_con['Count'],color='Condition')","4ba3c736":"tran = data[['Brand_Model','Condition','Transmission','Body','Mileage_km','Price_rs']]\ntran.head(1)","bf1534a0":"def TranModel(trantype, bodytype):\n    data_new = tran[(tran['Transmission'] == trantype) & (tran['Body'] == bodytype)]\n    data_new = data_new.sort_values(by='Mileage_km',ascending=False)\n    return data_new","fca42eba":"t = TranModel('Automatic','Hatchback')\nt = t[:10]","a16a45e9":"px.bar(t, x=t['Brand_Model'], y=t['Price_rs'],color='Condition')","edfb7ff4":"px.histogram(tran, x=tran['Transmission'],color='Condition')","002643ab":"px.histogram(tran, x=tran['Body'],color='Condition')","9195726b":"# **Car BRAND MODEL Prediction**","5588db4d":"# **Sri Lanka Vehicle Prices Dataset**\n<img src = 'https:\/\/www.thecoolector.com\/wp-content\/uploads\/2018\/10\/charger-1050x700.jpg'>\n\n\n\n## **Contents in this Data Analysis**\n\n1.   Data Loading\n2.   Data Cleaning\n3.   EDA and Data Transformation\n4.   Dashboard (Get Car of Your Own Choice using Filters)\n","56cf33ca":"## **Transmission and Body Based Analysis**","bc907e73":"## **Get to know the Price Distribution in different conditions and impact on Price**","a85027da":"# For DASHBoard using DASH and Python \"Comment Down\"\n## FOLLOW ME ON GITHUB - SIMRANJEET97 (https:\/\/github.com\/simranjeet97)\n## YOUTUBE - FREEBIRDS CREW (https:\/\/www.youtube.com\/channel\/UC4RZP6hNT5gMlWCm0NDzUWg?view_as=subscriber?sub_confirmation=1)"}}