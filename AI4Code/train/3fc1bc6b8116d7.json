{"cell_type":{"f167f742":"code","67ffe04a":"code","19ca52d9":"code","09d6f443":"code","92b79f35":"code","7a80a5ea":"code","e9f23ff3":"code","def99ad8":"code","f52b1865":"code","74d4864e":"code","c9195feb":"code","cf53f225":"code","bd52077c":"code","2f1ea4b8":"code","b1b56294":"code","1963f8ed":"code","375d7fe8":"code","d754ed16":"code","65a6034e":"code","8f6d237e":"code","123e566d":"code","16bdb9b7":"code","f7caa40e":"code","8902a264":"code","510c48ee":"code","0d280586":"code","101f034f":"code","3237e70b":"markdown","58f5b9d7":"markdown","e8fa71f1":"markdown","73f0717b":"markdown","fec57931":"markdown","c77e0574":"markdown","1dc490ed":"markdown","82d7ed5a":"markdown","bc0a23b1":"markdown","e177466c":"markdown"},"source":{"f167f742":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.options.display.width = None\npd.set_option(\"max_colwidth\", None)\npd.options.display.max_rows = 999\nimport cv2\nimport pickle\nimport gzip\nfrom pathlib import Path\nimport matplotlib.pyplot as plt\nfrom sklearn import svm, metrics, datasets\nfrom sklearn.utils import Bunch\nfrom sklearn.model_selection import GridSearchCV, train_test_split\nfrom sklearn.preprocessing import  MinMaxScaler\nfrom sklearn.svm import SVC\nfrom skimage.io import imread\nfrom skimage.transform import resize\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport skimage\nimport os\nfrom skimage.feature import hog\nfrom skimage import exposure\nrseed = 42","67ffe04a":"pip install imutils","19ca52d9":"import imutils","09d6f443":"def load_df(file_name):\n    from scipy.io import loadmat\n    import pandas as pd\n    pd.options.display.width = None\n    pd.set_option(\"max_colwidth\", None)\n    pd.options.display.max_rows = 999\n\n    x = loadmat(file_name)\n    l = list(x['golfDB'][0])\n    d = dict()\n    for idx, k in enumerate(l):\n        d[\"{:3d}\".format(idx)] = list(l[idx])\n    df = pd.DataFrame(d).T\n    df.columns = [\"id\", \"youtube_id\", \"player\", \"sex\", \"club\", \"view\", \"slow\", \"events\", \"bbox\", \"split\"]\n    # 10 events = start_frame(SF), address(A), Toe-up(TU), Mid-backswing(MB), Top(T), Mid-downswing(MD), Impact(I),\n    # Mid-follow-through(MFT), Finsh(F), end_frame(EF)\n    # data format cleansing\n    df['id'] = df['id'].apply(lambda x: x[0][0])\n    df['youtube_id'] = df['youtube_id'].apply(lambda x: x[0])\n    df['player'] = df['player'].apply(lambda x: x[0])\n    df['sex'] = df['sex'].apply(lambda x: x[0])\n    df['club'] = df['club'].apply(lambda x: x[0])\n    df['view'] = df['view'].apply(lambda x: x[0])\n    df['slow'] = df['slow'].apply(lambda x: x[0][0])\n    df['events'] = df['events'].apply(lambda x: x[0])\n    df['bbox'] = df['bbox'].apply(lambda x: x[0])\n    df['split'] = df['split'].apply(lambda x: x[0][0])\n    df = df.drop(columns=['split', 'youtube_id'])\n\n    df.index = df.index.astype(int)\n    df.to_csv('golfDB.csv')\n\n    print(\"Number of annotations: {:3d}\".format(len(df.id)))\n    return df","92b79f35":"def draw_bbox(id, df):\n    video = cv2.VideoCapture(\"..\/input\/videos-160\/videos_160\/videos_160\/\" + str(id) + \".mp4\")\n    \n    iterations = 0\n    event_num = 1\n    events = df.events[id]\n#     print(type(df.bbox[id]))\n    x, y, w, h = df.bbox[id]\n    x, y, w, h = int(x*160), int(y*160), int(w*160), int(h*160) #make proportional to image 160 by 160\n    label = ['Address', 'Toe-up', 'Mid-Backswing', 'Top', 'Mid-Downswing', 'Impact', 'Mid-Follow-Through', 'Finish']\n    \n    while True:\n        ret, frame = video.read()\n\n        if not ret:\n            break\n        if iterations == events[event_num] and event_num < 9:\n            cv2.imwrite(\"Swing_events\/\" + label[event_num - 1] + \"\/\" + str(id) + \".jpg\", frame)\n            event_num += 1\n        iterations += 1\n    video.release()","7a80a5ea":"df = load_df('..\/input\/videos-160\/golfDB.mat')\nprint(df.head(16))","e9f23ff3":"for index in df.index:\n    i = 0\n    events = df.events[index]\n    scaled_events = []\n    for event in events:\n        if i == 0:\n            scaled_events.append(0)\n        else:\n            scaled_events.append(event - events[0])\n        i += 1\n    df.events[index] = scaled_events\n\nprint(df.head(15))","def99ad8":" df.to_pickle(\"GolfDB.pkl\")","f52b1865":"import shutil\nif os.path.exists(\".\/Swing_events\"):\n    shutil.rmtree(\".\/Swing_events\")","74d4864e":"os.makedirs('.\/Swing_events\/Address')\nos.makedirs('.\/Swing_events\/Toe-up')\nos.makedirs('.\/Swing_events\/Mid-Backswing')\nos.makedirs('.\/Swing_events\/Top')\nos.makedirs('.\/Swing_events\/Mid-Downswing')\nos.makedirs('.\/Swing_events\/Impact')\nos.makedirs('.\/Swing_events\/Mid-Follow-Through')\nos.makedirs('.\/Swing_events\/Finish')","c9195feb":"df = pd.read_pickle(\".\/GolfDB.pkl\")\nprint(df.head(16))\ni = 0\nrows = []\nwhile i < 1400:\n    if df.view[i] == \"face-on\": # toggle the view between down-the-line, face-on or other to evaluate the different views. \n        draw_bbox(df.id[i], df)\n    if (i % 100 == 0):\n        print(i)\n    i += 1\n","cf53f225":"def load_image_files(container_path, dimension=(30, 30)):\n    image_dir = Path(container_path)\n    folders = [directory for directory in image_dir.iterdir() if directory.is_dir()]\n    categories = [fo.name for fo in folders]\n\n    descr = \"Your own dataset\"\n    images = []\n    flat_data = []\n    target = []\n    for i, direc in enumerate(folders):\n        for file in direc.iterdir():\n            img = skimage.io.imread(file)\n#             img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n            img_resized = resize(img, dimension, anti_aliasing=True, mode='reflect')\n            \n            flat_data.append(img_resized.flatten())\n            images.append(img_resized)\n            target.append(i)\n    flat_data = np.array(flat_data)\n    target = np.array(target)\n    images = np.array(images)\n\n    # return in the exact same format as the built-in datasets\n    return Bunch(data=flat_data,\n                 target=target,\n                 target_names=categories,\n                 images=images,\n                 DESCR=descr)","bd52077c":"swing_image_dataset = load_image_files(\".\/Swing_events\/\")","2f1ea4b8":"swing_image_dataset.data.shape","b1b56294":"X = MinMaxScaler().fit_transform(swing_image_dataset.data)","1963f8ed":"from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA\n\nlda = LDA(n_components=7)\nX = lda.fit(X, swing_image_dataset.target).transform(X)","375d7fe8":"swing_image_dataset.target_names","d754ed16":"plt.figure(figsize=(20,15))\nfor  i, target_name in zip([ 0, 1, 2, 3, 4, 5, 6, 7], swing_image_dataset.target_names):\n    plt.scatter(X[swing_image_dataset.target == i, 0], X[swing_image_dataset.target== i, 1], label=target_name)\nplt.legend()\nplt.title('LDA of GolfDB dataset')\n\nplt.show()","65a6034e":"\n'''Split data, but randomly allocate to training\/test sets'''\nX_train, X_test, y_train, y_test = train_test_split(X, swing_image_dataset.target, test_size=0.2, random_state=rseed)","8f6d237e":"accuracy = []\nf1_score = []\nprecision_score = []\nrecall_score = []","123e566d":"from sklearn.svm import LinearSVC\nlinearsvm = LinearSVC(multi_class='crammer_singer', random_state=rseed, C=10)\nlinearsvm.fit(X_train, y_train)\ny_pred = linearsvm.predict(X_test)\nprint(metrics.classification_report(y_test, y_pred, target_names=swing_image_dataset.target_names))\naccuracy_linearsvm = metrics.accuracy_score(y_test, y_pred)\nf1_linearsvm = metrics.f1_score(y_test, y_pred, average='weighted')\nprecision_linearsvm = metrics.precision_score(y_test, y_pred, average='weighted')\nrecall_linearsvm = metrics.recall_score(y_test, y_pred, average='weighted')\nprint(\"Accuracy\", accuracy_linearsvm*100)\naccuracy.append(accuracy_linearsvm*100)\nf1_score.append(f1_linearsvm*100)\nprecision_score.append(precision_linearsvm*100)\nrecall_score.append(recall_linearsvm*100)","16bdb9b7":"from catboost import CatBoostClassifier\ncat_clf = CatBoostClassifier(random_state=rseed,\n                        depth =4, \n                        bagging_temperature = 1.5, \n                        learning_rate = 0.03, \n                        l2_leaf_reg = 7, \n                         eval_metric='Accuracy', \n                         task_type=\"GPU\", \n                        use_best_model = True)\n\ncat_clf.fit(X_train, y_train, eval_set=(X_test, y_test))\n\ny_pred_cat = cat_clf.predict(X_test)\nprint(metrics.classification_report(y_test, y_pred_cat, target_names=swing_image_dataset.target_names))\naccuracy_cat = metrics.accuracy_score(y_test, y_pred_cat)\nf1_cat = metrics.f1_score(y_test, y_pred_cat, average='weighted')\nprecision_cat = metrics.precision_score(y_test, y_pred_cat, average='weighted')\nrecall_cat = metrics.recall_score(y_test, y_pred_cat, average='weighted')\nprint(\"Accuracy\", accuracy_cat*100)\naccuracy.append(accuracy_cat*100)\nf1_score.append(f1_cat*100)\nprecision_score.append(precision_cat*100)\nrecall_score.append(recall_cat*100)","f7caa40e":"from sklearn import tree\nclf_dt = tree.DecisionTreeClassifier(min_samples_leaf=5, min_samples_split=3, random_state=rseed)\n\nclf_dt.fit(X_train, y_train)\ny_pred_dt = clf_dt.predict(X_test)\naccuracy_dt = metrics.accuracy_score(y_test, y_pred_dt)\nf1_dt = metrics.f1_score(y_test, y_pred_dt, average='weighted')\nprecision_dt = metrics.precision_score(y_test, y_pred_dt, average='weighted')\nrecall_dt = metrics.recall_score(y_test, y_pred_dt, average='weighted')\nprint(metrics.classification_report(y_test, y_pred_dt, target_names=swing_image_dataset.target_names))\nprint(\"Accuracy\", accuracy_dt*100)\naccuracy.append(accuracy_dt*100)\nf1_score.append(f1_dt*100)\nprecision_score.append(precision_dt*100)\nrecall_score.append(recall_dt*100)","8902a264":"from sklearn.ensemble import RandomForestClassifier \nclf_rf = RandomForestClassifier(min_samples_leaf=3, min_samples_split=3, random_state=rseed)\n\nclf_rf.fit(X_train, y_train)\ny_pred_rf = clf_rf.predict(X_test)\n\naccuracy_rf = metrics.accuracy_score(y_test, y_pred_rf)\nf1_rf = metrics.f1_score(y_test, y_pred_rf, average='weighted')\nprecision_rf = metrics.precision_score(y_test, y_pred_rf, average='weighted')\nrecall_rf = metrics.recall_score(y_test, y_pred_rf, average='weighted')\nprint(metrics.classification_report(y_test, y_pred_rf, target_names=swing_image_dataset.target_names))\nprint(\"Accuracy\", accuracy_rf*100)\naccuracy.append(accuracy_rf*100)\nf1_score.append(f1_rf*100)\nprecision_score.append(precision_rf*100)\nrecall_score.append(recall_rf*100)","510c48ee":"from sklearn.neighbors import KNeighborsClassifier\nclf_knn = KNeighborsClassifier(n_neighbors=7, p=2, weights='uniform')\n\nclf_knn.fit(X_train, y_train)\ny_pred_knn = clf_knn.predict(X_test)\n\naccuracy_knn = metrics.accuracy_score(y_test, y_pred_knn)\nf1_knn = metrics.f1_score(y_test, y_pred_knn, average='weighted')\nprecision_knn = metrics.precision_score(y_test, y_pred_knn, average='weighted')\nrecall_knn = metrics.recall_score(y_test, y_pred_knn, average='weighted')\nprint(metrics.classification_report(y_test, y_pred_knn, target_names=swing_image_dataset.target_names))\nprint(\"Accuracy\", accuracy_knn*100)\naccuracy.append(accuracy_knn*100)\nf1_score.append(f1_knn*100)\nprecision_score.append(precision_knn*100)\nrecall_score.append(recall_knn*100)","0d280586":"print(accuracy)\nprint(f1_score)\nprint(precision_score)\nprint(recall_score)","101f034f":"import matplotlib.pyplot as plt\nfig = plt.figure(figsize=(20, 10))\ndata = [accuracy, f1_score]\nkey = ['Accuracy', 'F1-Score']\nlabels = ['LinearSVM', 'CatBoost', 'Decision Tree', 'KNN', 'Random Forest']\nbp_dict = plt.bar( labels, list(map(float, data[0])), align='edge', width=-0.20, color=['green'])\nbp_dict = plt.bar( labels, list(map(float, data[1])), align='edge', width=0.20, color=['blue'])\nplt.ylabel(\"Score\", fontsize=30)\nplt.xlabel(\"Classification Model\", fontsize=30)\nplt.legend(key, fontsize=26)\nplt.title(\"Experiment 3: Accuracy and F1 Scores\", fontsize=34)\nplt.ylim((80,100))\nplt.tick_params(labelsize=26)\nplt.grid()\nplt.show()","3237e70b":"#### KNN","58f5b9d7":"#### CatBoost","e8fa71f1":"#### Random Forest Classifier","73f0717b":"### Loop over all the video frames to extract the relevant swing events.","fec57931":"#### LinearSVM","c77e0574":"#### Decision Tree Classifier","1dc490ed":"### Load the selected single view dataset","82d7ed5a":"### Experiment 1 sets out to explore the GolfDB dataset viewing angles to understand the performance of the different viewing angles separately.\n### The inital setup of this experiment follows the same frame extraction technique as the entire GolfDB but in this case only the frames relevant to the selected viewing angle are extracted for classification. ","bc0a23b1":"plt.xlabel('LD1')\nplt.ylabel('LD2')\nplt.scatter(X[:,0],\n           X[:,1],\n           c=swing_image_dataset.target,\n           cmap='rainbow',\n           alpha=0.7,\n           edgecolors='b')\nplt.legend()","e177466c":"### Plot bargraph "}}