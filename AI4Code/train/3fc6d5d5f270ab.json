{"cell_type":{"5d95bb10":"code","bc21d496":"code","03e09b57":"code","e83a30c0":"code","60a84492":"code","257a47f1":"code","bae6f957":"code","9a0e931f":"code","36c6344e":"code","d5484446":"code","fe1176c4":"code","e627dd0a":"code","35834657":"code","6a934ddf":"code","b0d5fee6":"code","d60d656e":"code","e3dbf868":"code","fd034915":"code","be3778ea":"code","dd784b31":"code","f49c91d2":"code","9faf8c27":"code","bb6d35ce":"code","dd8cf6b9":"code","5a5d999f":"code","3cb7eefa":"code","a3a63904":"code","fcbb3a7a":"code","b32fc5b7":"code","a864cf8d":"code","c4828348":"code","626dbaaf":"code","f498261b":"code","eb51da77":"code","9b779b5f":"code","0ecf1816":"code","ece062ee":"code","ed47585e":"code","e4e8bd1a":"code","f8d318fd":"markdown","dff896ab":"markdown","c55e5c09":"markdown","e9777d90":"markdown","1acb127d":"markdown","f52b99ee":"markdown","c7d0398f":"markdown"},"source":{"5d95bb10":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra \/ import library and then rename it\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bc21d496":"# database creation\ndata = {\n'year': [2010, 2011, 2012,\n2010, 2011, 2012,\n2010, 2011, 2012],\n'team': ['FCBarcelona', 'FCBarcelona', 'FCBarcelona',\n'RMadrid', 'RMadrid', 'RMadrid',\n'ValenciaCF', 'ValenciaCF', 'ValenciaCF'],\n'wins': [30, 28, 32, 29, 32, 26, 21, 17, 19],\n'draws': [6, 7, 4, 5, 4, 7, 8, 10, 8],\n'losses': [2, 3, 2, 4, 2, 5, 9, 11, 11]\n}","03e09b57":"# creation of the frame\nfootball = pd.DataFrame(data, columns = ['year', 'team', 'wins', 'draws', 'losses'])","e83a30c0":"# plot the frame\nfootball","60a84492":"edu = pd.read_csv('\/kaggle\/input\/ense32020ac\/files\/ch02\/educ_figdp_1_Data.csv',\n                  na_values=':', usecols=['TIME', 'GEO', 'Value'])\nedu","257a47f1":"edu.head()","bae6f957":"edu.head(20)","9a0e931f":"edu.tail()","36c6344e":"edu.describe()","d5484446":"edu['GEO']","fe1176c4":"edu[5:10]","e627dd0a":"edu.iloc[90:94][['TIME','GEO']]","35834657":"edu[edu['Value'] > 6.5].tail()","6a934ddf":"edu['Value'] > 6.5","b0d5fee6":"edu[edu[\"Value\"].isnull()].head()","d60d656e":"edu.max(axis = 0)","e3dbf868":"print ('Pandas max function:', edu['Value'].max())","fd034915":"print ('Python max function:', max(edu['Value']))","be3778ea":"s = edu[\"Value\"]\/100\ns.head()","dd784b31":"s = edu[\"Value\"].apply(np.sqrt)\ns.head()","f49c91d2":"s = edu[\"Value\"].apply(lambda d: d**2)\ns.head()","9faf8c27":"edu['ValueNorm'] = edu['Value']\/edu['Value'].max()\nedu.tail()","bb6d35ce":"edu.drop('ValueNorm', axis = 1, inplace = True)\nedu.head()","dd8cf6b9":"edu = edu.append({\"TIME\": 2000, \"Value\": 5.00, \"GEO\": 'a'},\n                  ignore_index = True)\nedu.tail()","5a5d999f":"edu.drop(max(edu.index), axis = 0, inplace = True)\nedu.tail()","3cb7eefa":"eduDrop = edu[~edu[\"Value\"].isnull()].copy()\neduDrop.head()","a3a63904":"eduDrop = edu.dropna(how = 'any', subset = [\"Value\"])\neduDrop.head()","fcbb3a7a":"eduFilled = edu.fillna(value = {\"Value\": 0})\neduFilled.head()","b32fc5b7":"edu.sort_values(by = 'Value', ascending = False,\n                inplace = True)\nedu.head()","a864cf8d":"edu.sort_index(axis = 0, ascending = True, inplace = True)\nedu.head()","c4828348":"group = edu[[\"GEO\", \"Value\"]].groupby('GEO').mean()\ngroup.head()","626dbaaf":"group.sort_values(by = 'Value', ascending = True,\n                inplace = True)\ngroup.head()","f498261b":"filtered_data = edu[edu[\"TIME\"] > 2005]\npivedu = pd.pivot_table(filtered_data, values = 'Value',\n                        index = ['GEO'], columns = ['TIME'])\npivedu.head()","eb51da77":"pivedu.loc[['Spain','Portugal'], [2006,2011]]","9b779b5f":"pivedu = pivedu.drop(['Euro area (13 countries)',\n                      'Euro area (15 countries)',\n                      'Euro area (17 countries)',\n                      'Euro area (18 countries)',\n                      'European Union (25 countries)',\n                      'European Union (27 countries)',\n                      'European Union (28 countries)'\n                      ], axis=0)\npivedu = pivedu.rename(\n    index={'Germany (until 1990 former territory of the FRG)': 'Germany'})\npivedu = pivedu.dropna()\npivedu.rank(ascending=False, method='first').head()","0ecf1816":"pivedu.rank(ascending=True, method='first').head()","ece062ee":"totalSum = pivedu.sum(axis = 1)\n\ntotalSum.rank(ascending = False, method = 'dense').sort_values().head()","ed47585e":"totalSum = pivedu.sum(axis = 1).sort_values(ascending = False)\ntotalSum.plot(kind = 'bar', style = 'b', alpha = 0.4,\n              title = \"Total Values for Country\")","e4e8bd1a":"import matplotlib.pyplot as plt\n\nmy_colors = ['b', 'r', 'g', 'y', 'm', 'c']\nax = pivedu.plot(kind='barh', stacked=True, color=my_colors, figsize=(12, 6))\nax.legend(loc='center left', bbox_to_anchor=(1, 0.5))\nplt.savefig('\/kaggle\/woking.png', dpi=300, bbox_inches='tight')","f8d318fd":"2. What happens if we give a number as argument to the method head()?\n\nI see that if I use a number the function gives me all the first rows until the number I choosed.","dff896ab":"7. What do you observe regarding the parameter ascending=False?\n\nThe parameter ascending=False is to rank countries by their position from the highest value. The country with the highest value for a given TIME will be ranked 1.0 with ascending=False while it will be ranked at the last position with ascending=True.\n\n","c55e5c09":"6. What does the operation edu[\u2019Value\u2019] > 6.5 produce? An if we apply the indexedu[edu[\u2019Value\u2019] > 6.5]?Is this aSeries or aDataFrame?\n\nThe operation ( edu[\u2019Value\u2019] > 6.5 ) compares values of every rows of the frame to 6.5 and give me a boolean answer 'False' if the value is inferior or equal to 6.5 and 'True' if the value is superior to 6.5.\nIt selects all the rows when the 'value' information is superior than 6.5. \nIt is a aSeries because we can't have access on the information in rows or columns separetly.","e9777d90":"1.**Which is the size of the edu DataFrame (rows x columns)?**\nI can see on the frame that we have 384 rows and 3 columns for this one, so (384x3).","1acb127d":"4. Which measures does the result show? It seems that it shows some default values, can you guess which ones?\n\nThe function shows the measures for two information : 'TIME' and 'Value'. It measures the number of value we have in the frame, the average of those values, the standard deviation and then it gives the minimum, the maximum and the value at 25%,50% and 75%.\nWe have less 'Value' than 'TIME' because in Panda the value 'NaN' are considered as missing values.\n\n","f52b99ee":"3.What does the method tail()return?\nThe function return the five last rows.\n","c7d0398f":"5. What does this index return? What does the first index represent? And the second one?\nIt gives me the frame with two information 'TIME' and 'GEO' from the rows 90 to 94. The first index represents the rows I want. The second one represent the information I want (TIME and GEO)."}}