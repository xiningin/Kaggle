{"cell_type":{"e3e8676d":"code","2bfc45a6":"code","b7e536df":"code","beb74a4f":"code","fc399054":"code","a5a1cebe":"code","f46b6bfe":"code","c864c9f9":"code","a744c729":"code","2a6df46d":"code","c4bf55df":"code","92171848":"code","b8b606f4":"code","a746d378":"code","342b3d1a":"code","f6ad2178":"code","9f13d848":"code","4eca7c3a":"code","063aec06":"code","eb9de64d":"code","9ddb218c":"code","f012f224":"markdown","abc51474":"markdown","e5102828":"markdown","79a752c2":"markdown","16308c3d":"markdown","35cf7a5e":"markdown","3e5b43f0":"markdown","a6fc12d9":"markdown","e1910fb0":"markdown","8a307ef3":"markdown"},"source":{"e3e8676d":"# data analysis and wrangling\nimport pandas as pd\nimport numpy as np\nimport random as rnd\n\n# visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# machine learning\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import matthews_corrcoef\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve\n\n","2bfc45a6":"\"\"\"\nFunci\u00f3n encargada de categorizar la caracter\u00edstica tiquet\n\"\"\"\ndef process_ticket(data):\n    ticket = []\n    for x in list(data.Ticket):\n        if x.isdigit():#unicamente para valores numericos\n            ticket.append('N')\n        else: #resto de tickets que contienen caracteres \n            ticket.append(x.replace('.','').replace('\/','').strip().split(' ')[0])\n    \n    #remplazar valores para la caracteristica ticket\n    data.Ticket = ticket\n    \n    #reducir las categorias, mantener solo el primer caracter de las diferentes categorias\n    data.Ticket = data.Ticket.apply(lambda x : x[0])\n    \n    return data","b7e536df":"#cargar dataset\ntrain_df = pd.read_csv('..\/input\/train.csv')\ntest_df = pd.read_csv('..\/input\/test.csv')\n\n#a\u00f1adir nueva caracteristica Oringin; 0='production' 1='train'\ntrain_df['Origin'] = 0\ntest_df['Origin'] = 1\n\n\n#Comprobar valores a NaN en el dataset\n#print(train_df.isna().sum(),test_df.isna().sum())\ntrain_df.Age.fillna(value = -1, inplace = True) #Cambiar NaN a valor X\ntest_df.Age.fillna(value = -1, inplace = True) #Cambiar NaN a valor X\n\n#Procesar nombre por MR. Sr. y categorizar en 6 categorias \ntrain_df['Title'] = train_df.Name.str.extract('([A-Za-z]+)\\.')\ntest_df['Title'] = test_df.Name.str.extract('([A-Za-z]+)\\.')\ntrain_df.Title.replace(to_replace = ['Dr', 'Rev', 'Col', 'Major', 'Capt'], value = 'Officer', inplace = True)\ntrain_df.Title.replace(to_replace = ['Dona', 'Jonkheer', 'Countess', 'Sir', 'Lady', 'Don'], value = 'Aristocrat', inplace = True)\ntrain_df.Title.replace({'Mlle':'Miss', 'Ms':'Miss', 'Mme':'Mrs'}, inplace = True)\ntest_df.Title.replace(to_replace = ['Dr', 'Rev', 'Col', 'Major', 'Capt'], value = 'Officer', inplace = True)\ntest_df.Title.replace(to_replace = ['Dona', 'Jonkheer', 'Countess', 'Sir', 'Lady', 'Don'], value = 'Aristocrat', inplace = True)\ntest_df.Title.replace({'Mlle':'Miss', 'Ms':'Miss', 'Mme':'Mrs'}, inplace = True)\ntrain_df['Title'] = train_df['Title'].astype('category').cat.codes\ntest_df['Title'] = test_df['Title'].astype('category').cat.codes\n\n# eliminar caracter\u00edsticas (nombre,id,survived(train))\ntrain_df=train_df.drop(\"PassengerId\", axis=1)\ntrain_df=train_df.drop(\"Name\", axis=1)\ntrain_df=train_df.drop(\"Survived\", axis=1)\ntest_df=test_df.drop(\"PassengerId\", axis=1)\ntest_df=test_df.drop(\"Name\", axis=1)\n\n# cambiar valor para la caracter\u00edstica 'embarked'\ntrain_df.loc[train_df['Embarked'] == 'S', 'Embarked'] = 0\ntrain_df.loc[train_df['Embarked'] == 'C', 'Embarked'] = 1\ntrain_df.loc[train_df['Embarked'] == 'Q', 'Embarked'] = 2\ntest_df.loc[test_df['Embarked'] == 'S', 'Embarked'] = 0\ntest_df.loc[test_df['Embarked'] == 'C', 'Embarked'] = 1\ntest_df.loc[test_df['Embarked'] == 'Q', 'Embarked'] = 2\n\n#pasamos a categorias el sexo del pasajero (male:1 female:0)\ntrain_df['Sex'] = train_df['Sex'].astype('category').cat.codes\ntest_df['Sex'] = test_df['Sex'].astype('category').cat.codes\n\n\n#pasamos a categorias los c\u00f3digos alfanum\u00e9ricos de la cabin\n#train_df.Cabin.fillna(value = 'X', inplace = True) #Cambiar NaN a valor X\ntrain_df.Cabin = train_df.Cabin.apply( lambda x : x[0] if(pd.notnull(x)) else x) #Manterner primer caracter para categorizar\n\n#test_df.Cabin.fillna(value = 'X', inplace = True) #Cambiar NaN a valor X\ntest_df.Cabin = test_df.Cabin.apply( lambda x : x[0]  if(pd.notnull(x)) else x) #Manterner primer caracter para categorizar\n\ntrain_df['Cabin'] = train_df['Cabin'].astype('category').cat.codes\ntest_df['Cabin'] = test_df['Cabin'].astype('category').cat.codes\n\nprint(train_df.Cabin.unique())\nprint(test_df.Cabin.unique())\n\n#train_df = train_df.drop(['Cabin'], axis=1)\n#test_df = test_df.drop(['Cabin'], axis=1)\n\n#Revisar\ntrain_df=process_ticket(train_df)\ntest_df=process_ticket(test_df)\ntrain_df['Ticket'] = train_df['Ticket'].astype('category').cat.codes\ntest_df['Ticket'] = test_df['Ticket'].astype('category').cat.codes\n\n#ver distribucion de la cabina\ncombine_df=pd.concat([train_df,test_df], axis=0, ignore_index=True)\nplt.hist(combine_df.loc[combine_df['Origin'] == 0,\"Cabin\"], color=\"skyblue\", label=\"Origin=0\")\nplt.hist(combine_df.loc[combine_df['Origin'] == 1,\"Cabin\"],color=\"red\",alpha=.75, label=\"Origin=1\")\nplt.legend()\nplt.show()\n","beb74a4f":"#crear nuevo conjunto de train a partir del 80% de train_df y 80% de test\ntrain_c=pd.concat([train_df[:8*len(train_df)\/\/10], test_df[:8*len(test_df)\/\/10]], sort = False)\n#20% de train y test corresponde a test_df\ntest_c=pd.concat([train_df[8*len(train_df)\/\/10:], test_df[8*len(test_df)\/\/10:]], sort = False)\n\n#cambiar NaN a -1\ntrain_c=train_c.fillna(-1)\ntest_c=test_c.fillna(-1)\n\nprint(train_c['Origin'].groupby(train_c['Cabin']).count())\nprint(test_c['Origin'].groupby(test_c['Cabin']).count())\n\n#Matriz de correlaci\u00f3n\ncorrelation = train_c.loc[:, ['Pclass','Sex','Age','SibSp','Parch',\n 'Fare','Embarked','Ticket','Origin','Cabin','Title']]\ncorrelation = correlation.agg(LabelEncoder().fit_transform)\ncorrelation['Origin'] = train_c.Origin \ncorrelation = correlation.set_index('Origin').reset_index() # Move Age at index 0.\n\nplt.figure(figsize = (20,7))\nsns.heatmap(correlation.corr(), cmap ='BrBG', annot = True)\nplt.title('Variables Correlated with Origin', fontsize = 18)\nplt.show()","fc399054":"combine_df=pd.concat([train_c,test_c], axis=0, ignore_index=True)\nplt.hist(combine_df.loc[combine_df['Origin'] == 0,\"Cabin\"], color=\"skyblue\",alpha=.75, label=\"Origin=0\")\nplt.hist(combine_df.loc[combine_df['Origin'] == 1,\"Cabin\"],color=\"red\",alpha=.75, label=\"Origin=1\")\nplt.legend()\nplt.show()","a5a1cebe":"X_train_o = train_c.drop(\"Origin\", axis=1)\nY_train_o = train_c[\"Origin\"]\nX_test_o  = test_c.drop(\"Origin\", axis=1)\ny_test_o = test_c[\"Origin\"]","f46b6bfe":"\"\"\"\nCalculo de m\u00e9tricas Precisi\u00f3n, Recall, F1-Score\n\"\"\"\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn import metrics\ndef metricas(y_t,y_p):\n    p=metrics.precision_score(y_t,y_p,average='weighted')\n    r=metrics.recall_score(y_t,y_p,average='weighted')\n    f1=metrics.f1_score(y_t,y_p,average='weighted')\n    return p,r,f1","c864c9f9":"def plot_curve(y_t,y_p):   \n    fpr, tpr, umbral = roc_curve(y_t, y_p)\n    plt.plot([0, 1], [0, 1], linestyle='--')\n    # plot the roc curve for the model\n    plt.plot(fpr, tpr, marker='.')\n    # show the plot\n    plt.show()","a744c729":"def b_ratio(probs):\n    probs=probs+1e-20 #suavizar valores a 0\n    b=(1.\/probs)-1 #calcular pesos\n    b\/= np.mean(b) #normalizar pesos\n    sns.distplot(b, kde=False)\n    plt.show()","2a6df46d":"#Random Forest\nrandom_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train_o, Y_train_o)\nY_pred_o = random_forest.predict(X_test_o)\nacc_random_forest = round(random_forest.score(X_test_o, y_test_o) * 100, 2)\n\nprobs = random_forest.predict_proba(X_test_o)[:, 0] #prob por muestra P(train|x)\nb_ratio(probs)\n\nprint(\"Acc: \",acc_random_forest)\nprint(\"Phi Coefficiente: \",matthews_corrcoef(y_test_o, Y_pred_o))\nprint(\"ROC-AUC: \",roc_auc_score(y_test_o, Y_pred_o))\nplot_curve(y_test_o,Y_pred_o)\nprint('---------------------------------------------------------')","c4bf55df":"comb_df=pd.concat([train_df,test_df],sort=False)\ncomb_df=comb_df.sample(frac=1)\n\ntrain_df=comb_df[:8*len(comb_df)\/\/10]\ntrain_df['Origin']=0\n\ntest_df=comb_df[8*len(comb_df)\/\/10:]\ntest_df['Origin']=1\n\n#crear nuevo conjunto de train a partir del 80% de train_df y 80% de test\ntrain_c=pd.concat([train_df[:8*len(train_df)\/\/10], test_df[:8*len(test_df)\/\/10]], sort = False)\ntest_c=pd.concat([train_df[8*len(train_df)\/\/10:], test_df[8*len(test_df)\/\/10:]], sort = False)\n\n#cambiar NaN a -1\ntrain_c=train_c.fillna(-1)\ntest_c=test_c.fillna(-1)\n\ncombine_df=pd.concat([train_c,test_c], axis=0, ignore_index=True)\n\nplt.hist(combine_df.loc[combine_df['Origin'] == 0,\"Cabin\"], color=\"skyblue\",alpha=.75, label=\"Origin=0\")\nplt.hist(combine_df.loc[combine_df['Origin'] == 1,\"Cabin\"],color=\"red\",alpha=.75, label=\"Origin=1\")\nplt.legend()\nplt.show()\n\nX_train_o = train_c.drop(\"Origin\", axis=1)\nY_train_o = train_c[\"Origin\"]\nX_test_o  = test_c.drop(\"Origin\", axis=1)\ny_test_o = test_c[\"Origin\"]","92171848":"#Random Forest\nrandom_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train_o, Y_train_o)\nY_pred_o = random_forest.predict(X_test_o)\nacc_random_forest = round(random_forest.score(X_test_o, y_test_o) * 100, 2)\n\nprobs = random_forest.predict_proba(X_test_o)[:, 0] #prob por muestra P(train|x)\nb_ratio(probs)\n\nprint(\"Acc: \",acc_random_forest)\np,r,f1=metricas(y_test_o,Y_pred_o)\nprint(\"Phi Coefficiente: \",matthews_corrcoef(y_test_o, Y_pred_o))\nprint(\"ROC-AUC: \",roc_auc_score(y_test_o, Y_pred_o))\nplot_curve(y_test_o,Y_pred_o)\nprint('---------------------------------------------------------')","b8b606f4":"#Crear training con las muestra de sex:1 == Male\n\nma_train=train_c.loc[train_c['Sex'] == 1]\nma_test=test_c.loc[test_c['Sex'] == 1]\ntrain_m=pd.concat([ma_train, ma_test], sort = False)\ntrain_m[\"Origin\"]= 0\n\n#Crear teste con las muestras de sex:0 == Female\nfe_train=train_c.loc[train_c['Sex'] == 0]\nfe_test=test_c.loc[test_c['Sex'] == 0]\ntest_m=pd.concat([fe_train,fe_test], sort = False)\ntest_m[\"Origin\"]= 1\n\n#crear nuevo conjunto de train a partir del 80% de train_df y 80% de test\ntrain_mf=pd.concat([train_m[:8*len(train_m)\/\/10], test_m[:8*len(test_m)\/\/10]], sort = False)\ntest_mf=pd.concat([train_m[8*len(train_m)\/\/10:], test_m[8*len(test_m)\/\/10:]], sort = False)\n\ncombine_df=pd.concat([train_mf,test_mf], axis=0, ignore_index=True)\nplt.hist(combine_df.loc[combine_df['Origin'] == 0,\"Sex\"], color=\"skyblue\",alpha=.75, label=\"Origin=0\")\nplt.hist(combine_df.loc[combine_df['Origin'] == 1,\"Sex\"],color=\"red\",alpha=.75, label=\"Origin=1\")\nplt.legend()\nplt.show()\n","a746d378":"def correlation_matrix(data, label, pd_label,text):\n    #Matriz de correlaci\u00f3n\n    #correlation = train_c.loc[:, ['Pclass','Sex','Age','SibSp','Parch',\n    # 'Fare','Embarked','Origin']]\n    correlation = data.loc[:, ['Pclass','Age','SibSp','Parch',\n     'Fare','Embarked','Ticket','Cabin','Origin','Title']]\n    correlation = correlation.agg(LabelEncoder().fit_transform)\n    correlation[label] = pd_label \n    correlation = correlation.set_index(label).reset_index() # Move Age at index 0.\n\n    '''Now create the heatmap correlation.'''\n    plt.figure(figsize = (10,7))\n    sns.heatmap(correlation.corr(), cmap ='BrBG', annot = True)\n    plt.title('Variables Correlated with Origin '+text, fontsize = 18)\n    plt.show()","342b3d1a":"#correlation_matrix(train_mf,'Origin', train_mf.Origin, \"Male (Training)\")\n#correlation_matrix(test_mf,'Origin', test_mf.Origin, \"Female (Test)\")","f6ad2178":"X_train = train_mf.drop(\"Origin\", axis=1)\nY_train = train_mf[\"Origin\"]\n\nX_test  = test_mf.drop(\"Origin\", axis=1)\ny_test = test_mf[\"Origin\"]\nX_train.shape, Y_train.shape, X_test.shape, y_test.shape","9f13d848":"#Random Forest\nrandom_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, Y_train)\nY_pred = random_forest.predict(X_test)\nacc_random_forest = round(random_forest.score(X_test, y_test) * 100, 2)\nprobs = random_forest.predict_proba(X_test)[:, 0] #prob por muestra P(train|x)\nb_ratio(probs)\n\nprint(\"Acc: \",acc_random_forest)\np,r,f1=metricas(y_test,Y_pred)\nprint(\"Phi Coefficient: \",matthews_corrcoef(y_test, Y_pred))\nprint(\"ROC-AUC: \",roc_auc_score(y_test, Y_pred))\nplot_curve(y_test,Y_pred)\n\nprint('---------------------------------------------------------')","4eca7c3a":"X_train = train_mf.drop([\"Origin\",\"Sex\"], axis=1)\nY_train = train_mf[\"Origin\"]\n\nX_test  = test_mf.drop([\"Origin\",\"Sex\"], axis=1)\ny_test = test_mf[\"Origin\"]","063aec06":"#Random Forest\nrandom_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, Y_train)\nY_pred = random_forest.predict(X_test)\nacc_random_forest = round(random_forest.score(X_test, y_test) * 100, 2)\nprobs = random_forest.predict_proba(X_test)[:, 0] #prob por muestra P(train|x)\nb_ratio(probs)\n\nprint(\"Acc: \",acc_random_forest)\np,r,f1=metricas(y_test,Y_pred)\nprint(\"Phi Coefficient: \",matthews_corrcoef(y_test, Y_pred))\nprint(\"ROC-AUC: \",roc_auc_score(y_test, Y_pred))\nplot_curve(y_test,Y_pred)\nprint('---------------------------------------------------------')","eb9de64d":"X_train = train_mf.drop([\"Origin\",\"Sex\",\"Title\"], axis=1)\nY_train = train_mf[\"Origin\"]\n\nX_test  = test_mf.drop([\"Origin\",\"Sex\",\"Title\"], axis=1)\ny_test = test_mf[\"Origin\"]","9ddb218c":"#Random Forest\nrandom_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, Y_train)\nY_pred = random_forest.predict(X_test)\nacc_random_forest = round(random_forest.score(X_test, y_test) * 100, 2)\nprobs = random_forest.predict_proba(X_test)[:, 0] #prob por muestra P(train|x)\nb_ratio(probs)\n\nprint(\"Acc: \",acc_random_forest)\np,r,f1=metricas(y_test,Y_pred)\nprint(\"Phi Coefficient: \",matthews_corrcoef(y_test, Y_pred))\nprint(\"ROC-AUC: \",roc_auc_score(y_test, Y_pred))\nplot_curve(y_test,Y_pred)\nprint('---------------------------------------------------------')","f012f224":"### Cargar dataset\n-  Se carga el conjunto de entrenamiento y test.\n-  Se a\u00f1ade una nueva caracter\u00edtica 'Origin' donde 0='train' y 1='production'\n-  Se realiza el preproceso de las caracter\u00edsitcas alfanumericas y se agrupan en categor\u00edas\n-  Se eliminan las caracter\u00edsticas 'survived' y 'id_passenger'\n-  Se tratan los valores con valor 'NaN' en la caracter\u00edstica 'Age'","abc51474":"En la primera evaluaci\u00f3n se han utilizado dos m\u00e9tricas para la comprobar la existencia de covariate shift:\n    -  Phi Coefficient --> Si phi > 0.3 entonces hay covariate shift\n    -  AUC-ROC curve --> Si aux > 0.8 entonces hay covariate shift","e5102828":"#### Evaluar conjunto de datos con diferentes modelos","79a752c2":"#### Evaluar conjunto de datos con diferentes modelos","16308c3d":"#### Barajar el conjunto de datos inicial para balancear las cabinas","35cf7a5e":"Evaluaci\u00f3n del nuevo conjunto:","3e5b43f0":"#### Calculo de las matrices de correlaci\u00f3n respecto a origin","a6fc12d9":"### Creacion de un nuevo conjunto de datos\nSe separa el anterior conjunto de datos creado. El conjunto de test est\u00e1 formado por objetos con 'Sex'=1 (Male) y el conjunto de test por los objetos con 'Sex'=0 (Female).","e1910fb0":"#### Observar la distribuci\u00f3n de la cabina\n    - Se observa que el train y el test son diferenciable por las cabinas 6 y 7. Esto conllevar\u00e1 que aparezca Covariate shift en la primera prueba.","8a307ef3":"### Crear nuevo conjunto de datos\n\nSe crea un nuevo conjunto de datos:\n  -  (80% train_df \/ 80% test_df) --> nuevo conjunto de entrenamiento.\n  -  (20% train_df \/ 20% test_df) --> nuevo conjunto de test.\n\nEn el nuevo conjunto de datos los objetos con la nueva caracter\u00edstica 'origin' se mezcla en el train y test. \nSe calcula la matriz de correlaci\u00f3n de las caracter\u00edsticas con respecto a la caracter\u00edstica nueva 'Origin'."}}