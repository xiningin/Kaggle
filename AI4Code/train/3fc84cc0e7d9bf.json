{"cell_type":{"a34dcf90":"code","4e04a7f7":"code","0b75cf6a":"code","a91bbc67":"code","cb46bd7a":"code","14c7e36d":"code","17d6c972":"markdown","d33e5702":"markdown","c8609e06":"markdown","5d669660":"markdown","c277dc1f":"markdown","a882b105":"markdown","ff2223cb":"markdown","65b07a59":"markdown","64e0b713":"markdown","db58ffc8":"markdown","b4ef2e24":"markdown"},"source":{"a34dcf90":"pip install highlight_text","4e04a7f7":"import pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt \nimport matplotlib.patheffects as path_effects\nimport matplotlib.patches as mpatches\nimport matplotlib.image as mpimg\nfrom matplotlib import rcParams\nfrom matplotlib.patches import Arc\nimport numpy as np\nfrom highlight_text import fig_text\nimport seaborn as sns\nimport requests\nfrom bs4 import BeautifulSoup\nimport json","0b75cf6a":"# Entering Real Sociedad vs Barcelona match link\nlink = \"https:\/\/understat.com\/match\/15054\"\nres = requests.get(link)\nsoup = BeautifulSoup(res.content,'lxml')\nscripts = soup.find_all('script')\n\n# Get the shotsData, it's the second script executed in order\nstrings = scripts[1].string \n\n# Getting rid of unnecessary characters from json data\nind_start = strings.index(\"('\")+2 \nind_end = strings.index(\"')\") \njson_data = strings[ind_start:ind_end] \njson_data = json_data.encode('utf8').decode('unicode_escape')\nshots_match = json.loads(json_data)","a91bbc67":"# Creatinf the 2 dfs\n\ndf_away = pd.DataFrame(shots_match['a'])\ndf_home = pd.DataFrame(shots_match['h'])\n\n# Selecting only the useful columns\n\ndf_away = df_away[['minute','player',\"a_team\",'result','xG','h_a']]\ndf_home = df_home[['minute','player',\"h_team\",'result','xG','h_a']]\n\n# Renaming columns \n\ndf_away.rename(columns={\"a_team\": \"team\"})\ndf_home.rename(columns={\"h_team\": \"team\"})\n\n# Changing data types\n\ndf_away = df_away.astype({\"xG\": float, \"minute\": float})\ndf_home = df_home.astype({\"xG\": float, \"minute\": float})\n\n# Creating new column xG cumulative\ndf_away['xGcum'] = np.cumsum(df_away['xG'])\ndf_home['xGcum'] = np.cumsum(df_home['xG'])","cb46bd7a":"# creating the dictionaries\nx = df_home[df_home['result']=='Goal']['minute'].tolist()\nx1 = df_away[df_away['result']=='Goal']['minute'].tolist()\ny =df_home[df_home['result']=='Goal']['xGcum'].tolist()\ny1 = df_away[df_away['result']=='Goal']['xGcum'].tolist()\n\n# xG inside the scatterplots\ny_plot =np.round(df_home[df_home['result']=='Goal']['xG'],2).tolist()\ny1_plot = np.round(df_away[df_away['result']=='Goal']['xG'],2).tolist()\n\n# Annotation text\ntext_home = df_home[df_home['result']=='Goal']['player'].tolist()\ntext_away = df_away[df_away['result']=='Goal']['player'].tolist()\nlabel_home = df_home['h_team'].unique().tolist()\nlabel_away = df_away['a_team'].unique().tolist()\n\n# More annotation text\nxGcum_away = str(np.round(df_away['xGcum'].iloc[-1],3))\nxGcum_home = str(np.round(df_home['xGcum'].iloc[-1],3))\nteam_away = str(df_away['a_team'].iloc[-1])\nteam_home = str(df_home['h_team'].iloc[-1])","14c7e36d":"# plot style \nplt.style.use('fivethirtyeight')\nfig,ax = plt.subplots(figsize = (16,8))\n\n# Step plot for Inter and Udinese \nax.step(x = df_home['minute'] ,y = df_home['xGcum'] , where = 'post', color = 'cyan' ,linewidth = 4.0)\nax.step(x = df_away['minute'] ,y = df_away['xGcum'] , where = 'post', color = 'red' ,linewidth = 4.0)\n\n#sns.scatterplot(x=x,y=y,s=430,marker='o',color='yellow')\nax.scatter(x=x,y=y, color='cyan', edgecolor='black',s=955, label=\"Inter\",linewidths=1.5,)\nax.scatter(x=x1,y=y1, color='red', edgecolor='black',s=955, label=\"Udinese\",linewidths=1.5)\n\n#FILL AREA BETWEEN LINE AND X \nplt.fill_between(x,y, alpha=0.08, color='cyan')\nplt.fill_between(x1,y1, alpha=0.08, color='red')\n\n# Text annotation for goals\nfor i in range(len(x1)):\n    plt.annotate(text_away[i], (x1[i]- 3, y1[i] + 0.26),c='black',size=13)\nfor i in range(len(x)):\n    plt.annotate(text_home[i], (x[i]- 3, y[i] + 0.26),c='black',size=13)\n\n# legend\nlegend = ax.legend(loc=\"upper center\",prop={'weight':'bold'})\nlegend.legendHandles[0]._sizes = [1000]\nlegend.legendHandles[1]._sizes = [1000]\n\n# title\nfig_text(0.08,1.03, s=\"xG Flowchart Calcio Serie A\\n\", fontsize = 25, fontweight = \"light\")\nfig_text(0.08,0.97, s=\" <{} {} xG> vs <{} {} xG>\".format(team_home,xGcum_home,team_away,xGcum_away),highlight_textprops=[{\"color\":'cyan'}, {'color':\"red\"}], fontsize = 20, fontweight=\"light\")\n\n# text\nfig_text(0.5,0.01, s=\"Minute\\n\", fontsize = 24, fontweight = \"bold\", color = \"black\")\nfig_text(0.01,0.6, s=\"xG\\n\", fontsize = 24, fontweight = \"bold\", color = \"black\",rotation=90)\nfig_text(0.25,0.9, s=\"First Half\\n\", fontsize = 18, fontweight = \"bold\", color = \"black\")\nfig_text(0.75,0.9, s=\"Second Half\\n\", fontsize = 18, fontweight = \"bold\", color = \"black\")\n\n# Finally a dotted line to separate the HT \nplt.vlines( ymin=0, ymax=4,x=45, color='black', alpha=0.1,linestyle=\"solid\")\n# ticks\nplt.xticks([0,15,30,45,60,75,90])\nplt.yticks([0,0.5,1,1.5,2,2.5,3,3.5,4])\n\n# Annotate quality chances inside the scatterplots\n\n# Home team\nfor i in range(len(x)):\n    plt.annotate(y_plot[i], (x[i], y[i]),c='black',size=12,ha='center',va='center',fontweight='bold')\n# Away team\nfor i in range(len(x1)):\n    plt.annotate(y1_plot[i], (x1[i], y1[i]),c='black',size=12,ha='center',va='center',fontweight='bold')","17d6c972":"<a id=\"1.\"><\/a>\n# Introduction\nLet's explore Expected goals flowcharts, heavily inspired by the tutorials from [McKay Johns Youtube channel](https:\/\/www.youtube.com\/c\/mckayjohns) We'll scrape the match data and then plot it to obtain a xG flowchart to try t to illustrate better the match on expected goals and goals scored.\n\nHere are some of the other notebooks created for the Understat Series :\n\n1. [Understat Series : Webscraping of Understat using the Beautiful Soup](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-webscraping-using-beautiful-soup)\n2. [Understat Series : Understat package](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-understat-package)\n\n3. [Understat Series : Webscraping using Selenium](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-webscraping-using-selenium)\n\n4. [Understat Series : Webscraping using for loops](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-webscraping-using-for-loops)\n\n5. [Understat Series : Probabilities and Random](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-probabilities-and-random)\n\n6. [Understat Series : Diverging plots](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-diverging-plots)\n\n7. [Understat Series : xG Rolling averages](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-xg-rolling-averages)\n\n8. [Understat Series : xG Flow Chart](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-xg-flow-chart)\n\n9. [Understat Series : Shotmaps](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-shotmaps)\n\n10. [Understat Series : Heatmaps](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-heatmaps)\n\n11. [Understat Series : Top 2 Goalscorers](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-top-2-goalscorers)\n\n12. [Understat Series : Dashboards](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-dashboards)","d33e5702":"<a id=\"1.1\"><\/a>\n## Notebook content\n* [1. Introduction](#1.)\n    - [1.1. Notebook Content.](#1.1)\n* [2.Importing libraries.](#2.)\n* [3.Scraping Match Data.](#3.)\n* [4. Cleaning Data](#4.)\n    - [4.1. Renaming columns and changing data.](#4.1)\n    - [4.2. Rounding numbers and creating lists](#4.2)\n* [5. Plotting xG Flow Chart](#5.)\n* [6. References](#6.)","c8609e06":"<a id=\"6.\"><\/a>\n# References\nThe main reference for this notebook were : \n\n   1. [McKay Johns tutorial](https:\/\/www.youtube.com\/watch?v=bvoOOYMQkac)\n   2. [And this other from this guy](https:\/\/github.com\/patryklowicki\/football_analysis\/blob\/master\/team_stats\/team_xg_per_game_c.ipynb)","5d669660":"<a id=\"5.\"><\/a>\n# Plotting xG flow\nLet's finally plot the xG accumulated, at the center we'll be annotating the quality of the chance of every goal scored: ","c277dc1f":"<a id=\"4.2\"><\/a>\n## Rounding numbers and creating lists\nLet's now continue by rounding the results up to just 2 decimals and creating the lists , instead of calling big series values such as  \"df_home[df_home['result']=='Goal']['minute']\" .values\" for example.","a882b105":"This game was a complete domination by FC Barcelona scoring 6 goals and having by far much more xG accumulated","ff2223cb":"<a id=\"4.1\"><\/a>\n## Renaming columns and changing data types","65b07a59":"# Understat Series : xG Flow Chart\n\n\n\n**By Jose Gonzalez**\n\n**Was greatly inspired by the [McKay Johns tutorial](https:\/\/www.youtube.com\/watch?v=bvoOOYMQkac) he has great tutorials on shotmaps, passing networks, dashboards etc , [here is his Youtube channel](https:\/\/www.youtube.com\/c\/mckayjohns)**\n\n![image.png](attachment:image.png)","64e0b713":"<a id=\"2.\"><\/a>\n# Importing Libraries","db58ffc8":"<a id=\"4.\"><\/a>\n# Cleaning data \nOnce we've scraped the data let's proceed to clean the data by renaming columns and by changing data types from objects to float types to be able to fully manipulate the data","b4ef2e24":"<a id=\"3.\"><\/a>\n# Scraping Match Data\nLet' first proceed to scrape the data from Understat using requests and BS4 : "}}