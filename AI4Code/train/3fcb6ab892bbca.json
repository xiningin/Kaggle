{"cell_type":{"b41b1425":"code","1cff56a0":"code","4a72f224":"code","2211f7db":"code","f97146d2":"code","71091988":"code","d3cde711":"code","335bfeff":"code","5b873e6f":"code","22c8320d":"code","52b6781c":"code","46c558be":"code","86a6b664":"code","6603573d":"code","3d43edcb":"code","78bf68f2":"code","85d5fb0d":"code","3868964f":"code","d0f16abe":"code","c51de43c":"code","05426c81":"code","c3b0a9b0":"code","9e36030e":"code","eebc2b30":"code","c72c4017":"code","59a9d149":"code","c00fef4f":"markdown"},"source":{"b41b1425":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\/intel-image-classification\/seg_train\/seg_train\/\"))\nmountain_paths=os.listdir(\"..\/input\/intel-image-classification\/seg_train\/seg_train\/mountain\")\nstreet_paths=os.listdir(\"..\/input\/intel-image-classification\/seg_train\/seg_train\/street\")\nglacier_paths=os.listdir(\"..\/input\/intel-image-classification\/seg_train\/seg_train\/glacier\")\nbuildings_paths=os.listdir(\"..\/input\/intel-image-classification\/seg_train\/seg_train\/buildings\")\nsea_paths=os.listdir(\"..\/input\/intel-image-classification\/seg_train\/seg_train\/sea\")\nforest_paths=os.listdir(\"..\/input\/intel-image-classification\/seg_train\/seg_train\/forest\")\n# Any results you write to the current directory are saved as output.","1cff56a0":"import numpy as np\nfrom tensorflow.python.keras.applications.resnet50 import preprocess_input\nfrom tensorflow.python.keras.preprocessing.image import load_img, img_to_array\n\nimage_size = 150\n\ndef read_and_prep_images(img_paths, img_height=image_size, img_width=image_size):\n    imgs = [load_img(img_path, target_size=(img_height, img_width)) for img_path in img_paths]\n    img_array = np.array([img_to_array(img) for img in imgs])\n    output = preprocess_input(img_array)\n    return(output)","4a72f224":"\nbuildings_paths=[os.path.join(\"..\/input\/intel-image-classification\/seg_train\/seg_train\/buildings\",filename_) for filename_ in buildings_paths ]\nmountain_paths=[os.path.join(\"..\/input\/intel-image-classification\/seg_train\/seg_train\/mountain\",filename_1) for filename_1 in mountain_paths ]\nforest_paths=[os.path.join(\"..\/input\/intel-image-classification\/seg_train\/seg_train\/forest\",filename_0) for filename_0 in forest_paths ]\nsea_paths=[os.path.join(\"..\/input\/intel-image-classification\/seg_train\/seg_train\/sea\",filename_2) for filename_2 in sea_paths ]\nglacier_paths=[os.path.join(\"..\/input\/intel-image-classification\/seg_train\/seg_train\/glacier\",filename_3) for filename_3 in glacier_paths ]\nstreet_paths=[os.path.join(\"..\/input\/intel-image-classification\/seg_train\/seg_train\/street\",filename_4) for filename_4 in street_paths ]","2211f7db":"len(forest_paths)","f97146d2":"import keras\ny_buildings = keras.utils.to_categorical([0 for i in range(2100)], 6)\ny_forest = keras.utils.to_categorical([1 for i in range(2100)], 6)\ny_glacier = keras.utils.to_categorical([2 for i in range(2100)], 6)\ny_mountain = keras.utils.to_categorical([3 for i in range(2100)],6 )\ny_sea = keras.utils.to_categorical([4 for i in range(2100)], 6)\ny_street = keras.utils.to_categorical([5 for i in range(2100)],6)","71091988":"\ny_buildings[0]\n","d3cde711":"y_forest[0]","335bfeff":"y_glacier[0]","5b873e6f":"y_mountain[0]","22c8320d":"y_sea[0]","52b6781c":"y_street[0]","46c558be":"X=[]\nY=np.array([[1.0,0.,0.,0.,0.,0.]])\nc=500\n\nfor i in range(500):\n    X.append(buildings_paths[i])\n    if(i!=0):Y=np.append(Y,[y_buildings[i]],axis=0)\nfor i in range(500):\n    X.append(forest_paths[i])\n    Y=np.append(Y,[y_forest[i]],axis=0)\nfor i in range(500):\n    X.append(glacier_paths[i])\n    Y=np.append(Y,[y_glacier[i]],axis=0)\nfor i in range(500):\n    X.append(mountain_paths[i])\n    Y=np.append(Y,[y_mountain[i]],axis=0)\nfor i in range(500):\n    X.append(sea_paths[i])\n    Y=np.append(Y,[y_sea[i]],axis=0)\nfor i in range(500):\n    X.append(street_paths[i])\n    Y=np.append(Y,[y_street[i]],axis=0) \n\nfor i in range(500,1000):\n    X.append(buildings_paths[i])\n    if(i!=0):Y=np.append(Y,[y_buildings[i]],axis=0)\nfor i in range(500,1000):\n    X.append(forest_paths[i])\n    Y=np.append(Y,[y_forest[i]],axis=0)\nfor i in range(500,1000):\n    X.append(glacier_paths[i])\n    Y=np.append(Y,[y_glacier[i]],axis=0)\nfor i in range(500,1000):\n    X.append(mountain_paths[i])\n    Y=np.append(Y,[y_mountain[i]],axis=0)\nfor i in range(500,1000):\n    X.append(sea_paths[i])\n    Y=np.append(Y,[y_sea[i]],axis=0)\nfor i in range(500,1000):\n    X.append(street_paths[i])\n    Y=np.append(Y,[y_street[i]],axis=0) \n    \n    \nfor i in range(1000,1500):\n    X.append(buildings_paths[i])\n    if(i!=0):Y=np.append(Y,[y_buildings[i]],axis=0)\nfor i in range(1000,1500):\n    X.append(forest_paths[i])\n    Y=np.append(Y,[y_forest[i]],axis=0)\nfor i in range(1000,1500):\n    X.append(glacier_paths[i])\n    Y=np.append(Y,[y_glacier[i]],axis=0)\nfor i in range(1000,1500):\n    X.append(mountain_paths[i])\n    Y=np.append(Y,[y_mountain[i]],axis=0)\nfor i in range(1000,1500):\n    X.append(sea_paths[i])\n    Y=np.append(Y,[y_sea[i]],axis=0)\nfor i in range(1000,1500):\n    X.append(street_paths[i])\n    Y=np.append(Y,[y_street[i]],axis=0)   ","86a6b664":"Y\n","6603573d":"X=read_and_prep_images(X, 150, 150)","3d43edcb":"X.shape","78bf68f2":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.python import keras\nfrom tensorflow.python.keras.models import Sequential\nfrom tensorflow.python.keras.layers import Dense, Flatten, Conv2D, Dropout,MaxPooling2D\n\nmodel = Sequential()\n","85d5fb0d":"model.add(Conv2D(200, kernel_size=(2,2),activation='relu' ,input_shape = (150, 150, 3)))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Conv2D(200, kernel_size=(2,2),activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Conv2D(150, kernel_size=(3, 3),activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Conv2D(100, kernel_size=(3, 3),activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Conv2D(250, kernel_size=(3, 3),activation='relu'))\nmodel.add(Conv2D(200, kernel_size=(3, 3),activation='relu'))\nmodel.add(Conv2D(250, kernel_size=(3, 3),activation='relu'))\n#model.add(Conv2D(200, kernel_size=(3, 3),activation='relu'))\n#model.add(Conv2D(250,kernel_size= (3,3),activation='relu'))\n#model.add(Conv2D(200, kernel_size=(3, 3),activation='relu'))\n#model.add(Conv2D(250, kernel_size=(3,3),activation='relu'))\n#model.add(Conv2D(100, kernel_size=(3, 3),activation='relu'))\nmodel.add(Flatten())\nmodel.add(Dense(100,activation='relu'))\nmodel.add(Dense(50,activation='relu'))\nmodel.add(Dense(6, activation = 'softmax'))\nmodel.compile(loss = 'categorical_crossentropy',optimizer='adam', metrics=['accuracy'])","3868964f":"\nmodel.fit(X,Y,batch_size=10,epochs=40,validation_split=0.3)\n\n\n\n","d0f16abe":"#model_street.fit(output_street,y_street,batch_size=10,epochs=1,validation_split=0.2)","c51de43c":"#model_sea.fit(output_sea,y_sea,batch_size=10,epochs=1,validation_split=0.2)","05426c81":"#model_glacier.fit(output_glacier,y_glacier,batch_size=10,epochs=1,validation_split=0.2)","c3b0a9b0":"#model_buildings.fit(output_buildings,y_buildings,batch_size=10,epochs=1,validation_split=0.2)","9e36030e":"mountain_test=os.listdir('..\/input\/intel-image-classification\/seg_test\/seg_test\/mountain')\nmountain_paths=[os.path.join(\"..\/input\/intel-image-classification\/seg_test\/seg_test\/mountain\",filename) for filename in mountain_test ]\ntest_mountain=read_and_prep_images(mountain_paths, 150, 150)","eebc2b30":"forest_test=os.listdir('..\/input\/intel-image-classification\/seg_test\/seg_test\/forest')\nforest_paths=[os.path.join(\"..\/input\/intel-image-classification\/seg_test\/seg_test\/forest\",filename) for filename in forest_test ]\nforest_mountain=read_and_prep_images(forest_paths, 150, 150)","c72c4017":"model.predict(forest_mountain)","59a9d149":"model.predict(test_mountain)","c00fef4f":"**I am trying to train a model category by category and see what happens this note book is just an experiment by me u can see that model overfits for the first category it was trained**"}}