{"cell_type":{"331d7963":"code","b99d06e9":"code","bd37f950":"code","c887d151":"code","46f5f21d":"code","91058e7d":"code","2e9a6337":"code","4acf8f9d":"code","573bf0b9":"code","5a70d3f7":"code","bdc85cc4":"code","4a5fbfbc":"markdown","93fe725f":"markdown","c03d9bc6":"markdown","21cee55e":"markdown"},"source":{"331d7963":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","b99d06e9":"data=pd.read_csv('..\/input\/diabetes.csv')\ndata.info()","bd37f950":"y=data.Outcome.values\nx_data=data.drop(['Outcome'],axis=1)","c887d151":"#%%normalization\nx=(x_data-np.min(x_data))\/(np.max(x_data)-np.min(x_data)).values","46f5f21d":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)\nx_train = x_train.T\nx_test = x_test.T\ny_train = y_train.T\ny_test = y_test.T\nprint('x_train:',x_train)\nprint('x_test:',x_test)\nprint('y_train:',y_train)\nprint('y_test:',y_test)","91058e7d":"#parameter initialize and sigmoid function\n\"\"\"\nnumpy.full\nnumpy.full(shape, fill_value, dtype=None, order='C')\nReturn a new array of given shape and type, filled with fill_value.\nsource:https:\/\/docs.scipy.org\/doc\/numpy-1.14.0\/reference\/generated\/numpy.full.html\n\"\"\"\n# dimension = 30\n\ndef initialize_weights_and_bias(dimension):\n    \n    w = np.full((dimension,1),0.01)\n    b = 0.0\n    return w,b\n\n\n# w,b = initialize_weights_and_bias(30)\n\ndef sigmoid(z):\n    \n    y_head = 1\/(1+ np.exp(-z))\n    return y_head","2e9a6337":"def forward_backward_propagation(w,b,x_train,y_train):\n    # forward propagation\n    z = np.dot(w.T,x_train) + b\n    y_head = sigmoid(z)\n    loss = -y_train*np.log(y_head)-(1-y_train)*np.log(1-y_head)\n    cost = (np.sum(loss))\/x_train.shape[1]      \n    \n    # backward propagation\n    derivative_weight = (np.dot(x_train,((y_head-y_train).T)))\/x_train.shape[1] \n    derivative_bias = np.sum(y_head-y_train)\/x_train.shape[1]                 \n    gradients = {'derivative_weight': derivative_weight, 'derivative_bias': derivative_bias}\n    \n    return cost,gradients    \n\n","4acf8f9d":"def update(w, b, x_train, y_train, learning_rate,number_of_iterarion):\n    cost_list = []\n    cost_list2 = []\n    index = []\n    \n    # updating(learning) parameters is number_of_iterarion times\n    for i in range(number_of_iterarion):\n        # make forward and backward propagation and find cost and gradients\n        cost,gradients = forward_backward_propagation(w,b,x_train,y_train)\n        cost_list.append(cost)\n        # lets update\n        w = w - learning_rate * gradients['derivative_weight']\n        b = b - learning_rate * gradients['derivative_bias']\n        if i % 10 == 0:\n            cost_list2.append(cost)\n            index.append(i)\n            print ('Cost after iteration %i: %f' %(i, cost))\n            \n    # we update(learn) parameters weights and bias\n    parameters = {'weight': w,'bias': b}\n    plt.plot(index,cost_list2)\n    plt.xticks(index,rotation='vertical')\n    plt.xlabel('Number of Iterarion')\n    plt.ylabel('Cost')\n    plt.show()\n    return parameters, gradients, cost_list","573bf0b9":"#%%  # prediction\n\"\"\"\nnumpy.zeros(shape, dtype=float, order='C')\nReturn a new array of given shape and type, filled with zeros.\nsource:https:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.zeros.html\n\"\"\"\ndef predict(w,b,x_test):\n   \n    z = sigmoid(np.dot(w.T,x_test)+b)\n    Y_prediction = np.zeros((1,x_test.shape[1]))\n   \n    for i in range(z.shape[1]):\n        if z[0,i]<= 0.5:\n            Y_prediction[0,i] = 0\n        else:\n            Y_prediction[0,i] = 1\n\n    return Y_prediction    ","5a70d3f7":"# logistic_regression\ndef logistic_regression(x_train, y_train, x_test, y_test, learning_rate ,  num_iterations):\n    \n    dimension =  x_train.shape[0]  # that is 30\n    w,b = initialize_weights_and_bias(dimension)\n    \n    parameters, gradients, cost_list = update(w, b, x_train, y_train, learning_rate,num_iterations)\n    \n    y_prediction_test = predict(parameters['weight'],parameters['bias'],x_test)\n\n    print('test accuracy: {} %'.format(100 - np.mean(np.abs(y_prediction_test - y_test)) * 100))\n    \nlogistic_regression(x_train, y_train, x_test, y_test,learning_rate = 1, num_iterations = 300) ","bdc85cc4":"# with sklearn\nfrom sklearn.linear_model import LogisticRegression\nlr=LogisticRegression()\nlr.fit(x_train.T,y_train.T)\nprint('test accuracy {}'.format(lr.score(x_test.T,y_test.T)))","4a5fbfbc":"![normalisation.jpg](attachment:normalisation.jpg)","93fe725f":"![0_rBQI7uBhBKE8KT-X.png](attachment:0_rBQI7uBhBKE8KT-X.png)","c03d9bc6":"![Classification%20vs%20Regression.png](attachment:Classification%20vs%20Regression.png)","21cee55e":"![sigmoid_function.gif](attachment:sigmoid_function.gif)"}}