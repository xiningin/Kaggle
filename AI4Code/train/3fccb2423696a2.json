{"cell_type":{"96375431":"code","5b3f31b5":"code","f77e2d89":"code","49f08502":"code","cbe8aa0d":"code","5463b4e8":"code","6f25624d":"code","90298909":"code","d1887840":"code","56a9f07a":"code","6ba6bf6d":"code","720d20a0":"code","2220610b":"code","fe4f13f0":"code","684172b2":"code","3262bb68":"code","a59b2d9e":"code","ca372c91":"code","0def0534":"code","cf1199c5":"code","48504310":"code","76f00e94":"code","7e2e8ee2":"code","fcd3ab1c":"code","40981b46":"code","098eb477":"code","9e1e0aff":"code","d9a28d23":"code","cf1aa091":"code","36bf736e":"code","82d678e2":"code","5e68e40e":"code","c34cd2d8":"code","6d6181b2":"code","0f21e229":"code","5f2edda1":"markdown","87d28b94":"markdown","42fdc2ce":"markdown","4a377b91":"markdown","1006f3e5":"markdown"},"source":{"96375431":"import os\nfrom glob import glob\nimport random\nimport time\nimport tensorflow\nimport datetime\nos.environ['KERAS_BACKEND'] = 'tensorflow'\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '3' \n\nfrom tqdm import tqdm\n\nimport numpy as np\nimport pandas as pd\nfrom IPython.display import FileLink\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')\nimport seaborn as sns \n%matplotlib inline\nfrom IPython.display import display, Image\nimport matplotlib.image as mpimg\nimport cv2\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.datasets import load_files       \nfrom keras.utils import np_utils\nfrom sklearn.utils import shuffle\nfrom sklearn.metrics import log_loss\n\nfrom keras.models import Sequential, Model\nfrom keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, BatchNormalization, GlobalAveragePooling2D\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.preprocessing import image\nfrom keras.callbacks import ModelCheckpoint, EarlyStopping\nfrom keras.applications.vgg16 import VGG16","5b3f31b5":"dataset = pd.read_csv('..\/input\/state-farm-distracted-driver-detection\/driver_imgs_list.csv')\ndataset.head(5)","f77e2d89":"#Classes\nNUMBER_CLASSES = 10\n\nactivity_map = {'c0': 'Safe driving', \n                'c1': 'Texting - right', \n                'c2': 'Talking on the phone - right', \n                'c3': 'Texting - left', \n                'c4': 'Talking on the phone - left', \n                'c5': 'Operating the radio', \n                'c6': 'Drinking', \n                'c7': 'Reaching behind', \n                'c8': 'Hair and makeup', \n                'c9': 'Talking to passenger'}","49f08502":"#Images Sample with classes from dataset\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n\nplt.figure(figsize = (12, 20))\nimage_count = 1\nBASE_URL = '..\/input\/state-farm-distracted-driver-detection\/imgs\/train\/'\nfor directory in os.listdir(BASE_URL):\n    if directory[0] != '.':\n        for i, file in enumerate(os.listdir(BASE_URL + directory)):\n            if i == 1:\n                break\n            else:\n                fig = plt.subplot(5, 2, image_count)\n                image_count += 1\n                image = mpimg.imread(BASE_URL + directory + '\/' + file)\n                plt.imshow(image)\n                plt.title(activity_map[directory])","cbe8aa0d":"#Group Drivers By Subject\nby_drivers = dataset.groupby('subject')\nunique_drivers = by_drivers.groups.keys()\nprint(unique_drivers)","5463b4e8":"#Group by Unique drivers\nunique_drivers = by_drivers.groups.keys() # drivers id\nprint('There are : ',len(unique_drivers), ' unique drivers')\nprint('There is a mean of ',round(dataset.groupby('subject').count()['classname'].mean()), ' images by driver.')","6f25624d":"#Resizing images size using cv2\ndef get_cv2_image(path, img_rows, img_cols, color_type=3):\n    if color_type == 1:\n        img = cv2.imread(path, cv2.IMREAD_GRAYSCALE)\n    elif color_type == 3:\n        img = cv2.imread(path, cv2.IMREAD_COLOR)\n    img = cv2.resize(img, (img_rows, img_cols)) \n    return img","90298909":"#Train Images\ndef load_train(img_rows, img_cols, color_type=3):\n    start_time = time.time()\n    train_images = [] \n    train_labels = []\n    for classed in tqdm(range(NUMBER_CLASSES)):\n        print('Loading directory c{}'.format(classed))\n        files = glob(os.path.join('..\/input\/state-farm-distracted-driver-detection\/imgs\/train\/c' + str(classed), '*.jpg'))\n        for file in files:\n            img = get_cv2_image(file, img_rows, img_cols, color_type)\n            train_images.append(img)\n            train_labels.append(classed)\n    print(\"Data Loaded in {} second\".format(time.time() - start_time))\n    return train_images, train_labels \n\n#Normalizing Train Images\ndef read_and_normalize_train_data(img_rows, img_cols, color_type):\n    X, labels = load_train(img_rows, img_cols, color_type)\n    y = np_utils.to_categorical(labels, 10)\n    x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    \n    x_train = np.array(x_train, dtype=np.uint8).reshape(-1,img_rows,img_cols,color_type)\n    x_test = np.array(x_test, dtype=np.uint8).reshape(-1,img_rows,img_cols,color_type)\n    \n    return x_train, x_test, y_train, y_test","d1887840":"# Validation\ndef load_test(size=200000, img_rows=64, img_cols=64, color_type=3):\n    path = os.path.join('..\/input\/state-farm-distracted-driver-detection\/imgs\/test', '*.jpg')\n    files = sorted(glob(path))\n    X_test, X_test_id = [], []\n    total = 0\n    files_size = len(files)\n    for file in tqdm(files):\n        if total >= size or total >= files_size:\n            break\n        file_base = os.path.basename(file)\n        img = get_cv2_image(file, img_rows, img_cols, color_type)\n        X_test.append(img)\n        X_test_id.append(file_base)\n        total += 1\n    return X_test, X_test_id\n#Normalizing\ndef read_and_normalize_sampled_test_data(size, img_rows, img_cols, color_type=3):\n    test_data, test_ids = load_test(size, img_rows, img_cols, color_type)\n    \n    test_data = np.array(test_data, dtype=np.uint8)\n    test_data = test_data.reshape(-1,img_rows,img_cols,color_type)\n    \n    return test_data, test_ids","56a9f07a":"img_rows = 64\nimg_cols = 64\ncolor_type = 1","6ba6bf6d":"x_train, x_test, y_train, y_test = read_and_normalize_train_data(img_rows, img_cols, color_type)\nprint('Train shape:', x_train.shape)\nprint(x_train.shape[0], 'train samples')","720d20a0":"nb_test_samples = 200\ntest_files, test_targets = read_and_normalize_sampled_test_data(nb_test_samples, img_rows, img_cols, color_type)\nprint('Test shape:', test_files.shape)\nprint(test_files.shape[0], 'Test samples')","2220610b":"#Number of images by category\nimport plotly.express as px\npx.histogram(dataset, x=\"classname\", color=\"classname\", title=\"Number of Images by Categories \")","fe4f13f0":"#Classe Distribution\ndriver_details = pd.read_csv('..\/input\/state-farm-distracted-driver-detection\/driver_imgs_list.csv')\ndriver_details['class_type'] = driver_details['classname'].str.extract('(\\d)',expand=False).astype(np.float)\nplt.figure()\ndriver_details.hist('class_type',alpha=0.5,layout=(1,1),bins=9)\nplt.title('class distribution')\nplt.draw()\nplt.show()","684172b2":"#Number of images by subjects\ndrivers_id = pd.DataFrame((driver_details['subject'].value_counts()).reset_index())\ndrivers_id.columns = ['driver_id', 'Counts']\npx.histogram(drivers_id, x=\"driver_id\",y=\"Counts\" ,color=\"driver_id\", title=\"Number of images by subjects \")","3262bb68":"#batch_size = 32\n#nb_epoch = 10","a59b2d9e":"!rm -f saved_models\/weights_best_vanilla.hdf5\n","ca372c91":"models_dir = \"saved_models\"\nif not os.path.exists(models_dir):\n    os.makedirs(models_dir)\n    \ncheckpointer = ModelCheckpoint(filepath='saved_models\/weights_best_vanilla.hdf5', \n                               monitor='val_loss', mode='min',\n                               verbose=1, save_best_only=True)\nes = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=2)\ncallbacks = [checkpointer, es]","0def0534":"#3 Convolutionnal layers (with Relu, Maxpooling and dropout)\n#A flatten layer\n#2 Dense layers with Relu and Dropouts\n#1 Dense layer with softmax for the classification\n#Batch Size: 32\n#Number of Epoch Passes: 10\nbatch_size = 32\nnb_epoch = 10\n\ndef create_model_v1():\n    model = Sequential()\n\n    model.add(Conv2D(32,(3,3),activation='relu',input_shape=(img_rows, img_cols, color_type)))\n    model.add(BatchNormalization())\n    model.add(Conv2D(32,(3,3),activation='relu',padding='same'))\n    model.add(BatchNormalization(axis = 3))\n    model.add(MaxPooling2D(pool_size=(2,2),padding='same'))\n    model.add(Dropout(0.3))\n\n    model.add(Conv2D(64,(3,3),activation='relu',padding='same'))\n    model.add(BatchNormalization())\n    model.add(Conv2D(64,(3,3),activation='relu',padding='same'))\n    model.add(BatchNormalization(axis = 3))\n    model.add(MaxPooling2D(pool_size=(2,2),padding='same'))\n    model.add(Dropout(0.3))\n    \n    model.add(Conv2D(128,(3,3),activation='relu',padding='same'))\n    model.add(BatchNormalization())\n    model.add(Conv2D(128,(3,3),activation='relu',padding='same'))\n    model.add(BatchNormalization(axis = 3))\n    model.add(MaxPooling2D(pool_size=(2,2),padding='same'))\n    model.add(Dropout(0.5))\n\n    model.add(Flatten())\n    model.add(Dense(512,activation='relu'))\n    model.add(BatchNormalization())\n    model.add(Dropout(0.5))\n    model.add(Dense(128,activation='relu'))\n    model.add(Dropout(0.25))\n    model.add(Dense(10,activation='softmax'))\n\n    return model","cf1199c5":"# Compiling the model\nmodel_v1 = create_model_v1()\nmodel_v1.summary()\nmodel_v1.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=['accuracy'])","48504310":"# Training CNN Vanilla Model\nhistory_v1 = model_v1.fit(x_train, y_train, \n          validation_data=(x_test, y_test),\n          callbacks=callbacks,\n          epochs=nb_epoch, batch_size=batch_size, verbose=1)","76f00e94":"model_v1.load_weights('saved_models\/weights_best_vanilla.hdf5')\n","7e2e8ee2":"#Accuracy & Loss\ndef plot_train_history(history):\n    plt.plot(history.history['accuracy'])\n    plt.plot(history.history['val_accuracy'])\n    plt.title('Model accuracy')\n    plt.ylabel('accuracy')\n    plt.xlabel('epoch')\n    plt.legend(['train', 'test'], loc='upper left')\n    plt.show()\n\n     \n    plt.plot(history.history['loss'])\n    plt.plot(history.history['val_loss'])\n    plt.title('Model loss')\n    plt.ylabel('loss')\n    plt.xlabel('epoch')\n    plt.legend(['train', 'test'], loc='upper left')\n    plt.show()","fcd3ab1c":"#Plotting Acuuracy & Loss\nplot_train_history(history_v1)\n","40981b46":"model_v1.load_weights('saved_models\/weights_best_vanilla.hdf5')\n","098eb477":"score = model_v1.evaluate(x_test, y_test, verbose=1)\nprint('Score: ', score)\n\ny_pred = model_v1.predict(x_test, batch_size=batch_size, verbose=1)\nscore = log_loss(y_test, y_pred)\nprint('Score log loss:', score)","9e1e0aff":"# Testing CNN Vanilla Model\ndef plot_test_class(model, test_files, image_number, color_type=1):\n    img_brute = test_files[image_number]\n    img_brute = cv2.resize(img_brute,(img_rows,img_cols))\n    plt.imshow(img_brute, cmap='gray')\n\n    new_img = img_brute.reshape(-1,img_rows,img_cols,color_type)\n\n    y_prediction = model.predict(new_img, batch_size=batch_size, verbose=1)\n    print('Y prediction: {}'.format(y_prediction))\n    print('Predicted: {}'.format(activity_map.get('c{}'.format(np.argmax(y_prediction)))))\n    \n    plt.show()","d9a28d23":"#Testing on Images\nfor i in range(5):\n    plot_test_class(model_v1, test_files, i)","cf1aa091":"!rm -f saved_models\/weights_best_vanilla.hdf5\n","36bf736e":"# Using data augmentation from keras as ImageDataGenerator\ntrain_datagen = ImageDataGenerator(rescale = 1.0\/255, \n                                   shear_range = 0.2, \n                                   zoom_range = 0.2, \n                                   horizontal_flip = True, \n                                   validation_split = 0.2)\n\ntest_datagen = ImageDataGenerator(rescale=1.0\/ 255, validation_split = 0.2)","82d678e2":"nb_train_samples = x_train.shape[0]\nnb_validation_samples = x_test.shape[0]\nprint(nb_train_samples)\nprint(nb_validation_samples)\ntraining_generator = train_datagen.flow(x_train, y_train, batch_size=batch_size)\nvalidation_generator = test_datagen.flow(x_test, y_test, batch_size=batch_size)","5e68e40e":"#Train the model with Data Augmentation\ncheckpoint = ModelCheckpoint('saved_models\/weights_best_vanilla.hdf5', monitor='val_acc', verbose=1, save_best_only=True, mode='max')\nhistory_v3 = model_v1.fit_generator(training_generator,\n                         steps_per_epoch = nb_train_samples \/\/ batch_size,\n                         epochs = 5, \n                         callbacks=[es, checkpoint],\n                         verbose = 1,\n                         validation_data = validation_generator,\n                         validation_steps = nb_validation_samples \/\/ batch_size)","c34cd2d8":"plot_train_history(history_v3)\n","6d6181b2":"# Evaluate the performance with Data Augmentation\nscore = model_v1.evaluate_generator(validation_generator, nb_validation_samples \/\/ batch_size)\nprint(\"Test Score:\", score[0])\nprint(\"Test Accuracy:\", score[1])","0f21e229":"#Testing on Images\nfor i in range(2):\n    plot_test_class(model_v1, test_files, i)","5f2edda1":"# Part 2:EDA\n","87d28b94":"# Importing Libraries","42fdc2ce":"# Part 1:Load & Preprocess Dataset\n","4a377b91":"# Part 4:Improving Model Efficiency by using Data Augmentation \n","1006f3e5":"# Part 3: Vanilla CNN Model\n"}}