{"cell_type":{"0c26e05c":"code","749679e5":"code","2ec6d592":"code","871b346e":"code","5ece2430":"code","72f1675b":"code","434e7413":"code","44a02728":"code","187b9851":"code","ab37ea1f":"code","ba80130c":"code","74e919f1":"code","31279c32":"code","db9a0514":"code","6836e507":"code","5d0ba89a":"code","6e3f18a5":"code","08351ed8":"code","f1ab68e3":"code","52158daa":"code","79baba85":"code","1c1c6b43":"code","dd46bcc5":"code","fccb841a":"code","093cd7f5":"code","a472065b":"code","65760eac":"code","0c38755c":"code","e9f07cce":"code","f57bbf09":"code","381d2a4f":"code","56a85122":"code","4dbd4c96":"code","6b0bbe20":"code","29204701":"code","ab537698":"code","fb106bc3":"code","84cb759e":"code","16d66d6e":"code","ec67e4e2":"code","978c8226":"code","c004cdf7":"code","34fa9436":"code","083c9b9c":"code","e378f725":"code","e405cbd0":"code","f182e3d4":"code","9ce74117":"code","bd1ae96f":"code","013ad5b9":"code","445ed487":"code","aa294146":"code","f55f7718":"code","56fdc366":"code","35469b7e":"code","1f1b5166":"code","cff72900":"code","2c776cc5":"code","471a324d":"code","335ce8cc":"markdown","144881ed":"markdown","b61b4d34":"markdown","14fc0496":"markdown","21263c86":"markdown","a15c356d":"markdown","fda3c096":"markdown","61c037e8":"markdown","851f40ee":"markdown","2c36f45b":"markdown","7e803163":"markdown","bfeaf121":"markdown","9b755321":"markdown","abc06cc8":"markdown","68ccd04d":"markdown","cc965c5c":"markdown","50605126":"markdown","b56ddc1c":"markdown","d04ec777":"markdown","9e1e57df":"markdown","4df38708":"markdown","33c12796":"markdown","fb0f5e84":"markdown","3f3e57ff":"markdown","0cdbccdf":"markdown","968e641a":"markdown","534c2085":"markdown","ca9721b0":"markdown","726c68a9":"markdown","ac85e85c":"markdown","221d033b":"markdown","29235b7c":"markdown","d0e6c446":"markdown","2982a006":"markdown","0f562512":"markdown","4d90c873":"markdown","ae6c8f4c":"markdown","151086f5":"markdown","0c991921":"markdown","68cc47f4":"markdown"},"source":{"0c26e05c":"# Imports\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport geopandas as gpd\nimport json\n%matplotlib inline\n\n# Bokeh\nfrom bokeh.io import output_file,show,output_notebook,push_notebook\nfrom bokeh.plotting import figure\nfrom bokeh.models import ColumnDataSource,HoverTool,CategoricalColorMapper\nfrom bokeh.layouts import row,column,gridplot\nfrom bokeh.models.widgets import Tabs,Panel\nfrom bokeh.models import GeoJSONDataSource\noutput_notebook()\n\n# plotly packages\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nfrom plotly.graph_objs import *\nimport plotly.graph_objects as go\n\n","749679e5":"# Dataframe COVID-19 - Maranhao\npath= \"..\/input\/covid19-ma\/covid19_ma.csv\"\ndf = pd.read_csv(path, encoding ='utf-8')\ndf.head(5)","2ec6d592":"# Basic info\ndf.info()","871b346e":"# Selecting the columns we want\ndf_ma = df[['date','epidemiological_week','city_ibge_code','city','estimated_population',\n            'last_available_confirmed','new_confirmed','last_available_deaths','new_deaths',\n            'last_available_confirmed_per_100k_inhabitants','last_available_death_rate']]","5ece2430":"# Transforming NaN cells\ndf_ma = df_ma.fillna(0)\ndf_ma.head(3)","72f1675b":"# Adding the region column for further analysis: Capital, Metropolitan city, Countryside\n# Creating Imepratriz dataframe for further analysis\ndf_ma['region'] = df_ma.city\ndef region_func(row):\n    if row.region == 'S\u00e3o Lu\u00eds':\n        row.region = 'Capital'\n    elif row.region == 'Imperatriz':\n        row.region = 'Imperatriz'\n    elif row.region == 'Raposa':\n        row.region = 'Metropolitan'\n    elif row.region == 'S\u00e3o Jos\u00e9 de Ribamar':\n        row.region = 'Metropolitan'\n    elif row.region == 'Pa\u00e7o do Lumiar':\n        row.region = 'Metropolitan'\n    else:\n        row.region = 'Countryside'\n    return row\n\ndf_ma = df_ma.apply(region_func, axis='columns')\ndf_ma.head(3)","434e7413":"zero_rows = df_ma[df_ma['city'] == 0].index\ndf_ma.drop(zero_rows, inplace = True)\ndf_ma.tail()","44a02728":"import datetime\nprint('Primeiro caso confirmado: ', datetime.datetime.strptime(df.date.min(), '%Y-%m-%d').strftime('%d\/%m\/%Y'))\nprint('\u00daltimo caso confirmado: ', datetime.datetime.strptime(df.date.max(), '%Y-%m-%d').strftime('%d\/%m\/%Y'))","187b9851":"# Object of the last date available\nlast_date = datetime.datetime.strptime(df_ma.date.max(), '%Y-%m-%d').strftime('%d\/%m\/%Y')\nprint(last_date)","ab37ea1f":"# Dividing by region\ncountryside = df_ma[df_ma['region']== 'Countryside']\ncapital = df_ma[df_ma['region']== 'Capital']\nmetropolitan = df_ma[df_ma['region']== 'Metropolitan']\n# Adding Imperatriz\nitz = df_ma[df_ma['city']== 'Imperatriz']","ba80130c":"# Table - Countryside\n# Agreggating data: confirmed and deaths\ncases = countryside.groupby(['date']).last_available_confirmed.sum()\ndeaths = countryside.groupby(['date']).last_available_deaths.sum()\n\n\n# Creating a table\ntabelax = pd.DataFrame({\"cases\": cases}).reset_index()\ntabelay = pd.DataFrame({'deaths': deaths}).reset_index()\n\n# Joining the tables\ntabela_countryside = tabelax.join(tabelay.set_index('date'), on = 'date')\n\n# Adding death rate to the table\n# Death rate is defined by the number of deaths divided by the number of confirmed cases\ntabela_countryside['death_rate'] = tabela_countryside['deaths']\/tabela_countryside['cases']\n\n# Number of new cases every day\ntabela_countryside['new_cases'] = tabela_countryside.cases.diff()\n\n# N\u00famero of new deaths every day\ntabela_countryside['new_deaths'] = tabela_countryside.deaths.diff()\ntabela_countryside.tail()","74e919f1":"# Table - Capital\n# Agreggating data: confirmed and deaths\ncases = capital.groupby(['date']).last_available_confirmed.sum()\ndeaths = capital.groupby(['date']).last_available_deaths.sum()\n\n\n# Creating a table\ntabelax = pd.DataFrame({\"cases\": cases}).reset_index()\ntabelay = pd.DataFrame({'deaths': deaths}).reset_index()\n\n# Joining the tables\ntabela_capital = tabelax.join(tabelay.set_index('date'), on = 'date')\n\n# Adding death rate to the table\n# Death rate is defined by the number of deaths divided by the number of confirmed cases\ntabela_capital['death_rate'] = tabela_capital['deaths']\/tabela_capital['cases']\n\n# Number of new cases every day\ntabela_capital['new_cases'] = tabela_capital.cases.diff()\n\n# Number of new deaths every day\ntabela_capital['new_deaths'] = tabela_capital.deaths.diff()\ntabela_capital.tail()","31279c32":"# Table - Metropolitan\n# Agreggating data: confirmed and deaths\ncases = metropolitan.groupby(['date']).last_available_confirmed.sum()\ndeaths = metropolitan.groupby(['date']).last_available_deaths.sum()\n\n\n# Creating a table\ntabelax = pd.DataFrame({\"cases\": cases}).reset_index()\ntabelay = pd.DataFrame({'deaths': deaths}).reset_index()\n\n# Joining the tables\ntabela_metropolitan = tabelax.join(tabelay.set_index('date'), on = 'date')\n\n# Adding death rate to the table\n# Death rate is defined by the number of deaths divided by the number of confirmed cases\ntabela_metropolitan['death_rate'] = tabela_metropolitan['deaths']\/tabela_metropolitan['cases']\n\n# Number of new cases every day\ntabela_metropolitan['new_cases'] = tabela_metropolitan.cases.diff()\n\n# N\u00famero of new deaths every day\ntabela_metropolitan['new_deaths'] = tabela_metropolitan.deaths.diff()\ntabela_metropolitan.tail()","db9a0514":"# Table - Imperatriz\n# Agreggating data: confirmed and deaths\ncases = itz.groupby(['date']).last_available_confirmed.sum()\ndeaths = itz.groupby(['date']).last_available_deaths.sum()\n\n# Creating a table\ntabelax = pd.DataFrame({\"cases\": cases}).reset_index()\ntabelay = pd.DataFrame({'deaths': deaths}).reset_index()\n\n# Joining the tables\ntabela_itz = tabelax.join(tabelay.set_index('date'), on = 'date')\n\n# Adding death rate to the table\n# Death rate is defined by the number of deaths divided by the number of confirmed cases\ntabela_itz['death_rate'] = tabela_itz['deaths']\/tabela_itz['cases']\n\n# Number of new cases every day\ntabela_itz['new_cases'] = tabela_itz.cases.diff()\n\n# N\u00famero of new deaths every day\ntabela_itz['new_deaths'] = tabela_itz.deaths.diff()\ntabela_itz.tail()","6836e507":"fig_region = go.Figure()\nfig_region.add_trace(go.Scatter(x=tabela_countryside['date'], y=tabela_countryside['cases'] , \n                         line=dict(color='green', width=3),\n                         name = 'Demais Regi\u00f5es'))\nfig_region.add_trace(go.Scatter(x=tabela_capital['date'], y=tabela_capital['cases'] , \n                         line=dict(color='navy', width=3),\n                         name = 'S\u00e3o Lu\u00eds'))\nfig_region.add_trace(go.Scatter(x=tabela_metropolitan['date'], y=tabela_metropolitan['cases'] , \n                         line=dict(color='darkorange', width=3),\n                         name = 'Regi\u00e3o Metropolitana'))\nfig_region.add_trace(go.Scatter(x=tabela_itz['date'], y=tabela_itz['cases'] , \n                         line=dict(color='steelblue', width=3),\n                         name = 'Imperatriz'))\nfig_region.update_xaxes(title = 'Data')\nfig_region.update_yaxes(title = 'Quantidade(Escala Logar\u00edtmica)')\nfig_region.update_layout(yaxis_type=\"log\",hovermode='x',\n                         width=700,height=700,\n                         title_text = 'Casos confirmados totais por regi\u00e3o at\u00e9 ' + last_date,\n                         font=dict(family=\"Arial, monospace\",size=12,color=\"black\"))\nfig_region.show()","5d0ba89a":"layout = Layout(\n    paper_bgcolor='rgba(0,0,0,0)',\n    plot_bgcolor='rgba(0,0,0,0)',)\n\nfig_daily = make_subplots(rows= 4, cols=1,subplot_titles=('S\u00e3o Lu\u00eds', \n                                                   'Imperatriz','Regi\u00e3o Metropolitana','Demais Regi\u00f5es'\n                                                 ))\n# S\u00e3o Lu\u00eds\nfig_daily.append_trace(go.Scatter(x=tabela_capital['date'], y=tabela_capital['new_cases'],\n                             line_color='navy', fill='tonexty', name = \"\"),row=1, col=1)\n# Imperatriz                                       \nfig_daily.append_trace(go.Scatter(x=tabela_itz['date'], y=tabela_itz['new_cases'],\n                             line_color='steelblue' ,fill = 'tonexty',name = \"\"),row=2, col=1)\n\n# Regi\u00e3o Metropolitana\nfig_daily.append_trace(go.Scatter(x=tabela_metropolitan['date'], y=tabela_metropolitan['new_cases'],\n                             line_color='darkorange',fill = 'tonexty' ,name = \"\"),row=3, col=1)\n\n\n# Demais Regi\u00f5es\nfig_daily.append_trace(go.Scatter(x=tabela_countryside['date'], y=tabela_countryside['new_cases'],\n                             line_color='green',fill = 'tonexty' ,name = \"\"),row=4, col=1)\n\n# Layout\nfig_daily.update_yaxes(showticklabels=True)\nfig_daily.update_layout(width=700,height=1600,\n                   showlegend = False,yaxis={'categoryorder':'total ascending'},\n                  title_text=\"Novos casos confirmados at\u00e9 \" + last_date)\nfig_daily['layout'].update(layout)\nfig_daily.show()","6e3f18a5":"fig_region3 = go.Figure()\nfig_region3.add_trace(go.Scatter(x=tabela_countryside['date'], y=tabela_countryside['deaths'] , \n                         line=dict(color='green', width=3),\n                         name = 'Demais Regi\u00f5es'))\nfig_region3.add_trace(go.Scatter(x=tabela_capital['date'], y=tabela_capital['deaths'] , \n                         line=dict(color='navy', width=3),\n                         name = 'S\u00e3o Lu\u00eds'))\nfig_region3.add_trace(go.Scatter(x=tabela_metropolitan['date'], y=tabela_metropolitan['deaths'] , \n                         line=dict(color='darkorange', width=3),\n                         name = 'Regi\u00e3o Metropolitana'))\nfig_region3.add_trace(go.Scatter(x=tabela_itz['date'], y=tabela_itz['deaths'] , \n                         line=dict(color='steelblue', width=3),\n                         name = 'Imperatriz'))\nfig_region3.update_xaxes(title = 'Data')\nfig_region3.update_yaxes(title = 'Quantidade')\nfig_region3.update_layout(hovermode='x',\n                         width=700,height=500,\n                         title_text = '\u00d3bitos totais por regi\u00e3o at\u00e9 ' + last_date,\n                         font=dict(family=\"Arial, monospace\",size=12,color=\"black\"))\nfig_region3.show()","08351ed8":"layout = Layout(\n    paper_bgcolor='rgba(0,0,0,0)',\n    plot_bgcolor='rgba(0,0,0,0)',)\n\nfig_daily2 = make_subplots(rows= 4, cols=1,subplot_titles=('S\u00e3o Lu\u00eds', \n                                                   'Imperatriz','Regi\u00e3o Metropolitana','Demais Regi\u00f5es'\n                                                   ))\n# S\u00e3o Lu\u00eds\nfig_daily2.append_trace(go.Scatter(x=tabela_capital['date'], y=tabela_capital['new_deaths'],\n                             line_color='navy',fill = 'tonexty' ,name = \"\"),row=1, col=1)\n\n# Imperatriz                                       \nfig_daily2.append_trace(go.Scatter(x=tabela_itz['date'], y=tabela_itz['new_deaths'],\n                             line_color='steelblue',fill = 'tonexty',name = \"\"),row=2, col=1)\n\n# Regi\u00e3o Metropolitana\nfig_daily2.append_trace(go.Scatter(x=tabela_metropolitan['date'], y=tabela_metropolitan['new_deaths'],\n                             line_color='darkorange',fill = 'tonexty',name = \"\"),row=3, col=1)\n\n# Demais Regi\u00f5es\nfig_daily2.append_trace(go.Scatter(x=tabela_countryside['date'], y=tabela_countryside['new_deaths'],\n                             line_color='green',fill = 'tonexty' ,name = \"\"),row=4, col=1)\n\n\n# Layout\nfig_daily2.update_yaxes(showticklabels=True)\nfig_daily2.update_layout(width=700,height=1500,\n                   showlegend = False,yaxis={'categoryorder':'total ascending'},\n                  title_text=\"Novos \u00f3bitos confirmados at\u00e9 \" + last_date)\nfig_daily2['layout'].update(layout)\nfig_daily2.show()","f1ab68e3":"# Dataframe Deaths - Details\npath_deaths = '..\/input\/covid19-ma\/obitos_detalhes_covid19_ma.csv'\ndeaths = pd.read_csv(path_deaths, encoding ='latin1', sep = ';')","52158daa":"# Groupping by city and showing the total of cases confirmed and deaths.\ntabela2 = df_ma.sort_values(by=['last_available_confirmed'], ascending=False).copy()\n# Dropping duplicates and keeping the first\ntabela2 = tabela2.drop_duplicates(subset='city', keep='first')","79baba85":"df_ma['date'] = pd.to_datetime(df_ma['date'])\ndf_15 = df_ma.groupby('city').apply(lambda x: x.set_index('date').resample('1D').last())\n# Table with new confirmed cases in the last 15 days\ntabela_new_confirmed = df_15.groupby(level=0)['new_confirmed'].apply(\n    lambda x: x.shift().rolling(min_periods=1,window=15).sum()).reset_index(\n    name='new_confirmed_last_15_days')\ntabela_new_confirmed= tabela_new_confirmed.sort_values(by=['date',\n                                     'new_confirmed_last_15_days'], ascending=False).copy()\ntabela_new_confirmed= tabela_new_confirmed.drop_duplicates(subset='city',keep ='first')\n\n## Table with new deaths in the last 15 days\ntabela_new_deaths = df_15.groupby(level=0)['new_deaths'].apply(\n    lambda x: x.shift().rolling(min_periods=1,window=15).sum()).reset_index(\n    name='new_deaths_last_15_days')\ntabela_new_deaths= tabela_new_deaths.sort_values(by=['date',\n                                     'new_deaths_last_15_days'], ascending=False).copy()\ntabela_new_deaths= tabela_new_deaths.drop_duplicates(subset='city',keep ='first')\n#Merging the tables\ntabela_last_15_days = pd.merge(tabela_new_confirmed,tabela_new_deaths, on = ['city','date'], how ='left')\ntabela_last_15_days.head(10)","1c1c6b43":"# Adding deaths by 10k\ntabela2['last_available_deaths_per_10k_inhabitants'] = tabela2['last_available_deaths']\/(tabela2['estimated_population']\/10000)\ntabela2['last_available_confirmed_per_10k_inhabitants'] = tabela2['last_available_confirmed']\/(tabela2['estimated_population']\/10000) \ntabela2.head()","dd46bcc5":"layout = Layout(\n    paper_bgcolor='rgba(0,0,0,0)',\n    plot_bgcolor='rgba(0,0,0,0)',)\n\nfig3 = make_subplots(rows= 2, cols=1,subplot_titles=('Totais', \n                                                   'Por 10 mil habitantes'\n                                                   ))\n# Confirmed\ntabela2_by_confirmed = tabela2.sort_values(by = 'last_available_confirmed', ascending=False)\ntop10_confirmed = tabela2_by_confirmed.head(10)\nfig3.append_trace(go.Bar(name = 'Total',\n                         y=top10_confirmed['last_available_confirmed'], x=top10_confirmed['city'],\n                             marker_color='darkblue',text = top10_confirmed['last_available_confirmed']), \n                  row=1, col=1)\nfig3.update_traces(texttemplate='%{text:.0f}', textposition='auto')\nfig3.update_yaxes(showticklabels=False)\n\n# Confirmed by 10k\ntabela2_by_k = tabela2.sort_values(by = 'last_available_confirmed_per_10k_inhabitants', ascending=False)\ntop10_k = tabela2_by_k.head(10)                                       \nfig3.append_trace(go.Bar(name = 'Por 10 mil',\n                         y=top10_k['last_available_confirmed_per_10k_inhabitants'], x=top10_k['city'],\n                            marker_color='blue',text = top10_k['last_available_confirmed_per_10k_inhabitants']) ,\n                  row=2, col=1)\nfig3.update_yaxes(showticklabels=False)\nfig3.update_traces(texttemplate='%{text:.0f}', textposition='auto')\n\n# Layout\nfig3.update_layout(width=700,height=650,\n                   showlegend = False,yaxis={'categoryorder':'total ascending'},\n                  title_text=\"As cidades com mais casos confirmados at\u00e9 \" + last_date)\nfig3['layout'].update(layout)\nfig3.show()","fccb841a":"layout = Layout(\n    paper_bgcolor='rgba(0,0,0,0)',\n    plot_bgcolor='rgba(0,0,0,0)',)\n\nfig4 = make_subplots(rows= 2, cols=1,subplot_titles=('Totais', \n                                                   'Por 10 mil habitantes'\n                                                   ))\n# Deaths\ntabela2_by_deaths = tabela2.sort_values(by = 'last_available_deaths', ascending=False)\ntop10_deaths = tabela2_by_deaths.head(10)\nfig4.append_trace(go.Bar(name = 'Total',\n                         y=top10_deaths['last_available_deaths'], x=top10_deaths['city'],\n                             marker_color='darkred',text = top10_deaths['last_available_deaths']), \n                  row=1, col=1)\nfig4.update_traces(texttemplate='%{text:.0f}', textposition='auto')\nfig4.update_yaxes(showticklabels=False)\n\n# Deaths by 10k\ntabela2_deaths_by_k = tabela2.sort_values(by = 'last_available_deaths_per_10k_inhabitants', ascending=False)\ntop10_deaths_k = tabela2_deaths_by_k.head(10)                                       \nfig4.append_trace(go.Bar(name = 'Por 10 mil',\n                         y=top10_deaths_k['last_available_deaths_per_10k_inhabitants'], x=top10_deaths_k['city'],\n                            marker_color='red',text = top10_deaths_k['last_available_deaths_per_10k_inhabitants']) ,\n                  row=2, col=1)\nfig4.update_yaxes(showticklabels=False)\nfig4.update_traces(texttemplate='%{text:.0f}', textposition='auto')\n\n# Layout\nfig4.update_layout(width=700,\n    height=650,showlegend = False,yaxis={'categoryorder':'total ascending'},\n                  title_text=\"As cidades com mais \u00f3bitos at\u00e9 \" + last_date)\nfig4['layout'].update(layout)\nfig4.show()","093cd7f5":"# Loading the json file of Maranhao\npath2 = \"..\/input\/majson\/data\/MA.json\"\ndf_mapa = gpd.read_file(path2) \ndf_mapa.head()","a472065b":"# Transforming GEOCODIGO and city_ibge_code to str\ndf_mapa['GEOCODIGO'] = df_mapa['GEOCODIGO'].astype(str)\ntabela2['city_ibge_code'] = tabela2['city_ibge_code'].astype(str)","65760eac":"# Setting the indexes\ntabela2.set_index('city_ibge_code', inplace = True)\ndf_mapa.set_index('GEOCODIGO', inplace = True)","0c38755c":"# Renaming axes\ntabela2.rename_axis('code', inplace = True)\ndf_mapa.rename_axis('code', inplace = True)","e9f07cce":"# Merging the tables\ntabela3 = pd.merge(df_mapa, tabela2, on='code', how='left')","f57bbf09":"# Replacing NaN cells in the death_rate column\ntabela3.last_available_death_rate.fillna(0,inplace = True)\n# Replacing the other cells with \"No cases\"\ntabela3.fillna('Sem casos', inplace = True)\ntabela3.tail(3)","381d2a4f":"# Manipualting Gejson data\ngeosource = GeoJSONDataSource(geojson = tabela3.to_json())\nmerged_json = json.loads(tabela3.to_json())\njson_data = json.dumps(merged_json)\ngeosource = GeoJSONDataSource(geojson = json_data)","56a85122":"import json\nimport math\nfrom bokeh.io import show\nfrom bokeh.models import (CDSView, ColorBar, ColumnDataSource,\n                          CustomJS, CustomJSFilter, \n                          GeoJSONDataSource, HoverTool,\n                          LinearColorMapper,LogColorMapper, LogTicker)\nfrom bokeh.layouts import column, row, widgetbox\nfrom bokeh.palettes import magma\nfrom bokeh.plotting import figure\n\n# Pallete color\npalette = magma(256)\n\n# Inverting the pallete color\npalette = palette[::-1]\n\n# Setting Colormappper high value\n#high = int(math.ceil(tabelaslz['confirmados'].max()\/ 1000.0)) * 1000\n\n# Color mapping the values\ncolor_mapper = LogColorMapper(palette = palette, low = 1, \n                              high = 10000, nan_color = '#F8F8FF')\n\n# Custom tick labels\ntick_labels = {1:'1', 10:'10', 100:'100', 1000:'1000', 10000:'>10000'}\n\n# Colro bar creation\ncolor_bar = ColorBar(color_mapper = color_mapper, \n                     label_standoff = 8,\n                     width = 450, height = 15,\n                     border_line_color = None,\n                     location = (0,1), \n                     orientation = 'horizontal',\n                     ticker = LogTicker(),\n                     major_label_overrides = tick_labels\n                     )\n\n# Figure object\np = figure(title = 'Casos Confirmados '+ last_date, \n           plot_height = 550 ,\n           plot_width = 500, \n           toolbar_location = 'right',\n           tools = 'pan, wheel_zoom, box_zoom, reset')\np.xgrid.grid_line_color = None\np.ygrid.grid_line_color = None\np.xaxis.visible = False\np.yaxis.visible = False\n\n# Patch to render\nrender = p.patches('xs','ys', source = geosource,\n                   fill_color = {'field' :'last_available_confirmed',\n                                 'transform' : color_mapper},\n                   line_color = 'gray', \n                   line_width = 1, \n                   fill_alpha = 1)\n# Creating hover tool\np.add_tools(HoverTool(renderers = [render],\n                      tooltips = [('Cidade','@NOME'),\n                                  ('Popula\u00e7\u00e3o(IBGE, 2019)','@estimated_population{,}'),\n                                  ('Confirmados totais','@last_available_confirmed'),\n                                  ('Obitos totais','@last_available_deaths'),\n                                  ('Taxa de Letalidade','@last_available_death_rate{0.1f%}')], \n                                  formatters={'death_rate':'printf',\n                                              'estimated_population_2019': 'numeral'}\n                                 ))\n\np.add_layout(color_bar, 'above')\n\nshow(p)","4dbd4c96":"tests_path = '..\/input\/covid19-ma\/testes_covid19_ma.csv'\ntests = pd.read_csv(tests_path, encoding ='latin1', sep = ';',skipfooter = 3, \n                    engine = 'python',\n                    infer_datetime_format = True,\n                    dayfirst= True,\n                    thousands = '.',\n                    decimal = ','\n                   )\ntests.tail()","6b0bbe20":"# Dataframe COVID-19 - Brazil\npath3 = \"..\/input\/corona-virus-brazil\/brazil_covid19.csv\"\ndf3 = pd.read_csv(path3, encoding ='utf-8')\n# Rename columns\ndf3.rename(columns={'state':'uf'}, inplace = True)\ndf3.tail(5)","29204701":"# Dataframe with important information aboout the states\npath4 = \"..\/input\/brazilianstates\/states.csv\"\ndf_states = pd.read_csv(path4, encoding = 'utf-8')\ndf_states.tail(5)","ab537698":"# Lowering cases of columns\ndf_states = df_states.rename(str.lower, axis='columns')\n# Selecting columns we want\ndf_states = df_states[['uf', 'state','area', 'population',\n       'demographic density', 'cities count', 'gdp', 'gdp rate', 'poverty']]\ndf_states.columns","fb106bc3":"# Selecting Nordeste region where Maranhao is located\ndf_ne = df3.copy()\nrows_ne = df_ne[df_ne['region'] != 'Nordeste'].index\ndf_ne.drop(rows_ne, inplace = True)\nprint(df_ne.region.unique())","84cb759e":"# Confirmed cases and deaths\ntabela4 = df_ne.groupby(['date','uf'])[['cases','deaths']].agg('sum')\ntabela4 = tabela4.reset_index()","16d66d6e":"tabela4 = pd.merge(tabela4,df_states, on = 'uf', how ='left')\ntabela4.tail(3)","ec67e4e2":"# Removing zero rows in the column 'cases'\nzero_rows = tabela4[tabela4['cases'] == 0].index\ntabela4.drop(zero_rows, inplace = True)","978c8226":"# Adding death rate\ntabela4['death_rate'] = tabela4['deaths']\/tabela4['cases']\n# Adding cases per 100k inhabitants\ntabela4['cases_per_100k'] = tabela4['cases']\/(tabela4['population']\/100000)\n# Adding deaths per 100k inhabitants\ntabela4['deaths_per_100k'] = tabela4['deaths']\/(tabela4['population']\/100000)\ntabela4.tail()","c004cdf7":"# Subsets by state in the Nordeste region\nma = tabela4[tabela4['state']== 'Maranh\u00e3o']\nal = tabela4[tabela4['state']=='Alagoas']\nba = tabela4[tabela4['state']=='Bahia']\nce = tabela4[tabela4['state']=='Cear\u00e1']\npb = tabela4[tabela4['state']=='Para\u00edba']\npe = tabela4[tabela4['state']=='Pernambuco']\npi = tabela4[tabela4['state']=='Piau\u00ed']\nrn = tabela4[tabela4['state']=='Rio Grande do Norte']\nse = tabela4[tabela4['state']=='Sergipe']","34fa9436":"fig6 = go.Figure()\n##### TOTAL ######\n# Maranh\u00e3o\nfig6.add_trace(go.Scatter(x=ma['date'], y=ma['cases'] , \n                         line=dict(color='navy', width=3),\n                         name = 'MA'))\n# Alagoas\nfig6.add_trace(go.Scatter(x=al['date'], y=al['cases'] , \n                         line=dict(color='darksalmon', width=2,dash = 'dash'), \n                         name = 'AL'))\n# Bahia\nfig6.add_trace(go.Scatter(x=ba['date'], y=ba['cases'] , \n                         line=dict(color='darkred', width=2, dash = 'dash'), \n                         name = 'BA'))\n# Cear\u00e1\nfig6.add_trace(go.Scatter(x=ce['date'], y=ce['cases'] , \n                         line=dict(color='darkkhaki', width=2, dash = 'dash'), \n                         name = 'CE'))\n# Para\u00edba\nfig6.add_trace(go.Scatter(x=pb['date'], y=pb['cases'] , \n                         line=dict(color='darkorange', width=2, dash = 'dash'), \n                         name = 'PB'))\n# Pernambuco\nfig6.add_trace(go.Scatter(x=pe['date'], y=pe['cases'] , \n                         line=dict(color='steelblue', width=2, dash = 'dash'), \n                         name = 'PE'))\n# Piau\u00ed\nfig6.add_trace(go.Scatter(x=pi['date'], y=pi['cases'] , \n                         line=dict(color='darkgreen', width=2, dash = 'dash'), \n                         name = 'PI'))\n# Rio Grande do Norte\nfig6.add_trace(go.Scatter(x=rn['date'], y=rn['cases'] , \n                         line=dict(color='darkviolet', width=2, dash = 'dash'), \n                         name = 'RN'))\n# Sergipe\nfig6.add_trace(go.Scatter(x=se['date'], y=se['cases'] , \n                         line=dict(color='crimson', width=2, dash = 'dash'), \n                         name = 'SE'))\nfig6.update_layout(width=600,\n    height=500,\n    title={\n        'text': \"Casos confirmados totais\",\n        'y':0.9,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},\n    xaxis_title=\"Data\",\n    yaxis_title=\"Quantidade (Escala Logar\u00edtimca)\",\n    font=dict(\n        family=\"Arial, monospace\",\n        size=12,\n        color=\"black\"))\nfig6.update_traces(hovertemplate= None)\nfig6.update_layout(hovermode='x', yaxis_type=\"log\")\nfig6['layout'].update(layout)\nfig6.show()","083c9b9c":"##### Per 100k Inhabitants ######\nfig7 = go.Figure()\n# Maranh\u00e3o\nfig7.add_trace(go.Scatter(x=ma['date'], y=ma['cases_per_100k'] , \n                         line=dict(color='navy', width=3),\n                         name = 'MA'))\n# Alagoas\nfig7.add_trace(go.Scatter(x=al['date'], y=al['cases_per_100k'] , \n                         line=dict(color='darksalmon', width=2,dash = 'dash'), \n                         name = 'AL'))\n# Bahia\nfig7.add_trace(go.Scatter(x=ba['date'], y=ba['cases_per_100k'] , \n                         line=dict(color='darkred', width=2, dash = 'dash'), \n                         name = 'BA'))\n# Cear\u00e1\nfig7.add_trace(go.Scatter(x=ce['date'], y=ce['cases_per_100k'] , \n                         line=dict(color='darkkhaki', width=2, dash = 'dash'), \n                         name = 'CE'))\n# Para\u00edba\nfig7.add_trace(go.Scatter(x=pb['date'], y=pb['cases_per_100k'] , \n                         line=dict(color='darkorange', width=2, dash = 'dash'), \n                         name = 'PB'))\n# Pernambuco\nfig7.add_trace(go.Scatter(x=pe['date'], y=pe['cases_per_100k'] , \n                         line=dict(color='steelblue', width=2, dash = 'dash'), \n                         name = 'PE'))\n# Piau\u00ed\nfig7.add_trace(go.Scatter(x=pi['date'], y=pi['cases_per_100k'] , \n                         line=dict(color='darkgreen', width=2, dash = 'dash'), \n                         name = 'PI'))\n# Rio Grande do Norte\nfig7.add_trace(go.Scatter(x=rn['date'], y=rn['cases_per_100k'] , \n                         line=dict(color='darkviolet', width=2, dash = 'dash'), \n                         name = 'RN'))\n# Sergipe\nfig7.add_trace(go.Scatter(x=se['date'], y=se['cases_per_100k'] , \n                         line=dict(color='crimson', width=2, dash = 'dash'), \n                         name = 'SE'))\nfig7.update_layout(width=600,\n    height=500,\n    title={\n        'text': \"Casos confirmados por 100 mil habitantes\",\n        'y':0.9,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},\n    xaxis_title=\"Data\",\n    yaxis_title=\"Quantidade\",\n    font=dict(\n        family=\"Arial, monospace\",\n        size=12,\n        color=\"black\"))\nfig7.update_traces(hovertemplate= None)\nfig7.update_layout(hovermode='x')\nfig7['layout'].update(layout)\nfig7.show()","e378f725":"fig8 = go.Figure()\n# Maranh\u00e3o\nfig8.add_trace(go.Scatter(x=ma['date'], y=ma['deaths'] , \n                         line=dict(color='navy', width=3),\n                         name = 'MA'))\n# Alagoas\nfig8.add_trace(go.Scatter(x=al['date'], y=al['deaths'] , \n                         line=dict(color='darksalmon', width=2,dash = 'dash'), \n                         name = 'AL'))\n# Bahia\nfig8.add_trace(go.Scatter(x=ba['date'], y=ba['deaths'] , \n                         line=dict(color='darkred', width=2, dash = 'dash'), \n                         name = 'BA'))\n# Cear\u00e1\nfig8.add_trace(go.Scatter(x=ce['date'], y=ce['deaths'] , \n                         line=dict(color='darkkhaki', width=2, dash = 'dash'), \n                         name = 'CE'))\n# Para\u00edba\nfig8.add_trace(go.Scatter(x=pb['date'], y=pb['deaths'] , \n                         line=dict(color='darkorange', width=2, dash = 'dash'), \n                         name = 'PB'))\n# Pernambuco\nfig8.add_trace(go.Scatter(x=pe['date'], y=pe['deaths'] , \n                         line=dict(color='steelblue', width=2, dash = 'dash'), \n                         name = 'PE'))\n# Piau\u00ed\nfig8.add_trace(go.Scatter(x=pi['date'], y=pi['deaths'] , \n                         line=dict(color='darkgreen', width=2, dash = 'dash'), \n                         name = 'PI'))\n# Rio Grande do Norte\nfig8.add_trace(go.Scatter(x=rn['date'], y=rn['deaths'] , \n                         line=dict(color='darkviolet', width=2, dash = 'dash'), \n                         name = 'RN'))\n# Sergipe\nfig8.add_trace(go.Scatter(x=se['date'], y=se['deaths'] , \n                         line=dict(color='crimson', width=2, dash = 'dash'), \n                         name = 'SE'))\nfig8.update_layout(width=600,\n    height=500,\n    title={\n        'text': \"\u00d3bitos totais\",\n        'y':0.9,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},\n    xaxis_title=\"Data\",\n    yaxis_title=\"Quantidade\",\n    font=dict(\n        family=\"Arial, monospace\",\n        size=12,\n        color=\"black\"))\nfig8.update_traces(hovertemplate= None)\nfig8.update_layout(hovermode='x')\nfig8['layout'].update(layout)\nfig8.show()","e405cbd0":"#Layout\nlayout = Layout(\n    paper_bgcolor='rgba(0,0,0,0)',\n    plot_bgcolor='rgba(0,0,0,0)',)\nfig9 = go.Figure()\n# Maranh\u00e3o\nfig9.add_trace(go.Scatter(x=ma['date'], y=ma['deaths_per_100k'] , \n                         line=dict(color='navy', width=3),\n                         name = 'MA'))\n# Alagoas\nfig9.add_trace(go.Scatter(x=al['date'], y=al['deaths_per_100k'] , \n                         line=dict(color='darksalmon', width=2,dash = 'dash'), \n                         name = 'AL'))\n# Bahia\nfig9.add_trace(go.Scatter(x=ba['date'], y=ba['deaths_per_100k'] , \n                         line=dict(color='darkred', width=2, dash = 'dash'), \n                         name = 'BA'))\n# Cear\u00e1\nfig9.add_trace(go.Scatter(x=ce['date'], y=ce['deaths_per_100k'] , \n                         line=dict(color='darkkhaki', width=2, dash = 'dash'), \n                         name = 'CE'))\n# Para\u00edba\nfig9.add_trace(go.Scatter(x=pb['date'], y=pb['deaths_per_100k'] , \n                         line=dict(color='darkorange', width=2, dash = 'dash'), \n                         name = 'PB'))\n# Pernambuco\nfig9.add_trace(go.Scatter(x=pe['date'], y=pe['deaths_per_100k'] , \n                         line=dict(color='steelblue', width=2, dash = 'dash'), \n                         name = 'PE'))\n# Piau\u00ed\nfig9.add_trace(go.Scatter(x=pi['date'], y=pi['deaths_per_100k'] , \n                         line=dict(color='darkgreen', width=2, dash = 'dash'), \n                         name = 'PI'))\n# Rio Grande do Norte\nfig9.add_trace(go.Scatter(x=rn['date'], y=rn['deaths_per_100k'] , \n                         line=dict(color='darkviolet', width=2, dash = 'dash'), \n                         name = 'RN'))\n# Sergipe\nfig9.add_trace(go.Scatter(x=se['date'], y=se['deaths_per_100k'] , \n                         line=dict(color='crimson', width=2, dash = 'dash'), \n                         name = 'SE'))\nfig9.update_layout(width=600,\n    height=500,\n    title={\n        'text': \"\u00d3bitos por 100 mil habitantes \",\n        'y':0.9,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},\n    xaxis_title=\"Data\",\n    yaxis_title=\"Quantidade\",\n    font=dict(\n        family=\"Arial, monospace\",\n        size=12,\n        color=\"black\"))\nfig9.update_traces(hovertemplate= None)\nfig9.update_layout(hovermode='x')\nfig9['layout'].update(layout)\nfig9.show()","f182e3d4":"#Layout\nlayout = Layout(\n    paper_bgcolor='rgba(0,0,0,0)',\n    plot_bgcolor='rgba(0,0,0,0)',)\nfig10 = go.Figure()\n# Maranh\u00e3o\nfig10.add_trace(go.Scatter(x=ma['date'], y=ma['death_rate'] , \n                         line=dict(color='navy', width=3),\n                         name = 'MA'))\n# Alagoas\nfig10.add_trace(go.Scatter(x=al['date'], y=al['death_rate'] , \n                         line=dict(color='darksalmon', width=2,dash = 'dash'), \n                         name = 'AL'))\n# Bahia\nfig10.add_trace(go.Scatter(x=ba['date'], y=ba['death_rate'] , \n                         line=dict(color='darkred', width=2, dash = 'dash'), \n                         name = 'BA'))\n# Cear\u00e1\nfig10.add_trace(go.Scatter(x=ce['date'], y=ce['death_rate'] , \n                         line=dict(color='darkkhaki', width=2, dash = 'dash'), \n                         name = 'CE'))\n# Para\u00edba\nfig10.add_trace(go.Scatter(x=pb['date'], y=pb['death_rate'] , \n                         line=dict(color='darkorange', width=2, dash = 'dash'), \n                         name = 'PB'))\n# Pernambuco\nfig10.add_trace(go.Scatter(x=pe['date'], y=pe['death_rate'] , \n                         line=dict(color='steelblue', width=2, dash = 'dash'), \n                         name = 'PE'))\n# Piau\u00ed\nfig10.add_trace(go.Scatter(x=pi['date'], y=pi['death_rate'] , \n                         line=dict(color='darkgreen', width=2, dash = 'dash'), \n                         name = 'PI'))\n# Rio Grande do Norte\nfig10.add_trace(go.Scatter(x=rn['date'], y=rn['death_rate'] , \n                         line=dict(color='darkviolet', width=2, dash = 'dash'), \n                         name = 'RN'))\n# Sergipe\nfig10.add_trace(go.Scatter(x=se['date'], y=se['death_rate'] , \n                         line=dict(color='crimson', width=2, dash = 'dash'), \n                         name = 'SE'))\nfig10.update_layout(width=600,\n    height=500,\n    title={\n        'text': \"Taxa de Letalidade\",\n        'y':0.9,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},\n    xaxis_title=\"Data\",\n    yaxis_title=\"Taxa\",\n    yaxis_tickformat = '.1%',\n    font=dict(\n        family=\"Arial, monospace\",\n        size=12,\n        color=\"black\"))\nfig10.update_traces(hovertemplate= None)\nfig10.update_layout(hovermode='x')\nfig10['layout'].update(layout)\nfig10.show()","9ce74117":"# Creating a table for all brazilian states\ndf_br = df3.copy()\n# Confirmed cases and deaths\ntabela_br = df_br.groupby(['date','uf'])[['cases','deaths']].agg('sum')\ntabela_br = tabela_br.reset_index()","bd1ae96f":"# Merging tables\ntabela_br = pd.merge(tabela_br,df_states, on = 'uf', how ='left')\ntabela_br.tail(3)","013ad5b9":"# Removing zero rows in the column 'cases'\nzero_rows = tabela_br[tabela_br['cases'] == 0].index\ntabela_br.drop(zero_rows, inplace = True)","445ed487":"# Adding death rate\ntabela_br['death_rate'] = tabela_br['deaths']\/tabela_br['cases']\n# Adding cases per 100k inhabitants\ntabela_br['cases_per_100k'] = tabela_br['cases']\/(tabela_br['population']\/100000)\n# Adding deaths per 100k inhabitants\ntabela_br['deaths_per_100k'] = tabela_br['deaths']\/(tabela_br['population']\/100000)\ntabela_br.tail()","aa294146":"# Groupping by cases\ntabela_states = tabela_br.sort_values(by=['cases'], ascending=False).copy()\n# Dropping duplicates and keeping the first\ntabela_states = tabela_states.drop_duplicates(subset='uf', keep='first')","f55f7718":"# Editing the columns names\ntabela_states = tabela_states.rename(columns= {'demographic density':'demographic_density',\n                               'cities count':'cities_count',\n                             'gdp rate':'gdp_rate'})\n# Correlation matrix\ncorr = tabela_states.corr()\ncorr.style.background_gradient(cmap='coolwarm').set_precision(2)","56fdc366":"figx = px.scatter(tabela_states, x= 'cases',\n                    y= 'deaths',\n                    color= \"state\", hover_name=\"uf\",\n                    hover_data=[\"cases\",\"deaths\",\"death_rate\"],\n                    color_continuous_scale=px.colors.sequential.Plasma,\n                    title='Covid-19 Brasil: Casos confirmados X \u00d3bitos' ,\n                    size = 'population',\n                    width = 600,\n                    height =700,text = tabela_states['uf'],\n                    \n                    )\n\nfigx.update_traces(texttemplate='%{text}', textposition='top center')\nfigx.update_coloraxes(colorscale=\"hot\")\nfigx.update(layout_coloraxis_showscale=False)\nfigx.update_yaxes(title_text=\"\u00d3bitos (Escala Logar\u00edtmica)\", )\nfigx.update_xaxes(title_text=\"Casos confirmados (Escala Logar\u00edtmica)\", )\nfigx.update_layout(showlegend = False,yaxis_type=\"log\", xaxis_type = 'log')\nfigx.show()","35469b7e":"figy = px.scatter(tabela_states, x= 'cases_per_100k',\n                    y= 'deaths_per_100k',\n                    color= \"state\", hover_name=\"uf\",\n                    hover_data=[\"cases\",\"deaths\",\"death_rate\"],\n                    color_continuous_scale=px.colors.sequential.Plasma,\n                    title='Casos confirmados X \u00d3bitos - por 100 mil habitantes' ,\n                    size = 'population',\n                    width = 600,\n                    height =600,text = tabela_states['uf'],\n                    \n                    )\n\nfigy.update_traces(texttemplate='%{text}', textposition='bottom center')\nfigy.update_coloraxes(colorscale=\"hot\")\nfigy.update(layout_coloraxis_showscale=False)\nfigy.update_yaxes(title_text=\"\u00d3bitos por 100 mil habitantes\", )\nfigy.update_xaxes(title_text=\"Casos confirmados por 100 mil habitantes\", )\nfigy.update_layout(showlegend = False)\nfigy.show()","1f1b5166":"# Removing Maranhao from the dataframe\nrows_ma = df3[df3['uf'] == 'MA'].index\ndf3.drop(rows_ma, inplace = True)\nprint(df3.uf.unique())","cff72900":"# Confirmed cases and deaths\ntabela5 = df3.groupby(['date'])[['cases','deaths']].agg('sum')\ntabela5.tail(3)","2c776cc5":"# Adding death rate\ntabela5['death_rate'] = tabela5['deaths']\/tabela5['cases']\ntabela5.fillna(0,inplace = True)\ntabela5 = tabela5.reset_index()\ntabela5.tail(3)","471a324d":"#Layout\nlayout = Layout(\n    paper_bgcolor='rgba(0,0,0,0)',\n    plot_bgcolor='rgba(0,0,0,0)',)\nfig11 = go.Figure()\n# Maranh\u00e3o\nfig11.add_trace(go.Bar(x=ma['date'], y=ma['death_rate'], \n                          marker_color='navy',\n                         name = 'MA'))\n# Brasil\nfig11.add_trace(go.Bar(x=tabela5['date'] , y=tabela5['death_rate'],\n                    marker_color ='green',\n                         name ='BR'))\n\nfig11.update_layout(width=600,\n    height=500,\n    title={\n        'text': \"Letalidade: Demais estados X Maranh\u00e3o\",\n        'y':0.9,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},\n    xaxis_title=\"Data\",\n    yaxis_title=\"Taxa de letalidade\",\n    yaxis_tickformat = '.1%',\n    font=dict(\n        family=\"Arial, monospace\",\n        size=12,\n        color=\"black\"))\nfig11.update_traces(hovertemplate= None)\nfig11.update_layout(hovermode='x')\nfig11.show()","335ce8cc":"**Firstly, we will divide the state in three regions: Capital, Countryside and the Metropolitan region, the last consists of the cities of Raposa, Pa\u00e7o do Lumiar and S\u00e3o Jos\u00e9  de Ribamar.**\n* Creating Imperatriz dataset to look how covid-19 is acting in this city specifically since it is the second biggest city in number of inhabitants in Maranhao.","144881ed":"## How the cases in Maranhao are on a regional and national basis?","b61b4d34":"* While in other states the death rate has increased substantially in the first month, in Maranhao the death rate has fluctuated. \n* The death rate in other states of Brazil has been decreasing since May 12th.\n* The death rate in Maranh\u00e3o has reachead a plateau around 2.3%.","14fc0496":"### Dataframe Maranhao","21263c86":"**This notebook will be updated and improved weekly, so you are invited to come back whenever you want**\n\n**If you liked this notebook, please upvote so it will inspire me to keep doing more analysis, and if you want to share some notebooks related to Covid-19 or whatever you are working on, use the comment section, I will be glad to see.**\n\n## Thank you! Stay home, stay safe.","a15c356d":"![Nordeste](http:\/\/2.bp.blogspot.com\/-DXKo_6Loaik\/TV3uzGbaNfI\/AAAAAAAAArE\/qq9NSbP-kl8\/s1600\/mapa_nordeste1.jpg)","fda3c096":"## Geographical analysis","61c037e8":"# Data analysis","851f40ee":"### How the cases are spread across the state?","2c36f45b":"### Correlation Matrix\n* Let's see if there is any correlation among the variables","7e803163":"* The death rate in Maranh\u00e3o has fluctuated in the beginning, then reaching a peak of 6.7% on April, 14th;\n* At the moment, MA has the lowest death rate in the region(2.3%).","bfeaf121":"## Death rate comparison - National","9b755321":"## Which period is the dataframe refered to?","abc06cc8":"* The number of deaths in Maranhao was increasing on a faster rate compared to most of the states in the first three months, now the cases in Alagoas,Rio Grande do Norte and Sergipe are increasing considerably.\n* At the moment, MA has the 4th highest number of deaths in the region, if we consider deaths per 100k inhabitants MA has the 2nd lowest number.","68ccd04d":"## Deaths comparison - Regional","cc965c5c":"## Death rate comparison - Regional","50605126":"* The number of cases confirmed in Maranhao has been increasing on a slower rate compared to other states in the last few weeks;\n* At the moment, MA has the 3rd highest number of total cases in the region and it is the 6th state in number of cases per 100k inhabitants","b56ddc1c":"* The correlation table shows that population correlates highly with cases and deaths (0.96 and 0.94, respectively);\n* Therefore, let's make a scatter plot showing this correlation.","d04ec777":"## Covid-19 Brazilian states: Confirmed cases X Deaths","9e1e57df":"# Conclusion\n* This notebook has shown how Covid-19 in Maranhao has been acting, the capital Sao Luis has been the epicenter in the  state, being by far the city with most cases an deaths right now;\n* The number of cases in the countryside of Maranhao has been increasing on a faster rate in the last few weeks which can be noticed by the confirmed cases per 10k inhabitants in several cities being above the capital;\n* When compared to other states in Nordeste, Maranhao is on the top 5 states in the region regarding total confirmed cases and total deaths, having a relatively low death rate though (2.2%).\n* On a national basis Maranhao is the 11th state with most deaths so far.","4df38708":"### Inputs","33c12796":"[GeoJson data](https:\/\/github.com\/luizpedone\/municipal-brazilian-geodata)\nLicense: MIT License\n\n[Statiscal data about Brazilian states - by Thiago Bodruk](https:\/\/www.kaggle.com\/thiagobodruk\/brazilianstates#states.csv)\n\n[Covid-19 - Kaggle - by Raphael Fontes](https:\/\/www.kaggle.com\/unanimad\/corona-virus-brazil)\n\n[Covid-19 - Brasil by brasil.io](https:\/\/brasil.io\/dataset\/covid19\/caso\/)* \n\n\n\n*Fonte original: Secretarias de Sa\u00fade estaduais\n\n*Libertado por: \u00c1lvaro Justen e dezenas de colaboradores\n\n*Licen\u00e7a: Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)\n","fb0f5e84":"## Confirmed cases comparison - Regional","3f3e57ff":"### The cities with the most deaths in the state","0cdbccdf":"### New cases per region","968e641a":"# Links","534c2085":"### Total confirmed cases","ca9721b0":"### Total deaths","726c68a9":"### Confirmed cases per 100k inhabitants","ac85e85c":"### Total deaths per region","221d033b":"# Overview: Covid-19 analysis in the brazilian state, Maranhao\n\nThe following notebook is an attempt to analyse the cases of COVID-19 in the brazilian state, Maranhao, the data is available in [Covid-19 - Brazil by brasil.io](https:\/\/brasil.io\/dataset\/covid19\/caso\/) and [Covid-19 - by Raphael Fontes](https:\/\/www.kaggle.com\/unanimad\/corona-virus-brazil). In addition, it is an opportunity to practice my recent knowledge in Data Analysis. If ou have any suggestion, please do not hesitate to comment in the comment section.\n![Covid-19](https:\/\/newslab.com.br\/wp-content\/uploads\/2020\/02\/750x450_covid.jpg) \n\n## Methodology\n* Firstly, I extracted the data provided, exploring and organizing the data in a way to make useful for creating the plots;\n* Then I showed how the cases, deaths and death rates are across the state;\n* Finally, I compared Maranhao to other states on a regional and national basis.\n\n![MA](http:\/\/4.bp.blogspot.com\/-Sj5s_wZfd54\/TvUPE6W95II\/AAAAAAAAL_4\/I0-OIe_1puc\/s400\/mapa_localizacao_maranhao_no_Brasil.png)\n\nThis notebook was inspired by the notebook made by Ello\u00e1 B.Guedes.\n\nCheck it out: [Overview - Brazil](https:\/\/www.kaggle.com\/elloaguedes\/panorama-do-covid-19-no-brasil?rvi=1)\n\n**Disclaimer: This notebook does not intend to be an accurate analysis that tries to reproduce the complexity of reality. The information in this notebook provides an approach to better understand the situation through data visualization.**\n\n","29235b7c":"## Covid-19 Brazilian states: Confirmed cases X Deaths - Per 100k inhabitants","d0e6c446":"# Data cleaning & organization","2982a006":"### The cities with the most confirmed cases  in the state","0f562512":"### How is Maranhao on a national basis regarding confirmed cases and deaths?","4d90c873":"## National Analysis","ae6c8f4c":"### Regional Analysis","151086f5":"### Deaths per 100k inhabitants","0c991921":"### New deaths per region","68cc47f4":"### Total confirmed cases per region"}}