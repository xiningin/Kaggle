{"cell_type":{"d434609a":"code","9db32460":"code","e739074d":"code","360cc10b":"code","a385b4f7":"code","8e300f66":"code","0119b637":"code","7932874f":"code","c5d0dbc8":"code","0eafe2ac":"code","dc8c595e":"code","96a47f74":"code","d5ec4dc0":"code","557bb72a":"code","b520a00a":"code","f999a9cb":"markdown","6e202ebe":"markdown","3648251b":"markdown","0e542401":"markdown","c7a98367":"markdown","b53ae6ea":"markdown","8ef0de2a":"markdown","f86a82d2":"markdown","732d9e3c":"markdown","ec857deb":"markdown","5d2067a8":"markdown"},"source":{"d434609a":"import os\nimport shutil\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nfrom tensorflow import keras\nfrom keras import layers\nfrom keras import models\nfrom keras import optimizers\nfrom keras.layers import Input, Dense, Activation, Flatten, Conv2D\nfrom keras.layers import MaxPooling2D, Dropout, ZeroPadding2D, BatchNormalization\nfrom keras.models import Model, load_model\nfrom keras.preprocessing.image import ImageDataGenerator, image\ntf.test.gpu_device_name()","9db32460":"\noriginal_dataset_dir = '\/content\/drive\/My Drive\/Colab Notebooks\/Chest_Xray\/DATA' \n\nbase_dir = '\/content\/Chest_Xray'\nos.mkdir(base_dir)\n\ntrain_dir = os.path.join(base_dir, 'train')\nos.mkdir(train_dir)\n\ntest_dir = os.path.join(base_dir, 'test') \nos.mkdir(test_dir)\n\ntrain_Normal_dir = os.path.join(train_dir, 'Normal')\nos.mkdir(train_Normal_dir)\n\ntrain_Sick_dir = os.path.join(train_dir, 'Sick')\nos.mkdir(train_Sick_dir)\n\ntest_Normal_dir = os.path.join(test_dir, 'Normal')\nos.mkdir(test_Normal_dir)\n\ntest_Sick_dir = os.path.join(test_dir, 'Sick')\nos.mkdir(test_Sick_dir)\n\n\nfnames = ['Normal.{}.jpeg'.format(i) for i in range(1341)]\nfor fname in fnames:\n  src = os.path.join(original_dataset_dir, fname)\n  dst = os.path.join(train_Normal_dir, fname)\n  shutil.copyfile(src, dst)\n\n\nfnames = ['Normal.{}.jpeg'.format(i) for i in range(1341, 1574)]\nfor fname in fnames:\n  src = os.path.join(original_dataset_dir, fname)\n  dst = os.path.join(test_Normal_dir, fname)\n  shutil.copyfile(src, dst)\n\n  fnames = ['Sick.{}.jpeg'.format(i) for i in range(3874)]\nfor fname in fnames:\n  src = os.path.join(original_dataset_dir, fname)\n  dst = os.path.join(train_Sick_dir, fname)\n  shutil.copyfile(src, dst)\n\nfnames = ['Sick.{}.jpeg'.format(i) for i in range(3874, 4264)]\nfor fname in fnames:\n  src = os.path.join(original_dataset_dir, fname)\n  dst = os.path.join(test_Sick_dir, fname)\n  shutil.copyfile(src, dst)\n\n","e739074d":"print('total training Normal images:', len(os.listdir(train_Normal_dir)))\nprint('total training Sick images:', len(os.listdir(train_Sick_dir)))\nprint('total test Normal images:', len(os.listdir(test_Normal_dir)))\nprint('total test Sick images:', len(os.listdir(test_Sick_dir)))","360cc10b":"train_datagen = ImageDataGenerator(rescale = 1.\/255)\ntest_datagen = ImageDataGenerator(rescale = 1.\/255)\n\ntrain_generator = train_datagen.flow_from_directory(\n    train_dir,\n    class_mode = 'binary',\n    color_mode=\"grayscale\",\n    target_size = (200, 200),\n    batch_size = 16)\n\ntest_generator = test_datagen.flow_from_directory(\n    test_dir,\n    class_mode = 'binary',\n    color_mode=\"grayscale\",\n    target_size = (200, 200),\n    batch_size = 16)\n\n\n","a385b4f7":"for data_batch, labels_batch in train_generator:\n  print('data batch shape:', data_batch.shape)\n  print('labels batch shape:', labels_batch.shape)\n  break","8e300f66":"def xray(input_shape):\n\n  #Placeholding for the X_input.\n  X_input = Input(input_shape)\n    \n  X = X_input\n\n  # (Conv2d + BN + Dropout + MaxPooling) X 10\n  X = Conv2D(32, (3, 3), input_shape=(200, 200, 1), padding = \"same\")(X)\n  X = BatchNormalization(axis = -1)(X)\n  X = Activation('relu')(X)\n  X = Dropout(0.6)(X)\n  X = MaxPooling2D((2, 2))(X)\n\n  X = Conv2D(32, (3, 3), padding = \"same\")(X)\n  X = BatchNormalization(axis = -1)(X)\n  X = Activation('relu')(X)\n  X = Dropout(0.6)(X)\n  X = MaxPooling2D((2, 2))(X)\n\n  X = Conv2D(64, (3, 3), padding = \"same\")(X)\n  X = BatchNormalization(axis = -1)(X)\n  X = Activation('relu')(X)\n  X = Dropout(0.6)(X)\n  X = MaxPooling2D((2, 2))(X)\n\n  X = Conv2D(64, (3, 3), padding = \"same\")(X)\n  X = BatchNormalization(axis = -1)(X)\n  X = Activation('relu')(X)\n  X = Dropout(0.6)(X)\n  X = MaxPooling2D((2, 2))(X)\n\n  X = Conv2D(128, (3, 3), padding = \"same\")(X)\n  X = BatchNormalization(axis = -1)(X)\n  X = Activation('relu')(X)\n  X = Dropout(0.6)(X)\n  X = MaxPooling2D((2, 2))(X) \n\n  \n  X = Conv2D(128, (3, 3), padding = \"same\")(X)\n  X = BatchNormalization(axis = -1)(X)\n  X = Activation('relu')(X)\n  X = Dropout(0.5)(X)\n  X = MaxPooling2D((2, 2), padding = \"same\")(X)\n  \n  X = Conv2D(256, (3, 3), padding = \"same\")(X)\n  X = BatchNormalization(axis = -1)(X)\n  X = Activation('relu')(X)\n  X = Dropout(0.5)(X)\n  X = MaxPooling2D((2, 2), padding = \"same\")(X)\n\n  X = Conv2D(256, (3, 3), padding = \"same\")(X)\n  X = BatchNormalization(axis = -1)(X)\n  X = Activation('relu')(X)\n  X = Dropout(0.5)(X)\n  X = MaxPooling2D((2, 2), padding = \"same\")(X)\n  \n  X = Conv2D(512, (3, 3), padding = \"same\")(X)\n  X = BatchNormalization(axis = -1)(X)\n  X = Activation('relu')(X)\n  X = Dropout(0.5)(X)\n  X = MaxPooling2D((2, 2), padding = \"same\")(X)  \n\n  X = Conv2D(512, (3, 3), padding = \"same\")(X)\n  X = BatchNormalization(axis = -1)(X)\n  X = Activation('relu')(X)\n  X = Dropout(0.5)(X)\n  X = MaxPooling2D((2, 2), padding = \"same\")(X)\n  \n  X = Flatten()(X)\n\n  # FC + Dropout X2\n  X = Dense(16, activation = 'relu')(X)\n  X = Dropout(0.4)(X)\n\n  X = Dense(32, activation = 'relu')(X)\n  X = Dropout(0.3)(X)\n\n  #Sigmoid activation\n  X = Dense(1, activation = 'sigmoid')(X)\n\n  #Model creation\n  model = Model(inputs = X_input, outputs = X, name='xray')\n\n  return model","0119b637":"Xray = xray(input_shape = (200, 200, 1)) #Assigning the model","7932874f":"Xray.compile(loss = 'binary_crossentropy', \n              optimizer = 'Adam',\n              metrics = ['acc']) ","c5d0dbc8":"STEP_SIZE_TRAIN=train_generator.n\/\/train_generator.batch_size #Determining the step size == (number of samples)\/(batch size)\n\nXray.fit_generator(generator=train_generator,                # Model training\n                    steps_per_epoch=STEP_SIZE_TRAIN,\n                    epochs = 30)","0eafe2ac":"STEP_SIZE_TEST = test_generator.n\/\/test_generator.batch_size #Determining the step size == (number of samples)\/(batch size)\n\ntest_generator.reset()\n\npred = Xray.predict_generator(test_generator,        # Model Evaluation\nsteps=STEP_SIZE_TEST,\nverbose=1)\n\nprint (\"Loss = \" + str(pred[0]))\nprint (\"Test Accuracy = \" + str(pred[1]))","dc8c595e":"Xray.save('Xray,h5') #Saving the weights of the model as an h5 file.","96a47f74":"Xray = load_model('') # Only if there is already a trained model !","d5ec4dc0":"Xray.summary() ","557bb72a":"from google.colab import files        #Test your own images ! \nuploaded = files.upload()             #Upload an image from your dir.\n\nfor name, data in uploaded.items():\n  with open(name, 'wb') as f:\n    f.write(data)\n    print ('saved file', name)","b520a00a":"from matplotlib.pyplot import imshow\nfrom keras.applications.imagenet_utils import preprocess_input\n\nimg_path = '\/content\/' + name          #Uncomment if you want to use the image uploded by the previous cell.\n#img_path = '\/content\/' + '350' + '.jpg' #Uncomment if you want to choose the image manually.\n\nimg = image.load_img(img_path, color_mode='grayscale', target_size=(200, 200))\n\nimshow(img)\n\nx = image.img_to_array(img)\nx = np.expand_dims(x, axis=0)\n\nif Xray.predict(x) == 0 :\n  print(\"The patient is Pneumonia negtive\")\nelse :\n  print(\"The patient is Pneumonia positive !\")","f999a9cb":"# Data Preparing","6e202ebe":"![![Screen%20Shot%202020-06-12%20at%2006.44.33.png](attachment:Screen%20Shot%202020-06-12%20at%2006.44.33.png)]","3648251b":"# Model Creation and Assigning.","0e542401":"# Test Your Own Images :)","c7a98367":"# Model Saving, Loading, and Summrizing.","b53ae6ea":"![Screen%20Shot%202020-06-12%20at%2006.45.03.png](attachment:Screen%20Shot%202020-06-12%20at%2006.45.03.png)","8ef0de2a":"Diagnosing Model For Pneumonia Detection From Xray Images Using Keras With 99.9% Accuracy.\n\nI have used my knowledge from Coursera courses to implement a Binary Classifier for Pneumonia detection I mainly used Keras library to code my model.\nMy primary concerns while I was working on the project is to implement the classifier with very high accuracy and at the same time keeping the model size small. \nI used Kaggle Dataset (Chest X-Ray Images (Pneumonia)). My hope is that these models can help to improve the diagonsing process :) \n\n\nModel characteristics:\n\u2022\tTest Accuracy: 99.989784%\n\u2022\tModel Size: 56.9 MB.\n\u2022\tTraining Optimizer: Adam.\n\u2022\tSize of The Training Image: 5215 images (for both categories)\n\u2022\tTraining Time: 23 minutes (Using Colab GPU)\n\u2022\tNumber of Parameters: 4,728,369\n\nI am uploading the trained model (,h5) so that you can use the load command to directly use the model without training.\n\n\nAcknowledgements\nData: https:\/\/data.mendeley.com\/datasets\/rscbjbr9sj\/2\n\nLicense: CC BY 4.0\n\nCitation: http:\/\/www.cell.com\/cell\/fulltext\/S0092-8674(18)30154-5\n\n ","f86a82d2":"![Screen%20Shot%202020-06-12%20at%2006.25.25.png](attachment:Screen%20Shot%202020-06-12%20at%2006.25.25.png)","732d9e3c":"![Screen%20Shot%202020-06-12%20at%2006.44.45.png](attachment:Screen%20Shot%202020-06-12%20at%2006.44.45.png)","ec857deb":"# Model Compileing, Training, and Testing","5d2067a8":"![Screen%20Shot%202020-06-12%20at%2006.44.56.png](attachment:Screen%20Shot%202020-06-12%20at%2006.44.56.png)"}}