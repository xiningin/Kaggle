{"cell_type":{"4d86346c":"code","8af26d7e":"code","95582d12":"code","daafd11d":"code","0bda2a18":"code","db845dc0":"code","1202b1cf":"code","91381cfb":"code","6a3a14b0":"code","9b7a6df3":"code","563e56a0":"code","64c21b93":"code","f98ce937":"code","427714e0":"code","c13c2bfe":"code","c1c3f441":"code","a74bcb55":"code","0db7bcbe":"code","a1e173a5":"code","e246df1a":"code","3a09b1c7":"code","f3ed867a":"code","7ccfc5dd":"code","d2511549":"code","5dbb8d5f":"code","5d971d75":"code","ff4c6d75":"code","e500534c":"code","62dcaca7":"code","ab327ef6":"code","b5e45e42":"code","bce4283f":"code","ed89dd5e":"code","16eca66d":"code","85313539":"code","fca9be6a":"code","34c3c76d":"code","7e58e357":"code","29024b99":"code","62a424cf":"code","06bd3290":"code","6114288d":"code","34660fda":"code","e0e63518":"code","a4b2a6fe":"code","67d935a4":"code","98005af2":"markdown","29939119":"markdown","0dac8215":"markdown","7be667a4":"markdown","23f9f264":"markdown","8ed03e13":"markdown","ea101cfa":"markdown","f9707ce7":"markdown","d87e5b3b":"markdown","32f66ffc":"markdown","989d093c":"markdown","564697ff":"markdown","6b398da6":"markdown","bbc73a37":"markdown","27fa5f17":"markdown","b1bfedd2":"markdown","ce10b877":"markdown","941cfa78":"markdown","2377121b":"markdown","5f68d6c3":"markdown","dfdf013a":"markdown","45446373":"markdown","cd3c1133":"markdown","7e33d1ab":"markdown","766f1019":"markdown","f357bb14":"markdown","28709cb3":"markdown","66a18282":"markdown","7b2eddc2":"markdown","e670c5e5":"markdown"},"source":{"4d86346c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8af26d7e":"import pandas as pd\nimport numpy as np\nimport re\nfrom matplotlib import pyplot as plt","95582d12":"df = pd.read_csv(\"..\/input\/fuel-economy\/database.csv\", header=0)\ndf.head()","daafd11d":"df.columns","0bda2a18":"total = 0\ndef sum_(x):\n    global total\n    total += x\n    return x\n\ndef percentage(x):\n    return (\"%.2f\" % (x \/ total * 100)) + \"%\"\n\npercentages = []\nunique_counts = df[\"Class\"].value_counts()\nunique_counts.apply(sum_)\nunique_counts = unique_counts.apply(percentage)\n\npd.DataFrame(unique_counts).head(5)","db845dc0":"print(\"Fuel Type: %s\\n\\n\\n\" % (df[\"Fuel Type\"].unique()),  \n      \"Fuel Type 1: %s\\n\\n\\n\" % (df[\"Fuel Type 1\"].unique()), \n      \"Fuel Type 2: %s\" % (df[\"Fuel Type 2\"].unique()))","1202b1cf":"print(\"Fuel Type: \", df[df[\"Fuel Type\"].isnull()].shape[0])\nprint(\"Fuel Type 1: \", df[df[\"Fuel Type 1\"].isnull()].shape[0]) \nprint(\"Fuel Type 2: \", df[df[\"Fuel Type 2\"].isnull()].shape[0])","91381cfb":"df.columns","6a3a14b0":"unique_columns = df[[\"Vehicle ID\", \"Year\", \"Make\", \"Model\",\"Class\", \"Fuel Type\", \"Fuel Type 1\", \"Fuel Type 2\", \"Fuel Economy Score\", \"GHG Score\", \"Alternative Fuel\/Technology\"]]\nsemi_relevant_MPG_columns = df.loc[:, \"City MPG (FT1)\":\"Highway Utility Factor\"]\n\ncol = df.columns[df.columns.str.contains(\"Annual Fuel Cost\") | df.columns.str.contains(\"Tailpipe CO2\") | df.columns.str.contains(\"Annual Consumption in Barrels\") | df.columns.str.contains(\"Hours to Charge\") \\\n                ]\nfuelDf = pd.concat([unique_columns, semi_relevant_MPG_columns, df[col.values]], axis=1)","9b7a6df3":"def find_inconsistencies(df):\n    fig, ax = plt.subplots(3,11, figsize=(48,48))\n    x, y = 0,0\n    for i, column in enumerate(df.columns):\n        if type(df[column]) != pd.Series:\n            continue\n        if df[column].dtype == np.object:\n            continue\n\n        ax[x,y].hist(fuelDf[column], bins=np.linspace(df[column].min(), df[column].max(), 40))\n        ax[x,y].set_title(column)\n        ax[x,y].set_xlabel(column)\n        ax[x,y].set_ylabel(\"counts\")\n\n        y += 1\n        if y % 11 == 0:\n            y = 0\n            x += 1\n    #fuelDf[\"GHG Score\"].value_counts().plot.bar(title=\"GHG Score\", xlabel=\"GHG Score\", ylabel=\"count\")","563e56a0":"timeDf = fuelDf\nfind_inconsistencies(timeDf)","64c21b93":"indicator = fuelDf.columns.str.contains(\"Tailpipe CO2\") | fuelDf.columns.str.contains(\"City MPG\") | fuelDf.columns.str.contains(\"Highway MPG\") | \\\nfuelDf.columns.str.contains(\"Annual Fuel Cost\") | fuelDf.columns.str.contains(\"Annual Consumption in Barrels\") | fuelDf.columns.str.contains(\"Fuel Type 1\") | fuelDf.columns.str.contains(\"Fuel Type 2\") \\\n| fuelDf.columns.str.contains(\"Electricity Consumption\")\nvital_statistics = fuelDf[fuelDf.columns[indicator]]","f98ce937":"## Make sure vital statistics that we're using for FT1 calculations are not empty\ndef check_vital(df, f_type : str):\n    df1 = df[df[\"Highway MPG (%s)\" % f_type] <= 0]\n    df2 = df[df[\"Annual Fuel Cost (%s)\" % f_type ] <= 0]\n    df3 = df[df[\"Annual Consumption in Barrels (%s)\" % f_type] <= 0]\n    df4 = df[df[\"City MPG (%s)\" % f_type] <= 0]\n    return pd.concat([df1, df2, df3, df4])\n    \ncheck_vital(vital_statistics, \"FT1\")","427714e0":"## 1. Make sure that non-electric cares have the Tailpipe CO2 in Grams\/Mile\n## 2. Make sure electric cars have the highway and city electric consumptions.\n\ndef check_diff_types_vital(df, f_type : str, f_type_name : str):\n    indicator = (~df[f_type].str.contains(\"Electricity\")) & (df[\"Tailpipe CO2 in Grams\/Mile (%s)\" % (f_type_name)] <= 0)\n    df1 = df[indicator]\n    percent = df1.shape[0]\/df[~df[f_type].str.contains(\"Electricity\")].shape[0] * 100\n    print(\"%.2f%% of Tailpipe CO2 in Grams\/Mile for %s unfilled\" % (percent, f_type_name)) ## double % escape\n\n    indicator = (df[f_type].str.contains(\"Electricity\")) & ((df[\"City Electricity Consumption\"] <= 0) | df[\"Highway Electricity Consumption\"] <= 0)\n    df1 = df[indicator]\n    percent = df1.shape[0]\/df[df[f_type].str.contains(\"Electricity\")].shape[0] * 100\n    print(\"%.2f%% of Electricity Consumptions for %s unfilled\" % (percent, f_type_name))\n    \n    indicator = (~df[f_type].str.contains(\"Electricity\")) & (df[\"Tailpipe CO2 (%s)\" % (f_type_name)] <= 0)\n    df1 = df[indicator]\n    percent = df1.shape[0]\/df[~df[f_type].str.contains(\"Electricity\")].shape[0] * 100\n    print(\"%.2f%% of Tailpipe CO2 in Grams\/Mile for %s unfilled\" % (percent, f_type_name)) ## double % escape\n    \n    \ncheck_diff_types_vital(vital_statistics, \"Fuel Type 1\", \"FT1\")","c13c2bfe":"vital_statistics[vital_statistics[\"Tailpipe CO2 in Grams\/Mile (FT1)\"] == 0][\"Fuel Type 1\"].value_counts()\n\n# Every non-CO2-emission vehicle under Fuel Type 1 vehicles is Electric","c1c3f441":"# Do the same for FT2\nvital_statistics2 = vital_statistics.dropna()\ncheck_vital(vital_statistics2, \"FT2\")","a74bcb55":"vital_statistics2[vital_statistics2[\"Tailpipe CO2 in Grams\/Mile (FT2)\"] == 0][\"Fuel Type 2\"].value_counts()\n\n## Every non-emission-CO2 vehicle is electric","0db7bcbe":"# Do the same for FT2\ncheck_diff_types_vital(vital_statistics2, \"Fuel Type 2\", \"FT2\")","a1e173a5":"## Update for fuel type one and fuel type\nprint(\"Fuel Type: %s\\n\\n\\n\" % (df[\"Fuel Type\"].unique()),  \n      \"Fuel Type 1: %s\\n\\n\\n\" % (df[\"Fuel Type 1\"].unique()), \n      \"Fuel Type 2: %s\" % (df[\"Fuel Type 2\"].unique()))","e246df1a":"## We need a CO2 column for each Fuel Type, and a total CO2 column if Fuel Type contains an 'and'\nGPB = 42 ## Gallons per Barrel \n\n\n'''\n    Update for:\n    Non-Electric Car FT1 CO2:\n         x[\"Tailpipe CO2 (FT1)\"] = x[\"Annual Consumption in Barrels (FT1)\"] * GPB \\\n    * (0.55 * x[\"City MPG (FT1)\"] + 0.45 * x[\"Highway MPG (FT1)\"]) \\\n    * x[\"Tailpipe CO2 in Grams\/Mile (FT1)\"]\n    \n    Non-Electric Car FT2 CO2 :\n    if not np.isnan(x[\"Fuel Type 2\"])\n        x[\"Tailpipe CO2 (FT2)\"] = x[\"Annual Consumption in Barrels (FT2)\"] * GPB \\\n    * (0.55 * x[\"City MPG (FT2)\"] + 0.45 * x[\"Highway MPG (FT2)\"]) \\\n    * x[\"Tailpipe CO2 in Grams\/Mile (FT2)\"]\n    \n    \n    Electric Car FT1 Wh\n        x[\"Wh (FT1)\"] = x[\"Annual Consumption in Barrels (FT1)\"] * GPB \\\n    * (0.55 * x[\"City MPG (FT1)\"] * x[\"City Electric Consumption (FT1)\"] \\\n    + 0.45 * x[\"Highway MPG (FT1)\"] * x[\"Highway Electric Consumption (FT1)\"]) \\\n        \n    \n    Electric Car FT2 Wh\n        x[\"Wh (FT2)\"] = x[\"Annual Consumption in Barrels (FT2)\"] * GPB \\\n    * (0.55 * x[\"City MPG (FT2)\"] * x[\"City Electric Consumption (FT2)\"] \\\n    + 0.45 * x[\"Highway MPG (FT2)\"] * x[\"Highway Electric Consumption (FT2)\"]) \\\n        \n    if not np.isnan(x[\"Wh (FT1)\"] + x[\"Wh (FT2)\"]):\n        x[\"Wh (Total)\"] = x[\"Wh (FT1)\"] + x[\"Wh (FT2)\"]\n\n'''\ndef calculateCO2_1(x):\n    global GPB\n    return x[\"Annual Consumption in Barrels (FT1)\"] * GPB \\\n    * (0.55 * x[\"City MPG (FT1)\"] + 0.45 * x[\"Highway MPG (FT1)\"]) \\\n    * x[\"Tailpipe CO2 in Grams\/Mile (FT1)\"]\n\ndef calculateCO2_2(x):\n    global GPB\n    return x[\"Annual Consumption in Barrels (FT2)\"] * GPB \\\n    * (0.55 * x[\"City MPG (FT2)\"] + 0.45 * x[\"Highway MPG (FT2)\"]) \\\n    * x[\"Tailpipe CO2 in Grams\/Mile (FT2)\"]\n\ndef calculateWh1(x):\n    global GPB\n    return x[\"Annual Consumption in Barrels (FT1)\"] * GPB \\\n    * (0.55 * x[\"City MPG (FT1)\"] * x[\"City Electricity Consumption\"] \\\n    + 0.45 * x[\"Highway MPG (FT1)\"] * x[\"Highway Electricity Consumption\"])\n\ndef calculateWh2(x):\n    global GPB\n    return x[\"Annual Consumption in Barrels (FT2)\"] * GPB \\\n    * (0.55 * x[\"City MPG (FT2)\"] * x[\"City Electricity Consumption\"] \\\n    + 0.45 * x[\"Highway MPG (FT2)\"] * x[\"Highway Electricity Consumption\"])\n\ndef updateCO2(x):\n    if x[\"Fuel Type 2\"] != \"nan\":\n        if x[\"Fuel Type 2\"] == \"Electricity\":\n            x[\"Wh (FT2)\"] = calculateWh2(x)\n        else:\n            ## Only calculate if doesn't exist\n            if x[\"Tailpipe CO2 (FT2)\"] == -1:\n                x[\"Tailpipe CO2 (FT2)\"] = calculateCO2_2(x)\n    \n    if x[\"Fuel Type 1\"] == \"Electricity\":\n        x[\"Wh (FT1)\"] = calculateWh1(x)\n    else:\n        if x[\"Tailpipe CO2 (FT1)\"] == -1:\n            x[\"Tailpipe CO2 (FT1)\"] = calculateCO2_1(x)\n            \n    return x\n            \n\ndef getTotals(x):\n    x[\"Wh (TOTAL)\"] = x[\"Wh (FT1)\"] + x[\"Wh (FT2)\"]\n    \n    if re.search(\"\\sand\\s\", x[\"Fuel Type\"]):\n        x[\"Tailpipe CO2 (Total)\"] = x[\"Tailpipe CO2 (FT1)\"] + x[\"Tailpipe CO2 (FT2)\"]\n    else:\n        x[\"Tailpipe CO2 (Total)\"] = -1\n        \n    return x\n    \n    \ncolumns = [\"Tailpipe CO2 (FT1)\", \"Tailpipe CO2 {FT2}\"]\n","3a09b1c7":"test_1 = vital_statistics2.iloc[[0]] ## Test for Updating Tailpipe CO2 (FT1) and Updating Tailpipe CO2 (FT2). Works!\ntest_2 = vital_statistics2[vital_statistics2[\"Fuel Type 2\"] == \"Electricity\"].iloc[[0]] ## Test for Updating Wh (FT2). Works!\ntest_3 = vital_statistics[vital_statistics[\"Tailpipe CO2 (FT1)\"] == -1].iloc[[0]] ## Test for Updating Tailpipe CO2 (FT2) Works!\ntest_4 = vital_statistics[vital_statistics[\"Fuel Type 1\"] == \"Electricity\"].iloc[[0]] ## Test for Updating Wh (FT1) Works!\ntest_5 = fuelDf[fuelDf[\"Fuel Type\"].str.contains(\"and\")].iloc[2]\ntest_5\n\n\n\n","f3ed867a":"finalDf = df.apply(updateCO2, axis=1)\nfinalDf.shape","7ccfc5dd":"for column in finalDf.columns:\n    if finalDf[column].dtype == np.int64 or finalDf[column].dtype == np.float64:\n        finalDf[column] = finalDf[column].fillna(0)\n        \n\n        ","d2511549":"finalDf[\"Tailpipe CO2 (FT1)\"] = finalDf[\"Tailpipe CO2 (FT1)\"].replace({-1 : 0})\nfinalDf[\"Tailpipe CO2 (FT2)\"] = finalDf[\"Tailpipe CO2 (FT2)\"].replace({-1 : 0})","5dbb8d5f":"finalDf = finalDf.apply(getTotals, axis=1)","5d971d75":"# finalDf.shape\n# list(finalDf.columns)\nfinalDf[\"Fuel Type\"].unique()","ff4c6d75":"finalDf = finalDf[[\"Vehicle ID\", \"Fuel Type\", \"Fuel Type 1\", \"Fuel Type 2\", \"Year\", \"Make\", \"Model\", \"Class\", \"Fuel Economy Score\", \"GHG Score\", \\\n                   \"Tailpipe CO2 (FT1)\", \"Tailpipe CO2 (FT2)\", \"Tailpipe CO2 (Total)\", \"Wh (FT1)\", \"Wh (FT2)\", \"Wh (TOTAL)\", \"Annual Consumption in Barrels (FT1)\", \n                  \"Annual Consumption in Barrels (FT2)\", \"City MPG (FT1)\", \"City MPG (FT2)\", \"Highway MPG (FT1)\", \"Highway MPG (FT2)\", \"City Electricity Consumption\", \n                  \"Highway Electricity Consumption\"]]","e500534c":"fuelDf[~(fuelDf[\"Fuel Type 1\"] == \"Electricity\")][\"Tailpipe CO2 (FT1)\"].value_counts()","62dcaca7":"fuelDf[\"Tailpipe CO2 (FT2)\"].value_counts()","ab327ef6":"Type_1_Averages = (finalDf.groupby(\"Fuel Type 1\"))[[\"Wh (FT1)\", \"Tailpipe CO2 (FT1)\"]].describe()\nType_2_Averages = (finalDf.groupby(\"Fuel Type 2\"))[[\"Wh (FT2)\", \"Tailpipe CO2 (FT2)\"]].describe()\nType_2_Averages\n","b5e45e42":"Type_1_Averages.to_csv(\".\/averages_1.csv\")\nType_2_Averages.to_csv(\".\/averages_2.csv\")\nfinalDf.to_csv(\".\/results.csv\", index=False)","bce4283f":"%ls","ed89dd5e":"check_diff_types_vital(finalDf, \"Fuel Type 1\", \"FT1\")","16eca66d":"fuelType2Check = finalDf[~finalDf[\"Fuel Type 2\"].isna()]\ncheck_diff_types_vital(fuelType2Check, \"Fuel Type 2\", \"FT2\")","85313539":"Percent_Unfilled_FT1 = 1 - finalDf[~finalDf[\"Wh (FT1)\"].isna()].shape[0] \/ finalDf.shape[0] \nPercent_Unfilled_FT2 = 1 - finalDf[~finalDf[\"Wh (FT2)\"].isna()].shape[0] \/ finalDf.shape[0]\n\nprint(\"Percent of Unfilled Wh for WT1 : %.2f%%\" % Percent_Unfilled_FT1)\nprint(\"Percent of Unfilled Wh for WT2 : %.2f%%\" % Percent_Unfilled_FT2)","fca9be6a":"interestedColumns = [\"Year\", \"Make\", \"Model\", \"Class\", \"Transmission\",\"Fuel Type\", \"Fuel Type 1\", \"Fuel Type 2\", \"Tailpipe CO2 (FT1)\", \"Tailpipe CO2 (FT2)\", \n                                                    \"Tailpipe CO2 (Total)\", \"Wh (TOTAL)\", \"GHG Score\", \"Fuel Economy Score\", \"GHG Score (Alt Fuel)\"]\nCooperCollection = finalDf[finalDf[\"Make\"] == \"MINI\"][interestedColumns]","34c3c76d":"CooperCollection.head()","7e58e357":"indicator = (CooperCollection[\"Class\"] == \"Subcompact Cars\") & ((CooperCollection[\"Transmission\"].str.contains(\"6-Speed\")) | (CooperCollection[\"Transmission\"].str.contains(\"8-Speed\")) \\\n| (CooperCollection[\"Transmission\"].str.contains(\"7-Speed\"))) \nBest_CO2_Savings = CooperCollection[indicator].sort_values(\"Tailpipe CO2 (Total)\", ascending=True) ## optional key ascending. Pandas sorts DataFrames Ascending by default\nBest_CO2_Savings","29024b99":"Best_CO2_Savings","62a424cf":"Best_CO2_Savings[\"Tailpipe CO2 (Total)\"].shape","06bd3290":"Best_CO2_Savings[\"Indice\"] = Best_CO2_Savings[\"Year\"].astype(str) + \" \" + Best_CO2_Savings[\"Make\"] + \" \" + Best_CO2_Savings[\"Model\"]\nbins = np.linspace(Best_CO2_Savings[\"Tailpipe CO2 (Total)\"].min(), Best_CO2_Savings[\"Tailpipe CO2 (Total)\"].max(), 10)\nBest_CO2_Savings[[\"Tailpipe CO2 (Total)\"]].plot.hist(by=\"Tailpipe CO2 (Total)\", ylabel=\"Amount of CO2 in Grams\", xlabel=\"Car Type\", title=\"Tailpipe CO2 Production\")","6114288d":"data_we_need = Best_CO2_Savings[[\"Indice\", \"Tailpipe CO2 (Total)\", \"GHG Score\", \"Fuel Economy Score\"]]\nCO2 = Best_CO2_Savings[\"Tailpipe CO2 (Total)\"]\nnormalized_CO2 = (CO2 - CO2.min())\/(CO2.max() - CO2.min())\ndata_we_need[\"Tailpipe CO2 (Total)\"] = normalized_CO2\ndata_we_need.plot.bar(x=\"Indice\", xlabel=\"Car Type\", ylabel=\"Normalized CO2 values\", title=\"Normalized CO2 Consumption from grams of CO2\", figsize=(24,12))","34660fda":"finalDf[\"Class\"].unique()","e0e63518":"SUVs = finalDf[finalDf[\"Class\"].str.contains(\"Sport Utility Vehicle\")][interestedColumns]\n","a4b2a6fe":"EVs = SUVs[SUVs[\"Fuel Type\"] == \"Electricity\"].sort_values([\"Tailpipe CO2 (Total)\", \"Wh (TOTAL)\"], ascending=True)\nEVs","67d935a4":"EVs[\"Indice\"] = EVs[\"Year\"].astype(str) + \" \" + EVs[\"Make\"] + \" \" + EVs[\"Model\"]\nEVs.plot.bar(x=\"Indice\", y=\"Wh (TOTAL)\", rot=45, figsize=(24,12), ylabel=\"Energy Consumption in Watt-Hours\", xlabel=\"Car Type\", title=\"Energy Consumption of Electric SUVs\")","98005af2":"### 1. What is a Mini Cooper Countryman\n\n&nbsp;&nbsp;&nbsp; To be frank, I have no idea what is a Mini Cooper Countryman, so let's dive into it!\n\n![Insert Image Here](https:\/\/cdn.pixabay.com\/photo\/2020\/05\/02\/16\/22\/iguanas-5122093__340.jpg)","29939119":"## The Teslas are very efficient. We have finished helping all of our friends! Hurray!","0dac8215":"![Mini Cooper](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/f\/f2\/2018_Mini_Countryman_Cooper_Automatic_1.5_Front.jpg)\n\n### Anyways. since only 5-door Subcompact Cars with Manual 6-Speed MINIs are considered to be Mini Countrymen, we recommend Cooper (5-doors) as the most environmental friendly car out of all Countrymen","7be667a4":"## Yes, We have found MINI under Make (the Brand)!\n\nNow, let's rank them by CO2 Production in Ascending Order","23f9f264":"## We can see that there's a large amount of Tailpipe CO2 values unfilled for both FT1 and FT2. Let's see if we can fill the missing information.\n\nFor electric cars, we use this equation:\n```\nNumber of barrels consumed annually * 42 gallons\/(# of barrel) * (0.55 * City Miles\/Gallon * City Electric Consumption + 0.45 * Highway Miles\/Gallon * Highway Electric Consumption)\n```\n\nFor others, we use this equation:\n```\nNumber of barrels consumed annually * 42 gallons\/(# of barrel) * (0.55 * City Miles\/Gallon + 0.45 * Highway Miles\/Gallon) * CO2 Grams\/Mile\n```\n\nWe can safely assume that the energy consumption is measured in (Wh\/mile)\nhttps:\/\/insideevs.com\/reviews\/343702\/electric-car-energy-consumption-epa-compared-april-1-2019\/\n    \n    \n## We made sure all of the above variables are available for every car and that certain variables are available for cars associated with the fuel type that they fall under. Let's fill in CO2 values and create a new column for Watt-hour consumption!\n","8ed03e13":"## If fuel type is not electricity, Tailpipe CO2 cannot equal to 0. Car not electric will always have CO2 or it is undefined.","ea101cfa":"We just found some fuel costs for FT2 that are 0 for all Electric cars. It shouldn't be too big of a problem going forward, but we'll keep this in mind","f9707ce7":"## Seems like ~20 MINI Cooper Countryman cars really care about minimizing CO2 production and the other 15 just don't give a damn. Notice how those ~15 cars with horrible pollution has a -1 GHG Score and ENvironmental Score. Lol, government hiding the fact that those 15 cars bring poLLUTion (Or maybe data was simply not collected. We'll explore this more when I have time.)","d87e5b3b":"## That's right, we want to find Sport Utility Vehicles. Let's grab ourselves a list of all of them","32f66ffc":"## Data Analysis ","989d093c":"## Now that we're sure that everything works, let's apply the function onto the actual dataframe!","564697ff":"## Let's try to see if we can find a Mini under Make","6b398da6":"## We will also reduce the amount of columns, and mainly focus on the ones that we understand.\n\nWe should reduce the varying MPG columns into one. We can try to eliminate some columns by determining if we can remove one or two fuel type columns from the three given","bbc73a37":"## Combines Totals for Fuel Type 1 + Fuel Type 2","27fa5f17":"### 1. CO2 Calculation: Let's quick remind ourselves of the unique values that fall under both Fuel Types, to make sure we know what to calculate","b1bfedd2":"# 1. What is a Mini SUV?\n","ce10b877":"## Fillna for group calculation","941cfa78":"## Replace -1 in Tailpipe CO2 (FT2) and Tailpipe CO2 (FT1) with 0","2377121b":"## Here are the conclusions that I have made from the plot above:\n\n- Only Annual Fuel Cost, Annual Consumption in Barrels, Tailpipe CO2 in Grams\/Miles, CITY MPG, Highway MPG have consistent data for all vehicles from 1984 - 2017 \n- We can calculate the amount of CO2 released for most cars using the above statistics, even though some values are already calculated, based on 55% MPG on roads, and 45% MPG on highway.\n- NOOO WE HAVE TO DO CALCULATIONS TO MAKE UP FOR THIS LAZY DATASET??? Very Sad\n- Normal distribution is evident for Fuel Economy and GHG Scores\n\n\n\n## More questions to ask\n- Is Vehicle ID not unique?\n- Which pieces of data shall we include in the frontend application? I think aount of CO2, some basic stats, and MPG","5f68d6c3":"## Alright great! All Electric and Fuel Consumption Values are filled! Now, let's analyze some important statistics so that my friends can use them! Let's call them Friend A and Friend B, and let's start with Friend A!","dfdf013a":"## Let's Check the Parameters","45446373":"## Friend B Requirements\n\nFriend B is interested in a mini SUV that's the most environmentally friendly. Let's get onto it!\n","cd3c1133":"## Looks like the SUVs that produce the least pollution are electric vehicles, some of them being Teslas. Let's rank the electric vehicles by ascending Watthours consumed annually.","7e33d1ab":"## Now let's take a look at all the columns necessary to compute CO2 for non-electric Cars. For electric cars, we need to additionally make sure electrical consumption for highway and normal road exist","766f1019":"## Let's put our main focus onto the fuel data","f357bb14":"### Yay, we have finished helping friend A! Let's help out Friend B now!","28709cb3":"## Alright, let's make sure we have filled out the CO2 Production and Electric Consumption of all vehicles","66a18282":"   ### Problem Statement for Friend A:\n\n&nbsp;&nbsp;&nbsp; Friend A is interested in finding out the statistics behind Mini Countryman. Let's find out more about it in order to assess its environmental quality and any other relevant statistics!\n    \n      ","7b2eddc2":"## Before we output our results, let's write some tests","e670c5e5":"## Let's check the number of empty fields we have in columns that are important for both electric and non-electric cars"}}