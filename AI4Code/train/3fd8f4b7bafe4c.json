{"cell_type":{"5f463fdd":"code","97f7abe2":"code","93249d33":"code","da7e1bac":"code","514bbb7b":"code","b2f3f0c6":"code","978802af":"code","82744711":"code","04ccec85":"code","bbc3a0eb":"code","a25de72e":"code","549fb7ba":"code","60b25ca8":"code","1e104be0":"code","ea446b85":"markdown","131e79eb":"markdown","4ee0da12":"markdown","468b484e":"markdown"},"source":{"5f463fdd":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport cv2\nfrom tqdm import tqdm_notebook as tqdm\n\nimport os\nprint(os.listdir('..\/input'))","97f7abe2":"train_df = pd.read_csv('..\/input\/train.csv')\ntranslations_df = pd.read_csv('..\/input\/unicode_translation.csv')","93249d33":"train_df = train_df.dropna()","da7e1bac":"def unicode_to_num(unicode):\n    '''Translates unicode ID to location from translations'''\n    return translations_df[translations_df['Unicode'] == unicode].index[0]","514bbb7b":"def label_to_yolo(label, dim):\n    '''Converts the given \"label\" to proper YOLO format by doing this:\n            - Replacing unicode ID with class\n            - Scaling coordinates\/sizes to [0,1] \n    '''\n    height = dim[0]\n    width = dim[1]\n    _label = label.split()\n    for index in range(0, len(_label)):\n        if index % 5 == 0:\n            _label[index] = unicode_to_num(_label[index])\n        elif (index % 5 == 1) | (index % 5 == 3):\n            _label[index] = int(_label[index]) \/ width\n        elif (index % 5 == 2) | (index % 5 == 4):\n            _label[index] = int(_label[index]) \/ height\n\n    return(_label)","b2f3f0c6":"def get_img_dimensions(path):\n    '''Returns the image dimensions of an image_id'''\n    img = cv2.imread('..\/input\/train_images\/'+path+'.jpg')\n    return img.shape","978802af":"if not os.path.exists('yolo_train_labels'):\n    os.mkdir('yolo_train_labels')\ndef yolo_to_txt(yolo, file_name):\n    '''Writes given YOLO label to a text file'''\n    file = open('yolo_train_labels\/'+file_name+'.txt', \"w\")\n    for index in range(0, len(yolo), 5):\n        to_write = ' '.join(str(x) for x in yolo[index:index+5])\n        file.write(to_write + '\\n')\n    file.close()","82744711":"def write_row(image_id, labels):\n    img_shape = get_img_dimensions(image_id)\n    if type(labels) == str:\n        yolo = label_to_yolo(labels, dim=img_shape)\n        yolo_to_txt(yolo, image_id)","04ccec85":"for index, row in tqdm(train_df.iterrows(), total=train_df.shape[0]):\n    write_row(row['image_id'], row['labels'])","bbc3a0eb":"import shutil\nshutil.make_archive('yolo_labels', 'zip', 'yolo_train_labels')","a25de72e":"os.listdir('.')","549fb7ba":"!rm -rf yolo_train_labels","60b25ca8":"os.listdir('.')","1e104be0":"class_names = open('classes.names', 'w')\nfor index, row in tqdm(translations_df.iterrows(), total=translations_df.shape[0]):\n    class_names.write(row['Unicode']+'\\n')","ea446b85":"## Create Yolo Labels\n\nThis is the poorly written and pretty inefficient code I used to quickly create files for YOLO. The code could definately be improved but oh well\n\n#### ONLY CREATING LABELS FOR THE ONES WITH CHARACTERS the ones without any labels will be skipped","131e79eb":"Drop the images with no labels from train_df","4ee0da12":"Read the train set and unicode translations","468b484e":"Now to archive the labels in a zip"}}