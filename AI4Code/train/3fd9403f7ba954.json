{"cell_type":{"3169b582":"code","0eb09734":"code","4f440dbd":"code","26100af1":"code","ce813c9c":"code","adb5d042":"code","0f7688ef":"code","40ce71e2":"code","ed56d6dc":"code","8c2876d6":"markdown"},"source":{"3169b582":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn import svm\nimport matplotlib.pyplot as plt\n\nimport os\nprint(os.listdir(\"..\/input\"))","0eb09734":"#load data\ndf = pd.read_csv(\"..\/input\/train.csv\")","4f440dbd":"# Take out label column\nlabels = df['label']\ndf = df.drop('label', 1)","26100af1":"# Let's see how data looks like \nimage = df.values[123]\nplt.imshow(image.reshape(28, 28), cmap='Greys')\nplt.show()","ce813c9c":"# Split data\nx_train, x_test, y_train, y_test = train_test_split(df.values, labels, test_size = 0.3, random_state = 0)\n\nprint(x_train.shape)\nprint(x_test.shape)\n\nprint(y_train.shape)\nprint(y_test.shape)","adb5d042":"# Setup SVM model\nclf = svm.SVC(gamma=0.001, kernel='poly')","0f7688ef":"#Train model\nclf.fit(x_train, y_train)","40ce71e2":"# Predict\npredictions = clf.predict(x_test)","ed56d6dc":"# evaluate predictions\nprint (\"Overal accuracy:\", accuracy_score(predictions, y_test))\nprint (classification_report(predictions, y_test))\nprint (confusion_matrix(predictions, y_test))","8c2876d6":"## This is a solution for [digit-recognizer(MNIST)](http:\/\/https:\/\/www.kaggle.com\/c\/digit-recognizer) using scikitlearn's SVM, it is very easy to implement and it gives a not bad score of **0.97542** on the official dataset"}}