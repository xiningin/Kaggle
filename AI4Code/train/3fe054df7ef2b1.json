{"cell_type":{"249ddf86":"code","d156ec8e":"code","3057aeb9":"code","269054d1":"code","22e11c5b":"code","215864f1":"code","76c03c3d":"code","4b6b8945":"code","d4568f08":"code","88a673fe":"code","6c582b14":"code","8832394b":"code","ca7532da":"code","0e402d11":"code","d8b703bf":"code","0ad4d079":"code","88bedf85":"code","4334ddd0":"code","2258ef7b":"code","a7035d23":"code","a1c05a9d":"code","42155dfc":"code","e5dcdd14":"code","ada74c0b":"code","ce66abf3":"code","e04e855c":"code","5ea3d4ee":"code","ed01c93c":"code","27056543":"code","bfd553f5":"code","48abf3fc":"code","fbe5860c":"code","bff8bad5":"code","d934e423":"code","ab40cece":"code","9e6cccc6":"code","30c6f085":"code","40bb800a":"code","ce02f2e1":"code","c061297c":"code","aaf235dd":"code","7aaa071c":"code","ba5ff2b8":"code","4f048551":"code","0c1589e6":"code","e71a5a6c":"code","896f6acd":"code","91104a5c":"code","f3b33b8a":"code","2a648408":"code","cc8ba5b1":"code","c6c15e71":"code","7fbe4b36":"code","5d2ef435":"code","fd486641":"code","35d5f667":"code","e622a705":"code","15f9efcb":"code","d0cf16f3":"code","eb5ea030":"code","7b0a5f11":"code","04390d31":"code","3095cb9e":"code","0bd49dc7":"code","0740d604":"code","9d477f3f":"code","fb242657":"code","e175a492":"code","ac8fc5ac":"code","6be2c4da":"code","19778df8":"code","8f919b02":"code","31ac4b08":"code","b635cb07":"code","377045bf":"code","cf70f7d9":"code","180b0862":"code","9b02b222":"code","68893462":"code","bd1d31b6":"code","3b243ba0":"code","a64ea06e":"code","08231e1b":"code","4441dbb3":"code","57c901ae":"markdown","aa5fc40e":"markdown","c8942f50":"markdown","cce8f974":"markdown","9f4f0a18":"markdown","342b88c6":"markdown","c6296bc9":"markdown","664c7a40":"markdown","992ffa48":"markdown","21058b83":"markdown","695cfb2a":"markdown","f00d87db":"markdown","61c170eb":"markdown","50da3899":"markdown","d459601b":"markdown","2ee3cb71":"markdown","5cabc87b":"markdown","b91c571a":"markdown","b1d3fbd7":"markdown","23eceadb":"markdown","824a2c67":"markdown","34fe318e":"markdown","07228d26":"markdown","1f19ba6c":"markdown","fb52d670":"markdown","ea5389b8":"markdown","1f040fa7":"markdown","b953228c":"markdown"},"source":{"249ddf86":"# IMPORTING THE NECESSARY LIBRARIES\nimport warnings\nwarnings.simplefilter('ignore')\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno","d156ec8e":"#Adding different colors for the Plots\nc = 'b','r','g','c','m','y','k','w'\nc1 = '#FF0000','#00FF00','#0000FF','#00FFFF','#FF00FF','#FFFF00','#000000','#FFFFFF'\nc2 = '#0072BD','#D95319','#EDB120','#7E2F8E','#77AC30','#4DBEEE','#A2142F'","3057aeb9":"#iMPORTING THE DATASET\ndata = pd.read_csv('..\/input\/indian-house-price-combined\/Indian House Prices.csv')\ndata.head()","269054d1":"display(data.head())\nprint()\ndisplay(data.tail())","22e11c5b":"data.shape","215864f1":"data.info()","76c03c3d":"data.describe()","4b6b8945":"data['City'].value_counts().sort_values()","d4568f08":"data.columns","88a673fe":"len(data.columns)","6c582b14":"Data = data[['City', 'Location', 'Area', 'No. of Bedrooms', 'CarParking', 'AC', 'Wifi', 'LiftAvailable', '24X7Security', 'Price']]\nData.head()","8832394b":"len(Data.columns)","ca7532da":"Data.rename(columns={'Area':'total_sqft', 'Location':'Area', 'No. of Bedrooms':'BHK', 'CarParking':'Parking', 'LiftAvailable':'Lift', '24X7Security':'Security'}, inplace=True)\nData.head()","0e402d11":"Data['Price_per_sqft'] = (Data['Price']*100000\/Data['total_sqft']).round()\nData.head()","d8b703bf":"Data.info()","0ad4d079":"Data.City.unique()","88bedf85":"Data[['BHK', 'Parking', 'AC', 'Wifi', 'Lift', 'Security']] = Data[['BHK', 'Parking', 'AC', 'Wifi', 'Lift', 'Security']].apply(lambda x: pd.to_numeric(x, downcast='integer'))\nData.info()","4334ddd0":"Data[['BHK', 'Parking', 'AC', 'Wifi', 'Lift', 'Security']]","2258ef7b":"msno.bar(Data, color='dodgerblue')","a7035d23":"msno.matrix(Data, color=(0.27, 0.52, 1.0))","a1c05a9d":"Data.columns","42155dfc":"Data.sort_values(by=['Price'], ascending=False).head(20)","e5dcdd14":"Data[Data['total_sqft']\/Data['BHK']<300].head()","ada74c0b":"len(Data[Data['total_sqft']\/Data['BHK']<300])","ce66abf3":"temp = Data[(Data['total_sqft']\/Data['BHK']<300)]\ntemp.groupby('City')['Area'].count().sort_values(ascending=False)","e04e855c":"temp.shape","5ea3d4ee":"Data.shape","ed01c93c":"Data = Data[~(Data['total_sqft']\/Data['BHK']<300)]\nData.shape","27056543":"display(len(data)-len(temp))","bfd553f5":"Data['Price_per_sqft'].describe()","48abf3fc":"plt.figure(figsize=(12,8))\nsns.violinplot(Data['Price_per_sqft'], color='r')","fbe5860c":"Data.groupby('City')['Price_per_sqft'].mean().sort_values(ascending=False)","bff8bad5":"city = 'Mumbai', 'Delhi', 'Chennai', 'Banglore', 'Hyderabad', 'Kolkata'\nfor c in city:\n    df = Data[(Data['City']==c)]\n    plt.figure(figsize=(12,8))\n    sns.violinplot(df['Price_per_sqft'], color='r')\n    plt.title(f'Data distribution of Price per square-foot for {c} before Outlier removal', fontsize=16)","d934e423":"def remove_pps_outliers(Data):\n    data_new = pd.DataFrame()\n    for key, subdata in Data.groupby('City'):\n        mean = np.mean(subdata.Price_per_sqft)\n        std = np.std(subdata.Price_per_sqft)\n        new = subdata[(subdata.Price_per_sqft>(mean-std)) & (subdata.Price_per_sqft<=(mean+std))]\n        data_new = pd.concat([data_new,new], ignore_index=True)\n    return data_new\nData = remove_pps_outliers(Data)\nData.shape","ab40cece":"Data.shape","9e6cccc6":"city = 'Mumbai', 'Delhi', 'Chennai', 'Banglore', 'Hyderabad', 'Kolkata'\nfor c in city:\n    df = Data[(Data['City']==c)]\n    plt.figure(figsize=(12,8))\n    sns.violinplot(df['Price_per_sqft'], color='g')\n    plt.title(f'Data distribution of Price per square-foot for {c} after Outlier removal', fontsize=16)","30c6f085":"Data.Area.value_counts().sort_values()","40bb800a":"temp = Data['Area'].value_counts()\ntemp1=  temp[temp<10]\ntemp1","ce02f2e1":"Data['Area'] = Data['Area'].apply(lambda x: 'Other' if x in temp1 else x)\nData['Area'].value_counts()","c061297c":"len(Data['Area'].unique())","aaf235dd":"Data.tail(10)","7aaa071c":"Data.head()","ba5ff2b8":"plt.figure(figsize=(16,10))\nax=Data.groupby(Data['City']) ['Price_per_sqft'].mean().sort_values().plot.bar(color=c1)\nplt.gca().set(xlabel= 'Cities', ylabel= 'Price per Square feet')\nax.set_title('Average price per square feet for various cities', fontsize=20);","4f048551":"plt.figure(figsize=(16,10))\nax=Data.groupby(Data['BHK']) ['Price_per_sqft'].mean().sort_values().plot.bar(color=c2)\nplt.gca().set(xlabel= 'Number of Bedrooms', ylabel= 'Price per Square feet')\nax.set_title('Average price per square feet for different number of Bedrooms', fontsize=20)\nplt.show;","0c1589e6":"sns.set_style(\"whitegrid\") # Background grid style\nax=sns.catplot(x='BHK', y='Price_per_sqft', data=Data, hue='City',kind='bar', height=6.5, aspect=2)\n\n# For aesthetic purpose\nax.fig.suptitle('Price per square feet for differnt number of Bedrooms of various citites', fontsize=18);\nax.set_xlabels('Number of Bedrooms',fontsize=15);\nax.set_ylabels('Price',fontsize=15);","e71a5a6c":"sns.set_style(\"whitegrid\") # Background grid style\nax=sns.catplot(x='BHK', y='Price', data=Data, hue='City',kind='bar', height=6.5, aspect=2)\n\n# For aesthetic purpose\nax.fig.suptitle('Price for differnt number of Bedrooms of various citites', fontsize=18);\nax.set_xlabels('Number of Bedrooms',fontsize=15);\nax.set_ylabels('Price',fontsize=15);","896f6acd":"plt.figure(figsize=(16,8))\nax= sns.countplot(data=Data, x=\"BHK\", hue=\"City\", palette='Set2')\nax.set_title('Total number of Properties in Various Cities with different number of bedrooms', fontsize=16)\nax.set(xlabel='Number of Bedrooms', ylabel='Total Counts')\nplt.show();","91104a5c":"col = 'Parking', 'AC', 'Wifi', 'Lift', 'Security'\nfor col in col:\n    \n    plt.figure(figsize=(12,8))\n    ax= sns.countplot(data=Data, x=col, palette='Set2')\n    ax.set_title(f'Avaliability of {col} in the Apartment', fontsize=16)\n    ax.set(xlabel='Response', ylabel='Total Counts')\n    plt.show();","f3b33b8a":"cols = 1,2,3,4,5,6,8\nfor col in cols:\n    temp = Data[(Data['BHK']==col)]\n    plt.figure(figsize=(12,8))\n    x= temp.groupby('City')['BHK'].count().sort_values(ascending=False)\n    x.reset_index('City')\n    x[ :8].plot.pie(shadow=True, autopct='%1.1f%%', colors=c2, wedgeprops={'edgecolor':'black', 'linewidth':0.3})\n    plt.title(f\"Percentage of {col} Bedrooms Apartments in different cities\", fontsize=16)\n","2a648408":"Data","cc8ba5b1":"city_dummy = pd.get_dummies(Data['City'])\ncity_dummy","c6c15e71":"area_dummy = pd.get_dummies(Data['Area'])\narea_dummy","7fbe4b36":"print(city_dummy.shape)\nprint('')\nprint(area_dummy.shape)","5d2ef435":"Data = pd.concat([Data, city_dummy, area_dummy], axis='columns')\nData.head(5)","fd486641":"Data = Data.drop(['City', 'Area'], axis='columns')\nData.head(5)","35d5f667":"Data = Data.drop('Price_per_sqft', axis='columns')\nData","e622a705":"X = Data.drop('Price', axis='columns')\nX","15f9efcb":"y = Data.Price\ny","d0cf16f3":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2, random_state=0)","eb5ea030":"X_train.shape","7b0a5f11":"X_test.shape","04390d31":"from sklearn.linear_model import LinearRegression\nreg = LinearRegression()\nreg.fit(X_train, y_train)","3095cb9e":"y_pred = reg.predict(X_test)","0bd49dc7":"df = pd.DataFrame({\n    'Actual':y_test,\n    'Predicted':y_pred\n})\ndf","0740d604":"# Evaluating the Algorithm\nfrom sklearn import metrics  \nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))  \nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))  \nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))  ","9d477f3f":"\n# dividing data into training and testing set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,random_state=0)\n\n\n# Training and Making Predictions\n# Note : we will using DecisionTreeRegressor class , not DecisionTreeClassifier\nfrom sklearn.tree import DecisionTreeRegressor \n\nregressor = DecisionTreeRegressor()  \nregressor.fit(X_train, y_train)\n\n\n\n# To make predictions on the test set, \ny_pred = regressor.predict(X_test)  \n\n# Now let's compare some of our predicted values with the actual values \ndf=pd.DataFrame({'Actual':y_test, 'Predicted':y_pred})  \ndf  ","fb242657":"# Evaluating the Algorithm\nfrom sklearn import metrics  \nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))  \nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))  \nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))  ","e175a492":"\n# Training and Making Predictions\nfrom sklearn.ensemble import RandomForestRegressor\n\nregressor = RandomForestRegressor(n_estimators=50, random_state=0)  \nregressor.fit(X_train, y_train)  \ny_pred = regressor.predict(X_test) \ndf=pd.DataFrame({'Actual':y_test, 'Predicted':y_pred})  \ndf  ","ac8fc5ac":"print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))  \nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))  \nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","6be2c4da":"#Use K Fold cross validation to measure accuracy of our LinearRegression model\n\nfrom sklearn.model_selection import ShuffleSplit\nfrom sklearn.model_selection import cross_val_score\n\ncv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)\n\ncross_val_score(LinearRegression(), X, y, cv=cv)","19778df8":"#Use K Fold cross validation to measure accuracy of our Decision Tree model\n\ncv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)\n\ncross_val_score(DecisionTreeRegressor(), X, y, cv=cv)","8f919b02":"#Use K Fold cross validation to measure accuracy of our RandomForest model\n\ncv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)\n\ncross_val_score(RandomForestRegressor(n_estimators=50, random_state=0), X, y, cv=cv)","31ac4b08":"#Find best model using GridSearchCV\n\n#Find best model using GridSearchCV\n\nfrom sklearn.model_selection import GridSearchCV\n\ndef find_best_model_using_gridsearchcv(X,Y):\n    algos = {\n        'linear_regression' : {\n            'model': LinearRegression(),\n            'params': {\n                'normalize': [True, False]\n            }\n        },\n        \n        'decision_tree': {\n            'model': DecisionTreeRegressor(),\n            'params': {\n                'criterion' : ['mse','friedman_mse'],\n                'splitter': ['best','random']\n            }\n        },\n        'Random_Forest': {\n            'model': RandomForestRegressor(),\n            'params': {\n                'n_estimators': [50, 80, 100, 120]\n            }\n        }\n    }\n    scores = []\n    cv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)\n    for algo_name, config in algos.items():\n        gs =  GridSearchCV(config['model'], config['params'], cv=cv, return_train_score=False)\n        gs.fit(X,Y)\n        scores.append({\n            'model': algo_name,\n            'best_score': gs.best_score_,\n            'best_params': gs.best_params_\n        })\n\n    return pd.DataFrame(scores,columns=['model','best_score','best_params'])\n\nfind_best_model_using_gridsearchcv(X,y)","b635cb07":"\n# Training and Making Predictions\nfrom sklearn.ensemble import RandomForestRegressor\n\nregressor = RandomForestRegressor(n_estimators=120, random_state=0)  \nregressor.fit(X_train, y_train)  \ny_pred = regressor.predict(X_test)\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))  \nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))  \nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","377045bf":"X.columns","cf70f7d9":"def model_prediction(city,area,sqft,bhk,park,ac,wifi,lift,security):\n    city_index = np.where(X.columns==city)[0][0]\n    area_index = np.where(X.columns==area)[0][0]\n    x = np.zeros(len(X.columns))\n    x[0] = sqft\n    x[1] = bhk\n    x[2] = park\n    x[3] = ac\n    x[4] = wifi\n    x[5] = lift\n    x[6] = security\n    if city_index >=0:\n        x[city_index] = 1\n    if area_index >=0:\n        x[area_index] = 1\n    return regressor.predict([x])[0]\n","180b0862":"model_prediction('Banglore', 'Uttarahalli', 2000, 3,1,0,0,1,1)","9b02b222":"model_prediction('Chennai', 'Karapakkam', 2000, 2,0,0,0,0,0)","68893462":"model_prediction('Delhi', 'Mundka', 2000, 2,0,0,0,0,0)","bd1d31b6":"model_prediction('Hyderabad', 'Rajendra Nagar', 2000, 2,0,0,0,0,0)","3b243ba0":"model_prediction('Mumbai', 'Mira Road East', 2000, 2,0,0,0,0,0)","a64ea06e":"model_prediction('Kolkata', 'New Town', 2000, 3,0,0,0,0,0)","08231e1b":"import pickle\nwith open('indian_house_price_model.pickle', 'wb') as f:\n    pickle.dump(regressor,f)","4441dbb3":"import json\ncolumns = {\n    'data_columns': [col.lower() for col in X.columns]\n}\nwith open('columns.json','w')as f:\n    f.write(json.dumps(columns))","57c901ae":"# Data Cleaning.","aa5fc40e":"### The mean absolute error of Linear regression model is 14.34 which is not less than 10% of the mean of dependent variable (86.93). This means that our algorithm didn't do a fine job.","c8942f50":"### Now let's Check for the outliers.","cce8f974":"### Column lenght reduces from 44 to 10.","9f4f0a18":"# Exploratary Data Analysis","342b88c6":"### Decision Tree did a very good job but Mean Absolute Error is still greater than 10% of 86.93. This means that we could train this on any other algorithm.","c6296bc9":"#### When we analyze the Price and BHK column carefully, we understand that they don't have outliers because the 4 and 5 bhk houses are expensive in these cities.","664c7a40":"## Lets Analyze the Dataset First","992ffa48":"insights","21058b83":"## Let's try Decision Tree Algorithm","695cfb2a":"### Let's Check for Null values using missingno mudole.","f00d87db":"### Every City price per square foot is different that's why instead of removing outliers for the entire dataset, we first devide the data city wise then remove the outliers according to it.","61c170eb":"### Let's Drop not useful Columns.","50da3899":"#### BHK, Parking, AC, Wifi, Lift and Security is float data-type so we should change it into integer.","d459601b":"## Data Import","2ee3cb71":"### Let's Rename some columns.","5cabc87b":"#### Now the Datatypes are in Integer form.","b91c571a":"## Now let's clean the Data.","b1d3fbd7":"# Feature Enginering","23eceadb":"## Let's try Random Forest Algorithm","824a2c67":"### Column Inspection","34fe318e":"### Now we have transform all the Areas name to Other which occur less than 10 time. It will surely help us while building a model because after doing one hot encoding, we will have only 189 columns.","07228d26":"training and testing","1f19ba6c":"### Adding an extra column for price per square feet.","fb52d670":"### It's good to see that there is no null values in this Dataset.","ea5389b8":"### Average size for 1 BHK is 500 sqft and if its less than 300 sqft then it means the data is not relevant. that's why i drop those records.","1f040fa7":"### Using GridSearchCV, we get an idea that if we do hyperparameter tuning on Random Forest, then we can archieve almost 90% accuracy.\n### By using many algorithms, we also get an idea that Random Forest algorithm is giving the best results.","b953228c":"### We can see that among 629 unique values for Area column, more than 441 values occur less than 10 so we will change them into outhers. It will help us when we perform One Hot Encoding."}}