{"cell_type":{"14d09094":"code","56c2f5d0":"code","4f64c9d0":"code","18d1a528":"code","009f94f8":"code","e5520525":"code","40e0cf2a":"code","b5614fc3":"code","32c8f05c":"code","5255d2c2":"code","6f41db11":"code","3b1bad78":"code","a614315d":"code","14282eda":"code","3dc6acc9":"code","c4be84fc":"code","cac173e7":"code","0a153dc5":"code","68fc5047":"code","b0aefb1f":"code","9704c9b8":"code","30fb95e1":"code","416a162b":"code","0dab4f8f":"code","49ef68af":"markdown","9ae76a69":"markdown","cbe71eeb":"markdown","38ae33c9":"markdown","69b771c5":"markdown","0b25a630":"markdown","b84bea33":"markdown","3b357d26":"markdown","426dd61f":"markdown","9759e735":"markdown"},"source":{"14d09094":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","56c2f5d0":"housing_data = pd.read_csv('..\/input\/boston-housing\/housing.data', delim_whitespace=True, header=None)","4f64c9d0":"housing_data.head()","18d1a528":"columns_names = ['CRIM', 'ZN' , 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX', 'PTRATIO', 'B', 'LSTAT', 'MEDV']","009f94f8":"housing_data.columns = columns_names","e5520525":"housing_data.info()","40e0cf2a":"columns_names_new = ['CRIM', 'ZN' , 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'PTRATIO', 'LSTAT', 'MEDV']","b5614fc3":"means_data = []\nfor i in columns_names_new:\n    means_data.append(np.ceil(np.mean(housing_data[str(i)])))","32c8f05c":"print(means_data)","5255d2c2":"std_data = []\nfor i in columns_names_new:\n    std_data.append(np.ceil(np.std(housing_data[str(i)])))","6f41db11":"print(std_data)","3b1bad78":"import matplotlib\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\nlabels = columns_names_new\nmeans_data;\nstd_data;\n\nx = np.arange(len(labels))  # the label locations\nwidth = 0.35  # the width of the bars\n\nfig, ax = plt.subplots()\nrects1 = ax.bar(x - width\/2, means_data, width, label='Mean')\nrects2 = ax.bar(x + width\/2, std_data, width, label='Std')\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Amount')\nax.set_title('Grouped bar chart with labels')\nax.set_xticks(x)\nax.set_xticklabels(labels)\nax.legend()\n\n\ndef autolabel(rects):\n    \"\"\"Attach a text label above each bar in *rects*, displaying its height.\"\"\"\n    for rect in rects:\n        height = rect.get_height()\n        ax.annotate('{}'.format(height),\n                    xy=(rect.get_x() + rect.get_width() \/ 2, height),\n                    xytext=(0, 3),  # 3 points vertical offset\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\n\n\nautolabel(rects1)\nautolabel(rects2)\n\nfig.tight_layout()\n\nplt.show()","a614315d":"plt.figure(figsize=(10, 8))\nplt.bar(columns_names_new, means_data, width = 0.3,yerr =std_data, bottom=means_data, label = columns_names_new)\nplt.title(\"Stacked Bar Chart\")\nplt.xlabel(\"Data Amount\")\nplt.ylabel(\"Data Labels\")\nplt.legend()\nplt.show()","14282eda":"fig, axs = plt.subplots(1, 3, figsize=(8, 6), sharey=True)\naxs[0].bar(means_data, std_data)\naxs[1].scatter(means_data, std_data)\naxs[2].plot(means_data, std_data)\nfig.suptitle('Categorical Plotting')","3dc6acc9":"plt.figure()\nplt.plot(means_data, std_data)\nplt.show()","c4be84fc":"np.random.seed(19680801)\n\n\nplt.rcdefaults()\nfig, ax = plt.subplots()\n\n# Example data\nlabels = columns_names_new\ny_pos = np.arange(len(labels))\nperformance = 3 + 10 * np.random.rand(len(labels))\nerror = np.random.rand(len(labels))\n\nax.barh(y_pos, performance, xerr=error, align='center')\nax.set_yticks(y_pos)\nax.set_yticklabels(labels)\nax.invert_yaxis()  # labels read top-to-bottom\nax.set_xlabel('Performance')\nax.set_title('Housing : Horizontal bar chart')\n\nplt.show()","cac173e7":"\n\ncategory_names = columns_names_new\nresults = {\n    'Means': means_data,\n    'Std': std_data\n}\n\n\ndef survey(results, category_names):\n    \"\"\"\n    Parameters\n    ----------\n    results : dict\n        A mapping from question labels to a list of answers per category.\n        It is assumed all lists contain the same number of entries and that\n        it matches the length of *category_names*.\n    category_names : list of str\n        The category labels.\n    \"\"\"\n    labels = list(results.keys())\n    data = np.array(list(results.values()))\n    data_cum = data.cumsum(axis=1)\n    category_colors = plt.get_cmap('RdYlGn')(\n        np.linspace(0.15, 0.85, data.shape[1]))\n\n    fig, ax = plt.subplots(figsize=(9.2, 5))\n    ax.invert_yaxis()\n    ax.xaxis.set_visible(False)\n    ax.set_xlim(0, np.sum(data, axis=1).max())\n\n    for i, (colname, color) in enumerate(zip(category_names, category_colors)):\n        widths = data[:, i]\n        starts = data_cum[:, i] - widths\n        ax.barh(labels, widths, left=starts, height=0.5,\n                label=colname, color=color)\n        xcenters = starts + widths \/ 2\n\n        r, g, b, _ = color\n        text_color = 'white' if r * g * b < 0.5 else 'darkgrey'\n        for y, (x, c) in enumerate(zip(xcenters, widths)):\n            ax.text(x, y, str(int(c)), ha='center', va='center',\n                    color=text_color)\n    ax.legend(ncol=len(category_names), bbox_to_anchor=(0, 1),\n              loc='lower left', fontsize='small')\n\n    return fig, ax\n\n\nsurvey(results, category_names)\nplt.show()","0a153dc5":"# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\n# some random data\nx = means_data\ny = std_data\n\n\ndef scatter_hist(x, y, ax, ax_histx, ax_histy):\n    # no labels\n    ax_histx.tick_params(axis=\"x\", labelbottom=False)\n    ax_histy.tick_params(axis=\"y\", labelleft=False)\n\n    # the scatter plot:\n    ax.scatter(x, y)\n\n    # now determine nice limits by hand:\n    binwidth = 0.25\n    xymax = max(np.max(np.abs(x)), np.max(np.abs(y)))\n    lim = (int(xymax\/binwidth) + 1) * binwidth\n\n    bins = np.arange(-lim, lim + binwidth, binwidth)\n    ax_histx.hist(x, bins=bins)\n    ax_histy.hist(y, bins=bins, orientation='horizontal')\n    \n    \n    \n# definitions for the axes\nleft, width = 0.1, 0.65\nbottom, height = 0.1, 0.65\nspacing = 0.005\n\n\nrect_scatter = [left, bottom, width, height]\nrect_histx = [left, bottom + height + spacing, width, 0.2]\nrect_histy = [left + width + spacing, bottom, 0.2, height]\n\n# start with a square Figure\nfig = plt.figure(figsize=(8, 8))\n\nax = fig.add_axes(rect_scatter)\nax_histx = fig.add_axes(rect_histx, sharex=ax)\nax_histy = fig.add_axes(rect_histy, sharey=ax)\n\n# use the previously defined function\nscatter_hist(x, y, ax, ax_histx, ax_histy)\n\nplt.show()","68fc5047":"fig, ax = plt.subplots()\nfor color in ['tab:blue', 'tab:orange', 'tab:green']:\n    n = len(columns_names_new)\n    x = means_data\n    y = std_data\n    scale = 200.0 * np.random.rand(n)\n    ax.scatter(x, y, c=color, s=scale, label=color,\n               alpha=0.3, edgecolors='none')\n\nax.legend()\nax.grid(True)\n\nplt.show()","b0aefb1f":"x = means_data\ny = std_data\nplt.stem(x, y)\nplt.show()","9704c9b8":"import matplotlib.pyplot as plt\nimport numpy as np\n\n# Random test data\nnp.random.seed(19680801)\nall_data = housing_data['AGE']\nlabels = \"AGE\"\n\nfig, (ax1, ax2) = plt.subplots(nrows=1, ncols=2, figsize=(9, 4))\n\n# rectangular box plot\nbplot1 = ax1.boxplot(all_data,\n                     vert=True,  # vertical box alignment\n                     patch_artist=True  # fill with color\n                     )  # will be used to label x-ticks\nax1.set_title('Rectangular box plot')\n\n# notch shape box plot\nbplot2 = ax2.boxplot(all_data,\n                     notch=True,  # notch shape\n                     vert=True,  # vertical box alignment\n                     patch_artist=True)\nax2.set_title('Notched box plot')\n\n# fill with colors\ncolors = ['pink', 'lightblue', 'lightgreen']\nfor bplot in (bplot1, bplot2):\n    for patch, color in zip(bplot['boxes'], colors):\n        patch.set_facecolor(color)\n\n# adding horizontal grid lines\nfor ax in [ax1, ax2]:\n    ax.yaxis.grid(True)\n    ax.set_xlabel('Three separate samples')\n    ax.set_ylabel('Observed values')\n\nplt.show()","30fb95e1":"mu = 100  # mean of distribution\nsigma = 15  # standard deviation of distribution\nvalue = mu + sigma * np.random.randn(437)\nx = means_data\ny =std_data\nnum_bins = 50\n\nfig, ax = plt.subplots()\n\n# the histogram of the data\nn, bins, patches = ax.hist(x, num_bins, density=True)\n\n# add a 'best fit' line\ny = ((1 \/ (np.sqrt(2 * np.pi) * sigma)) *\n     np.exp(-0.5 * (1 \/ sigma * (bins - mu))**2))\nax.plot(bins, y, '--')\nax.set_xlabel('Smarts')\nax.set_ylabel('Probability density')\nax.set_title(r'Histogram')\n\n# Tweak spacing to prevent clipping of ylabel\nfig.tight_layout()\nplt.show()","416a162b":"labels = columns_names_new\nsizes = means_data\n\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()","0dab4f8f":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import cm\nfrom mpl_toolkits.mplot3d import Axes3D\n\nX = means_data\nY = std_data\nX, Y = np.meshgrid(X, Y)\nR = np.sqrt(X**2 + Y**2)\nZ = np.sin(R)\n\nfig = plt.figure()\nax = Axes3D(fig)\nax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=cm.viridis)\n\nplt.show()","49ef68af":"# Plotting","9ae76a69":"# Grouped bar chart with labels","cbe71eeb":"# Categorical Plotting","38ae33c9":"# Discrete distribution as horizontal bar chart","69b771c5":"# Stacked Bar Chart","0b25a630":"# Horizontal bar chart","b84bea33":"# Steam Plot","3b357d26":"# Scatter plot with histograms","426dd61f":"# Scatter plots with a legend","9759e735":"# Basic Pai Chart"}}