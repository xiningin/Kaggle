{"cell_type":{"7904d1e4":"code","5b0c4aca":"code","f3f93fad":"code","a11c1c3d":"code","10f86a77":"code","469a83fb":"code","5f2c43ff":"code","4cb86ed0":"code","c18fd03e":"code","3a3e3d4a":"code","7a897734":"code","20490fe5":"code","e0b4c7da":"code","08358446":"code","2ac43b8c":"code","10e85af0":"code","5ac2b2fe":"code","d91ecff8":"code","c490824f":"code","a900a711":"code","e01048c3":"code","00626643":"code","9431a2d8":"code","335b0681":"code","7d893d6b":"code","739f5c89":"code","135e686b":"code","7ee76d4c":"code","516248b5":"code","a4c23ef2":"code","bae61a21":"code","5168268c":"code","96c10e5f":"markdown","e90d8303":"markdown","7c56f787":"markdown","8ea0d5c0":"markdown","b8063904":"markdown","bd817b75":"markdown","07e8601f":"markdown"},"source":{"7904d1e4":"# Import packages\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Set style & figures inline\nsns.set()\n%matplotlib inline","5b0c4aca":"confirmed_cases_data_url = 'https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv'\ndeath_cases_data_url = 'https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv'\nrecovery_cases_data_url = 'https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv'","f3f93fad":"# Import data & check it out\nraw_data_confirmed = pd.read_csv(confirmed_cases_data_url)\nraw_data_confirmed.head()","a11c1c3d":"# Group by region\ndata_day = raw_data_confirmed.groupby(['Country\/Region']).sum().drop(['Lat', 'Long'], axis=1)\ndata_day.head()","10f86a77":"df = data_day.transpose()","469a83fb":"# Melt data so that it is long\ndata = data_day.reset_index().melt(id_vars='Country\/Region', var_name='date')\ndata.head()","5f2c43ff":"data.loc[(data.value < 1),'value'] = None\ndata.head()","4cb86ed0":"# Pivot data to wide & index by date\ndf = data.pivot(index='date', columns='Country\/Region', values='value')\ndf.tail()","c18fd03e":"# Set index as DateTimeIndex\ndatetime_index = pd.DatetimeIndex(df.index)\ndf.set_index(datetime_index, inplace=True)\ndf.head()","3a3e3d4a":"# Check out index\ndf.index","7a897734":"# Plot time series of several countries of interest\npoi = ['China', 'US', 'Italy', 'France', 'Australia']\ndf[poi].plot(figsize=(20,10), linewidth=5, fontsize=20)\nplt.xlabel('Date', fontsize=20);\nplt.ylabel('Confirmed patients count', fontsize=20);\nplt.title('Confirmed Patients Time Series', fontsize=20);","20490fe5":"# Plot time series of several countries of interest\npoi = ['China', 'US', 'Italy', 'France', 'Australia']\ndf[poi].plot(figsize=(20,10), linewidth=5, fontsize=20, logy=True)\nplt.xlabel('Date', fontsize=20);\nplt.ylabel('Confirmed Patients Logarithmic count', fontsize=20);\nplt.title('Confirmed Patients Logarithmic Time Series', fontsize=20);","e0b4c7da":"# Import data & check it out\nraw_data_deaths = pd.read_csv(death_cases_data_url)\nraw_data_deaths.head()","08358446":"# Group by region\ndata_day = raw_data_deaths.groupby(['Country\/Region']).sum().drop(['Lat', 'Long'], axis=1)\ndf = data_day.transpose()\n# Melt data so that it is long\ndata = data_day.reset_index().melt(id_vars='Country\/Region', var_name='date')\n#\ndata.loc[(data.value < 25),'value'] = None\n# Pivot data to wide & index by date\ndf = data.pivot(index='date', columns='Country\/Region', values='value')\n# Set index as DateTimeIndex\ndatetime_index = pd.DatetimeIndex(df.index)\ndf.set_index(datetime_index, inplace=True)","2ac43b8c":"df.tail()","10e85af0":"# Plot time series of several countries of interest\npoi = ['China', 'US', 'Italy', 'France', 'Australia']\ndf[poi].plot(figsize=(20,10), linewidth=5, fontsize=20)\nplt.xlabel('Date', fontsize=20);\nplt.ylabel('Deaths Patients count', fontsize=20);\nplt.title('Deaths Patients Time Series', fontsize=20);","5ac2b2fe":"df.dropna(axis=1, how='all', inplace=True)\ndf.head()","d91ecff8":"df = df.sort_index()\ndf1 = df.reset_index().drop(['date'], axis=1)\ndf1.head()","c490824f":"for col in df1.columns:\n    print(col, df1[col].first_valid_index())\n    df1[col] = df1[col].shift(-df1[col].first_valid_index())","a900a711":"df2 = df1.apply(lambda x: x.shift(-x.first_valid_index()))","e01048c3":"# Plot time series of several countries of interest\ndf2.plot(figsize=(20,10), linewidth=5, fontsize=20)\nplt.xlabel('Days', fontsize=20);\nplt.ylabel('Deaths Patients count', fontsize=20);\nplt.title('Deaths Patients Time Series', fontsize=20);","00626643":"# Plot time series of several countries of interest\ndf2.plot(figsize=(20,10), linewidth=5, fontsize=20, logy=True)\nplt.xlabel('Days', fontsize=20);\nplt.ylabel('Deaths Patients Logarithmic count', fontsize=20);\nplt.title('Deaths Patients Logarithmic Time Series', fontsize=20);","9431a2d8":"# Function for grouping countries by region\ndef grouping_by_region(raw_data, min_val):\n    data_day = raw_data.groupby(['Country\/Region']).sum().drop(['Lat', 'Long'], axis=1)\n    df_t = data_day.transpose()\n    # Melt data so that it is long\n    data = data_day.reset_index().melt(id_vars='Country\/Region', var_name='date')\n    #\n    data.loc[(data.value < min_val),'value'] = None\n    # Pivot data to wide & index by date\n    df_t = data.pivot(index='date', columns='Country\/Region', values='value')\n    # Set index as DateTimeIndex\n    datetime_index = pd.DatetimeIndex(df_t.index)\n    df_t.set_index(datetime_index, inplace=True)\n    return df_t","335b0681":"# Function to plot time series of several countries of interest\ndef plot_time_series(df, plot_title, x_label, y_label, isLogY=False):\n    df.plot(figsize=(20,10), linewidth=5, fontsize=20, logy=isLogY)\n    plt.xlabel(x_label, fontsize=20);\n    plt.ylabel(y_label, fontsize=20);\n    plt.title(plot_title, fontsize=20);","7d893d6b":"# Function to manipulate the data\ndef data_manipulation(df):\n    df.dropna(axis=1, how='all', inplace=True)\n    df = df.sort_index()\n    df1 = df.reset_index().drop(['date'], axis=1)\n    \n    for col in df1.columns:\n        print(col, df1[col].first_valid_index())\n        df1[col] = df1[col].shift(-df1[col].first_valid_index())\n        \n    df2 = df1.apply(lambda x: x.shift(-x.first_valid_index()))\n    return df2","739f5c89":"# Import data & check it out\nraw_data_recovered = pd.read_csv(recovery_cases_data_url)\nraw_data_recovered.head()","135e686b":"df = grouping_by_region(raw_data_recovered, 50)\ndf.tail()","7ee76d4c":"# Plot time series of several countries of interest\npoi = ['China', 'US', 'Italy', 'France', 'Australia']\nplot_time_series(df[poi], 'Recovered Patients Time Series', 'Date', 'Recovered Patients count', False)","516248b5":"clean_df = data_manipulation(df)","a4c23ef2":"clean_df.head()","bae61a21":"plot_time_series(clean_df, 'Recovered Patients Time Series', 'Days', 'Recovered Patients count', False)","5168268c":"plot_time_series(clean_df, 'Recovered Patients Logarithmic Time Series', 'Days', 'Recovered Patients Logarithmic count', True)","96c10e5f":"# Covid-19 EDA on John Hopkins CSSE Dataset","e90d8303":"## Deaths","7c56f787":"### I hope this would be useful!\n","8ea0d5c0":"## Confirmed","b8063904":"## Recovered","bd817b75":"This tutorial's purpose is to introduce people to the [2019 Novel Coronavirus COVID-19 (2019-nCoV) Data Repository by Johns Hopkins CSSE](https:\/\/github.com\/CSSEGISandData\/COVID-19) and how to explore it using some foundational packages in the Scientific Python Data Science stack.\n\nIt is not intended to encourage people to create & publish their own data visualizations. In fact, as [this thoughtful essay](https:\/\/medium.com\/nightingale\/ten-considerations-before-you-create-another-chart-about-covid-19-27d3bd691be8) makes clear, in many cases it is irresponsible to publish amateur visualizations, which at best will dilute those that experts with domain expertise are publishing. We won't be making any predictions or doing any statistical modelling, although we may look critically at some other models.\n\nDashboards such as these inpsired me to put this material together, in order to show people how to dive into the data:\n\n- [Covid-19: active cases and extrapolation](https:\/\/covid19-dash.github.io\/) by Ga\u00ebl Varoquaux, Emmanuelle Gouillart, Russell Poldrack, and Guillaume Lemaitre\n- [NYC Covid-19 data dashboard](https:\/\/smarquez.shinyapps.io\/covid_nys_dashboard\/) by Sue Marquez\n- All of [these dashboards](https:\/\/covid19dashboards.com\/) contributed to by many and powered by the work of Hamel Husain.\n\n\nalso [this is useful](https:\/\/twitter.com\/DrDenaGrayson\/status\/1241143463925645319\/photo\/1).","07e8601f":"## Functions"}}