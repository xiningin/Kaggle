{"cell_type":{"35c9101c":"code","d22456f1":"code","bb1d406c":"code","707959e4":"code","257f6f88":"code","4ec41623":"code","3868d2b8":"code","7a55d964":"code","eabf4769":"code","138c5dde":"code","c6f74a3b":"code","ba2ffb21":"code","febb4e64":"code","3db55843":"code","b587d961":"code","97f91674":"code","45a220f8":"code","090c65ed":"code","e6838577":"code","5ec7b524":"code","f8cff02a":"code","f78b9d54":"code","fdb9cf90":"code","8e6468fa":"code","59b05d63":"code","c403250f":"markdown","67a6ab18":"markdown","f8049197":"markdown","faf8f941":"markdown","e24f49d1":"markdown","e33d8473":"markdown","83bed80f":"markdown","a64acb0e":"markdown","0da9bb84":"markdown","8b880d0f":"markdown","92cf8fdb":"markdown","2bd50827":"markdown","2ea71156":"markdown","d809fffb":"markdown"},"source":{"35c9101c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d22456f1":"import seaborn as sn\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import tree\nfrom sklearn.metrics import classification_report\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import roc_auc_score,roc_curve\nfrom sklearn.metrics import confusion_matrix","bb1d406c":"#import data\nfraud = pd.read_csv('\/kaggle\/input\/fraud-check-data\/Fraud_check.csv')\nfraud.head()","707959e4":"fraud.info()","257f6f88":"fraud = fraud.rename(columns={'Marital.Status':'marital_status','Taxable.Income':'tax_income','City.Population':'population','Work.Experience':'work_exp'} )\nfraud.head()","4ec41623":"fraud.drop('population',axis=1,inplace = True)","3868d2b8":"#encoding the categorical variables\nencoder = preprocessing.LabelEncoder()\nfraud['Undergrad'] = encoder.fit_transform(fraud['Undergrad'])\nfraud['marital_status'] = encoder.fit_transform(fraud['marital_status'])\nfraud['Urban'] = encoder.fit_transform(fraud['Urban'])\n\nfraud.head()","7a55d964":"fraud['risky']=''\nfraud.loc[fraud['tax_income']<=30000,'risky']='1'\nfraud.loc[fraud['tax_income']>30000,'risky']='0'\n\nfraud.head()\n","eabf4769":"fraud.info()","138c5dde":"fraud.drop('tax_income',axis=1,inplace = True)","c6f74a3b":"fraud['risky'].value_counts()","ba2ffb21":"Y = fraud.iloc[:,-1]\nX = fraud.iloc[:,0:-1]","febb4e64":"# Splitting data into training and testing data set\nx_train, x_test,y_train,y_test = train_test_split(X,Y, test_size=0.2,random_state=40)","3db55843":"parameters = [{'n_estimators':[10, 20,100], \n              'max_depth':range(2,10),\n               'max_features': [3]\n             }]\n\nclf_tree = RandomForestClassifier()\nclf = GridSearchCV(clf_tree,parameters,cv=5,scoring = 'roc_auc')","b587d961":"#fitting the model\nclf.fit(x_train,y_train)","97f91674":"clf.best_score_","45a220f8":"clf.best_params_","090c65ed":"clf_randf = RandomForestClassifier(n_estimators = 10, max_depth = 2,max_features = 3)","e6838577":"clf_randf.fit(x_train,y_train)","5ec7b524":"y_pred = clf_randf.predict(x_test)\ntest_results = pd.DataFrame({'actual':y_test,'predicted':y_pred})\ntest_results.head()","f8cff02a":"roc_auc_score(y_test,y_pred)","f78b9d54":"cm = confusion_matrix(y_test, y_pred)\ncm","fdb9cf90":"print(classification_report(y_test, y_pred))","8e6468fa":"feature_rank = pd.DataFrame({'feature': x_train.columns,\n                            'importance': clf_randf.feature_importances_})\n\nfeature_rank = feature_rank.sort_values('importance',ascending = False)\nplt.figure(figsize=(8,6))\nsn.barplot(y='feature',x='importance',data = feature_rank)","59b05d63":"feature_rank.importance","c403250f":"The data is clearly imbalanced.\u00b6","67a6ab18":"**Since, best parameters are max_depth =2 with maximum features 3, we will build the final model with optimal parameter values.**","f8049197":"## **Feature Selection**","faf8f941":"we can see that work_exp is the best feature,it alone explains 60 % of information in the data w.r.t the target variable. The top features together explains almost 96% of the information. Urban is the worst feature here.","e24f49d1":"## **Measuring Test Acuuracy**","e33d8473":"# **Random Forest Classification- hyperparameter tuning using Gridsearch**","83bed80f":"**Data Preprocessing**","a64acb0e":"**Classification Report**","0da9bb84":"**Here, I have done some basic works,I will update the notebook after balancing the dataset to see if the model accuracy improves.**","8b880d0f":"**The best accuracy score is 0.46 , which is not good.**","92cf8fdb":"## **Building Model with optimal parameters**","2bd50827":"**Confusion Matrix**","2ea71156":"1. In the model, the training-set accuracy score is 0.46 while the test-set accuracy to be 0.5. These two values are quite comparable. So, there is no sign of overfitting.\n2. From the confusion matrix we see that it predicts the good class perfectly but cannot predict the risk class at all.\n3. From the classification report we see that the recall for 0 is 1 and for 1 it is 0, thus proving the previous point. This could be due to an imbalanced dataset.\n","d809fffb":"## **Final Conclusions**"}}