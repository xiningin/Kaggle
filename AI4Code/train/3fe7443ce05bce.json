{"cell_type":{"7ca99b00":"code","b96d584e":"code","0a559ef3":"code","8b255645":"code","961d1d10":"code","33ed0dd3":"code","21aa89f2":"code","9cc3d9af":"code","9868fddf":"code","9972b80f":"code","e2643257":"code","b7e1ae7e":"code","a0826d8a":"code","7df00c0f":"code","0a71c792":"code","2a64dc33":"code","5ac77740":"code","26d78f4c":"code","20bdf3ec":"code","45d1b550":"code","80530de1":"code","96056fac":"code","59f8f88f":"code","98183104":"code","bb53f527":"code","05e139d8":"code","3de2560b":"code","d81812d8":"code","ce61a429":"code","75454dff":"code","42a7dc80":"code","4c41c21e":"code","a9a16097":"code","8f5fc991":"code","60a9bab2":"code","e54d07af":"code","a3a01aec":"code","071b5988":"code","018161c4":"code","460c9cd6":"code","cde1ccf8":"code","3767f548":"code","ce124d07":"code","1062762b":"code","105c864e":"code","8766e622":"code","210a8bb7":"code","b7592487":"code","efa3cdb3":"code","6c55acbc":"code","cdf722bb":"code","d4d7a91c":"code","05ae409e":"code","a184f38b":"code","21cefee3":"code","48e2a679":"code","3b15f0eb":"code","059a7ca3":"code","e8e71e5a":"code","f9dea45d":"code","b95f8ed9":"code","32416be1":"code","289e35a6":"code","af7ed2ec":"markdown","2bac4fde":"markdown","b1609eb3":"markdown","e6131472":"markdown","cf91fb85":"markdown"},"source":{"7ca99b00":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b96d584e":"## visualization \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n## preprocessing\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder, MinMaxScaler\nfrom sklearn.impute import SimpleImputer\n\n## testing \nfrom scipy import stats\n\n## model\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\n\n## metrics\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix, ConfusionMatrixDisplay, roc_auc_score\n\n##pipeline\nfrom sklearn.pipeline import Pipeline\n\nimport warnings\nwarnings.filterwarnings('ignore')","0a559ef3":"training_path = '..\/input\/loan-prediction-based-on-customer-behavior\/Training Data.csv'\ntest_path = '..\/input\/loan-prediction-based-on-customer-behavior\/Test Data.csv'","8b255645":"trainData = pd.read_csv(training_path, index_col='Id')\ntrainData.head()","961d1d10":"testData = pd.read_csv(test_path, index_col='ID')\ntestData.head()","33ed0dd3":"trainData.info()","21aa89f2":"trainData.describe()","9cc3d9af":"trainData.isnull().sum()","9868fddf":"trainData.rename(columns={'Married\/Single':'MaritalStatus'}, inplace=True)\ntrainData.head()","9972b80f":"trainData.STATE.value_counts()","e2643257":"label = trainData.STATE.value_counts().index\ncount = trainData.STATE.value_counts().values\n\nfig, ax = plt.subplots(figsize=(6, 6))\nax.pie(count, labels=label, autopct='%1.1f%%', shadow=True)\nax.axis('equal')\nplt.show()\n","b7e1ae7e":"trainData.CITY.value_counts()","a0826d8a":"trainData.Profession.value_counts()","7df00c0f":"ax = sns.countplot(x=trainData.MaritalStatus, palette='muted')\nax.bar_label(container=ax.containers[0])","0a71c792":"ax=sns.countplot(x=trainData.House_Ownership, palette='Set2')\nax.bar_label(container=ax.containers[0])","2a64dc33":"ax = sns.countplot(x=trainData.Car_Ownership, palette='Set2')\nax.bar_label(container=ax.containers[0], padding=-15)","5ac77740":"ax=sns.countplot(x=trainData.Risk_Flag, palette='Set2')\nax.bar_label(container=ax.containers[0], padding=-15)","26d78f4c":"sns.histplot(data=trainData.Age, color='midnightblue')","20bdf3ec":"sns.boxplot(y=trainData.Age)","45d1b550":"sns.histplot(data=trainData.Income)","80530de1":"sns.boxplot(y=trainData.Income)","96056fac":"sns.histplot(x=trainData.Experience, palette='Set2')","59f8f88f":"trainData.Experience.mean()","98183104":"sns.histplot(x=trainData.CURRENT_JOB_YRS, palette='muted')","bb53f527":"trainData.CURRENT_JOB_YRS.mean()","05e139d8":"trainData.CURRENT_HOUSE_YRS.value_counts()","3de2560b":"sns.histplot(x=trainData.CURRENT_HOUSE_YRS, palette='Set2')","d81812d8":"sns.histplot(data=trainData.Income.loc[trainData.Risk_Flag == 0], color='skyblue', label='0')\nsns.histplot(data=trainData.Income.loc[trainData.Risk_Flag == 1], color='gold', label='1')\n","ce61a429":"trainData.Income.loc[trainData.Risk_Flag == 1].describe()","75454dff":"sns.histplot(data=trainData.Age.loc[trainData.Risk_Flag == 0], color='skyblue', label='0')\nsns.histplot(data=trainData.Age.loc[trainData.Risk_Flag == 1], color='gold', label='1')","42a7dc80":"trainData.Age.loc[trainData.Risk_Flag == 1].describe()","4c41c21e":"sns.countplot(x=trainData.MaritalStatus, hue=trainData.Risk_Flag, palette='muted')","a9a16097":"ax = sns.countplot(x=trainData.House_Ownership, hue=trainData.Risk_Flag, palette='muted')\n","8f5fc991":"sns.countplot(x=trainData.Car_Ownership, hue=trainData.Risk_Flag)","60a9bab2":"countMar=trainData.MaritalStatus.groupby(by=trainData.Risk_Flag).value_counts()\n\ncontTable = [[countMar[0][0], countMar[0][1]], [countMar[1][0], countMar[1][1]]]\ncontTable\n","e54d07af":"contHouseOwner = np.array(trainData.House_Ownership.groupby(by=trainData.Risk_Flag).value_counts())\ncontHouseOwner = np.split(contHouseOwner, 3)\ncontHouseOwner","a3a01aec":"contCar = np.array(trainData.Car_Ownership.groupby(by=trainData.Risk_Flag).value_counts())\ncontCar = np.split(contCar,2)\ncontCar","071b5988":"from scipy.stats import chi2_contingency\n\ndef hipotestchi(table):\n    \n    stat, p, dof, expected = chi2_contingency(table)\n    if p < 0.05:\n        return 'Reject H0, Dependent'\n    else:\n        return 'Fail to reject H0, Independent'","018161c4":"print(hipotestchi(contTable))\nprint(hipotestchi(contHouseOwner))\nprint(hipotestchi(contCar))","460c9cd6":"corr_col=['Income', 'Age', 'Experience', 'CURRENT_JOB_YRS', 'CURRENT_HOUSE_YRS','Risk_Flag']\ncorrmat = trainData[corr_col].corr()\nplt.figure(figsize=(10, 8))\n\nsns.heatmap(corrmat, annot=True, linewidth=0.5)","cde1ccf8":"cols = ['Income', 'Age', 'Experience', 'CURRENT_HOUSE_YRS', 'Car_Ownership', 'House_Ownership', 'MaritalStatus', 'Risk_Flag']\n\ndataTrain = trainData[cols]\ndataTrain.head()","3767f548":"dataTrain.Car_Ownership = dataTrain.Car_Ownership.replace({'yes': 1, 'no':0})\ndataTrain.head()","ce124d07":"dataTrain.MaritalStatus=dataTrain.MaritalStatus.replace({'single':0, 'married':1})","1062762b":"dataTrain.House_Ownership.unique()","105c864e":"dataTrain.House_Ownership = dataTrain.House_Ownership.replace({'rented':0, 'norent_noown':1, 'owned':2})\ndataTrain = dataTrain.rename(columns={'CURRENT_HOUSE_YRS':'Chouse_Years'})\ndataTrain.head()","8766e622":"y = dataTrain['Risk_Flag']\nX = dataTrain.drop('Risk_Flag', axis=1)","210a8bb7":"from imblearn.over_sampling import SMOTE\n\noversampler = SMOTE()\nX, y = oversampler.fit_resample(X, y)\n\nax=sns.countplot(x = y, palette = 'muted')\nax.set_title('Dataset after oversampling')","b7592487":"X.head()","efa3cdb3":"temp = X[['Income', 'Age', 'Experience', 'Chouse_Years']]\nscaler = MinMaxScaler()\nX_std = pd.DataFrame(scaler.fit_transform(temp), columns=['Income', 'Age', 'Experience', 'Chouse_Years'])\nX_std.head()","6c55acbc":"temp2 = X[['Car_Ownership', 'House_Ownership', 'MaritalStatus']]\ntemp2.index=X_std.index\nX_fix = pd.concat([X_std, temp2], axis=1)\nX_fix.head()","cdf722bb":"x_train, x_valid, y_train, y_valid = train_test_split(X_fix, y, test_size=0.2, random_state=0)\n\nprint(x_train.shape, y_train.shape)\nprint(x_valid.shape, y_valid.shape)","d4d7a91c":"logModel = LogisticRegression()\nlogModel.fit(x_train, y_train)\nlogPred = logModel.predict(x_valid)\nprint(classification_report(y_valid, logPred))","05ae409e":"params = {'penalty':['l1', 'l2'],\n         'solver':['liblinear'],\n          'C':np.logspace(-4, 4, 20)\n         }\n\nCV = GridSearchCV(logModel, params, scoring='accuracy', cv=5)\nCV.fit(x_train, y_train)\n\nprint(CV.best_score_)\nprint(CV.best_params_)","a184f38b":"rfModel = RandomForestClassifier()\nrfModel.fit(x_train, y_train)\nrfPred = rfModel.predict(x_valid)\nprint(classification_report(y_valid, rfPred))","21cefee3":"cm = confusion_matrix(y_valid, rfPred)\ncmDisplay = ConfusionMatrixDisplay(cm).plot()","48e2a679":"print('The accuracy of the trained model {}'.format(accuracy_score(y_valid, rfPred)*100))\nprint('The ROC AUC score of the trained model {}'.format(roc_auc_score(y_valid, rfPred)*100))","3b15f0eb":"datatest = pd.read_csv(test_path, index_col='ID')\ndatatest.head()","059a7ca3":"datatest.rename(columns={'Married\/Single':'MaritalStatus', 'CURRENT_HOUSE_YRS':'Chouse_Years'}, inplace=True)\ncols = ['Income', 'Age', 'Experience', 'MaritalStatus', 'House_Ownership', 'Car_Ownership', 'Chouse_Years']\ndataTest = datatest[cols]\ndataTest.head()","e8e71e5a":"dataTest.House_Ownership.unique()","f9dea45d":"dataTest.MaritalStatus = dataTest.MaritalStatus.replace({'single':0, 'married':1})\ndataTest.Car_Ownership = dataTest.Car_Ownership.replace({'no':0, 'yes':1})\ndataTest.House_Ownership = dataTest.House_Ownership.replace({'rented':0, 'norent_noown':1, 'owned':2})\ndataTest.head()","b95f8ed9":"temp = dataTest[['Income', 'Age', 'Experience', 'Chouse_Years']]\nscaler = MinMaxScaler()\ntemp_std = pd.DataFrame(scaler.fit_transform(temp), columns=['Income', 'Age', 'Experience', 'Chouse_Years'])\n\ntemp_std.head()","32416be1":"temp2 = dataTest[['MaritalStatus', 'House_Ownership', 'Car_Ownership']]\n\ntemp2.index = temp_std.index\nx_test = pd.concat([temp_std, temp2], axis=1)\nx_test.head()","289e35a6":"rfTestPred = rfModel.predict(x_test)","af7ed2ec":"## Model Building","2bac4fde":"## Data Loading","b1609eb3":"# Loan Defaulter Analysis\n\nIn this chance I will do some analysis and make a model to predict the loan application accepted or not. The most important question of this case is **\"How can we know a person's loan application accepted or not?** . ","e6131472":"## Exploratory Data Analysis","cf91fb85":"## Data Preparation"}}