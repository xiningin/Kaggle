{"cell_type":{"233216d8":"code","5bc17276":"code","a418db86":"code","375a3146":"code","eb822bf8":"code","ef23e718":"code","d24da9cd":"code","16b88897":"code","1d92464f":"code","27d25c8d":"code","684edd3c":"code","b6108f91":"code","4711a9d6":"code","c3c888a5":"code","91749e4a":"code","358da758":"code","c896800f":"markdown","b0d27df5":"markdown","8d061375":"markdown","5e6779ef":"markdown","851620c4":"markdown","245189de":"markdown","565534bb":"markdown","3900d55a":"markdown","70c96b4d":"markdown"},"source":{"233216d8":"import sys\nimport os\nimport math\nimport time\nimport random\nimport shutil\nfrom pathlib import Path\nimport seaborn as sns; sns.set()\nimport scipy as sp\nfrom sklearn.metrics import roc_auc_score\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\n%matplotlib inline\nimport matplotlib.pyplot as plt \nimport warnings\nfrom sklearn.metrics import roc_curve\nwarnings.simplefilter('ignore')","5bc17276":"train = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/train.csv')\ntrain","a418db86":"train.isnull().sum()","375a3146":"target = train.claim\ntrain = train.drop(['claim'],axis=1)","eb822bf8":"target.hist()","ef23e718":"test = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/test.csv')\ntest","d24da9cd":"scaler = StandardScaler()\nfeature_name = train.columns\ntrain[feature_name] = scaler.fit_transform(train[feature_name])\ntest[feature_name] = scaler.transform(test[feature_name])\n\ntrain[feature_name] = train[feature_name].fillna(train[feature_name].mean())\ntest[feature_name] = test[feature_name].fillna(test[feature_name].mean())","16b88897":"train['n_missing'] = train[feature_name].isna().sum(axis=1)\ntest['n_missing'] = test[feature_name].isna().sum(axis=1)\n\ntrain['std'] = train[feature_name].std(axis=1)\ntest['std'] = test[feature_name].std(axis=1)\n\nfeature_name += ['n_missing', 'std']","1d92464f":"test.isnull().sum()","27d25c8d":"sub = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/sample_solution.csv')\nsub","684edd3c":"from sklearn.model_selection import train_test_split\nimport lightgbm as lgb\nfrom sklearn.metrics import accuracy_score\n#!pip install optuna\nimport optuna \nimport optuna.integration.lightgbm as lgbo\n\nparams = {'objective': 'binary',  'metric': 'binary_logloss','importance_type': 'gain' } \nfrom sklearn.metrics import mean_absolute_error\nx_train, x_test, y_train, y_test = train_test_split(train, target, test_size=0.3, random_state=42)\nlgb_train = lgb.Dataset(x_train, y_train)\nlgb_valid = lgb.Dataset(x_test, y_test)\nmodel = lgbo.train(params, lgb_train, valid_sets=[lgb_valid], verbose_eval=False, num_boost_round=100, early_stopping_rounds=5) \nmodel.params","b6108f91":"best_lgb_params =model.params\nbest_lgb_params[\"learning_rate\"] = 0.006\nbest_lgb_params[\"early_stopping_round\"] = 200\nbest_lgb_params[\"num_iterations\"] = 80000","4711a9d6":"from sklearn.model_selection import KFold\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\nspl=5\nkf = KFold(n_splits=spl, random_state=77, shuffle=True)\nmodels =[]\nfor fold, (trn_idx, val_idx) in enumerate(kf.split(train, target)):\n\n    print(\"Fold :\", fold+1)\n    \n    # create dataset\n    x_train, y_train = train.loc[trn_idx], target.loc[trn_idx]\n    x_test,  y_test = train.loc[val_idx], target.loc[val_idx]\n \n    #x_train, x_test, y_train, y_test = train_test_split(train, target, test_size=0.2, random_state=42)\n    lgb_train = lgb.Dataset(x_train, y_train)\n    lgb_valid = lgb.Dataset(x_test, y_test)\n \n    model = lgb.train(best_lgb_params,lgb_train, valid_sets=[lgb_valid], eval_metric='auc',verbose_eval=100)\n    lpred = model.predict(x_test)\n\n    models.append(model)\n    \n    #print('#### fold #########',roc_curve(y_test, lpred))","c3c888a5":"lpred=[]\nfor model in models:\n   lpred.append(model.predict(x_test))\npred=lpred[0]\nfor i in range(1,spl):\n   pred += lpred[i]\npred = pred \/spl\nprint('#### fold #########',roc_auc_score(y_test, pred))","91749e4a":"\nlpred=[]\nfor model in models:\n   lpred.append(model.predict(test))\npred=lpred[0]\nfor i in range(1,spl):\n   pred += lpred[i]\npred = pred \/spl\npred","358da758":"sub.claim = pred\nsub.to_csv('submit.csv',index=False)\nsub","c896800f":"\ud83d\ude3a\ud83d\ude05\u3299\ud83d\udd30\ud83d\uddd1\u2b1b\ud83d\udfe5\ud83d\udfe8\ud83d\udfe9","b0d27df5":"<span style=\"color: orange; font-family: Segoe UI; font-size: 1.9em; font-weight: 300;\">Inference<\/span>","8d061375":"<span style=\"color: orange; font-family: Segoe UI; font-size: 1.9em; font-weight: 300;\">Training<\/span>","5e6779ef":"<span style=\"color: orange; font-family: Segoe UI; font-size: 1.9em; font-weight: 300;\">Optuna<\/span>","851620c4":"![image.png](attachment:e9c2a90a-4197-4d29-bb42-1250920e27eb.png)","245189de":"<span style=\"color: orange; font-family: Segoe UI; font-size: 1.9em; font-weight: 300;\">Evaluation<\/span>","565534bb":"### <span style=\"color: orange; font-family: Segoe UI; font-size: 1.9em; font-weight: 300;\">Very Simple Optuna+LightGBM<\/span>","3900d55a":" <span style=\"color: orange; font-family: Segoe UI; font-size: 1.9em; font-weight: 300;\">Look datas<\/span>","70c96b4d":"![image.png](attachment:a73ea576-be58-40f8-b350-83ae6cf5d64f.png)"}}