{"cell_type":{"8d9ab66a":"code","d519d47a":"code","5b18f26b":"code","c33c9881":"code","c34db072":"code","7b0af805":"code","295b76d6":"code","be808892":"code","ab2caee5":"code","aae08ae8":"code","3d73ba79":"code","9b47d7bd":"code","0c745346":"code","4d2b4494":"code","345a8086":"code","e9fca436":"code","5ef8d024":"code","1b0dda00":"code","bfa9b6e1":"code","26e43d01":"code","3192ce95":"code","2d56623b":"code","38470db2":"code","28753e88":"code","f9a72269":"code","7012de3e":"code","820941a0":"code","e36ce7e0":"code","7883b1b0":"code","b4074842":"code","5daf55aa":"code","d368d952":"code","2aff30fa":"code","c7c47665":"code","6c8b5e2f":"code","b8ada836":"code","9cfa1078":"code","0a7a9e60":"code","670efbcd":"code","1553c0cf":"code","a6a33795":"code","f847e2e8":"code","224cae06":"code","9f4ff725":"code","087e9728":"code","be07ec79":"code","92830c2e":"code","d44a6706":"code","6f5fcd9b":"code","39fff403":"code","09a08433":"code","6f3782b4":"code","0c777ed9":"code","48b2e769":"code","62ef26f5":"code","4d22ca1e":"code","f6e9b3eb":"code","1545fd24":"code","87bc60c9":"code","983b8e80":"code","4e3d67c4":"code","b0cad023":"markdown","9ec29b5a":"markdown","42440310":"markdown","c0ad2a11":"markdown","16bb9e64":"markdown","535ff6a1":"markdown","a23525c6":"markdown","116d7507":"markdown","18e4b3c2":"markdown","fa04282d":"markdown","b2d93c9a":"markdown","be6e2823":"markdown","d80fe95a":"markdown","84d1bf87":"markdown","3c850319":"markdown","f33d02f9":"markdown","73278036":"markdown","f696157f":"markdown","ecf41abe":"markdown","426f10a4":"markdown","69730d0b":"markdown","25d47e4d":"markdown","fabbf2ee":"markdown","b3d20220":"markdown","b501c9b9":"markdown","216f38ac":"markdown","10ac96d2":"markdown","5b415469":"markdown","fd013a10":"markdown","607d2075":"markdown","797ef9af":"markdown","eefe7830":"markdown","8c97f833":"markdown","059d2490":"markdown","4e7dc043":"markdown","5968726f":"markdown","4393e59b":"markdown","e1d36597":"markdown","07e1560b":"markdown","b1968db7":"markdown","b8b8234d":"markdown"},"source":{"8d9ab66a":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy.stats as st\n\nfrom sklearn.impute import KNNImputer\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder, MinMaxScaler\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nfrom sklearn.model_selection import train_test_split, RandomizedSearchCV, cross_val_score\nfrom sklearn.metrics import accuracy_score\n\nimport warnings\nwarnings.filterwarnings('ignore')\nsns.set()","d519d47a":"train = pd.read_csv(\"..\/input\/d\/rahulsah06\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/d\/rahulsah06\/titanic\/test.csv\")","5b18f26b":"train.info(), test.info()","c33c9881":"plt.scatter(train['PassengerId'],train['Survived'])\nplt.show()","c34db072":"print(\"Percentage of unique values: {}\".format(\n    train['PassengerId'].nunique()\/len(train['PassengerId']) * 100))","7b0af805":"train.drop(\"PassengerId\", axis=1, inplace=True)\ntest.drop(\"PassengerId\", axis=1, inplace=True)","295b76d6":"sns.barplot('Pclass','Survived',data=train)\nplt.show()","be808892":"sns.countplot(train['Pclass'],hue=train['Survived'])\nplt.legend((\"Died\",\"Survived\"))\nplt.show()","ab2caee5":"train.Pclass.value_counts()\/len(train.Pclass) * 100 #Percentage of categories","aae08ae8":"print(\"Percentage of unique values: {}\".format(train.Name.nunique()\/len(train.Name) * 100))","3d73ba79":"train.drop(\"Name\", axis=1, inplace=True)\ntest.drop(\"Name\", axis=1, inplace=True)","9b47d7bd":"sns.countplot(train.Sex,hue=train.Survived)\nplt.legend((\"Died\",\"Survived\"))\nplt.show()","0c745346":"train.Sex.value_counts()\/len(train.Sex) * 100 #Percentage of categories","4d2b4494":"sns.boxplot(train.Survived,train.Age)\nplt.show()","345a8086":"encoder = LabelEncoder()\ntrain_temp_Sex = encoder.fit_transform(train.Sex)\ntest_temp_Sex = encoder.transform(test.Sex)\n\ntrain_temp_Embarked = encoder.fit_transform(train.Embarked)\ntest_temp_Embarked = encoder.transform(test.Embarked)\n\ntrain_temp = train.drop([\"Sex\",\"Embarked\",\"Cabin\",\"Ticket\",\"Survived\"],axis=1)\ntest_temp = test.drop([\"Sex\",\"Embarked\",\"Cabin\",\"Ticket\"],axis=1)\n\ntrain_temp['Sex'] = train_temp_Sex\ntest_temp['Sex'] = test_temp_Sex\n\ntrain_temp['Embarked'] = train_temp_Embarked\ntest_temp['Embarked'] = test_temp_Embarked","e9fca436":"scaler = MinMaxScaler()\ntrain_temp = pd.DataFrame(scaler.fit_transform(train_temp),columns=train_temp.columns)\ntest_temp = pd.DataFrame(scaler.transform(test_temp),columns=test_temp.columns)","5ef8d024":"imputer = KNNImputer(n_neighbors=5)\ntrain_temp = pd.DataFrame(imputer.fit_transform(train_temp),columns=train_temp.columns)\ntest_temp = pd.DataFrame(imputer.transform(test_temp),columns=test_temp.columns)","1b0dda00":"train_temp = pd.DataFrame(scaler.inverse_transform(train_temp),columns=train_temp.columns)\ntest_temp = pd.DataFrame(scaler.inverse_transform(test_temp),columns=test_temp.columns)","bfa9b6e1":"train.Age = train_temp.Age\ntest.Age = test_temp.Age","26e43d01":"train.Age.isnull().sum(), test.Age.isnull().sum()","3192ce95":"fig, axes = plt.subplots(nrows=1, ncols=2,figsize=(16, 5))\nax = sns.distplot(train[train.Sex=='female'][train.Survived==1]['Age'],label='Survived',bins=20,\n            kde=False, ax=axes[0])\nax = sns.distplot(train[train.Sex=='female'][train.Survived==0]['Age'],label='Died',bins=40,\n            kde=False, ax=axes[0])\nax.legend()\nax.set_title(\"Female\")\nax = sns.distplot(train[train.Sex=='male'][train.Survived==1]['Age'],label='Survived',bins=20,\n            kde=False, ax=axes[1])\nax = sns.distplot(train[train.Sex=='male'][train.Survived==0]['Age'],label='Died',bins=40,\n            kde=False, ax=axes[1])\nax.legend()\nax.set_title(\"Male\")\nplt.show()","2d56623b":"fig, axes = plt.subplots(nrows=1, ncols=3,figsize=(16, 5))\nax = sns.distplot(train[train.Pclass==1][train.Survived==1]['Age'],label='Survived',bins=20,\n            kde=False, ax=axes[0])\nax = sns.distplot(train[train.Pclass==1][train.Survived==0]['Age'],label='Died',bins=40,\n            kde=False, ax=axes[0])\nax.legend()\nax.set_title(\"Pclass 1\")\nax = sns.distplot(train[train.Pclass==2][train.Survived==1]['Age'],label='Survived',bins=20,\n            kde=False, ax=axes[1])\nax = sns.distplot(train[train.Pclass==2][train.Survived==0]['Age'],label='Died',bins=40,\n            kde=False, ax=axes[1])\nax.legend()\nax.set_title(\"Pclass 2\")\nax = sns.distplot(train[train.Pclass==3][train.Survived==1]['Age'],label='Survived',bins=20,\n            kde=False, ax=axes[2])\nax = sns.distplot(train[train.Pclass==3][train.Survived==0]['Age'],label='Died',bins=40,\n            kde=False, ax=axes[2])\nax.legend()\nax.set_title(\"Pclass 3\")\nplt.show()","38470db2":"train['Relatives'] = train['SibSp'] + train['Parch']\ntest['Relatives'] = test['SibSp'] + test['Parch']\n\ntrain.drop(['SibSp','Parch'], axis=1, inplace=True)\ntest.drop(['SibSp','Parch'], axis=1, inplace=True)","28753e88":"sns.factorplot('Relatives', 'Survived', data=train, aspect=2)\nplt.show()","f9a72269":"plt.figure(figsize=(16,5))\nsns.countplot(train[(train.Relatives >=1) & (train.Relatives <=3)].Relatives, \n              hue=train.Survived)\nplt.legend((\"Died\",\"Survived\"))\nplt.show()","7012de3e":"plt.figure(figsize=(16,5))\nsns.countplot(train[(train.Relatives >= 4)].Relatives, \n              hue=train.Survived)\nplt.legend((\"Died\",\"Survived\"))\nplt.show()","820941a0":"print(\"Percentage of unique values: {}\".format(train.Ticket.nunique()\/len(train.Ticket) * 100))","e36ce7e0":"pd.DataFrame(train.groupby(train.Ticket, as_index=False).Survived.sum()).plot()\nplt.xticks([])\nplt.title(\"Tickets\")\nplt.show()","7883b1b0":"train.drop(\"Ticket\", axis=1, inplace=True)\ntest.drop(\"Ticket\", axis=1, inplace=True)","b4074842":"plt.figure(figsize=(16,5))\nsns.distplot(train[train.Survived==0].Fare, label=\"Died\", kde=True, bins=60)\nsns.distplot(train[train.Survived==1].Fare, label=\"Survived\", kde=True)\nplt.legend()\nplt.show()","5daf55aa":"plt.figure(figsize=(16,5))\nsns.boxplot(train.Fare,train.Survived,orient='h')\nplt.show()","d368d952":"mean = np.mean(train.Fare)\nstd = np.std(train.Fare)\ndef z_score(value):\n    return (value-mean)\/std\ntrain_z = train.copy()\ntrain_z['Z'] = train_z.Fare.apply(z_score)","2aff30fa":"train_z[train_z['Z']>3]","c7c47665":"train_z['binFare'] = pd.cut(train_z.Fare.astype(int), \n                            range(0,600,50))\nsns.factorplot('binFare', 'Survived', data=train_z, aspect=2)\nplt.show()","6c8b5e2f":"test.Fare.isnull().sum()","b8ada836":"test.Fare = test.Fare.fillna(test.Fare.mean())","9cfa1078":"train_z.binFare.value_counts() \/ len(train_z) * 100","0a7a9e60":"train.Cabin.isnull().sum()\/len(train.Cabin) * 100","670efbcd":"train_c = train.copy()\ntrain_c['CabinClass'] = train_c.Cabin.str.slice(0,1)\ntrain_c.drop(\"Cabin\", axis=1, inplace=True)\ntrain_c = train_c.dropna()","1553c0cf":"plt.figure(figsize=(15,5))\nsns.countplot(train_c.CabinClass, hue=train_c.Survived)\nplt.legend((\"Died\",\"Survived\"))\nsns.factorplot('CabinClass', 'Fare', data=train_c, aspect=2)\nplt.show()","a6a33795":"train_c = train_c.join(pd.get_dummies(train_c.CabinClass, prefix='Cabin'))\ntrain_c.drop(\"CabinClass\", axis=1, inplace=True)","f847e2e8":"train_c.corr()['Pclass'].sort_values(ascending=False)","224cae06":"train_c.corr()['Fare'].sort_values(ascending=False)","9f4ff725":"train['CabinClass'] = train.Cabin.str.slice(0,1)\ntrain.drop(\"Cabin\", axis=1, inplace=True)\ntrain.CabinClass = train.CabinClass.fillna(\"N\")\n\ntest['CabinClass'] = test.Cabin.str.slice(0,1)\ntest.drop(\"Cabin\", axis=1, inplace=True)\ntest.CabinClass = test.CabinClass.fillna(\"N\")","087e9728":"train.Embarked.isnull().sum()","be07ec79":"train.Embarked = train.Embarked.fillna(train.Embarked.mode()[0])","92830c2e":"ig, axes = plt.subplots(nrows=1, ncols=2,figsize=(16, 5))\nax = sns.countplot(train[train.Sex=='male'].Embarked, hue=train.Survived, ax=axes[0])\nax.set_title(\"Male\")\nax.legend((\"Died\",\"Survived\"))\nax = sns.countplot(train[train.Sex=='female'].Embarked, hue=train.Survived, ax=axes[1])\nax.set_title(\"Female\")\nax.legend((\"Died\",\"Survived\"))\nplt.show()","d44a6706":"FacetGrid = sns.FacetGrid(train, row='Embarked', aspect=2.6)\nFacetGrid.map(sns.pointplot, 'Pclass', 'Survived', 'Sex')\nFacetGrid.add_legend()\nplt.show()","6f5fcd9b":"train.Embarked.value_counts()\/len(train.Embarked) * 100","39fff403":"train.head()","09a08433":"le = LabelEncoder()\ntrain.Sex = le.fit_transform(train.Sex)\ntest.Sex = le.transform(test.Sex)\ntrain.Embarked = le.fit_transform(train.Embarked)\ntest.Embarked = le.transform(test.Embarked)\ntrain.CabinClass = le.fit_transform(train.CabinClass)\ntest.CabinClass = le.transform(test.CabinClass)","6f3782b4":"X = train.drop(\"Survived\", axis=1).values\ny = train[\"Survived\"].values","0c777ed9":"rf_model = RandomForestClassifier(n_estimators=250, n_jobs=-1, random_state=42)\nrf_model.fit(X,y)","48b2e769":"features = train.drop(\"Survived\", axis=1).columns\nimportances = rf_model.feature_importances_\nindices = np.argsort(importances)\nplt.figure(figsize=(16,5))\nplt.barh(range(len(indices)), importances[indices])\nplt.yticks(range(len(indices)), [features[i] for i in indices])\nplt.xlabel('Relative Importance')\nplt.title(\"Feature Importance\")\nplt.show()","62ef26f5":"X.shape, y.shape","4d22ca1e":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.25, random_state=42)\nprint(X_train.shape, y_train.shape)\nprint(X_test.shape, y_test.shape)","f6e9b3eb":"rf_model = RandomForestClassifier(n_estimators=200, n_jobs=-1, random_state=42)\nrf_model.fit(X_train,y_train)\ny_pred = rf_model.predict(X_test)\nprint(accuracy_score(y_test, y_pred))","1545fd24":"gb_model = GradientBoostingClassifier(n_estimators=200, random_state=42)\ngb_model.fit(X_train,y_train)\ny_pred = gb_model.predict(X_test)\nprint(accuracy_score(y_test, y_pred))","87bc60c9":"param_grid ={'max_depth': [1,2,3,4,5],\n             'n_estimators':[100,200,300,400,500],\n             'max_features':[1,2,3,4,5],\n            'max_leaf_nodes':[1,2,3,4,5]}\ngrid = RandomizedSearchCV(gb_model, param_grid, cv=10, scoring='accuracy', verbose=1, \n                          n_iter=20)\ngrid.fit(X, y)\ngrid.best_estimator_","983b8e80":"grid.best_score_","4e3d67c4":"predictions = grid.best_estimator_.predict(test)\nsubmission = pd.read_csv(\"..\/input\/d\/rahulsah06\/titanic\/gender_submission.csv\")\noutput = {'PassengerId':submission['PassengerId'], 'Survived':predictions}\npd.DataFrame(output).to_csv(\"Result\",index=False)","b0cad023":"# Analysis: Embarked","9ec29b5a":"Conclusion: A person with 1-3 relatives is more likely to survive","42440310":"Task1: Encode","c0ad2a11":"Potential outliers","16bb9e64":"# Task: Make Predictions!","535ff6a1":"# Analysis: Name","a23525c6":"Task2: Scale","116d7507":"# Importing Dependencies","18e4b3c2":"Filling Null Values","fa04282d":"# TASK: Feature Importance using RandomForrestClassifier","b2d93c9a":"# Analysis: PassengerID","be6e2823":"# Analysis: Fare","d80fe95a":"# Analysis: Sex","84d1bf87":"# Treating Outliers using Z-Score","3c850319":"Conclusion: A person who is younger is more likely to survive","f33d02f9":"# Analysis: PClass","73278036":"GradientBoosting Classifier","f696157f":"# Analysis: Ticket","ecf41abe":"Filling null values","426f10a4":"Conclusion: A Person with a first class ticket is more likely to survive","69730d0b":"Task4: Insert Back","25d47e4d":"Fill null values","fabbf2ee":"Conclusion: Irrelevant Feature","b3d20220":"Conclusion: A person who is female is more likely to survive","b501c9b9":"Conclusion: Irrelevent Feature","216f38ac":"# Understanding Data","10ac96d2":"# EDA Summary Points:\n\n1. A Person with a first class ticket is more likely to survive\n2. A person who is female is more likely to survive\n3. A person who is younger is more likely to survive\n4. A person with 1-3 relatives is more likely to survive\n5. A person who pays more as Fare is more likely to survive\n6. A person with a premium cabin (B and C) is more likely to Survive\n7. A female person is more likely to survive if ported from 'S' or 'Q' and men from 'C'","5b415469":"# Analysis: Cabin","fd013a10":"# Analysis: Age","607d2075":"Conclusion: A person with a premium cabin (B and C) is more likely to Survive","797ef9af":"# TASK: Hyper-Parameter Tuning","eefe7830":"Conclusion: Irrelevant Feature","8c97f833":"RandomForest Classifier","059d2490":"# Analysis: SibSp : # of siblings \/ spouses aboard the Titanic\n\n# Analysis: Parch : # of parents \/ children aboard the Titanic","4e7dc043":"# Filling Null Values using KNN Imputer","5968726f":"# Importing Data","4393e59b":"Task3: Impute","e1d36597":"Conclusion: Women are more likely to survive if ported from 'Southhampton' or 'Queenstown'\n\nMen are more likely to survive if ported from 'Cherbourg'","07e1560b":"# TASK: EDA and Data Cleaning","b1968db7":"Conclusion: A person who pays more as Fare is more likely to survive","b8b8234d":"## Hi! \n\nIn this notebook you will find:\n1. Exploratory Data Analysis\n2. Feature Engineering\n3. Handling null values using KNN-Imputation\n4. Outlier Detection using Z-Score\n5. Feature Importance using Random-Forest\n6. Modelling using Gradient-Boosting Classififer\n\nGive me an upvote if you like my work and please comment your feedback! "}}