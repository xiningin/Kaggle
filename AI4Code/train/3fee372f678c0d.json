{"cell_type":{"17d5f535":"code","878ebeb2":"code","2d452d9f":"code","17c31421":"code","9bfd4737":"code","b5fc51c2":"code","bd201310":"code","1783fcce":"code","b98fc928":"code","178ab3a5":"code","a017aeea":"code","73c3e440":"code","273c3f14":"code","6dc7bc28":"code","43dc602e":"code","0dab444c":"code","b0f133e8":"code","69249ed3":"code","d6f6f45c":"code","6b774b80":"code","30466f70":"code","371b1dd0":"code","7283ffe6":"code","f2f094df":"code","b601c599":"code","92791c9e":"code","354aa31e":"code","d1619eeb":"code","e2db0794":"code","a229feab":"code","d4c51a21":"code","1ce0335e":"code","08fedd61":"code","05a19714":"code","793eda73":"code","0fe7db63":"code","18dcf392":"code","a05810ce":"code","f11b55d6":"code","b20a3cde":"code","e2cb2948":"code","cea10ac8":"code","84fbd97b":"code","5ffbfc56":"code","9fc2a1ad":"code","2fd88bef":"code","0b3cde27":"code","b8f26c95":"code","8b47de84":"code","0a179a22":"code","f1fd9c47":"code","4bd9cde2":"code","7b8403b8":"code","5b3abc6e":"code","adbfa64c":"code","178056e2":"code","b68e4db5":"code","462825f4":"markdown","dbbeaeb2":"markdown","a51063f7":"markdown","5740efa3":"markdown","1f89976a":"markdown","be087366":"markdown"},"source":{"17d5f535":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.linear_model import LogisticRegression  \nfrom sklearn.neighbors import KNeighborsClassifier  \nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier \nfrom sklearn.ensemble import RandomForestClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import preprocessing\nfrom sklearn.metrics import accuracy_score\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score, GridSearchCV\n\n\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning) \nwarnings.filterwarnings(\"ignore\", category=FutureWarning) \nwarnings.filterwarnings(\"ignore\", category=UserWarning) \n\n%config InlineBackend.figure_format = 'retina'\n\n# to display all columns and rows:\npd.set_option('display.max_columns', None); pd.set_option('display.max_rows', None);\n\ndf = pd.read_csv(\"\/kaggle\/input\/churn-predictions-personal\/Churn_Predictions.csv\", index_col=0)\ndf.head()","878ebeb2":"df[df[\"Balance\"]==0].groupby([\"NumOfProducts\"]).agg({\"EstimatedSalary\":\"mean\"})","2d452d9f":"df.info()","17c31421":"df.shape","9bfd4737":"df.describe([0.10,0.25,0.50,0.75,0.90,0.95,0.99]).T","b5fc51c2":"from pandas_profiling import ProfileReport\n\nprofile = ProfileReport(df, title=\"Pandas Profiling Report\", progress_bar=False)\nprofile.to_widgets()","bd201310":"df.shape","1783fcce":"df[\"CreditScore\"].plot.hist(bins=10, alpha=0.5)","b98fc928":"df[\"Geography\"].value_counts()","178ab3a5":"df[\"Gender\"].value_counts()","a017aeea":"df.groupby([\"Geography\",\"Gender\",\"Exited\"]).agg({\"Exited\":\"count\"})","73c3e440":"df[\"Age\"].plot.hist(bins=10, alpha=0.5)","273c3f14":"df[\"Tenure\"].plot.hist(bins=10, alpha=0.5)","6dc7bc28":"df[\"Balance\"].plot.hist(bins=10, alpha=0.5)","43dc602e":"df[\"NumOfProducts\"].value_counts()","0dab444c":"df[\"HasCrCard\"].value_counts()","b0f133e8":"df[\"IsActiveMember\"].value_counts()","69249ed3":"df[\"EstimatedSalary\"].plot.hist(bins=10, alpha=0.5)","d6f6f45c":"f, ax = plt.subplots(1, 2, figsize = (15, 7))\nf.suptitle(\"Churn?\", fontsize = 18.)\n_ = df.Exited.value_counts().plot.bar(ax = ax[0], rot = 0, color = (sns.color_palette()[0], sns.color_palette()[2])).set(xticklabels = [\"No\", \"Yes\"])\n_ = df.Exited.value_counts().plot.pie(labels = (\"No\", \"Yes\"), autopct = \"%.2f%%\", label = \"\", fontsize = 13., ax = ax[1],\\\ncolors = (sns.color_palette()[0], sns.color_palette()[2]), wedgeprops = {\"linewidth\": 1.5, \"edgecolor\": \"#F7F7F7\"}), ax[1].texts[1].set_color(\"#F7F7F7\"), ax[1].texts[3].set_color(\"#F7F7F7\")","6b774b80":"df.drop([\"CustomerId\", \"Surname\"], axis = 1, inplace = True)","30466f70":"df.isnull().sum()","371b1dd0":"for feature in df.select_dtypes(include=['float',\"int\"]):\n    \n    Q1 = df[feature].quantile(0.05)\n    Q3 = df[feature].quantile(0.95)\n    IQR = Q3-Q1\n    lower = Q1- 1.5*IQR\n    upper = Q3 + 1.5*IQR\n    \n    if df[(df[feature] > upper)].any(axis=None):\n        print(feature,\"yes\")\n    else:\n        print(feature, \"no\")","7283ffe6":"# Correlation matrix graph of the data set\nf, ax = plt.subplots(figsize= [15,10])\nsns.heatmap(df.corr(), annot=True, fmt=\".2f\", ax=ax, cmap = \"magma\" )\nax.set_title(\"Correlation Matrix\", fontsize=20)\nplt.show()","f2f094df":"df.groupby([\"NumOfProducts\",\"Exited\"]).agg({\"Exited\":\"count\"})","b601c599":"cat_df = df[[\"Geography\",\"Gender\"]]","92791c9e":"bool_df = df[[\"IsActiveMember\",\"HasCrCard\"]]","354aa31e":"df.drop([\"IsActiveMember\",\"HasCrCard\",\"Geography\",\"Gender\"], axis = 1, inplace = True)","d1619eeb":"cat_df = pd.get_dummies(cat_df, drop_first=True)","e2db0794":"y = df[\"Exited\"]\nX = df.drop([\"Exited\"], axis = 1)\ncols = X.columns\nindex = X.index","a229feab":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nX = scaler.fit_transform(X)\nX = pd.DataFrame(X,columns=cols,index=index)\nX = pd.concat([X,bool_df,cat_df],axis=1)","d4c51a21":"X_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=12345)","1ce0335e":"#Dengesiz bir veri seti oldu\u011fu i\u00e7in \u00f6rneklem say\u0131s\u0131n\u0131 artt\u0131raca\u011f\u0131z\nfrom imblearn.combine import SMOTETomek\n\nsmk = SMOTETomek()\nX_train, y_train = smk.fit_sample(X_train, y_train)\n\nX_test, y_test = smk.fit_sample(X_test, y_test)","08fedd61":"# Tum modellerin train validasyon skorlar\u0131\n\nmodels = []\nmodels.append(('LR', LogisticRegression( random_state = 12345)))\nmodels.append(('KNN', KNeighborsClassifier()))\nmodels.append(('CART', DecisionTreeClassifier( random_state = 12345)))\nmodels.append(('RF', RandomForestClassifier( random_state = 12345)))\nmodels.append(('SVM', SVC(gamma='auto', random_state = 12345)))\nmodels.append(('XGB', GradientBoostingClassifier( random_state = 12345)))\nmodels.append((\"LightGBM\", LGBMClassifier( random_state = 12345)))\n\n# evaluate each model in turn\nresults = []\nnames = []","05a19714":"for name, model in models:\n    \n        base = model.fit(X_train,y_train)\n        y_pred = base.predict(X_test)\n        acc_score = accuracy_score(y_test, y_pred)\n        results.append(acc_score)\n        names.append(name)\n        msg = \"%s: %f\" % (name, acc_score)\n        print(msg)","793eda73":"# Tum modellerin de\u011fi\u015fken \u00f6nem d\u00fczeyleri\n\nmodels2 = []\nmodels2.append(('CART', DecisionTreeClassifier( random_state = 12345)))\nmodels2.append(('RF', RandomForestClassifier( random_state = 12345)))\nmodels2.append(('XGB', GradientBoostingClassifier( random_state = 12345)))\nmodels2.append((\"LightGBM\", LGBMClassifier( random_state = 12345)))","0fe7db63":"for name, model in models2:\n        base = model.fit(X_train,y_train)\n        y_pred = base.predict(X_test)\n        acc_score = accuracy_score(y_test, y_pred)\n        feature_imp = pd.Series(base.feature_importances_,\n                        index=X.columns).sort_values(ascending=False)\n\n        sns.barplot(x=feature_imp, y=feature_imp.index)\n        plt.xlabel('De\u011fi\u015fken \u00d6nem Skorlar\u0131')\n        plt.ylabel('De\u011fi\u015fkenler')\n        plt.title(name)\n        plt.show()","18dcf392":"from sklearn.metrics import  accuracy_score, f1_score, precision_score,confusion_matrix, recall_score, roc_auc_score\ny_pred = model.predict(X_test)\ncm_xgb = confusion_matrix(y_test, y_pred=y_pred)","a05810ce":"TP = cm_xgb[1, 1]\nTN = cm_xgb[0, 0]\nFP = cm_xgb[0, 1]\nFN = cm_xgb[1, 0]","f11b55d6":"from matplotlib import rc,rcParams\ndef plot_confusion_matrix(cm, classes,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n\n    plt.rcParams.update({'font.size': 19})\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title,fontdict={'size':'16'})\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45,fontsize=12,color=\"blue\")\n    plt.yticks(tick_marks, classes,fontsize=12,color=\"blue\")\n    rc('font', weight='bold')\n    fmt = '.1f'\n    thresh = cm.max()\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], fmt),\n                 horizontalalignment=\"center\",\n                 color=\"red\")\n\n    plt.ylabel('True label',fontdict={'size':'16'})\n    plt.xlabel('Predicted label',fontdict={'size':'16'})\n    plt.tight_layout()","b20a3cde":"import itertools\nplot_confusion_matrix(confusion_matrix(y_test, y_pred=y_pred), classes=['Non Churn','Churn'],\n                      title='Confusion matrix')","e2cb2948":"tn, fp, fn, tp = cm_xgb.ravel()\nprint(\"True Negatives: \",tn)\nprint(\"False Positives: \",fp)\nprint(\"False Negatives: \",fn)\nprint(\"True Positives: \",tp)","cea10ac8":"df_pred = pd.DataFrame(data=[],columns=[\"y_test\"])\ndf_pred[\"y_pred\"] = y_pred\ndf_pred[\"y_test\"] = y_test\ndf_pred.index = df_pred.index + 1","84fbd97b":"df_pred.head()","5ffbfc56":"FP_predicts_indexes = [] \nTP_predicts_indexes=[]\nFN_predicts_indexes =[]\nTN_predicts_indexes  = []\nfor index, row in df_pred.iterrows():\n    if row['y_test'] == 0 and row['y_pred'] == 1:\n        FP_predicts_indexes.append(row.name)\n    elif row['y_test'] == 1 and row['y_pred'] == 1:\n        TP_predicts_indexes.append(row.name)\n    elif row['y_test'] == 0 and row['y_pred'] == 0:\n        TN_predicts_indexes.append(row.name)\n    elif row['y_test'] == 1 and row['y_pred'] == 0:\n        FN_predicts_indexes.append(row.name)","9fc2a1ad":"#ger\u00e7ekte diyabet olmayan do\u011fru non-diyabet tahminler\ndf_pred.loc[TN_predicts_indexes,\"tahmin_sonuc\"] = \"TN\"\n#ger\u00e7ekte diyabet olan do\u011fru tahmins\ndf_pred.loc[TP_predicts_indexes,\"tahmin_sonuc\"] = \"TP\"\n#ger\u00e7ekte diyabet olamayan yanl\u0131\u015f tahmins\ndf_pred.loc[FP_predicts_indexes,\"tahmin_sonuc\"] = \"FP\"\n#ger\u00e7ekte diyabet olan ama yanl\u0131\u015f te\u015fhisler\ndf_pred.loc[FN_predicts_indexes,\"tahmin_sonuc\"] = \"FN\"\ndf_pred.head()","2fd88bef":"X_test.index = X_test.index + 1\ndf_pred = pd.concat([df_pred,X_test],axis=1)","0b3cde27":"df_pred.shape","b8f26c95":"df_hata = df_pred[(df_pred[\"tahmin_sonuc\"]==\"FP\") | (df_pred[\"tahmin_sonuc\"]==\"FN\")]","8b47de84":"df_hata.head()","0a179a22":"df_hata[\"IsActiveMember\"].value_counts()","f1fd9c47":"df_hata[\"HasCrCard\"].value_counts()","4bd9cde2":"df_hata[\"Geography_Germany\"].value_counts()","7b8403b8":"df_hata[\"Geography_Spain\"].value_counts()","5b3abc6e":"df_hata[\"Gender_Male\"].value_counts()","adbfa64c":"rf_params = {\"n_estimators\" :[100,200,500], \n             \"max_features\": [3,5,8,], \n             \"min_samples_split\": [2,5,8],\n            \"max_depth\": [3,5,8]}\n\nrf_model = RandomForestClassifier(random_state = 12345)\n\ngs_cv = GridSearchCV(rf_model, \n                    rf_params,\n                    cv = 10,\n                    n_jobs = -1,\n                    verbose = 2).fit(X_train, y_train)\n\nrf_tuned = RandomForestClassifier(**gs_cv.best_params_,random_state=12345)\nrf_tuned = rf_tuned.fit(X_train,y_train)\ny_pred = rf_tuned.predict(X_test)\nacc_score = accuracy_score(y_test, y_pred)\nprint(acc_score)","178056e2":"xgb = GradientBoostingClassifier(random_state=12345)\n\nxgb_params = {\"n_estimators\": [100, 500, 1000],\n              \"subsample\" : [0.6, 0.8, 1.0],\n              \"max_depth\" : [3, 4, 5],\n              \"learning_rate\" : [0.1, 0.01, 0.05,],\n              \"min_samples_split\" : [2, 5, 10]}\n\nxgb_cv_model = GridSearchCV(xgb, \n                     xgb_params, \n                     cv = 5, \n                     n_jobs = -1, \n                     verbose = 2).fit(X_train,y_train)\n\nxgb_tuned = GradientBoostingClassifier(**xgb_cv_model.best_params_,random_state=12345)\nxgb_tuned = xgb_tuned.fit(X_train,y_train)\ny_pred = xgb_tuned.predict(X_test)\nacc_score = accuracy_score(y_test, y_pred)\nprint(acc_score)","b68e4db5":"lgbm = LGBMClassifier(random_state = 12345)\n\nlgbm_params = {\"learning_rate\": [0.01, 0.05, 0.1],\n              \"n_estimators\": [100, 500, 1000],\n              \"max_depth\":[3, 5, 8]}\n\ngs_cv = GridSearchCV(lgbm, \n                     lgbm_params, \n                     cv = 10, \n                     n_jobs = -1, \n                     verbose = 2).fit(X_train,y_train)\n\nlgbm_tuned = LGBMClassifier(**gs_cv.best_params_).fit(X_train,y_train)\ny_pred = lgbm_tuned.predict(X_test)\nacc_score = accuracy_score(y_test, y_pred)\nprint(acc_score)","462825f4":"# LGBM","dbbeaeb2":"![1.PNG](attachment:1.PNG)","a51063f7":"# Confusion Matrix","5740efa3":"# RF","1f89976a":"# XGBoost","be087366":"# Data Preprocessing"}}