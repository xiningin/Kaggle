{"cell_type":{"7018d091":"code","e78dfd92":"code","cc98b825":"code","57fe0193":"code","9422410f":"code","77f57648":"code","88717c5f":"code","eb115a05":"code","1f316998":"code","4b61a0be":"code","f53f5ed2":"code","cc80e460":"code","27cc91d8":"code","84789062":"code","50504a3a":"code","0bac344f":"code","6482b51d":"code","9d6fa5bd":"code","97cb03ea":"code","63d79541":"code","1e0f46be":"code","69985b45":"code","d40fcad6":"markdown"},"source":{"7018d091":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e78dfd92":"df = pd.read_csv('\/kaggle\/input\/iris\/Iris.csv')","cc98b825":"import tensorflow as tf","57fe0193":"tf.__version__","9422410f":"df.head()","77f57648":"df = pd.get_dummies(df)","88717c5f":"df.head()","eb115a05":"X=df.iloc[:,1:5].values\ny=df.iloc[:,5:].values","1f316998":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.15)","4b61a0be":"from sklearn.preprocessing import StandardScaler","f53f5ed2":"sc=StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","cc80e460":"ann = tf.keras.Sequential()","27cc91d8":"ann.add(tf.keras.layers.Dense(units=7,activation='relu'))\nann.add(tf.keras.layers.Dense(units=7,activation='relu'))\nann.add(tf.keras.layers.Dense(units=3,activation='softmax'))","84789062":"ann.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])","50504a3a":"ann.fit(X_train,y_train,batch_size=10,epochs=25)","0bac344f":"y_pred = ann.predict(X_test)","6482b51d":"y_pred = np.argmax(y_pred,axis=1)[:]","9d6fa5bd":"label = np.argmax(y_test,axis=1)[:]","97cb03ea":"for i in range(20):\n    print(\"Predicted %d---> Expected %d\"%(y_pred[i],label[i]))","63d79541":"from sklearn.metrics import confusion_matrix,accuracy_score\ncm = confusion_matrix(y_pred,label)\nacc = accuracy_score(y_pred,label)","1e0f46be":"cm","69985b45":"acc","d40fcad6":"Thank You For Your Time."}}