{"cell_type":{"7c7fdb50":"code","629b8584":"code","27c0242c":"code","4d1fea60":"code","fb48b434":"code","ed4375db":"code","c83b6b4b":"code","a24271d6":"code","50d581ea":"code","b7226969":"code","6f7afa90":"code","0f96f64f":"code","33446f72":"code","5f7df3b0":"code","9abd4875":"code","2589df1f":"code","2bb41b5e":"code","cf6ed218":"code","736e0a65":"code","ef07305e":"code","df23bb31":"code","a548fcd6":"markdown","518204fa":"markdown","398eff7a":"markdown","305ac2e6":"markdown","61ba42cf":"markdown","9b9cbb27":"markdown","36f92d13":"markdown","278e94e3":"markdown","cacce6a8":"markdown","742fa152":"markdown","8a701cdf":"markdown","02653893":"markdown","f46b74c9":"markdown","7fa2cfa5":"markdown","b759721f":"markdown","952d4d12":"markdown","cee5cf61":"markdown","fffa45dd":"markdown","33c3de69":"markdown","573f8dee":"markdown","06f47983":"markdown","b8d97bfd":"markdown","dcec24d5":"markdown","1ef1aa4b":"markdown","41ddb0a3":"markdown","e54737ea":"markdown","3312bece":"markdown","c4fa3c2a":"markdown","e4747333":"markdown","f94c9f60":"markdown","aa662219":"markdown","247e5fe4":"markdown","7565a17c":"markdown"},"source":{"7c7fdb50":"import pandas as pd\nimport gc","629b8584":"products = pd.read_csv('..\/input\/products.csv')\naisles = pd.read_csv('..\/input\/aisles.csv')\ndepartments = pd.read_csv('..\/input\/departments.csv')","27c0242c":"products.head()","4d1fea60":"aisles.head()","fb48b434":"departments.head()","ed4375db":"aisles[aisles.aisle_id == 61]","c83b6b4b":"departments[departments.department_id == 19]","a24271d6":"new_products = pd.merge(products,aisles,on=\"aisle_id\", how=\"left\")\nnew_products.head()","50d581ea":" new_products.columns = ['product_id','product_name', \"aisle_id\", \"departments_id\",\"aisle\"]\n new_products.head()","b7226969":"final_products = pd.merge(new_products,departments,left_on=\"departments_id\",right_on=\"department_id\",how=\"left\")\nfinal_products.head()","6f7afa90":"final_products.product_name = final_products.product_name.str.replace(' ', '_').str.lower()\nfinal_products.department = final_products.department.str.replace(' ', '_').str.lower()\nfinal_products.aisle= final_products.aisle.str.replace(' ', '_').str.lower()\nfinal_products.head()","0f96f64f":"del final_products[\"aisle_id\"]\ndel final_products[\"departments_id\"]\ndel final_products[\"department_id\"]\nfinal_products.head()","33446f72":"orders = pd.read_csv('..\/input\/orders.csv' )\nop_prior = pd.read_csv('..\/input\/order_products__prior.csv')\nop_train = pd.read_csv('..\/input\/order_products__train.csv' )","5f7df3b0":"orders.head()","9abd4875":"op_prior.head()","2589df1f":"op_prior[op_prior.order_id == 2539329]","2bb41b5e":"op_train.head()","cf6ed218":"final_orders = pd.concat([op_prior, op_train])\nfinal_orders.head()","736e0a65":"#execution time 20s\nfinal_orders = pd.merge(final_orders , orders,how='left')\nfinal_orders.head()","ef07305e":"final_orders.sort_values(['order_id', 'add_to_cart_order'])\nfinal_orders.head()","df23bb31":"final = pd.merge(final_orders, final_products, how='left')\nfinal.head()","a548fcd6":"# Merging DataFrames","518204fa":"Which returns a DF with both op_prior & op_train. <br\/>\nNow on DF we will include all the relevant info for each order, from the DF \"orders\" <br\/>\nWe will use a left join to DF log, as we want to keep all the products purchased on each order, and we will merge it with \"orders\" DF to fetch all relevant info.","398eff7a":"What we can notice by looking at the dataframes of products, aisles and departments?\n\nAnswer: The dataframe of products includes some columns that we can also see in the dataframes of aisles and departments. <br\/>\nThe \"aisle_id\" which can be found on aisles DF & the \"department_id\" which can be found on departments DF.<br\/>\nIn reality, these columns on products DF indicate an index that match a record in the DFs aisle & departments\n\nSo for example, if we have a look in first product (product_id = 1) we see that: <br\/>\n\"Chocolate Sandwich Cookies\" belong to category with aisle_id = 61 <br\/>\nBe checking at the aisles DF the aisle_id=61:","305ac2e6":"Looking the \"head()\" function above we can observe that the name of the column <b>\"department_id\"<\/b> is now <b>\"departments_id\"<\/b>. As we said previously we would like to merge the dataframe \"new_products\" with the \"departments\". Looking more carefully we will see that the common column is the department_id but its name is different between the two dataframes. How will we handle it?","61ba42cf":"The gc can be proved really helpful for handling big DataFrames; as every DataFrame manipulation reserves a great amount of memory in our resources (e.g. the RAM memory), gc aims to clean unneeded reserved memory.<br\/>\nIn practice, it does not change anything in our computations, but it helps our machine (local or cloud) to better handle next requests.","9b9cbb27":"![CSV_NAMES](https:\/\/kaggle2.blob.core.windows.net\/forum-message-attachments\/183176\/6539\/instacartFiles.png)","36f92d13":"We see that \"Chocolate Sandwich Cookies\" also belong to the department \"snacks\" <br\/>\nSo, the information regarding the category and department **for each** product, can be found on the aisle & departments DFs. <br\/>\nThis means that we can <b>merge<\/b> these dataframes into a new one. \n\n","278e94e3":"In the last stage of this notebook, we will merge the final_orders DF with the final_products DF. This will lead to a DF that contains all the available information provided from Instacart.","cacce6a8":"The function we used is the: <b><i>pd.merge(products,aisles)<\/i><\/b> Let's explain what happened above:\n* The function by default (without any expressions inside it) makes an <b>inner join<\/b> between the two dataframes. That's why we used the expression <b>how=\"left\"<\/b>. Using the expression \"how\" we can use the four types of joins that exist.\n* The function by default uses the common column in order to make the join we asked for. In our example we use the expression <b>on=\"aisle_id\"<\/b> so we can emphasize at the common column of our dataframes. If you try to run the code without this expression you will see that we will get the same result. Can you imagine in which case, this expression is useful for us?\n\nAnswer:\nIf we want to merge two dataframes which have more than one common columns, we should use the expression \"on\" to indicate the column or the columns that the function will use. E.x:\n\n<i>merge( x, y, on=\"key\")<\/i>    \n<i>merge( x, y, on=[\"first_key\",\"second_key\"])<\/i>","742fa152":"## 1.1 Import Packages\nAs always, we will first import the pandas package but also a new package called \"gc\" [Garbage Collector].\n","8a701cdf":"And departments DF, the names of the different departments of products that Instacart has.","02653893":"# 2. products, aisles, departments csv files\n## 2.1 Load data from the CSV files\n\nAt this stage we will import our three of our .csv files.","f46b74c9":"For the scopes of this notebook, we will not examine why there are two DFs which hold the products of each order.","7fa2cfa5":"The function we used is the: <b><i>pd.merge(new_products,departments,left_on=\"departments_id\",right_on=\"department_id\",how=\"left\")<\/i><\/b> Let's explain what happened above:\n* We used the expression <b>how=\"left\"<\/b> as it happened before.\n* We used the expressions <b>left_on<\/b> and <b>right_on<\/b> in order to specify which columns should be used for the merging.","b759721f":"## 3.1 Merge of products and aisles dataframes\n\nThe new_products (the merged) dataframe should have only the data we want. We need all rows and columns from this dataframe, and the column <b>\"aisle\"<\/b> from aisles dataframe. According to the shape above, we understand that we need to use the left join.  \n","952d4d12":"## 4.2 View and Understand data\n\nNow we will explore each DF:","cee5cf61":"# 3. Create a final_products dataframe\n\nIn order to create a merged dataframe, we need to join the dataframes we have. We create a new dataframe final_products which contains the dataframes products, aisles and departments. We can see that product dataframe includes the columns \"aisle_id\" and \"department_id\" which are common columns at aisles and departments dataframes too.  Towards this end, we use the merge() function, which performs a join operation by columns or indexes.\n\nFirst of all we have to choose the right type of join in order to create a dataframe with the data we want. There are four types of join:\n1. (INNER) JOIN: Returns records(rows) that have matching values in both dataframes.\n2. LEFT (OUTER) JOIN: Return all records from the leftdataframes, and the matched records from the right dataframes.\n3. RIGHT (OUTER) JOIN: Return all records from the right dataframes, and the matched records from the left dataframes.\n4. FULL (OUTER) JOIN: Return all records when there is a match in either left or right dataframes.\n<img src=\"https:\/\/imgur.com\/yLDkld9.png\" width=\"400\">","fffa45dd":"Products table describe the 49688 available products of Instacart with:\n1. product_id as the index (unique value) for each product.\n2. product_name to store the name of the product.\n3. aisle_id to indicate the index of the category that the product belongs.\n4. department_id to indicate the index of which department it belongs.\n\nBelow aisles DF returns the names of the different product categories that Instacart has.","33c3de69":"The op_prior DF keeps track the products purchased on each order\n1. order_id indicates the equivalent key of orders DF.\n2. product_id indicates the unique id of a product purchased in this particular order.\n3. add_to_cart_order indicates the rank of the product added on a specific order.\n4. reordered shows if this product has been reordered from the previous order or not [1: reorder \/ 0: not reordered].\n\nSo if we would like to see which products does the first order from orders DF include we would have to check all rows that have orded_id=2539329 on op_prior:\n\n\n","573f8dee":"The final DF includes all the orders, as well as the products purchased on each order and other metrics.\nHowever, we see that the first order is that with order_id==2 which means that our rows are not sorted properly. <br\/>\nTo perform a sorting in the rows of our DF, we will use the .sort_values( ) method. <br\/>\nThe sort_values( ) method requires as an argument a list with the column names to base its sorting. <br\/>\nIn our case, we would like to order the DF by the 'order_id' and as a second criterion (when there are repetitive rows with the same value) the 'add_to_cart_order':\n","06f47983":"# 1. Overview\nAt this notebook we will have a deeper look into all available datasets that Instacart provides.<br\/>\nLater, we will show how we can combine (merge) all of them into a single DataFrame.<br\/>\nBelow you will find a summary of all available .csv files and the main attributes that they hold.","b8d97bfd":"The orders DF keeps track of the basic information for each order.\n1. order_id is the unique index key for each order.\n2. user_id is a unique index key for each customer.\n3. eval_set has three distinct values [prior, train, test] ; for the being we will not worry about this attribute.\n4. order_number indicates the rank of a given order of a specific user [in the orders.head( ) we see the first five orders of the user_id=1].\n5. order_dow indicates a day of the week [values 0,1,...6].\n6. order_hour_of_day indicates an hour of the day that an order has been placed.\n7. days_since_prior_order indicates how many days have passed since the previous order [that's why the first order has Not A Number (NaN) value].\n","dcec24d5":"# Table of Contents\n\n1.  [Overview](# 1. Overview)\n2.  [products, aisles, departments .csv files](# 2. Products, Aisles, departments csv files)\n3.  [Create a final_products dataframe](# 3. Create a final_products dataframe)\n4.  [orders, order_products_prior, order_products_train .csv files](# 4. orders, order_products_prior, order_products_train .csv files)\n5.  [Create a final_orders dataframe](# 5. Create a final_products dataframe)\n6.  [Merge final_orders with final_products dataframe](# 6. Merge final_orders with final_products dataframe)\n\n","1ef1aa4b":"# 4. orders, order_products_prior, order_products_train .csv files\n## 4.1 Load data from the CSV files\n\n\nNow let's have look again in the overview of our available .csv files <br\/>\n![CSV_NAMES](https:\/\/kaggle2.blob.core.windows.net\/forum-message-attachments\/183176\/6539\/instacartFiles.png)\n\n\nAt this stage we will work with the rest .csv files, except sample_submission.csv file as it is mainly used for the competition hosted on kaggle.\nFirst we import the csv files:","41ddb0a3":"# 6. Merge final_orders with final_products dataframe","e54737ea":"## 3.2 Merge of new_products and departments dataframes\n\nIn this section, we would like to merge the \"new_products\" that we created before with the departments dataframe. In order to study a more complicated case of the function \"merge()\", we will make a small change at the column names of the departments dataframe. We set new labels at columns' names. So let's take it as the default situation and see how we can handle it. ","3312bece":"## 2.2 View and Understand data\n\nAnd we use the <b>head()<\/b> function in order to get the first 5 rows of the three first dataframes.","c4fa3c2a":"Now op_train DF holds the same info but for these orders labeled as train in the orders DF:\n\n","e4747333":"We see that \"Chocolate Sandwich Cookies\" belong to the product category \"cookies cakes\" <br\/>\nIn the same fashion, \"Chocolate Sandwich Cookies\"  have as department_id=19. <br\/>\nBy checking on departments DF:","f94c9f60":"## 3.3 Make a uniform format for string columns\nAt the final_products DF, the columns which contain strings are the product_name , aisle & department. In the following lines, we show how to convert all strings to a single word (convert spaces to underscores and turn all letters to lower)","aa662219":"## 3.3 Delete unnecessary columns\n\nFinally, in this section we will delete some columns which are not useful for our new dataframe. This columns are the \"aisles_id\", \"departments_id\", \"department_id\". ","247e5fe4":"The final DF contains all the orders, all the products placed in each order, as well as all available information regarding each product","7565a17c":"# 5. Create a final_orders dataframe\n## 5.1 Merge  op_prior & op_train with orders\n\nFrom the above example we understand that both op_prior & op_train contain more information of the orders found on orders DF. This information includes the products purchased on a particular order as well as other info. <br\/>\n\nAs these two DFs are identical and have the same columns we will merge them one down other.\nWe will take the rows of op_train and we will stick them below the rows of op_prior.<br\/>\nDo this we will use the pd.concat( ) function, where we will enter as argument the two DFs in a list"}}