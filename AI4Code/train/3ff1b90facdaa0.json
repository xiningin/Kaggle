{"cell_type":{"491b066e":"code","26d113e9":"code","f71ae792":"code","3a3a2c3e":"code","410715fc":"code","a891937f":"code","38d9f290":"code","431c0ace":"code","6a179cd9":"code","2f51da97":"code","6af03911":"code","e3a2ed46":"code","6e8d9590":"code","21e65214":"code","48462339":"code","71b2d866":"markdown","6162919d":"markdown","cc98f5d1":"markdown","ad0ee419":"markdown","9efbbc66":"markdown","9efe3e22":"markdown","d2a37963":"markdown","e53331c7":"markdown","87ffe1ee":"markdown","bf9342ea":"markdown","794b438a":"markdown","43a39c41":"markdown","f84b25f9":"markdown","aab081c2":"markdown","e98a872d":"markdown"},"source":{"491b066e":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n","26d113e9":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","f71ae792":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","3a3a2c3e":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n","410715fc":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n","a891937f":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# test.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf1 = pd.read_csv('\/kaggle\/input\/test.csv', delimiter=',', nrows = nRowsRead)\ndf1.dataframeName = 'test.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","38d9f290":"df1.head(5)","431c0ace":"plotPerColumnDistribution(df1, 10, 5)","6a179cd9":"plotCorrelationMatrix(df1, 8)","2f51da97":"plotScatterMatrix(df1, 20, 10)","6af03911":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# train.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf2 = pd.read_csv('\/kaggle\/input\/train.csv', delimiter=',', nrows = nRowsRead)\ndf2.dataframeName = 'train.csv'\nnRow, nCol = df2.shape\nprint(f'There are {nRow} rows and {nCol} columns')","e3a2ed46":"df2.head(5)","6e8d9590":"plotPerColumnDistribution(df2, 10, 5)","21e65214":"plotCorrelationMatrix(df2, 8)","48462339":"plotScatterMatrix(df2, 20, 10)","71b2d866":"Correlation matrix:","6162919d":"## Exploratory Analysis","cc98f5d1":"Correlation matrix:","ad0ee419":"Let's take a quick look at what the data looks like:","9efbbc66":"### Let's check 1st file: test.csv","9efe3e22":"Thanks for amazing kernel to [Vitalii Mokin](http:\/\/www.kaggle.com\/vbmokin) \n* [Code starter: Ammonium prediction in river](http:\/\/www.kaggle.com\/vbmokin\/code-starter-ammonium-prediction-in-river)\n","d2a37963":"The next hidden code cells define functions for plotting data. Click on the \"Code\" button in the published kernel to reveal the hidden code.","e53331c7":"Scatter and density plots:","87ffe1ee":"Scatter and density plots:","bf9342ea":"Distribution graphs (histogram\/bar graph) of sampled columns:","794b438a":"Let's take a quick look at what the data looks like:","43a39c41":"Now you're ready to read in the data and use the plotting functions to visualize the data.","f84b25f9":"Distribution graphs (histogram\/bar graph) of sampled columns:","aab081c2":"There are 2 csv files in the current version of the dataset:\n","e98a872d":"### Let's check 2nd file: train.csv"}}