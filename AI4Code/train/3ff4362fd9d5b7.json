{"cell_type":{"f7917f9b":"code","25b044e4":"code","66478644":"code","d57987f9":"code","de84f473":"code","04c9e4f8":"code","2405eb9b":"code","766e9b34":"code","ff86453d":"code","df7618c9":"code","a8ef30e0":"code","7b540459":"markdown","24bb376d":"markdown","6c6f2b94":"markdown","75598bc6":"markdown","683f3196":"markdown","915205d2":"markdown","7ed4eae6":"markdown","50a5fbf8":"markdown"},"source":{"f7917f9b":"import numpy as np \nimport pandas as pd","25b044e4":"train = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")\n\ntrain_images = train.drop(\"label\", axis=1)\ntrain_labels = train[\"label\"]","66478644":"train_images.to_numpy()\ntrain_labels.to_numpy()\ntest.to_numpy()","d57987f9":"train_images = train_images \/ 255.0\ntest = test \/ 255.0","de84f473":"from keras.utils import to_categorical\n\ntrain_labels = to_categorical(train_labels)","04c9e4f8":"from keras import models\nfrom keras import layers\n\nnetwork = models.Sequential()\nnetwork.add(layers.Dense(512, activation='relu', input_shape=(28 * 28, )))\nnetwork.add(layers.Dense(10, activation='softmax'))\nnetwork.summary()","2405eb9b":"network.compile(optimizer='rmsprop',\n                loss='categorical_crossentropy',\n                metrics=['accuracy'])","766e9b34":"history = network.fit(train_images, train_labels, epochs = 10, batch_size=120)","ff86453d":"# summarize history for accuracy\nimport matplotlib.pyplot as plt\nplt.plot(history.history['accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()\n# summarize history for loss\nplt.plot(history.history['loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","df7618c9":"submit = pd.DataFrame(np.argmax(network.predict(test), axis=1), \n                      columns=['Label'], \n                      index=pd.read_csv('..\/input\/digit-recognizer\/sample_submission.csv')['ImageId'])\n\nsubmit.index.name = 'ImageId'\nsubmit.to_csv('submittion.csv')","a8ef30e0":"submit","7b540459":"### Compiling the network","24bb376d":"**Data Preprocessing:**  The data values are divided by 255 for scaling the values in the numpy arrays, this will make the values of array elements in between 0-1 which was previously in between 0-255","6c6f2b94":"### Importing libraries","75598bc6":"Neural Network take data as input in form of Numpy Arrays, the data frame thus needs to be converted to numpy arrays so that it can become ready for processing by the neural network. \n\nThe to_numpy() function helps us to convert to numpy array. ","683f3196":"### <span style=\"color:red\"> Model Generation using Keras with TensorFlow Backend: <\/span>\nTo create models in keras we import **models** class from the keras library. The layers of models are created by various functions **layers** class, the functions describe the type of layer we want to create in the model. ","915205d2":"### Reading the data provided in the competetion","7ed4eae6":"The labels are also of same dimensions as the training data, the training labels needs to be converted categorically to a Original_Dimension * Class dimensional array, this will help the model to understand which class does the data belongs to. \n\nIn simpler terms it will categorise the data. ","50a5fbf8":"#### Final Step is to fit the model to the training images and the training labels and the model tries that for n numbers of epochs taking batch size number of training_images in one iteration."}}