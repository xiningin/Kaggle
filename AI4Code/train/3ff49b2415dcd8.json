{"cell_type":{"b649c7b8":"code","60d8b8b1":"code","02d495b5":"code","46d8d781":"code","04464439":"code","7c0b74d7":"code","479acda1":"code","7df3ee68":"code","40578cc0":"code","1c81a894":"code","dd5bee8d":"code","0f965c09":"code","d13e0c79":"code","dcdb87e7":"code","d14cbd39":"code","a5867a90":"code","20c9f197":"code","8185aa4a":"code","6943a528":"markdown","4b4f0b9d":"markdown","162242a9":"markdown","31376162":"markdown","2d04889a":"markdown","0a9d1b8d":"markdown","7e5e6746":"markdown","e0bd316c":"markdown","622e430d":"markdown","ea4055fb":"markdown","6bedf6c7":"markdown","4c2b072b":"markdown","ed94a65e":"markdown"},"source":{"b649c7b8":"# Importing Modules\nimport numpy as np\nimport pandas as pd\n\n# Keras modules\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Dense, Flatten\nfrom keras.utils import to_categorical\n\n# Train test split\nfrom sklearn.model_selection import train_test_split\n\n# Display and plotting\nfrom IPython.display import Image\nimport plotly_express as px\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\ninit_notebook_mode(connected=True)\n\nimport os\nprint(os.listdir(\"..\/input\"))","60d8b8b1":"Image(filename = \"..\/input\/american_sign_language.PNG\")","02d495b5":"# Loading train and test sets\ntrain = pd.read_csv(\"..\/input\/sign_mnist_train.csv\")\ntest = pd.read_csv(\"..\/input\/sign_mnist_test.csv\")","46d8d781":"print(\"Train:\")\nprint(train.head())\nprint(\"\\nTest:\")\nprint(test.head())","04464439":"# Looking at training data info\nprint(train.info())","7c0b74d7":"# Checking distribution of data\nlabel_dist = pd.DataFrame(train['label'].value_counts()).reset_index()\nlabel_dist.columns = ['Label','Count']\npx.bar(label_dist,x = \"Label\", color = \"Label\", y = \"Count\")","479acda1":"# Defining X and Ys\nX_train = train.iloc[:,1:].copy()\nY_train = train.iloc[:,0].copy()\n\nX_test = test.iloc[:,1:].copy()\nY_test = test.iloc[:,0].copy()","7df3ee68":"# Splitting training model into train and validation sets for deep learning model\nX_train, X_val, Y_train, Y_val = train_test_split(X_train,Y_train, test_size = 0.3)","40578cc0":"# Rescaling data to fall between 0 and 1\nX_train = X_train\/255\nX_val = X_val\/255\nX_test = X_test\/255","1c81a894":"# Converting to Numpy array and Reshaping X_train and test data\nX_train = np.array(X_train).reshape(X_train.shape[0],28,28,1)\nX_val = np.array(X_val).reshape(X_val.shape[0],28,28,1)\nX_test = np.array(X_test).reshape(X_test.shape[0],28,28,1)","dd5bee8d":"# Categorizing Ys\nY_train = to_categorical(Y_train)\nY_val = to_categorical(Y_val)\nY_test = to_categorical(Y_test)","0f965c09":"# Building Keras model\nmodel = Sequential()\nmodel.add(Conv2D(filters = 32, kernel_size = (3,3), activation = 'relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (3,3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = 2))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3), activation = 'relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = 2))\nmodel.add(Conv2D(filters = 128, kernel_size = (3,3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = 2))\nmodel.add(Flatten())\nmodel.add(Dense(units = 25, activation = 'softmax'))","d13e0c79":"# Compiling model\nmodel.compile(optimizer = 'rmsprop', loss = 'categorical_crossentropy',metrics = ['accuracy'])","dcdb87e7":"history = model.fit(X_train,Y_train, validation_data = (X_val, Y_val),epochs = 10, batch_size = 64)","d14cbd39":"data = pd.DataFrame(history.history).reset_index()\ndata.columns = ['Epoch', \"Validation_Loss\",\"Validation_Accuracy\",\"Loss\",\"Accuracy\"]\ntrace1 = go.Scatter(\n    x = (data['Epoch'] + 1).values,\n    y = data['Loss'].values,\n    name = \"Loss\",\n    mode = \"lines+markers\"\n)\ntrace2 = go.Scatter(\n    x = (data['Epoch'] + 1).values,\n    y = data['Validation_Loss'].values,\n    name = \"Validation_Loss\",\n    mode = \"lines+markers\"\n)\ntrace3 = go.Scatter(\n    x = (data['Epoch'] + 1).values,\n    y = data['Validation_Accuracy'].values,\n    name = \"Validation_Accuracy\",\n    mode = \"lines+markers\"\n)\ntrace4 = go.Scatter(\n    x = (data['Epoch'] + 1).values,\n    y = data['Accuracy'].values,\n    name = \"Accuracy\",\n    mode = \"lines+markers\"\n)\nfig1 =[trace1,trace2]\nfig2 = [trace3,trace4]\niplot(fig1)\niplot(fig2)","a5867a90":"# Final Model\nmodel = Sequential()\nmodel.add(Conv2D(filters = 32, kernel_size = (3,3), activation = 'relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (3,3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = 2))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3), activation = 'relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = 2))\nmodel.add(Conv2D(filters = 128, kernel_size = (3,3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = 2))\nmodel.add(Flatten())\nmodel.add(Dense(units = 25, activation = 'softmax'))\nmodel.compile(optimizer = 'rmsprop', loss = 'categorical_crossentropy',metrics = ['accuracy'])","20c9f197":"model.fit(X_train,Y_train, validation_data = (X_val, Y_val),epochs = 4, batch_size = 64)","8185aa4a":"# Model evaluation\nmodel.evaluate(X_test,Y_test)","6943a528":"# Loading Data","4b4f0b9d":"# Setting up Train and Test Sets","162242a9":"# Sign Language\nAn image describing the classification task","31376162":"Good, we shouldn't have data for J (label 9) and Z (label 25). They involve movement.","2d04889a":"Not a bad result!","0a9d1b8d":"# Preprocessing & Visualizing Data","7e5e6746":"It seems like the model only really needs about 4 epochs","e0bd316c":"# Evaluating Model","622e430d":"# Introduction\nThis notebook contains code used to build a deep learning model on Keras to predict Sign Language from the MNIST dataset","ea4055fb":"# Visualizing Validation Loss\/Accuracy Over Epochs","6bedf6c7":"# Training the Model\nHere, we train the model and evaluate the ideal number of epochs before overfitting","4c2b072b":"# Building Keras Model","ed94a65e":"# Final Model"}}