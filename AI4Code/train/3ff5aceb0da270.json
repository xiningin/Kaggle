{"cell_type":{"59ab6de6":"code","06a7b10c":"code","364f2efb":"code","fa171c0d":"code","3ab4dbc3":"code","fd01b6c4":"code","909c0faa":"code","05ecdb4d":"code","d5dc2167":"code","c912d5d8":"code","bb489554":"code","caf768a7":"code","2104d4f3":"code","e919d327":"code","c8daaa39":"code","443d99ef":"code","69411ee4":"code","a98af5dc":"code","dadccebd":"code","c26988d2":"code","2391fed4":"code","65b004e0":"code","95877ad9":"code","71d84f76":"code","a746a292":"code","dae1454b":"code","6be50abf":"code","807083fe":"code","d5855cb1":"code","9c1c3765":"code","97a286d8":"code","32efb9e1":"code","328c5501":"code","6eef9302":"markdown","7cb69ebf":"markdown","5006e881":"markdown"},"source":{"59ab6de6":"import numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score, cross_validate, StratifiedKFold\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import metrics\nfrom sklearn.metrics import mean_squared_error, plot_confusion_matrix, confusion_matrix, roc_curve, roc_auc_score, classification_report\nfrom sklearn.ensemble import RandomForestRegressor, ExtraTreesRegressor, RandomForestClassifier\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","06a7b10c":"df = pd.read_csv('\/kaggle\/input\/mushroom-classification\/mushrooms.csv')","364f2efb":"#Look at the Data Head\ndf.head()","fa171c0d":"#Data frame information\ndf.info()","3ab4dbc3":"#Checking if have some null values for Clean the data\ndf.isnull().sum()","fd01b6c4":"#Checking how many rows and columns we have.\ndf.shape","909c0faa":"#how many Edible, Poisonous we have in the data set.\ndf['class'].value_counts()","05ecdb4d":"# Pie chart, where the slices will be ordered and plotted counter-clockwise:\nplt.figure(figsize = (6,6))\n#explsion\nplt.pie(df['class'].value_counts(), colors = ['#6A9838','#af1222'], labels = ['Edible', 'Poisonous'], autopct='%1.1f%%', startangle=90, pctdistance=0.85, explode = (0.05,0.05), shadow = True)\n#draw circle\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n# Equal aspect ratio ensures that pie is drawn as a circle\nplt.tight_layout()\nplt.show()","d5dc2167":"#The correlation between cap color and Edible or Poisonous\nsns.catplot(x=\"cap-color\", hue=\"class\", col=\"class\",data=df, kind=\"count\",height=4, aspect=.8,palette =['#af1222','#6A9838']);","c912d5d8":"#preprocessing - changing the values to numbers with label encoder.\ndef Label_enc(feat):\n    LabelE = LabelEncoder()\n    LabelE.fit(feat)\n    print(feat.name,LabelE.classes_)\n    return LabelE.transform(feat)","bb489554":"for col in df.columns:\n    df[str(col)] = Label_enc(df[str(col)])","caf768a7":"#Look at the Data Head affter label encoder\ndf.head()","2104d4f3":"#Take a View of all features to gain insights\ndf.hist(bins=5, figsize=(15,15));","e919d327":"#Easy to see that veil-type is useless because there are no data we needs.\ndel df['veil-type']","c8daaa39":"#Split the data to y and x with x is without the class's.\ny = df['class']\nX = df.drop('class', axis=1)","443d99ef":"#Look at the Data Head affter deleting the veil-type and drop the class's.\nX.head()","69411ee4":"#Standardize features by removing the mean and scaling to unit variance\nscaler = StandardScaler()\n\nX = pd.DataFrame(scaler.fit_transform(X), columns=X.columns)","a98af5dc":"#Look at the Data Head affter StandardScaler.\nX.head()","dadccebd":"#Heatmap of all features.\nplt.figure(figsize=(15,15))\nsns.heatmap(df.corr(),linewidths=.1,cmap=\"inferno\", annot=True);","c26988d2":"#split data and train\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state = 42)\n\n#Data training set\nprint('Train data: ', len(X_train)\/len(X))\n\n#Data testing set\nprint('Test data: ', X_test.shape[0]\/y.shape[0])\n","2391fed4":"#print how much rows and colums we have in test and train sets\nprint(X_train.shape, X_test.shape, y_train.shape, y_test.shape)","65b004e0":"#knn classifier with for loop [1-20] to check the best accuracy of n\nfor n in range(1, 21):\n    knn = KNeighborsClassifier(n_neighbors = n)\n    knn.fit(X_train, y_train)\n    y_pred = knn.predict(X_test)\n    print('KNeighborsClassifier: n = {} , Accuracy is: {}'.format(n,knn.score(X_test,y_test)))","95877ad9":"#plot_confusion_matrix of knn \nplot_confusion_matrix(knn, X_test, y_test, display_labels= ['Edible', 'Poisonous'], cmap = \"Accent_r\", normalize= None)\nplt.title('Confusion Matrix KNN')\nplt.show()","71d84f76":"#Print Confusion matrix Accuracy of knn\nprint('Confusion matrix Accuracy is: {}'.format(metrics.accuracy_score(y_test, y_pred)))","a746a292":"#roc_curve plot to check the socre of knn\nfpr, tpr, _= roc_curve(y_test, y_pred)\nauc_score = roc_auc_score(y_test, y_pred)\nplt.plot(fpr, tpr, label=\"auc=\"+str(auc_score))\nplt.box(True)\nplt.title('ROC CURVE KNN')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.legend(loc=4)\nplt.grid(True)\nplt.show()\nprint('The Score for the ROC Curve is : {}%'.format(round(auc_score,4)*100))","dae1454b":"#classification_report of KNN\nKNN_REPORT = classification_report(y_test, knn.predict(X_test))\nprint(KNN_REPORT)","6be50abf":"#Cross Val Score of Knn (showing 20)\ncvs = cross_val_score(knn, X, y, cv=20)\ncvs","807083fe":"#RandomForestClassifier model\nRFC = RandomForestClassifier()\nRFC.fit(X_train, y_train)\ny_predict = RFC.predict(X_test)\nprint('RandomForestClassifier Accuracy is: {}'.format(RFC.score(X_test,y_test)))","d5855cb1":"#plot_confusion_matrix of RFC \nplot_confusion_matrix(RFC, X_test, y_test, display_labels= ['Edible', 'Poisonous'], cmap = \"Accent\", normalize= None)\nplt.title('Confusion Matrix RFC')\nplt.show()","9c1c3765":"#Print Confusion matrix Accuracy of RFC\nprint('Confusion matrix Accuracy is: {}'.format(metrics.accuracy_score(y_test, y_predict)))","97a286d8":"#roc_curve plot to check the socre of RFC\nfpr, tpr, _= roc_curve(y_test, y_predict)\nauc_score = roc_auc_score(y_test, y_predict)\nplt.plot(fpr, tpr, label=\"auc=\"+str(auc_score))\nplt.box(True)\nplt.title('ROC CURVE RFC')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.legend(loc=4)\nplt.grid(True)\nplt.show()\nprint('The Score for the ROC Curve is : {}%'.format(round(auc_score,4)*100))","32efb9e1":"#classification_report of RFC\nRFC_REPORT = classification_report(y_test, y_predict)\nprint(RFC_REPORT)","328c5501":"#Cross Val Score of RFC (showing 20)\ncvs = cross_val_score(RFC, X, y, cv=20)\ncvs","6eef9302":"## Results:\n\n* We can see that RandomForestClassifier gives us the best result for this data set Accuracy of 1.0 !\n* KNeighborsClassifier $n \\in \\mathbb{N}^+$, such that $11<n$ we can see decreasing of the Accuracy.\n\nYou can be relex and enjoy of eating your mushrooms (after test with RandomForestClassifier of course)\n","7cb69ebf":"![Psilocybin-Mushrooms-Effects-Legality-Drug-Classificatio-w.jpg](attachment:Psilocybin-Mushrooms-Effects-Legality-Drug-Classificatio-w.jpg)","5006e881":"### Explanation of the relevant features\n\nAttribute Information: (classes: edible = e, poisonous = p)\n\n* cap-shape: bell = b, conical = c,convex = x, flat = f, knobbed = k, sunken = s\n* cap-surface: fibrous = f, grooves = g, scaly = y, smooth = s\n* cap-color: brown = n, buff = b, cinnamon = c, gray = g, green = r, pink = p, purple = u, red = e, white = w, yellow = y\n* bruises: yes = t, no = f\n* odor: almond = a, anise = l, creosote = c, fishy = y, foul = f, musty = m, none = n, pungent = p, spicy = s\n* gill-attachment: attached = a, descending = d, free = f, notched = n\n* gill-spacing: close = c, crowded = w, distant = d\n* gill-size: broad = b, narrow = n\n* gill-color: black = k, brown = n, buff = b, chocolate = h, gray = g, green = r, orange = o, pink = p, purple = u, red = e, white = w ,yellow = y\n* stalk-shape: enlarging = e, tapering = t\n* stalk-rootbulbous = b, club = c, cup = u, equal = e, rhizomorphs = z, rooted = r, missing = ?\n* stalk-surface-above-ring: fibrous = f, scaly = y, silky = k, smooth = s\n* stalk-surface-below-ring: fibrous = f, scaly = y, silky = k, smooth = s\n* stalk-color-above-ring: brown = n, buff = b, cinnamon = c, gray = g, orange = o, pink = p, red = e, white = w, yellow = y\n* stalk-color-below-ring: brown = n, buff = b, cinnamon = c, gray = g, orange = o, pink = p, red = e, white = w, yellow = y\n* veil-type: partial = p, universal = u\n* veil-color: brown = n, orange = o, white = w, yellow = y\n* ring-number: none = n, one = o, two = t\n* ring-type: cobwebby = c, evanescent = e, flaring = f, large = l, none = n, pendant = p, sheathing = s, zone = z\n* spore-print-color: black = k, brown = n, buff = b, chocolate = h, green = r, orange = o,purple = u, white = w, yellow = y\n* population: abundant = a, clustered = c, numerous = n, scattered = s, several = v, solitary = y\n* habitat: grasses = g, leaves = l, meadows = m, paths = p, urban = u, waste = w, woods = d"}}