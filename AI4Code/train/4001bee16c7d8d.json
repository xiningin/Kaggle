{"cell_type":{"4c76b888":"code","9b4120e3":"code","b3b3a074":"code","9f0493a0":"code","3d7b5afe":"code","bb3a6037":"code","68f2d812":"code","4f72e086":"code","b99a58e1":"code","18725e74":"code","df4839a6":"code","bc80122a":"code","cecd222a":"code","d080b21f":"code","6f958e05":"code","d21a18de":"code","2bf2b327":"code","c912f1ea":"code","9daa35f8":"code","c6ceb0e2":"code","338f7ec7":"code","2fcdc0cf":"code","fb868dee":"code","a73da418":"code","073fa7cf":"code","f7149dfc":"code","abf17f8b":"code","5b5a6787":"code","50c79dd1":"code","3699c871":"code","4efdc266":"code","df8a7e68":"code","ef946fb4":"code","00e2a048":"code","68c6c298":"code","f249a9a2":"code","2f6cc237":"code","fd138daf":"code","456219fe":"code","ff74704a":"code","f60f8b1c":"code","3ece1f62":"markdown","e8c227c1":"markdown","7bfa6240":"markdown","299ad12d":"markdown","8a652b3b":"markdown","142bd507":"markdown","c4b251e4":"markdown","9bb7cee8":"markdown","99518ce0":"markdown","04e77801":"markdown","f20481bd":"markdown","dc58308f":"markdown","0623d3d2":"markdown","fb83cf48":"markdown","f3d49087":"markdown","dead8db1":"markdown","7722bbf1":"markdown"},"source":{"4c76b888":"import os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport sqlite3 # read the database\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 1000)","9b4120e3":"# Read sqlite query results into a pandas DataFrame\ncon =  sqlite3.connect(\"\/kaggle\/input\/switrs.sqlite\")\n\nquery = \"\"\"\nSELECT * \nFROM collisions\nWHERE motorcycle_collision >= 1\nOR motorcyclist_killed_count >= 1\nOR motorcyclist_injured_count >= 1\n\"\"\"\n\ndf_collisions = pd.read_sql_query(query, con, parse_dates=[\"collision_date\"])","b3b3a074":"df_collisions = df_collisions.dropna(subset=['collision_time'])","9f0493a0":"df_collisions.head()","3d7b5afe":"df_collisions.shape","bb3a6037":"df_collisions.killed_victims.hist()","68f2d812":"df_collisions.county_city_location.value_counts()","4f72e086":"df_collisions_county = df_collisions[df_collisions.county_city_location == '1942']\ndf_collisions_county.shape","b99a58e1":"df_collisions_county.collision_date.value_counts()","18725e74":"dataset = df_collisions_county.groupby('collision_date').sum('killed_victims')[['killed_victims']]","df4839a6":"dataset.shape","bc80122a":"dataset.shape","cecd222a":"dataset.head()","d080b21f":"dataset = dataset.merge(df_collisions_county[['collision_date', 'weather_1', 'weather_2', 'road_surface', 'road_condition_1']].drop_duplicates('collision_date'),\n                          how='left',\n                          on='collision_date')","6f958e05":"from datetime import timedelta\nstart_date = dataset.collision_date.min()\nend_date = dataset.collision_date.max()\nlist_date = pd.date_range(start_date, end_date-timedelta(days=1),freq='d')","d21a18de":"missing_date = set(list_date).difference(set(dataset.collision_date))","2bf2b327":"len(missing_date)","c912f1ea":"for d in missing_date:\n    dataset = dataset.append(\n        {'collision_date': d, 'killed_victims': 0, 'weather_1': None,\n        'weather_2': None, 'road_surface': None, 'road_condition_1': None},\n        ignore_index=True)","9daa35f8":"len(dataset), len(list_date)","c6ceb0e2":"dataset.shape","338f7ec7":"dataset.head()","2fcdc0cf":"len(list_date)","fb868dee":"dataset['y'] = [1 if killed > 0 else 0 for killed in dataset.killed_victims.values]","a73da418":"dataset['year'] = [str(date)[:4] for date in dataset.collision_date.tolist()]\ndataset['month'] = [str(date)[5:7] for date in dataset.collision_date.tolist()]\ndataset['day'] = [str(date)[8:10] for date in dataset.collision_date.tolist()]","073fa7cf":"dataset.head()","f7149dfc":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import LabelEncoder","abf17f8b":"dataset['weather_1'] = dataset['weather_1'].fillna('-1')","5b5a6787":"le = LabelEncoder()\ndataset['weather'] = le.fit_transform(dataset['weather_1'])","50c79dd1":"train_size = int(len(dataset) * 0.7)","3699c871":"train, test = dataset.loc[:train_size], dataset.loc[train_size:]\ntrain.shape, test.shape","4efdc266":"X_cols = ['day', 'month', 'year', 'weather']\ny_col = ['y']\nX_train = train[X_cols].values\nX_test = test[X_cols].values\ny_train = train[y_col].values\ny_test = test[y_col].values","df8a7e68":"clf = RandomForestClassifier()\nclf.fit(X_train, y_train)\ny_pred = clf.predict(X_test)","ef946fb4":"accuracy_score(y_pred, y_test)","00e2a048":"accuracy_score([0]*len(y_test), y_test)","68c6c298":"from sklearn.linear_model import LogisticRegression","f249a9a2":"lr = LogisticRegression()\nlr.fit(X_train, y_train)\nlr_pred = lr.predict(X_test)","2f6cc237":"accuracy_score(lr_pred, y_test)","fd138daf":"from sklearn.ensemble import GradientBoostingClassifier\n\ngb = GradientBoostingClassifier()\ngb.fit(X_train, y_train)\ngb_pred = gb.predict(X_test)","456219fe":"accuracy_score(gb_pred, y_test)","ff74704a":"from sklearn.neural_network import MLPClassifier\n\nmlp = MLPClassifier(10)\nmlp.fit(X_train, y_train)\nmlp_pred = mlp.predict(X_test)","f60f8b1c":"accuracy_score(mlp_pred, y_test)","3ece1f62":"# Modeling","e8c227c1":"Check is there were days with multiple collisions in this county","7bfa6240":"# Gradient Boosting Classifier","299ad12d":"Random forest is not better than the deterministic prediction of zero","8a652b3b":"# Data preparation","142bd507":"# Filling missing dates","c4b251e4":"Create feature using the date","9bb7cee8":"Some dates are missing. There are dates without killed victims, we can fill them.","99518ce0":"Yes, so let sums the killed victims by date","04e77801":"# Quick visualization","f20481bd":"# Multi Layer Perceptron Classifier","dc58308f":"Create the target variable, 1 if there was killed victims, 0 otherwise","0623d3d2":"# Reading dataset","fb83cf48":"# Logistic Regression","f3d49087":"# Random Forest Classifier","dead8db1":"Keep the county with the highest number of collisions","7722bbf1":"# Road Victims Predictions\n\nThis notebook aims to help predicting road victims. The idea is that if we are able to predict the road victims, we could save them.\n\nIt's not perfect and will be improved since it's a work in progress :D\n\nComments and ideas are appreciated! :)"}}