{"cell_type":{"82525a52":"code","b22ef121":"code","6b3476b8":"code","3f4ec1d3":"code","576d302a":"code","e3625e6c":"code","dd69a2cc":"code","cb9c17ad":"code","bc9b1068":"code","c4c83004":"code","e47e8ab5":"code","8670f527":"code","59e9ee55":"code","f232431b":"code","0e76571a":"code","c7b278ff":"code","7ed50b8f":"code","399d750a":"code","e9590a07":"markdown","fc0824ff":"markdown","27da8899":"markdown","4f411955":"markdown","d374b46b":"markdown","06f05deb":"markdown","59f1aef0":"markdown","e9a03381":"markdown","c047e5d8":"markdown","df863b63":"markdown","e6782ddf":"markdown","fb541065":"markdown","adb8ea61":"markdown","9b9dde7d":"markdown","cd3ac216":"markdown","e8bc1be6":"markdown","1ba9997a":"markdown","f8346c26":"markdown","e4329841":"markdown","a2086660":"markdown","bad21a50":"markdown","807812f8":"markdown","358fee38":"markdown","e751129b":"markdown","0a718aba":"markdown","396dad03":"markdown"},"source":{"82525a52":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.rcParams[\"figure.figsize\"] = (20,10)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","b22ef121":"plt.plot([1,2,3], [1,2,3]);","6b3476b8":"x = np.linspace(0, 10, 50)  # creating linear relationship\ny = x  # the same\n\n# Creating plot\nplt.title('Linear relationship y = x') # plot title\nplt.xlabel('x')\nplt.ylabel('y')\nplt.grid() # add grid\nplt.plot(x, y) # plotting data","3f4ec1d3":"plt.plot(x, y, 'g--')  # g - green; -- type","576d302a":"x = np.linspace(0, 10, 50)  # linear\ny1 = x\n\ny2 = [i**2 for i in x] # quadratic\n# Plotting\nplt.title('Relations: y1 = x, y2 = x^2') # title\nplt.xlabel('x')\nplt.ylabel('y1, y2')\nplt.grid() # add grid\nplt.plot(x, y1, x, y2) # create one plot with two functions","e3625e6c":"x = [1, 5, 10, 15, 20]\ny1 = [1, 7, 3, 5, 11]\ny2 = [i*1.2 + 1 for i in y1]\ny3 = [i*1.2 + 1 for i in y2]\ny4 = [i*1.2 + 1 for i in y3]\nplt.plot(x, y1, '-', x, y2, '--', x, y3, '-.', x, y4, ':')","dd69a2cc":"x = np.linspace(0, 10, 50)  # linear\ny1 = x\n\ny2 = [i**2 for i in x]  # quadratic\n\n# \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432\nplt.figure(figsize=(9, 9))  \nplt.subplot(2, 1, 1)  # first plot with linear relationship\nplt.plot(x, y1) # plotting first\nplt.title('Relations: y1 = x, y2 = x^2') # \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a\nplt.ylabel('y1', fontsize=14) # y axis\nplt.grid(True) # add grid\nplt.subplot(2, 1, 2)  # first plot with quadratic relationship\nplt.plot(x, y2) # plotting second\nplt.xlabel('x', fontsize=14) # x axis\nplt.ylabel('y2', fontsize=14) # y axis\nplt.grid(True) # \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441\u0435\u0442\u043a\u0438","cb9c17ad":"cars = ['Alfa Romeo 159', 'BMW X7', 'Peugeot 3008', 'Renault Logan', 'Alfa Romeo 156']\nquantity = [3, 12, 5, 21, 4]\nplt.bar(cars, quantity)\nplt.title('Cars Distribution')\nplt.xlabel('Car')\nplt.ylabel('Quantity')","bc9b1068":"plt.barh(cars, quantity)","c4c83004":"x = [1999, 2003, 2007, 2013, 2018]  # some data on x axis\ny = [25000, 19000, 16000, 12000, 6700]  # some data on y axis\nplt.plot(x, y, label='Car price')\nplt.title('Car price', fontsize=15)\nplt.xlabel('Year', fontsize=12, color='blue')\nplt.ylabel('Price', fontsize=12, color='blue')\nplt.legend()\nplt.grid(True)\nplt.text(1999, 25000, 'We loose money!')","e47e8ab5":"plt.plot(x, y, 'ro');  # car prices data; ro - ","8670f527":"plt.plot(x, y, 'bx');","59e9ee55":"x = [2, 7, 13, 22, 45]\ny1 = [3, 3, 22, 7, 4]\ny2 = [i*1.6 + 1 for i in y1]\ny3 = [i*1.3 + 2 for i in y2]\ny4 = [i*0.5 + 7 for i in y3]\n\n# Setting sizes of the substrate\nplt.figure(figsize=(12, 7))\n\n# Creating plot next to each other\nplt.subplot(2, 2, 1)\nplt.plot(x, y1, '-')\nplt.subplot(2, 2, 2)\nplt.plot(x, y2, '--')\nplt.subplot(2, 2, 3)\nplt.plot(x, y3, '-.')\nplt.subplot(2, 2, 4)\nplt.plot(x, y4, ':')","f232431b":"plt.subplot(221)\nplt.plot(x, y1, '-')\nplt.subplot(222)\nplt.plot(x, y2, '--')\nplt.subplot(223)\nplt.plot(x, y3, '-.')\nplt.subplot(224)\nplt.plot(x, y4, ':')","0e76571a":"np.random.seed(123)\nvalues = np.random.randint(10, size=(7, 7))\nplt.pcolor(values);","c7b278ff":"np.random.seed(123)\nvalues = np.random.randint(10, size=(7, 7))\nplt.pcolor(values)\nplt.colorbar()  # add color bar right next to matrix","7ed50b8f":"percentage = [63, 5, 10, 11, 11]  # share for each product\nlabels = ['iPhone', 'Other products', 'iPad', 'Mac', 'Services']  # labels of apple products\nfig, ax = plt.subplots()\nax.pie(percentage, labels=labels);  # plotting pie with shares as first argument and labels as second","399d750a":"percentage = [63, 5, 10, 11, 11]  # share for each product\nlabels = ['iPhone', 'Other products', 'iPad', 'Mac', 'Services']  # labels of apple products\nfig, ax = plt.subplots()\nax.pie(percentage, labels=labels, wedgeprops=dict(width=0.5));","e9590a07":"# Legend","fc0824ff":"# This is a matplotlib basics for everyone who want to start learning visualization tools","27da8899":"Pie charts are a visual way to show component shares in\nset. They are ideal for reports, presentations, etc. For\nPie charts in Matplotlib use the ```pie()``` function.","4f411955":"# Building a chart for categorical data","d374b46b":"\nIf we replace ```bar()``` with ```barh()```, we get a horizontal diagram:","06f05deb":"The following ```subplot ()``` call options are available:\n1. subplot(nrows, ncols, index)\n2. subplot(pos)\n\n\nConsider the example of working with these functions:","59f1aef0":"# Simple linear function","e9a03381":"## Let's change color of line and line type","c047e5d8":"The legend will be placed on the chart by calling the function ```legend ()```","df863b63":"\nUntil that moment, we worked only with line graphs, a function\n```plot ()``` allows you to specify the type of graph: linear or point. For\nscatter plot you need to specify the marker.","e6782ddf":"# Piecharts","fb541065":"# One plot - many functions","adb8ea61":"\nFor this set, build a colorbar using the appropriate\nfeatures:","9b9dde7d":"```figure ()``` - function for setting global parameters\ndisplay charts. In it, as an argument, we pass\ntuple defining the size of the general field.\n\n```subplot ()``` - function for setting the location of a field with\nplot. There are several ways to specify areas for\noutput charts. In the example, we used the option\nwhich involves passing three arguments: the first argument\nthe number of rows, the second - columns in the generated field, the third\nindex (field number, count from top to bottom, from left to right).","cd3ac216":"Lets build a donut pie chart (with a hole in the middle). This can be done through the ```wedgeprops``` parameter, which is\nresponsible for the appearance of the shares:","e8bc1be6":"Before that, we built graphs for numerical data, i.e., dependent\nand independent variables were of numerical type. In practice, quite\noften have to work with categorical data - car models, the name of cities, etc. Let\u2019s build a diagram in which\ndisplayed the number of cars in the store:","1ba9997a":"# Plot type","f8346c26":"# Work with ```subplot ()``` function","e4329841":"Bars plots are good for visualizing categorical data.","a2086660":"## Different relationships","bad21a50":"A second use case for ```subplot ()``` would look like this:","807812f8":"### If you like it, feel free to upvote :)","358fee38":"![title](https:\/\/matplotlib.org\/_static\/logo2_compressed.svg)","e751129b":"The easiest way to present plots in separate fields is\nuse the ```subplot ()``` function to specify their placements. Before\nof this moment, we did not work with the Figure directly;","0a718aba":"# Presentation of plots in different fields","396dad03":"# Colorbars"}}