{"cell_type":{"a5bea6e5":"code","98cc0240":"code","9a4fbed8":"code","bd75d047":"code","4fd3dfbd":"code","1073af13":"code","d91766de":"code","fe27db7f":"code","da975ed5":"code","207c2bc5":"code","ed3abf70":"code","60b0254a":"code","47c0af68":"code","69fc36b5":"code","b35419c3":"code","d76fb581":"code","2e36715a":"code","f3e95183":"code","8b74ee70":"code","48426ac6":"code","fbcb0768":"code","45de6ad3":"code","1d037dcc":"code","5dea7c8e":"code","facec418":"code","a082efb8":"code","d96d9cf9":"code","386f1948":"code","1d565f64":"code","2820dc72":"code","6858f02d":"code","63cf4592":"code","4f512894":"code","1ffeadb0":"code","6981aa98":"code","28994abf":"code","508dddbb":"code","1898a898":"code","1a7f6456":"code","298ddd56":"code","7c5fa460":"code","74014407":"code","2332e08d":"code","df461b92":"code","2e62504c":"code","05388581":"code","af45f8b9":"code","d7d854c4":"code","15aee653":"code","d6c94ed3":"code","37f82abe":"code","79e88ff6":"code","105ed8d8":"code","5c3123e7":"code","36fa8edc":"code","7e65d66b":"code","373fb317":"code","684d1a0c":"code","925a270e":"code","cefb5b97":"code","7996c397":"code","a76374bf":"code","31a14887":"code","283786c7":"code","3471fc70":"code","4551bd90":"code","62472702":"code","ffc1fc10":"code","ee20e296":"code","380fc779":"code","b0c045e3":"code","7cb56b33":"code","ba1fc3db":"code","e115b289":"code","b5315a19":"code","2cc63371":"code","cfc404ed":"code","df0944af":"code","a5939173":"code","ce8fc016":"code","8e7ebe5c":"code","5c3336f1":"code","eeb8735e":"code","f08a026c":"code","6c15241c":"code","a27e4be3":"code","91c0bbd2":"code","6c49051c":"code","d5b431a4":"code","c970eeff":"code","f1380545":"code","80e8b869":"code","3d5d328b":"code","d8cc7b72":"code","c00ca71b":"code","c8003e4b":"code","71069c1f":"code","1529d307":"code","683ab9cf":"code","a70cd8e3":"markdown","904b6227":"markdown","fc9e3054":"markdown","5076b515":"markdown","c26c868d":"markdown","96bf2e23":"markdown","55b90afa":"markdown","982a12d8":"markdown","771bf6f5":"markdown","d6d706b7":"markdown","3100522b":"markdown","9b4b5c11":"markdown","68b905b2":"markdown","0c569bea":"markdown","71760f6d":"markdown","27b78315":"markdown","f96c308f":"markdown","2b72fbb1":"markdown","24837400":"markdown","fe11b7e3":"markdown","7668a049":"markdown","63f89352":"markdown","b6aa6d6e":"markdown","a540b3ab":"markdown","c3fa76d1":"markdown","d2fc6129":"markdown"},"source":{"a5bea6e5":"import pandas as pd\nimport numpy as np\nimport scipy.stats as st\nimport matplotlib.pyplot as plt\nimport seaborn as sns","98cc0240":"pd.set_option('display.max_columns',50)","9a4fbed8":"train = pd.read_csv('..\/input\/black-friday-clean-data\/train.csv')\ntest = pd.read_csv(\"..\/input\/black-friday-clean-data\/train.csv\")","bd75d047":"print(train.shape, test.shape)","4fd3dfbd":"train.head(10)","1073af13":"train.isnull().sum()","d91766de":"train['source']='train'\ntest['source']='test'","fe27db7f":"train.Stay_In_Current_City_Years.value_counts()","da975ed5":"train.isnull().sum()","207c2bc5":"test.isnull().sum()","ed3abf70":"test.columns","60b0254a":"test['Product_Category_2'].fillna(value =0,inplace =True)","47c0af68":"test['Product_Category_3'].fillna(value =0,inplace =True)","69fc36b5":"train['Product_Category_2'].fillna(value =0,inplace =True,)","b35419c3":"train['Product_Category_3'].fillna(value =0,inplace =True)","d76fb581":"train.info()","2e36715a":"df = pd.concat([train,test], ignore_index= True, sort =False)","f3e95183":"df.info()","8b74ee70":"df[['Product_Category_2', 'Product_Category_3']] = df[['Product_Category_2', 'Product_Category_3']].astype(int)","48426ac6":"pd.crosstab(train.Purchase.sum(),train.Age)","fbcb0768":"pd.crosstab(train.Purchase.sum(),[train.Age, train.Marital_Status])","45de6ad3":"pd.crosstab(train.Purchase.mean() , train.Occupation)","1d037dcc":"pd.crosstab(train.Purchase.sum(),train.City_Category)","5dea7c8e":"test.User_ID.isin(train.User_ID).astype(int).value_counts()","facec418":"test.Product_ID.isin(train.Product_ID).astype(int).value_counts()","a082efb8":"train[train.Product_ID == 'P00085442'][['Product_Category_1',\n       'Product_Category_2', 'Product_Category_3']]","d96d9cf9":"train[train.Product_ID == 'P00085442'][['Product_Category_1',\n       'Product_Category_2', 'Product_Category_3']].nunique()","386f1948":"train[train.Product_ID == 'P00085442']['Product_Category_3'].nunique()","1d565f64":"df[df.Product_ID == 'P00014542'][['Product_Category_1',\n       'Product_Category_2', 'Product_Category_3']].nunique()","2820dc72":"train[train.Product_ID == 'P00265242']['Purchase']","6858f02d":"print(train[train.Product_ID == 'P00231342']['Purchase'].max())\nprint(train[train.Product_ID == 'P00231342']['Purchase'].min())\nprint(train[train.Product_ID == 'P00231342']['Purchase'].mean())","63cf4592":"prod_price = train.groupby('Product_ID')['Purchase'].mean()","4f512894":"prod_price","1ffeadb0":"test.User_ID.isin(train.User_ID).astype(int).value_counts()","6981aa98":"user_spend = train.groupby('User_ID')['Purchase'].mean()\nuser_spend","28994abf":"np.round(user_spend.min() \/ 2000)","508dddbb":"user_spend =  train.groupby('User_ID')['Purchase'].mean() ","1898a898":"spenddf = pd.DataFrame(user_spend)","1a7f6456":"#spenddf['User_ID'] = spenddf.index","298ddd56":"spenddf.shape","7c5fa460":"spenddf","74014407":"df = pd.merge(df,spenddf,on ='User_ID',sort=False)","2332e08d":"df.head(13)","df461b92":"df.rename(columns={'Purchase_x':'Purchase','Purchase_y':'user_exp'},inplace =True)","2e62504c":"df.head()","05388581":"prod_pop = pd.DataFrame(df.Product_ID.value_counts())","af45f8b9":"# product sales\ndf.groupby('Product_ID')['Purchase'].sum()","d7d854c4":"prod_pop.columns","15aee653":"prod_pop","d6c94ed3":"prod_pop.rename(columns ={'Product_ID':'pop'},inplace =True)","37f82abe":"prod_pop['pop'] =  prod_pop['pop'] ","79e88ff6":"prod_pop['Product_ID'] = prod_pop.index","105ed8d8":"df = pd.merge(df,prod_pop,on ='Product_ID',sort =False)","5c3123e7":"df.head()","36fa8edc":"print(df['pop'].min())\nprint(df['pop'].max())","7e65d66b":"2700\/135","373fb317":"np.round( df['pop'] \/ 135 )","684d1a0c":" # df['pop'] = np.round( df['pop'] \/ 135 )","925a270e":"df.head(20)","cefb5b97":"df.shape","7996c397":"df.columns","a76374bf":"labe_cols =  ['Gender','Age','Stay_In_Current_City_Years']\noh_cols = ['Occupation', 'City_Category']","31a14887":"from sklearn.preprocessing import LabelEncoder\nencoder = LabelEncoder()\nfor i in labe_cols:\n    df[i] = encoder.fit_transform(df[i])","283786c7":"df.head(10)","3471fc70":"df.Age.head(20)","4551bd90":"pd.get_dummies(df.City_Category,prefix='City')","62472702":"df[['City_A','City_B','City_C']] = pd.get_dummies(df.City_Category,prefix='City')[['City_A','City_B','City_C']]","ffc1fc10":"pd.get_dummies(df.Occupation,prefix='Occupation')","ee20e296":"['Occupation_0', 'Occupation_1', 'Occupation_2', 'Occupation_3',\n       'Occupation_4', 'Occupation_5', 'Occupation_6', 'Occupation_7',\n       'Occupation_8', 'Occupation_9', 'Occupation_10', 'Occupation_11',\n       'Occupation_12', 'Occupation_13', 'Occupation_14', 'Occupation_15',\n       'Occupation_16', 'Occupation_17', 'Occupation_18', 'Occupation_19',\n       'Occupation_20']","380fc779":"df[['Occupation_0', 'Occupation_1', 'Occupation_2', 'Occupation_3',\n       'Occupation_4', 'Occupation_5', 'Occupation_6', 'Occupation_7',\n       'Occupation_8', 'Occupation_9', 'Occupation_10', 'Occupation_11',\n       'Occupation_12', 'Occupation_13', 'Occupation_14', 'Occupation_15',\n       'Occupation_16', 'Occupation_17', 'Occupation_18', 'Occupation_19',\n       'Occupation_20']] = pd.get_dummies(df.Occupation,prefix='Occupation')[['Occupation_0', 'Occupation_1', 'Occupation_2', 'Occupation_3',\n       'Occupation_4', 'Occupation_5', 'Occupation_6', 'Occupation_7',\n       'Occupation_8', 'Occupation_9', 'Occupation_10', 'Occupation_11',\n       'Occupation_12', 'Occupation_13', 'Occupation_14', 'Occupation_15',\n       'Occupation_16', 'Occupation_17', 'Occupation_18', 'Occupation_19',\n       'Occupation_20']]","b0c045e3":"df.drop(['City_Category','Occupation'],axis =1,inplace= True)","7cb56b33":"df.head()","ba1fc3db":"df.columns","e115b289":"df = df[['User_ID', 'Product_ID','user_exp','pop', 'Gender', 'Age', 'Stay_In_Current_City_Years',\n       'Marital_Status',  'Product_Category_1', 'Product_Category_2', 'Product_Category_3',\n       'Occupation_0', 'Occupation_1', 'Occupation_2', 'Occupation_3',\n       'Occupation_4', 'Occupation_5', 'Occupation_6', 'Occupation_7',\n       'Occupation_8', 'Occupation_9', 'Occupation_10', 'Occupation_11',\n       'Occupation_12', 'Occupation_13', 'Occupation_14', 'Occupation_15',\n       'Occupation_16', 'Occupation_17', 'Occupation_18', 'Occupation_19',\n       'Occupation_20', 'Purchase','source']]","b5315a19":"df.head()","2cc63371":"cor_mtx = df[['user_exp','pop', 'Gender', 'Age', 'Stay_In_Current_City_Years',\n       'Marital_Status',  'Product_Category_1', 'Product_Category_2', 'Product_Category_3',\n       'Occupation_0', 'Occupation_1', 'Occupation_2', 'Occupation_3',\n       'Occupation_4', 'Occupation_5', 'Occupation_6', 'Occupation_7',\n       'Occupation_8', 'Occupation_9', 'Occupation_10', 'Occupation_11',\n       'Occupation_12', 'Occupation_13', 'Occupation_14', 'Occupation_15',\n       'Occupation_16', 'Occupation_17', 'Occupation_18', 'Occupation_19',\n       'Occupation_20', 'Purchase',]].corr()","cfc404ed":"plt.figure(figsize = (21,21))\nsns.heatmap(cor_mtx, vmin =-1,cmap ='coolwarm',annot= True)\nplt.show()","df0944af":"X = df[df.source == 'train'][['user_exp','pop', 'Gender', 'Age', 'Stay_In_Current_City_Years',\n       'Marital_Status',  'Product_Category_1', 'Product_Category_2', 'Product_Category_3',\n       'Occupation_0', 'Occupation_1', 'Occupation_2', 'Occupation_3',\n       'Occupation_4', 'Occupation_5', 'Occupation_6', 'Occupation_7',\n       'Occupation_8', 'Occupation_9', 'Occupation_10', 'Occupation_11',\n       'Occupation_12', 'Occupation_13', 'Occupation_14', 'Occupation_15',\n       'Occupation_16', 'Occupation_17', 'Occupation_18', 'Occupation_19',\n       'Occupation_20']]\nX.head()","a5939173":"y = df[df.source == 'train']['Purchase']\ny.head()","ce8fc016":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","8e7ebe5c":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\n\nlr = LinearRegression()\nlr.fit(X_train, y_train)","5c3336f1":"y_pred = lr.predict(X_test)\n\nrmse = (np.sqrt(mean_squared_error(y_test, y_pred)))\nrmse","eeb8735e":"import xgboost\nxgb = xgboost.XGBRegressor(n_estimators=100, learning_rate=0.08, gamma=0, subsample=0.75,\n                           colsample_bytree=1, max_depth=7)\nxgb.fit(X_train,y_train)","f08a026c":"y_pred = xgb.predict(X_test)\n\nrmse = (np.sqrt(mean_squared_error(y_test, y_pred)))\nrmse","6c15241c":"from sklearn.ensemble import RandomForestRegressor\nrfr = RandomForestRegressor()\nrfr.fit(X_train, y_train)","a27e4be3":"y_pred = rfr.predict(X_test)\n\nrmse = (np.sqrt(mean_squared_error(y_test, y_pred)))\nrmse","91c0bbd2":"rfr.fit(X,y)","6c49051c":"Testset = df[df.source == 'test']","d5b431a4":"Testset.drop('source',axis =1, inplace =True)","c970eeff":"Testset.columns","f1380545":"XTEST = Testset[[ 'user_exp', 'pop', 'Gender', 'Age',\n       'Stay_In_Current_City_Years', 'Marital_Status', 'Product_Category_1',\n       'Product_Category_2', 'Product_Category_3', 'Occupation_0',\n       'Occupation_1', 'Occupation_2', 'Occupation_3', 'Occupation_4',\n       'Occupation_5', 'Occupation_6', 'Occupation_7', 'Occupation_8',\n       'Occupation_9', 'Occupation_10', 'Occupation_11', 'Occupation_12',\n       'Occupation_13', 'Occupation_14', 'Occupation_15', 'Occupation_16',\n       'Occupation_17', 'Occupation_18', 'Occupation_19', 'Occupation_20']]","80e8b869":"Predicted = rfr.predict(XTEST)","3d5d328b":"Predicted","d8cc7b72":"pd.concat()","c00ca71b":"dsgdsgds 4328 ,2612, 2637","c8003e4b":"from sklearn.model_selection import RandomizedSearchCV\n# Number of trees in random forest\nn_estimators = [int(x) for x in np.linspace(start = 180, stop = 330, num = 7)]\n# Number of features to consider at every split\nmax_features = ['auto', 'sqrt']\n# Maximum number of levels in tree\nmax_depth = [int(x) for x in np.linspace(10, 110, num = 7)]\nmax_depth.append(None)\n# Minimum number of samples required to split a node\nmin_samples_split = [2, 5, 10]\n# Minimum number of samples required at each leaf node\nmin_samples_leaf = [1, 2, 4]\n# Method of selecting samples for training each tree\nbootstrap = [True, False]\n# Create the random grid\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf,\n               'bootstrap': bootstrap}\nprint(random_grid)","71069c1f":"# Use the random grid to search for best hyperparameters\n\n# Random search of parameters, using 3 fold cross validation, \n# search across 100 different combinations, and use all available cores\nrf_random = RandomizedSearchCV(estimator = rfr, param_distributions = random_grid, n_iter = 100,\n                               cv = 3, verbose=2, random_state=42, n_jobs = -1)\n# Fit the random search model\nrf_random.fit(X_train, y_train)","1529d307":"rf_random.best_params_","683ab9cf":" # now that we have the best params lets fill the model on ","a70cd8e3":"### Filling null","904b6227":"#### preping the testset","fc9e3054":"### model fitting","5076b515":"61 new types of products present in testset which are not there in trainset","c26c868d":"# investigate","96bf2e23":"## encoding","55b90afa":"dropping: stay in current city, marital status, occupation 3,4,5,6,8,10,11,13,16,18","982a12d8":"spenddf.rename(columns={'Purchase':'exp'})","771bf6f5":"## not transforming pop 'popularity'","d6d706b7":"## RFR","3100522b":"## data is ready ","9b4b5c11":"### RandomForest regressor  is the best model so far; lets hypertune this one","68b905b2":"same product different price WTF","0c569bea":"### % null values","71760f6d":"### LR","27b78315":"### wether same users are repeated in train and test?","f96c308f":"lets find mean price for all products","2b72fbb1":"#### fitting model on the actual complete trainset so it can be fitted on the actual testset","24837400":"can product id be found out by product category?","fe11b7e3":"# working on training se first","7668a049":"### wether same customers are repeated in train and test?","63f89352":"### wether same products are repeated in train and test?","b6aa6d6e":"## XGB","a540b3ab":"keep in mind, this doesnt include 61 products whose prices are unknown to us","c3fa76d1":"lets find mean expenditure for all users","d2fc6129":"checking if price of a particular product is constant"}}