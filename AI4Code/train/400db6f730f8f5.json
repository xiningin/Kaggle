{"cell_type":{"95d3adb3":"code","e2af5ebc":"code","9fd58d08":"code","366fc012":"code","ff7d2d04":"code","84e9b6b3":"code","6cd9cacb":"code","6997bae3":"code","05549a81":"code","45ef1847":"code","3083a290":"code","462d3676":"code","0b54543a":"code","8347b2d8":"code","8f469af4":"code","9b62d6ac":"markdown","fba9a98e":"markdown","67d6bc6a":"markdown","0d7f524b":"markdown","9b285338":"markdown","f38bb73e":"markdown","aadd99a0":"markdown"},"source":{"95d3adb3":"import os\nimport tensorflow as tf\nfrom tensorflow import keras\nimport numpy as np\nimport matplotlib.pyplot as plt","e2af5ebc":"data_dir = '\/kaggle\/input\/flowers-recognition\/flowers'\nclass_names = [name for name in os.listdir(data_dir)]\nprint(class_names)","9fd58d08":"image_height = 150\nimage_width = 150\n\nbatch_size = 32","366fc012":"def get_label(path):\n    parts = tf.strings.split(path, os.path.sep)\n    one_hot = parts[-2] == class_names\n    return tf.argmax(one_hot)","ff7d2d04":"def decode_image(image):\n    image = tf.io.decode_jpeg(image, channels=3)\n    return tf.image.resize(image, [image_height, image_width])","84e9b6b3":"def process_path(path):\n    label = get_label(path)\n    image = tf.io.read_file(path)\n    image = decode_image(image)\n    return image, label","6cd9cacb":"autotune = tf.data.experimental.AUTOTUNE\n\ndataset = tf.data.Dataset.list_files(f'{data_dir}\/*\/*.jpg', shuffle=True)\ndataset = dataset.map(process_path, num_parallel_calls=autotune)\n\ntrain_size = int(len(dataset) * 0.9)\ntrain_dataset = dataset.take(train_size)\ntest_dataset = dataset.skip(train_size)\n\nval_size = int(len(train_dataset) * 0.2)\nval_dataset = train_dataset.take(val_size)\ntrain_dataset = train_dataset.skip(val_size)","6997bae3":"def configure_dataset(ds):\n    ds = ds.shuffle(1000)\n    ds = ds.batch(batch_size)\n    ds = ds.cache()\n    ds = ds.prefetch(autotune)\n    return ds","05549a81":"train_dataset = configure_dataset(train_dataset)\nval_dataset = configure_dataset(val_dataset)\ntest_dataset = configure_dataset(test_dataset)","45ef1847":"model = keras.Sequential([\n    keras.layers.InputLayer(input_shape=(image_width, image_height, 3)),\n#     keras.layers.experimental.preprocessing.RandomFlip(),\n#     keras.layers.experimental.preprocessing.RandomRotation(0.2),\n#     keras.layers.experimental.preprocessing.RandomZoom((0.2, 0.3)),\n    keras.layers.experimental.preprocessing.Rescaling(1.\/255),\n    keras.layers.Conv2D(32, 3, activation='relu'),\n    keras.layers.MaxPool2D(),\n    keras.layers.Conv2D(64, 3, activation='relu'),\n    keras.layers.MaxPool2D(),\n    keras.layers.Conv2D(128, 3, activation='relu'),\n    keras.layers.MaxPool2D(),\n    keras.layers.Flatten(),\n    keras.layers.Dropout(0.3),\n    keras.layers.Dense(64, activation='relu'),\n    keras.layers.Dropout(0.3),\n    keras.layers.Dense(128, activation='relu'),\n    keras.layers.Dropout(0.3),\n    keras.layers.Dense(len(class_names), activation='softmax')\n])\n\nmodel.summary()","3083a290":"model.compile(optimizer='adam',\n             loss='sparse_categorical_crossentropy',\n             metrics=['accuracy'])","462d3676":"hist = model.fit(train_dataset,\n                 epochs=20,\n                 validation_data=val_dataset)","0b54543a":"acc = hist.history['accuracy']\nval_acc = hist.history['val_accuracy']\nloss = hist.history['loss']\nval_loss = hist.history['val_loss']\nepochs = range(1, len(acc) + 1)\n\nplt.plot(epochs, acc, 'r', label='Training accuracy')\nplt.plot(epochs, val_acc, 'b', label='Validation accuracy')\nplt.title('Traing and Validaion accuracy')\nplt.legend()\n\nplt.figure()\n\nplt.plot(epochs, loss, 'r', label='Training loss')\nplt.plot(epochs, val_loss, 'b', label='Validation loss')\nplt.title('Traing and Validaion loss')\nplt.legend()\n\nplt.show()\n","8347b2d8":"import matplotlib.pyplot as plt\n\npredictions = model.predict(test_dataset)\n\nindex = 20\n\nfor img, label in test_dataset.take(1):\n    print('True label:', class_names[label[index]])\n    img = keras.preprocessing.image.array_to_img(img[index])\n    \n\nprint(\n    \"This image most likely belongs to {} with a {:.2f} percent confidence.\"\n    .format(class_names[np.argmax(predictions[index])], 100 * np.max(predictions[index]))\n)","8f469af4":"img","9b62d6ac":"# Create function to convert file path into image, label pair","fba9a98e":"# Create dataset using tf.data","67d6bc6a":"# Training model","0d7f524b":"# Visualize training and validation","9b285338":"# Configure model","f38bb73e":"# Create model","aadd99a0":"# Make predictions"}}