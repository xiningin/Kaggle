{"cell_type":{"df4c1672":"code","b69e4e22":"code","6013a24d":"code","085a4ed0":"code","ea98dbff":"code","9c2266c4":"code","392e2ce9":"code","a43d1573":"code","3e08a00c":"code","194c4865":"code","dc756efe":"code","730b9ec7":"code","153baa73":"code","ec81f8c1":"code","d940c0ce":"code","ad980ab3":"code","53c7063a":"code","67cf1323":"code","5163aa49":"code","1a6907c2":"code","3a152ee2":"code","e86ceb46":"code","945de0af":"code","180a20ba":"code","7c7be895":"code","4383796f":"code","fc826a13":"code","8a437ae6":"code","4747ea12":"code","46a0f30f":"code","30bda593":"code","ad8302f0":"code","2428d8a8":"code","0b46df52":"code","699eb213":"code","ac196b6d":"code","70b076e1":"code","d821e917":"code","6470e3e7":"code","bc47b9c0":"code","32f66772":"code","61b0be2d":"code","1267bb03":"code","283ab351":"code","698f1ab3":"code","bfad0d7b":"code","9c7909be":"code","cfff5cf7":"code","26272564":"code","d425632d":"code","9cadd7a0":"code","2af90629":"code","41eaa09e":"code","d08a77d2":"code","06a845a5":"code","219854b6":"code","2a05ae5a":"code","4f7773e7":"code","6e253a69":"code","3f3569a6":"code","f3f98a9b":"code","b82610cd":"code","54f7ebce":"code","239e0487":"code","b16b0e6f":"code","b766b850":"code","04694b5d":"code","77d4941b":"code","85d2178a":"code","9da5cd6d":"code","bd819bad":"code","c9983ce5":"code","7aa63196":"code","a878d045":"code","1b8be629":"code","b94ed13f":"code","b7ee10d0":"code","d1a73933":"code","de8cd159":"code","db7eb81f":"code","e5707d31":"code","f06d5d51":"code","07cdb0d3":"code","700b00e7":"code","307a56c7":"code","6bf397a0":"code","bb7654d4":"code","96500a54":"code","92027a0e":"code","92e5425c":"code","c31754e9":"code","8d9b2a87":"code","ad075067":"code","cec4f116":"code","015c9a60":"code","a2cfdb8a":"code","b27e595d":"code","1114773c":"code","c633cb10":"code","df453c50":"code","919d271c":"code","f78b8634":"code","23dde405":"code","637f2362":"code","eaa3c692":"code","0a7e1e46":"code","3154f39e":"code","cb50f7da":"code","2fb883a1":"code","3d19181d":"code","918bf0fc":"code","9b9bd75d":"code","44735eb3":"code","60958c27":"code","e95f1ddc":"code","a00e0d32":"code","2d2af054":"code","adfc664e":"code","78db01d9":"code","de1dc8a3":"markdown","a45cab59":"markdown","2d8a3aa4":"markdown","b1993b0f":"markdown","ea779db5":"markdown","82ae6ac9":"markdown","f7bb3498":"markdown","0aec88ce":"markdown","50062304":"markdown","c5e89f09":"markdown","015a2d33":"markdown","9c07b9c4":"markdown"},"source":{"df4c1672":"import numpy as np    # linear algebra\nimport pandas as pd   # data processing\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b69e4e22":"import matplotlib.pyplot as plt #plotting\nimport seaborn as sns           #plotting\n%matplotlib inline","6013a24d":"df=pd.read_csv('\/kaggle\/input\/data-science-circle-challenge\/train.csv')","085a4ed0":"df.shape","ea98dbff":"#This loop determines the columns with nan values more than 25% so we can drop them  \ni=0.25*395661\nlst=['TransactionID']\nfor col in df.columns:\n    if sum(df[col].isnull())>i:\n        lst.append(col)","9c2266c4":"df=df.drop(columns=lst)","392e2ce9":"df=df.reset_index()            #resetting the index\ndf=df.drop(columns=['index'])","a43d1573":"pd.set_option('display.max_columns', None)   #to show all columns","3e08a00c":"df_cat=df.loc[:,['ProductCD','card4','card6','P_emaildomain']] #the categorical columns","194c4865":"df_cat.head()","dc756efe":"#first group\ndf_g1=df.loc[:,['isFraud','TransactionDT','TransactionAmt','card1','card2','card3','card5','addr1','addr2']]","730b9ec7":"#second group\ndf_g2=df.iloc[:,13:70]","153baa73":"#third group\ndf_g3=df.iloc[:,70:125]","ec81f8c1":"#fourth group\ndf_g4=df.iloc[:,125:]","d940c0ce":"from sklearn.impute import SimpleImputer  #to deal with nan values","ad980ab3":"df_1=SimpleImputer(strategy='median').fit_transform(df_g1)   #filling with median","53c7063a":"df_1=pd.DataFrame(df_1,columns=df_g1.columns,index=df_g1.index)","67cf1323":"df_1.info()","5163aa49":"df_g2.shape #a lot of data so we divide it again","1a6907c2":"#section 1\ndf_g2_1=df_g2.iloc[:,:17]","3a152ee2":"df_g2_1=df_g2_1.fillna(0)   #the median of most coulmns is zero so we fill with 0","e86ceb46":"#section 2\ndf_g2_d2=df_g2.iloc[:,17:38]","945de0af":"df_g2_d2.head()","180a20ba":"df_g2_2=SimpleImputer(strategy='median').fit_transform(df_g2_d2) #we fill with median","7c7be895":"df_g2_2=pd.DataFrame(df_g2_2,columns=df_g2_d2.columns,index=df_g2_d2.index)","4383796f":"#section 3\ndf_g2_d3=df_g2.iloc[:,38:]","fc826a13":"df_g2_d3.info()","8a437ae6":"df_g2_3=SimpleImputer(strategy='median').fit_transform(df_g2_d3)   #filling with median","4747ea12":"df_g2_3=pd.DataFrame(df_g2_3,columns=df_g2_d3.columns,index=df_g2_d3.index)","46a0f30f":"df_g3.info()","30bda593":"df_3=SimpleImputer(strategy='median').fit_transform(df_g3)   #filling the data with median","ad8302f0":"df_3=pd.DataFrame(df_3,columns=df_g3.columns,index=df_g3.index)","2428d8a8":"df_g4.info()","0b46df52":"df_g4.shape","699eb213":"df_4=SimpleImputer(strategy='median').fit_transform(df_g4) #filling with median","ac196b6d":"df_4=pd.DataFrame(df_4,columns=df_g4.columns,index=df_g4.index)","70b076e1":"df_cat.head()","d821e917":"for col in df_cat.columns:\n    df_cat[col]=df_cat[col].astype('category')","6470e3e7":"df_cat.P_emaildomain.value_counts()","bc47b9c0":"df_cat.P_emaildomain=df_cat.P_emaildomain.replace('gmail','gmail.com') \n#converting the gmail to .com as usual","32f66772":"df_cat.P_emaildomain=df_cat.P_emaildomain.replace(['roadrunner.com','frontier.com','embarqmail.com',\n                    'twc.com','web.de','netzero.com','prodigy.net.mx','q.com','centurylink.net', \n                'frontiernet.net','cfl.rr.com','netzero.net','suddenlink.net','sc.rr.com',\n                              'cableone.net','gmx.de','yahoo.fr','yahoo.es','hotmail.co.uk',\n                'protonmail.com','yahoo.de','ptd.net','live.fr','yahoo.co.uk','hotmail.de',\n                              'yahoo.co.jp','servicios-ta.com'],'others')\n#replacing the unusual domains with 'others'","61b0be2d":"df_cat.P_emaildomain.value_counts()","1267bb03":"df_0=SimpleImputer(strategy='most_frequent').fit_transform(df_cat)  #filling with mode","283ab351":"df_0=pd.DataFrame(df_0,columns=df_cat.columns,index=df_cat.index)","698f1ab3":"for col in df_0.columns:\n    df_0[col]=df_0[col].astype('category')    #make the columns types as category to encode them","bfad0d7b":"for col in df_0.columns:\n    df_0[col]=df_0[col].cat.codes         #encoding the columns","9c7909be":"visa=pd.concat([df_0,df_1,df_g2_1,df_g2_2,df_g2_3,df_3,df_4],axis=1)  #our clean dataset","cfff5cf7":"visa.head()","26272564":"visa.shape","d425632d":"from sklearn.model_selection import StratifiedShuffleSplit  \n#to make the train and test sets stratified","9cadd7a0":"split=StratifiedShuffleSplit(n_splits=1,test_size=0.2,random_state=42)","2af90629":"for train_index,test_index in split.split(visa,visa['isFraud']):\n    train_set=visa.loc[train_index]\n    test_set=visa.loc[test_index]","41eaa09e":"x_train=train_set.drop(columns=['isFraud'])\ny_train=train_set['isFraud']","d08a77d2":"x_test=test_set.drop(columns=['isFraud'])\ny_test=test_set['isFraud']","06a845a5":"from sklearn.linear_model import SGDClassifier       \nsgd=SGDClassifier(max_iter=1000,random_state=42)   ","219854b6":"from sklearn.model_selection import cross_val_score\ncross_val_score(sgd, x_train, y_train, cv=5, scoring=\"roc_auc\")  #try using the sgd model\n#and it's so bad","2a05ae5a":"from sklearn.model_selection import cross_val_predict\nfrom sklearn.metrics import confusion_matrix","4f7773e7":"from sklearn.feature_selection import SelectKBest   #for feature selection\nfrom sklearn.feature_selection import f_classif","6e253a69":"from sklearn.preprocessing import MinMaxScaler     #for normalization\nscaler = MinMaxScaler(feature_range=(0, 1))\nx_train_norm = scaler.fit_transform(x_train)\nx_train_norm=pd.DataFrame(x_train_norm,columns=x_train.columns,index=x_train.index)","3f3569a6":"#We divide the data so we can make feature selection in less data\n\nx_train_1=x_train_norm.iloc[:,:40]\nx_train_2=x_train_norm.iloc[:,40:80]\nx_train_3=x_train_norm.iloc[:,80:120]\nx_train_4=x_train_norm.iloc[:,120:]","f3f98a9b":"test = SelectKBest(score_func=f_classif, k=20)\nfit = test.fit(x_train_1, y_train)\nprint(sorted(zip(fit.scores_,x_train_1.columns),reverse=True))","b82610cd":"test = SelectKBest(score_func=f_classif, k=20)\nfit = test.fit(x_train_2, y_train)\nprint(sorted(zip(fit.scores_,x_train_2.columns),reverse=True))","54f7ebce":"test = SelectKBest(score_func=f_classif, k=20)\nfit = test.fit(x_train_3, y_train)\nprint(sorted(zip(fit.scores_,x_train_3.columns),reverse=True))","239e0487":"test = SelectKBest(score_func=f_classif, k=20)\nfit = test.fit(x_train_4, y_train)\nprint(sorted(zip(fit.scores_,x_train_4.columns),reverse=True))","b16b0e6f":"#then we select the the best features\n\nx_train_f=x_train_norm.loc[:,['V18','V17','ProductCD','V15','card3','card6','V16','V21','V22',\n                        'V123','V302','V304','V303','V125','V283','V282','V87','V86','V94','V81',\n                        'V93','V92','V85','V84','V111','V113','V112','V90','V91','V108','V114',\n                        'V110','V116','V79','V33','V34','V74','V80','V73','V58','V31','V57',\n                        'V32','V77','V72','V23','V78','V71','V63','V59','V64','V60','V24','V29',\n                     'V69','V70','V30','D15','D10','D1','V67','V62','V56','V83','V109','V115',\n                           'V124','V281']]","b766b850":"cross_val_score(sgd, x_train_f, y_train, cv=5, scoring=\"roc_auc\")\n#a lot better","04694b5d":"y_train_pred=cross_val_predict(sgd,x_train_f,y_train,cv=5)\nconfusion_matrix(y_train,y_train_pred)\n#ok, it's still bad","77d4941b":"from sklearn.preprocessing import StandardScaler     #for standarization\nx_train_fs=StandardScaler().fit_transform(x_train_f)","85d2178a":"x_train_fs=pd.DataFrame(x_train_fs,columns=x_train_f.columns,index=x_train_f.index)","9da5cd6d":"cross_val_score(sgd, x_train_fs, y_train, cv=5, scoring=\"roc_auc\")","bd819bad":"y_train_pred=cross_val_predict(sgd,x_train_fs,y_train,cv=5)\nconfusion_matrix(y_train,y_train_pred)  \n#better","c9983ce5":"from sklearn.ensemble import RandomForestClassifier\nforest_clf = RandomForestClassifier(random_state=42)","7aa63196":"cross_val_score(forest_clf, x_train_f, y_train, cv=5,scoring='roc_auc')\n#very good","a878d045":"y_forest = cross_val_predict(forest_clf, x_train_f, y_train, cv=5)\nconfusion_matrix(y_train,y_forest)      #without standraization","1b8be629":"y_forest = cross_val_predict(forest_clf, x_train_fs, y_train, cv=5)\nconfusion_matrix(y_train,y_forest)    #the standraization doesn't do a lot ","b94ed13f":"from sklearn.metrics import roc_auc_score\nroc_auc_score(y_train, y_forest)  #we still can do much better","b7ee10d0":"#removing the outliers\nq1=visa[visa.isFraud==0].quantile(0.05)\nq2=visa[visa.isFraud==0].quantile(0.95)\niqr=q2-q1\nmini=q1-1.5*iqr\nmaxi=q2+1.5*iqr\ncon=(visa[visa.isFraud==0]<=maxi)&(visa[visa.isFraud==0]>=mini)\ncon=con.all(axis=1)\nvisa_iqr=visa[visa.isFraud==0][con]  ","d1a73933":"visa_iqr.shape","de8cd159":"visa_iqr.isFraud.value_counts()  #It seems that all 1 values are dropped :(","db7eb81f":"visa_new=pd.concat([visa_iqr,visa[visa.isFraud==1]])   \n#making a dataframe of the 1 values with the data comes from the quantile (after removing outliers)","e5707d31":"visa_new=visa_new.reset_index()\nvisa_new=visa_new.drop(columns=['index'])","f06d5d51":"visa_new.shape","07cdb0d3":"#splitting the data \nfor train_index,test_index in split.split(visa_new,visa_new['isFraud']):\n    train_set_new=visa_new.loc[train_index]\n    test_set_new=visa_new.loc[test_index]","700b00e7":"x_train_new=train_set_new.drop(columns=['isFraud'])\ny_train_new=train_set_new['isFraud']","307a56c7":"x_test_new=test_set_new.drop(columns=['isFraud'])\ny_test_new=test_set_new['isFraud']","6bf397a0":"#selecting the best features\nx_test_newf=x_test_new.loc[:,['V18','V17','ProductCD','V15','card3','card6','V16','V21','V22','V123',\n                        'V302','V304','V303','V125','V283','V282','V87','V86','V94','V81',\n                        'V93','V92','V85','V84','V111','V113','V112','V90','V91','V108','V114',\n                        'V110','V116','V79','V33','V34','V74','V80','V73','V58','V31','V57',\n                        'V32','V77','V72','V23','V78','V71','V63','V59','V64','V60','V24','V29',\n                        'V69','V70','V30','D15','D10','D1','V67','V62','V56','V83','V109','V115',\n                           'V124','V281']]","bb7654d4":"x_train_newf=x_train_new.loc[:,['V18','V17','ProductCD','V15','card3','card6','V16','V21','V22','V123',\n                        'V302','V304','V303','V125','V283','V282','V87','V86','V94','V81',\n                        'V93','V92','V85','V84','V111','V113','V112','V90','V91','V108','V114',\n                        'V110','V116','V79','V33','V34','V74','V80','V73','V58','V31','V57',\n                        'V32','V77','V72','V23','V78','V71','V63','V59','V64','V60','V24','V29',\n                        'V69','V70','V30','D15','D10','D1','V67','V62','V56','V83','V109','V115',\n                           'V124','V281']]","96500a54":"x_train_newf.shape","92027a0e":"y_train_new.shape","92e5425c":"from imblearn.over_sampling import SMOTE       #for upsampling\nsm = SMOTE(random_state=42)\nx_train_res, y_train_res = sm.fit_sample(x_train_newf, y_train_new)","c31754e9":"y_train_res.shape","8d9b2a87":"y_train_res.value_counts()","ad075067":"visa_super0=visa_new.loc[:,['isFraud','V18','V17','ProductCD','V15','card3','card6','V16','V21','V22','V123',\n                        'V302','V304','V303','V125','V283','V282','V87','V86','V94','V81',\n                        'V93','V92','V85','V84','V111','V113','V112','V90','V91','V108','V114',\n                        'V110','V116','V79','V33','V34','V74','V80','V73','V58','V31','V57',\n                        'V32','V77','V72','V23','V78','V71','V63','V59','V64','V60','V24','V29',\n                        'V69','V70','V30','D15','D10','D1','V67','V62','V56','V83','V109','V115',\n                           'V124','V281']]","cec4f116":"y_forest = cross_val_predict(forest_clf, x_train_res, y_train_res, cv=5)\nconfusion_matrix(y_train_res,y_forest)\n#much better","015c9a60":"roc_auc_score(y_train_res,y_forest)\n#great score but let's try to improve it","a2cfdb8a":"from sklearn.model_selection import GridSearchCV\n\nparam_grid = [\n\n    {'n_estimators': [30,50,100,200], 'max_features': [2, 4, 6, 8]}\n    \n  ]\n\nforest_clf = RandomForestClassifier(random_state=42)\n\ngrid_search = GridSearchCV(forest_clf, param_grid, cv=5,\n                           scoring='roc_auc',\n                           return_train_score=True)\ngrid_search.fit(x_train_res, y_train_res)","b27e595d":"grid_search.best_params_     #the best params","1114773c":"forest_clf = RandomForestClassifier(random_state=42,max_features=2,n_estimators=200)","c633cb10":"y_forest = cross_val_predict(forest_clf, x_train_res, y_train_res, cv=5)\nconfusion_matrix(y_train_res,y_forest)\n#great","df453c50":"roc_auc_score(y_train_res,y_forest)\n#that's our best ","919d271c":"forest_clf.fit(x_train_res,y_train_res)    #fitting the model\ny_pre=forest_clf.predict(x_test_newf)\nconfusion_matrix(y_test_new,y_pre)","f78b8634":"roc_auc_score(y_test_new,y_pre)","23dde405":"visa_mega0=pd.concat([x_train_res,x_test_newf])  ","637f2362":"visa_mega1=pd.concat([y_train_res,y_test_new])","eaa3c692":"visa_mega=pd.concat([visa_mega0,visa_mega1],axis=1)","0a7e1e46":"forest_clf.fit(visa_mega.drop(columns='isFraud'),visa_mega['isFraud'])","3154f39e":"#The data we want to predict on\ndf2=pd.read_csv('\/kaggle\/input\/data-science-circle-challenge\/test.csv')","cb50f7da":"ID=df2['TransactionID']    #The first column of submission","2fb883a1":"df2=df2.loc[:,['V18','V17','ProductCD','V15','card3','card6','V16','V21','V22','V123',\n                        'V302','V304','V303','V125','V283','V282','V87','V86','V94','V81',\n                        'V93','V92','V85','V84','V111','V113','V112','V90','V91','V108','V114',\n                        'V110','V116','V79','V33','V34','V74','V80','V73','V58','V31','V57',\n                        'V32','V77','V72','V23','V78','V71','V63','V59','V64','V60','V24','V29',\n                        'V69','V70','V30','D15','D10','D1','V67','V62','V56','V83','V109','V115',\n                           'V124','V281']]","3d19181d":"df2.ProductCD=df2.ProductCD.astype('category')\ndf2.card6=df2.card6.astype('category')","918bf0fc":"df2.fillna(value={'ProductCD':df2.ProductCD.mode(),'card6':df2.card6.mode()},inplace=True)","9b9bd75d":"for col in ['ProductCD','card6']:\n    df2[col]=df2[col].cat.codes","44735eb3":"df2_0=SimpleImputer(strategy='median').fit_transform(df2)\ndf2_0=pd.DataFrame(df2_0,columns=df2.columns,index=df2.index)","60958c27":"y_proba=forest_clf.predict_proba(df2_0)","e95f1ddc":"y_f=pd.DataFrame(y_proba)","a00e0d32":"final=pd.concat([ID,y_f[1]],axis=1)  #preparing the final shape of submission","2d2af054":"final=final.rename(columns={1: \"isFraud\"})","adfc664e":"final.info()","78db01d9":"final.to_csv('finaloX.csv',index=False)","de1dc8a3":"## And we are ready ","a45cab59":"# After submission we get about 82% roc_auc score ","2d8a3aa4":"## Then predict with the probability","b1993b0f":"### Let's try a different model (random forest)","ea779db5":"## It seems that dividing group 2 isn't helpful specially when it's all V columns","82ae6ac9":"### now we concat all the data we used","f7bb3498":"### Preparing the test data","0aec88ce":"# Now let's divide the data so we can deal with it easily","50062304":"### Then we fit the model with the whole data ","c5e89f09":"# Let's start hyperparameter tuning using grid search","015a2d33":"# Getting the data","9c07b9c4":"# Training and testing the data"}}