{"cell_type":{"bd8e3a1f":"code","f2634be3":"code","da329ec9":"code","ca4c86d1":"code","6e95c659":"code","f1bd05db":"code","f08d6a05":"code","6f4da5ed":"code","ccfa2cb1":"code","192b0a5d":"code","cdca848e":"code","b9372a52":"code","bf19f215":"code","f515dd75":"code","a17bb411":"code","21f53426":"code","cb9f7e3a":"code","ded2657b":"code","dc8b6400":"markdown","48aa870d":"markdown","622a960a":"markdown","92ed2c65":"markdown","cff775f6":"markdown","c35d063b":"markdown","ac9e49cc":"markdown","691ca31a":"markdown","c3ecab09":"markdown","5f67647c":"markdown","5442b463":"markdown"},"source":{"bd8e3a1f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os","f2634be3":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \ndata=pd.read_csv('\/kaggle\/input\/social-network-ads\/Social_Network_Ads.csv')\ndata.head(5)\n","da329ec9":"data=data.iloc[:,2:]\nx=data.iloc[:, :-1].values\ny=data.iloc[:,-1].values","ca4c86d1":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test= train_test_split(x,y, test_size=0.25, random_state=0)","6e95c659":"#x_train","f1bd05db":"#x_test","f08d6a05":"#y_train","6f4da5ed":"#y_test","ccfa2cb1":"from sklearn.preprocessing import StandardScaler\nsc=StandardScaler()\nx_train=sc.fit_transform(x_train)\nx_test=sc.transform(x_test)","192b0a5d":"#x_train","cdca848e":"#x_test","b9372a52":"from sklearn.ensemble import RandomForestClassifier\nclassifier=RandomForestClassifier(n_estimators=100, criterion=\"entropy\",random_state=0)\nclassifier.fit(x_train, y_train)","bf19f215":"classifier.predict(sc.transform([[30,87000]]))","f515dd75":"y_pred=classifier.predict(x_test)\nnp.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1)","a17bb411":"from sklearn.metrics import confusion_matrix, accuracy_score \nconfusion_matrix(y_test, y_pred)","21f53426":"accuracy_score(y_test, y_pred)","cb9f7e3a":"from matplotlib.colors import ListedColormap\nX_set, y_set = sc.inverse_transform(x_train), y_train\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 10, stop = X_set[:, 0].max() + 10, step = 0.25),\n                     np.arange(start = X_set[:, 1].min() - 1000, stop = X_set[:, 1].max() + 1000, step = 0.25))\nplt.contourf(X1, X2, classifier.predict(sc.transform(np.array([X1.ravel(), X2.ravel()]).T)).reshape(X1.shape),\n             alpha = 0.75, cmap = ListedColormap(('red', 'green')))\nplt.xlim(X1.min(), X1.max())\nplt.ylim(X2.min(), X2.max())\nfor i, j in enumerate(np.unique(y_set)):\n    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1], c = ListedColormap(('red', 'green'))(i), label = j)\nplt.title('Random Forest Classification (Training set)')\nplt.xlabel('Age')\nplt.ylabel('Estimated Salary')\nplt.legend()\nplt.show()","ded2657b":"from matplotlib.colors import ListedColormap\nX_set, y_set = sc.inverse_transform(x_test), y_test\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 10, stop = X_set[:, 0].max() + 10, step = 0.25),\n                     np.arange(start = X_set[:, 1].min() - 1000, stop = X_set[:, 1].max() + 1000, step = 0.25))\nplt.contourf(X1, X2, classifier.predict(sc.transform(np.array([X1.ravel(), X2.ravel()]).T)).reshape(X1.shape),\n             alpha = 0.75, cmap = ListedColormap(('red', 'green')))\nplt.xlim(X1.min(), X1.max())\nplt.ylim(X2.min(), X2.max())\nfor i, j in enumerate(np.unique(y_set)):\n    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1], c = ListedColormap(('red', 'green'))(i), label = j)\nplt.title('Random Forest Classification (Test set)')\nplt.xlabel('Age')\nplt.ylabel('Estimated Salary')\nplt.legend()\nplt.show()","dc8b6400":"## Visualising the Training set results","48aa870d":"## Predicting a new result","622a960a":"## Importing the libraries","92ed2c65":"## Feature Scaling","cff775f6":"## Importing the dataset","c35d063b":"# Random Forest Classification","ac9e49cc":"## Visualising the Test set results","691ca31a":"## Splitting the dataset into the Training set and Test set","c3ecab09":"## Making the Confusion Matrix","5f67647c":"## Training the Random Forest Classification model on the Training set","5442b463":"## Predicting the Test set results"}}