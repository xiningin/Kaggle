{"cell_type":{"a1eac0d8":"code","52ab1e4c":"code","b33a2443":"code","dd9b4408":"code","869d7ec3":"code","b1b83e9a":"code","1ee18f35":"code","8a5162bb":"code","3056fed1":"code","fb2b9437":"markdown","02cd0b7a":"markdown","eabd1db3":"markdown","5c8de6e4":"markdown","df705ca6":"markdown","798be51a":"markdown","85b415a7":"markdown"},"source":{"a1eac0d8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport math as m\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib as ml\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport seaborn as sns\n%matplotlib inline\nml.style.use('fivethirtyeight')\n\n# sklearn\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score,mean_squared_error\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","52ab1e4c":"data = pd.read_csv('\/kaggle\/input\/position-salaries\/Position_Salaries.csv')\nprint(\"SHAPE = \",data.shape)\nprint(\"\\nINFORMATION : \\n\")\nprint(data.info())\nprint(\"\\nDESCRIPTION : \\n\\n\",data.describe())\ndata.head()","b33a2443":"print(\"No. of unique positions = \",data.Position.nunique())\nprint(\"\\nUnique positions : \\n\\n\",data.Position.unique())\n\n# Label encode : As these are positions of varying importance, so can be considered as ranks (ordinal)\nle = LabelEncoder()\nvals = le.fit_transform(data.Position)\ndata['Position_enc'] = vals\ndata.drop(columns=['Position'],axis=1,inplace=True)\ndata","dd9b4408":"# Splitting into X and Y\nX = np.array(data.iloc[:,0:3:2].values)\nY = np.array(data.Salary.values)\nprint(\"X shape = \",X.shape)\nprint(\"Y shape = \",Y.shape)\nprint(\"\\nFeatures : \\n\",X)\nprint(\"\\nLabels : \\n\",Y)","869d7ec3":"# Initializing fig and axes\nfig = plt.figure(figsize=(10,5))\nax = fig.add_subplot(111,projection='3d')\n# Scatter plot\nax.scatter(data.Level.values, data.Position_enc.values, data.Salary.values, zdir='z', s = 180, c = 'red', depthshade=True)\nax.set_xlabel('LEVEL')\nax.set_ylabel('POSITION')\nax.set_zlabel('SALARY')\nax.set_title('3D REPRESENTATION OF THE DATA')\nplt.show()\n\nplt.figure(figsize=(5,3))\nplt.scatter(data.Level,data.Salary,c = 'blue')\nplt.xlabel(\"LEVEL\")\nplt.ylabel('SALARY')\nplt.title('SALARY VS LEVEL')\nplt.show()\nplt.figure(figsize=(5,3))\nplt.scatter(data.Position_enc,data.Salary,c = 'green')\nplt.xlabel(\"POSITION\")\nplt.ylabel('SALARY')\nplt.title('SALARY VS POSITION')\nplt.show()","b1b83e9a":"def PolyReg(trainx=X,trainy=Y,degree=2):\n    testx = X\n    testy = Y\n    pol = PolynomialFeatures(degree=degree,order='C')\n    X_poly_train = pol.fit_transform(trainx)\n    X_poly_test = pol.fit_transform(testx)\n    lr = LinearRegression()\n    lr.fit(X_poly_train,trainy)\n    y_pred = lr.predict(X_poly_test)\n    r2 = r2_score(y_pred,testy)\n    mse = mean_squared_error(y_pred,testy)\n    rmse = m.sqrt(mean_squared_error(y_pred,testy))\n    \n    return r2,mse,rmse","1ee18f35":"# Sample Run\nr2,mse,rmse = PolyReg(X,Y,degree=5)\nprint(\"Mean squared error = {} , Root mean squared error = {} , R2 Score = {}\".format(mse,rmse,r2))\n# Plotting r2 scores to get optimum value of degree of polynomial.\niterate,rmse_it = [],[]\nfor i in range(1,11):\n    r2_i,mse_i,rmse_i = PolyReg(X,Y,degree = i)\n    iterate.append(r2_i)\n    rmse_it.append(rmse_i)\n    \nxaxis = np.arange(10) + 1\n\nplt.plot(xaxis,iterate,label=\"TEST\")\nplt.legend()\nplt.xlabel(\"DEGREE OF THE POLYNOMIAL IN POLYNOMIAL REGRESSION\")\nplt.ylabel(\"r2-SCORE\")\nplt.title(\"R2-SCORE BASED COMPARISON\");\nplt.show()\n\nplt.plot(xaxis,rmse_it,c = 'red', label=\"TEST\")\nplt.legend()\nplt.xlabel(\"DEGREE OF THE POLYNOMIAL IN POLYNOMIAL REGRESSION\")\nplt.ylabel(\"RMSE\")\nplt.title(\"RMSE BASED COMPARISON\");\nplt.show()","8a5162bb":"# Test for optimum degree = 4\nr21,mse1,rmse1 = PolyReg(X,Y,degree=2)\nprint(\"Root mean squared error = {} , R2 Score = {}\\n\".format(rmse1,r21))\n\n# Define function for plotting graphs for different test degrees\ndef plotGraph(data,trainx = X,trainy = Y, degree = 2):\n    testx = X\n    testy = Y\n    pol = PolynomialFeatures(degree=degree,order='C')\n    X_poly_train = pol.fit_transform(trainx)\n    X_poly_test = pol.fit_transform(testx)\n    lr = LinearRegression()\n    lr.fit(X_poly_train,trainy)\n    y_pred = lr.predict(X_poly_test)\n    \n    # Plot\n    plt.scatter(data.Level,Y,label=\"DATA\",color='black')\n    plt.plot(data.Level,y_pred,label=\"MODEL\",color='red')\n    plt.legend()\n    plt.show()\n    \n    # Accuracy\n    acc = r2_score(y_pred,testy)*100\n    print(\"Accuracy of this model = {} %\".format(acc))\n    \n# Sample test for degree = 5\nplotGraph(data,X,Y,degree = 5)","3056fed1":"# Sample test for degree = 2\nplotGraph(data,X,Y,degree = 2)","fb2b9437":"### An arguably good fit","02cd0b7a":"# BUILDING THE MODEL","eabd1db3":"### Clearly, this is an overfit","5c8de6e4":"# PLOTTING THE FEATURES AND THEIR RELATION WITH SALARY","df705ca6":"### Clearly the data is non-linear.","798be51a":"# LABEL ENCODING","85b415a7":"### According to the plots, the optimum degree is 2. Let's check."}}