{"cell_type":{"c2f9dbe2":"code","f23db19d":"code","bcf013c5":"code","39aad093":"code","de83321b":"code","60749b0f":"code","75039d19":"code","a7081a5b":"code","820ffcb2":"code","3c76ddfc":"code","7357c202":"code","45ada0f4":"code","a08ce111":"code","a16bfa8b":"code","c490829e":"code","fad5a0e7":"code","70e2e880":"code","09f80d51":"code","d76f508a":"code","64774b0e":"code","625f961d":"code","8e7daae2":"code","85fefdaa":"code","36b87ab5":"code","de7af6d5":"code","a692118b":"code","c498c423":"code","99885040":"code","6e203eae":"markdown","cc08924d":"markdown","0df04840":"markdown","58e43370":"markdown","00dab77f":"markdown","44f3baae":"markdown","65b9e6c7":"markdown","967d3a9b":"markdown","b78317a3":"markdown","389a16fe":"markdown","8f869e52":"markdown"},"source":{"c2f9dbe2":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom warnings import simplefilter\nsimplefilter(action='ignore', category=FutureWarning)","f23db19d":"anime = pd.read_csv('..\/input\/anime-recommendations-database\/anime.csv')\nrating = pd.read_csv('..\/input\/anime-recommendations-database\/rating.csv')","bcf013c5":"print('anime.csv (shape):',anime.shape)\nprint('rating.csv (shape):',rating.shape)","39aad093":"anime.head()","de83321b":"rating.head()","60749b0f":"# checking for null values\n\nanime.isnull().sum()","75039d19":"# filling all anime without rating with 0\n\nanime.fillna({'rating':0},inplace=True)","a7081a5b":"anime_rating_count = rating.groupby(by='anime_id').count()['rating'].reset_index().rename(columns={'rating':'rating_count'})\nanime_rating_count['rating_count'].describe()","820ffcb2":"filtered_anime = anime_rating_count[anime_rating_count['rating_count']>250]","3c76ddfc":"# anime with over 250 rating count\n\nfiltered_anime.head()","7357c202":"user_rating_count = rating.groupby(by='user_id').count()['rating'].reset_index().rename(columns={'rating':'rating_count'})\nuser_rating_count['rating_count'].describe()","45ada0f4":"# users who gave over 100 ratings to different anime\n\nfiltered_user = user_rating_count[user_rating_count['rating_count']>100]","a08ce111":"filtered_user.head()","a16bfa8b":"filtered_rating_anime = rating[rating['anime_id'].isin(filtered_anime['anime_id'])]\nfiltered_rating = filtered_rating_anime[filtered_rating_anime['user_id'].isin(filtered_user['user_id'])]","c490829e":"# this dataset now contains popular anime and users wth high rating counts\n\nfiltered_rating.head()","fad5a0e7":"# we can see that most of the values are zero since most of the users does not have ratings for every anime\n\nrating_matrix = filtered_rating.pivot_table(index='anime_id',columns='user_id',values='rating').fillna(0)\nprint(rating_matrix.shape)\nrating_matrix.head()","70e2e880":"from scipy.sparse import csr_matrix\ncsr_rating_matrix =  csr_matrix(rating_matrix.values)","09f80d51":"print(csr_rating_matrix)","d76f508a":"from sklearn.neighbors import NearestNeighbors\n\nrecommender = NearestNeighbors(metric='cosine')\n# fit the csr matrix to the algorithm\nrecommender.fit(csr_rating_matrix)","64774b0e":"# getting the anime_id of the user's anime\n\nuser_anime = anime[anime['name']=='Bleach']\nuser_anime","625f961d":"user_anime_index = np.where(rating_matrix.index==int(user_anime['anime_id']))[0][0]\n\n# this index is from rating matrix not from the anime dataset\nuser_anime_index","8e7daae2":"# getting the ratings based on the index\n\nuser_anime_ratings = rating_matrix.iloc[user_anime_index]\nuser_anime_ratings","85fefdaa":"# we need to convert this into 2d array (with only 1 row) since the algorithm does not accept 1d array\n\nuser_anime_ratings_reshaped = user_anime_ratings.values.reshape(1,-1)\nuser_anime_ratings_reshaped","36b87ab5":"# the ratings will be plotted and will return 11 indices and distances of nearest neighbors\n# note that these indices are based on the indices of rating matrix\n\ndistances, indices = recommender.kneighbors(user_anime_ratings_reshaped,n_neighbors=11)","de7af6d5":"# indices of nearest neighbors (based on rating matrix)\n\nindices","a692118b":"# distances of nearest neighbors to the user's anime\n\ndistances","c498c423":"# the returned indices will be used to get anime id(index) on rating matrix\n# these indices are the nearest neighbors\n# we are excluding the first element since the first nearest neighbor is itself\n\nnearest_neighbors_indices = rating_matrix.iloc[indices[0]].index[1:]","99885040":"nearest_neighbors = pd.DataFrame({'anime_id': nearest_neighbors_indices})\npd.merge(nearest_neighbors,anime,on='anime_id',how='left')","6e203eae":"# Collaborative Filtering using Nearest Neighbors\n\n<br>\n\n```\n* In this recommendation system, we will be utilizing the collaborative filtering technique.\n* By using this technique, the system will recommend anime based on the nearest rating between the ratings of \n  user's anime and the ratings of other anime.\n* For example, I watched 10 anime and gave each of them a rating. Now, my friend watched an anime from my \n  anime list and now asks me to recommend three anime. With that, I will recommend three anime with closest \n  rating to the rating I gave for the anime that my friend watched.\n```\n\n### Process\n\n<br>\n\n```\n* Remove anime with low count of ratings and users who gave low count of ratings\n* Construct Rating Matrix\n* Convert rating matrix to csr matrix to save memory\n* Fit the csr rating matrix into nearest neighbor\n* Retrieve ten nearest neighbor\n* Output ten recommended anime\n```\n","cc08924d":"Exploratory data analysis is on the other notebook. (Anime Recommendation using Pearson r correlation.)","0df04840":"###  Output ten recommended anime","58e43370":"### Fit the matrix into nearest neighbor\n\n* We are using unsupervised algorithm nearest neighbor.\n* This algorithm will find k nearest data point which will be the recommended anime to watch.\n* We will also use cosine similarity as the metric for the algorithm.","00dab77f":"### Retrieve ten nearest neighbors","44f3baae":"### Convert rating matrix to csr matrix to save memory","65b9e6c7":"### Construct Rating Matrix\n\n* We will construct a matrix by using pivot table wherein anime id will be indexes and user id in columns","967d3a9b":"### anime.csv\n\n* anime_id - myanimelist.net's unique id identifying an anime.\n* name - full name of anime.\n* genre - comma separated list of genres for this anime.\n* type - movie, TV, OVA, etc.\n* episodes - how many episodes in this show. (1 if movie).\n* rating - average rating out of 10 for this anime.\n* members - number of community members that are in this anime's \"group\".\n\n### rating.csv\n\n* user_id - non identifiable randomly generated user id.\n* anime_id - the anime that this user has rated.\n* rating - rating out of 10 this user has assigned (-1 if the user watched it but didn't assign a rating).","b78317a3":"### Remove anime with low count of ratings and users who gave low count of ratings\n\n* We will only consider popular anime (rating count over 250) and users who gave lots of rating on different anime (>100)","389a16fe":"# Anime Recommendation System using Nearest Neighbors","8f869e52":"# Load the datasets\n\n* 2 different datasets will be loaded in to dataframes \n* Dataset can be downloaded in https:\/\/www.kaggle.com\/CooperUnion\/anime-recommendations-database"}}