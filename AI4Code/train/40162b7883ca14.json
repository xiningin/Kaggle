{"cell_type":{"b689f8e4":"code","9fbb3b61":"code","cabbdbfc":"code","418dbd5c":"code","c9864223":"code","69939f3b":"code","5ab38ef7":"code","b6ba78f6":"code","1a0424ce":"code","dcfd9c01":"code","b4930fb8":"code","1d323154":"code","dbe5a074":"code","155e1e38":"code","d2134f89":"code","bacdccb4":"code","ef241b8e":"markdown","f991f368":"markdown","16f7aa82":"markdown","ad584e13":"markdown","2f4ba8f0":"markdown","4fbf6523":"markdown","3b512ffa":"markdown","f1dcc12e":"markdown"},"source":{"b689f8e4":"%config Completer.use_jedi = False\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport json\nimport sklearn\n\ntrain_path = '..\/input\/stumbleupon\/train.tsv'\nimport warnings\nwarnings.filterwarnings(\"ignore\")","9fbb3b61":"data=pd.read_csv(train_path,sep='\\t')\nnew_data = data[['url','boilerplate','label']]","cabbdbfc":"def processing(text):\n    text = json.loads(text)\n    return text\n\ndef title_fn(dic):\n    text = dic.get('title')\n    if text != None:\n        return text\n    else:\n        return \"unknown_title\"\n        \ndef body_fn(dic):\n    text = dic.get('body')\n    if text != None:\n        return text\n    else:\n        return \"unknown_body\"\n    \ndef url_fn(dic):\n    text = dic.get('url', 'unknown_url')\n    if text != None:\n        return text\n    else:\n        return \"unknown_url\"\n    ","418dbd5c":"def transform_data(new_data):\n    new_data.boilerplate = new_data.boilerplate.apply(lambda text: processing(text))\n    new_data['title'] = new_data.boilerplate.apply(title_fn)\n    new_data['Body'] = new_data.boilerplate.apply(body_fn)\n    new_data['b_url'] = new_data.boilerplate.apply(url_fn)\n    \n    return new_data\n\nnew_data = transform_data(data)\nnew_data['full'] = new_data['title'] + new_data['Body'] + new_data['b_url']","c9864223":"pip install contractions","69939f3b":"import re\nimport contractions\nimport unicodedata\nfrom bs4 import BeautifulSoup\nimport string\nfrom nltk.stem import PorterStemmer\nfrom nltk.stem import WordNetLemmatizer\n \nfrom nltk.tokenize import word_tokenize\nfrom nltk.corpus import stopwords\nstopword = stopwords.words('english')\n  \nps = PorterStemmer()\nlemmatizer = WordNetLemmatizer()\n\n\ndef text_preprocess(text):\n    \n    try:\n        contractions.fix(text)\n    except:\n        text = text\n    else:\n        text = contractions.fix(text)\n    finally:\n        text = unicodedata.normalize('NFKD', text).encode('ascii', 'ignore').decode('utf-8', 'ignore')## Removing\/normalising accented characters.\n        text = re.sub(r' @[^\\s]*',\"\",text)#Remove @elements\n        #text = re.sub(r'RT[^A-Za-z]+',\"\",text)#Remove RT RETWEET tag\n        text = re.sub(r'(([A-Za-z0-9._-]+)@([A-Za-z0-9._-]+)(\\.)([A-Za-z]{2,8}))',\"\",text) #email\n        text = re.sub(r'([A-Za-z0-9]+)(\\*)+([A-Za-z0-9]+)','starword',text)# replacing ***words with \"star_word\"\n        text = re.sub(r'((https|http|ftp)?:\\\/\\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\\/\\\/(?:www\\.|(?!www))[a-zA-Z0-9]+\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]+\\.[^\\s]{2,})',\" \",text) #urls\n        text = BeautifulSoup(text, 'lxml').get_text(\" \")#tag removal\n        text = text.lower() #Lowering the characters\n        #text = re.sub(['!\"#$%&\\'()*+,-.\/:;<=>?@[\\\\]^_`{|}~'],'',text)\n        text =  re.sub(r'[^\\w\\s]', '', text)\n        text =  re.sub(r'[0-9]', '', text)\n        tokens = word_tokenize(text)\n        #text = [ps.stem(i) for i in tokens if i not in stopword]\n        text = [lemmatizer.lemmatize(i) for i in tokens if i not in stopword]\n        text = \" \".join(text)\n        \n    return text","5ab38ef7":"new_data['full'] = new_data['full'].apply(lambda x: text_preprocess(x))","b6ba78f6":"from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\ncv2 = CountVectorizer( min_df=2)\n\n#transformed_data = cv2.fit_transform(new_data.full)\n\ncv_tf = TfidfVectorizer()\ntransformed_data = cv_tf.fit_transform(new_data.full)\nX = transformed_data\ny = new_data.label.values","1a0424ce":"import numpy as np\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn import metrics\nfrom sklearn.base import clone","dcfd9c01":"from sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.metrics import make_scorer, roc_auc_score\nscore = make_scorer(roc_auc_score, greater_is_better=True)\nparameter_grid = {\n    'solver': ['saga'],\n    'penalty' : ['l1', 'l2', 'elasticnet', 'none'],\n    'C' : np.logspace(-4, 4, 10),\n    'max_iter': [100,500,1000,2000]\n}\n\nlog_clf = LogisticRegression(random_state=0)\nclf = RandomizedSearchCV(log_clf, parameter_grid,cv = 5,n_iter = 30,verbose = 2, n_jobs = -1, scoring = score)\nhistory = clf.fit(X,y)","b4930fb8":"optimised_logistic = clf.best_estimator_.fit(X,y)","1d323154":"test_data = pd.read_csv('..\/input\/stumbleupon\/test.tsv', sep ='\\t')","dbe5a074":"test_data = transform_data(test_data)\ntest_data['full'] = test_data['title'] + test_data['Body'] + test_data['b_url']\ntest_data = test_data[['urlid','full']]","155e1e38":"test_data['full'] = test_data['full'].apply(lambda x: text_preprocess(x))\ntest_transformed_data = cv_tf.transform(test_data.full)","d2134f89":"pred = pd.DataFrame(optimised_logistic.predict(test_transformed_data), columns=['label'])\nsubmission_dataframe = pd.concat([test_data,pred],axis=1).drop(['full'], axis=1)","bacdccb4":"submission_dataframe.to_csv('submission1_file.csv',index = False)","ef241b8e":"## Loading Data","f991f368":"## Simple Logistic\nskf = StratifiedKFold(n_splits=5, shuffle=True)\nlog = LogisticRegression(random_state=0, solver = 'liblinear')\n\nfor fold_no, (train_index, val_index) in enumerate(skf.split(X, y)):\n    #print(\"TRAIN:\", train_index, \"VAL:\", val_index)\n    X_train, X_val = X[train_index], X[val_index]\n    y_train, y_val = y[train_index], y[val_index]\n    \n    clf = clone(log)\n    clf.fit(X_train, y_train)\n    pred = clf.predict(X_val)\n    fpr, tpr, thresholds = metrics.roc_curve(y_val, pred, pos_label=1)\n    auc = metrics.auc(fpr,tpr)\n    print(\"this is our fold no - {} and roc_auc_score is{} and auc is {}\".format(fold_no,roc_auc_score(y_val, pred), auc))","16f7aa82":"## Importing all necessary libraries","ad584e13":"## Conclusion\n1. Considering this is our initial approach without any hyperparameter optimisation, we achieved good ROC only with the help of simple logistic regression and count vectorizer.\n\n2. Basically cleaning the text did not workout.\n\n3. let's go for vectorizer change to tfidf vectorizer so after applying it i noticed that score improved from 75 to 81 and it was fast too that's great.\n\n## Creating submission file","2f4ba8f0":"## Preprocessing Methods","4fbf6523":"## Implementing StratifiedKfold validation and training logistic regression","3b512ffa":"## Implementing Count Vectorizer \/ TFidf vectorizer","f1dcc12e":"## Fetching and concatenating URL, Title, Body "}}