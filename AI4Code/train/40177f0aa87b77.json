{"cell_type":{"e7440bea":"code","b8bc0b65":"code","50236a0d":"code","87925ce3":"code","15b8641e":"code","cbfe8d7c":"code","50098441":"code","a9d9e7a4":"code","c4b4ec3b":"markdown","70078fe5":"markdown","479924e4":"markdown","6d8ca4b3":"markdown","44a3b398":"markdown","d652d7fa":"markdown"},"source":{"e7440bea":"from six.moves import cPickle as pickle\nimport bz2\n\ndef loadPickleBZ(pickle_file):\n    with bz2.BZ2File(pickle_file, 'r') as f:\n        loadedData = pickle.load(f)\n        return loadedData\n\ndef savePickleBZ(pickle_file, data):\n    with bz2.BZ2File(pickle_file, 'w') as f:\n        pickle.dump(data, f, pickle.HIGHEST_PROTOCOL)\n    return","b8bc0b65":"import time\nimport scipy.sparse as sparse\nimport numpy as np\nimport pandas as pd\nimport os\n\nfrom concurrent.futures import ThreadPoolExecutor\nexecutor = ThreadPoolExecutor(max_workers=4)\n\ndata_path = \"..\/input\/\"\n\nprint(os.listdir(data_path))\n\ndef loadData(fname):\n    data = pd.read_csv(data_path+fname)\n    names = data.columns.get_values()\n    ids = data.values[:, 0]\n    target = data.values[:, 1:2]\n    values = data.values[:, 2:]\n    return (names, ids, np.array(target, dtype=np.double), np.array(values, dtype=np.double))\n\nloadtime = [-time.time()]\n(names, ids, target, values) = loadData('santander-value-prediction-challenge\/train.csv')\nloadtime[0] += time.time()\n\ntarget = target.reshape((-1,))\n\nprint('Loading Train done.', loadtime)","50236a0d":"import numpy as np\nimport scipy as sp\nimport scipy.sparse as sparse\nimport lightgbm as lgb\nfrom sklearn.model_selection import KFold\nfrom time import time\nimport scipy.misc","87925ce3":"try:\n    before = loadPickleBZ(data_path+'one-more-approach-to-sort-columns-and-rows\/before.pbz')\n    beforeM = before - np.transpose(before)\n    print('before matrix loaded')\nexcept:\n    before = np.zeros((values.shape[1], values.shape[1]), dtype=np.int32)\n    print('before matrix NOT loaded!')\n\nsets = [[set()] for i in range(values.shape[0])]\n# try:\n#     sets = loadPickleBZ(data_path+'one-more-approach-to-sort-columns-and-rows\/sets.pbz')\n#     print('row sets loaded!')\n# except:\n#     print('row sets NOT loaded!')","15b8641e":"## update before matrix\ndef setBefore(bef, aft):\n    for b in bef:\n        before[b, aft] += 1\n    return\n\ndef valrow(n):\n    return values[n]\n\n_vset = []\n## value set for row n\ndef vset(n):\n    while len(_vset) <= n:\n        _vset.append( None )\n\n    if _vset[n] is None:\n        vs = set(valrow(n))\n        vs.remove(0)\n        _vset[n] = vs\n\n    return _vset[n]\n\n## column indices from set S in row k\ndef indices(S, k):\n    vals = valrow(k)\n    idx = []\n    for num in S:\n        idx.extend(list(np.where(vals == num)[0]))\n    return idx\n\nused = np.zeros(values.shape[0], np.bool)\n\n\nfor i in range(values.shape[0]):\n    ## remove early exit for better sorting matrix\n#     if i > 100:\n#         break\n    if i % 10 == 1:\n        print(i, end=' ')\n#     else:\n        continue\n\n    if sets[i] is not None:\n        sets[i][0] = sets[i][0] | {i}\n        \n    for j in range(values.shape[0]):\n        if i == j:\n            continue\n            \n        A = vset(i)\n        B = vset(j)\n\n        I = A & B\n\n        ## calculate column order if rows share 50% of values\n        if (len(I) > (len(A) + len(B))\/2*0.5):\n            \n            ## add to sets if rows share 60% of values\n            if (len(I) > (len(A) + len(B))\/2*0.60):\n                if sets[i] is not None:\n                    sets[i][0] = sets[i][0] | {j}\n                    sets[j] = None\n\n            B = B - I\n            A = A - I\n\n            m = 0\n            if target[i] in I:\n                m += 1\n            if target[j] in I:\n                m += 2\n            if target[i] in B:\n                m += 4\n            if target[j] in A:\n                m += 8\n\n            U = indices(A, i)\n            V = indices(I, i)\n            nbef = 0\n            ntotal = 1e-30\n            for u in U:\n                for v in V:\n                    ntotal += 1\n                    if before[u, v] - before[v, u]>0:\n                        nbef += 1\n            befA = nbef\/ntotal\n\n            U = indices(B, j)\n            V = indices(I, j)\n            nbef = 0\n            ntotal = 1e-30\n            for u in U:\n                for v in V:\n                    ntotal += 1\n                    if before[u, v] - before[v, u]>0:\n                        nbef += 1\n            befB = nbef\/ntotal\n\n#             print(i, j, '-', [m], '-', '0<1' if befA < befB else '1>0', target[i], target[j], '-', A, B)\n\n            if m == 9 or m == 8:\n#                 print('i in I, j in A')\n\n                bef = indices(A, i)\n                aft = indices(I, i)\n                setBefore(bef, aft)\n\n                bef = indices(I, j)\n                aft = indices(B, j)\n                setBefore(bef, aft)\n\n            if m == 6 or m == 4:\n#                 print('j in I, i in B')\n\n                bef = indices(B, j)\n                aft = indices(I, j)\n                setBefore(bef, aft)\n\n                bef = indices(I, i)\n                aft = indices(A, i)\n                setBefore(bef, aft)\n                \nprint('Rows compare done')","cbfe8d7c":"import matplotlib.pyplot as plt\n%matplotlib inline\n\nsavePickleBZ('before.pbz', before)\nsavePickleBZ('sets.pbz', sets)\n\ndef showBefore(before):\n    before = np.array(before, dtype=np.float)\n    before = before \/ (before + np.transpose(np.copy(before)) + 1e-30)\n    before *= 255\n    before = np.array(before, dtype=np.uint8)\n    plt.figure(figsize=(16, 16))\n    plt.imshow(before)\n    \nshowBefore(before)","50098441":"# show uncertain comparisions\nbeforeM = before - np.transpose(before)\nbef_unc = (np.abs(beforeM) \/ (before + np.transpose(before) + 1e-30) < 0.3) * (beforeM != 0)\nshowBefore(bef_unc)","a9d9e7a4":"from functools import cmp_to_key\n\nbeforeM = before - np.transpose(before)\n\n## Find out which set stands before another\ndef compareSets(A, B, i, j):\n    I = A & B\n\n    B = B - I\n    A = A - I\n\n    befA = 0\n    befB = 0\n\n    # if (target[i] in B) and (target[j] not in A):\n    #     befB = 1\n    # if (target[i] not in B) and (target[j] in A):\n    #     befA = 1\n\n    if befA == befB:\n        U = indices(A, i)\n        V = indices(I, i)\n        nbef = 0\n        ntotal = 1e-30\n        for u in U:\n            ntotal += len(V)\n            nbef += (beforeM[u, V] > 0).sum()\n        befA = nbef \/ ntotal\n\n        U = indices(B, j)\n        V = indices(I, j)\n        nbef = 0\n        ntotal = 1e-30\n        for u in U:\n            ntotal += len(V)\n            nbef += (beforeM[u, V] > 0).sum()\n        befB = nbef \/ ntotal\n\n\n    if befA == befB:\n        U = indices(I, i)\n\n        nbef = 0\n        ntotal = 1e-30\n        for z in A|I:\n            V = indices({z}, i)\n            for v in V:\n                ntotal += len(U)\n                nbef += (beforeM[U, v] > 0).sum()\n        befB = nbef \/ ntotal\n\n        U = indices(I, j)\n\n        nbef = 0\n        ntotal = 1e-30\n        for z in B|I:\n            V = indices({z}, j)\n            for v in V:\n                ntotal += len(U)\n                nbef += (beforeM[U, v] > 0).sum()\n        befA = nbef \/ ntotal\n\n    return A, B, I, befA, befB\n\nif True:\n    targetFound = [0,0,1e-30]\n    sum_sle = [0,0]\n    orders = []\n\n    for st in sets:\n        if st is None:\n            continue\n        order = list(st[0])\n        orders.append(order)\n\n    for ordI, order in enumerate(orders):\n        if ordI > 400:\n            break\n        if len(order)<=1:\n            continue\n        print('\\n-----------------\\nloop: ', ordI, '\/', len(orders), len(order), 'found', targetFound[0] \/ targetFound[2], targetFound[1] \/ targetFound[2])\n\n        def sortOrder():\n            print('sorting... ', len(order), end=' ')\n\n            comparisions = [0]\n            def rowCompare(i, j):\n                comparisions[0] += 1\n                if comparisions[0] % 500 == 0:\n                    print('cmps =', comparisions[0], end=' ')\n                    \n                A = vset(i)\n                B = vset(j)\n                A, B, I, befA, befB  = compareSets(A, B, i, j)\n                return befA - befB\n            \n            if len(order) > 50:\n                order.sort(key = cmp_to_key(rowCompare))            \n            else:\n                ## Bubble sort is not a best choise here...\n                for oi in range(len(order)):\n                    print(oi, end=' ')\n                    for oj in range(oi+1, len(order)):\n\n                        i = order[oi]\n                        j = order[oj]\n\n                        A = vset(i)\n                        B = vset(j)\n\n                        A, B, I, befA, befB  = compareSets(A, B, i, j)\n                        comparisions[0] += 1\n\n                        if befA > befB:\n                            order[oi] = j\n                            order[oj] = i\n\n                        if befA == befB and np.random.random()<0.5:\n                            order[oi] = j\n                            order[oj] = i\n                            \n            print('comparisions: ', comparisions[0])\n                            \n\n        sortOrder()\n        resort = False\n        for k in range(2):\n            if resort:\n                sortOrder()\n            resort = False\n            for oi in range(len(order)-1):\n                def ijAB(oi, oip1 = None):\n                    if oip1 is None:\n                        oip1 = oi+1\n                    i = order[oi]\n                    j = order[oip1]\n                    A = vset(i)\n                    B = vset(j)\n                    return i, j, A, B\n\n\n                i, j, A, B = ijAB(oi)\n                A, B, I, befA, befB = compareSets(A, B, i, j)\n\n                if befA < befB:\n                    targetFound[2] += 1\n                    if target[i] in I:\n                        targetFound[0] += 1\n                    if target[i] in B:\n                        targetFound[1] += 1\n                else:\n                    resort = True\n\n                def whre(k):\n                    c = 'X'\n                    if target[k] in A:\n                        c = 'A'\n                    if target[k] in B:\n                        c = 'B'\n                    if target[k] in I:\n                        c = 'I'\n                    return c\n\n#                 print(i, j, '-', '0=0' if befA == befB else '0<1' if befA < befB else '1>0', whre(i)+whre(j), '\\t', target[i], target[j]) ## '-', A, B, I\n\n            print('\\tfound target in I {} or B {} set'.format(targetFound[0] \/ targetFound[2], targetFound[1] \/ targetFound[2]))\n\n            if resort:\n                print('\\t------ Resort')\n                continue\n            else:\n                break\n    \n    print('Finished')\n","c4b4ec3b":"Lets test this matrix","70078fe5":"1. We take two rows `i` and `j` and find their unique non-zero values A* and B*\n2. Find intersection I = A* & B*\n3. If I is big enough `len I > (len A* + len B*)\/2*0.4` we continue\n4. `A = A* - I`, `B = B* - I`\n5. If `B` contains target of row `i` then for row `i` colmns containing values from A stand before columns containing values from I, and for row `j` columns containing values from I stand before columns containing values from B. We put these column comparisions to matrix (4991, 4991) like `before[u, v] += 1`\n6. Similarly for the case if `A` contains target of row `j`\n\nLater we can check if `before[u, v] - before[v, u]>0` then column u stands before column v and use these comparisions for topological sort.\nAlso using this matrix we can compare two rows about which one stands before the other and we will know that target for earlier row can be found in later row","479924e4":"Show and save column comparision matrix and save row sets","6d8ca4b3":"Loading data etc.","44a3b398":"`found target in I 0.30726256983240224 or B 0.6703910614525139 set` (may differ from last commit output)\n\nWe can see, that target value is found in I (common) set of values in 30% cases and in B set of values (unique values for later row) in 67% cases\nSo, rows and columns can be sorted with this approach","d652d7fa":"Find out matrix `before`"}}