{"cell_type":{"ddcda6bc":"code","96c56fb8":"code","72e6818f":"code","c0d385b6":"code","60ab0d8e":"code","4fb72c2a":"code","8c415e55":"code","e342f9ed":"code","8a916212":"code","88a6ec4a":"code","a0768cc3":"code","18df0346":"code","45a867f7":"code","10d5c4ff":"code","35a6b7fe":"code","2ab31c01":"code","45425a2d":"code","ed6e7601":"code","d4eac890":"code","d317c62e":"code","02e204aa":"code","52e2a825":"markdown","4c1b7d36":"markdown","0377e361":"markdown","bc16f0ee":"markdown","4adf52f4":"markdown","87d4cb20":"markdown","2bddf59a":"markdown"},"source":{"ddcda6bc":"%matplotlib inline\nfrom fastai.basics import *\nimport matplotlib.pyplot as plt\nimport numpy as np","96c56fb8":"n = 1000","72e6818f":"x = torch.ones(n,2)\nx[:,0].uniform_(-1,1)\nx[:5]","c0d385b6":"a  = tensor(3., 2.); a","60ab0d8e":"y = x@a + torch.randn(n)","4fb72c2a":"plt.scatter(x[:,0], y)","8c415e55":"def mse(y_hat, y): return ((y_hat - y)**2).mean()\ndef mae(y_hat, y): return abs(y_hat - y).mean()\n\nhistory = {'loss_mse': [], 'loss_mae': []}","e342f9ed":"a = tensor(-1., 1)","8a916212":"y_hat = x@a\nprint('Mean squared error: {:.4f}'.format(mse(y_hat, y)))\nprint('Mean absolute error: {:.4f}'.format(mae(y_hat, y)))","88a6ec4a":"plt.plot(x[:,0], y,'o')\nplt.plot(x[:,0], y_hat,'-')","a0768cc3":"a = nn.Parameter(a); a","18df0346":"def update():\n    y_hat = x@a\n    loss = mse(y, y_hat)\n    history['loss_mse'].append(loss)\n    if t % 10 == 0: print(loss)\n    loss.backward()\n    with torch.no_grad():\n        a.sub_(lr * a.grad)\n        a.grad.zero_()","45a867f7":"lr = 1e-1\nfor t in range(100): update()","10d5c4ff":"fig, axes = plt.subplots(1,2)\naxes[0].plot(x[:,0], y,'o')\naxes[0].plot(x[:,0], x@a,'-')\naxes[1].plot(history['loss_mse'])","35a6b7fe":"b = tensor(1.,-1)\nb = nn.Parameter(b);b","2ab31c01":"def update_abs():\n    y_hat = x@b\n    loss = mae(y, y_hat)\n    history['loss_mae'].append(loss)\n    if t % 10 == 0: print(loss)\n    loss.backward()\n    with torch.no_grad():\n        b.sub_(lr * b.grad)\n        b.grad.zero_()","45425a2d":"lr = 1e-1\nfor t in range(100): update_abs()","ed6e7601":"fig, axes = plt.subplots(1,2, figsize=(18.5, 10.5))\naxes[0].plot(x[:,0], y,'o')\naxes[0].plot(x[:,0], x@a,'-', label='squared loss', color='black')\naxes[0].plot(x[:,0], x@b,'-', label = 'absolute loss', color='red')\naxes[0].legend()\naxes[1].plot(history['loss_mse'], color='black')\naxes[1].plot(history['loss_mae'], color='red')","d4eac890":"from matplotlib import animation, rc\nrc('animation', html='jshtml')","d317c62e":"a = nn.Parameter(tensor(-1.,1))\n\nfig = plt.figure()\nplt.scatter(x[:,0],y,c='orange')\nline, = plt.plot(x[:,0], x@a)\nplt.close()\n\ndef animate(i):\n    update()\n    line.set_ydata(x@a)\n    return line,\n\nanimation.FuncAnimation(fig, animate, np.arange(0, 200), interval=20)","02e204aa":"b = nn.Parameter(tensor(-1.,1))\n\nfig = plt.figure()\nplt.scatter(x[:,0],y,c='orange')\nline, = plt.plot(x[:,0], x@b)\nplt.close()\n\ndef animate(i):\n    update()\n    update_abs()\n    line.set_ydata(x@b)\n    return line,\n\nanimation.FuncAnimation(fig, animate, np.arange(0, 200), interval=20)","52e2a825":"### Absolute loss","4c1b7d36":"### Linear Regression problem","0377e361":"## Gradient descent","bc16f0ee":"### Absolute loss","4adf52f4":"### Squared loss","87d4cb20":"### Squared loss","2bddf59a":"## Animations"}}