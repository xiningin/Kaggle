{"cell_type":{"98dcd05f":"code","b8c73962":"code","129c6f2e":"code","5aeda5b1":"code","fb6d4e40":"code","24844098":"code","107fe0d8":"code","448020ed":"code","3278d695":"code","3fecb9a8":"code","aa612a5a":"code","76b38242":"code","20e91894":"code","7c3e0b7a":"code","db38e1c5":"code","a6abc45f":"code","642d9403":"code","3cc21c79":"code","6f3eeef4":"code","23a436a3":"code","e786bca7":"markdown","915e14fd":"markdown","9dff539d":"markdown","b38778ec":"markdown","a706e5c9":"markdown","7e732f71":"markdown","6aaa94fe":"markdown","e1c8bf95":"markdown","e8906f08":"markdown","701a09d0":"markdown","a16411d1":"markdown","de7faa53":"markdown","8c1d70ec":"markdown","e5b5a5a6":"markdown","1d4ee4da":"markdown","9034750f":"markdown"},"source":{"98dcd05f":"import numpy as np\nimport matplotlib.pyplot as plt\nimport keras\nfrom keras.models import Sequential\nfrom keras.datasets import mnist\nfrom keras.layers import Dense\nfrom keras.optimizers import Adam\n#because of multiclass datasets\nfrom keras.utils.np_utils import to_categorical \nimport random","b8c73962":"np.random.seed(0)","129c6f2e":"#import 6000 images from mnist data set\n(X_train, y_train), (X_test, y_test) = mnist.load_data()","5aeda5b1":"print(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape[0])","fb6d4e40":"#look for the condition throw error otherwise\nassert(X_train.shape[0] == y_train.shape[0]), \"The number of images is not equal ..\"\nassert(X_test.shape[0] == y_test.shape[0]), \"The number of images is not equal ..\"\nassert(X_train.shape[1:] == (28, 28)), \"The dimension of the images are not 28x28\"\nassert(X_test.shape[1:] == (28, 28)), \"The dimension of the images are not 28x28\"","24844098":"num_of_samples = []\n\ncols = 5\nnum_of_classes = 10\n\nfig, axs = plt.subplots(nrows=num_of_classes, ncols=cols,\n                       figsize=(5, 10))\nfig.tight_layout()\nfor i in range(cols):\n  for j in range(num_of_classes):\n    x_selected = X_train[y_train == j]\n    axs[j][i].imshow(x_selected[random.randint(0, len(x_selected -1)),\n                                :, :],\n                    cmap=plt.get_cmap('gray'))\n    axs[j][i].axis(\"off\")\n    if i==2:\n      axs[j][i].set_title(str(j))\n      num_of_samples.append(len(x_selected))","107fe0d8":"print(num_of_samples)\nplt.figure(figsize=(12, 4))\nplt.bar(range(0, num_of_classes), num_of_samples)\nplt.title(\"Distribution of the training dataset\")\nplt.xlabel(\"Class Number\")\nplt.ylabel(\"Number of images\")","448020ed":"y_train = to_categorical(y_train, 10)\ny_test = to_categorical(y_test, 10) ","3278d695":"#Each image has Intensity from 0 to 255\nX_train = X_train\/255 \nX_test = X_test\/255","3fecb9a8":"#we must change the shape of the images to 1d array(28*28)\n#for multipication 1*784\nnum_pixels = 784\nX_train = X_train.reshape(X_train.shape[0],\n                         num_pixels)\nX_test = X_test.reshape(X_test.shape[0],\n                         num_pixels)\nprint(X_train.shape)","aa612a5a":"def create_model():\n  model = Sequential()\n  model.add(Dense(10, input_dim = num_pixels,\n                  activation = 'relu'))\n  model.add(Dense(30, activation='relu'))\n  model.add(Dense(10, activation='relu'))\n  model.add(Dense(num_of_classes, activation='softmax'))\n  model.compile(Adam(lr=0.01),\n                loss='categorical_crossentropy',\n               metrics=['accuracy'])\n  return model           ","76b38242":"model = create_model()\nprint(model.summary())","20e91894":"history = model.fit(X_train, y_train, validation_split=0.1,\n         epochs=10, batch_size=200, verbose=1, shuffle=1)","7c3e0b7a":"plt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.legend(['loss', 'val_loss'])\nplt.title('Loss')\nplt.xlabel('epoch')","db38e1c5":"plt.plot(history.history['acc'])\nplt.plot(history.history['val_acc'])\nplt.legend(['acc', 'val_acc'])\nplt.title('Accuracy')\nplt.xlabel('epoch')","a6abc45f":"score = model.evaluate(X_test, y_test, verbose=0)\nprint(type(score))\nprint('Test Score:', score[0])\nprint('Test Accuracy:', score[1])","642d9403":"import requests\nfrom PIL import Image\n\nurl = 'https:\/\/www.researchgate.net\/profile\/Jose_Sempere\/publication\/221258631\/figure\/fig1\/AS:305526891139075@1449854695342\/Handwritten-digit-2.png'\nresponse = requests.get(url, stream = True)\nimg = Image.open(response.raw)\nplt.imshow(img)","3cc21c79":"import cv2\n\nimg_array = np.asarray(img)\nresized = cv2.resize(img_array, (28, 28 ))\ngray_scale = cv2.cvtColor(resized, cv2.COLOR_BGR2GRAY) #(28, 28)\nimage = cv2.bitwise_not(gray_scale)\n\nplt.imshow(image, cmap=plt.get_cmap('gray'))\nprint(image)","6f3eeef4":"image = image \/ 255\nimage = image.reshape(1, 784)","23a436a3":"prediction = model.predict_classes(image)\nprint(\"predicted digit:\", str(prediction))","e786bca7":"We can see each of the digits has how much images from code below.","915e14fd":"Now we will create our **model**. Activation function will be Relu rather than sigmoid since relu gives better performance results.","9dff539d":"Okey now we train our model. Let\u2019s test our model .First we will get an image from url. You can test whatever image you want.","b38778ec":"We will import our training image data 2 different tuples 1 for training images and 1 for test images.\n\nLets see how much images does our training data has;","a706e5c9":"Now we will resize this image and greyscale it. Then we will transform this image to our** specific input format(1*784).**","7e732f71":"We will see that our first print statement has a result like (60000, 28, 28). 1st parameter in the tuple shows us how much image we have 2nd and 3rd parameters are the pixel values from x to y (28x28). These are important! Because when we try to train our model, the image must be 28x28 format which means we must not have depth of the image(greyscale image). If we have a rgb image we must reshape it to the **greyscale format.**\n\nSo we will implement assert statement for** validating the input.**","6aaa94fe":"Then we apply **to_categorical()** function since we have multiclass results(0\u20139: 10 output)","e1c8bf95":"I will try to explain how to train a model with  **MNIST dataset** ","e8906f08":"We can see our layers with how much parameter has the layer. Now we can train and see the results.","701a09d0":"Before we see our images in our data set, we must not forget each digit in the dataset has lots of handwritten images. So we will show 5 random pictures of each digit.","a16411d1":"We will keep our training model in history so we can plot and see some visual content. Let\u2019s see them.","de7faa53":"We can see how easy to implement neural network with Python.\n\n**References**\n\n* 1. MNIST explanation from [vikipedia](http:\/\/en.wikipedia.org\/wiki\/MNIST_database)\n* 1. All the concepts I won\u2019t cover you can find useful page [here](http:\/\/www.analyticsvidhya.com\/blog\/2017\/05\/25-must-know-terms-concepts-for-beginners-in-deep-learning\/)\n\n\n\n","8c1d70ec":"**Keras library** is a deep learning library which we must use when we will train our model. Dense is a linear operation in which every input is connected to every output by a weight. Adam is an optimizer which we will use in our layer\u2019s section.","e5b5a5a6":"Because of the matrix multipication we must change the shape of the array. (AxB * BxC = AxC) So we will shape the 28x28 array to 1x784.","1d4ee4da":"You will see the number represention of the array 0 to 255 and our image with greyscale format. Now we will resize it and feed the input.","9034750f":"We can see accuracy as well."}}