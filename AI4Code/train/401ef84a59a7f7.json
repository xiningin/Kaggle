{"cell_type":{"1562cb43":"code","1ffa24a1":"code","c22a4461":"code","39aae167":"code","accad8fc":"code","5473dca0":"code","e42f19f3":"code","d5301e12":"code","1227d361":"code","df69d051":"code","0a904a42":"code","cd95ed2b":"code","3ade9457":"code","5b2b1a37":"code","5a84939d":"code","aced553f":"code","e3b39e41":"code","630d2565":"code","434193f7":"code","c8e29a90":"code","f60da868":"code","6f6d1ceb":"code","2ccabe22":"code","0562ed9f":"code","77fd4d3f":"code","b963a961":"code","c52edab2":"code","3a36d36f":"code","d53a6f24":"markdown","a8f71fb8":"markdown","2ec64fc2":"markdown","acc7e260":"markdown","24113816":"markdown","ea276b1a":"markdown","d7d08604":"markdown","17f73be7":"markdown","cb06bf45":"markdown","b0acad25":"markdown"},"source":{"1562cb43":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.feature_extraction.text import TfidfVectorizer    \nfrom nltk.tokenize import RegexpTokenizer\nfrom sklearn import preprocessing\nfrom scipy.sparse import hstack\nimport pandas_profiling","1ffa24a1":"df = pd.read_csv('..\/input\/movies-on-netflix-prime-video-hulu-and-disney\/MoviesOnStreamingPlatforms_updated.csv')\ndf.head()","c22a4461":"df = df.drop(['Unnamed: 0'], axis=1)","39aae167":"df.info()","accad8fc":"df.Type.unique()","5473dca0":"df.ID","e42f19f3":"df.ID.count()","d5301e12":"# Percentage of existing data \nmiss = pd.DataFrame(df.isnull().sum())\n\nmiss = miss.rename(columns={0: \"miss_count\"})\nmiss['miss_%'] = miss.miss_count\/len(df.ID)*100\nmiss['miss_%'] = miss['miss_%'].round(2)\nmiss\n\n# No column has more than 50% missing values => Drop NA from columns has less than 50% missing values","1227d361":"df.dropna(subset=['Age', 'IMDb','Rotten Tomatoes','Directors','Genres', 'Country', 'Language', 'Runtime'], inplace=True)\ndf.reset_index(drop=True, inplace=True)\ndf.Year = df.Year.astype(\"object\")\ndf.info()","df69d051":"df['IMDb'] = df['IMDb'].str[0:3:2] #slice of s from i to j with step k\ndf['Rotten Tomatoes'] = df['Rotten Tomatoes'].str[:2]\ndf","0a904a42":"df.IMDb = df.IMDb.astype(\"int64\")\ndf['Rotten Tomatoes'] = df['Rotten Tomatoes'].astype('int64')\ndf.info()","cd95ed2b":"# Distribution of Year\nplt.figure(figsize=(20,5))\nsns.distplot(df['Year'])\nplt.show()","3ade9457":"# Distribution of IMDb\nplt.figure(figsize=(20,5))\nsns.distplot(df['IMDb'])\nplt.show()","5b2b1a37":"# Distribution of runtime\nplt.figure(figsize=(20,5))\nsns.distplot(df['Runtime'])\nplt.show()","5a84939d":"platform = ['Prime Video','Netflix', 'Hulu', 'Disney+']\nfor i in platform:    \n    print('Platform {} Count: {}'. format(i, df[i].sum()))","aced553f":"platform_count = [df[i].sum() for i in platform]\nplatform_count","e3b39e41":"# Movies on each platform\nexplode = (0.1, 0.1, 0.1, 0.1)\n\n#plotting\nfig1, ax1 = plt.subplots()\nax1.pie(platform_count,\n       labels = platform,\n       autopct = '%1.1f%%',\n       explode = explode,\n       shadow = True,\n       startangle = 100,\n       )\n\nax1.axis = ('equal')\nplt.show()","630d2565":"g = df['Genres'].str.split(',').apply(pd.Series, 1).stack()\ng.index = g.index.droplevel(-1)\n# Assign name to column\ng.name = 'Genres'\n# delete column\ndel df['Genres']\n# join new column with the existing dataframe\ndf_genres = df.join(g)\n","434193f7":"plt.figure(figsize=(15,5))\nsns.countplot(x='Genres', data=df_genres)\nplt.xticks(rotation=90)\nplt.show()","c8e29a90":"c = df['Country'].str.split(',').apply(pd.Series, 1).stack()\nc.index = c.index.droplevel(-1)\nc.name = 'Country'\ndel df['Country']\ndf_country = df.join(c)","f60da868":"# plotting top 10 country and movie count\ndf_country['Country'].value_counts()[:10].plot(kind = 'bar',figsize = (15,5))","6f6d1ceb":"l = df['Language'].str.split(',').apply(pd.Series, 1).stack()\nl.index = l.index.droplevel(-1)\nl.name = 'Language'\ndel df['Language']\ndf_language = df.join(l)\ndf_language","2ccabe22":"df_language['Language'].value_counts()[:10].plot(kind='bar',figsize=(15,5))\nplt.show()","0562ed9f":"df.columns","77fd4d3f":"# melting platform columns to create visualization\ndf2 = pd.melt(df, id_vars=[\"ID\",\"Title\",\"Year\",\"IMDb\",\"Type\",\"Runtime\"], var_name=\"platform\")\ndf2 = df2[df2.value==1]\ndf2.drop(columns=[\"value\"],axis=1,inplace=True)","b963a961":"g = sns.FacetGrid(df2, col=\"platform\")\ng.map_dataframe(sns.histplot, x=\"IMDb\")\nplt.show()","c52edab2":"# melting platform columns to create visualization\ndf3 = pd.melt(df, id_vars=[\"ID\",\"Title\",\"Year\",\"Age\",\"IMDb\",\"Rotten Tomatoes\",\"Type\",\"Runtime\"], var_name=\"platform\")\ndf3 = df3[df3.value==1]\ndf3.drop(columns=[\"value\"],axis=1,inplace=True)\ndf3","3a36d36f":"# Total of runtime in different platform\nhue_order = ['7+', '13+', '16+', '18+', 'all']\nax = sns.barplot(x=\"platform\", y=\"Runtime\",hue=\"Age\", hue_order = hue_order, estimator=sum, data=df3)","d53a6f24":"# Distribution of Movies on Each Streaming Platform","a8f71fb8":"# Runtime Per Platform Along with Age Group","2ec64fc2":"# Distribution Plots","acc7e260":"# Movie Genre Distribution","24113816":"# Movie Distribution According To Country","ea276b1a":"split(), apply(), and stack() functions. split() function splits the multiple values with a comma and creates a list. apply(pd.Series,1) to create multiple columns for each genre and stack() function stack them into a single column.\n\nYou can show the top 10 genres with their movie count using value_counts() function and use plot() function of the pandas library.","d7d08604":"# Missing Values\n1. Drop columns which has more than 50% missing values\n2. Drop NA from columns has less than 50% missing values\n3. Reset index\n4. Convert year column into object\n5. convert IMDb, Rotten Tomatoes into percentage","17f73be7":"# Tasks\n1. Understanding the Dataset\n2. Working with Missing Values\n3. Distribution Plots\n4. Distribution of Movies on Each Streaming Platform\n5. Movie Distribution According To Genre\n6. Movie Distribution According To Country\n7. Movie Distribution According To language\n8. IMDB Distribution According On Each Platform\n9. Runtime Per Platform Along with Age Group\n10. Building a Recommender System\n11. Conclusion\n\n* Reference: https:\/\/www.datacamp.com\/community\/tutorials\/streaming-platform-analysis?utm_medium=social&utm_source=linkedin&utm_campaign=streaming-platform-analysis","cb06bf45":"# Movie Distribution According To language","b0acad25":"# MDB rating Distribution According On Each Platform"}}