{"cell_type":{"a5c925cc":"code","97880929":"code","5db71e13":"code","20eb741c":"code","25bebb19":"code","f0ace494":"code","bffe4c15":"code","619dc03c":"code","683c1454":"code","759226a0":"code","468c0a62":"code","b5a0b7db":"code","6691a0a3":"code","b5d36571":"code","4b54f71b":"code","de99f857":"code","f8b18001":"code","08a61248":"code","90b627c9":"code","b3fdac84":"code","67f60bbe":"code","2e16dcd2":"code","26353562":"code","4d166ad5":"code","6cc9c54a":"code","c2290e8c":"code","a64940c1":"code","b8ccc595":"code","fb55e101":"code","313ffa39":"code","23696c61":"code","499ea608":"code","88c3ad0c":"code","929dbebb":"code","105bf811":"code","142d2993":"code","3d585e27":"code","fae028fe":"code","311c4382":"code","cb2f9fdf":"code","cd80e162":"code","a26cf36e":"code","8bbf09f4":"code","86880557":"code","f624f1cf":"code","9429b61f":"code","a0bc9594":"code","3855a926":"code","6edaaaaf":"code","650b5c7a":"code","a3edc372":"code","b64c0bf9":"code","71175450":"code","ec3d0ad8":"code","1c38f606":"code","2fa96265":"code","cf3324da":"code","3f640470":"code","e0590050":"code","b48dbb0d":"code","59cb542f":"code","d4350656":"code","115c2c51":"code","b54e93ed":"code","4efb38a0":"code","12d493e7":"code","f853a485":"code","6a08b212":"code","96296930":"code","ef8bc8a6":"code","2a9d8aa3":"code","4bd371ff":"code","82645b74":"code","539eaf0c":"code","cf3dd74b":"code","289c95d0":"code","ac93a421":"code","d92d028d":"code","37ff25d3":"code","f6b4addf":"code","7795c4e4":"code","7b005333":"code","a9983e11":"code","f0ce7c23":"code","6f6852d5":"code","94c13a62":"code","2ebcd339":"code","d5e29549":"code","ab2db9a5":"code","4b3228b4":"code","ef62c6c6":"code","1f83f707":"code","6f427b6c":"code","d3781990":"code","07fd0c3b":"code","d9859874":"code","2fbd2f18":"code","ce24492a":"code","2c3164b8":"code","445e6254":"code","af6d9c88":"code","a04894ef":"code","6058cc7f":"code","688eeae2":"code","7e4ddd7c":"code","a3a8f593":"code","45cf181e":"code","90fc6ba7":"markdown","a4ddb484":"markdown","0dc4087f":"markdown","ce86d0c7":"markdown","15778459":"markdown","2f693148":"markdown","91216dd0":"markdown"},"source":{"a5c925cc":"from __future__ import division\nfrom datetime import datetime, timedelta,date\nimport pandas as pd\n%matplotlib inline\nfrom sklearn.metrics import classification_report,confusion_matrix\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n\nfrom sklearn.cluster import KMeans\n\n","97880929":"import warnings\nwarnings.filterwarnings(\"ignore\")","5db71e13":"import chart_studio.plotly as py\nimport plotly.offline as pyoff\nimport plotly.graph_objs as go","20eb741c":"from sklearn.svm import SVC\nfrom sklearn.multioutput import MultiOutputClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nimport xgboost as xgb\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split","25bebb19":"pyoff.init_notebook_mode()","f0ace494":"tx_data = pd.read_csv(\"..\/input\/online-retail-ii-uci\/online_retail_II.csv\")\ntx_data = tx_data.rename(columns={\"Customer ID\": \"CustomerID\"})\ntx_data = tx_data.rename(columns={\"Price\": \"UnitPrice\"})","bffe4c15":"tx_data.shape","619dc03c":"tx_data.head(10)","683c1454":"tx_data['InvoiceDate'] = pd.to_datetime(tx_data['InvoiceDate'])","759226a0":"tx_data['InvoiceDate'].describe()","468c0a62":"tx_uk = tx_data.query(\"Country=='United Kingdom'\").reset_index(drop=True)","b5a0b7db":"tx_6m = tx_uk[(tx_uk.InvoiceDate < date(2011,9,1)) & (tx_uk.InvoiceDate >= date(2011,3,1))].reset_index(drop=True)\ntx_next = tx_uk[(tx_uk.InvoiceDate >= date(2011,9,1)) & (tx_uk.InvoiceDate < date(2011,12,1))].reset_index(drop=True)","6691a0a3":"tx_next['InvoiceDate'].describe()","b5d36571":"tx_user = pd.DataFrame(tx_6m['CustomerID'].unique())\ntx_user.columns = ['CustomerID']","4b54f71b":"tx_next_first_purchase = tx_next.groupby('CustomerID').InvoiceDate.min().reset_index()","de99f857":"tx_next_first_purchase.columns = ['CustomerID','MinPurchaseDate']","f8b18001":"tx_next_first_purchase.head()","08a61248":"tx_last_purchase = tx_6m.groupby('CustomerID').InvoiceDate.max().reset_index()","90b627c9":"tx_last_purchase.columns = ['CustomerID','MaxPurchaseDate']","b3fdac84":"tx_purchase_dates = pd.merge(tx_last_purchase,tx_next_first_purchase,on='CustomerID',how='left')","67f60bbe":"tx_purchase_dates['NextPurchaseDay'] = (tx_purchase_dates['MinPurchaseDate'] - tx_purchase_dates['MaxPurchaseDate']).dt.days\n\n","2e16dcd2":"tx_purchase_dates.head()","26353562":"tx_user = pd.merge(tx_user, tx_purchase_dates[['CustomerID','NextPurchaseDay']],on='CustomerID',how='left')","4d166ad5":"tx_user.head()","6cc9c54a":"tx_user.shape","c2290e8c":"tx_user = tx_user.fillna(999)","a64940c1":"tx_max_purchase = tx_6m.groupby('CustomerID').InvoiceDate.max().reset_index()","b8ccc595":"tx_max_purchase.columns = ['CustomerID','MaxPurchaseDate']","fb55e101":"tx_max_purchase['Recency'] = (tx_max_purchase['MaxPurchaseDate'].max() - tx_max_purchase['MaxPurchaseDate']).dt.days","313ffa39":"tx_user = pd.merge(tx_user, tx_max_purchase[['CustomerID','Recency']], on='CustomerID')","23696c61":"tx_user.head()","499ea608":"tx_user.Recency.describe()","88c3ad0c":"plot_data = [\n    go.Histogram(\n        x=tx_user['Recency']\n    )\n]\n\nplot_layout = go.Layout(\n        title='Recency'\n    )\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)","929dbebb":"sse={}\ntx_recency = tx_user[['Recency']]\nfor k in range(1, 10):\n    kmeans = KMeans(n_clusters=k, max_iter=1000).fit(tx_recency)\n    tx_recency[\"clusters\"] = kmeans.labels_\n    sse[k] = kmeans.inertia_ \nplt.figure()\nplt.plot(list(sse.keys()), list(sse.values()))\nplt.xlabel(\"Number of cluster\")\nplt.show()","105bf811":"kmeans = KMeans(n_clusters=4)\nkmeans.fit(tx_user[['Recency']])\ntx_user['RecencyCluster'] = kmeans.predict(tx_user[['Recency']])","142d2993":"def order_cluster(cluster_field_name, target_field_name,df,ascending):\n    new_cluster_field_name = 'new_' + cluster_field_name\n    df_new = df.groupby(cluster_field_name)[target_field_name].mean().reset_index()\n    df_new = df_new.sort_values(by=target_field_name,ascending=ascending).reset_index(drop=True)\n    df_new['index'] = df_new.index\n    df_final = pd.merge(df,df_new[[cluster_field_name,'index']], on=cluster_field_name)\n    df_final = df_final.drop([cluster_field_name],axis=1)\n    df_final = df_final.rename(columns={\"index\":cluster_field_name})\n    return df_final\n","3d585e27":"tx_user = order_cluster('RecencyCluster', 'Recency',tx_user,False)","fae028fe":"tx_user.groupby('RecencyCluster')['Recency'].describe()","311c4382":"tx_frequency = tx_6m.groupby('CustomerID').InvoiceDate.count().reset_index()","cb2f9fdf":"tx_frequency.columns = ['CustomerID','Frequency']","cd80e162":"tx_frequency.head()","a26cf36e":"tx_user = pd.merge(tx_user, tx_frequency, on='CustomerID')","8bbf09f4":"tx_user.head()","86880557":"tx_user.Frequency.describe()","f624f1cf":"plot_data = [\n    go.Histogram(\n        x=tx_user.query('Frequency < 1000')['Frequency']\n    )\n]\n\nplot_layout = go.Layout(\n        title='Frequency'\n    )\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)","9429b61f":"sse={}\ntx_frequency = tx_user[['Frequency']]\nfor k in range(1, 10):\n    kmeans = KMeans(n_clusters=k, max_iter=1000).fit(tx_frequency)\n    tx_frequency[\"clusters\"] = kmeans.labels_\n    sse[k] = kmeans.inertia_ \nplt.figure()\nplt.plot(list(sse.keys()), list(sse.values()))\nplt.xlabel(\"Number of cluster\")\nplt.show()","a0bc9594":"kmeans = KMeans(n_clusters=4)\nkmeans.fit(tx_user[['Frequency']])\ntx_user['FrequencyCluster'] = kmeans.predict(tx_user[['Frequency']])","3855a926":"tx_user.groupby('FrequencyCluster')['Frequency'].describe()","6edaaaaf":"tx_user = order_cluster('FrequencyCluster', 'Frequency',tx_user,True)","650b5c7a":"tx_6m['Revenue'] = tx_6m['UnitPrice'] * tx_6m['Quantity']","a3edc372":"tx_revenue = tx_6m.groupby('CustomerID').Revenue.sum().reset_index()","b64c0bf9":"tx_revenue.head()","71175450":"tx_user = pd.merge(tx_user, tx_revenue, on='CustomerID')","ec3d0ad8":"tx_user.Revenue.describe()","1c38f606":"plot_data = [\n    go.Histogram(\n        x=tx_user.query('Revenue < 10000')['Revenue']\n    )\n]\n\nplot_layout = go.Layout(\n        title='Monetary Value'\n    )\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)","2fa96265":"sse={}\ntx_revenue = tx_user[['Revenue']]\nfor k in range(1, 10):\n    kmeans = KMeans(n_clusters=k, max_iter=1000).fit(tx_revenue)\n    tx_revenue[\"clusters\"] = kmeans.labels_\n    sse[k] = kmeans.inertia_ \nplt.figure()\nplt.plot(list(sse.keys()), list(sse.values()))\nplt.xlabel(\"Number of cluster\")\nplt.show()","cf3324da":"kmeans = KMeans(n_clusters=4)\nkmeans.fit(tx_user[['Revenue']])\ntx_user['RevenueCluster'] = kmeans.predict(tx_user[['Revenue']])","3f640470":"tx_user = order_cluster('RevenueCluster', 'Revenue',tx_user,True)","e0590050":"tx_user.groupby('RevenueCluster')['Revenue'].describe()","b48dbb0d":"tx_user.head()","59cb542f":"tx_user['OverallScore'] = tx_user['RecencyCluster'] + tx_user['FrequencyCluster'] + tx_user['RevenueCluster']","d4350656":"tx_user.groupby('OverallScore')['Recency','Frequency','Revenue'].mean()","115c2c51":"tx_user.groupby('OverallScore')['Recency'].count()","b54e93ed":"tx_user['Segment'] = 'Low-Value'\ntx_user.loc[tx_user['OverallScore']>2,'Segment'] = 'Mid-Value' \ntx_user.loc[tx_user['OverallScore']>4,'Segment'] = 'High-Value' ","4efb38a0":"tx_graph = tx_user.query(\"Revenue < 50000 and Frequency < 2000\")\n\nplot_data = [\n    go.Scatter(\n        x=tx_graph.query(\"Segment == 'Low-Value'\")['Frequency'],\n        y=tx_graph.query(\"Segment == 'Low-Value'\")['Revenue'],\n        mode='markers',\n        name='Low',\n        marker= dict(size= 7,\n            line= dict(width=1),\n            color= 'blue',\n            opacity= 0.8\n           )\n    ),\n        go.Scatter(\n        x=tx_graph.query(\"Segment == 'Mid-Value'\")['Frequency'],\n        y=tx_graph.query(\"Segment == 'Mid-Value'\")['Revenue'],\n        mode='markers',\n        name='Mid',\n        marker= dict(size= 9,\n            line= dict(width=1),\n            color= 'green',\n            opacity= 0.5\n           )\n    ),\n        go.Scatter(\n        x=tx_graph.query(\"Segment == 'High-Value'\")['Frequency'],\n        y=tx_graph.query(\"Segment == 'High-Value'\")['Revenue'],\n        mode='markers',\n        name='High',\n        marker= dict(size= 11,\n            line= dict(width=1),\n            color= 'red',\n            opacity= 0.9\n           )\n    ),\n]\n\nplot_layout = go.Layout(\n        yaxis= {'title': \"Revenue\"},\n        xaxis= {'title': \"Frequency\"},\n        title='Segments'\n    )\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)","12d493e7":"tx_graph = tx_user.query(\"Revenue < 50000 and Frequency < 2000\")\n\nplot_data = [\n    go.Scatter(\n        x=tx_graph.query(\"Segment == 'Low-Value'\")['Recency'],\n        y=tx_graph.query(\"Segment == 'Low-Value'\")['Revenue'],\n        mode='markers',\n        name='Low',\n        marker= dict(size= 7,\n            line= dict(width=1),\n            color= 'blue',\n            opacity= 0.8\n           )\n    ),\n        go.Scatter(\n        x=tx_graph.query(\"Segment == 'Mid-Value'\")['Recency'],\n        y=tx_graph.query(\"Segment == 'Mid-Value'\")['Revenue'],\n        mode='markers',\n        name='Mid',\n        marker= dict(size= 9,\n            line= dict(width=1),\n            color= 'green',\n            opacity= 0.5\n           )\n    ),\n        go.Scatter(\n        x=tx_graph.query(\"Segment == 'High-Value'\")['Recency'],\n        y=tx_graph.query(\"Segment == 'High-Value'\")['Revenue'],\n        mode='markers',\n        name='High',\n        marker= dict(size= 11,\n            line= dict(width=1),\n            color= 'red',\n            opacity= 0.9\n           )\n    ),\n]\n\nplot_layout = go.Layout(\n        yaxis= {'title': \"Revenue\"},\n        xaxis= {'title': \"Recency\"},\n        title='Segments'\n    )\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)","f853a485":"tx_graph = tx_user.query(\"Revenue < 50000 and Frequency < 2000\")\n\nplot_data = [\n    go.Scatter(\n        x=tx_graph.query(\"Segment == 'Low-Value'\")['Recency'],\n        y=tx_graph.query(\"Segment == 'Low-Value'\")['Frequency'],\n        mode='markers',\n        name='Low',\n        marker= dict(size= 7,\n            line= dict(width=1),\n            color= 'blue',\n            opacity= 0.8\n           )\n    ),\n        go.Scatter(\n        x=tx_graph.query(\"Segment == 'Mid-Value'\")['Recency'],\n        y=tx_graph.query(\"Segment == 'Mid-Value'\")['Frequency'],\n        mode='markers',\n        name='Mid',\n        marker= dict(size= 9,\n            line= dict(width=1),\n            color= 'green',\n            opacity= 0.5\n           )\n    ),\n        go.Scatter(\n        x=tx_graph.query(\"Segment == 'High-Value'\")['Recency'],\n        y=tx_graph.query(\"Segment == 'High-Value'\")['Frequency'],\n        mode='markers',\n        name='High',\n        marker= dict(size= 11,\n            line= dict(width=1),\n            color= 'red',\n            opacity= 0.9\n           )\n    ),\n]\n\nplot_layout = go.Layout(\n        yaxis= {'title': \"Frequency\"},\n        xaxis= {'title': \"Recency\"},\n        title='Segments'\n    )\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)","6a08b212":"tx_user.head()","96296930":"tx_6m.head()","ef8bc8a6":"#create a dataframe with CustomerID and Invoice Date\ntx_day_order = tx_6m[['CustomerID','InvoiceDate']]","2a9d8aa3":"#Convert Invoice Datetime to day\ntx_day_order['InvoiceDay'] = tx_6m['InvoiceDate'].dt.date","4bd371ff":"tx_day_order = tx_day_order.sort_values(['CustomerID','InvoiceDate'])","82645b74":"#Drop duplicates\ntx_day_order = tx_day_order.drop_duplicates(subset=['CustomerID','InvoiceDay'],keep='first')","539eaf0c":"#shifting last 3 purchase dates\ntx_day_order['PrevInvoiceDate'] = tx_day_order.groupby('CustomerID')['InvoiceDay'].shift(1)\ntx_day_order['T2InvoiceDate'] = tx_day_order.groupby('CustomerID')['InvoiceDay'].shift(2)\ntx_day_order['T3InvoiceDate'] = tx_day_order.groupby('CustomerID')['InvoiceDay'].shift(3)","cf3dd74b":"tx_day_order.head()","289c95d0":"tx_day_order['DayDiff'] = (tx_day_order['InvoiceDay'] - tx_day_order['PrevInvoiceDate']).dt.days\ntx_day_order['DayDiff2'] = (tx_day_order['InvoiceDay'] - tx_day_order['T2InvoiceDate']).dt.days\ntx_day_order['DayDiff3'] = (tx_day_order['InvoiceDay'] - tx_day_order['T3InvoiceDate']).dt.days","ac93a421":"tx_day_order.head(10)","d92d028d":"tx_day_diff = tx_day_order.groupby('CustomerID').agg({'DayDiff': ['mean','std']}).reset_index()\n\n","37ff25d3":"tx_day_diff.columns = ['CustomerID', 'DayDiffMean','DayDiffStd']","f6b4addf":"tx_day_diff.head()","7795c4e4":"tx_day_order_last = tx_day_order.drop_duplicates(subset=['CustomerID'],keep='last')","7b005333":"tx_day_order_last.head(10)","a9983e11":"tx_day_order_last = tx_day_order_last.dropna()","f0ce7c23":"tx_day_order_last = pd.merge(tx_day_order_last, tx_day_diff, on='CustomerID')","6f6852d5":"tx_user = pd.merge(tx_user, tx_day_order_last[['CustomerID','DayDiff','DayDiff2','DayDiff3','DayDiffMean','DayDiffStd']], on='CustomerID')\n","94c13a62":"tx_user.head()","2ebcd339":"len(tx_user)","d5e29549":"tx_class = tx_user.copy()","ab2db9a5":"tx_class = pd.get_dummies(tx_class)","4b3228b4":"tx_class.tail(10)","ef62c6c6":"tx_user.NextPurchaseDay.describe()","1f83f707":"tx_class['NextPurchaseDayRange'] = 2\ntx_class.loc[tx_class.NextPurchaseDay>20,'NextPurchaseDayRange'] = 1\ntx_class.loc[tx_class.NextPurchaseDay>50,'NextPurchaseDayRange'] = 0\n","6f427b6c":"tx_class.NextPurchaseDayRange.value_counts()\/len(tx_user)","d3781990":"#tx_class = tx_class[tx_class.Frequency>10]","07fd0c3b":"corr = tx_class[tx_class.columns].corr()\nplt.figure(figsize = (30,20))\nsns.heatmap(corr, annot = True, linewidths=0.2, fmt=\".2f\")","d9859874":"tx_class = tx_class.drop('NextPurchaseDay',axis=1)","2fbd2f18":"len(tx_class)","ce24492a":"X, y = tx_class.drop('NextPurchaseDayRange',axis=1), tx_class.NextPurchaseDayRange\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=44)","2c3164b8":"models = []\nmodels.append((\"LR\",LogisticRegression()))\nmodels.append((\"NB\",GaussianNB()))\nmodels.append((\"RF\",RandomForestClassifier()))\nmodels.append((\"SVC\",SVC()))\nmodels.append((\"Dtree\",DecisionTreeClassifier()))\nmodels.append((\"XGB\",xgb.XGBClassifier()))\nmodels.append((\"KNN\",KNeighborsClassifier()))\n","445e6254":"for name,model in models:\n    kfold = KFold(n_splits=2, random_state=22)\n    cv_result = cross_val_score(model,X_train,y_train, cv = kfold,scoring = \"accuracy\")\n    print(name, cv_result)","af6d9c88":"xgb_model = xgb.XGBClassifier().fit(X_train, y_train)\n\nprint('Accuracy of XGB classifier on training set: {:.2f}'\n       .format(xgb_model.score(X_train, y_train)))\nprint('Accuracy of XGB classifier on test set: {:.2f}'\n       .format(xgb_model.score(X_test[X_train.columns], y_test)))\n\n","a04894ef":"y_pred = xgb_model.predict(X_test)","6058cc7f":"print(classification_report(y_test, y_pred))","688eeae2":"from sklearn.model_selection import GridSearchCV\n\nparam_test1 = {\n 'max_depth':range(3,10,2),\n 'min_child_weight':range(1,6,2)\n}\ngsearch1 = GridSearchCV(estimator = xgb.XGBClassifier(), \nparam_grid = param_test1, scoring='accuracy',n_jobs=-1,iid=False, cv=2)\ngsearch1.fit(X_train,y_train)\ngsearch1.best_params_, gsearch1.best_score_","7e4ddd7c":"xgb_model = xgb.XGBClassifier(max_depth=3, min_child_weight=5).fit(X_train, y_train)\n\nprint('Accuracy of XGB classifier on training set: {:.2f}'\n       .format(xgb_model.score(X_train, y_train)))\nprint('Accuracy of XGB classifier on test set: {:.2f}'\n       .format(xgb_model.score(X_test[X_train.columns], y_test)))\n\n","a3a8f593":"y_pred = xgb_model.predict(X_test)","45cf181e":"print(classification_report(y_test, y_pred))","90fc6ba7":"# Overall Segmentation","a4ddb484":"# Monetary Value","0dc4087f":"# Recency","ce86d0c7":"# Frequency","15778459":"# Grouping the label","2f693148":"# Adding new features","91216dd0":"# Adding label"}}