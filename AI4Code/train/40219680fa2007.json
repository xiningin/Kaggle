{"cell_type":{"e95bdf15":"code","3a3289df":"code","627c88c7":"code","2d9621b9":"code","15e41055":"code","521958d9":"code","5e405b9c":"code","dd7bd5e5":"code","2f1c1f95":"code","0bcf20ad":"code","99a4e565":"code","77d7b5f5":"code","12da79ff":"code","cf1d90f3":"code","f8589a81":"code","cf8f94bb":"code","559c2a35":"code","d24095f4":"code","86ffe837":"code","08ac9bc6":"code","b08033f1":"code","1e297c90":"code","328099b9":"code","22616332":"code","df3afad6":"code","ba59ee31":"code","f9d0c124":"code","47e7b957":"code","33514d8c":"code","8433dc44":"code","2881d374":"markdown","9fa38f2a":"markdown","62c69a01":"markdown","7c99bb97":"markdown","776445a4":"markdown","4c516916":"markdown","67e62950":"markdown","884ee5e8":"markdown","010b8efa":"markdown","868f671e":"markdown","765d47f4":"markdown","37a51d90":"markdown","a31208de":"markdown","1de01a53":"markdown","3c9c14ca":"markdown"},"source":{"e95bdf15":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3a3289df":"df = pd.read_csv('\/kaggle\/input\/loan-dataset\/loan.csv')\ndf.head()","627c88c7":"df.drop('Unnamed: 0', axis=1, inplace=True)\ndf.drop('Unnamed: 0.1', axis=1, inplace=True)\ndf.head()","2d9621b9":"df.shape","15e41055":"df.info()","521958d9":"df.columns","5e405b9c":"df['effective_date'] = pd.to_datetime(df['effective_date'])\ndf['due_date'] = pd.to_datetime(df['due_date'])\ndf.head()","dd7bd5e5":"df['loan_status'].value_counts()","2f1c1f95":"import seaborn as sns\nsns.set_theme(style=\"darkgrid\")\nsns.countplot(x='loan_status', data=df);","0bcf20ad":"df.columns","99a4e565":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\nbins = np.linspace(df.Principal.min(), df.Principal.max(), 10)\ng = sns.FacetGrid(df, col='Gender', hue='loan_status',palette=\"Set1\", col_wrap=2)\ng.map(plt.hist, 'Principal', bins=bins, ec=\"k\")\ng.axes[-1].legend()\nplt.show()","77d7b5f5":"bins = np.linspace(df.age.min(), df.age.max(), 10)\n\ng = sns.FacetGrid(df, col='Gender', hue='loan_status', palette='Set1', col_wrap=2)\ng.map(plt.hist, 'age', bins=bins, ec=\"k\")\ng.axes[-1].legend()\nplt.show()","12da79ff":"df['dayofweek'] = df['effective_date'].dt.dayofweek\nbins = np.linspace(df.dayofweek.min(), df.dayofweek.max(), 10)\ng = sns.FacetGrid(df, col=\"Gender\", hue=\"loan_status\", palette=\"Set1\", col_wrap=2)\ng.map(plt.hist, 'dayofweek', bins=bins, ec=\"k\")\ng.axes[-1].legend()\nplt.show()\n","cf1d90f3":"df.head()","f8589a81":"df['weekened'] = df['dayofweek'].apply(lambda x: 1 if (x>3) else 0)\ndf.head()","cf8f94bb":"df.groupby(['Gender'])['loan_status'].value_counts(normalize=True)","559c2a35":"df['Gender'].replace(to_replace=['male','female'], value=[0,1], inplace=True)\ndf.head()","d24095f4":"df.groupby(['education'])['loan_status'].value_counts(normalize=True)*100","86ffe837":"df[['Principal','terms','age','Gender','education']].head()","08ac9bc6":"Feature = df[['Principal','terms','age','Gender','weekened']]\nFeature = pd.concat([Feature,pd.get_dummies(df['education'])], axis=1)\nFeature.drop(['Master or Above'], axis = 1,inplace=True)\nFeature.head()\n","b08033f1":"X = Feature\nX[0:5]","1e297c90":"y = df['loan_status'].values\ny[0:5]","328099b9":"from sklearn.preprocessing import StandardScaler\nfrom sklearn import preprocessing","22616332":"X = preprocessing.StandardScaler().fit(X).transform(X)\nX[0:5]","df3afad6":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=0)","ba59ee31":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import mean_absolute_error","f9d0c124":"rm = RandomForestClassifier(n_estimators=100, max_depth=2,random_state=0)\nrm.fit(X_train,y_train)\ny_pred = rm.predict(X_test)\n","47e7b957":"## Accuracy score\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\naccuracy_score(y_test, y_pred)\n","33514d8c":"# View the classification report for test data and predictions\nprint(classification_report(y_test, y_pred))","8433dc44":"from yellowbrick.classifier import ClassificationReport\nvisualizer = ClassificationReport(rm, classes=['PAIDOFF','COLLECTION'])\nvisualizer.fit(X_train, y_train) # Fit the training data to the visualizer\nvisualizer.score(X_test, y_test) # Evaluate the model on the test data\ng = visualizer.poof(); # Draw\/show\/poof the data","2881d374":"## Normalize the Data","9fa38f2a":"#### Use one hot encoding technique to conver categorical varables to binary variables and append them to the feature Data Frame","62c69a01":"## Convert to date time object\nAs you see above the date and time are not in proper farmats","7c99bb97":"# RandomFrestClassifier","776445a4":"## One Hot Encoding","4c516916":"## Visualization ","67e62950":"Let's look at the day of the week people get the loan","884ee5e8":"We see that people who get the loan at the end of the week don't pay it off, so let's use Feature binarization to set a threshold value less than day 4","010b8efa":"## Classification Report","868f671e":"## Pre-processing","765d47f4":"86 % of female pay their loans while only 73 % of males pay there loan and 13 % have to pay and 26% male have to pay","37a51d90":"### Feature Selection (slicing)","a31208de":"## Convert Categorical features to numerical values","1de01a53":"Let have Visulize on the bases of loan status with Principal and age.","3c9c14ca":"## Loading data set into pandas data frame"}}