{"cell_type":{"c32bc007":"code","d3eac2a1":"code","fd0e1821":"code","d5fbe774":"code","c7e5ab7c":"code","ec768e55":"code","930c699a":"code","dc98cd55":"code","46767901":"code","fed1d4a8":"code","5c158439":"code","58dcb418":"code","45f7d3b9":"code","72c50f40":"code","4b0431db":"code","e76b2c42":"code","5e5d6aab":"code","41c52298":"code","58bee91b":"code","feeec002":"code","1639640c":"code","a2b80b77":"code","f405c612":"code","ca814e07":"markdown","f298b1ba":"markdown","a24091ea":"markdown","e321ff30":"markdown","1d02b141":"markdown","add6f26c":"markdown","c36cdb3e":"markdown","20355c58":"markdown"},"source":{"c32bc007":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tensorflow.keras.optimizers import RMSprop\nfrom tensorflow_addons.optimizers import AdamW\nfrom sklearn.model_selection import train_test_split\n\nprint(\"Tensorflow version \" + tf.__version__)","d3eac2a1":"!pip install -q efficientnet\n\nimport efficientnet.tfkeras as efn","fd0e1821":"# Detect hardware, return appropriate distribution strategy\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print('Running on TPU ', tpu.master())\n    \nexcept ValueError:\n    tpu = None\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\n\n    #tf.config.experimental_connect_to_cluster(tpu)\n    #tf.tpu.experimental.initialize_tpu_system(tpu)\n    #strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    strategy = tf.distribute.get_strategy() # default distribution strategy in Tensorflow. Works on CPU and single GPU.\n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)","d5fbe774":"# load data from csv file\ntrain = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")","c7e5ab7c":"train = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntrain.head()","ec768e55":"Y_train = train['label'].values.astype('float32')\nY_train = tf.keras.utils.to_categorical(Y_train, 10)\nY_train","930c699a":"X_train = train.drop(labels=['label'], axis=1)\nX_train.shape","dc98cd55":"X_train = X_train.astype('float32')\nX_train = X_train \/ 255","46767901":"X_train = X_train.values.reshape(42000,28,28,1)\nX_train.shape","fed1d4a8":"plt.imshow(X_train[1][:,:,0])","5c158439":"X_train = np.pad(X_train, ((0,0), (2,2), (2,2), (0,0)), mode='constant')\nX_train.shape","58dcb418":"X_train = np.squeeze(X_train, axis=-1)\nX_train = stacked_img = np.stack((X_train,)*3, axis=-1)\nX_train.shape","45f7d3b9":"plt.imshow(X_train[1][:,:,0])","72c50f40":"def create_model():\n    enet = efn.EfficientNetB7(\n    input_shape=(32, 32, 3),\n    weights='imagenet',\n    include_top=False,\n    )        \n    \n    model = tf.keras.Sequential([\n        enet,\n        tf.keras.layers.Flatten(),\n        tf.keras.layers.Dense(1024, activation=\"relu\"),\n        tf.keras.layers.Dropout(0.25),\n        tf.keras.layers.Dense(10, activation='softmax')\n    ])\n    \n    return model","4b0431db":"from tensorflow.keras.callbacks import ReduceLROnPlateau, EarlyStopping\n\nLR = ReduceLROnPlateau(monitor='val_accuracy', patience=2, verbose=2, factor=0.4, min_delta=1e-4)\nES = EarlyStopping(monitor='val_accuracy', min_delta=1e-5, patience=5, verbose=2, mode='auto', restore_best_weights=True)","e76b2c42":"with strategy.scope():\n    model = create_model()\n    \n# optimizer = RMSprop(learning_rate=1e-3, rho=0.9, momentum=0.0, epsilon=1e-07)\noptimizer = AdamW(weight_decay=1e-8, learning_rate=1e-3, beta_1=0.9, beta_2=0.999, epsilon=1e-07, amsgrad=False)\nmodel.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['accuracy'])","5e5d6aab":"%%time\n\nepochs = 100\nseed = 2021\n\nX_t, X_v, y_t, y_v = train_test_split(X_train, Y_train, test_size=0.2, random_state=seed, stratify=Y_train)\n\"\"\"\n#y_train = label_process(y_train, num_classes)\n#y_valid = label_process(y_valid, num_classes)\n\nhistory = model.fit(X_train_full, y_train_full,\n                    epochs=50,\n                    batch_size=128*strategy.num_replicas_in_sync,\n                    callbacks=[LR, ES],\n                    #validation_data=(X_valid,y_valid),\n                    verbose=1)\n\nprint(f\"Epochs={max(history.epoch):d}, Train accuracy={max(history.history['accuracy']):.5f}, Validation accuracy={max(history.history['val_accuracy']):.5f}\")\n\n\"\"\"\n\nhistory = model.fit(X_t, y_t,\n                    epochs=epochs,\n                    batch_size=128*strategy.num_replicas_in_sync,\n                    shuffle=True,\n                    callbacks=[LR, ES],\n                    validation_data=(X_v, y_v),\n                    verbose=1,\n                    )","41c52298":"import matplotlib.pyplot as plt\n\nplt.figure(figsize=(12,12))\n\nplt.subplot(2,1,1)\nepoch_range = 1 + np.arange(len(history.history['accuracy']))\nplt.plot(epoch_range,history.history['loss'],'g-',label='Training loss')\nplt.plot(epoch_range,history.history['val_loss'],'r--',label='Validation loss')\nplt.legend(loc='best',shadow=True)\nplt.xlabel('Epoch')\nplt.ylabel('Loss')\n# plt.xlim([0,epochs])\nplt.ylim([0,0.2])\n\n\nplt.subplot(2,1,2)\nepoch_range = 1 + np.arange(len(history.history['accuracy']))\nplt.plot(epoch_range,history.history['accuracy'],'g-',label='Training accuracy')\nplt.plot(epoch_range,history.history['val_accuracy'],'r--',label='Validation accuracy')\nplt.legend(loc='best',shadow=True)\nplt.xlabel('Epoch')\nplt.ylabel('Accuracy')\n# plt.xlim([0,epochs])\nplt.ylim([0.95,1])\n\nplt.show()","58bee91b":"test = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")\ntest.head()","feeec002":"test = test.astype('float32')\ntest = test \/ 255\ntest = test.values.reshape(len(test),28,28,1)\ntest = np.pad(test, ((0,0), (2,2), (2,2), (0,0)), mode='constant')\ntest = np.squeeze(test, axis=-1)\ntest = stacked_img = np.stack((test,)*3, axis=-1)\ntest.shape","1639640c":"%%time\n\ntest_predictions = model.predict(test)","a2b80b77":"# select the index with the maximum probability\n\nresults = np.argmax(test_predictions,axis = 1)\nresults = pd.Series(results,name=\"Label\")","f405c612":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\nsubmission.to_csv(\"submission.csv\",index=False)\n\nsubmission.head()","ca814e07":"## This kernel shows how to easy use TPU (tensor processing unit) with tf.keras","f298b1ba":"## Submission","a24091ea":"### Enable TPU","e321ff30":"### Load train data","1d02b141":"### Train","add6f26c":"## Prediction","c36cdb3e":"## Load test data","20355c58":"### Model"}}