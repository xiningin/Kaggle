{"cell_type":{"1ec6b129":"code","897b4af5":"code","51b1cd39":"code","35edfdd9":"code","8696aa4f":"code","b5e90c9f":"code","0fd34b07":"code","c2fe8a90":"code","44b104c2":"code","bf24fd99":"code","603ce6c6":"code","d5757767":"code","b98d1a2a":"code","0b6273f6":"code","0ceb124f":"code","bf631440":"code","f783279d":"code","9ad360cf":"code","7422ee81":"markdown","6887816f":"markdown","e7623ba1":"markdown","258e38c4":"markdown","33e1a3ff":"markdown","94492270":"markdown","27e52a35":"markdown","456fcfd1":"markdown","6864296a":"markdown","521f9e21":"markdown","e3644b44":"markdown","f6de7abb":"markdown","a2147f6e":"markdown"},"source":{"1ec6b129":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\nimport json\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport random\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn import svm\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.model_selection import GridSearchCV\nimport pickle\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","897b4af5":"class Sentiment :\n    NEGATIVE ='NEGATIVE'\n    NEUTRAL ='NEUTRAL'\n    POSITIVE ='POSITIVE'\n\nclass Review:\n    def __init__(self, text,score):\n        self.text=text\n        self.score=score\n        self.sentiment=self.get_sentiment()\n        \n    def get_sentiment(self):\n        \n        if self.score<=2:\n            return Sentiment.NEGATIVE\n        elif self.score==3:\n            return Sentiment.NEUTRAL\n        else :\n            return Sentiment.POSITIVE\n\n\nclass ReviewContainer:\n    \n    def __init__(self, reviews):\n        self.reviews=reviews\n        \n    def get_text(self):\n        return [x.text for x in self.reviews]\n    \n\n    def get_sentiment(self):\n        return [x.sentiment for x in self.reviews]\n\n\n        \n        \n    def evenly_distribute(self):\n        negative=list(filter(lambda x:x.sentiment==Sentiment.NEGATIVE, self.reviews))\n        positive=list(filter(lambda x:x.sentiment==Sentiment.POSITIVE, self.reviews))\n        positive_shrunk=positive[:len(negative)]\n        self.reviews=negative+positive_shrunk\n        random.shuffle(self.reviews)\n        ","51b1cd39":"file_name='..\/input\/book-review\/Books_small_10000.json'\nreviews=[]\n\nwith open(file_name) as f:\n    for line in f:\n\n        review =json.loads(line)\n\n        reviews.append(Review(review['reviewText'],review['overall']))\n\n    \n# reviews[5].sentiment\n# reviews[5][1]\n# reviews[5].text","35edfdd9":"\n\ntraining,test=train_test_split(reviews, test_size=0.33, random_state=42)\n\ntrain_container=ReviewContainer(training)\ntest_container=ReviewContainer(test)\n\n","8696aa4f":"train_container.evenly_distribute()\n\ntrain_x=train_container.get_text()\ntrain_y=train_container.get_sentiment()\ntest_container.evenly_distribute()\n\ntest_x=test_container.get_text()\ntest_y=test_container.get_sentiment()\n\ntrain_y.count(Sentiment.POSITIVE)\ntrain_y.count(Sentiment.NEGATIVE)","b5e90c9f":"\nvectorizer=TfidfVectorizer()\ntrain_x_vectors=vectorizer.fit_transform(train_x)\ntest_x_vectors=vectorizer.transform(test_x)\n\n\nprint(train_x[0])\nprint(train_x_vectors[0].toarray())\n\n","0fd34b07":"\nclf_svm=svm.SVC(kernel='linear')\n\n\nclf_svm.fit(train_x_vectors,train_y)\n\ntest_x[0]\nclf_svm.predict(test_x_vectors[0])","c2fe8a90":"clf_Decision=DecisionTreeClassifier()\n\n\nclf_Decision.fit(train_x_vectors,train_y)\n\nclf_Decision.predict(test_x_vectors[0])\n","44b104c2":"clf_log=LogisticRegression()\n\n\nclf_log.fit(train_x_vectors,train_y)\n\nclf_log.predict(test_x_vectors[0])\n\n","bf24fd99":"clf_gnb=GaussianNB()\n\n\nclf_gnb.fit(train_x_vectors.toarray(),train_y)\n\nclf_gnb.predict(test_x_vectors[0].toarray())\n\n","603ce6c6":"# Mean Accuracy \nprint(clf_svm.score(test_x_vectors,test_y ))\nprint(clf_Decision.score(test_x_vectors,test_y ))\nprint(clf_gnb.score(test_x_vectors.toarray(),test_y ))\nprint(clf_log.score(test_x_vectors.toarray(),test_y ))\n\n","d5757767":"# F1 Scores\n\nfrom sklearn.metrics import f1_score\nf1_score(test_y, clf_svm.predict(test_x_vectors), average=None, labels=[Sentiment.POSITIVE, Sentiment.NEUTRAL, Sentiment.NEGATIVE])\nf1_score(test_y, clf_log.predict(test_x_vectors), average=None, labels=[Sentiment.POSITIVE, Sentiment.NEUTRAL, Sentiment.NEGATIVE])\n\n# f1_score(test_y, clf_gnb.predict(test_x_vectors), average=None, labels=[Sentiment.POSITIVE, Sentiment.NEUTRAL, Sentiment.NEGATIVE])\n# f1_score(test_y, clf_Decision.predict(test_x_vectors), average=None, labels=[Sentiment.POSITIVE, Sentiment.NEUTRAL, Sentiment.NEGATIVE])\n","b98d1a2a":"test_set=[' nice book ','bad book do not buy','horrible waste of time']\n\nnew_test=vectorizer.transform(test_set)\nclf_svm.predict(new_test)","0b6273f6":"parameters = {'kernel': ('linear', 'rbf'), 'C': (1,4,8,16,32)}\n\nsvc = svm.SVC()\nclf = GridSearchCV(svc, parameters, cv=5)\nclf.fit(train_x_vectors, train_y)","0ceb124f":"print(clf.score(test_x_vectors, test_y))\n","bf631440":"sentiment_classifier = \"sentiment_classifier.pickle\"\n\nwith open(sentiment_classifier,'wb') as f:\n    pickle.dump(clf, f)","f783279d":"with open('sentiment_classifier.pickle', 'rb') as f:\n    loaded_clf = pickle.load(f)","9ad360cf":"print(test_x[0])\n\nloaded_clf.predict(test_x_vectors[0])","7422ee81":"### Tuning our model(With Grid Search)","6887816f":"### Logistic Regression","e7623ba1":"# # # LOAD DATA","258e38c4":"# # DATA PREP","33e1a3ff":"### Naive Bayes ","94492270":"# Evaluation","27e52a35":"# Classification","456fcfd1":"# Bag of Words Vectorization","6864296a":"### Decision tree","521f9e21":"#### Linear SVM","e3644b44":"### Load Model","f6de7abb":"Test example","a2147f6e":"### Saving Model "}}