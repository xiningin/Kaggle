{"cell_type":{"d1dbf036":"code","01934b70":"code","c1e0cdf7":"code","eaf86a9f":"code","040d0db7":"code","3073e1a8":"code","d3496cfe":"code","c2f66fde":"code","31d2fc87":"code","a4020630":"code","c3fc0a51":"code","8abd0e88":"code","c46eaa55":"code","33ce68d4":"code","cf50c873":"code","045b5a2e":"code","ee648aa8":"code","3f886bed":"code","b18bae53":"markdown","640adec2":"markdown","f3d47344":"markdown","234f923e":"markdown","89042086":"markdown","2400e2ae":"markdown","fd5f91e9":"markdown","7f2658e6":"markdown","ec1e23d5":"markdown","2cdcb2e7":"markdown","c9a7c16d":"markdown"},"source":{"d1dbf036":"# Import helpful libraries\nimport pandas as pd\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import roc_auc_score","01934b70":"# Path of the data files to read\ntrain_data_path = \"..\/input\/tabular-playground-series-nov-2021\/train.csv\"\ntest_data_path = \"..\/input\/tabular-playground-series-nov-2021\/test.csv\"","c1e0cdf7":"# Read and store the data in DataFrames\ntrain_data = pd.read_csv(train_data_path, index_col='id')\ntest_data = pd.read_csv(test_data_path, index_col='id')","eaf86a9f":"train_data.head()","040d0db7":"test_data.head()","3073e1a8":"# View summary statistics of the train data\ntrain_data.describe()","d3496cfe":"# View summary statistics of the test data\ntest_data.describe()","c2f66fde":"# Separate target from features\ny = train_data['target']\ntrain_data.drop(['target'], axis=1, inplace=True)","31d2fc87":"# Normalize train and test data\nnormalizer = StandardScaler()\nnorm_train_data = pd.DataFrame(normalizer.fit_transform(train_data))\nnorm_test_data = pd.DataFrame(normalizer.transform(test_data))\n\nnorm_train_data.columns = train_data.columns\nnorm_test_data.columns = test_data.columns","a4020630":"# Create a DataFrame to hold the predictive features\nX = norm_train_data\nX_test = norm_test_data","c3fc0a51":"print(\"X shape: \", X.shape)\nprint(\"X_test shape: \", X_test.shape)\nprint(\"y shape: \", y.shape)","8abd0e88":"# Divide the data into training and validation subsets\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=.2, random_state=1)","c46eaa55":"# Define the model\nmodel = LogisticRegression(solver='liblinear')","33ce68d4":"# Fit the model\nmodel.fit(X_train, y_train)","cf50c873":"# Make predictions with the validation data\npreds_valid = model.predict(X_valid)","045b5a2e":"# Calculate the area under the ROC curve in the validation data\nroc = roc_auc_score(y_valid, preds_valid)\nprint(roc)","ee648aa8":"# Make predictions which will be submitted \npreds_test = model.predict(X_test)","3f886bed":"# Save predictions in the format used for competition scoring\noutput = pd.DataFrame({'id': test_data.index,\n                       'target': preds_test})\noutput.to_csv('submission.csv', index=False)","b18bae53":"### Create X","640adec2":"### Generate a Submission","f3d47344":"### Specify the Prediction Target","234f923e":"### Calculate the Area Under the ROC Curve","89042086":"### Split Your Data","2400e2ae":"### Make Predictions with Test Data","fd5f91e9":"### Preprocessing","7f2658e6":"### Specify and Fit the Model","ec1e23d5":"### Make Predictions","2cdcb2e7":"### Review the Data","c9a7c16d":"### Loading the Data"}}