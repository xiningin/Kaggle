{"cell_type":{"1bbeaeb0":"code","7d3fe3b7":"code","491926d9":"code","68d19d3a":"code","d6f0d1b6":"code","a71fb6b0":"code","f65628b5":"code","271df0cf":"code","75af1c0c":"code","dad6a402":"code","e6fbb6a7":"code","d1485a66":"code","6380adf7":"code","6c10de82":"code","a55ec47f":"code","8edb5479":"code","7f562590":"code","06f2e1f1":"code","68768dd0":"code","1c8b8900":"code","cc691f8e":"code","ffdbfcdf":"code","dcb7caa3":"code","0d48fe2a":"code","30d8f073":"code","1e442c55":"code","661c41f1":"code","1948b89d":"code","09dfaa53":"code","bd18b6f2":"code","348e56ef":"code","3c591fbb":"code","cef529b1":"code","2134cd12":"code","c8091448":"code","03eedbfe":"code","a859ae26":"code","59720705":"code","38ded3c3":"code","cc896646":"code","80c49e1e":"code","cf72b346":"code","39b08ee5":"code","22127cfe":"code","8425f59c":"code","9e8dd9b5":"code","1c061db6":"code","ddc9d7e0":"code","03a073db":"code","1bb9cac7":"code","47d64601":"code","15588086":"code","c9fbe1ab":"code","4aedcdad":"code","eabe0093":"code","b0bc8527":"code","11ca7afe":"code","279a7998":"code","ba9e2389":"code","9781bc21":"code","8c86f6c0":"code","896f2f7e":"code","a3231a74":"code","c30333b6":"code","f5120d55":"code","bf80aa09":"code","70ad0f88":"code","759c5535":"code","599c4850":"code","377a69c6":"code","bd7262ab":"code","5bfc89f3":"code","73e4e581":"code","2cba59d6":"code","37fb5c0d":"code","8d08b15c":"code","c7c95b79":"code","90342ae0":"code","9efbffb8":"code","53ccd34b":"code","4478fa6f":"code","7437a5aa":"code","ec08ca24":"code","2f196464":"code","7505f770":"code","d73dcbec":"code","386f3b36":"code","6315f84e":"code","5b777158":"code","00065cd9":"code","c1b175f0":"code","d39e2913":"code","8e306a09":"code","999bcc43":"code","4e33f02f":"markdown","b860feb3":"markdown","20257bcb":"markdown","f9f2e3be":"markdown","d99cad7c":"markdown","fc3fe6c3":"markdown","ab09034b":"markdown","304fd3b9":"markdown","5fe2cd76":"markdown","71521877":"markdown","5b18a15e":"markdown","bfa181ed":"markdown","2e2a27fd":"markdown","a5b3cec2":"markdown","f0cc8cd2":"markdown","5634847b":"markdown"},"source":{"1bbeaeb0":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","7d3fe3b7":"train = pd.read_csv(\"..\/input\/bigmart-sales-data\/Train.csv\")\ntest = pd.read_csv(\"..\/input\/bigmart-sales-data\/Test.csv\")","491926d9":"# Preview First 05 Rows of the Data\ntrain.head()","68d19d3a":"train.info()","d6f0d1b6":"# Target Variable\ntrain.columns","a71fb6b0":"sns.distplot(train.Item_Outlet_Sales, color = \"m\")\nplt.show()","f65628b5":"train.Item_Outlet_Sales.describe()","271df0cf":"sns.distplot(train.Item_Visibility, color = \"red\");","75af1c0c":"sns.distplot(train.Item_Weight.dropna(), color = \"g\");","dad6a402":"sns.distplot(train.Item_MRP, color = \"r\");","e6fbb6a7":"train.head()","d1485a66":"test.Item_Fat_Content.value_counts()","6380adf7":"test.Item_Fat_Content.replace(to_replace = [\"LF\", \"low fat\"], \n                              value = [\"Low Fat\", \"Low Fat\"], inplace=True)\ntest.Item_Fat_Content.replace(to_replace = [\"reg\"], value = [\"Regular\"], \n                              inplace = True)","6c10de82":"# Replacement of LF and low fat\ntrain.Item_Fat_Content.replace(to_replace = [\"LF\", \"low fat\"], \n                              value = [\"Low Fat\", \"Low Fat\"], inplace=True)\n","a55ec47f":"# Replacing reg into Regular\ntrain.Item_Fat_Content.replace(to_replace = [\"reg\"], value = [\"Regular\"], \n                              inplace = True)","8edb5479":"# Item Fat Content\ntrain.Item_Fat_Content.value_counts().plot(kind = \"bar\")","7f562590":"# Item Fat Content\ntrain.Item_Type.value_counts().plot(kind = \"bar\")\n\n# By Sns\nsns.countplot(x = \"Item_Type\", data = train)\nplt.xticks(rotation = 90)\nplt.show()","06f2e1f1":"sns.countplot(x = \"Item_Type\", data = train)\nplt.xticks(rotation = 90)\nplt.show()","68768dd0":"# Outlet _Identifier\ntrain.Outlet_Identifier.value_counts().plot(kind = \"bar\")","1c8b8900":"# Outlet _Size\ntrain.Outlet_Size.value_counts().plot(kind = \"bar\")","cc691f8e":"# Outlet_Type\ntrain.Outlet_Type.value_counts().plot(kind = \"bar\");","ffdbfcdf":"# Num vs Num\ntrain.head()","dcb7caa3":"plt.scatter(train.Item_Weight, train.Item_Outlet_Sales, color = \"magenta\");","0d48fe2a":"plt.figure(figsize = [10, 8])\nplt.scatter(train.Item_Visibility, train.Item_Outlet_Sales, color = \"red\");","30d8f073":"plt.scatter(train.Item_MRP, train.Item_Outlet_Sales, color = \"hotpink\")\n# Price Per Unit","1e442c55":"# Cat Vs Numerical\nsns.boxplot(train.Item_Fat_Content, train.Item_Outlet_Sales)","661c41f1":"train.groupby(\"Item_Fat_Content\")[\"Item_Outlet_Sales\"].describe().T\n# Hint: Refer Empirical Rule and Contradictory Rule - Chebyshev Inequality","1948b89d":"# Cat Vs Numerical\nplt.figure(figsize = [13,6])\nsns.boxplot(train.Item_Type, train.Item_Outlet_Sales)\nplt.xticks(rotation = 90)\nplt.title(\"Boxplot - Item Type Vs Sales\")\nplt.xlabel(\"Item Type\")\nplt.ylabel(\"Sales\")\nplt.show()","09dfaa53":"# Cat Vs Numerical\nplt.figure(figsize = [13,6])\nsns.boxplot(train.Outlet_Identifier, train.Item_Outlet_Sales)\nplt.xticks(rotation = 90)\nplt.title(\"Boxplot - Oultet ID Vs Sales\")\nplt.xlabel(\"Outlets\")\nplt.ylabel(\"Sales\")\nplt.show()","bd18b6f2":"# Outlet Size\n# Cat Vs Numerical\nplt.figure(figsize = [13,6])\nsns.boxplot(train.Outlet_Size, train.Item_Outlet_Sales)\nplt.xticks(rotation = 90)\nplt.title(\"Boxplot - Oultet Size Vs Sales\")\nplt.xlabel(\"Outlets\")\nplt.ylabel(\"Sales\")\nplt.show()","348e56ef":"pd.DataFrame(train.groupby(\"Outlet_Size\")[\"Outlet_Identifier\"].value_counts()).T","3c591fbb":"# Missing Value\ntrain.isnull().sum()[train.isnull().sum()!=0]","cef529b1":"weightna = train[train.Item_Weight.isnull()]","2134cd12":"weightna.head()","c8091448":"# Combining the Dataset\ncombined = pd.concat([train,test], ignore_index=True, sort = False)","03eedbfe":"combined.isnull().sum()[combined.isnull().sum()!=0]","a859ae26":"combined.Item_Fat_Content.value_counts()","59720705":"# Pattern\ntrain[train.Item_Identifier==\"FDX07\"][\"Item_Visibility\"].median()\n\n# Missing value Imputation\ntrain.loc[29, \"Item_Weight\"]= train[train.Item_Identifier==\"FDC14\"][\"Item_Weight\"].median()\n\n# Finding ID | np.where(train.Item_Weight.isna())\nids = train[pd.isnull(train.Item_Weight)][\"Item_Identifier\"]\nlocs = ids.index # Finding Index of the Item Weight Missing Values\n\n# Missing Value Final Code\nfor i in range(0, len(ids)):\n    train.loc[locs[i],\"Item_Weight\"]=train[train.Item_Identifier==ids.values[i]][\"Item_Weight\"].median()","38ded3c3":"# Missing Value Imputation - Item Weight | Lambda\ncombined[\"Item_Weight\"]=combined.groupby(\"Item_Identifier\")[\"Item_Weight\"].transform(lambda x:x.fillna(x.median()))","cc896646":"# Missing Values - Item Visibility\ncombined[\"Item_Visibility\"] = combined.groupby(\"Item_Identifier\")[\"Item_Visibility\"].transform(lambda x:x.replace(to_replace = 0,value = x.median()))","80c49e1e":"plt.figure(figsize = [10,7])\nplt.scatter(combined[\"Item_Visibility\"], combined[\"Item_Outlet_Sales\"], color = \"red\")","cf72b346":"combined[combined[\"Item_Identifier\"]==\"FDY07\"]","39b08ee5":"train[train.Item_Identifier==\"FDY07\"][\"Item_Visibility\"]","22127cfe":"# Imputation of FDY 07\ncombined.loc[(combined.Item_Identifier==\"FDY07\") & (combined[\"Item_Visibility\"]!=0), \n        \"Item_Visibility\"]=0.121848","8425f59c":"combined.head()","9e8dd9b5":"# Lets Deal with Tier 2\ntrain.loc[train[\"Outlet_Location_Type\"]=='Tier 2',\"Outlet_Size\"]=\"Small\"","1c061db6":"#train.loc[train[\"Outlet_Location_Type\"]=='Tier 1',\"Outlet_Size\"]","ddc9d7e0":"# Feature Engineering\ntrain.head()","03a073db":"# Size\npd.DataFrame(combined.groupby([\"Outlet_Type\", \"Outlet_Location_Type\"])\n             [\"Outlet_Size\"].value_counts())","1bb9cac7":"# Imputting Rule 2 Tier 2 and S1 - Small\ncombined.loc[[(combined[\"Outlet_Location_Type\"]==\"Tier 2\") & \n             (combined[\"Outlet_Type\"]==\"Supermarket Type1\"),\n            \"Outlet_Size\"]]=[\"Small\"]","47d64601":"# Imputting Rule 1 Tier 3 and Grocery Store - Medium\ncombined.loc[[(combined[\"Outlet_Location_Type\"]==\"Tier 3\") & \n             (combined[\"Outlet_Type\"]==\"Grocery Store\"),\n            \"Outlet_Size\"]]=[\"Medium\"]","15588086":"combined.isnull().sum()","c9fbe1ab":"combined.head()","4aedcdad":"# Price Per Unit\ncombined[\"Price_Per_Unit\"] = combined[\"Item_MRP\"]\/combined[\"Item_Weight\"]","eabe0093":"# Outlet Age\ncombined[\"Outlet_Age\"] = 2013 - combined.Outlet_Establishment_Year","b0bc8527":"combined.Item_Type.unique()","11ca7afe":"perishables = ['Dairy', 'Meat', 'Fruits and Vegetables','Breakfast',\n              'Breads','Seafood']","279a7998":"# Function\ndef badalde(x):\n    if(x in perishables):\n        return(\"Perishables\")\n    else:\n        return(\"Non Perishables\")\n    \ncombined.Item_Type.apply(badalde)","ba9e2389":"# np.where\nnp.isin(combined.Item_Type, perishables)","9781bc21":"np.where(combined.Item_Type.isin(perishables), \"Perishables\", \n         \"Non Perishables\")","8c86f6c0":"# Loop\nbadlale = []\nfor i in range(0, len(combined)):\n    if(combined.Item_Type[i] in perishables):\n        badlale.append(\"Perishables\")\n    else:\n        badlale.append(\"Non Perishables\")","896f2f7e":"combined[\"ItemType_Cat\"]=pd.Series(badlale)","a3231a74":"combined.head()","c30333b6":"str(combined.Item_Identifier[0])[:2]","f5120d55":"item_id =[]\nfor i in combined.Item_Identifier:\n    item_id.append(str(i)[:2])","bf80aa09":"combined[\"Item_IDS\"]=pd.Series(item_id)","70ad0f88":"combined.head()","759c5535":"plt.figure(figsize=[10,7])\nplt.scatter(combined[\"Price_Per_Unit\"], combined[\"Item_MRP\"], color = \"red\")","599c4850":"# Dropping the Columns\ncombined.columns","377a69c6":"newdata = combined.drop(['Item_Identifier','Item_MRP','Item_Type','Outlet_Identifier',\n       'Outlet_Establishment_Year',], axis = 1)","bd7262ab":"print(newdata.shape)","5bfc89f3":"# Applying OHE\ndummydata = pd.get_dummies(newdata)","73e4e581":"dummydata.head()","2cba59d6":"# Split the Data in Train and Test\nnewtrain = dummydata[0:train.shape[0]]","37fb5c0d":"# Test\nnewtest = dummydata[8523:dummydata.shape[0]]","8d08b15c":"newtest.drop(\"Item_Outlet_Sales\",axis = 1, inplace = True)","c7c95b79":"print(newtrain.shape)\nprint(newtest.shape)","90342ae0":"newtrain.columns","9efbffb8":"newtest.columns","53ccd34b":"# Scaling the Dataset\nfrom sklearn.preprocessing import StandardScaler\nnayasc = StandardScaler()","4478fa6f":"newtrain.drop(\"Item_Outlet_Sales\", axis = 1).shape","7437a5aa":"newtrain.columns[newtrain.columns!=\"Item_Outlet_Sales\"]","ec08ca24":"# Standardized Train Set\nscaledtrain = pd.DataFrame(nayasc.fit_transform(newtrain.drop(\"Item_Outlet_Sales\", axis = 1)), \n             columns = newtrain.columns[newtrain.columns!=\"Item_Outlet_Sales\"])","2f196464":"# Standardized Test Set\nscaledtest = pd.DataFrame(nayasc.transform(newtest), columns=newtest.columns)","7505f770":"# Random Forest\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nrf = RandomForestRegressor()\ngbm = GradientBoostingRegressor()","d73dcbec":"gbm.fit(scaledtrain, newtrain.Item_Outlet_Sales)","386f3b36":"gbm_pred = gbm.predict(scaledtest)","6315f84e":"# Submit on AV\nsolution = pd.DataFrame({\"Item_Identifier\":test[\"Item_Identifier\"],\n                        \"Outlet_Identifier\":test[\"Outlet_Identifier\"],\n                        \"Item_Outlet_Sales\":gbm_pred})","5b777158":"solution.to_csv(\"GBM Model.csv\", index = False) # 1164.224735564618","00065cd9":"rf.fit(scaledtrain, newtrain.Item_Outlet_Sales)","c1b175f0":"pred = rf.predict(scaledtest)","d39e2913":"# Submit on AV\nsolution = pd.DataFrame({\"Item_Identifier\":test[\"Item_Identifier\"],\n                        \"Outlet_Identifier\":test[\"Outlet_Identifier\"],\n                        \"Item_Outlet_Sales\":pred})","8e306a09":"solution.head()","999bcc43":"solution.to_csv(\"RandomF Model.csv\", index = False) # 1224.9984365775733.","4e33f02f":"Rule\n\n1. Tier 3 and Grocery Store - Medium\n2. Tier 2 and S1 - Small\n\nWhen Outlet Size is NA, then the Locations are Tier 2 and Tier 3 and 'Grocery Store', 'Supermarket Type1'","b860feb3":"## Data Pre-Processing Stage","20257bcb":"Less Frequency Count is of OUT10 and OUT19","f9f2e3be":"No pattern as such between the duo","d99cad7c":"### Exploratory Data Analysis\n\n1. Univariate Analysis\n\nThe columns in the dataset are either Numerical or categorical.\n\nFor Numerical Columns - Create a Histogram | Distplot\n\nHistogram is a Statistical Plot that tells me how is the Data Being Distrib uted. If it is not normal (Bell Shaped), then it would be skewed.\n\nFor Categorical Column, we create a BARPLOT\/Frequency\/Count Plot\n","fc3fe6c3":"### Steps to Modelling\n\n1. Problem Statement\n\n2. Hypothesis Generation\n\n3. Exploratory Data Analysis\n\n3.1. Univariate Analysis\n\n3.2. Bivariate or Multivariate Analysis\n\n3.3. Missing Values Treatment\n\n3.4. Outlier Identification\n\n3.5. Feature Engineering\n\n3.6. Standardization - This is the last Step of EDA popularly known as Data Pre-Processing Step.\n\n4. Applying Machine Learning Models","ab09034b":"Medium Outlets are the most visible outlets","304fd3b9":"### Feature Engg\n\n1. Price Per Unit - MRP\/Weight\n2. Item Type Category - Convert Item Type into Two CATs - Perishables and Non Perishables\n\n3. Outlet Age - 2013 - Est Year\n4. Extract Two Codes from ID","5fe2cd76":"Item_Outlet_Sales is Positively Skewed","71521877":"Visibility is Higher for lot of Items.","5b18a15e":"MRP appears to have 04 diff dist\/values. Needs exploring","bfa181ed":"Most of the Outlet Types are S","2e2a27fd":"Give upvote if you find it useful...\n\nand check my github: https:\/\/github.com\/swapnilbhange","a5b3cec2":"### Problem Statement\n\nSales Prediction for Big Mart Outlets The data scientists at BigMart have collected 2013 sales data for 1559 products across 10 stores in different cities. Also, certain attributes of each product and store have been defined. The aim is to build a predictive model and predict the sales of each product at a particular outlet.\n\nUsing this model, BigMart will try to understand the properties of products and outlets which play a key role in increasing sales.\n\nPlease note that the data may have missing values as some stores might not report all the data due to technical glitches. Hence, it will be required to treat them accordingly.\n\nData Dictionary We have train (8523) and test (5681) data set, train data set has both input and output variable(s). You need to predict the sales for test data set.","f0cc8cd2":"Lots of 0s in Visibility for which the sales exist.","5634847b":"### Bivariate Analysis\n\n1. Num vs Num - Scatterplot\n\n2. Cat Vs Num - Boxplot (Statistical Plot) | Violin Plot\n\n3. Cat Vs Cat - pd.crosstab | Table - Frequency"}}