{"cell_type":{"565898ae":"code","01d47c08":"code","64b5e951":"code","f18a6db0":"code","41329c2e":"code","67c6acf9":"code","8ca83248":"code","4df7f2f5":"code","a3b1d67a":"code","82d5ea8d":"code","9c1264d7":"code","51e66f98":"code","a5c37286":"code","7ff9f1f8":"code","9e2621e8":"code","4bcf92a9":"code","9212e300":"code","1f1e7bba":"code","d37cda65":"code","1c032f46":"code","73723247":"code","cd11570a":"code","42163500":"code","20049827":"code","19c207c6":"code","9cb5fa4f":"code","e027bf03":"code","7c39fe3f":"code","0ebecf90":"code","912bb2a1":"code","e306d2f5":"code","7ecc6e50":"code","5b9e5c69":"code","ca83ecec":"code","f9cc2974":"code","32f4ded1":"code","e37c4ac2":"code","bc0601fa":"code","c7ac9f97":"code","d5ca1aeb":"code","5207a5a9":"code","bbe45165":"code","c41a58de":"code","fa4456cb":"code","179447b9":"code","72a5ad5a":"markdown","38a3c6c0":"markdown","ceee4617":"markdown","177e7012":"markdown","8891d941":"markdown","08a1a974":"markdown","e0426fa5":"markdown","8920cae2":"markdown","a39126ba":"markdown","9b77b656":"markdown","b63b24f6":"markdown"},"source":{"565898ae":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, Dropout, BatchNormalization, Flatten, Dense, MaxPooling2D\nfrom keras.utils import to_categorical\nfrom keras.callbacks import EarlyStopping, ReduceLROnPlateau\nfrom keras.optimizers import Adam\n\nfrom sklearn.metrics import mean_absolute_error, confusion_matrix, classification_report\nfrom sklearn.model_selection import train_test_split","01d47c08":"df = pd.read_csv('..\/input\/age-gender-and-ethnicity-face-data-csv\/age_gender.csv')","64b5e951":"df.head()","f18a6db0":"df.describe().transpose()","41329c2e":"# Age\nsns.distplot(df['age']);","67c6acf9":"# Ethnicity\nsns.countplot(df['ethnicity']);","8ca83248":"# Gender\nsns.countplot(df['gender']);","4df7f2f5":"df['pixels'] = df['pixels'].map(lambda x: np.array(x.split(' '), dtype=np.float32).reshape(48, 48))","a3b1d67a":"# Plot some pictures\nfig, axes = plt.subplots(1, 5, figsize=(20, 10))\n\nfor i in range(5):\n    random_face = np.random.choice(len(df))\n    \n    age = df['age'][random_face]\n    ethnicity = df['ethnicity'][random_face]\n    gender = df['gender'][random_face]\n    \n    axes[i].set_title('Age: {0}, Ethnicity: {1}, Sex: {2}'.format(age, ethnicity, gender))\n    axes[i].imshow(df['pixels'][random_face])\n    axes[i].axis('off')\n","82d5ea8d":"# Reshape images for CNN\nX = np.array(df['pixels'].to_list())\nX_reshaped = X.reshape(X.shape[0], 48, 48, 1)","9c1264d7":"# Normalise images\nif np.max(X_reshaped) > 1: X_reshaped = X_reshaped \/ 255","51e66f98":"# Set some useful variables\ninput_shape = X_reshaped.shape[1:] \n\nn_epochs = 25\nbatch_size = 64","a5c37286":"# Set y\ny = df['age'].values","7ff9f1f8":"# Train test split\nX_train, X_test, y_train, y_test = train_test_split(X_reshaped, y, test_size=0.2, random_state=42)","9e2621e8":"age_model = Sequential()\n\nage_model.add(Conv2D(64, kernel_size=(3,3), input_shape=input_shape, activation='relu'))\nage_model.add(MaxPooling2D(pool_size=(2,2)))\nage_model.add(BatchNormalization())\n\nage_model.add(Conv2D(128, kernel_size=(3,3), activation='relu', padding='same'))\nage_model.add(Conv2D(128, kernel_size=(3,3), activation='relu'))\nage_model.add(MaxPooling2D(pool_size=(2,2)))\nage_model.add(Dropout(0.3))\nage_model.add(BatchNormalization())\n\nage_model.add(Conv2D(256, kernel_size=(3,3), activation='relu', padding='same'))\nage_model.add(Conv2D(256, kernel_size=(3,3), activation='relu'))\nage_model.add(MaxPooling2D(pool_size=(2,2)))\nage_model.add(Dropout(0.3))\nage_model.add(BatchNormalization())\n\nage_model.add(Conv2D(512, kernel_size=(3,3), activation='relu', padding='same'))\nage_model.add(MaxPooling2D(pool_size=(2,2)))\nage_model.add(Dropout(0.5))\nage_model.add(BatchNormalization())\n\nage_model.add(Flatten())\nage_model.add(Dense(128, activation='relu'))\nage_model.add(Dropout(0.4))\nage_model.add(Dense(1))\n\nage_model.compile(optimizer='adam', loss='mse')\n\nage_model.summary()","4bcf92a9":"# Callbacks for age model\ncallbacks = [EarlyStopping(patience=4, monitor='val_loss', mode='min'), \n             ReduceLROnPlateau(patience=2, verbose=1)]","9212e300":"history = age_model.fit(X_train, y_train, \n                        epochs=n_epochs,\n                        batch_size=batch_size,\n                        callbacks=callbacks,\n                        validation_data=(X_test, y_test))","1f1e7bba":"pd.DataFrame(history.history).plot();","d37cda65":"valid_score = age_model.evaluate(X_test, y_test, verbose=1)","1c032f46":"# Make predictions \ny_pred = age_model.predict(X_test)","73723247":"# Man absolute error\nprint(\"MAE: {}\".format(mean_absolute_error(y_test, y_pred)))","cd11570a":"plt.figure(figsize=(8, 5))\nplt.scatter(y_pred, y_test);","42163500":"# Set y\ny = df['gender'].values\n\n# Train test split\nX_train, X_test, y_train, y_test = train_test_split(X_reshaped, y, test_size=0.2, random_state=42)","20049827":"gender_model = Sequential()\n\ngender_model.add(Conv2D(64, kernel_size=(3,3), input_shape=input_shape, activation='relu'))\ngender_model.add(MaxPooling2D(pool_size=(2,2)))\ngender_model.add(BatchNormalization())\n\ngender_model.add(Conv2D(128, kernel_size=(3,3), activation='relu'))\n#gender_model.add(Conv2D(128, kernel_size=(3,3), activation='relu'))\ngender_model.add(MaxPooling2D(pool_size=(2,2)))\ngender_model.add(Dropout(0.4))\ngender_model.add(BatchNormalization())\n\ngender_model.add(Conv2D(256, kernel_size=(3,3), activation='relu'))\ngender_model.add(Conv2D(256, kernel_size=(3,3), activation='relu'))\ngender_model.add(MaxPooling2D(pool_size=(2,2)))\ngender_model.add(Dropout(0.5))\ngender_model.add(BatchNormalization())\n\ngender_model.add(Flatten())\n\ngender_model.add(Dense(64, activation='relu'))\ngender_model.add(Dropout(0.4))\n\ngender_model.add(Dense(1, activation='sigmoid')) #For binary classification activation function is sigmoid \n\ngender_model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy']) #...and loss function is binary_crossentropy\n\ngender_model.summary()","19c207c6":"# Callbacks for gender model\ncallbacks = [EarlyStopping(patience=4, monitor='val_accuracy', mode='max'), \n              ReduceLROnPlateau(patience=2, verbose=1)]","9cb5fa4f":"history = gender_model.fit(X_train, y_train, \n                           epochs=n_epochs,\n                           batch_size=batch_size,\n                           callbacks=callbacks,\n                           validation_data=(X_test, y_test))","e027bf03":"# Metrics\nvalid_score = gender_model.evaluate(X_test, y_test, verbose=1)\nprint('Accuracy for test set: {0}'.format(valid_score[1]))","7c39fe3f":"y_pred = gender_model.predict_classes(X_test)","0ebecf90":"print(classification_report(y_test, y_pred))","912bb2a1":"# Confusion matrix\ncm = confusion_matrix(y_test, y_pred)\nsns.heatmap(cm, cmap='Greens', cbar=False, annot=True, fmt='d');","e306d2f5":"y_pred = y_pred.reshape(y_pred.shape[0])","7ecc6e50":"# Model predict is female, but actually it's male\n\nX_fp = X_test[(y_pred == 1) & (y_test == 0)] \n\nfig, axes = plt.subplots(1, 5, figsize=(20, 10))\n\nfor i in range(5):\n    \n    random_choice = np.random.choice(len(X_fp))\n    \n    axes[i].imshow(X_fp[random_choice].reshape(48, 48))\n    axes[i].axis('off')","5b9e5c69":"# Model predict is male, but actually it's female\n\nX_fn = X_test[(y_pred == 0) & (y_test == 1)]  \n\nfig, axes = plt.subplots(1, 5, figsize=(20, 10))\n\nfor i in range(5):\n    \n    random_choice = np.random.choice(len(X_fn))\n    axes[i].imshow(X_fn[random_choice].reshape(48, 48))\n    axes[i].axis('off')","ca83ecec":"# Set y\ny = df['ethnicity'].values\n\n# Multiclass problem transform to one_hot_encoding\ny = to_categorical(y, 5)\n\n# Train test split\nX_train, X_test, y_train, y_test = train_test_split(X_reshaped, y, test_size=0.2, random_state=42)","f9cc2974":"eth_model = Sequential()\n\neth_model.add(Conv2D(64, kernel_size=(3,3), input_shape=input_shape, activation='relu'))\neth_model.add(MaxPooling2D(pool_size=(2,2)))\neth_model.add(BatchNormalization())\n\neth_model.add(Conv2D(128, kernel_size=(3,3), activation='relu'))\neth_model.add(MaxPooling2D(pool_size=(2,2)))\neth_model.add(BatchNormalization())\n\neth_model.add(Conv2D(256, kernel_size=(3,3), activation='relu'))\neth_model.add(MaxPooling2D(pool_size=(2,2)))\neth_model.add(Dropout(0.5))\neth_model.add(BatchNormalization())\n\neth_model.add(Flatten())\neth_model.add(Dense(128, activation='relu'))\neth_model.add(Dropout(0.5))\neth_model.add(Dense(5, activation='softmax')) #For multiclass classification activation function is softmax \n\neth_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy']) #...and loss function is categorical_crossentropy\n\neth_model.summary()","32f4ded1":"# Callbacks for ethnicity model\ncallbacks = [EarlyStopping(patience=4, monitor='val_accuracy', mode='max'), \n             ReduceLROnPlateau(patience=2, verbose=1)]","e37c4ac2":"history = eth_model.fit(X_train, y_train, \n                         epochs=n_epochs,\n                         batch_size=batch_size,\n                         callbacks=callbacks,\n                         validation_data=(X_test, y_test))","bc0601fa":"valid_score = eth_model.evaluate(X_test, y_test, verbose=1)","c7ac9f97":"y_pred = eth_model.predict_classes(X_test)","d5ca1aeb":"# Convert to 0 to 4 scale \ny_test_labels = [np.argmax(i) for i in y_test]","5207a5a9":"print(classification_report(y_test_labels, y_pred))","bbe45165":"# Confusion matrix\ncm = confusion_matrix(y_test_labels, y_pred)\n\nnp.fill_diagonal(cm, 0) #Fill diagonal with 0 for better visualisation\nsns.heatmap(cm, annot=True, fmt='d', cbar=False, cmap='Greens');","c41a58de":"def face_prediction(image):\n    \n    x = image.reshape(1, 48, 48, 1)\n    x = x \/ 255\n    \n    age_predict = int(age_model.predict(x))\n    gender_predict = int(gender_model.predict_classes(x))\n    ethnicity_predict = int(eth_model.predict_classes(x))\n    \n    gender = {0: 'Male', 1: 'Female'}\n    eth_group = {0: 'White', 1: 'Black', 2: 'Asian', 3: 'Indian', 4: 'Other'} \n    \n    plt.imshow(image)\n    plt.title('{0}, {1}, {2}'.format(age_predict, gender[gender_predict], eth_group[ethnicity_predict]))\n    plt.axis('off')","fa4456cb":"# Final check\nrandom_face = np.random.choice(len(df))\n\nage = df['age'][random_face]\nethnicity = df['ethnicity'][random_face]\ngender = df['gender'][random_face]\n\nplt.imshow(df['pixels'][random_face])\nplt.title('Age: {0}, Sex: {1}, Ethnicity: {2},'.format(age, gender, ethnicity))\nplt.axis('off');","179447b9":"# Model prediction \nface_prediction(df['pixels'][random_face])","72a5ad5a":"Actually imaeges in dataset are in string format, let's transform it in more useful type of data.","38a3c6c0":"## Ethnicity prediction","ceee4617":"So let's start with age prediction. ","177e7012":"So, there are three targets:\n\nAge: range from 1 to 116 <br>\nEthnicity: 0 - White, 1 - Black, 2 - Asian, 3 - Indian, 4 - Other  <br>\nGender: 0 - male, 1 - female <br>","8891d941":"I will construct three model and use three targets:\n* Age\n* Gender\n* Ethnicity\n\nAfter training models I'm going to create a function which will predict these three parameters by photo.","08a1a974":"## Gender prediction","e0426fa5":"## Age prediction","8920cae2":"So, on many photos difference between genders are not so clear.","a39126ba":"## CNN","9b77b656":"I suppose big part of this mistakes is children. Let's see some examples where's model had made mistake.","b63b24f6":"So, mean absolute error around 5.5 years it's not so super result considering mean age is 33, it's about 17%."}}