{"cell_type":{"baed4d60":"code","115fd49f":"code","02520f19":"code","3d708c82":"code","182bf141":"code","2fec558d":"code","36d73e0b":"code","a9817ea5":"code","c2f9d2df":"code","3626c8b0":"code","d30a61fc":"code","abb283ea":"code","69b683c9":"code","8133e789":"code","571c4e4c":"code","f21b4a1e":"code","c80e5ad9":"code","f2cbc634":"code","7dfce211":"code","15fc1488":"code","34ea0556":"code","5cf6f1ea":"code","09e260fb":"code","764927ef":"code","4883c932":"code","396aba8e":"code","cf2737de":"code","587916e4":"code","0b6184fc":"code","c60751ad":"code","95d78c58":"markdown","ec7083ad":"markdown","1d169a17":"markdown","8e890657":"markdown","f2426200":"markdown","a94ea5e8":"markdown"},"source":{"baed4d60":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","115fd49f":"train_path  = \"..\/input\/kaggledatafest\/train.csv\"\ntrain = pd.read_csv(train_path)\npd.set_option('display.max_columns', 50)\npd.set_option('display.max_rows', 50)","02520f19":"train.sample(10)","3d708c82":"train.Price_Category.value_counts().to_frame()","182bf141":"train.describe()","2fec558d":"#Property Type\ntrain.Type.value_counts().to_frame().rename(columns={0:\"Unique Values\"}).style.background_gradient(cmap=\"plasma\")","36d73e0b":"#Baths per property\ntrain.Baths.value_counts().to_frame().rename(columns={0:\"Unique Values\"}).style.background_gradient(cmap=\"plasma\")","a9817ea5":"#Bedrooms per property\ntrain['Bedroom(s)'].value_counts().to_frame().rename(columns={0:\"Unique Values\"}).style.background_gradient(cmap=\"plasma\")","c2f9d2df":"#Split area column\ntrain[['Area_Number','Measure_Unit']] = train.Area.str.split(expand=True)","3626c8b0":"train.head(3)","d30a61fc":"train.Measure_Unit.value_counts().to_frame()","abb283ea":"def kanal_to_marla(kanal):\n    return kanal * 20","69b683c9":"train.Area_Number = pd.to_numeric(train.Area_Number)","8133e789":"kanal = train.loc[(train.Measure_Unit == 'Kanal')]\nkanal","571c4e4c":"train.Popular.unique()","f21b4a1e":"kanal['new_marla'] = train.apply(lambda kanal: kanal_to_marla(kanal.Area_Number), axis=1)","c80e5ad9":"kanal.sample(50)","f2cbc634":"#Split locaction column\ntrain[['Town','City', 'Province']] = train.Location.str.split(\",\",expand=True)","7dfce211":"train.head(3)","15fc1488":"train['Source'] = train.Source.str.replace(\"[0-9]\",\"\").str.replace(\"-\",\"\")","34ea0556":"train.Rooms[13][11]","5cf6f1ea":"# Explode rooms\ntrain = train.assign(Rooms_detail=train.Rooms.str.split(\",\")).explode(\"Rooms\")","09e260fb":"train.head(3)","764927ef":"train.Rooms.unique","4883c932":"train['Bedrooms'] = train.Rooms_detail[78][0]\ntrain['Bathrooms'] = train.Rooms_detail[78][1]","396aba8e":"count = 0\nwhile count != 3082:\n    if train.Rooms_detail[count] == None:\n        pass\n    else:\n        try:        \n            train['Bedrooms'][count] = train.Rooms_detail[count][0].strip()\n            train['Bathrooms'][count] = train.Rooms_detail[count][1].strip()\n            #train['Bedrooms'][count] = train.Rooms[count][11]\n        except:\n            pass\n    count += 1 ","cf2737de":"train.sample(45)","587916e4":"train['Bedrooms'] = train.Bedrooms.str.replace(\"Bedrooms: \",\"\")\ntrain['Bathrooms'] = train.Bathrooms.str.replace(\"Bathrooms: \",\"\")","0b6184fc":"train.drop(columns=['Bedrooms', 'Bathrooms'])","c60751ad":"'''\nimport h2o\nfrom h2o.estimators import H2OGradientBoostingEstimator\nh2o.init()\n'''","95d78c58":"Here we can observe its an imbalanced multiclass classification problem.","ec7083ad":"Here's a quick noteook. I hope this will be useful for starters.\n\nFeature Engineering Ideas:\n\n1. Explode Rooms column.\n2. Convert kanals to marlas or marlas to kanals. Standardiation.\n3. I think by clustering on the basis of town that would be reasonable feature too.  \n\n\nFor predictions most likely XGBoost, Cat boost, GLM, Random Forest, stacked ensamble models will be useful.\n\nupvote if you find this useful.\n\nPlease feel free to fork and edit this notebook.\nI would love to see what you build upon this.\nThank you.","1d169a17":"### Conversion Formulas\n\n**Kanal --> Marla**\n\n1 kanal = 20 Marlas = 5445 Sq. Ft.\n\nMarlas = 1 Kanal * 20 Marlas\n\n**Kanal --> Sq.Ft**\n\nSq.Ft = 1 kanal * 5445 Sq.Ft.","8e890657":"![Zameen.com](https:\/\/www.technologytimes.pk\/wp-content\/uploads\/2018\/07\/Islamabad-Office-Outside-2.jpg)","f2426200":"# H2O GBM","a94ea5e8":"Multi-class Classification problem to predict \"price-categories\" of the property."}}