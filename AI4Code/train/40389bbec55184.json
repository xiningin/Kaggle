{"cell_type":{"8cb23148":"code","a4adf3fd":"code","0b3ae2e3":"code","9817606d":"code","11d6c415":"code","500f99d8":"code","ac9c424d":"code","37caa6f3":"code","ef6202d0":"code","a5b57cc8":"code","08c0df22":"code","bc8093d3":"code","fc304ccd":"code","182d4604":"code","4eb9f04f":"code","4bcd0e31":"code","3a89ac8f":"code","48e95ad4":"code","7b2d404b":"code","35933adc":"code","fa2a56e3":"code","ef5fddca":"code","2610d1f6":"code","ee7bf5cf":"code","4377b03a":"code","0b322eeb":"code","921d972f":"code","ef795fd5":"code","760d35f7":"code","20f9fe41":"code","1854a363":"code","c705e9a5":"code","2311ea16":"code","997af5ff":"code","0701e4db":"code","6d3976df":"code","3045749a":"code","c301f7a0":"code","4eebd466":"code","6f503a8f":"code","ec873c1b":"code","663435a0":"code","9dea6e28":"code","0739cec9":"code","05d1c7bb":"code","02afd5de":"code","f0040057":"code","d83eb628":"code","bc5d8beb":"code","02975011":"code","04a719cd":"code","a01f9990":"code","3015d2bb":"code","9e737980":"code","014ed148":"code","ef9e1ba6":"code","3060561f":"code","f8ac5041":"code","0ade1afc":"code","b9fb62b4":"code","28cc2f29":"code","10418427":"code","45b7f15c":"code","37a685c1":"code","64bf2364":"code","ba7e60da":"code","2e15dd12":"code","7cafd7a0":"code","4be47d3b":"code","9842004b":"code","b4416664":"code","403e8c47":"code","61648ab8":"code","fdd65aab":"code","8f81091e":"markdown","18c678f4":"markdown","178d92d9":"markdown","e3ce0499":"markdown","87a8a76c":"markdown","76e9f7a4":"markdown","116d30f0":"markdown","c7fcb386":"markdown","f1d44a34":"markdown","a6d35937":"markdown","a35a67b3":"markdown","e487a884":"markdown","87a5c549":"markdown","a6eb51e0":"markdown","dbf62082":"markdown","d10f994c":"markdown","1d4b9053":"markdown","d406d88a":"markdown","9bca3582":"markdown","5ea29c50":"markdown","325b7b3a":"markdown","a09c78b2":"markdown","0d19d784":"markdown","a2f0f28d":"markdown","13ae7e69":"markdown","f6f7820e":"markdown","f21ed10d":"markdown","05b714a1":"markdown","0a6a931e":"markdown","dd566b94":"markdown","ec2b6309":"markdown","6d744c78":"markdown","e521dda2":"markdown","953973e1":"markdown","b24d96ce":"markdown","7b436281":"markdown","463398ff":"markdown","2d96a6e3":"markdown","a1af29e6":"markdown","e1cd7980":"markdown"},"source":{"8cb23148":"import pandas as pd\nimport numpy as np\nimport os\nimport matplotlib\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\nimport seaborn as sns\nsns.set(style='whitegrid')\n\nfrom wordcloud import WordCloud\n\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.decomposition import PCA, TruncatedSVD\nfrom sklearn.metrics import classification_report,confusion_matrix\n\nfrom collections import defaultdict\nfrom collections import Counter\n\nimport re\nimport gensim\nimport string\n\nfrom tqdm import tqdm\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.models import Sequential\nfrom keras.layers import Embedding, LSTM,Dense, SpatialDropout1D, Dropout\nfrom keras.initializers import Constant\n\nimport tensorflow as tf\n\nimport warnings\nwarnings.simplefilter('ignore')","a4adf3fd":"df=pd.read_csv('..\/input\/nlp-getting-started\/train.csv')\ndf_test=pd.read_csv('..\/input\/nlp-getting-started\/test.csv')\nsample_submission=pd.read_csv('..\/input\/nlp-getting-started\/sample_submission.csv')","0b3ae2e3":"df.shape, df_test.shape","9817606d":"df","11d6c415":"df.loc[:,['text','target']]","500f99d8":"df.info()","ac9c424d":"df.isnull().sum()","37caa6f3":"df.target.value_counts()","ef6202d0":"df2=df.copy(deep=True)\npie1=pd.DataFrame(df2['target'].replace(1,'disaster').replace(0,'non-disaster').value_counts())\npie1.reset_index(inplace=True)\npie1.plot(kind='pie', title='Pie chart of Disaster\/Non-disaster tweets',y = 'target', \n          autopct='%1.1f%%', shadow=False, labels=pie1['index'], legend = False, fontsize=14, figsize=(12,12))","a5b57cc8":"f, (ax1, ax2,) = plt.subplots(1,2,figsize=(25,8))\n\nax1.hist(df[df['target'] == 0]['text'].str.split().map(lambda x: len(x)), bins=29, color='b')\nax1.set_title('Non-disaster tweets')\n\nax2.hist(df[df['target'] == 1]['text'].str.split().map(lambda x: len(x)), bins=29, color='r')\nax2.set_title('Disaster tweets')\n\nf.suptitle('Histogram number of words in tweets')","08c0df22":"df['text'].str.split().map(lambda x: len(x)).max()","bc8093d3":"dfff=pd.DataFrame(df['text'].str.split().map(lambda x: len(x))>=10)\nprint('Number of sentences which contain more than 10 words: ', dfff.loc[dfff['text']==True].shape[0])\nprint(' ')\ndfff=pd.DataFrame(df['text'].str.split().map(lambda x: len(x))>=15)\nprint('Number of sentences which contain more than 15 words: ', dfff.loc[dfff['text']==True].shape[0])\nprint(' ')\ndfff=pd.DataFrame(df['text'].str.split().map(lambda x: len(x))>=20)\nprint('Number of sentences which contain more than 20 words: ', dfff.loc[dfff['text']==True].shape[0])\nprint(' ')\ndfff=pd.DataFrame(df['text'].str.split().map(lambda x: len(x))>=25)\nprint('Number of sentences which contain more than 25 words: ', dfff.loc[dfff['text']==True].shape[0])\nprint(' ')\ndfff=pd.DataFrame(df['text'].str.split().map(lambda x: len(x))==31)\nprint('Number of sentences which contain 31 words: ', dfff.loc[dfff['text']==True].shape[0])\nprint(' ')","fc304ccd":"print(df.loc[954,'text'])\nprint(' ')\nprint(df.loc[4432,'text'])\nprint(' ')\nprint(df.loc[5005,'text'])","182d4604":"example=\"New competition launched :https:\/\/www.kaggle.com\/c\/nlp-getting-started\"","4eb9f04f":"def remove_URL(text):\n    url = re.compile(r'https?:\/\/\\S+|www\\.\\S+')\n    return url.sub(r'',text)\n\nremove_URL(example)","4bcd0e31":"df['text']=df['text'].apply(lambda x : remove_URL(x))","3a89ac8f":"df_test['text']=df_test['text'].apply(lambda x : remove_URL(x))","48e95ad4":"example = \"\"\"<div>\n<h1>Real or Fake<\/h1>\n<p>Kaggle <\/p>\n<a href=\"https:\/\/www.kaggle.com\/c\/nlp-getting-started\">getting started<\/a>\n<\/div>\"\"\"","7b2d404b":"def remove_html(text):\n    html=re.compile(r'<.*?>')\n    return html.sub(r'',text)\n    \nprint(remove_html(example))","35933adc":"df['text']=df['text'].apply(lambda x : remove_html(x))","fa2a56e3":"df_test['text']=df_test['text'].apply(lambda x : remove_html(x))","ef5fddca":"# Reference : https:\/\/gist.github.com\/slowkow\/7a7f61f495e3dbb7e3d767f97bd7304b\ndef remove_emoji(text):\n    emoji_pattern = re.compile(\"[\"\n                           u\"\\U0001F600-\\U0001F64F\"  # emoticons\n                           u\"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs\n                           u\"\\U0001F680-\\U0001F6FF\"  # transport & map symbols\n                           u\"\\U0001F1E0-\\U0001F1FF\"  # flags (iOS)\n                           u\"\\U00002702-\\U000027B0\"\n                           u\"\\U000024C2-\\U0001F251\"\n                           \"]+\", flags=re.UNICODE)\n    return emoji_pattern.sub(r'', text)\n\nremove_emoji(\"Omg another Earthquake \ud83d\ude14\ud83d\ude14\")","2610d1f6":"df['text']=df['text'].apply(lambda x: remove_emoji(x))","ee7bf5cf":"df_test['text']=df_test['text'].apply(lambda x: remove_emoji(x))","4377b03a":"def cleaner(tweet):\n  # Acronyms and miswritten words\n  tweet = re.sub(r\"Typhoon-Devastated\", \"typhoon devastated\", tweet)\n  tweet = re.sub(r\"TyphoonDevastated\", \"typhoon devastated\", tweet)\n  tweet = re.sub(r\"typhoondevastated\", \"typhoon devastated\", tweet)\n  tweet = re.sub(r\"MH370\", \"Malaysia Airlines Flight\", tweet)\n  tweet = re.sub(r\"MH\", \"Malaysia Airlines Flight\", tweet)\n  tweet = re.sub(r\"mh370\", \"Malaysia Airlines Flight\", tweet)\n  tweet = re.sub(r\"year-old\", \"years old\", tweet)\n  tweet = re.sub(r\"yearold\", \"years old\", tweet)\n  tweet = re.sub(r\"yr old\", \"years old\", tweet)\n  tweet = re.sub(r\"PKK\", \"Kurdistan Workers Party\", tweet)\n  tweet = re.sub(r\"MP\", \"madhya pradesh\", tweet)\n  tweet = re.sub(r\"rly\", \"railway\", tweet)\n  tweet = re.sub(r\"CDT\", \"Central Daylight Time\", tweet)\n  tweet = re.sub(r\"sensorsenso\", \"sensor senso\", tweet)\n  tweet = re.sub(r\"pm\", \"\", tweet)\n  tweet = re.sub(r\"PM\", \"\", tweet)\n  tweet = re.sub(r\"nan\", \" \", tweet)\n  tweet = re.sub(r\"terrorismturn\", \"terrorism turn\", tweet)\n  tweet = re.sub(r\"epicente\", \"epicenter\", tweet)\n  tweet = re.sub(r\"epicenterr\", \"epicenter\", tweet)\n  tweet = re.sub(r\"WAwildfire\", \"Washington Wildfire\", tweet)\n  tweet = re.sub(r\"prebreak\", \"pre break\", tweet)\n  tweet = re.sub(r\"nowplaying\", \"now playing\", tweet)\n  tweet = re.sub(r\"RT\", \"retweet\", tweet)\n  tweet = re.sub(r\"EbolaOutbreak\", \"Ebola Outbreak\", tweet)\n  tweet = re.sub(r\"LondonFire\", \"London Fire\", tweet)\n  tweet = re.sub(r\"IDFire\", \"Idaho Fire\", tweet)\n  tweet = re.sub(r\"withBioterrorism&use\", \"with Bioterrorism & use\", tweet)\n  tweet = re.sub(r\"NASAHurricane\", \"NASA Hurricane\", tweet)\n  tweet = re.sub(r\"withweapons\", \"with weapons\", tweet)\n  tweet = re.sub(r\"NuclearPower\", \"Nuclear Power\", tweet)\n  tweet = re.sub(r\"WhiteTerrorism\", \"White Terrorism\", tweet)\n  tweet = re.sub(r\"MyanmarFlood\", \"Myanmar Flood\", tweet)\n  tweet = re.sub(r\"ExtremeWeather\", \"Extreme Weather\", tweet)\n\n  # Special characters\n  tweet = re.sub(r\"%20\", \" \", tweet)\n  tweet = re.sub(r\"%\", \" \", tweet)\n  tweet = re.sub(r\"@\", \" \", tweet)\n  tweet = re.sub(r\"#\", \" \", tweet)\n  tweet = re.sub(r\"'\", \" \", tweet)\n  tweet = re.sub(r\"\\x89\u00fb_\", \" \", tweet)\n  tweet = re.sub(r\"\\x89\u00fb\u00f2\", \" \", tweet)\n  tweet = re.sub(r\"16yr\", \"16 year\", tweet)\n  tweet = re.sub(r\"re\\x89\u00fb_\", \" \", tweet)\n  tweet = re.sub(r\"\\x89\u00fb\", \" \", tweet)\n  tweet = re.sub(r\"\\x89\u00db\", \" \", tweet)\n  tweet = re.sub(r\"re\\x89\u00db\", \"re \", tweet)\n  tweet = re.sub(r\"re\\x89\u00fb\", \"re \", tweet)\n  tweet = re.sub(r\"\\x89\u00fb\u00aa\", \"'\", tweet)\n  tweet = re.sub(r\"\\x89\u00fb\", \" \", tweet)\n  tweet = re.sub(r\"\\x89\u00fb\u00f2\", \" \", tweet)\n  tweet = re.sub(r\"\\x89\u00db_\", \"\", tweet)\n  tweet = re.sub(r\"\\x89\u00db\u00d2\", \"\", tweet)\n  tweet = re.sub(r\"\\x89\u00db\u00d3\", \"\", tweet)\n  tweet = re.sub(r\"\\x89\u00db\u00cfWhen\", \"When\", tweet)\n  tweet = re.sub(r\"\\x89\u00db\u00cf\", \"\", tweet)\n  tweet = re.sub(r\"China\\x89\u00db\u00aas\", \"China's\", tweet)\n  tweet = re.sub(r\"let\\x89\u00db\u00aas\", \"let's\", tweet)\n  tweet = re.sub(r\"\\x89\u00db\u00f7\", \"\", tweet)\n  tweet = re.sub(r\"\\x89\u00db\u00aa\", \"\", tweet)\n  tweet = re.sub(r\"\\x89\u00db\\x9d\", \"\", tweet)\n  tweet = re.sub(r\"\u00e5_\", \"\", tweet)\n  tweet = re.sub(r\"\\x89\u00db\u00a2\", \"\", tweet)\n  tweet = re.sub(r\"\\x89\u00db\u00a2\u00e5\u00ca\", \"\", tweet)\n  tweet = re.sub(r\"from\u00e5\u00cawounds\", \"from wounds\", tweet)\n  tweet = re.sub(r\"\u00e5\u00ca\", \"\", tweet)\n  tweet = re.sub(r\"\u00e5\u00c8\", \"\", tweet)\n  tweet = re.sub(r\"Jap\u00cc_n\", \"Japan\", tweet)    \n  tweet = re.sub(r\"\u00cc\u00a9\", \"e\", tweet)\n  tweet = re.sub(r\"\u00e5\u00a8\", \"\", tweet)\n  tweet = re.sub(r\"Suru\u00cc\u00a4\", \"Suruc\", tweet)\n  tweet = re.sub(r\"\u00e5\u00c7\", \"\", tweet)\n  tweet = re.sub(r\"\u00e5\u00a33million\", \"3 million\", tweet)\n  tweet = re.sub(r\"\u00e5\u00c0\", \"\", tweet)\n\n  # Contractions\n  tweet = re.sub(r\"he's\", \"he is\", tweet)\n  tweet = re.sub(r\"there's\", \"there is\", tweet)\n  tweet = re.sub(r\"We're\", \"We are\", tweet)\n  tweet = re.sub(r\"That's\", \"That is\", tweet)\n  tweet = re.sub(r\"won't\", \"will not\", tweet)\n  tweet = re.sub(r\"they're\", \"they are\", tweet)\n  tweet = re.sub(r\"Can't\", \"Cannot\", tweet)\n  tweet = re.sub(r\"wasn't\", \"was not\", tweet)\n  tweet = re.sub(r\"don\\x89\u00db\u00aat\", \"do not\", tweet)\n  tweet = re.sub(r\"aren't\", \"are not\", tweet)\n  tweet = re.sub(r\"isn't\", \"is not\", tweet)\n  tweet = re.sub(r\"What's\", \"What is\", tweet)\n  tweet = re.sub(r\"haven't\", \"have not\", tweet)\n  tweet = re.sub(r\"hasn't\", \"has not\", tweet)\n  tweet = re.sub(r\"There's\", \"There is\", tweet)\n  tweet = re.sub(r\"He's\", \"He is\", tweet)\n  tweet = re.sub(r\"It's\", \"It is\", tweet)\n  tweet = re.sub(r\"You're\", \"You are\", tweet)\n  tweet = re.sub(r\"I'M\", \"I am\", tweet)\n  tweet = re.sub(r\"Im\", \"I am\", tweet)\n  tweet = re.sub(r\"shouldn't\", \"should not\", tweet)\n  tweet = re.sub(r\"wouldn't\", \"would not\", tweet)\n  tweet = re.sub(r\"i'm\", \"I am\", tweet)\n  tweet = re.sub(r\"I\\x89\u00db\u00aam\", \"I am\", tweet)\n  tweet = re.sub(r\"I'm\", \"I am\", tweet)\n  tweet = re.sub(r\"Isn't\", \"is not\", tweet)\n  tweet = re.sub(r\"Here's\", \"Here is\", tweet)\n  tweet = re.sub(r\"you've\", \"you have\", tweet)\n  tweet = re.sub(r\"you\\x89\u00db\u00aave\", \"you have\", tweet)\n  tweet = re.sub(r\"we're\", \"we are\", tweet)\n  tweet = re.sub(r\"what's\", \"what is\", tweet)\n  tweet = re.sub(r\"couldn't\", \"could not\", tweet)\n  tweet = re.sub(r\"we've\", \"we have\", tweet)\n  tweet = re.sub(r\"it\\x89\u00db\u00aas\", \"it is\", tweet)\n  tweet = re.sub(r\"doesn\\x89\u00db\u00aat\", \"does not\", tweet)\n  tweet = re.sub(r\"It\\x89\u00db\u00aas\", \"It is\", tweet)\n  tweet = re.sub(r\"Here\\x89\u00db\u00aas\", \"Here is\", tweet)\n  tweet = re.sub(r\"who's\", \"who is\", tweet)\n  tweet = re.sub(r\"I\\x89\u00db\u00aave\", \"I have\", tweet)\n  tweet = re.sub(r\"y'all\", \"you all\", tweet)\n  tweet = re.sub(r\"can\\x89\u00db\u00aat\", \"cannot\", tweet)\n  tweet = re.sub(r\"would've\", \"would have\", tweet)\n  tweet = re.sub(r\"it'll\", \"it will\", tweet)\n  tweet = re.sub(r\"we'll\", \"we will\", tweet)\n  tweet = re.sub(r\"wouldn\\x89\u00db\u00aat\", \"would not\", tweet)\n  tweet = re.sub(r\"We've\", \"We have\", tweet)\n  tweet = re.sub(r\"he'll\", \"he will\", tweet)\n  tweet = re.sub(r\"Y'all\", \"You all\", tweet)\n  tweet = re.sub(r\"Weren't\", \"Were not\", tweet)\n  tweet = re.sub(r\"Didn't\", \"Did not\", tweet)\n  tweet = re.sub(r\"they'll\", \"they will\", tweet)\n  tweet = re.sub(r\"they'd\", \"they would\", tweet)\n  tweet = re.sub(r\"DON'T\", \"DO NOT\", tweet)\n  tweet = re.sub(r\"That\\x89\u00db\u00aas\", \"That is\", tweet)\n  tweet = re.sub(r\"they've\", \"they have\", tweet)\n  tweet = re.sub(r\"i'd\", \"I would\", tweet)\n  tweet = re.sub(r\"should've\", \"should have\", tweet)\n  tweet = re.sub(r\"You\\x89\u00db\u00aare\", \"You are\", tweet)\n  tweet = re.sub(r\"where's\", \"where is\", tweet)\n  tweet = re.sub(r\"Don\\x89\u00db\u00aat\", \"Do not\", tweet)\n  tweet = re.sub(r\"we'd\", \"we would\", tweet)\n  tweet = re.sub(r\"i'll\", \"I will\", tweet)\n  tweet = re.sub(r\"weren't\", \"were not\", tweet)\n  tweet = re.sub(r\"They're\", \"They are\", tweet)\n  tweet = re.sub(r\"Can\\x89\u00db\u00aat\", \"Cannot\", tweet)\n  tweet = re.sub(r\"you\\x89\u00db\u00aall\", \"you will\", tweet)\n  tweet = re.sub(r\"I\\x89\u00db\u00aad\", \"I would\", tweet)\n  tweet = re.sub(r\"let's\", \"let us\", tweet)\n  tweet = re.sub(r\"it's\", \"it is\", tweet)\n  tweet = re.sub(r\"can't\", \"can not\", tweet)\n  tweet = re.sub(r\"cant\", \"can not\", tweet)\n  tweet = re.sub(r\"don't\", \"do not\", tweet)\n  tweet = re.sub(r\"dont\", \"do not\", tweet)\n  tweet = re.sub(r\"you're\", \"you are\", tweet)\n  tweet = re.sub(r\"i've\", \"I have\", tweet)\n  tweet = re.sub(r\"that's\", \"that is\", tweet)\n  tweet = re.sub(r\"i'll\", \"I will\", tweet)\n  tweet = re.sub(r\"doesn't\", \"does not\", tweet)\n  tweet = re.sub(r\"i'd\", \"I would\", tweet)\n  tweet = re.sub(r\"didn't\", \"did not\", tweet)\n  tweet = re.sub(r\"ain't\", \"am not\", tweet)\n  tweet = re.sub(r\"you'll\", \"you will\", tweet)\n  tweet = re.sub(r\"I've\", \"I have\", tweet)\n  tweet = re.sub(r\"Don't\", \"do not\", tweet)\n  tweet = re.sub(r\"I'll\", \"I will\", tweet)\n  tweet = re.sub(r\"I'd\", \"I would\", tweet)\n  tweet = re.sub(r\"Let's\", \"Let us\", tweet)\n  tweet = re.sub(r\"you'd\", \"You would\", tweet)\n  tweet = re.sub(r\"It's\", \"It is\", tweet)\n  tweet = re.sub(r\"Ain't\", \"am not\", tweet)\n  tweet = re.sub(r\"Haven't\", \"Have not\", tweet)\n  tweet = re.sub(r\"Could've\", \"Could have\", tweet)\n  tweet = re.sub(r\"youve\", \"you have\", tweet)  \n  tweet = re.sub(r\"don\u00e5\u00abt\", \"do not\", tweet)\n\n  return tweet","0b322eeb":"df['text'] = df['text'].apply(lambda s : cleaner(s))","921d972f":"df_test['text'] = df_test['text'].apply(lambda s : cleaner(s))","ef795fd5":"def remove_punct(text):\n    table=str.maketrans('','',string.punctuation)\n    return text.translate(table)\n\nexample=\"I am a #king\"\nprint(remove_punct(example))","760d35f7":"df['text']=df['text'].apply(lambda x : remove_punct(x))","20f9fe41":"df_test['text']=df_test['text'].apply(lambda x : remove_punct(x))","1854a363":"df['text']=df['text'].str.replace('   ', ' ')\ndf['text']=df['text'].str.replace('     ', ' ')\ndf['text']=df['text'].str.replace('\\xa0 \\xa0 \\xa0', ' ')\ndf['text']=df['text'].str.replace('  ', ' ')\ndf['text']=df['text'].str.replace('\u2014', ' ')\ndf['text']=df['text'].str.replace('\u2013', ' ')","c705e9a5":"df_test['text']=df_test['text'].str.replace('   ', ' ')\ndf_test['text']=df_test['text'].str.replace('     ', ' ')\ndf_test['text']=df_test['text'].str.replace('\\xa0 \\xa0 \\xa0', ' ')\ndf_test['text']=df_test['text'].str.replace('  ', ' ')\ndf_test['text']=df_test['text'].str.replace('\u2014', ' ')\ndf_test['text']=df_test['text'].str.replace('\u2013', ' ')","2311ea16":"!pip install transformers","997af5ff":"from tensorflow.keras.layers import Input, Dropout, Dense\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras.initializers import TruncatedNormal\nfrom tensorflow.keras.losses import CategoricalCrossentropy\nfrom tensorflow.keras.metrics import CategoricalAccuracy\nfrom tensorflow.keras.utils import to_categorical\n\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split","0701e4db":"# Select required columns\ndata = df[['text', 'target']]\n\n# Set your model output as categorical and save in new label col\ndata['target_label'] = pd.Categorical(data['target'])\n\n# Transform your output to numeric\ndata['target'] = data['target_label'].cat.codes","6d3976df":"from transformers import TFBertModel,  BertConfig, BertTokenizerFast","3045749a":"### --------- Setup BERT ---------- ###\n\n# Name of the BERT model to use\nmodel_name = 'bert-base-uncased'\n\n# Max length of tokens\nmax_length = 45\n\n# Load transformers config and set output_hidden_states to False\nconfig = BertConfig.from_pretrained(model_name)\nconfig.output_hidden_states = False\n\n# Load BERT tokenizer\ntokenizer = BertTokenizerFast.from_pretrained(pretrained_model_name_or_path = model_name, config = config)\n\n# Load the Transformers BERT model\ntransformer_bert_model = TFBertModel.from_pretrained(model_name, config = config)","c301f7a0":"# Load the MainLayer\nbert = transformer_bert_model.layers[0]\n\n# Build your model input\ninput_ids = Input(shape=(max_length,), name='input_ids', dtype='int32')\ninputs = {'input_ids': input_ids}\n\n# Load the Transformers BERT model as a layer in a Keras model\nbert_model = bert(inputs)[1]\ndropout = Dropout(config.hidden_dropout_prob, name='pooled_output')\npooled_output = dropout(bert_model, training=False)\n\n# Then build your model output\ntargets = Dense(units=len(data.target_label.value_counts()), kernel_initializer=TruncatedNormal(stddev=config.initializer_range), name='target')(pooled_output)\noutputs = {'target': targets}\n\n# And combine it all in a model object\nmodel = Model(inputs=inputs, outputs=outputs, name='BERT_Binary_Classifier')\n\n# Take a look at the model\nmodel.summary()","4eebd466":"### ------- Train the model ------- ###\n\nfrom tensorflow.keras.optimizers import RMSprop,Adam,SGD,Adadelta\n\noptimizer = Adam(learning_rate=6e-05,epsilon=1e-08,decay=0.01,clipnorm=1.0)\n\n# Set loss and metrics\nloss = {'target': CategoricalCrossentropy(from_logits = True)}\n\n# Compile the model\nmodel.compile(optimizer = optimizer, loss = loss, metrics = ['accuracy'])\n\n# Ready output data for the model\ny_target = to_categorical(data['target'])\n\n# Tokenize the input (takes some time)\nx_train = tokenizer(\n            text=data['text'].to_list(),\n            add_special_tokens=True,\n            max_length=max_length,\n            truncation=True,\n            padding=True, \n            return_tensors='tf',\n            return_token_type_ids = False,\n            return_attention_mask = True,\n            verbose = True)\n\n# Fit the model\nhistory = model.fit(\n    x={'input_ids': x_train['input_ids']},\n    y={'target': y_target},\n    validation_split=0.25,\n    batch_size=64,\n    epochs=1,\n    verbose=1)","6f503a8f":"x_test = tokenizer(\n          text=df_test['text'].to_list(),\n          add_special_tokens=True,\n          max_length=max_length,\n          truncation=True,\n          padding=True, \n          return_tensors='tf',\n          return_token_type_ids = False,\n          return_attention_mask = True,\n          verbose = True)","ec873c1b":"label_predicted = model.predict(\n    x={'input_ids': x_test['input_ids']},\n)","663435a0":"label_predicted['target']","9dea6e28":"label_pred_max=[np.argmax(i) for i in label_predicted['target']]","0739cec9":"label_pred_max[:10]","05d1c7bb":"from transformers import RobertaTokenizer, TFRobertaModel, RobertaConfig ","02afd5de":"### --------- Setup Roberta ---------- ###\n\nmodel_name = 'roberta-base'\n\n# Max length of tokens\nmax_length = 45\n\n# Load transformers config and set output_hidden_states to False\nconfig = RobertaConfig.from_pretrained(model_name)\nconfig.output_hidden_states = False\n\n# Load Roberta tokenizer\ntokenizer = RobertaTokenizer.from_pretrained(pretrained_model_name_or_path = model_name, config = config)\n\n# Load the Roberta model\ntransformer_roberta_model = TFRobertaModel.from_pretrained(model_name, config = config)","f0040057":"### ------- Build the model ------- ###\n\n# Load the MainLayer\nroberta = transformer_roberta_model.layers[0]\n\n# Build your model input\ninput_ids = Input(shape=(max_length,), name='input_ids', dtype='int32')\ninputs = {'input_ids': input_ids}\n\n# Load the Transformers RoBERTa model as a layer in a Keras model\nroberta_model = roberta(inputs)[1]\ndropout = Dropout(config.hidden_dropout_prob, name='pooled_output')\npooled_output = dropout(roberta_model, training=False)\n\n# Then build your model output\ntargets = Dense(units=len(data.target_label.value_counts()), kernel_initializer=TruncatedNormal(stddev=config.initializer_range), name='target')(pooled_output)\noutputs = {'target': targets}\n\n# And combine it all in a model object\nmodel2 = Model(inputs=inputs, outputs=outputs, name='RoBERTa_Binary_Classifier')\n\n# Take a look at the model\nmodel2.summary()","d83eb628":"### ------- Train the model ------- ###\n\noptimizer = Adam(learning_rate=6e-05,epsilon=1e-08,decay=0.01,clipnorm=1.0)\n\n# Set loss and metrics\nloss = {'target': CategoricalCrossentropy(from_logits = True)}\n\n# Compile the model\nmodel2.compile(optimizer = optimizer, loss = loss, metrics = ['accuracy'])\n\n# Ready output data for the model\ny_target = to_categorical(data['target'])\n\n# Tokenize the input (takes some time)\nx_train = tokenizer(\n            text=data['text'].to_list(),\n            add_special_tokens=True,\n            max_length=max_length,\n            truncation=True,\n            padding=True, \n            return_tensors='tf',\n            return_token_type_ids = False,\n            return_attention_mask = True,\n            verbose = True)\n\n# Fit the model\nhistory = model2.fit(\n    x={'input_ids': x_train['input_ids']},\n    y={'target': y_target},\n    validation_split=0.25,\n    batch_size=64,\n    epochs=3,\n    verbose=1)","bc5d8beb":"x_test = tokenizer(\n          text=df_test['text'].to_list(),\n          add_special_tokens=True,\n          max_length=max_length,\n          truncation=True,\n          padding=True, \n          return_tensors='tf',\n          return_token_type_ids = False,\n          return_attention_mask = True,\n          verbose = True)","02975011":"label_predicted = model2.predict(\n    x={'input_ids': x_test['input_ids']},\n)","04a719cd":"label_predicted['target']","a01f9990":"label_pred_max=[np.argmax(i) for i in label_predicted['target']]","3015d2bb":"label_pred_max[:10]","9e737980":"from transformers import DistilBertTokenizer, TFDistilBertModel, DistilBertConfig ","014ed148":"### --------- Setup DistilBERT ---------- ###\n\nmodel_name = 'distilbert-base-uncased'\n\n# Max length of tokens\nmax_length = 45\n\n# Load transformers config and set output_hidden_states to False\nconfig = DistilBertConfig.from_pretrained(model_name)\nconfig.output_hidden_states = False\n\n# Load Distilbert tokenizer\ntokenizer = DistilBertTokenizer.from_pretrained(pretrained_model_name_or_path = model_name, config = config)\n\n# Load the Distilbert model\ntransformer_distilbert_model = TFDistilBertModel.from_pretrained(model_name, config = config)","ef9e1ba6":"# Load the MainLayer\ndistilbert = transformer_distilbert_model.layers[0]\n\n# Build your model input\ninput_ids = Input(shape=(max_length,), name='input_ids', dtype='int32')\ninputs = {'input_ids': input_ids}\n\n# Load the Transformers DistilBERT model as a layer in a Keras model\ndistilbert_model = distilbert(inputs)[0][:,0,:]\ndropout = Dropout(0.1, name='pooled_output')\npooled_output = dropout(distilbert_model, training=False)\n\n# Then build your model output\ntargets = Dense(units=len(data.target_label.value_counts()), kernel_initializer=TruncatedNormal(stddev=config.initializer_range), name='target')(pooled_output)\noutputs = {'target': targets}\n\n# And combine it all in a model object\nmodel3 = Model(inputs=inputs, outputs=outputs, name='DistilBERT_Binary_Classifier')\n\n# Take a look at the model\nmodel3.summary()","3060561f":"### ------- Train the model ------- ###\n\n# Set an optimizer\noptimizer = Adam(learning_rate=6e-05,epsilon=1e-08,decay=0.01,clipnorm=1.0)\n\n# Set loss and metrics\nloss = {'target': CategoricalCrossentropy(from_logits = True)}\n\n# Compile the model\nmodel3.compile(optimizer = optimizer, loss = loss, metrics = ['accuracy'])\n\n# Ready output data for the model\ny_target = to_categorical(data['target'])\n\n# Tokenize the input (takes some time)\nx_train = tokenizer(\n    text=data['text'].to_list(),\n    add_special_tokens=True,\n    max_length=max_length,\n    truncation=True,\n    padding=True, \n    return_tensors='tf',\n    return_token_type_ids = False,\n    return_attention_mask = True,\n    verbose = True)\n\n# Fit the model\nhistory = model3.fit(\n    x={'input_ids': x_train['input_ids']},\n    y={'target': y_target},\n    validation_split=0.25,\n    batch_size=64,\n    epochs=1,\n    verbose=1)","f8ac5041":"x_test = tokenizer(\n    text=df_test['text'].to_list(),\n    add_special_tokens=True,\n    max_length=max_length,\n    truncation=True,\n    padding=True, \n    return_tensors='tf',\n    return_token_type_ids = False,\n    return_attention_mask = True,\n    verbose = True)","0ade1afc":"label_predicted = model3.predict(\n    x={'input_ids': x_test['input_ids']},\n)","b9fb62b4":"label_predicted['target']","28cc2f29":"label_pred_max=[np.argmax(i) for i in label_predicted['target']]","10418427":"label_pred_max[:10]","45b7f15c":"!pip install sentencepiece ","37a685c1":"from transformers import XLNetTokenizer, TFXLNetModel, XLNetConfig\nimport sentencepiece","64bf2364":"### --------- Setup XLNet ---------- ###\n\nmodel_name = 'xlnet-base-cased'\n\n# Max length of tokens\nmax_length = 45\n\n# Load transformers config and set output_hidden_states to False\nconfig = XLNetConfig.from_pretrained(model_name)\nconfig.output_hidden_states = False\n\n# Load XLNet tokenizer\ntokenizer = XLNetTokenizer.from_pretrained(pretrained_model_name_or_path = model_name, config = config)\n\n# Load the XLNet model\ntransformer_xlnet_model = TFXLNetModel.from_pretrained(model_name, config = config)","ba7e60da":"### ------- Build the model ------- ###\n\n# Load the MainLayer\nxlnet = transformer_xlnet_model.layers[0]\n\n# Build your model input\ninput_ids = Input(shape=(max_length,), name='input_ids', dtype='int32')\ninputs = {'input_ids': input_ids}\n\n# Load the Transformers XLNet model as a layer in a Keras model\nxlnet_model = xlnet(inputs)[0]\nxlnet_model = tf.squeeze(xlnet_model[:, -1:, :], axis=1)\ndropout = Dropout(0.1, name='pooled_output')\npooled_output = dropout(xlnet_model, training=False)\n\n# Then build your model output\ntargets = Dense(units=len(data.target_label.value_counts()), kernel_initializer=TruncatedNormal(stddev=config.initializer_range), name='target')(pooled_output)\noutputs = {'target': targets}\n\n# And combine it all in a model object\nmodel4 = Model(inputs=inputs, outputs=outputs, name='XLNet_Binary_Classifier')\n\n# Take a look at the model\nmodel4.summary()","2e15dd12":"### ------- Train the model ------- ###\n\noptimizer = Adam(learning_rate=6e-05,epsilon=1e-08,decay=0.01,clipnorm=1.0)\n\n# Set loss and metrics\nloss = {'target': CategoricalCrossentropy(from_logits = True)}\n\n# Compile the model\nmodel4.compile(optimizer = optimizer, loss = loss, metrics = ['accuracy'])\n\n# Ready output data for the model\ny_target = to_categorical(data['target'])\n\n# Tokenize the input (takes some time)\nx_train = tokenizer(\n            text=data['text'].to_list(),\n            add_special_tokens=True,\n            max_length=max_length,\n            truncation=True,\n            padding=True, \n            return_tensors='tf',\n            return_token_type_ids = False,\n            return_attention_mask = True,\n            verbose = True)\n\n# Fit the model\nhistory = model4.fit(\n    x={'input_ids': x_train['input_ids']},\n    y={'target': y_target},\n    validation_split=0.25,\n    batch_size=64,\n    epochs=1,\n    verbose=1)","7cafd7a0":"x_test = tokenizer(\n    text=df_test['text'].to_list(),\n    add_special_tokens=True,\n    max_length=max_length,\n    truncation=True,\n    padding=True, \n    return_tensors='tf',\n    return_token_type_ids = False,\n    return_attention_mask = True,\n    verbose = True)","4be47d3b":"label_predicted = model4.predict(\n    x={'input_ids': x_test['input_ids']},\n)","9842004b":"label_predicted['target']","b4416664":"label_pred_max=[np.argmax(i) for i in label_predicted['target']]","403e8c47":"label_pred_max[:10]","61648ab8":"sample_submission['target'] = label_pred_max\nsample_submission.head(10)","fdd65aab":"sample_submission.to_csv(\"submission.csv\", index=False, header=True)","8f81091e":"## Inference","18c678f4":"Let's start by reading the 3 csv files containing training, testing and sample submission, then run a couple of functions to know a little bit more about our data. ","178d92d9":"### Contractions and acronyms:\nPeople world-wide make use of acronyms to speed-up the publishing of a tweet, some of them can be miswritten and others can be decomposed creating words that make sense, this process is exhaustive and requires investing a long time searching the meaning of each one, the function which replaces the contractions and acronyms by the words they stand for will be called cleaner: \n","e3ce0499":"Above we see 350 tweets contain more than 25 words and only 3 tweets are of 31 words, now we have to consider that our dataset is \"small sized\" (7.613 instances) and the following cleaning process will get rid of a big portion useless part of the sentences we can be sure after tokenization process the sequences created will not be much longer than 31 words. Below we can see the three headline tweets containing 31 words, observe there are misspelled words, emojis, acronyms and some of them can be decomposed into sub-words:","87a8a76c":"The next cell considers the model training and we have to set the optimizer, the loss function as categorical crossentropy and accuracy as metric, as final step we take these as features of the model.compile function.","76e9f7a4":"# NLP Disaster Tweets Classifier with Transformers\n\nWelcome folks!, in the current project I will implement on this dataset what I have done previously in another project called \"Best Sentiment Classifier Transformers\" in which I showed you in detail how to implement four types of well-known transformer models making use of the transformers HuggingFace library and Keras API.\n\nThe main task corresponds to a binary text classification on Disaster Tweets Competition and the dataset contains 7.613 instances for training, whereas the testing set contains 3263 from which we have to classify as \"Disaster\" or \"non-Disaster\".\n\nBy the way I really encourage you to see my project \"Best NLP Disaster Tweets Classifier!\" in which I perform an exhaustive and spotless explanation of corpus processing and NLU, this is because in the current project we will mainly focus on implementing state of the art transformer models and comparing their performance.\n","116d30f0":"Now we have to gather from the dataset only the two columns useful for training (text and target), then let's create a new column corresponding to our label as categorical which will be useful later.","c7fcb386":"Something similar to DistilBERT happens to the current model, because we have to convert the output shape of the default model first layer to the appropriate (None, 768), in this case we will use tf.squeeze function as can be seen below:","f1d44a34":"## Inference","a6d35937":"# Discussion\n\nIn general the performance of the four models was similar, also based on the experience from the previous project we can endorse the idea that BERT is the middle term of trade-off between accuracy and training time, whereas DistilBERT was the fastest by far, but having a lower accuracy than the previous as is explained by HuggingFace it achieves 95% accuracy of BERT, finally RoBERTa and XLNet were the slowest models but not the highest accuracies as it corresponds to BERT (validation acc).\n\nI have submitted the predition of the testing set for all models and the best one was BERT reaching 83.12% of accuracy and the lowest was DistilBERT reaching 81.98%. We can say there is a slight difference but as we are dealing with a small sized dataset such gap becomes bigger and more important. As in the previous project the main reason of the misclassifications is because the label is unbalanced (slightly though), but it makes our prediction to sidetrack, therefore we should have to find a proper method to solve such problem either oversampling or undersampling.\n\nAnother possible reason of the limited accuracy no matter which model we use is the vocabulary as the cleaning process didn't cover all misspelled words, idioms and weird acronyms widely used (as people normally communicate informally) makes our model understand poorly some sentences. Obviously if we try to take down such problem the cleaning process would take a long time to do because we have to look at each sentence and define all posible confusing words.\n\nAlso I have to inform that I have trained each model for more epochs but the unique improvement was in training accuracy whereas validation stayed the same or even decreased, I would really encourage you to try with more epochs and compare their performance having previously done a wider cleaning process so as to be sure it will work better.","a35a67b3":"## Inference","e487a884":"Finally the following cells are to compute the label predicted of the test (out-of-bag) instances.","87a5c549":"The model we will use is 'bert_base_uncased' and the max_length chosen is 45 in order to cover even the longest possible sequence, also because the number of instances in the dataset is relatively small the training will not take too much time.","a6eb51e0":"### Removing HTML tags:\n\nWe have to consider that some tweets were obtained using web scrapping, using this method the components of a publication are companied by special tags identifying them. As such tags are unuseful we must get rid of them to gather only the text. The function which applies such step will be called remove_html:","dbf62082":"The model took 59 seconds and had following characteristics: train\/test accuracy of 76.0%\/82.3%, val_size=25%, Adam and 1 epoch.","d10f994c":"We can see above the distribution of the classes is slightly unbalanced, this is why we should expect to have sidetrack in the prediction towards class 0.","1d4b9053":"### Removing multiple spaces:\n\nNow, some sentences cleaned have different types of extra whitespaces, obviusly they don't add anything to the corpus and we will get rid of them with the following lines:","d406d88a":"# RoBERTa","9bca3582":"Then what we need from tensorflow.keras:","5ea29c50":"## Inference","325b7b3a":"I would like to know any feedback in order to increase the performance of the models or tell me if you found a different one even better!\n\nIf you liked this notebook I would appreciate so much your upvote if you want to see more projects\/tutorials like this one. I encourage you to see my projects portfolio, am sure you will love it.\n\nThank you!","a09c78b2":"## Cleaning:\n\nThe tweets contained in the dataset are almost raw, this means we have to get rid of all 'impurities' such as tags, symbols, punctuations, emojis, etc. These does not add significant information to the prediction moreover makes our sentences more subjective. This process comprehend 6 key steps which will make our sentences partially-suit to be used in training of the model.","0d19d784":"### Removing punctuations:\n\nIn this step the there are only a few tweets cleaned that still contain symbols and punctuations, as they don't add key information to the message we will get rid of them, the function which applies such step will be called remove_punct:\n","a2f0f28d":"### Removing Emojis:\n\nEmojis are an efficient way to show the feeling of the publishers in the message, we could translate the meaning of them to words and help to improve the scope of the message. These could be useful or confuse the algorithm when finding the same feeling for disaster and non-disaster tweets, because of this we prefer to get rid of them, the function which applies such step will be called remove_emoji:","13ae7e69":"Effectively was 31 words, this means if we would Tokenize by word the max_length should be 31, however as transformers consider sub-words tokenization such number could be increased depending on the words being used which can increase such length to 40 or even more, thus we have to take that into account when modeling as it could cause our model to take significatively a long time to train, therefore we have to find a trade-off between training time and performance.","f6f7820e":"We will build the next 3 models the same way as the previous one, notice there are some lines which includes extra functions proper for the model:","f21ed10d":"The model took 2 minutes 8 seconds and had following characteristics: train\/test accuracy of 85.0%\/82.7%, val_size=25%, Adam and 3 epochs.","05b714a1":"The model took 56 seconds and had following characteristics: train\/test accuracy of 75.1%\/83.5%, val_size=25%, Adam and 1 epoch, which makes sense and we expect such performance for these complex models, almost no disadvantages as it trained so fast because of the small dataset.","0a6a931e":"# DistilBERT","dd566b94":"Now that our model has been loaded we can start the processes of building and  tuning according to our dataset and task using the functional API of keras.\n\nAs we see below the input layer must consider the max_length of sequences and then this is fed to the bert model, a dropout layer to reduce overfitting (0.1) and finally a dense layer with number of neurons equal to number of classes in our label (2).","ec2b6309":"Submission with pre-trained model:","6d744c78":"# BERT\n\nAs first step we have to import the Model, Config and Tokenizer corresponding to Bert in order to build properly the model.","e521dda2":"In both plots we can see the distributions are Gaussian-like shapes with similar frequencies, it seems that the longest tweet in the entire dataset corresponds to a Non-disaster and is around 31 words, now let's obtain the longest one by using the max() function:","953973e1":"Time now to find out the number of words in headline tweets, in order to understand a bit better we will plot histograms for both classes:\n","b24d96ce":"### Removing URLs: \nSome tweets either disaster or non-disaster include links 'URLs' which correspond to videos or other webpages containing key information about the subject they are trying to communicate, as we want to clean the sentences we must get rid of them. The function which applies such step will be caled remove_URL:","7b436281":"The model took 28 seconds and had following characteristics: train\/test accuracy of 79.4%\/82.7%, val_size=25%, Adam and 1 epoch.","463398ff":"DistilBERT does not consider a pooling layer in the default model which converts the output (None,45,768) to (None,768), this is why we will select the first and third dimension of the 'layer 0' so as to have such output shape required, the next layers are the same as before:","2d96a6e3":"label_predicted contains a key which is 'target' same name as our actual label, if we show the array contained it corresponds to a matrix predictions for each instance where the highest in each row is the class predicted, therefore we have to apply argmax, firstly let us see such matrix predicted:","a1af29e6":"## Modeling\n\nIn other project published I showed several models to tackle this problem, however they are based on Bag-of-words embedding method and as we know currently they are a bit obsolete because do not apply an attention mechanism which has proven to be very powerful and makes the model understand the meaning of sentences. This is why in the current step we will build, train and compare the following \"attention based\" algorithms:\n\n- BERT (Bidirectional Encoder Representation from Transformers)\n- RoBERTa (Robustly Optimized BERT Pre-training Approach)\n- DistilBERT (Distilled BERT)\n- XLNet (Generalized Auto-Regressive model)\n\nEach one of the mentioned have its pros and cons, the most preferred and widely used model is the BERT for being the middle term in performance, whereas RoBERTa and XLNet are known for their better error metrics and DistilBERT for its faster training. We will consider all of these characteristics and choose the best one for our dataset.\n\nWe will start by installing the transformers library and importing the functions needed.","e1cd7980":"# XLNet\n\nThe tokenizer corresponding to XLNet requires an extra library called sentencepiece which we have to install and import as follows:"}}