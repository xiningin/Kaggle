{"cell_type":{"5ba276aa":"code","6fa2ceae":"code","03e8ccd8":"code","687c847a":"code","0339ea63":"code","ec350e87":"code","9db84f55":"markdown","8f666c5a":"markdown","c3e4ff4c":"markdown"},"source":{"5ba276aa":"team_name = \"shirakia+digimagi\" # EDIT HERE","6fa2ceae":"import pandas as pd\nimport numpy as np\n# import os\nimport requests\n# import json\nfrom zipfile import ZipFile\nimport datetime\nimport time\nimport matplotlib.pyplot as plt\nplt.rcParams['figure.figsize'] = [30, 20]","03e8ccd8":"base_url = \"https:\/\/www.kaggle.com\/requests\/EpisodeService\/\"\nget_url = base_url + \"GetEpisodeReplay\"\nlist_url = base_url + \"ListEpisodes\"\n\nr = requests.post(list_url, json = {\"teamId\":  5151726})\nrj = r.json()\nteams_df = pd.DataFrame(rj['result']['teams'])","687c847a":"def getTeamEpisodes(team_id):\n    # request\n    r = requests.post(list_url, json = {\"teamId\":  int(team_id)})\n    rj = r.json()\n\n    # update teams list\n    global teams_df\n    teams_df_new = pd.DataFrame(rj['result']['teams'])\n    \n    if len(teams_df.columns) == len(teams_df_new.columns) and (teams_df.columns == teams_df_new.columns).all():\n        teams_df = pd.concat( (teams_df, teams_df_new.loc[[c for c in teams_df_new.index if c not in teams_df.index]] ) )\n        teams_df.sort_values('publicLeaderboardRank', inplace = True)\n#         print('{} teams on file'.format(len(teams_df)))\n    else:\n        print('teams dataframe did not match')\n    \n    # make df\n    team_episodes = pd.DataFrame(rj['result']['episodes'])\n    team_episodes['avg_score'] = -1;\n    \n    for i in range(len(team_episodes)):\n        agents = team_episodes['agents'].loc[i]\n        agent_scores = [a['updatedScore'] for a in agents if a['updatedScore'] is not None]\n        team_episodes.loc[i, 'submissionId'] = [a['submissionId'] for a in agents if a['submission']['teamId'] == team_id][0]\n        team_episodes.loc[i, 'updatedScore'] = [a['updatedScore'] for a in agents if a['submission']['teamId'] == team_id][0]\n        \n        if len(agent_scores) > 0:\n            team_episodes.loc[i, 'avg_score'] = np.mean(agent_scores)\n\n    for sub_id in team_episodes['submissionId'].unique():\n        sub_rows = team_episodes[ team_episodes['submissionId'] == sub_id ]\n        max_time = max( [r['seconds'] for r in sub_rows['endTime']] )\n        final_score = max( [r['updatedScore'] for r_idx, (r_index, r) in enumerate(sub_rows.iterrows())\n                                if r['endTime']['seconds'] == max_time] )\n\n        team_episodes.loc[sub_rows.index, 'final_score'] = final_score\n        \n    team_episodes.sort_values('avg_score', ascending = False, inplace=True)\n    return rj, team_episodes","0339ea63":"team_id = int(teams_df[teams_df['teamName'] == team_name]['id'])\n_rj, df = getTeamEpisodes(team_id)\ndf = df.sort_values(by=['id'])","ec350e87":"limit = 5000\ndf_limited = df.sort_values(by=['submissionId','id']).tail(limit).sort_values(by=['id'])\nfor key, grp in df_limited.reset_index().groupby('submissionId'):\n    plt.plot(grp['updatedScore'],label=key)\nplt.ylim(800, 1200)\nxmax = len(df_limited)\nplt.hlines(y=1000, xmin=0, xmax=xmax)\nplt.hlines(y=1100, xmin=0, xmax=xmax)\nplt.hlines(y=1200, xmin=0, xmax=xmax)\nplt.show()","9db84f55":"# Set your team name here","8f666c5a":"This notebook is forked from https:\/\/www.kaggle.com\/david1013\/halite-game-scraper","c3e4ff4c":"# Codes"}}