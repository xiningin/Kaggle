{"cell_type":{"3ac228ff":"code","76d6edc0":"code","8120f078":"code","686bbad5":"code","07fe8d54":"code","315a81dd":"code","50488358":"code","370d7459":"code","712c2b66":"code","43ed8636":"code","8c3f2c9e":"code","880748c2":"code","e09bd3f2":"code","de4d678e":"code","7b6fbf00":"code","27fba233":"code","a99cce11":"code","435ab3cb":"code","1e139090":"code","464e659e":"code","0496a4fe":"code","c1ed705a":"code","c83d3c5f":"code","da66ffa9":"markdown","e2a01da9":"markdown","2959016d":"markdown","0d20ef30":"markdown","b6175f30":"markdown","2fdff962":"markdown"},"source":{"3ac228ff":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","76d6edc0":"pip install ta","8120f078":"import pandas as pd\nfrom ta import *\nfrom ta.utils import dropna\nfrom ta.volatility import *\nfrom ta.volume import *\nfrom ta.momentum import *\nfrom ta.trend import *\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import RobustScaler, MinMaxScaler\nfrom sklearn.feature_selection import SelectKBest,chi2, f_classif, mutual_info_classif,GenericUnivariateSelect","686bbad5":"DATA = 1","07fe8d54":"pd.options.display.max_columns = 100\npd.options.display.max_rows = 15\nNAN_VALS=200\nDATA=1\n\n#Loading Data\nif DATA==1:\n    stock=pd.read_csv('\/kaggle\/input\/thesis-data\/FROTO.IS.csv',header=0,index_col=\"Date\")\nelif DATA==2:\n    stock=pd.read_csv('\/kaggle\/input\/thesis-data\/SP500.csv',header=0,index_col=\"Date\")[2000:-500]\nelif DATA==3:\n    stock=pd.read_csv('\/kaggle\/input\/thesis-data\/TUPRS.IS.csv',header=0,index_col=\"Date\")[2000:]\nelif DATA==4:\n    stock=pd.read_csv('\/kaggle\/input\/thesis-data\/XBANK.IS.csv',header=0,index_col=\"Date\")[:-200]\nelif DATA==5:\n    stock=pd.read_csv('\/kaggle\/input\/thesis-data\/YKBNK.IS.csv',header=0,index_col=\"Date\")[1500:-300]\n    \ndt = dropna(stock[[\"Open\",\"High\",\"Low\",\"Close\",\"Volume\"]])\ndf = add_all_ta_features(dt, open=\"Open\", high=\"High\", low=\"Low\", close=\"Close\", volume=\"Volume\")[100:].dropna(axis=1)","315a81dd":"df","50488358":"# Initialize Bollinger Bands Indicator\nscaler_bb = MinMaxScaler()\nindicator_bb = BollingerBands(close=df[\"Close\"])\n\nbb_frame=pd.DataFrame()\n# Add Bollinger Bands features\nbb_frame[\"bbm\"] = indicator_bb.bollinger_mavg()\nbb_frame[\"bbh\"] = indicator_bb.bollinger_hband()\nbb_frame[\"bbl\"] = indicator_bb.bollinger_lband()\nbb_frame[\"bbw\"] = indicator_bb.bollinger_wband()\nbb_frame[\"bbp\"] = indicator_bb.bollinger_pband()\nbollinger = scaler_bb.fit_transform(bb_frame).mean(axis=1)[NAN_VALS:]\nbollinger","370d7459":"scaler_kc = MinMaxScaler()\n\nindicator_kc = KeltnerChannel(close=df.Close, high=df.High, low=df.Low, window=10)\n\nkcc_frame=pd.DataFrame()\nkcc_frame[\"kcc\"] = indicator_kc.keltner_channel_mband()\nkcc_frame[\"kch\"] = indicator_kc.keltner_channel_hband()\nkcc_frame[\"kcl\"] = indicator_kc.keltner_channel_lband()\nkcc_frame[\"kcw\"] = indicator_kc.keltner_channel_wband()\nkcc_frame[\"kcp\"] = indicator_kc.keltner_channel_pband()\n\nkeltner = scaler_kc.fit_transform(kcc_frame).mean(axis=1)[NAN_VALS:]\nkeltner","712c2b66":"scaler_dc = MinMaxScaler()\n\n# Donchian Channel\nindicator_dc = DonchianChannel(close=df.Close, high=df.High, low=df.Low, window=20)\n\ndc_frame=pd.DataFrame()\n\ndc_frame[\"dcl\"] = indicator_dc.donchian_channel_lband()\ndc_frame[\"dch\"] = indicator_dc.donchian_channel_hband()\ndc_frame[\"dcm\"] = indicator_dc.donchian_channel_mband()\ndc_frame[\"dcw\"] = indicator_dc.donchian_channel_wband()\ndc_frame[\"dcp\"] = indicator_dc.donchian_channel_pband()\n\ndonchian = scaler_dc.fit_transform(dc_frame).mean(axis=1)[NAN_VALS:]\ndonchian\n#donchian[np.isnan(donchian)]","43ed8636":"scaler_macd = MinMaxScaler()\n# MACD\nindicator_macd = MACD(close=df.Close, window_slow=26, window_fast=12,)\n\nmacd_frame=pd.DataFrame()\n\nmacd_frame[\"macd\"] = indicator_macd.macd()\nmacd_frame[\"signal\"] = indicator_macd.macd_signal()\nmacd_frame[\"diff\"] = indicator_macd.macd_diff()\n\nmacd = scaler_macd.fit_transform(macd_frame).mean(axis=1)[NAN_VALS:]\nmacd\n#macd[np.isnan(macd)]","8c3f2c9e":"scaler_ich = MinMaxScaler()\n\nich_frame=pd.DataFrame()\n\n# Ichimoku Indicator\nindicator_ichi = IchimokuIndicator(\n    high=df.High, low=df.Low,\n    window1=9,\n    window2=26,\n    window3=52,\n    visual=False)\nich_frame[\"ichimoku_conv\"] = indicator_ichi.ichimoku_conversion_line()\nich_frame[\"ichimoku_base\"] = indicator_ichi.ichimoku_base_line()\nich_frame[\"ichimoku_a\"] = indicator_ichi.ichimoku_a()\nich_frame[\"ichimoku_b\"] = indicator_ichi.ichimoku_b()\n\nichimoku = scaler_ich.fit_transform(ich_frame).mean(axis=1)[NAN_VALS:]\nichimoku","880748c2":"scaler_aa = MinMaxScaler()\n\naa_frame=pd.DataFrame()\n\n# Aroon Indicator\nindicator_aroon = AroonIndicator(close=df.Close, window=25)\naa_frame[\"aroon_up\"] = indicator_aroon.aroon_up()\naa_frame[\"aroon_down\"] = indicator_aroon.aroon_down()\naa_frame[\"aroon_ind\"] = indicator_aroon.aroon_indicator()\n\naaron = scaler_aa.fit_transform(aa_frame).mean(axis=1)[NAN_VALS:]\naaron\n#aaron[np.isnan(aaron)]","e09bd3f2":"scaler_srsi = MinMaxScaler()\n\nsrsi_frame=pd.DataFrame()\n\nindicator_srsi = StochRSIIndicator(close=df.Close, window=14, smooth1=3, smooth2=3)\n\nsrsi_frame[\"stoch_rsi\"] = indicator_srsi.stochrsi()\nsrsi_frame[\"stoch_rsi_k\"] = indicator_srsi.stochrsi_k()\nsrsi_frame[\"stoch_rsi_d\"] = indicator_srsi.stochrsi_d()\n\nsrsi = scaler_srsi.fit_transform(srsi_frame).mean(axis=1)[NAN_VALS:]\nsrsi\n#srsi[np.isnan(srsi)]","de4d678e":"scaler_ppo = MinMaxScaler()\n\nppo_frame=pd.DataFrame()\n\n# Percentage Price Oscillator\nindicator_ppo = PercentagePriceOscillator(close=df.Close, window_slow=26, window_fast=12, window_sign=9)\n\nppo_frame[\"ppo\"] = indicator_ppo.ppo()\nppo_frame[\"signal\"] = indicator_ppo.ppo_signal()\nppo_frame[\"hist\"] = indicator_ppo.ppo_hist()\n\nppo = scaler_ppo.fit_transform(ppo_frame).mean(axis=1)[NAN_VALS:]\nppo\n#ppo[np.isnan(ppo)]","7b6fbf00":"scaler_pvo = MinMaxScaler()\n\npvo_frame=pd.DataFrame()\n\n# Percentage Volume Oscillator\nindicator_pvo = PercentageVolumeOscillator(volume=df.Volume, window_slow=26, window_fast=12, window_sign=9)\n\npvo_frame[\"pvo\"] = indicator_pvo.pvo()\npvo_frame[\"pvo_signal\"] = indicator_pvo.pvo_signal()\npvo_frame[\"pvo_hist\"] = indicator_pvo.pvo_hist()\n\npvo = scaler_pvo.fit_transform(pvo_frame).mean(axis=1)[NAN_VALS:]\npvo\n#pvo[np.isnan(pvo)]","27fba233":"scaler_ind = MinMaxScaler()\n\nindicators = pd.DataFrame()\n# Accumulation Distribution Index\nindicators[f\"volume_adi\"] = AccDistIndexIndicator(\n    high=df.High, low=df.Low, close=df.Close, volume=df.Volume).acc_dist_index()\n\n# On Balance Volume\nindicators[\"volume_obv\"] = OnBalanceVolumeIndicator(\n    close=df.Close, volume=df.Volume).on_balance_volume()\n\n# Chaikin Money Flow\nindicators[\"volume_cmf\"] = ChaikinMoneyFlowIndicator(\n    high=df.High, low=df.Low, close=df.Close, volume=df.Volume).chaikin_money_flow()\n\n# Force Index\nindicators[\"volume_fi\"] = ForceIndexIndicator(\n    close=df.Close, volume=df.Volume, window=13).force_index()\n\n# Money Flow Indicator\nindicators[\"volume_mfi\"] = MFIIndicator(\n    high=df.High, low=df.Low, close=df.Close, volume=df.Volume, window=14).money_flow_index()\n\n# Ease of Movement\nindicators[\"volume_em\"] = EaseOfMovementIndicator(\n    high=df.High, low=df.Low, volume=df.Volume, window=14).ease_of_movement()\n\n# Volume Price Trend\nindicators[\"volume_vpt\"] = VolumePriceTrendIndicator(\n    close=df.Close, volume=df.Volume).volume_price_trend()\n\n# Negative Volume Index\nindicators[\"volume_nvi\"] = NegativeVolumeIndexIndicator(\n    close=df.Close, volume=df.Volume).negative_volume_index()\n\n# Volume Weighted Average Price\nindicators[\"volume_vwap\"] = VolumeWeightedAveragePrice(\n    high=df.High, low=df.Low, close=df.Close, volume=df.Volume,window=14,).volume_weighted_average_price()\n\n# Average True Range\nindicators[\"volatility_atr\"] = AverageTrueRange(\n    high=df.High, low=df.Low, close=df.Close, window=10).average_true_range()\n\n# SMAs\nindicators[\"trend_sma_fast\"] = SMAIndicator(\n    close=df.Close, window=12).sma_indicator()\n\nindicators[\"trend_sma_slow\"] = SMAIndicator(\n    close=df.Close, window=26).sma_indicator()\n\n# EMAs\nindicators[\"trend_ema_fast\"] = EMAIndicator(\n    close=df.Close, window=12).ema_indicator()\n\nindicators[\"trend_ema_slow\"] = EMAIndicator(\n    close=df.Close, window=26).ema_indicator()\n\n# TRIX Indicator\nindicators[\"trend_trix\"] = TRIXIndicator(\n    close=df.Close, window=15).trix()\n\n# Mass Index\nindicators[\"trend_mass_index\"] = MassIndex(\n    high=df.High, low=df.Low, window_fast=9, window_slow=25).mass_index()\n\n# CCI Indicator\nindicators[\"trend_cci\"] = CCIIndicator(\n    high=df.High, low=df.Low, close=df.Close,window=20,constant=0.015).cci()\n\n# DPO Indicator\nindicators[\"trend_dpo\"] = DPOIndicator(\n    close=df.Close, window=20).dpo()\n\n# Schaff Trend Cycle (STC)\nindicators[\"trend_stc\"] = STCIndicator(\n    close=df.Close,window_slow=50,window_fast=23,cycle=10,smooth1=3,smooth2=3).stc()\n\n# Relative Strength Index (RSI)\nindicators[\"momentum_rsi\"] = RSIIndicator(\n    close=df.Close, window=14).rsi()\n\nindicators[\"momentum_tsi\"] = TSIIndicator(\n    close=df.Close, window_slow=25, window_fast=13).tsi()\n\n# KAMA\nindicators[\"momentum_kama\"] = KAMAIndicator(\n    close=df.Close, window=10, pow1=2, pow2=30).kama()\n\n# Rate Of Change\nindicators[\"momentum_roc\"] = ROCIndicator(\n    close=df.Close, window=12).roc()\n\nscaled=pd.DataFrame(scaler_ind.fit_transform(indicators)[NAN_VALS:],columns=indicators.columns)\n\nscaled","a99cce11":"scaled[\"bollinger\"] = bollinger\nscaled[\"keltner\"] = keltner\nscaled[\"donchian\"] = donchian\nscaled[\"macd\"] = macd\nscaled[\"ichimoku\"] = ichimoku\nscaled[\"aaron\"] = aaron\nscaled[\"srsi\"] = srsi\nscaled[\"ppo\"] = ppo\nscaled[\"pvo\"] = pvo\n\nscaled","435ab3cb":"goal = df.Close[NAN_VALS:]\n","1e139090":"#Defining MAPE function\ndef MAPE(Y_actual,Y_Predicted):\n    mape = np.mean(np.abs((Y_actual - Y_Predicted)\/Y_actual))*100\n    return mape","464e659e":"# xgboost\nfrom sklearn.metrics import mean_squared_error,mean_absolute_error\nfrom xgboost import XGBRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_selection import SelectFromModel\nfrom xgboost import plot_importance\nimport matplotlib.pyplot as plt","0496a4fe":"X_train, X_test, y_train, y_test = train_test_split(scaled, goal, test_size=0.20, random_state=7)\n\nmodel = XGBRegressor()\nmodel.fit(X_train, y_train)\nmodel.feature_importances_\n\nplt.figure(dpi=400)\nplot_importance(model)\nplt.savefig(\"importance.png\", dpi=400)\nplt.show()","c1ed705a":"thresholds = np.sort(model.feature_importances_)\nprint(thresholds)\nfor thresh in thresholds:\n    # select features using threshold\n    selection = SelectFromModel(model, threshold=thresh, prefit=True)\n    select_X_train = selection.transform(X_train)\n    # train model\n    selection_model = XGBRegressor()\n    selection_model.fit(select_X_train, y_train)\n    # eval model\n    select_X_test = selection.transform(X_test)\n    predictions = selection_model.predict(select_X_test)\n    mae = mean_absolute_error(y_test,predictions)\n    mape = MAPE(y_test,predictions)\n    print(\"Thresh=%.7f, n=%d, MAE: %.2f, MAPE : %.2F%%\" % (thresh, select_X_train.shape[1], mae, mape))","c83d3c5f":"thresholds[-16:]","da66ffa9":"There is five the of data used on project. Three of them stock and two of them is index type.","e2a01da9":"<h1>Producing and Selecting Technical Ind\u0131cators<\/h1>","2959016d":"<p>All Technical Indicators generated with Open, Close, High, Low columns of the stock. This features eleminated in this section. The process occured as Close feature of the stock. Most relevant features with the Close columns selected. SelectKBest algorithm used for this.<\/p>","0d20ef30":"<h2>Feature Selection<\/h2>","b6175f30":"Libraries and packages that used in the notebook imported on above.","2fdff962":"<h2>Preparing and Formatting Technical Indicator Datas<\/h2>"}}