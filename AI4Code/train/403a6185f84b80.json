{"cell_type":{"f12fb937":"code","33b87bad":"code","010f6d41":"code","bacc7398":"code","d8cb7ccf":"code","98e67d6f":"code","ff3d1c5c":"code","4d424253":"code","594c141b":"code","7a0c7929":"code","2875240e":"code","381d17ce":"code","baf334b4":"code","9a2150a5":"code","7c0ad80f":"code","9a402182":"code","f1c59ab4":"code","9846a06e":"code","48558a64":"code","4ee2d5d7":"code","be548cb0":"code","a7f2ed39":"code","da75ddd8":"code","78b9822b":"code","daaa957f":"code","e32b9a74":"code","a32dcc06":"code","fb3cfee3":"code","9f3fcc55":"code","3c962ce5":"code","9b3c1287":"code","bea49145":"code","734c847d":"code","d182135f":"code","1e995df6":"code","234d83ba":"code","59b98436":"code","73b40c48":"markdown","d076457c":"markdown","cbc2e01b":"markdown","d1ddcbaa":"markdown","35c4cccd":"markdown","dd1df9ff":"markdown","008537c2":"markdown","b953e322":"markdown","0266cd13":"markdown","f884bb4d":"markdown","9c14278b":"markdown","f0a6500d":"markdown","b1e8fe54":"markdown","3944bb8e":"markdown","eadeeddd":"markdown","9d825c96":"markdown","9ba888b6":"markdown","01f8f98b":"markdown","9bb57b67":"markdown","d895d481":"markdown","0cadebce":"markdown","890ae009":"markdown","1361f403":"markdown","ebdb9121":"markdown","a3cd0a95":"markdown","f9e5f8ff":"markdown","337c5d88":"markdown","08c60d5c":"markdown","163bc138":"markdown","c981f8d7":"markdown"},"source":{"f12fb937":"import numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","33b87bad":"df_train = pd.read_csv(\"\/kaggle\/input\/house-hold-energy-data\/D202.csv\")","010f6d41":"df_train","bacc7398":"df_train.info()","d8cb7ccf":"df_train.head()","98e67d6f":"for feat in df_train.select_dtypes(exclude=\"number\"):\n    print(\"-----------------\")\n    print(\"{}\\n\".format(feat))\n    print(\"{}\\n\".format(df_train[feat].value_counts()))","ff3d1c5c":"fig, sub = plt.subplots(1,2,figsize=(16,8))\n\nfor feat, subplot in zip(df_train.select_dtypes(include=\"number\"),sub):\n    sns.distplot(df_train[feat],ax=subplot, hist_kws={\"edgecolor\":\"black\"})\n    subplot.grid()","4d424253":"df_train.isnull().sum() \/ df_train.shape[0]","594c141b":"categorical_feat = df_train.select_dtypes(exclude=\"number\")\npd.concat([categorical_feat.head(),categorical_feat.tail()],axis=0)","7a0c7929":"categorical_feat.drop([\"TYPE\",\"UNITS\"],axis=1,inplace=True)","2875240e":"categorical_feat[\"START\"] = pd.to_datetime(categorical_feat[\"DATE\"]+ ' '+categorical_feat[\"START TIME\"],format=\"%m\/%d\/%Y %H:%M\")\ncategorical_feat[\"END\"] = pd.to_datetime(categorical_feat[\"DATE\"]+ ' '+categorical_feat[\"END TIME\"],format=\"%m\/%d\/%Y %H:%M\")","381d17ce":"categorical_feat.drop([\"DATE\",\"START TIME\",\"END TIME\"],axis=1,inplace=True)","baf334b4":"categorical_feat[\"year\"] = categorical_feat.apply(lambda x: x[\"START\"].year,axis=1)\ncategorical_feat[\"month\"] = categorical_feat.apply(lambda x: x[\"START\"].month,axis=1)\ncategorical_feat[\"day\"] = categorical_feat.apply(lambda x: x[\"START\"].day,axis=1)\ncategorical_feat[\"hour\"] = categorical_feat.apply(lambda x: x[\"START\"].hour,axis=1)","9a2150a5":"categorical_feat","7c0ad80f":"categorical_feat[\"COST\"] = categorical_feat[\"COST\"].apply(lambda x: float(x[1:]))","9a402182":"categorical_feat[\"duration\"] = (categorical_feat[\"END\"] - categorical_feat[\"START\"])","f1c59ab4":"categorical_feat","9846a06e":"df_train_trans = pd.concat([categorical_feat, df_train[\"USAGE\"]], axis = 1)","48558a64":"print(\"first data point in time, START TIME: {}\".format(df_train_trans[\"START\"].min()))\nprint(\"last data point in time, START TIME: {}\".format(df_train_trans[\"START\"].max()))\nprint(\"\\n\")\nprint(\"first data point in time, END TIME: {}\".format(df_train_trans[\"END\"].min()))\nprint(\"last data point in time, END TIME: {}\".format(df_train_trans[\"END\"].max()))","4ee2d5d7":"df_train_trans[\"duration\"].value_counts()","be548cb0":"fig,sub = plt.subplots(1,4,figsize=(35,8))\nyear_count = df_train_trans.groupby(\"year\")[\"USAGE\"].count()\nmonth_count = df_train_trans.groupby(\"month\")[\"USAGE\"].count()\nday_count = df_train_trans.groupby(\"day\")[\"USAGE\"].count()\nhour_count = df_train_trans.groupby(\"hour\")[\"USAGE\"].count()\n\nfor feat, subplot in zip([year_count, month_count,day_count, hour_count],sub):\n    sns.barplot(x=feat.index, y=feat, ax=subplot,palette=\"Pastel1\")\n    subplot.grid()\nfig.tight_layout()","a7f2ed39":"fig,sub = plt.subplots(2,4,figsize=(35,8))\nyear_usage_mean = df_train_trans.groupby(\"year\")[\"USAGE\"].mean()\nmonth_usage_mean = df_train_trans.groupby(\"month\")[\"USAGE\"].mean()\nday_usage_mean = df_train_trans.groupby(\"day\")[\"USAGE\"].mean()\nhour_usage_mean = df_train_trans.groupby(\"hour\")[\"USAGE\"].mean()\n\nyear_cost_mean = df_train_trans.groupby(\"year\")[\"COST\"].mean()\nmonth_cost_mean = df_train_trans.groupby(\"month\")[\"COST\"].mean()\nday_cost_mean = df_train_trans.groupby(\"day\")[\"COST\"].mean()\nhour_cost_mean = df_train_trans.groupby(\"hour\")[\"COST\"].mean()\n\nlist_mean = [year_usage_mean, month_usage_mean,day_usage_mean,hour_usage_mean,year_cost_mean,month_cost_mean,day_cost_mean,hour_cost_mean]\n\nfor feat, subplot in zip(list_mean,sub.flatten()):\n    sns.barplot(x=feat.index, y=feat, ax=subplot,palette=\"Pastel1\")\n    subplot.grid()\nfig.tight_layout()","da75ddd8":"import scipy.stats as stats","78b9822b":"fig, sub = plt.subplots(2,5,figsize=(20,7))\n\nsns.distplot(df_train_trans[df_train_trans[\"month\"]==5][\"USAGE\"],  ax=sub[0][0], hist_kws={\"edgecolor\":\"black\"})\nsns.distplot(np.log1p(df_train_trans[df_train_trans[\"month\"]==5][\"USAGE\"]),  ax=sub[0][1], hist_kws={\"edgecolor\":\"black\"})\nsns.distplot((df_train_trans[df_train_trans[\"month\"]==5][\"USAGE\"])**(1\/2),  ax=sub[0][2], hist_kws={\"edgecolor\":\"black\"})\nsns.distplot(1\/(df_train_trans[df_train_trans[\"month\"]==5][\"USAGE\"]),  ax=sub[0][3], hist_kws={\"edgecolor\":\"black\"})\nsns.distplot(stats.boxcox(df_train_trans[df_train_trans[\"month\"]==5][\"USAGE\"])[0],  ax=sub[0][4], hist_kws={\"edgecolor\":\"black\"})\n\nprob = stats.probplot(df_train_trans[df_train_trans[\"month\"]==5][\"USAGE\"], dist=stats.norm, plot=sub[1][0])\nprob = stats.probplot(np.log1p(df_train_trans[df_train_trans[\"month\"]==5][\"USAGE\"]), dist=stats.norm, plot=sub[1][1])\nprob = stats.probplot((df_train_trans[df_train_trans[\"month\"]==5][\"USAGE\"])**(1\/2), dist=stats.norm, plot=sub[1][2])\nprob = stats.probplot(1\/(df_train_trans[df_train_trans[\"month\"]==5][\"USAGE\"]), dist=stats.norm, plot=sub[1][3])\nprob = stats.probplot(stats.boxcox(df_train_trans[df_train_trans[\"month\"]==5][\"USAGE\"])[0], dist=stats.norm, plot=sub[1][4])\n\nfig.tight_layout()","daaa957f":"stats.kruskal(*[df_train_trans[df_train_trans[\"year\"]==year][\"USAGE\"] for year in df_train_trans[\"year\"].unique()])","e32b9a74":"from itertools import combinations\nimport scipy.stats as stats\n\nyear_list = [2016,2017,2018]\n\nfor feat1, feat2 in combinations(year_list,2):\n    p = stats.mannwhitneyu(df_train_trans[df_train_trans[\"year\"]==feat1][\"USAGE\"],df_train_trans[df_train_trans[\"year\"]==feat2][\"USAGE\"])\n    print(\"p-value of mann-Whitney-test between {} and {}: {}\".format(feat1,feat2, p))","a32dcc06":"month_list = df_train_trans[\"month\"].unique()\n\nfor feat1, feat2 in combinations(month_list,2):\n    t, p = stats.mannwhitneyu(df_train_trans[df_train_trans[\"month\"]==feat1][\"USAGE\"],df_train_trans[df_train_trans[\"month\"]==feat2][\"USAGE\"])\n    if p < 0.05:\n        print(\"p-value of Mann-Whitney-Test between {} and {}: {}\".format(feat1,feat2, p))","fb3cfee3":"stats.kruskal(*[df_train_trans[df_train_trans[\"day\"]==day][\"USAGE\"].values for day in df_train_trans[\"day\"].unique()])","9f3fcc55":"stats.kruskal(*[df_train_trans[df_train_trans[\"hour\"]==hour][\"USAGE\"].values for hour in df_train_trans[\"hour\"].unique()])","3c962ce5":"hour_list = df_train_trans[\"hour\"].unique()\n\nfor feat1, feat2 in combinations(hour_list,2):\n    t, p = stats.mannwhitneyu(df_train_trans[df_train_trans[\"hour\"]==feat1][\"USAGE\"],df_train_trans[df_train_trans[\"hour\"]==feat2][\"USAGE\"])\n    if p < 0.05:\n        print(\"p-value of Mann-Whitney-Test between {} and {}: {}\".format(feat1,feat2, p))","9b3c1287":"fig, sub = plt.subplots(1,1,figsize=(16,8))\nsns.lineplot(x = df_train_trans[\"START\"], y = df_train_trans[\"USAGE\"],ax = sub)\nsns.lineplot(x = df_train_trans[\"START\"], y = df_train_trans[\"USAGE\"].rolling(window=1440).mean(),ax = sub, color=\"red\");\nsub.grid()","bea49145":"cumSum_usage = df_train_trans.set_index(\"START\")[\"USAGE\"].cumsum()\n\nfig,sub = plt.subplots(1,1,figsize=(12,4))\nsns.lineplot(x=cumSum_usage.index,y=cumSum_usage.values,ax = sub)\nsub.set_ylabel(\"Usage\", fontdict={\"fontsize\":12})\nsub.grid()","734c847d":"from statsmodels.distributions.empirical_distribution import ECDF\n\nfig,sub=plt.subplots(1,1,figsize=(12,4))\n\necdf = ECDF(df_train_trans[\"USAGE\"])\nsns.lineplot(x=ecdf.x, y=ecdf.y,ax=sub)\nsub.grid()","d182135f":"df_train_trans.groupby(\"year\")[\"USAGE\"].mean()","1e995df6":"df_train_trans.groupby(\"month\")[\"USAGE\"].mean()","234d83ba":"fig, sub = plt.subplots(1,1,figsize=(16,8))\nsns.lineplot(x = df_train_trans[\"START\"], y = df_train_trans[\"COST\"],ax = sub)\nsns.lineplot(x = df_train_trans[\"START\"], y = df_train_trans[\"COST\"].rolling(window=1440).mean(),ax = sub, color=\"red\");\nsub.grid()","59b98436":"fig, sub = plt.subplots(1,1,figsize=(16,8))\nsub2 = sub.twinx()\nsns.lineplot(x = df_train_trans[\"START\"], y = df_train_trans[\"USAGE\"].rolling(window=1440).sum(),ax = sub, color=\"blue\", label = \"Usage\");\nsns.lineplot(x = df_train_trans[\"START\"], y = df_train_trans[\"COST\"].rolling(window=1440).sum(),ax = sub2, color=\"red\", label = \"Cost\");\nsub.grid()\nsub.legend(loc=\"upper right\")\nsub2.legend(loc=\"upper left\")","73b40c48":"## Transform date, start time and end time to datetime","d076457c":"* not many values from 2016\n* values equally distributed between month, day and hour","cbc2e01b":"* significant change in average energy consumption over the years","d1ddcbaa":"Cumulated Usage","35c4cccd":"* there is a significant difference between the unique days in month\n* quite surprising","dd1df9ff":"* there is a significant difference (as supposed) between the morning, the evening and the rest of the day","008537c2":"## join cat and numerical data","b953e322":"# Data Description","0266cd13":"* drop type and units, because only one value\n* transform date, start time and end time to datetime\n* transform cost to float","f884bb4d":"### how are the values distributed on years, month, days, hours?","9c14278b":"* 80 % of the values of the energy consumption is below ~ 0.2 kwh","f0a6500d":"## drop type and units","b1e8fe54":"* there is a significant difference between most month, but several month (above) have no significant difference","3944bb8e":"* notes: no metric values in feature\n* usage: right-skewed distribution","eadeeddd":"# Data Processing","9d825c96":"* duration always 14 min ","9ba888b6":"# Data Analysis","01f8f98b":"### is the energy consumption on average different depending on the year, month, day or hour?","9bb57b67":"## in which time frame lies the data?","d895d481":"- from 2016 to 2017 high growth rate\n- 2017 negative growth rate\n- end 2017 to mid 2018 consumption grows","0cadebce":"## How long energy is consumed on average?","890ae009":"the distribution of usage is too skewed and even with common transformation techniques, it is not possible establish a normal distribution in order to apply anova \/ t-tests","1361f403":"## calculate duration","ebdb9121":"## transform cost to float","a3cd0a95":"## Visualization","f9e5f8ff":"Rolling mean","337c5d88":"* from 2016 to 2018 the energy consumption has on average been reduced (hypothesis: better isolation and more responsibility?)\n* in the winter month Nov - March the energy consumption is higher than in the summer month\n* no difference observable between days observable\n* higher energy consumption from 19 to 23 h (evening activities?) and 7 - 8 h (rush hour to work?)","08c60d5c":"* NOTES is missing 100 % ","163bc138":"* Type: only value is \"electric usage\"\n* date not in datetime format\n* start \/ end time: in hh:mm format but not datetime\n* maybe good idea to calculate duratio\n* units: only value \"kWh\"\n* cost: metric scaled variable is in string format","c981f8d7":"## Usage throughout time "}}