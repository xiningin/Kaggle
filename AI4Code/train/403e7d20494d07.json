{"cell_type":{"81218246":"code","ea64e63e":"code","9e872d49":"code","62522f15":"code","fec6b2e6":"code","fd726903":"code","9d6d7007":"code","5ee152ff":"code","a935323e":"code","b745f364":"code","7101d7b8":"code","dcc1cfc1":"code","2f38ba0a":"code","ab06d049":"code","c306bf06":"code","e5138c64":"code","49afe640":"code","7e2a72bb":"code","be0d4906":"markdown","aa951f99":"markdown","4028b6e1":"markdown","11803647":"markdown","5c41aba0":"markdown","ba0af89a":"markdown","92e1404b":"markdown"},"source":{"81218246":"# Install a dependency not included in Kaggle's defaults\n!pip install us","ea64e63e":"# Imports\nimport matplotlib.pyplot as plt # plotting\nimport seaborn as sns # plot formatting\nfrom ipywidgets import * # interactive plots\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport us # list of state names","9e872d49":"# List local files\nprint(os.listdir('..\/input'))","62522f15":"# Load data\nnRowsRead = None # specify 'None' if want to read whole file\nbase_df = pd.read_csv('..\/input\/states_all.csv', delimiter=',', nrows = nRowsRead)\n\n\nbase_df.dataframeName = 'states_all.csv'\nnRow, nCol = base_df.shape\nprint(f'There are {nRow} rows and {nCol} columns')","fec6b2e6":"# Subset of states-only data\n'''\nData for U.S. Territories is fairly erratic; limiting records to states simplifies preliminary analysis.\n'''\nSTATES = [str(x).upper() for x in us.STATES]\nstates_df = base_df[base_df['STATE'].isin(STATES)].copy()\nprint('Initial Count: {}'.format(len(base_df)))\nprint('States-Only Count: {}'.format(len(states_df)))","fd726903":"# List nulls\nfor col in states_df.columns:\n    nulls = states_df[col].isnull().sum()\n    print(col + ': ' + str(nulls))","9d6d7007":"# Sample data\ndisplay(states_df.head(5))","5ee152ff":"YEAR_RANGE=states_df['YEAR'].unique()\ndisplay(YEAR_RANGE)","a935323e":"finance_keys = ['PRIMARY_KEY', 'STATE', 'YEAR',\n                      'ENROLL', 'TOTAL_REVENUE', 'FEDERAL_REVENUE', 'STATE_REVENUE', 'LOCAL_REVENUE',\n                      'TOTAL_EXPENDITURE', 'INSTRUCTION_EXPENDITURE', 'SUPPORT_SERVICES_EXPENDITURE',\n                      'CAPITAL_OUTLAY_EXPENDITURE', 'OTHER_EXPENDITURE']\nfinance_keys_mappings = ['ENROLL', 'TOTAL_REVENUE', 'FEDERAL_REVENUE', 'STATE_REVENUE', 'LOCAL_REVENUE',\n                      'TOTAL_EXPENDITURE', 'INSTRUCTION_EXPENDITURE', 'SUPPORT_SERVICES_EXPENDITURE',\n                      'CAPITAL_OUTLAY_EXPENDITURE', 'OTHER_EXPENDITURE']\nfinance_df = states_df[finance_keys]","b745f364":"# Interactive plot\n# Metrics by state, by year\n%matplotlib notebook\n\nsort_by_keys_mappings = ['Numerical', 'Alphabetical']\n\n@interact(year=(YEAR_RANGE[0],YEAR_RANGE[-1],1), metric=finance_keys_mappings, sort_by=sort_by_keys_mappings)\ndef metric_explorer(year, metric, sort_by):\n    # Clear any old figures\n    plt.close()\n    plt.style.use('ggplot')\n    \n    # Take a snapshot of the data for the given year\n    snapshot = finance_df[finance_df['YEAR'] == year].copy()\n    if sort_by == 'Alphabetical':\n        snapshot.sort_values('STATE', ascending=False, inplace=True)\n    else:\n        snapshot.sort_values(metric, ascending=True, inplace=True)\n    y_pos = np.arange(len(snapshot[metric]))\n    \n    # Make a plot to match states to the chosen metric\n    plt.figure(figsize=(8, 10), num='Financial Metric Explorer Tool')\n    plt.barh(y_pos, snapshot[metric])\n    plt.yticks(y_pos, snapshot['STATE'])\n    plt.title('{0}: {1}'.format(metric, year))\n\n    \ninteractive_plot = interactive(metric_explorer, year=2005, metric=finance_keys_mappings[0], sort_by=sort_by_keys_mappings[0])","7101d7b8":"# Interactive plot\n# Metrics across years, by state\n%matplotlib notebook\n\n@interact(state=STATES, metric=finance_keys_mappings)\ndef state_explorer(state, metric):\n    # Clear any old figures\n    plt.close()\n    plt.style.use('ggplot')\n    \n    # Take a snapshot of the data for the given year\n    snapshot = finance_df[finance_df['STATE'] == state].copy()\n    \n    # Make a plot to match states to the chosen metric\n    plt.figure(figsize=(8, 10), num='Financial State Explorer Tool')\n    plt.plot(YEAR_RANGE, snapshot[metric], '-o')\n    plt.title('{0}: {1}'.format(metric, state))\n\n    \ninteractive_plot = interactive(state_explorer, state='ALABAMA', metric=finance_keys_mappings[0])","dcc1cfc1":"enrollment_keys = ['PRIMARY_KEY', 'STATE', 'YEAR',\n                      'GRADES_PK_G', 'GRADES_KG_G', 'GRADES_4_G', 'GRADES_8_G', 'GRADES_12_G',\n                      'GRADES_1_8_G', 'GRADES_9_12_G', 'GRADES_ALL_G', 'ENROLL']\nenrollment_keys_mappings = ['GRADES_PK_G', 'GRADES_KG_G', 'GRADES_4_G', 'GRADES_8_G', 'GRADES_12_G',\n                      'GRADES_1_8_G', 'GRADES_9_12_G', 'GRADES_ALL_G', 'ENROLL']\nsort_by_keys_mappings = ['Numerical', 'Alphabetical']\nenroll_df = states_df[enrollment_keys]","2f38ba0a":"# Interactive plot\n# Metrics by state, by year\n%matplotlib notebook\n\n@interact(year=(YEAR_RANGE[0],YEAR_RANGE[-1],1), metric=enrollment_keys_mappings, sort_by=sort_by_keys_mappings)\ndef metric_explorer(year, metric, sort_by):\n    # Clear any old figures\n    plt.close()\n    plt.style.use('ggplot')\n    \n    # Take a snapshot of the data for the given year\n    snapshot = enroll_df[finance_df['YEAR'] == year].copy()\n    if sort_by == 'Alphabetical':\n        snapshot.sort_values('STATE', ascending=False, inplace=True)\n    else:\n        snapshot.sort_values(metric, ascending=True, inplace=True)\n    y_pos = np.arange(len(snapshot[metric]))\n    \n    # Make a plot to match states to the chosen metric\n    plt.figure(figsize=(8, 10), num='Enrollment Metric Explorer Tool')\n    plt.barh(y_pos, snapshot[metric], color='blue')\n    plt.yticks(y_pos, snapshot['STATE'])\n    plt.title('{0}: {1}'.format(metric, year))\n\n    \ninteractive_plot = interactive(metric_explorer, year=2005, metric=enrollment_keys_mappings[0], sort_by=sort_by_keys_mappings[0])","ab06d049":"# Interactive plot\n# Metrics across years, by state\n%matplotlib notebook\n\n@interact(state=STATES, metric=enrollment_keys_mappings)\ndef state_explorer(state, metric):\n    # Clear any old figures\n    plt.close()\n    plt.style.use('ggplot')\n    \n    # Take a snapshot of the data for the given year\n    snapshot = enroll_df[enroll_df['STATE'] == state].copy()\n    \n    # Make a plot to match states to the chosen metric\n    plt.figure(figsize=(8, 10), num='Enrollment State Explorer Tool')\n    plt.plot(YEAR_RANGE, snapshot[metric], '-bo')\n    plt.title('{0}: {1}'.format(metric, state))\n\n    \ninteractive_plot = interactive(state_explorer, state='ALABAMA', metric=enrollment_keys_mappings[0])","c306bf06":"acad_keys = ['PRIMARY_KEY', 'STATE', 'YEAR',\n                      'AVG_MATH_4_SCORE', 'AVG_MATH_8_SCORE', 'AVG_READING_4_SCORE', 'AVG_READING_8_SCORE']\nacad_keys_mappings = ['AVG_MATH_4_SCORE', 'AVG_MATH_8_SCORE', 'AVG_READING_4_SCORE', 'AVG_READING_8_SCORE']\n\nsort_by_keys_mappings = ['Numerical', 'Alphabetical']\nacad_df = states_df[acad_keys]","e5138c64":"# Interactive plot\n# Metrics by state, by year\n%matplotlib notebook\n\n@interact(year=(YEAR_RANGE[0],YEAR_RANGE[-1],1), metric=acad_keys_mappings, sort_by=sort_by_keys_mappings)\ndef metric_explorer(year, metric, sort_by):\n    # Clear any old figures\n    plt.close()\n    plt.style.use('ggplot')\n    \n    # Take a snapshot of the data for the given year\n    snapshot = acad_df[acad_df['YEAR'] == year].copy()\n    if sort_by == 'Alphabetical':\n        snapshot.sort_values('STATE', ascending=False, inplace=True)\n    else:\n        snapshot.sort_values(metric, ascending=True, inplace=True)\n    y_pos = np.arange(len(snapshot[metric]))\n    \n    # Make a plot to match states to the chosen metric\n    plt.figure(figsize=(8, 10), num='Academic Metric Explorer Tool')\n    plt.barh(y_pos, snapshot[metric], color='green')\n    plt.yticks(y_pos, snapshot['STATE'])\n    plt.title('{0}: {1}'.format(metric, year))\n\n    \ninteractive_plot = interactive(metric_explorer, year=2009, metric=acad_keys_mappings[0], sort_by=sort_by_keys_mappings[0])","49afe640":"# Interactive plot\n# Metrics across years, by state\n%matplotlib notebook\n\n@interact(state=STATES, metric=acad_keys_mappings)\ndef state_explorer(state, metric):\n    # Clear any old figures\n    plt.close()\n    plt.style.use('ggplot')\n    \n    # Take a snapshot of the data for the given year\n    snapshot = acad_df[acad_df['STATE'] == state].copy()\n    \n    # Make a plot to match states to the chosen metric\n    plt.figure(figsize=(8, 10), num='Academics State Explorer Tool')\n    # Mask missing values to allow for a line plot\n    null_mask = np.isfinite(snapshot[metric])\n    plt.plot(YEAR_RANGE[null_mask], snapshot[metric][null_mask], '-go')\n    plt.title('{0}: {1}'.format(metric, state))\n\n    \ninteractive_plot = interactive(state_explorer, state='ALABAMA', metric=acad_keys_mappings[0])","7e2a72bb":"# Compute the correlation matrix\ncorr = states_df.corr()\n\n# Generate a mask for the upper triangle\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=cmap, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","be0d4906":"### Data Load\nThis section details the process of loading data into the notebook.","aa951f99":"### Correlation Matrix (simple)","4028b6e1":"**Academics Set**\n\nThis section focuses on data from the National Assement of Educational Progress (NAEP) on academic achievement. Note that this data is only available for certain years.","11803647":"# U.S. Educational Data Explorer Tool\n\n*Justin R. Garrard*\n\nThis Notebook provides interactive visualizations that users can operate to find specific information. **These visualizations will not show up on Kaggle's display page.** You will need to either download the notebook code or run it in Kaggle's editor.","5c41aba0":"### Financial Data Set","ba0af89a":"This section focuses on data from the U.S. Census Bureau on school finances. ","92e1404b":"**Enrollment Set**\n\nThis section focuses on data from the National Center for Educational Statistics (NCES) on enrollment. "}}