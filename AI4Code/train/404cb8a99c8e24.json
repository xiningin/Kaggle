{"cell_type":{"1b343cb3":"code","2bcaae63":"code","7ef19e68":"code","4f2d0b18":"code","08f8a6ce":"code","0e3c2af2":"code","5e0be401":"code","d6c07f09":"code","ed28910e":"code","19c96b60":"code","08eb6313":"code","7508c0ce":"code","d98505f8":"code","40df6b63":"code","3676b875":"code","006ea20e":"code","e8b27afe":"code","c2d89771":"code","613759c6":"code","0bee8896":"code","c98b9738":"code","7dfee99b":"code","283a7041":"code","48998795":"code","d661576c":"code","8c9f6117":"code","73f5fb5e":"markdown","eae3e570":"markdown","b339075a":"markdown","b6fa7ba2":"markdown","dc3a348f":"markdown","5e4020ff":"markdown","5e2629a9":"markdown","dfc0bc76":"markdown","dc1f794e":"markdown","02c3a64e":"markdown"},"source":{"1b343cb3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","2bcaae63":"import nltk\nimport random\nfrom nltk.corpus import stopwords\nfrom nltk.classify.scikitlearn import SklearnClassifier\nimport string\nimport pandas as pd","7ef19e68":"df = pd.read_csv(\".\/..\/input\/spam.csv\", encoding = 'latin-1')\nprint(df.head())  ","4f2d0b18":"message_list = []                                                        \nword_list = []                                                           \n\nfor index, row in df.iterrows(): \n    \n    #print(row['v1'], row['v2'])\n    \n    category = row['v1']\n    message  = row['v2']\n    \n    message_list.append([message, category])\n    \n    for s in string.punctuation:                                        \n        if s in message:\n            message = message.replace(s, \" \")\n               \n    stop = stopwords.words('english')\n    for word in message.split(\" \"):                                        \n        if not word in stop:\n            word_list.append(word.lower())","08f8a6ce":"message_list[0:5]","0e3c2af2":"random.shuffle(message_list)","5e0be401":"word_list = nltk.FreqDist(word_list)","d6c07f09":"print(\"words len : \", len(list(word_list.keys())))","ed28910e":"word_features = list(word_list.keys())","19c96b60":"def find_feature(word_features, message):\n    feature = {}\n    for word in word_features:\n        feature[word] = word in message.lower()\n    return feature","08eb6313":"featureset = [(find_feature(word_features, message), category) for (message, category) in message_list]","7508c0ce":"trainingset = featureset[:int(len(featureset)*3\/4)]\ntestingset = featureset[int(len(featureset)*3\/4):]","d98505f8":"len(featureset)","40df6b63":"len(trainingset)","3676b875":"len(testingset)","006ea20e":"NBC = nltk.NaiveBayesClassifier.train(trainingset)","e8b27afe":"nbc_accuracy = nltk.classify.accuracy(NBC, testingset)*100","c2d89771":"nbc_accuracy","613759c6":"NBC.show_most_informative_features(10)","0bee8896":"for message, category in message_list[0:10]:\n    feature = find_feature(word_features, message)\n    print(message, \"-->\", NBC.classify(feature))","c98b9738":"from sklearn.linear_model import SGDClassifier\n\nSGDC = SklearnClassifier(SGDClassifier())\nSGDC.train(trainingset)","7dfee99b":"feature = find_feature(word_features, message)\nprint(SGDC.classify(feature))","283a7041":"print(\"SGD Classifier accuracy = \" + str((nltk.classify.accuracy(SGDC, testingset))*100))","48998795":"from sklearn.linear_model import LogisticRegression","d661576c":"# Logistic Regression classifier\nLogisticRegression_classifier = SklearnClassifier(LogisticRegression())\nLogisticRegression_classifier.train(trainingset)","8c9f6117":"print(\"LRC accuracy: \"+ str((nltk.classify.accuracy(LogisticRegression_classifier, testingset))*100))","73f5fb5e":"SGD accuracy is almost same as NB Classifier! Let's see the third model - Logistic Regression.","eae3e570":"Let's add messages and words in two different list for further use.","b339075a":"# # 1\n**Naive Bayes Classifier:**\n\nLet's try Naive Bayes Classifier and see what accuracy we can get.","b6fa7ba2":"# # 3\n**Logistic Regression classifier:**\n\nLet's try Logistic Regression Classifier and see what accuracy we can get.","dc3a348f":"Shuffle the message list to make sure we get the random items to predict.","5e4020ff":"We get 98.63% in the NB classifier.  It's a good sign! (Hope there is no issue in my data processing)","5e2629a9":"Let's print some messages and their categories from NB Classifier:","dfc0bc76":"**Note:**\n\nI haven't done any optimization in the code to keep it simple and plain. Feel free to fork and optimize the code if you want to.\nIf you find any issues in the data processing or classification, please let me know.","dc1f794e":"# # 2\n**Stochastic Gradient Descent Classifier:**\n\nLet's try Stochastic Gradient Descent Classifier and see what accuracy we can get.","02c3a64e":"Logistic Regression does the best so far. "}}