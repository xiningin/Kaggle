{"cell_type":{"b5a8ae8f":"code","28e8b3bb":"code","8536421f":"code","52acf356":"code","38058241":"code","0535d476":"code","1211c5f6":"code","368b40a8":"code","be8259fc":"markdown","d692a595":"markdown","a87fb9d4":"markdown","7687a4a8":"markdown"},"source":{"b5a8ae8f":"#!\/usr\/bin\/python3\n\nimport warnings\nwarnings.filterwarnings('ignore')\nimport os, pickle, re, string\nfrom string import punctuation\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport scikitplot.metrics as skplt\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report, plot_confusion_matrix","28e8b3bb":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\ndf = pd.read_csv(os.path.join(dirname, filename))\ndf = df.dropna()\ndf","8536421f":"df['Category'].value_counts()","52acf356":"# splitting the data into target and feature\nCategory_lebels = {\"\u0623\u062e\u0631\u0649\":3 , \"\u0639\u0644\u0648\u0645 \u0648\u062a\u0643\u0646\u0648\u0644\u0648\u062c\u064a\u0627\":2, \"\u0631\u064a\u0627\u062f\u0629 \u0623\u0639\u0645\u0627\u0644\":1}\ndf = df.replace({\"Category\": Category_lebels})\nfeature = df.Content\ntarget = df.Category\n\n# splitting into train and tests\nX_train, X_test, Y_train, Y_test = train_test_split(feature, target, test_size =.2, random_state=100)","38058241":"def draw_conf_matrix(model, X_test, Y_test, labels):\n    #Creating matplotlib axes object to assign figuresize and figure title\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.set_title('Confusion Matrx')\n\n    disp = plot_confusion_matrix(model, X_test, Y_test, display_labels= labels, ax = ax)\n    disp.confusion_matrix","0535d476":"# make pipeline\npipe = make_pipeline(TfidfVectorizer(), LogisticRegression())\n\n# make param grid\nparam_grid = {'logisticregression__C': [0.01, 0.1, 1, 10, 100]}\n\n# create and fit the model\nlr = GridSearchCV(pipe, param_grid, cv=5)\nlr.fit(X_train,Y_train)\n\n# make prediction and print accuracy\nprediction = lr.predict(X_test)\npredicted_proba = lr.predict_proba(X_test)\n\nprint(f\"Accuracy score is {accuracy_score(Y_test, prediction):.2f}\")\nprint(classification_report(Y_test, prediction))\ndraw_conf_matrix(lr, X_test, Y_test, Category_lebels.values())\nskplt.plot_roc_curve(Y_test, predicted_proba)","1211c5f6":"pickle.dump(lr, open('lr', 'wb'))","368b40a8":"#df['Content'][3000] = df['Content'].apply(preprocess)[3000]\nout = lr.predict([df['Content'][3000]])\nlist(Category_lebels.keys())[list(Category_lebels.values()).index(out[0])]","be8259fc":"### Import Libraries","d692a595":"## Arabic News Classification \n## (Entrepreneurship, Science & Technology, Other)","a87fb9d4":"### Loading the datasets","7687a4a8":"## Modeling (Training & Testing)"}}