{"cell_type":{"31314c67":"code","3f0a7d67":"code","20236a5e":"code","5d4f4edd":"code","bf3b3ea6":"code","c31677e4":"code","97518ee7":"code","83520fd5":"code","2e1284ef":"code","5e9d2b1f":"code","cf255a52":"code","ff8a98ca":"code","f07bddbd":"code","67b5347a":"code","b429e14d":"code","c949c8ec":"code","64deb7db":"code","b720c4be":"code","9add2f1c":"code","015dfe4a":"code","0de223d6":"code","0ad49ea8":"code","a4c612ca":"code","48d78ff6":"code","e932312d":"code","85163363":"code","a0ecd576":"code","ad7b4181":"markdown","6162eac8":"markdown","7cfb2cc4":"markdown","e4885cb7":"markdown","b90e1b21":"markdown","6c2473ec":"markdown","00efab6a":"markdown","da0abff9":"markdown","69bdf325":"markdown","83a2668e":"markdown","df437239":"markdown","420c802b":"markdown","c622f937":"markdown","e9b39a5f":"markdown","6c52edae":"markdown","c636ef18":"markdown","c060a945":"markdown","9a5b4071":"markdown"},"source":{"31314c67":"# \ub370\uc774\ud130 \uc218\uc9d1 \ubc0f \uc804\ucc98\ub9ac\nimport numpy as np\nimport pandas as pd\nfrom scipy.stats import norm, skew\nimport sklearn.metrics as metrics\nfrom sklearn import preprocessing\n# \ubaa8\ub378\nfrom xgboost import XGBRegressor\n# \ub370\uc774\ud130 \uc2dc\uac01\ud654\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","3f0a7d67":"train_df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest_df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\n\ntrain_df.shape, test_df.shape","20236a5e":"train_df.head()","5d4f4edd":"train_df.info()","bf3b3ea6":"print(train_df['SalePrice'].describe())","c31677e4":"sns.distplot(train_df['SalePrice'])","97518ee7":"print(\"\uc65c\ub3c4(Skewness) : %f \" % train_df['SalePrice'].skew())\nprint(\"\ucca8\ub3c4(Kurtosis) : %f \" % train_df['SalePrice'].kurt())","83520fd5":"train_df['SalePrice'] = np.log1p(train_df['SalePrice'])\nsns.distplot(train_df['SalePrice'], fit = norm)","2e1284ef":"cormat = train_df.corr()\nplt.figure(figsize = (20 , 20))\nsns.heatmap(cormat, vmax = .8, square = True)","5e9d2b1f":"corr = train_df.corr()\n# SalePrice Feauture \uc640\uc758 \uc0c1\uad00\uad00\uacc4\uac00 0.5\uc774\uc0c1\uc778 index\ub9cc \ucd94\ucd9c\ud558\ub294 \uc758\ubbf8\uc785\ub2c8\ub2e4.\nhighest_corr_features = corr.index[abs(corr['SalePrice']) > 0.5]\nplt.figure(figsize = (10, 10))\n# annot \uc744 \uc0ac\uc6a9\ud558\uba74, Heatmap \uc704\uc5d0 \uc22b\uc790\ub97c \ud45c\uae30\ud569\ub2c8\ub2e4.\ng = sns.heatmap(train_df[highest_corr_features].corr(), annot = True, cmap = \"RdYlGn\")","cf255a52":"corr[\"SalePrice\"].sort_values(ascending=False)","ff8a98ca":"cols = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'YearBuilt']\nsns.pairplot(train_df[cols])","f07bddbd":"Y_train = train_df['SalePrice']\ntest_id = test_df['Id']\nall_data = pd.concat([train_df, test_df], axis = 0, sort = False)\nall_data = all_data.drop(['Id', 'SalePrice'], axis = 1)","67b5347a":"Total = all_data.isnull().sum().sort_values(ascending = False)\npercent = (all_data.isnull().sum() \/ all_data.isnull().count()).sort_values(ascending = False)\nmissing_data = pd.concat([Total, percent], axis = 1, keys = ['Total', 'Percent'])\nmissing_data.head(25)","b429e14d":"all_data.drop((missing_data[missing_data['Total'] > 5]).index, axis = 1, inplace = True)\nprint(all_data.isnull().sum().max())","c949c8ec":"total = all_data.isnull().sum().sort_values(ascending = False)\ntotal.head(19)","64deb7db":"numeric_missed = ['BsmtFinSF1',\n                  'BsmtFinSF2',\n                  'BsmtUnfSF',\n                  'TotalBsmtSF',\n                  'BsmtFullBath',\n                  'BsmtHalfBath',\n                  'GarageArea',\n                  'GarageCars']\n\nfor feature in numeric_missed:\n    all_data[feature] = all_data[feature].fillna(0)\n\ncategorical_missed = ['Exterior1st',\n                      'Exterior2nd',\n                      'SaleType',\n                      'MSZoning',\n                      'Electrical',\n                      'KitchenQual']    \nfor feature in categorical_missed:\n    all_data[feature] = all_data[feature].fillna(all_data[feature].mode()[0])","b720c4be":"# test_df.info()\n# test data\uc5d0 Functional\uc758 \ub370\uc774\ud130\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc73c\ubbc0\ub85c fillna\ub97c \uc774\uc6a9\ud558\uc5ec \ub204\ub77d\ub41c \uac12\uc744 \ucd94\uac00\ud558\uaca0\uc2b5\ub2c8\ub2e4.\nall_data['Functional'] = all_data['Functional'].fillna('Typ')\n\n# test data\uc14b\uc5d0\ub9cc \uc874\uc7ac\ud558\ubbc0\ub85c, drop\ud558\uaca0\uc2b5\ub2c8\ub2e4.\nall_data.drop(['Utilities'], axis=1, inplace=True)\n\nall_data.isnull().sum().max()","9add2f1c":"numeric_feats = all_data.dtypes[all_data.dtypes != 'object'].index\nskewed_feats = all_data[numeric_feats].apply(lambda x : skew(x)).sort_values(ascending = False)\nhigh_skew = skewed_feats[abs(skewed_feats) > 0.5]\nhigh_skew","015dfe4a":"for feature in high_skew.index:\n    all_data[feature] = np.log1p(all_data[feature])    ","0de223d6":"# \ub3c5\ub9bd\ubcc0\uc218\uac00 \ub9ce\uc73c\ubbc0\ub85c, \ub370\uc774\ud130\ub97c \uacb0\ud569\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\nall_data['TotalSF'] = all_data['TotalBsmtSF'] + all_data['1stFlrSF'] + all_data['2ndFlrSF']","0ad49ea8":"all_data = pd.get_dummies(all_data)\nall_data.head()","a4c612ca":"X_train = all_data[:len(Y_train)]\nX_test = all_data[len(Y_train):]\n\nX_train.shape , X_test.shape","48d78ff6":"from sklearn.metrics import make_scorer\nfrom sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.metrics import mean_squared_error\n\nscorer = make_scorer(mean_squared_error, greather_is_better = False)\n\ndef rmse_CV_train(model):\n    kf = KFold(5, shuffle = True, random_state = 42).get_n_splits(X_train.values)\n    rmse = np.sqrt(-cross_val_score(model, X_train, Y_train, scoring = 'neg_mean_squared_error', cv = kf))\n    \n    return rmse\n\ndef rmse_CV_test(model):\n    kf = KFold(5, shuffle = True, random_state = 42).get_n_splits(train.values)\n    rmse = np.sqrt(-cross_val_score(model, X_test, Y_test, scoring = 'neg_mean_squared_error', cv = kf))\n    \n    return rmse","e932312d":"import xgboost as XGB\n## GridSearch \ud1b5\ud558\uc5ec, \ubaa8\ub378\ub9c1 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n## \ucc38\uace0 : https:\/\/www.kaggle.com\/lifesailor\/xgboost\nthe_model = XGB.XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.05, max_depth=3, \n                             min_child_weight=1.7817, n_estimators=2200,\n                             reg_alpha=0.4640, reg_lambda=0.8571,\n                             subsample=0.5213, random_state =7, nthread = -1)\n\nthe_model.fit(X_train, Y_train)","85163363":"y_predict = np.floor(np.expm1(the_model.predict(X_test)))\ny_predict","a0ecd576":"submission_park = pd.DataFrame({\n    'Id' : test_id,\n    'SalePrice' : y_predict\n})\n\nsubmission_park.to_csv('submission.csv',index=False)","ad7b4181":"# <strong>3. \ub204\ub77d\ub41c \ub370\uc774\ud130 \uad00\ucc30\ud558\uae30(Looking for missing values)<\/strong>\n- <strong>\ub204\ub77d\ub41c \ub370\uc774\ud130\ub97c \ud30c\uc545\ud558\uae30 \uc804\uc5d0 \ud574\uc57c\ud560 \uc0ac\ud56d<\/strong>\n    - <strong>train data \uc640 test data\ub97c \uacb0\ud569\ud558\uc5ec, \ub370\uc774\ud130\ub97c \uc804\ucc98\ub9ac\ub97c \ud55c \ud6c4\uc5d0 \ub2e4\uc2dc \ub098\ub204\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc65c\ub0d0\ud558\uba74 \uacb0\ud569\ud558\uc5ec \ub370\uc774\ud130\ub97c \uc804\ucc98\ub9ac\ud558\ub294 \uac83\uc774 \ud6e8\uc52c \ud3b8\ub9ac\ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.<\/strong>","6162eac8":"# <strong>\uc704\uc758 \ub0b4\uc6a9\uc744 \ud55c\ubc88 \uc815\ub9ac\ud558\uace0 \ub118\uc5b4\uac00\uaca0\uc2b5\ub2c8\ub2e4.<\/strong>\n\n- <strong>OverQual Feature\uc774 Saleprice \uc640 \uc0c1\uad00\uad00\uacc4\uac00 \uac00\uc7a5 \ub192\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.(0.82)<\/strong>\n\n- <strong>GarageCars & GarageArea \ub294 \uac01\uac01 \ub2e4\ub978 Feature\uc784\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. (0.88)<\/strong>\n\n- <strong>TotalBsmtSF & 1stFlrSF \ub610\ud55c \uac01\uac01 \ub2e4\ub978 Feature\uc784\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. (0.82)<\/strong>\n\n    - <strong>TotalBsmtSF & 1stFlrSF \ub97c \uc720\uc9c0\ud558\uac70\ub098 TotalBsmtSF\uc5d0 1stFlrSF\ub97c \ucd94\uac00\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.<\/strong>\n        - <strong>1stFlrSF\uc5d0 \ucd94\uac00\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c TotalBsmtSF\uc5d0 \ucd94\uac00\ud558\ub294 \uc774\uc720\ub294 SalePrice\uc640\uc758 \uc0c1\uad00\uad00\uacc4\uac00 \uc57d\uac04 \ub354 \ub192\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.<\/strong>\n             \n             \n- <strong>TotRmsAbvGrd & GrLivArea \ub610\ud55c \ub9e4\uc6b0 \uc0c1\uad00\uad00\uacc4\uac00 \ub192\uc74c\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.(0.83)<\/strong>\n    - <strong>GrLivArea \uac00 TotRmsAbvGrd \ubcf4\ub2e4 SalePrice\uc640 \uc0c1\uad00\uad00\uacc4\uac00 \uc720\uc9c0\uc2dc\ud0a4\uaca0\uc2b5\ub2c8\ub2e4.<\/strong>\n    \n\n","7cfb2cc4":"- info : \ub370\uc774\ud130\uc5d0 \ub300\ud55c \uc804\ubc18\uc801\uc778 \uc815\ubcf4\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4.\n\n**<strong>info\ub97c \ud1b5\ud558\uc5ec feature\uc5d0 \ub204\ub77d\ub41c \ub370\uc774\ud130\uac00 \uc788\uc74c\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7ec\ud55c feature\ub4e4\uc744 \ucd94\ud6c4\uc5d0 \ub2e4\ub8e8\uaca0\uc2b5\ub2c8\ub2e4.<\/strong>**","e4885cb7":"### <strong>\ub370\uc774\ud130 \uc804\ucc98\ub9ac\ub97c \uc644\ub8cc\ud558\uc600\uc73c\ubbc0\ub85c, \uc774\uc820 \uc6d0\ub798\uc758 train data \uc640 test data\ub85c \ubd84\ub9ac\ud558\uaca0\uc2b5\ub2c8\ub2e4.<\/strong>","b90e1b21":"# <strong>1. \ub370\uc774\ud130 \uc218\uc9d1\ud558\uae30(Gathering Data)<\/strong>","6c2473ec":"# <strong>2. Target \ub370\uc774\ud130\uc5d0 \uad00\ud558\uc5ec \ub354 \ubd84\uc11d \ubc0f \uc774\ud574\ud558\uae30(Analysis the target and understand what is the important features)<\/strong>\n- Target\uc778 SalePrice\ub97c \ud655\uc778\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","00efab6a":"<strong><h4>\ubcf4\ub2e4\uc2dc\ud53c, Target Data\uc758 \ubd84\ud3ec\uac00,\uc67c\ucabd\uc73c\ub85c \uce58\uc6b0\uccd0\uc800 \uc788\uc74c\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.<\/h4><\/strong>\n<br>\n\n- <strong>\uc120\ud615\ud68c\uadc0 \ubd84\uc11d\uc744 \uc0ac\uc6a9\ud560 \ub54c\uc5d0\ub294 3\uac00\uc9c0 \uc870\uac74\uc774 \uc874\uc7ac\ud569\ub2c8\ub2e4.<\/strong>\n    - <strong>\ub3c5\ub9bd\ubcc0\uc218(X)\uac12\uc5d0 \ud574\ub2f9\ud558\ub294 \uc885\uc18d\ubcc0\uc218(y)\uac12\ub4e4\uc740 \uc815\uaddc\ubd84\ud3ec\ub97c \uc774\ub904\uc57c \ud558\uace0 \ubaa8\ub4e0 \uc815\uaddc\ubd84\ud3ec\uc758 \ubd84\uc0b0\uc740 \ub3d9\uc77c\ud574\uc57c \ud569\ub2c8\ub2e4. (\uc774\ub97c \uc704\ud574\uc11c\ub294 \uc65c\ub3c4(Skewness), \ucca8\ub3c4(Kurtosis)\ub97c \ud30c\uc545\ud574\uc57c \ud569\ub2c8\ub2e4.)<\/strong>\n    \n    - <strong>\uc885\uc18d\ubcc0\uc218\uac12\ub4e4\uc740 \ud1b5\uacc4\uc801\uc73c\ub85c \uc11c\ub85c \ub3c5\ub9bd\uc801\uc774\uc5ec \ud569\ub2c8\ub2e4.<\/strong>\n    \n    - <strong>\ub2e4\uc911\ud68c\uadc0\ubd84\uc11d\uc758 \uacbd\uc6b0, \ub3c5\ub9bd\ubcc0\uc218\ub07c\ub9ac \ub2e4\uc911\uacf5\uc120\uc131(multicollinearity)\uc774 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc544\uc57c \ud569\ub2c8\ub2e4.<\/strong>\n    \n        - <strong>\ub2e4\uc911\uacf5\uc120\uc131\uc5d0 \uad00\ud558\uc5ec \uac04\ub2e8\ud558\uac8c \uc5d0\uc2dc\ub97c \ub4e4\uc5b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.<\/strong>\n        \n            - <strong>\ub098\uc774\uc640 \ud559\ub144\uc740 \ube44\uc2b7\ud55c \ubcc0\uc218\uc778\ub370, \uac70\uc758 \uac19\uc740 \uac1c\ub150(\uad50\uc9d1\ud569)\uc774\ub77c\uace0 \ubcfc\uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub098\uc774\uc640 \ud559\ub144\uc774 \uac19\uc774 \ubcc0\uc218\ub85c \uc874\uc7ac\ud558\ub294 \uacbd\uc6b0 \ub2e4\uc911\uacf5\uc120\uc131\uc774\ub77c\uace0 \ud569\ub2c8\ub2e4.<\/strong>","da0abff9":"# \ubaa9\ucc28\n- <strong>1. \ub370\uc774\ud130 \uc218\uc9d1\ud558\uae30 (Gathering Data)<\/strong>\n- <strong>2. \ub370\uc774\ud130\uc5d0 \ub300\ud55c \ubd84\uc11d \ubc0f \uc911\uc694\ud55c Feature \uc774\ud574\ud558\uae30 (Analysis the target and understand what is the important features)<\/strong>\n- <strong>3. \ub204\ub77d\ub41c \ub370\uc774\ud130 \uad00\ucc30 (Looking for missing values)<\/strong>\n- <strong>4. \ub370\uc774\ud130 \uc804\ucc98\ub9ac (Feature Engineering)<\/strong>\n- <strong>5. \ubc94\uc8fc\ud615 \ub370\uc774\ud130 \uc218\uce58\ud615 \ub370\uc774\ud130\ub85c \uc804\ud658\ud558\uae30 (Converting categorical to numerical)<\/strong>\n- <strong>7. \ubaa8\ub378 \uc0dd\uc131 (Modeling)<\/strong>","69bdf325":"# <strong>5. \ubc94\uc8fc\ud615 \ub370\uc774\ud130(Categorical Feature)\ub97c \uc218\uce58\ud615 \ub370\uc774\ud130(numerical Feature)\ub85c \ubcc0\ud658<\/strong>\n- <strong>(Converting categorical to numerical)<\/strong>","83a2668e":"<strong>\ub204\ub77d(\uacb0\uce21\uac12)\uc774 \ub9ce\uc740 Feature\ub77c\ub294 \uac83\uc744 \ubcf4\uba74 \uc911\uc694\ud55c \uae30\ub2a5\uc774 \uc544\ub2c8\uba70, \uc5b4\ub290\uac83\ub3c4 Heatmap\uc744 \ucc38\uace0\ud588\uc744 \ub54c, \uc5b4\ub290\uac83\ub3c4 \uc0c1\uad00\uad00\uacc4\uac00 0.5\uc774\uc0c1\uc744 \uac16\uc9c0 \uc54a\uc73c\ubbc0\ub85c, \uc0ad\uc81c\ud574\ub3c4 data\ub97c \ub193\uce58\uc9c0 \uc54a\uc744 \uac83\uc785\ub2c8\ub2e4.<\/strong>","df437239":"<strong>Target Data\ub97c \uc815\uaddc\ud654\ud558\uaca0\uc2b5\ub2c8\ub2e4.<\/strong>","420c802b":"# <strong>4. \ub370\uc774\ud130 \uc804\ucc98\ub9ac(Feature Engineering)<\/strong>\n- <strong>Feature \uc911 \uc65c\uace1\uc774 \uc2ec\ud55c \ub370\uc774\ud130\ub97c \uc218\uc815\ud558\uaca0\uc2b5\ub2c8\ub2e4.<\/strong>","c622f937":"#### <strong>\ub204\ub77d(\uacb0\uce21\uac12)\uc774 \uc788\ub294 data\ub97c \ucc44\uc6b0\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.<\/strong>\n    - \uc704\uc758 info\ub97c \ud1b5\ud558\uc5ec \ud30c\uc545\ud55c Data Type\ubcc4\ub85c \ucc44\uc6b0\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.\n        - \uc218\uce58\ud615 Feature(numeric Feature)\uc911 \uba87 \uac1c\ub294 0\uc73c\ub85c \ucc44\uc6b0\uaca0\uc2b5\ub2c8\ub2e4.\n            - \ub098\uba38\uc9c0\ub294 fillna\n        - \ubb38\uc790\ud615 Feature(Categorical Feature)\ub294 \ucd5c\ube48\uac12\uc73c\ub85c \ucc44\uc6b0\ub3c4\ub85d\ud558\uaca0\uc2b5\ub2c8\ub2e4.","e9b39a5f":"## <strong>SalePrice\uc640 \uc0c1\uad00\uad00\uacc4\uac00 \ub192\uc740 \uc21c\uc11c\ub300\ub85c Pair Plot\uc744 \uc774\uc6a9\ud558\uc5ec \uc2dc\uac01\ud654 \ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.<\/strong>","6c52edae":"# <strong>6. \ubaa8\ub378 \ud559\uc2b5(Apply ML Model)<\/strong>","c636ef18":"#### <strong>Feature\ub4e4\uc758 \uc0c1\uad00\uad00\uacc4\ub97c \ud30c\uc545\ud574\ubcf4\uc558\uc2b5\ub2c8\ub2e4.<\/strong>\n-  1\uc5d0 \uac00\uae4c\uc6b8 \uc218\ub85d \uacbd\uc6b0 Feature\uac04\uc5d0 \uc591\uc758 \uc0c1\uad00\uad00\uacc4, -1\uc5d0 \uac00\uae4c\uc6b8\uc218\ub85d Feature\uac04\uc5d0 \uc74c\uc758 \uc0c1\uad00\uad00\uacc4 \uc785\ub2c8\ub2e4.\n\n<strong>\uc800\ud76c\uc5d0\uac8c \ud544\uc694\ud55c \uac83\uc740 SalePrice\uc640 \uac00\uc7a5 \uc0c1\uad00\uad00\uacc4\uac00 \ub192\uc740 Feature\uac00 \ud544\uc694\ud569\ub2c8\ub2e4.<\/strong>","c060a945":"### <strong>Target Data\uc778 \uc9d1 \ub9e4\ub9e4 \uac12\uc5d0 \uc601\ud5a5\uc744 \ubbf8\uce58\ub294 \uc911\uc694\ud55c Feature\uc5d0 \ub300\ud558\uc5ec \uc54c\uc544\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.<\/strong>\n- HeatMap\uc744 \uc0ac\uc6a9\ud558\uc5ec, \ub2e4\uc591\ud55c \uc815\ubcf4\ub97c \uc5f4 \ubd84\ud3ec \ud615\ud0dc\uc758 \uadf8\ub798\ud505\uc73c\ub85c \ucd9c\ub825\ud569\ub2c8\ub2e4. Heatmap\uc744 \uc0ac\uc6a9\ud558\uba74 \ub450 \uac1c\uc758 \uce74\ud14c\uace0\ub9ac \uac12\uc5d0 \ub300\ud55c \uac12 \ubcc0\ud654\ub97c \ud55c\ub208\uc5d0 \uc54c\uc544\ubcf4\uae30 \uc26c\uc6cc\uc9d1\ub2c8\ub2e4.","9a5b4071":"**This is written in Korean with reference to this link. Reference was made to MUHAMMAD RAAFAT's NoteBook.**\n- **Link** : https:\/\/www.kaggle.com\/adamml\/how-to-be-in-top-10-for-beginner\n\n**\uc804\uc5d0 Titanic\uc744 \uc791\uc131\ud558\uace0\ub098\uc11c \ub9ce\uc740 \uaca9\ub824\uc8fc\uc154\uc11c \uac10\uc0ac\ud569\ub2c8\ub2e4.Data Science\ub97c \uc785\ubb38\ud558\uace0\uc790 \ud558\ub294 \ubd84\uacfc \ud55c\uad6d\uc5b4\ub85c \ucf00\uae00\uc5d0 \uc785\ubb38\ud558\ub294 \uc0ac\ub78c\uc744 \uc704\ud574 \ucf00\uae00\uc744 \uc791\uc131\ud574\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.\uc55e\uc73c\ub85c \ub354 \ub9ce\uc740 \uae00\uacfc \uc81c\uac00 \uc2e4\ub825\uc774 \ubc1c\uc804\ud560\uc218\ub85d \ub354 \ub09c\uc774\ub3c4\uc788\ub294 \ub0b4\uc6a9\uc744 \uc791\uc131\ud574\ubcf4\ub3c4\ub85d\ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc804\uc5d0 \ubd84\ub958 \uad00\ub828\ud558\uc5ec \uc791\uc131\ud558\uc5ec \uc694\ubc88\uc5d0\ub294 \ud68c\uadc0\uad00\ub828\ud558\uc5ec beginner\ub4e4\uc774 \uc785\ubb38\ud558\uae30\uc5d0 \uad1c\ucc2e\uc740 \ub09c\uc774\ub3c4\ub97c \ucc3e\uc544\uc11c \ubc88\uc5ed\ud574\ubcf4\ub824\uace0 \ud569\ub2c8\ub2e4. \uc624\ud0c0 \ubc0f \uc218\uc815\ud574\uc57c\ud560 \ubd80\ubd84 \uc788\uc73c\uba74 comment \ub0a8\uaca8\uc8fc\uc2dc\uba74 \uc815\ub9d0 \uac10\uc0ac\ud558\uaca0\uc2b5\ub2c8\ub2e4.\ucd94\uac00\uc801\uc73c\ub85c upvote\ub3c4 \ud574\uc8fc\uc2dc\uba74 \uac10\uc0ac\ud558\uaca0\uc2b5\ub2c8\ub2e4.**\n\n**Kaggle Korea\uc5d0 \ub9ce\uc740 \uc815\ubcf4\uac00 \uc790\uc8fc \uc62c\ub77c\uc624\ub2c8 \ub9ce\uc740 \uad00\uc2ec \ubd80\ud0c1\ub4dc\ub9bd\ub2c8\ub2e4.**\n\n- **Kaggle Korea** : https:\/\/www.facebook.com\/groups\/KaggleKoreaOpenGroup\/\n- **GitHub** : https:\/\/github.com\/kalelpark\/Kaggle_for_Korean"}}