{"cell_type":{"d2e8b838":"code","4bfd9828":"code","aec00006":"code","44d01533":"code","3a02d298":"code","1ed51482":"code","dfcdfdc7":"code","7f885379":"code","c37e622a":"code","657a8da6":"code","91cbb786":"code","c2eee775":"code","0794f931":"code","46a75fc0":"code","3d2628b6":"code","94d2e3d0":"code","c051a0a3":"markdown","01600838":"markdown","9b88c5e6":"markdown","6e288680":"markdown","e8466f6b":"markdown","dbaa7a6f":"markdown","5b01347e":"markdown","f96c236c":"markdown","5d5da064":"markdown","e44d362c":"markdown","12c05cf9":"markdown","3770217b":"markdown","4ee0a9cd":"markdown","7c08bab8":"markdown","9a78ccf9":"markdown","8fcd7cd0":"markdown","93ea0d3c":"markdown","882a1c41":"markdown","260fe063":"markdown","05f191a4":"markdown"},"source":{"d2e8b838":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport matplotlib.pyplot as plt\nimport plotly\nfrom sklearn.preprocessing import StandardScaler\nfrom scipy.spatial import distance\nimport copy\nfrom IPython.display import display\nimport warnings\nfrom ipywidgets import interact, interactive, fixed, interact_manual\nimport ipywidgets as widgets\nwarnings.filterwarnings(\"ignore\")\nplotly.offline.init_notebook_mode (connected = True)","4bfd9828":"data=pd.read_csv('..\/input\/spotify-dataset-19212020-160k-tracks\/data.csv')","aec00006":"data.head()","44d01533":"data.drop(columns=['id','release_date'],inplace=True)","3a02d298":"x=data[data.drop(columns=['artists','name']).columns].values\nscaler =StandardScaler().fit(x)\nX_scaled = scaler.transform(x)\ndata[data.drop(columns=['artists','name']).columns]=X_scaled","1ed51482":"data.sort_values('tempo',inplace=True)","dfcdfdc7":"def find_word(word,df,number=10):\n    df.drop_duplicates(inplace=True)\n    words=df['name'].values\n    artists=df['artists'].values\n    t=[]\n    count=0\n    if word[-1]==' ':\n        word=word[:-1]\n    for i in words:\n        if word.lower() in i.lower():\n            t.append([len(word)\/len(i),count])\n        else:\n            t.append([0,count])\n        count+=1\n    t.sort(reverse=True)\n    s=[[words[t[i][1]],artists[t[i][1]].strip('][').split(', ')] for i in range(number)]   \n    songs=[words[t[i][1]] for i in range(number)]\n    artist=[artists[t[i][1]] for i in range(number)]\n    x=[]\n    for i in s:\n        l=''\n        by=''\n        for j in i[1]:\n            by+=j\n        l+=i[0]+' by '+by\n        x.append(l)\n    tup=[]\n    for i in range(number):\n        tup.append((x[i],i))\n\n    \n    return tup,songs,artist\n    \n","7f885379":"def make_matrix_cosine(df,best,number,artist):\n    df.drop_duplicates(inplace=True)\n    x=df[(df['name']==best) & (df['artists']==artist)].drop(columns=['name','artists']).values\n    artist=artist.replace(\"'\",\"\").replace(\"'\",\"\").replace('[','').replace(']','')\n    if ',' in artist:\n        inm = artist.rfind(\",\")\n        artist=artist[:inm]+' and'+artist[inm+1:]\n    print('The song closest to your search is :',best,' by ',artist)\n    \n\n    song_names=df['name'].values\n#    df=df.fillna(df.mean())\n    p=[]\n    count=0\n    for i in df.drop(columns=['artists','name']).values:\n        p.append([distance.cosine(x,i),count])\n        count+=1\n    p.sort()\n    for i in range(1,number+1):\n        artists=data['artists'].values\n        artist=artists[p[i][1]]\n        artist=artist.replace(\"'\",\"\").replace(\"'\",\"\").replace('[','').replace(']','')\n        if ',' in artist:\n            inm = artist.rfind(\",\")\n            artist=artist[:inm]+' and'+artist[inm+1:]\n        print(song_names[p[i][1]],'by',artist)\n    ","c37e622a":"a=input('Please enter The name of the song :')\nb=int(input('Please enter the number of recommendations you want: '))\ntup,s,ar=find_word(a,data)\nans=widgets.Dropdown(\n    options=tup,\n    description='Closest Songs To '+a,\n    disabled=False,\n)\ndisplay(ans)","657a8da6":"make_matrix_cosine(data,s[ans.value],b,ar[ans.value])","91cbb786":"def make_matrix(df,best,number,artist):\n    df.drop_duplicates(subset=['artists','name'],inplace=True)\n    x=df[(df['name']==best) & (df['artists']==artist)].drop(columns=['name','artists']).values\n    artist=artist.replace(\"'\",\"\").replace(\"'\",\"\").replace('[','').replace(']','')\n    if ',' in artist:\n        inm = artist.rfind(\",\")\n        artist=artist[:inm]+' and'+artist[inm+1:]\n    print('The song closest to your search is :',best,' by ',artist)\n    \n\n    song_names=df['name'].values\n#    df=df.fillna(df.mean())\n    p=[]\n    count=0\n    for i in df.drop(columns=['artists','name']).values:\n        p.append([distance.euclidean(x,i),count])\n        count+=1\n    p.sort()\n    for i in range(1,number+1):\n        artists=data['artists'].values\n        artist=artists[p[i][1]]\n        artist=artist.replace(\"'\",\"\").replace(\"'\",\"\").replace('[','').replace(']','')\n        if ',' in artist:\n            inm = artist.rfind(\",\")\n            artist=artist[:inm]+' and'+artist[inm+1:]\n        print(song_names[p[i][1]],'by',artist)\n    ","c2eee775":"a=input('Please enter The name of the song :')\nb=int(input('Please enter the number of recommendations you want: '))\ntup,s,ar=find_word(a,data)\nans=widgets.Dropdown(\n    options=tup,\n    description='Closest Songs To '+a,\n    disabled=False,\n)\ndisplay(ans)","0794f931":"make_matrix(data,s[ans.value],b,ar[ans.value])","46a75fc0":"def make_matrix_correlation(df,best,number,artist):\n    df.drop_duplicates(subset=['artists','name'],inplace=True)\n    x=df[(df['name']==best) & (df['artists']==artist)].drop(columns=['name','artists']).values\n    artist=artist.replace(\"'\",\"\").replace(\"'\",\"\").replace('[','').replace(']','')\n    if ',' in artist:\n        inm = artist.rfind(\",\")\n        artist=artist[:inm]+' and'+artist[inm+1:]\n    print('The song closest to your search is :',best,' by ',artist)\n    \n\n    song_names=df['name'].values\n#    df=df.fillna(df.mean())\n    p=[]\n    count=0\n    for i in df.drop(columns=['artists','name']).values:\n        p.append([distance.correlation(x,i),count])\n        count+=1\n    p.sort()\n    for i in range(1,number+1):\n        artists=data['artists'].values\n        artist=artists[p[i][1]]\n        artist=artist.replace(\"'\",\"\").replace(\"'\",\"\").replace('[','').replace(']','')\n        if ',' in artist:\n            inm = artist.rfind(\",\")\n            artist=artist[:inm]+' and'+artist[inm+1:]\n        print(song_names[p[i][1]],'by',artist)\n    ","3d2628b6":"a=input('Please enter The name of the song :')\nb=int(input('Please enter the number of recommendations you want: '))\ntup,s,ar=find_word(a,data)\nans=widgets.Dropdown(\n    options=tup,\n    description='Closest Songs To '+a,\n    disabled=False,\n)\ndisplay(ans)","94d2e3d0":"make_matrix_correlation(data,s[ans.value],b,ar[ans.value])","c051a0a3":"Spotify is one of the popular platforms where you can listen your favourite songs , podcasts and playlists . Being a spotify lover myself, today i am gonna do some analysis on its songs :) Hope ya all like it :)","01600838":"# First Look At The Data","9b88c5e6":"# Function To Calculate Euclidean Distance And Make A Matrix","6e288680":"# Function To Find The Relevant Song :)","e8466f6b":"## This file is based on previous file so the concept is same but in this file i have used a widget system to select a particular song from the songs with same name with the help of artists :)","dbaa7a6f":"![part2.PNG](attachment:part2.PNG)","5b01347e":"# Hope you liked the file :)","f96c236c":"# Guys the widgets will work on edit mode :(  I have still put the ss to show a glimpse of the widget :)","5d5da064":"# Spotify","e44d362c":"![part4.PNG](attachment:part4.PNG)","12c05cf9":"![part1.PNG](attachment:part1.PNG)","3770217b":"![](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxMTEhUTExMWFhUXFxcXFRcXFxgXFxcXFxcXFxUYFxUYHSggGBolHRUXITEhJSkrLi4uFx8zODMtNygtLisBCgoKDg0OGxAQGi0mHyUvLS0tLS0tLS0tLS8tLS0tLS0tLS0tLS0tLS0tLy0tLS0tLS0tLS0tLS0tLS0tLS0tLf\/AABEIAKgBLAMBIgACEQEDEQH\/xAAcAAABBQEBAQAAAAAAAAAAAAACAQMEBQYABwj\/xABCEAABAwIDBAcFBQYGAgMAAAABAAIDBBEFEiEGMUFREyJhcYGRoQdyscHwMkJSYtEUI4KSovEVM0NTwuGDshZjc\/\/EABoBAAIDAQEAAAAAAAAAAAAAAAECAAMEBQb\/xAAuEQACAgEEAQEGBQUAAAAAAAAAAQIRAwQSITFBUQUTIkJhcTKBkbHRFCNSofD\/2gAMAwEAAhEDEQA\/APQHOTYC4x35pCDz7\/7reZmF0d0nRLmhx3Jwb0bBSYPQ8lw3J9qbc1CyVXQDB9fqnWMQNYVIYxBsKQIauLbo3hK1LYROjuibTpyFvYpGRYtbq\/cx47fRZix73z0QpIeSEN5qxDE1LFbhok0uvjm+GXEv3+38Ay4nDnwRmssi6NJUSBupIHeQFFdjMbRvLvdF\/U2C1ZM0Ifikl+ZXCMp8JMmFi50appdpB92I\/wARt6C6hTbQzHcGt7hc+qyS9pYI9O\/sjTHR5X4o1AYm3vYz7Tmt7yB8Vi5cSmdvkdbsOUeQURwuVln7XXyx\/UvjoH8zNhPjlO37+bsaCfXcoE20zPuxuPeQPhdZ\/o0hjWaftLO+ml9l\/Nl0dHiXfJcnaZx\/02jxJRR7Qu4sb4EhUJjSAKr+t1H+Q\/8ATYfQ11Ji7XkNIyk7tdD2KblusO2QrX4fU54g69juPePq\/iuv7O1cstwn2c\/WYFjqUeh97dEOQFE92ijZ11DJuQ70IRtiHemHzaeKJxI+vkpTJuiOujSZFFdM7fuXCU9qbawe8iOujKodraroKWaW+rWOt7xFm+pCvOlK889rta4UzIRq6WQCw3kN13e9kUbcYtkVSaR55i37rDqSLjM+WpeONh+5i8LMefFNCK1HBGN88zpD7rLRM9TIUe3rwKswtN208cdO3\/xMAf8A1l6shTXrooOFPFHGeWYNu\/8Are7yWCKtmxvg9E2dpLNaANwC0sUYsqrChZuqtWuXSiqRilJWWrL2BCMhOxDRIRyCpsvobY0cd6IAX0Rhg5JLIWShdULmIgnFCDbWp0MSxsRPna3Q3J5AKrJljBXJ0FRb6AypGt1QSVZ+623fqo7nP4uPhp8Fiye0sUerZYtPN\/QtWZWi7iB3m3omZcTjbuu49g+Zsq4Ackluxef1Gonlm5M3Y8MYqiRJizz9hgHvEn0FlCmnndoXkdjbN+Gqfv2JNVR8Rakl4K11KeK4UysHApGsVsfqBtkD9m7EhogrTo12RWpFe9lQcPCD\/DVddGuEaG1MPvGUrsPTT6A8loOjXdGjsRPesy76Qpl1OVqpKcFQ30aXZQyyWZ5lOVe4CMuZp3GxHwPy8k7HRJ+KEtNwtOkn7vNGX\/clOo+PG0SXtvpbRAIgNydiddK9i9TZykuLI4aP0TxCbY26etoowrkYc1DlAUjIm3AIojQyXAcF5ftRO2bGadrv8umYZ5OQEYMzr8haNg8V6bU6C\/w\/ReH1FbduK1l9XltLEeBEj+tbt6KH+pJmdQ+42LmRQYGP2iuY+T70pmk5WaTLJ6ArUbARmaaaofve4nxccx\/9vRZnAOpBVzcohC33p3ZT\/Q169D9nlDlgZpq7Xz1VOFXIum6RsaaKzbceCkWTscWm5OCJdHcjnOLuy4CUBAxqPKsrNiDG9A4JTzQkXQQWwmJUgRAqAscY5BHJmc5pGosR2g3\/AEQl6SN1pWHg4Fp+I9Qs2rhuxsaEqkSOjSOplObGlyLz042zbFlf+zBR6+SOGN8shsxjS5xsTYDUmw1VvkVBtfVhsJga3pJqgOjjj94ZXPdya0G90ix2x1K2RdnsdgrM\/Qh\/Uyk5220dctINyNbK5\/Z1QezGlbHRmLLlljlkZPzMjXb+7LlstdkRyY0pNLojkQP2ZL+zKdkXZEm0m4g\/s6F1OrEMXZUUmhW7MdjOISRVtHELdFP0rX3AvnawOjseGqvxGqb2iUxFMyoaDmppoptOLQ7K\/wAMrifBStp8ZbS0r6m2awGRt7BxcQG6jhrfuBV6juSoDLDo1xjSYc97oo3SNDXuY1zmg3DXEAkX7FJDUNtC2RzEgdCpeVIQooksiiFEIk\/ZcAjtJZGijsklUkjrHt1+X6KLO1eiwT3wTMU+LQjRogc7kl1QlXiXwOMCCoOlkbHJuSQcFF2Rvgze1mJdDSTSfebG4jeNbWb6kLxPGP3WHUkPGZ8tS8cbX6GHwsx58V6N7Yqy1MyFmrpZGttxs3rf+2XzXm+37wKswtN200cVM3\/xMAf4586q1D5SLMK4sHoSKOniG+omfKfdZaFnr0hXsOzdFZrRyAXmsdLmr4od4poo4zb8TW3f\/XI7yXseCwWbdTAvI2T0JWWyea1OADl6JsC+71WgoqiSx3LROJhj0YkCWSJGQ+Ny6yaY+6IlJQ1hDv1RNQAI2FRksQhPshB63LUd43JuOK57FOYFzPaGp2R93Ht\/sW4Me6W59EgHilQUZ6tuVx5bvSyjYziradmYskkcTZjI2FznO4DQWHeVzYrckzTXNA4xicdPGZJDYaBoG97j9lrRxJWY2K6SWpqpqltqhpY0NP8Apxubna1vn9XKtMIweWWUVdaB0o\/yYQbspweR+9Jzd\/1bp29DiTH7m1MRYeXSRatv2ltgnSSHT8IGli6HEZG7m1MYkA\/+yLqvt\/CQVpLKh2pbldTVH+1MA4\/kl6jvXKr5I0BvpiWSIkiRoAiSyUFZys2piMNW6F13092uu2wD9Q0i\/wBoXB8lFGwpNlziVG2aKSJ32ZGOYe5wI+a83ilNUzDqJ4uY5Xidp5U2gB5ggrUbCYvPMyWKpIM0L7EgAXa4XYbDTn4WWIjqZf8AGal9LkDwXhsbxdshbbpGh1xke7K4g81bCNNr0HS7R6y9iBQ8Ax2OqYS0FkjdJYn6PjdxDhy7UzhmIOfU1UDrfunRlnuPYD6EHzSK\/JW4ssrLgEZCFEUQhIAlKUKEAm0se34\/QUaZuu9TJG3BHZ68FCc64uutoJ3Fr0M2XsaKQu7EDxvQ3OnJdJIzuQ80iyjveLp0MUWp0umiuQSbo8y2ombNjNMx2sdO0zydgjBldfstEweK87wQGpr2Ok+\/KZZO4EyyegctFU1t\/wDFqznlpY+R6V+V1u3o4T\/Ms\/s71Iqub8MPRN96dwZp\/AJFiyu5NmzGqijVez5hmnmqHb3vJ8yXf8vRew0TeqF577NqHJTtO7Nr56r0qkaLWWnGqiVTfIUkVx3JgDv81PsAoEjNf0TxK5quRwhNudYhDM8iyPogd5VtGXdzSH4XgqQ63NVreqdNyfa\/n9eKrlAthkXTJYPoiib9BBCCRvUunjtqd\/BY9RmWGDky+EXNpIdY2ycahRALzM5ynJyl2zoxioqkLSmz3N52cPgfkpN1BcbSMPPqnx3etlOVmCVxr0BNc2cqPbKE9AJWC74Htmb\/AAmzv6SfJXiGRgIII0IIPcdCrrFTp2V+JQippXhv+pHdveRmafOyrf8A5GW0lPI1meWYtjYy9ryah1zwALSpGyUlonQnfBI6PwBu0+R9Fk3DocTgpiOoKiSaPlaZm4dzgUUixLtehrNnscdO6WKWPop4XWewHM0tOrXsPFpCgYziM8tcyhgeIm9EZppcoe4NvlDWB2gJuNSOPZqm1Y\/Z6inrho0HoKjkY3nqk+67j2hNPeIMYL5CGsnpw2N5+zmY5t25uGgv4hSiJeUQfZXUFjKijcbup53Ae448P4mn+ZY7pTG6vadGz9Ll7XRTNdb+Uu81oMBpJRLLiUDXPBqJmvjG+SAkHMwHe4G58OxIzZySrop3Njc2VtVLJCHjKXMcGZm9bgbDsu1Pxdjqk2Xl+gxCCYaR1cLY3cuka0GM95GUean1uycf7x8PUmdK2cPcSQJGnzDTc3HamJ8Gmmw2CMty1ETY3MzEdV8fV1cL72381qY72GbfYX5X4qpsrcvQqMW2dineJQXRTtFmzRHK+3J3B7exwKiYPgE8VU+olqGyZ4wwgR5CS0jK42cRewtorXFcWipwwzOLQ94jacrnddwJAOUG246lRYtoI3VU1LlfmhjbI99hls4A2GtybOHDmhyBN0WzmppzUxg2KxVULZ4STG++UkFp0JBu06jUKYQh0K0R7Lk6WICEwpwUGRtiR238Dr81OUStb1geYI+vNbdFKslepTnXw2Qy\/wBFzRolO9cL6fJdoxJiN0VNtZXiCmml4sjcR3gHKPOyupHLzv2zV+SjEYOsr2tt2N659WjzRuk2Olbo80xb91hlLFxnlmqXX32baCLw6sh8U02G1FBGN9RO6Q+7GBEy\/wDE6TyR7fvAqWwtILaaGGnaQbgljAXnT87nq0bSXr6en4U8MTHcs+XPJ\/XIfJYUrZtPT9mKTKxgG4ALWRnnoqrBorBW4C3eDN5OedbeqbfECbpyS1xfzTT9\/wD2ogMakvySuGiIDtQyNKtRjfqN5Lp+GPs+u9MM0U+kaXfXqhle2NvoGPl\/UkUzFKSAJQvJavUPNO\/Hg7mHHsj9QkQQBGFlLBiuHVuN418lOa64BHEA+ajTNu0osMdeMD8JI\/T0KOB1ka9USX4bJC4oki1lRn4f3WIPbwqIg8dr49Db+E3VV7QsPeHU1ZExz3wStzNYMziwuB3AcCD\/ADK22vicI2VLBd9O8SWG8s3SDy+CuqWobIxsjDdrgHNPMHUIrjksuqZHxnDm1EEkLtz2kdx3tPgQD4Kr2eY6WAQVdOc0Qax3SNDmPIuAWk\/a0AN+1aErroCJ8UNxQtY0NY0NaNA1oAA7gNyO6qsW2jp6d4ZK8hxGY2a5wa29szy0HK2\/EqzbICA4EEEXBB0IO435KEpi3XLHbZB1XPFh7HWDmOmmdyaLiMfzfJZXGMRlmw2CkJcJxMaeQXNyY9GAnjfM3xaioWOoWbjb7D+mopWgEuYBIy2\/MzredgR4qjw+sBrqSq+7W0xifyErLEg+IDVo9iq\/p6GB5NzkyOJ3ks6pv32v4rIOw5zY6mkZfpaSYVVLpvYetlbzsD52RXoGPoXfs3GSGenP+hUSMHu30+BWvWK2Sr2OrpnM0bVQxzgcnN6kje8Oz+S2t0klyLPsSyEtR2SKJCMbypiujuwnlr5b\/S6lFKG30V+N7ZKRXJWqKUfX90jtO1G0WJbxBI8tELmDivQJ3yc5egMhFuxeU+2mpZ0LG21zjLzGhufLTxXqktgvHvbfKLwN5l7vINHzQn+Bl2P8R5Ze1rL0X2e0z3zPnkcXvdqSd5J3nvXn9JAXva0byV7TsXhJjj3b1mxK5GmT4N1h4s0KYD9fRUenFmp8ha2Z7CcLqM866hPAHjYefwTUt77yoiSHo2IZGXSgm6dYE1lFKqI7IbK0pYco7UMFPrc8Nykri+09Zu\/tR\/P+DVpNPT3v8hEqRKAuKdA5EEiIIECI0UfDnWe9vPUeGh+SkqDfLK08zY+KS9s4sZK00WhC5EhXQM4jhcWQxRNaA1oDQNwAAA7gEa5AJyzG0FdKyvoI2yFsUplEjRbrFrQWg3F+K06y+31I4wsqGfbppGzC34QeuO7cfAorsMexnZumbUyV8kguJJXU+v8AtsaGkDle48gsxXzvbQxxTFz20tWIqhjTlzxgksuToBvAubblp\/ZlUdJSvf8AinkcfENPzTtPGIsUmYRdtRA2TUaZmHKR5AnxTdMsvlmf9lkJ6erfk6hyiN2bOGNzOPRB9yHWGXUfhWyn2bpnztqTF+9aQ4OBIBcNzi0GxParSOMAWaABwAFh5BGErduxJSt2jNYFh0tJPLEGF1PK8yRuBb+6cR1muBINtABa\/DttPrcFD6mKpa8skjBa6wBEkZ+46+7XW6tSo89bG17I3SMa998jC4Bz7Ak5Wk3OgO5Bg3NlLW4G2OeCenjDS2RwlDRa7JRZzrdhAK0CZjqLyOZkeMoBzltmOvwa6+pHHRJRVDn5s0T47OLW5iw5wNzxkcbA8AbHsChG2PFJdEQhTpCNigJwIGhGFYkKVGItyy34OAPiND8kD1KxyK7A78JB8DofkobZARp5rs6aW7EvpwYMi2zZFqAF4h7ZakOqo2D7rC4\/xOt\/xXt1VY9\/1f4L579p5JxCS5BFmZbcBl3Htvc+IV2bjGHBzMDYHDTJNmto3Re44NT2G4WXn3s7wwxxNcRq7f3nt7rL1SgiAA5pcUajZbOduh4N5InaWRHfZKQNyZipDbrIMn1\/ZPW7u3+6Qk\/i+aKC0NMGm9TaaMk79OKha37Oaq8U2lkpJGl0RfAdHFv22n8TeDh+X151auU4424dlWCKlJJmuSqLhmIxVEYlheHsPEcDxBG9p7DqpS8o7vk66OXLlyUItkQCQBKoAIKBiI4qeFGrWaKrKriPB8k+J+ZoPMA+aQqLhMl47fhJHzHxUwroY57oplElTaESLkqIBFxaCCDrfSy5KoQj0NDHCzJExsbbk5Wiwud5sqPHerXULufTMPaC1tvitHdZ3Gxmr6Jv4RM8+TQPgiNHs0YXEpCuQFOTbomlwcWjMLgOsLgHfY7wnEhChDkl0qQhMkAVJZKFwTpCsWyUBJZEEwBuoizNc3mCFm6d2m46bxyWme8AXJAHM6LNyPHSPym4JuCO3UroaGbTaM2ohdManaf0Xke1ey5lremvoct221uNBrysvY3tUMYQwuLjqSt+VblRVp3tbZS4Dh+VrRbcFp422CSnpcg0T1lPFDvl2IQlDUj0ROmiAyBIQGInmlI+tEgHb8UURnOiTU9IHCxAI4qU0pVN3gq2LsweJYJPRyGooX5T95m9jxvs9vHv38iFpNlttYqoiJ46Go4xOOjuZjd97u3j1VjMVkNpdm2TDMxuRwNwRpqNxB4G6xaj2fHKrj2Ww1ex1M9GRALzTAts56QiGvDnxjRs4F3t5dI0fbH5hr3716RS1DJGNkjc17HC7XNN2kcwQuBlwyxOpI6EZKStDiVcuVQwoKaqBonAhkGiSXQV2Q8IfZ7m8xfy\/urUqjY\/LM08L289Pmr6yu0buFegMy+KwbJESFaioh4jWGGzy0mP75Au5n5rcW8+W9SoJmvAc1wc07iCCD4hESqifZ9ly6F8kDibnoiA1x5ujILT5IB4LdzgBc6AakncBxN1nMGBqKqSsseiawQ0\/wCZt7vkHYTuPEKYcEzi088kzeLDkYw+82NoLu4kjsVq1oAsAABoANwA4AcFA3QV0l0JKUKIUW64pFyZIAqWyanqGRjNI9rBzc4NHmVnsQ28o4rgPdKeUbbj+Z1h5Epugcs01ktl5hiXtLldpDE1g5uJe7y0A9VlsSx+pnv0sz3D8N7N\/lbYeiKYdjPX8T2qo4Lh8zS4fdZ13eIbe3jZZHFPaWTpTxAD8chufBjdPUrzguQscnVEUDcUmMyzOzSyFx4cAO5o0HktFTTi4t4rE4K7ctZT7hzXT07W0z5I1IvC+\/JGSbaKNSv0Tj1sXJkfDY808EV1Gidru17067kg1TDGVodugaNOKRoTsYSlq5EbF2oXN8fEJ1wTIcOdlEM0G0JHlKAgeTwUEdJEeQ3F\/RMvFzbyv2I5nm1vWyZExAv2rTBMw5JK6HarDI5m2e0a7tyyH7FVYbIZKU5oibvhdfI7mR+B35h433LbU8oI1Phron5Iw4WOoPNZM+COTiSNeDK4Ljoa2Z2pgrGnIS2Rv24naPb2j8TfzDxsdFeLzjHNlLkTQOLJGm7S02cD2EKTs\/t05jhBiAyP3NntZjv\/ANB9w9u73V5\/U6KWJ8dHTx5IzVo34XOCEOvqNRvCIrAywpsRbxV9TyZmNdzAKp8RbopWBS3it+EkfMfFTSusjj6j5VcEyeUiJCV0GZhEhSlVtZjlPH9uVt+QOY+TbpJSS7Yyi30ixuuWTrNuYm\/5cbndriGj5lUNbtpUP+yWxj8oufN11nlqsa+pojpMkvFHpLyALkgDmVU1m0lNHvlBPJnWPmNAvLqvEZJDd73O94k\/HcopeVTLVv5UaI6FfMzdYp7Q2RtLmRmw1u82\/pbe\/msPUe0Cvn16Xomm9mxNDbDh1zd1+4rOYrUmV+Rp6jTr+Z36BFBFYW3rZiUttzfL\/wBFM4Q3VFEyWpe85nuc53NxLj5nVNucjggcdwKnU+ESO4fFWxhJ9ID2pclW5E0LTUuyxcdVd0mygFrhaY6abKHngjAmmcdwTsGFSOOgK9LGz7WncLJ+DDmjgtmPRccsy5NWr4Rk8Kwp4te60kNG6w9f7q3jp2BOdGOC0wxqHBVLJuIFPFaw81NN7WQyWunctxorijuwYDruCcNr7kDRp9fFFfsSseKpBEpU2SAuzIFiOe5Mm3NOXUcyWTIEhxpSPJSLk5mfQ1mA8UO\/j4XXLlelwZHLmh6AaqQ09q5cqZ9miHQTXc1VY7gMdQ0gtF+a5cqZRT4ZfCTXRkqHEavCnZbGal\/2z9pg5xO4e6dO7evSMDxyCrj6SB4cNzhucw\/he3e0\/QXLlwtdp4Qdo6WKblG2O1rdFAwetbG94ebAi\/iP7rly4rm4TUkbMcd8XFg4ntjFH9ljnnwaPM6+izVbt3O77AZGOwZnebtPRcuQlqckvP6GvHpcSXRRVmMzS\/5kjndhJt\/LuUIylcuVLV8s0xilwgblEyInglXIMYm02DyO4KLtHT9CGwt1leL6fcZuzHkTuHjySLls0WJZMqUjDqM8oppFfh+zrtLiwWko9lgLXSrl6jHpodnFnnn0aGiwFgG5W0NAxvBcuWhRS6KXNtWE2AX4KQyNcuTMric+yivcLrlyeCK8rCaeO\/yTl1y5R9jQ6GJSLp+2i5ciyQ8jRPkiLrBcuUrkKfFggowVy5BjxGpXpskLlyiBZ\/\/Z)","4ee0a9cd":"# Standardize the data","7c08bab8":"# Recommendation System Using Cosine Similarity ","9a78ccf9":"![](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBw8PDQ0NDw4NDQ8ODw4NDg4NDg8QDg8OFRIWFxUVFRYYHSgiGBolGxUWITEhKCsrLy4uFyEzOzMsNygtLisBCgoKDg0OGhAQGy0lHyUtLSstLjctLSsrNy01LS4tLSswLS0tLS0tLS8tKy0tLS0tLS0tLS0rLS0tLS0tLSsrL\/\/AABEIAKgBLAMBIgACEQEDEQH\/xAAcAAEBAAIDAQEAAAAAAAAAAAAAAQUGAwQHAgj\/xABGEAABAwIDBQYCBQgHCQAAAAABAAIDBBEFEiEGBxMxURQiQWFxgZGhMjNCUnIVJGKCkrKz0RYjNHOxwfAXJTZDY3Si0uH\/xAAZAQEBAQEBAQAAAAAAAAAAAAAAAQMCBAX\/xAAmEQEAAgICAQMEAwEAAAAAAAAAAQIDERIhMUFRYRMyQnEiI5EE\/9oADAMBAAIRAxEAPwDxFERUEREBEUQVERAREQFERAUREBERBz0MRfI0AX1XJirrzOHSzfgsvgFOBZ1tSsftDHlqHWtZwB0RpNdVY1EURmqKIgyeGHvNXb2lbpC78TV0MOPeCyu0Db08bvuvHzCQ2jujXEREYiIiCqr5VQVERBUUVQVFFUBERB8oiiAiIgIiICIiAiIgKKqICIiAvqMXcB5r5XYoGXeEWI3LacKjsxa1jEued56Gy2lpyQud0aStLkddxPUkqy1yT1p8oiKMRAEWRoIgO8RcotY3L6w6lfcHLbXxWZxiImkcPEZXfNcEcy71NUA6OsQeYKreK9aaYqtixzBQGmeH6I1c3p5ha4owtWYVEREECIgqIiCoiIKiiqCooiCKKqICIiAiIgIiICIiCIiICIiAsngsV3XWLWxYFDoCjvHHbt45LkpiPvWC1JbBtTLqxnuVr6srknsREUZvqMahZBklgAsc02IK7DmXtqpLqs6dwSrljqSPFdFmgte6ByjSLO9XVzzlaHENtqOqxEzbOIXfbEZC3KL+C6lZ9Y4dNFXN\/dwKqIqzVERAVURBVVEQVERBUUVQfKIiAiIgIiICIiAoqogIiICIiCxi5AW34PHZoWrULLvC3Ohj7mnO2iQ2xQ1XHpc1Q\/8AR7qxwCycmGSvleXNLRmOpWWoqGNlu6CepVc8ZmWrkKLd3UEUgs5g18QLFa1jGFup3dWH6JU0lqTDGrljktoVxIjh2cyXXWVuppduy2qcy4aSL6aLrEqIqbEREQVURBUREBVREFVURBUUVQFFVEBERAREQEREBRVEERVRAREQZLBo7uutugfkAK1PDKlsdr8lkMSxZuVrYzclIbUtEQ7+IV+Z3gPRdWKW5WI7Qb6812IZU26i22eglsupj1W1zBDbMTrfouGGZdWY5nySHk1pVWfDBEakKKuOpUUeYRRVAREQEREBERAVURBUREBVREFVURAREQEREBERAXZw7D5qmVkEET5pZDZrGC5P8h5nQL5oaSSeWOCJhkllc2ONjebnE2AX6Q2F2PhwunDQGvqZADUT21c77rejB08ea4tfixzZoxx8tK2a3OsAbJiMxc7n2emNmjydIRc+1vUreaTYjCYWhrcPpXW8ZYxM4+77lbAvklY8pl8+2a9vMsLNslhjwQ7DqHXxFPG0\/EAFanj26WhmBdSvko5NbC5lhJ82u1HsfZeiE\/6+C+Cf9fBdRMpXJeviX5j2l2Zq8Ol4dTHYO+rlZd0Mn4XdfI2PksMv1JjGGQVcD6aoYJI5OYPMHwc0+Dh1X532w2ckw2rdTvu5h78EtrCSM+PqORH8wtYtt78Obn1Plglb\/JRFXoZGoIcGyN8QA4dHBcbJbLqxyFvL3HgqZfJTRWddO+2pUq8RzR8JoAvq49Vj3PJXyq65yKIiORERAVREBFz0tHLMSIopZi0ZnCJjnkDqbDQLhItodDy1QRERUEREBVRVAREQFVEQVFUQRFVEBEVQer7i8Ba+SoxJ7QeEez09\/CRwvI71DS0frFbjvE25OEiBjIBPLOJHNL3FsbGttqbak3I00XLuqpRFglFbnIJJnHqXSO\/yAHssztFT0DoeLiDKZ0MJD89U1pYwkgePXQW8V597tuXy73i2Xdo3DxOq3sYtKbRughudBDAHHyHfzLi\/pptEe9xaq3UUUdv4a9El3nYJSjJTtkeBoG0lKI228s2UWXWG+bD7\/wBmrrdcsF\/hnXcfpvHxjaJDvRxiIkSSRSEfZmpmNI\/ZDStgwzfIbgVVGCPF9M+x\/Yf\/AOy2en3n4NUANlMkV9MtTT5gPXLmC5KjZLA8SjL4GUx\/6tA9rC06cw3S\/qE69YSZp+dNMlgG1dDXj82naXjUwv7kw5fZPP1FwsNvTwUVWGSyADi0gNQw\/oAf1g\/ZufVoWrndPUw10MlPVx8BkjJOK67KiPK4HRoBDj0OnsvVZ4w9rmHk8FpHkRZPE9Mp40tE0l+Vltewex7sTke57zFTQ2Ej22zucRcMbfQGw5+C1ieMse9h5sc5p9QbL1zctVMNFUw3HEbUmVzfHI6JrQfixy0l7stprTcMo7Y\/AYSIZI4BIRymqniU+ds4+Swe1W7akbBJU0svZeEwyFszy+AtH6R1afO59Fjdrt3dc6pqKmAsqmyyPlyl4bMMxJsc2ht5Hw5LUcRkxCmhOHz9ohhc4P4Etwwlv3b8xfXTS9uiM6RM6mLMOi9j3c4JRzYVBLNSU00jnzgvkhY9xAkIGpHRcrPyFhRFPIafj653PhM0uv3iGnINRppopt3OaNzEQ8WVXtW0GxlDX0xmo2wxSuYXwywANilPRwbpryvzHyXnexmyb6+qfFJmiip\/7Q4AZw69gwX+0SD6WKrquWJjbWUXuFR+RMKyxSMponkcjEZpy23NxALreui+K\/ZTC8UpuLSiGNxzZJ6VoaA+\/J7BYHwuCLo4+vHrHTzLYfAo8QrRTSvkYwxvfeMtDri1uYPVd7eHstDhklMyGSWQTMe53GLCQWkDSwHVbnuzgpqYzUczYW4lFNM09y8vCAZqH2+gefPxWy7S1eFxui\/KApS4h\/C7RCJDl8bd021so4tlmMnw0rdTtPQ0tLNBUSNp5TKZeI8G0jLNAFwOYsdPPRa5VsgxbaHLBdkFVOwXy5SWsjHEeB4F2Rx1+9qt42GwzD6qTFZBS0k8XbXcAugYWtiIBAYCO6PJfWyf5PgxjEqcx00dR2poo2iEZmt4RLhGQO4OfRE5xFrTETvTYMSlwjCIYWzRU8EbyWRtEAke\/KNSdCTzFyeoXiW2dRTS4lVS0mTs73MdHw2cNv1bc3dsLd66922mrMMiEBxIUxDjJwe0QiUXGXPl7ptzb8lgdttl6KpweSooqamY9jGVkMlPCxhkjAu4d0AkFhJt1AUhnhvFZ3O+\/wDHhiLN7GYR23EqOltdr5Wuk0uOEzvPv+qCPder7zqbDqaGlpmUdFFLVykgthiiOSNuYAvABaHPMbSb8i5db9Hqvlitor7vDVVvm21JStp2uijyFrQ3MYOC7jAx2Y0ZRmaWumJI07jbW1zaGq7rblGxERHQiKoKiiIKoiICqiIP0luxnEmCYeR9mN0Z\/EyRwP8AgsrtFgkOIUklHPnDJMpzRkB7XNIIIuCOYXnu4zGg6Cpw9x78T+0xAnnG6weB6OAP669LxKmM1PNC2R8LpY3xtlj0fGXNtmb5jmvL4s+Tkia5J\/bT6fdzglK0GZgeQPp1dSRf2Ba35Ll\/IezZ7mTC78rCdl\/jnusFT7nICc1TX1M7ye86NjGE+7sxXb\/2O4Za3Gr7\/e4sN\/4dlpuPdpyr63l26rdpgtS0mFpivyfS1BeB7OLgtNxfdjX0L+04dUOnLLkBhMNS0actbP8APUX6LM1W6IRHiUGIzwSD6JkGvpnjsR8F84RjOPUFXDRV9O+uhlkbG2dgzkAkDMJGjUDmQ8A+YV20ra34238S2Pd\/X189EX4hE6OVsmRjnxmKSSMBvec3wN762F\/mdhe4AXOgGpPkAuZ38v8AJarvDxcUmGVL72kmb2eGxsc722JHo259kjuXn++3Xq\/P9VLxJJJD9t73\/Ekrs4TUVULzU0plY6EXfLECQxpNu\/4WPQ6Lor0zdrtTQQUxoqhrad73PL5njNFODewefs2By2OmnmtJfTvPGvUbdfDN7FSwAVFPDOORdGTE+3zBPwW9009JjVBcsLopLsLZABJFIDa4I5EXvcdV0ZthMHqDxo2AB3e\/Np\/6s+gBIHsmK45QYPScCAxl7QeDTRvzvLyb5nm9wL6kn2UeW3G32R25t3MPCwxkRIcY56qO\/IEtmcL\/ACXiWKPkdUTulJMhlkMmbnnzG9\/de0btJC\/CoXuOZzpahzj1cZSSutLs5hGKvNWx13uJ4ohkDHZxe+dn2XcuiOqXit7bdbc7I80FQHXyNqDw7nldrcwHle3xKzWyLGCTFsoaL4nNe3Thxn\/EuXXxbHKHB6Tgw8POxpENKx2Z5cT9J\/iBe5LjzsvO9iNsDR1UrqgufDVPzzkauZKSTxAPc3HT0skHGb8rQw+1r5HYlXGW+ftMwN\/BocQ0DyygW8rLcdy8snHrGAnh8JjnD7IfmsD62utrxHZvDMVIqQ5r3HQy00ou4DkHDXUctRdV9VhmB0zmNLWuN3cJrw+pmf4X8QPM2ASZ2tskWrxiO3RcGjasFtruogZLfftb90NWF31\/W0H4J\/3mrA7PbUf77GIVJDWzOcyQ8xFG4ZW28m2b7Ar1bG8AoMSbDLM4SMjDjHJFMA0sdYnUaEaBNpb+u1Zn2a3uUP5pWf37f3AsPB\/xkf8AuZP4BWzbvOzQyYrFA+IQNqwIbShzSzIOTie8PNavHK3+mObM3L2l\/ezDL9SRzSE83vPwy2\/L6rDfx1P7saye5fGhPQyUTzd1K7ug65oJLkD2dmHuFit90rHQYflex1pJ75XA27sfRaTu9xrsOJ08p+rkPZ5v7uQgX9jlPsnoVpywaeobutj+xYrispackT+z0pN7GKS0lx1Ibkbf1Xne9PGu2YtPlN4qa1JFa9u5fOfd5dr0AXuO1mMChw+rq9M0cZEfnM45Wf8AkR7BfmBziSSSSSbknUkqR32v\/Pu9pvP6C49TpoPRRFV29YiIgIiIKiIgIiiCqIiDJbP4xLQ1cNXCe\/E65aTZr2HRzD5EaL9KbPY3BX00dVA67X6OabZ432F2OHgR\/wDV+WVmdmNpqnDZ+NTv0dYSxPuYpW9HDr0PMLO9N9w8+fB9SNx5fp4qFaVs5vNw+ra1srxRTaAxzm0ZP6MnIj1sVuUczXjMxzXg6gscHAj1Cx1ry+datqz3D6K43L6e6176eq1nH9uMOow7iVLJZB\/yaciWQm3I20b7kLqOysTPUM5VTMjY+SRzY2MGd73kBrWjUknwC\/P+8Hao4lVXjuKaG7IGnQu+9IR1Nh6ADzX1tpt1UYkeHbgUoN2wNNy8jkZHfaPlyHzWprWtdPoYMHD+VvIiIu3pUH2UREHq+wG1VBTYbDBPUtika+YuYWSEgF5I5AjkvLZpP6x7mki7nEEXGhK4kUcVpFZmfcKIiO1Y8jkSPMEhQlEQFcxta5t08FEQEREBe17MY5s6ylo8zqds1NGwB9TTWnElrudfKbnMSdCV4oikxtnkx841t6DvR25jxHh0lLmNNE7ivkcC0zS2IFmnUNAJ58yeWgXnyIrEOqUikagREVdKiIgIiIKiIgKKqICIiAiIgLkgqJI9Y5Hxnqxzmn5LiRBzz1s0gs+WWQdHyOcPmVwIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiIKiIgIiIKUREBREQEREBERAREQRERAREQEREBERAREQEREBERAREQEREBERAREQEREFREQEREH\/2Q==)","8fcd7cd0":"# Function To Calculate Correlation Distance And Make A Matrix","93ea0d3c":"# Thank you :)","882a1c41":"# Importing The Packages","260fe063":"# Removing the unnecessary data","05f191a4":"# Importing The Data"}}