{"cell_type":{"0f281698":"code","3f04e72a":"code","1dd9d0b2":"code","68c23975":"code","1494b40b":"code","f100e2e7":"code","7907b85e":"code","7d6f7de0":"code","9ae04436":"code","4ee98e19":"code","9c06e381":"code","a286d9e7":"code","01da3051":"code","6e4afca3":"code","00863f38":"code","4b44be1a":"code","b502900a":"code","b5d892b3":"code","7953bd4f":"code","12e438e1":"code","e72ebdab":"code","65b41ab6":"code","e1d70c40":"code","c0d51ac6":"code","993752c8":"code","6105427c":"code","3f76b247":"code","3d12a6e5":"code","168813a5":"code","09c85dd7":"code","bebe1ba8":"code","135bffd0":"code","9e4f197a":"code","2ede58b8":"code","01e3afd5":"code","66692104":"code","7efa8ac7":"code","08bcb06a":"code","48f8a783":"code","7882389f":"code","f21c7779":"code","de859a50":"code","66e94d5e":"code","4f1cf4ac":"code","c481ca62":"code","c9d0a95f":"code","b80df346":"code","ce35c311":"code","5aa4093e":"code","eee166c2":"code","c81b06bd":"code","acc4c71d":"code","6d8aa5eb":"code","ff552421":"code","d2f92105":"code","86259c9b":"code","06eaf0ee":"code","0b73ca26":"code","1b46c28a":"code","a4cd819b":"code","f6d39815":"markdown","6f1a914f":"markdown","1df33762":"markdown","be47bbfb":"markdown","5c098218":"markdown","91159100":"markdown","691c2bc9":"markdown","e485f502":"markdown","002a01d9":"markdown","5845e0b5":"markdown","0f110b12":"markdown","2ed6293e":"markdown","e21b8fef":"markdown","36c31863":"markdown","e2faef1f":"markdown","0f11ace5":"markdown","8215c285":"markdown","ba89f839":"markdown","96b6fc7c":"markdown","84adf070":"markdown","be56d648":"markdown","9a03022e":"markdown","05b4ce69":"markdown","42aa2d25":"markdown","0cfae6be":"markdown","95eb76f7":"markdown","0bbf83cb":"markdown","983b5506":"markdown","59a0863f":"markdown","0744641d":"markdown","e832d452":"markdown","7f43b000":"markdown","c632c062":"markdown","e29073c9":"markdown","778ed5fd":"markdown","62ee4e9e":"markdown","9fd30b26":"markdown","6575450f":"markdown","72f5b34e":"markdown","6f7f3913":"markdown","6e1745e1":"markdown","9e98c113":"markdown","e2b9811f":"markdown","e81bc18c":"markdown","318e7095":"markdown","fc5f6e2a":"markdown","10dbf72c":"markdown","a4b755bb":"markdown","5ff1351e":"markdown","fcc388f7":"markdown"},"source":{"0f281698":"import pandas as pd\nimport numpy as np","3f04e72a":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","1dd9d0b2":"from sklearn.model_selection import train_test_split\n\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score","68c23975":"import warnings\nwarnings.filterwarnings(\"ignore\")","1494b40b":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')","f100e2e7":"train.head()","7907b85e":"train.info()","7d6f7de0":"train.describe()","9ae04436":"train.isnull().sum()","4ee98e19":"test.isnull().sum()","9c06e381":"embarked_mode = train[\"Embarked\"].mode()[0]","a286d9e7":"train[\"Embarked\"].fillna(embarked_mode, inplace=True)","01da3051":"train[\"Cabin_Missing\"] = train[\"Cabin\"].map(lambda x: 1 if pd.isnull(x) else 0)\ntrain.drop(\"Cabin\", axis=1, inplace=True)","6e4afca3":"test[\"Cabin_Missing\"] = test[\"Cabin\"].map(lambda x: 1 if pd.isnull(x) else 0)\ntest.drop(\"Cabin\", axis=1, inplace=True)","00863f38":"age_medians = train.groupby(by=[\"Sex\", \"Pclass\", \"Embarked\"])[\"Age\"].median()","4b44be1a":"for sex in [\"female\", \"male\"]:\n    for pclass in [1,2,3]:\n        for emb in [\"C\", \"Q\", \"S\"]:\n            mask = (train[\"Sex\"]==sex) & (train[\"Pclass\"]==pclass) & (train[\"Embarked\"]==emb)\n            train[\"Age\"].loc[mask] = train[\"Age\"].loc[mask].fillna(age_medians[sex, pclass, emb])\n            \n            mask = (test[\"Sex\"]==sex) & (test[\"Pclass\"]==pclass) & (test[\"Embarked\"]==emb)\n            test[\"Age\"].loc[mask] = test[\"Age\"].loc[mask].fillna(age_medians[sex, pclass, emb])","b502900a":"fare_median = train[\"Fare\"].median()","b5d892b3":"test[\"Fare\"].fillna(fare_median, inplace=True)","7953bd4f":"train.isnull().sum()","12e438e1":"test.isnull().sum()","e72ebdab":"train[\"Title\"] = train[\"Name\"].apply(lambda x: x.split()[1])\ntrain[\"Title\"].value_counts()","65b41ab6":"titles = train[\"Title\"].value_counts().index.tolist()\nfor title in titles[4:]:\n    train[\"Title\"].replace(title, \"Others\", inplace=True)","e1d70c40":"train.drop(\"Name\", axis=1, inplace=True)","c0d51ac6":"test[\"Title\"] = test[\"Name\"].apply(lambda x: x.split()[1])\ntest[\"Title\"].value_counts()","993752c8":"titles = test[\"Title\"].value_counts().index.tolist()\nfor title in titles[4:]:\n    test[\"Title\"].replace(title, \"Others\", inplace=True)","6105427c":"test.drop(\"Name\", axis=1, inplace=True)","3f76b247":"train[\"FamilyMembers\"] = train[\"SibSp\"] + train[\"Parch\"]\ntrain.drop([\"SibSp\", \"Parch\"], axis=1, inplace=True)","3d12a6e5":"test[\"FamilyMembers\"] = test[\"SibSp\"] + test[\"Parch\"]\ntest.drop([\"SibSp\", \"Parch\"], axis=1, inplace=True)","168813a5":"sns.boxplot(train[\"Age\"])\nplt.show()","09c85dd7":"train[\"AgeGroup\"] = pd.cut(train[\"Age\"], bins=[0,18,30,60,100], labels=[\"Young\", \"Young Adult\", \"Adult\", \"Old\"], include_lowest=True)\ntrain.drop(\"Age\", axis=1, inplace=True)\n\ntest[\"AgeGroup\"] = pd.cut(test[\"Age\"], bins=[0,18,30,60,100], labels=[\"Young\", \"Young Adult\", \"Adult\", \"Old\"], include_lowest=True)\ntest.drop(\"Age\", axis=1, inplace=True)","bebe1ba8":"sns.boxplot(train[\"Fare\"])\nplt.show()","135bffd0":"train[\"FareGroup\"] = pd.cut(train[\"Fare\"], bins=[0,20,50,100,1000], labels=[\"0-20\", \"21-50\", \"51-100\", \"100+\"], include_lowest=True)\ntrain.drop(\"Fare\", axis=1, inplace=True)\n\ntest[\"FareGroup\"] = pd.cut(test[\"Fare\"], bins=[0,20,50,100,1000], labels=[\"0-20\", \"21-50\", \"51-100\", \"100+\"], include_lowest=True)\ntest.drop(\"Fare\", axis=1, inplace=True)","9e4f197a":"sns.boxplot(train[\"FamilyMembers\"])\nplt.show()","2ede58b8":"train[\"FamilySize\"] = pd.cut(train[\"FamilyMembers\"], bins=[0,1,4,6,20], labels=[\"Alone\", \"Small\", \"Medium\", \"Large\"], include_lowest=True)\ntrain.drop(\"FamilyMembers\", axis=1, inplace=True)\n\ntest[\"FamilySize\"] = pd.cut(test[\"FamilyMembers\"], bins=[0,1,4,6,20], labels=[\"Alone\", \"Small\", \"Medium\", \"Large\"], include_lowest=True)\ntest.drop(\"FamilyMembers\", axis=1, inplace=True)","01e3afd5":"train.drop(\"Ticket\", axis=1, inplace=True)\ntest.drop(\"Ticket\", axis=1, inplace=True)","66692104":"train.info()","7efa8ac7":"test.info()","08bcb06a":"# Helper Method To Display Count Plot\n\ndef show_count_plot(x, hue=None, data=train):\n    plt.figure()\n    sns.countplot(x, hue=hue, data=data)\n    plt.show()","48f8a783":"# Helper Method To Display Bar Plot\n\ndef show_bar_plot(x, y, data=train):\n    plt.figure()\n    sns.barplot(x, y, data=data, ci=None)\n    plt.show()","7882389f":"show_count_plot(\"Survived\")","f21c7779":"show_bar_plot(\"Sex\", \"Survived\")","de859a50":"show_bar_plot(\"Cabin_Missing\", \"Survived\")","66e94d5e":"show_count_plot(x=\"Pclass\", hue=\"Survived\")","4f1cf4ac":"show_count_plot(x=\"Embarked\", hue=\"Survived\")","c481ca62":"show_count_plot(x=\"Title\", hue=\"Survived\")","c9d0a95f":"show_count_plot(x=\"AgeGroup\", hue=\"Survived\")","b80df346":"show_count_plot(x=\"FareGroup\", hue=\"Survived\")","ce35c311":"show_count_plot(x=\"FamilySize\", hue=\"Survived\")","5aa4093e":"#Helper Method To Display Multivariate Analysis\n\ndef multivariate_analysis(index, column):\n    pt = pd.pivot_table(data=train, index=index, columns=column, values=\"Survived\")\n    plt.figure()\n    sns.heatmap(pt, annot=True, fmt=\".2%\", cmap=\"Greens\")\n    plt.show()","eee166c2":"multivariate_analysis(\"Pclass\", \"Sex\")","c81b06bd":"multivariate_analysis(\"Pclass\", \"Title\")","acc4c71d":"sns.barplot(data=train.loc[train[\"Pclass\"]==3], x=\"Sex\", y=\"Survived\", hue=\"FamilySize\", ci=None)\nplt.show()","6d8aa5eb":"sns.barplot(data=train.loc[train[\"Pclass\"]==3], x=\"Sex\", y=\"Survived\", hue=\"Embarked\", ci=None)\nplt.show()","ff552421":"y = train.pop(\"Survived\")\nX = train","d2f92105":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=100)","86259c9b":"def make_predictions(test):\n    test[\"Survived\"] = 0\n    test.loc[(test[\"Sex\"]==\"female\") & (test[\"Pclass\"]<3), \"Survived\"] = 1\n    test.loc[(test[\"Title\"]==\"Master.\") & (test[\"Pclass\"]<3), \"Survived\"] = 1\n    test.loc[(test[\"Sex\"]==\"female\") & (test[\"Pclass\"]==3) & (test[\"Embarked\"]!=\"S\"), \"Survived\"] = 1\n    test.loc[(test[\"Sex\"]==\"female\") & (test[\"Pclass\"]==3) & (test[\"FamilySize\"]==1), \"Survived\"] = 1                 ","06eaf0ee":"make_predictions(X_test)","0b73ca26":"plt.figure(figsize=(6,6))\ncm = confusion_matrix(y_test, X_test[\"Survived\"])\nsns.heatmap(cm, annot=True, cmap=\"Greens\")\nplt.show()\n\ntrain_score = np.round(accuracy_score(y_test, X_test[\"Survived\"]),2)\nprint(\"Training Accuracy : {}\".format(train_score))","1b46c28a":"make_predictions(test)","a4cd819b":"submission = test[[\"PassengerId\", \"Survived\"]]\nsubmission.set_index('PassengerId',inplace=True)\nsubmission.to_csv('submission.csv')","f6d39815":"#### Pclass vs Title","6f1a914f":"## The Dataset","1df33762":"### Coding The Model Rules","be47bbfb":"#### Checking All The Columns","5c098218":"### Title Column  ","91159100":"#### Deal With The Missing Values In Age Column","691c2bc9":"### Categorizing Family Members Column","e485f502":"Females who embarked from station C have very high rates of survival","002a01d9":"## Exploratory Data Analysis","5845e0b5":"People with title Master. in the 1st and the 2nd class have very high rates of survival","0f110b12":"### Bivariate Analyis","2ed6293e":"#### Sex vs Embarking Station","e21b8fef":"#### Sex vs Survived","36c31863":"### Creating The Train-Test Split","e2faef1f":"#### Sex vs FamilySize","0f11ace5":"### Checking The Missing Values In The Dataset","8215c285":"#### FareGroup vs Survived","ba89f839":"#### Creating A New Column Indicating Whether Cabin Information Was Missing Or Not And Dropping The Cabin Column","96b6fc7c":"### Making The Predictions On The Test Set","84adf070":"# Titanic (Top 13%, 0.78708 Accuracy)","be56d648":"#### Pclass vs Survived","9a03022e":"#### AgeGroup vs Survived","05b4ce69":"#### Dropping The Ticket Column","42aa2d25":"#### Pclass vs Sex","0cfae6be":"Females in the 1st & 2nd class have very high rates of survival","95eb76f7":"### Categorizing Fare Column","0bbf83cb":"### Getting The General Information About The Data","983b5506":"#### Checking For The Missing Values Once Again","59a0863f":"#### CabinMissing vs Survived","0744641d":"## Model Building","e832d452":"#### Embarked vs Survived","7f43b000":"### Reading The Data","c632c062":"We can see that apart from Mr., Miss., Mrs., Master. all others titles are very less in occurence. So we will group them together into 'Others'","e29073c9":"### Family Members Column","778ed5fd":"#### FamilySize vs Survived","62ee4e9e":"We will combine the SibSp and Parch columns into one column and drop the SibSp and Parch columns","9fd30b26":"As we can see, we do not have any missing value now.","6575450f":"#### Title vs Survived","72f5b34e":"## Importing The Libraries","6f7f3913":"We will get the titles of all the names and drop the Name column","6e1745e1":"Females who are alone in class 3 have very high rates of survival","9e98c113":"### Descriptive Statistics","e2b9811f":"#### Model Rules","e81bc18c":"## Data Wrangling","318e7095":"### Let Us Check For Data Imbalance","fc5f6e2a":"#### Replacing The Missing Values In Embarked By The Mode Of The Column","10dbf72c":"#### Replacing The Missing Values In Fare Column By The Median","a4b755bb":"We build a model on 5 rules :\n1. All females in classes 1 and 2 survive\n2. All Masters. in classes 1 and 2 survive\n3. Females in class 3 who are alone survive\n4. Females in class 3 who embarked from stations Q and C survive\n5. All others die","5ff1351e":"### Categorizing Age Column","fcc388f7":"### Multivariate Analysis"}}