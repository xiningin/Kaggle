{"cell_type":{"d76fc4b5":"code","5c9b144d":"code","7a35e267":"code","f6151397":"code","afe83c5c":"code","6eb85e0f":"code","f6e8976d":"code","37a9b051":"code","8ebc14b9":"code","0f4a721a":"code","4d9215a3":"code","bd71267f":"code","31468ad0":"code","49255bb0":"code","2cd78c2b":"code","0347c9c6":"code","f90227ae":"markdown","9310754e":"markdown","80ad3203":"markdown","53dc5b02":"markdown","e52abe63":"markdown","734f960c":"markdown","beeeac1e":"markdown","dbc84028":"markdown","e1c7083b":"markdown","512f01be":"markdown"},"source":{"d76fc4b5":"from PIL import Image\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport torch\nimport torchvision\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport matplotlib.pyplot as plt\n\nimport torch.optim as  optim \nif torch.cuda.is_available():  \n  dev = \"cuda:0\" \n  print(\"gpu up\")\nelse:  \n  dev = \"cpu\"  \ndevice = torch.device(dev)","5c9b144d":"df = pd.read_csv(\"..\/input\/celeba-dataset\/list_attr_celeba.csv\")","7a35e267":"def haircolor(x):\n    if x[\"Blond_Hair\"] == 1:\n        return 0\n    elif x[\"Brown_Hair\"] == 1:\n        return 1\n    elif x[\"Black_Hair\"] == 1:\n        return 2\n    else :\n        return 3\n    \ndf[\"Hair_Color\"] = df.apply(haircolor,axis=1)","f6151397":"\"\"\"\nfor simplicity I decided to make the VAE capture just for attributes \n\nHair Color (blond,brown,black and neither of these(or unknown))\nPale Skin \nGender \nBeard (in case of male)\n\"\"\"\n\ndf = df[[\"image_id\",\"Hair_Color\",'Pale_Skin',\"Male\",\"No_Beard\"]]","afe83c5c":"\"\"\"\nreplacing -1 with 0 without affecting the the 1 values \n\n\"\"\"\ndf.Pale_Skin = df.Pale_Skin.apply(lambda x: max(x,0)) \ndf.Male = df.Male.apply(lambda x: max(x,0))\ndf.No_Beard = df.No_Beard.apply(lambda x: max(x,0))\n","6eb85e0f":"df","f6e8976d":"faces =[]\nfor i in df.iloc[:20000].image_id:\n    pic = Image.open(\"..\/input\/celeba-dataset\/img_align_celeba\/img_align_celeba\/\"+i)\n    pic = pic.resize((64,64))\n    pix = np.array(pic.getdata()).reshape(pic.size[0], pic.size[1], 3)\n    pix = pix\/255\n    \"\"\"\n    for the images I had to use np.moveaxis to change the shape from  (64,64,3) to (3,64,64)\n    without messing up the image \n    \n    \"\"\"\n    faces.append(np.moveaxis(pix,-1,0).tolist())\n    \nfaces = np.array(faces)","37a9b051":"class Encoder(nn.Module):\n    def __init__(self):\n        super(Encoder,self).__init__()\n        # channels_in ,  channels_out, kernel_size, stride , padding,\n        self.conv1 = nn.Conv2d(3,64,3,1,1)\n        self.conv2 = nn.Conv2d(64,64,3,1,1)\n        self.conv3 = nn.Conv2d(64,64,4,2,1)\n        self.conv4 = nn.Conv2d(64,128,4,2,1)\n        self.maxp1 = nn.MaxPool2d(kernel_size=2,stride=2)\n        self.maxp2 = nn.MaxPool2d(kernel_size=2,stride=2)\n        self.maxp3 = nn.MaxPool2d(kernel_size=2,stride=2)\n        self.maxp4 = nn.MaxPool2d(kernel_size=2,stride=2)\n\n\n        \n    def forward(self,x):\n        out = self.conv1(x)\n        out = self.maxp1(out)\n        out = F.relu(out) \n        out = self.conv2(out)\n        out = self.maxp2(out)\n        out = F.relu(out)\n        out = self.conv3(out)\n        out = self.maxp3(out)\n        out = F.relu(out)\n        out= self.conv4(out)\n        out = self.maxp4(out)\n        out = F.relu(out)\n        return out.view(out.shape[0],-1)\n    \nclass Decoder(nn.Module):\n    def __init__(self):\n        super(Decoder,self).__init__()\n        # channels_in ,  channels_out, kernel_size, stride , padding,\n        \"\"\"\n        convtranspose  is different from the regular conv layer (looking at the equations of two of them )\n        this link shows examples about it \n        https:\/\/towardsdatascience.com\/is-the-transposed-convolution-layer-and-convolution-layer-the-same-thing-8655b751c3a1\n        \n        \"\"\"\n        self.transconv1 = nn.ConvTranspose2d(64+ 40,64,8,4,2)\n        self.transconv2 = nn.ConvTranspose2d(64,64,8,4,2)\n        self.transconv3 = nn.ConvTranspose2d(64,64,4,2,1)\n        self.transconv4 = nn.ConvTranspose2d(64,3,4,2,1)\n        \n        \"\"\"\n        I think Embeddings layers were pretty good  so every state was converted into a vector like \n        Beard or no beard -> vector of 10 weights\n        Male or Female -> vector  of 10 weights \n        \n        \"\"\"\n        self.hairEmbedding = nn.Embedding(4,10)\n        self.beardEmbedding = nn.Embedding(2,10)\n        self.genderEmbedding = nn.Embedding(2,10)\n        self.paleSkinEmbedding = nn.Embedding(2,10)\n\n        \n    def forward(self,x):\n        z = x[:,:64]\n        hair = self.hairEmbedding(x[:,64].long())\n        paleSkin = self.paleSkinEmbedding(x[:,65].long())\n        gender = self.genderEmbedding(x[:,66].long())\n        beard = self.beardEmbedding(x[:,67].long())\n        \"\"\"\n        Concating the embeddings and the encoded image\n        \"\"\"\n        z = torch.cat([z,hair,beard,gender,paleSkin],dim=1)\n        \n        out= self.transconv1(z.view(z.shape[0],z.shape[1],1,1))\n        out = F.relu(out)\n        out= self.transconv2(out)\n        out = F.relu(out)\n\n        out= self.transconv3(out)\n        out = F.relu(out)\n\n        out= self.transconv4(out)\n        out = F.relu(out)\n\n        return out\n        \nclass CVAE(nn.Module):\n    def __init__(self,encoder,decoder):\n        super(CVAE,self).__init__()\n        self.encoder = encoder()\n        self.decoder = decoder()\n    def forward(self,x,attrs):\n        h = self.encoder(x)\n        \n        mu = h[:,:64]\n        logvar = h[:,64:]\n        # this part is for the reparameterization trick\n        s= torch.exp(logvar)\n        eps = torch.randn_like(s)\n        z = s*eps + mu \n        \n        z= torch.cat([z,attrs],dim=1)\n        out = self.decoder(z)\n        return out,mu,logvar\n        \nvae = CVAE(Encoder,Decoder)\nvae.to(device)","8ebc14b9":"def ceil(a,b):\n    return -(-a\/\/b)","0f4a721a":"\n\"\"\"\n\nloss function contains two parts \nreconstruction  loss and kullback leibler divergence (it basically measures how two distributions are different)\n\n\"\"\"\ndef loss_function(recon_x,x,mu,logvar):\n    KLD = -0.5 * torch.sum(1 + logvar - mu.pow(2) - logvar.exp())\n    KLD \/= x.shape[0] * 3 * 64 * 64\n    recon_loss = F.mse_loss(recon_x,x)\n    return recon_loss +  KLD\n\nepochs = 1201\n\nbatch_size= 256\noptimizer = optim.Adagrad(vae.parameters(),lr = 0.001)\n\nnpData = df.iloc[:20000].to_numpy()\n\n\nn_samples = len(npData)\nbetter_batch_size = ceil(n_samples, ceil(n_samples, batch_size))\nlosstrack = []\nfor e in range(epochs):\n    losses = []\n    for i in range(ceil(n_samples, better_batch_size)):\n        batch = npData[i * better_batch_size: (i+1) * better_batch_size]\n        attrs = torch.Tensor(batch[:,1:].astype('float16')).to(device)\n#         break\n        imgs = faces[i * better_batch_size: (i+1) * better_batch_size]\n        imgs = torch.Tensor(imgs.astype('float16')).to(device)\n        vae.zero_grad()\n        recon_imgs,mu,logvar = vae(imgs,attrs)\n        err = loss_function(recon_imgs,imgs,mu,logvar)\n        err.backward()\n        optimizer.step()\n        losses.append(err.item())\n    losstrack.append(np.mean(losses))\n    if e % 100 == 0: \n        torch.save(vae.state_dict(), \".\/vae.pt\")\n        print(np.mean(losses), \"mean loss\", e)\n\n        \n    \n\n\n\n\n\n","4d9215a3":"\"\"\"I just loaded the model I saved while training\"\"\"\n\ncheckpoint = torch.load(\"..\/input\/my-cvae-model\/vae.pt\")\nvae.load_state_dict(checkpoint)","bd71267f":"def showImage(x):\n    attrs = torch.Tensor(x)\n    h = torch.cat((torch.randn(1,64),attrs),dim=1).to(device)\n    img = vae.decoder(h)\n    img = img.cpu().detach().numpy().reshape(3,64,64)\n    img = np.moveaxis(img,0,-1)\n    return img","31468ad0":"f, axarr = plt.subplots(1,2)\naxarr[0].imshow(showImage([[2,0,0,1]]))\naxarr[0].set_title(\"Woman\")\naxarr[1].imshow(showImage([[2,0,1,0]]))\naxarr[1].set_title(\"Man\")\n\nf.subplots_adjust(hspace=0.3,left=2,right=3)","49255bb0":"f, axarr = plt.subplots(1,3)\naxarr[0].imshow(showImage([[2,0,0,1]]))\naxarr[0].set_title(\"Black hair\")\naxarr[1].imshow(showImage([[1,0,0,1]]))\naxarr[1].set_title(\"brown hair\")\naxarr[2].imshow(showImage([[0,0,0,1]]))\naxarr[2].set_title(\"blond hair\")\n\n\nf.subplots_adjust(hspace=0.3,left=2,right=4)","2cd78c2b":"f, axarr = plt.subplots(1,2)\naxarr[0].imshow(showImage([[2,0,0,1]]))\naxarr[0].set_title(\"not Pale skin\")\naxarr[1].imshow(showImage([[2,1,0,1]]))\naxarr[1].set_title(\"Pale Skin\")\n\nf.subplots_adjust(hspace=0.3,left=2,right=3)","0347c9c6":"f, axarr = plt.subplots(1,2)\naxarr[0].imshow(showImage([[2,0,1,1]]))\naxarr[0].set_title(\"No Beard\")\naxarr[1].imshow(showImage([[2,0,1,0]]))\naxarr[1].set_title(\"Beard\")\n\nf.subplots_adjust(hspace=0.3,left=2,right=3)","f90227ae":"it could get doing the skin part correctly ","9310754e":"it's a neural network that learns to encode an image into a mean and std (or the log of that)  and during the training we sample from those mean and std to regenerate the same image \nbut in the generation part for data not in the dataset we could just sample from a random multivariate normal ","80ad3203":"variational autoencoders are types for networks that can be used to generate datapoints that don't exist in the dataset  ","53dc5b02":"this playlist can give some intuition about them but the topic needs more  research\n\nhttps:\/\/www.youtube.com\/playlist?list=PLdxQ7SoCLQANizknbIiHzL_hYjEaI-wUe","e52abe63":"![VAE](https:\/\/miro.medium.com\/max\/3374\/1*22cSCfmktNIwH5m__u2ffA.png)","734f960c":"well this one is not good maybe the model needs to be bigger(and also more data)  because there is barely a difference between the two images ","beeeac1e":"Here I used  pytorch to build a model(a weak one) that could generate faces with specific features like hair color , gender , beard , specific skin ","dbc84028":"Here showing what could the model do after the training \n\nit could kinda generate different genders","e1c7083b":"upvote if you find this kernel useful","512f01be":"it also can make different hair colors but it mostly was trying to just fill the image outside with the color"}}