{"cell_type":{"63a747d0":"code","67df44e0":"code","3ce2ba21":"code","596b5d06":"code","31ac4661":"code","0e610661":"code","8465cf10":"code","031ec945":"code","d59b2ff8":"code","5d79dfa7":"code","fe7766f3":"code","35035486":"code","0563208b":"code","75eb0adb":"code","1953f8ac":"code","54ae7ae2":"code","418f95ab":"code","4001bb34":"code","9046745d":"code","5b71da73":"code","d5adbb7b":"code","492196c2":"code","4a7ab279":"code","661767c1":"code","fada6fdb":"code","9abf4764":"code","ad3bd950":"code","0810c69e":"code","996fff84":"code","dc1029ed":"code","74dd4490":"code","09f3af14":"code","8199c9ad":"markdown","f8646661":"markdown","45248286":"markdown","c0e6e07a":"markdown","e9470297":"markdown","0cc1a7c5":"markdown"},"source":{"63a747d0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt #likley won't be used much as i'm experimenting with plotly \nimport plotly.graph_objects as go #you will be learning how go and px work with me! \nimport plotly.express as px \n\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","67df44e0":"#load data \ndf = pd.read_csv('\/kaggle\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv')\ndf.shape","3ce2ba21":"df.describe()\n#df.dtypes","596b5d06":"df.head()","31ac4661":"#remove the top row\ndf_fin = df.iloc[1:,:]","0e610661":"df_fin.head()","8465cf10":"# get percent of null values in question\ndf_fin.isnull().sum() \/ df.shape[0]","031ec945":"#create a dictionary for questions \nQuestions = {}\n\n#create list of questions \n#not very efficient, but keeps things ordered\nqnums = list(dict.fromkeys([i.split('_')[0] for i in df_fin.columns]))\nqnums","d59b2ff8":"#add data for each question to key value pairs in dictionary\nfor i in qnums:\n    if i in ['Q1','Q2','Q3']: #since we are using .startswith() below this prevents all questions that start with \n        Questions[i] = df_fin[i] #[1,2,3] from going in the key value pair (Example in vid)\n    else:\n        Questions[i] = df_fin[[q for q in df_fin.columns if q.startswith(i)]]","5d79dfa7":"df_fin.Q1","fe7766f3":"#q1 histogram using px \nfig = px.histogram(df_fin, x = 'Q1')\nfig.show()","35035486":"# heatmap using px for q1 & q6\nfig = px.density_heatmap(df_fin, x='Q1', y='Q6', category_orders={'Q1':['18-21','22-24','25-29','30-34','35-39','40-44','45-49','50-54','55-59','60-69','70+'],'Q6':['I have never written code','< 1 years','1-2 years','3-5 years','5-10 years','10-20 years','20+ years']})\nfig.show()","0563208b":"Questions['Q7']","75eb0adb":"# Q7 example for go use. We aggregate the data beforehand with .value_counts()\nQuestions['Q7'].columns = list(Questions['Q7'].mode().iloc[0,:])\nq7 = Questions['Q7'].count().reset_index()\nq7.columns = ['language','Count']\nq7 = q7.sort_values('Count', ascending = False)\nfig = go.Figure([go.Bar(x = q7.language, y = q7.Count)])\nfig.show()","1953f8ac":"#Create dictionary with role \/ data key value pairs\nRoles = {}\nfor i in df_fin.Q5.unique():\n    Roles[i] = df_fin[df_fin.Q5 == i]","54ae7ae2":"Roles.keys()","418f95ab":"Roles['Student']","4001bb34":"#first subquestion --> How does education level vary by role ","9046745d":"#all education graph\nedu = df_fin.Q4.value_counts()\nedu","5b71da73":"#education across whole survey sample \nfig = go.Figure([go.Bar(x=edu.index, y=edu.values)])\nfig.show()","d5adbb7b":"#education for just data scientists \nds_edu = Roles['Data Scientist'].Q4.value_counts()\nfig = go.Figure([go.Bar(x= ds_edu.index, y=ds_edu.values)])\nfig.show()","492196c2":"#########################################\n# First Iteration - Basic dropdown \n#########################################\n\n#https:\/\/stackoverflow.com\/questions\/59406167\/plotly-how-to-filter-a-pandas-dataframe-using-a-dropdown-menu\n#https:\/\/plotly.com\/python\/dropdowns\/\n\nfig = go.Figure()\nfig.add_trace(go.Bar(x= edu.index, y=edu.values))\n\n#buttons are the things you see in the dropdown \nbuttons = []\n\n#for each graph we want to show, we need a button for it\n#you can do a lot with dropdowns, not just replace data \nbuttons.append(dict(method='restyle',\n                    label='Data Scientist',\n                    visible=True,\n                    args=[{'y':[Roles['Data Scientist'].Q4.value_counts().values],\n                           'x':[Roles['Data Scientist'].Q4.value_counts().index],\n                           'type':'bar'}, [0]],\n                    )\n              )\nbuttons.append(dict(method='restyle',\n                    label='Student',\n                    visible=True,\n                    args=[{'y':[Roles['Student'].Q4.value_counts().values],\n                           'x':[Roles['Student'].Q4.value_counts().index],\n                           'type':'bar'}, [0]],\n                    )\n              )\nbuttons.append(dict(method='restyle',\n                    label='Data Analyst',\n                    visible=True,\n                    args=[{'y':[Roles['Data Analyst'].Q4.value_counts().values],\n                           'x':[Roles['Data Analyst'].Q4.value_counts().index],\n                           'type':'bar'}, [0]],\n                    )\n              )\n\n#to get a menu to show, you need to create an updatemenu. \n#at this point I had no clue how it worked, I just was trying to get something to run\n\nupdatemenu = []\nyour_menu = {}\nupdatemenu.append(your_menu)\n\nupdatemenu[0]['buttons'] = buttons\nupdatemenu[0]['direction'] = 'down'\nupdatemenu[0]['showactive'] = True\n\n# add dropdown menus to the figure\nfig.update_layout(showlegend=False, updatemenus=updatemenu)\nfig.show()","4a7ab279":"#########################################\n# Second Iteration - Comparison Chart vs Baseline \n#########################################\n\n#Added title to the figure \nfig = go.Figure(layout=go.Layout(title= go.layout.Title(text=\"Comparing Education by Position\")))\n\n#change to percent of group rather than raw numbers\nfig.add_trace(go.Bar(name= 'Role Selection', x= edu.index, y=(edu.values\/ edu.values.sum())))\n\n#added another trace, this is the second series of bars \nfig.add_trace(go.Bar(name= 'All Data',x= edu.index, y=(edu.values\/ edu.values.sum())))\n\n#updatemenu = []\nbuttons = []\n              \n#add all roles with a loop, in previous we added them individually.\nfor i in list(Roles.keys())[1:]:\n    buttons.append(dict(method='restyle',\n                        label= i,\n                        visible=True,\n                        args=[{'y':[Roles[i].Q4.value_counts().values\/Roles[i].Q4.value_counts().values.sum()],\n                               'x':[Roles[i].Q4.value_counts().index],\n                               'type':'bar'}, [0]],\n                        )\n                  )\n\n\n#at this point I still didn't understand how this worked, I just knew it didn't add a dropdown without it \nupdatemenu = []\nyour_menu = {}\nupdatemenu.append(your_menu)\n\nupdatemenu[0]['buttons'] = buttons\nupdatemenu[0]['direction'] = 'down'\nupdatemenu[0]['showactive'] = True\n\n# add dropdown menus to the figure\nfig.update_layout( updatemenus=updatemenu)\n\n#order axes https:\/\/plotly.com\/python\/categorical-axes\/\nfig.update_xaxes(categoryorder= 'array', categoryarray= [\"Doctoral degree\",'Master\u2019s degree','Bachelor\u2019s degree','Some college\/university study without earning a bachelor\u2019s degree',\"Professional degree\",\"No formal education past high school\",\"I prefer not to answer\"])\nfig.show()","661767c1":"#########################################\n# Third Iteration - Two Drop Down Comparison \n#########################################\n\nfig = go.Figure(layout=go.Layout(title= go.layout.Title(text=\"Comparing Education by Position\")))\nfig.add_trace(go.Bar(name= 'Role Selection', x= edu.index, y=(edu.values\/ edu.values.sum())))\n\nbuttons = []\n# add buttons for first series of bars  \nfor i in list(Roles.keys())[1:]:\n    buttons.append(dict(method='restyle',\n                        label= i,\n                        visible=True,\n                        args=[{'y':[Roles[i].Q4.value_counts().values\/Roles[i].Q4.value_counts().values.sum()],\n                               'x':[Roles[i].Q4.value_counts().index],\n                               'type':'bar'}, [0]], # the [0] at the end lets us know they are for the first trace\n                        )\n                  )\n\nfig.add_trace(go.Bar(name= 'All Data',x= edu.index, y=(edu.values\/ edu.values.sum())))\n\nbuttons2 = []\n# add buttons for second series of bars               \nfor i in list(Roles.keys())[1:]:\n    buttons2.append(dict(method='restyle',\n                        label= i,\n                        visible=True,\n                        args=[{'y':[Roles[i].Q4.value_counts().values\/Roles[i].Q4.value_counts().values.sum()],\n                               'x':[Roles[i].Q4.value_counts().index],\n                               'type':'bar'}, [1]], # the [1] at the end lets us know they are for the first trace\n                        )                        #literally figured that out by just experimenting \n                  )\n# adjusted dropdown placement \n#found out updatemenus take a dictionary of buttons and allow you to format how the dropdowns look etc.\n# https:\/\/plotly.com\/python\/dropdowns\/\nbutton_layer_1_height = 1.23\nupdatemenus = list([\n    dict(buttons=buttons,\n            direction=\"down\",\n            pad={\"r\": 10, \"t\": 10},\n            showactive=True,\n            x=0.1,\n            xanchor=\"left\",\n            y=button_layer_1_height,\n            yanchor=\"top\"),\n    dict(buttons=buttons2,\n            direction=\"down\",\n            pad={\"r\": 10, \"t\": 10},\n            showactive=True,\n            x=0.5,\n            xanchor=\"left\",\n            y=button_layer_1_height,\n            yanchor=\"top\")])\n    \nfig.update_layout( updatemenus=updatemenus)\nfig.update_xaxes(categoryorder= 'array', categoryarray= [\"Doctoral degree\",'Master\u2019s degree','Bachelor\u2019s degree','Some college\/university study without earning a bachelor\u2019s degree',\"Professional degree\",\"No formal education past high school\",\"I prefer not to answer\"])\nfig.show()\n\n#add topline to each for all types\n# add seleciton 1 and selection 2","fada6fdb":"#########################################\n# Final Iteration - Touch-ups\n#########################################\nfig = go.Figure(layout=go.Layout(title= go.layout.Title(text=\"Comparing Education by Position\")))\n#changed from role selection to selection 1\nfig.add_trace(go.Bar(name= 'Selection 1', x= edu.index, y=(edu.values\/ edu.values.sum())))\n\nbuttons = []\n\n#added button for all data comparison\nbuttons.append(dict(method='restyle',\n                        label= 'All Samples',\n                        visible=True,\n                        args=[{'y':[df_fin.Q4.value_counts().values\/df_fin.Q4.value_counts().values.sum()],\n                               'x':[df_fin.Q4.value_counts().index],\n                               'type':'bar'}, [0]], # the [0] at the end lets us know they are for the first trace\n                        )\n                  )\n\nfor i in list(Roles.keys())[1:]:\n    buttons.append(dict(method='restyle',\n                        label= i,\n                        visible=True,\n                        args=[{'y':[Roles[i].Q4.value_counts().values\/Roles[i].Q4.value_counts().values.sum()],\n                               'x':[Roles[i].Q4.value_counts().index],\n                               'type':'bar'}, [0]], # the [0] at the end lets us know they are for the first trace\n                        )\n                  )\n\nfig.add_trace(go.Bar(name= 'Selection 2',x= edu.index, y=(edu.values\/ edu.values.sum())))\n\nbuttons2 = []\n#added button for all data comparison\nbuttons2.append(dict(method='restyle',\n                        label= 'All Samples',\n                        visible=True,\n                        args=[{'y':[df_fin.Q4.value_counts().values\/df_fin.Q4.value_counts().values.sum()],\n                               'x':[df_fin.Q4.value_counts().index],\n                               'type':'bar'}, [1]], # the [0] at the end lets us know they are for the first trace\n                        )\n                  )\n\nfor i in list(Roles.keys())[1:]:\n    buttons2.append(dict(method='restyle',\n                        label= i,\n                        visible=True,\n                        args=[{'y':[Roles[i].Q4.value_counts().values\/Roles[i].Q4.value_counts().values.sum()],\n                               'x':[Roles[i].Q4.value_counts().index],\n                               'type':'bar'}, [1]], # the [1] at the end lets us know they are for the first trace\n                        )                        #literally figured that out by just experimenting \n                  )\n# adjusted dropdown placement \n#found out updatemenus take a dictionary of buttons and allow you to format how the dropdowns look etc.\n# https:\/\/plotly.com\/python\/dropdowns\/\nbutton_layer_1_height = 1.23\nupdatemenus = list([\n    dict(buttons=buttons,\n            direction=\"down\",\n            pad={\"r\": 10, \"t\": 10},\n            showactive=True,\n            x=0.11,\n            xanchor=\"left\",\n            y=button_layer_1_height,\n            yanchor=\"top\"),\n    dict(buttons=buttons2,\n            direction=\"down\",\n            pad={\"r\": 10, \"t\": 10},\n            showactive=True,\n            x=0.71,\n            xanchor=\"left\",\n            y=button_layer_1_height,\n            yanchor=\"top\")])\n    \nfig.update_layout( updatemenus=updatemenus)\n#added annotations next to dropdowns \nfig.update_layout(\n    annotations=[\n        dict(text=\"Selection 1\", x=0, xref=\"paper\", y=1.15, yref=\"paper\",\n                             align=\"left\", showarrow=False),\n        dict(text=\"Selection 2\", x=0.65, xref=\"paper\", y=1.15,\n                             yref=\"paper\", showarrow=False)\n    ])\nfig.update_xaxes(categoryorder= 'array', categoryarray= [\"Doctoral degree\",'Master\u2019s degree','Bachelor\u2019s degree','Some college\/university study without earning a bachelor\u2019s degree',\"Professional degree\",\"No formal education past high school\",\"I prefer not to answer\"])\nfig.show()","9abf4764":"\"\"\"\nQuestions['Q7']\n\n# Q7 example for go use. We aggregate the data beforehand with .value_counts()\nQuestions['Q7'].columns = list(Questions['Q7'].mode().iloc[0,:])\nq7 = Questions['Q7'].count().reset_index()\nq7.columns = ['language','Count']\nq7 = q7.sort_values('Count', ascending = False)\nfig = go.Figure([go.Bar(x = q7.language, y = q7.Count)])\nfig.show()\n#q7\n\"\"\"","ad3bd950":"#########################################\n# Same Format But Coding Languages Q7\n#########################################\nQuestions['Q7']['Roles'] = df_fin.Q5\n\nfig = go.Figure(layout=go.Layout(title= go.layout.Title(text=\"Comparing Coding Languages by Position\")))\n#changed from role selection to selection 1\nfig.add_trace(go.Bar(name= 'Selection 1', x= q7.language, y=(q7.Count\/ q7.Count.sum())))\n\ndef filter_bars(role, data):\n    df = data[data['Roles'] == role]\n    q7 = df.drop('Roles', axis= 1).count().reset_index()\n    q7.columns = ['language','Count']\n    return (q7.language, q7.Count\/q7.Count.sum())\n\nbuttons = []\n\n#added button for all data comparison\nbuttons.append(dict(method='restyle',\n                        label= 'All Samples',\n                        visible=True,\n                        args=[{'y':[(q7.Count\/ q7.Count.sum())],\n                               'x':[q7.language],\n                               'type':'bar'}, [0]], # the [0] at the end lets us know they are for the first trace\n                        )\n                  )\n\nfor i in list(Roles.keys())[1:]:\n    buttons.append(dict(method='restyle',\n                        label= i,\n                        visible=True,\n                        args=[{'y':[filter_bars(i,Questions['Q7'])[1].values],\n                               'x':[filter_bars(i,Questions['Q7'])[0].values],\n                               'type':'bar'}, [0]], # the [0] at the end lets us know they are for the first trace\n                        )\n                  )\n\nfig.add_trace(go.Bar(name= 'Selection 2', x= q7.language, y=(q7.Count\/ q7.Count.sum())))\n\nbuttons2 = []\n#added button for all data comparison\nbuttons2.append(dict(method='restyle',\n                        label= 'All Samples',\n                        visible=True,\n                        args=[{'y':[(q7.Count\/ q7.Count.sum())],\n                               'x':[q7.language],\n                               'type':'bar'}, [1]], # the [0] at the end lets us know they are for the first trace\n                        )\n                  )\n\nfor j in list(Roles.keys())[1:]:\n    buttons2.append(dict(method='restyle',\n                        label= j,\n                        visible=True,\n                        args=[{'y':[filter_bars(j,Questions['Q7'])[1].values],\n                               'x':[filter_bars(j,Questions['Q7'])[0].values],\n                               'type':'bar'}, [1]], # the [1] at the end lets us know they are for the first trace\n                        )                        #literally figured that out by just experimenting \n                  )\n# adjusted dropdown placement \n#found out updatemenus take a dictionary of buttons and allow you to format how the dropdowns look etc.\n# https:\/\/plotly.com\/python\/dropdowns\/\nbutton_layer_1_height = 1.15\nupdatemenus = list([\n    dict(buttons=buttons,\n            direction=\"down\",\n            pad={\"r\": 10, \"t\": 10},\n            showactive=True,\n            x=0.1,\n            xanchor=\"left\",\n            y=button_layer_1_height,\n            yanchor=\"top\"),\n    dict(buttons=buttons2,\n            direction=\"down\",\n            pad={\"r\": 10, \"t\": 10},\n            showactive=True,\n            x=0.50,\n            xanchor=\"left\",\n            y=button_layer_1_height,\n            yanchor=\"top\")])\n    \nfig.update_layout( updatemenus=updatemenus)\n#added annotations next to dropdowns \nfig.update_layout(\n    annotations=[\n        dict(text=\"Selection 1\", x=0, xref=\"paper\", y=1.1, yref=\"paper\",\n                             align=\"left\", showarrow=False),\n        dict(text=\"Selection 2\", x=0.45, xref=\"paper\", y=1.1,\n                             yref=\"paper\", showarrow=False)\n    ])\nfig.update_xaxes(categoryorder= 'array', categoryarray= q7.language)\nfig.show()","0810c69e":"#########################################\n# Same Format But for IDE's Q9\n#########################################\n\n# Q7 example for go use. We aggregate the data beforehand with .value_counts()\nQuestions['Q9'].columns = list(Questions['Q9'].mode().iloc[0,:])\nq9 = Questions['Q9'].count().reset_index()\nq9.columns = ['language','Count']\nq9 = q9.sort_values('Count', ascending = False)\n\nQuestions['Q9']['Roles'] = df_fin.Q5\n\nfig = go.Figure(layout=go.Layout(title= go.layout.Title(text=\"Comparing IDE's by Position\")))\n#changed from role selection to selection 1\nfig.add_trace(go.Bar(name= 'Selection 1', x= q9.language, y=(q9.Count\/ q9.Count.sum())))\n\nbuttons = []\n\n#added button for all data comparison\nbuttons.append(dict(method='restyle',\n                        label= 'All Samples',\n                        visible=True,\n                        args=[{'y':[(q9.Count\/ q9.Count.sum())],\n                               'x':[q9.language],\n                               'type':'bar'}, [0]], # the [0] at the end lets us know they are for the first trace\n                        )\n                  )\n\nfor i in list(Roles.keys())[1:]:\n    buttons.append(dict(method='restyle',\n                        label= i,\n                        visible=True,\n                        args=[{'y':[filter_bars(i,Questions['Q9'])[1].values],\n                               'x':[filter_bars(i,Questions['Q9'])[0].values],\n                               'type':'bar'}, [0]], # the [0] at the end lets us know they are for the first trace\n                        )\n                  )\n\nfig.add_trace(go.Bar(name= 'Selection 2', x= q9.language, y=(q9.Count\/ q9.Count.sum())))\n\nbuttons2 = []\n#added button for all data comparison\nbuttons2.append(dict(method='restyle',\n                        label= 'All Samples',\n                        visible=True,\n                        args=[{'y':[(q9.Count\/ q9.Count.sum())],\n                               'x':[q9.language],\n                               'type':'bar'}, [1]], # the [0] at the end lets us know they are for the first trace\n                        )\n                  )\n\nfor j in list(Roles.keys())[1:]:\n    buttons2.append(dict(method='restyle',\n                        label= j,\n                        visible=True,\n                        args=[{'y':[filter_bars(j,Questions['Q9'])[1].values],\n                               'x':[filter_bars(j,Questions['Q9'])[0].values],\n                               'type':'bar'}, [1]], # the [1] at the end lets us know they are for the first trace\n                        )                        #literally figured that out by just experimenting \n                  )\n# adjusted dropdown placement \n#found out updatemenus take a dictionary of buttons and allow you to format how the dropdowns look etc.\n# https:\/\/plotly.com\/python\/dropdowns\/\nbutton_layer_1_height = 1.15\nupdatemenus = list([\n    dict(buttons=buttons,\n            direction=\"down\",\n            pad={\"r\": 10, \"t\": 10},\n            showactive=True,\n            x=0.1,\n            xanchor=\"left\",\n            y=button_layer_1_height,\n            yanchor=\"top\"),\n    dict(buttons=buttons2,\n            direction=\"down\",\n            pad={\"r\": 10, \"t\": 10},\n            showactive=True,\n            x=0.50,\n            xanchor=\"left\",\n            y=button_layer_1_height,\n            yanchor=\"top\")])\n    \nfig.update_layout( updatemenus=updatemenus)\n#added annotations next to dropdowns \nfig.update_layout(\n    annotations=[\n        dict(text=\"Selection 1\", x=0, xref=\"paper\", y=1.1, yref=\"paper\",\n                             align=\"left\", showarrow=False),\n        dict(text=\"Selection 2\", x=0.45, xref=\"paper\", y=1.1,\n                             yref=\"paper\", showarrow=False)\n    ])\nfig.update_xaxes(categoryorder= 'array', categoryarray= q9.language)\nfig.show()\n","996fff84":"#########################################\n# Question 8 -- What would they recommend\n#########################################\nedu2 = df_fin.Q8.value_counts()\nfig = go.Figure(layout=go.Layout(title= go.layout.Title(text=\"Recommended Coding Languages by Position\")))\n#changed from role selection to selection 1\nfig.add_trace(go.Bar(name= 'Selection 1', x= edu2.index, y=(edu2.values\/ edu2.values.sum())))\n\nbuttons = []\n\n#added button for all data comparison\nbuttons.append(dict(method='restyle',\n                        label= 'All Samples',\n                        visible=True,\n                        args=[{'y':[df_fin.Q8.value_counts().values\/df_fin.Q8.value_counts().values.sum()],\n                               'x':[df_fin.Q8.value_counts().index],\n                               'type':'bar'}, [0]], # the [0] at the end lets us know they are for the first trace\n                        )\n                  )\n\nfor i in list(Roles.keys())[1:]:\n    buttons.append(dict(method='restyle',\n                        label= i,\n                        visible=True,\n                        args=[{'y':[Roles[i].Q8.value_counts().values\/Roles[i].Q8.value_counts().values.sum()],\n                               'x':[Roles[i].Q8.value_counts().index],\n                               'type':'bar'}, [0]], # the [0] at the end lets us know they are for the first trace\n                        )\n                  )\n\nfig.add_trace(go.Bar(name= 'Selection 2',x= edu2.index, y=(edu2.values\/ edu2.values.sum())))\n\nbuttons2 = []\n#added button for all data comparison\nbuttons2.append(dict(method='restyle',\n                        label= 'All Samples',\n                        visible=True,\n                        args=[{'y':[df_fin.Q8.value_counts().values\/df_fin.Q8.value_counts().values.sum()],\n                               'x':[df_fin.Q8.value_counts().index],\n                               'type':'bar'}, [1]], # the [0] at the end lets us know they are for the first trace\n                        )\n                  )\n\nfor i in list(Roles.keys())[1:]:\n    buttons2.append(dict(method='restyle',\n                        label= i,\n                        visible=True,\n                        args=[{'y':[Roles[i].Q8.value_counts().values\/Roles[i].Q8.value_counts().values.sum()],\n                               'x':[Roles[i].Q8.value_counts().index],\n                               'type':'bar'}, [1]], # the [1] at the end lets us know they are for the first trace\n                        )                        #literally figured that out by just experimenting \n                  )\n# adjusted dropdown placement \n#found out updatemenus take a dictionary of buttons and allow you to format how the dropdowns look etc.\n# https:\/\/plotly.com\/python\/dropdowns\/\nbutton_layer_1_height = 1.15\nupdatemenus = list([\n    dict(buttons=buttons,\n            direction=\"down\",\n            pad={\"r\": 10, \"t\": 10},\n            showactive=True,\n            x=0.1,\n            xanchor=\"left\",\n            y=button_layer_1_height,\n            yanchor=\"top\"),\n    dict(buttons=buttons2,\n            direction=\"down\",\n            pad={\"r\": 10, \"t\": 10},\n            showactive=True,\n            x=0.50,\n            xanchor=\"left\",\n            y=button_layer_1_height,\n            yanchor=\"top\")])\n    \nfig.update_layout( updatemenus=updatemenus)\n#added annotations next to dropdowns \nfig.update_layout(\n    annotations=[\n        dict(text=\"Selection 1\", x=0, xref=\"paper\", y=1.1, yref=\"paper\",\n                             align=\"left\", showarrow=False),\n        dict(text=\"Selection 2\", x=0.45, xref=\"paper\", y=1.1,\n                             yref=\"paper\", showarrow=False)\n    ])\n#fig.update_xaxes(categoryorder= 'array', categoryarray= [\"Doctoral degree\",'Master\u2019s degree','Bachelor\u2019s degree','Some college\/university study without earning a bachelor\u2019s degree',\"Professional degree\",\"No formal education past high school\",\"I prefer not to answer\"])\nfig.show()","dc1029ed":"#########################################\n# Design Function \n#########################################\n\ndef filter_bars(role, data):\n    df = data[data['Roles'] == role]\n    q = df.drop('Roles', axis= 1).count().reset_index()\n    q.columns = ['language','Count']\n    return (q.language, q.Count\/q.Count.sum())\n\ndef build_graph(q_number, Roles, Title):\n    \"\"\"Create dropdown visual with question data\"\"\"\n    if isinstance(q_number, pd.DataFrame):\n        qnumber = q_number.copy()\n        qnumber.columns = list(qnumber.mode().iloc[0,:])\n        qcnt = qnumber.count().reset_index()\n        qcnt.columns = ['feature','cnt']\n        qcnt = qcnt.sort_values('cnt', ascending = False)\n        qnumber['Roles'] = df_fin.Q5\n        \n\n        fig = go.Figure(layout=go.Layout(title= go.layout.Title(text=Title)))\n        #changed from role selection to selection 1\n        fig.add_trace(go.Bar(name= 'Selection 1', x= qcnt.feature, y=(qcnt.cnt\/ qcnt.cnt.sum())))\n\n        buttons = []\n\n        #added button for all data comparison\n        buttons.append(dict(method='restyle',\n                                label= 'All Samples',\n                                visible=True,\n                                args=[{'y':[(qcnt.cnt\/ qcnt.cnt.sum())],\n                                       'x':[qcnt.feature],\n                                       'type':'bar'}, [0]], # the [0] at the end lets us know they are for the first trace\n                                )\n                          )\n\n        for i in list(Roles.keys())[1:]:\n            buttons.append(dict(method='restyle',\n                                label= i,\n                                visible=True,\n                                args=[{'y':[filter_bars(i,qnumber)[1].values],\n                                       'x':[filter_bars(i,qnumber)[0].values],\n                                       'type':'bar'}, [0]], # the [0] at the end lets us know they are for the first trace\n                                )\n                          )\n\n        fig.add_trace(go.Bar(name= 'Selection 2', x= qcnt.feature, y=(qcnt.cnt\/ qcnt.cnt.sum())))\n\n        buttons2 = []\n        #added button for all data comparison\n        buttons2.append(dict(method='restyle',\n                                label= 'All Samples',\n                                visible=True,\n                                args=[{'y':[(qcnt.cnt\/ qcnt.cnt.sum())],\n                                       'x':[qcnt.feature],\n                                       'type':'bar'}, [1]], \n                                )\n                          )\n\n        for i in list(Roles.keys())[1:]:\n            buttons2.append(dict(method='restyle',\n                                label= i,\n                                visible=True,\n                                args=[{'y':[filter_bars(i,qnumber)[1].values],\n                                       'x':[filter_bars(i,qnumber)[0].values],\n                                       'type':'bar'}, [1]],\n                                )\n                          )\n\n        # adjusted dropdown placement \n        #found out updatemenus take a dictionary of buttons and allow you to format how the dropdowns look etc.\n        # https:\/\/plotly.com\/python\/dropdowns\/\n        button_layer_1_height = 1.15\n        updatemenus = list([\n            dict(buttons=buttons,\n                    direction=\"down\",\n                    pad={\"r\": 10, \"t\": 10},\n                    showactive=True,\n                    x=0.1,\n                    xanchor=\"left\",\n                    y=button_layer_1_height,\n                    yanchor=\"top\"),\n            dict(buttons=buttons2,\n                    direction=\"down\",\n                    pad={\"r\": 10, \"t\": 10},\n                    showactive=True,\n                    x=0.50,\n                    xanchor=\"left\",\n                    y=button_layer_1_height,\n                    yanchor=\"top\")])\n\n        fig.update_layout( updatemenus=updatemenus)\n        #added annotations next to dropdowns \n        fig.update_layout(\n            annotations=[\n                dict(text=\"Selection 1\", x=0, xref=\"paper\", y=1.1, yref=\"paper\",\n                                     align=\"left\", showarrow=False),\n                dict(text=\"Selection 2\", x=0.45, xref=\"paper\", y=1.1,\n                                     yref=\"paper\", showarrow=False)\n            ])\n        fig.update_xaxes(categoryorder= 'array', categoryarray= qcnt.feature)\n        fig.show()\n        \n        \n    else:\n        qnumber= q_number.copy()\n        vcnts = qnumber.value_counts()\n        qnumber = pd.concat([qnumber,df_fin.Q5], axis =1)\n        qnumber.columns = ['feature','Roles']\n\n        fig = go.Figure(layout=go.Layout(title= go.layout.Title(text=Title)))\n        #changed from role selection to selection 1\n        fig.add_trace(go.Bar(name= 'Selection 1', x= vcnts.index, y=(vcnts.values\/ vcnts.values.sum())))\n\n        buttons = []\n\n        #added button for all data comparison\n        buttons.append(dict(method='restyle',\n                                label= 'All Samples',\n                                visible=True,\n                                args=[{'y':[vcnts.values\/ vcnts.values.sum()],\n                                       'x':[vcnts.index],\n                                       'type':'bar'}, [0]], # the [0] at the end lets us know they are for the first trace\n                                )\n                          )\n\n        for i in list(Roles.keys())[1:]:\n            qrole = qnumber[qnumber['Roles']==i].feature.value_counts()\n            buttons.append(dict(method='restyle',\n                                label= i,\n                                visible=True,\n                                args=[{'y':[qrole.values\/qrole.values.sum()],\n                                       'x':[qrole.index],\n                                       'type':'bar'}, [0]], # the [0] at the end lets us know they are for the first trace\n                                )\n                          )\n\n        fig.add_trace(go.Bar(name= 'Selection 2',x= vcnts.index, y=(vcnts.values\/ vcnts.values.sum())))\n\n        buttons2 = []\n                #added button for all data comparison\n        buttons2.append(dict(method='restyle',\n                                label= 'All Samples',\n                                visible=True,\n                                args=[{'y':[(vcnts.values\/ vcnts.values.sum())],\n                                       'x':[vcnts.index],\n                                       'type':'bar'}, [1]], # the [0] at the end lets us know they are for the first trace\n                                )\n                          )\n\n        for i in list(Roles.keys())[1:]:\n            qrole = qnumber[qnumber['Roles']==i].feature.value_counts()\n            buttons2.append(dict(method='restyle',\n                                label= i,\n                                visible=True,\n                                args=[{'y':[qrole.values\/qrole.values.sum()],\n                                       'x':[qrole.index],\n                                       'type':'bar'}, [1]], # the [0] at the end lets us know they are for the first trace\n                                )\n                          )\n        # adjusted dropdown placement \n        #found out updatemenus take a dictionary of buttons and allow you to format how the dropdowns look etc.\n        # https:\/\/plotly.com\/python\/dropdowns\/\n        button_layer_1_height = 1.15\n        updatemenus = list([\n            dict(buttons=buttons,\n                    direction=\"down\",\n                    pad={\"r\": 10, \"t\": 10},\n                    showactive=True,\n                    x=0.1,\n                    xanchor=\"left\",\n                    y=button_layer_1_height,\n                    yanchor=\"top\"),\n            dict(buttons=buttons2,\n                    direction=\"down\",\n                    pad={\"r\": 10, \"t\": 10},\n                    showactive=True,\n                    x=0.50,\n                    xanchor=\"left\",\n                    y=button_layer_1_height,\n                    yanchor=\"top\")])\n\n        fig.update_layout( updatemenus=updatemenus)\n        #added annotations next to dropdowns \n        fig.update_layout(\n            annotations=[\n                dict(text=\"Selection 1\", x=0, xref=\"paper\", y=1.1, yref=\"paper\",\n                                     align=\"left\", showarrow=False),\n                dict(text=\"Selection 2\", x=0.45, xref=\"paper\", y=1.1,\n                                     yref=\"paper\", showarrow=False)\n            ])\n        fig.update_xaxes(categoryorder= 'array', categoryarray= vcnts.index)\n        fig.show()\n        \n    return","74dd4490":"build_graph(Questions['Q1'],Roles,'Age by Position')","09f3af14":"build_graph(Questions['Q12'],Roles,'Hardware by position')","8199c9ad":"**Part of EDA is finding a way to make the data useful to you.** I wanted to make it easy to run analysis on individual questions if I wanted to. The most practical way I found was to put all the questions in a dictionary. Each key in the dictionary is the Question number and each value is a dataframe with the parts to the question. I could now easily pull data for individual questions rather than filtering every time. This is particularly important for questions with multiple parts.","f8646661":"# Part 3 - Kaggle Project From Scratch (Building Advanced Graphs)\nThis kernel is meant to accompany this video: https:\/\/youtu.be\/GO420aMtHfk \n\nI will be walking through the process of how I created these graphs and approached this analysis. This series will be more about my process than the actual findings. I will create a future video where I highlight all of the findings of my analysis! \n\n1. Create more advanced graphs comparing programming languages, IDE's, etc. by role \n2. Create a function to easily graph results for other comparisons \n3. Separate notebook for comparing gender differences linked here: \n","45248286":"# Q1 & Q7 Examples to explain px vs go\n**plotly express (px)** --> takes the data frame in as a parameter and you use other paramaters to mainipulate the columns. I think this is better for beginners and allows you to work with a full dataframe.\n\n**plotly graph objects (go)** --> Takes in just the data as parameters. In this case you manipulate the data before passing it in. This is a bit more flexbile for questions like Q7 where there are columns for each answer type.\n\nExamples below:****","c0e6e07a":"The main thing I wanted to understand through this analysis was position by roles. I used a similar process as above to create a dictionary where they roles were the keys and the dataframes filtered by role were the value pairs. This might not have been the most efficient approach, but with a relatively small dataset like this, I valued ease of use over compute time.","e9470297":"# Building an Advanced Graph\nI wanted to try to compare education levels between different career tracks. A great thing about plotly is that it is interactive. I wanted to explore these features to build a graph that uses a dropdown to compare different roles. The below graphs are the iterations of how I came to the final graph. Again, this workbook is more to show the process than to highlight the end results. Watching the video for this portion is recommended!","0cc1a7c5":"# Part 1 - How to Start a Kaggle Competition\n**Video:** https:\/\/www.youtube.com\/watch?v=r-DR9HBaipU&ab_channel=KenJee\n\n1. How to join a kaggle competition\n2. Read through documentation\n3. Understand evaluation criteria \n4. Download the data (kaggle api cli)\n5. Review other people's kernels to frame questions \n6. Create questions for EDA\n\n**Questions:**\n- Difference in positions --> Tools \/ Skills \/ Pay | This notebook\n- Gender differences (controlling for position and experience) (regression?) \n\n**Notebooks Referenced:**\n- https:\/\/www.kaggle.com\/subinium\/kaggle-2020-visualization-analysis\n- https:\/\/www.kaggle.com\/spitfire2nd\/enthusiast-to-data-professional-what-changes\n- https:\/\/www.kaggle.com\/dwin183287\/kagglers-seen-by-continents\n- https:\/\/www.kaggle.com\/michau96\/education-level-affects-data-analysis\n- https:\/\/www.kaggle.com\/chandramanaha\/kyc-know-your-community\n- https:\/\/www.kaggle.com\/ahmedatta\/who-said-data-science-is-boring\n\n\n\n\n# Part 2 - Kaggle Project From Scratch (Basic Exploratory Data Analysis)\n**Video:** https:\/\/www.youtube.com\/watch?v=KQ80oD_boBM&feature=youtu.be&ab_channel=KenJee\n\nThis kernel is meant to accompany the above video. This is not a traditional kernel, it is more focused on showing how someone may approach a new poroblem and work with new tools than on finding the best \"answer\" to the question. I hope you enjoy! \n\n\n## EDA Plan of Attack \n\n1. High level understanding of data (look at columns, nulls, shape, etc)\n2. Understand how to work with different question types (Multiple answer vs single answer)\n3. Experiment with plotly basics px vs go (Not a Plotly Tutorial)\n4. Go through my process of learning to build more advanced graphs \n5. Start understanding the question \"How do skills vary across roles\"\n\n"}}