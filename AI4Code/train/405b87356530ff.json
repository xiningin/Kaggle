{"cell_type":{"c3e79e6d":"code","d8ec809a":"code","611de35b":"code","0cd09716":"code","9c3d52bd":"code","211f428f":"code","ec174463":"code","85969008":"code","a2d381b9":"code","595bbb6f":"code","59c72e1f":"code","6d367e92":"code","3858b9d0":"code","52107285":"code","187f4d3f":"code","300df09d":"code","767204d5":"code","84335e61":"code","cdc2dcb1":"code","7f9c24de":"code","d7a8e3b0":"code","57480dd8":"code","d53709ff":"code","d24127cb":"code","4ecd9c83":"code","7c3b442e":"code","73cabf66":"code","8898b097":"code","49734ad7":"code","5d6b12f1":"code","488e8044":"code","bf64a558":"code","75876dfe":"code","d9d70616":"code","183894d6":"code","cce06be3":"code","cb7c4e4e":"code","085014d3":"code","de83edd5":"code","8dce4efa":"code","ed354556":"code","9c17e3ba":"code","3a3fa73b":"code","d13f8c20":"code","2a7f4285":"markdown","8e0bbfd0":"markdown","cbfd9211":"markdown","dabfd9c9":"markdown","ce1d4267":"markdown","6f5c251e":"markdown","406f1cad":"markdown"},"source":{"c3e79e6d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d8ec809a":"data = pd.read_csv('\/kaggle\/input\/fifa19\/data.csv')\ndata.info()","611de35b":"data.corr()","0cd09716":"f,ax = plt.subplots(figsize=(16, 16))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","9c3d52bd":"data.head(10)","211f428f":"data.columns","ec174463":"data.Overall.plot(kind = 'line', color = 'g',label = 'Overall',linewidth=1,alpha = 0.5,grid = True,linestyle = ':')\ndata.Age.plot(color = 'r',label = 'Age',linewidth=1, alpha = 0.5,grid = True,linestyle = '-.')\nplt.legend(loc='upper right')     # legend = puts label into plot\nplt.xlabel('x axis')              # label = name of label\nplt.ylabel('y axis')\nplt.title('Line Plot')            # title = title of plot\nplt.show()","85969008":"data.plot(kind='scatter', x='Age', y='Overall',alpha = 0.5,color = 'red')\nplt.xlabel('Age')              # label = name of label\nplt.ylabel('Overall')\nplt.title('Age Overall Scatter Plot')            # title = title of plot\nplt.show()","a2d381b9":"data.Overall.plot(kind = 'hist',bins = 70,figsize = (12,12))\nplt.show()","595bbb6f":"x = data['Age']>35\nx\ndata[x]","59c72e1f":"data.columns","6d367e92":"threshold = sum(data.Age)\/len(data.Age)\ndata[\"Age_level\"] = [\"high\" if i > threshold else \"low\" for i in data.Age]\ndata.loc[:10,[\"Age_level\",\"Age\"]]","3858b9d0":"threshold = sum(data.Overall )\/len(data.Overall )\ndata[\"Overall_level\"] = [\"high\" if i > threshold else \"low\" for i in data.Overall]\ndata.loc[:10,[\"Overall_level\",\"Overall\"]]","52107285":"data.info()","187f4d3f":"data.describe()","300df09d":"print(data['Nationality'].value_counts(dropna =False))","767204d5":"print(data['Position'].value_counts(dropna =False))","84335e61":"data['Position'].describe()","cdc2dcb1":"\ndata.columns","7f9c24de":"data['Position_head'] = [\"RF\" if i=='RF' else 'LF' if  i=='LF' else \"Other\"  for i in data.Position]\nsns.boxplot(x='Position_head',y='Overall',data = data)","d7a8e3b0":"data_new = data.head()    # I only take 5 rows into new data\ndata_new","57480dd8":"melted = pd.melt(frame=data_new,id_vars = 'Name', value_vars= ['Club','Nationality'])\nmelted","d53709ff":"melted.pivot(index = 'Name', columns = 'variable',values='value')","d24127cb":"data1 = data.head()\ndata2= data.tail()\nconc_data_row = pd.concat([data1,data2],axis =0,ignore_index =True) # axis = 0 : adds dataframes in row\nconc_data_row","4ecd9c83":"data3 = data['Name'].head()\ndata1 = data['Position'].head()\ndata2= data['Overall'].head()\nconc_data_col = pd.concat([data3,data1,data2],axis =1) # axis = 0 : adds dataframes in row\nconc_data_col","7c3b442e":"data.dtypes","73cabf66":"data['Name'] = data['Name'].astype('category')\ndata['ID'] = data['ID'].astype('float')","8898b097":"data.info()\ndata.head(30)","49734ad7":"#data[\"Club\"].value_counts(dropna =False)","5d6b12f1":"#data1=data\n#data1.dropna(inplace = True)\n#data1.info()","488e8044":"from collections import Counter\n%matplotlib inline\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))","bf64a558":"data.info()","75876dfe":"data.head()","d9d70616":"data = pd.read_csv('\/kaggle\/input\/fifa19\/data.csv')","183894d6":"data.Overall.value_counts()","cce06be3":"data.Club.value_counts()","cb7c4e4e":"club_list = list(data.Club.unique())\nclub_overall_ratio = []\nfor i in club_list:\n    if type(i) == float:\n        club_list.remove(i)\nfor i in club_list:\n    x = data[data['Club'] == i]\n    club_overall_rate = sum(x.Overall)\/len(x)\n    club_overall_ratio.append(club_overall_rate)\ndata1 = pd.DataFrame({'club_list': club_list,'club_overall_ratio':club_overall_ratio})\nnew_index = (data1['club_overall_ratio'].sort_values(ascending=False)).index.values\nsorted_data = data1.reindex(new_index)","085014d3":"sorted_data","de83edd5":"plt.figure(figsize=(15,10))\nsns.barplot(x=sorted_data['club_list'].head(35), y=sorted_data['club_overall_ratio'].head(35))\nplt.xticks(rotation= 90)\nplt.xlabel('Club')\nplt.ylabel('Overall Rate')\nplt.title('club_overall_ratio_head')","8dce4efa":"plt.figure(figsize=(15,10))\nsns.barplot(x=sorted_data['club_list'].tail(35), y=sorted_data['club_overall_ratio'].tail(35))\nplt.xticks(rotation= 90)\nplt.xlabel('Club')\nplt.ylabel('Overall Rate')\nplt.title('club_overall_ratio_tail')","ed354556":"Nationality = list(data.Nationality)\ncount_nat = Counter(Nationality)\nmost_common_nat = count_nat.most_common(15)  \nx,y = zip(*most_common_nat)\nx,y = list(x),list(y)\n\nplt.figure(figsize=(15,10))\nax= sns.barplot(x=x, y=y,palette = sns.cubehelix_palette(len(x)))\nplt.xticks(rotation= 90)\nplt.xlabel('Nationalities')\nplt.ylabel('Frequency')\nplt.title('countries with footballer population')\nprint(most_common_nat)","9c17e3ba":"data.columns","3a3fa73b":"new_data = data[['Club','Release Clause']].copy()\nnew_data.dropna(inplace = True)\nClub = list(new_data['Club'].unique())\nRelease = list(new_data['Release Clause'])\nm = [ float(i[1:-1]) if 'M' == i[-1] else int(i[1:-1])\/1000  for i in Release]\nnew_data['Release Clause'] = m\nRelease_Clause_list = []\nfor i in Club:\n    x = new_data[new_data['Club'] == i]\n    rate = sum(x['Release Clause'])\/len(x['Release Clause'])\n    Release_Clause_list.append(rate)\n\ndata_release = pd.DataFrame({'Club': Club,'Release_Clause_ratio': Release_Clause_list})\nnew_index = (data_release['Release_Clause_ratio'].sort_values(ascending = False)).index.values\nsorted_data2 = data_release.reindex(new_index)\n\nplt.figure(figsize = (15,10))\nsns.barplot(x = sorted_data2['Club'].head(50), y = sorted_data2['Release_Clause_ratio'].head(50))\nplt.xticks(rotation = 90)\nplt.xlabel('Clubs')\nplt.ylabel('Release Clause ratio')\nplt.title(\"Average market value of players in clubs\")","d13f8c20":"nat_ovr = data[['Nationality','Overall','Club']].copy()\nnat_ovr.dropna(inplace=True)\nclub_list = list(nat_ovr['Club'].unique())[0:30]\nmost_common_nat = count_nat.most_common(5) # yukarida tanimli\nn,f = zip(*most_common_nat) \nnat_list = list(n)\n\nEngland = []\nGermany = []\nSpain = []\nArgentina = []\nFrance = []\nnat_ovr_list = []\n\nfor i in nat_list:\n    x = nat_ovr[nat_ovr['Nationality'] == i]\n    for j in club_list:\n        y = x[x['Club'] == j]\n        if i == 'England' and not y.empty:\n            England.append(sum(y['Overall'])\/len(y['Overall']))\n        elif y.empty:\n            England.append(0)\n        if i == 'Germany' and not y.empty:\n            Germany.append(sum(y['Overall'])\/len(y['Overall']))\n        elif y.empty:\n            Germany.append(0)\n        if i == 'Spain' and not y.empty:\n            Spain.append(sum(y['Overall'])\/len(y['Overall']))\n        elif y.empty:\n            Spain.append(0)\n        if i == 'Argentina' and not y.empty:\n            Argentina.append(sum(y['Overall'])\/len(y['Overall']))\n        elif y.empty:\n            Argentina.append(0)\n        if i == 'France' and not y.empty:\n            France.append(sum(y['Overall'])\/len(y['Overall']))\n        elif y.empty:\n            France.append(0)\n\n","2a7f4285":"* kuluplerdeki oyuncularin ortalama  pazar degerleri;","8e0bbfd0":"* kuluperin ortalama genel dereceleri;\n**takimsiz oyuncular var bunlari takimsiz olarak guruplamam gerekiyor!**\nclub_list = list(data.Club.unique())\nclub_overall_ratio = []\nk = 0\nprint(len(club_list))\nfor i in club_list:\n    x = data[data['Club'] == i]\n    if len(x.Name) == 0:\n        print(i)\n    else:\n        k+=1\n        print(k)","cbfd9211":"*  en cok futbolcuya sahip ulke;","dabfd9c9":"Overall & Club","ce1d4267":"data[np.logical_and(data['Age']>35, data['Overall']>80 )]","6f5c251e":"* futbolcularin uyruklarina gore ortalama genel dereceleri","406f1cad":"K = [ int(i[1:-1]+'000')\/1000000  for i in Release if 'K' == i[-1]]\nM = [ float(i[1:-1])  for i in Release if 'M' == i[-1]]"}}