{"cell_type":{"43b03bd3":"code","d9b92bc7":"code","c7eb8005":"code","80c6e99c":"code","b681123d":"code","1fc610ca":"code","a840f4a4":"code","de0ccbe9":"code","7d778f9d":"code","dd94c934":"code","96f6256f":"code","fa10117d":"code","09d03511":"code","1503b0cd":"code","060bcef6":"code","d3d90c10":"code","099fbce8":"code","b189afdf":"code","8863fe49":"code","f7ef1fe6":"code","f8c1d9e2":"code","8de34669":"code","5d0c765e":"code","eb0cc2fc":"code","729ddd6d":"code","db880d98":"code","de72f449":"code","10f78bba":"code","30eb1467":"code","671ef7d2":"code","9130901f":"code","c4e4a268":"code","ff1d30a0":"code","ac2222f4":"code","453f0b61":"code","a927d48c":"code","0b58442c":"code","8fb50629":"code","de089be7":"code","0384bc83":"code","f4b6b1c5":"code","44751cb1":"code","60e4d0fb":"code","1a79553a":"code","3ec8c2ea":"code","9452bda4":"code","aeae6998":"code","9b28f6f1":"code","f7b83004":"code","dbfcb45d":"code","42338116":"code","a8023ecf":"code","fecc178a":"code","6531563b":"code","2ce29118":"code","389d43f5":"code","3319595c":"code","b25c9f1d":"code","d9247739":"code","75023162":"code","7d907a00":"code","0436a4c2":"code","f29f8ac1":"code","25d8ecbf":"code","94ec8a33":"code","2390d69a":"code","44a39ec7":"code","218a724f":"code","77843474":"code","e6538b45":"code","e0817a4f":"code","c7eae5b1":"code","2d689d8e":"code","4b7ab106":"code","5db08cc0":"code","33cdae98":"code","7a9f576a":"code","3466aa1e":"code","94d0f7d1":"markdown","d92b68f2":"markdown","e6176556":"markdown","7a16c2a5":"markdown","1fa33030":"markdown","74c4014d":"markdown","10c23fa8":"markdown","5068a41e":"markdown","cc157575":"markdown","72fc0c10":"markdown","11ae9d71":"markdown","47f6a448":"markdown","8d8b9f45":"markdown","17faa427":"markdown","956c4ade":"markdown","3e1a1c0f":"markdown","c0251b4c":"markdown","c22cce64":"markdown","71ac6878":"markdown"},"source":{"43b03bd3":"\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n\n\nfrom sklearn.model_selection import train_test_split\n#from sklearn.preprocessing import OneHotEncoder\nfrom xgboost import XGBRegressor,XGBClassifier\n#from sklearn.impute import SimpleImputer\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# combined_products = pd.concat([gaming_products, movie_products])\n# if to combine two dataset refer above code_line\n\n\n\n\n\n","d9b92bc7":"train_data=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntrain_data","c7eb8005":"test_data=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest_data","80c6e99c":"train_results = train_data[\"Survived\"].copy()\ntrain_data.drop(\"Survived\", axis=1, inplace=True, errors=\"ignore\")\ntitanic = pd.concat([train_data, test_data])\ntraindex = train_data.index\ntestdex = test_data.index","b681123d":"titanic","1fc610ca":"titanic[titanic['Cabin']=='B51 B53 B55']\n#the 2nd person is probably a false one","a840f4a4":"titanic.index=range(len(titanic))\n","de0ccbe9":"titanic","7d778f9d":"# titanic=titanic.drop(['Cabin'],axis=1)\n#cabin has 600+ null entries , so you can drop it as it increases noise\n","dd94c934":"titanic.info()","96f6256f":"titanic[pd.isnull(titanic['Fare'])]","fa10117d":"mean=titanic[titanic['Pclass']==3][titanic['Embarked']=='S'][titanic['Sex']=='male'][titanic['Age']>=40][titanic['SibSp']==0][titanic['Parch']==0]\nmean['Fare'].describe()","09d03511":"titanic[['Fare']]=titanic[['Fare']].fillna(value=7.69)","1503b0cd":"titanic.isnull().sum()","060bcef6":"\n\ntitanic[\"Title\"] = titanic.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n\npd.crosstab(titanic['Title'], titanic['Sex'])\n\n","d3d90c10":"\n\ntitanic['Title'] = titanic['Title'].replace('Mlle', 'Miss')\ntitanic['Title'] = titanic['Title'].replace('Ms', 'Miss')\ntitanic['Title'] = titanic['Title'].replace('Mme', 'Mrs')\n\n","099fbce8":"titanic['Title'] = titanic['Title'].replace(['Lady', 'Countess','Capt','Col','Don', 'Dr', 'Major','Rev', 'Sir', 'Jonkheer', 'Dona'], 'Not married')","b189afdf":"titanic['Title'] = titanic['Title'].replace(['Mr', 'Mrs'], 'Married')","8863fe49":"pd.crosstab(titanic['Title'], titanic['Sex'])","f7ef1fe6":"titanic","f8c1d9e2":"titanic[\"Surname\"] = titanic.Name.str.split(',').str.get(0)","8de34669":"titanic","5d0c765e":"titanic=titanic.drop(['Name'],axis=1)","eb0cc2fc":"titanic","729ddd6d":"titanic.Surname.value_counts()","db880d98":"titanic['SurnameFreq']=titanic.groupby('Surname')['Surname'].transform('count')\n\n","de72f449":"titanic","10f78bba":"titanic.Ticket.value_counts()\n#unique Values","30eb1467":"titanic['TicketFreq']=titanic.groupby('Ticket')['Ticket'].transform('count')\n\n","671ef7d2":"titanic","9130901f":"titanic['customizedFare']=titanic.Fare\/(titanic.TicketFreq*titanic.Pclass)","c4e4a268":"titanic","ff1d30a0":"titanic.isnull().sum()","ac2222f4":"titanic.Age.describe()","453f0b61":"plt.figure(figsize=(20,10))\nsns.heatmap(titanic.corr(),annot=True)","a927d48c":"titanic[titanic['Title']=='Boy'].Age.median()","0b58442c":"titanic.loc[(titanic.Age.isnull()) & (titanic.Title=='Master'),'Age']=int(4.0)","8fb50629":"titanic.loc[(titanic.Age.isnull()) & (titanic.Sex=='male'),'Age']=int(30.0)","de089be7":"titanic.loc[(titanic.Age.isnull()) & (titanic.Sex=='female'),'Age']=int(27.0)","0384bc83":"# age_by_pclass_sex = titanic.groupby(['Sex', 'Pclass']).median()['Age']\n\n# for pclass in range(1, 4):\n#     for sex in ['female', 'male']:\n#         print('Median age of Pclass {} {}s: {}'.format(pclass, sex, age_by_pclass_sex[sex][pclass]))\n# print('Median age of all passengers: {}'.format(titanic['Age'].median()))\n\n# Filling the missing values in Age with the medians of Sex and Pclass groups\n# titanic['Age'] = titanic.groupby(['Sex', 'Pclass'])['Age'].apply(lambda x: x.fillna(x.median()))","f4b6b1c5":"titanic.info()","44751cb1":"titanic.isnull().sum()","60e4d0fb":"titanic['Embarked'].fillna('S',inplace=True)\n\n#to rename columns refer below\n#renamed = reviews.rename(columns=dict(region_1='region', region_2='locale'))","1a79553a":"titanic.isnull().sum()","3ec8c2ea":"titanic['Family']=titanic['SibSp']+titanic['Parch']+1\ntitanic=titanic.drop(['SibSp','Parch'],axis=1)","9452bda4":"titanic","aeae6998":"titanic.SurnameFreq=titanic.TicketFreq","9b28f6f1":"titanic","f7b83004":"# titanic['Deck'] = titanic['Cabin'].apply(lambda s: s[0] if pd.notnull(s) else 'M')\n# idx = titanic[titanic['Deck'] == 'T'].index\n# titanic.loc[idx, 'Deck'] = 'A'","dbfcb45d":"# titanic['Deck'] = titanic['Deck'].replace(['A', 'B', 'C'], 'ABC')\n# titanic['Deck'] = titanic['Deck'].replace(['D', 'E'], 'DE')\n# titanic['Deck'] = titanic['Deck'].replace(['F', 'G'], 'FG')\ntitanic['Deck']=titanic['Cabin'].notnull().astype(str).str[0]\ntitanic['Deck'].value_counts()","42338116":"titanic=titanic.drop(['Cabin'],axis=1)","a8023ecf":"titanic.info()","fecc178a":"titanic","6531563b":"\n\n# titanic['Age'] = pd.qcut(titanic['Age'], 10)\n\n","2ce29118":"def FamilyGroup(family):\n    a=''\n    if family<=1:\n        a='Single'\n    elif family<=4:\n        a='Small'\n    else:\n        a='Large'\n    return a\ntitanic['FamilyGroup']=titanic['Family'].map(FamilyGroup)\ntitanic=titanic.drop(['Family'],axis=1)  ","389d43f5":"# titanic['customizedFare'] = pd.qcut(titanic['customizedFare'], 13)","3319595c":"titanic.head()","b25c9f1d":"titanic","d9247739":"def AgeGroup(age):\n    a=''\n    if age<=15:\n        a='Child'\n    elif age<=30:\n        a='Young'\n    elif age<=50:\n        a='Adult'\n    else:\n        a='Old'\n    return a\ntitanic['AgeGroup']=titanic['Age'].map(AgeGroup)\ntitanic=titanic.drop(['Age'],axis=1)  ","75023162":"titanic","7d907a00":"titanic.corr()","0436a4c2":"titanic=titanic.drop(['PassengerId','TicketFreq','Ticket','Fare','Title','Surname'], axis=1)","f29f8ac1":"titanic_data=pd.get_dummies(titanic,columns=['Embarked','AgeGroup','Sex','Deck','FamilyGroup'])","25d8ecbf":"titanic_data.head()","94ec8a33":"print(traindex)","2390d69a":"print(testdex)","44a39ec7":"titanic_data.shape","218a724f":"titanic_data.loc[0:890]","77843474":"titanic_data.loc[891:1308]","e6538b45":"# Train\ntrain_df = titanic_data.loc[0:890]\ntrain_df['Survived'] = train_results\n\n# Test\ntest_df = titanic_data.loc[891:1308]","e0817a4f":"train_df.corr()","c7eae5b1":"\nprint(train_df)","2d689d8e":"print(test_df)","4b7ab106":"X=train_df.drop(['Survived'],axis=1)\nX.head()\ny=train_df.Survived\ny.head()\n","5db08cc0":"X.head()","33cdae98":"# X_train , X_test, y_train, y_test=train_test_split(X,y, test_size=0.3,random_state=1)\n\n#use it to test your model on training data","7a9f576a":"xgbr=XGBClassifier(n_estimators=2800,\n    min_child_weight=0.1,\n    learning_rate=0.002,\n    max_depth=2,\n    subsample=0.47,\n    colsample_bytree=0.35,\n    gamma=0.4,\n    reg_lambda=0.4,\n    random_state=42,\n    n_jobs=-1,)\nxgbr.fit(X,y)\n\npredicts=xgbr.predict(test_df)\n\n","3466aa1e":"\n\n\n\nsubmission = pd.DataFrame({\n        \"PassengerId\": test_data[\"PassengerId\"],\n        \"Survived\": predicts\n    })\nsubmission.Survived = submission.Survived.round().astype(\"int\")\nsubmission.to_csv('titanic.csv', index=False)\nprint(\"Submitted Successfully\")\n\n\n\n","94d0f7d1":"**Dividing total dataset into train and test*","d92b68f2":"Optimizing the Title column","e6176556":"Droping name column as we have extracted all important information","7a16c2a5":"Extracting Title from Name","1fa33030":"# You can use this notebook as a reference for feature engineering and imputing missing values\n\n**If you like it, do upvote it**","74c4014d":"Engineering another feature Familygroup to optimize data","10c23fa8":"Assigning median of children to empty age values of title=master or kids","5068a41e":"**Now Let us deal with missing values in Age column**\nAs majority of kids and female survived so I'll break age column in kids, females and males section for dealinng with null values","cc157575":"Combining Sibsp and Parch to Family","72fc0c10":"Obtaining TicketFreq","11ae9d71":"I have also used Pclass for customized fare to optimize it","47f6a448":"**Combining test and train data for better imputing**","8d8b9f45":"Find median of age of females","17faa427":"**Handling Categorical Data**","956c4ade":"Reindexing the data","3e1a1c0f":"Lets create a new column Customized Fare as the there are duplicate tickets present in the data. So a person has bought tickets for his family also.","c0251b4c":"Extracting Surname from name column","c22cce64":"Lets fill only missing value in Fare","71ac6878":"**Modeling Part**"}}