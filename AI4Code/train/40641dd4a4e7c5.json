{"cell_type":{"35ba4122":"code","8662993b":"code","b014d93f":"code","9d56fdc5":"code","906567de":"code","5c261a35":"code","f23830fc":"code","66bf4b94":"code","57eadb37":"code","c93a4985":"code","ebe1432c":"code","29faec31":"code","e3cc4416":"code","b2ea766c":"code","43e31466":"code","3a1f3a10":"code","bd606a64":"code","bad2058d":"code","d7459da6":"code","10458e33":"code","744e7177":"code","6fcb310f":"code","c5a3817f":"code","dbdd81ca":"markdown","9d3f7c61":"markdown","0f129a11":"markdown","d7ca97d8":"markdown","2d601653":"markdown"},"source":{"35ba4122":"# Data Analysis\nimport numpy as np \nimport pandas as pd \n\n# Visualization\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport missingno as msno\nfrom matplotlib import ticker\nfrom matplotlib.ticker import PercentFormatter\n\n# Warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input file\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","8662993b":"train_df = pd.read_csv('\/kaggle\/input\/tabular-playground-series-apr-2021\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/tabular-playground-series-apr-2021\/test.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/tabular-playground-series-apr-2021\/sample_submission.csv')","b014d93f":"print('shape of train_df : ', train_df.shape)\nprint('shape of test_df : ', test_df.shape)","9d56fdc5":"train_df.head()","906567de":"train_df.info()","5c261a35":"plt.style.use('fivethirtyeight')\nf, ax = plt.subplots(2, 3, figsize=(18,12))\ncolor_map = ['#FF6347', '#505050']\nsns.set_palette(sns.color_palette(color_map))\n\n# Sex\nsex_train = pd.DataFrame(train_df['Sex'].value_counts()).reset_index(drop=False)\nsex_train['source'] = 'Train'\nsex_test = pd.DataFrame(test_df['Sex'].value_counts()).reset_index(drop=False)\nsex_test['source'] = 'Test'\nsex_combine = pd.concat([sex_train, sex_test])\nsns.barplot(sex_combine['index'], sex_combine['Sex'], hue=sex_combine['source'], ax=ax[0][0])\nax[0][0].set_title('Features Comparison of between train and test', color='black', ha='left', fontsize=30, weight='bold')\nax[0][0].set_ylabel('')\nax[0][0].set_xlabel('Sex')\n\n# Pclass\nclass_train = pd.DataFrame(train_df['Pclass'].value_counts()).reset_index(drop=False)\nclass_train['source'] = 'Train'\nclass_test = pd.DataFrame(test_df['Pclass'].value_counts()).reset_index(drop=False)\nclass_test['source'] = 'Test'\nclass_combine = pd.concat([class_train, class_test])\nsns.barplot(class_combine['index'], class_combine['Pclass'], hue=class_combine['source'], ax=ax[0][1])\nax[0][1].legend().remove()\nax[0][1].set_ylabel('')\nax[0][1].set_xlabel('Pclass')\n\n# Age\nsns.kdeplot(train_df['Age'], color='#FF6347', shade=False, ax=ax[0][2])\nsns.kdeplot(test_df['Age'], color='#505050', shade=False, ax=ax[0][2])\nax[0][2].set_ylabel('')\nax[0][2].set_xlabel('Age')\n\n# Family\ntrain_df['Family'] = train_df['SibSp'] + train_df['Parch'] + 1\ntest_df['Family'] = test_df['SibSp'] + test_df['Parch'] + 1\nfamily_train = pd.DataFrame((train_df['Family']).value_counts()).reset_index(drop=False)\nfamily_train['source'] = 'Train'\nfamily_test = pd.DataFrame((test_df['Family']).value_counts()).reset_index(drop=False)\nfamily_test['source'] = 'Test'\nfamily_combine = pd.concat([family_train, family_test])\nsns.barplot(family_combine['index'], family_combine['Family'], hue=family_combine['source'], ax=ax[1][0])\nax[1][0].legend().remove()\nax[1][0].set_ylabel('')\nax[1][0].set_xlabel('Family')\n\n# Embarked\nem_train = pd.DataFrame(train_df['Embarked'].value_counts()).reset_index(drop=False)\nem_train['source'] = 'Train'\nem_test = pd.DataFrame(test_df['Embarked'].value_counts()).reset_index(drop=False)\nem_test['source'] = 'Test'\nem_combine = pd.concat([em_train, em_test])\nsns.barplot(em_combine['index'], em_combine['Embarked'], hue=em_combine['source'], ax=ax[1][1])\nax[1][1].legend().remove()\nax[1][1].set_ylabel('')\nax[1][1].set_xlabel('Embakred')\n\n# Fare\nsns.kdeplot(train_df['Fare'], color='#FF6347', ax=ax[1][2])\nsns.kdeplot(test_df['Fare'], color='#505050', ax=ax[1][2])\nax[1][2].set_ylabel('')\nax[1][2].set_xlabel('Fare')","f23830fc":"f, ax = plt.subplots(1, 2, figsize=(18,9))\n\nplt.style.use('fivethirtyeight')\ncolormap=['#FF6347','white']\n\nsns.scatterplot(x='Age', y='Fare', data=train_df.loc[train_df['Survived'] == 0, :], ax=ax[0], color='#505050')\nsns.scatterplot(x='Age', y='Fare', data=train_df.loc[train_df['Survived'] == 1, :], ax=ax[1], color='#FF6347')\nax[0].set_title('Correlation between Fare and Age (Dead)', fontsize=20)\nax[1].set_title('Correlation between Fare and Age (Survived)', fontsize=20)\nax[0].set_ylabel('Fare', fontsize=15)\nax[0].set_xlabel('Age', fontsize=15)\nax[1].set_ylabel('Fare', fontsize=15)\nax[1].set_xlabel('Age', fontsize=15)","66bf4b94":"plt.style.use('fivethirtyeight')\nf, ax = plt.subplots(1, 2, figsize=(18, 9))\n\ntrain_df.isnull().sum().plot.barh(color='#505050', fontsize=15, ax=ax[0])\nfor i, v in enumerate(list(train_df.isnull().sum())):\n    ax[0].text(v+500, i, str(v))\nax[0].set_title('Count of NaN values in each columns', fontsize=20)\n\nmsno.matrix(train_df, color=(0.314, 0.314, 0.314), ax=ax[1], fontsize=15)\nax[1].set_title('Frequency of NaN values in each columns', fontsize=20)\nax[1].xaxis.tick_bottom()\nlist_col = list(train_df.columns)\nax[1].set_xticklabels(list_col, rotation=45, ha='right', fontsize=15)","57eadb37":"# Sex & Pclass\nPclass_Sex_train = pd.DataFrame(columns=['Index', 'Survived', 'Dead', 'Survival rate', 'Age', 'Fare'])\ntrain_df['Sex & Pclass'] = 0\ntest_df['Sex & Pclass'] = 0\n\nn = 0\nfor i in list(train_df['Sex'].unique()):\n    for j in range(1, 4):\n        train_mj = train_df.loc[(train_df['Sex'] == i) & (train_df['Pclass'] == j), :]\n        Pclass_Sex_train.loc[n] = ['Sex : {} & Pclass : {}'.format(i, j), \n        train_mj['Survived'].value_counts()[1], train_mj['Survived'].value_counts()[0],\n        round(train_mj['Survived'].value_counts()[1] \/ (train_mj['Survived'].value_counts()[1] + train_mj['Survived'].value_counts()[0]), 2),\n        round(train_mj['Age'].mean(), 0), train_mj['Fare'].mean()]\n\n        train_df.loc[(train_df['Sex'] == i) & (train_df['Pclass'] == j), 'Sex & Pclass'] = n\n        train_df.loc[(train_df['Age'].isnull()) &(train_df['Sex'] == i) & (train_df['Pclass'] == j), 'Age'] = round(train_mj['Age'].mean(), 0)\n        test_df.loc[(test_df['Age'].isnull()) &(test_df['Sex'] == i) & (test_df['Pclass'] == j), 'Age'] = round(train_mj['Age'].mean(), 0)\n        train_df.loc[(train_df['Fare'].isnull()) &(train_df['Sex'] == i) & (train_df['Pclass'] == j), 'Fare'] = round(train_mj['Fare'].mean(), 0)\n        test_df.loc[(test_df['Fare'].isnull()) &(test_df['Sex'] == i) & (test_df['Pclass'] == j), 'Fare'] = round(train_mj['Fare'].mean(), 0)\n        \n        n += 1\n\nPclass_Sex_train","c93a4985":"train_co = train_df.copy()\ntest_co = test_df.copy()\ncombine = [train_co, test_co]\n\ntrain_df['Age_Band'] = pd.cut(train_df['Age'], 4)\ntrain_df[['Survived', 'Age_Band']].groupby(train_df['Age_Band'], as_index=True).mean(). \\\nsort_values(by='Age_Band', ascending=True)","ebe1432c":"for data in combine:\n    # Sex\n    data['Sex'] = data['Sex'].map({'male' : 0, 'female' : 1}).astype(int)\n    \n    # Embarked\n    data['Embarked'] = data['Embarked'].fillna('S')\n    data['Embarked'] = data['Embarked'].map({'C' : 0, 'Q' : 1, 'S' : 2}).astype(int)\n    \n    # Age\n    data.loc[data['Age'] <= 21.81, 'Age'] = 0\n    data.loc[(data['Age'] > 21.81) & (data['Age'] <= 43.54), 'Age'] = 1\n    data.loc[(data['Age'] > 43.54) & (data['Age'] <= 65.27), 'Age'] = 2\n    data.loc[data['Age'] > 65.27, 'Age'] = 3\n    data['Age'] = data['Age'].astype(int)\n\ntrain_co.head()","29faec31":"train_corr = train_co[['Survived', 'Pclass', 'Sex', 'Age', 'Fare', 'Embarked', 'Family', 'Sex & Pclass']]\nfig = plt.figure(figsize=(18,8))\nsns.heatmap(train_corr.corr(), linewidth=1, vmax=1.0, square=True, linecolor='white', annot=True,\n           annot_kws={'size':16}, fmt='.2f', cmap='gray')\nplt.title('Pearson correlation of Feature')","e3cc4416":"from sklearn import metrics\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier","b2ea766c":"X_train = train_co.drop(['Survived', 'PassengerId', 'Name', 'SibSp', 'Parch', 'Ticket', 'Cabin', 'Family', 'Age', 'Fare', 'Sex & Pclass'], axis=1)\nX_target = train_co['Survived']\nX_test = test_co.drop(['PassengerId', 'Name', 'SibSp', 'Parch', 'Ticket', 'Cabin', 'Family', 'Age', 'Fare', 'Sex & Pclass'], axis=1)\nX_tr, X_vid, y_tr, y_vid = train_test_split(X_train, X_target, test_size=0.25, random_state=0)","43e31466":"# RandomForestClassifier\nmodel = RandomForestClassifier()\nmodel.fit(X_tr, y_tr)\nscore_RFC = model.score(X_tr, y_tr)\nprediction_RFC = model.predict(X_vid)\nprint('Train Accuracy Percentage : {:.2f}'.format(100 * score_RFC))\nprint('Test Accuracy Percentage : {:.2f}'.format(100 * metrics.accuracy_score(prediction_RFC, y_vid)))","3a1f3a10":"# LinearSVC\nmodel = LinearSVC()\nmodel.fit(X_tr, y_tr)\nscore_lSVC = model.score(X_tr, y_tr)\nprediction_lSVC = model.predict(X_vid)\nprint('Train Accuracy Percentage : {:.2f}'.format(100 * score_lSVC))\nprint('Test Accuracy Percentage : {:.2f}'.format(100 * metrics.accuracy_score(prediction_lSVC, y_vid)))","bd606a64":"# DecisionTreeClassifier\nmodel = DecisionTreeClassifier()\nmodel.fit(X_tr, y_tr)\nscore_DTC = model.score(X_tr, y_tr)\nprediction_DTC = model.predict(X_vid)\nprint('Train Accuracy Percentage : {:.2f}'.format(100 * score_DTC))\nprint('Test Accuracy Percentage : {:.2f}'.format(100 * metrics.accuracy_score(prediction_DTC, y_vid)))","bad2058d":"# GaussianNB\nmodel = GaussianNB()\nmodel.fit(X_tr, y_tr)\nscore_GNB = model.score(X_tr, y_tr)\nprediction_GNB = model.predict(X_vid)\nprint('Train Accuracy Percentage : {:.2f}'.format(100 * score_GNB))\nprint('Test Accuracy Percentage : {:.2f}'.format(100 * metrics.accuracy_score(prediction_GNB, y_vid)))","d7459da6":"# Perceptron\nmodel = Perceptron()\nmodel.fit(X_tr, y_tr)\nscore_PT = model.score(X_tr, y_tr)\nprediction_PT = model.predict(X_vid)\nprint('Train Accuracy Percentage : {:.2f}'.format(100 * score_PT))\nprint('Test Accuracy Percentage : {:.2f}'.format(100 * metrics.accuracy_score(prediction_PT, y_vid)))","10458e33":"# SGDClassifier\nmodel = SGDClassifier()\nmodel.fit(X_tr, y_tr)\nscore_SGD = model.score(X_tr, y_tr)\nprediction_SGD = model.predict(X_vid)\nprint('Train Accuracy Percentage : {:.2f}'.format(100 * score_SGD))\nprint('Test Accuracy Percentage : {:.2f}'.format(100 * metrics.accuracy_score(prediction_SGD, y_vid)))","744e7177":"# LogisticRegression\nmodel = LogisticRegression()\nmodel.fit(X_tr, y_tr)\nscore_LR = model.score(X_tr, y_tr)\nprediction_LR = model.predict(X_vid)\nprint('Train Accuracy Percentage : {:.2f}'.format(100 * score_LR))\nprint('Test Accuracy Percentage : {:.2f}'.format(100 * metrics.accuracy_score(prediction_LR, y_vid)))","6fcb310f":"# KNeighborsClassifier\nmodel = KNeighborsClassifier()\nmodel.fit(X_tr, y_tr)\nscore_KNC = model.score(X_tr, y_tr)\nprediction_KNC = model.predict(X_vid)\nprint('Train Accuracy Percentage : {:.2f}'.format(100 * score_KNC))\nprint('Test Accuracy Percentage : {:.2f}'.format(100 * metrics.accuracy_score(prediction_KNC, y_vid)))","c5a3817f":"model = DecisionTreeClassifier()\nmodel.fit(X_tr, y_tr)\nprediction = model.predict(X_test)\nsubmission['Survived'] = prediction\nsubmission.to_csv('TPS Apr 2021_MJJO_version5', index=False)","dbdd81ca":"## Data Analysis ##","9d3f7c61":"## Import Libraries ##","0f129a11":"## Load Data ##","d7ca97d8":"## Checking and Filling NaN Values ##","2d601653":"## Machine Learning ##"}}