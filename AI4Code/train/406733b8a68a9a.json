{"cell_type":{"ea884249":"code","b5af2f0d":"code","83b659e4":"code","e568c6b0":"code","a1a02ff8":"code","30aa1eb5":"code","17e6bbf3":"code","987c2fc5":"code","3b62c3c1":"code","27ef4e00":"code","3042e88b":"code","17982837":"code","fd035c1f":"code","05e055de":"code","3593891b":"code","6b5b98a3":"code","bfbaa155":"code","edcc44ef":"code","c764382c":"code","8105bc7b":"code","5160d526":"code","4d09f7f5":"code","ae92dc2b":"code","d9270a8b":"code","aefb43d9":"code","9277a035":"code","b7617adf":"code","4775cbdb":"code","f306b5b9":"code","a1f0a54c":"code","dfcbc6a6":"code","a4956713":"code","0f56c87f":"code","6e9783d9":"code","8febd0e4":"code","54ce574f":"code","bece3744":"code","33c78cbb":"code","af40e825":"code","b9740f0b":"code","0e795660":"code","c9c77a29":"code","13831e3f":"code","eb6c0c6a":"code","efea1f1c":"code","963a816f":"code","dc5b4fcd":"code","38a2a61e":"code","8ad8c02a":"code","1081b512":"code","93180134":"code","f8048444":"code","503af6e9":"code","af5cc267":"code","d4214d0b":"code","63706f41":"code","d0ed7fa6":"code","f8fff35a":"code","735a7728":"code","bb8827e7":"code","b271cea4":"code","448aa8e4":"code","ad619a04":"code","5ff25713":"code","cbd41ebf":"code","236f4a69":"code","7ef8c92a":"markdown","244930a5":"markdown","0b076238":"markdown","15448770":"markdown","bae2b92e":"markdown","f842e516":"markdown","14928fb3":"markdown","3b7d5190":"markdown","eaeaa6a0":"markdown","d029904b":"markdown","2938adb3":"markdown","44269493":"markdown","e47e228b":"markdown","7fc50220":"markdown","8c1c797d":"markdown","baa084d1":"markdown","a73c9ef1":"markdown","159f43f3":"markdown","4f5ec1c1":"markdown","6ebfd943":"markdown","08d26b5b":"markdown","23d1d276":"markdown","7edbfc96":"markdown","133668d4":"markdown","45fb9590":"markdown","0f277e16":"markdown","b2e6e8ad":"markdown"},"source":{"ea884249":"## importing basic modules\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n#try:\n#    !pip install tensorflow-gpu\n#except:\n#!pip install tensorflow\nimport tensorflow as tf\n\nimport matplotlib.pyplot as plt\nplt.rcParams[\"figure.figsize\"] = (20,20)\n","b5af2f0d":"\ndataset = pd.read_csv('..\/input\/Temp_and_rain.csv')","83b659e4":"dataset.head()","e568c6b0":"dataset.isnull().sum()","a1a02ff8":"dataset[['rain']].plot()","30aa1eb5":"dataset.rain.hist()","17e6bbf3":"dataset.tem.hist()","987c2fc5":"plt.bar(dataset['Year'],dataset['rain'])\nplt.xlabel(\"Year\")\nplt.ylabel(\"Rain\")\nplt.legend()","3b62c3c1":"plt.bar(dataset['tem'],dataset['rain'])\nplt.xlabel(\"TEMP\")\nplt.ylabel(\"Rain\")\nplt.legend()","27ef4e00":"import seaborn as sns","3042e88b":"correlation = dataset.corr()","17982837":"correlation","fd035c1f":"sns.heatmap(correlation,cmap='coolwarm',annot=True)","05e055de":"## setting the style first\nsns.set(style=\"whitegrid\",color_codes=True) ## change style","3593891b":"sns.distplot(dataset['rain'], kde=False, bins=100);","6b5b98a3":"sns.distplot(dataset['tem'],kde=False, bins=100);\n","bfbaa155":"sns.relplot(x=\"Year\", y=\"rain\", data=dataset);","edcc44ef":"sns.relplot(x=\"Year\", y=\"tem\", data=dataset);","c764382c":"sns.relplot(x=\"Year\", y=\"tem\", hue=\"rain\", data=dataset);","8105bc7b":"sns.boxplot(data=dataset,orient='h')","5160d526":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler","4d09f7f5":"dataset.head()\nX = dataset.drop('rain',axis=1)\nX = X.drop('tem',axis=1)\ny = dataset[['rain','tem']]","ae92dc2b":"X.head()","d9270a8b":"y.head()","aefb43d9":"x_train,x_test,y_train,y_test = train_test_split(X,y,test_size=.2)\n","9277a035":"from keras import Sequential\nfrom keras.layers import Dense,Dropout,LSTM,Flatten","b7617adf":"print (x_train.shape)\nprint (x_test.shape)","4775cbdb":"x_train = np.array(x_train)\nx_test = np.array(x_test)\n\n","f306b5b9":"x_train","a1f0a54c":"print (x_train.shape)\nprint (x_test.shape)\nprint (y_train.shape)\nprint (y_test.shape)","dfcbc6a6":"n_col = x_train.shape[1]","a4956713":"from keras.utils import plot_model\nfrom keras.models import Model\nfrom keras.layers import Input\nfrom keras.layers import Dense\nvisible = Input(shape=(n_col,))\nhidden1 = Dense(100, activation='relu')(visible)\nhidden2 = Dense(200, activation='relu')(hidden1)\nhidden3 = Dense(100, activation='relu')(hidden2)\nhidden4 = Dense(100, activation='relu')(hidden3)\nhidden5 = Dense(100, activation='relu')(hidden4)\nhidden6 = Dense(100, activation='relu')(hidden5)\nhidden7 = Dense(100, activation='relu')(hidden6)\noutput = Dense(2)(hidden7)\nmodel = Model(inputs=visible, outputs=output)\nmodel.compile(optimizer='adam',loss='mean_absolute_error')","0f56c87f":"model.fit(x_train,y_train,epochs = 100)","6e9783d9":"y_pred = model.predict(x_test)","8febd0e4":"y_pred","54ce574f":"model.evaluate(x_test,y_test)","bece3744":"dataset = pd.read_csv('..\/input\/Temp_and_rain.csv')\nX = dataset.drop('rain',axis=1)\nX = X.drop('tem',axis=1)\ny = dataset[['rain','tem']]\nx_train,x_test,y_train,y_test = train_test_split(X,y,test_size=.2)","33c78cbb":"from sklearn.neighbors import KNeighborsRegressor","af40e825":"knn = KNeighborsRegressor(n_neighbors=5)","b9740f0b":"knn.fit(x_train,y_train)\npredicted=knn.predict(x_test)","0e795660":"predicted","c9c77a29":"model.evaluate(x_test,y_test)","13831e3f":"accuracy=[]\nfor k in range(1,50):\n    knn = KNeighborsRegressor(n_neighbors=k)\n    knn.fit(x_train,y_train)\n    accuracy.append(knn.score(x_test,y_test))\n\n\n    ","eb6c0c6a":"plt.plot(range(1,50),accuracy)","efea1f1c":"training_accuracy=[]\ntesting_accuracy=[]\n\nneighbors = list(range(1,50))\n\n\nfor k in neighbors:\n    knn = KNeighborsRegressor(n_neighbors=k)\n    knn.fit(x_train,y_train)\n    training_accuracy.append(knn.score(x_train,y_train))\n    testing_accuracy.append(knn.score(x_test,y_test))    \n\nplt.plot(neighbors,training_accuracy,label='training accuracy')\nplt.plot(neighbors,testing_accuracy,label='testing accuracy')\nplt.ylabel(\"Accuracy\")\nplt.xlabel(\"K value\")\nplt.legend()\n\n","963a816f":"from sklearn.model_selection import cross_val_score\n\nknn = KNeighborsRegressor(n_neighbors=5)\n\nscores = cross_val_score(knn,X,y,cv=10)\n\nprint (scores)\nprint (scores.mean())\n\nprint (\"Mean Accuracy \"+str(scores.mean()))\n\n\n","dc5b4fcd":"\n\n\nk_range = range(1,50)\nk_scores = []\n\nfor k in k_range:\n    knn = KNeighborsRegressor(n_neighbors=k)\n    scores = cross_val_score(knn,X,y,cv=10)\n    k_scores.append(scores.mean())\n    \nprint (k_scores)\n\n\nplt.plot(k_range,k_scores)\nplt.xlabel(\"k range\")\nplt.ylabel(\"scores\")","38a2a61e":"from sklearn.tree import DecisionTreeRegressor","8ad8c02a":"tree_clf = DecisionTreeRegressor(max_depth=2,random_state=42)","1081b512":"tree_clf.fit(X,y)","93180134":"tree_clf.score(X,y)","f8048444":"accuracy=[]\nfor depth in range(1,50):\n    dt = DecisionTreeRegressor(max_depth=depth,random_state=42)\n    dt.fit(x_train,y_train)\n    accuracy.append(dt.score(x_test,y_test))","503af6e9":"plt.plot(range(1,50),accuracy)","af5cc267":"from sklearn.ensemble import RandomForestRegressor","d4214d0b":"rnd = RandomForestRegressor(max_depth=10)","63706f41":"rnd.fit(x_train,y_train)","d0ed7fa6":"rnd.score(x_test,y_test)","f8fff35a":"accuracy=[]\nfor depth in range(1,50):\n    dt = RandomForestRegressor(max_depth=depth,random_state=42)\n    dt.fit(x_train,y_train)\n    accuracy.append(dt.score(x_test,y_test))","735a7728":"plt.plot(range(1,50),accuracy)","bb8827e7":"from sklearn.tree import DecisionTreeRegressor\nfrom sklearn.svm import SVR,LinearSVR\nfrom sklearn.ensemble import RandomForestRegressor,GradientBoostingRegressor\nfrom sklearn.ensemble import BaggingRegressor\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.neighbors import KNeighborsRegressor\n\nfrom mlxtend.regressor import StackingRegressor\ndtc=DecisionTreeRegressor()\nknnc=KNeighborsRegressor()\ngbc=GradientBoostingRegressor()\nrfc=RandomForestRegressor()\n\n","b271cea4":"stregr = StackingRegressor(regressors=[dtc,knnc,gbc,rfc], \n                           meta_regressor=knnc)","448aa8e4":"y_train","ad619a04":"stregr.fit(x_train, y_train['tem'])","5ff25713":"prediction = stregr.predict(x_test)","cbd41ebf":"stregr.score(x_test,y_test['tem'])","236f4a69":"stregr.fit(x_train, y_train['rain'])\nprediction = stregr.predict(x_test)\nstregr.score(x_test,y_test['rain'])","7ef8c92a":"## splitting the feature matrix and target","244930a5":"## Combining all the algorithm","0b076238":"## relation betwen temp and rain in different year","15448770":"## importing RNN module","bae2b92e":"## relational scatter plot of differnt rain quantity in different Year","f842e516":"# importing dataset","14928fb3":"## For different Depth","3b7d5190":"## Decision Tree Regresson","eaeaa6a0":"## checking missing data","d029904b":"## histogram of the temp","2938adb3":"## Temp to Rain plot","44269493":"## No missing value","e47e228b":"## RANDOM FOREST","7fc50220":"![](http:\/\/rasbt.github.io\/mlxtend\/user_guide\/regressor\/StackingRegressor_files\/stackingregression_overview.png)","8c1c797d":"# now we find cross val score for different K value","baa084d1":"## Rain in different year","a73c9ef1":"## KNN APPROACH","159f43f3":"## Recurrent Nural Net Approach","4f5ec1c1":"###  to use RNN you have to maintain the value between a limit hence transforming it\n\n# we transform the y so after predict we have to inverse transeform it","6ebfd943":"## this reshaping is very important before feeding to RNN","08d26b5b":"## histogram of the rain ","23d1d276":"## CROSS VAL SCORE","7edbfc96":"# <center> Rain prediction <\/center>","133668d4":"## CREATE A BASIC RNN MODEL","45fb9590":"## box plot","0f277e16":"# model selection with preprocessing","b2e6e8ad":"## Correlation matrix"}}