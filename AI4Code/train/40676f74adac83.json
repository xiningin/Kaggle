{"cell_type":{"fc23c438":"code","1db4744c":"code","44d163d3":"code","4e2d9059":"code","807ae8c4":"code","56f6f6c0":"code","be6d575b":"code","cc1d0d41":"code","f24c3e06":"code","46e0aa04":"code","6fd0c23a":"code","c2b469e0":"code","ca6c2499":"code","95b41683":"code","84d8ef04":"markdown","8a2a20a0":"markdown","fc0789de":"markdown","e4d923be":"markdown","2b2a9a97":"markdown","bd32c90f":"markdown","8c3bb92d":"markdown","711a54c1":"markdown","c3f95d48":"markdown","29becf8d":"markdown","ca2c2936":"markdown","daadebe8":"markdown"},"source":{"fc23c438":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1db4744c":"!pip install keras","44d163d3":"# Import libraries\nimport matplotlib.pyplot as plt\nimport matplotlib as  pylab\n\n\nfrom keras.models import Sequential\nfrom keras.layers import  Dense\nfrom keras.layers import  LSTM\nfrom keras.preprocessing.sequence import TimeseriesGenerator\nfrom statsmodels.tools.eval_measures import rmse","4e2d9059":"df_defects = pd.read_csv(\"..\/input\/monthly-defect-data-simulated\/software_defects_simulated.csv\")\ndf_defects['created_date'] = pd.to_datetime(df_defects['created_date'], format=\"%Y-%m-%d\")\ndf_defects.set_index('created_date', inplace=True)\ndf_defects = df_defects.groupby(pd.Grouper(freq='M')).sum()\n","807ae8c4":"#split the dataset in train and test\ntrain = df_defects.iloc[:40]\ntest = df_defects.iloc[40:]\nstart = len(train)\nend = len(train) + len(test)-1","56f6f6c0":"n_input = 2\nn_features =1\n\n# The LSTM expects data input to have the shape [samples, timesteps, features],\n# whereas the generator described so far is providing lag observations as features or the shape [samples, features].\nx_train = train['count'].values.reshape((len(train['count']),n_features))\ntrain_generator = TimeseriesGenerator(x_train,x_train,length=n_input,batch_size=1)\n","be6d575b":"for i in range(len(train_generator)):\n    x, y = train_generator[i]\n    print('%s => %s' % (x, y))","cc1d0d41":"model = Sequential()\nmodel.add(LSTM(150,activation='relu',input_shape=(n_input,n_features)))\nmodel.add(Dense(1))\nmodel.compile(loss='mse',optimizer='adam')\nmodel.summary()\n","f24c3e06":"model.fit(train_generator,epochs=200)","46e0aa04":"model_loss = model.history.history['loss']\nplt.plot(range(len(model_loss)),model_loss)","6fd0c23a":"# Forecast single predictions\nfirst_eval_batch = x_train[-n_input:]\nfirst_eval_batch = first_eval_batch.reshape(1,n_input,n_features)\ntest_predictions_first_eval_batch = model.predict(first_eval_batch)\ntest_predictions_first_eval_batch[0][0]","c2b469e0":"test_predictions = []\ncurrent_batch = first_eval_batch.reshape(1,n_input,n_features)\n\nfor i in range(len(test)):\n    current_pred = model.predict(current_batch)[0]\n    print(current_pred)\n    test_predictions.append(current_pred)\n    current_batch = np.append(current_batch[:,1:,:],[[current_pred]],axis=1)\n\ndf_pred = pd.DataFrame(test_predictions)","ca6c2499":"df_pred.rename( columns={0:'count'}, inplace=True )","95b41683":"rmse(test['count'],df_pred['count'])\nerror = rmse(test['count'],df_pred['count'])\nprint(\"Test Mean\",test.mean())\nprint(\"Predictions Mean\",df_pred['count'].mean())\nprint(\"Predictions Error\",error)\n\ntest['count'].plot(figsize=(12,8),legend=True,title=\"Actual Test Data Plot\")\ndf_pred.plot(legend=True ,title=\"Prediction Data Plot\")\n","84d8ef04":"# Predict future values- Forecast","8a2a20a0":"# Model Results","fc0789de":"# Deep Learning Model - LSTM ","e4d923be":"Rename the column to something meaningful","2b2a9a97":"# Fit the model","bd32c90f":"# Predict Future Deficts using Deep Learning - LSTM \n\nBefore you go ahead with this tutorial , I highly recommend to go through my another tutorail which also explains the exploratory \ndata analysis which will prepare you for any Time Series Analysis \n\n### Predict future defects using SARIMAX : https:\/\/www.kaggle.com\/pulkit21aug\/predict-future-defects-using-time-series-sarima","8c3bb92d":"# Train - Test Split","711a54c1":"Explore Time series generator object","c3f95d48":"# Load Dataset","29becf8d":"# Create the model","ca2c2936":"# Visualise Loss","daadebe8":"Above is for a single prediction . We can use the same logic to predict future forecasts for longer periods"}}