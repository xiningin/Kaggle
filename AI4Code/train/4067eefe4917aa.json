{"cell_type":{"7519574a":"code","c5219b50":"code","c303bbc3":"code","8e20424a":"code","2f64352c":"code","c2647e67":"code","80cdc158":"code","5ef076c0":"code","41c5466e":"code","90937858":"code","06fc4cd6":"code","02873370":"code","845e411e":"code","6256c06e":"code","27a2512d":"code","173e930e":"code","8f0fc9ea":"code","6848bc4c":"code","60ca47f4":"code","064153d8":"code","35b107fa":"code","e52b972f":"code","7c55d295":"code","d1c3d1a2":"code","39daf1d4":"code","f428b4e7":"code","41f50246":"code","4de857b4":"code","a4d4d5dc":"code","624c22ae":"code","c39cdcc9":"code","bff7a984":"code","dfd9355f":"code","152fb501":"code","414a58db":"code","ce7b445b":"code","d1beb7c2":"code","bb9cddd3":"code","bee66824":"code","0112092a":"code","6a08f439":"code","10201429":"code","fce83a8d":"markdown","54a63bc4":"markdown","2ec4fb46":"markdown","8a05d974":"markdown","2e0d9990":"markdown","ecf1612d":"markdown","047747e1":"markdown","659b1965":"markdown","881ef73f":"markdown"},"source":{"7519574a":"import pandas as pd  \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","c5219b50":"data = pd.read_csv(\"..\/input\/car-price-prediction\/CarPrice_Assignment.csv\")","c303bbc3":"data.head()","8e20424a":"data.shape","2f64352c":"data.size","c2647e67":"data.dtypes","80cdc158":"data.info()","5ef076c0":"data.isnull().sum()","41c5466e":"ax = plt.subplots(figsize=(20,10))\nax = sns.heatmap(data.corr() , annot = True , cbar = True)","90937858":"data.columns","06fc4cd6":"df = data.drop([\"car_ID\",\"CarName\"], axis=1)","02873370":"df.head()","845e411e":"df.shape","6256c06e":"def corrMat(df,id=False):\n    \n    corr_mat = df.corr().round(2)\n    f, ax = plt.subplots(figsize=(12,7))\n    mask = np.triu(np.ones_like(corr_mat, dtype=bool))\n    mask = mask[1:,:-1]\n    corr = corr_mat.iloc[1:,:-1].copy()\n    sns.heatmap(corr,mask=mask,vmin=-0.3,vmax=0.3,center=0, \n                cmap='RdPu_r',square=False,lw=2,annot=True,cbar=False)\n#     bottom, top = ax.get_ylim() \n#     ax.set_ylim(bottom + 0.5, top - 0.5) \n    ax.set_title('Shifted Linear Correlation Matrix')\n    \ncorrMat(df)","27a2512d":"def LABEL_ENCODING(x):\n    from sklearn import preprocessing\n    label_encoder = preprocessing.LabelEncoder()\n    df[x]= label_encoder.fit_transform(df[x])\n    df[x].unique()","173e930e":"df.columns","8f0fc9ea":"LABEL_ENCODING(\"fueltype\")\nLABEL_ENCODING(\"aspiration\")\nLABEL_ENCODING(\"doornumber\")\nLABEL_ENCODING(\"carbody\")\nLABEL_ENCODING(\"drivewheel\")\nLABEL_ENCODING(\"enginelocation\")\nLABEL_ENCODING(\"enginetype\")\nLABEL_ENCODING(\"cylindernumber\")\nLABEL_ENCODING(\"fuelsystem\")\ndf.head()","6848bc4c":"df.info()","60ca47f4":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nx_scaled = scaler.fit_transform((df.drop('price',axis = 1)))","064153d8":"X = x_scaled\nY = df[\"price\"]\nX= pd.DataFrame(data=X,columns = df.drop(columns=['price']).columns)","35b107fa":"X.corr()","e52b972f":"#importing varience inflation factor from the stats model\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nvif_data=X\n## calculating VIF for every column\nVIF=pd.Series([variance_inflation_factor(vif_data.values,i) for i in range(vif_data.shape[1])],index=vif_data.columns)\nVIF","7c55d295":"def MC_remover(data):\n    vif=pd.Series([variance_inflation_factor(data.values,i)for i in range(data.shape[1])],index=data.columns)\n    if vif.max()>5:\n        print(vif[vif == vif.max()].index[0],'has been removed')\n        data = data.drop(columns=[vif[vif==vif.max()].index[0]])\n        return data\n    else:\n        print(\"No multicollinearity present anymore\")\n        return data","d1c3d1a2":"for i in range(10):\n    vif_data=MC_remover(vif_data)\nvif_data.head()","39daf1d4":"VIF=pd.Series([variance_inflation_factor(vif_data.values,i) for i in range(vif_data.shape[1])],index=vif_data.columns)\nVIF,len(vif_data.columns)","f428b4e7":"from sklearn.model_selection import train_test_split\nX = vif_data\nY = df['price']\nX_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size = 0.3,random_state=44)","41f50246":"from sklearn.linear_model import LinearRegression\nreg=LinearRegression(normalize =True)\nreg.fit(X_train,Y_train)","4de857b4":"reg.score(X_train,Y_train)","a4d4d5dc":"reg.score(X_test , Y_test)","624c22ae":"pred = reg.predict(X_test)\n","c39cdcc9":"pred","bff7a984":"reg.intercept_","dfd9355f":"reg.coef_","152fb501":"from sklearn.metrics import r2_score\nr2 = r2_score(Y_test , pred)\nr2","414a58db":"from sklearn import linear_model\nmodel = linear_model.Lasso(alpha=0.1)\nmodel.fit(X_train , Y_train)","ce7b445b":"model.score(X_train,Y_train)","d1beb7c2":"model.score(X_test,Y_test)","bb9cddd3":"model.coef_","bee66824":"model.intercept_","0112092a":"lpred = model.predict(X_test)","6a08f439":"lpred","10201429":"r = r2_score(Y_test , lpred)\nr","fce83a8d":"**So with using lasso model we have same results as multiple linear regression model**","54a63bc4":"**So multiple linear regression model got accuracy = 86% in learning phase and 85% in testing phase and error ratio = 17% **","2ec4fb46":"**Now i will encoding all categorical data**","8a05d974":"**Feature Selection :**","2e0d9990":"**We have no null in this data**\n","ecf1612d":"**I will drop car ID and car name columns because they are not important**","047747e1":"**Feature Scaling :**","659b1965":"**Treating Multicollinearity**","881ef73f":"**Calculating variance**"}}