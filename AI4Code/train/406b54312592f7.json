{"cell_type":{"2713f066":"code","91da001d":"code","cb28a66f":"code","08285eac":"code","a4b2892a":"code","a1ffac5e":"code","13a0b230":"code","69e60d79":"code","80aecfa7":"code","043b7699":"code","8aad4241":"code","3d493ffe":"code","0ef40053":"code","31ca1797":"code","7563533b":"code","760d3a80":"code","070e8e89":"code","ee0597ed":"code","0b82a467":"code","130e006e":"code","879b0196":"code","9df34de5":"code","2ec67523":"code","ca20baab":"code","81e12e43":"code","1c6908bd":"code","3ea651d9":"code","8a4ed82b":"code","9b9c2b83":"code","a1292728":"code","0e1558fb":"code","fb7c960e":"code","c08afdd0":"markdown","042d7b83":"markdown","411f9c1c":"markdown","43ca6b76":"markdown","17eb3196":"markdown","f2230c41":"markdown","65186dcd":"markdown","ea3e6412":"markdown","6ba07cbf":"markdown","b23b88c6":"markdown","419744ee":"markdown","69a79709":"markdown","3af673f2":"markdown"},"source":{"2713f066":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","91da001d":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 1000)\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nimport sklearn\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom sklearn.model_selection import StratifiedKFold,train_test_split,KFold\nimport re\nfrom catboost import CatBoostClassifier\nfrom sklearn.metrics import accuracy_score,f1_score","cb28a66f":"url='\/kaggle\/input\/janatahack-machine-learning-for-banking\/'\ntrain_df = pd.read_csv(url+'train_fNxu4vz.csv')\ntest_df = pd.read_csv(url+'test_fjtUOL8.csv')\nsubmission = pd.read_csv(url+'sample_submission_HSqiq1Q.csv')","08285eac":"train_df.head(3)","a4b2892a":"test_df.head(3)","a1ffac5e":"d1=train_df.isnull().sum().to_frame().rename(columns={0: \"Train_Null_Values\"})\nd2=test_df.isnull().sum().to_frame().rename(columns={0: \"Test_Null_Values\"})\nd3=train_df.dtypes.to_frame().rename(columns={0: \"Data_Type\"})\npd.concat([d1, d2,d3], axis=1)","13a0b230":"train_df['Interest_Rate'].value_counts(normalize=True)","69e60d79":"sns.countplot(train_df[\"Interest_Rate\"])","80aecfa7":"train=train_df.append(test_df,sort=False)","043b7699":"train.columns","8aad4241":"plt.figure(figsize=(24, 6))\nplt.subplot(131)\nsns.countplot(train['Home_Owner'],order = train['Home_Owner'].value_counts(dropna=False).index)\nplt.subplot(132)\nsns.countplot(train['Income_Verified'],order = train['Income_Verified'].value_counts(dropna=False).index)\nplt.subplot(133)\nsns.countplot(train['Gender'],order = train['Gender'].value_counts(dropna=False).index)","3d493ffe":"train['Home_Owner'].value_counts(dropna=False,normalize=True)","0ef40053":"train.Home_Owner.fillna('Unknown',inplace=True)","31ca1797":"plt.figure(figsize=(24, 6))\nsns.countplot(train['Purpose_Of_Loan'],order = train['Purpose_Of_Loan'].value_counts(dropna=False).index)","7563533b":"train['Months_Since_Deliquency'].value_counts(dropna=False,normalize=True)","760d3a80":"train.Months_Since_Deliquency.fillna(9999,inplace=True)","070e8e89":"plt.figure(figsize=(24, 6))\nplt.subplot(121)\nsns.distplot(train[\"Annual_Income\"])\nplt.subplot(122)\nsns.distplot(np.log1p(train[\"Annual_Income\"]))\nplt.show()","ee0597ed":"train['Annual_Income']=np.log1p(train[\"Annual_Income\"])\ntrain.Annual_Income.fillna(train.Annual_Income.median(),inplace=True)","0b82a467":"plt.figure(figsize=(24, 6))\nplt.subplot(121)\nsns.distplot(train[\"Total_Accounts\"])\nplt.subplot(122)\nsns.distplot(np.log1p(train[\"Total_Accounts\"]))\nplt.show()","130e006e":"train['Total_Accounts']=np.log1p(train[\"Total_Accounts\"])","879b0196":"train.Length_Employed.value_counts(dropna=False,normalize=True)","9df34de5":"train.Length_Employed.fillna(99,inplace=True)\ntrain.Length_Employed.replace({'10+ years':'10 years','< 1 year': '0 year'},inplace= True)\ntrain.Length_Employed=train.Length_Employed.apply(lambda x: ''.join(re.findall('\\d+',str(x))))\ntrain.Length_Employed=train.Length_Employed.astype(int)","2ec67523":"train.Loan_Amount_Requested=train.Loan_Amount_Requested.apply(lambda x: x.replace(',',''))\ntrain.Loan_Amount_Requested=train.Loan_Amount_Requested.astype(int)","ca20baab":"plt.figure(figsize=(24, 6))\nplt.subplot(121)\nsns.distplot(train[\"Loan_Amount_Requested\"])\nplt.subplot(122)\nsns.distplot(np.log1p(train[\"Loan_Amount_Requested\"]))\nplt.show()","81e12e43":"train['Loan_Amount_Requested']=np.log1p(train[\"Loan_Amount_Requested\"]) #Normalizing not making much difference","1c6908bd":"train_df.shape,test_df.shape","3ea651d9":"train_df=train[:164309]\ntest_df=train[164309:]","8a4ed82b":"# Set up folds\nK = 5\nskf = StratifiedKFold(n_splits = K, random_state = 7, shuffle = True)","9b9c2b83":"cat_columns=train_df.select_dtypes(include='object').columns.tolist()\ncat_columns.extend(['Length_Employed']) #Considering the Length_Employed as Category increased the Accuracy\n# To specify categorical variables indexes\ncat_columns","a1292728":"X = train_df.drop(columns=['Loan_ID','Interest_Rate'],axis=1)\ny = train_df['Interest_Rate']\nX_test = test_df.drop(columns=['Loan_ID'],axis=1)\ny_valid_pred = 0*y\ny_test_pred = 0\naccuracy = 0\nresult={}\n#fitting catboost classifier model\nj=1\nmodel = CatBoostClassifier(n_estimators=1000,verbose=False,learning_rate=0.1)\nfor train_index, test_index in skf.split(X, y):  \n    # Create data for this fold\n    y_train, y_valid = y.iloc[train_index], y.iloc[test_index]\n    X_train, X_valid = X.iloc[train_index,:], X.iloc[test_index,:]\n    print( \"\\nFold \", j)\n    \n    # Run model for this fold\n    fit_model = model.fit( X_train, y_train, eval_set=(X_valid, y_valid),cat_features=cat_columns, use_best_model=True)\n    print( \"  N trees = \", model.tree_count_ )\n        \n    # Generate validation predictions for this fold\n    pred = fit_model.predict(X_valid)\n    y_valid_pred.iloc[test_index] = pred.reshape(-1)\n    print(accuracy_score(y_valid,pred))\n    accuracy+=accuracy_score(y_valid,pred)\n    # Accumulate test set predictions\n    y_test_pred += fit_model.predict(X_test)\n    result[j]=fit_model.predict(X_test)\n    j+=1\nresults = y_test_pred \/ K  # Average test set predictions\nprint(accuracy\/5)","0e1558fb":"prediction = pd.DataFrame()\nfor i in range(1, 6):\n    prediction = pd.concat([prediction,pd.DataFrame(result[i])],axis=1)\nprediction.columns=['Split1','Split2','Split3','Split4','Split5']","fb7c960e":"submission.Interest_Rate=prediction.mode(axis=1)[0]\nsubmission.to_csv('CatBoost.csv',index = False)","c08afdd0":"*Learned from AV Hackathon Janatahack Solution*","042d7b83":"Home Owner Variable contains 15% of data,Which more than other category, so it is handles as seperate Variable","411f9c1c":"### Target Exploration","43ca6b76":"### Solution","17eb3196":"### Knowing about Data","f2230c41":"### Importing Dataset and Libraries","65186dcd":"### Univariate Analysis & Missing Value_Treatment","ea3e6412":"Loan Amount Request contain ',', so it becames object type data, So it has to converted as Numerical Data","6ba07cbf":"# Model Building","b23b88c6":"Length_Employed is equally Distributed Among, Working years, So I have added as Seperate Variable, I Didn't tried using Mode because it cotributes only 30%","419744ee":"#### Missing Values and Data types","69a79709":"## EDA","3af673f2":"50% Data, is Missing in *Months_Since_Deliquency* Variable, ***Model Built with avoiding this variable gave poor accuracy than***, Substuting the variable with dummy number."}}