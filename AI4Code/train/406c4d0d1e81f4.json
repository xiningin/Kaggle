{"cell_type":{"3bfa5e02":"code","bd22c942":"code","4fe33cbe":"code","4f93ebee":"code","df5dbf41":"code","28da8ff8":"code","49c2567a":"code","2092bf83":"code","731d6982":"code","f02cd3b1":"code","2aa30678":"code","d5dc183e":"code","b2a56f90":"code","195aa8bd":"code","5d45fd4f":"code","cd9ccd71":"code","468d7a37":"code","c03c1c3b":"markdown","15746b3a":"markdown","75d5b6ec":"markdown","4ffcab32":"markdown","c80df801":"markdown","171937c9":"markdown","011d3347":"markdown","d4838648":"markdown","0ddaa851":"markdown","5f765152":"markdown","2baa53b7":"markdown"},"source":{"3bfa5e02":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bd22c942":"# Libraries for data analysis\nimport numpy as np\nimport pandas as pd\n# Libraries for Visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nsns.set_style('whitegrid')\n# For ignoring warnings\nimport warnings\nwarnings.filterwarnings('ignore')","4fe33cbe":"data = pd.read_csv('\/kaggle\/input\/ecommerce-customers\/Ecommerce Customers.csv')\ndata.head()","4f93ebee":"data.info()","df5dbf41":"data.describe()","28da8ff8":"df = data.copy()  # Making the copy of the dataset\n\n# Extracting the postal  code from the 'Address' feature\npostal_code = []\nfor i in range(0, len(df.Address)):\n    try:\n        post = df.Address[i].split(', ')[1]\n    except:\n        post = 'None'\n    postal_code.append(post.split(' ')[0])\n\ndf['Postal Code'] = pd.Series(postal_code)\n\n# Extracting the email site from the 'Email' feture\ndf['Email Site'] = df.Email.apply(lambda x: x.split('@')[1].split('.')[0])\ndf['Email Site'] = df['Email Site'].apply(lambda x: 'others' if x not in ['gmail', 'hotmail', 'yahoo'] else x)\ndf.drop(['Email', 'Address'], axis=1, inplace=True)\n\ndf.head()","49c2567a":"df.hist(bins=30, edgecolor='black', figsize=(10,8))\nplt.show()","2092bf83":"sns.pairplot(df)\nplt.show()","731d6982":"matrix = np.triu(df.corr())\nsns.heatmap(df.corr(), annot=True, mask=matrix)\nplt.show()","f02cd3b1":"# Cheking the correlation of the 'Email Site' feature with the 'Yearly Amount Spent'\nfig, axs = plt.subplots(ncols=3,figsize=(20,8))\nsns.barplot(x='Email Site', y='Yearly Amount Spent', data=df, ax=axs[0])\nsns.boxplot(x='Email Site', y='Yearly Amount Spent', data=df, ax=axs[1])\nsns.violinplot(x='Email Site', y='Yearly Amount Spent', data=df, ax=axs[2])\nplt.show()","2aa30678":"# Cheking the correlation between 'Postal Code' and 'Yearly Amount Spent'\nplt.figure(figsize=(25,8))\nsns.barplot(x='Postal Code', y='Yearly Amount Spent', data=df)\nplt.show()","d5dc183e":"# Cheking the correlation between 'Postal Code' and 'Yearly Amount Spent' in the form of boxplot\nplt.figure(figsize=(25,8))\nsns.boxplot(x='Postal Code', y='Yearly Amount Spent', data=df)\nplt.show()","b2a56f90":"# Checking wheater our target is normally distributed or not.\nfrom scipy import stats\nfig, axs = plt.subplots(ncols=2, figsize=(10,5))\nsns.distplot(df['Yearly Amount Spent'], ax=axs[0])\nres = stats.probplot(df['Yearly Amount Spent'], plot=plt)\nplt.show()","195aa8bd":"# Handling the categorical values and also dropping the 'Avatar' columns because it has no use in our modelling.\ndf = pd.get_dummies(df.drop('Avatar', axis=1), drop_first=True)\ndf.head()","5d45fd4f":"X = df.drop('Yearly Amount Spent', axis=1)\ny = df['Yearly Amount Spent']","cd9ccd71":"from sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom sklearn.model_selection import cross_val_score, KFold\n\n# Choosing the best model among the tree based models\nkfold = KFold(n_splits=4, shuffle=True, random_state=42)\nscores = []\nfor i in [DecisionTreeRegressor(), RandomForestRegressor(), GradientBoostingRegressor()]:\n    scores.append(np.mean(cross_val_score(i, X, y, cv=kfold)))\n    \nprint(pd.DataFrame({'model':['Decision Tree','Random Forest', 'Gradient Boost'], 'score':scores}))","468d7a37":"# Training both linear and tree based model\ngboost = GradientBoostingRegressor().fit(X, y)\nlr = LinearRegression().fit(X, y)\n\n# Getting the coef for relevent features\ncoef = list(lr.coef_[:4]) + list(lr.coef_[-3:])\n# Getting the feature importance for relevent features\nfimp = list(gboost.feature_importances_[:4]) + list(gboost.feature_importances_[-3:])\n# Getting the name of relevent features\nfeature_name = list(X.columns[:4]) + list(X.columns[-3:])\n\n# Plotting the coef and feature importance\nfig, axs = plt.subplots(ncols=2, figsize=(22,5))\naxs[0].barh(feature_name, coef)\naxs[0].set_title('Linear Regression Coef')\n\naxs[1].barh(feature_name, fimp)\naxs[1].set_title('Gradient Boost Feature Importance')\nplt.show()","c03c1c3b":"there are some variations in correlation but it will not help us because of the large number of values in 'Postal Code'","15746b3a":"# EDA","75d5b6ec":"Goal : Find out where the company should put their focus, either on Mobile App or on Website.","4ffcab32":"The 'Yearly Amount Spent' looks same across all the values of 'Email Spent'. This feature doesn't look helpful.","c80df801":"# Model Building","171937c9":"It seems like our target is normally distributed.","011d3347":"All the numeric data looks normaly distributed.","d4838648":"'Time on App' and 'Length of Memebership' look most correlated with 'Yearly Amount Spent'","0ddaa851":"Conclusion : Both models and our data analysis shows thant 'Mobile App' generates more sales than 'Websites'. So company should enhance there user exp. on the website.","5f765152":"# Basic Imports","2baa53b7":"# Preprocessing for ML models"}}