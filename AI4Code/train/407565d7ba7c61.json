{"cell_type":{"aa1a3317":"code","06fff84e":"code","9efe9b10":"code","c6eed32f":"code","55e7fafd":"code","bfa4b81b":"code","b26f079d":"code","bf18eb3e":"code","6aa7de90":"code","1c838488":"code","2de4209a":"code","47f100cb":"code","793be998":"code","59950914":"code","26b670ac":"code","c1873b31":"code","e9c554ee":"code","7e8fe949":"code","efb74b2b":"code","59756a31":"code","d4144e89":"code","2ade32ae":"code","ca0d1394":"code","c07491b0":"code","0b5a252a":"code","bfb3c197":"code","32e2f747":"code","57b0bef3":"code","29a60854":"code","d651ab89":"code","4593d1f0":"code","82d8714e":"code","e9895304":"code","9d78cb34":"markdown","8ec8486c":"markdown","a7174988":"markdown","f41bc767":"markdown","de515071":"markdown","7df71833":"markdown","45e62a7e":"markdown","a8ffa489":"markdown","bfc8a2ce":"markdown"},"source":{"aa1a3317":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n# import warnings\nimport warnings\n# ignore warnings\nwarnings.filterwarnings(\"ignore\")\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))","06fff84e":"def precision_hesapla(class_id,TP, FP, TN, FN):\n    sonuc=0\n    for i in range(0,len(class_id)):\n        sonuc+=(TP[i]\/(TP[i]+FP[i]))\n        \n    sonuc=sonuc\/2\n    return sonuc\n\ndef recall_hesapla(class_id,TP, FP, TN, FN):\n    sonuc=0\n    for i in range(0,2):\n        sonuc+=(TP[i]\/(TP[i]+FN[i]))\n       \n    sonuc=sonuc\/2\n    return sonuc\ndef accuracy_hesapla(class_id,TP, FP, TN, FN):\n    sonuc=0\n    for i in range(0,1):\n        sonuc+=((TP[i]+TN[i])\/(TP[i]+FP[i]+TN[i]+FN[i]))\n        \n    sonuc=sonuc\/2\n    return sonuc\ndef specificity_hesapla(class_id,TP, FP, TN, FN):\n    sonuc=0\n    for i in range(0,2):\n        sonuc+=(TN[i]\/(FP[i]+TN[i]))\n        \n    sonuc=sonuc\/2\n    return sonuc\ndef NPV_hesapla(class_id,TP, FP, TN, FN):\n    sonuc=0\n    for i in range(0,2):\n        sonuc+=(TN[i]\/(TN[i]+FN[i]))\n        \n    sonuc=sonuc\/2\n    return sonuc\ndef perf_measure(y_actual, y_pred):\n    class_id = set(y_actual).union(set(y_pred))\n    TP = []\n    FP = []\n    TN = []\n    FN = []\n\n    for index ,_id in enumerate(class_id):\n        TP.append(0)\n        FP.append(0)\n        TN.append(0)\n        FN.append(0)\n        for i in range(len(y_pred)):\n            if y_actual[i] == y_pred[i] == _id:\n                TP[index] += 1\n            if y_pred[i] == _id and y_actual[i] != y_pred[i]:\n                FP[index] += 1\n            if y_actual[i] == y_pred[i] != _id:\n                TN[index] += 1\n            if y_pred[i] != _id and y_actual[i] != y_pred[i]:\n                FN[index] += 1\n\n\n    return class_id,TP, FP, TN, FN","9efe9b10":"data=pd.read_csv(\"..\/input\/wisc_bc_data.csv\")","c6eed32f":"data.info()","55e7fafd":"data.head()","bfa4b81b":"data.diagnosis = [ 1 if each == \"M\" else 0 for each in data.diagnosis]","b26f079d":"data.head()","bf18eb3e":"data.drop([\"id\"],axis=1,inplace = True)","6aa7de90":"data.head()","1c838488":"data.info()","2de4209a":"y=data.diagnosis.values\nx_data=data.iloc[:,1:]","47f100cb":"x=(x_data - np.min(x_data))\/(np.max(x_data)-np.min(x_data))","793be998":"x.head()","59950914":"from sklearn.metrics import classification_report,precision_score,recall_score,f1_score,roc_auc_score,accuracy_score\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.3,random_state=1)","26b670ac":"score_liste=[]\nauc_scor=[]\nprecision_scor=[]\nrecall_scor=[]\nf1_scor=[]\nLR_plus=[]\nLR_eksi=[]\nodd_scor=[]\nNPV_scor=[]\nyouden_scor=[]\nspecificity_scor=[]\nfrom sklearn.neighbors import KNeighborsClassifier","c1873b31":"\nscore_list = []\nfor each in range(1,15):\n    knn2 = KNeighborsClassifier(n_neighbors = each)\n    knn2.fit(x_train,y_train)\n    y_head=knn2.predict(x_test)\n    score_list.append(accuracy_score(y_test,y_head))\n    \nplt.plot(range(1,15),score_list)\nplt.xlabel(\"k values\")\nplt.ylabel(\"accuracy\")\nplt.show()","e9c554ee":"from sklearn.metrics import roc_curve","7e8fe949":"from sklearn.metrics import roc_curve\nfrom sklearn.neighbors import KNeighborsClassifier\nk=11\nknn = KNeighborsClassifier(n_neighbors = k)\nknn.fit(x_train,y_train)\ny_head=knn.predict(x_test)\nprint(\"KNN Algoritmas\u0131 ba\u015far\u0131m sonucu: \",knn.score(x_test,y_test))\n\nfrom sklearn.metrics import confusion_matrix\ncmknn = confusion_matrix(y_test,y_head)\nf, ax = plt.subplots(figsize =(5,5))\nsns.heatmap(cmknn,annot = True,linewidths=0.5,linecolor=\"red\",fmt = \".0f\",ax=ax)\nplt.xlabel(\"y_pred\")\nplt.ylabel(\"y_true\")\nplt.title(\"KNN Algoritmas\u0131 Karma\u015f\u0131kl\u0131k Matrisi\")\nplt.show()\n\nclassid,tn,fp,fn,tp=perf_measure(y_test,y_head)\nauc_scor.append(roc_auc_score(y_test,y_head))\nknn_fpr,knn_tpr,knn_trr=roc_curve(y_test,y_head)\nscore_liste.append(accuracy_hesapla(classid,tn,fp,fn,tp))\nprecision_scor.append(precision_hesapla(classid,tn,fp,fn,tp))\nrecall_scor.append(recall_hesapla(classid,tn,fp,fn,tp))\nf1_scor.append(f1_score(y_test,y_head,average='macro'))\nNPV_scor.append(NPV_hesapla(classid,tn,fp,fn,tp))\nspecificity_scor.append(specificity_hesapla(classid,tn,fp,fn,tp))\n\nLR_plus.append((recall_hesapla(classid,tn,fp,fn,tp)\/(1-specificity_hesapla(classid,tn,fp,fn,tp))))\nLR_eksi.append(((1-recall_hesapla(classid,tn,fp,fn,tp))\/specificity_hesapla(classid,tn,fp,fn,tp)))\nodd_scor.append(((recall_hesapla(classid,tn,fp,fn,tp)\/(1-specificity_hesapla(classid,tn,fp,fn,tp))))\/(((1-recall_hesapla(classid,tn,fp,fn,tp))\/specificity_hesapla(classid,tn,fp,fn,tp))))\nyouden_scor.append((recall_hesapla(classid,tn,fp,fn,tp)+specificity_hesapla(classid,tn,fp,fn,tp)-1))\nprint(\"KNN algoritmas\u0131 i\u00e7in s\u0131n\u0131fland\u0131rma raporu: \\n\",classification_report(y_test,y_head))","efb74b2b":"from sklearn.tree import DecisionTreeClassifier\ndtc=DecisionTreeClassifier()\ndtc.fit(x_train,y_train)\ny_head=dtc.predict(x_test)\nprint(\"Karar A\u011fa\u00e7lar\u0131 Algoritmas\u0131 i\u00e7in ba\u015far\u0131m sonucu: \",dtc.score(x_test,y_test))\n\nclassid,tn,fp,fn,tp=perf_measure(y_test,y_head)\nauc_scor.append(roc_auc_score(y_test,y_head))\ndtc_fpr,dtc_tpr,dtc_trr=roc_curve(y_test,y_head)\nscore_liste.append(accuracy_hesapla(classid,tn,fp,fn,tp))\nprecision_scor.append(precision_hesapla(classid,tn,fp,fn,tp))\nrecall_scor.append(recall_hesapla(classid,tn,fp,fn,tp))\nf1_scor.append(f1_score(y_test,y_head,average='macro'))\nNPV_scor.append(NPV_hesapla(classid,tn,fp,fn,tp))\nspecificity_scor.append(specificity_hesapla(classid,tn,fp,fn,tp))\nTPR=recall_hesapla(classid,tn,fp,fn,tp)\nTNR=specificity_hesapla(classid,tn,fp,fn,tp)\nFPR=1-TNR\nif FPR==0:\n    FPR=0.00001\nFNR=1-TPR\nlreksi=FNR\/TNR\nlrarti=TPR\/FPR\nif lreksi==0:\n    lreksi=0.00000001\nLR_plus.append(TPR\/FPR)\nLR_eksi.append(FNR\/TNR)\nodd_scor.append(lrarti\/lreksi)\nyouden_scor.append(TPR+TNR-1)\n\nprint(\"DTC algoritmas\u0131 i\u00e7in s\u0131n\u0131fland\u0131rma raporu: \\n\",classification_report(y_test,y_head))\n\ncmdtc = confusion_matrix(y_test,y_head)\nf, ax = plt.subplots(figsize =(5,5))\nsns.heatmap(cmdtc,annot = True,linewidths=0.5,linecolor=\"red\",fmt = \".0f\",ax=ax)\nplt.xlabel(\"Tahminde edilen de\u011fer\")\nplt.ylabel(\"Ger\u00e7ek De\u011fer\")\nplt.title(\"Karar A\u011fa\u00e7lar\u0131 Algoritmas\u0131 Karma\u015f\u0131kl\u0131k Matrisi\")\nplt.show()","59756a31":"from sklearn.ensemble import RandomForestClassifier\n","d4144e89":"from sklearn.ensemble import RandomForestClassifier\nrfc=RandomForestClassifier(n_estimators=225,random_state=1)\nrfc.fit(x_train,y_train)\ny_head=rfc.predict(x_test)\nprint(\"Rastgele Orman Algoritmas\u0131 ba\u015far\u0131m sonucu: \",rfc.score(x_test,y_test))\n\nclassid,tn,fp,fn,tp=perf_measure(y_test,y_head)\nauc_scor.append(roc_auc_score(y_test,y_head))\nrfc_fpr,rfc_tpr,rfc_trr=roc_curve(y_test,y_head)\nscore_liste.append(accuracy_hesapla(classid,tn,fp,fn,tp))\nprecision_scor.append(precision_hesapla(classid,tn,fp,fn,tp))\nrecall_scor.append(recall_hesapla(classid,tn,fp,fn,tp))\nf1_scor.append(f1_score(y_test,y_head,average='macro'))\nNPV_scor.append(NPV_hesapla(classid,tn,fp,fn,tp))\nspecificity_scor.append(specificity_hesapla(classid,tn,fp,fn,tp))\nTPR=recall_hesapla(classid,tn,fp,fn,tp)\nTNR=specificity_hesapla(classid,tn,fp,fn,tp)\nFPR=1-TNR\nif FPR==0:\n    FPR=0.00001\nFNR=1-TPR\nlreksi=FNR\/TNR\nlrarti=TPR\/FPR\nif lreksi==0:\n    lreksi=0.00000001\nLR_plus.append(TPR\/FPR)\nLR_eksi.append(FNR\/TNR)\nodd_scor.append(lrarti\/lreksi)\nyouden_scor.append(TPR+TNR-1)\nprint(\"Rastgele Orman algoritmas\u0131 i\u00e7in s\u0131n\u0131fland\u0131rma raporu: \\n\",classification_report(y_test,y_head))\n\ncmrfc = confusion_matrix(y_test,y_head)\nf, ax = plt.subplots(figsize =(5,5))\nsns.heatmap(cmrfc,annot = True,linewidths=0.5,linecolor=\"red\",fmt = \".0f\",ax=ax)\nplt.xlabel(\"y_pred\")\nplt.ylabel(\"y_true\")\nplt.title(\"Rastgele Orman Algoritmas\u0131 Karma\u015f\u0131kl\u0131k Matrisi\")\nplt.show()","2ade32ae":"from sklearn.naive_bayes import GaussianNB\nnb=GaussianNB()\nnb.fit(x_train,y_train)\ny_head=nb.predict(x_test)\nprint(\"Naive Bayes Algoritmas\u0131 ba\u015far\u0131m sonucu: \",nb.score(x_test,y_test))\n\n\nclassid,tn,fp,fn,tp=perf_measure(y_test,y_head)\nauc_scor.append(roc_auc_score(y_test,y_head))\nnb_fpr,nb_tpr,nb_trr=roc_curve(y_test,y_head)\nscore_liste.append(accuracy_hesapla(classid,tn,fp,fn,tp))\nprecision_scor.append(precision_hesapla(classid,tn,fp,fn,tp))\nrecall_scor.append(recall_hesapla(classid,tn,fp,fn,tp))\nf1_scor.append(f1_score(y_test,y_head,average='macro'))\nNPV_scor.append(NPV_hesapla(classid,tn,fp,fn,tp))\nspecificity_scor.append(specificity_hesapla(classid,tn,fp,fn,tp))\nTPR=recall_hesapla(classid,tn,fp,fn,tp)\nTNR=specificity_hesapla(classid,tn,fp,fn,tp)\nFPR=1-TNR\nif FPR==0:\n    FPR=0.00001\nFNR=1-TPR\nlreksi=FNR\/TNR\nlrarti=TPR\/FPR\nif lreksi==0:\n    lreksi=0.00000001\nLR_plus.append(TPR\/FPR)\nLR_eksi.append(FNR\/TNR)\nodd_scor.append(lrarti\/lreksi)\nyouden_scor.append(TPR+TNR-1)\nprint(\"Naive Bayes algoritmas\u0131 i\u00e7in s\u0131n\u0131fland\u0131rma raporu: \\n\",classification_report(y_test,y_head))\n\ncmnb = confusion_matrix(y_test,y_head)\nf, ax = plt.subplots(figsize =(5,5))\nsns.heatmap(cmnb,annot = True,linewidths=0.5,linecolor=\"red\",fmt = \".0f\",ax=ax)\nplt.xlabel(\"Tahmin Edilen\")\nplt.ylabel(\"Ger\u00e7ek De\u011fer\")\nplt.title(\"Naive Bayes Algoritmas\u0131 Karma\u015f\u0131kl\u0131k Matrisi\")\nplt.show()","ca0d1394":"from sklearn.linear_model import LogisticRegression\nlr=LogisticRegression()\nlr.fit(x_train,y_train)\ny_head=lr.predict(x_test)\nprint(\"Logistic Regresyon Algoritmas\u0131 ba\u015far\u0131m sonucu: \",lr.score(x_test,y_test))\n\n\nclassid,tn,fp,fn,tp=perf_measure(y_test,y_head)\nauc_scor.append(roc_auc_score(y_test,y_head))\nlrc_fpr,lrc_tpr,lrc_trr=roc_curve(y_test,y_head)\nscore_liste.append(accuracy_hesapla(classid,tn,fp,fn,tp))\nprecision_scor.append(precision_hesapla(classid,tn,fp,fn,tp))\nrecall_scor.append(recall_hesapla(classid,tn,fp,fn,tp))\nf1_scor.append(f1_score(y_test,y_head,average='macro'))\nNPV_scor.append(NPV_hesapla(classid,tn,fp,fn,tp))\nspecificity_scor.append(specificity_hesapla(classid,tn,fp,fn,tp))\nTPR=recall_hesapla(classid,tn,fp,fn,tp)\nTNR=specificity_hesapla(classid,tn,fp,fn,tp)\nFPR=1-TNR\nif FPR==0:\n    FPR=0.00001\nFNR=1-TPR\nlreksi=FNR\/TNR\nlrarti=TPR\/FPR\nif lreksi==0:\n    lreksi=0.00000001\nLR_plus.append(TPR\/FPR)\nLR_eksi.append(FNR\/TNR)\nodd_scor.append(lrarti\/lreksi)\nyouden_scor.append(TPR+TNR-1)\nprint(\"Lojistik Regresyon algoritmas\u0131 i\u00e7in s\u0131n\u0131fland\u0131rma raporu: \\n\",classification_report(y_test,y_head))\n\ncmlr = confusion_matrix(y_test,y_head)\nf, ax = plt.subplots(figsize =(5,5))\nsns.heatmap(cmlr,annot = True,linewidths=0.5,linecolor=\"red\",fmt = \".0f\",ax=ax)\nplt.xlabel(\"Tahmin Edilen\")\nplt.ylabel(\"Ger\u00e7ek De\u011fer\")\nplt.title(\"Lojistik Regresyon Algoritmas\u0131 Karma\u015f\u0131kl\u0131k Matrisi\")\nplt.show()","c07491b0":"from sklearn.svm import SVC\nsvc=SVC(random_state=1)\nsvc.fit(x_train,y_train)\ny_head=svc.predict(x_test)\nprint(\"Destek Vekt\u00f6r Makineleri Algoritmas\u0131 ba\u015far\u0131m sonucu: \",svc.score(x_test,y_test))\n\n\nclassid,tn,fp,fn,tp=perf_measure(y_test,y_head)\nauc_scor.append(roc_auc_score(y_test,y_head))\nsvc_fpr,svc_tpr,svc_trr=roc_curve(y_test,y_head)\nscore_liste.append(accuracy_hesapla(classid,tn,fp,fn,tp))\nprecision_scor.append(precision_hesapla(classid,tn,fp,fn,tp))\nrecall_scor.append(recall_hesapla(classid,tn,fp,fn,tp))\nf1_scor.append(f1_score(y_test,y_head,average='macro'))\nNPV_scor.append(NPV_hesapla(classid,tn,fp,fn,tp))\nspecificity_scor.append(specificity_hesapla(classid,tn,fp,fn,tp))\nTPR=recall_hesapla(classid,tn,fp,fn,tp)\nTNR=specificity_hesapla(classid,tn,fp,fn,tp)\nFPR=1-TNR\nif FPR==0:\n    FPR=0.00001\nFNR=1-TPR\nlreksi=FNR\/TNR\nlrarti=TPR\/FPR\nif lreksi==0:\n    lreksi=0.00000001\nLR_plus.append(TPR\/FPR)\nLR_eksi.append(FNR\/TNR)\nodd_scor.append(lrarti\/lreksi)\nyouden_scor.append(TPR+TNR-1)\nprint(\"Destek Vekt\u00f6r Makineleri algoritmas\u0131 i\u00e7in s\u0131n\u0131fland\u0131rma raporu: \\n\",classification_report(y_test,y_head))\n\ncmsvc = confusion_matrix(y_test,y_head)\nf, ax = plt.subplots(figsize =(5,5))\nsns.heatmap(cmsvc,annot = True,linewidths=0.5,linecolor=\"red\",fmt = \".0f\",ax=ax)\nplt.xlabel(\"Tahmin Edilen\")\nplt.ylabel(\"Ger\u00e7ek De\u011fer\")\nplt.title(\"Destek Vekt\u00f6r Makineleri Algoritmas\u0131 Karma\u015f\u0131kl\u0131k Matrisi\")\nplt.show()","0b5a252a":"from sklearn.ensemble import AdaBoostClassifier, GradientBoostingClassifier\nfrom sklearn.neural_network import MLPClassifier","bfb3c197":"gfc=GradientBoostingClassifier(n_estimators= 1000, max_leaf_nodes= 4, max_depth=None,random_state= 2,min_samples_split= 5)\ngfc.fit(x_train,y_train)\ny_head=gfc.predict(x_test)\nprint(\"Gradient Boosting Classifier Algoritmas\u0131 ba\u015far\u0131m sonucu: \",gfc.score(x_test,y_test))\n\nclassid,tn,fp,fn,tp=perf_measure(y_test,y_head)\nauc_scor.append(roc_auc_score(y_test,y_head))\ngfc_fpr,gfc_tpr,gfc_trr=roc_curve(y_test,y_head)\nscore_liste.append(accuracy_hesapla(classid,tn,fp,fn,tp))\nprecision_scor.append(precision_hesapla(classid,tn,fp,fn,tp))\nrecall_scor.append(recall_hesapla(classid,tn,fp,fn,tp))\nf1_scor.append(f1_score(y_test,y_head,average='macro'))\nNPV_scor.append(NPV_hesapla(classid,tn,fp,fn,tp))\nspecificity_scor.append(specificity_hesapla(classid,tn,fp,fn,tp))\nTPR=recall_hesapla(classid,tn,fp,fn,tp)\nTNR=specificity_hesapla(classid,tn,fp,fn,tp)\nFPR=1-TNR\nif FPR==0:\n    FPR=0.00001\nFNR=1-TPR\nlreksi=FNR\/TNR\nlrarti=TPR\/FPR\nif lreksi==0:\n    lreksi=0.00000001\nLR_plus.append(TPR\/FPR)\nLR_eksi.append(FNR\/TNR)\nodd_scor.append(lrarti\/lreksi)\nyouden_scor.append(TPR+TNR-1)\nprint(\"Gradient Boosting Classifier algoritmas\u0131 i\u00e7in s\u0131n\u0131fland\u0131rma raporu: \\n\",classification_report(y_test,y_head))\n\ncmgfc = confusion_matrix(y_test,y_head)\nf, ax = plt.subplots(figsize =(5,5))\nsns.heatmap(cmgfc,annot = True,linewidths=0.5,linecolor=\"red\",fmt = \".0f\",ax=ax)\nplt.xlabel(\"Tahmin Edilen\")\nplt.ylabel(\"Ger\u00e7ek De\u011fer\")\nplt.title(\"Gradient Boosting Classifier Algoritmas\u0131 Karma\u015f\u0131kl\u0131k Matrisi\")\nplt.show()","32e2f747":"abc=AdaBoostClassifier(n_estimators=100, random_state=0)\nabc.fit(x_train,y_train)\ny_head=abc.predict(x_test)\nprint(\"AdaBoosting Classifier Algoritmas\u0131 ba\u015far\u0131m sonucu: \",abc.score(x_test,y_test))\n\n\nclassid,tn,fp,fn,tp=perf_measure(y_test,y_head)\nauc_scor.append(roc_auc_score(y_test,y_head))\nabc_fpr,abc_tpr,abc_trr=roc_curve(y_test,y_head)\nscore_liste.append(accuracy_hesapla(classid,tn,fp,fn,tp))\nprecision_scor.append(precision_hesapla(classid,tn,fp,fn,tp))\nrecall_scor.append(recall_hesapla(classid,tn,fp,fn,tp))\nf1_scor.append(f1_score(y_test,y_head,average='macro'))\nNPV_scor.append(NPV_hesapla(classid,tn,fp,fn,tp))\nspecificity_scor.append(specificity_hesapla(classid,tn,fp,fn,tp))\nTPR=recall_hesapla(classid,tn,fp,fn,tp)\nTNR=specificity_hesapla(classid,tn,fp,fn,tp)\nFPR=1-TNR\nif FPR==0:\n    FPR=0.00001\nFNR=1-TPR\nlreksi=FNR\/TNR\nlrarti=TPR\/FPR\nif lreksi==0:\n    lreksi=0.00000001\nLR_plus.append(TPR\/FPR)\nLR_eksi.append(FNR\/TNR)\nodd_scor.append(lrarti\/lreksi)\nyouden_scor.append(TPR+TNR-1)\nprint(\"AdaBoosting Classifier algoritmas\u0131 i\u00e7in s\u0131n\u0131fland\u0131rma raporu: \\n\",classification_report(y_test,y_head))\n\ncmabc = confusion_matrix(y_test,y_head)\nf, ax = plt.subplots(figsize =(5,5))\nsns.heatmap(cmabc,annot = True,linewidths=0.5,linecolor=\"red\",fmt = \".0f\",ax=ax)\nplt.xlabel(\"Tahmin Edilen\")\nplt.ylabel(\"Ger\u00e7ek De\u011fer\")\nplt.title(\"AdaBoosting Classifier Algoritmas\u0131 Karma\u015f\u0131kl\u0131k Matrisi\")\nplt.show()","57b0bef3":"ysa=MLPClassifier(alpha=1, max_iter=1000)\nysa.fit(x_train,y_train)\ny_head=ysa.predict(x_test)\nprint(\"Yapay Sinir A\u011flar\u0131 Algoritmas\u0131 ba\u015far\u0131m sonucu: \",ysa.score(x_test,y_test))\n\n\nclassid,tn,fp,fn,tp=perf_measure(y_test,y_head)\nauc_scor.append(roc_auc_score(y_test,y_head))\nysa_fpr,ysa_tpr,ysa_trr=roc_curve(y_test,y_head)\nscore_liste.append(accuracy_hesapla(classid,tn,fp,fn,tp))\nprecision_scor.append(precision_hesapla(classid,tn,fp,fn,tp))\nrecall_scor.append(recall_hesapla(classid,tn,fp,fn,tp))\nf1_scor.append(f1_score(y_test,y_head,average='macro'))\nNPV_scor.append(NPV_hesapla(classid,tn,fp,fn,tp))\nspecificity_scor.append(specificity_hesapla(classid,tn,fp,fn,tp))\nTPR=recall_hesapla(classid,tn,fp,fn,tp)\nTNR=specificity_hesapla(classid,tn,fp,fn,tp)\nFPR=1-TNR\nif FPR==0:\n    FPR=0.00001\nFNR=1-TPR\nlreksi=FNR\/TNR\nlrarti=TPR\/FPR\nif lreksi==0:\n    lreksi=0.00000001\nLR_plus.append(TPR\/FPR)\nLR_eksi.append(FNR\/TNR)\nodd_scor.append(lrarti\/lreksi)\nyouden_scor.append(TPR+TNR-1)\nprint(\"AdaBoosting Classifier algoritmas\u0131 i\u00e7in s\u0131n\u0131fland\u0131rma raporu: \\n\",classification_report(y_test,y_head))\n\ncmysa = confusion_matrix(y_test,y_head)\nf, ax = plt.subplots(figsize =(5,5))\nsns.heatmap(cmysa,annot = True,linewidths=0.5,linecolor=\"red\",fmt = \".0f\",ax=ax)\nplt.xlabel(\"Tahmin Edilen\")\nplt.ylabel(\"Ger\u00e7ek De\u011fer\")\nplt.title(\"AdaBoosting Classifier Algoritmas\u0131 Karma\u015f\u0131kl\u0131k Matrisi\")\nplt.show()","29a60854":"algo_liste=[\"KNN\",\"Decision Tree\",\"Random Forest\",\"Naive Bayes\",\"Linear Regression\",\"Support Vector Machine\",\"Gradient Boosting Classifier\",\"AdaBoosting Classifier\",\"Neural Network\"]\nscore={\"algo_list\":algo_liste,\"score_liste\":score_liste,\"precision\":precision_scor,\"recall\":recall_scor,\"f1_score\":f1_scor,\"AUC\":auc_scor,\"LR+\":LR_plus,\"LR-\":LR_eksi,\"ODD\":odd_scor,\"YOUDEN\":youden_scor,\"Specificity\":specificity_scor}","d651ab89":"df=pd.DataFrame(score)","4593d1f0":"df","82d8714e":"f,ax1 = plt.subplots(figsize =(15,15))\nsns.pointplot(x=df['algo_list'], y=df['score_liste'],data=df,color='lime',alpha=0.8,label=\"score_liste\")\nsns.pointplot(x=df['algo_list'], y=df['precision'],data=df,color='red',alpha=0.8,label=\"precision\")\nsns.pointplot(x=df['algo_list'], y=df['recall'],data=df,color='black',alpha=0.8,label=\"recall\")\nsns.pointplot(x=df['algo_list'], y=df['f1_score'],data=df,color='blue',alpha=0.8,label=\"f1_score\")\nsns.pointplot(x=df['algo_list'], y=df['AUC'],data=df,color='yellow',alpha=0.8,label=\"AUC\")\n\nsns.pointplot(x=df['algo_list'], y=df['LR-'],data=df,color='orange',alpha=0.8,label=\"YOUDEN\")\n\nsns.pointplot(x=df['algo_list'], y=df['YOUDEN'],data=df,color='brown',alpha=0.8,label=\"LR-\")\nsns.pointplot(x=df['algo_list'], y=df['Specificity'],data=df,color='purple',alpha=0.8,label=\"Specificity\")\nplt.xlabel('Algoritma ismi',fontsize = 15,color='blue')\nplt.ylabel('Score',fontsize = 15,color='blue')\nplt.xticks(rotation= 45)\nplt.title('HCC Survival Dataset ile S\u0131n\u0131fland\u0131rma',fontsize = 20,color='blue')\nplt.grid()\nplt.legend()\nplt.show()","e9895304":"def graph_roc_curve_multiple(log_fpr, log_tpr, knear_fpr, knear_tpr, svc_fpr, svc_tpr, tree_fpr, tree_tpr,rfc_fpr,rfc_tpr,nb_fpr,nb_tpr,gbc_fpr,gbc_tpr,abc_fpr,abc_tpr,ysa_fpr,ysa_tpr):\n    plt.figure(figsize=(16,8))\n    plt.title('ROC Curve \\n Top 9 Classifiers', fontsize=18)\n    plt.plot(log_fpr, log_tpr, label='Logistic Regression Classifier Score: {:.4f}'.format(roc_auc_score(y_test, lr.predict(x_test))))\n    plt.plot(knear_fpr, knear_tpr, label='KNears Neighbors Classifier Score: {:.4f}'.format(roc_auc_score(y_test, knn.predict(x_test))))\n    plt.plot(svc_fpr, svc_tpr, label='Support Vector Classifier Score: {:.4f}'.format(roc_auc_score(y_test, svc.predict(x_test))))\n    plt.plot(tree_fpr, tree_tpr, label='Decision Tree Classifier Score: {:.4f}'.format(roc_auc_score(y_test, dtc.predict(x_test))))\n    plt.plot(rfc_fpr, rfc_tpr, label='Random Forest Classifier Score: {:.4f}'.format(roc_auc_score(y_test, rfc.predict(x_test))))\n    plt.plot(nb_fpr, nb_tpr, label='Naive Bayes Classifier Score: {:.4f}'.format(roc_auc_score(y_test, nb.predict(x_test))))\n    plt.plot(gbc_fpr, gbc_tpr, label='Gradient Boosting Classifier Score: {:.4f}'.format(roc_auc_score(y_test, gfc.predict(x_test))))\n    plt.plot(abc_fpr, abc_tpr, label='AdaBoosting Classifier Score: {:.4f}'.format(roc_auc_score(y_test, abc.predict(x_test))))\n    plt.plot(ysa_fpr, ysa_tpr, label='Neural Network Score: {:.4f}'.format(roc_auc_score(y_test, ysa.predict(x_test))))\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.axis([-0.01, 1, 0, 1])\n    plt.xlabel('False Positive Rate', fontsize=16)\n    plt.ylabel('True Positive Rate', fontsize=16)\n    plt.annotate('Minimum ROC Score of 50% \\n (This is the minimum score to get)', xy=(0.5, 0.5), xytext=(0.6, 0.3),\n                arrowprops=dict(facecolor='#6E726D', shrink=0.05),\n                )\n    plt.legend()\n    \ngraph_roc_curve_multiple(lrc_fpr, lrc_tpr, knn_fpr, knn_tpr, svc_fpr, svc_tpr, dtc_fpr, dtc_tpr,rfc_fpr,rfc_tpr,nb_fpr,nb_tpr,gfc_fpr,gfc_tpr,abc_fpr,abc_tpr,ysa_fpr,ysa_tpr)\nplt.show()","9d78cb34":"<h3>Bu \u00e7al\u0131\u015fmada wisconsin breast cancer datas\u0131 kullan\u0131larak a\u015fa\u011f\u0131daki makine \u00f6\u011frenmesi ile y\u00f6ntemleri s\u0131n\u0131fland\u0131rma i\u015flemi yap\u0131lm\u0131\u015ft\u0131r.  <\/h3>\n1. KNN\n2. Decision Tree\n3. Random Forest\n4. Naive Bayes\n5. Linear Regression\n6. Support Vector Machine\n- Bu algoritmalar uyguland\u0131ktan sonra farkl\u0131 ba\u015far\u0131m de\u011ferlendirme y\u00f6ntemleri kullan\u0131larak s\u0131n\u0131fland\u0131rma i\u015flemini hangi modelin daha iyi yapt\u0131\u011f\u0131 incelenmi\u015ftir. \n- Ba\u015far\u0131m de\u011ferlendirmesi yaparken sadece accuracy metri\u011fi de\u011fil bunun yan\u0131nda precision, recall, specificity, sensitivity vb. gibi metrikler ile de hangi s\u0131n\u0131fa ait verinin daha iyi tahmin edildi\u011fi tespit edilecektir. \n- Son olarak bu metrikler kullan\u0131larak ROC ve AUC grafikleri olu\u015fturulacak ve yine ba\u015far\u0131m de\u011ferlendirmesi yap\u0131lacakt\u0131r. ROC ve AUC'un fark\u0131 birden fazla metrik kullan\u0131larak de\u011ferlendirme yapmas\u0131d\u0131r. ","8ec8486c":"A\u015fa\u011f\u0131daki score_liste isimli de\u011fi\u015fken uygulayaca\u011f\u0131m\u0131z b\u00fct\u00fcn algoritmalara ait ba\u015far\u0131m oranlar\u0131n\u0131 saklayaca\u011f\u0131m\u0131z bir liste. \n\nDaha sonra yap\u0131lan i\u015flem ise KNN algoritmas\u0131n\u0131 uygularken hangi k de\u011ferini uygularsak daha iyi bir ba\u015far\u0131m elde ederizin i\u015flemedir. Yap\u0131lan i\u015fleme g\u00f6re K say\u0131s\u0131n\u0131 10,11,12 de\u011ferlerinden birini se\u00e7memiz algoritmam\u0131z\u0131n ba\u015far\u0131m\u0131n\u0131 en b\u00fcy\u00fck olaca\u011f\u0131n\u0131 sa\u011flamaktad\u0131r.","a7174988":"Verimizi karar s\u0131n\u0131f\u0131 ve karar s\u0131n\u0131f\u0131n\u0131 etkileyen veriler olarak ay\u0131r\u0131yoruz. Burada verimizde ki say\u0131lar\u0131n da\u011f\u0131l\u0131m\u0131 algoritmalar\u0131 uygularken (misal KNN algoritmas\u0131n\u0131 uygularken veriler aras\u0131ndaki mesafeler verinin hangi s\u0131n\u0131fta oldu\u011funu belirlemede \u00e7ok \u00f6nemli olmas\u0131 gibi) sorun te\u015fkil etmemesi i\u00e7in verimize normalizasyon i\u015flemi yaparak verimizi 0-1 aral\u0131\u011f\u0131nda olmas\u0131n\u0131 sa\u011fl\u0131yoruz.","f41bc767":"Makine \u00f6\u011frenmesi algoritmalar\u0131 uygularken verimizi e\u011fitim ve test verisi olarak b\u00f6lmemiz gerekmektedir. Bunun nedeni algoritmay\u0131 \u00f6nce e\u011fitim seti ile e\u011fitip daha sonra asl\u0131nda s\u0131n\u0131flar\u0131 belli olan ama modelimizin g\u00f6rmedi\u011fi veri setinde uygulayarak ne kadar do\u011fru karar verdi\u011fini g\u00f6rmektir.","de515071":"Yukar\u0131da da g\u00f6r\u00fcld\u00fc\u011f\u00fc gibi K de\u011ferinin ba\u015far\u0131m anlam\u0131nda en iyi de\u011feri 10,11,12 listelenmi\u015fti. A\u015fa\u011f\u0131da 10 de\u011feri i\u00e7in veri KNN algoritmas\u0131nda e\u011fitilmi\u015f ve test edilmi\u015f ba\u015far\u0131m\u0131 listelenerek score_liste isimli listemizin i\u00e7erisine at\u0131lm\u0131\u015ft\u0131r.","7df71833":"S\u0131n\u0131fland\u0131rma modelini olu\u015ftururken baz\u0131 alanlardaki veriler modelimizin olu\u015fumunu etkilemeyece\u011fi i\u00e7in onlar\u0131 datasetimizden \u00e7\u0131karmam\u0131z gerekiyor. Burada hastaya ait id numaras\u0131 modelimizi etkilemeyece\u011fi i\u00e7in verimizden bu \u00f6zelli\u011fi kald\u0131r\u0131yoruz. ","45e62a7e":"Verimizden id isimli s\u00fctununu sildikten sonra a\u015fa\u011f\u0131da da g\u00f6r\u00fcld\u00fc\u011f\u00fc gibi s\u00fctun say\u0131s\u0131 31'e d\u00fc\u015ft\u00fc\u011f\u00fc g\u00f6r\u00fclm\u00fc\u015ft\u00fcr. ","a8ffa489":"Verimiz 32 s\u00fctun, 569 kay\u0131ttan olu\u015fmaktad\u0131r. Verimizin diagnosis isimli s\u00fctunu karar s\u0131n\u0131f\u0131n\u0131 temsil etmekte, di\u011fer kalan s\u00fctunlar ise karar s\u0131n\u0131f\u0131n\u0131n olu\u015fmas\u0131n\u0131 sa\u011flayan etkenler olarak listelenmi\u015ftir. yani diagnosis bizim ba\u011f\u0131ml\u0131 de\u011fi\u015fkenimiz olurken, di\u011fer kalan s\u00fctunlar bizim ba\u011f\u0131ml\u0131 de\u011fi\u015fkeni etkileyen ba\u011f\u0131ms\u0131z de\u011fi\u015fkenlerimiz olarak listelenmi\u015ftir. Sadece id isimli s\u00fctun o veriye ait bir isim oldu\u011fu i\u00e7in verimizin de\u011fi\u015fimine bir etkisi olmayaca\u011f\u0131 i\u00e7in algoritmalar uygulanmadan \u00f6nce verimizinde ilgili s\u00fctunu silerek uygulamalara ba\u015flayaca\u011f\u0131z.","bfc8a2ce":"Yapaca\u011f\u0131m\u0131z i\u015flemler genel olarak say\u0131sal i\u015flemler oldu\u011fu i\u00e7in karar s\u0131n\u0131f\u0131m\u0131z\u0131n de\u011fi\u015fkenlerini (ki burada karar s\u0131n\u0131f\u0131m\u0131z M ve B de\u011ferlerini almakta) 1 ve 0 olarak de\u011fi\u015ftirece\u011fiz."}}