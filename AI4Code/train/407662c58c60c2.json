{"cell_type":{"158268a3":"code","aa831812":"code","ab442d86":"code","3c6ecb3d":"code","ef52aefd":"code","6fc22ce6":"code","1da44926":"code","71e2cafc":"code","0d47b3fd":"code","1f62cf92":"code","f7c81263":"code","38eeef07":"code","c61e36bb":"code","f758dd07":"code","f012cb8c":"code","b871b9c7":"code","12cff9c8":"code","882493f1":"code","b4fc0977":"code","5d9aebae":"code","2bef2794":"code","260a35c3":"code","e6b930a7":"code","db1b4d67":"code","9d15433a":"code","377cdcda":"code","ac715ca7":"code","2bb8f22a":"code","2dcfd500":"code","01b6b786":"code","47cb5fcb":"markdown"},"source":{"158268a3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aa831812":"import pandas as pd\npd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom learntools.core import binder\nbinder.bind(globals())\nfrom learntools.data_viz_to_coder.ex7 import *","ab442d86":"my_filepath = \"..\/input\/factors-affecting-campus-placement\/Placement_Data_Full_Class.csv\"\nmy_data = pd.read_csv(my_filepath,index_col = 'sl_no')","3c6ecb3d":"my_data.head()","ef52aefd":"my_data.info()","6fc22ce6":"my_data['salary'] = my_data['salary'].replace(np.nan,0)","1da44926":"plt.figure(figsize = (12,8))\nsns.lineplot(x = 'ssc_p',y = 'salary',data = my_data,label = 'SSC')\nsns.lineplot(x = 'hsc_p',y = 'salary',data = my_data,label = 'HSC')\nsns.lineplot(x = 'degree_p',y = 'salary',data = my_data,label = 'Degree')\nsns.lineplot(x = 'mba_p',y = 'salary',data = my_data,label = 'MBA')\n# Check that a figure appears below\nstep_4.check()","71e2cafc":"my_data['gender'].value_counts().plot(kind = 'bar',alpha = 0.7)\nplt.xlabel('Gender')\nplt.ylabel('Appeared in Placements')","0d47b3fd":"my_data['status'].value_counts().plot(kind = 'bar',alpha = 0.7)\nplt.xlabel('Status')","1f62cf92":"f,axes = plt.subplots(1,2,figsize = (12,5))\nmy_data['status'][my_data['gender']=='M'].value_counts().plot(kind = 'bar',alpha = 1,ax = axes[0])\nmy_data['status'][my_data['gender']=='F'].value_counts().plot(kind = 'bar',alpha = 1,ax = axes[1],color = 'pink')","f7c81263":"f,axes = plt.subplots(1,3,figsize = (12,5))\nmy_data['hsc_s'].value_counts().plot(kind = 'bar',alpha = 1,ax = axes[0])\nmy_data['degree_t'].value_counts().plot(kind = 'bar',alpha = 1,ax = axes[1],color = 'cyan')\nmy_data['specialisation'].value_counts().plot(kind = 'bar',alpha = 1,ax = axes[2],color = 'green')","38eeef07":"f,axes = plt.subplots(1,5,figsize = (25,6))\n\nsns.swarmplot(x = 'status',y = 'hsc_p',data = my_data,ax = axes[0])\nsns.swarmplot(x = 'status',y = 'ssc_p',data = my_data,ax = axes[1])\nsns.swarmplot(x = 'status',y = 'degree_p',data = my_data,ax = axes[2])\nsns.swarmplot(x = 'status',y = 'etest_p',data = my_data,ax = axes[3])\nsns.swarmplot(x = 'status',y = 'mba_p',data = my_data,ax = axes[4])\nsns.set_style('darkgrid')\nsns.set_style('ticks')","c61e36bb":"features = ['hsc_p','ssc_p','degree_p','etest_p','mba_p']\nf, ax = plt.subplots(5,2,figsize = (10,30))\nx,y = 0,0\nfor i in range(4):\n    for j in range(i+1,5):\n        sns.scatterplot(x = my_data[features[i]],y = my_data[features[j]],hue = my_data['status'],ax = ax[x,y])\n        sns.set_style('darkgrid')\n        if y==1:\n            x+=1\n            y = 0\n        else:\n            y+=1","f758dd07":"features = ['hsc_p','ssc_p','degree_p','etest_p','mba_p','salary']\nfig, ax = plt.subplots(2,3,figsize = (25,15))\nx,y = 0,0\nfor item in features:\n    label = 'Distribution of ' + item\n    d = np.array(my_data[item][my_data.status=='Placed'])\n    sns.kdeplot(data = d,label = 'Placed',ax = ax[x,y],shade = True)\n    d = np.array(my_data[item][my_data.status=='Not Placed'])\n    sns.kdeplot(data = d,label = 'Not Placed',ax = ax[x,y])\n    ax[x,y].set_title(label)\n    if y==2:\n        x+=1\n        y = 0\n    else:y+=1\n    #label = 'Distribution of ' + item\n    #plt.title.set_text(label)\n    sns.set_style('darkgrid')","f012cb8c":"features =['gender',\n 'ssc_p',\n 'hsc_p',\n 'degree_p',\n 'mba_p',\n 'etest_p',          \n 'salary',\n 'status',]","b871b9c7":"from sklearn.preprocessing import LabelEncoder","12cff9c8":"encoder = LabelEncoder()","882493f1":"newdata = {}\nfor item in features:\n    if item!='status' and item!='gender':\n        newdata[item] = my_data[item]\n        continue\n    ffs = encoder.fit_transform(my_data[item])\n    newdata[item] = ffs","b4fc0977":"newdata = pd.DataFrame(newdata)\nnewdata.head()","5d9aebae":"plt.figure(figsize = (12,10))\nsns.heatmap(newdata.corr(),annot = True)","2bef2794":"newdata.drop('salary',axis = 1,inplace = True)","260a35c3":"X = newdata.drop('status',1)\nY = newdata['status']","e6b930a7":"from sklearn.model_selection import train_test_split","db1b4d67":"X,xtest,Y,ytest = train_test_split(X,Y,test_size = 0.1)","9d15433a":"from sklearn.linear_model import LogisticRegression","377cdcda":"log_model = LogisticRegression(C = 1e5)\nlog_model.fit(X,Y)","ac715ca7":"log_model.score(xtest,ytest)","2bb8f22a":"from sklearn.svm import SVC","2dcfd500":"svm_model = SVC()\nsvm_model.fit(X,Y)","01b6b786":"svm_model.score(xtest,ytest)","47cb5fcb":"**Logostic Regression**"}}