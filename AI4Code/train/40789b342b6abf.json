{"cell_type":{"0545c1f7":"code","1d621e44":"code","6007cb92":"code","5efd3700":"code","204e5336":"code","72eb6fa9":"code","ad4f5071":"code","136b8716":"code","e4d2868f":"code","e826969a":"code","9b70139c":"code","3898fb5c":"code","db7c2925":"code","378d0f42":"code","76158240":"code","4376b250":"code","65c908a1":"code","70a9cc8b":"code","5e6541fd":"code","64dd8e16":"code","21e21924":"code","c6521c8c":"code","c39cd084":"code","f5883bf6":"code","41e1a4a4":"code","0251515d":"code","9fc09774":"code","7cf3620e":"code","b87856ce":"code","6bbb619b":"code","80fd317c":"code","4e202932":"code","30aadd34":"code","b2d2a6a1":"code","74685653":"code","63cc2624":"code","24225ee1":"code","d46ce00b":"code","82638ed5":"code","3cb2b138":"code","f599768b":"code","d0fd9d40":"code","308a9bea":"markdown","3e6d602e":"markdown","7a4b93fa":"markdown","9abedfdf":"markdown","66b5da8b":"markdown","90154cf7":"markdown","35f7c1f0":"markdown","1d3010f5":"markdown","55f1c438":"markdown","fd938583":"markdown","e5e9a928":"markdown","be9fee03":"markdown","381e65a7":"markdown","25a7fba4":"markdown","f868bc4e":"markdown","14a2e3d2":"markdown","3e6c0f63":"markdown","1de24c32":"markdown","18fef5e0":"markdown","db16fa8b":"markdown","090f74b8":"markdown","e789fe87":"markdown","e1b3c443":"markdown","8933fcfc":"markdown","a6f23e45":"markdown","26f3f90b":"markdown","ca4a1307":"markdown","8223e93f":"markdown","4182a55b":"markdown","e714d15d":"markdown","27f86444":"markdown","adf306d2":"markdown","b1d2be8c":"markdown","0e087122":"markdown","642c4b59":"markdown","c5d97a09":"markdown","0f114432":"markdown","82e8c001":"markdown","b18cab4c":"markdown","09b103c9":"markdown","6c381b9f":"markdown","63b6046a":"markdown","5f9bc2ee":"markdown","4f8e6bde":"markdown","cd89020d":"markdown","a0988723":"markdown","f4901211":"markdown","b46d1f85":"markdown","f7ef8098":"markdown","d0f14562":"markdown","e3b9d786":"markdown","e317ecbe":"markdown","1e17c9a6":"markdown","c4be1027":"markdown","1eb41fc9":"markdown","b3cfc63c":"markdown","1fe2192c":"markdown","a74470fe":"markdown","6413d6e8":"markdown","704495a2":"markdown","7f552f60":"markdown","d94d5888":"markdown","0aaef93e":"markdown","6675f6b3":"markdown","23102c3f":"markdown","bafdcfa8":"markdown","9ff9c290":"markdown","79eca01b":"markdown","f93235f3":"markdown","1a480235":"markdown"},"source":{"0545c1f7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1d621e44":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt \n#plt.style.use('seaborn')\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\nimport warnings\nwarnings.filterwarnings('ignore')","6007cb92":"car=pd.read_csv('..\/input\/automobile-dataset\/Automobile_data.csv')\ncar.head(2)","5efd3700":"print('Rows     :',car.shape[0])\nprint('Columns  :',car.shape[1])\nprint('\\nFeatures :\\n     :',car.columns.tolist())\nprint('\\nMissing values    :',car.isnull().values.sum())\nprint('\\nUnique values :  \\n',car.nunique())","204e5336":"total = car.isnull().sum().sort_values(ascending=False)\npercent = ((car.isnull().sum())*100)\/car.isnull().count().sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total','Percent'], sort=False).sort_values('Total', ascending=False)\nmissing_data.head(40)\n","72eb6fa9":"#car.info","ad4f5071":"a=car[car['normalized-losses']!='?']\nb=(a['normalized-losses'].astype(int)).mean()\ncar['normalized-losses']=car['normalized-losses'].replace('?',b).astype(int)","136b8716":"a=car[car['body-style']=='sedan']\na['num-of-doors'].value_counts()","e4d2868f":"a=car['num-of-doors'].map({'two':2,'four':4,'?':4})\ncar['num-of-doors']=a","e826969a":"a=car[car['price']!='?']\nb=(a['price'].astype(int)).mean()\ncar['price']=car['price'].replace('?',b).astype(int)\n\na=car[car['horsepower']!='?']\nb=(a['horsepower'].astype(int)).mean()\ncar['horsepower']=car['horsepower'].replace('?',b).astype(int)\n\na=car[car['bore']!='?']\nb=(a['bore'].astype(float)).mean()\ncar['bore']=car['bore'].replace('?',b).astype(float)\n\na=car[car['stroke']!='?']\nb=(a['stroke'].astype(float)).mean()\ncar['stroke']=car['stroke'].replace('?',b).astype(float)\n\na=car[car['peak-rpm']!='?']\nb=(a['peak-rpm'].astype(float)).mean()\ncar['peak-rpm']=car['peak-rpm'].replace('?',b).astype(float)","9b70139c":"a=car['num-of-cylinders'].map({'four':4,'five':5,'six':6,'?':4})\ncar['num-of-doors']=a","3898fb5c":"car.describe().T","db7c2925":"colors = ['b','g','r','c','y','magenta','purple','orange','#ff9999','#66b3ff','#99ff99']\ntemp = car['make'].value_counts()\ntemp2 = temp.head(10)\nif len(temp) > 10:\n   temp2['remaining {0} items'.format(len(temp)-10)] = sum(temp[10:])\ntemp2.plot(kind='pie',autopct=\"%1.1f%%\",shadow=False,fontsize=15,pctdistance=0.9,colors=colors,wedgeprops={\"edgecolor\":\"0\",\"linewidth\":0.5,\"linestyle\":\"solid\",\"antialiased\":True},figsize=(15,10)) \n\npass","378d0f42":"pd.crosstab(car.make,car['fuel-type'],margins=True).T.style.background_gradient(cmap='summer_r')\n\nf,ax=plt.subplots(1,2,figsize=(18,8))\ncar['fuel-type'].value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%',ax=ax[0],shadow=True)\nax[0].set_title('Fuel Type')\nax[0].set_ylabel('Count')\nsns.countplot('fuel-type',data=car,ax=ax[1],order=car['fuel-type'].value_counts().index)\nax[1].set_title('Fuel Type')\nplt.show()","76158240":"pd.crosstab(car.make,car['fuel-type'],margins=True).T.style.background_gradient(cmap='summer_r')\nf,ax=plt.subplots(1,2,figsize=(18,8))\ncar['fuel-type'].value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%',ax=ax[0],shadow=True)\nax[0].set_title('Fuel Type')\nax[0].set_ylabel('Count')\nsns.countplot('fuel-type',data=car,ax=ax[1],order=car['fuel-type'].value_counts().index)\nax[1].set_title('Fuel Type')\nplt.show()\n","4376b250":"print('Car makers in the data set are',car['make'].unique())","65c908a1":"car[['engine-size','peak-rpm','curb-weight','horsepower','price','highway-mpg']].hist(figsize=(10,8),bins=50,color='b',linewidth='3',edgecolor='k')\nplt.tight_layout()\nplt.show()","70a9cc8b":"plt.subplots(figsize=(10,6))\nax=car['make'].value_counts().plot.bar(width=0.9,color=sns.color_palette('RdYlGn',20))\nfor p in ax.patches:\n    ax.annotate(format(p.get_height()), (p.get_x()+0.15, p.get_height()+1))\nplt.xticks(rotation='vertical')\nplt.xlabel('Car Maker',fontsize=20)\nplt.ylabel('Number of Cars',fontsize=20)\nplt.title('Cars Count By Manufacturer',fontsize=30)\nax.tick_params(labelsize=15)\n#plt.yticks(rotation='vertical')\nplt.show()\nplt.show()","5e6541fd":"print('Different types of cars',car['body-style'].unique())","64dd8e16":"\nfig = plt.figure(figsize=(15, 10))\ncars_type=car.groupby(['body-style']).count()['make']\nax=cars_type.sort_values(ascending=False).plot.bar(edgecolor='k',linewidth=2)\nfor p in ax.patches:\n    ax.annotate(format(p.get_height()), (p.get_x()+0.15, p.get_height()+1),fontsize=11)\nplt.xticks(rotation='vertical')\nplt.xlabel('Body Type',fontsize=20)\nplt.ylabel('Number of Cars',fontsize=20)\nplt.title('Count of Cars by Body Type',fontsize=30)\nax.tick_params(labelsize=15)\n#plt.yticks(rotation='vertical')\nplt.show()","21e21924":"from matplotlib.pyplot import plot\nplt.rcParams['figure.figsize']=(15,10)\n#fig = plt.figure(figsize=(25, 25))\na=car.groupby(['body-style','make']).count().reset_index();\na=a[['make','body-style','symboling']]\na.columns=['make','style','count']\na=a.pivot('make','style','count')\na.dropna(thresh=3).plot.bar(width=0.85);\n#plot.bar()\nplt.ioff()\nplt.show()","c6521c8c":"plt.figure(1)\nplt.subplot(221)\nax1=car['engine-type'].value_counts(normalize=True).plot(figsize=(15,10),kind='bar',color='orange',edgecolor='k',linewidth=2)\nplt.title(\"Engine Type \")\nplt.ylabel('Number of Engine Type',fontsize=15)\nax1.tick_params(labelsize=15)\nplt.xlabel('engine-type',fontsize=15);\n\n\nplt.subplot(222)\nax2=car['num-of-doors'].value_counts(normalize=True).plot(figsize=(15,10),kind='bar',color='purple',edgecolor='k',linewidth=2)\nplt.title(\"Number of Door\")\nplt.ylabel('Number of Doors',fontsize=15)\nax2.tick_params(labelsize=15)\nplt.xlabel('num-of-doors',fontsize=15);\n\nplt.subplot(223)\nax3=car['fuel-type'].value_counts(normalize= True).plot(figsize=(15,10),kind='bar',color='green',edgecolor='k',linewidth=2)\nplt.title(\"Fuel Type\")\nplt.ylabel('Number of vehicles',fontsize=15)\nplt.xlabel('fuel-type',fontsize=15)\nax2.tick_params(labelsize=15)\n\nplt.subplot(224)\nax4=car['body-style'].value_counts(normalize=True).plot(figsize=(15,10),kind='bar',color='red',edgecolor='k',linewidth=2)\nplt.title(\"Body Style\")\nplt.ylabel('Number of vehicles',fontsize=15)\nplt.xlabel('body-style',fontsize=15);\nplt.tight_layout()\nplt.show()","c39cd084":"fig = plt.figure(figsize=(15, 10))\nmileage=car.groupby(['make']).mean()\nmileage['avg-mpg']=((mileage['city-mpg']+mileage['highway-mpg'])\/2)\nax=mileage['avg-mpg'].sort_values(ascending=False).plot.bar(edgecolor='k',linewidth=2)\nplt.xticks(rotation='vertical')\nplt.xlabel('Car Maker',fontsize=20)\nplt.ylabel('Number of Cars',fontsize=20)\nplt.title('Fuel Economy of Car Makers',fontsize=30)\nax.tick_params(labelsize=20)\n#plt.yticks(rotation='vertical')\nplt.show()\nplt.show()","f5883bf6":"#plt.figure(figsize=(15, 12))\n#sns.set(rc={'figure.figsize':(15,10)})\nsns.factorplot(data=car, x=\"num-of-cylinders\", y=\"horsepower\",height=8.27, aspect=11.7\/8.27)\nplt.show()\n","41e1a4a4":"\nplt.rcParams['figure.figsize']=(23,10)\nax = sns.boxplot(x=\"make\", y=\"price\", data=car,width=0.8,linewidth=5)\nax.set_xlabel('Make of Car',fontsize=30)\nax.set_ylabel('Price in $',fontsize=30)\nplt.title('Price of Car Based on Make',fontsize=40)\nax.tick_params(axis='x',labelsize=20,rotation=90)","0251515d":"sns.factorplot(data=car, y=\"price\", x=\"body-style\" , hue=\"fuel-type\" ,kind=\"point\",height=8.27, aspect=11.7\/8.27)\nplt.xlabel('Type of Engine',fontsize=20)\nplt.ylabel('Price in $',fontsize=20)\nplt.title('Price Vs Engine Type',fontsize=20)\nplt.tick_params(axis='x',labelsize=10,rotation=90)","9fc09774":"plt.rcParams['figure.figsize']=(23,10)\nax=sns.boxplot(x='drive-wheels',y='price',data=car,width=0.8,linewidth=5)\nax.set_xlabel('Make of Car',fontsize=30)\nax.set_ylabel('Price in $',fontsize=30)\nplt.title('Price of Car Based on Make',fontsize=40)\nax.tick_params(axis='x',labelsize=20,rotation=90)","7cf3620e":"import seaborn as sns\nplt.figure(figsize=(20,10))\nsns.heatmap(car.corr(),annot=True,cmap='summer');","b87856ce":"ax = sns.pairplot(car[[\"width\", \"curb-weight\",\"engine-size\",\"horsepower\",\"highway-mpg\",\"fuel-type\",\"price\",]], hue=\"fuel-type\",palette='dark') #diag_kind=\"hist\"","6bbb619b":"car.columns","80fd317c":"car1 = pd.DataFrame(car)","4e202932":"import plotly.offline as pyo \nimport plotly.graph_objs as go \nimport pandas as pd \nfrom plotly.offline import iplot\n\ndata = [go.Scatter(x=car1['horsepower'],\n                  y=car1['city-mpg'],\n                  text=car1['make'],\n                  mode='markers',\n                  marker=dict(size=0.1*car1['engine-size']))]\n\nlayout =go.Layout(title='Bubble Chart Mileage Vs Power-Bubble = Engine Size',\n                 xaxis=dict(title='Horse Power'),\n                 yaxis=dict(title='City Milage'),\n                 hovermode='closest')\nfig=go.Figure(data=data,layout=layout)\npyo.iplot(fig)","30aadd34":"\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import svm\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split # for spliting the data into training and test set\nfrom sklearn import metrics # for validating the accuracy of the model","b2d2a6a1":"car.columns","74685653":"\nX=car.iloc[:,[11,13,16,21]].values\ny=car.iloc[:,-1].values\n#X","63cc2624":"from sklearn.preprocessing import StandardScaler \nscaler=StandardScaler()\nX_scaled=scaler.fit_transform(X)","24225ee1":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.1,random_state= 10)\n\nprint('Training Set:',len(X_train))\nprint('Test Set:',len(X_test))\nprint('Training labels:',len(y_train))\nprint('Test labels:',len(y_test))\n","d46ce00b":"from sklearn.linear_model import LinearRegression\nlr = LinearRegression()\nlr.fit(X_train,y_train)\n#prediction1 = lr.predict(X_test)\n#prediction1\n\n#print('Accuracy for Linear Regression is ',metrics.accuracy_score(prediction1,y_test))\n","82638ed5":"from sklearn import metrics\nfrom sklearn.metrics import r2_score, mean_absolute_error\n'''Get Predictions & Print Metrics'''\npredicts = lr.predict(X_test)\nprint(\"\"\"\n        Mean Squared Error: {}\n        R2 Score: {}\n        Mean Absolute Error: {}\n     \"\"\".format(\n        np.sqrt(metrics.mean_squared_error(y_test, predicts)),\n        r2_score(y_test,predicts),\n        mean_absolute_error(y_test,predicts)\n        ))","3cb2b138":"from sklearn.metrics import mean_squared_error\nimport math\nrmse = math.sqrt(mean_squared_error(y_test,predicts))\nprint('RMSE of the model:',rmse)","f599768b":"r2_train = lr.score(X_train,y_train)\nr2_test = lr.score(X_test,y_test)\nprint('R Squared Error for Train set:',r2_train)\nprint('R Squared Error for Test set:',r2_test)\n","d0fd9d40":"error = pd.DataFrame({\n        'Actual Values': np.array(y_test).flatten(),\n        'Predicted Values': predicts.flatten()}).head(20)\n\nerror.head(5)\n'''Plotly Visualizations'''\nimport plotly as plotly                # Interactive Graphing Library for Python\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.offline import init_notebook_mode, iplot, plot\ninit_notebook_mode(connected=True)\n\n\ntitle=['Pred vs Actual']\nfig = go.Figure(data=[\n    go.Bar(name='Predicted', x=error.index, y=error['Predicted Values']),\n    go.Bar(name='Actual', x=error.index, y=error['Actual Values'])\n])\n\nfig.update_layout(barmode='group')\nfig.show()\n","308a9bea":"## Fuel Type ","3e6d602e":"### Car Price Based on Drive ","7a4b93fa":"1.DHC (Direct overhead cam) tyoe of engines are more in the data.\n\n2.Most cars sold have 4 doors\n\n3.Petrol(Gas) cars are more popular in America\n\n4.Sedan Cars are most popular in America","9abedfdf":"1.Vehicle with high price have low mileage.This because high priced vehicles go into luxary segment which are meant for high performance and running cost is not very important in this segment.\n\n2.As the engine power(horse power) increases the price of the vehicle increases.More horse power also means bigger engine size\n\n3.As the engine size increases the price of the vehicle increases.Weight of the engine increases with the increase in engine size.\n\n4.High curb weight increases price of the vehicle and decreases the mileage of the vehicle.\n\n5.Width has very good positive correlation to the price of the vehicle.","66b5da8b":"### Which Make of Car is More?","90154cf7":"### Cars of different make in the data set","35f7c1f0":"We can see that the range of power output from twelve cylinder engine is very high.It seems more the engines with higher number of cylinders can give a bigger range of power output","1d3010f5":"We can see that 90% of the cars in the Data Set are Petrol.US is a Gasoline market unlike Europe and India which have more Share of Diesel Cars.","55f1c438":"It seems more Japanese cars are sold in the US.As expected Toyota sold more cars in US.In the 70's due to oil price rise Americans switched to small cars.Japanese car makers were good at making high quality small cars.This is the reason we have more cars been sold from Toyota,Mazda and Nissan.","fd938583":"Using the info command we can see that in many place data is represent by symbol ?.We have to replace ? with the mean value of the columns.We have to first prepare the data by doing cleaning on the data set.","e5e9a928":"### Price Based on type of Vehicle ","be9fee03":"## Fuel Type","381e65a7":"### Feature Scaling ","25a7fba4":"### Cars by Body Type","f868bc4e":"### To can refer to my other notebooks from https:\/\/www.kaggle.com\/binuthomasphilip\/code","14a2e3d2":"**1.Curb weight:** Is the total weight of the vehicle without the weight of the passenger.It includes weight of coolants,oil and fuel.Defination of curb weight may vary based on the standard adopted by a country.In this data set the curb weight of most cars is in the range 2000-3100 lbs.\n\n**2.Engine Size:** It is the amount of air that can be sucked in by the engine.Generally it is measured in litres.For example an average car in India would have an engine capacity in the rane of 1-1.5 liter.\n\n**3.Highway-mpg:** It is the kilometer or miles that a car can travel with one liter of fuel on the highway.In this data set it seems to me that it is the amount of miles the car travels with one gallon of fuel.\n\n**4.Horse Power:** It is the measure of the power of the engine.One horse power is equivalent of the power of one horse.So 100 hp engine woulf be equivalent to the power of 100 horses.Now a days engine power is measure in Kilowatt which is the unit of power in SI System.\n\n**5.Peak rpm:** RPM (Reolutions per minute) is the measure of the speed of roation of Engine per minute.The peak rpm of the vehicles are generally in the range 5000-6500 rpm.\n\n**6.Price:** In US today the median price of the vehicle is around 35000$.This is a old data so it shows very low median car price.","3e6c0f63":"I have been working in automobile industry for last 12 years.So any data on automotive industry is interesting for me.Automotive industry has been going through disruptions like electric cars,car sharing and autonomous vehicles.In this project I will be exploring the data set and predicting the price of the car.This project is work in process and I will be updating the project in coming days.Please go through below blog link to read my views on future of Automotive industry. Electric cars http:\/\/btplife.blogspot.com\/2017\/05\/electric-car-disruption.html\n\nIn this Notebook we will be covering following topics\n\n1.Data Preprocessing\n\n2.Handling Missing Values\n\n3.Exploratory Data Analysis\n\n4.Building Machine Learning Model\n\n5.Model Evaluation\n\n6.Conclusion \n\nTo can refer to my other notebooks from https:\/\/www.kaggle.com\/binuthomasphilip\/code","1de24c32":"### Cleaning Price,Horse Power,Bore,Stroke and Peak RPM","18fef5e0":"### Matrix of Features","db16fa8b":"### Data info ","090f74b8":"# 2.Handling Missing Values","e789fe87":"We can see than in some places the value for num-of-doors data is marked as ?.We fill this with appropriate value of num of doors.","e1b3c443":"### R Squared Error","8933fcfc":"### Recently I published a self help book titled Inspiration: Thoughts on Spirituality, Technology, Wealth, Leadership and Motivation. The preview of the book can be read from the Amazon link https:\/\/lnkd.in\/gj7bMQA","a6f23e45":"### Bubble Plot ","26f3f90b":"### Understanding the range of important features","ca4a1307":"### Pair Plot","8223e93f":"List contains American,Japanese and European car brands.","4182a55b":"### Missing Values","e714d15d":"Missing all the ? symbol with the mean value of the columns ","27f86444":"Chevy which is a brand of General motors had the highest milage followed by the Japanese car makers.European car makers except Volkswagen sell Luxary cars.So the Mileage of European car makers are lower.Cars with lower engine capacity generally have higher fuel economy.","adf306d2":"### Predicting the price of Cars","b1d2be8c":"### Getting details of Engine type,Number of doors,type of fuel and body style","0e087122":"RMSE Is high which may be because we have a very small dataset.","642c4b59":"### Fuel Economy by Car Makers","c5d97a09":"### Heat Map","0f114432":"### Test Train Split","82e8c001":"### Importing Python Modules","b18cab4c":"### Root Mean Square Error","09b103c9":"We can see that Mercedes Benz , BMW and Prosche sell the expensive cars in America.\n\nFrom the heat map we can make out that Width,Curb weight,Engine weight,Horse power,Highway-mpg have very high correlation to the price of the car.","6c381b9f":"# 6.Conclusion:\n\n1.In ths Dataset we have data of some car models in USA.We have imported and explored the dataset.Many columns have missing data which we have imputed using various missing value handling techniques.\n\n2.After doing EDA we have got certain insights like -We have more Japanese Cars in the Dataset followed by European -We can see that 90% of the cars in the Data Set are Petrol.US is a Gasoline market unlike Europe and India which have more Share of Diesel Cars Most vehicle have standard Aspiration.The reason is this data set is very old.Now a days most vehicles have turbo system which improves efficiency and power output from an engine.We have many other observations which are mentioned above in the notebook\n\n3.We have used Linear Regression to predict he price of cars.We can further fine tune the model to get better accuracy.","63b6046a":"### Car Price Based on Make","5f9bc2ee":"### Relation between Horse Power and Number of Cylinders","4f8e6bde":"The cars with higher engine size have higher horse power but lower mileage.","cd89020d":"We see from above data that there are no missing values in the dataset","a0988723":"## Linear Regression","f4901211":"### Some important observations from the dataset is \n\nMean Horse Power 104\n\nHighway mileage is 30.75\n\nPrice is 13207.12 Dollars","b46d1f85":"### Importing data","f7ef8098":"From the heat map we can see that the features Width,Curb Weight,Engine Size and Horsepower have the highest correlation with the Price.We can see these four features for our Predicting the price of the car.","d0f14562":"# 4.Building Machine Learning Model","e3b9d786":"## Make ","e317ecbe":"### Cleaning num-of-doors","1e17c9a6":"### Getting the basic stats of the data","c4be1027":"### Cleaning the Number of Cylinders","1eb41fc9":"So we have got the price of the vehicles based on the type.Hardtop and convertible vehicles are more expensive in the dataset.","b3cfc63c":"# 1.Data Preprocessing","1fe2192c":"### Replacing ? Symbol with Mean of the Column","a74470fe":"### Mean Square Error,R Squared and Mean Absolute Error ","6413d6e8":"### Car Body Type Based on Manufacturer","704495a2":"# 5.Model Evaluation","7f552f60":"From the adjusted R square vale for the test set we can say that our model is overfitting on train set.","d94d5888":"In case of number of cylinders we have replaced the text values with numerical values.","0aaef93e":"### Summary of Dataset","6675f6b3":"# 3.Exploratory Data Analysis","23102c3f":"From the above plot  we can see that in most cases the difference in actual and predicted prices is quite low.There are some exemptions that s driving the overall accuracy of the model down.","bafdcfa8":"In case of sedan cars the value of num-of-doors is missing in two places.We can see in most sedan cars the number of doors is 4.We can replace the missing values of num-of-doors with value 4","9ff9c290":"We have more Japanese Cars in the Dataset followed by European.Toyota,Nissan,Mazda and Honda are all Japanese car makers.This is because after the oil crisis in late 1970s US customers prefered smaller and more fuel efficient cars made by the japanese car makers.","79eca01b":"### Actual Vs Predicted Price","f93235f3":"We have considered Width,Curb Weight,Engine Size and Horsepower for car Price prediction.","1a480235":"Rear wheel drive are more expensive with a median price of $17000.Generally four wheel drive are more expensive.This is bit surprising."}}