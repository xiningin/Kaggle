{"cell_type":{"6f697958":"code","5c8a3236":"code","55efd720":"code","88c381d4":"code","5537f863":"code","808e35cb":"code","a1ed2cc3":"code","698dbddd":"code","914f9fc6":"code","ab1cc5d7":"code","d5151b07":"code","984d292f":"code","a801c270":"code","1c603675":"code","1ecb97fd":"code","6746951d":"code","79dedac4":"code","a78cbe2e":"code","e348e1ca":"code","3d1bb362":"code","6b4a3ddc":"code","5b9b63d5":"code","d82b0e43":"code","6d293e24":"code","eab84d72":"code","912bf034":"code","2c3dee5e":"code","20219d41":"code","27d8d777":"code","48d04443":"code","90a07e6a":"code","ca7ae255":"code","74b6f373":"code","95659d9c":"code","fa1caf7c":"code","1889b20c":"code","bec2ffa7":"code","a5b71fe4":"code","6b5830b9":"code","c70e335f":"code","cff00287":"code","4f856b69":"code","e059447b":"code","42aa623e":"code","323fb8a8":"code","65ccd124":"code","4ecc60be":"code","a5864fc0":"code","5b4a44bf":"code","1c43b08e":"code","f3d7cc86":"code","9a855560":"code","27bd1e46":"code","accb7a38":"code","2aa1f71b":"code","c3ae0763":"code","849e281a":"code","ffaa7192":"code","abfbd133":"code","e2f916c5":"markdown","0d40bcf5":"markdown","d4e16905":"markdown","1cc1aae5":"markdown","0a89b769":"markdown","03237356":"markdown","eb755f03":"markdown","809fea96":"markdown","8b8363a3":"markdown","b1882665":"markdown","21df8703":"markdown","3dd068b3":"markdown","45eb87bf":"markdown","4107b55e":"markdown","c7bac2e3":"markdown","27f9937b":"markdown","64de214d":"markdown","e8007cd1":"markdown","e387809b":"markdown","17aa5d58":"markdown","094410ff":"markdown","548a9d1d":"markdown","fb037e5c":"markdown","1861b2e6":"markdown","5cd118b1":"markdown","4237a8d5":"markdown","c6312a77":"markdown","eb2680dc":"markdown","5db589a1":"markdown","f615cd93":"markdown","3bb57fb5":"markdown","6672233a":"markdown","2d3f1e1f":"markdown","63780a6b":"markdown","aab10d65":"markdown","6286d951":"markdown","5b4829e1":"markdown","6e537495":"markdown","9f588ed7":"markdown","a9d0432b":"markdown","c7d015a2":"markdown","d248d431":"markdown","2a15057c":"markdown","581e98c9":"markdown"},"source":{"6f697958":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nprint('numpy version : ',np.__version__)\nprint('pandas version : ',pd.__version__)\nprint('seaborn version : ',sns.__version__)","5c8a3236":"data_train = pd.read_csv('\/kaggle\/input\/sa-customer-segmentation\/flight_train.csv')\nprint(data_train.shape)\ndata_train.head(2)","55efd720":"data_test = pd.read_csv('\/kaggle\/input\/sa-customer-segmentation\/flight_test.csv')\nprint(data_test.shape)\ndata_test.head(2)","88c381d4":"data = pd.concat([data_train,data_test])\nprint(data.shape)\ndata.head()","5537f863":"print('Total Row',data.shape[0],'Total Feature ',data.shape[1])","808e35cb":"data[data.duplicated()==True]","a1ed2cc3":"data.dtypes","698dbddd":"columns = [x for x in data.columns]\npercent=[]\nfor kolom in columns:\n    percent.append(round(data[kolom].isnull().sum()\/data[kolom].shape[0]*100, 2))\n    \nexplore = data.describe(percentiles = [], include = 'all').T \nexplore['missing'] = len(data) - explore['count'] \nexplore['%'] = percent\nexplore = explore[['missing','%','min','max']]","914f9fc6":"explore = explore.replace(np.nan, '-', regex=True)\nexplore","ab1cc5d7":"data = data[data['SUM_YR_1'].notnull()]\ndata = data[data['SUM_YR_2'].notnull()]","d5151b07":"data['LAST_TO_END'].describe()","984d292f":"data['LAST_TO_END'].isnull().value_counts()","a801c270":"f, (ax_box, ax_hist) = plt.subplots(2, sharex=True, gridspec_kw= {\"height_ratios\": (0.2, 1)},figsize=(10,6))\nsns.boxplot(data['LAST_TO_END'], ax=ax_box)\nsns.distplot(data['LAST_TO_END'], ax=ax_hist)\nplt.show()","1c603675":"data['FLIGHT_COUNT'].describe()","1ecb97fd":"data['FLIGHT_COUNT'].isnull().value_counts()","6746951d":"f, (ax_box, ax_hist) = plt.subplots(2, sharex=True, gridspec_kw= {\"height_ratios\": (0.2, 1)},figsize=(10,6))\nsns.boxplot(data['FLIGHT_COUNT'], ax=ax_box)\nsns.distplot(data['FLIGHT_COUNT'], ax=ax_hist)\nplt.show()","79dedac4":"data['SEG_KM_SUM'].describe()","a78cbe2e":"data['SEG_KM_SUM'].isnull().value_counts()","e348e1ca":"f, (ax_box, ax_hist) = plt.subplots(2, sharex=True, gridspec_kw= {\"height_ratios\": (0.2, 1)},figsize=(10,6))\nsns.boxplot(data['SEG_KM_SUM'], ax=ax_box)\nsns.distplot(data['SEG_KM_SUM'], ax=ax_hist)\nplt.show()","3d1bb362":"data[['FFP_DATE','LOAD_TIME']].dtypes","6b4a3ddc":"#change data type object to datetime\ndata['FFP_DATE']=pd.to_datetime(data['FFP_DATE'])\ndata['LOAD_TIME']=pd.to_datetime(data['LOAD_TIME'])","5b9b63d5":"from datetime import datetime\ndef interval_time(dd):\n    return dd.days\n\ndata['LENGTH']=np.abs(data['LOAD_TIME']-data['FFP_DATE'])\ndata['LENGTH']=data['LENGTH'].apply(interval_time)","d82b0e43":"f, (ax_box, ax_hist) = plt.subplots(2, sharex=True, gridspec_kw= {\"height_ratios\": (0.2, 1)},figsize=(10,6))\nsns.boxplot(data['LENGTH'], ax=ax_box)\nsns.distplot(data['LENGTH'], ax=ax_hist)\nplt.show()","6d293e24":"data['avg_discount'].describe()","eab84d72":"f, (ax_box, ax_hist) = plt.subplots(2, sharex=True, gridspec_kw= {\"height_ratios\": (0.2, 1)},figsize=(10,6))\nsns.boxplot(data['avg_discount'], ax=ax_box)\nsns.distplot(data['avg_discount'], ax=ax_hist)\nplt.show()","912bf034":"index1=data['SUM_YR_1'] !=0\nindex2=data['SUM_YR_2'] !=0\nindex3=(data['SEG_KM_SUM'] ==0)*(data['avg_discount']==0)","2c3dee5e":"data=data[index1|index2|index3]","20219d41":"print(data.shape)","27d8d777":"data.info()","48d04443":"data_=data.copy()","90a07e6a":"df_lrfmc=data[['MEMBER_NO','LENGTH','LAST_TO_END','FLIGHT_COUNT','SEG_KM_SUM','avg_discount']]\ndf_lrfmc.columns = ['MEMBER_NO','L','R','F','M','C']\ndf_lrfmc_drop=df_lrfmc[['L','R','F','M','C']]","ca7ae255":"df_lrfmc_drop.head()","74b6f373":"df_lrfmc_drop.describe()","95659d9c":"LRFM=['L','R','F','M','C']\ndef dist_list(lst):\n    plt.figure(figsize=[len(lst)*5,4])\n    i = 1\n    for col in lst:\n        ax = plt.subplot(1,len(lst),i)\n        sns.boxplot(df_lrfmc_drop[col])\n        plt.title(col)\n        i = i+1     \ndist_list(LRFM)","fa1caf7c":"rfm_log=df_lrfmc_drop.copy()","1889b20c":"cols=['R','F','M','C']\nfor col in cols:\n    high_cut = rfm_log[col].quantile(q=0.99)\n    low_cut=rfm_log[col].quantile(q=0.01)\n    rfm_log.loc[rfm_log[col]>high_cut,col]=high_cut\n    rfm_log.loc[rfm_log[col]<low_cut,col]=low_cut","bec2ffa7":"LRFM=['L','R','F','M','C']\ndef dist_list(lst):\n    plt.figure(figsize=[len(lst)*5,4])\n    i = 1\n    for col in lst:\n        ax = plt.subplot(1,len(lst),i)\n        sns.boxplot(rfm_log[col])\n        plt.title(col)\n        i = i+1\n        \ndist_list(LRFM)","a5b71fe4":"rfm_log.shape","6b5830b9":"from sklearn.preprocessing import MinMaxScaler","c70e335f":"df_std=rfm_log\nscale = MinMaxScaler()\nkolom_all = [x for x in df_std.columns]\nfor kolom in kolom_all:\n  df_std[kolom] = scale.fit_transform(np.array(df_std[kolom]).reshape(-1,1))","cff00287":"df_std.head()","4f856b69":"from sklearn.cluster import KMeans\nks = range(1,11)\ninertias=[]\nfor k in ks :\n    kc = KMeans(n_clusters=k,random_state=142)\n    kc.fit(df_std)\n    cluster = kc.fit_predict(df_std)\n    inertias.append(kc.inertia_)\n# Plot ks vs inertias\nf, ax = plt.subplots(figsize=(10, 6))\nplt.plot(ks, inertias, '-o')\nplt.xlabel('Number of clusters, k')\nplt.ylabel('Inertia')\nplt.xticks(ks)\nplt.style.use('ggplot')\nplt.title('What is the Best Number for KMeans ?')\nplt.show()","e059447b":"from sklearn.metrics import silhouette_score","42aa623e":"for n_clusters in range(2,6):\n    clusterer = KMeans(n_clusters=n_clusters,init='k-means++',max_iter=300, random_state=142).fit(df_std)\n    preds = clusterer.predict(df_std)\n\n    # TODO: Calculate the mean silhouette coefficient for the number of clusters chosen\n    score = silhouette_score(df_std, preds, metric='mahalanobis')\n    print (\"For n_clusters = {}. The average silhouette_score is : {}\".format(n_clusters, score))","323fb8a8":"kc = KMeans(init='k-means++',n_clusters= 4, random_state=142)\nkc.fit(df_std)\ncluster_labels = kc.labels_\n\ndata_c = df_std.assign(K_Cluster = cluster_labels)\ndata_label=df_lrfmc.assign(K_Cluster = cluster_labels)","65ccd124":"data_f=data_c.groupby('K_Cluster').mean()\ndata_f['count']=pd.value_counts(data_c['K_Cluster'])","4ecc60be":"data_f","a5864fc0":"sns.pairplot(data=data_c, hue='K_Cluster')","5b4a44bf":"LRFM=['L','R','F','M','C']\ndef dist_list(lst):\n    plt.figure(figsize=[len(lst)*5,2])\n    i = 1\n    cl = ['bgrcmykw'[c] for c in range(len('bgrcmykw'))]\n    for col in lst:\n        ax = plt.subplot(1,len(lst),i)\n        g = data_c.groupby('K_Cluster')\n        x = g[col].mean().index\n        y = g[col].mean().values\n        ax.barh(x,y,color=cl[i-1])\n        plt.title(col)\n        i = i+1\n        \ndist_list(LRFM)","1c43b08e":"from sklearn.mixture import GaussianMixture\n\ngmm = GaussianMixture(n_components=4, random_state=142, covariance_type='full').fit(df_std)\nprediction_gmm = gmm.predict(df_std)\nprobs = gmm.predict_proba(df_std)\ndata_d=df_std.assign(GMM_Cluster = prediction_gmm)\ndata_labelg=df_lrfmc.assign(GMM_Cluster = prediction_gmm)","f3d7cc86":"data_g=data_d.groupby('GMM_Cluster').mean()\ndata_g['count']=pd.value_counts(data_d['GMM_Cluster'])","9a855560":"data_g","27bd1e46":"LRFM=['L','R','F','M','C']\ndef dist_list(lst):\n    plt.figure(figsize=[len(lst)*5,2])\n    i = 1\n    cl = ['bgrcmykw'[c] for c in range(len('bgrcmykw'))]\n    for col in lst:\n        ax = plt.subplot(1,len(lst),i)\n        g = data_d.groupby('GMM_Cluster')\n        x = g[col].mean().index\n        y = g[col].mean().values\n        ax.barh(x,y,color=cl[i-1])\n        plt.title(col)\n        i = i+1\n        \ndist_list(LRFM)","accb7a38":"x=data_c.drop('K_Cluster', axis=1)","2aa1f71b":"#kmeans\nfrom sklearn.cluster import KMeans\nfrom sklearn.decomposition import PCA\nn_clusters = 4\nsklearn_pca = PCA(n_components = 2)\nY_sklearn = sklearn_pca.fit_transform(df_std)\nkmeans = KMeans(n_clusters= n_clusters, max_iter=600,random_state=150, algorithm = 'auto')\n\n%time fitted = kmeans.fit(Y_sklearn)\nprediction = kmeans.predict(Y_sklearn)\ndf_pred=data.assign(K_Cluster = prediction)\ntargets = [0, 1, 2,3]\nplt.figure(figsize = (10,8))\nplt.scatter(Y_sklearn[:, 0], Y_sklearn[:, 1],c=prediction ,s=50, cmap='viridis')\ncenters2 = fitted.cluster_centers_\nplt.scatter(centers2[:, 0], centers2[:, 1],c='red', s=300, alpha=0.6);","c3ae0763":"data_labeling=data.assign(K_Cluster = cluster_labels)","849e281a":"cluster = [] #membuat list kosong\nfor i, k in data_labeling.iterrows(): #iterasi setiap row\n    if k['K_Cluster'] == 0:\n        cluster_name = 'Potential'\n    elif k['K_Cluster'] == 3:\n        cluster_name = 'Loyal'\n    elif k['K_Cluster'] == 1:\n        cluster_name = 'Important'\n    else:\n        cluster_name = 'Low Value'\n    cluster.append(cluster_name)\n    \ndata_labeling['cluster'] = cluster #membuat kolom dari list\ndata_label['cluster'] = cluster #membuat kolom dari list","ffaa7192":"df_me=data_label.groupby(data_label['cluster']).mean()\ndf_me['count']=pd.value_counts(data_label['cluster'])\ndf_me","abfbd133":"LRFM=['L','R','F','M','C']\ndef dist_list(lst):\n    plt.figure(figsize=[len(lst)*5,2])\n    i = 1\n    cl = ['bgrcmykw'[c] for c in range(len('bgrcmykw'))]\n    for col in lst:\n        ax = plt.subplot(1,len(lst),i)\n        g = data_c.groupby('K_Cluster')\n        x = g[col].mean().index\n        y = g[col].mean().values\n        ax.barh(x,y,color=cl[i-1])\n        plt.title(col)\n        i = i+1\n        \ndist_list(LRFM)","e2f916c5":"0 = Loyal <br>\n1 = General & Low Value<br>\n2 = Important<br>\n3 = Potential<br>","0d40bcf5":"<b>K-Means Model<\/b>","d4e16905":"## Data Preproccesing","1cc1aae5":"#  Data Understanding","0a89b769":"--------------------------------------","03237356":"<b>Data Type Check<\/b>","eb755f03":"<b>Data Explore<\/b>","809fea96":"## - K MEANS","8b8363a3":"### Monetary ( SEG_KM_SUM )","b1882665":"# Data Preparation","21df8703":"<b>KMEANS<\/b>","3dd068b3":"Best Cluster = 4","45eb87bf":"menggunakan KMeans","4107b55e":"<b>Scaling<\/b>","c7bac2e3":"### Recommendation","27f9937b":"## - Outlier Treatment","64de214d":"# Modeling","e8007cd1":"<b>Elbow Method to get best number for K Means<\/b>","e387809b":"<b>Loyal<\/b> ( L) Long enough, (R) Very New, (F) High frequency, (M) Total long trip, (C) Average discount very high","17aa5d58":"<b>PCA<\/b>","094410ff":"### - GMM (Gaussian Mixture Models)","548a9d1d":"\n<li>MEMBER_NO-b : Member ID<br>\n<li>FFP_DATE : Frequent Flyer Program Join Date<br>\n<li>FIRST_FLIGHT_DATE : First flight <br>\n<li>GENDER : Gender <br>\n<li>FFP_TIER : Tier of Frequent Flyer Program<br>\n<li>WORK_CITY : Hometown<br>\n<li>WORK_PROVINCE : province of origin<br>\n<li>WORK_COUNTRY : country of origin<br>\n<li>AGE : Age <br>\n<li>LOAD_TIME : ( observation window wnd time ) date data was taken <br>\n<li>FLIGHT_COUNT : Number of flights Customer<br>\n<li>BP_SUM : Itinerary<br>\n<li>SUM_YR_1 : fare revenue 1 (revenue)<br>\n<li>SUM_YR_2 : votes price income <br>\n<li>SEG_KM_SUM : total distance(km) of flights that have been carried<br>\n<li>LAST_FLIGHT_DATE : date of last flight<br>\n<li>LAST_TO_END : Time from the last boarding time to the end of the observation window<br>\n<li>AVG_INTERVAL : average time interval <br>\n<li>MAX_INTERVAL : maximum time interval <br>\n<li>EXCHANGE_COUNT : Number of exchanges<br>\n<li>avg_discount : average discount obtained<br>\n<li>Points_Sum : total points earned by members<br>\n<li>Point_NotFlight : points not used by members <br>\n<br>\nReferences :<br>\n<li>FFP_DATE : FFP-> https:\/\/javamilk.com\/2014\/05\/26\/menkenal-frequent-flyer-program\/\n<li>BP_SUM ->","fb037e5c":"There are too many attributes in the data. To assess customers, the most widely used RFM model <b>(R)<\/b> current consumption time interval, <b>(F)<\/b> consumption frequency, <b>(M)<\/b> total consumption identified.<br>\nJudging from the existing features, based on the variety of airline ticket prices, different customers with the same amount of spending on the airline can mean different values. For example, a passenger who purchases a low-class ticket with a longer route is naturally more valuable to the airline than a passenger who buys a high-class ticket with a short route. Therefore, we replace the consumption amount (M) with the flight mileage M-(KM) and the discount coefficient (C), and add the airline relationship duration feature (how long you have been on the airline) LENGTH, which represents the time to join the airline program. . Therefore, we modified the RFM model to be the LRFMC model.","1861b2e6":"### Recency ( LAST_TO_END )","5cd118b1":"<b>Important<\/b> ( L) very old, (R) fairly new, (F) moderate frequency, (M) total trips are moderate, (C) average discount is quite high","4237a8d5":"# Evaluation (Insight)","c6312a77":"### Frequency ( FlIGHT_COUNT )","eb2680dc":"<b>General & Low Value<\/b> ( L) not too long ago, (R) Very long, (F) low frequency, (M) Total trips are close, (C) Average discount is quite high","5db589a1":"0 = Loyal <br>\n1 = General & Low Value<br>\n2 = Important<br>\n3 = Potential<br>","f615cd93":"dari grafik distibusi diatas bisa disimpulkan data banyak outlier hingga distrubusi data nya negatif atau skewnes","3bb57fb5":"Best Cluster = 4","6672233a":"EDA akan berfokus pada fitur RFM","2d3f1e1f":"<b>KMEANS<\/b>","63780a6b":"<b>Silhoutte to get best number for K Means<\/b>","aab10d65":"K-means Clustering is one of the simplest and most popular \u201cunsupervised machine learning algorithms\u201d. The purpose of this algorithm is to find groups in the data, with the number of groups represented by the variable K. Variable K itself is the number of clusters we want","6286d951":"the check missing value found abnormal data, namely in the data in SUM_YR_1 & SUM_YR_2 many were not filled in, which means there is a possibility that the data was not entered correctly, to reduce the risk of bad data and because this data is large, I decided to delete SUM_YR_1 & SUM_YR_2 which has a value the empty one","5b4829e1":"Gaussian Mixture Model (GMM) adalah sebuah\ntipe density model yang terdiri dari komponen fungsifungsi Gaussian [2]. Komponen fungsi ini terdiri dari\nweight yang berbeda untuk menghasilkan multi-model\ndensity. Pada penelitian ini GMM digunakan untuk\nmemodelkan warna-warna background dari tiap\npiksel.\nTiap piksel memiliki GMM-nya sendiri dan data\nyang diolah adalah warna piksel yang didapat dari\ninput. Model-model GMM terbentuk dari data warna\npiksel berdasarkan waktu. Model yang terbentuk\ndibagi menjadi 2 bagian, model background dan\nmodel non-background. Model background adalah\nmodel yang mencerminkan background.","6e537495":"<B> - Data Description<\/b>","9f588ed7":"## EDA","a9d0432b":"<b>Potential<\/b> ( L) very new, (R) fairly new, (F) moderate frequency, (M) total trips moderate, (C) Average discount very high","c7d015a2":"### Length( FFP_DATE - LOAD_TIME )","d248d431":"<b>Description Model<\/b>","2a15057c":"<p><b>L ( Length Relation )<\/b><br>The length of time the customer has been in contact with the airline company, this value can be obtained from LOAD_TIME ( the time the data was last saved) - ( deducted) FFP_DATE ( the customer is registered in the airline program it<\/p>\n<p><b>R ( Recency )<\/b><br>\nthe latest or last time the customer used the airline<\/p>\n<p><b>F ( Frequency )<\/b><br>\nthe level of frequency\/how many times the customer has used the airline<\/p>\n<p><b>M ( Monetary Value )<\/b><br>\ntotal distance traveled\n<p><b>C ( Coefficient Value )<\/b><br>\nThe coefficient of the average discount that customers get","581e98c9":"### Coeficient ( Avg_Discount )"}}