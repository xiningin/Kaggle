{"cell_type":{"fa5b3646":"code","5b36f1fc":"code","6ead0a72":"code","746b0c5c":"code","f92b9ebf":"code","1478d80d":"code","3a9062a2":"code","70fb33a8":"code","140b90db":"code","c97a955b":"code","e678d411":"code","22cf1982":"code","9f2a6020":"code","c5c5b8b2":"code","203cfaaa":"code","e498ed21":"code","c31eec85":"code","7cead019":"code","0a3f7b08":"code","fabcd770":"code","2b52eecd":"code","10f0c3e7":"code","dea58c37":"code","ca1ce3bc":"code","7d12ed7b":"code","581ca56c":"code","d824712d":"code","e819dc44":"code","48f03730":"code","75650f7d":"code","96a6015c":"code","aad4ce5b":"code","22366058":"code","a309b60b":"code","4312f5fb":"code","9d6d0e77":"code","760abb63":"code","edd19b37":"code","119f8af5":"code","e8eb61cb":"code","067eb562":"code","b4c224aa":"code","709a0191":"code","4976ecf9":"code","f6b06537":"code","7e1d8ae0":"code","354814ef":"code","92cdbf46":"code","6ffee1ad":"code","caf56f57":"code","45f7a211":"code","9c228a62":"code","2977ec89":"code","c97031c5":"code","45b66d2e":"code","2dd763d1":"code","a7c2b8f2":"code","fc06d98e":"code","1dcdcb2f":"code","b68b8dcc":"code","cfc5ee95":"code","1944bc67":"code","8fa9b63d":"code","ddc78913":"code","d8e97095":"code","92a488c2":"code","33333773":"code","d246eeb3":"code","253d0b45":"code","262b8182":"code","4c52f339":"code","d8492807":"code","9fe6c881":"code","67ff5638":"code","2641f60c":"code","7dd3d864":"code","caff1cb0":"code","a730b098":"code","3c5c22a2":"markdown"},"source":{"fa5b3646":"import pandas as pd\nimport numpy as np\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","5b36f1fc":"train = pd.read_csv('\/kaggle\/input\/bluebook-for-bulldozers\/trainandvalid\/TrainAndValid.csv')\ntest = pd.read_csv('\/kaggle\/input\/bluebook-for-bulldozers\/Test.csv')","6ead0a72":"train.head()","746b0c5c":"test.info()","f92b9ebf":"train.info()","1478d80d":"train.describe(include='all')","3a9062a2":"train['SalePrice'] = np.log(train.SalePrice)","70fb33a8":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error as mse\nfrom sklearn.ensemble import RandomForestRegressor","140b90db":"def model_score(model, X_trn, y_trn, X_val, y_val):\n    '''\n    Returns the RMSLE Score for the given model\n    '''\n    model.fit(X_trn, y_trn)\n    pred =model.predict(X_val)\n    return np.sqrt(mse(pred, y_val))","c97a955b":"model= RandomForestRegressor()\nfeature = ['YearMade']","e678d411":"X_zero = train[feature]\ny_zero = train.SalePrice","22cf1982":"X_trn, X_val, y_trn, y_val = train_test_split(X_zero, y_zero, test_size=0.3, random_state=0)","9f2a6020":"model_score(model, X_trn, y_trn, X_val, y_val)","c5c5b8b2":"from sklearn.linear_model import LinearRegression\nfrom xgboost import XGBRegressor","203cfaaa":"model1 = LinearRegression()\nmodel_score(model1, X_trn, y_trn, X_val, y_val)","e498ed21":"model2 = XGBRegressor()\nmodel_score(model2, X_trn, y_trn, X_val, y_val)","c31eec85":"#for i in range(50, 500, 50):\n#    model3 = XGBRegressor(n_estimators=200)\n#    scr = model_score(model3, X_trn, y_trn, X_val, y_val)\n#    print(i, '\\t', scr)","7cead019":"train.datasource.unique()","0a3f7b08":"features = ['YearMade', 'datasource']","fabcd770":"X_one = train[features]\ny_one = train.SalePrice","2b52eecd":"X_trn, X_val, y_trn, y_val = train_test_split(X_one, y_one, test_size=0.3, random_state=0)","10f0c3e7":"model_score(model, X_trn, y_trn, X_val, y_val)","dea58c37":"features = ['YearMade', 'datasource', 'state']","ca1ce3bc":"X_two = train[features]\ny_two = train.SalePrice","7d12ed7b":"from sklearn.preprocessing import LabelEncoder","581ca56c":"enc = LabelEncoder()\nX_two['state']=enc.fit_transform(X_two.state)","d824712d":"X_trn, X_val, y_trn, y_val = train_test_split(X_two, y_two, test_size=0.2, random_state=0)","e819dc44":"model_score(model, X_trn, y_trn, X_val, y_val)","48f03730":"train['age']= train.saledate.str[-9:-5].astype(int) - train.YearMade\ntest['age'] = test.saledate.str[-9:-5].astype(int) - test.YearMade","75650f7d":"features = ['YearMade', 'datasource', 'state', 'age']\nX_three = train[features]\ny_three = train.SalePrice","96a6015c":"X_three['state']= enc.fit_transform(X_three.state)","aad4ce5b":"X_trn, X_val, y_trn, y_val = train_test_split(X_three, y_three, test_size=0.2, random_state=0)","22366058":"model_score(model, X_trn, y_trn, X_val, y_val)","a309b60b":"features = ['YearMade', 'datasource', 'state', 'age', 'fiBaseModel']\nX_four = train[features]\ny_four = train.SalePrice","4312f5fb":"X_four['state']= enc.fit_transform(X_four.state)\nX_four['fiBaseModel']= enc.fit_transform(X_four.fiBaseModel)","9d6d0e77":"X_trn, X_val, y_trn, y_val = train_test_split(X_four, y_four, test_size=0.2, random_state=0)","760abb63":"model_score(model, X_trn, y_trn, X_val, y_val)","edd19b37":"model.score(X_val, y_val)","119f8af5":"features = ['YearMade', 'datasource', 'state', 'age', 'fiBaseModel', 'fiProductClassDesc' ]\nX_five = train[features]\ny_five = train.SalePrice","e8eb61cb":"X_five['state']= enc.fit_transform(X_five.state)\nX_five['fiBaseModel']= enc.fit_transform(X_five.fiBaseModel)\nX_five['fiProductClassDesc']= enc.fit_transform(X_five.fiProductClassDesc)","067eb562":"X_trn, X_val, y_trn, y_val = train_test_split(X_five, y_five, test_size=0.2, random_state=0)","b4c224aa":"model_score(model, X_trn, y_trn, X_val, y_val)","709a0191":"features = ['YearMade', 'datasource', 'state', 'age', 'fiBaseModel', 'fiProductClassDesc' , 'fiModelDesc']\nX_six = train[features]\ny_six = train.SalePrice","4976ecf9":"X_test = test[features]","f6b06537":"net_state=X_six.state\nnet_state= net_state.append(X_test.state, ignore_index=True)","7e1d8ae0":"net_state","354814ef":"enc_st = LabelEncoder()\nenc_st.fit(net_state)","92cdbf46":"X_six['state']= enc_st.transform(X_six.state)","6ffee1ad":"X_test['state'] = enc_st.transform(X_test.state)","caf56f57":"net_pcd = X_six.fiProductClassDesc\nnet_pcd = net_pcd.append(X_test.fiProductClassDesc, ignore_index=True)\nnet_pcd","45f7a211":"enc_pcd = LabelEncoder()\nenc_pcd.fit(net_pcd)","9c228a62":"X_six.fiProductClassDesc = enc_pcd.transform(X_six.fiProductClassDesc)","2977ec89":"X_test['fiProductClassDesc'] = enc_pcd.transform(X_test.fiProductClassDesc )","c97031c5":"net_bm = X_six.fiBaseModel\nnet_bm = net_bm.append(X_test.fiBaseModel, ignore_index=True)\nnet_bm","45b66d2e":"enc_bm = LabelEncoder()\nenc_bm.fit(net_bm)","2dd763d1":"X_six.fiBaseModel = enc_bm.transform(X_six.fiBaseModel)","a7c2b8f2":"X_test.fiBaseModel = enc_bm.transform(X_test.fiBaseModel)","fc06d98e":"X_test","1dcdcb2f":"net_md = X_six.fiModelDesc\nnet_md = net_md.append(X_test.fiModelDesc, ignore_index=True)\nnet_md","b68b8dcc":"enc_md = LabelEncoder()\nenc_md.fit(net_md)","cfc5ee95":"X_six['fiModelDesc'] = enc_md.transform(X_six.fiModelDesc)","1944bc67":"X_test['fiModelDesc'] = enc_md.transform(X_test.fiModelDesc)","8fa9b63d":"X_six","ddc78913":"X_trn, X_val, y_trn, y_val = train_test_split(X_six, y_six, test_size=0.2, random_state=0)","d8e97095":"model_score(model, X_trn, y_trn, X_val, y_val)","92a488c2":"model.score(X_val, y_val)","33333773":"#for i in range(10,250, 10):\n#    model = RandomForestRegressor(n_estimators= i)\n#    print(i, '\\t',  model_score(model, X_trn, y_trn, X_val, y_val))","d246eeb3":"model = RandomForestRegressor(n_estimators=110, n_jobs= -1)\nmodel_score(model, X_trn, y_trn, X_val, y_val)","253d0b45":"model.score(X_val, y_val)","262b8182":"X_six.describe()","4c52f339":"model = RandomForestRegressor(max_depth=30, min_samples_split=20, n_estimators=110, n_jobs= -1)\nmodel_score(model, X_trn, y_trn, X_val, y_val)","d8492807":"model.score(X_val, y_val)","9fe6c881":"train.Engine_Horsepower.unique()","67ff5638":"train.fiBaseModel","2641f60c":"train.state.unique()","7dd3d864":"test.state.unique()","caff1cb0":"pred = model.predict(X_test)","a730b098":"output = pd.DataFrame({'Id': test.SalesID,\n                       'SalePrice': np.exp(pred)})\noutput.to_csv('submission.csv', index=False)","3c5c22a2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output."}}