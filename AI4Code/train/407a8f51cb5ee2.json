{"cell_type":{"9553601a":"code","b3b2491f":"code","a5e9ea66":"code","82fdc2ae":"code","5a5870b6":"code","768c4e98":"code","81d7c163":"code","6292da24":"code","7c734176":"code","79921244":"code","3efecd54":"code","bbe39aa8":"code","1cfa84c7":"code","afed9067":"markdown","2bad9a69":"markdown","f50307b0":"markdown","7eb96c74":"markdown","cee375d6":"markdown","2255b6ff":"markdown","c4d48b3a":"markdown","23090a48":"markdown","683e935a":"markdown","cfdb9164":"markdown","6624e9bb":"markdown","8d8dca11":"markdown","efed84dc":"markdown","8a644aff":"markdown","494ca46a":"markdown","e55e2aed":"markdown"},"source":{"9553601a":"# first load libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Conv2D, MaxPooling2D, Flatten, Dropout, BatchNormalization\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.optimizers import RMSprop\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.model_selection import train_test_split","b3b2491f":"# load data\ndf_train = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')","a5e9ea66":"# split our data into features & target\nX_train = df_train.drop('label', axis=1).values\ny_train = df_train['label'].values.reshape(-1,1)\n\nX_test = df_test.values","82fdc2ae":"# rescale variables\nX_train = X_train.astype('float32')\/255.0\nX_test = X_test.astype('float32')\/255.0","5a5870b6":"# check first few images\nplt.figure(figsize=(15,15))\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.imshow(X_train[i].reshape(28,28), cmap='gray')\n    plt.title('Number:' + str(y_train[i][0]))\n    plt.axis('off')","768c4e98":"# reshape features for tensorflow\nX_train = X_train.reshape(-1,28,28,1)\nX_test = X_test.reshape(-1,28,28,1)\n\n# one hot encode for target variable\ny_train = to_categorical(y_train)\ntarget_count = y_train.shape[1]","81d7c163":"# image augmentation \ndatagen = ImageDataGenerator(\n    featurewise_center=False,\n    samplewise_center=False,\n    featurewise_std_normalization=False,\n    samplewise_std_normalization=False,\n    zca_whitening=False,\n    rotation_range=10,\n    zoom_range = 0.1,\n    width_shift_range=0.1,\n    height_shift_range=0.1,\n    horizontal_flip=False,\n    vertical_flip=False)\n\n# fit generator on our train features\ndatagen.fit(X_train)","6292da24":"X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.1, random_state=42)","7c734176":"model = Sequential()\n\nmodel.add(Conv2D(filters=64, kernel_size=(3,3), padding='valid', activation='relu', input_shape=(28, 28, 1)))\nmodel.add(BatchNormalization())\n\nmodel.add(Conv2D(filters=64, kernel_size=(3,3), padding='valid', activation='relu'))\nmodel.add(BatchNormalization())\n\nmodel.add(Conv2D(filters=64, kernel_size=(3,3), padding='valid', activation='relu'))\nmodel.add(BatchNormalization())\n\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\nmodel.add(BatchNormalization())\n\nmodel.add(Conv2D(filters=128, kernel_size=(3,3), padding='valid', activation='relu'))\nmodel.add(BatchNormalization())\n\nmodel.add(Conv2D(filters=128, kernel_size=(3,3), padding='valid', activation='relu'))\nmodel.add(BatchNormalization())\n\nmodel.add(Conv2D(filters=128, kernel_size=(3,3), padding='valid', activation='relu'))\nmodel.add(BatchNormalization())\n\nmodel.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\nmodel.add(BatchNormalization())\n\nmodel.add(Flatten())\n\nmodel.add(Dense(256, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(BatchNormalization())\n\nmodel.add(Dense(target_count, activation='softmax'))\n\n\noptimizer = RMSprop(learning_rate=0.001,rho=0.99)\nmodel.compile(loss='categorical_crossentropy', optimizer=optimizer, metrics=['accuracy'])\n\nreduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.3, verbose=1,patience=2, min_lr=0.00000001)\n\ncallback = EarlyStopping(monitor='loss', patience=5)\nhistory = model.fit(datagen.flow(X_train,y_train, batch_size=64), epochs = 50, validation_data=(X_val, y_val), verbose = 1, callbacks=[reduce_lr, callback])","79921244":"# prepare data for evaluation\ny_val_m = y_val.argmax(axis=1)\ny_val_hat_prob = model.predict(X_val)\ny_val_hat = y_val_hat_prob.argmax(axis=1)\nX_val_inc = X_val[y_val_m != y_val_hat, :, :, :]\ny_val_inc = y_val_m[y_val_m != y_val_hat]\ny_val_hat_inc = y_val_hat[y_val_m != y_val_hat]\ny_val_hat_prob_inc = y_val_hat_prob[y_val_m != y_val_hat]","3efecd54":"plt.figure(figsize=(15,15))\nfor i in range(16):\n    plt.subplot(4,4,i+1)\n    plt.imshow(X_val_inc[i, :, :, :].reshape(28,28), cmap='gray')\n    plt.axis('off')\n    plt.title('Actual: {}; Predicted: {}'.format(y_val_inc[i], y_val_hat_inc[i]))","bbe39aa8":"for i in range(0,10):\n    act = y_val_inc[i]\n    pred = y_val_hat_inc[i]\n    print('Actual: {}; Confidence (act\/pred): \\t{} - {:.0f}%  \\t{} - {:.0f}%'.format(act, act, y_val_hat_prob_inc[i][act]*100, pred, y_val_hat_prob_inc[i][pred]*100))","1cfa84c7":"# predict our test data\ny_test_hat = model.predict(X_test).argmax(axis=1)\n\ndf_submission = pd.read_csv('\/kaggle\/input\/digit-recognizer\/sample_submission.csv')\ndf_submission['Label'] = y_test_hat.astype('int32')\ndf_submission.to_csv('Submission.csv', index=False)\nprint('Submission saved!')","afed9067":"# Submission\nLet's submit our data and hope in results at least 99.6% !","2bad9a69":"# Load libraries and data","f50307b0":"# Image augmentation generator\nTo make our model robust and work well on unseen images, we will include also data augmentation step. This simply slightly modify our images in training process, each time in different random way. Our parameters are rotation in range of 10 degrees, width shift in range of 10%, height shift in range of 10%. Flip does not make sense too much in my opinion, it could i.e. in brain screening.","7eb96c74":"# Extract our features and target","cee375d6":"# Intro\nWe have pretty simple looking task to classify pictures containing number 0-9. As dataset is pretty much clean, you will have no issues to get accuraccy above 95%, but when you want to cross 99.5% accuracy, things get more complicated. What I've learned here, that there is no \"best\" pattern and was more-less playing with composition of layers.","2255b6ff":"## Probabilities of predicted vs actuals value\nJust look if in some cases model had high confidence in different value as well or was just keen on predicted value.","c4d48b3a":"Initialy I've started simple CNN and then was adding and changing layers, but at the end I've added also image augmentation to make model more general. It slightly modify (rotate, flip, ...) images so it works better for unseen data. This notebook is as short as possible ;)","23090a48":"# Model evaluation\nWe could do confusion matrix, but not needed I think. Rather look on numbers those were incorrectly classified also discover for incorrectly classified, what were probabilities for other numbers. This will help us identify if our model is average, good, or excelent.","683e935a":"# Reshape data\nTensorflow require data in specific format (-1, image width, image height, number of channels), in our case it's (-1, 28, 28, 1)","cfdb9164":"# Split data into training & validation set\nThis might not be needed as tensorflow supports validation split, but we are using data image generator as well as want to check few of incorrectly classified images how good was our model","6624e9bb":"## Show incorrectly classified images\nWhat is expecatation? Simply to let human look on images and tell if it was possible to correctly classify them :) You will find some of them are almost impossible to classify to their actual value. Would you do it better than model?","8d8dca11":"# Digit recognizer using CNN, Tensorflow v2 and Keras","efed84dc":"## Augmentation performance\nBased on my testing, augmentation of images did not bring much better performance on data validation dataset (was like 99.5%, but increased accuracy on unseen data from 99.4% to 99.6% that's really great.","8a644aff":"# Data check\nLet's show few images how it looks like in our dataset. Images are in grayscale (color channel dimension is equal to one) and is in range 0:255","494ca46a":"# Modelling\nModel structure:\n* 3 convolutional layers using 64 filters and kernel of size 3x3 with relu activation, each followed by batch normalization\n* max pooling with pool size 2x2, followed by droput (to avoid overfitting)\n* 3 convolutional layers using 64 filters and kernel of size 3x3 with relu activation, each followed by batch normalization\n* max pooling with pool size 2x2, followed by droput (to avoid overfitting)\n* flatten layer to make our data as 1 dimensional for dense layer\n* 2 dense layers (2nd is output one), batch normalization between dense layers\n* RMSprop algorithm as optimizer, using 0.001 learning rate and 0.99 rho\n* ReduceLROnPlateau function as callback to reduce learning rate when a metric has stopped improving.","e55e2aed":"# Rescale features\nDeep networks are sensitive on extreme values and is a must to scale features before running model"}}