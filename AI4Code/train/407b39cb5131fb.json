{"cell_type":{"2c412b64":"code","28c20d6f":"code","8767b152":"code","dfa3aac2":"code","fe608fef":"code","b3804e34":"code","77529359":"code","290fa182":"code","c734506d":"code","c8b5cd1a":"code","f6bc7ab3":"code","a43ebbfd":"code","24ffd185":"code","499c1b17":"code","b3bfc045":"code","0e26f79f":"code","26112719":"code","37a7acbc":"markdown","4cd42439":"markdown","32f7ee29":"markdown","21263c8f":"markdown","2a19e970":"markdown"},"source":{"2c412b64":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","28c20d6f":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline","8767b152":"df=pd.read_csv(\"\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv\")","dfa3aac2":"df.shape","fe608fef":"df.head()","b3804e34":"df.isnull().values.any()","77529359":"sns.heatmap(df.corr(),annot=True,cmap=\"YlGnBu\")","290fa182":"df.corr()","c734506d":"num_observ=len(df)\nnum_true =len(df.loc[df['Outcome']==1])\nnum_false=len(df.loc[df['Outcome']==0])\nprint(\"Number of true cases: {0} ({1:2.2f}%)\".format(num_true,(num_true\/num_observ)*100))\nprint(\"Number of false cases: {0} ({1:2.2f}%)\".format(num_false,(num_false\/num_observ)*100))\n","c8b5cd1a":"from sklearn.model_selection import train_test_split\n\nfeature_col_names = ['Pregnancies','Glucose','BloodPressure','SkinThickness','Insulin','BMI','DiabetesPedigreeFunction','Age']\npredicted_class_names = ['Outcome']\n\nX= df[feature_col_names].values\ny= df[predicted_class_names].values\n\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=42)","f6bc7ab3":"#checking that the split is done correctly\nprint(\"{0:0.2f}% in training set\".format((len(X_train)\/len(df.index)) * 100))\nprint(\"{0:0.2f}% in test set\".format((len(X_test)\/len(df.index)) * 100))\n","a43ebbfd":"#checking to make sure that the values are distributed evenly across the training and testing data\nprint(\"Original True  : {0} ({1:0.2f}%)\".format(len(df.loc[df['Outcome'] == 1]), (len(df.loc[df['Outcome'] == 1])\/len(df.index)) * 100.0))\nprint(\"Original False : {0} ({1:0.2f}%)\".format(len(df.loc[df['Outcome'] == 0]), (len(df.loc[df['Outcome'] == 0])\/len(df.index)) * 100.0))\nprint(\"\")\nprint(\"Training True  : {0} ({1:0.2f}%)\".format(len(y_train[y_train[:] == 1]), (len(y_train[y_train[:] == 1])\/len(y_train) * 100.0)))\nprint(\"Training False : {0} ({1:0.2f}%)\".format(len(y_train[y_train[:] == 0]), (len(y_train[y_train[:] == 0])\/len(y_train) * 100.0)))\nprint(\"\")\nprint(\"Test True      : {0} ({1:0.2f}%)\".format(len(y_test[y_test[:] == 1]), (len(y_test[y_test[:] == 1])\/len(y_test) * 100.0)))\nprint(\"Test False     : {0} ({1:0.2f}%)\".format(len(y_test[y_test[:] == 0]), (len(y_test[y_test[:] == 0])\/len(y_test) * 100.0)))\n","24ffd185":"df.head()","499c1b17":"#filling the missing value or 0 values with mean\nfrom sklearn.impute import SimpleImputer\n\nfill_0=SimpleImputer(missing_values=np.nan,strategy=\"mean\")\n\nX_train= fill_0.fit_transform(X_train)\n\nX_test= fill_0.fit_transform(X_test)","b3bfc045":"from sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\n\nfrom sklearn.metrics import confusion_matrix\n\n\nlr_model=LogisticRegression(C=0.7,random_state=42)\nlr_model.fit(X_train,y_train.ravel())\nlr_predict_test = lr_model.predict(X_test)\n\n# training metrics\nprint(\"Accuracy:{0:.4f}\".format(metrics.accuracy_score(y_test,lr_predict_test)))\nprint()\nprint(\"Confusion Matrix\")\nprint(metrics.confusion_matrix(y_test,lr_predict_test))\nprint()\nprint(\"Classification Report\")\nprint(metrics.classification_report(y_test,lr_predict_test))\n\n","0e26f79f":"C_start = 0.1\nC_end = 5\nC_inc = 0.1\n\nC_values, recall_scores = [], []\n\nC_val = C_start\nbest_recall_score = 0\nwhile (C_val < C_end):\n    C_values.append(C_val)\n#     the difference here vs. the original logistic regression model is that this line below includes \"class_weight='balanced'\"\n    lr_model_loop = LogisticRegression(C=C_val, class_weight=\"balanced\", random_state=42)\n    lr_model_loop.fit(X_train, y_train.ravel())\n    lr_predict_loop_test = lr_model_loop.predict(X_test)\n    recall_score = metrics.recall_score(y_test, lr_predict_loop_test)\n    recall_scores.append(recall_score)\n    if (recall_score > best_recall_score):\n        best_recall_score = recall_score\n        best_lr_predict_test = lr_predict_loop_test\n        \n    C_val = C_val + C_inc\n\nbest_score_C_val = C_values[recall_scores.index(best_recall_score)]\nprint(\"1st max value of {0:.3f} occured at C={1:.3f}\".format(best_recall_score, best_score_C_val))\n\n\n\n# Plot the changes in C-values against recall scores to see how the regularization scores impact the recall score, with classes being balanced. \n\n%matplotlib inline \nplt.plot(C_values, recall_scores, \"-\")\nplt.xlabel(\"C value\")\nplt.ylabel(\"recall score\")\n","26112719":"from sklearn.linear_model import LogisticRegression\nlr_model =LogisticRegression( class_weight=\"balanced\", C=best_score_C_val, random_state=42)\nlr_model.fit(X_train, y_train.ravel())\nlr_predict_test = lr_model.predict(X_test)\n\n# training metrics\nprint(\"Accuracy: {0:.4f}\".format(metrics.accuracy_score(y_test, lr_predict_test)))\nprint(metrics.confusion_matrix(y_test, lr_predict_test) )\nprint(\"\")\nprint(\"Classification Report\")\nprint(metrics.classification_report(y_test, lr_predict_test))\nprint(metrics.recall_score(y_test, lr_predict_test))\n","37a7acbc":"**Load data**","4cd42439":"**Logistic Regression**","32f7ee29":"check true\/false ratio","21263c8f":"It is 71% accurate but further can be improve by other algorithm.","2a19e970":"Importing libraries"}}