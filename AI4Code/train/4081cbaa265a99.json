{"cell_type":{"5bdcdc14":"code","6704b66e":"code","aaba9d92":"code","b02db62c":"code","32097682":"code","11b16e4f":"code","9aa122d1":"code","e3e40c0b":"code","97cd1595":"code","4407ec61":"code","32ea1765":"code","22312af4":"code","52da0f2f":"code","8e53b204":"code","9a9098b6":"code","c0ef1dd9":"code","4c971f07":"code","bed0bc09":"code","3f41a58a":"code","df3e05b3":"code","16e593f7":"code","4edf37f3":"code","e591321c":"code","751fced9":"code","a31bc3d3":"code","7642b068":"code","b142c09d":"code","da9b5bb4":"code","3afb1109":"code","4b8117da":"code","f777c32d":"code","f0d35f2e":"code","af30729d":"code","a04aacf1":"code","8b028a68":"code","870b6e36":"code","c178cdca":"code","a8d99a7e":"code","43e1aa98":"code","b35fc90f":"markdown","7f4d8cad":"markdown","f8cd8465":"markdown","6f0dbe4f":"markdown","cb092a91":"markdown","30f2dbcc":"markdown","82b06795":"markdown","15d91551":"markdown","ad2fe342":"markdown","681af09d":"markdown","d37391ab":"markdown","15ab59ca":"markdown"},"source":{"5bdcdc14":"# packages\n\n# standard\nimport numpy as np\nimport pandas as pd\nimport time\n\n# plots\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('white')","6704b66e":"# import data\nt1 = time.time()\ndf_train = pd.read_csv('..\/input\/ventilator-pressure-prediction\/train.csv')\ndf_test = pd.read_csv('..\/input\/ventilator-pressure-prediction\/test.csv')\ndf_sub = pd.read_csv('..\/input\/ventilator-pressure-prediction\/sample_submission.csv')\nt2 = time.time()\nprint('Elapsed time [s]:', np.round(t2-t1,4))","aaba9d92":"# preview train data\ndf_train","b02db62c":"df_train.info(verbose=True, show_counts=True)","32097682":"# count breaths\ndf_train.breath_id.value_counts()","11b16e4f":"# preview test data\ndf_test","9aa122d1":"df_test.info(verbose=True, show_counts=True)","e3e40c0b":"# count breaths\ndf_test.breath_id.value_counts()","97cd1595":"features_num = ['time_step', 'u_in', 'pressure']","4407ec61":"# basic stats\ndf_train[features_num].describe()","32ea1765":"for f in features_num:\n    df_train[f].plot(kind='hist', bins=100)\n    plt.title(f + ' [training]')\n    plt.grid()\n    plt.show()","22312af4":"pressure_neg = df_train[df_train.pressure < 0]\npressure_neg","52da0f2f":"# show corresponding ids\npressure_neg.breath_id.value_counts()","8e53b204":"# pairwise scatter plot - split by binary feature u_out\nsns.pairplot(df_train[features_num+['u_out']], kind='hist', hue='u_out')\nplt.show()","9a9098b6":"# more detailed plot of pressure vs time for u_out=0\nsns.jointplot(data=df_train[df_train.u_out==0], \n              x='time_step', y='pressure',\n              kind='scatter',\n              joint_kws={'alpha':0.01})\nplt.show()","c0ef1dd9":"# more detailed plot of pressure vs time for u_out=1\nsns.jointplot(data=df_train[df_train.u_out==1], \n              x='time_step', y='pressure',\n              kind='scatter',\n              joint_kws={'alpha':0.01})\nplt.show()","4c971f07":"# get last time_step for each breath in u_out=0 - phase\nmax_time_0 = df_train[df_train.u_out==0].groupby('breath_id')['time_step'].max()\n# convert to nice data frame\ndf_max_time_0 = pd.DataFrame(max_time_0)\ndf_max_time_0.index.name='i'\ndf_max_time_0['breath_id'] = df_max_time_0.index\ndf_max_time_0 = df_max_time_0.reset_index(drop=True)\ndf_max_time_0","bed0bc09":"# plot distribution of last time step\nplt.hist(df_max_time_0.time_step, bins=100)\nplt.xlabel('time_step')\nplt.grid()\nplt.show()","3f41a58a":"# build table with data at final time_step by breath\ndf_final_0 = df_max_time_0.merge(df_train, on=['breath_id','time_step'], how='left')\ndf_final_0","df3e05b3":"# plot pressure at final time step\nplt.scatter(df_final_0.time_step, df_final_0.pressure,\n            alpha=0.2)\nplt.title('Pressure at final time step for each breath | u_out=0')\nplt.xlabel('max time_step')\nplt.ylabel('pressure')\nplt.grid()\nplt.show()","16e593f7":"df_final_0.pressure.plot(kind='hist', bins=20)\nplt.title('Pressure distribution at last available time step | u_out=0')\nplt.xlabel('pressure')\nplt.grid()\nplt.show()","4edf37f3":"# plot u_in at final time step\nplt.scatter(df_final_0.time_step, df_final_0.u_in,\n            alpha=0.2)\nplt.title('u_in at final time step for each breath | u_out=0')\nplt.xlabel('max time_step')\nplt.ylabel('u_in')\nplt.grid()\nplt.show()","e591321c":"df_final_0.u_in.plot(kind='hist', bins=20)\nplt.title('u_in distribution at last available time step | u_out=0')\nplt.xlabel('u_in')\nplt.grid()\nplt.show()","751fced9":"# add combination of C and R as new feature\ndf_train['CR'] = df_train['C'].map(str) + '\/' + df_train['R'].map(str)\ndf_train['CR'].value_counts()","a31bc3d3":"features_cat = ['C', 'R', 'CR', 'u_out']","7642b068":"for f in features_cat:\n    df_train[f].value_counts().sort_index().plot(kind='bar')\n    plt.title(f + ' [training]')\n    plt.grid()\n    plt.show()","b142c09d":"sns.set_theme(style='whitegrid') # show grid lines also\nfor f in features_cat:\n    sns.violinplot(data=df_train, x=f, y='pressure')\n    plt.show()","da9b5bb4":"# show log version (we ignore the negative values for now)\ndf_train['pressure_log'] = np.log10(df_train.pressure) # => warning due to negative values!\n\nfor f in features_cat:\n    sns.violinplot(data=df_train, x=f, y='pressure_log')\n    plt.ylim(0,2)\n    plt.show()","3afb1109":"# reset style\nsns.set_style('white')","4b8117da":"my_ex = 1\ndf_ex = df_train[df_train.breath_id==my_ex]\n# show table\ndf_ex","f777c32d":"# plot development\nplt.figure(figsize=(10,4))\nplt.scatter(df_ex.time_step, df_ex.u_in, label='u_in')\nplt.scatter(df_ex.time_step, df_ex.u_out, label='u_out')\nplt.scatter(df_ex.time_step, df_ex.pressure, label='pressure')\nplt.title('Example id=' + str(my_ex))\nplt.legend()\nplt.grid()\nplt.show()","f0d35f2e":"df_ex_0 = df_ex[df_ex.u_out==0]","af30729d":"df_ex_0.pressure.plot(kind='hist')\nplt.title('Histogram of pressure | u_out=0')\nplt.grid()\nplt.show()","a04aacf1":"df_ex_0.u_in.plot(kind='hist')\nplt.title('Histogram of u_in | u_out=0')\nplt.grid()\nplt.show()","8b028a68":"plt.scatter(df_ex_0.u_in, df_ex_0.pressure)\nplt.title('pressure vs u_in | u_out = 0')\nplt.grid()\nplt.show()","870b6e36":"df_ex_1 = df_ex[df_ex.u_out==1]","c178cdca":"df_ex_1.pressure.plot(kind='hist')\nplt.title('Histogram of pressure | u_out=1')\nplt.grid()\nplt.show()","a8d99a7e":"df_ex_1.u_in.plot(kind='hist')\nplt.title('Histogram of u_in | u_out=1')\nplt.grid()\nplt.show()","43e1aa98":"plt.scatter(df_ex_1.u_in, df_ex_1.pressure)\nplt.title('pressure vs u_in | u_out = 1')\nplt.grid()\nplt.show()","b35fc90f":"### Look only at u_out=0:","7f4d8cad":"<a id='5'><\/a>\n# Pick an Example","f8cd8465":"<a id='1'><\/a>\n# Import and first Glance","6f0dbe4f":"<a id='3'><\/a>\n# Categorical Features","cb092a91":"### Look only at u_out=1:","30f2dbcc":"<a id='4'><\/a>\n# Target vs Features","82b06795":"#### We have some rows having negative pressure:","15d91551":"### Evaluate u_out=0 - phase at last available time step","ad2fe342":"<a id='2'><\/a>\n# Numerical Features","681af09d":"# Table of Contents\n* [Import and first Glance](#1)\n* [Numerical Features](#2)\n* [Categorical Features](#3)\n* [Pick an Example](#4)","d37391ab":"#### => no missing values...","15ab59ca":"### Work in progress..."}}