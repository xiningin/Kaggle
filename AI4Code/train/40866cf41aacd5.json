{"cell_type":{"80bebf94":"code","a841ccb0":"code","99457412":"code","1a170735":"code","4791c218":"code","145c12a4":"code","b737e043":"code","44da6af4":"code","b913c4d7":"code","1c4801a2":"code","8f1cc36c":"code","4ac4cfbf":"code","8bb52fe7":"code","33d66c1d":"code","f25b3ca3":"code","acdbd71e":"code","4b7556c6":"code","94c665ea":"markdown","5e8a6bfa":"markdown","76da8060":"markdown","0abf6ad6":"markdown","143c1f48":"markdown","0e5b8d57":"markdown","497ebd02":"markdown","7dae6c4a":"markdown","d98e8b19":"markdown"},"source":{"80bebf94":"# Some basic libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n# PIL library to read images\n# PIL library is the fastest as per my knowledge\nfrom PIL import Image","a841ccb0":"# Read the train.csv fiel\ntrain_csv = pd.read_csv(\"..\/input\/train.csv\")\n\n# Training images path\nTRAIN_PATH = \"..\/input\/train\/\"\n# Testing images path\nTEST_PATH = \"..\/input\/test\/\"\n\n# Four colours for images\ncolours = [\"red\", \"green\", \"blue\", \"yellow\"]\n\n# Training image ids\nids = train_csv[\"Id\"]\n# Training image labels\ntargets = train_csv[\"Target\"]","99457412":"train_csv.head()","1a170735":"ids[0]","4791c218":"# The whole set of images for one sample is as follows\nprint(TRAIN_PATH+ids[0]+\"_\"+colours[0]+\".png\")\nprint(TRAIN_PATH+ids[0]+\"_\"+colours[1]+\".png\")\nprint(TRAIN_PATH+ids[0]+\"_\"+colours[2]+\".png\")\nprint(TRAIN_PATH+ids[0]+\"_\"+colours[3]+\".png\")","145c12a4":"green = np.asarray(Image.open(TRAIN_PATH+ids[0]+\"_\"+colours[1]+\".png\"))\n\nplt.imshow(green)\nplt.show()","b737e043":"target = targets[1].split(\" \")\nprint(target)","44da6af4":"# First create empty array and then fill 1 where needed\nlabel = np.zeros((1, 28))\nprint(label)","b913c4d7":"for value in target:\n    label[0, int(value)] = 1\n\nprint(label)","1c4801a2":"# Create your own batches here\nbatches = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,\n           1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,\n           1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,\n           1071]\nnumb_labels = 28","8f1cc36c":"# Model fitting parameters\nreduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=2, min_lr=0.0001, verbose=1)\nearly_stopping = EarlyStopping(monitor='val_loss', patience=5, verbose=1, mode='auto')\n\nbatch_id = 1\nindex = 0\n\nfor batch in batches:\n    print(\"Processing batch number \" + str(batch_id))\n    # Create empty images and labels for batch\n    images = np.zeros((batch, 512, 512, 1), dtype=np.float)\n    labels = np.zeros((batch, numb_labels), dtype=np.float)\n    \n    for i in range(batch):\n        \n        # Get the image\n        green = np.asarray(Image.open(TRAIN_PATH+ids[index]+\"_\"+colours[1]+\".png\"))\n        index += 1\n        # Add to images\n        images[i] = green.reshape(512, 512, 1)\/255\n        \n        # Same for labels\n        target = targets[i].split(\" \")\n        \n        for value in target:\n            labels[i, int(value)] = 1\n        \n    print(\"Fitting the data to the model.\")\n    # Train the model\n    # --> Youer model here\n    batch_id += 1\n    index += 1","4ac4cfbf":"test_csv = pd.read_csv(\"..\/input\/sample_submission.csv\")\ntest_csv.head()","8bb52fe7":"ids_test = test_csv[\"Id\"]\nids_test[0]","33d66c1d":"y_pred = np.zeros((len(ids_test), numb_labels), dtype=np.float)\nimages = np.zeros((1, 512, 512, 3), dtype=np.float)\n\nfor i in range(len(ids_test)):\n    red = np.asarray(Image.open(TEST_PATH+ids_test[i]+\"_\"+colours[0]+\".png\"))\n    green = np.asarray(Image.open(TEST_PATH+ids_test[i]+\"_\"+colours[1]+\".png\"))\n    blue = np.asarray(Image.open(TEST_PATH+ids_test[i]+\"_\"+colours[2]+\".png\"))\n    \n    img_rgb = np.stack((red, green, blue), axis=-1)\n    img_rgb = img_rgb\/255\n    \n    images[0] = img_rgb\n    \n    # Your model\n    # y_pred[i] = model.predict(images, verbose=1)","f25b3ca3":"y_pred = (y_pred > 0.4).astype(int)","acdbd71e":"# Convert 1 and 0 into 0 to 27 digits for our labels\ny_sub = []\nfor label_set in y_pred:\n    index = 0\n    l = \"\"\n    for label in label_set:\n        if label == 1:\n            l += str(index)\n            l += \" \"\n            index += 1\n        else:\n            index += 1\n    y_sub.append(l[0:-1])\n        ","4b7556c6":"# Prepare submission file\nsubmission = pd.DataFrame({\"Predicted\":y_sub}, index=ids_test)\nsubmission.to_csv(\"submission_one.csv\", index=False)","94c665ea":"As mentioned in the data of the competition ,in this tutorial we will work with **Green** image.","5e8a6bfa":"**Let's see the images**","76da8060":"**Hello friends,**\n\n**This is my first informative post here on Kaggle.**\n\n**I have been learning Neural Network for about 1 year now, and I have learnt so much from the fello Kagglers, so I thought to give it back to the community.**\n\n**I hope this will help.**","0abf6ad6":"If you like my work consider up voting it.\nThank you.\n\n\n\n**Enjoy The Life, Feel The Music**","143c1f48":"**First Things First - What is our input**\n\n1. We have **train.csv** which contains id of each image and label for respective image.\n2. We have **train.zip** this contains four images of each sample, they are **red, green, blue, yellow**.\n3. We have **test.zip** contains images for testing and submitting your work, ids for test images are given in **sample_submission.csv**\n4. Images are of two different size and type,\n    512x512 PNG files\n    2048x2048 and 3072x3072 TIFF files\n    we will work with 512x512 images.\n    \n5. We have everything above mentioned in **..\/input\/** directory.    ","0e5b8d57":"So now we understand how to read the image and convert label into required form let's create a CNN.","497ebd02":"Now let's test our model.","7dae6c4a":"**Create you own model here.**","d98e8b19":"**Now the labels**\n\nWe have different 28 labels for one sample, we convert them into\n[0, 0, 0, ... ,0, 0, 0]\n\nfor example sample 0 [16, 0] **Protein** present in them\nwe will convert them into\n\n[1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n\nThis is a **Multi Lable Classification Problem**"}}