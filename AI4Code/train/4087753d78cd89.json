{"cell_type":{"369b3bbb":"code","d9eccc19":"code","0c94f331":"code","d12e9445":"code","fcc841c1":"code","f112873b":"code","e85412c7":"code","8c18b402":"code","158461b6":"code","ab549852":"code","7b45e326":"code","17a8049c":"code","7df6ad7a":"code","42aec82f":"code","8ea58727":"code","56f418b1":"code","012d02dc":"code","358e2b25":"code","0b7037ab":"code","e360b3b3":"code","07653748":"code","6afd01fe":"code","1e6c7a2c":"code","d122ad89":"markdown","980aa5fb":"markdown","b087f961":"markdown","50ba9a56":"markdown","6159c7ec":"markdown","254f51a5":"markdown","4bebb64b":"markdown","4fb3ad5b":"markdown","4268d069":"markdown","da3bc3da":"markdown","c352b621":"markdown","b8133e56":"markdown"},"source":{"369b3bbb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d9eccc19":"merc_cars_file_path = '\/kaggle\/input\/mercedes-used-car-listing\/merc.csv'\nmerc_data = pd.read_csv(merc_cars_file_path) \nmerc_data.head()","0c94f331":"# print a summary of the numerical Mercedes used car data\nmerc_data.describe()","d12e9445":"categorical_columns = ['model', 'transmission', 'fuelType']\nmerc_data[categorical_columns].describe()","fcc841c1":"# see what the distinct values are for each of the categorical columns\nmerc_data['model'].unique()","f112873b":"merc_data['transmission'].unique()","e85412c7":"merc_data['fuelType'].unique()","8c18b402":"numeric_columns = ['year', 'price', 'mileage', 'tax', 'mpg', 'engineSize']\nmerc_num_data = merc_data[numeric_columns]\nmerc_num_data.head()","158461b6":"corr = merc_num_data.corr()\ncorr","ab549852":"# Create a heatmap from the correlation matrix.\nplt.figure(figsize=(10, 8))\nsns.heatmap(corr, xticklabels=corr.columns, yticklabels=corr.columns)","7b45e326":"model_price = merc_data.groupby('model')['price'].mean().sort_values()\n\nplt.figure(figsize=(14, 8))\nplt.title(\"Mercedes Average Price for each Model\")\npal = sns.color_palette(\"Greens_d\", len(model_price))\n\nsns.barplot(x=model_price.index, y=model_price.values, palette=pal)\n\nplt.xlabel(\"Model\")\nplt.xticks(rotation=70)\nplt.ylabel(\"Price (Euros)\")\nplt.tight_layout()","17a8049c":"year_price = merc_data.groupby('year')['price'].mean().sort_values()\n\nplt.figure(figsize=(14, 8))\nplt.title(\"Mercedes Average Price by Year\")\npal = sns.color_palette(\"Greens_d\", len(year_price))\n\nsns.barplot(x=year_price.index, y=year_price.values, palette=pal)\n\nplt.xlabel(\"Year\")\nplt.ylabel(\"Price (Euros)\")\nplt.tight_layout()","7df6ad7a":"plt.figure(figsize=(14,8))\nsns.scatterplot(x=merc_num_data['year'], y=merc_num_data['price'])","42aec82f":"plt.figure(figsize=(14,8))\nsns.scatterplot(x=merc_num_data['engineSize'], y=merc_num_data['price'])","8ea58727":"plt.figure(figsize=(14,8))\nsns.scatterplot(x=merc_num_data['mileage'], y=merc_num_data['price'])","56f418b1":"plt.figure(figsize=(14,8))\nsns.scatterplot(x=merc_num_data['mpg'], y=merc_num_data['price'])","012d02dc":"plt.figure(figsize=(14,4))\nmerc_data.groupby('fuelType')['mpg'].mean().plot.barh()","358e2b25":"engine_0 = merc_data[merc_data['engineSize'] == 0.0]\nengine_0","0b7037ab":"plt.figure(figsize=(14,4))\nmerc_data.groupby('transmission')['mpg'].mean().plot.barh()","e360b3b3":"from sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.preprocessing import OneHotEncoder\n\n# Apply ordinal encoder to the model category feature\nordinal_encoder = OrdinalEncoder()\nmerc_data['model'] = ordinal_encoder.fit_transform(merc_data[['model']])","07653748":"# Apply one-hot encoder to transmission and fuelType features\nOH_encoder = OneHotEncoder(sparse=False)\noh_cols = pd.DataFrame(OH_encoder.fit_transform(merc_data[['transmission', 'fuelType']]))\noh_cols\noh_cols.columns = ['trans_0', 'trans_1', 'trans_2', 'trans_3', 'fuel_0', 'fuel_1', 'fuel_2', 'fuel_3']\n\n# drop the original columns and add the encoded ones\nmerc_data = merc_data.drop(['transmission', 'fuelType'], axis=1)\nmerc_data = pd.concat([merc_data, oh_cols], axis=1)\nmerc_data","6afd01fe":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error\n\n# Select the target variable and predictors\ny = merc_data['price']\nX = merc_data.drop(['price'], axis=1)\n\n# Divide data into training and validation subsets\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, train_size=0.7, test_size=0.3, random_state=0)\n\nmodel = RandomForestRegressor(n_estimators=10, random_state=0)\nmodel.fit(X_train, y_train)\npreds = model.predict(X_valid)\nmae = mean_absolute_error(y_valid, preds)\nmae","1e6c7a2c":"plt.figure(figsize=(14,8))\nsns.scatterplot(x=y_valid, y=preds).set(title='Price vs. Prediction')","d122ad89":"There's an interesting shape to this data. Newer cars are higher in price, which is to be expected. Much older cars are also higher in price than cars from the mid-2000s. Probably due to some of these cars being collector's items. Let's see a scatterplot of the same data.","980aa5fb":"### Training a simple Random Forest model\nFinally, let's train a simple model to see how good this data set is for predicting the price of a used Mercedes.","b087f961":"Maybe those mpg data points aren't outliers after all. The Hybrid and Other models are very good in mpg. Now let's take a closer look at the cars whose engine size is 0.","50ba9a56":"There are many different models, years, and fuel types in this subset, so it looks like 0.0 was the fill value for missing values in the engine size column. That's a potential source of error in a machine learning model, but there are relatively few observations with `engineSize=0.0` so we'll leave it alone for now. One last thing I want to look at is the mpg for different types of transmissions.","6159c7ec":"The year and engine size both look positively correlated with price, while the mileage and mpg are both fairly negatively correlated to price. This makes sense, but let's look at a few plots with these features and price, but let's start with the average price for each model and year.","254f51a5":"Those plots all aggree with the correlations to price we saw. There are a few price outliers, and a few extreme mileage outliers. There appear to be several mpg outliers, so let's take a closer look at the data for some features. We'll start by looking at the average mpg for each fuel type (a categorical variable, so we'll go back to the original data set).","4bebb64b":"### Mercedes Used Car Analysis\n\nAnalyze and predict prices for used Mercedes automobiles.\n\nThis notebook is based on my earlier notebook, [Audi Used Car Listings](https:\/\/www.kaggle.com\/bcruise\/audi-used-car-listings).\n\nYou may also want to check out these related notebooks:\n- [BMW Used Car Analysis](https:\/\/www.kaggle.com\/bcruise\/bmw-used-car-analysis)\n- [Hyundai Used Car Analysis](https:\/\/www.kaggle.com\/bcruise\/hyundai-used-car-analysis)","4fb3ad5b":"It looks like there are no missing values in this data set. If we want to build a model using categorical features, we'll have to encode them. The `transmission` and `fuelType` features only have a few unique values, so we can use one-hot encoding. The `model` feature has 27 unique values though. It will probably have a lot of predictive value though, so we'll want to keep it. For that feature we'll use ordinal encoding. Before we start building models, let's see how some of the features correlate to each other, and to the price (the ultimate target variable).","4268d069":"### Initial data exploration","da3bc3da":"There's very little variation in mpg here compared fuel type, and as expected manual transmission cars do get slightly better mpg than the other groups. Now let's move on to encoding the categorical features before training a simple model.\n\n### Encoding categorical features","c352b621":"For an initial model, a mean absolute error of 1,631 Euros is not bad considering the average price is over 24,000 Euros. I can see from the plot of the actual prices vs. the predictions that a few data points are off by quite a bit, which is going to throw off the average error. Other than that, the prices vs. predictions scatterplot forms a fairly straight line, although it does have a little bit of spread.\n\nThere's a lot of room for improvement, but I'll leave it there for this notebook.","b8133e56":"This is a much clearer picture. It looks like the higher price for much older cars is due to one outlying data point."}}