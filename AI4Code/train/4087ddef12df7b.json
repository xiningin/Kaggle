{"cell_type":{"34e21279":"code","85dba727":"code","1b5530d0":"code","13a99360":"code","bf245114":"code","44c7c2eb":"code","10c473b9":"code","54d43940":"code","1e0d2bc6":"code","3834c6c0":"code","34147e5b":"code","e38c9fd9":"code","7f18fd76":"code","f9b01ea5":"code","d21299a1":"code","393ef722":"code","38c98e50":"code","d2781098":"code","a5e92b5d":"code","a3ef02c8":"code","ffc15df4":"code","8e9773e1":"code","31fc1c2d":"code","07d72b80":"code","8517b4c3":"code","cb923297":"code","892c79c4":"code","01de56a3":"markdown","890dd364":"markdown","389a6c17":"markdown","79e331ca":"markdown","bee615f7":"markdown","d8e06b03":"markdown","460778b3":"markdown","e4b7dc82":"markdown","cb6bbb53":"markdown"},"source":{"34e21279":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","85dba727":"import math\nimport matplotlib.pyplot as plt","1b5530d0":"ratings = pd.read_csv(\"\/kaggle\/input\/goodbooks-10k\/ratings.csv\")","13a99360":"ratings.head(2)","bf245114":"n_users = ratings.user_id.unique().shape[0]\nn_books = ratings.book_id.unique().shape[0]\nprint(\"The database contains ratings from\", n_users, \"users for\", n_books, \"books.\")","44c7c2eb":"data_matrix = np.zeros((n_users, n_books))\nfor line in ratings.itertuples():\n    data_matrix[line[2]-1, line[1]-1] = line[3]","10c473b9":"user_row = 23 # set user_id to explore here","54d43940":"n_books_rated = 0\nfor book in range(0, n_books):\n    if data_matrix[user_row, book] != 0:\n        n_books_rated += 1\nprint(n_books_rated)","1e0d2bc6":"np.count_nonzero(data_matrix[user_row]) # alternative method using numpy library","3834c6c0":"books_rated = np.zeros(n_users)\nfor user in range(0, n_users):\n    books_rated[user] = np.count_nonzero(data_matrix[user])","34147e5b":"plt.figure(figsize=(15,5))\nplt.hist(books_rated, bins = [0, 5, 10, 15, 20, 25, 30, 40, 50, 60, 80, 100, 200])","e38c9fd9":"def cos_similar(u, v):\n    return np.dot(u,v)\/np.linalg.norm(u)\/np.linalg.norm(v)","7f18fd76":"cos_similar(data_matrix[2000], data_matrix[2000]) # similarity of itself","f9b01ea5":"cos_similar(data_matrix[2000], data_matrix[2001]) # similarity of itself","d21299a1":"similar = np.zeros(n_users)\nfor user in range(0, n_users):\n    similar[user] = cos_similar(data_matrix[user_row], data_matrix[user])","393ef722":"print(\"This user read\", np.count_nonzero(data_matrix[user_row]), \"books.\")\nprint(\"There are\", np.count_nonzero(similar), \"users that read at least one same book as this user.\")","38c98e50":"plt.figure(figsize=(15,5))\nplt.hist(similar, bins = [0.005, 0.01, 0.02, 0.03, 0.05, 0.1, 0.2, 0.3, 0.5, 1])","d2781098":"top_similar = np.where(similar > 0.2)[0] # top similar users\nprint(top_similar)","a5e92b5d":"for user in top_similar:\n    if user != user_row:\n        print(\"Other similar users\/recommenders read\", np.count_nonzero(data_matrix[user]), \"books.\")","a3ef02c8":"books_rating = np.zeros(n_books)\nfor user in top_similar:\n    books_rating += data_matrix[user]\/len(top_similar)\nplt.hist(books_rating, bins = [1,2,3,4,5,6])","ffc15df4":"best_book = np.where(books_rating == max(books_rating))[0][0]\nprint(best_book)","8e9773e1":"good_book = np.where(books_rating > max(books_rating)\/4)[0]\nprint(good_book, len(good_book))","31fc1c2d":"read_book = np.where(data_matrix[user_row] != 0)[0]\nprint(read_book)","07d72b80":"books = pd.read_csv(\"\/kaggle\/input\/goodbooks-10k\/books.csv\")\nbooks.head(2)","8517b4c3":"print(\"The user rated the following books:\")\nbooks.loc[books['id'].isin(read_book)]","cb923297":"recommend_book = np.delete(good_book, np.where(np.isin(good_book, read_book)))","892c79c4":"print(\"Recommended books for the users are:\")\nbooks.loc[books['id'].isin(recommend_book)]","01de56a3":"Calculate how many books all users rated","890dd364":"Identify which book the user already read","389a6c17":"Match books to the user","79e331ca":"Create user-book matrix of rating","bee615f7":"Find k most similar users for a given user","d8e06b03":"Explore how many books a user rated","460778b3":"Keep high-ly rated books","e4b7dc82":"Calculate cosine similarity between two users","cb6bbb53":"Average book ratings among top similar users "}}