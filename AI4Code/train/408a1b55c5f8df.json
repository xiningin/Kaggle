{"cell_type":{"d04bdaeb":"code","7f20a897":"code","9bbda2d8":"code","8ef91c18":"code","e39f15db":"code","e5f4af22":"code","ee886664":"code","23f9038c":"code","2b367a1c":"code","f7ac905c":"code","3ff2f4bf":"code","8399c454":"code","893ac3d5":"code","8de57a98":"code","6cbf813c":"code","60abe37c":"code","95029af6":"code","b5131003":"code","661dd05a":"code","60eb5d2e":"code","22b7067c":"code","ac3e4d51":"code","7d0cd43e":"code","055b5100":"code","c6d00d13":"markdown","a99a9810":"markdown","8ac3e792":"markdown","beb5edb9":"markdown","7b4541ce":"markdown","69e29622":"markdown","51a43564":"markdown","91f7f3e7":"markdown","2be5f5b1":"markdown","44d85da8":"markdown","6c3a40a7":"markdown","f4fcd10d":"markdown","bf028491":"markdown"},"source":{"d04bdaeb":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')\n## Display all the features of the Dataset\npd.set_option('display.max_columns',None)","7f20a897":"### loading dataset\ndataset=pd.read_csv('\/kaggle\/input\/house-price-prediction\/train.csv')\n\n### print shape of dataset with rows & columns(features)\nprint(dataset.shape)","9bbda2d8":"### print top 5 rows of dataset\ndataset.head()","8ef91c18":"### here we will check the percentage of NaN values in every feature\n### step-1 create a list of features which has missing values\ndf = dataset.copy()\nfeature_with_nan = [feature for feature in df.columns if df[feature].isnull().sum()>0]\n\n### step-2 print the features name and percentage of missing values\nfor feature in feature_with_nan:\n    print(feature, np.round(df[feature].isnull().mean()*100,4),\"% missing values\")","e39f15db":"color = sns.color_palette()\nfor feature in feature_with_nan:\n    df = dataset.copy()\n### Let's make a variable that indicates the 1 if the variable is missing and zero otherwise\n    df[feature] = np.where(df[feature].isnull(),1,0)\n    \n### Let's calculate the mean SalePrice where the information is missing or present\n\n    df.groupby(feature)['SalePrice'].median().plot.bar(color=color)\n    # sns.barplot(x=feature, y='SalePrice', data=df, ci=False, estimator=np.median )\n    plt.title(feature)\n    plt.show()","e5f4af22":"print(\"Id of Houses {}\".format(len(dataset.Id)))","ee886664":"### List of numerical variables\nnumerical_features = [feature for feature in df.columns if df[feature].dtypes!='O']\nprint(\"Number of Numerical Variables: \",len(numerical_features))\ndf[numerical_features].head()","23f9038c":"### List of features which contain year information\nyear_feature = [feature for feature in numerical_features if 'Yr' in feature or 'Year' in feature]\nyear_feature","2b367a1c":"### Let's explore the content of these year variables\nfor feature in year_feature:\n    print(feature, df[feature].unique())","f7ac905c":"### Let's analyze the Temporal Datetime variables\n### We will check weather there is a relationship between year the house is sold and the output variable SalePrice\nsns.lineplot(x='YrSold', y='SalePrice', data=df, estimator=np.median, ci=False, color='k', linewidth=2)\n#df.groupby(['YrSold'])['SalePrice'].median().plot()\nplt.xlabel('Year Sold', size=15)\nplt.ylabel('Median House Price', size=15)\nplt.title('House Price VS Year Sold', size=20)\nplt.show()","3ff2f4bf":"### Here i'll try to compare the difference between all years features with SalePrice\nfor feature in year_feature:\n    df = df.copy()\n    # I'll capture the difference between the year variable and the year the house was sold for\n    df[feature] = df['YrSold']-df[feature]\n    \n    \n    sns.scatterplot(x=feature, y='SalePrice', data=df, color='grey', edgecolor='k', linewidth=0.9)\n    #plt.scatter(df[feature], df['SalePrice'])\n    plt.xlabel(feature)\n    plt.ylabel('SalePrice')\n    plt.show()","8399c454":"### Numerical Variables are usually of 2 types\n### 1. Continuous Variables\n### 2. Discrete Variables","893ac3d5":"discrete_features = [feature for feature in numerical_features if len(df[feature].unique())<25 and feature not in year_feature+['Id']]\nprint(\"Discrete Variables count:{} \".format(len(discrete_features)))","8de57a98":"discrete_features","6cbf813c":"df[discrete_features].head()","60abe37c":"### Let's find the relationship between them and SalePrice\ncolor = sns.color_palette()\nfor feature in discrete_features:\n    df = df.copy()\n    df.groupby(feature)['SalePrice'].median().plot.bar(color='grey',edgecolor='k',linewidth=1)\n    #sns.barplot(x=feature, y='SalePrice', data=df, saturation=1, errwidth=0, estimator=np.median)\n    plt.xlabel(feature, size=15)\n    plt.ylabel('SalePrice', size=15)\n    plt.show()","95029af6":"continuous_features = [feature for feature in numerical_features if feature not in discrete_features+year_feature+['Id']]\nprint(\"Continuous Features count {}\".format(len(continuous_features)))","b5131003":"### Lets analyse the continuous values by creating histograms to understand the distribution\nfor feature in continuous_features:\n    df = df.copy()\n    sns.displot(df[feature], kde=False, bins=20, color='grey', edgecolor='k', linewidth=1)\n    #df[feature].hist()\n    plt.xlabel(feature, size=15)\n    plt.ylabel('Count', size=15)\n    plt.title(feature, size=20)\n    plt.show()","661dd05a":"### I will be using Logarithmic Transformation\n### For making tha continuouse_features into guassian distribution form\nfor feature in continuous_features:\n    df = df.copy()\n    if 0 in df[feature].unique():\n        pass\n    else:\n        df[feature] = np.log(df[feature])\n        #df['SalePrice'] = np.log(df['SalePrice'])\n        \n        sns.scatterplot(x=feature, y='SalePrice', data=df, color='grey', edgecolor='k', linewidth=0.9)\n        #plt.scatter(df[feature], df['SalePrice'])\n        plt.xlabel(feature, size=15)\n        plt.ylabel('Sale Price', size=15)\n        plt.title(feature, size=20)\n        plt.show()","60eb5d2e":"for feature in continuous_features:\n    if 0 in df[feature].unique():\n        pass\n    else:\n        df[feature] = np.log(df[feature])\n        sns.boxplot(df[feature], color='grey')\n        plt.ylabel(feature)\n        plt.title(feature)\n        plt.show()","22b7067c":"categorical_features=[feature for feature in dataset.columns if dataset[feature].dtypes=='O']\ncategorical_features","ac3e4d51":"dataset[categorical_features].head()","7d0cd43e":"for feature in categorical_features:\n    print('The feature is {} and number of categories are {}'.format(feature,len(dataset[feature].unique())))","055b5100":"### Find out the relationship between categorical variable and dependent feature SalesPrice\nfor feature in categorical_features:\n    data=dataset.copy()\n    data.groupby(feature)['SalePrice'].median().plot.bar(color=color)\n    plt.xlabel(feature)\n    plt.ylabel('SalePrice')\n    plt.title(feature)\n    plt.show()","c6d00d13":"#### It has 1460 rows & 81 columns(features)","a99a9810":"# Numerical Variables","8ac3e792":"Since they are many missing values, we need to find the relationship between missing values and Sales Price\n\n# Let's plot some diagram for this relationship","beb5edb9":"# Importing Libraries","7b4541ce":"# Discrete Variables\n#### A discrete variable is a variable whose value is obtained by counting. Examples: number of students present. number of red marbles in a jar. number of heads when flipping three coins. students' grade level.\n","69e29622":"### Dataset to download from the link given below\nhttps:\/\/www.kaggle.com\/c\/house-prices-advanced-regression-techniques\/data","51a43564":"#### Temporal Variables (Eg: Datetime Variables)\nIn the dataset, I have 4-year variables. I have extracted information from the Datetime variables like no of years or no of days. One example in this specific scenario can be a difference in years between the year the house was built to year the house was sold. I will perform this analysis in feature engineering.","91f7f3e7":"Herewith the relation between the missing values and dependent variables is visible that every feature which has nan value impact on the SalePrice either becomes low or either it becomes high so we can't drop them. So we need to replace these nan values with something meaningful which is part of feature engineering.\n\nFrom the above dataset, some of the features like 'Id' is not required So we can drop this","2be5f5b1":"# Categorical Variable","44d85da8":"# Outliers","6c3a40a7":"# Missing Values","f4fcd10d":"## All the Lifecycle In A Data Science Projects\n1. Data Analysis\n2. Feature Engineering\n3. Feature Selection\n4. Model Building\n5. Model Deployment","bf028491":"# Continuous Variables"}}