{"cell_type":{"7981e586":"code","d9a6ee6a":"code","f49d4606":"code","644c761b":"code","be0ff052":"code","79eb7dab":"code","75ad00e8":"code","3afb65cc":"code","f481d333":"code","5ce8ccfe":"code","8fa2e5e6":"code","860d14b1":"code","8f3d92dd":"code","18327e0e":"code","ab0b3c2f":"code","5147c96c":"code","77146eda":"code","101ec951":"code","f7a41432":"code","43b85655":"code","01e9a652":"code","8f04ecdc":"code","01f7b53e":"markdown","1309b84a":"markdown","506b4979":"markdown","0d57134f":"markdown","d28f400d":"markdown","5c0756f0":"markdown","24a905b3":"markdown","709dfc47":"markdown","46a588bc":"markdown","b25f0fb6":"markdown","65f48350":"markdown","77df26d2":"markdown","596f4776":"markdown","fdb49851":"markdown","c5706e03":"markdown","bb691b4f":"markdown"},"source":{"7981e586":"# first install ConvLab-2 and restart the notebook\n! git clone https:\/\/github.com\/thu-coai\/ConvLab-2.git && cd ConvLab-2 && pip install -e .","d9a6ee6a":"cd ConvLab-2","f49d4606":"# common import: convlab2.$module.$model.$dataset\nfrom convlab2.nlu.jointBERT.multiwoz import BERTNLU\nfrom convlab2.nlu.milu.multiwoz import MILU\nfrom convlab2.dst.rule.multiwoz import RuleDST\nfrom convlab2.policy.rule.multiwoz import RulePolicy\nfrom convlab2.nlg.template.multiwoz import TemplateNLG\nfrom convlab2.dialog_agent import PipelineAgent, BiSession\nfrom convlab2.evaluator.multiwoz_eval import MultiWozEvaluator\nfrom pprint import pprint\nimport random\nimport numpy as np\nimport torch","644c761b":"# go to README.md of each model for more information\n# BERT nlu\nsys_nlu = BERTNLU()\n# simple rule DST\nsys_dst = RuleDST()\n# rule policy\nsys_policy = RulePolicy()\n# template NLG\nsys_nlg = TemplateNLG(is_user=False)\n# assemble\nsys_agent = PipelineAgent(sys_nlu, sys_dst, sys_policy, sys_nlg, name='sys')","be0ff052":"sys_agent.response(\"I want to find a moderate hotel\")","79eb7dab":"sys_agent.response(\"Which type of hotel is it ?\")","75ad00e8":"sys_agent.response(\"OK , where is its address ?\")","3afb65cc":"sys_agent.response(\"Thank you !\")","f481d333":"sys_agent.response(\"Try to find me a Chinese restaurant in south area .\")","5ce8ccfe":"sys_agent.response(\"Which kind of food it provides ?\")","8fa2e5e6":"sys_agent.response(\"Book a table for 5 , this Sunday .\")","860d14b1":"# MILU\nuser_nlu = MILU()\n# not use dst\nuser_dst = None\n# rule policy\nuser_policy = RulePolicy(character='usr')\n# template NLG\nuser_nlg = TemplateNLG(is_user=True)\n# assemble\nuser_agent = PipelineAgent(user_nlu, user_dst, user_policy, user_nlg, name='user')","8f3d92dd":"evaluator = MultiWozEvaluator()\nsess = BiSession(sys_agent=sys_agent, user_agent=user_agent, kb_query=None, evaluator=evaluator)","18327e0e":"def set_seed(r_seed):\n    random.seed(r_seed)\n    np.random.seed(r_seed)\n    torch.manual_seed(r_seed)\n\nset_seed(20200131)\n\nsys_response = ''\nsess.init_session()\nprint('init goal:')\npprint(sess.evaluator.goal)\nprint('-'*50)\nfor i in range(20):\n    sys_response, user_response, session_over, reward = sess.next_turn(sys_response)\n    print('user:', user_response)\n    print('sys:', sys_response)\n    print()\n    if session_over is True:\n        break\nprint('task success:', sess.evaluator.task_success())\nprint('book rate:', sess.evaluator.book_rate())\nprint('inform precision\/recall\/f1:', sess.evaluator.inform_F1())\nprint('-'*50)\nprint('final goal:')\npprint(sess.evaluator.goal)\nprint('='*100)","ab0b3c2f":"# available NLU models\nfrom convlab2.nlu.svm.multiwoz import SVMNLU\nfrom convlab2.nlu.jointBERT.multiwoz import BERTNLU\nfrom convlab2.nlu.milu.multiwoz import MILU\n# available DST models\nfrom convlab2.dst.rule.multiwoz import RuleDST\nfrom convlab2.dst.mdbt.multiwoz import MDBT\nfrom convlab2.dst.sumbt.multiwoz import SUMBT\nfrom convlab2.dst.trade.multiwoz import TRADE\n# available Policy models\nfrom convlab2.policy.rule.multiwoz import RulePolicy\nfrom convlab2.policy.ppo.multiwoz import PPOPolicy\nfrom convlab2.policy.pg.multiwoz import PGPolicy\nfrom convlab2.policy.mle.multiwoz import MLEPolicy\nfrom convlab2.policy.gdpl.multiwoz import GDPLPolicy\nfrom convlab2.policy.vhus.multiwoz import UserPolicyVHUS\nfrom convlab2.policy.mdrg.multiwoz import MDRGWordPolicy\nfrom convlab2.policy.hdsa.multiwoz import HDSA\nfrom convlab2.policy.larl.multiwoz import LaRL\n# available NLG models\nfrom convlab2.nlg.template.multiwoz import TemplateNLG\nfrom convlab2.nlg.sclstm.multiwoz import SCLSTM\n# available E2E models\nfrom convlab2.e2e.sequicity.multiwoz import Sequicity\nfrom convlab2.e2e.damd.multiwoz import Damd","5147c96c":"# NLU+RuleDST:\nsys_nlu = BERTNLU()\n# sys_nlu = MILU()\n# sys_nlu = SVMNLU()\nsys_dst = RuleDST()\n\n# or Word-DST:\n# sys_nlu = None\n# sys_dst = SUMBT()\n# sys_dst = TRADE()\n# sys_dst = MDBT()","77146eda":"# Policy+NLG:\nsys_policy = RulePolicy()\n# sys_policy = PPOPolicy()\n# sys_policy = PGPolicy()\n# sys_policy = MLEPolicy()\n# sys_policy = GDPLPolicy()\nsys_nlg = TemplateNLG(is_user=False)\n# sys_nlg = SCLSTM(is_user=False)\n\n# or Word-Policy:\n# sys_policy = LaRL()\n# sys_policy = HDSA()\n# sys_policy = MDRGWordPolicy()\n# sys_nlg = None","101ec951":"sys_agent = PipelineAgent(sys_nlu, sys_dst, sys_policy, sys_nlg, 'sys')","f7a41432":"# sys_agent = Sequicity()\n# sys_agent = Damd()","43b85655":"user_nlu = BERTNLU()\n# user_nlu = MILU()\n# user_nlu = SVMNLU()\nuser_dst = None\nuser_policy = RulePolicy(character='usr')\n# user_policy = UserPolicyVHUS(load_from_zip=True)\nuser_nlg = TemplateNLG(is_user=True)\n# user_nlg = SCLSTM(is_user=True)\nuser_agent = PipelineAgent(user_nlu, user_dst, user_policy, user_nlg, name='user')","01e9a652":"from convlab2.util.analysis_tool.analyzer import Analyzer\n\n# if sys_nlu!=None, set use_nlu=True to collect more information\nanalyzer = Analyzer(user_agent=user_agent, dataset='multiwoz')\n\nset_seed(20200131)\nanalyzer.comprehensive_analyze(sys_agent=sys_agent, model_name='sys_agent', total_dialog=100)","8f04ecdc":"set_seed(20200131)\nanalyzer.compare_models(agent_list=[sys_agent1, sys_agent2], model_name=['sys_agent1', 'sys_agent2'], total_dialog=100)","01f7b53e":"NLU+RuleDST or Word-DST:","1309b84a":"## Use analysis tool to diagnose the system\nWe provide an analysis tool presents rich statistics and summarizes common mistakes from simulated dialogues, which facilitates error analysis and\nsystem improvement. The analyzer will generate an HTML report which contains\nrich statistics of simulated dialogues. For more information, please refer to `convlab2\/util\/analysis_tool`.","506b4979":"## build an agent\n\nWe use the models adapted on [Multiwoz](https:\/\/www.aclweb.org\/anthology\/D18-1547)  dataset to build our agent. This pipeline agent consists of NLU, DST, Policy and NLG modules.\n\nFirst, import some models:","0d57134f":"Then, create the models and build an agent:","d28f400d":"## Environment setup\nRun the command below to install ConvLab-2. Then restart the notebook and skip this commend.","5c0756f0":"Let's make this two agents chat! The key is `next_turn` method of `BiSession` class.","24a905b3":"That's all! Let's chat with the agent using its response function:","709dfc47":"# Getting Started\n\nIn this tutorial, you will know how to\n- use the models in **ConvLab-2** to build a dialog agent.\n- build a simulator to chat with the agent and evaluate the performance.\n- try different module combinations.\n- use analysis tool to diagnose your system.\n\nLet's get started!","46a588bc":"## Build a simulator to chat with the agent and evaluate\n\nIn many one-to-one task-oriented dialog system, a simulator is essential to train an RL agent. In our framework, we doesn't distinguish user or system. All speakers are **agents**. The simulator is also an agent, with specific policy inside for accomplishing the user goal.\n\nWe use `Agenda` policy for the simulator, this policy requires dialog act input, which means we should set DST argument of `PipelineAgent` to None. Then the `PipelineAgent` will pass dialog act to policy directly. Refer to `PipelineAgent` doc for more details.","b25f0fb6":"Assemble the Pipeline system agent:","65f48350":"Policy+NLG or Word-Policy:","77df26d2":"Config an user agent similarly:","596f4776":"Or Directly use an end-to-end model:","fdb49851":"## Try different module combinations\n\nThe combination modes of pipeline agent modules are flexible. We support joint models such as MDBT, TRADE, SUMBT for word-DST and MDRG, HDSA, LaRL for word-Policy, once the input and output are matched with previous and next module. We also support End2End models such as Sequicity.\n\nAvailable models:\n\n- NLU: BERTNLU, MILU, SVMNLU\n- DST: RuleDST\n- Word-DST: SUMBT, TRADE, MDBT (set `sys_nlu` to `None`)\n- Policy: RulePolicy, Imitation, REINFORCE, PPO, GDPL\n- Word-Policy: MDRG, HDSA, LaRL (set `sys_nlg` to `None`)\n- NLG: Template, SCLSTM\n- End2End: Sequicity, DAMD, RNN_rollout (directly used as `sys_agent`)\n- Simulator policy: Agenda, VHUS (for `user_policy`)\n","c5706e03":"To compare several models:","bb691b4f":"\nNow we have a simulator and an agent. we will use an existed simple one-to-one conversation controller BiSession, you can also define your own Session class for your special need.\n\nWe add `MultiWozEvaluator` to evaluate the performance. It uses the parsed dialog act input and policy output dialog act to calculate **inform f1**, **book rate**, and whether the task is **success**."}}