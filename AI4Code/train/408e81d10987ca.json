{"cell_type":{"8467869d":"code","b478f1fc":"code","901e5e80":"code","02e87dd8":"code","19768c92":"code","5634d999":"code","38d73524":"code","3aa61ef1":"code","3af22081":"code","870e1e38":"code","e0cdd720":"code","c905f82e":"code","5bc9ad1e":"code","442cfd71":"markdown","4429149b":"markdown"},"source":{"8467869d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","b478f1fc":"movies=pd.read_csv(\"..\/input\/tmdb_5000_movies.csv\")\ncredits=pd.read_csv(\"..\/input\/tmdb_5000_credits.csv\")","901e5e80":"movies.info()\nmovies.describe()","02e87dd8":"movies.head()","19768c92":"movies.columns","5634d999":"movies.corr()","38d73524":"f,ax=plt.subplots(figsize=(10,10))\nsns.heatmap(movies.corr(),annot=True, linewidths=.5, ax=ax)\nplt.show()","3aa61ef1":"movies.budget.plot(label=\"Budget\",grid=True,figsize=(12,9),alpha=0.5, color=\"r\",linestyle=\"-.\")\nmovies.revenue.plot(label=\"Revenue\", alpha=0.5, color=\"g\",linestyle=\":\")\nplt.title(\"Line Plot - Budget and Revenue\")\nplt.legend()\nplt.xlabel(\"id\")\nplt.ylabel(\"Price\")\nplt.show()","3af22081":"movies.plot(kind=\"scatter\",x=\"vote_average\", y=\"runtime\", alpha=.5,figsize=(12,9),label=\"Scatter Plot - Runtime and Vote Average\")\nplt.show()","870e1e38":"movies.vote_average.plot(kind=\"hist\",bins=30 , figsize=(12,9))\nplt.xlabel(\"Average Vote\")\nplt.show()\n","e0cdd720":"high=movies[\"revenue\"]>1200000000\nmovies[high]","c905f82e":"movies[(movies[\"revenue\"]>1200000000)&(movies[\"budget\"]<200000000)]","5bc9ad1e":"for index, value in movies[[\"budget\"]][0:6].iterrows():\n    print(index,\" \", value)","442cfd71":"to be continued...","4429149b":"Let's get summary information about data"}}