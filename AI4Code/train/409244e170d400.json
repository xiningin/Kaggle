{"cell_type":{"31552cf1":"code","02583c07":"code","2ba47c74":"code","95c181bb":"code","90ee3f12":"code","39a82e0c":"code","26bef7c8":"code","eb6e3a0d":"code","fcca759a":"code","d63bc07d":"code","cc48a4dd":"code","8f4a29ca":"code","ba1a3e18":"code","9aa2fec6":"code","6fd1024a":"code","10858765":"code","3208fb22":"code","c07e9695":"code","6774785f":"code","6ea5e17c":"code","6e938a9f":"code","554f5551":"code","31b5325c":"code","3cc2a9d1":"code","1b78bc01":"code","e348ea27":"code","6542c42a":"code","aa7d1f03":"code","6b5538df":"code","e1f3ff6e":"code","fad2e6a9":"code","029fda6e":"code","367d601e":"code","b81d962e":"code","4cedf65e":"code","52ae458a":"code","f52b04ac":"code","38306422":"code","59cbbe87":"code","57210a52":"markdown","fb70d1be":"markdown","753a4c30":"markdown","fb5e5f2a":"markdown","c4e469ad":"markdown","7501eece":"markdown","b3510543":"markdown","e66bc213":"markdown","86340337":"markdown","ad21760e":"markdown","3bc830b2":"markdown","6d0b21ec":"markdown"},"source":{"31552cf1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn import preprocessing\nfrom sklearn.pipeline import Pipeline,make_pipeline\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.model_selection import cross_val_score,GridSearchCV\n\nfrom sklearn import ensemble\nimport xgboost\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","02583c07":"raw_train=pd.read_csv('..\/input\/train.csv')\nraw_test=pd.read_csv('..\/input\/test.csv')","2ba47c74":"raw_train.head(1)","95c181bb":"raw_train.tail(1)","90ee3f12":"raw_test.head(1)","39a82e0c":"raw_test.tail(1)","26bef7c8":"data=pd.concat([raw_train, raw_test], axis=0).reset_index(drop=True)","eb6e3a0d":"data.info()","fcca759a":"data.isnull().sum()","d63bc07d":"data[\"Cabin\"].isnull().sum()","cc48a4dd":"# Replace NA as X, kepp initial\ndata[\"Cabin\"]=data['Cabin'].fillna('X')\ndata['Cabin']=data['Cabin'].str.get(0)","8f4a29ca":"sns.barplot(x=\"Cabin\", y=\"Survived\", data=data)","ba1a3e18":"data['Embarked'].value_counts()","9aa2fec6":"data[data['Embarked'].isnull()]","6fd1024a":"sns.boxplot(x=\"Embarked\", y=\"Fare\", hue=\"Pclass\",data=data)","10858765":"data['Embarked']=data['Embarked'].fillna('C')","3208fb22":"data[data['Fare'].isnull()]","c07e9695":"fare=data[(data['Age'] >60) & (data['Embarked'] == \"S\") & (data['Pclass'] == 3)].Fare\ndata['Fare']=data['Fare'].fillna(fare.median())","6774785f":"sns.kdeplot(data.loc[data['Survived'] == 0, 'Fare'], label='0')\nsns.kdeplot(data.loc[data['Survived'] == 1, 'Fare'], label='1')","6ea5e17c":"data.Name","6e938a9f":"# Get Title from Name\ndata[\"Title\"] = data['Name'].apply(lambda x:x.split(',')[1].split('.')[0].strip())\ndata[\"Title\"].value_counts()","554f5551":"data[\"Title\"] = data[\"Title\"].replace(['Mlle','Ms'], 'Miss')\ndata[\"Title\"] = data[\"Title\"].replace(['Mme'], 'Mrs')\ndata[\"Title\"] = data[\"Title\"].replace(['Rev', 'Dr', 'Col', 'Major', 'Capt'], 'Officer')\ndata[\"Title\"] = data[\"Title\"].replace(['the Countess', 'Don', 'Lady', 'Sir', 'Jonkheer', 'Dona'], 'Royalty')\ndata[\"Title\"].value_counts()","31b5325c":"sns.barplot(x=\"Title\", y=\"Survived\", data=data)","3cc2a9d1":"# Create a family size descriptor from SibSp and Parch\ndata[\"Fsize\"] = data[\"SibSp\"] + data[\"Parch\"] + 1\nsns.factorplot(x=\"Fsize\",y=\"Survived\",data = data)","1b78bc01":"# Create new feature of family size\ndef Fam_label(s):\n    if (s >= 2) & (s <= 4):\n        return 2\n    elif ((s > 4) & (s <= 7)) | (s == 1):\n        return 1\n    elif (s > 7):\n        return 0\ndata['FamilyLabel']=data['Fsize'].apply(Fam_label)","e348ea27":"sns.barplot(x=\"FamilyLabel\", y=\"Survived\", data=data)","6542c42a":"sns.barplot(x=\"Pclass\", y=\"Survived\", data=data)","aa7d1f03":"sns.barplot(x=\"Sex\", y=\"Survived\", data=data)","6b5538df":"Ticket_Count = dict(data['Ticket'].value_counts())\ndata['TicketGroup'] = data['Ticket'].apply(lambda x:Ticket_Count[x])\ndata['TicketGroup'].value_counts()","e1f3ff6e":"sns.barplot(x='TicketGroup', y='Survived', data=data)","fad2e6a9":"def Ticket_Label(s):\n    if (s >= 2) & (s <= 4):\n        return 2\n    elif ((s > 4) & (s <= 8)) | (s == 1):\n        return 1\n    elif (s > 8):\n        return 0\n\ndata['TicketGroup'] = data['TicketGroup'].apply(Ticket_Label)\nsns.barplot(x='TicketGroup', y='Survived', data=data)","029fda6e":"data.info()","367d601e":"age_df = data[['Age', 'Pclass','Sex','Title','Fsize']]\nage_df=pd.get_dummies(age_df)\nknown_age = age_df[age_df.Age.notnull()].as_matrix()\nunknown_age = age_df[age_df.Age.isnull()].as_matrix()\ny = known_age[:, 0]\nX = known_age[:, 1:]\nrfr=xgboost.XGBClassifier()\nrfr.fit(X, y)\npredictedAges = rfr.predict(unknown_age[:, 1::])\ndata.loc[(data.Age.isnull()), 'Age' ] = predictedAges ","b81d962e":"data.info()","4cedf65e":"data.head(1)","52ae458a":"data=data[['Survived','Age','Cabin','Embarked','Fare','Pclass','Sex','TicketGroup','FamilyLabel','Title']]\ndata=pd.get_dummies(data)","f52b04ac":"train=data[:len(raw_train)]\ntest=data[len(raw_train):].drop(['Survived'],axis=1)\nx = train.drop(['Survived'],axis=1)\ny = train.Survived","38306422":"model = ensemble.RandomForestClassifier(random_state = 10, \n                                      warm_start = True,\n                                      n_estimators = 26, \n                                      max_depth = 6, \n                                      max_features = 'sqrt')\nmodel.fit(x,y)","59cbbe87":"predictions = model.predict(test)\nsubmission = pd.DataFrame({\"PassengerId\": raw_test[\"PassengerId\"],\n                           \"Survived\": predictions.astype(np.int32)})\n# submission.to_csv(\"data\/submission.csv\", index=False)","57210a52":"### Parch & SibSp","fb70d1be":"### Name","753a4c30":"### Ticket","fb5e5f2a":"# Modeling","c4e469ad":"### Cabin","7501eece":"### Sex","b3510543":"# Load Data","e66bc213":"### Fare","86340337":"# Visualization & Data Cleaning","ad21760e":"### Embarked","3bc830b2":"### Pclass","6d0b21ec":"### Age"}}