{"cell_type":{"54119c03":"code","166ae1c5":"code","dfb1b794":"code","271cddec":"code","1916c9db":"code","86194d8e":"code","0e8e1df0":"code","74674074":"code","979fb1b3":"code","cb0dcaad":"code","5b537cac":"code","13e6a781":"code","a8c72a45":"code","6589d482":"code","4ef99a67":"code","699e5d08":"code","17b03774":"code","71b238ff":"code","97943070":"code","e1e8b94d":"code","6c3dd2bd":"code","c6c4b160":"code","833a1e0a":"markdown","2733e513":"markdown","1f06e604":"markdown","e460aef7":"markdown","04189286":"markdown","6cbc799d":"markdown","8046c0c7":"markdown","68efd661":"markdown","e0ff925c":"markdown","aca86453":"markdown","f43e45d5":"markdown","873bd346":"markdown"},"source":{"54119c03":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","166ae1c5":"import pandas as pd\nimport numpy as np\nimport os\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\n\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\n\nimport statsmodels.api as sm\nimport plotly.graph_objs as go\n\n#sns.set(rc = {'figure.figsize':(12,7)})","dfb1b794":"path_shared = '\/kaggle\/input\/nfl-big-data-bowl-2021\/{}'\ndf_players = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2021\/players.csv')\ndf_games = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2021\/games.csv')\ndf_plays = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2021\/plays.csv')","271cddec":"df_players.tail(3)","1916c9db":"#To change the height column:\ndf_players['height']=[int(x[0])*12 + int(x[2]) if '-' in x else x for x in df_players['height'] ]\ndf_players['height'] = pd.to_numeric(df_players['height'])","86194d8e":"#To change the birthDate column\ndf_players['birthDate'] = pd.to_datetime(df_players['birthDate']).dt.strftime('%m\/%d\/%Y')\ndf_players['birthDate']= pd.to_datetime(df_players['birthDate'])\n","0e8e1df0":"df_players.tail(3) #tadaaa, now we have a consistant dataframe.","74674074":"cat_item = {'Offense': ['QB', 'RB', 'FB', 'WR', 'TE', 'HB'], \n            'Defense': ['OLB', 'MLB', 'LB', 'ILB', 'CB', 'DE', 'DT', 'NT', 'DB', 'S', 'SS', 'FS'], \n            'Special': ['K', 'P', 'LS']}\nitem_cat = {w: k for k, v in cat_item.items() for w in v}\n\ndf_players['team_role'] = df_players['position'].map(item_cat)\n\ndf_players.tail(5)","979fb1b3":"df_college = df_players.groupby(['collegeName', 'team_role'], as_index = False)[['nflId']].count()\n\nbarchart_college = px.bar(\ndata_frame = df_college,\nx = 'collegeName',\ny = 'nflId',\ncolor = 'team_role',\nopacity = 0.9,\norientation = 'v',\nbarmode = 'relative',\nlabels = dict(nflId = 'number of players', collegeName = 'College Name', team_role = 'Which team are they playing in?'),\ncolor_discrete_map = {'Offense': 'gray', 'Defense': 'red', 'Special': 'blue'})\n\n\nbarchart_college.update_layout(xaxis={'categoryorder':'total descending'}, autosize = False, width =1000, height =500)","cb0dcaad":"birthyear_fig = px.histogram(df_players, x=\"birthDate\", labels = {'birthDate': 'Year of Birth'})\nbirthyear_fig.update_layout(autosize = False, width =1000, height =500)\nbirthyear_fig.show()\n","5b537cac":"#distribution based on team\nheight_weight_distribution = px.scatter(data_frame = df_players, x = 'weight', y = 'height', \n                                        color=\"team_role\", symbol = 'team_role',\n                                        color_discrete_map ={\"Defense\": \"red\", \"Offense\":\"gray\", \"Special\": \"blue\"},\n                                        marginal_x = 'histogram', marginal_y = 'box',\n                                        labels = {'team_role': 'team they are playing in:'})\n\n\nheight_weight_distribution.update_layout(autosize = False, width =1200, height =600)","13e6a781":"#based on position and team\nheight_weight_scatter = px.scatter(data_frame = df_players, x = 'weight', y = 'height', \n                                    color=\"team_role\", symbol = 'position', facet_col = 'team_role',\n                                  symbol_sequence = [3,100,102, 104, 208,14,114,19,125,0,101,4,125],\n                                  opacity = 0.7, color_discrete_map ={\"Defense\": \"red\", \"Offense\":\"gray\", \"Special\": \"blue\"},\n                                  labels = {'team_role': 'team'})\nheight_weight_scatter\nheight_weight_scatter.update_layout(autosize = False, width =1000, height =500)","a8c72a45":"yards_total = df_plays.groupby('possessionTeam').agg({'offensePlayResult': 'sum', 'gameId':'nunique'}).reset_index().rename(columns={'gameId': 'number of matches', 'offensePlayResult': 'yardsGained'})\nyards_total['averageYards']= np.round(yards_total['yardsGained']\/yards_total['number of matches'])\nyards_total.head()","6589d482":"fig_yards = make_subplots(rows=2, cols=1, shared_xaxes=True, shared_yaxes=False, subplot_titles=(\"total yards gained by each team during the whole season\", \"average yards gained by each team during the whole season\"))\n\nfig_yards.add_trace(go.Bar(x=yards_total['possessionTeam'], y=yards_total['yardsGained'],),\n1, 1)\nfig_yards.add_trace(go.Bar(x=yards_total['possessionTeam'], y=yards_total['averageYards'],),\n2, 1)\nfig_yards.update_layout(showlegend=False, xaxis={'categoryorder':'total descending'}, autosize = False, width =1000, height =700)\nfig_yards.show()","4ef99a67":"dropbacks_total = df_plays.groupby('typeDropback')['offensePlayResult'].agg(yardsGained='sum', popularity='count')\ndropback_passRes = df_plays.groupby(['typeDropback', 'passResult'])[['passResult']].count()\ndropback_passRes = dropback_passRes.add_suffix('_Count').reset_index()\nsuccess_dropback = dropback_passRes.loc[dropback_passRes['passResult']== 'C']\n\nmapping = dict(success_dropback[['typeDropback', 'passResult_Count']].values)\ndropbacks_total['succesful'] =dropbacks_total.index.map(mapping)\ndropbacks_total['averageYard'] = np.round(dropbacks_total['yardsGained']\/dropbacks_total['popularity'])\ndropbacks_total['success_normal'] = dropbacks_total['succesful']\/dropbacks_total['popularity']\ndropbacks_total = dropbacks_total.reset_index()\ndropbacks_total","699e5d08":"#lets plot the successful, popular and most yardgained dropbacks\n\ncolor_discrete_sequence=px.colors.qualitative.Dark2\ncolors = color_discrete_sequence[0:7]\n\nfig = make_subplots( subplot_titles=[\"average of yards gained by each type of dropback in whole season\", \n                                    \"popularity of dropbacks in whole season\", 'success rate of dropback types in whole season'],\n    rows=2, cols=2,\n    column_widths=[0.6, 0.4],\n    row_heights=[0.5, 0.5],\n    specs=[[{\"type\": \"bar\", \"rowspan\": 2}, {\"type\": \"pie\"}],\n           [            None                    , {\"type\": \"pie\"}]])\n\n# Add scattergeo globe map of volcano locations\nfig.add_trace(\n    go.Bar(x=dropbacks_total['typeDropback'], y=dropbacks_total['averageYard'],marker_color= colors,\n           ),\n    row=1, col=1\n)\n\n# Add locations pie chart popularity\nfig.add_trace(\n    go.Pie(values= dropbacks_total['popularity'], labels= dropbacks_total['typeDropback'],marker_colors=colors,\n           ),\n    row=1, col=2\n)\n\n# Add piechart successrate\nfig.add_trace(\n    go.Pie( values = dropbacks_total['success_normal'], labels =dropbacks_total['typeDropback'],marker_colors=colors),\n    row=2, col=2\n)\n\n\n# Rotate x-axis labels\n#fig.update_xaxes(tickangle=45)\n\n# Set theme, margin in layout\nfig.update_layout(\n    \n    template=\"plotly_dark\",\n    margin=dict(r=10, t=25, b=40, l=60),\n    showlegend=True,xaxis={'categoryorder':'total descending'}, autosize = False, width =1000, height =700\n)\n\n\nfig['layout']['annotations'][0].update(x=0.3, y=1);\nfig['layout']['annotations'][1].update(x=0.9, y=0.5);\nfig['layout']['annotations'][2].update(x=0.9, y=-0.1);\nfig.show()","17b03774":"#adding the necessary columns into plays\ndf_plays['week'] = df_plays['gameId'].map(df_games.set_index('gameId')['week'])\ndf_plays['homeTeam'] =df_plays['gameId'].map(df_games.set_index('gameId')['homeTeamAbbr'])\ndf_plays['guestTeam'] =df_plays['gameId'].map(df_games.set_index('gameId')['visitorTeamAbbr'])","71b238ff":"# preparing a table that has 3 columns, week number, number of matches, Matches between teams\nlist =range(1,18)\n\ngrand_list = []\nfor i in list:\n    name = 'week'+str(i)\n    y_week = df_plays.loc[df_plays['week']== i, ['gameId', 'homeTeam', 'guestTeam']]\n    y_week['matches'] = '['+ y_week['homeTeam']+ ','+ y_week['guestTeam']+']'\n    num_games = str(len(y_week['gameId'].unique()))\n    y_matches = np.array(y_week['matches'].unique().tolist())\n    data =[name, num_games, y_matches]\n    grand_list.append(data)\n\nlist_week = [item[0] for item in grand_list]\nlist_games = [item[1] for item in grand_list]\nlist_matches = [item[2] for item in grand_list]","97943070":"table_matches = go.Figure(data = go.Table(\n    columnorder= [1,2,3],\n    columnwidth = [90,100,1300],\n    \n    header = dict(values = ['Weeks', 'Number of Matches', 'Matches between teams'], align = 'center', height = 40),\n    cells = dict(values = [list_week, list_games, list_matches], align = 'center', height = 40)\n))\n\ntable_matches.layout.width = 1300\ntable_matches.show()","e1e8b94d":"#creating a new dataframe with the columns that I think might be helpful later for analytics\n\ndf_playes_new = df_plays[['week', 'gameId','possessionTeam', 'playType', 'offenseFormation', 'personnelO', \n'defendersInTheBox', 'numberOfPassRushers', 'personnelD', 'typeDropback',\n'passResult', 'offensePlayResult', 'homeTeam', 'guestTeam']].copy()\n\ndf_playes_new['matches'] = '['+ df_playes_new['homeTeam']+ ' , '+ df_playes_new['guestTeam']+']'\n\n# creating another dataframe just to visualize  playtype\ndf = df_playes_new.groupby(['week', 'matches', 'playType'])[['playType']].count()\n#to make convert df from groupby object into dataframe with columns\ndf = df.add_suffix('_Count').reset_index()\n\ndf.head(4)","6c3dd2bd":"#during the whole season its the playtype percentage played by teams\nplaytype_pichart = px.pie(\n    data_frame = df, \n    values = 'playType_Count', \n    names= 'playType', color = 'playType', \n    color_discrete_sequence =['mediumvioletred ', 'darkorange', 'blue'], hole = 0.3)\nplaytype_pichart","c6c4b160":"#to have a stacked bar chart  of playtype based on each game and each week\nbarchart_playtype = px.bar(\ndata_frame = df,\nx = 'week',\ny = 'playType_Count',\ncolor = 'playType',\nopacity = 0.9,\norientation = 'v',\nfacet_row = 'playType',\ncolor_discrete_sequence =['mediumvioletred ', 'darkorange', 'blue'],\nhover_name = 'matches',\nlabels = {'playType_Count': 'number of times play-type repeated in week', 'playType': 'play-type chosen by teams'},\ntitle = 'stacked bar chart for playtype based on each game, each week')\nbarchart_playtype.update_layout(height = 1200)\nbarchart_playtype.update_yaxes(matches = None)","833a1e0a":"# <div class=\"alert-info\">Visualization on plays data<\/div>\n","2733e513":"#### <div class=\"alert-success\">lets see how many players each college has (based on Offense Defense and Special<\/div>","1f06e604":"to do:\nmore plays analysis ( I need to think about it and read more online about football match)\nprobably I will focus on defence and offense style but if you have any suggestions for me, please share it with me","e460aef7":"#### <div class=\"alert-success\">How is the play-type in overall, and each week per game <\/div>\n\n(I am not sure if that would help for understanding the defense, but lets see, Later I can change my way of thinking. I am very new to football anyway)\n","04189286":"#### <div class=\"alert-success\">now it would be interesting to see which dropback type would result in most yards, to check that we consider some factors<\/div>\n* sum the whole yards that are gained by specific dropback type during the season.\n* calculate how many of each dropback had successful pass \n* figure out the popularity of drawback types during the whole season.\n    this would help us tho find the average yards gained by each\n    & success rate of each dropback type\n\n","6cbc799d":"#### <div class=\"alert-success\">lets see which matches took place in which weeks<\/div>\n* 1st we need to add some columns from games dataset into this one so that we can have draw some insights\n","8046c0c7":"#### <div class=\"alert-warning\">now based on the position of players we can know which player is going to play as Offense, Defense or Special team<\/div> ","68efd661":"#### <div class=\"alert-success\">lets see what is the age distribution of our players<\/div>","e0ff925c":"#### <div class=\"alert-success\">lets see the distribution height and weight of our players<\/div>\n\n* <div class=\"alert-success\">based on the team<\/div>\n* <div class=\"alert-success\">based on the position<\/div>\n\n","aca86453":"# <div class=\"alert-info\">Visualization on players data<\/div>\n","f43e45d5":"#### <div class=\"alert-success\">lets figure out which team obtains the most yards during the whole season<\/div>\n","873bd346":"### <div class=\"alert-danger\">It can be see that different rows on height and birthDate columns are not having the same format, so we need to fix this<\/div>"}}