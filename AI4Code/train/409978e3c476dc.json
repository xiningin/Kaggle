{"cell_type":{"99527436":"code","83a14ee8":"code","7265efcd":"code","319613a3":"code","5607d796":"code","78916de9":"code","ad0db846":"code","8e0d92b7":"code","1f5ff461":"code","71d0a6f8":"code","0eb81a4d":"code","b56e0bb7":"code","af3ff9d2":"code","3e29870c":"code","e5f0f24e":"code","51297576":"code","7a9101cd":"code","34da0433":"code","f89764ea":"code","fb73b23b":"code","fe78193b":"code","6cbd73c3":"code","444d8dba":"code","eb103dc0":"code","bb7286fd":"code","73015738":"markdown","2919e40b":"markdown","7ca12c9f":"markdown","33b0e506":"markdown","cd957cff":"markdown","1058973c":"markdown","c62c0b0a":"markdown","efd79e6e":"markdown","601d4923":"markdown","ab52b659":"markdown","b790b326":"markdown","ef0aa9e9":"markdown","9d9d43f0":"markdown","8ad99938":"markdown","74242636":"markdown","26c30baf":"markdown","b18859fd":"markdown","24d6b131":"markdown","e8f92d9e":"markdown","c41d42b1":"markdown","759d912b":"markdown","1a986f05":"markdown"},"source":{"99527436":"# Data processing\nimport numpy as np\nimport pandas as pd\n\n# Visualization\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\n# Setting custom style\nimport matplotlib.font_manager as fm\nfont = fm.FontProperties(fname='..\/input\/crimsonpro\/CrimsonPro-Regular.ttf')\nbold = fm.FontProperties(fname='..\/input\/crimsonpro\/CrimsonPro-Bold.ttf')","83a14ee8":"# rcParams\nmy_colours = [\"#14213d\", \"#fca311\", \"#ef233c\"] # navy, yellow, red\ngreys = [\"#595959\", \"#7f7f7f\",\"#a5a5a5\", \"#cccccc\", \"#f2f2f2\"] # Grey dark to light\npinks = [\"#fff0f3\", \"#ffccd5\", \"#ffb3c1\", \"#ff8fa3\", \"#ff758f\", \"#ff4d6d\", \"#c9184a\", \"#800f2f\"]\n\nplt.rcParams['figure.dpi'] = 300\nplt.rcParams['font.family'] = font.get_name()\nplt.rcParams[\"figure.facecolor\"] = \"white\"\nplt.rcParams['axes.facecolor']= \"white\"\n\nplt.rcParams['axes.linewidth'] = 1.0\nplt.rcParams['axes.edgecolor'] = greys[3]\nplt.rcParams['axes.spines.right'] = False\nplt.rcParams['axes.spines.top'] = False\nplt.rcParams['axes.xmargin'] = 0.05\n\nplt.rcParams['xtick.color']= greys[3]\nplt.rcParams['ytick.color']= greys[3]\nplt.rcParams['xtick.labelsize']= 7\nplt.rcParams['xtick.labelcolor']= greys[1]\nplt.rcParams['ytick.labelsize']= 7\nplt.rcParams['ytick.labelcolor']= greys[1]","7265efcd":"# Import data\ndata=pd.read_csv(\"..\/input\/kaggle-survey-2021\/kaggle_survey_2021_responses.csv\", low_memory=False)\ndata.shape #(25974, 369)\n\n# Previous year surveys\ndf17=pd.read_csv(\"..\/input\/kaggle-survey-2017\/multipleChoiceResponses.csv\", low_memory=False, encoding='latin-1')\ndf18=pd.read_csv(\"..\/input\/kaggle-survey-2018\/multipleChoiceResponses.csv\", low_memory=False, encoding='latin-1')\ndf19=pd.read_csv(\"..\/input\/kaggle-survey-2019\/multiple_choice_responses.csv\", low_memory=False, encoding='latin-1')\ndf20=pd.read_csv(\"..\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv\", low_memory=False, encoding='latin-1')\n\n# Dividing the dataframe by number of employees\ndfs = [pd.DataFrame(y) for x, y in data.groupby('Q21', as_index=False)]\n\n# Saving the questions as a separate dictionary\nQ = dfs[5].to_dict('index')[0]\n\n# Separate dataframes per company size\nsmall = dfs[0]\nsmall['size'] = 'small'\n\nmedium = dfs[4]\nmedium['size'] = 'medium'\n\nbig = pd.concat([dfs[1], dfs[2], dfs[3]])\nbig['size'] = 'big'\n\n# Combined df\ndf = pd.concat([small, medium, big])\n\nprint('Small', small.shape, 'Medium-sized', medium.shape, 'Big', big.shape, 'Combined', df.shape)","319613a3":"# Line plot \nyears = ['2017', '2018', '2019', '2020', '2021']\nno_of_respondents = [len(df17), len(df18), len(df19), len(df20), len(data)]\n\n# Grouped bar chart\ngrp_df = pd.DataFrame([['Small', '2019', 4025], ['Big', '2019', 7648], ['Small', '2020', 4208], ['Big', '2020', 5524], ['Small', '2021', 5055], ['Big', '2021', 8629]], columns=['Size', 'Year', 'Count'])\n\n# Pie chart\nrespndnts = [len(small), len(medium), len(big)]\nlab = [\"Small\", \"Medium-sized\", \"Big\"]\nwed={\"width\": 0.4}\n\n# Subplots\nfig, axs = plt.subplots(1, 3, figsize=(15, 6))\naxs[0].plot(years, no_of_respondents, '-o', linewidth=2, color=greys[2], markersize=5)\naxs[0].set_title(\"Number of Respondents per year\", font=font, fontsize=12)\nfor i,j in zip(years,no_of_respondents):\n    axs[0].annotate(str(j),xy=(i,j+200), fontsize=8)\n\nsns.barplot(ax=axs[1], data=grp_df, x='Year', y='Count', hue='Size', palette=[greys[2], greys[4]])\nfor container in axs[1].containers:\n    axs[1].bar_label(container, fontsize=7)\naxs[1].set_title(\"Number of Small versus Big companies\", font=font, fontsize=12)\naxs[1].tick_params(tick1On=False)\naxs[1].axes.yaxis.set_visible(False)\naxs[1].set_xlabel(' ')\naxs[1].legend(prop=font, fontsize=8)\n\naxs[2].pie(respndnts, labels=lab, autopct='%.f%%', pctdistance=.8, colors=[greys[2], greys[3], greys[4]], wedgeprops=wed, normalize=True)\naxs[2].set_title(\"Proportion of respondents by company size\", font=font, fontsize=12)","5607d796":"# Gender (Q2)\nall_Q2 = data[\"Q2\"].value_counts().to_frame().drop(index=\"What is your gender? - Selected Choice\")\nall_Q2.iloc[2] = all_Q2.iloc[2:].sum()\nall_Q2 = all_Q2.iloc[:3].transform(lambda x: x\/x.sum()).rename(index={'Prefer not to say':'Other'}).reset_index()\n\ndef combine_data(data):\n    x = data[\"Q2\"].value_counts().to_frame()\n    x.iloc[2] = x.iloc[2:].sum()\n    return x.iloc[:3].transform(lambda x: x\/x.sum()).rename(index={'Prefer not to say':'Other'}).reset_index()\n\nQ2_s = combine_data(small)\nQ2_m = combine_data(medium)\nQ2_b = combine_data(big)\n\n# Bar plots\ndef bar_plot(ax, data, title, x, y, color):\n    sns.barplot(ax=ax, data=data, x=x, y=y, color=color)\n    ax.set_title(title, fontsize=12, font=font, color=greys[0])\n    ax.bar_label(ax.containers[0], fmt='%.2f', fontsize=8, color=greys[0])\n    ax.set_xlabel(\" \")\n    ax.set_ylabel(\" \")\n    \nfig, (ax0, ax1, ax2, ax3) = plt.subplots(1,4, figsize=(16,6))\nfig.supxlabel(\" \")\n\nbar_plot(ax0, all_Q2, \"All Kaggle\",\"index\", \"Q2\",  greys[2])\nax0.set_ylabel('Proportion', font=font, color=greys[1])\n\nbar_plot(ax1, Q2_s, \"Small Company\",\"index\", \"Q2\", greys[3])\nbar_plot(ax2, Q2_m, \"Medium-sized Company\", \"index\", \"Q2\",greys[3])\nbar_plot(ax3, Q2_b, \"Big Company\",\"index\", \"Q2\", greys[3])","78916de9":"# Age (Q1)\nQ1_s = small[\"Q1\"].value_counts().to_frame().sort_index(ascending=True).reset_index()\nQ1_m = medium[\"Q1\"].value_counts().to_frame().sort_index(ascending=True).reset_index()\nQ1_b = big[\"Q1\"].value_counts().to_frame().sort_index(ascending=True).reset_index()\n\n# Medium Age Group\nQ1_s[\"cumsum\"] = Q1_s[\"Q1\"].cumsum() # (5055+1)\/2 Median age group: 25-29\nQ1_m[\"cumsum\"] = Q1_m[\"Q1\"].cumsum() #(2567+1)\/2 Median age group: 30-34\nQ1_b[\"cumsum\"] = Q1_b[\"Q1\"].cumsum() # (8629+1)\/2 Median age group: 30-34\n\ndef bar_plot_age(ax, data, title, x, y, median, text, x_t, y_t):\n    sns.barplot(ax=ax, data=data, x=x, y=y, palette=[my_colours[2] if x== median else greys[2] for x in Q1_s['index']])\n    ax.set_title(title, fontsize=12, font=font, color=greys[0])\n    ax.bar_label(ax.containers[0], fmt='%.f', fontsize=8, color=greys[0])\n    ax.set_xlabel(\" \")\n    ax.set_ylabel(\" \")\n    ax.xaxis.set_tick_params(labelsize=8)\n    ax.yaxis.set_tick_params(labelsize=8)\n    ax.text(x_t, y_t, text, font=font, c=my_colours[2])\n    \n# Bar plots\nfig, (ax1, ax2, ax3) = plt.subplots(1,3, figsize=(18, 6))\n\nbar_plot_age(ax1, Q1_s, \"Small Company\", \"index\", \"Q1\", '25-29', \"Median Age Group: 25-29\", 2.8, 800)\nbar_plot_age(ax2, Q1_m, \"Medium-sized Company\", \"index\", \"Q1\", '30-34', \"Median Age Group: 30-34\", 4, 450)\nbar_plot_age(ax3, Q1_b, \"Big Company\", \"index\", \"Q1\", '30-34', \"Median Age Group: 30-34\", 4, 1350)","ad0db846":"# Proportion of age\nQ1_s['proportion'] = Q1_s[\"Q1\"] \/ Q1_s[\"Q1\"].sum()*100\nQ1_m['proportion'] = Q1_m[\"Q1\"] \/ Q1_m[\"Q1\"].sum()*100\nQ1_b['proportion'] = Q1_b[\"Q1\"] \/ Q1_b[\"Q1\"].sum()*100\n\nfig = plt.figure(figsize=(16, 8))\nplt.plot(Q1_s['index'], Q1_s[\"proportion\"], linewidth=3, color=greys[2])\nplt.bar(Q1_s['index'], Q1_s[\"proportion\"], alpha=0.3, color=greys[2])\n\nplt.plot(Q1_b['index'], Q1_b[\"proportion\"], linewidth=3, color=my_colours[2])\nplt.bar(Q1_b['index'], Q1_b[\"proportion\"], alpha=0.3, color=my_colours[2])\n\nplt.title(\"Age distribution of small and big businesses\", font=bold, fontsize=17, color=greys[1])\nplt.text(1, 20, \"Small\", font=bold, fontsize=16, color=greys[2])\nplt.text(3.5, 18, \"Big\", font=bold, fontsize=16, color=my_colours[2])\nplt.xlabel(' ')\nplt.ylabel('Percentage of total workforce', font=bold, fontsize=12, color=greys[2])\nplt.show()","8e0d92b7":"# Level of Education\nedu = df.groupby([\"size\", \"Q4\"]).size().groupby(level = 0).transform(lambda x: round(x\/x.sum(),3)).to_frame(\"proportion\").reset_index()\nlabels = ['No formal education past high school', \"Some college\/university study without earning a bachelor\u2019s degree\", \"Bachelor\u2019s degree\", \"Master\u2019s degree\", \"Doctoral degree\", \"Professional doctorate\", \"I prefer not to answer\"]\nx = np.arange(len(labels))\nwidth=0.2\n\ns_edu = edu[edu[\"size\"]==\"small\"].set_index(\"Q4\").reindex(labels)[\"proportion\"].to_list()\nm_edu = edu[edu[\"size\"]==\"medium\"].set_index(\"Q4\").reindex(labels)[\"proportion\"].to_list()\nb_edu = edu[edu[\"size\"]==\"big\"].set_index(\"Q4\").reindex(labels)[\"proportion\"].to_list()\nall_edu = data.groupby([\"Q4\"]).size().transform(lambda x: round(x\/x.sum(),3)).to_frame(\"proportion\").reindex(labels)\n\nfig, ax = plt.subplots(figsize=(16, 8)) \nrects1 = ax.bar(x - width, s_edu, width, label='Small', color=greys[0])\nrects2 = ax.bar(x,  m_edu, width, label='Medium-sized', color=greys[1])\nrects3 = ax.bar(x + width, b_edu, width, label=\"Big\", color=greys[2])\n\nax.set_title(\"Education levels\", font=bold, fontsize=17, color=greys[1])\nax.set_xlabel(' ')\nax.set_ylabel('Proportion', font=font, fontsize=15, color=greys[1])\nlabels[0] = \"No formal education\"\nlabels[1] = \"Some college study w\/o bachelor's\"\nax.set_xticks(x)\nax.set_xticklabels(labels, font=font, fontsize=12)\nax.legend(prop=font)\nax.bar_label(rects1, padding=3, fontsize=9, font=font)\nax.bar_label(rects2, padding=3, fontsize=9, font=font)\nax.bar_label(rects3, padding=3, fontsize=9, font=font)\n\nfig.tight_layout()\nplt.show()","1f5ff461":"colors = [greys[4], greys[4], greys[3], \"#ef233c\", \"#d90429\",  \"#d90429\", greys[4]]\nexplode = [0, 0, 0, .04, .04, .04, 0]\nwedgeprops={\"edgecolor\": greys[0],\"width\": 0.6}\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 7))\n\nax1.pie(s_edu, autopct='%.f%%', pctdistance=.8, wedgeprops=wedgeprops, explode=explode, colors=colors, normalize=False, textprops={'fontsize': 10})\nax2.pie(b_edu, autopct='%.f%%', pctdistance=.8, wedgeprops=wedgeprops, explode=explode, colors=colors, normalize=True, textprops={'fontsize': 10})\n\nax1.set_title('Small Companies', font=font, fontsize=14)\nax2.set_title('Big Companies', font=font, fontsize=14)\n\nfig.legend(labels, prop=font, loc=\"lower right\")","71d0a6f8":"# Industries\ng=list(reversed(greys))\nind = df.groupby([\"Q20\"]).size().to_frame('proportion').transform(lambda x: x\/x.sum()).reset_index()\n\nfig = px.treemap(ind, path=[\"Q20\"], values=\"proportion\", color=\"proportion\", color_continuous_scale=pinks)\nfig.update_layout(margin = dict(t=0, l=0, r=0, b=0))\nfig.show()","0eb81a4d":"# Industries\nQ20=df.groupby([\"Q20\", \"size\"]).size().groupby(level = 0).transform(lambda x: round(x\/x.sum(), 2)).to_frame(\"Proportion\").unstack()\nplt.figure(figsize = (9,9))\nax = sns.heatmap(Q20, cmap=g, annot=True)\nplt.xticks([0.5, 1.5, 2.5], ['Big', 'Medium-sized', \"Small\"], font=font)\nplt.title('Proportion of Company Size by Industries', font=bold, fontsize=15)\nax.set_xlabel('Company Size', font=font)\nax.set_ylabel('Industries', font=font)","b56e0bb7":"small_ds = small[small['Q5']==\"Data Scientist\"] # Data Scientists in small companies\nbig_ds = big[big['Q5']==\"Data Scientist\"] # Data Scientsits in big companies\nprint(small_ds.shape, big_ds.shape)\n\n\nsalary_order = ['$0-999', '1,000-1,999', '2,000-2,999','3,000-3,999','4,000-4,999', '5,000-7,499', '7,500-9,999', '10,000-14,999','15,000-19,999', '20,000-24,999', '25,000-29,999', \"30,000-39,999\", \"40,000-49,999\", \"50,000-59,999\", \"60,000-69,999\", \"70,000-79,999\", \"80,000-89,999\", \"90,000-99,999\", \"100,000-124,999\", \"125,000-149,999\", \"150,000-199,999\", \"200,000-249,999\", \"250,000-299,999\", \"300,000-499,999\", \"$500,000-999,999\", \">$1,000,000\"]\nQ25_s = small_ds.groupby([\"Q25\"]).size().transform(lambda x: round(x\/x.sum()*100, 2)).to_frame('proportion').reindex(salary_order)\nQ25_b = big_ds.groupby([\"Q25\"]).size().transform(lambda x: round(x\/x.sum()*100, 2)).to_frame('proportion').reindex(salary_order)\n\nfig = plt.figure(figsize=(16, 8))\nplt.plot(Q25_s.index, Q25_s[\"proportion\"], linewidth=3, color=greys[2])\nplt.bar(Q25_s.index, Q25_s[\"proportion\"], alpha=0.3, color=greys[2])\n\nplt.plot(Q25_b.index, Q25_b[\"proportion\"], linewidth=3, color=my_colours[2])\nplt.bar(Q25_b.index, Q25_b[\"proportion\"], alpha=0.3, color=my_colours[2])\n\nplt.title(\"Yearly compensation distribution\", font=font, fontsize=16, color=greys[2])\nplt.text(1, 15, \"Small\", font=bold, fontsize=16, color=greys[2])\nplt.text(6, 8, \"Big\", font=bold, fontsize=16, color=my_colours[2])\nplt.xticks(rotation=90)\nplt.xlabel(' ')\nplt.ylabel(' ')\nplt.show()","af3ff9d2":"salary_order2 = ['1,000-1,999','2,000-2,999','3,000-3,999','4,000-4,999', '5,000-7,499', '7,500-9,999', '10,000-14,999','15,000-19,999', '20,000-24,999', '25,000-29,999', \"30,000-39,999\", \"40,000-49,999\", \"50,000-59,999\", \"60,000-69,999\", \"70,000-79,999\", \"80,000-89,999\", \"90,000-99,999\", \"100,000-124,999\", \"125,000-149,999\", \"150,000-199,999\", \"200,000-249,999\", \"250,000-299,999\", \"300,000-499,999\", \"$500,000-999,999\", \">$1,000,000\"]\n\nQ25_s = small_ds.groupby([\"Q25\"]).size().to_frame(\"proportion\").iloc[1:, :].transform(lambda x: round(x\/x.sum()*100, 2)).reindex(salary_order2)\nQ25_b = big_ds.groupby([\"Q25\"]).size().to_frame(\"proportion\").iloc[1:, :].transform(lambda x: round(x\/x.sum()*100, 2)).reindex(salary_order2)\n\nfig = plt.figure(figsize=(16, 8))\nplt.plot(Q25_s.index, Q25_s[\"proportion\"], linewidth=3, color=greys[2])\nplt.bar(Q25_s.index, Q25_s[\"proportion\"], alpha=0.3, color=greys[2])\n\nplt.plot(Q25_b.index, Q25_b[\"proportion\"], linewidth=3, color=my_colours[2])\nplt.bar(Q25_b.index, Q25_b[\"proportion\"], alpha=0.3, color=my_colours[2])\n\nplt.title('Yearly compensation of big and small companies with $0-999 bracket removed', font=font, fontsize=16, color=greys[2])\nplt.text(1, 14, \"Small\", font=bold, fontsize=16, color=greys[2])\nplt.text(10, 8, \"Big\", font=bold, fontsize=16, color=my_colours[2])\nplt.xticks(rotation=90)\nplt.xlabel(' ')\nplt.ylabel(' ')\nplt.show()","3e29870c":"# Jobs of all participants\nQ5_cols = [greys[3]]*9 + [my_colours[2],my_colours[2],greys[3],my_colours[2]]\nax = df['Q5'].value_counts().sort_values().plot.barh(color=Q5_cols, figsize=(10,4), width=0.7)","e5f0f24e":"# Distribution of respondents\nQ5_s = small['Q5'].value_counts().sort_values(ascending=False)\nroles_order = ['Data Scientist', 'Software Engineer', 'Data Analyst', 'Machine Learning Engineer', 'Research Scientist', 'Business Analyst', 'Program\/Project Manager', 'Data Engineer', 'Statistician', 'Product Manager', 'DBA\/Database Engineer', 'Developer Relations\/Advocacy', 'Other']\nQ5_b = big['Q5'].value_counts().reindex(roles_order)\n\nfig, (ax1, ax2) = plt.subplots(1,2, figsize=(18, 6))\nQ5_s.plot.bar(ax=ax1, color=greys[2], width=.8)\nQ5_b.plot.bar(ax=ax2, color=greys[2], width=.8)\n\nfig.suptitle('Job distribution', font=font, fontsize=16, color=greys[1])\nax1.set_xlabel('Small Company', font=font, fontsize=15, color=greys[1])\nax2.set_xlabel('Big Company', font=font, fontsize=15, color=greys[1])","51297576":"# Preference of Cloud Provider\nQ27 = ['Q27_A_Part_1','Q27_A_Part_2','Q27_A_Part_3','Q27_A_Part_4','Q27_A_Part_5','Q27_A_Part_6','Q27_A_Part_7','Q27_A_Part_8','Q27_A_Part_9','Q27_A_Part_10','Q27_A_Part_11','Q27_A_OTHER']\ncloud = [\"AWS\", \"Azure\", \"GCP\", \"IBM\", \"Oracle\", \"SAP\", \"Salesforce\", \"VMware\", \"Alibaba\", \"Tencent\", \"None\", \"Other\"]\n\nbig_Q27 = big[Q27]\nsmall_Q27 = small[Q27]\nbig_Q27.columns = cloud\nsmall_Q27.columns = cloud\n\nfig, (ax1, ax2) = plt.subplots(1,2, figsize=(18, 6))\ncloud_cols = [my_colours[2]]*3 + [greys[3]]*9\n\nsmall_Q27.count().plot.bar(ax=ax1, color=cloud_cols, width=.8)\nbig_Q27.count().plot.bar(ax=ax2, color=cloud_cols, width=.8)\n\nfig.suptitle('Cloud providers', font=font, fontsize=16)\nax1.set_xlabel('Small Company', font=font, fontsize=15, color=greys[1])\nax2.set_xlabel('Big Company', font=font, fontsize=15, color=greys[1])","7a9101cd":"idx = ['I have never written code','< 1 years', '1-3 years', '3-5 years',  '5-10 years', '20+ years', '10-20 years']\n\nfig, (ax1, ax2) = plt.subplots(1,2, figsize=(18, 6))\n\ns = small_ds['Q6'].value_counts().reindex(idx).plot.bar(ax=ax1, width=0.8, color=pinks)\nb = big_ds['Q6'].value_counts().reindex(idx).plot.bar(ax=ax2, width=0.8, color=pinks)\n\nfig.suptitle('Coding experience', font=font, fontsize=16)\nax1.set_xlabel('Small Company', font=font, fontsize=15, color=greys[1])\nax2.set_xlabel('Big Company', font=font, fontsize=15, color=greys[1])","34da0433":"team_size = ['0', '1-2', '3-4','5-9','10-14', '15-19', '20+']\n\nQ22_small = small_ds['Q22'].value_counts().transform(lambda x: round(x\/x.sum()*100, 2)).to_frame('proportion').reindex(team_size)\nQ22_big = big_ds['Q22'].value_counts().transform(lambda x: round(x\/x.sum()*100, 2)).to_frame('proportion').reindex(team_size)\n\nfig, (ax1, ax2) = plt.subplots(1,2, figsize=(18, 6))\nQ22_small.plot.bar(ax=ax1, width=0.8, color=greys[2], legend=None)\nQ22_big.plot.bar(ax=ax2, width=0.8, color=greys[2], legend=None)\n\nfig.suptitle('Team size', font=font, fontsize=16)\nax1.set_xlabel('Small Company', font=font, fontsize=15, color=greys[1])\nax2.set_xlabel('Big Company', font=font, fontsize=15, color=greys[1])","f89764ea":"# Computing platform used\nlabel = ['A laptop', 'A personal computer\/desktop', 'A cloud computing platform', 'A deep learning workstation', 'None', 'Other']\nc = [greys[4], greys[3], greys[2], greys[1], greys[0], greys[0]]\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 7))\n\nax1.pie(small['Q11'].value_counts(normalize=True), labels=label, autopct='%.f%%', pctdistance=.8, wedgeprops=wedgeprops, colors=c, textprops={'fontsize': 10})\nax2.pie(big['Q11'].value_counts(normalize=True), labels=label, autopct='%.f%%', pctdistance=.8, wedgeprops=wedgeprops, colors=c, textprops={'fontsize': 10})\n\nax1.set_title('Small Companies', font=font, fontsize=14)\nax2.set_title('Big Companies', font=font, fontsize=14)\n\nfig.suptitle('Computing Platform used', font=font, fontsize=16)\nfig.legend(label, prop=font, loc=\"lower right\")","fb73b23b":"# Languages used by Data Scientists in Small vs Big Companies\nQ7 = ['Q7_Part_1','Q7_Part_2','Q7_Part_3','Q7_Part_4','Q7_Part_5','Q7_Part_6','Q7_Part_7','Q7_Part_8','Q7_Part_9','Q7_Part_10','Q7_Part_11','Q7_Part_12','Q7_OTHER']\nlanguages = ['Python', 'R', 'SQL', 'C', 'C++', 'Java', 'JavaScript', 'Julia', 'Swift', 'Bash', 'MATLAB', 'None', 'Other']\n\nbig_Q7 = big_ds[Q7].count().transform(lambda x: round(x\/x.sum()*100, 2)).to_frame('proportion')\nsmall_Q7 = small_ds[Q7].count().transform(lambda x: round(x\/x.sum()*100, 2)).to_frame('proportion')\n\nsmall_Q7.index, big_Q7.index = languages, languages\n\nfig, (ax1, ax2) = plt.subplots(1,2, figsize=(18, 6))\n\nsmall_Q7.plot.bar(ax=ax1, color=greys[3], width=.8, legend=None)\nbig_Q7.plot.bar(ax=ax2, color=greys[3], width=.8, legend=None)\n\nfig.suptitle('Languages', font=font, fontsize=16)\nax1.set_xlabel('Small Company', font=font, fontsize=15, color=greys[1])\nax2.set_xlabel('Big Company', font=font, fontsize=15, color=greys[1])","fe78193b":"small_ds.columns.to_list()\nQ14 = ['Q14_Part_1','Q14_Part_2','Q14_Part_3','Q14_Part_4','Q14_Part_5','Q14_Part_6','Q14_Part_7','Q14_Part_8','Q14_Part_9','Q14_Part_10','Q14_Part_11','Q14_OTHER']\nviz = [small_ds[Q14][i].dropna().unique()[0] for i in small_ds[Q14].columns]\n\nbig_Q14, small_Q14 = big_ds[Q14], small_ds[Q14]\nbig_Q14.columns, small_Q14.columns = viz, viz\n\nfig, (ax1, ax2) = plt.subplots(1,2, figsize=(18, 6))\n\nsmall_Q14.count().plot.bar(ax=ax1, color=greys[3], width=.8)\nbig_Q14.count().plot.bar(ax=ax2, color=greys[3], width=.8)\n\nfig.suptitle('Data Visualization Tools', font=font, fontsize=16)\nax1.set_xlabel('Small Company', font=font, fontsize=15, color=greys[1])\nax2.set_xlabel('Big Company', font=font, fontsize=15, color=greys[1])","6cbd73c3":"Q23 = df.groupby([\"size\", \"Q23\"]).size().to_frame(\"percentage\")\nQ23 = Q23.groupby(level=0).apply(lambda x: round(100 * x \/ float(x.sum()),1)).reset_index()\n\nlabels = ['I do not know', 'No', 'No<br>Exploring Methods', 'Yes<br>Well<br>established', 'Yes<br>Started<br>recently', 'Yes<br>For insights']\nx_data = list(Q23['percentage'].tolist()[i*6+min(i, 0):(i+1)*6+min(i+1, 0)] for i in range(3))\ny_data = ['big', 'medium', 'small']\ncolours = [greys[4], greys[2], greys[2], my_colours[2], my_colours[2], my_colours[2]]\n\nfig = go.Figure()\n\nfor i in range(0, len(x_data[0])):\n    for xd, yd in zip(x_data, y_data):\n        fig.add_trace(go.Bar(\n            x=[xd[i]], y=[yd],\n            orientation='h',marker=dict(color=colours[i],line=dict(color=greys[4], width=1))))\n\nfig.update_layout(\n    xaxis=dict(showgrid=False,showline=False,showticklabels=False,zeroline=False,domain=[0.15, 1]),\n    yaxis=dict(showgrid=False,showline=False,showticklabels=False,zeroline=False,),barmode='stack',\n    paper_bgcolor=\"white\",plot_bgcolor=\"white\",margin=dict(l=60, r=60, t=140, b=60), showlegend=False)\n\nannotations = []\n\nfor yd, xd in zip(y_data, x_data):\n    annotations.append(dict(xref='paper', yref='y',x=0.14, y=yd,xanchor='right',text=str(yd),\n                            font=dict(family='Open Sans', size=14,color=greys[1]),showarrow=False, align='right'))\n\n    annotations.append(dict(xref='x', yref='y', x=xd[0] \/ 2, y=yd, text=str(xd[0]) + '%',\n                            font=dict(family='Open Sans', size=18, color=greys[1]),showarrow=False))\n\n    if yd == y_data[-1]:\n        annotations.append(dict(xref='x', yref='paper',x=xd[0] \/ 2, y=1.1,text=labels[0],\n                                font=dict(family='Open Sans', size=10, color=greys[1]), showarrow=False))\n    space = xd[0]\n    for i in range(1, len(xd)):\n            annotations.append(dict(xref='x', yref='y',x=space + (xd[i]\/2), y=yd,text=str(xd[i]) + '%',\n                                    font=dict(family='Open Sans', size=18,color='rgb(248, 248, 255)'), showarrow=False))\n\n            if yd == y_data[-1]:\n                annotations.append(dict(xref='x', yref='paper',\n                                        x=space + (xd[i]\/2), y=1.1, text=labels[i],font=dict(family='Open Sans', size=10,\n                                                  color='rgb(67, 67, 67)'), showarrow=False))\n            space += xd[i]\n\nfig.update_layout(annotations=annotations)\nfig.show()","444d8dba":"# Number of years of using ML methods\nyrs = ['I do not use machine learning methods', 'Under 1 year', '1-2 years',  '2-3 years', '3-4 years',  '4-5 years', '5-10 years','10-20 years', '20 or more years']\ncm = [\"#f8f9fa\", \"#e9ecef\",\"#dee2e6\",\"#ced4da\",\"#adb5bd\",\"#6c757d\",\"#495057\",\"#343a40\",\"#212529\"]\n\nQ15_s = small_ds[['Q15']].value_counts().to_frame(\"count\")\nQ15_b = big_ds[['Q15']].value_counts().to_frame(\"count\")\n\nQ15_s.index, Q15_b.index = yrs, yrs\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 7))\n\nax1.pie(Q15_s['count'], labels=yrs, autopct='%.f%%', pctdistance=.8, wedgeprops=wedgeprops, colors=cm, textprops={'fontsize': 10})\nax2.pie(Q15_b['count'], labels=yrs, autopct='%.f%%', pctdistance=.8, wedgeprops=wedgeprops, colors=cm, textprops={'fontsize': 10})\n\nax1.set_title('Small Companies', font=font, fontsize=14)\nax2.set_title('Big Companies', font=font, fontsize=14)\n\nfig.suptitle('Years of experience using machine learning methods', font=font, fontsize=16)\nfig.legend(yrs, prop=font, loc=\"lower right\")\n","eb103dc0":"# ML Frameworks and algorithms\ndef get_unq(df, cols):\n    lst = []\n    for i in range(len(cols)):\n        lst.append(df[cols[i]].dropna().unique()[0])\n    return lst\n\nQ16= ['Q16_Part_1','Q16_Part_2','Q16_Part_3','Q16_Part_4','Q16_Part_5','Q16_Part_6','Q16_Part_7','Q16_Part_8','Q16_Part_9','Q16_Part_10','Q16_Part_11','Q16_Part_12','Q16_Part_13','Q16_Part_14','Q16_Part_15','Q16_Part_16','Q16_Part_17','Q16_OTHER']\nQ17= ['Q17_Part_1','Q17_Part_2','Q17_Part_3','Q17_Part_4','Q17_Part_5','Q17_Part_6','Q17_Part_7','Q17_Part_8','Q17_Part_9','Q17_Part_10','Q17_Part_11','Q17_OTHER']\nQ16_labels=get_unq(small_ds[Q16], Q16)\nQ17_labels=get_unq(small_ds[Q17], Q17)\n\nQ16_s = small_ds[Q16].count().to_frame('small').transform(lambda x: round(x\/x.sum()*100,1))\nQ16_b = big_ds[Q16].count().to_frame('big').transform(lambda x: round(x\/x.sum()*100,1))\nQ16_s.index, Q16_b.index = Q16_labels, Q16_labels\nQ16_df = pd.concat([Q16_s, Q16_b], axis=1)\n\nQ17_s = small_ds[Q17].count().to_frame('small').transform(lambda x: round(x\/x.sum()*100,1))\nQ17_b = big_ds[Q17].count().to_frame('big').transform(lambda x: round(x\/x.sum()*100,1))\nQ17_s.index, Q17_b.index = Q17_labels, Q17_labels\nQ17_df = pd.concat([Q17_s, Q17_b], axis=1)\n\nML_cols ={\"small\": greys[2], \"big\":my_colours[2]}\n\nfig, (ax1, ax2) = plt.subplots(1,2, figsize=(18, 8))\n\nQ16_df.plot.barh(ax=ax1, width=.9, color=ML_cols, alpha=.7)\nax1.invert_yaxis()\nax1.get_legend().remove()\nax1.tick_params(axis=u'both', which=u'both',length=0)\nax1.spines['left'].set_visible(False)\n\nQ17_df.plot.barh(ax=ax2, width=.8, color=ML_cols, alpha=.7)\nax2.invert_yaxis()\nax2.tick_params(axis=u'both', which=u'both',length=0)\nax2.spines['left'].set_visible(False)\n\nfig.suptitle('Machine Learning Libraries and Algorithms', font=font, fontsize=16)\nax1.set_xlabel('Machine Learning Frameworks', font=font, fontsize=15, color=greys[1])\nax2.set_xlabel('Machine Learning Algorithms', font=font, fontsize=15, color=greys[1])","bb7286fd":"# Activities that make up an important part of your role at work\nQ24 = ['Q24_Part_1','Q24_Part_2','Q24_Part_3','Q24_Part_4','Q24_Part_5','Q24_Part_6','Q24_Part_7','Q24_OTHER']\nQ24_labels = ['Analyze and understand data', 'Build and\/or run \\n the data infrastructure', 'Build prototypes', 'Build and\/or run \\n a machine learning service', 'Improve existing ML models', 'Research', 'None of the options', 'Other']\n\nQ24_s = small_ds[Q24].count().to_frame('small').transform(lambda x: round(x\/x.sum()*100,1))\nQ24_b = big_ds[Q24].count().to_frame('big').transform(lambda x: round(x\/x.sum()*100,1))\nQ24_s.index, Q24_b.index = Q24_labels, Q24_labels\n\nwidth=0.4\nx = np.arange(len(Q24_labels))\n\nfig, ax = plt.subplots(figsize=(16, 8)) \nrects1 = ax.bar(x - width\/2, Q24_s['small'], width, label='Small', color=greys[2])\nrects2 = ax.bar(x + width\/2,  Q24_b['big'], width, label='Big', color=my_colours[2])\n\nax.set_title('Activities for Data Scientists', font=font, fontsize=17, color=greys[1])\nax.set_xlabel(' ')\nax.set_ylabel('Proportion', font=font, fontsize=15, color=greys[1])\nax.set_xticks(x)\nax.set_xticklabels(Q24_labels, font=font, fontsize=10)\nax.legend(prop=font)\nax.bar_label(rects1, padding=3, fontsize=9, font=font)\nax.bar_label(rects2, padding=3, fontsize=9, font=font)\n\nfig.tight_layout()\nplt.show()","73015738":"Substantially more big businesses use machine learning methods at work. This could be explained by the lack of senior machine learning personnel to promote the use of these methods in younger small businesses, or that growing businesses do not prioritise these methods.\n\nReference: [Plotly Documentation](https:\/\/plotly.com\/python\/horizontal-bar-charts\/)","2919e40b":"There are no marked differences in languages or data visualization tolls used by employees of small and big businesses. ","7ca12c9f":"Consistent with the younger workforce at small businesses, the majority of experienced workers are employed by larger employers, with a particular disparity in the 10-20 year experience bracket.","33b0e506":"Responses from employees working at big companies constituted 53% of all responses in 2021.","cd957cff":"***\n\n\nThe insights drawn in this analysis represents the Kaggle community due to this being the source of the data. If you work in a small or big business and would like to share your insights or alternative explanations for the results of this analysis, please leave a comment! \ud83d\ude0d","1058973c":"Employees from small companies are noticeably younger. The biggest difference can be seen concerning employees aged 18-21 and 22-24, with these age groups accounting for ~13% and ~18% of the total small business workforce, compared with only ~3% and ~11% of big businesses respectively. ","c62c0b0a":"The \"big three\" cloud providers are popular in both big and small businesses. Azure's market share is noticeably lacking behind in small businesses. ","efd79e6e":"## Demographics of small versus big companies","601d4923":"# Comparing small and big companies \n\nIn this notebook, I will be using mainly the 2021 Kaggle Data Science and Machine Learning survey dataset **to explore the difference between small and big businesses.**\n\nFor this analysis I will be following the [OECD Glossary](https:\/\/stats.oecd.org\/glossary\/detail.asp?ID=3123) definition of small business as those with fewer than 50 employees, medium-sized companies as 50-249 employees and large companies with more than 250 employees.\n* 0-49 employees = small company\n* 50-249 employees = medium-sized company\n* 250 or more employees = large company\n\nThe main comparison will be between businesses classed as 'small' and 'big'.\n\nI expect to find that small companies, which would account for the majority of startups, would have higher representations of woman and younger staff members. \n\nI expect that employees of small companies will be \"Jacks of all trades\", needing to master a wider range of skills than equivalent employees in bigger companies with more siloed structures.","ab52b659":"Overall, respondents primarily work as data scientists, software engineers, and data analysts, regardless of the size of their employer. Further analysis of what roles are contained in the big business \"Other\" category would be insightful.","b790b326":"The darker the tone, the higher the education.\nEducation from master's level up is noticeably more prevailent in big companies (65% for big companies versus 51% for small businesses).","ef0aa9e9":"The top machine learning libraries and algorithms used by big and small businesses are similar. The Xgboost framework is more popular in big companies. Consequently, Gradient Boosting algorithms, which require the user to use the Xgboost framework, are more commonly used in big businesses.","9d9d43f0":"## Work enviornment in small versus big companies","8ad99938":"However, when viewing industries through the lens of big vs small, it becomes apparent that Computers\/Technology are more dominant in big businesses than in small ones, with Non-profit\/Service taking a much higher proportion in small business.","74242636":"As expected, employees of small businesses work alone or in small groups, whereas employees of big companies often work in groups of more than 20.","26c30baf":"The sole marked difference in salary discrepancy is that 40% of small-business employees are paid between 0 and 999 dollars per annum. It is likely that this is due to small businesses hiring substantially more unpaid interns.\nThe second graph shows the distribution again but with the lowest bracket removed. Employees paid up to the 10,000-14,999 bracket are more commonly found in small businesses, with employees of big businesses being paid higher in all other categories. A noteable exception is that more highly paid respondents are from small businesses (\\$300,000+). This may be due to these highly paid respondents owning such businesses.","b18859fd":"Data scientists, software engineers, and data analysts are the top three most common roles.","24d6b131":"When looking at all respondents' industry areas, Computers\/Technology and Academics\/Education dominate the field.","e8f92d9e":"I expected to see that employees at small companies would undertake more activities than big ones, to account for the lack of siloed personnel. This was not reflected in the results of the survey, which indicate that both small and big business employees could be considered \"Jacks of all trades\".","c41d42b1":"As noted above, 72% of small business employees either do not use machine learning methods or have done so for less than two years. The equivalent percentage for big businesses is 51%.","759d912b":"Contary to my expectations, the gender disparity is consistent across all sizes of businesses, with female employees accounting for ~18% of the workforce.","1a986f05":"## Machine Learning at Startups versus Big Companies"}}