{"cell_type":{"c15154c2":"code","1c1e95ed":"code","ef89e51f":"code","110b695b":"code","29c5f106":"code","71428b83":"code","18aebdd6":"code","5df3ec05":"code","54420acf":"code","1eec4417":"code","9815986a":"code","81a80633":"markdown","e4c357e1":"markdown","b6ebe8a8":"markdown","cc67e785":"markdown","25f0fa50":"markdown","4d8d2cb9":"markdown","ba08b6e5":"markdown","8f583940":"markdown","99c32a06":"markdown","a5983076":"markdown","4c4e54c4":"markdown"},"source":{"c15154c2":"import numpy as np","1c1e95ed":"np_zeros = np.zeros(10)          #Return array of 10 element all equal to 0\nprint(\"Array with all zeros\")\nprint(np_zeros)\nprint(\"\")\n\nnp_ones = np.ones(10)            #Return array of 10 element all equal to 1\nprint(\"Array with all ones\")\nprint(np_ones)\nprint(\"\")\n\nnp_fives = np.ones(10)*5         #Return array of 10 element all equal to 1 and \n                                 #then we are multiplying each element with 5\nprint(\"Array with all fives\")\nprint(np_fives)\nprint(\"\")\n\n#By default it return array as float we are able to make it as the dtype we want\n\nnp_ones_int = np.ones(10,dtype=int)            #Return array of int type\nprint(\"Array with all ones (INT)\")\nprint(np_ones_int)","ef89e51f":"#Array with Given range \n#np.arange(start,end,stepsize,dtype)   \n#end is exclusive\n\nnp_arr = np.arange(10,20)\nprint(\"Array having element from 10 to 20 : \",end=\"\")\nprint(np_arr)\n\nnp_even = np.arange(0,20,2)\nprint(\"Array having even element from 0 to 20 : \",end=\"\")\nprint(np_even)\n","110b695b":"np_identity = np.eye(3)          #Return 3x3 identity Matrix\nprint(\"Identity 3x3 matrix\")\nprint(np_identity)\nprint(\"\")\n\nnp_identity = np.eye(6,dtype=int)     #Return 6x6 identity Matrix of int type\nprint(\"Identity 6x6 matrix of int type\")\nprint(np_identity)","29c5f106":"#np.random.uniform(low,high,No of element) \n#low,high is also included\n\nrandom_no = np.random.uniform(0,1)      #Return random number from 0-1\nprint(\"Random Number between 0-1 : \",end=\"\")\nprint(random_no)\nprint(\"\")\n\nrandom_arr = np.random.uniform(0,1,5)\nprint(\"Random array of size 5 between 0-1 : \")\nprint(random_arr)\nprint(\"\")","71428b83":"#np.random.normal(mean=,standard deviation,No of element) \n#Mean default = 0 \n#Standard Deviation By defaulr = 1\n\nrandom_no = np.random.normal()      #Return random number from Normal Distribution\nprint(\"Random Number from std Normal Distribution : \",end=\"\")\nprint(random_no)\nprint(\"\")\n\n\nrandom_no = np.random.normal(0,5,5)      #Return random number from Normal Distribution\nprint(\"Random array of size 5 from Normal distribution with mean=0 and std dev=5 : \",end=\"\")\nprint(random_no)\nprint(\"\")","18aebdd6":"np_arr = np.arange(10,21)\nprint(\"Array having element from 10 to 20  : \",end=\"\")\nprint(np_arr)\n\n#np_arr[start:end]\n\nprint(\"Printing Only elements from 12 to 19 : \",end=\"\")\nprint(np_arr[2:-1])  #end is included\nprint(np_arr[2:10])  #end not included","5df3ec05":"np_2D_arr = np.random.random(size=12).reshape(3,4)  #Reshape(No of rows,No of col) : reshape accordinly\nprint(\"3x4 Array of random nuber\")\nprint(np_2D_arr)\nprint(\"\")\n\nprint(\"Shape of np_2D_arr : \",np_2D_arr.shape)  #GIve Shape of Matrix\nprint(\"\")\n\nprint(\"Iterating using loop : \")\nfor i in np.nditer(np_2D_arr):    \n  print(i)","54420acf":"#np.linspace(start,end,No of elements, endpoint=True)\n#If endpoint=False, End is not included\nnp_arr2 = np.linspace(10,50,5)\nprint(\"Array of size 5 evenly distributed between 10 and 50: \",end=\"\")\nprint(np_arr2)\n\nnp_arr3 = np.linspace(10,50,5,endpoint=False)\nprint(\"Array of size 5 evenly distributed between 10 and 50 without end: \",end=\"\")\nprint(np_arr3)","1eec4417":"#np.random.ranint(low,high,no of elements)\nnp_arr_arb = np.random.randint(10,50,5)\nprint(\"Array of size 5 with random elements between 10-50: \",end=\"\")\nprint(np_arr_arb)","9815986a":"np_arr1 = np.array([1,2,3,4,5])\nprint(\"Array 1: \",np_arr1)\n\nnp_arr2 = np.array([6,7,8,9,10])\nprint(\"Array 2: \",np_arr2)\n\nnp_multiply = np_arr1*np_arr2\nprint(\"Multiplied Array 1 and Array 2 : \",np_multiply)","81a80633":"**3. reate a 3x3 identity matrix**","e4c357e1":"**9.Create a vector of given lenght filled with arbitrary integers in given range**","b6ebe8a8":"**10.Multiply the 2 vectors elementwise**","cc67e785":"**6.Generate Array of Given range and print part of that array**","25f0fa50":"**1. Creating array of all Ones and Zeros**","4d8d2cb9":"In This Notebook some of the basic NUMPY exersice is given. ALl the codes and examples are well explanatory and easy to understand. Do check it. \n\nAlso Check 1st part.\nNUMPY EXERCISES BASICS 1 : https:\/\/www.kaggle.com\/bahubaljain\/numpy-basics-1\n\n**Overview** : \n 1. Different ways to generate different types of vectors and Matrix.\n 2. Generating random numbers and vectors.\n 3. Multiplying vectors.\n\nRefrence : https:\/\/www.w3resource.com\/python-exercises\/numpy\/basic\/index.php\n\n**Note** that in this random exercises are given so that one can practice NUMPY as properly as possible. This is not for the person who just started with NUMPY but the person who want to practice or revise NUMPY.\n\nANY suggestion\/Feedback or Comment is well appericiated.","ba08b6e5":"**5. Generate an array of 15 random numbers from a standard normal distribution**","8f583940":"**8.Create a Vector with values evenly distributed between given range.**","99c32a06":"**2. Creating Different types of Array** ","a5983076":"**4. Generating Random Number between 0-1**","4c4e54c4":"**7.Create a 3X4 array using Random and iterate over it**"}}