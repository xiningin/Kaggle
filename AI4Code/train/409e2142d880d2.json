{"cell_type":{"fd115337":"code","1e72c04e":"code","da1242b7":"code","1dcedd14":"code","f53e7e13":"code","eea54d7d":"code","34d345c8":"code","e62fa862":"code","ed079427":"code","6e77cb25":"code","3c6b0db0":"code","52b1b4bc":"code","065258e2":"code","c82e6dfc":"code","539dddc8":"code","63f1c7df":"code","bb3a2f4c":"code","75803e17":"code","c17a9fba":"code","64c053cd":"code","d1dbbfc0":"code","c89697fa":"code","fab2d0e5":"code","12995aac":"code","5a6fc9d5":"code","2da390c4":"code","9f44cb15":"code","6a4542f5":"code","315e1ec7":"code","06910321":"code","03379d30":"code","ad51c072":"code","2336d57b":"code","02766bd0":"code","8e622295":"code","48dcf61e":"code","fc0ee5c8":"code","0e016bad":"code","134f52d9":"code","13131bc7":"code","9e3cdafe":"code","942b7ed0":"code","3ad55873":"code","859f0595":"code","928f36f1":"code","3d70b338":"code","bd4b50c4":"code","4f522a8c":"code","6b323385":"code","235d8b73":"code","be47f6fb":"code","b9926ea2":"code","fb98ab66":"code","766d711b":"code","b856acb1":"code","ce4ce4e7":"markdown"},"source":{"fd115337":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1e72c04e":"import matplotlib.pyplot as plt","da1242b7":"df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ngender_sub = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')\n","1dcedd14":"gender_sub.head()","f53e7e13":"gender_sub.shape","eea54d7d":"df_test.shape","34d345c8":"df.shape","e62fa862":"df.head()","ed079427":"plt.bar(['Not Survived', 'Survived'],[df['Survived'].value_counts().loc[0], df['Survived'].value_counts().loc[1]])","6e77cb25":"print(\"% of People Survived is \",df['Survived'].value_counts().loc[1]\/df.shape[0]*100)\nprint(\"% of People Not Survived is \",df['Survived'].value_counts().loc[0]\/df.shape[0]*100)","3c6b0db0":"df['Sex'].value_counts()","52b1b4bc":"female_not_survived = df.groupby(['Sex','Survived']).count().loc['female'].loc[0].PassengerId\nfemale_survived = df.groupby(['Sex','Survived']).count().loc['female'].loc[1].PassengerId\nmale_not_survived = df.groupby(['Sex','Survived']).count().loc['male'].loc[0].PassengerId\nmale_survived = df.groupby(['Sex','Survived']).count().loc['male'].loc[1].PassengerId","065258e2":"plt.bar([0, 1],[male_not_survived, male_survived],width=0.2, label='male')\nplt.bar([0.2, 1.2],[female_not_survived, female_survived],width=0.2, label='female')\nplt.xticks([0.1,1.1],['Not Survived', 'Survived'])\nplt.legend()\nplt.show()","c82e6dfc":"male_not_survived\/df['Sex'].value_counts().loc['male']*100,female_not_survived\/df['Sex'].value_counts().loc['female']*100","539dddc8":"df.groupby('Survived').mean()","63f1c7df":"df.groupby(['Sex','Survived']).mean()","bb3a2f4c":"female_not_survived_age = df.groupby(['Sex','Survived']).mean().loc['female'].loc[0].Age\nfemale_survived_age = df.groupby(['Sex','Survived']).mean().loc['female'].loc[1].Age\nmale_not_survived_age = df.groupby(['Sex','Survived']).mean().loc['male'].loc[0].Age\nmale_survived_age = df.groupby(['Sex','Survived']).mean().loc['male'].loc[1].Age","75803e17":"female_not_survived_age, female_survived_age, male_not_survived_age, male_survived_age","c17a9fba":"df.groupby(['Survived','SibSp']).count()","64c053cd":"df.groupby(['Survived','Parch']).count()","d1dbbfc0":"df.groupby(['Survived','Embarked']).count()","c89697fa":"df.isnull().sum()","fab2d0e5":"df['Age'] = df.groupby(['Survived', 'Sex'])['Age'].transform(lambda x: x.fillna(x.mean()))","12995aac":"df[(df['Survived'] == 0) & (df['Sex'] == 'female')]['Age'].isnull().sum()","5a6fc9d5":"df.groupby(['Sex','Survived']).mean().loc['female'].loc[0].Age, female_not_survived_age","2da390c4":"df['Embarked'].fillna(df['Embarked'].mode()[0], inplace= True)","9f44cb15":"sex_label=pd.get_dummies(df['Sex'])\ndf = pd.concat([df, sex_label], axis =1)","6a4542f5":"Embarked=pd.get_dummies(df['Embarked'])\ndf = pd.concat([df, Embarked], axis =1)","315e1ec7":"df.drop(['PassengerId', 'Name', 'Sex', 'Ticket', 'Fare', 'Cabin', 'Embarked'], axis=1, inplace=True)","06910321":"df.head()","03379d30":"female_not_survived_df = df[(df['Survived'] == 0) & (df['female'] == 1)]\nfemale_survived_df = df[(df['Survived'] == 1) & (df['female'] == 1)]\nmale_not_survived_df = df[(df['Survived'] == 0) & (df['male'] == 1)]\nmale_survived_df = df[(df['Survived'] == 1) & (df['male'] == 1)]","ad51c072":"female_not_survived_df.shape[0], female_survived_df.shape[0], male_not_survived_df.shape[0], male_survived_df.shape[0]","2336d57b":"Y = df['Survived']\ndf.drop('Survived', axis=1, inplace=True)","02766bd0":"from sklearn.model_selection import train_test_split","8e622295":"x_train, x_test, y_train, y_test = train_test_split(df, Y)\nx_train.shape, x_test.shape","48dcf61e":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier","fc0ee5c8":"rnmf = RandomForestClassifier()\nrnmf.fit(x_train, y_train)","0e016bad":"rnmf.score(x_test, y_test)","134f52d9":"dec = DecisionTreeClassifier()\ndec.fit(x_train, y_train)","13131bc7":"dec.score(x_test, y_test)","9e3cdafe":"from sklearn.metrics import classification_report","942b7ed0":"print(classification_report(y_test, rnmf.predict(x_test)))","3ad55873":"print(classification_report(y_test, dec.predict(x_test)))","859f0595":"from sklearn.model_selection import StratifiedShuffleSplit","928f36f1":"sss = StratifiedShuffleSplit(random_state= 0 , test_size=0.5)","3d70b338":"for train, test in sss.split(df, Y):\n    rnmf.fit(df.loc[train], Y[train])\n    print(rnmf.score(df.loc[test], Y[test]))\n    \n    ","bd4b50c4":"final_df = pd.concat([female_not_survived_df, male_survived_df])","4f522a8c":"female_survived_index = female_survived_df.index\nmale_not_survived_index = male_not_survived_df.index","6b323385":"female_survived_index.shape[0]*.5, male_not_survived_index.shape[0]*0.25","235d8b73":"female_survived_random_50=np.random.randint(0, female_survived_index.shape[0], size = 120)\nmale_not_survived_random_25=np.random.randint(0, male_not_survived_index.shape[0], size = 120)","be47f6fb":"copy_final = final_df.copy()","b9926ea2":"copy_final = pd.concat([copy_final, female_survived_df.loc[female_survived_index[female_survived_random_50]]],)\ncopy_final = pd.concat([copy_final, male_not_survived_df.loc[male_not_survived_index[male_not_survived_random_25]]])","fb98ab66":"Y_ = copy_final['Survived']\ncopy_final.drop('Survived', inplace=True, axis =1)","766d711b":"rnmf.fit(copy_final, Y_)","b856acb1":"rnmf.score(x_test, y_test)","ce4ce4e7":"* female Not survied (full)\n* male not survied (25%)\n* male survied (full)\n* female  survived (50%)"}}