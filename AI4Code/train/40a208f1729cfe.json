{"cell_type":{"9999ba6d":"code","ee26af01":"code","c67c1a52":"code","2c2d5e26":"code","c38e66a1":"code","09e5d95a":"code","0202e908":"code","f476efae":"code","3a05bf83":"code","5b5e3a1e":"code","8e2d5f38":"code","6466f5f0":"code","b32c3fad":"code","50fa06b4":"code","36af96c3":"code","f45886a8":"code","028eda6d":"code","b2ee2c93":"code","df3c5f03":"code","9670ea0b":"code","a5fd5894":"code","ac2bdedd":"code","f4b21a74":"code","4835f9d2":"code","4b169e1a":"code","638f2e1a":"code","e89279a1":"code","851dbd7b":"code","75ebae89":"code","4b92fdef":"code","7c03e763":"markdown","9eaaae86":"markdown","190ebe0f":"markdown","6441bacf":"markdown","8a47b919":"markdown","f1c84c67":"markdown","1de8a748":"markdown","c5b9ade6":"markdown","b3125144":"markdown","9489b030":"markdown","395c1cbd":"markdown","4d8f76db":"markdown","708507a1":"markdown","9e743684":"markdown"},"source":{"9999ba6d":"import warnings\nwarnings.filterwarnings('ignore')\nimport pandas as pd\npd.set_option('display.max_colwidth', 100)\nfrom bs4 import BeautifulSoup  \nimport re\nimport nltk\n#nltk.download() \nfrom nltk.corpus import stopwords # Import the stop word list\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport numpy as np\nfrom sklearn.ensemble import RandomForestClassifier\nimport gensim\nfrom gensim.models import word2vec\nfrom gensim.models import Word2Vec\nfrom gensim.models.keyedvectors import KeyedVectors\nimport logging\nfrom sklearn.cluster import KMeans\nimport time","ee26af01":"# load data\ntrain = pd.read_csv('..\/input\/labeledTrainData.tsv', header=0, delimiter=\"\\t\", quoting=3)\ntest = pd.read_csv('..\/input\/testData.tsv', header=0, delimiter=\"\\t\", quoting=3 )\nunlabeled_train = pd.read_csv('..\/input\/unlabeledTrainData.tsv', header=0, delimiter=\"\\t\", quoting=3 )","c67c1a52":"# example BeatifulSoup object to remove HTML tags and markups\nexample1 = BeautifulSoup(train['review'][0], 'lxml')\nexample1.get_text()\n# Use regular expressions to do a find-and-replace for punctuations and numbers\n# [] indicates group membership and ^ means \"not\". In other words, the re.sub() statement says, \"Find anything that is NOT a lowercase letter (a-z) or an upper case letter (A-Z), and replace it with a space.\"\nletters_only = re.sub(\"[^a-zA-Z]\",           # The pattern to search for\n                      \" \",                   # The pattern to replace it with\n                      example1.get_text() )  # The text to search\nlower_case = letters_only.lower()        # Convert to lower case\nwords = lower_case.split()               # Split into words\n# Remove stop words from \"words\"\nwords = [w for w in words if not w in stopwords.words(\"english\")]\n#print(words)","2c2d5e26":"def review_to_words(raw_review):\n    # Function to convert a raw review to a string of words\n    # The input is a single string (a raw movie review), and \n    # the output is a single string (a preprocessed movie review)\n    #\n    # 1. Remove HTML\n    review_text = BeautifulSoup(raw_review, 'lxml').get_text() \n    #\n    # 2. Remove non-letters        \n    letters_only = re.sub(\"[^a-zA-Z]\", \" \", review_text) \n    #\n    # 3. Convert to lower case, split into individual words\n    words = letters_only.lower().split()                             \n    #\n    # 4. In Python, searching a set is much faster than searching\n    #   a list, so convert the stop words to a set\n    stops = set(stopwords.words(\"english\"))                  \n    # \n    # 5. Remove stop words\n    meaningful_words = [w for w in words if not w in stops]   \n    #\n    # 6. Join the words back into one string separated by space, \n    # and return the result.\n    return( \" \".join( meaningful_words ))  ","c38e66a1":"# do preprocessing for every review row\ntrain['review_preprocessed'] = train['review'].apply(lambda x: review_to_words(x))\ntrain.head()","09e5d95a":"# Initialize the \"CountVectorizer\" object, which is scikit-learn's\n# bag of words tool.\n# choose only the 5000 most frequent words as features\nvectorizer = CountVectorizer(analyzer = 'word',tokenizer = None,preprocessor = None,stop_words = None,max_features = 5000) \n# fit_transform() does two functions: First, it fits the model\n# and learns the vocabulary; second, it transforms our training data\n# into feature vectors. The input to fit_transform should be a list of \n# strings.\ntrain_data_features = vectorizer.fit_transform(list(train['review_preprocessed']))\n# Numpy arrays are easy to work with, so convert the result to an \n# array\ntrain_data_features = train_data_features.toarray()\ntrain_data_features.shape","0202e908":"# The words in the vocabulary\nvocab = vectorizer.get_feature_names()\n\n# Sum up the counts of each vocabulary word\ndist = np.sum(train_data_features, axis=0)\n\n# For each tuple (word in the vocabulary, count of the vocabulary word)\n# print the vocabulary word and the number of times it appears in the training set\nfor tag, count in zip(vocab, dist):\n    print(count, tag)","f476efae":"# Initialize a Random Forest classifier with 100 trees\n# Fit the forest to the training set, using the bag of words as \n# features and the sentiment labels as the response variable\nforest = RandomForestClassifier(n_estimators = 100).fit(X = train_data_features, y = train['sentiment'])","3a05bf83":"# do preprocessing for every review row in test set\ntest['review_preprocessed'] = test['review'].apply(lambda x: review_to_words(x))\n# Get a bag of words for the test set, and convert to a numpy array\ntest_data_features = vectorizer.transform(list(test['review_preprocessed']))\ntest_data_features = test_data_features.toarray()","5b5e3a1e":"# Use the random forest to make sentiment label predictions\nresult = forest.predict(test_data_features)","8e2d5f38":"# Copy the results to a pandas dataframe with an \"id\" column and\n# a \"sentiment\" column\noutput = pd.DataFrame(data={\"id\":test[\"id\"], \"sentiment\":result})\n\n# Use pandas to write the comma-separated output file\noutput.to_csv('Bag_of_Words_model.csv', index=False, quoting=3)","6466f5f0":"def review_to_sentenceslist(review, tokenizer, remove_stopwords=False):\n    # Function to split a review into parsed sentences and converts them\n    # to a sequence of words,\n    # optionally removing stop words.  Returns a \n    # list of sentences, where each sentence is a list of words\n    #\n    # 1. Use the NLTK tokenizer to split the paragraph into sentences\n    raw_sentences = tokenizer.tokenize(review.strip())\n    #\n    # 2. Loop over each sentence\n    sentences = []\n    for raw_sentence in raw_sentences:\n        # If a sentence is empty, skip it\n        if len(raw_sentence) > 0:\n            # Otherwise, get a list of words of the sentence and append it to the sentences list\n            #\n            #  Remove HTML\n            review_text = BeautifulSoup(raw_sentence,'lxml').get_text()\n            #  \n            #  Remove non-letters\n            review_text = re.sub(\"[^a-zA-Z]\",\" \", review_text)\n            #\n            #  Convert words to lower case and split them\n            words = review_text.lower().split()\n            #\n            #  Optionally remove stop words (false by default)\n            if remove_stopwords:\n                stops = set(stopwords.words(\"english\"))\n                words = [w for w in words if not w in stops]\n            sentences.append(words)\n    #\n    # 3. return the list of sentences (each sentence is a list of words, so this returns a list of lists\n    return(sentences)            ","b32c3fad":"# Load the punkt tokenizer for sentence splitting\ntokenizer = nltk.data.load('tokenizers\/punkt\/english.pickle')\n# apply function to every review and create list of sentences, where each sentence is a list of words\nprint('parse unlabeld train sentences')\nunlabeled_train['sentencelist'] = unlabeled_train['review'].apply(lambda x: review_to_sentenceslist(x,tokenizer=tokenizer, remove_stopwords=False))\nprint('parse labeld train sentences')\ntrain['sentencelist'] = train['review'].apply(lambda x: review_to_sentenceslist(x,tokenizer=tokenizer, remove_stopwords=False))","50fa06b4":"# Initialize an empty list of sentences\nsentences = [] \n\n# extend sentences list to concatenate list of sentences from labeled and unlabeled train Dataframes\nprint('extend sentences list with labeled training set sentences')\nfor sentencelist in train['sentencelist']:\n    sentences.extend(sentencelist)\n\nprint('extend sentences list with unlabeled training set sentences')\nfor sentencelist in unlabeled_train['sentencelist']:\n    sentences.extend(sentencelist)\nprint('number of sentences:',len(sentences))","36af96c3":"# configure logging to watch Word2Vec training flow\nlogging.basicConfig(format='%(asctime)s : %(levelname)s : %(message)s', level=logging.INFO)\n\n# train the Word2Vec Model\nprint('train Word2Vec model...')\nword2vec_model = word2vec.Word2Vec(sentences=sentences, workers=4, size=300, min_count=40, window=10, sample=1e-3)\n\n# If you don't plan to train the model any further, calling \n# init_sims will make the model much more memory-efficient.\nword2vec_model.init_sims(replace=True)\n\n# access its model.wv property, which holds the standalone keyed vectors\nword2vec_model = word2vec_model.wv","f45886a8":"# It can be helpful to create a meaningful model name and \n# save the model for later use. You can load it later using Word2Vec.load()\nmodel_name = '300features_40minwords_10context_word2vec_model'\nword2vec_model.save(model_name)","028eda6d":"# load the saved model\nword2vec_model = KeyedVectors.load('300features_40minwords_10context_word2vec_model')","b2ee2c93":"def makeFeatureVec(words, model, vector_dimensionality):\n    # Function to average all of the word vectors in a given\n    # paragraph\n    #\n    # Pre-initialize an empty numpy array (for speed)\n    featureVec = np.zeros((vector_dimensionality,),dtype='float32')\n    #\n    number_of_words = 0.\n    # \n    # Index2word is a list that contains the names of the words in \n    # the model's vocabulary. Convert it to a set, for speed \n    index2word_set = set(model.index2word)\n    #\n    # Loop over each word in the review and, if it is in the model's\n    # vocaublary, add its feature vector to the total\n    for word in words:\n        if word in index2word_set: \n            number_of_words = number_of_words + 1.\n            featureVec = np.add(featureVec,model[word])\n    # \n    # Divide the result by the number of words to get the average\n    featureVec = np.divide(featureVec,number_of_words)\n    return featureVec\n\ndef review_to_wordlist(review, remove_stopwords=False):\n    # Function to convert a document to a sequence of words,\n    # optionally removing stop words.  Returns a list of words.\n    #\n    # 1. Remove HTML\n    review_text = BeautifulSoup(review).get_text()\n    #  \n    # 2. Remove non-letters\n    review_text = re.sub(\"[^a-zA-Z]\",\" \", review_text)\n    #\n    # 3. Convert words to lower case and split them\n    words = review_text.lower().split()\n    #\n    # 4. Optionally remove stop words (false by default)\n    if remove_stopwords:\n        stops = set(stopwords.words(\"english\"))\n        words = [w for w in words if not w in stops]\n    #\n    # 5. Return a list of words\n    return(words)","df3c5f03":"# split the train and test reviews into words (stop word removal = True)\n\nprint('split train reviews into words')\ntrain['words'] = train['review'].apply(lambda x: review_to_wordlist(x, remove_stopwords=True))\nprint('split test reviews into words')\ntest['words'] = test['review'].apply(lambda x: review_to_wordlist(x, remove_stopwords=True))","9670ea0b":"# Calculate average feature vectors for train and test\n\nprint('calculate average feature vector for train')\ntrain['average_feature_vector'] = train['words'].apply(lambda x: makeFeatureVec(words=x,model=word2vec_model,vector_dimensionality=word2vec_model.vector_size))\nprint('calculate average feature vector for test')\ntest['average_feature_vector'] = test['words'].apply(lambda x: makeFeatureVec(words=x,model=word2vec_model,vector_dimensionality=word2vec_model.vector_size))","a5fd5894":"# convert average feature vectors to 300-dimenesional numpy array for random forest classifier\ntrain_average_vectors = list(train['average_feature_vector'])\ntrain_average_vectors = np.asarray(train_average_vectors)\nprint('shape of train array:',train_average_vectors.shape)\n\ntest_average_vectors = list(test['average_feature_vector'])\ntest_average_vectors = np.asarray(test_average_vectors)\nprint('shape of test array:',test_average_vectors.shape)","ac2bdedd":"# init random forest classifier \nword2vec_forest = RandomForestClassifier(n_estimators = 100)\n\n# fit model on train\nword2vec_forest = word2vec_forest.fit(train_average_vectors, train['sentiment'])\n\n# predict on test\navg_features_result = word2vec_forest.predict(test_average_vectors)","f4b21a74":"# Write the test results \noutput2 = pd.DataFrame(data={'id':test['id'], 'sentiment':avg_features_result} )\noutput2.to_csv('Word2Vec_AverageVectors.csv', index=False, quoting=3 )","4835f9d2":"# Start time\nstart = time.time()\n\n# Set \"k\" (num_clusters) to be 1\/5th of the vocabulary size, or an\n# average of 5 words per cluster\nnum_clusters = round(word2vec_model.syn0.shape[0] \/ 5)\n\n# Initalize a k-means object and use it to extract centroids\n# The cluster assignment for each word is then stored in 'kmeans_cluster'\nkmeans_cluster = KMeans(n_clusters = num_clusters).fit_predict(word2vec_model.syn0)\n\n# Get the end time and print how long the process took\nend = time.time()\nelapsed = end - start\nprint('Time taken for K Means clustering:', elapsed, 'seconds.')","4b169e1a":"# Create a Word : Centroid dictionary, mapping each vocabulary word to a cluster number                                                                                \nword_centroid_dict = dict(zip(word2vec_model.index2word, kmeans_cluster))","638f2e1a":"# Function to convert reviews into bags-of-centroids\n# This works just like Bag of Words but uses semantically related clusters instead of individual words\n\ndef create_bag_of_centroids(wordlist, word_centroid_dict):\n    #\n    # The number of clusters is equal to the highest cluster index\n    # in the word \/ centroid map\n    num_centroids = max(word_centroid_dict.values()) + 1\n    #\n    # Pre-allocate the bag of centroids vector (for speed)\n    bag_of_centroids = np.zeros(num_centroids, dtype='float32')\n    #\n    # Loop over the words in the review. If the word is in the vocabulary,\n    # find which cluster it belongs to, and increment that cluster count \n    # by one\n    for word in wordlist:\n        if word in word_centroid_dict:\n            index = word_centroid_dict[word]\n            bag_of_centroids[index] += 1\n    #\n    # Return the \"bag of centroids\"\n    return bag_of_centroids","e89279a1":"# Create bags of centroids for our train and test\n\nprint('calculate bags of centroids for train')\ntrain['bags_of_centroids'] = train['words'].apply(lambda x: create_bag_of_centroids(wordlist=x,word_centroid_dict=word_centroid_dict))\nprint('calculate bags of centroids for test')\ntest['bags_of_centroids'] = test['words'].apply(lambda x: create_bag_of_centroids(wordlist=x,word_centroid_dict=word_centroid_dict))","851dbd7b":"# convert average feature vectors to numpy array for random forest classifier\ntrain_bags_of_centroids = list(train['bags_of_centroids'])\ntrain_bags_of_centroids = np.asarray(train_bags_of_centroids)\nprint('shape of train array:',train_bags_of_centroids.shape)\n\ntest_bags_of_centroids = list(test['bags_of_centroids'])\ntest_bags_of_centroids = np.asarray(test_bags_of_centroids)\nprint('shape of test array:',test_bags_of_centroids.shape)","75ebae89":"# init random forest classifier \nbags_of_centroids_forest = RandomForestClassifier(n_estimators = 100)\n\n# fit model on train\nbags_of_centroids_forest = bags_of_centroids_forest.fit(train_bags_of_centroids, train['sentiment'])\n\n# predict on test\nbags_of_centroids_result = bags_of_centroids_forest.predict(test_bags_of_centroids)","4b92fdef":"# Write the test results \noutput3 = pd.DataFrame(data={'id':test['id'], 'sentiment':bags_of_centroids_result})\noutput3.to_csv('BagOfCentroids.csv', index=False, quoting=3)","7c03e763":"### Train a Random Forest Model with the calculated average feature vector of reviews from the Word2Vec model","9eaaae86":"In order to share word vector querying code between different training algos(Word2Vec, Fastext, WordRank, VarEmbed) Google separated storage and querying of word vectors into a separate class KeyedVectors.","190ebe0f":"#### we need to concatenate the lists of lists\n\nappend adds an element to a list, and extend concatenates the first list with another list (or another iterable, not necessarily a list.)\n\n\n* append adds its argument as a single element to the end of a list. The length of the list itself will increase by one\n\nx = [1, 2, 3]  \nx.append([4, 5])  \nprint (x)  \n\nresult: [1, 2, 3, [4, 5]]\n\n* extend iterates over its argument adding each element to the list, extending the list. The length of the list will increase by however many elements were in the iterable argument\n\nx = [1, 2, 3]  \nx.extend([4, 5])  \nprint (x)  \n\nresult: [1, 2, 3, 4, 5]","6441bacf":"### Train a Random Forest Model with a bag of words representation of kmeans centroids of Word2Vec model","8a47b919":"## Train and save Word2Vec model","f1c84c67":"## From Words To Paragraphs, Attempt 1: Vector Averaging\n\nOne challenge with the IMDB dataset is the variable-length reviews. We need to find a way to take individual word vectors and transform them into a feature set that is the same length for every review.\n\nSince each word is a vector in 300-dimensional space, we can use vector operations to combine the words in each review. One method is to simply average the word vectors in a given review (for this purpose, we removed stop words, which would just add noise). We add all up all values of the 300-dimensionl word vectors in one review and divide it by the number of words in the review. \n\n##### Example with a 2 word review:\n\nVector1 = (0.1, 0.3, 0.5, ...) = word 1  \nVector2 = (0.2, 0.5, 0.6, ...) = word 2  \n\naverage_Vector = (Vector1 + Vector2)\/2 = [(0.1, 0.3, 0.5, ...)+(0.2, 0.5, 0.6, ...)]\/2 = (0.3, 0.8, 1.1, ...)\/2  \naverage_Vector = (0.15, 0.4, 0.55, ...)","1de8a748":"Word2Vec expects single sentences, each one as a list of words. In other words, the input format is a list of lists. For this reason, we'll use NLTK's punkt tokenizer for sentence splitting.\n\nTo train Word2Vec it is better not to remove stop words because the algorithm relies on the broader context of the sentence in order to produce high-quality word vectors. For this reason, we will make stop word removal optional in the function below. ","c5b9ade6":"# Use different NLP methods to predict movie reviews\n\n### Adapted from the Kaggle 'Bag of Words Meets Bags of Popcorn' Competition\n\nFor data and detailed description visit: https:\/\/www.kaggle.com\/c\/word2vec-nlp-tutorial","b3125144":"## Data Cleaning and Text Preprocessing for Bag of Words","9489b030":"# Data Cleaning and Text Preprocessing for Word2Vec","395c1cbd":"Removing HTML Markup and dealing with Punctuation, Numbers and Stopwords","4d8f76db":"## From Words to Paragraphs, Attempt 2: Clustering \n\nWord2Vec creates clusters of semantically related words, so another possible approach is to exploit the similarity of words within a cluster. Grouping vectors in this way is known as \"vector quantization.\" To accomplish this, we first need to find the centers of the word clusters, which we can do by using a clustering algorithm such as K-Means.","708507a1":"### Convert text to bag of words representation","9e743684":"## Train a random forest model with a bag of words representation and predict the sentiment "}}