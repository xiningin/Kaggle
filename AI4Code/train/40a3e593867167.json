{"cell_type":{"58fb45fb":"code","84392724":"code","d05fa760":"code","535217a1":"code","7cfd2528":"code","519810bc":"code","be8c7faf":"code","4bdfb3dc":"code","037f16b0":"code","9bea7e1d":"code","b7226198":"code","1816d95c":"code","cf1788ac":"code","137da5de":"code","9d223e1c":"code","b109ab59":"code","a844a102":"code","f15fa49a":"code","53eef4ce":"code","e397cf46":"code","ed1701fb":"code","920f780a":"code","c98f9bb4":"code","d45e1ba7":"code","759655fc":"code","543c8a6f":"code","fa5b8622":"code","bce861c3":"code","035d7e1e":"code","c42e8f83":"code","bc1fedf6":"code","23297b71":"code","7c7b298c":"code","9f8983c5":"code","a1c5688f":"code","29448698":"code","8ec94732":"code","a42d9338":"code","d94f6af3":"code","01ec9a73":"code","17ee2ed2":"code","20333264":"code","c1656030":"code","74cbcac9":"code","297a8276":"code","394e6fd4":"code","c4534c98":"code","d810f148":"code","8dab8ba5":"code","804cabc9":"code","fb0319c9":"code","3e6c0283":"code","8c5fb7cf":"code","1c223e45":"code","a2285ee8":"code","2d17ae9a":"code","8e249f3d":"code","498948cc":"code","772054f9":"code","bf0e3baf":"code","aad1b86c":"code","e8ee9226":"code","7cd297d0":"code","a7866cde":"code","b5b76cb5":"code","9a28faec":"code","e82e4d1c":"code","faea9f81":"code","a4990db1":"code","4d6ac125":"code","0887dc8e":"code","4c3a385c":"code","7fbfccd8":"code","678c5309":"code","69dda8b1":"code","dcf21f05":"code","1814819f":"code","e458650c":"code","1e37af6c":"code","736b0b0b":"code","6009145d":"code","3e675d2a":"markdown","65ae8613":"markdown","59965fb7":"markdown","0b6e6882":"markdown","14b34d60":"markdown","ba576821":"markdown","3c697423":"markdown","7666fc22":"markdown","a97c205a":"markdown","d78a46ed":"markdown","7094e136":"markdown","d1b37171":"markdown","181a2101":"markdown","83ae8630":"markdown","417ccc38":"markdown","6ad14ac9":"markdown","17433063":"markdown","1ff60d79":"markdown","ace45dab":"markdown","f123b2cb":"markdown","9fcbe09a":"markdown","591d5475":"markdown","512341c5":"markdown","f1d0727a":"markdown","714ab2c8":"markdown","eef1e779":"markdown","2f23c78a":"markdown"},"source":{"58fb45fb":"import warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport sqlite3\nimport pandas as pd\nimport numpy as np\nimport nltk\nimport string\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn import metrics\nfrom sklearn.metrics import roc_curve, auc\nfrom nltk.stem.porter import PorterStemmer\nfrom sklearn.preprocessing import StandardScaler\n\nimport re\n# Tutorial about Python regular expressions: https:\/\/pymotw.com\/2\/re\/\nimport string\nfrom nltk.corpus import stopwords\nfrom nltk.stem import PorterStemmer\nfrom nltk.stem.wordnet import WordNetLemmatizer\n\nfrom gensim.models import Word2Vec\nfrom gensim.models import KeyedVectors\n\nimport pickle\n\nfrom tqdm import tqdm\nimport os\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import cross_val_score\nfrom collections import Counter\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import roc_auc_score \nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import roc_curve, auc\nfrom sklearn.metrics import confusion_matrix \nimport seaborn as sns","84392724":"\n\n\n# using the SQLite Table to read data.\ncon = sqlite3.connect('..\/input\/database.sqlite')\n#con = sqlite3.connect('database.sqlite') \n\n#filtering only positive and negative reviews i.e. \n# not taking into consideration those reviews with Score=3\nfiltered_data = pd.read_sql_query(\"\"\"SELECT * FROM Reviews WHERE Score != 3 LIMIT 10000\"\"\", con) \n\n# Give reviews with Score>3 a positive rating, and reviews with a score<3 a negative rating.\ndef partition(x):\n    if x < 3:\n        return 0\n    return 1\n\n#changing reviews with score less than 3 to be positive and vice-versa\nactualScore = filtered_data['Score']\npositiveNegative = actualScore.map(partition) \nfiltered_data['Score'] = positiveNegative\nprint(\"Number of data points in our data\", filtered_data.shape)\nfiltered_data.head(5)\n","d05fa760":"display = pd.read_sql_query(\"\"\" SELECT UserId, ProductId, ProfileName, Time, Score, Text, COUNT(*) FROM Reviews GROUP BY UserId HAVING COUNT(*)>1 \"\"\", con)\nprint(display.shape)\ndisplay.head()\n","535217a1":"display[display['UserId']=='AZY10LLTJ71NX']","7cfd2528":"display['COUNT(*)'].sum()","519810bc":"display= pd.read_sql_query(\"\"\" SELECT * FROM Reviews WHERE Score != 3 AND UserId=\"AR5J8UI46CURR\" ORDER BY ProductID \"\"\", con)\ndisplay.head()\n","be8c7faf":"#Sorting data according to ProductId in ascending order\nsorted_data = filtered_data.sort_values('ProductId', axis=0, ascending=True, inplace=False, kind='quicksort', na_position='last')","4bdfb3dc":"#Deduplication of entries\nfinal = sorted_data.drop_duplicates(subset = {\"UserId\",\"ProfileName\",\"Time\",\"Text\"}, keep ='first', inplace=False)\nfinal.shape","037f16b0":"# Checking to see how much % of data still remains\n(final['Id'].size*1.0)\/(filtered_data['Id'].size*1.0)*100","9bea7e1d":"\ncon = sqlite3.connect('..\/input\/database.sqlite')\n#con = sqlite3.connect('database.sqlite') \ndisplay= pd.read_sql_query(\"\"\" SELECT * FROM Reviews WHERE Score != 3 AND Id=44737 OR Id=64422 ORDER BY ProductID \"\"\", con)\ndisplay.head()\n","b7226198":"final=final[final.HelpfulnessNumerator<=final.HelpfulnessDenominator]","1816d95c":"#Before starting the next phase of preprocessing lets see the number of entries left\nprint(final.shape)\n\n#How many positive and negative reviews are present in our dataset?\nprint(final['Score'].value_counts())\nfinal['Score'].value_counts().plot(kind='bar')","cf1788ac":"final['Time']=pd.to_datetime(final['Time'],unit='s')\nfinal=final.sort_values(by='Time')\nfinal.head(5)","137da5de":"# printing some random reviews\nsent_0 = final['Text'].values[0]\nprint(sent_0)\nprint(\"=\"*50)\nsent_1000 = final['Text'].values[1000]\nprint(sent_1000) \nprint(\"=\"*50)\nsent_1500 = final['Text'].values[1500]\nprint(sent_1500) \nprint(\"=\"*50)\nsent_4900 = final['Text'].values[4900]\nprint(sent_4900)\nprint(\"=\"*50)","9d223e1c":"sent_0 = re.sub(r\"http\\S+\", \"\", sent_0)\nsent_1000 = re.sub(r\"http\\S+\", \"\", sent_1000)\nsent_150 = re.sub(r\"http\\S+\", \"\", sent_1500)\nsent_4900 = re.sub(r\"http\\S+\", \"\", sent_4900) \nprint(sent_0)","b109ab59":"from bs4 import BeautifulSoup\nsoup = BeautifulSoup(sent_0, 'lxml') \ntext = soup.get_text() \nprint(text) \nprint(\"=\"*50)\n\nsoup = BeautifulSoup(sent_1000, 'lxml') \ntext = soup.get_text() \nprint(text) \nprint(\"=\"*50) \n\nsoup = BeautifulSoup(sent_1500, 'lxml')\ntext = soup.get_text()\nprint(text)\nprint(\"=\"*50) \n\nsoup = BeautifulSoup(sent_4900, 'lxml')\ntext = soup.get_text()\nprint(text)\n","a844a102":"import re\ndef decontracted(phrase): \n     # specific \n    phrase = re.sub(r\"won't\", \"will not\", phrase) \n    phrase = re.sub(r\"can\\'t\", \"can not\", phrase) \n    # general \n    phrase = re.sub(r\"n\\'t\", \" not\", phrase) \n    phrase = re.sub(r\"\\'re\", \" are\", phrase)  \n    phrase = re.sub(r\"\\'s\", \" is\", phrase)   \n    phrase = re.sub(r\"\\'d\", \" would\", phrase) \n    phrase = re.sub(r\"\\'ll\", \" will\", phrase)  \n    phrase = re.sub(r\"\\'t\", \" not\", phrase)   \n    phrase = re.sub(r\"\\'ve\", \" have\", phrase)  \n    phrase = re.sub(r\"\\'m\", \" am\", phrase)   \n    return phrase\nsent_1500 = decontracted(sent_1500) \nprint(sent_1500)\nprint(\"=\"*50)\n\n\n        ","f15fa49a":"#remove words with numbers python: https:\/\/stackoverflow.com\/a\/18082370\/4084039 \nsent_0 = re.sub(\"\\S*\\d\\S*\", \"\", sent_0).strip()\nprint(sent_0)","53eef4ce":"\" hello\".strip()","e397cf46":"#remove spacial character: https:\/\/stackoverflow.com\/a\/5843547\/4084039\nsent_1500 = re.sub('[^A-Za-z0-9]+', ' ', sent_1500)\nprint(sent_1500)\n","ed1701fb":"\n\n\n# https:\/\/gist.github.com\/sebleier\/554280\n# we are removing the words from the stop words list: 'no', 'nor', 'not'\n# <br \/><br \/> ==> after the above steps, we are getting \"br br\"\n# we are including them into stop words list\n# instead of <br \/> if we have <br\/> these tags would have revmoved in the 1st ste\nstop = set(stopwords.words('english')) #set of stopwords\n","920f780a":"# Combining all the above stundents \nfrom tqdm import tqdm \npreprocessed_reviews = [] \n# tqdm is for printing the status bar \nfor sentance in tqdm(final['Text'].values): \n    sentance = re.sub(r\"http\\S+\", \"\", sentance)\n    sentance = BeautifulSoup(sentance, 'lxml').get_text()\n    sentance = decontracted(sentance)\n    sentance = re.sub(\"\\S*\\d\\S*\", \"\", sentance).strip()\n    sentance = re.sub('[^A-Za-z]+', ' ', sentance)\n    # https:\/\/gist.github.com\/sebleier\/554280\n    sentance = ' '.join(e.lower() for e in sentance.split() if e.lower() not in stop)\n    preprocessed_reviews.append(sentance.strip())\npreprocessed_reviews[1500] \n\n ","c98f9bb4":"print(len(preprocessed_reviews))\nfinal.shape","d45e1ba7":"final ['preprocessed_reviews']= preprocessed_reviews\nfinal.head(5)","759655fc":"\nconn = sqlite3.connect('final.sqlite')\nc=conn.cursor()\nconn.text_factory = str\nfinal.to_sql('Reviews', conn,  schema=None, if_exists='replace',index=True, index_label=None, chunksize=None, dtype=None)\nconn.close()\n#Loading data\nconn = sqlite3.connect('final.sqlite')\ndata=pd.read_sql_query(\"\"\"select * from Reviews\"\"\",conn)\n","543c8a6f":"print(os.getcwd())","fa5b8622":"conn = sqlite3.connect('final.sqlite')\ndata=pd.read_sql_query(\"\"\"select * from Reviews\"\"\",conn)\n","bce861c3":"data.shape","035d7e1e":"type(data)","c42e8f83":"\nX_train, X_test, y_train, y_test = train_test_split(data ['preprocessed_reviews'], data['Score'], test_size=0.33) \nX_train, X_cv, y_train, y_cv = train_test_split(X_train, y_train, test_size=0.33)\nprint(\"Train:\",X_train.shape,y_train.shape)\nprint(\"CV:\",X_cv.shape,y_cv.shape)\nprint(\"Test:\",X_test.shape,y_test.shape)\n\n","bc1fedf6":"type(X_cv)","23297b71":"vectorizer = CountVectorizer(ngram_range=(1,2))\n\n#vectorizer.fit(X_train) # fit has to happen only on train data\n# we use the fitted CountVectorizer to convert the text to vector\nX_train_bow = vectorizer.fit_transform(X_train)\nX_cv_bow = vectorizer.transform(X_cv)\nX_test_bow = vectorizer.transform(X_test) \nprint(\"After vectorizations\")\nprint(X_train_bow.shape, y_train.shape) \nprint(X_cv_bow.shape, y_cv.shape)\nprint(X_test_bow.shape, y_test.shape) \n\nprint(\"*************************\")\nprint(\"Standardization\")\nX_train_bow=StandardScaler(with_mean=False).fit_transform(X_train_bow)\nX_cv_bow=StandardScaler(with_mean=False).fit_transform(X_cv_bow)\nX_test_bow=StandardScaler(with_mean=False).fit_transform(X_test_bow)\nprint(X_train.shape, y_train.shape) \nprint(X_cv.shape, y_cv.shape)\nprint(X_test.shape, y_test.shape) \n\n\n\n","7c7b298c":"type(X_test)","9f8983c5":"\n\ntrain_auc_l1 = [] \ntrain_auc_l2 = [] \ncv_auc_l1 = []\ncv_auc_l2 = []\npenalty=['l1','l2']\nhyper_param=[10**i for i in range(-5,5)]\nfor i in penalty:\n    for j in  hyper_param:\n        clf = LogisticRegression(C=j, penalty= i)\n        clf.fit(X_train, y_train)\n        y_train_pred =  clf.predict_proba(X_train)[:,1] \n        y_cv_pred =  clf.predict_proba(X_cv)[:,1]\n        if i == 'l1':\n            train_auc_l1.append(roc_auc_score(y_train,y_train_pred)) \n            cv_auc_l1.append(roc_auc_score(y_cv, y_cv_pred))\n        else:\n            train_auc_l2.append(roc_auc_score(y_train,y_train_pred))\n            cv_auc_l2.append(roc_auc_score(y_cv, y_cv_pred))\n","a1c5688f":"            \n#Error plots with penaly L1\nplt.plot(np.log(hyper_param), train_auc_l1, label='Train AUC-L1') \nplt.plot(np.log(hyper_param), cv_auc_l1, label='CV AUC-L1')\nplt.legend()\nplt.xlabel(\"Lamda: hyperparameter\")\nplt.ylabel(\"AUC\")\nplt.title(\"ERROR PLOTS\")\nplt.show()\n#Error plots with penaly L2\nplt.plot(np.log(hyper_param), train_auc_l2, label='Train AUC-L2') \nplt.plot(np.log(hyper_param), cv_auc_l2, label='CV AUC-L2')\nplt.legend()\nplt.xlabel(\"Lamda: hyperparameter\")\nplt.ylabel(\"AUC\")\nplt.title(\"ERROR PLOTS\")\nplt.show()\n#Cv auc scores with penalty L1\nprint(\"Cv auc scores with penalty L1\")\nprint(cv_auc_l1)\nprint(\"Maximun Auc value :\",max(cv_auc_l1))\nprint(\"Index\",cv_auc_l1.index(max(cv_auc_l1)))\n#Cv auc scores with penalty L2\nprint(\"--------------------------\")\nprint(\"Cv auc scores with penalty L2\")\nprint(cv_auc_l2)\nprint(\"Maximun Auc value :\",max(cv_auc_l2))\nprint(\"Index\",cv_auc_l2.index(max(cv_auc_l2)))\n","29448698":"#Testing with test data\nclf = LogisticRegression(penalty='l1',C=0.01)\nclf.fit(X_train_bow, y_train)\n# roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the p \n# not the predicted outputs \ntrain_fpr,train_tpr,thresholds = roc_curve(y_train, clf.predict_proba(X_train_bow)[:,1] )\ntest_fpr,test_tpr,thresholds = roc_curve(y_test, clf.predict_proba(X_test_bow)[:,1]) \nplt.plot(train_fpr, train_tpr, label=\"train AUC =\"+str(auc(train_fpr, train_tpr))) \nplt.plot(test_fpr, test_tpr, label=\"test AUC =\"+str(auc(test_fpr, test_tpr)))                                             \nplt.legend()\nplt.xlabel(\"C_values: hyperparameter\") \nplt.ylabel(\"AUC\") \nplt.title(\"ERROR PLOTS\") \nplt.show()  ","8ec94732":"from sklearn.metrics import confusion_matrix \nprint(\"Train confusion matrix\") \nprint(confusion_matrix(y_train, clf.predict(X_train_bow))) \nprint(\"Test confusion matrix\")\nprint(confusion_matrix(y_test, clf.predict(X_test_bow)))\ncm_test=confusion_matrix(y_test, clf.predict(X_test_bow))\nimport seaborn as sns\nclass_label = [\"negative\", \"positive\"]\ndf_cm = pd.DataFrame(cm_test, index = class_label, columns = class_label)\n\nsns.heatmap(df_cm, annot = True, fmt = \"d\")\nplt.title(\"Confusiion Matrix\")\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.show()","a42d9338":"test=confusion_matrix(y_test, clf.predict(X_test_bow))\nclass_label = [\"negative\", \"positive\"]\ndf_cm = pd.DataFrame(test, index = class_label, columns = class_label)\n\nsns.heatmap(df_cm, annot = True, fmt = \"d\")\nplt.title(\"Confusiion Matrix\")\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.show()\n","d94f6af3":"from sklearn.metrics import log_loss\nloss=log_loss(y_test,clf.predict(X_test_bow))\nloss","01ec9a73":"from sklearn.tree import DecisionTreeClassifier\ntree=DecisionTreeClassifier()\ntree.fit(X_train, y_train)","17ee2ed2":"\n\ncm_tree=confusion_matrix(y_test,tree.predict(X_test_bow))\nimport seaborn as sns\nclass_label = [\"negative\", \"positive\"]\ndf_tree= pd.DataFrame(cm_tree, index = class_label, columns = class_label)\n\nsns.heatmap(df_tree, annot = True, fmt = \"d\")\nplt.title(\"Confusiion Matrix\")\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.show()","20333264":"from sklearn.metrics import log_loss\nloss=log_loss(y_test,tree.predict(X_test_bow))\nloss","c1656030":"from sklearn.calibration import CalibratedClassifierCV\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn import svm","74cbcac9":"'''hyper_param=[10**i for i in range(-5,5)]\ntrain=[]\ncv=[]\nfor i in hyper_param:\n    #model=SGDClassifier(alpha=i)\n    #svm=CalibratedClassifierCV(model,cv=3)\n    clf=svm.SVC(C=i,probability=True, )\n    clf.fit(X_train,y_train)\n    y_pred=clf.predict_proba(X_train)[:,1]\n    y_c=clf.predict_proba(X_cv)[:,1]\n    train.append(roc_auc_score(y_train,y_pred))\n    cv.append(roc_auc_score(y_cv,y_c))'''\n    ","297a8276":"'''plt.plot(np.log(hyper_param),train,label='train-auc')\nplt.plot(np.log(hyper_param),cv,label='cv-auc')\nplt.legend()\nplt.xlabel('hyp')\nplt.ylabel('auc')\nplt.show()'''","394e6fd4":"from sklearn import tree\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(X_train_bow, y_train)","c4534c98":"top_features(vectorizer, clf,10)","d810f148":"#Weights before adding noise\nweights1=clf.coef_\nprint(weights1.shape)","8dab8ba5":"import copy\nNoise_data=copy.deepcopy(X_train_bow)\ne=np.random.normal(0,0.001)\nNoise_data.data += e\nprint(Noise_data.shape)\n","804cabc9":"#Calculating weights after adding noise\nmodel = LogisticRegression(C= 0.01, penalty= 'l1')\nmodel.fit(Noise_data,y_train)\nweights2=model.coef_\nprint(weights2.shape)","fb0319c9":"#Adding small noise to avoid zero divide error\ne=np.random.normal(0,0.001)\nweights1+=e\nweights2+=e\n","3e6c0283":"def top_features(vectorizer, clf, n):\n    feature_names = vectorizer.get_feature_names()\n    coefs_with_fns = sorted(zip(clf.coef_[0], feature_names))\n    top = zip(coefs_with_fns[:n], coefs_with_fns[:-(n + 1):-1])\n    print(\"\\t\\t\\tNegative\\t\\t\\t\\t\\t\\tPositive\")\n    print(\"________________________________________________________________________________________________\")\n    for (coef_1, fn_1), (coef_2, fn_2) in top:\n        print(\"\\t%.4f\\t%-15s\\t\\t\\t\\t%.4f\\t%-15s\" % (coef_1, fn_1, coef_2, fn_2))","8c5fb7cf":"weights_difference = np.abs((weights2-weights1)\/weights1)*100\n#print(weights_difference)\nprint(weights_difference.max())\nprint(weights_difference.min())\nprint(weights_difference.std())","1c223e45":"\npercentage_change=[]\ncollinear_features=[]\n\nfor i in range(1,101):\n    f=np.where(weights_difference > i)[1].size\n    percentage_change.append(i)\n    collinear_features.append(f)\n    \nplt.xlabel('percentage change of weight vectors')\nplt.ylabel('no. of multicollinear features')\nplt.plot(percentage_change,collinear_features)","a2285ee8":"feat = vectorizer.get_feature_names()\nprint(\"No of features have weight changes greater than 30%: \", weights_difference[np.where(weights_difference > 30)].size)\nfe=[]\nprint(\"\\nHence below features are collinear:\")\nfor i in np.where(weights_difference > 1)[1]:\n    fe.append(feat[i])\nprint(fe)","2d17ae9a":"vect = TfidfVectorizer(lowercase=True)\n# we use the fitted CountVectorizer to convert the text to vector\nX_train_tfidf = vect.fit_transform(X_train)\nX_cv_tfidf = vect.transform(X_cv)\nX_test_tfidf = vectlowercase=True.transform(X_test) \nprint(\"After vectorizations\")\nprint(X_train_tfidf.shape, y_train.shape) \nprint(X_cv_tfidf.shape, y_cv.shape)\nprint(X_test_tfidf.shape, y_test.shape) \nprint(\"Standardization\")\nX_train_tfidf=StandardScaler(with_mean=False).fit_transform(X_train_tfidf)\nX_cv_tfidf=StandardScaler(with_mean=False).fit_transform(X_cv_tfidf)\nX_test_tfidf=StandardScaler(with_mean=False).fit_transform(X_test_tfidf)\nprint(X_train_tfidf.shape, y_train.shape) \nprint(X_cv_tfidf.shape, y_cv.shape)\nprint(X_test_tfidf.shape, y_test.shape)","8e249f3d":"optimal_lamda(X_train_tfidf,y_train,X_cv_tfidf,y_cv)","498948cc":"#Testing with test data\nclf = LogisticRegression(penalty='l1',C=0.01)\nclf.fit(X_train_tfidf, y_train)\n# roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the p \n# not the predicted outputs \ntrain_fpr,train_tpr,thresholds = roc_curve(y_train, clf.predict_proba(X_train_tfidf)[:,1] )\ntest_fpr,test_tpr,thresholds = roc_curve(y_test, clf.predict_proba(X_test_tfidf)[:,1]) \nplt.plot(train_fpr, train_tpr, label=\"train AUC =\"+str(auc(train_fpr, train_tpr))) \nplt.plot(test_fpr, test_tpr, label=\"test AUC =\"+str(auc(test_fpr, test_tpr)))                                             \nplt.legend()\nplt.xlabel(\"C_values: hyperparameter\") \nplt.ylabel(\"AUC\") \nplt.title(\"ERROR PLOTS\") \nplt.show()  ","772054f9":"from sklearn.metrics import confusion_matrix \nprint(\"Train confusion matrix\") \nprint(confusion_matrix(y_train, clf.predict(X_train_tfidf))) \nprint(\"Test confusion matrix\")\nprint(confusion_matrix(y_test, clf.predict(X_test_tfidf)))\ncm_test=confusion_matrix(y_test, clf.predict(X_test_tfidf))\nimport seaborn as sns\nclass_label = [\"negative\", \"positive\"]\ndf_cm = pd.DataFrame(cm_test, index = class_label, columns = class_label)\nsns.heatmap(df_cm, annot = True, fmt = \"d\")\nplt.title(\"Confusiion Matrix\")\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.show()\n","bf0e3baf":"top_features(vect, clf,10)","aad1b86c":"print(np.count_nonzero(clf.coef_))","e8ee9226":"#Word2Vec\n#train\ni=0 \nlist_of_sent=[] \nfor sentance in X_train:    \n    list_of_sent.append(sentance.split())\nw2v_model=Word2Vec(list_of_sent,min_count=5,size=50, workers=4)\nw2v_words = list(w2v_model.wv.vocab)","7cd297d0":"sent_vectors = []; # the avg-w2v for each sentence\/review is stored in this list\nfor sent in tqdm(list_of_sent): # for each review\/sentence\n    sent_vec = np.zeros(50) # as word vectors are of zero length\n    cnt_words =0; # num of words with a valid vector in the sentence\/review\n    for word in sent: # for each word in a review\/sentence\n        if word in w2v_words:\n            vec = w2v_model.wv[word]\n            sent_vec += vec\n            cnt_words += 1\n    if cnt_words != 0:\n        sent_vec \/= cnt_words\n    sent_vectors.append(sent_vec)\nprint(len(sent_vectors))\nprint(len(sent_vectors[0]))","a7866cde":"X_train_w2v=sent_vectors\nprint(len(X_train_w2v))","b5b76cb5":"#cv\ni=0 \nlist_of_sent=[] \nfor sentance in X_cv:    \n    list_of_sent.append(sentance.split())\nw2v_model=Word2Vec(list_of_sent,min_count=5,size=50, workers=4)\nw2v_words = list(w2v_model.wv.vocab)\nsent_vectors = []; # the avg-w2v for each sentence\/review is stored in this list\nfor sent in tqdm(list_of_sent): # for each review\/sentence\n    sent_vec = np.zeros(50) # as word vectors are of zero length\n    cnt_words =0; # num of words with a valid vector in the sentence\/review\n    for word in sent: # for each word in a review\/sentence\n        if word in w2v_words:\n            vec = w2v_model.wv[word]\n            sent_vec += vec\n            cnt_words += 1\n    if cnt_words != 0:\n        sent_vec \/= cnt_words\n    sent_vectors.append(sent_vec)\nprint(len(sent_vectors))\nprint(len(sent_vectors[0]))","9a28faec":"X_cv_w2v=sent_vectors\nprint(len(X_cv_w2v))","e82e4d1c":"#test\ni=0 \nlist_of_sent=[] \nfor sentance in X_test:    \n    list_of_sent.append(sentance.split())\nw2v_model=Word2Vec(list_of_sent,min_count=5,size=50, workers=4)\nw2v_words = list(w2v_model.wv.vocab)\nsent_vectors = []; # the avg-w2v for each sentence\/review is stored in this list\nfor sent in tqdm(list_of_sent): # for each review\/sentence\n    sent_vec = np.zeros(50) # as word vectors are of zero length\n    cnt_words =0; # num of words with a valid vector in the sentence\/review\n    for word in sent: # for each word in a review\/sentence\n        if word in w2v_words:\n            vec = w2v_model.wv[word]\n            sent_vec += vec\n            cnt_words += 1\n    if cnt_words != 0:\n        sent_vec \/= cnt_words\n    sent_vectors.append(sent_vec)\nprint(len(sent_vectors))\nprint(len(sent_vectors[0]))","faea9f81":"X_test_w2v=sent_vectors\nprint(len(X_test_w2v))","a4990db1":"optimal_lamda(X_train_w2v,y_train,X_cv_w2v,y_cv)","4d6ac125":"\nclf = LogisticRegression(penalty='l2',C=0.01)\nclf.fit(X_train_w2v, y_train)\n# roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the p \n# not the predicted outputs \ntrain_fpr,train_tpr,thresholds = roc_curve(y_train, clf.predict_proba(X_train_w2v)[:,1] )\ntest_fpr,test_tpr,thresholds = roc_curve(y_test, clf.predict_proba(X_test_w2v)[:,1]) \nplt.plot(train_fpr, train_tpr, label=\"train AUC =\"+str(auc(train_fpr, train_tpr))) \nplt.plot(test_fpr, test_tpr, label=\"test AUC =\"+str(auc(test_fpr, test_tpr)))                                             \nplt.legend()\nplt.xlabel(\"C_values: hyperparameter\") \nplt.ylabel(\"AUC\") \nplt.title(\"ERROR PLOTS\") \nplt.show()  ","0887dc8e":"from sklearn.metrics import confusion_matrix \nprint(\"Train confusion matrix\") \nprint(confusion_matrix(y_train, clf.predict(X_train_w2v))) \nprint(\"Test confusion matrix\")\nprint(confusion_matrix(y_test, clf.predict(X_test_w2v)))\ncm_test=confusion_matrix(y_test, clf.predict(X_test_w2v))\nimport seaborn as sns\nclass_label = [\"negative\", \"positive\"]\ndf_cm = pd.DataFrame(cm_test, index = class_label, columns = class_label)\nsns.heatmap(df_cm, annot = True, fmt = \"d\")\nplt.title(\"Confusiion Matrix\")\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.show()","4c3a385c":"#train\ni=0 \nlist_of_sentance=[] \nfor sentance in X_train:    \n    list_of_sentance.append(sentance.split())\nmodel = TfidfVectorizer()\ntf_idf_matrix = model.fit_transform(X_train)\n# we are converting a dictionary with word as a key, and the idf as a value \ndictionary = dict(zip(model.get_feature_names(), list(model.idf_)))\n# TF-IDF weighted Word2Vec\ntfidf_feat = model.get_feature_names() # tfidf words\/col-names \n# final_tf_idf is the sparse matrix with row= sentence, col=word and cell_val = tfidf \ntfidf_sent_vectors = []; # the tfidf-w2v for each sentence\/review is stored in this list \nrow=0; \nfor sent in tqdm(list_of_sentance): # for each review\/sentence \n    sent_vec = np.zeros(50) # as word vectors are of zero length \n    weight_sum =0; # num of words with a valid vector in the sentence\/revie \n    for word in sent: # for each word in a review\/sentenc\n        if word in w2v_words and word in tfidf_feat:\n            vec = w2v_model.wv[word]\n            tf_idf = dictionary[word]*(sent.count(word)\/len(sent))\n            sent_vec += (vec * tf_idf)\n            weight_sum += tf_idf\n    if weight_sum != 0:\n        sent_vec \/= weight_sum\n    tfidf_sent_vectors.append(sent_vec) \n    row += 1\n       \n\n    ","7fbfccd8":"X_train_tfidf_w2v=tfidf_sent_vectors\nprint(len(X_train_tfidf_w2v))","678c5309":"#cv\ni=0 \nlist_of_sentance=[] \nfor sentance in X_cv:    \n    list_of_sentance.append(sentance.split())\nmodel = TfidfVectorizer()\ntf_idf_matrix = model.fit_transform(X_cv)\n# we are converting a dictionary with word as a key, and the idf as a value \ndictionary = dict(zip(model.get_feature_names(), list(model.idf_)))\n# TF-IDF weighted Word2Vec\ntfidf_feat = model.get_feature_names() # tfidf words\/col-names \n# final_tf_idf is the sparse matrix with row= sentence, col=word and cell_val = tfidf \ntfidf_sent_vectors = []; # the tfidf-w2v for each sentence\/review is stored in this list \nrow=0; \nfor sent in tqdm(list_of_sentance): # for each review\/sentence \n    sent_vec = np.zeros(50) # as word vectors are of zero length \n    weight_sum =0; # num of words with a valid vector in the sentence\/revie \n    for word in sent: # for each word in a review\/sentenc\n        if word in w2v_words and word in tfidf_feat:\n            vec = w2v_model.wv[word]\n            tf_idf = dictionary[word]*(sent.count(word)\/len(sent))\n            sent_vec += (vec * tf_idf)\n            weight_sum += tf_idf\n    if weight_sum != 0:\n        sent_vec \/= weight_sum\n    tfidf_sent_vectors.append(sent_vec) \n    row += 1\n       \n\n    ","69dda8b1":"X_cv_tfidf_w2v=tfidf_sent_vectors\nprint(len(X_cv_tfidf_w2v))","dcf21f05":"#test\ni=0 \nlist_of_sentance=[] \nfor sentance in X_test:    \n    list_of_sentance.append(sentance.split())\nmodel = TfidfVectorizer()\ntf_idf_matrix = model.fit_transform(X_test)\n# we are converting a dictionary with word as a key, and the idf as a value \ndictionary = dict(zip(model.get_feature_names(), list(model.idf_)))\n# TF-IDF weighted Word2Vec\ntfidf_feat = model.get_feature_names() # tfidf words\/col-names \n# final_tf_idf is the sparse matrix with row= sentence, col=word and cell_val = tfidf \ntfidf_sent_vectors = []; # the tfidf-w2v for each sentence\/review is stored in this list \nrow=0; \nfor sent in tqdm(list_of_sentance): # for each review\/sentence \n    sent_vec = np.zeros(50) # as word vectors are of zero length \n    weight_sum =0; # num of words with a valid vector in the sentence\/revie \n    for word in sent: # for each word in a review\/sentenc\n        if word in w2v_words and word in tfidf_feat:\n            vec = w2v_model.wv[word]\n            tf_idf = dictionary[word]*(sent.count(word)\/len(sent))\n            sent_vec += (vec * tf_idf)\n            weight_sum += tf_idf\n    if weight_sum != 0:\n        sent_vec \/= weight_sum\n    tfidf_sent_vectors.append(sent_vec) \n    row += 1\n       \n\n    ","1814819f":"X_test_tfidf_w2v=tfidf_sent_vectors\nprint(len(X_test_tfidf_w2v))","e458650c":"optimal_lamda(X_train_tfidf_w2v,y_train,X_cv_tfidf_w2v,y_cv)","1e37af6c":"\nclf = LogisticRegression(penalty='l1',C=1)\nclf.fit(X_train_tfidf_w2v, y_train)\n# roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the p \n# not the predicted outputs \ntrain_fpr,train_tpr,thresholds = roc_curve(y_train, clf.predict_proba(X_train_tfidf_w2v)[:,1] )\ntest_fpr,test_tpr,thresholds = roc_curve(y_test, clf.predict_proba(X_test_tfidf_w2v)[:,1]) \nplt.plot(train_fpr, train_tpr, label=\"train AUC =\"+str(auc(train_fpr, train_tpr))) \nplt.plot(test_fpr, test_tpr, label=\"test AUC =\"+str(auc(test_fpr, test_tpr)))                                             \nplt.legend()\nplt.xlabel(\"C_values: hyperparameter\") \nplt.ylabel(\"AUC\") \nplt.title(\"ERROR PLOTS\") \nplt.show()  ","736b0b0b":"from sklearn.metrics import confusion_matrix \nprint(\"Train confusion matrix\") \nprint(confusion_matrix(y_train, clf.predict(X_train_tfidf_w2v))) \nprint(\"Test confusion matrix\")\nprint(confusion_matrix(y_test, clf.predict(X_test_tfidf_w2v)))\ncm_test=confusion_matrix(y_test, clf.predict(X_test_tfidf_w2v))\nimport seaborn as sns\nclass_label = [\"negative\", \"positive\"]\ndf_cm = pd.DataFrame(cm_test, index = class_label, columns = class_label)\nsns.heatmap(df_cm, annot = True, fmt = \"d\")\nplt.title(\"Confusiion Matrix\")\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.show()","6009145d":"Data=[[\"Bag of Words\",0.01,0.923,0.928,\"2198\",\"2436\",\"393\",\"23939\"],[\"TFIDF\",0.01,0.937,0.935,\"2348\",\"2286\",\"366\",\"23966\"],[\"Avgw2v\",0.01,0.846,0.819,\"484\",\"4150\",\"162\",\"24170\"],[\"Tf-Idf-w2v\",1,0.855,0.854,\"1497\",\"3137\",\"799\",\"23533\"]]\n\nresult=pd.DataFrame(Data,columns=[\"Featurization\",\"Hyper parameter(c)\",\"CV-AUC\",\"Test-Auc\",\"TNR\",\"FPR\",\"FNR\",\"TPR\"])\nresult","3e675d2a":"* TFIDF  Featurization performs best with CV-AUV of  0.937 and TEST AUC of 0.935.\n* TPR is maximun when tarined the model by tfidf.\n* FNR is low when tarined the model by Avg2v\n* Sparsity increases as we increase lambda or decrease C when L1 Regularizer is used.\n. ","65ae8613":"## Important features from positive and negative classes","59965fb7":"### [3] Preprocessing\n#### [3.1]. Preprocessing Review Text\n\n### Text Preprocessing: Stemming, stop-word removal and Lemmatization\n\nNow that we have finished deduplication our data requires some preprocessing before we go on further with analysis and making the prediction model.\n\nHence in the Preprocessing phase we do the following in the order below:-\n\n1.Begin by removing the html tags\n\n2.Remove any punctuations or limited set of special characters like , or . or # etc.\n\n3.Check if the word is made up of english letters and is not alpha-numeric\n\n4.Check to see if the length of the word is greater than 2 (as it was researched that there is no adjective in 2-letters)\n\n5.Convert the word to lowercase\n\n6.Remove Stopwords\n\n7.Finally Snowball Stemming the word (it was obsereved to be better than Porter Stemming)\n\nAfter which we collect the words used to describe positive and negative reviews","0b6e6882":"# Confusion Matrix","14b34d60":"# Testing with test data","ba576821":"# Conclusion :","3c697423":"# splitting data into Train, C.V and Test","7666fc22":"## No. of non Zero elements when penalty ='l1'","a97c205a":"# Testing with test data","d78a46ed":"# 4.2 TF-IDF","7094e136":"# store final table into an SQlLite table for future.","d1b37171":"##  [1]. Reading Data\n\n  ###     [1.1] Loading the data\n  \n  The dataset is available in two forms\n1. .csv le\n2. SQLite Database\nIn order to load the data, We have used the SQLITE dataset as it is easier to query the data and visualise the data eciently.  Here as we only want to get the global sentiment of the recommendations (positive or negative), we will purposefully ignore all Scores equal to 3. If the score is above 3, then the recommendation wil be set to \"positive\". Otherwise, it will be set to \"negative\".\n","181a2101":"# Confusion Matrix","83ae8630":"# Confusion Matrix","417ccc38":"## Important features from positive and negative classes","6ad14ac9":"## Pertubation test","17433063":"# Amazon Fine Food Reviews Analysis\n","1ff60d79":"# 4.3 Avg W2V","ace45dab":"#  TFIDF weighted W2v","f123b2cb":"As can be seen above the same user has multiple reviews of the with the same values for HelpfulnessNumerator, HelpfulnessDenominator, Score, Time, Summary and Text and on doing analysis it was found that \n\nProductId=B000HDOPZG was Loacker Quadratini Vanilla Wafer Cookies, 8.82-Ounce Packages (Pack of 8)\n\nProductId=B000HDL1RQ was Loacker Quadratini Lemon Wafer Cookies, 8.82-Ounce Packages (Pack of 8) and so on\n\nIt was inferred after analysis that reviews with same parameters other than ProductId belonged to the same product just having different flavour or quantity. Hence in order to reduce redundancy it was decided to eliminate the rows having same parameters.\n\nThe method used for the same was that we first sort the data according to ProductId and then just keep the first similar product review and delelte the others. for eg. in the above just the review for ProductId=B000HDL1RQ remains. This method ensures that there is only one representative for each product and deduplication without sorting would lead to possibility of different representatives still existing for the same product.\n","9fcbe09a":"## Confusion Matrix","591d5475":"[Q] How to determine if a review is positive or negative? \n \n[Ans] We could use Score\/Rating. A rating of 4 or 5 can be cosnidered as a positive review. A rating of 1 or 2 can be considered as negative one. A review of rating 3 is considered nuetral and such reviews are ignored from our analysis. This is an approximate and proxy way of determining the polarity (positivity\/negativity) of a review","512341c5":"## [2] Exploratory Data Analysis\n\n### [2.1] Data Cleaning: Deduplication\nIt is observed (as shown in the table below) that the reviews data had many duplicate entries. Hence it was necessary to remove duplicates in order to get unbiased results for the analysis of the data. Following is an example: ","f1d0727a":"## Objective:\n\nGiven a review, determine whether the review is positive (rating of 4 or 5) or negative (rating of 1 or 2).","714ab2c8":"#### Data Source: https:\/\/www.kaggle.com\/snap\/amazon-ne-food-reviews  \n#### EDA: https:\/\/nycdatascience.com\/blog\/student-works\/amazon-ne-foods-visualization\/ \n#### The Amazon Fine Food Reviews dataset consists of reviews of ne foods from Amazon. \n#### Number of reviews: 568,454 \n#### Number of users: 256,059 \n#### Number of products: 74,258 \n#### Timespan: Oct 1999 - Oct 2012 \n#### Number of Attributes\/Columns in data:10 Attribute Information:\n#### 1. Id\n#### 2. ProductId - unique identier for the product \n#### 3. UserId - unqiue identier for the user \n#### 4. ProleName \n#### 5. HelpfulnessNumerator - number of users who found the review helpful \n#### 6. HelpfulnessDenominator - number of users who indicated whether they found the review helpful or not \n#### 7. Score - rating between 1 and 5 \n#### 8. Time - timestamp for the review  \n#### 9. Summary - brief summary of the review \n#### 10. Text - text of the review\n","eef1e779":"### Observation:\nIt was also seen that in two rows given below the value of HelpfulnessNumerator is greater than HelpfulnessDenominator which is not practically possible hence these two rows too are removed from calcualtions","2f23c78a":"# Result :"}}