{"cell_type":{"979af96e":"code","4469c1eb":"code","1293d3bc":"code","e2af1e7a":"code","ea79d859":"code","a2d3fa1a":"code","e8a7f22c":"code","609ae3b8":"code","3834d413":"code","70b6eb15":"code","cb0876ed":"code","c992534b":"code","35a77f99":"code","c14bf3be":"code","9eca3ef2":"code","e7406420":"code","7b0f7d6e":"code","21396a5a":"code","e1d06215":"code","8bba7f8d":"code","f2a5878b":"code","ccba0300":"code","1d1c43ca":"code","3a20cc3c":"code","41d28d14":"code","e2f6d479":"code","1f3a1c68":"code","0484ab4a":"code","ecef93b4":"code","6c71b5ed":"code","60e80d68":"code","fd39b269":"code","51bc08de":"code","d54a5491":"code","0c9c0f98":"code","16c10836":"code","8a0c0c6a":"code","59d11181":"code","cbfb2202":"code","2a6d99ce":"code","2b4ca468":"code","b488d15b":"code","c0764e87":"code","e880a224":"code","030c19bd":"code","f0c5573c":"code","2186520d":"code","4ddc3c99":"code","a6fba1f2":"code","c70834f4":"code","6c6f8b0c":"code","31528e46":"code","50d74b8e":"code","7267f80d":"code","ea029aed":"code","c1e7fae8":"code","79e2386e":"code","b179f3b0":"code","768575bd":"code","d3668991":"code","2c84cef0":"code","48aed8cf":"code","a56c7d3e":"code","8412ddf4":"code","a9ad45aa":"code","ac25c95b":"code","37668b48":"code","36a91c0c":"code","1fa7fc0d":"code","aa31561e":"code","8d27e0a4":"code","4b3034ce":"code","0ba39a73":"code","2b4e9188":"code","f69829f3":"code","8aead9e5":"code","ae57d584":"code","7fab2c24":"code","fbfbe646":"markdown"},"source":{"979af96e":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","4469c1eb":"dataset = pd.read_csv('..\/input\/heart-failure-prediction\/heart.csv')\nprint('Dataset :\\n',dataset.head(5))\nprint('--------------------------------------------------------------------------')\nprint('Dataset Shape :',dataset.shape)\nprint('--------------------------------------------------------------------------')\nprint('Columns Name :')\nfor i in dataset.columns:\n  print(i)\n","1293d3bc":"Possitive = dataset[dataset['HeartDisease'].isin([1])]\nNegative = dataset[dataset['HeartDisease'].isin([0])]\nprint('Possitive :',Possitive)\nprint('-----------------------------------------------------------------------')\nprint('Negative:',Negative)\n","e2af1e7a":"number = dataset.HeartDisease\np,n = number.value_counts()\nprint('Possitive:',p)\nprint('Negative:',n)\n\nplt.figure(figsize=(8,5))\nsns.countplot(number,data=dataset,label='Counts')\nplt.show()","ea79d859":"g = dataset.Sex\nm,f = g.value_counts()\nprint('Male:',m)\nprint('Female:',f)\n\nplt.figure(figsize=(8,5))\nsns.countplot(g,data=dataset,label='Counts')\nplt.show()\n","a2d3fa1a":"plt.figure(figsize=(8,5))\nsns.countplot(x='Sex',hue='HeartDisease',data=dataset)\nplt.show()","e8a7f22c":"plt.figure(figsize=(8,5))\nsns.histplot(x='Age',hue='HeartDisease',data=dataset, multiple=\"dodge\", shrink=0.7)\nplt.show()","609ae3b8":"plt.figure(figsize=(8,5))\nsns.histplot(x='ChestPainType',hue='HeartDisease',data=dataset, multiple=\"dodge\",shrink=0.8)\nplt.show()","3834d413":"plt.figure(figsize=(8,5))\nsns.histplot(x='MaxHR',hue='HeartDisease',data=dataset,multiple='dodge', shrink= 0.7,kde=True)\nplt.show()\n  ","70b6eb15":"plt.figure(figsize=(8,5))\nsns.countplot(x='ExerciseAngina',hue='HeartDisease',data=dataset)\nplt.show()","cb0876ed":"plt.figure(figsize=(8,5))\nsns.histplot(x='Oldpeak',hue='HeartDisease',data=dataset,multiple='dodge', shrink= 0.7,kde=True)\nplt.show()","c992534b":"plt.figure(figsize=(8,5))\nsns.histplot(x='ST_Slope',hue='HeartDisease',data=dataset,multiple='dodge', shrink= 0.7)\nplt.show()","35a77f99":"dataset.std()","c14bf3be":"dataset.corr()","9eca3ef2":"plt.figure(figsize=(10,8))\nsns.heatmap(dataset.corr(),annot=True)\nplt.show()","e7406420":"sns.pairplot(dataset,hue='HeartDisease')","7b0f7d6e":"dataset.isnull().sum()","21396a5a":"import missingno as msnog\nmsnog.bar(dataset)","e1d06215":"num = dataset.select_dtypes('number').columns.to_list()\ncat = dataset.select_dtypes('object').columns.to_list()\nnum_dataset = dataset[num]\ncat_dataset = dataset[cat]\n\nprint('Numerical : ',num_dataset.columns)\nprint('\\n')\nprint('Categories : ',cat_dataset.columns)","8bba7f8d":"dataset['Sex'] = dataset['Sex'].map({'M':1,'F':0}) \ndataset['ChestPainType'] = dataset['ChestPainType'].map({'ATA':0,'NAP':1,'ASY':2,'TA':3}) \ndataset['RestingECG'] = dataset['RestingECG'].map({'Normal':0,'LVH':1,'ST':2}) \ndataset['ExerciseAngina'] = dataset['ExerciseAngina'].map({'N':0,'Y':1}) \ndataset['ST_Slope'] = dataset['ST_Slope'].map({'Up':0,'Flat':1,'Down':2}) ","f2a5878b":"dataset = pd.concat([dataset, pd.get_dummies(dataset['ChestPainType'], prefix='ChestPainType')], axis=1)\ndataset = pd.concat([dataset, pd.get_dummies(dataset['RestingECG'], prefix='RestingECG')], axis=1)\ndataset = pd.concat([dataset, pd.get_dummies(dataset['ST_Slope'], prefix='ST_Slope')], axis=1)","ccba0300":"dataset.drop(['ChestPainType','RestingECG','ST_Slope'],axis=1,inplace=True)","1d1c43ca":"y = dataset['HeartDisease'].values\ndataset = dataset.drop('HeartDisease',axis=1,inplace=False)\nX = dataset.values","3a20cc3c":"one_column = np.ones((X.shape[0],1))\nX = np.concatenate((one_column, X), axis = 1)","41d28d14":"y=np.reshape(y,(y.shape[0],1))\ntheta2 = np.zeros(X.shape[1])","e2f6d479":"print(X.shape)\nprint(y.shape)\nprint(theta2.shape)","1f3a1c68":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX[:,1:] = sc.fit_transform(X[:,1:])","0484ab4a":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=22)\nprint('X_train :',X_train[:3,:])\nprint('X_train shape:',X_train.shape)\nprint('---------------------------------------------------------------')\nprint('X_test :',X_test[:3,:])\nprint('X_test Shape :',X_test.shape)\nprint('---------------------------------------------------------------')\nprint('y_train :',y_train[:3,])\nprint('y_train shape :',y_train.shape)\nprint('---------------------------------------------------------------')\nprint('y_test :',y_test[:3,])\nprint('X_test shape :',y_test.shape)\n","ecef93b4":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.model_selection import cross_val_score\n\nLR = LogisticRegression(C =0.2, random_state=22,penalty='l2')\nCross_Validation_LR = cross_validate(LR, X_train, y_train, cv=6, return_train_score=True)\n\nprint('Train score value :',Cross_Validation_LR['train_score'])\nprint('Test score value :',Cross_Validation_LR['test_score'])\n\nscore_value_LR = cross_val_score(estimator=LR , X = X_train, y = y_train, cv=6)\nprint('Cross_Validation Score is :',np.mean(score_value_LR)*100)","6c71b5ed":"LR.fit(X_test,y_test)\nprint('Test score value :',LR.score(X_test,y_test))","60e80d68":"def sigmoid(z):\n    return 1 \/ (1 + np.exp(-z))\nn = np.arange(-20,20,step=1)\nplt.figure(figsize=(8,5))\nplt.plot(n,sigmoid(n),'r')\nplt.show()","fd39b269":"def cost_function_reg(theta2, X2, y2,lr):\n    theta2 = np.matrix(theta2)\n    X2 = np.matrix(X2)\n    y2 = np.matrix(y2)\n    first = np.multiply(-y2, np.log(sigmoid(X2 * theta2.T)))\n    second = np.multiply((1 - y2), np.log(1 - sigmoid(X2 * theta2.T)))\n    total_equation=np.sum(first - second) \/ (len(X2))\n    reg = (lr \/ 2 * len(X2)) * np.sum(np.power(theta2[:,1:theta2.shape[1]], 2))\n    final = total_equation + reg\n    return final ","51bc08de":"c = np.arange(0,1,step=0.01)\nfig, ax = plt.subplots(figsize=(10,8))\nax.plot(c, np.multiply(1, -np.log(c)), c='r', label='If y = 1')\nax.plot(c, np.multiply(1, -np.log(1-c)), c='b', label='If y = 0')\nax.set_xlabel('h(x)')\nax.set_ylabel('Cost(h(x), y)')\nax.legend(loc='upper center')","d54a5491":"def gradientReg(theta, X, y, learningRate):\n    theta = np.matrix(theta)\n    X = np.matrix(X)\n    y = np.matrix(y)\n    \n    parameters = int(theta.ravel().shape[1])\n    grad = np.zeros(parameters)\n    \n    error = sigmoid(X * theta.T) - y\n    \n    for i in range(parameters):\n        term = np.multiply(error, X[:,i])\n        \n        if (i == 0):\n            grad[i] = np.sum(term) \/ len(X)\n            \n\n        else:\n            grad[i] =(np.sum(term)\/len(X))+((learningRate\/len(X))*theta[:,i])\n           \n    return grad\n\nlearningRate = 0.0000001\n\n\nrcost = cost_function_reg(theta2, X_train, y_train, learningRate)\nprint()\nprint('regularized cost = ' , rcost)\nprint()","0c9c0f98":"import scipy.optimize as opt\nresult = opt.fmin_tnc(func=cost_function_reg, x0=theta2, fprime=gradientReg,args=(X_train, y_train, learningRate))\nprint( 'result = ' , result )\nprint()\nCost_After_Optimize = cost_function_reg(result[0], X_train, y_train,learningRate)\nprint()\nprint('Cost_Function After Optimize = ' , Cost_After_Optimize)\nprint()","16c10836":"def predict(theta, X):\n    probability = sigmoid(X * theta.T)\n    return [1 if x >= 0.6 else 0 for x in probability]\ntheta_min = np.matrix(result[0])\npredictions = predict(theta_min, X_test)\ncorrect = [1 if ((a == 1 and b == 1) or (a == 0 and b == 0)) else 0 for (a, b) in zip(predictions, y_test)]\nAccuracy_lr = np.sum(correct)\/ len(correct)\nprint('Accuracy',Accuracy_lr ) ","8a0c0c6a":"from sklearn.metrics import confusion_matrix\ncm_lr = confusion_matrix(y_test,predictions)\nprint(cm_lr)","59d11181":"plt.figure(figsize=(8,5))\nsns.heatmap(cm_lr,annot=True)\nplt.show()","cbfb2202":"from sklearn.metrics import classification_report\ncr_lr = classification_report(y_test,predictions)\nprint(cr_lr)","2a6d99ce":"from sklearn.metrics import roc_curve,auc\ntpr_LR,fpr_LR,threshold_LR = roc_curve(y_test,predictions)\nprint('tpr_LR: ',tpr_LR)\nprint('fpr_LR: ',fpr_LR)\nprint('threshold_LR:',threshold_LR)\n\nauc_LR = auc(tpr_LR,fpr_LR)\nprint('Area Under The Curve :',auc_LR)\n\n#Draw ROC Curve && AUC [Area Under The Curve]\nplt.figure(figsize=(10,8))\nplt.plot(tpr_LR,fpr_LR,marker='o',color='blue',label='Logistic Regression (auc = %0.3f)'% auc_LR)\nplt.ylabel('True Positive Rate -->')\nplt.xlabel('False Positive Rate -->')\n\nplt.legend()\n\nplt.show()","2b4ca468":"from sklearn.svm import SVC\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.model_selection import cross_val_score\n\nS_V_C = SVC(C =1,kernel='rbf', random_state=22)\nCross_Validation_S_V_C = cross_validate(S_V_C, X_train, y_train, cv=6, return_train_score=True)\n\nprint('Train score value :',Cross_Validation_S_V_C['train_score'])\nprint('Test score value :',Cross_Validation_S_V_C['test_score'])\n\nscore_value_S_V_C = cross_val_score(estimator=S_V_C, X = X_train, y = y_train, cv=6)\nprint('Cross_Validation Score is :',np.mean(score_value_S_V_C)*100)","b488d15b":"S_V_C.fit(X_train,y_train)","c0764e87":"y_pred_S_V_C = S_V_C.predict(X_test)\nprint('Y Test: \\n',y_test[:3,:])\nprint('Y Predict: ',y_pred_S_V_C[:3,])","e880a224":"from sklearn.metrics import accuracy_score\naccuracy_S_V_C=accuracy_score(y_test,y_pred_S_V_C)\nprint(accuracy_S_V_C)","030c19bd":"from sklearn.metrics import confusion_matrix\ncm_S_V_C=confusion_matrix(y_test,y_pred_S_V_C)\nprint(cm_S_V_C)\nplt.figure(figsize=(9,5))\nsns.heatmap(cm_S_V_C,center=True,annot=True)\nplt.show()","f0c5573c":"from sklearn.metrics import classification_report\ncr_S_V_C=classification_report(y_test,y_pred_S_V_C)\nprint(cr_S_V_C)","2186520d":"from sklearn.metrics import roc_curve,auc\ntpr_S_V_C,fpr_S_V_C,threshold_S_V_C=roc_curve(y_test,y_pred_S_V_C)\nauc_S_V_C=auc(tpr_S_V_C, fpr_S_V_C)\nprint('tpr_S_V_C',tpr_S_V_C)\nprint('fpr_S_V_C',fpr_S_V_C)\nprint('threshold_S_V_C',threshold_S_V_C)\n\n\n#Draw ROC Curve && AUC [Area Under The Curve]\nplt.figure(figsize=(9, 5))\nplt.plot(tpr_S_V_C, fpr_S_V_C, linestyle=':', label='SVM (auc = %0.3f)' % auc_S_V_C)\n\nplt.xlabel('False Positive Rate -->')\nplt.ylabel('True Positive Rate -->')\n\nplt.legend()\n\nplt.show()","4ddc3c99":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.model_selection import cross_val_score\n\nknn = KNeighborsClassifier(n_neighbors=27)\nCross_Validation = cross_validate(knn,X_train,y_train,cv=6,return_train_score=True)\n\nprint('Train Score Value :',Cross_Validation['train_score'])\nprint('Test Score Value :',Cross_Validation['test_score'])\n\nscore_knn = cross_val_score(estimator= knn, X = X_train, y=y_train, cv=6)\nprint('Validation Score :',np.mean(score_knn)*100)","a6fba1f2":"knn.fit(X_train,y_train)","c70834f4":"y_predict_knn =knn.predict(X_test)\nprint('y_test :',y_test[:3,])\nprint('y_predict',y_predict_knn[:3,])","6c6f8b0c":"from sklearn.metrics import accuracy_score\naccuracy_knn = accuracy_score(y_test,y_predict_knn)\nprint('accuracy_LR',accuracy_knn)","31528e46":"from sklearn.metrics import confusion_matrix\ncm_knn  = confusion_matrix(y_test,y_predict_knn)\nprint(cm_knn)","50d74b8e":"plt.figure(figsize=(8,5))\nsns.heatmap(cm_knn,annot=True)\nplt.show()","7267f80d":"from sklearn.metrics import classification_report\ncr_knn = classification_report(y_test,y_predict_knn)\nprint(cr_knn)","ea029aed":"from sklearn.metrics import roc_curve,auc\nknn_tpr,knn_fpr,threshold=roc_curve(y_test,y_predict_knn)\nknn_auc=auc(knn_tpr,knn_fpr)\nprint('knn_tpr',knn_tpr)\nprint('knn_fpr',knn_fpr)\nprint('threhold',threshold)\n\nplt.figure(figsize=(9,5))\nplt.plot(knn_tpr,knn_fpr,linestyle='-', label='KNN (auc = %0.3f)' % knn_auc)\n\nplt.xlabel('False Positive Rate -->')\nplt.ylabel('True Positive Rate -->')\n\nplt.legend()\n\nplt.show()","c1e7fae8":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.model_selection import cross_val_score\n\ndt=DecisionTreeClassifier(criterion = 'entropy',random_state=22,max_depth=6)\nCross_Validation_dt = cross_validate(dt, X_train,y_train,cv=6,return_train_score=True)\n\nprint('Train score value',Cross_Validation_dt['train_score'])\nprint('Test score value',Cross_Validation_dt['test_score'])\n\nscore_value_dt = cross_val_score(estimator=dt, X=X_train,y= y_train,cv=6)\nprint('Cross_Validation Score is :',np.mean(score_value_dt)*100)","79e2386e":"dt.fit(X_train,y_train)","b179f3b0":"y_pred_dt=dt.predict(X_test)","768575bd":"from sklearn.metrics import accuracy_score\naccuracy_dt=accuracy_score(y_test,y_pred_dt)\nprint('Accuracy Score',accuracy_dt)","d3668991":"from sklearn.metrics import confusion_matrix\ncm_dt=confusion_matrix(y_test,y_pred_dt)\nprint(cm_dt)\nplt.figure(figsize=(9,5))\nsns.heatmap(cm_dt,center=True,annot=True)\nplt.show()","2c84cef0":"from sklearn.metrics import classification_report\ncr_dt=classification_report(y_test,y_pred_dt)\nprint(cr_dt)","48aed8cf":"from sklearn.metrics import roc_curve,auc\ndt_tpr,dt_fpr,threshold=roc_curve(y_test,y_pred_dt)\ndt_auc=auc(dt_tpr,dt_fpr)\nprint('dt_tpr Value  : ', dt_tpr)\nprint('dt_fpr Value  : ', dt_fpr)\nprint('thresholds Value  : ', threshold)\n\n#Draw ROC Curve && AUC [Area Under The Curve]\n\nplt.figure(figsize=(5, 5), dpi=100)\nplt.plot(dt_tpr, dt_fpr, linestyle='--', label='DecisionTree (auc = %0.3f)' % dt_auc)\n\nplt.xlabel('True Positive Rate -->')\nplt.ylabel('False Positive Rate -->')\n\nplt.legend()\nplt.show()","a56c7d3e":"from sklearn.ensemble import RandomForestClassifier \nfrom sklearn.model_selection import cross_validate\nfrom sklearn.model_selection import cross_val_score\n\nrf=RandomForestClassifier(criterion = 'entropy',random_state=22,max_depth=10,n_estimators=100)\nCross_Validation_rf = cross_validate(rf, X_train,y_train,cv=6,return_train_score=True)\n\nprint('Train score value',Cross_Validation_rf['train_score'])\nprint('Test score value',Cross_Validation_rf['test_score'])\n\nscore_value_rf = cross_val_score(estimator=rf, X=X_train,y= y_train,cv=6)\nprint('Cross_Validation Score is :',np.mean(score_value_rf)*100)\n","8412ddf4":"rf.fit(X_train,y_train)","a9ad45aa":"y_pred_rf=rf.predict(X_test)\nprint('Y Test: ',y_test[:3,:])\nprint('Y Pred',y_pred_rf[:3,])","ac25c95b":"from sklearn.metrics import accuracy_score\naccuracy_rf=accuracy_score(y_test,y_pred_rf)\nprint('Accuracy Score',accuracy_rf)","37668b48":"from sklearn.metrics import confusion_matrix\ncm_rf=confusion_matrix(y_test,y_pred_rf)\nprint(cm_rf)\nplt.figure(figsize=(9,5))\nsns.heatmap(cm_rf,center=True)\nplt.show()","36a91c0c":"from sklearn.metrics import classification_report\ncr=classification_report(y_test,y_pred_rf)\nprint(cr)","1fa7fc0d":"from sklearn.metrics import roc_curve,auc\nrf_tpr,rf_fpr,threshold=roc_curve(y_test,y_pred_rf)\nrf_auc=auc(rf_tpr,rf_fpr)\nprint('rf_tpr Value  : ', rf_tpr)\nprint('rf_fpr Value  : ', rf_fpr)\nprint('thresholds Value  : ', threshold)\n\n#Draw ROC Curve && AUC [Area Under The Curve]\n\nplt.figure(figsize=(5, 5), dpi=100)\nplt.plot(rf_tpr, rf_fpr, linestyle='-', label='Random Force (auc = %0.3f)' % rf_auc)\n\nplt.xlabel('True Positive Rate -->')\nplt.ylabel('False Positive Rate -->')\n\nplt.legend()\nplt.show()","aa31561e":"from sklearn.naive_bayes import BernoulliNB\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.model_selection import cross_val_score\n\nNB=BernoulliNB()\nCross_Validation_NB = cross_validate(NB, X_train,y_train,cv=6,return_train_score=True)\n\nprint('Train score value',Cross_Validation_NB['train_score'])\nprint('Test score value',Cross_Validation_NB['test_score'])\n\nscore_value_NB = cross_val_score(estimator=NB, X=X_train,y= y_train,cv=6)\nprint('Cross_Validation Score is :',np.mean(score_value_NB)*100)","8d27e0a4":"NB.fit(X_train,y_train)","4b3034ce":"#Calculating Prediction\ny_pred_NB = NB.predict(X_test)\ny_pred_prob = NB.predict_proba(X_test)\ny_pred_prob=y_pred_prob.astype(int)\nprint('Y Test \\n' ,y_test[:10,:])\nprint('Predicted Value for BernoulliNBModel is :\\n ' , y_pred_NB[:10,])\nprint('Prediction Probabilities Value for BernoulliNBModel is : \\n' , y_pred_prob[:10,:])","0ba39a73":"from sklearn.metrics import accuracy_score\naccuracy_NB=accuracy_score(y_test,y_pred_NB)\nprint(accuracy_NB)","2b4e9188":"from sklearn.metrics import confusion_matrix\ncm_NB=confusion_matrix(y_test,y_pred_NB)\nprint(cm_NB)\nplt.figure(figsize=(9,5))\nsns.heatmap(cm_NB,center=True,annot=True)\nplt.show()","f69829f3":"from sklearn.metrics import classification_report\ncr_NB=classification_report(y_test,y_pred_NB)\nprint(cr_NB)","8aead9e5":"from sklearn.metrics import roc_curve,auc\nnb_tpr,nb_fpr,threshold=roc_curve(y_test,y_pred_NB)\nnb_auc=auc(nb_tpr,nb_fpr)\nprint('nb_tpr Value  : ', nb_tpr)\nprint('nb_fpr Value  : ', nb_fpr)\nprint('thresholds Value  : ', threshold)\n\n#Draw ROC Curve && AUC [Area Under The Curve]\n\nplt.figure(figsize=(5, 5), dpi=100)\nplt.plot(rf_tpr, rf_fpr, linestyle='-', label='Naive Basye (auc = %0.3f)' % nb_auc)\n\nplt.xlabel('True Positive Rate -->')\nplt.ylabel('False Positive Rate -->')\n\nplt.legend()\nplt.show()","ae57d584":"from sklearn.metrics import roc_curve, auc\n\ntpr_LR,fpr_LR,threshold_LR=roc_curve(y_test,predictions)\nauc_LR = auc(tpr_LR, fpr_LR)\n\ntpr_S_V_C,fpr_S_V_C , threshold_S_V_C = roc_curve(y_test, y_pred_S_V_C)\nsvm_auc = auc(tpr_S_V_C, fpr_S_V_C)\n\nknn_fpr, knn_tpr, threshold = roc_curve(y_test, y_predict_knn)\nknn_auc = auc(knn_fpr, knn_tpr)\n\ndt_fpr, dt_tpr, threshold = roc_curve(y_test, y_pred_dt)\ndt_auc = auc(dt_fpr, dt_tpr)\n\nrf_fpr, rf_tpr, threshold = roc_curve(y_test, y_pred_rf)\nrf_auc = auc(rf_fpr, rf_tpr)\n\n\nnb_fpr, nb_tpr, threshold = roc_curve(y_test, y_pred_NB)\nnb_auc = auc(nb_fpr, nb_tpr)\n\nplt.figure(figsize=(9, 5))\nplt.plot(tpr_LR, fpr_LR, marker='o', label='Logistic Regression (auc = %0.3f)' % auc_LR)\nplt.plot(tpr_S_V_C, fpr_S_V_C, linestyle='--', label='SVM (auc = %0.3f)' % auc_S_V_C)\nplt.plot(knn_fpr, knn_tpr, linestyle=':', label='KNN (auc = %0.3f)' % knn_auc)\nplt.plot(dt_fpr, dt_tpr, linestyle='-', label='DT (auc = %0.3f)' % dt_auc)\nplt.plot(rf_fpr, rf_tpr, linestyle='-', label='RF (auc = %0.3f)' % rf_auc)\nplt.plot(nb_fpr, nb_tpr, linestyle='--', label='NB (auc = %0.3f)' % nb_auc)\n\nplt.xlabel('False Positive Rate -->')\nplt.ylabel('True Positive Rate -->')\n\nplt.legend()","7fab2c24":"models = pd.DataFrame({\n    'Model': ['Logistic Regression','Support Vector Machines', 'KNN','Decision Tree', \n              'Random Forest', 'Naive Bayes'],\n    'Score': [Accuracy_lr, accuracy_S_V_C, accuracy_knn, \n              accuracy_dt, accuracy_rf, accuracy_NB]})\nmodels.sort_values(by='Score', ascending=False)","fbfbe646":"Project Name: Heart Failure Prediction"}}