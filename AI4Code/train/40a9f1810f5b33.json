{"cell_type":{"cff47809":"code","3499de86":"code","61640fc8":"code","c9badfe0":"code","31962b3f":"code","16230515":"code","2e5a70d7":"code","48342ac7":"code","a8fe67b3":"code","8e78db71":"code","6c7b2b48":"code","8ce9cd83":"code","602b2266":"code","870094df":"code","3628c866":"code","6f749472":"code","17267df0":"code","6a977917":"code","a1194e69":"code","14d6111e":"code","f9063941":"code","b6462f2c":"code","c262e520":"code","6b594d9f":"code","534990e9":"code","93ecfa57":"code","f59c96f7":"code","eeade5af":"code","8bcfca46":"code","c3722cc0":"code","dc375fdd":"code","201e9bc5":"code","bdb5fe7c":"code","f3668910":"code","4324b382":"code","389e2e2e":"code","ce00cde5":"code","60d4a886":"markdown","e30cceb3":"markdown","382eb4ba":"markdown","a3bc1cef":"markdown","f80eb1d2":"markdown","2821eb14":"markdown","18c8c72e":"markdown","9ea01515":"markdown","228e5a44":"markdown","1335b9fa":"markdown","0e8bd854":"markdown"},"source":{"cff47809":"import pandas as pd\nfname_sales_train = '..\/input\/competitive-data-science-predict-future-sales\/sales_train.csv'\ndf_sales_train = pd.read_csv(fname_sales_train)\ndf_sales_train","3499de86":"df_sales_train.isnull().sum()","61640fc8":"fname_shops = '..\/input\/competitive-data-science-predict-future-sales\/shops.csv'\ndf_shops = pd.read_csv(fname_shops)\ndf_shops","c9badfe0":"df_shops.isnull().sum()","31962b3f":"fname_items='..\/input\/competitive-data-science-predict-future-sales\/items.csv'\ndf_items=pd.read_csv(fname_items)\ndf_items","16230515":"df_items.isnull().sum()","2e5a70d7":"fname_item_categories='..\/input\/competitive-data-science-predict-future-sales\/item_categories.csv'\ndf_item_categories=pd.read_csv(fname_item_categories)\ndf_item_categories","48342ac7":"df_item_categories.isnull().sum()","a8fe67b3":"fname_test='..\/input\/competitive-data-science-predict-future-sales\/test.csv'\ndf_test=pd.read_csv(fname_test)\ndf_test","8e78db71":"df_master=pd.merge(df_sales_train,df_shops,how='outer',on='shop_id')\ndf_master","6c7b2b48":"df_master=pd.merge(df_master,df_items,how='outer',on='item_id')\ndf_master","8ce9cd83":"df_master=pd.merge(df_master,df_item_categories,how='outer',on='item_category_id')\ndf_master","602b2266":"df_master['date']=pd.to_datetime(df_master['date'],dayfirst=True)\ndf_master","870094df":"df_master['date'] = df_master['date'].apply(lambda x: x.strftime('%Y-%m') if x is not pd.NaT else pd.NaT)\ndf_master","3628c866":"df = df_master[['date', 'shop_id', 'item_id', 'item_cnt_day']]\ndf = df.groupby(['date', 'shop_id', 'item_id']).sum()\ndf","6f749472":"import numpy as np\n\ndf = df.pivot_table(index=['shop_id','item_id'], columns='date', values='item_cnt_day', fill_value=0, aggfunc=np.sum)\ndf","17267df0":"df = df.reset_index()\ndf.columns.name = None\ndf","6a977917":"df_test_src=pd.merge(df_test,df,how='left', on=['shop_id','item_id'])\ndf_test_src=df_test_src.drop(['ID'],axis=1).fillna(0)\ndf_test_src","a1194e69":"X_train = df.drop(['2015-10'], axis=1)\nX_train","14d6111e":"y_train = df['2015-10']\ny_train","f9063941":"X_test = df_test_src.drop(['2013-01'], axis=1)\nX_test","b6462f2c":"X_train_nn = X_train.values[:, 2:]\nX_train_nn.shape","c262e520":"y_train_nn = y_train.values\ny_train_nn.shape","6b594d9f":"X_test_nn = X_test.values[:, 2:]\nX_test_nn.shape","534990e9":"from sklearn.preprocessing import RobustScaler\nX_scaler = RobustScaler()\n\nX_train_nn = X_scaler.fit_transform(X_train_nn)\nX_test_nn = X_scaler.transform(X_test_nn)\n\ny_scaler = RobustScaler()\ny_train_nn=y_scaler.fit_transform(np.expand_dims(y_train_nn,axis=-1)).squeeze()\n","93ecfa57":"import tensorflow as tf\n\ninput = tf.keras.layers.Input(shape=(33,1))\n\nx = input\nx = tf.keras.layers.GRU(32, return_sequences=True, dropout=0.1)(x)\nx = tf.keras.layers.GRU(32, return_sequences=True, dropout=0.1)(x)\nx = tf.keras.layers.GRU(32, dropout=0.1)(x)\n\noutput = tf.keras.layers.Dense(1)(x)\n\nmodel = tf.keras.models.Model(input,output)\nmodel.summary()","f59c96f7":"model.compile(optimizer='adam', loss=tf.keras.losses.MeanSquaredError(),metrics=['accuracy'])","eeade5af":"epochs = 100\nbatch_size = 256\nMSE=[]\naccus=[]\ncallbacks = [\n    tf.keras.callbacks.EarlyStopping(patience=5, restore_best_weights=True)]\n\nhistory = model.fit(np.expand_dims(X_train_nn, axis=-1),\n                    y_train_nn,\n                    validation_split=0.1,\n                    epochs=epochs,\n                    batch_size=batch_size,\n                    callbacks=callbacks)\nMSE.append(history.history['loss'])\naccus.append(history.history['accuracy'])","8bcfca46":"MSE","c3722cc0":"MSE=[17.23740577697754,\n  17.146400451660156,\n  17.06780242919922,\n  17.00035285949707,\n  16.937820434570312,\n  16.876121520996094,\n  16.806711196899414,\n  16.72635269165039,\n  16.653059005737305,\n  16.641311645507812,\n  16.586013793945312,\n  16.544328689575195,\n  16.477075576782227,\n  16.44742774963379,\n  16.36529541015625,\n  16.329736709594727,\n  16.272869110107422,\n  16.232526779174805,\n  16.382827758789062,\n  16.121000289916992,\n  16.110342025756836,\n  16.075496673583984,\n  16.019672393798828,\n  16.0389461517334,\n  15.980767250061035]","dc375fdd":"import numpy as np\n[np.mean(MSE)]","201e9bc5":"MSE2=[16.560233157614004,\n 16.20846902756464,\n 16.192753728230795,\n 15.83425122499466,\n 16.408649103982107,\n 16.110182637753695,\n 16.353180817195348,\n 15.871306971499795,\n 16.476158752441407,\n 16.14610550620339,\n 16.042625253850762,\n 16.147459250230057,\n 16.39347590169599,\n 16.431691106160482,\n 16.0304728558189,\n 16.29587086764249,\n 16.50674347082774,\n 16.141746811244797,\n 16.04782921075821,\n 15.95643138885498,\n 16.403288394212723,\n 16.175094561143354,\n 16.139255046844482,\n 16.160969560796563,\n 16.22540261195256,\n 16.16890223821004,\n 16.426226395827072,\n 16.164062573359562,\n 16.436739955629623,\n 15.996581569794685,\n 16.006873267037527,\n 16.032642110188803,\n 16.444861037390574,\n 16.436265182495116,\n 16.139064967632294,\n 15.92740535736084,\n 16.362799326578777,\n 16.039993180169,\n 16.174950880162857,\n 15.991812578837077,\n 16.535628235858418,\n 16.043943157902472,\n 16.08322678671943,\n 15.858921156989204,\n 16.33932500897032,\n 16.06690712632804,\n 16.07255354794589,\n 16.092534482479095,\n 16.45778072797335,\n 16.133479754130047,\n 16.22783317565918,\n 16.263992743058637,\n 16.488136609395344,\n 15.967597007751465,\n 16.152947545051575,\n 15.893114240545975,\n 16.340637058019638,\n 16.523025671641033,\n 16.467392444610596,\n 15.73178495679583,\n 16.516398906707764,\n 16.2178731398149,\n 16.137426326149388,\n 15.958148454364977]","bdb5fe7c":"#model.compile(loss)","f3668910":"y_pred = model.predict(np.expand_dims(X_test_nn, -1))\ny_pred","4324b382":"y_pred = y_scaler.inverse_transform(y_pred).squeeze()\ny_pred","389e2e2e":"answer = pd.concat([df_test['ID'], pd.Series(y_pred.squeeze(), name='item_cnt_month')], axis=1)\nanswer","ce00cde5":"submission='.\/submission.csv'\nanswer.to_csv(submission, index=False)","60d4a886":"**Merge past data to test one**","e30cceb3":"**Get explanatory and objective variables**","382eb4ba":"**Prediction**","a3bc1cef":"**Merge days**","f80eb1d2":"**Normalization**","2821eb14":"Quantidade de items vendidos por m\u00eas","18c8c72e":"**Pre-processing**\n\nMerge tables","9ea01515":"**Convert date to datetime**\n\n(o dia vem primeiro no dataset ent\u00e3o \"dayfirst\"=true)","228e5a44":"**Neural Network**","1335b9fa":"**Learning**","0e8bd854":"**LSTM Modeling**\n\nReshape data"}}