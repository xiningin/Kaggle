{"cell_type":{"976890db":"code","d7b87e73":"code","ecf83e65":"code","626fa59f":"code","a4360b20":"code","bbd7b507":"code","8414a518":"code","3e953fa0":"code","c730bbba":"code","9e6985e1":"code","0c44f2bc":"code","f0fda85c":"code","5fac7cab":"code","75bd3242":"code","c211171e":"code","a1a00005":"code","99b918a7":"markdown","fe49b181":"markdown","b5cb5b99":"markdown","011342d0":"markdown","1f691f43":"markdown","c551e691":"markdown","401e9083":"markdown","47990b5f":"markdown"},"source":{"976890db":"import sys\n!cp ..\/input\/rapids\/rapids.0.13.0 \/opt\/conda\/envs\/rapids.tar.gz\n!cd \/opt\/conda\/envs\/ && tar -xzvf rapids.tar.gz > \/dev\/null\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\/python3.6\/site-packages\"] + sys.path\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\/python3.6\"] + sys.path\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\"] + sys.path \n!cp \/opt\/conda\/envs\/rapids\/lib\/libxgboost.so \/opt\/conda\/lib\/\nsys.path","d7b87e73":"import numpy as np \nimport pandas as pd \nimport cuml\nimport matplotlib.pyplot as plt\nfrom scipy.stats import mode\nfrom sklearn.metrics import f1_score, accuracy_score\nfrom cuml.neighbors import KNeighborsClassifier, NearestNeighbors\nimport cuml; cuml.__version__\nfrom scipy import signal\nfrom scipy.fft import fftshift\nfrom tqdm import tqdm_notebook as tqdm\n\n# visualize\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\nimport matplotlib.pyplot as plt\nimport matplotlib.style as style\nimport seaborn as sns\nfrom matplotlib.ticker import ScalarFormatter\nsns.set_context(\"talk\")\nstyle.use('fivethirtyeight')\n","ecf83e65":"train = pd.read_csv('\/kaggle\/input\/data-without-drift\/train_clean.csv')\ntrain['group'] = -1\nx = [(0,500000),(1000000,1500000),(1500000,2000000),(2500000,3000000),(2000000,2500000)]\nfor k in range(5): train.iloc[x[k][0]:x[k][1],3] = k\nres = 1000\nplt.figure(figsize=(20,5))\nplt.plot(train.time[::res],train.signal[::res])\nplt.plot(train.time,train.group,color='black')\nplt.title('Clean Train Data. Blue line is signal. Black line is group number.')\nplt.xlabel('time'); plt.ylabel('signal')\nplt.show()","626fa59f":"test = pd.read_csv('\/kaggle\/input\/data-without-drift\/test_clean.csv')\ntest['group'] = -1\nx = [[(0,100000),(300000,400000),(800000,900000),(1000000,2000000)],[(400000,500000)], \n     [(100000,200000),(900000,1000000)],[(200000,300000),(600000,700000)],[(500000,600000),(700000,800000)]]\nfor k in range(5):\n    for j in range(len(x[k])): test.iloc[x[k][j][0]:x[k][j][1],2] = k\n        \nres = 400\nplt.figure(figsize=(20,5))\nplt.plot(test.time[::res],test.signal[::res])\nplt.plot(test.time,test.group,color='black')\nplt.title('Clean Test Data. Blue line is signal. Black line is group number.')\nplt.xlabel('time'); plt.ylabel('signal')\nplt.show()","a4360b20":"plt.figure(figsize=(20, 10))\nplt.plot(train[\"time\"], train[\"signal\"])\nplt.title(\"Signal data\", fontsize=20)\nplt.xlabel(\"Time\", fontsize=18)\nplt.ylabel(\"Signal\", fontsize=18)\nplt.show()\n","bbd7b507":"fig = make_subplots(rows=5, cols=2, subplot_titles=[\"Batch #{}\".format(i) for i in range(10)])\ni = 0\n\nfor row in range(1, 6):\n    for col in range(1, 3):   \n        \n        data = train.iloc[(i * 500000):((i+1) * 500000 + 1)]['open_channels'].value_counts(sort=False).values\n        fig.add_trace(go.Bar(x=list(range(11)), y=data), row=row, col=col)\n        \n        i += 1\n\nfig.update_layout(title_text=\"Target distribution in different batches\", height=1200, showlegend=True)\nfig.show()","8414a518":"#train = train.copy()\ntrain['batches'] = (train.index \/\/ 500_000) + 1\n#train","3e953fa0":"from itertools import cycle\n\ncolor_pal = [x['color'] for x in plt.rcParams['axes.prop_cycle']]\ncolor_cycle = cycle(plt.rcParams['axes.prop_cycle'].by_key()['color'])\n\nfig, axs = plt.subplots(10, 2, figsize=(20, 30))\naxs = axs.flatten()\ni = 0\nfor b, d in train.groupby('batches'):    \n    d.set_index('time')['signal'].plot(style='.',\n                                       title=f'train batch {b:0.0f} - signal',\n                                       ax=axs[i],\n                                       alpha=0.2,\n                                      color=next(color_cycle))\n    d.set_index('time')['open_channels'].plot(style='.',\n                                              title=f'train batch {b:0.0f} - open_channels',\n                                              ax=axs[i+1],\n                                              alpha=0.5,\n                                      color=next(color_cycle))\n    i += 2\nplt.tight_layout()","c730bbba":"plt.figure(figsize=(20,5))\nplt.plot(train.time, train.signal)\nplt.plot(train.time, train.open_channels,alpha=0.7)\nplt.show()","9e6985e1":"KNN = 200\nbatch = 1000\n\ntest_pred = np.zeros((test.shape[0]),dtype=np.int8)\nfor g in [0,1,2,3,4]:\n    print('Infering group %i'%g)\n    \n    # TRAIN DATA\n    data = train.loc[train.group==g]\n    X_train = np.zeros((len(data)-6,7))\n    X_train[:,0] = 0.25*data.signal[:-6]\n    X_train[:,1] = 0.5*data.signal[1:-5]\n    X_train[:,2] = 1.0*data.signal[2:-4]\n    X_train[:,3] = 4.0*data.signal[3:-3]\n    X_train[:,4] = 1.0*data.signal[4:-2]\n    X_train[:,5] = 0.5*data.signal[5:-1]\n    X_train[:,6] = 0.25*data.signal[6:]\n    y_train = data.open_channels[3:].values\n    \n    \n    data = test.loc[test.group==g]\n    X_test = np.zeros((len(data)-6,7))\n    X_test[:,0] = 0.25*data.signal[:-6]\n    X_test[:,1] = 0.5*data.signal[1:-5]\n    X_test[:,2] = 1.0*data.signal[2:-4]\n    X_test[:,3] = 4.0*data.signal[3:-3]\n    X_test[:,4] = 1.0*data.signal[4:-2]\n    X_test[:,5] = 0.5*data.signal[5:-1]\n    X_test[:,6] = 0.25*data.signal[6:]\n\n    # HERE IS THE CORRECT WAY TO USE CUML KNN \n    #model = KNeighborsClassifier(n_neighbors=KNN)\n    #model.fit(X_train,y_train)\n    #y_hat = model.predict(X_test)\n    #test_pred[test.group==g][1:-1] = y_hat\n    #continue\n    \n    # WE DO THIS BECAUSE CUML v0.12.0 HAS A BUG\n    model = NearestNeighbors(n_neighbors=KNN)\n    model.fit(X_train)\n    distances, indices = model.kneighbors(X_test)\n\n    ct = indices.shape[0]\n    pred = np.zeros((ct+6),dtype=np.int8)\n    it = ct\/\/batch + int(ct%batch!=0)\n    print('Processing %i batches:'%(it))\n    for k in range(it):\n        a = batch*k; b = batch*(k+1); b = min(ct,b)\n        pred[a+3:b+3] = np.median( y_train[ indices[a:b].astype(int) ], axis=1)\n        #print(k,', ',end='')\n    #print()\n    test_pred[test.group==g] = pred","0c44f2bc":"#missing = np.mean(X_test,axis=0)\n#X_test = np.vstack((X_test,missing))\n#X_test.shape","f0fda85c":" # HERE IS THE CORRECT WAY TO USE CUML KNN \n##for g in [0,1,2,3,4]:    \n#    model = KNeighborsClassifier(n_neighbors=KNN)\n #   model.fit(X_train,y_train)\n  #  y_hat = model.predict(X_test)\n   # test_pred[test.group==g][1:-1] = y_hat\n    #continue","5fac7cab":"\n\n    # HERE IS THE CORRECT WAY TO USE CUML KNN \n#model = KNeighborsClassifier(n_neighbors=KNN)\n#model.fit(X_train,y_train)\n#y_hat = model.predict(X_test)\n#test_pred[test.group==g][1:-1] = y_hat\n    \n   ","75bd3242":"test_pred[test.group==g].shape","c211171e":"sub = pd.read_csv('..\/input\/liverpool-ion-switching\/sample_submission.csv')\nsub.open_channels = test_pred\nsub.to_csv('submission.csv',index=False,float_format='%.4f')\n\nres=200\nplt.figure(figsize=(20,5))\nplt.plot(sub.time[::res],sub.open_channels[::res])\nplt.show()","a1a00005":"#from sklearn.metrics import classification_report,confusion_matrix\n#print(classification_report(test,test_pred))\n#print('\\n')\n#print(confusion_matrix(test,test_pred))\n#from sklearn.metrics import f1_score\n\n","99b918a7":"# Acknowledgement\n\nI want to thank Chris Deotte for providing this [notebook](https:\/\/www.kaggle.com\/cdeotte\/rapids-knn-30-seconds-0-938) and great tool rapids.","fe49b181":"**Train Set****","b5cb5b99":"***Test Data***","011342d0":"# Preparing Model ","1f691f43":"# \"The degree of noise could be altered simply by moving the patch-clamp headstage closer to or further from the PC. In some cases, driftwas added as an additional challenge via a separate Matlab scrip\"\u00b6\n# So that I can make an assumption, that this noise was added artificially by moving patch-clamp headstage.","c551e691":"Installing Rapids..","401e9083":"# Importing necessary modules","47990b5f":"# VISUALIZATIONS"}}