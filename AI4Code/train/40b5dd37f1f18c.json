{"cell_type":{"c3d7c45f":"code","dc69fcbf":"code","10e09ee1":"code","438f0ddb":"code","c707297a":"code","b3d0d1f7":"code","154804aa":"code","28bc095f":"code","b964424a":"code","9c55a036":"code","ff0b5826":"code","6c4da834":"code","305ae5c1":"code","d10e05b3":"code","34a2673d":"code","524c392c":"code","a1a92eb3":"code","c92113d1":"code","0053df25":"code","883a976f":"code","44ef2d6c":"code","4433749a":"code","ef63df69":"code","2109b90f":"code","182877c0":"code","051e258a":"code","f9cbaff6":"code","a941b04e":"code","74289a69":"code","db22ed67":"code","9c3b910d":"code","ff36f411":"code","f03ba95b":"code","47e023ce":"code","7a04e570":"code","dce136f8":"markdown","b8599969":"markdown","cc93efd2":"markdown","6ad49d9a":"markdown","826be73a":"markdown","dddf449a":"markdown","8d29f2b8":"markdown","6abb4740":"markdown","b754f744":"markdown","28c45a4f":"markdown","d531b1ed":"markdown","02be1b56":"markdown","c9231c01":"markdown","d381dd17":"markdown","b88bac4b":"markdown","16ca91ac":"markdown","3204b65f":"markdown","db3d2025":"markdown","8843cb1f":"markdown"},"source":{"c3d7c45f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport librosa\nfrom collections import Counter\nimport plotly.express as px\nfrom plotly import graph_objs as go\n\nimport random\n\nimport tensorflow as tf\nfrom tensorflow.keras import backend as K\nfrom tensorflow.keras.applications import ResNet50\n\nimport sklearn\nfrom pylab import *\nfrom scipy import *","dc69fcbf":"PATH = '..\/input\/birdsong-recognition\/'\n","10e09ee1":"train_df =  pd.read_csv(PATH + 'train.csv')\ntest_df = pd.read_csv(PATH + 'test.csv')\nexample_test_audio_metadata = pd.read_csv(PATH + 'example_test_audio_metadata.csv')\nexample_test_audio_summary = pd.read_csv(PATH + 'example_test_audio_summary.csv')","438f0ddb":"def info_df(df):\n    if 'ebird_code' in df.columns:\n        print('In train dataset: ')\n    else:\n        print('In test dataset: ')\n    print('Count of columns {}'.format(df.shape[1]))\n    print('String of columns {}'.format(df.shape[0]))\n","c707297a":"info_df(train_df)\n\ninfo_df(test_df)","b3d0d1f7":"train_df.head(3)","154804aa":"top = Counter([ i for i in train_df['ebird_code']])\ntemp = pd.DataFrame(top.most_common(25))\ntemp.columns = ['Most_bird','count']\ntemp.style.background_gradient(cmap='Reds')\n","28bc095f":"top = Counter([ i for i in train_df['ebird_code']])\ntemp = pd.DataFrame(top.most_common()[:-25:-1])\ntemp.columns = ['Least_bird','count']\ntemp.style.background_gradient(cmap='Blues')","b964424a":"top = Counter([ i for i in train_df['ebird_code']])\ntemp = pd.DataFrame(top.most_common(270))\n\ntemp.columns = ['Most_bird','count']\nfig = px.bar(temp, x=\"count\", y=\"Most_bird\", title='Distribution of birds in our dataset', orientation='h', \n             width=900, height=900, color='Most_bird')\nfig.show()","9c55a036":"plt.figure(figsize=(10, 6))\nax = sns.barplot(x = 'channels', y = 'ebird_code', data = pd.DataFrame(train_df['ebird_code'].groupby(train_df['channels']).count()).reset_index(), palette=\"muted\")\nplt.title('Count of stereo and mono recordings', fontsize=16)\nplt.xlabel(\"\");","ff0b5826":"top = Counter([ i for i in train_df['country']])\ntemp = pd.DataFrame(top.most_common(25))\ntemp.columns = ['Recordings per Country','count']\ntemp.style.background_gradient(cmap='Blues')","6c4da834":"temp = pd.DataFrame(top.most_common(100))\ntemp.columns = ['Most_common_countries','count']\nfig = px.bar(temp, x=\"count\", y=\"Most_common_countries\", title='Recordings per Country', orientation='h', \n             width=900, height=900, color='Most_common_countries')\nfig.show()","305ae5c1":"\ndf = px.data.gapminder().query(\"year==2007\")[[\"country\", \"iso_alpha\"]]\n\ndata = pd.merge(left=train_df, right=df, how=\"inner\", on=\"country\")\n\n# Group by country and count how many species can be found in each\ndata = data.groupby(by=[\"country\", \"iso_alpha\"]).count()[\"species\"].reset_index()\n\nfig = px.choropleth(data, locations=\"iso_alpha\", color=\"species\", hover_name=\"country\",\n                    color_continuous_scale=px.colors.sequential.Purpor,\n                    title = \"World Map: Recordings per Country\")\nfig.show()","d10e05b3":"def bird_countries(view, df_view):\n    '''\n    input - ebird code, dataframe\n    output - distribution of bird around the countries\n    '''\n    df_view = df_view.loc[df_view['ebird_code']==view] \n    df = px.data.gapminder().query(\"year == 2007\")[[\"country\", \"iso_alpha\"]]\n    data = pd.merge(left=df_view, right=df, how=\"inner\", on=\"country\")\n    data = data.groupby(by=[\"country\", \"iso_alpha\"]).count()[\"species\"].reset_index()\n    fig = px.scatter_geo(data, locations=\"iso_alpha\",\n                     color=\"species\", # which column to use to set the color of markers\n                     hover_name=\"country\", # column added to hover information\n                     projection=\"natural earth\",\n                     title =\"World Map: {} per Country\".format(view))\n    fig.show() \n\n    \n    \n    ","34a2673d":"bird_countries('houspa', train_df)\nbird_countries('carwre', train_df)\nbird_countries('amepip', train_df)","524c392c":"df_country = pd.DataFrame(train_df['ebird_code'].groupby(train_df['country']).unique()).reset_index()\ntop = Counter([item for sublist in df_country['ebird_code'] for item in sublist])\ntemp = pd.DataFrame(top.most_common(25))\ntemp.columns = ['bird_per_Countries','count']\ntemp.style.background_gradient(cmap='Greens')","a1a92eb3":"df_country = pd.DataFrame(train_df['ebird_code'].groupby(train_df['country']).unique()).reset_index()\ntop = Counter([item for sublist in df_country['ebird_code'] for item in sublist])\ntemp = pd.DataFrame(top.most_common()[:-25:-1])\ntemp.columns = ['bird_per_Countries','count']\ntemp.style.background_gradient(cmap='Reds')","c92113d1":"temp = temp.loc[temp['count'] == 1]\ntemp['ebird_code'] = temp['bird_per_Countries']\ndata = pd.merge(left=temp, right=train_df, how=\"inner\", on=\"ebird_code\")[['ebird_code','country']]\npd.DataFrame(data['country'].groupby(data['ebird_code']).unique())","0053df25":"def bird_location(view, df_view):\n    '''\n    input - ebird code, dataframe\n    output - bird location\n    '''\n    df_view = df_view.loc[df_view['ebird_code'] == view][['ebird_code','latitude','longitude']]\n    df_view = df_view.loc[df_view['longitude'] != 'Not specified']\n    df_view = df_view.loc[df_view['latitude'] != 'Not specified']\n    df_view['longitude'] = df_view.longitude.astype('float')\n    df_view['latitude'] = df_view.latitude.astype('float')\n    px.set_mapbox_access_token(\"pk.eyJ1IjoiYXJuaW1lbjUiLCJhIjoiY2tlM2U3a3EwMGliZzJ5bXNnYjE2YTJrciJ9.4GEtm-YYF0e0nIzyoSeABw\")\n    fig = px.scatter_mapbox(df_view, lat=\"latitude\", lon=\"longitude\",  color=\"latitude\", \n                  color_continuous_scale=px.colors.cyclical.IceFire, size_max=15, zoom=2,\n                            title ='latitude and longitude of the {} record'.format(view))\n    fig.show()\n","883a976f":"bird_location('houspa', train_df)\nbird_location('carwre', train_df)\nbird_location('amepip', train_df)\n","44ef2d6c":"audio_path = []\nfor i in train_df.index:\n    initial_letter = train_df.loc[i]['ebird_code'][0] \n    if initial_letter < 'c':\n        audio_path.append('..\/input\/birdsong-resampled-train-audio-00\/')\n    elif initial_letter < 'g':\n        audio_path.append('..\/input\/birdsong-resampled-train-audio-01\/')\n    elif initial_letter < 'n':\n        audio_path.append('..\/input\/birdsong-resampled-train-audio-02\/')\n    elif initial_letter < 's':\n        audio_path.append('..\/input\/birdsong-resampled-train-audio-03\/')\n    else:\n        audio_path.append('..\/input\/birdsong-resampled-train-audio-04\/')\n        \ntrain_df['audio_path'] = audio_path","4433749a":"def random_audio(df):\n    index = random.choice(list(df.index))\n    name = '{}{}\/{}.wav'.format(df.loc[index]['audio_path'] , df.loc[index]['ebird_code'],  df.loc[index]['filename'].split('.')[0])\n    y, sr = librosa.load(name)\n    print('y:', y, '\\n')\n    print('y shape:', np.shape(y), '\\n')\n    print('Sample Rate (KHz):', sr, '\\n')\n    print('Check Len of Audio:', np.shape(y)[0]\/sr)\n    return y, sr \n\n","ef63df69":"y, sr = random_audio(train_df)","2109b90f":"from scipy.io import wavfile as wav\nimport scipy\n\ndef anlysis_signal(df):\n    index = random.choice(list(df.index))\n    name = '{}{}\/{}.wav'.format(df.loc[index]['audio_path'] , df.loc[index]['ebird_code'],  df.loc[index]['filename'].split('.')[0])\n    M=501\n    fig = plt.figure(figsize=(25,12))\n    hM1=int(np.floor((1+M)\/2))\n    hM2=int(np.floor(M\/2))\n    (fs,x)=wav.read(name)\n    x1=x[5000:5000+M]*np.hamming(M)\n    N=511\n    fftbuffer=np.zeros([N])\n    fftbuffer[:hM1]=x1[hM2:]\n    fftbuffer[N-hM2:]=x1[:hM2]\n    X=scipy.fft.fft(fftbuffer)\n    mX=abs(X)\n    pX=np.angle(X)\n    suptitle(\"Signal analysis {}\".format(df.loc[index]['filename'].split('.')[0]))\n    subplot(3, 1, 1)\n    st='input signal {}'.format(df.loc[index]['ebird_code'])\n    plt.title(st, fontsize=16)\n    plot(x,linewidth=2, c = 'green')\n    legend(loc='center')\n    subplot(3, 1, 2)\n    st='Frequency spectrum of the input signal'\n    plt.title(st, fontsize=16)\n    plot(mX,linewidth=2, c = 'red')\n    legend(loc='best')\n    subplot(3, 1, 3)\n    st='Phase spectrum of the input signal'\n    pX=np.unwrap(np.angle(X))\n    plt.title(st, fontsize=16)\n    plot(pX,linewidth=2)\n    legend(loc='best') \n    show()","182877c0":"for i in range(3):\n    anlysis_signal(train_df)","051e258a":"def audios_ebird(label, df):\n    df = df.loc[df['ebird_code'] == label]\n    index = random.choice(df.index)\n    name = '{}{}\/{}.wav'.format(df.loc[index]['audio_path'] , df.loc[index]['ebird_code'],  df.loc[index]['filename'].split('.')[0])\n    y, sr = librosa.load(name)\n    return y, sr\n\n\ncolor = ['red', 'green', 'yellow', 'orange', 'blue']\ndef visualization_audio_bird(label, df):\n    col = random.choice(color)\n    fig = plt.figure(figsize=(25,12))\n    df = df.loc[df['ebird_code'] == label][['ebird_code','filename','audio_path']]\n    fig.suptitle(label, fontsize=30, c=col)\n    num = 0\n    for index in df.index:\n        num += 1\n        if num > 20:\n            break\n        plt.subplot(5,4,num)\n        filepath = '{}{}\/{}.wav'.format(df.loc[index]['audio_path'] , df.loc[index]['ebird_code'],  df.loc[index]['filename'].split('.')[0])\n        clip, sample_rate = librosa.load(filepath, sr=None)\n        plt.axis('off')\n        plt.plot(clip, c=col, lw=0.5)\n        \n    ","f9cbaff6":"visualization_audio_bird('aldfly', train_df)\nvisualization_audio_bird('osprey', train_df)\nvisualization_audio_bird('coohaw', train_df)","a941b04e":"def random_audio_sample_rate(df):\n    index = random.choice(list(df.index))\n    name = '{}{}\/{}.wav'.format(df.loc[index]['audio_path'] , df.loc[index]['ebird_code'],  df.loc[index]['filename'].split('.')[0])\n    librosa_audio, librosa_sample_rate = librosa.load(name)\n    scipy_sample_rate, scipy_audio = wav.read(name)\n    print(\"Original sample rate: {}\".format(scipy_sample_rate))\n    print(\"Librosa sample rate: {}\".format(librosa_sample_rate))","74289a69":"random_audio_sample_rate(train_df)","db22ed67":"def audio_file_min_max(df):\n    index = random.choice(list(df.index))\n    name = '{}{}\/{}.wav'.format(df.loc[index]['audio_path'] , df.loc[index]['ebird_code'],  df.loc[index]['filename'].split('.')[0])\n    librosa_audio, librosa_sample_rate = librosa.load(name)\n    scipy_sample_rate, scipy_audio = wav.read(name)\n    print('Original audio file min~max range: {} to {}'.format(np.min(scipy_audio), np.max(scipy_audio)))\n    print('Librosa audio file min~max range: {0:.2f} to {0:.2f}'.format(np.min(librosa_audio), np.max(librosa_audio)))","9c3b910d":"audio_file_min_max(train_df)","ff36f411":"import librosa\nimport librosa.display\n\ndef mfccs(df):\n    index = random.choice(list(df.index))\n    name = '{}{}\/{}.wav'.format(df.loc[index]['audio_path'] , df.loc[index]['ebird_code'],  df.loc[index]['filename'].split('.')[0])\n    librosa_audio, librosa_sample_rate = librosa.load(name)\n    mfccs = librosa.feature.mfcc(y=librosa_audio, sr=librosa_sample_rate, n_mels = 128, fmin=20, fmax=16000)\n    plt.figure (figsize = (8,8))\n    librosa.display.specshow(mfccs, sr = librosa_sample_rate, x_axis = 'time')\n    plt.title('MFCC')\n    return mfccs","f03ba95b":"mfcc = mfccs(train_df)\nprint(mfcc.shape)","47e023ce":"def linear_spectrogram(df):\n    index = random.choice(list(df.index))\n    name = '{}{}\/{}.wav'.format(df.loc[index]['audio_path'] , df.loc[index]['ebird_code'],  df.loc[index]['filename'].split('.')[0])\n    librosa_audio, librosa_sample_rate = librosa.load(name)\n    D = librosa.stft(librosa_audio)  # \n    S_db = librosa.amplitude_to_db(np.abs(D), ref=np.max)\n    plt.figure (figsize = (8,8))\n    ### You can display the spectrogram using librosa.display.specshow \n    librosa.display.specshow(S_db)\n    plt.title('linear_spectrogram')\n    plt.colorbar()\n    return linear_spectrogram\n","7a04e570":"linear_spectrogram(train_df)","dce136f8":"#### in some countries there are no records at all","b8599969":"#### Most bird species have 100 records\n#### The minimum count of audio recordings is \"redhea\" - 9\n","cc93efd2":"### Now we can get a spectogram","6ad49d9a":"# EDA\n### Part 1: analyz csv\n","826be73a":"#### You can view the location of any bird by country","dddf449a":"###  Librosa\u2019s load function will convert the sampling rate to 22.05 KHz automatically.\n### It will also normalize the bit depth between -1 and 1.","8d29f2b8":"### The audio data is composed by:\n\n##### Sound: sequence of vibrations in varying pressure strengths (y)\n#### Sample Rate: (sr) is the number of samples of audio carried per second, measured in Hz or kHz","6abb4740":"# Preprocessing\n##### Now we can extract features from our data. We\u2019re going to be using librosa, but we\u2019ll also show another utility, scipy.io,\n#### for comparison and to observe some implicit preprocessing that\u2019s happening.","b754f744":"##### A spectrogram is a visual way to represent the level or \u201cvolume\u201d of a signal over time at various frequencies present in a waveform. It is usually shown as a heat map.","28c45a4f":"### Some bird voices recorded only in a single country","d531b1ed":"###### *What is a spectrogram? A spectrogram is a visual representation of the spectrum of frequencies of a signal as it varies with time. When applied to an audio signal, spectrograms are sometimes called sonographs, voiceprints, or voicegrams (wiki).","02be1b56":"### analysis of a signal fragment","c9231c01":"# Welcome\n","d381dd17":"##### in testdataset we have only 3 columns","b88bac4b":"### All species with a single country are located in America","16ca91ac":"## Part 2 audio analysis","3204b65f":"#### The largest count of  recordings in America","db3d2025":"### The next version will learn the model\n# thanks for watching) ","8843cb1f":"### Extracting MFCCs from audio using Librosa\n\n##### MFCC - Mel Frequency Cepstral Coefficient\n##### What is a MFCC? MFCC is a kind of representation of the signal spectrum energy.\n"}}