{"cell_type":{"b0073deb":"code","a587cc84":"code","34ee42f8":"code","23f275a2":"code","699921ac":"code","502c2f88":"code","336c1f23":"code","fd854b6a":"code","1be6380e":"code","bce79d06":"code","c7735e27":"code","a0ff2935":"code","ecf352de":"code","f813787d":"code","e8aba353":"code","6ba6aab9":"code","240ca63a":"code","4b698117":"code","66cb401d":"code","5fe4d91d":"markdown","be359e8c":"markdown","3be477f8":"markdown","dabf8aa0":"markdown","adf52689":"markdown","51ba9df4":"markdown","f890d968":"markdown","c6d1fe7b":"markdown","7fb12034":"markdown","f5df0a8c":"markdown","157f3bb2":"markdown","c7e5fffb":"markdown","0f80afa1":"markdown","960ce2b2":"markdown","fa9d56ad":"markdown","4a9b0be9":"markdown"},"source":{"b0073deb":"import warnings\nimport collections\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nwarnings.filterwarnings(\"ignore\")","a587cc84":"df = pd.read_csv('..\/input\/iris\/Iris.csv')\ndf.head()","34ee42f8":"X = df.drop(columns=[\"Id\", \"Species\"])\nX.head()","23f275a2":"X.values[:] = StandardScaler().fit_transform(X)\nX.head()","699921ac":"y = df[['Species']].astype(\"category\")\ny","502c2f88":"y['Species'] = LabelEncoder().fit_transform(y['Species'])\ny","336c1f23":"X_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.20, random_state=1, stratify=y\n)","fd854b6a":"k: int = 11\np: int = 2","1be6380e":"class KNN:\n    def __init__(self, n_neighbors: int, minkowski_p: int = 2) -> None:\n        self.__p: int = minkowski_p\n        self.__n_neighbors: int = n_neighbors\n        self.__X: pd.core.frame.DataFrame\n        self.__y: pd.core.frame.DataFrame\n\n    def fit(self, X: pd.core.frame.DataFrame, y: pd.core.frame.DataFrame):\n        self.__X = X.copy()\n        self.__y = y.copy()\n\n    def __minkowski(self, X_test: pd.core.frame.DataFrame) -> dict:\n        distances_list: list = list()\n        y: list = X_test[1].copy().to_list()\n\n        for row in self.__X.iterrows():\n            x: list = row[1].copy().to_list()\n            summation: list = list()\n            for i in zip(x, y):\n                tmp: int = abs(i[0] - i[1])\n                tmp **= self.__p\n                summation.append(tmp)\n            summation: int = sum(summation)\n\n            distance: int = summation ** (1 \/ self.__p)\n            distances_list.append(distance)\n\n        distances_dict: dict = dict()\n        classifications_list: list = [\n            row[1].copy().to_list().pop() for row in self.__y.iterrows()\n        ]\n        for i in range(len(distances_list)):\n            distances_dict[distances_list[i]] = classifications_list[i]\n\n        return distances_dict\n\n    def predict(self, X: pd.core.frame.DataFrame):\n        predictions_list: list = []\n\n        for row in X.iterrows():\n            distances: dict = self.__minkowski(X_test=row)\n            sorted_distances: tuple = tuple(\n                distances[key] for key in sorted(distances.keys())\n            )\n            n_neighbors: tuple = sorted_distances[: self.__n_neighbors]\n            class_counts: dict = collections.Counter(n_neighbors)\n            max_class_key = max(class_counts, key=class_counts.get)\n            predictions_list.append(max_class_key)\n\n        return np.array(predictions_list)","bce79d06":"knn = KNN(n_neighbors=k, minkowski_p=p)","c7735e27":"knn.fit(X=X_train, y=y_train)","a0ff2935":"y_pred = knn.predict(X=X_test)","ecf352de":"knn_raw_confusion_matrix: int = confusion_matrix(y_test, y_pred)\nknn_raw_accuracy: int = accuracy_score(y_test, y_pred).mean() * 100","f813787d":"knn = KNeighborsClassifier(n_neighbors=k, p=p)","e8aba353":"knn.fit(X_train, y_train);","6ba6aab9":"y_pred = knn.predict(X_test)","240ca63a":"knn_confusion_matrix: int = confusion_matrix(y_test, y_pred)\nknn_accuracy: int = accuracy_score(y_test, y_pred).mean() * 100","4b698117":"print(knn_raw_confusion_matrix)\nprint(knn_raw_accuracy)","66cb401d":"print(knn_confusion_matrix)\nprint(knn_accuracy)","5fe4d91d":"### Applying Scikit's KNN","be359e8c":"### Fixing important values\n* k for K Nearest Neighbor\n* p for Minkowski Distance","3be477f8":"### Scaling X","dabf8aa0":"### Getting y Data","adf52689":"#### Raw KNN","51ba9df4":"#### Confusion Matrix and Accuracy","f890d968":"### Label Encoding y","c6d1fe7b":"### Reading Dataset","7fb12034":"### Printing Confusion Matrix and Accuracy ","f5df0a8c":"### Getting X Data","157f3bb2":"### Applying Raw KNN","c7e5fffb":"### Splitting Data to Train Test","0f80afa1":"#### Confusion Matrix and Accuracy","960ce2b2":"### The End","fa9d56ad":"### Raw K Nearest Neighbor Class\n[**\ud83c\udff9 https:\/\/github.com\/Rizwan-Hasan\/K-Nearest-Neighbors**](https:\/\/github.com\/Rizwan-Hasan\/K-Nearest-Neighbors)","4a9b0be9":"#### Scikit's KNN"}}