{"cell_type":{"f7adfd85":"code","d3396ae4":"code","9b121289":"code","12baf59d":"code","1be6f397":"code","1545be0f":"code","4030c1df":"code","4ef54901":"code","0604c954":"code","0461c542":"code","513c61c7":"code","6fb36639":"code","0d158b4a":"code","d7d3b4f7":"code","9ba0353d":"code","46b72caa":"code","1e0a1095":"code","15bc4deb":"code","1a9ee8c2":"code","44cd1afd":"code","91a5570b":"code","3a468319":"code","d14e2893":"code","5299ba54":"code","60d2d184":"code","f3645497":"code","4c3e4b1e":"code","3b606721":"code","3ef1fdde":"code","c128c5b6":"code","670d6cce":"code","c3f4f6d4":"code","33e0d642":"code","d517df25":"code","c347567d":"code","5cdf298c":"code","fe5aaf96":"code","3d855bb4":"code","c938c703":"code","c6530dcc":"code","52f126dc":"code","61424737":"code","3c039908":"code","cca74579":"code","e920e3eb":"code","cbb066ff":"code","d51a91a0":"code","eb2bd05d":"code","9608c52c":"code","a3e77aee":"code","436d3551":"code","f4bd3b52":"code","56397414":"code","49d963aa":"code","148d43e6":"code","a0e49815":"code","ba0983e6":"code","11b9ac78":"code","8b21e738":"code","e6667580":"code","45b3e82a":"code","82f7d188":"code","db6754c4":"markdown","5bf0dfb9":"markdown","64d6e3ab":"markdown","4ef724b1":"markdown","0a7d29ff":"markdown","2b5cfbfa":"markdown","c14349ed":"markdown","880cef89":"markdown","09273a84":"markdown","f47f3fb8":"markdown","59e3da2a":"markdown","faa4f489":"markdown","4ab0e2a7":"markdown","52152e9f":"markdown","c73fd207":"markdown","aeac2154":"markdown","63cfe7fd":"markdown","02b5ce26":"markdown","e8c0bc55":"markdown","db435c57":"markdown","182b0c9b":"markdown","bcf6acc6":"markdown"},"source":{"f7adfd85":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d3396ae4":"data = pd.read_csv(\"..\/input\/nba2k20-player-dataset\/nba2k20-full.csv\")","9b121289":"data.head(2) #data.head(n) will show first n rows","12baf59d":"data.tail(2) #data.tail(n) will show last n rows ","1be6f397":"len(data)","1545be0f":"type(data)","4030c1df":"list(data)","4ef54901":"dict(data)","0604c954":"max(data)","0461c542":"min(data)","513c61c7":"data.values","6fb36639":"data.index","0d158b4a":"data.shape","d7d3b4f7":"data.columns","9ba0353d":"data.axes","46b72caa":"1 in [1,2,3,4,5]","1e0a1095":"50 in data.index","15bc4deb":"\"Messi\" in data.index","1a9ee8c2":"data[\"team\"]\ndata[[\"full_name\", \"jersey\"]]","44cd1afd":"data[\"League\"] = \"NBA\"\ndata[\"Sport\"] = \"Basketball\"","91a5570b":"data = pd.read_csv(\"..\/input\/nba2k20-player-dataset\/nba2k20-full.csv\")\ndata.insert(3, column = \"Sport\", value = \"Basketball\")","3a468319":"data = pd.read_csv(\"..\/input\/nba2k20-player-dataset\/nba2k20-full.csv\")","d14e2893":"data[\"rating\"].add(10)\ndata[\"rating\"] + 5\n\ndata[\"draft_year\"].sub(2)\ndata[\"draft_year\"] - 2\n\ndata[\"draft_peak\"].mul(1)\ndata[\"draft_peak\"] * 1\n\ndata[\"rating\"].div(1)\ndata[\"rating\"] \/ 1","5299ba54":"data[\"position\"].value_counts()","60d2d184":"data.dropna(how = \"all\", inplace = True)","f3645497":"data.dropna(subset = [\"position\", \"country\"])","4c3e4b1e":"data = pd.read_csv(\"..\/input\/nba2k20-player-dataset\/nba2k20-full.csv\")","3b606721":"data.info()","3ef1fdde":"data[\"team\"] = data[\"team\"].astype(\"category\")\ndata[\"country\"] = data[\"country\"].astype(\"category\")\ndata.info() #memory usage decreased, it is usefull for large datasets","c128c5b6":"data.sort_values(\"rating\", ascending = False, inplace = True)\ndata.sort_values([\"team\", \"rating\"], ascending=[True, False], inplace = True)\ndata.head()","670d6cce":"data = pd.read_csv(\"..\/input\/nba2k20-player-dataset\/nba2k20-full.csv\")","c3f4f6d4":"data.set_index(\"full_name\", inplace = True)\ndata.head(2)","33e0d642":"data.reset_index(drop = False, inplace = True)\ndata.tail(2)","d517df25":"data = pd.read_csv(\"..\/input\/nba2k20-player-dataset\/nba2k20-full.csv\", index_col=\"full_name\")","c347567d":"data.sample(3)","5cdf298c":"data.loc[\"Kawhi Leonard\"]","fe5aaf96":"data.loc[\"Kawhi Leonard\":\"Malcolm Brogdon\"]","3d855bb4":"data.loc[:\"Malcolm Brogdon\"]","c938c703":"data.loc[[\"Kawhi Leonard\", \"Malcolm Brogdon\"]]","c6530dcc":"data = pd.read_csv(\"..\/input\/nba2k20-player-dataset\/nba2k20-full.csv\")","52f126dc":"data.iloc[3]","61424737":"data.iloc[[4,10]]","3c039908":"data.iloc[4:10]","cca74579":"data.iloc[:10]","e920e3eb":"# & --> and\n# | --> or\ndata[data[\"position\"] == \"F\"]","cbb066ff":"data[(data[\"team\"] == \"Los Angeles Lakers\")& (data[\"rating\"] > 85)] ","d51a91a0":"data[(data[\"country\"] != \"USA\") | (data[\"rating\"] > 85)] ","eb2bd05d":"data[data[\"rating\"].between(75, 80)]","9608c52c":"data[\"team\"].unique()","a3e77aee":"data[\"team\"].nunique()","436d3551":"# Adding +5 for rating column\n[x+5 for x in data[\"rating\"]] # not inplaced, to inplace data[\"rating\"] = ","f4bd3b52":"data = pd.read_csv(\"..\/input\/nba2k20-player-dataset\/nba2k20-full.csv\")\ndef add_plus_five(x):\n    return x+5\n\ndata[\"rating\"].apply(add_plus_five)","56397414":"data = pd.read_csv(\"..\/input\/nba2k20-player-dataset\/nba2k20-full.csv\")\ndata[\"rating\"].apply(lambda x: x+5)","49d963aa":"data = pd.read_csv(\"..\/input\/nba2k20-player-dataset\/nba2k20-full.csv\")","148d43e6":"data[\"team\"].str.upper() #LOS ANGELES LAKERS\ndata[\"team\"].str.lower() #los angeles lakers\ndata[\"team\"].str.title() #Los Angeles Lakers","a0e49815":"data[\"full_name\"].str.split(\" \").str[0]","ba0983e6":"data[\"first_name\"] = data[\"full_name\"].str.split(\" \").str[0]\ndata[\"last_name\"] = data[\"full_name\"].str.split(\" \").str[1]\ndata.head(3)\ndata.columns\ndata = data.reindex(columns = ['full_name', 'first_name', 'last_name', 'rating', 'jersey', 'team', 'position', 'b_day', 'height',\n       'weight', 'salary', 'country', 'draft_year', 'draft_round',\n       'draft_peak', 'college'])","11b9ac78":"data.head(3)","8b21e738":"data = pd.read_csv(\"..\/input\/nba2k20-player-dataset\/nba2k20-full.csv\")","e6667580":"data[\"salary\"].str.replace(\"$\", \"\").astype(\"int\")","45b3e82a":"data[\"height in metres\"] = data[\"height\"].str.split(\"\/\").str[1].astype(float)","82f7d188":"data.head(3)","db6754c4":"## `.upper()` `.lower()` `.title()`","5bf0dfb9":"# Introduction\n\npandas is a Python package that provides fast, flexible, and expressive data structures designed to make working with structured (tabular, multidimensional, potentially heterogeneous) and time series data both easy and intuitive. It aims to be the fundamental high-level building block for doing practical, real world data analysis in Python. Additionally, it has the broader goal of becoming the most powerful and flexible open source data analysis \/ manipulation tool available in any language. It is already well on its way toward this goal.\n\npandas is well suited for many different kinds of data:\n\n*         Tabular data with heterogeneously-typed columns, as in an SQL table or Excel spreadsheet\n*         Ordered and unordered (not necessarily fixed-frequency) time series data.\n*         Arbitrary matrix data (homogeneously typed or heterogeneous) with row and column labels\n*         Any other form of observational \/ statistical data sets. The data actually need not be labeled at all to be placed into a pandas data structure\n\nThe two primary data structures of pandas, Series (1-dimensional) and DataFrame (2-dimensional), handle the vast majority of typical use cases in finance, statistics, social science, and many areas of engineering. For R users, DataFrame provides everything that R\u2019s data.frame provides and much more. pandas is built on top of NumPy and is intended to integrate well within a scientific computing environment with many other 3rd party libraries.\n\nHere are just a few of the things that pandas does well:\n\n*         Easy handling of missing data (represented as NaN) in floating point as well as non-floating point data\n*         Size mutability: columns can be inserted and deleted from DataFrame and higher dimensional objects\n*         Automatic and explicit data alignment: objects can be explicitly aligned to a set of labels, or the user can simply ignore the labels and let Series, DataFrame, etc. automatically align the data for you in computations\n*         Powerful, flexible group by functionality to perform split-apply-combine operations on data sets, for both aggregating and transforming data\n*         Make it easy to convert ragged, differently-indexed data in other Python and NumPy data structures into DataFrame objects\n*         Intelligent label-based slicing, fancy indexing, and subsetting of large data sets\n*         Intuitive merging and joining data sets\n*         Flexible reshaping and pivoting of data sets\n*         Hierarchical labeling of axes (possible to have multiple labels per tick)\n*         Robust IO tools for loading data from flat files (CSV and delimited), Excel files, databases, and saving \/ loading data from the ultrafast HDF5 format\n*         Time series-specific functionality: date range generation and frequency conversion, moving window statistics, date shifting and lagging.\n\nThe aim of this notebook is to provide the most common methods and usage of pandas library. I hope this kernel will be useful for everyone.","64d6e3ab":"## Filter with One or More than One Condition","4ef724b1":"## `in` Keyword","0a7d29ff":"## Python Built-In Functions","2b5cfbfa":"## Strings","c14349ed":"## Add a New Column to the DataFrame","880cef89":"## `.iloc[]`","09273a84":"## `.str.split()` ","f47f3fb8":"## `.between()` Method","59e3da2a":"## Select Columns from the DataFram","faa4f489":"## `.unique()` and `.nunique()` Methods","4ab0e2a7":"## `.apply()` Method with Row Values","52152e9f":"##  `.head()` and `.tail()` Methods","c73fd207":"## Basic Math Operations","aeac2154":"## .astype() Method","63cfe7fd":"## `.set_index()` and `.reset_index()` Methods","02b5ce26":"## Dropping Null Values","e8c0bc55":"## .value_counts() Method","db435c57":"## `.sort_values()` Method","182b0c9b":"## `.loc[]`","bcf6acc6":"## To be continued..\n## Please leave a feedback to improve \n## Thank you!"}}