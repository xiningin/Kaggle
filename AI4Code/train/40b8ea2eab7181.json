{"cell_type":{"2112b5f4":"code","1dd42ebe":"code","535f4e96":"code","e260d10d":"code","697d6750":"code","32f69f2a":"code","ba25af0c":"code","0f3b5c45":"code","c42dd3ac":"code","fa12f2f1":"code","98f7a5e0":"code","501eddc8":"code","663221f9":"code","5e8336b8":"code","100b1dab":"code","fef1da59":"code","a626c477":"code","3d2b06a0":"code","ac3e5bf4":"code","e09a35e4":"code","2a48fb59":"code","ef9d0a82":"code","7579ed1a":"code","f9b30d56":"code","56d12da8":"code","e4920ed5":"code","20cf0276":"code","178fc5a9":"code","48900120":"code","5bc67587":"code","0f87d3d1":"code","21b9ec6c":"code","4b355c90":"code","6cfd3a2b":"code","f921e741":"code","46ef0439":"code","718ab21f":"code","79ebaec5":"code","43599a11":"code","3d161348":"code","40c50335":"code","eb9a48fd":"code","8ef46cc9":"code","6b53cf3b":"code","edf4f9ce":"code","82637da4":"code","be641b64":"code","28ad1bb7":"code","5a0039e9":"code","97f8c719":"code","3a91e236":"code","e94db2c3":"code","abbd5f7a":"code","acc74190":"code","d521d79b":"code","08360de2":"code","c7926fbe":"markdown","9eff9914":"markdown","ce6e0732":"markdown","7d83f22c":"markdown","e21e4fc0":"markdown","c34a9dd2":"markdown","45a9c91a":"markdown","1568351d":"markdown","ab19ac83":"markdown","4897366e":"markdown","1b008988":"markdown","99f1922e":"markdown","7f1e47c1":"markdown","eb50e0e1":"markdown"},"source":{"2112b5f4":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import mean_absolute_error,accuracy_score,mean_squared_error\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom xgboost import XGBRegressor","1dd42ebe":"train=pd.read_csv('..\/input\/home-data-for-ml-course\/train.csv')\ntest=pd.read_csv('..\/input\/home-data-for-ml-course\/test.csv')","535f4e96":"train.head()","e260d10d":"print(\"Missing values in train data\")\nmissing=train.isnull().sum()\nmissing[missing>0]","697d6750":"print(\"Missing values in test data\")\nmissing=test.isnull().sum()\nmissing[missing>0]","32f69f2a":"def return_missing_col(data):\n    columns=[col for col in data.columns if data[col].isnull().any()]\n    return columns","ba25af0c":"return_missing_col(train)","0f3b5c45":"return_missing_col(test)","c42dd3ac":"train['LotFrontage'].mean()","fa12f2f1":"train['LotFrontage']=train['LotFrontage'].fillna(train['LotFrontage'].mean())\ntest['LotFrontage']=test['LotFrontage'].fillna(train['LotFrontage']).mean()","98f7a5e0":"train.drop('Alley',axis=1,inplace=True)\ntest.drop('Alley',axis=1,inplace=True)","501eddc8":"train.drop(columns=['MasVnrType','MasVnrArea',],axis=1,inplace=True)\ntest.drop(columns=['MasVnrType','MasVnrArea',],axis=1,inplace=True)","663221f9":"# the function takes in a type of Series\ndef check_object(obj):\n    objct=[]\n    for x in obj:\n        if x=='Na':\n            objct.append(0)\n        else:\n            objct.append(1)\n    return objct","5e8336b8":"# we need to fill the misssing values before calling the funnction\ntrain['BsmtQual']=train['BsmtQual'].fillna('Na')\ntest['BsmtQual']=test['BsmtQual'].fillna('Na')\n\ntrain['Basement']=pd.DataFrame(check_object(train['BsmtQual']))\n\ntest['Basement']=pd.DataFrame(check_object(test['BsmtQual']))","100b1dab":"train.drop(columns=['BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2','BsmtFinSF1','BsmtFinSF2','BsmtFinSF1','BsmtUnfSF',\n                    'TotalBsmtSF'],axis=1,inplace=True)\n\ntest.drop(columns=['BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2','BsmtFinSF1','BsmtFinSF2','BsmtFinSF1','BsmtUnfSF',\n                   'TotalBsmtSF'],axis=1,inplace=True)","fef1da59":"train['Electrical'].value_counts()","a626c477":"# filling missing values with 'Mix'\ntrain['Electrical']=train['Electrical'].fillna('Mix')","3d2b06a0":"train.drop(columns=['FireplaceQu'],axis=1,inplace=True)\ntest.drop(columns=['FireplaceQu'],axis=1,inplace=True)","ac3e5bf4":"train['GarageQual']=train['GarageQual'].fillna('Na')\ntest['GarageQual']=test['GarageQual'].fillna('Na')\n\ntrain['garage']=pd.DataFrame(check_object(train['GarageQual']))\ntest['garage']=pd.DataFrame(check_object(test['GarageQual']))","e09a35e4":"train.drop(columns=['GarageType','GarageYrBlt','GarageFinish','GarageCars','GarageArea','GarageQual','GarageCond'],axis=1,inplace=True)\ntest.drop(columns=['GarageType','GarageYrBlt','GarageFinish','GarageCars','GarageArea','GarageQual','GarageCond'],axis=1,inplace=True)","2a48fb59":"train['PoolQC']=train['PoolQC'].fillna('Na')\ntest['PoolQC']=test['PoolQC'].fillna('Na')\n\ntrain['pool']=pd.DataFrame(check_object(train['PoolQC']))\ntest['pool']=pd.DataFrame(check_object(test['PoolQC']))","ef9d0a82":"train.drop(columns=['PoolQC','PoolArea'],axis=1,inplace=True)\ntest.drop(columns=['PoolQC','PoolArea'],axis=1,inplace=True)","7579ed1a":"train['Fence']=train['Fence'].fillna('Na')\ntest['Fence']=test['Fence'].fillna('Na')\n\ntrain['fence']=pd.DataFrame(check_object(train['Fence']))\ntest['fence']=pd.DataFrame(check_object(test['Fence']))","f9b30d56":"train.drop('Fence',axis=1,inplace=True)\ntest.drop('Fence',axis=1,inplace=True)","56d12da8":"train.drop(columns=['MiscFeature','MiscVal','MoSold','YrSold','SaleType','SaleCondition'],axis=1,inplace=True)\ntest.drop(columns=['MiscFeature','MiscVal','MoSold','YrSold','SaleType','SaleCondition'],axis=1,inplace=True)","e4920ed5":"print(\"Columns in the train data with missing values are:\",len(return_missing_col(train)))","20cf0276":"print(\"Columns with missing values are:\",return_missing_col(test))","178fc5a9":"train.drop(columns=['MSSubClass'],inplace=True,axis=1)\ntest.drop(columns=['MSSubClass'],inplace=True,axis=1)","48900120":"test['MSZoning'].isnull().sum()","5bc67587":"test['MSZoning']=test['MSZoning'].fillna('RL')","0f87d3d1":"print(\" Number of missing values in Utilities are :\",test['Utilities'].isnull().sum())\ntest['Utilities'].value_counts()","21b9ec6c":"test['Utilities']=test['Utilities'].fillna('AllPub')","4b355c90":"test.drop(columns=['Neighborhood','LotConfig','LandSlope','Condition1','Condition2','BldgType','HouseStyle','YearRemodAdd','RoofStyle',\n                   'RoofMatl','Exterior1st','Exterior2nd','BsmtFullBath','BsmtHalfBath','KitchenQual','Functional'],axis=1,inplace=True)\ntrain.drop(columns=['Neighborhood','LotConfig','LandSlope','Condition1','Condition2','BldgType','HouseStyle','YearRemodAdd','RoofStyle',\n                   'RoofMatl','Exterior1st','Exterior2nd','BsmtFullBath','BsmtHalfBath','KitchenQual','Functional'],axis=1,inplace=True)","6cfd3a2b":"print(\"Columns with missing values are:\",len(return_missing_col(test)))","f921e741":"train.columns","46ef0439":"test.columns","718ab21f":"features=['MSZoning','LotFrontage','LotArea','YearBuilt', 'Street','Utilities', 'OverallQual', 'OverallCond','ExterQual', 'ExterCond',\n          'Foundation', 'Heating','FullBath', 'HeatingQC','CentralAir', 'Electrical', '1stFlrSF', '2ndFlrSF','GrLivArea','BedroomAbvGr', 'KitchenAbvGr',\n       'TotRmsAbvGrd', 'Fireplaces','PavedDrive', 'Basement', 'garage','pool', 'fence']","79ebaec5":"X=train[features]\ny=train.SalePrice","43599a11":"X.head()","3d161348":"y.head()","40c50335":"# creates a list of columns with categorical data\ns = (X.dtypes == 'object')\ncategorical_cols = list(s[s].index)","eb9a48fd":"categorical_cols","8ef46cc9":"Encoder_x=LabelEncoder()\nfor col in categorical_cols:\n    X[col]=Encoder_x.fit_transform(X[col])","6b53cf3b":"X.head()","edf4f9ce":"train_x,val_x,train_y,val_y=train_test_split(X,y,train_size=0.8,test_size=0.2)","82637da4":"test2=test[features]","be641b64":"Encoder=LabelEncoder()\nfor col in categorical_cols:\n    test2[col]=Encoder.fit_transform(test2[col])","28ad1bb7":"model=RandomForestRegressor()\nmodel.fit(train_x,train_y)\npred=model.predict(val_x)","5a0039e9":"print(\"Mean absolute error:\",mean_absolute_error(pred,val_y))\nprint(\"Model score\",model.score(val_x,val_y))","97f8c719":"model=RandomForestRegressor()\nmodel.fit(X,y)\npred=model.predict(test2)","3a91e236":"output=pd.DataFrame({'Id':test.Id,'SalePrice':pred})\noutput.to_csv('submission_rf.csv',index=False)","e94db2c3":"output.head()","abbd5f7a":"model=XGBRegressor(n_estimators=500,learning_rate=0.05)\nmodel.fit(train_x,train_y,early_stopping_rounds=5,eval_set=[(val_x,val_y)],verbose=False)\npred=model.predict(val_x)\nprint(\"Mean absolute error\",mean_absolute_error(pred,val_y))\nprint(\"Root mean square error\",mean_squared_error(pred,val_y,squared=False))","acc74190":"model.fit(X,y,early_stopping_rounds=5,eval_set=[(val_x,val_y)],verbose=False)\npred=model.predict(test2)","d521d79b":"output=pd.DataFrame({'Id':test.Id,'SalePrice':pred})\noutput.to_csv('submission_xgb.csv',index=False)","08360de2":"output.head()","c7926fbe":"# Creating features","9eff9914":"# Importing the libraries","ce6e0732":"**We will be using train data for training and validation and final testing on test data**","7d83f22c":"# Converting Categorical values to Numerical Values","e21e4fc0":"# Building the model for training and evaluation","c34a9dd2":"# Reading the data","45a9c91a":"**Test data is similar to train data. The only difference is in that train contains the column SalePrice**","1568351d":"**Inorder to fill the missing values effectively, you have to understand the data in the dataset. Go through the data description \n    and find which columns should be dropped and which columns to be fillled**","ab19ac83":"# Random Forest Regreesor","4897366e":"**return_missing_col is a helper function to find the missing columns of a dataset easily**","1b008988":"# Filling Missing Values","99f1922e":"# Understanding the data","7f1e47c1":"**check_object is another helper function to help us in creating data for our model**","eb50e0e1":"# XGB Regressor"}}