{"cell_type":{"bcf94d2c":"code","60ad9aed":"code","cc1ad680":"code","969b3c8f":"code","338c8236":"code","932153b9":"code","a7aff616":"code","8249685a":"code","ee5caf71":"code","3a5ae319":"code","6cc7eff3":"code","8205ce46":"code","46226b19":"code","abd8065e":"code","b50bdccf":"code","3c7a9310":"code","7d04a2b8":"code","0d09d3cd":"code","078763eb":"code","a8ff7de9":"code","ec47971e":"code","b3aa78c3":"code","00676277":"code","35c5ea51":"code","76642076":"code","283dcd6d":"code","7fd19d72":"code","a74c80f4":"code","adbfc0c8":"code","dd27c63d":"code","3ccaa896":"code","583541c4":"code","129da25c":"code","a487cddd":"code","69ea9cbf":"code","0fb2f9fe":"code","52556255":"code","b7bebf9e":"code","6480eead":"code","39ed5b5a":"code","c0881101":"markdown","c2b8d1ac":"markdown","55170c82":"markdown","eb4ec9c1":"markdown","53af5529":"markdown","a6dcf967":"markdown","f0ec42fc":"markdown","85a6cef3":"markdown","facbbbe9":"markdown","9acaadcb":"markdown","05a7932d":"markdown"},"source":{"bcf94d2c":"import numpy as np\nimport pandas as pd\nfrom plotnine import *\nfrom datetime import datetime as dt","60ad9aed":"# Loading datasets\njun_2020 = pd.read_csv(\"..\/input\/bike-share\/202006-divvy-tripdata.csv\")\njul_2020 = pd.read_csv(\"..\/input\/bike-share\/202007-divvy-tripdata.csv\")\naug_2020 = pd.read_csv(\"..\/input\/bike-share\/202008-divvy-tripdata.csv\")\nsep_2020 = pd.read_csv(\"..\/input\/bike-share\/202009-divvy-tripdata.csv\")\noct_2020 = pd.read_csv(\"..\/input\/bike-share\/202010-divvy-tripdata.csv\")\nnov_2020 = pd.read_csv(\"..\/input\/bike-share\/202011-divvy-tripdata.csv\")\ndec_2020 = pd.read_csv(\"..\/input\/bike-share\/202012-divvy-tripdata.csv\")\njan_2021 = pd.read_csv(\"..\/input\/bike-share\/202101-divvy-tripdata.csv\")\nfeb_2021 = pd.read_csv(\"..\/input\/bike-share\/202102-divvy-tripdata.csv\")\nmar_2021 = pd.read_csv(\"..\/input\/bike-share\/202103-divvy-tripdata.csv\")\napr_2021 = pd.read_csv(\"..\/input\/bike-share\/202104-divvy-tripdata.csv\")\nmay_2021 = pd.read_csv(\"..\/input\/bike-share\/202105-divvy-tripdata.csv\")","cc1ad680":"# Comparing data frames columns\nif (jun_2020.columns.equals(jul_2020.columns) \n    and jul_2020.columns.equals(aug_2020.columns)\n    and sep_2020.columns.equals(oct_2020.columns)\n    and oct_2020.columns.equals(nov_2020.columns)\n    and nov_2020.columns.equals(dec_2020.columns)\n    and dec_2020.columns.equals(jan_2021.columns)\n    and jan_2021.columns.equals(feb_2021.columns)\n    and feb_2021.columns.equals(mar_2021.columns)\n    and mar_2021.columns.equals(apr_2021.columns)\n    and apr_2021.columns.equals(may_2021.columns)):\n    print(\"Column names are consistent, and there is no need to rename them.\")\nelse:\n    print(\"Column names are not consistent. Rename them.\")","969b3c8f":"# Combining all data frames into a single one\nall_trips = pd.concat([jun_2020, jul_2020, aug_2020, sep_2020, oct_2020, nov_2020, dec_2020,\n                      jan_2021, feb_2021, mar_2021, apr_2021, may_2021], ignore_index=True)\n\nall_trips","338c8236":"all_trips.columns","932153b9":"all_trips.shape","a7aff616":"all_trips.head()","8249685a":"all_trips.describe()","ee5caf71":"# How many observations under each type\nall_trips.rideable_type.value_counts()","3a5ae319":"# How many observations under each type\nall_trips.member_casual.value_counts()","6cc7eff3":"print(all_trips.started_at.isnull().sum())\nprint(all_trips.ended_at.isnull().sum())","8205ce46":"# Converting string to datetime (better way?)\nall_trips['started_at'] = pd.to_datetime(all_trips['started_at'])\nall_trips['ended_at'] = pd.to_datetime(all_trips['ended_at'])","46226b19":"all_trips['date'] = all_trips['started_at'].dt.date","abd8065e":"all_trips['year'] = all_trips['started_at'].dt.year","b50bdccf":"all_trips['weekday'] = all_trips['started_at'].dt.weekday","3c7a9310":"all_trips['weekday_name'] = all_trips['started_at'].dt.strftime(\"%A\")","7d04a2b8":"all_trips","0d09d3cd":"all_trips.year.value_counts()","078763eb":"all_trips.weekday.value_counts()","a8ff7de9":"all_trips['ride_length'] = all_trips['ended_at'] - all_trips['started_at']\nall_trips['ride_length'] = all_trips['ride_length'].dt.total_seconds() # in seconds\nall_trips","ec47971e":"print((all_trips['ride_length'].isnull()).sum())\nprint((all_trips['ride_length'] <= 0).sum())\nprint((all_trips['start_station_name'] == \"HQ QR\").sum())\nprint((all_trips['start_station_name'].str.contains(\"TEST\")).sum())\nprint((all_trips['end_station_name'].str.contains(\"TEST\")).sum())\nprint((all_trips['start_station_name'].str.contains(\"test\")).sum())\nprint((all_trips['end_station_name'].str.contains(\"test\")).sum())","b3aa78c3":"all_trips.drop(all_trips[all_trips['ride_length'] <= 0].index, inplace = True)\nall_trips.drop(all_trips[all_trips['start_station_name'] == \"HQ QR\"].index, inplace = True)\nall_trips.drop(all_trips[all_trips['start_station_name'].str.contains(\"TEST\", na=False)].index, inplace = True)\nall_trips.drop(all_trips[all_trips['end_station_name'].str.contains(\"TEST\", na=False)].index, inplace = True)\nall_trips.drop(all_trips[all_trips['start_station_name'].str.contains(\"test\", na=False)].index, inplace = True)\nall_trips.drop(all_trips[all_trips['end_station_name'].str.contains(\"test\", na=False)].index, inplace = True)","00676277":"print((all_trips['ride_length'] <= 0).sum())\nprint((all_trips['start_station_name'] == \"HQ QR\").sum())\nprint((all_trips['start_station_name'].str.contains(\"TEST\")).sum())\nprint((all_trips['end_station_name'].str.contains(\"TEST\")).sum())\nprint((all_trips['start_station_name'].str.contains(\"test\")).sum())\nprint((all_trips['end_station_name'].str.contains(\"test\")).sum())\nlen(all_trips.index)","35c5ea51":"all_trips['ride_length'].mean()","76642076":"all_trips['ride_length'].median()","283dcd6d":"all_trips['ride_length'].max()","7fd19d72":"all_trips['ride_length'].min()","a74c80f4":"all_trips['ride_length'].describe()","adbfc0c8":"all_trips.groupby('member_casual')['ride_length'].mean()","dd27c63d":"gb_membercasual = all_trips.groupby('member_casual', as_index=False).agg({'ride_length':['count','mean','median','max','min']})\nprint(type(gb_membercasual))\nprint(gb_membercasual.dtypes)\nprint(gb_membercasual)","3ccaa896":"gb_membercasual.columns = gb_membercasual.columns.get_level_values(1)\ngb_membercasual","583541c4":"gb_membercasual = gb_membercasual.rename(columns={\"\":\"member_casual\",\n                                                 \"count\":\"number_of_rides\",\n                                                  \"mean\":\"average_duration\",\n                                                  \"median\":\"median_duration\",\n                                                  \"max\":\"max_duration\",\n                                                  \"min\":\"min_duration\"})\n\ngb_membercasual","129da25c":"ggplot(data=gb_membercasual) +\\\ngeom_bar(mapping=aes(x=\"member_casual\", y=\"number_of_rides\", fill=\"member_casual\"),stat=\"identity\") +\\\nlabs(title = \"Number of Rides per Rider Type \\nJune\/2020 - May\/2021\") +\\\nlabs(y = \"Number of Rides\", x = \"\") +\\\ntheme(legend_title=element_blank()) ","a487cddd":"ggplot(data=gb_membercasual) +\\\ngeom_bar(mapping=aes(x=\"member_casual\", y=\"average_duration\/60\", fill=\"member_casual\"),stat=\"identity\") +\\\nlabs(title = \"Average Ride Duration per Rider Type \\nJune\/2020 - May\/2021\") +\\\nlabs(y = \"Average Ride Duration (in minutes)\", x = \"\") +\\\ntheme(legend_title=element_blank()) ","69ea9cbf":"gb_membercasual_rideabletype_count = all_trips.groupby(['member_casual','rideable_type'], as_index=False).agg({'ride_length':'count'})\ngb_membercasual_rideabletype_count  ","0fb2f9fe":"ggplot(data=gb_membercasual_rideabletype_count) +\\\ngeom_bar(mapping=aes(x=\"rideable_type\", y=\"ride_length\", fill=\"member_casual\"),stat='identity', position='dodge') +\\\nlabs(title = \"Number of Rides per Bike TypeNumber of Rides per Bike Type \\nJune\/2020 - May\/2021\") +\\\nlabs(y = \"Number of Rides\", x = \"\") +\\\ntheme(legend_title=element_blank()) ","52556255":"gb_membercasual_rideabletype_mean = all_trips.groupby(['member_casual','rideable_type'], as_index=False).agg({'ride_length':'mean'})\ngb_membercasual_rideabletype_mean  ","b7bebf9e":"ggplot(data=gb_membercasual_rideabletype_mean) +\\\ngeom_bar(mapping=aes(x=\"rideable_type\", y=\"ride_length\/60\", fill=\"member_casual\"),stat='identity', position='dodge') +\\\nlabs(title = \"Average Ride Duration per Bike Type \\nJune\/2020 - May\/2021\") +\\\nlabs(y = \"Average Ride Duration (in minutes)\", x = \"\") +\\\ntheme(legend_title=element_blank()) ","6480eead":"gb_membercasual_weekday_mean = all_trips.groupby(['member_casual','weekday', 'weekday_name'], as_index=False).agg({'ride_length':'mean'})\ngb_membercasual_weekday_mean.sort_values(['weekday','member_casual'], inplace=True, ignore_index=True)\ngb_membercasual_weekday_mean                                                                                           ","39ed5b5a":"ggplot(data=gb_membercasual_weekday_mean) +\\\ngeom_bar(mapping=aes(x=\"weekday_name\", y=\"ride_length\/60\", fill=\"member_casual\"),stat='identity', position='dodge') +\\\nlabs(title = \"Average Ride Duration per Weekday \\nJune\/2020 - May\/2021\") +\\\nlabs(y = \"Average Ride Duration (in minutes)\", x = \"\") +\\\ntheme(legend_title=element_blank()) ","c0881101":"Creating new columns","c2b8d1ac":"### Analysis","55170c82":"### Loading data","eb4ec9c1":"Still working here: x axis is in alphabetical order","53af5529":"Bad data","a6dcf967":"Grouping by member_casual and weekday","f0ec42fc":"Grouping by member_casual","85a6cef3":"### This is a Python version of the codification in R for the case study \"How Does a Bike-Share Navigate Speedy Success\".\n\nHere you are going to find just the Python codification, and for more detail about this case study, please see the R version notebook.","facbbbe9":"Inpecting all_trips data frame","9acaadcb":"Grouping member_casual and rideable_type","05a7932d":"### Cleaning Data"}}