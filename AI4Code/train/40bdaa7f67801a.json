{"cell_type":{"d1f4e58c":"code","5d8a609c":"code","71ceab0e":"code","fed508d6":"code","ab1c141c":"code","bc79dcd4":"code","24d35b03":"code","7b7f8f21":"code","d588c735":"code","64401400":"code","b5200d38":"code","7c289c4f":"code","e0e60968":"code","ebd2d3a2":"code","f208b44c":"code","4c78455e":"code","9f01dc8f":"code","23f87f9f":"code","43bf6e78":"code","a9c0dccc":"code","a937d23b":"code","d7885c42":"code","e77477a0":"code","e679c81d":"code","02115d75":"code","3b6e408b":"code","baabf18c":"code","f3caa0b7":"code","c88318e6":"code","0ce56122":"code","fa9021cd":"code","29703244":"code","0a682e60":"code","d43a9b48":"code","e258636f":"code","5e662ae1":"code","0773f750":"code","61c3ea78":"code","0d6231a5":"code","be0e8bdd":"code","f5cbd5b1":"code","6ed878b1":"code","5e69d935":"code","a97d8cd1":"code","755e73fe":"code","5e0c00a7":"code","c665f737":"code","e9653de8":"code","53cd7612":"code","fdd6f361":"code","25c8c51d":"code","419faa4b":"code","f43f79db":"code","7ba42d06":"code","b9a8e2ee":"code","7d780693":"code","aafcb575":"code","517f686e":"code","bedd5b90":"code","0c66b36e":"code","8cd7e946":"code","6977c1ae":"code","20f0969a":"code","c4171c7d":"code","5ff22cc1":"code","6010f30e":"code","f556ebb7":"code","b5a92652":"code","c7f81473":"code","eb2dd4f8":"code","295aba66":"code","ceb944dd":"code","1c0de431":"code","a61870c1":"code","d5c82035":"code","1ba04f48":"code","f2599633":"code","b5bc29c3":"code","9aee4007":"code","5cc8163f":"code","6d87f040":"code","6b28b8f7":"code","db4b6c82":"code","799410c2":"code","a4cb5d7a":"code","d52af91c":"code","63818a32":"code","e594ee6d":"code","4dac5eda":"code","65c76642":"code","b7d188ee":"code","90dca755":"code","fd5ecf32":"code","6ae5f0c1":"code","eb0142e3":"code","d830d190":"code","ec4ec516":"code","329a7f91":"code","c17e9e8f":"code","a3b3fa80":"code","4bb47ee1":"code","84d5269e":"code","ee8ceb62":"code","c167efbb":"code","ffeff9d8":"code","993da97b":"code","0b2abee7":"code","bacc324c":"code","4029ba49":"code","64abae8a":"code","51f24efc":"code","f65ca975":"code","7dd6dba5":"code","f1f6f9ee":"code","43d6afa8":"code","cadd5084":"code","e22896c5":"code","5c75390c":"code","86d51ca9":"code","cf742231":"code","6d3c8160":"code","80abd1de":"code","6e745d4f":"code","d6081633":"code","9e9ddf15":"code","9ceb5e88":"code","1366695b":"code","c808cbff":"markdown","f455d903":"markdown","81aaacba":"markdown","5eb81249":"markdown","b491d9d8":"markdown","6b8a8096":"markdown","9d3e7b9a":"markdown","f7d1d081":"markdown","537c4f9a":"markdown","34304a9f":"markdown","d3cd39c5":"markdown","cc8c569b":"markdown","08e0286c":"markdown","6f1df255":"markdown","05b85832":"markdown","d804d629":"markdown","3ecc1d80":"markdown","d30a17ee":"markdown","feb5be33":"markdown","5b5f06a2":"markdown","d20e3b23":"markdown","d57831f0":"markdown","6907a6ce":"markdown","1bca3722":"markdown","269ca2c3":"markdown","c6ebc9ea":"markdown","f9db8c2d":"markdown","6a0fa5f8":"markdown","d554542a":"markdown","97a2fc84":"markdown","12815fa8":"markdown","0a5f129f":"markdown","b3062f66":"markdown","aea3130e":"markdown","b34deb81":"markdown","de184418":"markdown","fc90047a":"markdown","cb5c53a6":"markdown","b85e70e2":"markdown","faebb594":"markdown","08767670":"markdown","acb70aae":"markdown","b53c5609":"markdown","06bb4f46":"markdown","dae464bf":"markdown","b8e4bfbe":"markdown","0d3ff4c6":"markdown","974db417":"markdown","9506ee5f":"markdown","cdeda580":"markdown","733935fd":"markdown","03e9a635":"markdown","223bedc7":"markdown","00819b56":"markdown","a5f39dcc":"markdown","edbdfe16":"markdown","7b3e0320":"markdown","7af873ed":"markdown","7615764c":"markdown","3347ff0d":"markdown","80339937":"markdown","ffc6c081":"markdown","c9b39388":"markdown","8f956cc0":"markdown","d473d98b":"markdown","1c3df875":"markdown","50dab62b":"markdown","155a2bac":"markdown","30880743":"markdown","ee2a4478":"markdown","7ecf43f6":"markdown","4567ffef":"markdown","98091062":"markdown","59f87cdd":"markdown","5a382906":"markdown","4ac2ea9d":"markdown","83cb5398":"markdown","2a97369a":"markdown","ffb55ecd":"markdown","8a538fff":"markdown","686a63f4":"markdown","da1775a2":"markdown","bf662df5":"markdown"},"source":{"d1f4e58c":"# x and y given as array_like objects\nimport plotly.express as px\nfig = px.scatter(x=[0, 1, 2, 3, 4], y=[0, 1, 4, 9, 16])\nfig.show()","5d8a609c":"# x and y given as DataFrame columns\nimport plotly.express as px\ndf = px.data.iris() # iris is a pandas DataFrame\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\")\nfig.show()","71ceab0e":"import plotly.express as px\ndf = px.data.iris()\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", color=\"species\",\n                 size='petal_length', hover_data=['petal_width'])\nfig.show()","fed508d6":"import plotly.graph_objects as go\nimport numpy as np\n\nN = 1000\nt = np.linspace(0, 10, 100)\ny = np.sin(t)\n\nfig = go.Figure(data=go.Scatter(x=t, y=y, mode='markers'))\n\nfig.show()","ab1c141c":"import plotly.graph_objects as go\n\n# Create random data with numpy\nimport numpy as np\nnp.random.seed(1)\n\nN = 100\nrandom_x = np.linspace(0, 1, N)\nrandom_y0 = np.random.randn(N) + 5\nrandom_y1 = np.random.randn(N)\nrandom_y2 = np.random.randn(N) - 5\n\nfig = go.Figure()\n\n# Add traces\nfig.add_trace(go.Scatter(x=random_x, y=random_y0,\n                    mode='markers',\n                    name='markers'))\nfig.add_trace(go.Scatter(x=random_x, y=random_y1,\n                    mode='lines+markers',\n                    name='lines+markers'))\nfig.add_trace(go.Scatter(x=random_x, y=random_y2,\n                    mode='lines',\n                    name='lines'))\n\nfig.show()","bc79dcd4":"import plotly.graph_objects as go\n\nfig = go.Figure(data=go.Scatter(\n    x=[1, 2, 3, 4],\n    y=[10, 11, 12, 13],\n    mode='markers',\n    marker=dict(size=[40, 60, 80, 100],\n                color=[0, 1, 2, 3])\n))\n\nfig.show()","24d35b03":"import plotly.graph_objects as go\nimport numpy as np\n\n\nt = np.linspace(0, 10, 100)\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x=t, y=np.sin(t),\n    name='sin',\n    mode='markers',\n    marker_color='rgba(152, 0, 0, .8)'\n))\n\nfig.add_trace(go.Scatter(\n    x=t, y=np.cos(t),\n    name='cos',\n    marker_color='rgba(255, 182, 193, .9)'\n))\n\n# Set options common to all traces with fig.update_traces\nfig.update_traces(mode='markers', marker_line_width=2, marker_size=10)\nfig.update_layout(title='Styled Scatter',\n                  yaxis_zeroline=False, xaxis_zeroline=False)\n\n\nfig.show()","7b7f8f21":"import plotly.graph_objects as go\nimport pandas as pd\n\ndata= pd.read_csv(\"https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/2014_usa_states.csv\")\n\nfig = go.Figure(data=go.Scatter(x=data['Postal'],\n                                y=data['Population'],\n                                mode='markers',\n                                marker_color=data['Population'],\n                                text=data['State'])) # hover text goes here\n\nfig.update_layout(title='Population of USA States')\nfig.show()","d588c735":"import plotly.graph_objects as go\nimport numpy as np\n\nfig = go.Figure(data=go.Scatter(\n    y = np.random.randn(500),\n    mode='markers',\n    marker=dict(\n        size=16,\n        color=np.random.randn(500), #set color equal to a variable\n        colorscale='Viridis', # one of plotly colorscales\n        showscale=True\n    )\n))\n\nfig.show()","64401400":"import plotly.graph_objects as go\nimport numpy as np\n\nN = 100000\nfig = go.Figure(data=go.Scattergl(\n    x = np.random.randn(N),\n    y = np.random.randn(N),\n    mode='markers',\n    marker=dict(\n        color=np.random.randn(N),\n        colorscale='Viridis',\n        line_width=1\n    )\n))\n\nfig.show()","b5200d38":"import plotly.graph_objects as go\nimport numpy as np\n\nN = 100000\nr = np.random.uniform(0, 1, N)\ntheta = np.random.uniform(0, 2*np.pi, N)\n\nfig = go.Figure(data=go.Scattergl(\n    x = r * np.cos(theta), # non-uniform distribution\n    y = r * np.sin(theta), # zoom to see more points at the center\n    mode='markers',\n    marker=dict(\n        color=np.random.randn(N),\n        colorscale='Viridis',\n        line_width=1\n    )\n))\n\nfig.show()","7c289c4f":"import plotly.express as px\nimport numpy as np\n\nt = np.linspace(0, 2*np.pi, 100)\n\nfig = px.line(x=t, y=np.cos(t), labels={'x':'t', 'y':'cos(t)'})\nfig.show()","e0e60968":"import plotly.express as px\ndf = px.data.gapminder().query(\"continent == 'Oceania'\")\nfig = px.line(df, x='year', y='lifeExp', color='country')\nfig.show()","ebd2d3a2":"import plotly.express as px\n\ndf = px.data.gapminder().query(\"continent != 'Asia'\") # remove Asia for visibility\nfig = px.line(df, x=\"year\", y=\"lifeExp\", color=\"continent\",\n              line_group=\"country\", hover_name=\"country\")\nfig.show()","f208b44c":"import plotly.express as px\ndf = px.data.stocks(indexed=True)\nfig = px.line(df, facet_row=\"company\", facet_row_spacing=0.01, height=200, width=200)\n\n# hide and lock down axes\nfig.update_xaxes(visible=False, fixedrange=True)\nfig.update_yaxes(visible=False, fixedrange=True)\n\n# remove facet\/subplot labels\nfig.update_layout(annotations=[], overwrite=True)\n\n# strip down the rest of the plot\nfig.update_layout(\n    showlegend=False,\n    plot_bgcolor=\"white\",\n    margin=dict(t=10,l=10,b=10,r=10)\n)\n\n# disable the modebar for such a small plot\nfig.show(config=dict(displayModeBar=False))","4c78455e":"import plotly.graph_objects as go\nimport numpy as np\n\nx = np.arange(10)\n\nfig = go.Figure(data=go.Scatter(x=x, y=x**2))\nfig.show()","9f01dc8f":"import plotly.graph_objects as go\n\n# Add data\nmonth = ['January', 'February', 'March', 'April', 'May', 'June', 'July',\n         'August', 'September', 'October', 'November', 'December']\nhigh_2000 = [32.5, 37.6, 49.9, 53.0, 69.1, 75.4, 76.5, 76.6, 70.7, 60.6, 45.1, 29.3]\nlow_2000 = [13.8, 22.3, 32.5, 37.2, 49.9, 56.1, 57.7, 58.3, 51.2, 42.8, 31.6, 15.9]\nhigh_2007 = [36.5, 26.6, 43.6, 52.3, 71.5, 81.4, 80.5, 82.2, 76.0, 67.3, 46.1, 35.0]\nlow_2007 = [23.6, 14.0, 27.0, 36.8, 47.6, 57.7, 58.9, 61.2, 53.3, 48.5, 31.0, 23.6]\nhigh_2014 = [28.8, 28.5, 37.0, 56.8, 69.7, 79.7, 78.5, 77.8, 74.1, 62.6, 45.3, 39.9]\nlow_2014 = [12.7, 14.3, 18.6, 35.5, 49.9, 58.0, 60.0, 58.6, 51.7, 45.2, 32.2, 29.1]\n\nfig = go.Figure()\n# Create and style traces\nfig.add_trace(go.Scatter(x=month, y=high_2014, name='High 2014',\n                         line=dict(color='firebrick', width=4)))\nfig.add_trace(go.Scatter(x=month, y=low_2014, name = 'Low 2014',\n                         line=dict(color='royalblue', width=4)))\nfig.add_trace(go.Scatter(x=month, y=high_2007, name='High 2007',\n                         line=dict(color='firebrick', width=4,\n                              dash='dash') # dash options include 'dash', 'dot', and 'dashdot'\n))\nfig.add_trace(go.Scatter(x=month, y=low_2007, name='Low 2007',\n                         line = dict(color='royalblue', width=4, dash='dash')))\nfig.add_trace(go.Scatter(x=month, y=high_2000, name='High 2000',\n                         line = dict(color='firebrick', width=4, dash='dot')))\nfig.add_trace(go.Scatter(x=month, y=low_2000, name='Low 2000',\n                         line=dict(color='royalblue', width=4, dash='dot')))\n\n# Edit the layout\nfig.update_layout(title='Average High and Low Temperatures in New York',\n                   xaxis_title='Month',\n                   yaxis_title='Temperature (degrees F)')\n\n\nfig.show()","23f87f9f":"import plotly.graph_objects as go\n\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x=x,\n    y=[10, 20, None, 15, 10, 5, 15, None, 20, 10, 10, 15, 25, 20, 10],\n    name = '<b>No<\/b> Gaps', # Style name\/legend entry with html tags\n    connectgaps=True # override default to connect the gaps\n))\nfig.add_trace(go.Scatter(\n    x=x,\n    y=[5, 15, None, 10, 5, 0, 10, None, 15, 5, 5, 10, 20, 15, 5],\n    name='Gaps',\n))\n\nfig.show()","43bf6e78":"import plotly.graph_objects as go\nimport numpy as np\n\nx = np.array([1, 2, 3, 4, 5])\ny = np.array([1, 3, 2, 3, 1])\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=x, y=y, name=\"linear\",\n                    line_shape='linear'))\nfig.add_trace(go.Scatter(x=x, y=y + 5, name=\"spline\",\n                    text=[\"tweak line smoothness<br>with 'smoothing' in line object\"],\n                    hoverinfo='text+name',\n                    line_shape='spline'))\nfig.add_trace(go.Scatter(x=x, y=y + 10, name=\"vhv\",\n                    line_shape='vhv'))\nfig.add_trace(go.Scatter(x=x, y=y + 15, name=\"hvh\",\n                    line_shape='hvh'))\nfig.add_trace(go.Scatter(x=x, y=y + 20, name=\"vh\",\n                    line_shape='vh'))\nfig.add_trace(go.Scatter(x=x, y=y + 25, name=\"hv\",\n                    line_shape='hv'))\n\nfig.update_traces(hoverinfo='text+name', mode='lines+markers')\nfig.update_layout(legend=dict(y=0.5, traceorder='reversed', font_size=16))\n\nfig.show()","a9c0dccc":"import plotly.graph_objects as go\nimport numpy as np\n\ntitle = 'Main Source for News'\nlabels = ['Television', 'Newspaper', 'Internet', 'Radio']\ncolors = ['rgb(67,67,67)', 'rgb(115,115,115)', 'rgb(49,130,189)', 'rgb(189,189,189)']\n\nmode_size = [8, 8, 12, 8]\nline_size = [2, 2, 4, 2]\n\nx_data = np.vstack((np.arange(2001, 2014),)*4)\n\ny_data = np.array([\n    [74, 82, 80, 74, 73, 72, 74, 70, 70, 66, 66, 69],\n    [45, 42, 50, 46, 36, 36, 34, 35, 32, 31, 31, 28],\n    [13, 14, 20, 24, 20, 24, 24, 40, 35, 41, 43, 50],\n    [18, 21, 18, 21, 16, 14, 13, 18, 17, 16, 19, 23],\n])\n\nfig = go.Figure()\n\nfor i in range(0, 4):\n    fig.add_trace(go.Scatter(x=x_data[i], y=y_data[i], mode='lines',\n        name=labels[i],\n        line=dict(color=colors[i], width=line_size[i]),\n        connectgaps=True,\n    ))\n\n    # endpoints\n    fig.add_trace(go.Scatter(\n        x=[x_data[i][0], x_data[i][-1]],\n        y=[y_data[i][0], y_data[i][-1]],\n        mode='markers',\n        marker=dict(color=colors[i], size=mode_size[i])\n    ))\n\nfig.update_layout(\n    xaxis=dict(\n        showline=True,\n        showgrid=False,\n        showticklabels=True,\n        linecolor='rgb(204, 204, 204)',\n        linewidth=2,\n        ticks='outside',\n        tickfont=dict(\n            family='Arial',\n            size=12,\n            color='rgb(82, 82, 82)',\n        ),\n    ),\n    yaxis=dict(\n        showgrid=False,\n        zeroline=False,\n        showline=False,\n        showticklabels=False,\n    ),\n    autosize=False,\n    margin=dict(\n        autoexpand=False,\n        l=100,\n        r=20,\n        t=110,\n    ),\n    showlegend=False,\n    plot_bgcolor='white'\n)\n\nannotations = []\n\n# Adding labels\nfor y_trace, label, color in zip(y_data, labels, colors):\n    # labeling the left_side of the plot\n    annotations.append(dict(xref='paper', x=0.05, y=y_trace[0],\n                                  xanchor='right', yanchor='middle',\n                                  text=label + ' {}%'.format(y_trace[0]),\n                                  font=dict(family='Arial',\n                                            size=16),\n                                  showarrow=False))\n    # labeling the right_side of the plot\n    annotations.append(dict(xref='paper', x=0.95, y=y_trace[11],\n                                  xanchor='left', yanchor='middle',\n                                  text='{}%'.format(y_trace[11]),\n                                  font=dict(family='Arial',\n                                            size=16),\n                                  showarrow=False))\n# Title\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text='Main Source for News',\n                              font=dict(family='Arial',\n                                        size=30,\n                                        color='rgb(37,37,37)'),\n                              showarrow=False))\n# Source\nannotations.append(dict(xref='paper', yref='paper', x=0.5, y=-0.1,\n                              xanchor='center', yanchor='top',\n                              text='Source: PewResearch Center & ' +\n                                   'Storytelling with data',\n                              font=dict(family='Arial',\n                                        size=12,\n                                        color='rgb(150,150,150)'),\n                              showarrow=False))\n\nfig.update_layout(annotations=annotations)\n\nfig.show()","a937d23b":"import plotly.graph_objects as go\nimport numpy as np\n\n\n\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nx_rev = x[::-1]\n\n# Line 1\ny1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1_upper = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\ny1_lower = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\ny1_lower = y1_lower[::-1]\n\n# Line 2\ny2 = [5, 2.5, 5, 7.5, 5, 2.5, 7.5, 4.5, 5.5, 5]\ny2_upper = [5.5, 3, 5.5, 8, 6, 3, 8, 5, 6, 5.5]\ny2_lower = [4.5, 2, 4.4, 7, 4, 2, 7, 4, 5, 4.75]\ny2_lower = y2_lower[::-1]\n\n# Line 3\ny3 = [10, 8, 6, 4, 2, 0, 2, 4, 2, 0]\ny3_upper = [11, 9, 7, 5, 3, 1, 3, 5, 3, 1]\ny3_lower = [9, 7, 5, 3, 1, -.5, 1, 3, 1, -1]\ny3_lower = y3_lower[::-1]\n\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x=x+x_rev,\n    y=y1_upper+y1_lower,\n    fill='toself',\n    fillcolor='rgba(0,100,80,0.2)',\n    line_color='rgba(255,255,255,0)',\n    showlegend=False,\n    name='Fair',\n))\nfig.add_trace(go.Scatter(\n    x=x+x_rev,\n    y=y2_upper+y2_lower,\n    fill='toself',\n    fillcolor='rgba(0,176,246,0.2)',\n    line_color='rgba(255,255,255,0)',\n    name='Premium',\n    showlegend=False,\n))\nfig.add_trace(go.Scatter(\n    x=x+x_rev,\n    y=y3_upper+y3_lower,\n    fill='toself',\n    fillcolor='rgba(231,107,243,0.2)',\n    line_color='rgba(255,255,255,0)',\n    showlegend=False,\n    name='Ideal',\n))\nfig.add_trace(go.Scatter(\n    x=x, y=y1,\n    line_color='rgb(0,100,80)',\n    name='Fair',\n))\nfig.add_trace(go.Scatter(\n    x=x, y=y2,\n    line_color='rgb(0,176,246)',\n    name='Premium',\n))\nfig.add_trace(go.Scatter(\n    x=x, y=y3,\n    line_color='rgb(231,107,243)',\n    name='Ideal',\n))\n\nfig.update_traces(mode='lines')\nfig.show()","d7885c42":"import plotly.express as px\ndata_canada = px.data.gapminder().query(\"country == 'Canada'\")\nfig = px.bar(data_canada, x='year', y='pop')\nfig.show()","e77477a0":"import plotly.express as px\n\nlong_df = px.data.medals_long()\n\nfig = px.bar(long_df, x=\"nation\", y=\"count\", color=\"medal\", title=\"Long-Form Input\")\nfig.show()","e679c81d":"import plotly.express as px\n\nwide_df = px.data.medals_wide()\n\nfig = px.bar(wide_df, x=\"nation\", y=[\"gold\", \"silver\", \"bronze\"], title=\"Wide-Form Input\")\nfig.show()","02115d75":"import plotly.express as px\ndata = px.data.gapminder()\n\ndata_canada = data[data.country == 'Canada']\nfig = px.bar(data_canada, x='year', y='pop',\n             hover_data=['lifeExp', 'gdpPercap'], color='lifeExp',\n             labels={'pop':'population of Canada'}, height=400)\nfig.show()","3b6e408b":"import plotly.express as px\ndf = px.data.tips()\nfig = px.bar(df, x=\"sex\", y=\"total_bill\", color='time')\nfig.show()","baabf18c":"# Change the default stacking\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.bar(df, x=\"sex\", y=\"total_bill\",\n             color='smoker', barmode='group',\n             height=400)\nfig.show()","f3caa0b7":"import plotly.express as px\ndf = px.data.tips()\nfig = px.bar(df, x=\"sex\", y=\"total_bill\", color=\"smoker\", barmode=\"group\",\n             facet_row=\"time\", facet_col=\"day\",\n             category_orders={\"day\": [\"Thur\", \"Fri\", \"Sat\", \"Sun\"],\n                              \"time\": [\"Lunch\", \"Dinner\"]})\nfig.show()","c88318e6":"import plotly.graph_objects as go\nanimals=['giraffes', 'orangutans', 'monkeys']\n\nfig = go.Figure(data=[\n    go.Bar(name='SF Zoo', x=animals, y=[20, 14, 23]),\n    go.Bar(name='LA Zoo', x=animals, y=[12, 18, 29])\n])\n# Change the bar mode\nfig.update_layout(barmode='group')\nfig.show()","0ce56122":"import plotly.graph_objects as go\nanimals=['giraffes', 'orangutans', 'monkeys']\n\nfig = go.Figure(data=[\n    go.Bar(name='SF Zoo', x=animals, y=[20, 14, 23]),\n    go.Bar(name='LA Zoo', x=animals, y=[12, 18, 29])\n])\n# Change the bar mode\nfig.update_layout(barmode='stack')\nfig.show()","fa9021cd":"import plotly.graph_objects as go\n\nx = ['Product A', 'Product B', 'Product C']\ny = [20, 14, 23]\n\n# Use the hovertext kw argument for hover text\nfig = go.Figure(data=[go.Bar(x=x, y=y,\n            hovertext=['27% market share', '24% market share', '19% market share'])])\n# Customize aspect\nfig.update_traces(marker_color='rgb(158,202,225)', marker_line_color='rgb(8,48,107)',\n                  marker_line_width=1.5, opacity=0.6)\nfig.update_layout(title_text='January 2013 Sales Report')\nfig.show()","29703244":"import plotly.graph_objects as go\n\nx = ['Product A', 'Product B', 'Product C']\ny = [20, 14, 23]\n\n# Use textposition='auto' for direct text\nfig = go.Figure(data=[go.Bar(\n            x=x, y=y,\n            text=y,\n            textposition='auto',\n        )])\n\nfig.show()","0a682e60":"import plotly.express as px\n\ndf = px.data.gapminder().query(\"continent == 'Europe' and year == 2007 and pop > 2.e6\")\nfig = px.bar(df, y='pop', x='country', text='pop')\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()","d43a9b48":"import plotly.graph_objects as go\n\nmonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n          'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    x=months,\n    y=[20, 14, 25, 16, 18, 22, 19, 15, 12, 16, 14, 17],\n    name='Primary Product',\n    marker_color='indianred'\n))\nfig.add_trace(go.Bar(\n    x=months,\n    y=[19, 14, 22, 14, 16, 19, 15, 14, 10, 12, 12, 16],\n    name='Secondary Product',\n    marker_color='lightsalmon'\n))\n\n# Here we modify the tickangle of the xaxis, resulting in rotated labels.\nfig.update_layout(barmode='group', xaxis_tickangle=-45)\nfig.show()","e258636f":"import plotly.graph_objects as go\n\ncolors = ['lightslategray',] * 5\ncolors[1] = 'crimson'\n\nfig = go.Figure(data=[go.Bar(\n    x=['Feature A', 'Feature B', 'Feature C',\n       'Feature D', 'Feature E'],\n    y=[20, 14, 23, 25, 22],\n    marker_color=colors # marker color can be a single color value or an iterable\n)])\nfig.update_layout(title_text='Least Used Feature')","5e662ae1":"import plotly.graph_objects as go\n\nfig = go.Figure(data=[go.Bar(\n    x=[1, 2, 3, 5.5, 10],\n    y=[10, 8, 6, 4, 2],\n    width=[0.8, 0.8, 0.8, 3.5, 4] # customize width here\n)])\n\nfig.show()","0773f750":"import plotly.graph_objects as go\n\nyears = ['2016','2017','2018']\n\nfig = go.Figure()\nfig.add_trace(go.Bar(x=years, y=[500, 600, 700],\n                base=[-500,-600,-700],\n                marker_color='crimson',\n                name='expenses'))\nfig.add_trace(go.Bar(x=years, y=[300, 400, 700],\n                base=0,\n                marker_color='lightslategrey',\n                name='revenue'\n                ))\n\nfig.show()","61c3ea78":"import plotly.graph_objects as go\n\nyears = [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,\n         2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012]\n\nfig = go.Figure()\nfig.add_trace(go.Bar(x=years,\n                y=[219, 146, 112, 127, 124, 180, 236, 207, 236, 263,\n                   350, 430, 474, 526, 488, 537, 500, 439],\n                name='Rest of world',\n                marker_color='rgb(55, 83, 109)'\n                ))\nfig.add_trace(go.Bar(x=years,\n                y=[16, 13, 10, 11, 28, 37, 43, 55, 56, 88, 105, 156, 270,\n                   299, 340, 403, 549, 499],\n                name='China',\n                marker_color='rgb(26, 118, 255)'\n                ))\n\nfig.update_layout(\n    title='US Export of Plastic Scrap',\n    xaxis_tickfont_size=14,\n    yaxis=dict(\n        title='USD (millions)',\n        titlefont_size=16,\n        tickfont_size=14,\n    ),\n    legend=dict(\n        x=0,\n        y=1.0,\n        bgcolor='rgba(255, 255, 255, 0)',\n        bordercolor='rgba(255, 255, 255, 0)'\n    ),\n    barmode='group',\n    bargap=0.15, # gap between bars of adjacent location coordinates.\n    bargroupgap=0.1 # gap between bars of the same location coordinate.\n)\nfig.show()","0d6231a5":"import plotly.graph_objects as go\nx = [1, 2, 3, 4]\n\nfig = go.Figure()\nfig.add_trace(go.Bar(x=x, y=[1, 4, 9, 16]))\nfig.add_trace(go.Bar(x=x, y=[6, -8, -4.5, 8]))\nfig.add_trace(go.Bar(x=x, y=[-15, -3, 4.5, -8]))\nfig.add_trace(go.Bar(x=x, y=[-1, 3, -3, -4]))\n\nfig.update_layout(barmode='relative', title_text='Relative Barmode')\nfig.show()","be0e8bdd":"import plotly.graph_objects as go\n\nx=['b', 'a', 'c', 'd']\nfig = go.Figure(go.Bar(x=x, y=[2,5,1,9], name='Montreal'))\nfig.add_trace(go.Bar(x=x, y=[1, 4, 9, 16], name='Ottawa'))\nfig.add_trace(go.Bar(x=x, y=[6, 8, 4.5, 8], name='Toronto'))\n\nfig.update_layout(barmode='stack', xaxis={'categoryorder':'category ascending'})\nfig.show()","f5cbd5b1":"import plotly.graph_objects as go\n\nx=['b', 'a', 'c', 'd']\nfig = go.Figure(go.Bar(x=x, y=[2,5,1,9], name='Montreal'))\nfig.add_trace(go.Bar(x=x, y=[1, 4, 9, 16], name='Ottawa'))\nfig.add_trace(go.Bar(x=x, y=[6, 8, 4.5, 8], name='Toronto'))\n\nfig.update_layout(barmode='stack', xaxis={'categoryorder':'array', 'categoryarray':['d','a','c','b']})\nfig.show()","6ed878b1":"import plotly.graph_objects as go\n\nx=['b', 'a', 'c', 'd']\nfig = go.Figure(go.Bar(x=x, y=[2,5,1,9], name='Montreal'))\nfig.add_trace(go.Bar(x=x, y=[1, 4, 9, 16], name='Ottawa'))\nfig.add_trace(go.Bar(x=x, y=[6, 8, 4.5, 8], name='Toronto'))\n\nfig.update_layout(barmode='stack', xaxis={'categoryorder':'total descending'})\nfig.show()","5e69d935":"import plotly.graph_objects as go\nx = [\n    [\"BB+\", \"BB+\", \"BB+\", \"BB\", \"BB\", \"BB\"],\n    [16, 17, 18, 16, 17, 18,]\n]\nfig = go.Figure()\nfig.add_bar(x=x,y=[1,2,3,4,5,6])\nfig.add_bar(x=x,y=[6,5,4,3,2,1])\nfig.update_layout(barmode=\"relative\")\nfig.show()","a97d8cd1":"import plotly.express as px\ndf = px.data.gapminder().query(\"year == 2007\").query(\"continent == 'Europe'\")\ndf.loc[df['pop'] < 2.e6, 'country'] = 'Other countries' # Represent only large countries\nfig = px.pie(df, values='pop', names='country', title='Population of European continent')\nfig.show()","755e73fe":"import plotly.express as px\n# This dataframe has 244 lines, but 4 distinct values for `day`\ndf = px.data.tips()\nfig = px.pie(df, values='tip', names='day')\nfig.show()","5e0c00a7":"import plotly.express as px\ndf = px.data.tips()\nfig = px.pie(df, values='tip', names='day', color_discrete_sequence=px.colors.sequential.RdBu)\nfig.show()","c665f737":"import plotly.express as px\ndf = px.data.tips()\nfig = px.pie(df, values='tip', names='day', color='day',\n             color_discrete_map={'Thur':'lightcyan',\n                                 'Fri':'cyan',\n                                 'Sat':'royalblue',\n                                 'Sun':'darkblue'})\nfig.show()","e9653de8":"import plotly.express as px\ndf = px.data.gapminder().query(\"year == 2007\").query(\"continent == 'Americas'\")\nfig = px.pie(df, values='pop', names='country',\n             title='Population of American continent',\n             hover_data=['lifeExp'], labels={'lifeExp':'life expectancy'})\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.show()","53cd7612":"import plotly.graph_objects as go\n\nlabels = ['Oxygen','Hydrogen','Carbon_Dioxide','Nitrogen']\nvalues = [4500, 2500, 1053, 500]\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values)])\nfig.show()","fdd6f361":"import plotly.graph_objects as go\ncolors = ['gold', 'mediumturquoise', 'darkorange', 'lightgreen']\n\nfig = go.Figure(data=[go.Pie(labels=['Oxygen','Hydrogen','Carbon_Dioxide','Nitrogen'],\n                             values=[4500,2500,1053,500])])\nfig.update_traces(hoverinfo='label+percent', textinfo='value', textfont_size=20,\n                  marker=dict(colors=colors, line=dict(color='#000000', width=2)))\nfig.show()","25c8c51d":"import plotly.express as px\n\ndf = px.data.gapminder().query(\"continent == 'Asia'\")\nfig = px.pie(df, values='pop', names='country')\nfig.update_traces(textposition='inside')\nfig.update_layout(uniformtext_minsize=12, uniformtext_mode='hide')\nfig.show()","419faa4b":"import plotly.graph_objects as go\n\nlabels = ['Oxygen','Hydrogen','Carbon_Dioxide','Nitrogen']\nvalues = [4500, 2500, 1053, 500]\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, textinfo='label+percent',\n                             insidetextorientation='radial'\n                            )])\nfig.show()","f43f79db":"import plotly.graph_objects as go\n\nlabels = ['Oxygen','Hydrogen','Carbon_Dioxide','Nitrogen']\nvalues = [4500, 2500, 1053, 500]\n\n# Use `hole` to create a donut-like pie chart\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.3)])\nfig.show()","7ba42d06":"import plotly.graph_objects as go\n\nlabels = ['Oxygen','Hydrogen','Carbon_Dioxide','Nitrogen']\nvalues = [4500, 2500, 1053, 500]\n\n# pull is given as a fraction of the pie radius\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, pull=[0, 0, 0.2, 0])])\nfig.show()","b9a8e2ee":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nlabels = [\"US\", \"China\", \"European Union\", \"Russian Federation\", \"Brazil\", \"India\",\n          \"Rest of World\"]\n\n# Create subplots: use 'domain' type for Pie subplot\nfig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]])\nfig.add_trace(go.Pie(labels=labels, values=[16, 15, 12, 6, 5, 4, 42], name=\"GHG Emissions\"),\n              1, 1)\nfig.add_trace(go.Pie(labels=labels, values=[27, 11, 25, 8, 1, 3, 25], name=\"CO2 Emissions\"),\n              1, 2)\n\n# Use `hole` to create a donut-like pie chart\nfig.update_traces(hole=.4, hoverinfo=\"label+percent+name\")\n\nfig.update_layout(\n    title_text=\"Global Emissions 1990-2011\",\n    # Add annotations in the center of the donut pies.\n    annotations=[dict(text='GHG', x=0.18, y=0.5, font_size=20, showarrow=False),\n                 dict(text='CO2', x=0.82, y=0.5, font_size=20, showarrow=False)])\nfig.show()","7d780693":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nlabels = ['1st', '2nd', '3rd', '4th', '5th']\n\n# Define color sets of paintings\nnight_colors = ['rgb(56, 75, 126)', 'rgb(18, 36, 37)', 'rgb(34, 53, 101)',\n                'rgb(36, 55, 57)', 'rgb(6, 4, 4)']\nsunflowers_colors = ['rgb(177, 127, 38)', 'rgb(205, 152, 36)', 'rgb(99, 79, 37)',\n                     'rgb(129, 180, 179)', 'rgb(124, 103, 37)']\nirises_colors = ['rgb(33, 75, 99)', 'rgb(79, 129, 102)', 'rgb(151, 179, 100)',\n                 'rgb(175, 49, 35)', 'rgb(36, 73, 147)']\ncafe_colors =  ['rgb(146, 123, 21)', 'rgb(177, 180, 34)', 'rgb(206, 206, 40)',\n                'rgb(175, 51, 21)', 'rgb(35, 36, 21)']\n\n# Create subplots, using 'domain' type for pie charts\nspecs = [[{'type':'domain'}, {'type':'domain'}], [{'type':'domain'}, {'type':'domain'}]]\nfig = make_subplots(rows=2, cols=2, specs=specs)\n\n# Define pie charts\nfig.add_trace(go.Pie(labels=labels, values=[38, 27, 18, 10, 7], name='Starry Night',\n                     marker_colors=night_colors), 1, 1)\nfig.add_trace(go.Pie(labels=labels, values=[28, 26, 21, 15, 10], name='Sunflowers',\n                     marker_colors=sunflowers_colors), 1, 2)\nfig.add_trace(go.Pie(labels=labels, values=[38, 19, 16, 14, 13], name='Irises',\n                     marker_colors=irises_colors), 2, 1)\nfig.add_trace(go.Pie(labels=labels, values=[31, 24, 19, 18, 8], name='The Night Caf\u00e9',\n                     marker_colors=cafe_colors), 2, 2)\n\n# Tune layout and hover info\nfig.update_traces(hoverinfo='label+percent+name', textinfo='none')\nfig.update(layout_title_text='Van Gogh: 5 Most Prominent Colors Shown Proportionally',\n           layout_showlegend=False)\n\nfig = go.Figure(fig)\nfig.show()","aafcb575":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nlabels = [\"Asia\", \"Europe\", \"Africa\", \"Americas\", \"Oceania\"]\n\nfig = make_subplots(1, 2, specs=[[{'type':'domain'}, {'type':'domain'}]],\n                    subplot_titles=['1980', '2007'])\nfig.add_trace(go.Pie(labels=labels, values=[4, 7, 1, 7, 0.5], scalegroup='one',\n                     name=\"World GDP 1980\"), 1, 1)\nfig.add_trace(go.Pie(labels=labels, values=[21, 15, 3, 19, 1], scalegroup='one',\n                     name=\"World GDP 2007\"), 1, 2)\n\nfig.update_layout(title_text='World GDP')\nfig.show()","517f686e":"import plotly.express as px\nimport pandas as pd\n\nschools = [\"Brown\", \"NYU\", \"Notre Dame\", \"Cornell\", \"Tufts\", \"Yale\",\n           \"Dartmouth\", \"Chicago\", \"Columbia\", \"Duke\", \"Georgetown\",\n           \"Princeton\", \"U.Penn\", \"Stanford\", \"MIT\", \"Harvard\"]\nn_schools = len(schools)\n\nmen_salary = [72, 67, 73, 80, 76, 79, 84, 78, 86, 93, 94, 90, 92, 96, 94, 112]\nwomen_salary = [92, 94, 100, 107, 112, 114, 114, 118, 119, 124, 131, 137, 141, 151, 152, 165]\n\ndf = pd.DataFrame(dict(school=schools*2, salary=men_salary + women_salary,\n                       gender=[\"Men\"]*n_schools + [\"Women\"]*n_schools))\n\n# Use column names of df for the different parameters x, y, color, ...\nfig = px.scatter(df, x=\"salary\", y=\"school\", color=\"gender\",\n                 title=\"Gender Earnings Disparity\",\n                 labels={\"salary\":\"Annual Salary (in thousands)\"} # customize axis label\n                )\n\nfig.show()","bedd5b90":"import plotly.graph_objects as go\n\nschools = [\"Brown\", \"NYU\", \"Notre Dame\", \"Cornell\", \"Tufts\", \"Yale\",\n           \"Dartmouth\", \"Chicago\", \"Columbia\", \"Duke\", \"Georgetown\",\n           \"Princeton\", \"U.Penn\", \"Stanford\", \"MIT\", \"Harvard\"]\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(\n    x=[72, 67, 73, 80, 76, 79, 84, 78, 86, 93, 94, 90, 92, 96, 94, 112],\n    y=schools,\n    marker=dict(color=\"crimson\", size=12),\n    mode=\"markers\",\n    name=\"Women\",\n))\n\nfig.add_trace(go.Scatter(\n    x=[92, 94, 100, 107, 112, 114, 114, 118, 119, 124, 131, 137, 141, 151, 152, 165],\n    y=schools,\n    marker=dict(color=\"gold\", size=12),\n    mode=\"markers\",\n    name=\"Men\",\n))\n\nfig.update_layout(title=\"Gender Earnings Disparity\",\n                  xaxis_title=\"Annual Salary (in thousands)\",\n                  yaxis_title=\"School\")\n\nfig.show()","0c66b36e":"import plotly.graph_objects as go\n\ncountry = ['Switzerland (2011)', 'Chile (2013)', 'Japan (2014)',\n           'United States (2012)', 'Slovenia (2014)', 'Canada (2011)',\n           'Poland (2010)', 'Estonia (2015)', 'Luxembourg (2013)', 'Portugal (2011)']\nvoting_pop = [40, 45.7, 52, 53.6, 54.1, 54.2, 54.5, 54.7, 55.1, 56.6]\nreg_voters = [49.1, 42, 52.7, 84.3, 51.7, 61.1, 55.3, 64.2, 91.1, 58.9]\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x=voting_pop,\n    y=country,\n    name='Percent of estimated voting age population',\n    marker=dict(\n        color='rgba(156, 165, 196, 0.95)',\n        line_color='rgba(156, 165, 196, 1.0)',\n    )\n))\nfig.add_trace(go.Scatter(\n    x=reg_voters, y=country,\n    name='Percent of estimated registered voters',\n    marker=dict(\n        color='rgba(204, 204, 204, 0.95)',\n        line_color='rgba(217, 217, 217, 1.0)'\n    )\n))\n\nfig.update_traces(mode='markers', marker=dict(line_width=1, symbol='circle', size=16))\n\nfig.update_layout(\n    title=\"Votes cast for ten lowest voting age population in OECD countries\",\n    xaxis=dict(\n        showgrid=False,\n        showline=True,\n        linecolor='rgb(102, 102, 102)',\n        tickfont_color='rgb(102, 102, 102)',\n        showticklabels=True,\n        dtick=10,\n        ticks='outside',\n        tickcolor='rgb(102, 102, 102)',\n    ),\n    margin=dict(l=140, r=40, b=50, t=80),\n    legend=dict(\n        font_size=10,\n        yanchor='middle',\n        xanchor='right',\n    ),\n    width=800,\n    height=600,\n    paper_bgcolor='white',\n    plot_bgcolor='white',\n    hovermode='closest',\n)\nfig.show()","8cd7e946":"import plotly.express as px\ndf = px.data.gapminder()\nfig = px.area(df, x=\"year\", y=\"pop\", color=\"continent\",\n\t      line_group=\"country\")\nfig.show()","6977c1ae":"import plotly.graph_objects as go\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=[1, 2, 3, 4], y=[0, 2, 3, 5], fill='tozeroy')) # fill down to xaxis\nfig.add_trace(go.Scatter(x=[1, 2, 3, 4], y=[3, 5, 1, 7], fill='tonexty')) # fill to trace0 y\n\nfig.show()","20f0969a":"import plotly.graph_objects as go\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=[1, 2, 3, 4], y=[0, 2, 3, 5], fill='tozeroy',\n                    mode='none' # override default markers+lines\n                    ))\nfig.add_trace(go.Scatter(x=[1, 2, 3, 4], y=[3, 5, 1, 7], fill='tonexty',\n                    mode= 'none'))\n\nfig.show()","c4171c7d":"import plotly.graph_objects as go\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=[1, 2, 3, 4], y=[3, 4, 8, 3],\n    fill=None,\n    mode='lines',\n    line_color='indigo',\n    ))\nfig.add_trace(go.Scatter(\n    x=[1, 2, 3, 4],\n    y=[1, 6, 2, 6],\n    fill='tonexty', # fill area between trace0 and trace1\n    mode='lines', line_color='indigo'))\n\nfig.show()","5ff22cc1":"import plotly.graph_objects as go\n\nx=['Winter', 'Spring', 'Summer', 'Fall']\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(\n    x=x, y=[40, 60, 40, 10],\n    hoverinfo='x+y',\n    mode='lines',\n    line=dict(width=0.5, color='rgb(131, 90, 241)'),\n    stackgroup='one' # define stack group\n))\nfig.add_trace(go.Scatter(\n    x=x, y=[20, 10, 10, 60],\n    hoverinfo='x+y',\n    mode='lines',\n    line=dict(width=0.5, color='rgb(111, 231, 219)'),\n    stackgroup='one'\n))\nfig.add_trace(go.Scatter(\n    x=x, y=[40, 30, 50, 30],\n    hoverinfo='x+y',\n    mode='lines',\n    line=dict(width=0.5, color='rgb(184, 247, 212)'),\n    stackgroup='one'\n))\n\nfig.update_layout(yaxis_range=(0, 100))\nfig.show()","6010f30e":"import plotly.graph_objects as go\n\nx=['Winter', 'Spring', 'Summer', 'Fall']\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x=x, y=[40, 20, 30, 40],\n    mode='lines',\n    line=dict(width=0.5, color='rgb(184, 247, 212)'),\n    stackgroup='one',\n    groupnorm='percent' # sets the normalization for the sum of the stackgroup\n))\nfig.add_trace(go.Scatter(\n    x=x, y=[50, 70, 40, 60],\n    mode='lines',\n    line=dict(width=0.5, color='rgb(111, 231, 219)'),\n    stackgroup='one'\n))\nfig.add_trace(go.Scatter(\n    x=x, y=[70, 80, 60, 70],\n    mode='lines',\n    line=dict(width=0.5, color='rgb(127, 166, 238)'),\n    stackgroup='one'\n))\nfig.add_trace(go.Scatter(\n    x=x, y=[100, 100, 100, 100],\n    mode='lines',\n    line=dict(width=0.5, color='rgb(131, 90, 241)'),\n    stackgroup='one'\n))\n\nfig.update_layout(\n    showlegend=True,\n    xaxis_type='category',\n    yaxis=dict(\n        type='linear',\n        range=[1, 100],\n        ticksuffix='%'))\n\nfig.show()","f556ebb7":"import plotly.graph_objects as go\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=[0,0.5,1,1.5,2], y=[0,1,2,1,0],\n                    fill='toself', fillcolor='darkviolet',\n                    hoveron = 'points+fills', # select where hover is active\n                    line_color='darkviolet',\n                    text=\"Points + Fills\",\n                    hoverinfo = 'text+x+y'))\n\nfig.add_trace(go.Scatter(x=[3,3.5,4,4.5,5], y=[0,1,2,1,0],\n                    fill='toself', fillcolor = 'violet',\n                    hoveron='points',\n                    line_color='violet',\n                    text=\"Points only\",\n                    hoverinfo='text+x+y'))\n\nfig.update_layout(\n    title = \"hover on <i>points<\/i> or <i>fill<\/i>\",\n    xaxis_range = [0,5.2],\n    yaxis_range = [0,3]\n)\n\nfig.show()","b5a92652":"import plotly.express as px\ndf = px.data.tips()\nfig = px.bar(df, x=\"total_bill\", y=\"day\", orientation='h')\nfig.show()","c7f81473":"import plotly.express as px\ndf = px.data.tips()\nfig = px.bar(df, x=\"total_bill\", y=\"sex\", color='day', orientation='h',\n             hover_data=[\"tip\", \"size\"],\n             height=400,\n             title='Restaurant bills')\nfig.show()","eb2dd4f8":"import plotly.graph_objects as go\n\nfig = go.Figure(go.Bar(\n            x=[20, 14, 23],\n            y=['giraffes', 'orangutans', 'monkeys'],\n            orientation='h'))\n\nfig.show()","295aba66":"import plotly.graph_objects as go\n\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    y=['giraffes', 'orangutans', 'monkeys'],\n    x=[20, 14, 23],\n    name='SF Zoo',\n    orientation='h',\n    marker=dict(\n        color='rgba(246, 78, 139, 0.6)',\n        line=dict(color='rgba(246, 78, 139, 1.0)', width=3)\n    )\n))\nfig.add_trace(go.Bar(\n    y=['giraffes', 'orangutans', 'monkeys'],\n    x=[12, 18, 29],\n    name='LA Zoo',\n    orientation='h',\n    marker=dict(\n        color='rgba(58, 71, 80, 0.6)',\n        line=dict(color='rgba(58, 71, 80, 1.0)', width=3)\n    )\n))\n\nfig.update_layout(barmode='stack')\nfig.show()","ceb944dd":"import plotly.graph_objects as go\n\ntop_labels = ['Strongly<br>agree', 'Agree', 'Neutral', 'Disagree',\n              'Strongly<br>disagree']\n\ncolors = ['rgba(38, 24, 74, 0.8)', 'rgba(71, 58, 131, 0.8)',\n          'rgba(122, 120, 168, 0.8)', 'rgba(164, 163, 204, 0.85)',\n          'rgba(190, 192, 213, 1)']\n\nx_data = [[21, 30, 21, 16, 12],\n          [24, 31, 19, 15, 11],\n          [27, 26, 23, 11, 13],\n          [29, 24, 15, 18, 14]]\n\ny_data = ['The course was effectively<br>organized',\n          'The course developed my<br>abilities and skills ' +\n          'for<br>the subject', 'The course developed ' +\n          'my<br>ability to think critically about<br>the subject',\n          'I would recommend this<br>course to a friend']\n\nfig = go.Figure()\n\nfor i in range(0, len(x_data[0])):\n    for xd, yd in zip(x_data, y_data):\n        fig.add_trace(go.Bar(\n            x=[xd[i]], y=[yd],\n            orientation='h',\n            marker=dict(\n                color=colors[i],\n                line=dict(color='rgb(248, 248, 249)', width=1)\n            )\n        ))\n\nfig.update_layout(\n    xaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=False,\n        zeroline=False,\n        domain=[0.15, 1]\n    ),\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=False,\n        zeroline=False,\n    ),\n    barmode='stack',\n    paper_bgcolor='rgb(248, 248, 255)',\n    plot_bgcolor='rgb(248, 248, 255)',\n    margin=dict(l=120, r=10, t=140, b=80),\n    showlegend=False,\n)\n\nannotations = []\n\nfor yd, xd in zip(y_data, x_data):\n    # labeling the y-axis\n    annotations.append(dict(xref='paper', yref='y',\n                            x=0.14, y=yd,\n                            xanchor='right',\n                            text=str(yd),\n                            font=dict(family='Arial', size=14,\n                                      color='rgb(67, 67, 67)'),\n                            showarrow=False, align='right'))\n    # labeling the first percentage of each bar (x_axis)\n    annotations.append(dict(xref='x', yref='y',\n                            x=xd[0] \/ 2, y=yd,\n                            text=str(xd[0]) + '%',\n                            font=dict(family='Arial', size=14,\n                                      color='rgb(248, 248, 255)'),\n                            showarrow=False))\n    # labeling the first Likert scale (on the top)\n    if yd == y_data[-1]:\n        annotations.append(dict(xref='x', yref='paper',\n                                x=xd[0] \/ 2, y=1.1,\n                                text=top_labels[0],\n                                font=dict(family='Arial', size=14,\n                                          color='rgb(67, 67, 67)'),\n                                showarrow=False))\n    space = xd[0]\n    for i in range(1, len(xd)):\n            # labeling the rest of percentages for each bar (x_axis)\n            annotations.append(dict(xref='x', yref='y',\n                                    x=space + (xd[i]\/2), y=yd,\n                                    text=str(xd[i]) + '%',\n                                    font=dict(family='Arial', size=14,\n                                              color='rgb(248, 248, 255)'),\n                                    showarrow=False))\n            # labeling the Likert scale\n            if yd == y_data[-1]:\n                annotations.append(dict(xref='x', yref='paper',\n                                        x=space + (xd[i]\/2), y=1.1,\n                                        text=top_labels[i],\n                                        font=dict(family='Arial', size=14,\n                                                  color='rgb(67, 67, 67)'),\n                                        showarrow=False))\n            space += xd[i]\n\nfig.update_layout(annotations=annotations)\n\nfig.show()","1c0de431":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nimport numpy as np\n\ny_saving = [1.3586, 2.2623000000000002, 4.9821999999999997, 6.5096999999999996,\n            7.4812000000000003, 7.5133000000000001, 15.2148, 17.520499999999998\n            ]\ny_net_worth = [93453.919999999998, 81666.570000000007, 69889.619999999995,\n               78381.529999999999, 141395.29999999999, 92969.020000000004,\n               66090.179999999993, 122379.3]\nx = ['Japan', 'United Kingdom', 'Canada', 'Netherlands',\n     'United States', 'Belgium', 'Sweden', 'Switzerland']\n\n\n# Creating two subplots\nfig = make_subplots(rows=1, cols=2, specs=[[{}, {}]], shared_xaxes=True,\n                    shared_yaxes=False, vertical_spacing=0.001)\n\nfig.append_trace(go.Bar(\n    x=y_saving,\n    y=x,\n    marker=dict(\n        color='rgba(50, 171, 96, 0.6)',\n        line=dict(\n            color='rgba(50, 171, 96, 1.0)',\n            width=1),\n    ),\n    name='Household savings, percentage of household disposable income',\n    orientation='h',\n), 1, 1)\n\nfig.append_trace(go.Scatter(\n    x=y_net_worth, y=x,\n    mode='lines+markers',\n    line_color='rgb(128, 0, 128)',\n    name='Household net worth, Million USD\/capita',\n), 1, 2)\n\nfig.update_layout(\n    title='Household savings & net worth for eight OECD countries',\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=True,\n        domain=[0, 0.85],\n    ),\n    yaxis2=dict(\n        showgrid=False,\n        showline=True,\n        showticklabels=False,\n        linecolor='rgba(102, 102, 102, 0.8)',\n        linewidth=2,\n        domain=[0, 0.85],\n    ),\n    xaxis=dict(\n        zeroline=False,\n        showline=False,\n        showticklabels=True,\n        showgrid=True,\n        domain=[0, 0.42],\n    ),\n    xaxis2=dict(\n        zeroline=False,\n        showline=False,\n        showticklabels=True,\n        showgrid=True,\n        domain=[0.47, 1],\n        side='top',\n        dtick=25000,\n    ),\n    legend=dict(x=0.029, y=1.038, font_size=10),\n    margin=dict(l=100, r=20, t=70, b=70),\n    paper_bgcolor='rgb(248, 248, 255)',\n    plot_bgcolor='rgb(248, 248, 255)',\n)\n\nannotations = []\n\ny_s = np.round(y_saving, decimals=2)\ny_nw = np.rint(y_net_worth)\n\n# Adding labels\nfor ydn, yd, xd in zip(y_nw, y_s, x):\n    # labeling the scatter savings\n    annotations.append(dict(xref='x2', yref='y2',\n                            y=xd, x=ydn - 20000,\n                            text='{:,}'.format(ydn) + 'M',\n                            font=dict(family='Arial', size=12,\n                                      color='rgb(128, 0, 128)'),\n                            showarrow=False))\n    # labeling the bar net worth\n    annotations.append(dict(xref='x1', yref='y1',\n                            y=xd, x=yd + 3,\n                            text=str(yd) + '%',\n                            font=dict(family='Arial', size=12,\n                                      color='rgb(50, 171, 96)'),\n                            showarrow=False))\n# Source\nannotations.append(dict(xref='paper', yref='paper',\n                        x=-0.2, y=-0.109,\n                        text='OECD \"' +\n                             '(2015), Household savings (indicator), ' +\n                             'Household net worth (indicator). doi: ' +\n                             '10.1787\/cfc6f499-en (Accessed on 05 June 2015)',\n                        font=dict(family='Arial', size=10, color='rgb(150,150,150)'),\n                        showarrow=False))\n\nfig.update_layout(annotations=annotations)\n\nfig.show()","a61870c1":"import plotly.express as px\nimport pandas as pd\n\ndf = pd.DataFrame([\n    dict(Task=\"Job A\", Start='2009-01-01', Finish='2009-02-28'),\n    dict(Task=\"Job B\", Start='2009-03-05', Finish='2009-04-15'),\n    dict(Task=\"Job C\", Start='2009-02-20', Finish='2009-05-30')\n])\n\nfig = px.timeline(df, x_start=\"Start\", x_end=\"Finish\", y=\"Task\")\nfig.update_yaxes(autorange=\"reversed\") # otherwise tasks are listed from the bottom up\nfig.show()","d5c82035":"import plotly.express as px\nimport pandas as pd\n\ndf = pd.DataFrame([\n    dict(Task=\"Job A\", Start='2009-01-01', Finish='2009-02-28', Resource=\"Alex\"),\n    dict(Task=\"Job B\", Start='2009-03-05', Finish='2009-04-15', Resource=\"Alex\"),\n    dict(Task=\"Job C\", Start='2009-02-20', Finish='2009-05-30', Resource=\"Max\")\n])\n\nfig = px.timeline(df, x_start=\"Start\", x_end=\"Finish\", y=\"Task\", color=\"Resource\")\nfig.update_yaxes(autorange=\"reversed\")\nfig.show()","1ba04f48":"import plotly.express as px\nimport pandas as pd\n\ndf = pd.DataFrame([\n    dict(Task=\"Job A\", Start='2009-01-01', Finish='2009-02-28', Completion_pct=50),\n    dict(Task=\"Job B\", Start='2009-03-05', Finish='2009-04-15', Completion_pct=25),\n    dict(Task=\"Job C\", Start='2009-02-20', Finish='2009-05-30', Completion_pct=75)\n])\n\nfig = px.timeline(df, x_start=\"Start\", x_end=\"Finish\", y=\"Task\", color=\"Completion_pct\")\nfig.update_yaxes(autorange=\"reversed\")\nfig.show()","f2599633":"import plotly.express as px\nimport pandas as pd\n\ndf = pd.DataFrame([\n    dict(Task=\"Job A\", Start='2009-01-01', Finish='2009-02-28', Resource=\"Alex\"),\n    dict(Task=\"Job B\", Start='2009-03-05', Finish='2009-04-15', Resource=\"Alex\"),\n    dict(Task=\"Job C\", Start='2009-02-20', Finish='2009-05-30', Resource=\"Max\")\n])\n\nfig = px.timeline(df, x_start=\"Start\", x_end=\"Finish\", y=\"Resource\", color=\"Resource\")\nfig.show()","b5bc29c3":"import plotly.figure_factory as ff\n\ndf = [dict(Task=\"Job A\", Start='2009-01-01', Finish='2009-02-28'),\n      dict(Task=\"Job B\", Start='2009-03-05', Finish='2009-04-15'),\n      dict(Task=\"Job C\", Start='2009-02-20', Finish='2009-05-30')]\n\nfig = ff.create_gantt(df)\nfig.show()","9aee4007":"import plotly.figure_factory as ff\n\ndf = [dict(Task=\"Job-1\", Start='2017-01-01', Finish='2017-02-02', Resource='Complete'),\n      dict(Task=\"Job-1\", Start='2017-02-15', Finish='2017-03-15', Resource='Incomplete'),\n      dict(Task=\"Job-2\", Start='2017-01-17', Finish='2017-02-17', Resource='Not Started'),\n      dict(Task=\"Job-2\", Start='2017-01-17', Finish='2017-02-17', Resource='Complete'),\n      dict(Task=\"Job-3\", Start='2017-03-10', Finish='2017-03-20', Resource='Not Started'),\n      dict(Task=\"Job-3\", Start='2017-04-01', Finish='2017-04-20', Resource='Not Started'),\n      dict(Task=\"Job-3\", Start='2017-05-18', Finish='2017-06-18', Resource='Not Started'),\n      dict(Task=\"Job-4\", Start='2017-01-14', Finish='2017-03-14', Resource='Complete')]\n\ncolors = {'Not Started': 'rgb(220, 0, 0)',\n          'Incomplete': (1, 0.9, 0.16),\n          'Complete': 'rgb(0, 255, 100)'}\n\nfig = ff.create_gantt(df, colors=colors, index_col='Resource', show_colorbar=True,\n                      group_tasks=True)\nfig.show()","5cc8163f":"import plotly.figure_factory as ff\n\ndf = [dict(Task=\"Job A\", Start='2009-01-01', Finish='2009-02-28', Complete=10),\n      dict(Task=\"Job B\", Start='2008-12-05', Finish='2009-04-15', Complete=60),\n      dict(Task=\"Job C\", Start='2009-02-20', Finish='2009-05-30', Complete=95)]\n\nfig = ff.create_gantt(df, colors='Viridis', index_col='Complete', show_colorbar=True)\nfig.show()","6d87f040":"import plotly.express as px\ndata = dict(\n    character=[\"Eve\", \"Cain\", \"Seth\", \"Enos\", \"Noam\", \"Abel\", \"Awan\", \"Enoch\", \"Azura\"],\n    parent=[\"\", \"Eve\", \"Eve\", \"Seth\", \"Seth\", \"Eve\", \"Eve\", \"Awan\", \"Eve\" ],\n    value=[10, 14, 12, 10, 2, 6, 6, 4, 4])\n\nfig =px.sunburst(\n    data,\n    names='character',\n    parents='parent',\n    values='value',\n)\nfig.show()","6b28b8f7":"import plotly.express as px\ndf = px.data.tips()\nfig = px.sunburst(df, path=['day', 'time', 'sex'], values='total_bill')\nfig.show()","db4b6c82":"import plotly.express as px\nimport numpy as np\ndf = px.data.gapminder().query(\"year == 2007\")\nfig = px.sunburst(df, path=['continent', 'country'], values='pop',\n                  color='lifeExp', hover_data=['iso_alpha'],\n                  color_continuous_scale='RdBu',\n                  color_continuous_midpoint=np.average(df['lifeExp'], weights=df['pop']))\nfig.show()","799410c2":"import plotly.express as px\ndf = px.data.tips()\nfig = px.sunburst(df, path=['sex', 'day', 'time'], values='total_bill', color='day')\nfig.show()","a4cb5d7a":"import plotly.express as px\ndf = px.data.tips()\nfig = px.sunburst(df, path=['sex', 'day', 'time'], values='total_bill', color='time')\nfig.show()","d52af91c":"import plotly.express as px\ndf = px.data.tips()\nfig = px.sunburst(df, path=['sex', 'day', 'time'], values='total_bill', color='time',\n                  color_discrete_map={'(?)':'black', 'Lunch':'gold', 'Dinner':'darkblue'})\nfig.show()","63818a32":"import plotly.express as px\nimport pandas as pd\nvendors = [\"A\", \"B\", \"C\", \"D\", None, \"E\", \"F\", \"G\", \"H\", None]\nsectors = [\"Tech\", \"Tech\", \"Finance\", \"Finance\", \"Other\",\n           \"Tech\", \"Tech\", \"Finance\", \"Finance\", \"Other\"]\nregions = [\"North\", \"North\", \"North\", \"North\", \"North\",\n           \"South\", \"South\", \"South\", \"South\", \"South\"]\nsales = [1, 3, 2, 4, 1, 2, 2, 1, 4, 1]\ndf = pd.DataFrame(\n    dict(vendors=vendors, sectors=sectors, regions=regions, sales=sales)\n)\nprint(df)\nfig = px.sunburst(df, path=['regions', 'sectors', 'vendors'], values='sales')\nfig.show()","e594ee6d":"import plotly.graph_objects as go\n\nfig =go.Figure(go.Sunburst(\n    labels=[\"Eve\", \"Cain\", \"Seth\", \"Enos\", \"Noam\", \"Abel\", \"Awan\", \"Enoch\", \"Azura\"],\n    parents=[\"\", \"Eve\", \"Eve\", \"Seth\", \"Seth\", \"Eve\", \"Eve\", \"Awan\", \"Eve\" ],\n    values=[10, 14, 12, 10, 2, 6, 6, 4, 4],\n))\n# Update layout for tight margin\n# See https:\/\/plotly.com\/python\/creating-and-updating-figures\/\nfig.update_layout(margin = dict(t=0, l=0, r=0, b=0))\n\nfig.show()","4dac5eda":"import plotly.graph_objects as go\n\nfig =go.Figure(go.Sunburst(\n ids=[\n    \"North America\", \"Europe\", \"Australia\", \"North America - Football\", \"Soccer\",\n    \"North America - Rugby\", \"Europe - Football\", \"Rugby\",\n    \"Europe - American Football\",\"Australia - Football\", \"Association\",\n    \"Australian Rules\", \"Autstralia - American Football\", \"Australia - Rugby\",\n    \"Rugby League\", \"Rugby Union\"\n  ],\n  labels= [\n    \"North<br>America\", \"Europe\", \"Australia\", \"Football\", \"Soccer\", \"Rugby\",\n    \"Football\", \"Rugby\", \"American<br>Football\", \"Football\", \"Association\",\n    \"Australian<br>Rules\", \"American<br>Football\", \"Rugby\", \"Rugby<br>League\",\n    \"Rugby<br>Union\"\n  ],\n  parents=[\n    \"\", \"\", \"\", \"North America\", \"North America\", \"North America\", \"Europe\",\n    \"Europe\", \"Europe\",\"Australia\", \"Australia - Football\", \"Australia - Football\",\n    \"Australia - Football\", \"Australia - Football\", \"Australia - Rugby\",\n    \"Australia - Rugby\"\n  ],\n))\nfig.update_layout(margin = dict(t=0, l=0, r=0, b=0))\n\nfig.show()","65c76642":"import plotly.graph_objects as go\n\nfig =go.Figure(go.Sunburst(\n    labels=[ \"Eve\", \"Cain\", \"Seth\", \"Enos\", \"Noam\", \"Abel\", \"Awan\", \"Enoch\", \"Azura\"],\n    parents=[\"\",    \"Eve\",  \"Eve\",  \"Seth\", \"Seth\", \"Eve\",  \"Eve\",  \"Awan\",  \"Eve\" ],\n    values=[  65,    14,     12,     10,     2,      6,      6,      4,       4],\n    branchvalues=\"total\",\n))\nfig.update_layout(margin = dict(t=0, l=0, r=0, b=0))\n\nfig.show()","b7d188ee":"import plotly.graph_objects as go\n\nimport pandas as pd\n\ndf1 = pd.read_csv('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/718417069ead87650b90472464c7565dc8c2cb1c\/sunburst-coffee-flavors-complete.csv')\ndf2 = pd.read_csv('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/718417069ead87650b90472464c7565dc8c2cb1c\/coffee-flavors.csv')\n\nfig = go.Figure()\n\nfig.add_trace(go.Sunburst(\n    ids=df1.ids,\n    labels=df1.labels,\n    parents=df1.parents,\n    domain=dict(column=0)\n))\n\nfig.add_trace(go.Sunburst(\n    ids=df2.ids,\n    labels=df2.labels,\n    parents=df2.parents,\n    domain=dict(column=1),\n    maxdepth=2\n))\n\nfig.update_layout(\n    grid= dict(columns=2, rows=1),\n    margin = dict(t=0, l=0, r=0, b=0)\n)\n\nfig.show()","90dca755":"import plotly.graph_objects as go\nimport pandas as pd\n\ndf = pd.read_csv('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/718417069ead87650b90472464c7565dc8c2cb1c\/coffee-flavors.csv')\n\nfig = go.Figure()\n\nfig.add_trace(go.Sunburst(\n    ids=df.ids,\n    labels=df.labels,\n    parents=df.parents,\n    domain=dict(column=1),\n    maxdepth=2,\n    insidetextorientation='radial'\n))\n\nfig.update_layout(\n    margin = dict(t=10, l=10, r=10, b=10)\n)\n\nfig.show()","fd5ecf32":"import plotly.graph_objects as go\nimport pandas as pd\n\ndf = pd.read_csv('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/718417069ead87650b90472464c7565dc8c2cb1c\/sunburst-coffee-flavors-complete.csv')\n\nfig = go.Figure(go.Sunburst(\n        ids = df.ids,\n        labels = df.labels,\n        parents = df.parents))\nfig.update_layout(uniformtext=dict(minsize=10, mode='hide'))\nfig.show()","6ae5f0c1":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport pandas as pd\n\ndf = pd.read_csv('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/sales_success.csv')\nprint(df.head())\n\nlevels = ['salesperson', 'county', 'region'] # levels used for the hierarchical chart\ncolor_columns = ['sales', 'calls']\nvalue_column = 'calls'\n\ndef build_hierarchical_dataframe(df, levels, value_column, color_columns=None):\n    \"\"\"\n    Build a hierarchy of levels for Sunburst or Treemap charts.\n\n    Levels are given starting from the bottom to the top of the hierarchy,\n    ie the last level corresponds to the root.\n    \"\"\"\n    df_all_trees = pd.DataFrame(columns=['id', 'parent', 'value', 'color'])\n    for i, level in enumerate(levels):\n        df_tree = pd.DataFrame(columns=['id', 'parent', 'value', 'color'])\n        dfg = df.groupby(levels[i:]).sum()\n        dfg = dfg.reset_index()\n        df_tree['id'] = dfg[level].copy()\n        if i < len(levels) - 1:\n            df_tree['parent'] = dfg[levels[i+1]].copy()\n        else:\n            df_tree['parent'] = 'total'\n        df_tree['value'] = dfg[value_column]\n        df_tree['color'] = dfg[color_columns[0]] \/ dfg[color_columns[1]]\n        df_all_trees = df_all_trees.append(df_tree, ignore_index=True)\n    total = pd.Series(dict(id='total', parent='',\n                              value=df[value_column].sum(),\n                              color=df[color_columns[0]].sum() \/ df[color_columns[1]].sum()))\n    df_all_trees = df_all_trees.append(total, ignore_index=True)\n    return df_all_trees\n\n\ndf_all_trees = build_hierarchical_dataframe(df, levels, value_column, color_columns)\naverage_score = df['sales'].sum() \/ df['calls'].sum()\n\nfig = make_subplots(1, 2, specs=[[{\"type\": \"domain\"}, {\"type\": \"domain\"}]],)\n\nfig.add_trace(go.Sunburst(\n    labels=df_all_trees['id'],\n    parents=df_all_trees['parent'],\n    values=df_all_trees['value'],\n    branchvalues='total',\n    marker=dict(\n        colors=df_all_trees['color'],\n        colorscale='RdBu',\n        cmid=average_score),\n    hovertemplate='<b>%{label} <\/b> <br> Sales: %{value}<br> Success rate: %{color:.2f}',\n    name=''\n    ), 1, 1)\n\nfig.add_trace(go.Sunburst(\n    labels=df_all_trees['id'],\n    parents=df_all_trees['parent'],\n    values=df_all_trees['value'],\n    branchvalues='total',\n    marker=dict(\n        colors=df_all_trees['color'],\n        colorscale='RdBu',\n        cmid=average_score),\n    hovertemplate='<b>%{label} <\/b> <br> Sales: %{value}<br> Success rate: %{color:.2f}',\n    maxdepth=2\n    ), 1, 2)\n\nfig.update_layout(margin=dict(t=10, b=10, r=10, l=10))\nfig.show()","eb0142e3":"import plotly.graph_objects as go\n\nfig = go.Figure(data=[go.Table(header=dict(values=['A Scores', 'B Scores']),\n                 cells=dict(values=[[100, 90, 80, 90], [95, 85, 75, 95]]))\n                     ])\nfig.show()","d830d190":"import plotly.graph_objects as go\n\nfig = go.Figure(data=[go.Table(\n    header=dict(values=['A Scores', 'B Scores'],\n                line_color='darkslategray',\n                fill_color='lightskyblue',\n                align='left'),\n    cells=dict(values=[[100, 90, 80, 90], # 1st column\n                       [95, 85, 75, 95]], # 2nd column\n               line_color='darkslategray',\n               fill_color='lightcyan',\n               align='left'))\n])\n\nfig.update_layout(width=500, height=300)\nfig.show()","ec4ec516":"import plotly.graph_objects as go\nimport pandas as pd\n\ndf = pd.read_csv('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/2014_usa_states.csv')\n\nfig = go.Figure(data=[go.Table(\n    header=dict(values=list(df.columns),\n                fill_color='paleturquoise',\n                align='left'),\n    cells=dict(values=[df.Rank, df.State, df.Postal, df.Population],\n               fill_color='lavender',\n               align='left'))\n])\n\nfig.show()","329a7f91":"import plotly.graph_objects as go\n\nvalues = [['Salaries', 'Office', 'Merchandise', 'Legal', '<b>TOTAL<br>EXPENSES<\/b>'], #1st col\n  [\"Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id usu aeterno adversarium, summo mollis timeam vel ad\",\n  \"Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id usu aeterno adversarium, summo mollis timeam vel ad\",\n  \"Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id usu aeterno adversarium, summo mollis timeam vel ad\",\n  \"Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id usu aeterno adversarium, summo mollis timeam vel ad\",\n  \"Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id usu aeterno adversarium, summo mollis timeam vel ad\"]]\n\n\nfig = go.Figure(data=[go.Table(\n  columnorder = [1,2],\n  columnwidth = [80,400],\n  header = dict(\n    values = [['<b>EXPENSES<\/b><br>as of July 2017'],\n                  ['<b>DESCRIPTION<\/b>']],\n    line_color='darkslategray',\n    fill_color='royalblue',\n    align=['left','center'],\n    font=dict(color='white', size=12),\n    height=40\n  ),\n  cells=dict(\n    values=values,\n    line_color='darkslategray',\n    fill=dict(color=['paleturquoise', 'white']),\n    align=['left', 'center'],\n    font_size=12,\n    height=30)\n    )\n])\nfig.show()","c17e9e8f":"import plotly.graph_objects as go\n\nheaderColor = 'grey'\nrowEvenColor = 'lightgrey'\nrowOddColor = 'white'\n\nfig = go.Figure(data=[go.Table(\n  header=dict(\n    values=['<b>EXPENSES<\/b>','<b>Q1<\/b>','<b>Q2<\/b>','<b>Q3<\/b>','<b>Q4<\/b>'],\n    line_color='darkslategray',\n    fill_color=headerColor,\n    align=['left','center'],\n    font=dict(color='white', size=12)\n  ),\n  cells=dict(\n    values=[\n      ['Salaries', 'Office', 'Merchandise', 'Legal', '<b>TOTAL<\/b>'],\n      [1200000, 20000, 80000, 2000, 12120000],\n      [1300000, 20000, 70000, 2000, 130902000],\n      [1300000, 20000, 120000, 2000, 131222000],\n      [1400000, 20000, 90000, 2000, 14102000]],\n    line_color='darkslategray',\n    # 2-D list of colors for alternating rows\n    fill_color = [[rowOddColor,rowEvenColor,rowOddColor, rowEvenColor,rowOddColor]*5],\n    align = ['left', 'center'],\n    font = dict(color = 'darkslategray', size = 11)\n    ))\n])\n\nfig.show()","a3b3fa80":"import plotly.graph_objects as go\n\nimport pandas as pd\n\ncolors = ['rgb(239, 243, 255)', 'rgb(189, 215, 231)', 'rgb(107, 174, 214)',\n          'rgb(49, 130, 189)', 'rgb(8, 81, 156)']\ndata = {'Year' : [2010, 2011, 2012, 2013, 2014], 'Color' : colors}\ndf = pd.DataFrame(data)\n\nfig = go.Figure(data=[go.Table(\n  header=dict(\n    values=[\"Color\", \"<b>YEAR<\/b>\"],\n    line_color='white', fill_color='white',\n    align='center', font=dict(color='black', size=12)\n  ),\n  cells=dict(\n    values=[df.Color, df.Year],\n    line_color=[df.Color], fill_color=[df.Color],\n    align='center', font=dict(color='black', size=11)\n  ))\n])\n\nfig.show()","4bb47ee1":"import plotly.graph_objects as go\nfrom plotly.colors import n_colors\nimport numpy as np\nnp.random.seed(1)\n\ncolors = n_colors('rgb(255, 200, 200)', 'rgb(200, 0, 0)', 9, colortype='rgb')\na = np.random.randint(low=0, high=9, size=10)\nb = np.random.randint(low=0, high=9, size=10)\nc = np.random.randint(low=0, high=9, size=10)\n\nfig = go.Figure(data=[go.Table(\n  header=dict(\n    values=['<b>Column A<\/b>', '<b>Column B<\/b>', '<b>Column C<\/b>'],\n    line_color='white', fill_color='white',\n    align='center',font=dict(color='black', size=12)\n  ),\n  cells=dict(\n    values=[a, b, c],\n    line_color=[np.array(colors)[a],np.array(colors)[b], np.array(colors)[c]],\n    fill_color=[np.array(colors)[a],np.array(colors)[b], np.array(colors)[c]],\n    align='center', font=dict(color='white', size=11)\n    ))\n])\n\nfig.show()","84d5269e":"import plotly.graph_objects as go\n\nfig = go.Figure(data=[go.Sankey(\n    node = dict(\n      pad = 15,\n      thickness = 20,\n      line = dict(color = \"black\", width = 0.5),\n      label = [\"A1\", \"A2\", \"B1\", \"B2\", \"C1\", \"C2\"],\n      color = \"blue\"\n    ),\n    link = dict(\n      source = [0, 1, 0, 2, 3, 3], # indices correspond to labels, eg A1, A2, A2, B1, ...\n      target = [2, 3, 3, 4, 4, 5],\n      value = [8, 4, 2, 8, 4, 2]\n  ))])\n\nfig.update_layout(title_text=\"Basic Sankey Diagram\", font_size=10)\nfig.show()","ee8ceb62":"import plotly.graph_objects as go\nimport urllib, json\n\nurl = 'https:\/\/raw.githubusercontent.com\/plotly\/plotly.js\/master\/test\/image\/mocks\/sankey_energy.json'\nresponse = urllib.request.urlopen(url)\ndata = json.loads(response.read())\n\n# override gray link colors with 'source' colors\nopacity = 0.4\n# change 'magenta' to its 'rgba' value to add opacity\ndata['data'][0]['node']['color'] = ['rgba(255,0,255, 0.8)' if color == \"magenta\" else color for color in data['data'][0]['node']['color']]\ndata['data'][0]['link']['color'] = [data['data'][0]['node']['color'][src].replace(\"0.8\", str(opacity))\n                                    for src in data['data'][0]['link']['source']]\n\nfig = go.Figure(data=[go.Sankey(\n    valueformat = \".0f\",\n    valuesuffix = \"TWh\",\n    # Define nodes\n    node = dict(\n      pad = 15,\n      thickness = 15,\n      line = dict(color = \"black\", width = 0.5),\n      label =  data['data'][0]['node']['label'],\n      color =  data['data'][0]['node']['color']\n    ),\n    # Add links\n    link = dict(\n      source =  data['data'][0]['link']['source'],\n      target =  data['data'][0]['link']['target'],\n      value =  data['data'][0]['link']['value'],\n      label =  data['data'][0]['link']['label'],\n      color =  data['data'][0]['link']['color']\n))])\n\nfig.update_layout(title_text=\"Energy forecast for 2050<br>Source: Department of Energy & Climate Change, Tom Counsell via <a href='https:\/\/bost.ocks.org\/mike\/sankey\/'>Mike Bostock<\/a>\",\n                  font_size=10)\nfig.show()","c167efbb":"import plotly.graph_objects as go\nimport urllib, json\n\nurl = 'https:\/\/raw.githubusercontent.com\/plotly\/plotly.js\/master\/test\/image\/mocks\/sankey_energy.json'\nresponse = urllib.request.urlopen(url)\ndata = json.loads(response.read())\n\nfig = go.Figure(data=[go.Sankey(\n    valueformat = \".0f\",\n    valuesuffix = \"TWh\",\n    node = dict(\n      pad = 15,\n      thickness = 15,\n      line = dict(color = \"black\", width = 0.5),\n      label =  data['data'][0]['node']['label'],\n      color =  data['data'][0]['node']['color']\n    ),\n    link = dict(\n      source =  data['data'][0]['link']['source'],\n      target =  data['data'][0]['link']['target'],\n      value =  data['data'][0]['link']['value'],\n      label =  data['data'][0]['link']['label']\n  ))])\n\nfig.update_layout(\n    hovermode = 'x',\n    title=\"Energy forecast for 2050<br>Source: Department of Energy & Climate Change, Tom Counsell via <a href='https:\/\/bost.ocks.org\/mike\/sankey\/'>Mike Bostock<\/a>\",\n    font=dict(size = 10, color = 'white'),\n    plot_bgcolor='black',\n    paper_bgcolor='black'\n)\n\nfig.show()","ffeff9d8":"import plotly.graph_objects as go\n\nfig = go.Figure(data=[go.Sankey(\n    node = dict(\n      pad = 15,\n      thickness = 20,\n      line = dict(color = \"black\", width = 0.5),\n      label = [\"A1\", \"A2\", \"B1\", \"B2\", \"C1\", \"C2\"],\n      customdata = [\"Long name A1\", \"Long name A2\", \"Long name B1\", \"Long name B2\",\n                    \"Long name C1\", \"Long name C2\"],\n      hovertemplate='Node %{customdata} has total value %{value}<extra><\/extra>',  \n      color = \"blue\"\n    ),\n    link = dict(\n      source = [0, 1, 0, 2, 3, 3], # indices correspond to labels, eg A1, A2, A2, B1, ...\n      target = [2, 3, 3, 4, 4, 5],\n      value = [8, 4, 2, 8, 4, 2],\n      customdata = [\"q\",\"r\",\"s\",\"t\",\"u\",\"v\"],\n      hovertemplate='Link from node %{source.customdata}<br \/>'+\n        'to node%{target.customdata}<br \/>has value %{value}'+\n        '<br \/>and data %{customdata}<extra><\/extra>',  \n  ))])\n\nfig.update_layout(title_text=\"Basic Sankey Diagram\", font_size=10)\nfig.show()","993da97b":"import plotly.graph_objects as go\n\nfig = go.Figure(go.Sankey(\n    arrangement = \"snap\",\n    node = {\n        \"label\": [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"],\n        \"x\": [0.2, 0.1, 0.5, 0.7, 0.3, 0.5],\n        \"y\": [0.7, 0.5, 0.2, 0.4, 0.2, 0.3],\n        'pad':10},  # 10 Pixels\n    link = {\n        \"source\": [0, 0, 1, 2, 5, 4, 3, 5],\n        \"target\": [5, 3, 4, 3, 0, 2, 2, 3],\n        \"value\": [1, 2, 1, 1, 1, 1, 1, 2]}))\n\nfig.show()","0b2abee7":"import plotly.express as px\nfig = px.treemap(\n    names = [\"Eve\",\"Cain\", \"Seth\", \"Enos\", \"Noam\", \"Abel\", \"Awan\", \"Enoch\", \"Azura\"],\n    parents = [\"\", \"Eve\", \"Eve\", \"Seth\", \"Seth\", \"Eve\", \"Eve\", \"Awan\", \"Eve\"]\n)\nfig.show()","bacc324c":"import plotly.express as px\ndf = px.data.tips()\nfig = px.treemap(df, path=['day', 'time', 'sex'], values='total_bill')\nfig.show()","4029ba49":"import plotly.express as px\nimport numpy as np\ndf = px.data.gapminder().query(\"year == 2007\")\ndf[\"world\"] = \"world\" # in order to have a single root node\nfig = px.treemap(df, path=['world', 'continent', 'country'], values='pop',\n                  color='lifeExp', hover_data=['iso_alpha'],\n                  color_continuous_scale='RdBu',\n                  color_continuous_midpoint=np.average(df['lifeExp'], weights=df['pop']))\nfig.show()","64abae8a":"import plotly.express as px\ndf = px.data.tips()\ndf[\"all\"] = \"all\" # in order to have a single root node\nfig = px.treemap(df, path=['all', 'sex', 'day', 'time'], values='total_bill', color='day')\nfig.show()","51f24efc":"import plotly.express as px\ndf = px.data.tips()\ndf[\"all\"] = \"all\" # in order to have a single root node\nfig = px.treemap(df, path=['all', 'sex', 'day', 'time'], values='total_bill', color='time')\nfig.show()","f65ca975":"import plotly.express as px\ndf = px.data.tips()\nfig = px.treemap(df, path=['sex', 'day', 'time'], values='total_bill', color='time',\n                  color_discrete_map={'(?)':'black', 'Lunch':'gold', 'Dinner':'darkblue'})\nfig.show()","7dd6dba5":"import plotly.express as px\nimport pandas as pd\nvendors = [\"A\", \"B\", \"C\", \"D\", None, \"E\", \"F\", \"G\", \"H\", None]\nsectors = [\"Tech\", \"Tech\", \"Finance\", \"Finance\", \"Other\",\n           \"Tech\", \"Tech\", \"Finance\", \"Finance\", \"Other\"]\nregions = [\"North\", \"North\", \"North\", \"North\", \"North\",\n           \"South\", \"South\", \"South\", \"South\", \"South\"]\nsales = [1, 3, 2, 4, 1, 2, 2, 1, 4, 1]\ndf = pd.DataFrame(\n    dict(vendors=vendors, sectors=sectors, regions=regions, sales=sales)\n)\ndf[\"all\"] = \"all\" # in order to have a single root node\nprint(df)\nfig = px.treemap(df, path=['all', 'regions', 'sectors', 'vendors'], values='sales')\nfig.show()","f1f6f9ee":"import plotly.express as px\n\nimport pandas as pd\nimport numpy as np\nnp.random.seed(1)\n\nN = 100000\n\ndf = pd.DataFrame(dict(x=np.random.randn(N),\n                       y=np.random.randn(N)))\n\nfig = px.scatter(df, x=\"x\", y=\"y\", render_mode='webgl')\n\nfig.update_traces(marker_line=dict(width=1, color='DarkSlateGray'))\n\nfig.show()","43d6afa8":"import plotly.graph_objects as go\n\nimport numpy as np\n\nN = 100000\n\n# Create figure\nfig = go.Figure()\n\nfig.add_trace(\n    go.Scattergl(\n        x = np.random.randn(N),\n        y = np.random.randn(N),\n        mode = 'markers',\n        marker = dict(\n            line = dict(\n                width = 1,\n                color = 'DarkSlateGrey')\n        )\n    )\n)\n\nfig.show()","cadd5084":"import plotly.graph_objects as go\n\nimport numpy as np\n\nN = 1000000\n\n# Create figure\nfig = go.Figure()\n\nfig.add_trace(\n    go.Scattergl(\n        x = np.random.randn(N),\n        y = np.random.randn(N),\n        mode = 'markers',\n        marker = dict(\n            line = dict(\n                width = 1,\n                color = 'DarkSlateGrey')\n        )\n    )\n)\n\nfig.show()","e22896c5":"import plotly.graph_objects as go\n\nimport numpy as np\n\nfig = go.Figure()\n\ntrace_num = 10\npoint_num = 5000\nfor i in range(trace_num):\n    fig.add_trace(\n        go.Scattergl(\n                x = np.linspace(0, 1, point_num),\n                y = np.random.randn(point_num)+(i*5)\n        )\n    )\n\nfig.update_layout(showlegend=False)\n\nfig.show()\n\n","5c75390c":"import plotly.figure_factory as ff\n\ndata_matrix = [['Country', 'Year', 'Population'],\n               ['United States', 2000, 282200000],\n               ['Canada', 2000, 27790000],\n               ['United States', 2005, 295500000],\n               ['Canada', 2005, 32310000],\n               ['United States', 2010, 309000000],\n               ['Canada', 2010, 34000000]]\n\nfig = ff.create_table(data_matrix)\nfig.show()","86d51ca9":"import plotly.figure_factory as ff\n\ndata_matrix = [['User', 'Language', 'Chart Type', '# of Views'],\n               ['<a href=\"https:\/\/plotly.com\/~empet\/folder\/home\">empet<\/a>',\n                '<a href=\"https:\/\/plotly.com\/python\/\">Python<\/a>',\n                '<a href=\"https:\/\/plotly.com\/~empet\/8614\/\">Network Graph<\/a>',\n                298],\n               ['<a href=\"https:\/\/plotly.com\/~Grondo\/folder\/home\">Grondo<\/a>',\n                '<a href=\"https:\/\/plotly.com\/matlab\/\">Matlab<\/a>',\n                '<a href=\"https:\/\/plotly.com\/~Grondo\/42\/\">Subplots<\/a>',\n                356],\n               ['<a href=\"https:\/\/plotly.com\/~Dreamshot\/folder\/home\">Dreamshot<\/a>',\n                '<a href=\"https:\/\/help.plot.ly\/tutorials\/\">Web App<\/a>',\n                '<a href=\"https:\/\/plotly.com\/~Dreamshot\/6575\/_2014-us-city-populations\/\">Bubble Map<\/a>',\n                262],\n               ['<a href=\"https:\/\/plotly.com\/~FiveThirtyEight\/folder\/home\">FiveThirtyEight<\/a>',\n                '<a href=\"https:\/\/help.plot.ly\/tutorials\/\">Web App<\/a>',\n                '<a href=\"https:\/\/plotly.com\/~FiveThirtyEight\/30\/\">Scatter<\/a>',\n                692],\n               ['<a href=\"https:\/\/plotly.com\/~cpsievert\/folder\/home\">cpsievert<\/a>',\n                '<a href=\"https:\/\/plotly.com\/r\/\">R<\/a>',\n                '<a href=\"https:\/\/plotly.com\/~cpsievert\/1130\/\">Surface<\/a>',\n                302]]\n\nfig = ff.create_table(data_matrix)\nfig.show()","cf742231":"import plotly.figure_factory as ff\n\ndata_matrix = [['Name', 'Equation'],\n               ['Pythagorean Theorem', '$a^{2}+b^{2}=c^{2}$'],\n               ['Euler\\'s Formula', '$F-E+V=2$'],\n               ['The Origin of Complex Numbers', '$i^{2}=-1$'],\n               ['Einstein\\'s Theory of Relativity', '$E=m c^{2}$']]\n\nfig =  ff.create_table(data_matrix)\nfig.show()","6d3c8160":"import plotly.figure_factory as ff\n\nimport pandas as pd\n\ndf = pd.read_csv('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/gapminderDataFiveYear.csv')\ndf_sample = df[100:120]\n\nfig =  ff.create_table(df_sample)\nfig.show()","80abd1de":"import plotly.figure_factory as ff\n\ndata_matrix = [['Country', 'Year', 'Population'],\n               ['United States', 2000, 282200000],\n               ['Canada', 2000, 27790000],\n               ['United States', 2005, 295500000],\n               ['Canada', 2005, 32310000],\n               ['United States', 2010, 309000000],\n               ['Canada', 2010, 34000000]]\n\nfig =  ff.create_table(data_matrix, height_constant=20)\nfig.show()","6e745d4f":"import plotly.figure_factory as ff\n\nimport pandas as pd\n\ndf = pd.read_csv('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/gapminderDataFiveYear.csv')\ndf_sample = df[400:410]\n\ncolorscale = [[0, '#4d004c'],[.5, '#f2e5ff'],[1, '#ffffff']]\n\nfig =  ff.create_table(df_sample, colorscale=colorscale)\n\nfig.show()\n\n","d6081633":"import plotly.figure_factory as ff\n\ntext = [['Team', 'Rank'], ['A', 1], ['B', 2], ['C', 3], ['D', 4], ['E', 5], ['F', 6]]\n\ncolorscale = [[0, '#272D31'],[.5, '#ffffff'],[1, '#ffffff']]\nfont=['#FCFCFC', '#00EE00', '#008B00', '#004F00', '#660000', '#CD0000', '#FF3030']\n\nfig = ff.create_table(text, colorscale=colorscale, font_colors=font)\nfig.layout.width=250\nfig.show()","9e9ddf15":"import plotly.figure_factory as ff\n\ndata_matrix = [['Country', 'Year', 'Population'],\n               ['United States', 2000, 282200000],\n               ['Canada', 2000, 27790000],\n               ['United States', 2005, 295500000],\n               ['Canada', 2005, 32310000],\n               ['United States', 2010, 309000000],\n               ['Canada', 2010, 34000000]]\n\nfig = ff.create_table(data_matrix, index=True)\n\n# Make text size larger\nfor i in range(len(fig.layout.annotations)):\n    fig.layout.annotations[i].font.size = 20\n\nfig.show()","9ceb5e88":"import plotly.graph_objs as go\nimport plotly.figure_factory as ff\n\n# Add table data\ntable_data = [['Team', 'Wins', 'Losses', 'Ties'],\n              ['Montr\u00e9al<br>Canadiens', 18, 4, 0],\n              ['Dallas Stars', 18, 5, 0],\n              ['NY Rangers', 16, 5, 0],\n              ['Boston<br>Bruins', 13, 8, 0],\n              ['Chicago<br>Blackhawks', 13, 8, 0],\n              ['LA Kings', 13, 8, 0],\n              ['Ottawa<br>Senators', 12, 5, 0]]\n# Initialize a figure with ff.create_table(table_data)\nfig = ff.create_table(table_data, height_constant=60)\n\n# Add graph data\nteams = ['Montr\u00e9al Canadiens', 'Dallas Stars', 'NY Rangers',\n         'Boston Bruins', 'Chicago Blackhawks', 'LA Kings', 'Ottawa Senators']\nGFPG = [3.54, 3.48, 3.0, 3.27, 2.83, 2.45, 3.18]\nGAPG = [2.17, 2.57, 2.0, 2.91, 2.57, 2.14, 2.77]\n# Make traces for graph\nfig.add_trace(go.Scatter(x=teams, y=GFPG,\n                    marker=dict(color='#0099ff'),\n                    name='Goals For<br>Per Game',\n                    xaxis='x2', yaxis='y2'))\nfig.add_trace(go.Scatter(x=teams, y=GAPG,\n                    marker=dict(color='#404040'),\n                    name='Goals Against<br>Per Game',\n                    xaxis='x2', yaxis='y2'))\n\nfig.update_layout(\n    title_text = '2016 Hockey Stats',\n    margin = {'t':50, 'b':100},\n    xaxis = {'domain': [0, .5]},\n    xaxis2 = {'domain': [0.6, 1.]},\n    yaxis2 = {'anchor': 'x2', 'title': 'Goals'}\n)\n\nfig.show()","1366695b":"import plotly.graph_objs as go\nimport plotly.figure_factory as ff\n\n# Add table data\ntable_data = [['Team', 'Wins', 'Losses', 'Ties'],\n              ['Montr\u00e9al<br>Canadiens', 18, 4, 0],\n              ['Dallas Stars', 18, 5, 0],\n              ['NY Rangers', 16, 5, 0],\n              ['Boston<br>Bruins', 13, 8, 0],\n              ['Chicago<br>Blackhawks', 13, 8, 0],\n              ['Ottawa<br>Senators', 12, 5, 0]]\n# Initialize a fig with ff.create_table(table_data)\nfig = ff.create_table(table_data, height_constant=60)\n\n# Add graph data\nteams = ['Montr\u00e9al Canadiens', 'Dallas Stars', 'NY Rangers',\n         'Boston Bruins', 'Chicago Blackhawks', 'Ottawa Senators']\nGFPG = [3.54, 3.48, 3.0, 3.27, 2.83, 3.18]\nGAPG = [2.17, 2.57, 2.0, 2.91, 2.57, 2.77]\n\nfig.add_trace(go.Bar(x=teams, y=GFPG, xaxis='x2', yaxis='y2',\n                marker=dict(color='#0099ff'),\n                name='Goals For<br>Per Game'))\n\nfig.add_trace(go.Bar(x=teams, y=GAPG, xaxis='x2', yaxis='y2',\n                marker=dict(color='#404040'),\n                name='Goals Against<br>Per Game'))\n\nfig.update_layout(\n    title_text = '2016 Hockey Stats',\n    height = 800,\n    margin = {'t':75, 'l':50},\n    yaxis = {'domain': [0, .45]},\n    xaxis2 = {'anchor': 'y2'},\n    yaxis2 = {'domain': [.6, 1], 'anchor': 'x2', 'title': 'Goals'}\n)\n\nfig.show()","c808cbff":"---\n---\n\n> <center><font color=\"yellow\"><h1 style=\"text-transform: uppercase; text-shadow: 1px 1px;\"><b>Style Scatter Plots<font size=5><\/font> <\/b><\/h1><\/center>\n\n\n---\n---","f455d903":"# Filled area plot","81aaacba":"## Using an explicit mapping for discrete colors","5eb81249":"# WebGL ","b491d9d8":"## Select Hover Points","6b8a8096":"## More complex Sankey diagram with colored links","9d3e7b9a":"## Changing Row and Column Size","f7d1d081":"## Bar Chart with Relative Barmode","537c4f9a":"## Bar Charts With Multicategory Axis Type","34304a9f":"## Pie Charts in subplots","d3cd39c5":"## Interior Filling for Area Chart","cc8c569b":"---\n---\n\n> <center><font color=\"yellow\"><h1 style=\"text-transform: uppercase; text-shadow: 1px 1px;\"><b>Line and Scatter Plots<font size=5><\/font> <\/b><\/h1><\/center>\n\n\n---\n---","08e0286c":"## Sunburst of a rectangular DataFrame","6f1df255":"## Row Color Based on Variable","05b85832":"## Deprecated Figure Factory","d804d629":"# Gantt Charts and Timelines","3ecc1d80":"## Treemap of a rectangular DataFrame","d30a17ee":"# Treemap","feb5be33":"## Customizing Individual Bar Colors","5b5f06a2":"## Controlling text fontsize with uniformtext","d20e3b23":"---\n---\n\n> <center><font color=\"yellow\"><h1 style=\"text-transform: uppercase; text-shadow: 1px 1px;\"><b>Set size and color with column names<font size=5><\/font> <\/b><\/h1><\/center>\n\n\n---\n---","d57831f0":"---\n---\n\n> <center><font color=\"yellow\"><h1 style=\"text-transform: uppercase; text-shadow: 1px 1px;\"><b>Large Data Sets<font size=5><\/font> <\/b><\/h1><\/center>\n\n\n---\n---","6907a6ce":"## Color Palette for Bar Chart","1bca3722":"## Rotated Bar Chart Labels","269ca2c3":"---\n---\n\n><center><img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/3\/37\/Plotly-logo-01-square.png\/1200px-Plotly-logo-01-square.png\"><\/center>\n\n---\n---","c6ebc9ea":"## Use a Pandas Dataframe","f9db8c2d":"## Cell Color Based on Variable","6a0fa5f8":"## Stacked Area Chart","d554542a":"# Donut Chart","97a2fc84":"## Controlling text fontsize with uniformtext","12815fa8":"## Custom Table Colors","0a5f129f":"# Bar chart","b3062f66":"## Color by Numeric Variable","aea3130e":"## Customizing Individual","b34deb81":"## Customize bar chart","de184418":"---\n---\n\n> <center><font color=\"yellow\"><h1 style=\"text-transform: uppercase; text-shadow: 1px 1px;\"><b>Interpolation with Line Plots<font size=5><\/font> <\/b><\/h1><\/center>\n\n\n---\n---","fc90047a":"# Sunburst Plot","cb5c53a6":"## Bar Chart with Direct Labels","b85e70e2":"---\n---\n\n> <center><font color=\"yellow\"><h1 style=\"text-transform: uppercase; text-shadow: 1px 1px;\"><b>Scatter plot <font><\/font> <\/b><\/h1><\/center>\n\n\n---\n","faebb594":"## Modify Row Height","08767670":"---\n---\n\n> <center><font color=\"yellow\"><h1 style=\"text-transform: uppercase; text-shadow: 1px 1px;\"><b>Data Labels on Hover<font size=5><\/font> <\/b><\/h1><\/center>\n\n\n---\n---","acb70aae":"---\n---\n\n> <center><font color=\"yellow\"><h1 style=\"text-transform: uppercase; text-shadow: 1px 1px;\"><b>Scatter with a Color Dimension<font size=5><\/font> <\/b><\/h1><\/center>\n\n\n---\n---","b53c5609":"---\n---\n\n> <center><font color=\"yellow\"><h1 style=\"text-transform: uppercase; text-shadow: 1px 1px;\"><b>Line Plot with column encoding color<font size=5><\/font> <\/b><\/h1><\/center>\n\n\n---\n---","06bb4f46":"# Dot Plot","dae464bf":"# Branchvalues","b8e4bfbe":"## Facetted subplots","0d3ff4c6":"# Pie chart","974db417":"## Styled Table","9506ee5f":"## Use LaTeX","cdeda580":"## Grouped Bar Chart","733935fd":"## Group Tasks Together","03e9a635":"## Hovertemplate and customdata","223bedc7":"## Pie chart with repeated labels","00819b56":"## Define Node Position","a5f39dcc":"## Colored Horizontal Bar Chart","edbdfe16":"## Bar chart with Wide Format Data","7b3e0320":"---\n---\n\n> <center><font color=\"yellow\"><h1 style=\"text-transform: uppercase; text-shadow: 1px 1px;\"><b>Line and Scatter Plots<font size=5><\/font> <\/b><\/h1><\/center>\n\n\n---\n---","7af873ed":"# Figure Factory Tables","7615764c":"## Sankey Diagram","3347ff0d":"## Large Number of Slices","80339937":"## Controlling text orientation inside sunburst sectors","ffc6c081":"## Add Links","c9b39388":"## Alternating Row Colors","8f956cc0":"## Custom Font Colors","d473d98b":"## Change Font Size","1c3df875":"## Stacked Area Chart with Normalized Values","50dab62b":"# Horizontal Bar","155a2bac":"## Bar Chart with Sorted or Ordered Categories","30880743":"## Treemap of a rectangular DataFrame with discrete color argument","ee2a4478":"## Bar chart with Long Format Data","7ecf43f6":"## Colored and Styled","4567ffef":"## Using an explicit mapping for discrete colors","98091062":"## Tables with Graphs","59f87cdd":"## Sunburst chart with a continuous colorscale","5a382906":"## Rectangular data with missing values","4ac2ea9d":"---\n---\n\n> <center><font color=\"yellow\"><h1 style=\"text-transform: uppercase; text-shadow: 1px 1px;\"><b>Label Lines with Annotations<font size=5><\/font> <\/b><\/h1><\/center>\n\n\n---\n---","83cb5398":"## Treemap of a rectangular DataFrame with continuous color argument","2a97369a":"## Bar Chart with Hover Text","ffb55ecd":"## Plot chart with area proportional to total count","8a538fff":"# Table","686a63f4":"## Setting the color of pie sectors","da1775a2":"## Filled Lines","bf662df5":"---\n---\n\n> <center><font color=\"yellow\"><h1 style=\"text-transform: uppercase; text-shadow: 1px 1px;\"><b>Line Plot <font><\/font> <\/b><\/h1><\/center>\n\n\n---\n"}}