{"cell_type":{"1bb39c4e":"code","a7c439e0":"code","34f5c8d9":"code","63a0a267":"code","9d0d5bb5":"code","e26d57bf":"code","4e84bc53":"code","d5255be2":"code","a2b49d57":"code","c84580e2":"code","f2186b4d":"code","e3bffc60":"code","30de1dd8":"code","238eabc3":"code","725cc264":"code","3c341561":"code","7d2ce82c":"code","3b3706cb":"code","b6f9b9ce":"code","66d96d45":"code","04e97712":"code","2d3114c6":"code","58fe46d5":"code","648a5a47":"code","7f95fa00":"code","66d384b9":"code","fab0ba89":"code","4553cad1":"code","dc3b1ad1":"code","e30b3b7a":"code","176b1487":"code","bf3657a8":"code","47556e81":"code","07213ff8":"code","f3789e78":"code","45518e3b":"code","de315cf7":"code","76348ee9":"code","5abafce9":"code","da75310a":"code","469dd520":"code","d832a927":"code","e2a205ea":"code","81971ee9":"code","de3636bf":"code","b0e8b956":"code","4d71cfb6":"code","8cfbc770":"code","549fd0b4":"code","5e898c6e":"code","b0286592":"code","2b649bbd":"code","64097512":"code","93efc5c9":"code","eea8a197":"code","ee68f1e5":"code","29fb53be":"markdown","5b15c516":"markdown","ba8ce4d0":"markdown","43234077":"markdown","1b3e534f":"markdown","ad3f678e":"markdown","dfcf4358":"markdown","5953c128":"markdown","53bba283":"markdown","5dd80353":"markdown","a3ff4453":"markdown","8b0ea171":"markdown","2d8e2439":"markdown","c9489a08":"markdown","08eb437f":"markdown","7e7b30da":"markdown","3a6c64d0":"markdown","18a715fd":"markdown","c92f4b7b":"markdown","9f7fc23f":"markdown","576323f5":"markdown","71f16c92":"markdown","85d89159":"markdown","3f7de9b3":"markdown","2dde39c2":"markdown","306f3c85":"markdown"},"source":{"1bb39c4e":"import numpy as np\nimport pandas as pd \n\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(palette=sns.color_palette('Set2',9))\n\nfrom sklearn.preprocessing import LabelEncoder\n\nfrom xgboost import XGBRegressor","a7c439e0":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","34f5c8d9":"train_path='\/kaggle\/input\/competitive-data-science-predict-future-sales\/sales_train.csv'\ntest_path='\/kaggle\/input\/competitive-data-science-predict-future-sales\/test.csv'\ntrain=pd.read_csv(train_path)\ntest=pd.read_csv(test_path)\n\nitems_path='\/kaggle\/input\/competitive-data-science-predict-future-sales\/items.csv'\nitem_categories_path='\/kaggle\/input\/competitive-data-science-predict-future-sales\/item_categories.csv'\nshops_path='\/kaggle\/input\/competitive-data-science-predict-future-sales\/shops.csv'\nitems=pd.read_csv(items_path)\nitem_cat=pd.read_csv(item_categories_path)\nshops=pd.read_csv(shops_path)\n\nsample_submission_path='\/kaggle\/input\/competitive-data-science-predict-future-sales\/sample_submission.csv'\nsample_submission=pd.read_csv(sample_submission_path)","63a0a267":"def printinfo(df):\n    print('\\n\\n********info*********\\n\\n',df.info(),'\\n\\n********head*********\\n\\n',df.head(),'\\n\\n********describe*********\\n\\n',df.describe())","9d0d5bb5":"printinfo(train)","e26d57bf":"printinfo(test)","4e84bc53":"f1,ax1=plt.subplots(1,1,figsize=(10,2))\nsns.boxplot(x=train.item_cnt_day,ax=ax1)\nf2,ax2=plt.subplots(1,1,figsize=(10,2))\nsns.boxplot(x=train.item_price,ax=ax2)","d5255be2":"train=train[train.item_price<100000]\ntrain=train[train.item_cnt_day<1100]","a2b49d57":"train[train.item_price<0]","c84580e2":"median=train[(train.shop_id==32)&(train.item_id==2973)&(train.date_block_num==4)&(train.item_price>0)].median()\ntrain.loc[train.item_price<0,'item_price']=median","f2186b4d":"#duplicated shop id\ntrain.loc[train.shop_id == 0, 'shop_id'] = 57\ntest.loc[test.shop_id == 0, 'shop_id'] = 57\n\ntrain.loc[train.shop_id == 1, 'shop_id'] = 58\ntest.loc[test.shop_id == 1, 'shop_id'] = 58\n\ntrain.loc[train.shop_id == 10, 'shop_id'] = 11\ntest.loc[test.shop_id == 10, 'shop_id'] = 11","e3bffc60":"train[train.item_price.isnull()]","30de1dd8":"train[(train.item_id==2973)&(train.shop_id==32)]","238eabc3":"train.loc[train.item_price.isnull(),'item_price']=1249.0","725cc264":"shops.loc[shops.shop_name=='\u0421\u0435\u0440\u0433\u0438\u0435\u0432 \u041f\u043e\u0441\u0430\u0434 \u0422\u0426 \"7\u042f\"','shop_name']='\u0421\u0435\u0440\u0433\u0438\u0435\u0432\u041f\u043e\u0441\u0430\u0434 \u0422\u0426 \"7\u042f\"'\nshops['city']=shops['shop_name'].str.split(' ').map(lambda x:x[0])\nshops['city_code']=LabelEncoder().fit_transform(shops['city'])\nshops=shops[['shop_id','city_code']]","3c341561":"item_cat['split']=item_cat['item_category_name'].str.split('-')\nitem_cat['type']=item_cat['split'].map(lambda x:x[0].strip())\nitem_cat['type_code']=LabelEncoder().fit_transform(item_cat['type'])\n\ndef subtype(x):                         \n    if len(x)>2:                  #exception for Blu-Ray\n        return x[1].strip()+x[2].strip()\n    elif len(x)>1:\n        return x[1].strip()\n    else:\n        return x[0].strip()\nitem_cat['subtype']=item_cat['split'].map(subtype)\nitem_cat['subtype_code']=LabelEncoder().fit_transform(item_cat['subtype'])\nitem_cat=item_cat[['item_category_id','type_code','subtype_code']]","7d2ce82c":"items.drop(['item_name'],axis=1,inplace=True)","3b3706cb":"print('{} shops,{} items in {} test set rows '.format(test.shop_id.unique().shape[0],test.item_id.unique().shape[0],test.shape[0]))","b6f9b9ce":"new_items=len(set(test.item_id)-set(test.item_id).intersection(set(train.item_id)))\nprint('There are {} new items in test set'.format(new_items))","66d96d45":"from itertools import product\nmatrix=[]\ncols=['date_block_num','shop_id','item_id']\nfor i in range(34):\n    sales=train[train.date_block_num==i]\n    matrix.append(np.array(list(product([i],sales.shop_id.unique(),sales.item_id.unique()))))","04e97712":"matrix=pd.DataFrame(np.vstack(matrix),columns=cols)\nmatrix.sort_values(cols,inplace=True)","2d3114c6":"train['revenue']=train['item_price']*train['item_cnt_day']","58fe46d5":"group=train.groupby(['date_block_num','shop_id','item_id']).agg({'item_cnt_day':'sum'})\ngroup.columns=['item_cnt_month']\ngroup.reset_index(inplace=True)","648a5a47":"matrix=pd.merge(matrix,group,on=cols,how='left')\nmatrix['item_cnt_month']=matrix['item_cnt_month'].fillna(0).clip(0,20)","7f95fa00":"test['date_block_num']=34\ntest.drop(['ID'],axis=1,inplace=True)\nmatrix=pd.concat([matrix,test],ignore_index=True)\nmatrix['item_cnt_month'].fillna(0,inplace=True)","66d384b9":"matrix=pd.merge(matrix,shops,on='shop_id',how='left')   #add city code\nmatrix=pd.merge(matrix,items,on='item_id',how='left')   #add item cateogory","fab0ba89":"matrix=pd.merge(matrix,item_cat,on='item_category_id',how='left') #add type and subtype","4553cad1":"matrix[['date_block_num','shop_id','city_code',\n       'item_category_id','type_code','subtype_code']]=matrix[['date_block_num','shop_id','city_code',\n                                                             'item_category_id','type_code','subtype_code']].astype(np.int8)\nmatrix[['item_id']]=matrix[['item_id']].astype(np.int16)\nmatrix[['item_cnt_month']]=matrix[['item_cnt_month']].astype(np.float16)","dc3b1ad1":"matrix.info()","e30b3b7a":"def lag_feature(df,lags,col):\n    tmp=df[['date_block_num','shop_id','item_id',col]]\n    for i in lags:\n        shifted=tmp.copy()\n        shifted.columns=['date_block_num','shop_id','item_id',col+'_lag'+str(i)]\n        shifted['date_block_num']+=i\n        df=pd.merge(df,shifted,on=['date_block_num','shop_id','item_id'],how='left')\n    return df","176b1487":"matrix=lag_feature(matrix,[1,2,3,6,12],'item_cnt_month')  #add time lag feature","bf3657a8":"def add_mean_feature(df,addname,grouplist,time):   # df \/ ['addname']\/ ['list1','list2',...] \/[1,2,...]\n\n    group_tmp=df.groupby(grouplist).agg({'item_cnt_month':'mean'})\n    group_tmp.columns=addname\n    group_tmp.reset_index(inplace=True)\n    \n    df=pd.merge(df,group_tmp,on=grouplist,how='left')\n    df=lag_feature(df,time,addname[0])\n    df.drop(addname,axis=1,inplace=True)\n    \n    return df","47556e81":"matrix=add_mean_feature(matrix,['date_avg_item_cnt'],['date_block_num'],[1])\nmatrix=add_mean_feature(matrix,['date_item_avg_item_cnt'],['date_block_num','item_id'],[1,2,3,6,12])\nmatrix=add_mean_feature(matrix,['date_shop_avg_item_cnt'],['date_block_num','shop_id'],[1,2,3,6,12])\n\nmatrix=add_mean_feature(matrix,['date_cat_avg_item_cnt'],['date_block_num','item_category_id'],[1])\nmatrix=add_mean_feature(matrix,['date_type_avg_item_cnt'],['date_block_num','type_code'],[1])\nmatrix=add_mean_feature(matrix,['date_subtype_avg_item_cnt'],['date_block_num','subtype_code'],[1])\nmatrix=add_mean_feature(matrix,['date_city_avg_item_cnt'],['date_block_num','city_code'],[1])\n\nmatrix=add_mean_feature(matrix,['date_shop_cat_avg_item_cnt'],['date_block_num','shop_id','item_category_id'],[1])\nmatrix=add_mean_feature(matrix,['date_shop_type_avg_item_cnt'],['date_block_num','shop_id','type_code'],[1])\nmatrix=add_mean_feature(matrix,['date_shop_subtype_avg_item_cnt'],['date_block_num','shop_id','subtype_code'],[1])\n\nmatrix=add_mean_feature(matrix,['date_item_city_avg_item_cnt'],['date_block_num','item_id','city_code'],[1])","07213ff8":"train_f=train.drop(['date','item_cnt_day'],axis=1)\ntrain_f[['date_block_num','shop_id']]=train_f[['date_block_num','shop_id']].astype(np.int8)\ntrain_f[['item_id']]=train_f[['item_id']].astype(np.int16)\ntrain_f[['item_price','revenue']]=train_f[['item_price','revenue']].astype(np.float16)\ntrain_f.info()","f3789e78":"def add_price_feature(mat,df,addname,grouplist):   # mat\/ df \/ ['addname']\/ ['list1','list2',...]\n\n    group_tmp=df.groupby(grouplist).agg({'item_price':'mean'})\n    group_tmp.columns=addname\n    group_tmp[addname]=group_tmp[addname].astype(np.float16)\n    group_tmp.reset_index(inplace=True)\n    \n    mat=pd.merge(mat,group_tmp,on=grouplist,how='left')\n    \n    return mat","45518e3b":"matrix=add_price_feature(matrix,train_f,['item_avg_item_price'],['item_id'])\nmatrix=add_price_feature(matrix,train_f,['date_item_avg_item_price'],['date_block_num','item_id'])\n\nlags=[1,2,3,4,5,6]\nmatrix=lag_feature(matrix,lags,'date_item_avg_item_price')\nfor i in lags:\n    matrix['delta_price_lag'+str(i)]=(matrix['date_item_avg_item_price_lag'+str(i)]-matrix['item_avg_item_price'])\/matrix['item_avg_item_price']","de315cf7":"def select_trend(row):\n    for i in lags:\n        if row['delta_price_lag'+str(i)]:\n            return row['delta_price_lag'+str(i)]\n    return 0\n\nmatrix['delta_price_lag']=matrix.apply(select_trend,axis=1)\nmatrix['delta_price_lag'].fillna(0, inplace=True)\nmatrix['delta_price_lag']=matrix['delta_price_lag'].astype(np.float16)\n\ndrop_list=['item_avg_item_price','date_item_avg_item_price']\nfor i in lags:\n    drop_list.append('date_item_avg_item_price_lag'+str(i))\n    drop_list.append('delta_price_lag'+str(i))\nmatrix.drop(drop_list,axis=1,inplace=True)","76348ee9":"def fun_first_item_shop(x):\n    d={}\n    d['first_sale_item_shop']=x.loc[x.item_cnt_month>0,'date_block_num'].min()\n    return pd.Series(d)\ndef fun_first_item(x):\n    d={}\n    d['first_sale_item']=x.loc[x.item_cnt_month>0,'date_block_num'].min()\n    return pd.Series(d)\n\ndef first(mat):\n    group1=mat.groupby(['item_id','shop_id'])[['date_block_num','item_cnt_month','item_id','shop_id']].apply(fun_first_item_shop)\n    group2=mat.groupby(['item_id'])[['date_block_num','item_cnt_month','item_id','shop_id']].apply(fun_first_item)\n   \n    mat=pd.merge(mat,group1,on=['item_id','shop_id'],how='left')\n    mat=pd.merge(mat,group2,on=['item_id'],how='left')\n\n    mat['first_sale_item_shop_period']=mat['date_block_num']-mat['first_sale_item_shop']\n    mat['first_sale_item_period']=mat['date_block_num']-mat['first_sale_item']\n   \n    mat.loc[mat.first_sale_item_shop_period<0,'first_sale_item_shop_period']=0\n    mat.loc[mat.first_sale_item_period<0,'first_sale_item_period']=0\n    \n    mat.drop(['first_sale_item_shop','first_sale_item'],axis=1,inplace=True)\n    return mat","5abafce9":"def fun_last_item_shop(x):\n    d={}\n    d['last_sale_item_shop']=x.loc[x.item_cnt_month>0,'date_block_num'].max()\n    return pd.Series(d)\ndef fun_last_item(x):\n    d={}\n    d['last_sale_item']=x.loc[x.item_cnt_month>0,'date_block_num'].max()\n    return pd.Series(d)\n\ndef last(mat):\n    group1=mat.groupby(['item_id','shop_id'])[['date_block_num','item_cnt_month','item_id','shop_id']].apply(fun_last_item_shop)\n    group2=mat.groupby(['item_id'])[['date_block_num','item_cnt_month','item_id','shop_id']].apply(fun_last_item)\n    \n    mat=pd.merge(mat,group1,on=['item_id','shop_id'],how='left')\n    mat=pd.merge(mat,group2,on=['item_id'],how='left')\n    \n    mat['last_sale_item_shop_period']=mat['date_block_num']-mat['last_sale_item_shop']\n    mat['last_sale_item_period']=mat['date_block_num']-mat['last_sale_item']\n    \n    mat.loc[mat.last_sale_item_shop_period<0,'last_sale_item_shop_period']=0\n    mat.loc[mat.last_sale_item_period<0,'last_sale_item_period']=0\n    \n    mat.drop(['last_sale_item_shop','last_sale_item'],axis=1,inplace=True)\n    return mat","da75310a":"matrix=first(matrix)\nmatrix=last(matrix)","469dd520":"frls_list=['first_sale_item_shop_period','first_sale_item_period','last_sale_item_shop_period','last_sale_item_period']","d832a927":"matrix[frls_list]=matrix[frls_list].fillna(0)","e2a205ea":"matrix[frls_list]=matrix[frls_list].astype(np.int8)","81971ee9":"matrix['month'] = matrix['date_block_num'] % 12\n","de3636bf":"days = pd.Series([31,28,31,30,31,30,31,31,30,31,30,31])\nmatrix['days'] = matrix['month'].map(days).astype(np.int8)","b0e8b956":"matrix.to_pickle('data.pkl')\n","4d71cfb6":"data = pd.read_pickle('data.pkl')","8cfbc770":"data = data[data.date_block_num > 11]","549fd0b4":"for col in data.columns:\n    if '_lag' in col:\n        data[col].fillna(0,inplace=True)","5e898c6e":"data.info()","b0286592":"data=data[[\n 'date_block_num',\n 'shop_id',\n 'item_id',\n 'item_cnt_month',\n 'city_code',\n 'item_category_id',\n 'type_code',\n 'subtype_code',\n 'item_cnt_month_lag1',\n 'item_cnt_month_lag2',\n 'item_cnt_month_lag3',\n 'item_cnt_month_lag6',\n 'item_cnt_month_lag12',\n 'date_avg_item_cnt_lag1',\n 'date_item_avg_item_cnt_lag1',\n 'date_item_avg_item_cnt_lag2',\n 'date_item_avg_item_cnt_lag3',\n 'date_item_avg_item_cnt_lag6',\n 'date_item_avg_item_cnt_lag12',\n 'date_shop_avg_item_cnt_lag1',\n 'date_shop_avg_item_cnt_lag2',\n 'date_shop_avg_item_cnt_lag3',\n 'date_shop_avg_item_cnt_lag6',\n 'date_shop_avg_item_cnt_lag12',\n 'date_cat_avg_item_cnt_lag1',\n #'date_type_avg_item_cnt_lag1',\n #'date_subtype_avg_item_cnt_lag1',\n 'date_city_avg_item_cnt_lag1',\n 'date_shop_cat_avg_item_cnt_lag1',\n #'date_shop_type_avg_item_cnt_lag1',\n #'date_shop_subtype_avg_item_cnt_lag1',\n 'date_item_city_avg_item_cnt_lag1',\n 'delta_price_lag',\n 'first_sale_item_shop_period',\n 'first_sale_item_period',\n #'last_sale_item_shop_period',\n #'last_sale_item_period',\n 'month'\n]]","2b649bbd":"X_train = data[data.date_block_num < 33].drop(['item_cnt_month'], axis=1)\nY_train = data[data.date_block_num < 33]['item_cnt_month']\nX_valid = data[data.date_block_num == 33].drop(['item_cnt_month'], axis=1)\nY_valid = data[data.date_block_num == 33]['item_cnt_month']\nX_test = data[data.date_block_num == 34].drop(['item_cnt_month'], axis=1)","64097512":"from xgboost import XGBRegressor\n\nmodel = XGBRegressor(\n    tree_method='gpu_hist',\n    max_depth=8,\n    n_estimators=1000,\n    min_child_weight=300, \n    colsample_bytree=0.8, \n    subsample=0.8, \n    eta=0.3,    \n    random_state=42)","93efc5c9":"model.fit(\n    X_train, \n    Y_train, \n    \n    eval_set=[(X_train, Y_train), (X_valid, Y_valid)], \n    eval_metric=\"rmse\",\n    verbose=True, \n    early_stopping_rounds = 10)","eea8a197":"Y_pred = model.predict(X_valid).clip(0, 20)\nY_test = model.predict(X_test).clip(0, 20)\n\nsubmission = pd.DataFrame({\n    \"ID\": test.index, \n    \"item_cnt_month\": Y_test\n})\nsubmission.to_csv('xgb_submission.csv', index=False)","ee68f1e5":"from xgboost import plot_importance\nfig, ax = plt.subplots(1,1,figsize=(10,10))\nplot_importance(booster=model, ax=ax)","29fb53be":"# 1. Import Modules \/ Load Data","5b15c516":"Add revenue features","ba8ce4d0":"## 4.2 Concatenating Test Set","43234077":"# 6.Modeling","1b3e534f":"# 4. Merging Data","ad3f678e":"# 2. Outlier \/ NA Data Cleansing","dfcf4358":"#### item_category_names consist of type and subtype. \n#### Extract type and subtype and label it","5953c128":"## 2.2 NA Data","53bba283":"## 4.1 Data Augmentation","5dd80353":"Use only data_block_num>11 because we used time lag features which maximum is 12 months","a3ff4453":"#### fix data type to reduce memory usage","8b0ea171":"# 3. Data Labeling","2d8e2439":"## 3.3 items","c9489a08":"#### Add time gap of first \/last sale of items\nIf one item sold on 2~17 month, first\/last sale time gap is 32\/17 on month 34","08eb437f":"### **mean variable index**\n* date      1\n* date item 1 2 3 6 12\n* date shop 1 2 3 6 12\n* \n* date item_category 1\n* date type          1\n* date subtype       1\n* date city          1\n* \n* date shop item_category 1\n* date shop type          1\n* date shop subtype       1\n* \n* date item city          1","7e7b30da":"## 5.2 Add Mean Features","3a6c64d0":"#### Each shop_name have their own city name in the first word.\n#### Extract city name and label it","18a715fd":"# Further","c92f4b7b":"## 5.1 Add Time Lag Features","9f7fc23f":"## 5.3 Add Trend Features","576323f5":"# 5. Feature Extraction","71f16c92":"## 3.2 item_categories","85d89159":"## 5.4 Add First\/Last Sale Features","3f7de9b3":"## 3.1 shops","2dde39c2":"## 5.5 Add Other Features","306f3c85":"## 2.1 Outlier"}}