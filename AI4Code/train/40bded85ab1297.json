{"cell_type":{"7fe9b18a":"code","a354b7d1":"code","b5a7d0f6":"code","d45e1d46":"code","77f41ef3":"code","966e5e84":"code","327162df":"code","05770da4":"code","ad55e9e0":"code","21b989b6":"code","765c63bb":"code","e1418f4a":"code","a53c4ea2":"code","6b28b530":"code","bbccdbac":"code","9174af5a":"code","8122a08f":"markdown","8d967ac7":"markdown","8ae5a2da":"markdown","c9591af7":"markdown","7a39b62e":"markdown","39178d5f":"markdown","438e3c13":"markdown","d0022631":"markdown","39b0488c":"markdown","e22e282d":"markdown","90f52c11":"markdown"},"source":{"7fe9b18a":"import warnings\nwarnings.filterwarnings('ignore')\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder\nfrom sklearn.model_selection import KFold, GridSearchCV\nfrom sklearn.linear_model import Ridge, Lasso, ElasticNet\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\n\n\nfrom sklearn.svm import SVR\n\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\n\nimport lightgbm as lgb\n\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import scale","a354b7d1":"data = pd.read_csv(\"..\/input\/train.csv\", index_col = \"Id\")","b5a7d0f6":"data.head()","d45e1d46":"# let's look at data briefly info\ndata['SalePrice'].describe()","77f41ef3":"# Now disturbtion of target variable\nplt.figure(figsize=(20, 5))\nplt.subplot(1, 2, 1)\nplt.title(\"Disturbtion of target\")\nsns.distplot(data['SalePrice']);\n\n# Now disturbtion of log(target) variable\nplt.subplot(1, 2, 2)\nplt.title(\"Disturbtion of log(target)\")\nsns.distplot(data['SalePrice'].apply(np.log));","966e5e84":"#skewness and kurtosis\nprint(\"Skewness: %f\" % data['SalePrice'].skew())\nprint(\"Kurtosis: %f\" % data['SalePrice'].kurt())","327162df":"# Create a pd.Series with log(SalePrice) \nlog_target = data['SalePrice'].apply(np.log)","05770da4":"plt.figure(figsize=(20, 5))\ncolumns_float  = list(data.loc[:, data.dtypes == np.float64].columns)\n\nfor num, var in enumerate(columns_float):\n    plt.subplot(1, len(columns_float), num + 1)\n    sns.regplot(x=data[var], y = log_target);","ad55e9e0":"plt.figure(figsize=(40, 40))\ncolumns_int = list(data.loc[:, data.dtypes == np.int64].columns)\ncolumns_plot = [ ]\n\nfor num, var in enumerate(columns_int):\n    if len(data[var].unique()) > 15:\n        columns_plot.append(var)\n\nfor num, var in enumerate(columns_plot):\n    plt.subplot(4, 5, num + 1)\n    df = pd.concat([log_target, data[var]], axis=1)\n    sns.regplot(x=data[var], y = log_target);","21b989b6":"#box plot overallqual\/saleprice\nplt.figure(figsize=(20, 20))\n\n\ncat_columns = ['YearBuilt', 'OverallQual']\nfor num, var in enumerate(cat_columns):\n    plt.subplot(2, 1, num + 1)\n    fig = sns.boxplot(x=var, y=log_target, data=data)\n    plt.xticks(rotation=90);","765c63bb":"# As suggested by many participants, we remove several outliers\ndata.drop(data[(data['OverallQual']<5) & (data['SalePrice']>200000)].index, inplace=True)\ndata.drop(data[(data['GrLivArea']>4000) & (data['SalePrice']<300000)].index, inplace=True)\ndata.reset_index(drop=True, inplace=True)\n\n# Some of the non-numeric predictors are stored as numbers; we convert them into strings \ndata['MSSubClass'] = data['MSSubClass'].apply(str)\ndata['YrSold'] = data['YrSold'].astype(str)\ndata['MoSold'] = data['MoSold'].astype(str)","e1418f4a":"# Here we create funtion which fills all the missing values\n# Pay attention that some of the missing values of numeric predictors first are filled in with zeros and then \n# small values are filled in with median\/average (and indicator variables are created to account for such change: \n# for each variable we create  which are equal to one);\n\ndef fill_missings(res):\n\n    res['Alley'] = res['Alley'].fillna('missing')\n    res['PoolQC'] = res['PoolQC'].fillna(res['PoolQC'].mode()[0])\n    res['MasVnrType'] = res['MasVnrType'].fillna('None')\n    res['BsmtQual'] = res['BsmtQual'].fillna(res['BsmtQual'].mode()[0])\n    res['BsmtCond'] = res['BsmtCond'].fillna(res['BsmtCond'].mode()[0])\n    res['FireplaceQu'] = res['FireplaceQu'].fillna(res['FireplaceQu'].mode()[0])\n    res['GarageType'] = res['GarageType'].fillna('missing')\n    res['GarageFinish'] = res['GarageFinish'].fillna(res['GarageFinish'].mode()[0])\n    res['GarageQual'] = res['GarageQual'].fillna(res['GarageQual'].mode()[0])\n    res['GarageCond'] = res['GarageCond'].fillna('missing')\n    res['Fence'] = res['Fence'].fillna('missing')\n    res['Street'] = res['Street'].fillna('missing')\n    res['LotShape'] = res['LotShape'].fillna('missing')\n    res['LandContour'] = res['LandContour'].fillna('missing')\n    res['BsmtExposure'] = res['BsmtExposure'].fillna(res['BsmtExposure'].mode()[0])\n    res['BsmtFinType1'] = res['BsmtFinType1'].fillna('missing')\n    res['BsmtFinType2'] = res['BsmtFinType2'].fillna('missing')\n    res['CentralAir'] = res['CentralAir'].fillna('missing')\n    res['Electrical'] = res['Electrical'].fillna(res['Electrical'].mode()[0])\n    res['MiscFeature'] = res['MiscFeature'].fillna('missing')\n    res['MSZoning'] = res['MSZoning'].fillna(res['MSZoning'].mode()[0])    \n    res['Utilities'] = res['Utilities'].fillna('missing')\n    res['Exterior1st'] = res['Exterior1st'].fillna(res['Exterior1st'].mode()[0])\n    res['Exterior2nd'] = res['Exterior2nd'].fillna(res['Exterior2nd'].mode()[0])    \n    res['KitchenQual'] = res['KitchenQual'].fillna(res['KitchenQual'].mode()[0])\n    res[\"Functional\"] = res[\"Functional\"].fillna(\"Typ\")\n    res['SaleType'] = res['SaleType'].fillna(res['SaleType'].mode()[0])\n    res['SaleCondition'] = res['SaleCondition'].fillna('missing')\n    \n    flist = ['LotFrontage','LotArea','MasVnrArea','BsmtFinSF1','BsmtFinSF2','BsmtUnfSF',\n                     'TotalBsmtSF','1stFlrSF','2ndFlrSF','LowQualFinSF','GrLivArea',\n                     'BsmtFullBath','BsmtHalfBath','FullBath','HalfBath','BedroomAbvGr','KitchenAbvGr',\n                     'TotRmsAbvGrd','Fireplaces','GarageCars','GarageArea','WoodDeckSF','OpenPorchSF',\n                     'EnclosedPorch','3SsnPorch','ScreenPorch','PoolArea','MiscVal']\n    for fl in flist:\n        res[fl] = res[fl].fillna(0)\n        \n    res['TotalBsmtSF'] = res['TotalBsmtSF'].apply(lambda x: np.exp(6) if x <= 0.0 else x)\n    res['2ndFlrSF'] = res['2ndFlrSF'].apply(lambda x: np.exp(6.5) if x <= 0.0 else x)\n    res['GarageArea'] = res['GarageArea'].apply(lambda x: np.exp(6) if x <= 0.0 else x)\n    res['GarageCars'] = res['GarageCars'].apply(lambda x: 0 if x <= 0.0 else x)\n    res['LotFrontage'] = res['LotFrontage'].apply(lambda x: np.exp(4.2) if x <= 0.0 else x)\n    res['MasVnrArea'] = res['MasVnrArea'].apply(lambda x: np.exp(4) if x <= 0.0 else x)\n    res['BsmtFinSF1'] = res['BsmtFinSF1'].apply(lambda x: np.exp(6.5) if x <= 0.0 else x)\n    \n      \n    return res","a53c4ea2":"# Running function to fill in missings\ndata = fill_missings(data)\ndata['TotalSF'] = data['TotalBsmtSF'] + data['1stFlrSF'] + data['2ndFlrSF']\n\n# Working with ordinal predictors\ndef QualToInt(x):\n    if(x=='Ex'):\n        r = 0\n    elif(x=='Gd'):\n        r = 1\n    elif(x=='TA'):\n        r = 2\n    elif(x=='Fa'):\n        r = 3\n    elif(x=='missing'):\n        r = 4\n    else:\n        r = 5\n    return r\n\ndata['ExterQual'] = data['ExterQual'].apply(QualToInt)\ndata['ExterCond'] = data['ExterCond'].apply(QualToInt)\ndata['KitchenQual'] = data['KitchenQual'].apply(QualToInt)\ndata['HeatingQC'] = data['HeatingQC'].apply(QualToInt)\ndata['BsmtQual'] = data['BsmtQual'].apply(QualToInt)\ndata['BsmtCond'] = data['BsmtCond'].apply(QualToInt)\ndata['FireplaceQu'] = data['FireplaceQu'].apply(QualToInt)\ndata['GarageQual'] = data['GarageQual'].apply(QualToInt)\ndata['PoolQC'] = data['PoolQC'].apply(QualToInt)\n\ndef SlopeToInt(x):\n    if(x=='Gtl'):\n        r = 0\n    elif(x=='Mod'):\n        r = 1\n    elif(x=='Sev'):\n        r = 2\n    else:\n        r = 3\n    return r\n\ndata['LandSlope'] = data['LandSlope'].apply(SlopeToInt)\ndata['CentralAir'] = data['CentralAir'].apply( lambda x: 0 if x == 'N' else 1) \ndata['Street'] = data['Street'].apply( lambda x: 0 if x == 'Pave' else 1) \ndata['PavedDrive'] = data['PavedDrive'].apply( lambda x: 0 if x == 'Y' else 1)\n\ndef GFinishToInt(x):\n    if(x=='Fin'):\n        r = 0\n    elif(x=='RFn'):\n        r = 1\n    elif(x=='Unf'):\n        r = 2\n    else:\n        r = 3\n    return r\n\ndata['GarageFinish'] = data['GarageFinish'].apply(GFinishToInt)\n\ndef BsmtExposureToInt(x):\n    if(x=='Gd'):\n        r = 0\n    elif(x=='Av'):\n        r = 1\n    elif(x=='Mn'):\n        r = 2\n    elif(x=='No'):\n        r = 3\n    else:\n        r = 4\n    return r\ndata['BsmtExposure'] = data['BsmtExposure'].apply(BsmtExposureToInt)\n\ndef FunctionalToInt(x):\n    if(x=='Typ'):\n        r = 0\n    elif(x=='Min1'):\n        r = 1\n    elif(x=='Min2'):\n        r = 1\n    else:\n        r = 2\n    return r\n\ndata['Functional_int'] = data['Functional'].apply(FunctionalToInt)\n\n\ndef HouseStyleToInt(x):\n    if(x=='1.5Unf'):\n        r = 0\n    elif(x=='SFoyer'):\n        r = 1\n    elif(x=='1.5Fin'):\n        r = 2\n    elif(x=='2.5Unf'):\n        r = 3\n    elif(x=='SLvl'):\n        r = 4\n    elif(x=='1Story'):\n        r = 5\n    elif(x=='2Story'):\n        r = 6  \n    elif(x==' 2.5Fin'):\n        r = 7          \n    else:\n        r = 8\n    return r\n\ndata['HouseStyle_int'] = data['HouseStyle'].apply(HouseStyleToInt)\ndata['HouseStyle_1st'] = 1*(data['HouseStyle'] == '1Story')\ndata['HouseStyle_2st'] = 1*(data['HouseStyle'] == '2Story')\ndata['HouseStyle_15st'] = 1*(data['HouseStyle'] == '1.5Fin')\n\ndef FoundationToInt(x):\n    if(x=='PConc'):\n        r = 3\n    elif(x=='CBlock'):\n        r = 2\n    elif(x=='BrkTil'):\n        r = 1        \n    else:\n        r = 0\n    return r\n\ndata['Foundation_int'] = data['Foundation'].apply(FoundationToInt)\n\ndef MasVnrTypeToInt(x):\n    if(x=='Stone'):\n        r = 3\n    elif(x=='BrkFace'):\n        r = 2\n    elif(x=='BrkCmn'):\n        r = 1        \n    else:\n        r = 0\n    return r\n\ndata['MasVnrType_int'] = data['MasVnrType'].apply(MasVnrTypeToInt)\n\ndef BsmtFinType1ToInt(x):\n    if(x=='GLQ'):\n        r = 6\n    elif(x=='ALQ'):\n        r = 5\n    elif(x=='BLQ'):\n        r = 4\n    elif(x=='Rec'):\n        r = 3   \n    elif(x=='LwQ'):\n        r = 2\n    elif(x=='Unf'):\n        r = 1        \n    else:\n        r = 0\n    return r\n\ndata['BsmtFinType1_int'] = data['BsmtFinType1'].apply(BsmtFinType1ToInt)\ndata['BsmtFinType1_Unf'] = 1*(data['BsmtFinType1'] == 'Unf')\ndata['HasWoodDeck'] = (data['WoodDeckSF'] == 0) * 1\ndata['HasOpenPorch'] = (data['OpenPorchSF'] == 0) * 1\ndata['HasEnclosedPorch'] = (data['EnclosedPorch'] == 0) * 1\ndata['Has3SsnPorch'] = (data['3SsnPorch'] == 0) * 1\ndata['HasScreenPorch'] = (data['ScreenPorch'] == 0) * 1\ndata['YearsSinceRemodel'] = data['YrSold'].astype(int) - data['YearRemodAdd'].astype(int)\ndata['Total_Home_Quality'] = data['OverallQual'] + data['OverallCond']","6b28b530":"def addlogs(res, ls):\n    m = res.shape[1]\n    for l in ls:\n        res = res.assign(newcol=pd.Series(np.log(1.01+res[l])).values)   \n        res.columns.values[m] = l + '_log'\n        m += 1\n    return res\n\nloglist = ['LotFrontage','LotArea','MasVnrArea','BsmtFinSF1','BsmtFinSF2','BsmtUnfSF',\n                 'TotalBsmtSF','1stFlrSF','2ndFlrSF','LowQualFinSF','GrLivArea',\n                 'BsmtFullBath','BsmtHalfBath','FullBath','HalfBath','BedroomAbvGr','KitchenAbvGr',\n                 'TotRmsAbvGrd','Fireplaces','GarageCars','GarageArea','WoodDeckSF','OpenPorchSF',\n                 'EnclosedPorch','3SsnPorch','ScreenPorch','PoolArea','MiscVal','YearRemodAdd','TotalSF']\n\ndata = addlogs(data, loglist)","bbccdbac":"def getdummies(res, ls):\n    def encode(encode_df):\n        encode_df = np.array(encode_df)\n        enc = OneHotEncoder()\n        le = LabelEncoder()\n        le.fit(encode_df)\n        res1 = le.transform(encode_df).reshape(-1, 1)\n        enc.fit(res1)\n        return pd.DataFrame(enc.transform(res1).toarray()), le, enc\n\n    decoder = []\n    outres = pd.DataFrame({'A' : []})\n\n    for l in ls:\n        cat, le, enc = encode(res[l])\n        cat.columns = [l+str(x) for x in cat.columns]\n        outres.reset_index(drop=True, inplace=True)\n        outres = pd.concat([outres, cat], axis = 1)\n        decoder.append([le,enc])     \n    \n    return (outres, decoder)\n\ncatpredlist = ['MSSubClass','MSZoning','LotShape','LandContour','LotConfig',\n               'Neighborhood','Condition1','Condition2','BldgType',\n               'RoofStyle','RoofMatl','Exterior1st','Exterior2nd',\n               'BsmtFinType2','Heating','HouseStyle','Foundation','MasVnrType','BsmtFinType1',\n               'Electrical','Functional','GarageType','Alley','Utilities',\n               'GarageCond','Fence','MiscFeature','SaleType','SaleCondition','LandSlope','CentralAir',\n               'GarageFinish','BsmtExposure','Street']\n\n# Applying function to get dummies\n# Saving decoder - function which can be used to transform new data  \nres = getdummies(data[catpredlist],catpredlist)\ndf = res[0]\ndecoder = res[1]\n\n# Adding real valued features\nfloatpredlist = ['LotFrontage_log',\n                 'LotArea_log',\n                 'MasVnrArea_log','BsmtFinSF1_log','BsmtFinSF2_log','BsmtUnfSF_log',\n                 'TotalBsmtSF_log','1stFlrSF_log','2ndFlrSF_log','LowQualFinSF_log','GrLivArea_log',\n                 'BsmtFullBath_log','BsmtHalfBath_log','FullBath_log','HalfBath_log','BedroomAbvGr_log','KitchenAbvGr_log',\n                 'TotRmsAbvGrd_log','Fireplaces_log','GarageCars_log','GarageArea_log',\n                 'PoolArea_log','MiscVal_log',\n                 'YearRemodAdd','TotalSF_log','OverallQual','OverallCond','ExterQual','ExterCond','KitchenQual',\n                 'HeatingQC','BsmtQual','BsmtCond','FireplaceQu','GarageQual','PoolQC','PavedDrive',\n                 'HasWoodDeck', 'HasOpenPorch','HasEnclosedPorch', 'Has3SsnPorch', 'HasScreenPorch']\ndf = pd.concat([df,data[floatpredlist]],axis=1)","9174af5a":"def addSquared(res, ls):\n    m = res.shape[1]\n    for l in ls:\n        res = res.assign(newcol=pd.Series(res[l]*res[l]).values)   \n        res.columns.values[m] = l + '_sq'\n        m += 1\n    return res \n\nsqpredlist = ['YearRemodAdd', 'LotFrontage_log', \n              'TotalBsmtSF_log', '1stFlrSF_log', '2ndFlrSF_log', 'GrLivArea_log',\n              'GarageCars_log', 'GarageArea_log',\n              'OverallQual','ExterQual','BsmtQual','GarageQual','FireplaceQu','KitchenQual']\ndf = addSquared(data, sqpredlist)","8122a08f":"As we see we instead of prediction target, it's better to predict log(target) ","8d967ac7":"'Very well... It seems that your minimum price is larger than zero. Excellent! You don't have one of those personal traits that would destroy my model! Do you have any picture that you can send me? I don't know... like, you in the beach... or maybe a selfie in the gym?'","8ae5a2da":"### Filling in missing values, re-coding ordinal variables","c9591af7":"# First things first: analysing 'SalePrice'\n'SalePrice' is the reason of our quest. It's like when we're going to a party. We always have a reason to be there. Usually, women are that reason. (disclaimer: adapt it to men, dancing or alcohol, according to your preferences)\n\nUsing the women analogy, let's build a little story, the story of 'How we met 'SalePrice''.\n\nEverything started in our Kaggle party, when we were looking for a dance partner. After a while searching in the dance floor, we saw a girl, near the bar, using dance shoes. That's a sign that she's there to dance. We spend much time doing predictive modelling and participating in analytics competitions, so talking with girls is not one of our super powers. Even so, we gave it a try:\n\n'Hi, I'm Kaggly! And you? 'SalePrice'? What a beautiful name! You know 'SalePrice', could you give me some data about you? I just developed a model to calculate the probability of a successful relationship between two people. I'd like to apply it to us!'","7a39b62e":"## Feature Engineering","39178d5f":"Although it's not a strong tendency, I'd say that 'SalePrice' is more prone to spend more money in new stuff than in old relics.\n\nNote: we don't know if 'SalePrice' is in constant prices. Constant prices try to remove the effect of inflation. If 'SalePrice' is not in constant prices, it should be, so than prices are comparable over the years.","438e3c13":"### Let's look at linear dependings of log(taget) variable","d0022631":"### Let's look at non-linear dependings of categorical variables","39b0488c":"###  Creating dataset for training: adding dummies, adding numeric predictors","e22e282d":"### Adding log-transformed predictors to raw data","90f52c11":"### Creating dataset for training: using function which creates squared predictors and adding them to the dataset"}}