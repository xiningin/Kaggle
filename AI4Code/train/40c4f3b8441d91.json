{"cell_type":{"6454fb2c":"code","c0a97975":"code","b5292ffa":"code","37b45ce6":"code","b9d49bb6":"code","20ada324":"code","aeab6bff":"code","8efe7fb4":"code","b4e5ee8c":"code","e2f42748":"code","7c84fe7c":"code","9987abd1":"code","74502cb4":"code","4a7d1d6a":"code","b4c28a61":"code","c87d125b":"code","7fdb3ad2":"code","72a98650":"code","ef18245d":"code","6e2ed2c1":"code","cf522c45":"code","f4f47171":"code","ba37003f":"code","5885071c":"code","66eb386b":"code","20944106":"code","82f1c56e":"code","1a142639":"code","586dd61a":"code","f478d9ab":"code","3044b841":"code","88d53eff":"code","0fba1222":"code","da561071":"code","b1ecf9eb":"code","943f67d3":"code","c7e0d4df":"code","4ba543aa":"code","7667f7a1":"code","bc330e68":"markdown","aeb22860":"markdown","749c8bd3":"markdown","4e983f3a":"markdown","5592c479":"markdown","469c299c":"markdown","43ad9ddc":"markdown","d9d67c80":"markdown","5f300275":"markdown","1856bc4e":"markdown","80dd0778":"markdown","03cb3c3e":"markdown","a954cb43":"markdown","198c70ab":"markdown","4e3f5082":"markdown","bddf1cd5":"markdown","f2f097eb":"markdown","0ebef65f":"markdown","9af6f75b":"markdown","dd570720":"markdown","9849eabf":"markdown","bc1febc7":"markdown"},"source":{"6454fb2c":"import numpy as np\nfrom sklearn.metrics import accuracy_score\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nimport seaborn as sns\nsns.set_theme()\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import MinMaxScaler\n\nimport warnings\nwarnings.filterwarnings('ignore')","c0a97975":"df =  pd.read_csv(\"\/kaggle\/input\/adult-pmr3508\/train_data.csv\", \n                  sep=r'\\s*,\\s*',  \n                  engine='python')","b5292ffa":"df_t = pd.read_csv(\"\/kaggle\/input\/adult-pmr3508\/test_data.csv\", \n                   sep=r'\\s*,\\s*', \n                   engine='python')","37b45ce6":"df.head()","b9d49bb6":"df_t.head()","20ada324":"print(\"Shape Treino:\", df.shape)\nprint(\"Shape Teste:\", df_t.shape)","aeab6bff":"# precisamos analisar a coluna Income\ndf.head(5)","8efe7fb4":"#Tratamento dos dados\n#Substituindo caracteres especiais por NaN\n\nif df.isin(['?']).sum().sum() != 0:\n    df.replace(to_replace='?',value= np.nan,inplace=True)","b4e5ee8c":"#Quantidade de NaN no dataset\n\ndf.isna().sum()","e2f42748":"imputer = SimpleImputer(strategy='most_frequent')\n\ndf[['workclass', 'occupation']]= pd.DataFrame(imputer.fit_transform(df[['workclass', 'occupation']]))","7c84fe7c":"df.describe()","9987abd1":"#N\u00e3o precisamos analisar o ID e o fnlwgt\n#df.drop(columns=['Id', 'fnlwgt'], inplace=True) #essas colunas n\u00e3o s\u00e3o necess\u00e1rias\ndf.head()","74502cb4":"#Cria\u00e7\u00e3o de um dataframe separado onde transformamos o tipo da coluna income\n\ndf1 = df.copy(deep=True)\n\ndf1 = df.drop(columns=[\"income\"])\n\ndf1[\"Target\"] = [0 if i ==\"<=50K\" else 1 for i in df.income ]\n\ndf1.head()","4a7d1d6a":"#An\u00e1lise dos grupos onde income \u00e9 maior que 50k para as variaveis categoricas","b4c28a61":"lista = ['workclass']\n\nplt.figure(figsize = (20,5))\nsns.barplot(x = df1[lista[0]],y = df1[\"Target\"])\nplt.show()","c87d125b":"lista = ['education']\n\nplt.figure(figsize = (20,5))\nsns.barplot(x = df1[lista[0]],y = df1[\"Target\"])\nplt.show()","7fdb3ad2":"lista = ['marital.status']\n\nplt.figure(figsize = (20,5))\nsns.barplot(x = df1[lista[0]],y = df1[\"Target\"])\nplt.show()","72a98650":"lista = ['occupation']\n\nplt.figure(figsize = (20,5))\nsns.barplot(x = df1[lista[0]],y = df1[\"Target\"])\nplt.show()","ef18245d":"lista = ['relationship']\n\nplt.figure(figsize = (20,5))\nsns.barplot(x = df1[lista[0]],y = df1[\"Target\"])\nplt.show()","6e2ed2c1":"lista = ['race']\n\nplt.figure(figsize = (20,5))\nsns.barplot(x = df1[lista[0]],y = df1[\"Target\"])\nplt.show()","cf522c45":"lista = ['sex']\n\nplt.figure(figsize = (20,5))\nsns.barplot(x = df1[lista[0]],y = df1[\"Target\"])\nplt.show()","f4f47171":"lista = ['native.country']\n\nplt.figure(figsize = (20,5))\nsns.barplot(x = df1[lista[0]],y = df1[\"Target\"])\nplt.xticks(rotation= 90 ) \nplt.show()","ba37003f":"pd.crosstab(df1.race, df1.Target,margins=True)","5885071c":"#Visualiza\u00e7\u00e3o \nvn = ['age','education.num','capital.gain', 'capital.loss', 'hours.per.week']\n\nplt.figure(figsize=(25,15))\n\ni = 0\nfor coluna in vn:\n    i=i+1\n    plt.subplot(3,2,i)\n    sns.distplot(x = df1[coluna])\n    plt.xlabel(coluna)\nplt.show()","66eb386b":"plt.figure(figsize=(15,5))\nsns.heatmap(df1[vn].corr(), vmin=-1, vmax=1, annot=True)","20944106":"df_t.head(5)","82f1c56e":"#df_t.drop(columns=[\"Id\", \"fnlwgt\"], inplace=True) #essas colunas n\u00e3o ser\u00e3o necess\u00e1rias","1a142639":"#Tratamento dos dados\n#Substituindo caracteres especiais por NaN\n\nif df_t.isin(['?']).sum().sum() != 0:\n    df_t.replace(to_replace='?',value= np.nan,inplace=True)","586dd61a":"df_t.isna().sum().sum() #numero de nulos no dataset","f478d9ab":"df_t[['workclass','occupation']] = pd.DataFrame(imputer.fit_transform(df_t[['workclass', 'occupation']]))\n\ndf_t.head()","3044b841":"#Usando o dummies\n\nX1 = pd.get_dummies(df.drop(columns=['Id', 'fnlwgt', \"income\", 'native.country']))\nY1 = df.income","88d53eff":"#Para N = 20\nN = 20\nmodel = KNeighborsClassifier(n_neighbors=N, metric='euclidean')\nmodel.fit(X1,Y1)\n\nknn1 = cross_val_score(model, X1, Y1, cv=10)\nprint(\"O score do KNN \u00e9 de {}\".format(knn1.mean()))","0fba1222":"accuracy_score(model.predict(X1), Y1)","da561071":"scaler = MinMaxScaler()\nvn = ['capital.gain', 'capital.loss', 'hours.per.week', 'age']\n\nx_2 = scaler.fit_transform(X = [df[\"capital.gain\"], df[\"capital.loss\"], df[\"hours.per.week\"], df[\"age\"]] )\n\ndf_scaled = pd.DataFrame(x_2.transpose(), columns=vn)\n\nX2 =pd.get_dummies(df.drop(columns=[ 'Id', 'fnlwgt', \"income\", 'native.country', 'education.num',  'capital.gain', 'capital.loss', 'hours.per.week', 'age']))\n\nX2.reset_index(inplace=True)\n\nX2.drop(columns=['index'], inplace=True)\n\nX2[['capital.gain', 'capital.loss', 'hours.per.week', 'age']] = df_scaled[['capital.gain', 'capital.loss', 'hours.per.week', 'age']] \n\nY2 = df.income","b1ecf9eb":"N=30\nmodel_2 = KNeighborsClassifier(n_neighbors=N, metric='euclidean')\nmodel_2.fit(X2,Y2)\n\nknn2 = cross_val_score(model_2, X2, Y2, cv=10)\n\nprint(\"O score do KNN \u00e9 de {}\".format(knn2.mean()))","943f67d3":"accuracy_score(model_2.predict(X2), Y2)","c7e0d4df":"xt = pd.get_dummies(df_t.drop(columns=['Id','fnlwgt', 'native.country']))","4ba543aa":"results = pd.DataFrame(model.predict(xt),columns = ['income'])\nresults.head()\n","7667f7a1":"results.to_csv('submission.csv',index = True, index_label = 'ID')","bc330e68":"# Test","aeb22860":"## Vari\u00e1veis Num\u00e9ricas","749c8bd3":"# Conclus\u00e3o\n","4e983f3a":"Occupation: Destaque para Exec-Manager","5592c479":"# Importando as bibliotecas","469c299c":"## Sendo k = 30 e normalizando","43ad9ddc":"WorkClass: destaque para a self-emp-inc","d9d67c80":"Relationship: destaque para a Wife","5f300275":"Como, para n = 20, obteve-se um resultado melhor, usaremos os dados daquele caso","1856bc4e":"## Vis\u00e3o geral dos dados","80dd0778":"Race: destaque para a White e Asian-Pac-Islander","03cb3c3e":"## Sendo k=20 e n\u00e3o executando a normaliza\u00e7\u00e3o","a954cb43":"## Pr\u00e9-processamento - train","198c70ab":"Sex: destaque para Male","4e3f5082":"# Predi\u00e7\u00e3o","bddf1cd5":"Marital.status","f2f097eb":"## Analise Explorat\u00f3ria - train","0ebef65f":"# Train","9af6f75b":"Education: destaque para Doctorate","dd570720":"## Pr\u00e9-processamento - test\n","9849eabf":"## An\u00e1lise descritiva","bc1febc7":"Native.Country"}}