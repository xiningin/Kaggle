{"cell_type":{"95070141":"code","fc15b19d":"code","653c1bdd":"code","a16bf832":"code","53b9fbe8":"code","d80467cd":"code","f7995b49":"markdown","2d6dce1d":"markdown","89af8241":"markdown","b0dfbdd0":"markdown"},"source":{"95070141":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fc15b19d":"bcrbowlers = pd.read_csv('\/kaggle\/input\/top-run-scorers-and-wicket-takers-in-ipl\/iplbowlers.csv', index_col = 'PLAYER')\nbcrbatsmen = pd.read_csv('\/kaggle\/input\/top-run-scorers-and-wicket-takers-in-ipl\/iplbatsmen.csv', index_col = 'PLAYER')\nbcrbowlers","653c1bdd":"# Calcuate cumulative sum along the seasons and sort dfs as per 2019 (total across all seasons) values\nbcrbowlers = bcrbowlers.cumsum(axis=1).sort_values(by='2019', ascending = False)\nbcrbatsmen = bcrbatsmen.cumsum(axis=1).sort_values(by='2019', ascending = False)\n\n# Selecting the top 50 bowlers\/batsmen and transposing dfs to prepare it for BCR (wideformat)\nbcrbowlers = bcrbowlers[:50].T\nbcrbatsmen = bcrbatsmen[:50].T","a16bf832":"!pip install bar_chart_race\nimport bar_chart_race as bcr","53b9fbe8":"bcr.bar_chart_race(bcrbowlers, n_bars=10, fixed_max=True, steps_per_period=5,\n                   period_length= 1500, filter_column_colors = True, cmap = 'Plotly', \n                   title = 'Total Wickets Taken by the Top 10 Bowlers in IPL Over Different Seasons ')","d80467cd":"bcr.bar_chart_race(bcrbatsmen, n_bars=10, fixed_max=True, steps_per_period=5, \n                   period_length= 1500,filter_column_colors = True, cmap = 'Plotly',\n                   title = 'Total Runs Scored by the Top 10 Batsmen in IPL over Different Seasons')","f7995b49":"# Using BCR to Generate BCRs\n\nIt can be seen from the code windows below that all the heavy lifting of generating the BCRs was done by the inbuilt functions of BCR library. I did spend a lot of time and code on validating the data but if the data is validated, BCR can even process long form of data which is similar to the format of the dfs (dfbowlers and dfbatsmen) I generated by scraping the IPL website. Unfortunately real world data is seldom ready to use but BCR is a very handy library with out-of-box functions to generate BCRs in a single line of code.","2d6dce1d":"# Loading Data\n\nI am going to use my dataset which I generated from scraping the official IPL T20 website. In case you are interested in the steps involved in data scraping and cleaning, you can refer to my notebook summarising the data collection and cleaning here","89af8241":"# Inspiration\n\nA few days ago I was going through my LinkedIn newseed when I stumbled upon this visualisation using animated bar charts showing the meteoric rise of Jeff Bezos to the top 10 billionaires of the world. I was not able to find that particular visualisation to share here but it was similar to what I found on [AEI](https:\/\/www.aei.org\/carpe-diem\/animated-chart-of-the-day-worlds-top-ten-billionaires-2000-to-2019\/). \n\nApart from gawking at the wealth of the top 10 billionaires, I started wondering if I could recreate these visualisations in Python and quick search landed me on [Dexplo's homepage](https:\/\/www.dexplo.org\/bar_chart_race\/) who have a very handy Python library for creating bar chart races (yeah, thats what these animated bar plots are called!). Not one to whet my apetite with sample datasets, I thought of using this visualisation technique on the IPL dataset.","b0dfbdd0":"# Data Wrangling\n\n"}}