{"cell_type":{"f8248798":"code","24c652ee":"code","563cd8b6":"code","f34d37e0":"code","7c77658a":"code","a1a97c43":"code","2fafc0a7":"code","0dd79e2f":"code","f909447e":"code","35ca070c":"code","8ac9fad4":"code","13abd274":"code","f84a808e":"code","cd8fcc69":"code","1e0a488c":"code","f531a55c":"code","0537c6b2":"code","879dd29e":"code","26a584a5":"code","945affc5":"code","c855590f":"code","61bc0c92":"code","950bc0f4":"code","74573dd6":"code","b6f62337":"code","9eed5a2f":"code","84cb99c2":"code","de3f0c87":"code","a9131cf2":"code","33ba9e72":"code","86ba94f8":"code","c53306c0":"code","4e7632e2":"code","63d06ea6":"code","55140ffa":"code","14f883fc":"code","34bac2e7":"code","9724778b":"code","9f11337b":"code","0f7c290c":"code","3607b452":"code","83d4863f":"code","abb30462":"code","12ff69fb":"code","f706251d":"code","5eb5ba5f":"code","81033507":"code","619c232b":"code","f0c175f0":"code","d3cf60f3":"code","7c2f9914":"code","ee32a2b4":"code","05707964":"code","b9a4fa0c":"code","b75daf5a":"code","e7e24f7d":"code","4558ddab":"code","f33099ec":"code","474f1a4d":"code","e3ea71b1":"code","5456d12f":"code","da0ce21a":"code","a57e9e8b":"code","a7e1811b":"code","b94aad58":"code","f0f388d0":"code","070e00f4":"code","700dda23":"code","5d251a0c":"code","28b79683":"code","c617ea52":"code","fe7eb172":"code","32f4ee84":"code","f6afc87f":"code","e987eec7":"code","69e4552e":"code","1010a75a":"code","71bb5ac1":"code","b3fe9cdc":"code","fe83a16c":"code","2aaa85e1":"code","e38cee63":"code","d481f801":"code","658d00a5":"code","9d64e383":"code","d840e3c3":"code","63dc8ad6":"code","4dbdab6d":"code","ca5d642d":"code","f78061af":"markdown","2e0b44ec":"markdown","48acadbe":"markdown","c413a1c6":"markdown","032d1adb":"markdown","aae1f620":"markdown","9f3a0dcf":"markdown","9c4664d6":"markdown","7925ac9d":"markdown","e5310538":"markdown","0c40ffc7":"markdown","d9939b83":"markdown","61388c87":"markdown","bb2fee08":"markdown","31faf84d":"markdown","1b18d849":"markdown","c0beced2":"markdown","16a74430":"markdown","12ebfafc":"markdown","34683f57":"markdown","a439fb4c":"markdown","95de58d8":"markdown","092a5598":"markdown","fd769b68":"markdown","7c398792":"markdown","9aacceae":"markdown","51a54f3b":"markdown","bc7c2b35":"markdown","375793ff":"markdown","ee570d36":"markdown","9a9fa7ce":"markdown","fd020a4a":"markdown","f04b07ef":"markdown","07056f1d":"markdown","db3d70a5":"markdown","8f202a05":"markdown","679fd090":"markdown","ef3118cd":"markdown"},"source":{"f8248798":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\nplt.style.use(\"seaborn-whitegrid\")\n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings \nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","24c652ee":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]","563cd8b6":"train_df.columns","f34d37e0":"train_df.head(10)","7c77658a":"train_df.describe()","a1a97c43":"train_df.info()","2fafc0a7":"def bar_plot(veriable):\n    var = train_df[veriable]\n    \n    varValue = var.value_counts()\n    \n    plt.figure(figsize=(9,3))\n    plt.bar(varValue.index,varValue)\n    plt.xticks(varValue.index,varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(veriable)\n    plt.show()\n    print(\"{}: \\n {}\".format(veriable,varValue))\n    ","0dd79e2f":"category1 = [\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\",\"Parch\"]\nfor c in category1:\n    bar_plot(c)","f909447e":"category2 = [\"Cabin\",\"Name\",\"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","35ca070c":"def plot_hist(variable):\n    plt.figure(figsize=(9,3))\n    plt.hist(train_df[variable],bins=50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with list\".format(variable))\n    plt.show()","8ac9fad4":"numericVar=[\"Fare\",\"Age\",\"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","13abd274":"#Pclass vs Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)\n","f84a808e":"# Sex vs Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","cd8fcc69":"# Sibsp vs Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","1e0a488c":"# Parch vs Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","f531a55c":"# Embarked vs Survived\ntrain_df[[\"Embarked\",\"Survived\"]].groupby([\"Embarked\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","0537c6b2":"# Pclass vs Fare\ntrain_df[[\"Pclass\",\"Fare\"]].groupby([\"Pclass\"],as_index = False).mean().sort_values(by=\"Fare\",ascending = False)","879dd29e":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","26a584a5":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","945affc5":"# drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis = 0).reset_index(drop = True)","c855590f":"train_df_len=len(train_df)\ntrain_df=pd.concat([train_df,test_df],axis=0).reset_index(drop=True)","61bc0c92":"train_df.head()","950bc0f4":"train_df.columns[train_df.isnull().any()]","74573dd6":"train_df.isnull().sum()","b6f62337":"train_df[train_df[\"Embarked\"].isnull()]","9eed5a2f":"train_df.boxplot(column=\"Fare\",by = \"Embarked\")\nplt.show()","84cb99c2":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","de3f0c87":"train_df[train_df[\"Fare\"].isnull()]","a9131cf2":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))","33ba9e72":"train_df[train_df[\"Fare\"].isnull()]","86ba94f8":"list1=[\"SibSp\",\"Parch\",\"Age\",\"Fare\",\"Survived\"]\nsns.heatmap(train_df[list1].corr(),annot=True,fmt=\".2f\")\nplt.show()","c53306c0":"g= sns.factorplot(x=\"SibSp\",y=\"Survived\",data=train_df,kind=\"bar\",size=6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","4e7632e2":"g=sns.factorplot(x=\"Parch\",y=\"Survived\",kind=\"bar\",data=train_df,size=6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","63d06ea6":"g=sns.factorplot(x=\"Pclass\",y=\"Survived\",data=train_df,kind=\"bar\",size=6)\ng.set_ylabels(\"Survived Probabilty\")\nplt.show()","55140ffa":"g=sns.FacetGrid(train_df,col=\"Survived\")\ng.map(sns.distplot,\"Age\",bins=25)\nplt.show()","14f883fc":"g=sns.FacetGrid(train_df,col=\"Survived\",row=\"Pclass\",size=2)\ng.map(plt.hist,\"Age\",bins=25)\ng.add_legend()\nplt.show()","34bac2e7":"g=sns.FacetGrid(train_df,row=\"Embarked\",size=2)\ng.map(sns.pointplot,\"Pclass\",\"Survived\",\"Sex\")\ng.add_legend()\nplt.show()","9724778b":"g=sns.FacetGrid(train_df,row=\"Embarked\",col=\"Survived\",size=2.3)\ng.map(sns.barplot,\"Sex\",\"Fare\")\ng.add_legend()\nplt.show()","9f11337b":"train_df[train_df[\"Age\"].isnull()]","0f7c290c":"sns.factorplot(x=\"Sex\",y=\"Age\",data=train_df,kind=\"box\")\nplt.show()","3607b452":"sns.factorplot(x=\"Sex\",y=\"Age\",hue=\"Pclass\",data=train_df,kind=\"box\")\nplt.show()","83d4863f":"sns.factorplot(x=\"Parch\",y=\"Age\",data=train_df,kind=\"box\")\nsns.factorplot(x=\"SibSp\",y=\"Age\",data=train_df,kind=\"box\")\nplt.show()","abb30462":"sns.heatmap(train_df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\"]].corr(),annot=True)\nplt.show()","12ff69fb":"index_nan_age=list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred=train_df[\"Age\"][((train_df[\"SibSp\"]==train_df.iloc[i][\"SibSp\"])&(train_df[\"Pclass\"]==train_df.iloc[i][\"Pclass\"]))].median()\n    age_med=train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i]=age_pred\n    else:\n        train_df[\"Age\"],iloc[i]=age_med","f706251d":"train_df[train_df[\"Age\"].isnull()]","5eb5ba5f":"train_df[\"Name\"].head(10)","81033507":"name=train_df[\"Name\"]\ntrain_df[\"Title\"]=[i.split(\".\")[0].split(\",\")[-1].strip() for i in name]","619c232b":"train_df[\"Title\"].head(10)","f0c175f0":"sns.countplot(x=\"Title\",data=train_df)\nplt.xticks(rotation=60)\nplt.show()","d3cf60f3":"train_df[\"Title\"]=train_df[\"Title\"].replace([\"Lady\",\"the Countess\",\"Capt\",\"Col\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"other\")\ntrain_df[\"Title\"]=[0 if i == \"Master\" else 1 if i==\"Miss\" or i==\"Ms\" or i==\"Mlle\" or i==\"Mrs\" else 2 if i==\"Mr\" else 3 for i in train_df[\"Title\"]]\ntrain_df[\"Title\"].head(20)","7c2f9914":"sns.countplot(x=\"Title\",data=train_df)\nplt.xticks(rotation=60)\nplt.show()","ee32a2b4":"g=sns.factorplot(x=\"Title\",y=\"Survived\",data=train_df,kind=\"bar\")\ng.set_xticklabels([\"Master\",\"Mrs\",\"Mr\",\"Other\"])\ng.set_ylabels(\"Survival Probability\")\nplt.show()","05707964":"train_df.drop(labels=[\"Name\"],axis=1,inplace=True)","b9a4fa0c":"train_df.head()","b75daf5a":"train_df=pd.get_dummies(train_df,columns=[\"Title\"])\ntrain_df.head()","e7e24f7d":"train_df.head()","4558ddab":"train_df[\"Fsize\"]=train_df[\"SibSp\"]+train_df[\"Parch\"]+1","f33099ec":"train_df.head()","474f1a4d":"g=sns.factorplot(x=\"Fsize\",y=\"Survived\",data=train_df,kind=\"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","e3ea71b1":"train_df[\"family_size\"] = [1 if i < 5 else 0 for i in train_df[\"Fsize\"]]","5456d12f":"train_df.head(10)","da0ce21a":"sns.countplot(x=\"family_size\",data=train_df)\nplt.show()","a57e9e8b":"g=sns.factorplot(x=\"family_size\",y=\"Survived\",data=train_df,kind=\"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","a7e1811b":"train_df=pd.get_dummies(train_df,columns=[\"family_size\"])\ntrain_df.head(10)","b94aad58":"train_df[\"Embarked\"].head()","f0f388d0":"sns.countplot(x=\"Embarked\",data=train_df)\nplt.show()","070e00f4":"train_df=pd.get_dummies(train_df,columns=[\"Embarked\"])\ntrain_df.head()","700dda23":"train_df[\"Ticket\"].head(20)","5d251a0c":"a=\"A\/5. 2151\"\na.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0]","28b79683":"tickets=[]\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"]=tickets","c617ea52":"train_df[\"Ticket\"].head(20)","fe7eb172":"train_df.head()","32f4ee84":"train_df=pd.get_dummies(train_df,columns=[\"Ticket\"],prefix=\"T\")\ntrain_df.head(20)","f6afc87f":"sns.countplot(x=\"Pclass\",data=train_df)\nplt.show()","e987eec7":"train_df[\"Pclass\"]=train_df[\"Pclass\"].astype(\"category\")\ntrain_df=pd.get_dummies(train_df,columns=[\"Pclass\"])\ntrain_df.head()","69e4552e":"train_df[\"Sex\"]=train_df[\"Sex\"].astype(\"category\")\ntrain_df=pd.get_dummies(train_df,columns=[\"Sex\"])\ntrain_df.head()","1010a75a":"train_df.drop(labels=[\"PassengerId\",\"Cabin\"],axis=1,inplace=True)","71bb5ac1":"train_df.columns","b3fe9cdc":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","fe83a16c":"train_df_len","2aaa85e1":"test=train_df[train_df_len:]\ntest.drop(labels=[\"Survived\"],axis=1,inplace=True)","e38cee63":"test.head()","d481f801":"train = train_df[:train_df_len]\nX_train = train.drop(labels = \"Survived\", axis = 1)\ny_train = train[\"Survived\"]\nX_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size = 0.33, random_state = 42)\nprint(\"X_train\",len(X_train))\nprint(\"X_test\",len(X_test))\nprint(\"y_train\",len(y_train))\nprint(\"y_test\",len(y_test))\nprint(\"test\",len(test))","658d00a5":"logreg=LogisticRegression()\nlogreg.fit(X_train,y_train)\nacc_log_train=round(logreg.score(X_train,y_train)*100,2)\nacc_log_test=round(logreg.score(X_test,y_test)*100,2)\nprint(\"Training Accuracy: % {}\".format(acc_log_train))\nprint(\"Testing Accuracy: % {}\".format(acc_log_test))","9d64e383":"random_state = 42\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                \"max_depth\": range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\": [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid]","d840e3c3":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1,verbose = 1)\n    clf.fit(X_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","63dc8ad6":"cv_results=pd.DataFrame({\"Cross Validation Means\":cv_result,\"ML Models\":[\"DecisionTreeClassifier\",\"SVM\",\"RandomForestClassifier\",\"LogisticRegression\",\"KNeighborsClassifier\"]})\ng=sns.barplot(\"Cross Validation Means\",\"ML Models\",data=cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")\nplt.show()","4dbdab6d":"votingC=VotingClassifier(estimators=[(\"dt\",best_estimators[0]),(\"rfc\",best_estimators[2]),(\"lr\",best_estimators[3])],voting=\"soft\",n_jobs=-1)\nvotingC=votingC.fit(X_train,y_train)\nprint(accuracy_score(votingC.predict(X_test),y_test))","ca5d642d":"test_survived=pd.Series(votingC.predict(test),name=\"Survived\").astype(int)\nresults=pd.concat([test_PassengerId,test_survived],axis=1)\nresults.to_csv(\"titanic.csv\",index=False)","f78061af":"<a id=\"13\"><\/a><br>\n## **-Name-Title**","2e0b44ec":"<a id=\"8\"><\/a><br>\n# **5.Missing Value**","48acadbe":"<a id=\"20\"><\/a><br>\n\n# **8.Modelling**","c413a1c6":"* Embarked--Sex--Fare--Survived","032d1adb":"<a id=\"16\"><\/a><br>\n## **-Ticket**","aae1f620":"<a id=\"12\"><\/a><br>\n# **7.Feature Engineering**","9f3a0dcf":"<a id=\"17\"><\/a><br>\n\n## **-Pclass**","9c4664d6":"<a id=\"3\"><\/a><br>\n##  **Univariate Variable Analysis**","7925ac9d":"* Fill Missing: Age Feature","e5310538":"* Pclass-Survived","0c40ffc7":"* Embarked--Sex--Pclass--Survived","d9939b83":"<a id=\"19\"><\/a><br>\n## **-Drop Passenger ID and Cabin**","61388c87":"* Age--Survived","bb2fee08":"<a id=\"25\"><\/a><br>\n## **-Prediction and Submission**","31faf84d":"<a id=\"21\"><\/a><br>\n## **-Train-Test Split**","1b18d849":"<a id=\"22\"><\/a><br>\n\n## **-Simple Logistic Regression**","c0beced2":"<a id=\"4\"><\/a><br>\n## **-Categorical Variable**","16a74430":"<a id=\"18\"><\/a><br>\n## **-Sex**","12ebfafc":"<a id=\"1\"><\/a><br>\n## **1.Load and Check Data**\n","34683f57":"# INTRODUCTION\n\n<font color = brown>\nContent:\n\n1.[Load and Check Data](#1)<br>\n\n2.[Veriable Description](#2)<br>\n*       [Univariate Variable Analysis](#3)<br>\n*               [Categorical Variable](#4)<br>\n*               [Numerical Variable](#5)<br>\n\n3.[Basic Data Analysis](#6)<br>\n\n4.[Outlier Detection](#7)<br>\n\n5.[Missing Value](#8)<br>\n*      [Find Missing Value](#9)<br>\n*      [Fill Missing Value](#10)<br>\n\n6.[Visualization](#11)<br>\n\n7.[Feature Engineering](#12)<br>\n*      [Name-Title](#13)<br>\n*      [Family Size](#14)<br>\n*      [Embarked](#15 )<br>\n*      [Ticket](#16)<br>\n*      [Pclass](#17)<br>\n*      [Sex](#18)<br>\n*      [Drop Passenger ID and Cabin](#19)<br>\n\n8.[Modelling](#20)<br>\n*      [Train-Test Split](#21)<br>\n*      [Simple Logistic Regression](#22)<br>\n*      [Hperparameter Tuning--Grid Search--Cross Validation](#23)<br>\n*      [Ensemble Modeling](#24)<br>\n*      [Prediction and Submission](#25)<br>","a439fb4c":"<a id=\"9\"><\/a><br>\n## **-Find Missing Value**","95de58d8":"<a id=\"6\"><\/a><br>\n# **3.Basic Data Analysis**\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived\n* Embarked - Survived\n* Pclass - Fare","092a5598":"* SibSp--Survived","fd769b68":"* Find Missing Value\n* Fill Missing Value","7c398792":"<a id=\"11\"><\/a><br>\n# **6.Visualization**","9aacceae":"* Categorical Variable: Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsp and Parch\n* Numerical Variable: Fare, age and passengerId","51a54f3b":"* float64(2): Fare ve Age\n* int64(5): Pclass, sibsp, parch, passengerId and survived\n* object(5): Cabin, embarked, ticket, name and sex","bc7c2b35":"* Pclass--Survived--Age","375793ff":"<a id=\"2\"><\/a><br>\n## **2.Variable Description**\n1. PassengerId: unique id number to each passenger<br>\n1. Survived: passenger survive(1) or died(0)<br>\n1. Pclass: passenger class<br>\n1. Name: name<br>\n1. Sex: gender of passenger<br>\n1. Age: age of passenger<br>\n1. SibSp: number of siblings\/spouses<br>\n1. Parch: number of parents\/children<br>\n1. Ticket: ticket number<br>\n1. Fare: amount of money spent on ticket<br>\n1. Cabin: cabin category<br>\n1. Embarked: port where passenger embarked (C = Cherbourg, Q = Queenstown, S = Southampton)<br>","ee570d36":"<a id=\"23\"><\/a><br>\n\n## **-Hyperparameter Tuning--Grid Search--Cross Validation**\n* Decision Tree\n* SVM\n* Random Forest\n* KNN\n* Logistic Regression","9a9fa7ce":"* Parch--Survived","fd020a4a":"<a id=\"5\"><\/a><br>\n## **-Numerical Variable**","f04b07ef":"<a id=\"24\"><\/a><br>\n## **-Ensemble Modeling**","07056f1d":"<a id=\"10\"><\/a><br>\n## **- Fill Missing Value**\n* Embarked has 2 missing value\n* Fare has only 1","db3d70a5":"<a id=\"7\"><\/a><br>\n# **4.Outlier Detection**","8f202a05":"<a id=\"15\"><\/a><br>\n## **-Embarked**","679fd090":"<a id=\"14\"><\/a><br>\n## **-Family Size**","ef3118cd":"* Sibsp -- Parch -- Age -- Fare -- Survived"}}