{"cell_type":{"14b4cf14":"code","08a8cf01":"code","193262bf":"code","8316bade":"code","084019bd":"code","daad3806":"code","e95c91b4":"code","e5f1bf33":"code","0e9a7152":"markdown","e8c994c6":"markdown","5c6fa622":"markdown","67ac172d":"markdown"},"source":{"14b4cf14":"#Define the core mortgage inputs\namount_borrowed = 100000.00\nperiods = 180\nmonthly_rate = 0.06 \/ 12\n\n#Create one data point per period\nlist_period = [x for x in range(periods)]\nlist_monthly_rate = [0.005 for x in range(periods)]\nlist_remaining_months = [periods - x for x in range(periods)]\nlist_remaining_months = [periods - x for x in range(periods)]\n\ntrigger_flag = [0 for x in list_period]\nmissed_flag = [0 for x in list_period]","08a8cf01":"import pandas as pd\n#Create a dataframe with the mortgage timeline\ndata = {'period' : list_period,\n        'remaining_months' : list_remaining_months,\n        'monthly_rate' : list_monthly_rate,\n        'amount_borrowed' : amount_borrowed,\n        'trigger_flag' : trigger_flag,\n        'missed_flag' : missed_flag}\n\ndf_original = pd.DataFrame(data).set_index('period')\ndf_original.head()","193262bf":"def cmi_calculator(rate, nper, fv):\n    cmi = fv * ((rate * (1 + rate) ** nper) \/ ((1 + rate) ** nper - 1))\n    return cmi","8316bade":"def balance_profile_recalculator(df, scenario_option='scenario_1'):\n    '''\n    Defines the balance of a mortgage for every period, according to some initial inputs stored in a DataFrame.\n    The columns in the DataFrame input need to include:\n        amount_borrowed: Original principal amount\n        remaining_months: Decreasing monthly periods for the mortgage term\n        monthly_rate: Interest rate effective at respective period\n        trigger_flags: 1 or 0; 1 if CMI needs to be recalculated on that period\n        missed_flags: 1 or 0; 1 if the customer missed their whole CMI payment on that period\n    The outputs are:\n        A dataframe with a breakdown of CMI and Arrears components, as well as Closing Amount to Settle.\n\n    Optional Parameters:\n        Four parameters available, each change the definition of Amount to Settle.\n        Base definition is, for each period: \n            Opening Amount to Settle = Opening Remaining Principal (i.e. previous period closing balance)\n            CMI of Amount to Settle = CMI of Principal\n            Closing Amount to Settle = Opening Remaining Principal - CMI of Principal\n\n        scenario_1: [Default] maintains base definition\n        scenario_2: Includes all missed CMI payments into Amount to Settle (i.e. Amount to Settle includes total Arrears)\n        scenario_3: Includes missed 'CMI of Interest' payments into Amount to Settle (i.e. includes Arrears of interest)\n        scenario_4: Includes missed 'CMI of Amount to Settle' payments into Amount to Settle (i.e. includes Arrears of amount to settle)\n    '''\n    #Make copy of original df to avoid overwrites\n    df = df.copy()\n\n    #Define placeholders for the CMI values\n    cmi_breakdown = (0.00, 0.00, 0.00)\n    df['cmi_total'] = cmi_breakdown[0]\n    df['cmi_interest'] = cmi_breakdown[1]\n    df['cmi_settle'] = cmi_breakdown[2]\n    \n    #Set default value for remaining principal\n    df['closing_amount_to_settle'] = df['amount_borrowed']\n    \n    arrears_breakdown = (0.00, 0.00, 0.00)\n    df['arrears_total'] = arrears_breakdown[0]\n    df['arrears_interest'] = arrears_breakdown[1]\n    df['arrears_settle'] = arrears_breakdown[2]\n    \n    for index, row in df.iterrows():\n        \n        #Define variables at time 0\n        if index == 0:\n            opening_amount_to_settle = row['closing_amount_to_settle']\n            arrears_total, arrears_interest, arrears_settle = arrears_breakdown\n        else:\n            opening_amount_to_settle = closing_amount_to_settle\n        \n        #Run CMI calculation and recalculations\n        if row['trigger_flag'] == 1:\n            #Define input values for CMI calculation\n            rate = row['monthly_rate']\n            nper = row['remaining_months']\n            cmi_total = cmi_calculator(rate, nper, opening_amount_to_settle)\n        else:\n            cmi_total = cmi_total\n\n        #Define CMI Components\n        cmi_interest = opening_amount_to_settle * rate\n        cmi_settle = cmi_total - cmi_interest\n        cmi_breakdown = (cmi_total, cmi_interest, cmi_settle)\n        \n        \n        '''--------------New Section begins----------------------------------------'''\n        #Update closing_amount_to_settle and Arrears values\n        missed_cmi_breakdown = tuple(i * row['missed_flag'] for i in cmi_breakdown)\n        \n        scenario_dict = {'scenario_1' : 0,\n                 'scenario_2' : missed_cmi_breakdown[0],\n                 'scenario_3' : missed_cmi_breakdown[1],\n                 'scenario_4' : missed_cmi_breakdown[2]} \n        \n        \n        closing_amount_to_settle = opening_amount_to_settle - cmi_settle + scenario_dict[scenario_option]\n        \n        arrears_total = arrears_total + missed_cmi_breakdown[0]\n        arrears_interest = arrears_interest + missed_cmi_breakdown[1]\n        arrears_settle = arrears_settle + missed_cmi_breakdown[2]\n        arrears_breakdown = (arrears_total, arrears_interest, arrears_settle)\n        '''--------------New Section ends------------------------------------------'''\n        \n        \n        #Update new values to the dataframe\n        df.at[index, 'cmi_total'] = cmi_breakdown[0]\n        df.at[index, 'cmi_interest'] = cmi_breakdown[1]\n        df.at[index, 'cmi_settle'] = cmi_breakdown[2]   \n        \n        df.at[index, 'closing_amount_to_settle'] = round(closing_amount_to_settle,6)\n        \n        df.at[index, 'arrears_total'] = arrears_breakdown[0]\n        df.at[index, 'arrears_interest'] = arrears_breakdown[1]\n        df.at[index, 'arrears_settle'] = arrears_breakdown[2]  \n        \n    return df","084019bd":"def run_scenarios(df):\n    '''\n    Runs the balance_profile_recalculator with different scenario conditions and\n        1) Stores outputs of the recalculator\n        2) Pperforms summary statistics on results\n\n    The inputs required:\n        A DataFrame that meets criteria to run balance_profile_recalculator\n\n    The outputs:\n        A dictionary of DataFrames for scenarios 1 to 4 of the balance_profile_recalculator\n        A dictionary of Summary statistics on each scenario that can be converted into DataFrame\n    '''    \n    #Define dictionary to store output DataFrames\n    df_dict = { 'scenario_1' : None,\n                'scenario_2' : None,\n                'scenario_3' : None,\n                'scenario_4' : None} \n\n    #Define summary dictionary for each of the output DataFrames\n    summary = {}\n    \n    #Iterate through each of the scenario labels\n    for key in df_dict.keys():\n        df_scenario = df.copy()\n        \n        #get outputs from recalculator and store on dictionary\n        df_scenario = balance_profile_recalculator(df_scenario, key)\n        df_dict[key] = df_scenario\n\n        #produce summary statistics\n        cmi_paid = df_scenario[df_scenario['missed_flag'] == 0]\n        total_paid = cmi_paid['cmi_total'].sum()\n        total_interest = cmi_paid['cmi_interest'].sum()\n        closing_to_settle = list(cmi_paid['closing_amount_to_settle'])[-1]\n        closing_arrears = list(cmi_paid['arrears_total'])[-1]\n\n        #labels dictionary to easily iterate and print summary statistics\n        labels_dict = {'Scenario' : key,\n               'Total Paid' : total_paid,\n               'Total Interest' : total_interest,\n               'Closing Amount to Settle' : closing_to_settle,\n               'Closing Arrears' : closing_arrears,\n              }\n        \n        for key in labels_dict.keys():\n            value = labels_dict[key]\n            \n            #print summary statistic\n            if isinstance(value, float):\n                print(f'{key} : {value:,.2f}')\n            else:\n                print(f'{key} : {value}')\n\n            #store summary statistic in dictionary\n            if key in summary.keys():\n                summary[key].append(value)\n            else:\n                summary[key] = [value]\n                \n        display(df_scenario.head())\n        display(df_scenario.tail())\n    return df_dict, summary","daad3806":"#Define df_config DataFrame and change inputs\ndf_config = df_original.copy()\n\ndf_config.at[3:, 'monthly_rate'] = 0.01\ndf_config.at[[0,2], 'trigger_flag'] = 1\ndf_config.at[[0,1], 'missed_flag'] = 1\n\ndisplay(df_config.head())\ndisplay(df_config.tail())","e95c91b4":"#Run recalculator\ndf_scenarios_dict, scenarios_summary = run_scenarios(df_config)","e5f1bf33":"#Build summary DataFrame\ndf_summary = pd.DataFrame(scenarios_summary).set_index('Scenario')\ndf_summary","0e9a7152":"### Define the base inputs and functions for your calculator","e8c994c6":"#### Topics\n- Define the base inputs and functions for your calculator\n- Exercise 3.1: Change Inputs, Run recalculator, Analyse Results, Repeat\n","5c6fa622":"### Exercise 3.1: Change Inputs, Run recalculator, Analyse Results, Repeat","67ac172d":"## Overview Module 3 - Scenario Analysis: Arrears and Outstanding Balance\n\nIn the previous module, you built a payment pattern and kept track of customer balances through a function 'balance_profile_recalculator'.\n\nThe last exercise asked you to change the definition of Amount to Settle, from it simply being the remaining principal balance, and now also including an arrears balance. As you saw in the PowerPoints, Amount to Settle can have many more definitions.\n\nThis module will introduce a 'scenario analysis' capacity into our function. The code will be provided, and you are expected to interpret the results. Feel free to change the inputs of your model!"}}