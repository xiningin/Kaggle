{"cell_type":{"c23492a2":"code","4f5012ff":"code","51639d03":"code","bed3a018":"code","a7db18e7":"code","7ab54bc8":"code","43a61008":"code","bc098c47":"code","8d79b08d":"code","bf232fea":"code","f1512a9e":"code","7bb0bec0":"code","2e8fef55":"code","37fd8ba5":"code","c7460892":"code","04af5416":"code","132d228b":"code","caa6246e":"code","4bf4f98c":"code","8fb18f1d":"code","2bd578b5":"code","867af739":"code","7ce7dc4e":"code","871933ca":"code","8476a95a":"code","6d2c37f7":"code","9e029265":"code","6d407a93":"code","7b4c385e":"code","fb73e363":"code","ee2230ad":"code","f3cee344":"code","bb04730d":"code","6d65cb82":"code","40b2091b":"code","8cff8a01":"code","88b130ea":"code","4fcc1c9e":"code","63635a29":"code","50eeba47":"code","5d0f1147":"code","c39c4f6a":"code","e69b5740":"code","6cb7260e":"code","348d946a":"code","4e5309f0":"code","f8bb7627":"code","6ff3b325":"code","cd374ee2":"code","9afe631b":"code","50047e69":"code","5ca1b584":"code","4d0c5f96":"code","653d7b78":"code","5e068ea4":"code","828da2b9":"code","075f0f96":"code","d1c713c4":"code","47903acc":"code","fdd98f35":"code","b4b7448d":"code","3be19e74":"code","1efd5251":"code","4986db95":"code","d6af5c24":"code","b5f8b7ee":"code","f78dcb83":"markdown","98ff3e03":"markdown","bdd0c238":"markdown","aa2b941d":"markdown","0d72ef6c":"markdown","6e59f5d4":"markdown","18a29560":"markdown"},"source":{"c23492a2":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","4f5012ff":"df=pd.read_csv(\"..\/input\/pep-december-test-2\/train.csv\")\ndf.head()","51639d03":"df.info()","bed3a018":"df[df.duplicated()]","a7db18e7":"#Dropping duplicated rows\ndf.drop_duplicates(keep='first',inplace=True)","7ab54bc8":"#Converting hours into minutes and storing in \"Duration\"\ndf['Duration']=  df['Duration'].str.replace(\"h\", '*60').str.replace(' ','+').str.replace('m','*1').apply(eval)\n","43a61008":"df.head()","bc098c47":"df.Date_of_Journey.value_counts()","8d79b08d":"\ndf[\"Month_of_Journey\"]=pd.to_datetime(df[\"Date_of_Journey\"],format=\"%d\/%m\/%Y\").dt.month \ndf[\"Day_of_Journey\"]=pd.to_datetime(df[\"Date_of_Journey\"],format=\"%d\/%m\/%Y\").dt.day","bf232fea":"df","f1512a9e":"df.drop(\"Date_of_Journey\",axis=1,inplace=True)","7bb0bec0":"\ndf[\"Dep_hour\"]=pd.to_datetime(df[\"Dep_Time\"]).dt.hour\ndf[\"Dep_minute\"]=pd.to_datetime(df[\"Dep_Time\"]).dt.minute\ndf.drop(\"Dep_Time\",axis=1,inplace=True)","2e8fef55":"df.head()","37fd8ba5":"\ndf[\"Arrival_hour\"]=pd.to_datetime(df[\"Arrival_Time\"]).dt.hour\ndf[\"Arrival_minute\"]=pd.to_datetime(df[\"Arrival_Time\"]).dt.minute\n","c7460892":"df.drop(\"Arrival_Time\",axis=1,inplace=True)","04af5416":"df.head()","132d228b":"df.Airline.value_counts()","caa6246e":"#Categories which are very less in count just replacing them with \"Other\" category\ndf[\"Airline\"].replace({'Multiple carriers Premium economy':'Other', \n                                                        'Jet Airways Business':'Other',\n                                                        'Vistara Premium economy':'Other',\n                                                        'Trujet':'Other'\n                                                   },    \n                                        inplace=True)","4bf4f98c":"sns.catplot(y=\"Price\",x=\"Airline\",data=df.sort_values(\"Price\",ascending=False),kind=\"boxen\",height=6,aspect=4)","8fb18f1d":"#One Hot Encoding\nairlines=df[[\"Airline\"]]\nairlines=pd.get_dummies(airlines,drop_first=True)\nairlines.head()","2bd578b5":"df.Source.value_counts()","867af739":"sns.catplot(y=\"Price\",x=\"Source\",data=df.sort_values(\"Price\",ascending=False),kind=\"boxen\",height=6,aspect=4)","7ce7dc4e":"source=df[[\"Source\"]]\nsource=pd.get_dummies(source,drop_first=True)\nsource.head()","871933ca":"destination=df[[\"Destination\"]]\ndestination=pd.get_dummies(destination,drop_first=True)\ndestination.head()","8476a95a":"df[\"Additional_Info\"].value_counts()\n","6d2c37f7":"#Categories which are very less in count just replacing them with \"Other\" category\ndf[\"Additional_Info\"].replace({'Change airports':'Other', \n                                                        'Business class':'Other',\n                                                        '1 Short layover':'Other',\n                                                        'Red-eye flight':'Other',\n                                                        '2 Long layover':'Other',\n                                                        'No Info':'No info'\n                                                   },    \n                                        inplace=True)\n","9e029265":"df[\"Additional_Info\"].value_counts()","6d407a93":"#Label Encoding\ndf[\"Additional_Info\"].replace({'No info':0, \n                                'In-flight meal not included':1,\n                                'No check-in baggage included':2,\n                                                        '1 Long layover':3,\n                                                        'Other':4\n                                                        \n                                                   },    \n                                        inplace=True)","7b4c385e":"df[\"Route\"].value_counts()","fb73e363":"df[\"Total_Stops\"].value_counts()","ee2230ad":"#Total_Stops and Route are some what related to each other. So, dropping Route.\ndf.drop(\"Route\",axis=1,inplace=True)","f3cee344":"sns.catplot(y=\"Price\",x=\"Total_Stops\",data=df.sort_values(\"Price\",ascending=False),kind=\"boxen\",height=6,aspect=4)","bb04730d":"df[\"Total_Stops\"].replace({\"non-stop\":0,\"1 stop\":1,\"2 stops\":2,\"3 stops\":3,\"4 stops\":4},inplace=True)","6d65cb82":"df.head()","40b2091b":"df.drop([\"Airline\",\"Source\",\"Destination\"],axis=1,inplace=True)","8cff8a01":"train_data=pd.concat([df,airlines,source,destination],axis=1)\ntrain_data.head()","88b130ea":"train_data.shape","4fcc1c9e":"# Test data","63635a29":"df=pd.read_csv(\"..\/input\/pep-december-test-2\/test.csv\")\ndf.head()","50eeba47":"\ndf[\"Month_of_Journey\"]=pd.to_datetime(df[\"Date_of_Journey\"],format=\"%d\/%m\/%Y\").dt.month \ndf[\"Day_of_Journey\"]=pd.to_datetime(df[\"Date_of_Journey\"],format=\"%d\/%m\/%Y\").dt.day\ndf.drop(\"Date_of_Journey\",axis=1,inplace=True)\n\ndf[\"Dep_hour\"]=pd.to_datetime(df[\"Dep_Time\"]).dt.hour\ndf[\"Dep_minute\"]=pd.to_datetime(df[\"Dep_Time\"]).dt.minute\ndf.drop(\"Dep_Time\",axis=1,inplace=True)\n\ndf[\"Arrival_hour\"]=pd.to_datetime(df[\"Arrival_Time\"]).dt.hour\ndf[\"Arrival_minute\"]=pd.to_datetime(df[\"Arrival_Time\"]).dt.minute\ndf.drop(\"Arrival_Time\",axis=1,inplace=True)\ndf['Duration']=  df['Duration'].str.replace(\"h\", '*60').str.replace(' ','+').str.replace('m','*1').apply(eval)\ndf[\"Airline\"].replace({'Multiple carriers Premium economy':'Other', \n                                                        'Jet Airways Business':'Other',\n                                                        'Vistara Premium economy':'Other',\n                                                        'Trujet':'Other'\n                                                   },    \n                                        inplace=True)\nairlines=df[[\"Airline\"]]\nairlines=pd.get_dummies(airlines,drop_first=True)\n\nsource=df[[\"Source\"]]\nsource=pd.get_dummies(source,drop_first=True)\n\ndestination=df[[\"Destination\"]]\ndestination=pd.get_dummies(destination,drop_first=True)\n\ndf[\"Additional_Info\"].replace({'Change airports':'Other', \n                                                        'Business class':'Other',\n                                                        '1 Short layover':'Other',\n                                                        'Red-eye flight':'Other',\n                                                        '2 Long layover':'Other',\n                                                        'No Info':'No info'\n                                                   },    \n                                        inplace=True)\n\ndf[\"Additional_Info\"].replace({'No info':0, \n                                'In-flight meal not included':1,\n                                'No check-in baggage included':2,\n                                                        '1 Long layover':3,\n                                                        'Other':4\n                                                        \n                                                   },    \n                                        inplace=True)\ndf.drop(\"Route\",axis=1,inplace=True)\n\ndf[\"Total_Stops\"].replace({\"non-stop\":0,\"1 stop\":1,\"2 stops\":2,\"3 stops\":3,\"4 stops\":4},inplace=True)\ndf.drop([\"Airline\",\"Source\",\"Destination\"],axis=1,inplace=True)\ntest_data=pd.concat([df,airlines,source,destination],axis=1)\n\n","5d0f1147":"test_data.shape","c39c4f6a":"train_data.columns","e69b5740":"x_train=train_data.drop(\"Price\",axis=1)\ny_train=train_data[\"Price\"]\nx_test=test_data.drop(\"id\",axis=1)","6cb7260e":"#Replacing nan value in \"Total_Stops\" in x_test\nx_test[\"Total_Stops\"].replace({np.nan:1.0},inplace=True)","348d946a":"from sklearn.feature_selection import mutual_info_classif\nmutual_info=mutual_info_classif(x_train,y_train)\nmutual_data=pd.Series(mutual_info,index=x_train.columns)\nmutual_data.sort_values(ascending=False)","4e5309f0":"from sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\nordered_rank_features=SelectKBest(score_func=chi2,k='all')\nordered_feature=ordered_rank_features.fit(x_train,y_train)\ndfscores=pd.DataFrame(ordered_feature.scores_,columns=[\"Score\"])\ndfcolumns=pd.DataFrame(x_train.columns)\nfeatures_rank=pd.concat([dfcolumns,dfscores],axis=1)\nfeatures_rank.columns=['Features','Score']\nfeatures_rank","f8bb7627":"#Picking top 25 features only\nfeatures_rank.nlargest(25,'Score')","6ff3b325":"f=features_rank.sort_values(by=['Score'],ascending=False)\nl=list(f[\"Features\"])\nprint(l)","cd374ee2":"columnsR=['Duration', 'Dep_minute', 'Arrival_minute', 'Day_of_Journey', 'Arrival_hour', 'Dep_hour', 'Additional_Info', 'Airline_Other', 'Destination_Kolkata', 'Source_Chennai', 'Airline_Vistara', 'Destination_Hyderabad', 'Source_Mumbai', 'Airline_GoAir', 'Airline_Multiple carriers', 'Destination_New Delhi', 'Destination_Delhi', 'Airline_SpiceJet', 'Airline_Air India', 'Airline_IndiGo', 'Source_Kolkata', 'Airline_Jet Airways', 'Source_Delhi', 'Destination_Cochin', 'Total_Stops']","9afe631b":"x_train_final=pd.DataFrame(x_train,columns=columnsR)","50047e69":"x_train_final.shape","5ca1b584":"x_test_final=pd.DataFrame(x_test,columns=columnsR)","4d0c5f96":"x_test_final.shape","653d7b78":"#from sklearn.ensemble import RandomForestRegressor\n#rf = RandomForestRegressor()\n","5e068ea4":"#from sklearn.model_selection import RandomizedSearchCV","828da2b9":"#n_estimators = [int(x) for x in np.linspace(start = 100, stop = 1200, num = 12)]\n#max_features = ['auto', 'sqrt']\n#max_depth = [int(x) for x in np.linspace(5, 30, num = 5)]\nmin_samples_split = [2, 5, 10, 15, 100]\nmin_samples_leaf = [1, 2, 5, 10]","075f0f96":"random_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf}","d1c713c4":"rf_random = RandomizedSearchCV(estimator = rf, param_distributions = random_grid,scoring='neg_mean_squared_error', n_iter = 10, cv = 5, n_jobs=-1)","47903acc":"rf_random.fit(x_train_final,y_train)","fdd98f35":"rf_random.best_params_","b4b7448d":"rf2 = RandomForestRegressor(n_estimators= 900,min_samples_split= 10,min_samples_leaf=1,max_features= 'auto',max_depth= 30)","3be19e74":"rf2.fit(x_train_final,y_train)","1efd5251":"y_test=rf2.predict(x_test_final)","4986db95":"from sklearn.ensemble import GradientBoostingRegressor","d6af5c24":"regressor = GradientBoostingRegressor(n_estimators = 100, learning_rate = 0.3, criterion = 'friedman_mse')\nregressor.fit(x_train_final, y_train)\ny_test = regressor.predict(x_test_final)","b5f8b7ee":"output=pd.DataFrame({\"id\":df[\"id\"],\"Price\":y_test})\noutput.to_csv(\"submission.csv\",index=False)","f78dcb83":"# Hyper parameter tuning","98ff3e03":"# In Total_Stops we have to apply ordinal encoding","bdd0c238":"# Feature Selection","aa2b941d":"# Similarly like \"Date_of_Journey\" we need to convert \"Dep_Time\" and \"Arrival_Time\" into a timestamp using to_datetime function and extract hour and minute","0d72ef6c":"# Handling Categorical features\n1. Ordinal data: Data are in order(LabelEncoder can be used)\n2. Nominal data: Data not in order(OneHotEncoder is used)","6e59f5d4":"Stops are increaing then price is also increaing","18a29560":"# Date_of_Journey is a object data type but we need to convert it into a timestamp using to_datetime function and extract day and month"}}