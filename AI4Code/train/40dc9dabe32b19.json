{"cell_type":{"73976464":"code","90007f91":"code","ceab4aef":"code","27ec9f64":"code","9b2d6321":"code","839c6dee":"code","3e973951":"code","6cec4939":"code","91f4c82b":"code","aab066e7":"code","9ace0b51":"code","35d6836f":"code","967dbda7":"code","2c70c718":"code","cc8c7daf":"code","4324f0a2":"code","4aa65ad6":"code","2e644dd5":"code","64b3d5dd":"code","cea7c3a7":"code","4e89423f":"code","5f3e552f":"code","7bceb1d1":"code","bba9a99f":"code","223eca74":"code","8c75a1ad":"code","1a01052d":"code","1eec9264":"code","8af5c00d":"code","2d14493d":"code","b72dd063":"code","6cf8b16e":"code","4c48e143":"code","d731b9dd":"code","3497ed3a":"code","bde6d1e1":"code","fb3f9427":"code","244c8067":"code","bcdefa62":"code","adcd9b48":"code","545c0bb4":"code","59277417":"code","15f57514":"code","37c5d738":"code","c2cd8eeb":"code","565ee313":"code","0f5fb73d":"code","2a656228":"code","5cb9a70c":"code","78698d1f":"code","feaf9ddb":"code","755fe155":"code","def7131c":"code","3a532a88":"code","e68da65c":"code","49ed13ba":"code","a890e011":"code","211f667b":"code","fb76e398":"code","9bb4b110":"code","19bd3893":"code","0fa2ab22":"code","d602ee39":"code","9204a1e1":"code","24eecbb9":"code","4e6fa04d":"code","c990262a":"code","f4193025":"code","0210b39d":"code","39b2847f":"code","5070cc45":"code","44808186":"code","62260ac2":"code","719ec00f":"code","3b89de02":"code","04ee4feb":"code","a3dabc46":"code","e72daddd":"code","55df7630":"markdown","06d7bab6":"markdown","6c26c077":"markdown","9b3c7633":"markdown","803835f2":"markdown","fb1d9d66":"markdown","4a4b5923":"markdown","6b7ba1c8":"markdown","6682ffe3":"markdown","7bc5a401":"markdown","0bd3c49c":"markdown","44c2fecc":"markdown","5e4ea244":"markdown","ab6381c5":"markdown","0ac9a0c6":"markdown","254b6d19":"markdown","90b9e548":"markdown","af005e5f":"markdown","4b5f6a17":"markdown","3ef156bb":"markdown","bb9e6ec6":"markdown","c6351cdc":"markdown","9173e3af":"markdown","3ebfd4eb":"markdown","3505dc5e":"markdown"},"source":{"73976464":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","90007f91":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import load_iris\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import train_test_split\nimport seaborn as sns","ceab4aef":"df = pd.read_csv('\/kaggle\/input\/cleaned-auto-dataset-1985\/auto_raw_data.csv',header=None)\ndf.head()","27ec9f64":"column_names = ['symboling','normalized_losses', 'CarName','fueltype','aspiration','doornumber','carbody','drivewheel','enginelocation',\n               'wheelbase','carlength','carwidth','carheight','curbweight','enginetype','cylindernumber','enginesize','fuelsystem',\n               'boreratio','stroke','compressionratio','horsepower','peakrpm','citympg','highwaympg','price'] # Its better to have domain knowledge before naming the columns.\ndf.columns = column_names\ndf.head()","9b2d6321":"#check missing values\nplt.figure(figsize=(12,4))\nsns.heatmap(df.isnull(),cbar=False,cmap='Wistia',yticklabels=False)\nplt.title('Missing value in the dataset');","839c6dee":"def removenotnum(list1):\n notnum = []\n\n for x in list1:\n   try:\n     float(x)\n     \n   except:\n     notnum.append(x)\n return notnum\n\nnotnumtable = removenotnum(df['normalized_losses'])\nprint(notnumtable)\nprint('Percent of identified rubbish data in Table \u2192 {:.3f}%'.format(len(notnumtable) \/ len(df['normalized_losses'])*100))","3e973951":"rubbish=['?']\nn_l = df['normalized_losses'][~df['normalized_losses'].isin(rubbish)]\nn_l = n_l.astype('int64')\nsns.displot(x=n_l, kind=\"hist\",kde=True, bins = 100, aspect = 5.5)","6cec4939":"print('median:{}'.format(n_l.median()))","91f4c82b":"df['normalized_losses'].replace({'?':'115'}, inplace=True)","aab066e7":"df['doornumber'].unique()","9ace0b51":"len(df[df['doornumber'] == '?'])","35d6836f":"rubbish=['?']\nd_n = df['doornumber'][~df['doornumber'].isin(rubbish)]\n\nprint('mode:{}'.format(d_n.mode()))\ndf['doornumber'].replace({'?':'four'}, inplace=True)","967dbda7":"df['carbody'].unique()","2c70c718":"df['drivewheel'].unique()","cc8c7daf":"df['enginelocation'].unique()","4324f0a2":"df['enginetype'].unique()","4aa65ad6":"df['cylindernumber'].unique()","2e644dd5":"df['fuelsystem'].unique()","64b3d5dd":"df['boreratio'].unique()","cea7c3a7":"df['stroke'].unique()","4e89423f":"def removenotnum(list1):\n notnum = []\n\n for x in list1:\n   try:\n     float(x)\n     \n   except:\n     notnum.append(x)\n return notnum\n\nnotnumtable = removenotnum(df['boreratio'])\nprint(notnumtable)\nprint('Percent of identified rubbish data in Table \u2192 {:.3f}%'.format(len(notnumtable) \/ len(df['boreratio'])*100))\n","5f3e552f":"rubbish=['?']\nb_r = df['boreratio'][~df['boreratio'].isin(rubbish)]\nb_r = b_r.astype('float64')\n","7bceb1d1":"sns.displot(x=b_r, kind=\"hist\",kde=True, bins = 100, aspect = 5.5)","bba9a99f":"print('mean:{}'.format(b_r.mean()))\nprint('median:{}'.format(b_r.median()))\nprint('mode:{}'.format(b_r.mode()))","223eca74":"df['boreratio'].replace({'?':'3.31'}, inplace=True)\ndf['boreratio']=df['boreratio'].astype('float64')","8c75a1ad":"def removenotnum(list1):\n notnum = []\n\n for x in list1:\n   try:\n     float(x)\n     \n   except:\n     notnum.append(x)\n return notnum\n\nnotnumtable = removenotnum(df['stroke'])\nprint(notnumtable)\nprint('Percent of identified rubbish data in Table \u2192 {:.3f}%'.format(len(notnumtable) \/ len(df['stroke'])*100))\n","1a01052d":"rubbish=['?']\ns_t = df['stroke'][~df['stroke'].isin(rubbish)]\ns_t = s_t.astype('float64')\n","1eec9264":"sns.displot(x=s_t, kind=\"hist\",kde=True, bins = 100, aspect = 5.5)","8af5c00d":"print('mean:{}'.format(s_t.mean()))\nprint('median:{}'.format(s_t.median()))\nprint('mode:{}'.format(s_t.mode()))","2d14493d":"df['stroke'].replace({'?':'3.29'}, inplace=True)\ndf['stroke']=df['stroke'].astype('float64')","b72dd063":"df['horsepower'].unique()","6cf8b16e":"def removenotnum(list1):\n notnum = []\n\n for x in list1:\n   try:\n     float(x)\n     \n   except:\n     notnum.append(x)\n return notnum\n\nnotnumtable = removenotnum(df['horsepower'])\nprint(notnumtable)\nprint('Percent of identified rubbish data in Table \u2192 {:.3f}%'.format(len(notnumtable) \/ len(df['horsepower'])*100))\n","4c48e143":"rubbish=['?']\nh_p = df['horsepower'][~df['horsepower'].isin(rubbish)]\nh_p = h_p.astype('int64')\n","d731b9dd":"sns.displot(x=h_p, kind=\"hist\",kde=True, bins = 100, aspect = 5.5)","3497ed3a":"print('mean:{}'.format(h_p.mean()))\nprint('median:{}'.format(h_p.median()))\nprint('mode:{}'.format(h_p.mode()))","bde6d1e1":"df['horsepower'].replace({'?':'95'}, inplace=True)\ndf['horsepower']=df['horsepower'].astype('int64')","fb3f9427":"df['peakrpm'].unique()","244c8067":"def removenotnum(list1):\n notnum = []\n\n for x in list1:\n   try:\n     float(x)\n     \n   except:\n     notnum.append(x)\n return notnum\n\nnotnumtable = removenotnum(df['peakrpm'])\nprint(notnumtable)\nprint('Percent of identified rubbish data in Table \u2192 {:.3f}%'.format(len(notnumtable) \/ len(df['peakrpm'])*100))\n","bcdefa62":"rubbish=['?']\np_r = df['peakrpm'][~df['peakrpm'].isin(rubbish)]\np_r = p_r.astype('int64')\n","adcd9b48":"sns.displot(x=p_r, kind=\"hist\",kde=True, bins = 100, aspect = 5.5)","545c0bb4":"print('mean:{}'.format(p_r.mean()))\nprint('median:{}'.format(p_r.median()))\nprint('mode:{}'.format(p_r.mode()))","59277417":"df['peakrpm'].replace({'?':'5200'}, inplace=True)\ndf['peakrpm']=df['peakrpm'].astype('int64')","15f57514":"def removenotnum(list1):\n notnum = []\n\n for x in list1:\n   try:\n     float(x)\n     \n   except:\n     notnum.append(x)\n return notnum\n\nnotnumtable = removenotnum(df['price'])\nprint(notnumtable)\nprint('Percent of identified rubbish data in Table \u2192 {:.3f}%'.format(len(notnumtable) \/ len(df['price'])*100))\n","37c5d738":"rubbish=['?']\npr = df['price'][~df['price'].isin(rubbish)]\npr = pr.astype('int64')\n","c2cd8eeb":"sns.displot(x=pr, kind=\"hist\",kde=True, bins = 100, aspect = 5.5)","565ee313":"print('mean:{}'.format(pr.mean()))\nprint('median:{}'.format(pr.median()))\nprint('mode:{}'.format(pr.mode()))","0f5fb73d":"df['price'].replace({'?':'10295'}, inplace=True)\ndf['price']=df['price'].astype('int64')","2a656228":"df['price'].unique()","5cb9a70c":"df['symboling'] = df.symboling.astype('category')\ndf['CarName'] = df.CarName.astype('category')\ndf.normalized_losses=df.normalized_losses.astype('int64')\ndf.dtypes","78698d1f":"target_counts= df['CarName'].value_counts()\n\nfig, ax = plt.subplots(1, 2, figsize=(15,7))\ntarget_counts_barplot = sns.barplot(y = target_counts.index,x = target_counts.values, ax = ax[0])\ntarget_counts_barplot.set_ylabel('Models of Car Brand')\nax[0].set_facecolor('white')\n#colors = ['#8d99ae','#ffe066', '#f77f00','#348aa7','#bce784','#ffcc99',  '#f25f5c']\ntarget_counts.plot.pie(autopct=\"%1.1f%%\", ax=ax[1])","feaf9ddb":"target_counts= df['fueltype'].value_counts()\n\nfig, ax = plt.subplots(1, 2, figsize=(15,7))\ntarget_counts_barplot = sns.barplot(x = target_counts.index,y = target_counts.values, ax = ax[0])\ntarget_counts_barplot.set_ylabel('Count')\n\n#colors = ['#8d99ae','#ffe066', '#f77f00','#348aa7','#bce784','#ffcc99',  '#f25f5c']\ntarget_counts.plot.pie(autopct=\"%1.1f%%\", ax=ax[1])\nfig.suptitle('Fuel Type')","755fe155":"target_counts= df['aspiration'].value_counts()\n\nfig, ax = plt.subplots(1, 2, figsize=(15,7))\ntarget_counts_barplot = sns.barplot(x = target_counts.index,y = target_counts.values, ax = ax[0])\ntarget_counts_barplot.set_ylabel('Count')\n\n#colors = ['#8d99ae','#ffe066', '#f77f00','#348aa7','#bce784','#ffcc99',  '#f25f5c']\ntarget_counts.plot.pie(autopct=\"%1.1f%%\", ax=ax[1])\n                                \nfig.suptitle('Aspiration')","def7131c":"target_counts= df['doornumber'].value_counts()\n\nfig, ax = plt.subplots(1, 2, figsize=(15,7))\ntarget_counts_barplot = sns.barplot(x = target_counts.index,y = target_counts.values, ax = ax[0])\ntarget_counts_barplot.set_ylabel('Count')\n\n#colors = ['#8d99ae','#ffe066', '#f77f00','#348aa7','#bce784','#ffcc99',  '#f25f5c']\ntarget_counts.plot.pie(autopct=\"%1.1f%%\", ax=ax[1])\nfig.suptitle('Number of Doors')","3a532a88":"target_counts= df['carbody'].value_counts()\n\nfig, ax = plt.subplots(1, 2, figsize=(15,7))\ntarget_counts_barplot = sns.barplot(x = target_counts.index,y = target_counts.values, ax = ax[0])\ntarget_counts_barplot.set_ylabel('Count')\n\n#colors = ['#8d99ae','#ffe066', '#f77f00','#348aa7','#bce784','#ffcc99',  '#f25f5c']\ntarget_counts.plot.pie(autopct=\"%1.1f%%\", ax=ax[1])\nfig.suptitle('Body Type')","e68da65c":"target_counts= df['drivewheel'].value_counts()\n\nfig, ax = plt.subplots(1, 2, figsize=(15,7))\ntarget_counts_barplot = sns.barplot(x = target_counts.index,y = target_counts.values, ax = ax[0])\ntarget_counts_barplot.set_ylabel('Count')\n\n#colors = ['#8d99ae','#ffe066', '#f77f00','#348aa7','#bce784','#ffcc99',  '#f25f5c']\ntarget_counts.plot.pie(autopct=\"%1.1f%%\", ax=ax[1])\nfig.suptitle('Drive Wheel')","49ed13ba":"target_counts= df['enginelocation'].value_counts()\n\nfig, ax = plt.subplots(1, 2, figsize=(15,7))\ntarget_counts_barplot = sns.barplot(x = target_counts.index,y = target_counts.values, ax = ax[0])\ntarget_counts_barplot.set_ylabel('Count')\n\n#colors = ['#8d99ae','#ffe066', '#f77f00','#348aa7','#bce784','#ffcc99',  '#f25f5c']\ntarget_counts.plot.pie(autopct=\"%1.1f%%\", ax=ax[1])\nfig.suptitle('Engine Location')","a890e011":"target_counts= df['enginetype'].value_counts()\n\nfig, ax = plt.subplots(1, 2, figsize=(15,7))\ntarget_counts_barplot = sns.barplot(x = target_counts.index,y = target_counts.values, ax = ax[0])\ntarget_counts_barplot.set_ylabel('Count')\n\n#colors = ['#8d99ae','#ffe066', '#f77f00','#348aa7','#bce784','#ffcc99',  '#f25f5c']\ntarget_counts.plot.pie(autopct=\"%1.1f%%\", ax=ax[1])\nfig.suptitle('Engine Type')","211f667b":"target_counts= df['cylindernumber'].value_counts()\n\nfig, ax = plt.subplots(1, 2, figsize=(15,7))\ntarget_counts_barplot = sns.barplot(x = target_counts.index,y = target_counts.values, ax = ax[0])\ntarget_counts_barplot.set_ylabel('Count')\n\n#colors = ['#8d99ae','#ffe066', '#f77f00','#348aa7','#bce784','#ffcc99',  '#f25f5c']\ntarget_counts.plot.pie(autopct=\"%1.1f%%\", pctdistance=0.6, ax=ax[1])\nfig.suptitle('Number of Cylinders')","fb76e398":"target_counts= df['fuelsystem'].value_counts()\n\nfig, ax = plt.subplots(1, 2, figsize=(15,7))\ntarget_counts_barplot = sns.barplot(x = target_counts.index,y = target_counts.values, ax = ax[0])\ntarget_counts_barplot.set_ylabel('Count')\n\n#colors = ['#8d99ae','#ffe066', '#f77f00','#348aa7','#bce784','#ffcc99',  '#f25f5c']\ntarget_counts.plot.pie(autopct=\"%1.1f%%\",pctdistance=0.8, ax=ax[1])\nfig.suptitle('Fuel System')","9bb4b110":"sns.displot(df, x=\"compressionratio\", hue='fueltype',kde=True)\nplt.gcf().set_size_inches(11.7, 8.27)","19bd3893":"g=sns.PairGrid(data = df,vars = ['wheelbase','horsepower','carlength','carwidth','price'])\ng.map_upper(sns.regplot,ci=None, scatter_kws={'s':15}, line_kws={\"color\": \"green\"})\ng.map_upper(sns.regplot,ci=90,line_kws={\"color\": \"red\"},order=3,scatter=False)\ng.map_diag(sns.histplot)\ng.map_lower(sns.scatterplot)","0fa2ab22":"g=sns.PairGrid(data = df,vars = ['carheight','curbweight','enginesize','boreratio','price'])\ng.map_upper(sns.regplot,ci=None, scatter_kws={'s':15}, line_kws={\"color\": \"green\"})\ng.map_upper(sns.regplot,ci=90, line_kws={\"color\": \"red\"},order=3,scatter=False)\ng.map_diag(sns.histplot)\ng.map_lower(sns.scatterplot)","d602ee39":"g=sns.PairGrid(data = df,vars = ['stroke','peakrpm','citympg','highwaympg','price'])\ng.map_upper(sns.regplot,ci=None, scatter_kws={'s':15}, line_kws={\"color\": \"green\"})\ng.map_upper(sns.regplot,ci=90, line_kws={\"color\": \"red\"},order=3,scatter=False)\ng.map_diag(sns.histplot)\ng.map_lower(sns.scatterplot)","9204a1e1":"cat_cols=[]\nfor col in df.columns:\n    if df[col].dtypes=='object':\n        cat_cols.append(col)\ncat_cols","24eecbb9":"df.to_csv('auto_clean_1985_dataset.csv',index=False)","4e6fa04d":"df = pd.get_dummies(data = df,\n               columns = cat_cols,\n               drop_first =True,\n              dtype='int8')\ndf.columns","c990262a":"plt.figure(figsize=(20,15))\nsns.heatmap(df.corr(), cmap='hsv',annot=False)","f4193025":"df.dtypes","0210b39d":"num_cols=[]\nfor col in df.columns:\n    if df[col].dtypes=='int64' or df[col].dtypes=='float64':\n        num_cols.append(col)\nnum_cols","39b2847f":"\n# first let convert the X in to minmax scaler and identify the outliers\nfrom sklearn.preprocessing import MinMaxScaler\n\nsc = MinMaxScaler(feature_range =(0,1))\n\ndf[num_cols] = pd.DataFrame(sc.fit_transform(df[num_cols]))\n\ndf.boxplot(figsize = (12.8,8), rot = 90)\nplt.boxplot\nplt.show()","5070cc45":"df.head()","44808186":"X=df.drop(columns=['price','CarName'])","62260ac2":"X.head()","719ec00f":"from sklearn.cluster import KMeans\nk_rng = range(1,10)\n\nsse1 = []\n\nfor k1 in k_rng:\n    km1 = KMeans(n_clusters = k1)\n    km1.fit(X)\n    sse1.append(km1.inertia_)\n    \nplt.plot(k_rng,sse1,marker='*')\nplt.ylabel('SSE')\nplt.xticks(k_rng)\nplt.xlabel('K_values')","3b89de02":"km = KMeans(n_clusters = 4)\nkm.fit(X)\ny_predict = km.predict(X)\ndf['cluster_Number']=y_predict","04ee4feb":"cluster_category = {0:'Budget',1:'Luxury',2:'Premium',3:'Economy'}\n\ndf['cluster'] = df['cluster_Number'].map(cluster_category)","a3dabc46":"sns.scatterplot(data=df, x = \"price\", y=\"price\",hue=\"cluster\",palette=['green','orange','brown','dodgerblue'])\nplt.legend(bbox_to_anchor=(1.25, 1),\n           borderaxespad=0)","e72daddd":"sns.scatterplot(data=df, x = \"symboling\", y=\"price\",hue=\"cluster\",palette=['green','orange','brown','dodgerblue'])\nplt.legend(bbox_to_anchor=(1.25, 1),\n           borderaxespad=0)","55df7630":"Similarly for the \"doornumber\" column which is categorical we found rubbish data and replace it with \"Mode\" of the column. \n\nSimilarly for \"boreratio\" , \"stroke\", \"horsepower\", \"price\" and \"peakrpm\" columns, we follow the same procedure as done for the \"normalized_losses\" column as mentioned above.\n\nNow all the rubbish data is replaced with the respective mean, median and mode. We will replace few categorical columns with OHE (one hot encoding).\n","06d7bab6":"We will change \"symboling\" and \"CarName\" column as type category. As we dont want to perform the OHE on them.","6c26c077":"We selected 4 as optimimum number of clusters.","9b3c7633":"We perform the cleaning of Auto Dataset 1985 and perform the elementary **EDA** and cluster the data using **K-means** . Interested members can perform further analysis using the cleaned dataset. ","803835f2":"It is found that the data is positive skewed so we replace the data with the \"Median value\".","fb1d9d66":"Now lets check data each of the column and find if there are any NULL values or \"Rubbish\" data to be reomved before we proceed with the descriptive analysis.","4a4b5923":"A small code to identify the rubbish data in each column. And, impute it with appropriate values.","6b7ba1c8":"So we replace the '?' value with either mean or median of the other column values depending upon the distribution.\n\nBefore we go in, we will make an array of remaining values of the column to find the distribution and mean & median of the remaining data.","6682ffe3":"Transforming the numerical data columns with MinMaxScaler.","7bc5a401":"There is no null data in any of the columns. But there is some rubbish data. We will identify and clean it. \n\nSo there is no NULL data in any of the columns.\n\nLets check for \"Rubbish\" data by checking unique values for each column and replacing the rubbish data with the mean data if the data is numerical and normally distributed. If it is skewed we replace it with Median value. If the data is categorical we replace it with the mode values. We can even remove the records if the rubbish data accounts to less than 0.5% records of the total data.\n\nlets check for \"normalized_losses\" column, it is found that 20% of the data is rubbish.","0bd3c49c":"The above figure represents the correlation between the numerical data columns and helps to select the appropriate column features with higher importance if needed.","44c2fecc":"Lets  check each of the column and it is found that no column is provided with the names.\n\nSo now lets name each of the column accordingly.","5e4ea244":"# Elementary Exploratory Data Analysis","ab6381c5":"Without using the output label of 'price' column we will cluster the data to identify it into four types. ","0ac9a0c6":"Now lets perform the OHE only on the columns with type \"object\". \n\nSo we collect the columns with dtype object.","254b6d19":"We categorize the cluster values depending upon the price. ","90b9e548":"Lets read the data.","af005e5f":"Identifying the optimized number of clusters.","4b5f6a17":"# Cleaning of DataSet","3ef156bb":"Looking from the data compression ratio is easily classified depending upon the fueltype. So we can remove either of one column to progress with our analysis.\n\nOnly numerical data distribution and linear and polynomial regression of order 4 is considered to look at the distribution of data.\n\nThe green line represents the linear regression line and the red line represents the polynomial fit of order 4 and with confidence interval of 90%.","bb9e6ec6":"So we replace the value with 115","c6351cdc":"The above figure can be used to determine the outliers and help in removing the outliers if needed. ","9173e3af":"Before we dig into performing model experiments. We will convert all the categorical columns in to OHE (one hot encoded vector) and drop the first columns to avoid the dummy trap. ","3ebfd4eb":"Writing the clean dataset to the output. ","3505dc5e":"# K-Means Cluster"}}