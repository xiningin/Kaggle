{"cell_type":{"78b74f3a":"code","9fa4b07c":"code","4b5dab19":"code","88379fa3":"code","8f978419":"code","990a8fa5":"code","79d04acb":"code","5e99c74e":"code","c487dfc3":"code","e5ff50b9":"code","ba751e9a":"code","3381e6c0":"code","b77d6a8d":"code","26d6dc6d":"code","38b387b9":"markdown"},"source":{"78b74f3a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport keras\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot\nfrom keras.callbacks import EarlyStopping\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.callbacks import ModelCheckpoint\nfrom sklearn.model_selection import train_test_split\nes = EarlyStopping(monitor='val_loss', mode='min', verbose=1)\nfrom datetime import datetime\n\nstandard_scaler = StandardScaler()\nminmax_scaler = MinMaxScaler()\nes = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=200)\nmc = ModelCheckpoint('best_model.h5', monitor='val_accuracy', mode='max', verbose=1, save_best_only=True)\nlearning_rate_reduction = keras.callbacks.ReduceLROnPlateau(monitor='val_acc', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.0001)\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","9fa4b07c":"test_df = pd.read_csv('\/kaggle\/input\/Kannada-MNIST\/test.csv')\ntrain_df = pd.read_csv('\/kaggle\/input\/Kannada-MNIST\/train.csv')","4b5dab19":"test_df = test_df.drop(['id'], axis=1)\n#test_df = minmax_scaler.fit_transform(test_df)\ntest_df","88379fa3":"Y_train_df = train_df['label']\nY_train_df = keras.utils.np_utils.to_categorical(Y_train_df)\nY_train_df.shape","8f978419":"X_train_df = train_df.drop(columns=\"label\")\n#X_train_df = minmax_scaler.fit_transform(X_train_df)\nX_train_df.shape","990a8fa5":"np.random.seed(7)\nX_train, X_valid, y_train, y_valid = train_test_split(X_train_df, Y_train_df, test_size=0.10, random_state=7)","79d04acb":"def create_model(train_data):\n    # create model\n    model = keras.models.Sequential()\n    model.add(keras.layers.Dense(50000, input_dim=train_data.shape[1], kernel_initializer=keras.initializers.glorot_normal(seed=None)))\n    model.add(keras.layers.Activation('relu'))\n    model.add(keras.layers.Dropout(0.35))\n    model.add(keras.layers.Dense(2000, kernel_initializer=keras.initializers.glorot_normal(seed=70)))\n    model.add(keras.layers.Activation('relu'))\n    model.add(keras.layers.Dropout(0.35))\n    model.add(keras.layers.Dense(10))\n    model.add(keras.layers.Activation(\"softmax\"))\n    # Compile model\n    model.compile(optimizer ='rmsprop', loss = 'categorical_crossentropy', metrics=['accuracy']) \n    return model","5e99c74e":"model = create_model(X_train_df)","c487dfc3":"history = model.fit(X_train, y_train, validation_data=(X_valid, y_valid), epochs=170,batch_size=500, callbacks=[es, mc, learning_rate_reduction])\n#history = model.fit(X_train_df, Y_train_df, epochs=40,batch_size=500, callbacks=[es, mc])","e5ff50b9":"# plot training history\npyplot.plot(history.history['loss'], label='train')\npyplot.plot(history.history['val_loss'], label='test')\npyplot.legend()\npyplot.show()\n","ba751e9a":"best_model = keras.models.load_model('best_model.h5')","3381e6c0":"answer = model.predict(test_df)\n#answer = best_model.predict(test_df)\nanswer = answer.astype(int)\ny = np.argmax(answer, axis=-1)\ny","b77d6a8d":"frames_answer = pd.DataFrame({\"id\": pd.DataFrame(y).index.values,\n                             \"label\": y\n                            })\nframes_answer","26d6dc6d":"frames_answer.to_csv('submission.csv', index=False)","38b387b9":"* "}}