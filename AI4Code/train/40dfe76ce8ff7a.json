{"cell_type":{"6905cd40":"code","41efd962":"code","373f79e7":"code","d90e5040":"code","ffeab78f":"code","244e4433":"code","702b35ea":"code","ce9a596c":"code","39290b8d":"code","ed477207":"code","21a898c6":"code","8179007d":"code","8c500d02":"code","18e2781d":"code","ead86854":"code","ab43d5f8":"code","888ef3fb":"code","f65f497c":"code","3378d4e9":"code","9daa0c61":"markdown","88921f28":"markdown","acae9c79":"markdown","3e2f11cd":"markdown","fadd20e9":"markdown","e58b1cbc":"markdown","f01c2daf":"markdown","e784b806":"markdown","d8051716":"markdown","76bd3e45":"markdown","4887b511":"markdown","04194acd":"markdown"},"source":{"6905cd40":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\n%matplotlib inline\n\nnp.random.seed(2)\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D,BatchNormalization\nfrom keras.optimizers import Adam, RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\nsns.set(style='white', context='notebook', palette='deep')","41efd962":"train = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('..\/input\/digit-recognizer\/test.csv')","373f79e7":"Y_train = train['label']\n\nX_train = train.drop(labels=['label'], axis = 1)\n\ng = sns.countplot(Y_train)\nY_train.value_counts()","d90e5040":"X_train.isnull().any().describe()","ffeab78f":"test.isnull().any().describe()","244e4433":"X_train = X_train \/ 255.0\ntest = test \/ 255.0","702b35ea":"X_train = X_train.values.reshape(-1, 28, 28, 1)\ntest = test.values.reshape(-1, 28, 28, 1)","ce9a596c":"Y_train = to_categorical(Y_train, num_classes=10)","39290b8d":"random_seed = 2\n\nX_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size = 0.1, random_state=random_seed)","ed477207":"g = plt.imshow(X_train[0][:,:,0])","21a898c6":"model = Sequential()\n\nmodel.add(Conv2D(32,kernel_size=3,activation='relu',input_shape=(28,28,1)))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(32,kernel_size=3,activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(32,kernel_size=5,strides=2,padding='same',activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.4))\n\nmodel.add(Conv2D(64,kernel_size=3,activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(64,kernel_size=3,activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(64,kernel_size=5,strides=2,padding='same',activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.4))\n\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.4))\nmodel.add(Dense(10, activation='softmax'))\n\nmodel.summary()","8179007d":"optimizer = RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)\n# optimizer = Adam(lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=None, decay=0.0, amsgrad=False)","8c500d02":"model.compile(optimizer = optimizer, loss='categorical_crossentropy', metrics=['accuracy'])","18e2781d":"learning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', patience=3, verbose=1, factor=0.5, min_lr=0.00001)\n\nepochs = 50\nbatch_size = 10","ead86854":"datagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False,  # randomly flip images\n)\n\ndatagen.fit(X_train)","ab43d5f8":"history = model.fit_generator(datagen.flow(X_train,Y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (X_val,Y_val),\n                              verbose = 2, steps_per_epoch=X_train.shape[0] \/\/ batch_size\n                              , callbacks=[learning_rate_reduction])","888ef3fb":"fig, ax = plt.subplots(2,1)\nax[0].plot(history.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(history.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(history.history['accuracy'], color='b', label=\"Training accuracy\")\nax[1].plot(history.history['val_accuracy'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)","f65f497c":"# predict results\nresults = model.predict(test)\n\n# select the indix with the maximum probability\nresults = np.argmax(results,axis = 1)\n\nresults = pd.Series(results,name=\"Label\")","3378d4e9":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"cnn_mnist_datagen.csv\",index=False)","9daa0c61":"## 2.5. Label encoding","88921f28":"## 3.2. Set the optimizer and annealer","acae9c79":"# 3. CNN\n## 3.1. Define the model","3e2f11cd":"## 2.2. Check for null and missing values","fadd20e9":"# 4. Evaluate the model\n## 4.1. Training and validation curves","e58b1cbc":"## 2.3. Normalization","f01c2daf":"# 2. Data preparation\n## 2.1. Load data","e784b806":"## 2.4. Reshape","d8051716":"# 1. Introduction\nThis is a 5 layers Sequential Convolutional Neural Network for ditis recognition trained on MNIST dataset. I choosed to build it with keras API which is very intuitive. Firstly, I will prepare the data then i will focus on the CNN modeling and evaluation.","76bd3e45":"## 3.3. Data augmentation","4887b511":"## 2.6. Split training and validataion set","04194acd":"1. Introduction\n2. Data preparation  \n    2.1. Load data  \n    2.2. Check for null and missing values  \n    2.3. Normalization  \n    2.4. Reshape  \n    2.5. Label encoding  \n    2.6. Split training and validation set  \n3. CNN  \n    3.1. Define the model  \n    3.2. Set the optimizer and aneealer  \n    3.3. Data aumentation  \n4. Evaluate the model  \n    4.1. Training and validation curves  \n    4.2. Confusion matrix  \n5. Prediction and submittion  \n    5.1. Predict and Submit results  "}}