{"cell_type":{"2aba6242":"code","3d754a1a":"code","d4c0be06":"code","9f61387a":"code","095a686e":"code","69f3a0d3":"code","9240b347":"code","495dfd57":"code","413b127a":"code","205f3fd5":"code","b300e611":"code","a7e0e1b2":"code","0b151410":"code","01b3bcd6":"code","08590a8b":"code","60d83874":"code","4c42cde8":"code","89644021":"code","701a0c0f":"code","701a78a4":"code","c8c1ba07":"code","a040f1a0":"code","ba6e8f4d":"code","7a16d225":"markdown","9f2f1ff5":"markdown","3fb6e28d":"markdown","02f5bc5c":"markdown","6ce3b6e0":"markdown","9da5bf32":"markdown","dd98eb1c":"markdown","63a7fbc8":"markdown","e6c0164a":"markdown","633b6bfd":"markdown","a445c64e":"markdown","03d3ef29":"markdown"},"source":{"2aba6242":"import numpy as np\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n%matplotlib inline\nimport os","3d754a1a":"df = pd.read_csv(\"..\/input\/google-play-store-apps\/googleplaystore.csv\")","d4c0be06":"df.head()","9f61387a":"df = df[np.isfinite(df['Rating'])]\ndf = df[df.Category != \"1.9\"]\n\ncategory = list(df.Category.unique())\nrate = list()\nfor i in category:\n    x = df[df.Category == i]\n    average_x = sum(x.Rating)\/len(x)\n    rate.append(average_x)\ndata = pd.DataFrame({'Category': category,'Rating':rate})\nnew = data.Rating.sort_values(ascending = False).index.values\nsorted_data = data.reindex(new)\n\nplt.figure(figsize=(15,10))\nsns.barplot(x=sorted_data[\"Category\"],y=sorted_data.Rating)\nplt.xlabel(\"Categories\")\nplt.xticks(rotation=90)\nplt.ylabel(\"Rating\")\nplt.title(\"Category vs Rating\")\nplt.show()","095a686e":"plt.figure(figsize=(15,10))\nsns.barplot(x = sorted_data[\"Category\"],y = sorted_data[\"Rating\"], palette = sns.cubehelix_palette(len(sorted_data)))\nplt.xlabel(\"Categories\")\nplt.xticks(rotation=90)\nplt.ylabel(\"Rating\")\nplt.title(\"Category vs Rating\")\nplt.show()\nplt.show()","69f3a0d3":"df2.head()","9240b347":"df2 = pd.read_csv(\"..\/input\/world-happiness\/2016.csv\")\ndf2.head()","495dfd57":"first_50 = df2.iloc[:50]\n\nplt.figure(figsize=(20,10))\nsns.pointplot(x=first_50.Country,y = first_50[\"Happiness Score\"],color = \"lime\")\nsns.pointplot(x=first_50.Country,y = first_50[\"Upper Confidence Interval\"],color = \"red\")\nplt.xlabel(\"Prices\")\nplt.xticks(rotation=90)\nplt.title(\"Prices vs Average Rating\")\nplt.show()\nfirst_50.head()","413b127a":"sns.jointplot(x = df2.Freedom,y = df2.Generosity,kind = \"kde\")\nplt.show()","205f3fd5":"sns.jointplot(x = df2.Freedom,y = df2.Generosity,color = \"red\")\nplt.show()","b300e611":"colors = ['grey','blue','red','yellow','green','brown', \"lime\", \"violet\", \"mediumspringgreen\", \"blueviolet\"]\nexplode = [0,0,0,0,0,0,0,0,0,0]\nlabels = list(df2.Region.unique())\nsize = list()\nfor i in labels:\n    x = df2[df2.Region == i]\n    new_x = sum(x[\"Happiness Score\"])\/len(x)\n    size.append(new_x)\ndata = pd.DataFrame({\"Region\":labels,\"Happiness Score\":size})\n\nplt.figure(figsize = (7,7))\nplt.pie(data[\"Happiness Score\"], explode = explode, labels = labels, colors = colors, autopct='%1.1f%%')\nplt.title(\"Happiness Score according to Countries\",color = \"red\",size = 20)\nplt.show()","a7e0e1b2":"df2.head()","0b151410":"sns.lmplot(x = \"Freedom\",y = \"Dystopia Residual\", data=df2)\nplt.show()","01b3bcd6":"sns.kdeplot(df2[\"Freedom\"], df2[\"Dystopia Residual\"], shade = True, cut=3)\nplt.show()","08590a8b":"df2.head()","60d83874":"first_50 = df2.iloc[:,[6,8]]\npal = sns.cubehelix_palette(2, rot=-.5, dark=.3)\nsns.violinplot(data=first_50, palette=pal, inner=\"points\")\nplt.show()","4c42cde8":"data = df2.iloc[:,[7,11]]\nf,ax = plt.subplots(figsize = (5, 5))\nsns.heatmap(data.corr(), annot = True, linewidths = 0.5,linecolor = \"black\", fmt= '.1f',ax=ax)\nplt.show()","89644021":"query = df2[(df2.Region == \"Sub-Saharan Africa\") | (df2.Region == \"Central and Eastern Europe\")]\nregions = query.Region\nfamily = query.Family\nupper_confidence = query[\"Upper Confidence Interval\"]\n\nnew_data = pd.DataFrame({\"Region\":regions,\"Family\":family,\"Upper Confidence Interval\":upper_confidence})\nnew_data.head()","701a0c0f":"g = sns.swarmplot(x=\"Region\",y=\"Family\",hue=\"Region\",data = new_data)\ng.get_legend().set_visible(False)\nplt.show()","701a78a4":"data.head()","c8c1ba07":"sns.pairplot(data)\nplt.show()","a040f1a0":"new_data.Region.value_counts()","ba6e8f4d":"sns.countplot(new_data.Region)\nplt.show()","7a16d225":"<font color='red'>\n# Lm Plot\n<font color='blue'>\nVisualize countries according to their Freedom and Dystopia Residual","9f2f1ff5":"<font color='red'>\n# Pair Plot\n<font color='blue'>\nVisualize countries according to their Family and Generosity","3fb6e28d":"<font color='red'>\n# Count Plot\n<font color='blue'>\nVisualize 2 regions according to their total number of data","02f5bc5c":"<font color='red'>\n# Point Plot\n<font color='blue'>\nVisualize 50 countries according to their Happiness Score and Upper Confidence Interval","6ce3b6e0":"<font color='red'>\n# Violin Plot\n<font color='blue'>\nVisualize countries Economy and Health (Life Expectancy)","9da5bf32":"<font color='red'>\n# Pie Chart\n<font color='blue'>\nVisualize countries according to their Happiness Score","dd98eb1c":"<font color='red'>\n# Swarm Plot\n<font color='blue'>\nVisualize first 2 regions according to their Upper Confidence Interval and Freedom","63a7fbc8":"<font color='red'>\n# Heat Map\n<font color='blue'>\nVisualize countries Family and Generosity","e6c0164a":"<font color='red'>\n# Joint Plot\n<font color='blue'>\nVisualize countries according to their Freedom and Generosity","633b6bfd":"<font color='red'>\n# Kde Plot\n<font color='blue'>\nVisualize countries according to their Freedom and Dystopia Residual","a445c64e":"<font color='red'>\n# Seaborn Visualization Examples\n<font color='blue'>\n- Ignore the comparison of ridiculous data.\n- My only purpose here is practice and come here to look at the syntax quickly when something is forgotten about seaborn.\n- Good work","03d3ef29":"<font color='red'>\n# Bar Plot\n<font color='blue'>\nVisualize countries according to their Category and Average Rating"}}