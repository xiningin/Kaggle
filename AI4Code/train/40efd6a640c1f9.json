{"cell_type":{"58a18a5e":"code","238944a5":"code","8117ee30":"code","d8b60280":"code","2d130e1e":"code","6def01ac":"code","d677b6a5":"code","f5b8a7a8":"code","e366a9c0":"code","3a7326c4":"code","51a4c5e7":"code","ee2eb19a":"code","65a45759":"code","88c55920":"code","5355dcf2":"code","a64ec15b":"code","1f2f9377":"code","78952717":"code","2c14cdfe":"code","0eada0a2":"code","4af5bc81":"code","ea111f58":"code","2da00584":"code","5b7dd750":"code","ed6998b8":"code","b3f3c82d":"code","6b8867c5":"code","d7e6c0e5":"code","5931fed0":"code","56712a45":"code","0a807f93":"code","30a88e54":"code","a718cb6f":"code","faae8a0a":"code","b93ec9f9":"code","a1168ccb":"code","19b822c6":"code","73421289":"code","c095cd45":"markdown","73177f5a":"markdown","0ff14230":"markdown","7206464f":"markdown","76b11420":"markdown","f12b909e":"markdown","1229061a":"markdown","c3ced2e5":"markdown","677afbae":"markdown","7195bc6b":"markdown","f8b6a37b":"markdown","ba91f82d":"markdown","c436c476":"markdown","f38a692c":"markdown","6eb2c16b":"markdown","12b6ae43":"markdown","4df11859":"markdown","8e3d30f4":"markdown","e3dcaab2":"markdown","2ab17959":"markdown","2bb67c83":"markdown","d45110b0":"markdown","4d9b7cf1":"markdown","7e0551fc":"markdown","59287b23":"markdown"},"source":{"58a18a5e":"from IPython.core.display import HTML","238944a5":"HTML('''<div class=\"flourish-embed flourish-cards\" data-src=\"visualisation\/1810417\" data-url=\"https:\/\/flo.uri.sh\/visualisation\/1810417\/embed\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>''')","8117ee30":"HTML('''<div class=\"flourish-embed flourish-cards\" data-src=\"visualisation\/1816605\" data-url=\"https:\/\/flo.uri.sh\/visualisation\/1816605\/embed\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>''')","d8b60280":"# install calmap\n# ==============\n\n! pip install calmap","2d130e1e":"# Import\n# ======\n\n# essential libraries\nimport math\nimport random\nfrom datetime import timedelta\n\n# storing and anaysis\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\nimport calmap\nimport folium\n\n# color pallette\ncnf, dth, rec, act = '#393e46', '#ff2e63', '#21bf73', '#fe9801' \n\n# converter\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()   \n\n# hide warnings\nimport warnings\nwarnings.filterwarnings('ignore')","6def01ac":"# for offline ploting\n# ===================\nfrom plotly.offline import plot, iplot, init_notebook_mode\ninit_notebook_mode(connected=True)","d677b6a5":"# list files\n# ==========\n\n# !ls ..\/input\/corona-virus-report","f5b8a7a8":"# importing datasets\n# ==================\n\nfull_table = pd.read_csv('..\/input\/corona-virus-report\/covid_19_clean_complete.csv', \n                         parse_dates=['Date'])\nfull_table.sample(6)","e366a9c0":"# dataframe info\n# full_table.info()","3a7326c4":"# checking for missing value\n# full_table.isna().sum()","51a4c5e7":"# Ship\n# ====\n\n# ship rows\nship_rows = full_table['Province\/State'].str.contains('Grand Princess') | full_table['Province\/State'].str.contains('Diamond Princess') | full_table['Country\/Region'].str.contains('Diamond Princess') | full_table['Country\/Region'].str.contains('MS Zaandam')\n\n# ship\nship = full_table[ship_rows]\n\n# full table \nfull_table = full_table[~(ship_rows)]\n\n# Latest cases from the ships\nship_latest = ship[ship['Date']==max(ship['Date'])]\n\n# ship_latest.style.background_gradient(cmap='Pastel1_r')","ee2eb19a":"# Cleaning data\n# =============\n\n# Active Case = confirmed - deaths - recovered\nfull_table['Active'] = full_table['Confirmed'] - full_table['Deaths'] - full_table['Recovered']\n\n# replacing Mainland china with just China\nfull_table['Country\/Region'] = full_table['Country\/Region'].replace('Mainland China', 'China')\n\n# filling missing values \nfull_table[['Province\/State']] = full_table[['Province\/State']].fillna('')\nfull_table[['Confirmed', 'Deaths', 'Recovered', 'Active']] = full_table[['Confirmed', 'Deaths', 'Recovered', 'Active']].fillna(0)\n\n# fixing datatypes\nfull_table['Recovered'] = full_table['Recovered'].astype(int)\n\nfull_table.sample(6)","65a45759":"# Grouped by day, country\n# =======================\n\nfull_grouped = full_table.groupby(['Date', 'Country\/Region'])['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\n\n# new cases ======================================================\ntemp = full_grouped.groupby(['Country\/Region', 'Date', ])['Confirmed', 'Deaths', 'Recovered']\ntemp = temp.sum().diff().reset_index()\n\nmask = temp['Country\/Region'] != temp['Country\/Region'].shift(1)\n\ntemp.loc[mask, 'Confirmed'] = np.nan\ntemp.loc[mask, 'Deaths'] = np.nan\ntemp.loc[mask, 'Recovered'] = np.nan\n\n# renaming columns\ntemp.columns = ['Country\/Region', 'Date', 'New cases', 'New deaths', 'New recovered']\n# =================================================================\n\n# merging new values\nfull_grouped = pd.merge(full_grouped, temp, on=['Country\/Region', 'Date'])\n\n# filling na with 0\nfull_grouped = full_grouped.fillna(0)\n\n# fixing data types\ncols = ['New cases', 'New deaths', 'New recovered']\nfull_grouped[cols] = full_grouped[cols].astype('int')\n\nfull_grouped['New cases'] = full_grouped['New cases'].apply(lambda x: 0 if x<0 else x)\n\nfull_grouped.head()","88c55920":"# Day wise\n# ========\n\n# table\nday_wise = full_grouped.groupby('Date')['Confirmed', 'Deaths', 'Recovered', 'Active', 'New cases'].sum().reset_index()\n\n# number cases per 100 cases\nday_wise['Deaths \/ 100 Cases'] = round((day_wise['Deaths']\/day_wise['Confirmed'])*100, 2)\nday_wise['Recovered \/ 100 Cases'] = round((day_wise['Recovered']\/day_wise['Confirmed'])*100, 2)\nday_wise['Deaths \/ 100 Recovered'] = round((day_wise['Deaths']\/day_wise['Recovered'])*100, 2)\n\n# no. of countries\nday_wise['No. of countries'] = full_grouped[full_grouped['Confirmed']!=0].groupby('Date')['Country\/Region'].unique().apply(len).values\n\n# fillna by 0\ncols = ['Deaths \/ 100 Cases', 'Recovered \/ 100 Cases', 'Deaths \/ 100 Recovered']\nday_wise[cols] = day_wise[cols].fillna(0)\n\nday_wise.head()","5355dcf2":"# Country wise\n# ============\n\n# getting latest values\ncountry_wise = full_grouped[full_grouped['Date']==max(full_grouped['Date'])].reset_index(drop=True).drop('Date', axis=1)\n\n# group by country\ncountry_wise = country_wise.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered', 'Active', 'New cases'].sum().reset_index()\n\n# per 100 cases\ncountry_wise['Deaths \/ 100 Cases'] = round((country_wise['Deaths']\/country_wise['Confirmed'])*100, 2)\ncountry_wise['Recovered \/ 100 Cases'] = round((country_wise['Recovered']\/country_wise['Confirmed'])*100, 2)\ncountry_wise['Deaths \/ 100 Recovered'] = round((country_wise['Deaths']\/country_wise['Recovered'])*100, 2)\n\ncols = ['Deaths \/ 100 Cases', 'Recovered \/ 100 Cases', 'Deaths \/ 100 Recovered']\ncountry_wise[cols] = country_wise[cols].fillna(0)\n\ncountry_wise.head()","a64ec15b":"# load population dataset\npop = pd.read_csv(\"..\/input\/population-by-country-2020\/population_by_country_2020.csv\")\n\n# select only population\npop = pop.iloc[:, :2]\n\n# rename column names\npop.columns = ['Country\/Region', 'Population']\n\n# merged data\ncountry_wise = pd.merge(country_wise, pop, on='Country\/Region', how='left')\n\n# update population\ncols = ['Burma', 'Congo (Brazzaville)', 'Congo (Kinshasa)', \"Cote d'Ivoire\", 'Czechia', \n        'Kosovo', 'Saint Kitts and Nevis', 'Saint Vincent and the Grenadines', \n        'Taiwan*', 'US', 'West Bank and Gaza']\npops = [54409800, 89561403, 5518087, 26378274, 10708981, 1793000, \n        53109, 110854, 23806638, 330541757, 4543126]\nfor c, p in zip(cols, pops):\n    country_wise.loc[country_wise['Country\/Region']== c, 'Population'] = p\n    \n# missing values\n# country_wise.isna().sum()\n# country_wise[country_wise['Population'].isna()]['Country\/Region'].tolist()\n\n# Cases per population\ncountry_wise['Cases \/ Million People'] = round((country_wise['Confirmed'] \/ country_wise['Population']) * 1000000)\n\ncountry_wise.head()","1f2f9377":"today = full_grouped[full_grouped['Date']==max(full_grouped['Date'])].reset_index(drop=True).drop('Date', axis=1)[['Country\/Region', 'Confirmed']]\nlast_week = full_grouped[full_grouped['Date']==max(full_grouped['Date'])-timedelta(days=7)].reset_index(drop=True).drop('Date', axis=1)[['Country\/Region', 'Confirmed']]\n\ntemp = pd.merge(today, last_week, on='Country\/Region', suffixes=(' today', ' last week'))\n\n# temp = temp[['Country\/Region', 'Confirmed last week']]\ntemp['1 week change'] = temp['Confirmed today'] - temp['Confirmed last week']\n\ntemp = temp[['Country\/Region', 'Confirmed last week', '1 week change']]\n\ncountry_wise = pd.merge(country_wise, temp, on='Country\/Region')\n\ncountry_wise['1 week % increase'] = round(country_wise['1 week change']\/country_wise['Confirmed last week']*100, 2)\n\ncountry_wise.head()","78952717":"temp = full_table.groupby('Date')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\ntemp = temp[temp['Date']==max(temp['Date'])].reset_index(drop=True)\n\ntm = temp.melt(id_vars=\"Date\", value_vars=['Active', 'Deaths', 'Recovered'])\nfig = px.treemap(tm, path=[\"variable\"], values=\"value\", height=225, width=1200,\n                 color_discrete_sequence=[act, rec, dth])\nfig.data[0].textinfo = 'label+text+value'\nfig.show()","2c14cdfe":"temp = full_table.groupby('Date')['Recovered', 'Deaths', 'Active'].sum().reset_index()\ntemp = temp.melt(id_vars=\"Date\", value_vars=['Recovered', 'Deaths', 'Active'],\n                 var_name='Case', value_name='Count')\ntemp.head()\n\nfig = px.area(temp, x=\"Date\", y=\"Count\", color='Case', height=600,\n             title='Cases over time', color_discrete_sequence = [rec, dth, act])\nfig.update_layout(xaxis_rangeslider_visible=True)\nfig.show()","0eada0a2":"# World wide\n\ntemp = full_table[full_table['Date'] == max(full_table['Date'])]\n\nm = folium.Map(location=[0, 0], tiles='cartodbpositron',\n               min_zoom=1, max_zoom=4, zoom_start=1)\n\nfor i in range(0, len(temp)):\n    folium.Circle(\n        location=[temp.iloc[i]['Lat'], temp.iloc[i]['Long']],\n        color='crimson', fill='crimson',\n        tooltip =   '<li><bold>Country : '+str(temp.iloc[i]['Country\/Region'])+\n                    '<li><bold>Province : '+str(temp.iloc[i]['Province\/State'])+\n                    '<li><bold>Confirmed : '+str(temp.iloc[i]['Confirmed'])+\n                    '<li><bold>Deaths : '+str(temp.iloc[i]['Deaths']),\n        radius=int(temp.iloc[i]['Confirmed'])**1.1).add_to(m)\nm","4af5bc81":"# Over the time\n\nfig = px.choropleth(full_grouped, locations=\"Country\/Region\", locationmode='country names', color=np.log(full_grouped[\"Confirmed\"]), \n                    hover_name=\"Country\/Region\", animation_frame=full_grouped[\"Date\"].dt.strftime('%Y-%m-%d'),\n                    title='Cases over time', color_continuous_scale=px.colors.sequential.Magenta)\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","ea111f58":"# Confirmed\nfig_c = px.choropleth(country_wise, locations=\"Country\/Region\", locationmode='country names', \n                      color=np.log(country_wise[\"Confirmed\"]), hover_name=\"Country\/Region\", hover_data=['Confirmed'])\n\n# Deaths\ntemp = country_wise[country_wise['Deaths']>0]\nfig_d = px.choropleth(temp, locations=\"Country\/Region\", locationmode='country names',\n                      color=np.log(temp[\"Deaths\"]), hover_name=\"Country\/Region\", hover_data=['Deaths'])\n\n# Plot\nfig = make_subplots(rows=1, cols=2, subplot_titles = ['Confirmed', 'Deaths'],\n                    specs=[[{\"type\": \"choropleth\"}, {\"type\": \"choropleth\"}]])\n\nfig.add_trace(fig_c['data'][0], row=1, col=1)\nfig.add_trace(fig_d['data'][0], row=1, col=2)\n\nfig.update(layout_coloraxis_showscale=False)\n\nfig.show()","2da00584":"fig_c = px.bar(day_wise, x=\"Date\", y=\"Confirmed\", color_discrete_sequence = [act])\nfig_d = px.bar(day_wise, x=\"Date\", y=\"Deaths\", color_discrete_sequence = [dth])\n\nfig = make_subplots(rows=1, cols=2, shared_xaxes=False, horizontal_spacing=0.1,\n                    subplot_titles=('Confirmed cases', 'Deaths reported'))\n\nfig.add_trace(fig_c['data'][0], row=1, col=1)\nfig.add_trace(fig_d['data'][0], row=1, col=2)\n\nfig.update_layout(height=480)\nfig.show()\n\n# ===============================\n\nfig_1 = px.line(day_wise, x=\"Date\", y=\"Deaths \/ 100 Cases\", color_discrete_sequence = [dth])\nfig_2 = px.line(day_wise, x=\"Date\", y=\"Recovered \/ 100 Cases\", color_discrete_sequence = [rec])\nfig_3 = px.line(day_wise, x=\"Date\", y=\"Deaths \/ 100 Recovered\", color_discrete_sequence = ['#333333'])\n\nfig = make_subplots(rows=1, cols=3, shared_xaxes=False, \n                    subplot_titles=('Deaths \/ 100 Cases', 'Recovered \/ 100 Cases', 'Deaths \/ 100 Recovered'))\n\nfig.add_trace(fig_1['data'][0], row=1, col=1)\nfig.add_trace(fig_2['data'][0], row=1, col=2)\nfig.add_trace(fig_3['data'][0], row=1, col=3)\n\nfig.update_layout(height=480)\nfig.show()\n\n# ===================================\n\nfig_c = px.bar(day_wise, x=\"Date\", y=\"New cases\", color_discrete_sequence = [act])\nfig_d = px.bar(day_wise, x=\"Date\", y=\"No. of countries\", color_discrete_sequence = [dth])\n\nfig = make_subplots(rows=1, cols=2, shared_xaxes=False, horizontal_spacing=0.1,\n                    subplot_titles=('No. of new cases everyday', 'No. of countries'))\n\nfig.add_trace(fig_c['data'][0], row=1, col=1)\nfig.add_trace(fig_d['data'][0], row=1, col=2)\n\nfig.update_layout(height=480)\nfig.show()","5b7dd750":"# confirmed - deaths\nfig_c = px.bar(country_wise.sort_values('Confirmed').tail(15), x=\"Confirmed\", y=\"Country\/Region\", \n               text='Confirmed', orientation='h', color_discrete_sequence = [act])\nfig_d = px.bar(country_wise.sort_values('Deaths').tail(15), x=\"Deaths\", y=\"Country\/Region\", \n               text='Deaths', orientation='h', color_discrete_sequence = [dth])\n\n# recovered - active\nfig_r = px.bar(country_wise.sort_values('Recovered').tail(15), x=\"Recovered\", y=\"Country\/Region\", \n               text='Recovered', orientation='h', color_discrete_sequence = [rec])\nfig_a = px.bar(country_wise.sort_values('Active').tail(15), x=\"Active\", y=\"Country\/Region\", \n               text='Active', orientation='h', color_discrete_sequence = ['#333333'])\n\n# death - recoverd \/ 100 cases\nfig_dc = px.bar(country_wise.sort_values('Deaths \/ 100 Cases').tail(15), x=\"Deaths \/ 100 Cases\", y=\"Country\/Region\", \n               text='Deaths \/ 100 Cases', orientation='h', color_discrete_sequence = ['#f38181'])\nfig_rc = px.bar(country_wise.sort_values('Recovered \/ 100 Cases').tail(15), x=\"Recovered \/ 100 Cases\", y=\"Country\/Region\", \n               text='Recovered \/ 100 Cases', orientation='h', color_discrete_sequence = ['#a3de83'])\n\n# new cases - cases per million people\nfig_nc = px.bar(country_wise.sort_values('New cases').tail(15), x=\"New cases\", y=\"Country\/Region\", \n               text='New cases', orientation='h', color_discrete_sequence = ['#c61951'])\ntemp = country_wise[country_wise['Population']>1000000]\nfig_p = px.bar(temp.sort_values('Cases \/ Million People').tail(15), x=\"Cases \/ Million People\", y=\"Country\/Region\", \n               text='Cases \/ Million People', orientation='h', color_discrete_sequence = ['#741938'])\n\n# week change, percent increase\nfig_wc = px.bar(country_wise.sort_values('1 week change').tail(15), x=\"1 week change\", y=\"Country\/Region\", \n               text='1 week change', orientation='h', color_discrete_sequence = ['#004a7c'])\ntemp = country_wise[country_wise['Confirmed']>100]\nfig_pi = px.bar(temp.sort_values('1 week % increase').tail(15), x=\"1 week % increase\", y=\"Country\/Region\", \n               text='1 week % increase', orientation='h', color_discrete_sequence = ['#005691'], \n                hover_data=['Confirmed last week', 'Confirmed'])\n\n\n# plot\nfig = make_subplots(rows=5, cols=2, shared_xaxes=False, horizontal_spacing=0.14, vertical_spacing=0.08,\n                    subplot_titles=('Confirmed cases', 'Deaths reported', 'Recovered', 'Active cases', \n                                    'Deaths \/ 100 cases', 'Recovered \/ 100 cases', 'New cases', \n                                    'Cases \/ Million People', '1 week increase', '1 week % increase'))\n\nfig.add_trace(fig_c['data'][0], row=1, col=1)\nfig.add_trace(fig_d['data'][0], row=1, col=2)\nfig.add_trace(fig_r['data'][0], row=2, col=1)\nfig.add_trace(fig_a['data'][0], row=2, col=2)\n\nfig.add_trace(fig_dc['data'][0], row=3, col=1)\nfig.add_trace(fig_rc['data'][0], row=3, col=2)\nfig.add_trace(fig_nc['data'][0], row=4, col=1)\nfig.add_trace(fig_p['data'][0], row=4, col=2)\n\nfig.add_trace(fig_wc['data'][0], row=5, col=1)\nfig.add_trace(fig_pi['data'][0], row=5, col=2)\n\n\nfig.update_layout(height=3000)","ed6998b8":"fig = px.scatter(country_wise.sort_values('Deaths', ascending=False).iloc[:15, :], \n                 x='Confirmed', y='Deaths', color='Country\/Region', size='Confirmed', height=700,\n                 text='Country\/Region', log_x=True, log_y=True, title='Deaths vs Confirmed (Scale is in log10)')\nfig.update_traces(textposition='top center')\nfig.update_layout(showlegend=False)\nfig.update_layout(xaxis_rangeslider_visible=True)\nfig.show()","b3f3c82d":"fig = px.bar(full_grouped, x=\"Date\", y=\"Confirmed\", color='Country\/Region', height=600,\n             title='Confirmed', color_discrete_sequence = px.colors.cyclical.mygbm)\nfig.show()\n\n# =========================================\n\nfig = px.bar(full_grouped, x=\"Date\", y=\"Deaths\", color='Country\/Region', height=600,\n             title='Deaths', color_discrete_sequence = px.colors.cyclical.mygbm)\nfig.show()\n\n# =========================================\n\nfig = px.bar(full_grouped, x=\"Date\", y=\"New cases\", color='Country\/Region', height=600,\n             title='New cases', color_discrete_sequence = px.colors.cyclical.mygbm)\nfig.show()","6b8867c5":"fig = px.line(full_grouped, x=\"Date\", y=\"Confirmed\", color='Country\/Region', height=600,\n             title='Confirmed', color_discrete_sequence = px.colors.cyclical.mygbm)\nfig.show()\n\n# =========================================\n\nfig = px.line(full_grouped, x=\"Date\", y=\"Deaths\", color='Country\/Region', height=600,\n             title='Deaths', color_discrete_sequence = px.colors.cyclical.mygbm)\nfig.show()\n\n# =========================================\n\nfig = px.line(full_grouped, x=\"Date\", y=\"New cases\", color='Country\/Region', height=600,\n             title='New cases', color_discrete_sequence = px.colors.cyclical.mygbm)\nfig.show()","d7e6c0e5":"gt_100 = full_grouped[full_grouped['Confirmed']>100]['Country\/Region'].unique()\ntemp = full_table[full_table['Country\/Region'].isin(gt_100)]\ntemp = temp.groupby(['Country\/Region', 'Date'])['Confirmed'].sum().reset_index()\ntemp = temp[temp['Confirmed']>100]\n# print(temp.head())\n\nmin_date = temp.groupby('Country\/Region')['Date'].min().reset_index()\nmin_date.columns = ['Country\/Region', 'Min Date']\n# print(min_date.head())\n\nfrom_100th_case = pd.merge(temp, min_date, on='Country\/Region')\nfrom_100th_case['N days'] = (from_100th_case['Date'] - from_100th_case['Min Date']).dt.days\n# print(from_100th_case.head())\n\nfig = px.line(from_100th_case, x='N days', y='Confirmed', color='Country\/Region', title='N days from 100 case', height=600)\nfig.show()\n\n# ===========================================================================\n\ngt_1000 = full_grouped[full_grouped['Confirmed']>1000]['Country\/Region'].unique()\ntemp = full_table[full_table['Country\/Region'].isin(gt_1000)]\ntemp = temp.groupby(['Country\/Region', 'Date'])['Confirmed'].sum().reset_index()\ntemp = temp[temp['Confirmed']>1000]\n# print(temp.head())\n\nmin_date = temp.groupby('Country\/Region')['Date'].min().reset_index()\nmin_date.columns = ['Country\/Region', 'Min Date']\n# print(min_date.head())\n\nfrom_1000th_case = pd.merge(temp, min_date, on='Country\/Region')\nfrom_1000th_case['N days'] = (from_1000th_case['Date'] - from_1000th_case['Min Date']).dt.days\n# print(from_1000th_case.head())\n\nfig = px.line(from_1000th_case, x='N days', y='Confirmed', color='Country\/Region', title='N days from 1000 case', height=600)\nfig.show()\n\n# ===========================================================================\n\ngt_10000 = full_grouped[full_grouped['Confirmed']>10000]['Country\/Region'].unique()\ntemp = full_table[full_table['Country\/Region'].isin(gt_10000)]\ntemp = temp.groupby(['Country\/Region', 'Date'])['Confirmed'].sum().reset_index()\ntemp = temp[temp['Confirmed']>10000]\n# print(temp.head())\n\nmin_date = temp.groupby('Country\/Region')['Date'].min().reset_index()\nmin_date.columns = ['Country\/Region', 'Min Date']\n# print(min_date.head())\n\nfrom_10000th_case = pd.merge(temp, min_date, on='Country\/Region')\nfrom_10000th_case['N days'] = (from_10000th_case['Date'] - from_10000th_case['Min Date']).dt.days\n# print(from_10000th_case.head())full_grouped\n\nfig = px.line(from_10000th_case, x='N days', y='Confirmed', color='Country\/Region', title='N days from 10000 case', height=600)\nfig.show()","5931fed0":"full_latest = full_table[full_table['Date'] == max(full_table['Date'])]\n                         \nfig = px.treemap(full_latest.sort_values(by='Confirmed', ascending=False).reset_index(drop=True), \n                 path=[\"Country\/Region\", \"Province\/State\"], values=\"Confirmed\", height=700,\n                 title='Number of Confirmed Cases',\n                 color_discrete_sequence = px.colors.qualitative.Dark2)\nfig.data[0].textinfo = 'label+text+value'\nfig.show()\n\nfig = px.treemap(full_latest.sort_values(by='Deaths', ascending=False).reset_index(drop=True), \n                 path=[\"Country\/Region\", \"Province\/State\"], values=\"Deaths\", height=700,\n                 title='Number of Deaths reported',\n                 color_discrete_sequence = px.colors.qualitative.Dark2)\nfig.data[0].textinfo = 'label+text+value'\nfig.show()","56712a45":"temp = full_grouped[full_grouped['New cases']>0].sort_values('Country\/Region', ascending=False)\nfig = px.scatter(temp, x='Date', y='Country\/Region', size='New cases', color='New cases', height=3000, \n           color_continuous_scale=px.colors.sequential.Viridis)\nfig.update_layout(yaxis = dict(dtick = 1))\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","0a807f93":"fig = go.Figure(data=go.Heatmap(\n        z=full_grouped['Active'],\n        x=full_grouped['Date'],\n        y=full_grouped['Country\/Region'],\n        colorscale='Reds',\n        showlegend=False,\n        text=full_grouped['Active']))\n\nfig.update_layout(yaxis = dict(dtick = 1))\nfig.update_layout(height=3000)\nfig.show()","30a88e54":"# first date\n# ==========\nfirst_date = full_table[full_table['Confirmed']>0]\nfirst_date = first_date.groupby('Country\/Region')['Date'].agg(['min']).reset_index()\n# first_date.head()\n\n# last date\n# =========\nlast_date = full_table.groupby(['Country\/Region', 'Date', ])['Confirmed', 'Deaths', 'Recovered']\nlast_date = last_date.sum().diff().reset_index()\n\nmask = last_date['Country\/Region'] != last_date['Country\/Region'].shift(1)\nlast_date.loc[mask, 'Confirmed'] = np.nan\nlast_date.loc[mask, 'Deaths'] = np.nan\nlast_date.loc[mask, 'Recovered'] = np.nan\n\nlast_date = last_date[last_date['Confirmed']>0]\nlast_date = last_date.groupby('Country\/Region')['Date'].agg(['max']).reset_index()\n# last_date.head()\n\n# first_last\n# ==========\nfirst_last = pd.concat([first_date, last_date[['max']]], axis=1)\n\n# added 1 more day, which will show the next day as the day on which last case appeared\nfirst_last['max'] = first_last['max'] + timedelta(days=1)\n\n# no. of days\nfirst_last['Days'] = first_last['max'] - first_last['min']\n\n# task column as country\nfirst_last['Task'] = first_last['Country\/Region']\n\n# rename columns\nfirst_last.columns = ['Country\/Region', 'Start', 'Finish', 'Days', 'Task']\n\n# sort by no. of days\nfirst_last = first_last.sort_values('Days')\n# first_last.head()\n\n# visualization\n# =============\n\n# produce random colors\nclr = [\"#\"+''.join([random.choice('0123456789ABC') for j in range(6)]) for i in range(len(first_last))]\n\n# plot\nfig = ff.create_gantt(first_last, index_col='Country\/Region', colors=clr, show_colorbar=False, \n                      bar_width=0.2, showgrid_x=True, showgrid_y=True, height=2500)\nfig.show()","a718cb6f":"HTML('''<div class=\"flourish-embed flourish-bar-chart-race\" data-src=\"visualisation\/1571387\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>''')","faae8a0a":"temp = full_table.groupby(['Country\/Region', 'Date', ])['Confirmed', 'Deaths']\ntemp = temp.sum().diff().reset_index()\n\nmask = temp['Country\/Region'] != temp['Country\/Region'].shift(1)\n\ntemp.loc[mask, 'Confirmed'] = np.nan\ntemp.loc[mask, 'Deaths'] = np.nan\n\ntemp = temp[temp['Country\/Region'].isin(gt_10000)]\n\n# countries = ['China', 'Iran', 'South Korea', 'Italy', 'France', 'Germany', 'Italy', 'Spain', 'US']\ncountries = temp['Country\/Region'].unique()\n\nn_cols = 4\nn_rows = math.ceil(len(countries)\/n_cols)\n\nfig = make_subplots(rows=n_rows, cols=n_cols, shared_xaxes=False, subplot_titles=countries)\n\nfor ind, country in enumerate(countries):\n    row = int((ind\/n_cols)+1)\n    col = int((ind%n_cols)+1)\n    fig.add_trace(go.Bar(x=temp['Date'], y=temp.loc[temp['Country\/Region']==country, 'Confirmed'], name=country), row=row, col=col)\n    \nfig.update_layout(height=2000, title_text=\"No. of new cases in each Country\")    \nfig.show()","b93ec9f9":"temp = full_table.groupby('Date')['Confirmed'].sum()\ntemp = temp.diff()\n\nplt.figure(figsize=(20, 5))\nax = calmap.yearplot(temp, fillcolor='white', cmap='Reds', linewidth=0.5)","a1168ccb":"spread = full_table[full_table['Confirmed']!=0].groupby('Date')\nspread = spread['Country\/Region'].unique().apply(len).diff()\n\nplt.figure(figsize=(20, 5))\nax = calmap.yearplot(spread, fillcolor='white', cmap='Greens', linewidth=0.5)","19b822c6":"epidemics = pd.DataFrame({\n    'epidemic' : ['COVID-19', 'SARS', 'EBOLA', 'MERS', 'H1N1'],\n    'start_year' : [2019, 2003, 2014, 2012, 2009],\n    'end_year' : [2020, 2004, 2016, 2017, 2010],\n    'confirmed' : [full_latest['Confirmed'].sum(), 8096, 28646, 2494, 6724149],\n    'deaths' : [full_latest['Deaths'].sum(), 774, 11323, 858, 19654]\n})\n\nepidemics['mortality'] = round((epidemics['deaths']\/epidemics['confirmed'])*100, 2)\n\nepidemics.head()","73421289":"temp = epidemics.melt(id_vars='epidemic', value_vars=['confirmed', 'deaths', 'mortality'],\n                      var_name='Case', value_name='Value')\n\nfig = px.bar(temp, x=\"epidemic\", y=\"Value\", color='epidemic', text='Value', facet_col=\"Case\",\n             color_discrete_sequence = px.colors.qualitative.Bold)\nfig.update_traces(textposition='outside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.update_yaxes(showticklabels=False)\nfig.layout.yaxis2.update(matches=None)\nfig.layout.yaxis3.update(matches=None)\nfig.show()","c095cd45":"# Ships","73177f5a":"# Epidemic Span","0ff14230":"# Comparison with similar epidemics","7206464f":"# Analysis on similar epidemics","76b11420":"# Cases over the time","f12b909e":"# Active cases","1229061a":"# Calander map","c3ced2e5":"### Number of new cases every day","677afbae":"https:\/\/www.kaggle.com\/imdevskp\/covid19-vs-sars-vs-mers-vs-ebola-vs-h1n1\n\n","7195bc6b":"# Maps","f8b6a37b":"Note : In the graph, last day is shown as one day after the last time a new confirmed cases reported in the Country \/ Region","ba91f82d":"# Top 20 Countries","c436c476":"# Acknowledgements\n\n> https:\/\/github.com\/CSSEGISandData\/COVID-19\n\n# Collection methodology\n\n> https:\/\/github.com\/imdevskp\/covid_19_jhu_data_web_scrap_and_cleaning\n\n# Disclaimer\n\n> * The data is from scrapped from JHU github repository. Any variation in the data there will also reflect in this notebook","f38a692c":"# New cases","6eb2c16b":"# Preprocessing","12b6ae43":"# Dataset","4df11859":"### Number of new countries every day","8e3d30f4":"https:\/\/www.kaggle.com\/imdevskp\/mers-outbreak-analysis  \nhttps:\/\/www.kaggle.com\/imdevskp\/sars-2003-outbreak-analysis  \nhttps:\/\/www.kaggle.com\/imdevskp\/western-africa-ebola-outbreak-analysis\n","e3dcaab2":"# Country Wise","2ab17959":"https:\/\/app.flourish.studio\/visualisation\/1571387\/edit\n\n","2bb67c83":"### Across the world","d45110b0":"# Libraries","4d9b7cf1":"# Date vs","7e0551fc":"# COVID-19","59287b23":"# Composition of Cases"}}