{"cell_type":{"d94726d6":"code","c2d4443b":"code","1173e4dc":"code","ecd99c29":"code","f9829bfd":"code","f4965544":"code","cfb59090":"code","2e9548da":"code","c680283c":"code","69e25aad":"code","3436884e":"code","ed698def":"code","58851474":"code","3cdc0e42":"code","bcf0e8d0":"code","a53f812f":"code","4fff3c55":"code","57c9f315":"code","c5c321c0":"code","d3e92b56":"code","8fa89822":"code","e74e4642":"code","a45ae7b9":"code","2a80c29a":"code","94ee4721":"code","157afb43":"code","6c112983":"code","381e3cb6":"code","7fef9837":"code","1d1d4f93":"code","8a85d2a2":"code","e47a85e9":"code","6424debd":"code","22254327":"code","86b8ec20":"code","09949bbd":"code","2660129b":"code","90bd1578":"code","88bd6bb9":"code","ff8a8ef6":"code","a32c1d1d":"code","2ef40781":"code","5ecc0092":"code","82054a9c":"code","dc873bbb":"code","948815cb":"markdown","4fcdbcea":"markdown","d008cbdf":"markdown","94fd4a49":"markdown"},"source":{"d94726d6":"#importing libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.offline as py\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\nfrom pandas.tools import plotting\nfrom sklearn.model_selection import train_test_split\nfrom plotly import tools\ninit_notebook_mode(connected=True)  \nimport plotly.figure_factory as ff\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import  accuracy_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.preprocessing import StandardScaler, LabelBinarizer\nimport xgboost as xgb\nfrom xgboost.sklearn import XGBClassifier\n\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n%matplotlin inline","c2d4443b":"#loading dataset\niris = pd.read_csv(\"..\/input\/iris-flower-dataset\/IRIS.csv\")","1173e4dc":"#printing how many features?\nprint(\"the dataset has {} rows and {} features\".format(iris.shape[0],iris.shape[1]))","ecd99c29":"#visualising data\ntable = ff.create_table(iris.head())\npy.iplot(table,filename='jupyter-table1')","f9829bfd":"#printing info about dataset\nprint(iris.info())","f4965544":"#printing statistics about the dataset\nprint(iris.describe())\n#py.iplot(ff.create_table(iris.describe()),filename='describe_table')","cfb59090":"#printing coefficient of Quartile deviation\nqd = pd.DataFrame((iris.describe().loc['75%']-iris.describe().loc['25%'])\/(iris.describe().loc['75%']+iris.describe().loc['25%']),columns=['COQD'])\nprint(qd)","2e9548da":"#how many datapoints for each class are presents?\nprint(iris[\"species\"].value_counts())","c680283c":"#which categories of flowers we have?\nprint(\" we have {} types of species in this dataset\".format(iris.species.nunique()))\nprint(\"the names of this species are:\",iris.species.unique())","69e25aad":"#2-D scatter plots\niris.plot(kind='scatter', x='sepal_length', y='sepal_width') ;\nplt.show()","3436884e":"iris.plot(kind='scatter', x='petal_length', y='petal_width') ;\nplt.show()","ed698def":"# 2-D Scatter plot with color-coding for each flower type\/class.\n# Here 'sns' corresponds to seaborn. \nsns.set_style(\"whitegrid\")\nsns.FacetGrid(data=iris,hue=\"species\",size=6)\\\n   .map(plt.scatter,\"sepal_length\",\"sepal_width\")\\\n   .add_legend()\nplt.show()","58851474":"sns.set_style(\"whitegrid\")\nsns.FacetGrid(data=iris,hue=\"species\",size=6)\\\n   .map(plt.scatter,\"petal_length\",\"petal_width\")\\\n   .add_legend()\nplt.show()","3cdc0e42":"#pair-plot\nsns.set_style(\"whitegrid\")\nsns.pairplot(data=iris,hue=\"species\",size=3)\\\n   .add_legend()\nplt.show()","bcf0e8d0":"#histograms\niris.hist(edgecolor='black', linewidth=1.2)\nfig=plt.gcf()\nfig.set_size_inches(15,6)\nplt.show()","a53f812f":"#Andrews curves are a method for visualizing multidimensional data by mapping each observation onto a function.\n#https:\/\/glowingpython.blogspot.com\/2014\/10\/andrews-curves.html\nplt.figure(figsize=(10,8))\nplotting.andrews_curves(iris,'species')\n#In the plot below, the each color used represents a class\n#we can easily note that the lines that represent samples from the same class have similar curves.","4fff3c55":"#distplot\n\nsns.FacetGrid(data=iris, hue=\"species\", size=5) \\\n   .map(sns.distplot, \"petal_length\") \\\n   .add_legend()\nplt.show()\n","57c9f315":"sns.FacetGrid(data=iris, hue=\"species\", size=5) \\\n   .map(sns.distplot, \"petal_width\") \\\n   .add_legend()\nplt.show()","c5c321c0":"sns.FacetGrid(data=iris, hue=\"species\", size=5) \\\n   .map(sns.distplot, \"sepal_length\") \\\n   .add_legend()\nplt.show()","d3e92b56":"sns.FacetGrid(data=iris, hue=\"species\", size=5) \\\n   .map(sns.distplot, \"sepal_width\") \\\n   .add_legend()\nplt.show()","8fa89822":"#Let's check if we have any correlation between features\n#https:\/\/seaborn.pydata.org\/generated\/seaborn.heatmap.html\nplt.figure(figsize=(7,4)) \nsns.heatmap(iris.corr(),annot=True,fmt=\"f\",cmap=\"YlGnBu\")\nplt.show()","e74e4642":"#Plot CDF of petal_length\n\niris_setosa = iris[iris['species']=='Iris-setosa']\nprint(iris_setosa.head())\ncounts, bin_edges= np.histogram(iris_setosa['petal_length'],bins=10, density= True)\npdf=counts\/(sum(counts))\nprint(pdf)\n\nprint(bin_edges)\n\ncdf=np.cumsum(pdf)\nprint(cdf)\n\nplt.plot(bin_edges[1:],pdf)\nplt.plot(bin_edges[1:],cdf)\nplt.show()","a45ae7b9":"#Plot CDF of petal_width\n\niris_setosa = iris[iris['species']=='Iris-setosa']\nprint(iris_setosa.head())\ncounts, bin_edges= np.histogram(iris_setosa['petal_width'],bins=10, density= True)\npdf=counts\/(sum(counts))\nprint(pdf)\n\nprint(bin_edges)\n\ncdf=np.cumsum(pdf)\nprint(cdf)\n\nplt.plot(bin_edges[1:],pdf)\nplt.plot(bin_edges[1:],cdf)\nplt.show()","2a80c29a":"#Box-plot with whiskers: another method of visualizing the  1-D scatter plot more intuitivey.\nsns.boxplot(x='species',y='petal_length', data=iris)\nplt.show()","94ee4721":"sns.boxplot(x='species',y='petal_width', data=iris)\nplt.show()","157afb43":"sns.boxplot(x='species',y='sepal_length', data=iris)\nplt.show()","6c112983":"sns.boxplot(x='species',y='sepal_width', data=iris)\nplt.show()","381e3cb6":"# A violin plot combines the benefits of the previous two plots \n#and simplifies them\n\n# Denser regions of the data are fatter, and sparser ones thinner \n#in a violin plot\n\nsns.violinplot(x=\"species\", y=\"petal_length\", data=iris, size=8)\nplt.show()","7fef9837":"sns.violinplot(x=\"species\", y=\"petal_width\", data=iris, size=8)\nplt.show()","1d1d4f93":"sns.violinplot(x=\"species\", y=\"sepal_length\", data=iris, size=8)\nplt.show()","8a85d2a2":"sns.violinplot(x=\"species\", y=\"sepal_length\", data=iris, size=8)\nplt.show()","e47a85e9":"#splitting of data\nX_train, X_test, y_train,y_test = train_test_split(iris.iloc[:,:4],iris.species,stratify=iris.species,test_size = 0.3)\nprint(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","6424debd":"#random samples of training data\nX_train.head()","22254327":"#training svc model\nSVC = SVC()\nSVC.fit(X_train,y_train)\ny_predict = SVC.predict(X_test)\nprint(\"the accuracy of the Support Vector Machine Classifier model is :\",accuracy_score(y_test,y_predict))\nconfusion_matrix(y_predict,y_test)","86b8ec20":"#training logistic regression\nLG = LogisticRegression()\nLG.fit(X_train,y_train)\ny_predict = LG.predict(X_test)\nprint(\"the accuracy of the Logistic Regresssion Classifier model is :\",accuracy_score(y_predict,y_test))\nconfusion_matrix(y_predict,y_test)","09949bbd":"#training decision tree classifier model\nDTC = DecisionTreeClassifier(max_leaf_nodes = 3)\nDTC.fit(X_train,y_train)\ny_predict = DTC.predict(X_test)\nprint(\"the accuracy of the Decision Tree Classifier model is :\",accuracy_score(y_test,y_predict))\nconfusion_matrix(y_predict,y_test)","2660129b":"#training extra tree classfier model\nETC=ExtraTreesClassifier()\nETC.fit(X_train,y_train)\nETC_prediction=ETC.predict(X_test)\nprint('The accuracy of the Extra Trees Classifier model is',accuracy_score(ETC_prediction,y_test))\nconfusion_matrix(ETC_prediction,y_test)","90bd1578":"#training KNN model\nKNN=KNeighborsClassifier(n_neighbors=3)\nKNN.fit(X_train,y_train)\nKNN_prediction=KNN.predict(X_test)\nprint('The accuracy of the KNeighborsClassifier model is',accuracy_score(KNN_prediction,y_test))\nconfusion_matrix(KNN_prediction,y_test)","88bd6bb9":"#training gaussian naive bayes model\nGNB=GaussianNB()\nGNB.fit(X_train,y_train)\nGNB_prediction=GNB.predict(X_test)\nprint('The accuracy of the GaussionNB model is',accuracy_score(GNB_prediction,y_test))\nconfusion_matrix(GNB_prediction,y_test)","ff8a8ef6":"#training random forest classfier model\nRFC=RandomForestClassifier()\nRFC.fit(X_train,y_train)\nRFC_prediction=RFC.predict(X_test)\nprint('The accuracy of the RandomForestClassifier model is',accuracy_score(RFC_prediction,y_test))\nconfusion_matrix(RFC_prediction,y_test)","a32c1d1d":"#training XGboost model\nXGB=XGBClassifier()\nXGB.fit(X_train,y_train)\nXGB_prediction=XGB.predict(X_test)\nprint('The accuracy of the XGBClassifier model is',accuracy_score(XGB_prediction,y_test))\nconfusion_matrix(XGB_prediction,y_test)","2ef40781":"#lets try to build a Deep learning model with keras\nfrom sklearn.preprocessing import StandardScaler, LabelBinarizer\nX = iris[['sepal_length', 'sepal_width', 'petal_length', 'petal_width']]\ny = iris[\"species\"]\n\nX = StandardScaler().fit_transform(X)\ny = LabelBinarizer().fit_transform(y)","5ecc0092":"x_train, x_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)","82054a9c":"model = Sequential()\nmodel.add(Dense( 4, input_dim=4, activation = 'relu'))\nmodel.add(Dense( units = 10, activation= 'relu'))\nmodel.add(Dense( units = 3, activation= 'softmax'))\nmodel.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics = ['accuracy'])","dc873bbb":"model_training = model.fit(x_train, y_train, epochs = 150, validation_data = (x_test, y_test))","948815cb":"* cannot make much sense out it.\n* What if we color the points by thier class-label\/flower-type.","4fcdbcea":"**The data types are correct and we can see that there is no null values in the dataset**","d008cbdf":"* Using sepal_length and sepal_width features, we can distinguish Setosa flowers from others.\n* Seperating Versicolor from Viginica is much harder as they have considerable overlap.","94fd4a49":"* petal_length and petal_width are the most useful features to identify various flower types.\n* While Setosa can be easily identified (linearly seperable), Virnica and Versicolor have some overlap (almost linearly seperable).\n* We can find \"lines\" and \"if-else\" conditions to build a simple model to classify the flower types."}}