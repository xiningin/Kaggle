{"cell_type":{"8012ad09":"code","05a8fa40":"code","4ac35692":"code","92c47e66":"code","d18d7a83":"code","ca7d8378":"code","3ea29645":"code","2435b9f7":"code","a3945435":"code","3fae9db5":"code","31998037":"code","a86e385c":"code","e55bc418":"code","86a00333":"code","439c2a9d":"code","d00c0434":"code","a6ffa71a":"code","8fd7e216":"code","1d0f0fb7":"code","7cf1dd60":"markdown","5401572c":"markdown","742fb858":"markdown","896b7963":"markdown","bcdaddbb":"markdown","f79bd432":"markdown","738315b7":"markdown","43c82a72":"markdown"},"source":{"8012ad09":"import gc\nfrom collections import defaultdict\n\nimport pandas as pd\nimport numpy as np\nfrom sklearn.metrics import roc_auc_score\nfrom tqdm.notebook import tqdm","05a8fa40":"train_pickle = '..\/input\/riiid-cross-validation-files\/cv1_train.pickle'\nvalid_pickle = '..\/input\/riiid-cross-validation-files\/cv1_valid.pickle'\nquestion_file = '..\/input\/riiid-test-answer-prediction\/questions.csv'\ndebug = False\nvalidaten_flg = False","4ac35692":"# funcs for user stats with loop\ndef add_user_feats_values(df, answered_correctly_sum_u_dict, count_u_dict):\n    acsu = np.zeros(len(df), dtype=np.int32)\n    cu = np.zeros(len(df), dtype=np.int32)\n    for cnt,row in enumerate(tqdm(df[['user_id','answered_correctly']].values)):\n        acsu[cnt] = answered_correctly_sum_u_dict[row[0]]\n        cu[cnt] = count_u_dict[row[0]]\n        answered_correctly_sum_u_dict[row[0]] += row[1]\n        count_u_dict[row[0]] += 1\n    user_feats_df = pd.DataFrame({'answered_correctly_sum_u':acsu, 'count_u':cu})\n    user_feats_df['answered_correctly_avg_u'] = user_feats_df['answered_correctly_sum_u'] \/ user_feats_df['count_u']\n    df = pd.concat([df, user_feats_df], axis=1)\n    return df","92c47e66":"# funcs for user stats with loop\ndef add_user_feats_numpy(df, answered_correctly_sum_u_dict, count_u_dict):\n    acsu = np.zeros(len(df), dtype=np.int32)\n    cu = np.zeros(len(df), dtype=np.int32)\n    for cnt,row in enumerate(tqdm(df[['user_id','answered_correctly']].to_numpy())):\n        acsu[cnt] = answered_correctly_sum_u_dict[row[0]]\n        cu[cnt] = count_u_dict[row[0]]\n        answered_correctly_sum_u_dict[row[0]] += row[1]\n        count_u_dict[row[0]] += 1\n    user_feats_df = pd.DataFrame({'answered_correctly_sum_u':acsu, 'count_u':cu})\n    user_feats_df['answered_correctly_avg_u'] = user_feats_df['answered_correctly_sum_u'] \/ user_feats_df['count_u']\n    df = pd.concat([df, user_feats_df], axis=1)\n    return df","d18d7a83":"\ndef add_user_feats_tuples(df, answered_correctly_sum_u_dict, count_u_dict):\n    # the sum of questions answered correctly by the user (chronologically)\n    acsu = np.zeros(len(df), dtype=np.int32)\n    # the sum of questions answered by the user\n    cu = np.zeros(len(df), dtype=np.int32)\n    for cnt, row in enumerate(tqdm(df[['user_id','answered_correctly']].itertuples(), total=df.shape[0])):\n        acsu[cnt] = answered_correctly_sum_u_dict[row.user_id]\n        cu[cnt] = count_u_dict[row.user_id]\n        answered_correctly_sum_u_dict[row.user_id] += row.answered_correctly\n        count_u_dict[row.user_id] += 1\n    user_feats_df = pd.DataFrame({'answered_correctly_sum_u':acsu, 'count_u':cu})\n    user_feats_df['answered_correctly_avg_u'] = user_feats_df['answered_correctly_sum_u'] \/ user_feats_df['count_u']\n    df = pd.concat([df, user_feats_df], axis=1)\n    return df","ca7d8378":"\ndef add_user_feats_iterrows(df, answered_correctly_sum_u_dict, count_u_dict):\n    # the sum of questions answered correctly by the user (chronologically)\n    acsu = np.zeros(len(df), dtype=np.int32)\n    # the sum of questions answered by the user\n    cu = np.zeros(len(df), dtype=np.int32)\n    for cnt, (_, row) in tqdm(enumerate(df[['user_id','answered_correctly']].iterrows()), total=df.shape[0]):\n        acsu[cnt] = answered_correctly_sum_u_dict[row.user_id]\n        cu[cnt] = count_u_dict[row.user_id]\n        answered_correctly_sum_u_dict[row.user_id] += row.answered_correctly\n        count_u_dict[row.user_id] += 1\n    user_feats_df = pd.DataFrame({'answered_correctly_sum_u':acsu, 'count_u':cu})\n    user_feats_df['answered_correctly_avg_u'] = user_feats_df['answered_correctly_sum_u'] \/ user_feats_df['count_u']\n    df = pd.concat([df, user_feats_df], axis=1)\n    return df","3ea29645":"# read data\ndef read_data():\n    field_needed = ['row_id', 'user_id', 'content_id', 'content_type_id', 'answered_correctly', 'prior_question_elapsed_time', 'prior_question_had_explanation']\n    train = pd.read_pickle(train_pickle)[field_needed]\n    train = train.loc[train.content_type_id == False].reset_index(drop=True)\n    return train","2435b9f7":"%%time\ntrain = read_data()","a3945435":"%%time\nanswered_correctly_sum_u_dict = defaultdict(int)\ncount_u_dict = defaultdict(int)\ntrain = add_user_feats_values(train, answered_correctly_sum_u_dict, count_u_dict)","3fae9db5":"train.answered_correctly_sum_u.describe()","31998037":"train = read_data()","a86e385c":"%%time\nanswered_correctly_sum_u_dict = defaultdict(int)\ncount_u_dict = defaultdict(int)\ntrain = add_user_feats_numpy(train, answered_correctly_sum_u_dict, count_u_dict)","e55bc418":"train.answered_correctly_sum_u.describe()","86a00333":"train = read_data()\ngc.collect()","439c2a9d":"%%time\nanswered_correctly_sum_u_dict = defaultdict(int)\ncount_u_dict = defaultdict(int)\ntrain = add_user_feats_tuples(train, answered_correctly_sum_u_dict, count_u_dict)","d00c0434":"train.answered_correctly_sum_u.describe()","a6ffa71a":"train = read_data()\n# Too slow so we have to take a sample (only 5%)\ntrain = train.sample(frac=0.05)\ngc.collect()","8fd7e216":"%%time\nanswered_correctly_sum_u_dict = defaultdict(int)\ncount_u_dict = defaultdict(int)\ntrain = add_user_feats_iterrows(train, answered_correctly_sum_u_dict, count_u_dict)","1d0f0fb7":"train.answered_correctly_sum_u.describe()","7cf1dd60":"### .itertuples()","5401572c":"### .values","742fb858":"### .iterrows()","896b7963":"### Functions","bcdaddbb":"Based on [this notebook](https:\/\/www.kaggle.com\/its7171\/lgbm-with-loop-feature-engineering)\n\nIt seems that iterating over `.itertuples()` is slightly faster than over `.to_numpy()` and `.values`.","f79bd432":"## Benchmarks\nReference: https:\/\/github.com\/chiphuyen\/just-pandas-things\/blob\/master\/just-pandas-things.ipynb","738315b7":"## setting\nCV files are generated by [this notebook](https:\/\/www.kaggle.com\/its7171\/cv-strategy)","43c82a72":"### .to_numpy()"}}