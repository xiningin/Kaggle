{"cell_type":{"a5f0b69e":"code","cb8153c9":"code","cf30fc17":"code","02aadfd4":"code","5b90e47c":"code","4894b54d":"code","389f36a6":"code","ec6da986":"code","7e4f9a17":"code","f6ba4428":"code","87228ffa":"code","c6bc9f78":"code","4b842793":"code","b7d359bc":"code","dd561f35":"code","6f6ee976":"code","be3e3178":"code","9a0a99e6":"code","a6d5f025":"code","0b361e8e":"code","dee50433":"markdown","0c031260":"markdown","4a4bce73":"markdown","72fb88e8":"markdown","3b922844":"markdown","94181ef8":"markdown","11a76876":"markdown","2a8eb9e2":"markdown","e04b0801":"markdown","9ed4caa7":"markdown","044451db":"markdown","e61d4a0a":"markdown","db6065ea":"markdown","c540f835":"markdown","bc281ede":"markdown","cbb335ff":"markdown","d02268d0":"markdown","7cd254a0":"markdown","44192d16":"markdown","ce36238f":"markdown"},"source":{"a5f0b69e":"def matrix_mul(A, B):\n    num_rows_A = len(A)\n    num_columns_A = len(A[0])\n    num_rows_B = len(B)\n    num_columns_B = len(B[0])\n\n    # To multiply an m\u00d7n matrix by an n\u00d7p matrix, the ns must be the same,\n    # and the result is an m\u00d7p matrix.\n    if num_columns_A != num_rows_B:\n        print(\n            \"Matrix multiplication of two arguments not possible as number of columns in first Matrix is NOT equal to the number of rows in second Matrix\")\n        return\n\n    # Create an result matrix which will have\n    # dimensions of num_rows_A x num_columns_B\n    # And fill this matrix with zeros\n    result_matrix = [[0 for i in range(num_columns_B)] for j in range(num_rows_A)]\n\n    # Now implementing the key principle\n    # The element at row i, column j is the product of the ith row of matrix A and the jth column of matrix B.\n\n    for i in range(num_rows_A):\n        for j in range(num_columns_B):\n            for k in range(num_columns_A):\n                # k-th column of A should be the k-th row of B\n                result_matrix[i][j] += A[i][k] * B[k][j]\n    return result_matrix\n\n\nA = [[1, 3, 4],\n     [2, 5, 7],\n     [5, 9, 6]]\n\nB = [[1, 0, 0],\n     [0, 1, 0],\n     [0, 0, 1]]\n\nA1 = [[1, 2],\n      [3, 4]]\n\nB1 = [[1, 2, 3, 4, 5],\n      [5, 6, 7, 8, 9]]\n\n\nA2 = [[1, 3, 4], [5, 9, 6]]\n\nB2 = [[1, 0, 0], [0, 0, 1]]\n\nprint(matrix_mul(A, B))\nprint(matrix_mul(A1, B1))\nprint(matrix_mul(A2, B2))","cb8153c9":"import random\nfrom bisect import bisect\n\n\ndef pick_a_number_from_list(num_list, n=100):\n    # first calculate the cumulative sum of the list\n    # i.e.  transform the array into an array of cumulative sums:\n    # e.g. [10 60 5 25]  --> [10 70 75 100]\n    cumulative_sum_list = []\n    j = 0\n    for i in range(0, len(num_list)):\n        j += num_list[i]\n        cumulative_sum_list.append(j)\n\n    # If A = [1, 5, 27, 6, 13, 28, 100, 45, 10, 79]\n    # cumulative_sum_list = [1, 6, 33, 39, 52, 80, 180, 225, 235, 314]\n\n    result_list = []\n    for _ in range(n):\n        random_num = random.random()\n        # This will output a number between 0 and 1\n        # specifically [0.0, 1.0)\n\n        # Now pick a random number in the range from zero up to the cumulative total\n        # (in the example: 0 <= x < 314).\n        # Then, use bisection on the cumulative array to locate\n        # the index into the original array:\n\n        item_index = bisect(cumulative_sum_list, random_num * cumulative_sum_list[-1])\n\n        result_list.append(num_list[item_index])\n\n    return result_list\n\n\ndef sampling_based_on_magnitude(num_list):\n    for i in range(1, 100):\n        number = pick_a_number_from_list(num_list)\n        print(number)\n\n\nA = [1, 5, 27, 6, 13, 28, 100, 45, 10, 79]\n\n# sampling_based_on_magnitude(A)\n\n''' Would print like below\n\n[100, 5, 79, 100, 100, 100, 100, 27, 45, 28, 79, 79, 100, 100, 28, 27, 100, 79, 6, 28, 27, 13, 13, 45, 45, 100, 13, 6, 27, 100, 6, 79, 100, 27, 10, 100, 79, 45, 28, 13, 5, 28, 45, 45, 28, 45, 79, 79, 6, 79, 5, 45, 79, 6, 45, 79, 100, 45, 100, 27, 79, 13, 45, 28, 79, 100, 100, 79, 28, 100, 100, 100, 100, 45, 13, 79, 79, 79, 28, 27, 27, 100, 79, 45, 100, 79, 45, 100, 45, 28, 100, 100, 45, 79, 100, 100, 45, 45, 79, 100]\n[79, 100, 45, 100, 79, 45, 79, 100, 27, 100, 100, 10, 100, 79, 79, 79, 100, 10, 45, 79, 45, 100, 100, 27, 100, 100, 13, 45, 100, 45, 79, 13, 45, 79, 27, 100, 45, 100, 45, 100, 45, 45, 100, 100, 100, 79, 45, 100, 100, 79, 100, 100, 100, 100, 79, 28, 79, 79, 100, 45, 100, 79, 100, 79, 79, 45, 45, 100, 28, 100, 45, 79, 13, 100, 79, 100, 100, 79, 100, 6, 27, 79, 100, 79, 100, 45, 79, 79, 28, 79, 28, 100, 28, 45, 10, 27, 79, 79, 13, 100]\n...\n'''","cf30fc17":"import re\n\n\ndef replace_digits_and_remove_all_non_digits(str):\n    replacements = [\n        ('\\D', '',),\n        ('\\d', '#'),\n    ]\n\n    for old, new in replacements:\n        str = re.sub(old, new, str)\n\n    return str\n\n\n# Use-cases\ns1 = \"a2b3c4\"\ns2 = \"234\"\ns3 = 'abc'\ns4 = '#2a$#b%c%561#'\nprint(replace_digits_and_remove_all_non_digits(s1))\nprint(replace_digits_and_remove_all_non_digits(s2))\nprint(replace_digits_and_remove_all_non_digits(s3))\nprint(replace_digits_and_remove_all_non_digits(s4))\n","02aadfd4":"import math\n\n\ndef display_dash_board(marks, students):\n\n    # zip() method - will bind together corresponding elements of students and marks\n    marks_to_students_zipped = list(zip(marks, students))\n\n    # print(marks_to_students_zipped)\n    # [(45, 'student1'), (78, 'student2'), (12, 'student3'), (14, 'student4'), (48, 'student5'), (43, 'student6'), (47, 'student7'), (98, 'student8'), (35, 'student9'), (80, 'student10')]\n\n    marks_to_students_zipped.sort(key=lambda item: item[0])\n    # The \"key\" above specifies what criteria it should sort on\n    # I am selecting [0] as it should be sorted on marks\n\n    top_5_ranks_by_marks = least_5_ranks_by_marks = marks_to_students_zipped\n\n    if len(marks_to_students_zipped) > 5:\n        top_5_ranks_by_marks = marks_to_students_zipped[:-6: -1]\n        # Above slice notation means -  the last 5 items, reversed\n        least_5_ranks_by_marks = marks_to_students_zipped[:5]\n\n    students_between_25_and_75_percentile = marks_to_students_zipped[math.ceil(0.25 * len(marks_to_students_zipped)):\n                                                                     math.floor(0.75 * len(marks_to_students_zipped))]\n\n    return top_5_ranks_by_marks, least_5_ranks_by_marks, students_between_25_and_75_percentile\n\n\nStudents = ['student1', 'student2', 'student3', 'student4', 'student5', 'student6', 'student7', 'student8', 'student9',\n            'student10']\nMarks = [45, 78, 12, 14, 48, 43, 47, 98, 35, 80]\n\ndisplay_dash_board(Marks, Students)\n\n","5b90e47c":"import math\n\n\ndef closest_points_to_p(S, P):\n    total_list_of_closest_points_to_p = []\n    result_closest_to_p = []\n\n    for point in S:\n        denominator = math.sqrt((point[0] ** 2) + (point[1] ** 2)) * math.sqrt((P[0] ** 2) + (P[1] ** 2))\n        numerator = point[0] * P[0] + point[1] * P[1]\n\n        if denominator != 0:\n            cosine_distance_for_this_point = math.acos(numerator \/ denominator)\n            total_list_of_closest_points_to_p.append((cosine_distance_for_this_point, point))\n\n    # print('total_list_of_closest_points_to_p ', total_list_of_closest_points_to_p)\n    # [(2.0344439357957027, (1, 2)), (1.8545904360032246, (3, 4)), (2.9996955989856287, (-1, 1)), (0.06512516333438509, (6, -7)), (2.498091544796509, (0, 6)), (1.2021004241368467, (-5, -8)), (1.4288992721907328, (-1, -1)), (0.9272952180016123, (6, 0)), (0.14189705460416438, (1, -1))]\n\n    # So total_list_of_closest_points_to_p is an list of tuples and the first element\n    # of each of the tuple is the actual 'cosine distance' . So I need to sort\n    # total_list_of_closest_points_to_p by this first element\n\n    for item in sorted(total_list_of_closest_points_to_p, key=lambda x: x[0])[:5]:\n        # print('item is', item)\n        # (0.06512516333438509, (6, -7))\n        # (0.14189705460416438, (1, -1))\n        # ...\n        result_closest_to_p.append(item[1])\n\n    return result_closest_to_p\n\n\nS = [(1, 2), (3, 4), (-1, 1), (6, -7), (0, 6), (-5, -8), (-1, -1), (6, 0), (1, -1)]\nP = (3, -4)\n\nclosest_points = closest_points_to_p(S, P)\nprint(\"5 Closest point to P based on cosine-distance:\", *[point for point in closest_points], sep=\"\\n\")\n","4894b54d":"import math\n\n\ndef is_prime(number):\n    '''Function to check is a number is a Prime number.\n    Returns true if Prime else returns False'''\n    if number == 1: return False\n    if number == 2 or number == 3: return True\n    if number > 2 and number % 2 == 0: return False\n    max_number_to_check = int(math.sqrt(number) + 1)\n    # Now iterate over a range staring at 3 and ending at max_number_to_check\n    # and only for odd numbers, which I am making sure by adding the step 2\n    # to the range() function\n    for num in range(3, max_number_to_check, 2):\n        if number % num == 0:\n            return False\n    return True\n\n\ndef get_prime_twins(number):\n    for num1 in range(2, number):\n        num2 = num1 + 2\n        if is_prime(num1) and is_prime(num2):\n            print(num1, num2)\n\n\nprint(get_prime_twins(1000))","389f36a6":"import math\ndef get_prime_factors(number):\n    # create an empty list to hold all the prime factors\n    prime_factors = []\n\n    # First get the number of two's that divide number\n    # i.e the number of 2's that are in the factors\n    while number % 2 == 0:\n        prime_factors.append(2)\n        number = number \/ 2\n\n    # After the above while loop, when number has been\n    # divided by all the 2's - so the number must be odd at this point\n    # Otherwise it would be perfectly divisible by 2 another time\n    # so now that its odd I can skip 2 ( i = i + 2) for each increment\n    for i in range(3, int(math.sqrt(number)) + 1, 2):\n        while number % i == 0:\n            prime_factors.append(int(i))\n            number = number \/ i\n\n    # If n has NOT become 1 after the previous 2 while-loop, that means that\n    # The remaining n is the last prime factor which I have to append to the list\n    if number > 1:\n        prime_factors.append(int(number))\n\n    return prime_factors\n\n\nprint(get_prime_factors(84))","ec6da986":"from math import factorial\n\n\n# With built-in math.factorial function\ndef p(n, r):\n    return int(factorial(n) \/ factorial(n - r))\n\n\ndef c(n, r):\n    return int(factorial(n) \/ (factorial(r) * factorial(n - r)))\n\n\nprint(p(7, 3))\nprint(c(7, 3))\n\n\n# Without using math.factorial\n\ndef get_factorial(number):\n    if number == 0:\n        return 1\n    else:\n        return number * factorial(number - 1)\n\n\ndef permutation(n, r):\n    return int(get_factorial(n) \/ get_factorial(n - r))\n\n\ndef combination(n, r):\n    return int(factorial(n) \/ (factorial(r) * factorial(n-r)))\n\n\nprint(permutation(7, 3))\nprint(combination(7, 3))","7e4f9a17":"def decimal_to_binary(number):\n    if number == 0:\n        return ''\n    else:\n        return decimal_to_binary(number \/\/ 2) + str(number % 2)\n\nprint(decimal_to_binary(112))","f6ba4428":"def cubesum(number):\n    cube_sum = 0\n    while number > 0:\n        digit = int(number % 10)\n        cube_sum += digit * digit * digit\n        number \/= 10\n    return cube_sum\n\nprint(cubesum(153))\n\ndef is_armstrong(number):\n    original_num_1 = original_num_2 = number\n\n    # Below to hold the power to which all the\n    # individual digits will be raised\n    no_of_digits = 0\n\n    power_sum_of_digits = 0\n\n    while number > 0:\n        no_of_digits += 1\n        number \/\/= 10\n\n    while original_num_1 > 0:\n        this_digit = int(original_num_1 % 10)\n        power_sum_of_digits += this_digit ** no_of_digits\n        original_num_1 \/\/= 10\n\n    if original_num_2 == power_sum_of_digits:\n        print(original_num_2, \" is an Armstrong number of order \", no_of_digits)\n    else:\n        print (original_num_2, ' is not an Armstrong number')\n\n\nis_armstrong(153)\nis_armstrong(123)\nis_armstrong(370)\nis_armstrong(1634)\nis_armstrong(8208)\n\ndef print_armstrong(n1, n2):\n    for i in range (n1, n2):\n        # this i is the number that I will be checking\n        # if its an armstrong number\n        no_of_digits = 0\n        this_number = i\n\n        # while loop to calculate no of no_of_digits\n        # this_number has\n        while this_number > 0:\n            no_of_digits += 1\n            this_number \/\/= 10\n\n        # while loop to calculate power_sum_of_digits\n        # of this_number\n        this_number_2 = i\n        power_sum_of_digits = 0\n        while this_number_2 > 0:\n            # print(this_number_2)\n            this_digit = this_number_2 % 10\n            power_sum_of_digits += this_digit ** no_of_digits\n            this_number_2 \/\/= 10\n\n        # Now compare i with the power_sum\n        if power_sum_of_digits == i:\n            print(str(i))\n\n\n\nprint_armstrong(100, 400)\nprint_armstrong(8000, 9000)","87228ffa":"def prod_digits(num):\n    result = 1\n    while num > 0:\n        result *= num % 10\n        num \/\/= 10\n    return result\n\nprint(prod_digits(123))\nprint(prod_digits(452))","c6bc9f78":"def MDR(num):\n    product = prod_digits(num)\n    while product >= 10:\n        product = prod_digits(product)\n    return product\n\nprint(MDR(86))\nprint(MDR(341))\n\n# The number of times digits need to be multiplied\n# to reach one digit is called the multiplicative persistence of n.\ndef MPersistence(num):\n    multiplicative_persistence = 1\n    product = prod_digits(num)\n    while product >= 10:\n        multiplicative_persistence +=1\n        product = prod_digits(product)\n    return multiplicative_persistence\n\nprint(MPersistence(86))\nprint(MPersistence(341))","4b842793":"from math import sqrt\n\n\ndef sumPdivisors(num):\n    sum_of_divisors = 0\n\n    for divisor in range(2, int(sqrt(num)) +1 ):\n        if num % divisor == 0:\n\n            # if for a number there are 2 equal divisor include only one\n            # e.g. 9 \/ 3 = 3\n            # We have to do this adjustment as we are only checking till the\n            # sqrt(num). e.g for num = 36 when I find 4, I will also add 9\n            # because otherwise I am not checking for 9 as the range will be\n            # till the sqrt(36) i.e. 6\n            if divisor == (num \/ divisor):\n                sum_of_divisors += divisor\n            else:\n                # else add both e.g.\n                # when dividing 36 \/ 4 add both 4 and 9 to the sum\n                sum_of_divisors += divisor + (num \/ divisor)\n\n    return sum_of_divisors + 1\n    # Adding 1 to account for the number 1\n    # As 1 is a divisor for all numbers\n\n# print(sumPdivisors(36))\n# print(sumPdivisors(28))\nprint(sumPdivisors(220))\nprint(sumPdivisors(284))","b7d359bc":"from math import sqrt\n\ndef perfect_number(n1, n2):\n    for num in range(n1, n2 + 1):\n        sum_of_divisor = 0\n        for divisor in range(2, int(sqrt(num)) + 1):\n            if num % divisor == 0:\n                if divisor == (num \/ divisor):\n                    sum_of_divisor += divisor\n                else:\n                    sum_of_divisor += divisor + (num\/divisor)\n        if sum_of_divisor + 1 == num:\n             print(num)\n\nperfect_number(10, 500)","dd561f35":"from math import sqrt\n\ndef sum_proper_divisors(num):\n    # sum_of_divisors = 0\n    #\n    # for divisor in range(2, int(sqrt(num)) +1 ):\n    #     if num % divisor == 0:\n    #         if divisor == (num \/ divisor):\n    #             sum_of_divisors += divisor\n    #         else:\n    #             sum_of_divisors += divisor + (num \/ divisor)\n    #\n    # return sum_of_divisors + 1\n    sum_of_divisors = 0\n\n    for divisor in range(2, int(sqrt(num)) +1 ):\n        if num % divisor == 0:\n\n            # if for a number there are 2 equal divisor include only one\n            # e.g. 9 \/ 3 = 3\n            # We have to do this adjustment as we are only checking till the\n            # sqrt(num). e.g for num = 36 when I find 4, I will also add 9\n            # because otherwise I am not checking for 9 as the range will be\n            # till the sqrt(36) i.e. 6\n            if divisor == (num \/ divisor):\n                sum_of_divisors += divisor\n            else:\n                # else add both e.g.\n                # when dividing 36 \/ 4 add both 4 and 9 to the sum\n                sum_of_divisors += divisor + (num \/ divisor)\n\n    return int(sum_of_divisors + 1)\n\ndef is_amicable(n1, n2):\n    if sum_proper_divisors(n1) == n2 and sum_proper_divisors(n2) == n1:\n        return True\n    else:\n        return False\n\n\ndef get_amicable(n1, n2 ):\n    result = []\n    for i in range(n1, n2+1):\n        for j in range(n1+1, n2+1):\n            if i != j:\n                if is_amicable(i, j):\n                    result.append(tuple(sorted((i,j))))\n\n    # the above list will contain duplicates as the same\n    # set of numbers will appear twice as the loop progresses\n    # so now just remove duplicates from the above list\n    return list(set(result))\n\nprint(get_amicable(100, 1250))","6f6ee976":"import math\n\n\ndef i_am_the_one(red, blue, line):\n    sign_of_equation_with_red_point_tuple = -1\n\n    if eval(line.replace('x', '*%s' % red[0][0]).replace('y', '*%s' % red[0][1])) > 0:\n        sign_of_equation_with_red_point_tuple = 1\n\n    for red_point in red:\n        if sign_of_equation_with_red_point_tuple == 1 and eval(\n                line.replace('x', '*%s' % red_point[0]).replace('y', '*%s' % red_point[1])) < 0:\n            return 'NO'\n\n        if sign_of_equation_with_red_point_tuple == -1 and eval(\n                line.replace('x', '*%s' % red_point[0]).replace('y', '*%s' % red_point[1])) > 0:\n            return 'NO'\n\n    # Now the same set of two traversal for the blue-points tuples\n\n    sign_of_equation_with_blue_point_tuple = -1 * sign_of_equation_with_red_point_tuple\n\n    for blue_point in blue:\n        if sign_of_equation_with_blue_point_tuple == 1 and eval(\n                line.replace('x', '*%s' % blue_point[0]).replace('y', '*%s' % blue_point[1])) < 0:\n            return 'NO'\n\n        if sign_of_equation_with_blue_point_tuple == -1 and eval(\n                line.replace('x', '*%s' % blue_point[0]).replace('y', '*%s' % blue_point[1])) > 0:\n            return 'NO'\n\n    return 'YES'\n\n\nRed = [(1, 1), (2, 1), (4, 2), (2, 4), (-1, 4)]\nBlue = [(-2, -1), (-1, -2), (-3, -2), (-3, -1), (1, -3)]\n\nLines = [\"1x+1y+0\", \"1x-1y+0\", \"1x+0y-3\", \"0x+1y-0.5\"]\n\nfor i in Lines:\n    yes_or_no = i_am_the_one(Red, Blue, i)\n    print(yes_or_no)\n","be3e3178":"def curve_smoothing(string):\n    index_of_non_empty_cells_list = []\n\n    split_string = string.split(',')\n    # print(split_string)\n    # ['_', '_', '30', '_', '_', '_', '50', '_', '_']\n\n    for idx in range(len(split_string)):\n        if split_string[idx] != '_':\n            index_of_non_empty_cells_list.append(idx)\n\n    # Also add to index_of_non_empty_cells_list\n    # The total index-length of the original list\n    index_of_non_empty_cells_list.append(len(split_string) - 1)\n\n    print(index_of_non_empty_cells_list)\n    [2, 6, 8]\n\n    # Now loop over index_of_non_empty_cells_list to modify the\n    # original list by filing up empty_cells\n    position_to_start = 0\n\n    for element in index_of_non_empty_cells_list:\n        # Wherever, there is a missing values, I have to add the immediately proceeding value\n        # and the immediately next available value and then divide it by the number of missing values.\n        # So, initiate a variable to 'cumulative_sum_prev_and_next_value' to hold the cumulative sum of\n        # available (i.e. non-empty) cells\n        cumulative_sum_prev_and_next_value = int(split_string[element]) if split_string[element] != '_' else 0\n        cumulative_sum_prev_and_next_value += int(split_string[position_to_start]) if split_string[\n                                                                                          position_to_start] != '_' and position_to_start != element else 0\n        # print(cumulative_sum_prev_and_next_value)\n\n        # Now divide the cumulative_sum of prev and next value\n        # by the number of missing values\n        integer_to_replace_each_previous_empty_cell = cumulative_sum_prev_and_next_value \/\/ (\n                element - position_to_start + 1)\n\n        # print(\"integer_to_replace_each_previous_empty_cell value is \", integer_to_replace_each_previous_empty_cell)\n        # For the first loop it will give me 10 which is what I will replace each emtpy value with\n\n        # And now modify the original list by replacing the empty cells with the above\n        # value i.e.  integer_to_replace_each_previous_empty_cell\n        split_string = [\n            integer_to_replace_each_previous_empty_cell if position_to_start <= x <= element else split_string[x] for x\n            in range(len(split_string))]\n\n        # print(\"element: %s cumulative_sum_prev_and_next_value: %s  split_string: %s\" %(element, cumulative_sum_prev_and_next_value, split_string ))\n\n        # After original list has been updated by filling up the empty cells\n        # now update the starting position for the next loop\n\n        position_to_start = element\n\n    return split_string\n\n\n#  ------------------------\nS = \"_,_,30,_,_,_,50,_,_\"\nans = smoothed_values = curve_smoothing(S)\n# print(curve_smoothing(S))\nprint(ans)","9a0a99e6":"\nfrom fractions import Fraction\n\n\ndef compute_conditional_probability(A):\n    # From the given 2-D Matrix A\n    # Set a dictionary containing the count of all the F and S together\n    # This dictionary will have as many elements as the given Matrix A\n    dictionary_f_intersection_s = dict()\n    for item_list in A:\n        dict_key = str(item_list[0]) + str(item_list[1])\n        dictionary_f_intersection_s[dict_key] = 0\n    # print(dictionary_f_intersection_s)\n    # {'F1S1': 0, 'F2S2': 0, 'F3S3': 0, 'F1S2': 0, 'F2S3': 0, 'F3S2': 0, 'F2S1': 0, 'F4S1': 0, 'F4S3': 0, 'F5S1': 0}\n\n    # Set a dictionary containing the count of all the S only\n    dictionary_s = {'S1': 0, 'S2': 0, 'S3': 0}\n\n    for i in range(len(A)):\n        f_intersection_s_key = A[i][0] + A[i][1]\n        dictionary_f_intersection_s[f_intersection_s_key] += 1\n\n        s_key = A[i][1]\n        dictionary_s[s_key] += 1\n\n    # print('a. P(F=F1|S==S1)=', Fraction(dictionary_f_intersection_s['F1S1'] \/ dictionary_s['S1']).limit_denominator(), ' P(F=F1|S==S2)=', Fraction(dictionary_f_intersection_s['F1S2'] \/ dictionary_s['S2']).limit_denominator(), ' P(F=F1|S==S3)=', Fraction(dictionary_f_intersection_s.get('F1S3', 0) \/ dictionary_s['S3']).limit_denominator())\n    idx = 97\n    print('{0:c}. P(F=F1|S==S1)={F1S1}\/{S1}, P(F=F1|S==S2)={F1S2}\/{S2}, P(F=F1|S==S3)={F1S3}\/{S3}'.format(idx,\n                                                                                                          F1S1=dictionary_f_intersection_s.get(\n                                                                                                              'F1S1',\n                                                                                                              0), S1=\n                                                                                                          dictionary_s[\n                                                                                                              'S1'],\n                                                                                                          F1S2=dictionary_f_intersection_s.get(\n                                                                                                              'F1S2',\n                                                                                                              0), S2=\n                                                                                                          dictionary_s[\n                                                                                                              'S2'],\n                                                                                                          F1S3=dictionary_f_intersection_s.get(\n                                                                                                              'F1S3',\n                                                                                                              0), S3=\n                                                                                                          dictionary_s[\n                                                                                                              'S3']))\n\n    print('{0:c}. P(F=F2|S==S1)={F2S1}\/{S1}, P(F=F2|S==S2)={F2S2}\/{S2}, P(F=F2|S==S3)={F2S3}\/{S3}'.format(idx+1,\n                                                                                                          F2S1=dictionary_f_intersection_s.get(\n                                                                                                              'F2S1',\n                                                                                                              0), S1=\n                                                                                                          dictionary_s[\n                                                                                                              'S1'],\n                                                                                                          F2S2=dictionary_f_intersection_s.get(\n                                                                                                              'F2S2',\n                                                                                                              0), S2=\n                                                                                                          dictionary_s[\n                                                                                                              'S2'],\n                                                                                                          F2S3=dictionary_f_intersection_s.get(\n                                                                                                              'F2S3',\n                                                                                                              0), S3=\n                                                                                                          dictionary_s[\n                                                                                                              'S3']))\n\n    print('{0:c}. P(F=F3|S==S1)={F3S1}\/{S1}, P(F=F3|S==S2)={F3S2}\/{S2}, P(F=F3|S==S3)={F3S3}\/{S3}'.format(idx + 2,\n                                                                                                          F3S1=dictionary_f_intersection_s.get(\n                                                                                                              'F3S1',\n                                                                                                              0), S1=\n                                                                                                          dictionary_s[\n                                                                                                              'S1'],\n                                                                                                          F3S2=dictionary_f_intersection_s.get(\n                                                                                                              'F3S2',\n                                                                                                              0), S2=\n                                                                                                          dictionary_s[\n                                                                                                              'S2'],\n                                                                                                          F3S3=dictionary_f_intersection_s.get(\n                                                                                                              'F3S3',\n                                                                                                              0), S3=\n                                                                                                          dictionary_s[\n                                                                                                              'S3']))\n\n    print('{0:c}. P(F=F4|S==S1)={F4S1}\/{S1}, P(F=F4|S==S2)={F4S2}\/{S2}, P(F=F4|S==S3)={F4S3}\/{S3}'.format(idx + 2,\n                                                                                                          F4S1=dictionary_f_intersection_s.get(\n                                                                                                              'F4S1',\n                                                                                                              0), S1=\n                                                                                                          dictionary_s[\n                                                                                                              'S1'],\n                                                                                                          F4S2=dictionary_f_intersection_s.get(\n                                                                                                              'F4S2',\n                                                                                                              0), S2=\n                                                                                                          dictionary_s[\n                                                                                                              'S2'],\n                                                                                                          F4S3=dictionary_f_intersection_s.get(\n                                                                                                              'F4S3',\n                                                                                                              0), S3=\n                                                                                                          dictionary_s[\n                                                                                                              'S3']))\n\n    print('{0:c}. P(F=F5|S==S1)={F5S1}\/{S1}, P(F=F5|S==S2)={F5S2}\/{S2}, P(F=F5|S==S3)={F5S3}\/{S3}'.format(idx + 2,\n                                                                                                          F5S1=dictionary_f_intersection_s.get(\n                                                                                                              'F5S1',\n                                                                                                              0), S1=\n                                                                                                          dictionary_s[\n                                                                                                              'S1'],\n                                                                                                          F5S2=dictionary_f_intersection_s.get(\n                                                                                                              'F5S2',\n                                                                                                              0), S2=\n                                                                                                          dictionary_s[\n                                                                                                              'S2'],\n                                                                                                          F5S3=dictionary_f_intersection_s.get(\n                                                                                                              'F5S3',\n                                                                                                              0), S3=\n                                                                                                          dictionary_s[\n                                                                                                              'S3']))\n\n\n# Implementation of the above function\n\nA = [['F1', 'S1'], ['F2', 'S2'], ['F3', 'S3'], ['F1', 'S2'], ['F2', 'S3'], ['F3', 'S2'], ['F2', 'S1'], ['F4', 'S1'],\n     ['F4', 'S3'], ['F5', 'S1']]\n\ncompute_conditional_probability(A)","a6d5f025":"\ndef string_features(S1, S2):\n    s1_unique_words_set = set(S1.split(\" \"))\n    s2_unique_words_set = set(S2.split(\" \"))\n\n    num_of_common_words = len(s1_unique_words_set.intersection(s2_unique_words_set)),\n    s1_words_not_in_s2 = s1_unique_words_set - s2_unique_words_set\n    s2_words_not_in_s1 = s2_unique_words_set - s1_unique_words_set\n\n    print('a. ', list(num_of_common_words)[0])\n    print('b. ', list(s1_words_not_in_s2))\n    print('b. ', list(s2_words_not_in_s1))\n\n\n# Implementation\nS1 = \"the first column F will contain only 5 uniques values\"\nS2 = \"the second column S will contain only 3 uniques values\"\nstring_features(S1, S2)","0b361e8e":"from math import log\n\n\ndef compute_log_loss(A):\n    cross_entropy = 0\n    for row in A:\n        cross_entropy += (row[0] * log(row[1], 10) + ((1 - row[0]) * log(1 - row[1], 10)))\n\n    log_loss = -1 * cross_entropy \/ len(A)\n    return log_loss\n\n\nA = [[1, 0.4], [0, 0.5], [0, 0.9], [0, 0.3], [0, 0.6], [1, 0.1], [1, 0.9], [1, 0.8]]\nprint(compute_log_loss(A))\n","dee50433":"## Q - Implement Log-Loss Function in Plain Python\n\nYou will be given a list of lists, each sublist will be of length 2 i.e. [[x,y],[p,q],[l,m]..[r,s]]\nconsider its like a matrix of n rows and two columns\n\n- a. the first column Y will contain integer values\n- b. the second column $Y_{score}$ will be having float values <br>\n\nYour task is to find the value of the below\n\n![img](https:\/\/i.imgur.com\/de0qTf4.png)\n\nEx:\n[[1, 0.4], [0, 0.5], [0, 0.9], [0, 0.3], [0, 0.6], [1, 0.1], [1, 0.9], [1, 0.8]]\noutput:\n0.4243099\n\n### Explanations and Notes on Log Loss\n\nLogarithmic Loss (i.e. Log Loss and also same as Cross Entropy Loss), is a classification loss function. Log Loss quantifies the accuracy of a classifier by penalising false classifications. Minimising the Log Loss is basically equivalent to maximising the accuracy of the classifier.\n\nLog loss is used when we have {0,1} response. In these cases, the best models give us values in terms of probabilities. The log loss function is simply the objective function to minimize, in order to fit a log linear probability model to a set of binary labeled examples.\n\n![img](https:\/\/i.imgur.com\/IVGQ307.png)\n\nIn slightly different form Log is expressed as\n\n![img](https:\/\/i.imgur.com\/DmdC21x.png)\n\nLog Loss is a slight modification on the Likelihood Function. In fact, Log Loss is -1 * the log of the likelihood function.\n\nLog Loss measures the accuracy of a classifier. It is used when the model outputs a probability for each class, rather than just the most likely class.\n\nIn simple words, log loss measures the UNCERTAINTY of the probabilities of your model by comparing them to the true labels. Let us look closely at its formula and see how it measures the UNCERTAINTY.\n\nNow the question is, your training labels are 0 and 1 but your training predictions are 0.4, 0.6, 0.89, 0.1122 etc.. So how do we calculate a measure of the error of our model ? If we directly classify all the observations having values > 0.5 into 1 then we are at a high risk of increasing the miss-classification. This is because it may so happen that many values having probabilities 0.4, 0.45, 0.49 can have a true value of 1.\n\n**This is where logLoss comes into picture.**\n\nLog-loss is a \u201csoft\u201d measurement of accuracy that incorporates the idea of probabilistic confidence. It is intimately tied to information theory: log-loss is the cross entropy between the distribution of the true labels and the predictions. Intuitively speaking, entropy measures the unpredictability of something. Cross entropy incorporate the entropy of the true distribution, plus the extra unpredictability when one assumes a different distribution than the true distribution. So log-loss is an information-theoretic measure to gauge the \u201cextra noise\u201d that comes from using a predictor as opposed to the true labels. By minimizing the cross entropy, one maximizes the accuracy of the classifier.\n\n\n### Cases where Log-Loss function can be mostly used\n\nThe log loss function is used as evaluation metric of the ML classifier models. This is an important metric as it is only metric which uses the actual predicted probability for evaluating the model ( ROC - AUC uses the order of the values but not the actual values). This is very useful as this penalizes the model heavily if it is very confident in predicting the wrong class(please check the plot of -log(x)). We optimize our model to minimize the log loss. Hence this metric is very useful in the cases where the cost of predicting wrong class is very high. Hence model tries to reduce the probabilities of belonging to wrong class and we can choose the higher threshold of probability to predict the class label. This metric can be used for both binary and multi class classifications. The value of log loss lies between 0 ( including) and infinity. This is the only disadvantage of log loss as it is not very interpretable. We know that the best case would be 0 value of log loss however we can not interpret other values of log loss. For some cases log loss of 1 can be good while for other it may not be good enough. One hack is that we can measure the log loss of random model and try to reduce log-loss of our actual model from this value as much as possible without increasing variance much.\n\nPlease note that this metric can only be used if our model can predict the probability of each class. Hence for calculating the log loss for the models which don't provide the probability score, probability calibration methods can be used on top of the base classifier to predict the probability score for each class.\n\n### An use-case of Logloss\n\nSay, I am predicting Cancer from my ML Model. And Suppose you have 5 cases. 2 cases were cancer (y1 = y2 = 1) and 3 cases were benign (y3 = y4 = y5 = 0). Say your model predicted each model has 0.5 probability of cancer. In this case, what we have for log loss is\u2026\n\n\u22121\/5\u2217(log(0.5)+log(0.5)+(1\u22120)\u2217log(1\u22120.5)+(1\u22120)\u2217log(1\u22120.5)+(1\u22120)\u2217log(1\u22120.5))\n\nEssentially, y_i and (1 - y_i) determines which term is to be dropped depending on the ground truth label. Depending on ground truth, either the log (y_hat) or log(1-y_hat) will be selected to determines how far away from truth your model\u2019s generated probability is.\n\nWe can use the log_loss function from scikit-learn, with documentation found [here](http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.log_loss.html): But here we will implement a pure-python version","0c031260":"## Q: Calculate Conditional Probability from 2-D Matrix\n\nYou will be given a list of lists, each sublist will be of length 2 i.e. [[x,y],[p,q],[l,m]..[r,s]] consider its like a martrix of n rows and two columns\n\n- 1. the first column F will contain only 5 uniques values (F1, F2, F3, F4, F5)\n- 2. the second column S will contain only 3 uniques values (S1, S2, S3)\n\nyour task is to find\n\na. Probability of P(F=F1|S==S1), P(F=F1|S==S2), P(F=F1|S==S3)\nb. Probability of P(F=F2|S==S1), P(F=F2|S==S2), P(F=F2|S==S3)\nc. Probability of P(F=F3|S==S1), P(F=F3|S==S2), P(F=F3|S==S3)\nd. Probability of P(F=F4|S==S1), P(F=F4|S==S2), P(F=F4|S==S3)\ne. Probability of P(F=F5|S==S1), P(F=F5|S==S2), P(F=F5|S==S3)\n\nEx:\n\n```\n[\n[F1,S1],\n[F2,S2],\n[F3,S3],\n[F1,S2],\n[F2,S3],\n[F3,S2],\n[F2,S1],\n[F4,S1],\n[F4,S3],\n[F5,S1]\n]\n\na. P(F=F1|S==S1)=1\/4, P(F=F1|S==S2)=1\/3, P(F=F1|S==S3)=0\/3\nb. P(F=F2|S==S1)=1\/4, P(F=F2|S==S2)=1\/3, P(F=F2|S==S3)=1\/3\nc. P(F=F3|S==S1)=0\/4, P(F=F3|S==S2)=1\/3, P(F=F3|S==S3)=1\/3\nd. P(F=F4|S==S1)=1\/4, P(F=F4|S==S2)=0\/3, P(F=F4|S==S3)=1\/3\ne. P(F=F5|S==S1)=1\/4, P(F=F5|S==S2)=0\/3, P(F=F5|S==S3)=0\/3\n```\n\n### Explanations and Theory\n\n**Defining Conditional probability** - Conditional probability is the probability of an event given that some condition is taken to be true. Mathematically\n\n`P(A|B) = P(A intersection B) \/ P(B)`\n\nSo here e.g.\n\n`P(F=F1 | S == S2) = P (F1 intersection S2 ) \/ P (S2)`\n\nIf A and B are independent, then P(B|A) = P(B), and P(A|B) = P(A), and in this case I don\u2019t need to do any extra mathematics, and P(A|B) is P(A),\n\nSo in that case P(F=F1 | S == S2) would be 1\/5.\n\nBut here, the assumption is that A and B are NOT independent, the question of conditional probability calculation does not arise at all.\n\n\n### Now first let\u2019s check how we are calculating Conditional Probabilities from list of lists or 2-D Matrix\n\nIf we have list of lists. Lets assume I have two elements F and S like below.\n\n[F,S]\n\nAnd the values they take are\n\n[[1,3],[1,2],[2,4],[2,2],[3,2]]\n\nWhat is P(F1|S2)?\n\nP(F1)=2\/5 (because there are 2 lists containing F=1) of the total 5 lists\nP(S2)=3\/5 (because there are 3 lists containing S=2) of the total 5 lists\n\nNow for P(F1 n S2) it can be said as: \u201cThe Probability that a randomly chosen list has both F=1 and S=2\u201d.\n\nSo P(F1 n S2) = 1\/5 (because there is only one list where the list has both F=1 and S=2, out of 5 lists)\n\nSo Now P(F=F1|S==S2) = P(F1 intersection S2 ) \/ P (S2) = (1\/5) \/ (3 \/ 5 ) = ( 1 \/ 5 ) * ( 5 \/ 3 ) = 1 \/ 3\n\n**In another words P(F1|S2) can also be expressed as**\nP(F1|S2) = 1\/3 ( since given S=S2, means there are only 3 lists, and out of which F=F1 is only 1 list).\n\nFrom above we can absolutely confirm that F1 and S2 are NOT independent. Because, it\u2019s not possible for F1 and S2 to be independent if an outcome of one of the events changes the probability of the other event.\n\n### Explanations of how P(F=F1|S==S2)=1\/3 for our data point given in the quesion\n\nWe know the Math Equation that  P(F=F1|S==S2) = P(F1 intersection S2 ) \/ P (S2)\n\nP(F1 n S2) = 1\/10\nP(S2) = 3\/10.\n\nSo P(F=F1|S==S2) = P(F1 intersection S2 ) \/ P (S2) =\nP(F1 n S2) \/ P(S2)  =\n(1\/10) \/ (3\/10) =\n(1\/10) * (10\/3) (by the rule of multiplicative inverse) =\n1\/3 = P(F1|S2)","4a4bce73":"## Q. Twin Prime Numbers\n\n#### Write a program to print twin primes less than 1000. If two consecutive odd numbers are both prime then they are known as twin primes\n\n- Twin primes are pairs of primes which differ by two\n- Example of first series of twin primes are {3,5}, {5,7}, {11,13} and {17,19}.\n\n#### Solution Steps \/ Algo\n\n- First I will write the function to determine if a number is Prime\n- And then use that function to go over the range staring from 2 upto the given number\n- 1 is not considered a Prime and 2 is considered the first Prime","72fb88e8":"## Q - Given two sentences S1, S2 find common and uncommon words between\u00a0them\n\nYou will be given two sentences S1, S2 your task is to find\na. Number of common words between S1, S2\nb. Words in S1 but not in S2\nc. Words in S2 but not in S1\nEx:\n\nS1= \"the first column F will contain only 5 uniques values\"\nS2= \"the second column S will contain only 3 uniques values\"\nOutput:\na. 7\nb. ['first','F','5']\nc. ['second','S','3']","3b922844":"## Q - Filling the missing values in the specified format\n\nYou will be given a string with digits and '\\_'(missing value) symbols you have to replace the '\\_' symbols as explained\n\nEx 1: _, _, _, 24 ==> 24\/4, 24\/4, 24\/4, 24\/4 i.e we. have distributed the 24 equally to all 4 places\n\nEx 2: 40, _, _, _, 60 ==> (60+40)\/5,(60+40)\/5,(60+40)\/5,(60+40)\/5,(60+40)\/5 ==> 20, 20, 20, 20, 20 i.e. the sum of (60+40) is distributed equally to all 5 places\n\nEx 3: 80, _, _, _, _  ==> 80\/5,80\/5,80\/5,80\/5,80\/5 ==> 16, 16, 16, 16, 16 i.e. the 80 is distributed qually to all 5 missing values that are right to it\n\nEx 4: _, _, 30, _, _, _, 50, _, _\n\n==> we will fill the missing values from left to right\n    a. first we will distribute the 30 to left two missing values (10, 10, 10, _, _, _, 50, _, _)\n    b. now distribute the sum (10+50) missing values in between (10, 10, 12, 12, 12, 12, 12, _, _)\n    c. now we will distribute 12 to right side missing values (10, 10, 12, 12, 12, 12, 4, 4, 4)\nfor a given string with comma seprate values, which will have both missing values numbers like ex: \"_, _, x, _, _, _\" you need fill the missing values\nQ: your program reads a string like ex: \", , x, , , _\" and returns the filled sequence\n\nEx:\n\nInput1: \"_,_,_,24\"\nOutput1: 6,6,6,6\n\nInput2: \"40,_,_,_,60\"\nOutput2: 20,20,20,20,20\n\nInput3: \"80,_,_,_,_\"\nOutput3: 16,16,16,16,16\n\nInput4: \"_,_,30,_,_,_,50,_,_\"\nOutput4: 10,10,12,12,12,12,4,4,4\n\n---\n\n#### So the rule for calculation of missing value is -\n\n- 1. Wherever, there is a missing values, I have to add the immediately proceeding value and the immediately next available value and then divide it by the number of missing values. And then Replace the available value with the calculated value as above.\n\n- 2. For the next missing value, calculation, for the immediately preceding available value take the calculated value as explained above.","94181ef8":"## Q. Find the sum of proper divisors of a number\n\nWrite a function sumPdivisors() that finds the sum of proper divisors of a number. Proper divisors of a number are those numbers by which the number is divisible, except the number itself. For example proper divisors of 36 are 1, 2, 3, 4, 6, 9, 12, 18\nThe sum of which is 55","11a76876":"## Q. Implement formulae of permutations and combinations.\n\nNumber of permutations of n objects taken r at a time: p(n, r) = n! \/ (n-r)!","2a8eb9e2":"\n## Q - Find whether a given line (equation in x and y ) is able to separate the two lists of points (tuples) successfully\n\nconsider you have given two set of data points in the form of list of tuples like\n\n```\nRed =[(R11,R12),(R21,R22),(R31,R32),(R41,R42),(R51,R52),..,(Rn1,Rn2)]\n\nBlue=[(B11,B12),(B21,B22),(B31,B32),(B41,B42),(B51,B52),..,(Bm1,Bm2)]\n```\n\nand set of line equations(in the string format, i.e list of strings)\n\n```\nLines = [a1x+b1y+c1, a2x+b2y+c2, a3x+b3y+c3, a4x+b4y+c4,.., K lines]\n```\nNote: you need to do string parsing here and get the coefficients of x,y and intercept\n\nyour task is for each line that is given print \"YES\"\/\"NO\", you will print yes, if all the red points are one side of the line and blue points are other side of the line, otherwise no\n\nExample :-\n\nRed= [(1,1),(2,1),(4,2),(2,4), (-1,4)]\nBlue= [(-2,-1),(-1,-2),(-3,-2),(-3,-1),(1,-3)]\n\nLines=[\"1x+1y+0\",\"1x-1y+0\",\"1x+0y-3\",\"0x+1y-0.5\"]\n\n![img](https:\/\/i.imgur.com\/DoQf7mE.jpg)\n\n#### Output:\n\nYES\nNO\nNO\nYES\n\n### Solution and Explanations and Notes on methods, steps, algorithms\n\nMath Theory - If the line equation is $y=ax+b$ and the coordinates of a point is $(x_0,y_0)$ then compare $y_0$ and $ax_0+b$, for example if $y_0>ax_0+b$ then the point is above the line, etc.\n\nIn this particular case - Mathematically to find if 2 points lie on the opposite side of a line -\n\n### Mathematics to determine if 2 points are on opposite sides of a line\n\n#### Find the equation of the line. It should be of the form $ax + by + c = 0$. Given two points $(x_1, y_2)$ and $(x_2, y_2)$, plug these into that equation. They are on opposite side of the line if $ax_1 + by_1 + c < 0$ and $ax_2 + by_2 + c > 0$, or visa-versa.\n\n[Source](https:\/\/math.stackexchange.com\/a\/162730\/517433)\n\n\nSo I take the equation of the line, say \"1x+1y+0\"\n\nNow consider 2 points (1,1) and (-6,-1)\n\nFor point (1, 1) => 1(1)+ 1(1) = 2 which is > 0\n\nFor point (-6, -1) = 1(-6)+(1)(-1) = -7 which is < 0\n\nTherefore, we can conclude that (1,1) and (-6,-1) lie on different sides of the line S.\n\nNow in the given problem, given an equation - all red should be on one side of the equation and blue on the other side.\n\n#### General Mathematical Principle\n\n\n### Here's the Algorithm I will follow for the below Python Implementation\n\n- The question already mentioned - \"you need to do string parsing here and get the coefficients of x,y and intercept\"\n- I know the string in the Equation will be of the form `some_number*x` and `some_number*y`, where the 'some_number' is the coefficients of x and y. So I need to break the string up in such a way that I am only left with just the numbers, and then replace the value of x and y in the equation with the value of the points that I am evaluating.\n- Initiate a variable `sign_of_equation_with_red_point_tuple` to be minus 1 (-1)\n- Take the first tuple of the Red_side list (i.e.  red[0][0] and red[0][1] )  and replace then into the Equation. If sign of Equation becomes  positive with this, then change `sign_of_equation_with_red_point_tuple` to be plus 1 ( 1 )\n- Now assuming `sign_of_equation_with_red_point_tuple` to be plus one ( 1 ) do the below step\n- One by one, check for all the Red side's tuples (points) - if Equation sign becomes negative for any point > That means that single point is on the other side of the Line Equation.\n- So in that case, then return 'NO' from the function.\n- Similarly in the next step, assuming `sign_of_equation_with_red_point_tuple` to be negaive 1 (-1), do the below step\n- Ony by one, check for all the Red side's tuples (points) - if Equation sign becomes positive for any point > That means that single point is on the other side of the Line Equation.\n- So in that case, then return 'NO' from the function.\n- Do both the above steps for the Blue side as well.\n- And if none of the above 4 steps returns a 'NO' ans, then finally return 'YES' from the function.\n","e04b0801":"## Q: Product of two matrices\n\nGiven two matrices print the product of those two matrices\n\n### Solution with Explanations and Theory\n\n### Basics of Matrix Multiplication\n\nMultiplication rule to remember - Here also the flow is Row and then Column\n\n1. Sum-Product of First Row \\* 1st Column => Becomes the 1-st_Row-1-st_Column of the resultant Matrix\n\n2. Sum-Product of 1st Row \\* 2-nd Column => Becomes the 1-st_Row-2-nd_Column of the resultant Matrix\n\n### There are four simple rules that will help us in multiplying matrices, listed here:\n\n#### 1. Firstly, we can only multiply two matrices when the number of columns in matrix A is equal to the number of rows in matrix B.\n\n#### 2. Secondly, the first row of matrix A multiplied by the first column of matrix B gives us the first element in the matrix AB, and so on.\n\n#### 3. Thirdly, when multiplying, order matters\u2014specifically, AB \u2260 BA.\n\n#### 4. Lastly, the element at row i, column j is the product of the ith row of matrix A and the jth column of matrix B.\n\nFurther read through [this](https:\/\/www.mathsisfun.com\/algebra\/matrix-multiplying.html) for a very nice visual flow of Matrix Multiplication.\n\n![img](https:\/\/i.imgur.com\/9IETtIo.png)","9ed4caa7":"## Q. multiplicative digital root and multiplicative persistence\n\n If all digits of a number n are multiplied by each other repeating with the product, the one digit number obtained at last is called the multiplicative digital root of n. The number of times digits need to be multiplied to reach one digit is called the multiplicative persistence of n.\n\nExample: 86 -> 48 -> 32 -> 6 (MDR 6, MPersistence 3)\n341 -> 12->2  (MDR 2, MPersistence 2)\n\nUsing the function prod_digits() of previous exercise write functions MDR() and\nMPersistence() that input a number and return its multiplicative digital root and\nmultiplicative persistence respectively","044451db":"## Q: Students marks dashboard\n\nconsider the marks list of class students given two lists\n\nStudents = 'student1','student2','student3','student4','student5','student6','student7','student8','student9','student10'\n\nMarks = 45, 78, 12, 14, 48, 43, 45, 98, 35, 80\n\nfrom the above two lists the Student0 got Marks0, Student1 got Marks1 and so on\n\nyour task is to print the name of students\n\n- a. Who got top 5 ranks, in the descending order of marks\n- b. Who got least 5 ranks, in the increasing order of marks\n- c. Who got marks between >25th percentile <75th percentile, in the increasing order of marks\n\nEx 1:\nStudents=['student1','student2','student3','student4','student5','student6','student7','student8','student9','student10']\nMarks = [45, 78, 12, 14, 48, 43, 47, 98, 35, 80]\n\na.\nstudent8  98\nstudent10 80\nstudent2  78\nstudent5  48\nstudent7  47\n\nb.\nstudent3 12\nstudent4 14\nstudent9 35\nstudent6 43\nstudent1 45\n\nc.\nstudent9 35\nstudent6 43\nstudent1 45\nstudent7 47\nstudent5 48\n\n\n### Solution and Explanations and Notes on methods, steps, algorithms\n\n### Note on zip() function\n\nPython\u2019s zip() function is defined as zip(*iterables). The function takes in iterables as arguments and returns an iterator. This iterator generates a series of tuples containing elements from each iterable. zip() can accept any type of iterable, such as files, lists, tuples, dictionaries, sets, and so on.\n\n```python\nnumbers = [1, 2, 3]\nletters = ['a', 'b', 'c']\nzipped = zip(numbers, letters)\nprint(zipped)  # <zip object at 0x7f04f57a2c40>\nprint(list(zipped))  # [(1, 'a'), (2, 'b'), (3, 'c')]\n```\n\n![img](https:\/\/i.imgur.com\/NNIEtAL.png)\n\n[Photo Source](https:\/\/www.educative.io\/edpresso\/what-is-the-zip-function-in-python)\n\nIf the passed iterables are of different lengths, then the returned iterator takes the length of the shortest iterator passed to the function.\n\n### Note on slice syntax (selecting items from list with colon)\n\n`:` is the delimiter of the slice syntax to 'slice out' sub-parts in sequences , `[start:end]`\n\n    list[start:stop]  # items start through stop-1\n    list[start:]      # items start through the rest of the array\n    list[:stop]       # items from the beginning through stop-1\n    list[:]           # a copy of the whole array\n\nWhich means\n\n    [1:5] is equivalent to \"from 1 to 5\" (5 not included)\n    [1:] is equivalent to \"1 to end\"\n    [len(a):] is equivalent to \"from length of a to end\"","e61d4a0a":"## Q. Product of digits of a number.\n\nWrite a function prod_digits() that inputs a number and returns the product of digits of that number.","db6065ea":"## Q. Find all prime factors of a number.\n\nExample: prime factors of 56 are\n\n2, 2, 2, 7\n\n","c540f835":"## Q: Closest points (based on cosine distance)\n\nFind the closest points (based on cosine distance) in S (which is n data points in the form of list of tuples) from P (which is a point `P=(p,q)` )\n\nConsider you have given n data points in the form of list of tuples like\n\n`S=[(x1,y1),(x2,y2),(x3,y3),(x4,y4),(x5,y5),..,(xn,yn)]` and a point `P=(p,q)`\n\nYour task is to find 5 closest points(based on cosine distance) in S from P\n\ncosine distance between two points (x,y) and (p,q) is defined as\n\n### $cos^{-1}(\\frac{(x\\cdot p+y\\cdot q)}{\\sqrt(x^2+y^2)\\cdot\\sqrt(p^2+q^2)})$\n\nEx:\n\nS= [(1,2),(3,4),(-1,1),(6,-7),(0, 6),(-5,-8),(-1,-1)(6,0),(1,-1)]\nP= (3,-4)\n\n![img](https:\/\/i.imgur.com\/vIFPOcG.jpg)\n\nOutput:\n(6,-7)\n(1,-1)\n(6,0)\n(-5,-8)\n(-1,-1)\n\n### Solution and Explanations and Notes on methods, steps, algorithms\n\nCosine Similarity and Cosine Distance is heavily used in recommendation systems to recommend products to the users based on there likes and dislikes. For example, Amazon, Flipkart and similar Companies use it to recommend items to customers for personalized experience,Movies rating and recommendation etc.\n\n### Notes on Cosine-Distance concept\n\nThe cosine distance measures the angular cosine distance between vectors a and b.\nWhile cosine similarity measures the similarity between two vectors of an inner product space. It is measured by the cosine of the angle between two vectors and determines whether two vectors are pointing in roughly the same direction.\n\n### A comparison between euclidean distance (d) and cosine similarity (\u03b8).\n\n![img](https:\/\/i.imgur.com\/LuKJMvT.png)\n\nThe distance d above is euclidean distance. Which can be measured as below\n\n### \u221a{(x2-x1)^2 + (y2-y1)^2}\n\nBut cosine considers the angle between vectors (thus not taking into regard their weight or magnitude).\n\n![img](https:\/\/i.imgur.com\/U8vIZja.png)\n\n[Source of above image](https:\/\/medium.com\/datadriveninvestor\/cosine-similarity-cosine-distance-6571387f9bf8)\n\nFor two vectors that are completely identical, the cosine similarity will be 1. For vectors that are completely unrelated, this value will be 0. If there is an opposite relationship between the two vectors, this time the cosine similarity value will be -1. (cos0 = 1, cos90 = 0, cos180 = -1)\n\n![img](https:\/\/i.imgur.com\/KuBcMCg.png)","bc281ede":"## Q: proportional Probability Sampling\n\nSelect a number randomly with probability proportional to its magnitude from the given array of n elements\n\nconsider an experiment, selecting an element from the list A randomly with probability proportional to its magnitude. assume we are doing the same experiment for 100 times with replacement, in each experiment you will print a number that is selected randomly from A.\n\nEx 1:\nA = [1, 5, 27, 6, 13, 28, 100, 45, 10, 79]\nlet f(x) denote the number of times x getting selected in 100 experiments.\nf(100) > f(79) > f(45) > f(28) > f(27) > f(13) > f(10) > f(6) > f(5) > f(0)\n\n\n### Solution and Explanations and Notes on methods, steps, algorithms\n\nThe below solution is inspired by the explanations given in [this Stackoverflow](https:\/\/stackoverflow.com\/questions\/16489449\/select-element-from-array-with-probability-proportional-to-its-value) question.com\n\n**To explain further on the question** -\n\nI have an array of doubles and I want to select a value from it with the probability of each value being selected being proportional to its value. For example:\n\n```\narr[0] = 100\narr[1] = 200\n```\n\nIn this example, element 0 would have a 66% of being selected and element 1 a 33% chance.\n\n### The general algorithm is\n\n - sum the array\n - Pick a random number between 0 and the sum\n - Accumulate the values starting from the beginning of the array until you are >= to the random value.\n\n**Note: All values must be positive for this to work.**\n\nThe usual technique is to transform the array into an array of cumulative sums:\n\n     [10 60 5 25]  --> [10 70 75 100]\n\nPick a random number in the range from zero up to the cumulative total (in the example: ``0 <= x < 100``).  Then, use [bisection][1] on the cumulative array to locate the index into the original array:\n\n\n    Random variable x      Index in the Cumulative Array      Value in Original Array\n    -----------------      -----------------------------      ----------------------\n     0 <= x < 10                      0                            10\n    10 <= x < 70                      1                            60\n    70 <= x < 75                      2                             5\n    75 <= x < 100                     3                            25\n\nFor example, if the random variable *x* is 4, bisecting the cumulative array gives a position index of 0 which corresponds to 10 in the original array.\n\nAnd, if the random variable *x* is 72, bisecting the cumulative array gives a position index of 2 which corresponds to 5 in the original array.\n\nFor an inverse proportion, the technique is exactly the same except you perform an initial transformation of the array into its reciprocals and then build the cumulative sum array:\n\n    [10 60 5 25]  -->  [1\/10  1\/60  1\/5  1\/25]  -->  [1\/10  7\/60  19\/60  107\/300]\n\n  [1]: http:\/\/en.wikipedia.org\/wiki\/Binary_search_algorithm\n\n### Note on the bisect function and module that I am using in this solution\n\nFrom [official-doc](https:\/\/docs.python.org\/3\/library\/bisect.html) - `bisect.bisect(a, x, lo=0, hi=len(a))` - Returns an insertion point for x in a which comes after (to the right of) any existing entries of x in a.\n\nSome nice explanations from [geeksforgeeks](https:\/\/www.geeksforgeeks.org\/bisect-algorithm-functions-in-python\/) -\n\nThe purpose of Bisect algorithm is to find a position (i.e. the index) in list where an element needs to be inserted to keep the list sorted.\n\nPython in its definition provides the bisect algorithms using the module \u201cbisect\u201d which allows to keep the list in sorted order after insertion of each element. This is essential as this reduces overhead time required to sort the list again and again after insertion of each element.\n\nImportant Bisection Functions\n\n1. **bisect(list, num, beg, end)** :- This function returns the position in the sorted list, where the number passed in argument can be placed so as to maintain the resultant list in sorted order. If the element is already present in the list, the right most position where element has to be inserted is returned. This function takes 4 arguments, list which has to be worked with, number to insert, starting position in list to consider, ending position which has to be considered.\n\n**bisect\u2019s operation is faster than calling a list\u2019s sort method after each insertion.**\n\nSo in other words the syntax **bisect(list, num, beg, end)** means -\n\n##### Then index of `num` in `list` i is such that each item in `list[:i]` is less than or equal to `num`, and each item in `list[i:]` is greater than `num`. `list` must be a sorted sequence. For any sorted sequence seq, `list[bisect(list,y)-1]==y` is equivalent to `y` in `list`, but is faster if `len(list)` is large. You may pass optional arguments lo and hi to operate on the slice `list[lo:hi]`.\n\n```python\nfrom bisect import bisect\nfrom bisect import bisect_left\n\nli = [1, 3, 4, 4, 4, 6, 7]\n\nprint(\"The rightmost index to insert, so list remains sorted is  : \", end=\"\")\nprint(bisect(li, 4))\n# The rightmost index to insert, so list remains sorted is  : 5\n\nprint(\"The leftmost index to insert, so list remains sorted is  : \", end=\"\")\nprint(bisect_left(li, 4))\n# The leftmost index to insert, so list remains sorted is  : 2\n```","cbb335ff":"## Q: Replace the digits in the string with Hash symbol (#) and remove non-digits\n\nReplace the digits in the string with #\nconsider a string that will have digits in that, we need to remove all the not digits and replace the digits with #\n\nEx 1: A = 234                Output: ###\nEx 2: A = a2b3c4             Output: ###\nEx 3: A = abc                Output:   (empty string)\nEx 5: A = #2a$#b%c%561#      Output: ####","d02268d0":"## Q. Cube function and find Armstrong Number\n\nWrite a function cubesum() that accepts an integer and returns the sum of the cubes of individual digits of that number. Use this function to make functions PrintArmstrong() and isArmstrong() to print Armstrong numbers and to find whether is an Armstrong number.\n\n#### Definition of Armstrong number\n\nA positive integer is an Armstrong number of order n if\n\n`abcd... = a^n + b^n + c^n + d^n + ...`\n\ne.g. 153 is an armstrong number of order 3 because following holds true\n\n153 = 1*1*1 + 5*5*5 + 3*3*3","7cd254a0":"## Q. Find Amicable Number\n\nTwo different numbers are called amicable numbers if the sum of the proper divisors of each is equal to the other number. For example 220 and 284 are the smallest amicable numbers.\n\nSum of proper divisors of 220 = 1+2+4+5+10+11+20+22+44+55+110 = 284\nSum of proper divisors of 284 = 1+2+4+71+142 = 220\n\nWrite a function to print pairs of amicable numbers in a range\n\nSimilarly 1184 and 1210 are an amicable pair","44192d16":"## Q. Converts a decimal number to binary number\n\n\n#### Approach to solution below - Recursive - Algorithm\n\nThe decimal number in the argument is considered as the dividend.\n\nDivide this decimal number by 2 (as 2 is base of binary).\n\nStore the remainder after above division\n\nRepeat the above steps till the number becomes zero\n\nReturn the stored remainder in reverse order","ce36238f":"## Q. Find Perfect Number\n\nA number is called perfect if the sum of proper divisors of that number is equal to the number. For example 28 is perfect number, since 1+2+4+7+14=28. Write a program to print all the perfect numbers in a given range\n\n\n"}}