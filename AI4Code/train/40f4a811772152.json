{"cell_type":{"c9856767":"code","b1dc78a6":"code","5bc5f576":"code","3f158eb2":"code","f4ff4160":"code","6c4db79b":"code","76fd303c":"code","81cdbc2f":"code","9fa2294b":"code","a7e4b44b":"code","ab41ba45":"code","8ec25d9c":"code","c4f20baa":"code","fdb17a9b":"code","48568766":"code","91cb2882":"code","545ececd":"code","114f321b":"code","f7162d95":"code","bcd44465":"code","78706048":"code","87e47687":"code","ec9620d0":"code","0b2dae77":"code","2035a0cd":"markdown","e1455740":"markdown","a4dce276":"markdown","5772eba3":"markdown","68cf925c":"markdown","856ddb64":"markdown","fc24acef":"markdown","05acc2bc":"markdown","e463d67b":"markdown","f0b6ab15":"markdown","08987d6d":"markdown","d3278c16":"markdown","d0b2c4f6":"markdown","e4f1b484":"markdown","83471289":"markdown","8cad6f13":"markdown","bca955d7":"markdown","fe098c0f":"markdown","b0172b9e":"markdown","0be93e60":"markdown","9854836b":"markdown","7967e0fa":"markdown","fe0f5de4":"markdown","ccb0b1ab":"markdown","e9e8ce43":"markdown","d0db7961":"markdown"},"source":{"c9856767":"# data analysis and wrangling\nimport pandas as pd\nimport numpy as np\n\n# visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nsns.set(style='dark')\n\n# machine learning\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.svm import SVR\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.feature_selection import SelectKBest, f_classif","b1dc78a6":"data = pd.read_csv(\"..\/input\/top50spotify2019\/top50.csv\", encoding='ISO-8859-1')","5bc5f576":"data.head()","3f158eb2":"data.drop('Unnamed: 0', inplace=True, axis=1)","f4ff4160":"data.shape","6c4db79b":"data.rename(columns={'Track.Name':'Track_Name', 'Artist.Name':'Artist_Name',\n                      'Beats.Per.Minute':'Beats_Per_Minute', 'Loudness..dB..':'Loudness',\n                      'Valence.':'Valence', 'Length.':'Length', 'Acousticness..':'Acousticness', 'Speechiness.':'Speechiness'}, inplace=True)\ndata.drop('Track_Name', axis=1, inplace=True)\ndata.head()","76fd303c":"def detailed_analysis(df, pred=None):\n  obs = df.shape[0]\n  types = df.dtypes\n  counts = df.apply(lambda x: x.count())\n  uniques = df.apply(lambda x: [x.unique()])\n  nulls = df.apply(lambda x: x.isnull().sum())\n  distincts = df.apply(lambda x: x.unique().shape[0])\n  missing_ratio = (df.isnull().sum() \/ obs) * 100\n  skewness = df.skew()\n  kurtosis = df.kurt()\n  print('Data shape:', df.shape)\n\n  if pred is None:\n    cols = ['types', 'counts', 'nulls', 'distincts', 'missing ratio', 'uniques', 'skewness', 'kurtosis']\n    details = pd.concat([types, counts, nulls, distincts, missing_ratio, uniques, skewness, kurtosis], axis=1)\n  else:\n    corr = df.corr()[pred]\n    details = pd.concat([types, counts, nulls, distincts, missing_ratio, uniques, skewness, kurtosis, corr], axis=1, sort=False)\n    corr_col = 'corr ' + pred\n    cols = ['types', 'counts', 'nulls', 'distincts', 'missing ratio', 'uniques', 'skewness', 'kurtosis', corr_col]\n\n  details.columns = cols\n  dtypes = details.types.value_counts()\n  print('____________________________\\nData types:\\n', dtypes)\n  print('____________________________')\n  return details","81cdbc2f":"details = detailed_analysis(data, 'Energy')\ndisplay(details.sort_values(by='corr Energy', ascending=False))","9fa2294b":"data.describe()","a7e4b44b":"data.Genre.value_counts()","ab41ba45":"values = data.Genre.value_counts()\nindexes = values.index\n\nfig = plt.figure(figsize=(35, 15))\nsns.barplot(indexes, values)\n\nplt.ylabel('Number of values')\nplt.xlabel('Genre')","8ec25d9c":"data.Artist_Name.value_counts()","c4f20baa":"values = data.Liveness.value_counts()\nindexes = values.index\n\nfig = plt.figure(figsize=(15, 10))\nsns.barplot(indexes, values)\n\nplt.ylabel('Number of values')\nplt.xlabel('Liveness')","fdb17a9b":"data.Beats_Per_Minute.describe()","48568766":"def transform(x):\n  if x <= 100:\n    return '85-100'\n  elif x <= 120:\n    return '101-120'\n  elif x <= 140:\n    return '121-140'\n  else:\n    return '141-190'\n\ngroups_of_bpm = data.Beats_Per_Minute.apply(transform)\n\nvalues = groups_of_bpm.value_counts()\nlabels = values.index\ncolors = ['red', 'blue', 'green', 'brown']\n\nfig = plt.figure(figsize=(15, 10))\nplt.pie(values, colors=colors, autopct='%1.1f%%', startangle=90, textprops={ 'color': 'w' })\n\nplt.title('BPM distribution', fontsize=15)\nplt.legend(labels)\nplt.show()","91cb2882":"correlations = data.corr()\n\nfig = plt.figure(figsize=(12, 10))\nsns.heatmap(correlations, annot=True, cmap='GnBu_r', center=1)","545ececd":"fig = plt.figure(figsize=(15, 10))\nsns.regplot(x='Energy', y='Loudness', data=data)","114f321b":"le = LabelEncoder()\n\nfor col in data.columns.values:\n  if data[col].dtypes == 'object':\n    le.fit(data[col].values)\n    data[col] = le.transform(data[col])\n\ndata.head()","f7162d95":"X = data.drop('Loudness', axis=1)\ny = data.Loudness\n\nselector = SelectKBest(score_func=f_classif, k=5)\nfitted = selector.fit(X, y)\nfeatures_scores = pd.DataFrame(fitted.scores_)\nfeatures_columns = pd.DataFrame(X.columns)\n\nbest_features = pd.concat([features_columns, features_scores], axis=1)\nbest_features.columns = ['Feature', 'Score']\nbest_features.sort_values(by='Score', ascending=False, inplace=True)\nbest_features","bcd44465":"X.drop('Artist_Name', axis=1, inplace=True)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\nX_train","78706048":"sc = StandardScaler()\n\nX_train = sc.fit_transform(X_train)\nX_test = sc.fit_transform(X_test)\n\ntype(X_train), type(X_test)","87e47687":"regressor = LinearRegression()\nregressor.fit(X_train, y_train)\n\ny_pred = regressor.predict(X_test)\n\nprint(regressor.intercept_, regressor.coef_)\nprint(mean_squared_error(y_test, y_pred))","ec9620d0":"regressor = SVR(C=0.5)\nregressor.fit(X_train, y_train)\n\ny_pred = regressor.predict(X_test)\nprint(mean_squared_error(y_test, y_pred))","0b2dae77":"clustering = KMeans(n_clusters=2)\nclustering.fit(X_train, y_train)\n\ny_pred = clustering.predict(X_test)\nprint(mean_squared_error(y_test, y_pred))","2035a0cd":"**Drop \"Unnamed: 0\" column**","e1455740":"**Relationship between energy and loudness (quite good correlation)**","a4dce276":"**Import packages**","5772eba3":"**Apply K-Means Clustering. Actually, I think MSE is excessively high since our data is too small**","68cf925c":"**Apply Linear Regression on our data**","856ddb64":"**SVR performs better than others. I'm going to update this work later. Thanks for reading my notebook :)**","fc24acef":"# **Exploratory Data Analysis (EDA)**","05acc2bc":"**Correlation heatmap**","e463d67b":"**Acquire data**","f0b6ab15":"**Scale data**","08987d6d":"**Get the shape of our data**","d3278c16":"# **Model**","d0b2c4f6":"**Calculating the number of songs by genre**","e4f1b484":"**Take a first look**","83471289":"**Get detailed statistics about data**","8cad6f13":"# **Preparing the environment and uploading data**","bca955d7":"**Encode categorical features**","fe098c0f":"**Hi, everyone. It's my EDA + Preprocessing for Top 50 Spotify Songs - 2019 dataset. If you have questions or you can help me with my work feel free to share your thoughts in comments. Enjoy the notebook :)**\n![](https:\/\/www.iguides.ru\/upload\/medialibrary\/f69\/f69383fcc96af0bff95c8223aa31d18a.jpg)","b0172b9e":"**Split data. Actually we ain't drop columns as we have only 10 (except Artist_Name since there are too many artists and it becomes useless).**","0be93e60":"# **Data preprocessing**","9854836b":"**Unique artists**","7967e0fa":"**As wee can see, there are strange column names, so we fix that**","fe0f5de4":"**BPM distribution. I use a function to split \"Beats_Per_Minute\" column by groupes**","ccb0b1ab":"**Let's find the best features (according to the heatmap too)**","e9e8ce43":"**Liveness distribution**","d0db7961":"**Apply Support Machine Regression**"}}