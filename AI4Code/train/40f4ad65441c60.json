{"cell_type":{"a335bfd4":"code","4951683b":"code","69288974":"code","28f8a465":"code","89948d15":"code","797d2f25":"code","04df7de2":"code","24c49b73":"code","f7e11bb0":"code","d7faaf28":"code","e94360b0":"code","2f455f4c":"code","a479ef6d":"code","2aebc1bb":"code","abec982d":"code","ddc0420e":"code","9c42d34d":"code","73a42a2b":"markdown","6681f4ea":"markdown"},"source":{"a335bfd4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\nimport matplotlib.pyplot as plt\nimport seaborn as sns","4951683b":"# Read the data from csv file\ndataset = pd.read_csv(\"\/kaggle\/input\/electric-motor-temperature\/pmsm_temperature_data.csv\")","69288974":"# Explore the dataset\ndataset.head(5)","28f8a465":"# Describe the variables\ndataset.describe()","89948d15":"#Check missing values from each column\ndataset.apply(lambda x: sum(x.isnull()), axis=0)","797d2f25":"# Create histograms for each feature\ndataset.hist(figsize=(20,20))\nplt.show()","04df7de2":"# Co-relation matrix\ncorrmat = dataset.corr()\nfig = plt.figure(figsize=(12,9))\n\nsns.heatmap(corrmat, vmax = 0.8 , square = True )\nplt.show()","24c49b73":"# Seperating Independent and Dependent Variables\nX = dataset.iloc[:, 1:12].values # All columns (Independent Variables) except 1st one i.e Ambient \ny = dataset.iloc[:, 0:2].values # Only ambient column which is our dependent variables\ny = y[:, 0]","f7e11bb0":"# Splitting Training and Testing variables\nfrom sklearn.model_selection import train_test_split\nX_train,X_test, y_train,y_test = train_test_split(X,y,test_size = 1\/3, random_state=0)","d7faaf28":"# Fitting Decision Tree Regression to the dataset\nfrom sklearn.tree import DecisionTreeRegressor\nregressor = DecisionTreeRegressor(random_state = 0)","e94360b0":"# Fit the decesion tree with the training data\nregressor.fit(X_train, y_train)","2f455f4c":"# Predict the values related to test data\ny_pred = regressor.predict(X_test)","a479ef6d":"# Calculate the Mean squared error\nfrom sklearn.metrics import mean_squared_error\nmse_dt = mean_squared_error(y_test, y_pred)","2aebc1bb":"print(\"Mean Squared Error\", format(mse_dt))","abec982d":"# Fitting Random Forest Regression to the dataset\nfrom sklearn.ensemble import RandomForestRegressor\nregressor_1 = RandomForestRegressor(n_estimators = 10, random_state = 0)\nregressor_1.fit(X_train, y_train)","ddc0420e":"# Predicting the test values\ny_pred_2 = regressor_1.predict(X_test)","9c42d34d":"# Calculate the Mean Squared Error\nmse_rt = mean_squared_error(y_test, y_pred_2)\nprint(\"Mean Squared Error of Random Forest Tree\", format(mse_rt))","73a42a2b":"# Random Forest Tree Regression","6681f4ea":"# Decision Tree Regression"}}