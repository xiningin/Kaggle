{"cell_type":{"c032a6a0":"code","329d6000":"code","f8770189":"code","8cc88f3e":"code","99f02d7d":"code","a39c7f46":"code","3f999e71":"code","eb9633cf":"code","2dc207d9":"code","528b571b":"code","84e3ed4a":"code","730a93f9":"code","e452d87c":"code","23b0d8b6":"code","7b0b54bd":"code","6da3065c":"code","c0b81940":"code","61ba0d7f":"code","03174aad":"code","f9f0fcb7":"code","1a7ddf59":"code","5b4a3025":"code","b2a1d2c7":"code","9c7d5443":"code","47edea85":"markdown","09042c71":"markdown","6baaa61c":"markdown","721c479b":"markdown","c9276eda":"markdown","e982c553":"markdown","32808949":"markdown"},"source":{"c032a6a0":"#import libraries\nimport pandas as pd \nfrom matplotlib import pyplot as plt\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nprint(\"Setup Complete\")","329d6000":"#read train data\ndf = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\nprint(\"df.shape\", df.shape)\ndf","f8770189":"#selecting a given row\nrow = df.iloc[3]\nrow","8cc88f3e":"image_1d = row.iloc[1:].values #taking only pixel columns\nprint(image_1d.shape) #image","99f02d7d":"28*28 #check image dimensions","a39c7f46":"image_2d = image_1d.reshape((28, 28)) #reshape the 1d array into it's original 2D format","3f999e71":"print(\"label:\", row.label)\n\nplt.imshow(image_2d, cmap=\"gray\") # Display an image","eb9633cf":"from sklearn.linear_model import LogisticRegression # Our base model\n\nfrom sklearn.model_selection import train_test_split # Help us in splitting the data in 2 parts : train and test\nfrom  sklearn.metrics import classification_report # Will print a report on the performance of our classifier\n\nfrom sklearn.metrics import confusion_matrix # Compute the `confusion model`\nimport seaborn as sns # Seaborn is like matplotlib, it's used for plotting","2dc207d9":"model = LogisticRegression() # Define the model\nmodel","528b571b":"#transform the input\nX = df.drop(\"label\", axis=1).values\/255.\n\nX.min(), X.max() # The values are scaled (between 0 and 1)","84e3ed4a":"X_train, X_test, y_train, y_test = train_test_split(X, df[\"label\"], test_size=0.33)\n\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","730a93f9":"%%time\n\nmodel_fitted = model.fit(X_train, y_train)\nmodel_fitted","e452d87c":"y_test_pred = model_fitted.predict(X_test) # Let make predictions for the train set\ny_test_pred","23b0d8b6":"print(classification_report(y_test, y_test_pred))","7b0b54bd":"(y_test_pred == y_test).mean() # Manually compute the accuracy","6da3065c":"cfm = pd.crosstab(y_test, y_test_pred, margins_name=True)\ncfm","c0b81940":"sns.heatmap(cfm)","61ba0d7f":"df_test = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")\nprint(\"df_test.shape\", df_test.shape)\ndf_test.head()","03174aad":"X_test = df_test.values \/ 255.\nX_test.shape","f9f0fcb7":"X_test.min(), X_test.max()","1a7ddf59":"y_sub = model.predict(X_test)\ny_sub","5b4a3025":"plt.imshow(df_test.iloc[2].values.reshape((28, 28)), cmap=\"gray\")","b2a1d2c7":"sub = pd.read_csv(\"..\/input\/digit-recognizer\/sample_submission.csv\")\nsub[\"Label\"] = y_sub\nsub.head()","9c7d5443":"sub.to_csv(\"submission.csv\", index=False)","47edea85":"# Model quality assessment","09042c71":"# Submit our model","6baaa61c":"# Logistic Regression\n","721c479b":"Visually assessing my model quality by using the confusion matrix","c9276eda":"We can see that the data contains 785 columns : 1 column for the label + 28x28 pixel columns\n\nThe label column contains values between 0 and 9, they are the correct digits contained in the 784 pixels.\n\nThe pixels values are between 0 (black) and 255 (white) A gray scale image is just a 2D array of pixels. \n\nA pixel has a value between 0 and 2^8\u22121","e982c553":"# Modeling\nWe aim to build a model that can take image's pxiels and predict it's digit. This is a classification problem where there are 10 classes.","32808949":"# How to assess the quality of a classifier ?\n\nBy using classification metrics such as :\n\n* Accuracy\n* Precision\n* Recall\n* F-score (F1)\n\nThere are 3 kinds of classification problem:\n\n* Binary classification: one label that has only 2 unique values\n* Multiclass classification : one label that has more than 2 unique values\n* Multilabel classification: many labels (at least 2) and many unique values\n\nThe above metrics can be computed for each kind of classification problem. Usually, they will be computed for a binarized version of the classification problem and the final result will the average value."}}