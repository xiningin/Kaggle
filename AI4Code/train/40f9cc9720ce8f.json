{"cell_type":{"738f5826":"code","cd2ea320":"code","d1db53cd":"code","caa2b33b":"code","dd291f57":"code","3c0dfb2f":"code","93ec680a":"markdown","7a9642ec":"markdown","748841a3":"markdown","38324ab1":"markdown"},"source":{"738f5826":"import numpy as np\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier, export_graphviz\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import accuracy_score, f1_score, roc_auc_score\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=FutureWarning)","cd2ea320":"frames = list()\nresults = pd.read_csv(\"..\/input\/train.csv\")\nfor i in range(1,19):\n    exp = '0' + str(i) if i < 10 else str(i)\n    frame = pd.read_csv(\"..\/input\/experiment_{}.csv\".format(exp))\n    row = results[results['No'] == i]\n    frame['target'] = 1 if row.iloc[0]['tool_condition'] == 'worn' else 0\n    frames.append(frame)\ndf = pd.concat(frames, ignore_index = True)\ndf.head()","d1db53cd":"# Transform process name in number\nle = LabelEncoder()\nle.fit(df['Machining_Process'])\ndf['Machining_Process'] = le.transform(df['Machining_Process'])\n# Create np arrays and split train\/test sets\ny = np.array(df['target'])\nx = df.drop('target', axis=1).values\nx_train, x_test, y_train, y_test = train_test_split(x, y, train_size=0.8, random_state=123)\n# Target distribution (count values)\nprint(\"Target distribution - 1 worn; 0 unworn:\")\nprint(df['target'].value_counts())","caa2b33b":"model = DecisionTreeClassifier()\nmodel.fit(x_train, y_train)\ny_score = model.predict(x_test)\nprint(\"Trained on {0} observations and scoring with {1} test samples.\".format(len(x_train), len(x_test)))\nprint(\"Accuracy: {0:0.4f}\".format(accuracy_score(y_test, y_score)))\nprint(\"F1 Score: {0:0.4f}\".format(f1_score(y_test, y_score)))\nprint(\"Area under ROC curve: {0:0.4f}\".format(roc_auc_score(y_test, y_score)))","dd291f57":"# Feature importances\nfeatures = [(df.columns[i], v) for i,v in enumerate(model.feature_importances_)]\nfeatures.sort(key=lambda x: x[1], reverse = True)\nfor item in features[:10]:\n    print(\"{0}: {1:0.4f}\".format(item[0], item[1]))","3c0dfb2f":"# Z Actual Position distribution\ndf['Z1_ActualPosition'].hist()","93ec680a":"Apply Decision Tree model and evaluate accuracy and feature importance","7a9642ec":"**Tool wear detection**\n","748841a3":"Using every CNC measurement as an independent observation (as described in overview\/content)","38324ab1":"Join experiments in a single dataframe and add tool condition column"}}