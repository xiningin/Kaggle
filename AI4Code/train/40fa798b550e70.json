{"cell_type":{"8ce6b481":"code","009025f2":"code","8982685a":"code","7d5b9087":"code","ac759ef1":"code","f0cecbe7":"code","ffde5d6e":"code","9150e843":"code","092d2951":"code","a94b13d8":"code","6661c516":"code","faf6e38d":"code","5491f090":"code","e05e884f":"markdown"},"source":{"8ce6b481":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        os.path.join(dirname, filename)\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n","009025f2":"import pandas as pd\nimport re\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n# offline plotly\nfrom plotly.offline import plot, iplot, init_notebook_mode\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n# interactive plots\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n# color pallette\ncnf = '#393e46' # confirmed - grey\ndth = '#ff2e63' # death - red\nrec = '#21bf73' # recovered - cyan\nact = '#fe9801' # active case - yellow\nfrom datetime import datetime as dt\nfrom math import pi\n#output_notebook()\n#from IPython.core.display import display, HTML\n#display(HTML(\"<style>.container { width:100% !important; }<\/style>\"))\nimport gc\ngc.collect()\n","8982685a":"#Covid from worldmeter\ndf_vaccine = pd.read_csv(\"\/kaggle\/input\/covid-world-vaccination-progress\/country_vaccinations.csv\")\n#use_col = ['Country','Cases','NCases','Deaths','NDeaths','Recovered','NewRecovered']\ndf = pd.read_csv(\"\/kaggle\/input\/worldmeter\/20210328.csv\",index_col=0)\nremove_row = ['World','North America','Europe','Asia','South America','Africa']\ndf = df[~df['Country'].isin(remove_row)]\ndf = df.sort_values(by = 'Cases',ascending=False).reset_index(drop=True)\ndf = df.drop(columns='#')\ndf.fillna(0,inplace=True)\nremove_row = ['World','North America','Europe','Asia','South America','Africa']\n\ncountry_vaccine = df_vaccine.groupby([\"country\", \"iso_code\", \"vaccines\"])['total_vaccinations', \n                                                                       'total_vaccinations_per_hundred',\n                                                                      'daily_vaccinations',\n                                                                      'daily_vaccinations_per_million',\n                                                                      'people_vaccinated',\n                                                                      'people_vaccinated_per_hundred'\n                                                                      ].max().reset_index()\ncountry_vaccine.columns = [\"Country\", \"iso_code\", \"Vaccines\", \"Total vaccinations\", \"Percent\", \"Daily vaccinations\", \n                           \"Daily vaccinations per million\", \"People vaccinated\", \"People vaccinated per hundred\"]\ndf['Country'] = df['Country'].replace({'USA': 'United States'})\ndf['Country'] = df['Country'].replace({'UAE': 'United Arab Emirates'})\ncountry_vaccine['Country'] = country_vaccine.replace({'United Arab Emirates':'United Arab Emirates'})\nCombined_vaccine_world = pd.merge(df,country_vaccine,on='Country')","7d5b9087":"df_temp = country_vaccine.copy()\n\ndf_temp['Is_UAE'] = df_temp['Country']=='UAE'\ndf_temp['Is_India'] = df_temp['Country']=='India'\n\ndf_temp['TotalvaccinationsPer1000'] = df_temp['Total vaccinations'] \/ 1000\ndf_temp['DailyPervaccinations_1000'] = df_temp['Daily vaccinations'] \/ 1000\n\n\ndef plot_topn(col, n , xa , xy, title):\n    df_f = df_temp.sort_values(col, ascending=False).head(n)\n    fig = px.bar(df_f, x=col, y='Country', text=col, \n                 orientation='h',hover_data=[\"Total vaccinations\",\"Daily vaccinations\",\"People vaccinated\"],color='Is_India'\n                ,color_discrete_sequence=['#FFA500', '#393e46'],opacity=0.8,)\n    fig.update_layout(title=title, xaxis_title=xa, yaxis_title=xy, \n                      yaxis_categoryorder = 'total ascending',\n                      showlegend=False,template = 'plotly_white')\n    fig.show()\n    \n\ndef plot_lown(col, n , xa , xy, title):\n    df_f = df_temp.sort_values(col, ascending=False).head(n)\n    fig = px.bar(df_f, x=col, y='Country', text=col, \n                 orientation='h',hover_data=[\"Total vaccinations\",\"Daily vaccinations\",\"Daily vaccinations per million\"],color='Is_India'\n                ,color_discrete_sequence=['#FFA500', '#393e46'],opacity=0.8,)\n    fig.update_layout(title=title, xaxis_title=xa, yaxis_title=xy, \n                      yaxis_categoryorder = 'total ascending',\n                      showlegend=False,template = 'plotly_white')\n    fig.show()\n    \n\n\n    \ndef plot_count100(col, n , xa , xy, title):\n    df_f = df_temp.sort_values(col, ascending=False).tail(n)\n    fig = px.bar(df_f, x=col, y='Country', text=col, \n                 orientation='h',hover_data=[\"Total vaccinations\",\"Daily vaccinations\",\"People vaccinated per hundred\"],color='Is_India'\n                ,color_discrete_sequence=['#FFA500', '#393e46'],opacity=0.8,)\n    fig.update_layout(title=title, xaxis_title=xa, yaxis_title=xy, \n                      yaxis_categoryorder = 'total ascending',\n                      showlegend=False,template = 'plotly_white')\n    fig.show()\n    \n    \n#4.1 Popultion Per Million\n#Combined_vaccine_world['Population'] = Combined_vaccine_world['Population'].astype(str).replace('\\.0', '', regex=True)\nCombined_vaccine_world['Population_Million'] = Combined_vaccine_world['Population'] \/ 1000000\n#Combined_vaccine_world['Population'] = Combined_vaccine_world['Population'].astype(str).replace('\\.0', '', regex=True)\n\n\n\nfig41 = px.scatter(Combined_vaccine_world, x='Population', y='Daily vaccinations per million', color='Population',size='Population',\n                 hover_name=\"Country\",hover_data=['Country','CPM','TPM','Population'],\n           log_x=True, log_y=True, title='Total Population Vs Daily vaccinations per million (Per Million), Size Population',\n           color_continuous_scale=px.colors.sequential.Plasma,size_max = 30,height =600,template = 'simple_white'\n      ,opacity=1\n           )    \n\n#4.2 Popultion vs vaccination\n\nfig42 = px.scatter(Combined_vaccine_world, x='Population', y='Total vaccinations', color='Population',size='Population',\n                 hover_name=\"Country\",hover_data=['Country','CPM','TPM','Population'],\n           log_x=True, log_y=True, title='Country Total Population Vs Country Total People Vaccinated , Size Population',\n           color_continuous_scale=px.colors.sequential.Plasma,size_max = 30,height =600,template = 'simple_white'\n      ,opacity=1\n           )    \n\n#Combined_vaccine_world['Population'] = Combined_vaccine_world['Population'].astype(str).replace('\\.0', '', regex=True)\n\n\n#4.3 Cases vs vaccination\n\nfig43 = px.scatter(Combined_vaccine_world, x='CPM', y='Total vaccinations', color='Population',size='Population',\n                 hover_name=\"Country\",hover_data=['Country','CPM','TPM','Population'],\n           log_x=True, log_y=True, title='Cases Per Million Vs Total Vaccinated , Size Population',\n           color_continuous_scale=px.colors.sequential.Plasma,size_max = 30,height =600,template = 'simple_white'\n      ,opacity=1\n           )    ","ac759ef1":"plot_topn('Total vaccinations', 15,'Total vaccinations count','Country',\"Total People Vaccinated Per Country\")","f0cecbe7":"plot_lown('Daily vaccinations', 15,'Daily vaccinations count','Country',\"Daily Vaccinations Count\")","ffde5d6e":"fig41.update_coloraxes(colorscale=px.colors.sequential.Cividis_r)\nfig41.update(layout_coloraxis_showscale=True)\nfig41.show()\nfig42.update_coloraxes(colorscale=px.colors.sequential.Cividis_r)\nfig42.update(layout_coloraxis_showscale=True)\nfig42.show()\nfig43.update_coloraxes(colorscale=px.colors.sequential.Cividis_r)\nfig43.update(layout_coloraxis_showscale=True)\nfig43.show()","9150e843":"bar_chart = Combined_vaccine_world.copy()\nbar_chart['Vaccines'] = bar_chart['Vaccines'].str.replace('\/','')\nbar_chart['Vaccines'] = bar_chart['Vaccines'].str.replace('&','')\nbar_chart[['Vaccine_1','Vaccine_2','Vaccine_3','Vaccine_4','Vaccine_5','Vaccine_6','Vaccine_7','Vaccine_8',\n          'Vaccine_9','Vaccine_10','Vaccine_11','Vaccine_12','Vaccine_13'\n           ,'Vaccine_14','Vaccine_15','Vaccine_16']] = bar_chart['Vaccines'].str.split(',',expand=True)\nbar_chart = bar_chart.drop(columns='Vaccines')\nbar_chart['Population'] = bar_chart['Population'].apply(int) \nbar_chart['Total vaccinations'] = bar_chart['Total vaccinations'].replace(np.nan, 0)\nbar_chart['People vaccinated'] = bar_chart['People vaccinated'].replace(np.nan, 0)\nbar_chart['Total vaccinations'] = bar_chart['Total vaccinations'].apply(int) \nbar_chart['People vaccinated'] = bar_chart['People vaccinated'].apply(int) \nbar_chart = bar_chart[['Country','Cases','Vaccine_1','Vaccine_2','Vaccine_3','Vaccine_4','Vaccine_5','Vaccine_6','Total vaccinations','Population']]\nbar_chart.sort_values(by='Cases',ascending=False).style.background_gradient(cmap='plasma_r')","092d2951":"\nfig1 = px.treemap(Combined_vaccine_world, path = ['Vaccines', 'Country'], values = 'Total vaccinations',color_continuous_scale='RdBu',\n                 color='Total vaccinations',\n                title=\"Total Vaccinations Per Country, Grouped By Vaccine Name , color differance by total vaccinaion count\")\nfig1.show()\n","a94b13d8":"fig2 = px.treemap(Combined_vaccine_world, path = ['Continent','Vaccines', 'Country'], values = 'Total vaccinations',color_continuous_scale='RdBu',\n                 color_continuous_midpoint=np.average(Combined_vaccine_world['Total vaccinations']),color='Total vaccinations',\n                title=\"Total Vaccinations Per Country (Continent), Grouped By Vaccine Name , color differance by total vaccinaion count\")\nfig2.show()\n","6661c516":"fig3 = px.treemap(Combined_vaccine_world, path = ['Country', 'Vaccines'], values = 'Total vaccinations',color_continuous_scale='RdBu',\n                 color_continuous_midpoint=np.average(Combined_vaccine_world['Population_Million']),color='Population_Million',\n                title=\"Vaccination Group , color diff coutry population avg\")\n\nfig3.show()\n\n","faf6e38d":"fig4 = px.treemap(Combined_vaccine_world, path = ['Continent','Country', 'Vaccines'], values = 'Total vaccinations',color_continuous_scale='RdBu',\n                 color_continuous_midpoint=np.average(Combined_vaccine_world['Population_Million']),color='Population_Million',\n                title=\"Vaccination Group (Continent) , color diff coutry population avg\")\n\nfig4.show()","5491f090":"## Will update Soon ..... !!!","e05e884f":"<center><h1>*Speed Up Vaccine Rollout<\/h1><\/center>\n<center><h2>*Update on 05-11-2021*<\/h2><\/center>"}}