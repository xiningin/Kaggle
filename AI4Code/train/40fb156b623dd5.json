{"cell_type":{"ef34cd44":"code","fffa03fa":"code","8e9454b0":"code","fc82dfa4":"code","cb30c030":"code","296a5f64":"code","f54a08ce":"code","469c7941":"code","71f283ab":"code","0ec3bbf7":"code","a0464973":"code","c3020026":"code","f138a9ef":"code","1c2a1519":"code","5b606765":"code","7ea1c7d3":"code","504f7051":"code","24b17a9a":"code","b847c133":"code","d4544070":"code","c39fac4a":"code","8ffdf84c":"code","92132267":"code","b4006218":"code","ad61be0d":"code","56944deb":"code","c4fd3eee":"code","eda8d2b2":"code","168d6dc3":"code","de403f60":"code","7a197b32":"code","f27435af":"code","170a5194":"code","dd890843":"code","b03744bd":"code","1a004554":"code","7731c7d8":"code","290d3b18":"code","7a15b6af":"code","4cd8b7ea":"code","ce91b722":"code","6a6d011d":"code","016b19b5":"code","71279591":"code","817193d8":"code","af980a44":"code","e37af753":"code","bab1bfe0":"code","4f25dcdb":"code","79ee32a6":"code","fa1f8b1d":"code","a29e78c8":"code","a796d334":"code","e375c931":"markdown","799f7d7c":"markdown","0f682de9":"markdown","a7c8a943":"markdown","5c1d8bfb":"markdown","03a7458e":"markdown"},"source":{"ef34cd44":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')","fffa03fa":"pd.set_option('display.max_rows',1000)\npd.set_option('display.max_columns',1000)\npd.set_option('display.width',1000)","8e9454b0":"import os\nprint(\"\")\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","fc82dfa4":"train=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","cb30c030":"train.head()","296a5f64":"test.head()","f54a08ce":"train.info()","469c7941":"test.info()","71f283ab":"train.shape[0]       ","0ec3bbf7":"(train.isnull().sum()\/train.shape[0])*100","a0464973":"(test.isnull().sum()\/test.shape[0])*100","c3020026":"train.describe()","f138a9ef":"test.describe()","1c2a1519":"train_drop=train.drop(['Cabin','Name','Ticket'],axis=1,inplace=True)\ntest_drop=test.drop(['Cabin','Name','Ticket'],axis=1,inplace=True)","5b606765":"train.head()","7ea1c7d3":"test.head()","504f7051":"train['Survived'].value_counts()","24b17a9a":"sns.pairplot(train,x_vars=['Pclass','Sex','Age','SibSp','Parch','Fare','Embarked'],y_vars='Survived',size=2,aspect=1)\nplt.show()","b847c133":"train.isnull().sum()","d4544070":"train['Age'].fillna(train['Age'].median(),inplace=True)\ntrain['Embarked'].fillna(train['Embarked'].mode()[0],inplace=True)\ntrain['Fare'].fillna(train['Fare'].median(),inplace=True)","c39fac4a":"train.isnull().sum()","8ffdf84c":"train.dropna(inplace=True)","92132267":"test.isnull().sum()","b4006218":"test['Age'].fillna(test['Age'].median(),inplace=True)\ntest['Embarked'].fillna(test['Embarked'].mode()[0],inplace=True)\ntest['Fare'].fillna(test['Fare'].median(),inplace=True)","ad61be0d":"# test.dropna(inplace=True)","56944deb":"test.isnull().sum()\ntest.shape","c4fd3eee":"bxplot=train.select_dtypes(include=['float64','int64'])","eda8d2b2":"bxplot.drop('Survived',axis=1,inplace=True)","168d6dc3":"bxcols=bxplot.columns\nbxcols","de403f60":"def bxplott(df): \n    for i in bxcols:\n            sns.boxplot(data=df,x=df[i])\n            plt.show()","7a197b32":"bxplott(train)","f27435af":"Q3=train['Pclass'].quantile(0.85)\nQ1=train['Pclass'].quantile(0.15)\nIQR=Q3-Q1\ntrain=train[(train['Pclass'] >= Q1 - 1.5*IQR) & (train['Pclass']<= Q3 + 1.5*IQR) ]\n\nQ3=train['Age'].quantile(0.85)\nQ1=train['Age'].quantile(0.15)\nIQR=Q3-Q1\ntrain=train[(train['Age'] >= Q1 - 1.5*IQR) & (train['Age']<= Q3 + 1.5*IQR) ]\n\nQ3=train['SibSp'].quantile(0.85)\nQ1=train['SibSp'].quantile(0.15)\nIQR=Q3-Q1\ntrain=train[(train['SibSp'] >= Q1 - 1.5*IQR) & (train['SibSp']<= Q3 + 1.5*IQR) ]\n\nQ3=train['Parch'].quantile(0.85)\nQ1=train['Parch'].quantile(0.15)\nIQR=Q3-Q1\ntrain=train[(train['Parch'] >= Q1 - 1.5*IQR) & (train['Parch']<= Q3 + 1.5*IQR) ]\n\nQ3=train['Fare'].quantile(0.85)\nQ1=train['Fare'].quantile(0.15)\nIQR=Q3-Q1\ntrain=train[(train['Fare'] >= Q1 - 1.5*IQR) & (train['Fare']<= Q3 + 1.5*IQR) ]","170a5194":"train.head()","dd890843":"def bxplott(df): \n      for i in bxcols:\n            sns.boxplot(data=df,x=df[i])\n            plt.show()","b03744bd":"bxplott(train)","1a004554":"train['Sex']=train['Sex'].map({'male':0,'female':1})\ntest['Sex']=test['Sex'].map({'male':0,'female':1})","7731c7d8":"embarked_train=pd.get_dummies(train['Embarked'],prefix='Embarked',drop_first=True)\ntrain.drop([\"Embarked\"],axis=1,inplace=True)\ntrain=pd.concat([train,embarked_train],axis=1)","290d3b18":"embarked_test=pd.get_dummies(test['Embarked'],prefix='Embarked',drop_first=True)\ntest.drop([\"Embarked\"],axis=1,inplace=True)\ntest=pd.concat([test,embarked_test],axis=1)","7a15b6af":"train.head()","4cd8b7ea":"test.head()","ce91b722":"train['SibSp'].value_counts()","6a6d011d":"from sklearn.preprocessing import StandardScaler\nscaler=StandardScaler()\nscalecols=['Pclass','Age','Fare','SibSp','Parch']\ntrain[scalecols]=scaler.fit_transform(train[scalecols])","016b19b5":"train.head()","71279591":"scalecols_test=['Pclass','Age','Fare','SibSp','Parch']\ntest[scalecols_test]=scaler.transform(test[scalecols_test])\ntest.head()","817193d8":"train_PassengerId = train['PassengerId']\ntest_PassengerId = test['PassengerId']\ntest.drop(['PassengerId'],inplace = True,axis=1)\ntrain.drop(['PassengerId'],inplace = True,axis=1)","af980a44":"y=train['Survived']\nX=train.drop(['Survived'],axis=1)","e37af753":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,train_size=0.7,test_size=0.3,random_state=100)","bab1bfe0":"X_train.head()","4f25dcdb":"from sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nlogreg = LogisticRegression()\nprint(\"Cross_Val_Score:\",cross_val_score(logreg,X_train,y_train,cv = 5,scoring = 'accuracy').mean())","79ee32a6":"converted=(sum(train['Survived'])\/len(train['Survived'].index)*100)\nprint(converted)","fa1f8b1d":"# Importing Libraries\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Creating an object of RandomForestClassifier class with name rf_model and fitting the model on X_train and y_train\nrf_model = RandomForestClassifier(n_estimators=1000)\nrf_model.fit(X_train, y_train)","a29e78c8":"# Predicting on y value \ny_pred = rf_model.predict(test)","a796d334":"# Creating a new dataframe which can store value of listing id and exporting it in csv format\nsubmission = pd.DataFrame()\nsubmission[\"PassengerId\"] = test_PassengerId\nsubmission[\"Survived\"] = y_pred\nsubmission.to_csv(\"Submission.csv\", index=False)","e375c931":"### Cross Validation","799f7d7c":"### Building Random Forest Model","0f682de9":"### Dummy Variable","a7c8a943":"### Data Preparation","5c1d8bfb":"### Outlier Treatment","03a7458e":"### Null Value Treatment"}}