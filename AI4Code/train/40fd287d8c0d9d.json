{"cell_type":{"afeae76f":"code","99fcdde2":"code","1968bdfa":"code","5d06d98a":"code","ddfb24a7":"code","52a49d29":"code","a884d1b2":"markdown","882bc567":"markdown","429a86aa":"markdown","5d5ab26b":"markdown","f7681795":"markdown"},"source":{"afeae76f":"import os\nimport cv2\nimport csv\nimport numpy as np\nfrom time import time\nfrom tensorflow.keras import utils\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPooling2D, Dropout, BatchNormalization\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\n%matplotlib inline","99fcdde2":"dir = '..\/input\/catdog'\n\nclasses = ['cat', 'dog']\nplt.figure(figsize=(11, 11))\nfor i in range (0,2):\n    plt.subplot(7,7,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    path = dir + \"\/test\/{0}\/273.png\".format(i)\n    img = plt.imread(path)\n    plt.imshow(img)\n    plt.xlabel(classes[i])","1968bdfa":"def mixing(images, labels):\n    images = np.array(images)\n    labels = np.array(labels)\n    s = np.arange(images.shape[0])\n    np.random.seed(2)\n    np.random.shuffle(s)\n    images=images[s]\n    labels=labels[s]\n    return images, labels\n\ndef load(path, root_folder, out_side=512):\n    images = []\n    labels = []\n    for folder in os.listdir(os.path.join(path, root_folder)):\n        cur_path = os.path.join(path, root_folder, folder)\n        for file_name in os.listdir(cur_path):\n            image = cv2.imread(os.path.join(cur_path, file_name))\n            images.append(cv2.resize(image, (out_side, out_side)))\n            labels.append(int(folder))\n            \n    return mixing(images, labels)","5d06d98a":"start = time()\n\ntrain_images, train_labels = load(dir, 'train', 64)\ntest_images, test_labels = load(dir, 'test', 64)\nshape = train_images[0].shape\nprint(shape)\n\ntrain_images = train_images.astype('float32') \/ 255.\ntest_images = test_images.astype('float32') \/ 255.\n\ntrain_labels = utils.to_categorical(train_labels, 2)\ntest_labels = utils.to_categorical(test_labels, 2)\n\nprint('Loading: ', time() - start)","ddfb24a7":"classes = 2\nbatch = 128\nepochs = 100\nlearning_rate = 0.001\n\ndef results(model):\n  adam = Adam(lr=learning_rate)\n\n  model.compile(optimizer=adam, loss='binary_crossentropy', metrics=['accuracy'])\n\n  start = time()\n  history = model.fit(train_images, train_labels, batch_size=batch, epochs=epochs, validation_split=0.2, verbose=1)\n  train_time = time() - start\n\n  model.summary()\n\n  plt.figure(figsize=(12, 12))\n  plt.subplot(3, 2, 1)\n  plt.plot(history.history['accuracy'], label = 'train_accuracy')\n  plt.plot(history.history['val_accuracy'], label = 'val_accuracy')\n  plt.xlabel('epoch')\n  plt.ylabel('accuracy')\n  plt.legend()\n  plt.subplot(3, 2, 2)\n  plt.plot(history.history['loss'], label = 'train_loss')\n  plt.plot(history.history['val_loss'], label = 'val_loss')\n  plt.xlabel('epoch')\n  plt.ylabel('accuracy')\n  plt.legend()\n  plt.show()\n\n  start = time()\n  test_loss, test_acc = model.evaluate(test_images, test_labels)\n  test_time = time() - start\n  print('\\nTrain time: ', train_time)\n  print('Test accuracy:', test_acc)\n  print('Test loss:', test_loss)\n  print('Test time: ', test_time)","52a49d29":"model = Sequential()\nmodel.add(Conv2D(256, (5, 5), padding='same', input_shape=(64, 64, 3), activation='tanh'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Conv2D(128, (3, 3), padding='same', activation='tanh'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Conv2D(64, (3, 3), padding='same', activation='tanh'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Flatten())\nmodel.add(Dense(1024, activation='sigmoid'))\nmodel.add(Dense(classes, activation='softmax'))\n\nresults(model)","a884d1b2":"## Network","882bc567":"# CATDOG Classification with CNN","429a86aa":"## Loading","5d5ab26b":"## Configuration","f7681795":"## The data"}}