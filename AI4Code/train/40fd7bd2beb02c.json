{"cell_type":{"1543c8c9":"code","24d804cf":"code","0d386b57":"code","93f32c42":"code","55e7d93c":"code","625be031":"code","5992b6c9":"code","c7634c8d":"code","d6f8de93":"code","75a7368e":"code","0c5df71b":"code","51068973":"code","1afd6f09":"code","286a5f8b":"code","9fac0be7":"code","db482bf1":"code","4de4a942":"code","afabcd34":"code","5f655475":"code","d7564162":"code","5534f368":"code","292ff9b5":"markdown","fad30448":"markdown","075c1146":"markdown","ea591bbd":"markdown","379657e9":"markdown","2b641cae":"markdown","7293331e":"markdown","09c29170":"markdown","e788b349":"markdown","c180c053":"markdown","0a4955c8":"markdown","6747a27d":"markdown","e5f11bd0":"markdown","bc9bba30":"markdown","97d2eb10":"markdown","10243b2c":"markdown"},"source":{"1543c8c9":"import pandas as pd\n\n# Importing the dataset\ndataset = pd.read_csv('\/kaggle\/input\/epitope-prediction\/input_bcell.csv')\n\ndataset.head()","24d804cf":"dataset.columns","0d386b57":"dataset.isnull().sum()","93f32c42":"for col in dataset.columns:\n    x = dataset[col].unique()\n    if len(x) < 20:\n        print(f\"{col}: {x}\")","55e7d93c":"X = dataset.drop(columns=['parent_protein_id', 'protein_seq', 'peptide_seq', 'target'])\nX.head()","625be031":"y = dataset['target']\ny.head()","5992b6c9":"# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX = sc.fit_transform(X)\n\nX","c7634c8d":"# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1)","d6f8de93":"from keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Dropout\n\nclassifier = Sequential()\nclassifier.add(Dense(units = 10, kernel_initializer = 'uniform', activation = 'relu', input_dim = 10))\nclassifier.add(Dense(units = 50, kernel_initializer = 'uniform', activation = 'relu'))\n# classifier.add(Dropout(0.2))\nclassifier.add(Dense(units = 30, kernel_initializer = 'uniform', activation = 'relu'))\n# classifier.add(Dropout(0.2))\nclassifier.add(Dense(units = 20, kernel_initializer = 'uniform', activation = 'relu'))\nclassifier.add(Dense(units = 1, kernel_initializer = 'uniform', activation = 'sigmoid'))\n\nclassifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\n\nclassifier.fit(X_train, y_train, batch_size = 10, epochs = 300)","75a7368e":"# Save the model\nclassifier.save('model.h5')\n\n# Save a dictionary into a pickle file.\nimport pickle\npickle.dump(sc, open( \"scaler.p\", \"wb\" ))","0c5df71b":"# Predicting the Test set results\ny_pred = classifier.predict(X_test)\ny_pred = (y_pred > 0.5)\n\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\n\ncm","51068973":"import seaborn as sn\nsn.heatmap(cm, cmap=\"Blues\", annot=True,annot_kws={\"size\": 16})","1afd6f09":"from sklearn.metrics import accuracy_score\n\nprint('VALIDATION ACCURACY', accuracy_score(y_test, y_pred))","286a5f8b":"sars = pd.read_csv('\/kaggle\/input\/epitope-prediction\/input_sars.csv')\n\nsars.head()","9fac0be7":"sars.columns","db482bf1":"sars.isnull().sum()","4de4a942":"X_sars = sars.drop(columns=['parent_protein_id', 'protein_seq', 'peptide_seq', 'target'])\nX_sars.head()","afabcd34":"y_sars = sars['target']\ny_sars.head()","5f655475":"X_sars = sc.fit_transform(X_sars)\n\nX_sars","d7564162":"# Predicting the Test set results\ny_sars_pred = classifier.predict(X_sars)\ny_sars_pred = (y_sars_pred > 0.5)\n\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_sars, y_sars_pred)\n\ncm","5534f368":"from sklearn.metrics import accuracy_score\n\nprint('VALIDATION ACCURACY', accuracy_score(y_sars, y_sars_pred))","292ff9b5":"Performed better than ML models https:\/\/www.kaggle.com\/julianobatistim\/sars-prediction-with-b-cell-data-81-57-43-85","fad30448":"## Search for categorical columns","075c1146":"# Classification with Artificial Neural Networks","ea591bbd":"## Import dataset","379657e9":"## Save the ANN","2b641cae":"## Prepare the ANN model structure","7293331e":"## Apply feature scaling","09c29170":"## Get SARS data","e788b349":"## Get output data","c180c053":"I did a prior grid search applying K-Fold cross validations and the best hyperparameters are {'batch_size': 10, 'epochs': 300, 'optimizer': 'adam'}","0a4955c8":"## Check columns","6747a27d":"## Predict over test set and check confusion matrix","e5f11bd0":"## Search for null values","bc9bba30":"## Split data in training and test sets","97d2eb10":"## Remove irrelevant features and get input data","10243b2c":"## Get final ANN accuracy over test set"}}