{"cell_type":{"6fed7192":"code","b8727ab9":"code","5b48f344":"code","87f73c39":"code","dc961175":"code","97043994":"code","4688a8c1":"code","96745bc4":"code","5bdc1c41":"code","8836ac81":"code","67690617":"code","4078fe52":"code","abe327fa":"code","93216747":"code","315de558":"code","ff07fe83":"code","7b4af3f7":"code","e99f2b4a":"code","9a4fd01e":"code","7156a312":"code","1ed891f9":"code","b4fd75b2":"code","57716e98":"code","26840ecb":"code","55e43ccf":"markdown","16d67903":"markdown","33423cf6":"markdown","ec5e629f":"markdown","8bd88167":"markdown","f3abecac":"markdown"},"source":{"6fed7192":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b8727ab9":"!pip install openpyxl","5b48f344":"import matplotlib.pyplot as plt\nimport openpyxl\nimport seaborn as sns","87f73c39":"#read train data\ndf_train = pd.read_csv('..\/input\/housepriceprediction\/train_data.csv',na_values=True)","dc961175":"# EDA","97043994":"#get the shape\ndf_train.shape","4688a8c1":"#get the structure of variables\ndf_train.dtypes.value_counts()","96745bc4":"category_var = df_train.select_dtypes(include = 'object')\nnum_var = df_train.select_dtypes(exclude = 'object')\n\nprint(\"Number of categorical features are: \", category_var.shape[1])\nprint(\"Number of numerical features are: \", num_var.shape[1])\n","5bdc1c41":"df_train.info()","8836ac81":"df_train.head()","67690617":"#get a summary\ndf_train.describe()","4078fe52":"df_train.columns","abe327fa":"df_train.index","93216747":"#missing values\ndf_train.isna().sum()","315de558":"df_train['SalePrice'].value_counts()","ff07fe83":"df_train['SalePrice'].describe()","7b4af3f7":"plt.boxplot(df_train['SalePrice']);","e99f2b4a":"len(df_train['SalePrice'].unique())","9a4fd01e":"f, ax = plt.subplots(figsize=(10, 5))\nplt.hist(df_train['SalePrice']);","7156a312":"f, ax = plt.subplots(figsize=(20, 6))\n\nsns.distplot(df_train['SalePrice'],bins=50);","1ed891f9":"#correlation matrix\n# corrmat = df_train.corr()\nf, ax = plt.subplots(figsize=(25, 20))\nsns.heatmap(df_train.corr(), vmax=0.9,annot =True );","b4fd75b2":"total= np.sum(df_train.isna()).sort_values(ascending =False).head(30)\npersent = np.sum(df_train.isna())\/(df_train.isna()).count()\ndf_train_missdata =pd.concat([total ,persent],axis = 1 , keys = ['total','persent'] )\ndf_train_missdata.head(30)\n","57716e98":"df_train_missdata.to_excel('df_train_missdata.xlsx')\n","26840ecb":"def show_missing():\n    missing = df_train.columns[df_train.isnull().any()].tolist()\n    return missing\nshow_missing()","55e43ccf":"\u0628\u0627 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0627\u0632 \u06a9\u062a\u0627\u0628\u062e\u0648\u0646\u0647 openpyxl\n\u062f\u0627\u062f\u0647 \u0647\u0627\u06cc \u062e\u0627\u0644\u06cc \u0631\u0648 \u062a\u0648 \u0627\u06a9\u0633\u0644 \u0630\u062e\u06cc\u0631\u0647 \u0645\u06cc\u06a9\u0646\u0645.","16d67903":"# target","33423cf6":"\u062a\u0648 \u0627\u06cc\u0646 \u062c\u062f\u0648\u0644 \u062a\u0639\u062f\u0627\u062f \u0645\u0642\u0627\u062f\u06cc\u0631 \u062e\u0627\u0644\u06cc \u06cc\u0627 \u062f\u0631\u0635\u062f\u0634\u0648\u0646 \u0646\u0634\u0627\u0646 \u062f\u0627\u062f\u0647 \u0634\u062f\u0647.","ec5e629f":"  \u0647\u062f\u0641 \u062a\u0648 \u0627\u06cc\u0646 \u0646\u0648\u062a \u0628\u0648\u06a9 \u0627\u06cc\u0646 \u0647\u0633\u062a \u06a9\u0647 \u06cc\u06a9 \u0627\u06cc\u062f\u0647 \u06a9\u0644\u06cc \u0627\u0632 \u062f\u0627\u062f\u0647 \u0647\u0627 \u0628\u062f\u0633\u062a \u0628\u06cc\u0627\u0631\u06cc\u0645\n1. import library\n1. EDA","8bd88167":"\u0645\u0642\u0627\u062f\u06cc\u0631 \u062e\u0627\u0644\u06cc \u062f\u0631 \u062f\u0627\u062f\u0647 \u0647\u0627 \u062f\u06cc\u062f\u0647 \u0645\u06cc\u0634\u0647.","f3abecac":"\u062a\u0639\u062f\u0627\u062f \u0645\u062a\u063a\u06cc\u06cc\u0631 \u06a9\u0645\u06cc 37 \u0648 \u062a\u0639\u062f\u0627\u062f \u0645\u062a\u063a\u06cc\u06cc\u0631 \u06a9\u062a\u06af\u0648\u0631\u06cc\u06a9\u0627\u0644 43 \u0647\u0633\u062a."}}