{"cell_type":{"767f48d7":"code","94cb824c":"code","1ac55a36":"code","bc06d1ce":"code","589395c4":"code","3627dd7f":"code","dda3ff36":"code","2a4d8e55":"code","2f65c698":"code","b7341b78":"code","b59be3a6":"code","9a747690":"code","9095d50b":"code","25a5b16c":"code","74a395bb":"code","a5edbed4":"code","d830ece3":"code","4ce2fbca":"code","b84240c3":"markdown","b60e927c":"markdown"},"source":{"767f48d7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nmaindir = '..\/input\/gtsrb-german-traffic-sign'\n# Any results you write to the current directory are saved as output.","94cb824c":"import imageio\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.metrics import classification_report\nfrom skimage import transform\nfrom skimage import exposure\nfrom skimage import io\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport argparse\nimport random\nimport os\nimport cv2\nfrom PIL import Image","1ac55a36":"img=imageio.imread(maindir+\"\/meta\/31.png\")\nplt.imshow(img)\nplt.show()","bc06d1ce":"data=[]\nlabels=[]\n\nheight = 30\nwidth = 30\nchannels = 3\nclasses = 43\nn_inputs = height * width*channels\n\nfor i in range(classes) :\n    path = (maindir+\"\/train\/{0}\/\").format(i)\n    print(path)\n    Class=os.listdir(path)\n    for a in Class:\n        try:\n            image=cv2.imread(path+a)\n            image_from_array = Image.fromarray(image, 'RGB')\n            size_image = image_from_array.resize((height, width))\n            data.append(np.array(size_image))\n            labels.append(i)\n        except AttributeError:\n            print(\" \")\n            \nCells=np.array(data)\nlabels=np.array(labels)\n\n#Randomize the order of the input images\ns=np.arange(Cells.shape[0])\nnp.random.seed(2)\nnp.random.shuffle(s)\nCells=Cells[s]\nlabels=labels[s]","589395c4":"(X_train,X_val)=Cells[(int)(0.2*len(labels)):],Cells[:(int)(0.2*len(labels))]\nX_train = X_train.astype('float32')\/255 \nX_val = X_val.astype('float32')\/255\n(y_train,y_val)=labels[(int)(0.2*len(labels)):],labels[:(int)(0.2*len(labels))]\n\n#Using one hote encoding for the train and validation label\ny_train = to_categorical(y_train, 43)\ny_val = to_categorical(y_val, 43)","3627dd7f":"#np.save('xtrain', X_train)\n#np.save('xval', X_val)\n#np.save('ytrain', y_train)\n#np.save('yval', y_val)","dda3ff36":"!ls -1","2a4d8e55":"#X_train=np.load('xtrain.npy')\n#X_val=np.load('xval.npy')\n#y_train=np.load('ytrain.npy')\n#y_val=np.load('yval.npy')","2f65c698":"import tensorflow as tf\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.optimizers import Adam","b7341b78":"model = tf.keras.models.Sequential()\nmodel.add(layers.BatchNormalization())\nmodel.add(layers.Conv2D(32, kernel_size=(2,2), input_shape=(X_train[0].shape)))\nmodel.add(layers.MaxPooling2D((2,2),padding='same'))\n\n#model.add(layers.Conv2D(64, kernel_size=(3,3)))\n#model.add(layers.Conv2D(64, kernel_size=(2,2)))\n#model.add(layers.MaxPooling2D((2,2),padding='same'))\n#model.add(layers.Conv2D(128, kernel_size=(3,3)))\n#model.add(layers.Conv2D(256, kernel_size=(3,3)))\n#model.add(layers.MaxPooling2D((2,2),padding='same'))\nmodel.add(layers.Flatten())\nmodel.add(layers.Dropout(0.5))\n#model.add(layers.Dense(512, activation='relu'))\nmodel.add(layers.Dense(128, activation='relu'))\nmodel.add(layers.Dense(43, activation='softmax'))","b59be3a6":"model.compile(optimizer=Adam(learning_rate=0.001), loss='categorical_crossentropy', metrics=['accuracy'])","9a747690":"history = model.fit(X_train, y_train, epochs=10, batch_size=16, validation_data=(X_val, y_val))","9095d50b":"import matplotlib\nimport matplotlib.pyplot as plt\nacc=history.history['accuracy']\nacc[0]=None\nvalacc=history.history['val_accuracy']\nepochs = range(1,11)\nplt.plot(epochs, acc, 'bo', label='Training acc')\nplt.plot(epochs, valacc, 'b', label='Validation acc')\nplt.title('Training and validation accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.legend()\nplt.show()","25a5b16c":"y_test=pd.read_csv(maindir+\"\/Test.csv\")\nlabels=y_test['Path'].values\ny_test=y_test['ClassId'].values\n\ndata=[]\n\nfor f in labels:\n    image=cv2.imread((maindir+'\/test\/')+f.replace('Test\/', ''))\n    image_from_array = Image.fromarray(image, 'RGB')\n    size_image = image_from_array.resize((height, width))\n    data.append(np.array(size_image))\n\nX_test=np.array(data)\nX_test = X_test.astype('float32')\/255 \npred = model.predict_classes(X_test)","74a395bb":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test, pred)","a5edbed4":"array=np.zeros(43)\nfor i in range(42):\n    imgarray=(cv2.imread(maindir+('\/meta\/{}.png').format(i)))*1.\n    imgarray=cv2.resize(imgarray,(30,30))\n    imgarray=imgarray.reshape(1,imgarray.shape[0],imgarray.shape[0],3)\n\n    array[i]=np.argmax(model.predict(imgarray))","d830ece3":"gt = np.arange(43)","4ce2fbca":"np.sum(array==gt)\/43","b84240c3":"#Accuracy with the test data\nfrom sklearn.metrics import accuracy_score\naccuracy_score(y_test, pred)","b60e927c":"### "}}