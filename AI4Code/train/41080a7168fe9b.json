{"cell_type":{"abdc48a9":"code","5281e37d":"code","8cacec26":"code","cb01876e":"code","93292af8":"code","000cf1df":"code","7590dd6c":"code","f4c6b3c7":"code","b05f4269":"code","4d3d6790":"code","a6c0e65f":"code","5a7b0686":"code","a4c40271":"code","9b5aa37f":"code","bfb037c7":"code","6a34cf13":"code","19874117":"code","09c15af8":"code","e14d9cba":"code","4369cdbe":"code","09aa6ce0":"code","924ca00e":"code","eadb0797":"code","3e4a8fd6":"code","dd35196b":"code","24c851a6":"code","aa3da6ff":"code","739f5c6e":"code","d0b73786":"code","8ddc07b3":"code","af32c610":"code","ee63176c":"code","b18722e8":"code","50d83178":"code","8017f4c6":"code","15c71916":"code","96894f53":"code","c542c331":"markdown","2f822dc6":"markdown","77bf26c2":"markdown","67dc2064":"markdown","18d47881":"markdown","76f6fad8":"markdown","be4ebfd3":"markdown","9aa726ae":"markdown","99b41664":"markdown","a69f38b0":"markdown","ac9310a4":"markdown","79e7a7d1":"markdown"},"source":{"abdc48a9":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv\nimport matplotlib.pyplot as plt # data visualization\nimport seaborn as sns  ## data visualization\nimport warnings\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import GridSearchCV, RandomizedSearchCV\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import RandomForestRegressor\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n        ","5281e37d":"df=pd.read_csv('..\/input\/vehicle-dataset-from-cardekho\/car data.csv')","8cacec26":"print(df.shape)\ndf.head()","cb01876e":"df.info()","93292af8":"df.describe()","000cf1df":"df.isnull().sum()","7590dd6c":"df['Vehicle_age']=2021 - df['Year']","f4c6b3c7":"df.drop('Year', axis=1, inplace=True)","b05f4269":"plt.figure(figsize=(15,4))\nplt.subplot(1,5,1)\nsns.countplot(df['Seller_Type'])\n\nplt.subplot(1,5,2)\nsns.countplot(df['Transmission'])\n\nplt.subplot(1,5,3)\nsns.countplot(df['Fuel_Type'])\n\nplt.subplot(1,5,4)\nsns.countplot(df['Owner'])\n\nplt.subplot(1,5,5)\nsns.countplot(df['Vehicle_age'])","4d3d6790":"sns.pairplot(df)","a6c0e65f":"plt.figure(figsize=(25,4))\nplt.subplot(1,5,1)\nsns.boxplot(df['Selling_Price'])\n\nplt.subplot(1,5,2)\nsns.boxplot(df['Present_Price'])\n\nplt.subplot(1,5,3)\nsns.boxplot(df['Kms_Driven'])\n\nplt.subplot(1,5,4)\nsns.boxplot(df['Vehicle_age'])\n","5a7b0686":"## handle the outlier \ndef outlier_threshold(data1, feature):\n    q1=data1[feature].quantile(0.25)\n    q3=data1[feature].quantile(0.75)\n    IQR=q3-q1\n    lower_limit, upper_limit=q1 - 1.5 * IQR , q3 + 1.5*IQR\n    return lower_limit, upper_limit\n\ndef has_outlier(data1, feature):\n    lower_limit, upper_limit=outlier_threshold(data1, feature)\n    if data1[(data1[feature]< lower_limit) | (data1[feature]>upper_limit)].any(axis=None):\n        print(feature, 'Yes')\n    else:    \n        print(feature, 'No')\n\ndef replace_with_threshold(data1, num_features):\n    for feature in num_features:\n        lower_limit, upper_limit=outlier_threshold(data1, feature)\n        df.loc[(df[feature]<lower_limit), feature]=lower_limit\n        df.loc[(df[feature]>upper_limit), feature]=upper_limit\n","a4c40271":"columns=['Selling_Price','Present_Price','Kms_Driven','Vehicle_age']\nfor col in columns:\n    has_outlier(df, col)","9b5aa37f":"replace_with_threshold(df, columns)","bfb037c7":"for col in columns:\n    has_outlier(df, col)","6a34cf13":"plt.figure(figsize=(12, 8))\nsns.heatmap(df.corr(), annot=True, cmap='viridis')","19874117":"plt.figure(figsize=(15,5))\nplt.subplot(1,4,1)\nsns.barplot(x='Fuel_Type', y='Selling_Price', data=df)\n\nplt.subplot(1,4,2)\nsns.stripplot(x='Fuel_Type', y='Selling_Price', data=df)\n\nplt.subplot(1,4,3)\nsns.barplot(x='Seller_Type', y='Selling_Price', data=df)\n\nplt.subplot(1,4,4)\nsns.stripplot(x='Seller_Type', y='Selling_Price', data=df)\n\n","09c15af8":"plt.figure(figsize=(15,5))\n\nplt.subplot(1,4,1)\nsns.barplot(x='Owner', y='Selling_Price', data=df)\n\nplt.subplot(1,4,2)\nsns.stripplot(x='Owner', y='Selling_Price', data=df)\n\nplt.subplot(1,4,3)\nsns.barplot(x='Vehicle_age', y='Selling_Price', data=df)\n\nplt.subplot(1,4,4)\nsns.stripplot(x='Vehicle_age', y='Selling_Price', data=df)","e14d9cba":"sns.scatterplot(x='Kms_Driven', y='Selling_Price', data=df)","4369cdbe":"## drop the car name\ndf.drop('Car_Name', axis=1, inplace=True)","09aa6ce0":"## dummies with categorical feature\ndf=pd.get_dummies(df, drop_first=True)","924ca00e":"print(df.shape)\ndf.head()","eadb0797":"X=df.iloc[:, 1:]\ny=df.iloc[:,0]","3e4a8fd6":"x_train ,x_test, y_train ,y_test=train_test_split(X, y, test_size=0.30, random_state=1)\nx_train.shape, x_test.shape, y_train.shape, y_test.shape","dd35196b":"from sklearn.preprocessing import StandardScaler\nscaler=StandardScaler()\nx_train_scale=scaler.fit_transform(x_train)\nx_test_scale=scaler.fit_transform(x_test)\n","24c851a6":"from sklearn.linear_model import LinearRegression\nlr=LinearRegression()\nlr.fit(x_train_scale ,y_train)\nprint('training set score: {}'.format(lr.score(x_train_scale ,y_train)))\nprint(\"testing set score :{}\".format(lr.score(x_test_scale ,y_test)))","aa3da6ff":"y_pred=lr.predict(x_test_scale)\nplt.figure(figsize=(20,10))\nindex=range(1, len(y_pred)+1)\nplt.plot(index, y_pred, label='Predictes value')\nplt.plot(index, y_test, label='actual value')\nplt.legend()\nplt.xlabel('target indexes')\nplt.ylabel('selling price')\nplt.show()","739f5c6e":"from sklearn.metrics import r2_score\nr2_linear=r2_score(y_test, y_pred)\nr2_linear","d0b73786":"svr=SVR()\nsvr.fit(x_train_scale ,y_train)\nprint(\"training set score : {}\".format(svr.score(x_train_scale, y_train)))\nprint(\"training set score : {}\".format(svr.score(x_test_scale, y_test)))\ny_pred1=svr.predict(x_test_scale)","8ddc07b3":"svr1=SVR()\nparas={'C':[0.001, 0.1, 1, 2, 5 ,10, 100],\n      'degree':[1,2,3,4,5,6,7],\n      'gamma':[0.001, 0.1, 1,2 ,5, 10, 100]}\n\ngridsearch=GridSearchCV(estimator=svr,param_grid=paras, cv=10, n_jobs=-1)\ngridsearch.fit(x_train_scale,y_train)","af32c610":"gridsearch.best_params_","ee63176c":"svr=SVR(C=10, degree=1, gamma=0.1)\nsvr.fit(x_train_scale ,y_train)\nprint(\"training set score : {}\".format(svr.score(x_train_scale, y_train)))\nprint(\"testing set score : {}\".format(svr.score(x_test_scale, y_test)))\ny_pred2=svr.predict(x_test_scale)","b18722e8":"plt.figure(figsize=(15,8))\nindex=range(1, len(y_pred2)+1)\nplt.plot(index, y_pred2, label='Predictes value')\nplt.plot(index, y_test, label='actual value')\nplt.legend()\nplt.xlabel('target indexes')\nplt.ylabel('selling price')\nplt.show()","50d83178":"r2_svm=r2_score(y_test, y_pred2)\nr2_svm","8017f4c6":"random=RandomForestRegressor()\nrandom.fit(x_train ,y_train)\nprint(\"training set score :{}\".format(random.score(x_train,y_train)))\nprint(\"testing set score : {}\".format(random.score(x_test,  y_test)))","15c71916":"y_pred1=random.predict(x_test)\nr2_random=r2_score(y_test, y_pred1)\nr2_random","96894f53":"\npd.DataFrame({'Model':['Linear Regression', 'Support vector machine', 'Random Forest Regressor'], 'R2 Score':[r2_linear, r2_svm, r2_random]})","c542c331":"## Split the data into train and test dataset","2f822dc6":"## Support Vector Regressor","77bf26c2":"## Car Price Prediction","67dc2064":"## Data visualization","18d47881":"## Handle the outlier","76f6fad8":"## Check the outlier","be4ebfd3":"## Random Forest Regressor ","9aa726ae":"## R^2 is used to check the performance of the model in Regression ","99b41664":"When the value of the r2_score is near to 1 that means model is good otherwise model gives some error. So here Support vector machine gives the best r2 score so it is good model","a69f38b0":"## Linear Regression","ac9310a4":"## Feature Scaling","79e7a7d1":"## Support Vector Regressor with best parameters"}}