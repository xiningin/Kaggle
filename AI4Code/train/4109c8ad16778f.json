{"cell_type":{"af7a6560":"code","48d2b453":"code","5ee808a5":"code","a8e4015d":"code","709942a4":"code","0c9f5600":"code","8eea25b0":"code","428bb19e":"code","b5c0b223":"markdown"},"source":{"af7a6560":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","48d2b453":"#\ub370\uc774\ud130 \uc785\ub825\ubc1b\uae30\nxy_train = pd.read_csv(\"\/kaggle\/input\/2021-ai-quiz1-p1\/train.csv\")\nX_test = pd.read_csv(\"\/kaggle\/input\/2021-ai-quiz1-p1\/test.csv\")\nsubmit = pd.read_csv(\"\/kaggle\/input\/2021-ai-quiz1-p1\/submit_sample.csv\")","5ee808a5":"#\ud14c\uc2a4\ud2b8\uc5d0\uc11c \uc874\uc7ac\ud558\ub294 \ub0a0\uc9dc\uac00 \uc804\ud600 \ub2ec\ub77c \ud070 \uc758\ubbf8\uac00 \uc5c6\uc744\uac83 \uac19\uc544 \uc81c\ud588\uc2b5\ub2c8\ub2e4.\n#\ub77c\ubca8\uac12\ub3c4 \uc81c\uc678\ud558\uc5ec x_train, y_train, x_test\ub97c \uac01\uae30 \uad6c\uc131\ud588\uc2b5\ub2c8\ub2e4.\nX_train = xy_train.drop(['avgPrice', 'year'], axis=1)\nX_test = X_test.drop('year', axis=1)\ny_train = xy_train['avgPrice']","a8e4015d":"#torch\ub97c \ubc1b\uc544\uc654\uc2b5\ub2c8\ub2e4.\n#\uc635\ud2f0\ub9c8\uc774\uc800\uc640 \uc120\ud615\ubaa8\ub378, \ubaa9\uc801\ud568\uc218\ub97c \ubd88\ub7ec\uc624\uae30 \uc704\ud55c optim \ubaa8\ub4c8\uacfc nn\ubaa8\ub4c8\ub3c4 \uc120\uc5b8\ud588\uc2b5\ub2c8\ub2e4.\nimport torch\nimport torch.optim as optim\nimport torch.nn as nn","709942a4":"#\uac01 \ub370\uc774\ud130\ub97c \ud559\uc2b5\uc774 \uac00\ub2a5\ud558\ub3c4\ub85d tensor\uc758 \ud615\ud0dc\ub85c \ubc14\uafb8\uc5b4\uc8fc\uc5c7\uc2b5\ub2c8\ub2e4.\n#\uc774\ub54c dataFrame\uc740 \ub4e4\uc5b4\uac00\uc9c0 \uc54a\uc544 values\ub97c \uc774\uc6a9\ud574\uc11c \ud574\ub2f9\ud558\ub294 \uac12\ub9cc \ub4e4\uc5b4\uac08 \uc218 \uc788\ub3c4\ub85d \uc870\uc815\ud558\uc600\uc2b5\ub2c8\ub2e4.\nX_train = torch.FloatTensor(X_train.values)\nX_test = torch.FloatTensor(X_test.values)\ny_train = torch.FloatTensor(y_train.values).reshape(-1, 1)","0c9f5600":"#Linear\ub97c \uc124\uc815\ud560\ub54c, \uac00\uc911\uce58\uac00 \ud56d\uc0c1 \ub3d9\uc77c\ud558\uac8c \ucd08\uae30\ud654\ub420 \uc218 \uc788\ub3c4\ub85d\n#torch.manual_seed\ub97c \uc774\uc6a9\ud574\uc11c \ub79c\ub364\uc2dc\ub4dc\ub97c \uace0\uc815\uc2dc\ucf1c\ub450\uc5c8\uc2b5\ub2c8\ub2e4.\ntorch.manual_seed(1)\n\n\n#\ucd1d \ud2b9\uc9d5\uc758 \uc218\uac00 4\uac1c\uc774\uae30\uc5d0 \uc774\uc758 \ubc30\uc218\uc778 8\ub85c \ud53c\uccd0\ub97c \ub113\ud78c \ud6c4 \ucd1d 4\uac1c\uc758 \ub808\uc774\uc5b4\ub85c \uad6c\uc131\ud558\uc600\uc2b5\ub2c8\ub2e4.\nlinear1 = nn.Linear(4, 8)\nlinear2 = nn.Linear(8, 8)\nlinear3 = nn.Linear(8, 8)\nlinear4 = nn.Linear(8, 1)\n\n#\ud65c\uc131\ud654 \ud568\uc218\ub85c\ub294 relu\ud568\uc218\ub97c \uc0ac\uc6a9\ud588\uc2b5\ub2c8\ub2e4.\nrelu = nn.ReLU()\n\n#\ub9cc\ub4e0 \ub808\uc774\uc5b4\uc640 \ud65c\uc131\ud568\uc218\ub97c sequential\ud568\uc218\ub97c \uc774\uc6a9\ud574\uc11c \ud558\ub098\ub85c \ubb36\uc5b4\uc8fc\uc5c8\uc2b5\ub2c8\ub2e4.\nmodel = nn.Sequential(linear1, relu, linear2, relu, linear3, relu, linear4)\n\n#\uc635\ud2f0\ub9c8\uc774\uc800\ub294 adam\uc744 \uc0ac\uc6a9\ud588\uace0 \ud559\uc2b5\ub960\ub85c\ub294 0.001\uc744 \uc124\uc815\ud588\uc2b5\ub2c8\ub2e4.\noptimizer = optim.Adam(model.parameters(), lr=1e-3)\n\n#\ud3c9\uac00\uae30\uc900\uc774 mean squared error\uc774\uae30\uc5d0 \ud574\ub2f9\ud558\ub294 \ubaa9\uc801\ud568\uc218\ub97c \uc0ac\uc6a9\ud588\uc2b5\ub2c8\ub2e4.\nloss = nn.MSELoss()","8eea25b0":"#\ucd1d 1\ub9cc\ubc88\uc744 \ub3cc\ub838\uc2b5\ub2c8\ub2e4.\n#\ud559\uc2b5 \ud6c4 cost\ub97c \uad6c\ud558\uace0 cost\uc758 \ubcc0\ud654\ub7c9\uc744 \ubcf4\uae30 \uc704\ud574\uc11c\n#step\uc774 1000\ub9c8\ub2e4 cost\uc5d0 \uc5b4\ub5a0\ud55c \ubcc0\ud654\uac00 \uc788\ub294\uc9c0 \uac01\uae30 \ucc0d\uc5b4\ubcf4\uc558\uc2b5\ub2c8\ub2e4.\n\n#\uadf8 \ud6c4 10\ub9cc\ubc88\uc744 \ub3cc\ub838\uc9c0\ub9cc \uc720\uc758\ubbf8\ud55c \uacb0\uacfc\uac00 \ub098\uc624\uc9c0\ub294 \uc54a\uc558\uc2b5\ub2c8\ub2e4.\n\n#\nfor step in range(10001):\n    hypothesis = model(X_train)\n    cost = loss(hypothesis, y_train)\n    \n    optimizer.zero_grad()\n    cost.backward()\n    optimizer.step()\n    \n    if step%1000 == 0:\n        print(f\"step:{step}, cost:{cost.item()}\")\n        \n        \n#\ucd1d 1\ub9cc\ubc88\uc744 \ub3cc\ub838\uc744\ub54c : 1565.91922\n#\ucd1d 10\ub9cc\ubc88\uc744 \ub3cc\ub838\uc744\ub54c : ","428bb19e":"#\ud559\uc2b5\uc744 \ub05d\ub0b8 \ud6c4 model\uc5d0 x_test\ub97c \ub123\uc5b4 \uc608\uce21\uac12\uc744 \ubf51\uc740 \ud6c4\n#submit\uc5d0 \ub123\uc744 \uc218 \uc788\uac8c np.array\ub85c \ubc14\uafb8\uc5b4\uc8fc\uc5c8\uc2b5\ub2c8\ub2e4.\npredict = np.array(model(X_test).detach())\nsubmit['Expected'] = predict\nsubmit.to_csv(\"1.csv\", index=False)","b5c0b223":"\uacb0\ub860\n\n\uc2e0\uacbd\ub9dd\uc73c\ub85c \uad6c\uc131\ud55c \uacb0\uacfc \ucc98\uc74c 1\ub9cc\ubc88\uc744 \ub3cc\ub838\uc744\ub54c\ub3c4\nbaseline\ubcf4\ub2e4 \ub192\uc740 \uc810\uc218\uac00 \ub098\uc624\ub294 \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc5c8\uc2b5\ub2c8\ub2e4.\n\n\ud559\uc2b5\uc774 \ub354 \uc774\ub8e8\uc5b4\uc9c8\uae4c \ud558\uc5ec 10\ub9cc\ubc88\uc73c\ub85c \uc218\uc815\ud574\uc11c \ub3cc\ub824\ubcf8 \uacb0\uacfc\n\ub354 \uc88b\uc740 \uc131\ub2a5\uc774 \ub098\uc624\uc9c0\ub294 \uc54a\uc558\uc2b5\ub2c8\ub2e4.\n\n\uc774\ub97c \uace0\uccd0\ubcf4\uae30 \uc704\ud574\uc11c \ub808\uc774\uc5b4\ub97c \uc870\uae08 \ub354 \ub113\ud600\ubcf4\uc558\uc9c0\ub9cc \ud070 \uc758\ubbf8\uac00 \uc5c6\uc5c8\uc2b5\ub2c8\ub2e4.\n\uadf8 \ud6c4 \uce35\uc744 \ud558\ub098 \uc904\uc5ec \uc740\ub2c9\uce35\uc744 \ud558\ub098\ub9cc\uc73c\ub85c \uad6c\uc131\ud558\uace0\n2\ub9cc\ubc88\uc744 \ub3cc\ub824\ubcf4\uc558\uc9c0\ub9cc \uae30\uc874\uacfc \ube44\uc2b7\ud55c \uc131\ub2a5\uc774 \ub098\uc640\n\ucc98\uc74c\ub300\ub85c \ucf54\ub4dc\ub97c \uad6c\uc131\ud574\ub450\uc5c8\uc2b5\ub2c8\ub2e4."}}