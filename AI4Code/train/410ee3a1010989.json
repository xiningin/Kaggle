{"cell_type":{"8f1b6977":"code","94b4efc2":"code","b82ee454":"code","55a02b0b":"code","28c7ae56":"code","7e2e6a51":"code","c549c3c8":"code","f310b8aa":"code","78142cb0":"code","77c1da5e":"code","e3009b33":"code","c058e489":"code","6dab2a5d":"code","430c06b0":"code","a9065b83":"code","ef26ed5d":"code","6db021d4":"code","b0c6f306":"code","196f008e":"code","1511350f":"code","610f1b2e":"code","ffdcf9b3":"code","136e9dbf":"code","04faaa8a":"code","28f06e36":"code","5a0a27a3":"code","d29db316":"code","6c2aaa03":"code","065fda1c":"code","6b6bbd3c":"code","162cbb29":"code","8dc74806":"code","4431bae8":"code","9e54d1c0":"code","f486dc7c":"markdown","46afc963":"markdown","488a8884":"markdown","926c206b":"markdown","fe4b0476":"markdown","d2dcc0ad":"markdown","2bef0c27":"markdown","14917f02":"markdown","a8aef34e":"markdown","323b13ed":"markdown","7035e865":"markdown","9f582c3d":"markdown","5e4cf194":"markdown","2c14c865":"markdown","5c9ae29d":"markdown","4797ab04":"markdown","d1ef3c26":"markdown","0a874937":"markdown","53ca2955":"markdown","4d9d8a2e":"markdown","1271ebc1":"markdown","63acb63e":"markdown","2fa1c345":"markdown"},"source":{"8f1b6977":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","94b4efc2":"basket = pd.read_csv('..\/input\/the-bread-basket\/bread basket.csv')","b82ee454":"basket.head()","55a02b0b":"basket.info()","28c7ae56":"plt.subplots(figsize=(10,6))\nsns.heatmap(basket.isnull())","7e2e6a51":"basket['Item'] = basket['Item'].str.lower()\nbasket['Item'] = basket['Item'].str.strip()","c549c3c8":"basket['Datetime'] = pd.to_datetime(basket['date_time'])","f310b8aa":"basket['date'] = basket['Datetime'].dt.date\nbasket['month'] = basket['Datetime'].dt.month\nbasket['day'] = basket['Datetime'].dt.weekday\nbasket['hour'] = basket['Datetime'].dt.hour\n\nbasket['day'] = basket['day'].replace((0,1,2,3,4,5,6), \n('Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'))","78142cb0":"basket.drop(columns='date_time',inplace=True)","77c1da5e":"basket.head(3)","e3009b33":"countByHour = basket.groupby('hour')['Transaction'].count().reset_index()\ncountByHour.sort_values('hour',inplace=True)","c058e489":"colors = sns.color_palette(\"YlOrRd\", 18)\nfig = plt.figure(figsize=(12,5))\nsns.barplot(x=countByHour['hour'], y=countByHour['Transaction'], palette = colors)","6dab2a5d":"countByDayPeriod = basket.groupby('period_day')['Transaction'].count().reset_index()\ncountByDayPeriod.loc[:,\"orderOfDayPeriod\"] = [1,2,0,3]\ncountByDayPeriod.sort_values('orderOfDayPeriod',inplace=True)","430c06b0":"colors = sns.color_palette(\"YlOrRd\", 4)\nfig = plt.figure(figsize=(12,5))\nsns.barplot(x=countByDayPeriod['period_day'], y=countByDayPeriod['Transaction'], palette = colors)","a9065b83":"countByDay = basket.groupby('day')['Transaction'].count().reset_index()\ncountByDay.loc[:,\"orderOfDays\"] = [4,0,5,6,3,1,2]\ncountByDay.sort_values(\"orderOfDays\",inplace=True)","ef26ed5d":"colors = sns.color_palette(\"YlOrRd\", 7)\nfig = plt.figure(figsize=(12,5))\nsns.barplot(x=countByDay['day'], y=countByDay['Transaction'], palette = colors)","6db021d4":"countByWeekPeriod = basket.groupby('weekday_weekend')['Transaction'].count().reset_index()\ncountByWeekPeriod.sort_values('weekday_weekend',inplace=True)","b0c6f306":"colors = sns.color_palette(\"YlOrRd\", 2)\nfig = plt.figure(figsize=(12,5))\nsns.barplot(x=countByWeekPeriod['weekday_weekend'], y=countByWeekPeriod['Transaction'], palette = colors)","196f008e":"countByMonth = basket.groupby('month')['Transaction'].count().reset_index()\ncountByMonth.sort_values('month',inplace=True)","1511350f":"colors = sns.color_palette(\"YlOrRd\", 12)\nfig = plt.figure(figsize=(12,5))\nsns.barplot(x=countByMonth['month'], y=countByMonth['Transaction'], palette = colors)","610f1b2e":"fig = plt.figure(figsize=(15,5))\ncolors = sns.color_palette(\"YlOrRd\", 25)\nnames = basket.Item.value_counts().head(25).index\nvalues = basket.Item.value_counts().head(25)\nsns.barplot(x = names, y = values, palette = colors)\nplt.xticks(rotation=45)","ffdcf9b3":"items = basket.groupby(['Item','period_day'])['Transaction'].count().reset_index().sort_values(['period_day','Transaction'],ascending=False)","136e9dbf":"colors = sns.color_palette(\"YlOrRd\", 10)\nfig = plt.subplots(figsize=(17,9))\nplt.subplots_adjust(hspace = 0.6)\n\nplt.subplot(2,2,1)\nplt.xticks(rotation=45)\nplt.title('Top 10 orders in the morning')\ndfMorning = items[items['period_day']=='morning'].head(10) \nsns.barplot(x = dfMorning.Item, y = dfMorning.Transaction, palette = colors)\n\nplt.subplot(2,2,2)\nplt.xticks(rotation=45)\nplt.title('Top 10 orders in the afternoon')\ndfAfternoon = items[items['period_day']=='afternoon'].head(10) \nsns.barplot(x = dfAfternoon.Item, y = dfAfternoon.Transaction, palette = colors)\n\nplt.subplot(2,2,3)\nplt.xticks(rotation=45)\nplt.title('Top 10 orders in the evening')\ndfEvening = items[items['period_day']=='evening'].head(10) \nsns.barplot(x = dfEvening.Item, y = dfEvening.Transaction, palette = colors)\n\nplt.subplot(2,2,4)\nplt.xticks(rotation=45)\nplt.title('Top 10 orders in the night')\ndfNight = items[items['period_day']=='night'].head(10) \nsns.barplot(x = dfNight.Item, y = dfNight.Transaction, palette = colors)","04faaa8a":"items2 = basket.groupby(['Item','weekday_weekend'])['Transaction'].count().reset_index().sort_values(['weekday_weekend','Transaction'],ascending=False)","28f06e36":"colors = sns.color_palette(\"YlOrRd\", 10)\nfig = plt.subplots(figsize=(15,5))\n\nplt.subplot(1,2,1)\nplt.xticks(rotation=45)\nplt.title('Top 10 orders in weekdays')\ndfWeekday = items2[items2['weekday_weekend']=='weekday'].head(10) \nsns.barplot(x = dfWeekday.Item, y = dfWeekday.Transaction, palette = colors)\n\nplt.subplot(1,2,2)\nplt.xticks(rotation=45)\nplt.title('Top 10 orders in weekends')\ndfWeekend = items2[items2['weekday_weekend']=='weekend'].head(10) \nsns.barplot(x = dfWeekend.Item, y = dfWeekend.Transaction, palette = colors)","5a0a27a3":"transactions = basket.groupby(['Transaction', 'Item'])['Item'].count().reset_index(name='Number of Items')\ntable = transactions.pivot_table(index='Transaction', columns='Item', values='Number of Items', aggfunc='sum').fillna(0)","d29db316":"table.head()","6c2aaa03":"def hot_encode(x): \n    if(x==0): \n        return False\n    if(x>0): \n        return True","065fda1c":"final_table = table.applymap(hot_encode) ","6b6bbd3c":"final_table.head()","162cbb29":"from mlxtend.frequent_patterns import apriori\nfrom mlxtend.frequent_patterns import association_rules","8dc74806":"frequence = apriori(final_table, min_support=0.015, use_colnames=True)\nrules = association_rules(frequence, metric=\"lift\", min_threshold=1)","4431bae8":"rules.head()","9e54d1c0":"rules.sort_values('confidence', ascending = False, inplace=True)\nrules","f486dc7c":"### Transactions by Day Period","46afc963":"### Dataset Description","488a8884":"### Cleaning item column","926c206b":"Coffee and bread are clearly the best selling products","fe4b0476":"## Apriori Algorithm","d2dcc0ad":"### Transactions by Week Period","2bef0c27":"## Data Cleaning","14917f02":"### Visualizing Null Values","a8aef34e":"### Transactions per day of the week","323b13ed":"### Importing The Libraries","7035e865":"Most transactions in the morning and afternoon period","9f582c3d":"### Transactions per hour of the day","5e4cf194":"### Top 25 sold items","2c14c865":"### Bread Basket Association Rules with Apriori Algortithm\n\nUsing the Apriori Algorithm, I will try to find some associations between products in orders of a bakery in Edinburgh, Scotland. The dataset has 20507 entries, over 9000 transactions, and 5 columns.\n\n* Transaction - Id of the transaction\n* Item - Product of that transaction\n* date_time - Day and hour\n* period_day - Period of the Day (morning, afteernoon, evening, night) \n* weekday_weekend - whether it was weekday or weekend","5c9ae29d":"### Importing The Dataset","4797ab04":"### Top items sold by day period","d1ef3c26":"#### We can clearly see that coffee is an item that is very associated with other purchases in the bakery, such as toast, medialuna and pastry","0a874937":"### Top items sold by Weekend or WeekDay","53ca2955":"Most transactions in fall and winter","4d9d8a2e":"### Spliting date time column","1271ebc1":"## Data Visualization","63acb63e":"Non null values in this dataset","2fa1c345":"### Transactions By Month"}}