{"cell_type":{"0e819f02":"code","84a4ef8d":"code","bbf7061b":"code","ae2be59e":"code","b275cf1e":"code","8936b7eb":"code","c827bf41":"code","8699fddd":"code","581ba350":"code","19d8b607":"code","c6623e34":"code","1343b1ac":"code","4bc0adfd":"code","cdb5c9a2":"code","22672919":"code","22b19922":"code","6fda1b5e":"code","8d9c5e8c":"code","7da7c73e":"code","18358e59":"code","a03f4785":"code","1e892f09":"code","8d246bd3":"code","a7791978":"code","a7d9daac":"code","44d6a4f4":"code","670de8e3":"code","b8830f08":"code","e0d765c9":"code","616468c4":"code","2d0837e8":"markdown","d912f5f9":"markdown","d605c420":"markdown","244b821d":"markdown","7d9a0a76":"markdown","bb12f08f":"markdown","1f26e4de":"markdown","b747b433":"markdown","e4179f46":"markdown","0c9b4ea9":"markdown","49c83717":"markdown","cf2b1cd5":"markdown"},"source":{"0e819f02":"# importing packages\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","84a4ef8d":"insurance_data = pd.read_csv(\"..\/input\/medical-insurance\/insurance.csv\")\n\n# quick preview\ninsurance_data","bbf7061b":"# quick summary\ninsurance_data.describe()","ae2be59e":"insurance_data.isnull().sum()","b275cf1e":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\n\n# Training the label encoder with Transformations\nle.fit(insurance_data[\"sex\"].drop_duplicates())","8936b7eb":"insurance_data[\"sex\"] = le.transform(insurance_data[\"sex\"])","c827bf41":"insurance_data","8699fddd":"le.fit(insurance_data[\"smoker\"].drop_duplicates())\ninsurance_data[\"smoker\"] = le.transform(insurance_data[\"smoker\"])","581ba350":"insurance_data","19d8b607":"le.fit(insurance_data['region'].drop_duplicates())\ninsurance_data['region'] = le.transform(insurance_data['region'])","c6623e34":"insurance_data","1343b1ac":"sns.catplot(x = 'smoker', kind = 'count', data = insurance_data, palette='magma')","4bc0adfd":"plt.figure(figsize=(10,5))\nsns.distplot(insurance_data['charges'], color = 'b')","cdb5c9a2":"# Subplotting Distribution of Smoker vs Non-Smoker for Medical Health Charges\nfig = plt.figure(figsize = (10,5))\n\nax = fig.add_subplot(1, 2, 1)\nsns.distplot(insurance_data[(insurance_data['smoker'] == 1)]['charges'], color = 'm', ax = ax)\n\nax = fig.add_subplot(1, 2, 2)\nsns.distplot(insurance_data[(insurance_data['smoker'] == 0)]['charges'], color = 'turquoise', ax = ax)\nplt.show()","22672919":"plt.figure(figsize=(10,5))\nsns.distplot(insurance_data['bmi'], color = 'deeppink')","22b19922":"sns.set_style('darkgrid')\nplt.figure(figsize=(10,5))\nsns.scatterplot(x='bmi', y='charges', data= insurance_data, hue = 'smoker', palette='magma')","6fda1b5e":"plt.figure(figsize=(10,5))\nsns.heatmap(insurance_data.corr(),annot=True)","8d9c5e8c":"X = insurance_data.drop('charges', axis=1)\nX","7da7c73e":"Y = insurance_data['charges']\nY","18358e59":"from sklearn.model_selection import train_test_split\n#random state = 0-9, role of randoem state is to fix the random sampling of the data\nX_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.2, random_state=0)","a03f4785":"X_train.shape","1e892f09":"X_test.shape","8d246bd3":"from keras.layers import Dense\nfrom keras.models import Sequential\n# Regression, for classification different model, different optimizer needs to be used\nfrom keras.optimizers import RMSprop","a7791978":"def build_model():\n    # Sequential Neural Network\n    model = Sequential()\n    \n    # Input Layer\n    # input shape = length of X.keys()\n    # Dense - Dense Neural Network , activation function , input_shape = number of features\n    # units = number of neurons\n    model.add(Dense(units = 128, activation='relu', input_shape = [len(X.keys())]))\n\n    # Hidden Layer 1\n    model.add(Dense(units = 256, activation='relu')) #next bigger value for 2^n\n    \n    # Hidden Layer 2\n    model.add(Dense(units = 512, activation='relu'))\n\n    # Output Layers - Regression = 1\n    model.add(Dense(units = 1))\n    \n    # Optimizers : Reduce the loss\n    optimizers = RMSprop(learning_rate = 0.001)\n    \n    # Model compiler\n    model.compile(loss ='mean_squared_error', optimizer = 'RMSProp', metrics = ['mean_squared_error', 'mean_absolute_error'])\n\n    return model","a7d9daac":"model= build_model()","44d6a4f4":"model.summary()","670de8e3":"# epochs = number of iterations\n# batch_size = number of samples per iteration\n# validation split = 20 % X_train & X_test: Testing of model is done simultaneously per epoch\nhistory = model.fit(X_train, Y_train, epochs = 600, batch_size= 30, validation_split=0.2) # store history of the model","b8830f08":"# check the history of model\n\npd.DataFrame(history.history)[['mean_squared_error','mean_absolute_error']].plot()","e0d765c9":"predictions = model.predict(X_test)","616468c4":"from sklearn.metrics import r2_score  #r2_score for measure of regression\nr2_score(Y_test,predictions)","2d0837e8":"**Correlation**\n* used for feature selection","d912f5f9":"**Cross Validation**\n* splitting data into train and test splits","d605c420":"checking the encoding","244b821d":"**Predictions**","7d9a0a76":"**ANN Regression**","bb12f08f":"**Our model has an R2 score of 0.88** :'>","1f26e4de":"**Exploratory Data Analysis**","b747b433":"**Split data into Train and Test**","e4179f46":"**Data Pre-Processing: Label Encoder**","0c9b4ea9":"No missing values","49c83717":"encoding the `smoker` column","cf2b1cd5":"**Data Manipulation**"}}