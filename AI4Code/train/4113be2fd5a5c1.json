{"cell_type":{"56b8f7f0":"code","cb1467d3":"code","8c3279d6":"code","8efdc196":"code","e86e79e8":"code","f062dc13":"code","aae921b2":"code","8ecf5270":"code","f2b5a53d":"code","30452da3":"markdown","f7a4b27e":"markdown","fe51739f":"markdown","500c8a3f":"markdown","7dd572aa":"markdown"},"source":{"56b8f7f0":"import numpy as np \nimport pandas as pd\n\nimport glob\nimport json\n\nroot_path = '\/kaggle\/input\/CORD-19-research-challenge\/'","cb1467d3":"all_json = glob.glob(f'{root_path}\/**\/pdf_json\/*.json', recursive=True)\nlen(all_json)","8c3279d6":"methods = ['methods','method','statistical methods','materials','materials and methods',\n                'data collection','the study','study design','experimental design','objective',\n                'objectives','procedures','data collection and analysis', 'methodology',\n                'material and methods','the model','experimental procedures','main text']","8efdc196":"[''.join(x.lower() for x in m if x.isalpha()) for m in methods]","e86e79e8":"for m in methods:\n    print(''.join(x.lower() for x in m if x.isalpha()))","f062dc13":"class FileReader:\n    def __init__(self, file_path):\n        with open(file_path) as file:\n            content = json.load(file)\n            self.paper_id = content['paper_id']\n            self.abstract = []\n            self.body_text = []\n            self.methods = []\n            self.results = []\n\n            # Abstract\n            for entry in content['abstract']:\n                self.abstract.append(entry['text'])\n            # Body text\n            for entry in content['body_text']:\n                self.body_text.append(entry['text'])\n            # Methods\n            methods = ['methods','method','statistical methods','materials','materials and methods',\n                'data collection','the study','study design','experimental design','objective',\n                'objectives','procedures','data collection and analysis', 'methodology',\n                'material and methods','the model','experimental procedures','main text']\n            for entry in content['body_text']:\n                section_title = ''.join(x.lower() for x in entry['section'] if x.isalpha()) #remove numbers and spaces\n                if any(m in section_title for m in [''.join(x.lower() for x in m if x.isalpha()) for m in methods]) : \n                    self.methods.append(entry['text'])\n            # Results\n            results_synonyms = ['result']\n            for entry in content['body_text']:\n                section_title = ''.join(x.lower() for x in entry['section'] if x.isalpha())\n                if any(r in section_title for r in results_synonyms) :\n                    self.results.append(entry['text'])\n                    \n            self.abstract = '\\n'.join(self.abstract)\n            self.body_text = '\\n'.join(self.body_text)\n            self.methods = '\\n'.join(self.methods)\n            self.results = '\\n'.join(self.results)\n\n    def __repr__(self):\n        return f'{self.paper_id}: {self.abstract[:200]}... {self.body_text[:200]}...'\nfirst_row = FileReader(all_json[0])\nprint(first_row)","aae921b2":"dict_ = {'paper_id': [], 'abstract': [], 'body_text': [], 'methods': [], 'results': []}\nfor idx, entry in enumerate(all_json):\n    if idx % (len(all_json) \/\/ 10) == 0:\n        print(f'Processing index: {idx} of {len(all_json)}')\n    content = FileReader(entry)\n    dict_['paper_id'].append(content.paper_id)\n    dict_['abstract'].append(content.abstract)\n    dict_['body_text'].append(content.body_text)\n    dict_['methods'].append(content.methods)\n    dict_['results'].append(content.results)\ndel all_json","8ecf5270":"papers = pd.DataFrame(dict_, columns=['paper_id', 'abstract', 'body_text', 'methods', 'results'])\ndel dict_\npapers.head()","f2b5a53d":"papers.to_csv('pdf_json_df.csv', index=False)","30452da3":"Mike Honey: Cloned from [this notebook](https:\/\/www.kaggle.com\/danielwolffram\/cord-19-create-dataframe).\n\nCrashing with memory errors, so breaking into separate notebooks.  This one will just prepare the pdf_json input data and write out the results.","f7a4b27e":"# Load and Prepare Data","fe51739f":"# pdf_json","500c8a3f":"# Load Packages","7dd572aa":"To read the JSON files we follow [COVID EDA: Initial Exploration Tool](https:\/\/www.kaggle.com\/ivanegapratama\/covid-eda-initial-exploration-tool)."}}