{"cell_type":{"4f9d237e":"code","27ef003d":"code","fbf1a767":"code","bd52d213":"code","65bde348":"code","5bf68bd4":"code","c78127b1":"code","b1fd4320":"code","447e0b4e":"code","f1a2ea43":"code","c1056273":"code","8b92e6f0":"code","96b1d2c7":"code","b6b5db0e":"code","372ccd31":"code","ed67987b":"code","4249c079":"code","636742c1":"code","0bc49d45":"code","3797f741":"markdown","6b9048c4":"markdown","3f51ff63":"markdown","43542676":"markdown","9d3c120b":"markdown","2c453588":"markdown","847de72b":"markdown","c5813ff9":"markdown","212d29f4":"markdown"},"source":{"4f9d237e":"import numpy as np # lineer Cebir\nimport pandas as pd # Veri \u0130\u015fleme\nimport matplotlib.pyplot as plt # G\u00f6rselle\u015ftirme Arac\u0131\nimport seaborn as sns  # G\u00f6rselle\u015ftirme Arac\u0131\nfrom datetime import datetime # tarih-zaman k\u00fct\u00fcphanesi\n\nimport warnings\nwarnings.filterwarnings('ignore') # Uyar\u0131lar\u0131 g\u00f6rmezden gelme","27ef003d":"df = pd.read_csv(\"..\/input\/bitcoin-historical-data\/bitstampUSD_1-min_data_2012-01-01_to_2021-03-31.csv\")\ndf.head() # Pandas ile yukarda okudu\u011fumuz DataFrame'nin ilk 5 \u00f6rne\u011fini g\u00f6r\u00fcnt\u00fcledik.","fbf1a767":"df = df.dropna() # Verimizdeki NaN de\u011ferleri d\u00fc\u015f\u00fcr\u00fcr.\ndf.Timestamp = pd.to_datetime(df.Timestamp, unit=\"s\") # Zaman format\u0131n\u0131 de\u011fi\u015ftiriyoruz \ndf.head()","bd52d213":"# Fonksiyonu tan\u0131mlama-bilgi verme. Fonksiyonun ne yap\u0131p neyi d\u00f6nderdi\u011fini yazabiliriz.\ndef fark():\n    \"\"\" Datasetimizdeki Close-Open aras\u0131ndaki \n    g\u00fcnl\u00fck a\u00e7\u0131l\u0131\u015f kapan\u0131\u015f fark\u0131n\u0131 bulup \n    yen bir s\u00fctuna ekleyece\u011fiz.\"\"\"\n    \n    df[\"Fark\"] = df[\"Close\"] - df[\"Open\"]\n    return df.head()\nfark()","65bde348":"df.describe()","5bf68bd4":"x = df[\"High\"].max() # Global scope\n\ndef high_min():\n    x = df[\"High\"].min() # Local Scope\n    return x\n\nprint(x)  \nprint(high_min())","c78127b1":"def exchange():\n    y = 9.16 # 14 Oct 2021 dolar kuru\n    return y*x\n\nprint(exchange()) # Global scope(x) kullan\u0131l\u0131yor \u00e7\u00fcnk\u00fc local scope(x) mevcut de\u011fil.","b1fd4320":"# Daha \u00f6nceden belirlenmi\u015f scope; bunlar yaz\u0131l\u0131m dilinin sabitleridir. Yeni scope ismi olarak kullan\u0131lmamal\u0131d\u0131r.\nimport builtins\ndir(builtins)","447e0b4e":"def exc():\n    \"\"\" Dolar de\u011ferini TL cinsinden d\u00f6nd\u00fcr\u00fcr\"\"\"\n    a = 9.16 # 14 Oct 2021 dolar kuru\n    def price():\n        \"\"\" G\u00fcn\u00fcn y\u00fcksek de\u011ferinin en k\u00fc\u00e7\u00fc\u011f\u00fc ile \n        g\u00fcn\u00fcn d\u00fc\u015f\u00fck de\u011ferinin en k\u00fc\u00e7\u00fc\u011f\u00fcn\u00fcn fark\u0131n\u0131 bulur\"\"\"\n        x = df[\"High\"].min()\n        y = df[\"Low\"].min()\n        z = x - y\n        return z\n    return price()*a\n\nprint(exc())","f1a2ea43":"# Default Arguments\ndef exchange(a,b=9.16): # b is default arguments\n    c = a*b\n    return c\n\nprint(exchange(15))","c1056273":"# Flexible Arguments\ndef excMulti(*args):\n    t = 9.16\n    for i in args:\n        print(i*t)\n\nexcMulti(3)\nexcMulti(5,7,11,37)\n\ndef dolarKur(**kwargs):\n    \"\"\" s\u00f6zl\u00fc\u011f\u00fcn itemlerini bast\u0131r\u0131yoruz \"\"\"\n    for key, value in kwargs.items():\n        print(key, \" \", value)\n\ndolarKur(country = \"Turkey\", symbol = \"\u20ba\", kur = 9.16)","8b92e6f0":"# Uzun yoldan fonksiyon kullan\u0131m\u0131\ndef avarageHigh():\n    x = (df[\"High\"].max() + df[\"High\"].min()) \/ 2\n    return x\nprint(avarageHigh())\n# Lambda Function\navHigh = lambda x,y: (x+y)\/2 \nprint(avHigh(df[\"High\"].max(),df[\"High\"].min()))","96b1d2c7":"high_list = df[\"High\"].iloc[:].sample(5)\ny = map(lambda x: x**2, high_list)\nprint(list(y))","b6b5db0e":"# ger\u00e7ek projede bunu nerde kullanabilece\u011fiz merak ettim \ncountry = \"jamaika\"\nit = iter(country)\nprint(it)\nprint(next(it))\nprint(*it)","372ccd31":"list1 = df[\"High\"].iloc[:4]\nlist2 = df[\"High\"].iloc[:-5:-1]\nz = zip(list1,list2)\nprint(z)\nz_list=list(z)\nprint(z_list)","ed67987b":"un_zip = zip(*z_list)\nun_list1,un_list2 = list(un_zip) \nprint(un_list1)\nprint(un_list2)\nprint(type(un_list2)) ","4249c079":"# List Comprehension i\u00e7in bir \u00f6rnek\nnum1 = df[\"High\"].iloc[:4]\nnum2 = [i+(i\/2) for i in num1]\nprint(num2)","636742c1":"num3 = [i\/2 if i > 4 else i*2 if i < 4 else i+2 for i in num1]\nprint(num3)","0bc49d45":"threshold = sum(df.High)\/len(df.High)\nprint(\"threshold: \", threshold)\ndf[\"Price_level\"] = [\"Good\" if i > threshold else \"Bad\" for i in df.High]\ndf.loc[:,[\"Price_level\",\"High\"]]","3797f741":"# User Defined Function","6b9048c4":"# Default and Flexible Arguments","3f51ff63":"# Lambda Function","43542676":"# Scope","9d3c120b":"# Nested Function","2c453588":"# Iterators","847de72b":"# Zip()","c5813ff9":"# Anonymous Function","212d29f4":"# List Comprehension"}}