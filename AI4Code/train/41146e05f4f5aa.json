{"cell_type":{"a9c68321":"code","ffcbccf9":"code","b8858f2d":"code","b65c2e01":"code","80445560":"code","f0d3234e":"code","ef72dbdb":"code","68e0516d":"code","b2ac2a8a":"code","4ff5c6ff":"code","0db251c1":"code","0cb10100":"code","48edf51d":"code","572105b9":"code","8d19521e":"code","0ccb07aa":"code","78207d7e":"code","e6af9b7a":"code","63f1185a":"markdown","0c912d8e":"markdown","871614a1":"markdown"},"source":{"a9c68321":"# Importando bibliotecas\n\nimport requests # Para fazer requisi\u00e7\u00f5es\nfrom bs4 import BeautifulSoup # Para trabalhar com dados vindos de paginas web","ffcbccf9":"url = \"http:\/\/books.toscrape.com\/index.html\"\nresponse = requests.get(url)\nhtml = response.content\nscraped = BeautifulSoup(html, 'html.parser')","b8858f2d":"# Cada livro est\u00e1 num article com class product_pod\n# assim selecionamos todos os articles para iterar por essa lista\nbooks = scraped.find_all(class_='product_pod')\n\ntitles = [] # Lista que receber\u00e1 os t\u00edtulos de cada livro\nprices = [] # Lista que recebera os pre\u00e7os de cada livro\n\nlist = {'Books': titles, 'Prices (\u00a3)': prices} # Lista que ser\u00e1 usada para criar o dataframe do pandas\n\nfor item in books:\n    title = item.h3.a['title'] # O T\u00edtulo est\u00e1 no atributo Title do <a> dentro do <h3> que est\u00e1 dentro do <article>\n    \n    # O pre\u00e7o est\u00e1 numa classe 'price_color' dentro de outra classe 'product_price'\n    # O lstrip retira da esquerda o simbolo de Libra '\u00a3' e o float salva nosso dado como float\n    price = float(item.find(class_='product_price').find(class_='price_color').text.lstrip('\u00a3'))\n    \n    titles.append(title) # O t\u00edtulo \u00e9 adicionado \u00e0 lista de T\u00edtulos\n    prices.append(price) # O Pre\u00e7o, j\u00e1 como float, \u00e9 adicionado \u00e0 lista de Pre\u00e7os\n    #print(title)\n\nprint(list)","b65c2e01":"# Importa o pandas como pd\nimport pandas as pd\ndf = pd.DataFrame(list) # Cria um dataframe com nossa listade livros e pre\u00e7os\ndf","80445560":"df.describe() # Descreve as colunas que contem numeros, nesse caso, apenas a coluna Prices contem numeros","f0d3234e":"df.info() # Mostra informa\u00e7\u00f5es do dataframe e os tipos dos dados de cada coluna e quantas entradas que n\u00e3o s\u00e3o null","ef72dbdb":"df.shape # Mostra quantas linhas e colunas tem o dataframe","68e0516d":"df.Books # Mostra a coluna Books do dataframe","b2ac2a8a":"df['Prices (\u00a3)'] # Outra forma de chamar uma coluna \u00e9 entre colchetes e aspas: ['Coluna']","4ff5c6ff":"df.iloc[:,1] \n# Localiza no dataframe pelo indice, sendo o primeiro valor antes da virgula para as linhas\n# O valor apos a virgula \u00e9 para o indice da coluna\n# o : seleciona todas as linhas\n# o 1 seleciona a segunda coluna (Lembre-se que o indice come\u00e7a por 0)","0db251c1":"df.iloc[:, 0]\n# Aqui seleciona todas as linhas, mas a primeira coluna","0cb10100":"df.loc[:, 'Books']\n# Outra forma de selecionar todas as linhas da coluna de nome 'Books'\n# o .loc seleciona pelo indice da linha, mas pela label = nome da coluna","48edf51d":"df.loc[:, 'Prices (\u00a3)']\n# aqui seleciona todas as linhas da coluna Prices","572105b9":"df.nlargest(5, 'Prices (\u00a3)')\n# Comando muito utilizado para retornar os maiores valores, \n# nesse caso, selecionei os 5 registros com maiores pre\u00e7os, note que em ordem do maior para o menor","8d19521e":"df.nsmallest(5, 'Prices (\u00a3)')\n# Esse comando retorna os 5 menores pre\u00e7os, note que em ordem do menor para o maior","0ccb07aa":"df.Books.value_counts()\n# Comando para contagem de valores \u00fanicos, como n\u00e3o temos Livros duplicados, todos t\u00eam apenas 1 registro","78207d7e":"df.tail()","e6af9b7a":"df.sort_values('Prices (\u00a3)', ascending=False)","63f1185a":"Now let's set the URL for the page we're scraping, make a request to get the HTML and parse it. ","0c912d8e":"First, let's import the libraries we'll need","871614a1":"# Let's livecode!"}}