{"cell_type":{"1e3b41cb":"code","540d1624":"code","664459f1":"code","fa913434":"code","5834b477":"code","b37730c4":"code","521cae8d":"code","8737c7bb":"code","456054f2":"code","0bee3778":"code","baa486f8":"code","31b40541":"markdown","14e12efb":"markdown","f63ea1d3":"markdown","7fd8d5fc":"markdown","e30c8f61":"markdown","a0174329":"markdown"},"source":{"1e3b41cb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","540d1624":"filename = \"..\/input\/pima-indians-diabetes-database\/diabetes.csv\"\n\ndata = pd.read_csv(filename)","664459f1":"sns.set_style('dark')\n\nsns.distplot(data['Outcome'])","fa913434":"frac = 0.1 #fraction of data that will be reserved for final test data.\ntest_rows = int(len(data)*frac)\ntrain_data = data[:-test_rows]\ntest_data = data[-test_rows:]\n\n#We'll hold on to the test data until later. Time to work with the training data.\n","5834b477":"train_data.describe() #take a look at all those missing values.","b37730c4":"#Separate features form target\n\ny = train_data.Outcome\n\nX = train_data.drop('Outcome',axis = 1)\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_val, y_train, y_val = train_test_split(X,y,test_size = 0.2,random_state=1)","521cae8d":"from sklearn.impute import SimpleImputer\nfrom sklearn.compose import ColumnTransformer\nimputer = SimpleImputer(missing_values=0.0,strategy='mean')\n\nimp_X_train = pd.DataFrame(imputer.fit_transform(X_train))\nimp_X_val = pd.DataFrame(imputer.fit_transform(X_val))\n\nimp_X_train.columns = X_train.columns\nimp_X_val.columns = X_val.columns\n\nimp_X_train.head(15) #All missing values have been imputed.","8737c7bb":"from sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import cross_val_score\n\nfor model in [SVC(),RandomForestClassifier(),KNeighborsClassifier(),LogisticRegression()]:\n    cvs = cross_val_score(model,X,y,cv=5)\n    print(cvs.mean())\n\n#LogisticRegression performed the best, so we will select that as our model. ","456054f2":"model = LogisticRegression()\n\nmodel.fit(imp_X_train,y_train)\ny_preds = model.predict(imp_X_val)\n\nfrom sklearn.metrics import accuracy_score\naccuracy_score(y_val,y_preds)","0bee3778":"#We now optimize hyperparameters\nfrom sklearn.model_selection import GridSearchCV\n\nparams = {'penalty':['l1','l2','elasticnet','none']}\n\nmodel_cv = GridSearchCV(model,params,cv=5, scoring = 'accuracy')\nmodel_cv.fit(X,y)\n\nprint(model_cv.best_params_)\nprint(model_cv.best_score_)","baa486f8":"model_complete = LogisticRegression(penalty='none')\n\nimp_X = pd.DataFrame(imputer.fit_transform(X))\nimp_X.columns = X.columns\n\ny1 = test_data.Outcome\n\nX2 = test_data.drop('Outcome',axis = 1)\n\nmodel_complete.fit(imp_X,y)\ny_pred_fin = model_complete.predict(X2)\n\naccuracy_score(y1,y_pred_fin)","31b40541":"BASIC VISUALIZATION\n\nYou can see here the distribution of outcomes--whether the individual got diabetes or not. ","14e12efb":"**MODELING**\n\nPick best model, then optimize hyperparameters.","f63ea1d3":"**THIS IS MY FIRST PROJECT. JUST TRYING TO GET THE HANG OF THINGS.**","7fd8d5fc":"Looks like LogisticRegression(penalty='none') is our best bet.","e30c8f61":"INTO THE WORK\n\nSplit the data.","a0174329":"**77.6% accuracy.**"}}