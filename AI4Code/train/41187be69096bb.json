{"cell_type":{"cfe4a6c6":"code","fd636dd0":"code","07c6423f":"code","b28ae7b5":"code","89a294d8":"code","48baa641":"code","86095219":"code","fcaee0ac":"code","bf3768f8":"code","1fe5efb3":"code","e5068007":"code","c2c05a23":"code","36f370d7":"code","4dcf72fc":"code","806337f3":"code","c1d615f0":"code","4b0cef37":"code","782eccea":"code","b3552597":"code","f8852e11":"code","dfc7f5ab":"code","99b9645a":"code","119bfc07":"code","f1df1382":"code","15a0c172":"code","adf870b9":"code","21689a59":"code","ffdb3bb4":"code","d8f5c035":"code","5e9328b8":"code","88d9182f":"code","f43ec5d4":"code","97f76813":"code","76eb57c1":"code","3192858b":"code","ce6182e1":"code","95e12782":"code","b6fefbb4":"code","62e51771":"code","5bce75eb":"code","82f74518":"code","bcb69735":"code","33089eff":"code","82436c4a":"code","8efafdf8":"code","d79bf931":"code","38e7dd11":"code","98392eae":"code","837df6d9":"code","a88a9e66":"code","7ba004ca":"code","aca282a3":"code","2b4375ef":"code","45c54060":"code","ddc6c720":"code","4947b726":"code","fc04831d":"code","8d7d2ceb":"markdown","9a00bcbe":"markdown","bb185992":"markdown","30d8092a":"markdown","f1eb75ad":"markdown","9831584a":"markdown","e9ed38fd":"markdown","a18ad690":"markdown","93948b94":"markdown","c4a100c7":"markdown","c7732005":"markdown","25a47c64":"markdown","3c0106f8":"markdown","fd65dde8":"markdown","76bad79e":"markdown","5aead24f":"markdown","b073286e":"markdown","17bb3601":"markdown","d25c8ac4":"markdown","78d8463c":"markdown"},"source":{"cfe4a6c6":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport re\n\nfrom sklearn.model_selection import train_test_split, ShuffleSplit, cross_val_score, GridSearchCV\nfrom sklearn.linear_model import LinearRegression, Lasso\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor","fd636dd0":"dataset = pd.read_csv(\"..\/input\/bangalore-housing-prices\/BHP.csv\")\ndataset.shape","07c6423f":"dataset.isnull().sum()","b28ae7b5":"df0 = dataset.drop([\"area_type\", \"availability\", \"society\", \"balcony\"], axis = 1)\ndf0.isnull().sum()","89a294d8":"df0.dtypes","48baa641":"df1 = df0.dropna()\ndf1.isnull().sum()","86095219":"df0.shape","fcaee0ac":"df1.head()","bf3768f8":"df1[\"size\"].unique()","1fe5efb3":"df1[\"bhk\"] = df1[\"size\"].apply(lambda x : int(x.split()[0]))","e5068007":"df1[\"bhk\"].unique()","c2c05a23":"df1 = df1.drop(\"size\", axis = 1)","36f370d7":"df1.head()","4dcf72fc":"def sqftFix(x):\n    tokens = x.split(\" - \")\n    res = 0\n    if len(tokens) > 1:\n        res = (float(tokens[0]) + float(tokens[1]))\/2\n        return res\n    else:\n        try:\n            res = float(x)\n        except:\n            temp = re.search(\"[0-9][A-Z]\", tokens[0])\n            if (tokens[0][temp.start() + 1:] == \"Sq. Meter\"):\n                res = 10.764 * float(tokens[0][:temp.start() + 1])\n            elif (tokens[0][temp.start() + 1:] == \"Perch\"):\n                res = 368.007 * float(tokens[0][:temp.start() + 1])\n            elif (tokens[0][temp.start() + 1:] == \"Sq. Yards\"):\n                res = 9 * float(tokens[0][:temp.start() + 1])\n            elif (tokens[0][temp.start() + 1:] == \"Acres\"):\n                res = 43560 * float(tokens[0][:temp.start() + 1])\n            elif (tokens[0][temp.start() + 1:] == \"Guntha\"):\n                res = 1089 * float(tokens[0][:temp.start() + 1])\n            elif (tokens[0][temp.start() + 1:] == \"Grounds\"):\n                res = 2400.35 * float(tokens[0][:temp.start() + 1])\n    return res","806337f3":"df1[\"total_sqft\"].unique()","c1d615f0":"df1[\"total_sqft\"] = df1[\"total_sqft\"].apply(sqftFix)","4b0cef37":"df1.dtypes","782eccea":"df1.shape","b3552597":"df2 = df1.copy()\ndf2.head()","f8852e11":"df2[\"price_per_sqft\"] = (df2[\"price\"] * 100000) \/ df2[\"total_sqft\"]","dfc7f5ab":"df2.head(10)","99b9645a":"len(df2[\"location\"].unique())","119bfc07":"df2[\"location\"] = df2[\"location\"].apply(lambda x : x.strip())","f1df1382":"locationStats = df2.groupby(\"location\")[\"location\"].agg('count').sort_values(ascending = False)\nprint(type(locationStats))\nlocationStats","15a0c172":"otherLocation = locationStats[locationStats < 10]\notherLocation","adf870b9":"df2[\"location\"] = df2[\"location\"].apply(lambda x : \"Other\" if x in otherLocation else x)","21689a59":"df2.head(20)","ffdb3bb4":"len(df2[\"location\"].unique())","d8f5c035":"df2[df2[\"total_sqft\"]\/df2[\"bhk\"] < 300]","5e9328b8":"df2.shape","88d9182f":"df3 = df2[~(df2[\"total_sqft\"]\/df2[\"bhk\"] < 300)]","f43ec5d4":"df3.shape","97f76813":"df3[\"price_per_sqft\"].describe()","76eb57c1":"df3.head()","3192858b":"def removePPSQFTOutlier(dataframe):\n    resDF = pd.DataFrame()\n    for i, df in dataframe.groupby(\"location\"):\n        minQuantile, maxQuantile = df.price_per_sqft.quantile([0.01, 0.99])\n        df = df[(df.price_per_sqft > minQuantile) & (df.price_per_sqft < maxQuantile)]\n        m = np.mean(df.price_per_sqft)\n        sd = np.std(df.price_per_sqft)\n        tempDF = df[(df.price_per_sqft > (m - 2*sd)) & (df.price_per_sqft <= (m + 2*sd))]\n        resDF = pd.concat([resDF, tempDF], ignore_index = True)\n    return resDF","ce6182e1":"df4 = removePPSQFTOutlier(df3)\ndf4.shape","95e12782":"def removeBHKOutliers(df):\n    exclude_indices = np.array([])\n    for location, location_df in df.groupby('location'):\n        bhk_stats = {}\n        for bhk, bhk_df in location_df.groupby('bhk'):\n            bhk_stats[bhk] = {\n                'mean': np.mean(bhk_df.price_per_sqft),\n                'std': np.std(bhk_df.price_per_sqft),\n                'count': bhk_df.shape[0]\n            }\n        for bhk, bhk_df in location_df.groupby('bhk'):\n            stats = bhk_stats.get(bhk-1)\n            if stats and stats['count']>5:\n                exclude_indices = np.append(exclude_indices, bhk_df[bhk_df.price_per_sqft < (stats['mean'])].index.values)\n    return df.drop(exclude_indices, axis='index')","b6fefbb4":"df5 = removeBHKOutliers(df4)\ndf5.shape","62e51771":"df6 = df5[df5.bath < df5.bhk + 2]\ndf6.shape","5bce75eb":"df6.head()","82f74518":"df7 = df6.drop([\"price_per_sqft\"], axis = 1)","bcb69735":"dummyLocations = pd.get_dummies(df7[\"location\"])\ndummyLocations.head()","33089eff":"df8 = pd.concat([df7, dummyLocations.drop('Other', axis = 1)], axis = 1)\ndf8 = df8.drop(\"location\", axis = 1)\ndf8.head()","82436c4a":"df8.dtypes","8efafdf8":"df8[\"bath\"] = df8.bath.apply(lambda x : int(x))","d79bf931":"df8.dtypes","38e7dd11":"pd.DataFrame.to_csv(df8, \"data\\Cleaned.csv\")","98392eae":"xVals = df8.drop(\"price\", axis = 1)\nyVals = df8[\"price\"]","837df6d9":"xVals.head()","a88a9e66":"yVals.head()","7ba004ca":"xTrain, xTest, yTrain, yTest = train_test_split(xVals, yVals, test_size = 0.2, random_state = 10)","aca282a3":"print(\"xTrain: \", xTrain.shape)\nprint(\"yTrain: \", yTrain.shape)\nprint(\"xTest: \", xTest.shape)\nprint(\"yTest: \", yTest.shape)","2b4375ef":"model1 = LinearRegression()\nmodel1.fit(xTrain, yTrain)\nmodel1.score(xTest, yTest)","45c54060":"cv = ShuffleSplit(n_splits = 5, test_size = 0.2)","ddc6c720":"cross_val_score(LinearRegression(), xVals, yVals, cv = cv)","4947b726":"def gridSearchEvaluation(X,y):\n    algos = {\n        'linear_regression' : {\n            'model': LinearRegression(),\n            'params': {\n                'normalize': [True, False]\n            }\n        },\n        'lasso': {\n            'model': Lasso(),\n            'params': {\n                'alpha': [1,2],\n                'selection': ['random', 'cyclic']\n            }\n        },\n        'decision_tree': {\n            'model': DecisionTreeRegressor(),\n            'params': {\n                'criterion' : ['mse','friedman_mse'],\n                'splitter': ['best','random']\n            }\n        },\n        'random_forest': {\n            'model': RandomForestRegressor(),\n            'params': {\n                'n_estimators': [100, 150, 200],\n            }\n        }\n    }\n    scores = []\n    cv = ShuffleSplit(n_splits = 5, test_size = 0.2)\n    for algo_name, config in algos.items():\n        gs =  GridSearchCV(config['model'], config['params'], cv = cv, return_train_score = False)\n        gs.fit(X,y)\n        scores.append({\n            'model': algo_name,\n            'best_score': gs.best_score_,\n            'best_params': gs.best_params_\n        })\n        print(\"Evaluated: {}\".format(algo_name))\n    return pd.DataFrame(scores,columns=['model','best_score','best_params'])","fc04831d":"gridSearchEvaluation(xVals, yVals)","8d7d2ceb":"## Add \"price_per_sqft\"","9a00bcbe":"## A BHK should have a minimum value of 300. Anything less is an outlier. This information is obtained using external knowledge.","bb185992":"### Isolate BHK Values from the \"size\" Column","30d8092a":"## Fix \"location\" Column \/ Dimensionality Reduction","f1eb75ad":"# Read Data","9831584a":"### Convert All the Different Units into Square Feet","e9ed38fd":"### Make locations that have 10 houses as \"Others\" in order to reduce the dimensions of the location column while creating dummies","a18ad690":"## In some cases is is observed that for a particular location, houses with lesser BHK costed more than houses with higher BHK values. This is obviously an error. So such entries are also to be removed.","93948b94":"# Clean Data","c4a100c7":"## Analyze Data","c7732005":"## Remove the entries which have a \"price_per_sqft\" value less than 0.01 percentile and greater than 0.99 percentile. These might be legit values but our goal is to create a generalized model. So even extreme legit values will be treated as outliers.","25a47c64":"## Feature Cleaning","3c0106f8":"## Fix \"total_sqft\" Column","fd65dde8":"# Outlier Removal","76bad79e":"# Model Building","5aead24f":"## Fix \"size\" Column","b073286e":"## Sort x and y data","17bb3601":"### We will drop the temporary features that we created earlier.\n### Dummy variables are also created. Remember to remove a particular column from the dummies to avoid the dummy variable trap.","d25c8ac4":"# Imports","78d8463c":"### A temporary feature for us to perform data cleaning and outlier detection"}}