{"cell_type":{"5f82b1db":"code","e685ec0f":"code","a3f36ce8":"code","a155d318":"code","98f3fb7f":"code","a5d287da":"code","6da135bf":"code","c891e775":"code","79791137":"code","d3eb9333":"code","83b928df":"code","84ea48df":"code","037b8be1":"code","7c838dcd":"code","a36293cb":"code","2687a860":"code","9a614ed3":"code","aa207cae":"code","db3b0b39":"code","2abe00aa":"code","90954fdc":"code","52b02815":"code","37db5ba8":"code","0f88c701":"code","33de933d":"code","f5b0861e":"code","2cfe0c30":"code","b5844bfc":"code","8745c2ea":"code","05324c44":"code","ce25cabc":"code","ea5702db":"code","50f8a715":"code","06b23a6d":"code","56cf125b":"code","a8e905e2":"code","708ba81a":"code","158ad460":"code","0d141872":"markdown","5d3e4dea":"markdown","5870d31c":"markdown","ec81343e":"markdown","aa2e1090":"markdown","5e6de6b2":"markdown","a35e85bd":"markdown","2ba2cd90":"markdown","5113f9a5":"markdown","8f500127":"markdown","80514b33":"markdown"},"source":{"5f82b1db":"import pandas as pd\nimport numpy as np \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom mlxtend.frequent_patterns import apriori\nfrom mlxtend.frequent_patterns import association_rules\nimport mlxtend as ml","e685ec0f":"basket = pd.read_csv('..\/input\/transactions-from-a-bakery\/BreadBasket_DMS.csv')\nbasket.head(10)","a3f36ce8":"basket.shape","a155d318":"basket.isnull().any()","98f3fb7f":"basket.dtypes","a5d287da":"basket['Item'].unique()","6da135bf":"basket['Date'].value_counts().iloc[:10]","c891e775":"sns.countplot(x = 'Date', data = basket, order = basket['Date'].value_counts().iloc[:10].index)\nplt.xticks(rotation=45)","79791137":"basket['Time'].value_counts()","d3eb9333":"# plt.figure(figsize=(30,20))\nsns.countplot(x = 'Time', data = basket, order = basket['Time'].value_counts().iloc[:25].index)\nplt.xticks(rotation=90)","83b928df":"basket['Item'].value_counts().iloc[:10]","84ea48df":"plt.xticks(rotation=45)\nsns.countplot(x = 'Item', data = basket, order = basket['Item'].value_counts().iloc[:10].index)","037b8be1":"#TEA OR COFFEE?\n\nTC = basket.groupby(\"Date\")[\"Item\"].apply(lambda x: x[x==\"Tea\"].count()).rename(\"Teas sold\").to_frame()\nTC[\"Coffees sold\"] = basket.groupby(\"Date\")[\"Item\"].apply(lambda x: x[x==\"Coffee\"].count())\n\nTC.plot(figsize=(12,5))\nplt.ylim([0,80])\nplt.grid(True)\nplt.legend()\n\nprint(\"Maxiumum numbers of teas sold: \" + str(TC[\"Teas sold\"].max()))\nprint(\"Maxiumum numbers of coffees sold: \" + str(TC[\"Coffees sold\"].max()))","7c838dcd":"month_year=basket.copy()  \nmonth_year['Date']=pd.to_datetime(month_year['Date'])\nmonth_year['Month'],month_year['Year']=month_year['Date'].dt.month,month_year['Date'].dt.year\n\ngrp_month_year=month_year.groupby(['Month','Year'])['Transaction'].count().reset_index()\ngrp_month_year['Period'] = grp_month_year.Month.astype(str).str.cat(grp_month_year.Year.astype(str), sep=' \/ ')\n\n#plot graph for each month of the year 2016,2017\nfig,axis=plt.subplots(figsize=(5,4))\naxis=sns.barplot(data=grp_month_year,x='Period',y='Transaction',color = (\"#FC4E07\"))\naxis.set_xlabel('Month & Year')\naxis.set_ylabel('Nombre of Transarctions')\naxis.set_xticklabels(grp_month_year['Period'], rotation=60)","a36293cb":"# number of transactions per day\nbasket[\"Date\"] = pd.to_datetime(basket[\"Date\"])\nbasket[\"Weekday\"] = basket[\"Date\"].dt.weekday_name\nbasket['Weekday'].value_counts()","2687a860":"# plot of items sold per day\nproducts_days = basket[\"Date\"].value_counts().sort_index().rename(\"Products sold\")\n\nmean = round(products_days.mean(),0)\nmaximum_day = products_days.index[products_days==products_days.max()][0]\n\nax = products_days.plot(figsize=(12,5), x_compat=True)\n\ntext1 = '$\\mu=$' + str(mean)[:-2]\n# x1 = mdates.date2num(pd.Timestamp(\"2016\/10\/31\"))\n# x2 = mdates.date2num(maximum_day)\n# ax.text(x1-5, mean+5, text1, fontsize=15)\n# ax.text(x2+1, 300, str(maximum_day)[:-8], fontsize=10)\nplt.grid(True)\nplt.title(\"Number of products sold every day\")\nplt.axhline(mean, c=\"k\", linestyle='--')\nplt.tight_layout()","9a614ed3":"# items sold per weekday\nfig, ax = plt.subplots()\ndays = ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday', 'Sunday']\nproducts_weekdays = basket[\"Weekday\"].value_counts().rename(\"Products sold\").reindex(days)\nproducts_weekdays.plot(kind='bar', figsize=(8,7), ax=ax, color=(\"#00b3b0\"))\nplt.xticks(rotation=0)\nfor i, v in enumerate(products_weekdays.values):\n    ax.text(i, v+80, str(v), color=\"#000d1a\", fontweight='bold', fontsize=14, ha='center')\n","aa207cae":"#part of the day groupby\npart_of_day=basket.copy()\npart_of_day['timestamp'] = part_of_day.Date.astype(str).str.cat(part_of_day.Time.astype(str), sep=' ')\npart_of_day['timestamp']=pd.to_datetime(part_of_day['timestamp'])\n\npart_of_day['hour'] = part_of_day['timestamp'].dt.round('H').dt.hour\npart_of_day.drop(['Time','Date'],axis=1,inplace=True)","db3b0b39":"#Coffee hours\ncof_hours=part_of_day[(part_of_day['Item']== 'Coffee')]\ncof_hours=cof_hours.groupby('hour')['Item'].count()\ncof_hours=cof_hours.reset_index()\ncof_hours","2abe00aa":"fig,ax=plt.subplots(figsize=(8,5))\nax=sns.barplot(data=cof_hours,x='hour',y='Item')\nax.set_xlabel('Hours Of The Day')\nax.set_ylabel('Nombre of Times Coffee is Sold')","90954fdc":"#Bread hours\nbread_hours=part_of_day[part_of_day['Item']=='Bread']\nbread_hours=bread_hours.groupby('hour')['Item'].count()\nbread_hours=bread_hours.reset_index()\n\nfig,ax=plt.subplots(figsize=(8,5))\nax=sns.barplot(data=bread_hours,x='hour',y='Item')\nax.set_xlabel('Hours Of The Day')\nax.set_ylabel('Nombre of Times Bread is Sold')","52b02815":"#Cake or Pastry hours\ncake_hours=part_of_day.loc[(part_of_day['Item']=='Cake') | (part_of_day['Item']=='Pastry')]\ncake_hours=cake_hours.groupby('hour')['Item'].count()\ncake_hours=cake_hours.reset_index()\n\nfig,ax=plt.subplots(figsize=(8,5))\nax=sns.barplot(data=cake_hours,x='hour',y='Item')\nax.set_xlabel('Hours Of The Day')\nax.set_ylabel('Nombre of Times Cake and pastry is Sold')","37db5ba8":"#Cake hours\ncake_hours=part_of_day.loc[(part_of_day['Item']=='Cake')]\ncake_hours=cake_hours.groupby('hour')['Item'].count()\ncake_hours=cake_hours.reset_index()\n\nfig,ax=plt.subplots(figsize=(8,5))\nax=sns.barplot(data=cake_hours,x='hour',y='Item')\nax.set_xlabel('Hours Of The Day')\nax.set_ylabel('Nombre of Times Cake is Sold')","0f88c701":"#Tea hours\ntea_hours=part_of_day.loc[(part_of_day['Item']=='Tea')]\ntea_hours=tea_hours.groupby('hour')['Item'].count()\ntea_hours=tea_hours.reset_index()\n\nfig,ax=plt.subplots(figsize=(8,5))\nax=sns.barplot(data=tea_hours,x='hour',y='Item')\nax.set_xlabel('Hours Of The Day')\nax.set_ylabel('Nombre of Times Tea is Sold')","33de933d":"df = basket.groupby(['Transaction','Item']).size().reset_index(name='count')\nbasket0 = (df.groupby(['Transaction', 'Item'])['count']\n          .sum().unstack().reset_index().fillna(0)\n          .set_index('Transaction'))\n#The encoding function\ndef encode_units(x):\n    if x <= 0:\n        return 0\n    if x >= 1:\n        return 1\nbasket_sets = basket0.applymap(encode_units)","f5b0861e":"basket_sets.head()","2cfe0c30":"basket_sets.corr() ","b5844bfc":"# correlation of Churn with other variables\nbasket_sets.corr()['Coffee'].sort_values(ascending = False).plot(kind='bar', figsize=(20,5), color=(\"#4951ad\"))","8745c2ea":"basket_sets.corr()['Coffee'].sort_values(ascending = False)","05324c44":"basket_sets.corr()['Tea'].sort_values(ascending = False).plot(kind='bar', figsize=(20,5), color=(\"#7fc94d\"))","ce25cabc":"basket_sets.corr()['Tea'].sort_values(ascending = False)","ea5702db":"frequent_itemsets = apriori(basket_sets, min_support=0.01, use_colnames=True)\nrules = association_rules(frequent_itemsets, metric=\"lift\")\nrules.sort_values('confidence', ascending = False, inplace = True)\nprint(rules.shape)\nrules.head(5)","50f8a715":"# Visualizing the rules distribution color mapped by Lift\nplt.figure(figsize=(10, 6))\nplt.scatter(rules['support'], rules['confidence'], c=rules['lift'], alpha=0.9, cmap='BuPu');\nplt.title('Rules distribution color mapped by lift');\nplt.xlabel('Support')\nplt.ylabel('Confidence')\nplt.colorbar();","06b23a6d":"# Set the metric \"lift\" with a minimum threshold = 1.2\n\nfrequent_itemsets = apriori(basket_sets, min_support=0.01, use_colnames=True)\nrules2 = association_rules(frequent_itemsets, metric=\"lift\",  min_threshold=1.2)\nrules2.sort_values('confidence', ascending = False, inplace = True)\nprint(rules2.shape)\nrules2","56cf125b":"# Visualizing the rules distribution color mapped by Lift\nplt.figure(figsize=(10, 6))\nplt.scatter(rules2['support'], rules2['confidence'], c=rules2['lift'], alpha=0.9, cmap='BuPu');\nplt.title('Rules distribution color mapped by lift');\nplt.xlabel('Support')\nplt.ylabel('Confidence')\nplt.colorbar();","a8e905e2":"rules[\"antecedent_len\"] = rules[\"antecedents\"].apply(lambda x: len(x))\nprint(rules.shape)\nrules.head(10)","708ba81a":"rules[rules['antecedent_len'] >=2 ]","158ad460":"# find rules with some conditions :\nrules[(rules['antecedent_len'] >= 2) &\n      (rules['confidence'] >= 0.1)& \n      (rules['lift'] >= 1.2) ]","0d141872":"![title](https:\/\/hw-media.herworld.com\/public\/coffee_vs_tea_health_benefits_singapore_-1.jpg)\n\nI was wondering, what the consumer buy before puting coffee in his basket? what if he's a tea person ? is it sugar ? how to analyse or anticipate cross selling or up selling when someone buy coffee or tea ? \nfor information : <br>\n![](https:\/\/storage.googleapis.com\/website-production\/uploads\/2018\/11\/cross-selling-vs-upselling.png)\n\nSo in this kernel i use data about sales from a bakery. <br>\nTo found an answers to my question, at first, i\u2019ll be doing a little exploratory data analysis (EDA) followed by a Market Basket Analysis (MBA).\n\n[1. Introduction : ](#Intro) <br>\n[2. Exploration :](#Exp) <br>\n[3. Sales over timer :](#Sale) <br>\n[4. Market Basket Analysis :](#MBA) <br>\n[5. Conclusion :](#Conc) <br>\n[6. References :](#Book) <br>","5d3e4dea":"### 5 *Conclusion* : <a id=\"Conc\"><\/a>\nThe Top Products : Coffee, Bread, Tea, Cake             \nThe Best time to set a Marketing campaign : Saturday between 11h00-14h00  (*from the output of [Sales over time](#Sale)*) <br>\nThe Best combination :<br>\n\n[1. One Item Antecedente :](#one) <br>\nToast => ** Coffee ** <br>\n- The lift of an association rule \u201cif Toast then Coffee\u201d is 1.48 <br>\n- The confidence is 70%. <br>\n\nSpanish Brunch => ** Coffee ** <br>\n- The lift of an association rule \u201cif Spanish Brunch then Coffee\u201d is 1.26 <br>\n- The confidence is 59%. <br>\n\nCake => ** Tea ** <br>\n- The lift of an association rule \"if Cake then  Tea \" is 1.61 \n- The confidence is 22%. <br>\n\n[2. More than One Item Antecedente :](#two) <br>\nCoffee, Bread => Pastry <br>\n- The lift of an association rule \"if Coffee and Bread then  Pastry \" is 1.45 <br> \n- The confidence is 12%. <br>\n\n(*from the output of [Market Basket Analysis](#MBA)*)","5870d31c":"**The MBA (Market Basket Analysis) :**\n> **Market basket analysis scrutinizes the products customers tend to buy together, and uses the information to decide which products should be cross-sold or promoted together. [*](#Book)  **\n\nThere are three most popular criteria evaluating the quality or the strength of an association rule: support, confidence and lift.\n\n* ***Support*** is the percentage of transactions containing a particular combination of items relative to the total number of transactions in the data-base.\n\n* ***Confidence*** measures how much the consequent (item) is dependent on the antecedent (item).it is the conditional probability of the consequent given the antecedent, P(B|A). For example, the confidence for the association rule \u201cif bread then ice cream\u201d is 66% since three transactions contain bread (the antecedent) and two among the three transactions also contain ice cream (the consequent). In other words, given that the baskets containing ice cream is selected, there is 66% chance that the same basket also contains ice cream.\n\n      ** Example : ** <br>\n      Tong => Sunglass <br>\n      * Support=20% ; <br>\n      * Confidence=60% ; <br>  \n\n      Above rule says: <br>\n      20% transaction show Sunglass is bought with purchase of a Tong\n      60% of customers who purchase Sunglass is bought with purchase of a Tong\n\n* ***Lift*** (also called improvement or impact) is a measure to overcome the problems with support and confidence. Lift is said to measure the difference \u2014 measured in ratio \u2014 between the confidence of a rule and the expected confidence.\n    - If the rule had a lift of 1,then A and B are independent and no rule can be derived from them.\n    - If the lift is > 1, then A and B are dependent on each other, and the degree of which is given by ift value.\n    - If the lift is < 1, then presence of A will have negative effect on B.\n\n\n**Given a rule \"A -> B\", A stands for antecedent and B stands for consequent. **\n\n** Support A ==> B ** <br>\nSupport(A) = (number of transaction in wich the item A appears) \/ Total number of transactions <br>\nP(BA) ==> Support(AB) = (A and B) \/ Total transactions.\n\n\n** Confidence A ==> B ** <br>\nP(B|A)  ==> Confidence = Support(A and B)\/Support(A)\n\n\n** Lift A ==> B ** <br>\nP(B|A)\/P(B)  ==> Lift = Support (A and B)\/ [Support(B) x Support(A)] <\/b>\n\n\n##### *Each criterion has its advantages and disadvantages but in general we keep association rules that have high confidence, high support, and high lift. Association rules with high support are potentially interesting rules. Similarly, rules with high confidence would be interesting rules. Or you may look for association rules with very high or very low lift.*","ec81343e":"### * More than One antecedent* <a id=\"two\"><\/a>","aa2e1090":"### 3. *Sales over time* :  <a id=\"Sale\"><\/a>","5e6de6b2":"### * One Antecedent* <a id=\"one\"><\/a>","a35e85bd":"### 6. *References :* <a id=\"Book\"><\/a>\n* Database Marketing_ Analyzing and Managing Customers-Springer (2008) Robert C. Blattberg, Byung-Do Kim, Scott A. Neslin - (International Series in Quantitative Marketing) - https:\/\/www.springer.com\/gp\/book\/9780387725789\n\n* Apriori Algorithm: http:\/\/rasbt.github.io\/mlxtend\/user_guide\/frequent_patterns\/apriori\/","2ba2cd90":"### 4. *Market Basket Analysis* : <a id=\"MBA\"><\/a>","5113f9a5":"### 1. *Introduction* :  <a id=\"Intro\"><\/a> ","8f500127":"#### Analysing for the best products : Coffee, Tea, Cake, Toast","80514b33":"### 2. *Exploration* :  <a id=\"Exp\"><\/a>"}}