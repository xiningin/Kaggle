{"cell_type":{"767136e3":"code","5b5c14b4":"code","115fe550":"code","b0180f82":"code","e16bde24":"code","b5cebc6d":"code","2e85d11b":"code","6e7a5392":"code","71b376c4":"code","01ab10bc":"code","a1eefe93":"code","9e4be163":"code","4b5b6736":"code","884c10db":"code","c0aec6e0":"code","3fcae779":"code","329b4bf7":"code","c33c5d3a":"code","1f82878d":"code","2eb81ec8":"markdown","6295852a":"markdown","33d1bc64":"markdown","71923817":"markdown"},"source":{"767136e3":"import warnings\nwarnings.filterwarnings(\"ignore\")\nimport os\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport random\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn import tree\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn import metrics\nfrom sklearn.ensemble import RandomForestClassifier","5b5c14b4":"\n\nseed_value = 44\nos.environ['PYTHONHASHSEED']=str(seed_value)\n\n# Set `python` built-in pseudo-random generator at a fixed value\nrandom.seed(seed_value)\n\n# Set `numpy` pseudo-random generator at a fixed value\nnp.random.seed(seed_value)","115fe550":"data_file =\"..\/input\/predictive-maintenance\/ai4i2020.csv\" \ndata = pd.read_csv(data_file)\ntrain_data,test_data = train_test_split(data, test_size = 0.33, random_state = seed_value)","b0180f82":"train_data.to_csv('train.csv',index=0)\ntest_data.to_csv('test.csv',index=0)","e16bde24":"data.head()","b5cebc6d":"X=train_data.iloc[:,3:8]\nY=train_data.iloc[:,8]\nX_test=test_data.iloc[:,3:8]\nY_test=test_data.iloc[:,8]","2e85d11b":"print(X.shape)\nprint(Y.shape)","6e7a5392":"clf = RandomForestClassifier(max_depth=2, random_state=seed_value)\nclf = clf.fit(X, Y)\nprediction=clf.predict(X_test)\nprint(confusion_matrix(Y_test,prediction))\nprint(\"Random Forest model accuracy(in %):\", metrics.accuracy_score(Y_test, prediction)*100)\nclassification_report(Y_test,prediction)","71b376c4":"sgd = make_pipeline(SGDClassifier(max_iter=1000, tol=1e-3),)\nsgd.fit(X, Y)\npre=sgd.predict(X_test)\nprint(confusion_matrix(Y_test,pre))\nprint(\"SGD model accuracy(in %):\", metrics.accuracy_score(Y_test, pre)*100)\nclassification_report(Y_test,pre)","01ab10bc":"gnb = GaussianNB()\ngnb.fit(X, Y) \ny_pred = gnb.predict(X_test)\nfrom sklearn import metrics\nprint(\"Gaussian Naive Bayes model accuracy(in %):\", metrics.accuracy_score(Y_test, y_pred)*100)\nclassification_report(Y_test,y_pred)","a1eefe93":"data[\"Type\"]=data[\"Type\"].map( {'S':0 , 'M':1, 'L':2} )\ndata['TWF'] = data['TWF'].replace(1, \"TWF\", regex=True)\ndata['TWF'] = data['TWF'].replace(0, \"\", regex=True)\ndata['HDF'] = data['HDF'].replace(1, \"HDF\", regex=True)\ndata['HDF'] = data['HDF'].replace(0, \"\", regex=True)\ndata[\"PWF\"] = data['PWF'].replace(1,\"PWF\",regex=True)\ndata[\"PWF\"] = data['PWF'].replace(0,\"\",regex=True)\ndata[\"OSF\"] = data['OSF'].replace(1,\"OSF\",regex=True)\ndata[\"OSF\"] = data['OSF'].replace(0,\"\",regex=True)\ndata[\"RNF\"] = data['RNF'].replace(1,\"RNF\",regex=True)\ndata[\"RNF\"] = data['RNF'].replace(0,\"\",regex=True)\n'''data.loc[data[\"TWF\"] == 1, [\"TWF\"]] = \"TWF\"\ndata.loc[data[\"HDF\"] == 1, [\"HDF\"]] = \"HDF\"\ndata.loc[data[\"PWF\"] == 1, [\"PWF\"]] = \"PWF\"\ndata.loc[data[\"OSF\"] == 1, [\"OSF\"]] = \"OSF\"\ndata.loc[data[\"RNF\"] == 1, [\"RNF\"]] = \"RNF\"\ndata[\"class\"] = data[\"TWF\"] + data[\"HDF\"]+data[\"PWF\"]+data[\"OSF\"]+data[\"RNF\"]'''\ndata[\"class\"] = data[\"TWF\"] + data[\"HDF\"]+data[\"PWF\"]+data[\"OSF\"]+data[\"RNF\"]\nmulti_class_data= data[data['class'].str.len()> 1]\nmulti_class_data=multi_class_data.drop([\"TWF\",\"HDF\",\"PWF\",\"OSF\",\"RNF\"],axis=1)\n\nmulti_class_data[\"class\"].unique()","9e4be163":"multi_class_data.head()","4b5b6736":"x=multi_class_data.iloc[:200,3:8]\ny=multi_class_data.iloc[:200,9]\nx_test=multi_class_data.iloc[200:,3:8]\ny_test=multi_class_data.iloc[200:,9]\nclf = RandomForestClassifier(max_depth=2, random_state=seed_value)\nclf = clf.fit(x, y)\nprediction=clf.predict(x_test)\nprint(confusion_matrix(y_test,prediction))\nprint(\"Multi-class : Random Forest model accuracy(in %):\", metrics.accuracy_score(y_test, prediction)*100)\nclassification_report(y_test,prediction)\nsgd = make_pipeline(SGDClassifier(max_iter=1000, tol=1e-3),)\nsgd.fit(x, y)\npre=sgd.predict(x_test)\nprint(\"Multi-class : SGD model accuracy(in %):\", metrics.accuracy_score(y_test, pre)*100)\nclassification_report(y_test,pre)\ngnb = GaussianNB()\ngnb.fit(x, y) \ny_pred = gnb.predict(x_test)\nfrom sklearn import metrics\nprint(\"Multi-class : Gaussian Naive Bayes model accuracy(in %):\", metrics.accuracy_score(y_test, y_pred)*100)\nclassification_report(y_test,y_pred)","884c10db":"from sklearn.datasets import make_blobs\nfrom pandas import DataFrame\nx, y = make_blobs(n_samples=200, centers=3, n_features=2,random_state=44)\nclassfication_data = DataFrame(dict(x1=x[:,0], x2=x[:,1], label=y))\nclassfication_data.head()","c0aec6e0":"train_data,test_data = train_test_split(classfication_data, test_size = 0.33, random_state = seed_value)\nx=train_data.iloc[:,:2]\ny=train_data.iloc[:,2]\nx_test=test_data.iloc[:,:2]\ny_test=test_data.iloc[:,2]","3fcae779":"clf = RandomForestClassifier(max_depth=2, random_state=seed_value)\nclf = clf.fit(x, y)\nprediction=clf.predict(x_test)\nprint(confusion_matrix(y_test,prediction))\nprint(\"Multi-class : Random Forest model accuracy(in %):\", metrics.accuracy_score(y_test, prediction)*100)\nclassification_report(y_test,prediction)","329b4bf7":"#data.tail(50)","c33c5d3a":"sgd = make_pipeline(SGDClassifier(max_iter=1000, tol=1e-3),)\nsgd.fit(x, y)\npre=sgd.predict(x_test)\nprint(\"Multi-class : SGD model accuracy(in %):\", metrics.accuracy_score(y_test, pre)*100)\nclassification_report(y_test,pre)","1f82878d":"\ngnb = GaussianNB()\ngnb.fit(x, y) \ny_pred = gnb.predict(x_test)\nfrom sklearn import metrics\nprint(\"Multi-class : Gaussian Naive Bayes model accuracy(in %):\", metrics.accuracy_score(y_test, y_pred)*100)\nclassification_report(y_test,y_pred)","2eb81ec8":"## **Binary Classification** ","6295852a":"## **Multi-classification**\n* Classfiying Machine Failure Type ","33d1bc64":"## **Set-up and importing**","71923817":"## **Initilizing seed and random values**"}}