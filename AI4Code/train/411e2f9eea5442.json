{"cell_type":{"7e7fde8c":"code","02e34675":"code","7cc791cc":"code","63de6090":"code","62224962":"code","b8779cc7":"code","6b06e113":"code","fda230b4":"code","306a8e35":"code","9f20a946":"code","0f0d6baa":"code","17256955":"code","09a2d35b":"code","d023b61c":"code","7a584d43":"code","9fd9eeba":"code","295cce85":"code","3cedf3bd":"code","fcc2a9cc":"code","0e69e962":"code","20a9efb3":"code","77503178":"code","f1e1298b":"code","facfbdb6":"code","a0bf4398":"code","55c15e92":"code","4a0fb9f6":"code","1b027437":"code","496c69f3":"code","a46d5df3":"code","ee33f665":"code","2e2690e4":"code","d5a45c9b":"code","fffd4abf":"code","66890d1d":"code","f7a1aa07":"code","42d8978b":"code","92d22ff3":"code","d5c2be73":"code","c2d2c39d":"code","87928d03":"code","18c15341":"code","8da9d31b":"code","0857c877":"code","baa202e1":"code","162b9afb":"code","cba83aed":"code","aaf2b3b4":"code","2a4a3316":"code","5b0f59b8":"markdown","87816b65":"markdown","69fc3de3":"markdown","ef7027ca":"markdown","d805b269":"markdown","1fda8e34":"markdown","9646db40":"markdown","b151dd42":"markdown","7fc7a7a4":"markdown","c8e0ea5f":"markdown","9717ecd8":"markdown","efb50dae":"markdown","0e07df9d":"markdown","8b80a88b":"markdown","f9decf80":"markdown","39c477b2":"markdown","26952a27":"markdown","9b935499":"markdown","a45da742":"markdown","f973a12b":"markdown","f088aa7d":"markdown","b9cd0700":"markdown","046d1959":"markdown","288a677b":"markdown","2297e37c":"markdown","032df056":"markdown","bad33f0e":"markdown","6d5854dd":"markdown"},"source":{"7e7fde8c":"# \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438\nfrom pandas import Series\nimport pandas as pd\nimport numpy as np\n\nimport pandas_profiling\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom datetime import date\nfrom datetime import datetime, timedelta\n\nfrom sklearn.preprocessing import PolynomialFeatures\n\nfrom sklearn.feature_selection import f_classif, mutual_info_classif\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler, PolynomialFeatures\n\nfrom sklearn.model_selection import GridSearchCV, RandomizedSearchCV\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import GradientBoostingClassifier, RandomForestClassifier\nfrom catboost import CatBoostClassifier\n\nfrom sklearn.metrics import accuracy_score, recall_score, f1_score, mean_absolute_error, mean_squared_error, precision_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import auc, roc_auc_score, roc_curve\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","02e34675":"# \u0417\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c RANDOM_SEED, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b\nRANDOM_SEED = 40","7cc791cc":"# \u0417\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b:\n!pip freeze > requiremnts.txt","63de6090":"DATA_DIR = '\/kaggle\/input\/sf-dst-scoring\/'\ntrain = pd.read_csv(DATA_DIR + 'train.csv')\ntest = pd.read_csv(DATA_DIR + 'test.csv')\nsample_submission = pd.read_csv(DATA_DIR + 'sample_submission.csv')","62224962":"train.info()","b8779cc7":"test.info()","6b06e113":"sample_submission.info()","fda230b4":"# \u0414\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c train \u0438 test \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ntrain['sample'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c train\ntest['sample'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c test\ntest['default'] = 0 # \u0442.\u043a. \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438, \u0442\u043e \u043f\u043e\u043a\u0430\n# \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043d\u0443\u043b\u044f\u043c\u0438\n\ndata = test.append(train, sort=False).reset_index(drop=True)","306a8e35":"data.info()","9f20a946":"data.sample(5)","0f0d6baa":"data.isna().sum(axis=0)","17256955":"data['education'].value_counts(dropna=False)","09a2d35b":"data['education'] = data['education'].fillna(data['education'].value_counts().index[0])","d023b61c":"data['education'].value_counts(dropna=False)","7a584d43":"# \u0414\u043b\u044f \u0431\u043e\u043b\u0435\u0435 \u0443\u0434\u043e\u0431\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u043f\u0438\u0441\u043a\u0438 \u043f\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 (\u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435,\n# \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435, \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435)\n\nbin_cols = ['sex', 'car', 'car_type', 'foreign_passport', 'good_work']\ncat_cols = ['education', 'region_rating', 'home_address', 'work_address', 'app_date', 'sna', 'first_time']\nnum_cols = ['age', 'decline_app_cnt', 'income', 'bki_request_cnt', 'score_bki']","9fd9eeba":"data.app_date","295cce85":"# \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0434\u0430\u0442\u0443 \u0432 \u0434\u0435\u043d\u044c\ndata['app_date'] = pd.to_datetime(data['app_date'])\ndata['app_date'] = data['app_date'].apply(lambda x: x.month)\n\n# \u041f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043c \u0434\u0430\u0442\u0443 \u0432 \u043a\u0430\u0442\u0435\u043e\u0433\u0440\u0438\u044e \"\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435\", \u0442.\u043a. \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u044d\u0442\u043e \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u043c\u043e\u0434\u0435\u043b\u0438\ncat_cols.remove('app_date')\nnum_cols.append('app_date')","3cedf3bd":"data['income'].value_counts(bins=10)","fcc2a9cc":"for col in num_cols:\n    median = data[col].median()\n    IQR = data[col].quantile(0.75) - data[col].quantile(0.25)\n    perc25 = data[col].quantile(0.25)\n    perc75 = data[col].quantile(0.75)\n    \n    print(\"Column: \", col)\n    print(\"\u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445:\", data[col].max())\n    print(\"\u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445:\", data[col].min())\n    print('25%: {},'.format(perc25), '75%: {},'.format(perc75),\n          \"IQR: {}, \".format(IQR), \"Borderline: [{f}, {l}].\".format(f=perc25 - 1.5*IQR, l=perc75 + 1.5*IQR))\n    print()","0e69e962":"data['default'].value_counts().plot.barh()\nprint(len(data[data['default']==0])\/len(data[data['default']==1]))","20a9efb3":"fig, axes = plt.subplots(2, 2, figsize=(10,10))\n\naxes[0,0].hist(data['age'], bins = 50)\naxes[0,0].set_title(\"age\")\n\naxes[0,1].hist(data['decline_app_cnt'], bins = 50, range=(0,10))\naxes[0,1].set_title(\"decline_app_cnt\")\n\naxes[1,0].hist(data['bki_request_cnt'], bins = 50,  range=(0,20))\naxes[1,0].set_title(\"bki_request_cnt\")\n\naxes[1,1].hist(data['income'], bins = 50)\naxes[1,1].set_title(\"income\")","77503178":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c\nsns.set(font_scale = 1)\nfig, axis = plt.subplots(figsize=(7,7))\nsns.heatmap(data[num_cols].corr().abs(), vmin=0, vmax=1, square=True,\n           annot=True, fmt=\".2f\", linewidths=0.1)","f1e1298b":"imp_num = pd.Series(f_classif(data[num_cols], data['default'])[0], index = num_cols)\nimp_num.sort_values(inplace = True)\nimp_num.plot(kind = 'barh', color='green')","facfbdb6":"# \u0414\u043b\u044f \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c LabelEncoder\n\nlabel_encoder = LabelEncoder()\n\nfor column in bin_cols:\n    data[column] = label_encoder.fit_transform(data[column])\n    \ndata['education'] = label_encoder.fit_transform(data['education'])\n# \u0443\u0431\u0435\u0434\u0438\u043c\u0441\u044f \u0432 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0438    \ndata.head()","a0bf4398":"imp_cat = Series(mutual_info_classif(data[bin_cols + cat_cols], data['default'],\n                                     discrete_features =True), index = bin_cols + cat_cols)\nimp_cat.sort_values(inplace = True)\nimp_cat.plot(kind = 'barh', color='green')","55c15e92":"# \u041f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0438 region_rating, first_time \u0438 home_address \u0438\u0437 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0432 \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435,\n# \u0442.\u043a. \u043f\u0440\u0438 \u0438\u0445 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 roc-auc \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u0432\u044b\u0448\u0435, \u0447\u0435\u043c \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u0438\u0437\n# \u043d\u0438\u0445 dummy-\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445\ncat_cols.remove('region_rating')\nnum_cols.append('region_rating')\n\ncat_cols.remove('first_time')\nnum_cols.append('first_time')\n\ncat_cols.remove('home_address')\nnum_cols.append('home_address')","4a0fb9f6":"# \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e get_dummies\ndata = pd.get_dummies(data, columns=cat_cols)","1b027437":"# \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043c \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044e \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445\ndata[num_cols] = pd.DataFrame(StandardScaler().fit_transform(data[num_cols]),\n                              columns=num_cols)","496c69f3":"# \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u043d\u0430 train \u0438 test\ntrain = data.query('sample == 1').drop(['sample'], axis=1)\ntest = data.query('sample == 0').drop(['sample'], axis=1)","a46d5df3":"# \u0443\u0434\u0430\u043b\u0438\u043c \u0434\u043b\u044f X \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0438 client_id\nX = train.drop(columns = ['default', 'client_id'])\nY = train['default']","ee33f665":"# \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u043d\u0430 train \u0438 test\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, random_state = RANDOM_SEED,\n                                                    test_size=0.2)","2e2690e4":"# \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0438\u0438 \u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 \"\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e\"\nmodel = LogisticRegression()\nmodel.fit(X_train, Y_train)\nprobs = model.predict_proba(X_test)\ny_pred = model.predict(X_test)\nprobs = probs[:,1]\n\nfpr, tpr, threshold = roc_curve(Y_test, probs)\nroc_auc = roc_auc_score(Y_test, probs)\n\nfig, ax = plt.subplots(figsize=(10,5))\nplt.plot([0, 1], label='Baseline', linestyle='--')\nplt.plot(fpr, tpr, label = 'Regression')\nax.set_title('Logistic Regression ROC AUC = %0.3f'%roc_auc)\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.legend(loc='lower right')","d5a45c9b":"print('accuracy_score: {}'.format(np.round(accuracy_score(Y_test, y_pred), 4)))\nprint('f1_score: {}'.format(np.round(f1_score(Y_test, y_pred), 4)))\nprint('recall_score: {}'.format(np.round(recall_score(Y_test, y_pred), 4)))\nprint('MSE: {}'.format(np.round(mean_squared_error(Y_test, y_pred), 4)))","fffd4abf":"# \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f confusion matrix:\nsns.set_context(context='paper', font_scale=2, rc=None)\ngroup_names = ['True Pos', 'False Pos', 'False Neg', 'True Neg']\ngroup_counts = ['{0:0.0f}'.format(value) for value in\n                confusion_matrix(Y_test, y_pred).flatten()]\nlabels = [f'{v1}\\n{v2}' for v1, v2 in\n          zip(group_names, group_counts)]\nlabels = np.asarray(labels).reshape(2, 2)\nax = sns.heatmap(confusion_matrix(Y_test, y_pred), annot=labels, fmt='', cmap='Greens')\nax.set(xlabel='predicted', ylabel='real',title = 'Confusion matrix')\nplt.show()","66890d1d":"# \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u043e\u043c\u0435\u043d\u044f\u0442\u044c class_weight \u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e GridSearchCV \u043d\u0430\u0439\u0442\u0438 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\nlr_best = LogisticRegression(class_weight='balanced',\n                            random_state=RANDOM_SEED)\n\nparams = {'C': np.linspace(0, 100, 5),\n         'max_iter': np.linspace(start=1,stop=1000,num=10, dtype=int)}\n\nmodel_best = GridSearchCV(lr_best, param_grid=params, verbose=1, cv=2)\n\nmodel_best.fit(X_train, Y_train)\nprobs = model_best.predict_proba(X_test)\ny_pred = model_best.predict(X_test)\nprobs = probs[:,1]\n\nfpr, tpr, threshold = roc_curve(Y_test, probs)\nroc_auc = roc_auc_score(Y_test, probs)\n\nfig, ax = plt.subplots(figsize=(10,5))\nplt.plot([0, 1], label='Baseline', linestyle='--')\nplt.plot(fpr, tpr, label = 'Regression')\nax.set_title('Logistic Regression ROC AUC = %0.5f'%roc_auc)\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.legend(loc='lower right')","f7a1aa07":"print('accuracy_score: {}'.format(np.round(accuracy_score(Y_test, y_pred), 4)))\nprint('f1_score: {}'.format(np.round(f1_score(Y_test, y_pred), 4)))\nprint('recall_score: {}'.format(np.round(recall_score(Y_test, y_pred), 4)))\nprint('MSE: {}'.format(np.round(mean_squared_error(Y_test, y_pred), 4)))","42d8978b":"# \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f confusion matrix:\nsns.set_context(context='paper', font_scale=2, rc=None)\ngroup_names = ['True Pos', 'False Pos', 'False Neg', 'True Neg']\ngroup_counts = ['{0:0.0f}'.format(value) for value in\n                confusion_matrix(Y_test, y_pred).flatten()]\nlabels = [f'{v1}\\n{v2}' for v1, v2 in\n          zip(group_names, group_counts)]\nlabels = np.asarray(labels).reshape(2, 2)\nax = sns.heatmap(confusion_matrix(Y_test, y_pred), annot=labels, fmt='', cmap='Greens')\nax.set(xlabel='predicted', ylabel='real',title = 'Confusion matrix')\nplt.show()","92d22ff3":"plt.pie(x=train['default'].value_counts(),\n       labels=list(train['default'].value_counts().index),\n       autopct='%6.1f%%',\n       explode=[0, 0.2],\n       shadow=True,\n       textprops={'fontsize': 15})\nplt.title('default')\nplt.show()\n\nprint('\u041a\u043b\u0430\u0441\u0441 0 \u043f\u0440\u0435\u043e\u0431\u043b\u0430\u0434\u0430\u0435\u0442 \u043d\u0430\u0434 \u043a\u043b\u0430\u0441\u0441\u043e\u043c 1 \u0432 {} \u0440\u0430\u0437'.format(\n    round(train['default'].value_counts()[0]\/train['default'].value_counts()[1],1)))","d5c2be73":"# \u0412\u044b\u0431\u0435\u0440\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0438\u0437 train['default']==0 \u0442\u0430\u043a\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a, \u043a\u043e\u0442\u043e\u0440\u043e\u0435\n# \u0440\u0430\u0432\u043d\u044f\u043b\u043e\u0441\u044c \u0431\u044b train['default']==1, \u0438 \u0437\u0430\u0442\u0435\u043c \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c \u0441 train['default']==1.\nunder_train = pd.concat([train[train['default']==0].sample(\n    len(train[train['default']==1]), random_state=RANDOM_SEED), train[train['default']==1]])\n\nX = under_train.drop(columns = ['default', 'client_id'])\nY = under_train['default']\n\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, random_state = RANDOM_SEED,\n                                                    test_size=0.2)","c2d2c39d":"# \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u043e\u043c\u0435\u043d\u044f\u0442\u044c class_weight \u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e GridSearchCV \u043d\u0430\u0439\u0442\u0438 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\nlr_best = LogisticRegression(class_weight='balanced',\n                            random_state=RANDOM_SEED)\n\nparams = {'C': np.linspace(0, 100, 5),\n         'max_iter': np.linspace(start=1,stop=500,num=10, dtype=int)}\n\nmodel_best = GridSearchCV(lr_best, param_grid=params, verbose=1, cv=2)\n\nmodel_best.fit(X_train, Y_train)\nprobs = model_best.predict_proba(X_test)\ny_pred = model_best.predict(X_test)\nprobs = probs[:,1]\n\nfpr, tpr, threshold = roc_curve(Y_test, probs)\nroc_auc = roc_auc_score(Y_test, probs)\n\nfig, ax = plt.subplots(figsize=(10,5))\nplt.plot([0, 1], label='Baseline', linestyle='--')\nplt.plot(fpr, tpr, label = 'Regression')\nax.set_title('Logistic Regression ROC AUC = %0.5f'%roc_auc)\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.legend(loc='lower right')\n\nprint(\"\u041b\u0443\u0447\u0448\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043c\u043e\u0434\u0435\u043b\u0438: \", model_best.best_params_)","87928d03":"print('accuracy_score: {}'.format(np.round(accuracy_score(Y_test, y_pred), 4)))\nprint('f1_score: {}'.format(np.round(f1_score(Y_test, y_pred), 4)))\nprint('recall_score: {}'.format(np.round(recall_score(Y_test, y_pred), 4)))\nprint('MSE: {}'.format(np.round(mean_squared_error(Y_test, y_pred), 4)))","18c15341":"# \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f confusion matrix:\nsns.set_context(context='paper', font_scale=2, rc=None)\ngroup_names = ['True Pos', 'False Pos', 'False Neg', 'True Neg']\ngroup_counts = ['{0:0.0f}'.format(value) for value in\n                confusion_matrix(Y_test, y_pred).flatten()]\nlabels = [f'{v1}\\n{v2}' for v1, v2 in\n          zip(group_names, group_counts)]\nlabels = np.asarray(labels).reshape(2, 2)\nax = sns.heatmap(confusion_matrix(Y_test, y_pred), annot=labels, fmt='', cmap='Greens')\nax.set(xlabel='predicted', ylabel='real',title = 'Confusion matrix')\nplt.show()","8da9d31b":"cat = CatBoostClassifier(n_estimators=1000,\n                         depth=2,\n                         logging_level='Silent')\n\ncat.fit(X_train, Y_train)\nprobs = cat.predict_proba(X_test)\ny_pred = cat.predict(X_test)\nprobs = probs[:,1]\n\nfpr, tpr, threshold = roc_curve(Y_test, probs)\nroc_auc = roc_auc_score(Y_test, probs)\n\nfig, ax = plt.subplots(figsize=(10,5))\nplt.plot([0, 1], label='Baseline', linestyle='--')\nplt.plot(fpr, tpr, label = 'Regression')\nax.set_title('Logistic Regression ROC AUC = %0.5f'%roc_auc)\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.legend(loc='lower right')","0857c877":"print('accuracy_score: {}'.format(np.round(accuracy_score(Y_test, y_pred), 4)))\nprint('f1_score: {}'.format(np.round(f1_score(Y_test, y_pred), 4)))\nprint('recall_score: {}'.format(np.round(recall_score(Y_test, y_pred), 4)))\nprint('MSE: {}'.format(np.round(mean_squared_error(Y_test, y_pred), 4)))","baa202e1":"sns.set_context(context='paper', font_scale=2, rc=None)\ngroup_names = ['True Pos', 'False Pos', 'False Neg', 'True Neg']\ngroup_counts = ['{0:0.0f}'.format(value) for value in\n                confusion_matrix(Y_test, y_pred).flatten()]\nlabels = [f'{v1}\\n{v2}' for v1, v2 in\n          zip(group_names, group_counts)]\nlabels = np.asarray(labels).reshape(2, 2)\nax = sns.heatmap(confusion_matrix(Y_test, y_pred), annot=labels, fmt='', cmap='Greens')\nax.set(xlabel='predicted', ylabel='real',title = 'Confusion matrix')\nplt.show()","162b9afb":"X_test2 = test.drop(columns = ['default', 'client_id'])\ny_probs = cat.predict_proba(X_test2)[:,1]","cba83aed":"test['default'] = y_probs","aaf2b3b4":"submission = test[['client_id','default']]\ndisplay(submission.sample(10))\ndisplay(submission.shape)","2a4a3316":"submission.to_csv('submission.csv', index=False)","5b0f59b8":"\u041c\u043e\u0434\u0435\u043b\u044c \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438 \u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 \"\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e\" \u0438\u043c\u0435\u0435\u0442 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0432\u044b\u0441\u043e\u043a\u0443\u044e \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c, \u043e\u0434\u043d\u0430\u043a\u043e, \u043e\u0446\u0435\u043d\u0438\u0432 \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u043e\u0448\u0438\u0431\u043e\u043a, \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0432\u044b\u0432\u043e\u0434, \u0447\u0442\u043e \u043f\u043e\u0447\u0442\u0438 \u0432\u043e \u0432\u0441\u0435\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445, \u043a\u043e\u0433\u0434\u0430 \u043a\u043b\u0438\u0435\u043d\u0442 \u043d\u0435 \u0441\u043f\u043e\u0441\u043e\u0431\u0435\u043d \u0432\u044b\u043f\u043b\u0430\u0442\u0438\u0442\u044c \u043a\u0440\u0435\u0434\u0438\u0442 - \u043c\u043e\u0434\u0435\u043b\u044c \u0432\u0441\u0435 \u0440\u0430\u0432\u043d\u043e \u0435\u0433\u043e \u0432\u044b\u0434\u0430\u0441\u0442. \u0414\u0430\u043d\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u0442 \u043a \u043f\u0430\u0434\u0435\u043d\u0438\u044e \u0434\u043e\u0445\u043e\u0434\u043e\u0432 \u0431\u0430\u043d\u043a\u0430. \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043d\u0430\u0439\u0442\u0438 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b.","87816b65":"\u0418\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 mutual_info_classif \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0432\u0430\u0436\u043d\u044b\u043c \u0438\u0437 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f sna","69fc3de3":"#### 2.2 \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","ef7027ca":"### 9.\u041c\u043e\u0434\u0435\u043b\u0438\n#### 9.1 \u041b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f","d805b269":"\u0421\u043a\u043e\u0440\u0438\u043d\u0433\u043e\u0432\u044b\u0439 \u0431\u0430\u043b\u043b \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u0438\u0437 \u0411\u041a\u0418 (score_bki) \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0434\u043d\u0438\u043c \u0438\u0437 \u0441\u0430\u043c\u044b\u0445 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0445 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","1fda8e34":"### 4. \u041e\u0446\u0435\u043d\u043a\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438","9646db40":"#### 9.1.1 \u041b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f (\u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b)","b151dd42":"#### 9.1.2 \u041b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f (undersampling)\n\n\u0422\u0430\u043a \u043a\u0430\u043a \u0432 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0435\u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 (\u043e\u0434\u0438\u043d \u043a\u043b\u0430\u0441\u0441 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u0438\u0442 \u0434\u0440\u0443\u0433\u043e\u0439 \u0432 7 \u0440\u0430\u0437 \u043d\u0430 train'\u0435) \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c undersampling, \u0442\u043e \u0435\u0441\u0442\u044c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0443\u043c\u0435\u043d\u044c\u0448\u0438\u0442\u044c \u043f\u0440\u0435\u043e\u0431\u043b\u0430\u0434\u0430\u044e\u0449\u0438\u0439 \u043a\u043b\u0430\u0441\u0441 \u0432 7 \u0440\u0430\u0437","7fc7a7a4":"### 3. \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f","c8e0ea5f":"### 8. \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043a \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u043c\u0443 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044e","9717ecd8":"### 5. \u0417\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","efb50dae":"#### 2.3 \u0412\u044b\u0431\u0440\u043e\u0441\u044b","0e07df9d":"### 1. \u041f\u0435\u0440\u0432\u043e\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445. \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432","8b80a88b":"#### 9.2 CatBoost","f9decf80":"## \u041f\u0440\u043e\u0435\u043a\u0442 4. \u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440 \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u043d\u0435\u0442!","39c477b2":"### 2. \u041f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\n#### 2.1 \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 NaN","26952a27":"\u041a\u0430\u043a \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0432\u0438\u0434\u0435\u0442\u044c, \u043a\u043b\u0438\u0435\u043d\u0442\u044b \u0431\u0435\u0437 \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u043f\u0440\u0435\u043e\u0431\u043b\u0430\u0434\u0430\u044e\u0442 \u043d\u0430\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438 \u0441 \u0434\u0435\u0444\u043e\u043b\u0442\u043e\u043c \u043f\u043e\u0447\u0442\u0438 \u0432 11 \u0440\u0430\u0437.","9b935499":"### 7. Feature Engineering","a45da742":"\u041a\u0430\u043a \u043c\u044b \u0432\u0438\u0434\u0438\u043c \u043f\u043e confusion matrix \u043d\u0430\u0448\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043c\u043d\u043e\u0433\u043e \u0440\u0430\u0437 \u043e\u0448\u0438\u0431\u0430\u0435\u0442\u0441\u044f \u0438 \u043d\u0435 \u0432\u044b\u0434\u0430\u0435\u0442 \u043a\u0440\u0435\u0434\u0438\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0435\u0433\u043e \u0432\u044b\u043f\u043b\u0430\u0442\u044f\u0442 (\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u0441\u0438\u043b\u044c\u043d\u043e \u043f\u043e\u043d\u0438\u0437\u0438\u043b\u0430\u0441\u044c \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e model), \u0447\u0442\u043e \u0432\u0435\u0434\u0435\u0442 \u043a \u0443\u043c\u0435\u043d\u044c\u0448\u0435\u043d\u0438\u044e \u0434\u043e\u0445\u043e\u0434\u043e\u0432 \u0431\u0430\u043d\u043a\u0430. \u041e\u0434\u0430\u043d\u0430\u043a\u043e \u0442\u0435\u043f\u0435\u0440\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0435 \u0432\u044b\u0434\u0430\u0435\u0442 \u043a\u0440\u0435\u0434\u0438\u0442 \u0432\u0441\u0435\u043c \u0432 \u043f\u043e\u0434\u0440\u044f\u0434...","f973a12b":"### **\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043f\u043e\u043b\u0435\u0439**\n\n* client_id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n* education - \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \n* sex - \u043f\u043e\u043b \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430 \n* age - \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\n* car - \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\n* car_type - \u0444\u043b\u0430\u0433 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0438\u043d\u043e\u043c\u0430\u0440\u043a\u0438\n* decline_app_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0448\u043b\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a\n* good_work - \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u201c\u0445\u043e\u0440\u043e\u0448\u0435\u0439\u201d \u0440\u0430\u0431\u043e\u0442\u044b\n* bki_request_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0411\u041a\u0418\n* home_address - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430\n* work_address - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430\n* income - \u0434\u043e\u0445\u043e\u0434 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\n* foreign_passport - \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0437\u0430\u0433\u0440\u0430\u043d\u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430\n* sna - \u0441\u0432\u044f\u0437\u044c \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438 \u0431\u0430\u043d\u043a\u0430\n* first_time - \u0434\u0430\u0432\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0435\n* score_bki - \u0441\u043a\u043e\u0440\u0438\u043d\u0433\u043e\u0432\u044b\u0439 \u0431\u0430\u043b\u043b \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u0438\u0437 \u0411\u041a\u0418\n* region_rating - \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0433\u0438\u043e\u043d\u0430\n* app_date - \u0434\u0430\u0442\u0430 \u043f\u043e\u0434\u0430\u0447\u0438 \u0437\u0430\u044f\u0432\u043a\u0438\n* default - \u0444\u043b\u0430\u0433 \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u043f\u043e \u043a\u0440\u0435\u0434\u0438\u0442\u0443","f088aa7d":"#### **\u0426\u0435\u043b\u044c\u044e** \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u041c\u041e \u0434\u043b\u044f \u0432\u0442\u043e\u0440\u0438\u0447\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0431\u0430\u043d\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u043b\u0430 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430.\n\n#### \u0414\u043b\u044f \u0434\u043e\u0441\u0442\u0438\u0436\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u043e\u0439 \u0446\u0435\u043b\u0438 \u0431\u044b\u043b\u0438 \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u044b \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 **\u0437\u0430\u0434\u0430\u0447\u0438**:\n1. \u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435, \u043f\u0440\u043e\u0432\u0435\u0441\u0442\u0438 \u0438\u0445 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0438 \u0430\u043d\u0430\u043b\u0438\u0437\n2. \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043f\u0443\u0441\u0442\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0443\u0441\u0442\u044b\u0435 \u043c\u0435\u0441\u0442\u0430\n3. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0434\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0438 \u0430\u043d\u0430\u043b\u0438\u0437\u0430\n4. \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0433\u0440\u0430\u0444\u0438\u043a\u0438 \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0438 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043a\u0430\u043a \u043e\u043d\u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b\n5. \u0421\u0434\u0435\u043b\u0430\u0442\u044c \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u0438 \u043f\u0440\u043e\u0432\u0435\u0441\u0442\u0438 \u0430\u043d\u0430\u043b\u0438\u0437 \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u0438 \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u044b\u0445 \u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n6. \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f: \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 dummy-\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438 \u043f\u0440\u043e\u0432\u0435\u0441\u0442\u0438 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044e \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n7. \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438 \u0438 \u043f\u0440\u043e\u0432\u0435\u0441\u0442\u0438 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u044e\n8. \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u0435 (\u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0435) \u043c\u043e\u0434\u0435\u043b\u0438...","b9cd0700":"\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0432 \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043c\u043e\u0436\u043d\u043e \u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u0447\u0442\u043e \"\u0432\u044b\u0431\u0440\u043e\u0441\u044b\" \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u044e\u0442\u0441\u044f \u0432 \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u0445 decline_app_cnt(\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0448\u043b\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a), income(\u0434\u043e\u0445\u043e\u0434 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430),\nbki_request_cnt(\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0439 \u0432 \u0411\u041a\u0418) \u0438 score_bki.\n\n\u041e\u0434\u043d\u0430\u043a\u043e:\n1) \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0448\u043b\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a \u0432 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0435 \u0441\u0432\u043e\u0435\u043c (\u0431\u043e\u043b\u0435\u0435 85% \u0440\u0430\u0432\u043d\u044f\u043b\u043e\u0441\u044c 0) \u0438 \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u0432\u0441\u0435\u0445 \u043b\u044e\u0434\u0435\u0439 \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u044b\u043b\u0438 \u043e\u0442\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u044f\u0432\u043a\u0438 \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u043e \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\n\n2) \u0434\u043e\u0445\u043e\u0434 \u0443 96,2% \u043b\u044e\u0434\u0435\u0439 \u0431\u044b\u043b \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 100 \u0442\u044b\u0441., \u043d\u043e \u0432\u0435\u0434\u044c \u0435\u0441\u0442\u044c \u043b\u044e\u0434\u0438, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043e\u043d \u0441\u0438\u043b\u044c\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u0438 \u044d\u0442\u0438\u0445 \u043b\u044e\u0434\u0435\u0439 \u043d\u0430\u0434\u043e \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c...\n\n3) \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u0430\u044f \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u044f \u0438 \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0439","046d1959":"\u041f\u043e\u0441\u043b\u0435 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f undersampling'\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u044f\u0432\u043d\u043e \u043b\u0443\u0447\u0448\u0435 \u0441\u0442\u0430\u043b\u0430 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043a\u043b\u0430\u0441\u0441 TrueNegative. \u0412 \u0446\u0435\u043b\u043e\u043c \u043d\u0435\u043f\u043b\u043e\u0445\u043e, \u043d\u043e \u0441\u0442\u043e\u0438\u0442 \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0431\u043e\u043b\u0435\u0435 \u0441\u043b\u043e\u0436\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c...","288a677b":"\u041f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0430\u043c \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0432\u044b\u0432\u043e\u0434, \u0447\u0442\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043d\u0435 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0438 \u0441\u043c\u0435\u0449\u0435\u043d\u044b \u0432\u043f\u0440\u0430\u0432\u043e. \u041f\u0440\u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0438 \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044e \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432.","2297e37c":"\u041a\u0430\u043a \u043c\u044b \u0432\u0438\u0434\u0438\u043c, \u043f\u0443\u0441\u0442\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0435\u0441\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u043a\u043e\u043b\u043e\u043d\u043a\u0435 education. \u0418\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u043e\u0431\u0449\u0435\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0441\u0442\u0440\u043e\u043a \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 (110148), \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u043f\u0443\u0441\u0442\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f. \u041e\u0434\u043d\u0430\u043a\u043e \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u0438\u0445 \u043d\u0430 \u043c\u043e\u0434\u0443 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430.\n\n\u041f\u043e\u0439\u0434\u0435\u043c \u043f\u043e \u0432\u0442\u043e\u0440\u043e\u043c\u0443 \u043f\u0443\u0442\u0438.","032df056":"\u0418\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u0434\u0430\u043d\u043d\u043e\u0439 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439 \u0441\u043a\u043e\u0440\u0435\u043b\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0441\u043b\u0430\u0431\u043e. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043e\u0441\u0442\u0430\u0432\u0438\u043c \u0438\u0445 \u0432\u0441\u0435 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438.","bad33f0e":"### 6. \u041e\u0446\u0435\u043d\u043a\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","6d5854dd":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0441\u0442\u0430\u043b\u0438 \u043b\u0443\u0447\u0448\u0435, \u0447\u0435\u043c \u0431\u044b\u043b\u0438 \u0432 \u043c\u043e\u0434\u0435\u043b\u0438 \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0438\u0438 \u0441 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b\u043c undersampling'\u043e\u043c, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u043b\u044f \u0441\u0430\u0431\u043c\u0438\u0448\u0435\u043d\u0430 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c CatBoostingClassifier"}}