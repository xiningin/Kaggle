{"cell_type":{"1ee5d0ee":"code","b783440e":"code","5d97118a":"code","3f2a4558":"code","e2a3090b":"code","ecd9e023":"code","509be794":"code","c44255ea":"code","79f2cc36":"code","99c20620":"code","717079df":"code","9fe7cde8":"code","29480415":"code","b113481d":"code","9e5e9485":"code","948ac0dc":"code","c25d2ea4":"code","3203c2de":"code","8c23ce55":"code","66fb7e14":"code","bc04d762":"markdown","ceeb98e2":"markdown","d9c2f7b2":"markdown","861d7b40":"markdown","35a7f0ae":"markdown","8a6faf35":"markdown","41d2b47c":"markdown","6a689eee":"markdown","4e78f9fd":"markdown","7f2f75d5":"markdown"},"source":{"1ee5d0ee":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b783440e":"#lets import the dataset and review the first five rows\ndf = pd.read_csv('..\/input\/sales-forecasting\/train.csv')\ndf.head()","5d97118a":"#Lets get some idea what inside the dataset. After running below we see that it has\n#some unique values that would be interetsing for further exploration\n\ndf.describe(include='all')","3f2a4558":"#lets print out how many values in each column are NaN\n\nprint(df.isnull().sum())","e2a3090b":"#here we see that some postal codes are missing and we need to revise it. \n#to revise we first need to see which rows have NaN in the postal code column\n\ndf[df['Postal Code'].isnull()]","ecd9e023":"#its clear (and easy) that one and the same city is missing the postal code\n#this means that we just replace all missing values with a needed value\n#lets get the postal code for Burlington Vermont\ndf['Postal Code'] = df['Postal Code'].fillna(5401)","509be794":"#lets check if we have the full dataset without missing values now\nprint(df.isnull().sum())","c44255ea":"#how much each sub-category brought in revenue, rounded to 1 decimal point\ndfsub = df.groupby([\"Sub-Category\"]).sum().sort_values(\"Sales\", ascending=False).head(20) \ndfsub = dfsub[[\"Sales\"]].round(1) \ndfsub.reset_index(inplace=True) \ndfsub","79f2cc36":"#plotting the sales by sub-category\n\nplt.figure(figsize = (15,7)) # width and height of figure is defined in inches\nplt.title(\"Sub-categories that generated the highest revenue\", fontsize=18) \nplt.bar(dfsub[\"Sub-Category\"], dfsub[\"Sales\"],color= '#227d3d',edgecolor='yellow', linewidth = 1)\nplt.xlabel(\"Sub-Category\",fontsize=15) # x axis shows the States\nplt.ylabel(\"Sales\",fontsize=15) # y axis shows the Revenue\nplt.xticks(fontsize=12, rotation=90)\nplt.yticks(fontsize=12)\nfor k,v in dfsub[\"Sales\"].items(): #To show the exact revenue generated on the figure\n    if v>300000:\n        plt.text(k,v-120000,'$'+ str(v), fontsize=12,rotation=90,color='k', horizontalalignment='center');\n    else:\n        plt.text(k,v+15000,'$'+ str(v), fontsize=12,rotation=90,color='k', horizontalalignment='center');","99c20620":"dfplot = df[[\"Category\",\"Sub-Category\",\"Region\",\"Sales\"]]\ndfplot","717079df":"#Sales by Category in 4 regions\npd.pivot_table(dfplot , values = 'Sales' , index = 'Category' , columns = 'Region' , aggfunc = 'sum')","9fe7cde8":"import matplotlib.pyplot as plt\nimport seaborn as sns","29480415":"#let's plot some graphs for better undertsanding and visualization\n#some ready palettes to use: \"magna\", \"mako\", \"rocket\", \"crest\", \"viridis\"\nsns.countplot(data = df , x = 'Category' , hue = 'Region'  , palette = 'viridis')","b113481d":"#Sales by Sub-Category in 4 regions\ndfpiv = pd.pivot_table(dfplot , values = 'Sales' , index = 'Sub-Category' , columns = 'Region' , aggfunc = 'count')","9e5e9485":"dfpiv.head()","948ac0dc":"#lets review sales by state, on the second line we are rounding to 1 decimal point\n#states sales are listed in the descending order\n\ndfstate = df.groupby([\"State\"]).sum().sort_values(\"Sales\", ascending=False).head(20) \ndfstate = dfstate[[\"Sales\"]].round(1) \ndfstate.reset_index(inplace=True) \ndfstate","c25d2ea4":"#plotting the sales by state table\n\nplt.figure(figsize = (15,7)) # width and height of figure is defined in inches\nplt.title(\"States which generated the highest revenue\", fontsize=18) \nplt.bar(dfstate[\"State\"], dfstate[\"Sales\"],color= '#227d3d',edgecolor='yellow', linewidth = 1)\nplt.xlabel(\"States\",fontsize=15) # x axis shows the States\nplt.ylabel(\"Revenue\",fontsize=15) # y axis shows the Revenue\nplt.xticks(fontsize=12, rotation=90)\nplt.yticks(fontsize=12)\nfor k,v in dfstate[\"Sales\"].items(): #To show the exact revenue generated on the figure\n    if v>400000:\n        plt.text(k,v-120000,'$'+ str(v), fontsize=12,rotation=90,color='k', horizontalalignment='center');\n    else:\n        plt.text(k,v+15000,'$'+ str(v), fontsize=12,rotation=90,color='k', horizontalalignment='center');","3203c2de":"#lets review sales by Category, on the second line we are rounding to 1 decimal point\n#states sales are listed in the descending order\n\ndfcat = df.groupby([\"Category\"]).sum().sort_values(\"Sales\", ascending=False).head() \ndfcat = dfcat[[\"Sales\"]].round(1) \ndfcat.reset_index(inplace=True) \ndfcat","8c23ce55":"import plotly.express as px\nfig = px.pie(dfcat, values='Sales', title='Sales by Category', hole=.3, hover_data=['Category'], labels={'Category'})\nfig.show()","66fb7e14":"#Very cool chart below from https:\/\/www.kaggle.com\/rohitsahoo\/eda-superstore-dataset?scriptVersionId=42568767&cellId=36 \n\n\n# Sort both category and  sub category as per the sales\nTop_subcat = df.groupby(['Category','Sub-Category']).sum().sort_values(\"Sales\", ascending=False).head(10)\nTop_subcat = Top_subcat[[\"Sales\"]].astype(int) # Cast Sales column to integer data type\nTop_subcat = Top_subcat.sort_values(\"Category\") # Sort the values as per Category\nTop_subcat.reset_index(inplace=True) # Since we have used groupby, we will have to reset the index to add both columns into data frame\nTop_subcat_1 = Top_subcat.groupby(['Category']).sum() # Calculated the total Sales of all the categories\nTop_subcat_1.reset_index(inplace=True) # Reset the index\n\ndef autopct_format(values): \n    def my_format(pct): \n        total = sum(values) \n        val = int(round(pct*total\/100.0))\n        return ' ${v:d}'.format(v=val)\n    return my_format\n\n\nplt.rcParams[\"figure.figsize\"] = (15,10) # width and height of figure is defined in inches\nfig, ax = plt.subplots()\nax.axis('equal') # Equal aspect ratio ensures that pie is drawn as a circle\nwidth = 0.1\nouter_colors = ['#FE840E','#009B77','#BC243C'] # Outer colors of the pie chart\ninner_colors = ['Orangered','tomato','coral',\"darkturquoise\",\"mediumturquoise\",\"paleturquoise\",\"lightpink\",\"pink\",\"hotpink\",\"deeppink\"] # inner colors of the pie chart\npie = ax.pie(Top_subcat_1['Sales'], radius=1, labels=Top_subcat_1['Category'],colors=outer_colors,wedgeprops=dict(edgecolor='w'))\npie2 = ax.pie(Top_subcat['Sales'], radius=1-width, labels=Top_subcat['Sub-Category'],autopct=autopct_format(Top_subcat['Sales']),labeldistance=0.7,colors=inner_colors,wedgeprops=dict(edgecolor='w'), pctdistance=0.53,rotatelabels =True)\n# Rotate fractions\n# [0] = wedges, [1] = labels, [2] = fractions\nfraction_text_list = pie2[2]\nfor text in fraction_text_list: \n    text.set_rotation(315) # rotate the autopct values\ncentre_circle = plt.Circle((0,0),0.6,fc='white') # Draw a circle on the pie chart\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\nplt.show()","bc04d762":"# Reviewing the dataset using \"describe\"","ceeb98e2":"### Welcome to the Superstore Sales Dataset analysis","d9c2f7b2":"# Sales by sub-category and plotting","861d7b40":"# Sales by state and plotting","35a7f0ae":"# Data importing, cleaning, preparation","8a6faf35":"# Checking for NaN values and replacing them with missing values","41d2b47c":"# Pivot tables and plotting","6a689eee":"#### Importing the data","4e78f9fd":"# Analysis","7f2f75d5":"#### Sales by Category and plotting (Donut chart with hovering)"}}