{"cell_type":{"1dcd0dda":"code","c314be93":"code","4211891f":"code","bd4493a9":"code","748a1f87":"code","68575ca9":"code","c0d4e227":"code","a32a80ab":"code","31c74e19":"code","83aacbdd":"code","de91a2ba":"code","69eee3cf":"code","935e839b":"code","7c6eab79":"code","799f039e":"code","bd46146b":"code","78f9e054":"code","cb414fd7":"code","13957e42":"code","1deeea46":"code","7d33f08a":"code","31d1a45c":"code","5a0851c1":"code","25a7fc0a":"code","5455b257":"code","3ee0c6c7":"code","0733db16":"code","264d48ed":"code","95d84f66":"code","b513c248":"code","16cb8e22":"code","73cd9646":"code","6797dfa8":"code","0707f7c2":"code","b96fe987":"code","1ae55e3b":"code","fa8fd9dc":"code","b10fa254":"code","79014851":"code","39e76981":"code","298bce68":"code","76b12bc7":"code","9a1e3fee":"code","58cd1b4f":"code","1e977ba3":"code","faad06d6":"code","45b9d873":"code","84e9411f":"code","c6bb0656":"code","34f632a4":"code","6add6054":"code","4763811e":"code","aa659aac":"code","75747cba":"code","4239f2b0":"code","ce515e58":"code","b8d4033a":"code","f65a5a2f":"markdown","292a6f60":"markdown","0792f306":"markdown","89d05cc9":"markdown","f1e93fd3":"markdown","9497d4f5":"markdown","f71da0e6":"markdown","e3351ed1":"markdown","5520ff94":"markdown","624144b8":"markdown","ca2a7925":"markdown","61ef5754":"markdown","1e19b72a":"markdown","11759ba2":"markdown","49b578db":"markdown","1da5c208":"markdown","31528d59":"markdown","aaebb668":"markdown","df6a8730":"markdown","56da4bef":"markdown","485e1c54":"markdown","ce081377":"markdown","cfc63ba2":"markdown","236dc88d":"markdown","81006a7c":"markdown","3672a6f3":"markdown","206c9764":"markdown","c68fa99d":"markdown","d5f541ce":"markdown","dbd8f91b":"markdown","6fb25671":"markdown","a8e78fd6":"markdown","9b013aec":"markdown","14c227c6":"markdown","d5583572":"markdown","b2b16030":"markdown","e6cd3109":"markdown","1a2190d5":"markdown","fdf2a537":"markdown","cdd80992":"markdown","57058468":"markdown","a5248cf7":"markdown","3288c30c":"markdown","9c38a323":"markdown","1040e342":"markdown","888c584c":"markdown","a5a23dc8":"markdown","4d8875ee":"markdown","e165ea89":"markdown","6d6af190":"markdown","5789ac92":"markdown","9fda4a5d":"markdown","59c77e54":"markdown","20e9ebcb":"markdown","2ea973c8":"markdown","2380b7a2":"markdown","420ac4d9":"markdown","8f2e8042":"markdown","5b69936e":"markdown","56f6147a":"markdown","4c451424":"markdown","86f29fa0":"markdown","e473d718":"markdown","0a14c10e":"markdown","2255f3f5":"markdown","ec36426e":"markdown","fe018da5":"markdown","7c00da8e":"markdown","a2ccea5c":"markdown","c665ec21":"markdown","d85997a2":"markdown","ba514b02":"markdown","12b07c14":"markdown","c5ae27bf":"markdown","acb0395a":"markdown","4a4b3636":"markdown","b908062e":"markdown","1a994853":"markdown","ec67f04d":"markdown","82444720":"markdown"},"source":{"1dcd0dda":"!ls ..\/input\/3d-object-detection-for-autonomous-vehicles","c314be93":"!pip install lyft-dataset-sdk","4211891f":"# Load the SDK\n%matplotlib inline\nfrom lyft_dataset_sdk.lyftdataset import LyftDataset","bd4493a9":"# Load the dataset\n# Adjust the dataroot parameter below to point to your local dataset path.\n# The correct dataset path contains at least the following four folders (or similar): images, lidar, maps, v1.0.1-train\n!ln -s \/kaggle\/input\/3d-object-detection-for-autonomous-vehicles\/train_images images\n!ln -s \/kaggle\/input\/3d-object-detection-for-autonomous-vehicles\/train_maps maps\n!ln -s \/kaggle\/input\/3d-object-detection-for-autonomous-vehicles\/train_lidar lidar","748a1f87":"level5data = LyftDataset(data_path='.', json_path='\/kaggle\/input\/3d-object-detection-for-autonomous-vehicles\/train_data', verbose=True)","68575ca9":"level5data.list_scenes()","c0d4e227":"my_scene = level5data.scene[0]\nmy_scene","a32a80ab":"my_sample_token = my_scene[\"first_sample_token\"]\n# my_sample_token = level5data.get(\"sample\", my_sample_token)[\"next\"]  # proceed to next sample\n\nlevel5data.render_sample(my_sample_token)","31c74e19":"my_sample = level5data.get('sample', my_sample_token)\nmy_sample","83aacbdd":"level5data.list_sample(my_sample['token'])","de91a2ba":"level5data.render_pointcloud_in_image(sample_token = my_sample[\"token\"],\n                                      dot_size = 1,\n                                      camera_channel = 'CAM_FRONT')","69eee3cf":"my_sample['data']","935e839b":"sensor_channel = 'CAM_FRONT'  # also try this e.g. with 'LIDAR_TOP'\nmy_sample_data = level5data.get('sample_data', my_sample['data'][sensor_channel])\nmy_sample_data","7c6eab79":"level5data.render_sample_data(my_sample_data['token'])","799f039e":"my_annotation_token = my_sample['anns'][16]\nmy_annotation =  my_sample_data.get('sample_annotation', my_annotation_token)\nmy_annotation","bd46146b":"level5data.render_annotation(my_annotation_token)","78f9e054":"my_instance = level5data.instance[100]\nmy_instance","cb414fd7":"instance_token = my_instance['token']\nlevel5data.render_instance(instance_token)","13957e42":"print(\"First annotated sample of this instance:\")\nlevel5data.render_annotation(my_instance['first_annotation_token'])","1deeea46":"print(\"Last annotated sample of this instance\")\nlevel5data.render_annotation(my_instance['last_annotation_token'])","7d33f08a":"level5data.list_categories()","31d1a45c":"level5data.category[2]","5a0851c1":"level5data.list_attributes()","25a7fc0a":"for my_instance in level5data.instance:\n    first_token = my_instance['first_annotation_token']\n    last_token = my_instance['last_annotation_token']\n    nbr_samples = my_instance['nbr_annotations']\n    current_token = first_token\n\n    i = 0\n    found_change = False\n    while current_token != last_token:\n        current_ann = level5data.get('sample_annotation', current_token)\n        current_attr = level5data.get('attribute', current_ann['attribute_tokens'][0])['name']\n\n        if i == 0:\n            pass\n        elif current_attr != last_attr:\n            print(\"Changed from `{}` to `{}` at timestamp {} out of {} annotated timestamps\".format(last_attr, current_attr, i, nbr_samples))\n            found_change = True\n\n        next_token = current_ann['next']\n        current_token = next_token\n        last_attr = current_attr\n        i += 1","5455b257":"level5data.sensor","3ee0c6c7":"level5data.sample_data[10]","0733db16":"level5data.calibrated_sensor[0]","264d48ed":"level5data.ego_pose[0]","95d84f66":"print(\"Number of `logs` in our loaded database: {}\".format(len(level5data.log)))","b513c248":"level5data.log[0]","16cb8e22":"print(\"There are {} maps masks in the loaded dataset\".format(len(level5data.map)))","73cd9646":"level5data.map[0]","6797dfa8":"sensor_channel = 'LIDAR_TOP'\n#my_sample_data = level5data.get('sample_data', my_sample['data'][sensor_channel])\n# The following call can be slow and requires a lot of memory\n#level5data.render_sample_data(my_sample_data['token'], underlay_map = True)","0707f7c2":"level5data.category[0]","b96fe987":"cat_token = level5data.category[0]['token']\ncat_token","1ae55e3b":"level5data.get('category', cat_token)","fa8fd9dc":"level5data.sample_annotation[0]","b10fa254":"one_instance = level5data.get('instance', level5data.sample_annotation[0]['instance_token'])\none_instance","79014851":"ann_tokens = level5data.field2token('sample_annotation', 'instance_token', one_instance['token'])","39e76981":"ann_tokens_field2token = set(ann_tokens)\n\nann_tokens_field2token","298bce68":"ann_record = level5data.get('sample_annotation', one_instance['first_annotation_token'])\nann_record","76b12bc7":"ann_tokens_traverse = set()\nann_tokens_traverse.add(ann_record['token'])\nwhile not ann_record['next'] == \"\":\n    ann_record = level5data.get('sample_annotation', ann_record['next'])\n    ann_tokens_traverse.add(ann_record['token'])","9a1e3fee":"print(ann_tokens_traverse == ann_tokens_field2token)","58cd1b4f":"catname = level5data.sample_annotation[0]['category_name']","1e977ba3":"ann_rec = level5data.sample_annotation[0]\ninst_rec = level5data.get('instance', ann_rec['instance_token'])\ncat_rec = level5data.get('category', inst_rec['category_token'])\n\nprint(catname == cat_rec['name'])","faad06d6":"# Shortcut\nchannel = level5data.sample_data[0]['channel']\n\n# No shortcut\nsd_rec = level5data.sample_data[0]\ncs_record = level5data.get('calibrated_sensor', sd_rec['calibrated_sensor_token'])\nsensor_record = level5data.get('sensor', cs_record['sensor_token'])\n\nprint(channel == sensor_record['channel'])","45b9d873":"level5data.list_categories()","84e9411f":"level5data.list_attributes()","c6bb0656":"level5data.list_scenes()","34f632a4":"my_sample = level5data.sample[10]\nlevel5data.render_pointcloud_in_image(my_sample['token'], pointsensor_channel='LIDAR_TOP')","6add6054":"my_sample = level5data.sample[20]\n\n# The rendering command below is commented out because it tends to crash in notebooks\n# level5data.render_sample(my_sample['token'])","4763811e":"level5data.render_sample_data(my_sample['data']['CAM_FRONT'])","aa659aac":"level5data.render_sample_data(my_sample['data']['LIDAR_TOP'], nsweeps=5)","75747cba":"level5data.render_annotation(my_sample['anns'][22])","4239f2b0":"#my_scene_token = level5data.scene[0][\"token\"]\n#level5data.render_scene_channel(my_scene_token, 'CAM_FRONT')","ce515e58":"#level5data.render_scene(my_scene_token)","b8d4033a":"#level5data.render_egoposes_on_map(log_location='Palo Alto')","f65a5a2f":"### Reverse indices\nThe devkit adds two reverse indices by default.\n* A `map_token` field is added to the `log` records.\n* The `sample` records have shortcuts to all `sample_annotations` for that record as well as `sample_data` key-frames. Confer `level5data.list_sample()` method in the previous section for more details on this.","292a6f60":"## Introduction to the dataset structure\n\nIn this part of the tutorial, let us go through a top-down introduction of our database. Our dataset comprises of elemental building blocks that are the following:\n\n1. `scene` - 25-45 seconds snippet of a car's journey.\n2. `sample` - An annotated snapshot of a scene at a particular timestamp.\n3. `sample_data` - Data collected from a particular sensor.\n4. `sample_annotation` - An annotated instance of an object within our interest.\n5. `instance` - Enumeration of all object instance we observed.\n6. `category` - Taxonomy of object categories (e.g. vehicle, human). \n7. `attribute` - Property of an instance that can change while the category remains the same.\n8. `visibility` - (currently not used)\n9. `sensor` - A specific sensor type.\n10. `calibrated sensor` - Definition of a particular sensor as calibrated on a particular vehicle.\n11. `ego_pose` - Ego vehicle poses at a particular timestamp.\n12. `log` - Log information from which the data was extracted.\n13. `map` - Map data that is stored as binary semantic masks from a top-down view.","0792f306":"Notice that the keys are referring to the different sensors that form our sensor suite. Let's take a look at the metadata of a `sample_data` taken from `CAM_FRONT`.","89d05cc9":"Let's get started! Make sure that you have a local copy of a dataset (for download instructions, see https:\/\/level5.lyft.com\/dataset\/). Then, adjust `dataroot` below to point to your local dataset path. If everything is set up correctly, you should be able to execute the following cell successfully.","f1e93fd3":"### 9. Calibrated_sensor","9497d4f5":"Map information is currently stored in a 2D rasterized image. Let's check the number of maps and metadata of a map.","f71da0e6":"# Data\n\n\nYou will need the **LIDAR, image**, map and data files for both train and test (```test_images.zip```, ```test_lidar.zip```, etc.). You may also need the train.csv, which includes the sample annotations in the form expected for submissions. The ```sample_submission.csv``` file contains all of the sample ```Ids``` for the test set.\n\nThe data files (```test_data.zip```, ```train_data.zip```) are in JSON format.\n\n<br>\n\n- **train_data.zip** and **test_data.zip** - contains JSON files with multiple tables. The most important is ```sample_data.json```, which contains the primary identifiers used in the competition, as well as links to key image \/ lidar information.\n    \n- **train_images.zip** and **test_images.zip** - contains .jpeg files corresponding to samples in ```sample_data.json```\n- **train_lidar.zip** and **test_lidar.zip** - contains .jpeg files corresponding to samples in ```sample_data.json```\n- **train_maps.zip** and **test_maps.zip** - contains maps of the entire sample area.\n- **train.csv** - contains all ```sample_tokens``` in the train set, as well as annotations in the required format for all train set objects.\n- **sample_submission.csv** - contains all ```sample_tokens``` in the test set, with empty predictions.\n","e3351ed1":"We can also render the `sample_data` at a particular sensor. ","5520ff94":"Thanks @rishabhiitbhu for this comment: https:\/\/www.kaggle.com\/seshurajup\/lyft-level-5-av-dataset-notebook-from-github#625566","624144b8":"### List methods\nThere are three list methods available.","ca2a7925":"The dataset contains data that is collected from a full sensor suite. Hence, for each snapshot of a scene, we provide references to a family of data that is collected from these sensors. \n\nWe provide a `data` key to access these:","61ef5754":"Every `sample_data` has a record on which `sensor` the data is collected from (note the \"channel\" key)","1e19b72a":"This returns a list of all sample_annotation records with the `'instance_token'` == `one_instance['token']`. Let's store these in a set for now","11759ba2":"### 4. Sample_annotation","49b578db":"`ego_pose` contains information about the location (encoded in `translation`) and the orientation (encoded in `rotation`) of the ego vehicle body frame, with respect to the global coordinate system.","1da5c208":"## Data Visualizations\n\nWe provide list and rendering methods. These are meant both as convenience methods during development, and as tutorials for building your own visualization methods. They are implemented in the NuScenesExplorer class, with shortcuts through the NuScenes class itself.","31528d59":"We generally track an instance across different frames in a particular scene. However, we do not track them across different scenes. In this example, we have 16 annotated samples for this instance across a particular scene.","aaebb668":"Note that the `translation` and the `rotation` parameters are given with respect to the ego vehicle body frame. ","df6a8730":"Finally, we can render a full scene as a video. There are two options here:\n1. level5data.render_scene_channel() renders the video for a particular channel. (HIT ESC to exit)\n2. level5data.render_scene() renders the video for all surround view camera channels.\n\n**NOTE: These methods use OpenCV for rendering, which doesn't always play nice with IPython Notebooks. If you experience any issues please run these lines from the command line. **","56da4bef":"### 1. Scene","485e1c54":"An instance record takes note of its first and last annotation token. Let's render them","ce081377":"# put your code here","cfc63ba2":"Additionally we can aggregate the point clouds from multiple sweeps to get a denser point cloud.","236dc88d":"# Lyft Level 5 AV dataset and nuScenes devkit tutorial\n\n### <span style=\"color:red\"> IMPORTANT <\/span>\n\n> This is a modification of the official devkit tutorial: https:\/\/github.com\/lyft\/nuscenes-devkit . I modified the code for running it here! and I'll add new stuff. Check the official repository for more impormation.\n\n\nWelcome to the Level 5 AV dataset & nuScenes SDK tutorial!\n\nThis notebook is based on the original nuScenes tutorial notebook (https:\/\/www.nuscenes.org\/) and was adjusted for the Level 5 AV dataset.","81006a7c":"We can also render an annotation to have a closer look.","3672a6f3":"The instance record has a field `first_annotation_token` which points to the first annotation in time of this instance. \nRecovering this record is easy.","206c9764":"This also has a `token` field (they all do). In addition, it has several fields of the format [a-z]*\\_token, _e.g._ instance_token. These are foreign keys in database speak, meaning they point to another table. \nUsing `level5data.get()` we can grab any of these in constant time.\n\nNote that in our dataset, we don't provide `num_lidar_pts` and set it to `-1` to indicate this.","c68fa99d":"`sample_annotation` refers to any ***bounding box defining the position of an object seen in a sample***. All location data is given with respect to the global coordinate system. Let's examine an example from our `sample` above.","d5f541ce":"The `level5data.field2token()` method is generic and can be used in any similar situation.\n\n2. For certain situation, we provide some reverse indices in the tables themselves. This is one such example. ","dbd8f91b":"Let's take a look at an example how an attribute may change over one scene","6fb25671":"# Continue\n\nI'll keep adding stuff here, mainly EDA and Visualization. If you want to learn more about this, please check the post\n[Some important links to get started](https:\/\/www.kaggle.com\/c\/3d-object-detection-for-autonomous-vehicles\/discussion\/108613#latest-625428)\n\n\n- https:\/\/medium.com\/@SmartLabAI\/3d-object-detection-from-lidar-data-with-deep-learning-95f6d400399a\n- https:\/\/github.com\/timzhang642\/3D-Machine-Learning\n- https:\/\/towardsdatascience.com\/the-state-of-3d-object-detection-f65a385f67a8\n\n\nAlso you can read about resources and experiences here [[new quota] Competition Expectations + experiences](https:\/\/www.kaggle.com\/c\/3d-object-detection-for-autonomous-vehicles\/discussion\/108609#latest-625543)","a8e78fd6":"1. `list_categories()` lists all categories, counts and statistics of width\/length\/height in meters and aspect ratio.","9b013aec":"### 12. Map","14c227c6":"The Level 5 dataset consists of data collected from our full sensor suite which consists of:\n- 1 x LIDAR, (up to three in final dataset)\n- 7 x cameras, ","d5583572":"### 8. Sensor","b2b16030":"A useful method is  `list_sample()` which lists all related `sample_data` keyframes and `sample_annotation` associated with a `sample` which we will discuss in detail in the subsequent parts.","e6cd3109":"If you know the `token` for any record in the DB you can retrieve the record by doing","1a2190d5":"Or if we only want to render a particular sensor, we can specify that.","fdf2a537":"The sample_annotation table has a \"category_name\" shortcut.","cdd80992":"We can also plot all annotations across all sample data for that sample.","57058468":"We define `sample` as an ***annotated keyframe of a scene at a given timestamp***. A keyframe is a frame where the time-stamps of data from all the sensors should be very close to the time-stamp of the sample it points to.\n\nNow, let us look at the first annotated sample in this scene.","a5248cf7":"### Render","3288c30c":"### 3. Sample_data","9c38a323":"## Dataset and Devkit Basics","1040e342":"A category record contains the name and the description of that particular category.","888c584c":"Instead of looking at camera and lidar data separately, we can also project the lidar pointcloud into camera images:","a5a23dc8":"### Shortcuts","4d8875ee":"The sample_data table has \"channel\" and \"sensor_modality\" shortcuts:","e165ea89":"_Not using shortcut:_","6d6af190":"### Memory!!\n\nThe map can e.g. be displayed in the background of top-down views:\n> I don't run this, we need more RAM...","5789ac92":"### 7. Attribute","9fda4a5d":"_Using shortcut:_","59c77e54":"Let's examine its **metadata** (click `output`)","20e9ebcb":"Finally, let's assert that we recovered the same ann_records as we did using level5data.field2token:","2ea973c8":"2. `list_attributes()` lists all attributes and counts.","2380b7a2":"3. `list_scenes()` lists all scenes in the loaded DB.","420ac4d9":"An `attribute` is a property of an instance that may change throughout different parts of a scene while the category remains the same. Here we list the provided attributes and the number of annotations associated with a particular attribute.","8f2e8042":"Object instance are instances that need to be detected or tracked by an AV (e.g a particular vehicle, pedestrian). Let us examine an instance metadata","5b69936e":"# <span style=\"color:blue\"> Lyft 3D Object Detection for Autonomous Vehicles <\/span>\n\n<br>\n\n<img src=\"https:\/\/s3-prod.crainsnewyork.com\/s3fs-public\/MAIN-Lyft%20pink%20cars_Buck%20Ennis_i_i.jpg\" height=\"500\" width=\"500\"> \n \n**Self-driving technology** presents a rare opportunity to improve the quality of life in many of our communities. Avoidable collisions, single-occupant commuters, and vehicle emissions are choking cities, while infrastructure strains under rapid urban growth. Autonomous vehicles are expected to redefine transportation and unlock a myriad of societal, environmental, and economic benefits. You can apply your data analysis skills in this competition to advance the state of self-driving technology.\n\n![](https:\/\/storage.googleapis.com\/kaggle-media\/competitions\/Lyft-Kaggle\/Kaggle-01.png)\n\n\n**This dataset** aims to democratize access to such data, and foster innovation in higher-level autonomy functions for everyone, everywhere. By conducting a competition, we hope to encourage the research community to focus on hard problems in this space\u2014namely, 3D object detection over semantic maps.\n\nIn **this competition**, you will build and optimize algorithms based on a large-scale dataset. This dataset features the raw sensor camera inputs as perceived by a fleet of multiple, high-end, autonomous vehicles in a restricted geographic area. \n\n\n##  References\n\n- [Lyft: Quick EDA and creating useful files](https:\/\/www.kaggle.com\/xhlulu\/lyft-quick-eda-and-creating-useful-files) by @xhlulu\n- **[Official Devkit for the public 2019 Lyft Level 5 AV Dataset](https:\/\/github.com\/lyft\/nuscenes-devkit) by @iglovikov**","56f6147a":"We can even render a specific annotation.","4c451424":"### 10. ego_pose","86f29fa0":"Let's get a bit **technical.**\n\nThe NuScenes class holds several tables. Each table is a list of records, and each record is a dictionary. For example the first record of the category table is stored at:","e473d718":"The category table is simple: it holds the fields `name` and `description`. It also has a `token` field, which is a unique record identifier. Since the record is a dictionary, the token can be accessed like so:","0a14c10e":"Let's take a look at the scenes that we have in the loaded database. This example dataset only has one scene, but there are many more to come.","2255f3f5":"Finally, let us visualize all scenes on the map for a particular location.","ec36426e":"_As you can notice, we have recovered the same record!_","fe018da5":"OK, that was easy. Let's try something harder. Let's look at the `sample_annotation` table.","7c00da8e":"A `category` is the object assignment of an annotation.  Let's look at the category table we have in our database. The table contains the taxonomy of different object categories and also list the subcategories (delineated by a period). ","a2ccea5c":"First, let's plot a lidar point cloud in an image. Lidar allows us to accurately map the surroundings in 3D.","c665ec21":"Now we can traverse all annotations of this instance using the \"next\" field. Let's try it. ","d85997a2":"This points to the `instance` table. This table enumerate the object _instances_ we have encountered in each \nscene. This way we can connect all annotations of a particular object.\n\nIf you look carefully at the tables, you will see that the sample_annotation table points to the instance table, \nbut the instance table doesn't list all annotations that point to it. \n\nSo how can we recover all sample_annotations for a particular object instance? There are two ways:\n\n1. `Use level5data.field2token()`. Let's try it:","ba514b02":"### 6. Category","12b07c14":"Let's look at a scene's **metadata**","c5ae27bf":"### 2. Sample","acb0395a":"Notice that it contains a variety of information such as the date and location of the log collected. It also gives out information about the map from where the data was collected. Note that one log can contain multiple non-overlapping scenes.","4a4b3636":"### 11. log\n\nThe `log` table contains log information from which the data was extracted. A `log` record corresponds to one journey of our ego vehicle along a predefined route. Let's check the number of logs and the metadata of a log.","b908062e":"There is also a method level5data.render_scene() which renders the video for all camera channels.","1a994853":"## Reverse indexing and short-cuts\n\nThe dataset tables are normalized, meaning that each piece of information is only given once.\nFor example, there is one `map` record for each `log` record. Looking at the schema you will notice that the `map` table has a `log_token` field, but that the `log` table does not have a corresponding `map_token` field. But there are plenty of situations where you have a `log`, and want to find the corresponding `map`! So what to do? You can always use the `level5data.field2token()` method, but that is slow and inconvenient. The devkit therefore adds reverse mappings for some common situations including this one.\n\nFurther, there are situations where one needs to go through several tables to get a certain piece of information. \nConsider, for example, the category name of a `sample_annotation`. The `sample_annotation` table doesn't hold this information since the category is an instance level constant. Instead the `sample_annotation` table points to a record in the `instance` table. This, in turn, points to a record in the `category` table, where finally the `name` fields stores the required information.\n\nSince it is quite common to want to know the category name of an annotation, we add a `category_name` field to the `sample_annotation` table during initialization of the NuScenes class.\n\nIn this section, we list the short-cuts and reverse indices that are added to the `NuScenes` class during initialization. These are all created in the `NuScenes.__make_reverse_index__()` method.","ec67f04d":"`calibrated_sensor` consists of the definition of a particular sensor (lidar\/camera) as calibrated on a particular vehicle. Let us look at an example.","82444720":"### 5. Instance"}}