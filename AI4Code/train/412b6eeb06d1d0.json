{"cell_type":{"5b7f4c08":"code","f5b0427e":"code","41161527":"code","4ed03ac1":"code","75d3adb8":"code","eced193d":"markdown","a7ede83c":"markdown"},"source":{"5b7f4c08":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport cv2\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f5b0427e":"img = cv2.imread(\"..\/input\/plat-hitam-putih\/027320b1-plat-nomor-kendaraan.-sumber_-bukalapak.com-1.jpg\")\nplt.imshow(img)","41161527":"img = cv2.Canny(img,20,100)\nlines = cv2.HoughLines(img, 1, np.pi\/180,20,np.array([]))\n\n\nfor line in lines:\n    rho,theta = line[0]\n    a = np.cos(theta)\n    b = np.sin(theta)\n    \n    x0 = a*rho\n    y0 = b*rho\n    \n    x1 = int(x0+10*(-b))\n    y1 = int(y0+10*(a))\n    x2 = int(x0+10*(-b))\n    y2 = int(y0+10*(1))\n    \n    cv2.line(img, (x1,y1), (x2,y2), (0,0,255),2)\n    \nplt.imshow(img)\nplt.title('Edge Detection')","4ed03ac1":"img = cv2.imread(\"..\/input\/plat-hitam-putih\/Tahun-Besok-Plat-Kendaraan-Pribadi-Akan-Menjadi-Berwarna-Putih-2.jpeg\")\nplt.imshow(img)","75d3adb8":"img = cv2.Canny(img,20,100)\nlines = cv2.HoughLines(img, 1, np.pi\/180,20,np.array([]))\n\n\nfor line in lines:\n    rho,theta = line[0]\n    a = np.cos(theta)\n    b = np.sin(theta)\n    \n    x0 = a*rho\n    y0 = b*rho\n    \n    x1 = int(x0+10*(-b))\n    y1 = int(y0+10*(a))\n    x2 = int(x0+10*(-b))\n    y2 = int(y0+10*(1))\n    \n    cv2.line(img, (x1,y1), (x2,y2), (0,0,255),2)\n    \nplt.imshow(img)\nplt.title('Edge Detection')","eced193d":"Berdasarkan Hasil Sekilas terdapat perbedaan, Yaitu dengan metode yang sederhana plat putih lebih mudah terdeteksi, namun apabila metode tersebut diaplikasikan secara maksimal maka hampir dikatakan keduanya memiliki tingkat deteksi yang tinggi pada tepian nya.","a7ede83c":"Implementasi Line\/Edge Detection kepada plat hitam dan plat putih\n"}}