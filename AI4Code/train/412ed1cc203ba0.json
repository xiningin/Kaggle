{"cell_type":{"8e9844ef":"code","5f971f6a":"code","e27dc932":"code","32481e02":"code","4d4ec87e":"code","87b9342a":"code","1eae312f":"code","ba415602":"code","7a76013f":"code","2035e706":"code","38f16f49":"code","c81b6824":"code","643ff04c":"code","2fc5a7fc":"code","a9bdb99e":"code","dcd12e1b":"code","ee4a98d4":"code","6d3e9233":"code","135f0e95":"code","53528598":"code","48ffa507":"code","4268d1de":"code","5cf38ba7":"code","5f1dcbe8":"code","9b54a4da":"code","6d113880":"code","77d38257":"code","c4be8727":"code","a0e05c87":"code","67c4aa28":"code","de51302b":"markdown","dbde408d":"markdown","85f2db93":"markdown","62213d30":"markdown","15812f80":"markdown","0c38dd15":"markdown","5aacb66e":"markdown","bbc7d413":"markdown","d3754533":"markdown","5792a63b":"markdown","11560a55":"markdown","de687fe6":"markdown","c2843b3e":"markdown","99a19c3d":"markdown","25fb3fb6":"markdown","cd029ad5":"markdown"},"source":{"8e9844ef":"# Data Analysis\nimport pandas as pd\nimport numpy as np\n\n# Data Visualization\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\n# Machine Learning\nfrom sklearn.model_selection import train_test_split, KFold, cross_val_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\n\nimport warnings\nwarnings.filterwarnings('ignore')","5f971f6a":"# Loading train data\ntrain_df = pd.read_csv('..\/input\/titanic\/train.csv', index_col='PassengerId')\ntrain_df.head()","e27dc932":"# Loading test data\ntest_df = pd.read_csv('..\/input\/titanic\/test.csv', index_col='PassengerId')\ntest_df.head()","32481e02":"print(train_df.info())\nprint('-'*40)\nprint(test_df.info())","4d4ec87e":"# Categorical Variables Description\nprint(train_df['Sex'].value_counts())\nprint('-'*50)\nprint(f'Number of unique values in \"Cabin\" column: {train_df.Cabin.nunique()}')\nprint('-'*50)\nprint(train_df['Embarked'].value_counts())","87b9342a":"# Numerical Variables Description\ntrain_df.describe()","1eae312f":"# Nominal Variables Description\ntrain_df.Name.sample(10)","ba415602":"# Creating age table to fill missing values in Age Column\nage_table = train_df.groupby(['Pclass', 'Sex', 'Embarked']).Age.median().reset_index()\nage_table","7a76013f":"# Filling the missing values\ndef find_age(row):\n    if pd.isnull(row[3]):\n        Pclass = row[0]\n        Sex = row[1]\n        Embarked = row[2]\n        return age_table[(age_table.Pclass==Pclass) & (age_table.Sex==Sex) & (age_table.Embarked==Embarked)]['Age'].iloc[0]\n    else:\n        row[3]\n\ntrain_df.fillna(value={'Embarked':'S', 'Age':train_df[['Pclass', 'Sex', 'Embarked', 'Age']].apply(find_age, axis=1)}, inplace=True)\ntest_df.fillna(value={'Fare':test_df.Fare.median(), 'Age':test_df[['Pclass', 'Sex', 'Embarked', 'Age']].apply(find_age, axis=1)}, inplace=True)\ntrain_df.sample(5)","2035e706":"# Class Imbalance Check\nplt.pie(train_df.Survived.value_counts(), labels=['Not Survived', 'Survived'], autopct='%0.1f%%')\nplt.axis('equal')\nplt.show()","38f16f49":"# Pclass distribution and its relation with the survival rate\nplt.figure(figsize=(12, 4))\n\n# Subplot 1\nplt.subplot(1, 2, 1)\nplt.pie(train_df.Pclass.value_counts().sort_index(), labels=['1', '2', '3'], autopct='%0.1f%%')\nplt.axis('equal')\nplt.title('Pclass')\n\n# Subplot 2\nplt.subplot(1, 2, 2)\nsns.pointplot(data=train_df, x='Pclass', y='Survived', estimator=np.mean, capsize=0.05)\nplt.ylim([0, 1])\nplt.title('Survival Rate for Passenger Classes')\n\nplt.subplots_adjust()\nplt.tight_layout()\nplt.show()","c81b6824":"# Sex distribution and its relation with the survival rate\nplt.figure(figsize=(12, 4))\n\n# Subplot 1\nplt.subplot(1, 2, 1)\nplt.pie(train_df.Sex.value_counts(), labels=['Male', 'Female'], autopct='%0.1f%%')\nplt.axis('equal')\nplt.title('Sex')\n\n# Subplot 2\nplt.subplot(1, 2, 2)\nsns.pointplot(data=train_df, x='Sex', y='Survived', estimator=np.mean, capsize=0.05)\nplt.ylim([0, 1])\nplt.title('Survival Rate for Genders')\n\nplt.subplots_adjust()\nplt.tight_layout()\nplt.show()","643ff04c":"# Embarkation ports distribution and its relation with the survival rate\nplt.figure(figsize=(12, 4))\n\n# Subplot 1\nplt.subplot(1, 2, 1)\nplt.pie(train_df.Embarked.value_counts(), labels=['S', 'C', 'Q'], autopct='%0.1f%%')\nplt.axis('equal')\nplt.title('Embarked')\n\n# Subplot 2\nplt.subplot(1, 2, 2)\nsns.pointplot(data=train_df, x='Embarked', y='Survived', estimator=np.mean, capsize=0.05)\nplt.ylim([0, 1])\nplt.title('Survival Rate for Embarkation Ports')\n\nplt.subplots_adjust()\nplt.tight_layout()\nplt.show()","2fc5a7fc":"# SibSp distribution and its relation with the survival rate\nplt.figure(figsize=(12, 4))\n\n# Subplot 1\nplt.subplot(1, 2, 1)\nx = np.arange(len(train_df.SibSp.value_counts().sort_index()))\ny = train_df.SibSp.value_counts().sort_index()\nvbar = plt.bar(x, y)\nplt.xticks(x, train_df.SibSp.value_counts().sort_index().index)\nplt.bar_label(vbar)\nplt.title('SibSp')\n\n# Subplot 2\nplt.subplot(1, 2, 2)\nsns.pointplot(data=train_df, x='SibSp', y='Survived', estimator=np.mean, capsize=0.05)\nplt.ylim([0, 1])\nplt.title('Survival Rate for SibSp')\n\nplt.subplots_adjust()\nplt.tight_layout()\nplt.show()","a9bdb99e":"# Parch distribution and its relation with the survival rate\nplt.figure(figsize=(12, 4))\n\n# Subplot 1\nplt.subplot(1, 2, 1)\nx = np.arange(len(train_df.Parch.value_counts().sort_index()))\ny = train_df.Parch.value_counts().sort_index()\nvbar = plt.bar(x, y)\nplt.xticks(x, train_df.Parch.value_counts().sort_index().index)\nplt.bar_label(vbar)\nplt.title('Parch')\n\n# Subplot 2\nplt.subplot(1, 2, 2)\nsns.pointplot(data=train_df, x='Parch', y='Survived', estimator=np.mean, capsize=0.05)\nplt.ylim([0, 1])\nplt.title('Survival Rate for Parch')\n\nplt.subplots_adjust()\nplt.tight_layout()\nplt.show()","dcd12e1b":"# Age distribution and its relation with the survival\nplt.figure(figsize=(12, 4))\n\n# Subplot 1\nplt.subplot(1, 2, 1)\nsns.kdeplot(train_df.Age)\nquartiles = np.quantile(train_df.Age, [0.25, 0.50, 0.75])\ncolors = ['r', 'g', 'b']\nlabels = ['Q1', 'Q2', 'Q3']\nfor q, c, l in zip(quartiles, colors, labels):\n    plt.axvline(x=q, c=c, label=l+f'={q}')\nplt.legend()\n\n# Subplot 2\nplt.subplot(1, 2, 2)\nsns.kdeplot(data=train_df, x='Age', hue='Survived')\n\nplt.show()","ee4a98d4":"# Fare distribution and its relation with the survival\nplt.figure(figsize=(12, 4))\n\n# Subplot 1\nplt.subplot(1, 2, 1)\nsns.kdeplot(train_df.Fare)\nquartiles = np.quantile(train_df.Fare, [0.25, 0.50, 0.75])\ncolors = ['r', 'g', 'b']\nlabels = ['Q1', 'Q2', 'Q3']\nfor q, c, l in zip(quartiles, colors, labels):\n    plt.axvline(x=q, c=c, label=l+f'={q}')\nplt.legend()\n\n# Subplot 2\nplt.subplot(1, 2, 2)\nsns.kdeplot(data=train_df, x='Fare', hue='Survived')\n\nplt.show()","6d3e9233":"# Combining SibSp and Parch columns to create Family column to find a better relation with survival\ntrain_df_fe = train_df.copy()\ntest_df_fe = test_df.copy()\ncombined = [train_df_fe, test_df_fe]\n\nfor df in combined:\n    df['Family'] = df['SibSp'] + df['Parch']\n    df['Family'] = df.Family.apply(lambda x: x if x in [0, 1, 2] else 3)\ntrain_df_fe.sample(5)","135f0e95":"# Family distribution and its relation with the survival rate\nplt.figure(figsize=(12, 4))\n\n# Subplot 1\nplt.subplot(1, 2, 1)\nx = np.arange(len(train_df_fe.Family.value_counts().sort_index()))\ny = train_df_fe.Family.value_counts().sort_index()\nvbar = plt.bar(x, y)\nplt.xticks(x, train_df_fe.Family.value_counts().sort_index().index)\nplt.bar_label(vbar)\nplt.title('Family')\n\n# Subplot 2\nplt.subplot(1, 2, 2)\nsns.pointplot(data=train_df_fe, x='Family', y='Survived', estimator=np.mean, capsize=0.05)\nplt.ylim([0, 1])\nplt.title('Survival Rate for Family')\n\nplt.subplots_adjust()\nplt.tight_layout()\nplt.show()","53528598":"# Extracting the titles from the Name column\nfor df in combined:\n    df['Title'] = df.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n    df['Title'] = df.Title.apply(lambda title: title if title in ['Mr', 'Mrs', 'Miss', 'Master'] else 'Other')\ntrain_df_fe.sample(5)","48ffa507":"# Title distribution and its relation with the survival rate\nplt.figure(figsize=(12, 4))\n\n# Subplot 1\nplt.subplot(1, 2, 1)\nx = np.arange(len(train_df_fe.Title.value_counts()))\ny = train_df_fe.Title.value_counts()\nvbar = plt.bar(x, y)\nplt.xticks(x, train_df_fe.Title.value_counts().index)\nplt.bar_label(vbar)\nplt.title('Title')\n\n# Subplot 2\nplt.subplot(1,2,2)\nsns.pointplot(data=train_df_fe, x='Title', y='Survived', estimator=np.mean, capsize=0.05)\nplt.ylim([0, 1])\nplt.title('Survival Rate for Title')\n\nplt.subplots_adjust()\nplt.tight_layout()\nplt.show()","4268d1de":"# Multicollinearity Check\nplt.figure(figsize=(8, 6))\ncorr = train_df_fe.corr()\nmask = np.triu(np.ones_like(corr, dtype=bool))\ncmap = sns.diverging_palette(20, 20, as_cmap=True)\nsns.heatmap(corr, mask=mask, cmap=cmap, vmin=-1, vmax=1, center=0, annot=True, linewidth=0.05, square=True)\nplt.tight_layout()\nplt.show()","5cf38ba7":"# Feature Selection\nx_train_features = train_df_fe[['Pclass', 'Sex', 'Age', 'Fare', 'Embarked', 'Family', 'Title']]\nx_test_features = test_df_fe[['Pclass', 'Sex', 'Age', 'Fare', 'Embarked', 'Family', 'Title']]\ny_train = train_df_fe['Survived']\nx_train_features.head()","5f1dcbe8":"# Label Encoding\nx_train_encoded1 = x_train_features.replace({'Sex': {'male':0, 'female':1}})\nx_test_encoded1 = x_test_features.replace({'Sex': {'male':0, 'female':1}})\nx_train_encoded1.head()","9b54a4da":"# One-Hot Encoding\nx_train_encoded2 = pd.get_dummies(x_train_encoded1, columns=['Embarked', 'Title'], drop_first=True)\nx_test_encoded2 = pd.get_dummies(x_test_encoded1, columns=['Embarked', 'Title'], drop_first=True)\nx_train_encoded2.head()","6d113880":"# Converting DataFrames to Arrays\nx_train_arr = x_train_encoded2.values\nx_test_arr = x_test_encoded2.values\ny_train_arr = y_train.values\nx_train_arr[0]","77d38257":"# Standardization\nscaler = StandardScaler()\nx_train_norm = scaler.fit_transform(x_train_arr)\nx_test_norm = scaler.transform(x_test_arr)\n\nx_train_norm[0]","c4be8727":"# K-Nearest Neighbors Classifier (KNN)\ncv = KFold(n_splits=10, random_state=1, shuffle=True)\n\nk_values = []\nknc_accuracy = []\nfor k in range(1, 20, 2):\n    knc = KNeighborsClassifier(n_neighbors=k)\n    scores_knc = cross_val_score(knc, x_train_norm, y_train_arr, cv=cv)\n    knc_accuracy.append(scores_knc.mean())\n    k_values.append(k)\nprint(f'KNN: Maximum accuracy is {np.round(max(knc_accuracy), 3)} at k={k_values[knc_accuracy.index(max(knc_accuracy))]}')\n\nplt.plot(k_values, knc_accuracy)\nplt.xticks(k_values)\nplt.show()","a0e05c87":"# Logistic Regression\nlr = LogisticRegression()\nscores_lr = cross_val_score(lr, x_train_norm, y_train_arr, cv=cv)\nprint(f'Logistic Regression: Accuracy={np.round(scores_lr.mean(), 3)} and Standard Deviation={np.round(scores_lr.std(), 3)}')\n\n# Support Vector Classifier\nsvc = SVC()\nscores_svc = cross_val_score(svc, x_train_norm, y_train_arr, cv=cv)\nprint(f'Support Vector Classifier: Accuracy={np.round(scores_svc.mean(), 3)} and Standard Deviation={np.round(scores_svc.std(), 3)}')\n\n# Decision Tree Classifier\ndtc = DecisionTreeClassifier()\nscores_dtc = cross_val_score(dtc, x_train_norm, y_train_arr, cv=cv)\nprint(f'Decision Tree Classifier: Accuracy={np.round(scores_dtc.mean(), 3)} and Standard Deviation={np.round(scores_dtc.std(), 3)}')\n\n# Random Forest Classifier\nrfc = RandomForestClassifier()\nscores_rfc = cross_val_score(rfc, x_train_norm, y_train_arr, cv=cv)\nprint(f'Random Forest Classifier: Accuracy={np.round(scores_rfc.mean(), 3)} and Standard Deviation={np.round(scores_rfc.std(), 3)}')\n\n# Gaussian Naive Bayes Classifier\ngnb = GaussianNB()\nscores_gnb = cross_val_score(gnb, x_train_norm, y_train_arr, cv=cv)\nprint(f'Gaussian Naive Bayes Classifier: Accuracy={np.round(scores_gnb.mean(), 3)} and Standard Deviation={np.round(scores_gnb.std(), 3)}')","67c4aa28":"# Predicting the test data labels using Support Vector Classifier\nsvc.fit(x_train_norm, y_train_arr)\ny_predicted = svc.predict(x_test_norm)\n\n# Submitting predictions\nsubmission = pd.DataFrame({'PassengerId': test_df.index, 'Survived': y_predicted})\nsubmission.to_csv('Titanic Submission.csv', index=False)\nprint('Submission is successful.')","de51302b":"# Prediction using ML Models","dbde408d":"# Data Loading and Cleaning","85f2db93":"# Data Visualization","62213d30":"###  **Insights:**\n* All the features have reasonable data. Therefore, no need to correct values.  ","15812f80":"# Feature Engineering","0c38dd15":"# Data Preprocessing","5aacb66e":"###  **Insights:**\n* Family column can be seen to have better relationship with the survival as compared to SibSp and Parch columns.","bbc7d413":"# Importing Necessary Libraries","d3754533":"***Thank you so much for your time!\nIf you liked my work, kindly consider upvoting. It means a lot!\nAlso, do not forget to share your thoughts in the comment section.***","5792a63b":"###  **Insights:**\n* Title column also exhibits considerable relationship with the survival.","11560a55":"* We will use above age table consisting of median age for each combination of Pclass, Sex, and Embarked for better estimation of missing values in Age column.\n* We will fill 'S' in the Embarked column for missing values because it is the most frequent embarkation port.\n* We will use median fare for filling the missing values in Fare column. \n* We will not consider Cabin column as it contains more than 75% missing values.","de687fe6":"***Hello there!\nI hope you are doing well. This is my first end-to-end data science project, so I genuinely encourage you to share your feedback or any suggestion you might have on my work. \nI hope going through this kernel would be worth your time!***","c2843b3e":"###  **Insights:**\n* Data type and format of each feature is correct.\n* There are missing values in Age, Cabin, and Embarked columns of train dataset.\n* There are missing values in Age, Cabin, and Fare columns of test dataset.","99a19c3d":"###  **Insights:**\n* This is not a class imbalance problem.","25fb3fb6":"###  **Insights:**\n* Pclass, Sex, and Embarked columns can be seen to have an impact on survival.\n* SibSp and Parch columns are non-uniformly distributed among their categories. Moreover, they do not clearly exhibit relationship with the survival with the current distribution.\n* Age and Fare columns show a considerable relationship with the survival.","cd029ad5":"###  **Insights:**\n* As Family column is derived from SibSp and Parch columns, they have a significantly high correlation. Therefore, we will use only Family column."}}