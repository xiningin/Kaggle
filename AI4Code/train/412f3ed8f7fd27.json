{"cell_type":{"a352060c":"code","d3ab562f":"code","f07b118e":"code","d807098e":"code","a27b32d3":"code","6fa0637e":"code","c62e588e":"code","64fb29d5":"code","021b209d":"code","af3bc7fc":"code","ed7ebb07":"code","70eff9cc":"code","8d2ba12e":"code","5fc3798d":"code","7445abcd":"code","f658bac8":"code","40c18b59":"code","ef1160ac":"code","55d3a369":"code","f5689e50":"code","be8a81b1":"code","829a939f":"code","06d0ad6a":"code","16c8f455":"code","94c5a3ee":"code","149d4a16":"code","67b42b7b":"code","07349044":"markdown","7cd3e3d1":"markdown","350c0de2":"markdown","a1c9561c":"markdown","8b3cbea1":"markdown","b91148bb":"markdown","eca30d1f":"markdown","29ba1e70":"markdown","726ceccb":"markdown","68d5e8ec":"markdown","f267500a":"markdown","f605ba7c":"markdown","865ce478":"markdown","3cc6326b":"markdown","590cde4d":"markdown","11579414":"markdown","b7bfd8f7":"markdown","aec5ce15":"markdown","d65211a0":"markdown","0193c276":"markdown","6a3be83c":"markdown","ac389cb9":"markdown","f188681f":"markdown","acd3aec9":"markdown","7a8797ff":"markdown","38d6959c":"markdown","d0fde22d":"markdown"},"source":{"a352060c":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split # Train-test split\nfrom sklearn.preprocessing import MinMaxScaler # Scaling data\nfrom sklearn.feature_selection import SelectKBest, f_regression # N\u00b0 variables\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.svm import SVR\n\nimport warnings\nwarnings.filterwarnings('ignore') # Ignoring sklearn warnings\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nsns.set()","d3ab562f":"dataset = pd.read_csv('..\/input\/used-car-dataset-ford-and-mercedes\/audi.csv')\ndataset.head()","f07b118e":"dataset.describe().T","d807098e":"sns.distplot(dataset['year'], bins = 10, color = 'orange', label = 'KDE')\nplt.legend()\nplt.gcf().set_size_inches(12, 5)","a27b32d3":"print(dataset.model.unique())\nprint('--'* 50)\n\nprint(dataset.transmission.unique())\nprint('--'* 50)\n\nprint(dataset.fuelType.unique())\nprint('--'* 50)","6fa0637e":"fig, ax =plt.subplots(1,2, sharey = True)\nplt.gcf().set_size_inches(12, 5)\nsns.countplot(dataset['fuelType'], ax = ax[0])\nsns.countplot(dataset['transmission'], ax = ax[1])\nplt.show()","c62e588e":"Model = pd.DataFrame(dataset['model'].value_counts())","64fb29d5":"sns.barplot(x = Model.index, y = Model['model'])\n\nlabels = Model.index.tolist()\nplt.gcf().set_size_inches(15, 7)\n\nplt.title('Models vs quantity', fontsize = 20)\nplt.xlabel('Model', fontsize = 15)\n\nplt.xticks(ticks = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15] , labels = labels, rotation = 'vertical')\nplt.show()","021b209d":"sns.heatmap(dataset.corr(), annot = True, linewidths=.5, cmap='cubehelix')\nplt.title('Correlation', fontsize = 20)\nplt.show()","af3bc7fc":"f, (ax1, ax2) = plt.subplots(1, 2, sharey = True)\n\nplt.gcf().set_size_inches(15, 7)\nax1.plot(dataset.mileage, dataset.price, c = 'green')\nax1.set_title('Mileage vs. Price', c = 'green', fontsize = 25)\nax2.scatter(dataset.engineSize, dataset.price, c='red')\nax2.set_title('Engine size vs. Price', c ='red', fontsize = 25)\n\nplt.ylabel('Price', fontsize = 25)\n\nplt.show()","ed7ebb07":"dataset2 = dataset.copy()\ndataset2 = dataset2[['model','year','transmission','mileage','fuelType','tax','mpg','engineSize','price']]\ndataset2.head(3)","70eff9cc":"data_audi_D = pd.get_dummies(dataset2)\ndata_audi_D.head(3)","8d2ba12e":"data_audi_D = data_audi_D.drop(['model_ A1', 'transmission_Automatic', 'fuelType_Diesel'], axis=1)","5fc3798d":"MinMaxScaler = MinMaxScaler() \ndata_audi_D_Scaled = MinMaxScaler.fit_transform(data_audi_D)\ndata_audi_D_Scaled = pd.DataFrame(data_audi_D_Scaled, columns = data_audi_D.columns)\ndata_audi_D_Scaled.head(3)","7445abcd":"X_train, X_test, y_train, y_test = train_test_split(data_audi_D_Scaled.drop(columns = ['price']),\n                                                    data_audi_D_Scaled[['price']],\n                                                    test_size = 0.2, random_state = 0)\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","f658bac8":"column_names = data_audi_D_Scaled.drop(columns = ['price']).columns\n\nno_of_features = []\nr_squared_train = []\nr_squared_test = []\n\nfor k in range(3, 35, 2): # From 3 to 35 variables (every single one)\n    selector = SelectKBest(f_regression, k = k)\n    X_train_transformed = selector.fit_transform(X_train, y_train)\n    X_test_transformed = selector.transform(X_test)\n    regressor = LinearRegression()\n    regressor.fit(X_train_transformed, y_train)\n    no_of_features.append(k)\n    r_squared_train.append(regressor.score(X_train_transformed, y_train))\n    r_squared_test.append(regressor.score(X_test_transformed, y_test))\n    \nsns.lineplot(x = no_of_features, y = r_squared_train, legend = 'full')\nsns.lineplot(x = no_of_features, y = r_squared_test, legend = 'full')\nplt.show()","40c18b59":"# Doing the same as above but only with k = 27\n\nselector = SelectKBest(f_regression, k = 27)\nX_train_transformed = selector.fit_transform(X_train, y_train)\nX_test_transformed = selector.transform(X_test)\ncolumn_names[selector.get_support()]","ef1160ac":"def regression_model(model):\n    \"\"\"\n    Will fit the regression model passed and will return the regressor object and the score\n    \"\"\"\n    regressor = model\n    regressor.fit(X_train_transformed, y_train)\n    score = regressor.score(X_test_transformed, y_test) # R2\n    return regressor, score","55d3a369":"model_performance = pd.DataFrame(columns = [\"Features\", \"Model\", \"Score\"])\n\nmodels_to_evaluate = [LinearRegression(), Ridge(), Lasso(), SVR(), RandomForestRegressor(), MLPRegressor()]\n\nfor model in models_to_evaluate:\n    regressor, score = regression_model(model)\n    model_performance = model_performance.append({\"Features\": \"Linear\",\"Model\": model, \"Score\": score}, ignore_index=True)\n\nmodel_performance","f5689e50":"poly = PolynomialFeatures()\nX_train_transformed_poly = poly.fit_transform(X_train)\nX_test_transformed_poly = poly.transform(X_test)\n\nprint(X_train_transformed_poly.shape)","be8a81b1":"no_of_features = []\nr_squared = []\n\nfor k in range(10, 400, 5): # Seeing what happens up to 400 variables\n    selector = SelectKBest(f_regression, k = k)\n    X_train_transformed = selector.fit_transform(X_train_transformed_poly, y_train)\n    regressor = LinearRegression()\n    regressor.fit(X_train_transformed, y_train)\n    no_of_features.append(k)\n    r_squared.append(regressor.score(X_train_transformed, y_train))\n    \nsns.lineplot(x = no_of_features, y = r_squared)\nplt.show()","829a939f":"selector = SelectKBest(f_regression, k = 250)\n\nX_train_transformed = selector.fit_transform(X_train_transformed_poly, y_train)\nX_test_transformed = selector.transform(X_test_transformed_poly)\n\nmodels_to_evaluate = [LinearRegression(), Ridge(), Lasso(), SVR(), RandomForestRegressor(), MLPRegressor()]\n\nfor model in models_to_evaluate:\n    regressor, score = regression_model(model)\n    model_performance = model_performance.append({\"Features\": \"Polynomial\",\"Model\": model, \"Score\": score}, ignore_index=True)\n\nmodel_performance","06d0ad6a":"regressor_final = RandomForestRegressor(n_estimators = 1000, random_state = 42)\nregressor.fit(X_train_transformed_poly, y_train)\n\ny_pred = regressor.predict(X_test_transformed_poly)","16c8f455":"y_test = y_test.reset_index() # To join the Dataframes\n\n\ny_pred_df = pd.DataFrame({'Price_prediction': y_pred.flatten()})","94c5a3ee":"Comparison = y_test.join(y_pred_df) \nComparison = Comparison.drop(['index'], axis=1)\nComparison.head()","149d4a16":"Fifty_comparison = Comparison.head(50)","67b42b7b":"Fifty_comparison.plot(kind = 'bar', figsize=(20,15))\nplt.grid(which = 'both', linestyle = '-', linewidth = '0.5', color = 'green')\nplt.show()","07349044":"## Audi Prices","7cd3e3d1":"**The maximum score is 0.96 with RandomForest polynomial regression**","350c0de2":"**The objective of the analysis is to compare different regression algorithms to predict in the best way the selling price of Audi cars, given different variables**","a1c9561c":"*Importing packages*","8b3cbea1":"*We get a steable curve from 27 variables on, so that is the amount of variables I'm using*","b91148bb":"*Transforming X variable*","eca30d1f":"**So there are just 3 types of transmission and 3 types of fuel, it seems there are many models.**","29ba1e70":"**OHE for model, transmission and fuel type**","726ceccb":"**Scaling the data**","68d5e8ec":"Thanks for reaching the end!","f267500a":"*Price analysis*","f605ba7c":"**Getting to know the data**","865ce478":"**Linear Modeling**","3cc6326b":"*We get a steable curve from 250 variables on, so that is the amount of variables I'm using*","590cde4d":"*How are the cars distributed by the registration year?*","11579414":"**Polynomial Modelling**","b7bfd8f7":"*Preparing the data for the model*","aec5ce15":"**To avoid multicollinearity issues, I'll drop one column for model, one for transmission, and one from fuel type.**","d65211a0":"**Separating variables**","0193c276":"**Predictions with RandomForest polynomial regression**","6a3be83c":"**The dataset has:**\n\n- 5 numerical columns: Price, mileage, tax, mpg and EngineSize.\n- 3 categorical columns: Model, transmission and FuelType\n- 1 date column: year","ac389cb9":"**All the variables except 'tax' are strong predictors for the car price. Also, there is surely a correlation between the model, fuel type and transmission, so later on we will do some OHE for those variables** ","f188681f":"Hi! I'm new to ML so feel free to give any advice or feedback!\nI inspired some feature engineering code from Gireesh https:\/\/www.kaggle.com\/gireeshs\/volkswagen-price-regression-r-2-0-9555 Kernel","acd3aec9":"**There are clear correlations:**\n\n- The price goes down as the car has more mileage (it might be really worn out).\n- The price goes up as the engine size gets bigger. There are some cars that do not follow this tendency, so we should assume that the different models have an impact on the price.","7a8797ff":"*How many models are in the set?*\n*How many types of transmission?*\n*How many types of fuel?*","38d6959c":"**Selecting the best features for the regression with SelectKBest, f_regression**","d0fde22d":"*There are 35 independent variables*"}}