{"cell_type":{"5a33677d":"code","d86a3eb6":"code","541f16e5":"code","bc719736":"code","5f305537":"code","d96352fb":"code","7cb08828":"code","35a27dce":"code","2a08c604":"code","18ffad78":"code","fcfacfcf":"code","1df07941":"code","e14af991":"code","6abf8db6":"code","fe28417e":"code","79393fbb":"code","1540885c":"code","66884242":"code","f60b1174":"code","70ecd237":"code","4fec5471":"code","d2da0a59":"code","48fdad8f":"code","5691c677":"code","ac945ae1":"code","8904f157":"code","a5a65c93":"code","ecf4faf3":"code","a3bd9bea":"code","69141174":"code","d7a69bd4":"code","7f079f67":"code","cad40fcb":"code","4badcc5a":"code","5ba266b0":"code","dca0b04e":"code","d0b89979":"code","79652554":"code","4d83d05b":"code","3c78dd79":"code","c1723d56":"code","27de93d9":"code","7379b229":"code","ccce6e81":"code","4ed115c0":"code","1053b373":"code","8ae0b1bc":"code","07f22737":"code","618c966c":"code","f9b1d380":"code","4ae11224":"code","a5225f4d":"code","83806309":"code","b5f87f9c":"code","743f5d98":"code","96bcdb04":"code","fee4eb85":"code","719cc022":"code","8572c62f":"markdown"},"source":{"5a33677d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n\n%matplotlib inline\nnp.set_printoptions(suppress=True)","d86a3eb6":"path = '..\/input\/walmart-recruiting-trip-type-classification\/'\ndata = pd.read_csv(path + 'train.csv.zip')","541f16e5":"print('The number of samples {}'.format(data.shape))\ndata.head(5)","bc719736":"print('The unique value of the data {}'.format(data[['VisitNumber']].nunique()))\nprint('The number of the value each VisitNumber: \\n{}'.format(data['VisitNumber'].value_counts().sort_values(ascending = False).head(5)))","5f305537":"data['TripType'].value_counts()","d96352fb":"plt.figure(figsize = (12, 10))\n\nsns.set_style('whitegrid')\nax = sns.countplot(x = 'TripType', data = data, palette = 'mako')\nax.set(title = 'The Frequent of Trip Type', ylabel = 'Counts', xlabel = 'Trip Type')","7cb08828":"plt.figure(figsize = (12, 10))\n\nsns.set_style('whitegrid')\nax1 = sns.countplot(x = 'Weekday', data = data, palette = 'mako')\nax.set(title = 'The Frequent of Weekday', ylabel = 'Counts', xlabel = 'Weekday')","35a27dce":"plt.figure(figsize = (32, 10))\n\nsns.set_style('whitegrid')\nax1 = sns.countplot(x = 'TripType', hue = 'Weekday', data = data, palette = 'mako')\nax.set(title = 'The Frequent of Weekday', ylabel = 'Counts', xlabel = 'Weekday')","2a08c604":"data.groupby(['Weekday'])['ScanCount'].sum().plot.bar()","18ffad78":"print('The types of goods are {}'.format(data['DepartmentDescription'].nunique()))\ndata['DepartmentDescription'].unique()","fcfacfcf":"plt.figure(figsize = (30, 10))\n\nsns.set_style('whitegrid')\nax1 = sns.countplot(x = 'DepartmentDescription', data = data, palette = 'mako')\nplt.xticks(rotation = 90)\nplt.xlabel('Department Description', fontsize = 15)\nplt.ylabel('Counts', fontsize = 15)\nplt.title('The Frequent of Department Description', fontsize = 15)","1df07941":"data['DepartmentDescription'].value_counts()","e14af991":"total = data.isnull().sum().sort_values(ascending = False)\nprint(total)\npercentage = total \/ data.shape[0]\nprint('Percentage'.center(50, '-'))\nprint(percentage)\nmissingData = pd.concat([total, percentage], axis = 1, keys = ['Total', 'Percentage'])\nmissingData","6abf8db6":"data['Upc'].unique().tolist()[:10]","fe28417e":"data.info()","79393fbb":"data.select_dtypes(include = [\"object\"]).columns","1540885c":"def flot_to_str(obj):\n    \"\"\"\n    Convert Upc code from float to string.\n    Use this function by applying lambda\n    Parameters: \"Upc\" column of DataFrame\n    Return:string converted Upc removing dot\n    \"\"\"\n    while obj != 'np.nan':\n        obj = str(obj).split('.')[0]\n        if len(obj) == 10:\n            obj = obj + '0'\n        elif len(obj) == 4:\n            obj = obj + '0000000' \n        return obj","66884242":"def company(upcData):\n    \"\"\"\n    Return company code from given Upc code.\n    Parameters:'Upc' column of DataFrame\n    Return: company code\n    \"\"\"\n    try:\n        code = upcData[: 6]\n        if code == '000000':\n            return x[-5]\n        return code\n    except:\n        return -9999","f60b1174":"def prodct(upcData):\n    \"\"\"\n    Return company code from given Upc code.\n    Parameters:'Upc' column of DataFrame\n    Return: company code\n    \"\"\"\n    try:\n        code = upcData[6 :]\n        return code\n    except:\n        return -9999","70ecd237":"data['handled_Upc'] = data['Upc'].apply(flot_to_str)","4fec5471":"data['company_code'] = data['handled_Upc'].apply(company)","d2da0a59":"data['product_code'] = data['handled_Upc'].apply(prodct)","48fdad8f":"data['DepartmentDescription'].nunique()","5691c677":"data.drop(['Upc'], axis = 1, inplace = True)","ac945ae1":"data.drop(['handled_Upc'], axis = 1, inplace = True)","8904f157":"from sklearn.preprocessing import OneHotEncoder, LabelEncoder\n\ndummy_data = pd.get_dummies(data[['Weekday']])","a5a65c93":"data = pd.concat([data, dummy_data], axis = 1)","ecf4faf3":"print('The number of ScanCount {}'.format(data['ScanCount'].nunique()))\ndata['ScanCount'].unique()","a3bd9bea":"data['ScanCount'].value_counts().to_frame()","69141174":"data['ScanCount_bool'] = 1\ndata.loc[data['ScanCount'] < 1, 'ScanCount_bool'] = 0\ndata['ScanCount_bool'].value_counts()","d7a69bd4":"data['temp_ScanCount'] = data['ScanCount']\ndata.loc[data['ScanCount'] < 0, 'temp_ScanCount'] = 0\ndata['number_ScanCount'] = pd.cut(data['temp_ScanCount'], 3, labels = ['low', 'median', 'high'])\nconcatData = pd.get_dummies(data['number_ScanCount'])\ndata = pd.concat([data, concatData], axis = 1)","7f079f67":"data.drop(['temp_ScanCount', 'ScanCount_bool'], axis = 1, inplace = True)","cad40fcb":"data['number_ScanCount'].value_counts().to_frame()","4badcc5a":"data['FinelineNumber'].value_counts().sort_values(ascending = False).to_frame()","5ba266b0":"plt.figure(figsize = (72, 10))\n\nsns.set_style('whitegrid')\nax2 = sns.countplot(x = 'DepartmentDescription', data = data, palette = 'mako')\n\nplt.show()","dca0b04e":"plt.figure(figsize = (12, 10))\nsns.set_style('whitegrid')\n\nax3 = sns.stripplot(x = 'Weekday', y = 'TripType', data = data.loc[data['TripType'] < 999], palette = 'mako')\nax3.set(title = 'The Correlation with Weekday and TripTypes', xlabel = 'Weekday', ylabel = 'Trip Types')","d0b89979":"plt.figure(figsize = (12, 10))\nsns.set_style('dark')\n\nax4 = sns.stripplot(x = 'Weekday', y = 'FinelineNumber', data = data, palette = 'mako')\n# ax4.set(title = 'The relationship between the Weekday and FinelineNumber', xlabel = 'Week Day', ylabel = 'FinelineNumber')\nplt.title('The relationship between the Weekday and FinelineNumber', fontsize = 15)\nplt.xticks(rotation = 45)\nplt.xlabel('Week Day')\nplt.ylabel('FinelineNumber')","79652554":"print('The unique of VisitNumber is {}'.format(data['VisitNumber'].nunique()))\ndata.DepartmentDescription.nunique()","4d83d05b":"print('The missing data information'.center(50, '-'))\ndata.isnull().sum().sort_values(ascending = False)","3c78dd79":"data['DepartmentDescription'].fillna( 'None', inplace = True)","c1723d56":"data['FinelineNumber'].fillna(data['FinelineNumber'].mean(), inplace = True)","27de93d9":"data.isnull().sum().sort_values(ascending = False).to_frame()","7379b229":"tempData1 = pd.get_dummies(data[['DepartmentDescription']])\ndata = pd.concat([data, tempData1], axis = 1)","ccce6e81":"def deleteNan(datas):\n    \"\"\"\n    Delete the 'nan' value of columns\n    Parameters: datas is the data to delete.\n    Return: cleaned data\n    \"\"\"\n    datas == 'nan'\n    datas = np.nan\n    return datas","4ed115c0":"# columns = data.columns.tolist()\nindexList = []\n# columns = ['company_code', 'product_code']\ncolumns = ['company_code']\nfor column in columns:\n#     for index in range(data.shape[0]):\n    indexList = data.loc[range(data.shape[0]), column] == 'nan'","1053b373":"data.loc[indexList, column] = '000000'","8ae0b1bc":"indexList.value_counts()","07f22737":"indexList = []\ncolumns = ['product_code']\nfor column in columns:\n    indexList = data.loc[range(data.shape[0]), column] == 'nan'","618c966c":"data.loc[indexList, column] = '000000'","f9b1d380":"data['company_code'].value_counts().sort_values(ascending = False)","4ae11224":"data[['product_code']].sample(10)","a5225f4d":"data.loc[data['product_code'] == '', 'product_code'] = '00000'","83806309":"data['product_code'].value_counts().sort_values(ascending = False).head()","b5f87f9c":"data.info()","743f5d98":"objectData = data.select_dtypes(include = ['object', 'category']).head()","96bcdb04":"objectData.columns.tolist()","fee4eb85":"data.drop(['Weekday', 'DepartmentDescription','number_ScanCount'], axis = 1, inplace = True)","719cc022":"print('The data information'.center(50, '-') + '\\n')\nprint(data.shape)\ndata.sample(3)","8572c62f":" - The funciton to delete the 'nan'"}}