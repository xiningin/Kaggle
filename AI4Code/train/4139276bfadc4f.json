{"cell_type":{"ef84f7f4":"code","00dedfc4":"code","54e62dbd":"code","dbcd043c":"code","91a3b337":"code","583ccde6":"markdown","922d5948":"markdown","d80f10bb":"markdown"},"source":{"ef84f7f4":"# All the imports:\n\n# to work with data frames \nimport pandas as pd\n\n# to preprocess the data\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\n\n# for modelling\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor\n\n# for the metrics\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import cross_val_score\n\n# to read the data\nX_test = pd.read_csv('..\/input\/test.csv', index_col='Id')\ntrain_data = pd.read_csv('..\/input\/train.csv', index_col='Id')\n\n# Remove rows with missing target, separate target from predictors\ntrain_data.dropna(axis=0, subset=['SalePrice'], inplace=True)\ny_train = train_data.SalePrice\nX_train = train_data.drop(['SalePrice'], axis=1)","00dedfc4":"# Select categorical columns\ncategorical_cols = [col for col in X_train.columns if\n                    X_train[col].nunique() < 10 and \n                    X_train[col].dtype == \"object\"]\n\n# Select numerical columns\nnumerical_cols = [col for col in X_train.columns if \n                X_train[col].dtype in ['int64', 'float64']]\n\nmy_cols = categorical_cols + numerical_cols\nX_train = X_train[my_cols].copy()\n\n# Preprocessing for numerical data\nnumerical_transformer = SimpleImputer(strategy='most_frequent')\n                  \n# Preprocessing for categorical data\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n\n# Bundle preprocessing for numerical and categorical data\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_cols),\n        ('cat', categorical_transformer, categorical_cols)\n    ])","54e62dbd":"# Define model\nmodel = XGBRegressor(n_estimators = 1300, learning_rate=0.04, random_state = 1)\n\n# Bundle preprocessing and modeling code in a pipeline\npipe = Pipeline(steps=[('preprocessor', preprocessor),\n                      ('model', model)\n                     ])\n\n# Fit the model \npipe.fit(X_train, y_train)\n\n# Use cross-validation to compute the average mae score\nscore = cross_val_score(pipe, X_train, y_train, scoring = \"neg_mean_absolute_error\", cv = 4)\nprint(score)\nprint(\"Mean score: %d\" %(-1 * score.mean()))","dbcd043c":"# Preprocessing of test data\nX_test = X_test[my_cols].copy()\n# Predict on the test data\npreds_test = pipe.predict(X_test)","91a3b337":"# Save test predictions to file\noutput = pd.DataFrame({'Id': X_test.index,\n                       'SalePrice': preds_test})\noutput.to_csv('submission.csv', index=False)","583ccde6":"**This kernel summarizes all the topics (except data leakage) covered in the Intermediate ML course applied to the House Prices Competition.**","922d5948":"**Deal with missing values and categorical variables**","d80f10bb":"---\n**[Intermediate Machine Learning Home Page](https:\/\/www.kaggle.com\/learn\/intermediate-machine-learning)**\n\n\n\n\n\n*Have questions or comments? Visit the [Learn Discussion forum](https:\/\/www.kaggle.com\/learn-forum) to chat with other Learners.*"}}