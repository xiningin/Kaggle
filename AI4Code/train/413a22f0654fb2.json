{"cell_type":{"e3a64d64":"code","3aa4697b":"code","d6ea83e0":"code","1cb6a329":"code","92962e94":"code","ba9963bd":"code","02e806f0":"code","8a75d53f":"code","70f40c56":"code","1f0c97ef":"code","e7620e53":"code","8b081f31":"code","19381be8":"code","cebe6f42":"code","6dacaf0f":"code","a41fa743":"code","20deb70c":"code","1259d170":"code","d1f18cc4":"code","5f5cd2c7":"code","fcd42ffe":"code","e1a3d2d3":"code","47bc9fd9":"code","fa0da715":"code","c27631de":"code","480c345d":"code","89e365de":"code","645ddbd5":"code","c53aebb4":"code","58e9ad48":"code","914b43d9":"code","bd30034d":"code","ef9e5c3e":"code","6d86b3e0":"markdown","c4c5eb7d":"markdown","73ae80ac":"markdown","2f9374c6":"markdown","92e4f4b2":"markdown","6a21fa1e":"markdown"},"source":{"e3a64d64":"# This Python 3 environment comes with many helpful analytics libraries installed\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport time\nimport math\nimport seaborn as sns\n%matplotlib inline\n\n","3aa4697b":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntrain.head()","d6ea83e0":"test = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest.head()","1cb6a329":"train.info()","92962e94":"test.info()","ba9963bd":"all = pd.concat([train, test], sort = False)\nall.info()","02e806f0":"#Fill Missing numbers with median\nall['Age'] = all['Age'].fillna(value=all['Age'].median())\nall['Fare'] = all['Fare'].fillna(value=all['Fare'].median())","8a75d53f":"all.info()","70f40c56":"sns.catplot(x = 'Embarked', kind = 'count', data = all) #or \nall['Embarked'].value_counts()","1f0c97ef":"all['Embarked'] = all['Embarked'].fillna('S')\nall.info()","e7620e53":"#Age\nall.loc[ all['Age'] <= 16, 'Age'] = 0\nall.loc[(all['Age'] > 16) & (all['Age'] <= 32), 'Age'] = 1\nall.loc[(all['Age'] > 32) & (all['Age'] <= 48), 'Age'] = 2\nall.loc[(all['Age'] > 48) & (all['Age'] <= 64), 'Age'] = 3\nall.loc[ all['Age'] > 64, 'Age'] = 4 ","8b081f31":"#Title\nimport re\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+\\.)', name)\n    \n    if title_search:\n        return title_search.group(1)\n    return \"\"","19381be8":"all['Title'] = all['Name'].apply(get_title)\nall['Title'].value_counts()","cebe6f42":"all['Title'] = all['Title'].replace(['Capt.', 'Dr.', 'Major.', 'Rev.'], 'Officer.')\nall['Title'] = all['Title'].replace(['Lady.', 'Countess.', 'Don.', 'Sir.', 'Jonkheer.', 'Dona.'], 'Royal.')\nall['Title'] = all['Title'].replace(['Mlle.', 'Ms.'], 'Miss.')\nall['Title'] = all['Title'].replace(['Mme.'], 'Mrs.')\nall['Title'].value_counts()","6dacaf0f":"#Cabin\nall['Cabin'] = all['Cabin'].fillna('Missing')\nall['Cabin'] = all['Cabin'].str[0]\nall['Cabin'].value_counts()","a41fa743":"#Family Size & Alone \nall['Family_Size'] = all['SibSp'] + all['Parch'] + 1\nall['IsAlone'] = 0\nall.loc[all['Family_Size']==1, 'IsAlone'] = 1\nall.head()","20deb70c":"#Drop unwanted variables\nall_1 = all.drop(['Name', 'Ticket'], axis = 1)\nall_1.head()","1259d170":"all_dummies = pd.get_dummies(all_1, drop_first = True)\nall_dummies.head()","d1f18cc4":"all_train = all_dummies[all_dummies['Survived'].notna()]\nall_train.info()","5f5cd2c7":"all_test = all_dummies[all_dummies['Survived'].isna()]\nall_test.info()","fcd42ffe":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(all_train.drop(['PassengerId','Survived'],axis=1), \n                                                    all_train['Survived'], test_size=0.30, \n                                                    random_state=101)","e1a3d2d3":"from sklearn.linear_model import LogisticRegression","47bc9fd9":"logmodel = LogisticRegression(solver = 'liblinear')\nlogmodel.fit(X_train,y_train)","fa0da715":"predictions = logmodel.predict(X_test)\npredictions","c27631de":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,predictions))","480c345d":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test,predictions)","89e365de":"all_test.head()","645ddbd5":"TestForPred = all_test.drop(['PassengerId', 'Survived'], axis = 1)","c53aebb4":"TestForPred.info()","58e9ad48":"t_pred = logmodel.predict(TestForPred).astype(int)","914b43d9":"PassengerId = all_test['PassengerId']","bd30034d":"logSub = pd.DataFrame({'PassengerId': PassengerId, 'Survived':t_pred })\nlogSub.head()","ef9e5c3e":"logSub.to_csv(\"Titanic_Predection.csv\", index = False)","6d86b3e0":"****Confusion Matrix","c4c5eb7d":"****Extra Features:","73ae80ac":"****Build Logistic Model","2f9374c6":"****Train\/Test Split","92e4f4b2":"****Check Accuracy","6a21fa1e":"****Final Predictions"}}