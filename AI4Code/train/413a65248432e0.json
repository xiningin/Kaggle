{"cell_type":{"bd741dc0":"code","689bc57e":"code","8360292d":"code","17f0ad26":"code","e07f4336":"code","06fb7eaf":"code","07c3cf29":"code","24dca552":"code","9d30b2e3":"code","4a58209d":"code","876e24cb":"code","6a9329de":"code","da31f5c7":"code","e9955cd9":"code","17b41a0f":"code","e75e1a37":"code","ad0edbce":"code","c13ab5a4":"code","26cb9b85":"code","34419355":"code","68beb6ca":"code","291c1d0f":"code","7e35cbe7":"code","af515508":"code","b8dbb1bd":"code","b14a2165":"code","030fd0a9":"code","502ce970":"code","1b878073":"code","67d7e8ad":"code","782da8eb":"code","a61fe66f":"code","2193a388":"code","fb6e22ca":"code","44d665db":"code","0bd129e9":"code","54efb77e":"code","70ce9140":"code","34fbc8d0":"code","c1e62935":"code","6c98ac1d":"code","b73ed275":"code","38c315b3":"code","1b0d6ee1":"code","efe88024":"code","5a4ec11c":"code","32255ae5":"code","72d27523":"code","9841a4b6":"code","7efb0a85":"code","9ad010ab":"code","2860ea0f":"code","8d87f06b":"code","5649b8a3":"code","44b20544":"code","028dceb7":"code","4c76af30":"code","01f483de":"code","0f6dbd2f":"code","1d81be70":"code","7f013b0f":"code","0ae67fd2":"code","56d59f3e":"code","9ef96598":"code","5082025b":"code","0e87ae96":"code","d3c39381":"code","cb6cc5f4":"code","4fac9424":"code","c40f3312":"code","fb40edb5":"code","5dc3f66b":"code","99197924":"code","ff5802c0":"code","7d4a2c1b":"code","d5248f32":"code","02c51ec5":"code","7c70dfdd":"code","6b5462d2":"code","6fe53d80":"code","daee0637":"code","6884c432":"code","3eea6552":"code","afa75a2a":"code","d34f0fc6":"markdown","bdb99a22":"markdown","317de7b3":"markdown","08129942":"markdown","a4b83967":"markdown","88a484f4":"markdown","506e7a88":"markdown","a32f2112":"markdown","be4c6602":"markdown","f1b24ddf":"markdown","a964a976":"markdown","010dd335":"markdown","13aac68e":"markdown","9be5472b":"markdown","c58a0abb":"markdown","8e2b5c74":"markdown","adcd69c7":"markdown","eb31e54b":"markdown","4f9d6f45":"markdown","633da52c":"markdown","505e2677":"markdown","462af00a":"markdown","f86728e7":"markdown","3f32dc4b":"markdown","8641beba":"markdown","910bc79b":"markdown","be56e35a":"markdown","73903840":"markdown","4275d760":"markdown","8cb3f63a":"markdown","edd2ca20":"markdown","fb03fa59":"markdown","03906028":"markdown","409431ae":"markdown","21ad2c06":"markdown","4f367b11":"markdown","c571f0f4":"markdown","5d9af6f7":"markdown","6da26361":"markdown","a723c8ed":"markdown","3bfcfb04":"markdown","b69c2e9d":"markdown","77e1f704":"markdown","771f2e57":"markdown","ddc77f59":"markdown","bfc575df":"markdown","a2bdfb37":"markdown"},"source":{"bd741dc0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n#plt.style.avaliable # show the use methods\n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","689bc57e":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassangerId = test_df[\"PassengerId\"]","8360292d":"train_df.columns","17f0ad26":"train_df.head()","e07f4336":"train_df.describe()","06fb7eaf":"train_df.info()","07c3cf29":"def bar_plot(variable):\n    \"\"\"\n        input: variable ex: \"Sex\"\n        output: bar plot & value count\n    \"\"\"\n    # Get feature\n    var = train_df[variable]\n    # Count number of categorical variable (value\/sample)\n    varValue = var.value_counts()\n    \n    # Visualize\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n{}\".format(variable,varValue))","24dca552":"category1 = [\"Survived\", \"Sex\", \"Pclass\", \"Embarked\", \"SibSp\", \"Parch\"]\n\nfor c in category1:\n    bar_plot(c)","9d30b2e3":"category2 = [\"Cabin\", \"Name\", \"Ticket\"]\n\nfor c in category2:\n    print(\"{}\\n\".format(train_df[c].value_counts()))","4a58209d":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable], bins=50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with histogram\".format(variable))\n    plt.show()","876e24cb":"numericVar = [\"Fare\", \"Age\", \"PassengerId\"]\n\nfor n in numericVar:\n    plot_hist(n)","6a9329de":"# Pclass vs Survived\ntrain_df[[\"Pclass\", \"Survived\"]].groupby([\"Pclass\"], as_index= False).mean().sort_values(by=\"Survived\", ascending=False)","da31f5c7":"# Sex vs Survived\ntrain_df[[\"Sex\", \"Survived\"]].groupby([\"Sex\"], as_index= False).mean().sort_values(by=\"Survived\", ascending=False)","e9955cd9":"# SibSp vs Survived\ntrain_df[[\"SibSp\", \"Survived\"]].groupby([\"SibSp\"], as_index= False).mean().sort_values(by=\"Survived\", ascending=False)","17b41a0f":"# Parch vs Survived\ntrain_df[[\"Parch\", \"Survived\"]].groupby([\"Parch\"], as_index= False).mean().sort_values(by=\"Survived\", ascending=False)","e75e1a37":"def detect_outliers(df,features):\n    outlier_indicies = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # Detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # store indeces\n        outlier_indicies.extend(outlier_list_col)\n    \n    outlier_indicies = Counter(outlier_indicies)\n    multiple_outliers = list(i for i, v in outlier_indicies.items() if v > 2)\n    \n    return multiple_outliers","ad0edbce":"train_df.loc[detect_outliers(train_df,[\"Age\", \"SibSp\", \"Parch\", \"Fare\"])]","c13ab5a4":"# drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\", \"SibSp\", \"Parch\", \"Fare\"]), axis=0).reset_index(drop = True)","26cb9b85":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df], axis=0).reset_index(drop = True)","34419355":"train_df.head()","68beb6ca":"train_df.columns[train_df.isnull().any()]","291c1d0f":"train_df.isnull().sum()","7e35cbe7":"train_df[train_df[\"Embarked\"].isnull()]","af515508":"train_df.boxplot(column=\"Fare\", by=\"Embarked\")\nplt.show()","b8dbb1bd":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","b14a2165":"train_df[train_df[\"Fare\"].isnull()]","030fd0a9":"np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"])","502ce970":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))\ntrain_df[train_df[\"Fare\"].isnull()]","1b878073":"list1 = [\"SibSp\", \"Parch\", \"Age\", \"Fare\", \"Survived\"]\nsns.heatmap(train_df[list1].corr(), annot = True, fmt = \".2f\")\nplt.show()","67d7e8ad":"g = sns.factorplot(x = \"SibSp\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","782da8eb":"g = sns.factorplot(x = \"Parch\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","a61fe66f":"g = sns.factorplot(x = \"Pclass\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","2193a388":"g = sns.FacetGrid(train_df, col = \"Survived\")\ng.map(sns.distplot, \"Age\", bins = 25)\nplt.show()","fb6e22ca":"g = sns.FacetGrid(train_df, col = \"Survived\", row = \"Pclass\", size = 3)\ng.map(plt.hist, \"Age\", bins = 25)\ng.add_legend()\nplt.show()","44d665db":"g = sns.FacetGrid(train_df, row = \"Embarked\", size = 3)\ng.map(sns.pointplot, \"Pclass\", \"Survived\", \"Sex\")\ng.add_legend()\nplt.show()","0bd129e9":"g = sns.FacetGrid(train_df, row = \"Embarked\", col = \"Survived\", size = 3)\ng.map(sns.barplot, \"Sex\", \"Fare\")\ng.add_legend()\nplt.show()","54efb77e":"train_df[train_df[\"Age\"].isnull()]","70ce9140":"sns.factorplot(x = \"Sex\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","34fbc8d0":"sns.factorplot(x = \"Sex\", y = \"Age\", hue = \"Pclass\", data = train_df, kind = \"box\")\nplt.show()","c1e62935":"sns.factorplot(x = \"Parch\", y = \"Age\", data = train_df, kind = \"box\")\nsns.factorplot(x = \"SibSp\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","6c98ac1d":"train_df[\"Sex\"] = [1 if i == \"male\" else 0 for i in train_df[\"Sex\"]]","b73ed275":"sns.heatmap(train_df[[\"Age\", \"Sex\", \"SibSp\", \"Parch\", \"Pclass\"]].corr(), annot = True)\nplt.show()","38c315b3":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\n\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][(train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) & (train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"]) & (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"])].median()\n    age_med = train_df[\"Age\"].median()\n    \n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med","1b0d6ee1":"train_df[train_df[\"Age\"].isnull()]","efe88024":"train_df[\"Name\"].head(10)","5a4ec11c":"name = train_df[\"Name\"]\ntrain_df[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name]","32255ae5":"sns.countplot(x=\"Title\", data = train_df)\nplt.xticks(rotation = 90)\nplt.show()","72d27523":"# Convert to categorical\ntrain_df[\"Title\"] = train_df[\"Title\"].replace([\"Don\", \"Master\", \"Rev\", \"Dr\", \"Major\", \"Lady\", \"Sir\", \"Col\", \"Capt\", \"the Countess\", \"Jonkheer\", \"Dona\"], \"other\")\ntrain_df[\"Title\"] = [0 if i == \"Miss\" or i == \"Ms\" or i == \"Mlle\" or i == \"Mrs\" else 1 if i == \"Mr\" else 2 for i in train_df[\"Title\"]]","9841a4b6":"sns.countplot(x=\"Title\", data = train_df)\nplt.xticks(rotation = 90)\nplt.show()","7efb0a85":"g = sns.factorplot(x = \"Title\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_xticklabels([\"Mrs\", \"Mr\", \"Other\"])\ng.set_ylabels(\"Survival Probability\")\nplt.show()","9ad010ab":"train_df.drop(labels = [\"Name\"], axis = 1, inplace = True)","2860ea0f":"train_df.head()","8d87f06b":"train_df = pd.get_dummies(train_df, columns = [\"Title\"]) # Title names: \"Master\", \"Mrs\", \"Mr\", \"Other\"\ntrain_df.head()","5649b8a3":"train_df.head()","44b20544":"train_df[\"Fsize\"] = train_df[\"SibSp\"] + train_df[\"Parch\"] + 1","028dceb7":"train_df.head()","4c76af30":"g = sns.factorplot(x = \"Fsize\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","01f483de":"train_df[\"family_size\"] = [1 if i < 5 else 0 for i in train_df[\"Fsize\"]]","0f6dbd2f":"sns.countplot(x = \"family_size\", data = train_df)\nplt.show()","1d81be70":"g = sns.factorplot(x = \"family_size\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","7f013b0f":"train_df = pd.get_dummies(train_df, columns = [\"family_size\"]) # Title names: \"x >=5\", \"x <= 4\"\ntrain_df.head()","0ae67fd2":"sns.countplot(x = \"Embarked\", data = train_df)\nplt.show()","56d59f3e":"train_df = pd.get_dummies(train_df, columns = [\"Embarked\"]) # Title names: \"S\", \"C\", \"Q\"\ntrain_df.head()","9ef96598":"train_df[\"Ticket\"].head(20)","5082025b":"tickets= []\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\n\ntrain_df[\"Ticket\"] = tickets","0e87ae96":"train_df[\"Ticket\"].head(20)","d3c39381":"train_df = pd.get_dummies(train_df, columns = [\"Ticket\"], prefix = \"T\")\ntrain_df.head()","cb6cc5f4":"sns.countplot(x = \"Pclass\", data = train_df)\nplt.show()","4fac9424":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns = [\"Pclass\"])\ntrain_df.head()","c40f3312":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns = [\"Sex\"])\ntrain_df.head()","fb40edb5":"train_df.drop(labels = [\"PassengerId\", \"Cabin\"], axis = 1, inplace = True)","5dc3f66b":"train_df.columns","99197924":"# Library import\nfrom sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","ff5802c0":"train_df_len","7d4a2c1b":"test = train_df[train_df_len:]\ntest.drop(labels = [\"Survived\"], axis = 1, inplace = True)\ntest.head()","d5248f32":"train = train_df[:train_df_len]\nX_train = train.drop(labels = \"Survived\", axis = 1)\nY_train = train[\"Survived\"]\nx_train, x_test, y_train, y_test = train_test_split(X_train, Y_train, test_size = 0.33, random_state = 42)\nprint(\"x_train\", len(x_train))\nprint(\"x_test\", len(x_test))\nprint(\"y_train\", len(y_train))\nprint(\"y_test\", len(y_test))\nprint(\"test\", len(test))","02c51ec5":"logreg = LogisticRegression()\nlogreg.fit(x_train, y_train)\nacc_log_train = round(logreg.score(x_train, y_train)*100,2)\nacc_log_test = round(logreg.score(x_test, y_test)*100,2)\nprint(\"Training Accuracy: %{}\".format(acc_log_train))\nprint(\"Testing Accuracy: %{}\".format(acc_log_test))","7c70dfdd":"random_state = 42\nclassifiers = [DecisionTreeClassifier(random_state = random_state),\n              SVC(random_state=random_state, probability=True),\n              RandomForestClassifier(random_state=random_state),\n              LogisticRegression(random_state=random_state),\n              KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\" : range(10,20,10), # range(10,500,20)\n                \"max_depth\" : [3]} # range(1,20,2)\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\" : [0.001], # 0.001, 0.01, 0.1, 1\n                 \"C\" : [300]} # 1,10,50,100,200,300,1000\n\nrf_param_grid = {\"max_features\" : [10], #1,3\n                \"min_samples_split\" : [3,10],\n                \"min_samples_leaf\" : [3], #1,10\n                \"bootstrap\" : [False],\n                \"n_estimators\" : [100,300],\n                \"criterion\" : [\"gini\"]}\n\nlogreg_param_grid = {\"C\" : np.logspace(5,6,1), # -3,3,7\n                    \"penalty\" : [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\" : np.linspace(8,9,1, dtype = int).tolist(), # 1,19,10\n                 \"weights\" : [\"uniform\",\"distance\"],\n                 \"metric\" : [\"manhattan\"]} # \"euclidean\"\n\nclassifier_param = [dt_param_grid,\n                    svc_param_grid,\n                    rf_param_grid,\n                    logreg_param_grid,\n                    knn_param_grid]\n","6b5462d2":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifiers)):\n    clf = GridSearchCV(classifiers[i], param_grid = classifier_param[i], cv = StratifiedKFold(n_splits=10), scoring = \"accuracy\", n_jobs = -1, verbose = 1)\n    clf.fit(x_train, y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    \n    print(cv_result[i])\n    ","6fe53d80":"best_estimators","daee0637":"cv_results = pd.DataFrame({\"Cross Validation Means\" : cv_result, \n                          \"ML Models\" : [\"DecisionTreeClassifier\", \"SVC\", \"RandomForestClassifier\", \"LogisticRegression\", \"KNeighborsClassifier\"]})\n\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")\n","6884c432":"votingC = VotingClassifier(estimators=[(\"dt\", best_estimators[0]), \n                                      (\"rfc\", best_estimators[2]), \n                                      (\"lr\", best_estimators[3]),\n                                      (\"svc\", best_estimators[1]),\n                                      (\"knn\", best_estimators[4])],\n                                      voting = \"soft\", n_jobs = -1)","3eea6552":"votingC = votingC.fit(x_train, y_train)\nprint(accuracy_score(votingC.predict(x_test), y_test))","afa75a2a":"test_survived = pd.Series(votingC.predict(test), name = \"Survived\").astype(int)\nresults = pd.concat([test_PassangerId, test_survived], axis = 1)\nresults.to_csv(\"titanic.csv\", index = False)","d34f0fc6":"* Small families have more chance to survive than large family.","bdb99a22":"* Age is not correlated with sex but it is correlated with parch, sibsp and pclass.","317de7b3":"<a id=\"18\"><\/a>\n## Embarked -- Sex -- Pclass -- Survived","08129942":"<a id=\"15\"><\/a>\n## Pclass -- Survived","a4b83967":"<a id=\"33\"><\/a>  \n## Ensemble Modeling","88a484f4":"* SibSp and Parch can be used for new feature extraction with th = 3.\n* Small families have more chance to survive.\n* There is a std in survival of passanger with parch = 3.","506e7a88":"<a id=\"14\"><\/a>\n## Parch -- Survived","a32f2112":"<a id=\"10\"><\/a>\n## Fill Missing Value\n* Embarked has 2 missing value\n* Fare has only 1 missing value","be4c6602":"<a id=\"25\"><\/a>\n## Ticket","f1b24ddf":"<a id=\"20\"><\/a>\n## Fill Missing: Age Feature","a964a976":"<a id=\"3\"><\/a>\n# Univariate Variable Analysis\n* Categorical Variable: Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsp and Parch\n* Numerical Variable: Age, PassangerId and Fare","010dd335":"* 1st class passangers are older than 2nd, and 2nd class is older than 3rd class.","13aac68e":"<a id=\"23\"><\/a>\n## Family Size","9be5472b":"<a id=\"5\"><\/a>\n## Numerical Variable","c58a0abb":"<a id=\"29\"><\/a>\n# Modeling","8e2b5c74":"<a id=\"32\"><\/a>\n## Hyperparameter Tuning -- Grid Search -- Cross Validation\n* We will compare 5 machine learning classifier and evaluate mean accuracy of each of them by stratified cross validation.\n\n* Decision Tree\n* SVM\n* Random Forest\n* KNN\n* Logistic Regression","adcd69c7":"<a id=\"34\"><\/a>  \n## Prediction and Submission ","eb31e54b":"<a id=\"26\"><\/a>\n## Pclass","4f9d6f45":"<a id=\"31\"><\/a>\n## Simple Logistic Regression\n","633da52c":"* We can use directly for ml.","505e2677":"<a id=\"7\"><\/a>\n# Outlier Detection","462af00a":"* Passangers who pay higher fare have better survival.\n* Fare can be used for categorical for training.","f86728e7":"<a id=\"13\"><\/a>\n## SibSp -- Survived","3f32dc4b":"<a id=\"28\"><\/a>\n## Drop Passanger ID and Cabin","8641beba":"<a id=\"6\"><\/a>\n# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","910bc79b":"<a id=\"27\"><\/a>\n## Sex","be56e35a":"<a id=\"11\"><\/a>\n# Visualization","73903840":"* Female passangers have much better survival rate than males.\n* Males have better survival rate in pclass 3 in C.\n* Embarked and sex will be used in training.","4275d760":"* Age <= 10 has a high survival rate\n* Oldest passangers (80) survived.\n* Large number of 20 years old did not survive.\n* Most passangers are in 15-35 afe range.\n* Use age feature in traning.\n* Use age distribution for missing value of age.","8cb3f63a":"<a id=\"9\"><\/a>\n## Find Missing Value","edd2ca20":"<a id=\"30\"><\/a>\n## Train - Test Split","fb03fa59":"<a id=\"21\"><\/a>\n# Feature Engineering","03906028":"<a id=\"8\"><\/a>\n# Missing Value\n* Find Missing Value\n* Fill Missing Value","409431ae":"<a id=\"16\"><\/a>\n## Age -- Survived","21ad2c06":"<a id=\"2\"><\/a>\n# Variable Description\n1. PassengerId: Uniqe id number to each passanger\n1. Survived: Passanger survive(1) or die(0)\n1. Pclass: Passanger \n1. Name: Name\n1. Sex: Gender of passanger\n1. Age: Age of passanger\n1. SibSp: Number of siblings\/spouses\n1. Parch: Number of parent\/children\n1. Ticket: Ticket number\n1. Fare: Amount of money spent on ticket\n1. Cabin: Cabin category\n1. Embarked: Port shere passanger embarked (C = Cherbourg, Q = Queenstown, S = Southampton)","4f367b11":"<a id=\"22\"><\/a>\n## Name -- Title","c571f0f4":"* Survived and fare is good value","5d9af6f7":"<a id=\"12\"><\/a>\n## Correlation Between SibSp -- Parch -- Age -- Fare -- Survived","6da26361":"* float64(2): Fare and Age\n* int64(5): Pclass, Sibsp, Parch, PassangerId and Survived\n* object(5): Cabin, Embarked, Ticket, Name and Gender","a723c8ed":"<a id=\"1\"><\/a>\n# Load and Check Data","3bfcfb04":"* Having a lot of SibSp have less chance the survive.\n* If sibsp == 0 or 1 or 2, passanger has more chance to survive.\n* We can consider a new feature describing these categories.","b69c2e9d":"# INTRODUCTION\nThe sinking of Titanic  is one of the most notorious shipwrecks in the history. In 1912, during her voyage, the Titanic sank after colliding with an iceberg, killing 1502 out of 2224 passangers and crew.\n<font color = 'blue'>\n    \n(I worked hard, please don't forget to vote)\n    \nContent: \n\n1. [Load and Check Data](#1)\n1. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable](#4)\n        * [Numerical Variable](#5)\n    \n1. [Basic Data Analysis](#6)  \n1. [Outlier Detection](#7)\n1. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n    \n1. [Visualization](#11)    \n    * [Correlation Between SibSp -- Parch -- Age -- Fare -- Survived](#12)\n    * [SibSp -- Survived](#13)\n    * [Parch -- Survived](#14)\n    * [Pclass -- Survived](#15)\n    * [Age -- Survived](#16)\n    * [Age -- Pclass -- Survived](#17)\n    * [Embarked -- Sex -- Pclass -- Survived](#18)\n    * [Embarked -- Sex -- Fare -- Survived](#19)\n    * [Fill Missing: Age Feature](#20)\n    \n1. [Feature Engineering](#21)\n    * [Name -- Title](#22)  \n    * [Family Size](#23) \n    * [Embarked](#24)\n    * [Ticket](#25)\n    * [Pclass](#26)\n    * [Sex](#27)\n    * [Drop Passanger ID and Cabin](#28)\n\n1. [Modeling](#29)\n    * [Train - Test Split](#30)\n    * [Simple Logistic Regression](#31)\n    * [Hyperparameter Tuning -- Grid Search -- Cross Validation](#32)\n    * [Ensemble Modeling](#33)\n    * [Prediction and Submission](#34)\n    \n<a id=\"home\"><\/a>    ","77e1f704":"<a id=\"24\"><\/a>\n## Embarked","771f2e57":"<a id=\"17\"><\/a>\n## Age -- Pclass -- Survived","ddc77f59":"<a id=\"19\"><\/a>\n## Embarked -- Sex -- Fare -- Survived","bfc575df":"* Sex is not informative for age prediction, age distribution seems to be same.","a2bdfb37":"<a id=\"4\"><\/a>\n## Categorical Variable"}}