{"cell_type":{"7a1c8bfa":"code","a0cc4278":"code","6c6e40ce":"code","1f526e0a":"code","153d4125":"code","c25d273b":"code","d5aec9c0":"code","08ecb38b":"code","6044bc8b":"code","65191eea":"code","cfb7a785":"code","94908f17":"code","6c84e4a2":"code","271d49ea":"code","e5d91531":"code","049fd17b":"code","4e9f3b2e":"code","98481ea6":"code","5acbaa26":"code","ae079ff1":"code","df9e8d11":"code","73cc3461":"code","0bd05d20":"code","aa584b02":"code","2d5d9412":"code","af4ce233":"code","2c243de9":"code","27133abc":"code","ee5889ca":"code","a01db9a0":"code","6d7b4fd8":"code","197c962f":"code","b9cc1382":"code","f0fec660":"code","c700c29b":"code","95f4a365":"code","88048381":"code","e528ae8e":"code","d23dde44":"code","e05a57ca":"code","2fc2166c":"code","d4634961":"code","d2e95df4":"code","ea2468c1":"code","507ca2b9":"code","5d223e00":"code","1ebdd932":"code","0fcee462":"code","99e2001a":"code","05d3fb1d":"code","ef1eb769":"code","b2279744":"code","a69fbc7d":"code","8d345141":"code","dc97e718":"code","4093f5e8":"code","d64c8535":"code","0304c087":"code","90968052":"code","91e8ce93":"code","181d1140":"code","fdb8c847":"code","b081a32e":"code","f0aefadb":"code","e0b12aaa":"code","ea0edf95":"code","705b8994":"code","aa7aa298":"code","2b1dd0cd":"code","89ab5ff1":"code","300288b1":"code","dbc1a224":"code","485addf7":"code","89fc9a27":"code","2a26ef64":"code","59c09313":"code","f434e1d6":"code","bcdfb76c":"markdown","8cd313bf":"markdown","97de9e81":"markdown","107a4b99":"markdown","b21ce949":"markdown","2b7b4b57":"markdown","d35ec5b1":"markdown","90d1d19a":"markdown","061a0de5":"markdown","bee80617":"markdown","47768702":"markdown","4ff28623":"markdown","864bcd74":"markdown","403d66b0":"markdown","8faaecdc":"markdown","7a8aecf2":"markdown","c9261755":"markdown","c37b7f7a":"markdown","7f8e1364":"markdown","949773c4":"markdown","a1a292da":"markdown","94743d7a":"markdown","511ef483":"markdown","bb84d7ea":"markdown","88e211ea":"markdown","1cef5167":"markdown","94bce173":"markdown","e6c8a94b":"markdown","48c4b3a7":"markdown","7473f17a":"markdown","02622b9a":"markdown","3d52f94e":"markdown","4bec9819":"markdown","ad0f42d5":"markdown","f7916956":"markdown","caf95cfd":"markdown","8007266d":"markdown","8206d478":"markdown","45a233e6":"markdown","ad33c709":"markdown","575fb830":"markdown","f4b4a044":"markdown","9263544a":"markdown","327a37ce":"markdown","e19c9ce0":"markdown","0539d9cb":"markdown","e6c570d1":"markdown","ab65d628":"markdown","f775d54b":"markdown","552b0a47":"markdown","2a79150f":"markdown","ebacc146":"markdown","fa6aeb2f":"markdown","cfa1ec73":"markdown","c5bd72cc":"markdown","51ef6db4":"markdown","66b4d191":"markdown","853b0098":"markdown","2432a14e":"markdown","e5cc93f8":"markdown","b556351f":"markdown"},"source":{"7a1c8bfa":"# Import libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split","a0cc4278":"PATH = '..\/input\/'","6c6e40ce":"train_data = pd.read_csv(PATH + 'train.csv')\ntest_data = pd.read_csv(PATH + 'test.csv')\ngender_submission = pd.read_csv(PATH + 'gender_submission.csv')","1f526e0a":"train_data.head()","153d4125":"test_data.head()","c25d273b":"train_data.describe()","d5aec9c0":"train_data.columns","08ecb38b":"train_data.dtypes","6044bc8b":"column_names = train_data.columns\nfor column in column_names:\n    print(column + ' - ' + str(train_data[column].isnull().sum()))","65191eea":"train_data.Survived.value_counts()","cfb7a785":"plt = train_data.Survived.value_counts().plot('bar')\nplt.set_xlabel('Survived or not')\nplt.set_ylabel('Passenger Count')","94908f17":"plt = train_data.Pclass.value_counts().sort_index().plot('bar', title='')\nplt.set_xlabel('Pclass')\nplt.set_ylabel('Survival Probability')","6c84e4a2":"train_data[['Pclass', 'Survived']].groupby('Pclass').count()","271d49ea":"train_data[['Pclass', 'Survived']].groupby('Pclass').sum()","e5d91531":"plt = train_data[['Pclass', 'Survived']].groupby('Pclass').mean().Survived.plot('bar')\nplt.set_xlabel('Pclass')\nplt.set_ylabel('Survival Probability')","049fd17b":"plt = train_data.Sex.value_counts().sort_index().plot('bar')\nplt.set_xlabel('Sex')\nplt.set_ylabel('Passenger count')","4e9f3b2e":"plt = train_data[['Sex', 'Survived']].groupby('Sex').mean().Survived.plot('bar')\nplt.set_xlabel('Sex')\nplt.set_ylabel('Survival Probability')","98481ea6":"plt = train_data.Embarked.value_counts().sort_index().plot('bar')\nplt.set_xlabel('Embarked')\nplt.set_ylabel('Passenger count')","5acbaa26":"plt = train_data[['Embarked', 'Survived']].groupby('Embarked').mean().Survived.plot('bar')\nplt.set_xlabel('Embarked')\nplt.set_ylabel('Survival Probability')","ae079ff1":"plt = train_data.SibSp.value_counts().sort_index().plot('bar')\nplt.set_xlabel('SibSp')\nplt.set_ylabel('Passenger count')","df9e8d11":"plt = train_data[['SibSp', 'Survived']].groupby('SibSp').mean().Survived.plot('bar')\nplt.set_xlabel('SibSp')\nplt.set_ylabel('Survival Probability')","73cc3461":"plt = train_data.Parch.value_counts().sort_index().plot('bar')\nplt.set_xlabel('Parch')\nplt.set_ylabel('Passenger count')","0bd05d20":"plt = train_data[['Parch', 'Survived']].groupby('Parch').mean().Survived.plot('bar')\nplt.set_xlabel('Parch')\nplt.set_ylabel('Survival Probability')","aa584b02":"sns.factorplot('Pclass', col = 'Embarked', data = train_data, kind = 'count')","2d5d9412":"sns.factorplot('Sex', col = 'Pclass', data = train_data, kind = 'count')","af4ce233":"sns.factorplot('Sex', col = 'Embarked', data = train_data, kind = 'count')","2c243de9":"train_data.head()","27133abc":"train_data['FamilySize'] = train_data['SibSp'] + train_data['Parch'] + 1","ee5889ca":"train_data.head()","a01db9a0":"train_data = train_data.drop(columns=['Ticket', 'PassengerId', 'Cabin'])","6d7b4fd8":"train_data.head()","197c962f":"train_data['Sex'] = train_data['Sex'].map({'male':0, 'female':1})\ntrain_data['Embarked'] = train_data['Embarked'].map({'C':0, 'Q':1, 'S':2})","b9cc1382":"train_data.head()","f0fec660":"train_data['Title'] = train_data.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\ntrain_data = train_data.drop(columns='Name')","c700c29b":"train_data.Title.value_counts().plot('bar')","95f4a365":"train_data['Title'] = train_data['Title'].replace(['Dr', 'Rev', 'Col', 'Major', 'Countess', 'Sir', 'Jonkheer', 'Lady', 'Capt', 'Don'], 'Others')\ntrain_data['Title'] = train_data['Title'].replace('Ms', 'Miss')\ntrain_data['Title'] = train_data['Title'].replace('Mme', 'Mrs')\ntrain_data['Title'] = train_data['Title'].replace('Mlle', 'Miss')","88048381":"plt = train_data.Title.value_counts().sort_index().plot('bar')\nplt.set_xlabel('Title')\nplt.set_ylabel('Passenger count')","e528ae8e":"plt = train_data[['Title', 'Survived']].groupby('Title').mean().Survived.plot('bar')\nplt.set_xlabel('Title')\nplt.set_ylabel('Survival Probability')","d23dde44":"train_data['Title'] = train_data['Title'].map({'Master':0, 'Miss':1, 'Mr':2, 'Mrs':3, 'Others':4})","e05a57ca":"train_data.head()","2fc2166c":"corr_matrix = train_data.corr()","d4634961":"import matplotlib.pyplot as plt\nplt.figure(figsize=(9, 8))\nsns.heatmap(data = corr_matrix,cmap='BrBG', annot=True, linewidths=0.2)","d2e95df4":"train_data.isnull().sum()","ea2468c1":"train_data['Embarked'].isnull().sum()","507ca2b9":"train_data['Embarked'] = train_data['Embarked'].fillna(2)\ntrain_data.head()","5d223e00":"corr_matrix = train_data[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare']].corr()","1ebdd932":"plt.figure(figsize=(7, 6))\nsns.heatmap(data = corr_matrix,cmap='BrBG', annot=True, linewidths=0.2)","0fcee462":"NaN_indexes = train_data['Age'][train_data['Age'].isnull()].index","99e2001a":"for i in NaN_indexes:\n    pred_age = train_data['Age'][((train_data.SibSp == train_data.iloc[i][\"SibSp\"]) & (train_data.Parch == train_data.iloc[i][\"Parch\"]) & (train_data.Pclass == train_data.iloc[i][\"Pclass\"]))].median()\n    if not np.isnan(pred_age):\n        train_data['Age'].iloc[i] = pred_age\n    else:\n        train_data['Age'].iloc[i] = train_data['Age'].median()","05d3fb1d":"train_data.isnull().sum()","ef1eb769":"train_data.head()","b2279744":"test_data = pd.read_csv(PATH + 'test.csv')","a69fbc7d":"test_data.isnull().sum()","8d345141":"test_data = test_data.drop(columns=['Ticket', 'PassengerId', 'Cabin'])","dc97e718":"test_data.head()","4093f5e8":"test_data['Sex'] = test_data['Sex'].map({'male':0, 'female':1})\ntest_data['Embarked'] = test_data['Embarked'].map({'C':0, 'Q':1, 'S':2})","d64c8535":"test_data.head()","0304c087":"test_data['Title'] = test_data.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\ntest_data = test_data.drop(columns='Name')\n\ntest_data['Title'] = test_data['Title'].replace(['Dr', 'Rev', 'Col', 'Major', 'Countess', 'Sir', 'Jonkheer', 'Lady', 'Capt', 'Don'], 'Others')\ntest_data['Title'] = test_data['Title'].replace('Ms', 'Miss')\ntest_data['Title'] = test_data['Title'].replace('Mme', 'Mrs')\ntest_data['Title'] = test_data['Title'].replace('Mlle', 'Miss')\n\ntest_data['Title'] = test_data['Title'].map({'Master':0, 'Miss':1, 'Mr':2, 'Mrs':3, 'Others':4})","90968052":"test_data.head()","91e8ce93":"test_data.isnull().sum()","181d1140":"NaN_indexes = test_data['Age'][test_data['Age'].isnull()].index\n\nfor i in NaN_indexes:\n    pred_age = train_data['Age'][((train_data.SibSp == test_data.iloc[i][\"SibSp\"]) & (train_data.Parch == test_data.iloc[i][\"Parch\"]) & (test_data.Pclass == train_data.iloc[i][\"Pclass\"]))].median()\n    if not np.isnan(pred_age):\n        test_data['Age'].iloc[i] = pred_age\n    else:\n        test_data['Age'].iloc[i] = train_data['Age'].median()","fdb8c847":"title_mode = train_data.Title.mode()[0]\ntest_data.Title = test_data.Title.fillna(title_mode)","b081a32e":"fare_mean = train_data.Fare.mean()\ntest_data.Fare = test_data.Fare.fillna(fare_mean)","f0aefadb":"test_data['FamilySize'] = test_data['SibSp'] + test_data['Parch'] + 1","e0b12aaa":"test_data.head()","ea0edf95":"train_data.head()","705b8994":"from sklearn.utils import shuffle\ntrain_data = shuffle(train_data)","aa7aa298":"# training_data, valid_data = train_test_split(train_data, test_size=0.2)","2b1dd0cd":"X_train = train_data.drop(columns='Survived')\ny_train = train_data.Survived\ny_train = pd.DataFrame({'Survived':y_train.values})","89ab5ff1":"# X_valid = valid_data.drop(columns='Survived')\n# y_valid = valid_data.Survived","300288b1":"X_test = test_data","dbc1a224":"X_train.head()","485addf7":"y_train.head()","89fc9a27":"X_train.shape","2a26ef64":"y_train.shape","59c09313":"X_test.head()","f434e1d6":"X_train.to_csv('X_train.csv', index=False)\ny_train.to_csv('y_train.csv', index=False)\n\n# X_valid.to_csv('X_valid.csv', index=False)\n# y_valid.to_csv('y_valid.csv', index=False)\n\nX_test.to_csv('X_test.csv', index=False)","bcdfb76c":"- There are two null values in the column 'Embarked'. Let's impute them using majority class.\n- The majority class is 'S'. Impute the unkonown values (NaN) using 'S'","8cd313bf":"### SibSp - Siblings\/Spouse","97de9e81":"- The survival probability for 'Mrs' and 'Miss' is high comapred to other classes.","107a4b99":"### Embarked vs Sex","b21ce949":"### Map 'Sex' and 'Embarked' to numerical values.","2b7b4b57":"- There are no very highly correlated columns.","d35ec5b1":"- The passengers having one sibling\/spouse has more survival probability.\n- '1' > '2' > '0' > '3' > '4'","90d1d19a":"### Impute 'Title' with it's mode","061a0de5":"### Save data","bee80617":"### Sex\n- Majority of them are Male.","47768702":"## <center> Preprocessed data <\/center>","4ff28623":"- Combine some of the classes and group all the rare classes into 'Others'.","864bcd74":"### Columns","403d66b0":"### Embarked - Survival probability\n- Survival probability: C > Q > S","8faaecdc":"- It's time to use this preprocessed data and apply different modelling algorithms.\n- Hope this kernel helps you.\n- Don't forget to UPVOTE, if you find this kernel interesting.","7a8aecf2":"### Pclass vs Sex\n- Majority of the passengers are Male in every class. But, the survival probability for female is high.","c9261755":"### Embarked\n- Most of them are from Southampton(S).","c37b7f7a":"### Parch - Children\/Parents","7f8e1364":"### Drop 'Ticket', 'PassengerId' and 'Cabin' columns","949773c4":"## <center> Titanic - Data Preprocessing and Visualization <\/center>","a1a292da":"### Correlation between columns","94743d7a":"### Embarked vs Pclass","511ef483":"### Impute 'Embarked' with it's majority class.","bb84d7ea":"### Visualization of 'Survived' (Target column)\n- As we know, majority of passengers couldn't survive.\n- Data is imbalanced.","88e211ea":"### Create a new feature 'FamilySize' from 'SibSp' and 'Parch'","1cef5167":"- The passengers with title 'Mr' are more.","94bce173":"### Read test data","e6c8a94b":"- From the above results, we can say that, 1st class has high chance of surviving than the other two classes.","48c4b3a7":"### Sex - Survival probability\n- As we see, the survival probaility for Female is more. They might have given more priority to female than male.","7473f17a":"- The columns 'Age' and 'Cabin' contains more null values.","02622b9a":"## <center> Visualize and preprocess train data <\/center>","3d52f94e":"### Extract 'Title' from 'Name' and convert to Numerical values.","4bec9819":"### Import libraries","ad0f42d5":"### Insights\n- 'Survived' is the target column\/variable.\n- 'PassengerId', 'Name' and 'Ticket' doesn't contribute to the target variable 'Survived'. So, we can remove it from the data.\n- 'Age' and 'Embarked' has less number of missing value. We have to impute them using different techniques.\n- As there are a lot of missing values in the column 'Cabin', we can remove it from the training data.\n- 'Pclass', 'Sex', 'SibSp', 'Parch', 'Fare' doesn't have any missing values. \n- We can also create new variable like 'total size of the family' from the columns 'SibSp' and 'Parch'.","f7916956":"- As we can see, majority of them have no Siblings\/Spouse.","caf95cfd":"### Path to the dataset","8007266d":"### Train data","8206d478":"### Remove unnecessary columns\n- We can remove 'Ticket' and 'PassengerId', as they don't contribute to target class.\n- Remove 'Cabin' as it has a lot of missing values in both train and test data","45a233e6":"### Pclass\n- Majority of them are from 3rd class.","ad33c709":"### Data type of each column","575fb830":"### Convert 'Sex' and 'Embarked' to Numerical values","f4b4a044":"### Number of missing values","9263544a":"### Preprocess 'Name'\n- Extarct title from name of the passenger and categorize them.\n- Drop the column 'Name'","327a37ce":"### Test data","e19c9ce0":"### Impute 'Age' using median of columns 'SibSp', 'Parch' and 'Pclass'","0539d9cb":"### Describe data","e6c570d1":"### Number of missing values","ab65d628":"## <center> Preprocess test data <\/center>","f775d54b":"### Pclass - Survival probability","552b0a47":"- There are no missing values in the data.","2a79150f":"### Load data","ebacc146":"- Age is not correlated with 'Sex' and 'Fare'. So, we don't consider these two columns while imputing 'Sex'.\n- 'Pclass', 'SibSp' and 'Parch' are negatively correlated with 'Sex'.\n- Let's fill Age with the median age of similar rows from 'Pclass', 'SibSp' and 'Parch'. If there are no similar rows, fill the age with the median age of total dataset.","fa6aeb2f":"### Split 'train data' into 'training data' and 'validation data'","cfa1ec73":"- As we can see, majority of them have no Children\/Parents.","c5bd72cc":"### Handling missing values","51ef6db4":"- This kernel provides insights of the Titanic data.\n- At the end of this notebook, you will be ready with preprocessed data. You can concentrate more on modelling after using this kernel.\n- NOTE: There is a lot of room for improvement and can try many things.\n- Let's get started.","66b4d191":"### Missing values - 'Age'\n- Let's find the columns that are useful to predict the value of Age.","853b0098":"- The passengers having three children\/parents has more survival probability.\n- '3' > '1' > '2' > '0' > '5'","2432a14e":"### Map 'Title' to numerical values","e5cc93f8":"### Impute 'Fare' with it's mean","b556351f":"### Create a new feature 'Family size' from the features 'SibSp' and 'Parch'"}}