{"cell_type":{"5b997e06":"code","cb108159":"code","7ef81725":"code","c7edeb2a":"code","f85a8101":"code","14f7f82f":"code","1509dfb1":"code","de985e2b":"code","cbdeff78":"code","a0d7ea9d":"code","5474a269":"code","8a1c4321":"code","aa85d19f":"code","5f40d1cb":"code","83d70ee1":"code","2b4121b0":"code","4c1dd443":"code","b19268b2":"code","08f05738":"code","9e0e93e9":"code","3651b5e0":"code","80c5c976":"code","87562dd5":"code","1f66601a":"code","48ad3d0e":"code","17dcaed5":"code","2b28d98f":"code","3fb1f8e1":"code","5f34d7c5":"code","c8ca6142":"code","ea853047":"code","424f6e12":"code","4440e89a":"code","23ebd1a5":"code","763a391a":"code","e617f083":"markdown","7f0a749a":"markdown","1bc69331":"markdown","488fc7d1":"markdown","4ad11035":"markdown","5149c970":"markdown","d3989d7f":"markdown","af6bd2f0":"markdown","65b2b1bc":"markdown","111188fd":"markdown","9a90955d":"markdown","70103afa":"markdown","5128d019":"markdown","da72ef1d":"markdown","4fd05d06":"markdown"},"source":{"5b997e06":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n\nimport seaborn as sns\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cb108159":"data = pd.read_csv(\"..\/input\/eergy-efficiency-dataset\/ENB2012_data.csv\")","7ef81725":"data.columns = [\"Relative Compactness\",\"Surface Area\",\"Wall Area\",\"Roof Area\",\"Overall Height\",\"Orientation\",\"Glazing Area\",\"Glazing Area Distribution\",\"Heating Load\",\"Cooling Load\"]","c7edeb2a":"data.columns = map(str.lower, data.columns)","f85a8101":"data","14f7f82f":"data.info()","1509dfb1":"data[\"relative compactness\"].nunique()","de985e2b":"column_list = [\"relative compactness\",\"surface area\",\"wall area\",\"roof area\",\"overall height\",\"orientation\",\"glazing area\",\"glazing area distribution\",\"heating load\",\"cooling load\"]\n\nfor i in column_list:\n    print(\"Number of unique values for  *{}*  is == {}\".format(str(i),str(data[i].nunique())))\n    print(\"-------------------------------------------------\")","cbdeff78":"def detect_outliers(data,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(data[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(data[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 0.75\n        # detect outlier and their indeces\n        outlier_list_col = data[(data[c] < Q1 - outlier_step) | (data[c] > Q3 + outlier_step)].index\n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","a0d7ea9d":"data.loc[detect_outliers(data,[\"relative compactness\",\"surface area\",\"wall area\",\"roof area\",\"overall height\",\"orientation\",\"glazing area\",\"glazing area distribution\",\"heating load\",\"cooling load\"])]","5474a269":"data = (data-np.min(data)) \/ (np.max(data) - np.min(data))","8a1c4321":"data .head(10)","aa85d19f":"data.describe()","5f40d1cb":"X = data.drop([\"heating load\",\"cooling load\"],axis=1)\ny = data[[\"heating load\",\"cooling load\"]]","83d70ee1":"from sklearn.model_selection import train_test_split\n\nx_train , x_test , y_train , y_test = train_test_split(X , y , test_size=0.3 , random_state =42)","2b4121b0":"from sklearn.linear_model import LinearRegression\nmultiple_linear_reg =LinearRegression()\nmultiple_linear_reg.fit(x_train,y_train)\n\ny_predict1 = multiple_linear_reg.predict(x_test)\n\nfrom sklearn.metrics import r2_score\nr2_score_before = r2_score(y_predict1,y_test)\nprint(\" Before Grid Search CV , Multiple Linear Regression r2 score is : {}\".format(r2_score_before))\n\n","4c1dd443":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.feature_selection import RFE\n\nfolds = KFold(n_splits = 5, shuffle = True, random_state = 42)\nhyper_params = [{'n_features_to_select': list(range(1, 9))}]\n\nm_l_r = LinearRegression()\nm_l_r.fit(x_train, y_train)\nrfe = RFE(m_l_r)\n\nmodel_cv = GridSearchCV(estimator = rfe, \n                        param_grid = hyper_params, \n                        scoring= 'r2', \n                        cv = folds, \n                        verbose = 1,\n                        return_train_score=True)      \n\n\nmodel_cv.fit(x_train, y_train) \n","b19268b2":"cv_results = pd.DataFrame(model_cv.cv_results_)\ncv_results","08f05738":"plt.figure(figsize=(16,6))\n\nplt.plot(cv_results[\"param_n_features_to_select\"], cv_results[\"mean_test_score\"])\nplt.plot(cv_results[\"param_n_features_to_select\"], cv_results[\"mean_train_score\"])\nplt.xlabel('number of features')\nplt.ylabel('r-squared')\nplt.title(\"Optimal Number of Features\")\nplt.legend(['test score', 'train score'], loc='upper left')","9e0e93e9":"import sklearn\n\nn_features_optimal = 6\n\nm_l_reg = LinearRegression()\nm_l_reg.fit(x_train, y_train)\n\nrfe = RFE(m_l_reg, n_features_to_select=n_features_optimal)             \nrfe = rfe.fit(x_train, y_train)\n\n# predict prices of X_test\ny_pred = m_l_reg.predict(x_test)\nr2_score_after = sklearn.metrics.r2_score(y_test, y_pred)\n\nprint(\" After Grid Search CV , Multiple Linear Regression r2 score is : {}\".format(r2_score_after))","3651b5e0":"import seaborn as sns\n\nplt.figure(figsize=(15,10))\nsns.pointplot(x=['Before CV','After CV'], y=[r2_score_before,r2_score_after],color=\"red\")\nplt.xticks(rotation= 45)\nplt.xlabel('Grid Search Effect')\nplt.ylabel('r2 Score',)\nplt.title('Before and After Grid Search CV')\n\nplt.plot([0.9,1.1],[0.8994149873458704,0.8994149873458704],'--',color=\"blue\")\nplt.plot([-0.1,0.1],[0.8866323652510353,0.8866323652510353],'--',color=\"blue\")\n\n","80c5c976":"from sklearn.tree import DecisionTreeRegressor\ndt_reg = DecisionTreeRegressor(random_state=42)\ndt_reg.fit(x_train,y_train)\n\ny_predict2 = dt_reg.predict(x_test)\nfrom sklearn.metrics import r2_score\nr2_dt_before = r2_score(y_predict2,y_test)\nprint(\" Before Grid Search CV , Decision Tree Regression r2 score is : {}\".format(r2_dt_before))\n\nfrom sklearn.model_selection import GridSearchCV\n\nparameters={\"criterion\":[\"mse\",\"mae\"],\n            \"max_depth\" : range(2,10),\n           \"min_samples_split\":range(2,10),\n            \"min_samples_leaf\":range(1,10)\n            }\n\n\ntuning_model = GridSearchCV(estimator=dt_reg,param_grid=parameters,scoring=\"r2\",cv=5)\ntuning_model.fit(x_train,y_train)\n\n","87562dd5":"tuning_model.best_params_","1f66601a":"tuning_model.best_score_","48ad3d0e":"tuned_model = DecisionTreeRegressor(criterion=\"mse\",max_depth=6,min_samples_leaf=1,min_samples_split=4)\n\ntuned_model.fit(x_train,y_train)\n","17dcaed5":"pred_tuned = tuned_model.predict(x_test)\n\nfrom sklearn.metrics import r2_score\nr2_dt_after = r2_score(pred_tuned,y_test)\nprint(\" After Grid Search CV , Decision Tree Regression r2 score is : {}\".format(r2_dt_after))","2b28d98f":"plt.figure(figsize=(15,10))\nsns.pointplot(x=['Before CV','After CV'], y=[r2_dt_before,r2_dt_after],color=\"blue\")\nplt.xticks(rotation= 45)\nplt.xlabel('Grid Search Effect')\nplt.ylabel('r2 Score',)\nplt.title('Before and After Grid Search CV')\n\nplt.plot([0.9,1.1],[0.977719949398416,0.977719949398416],'--',color=\"red\")\nplt.plot([-0.1,0.1],[0.96948068559621,0.96948068559621],'--',color=\"red\")","3fb1f8e1":"from sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor(random_state=42,n_jobs=-1)\nrf.fit(x_train,y_train)\n\ny_predict3 = rf.predict(x_test)\nfrom sklearn.metrics import r2_score\nprint(\" Before Grid Search CV , Random Forest Regression r2 score is : {}\".format(r2_score(y_predict3,y_test)))","5f34d7c5":"from sklearn.model_selection import GridSearchCV\n\nparameters={\"max_features\": [1,3,10,20],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300,500],\n                \"criterion\":[\"mse\"]\n            }","c8ca6142":"tuning_model_rf = GridSearchCV(estimator=rf,param_grid=parameters,scoring=\"r2\",cv=5)\ntuning_model_rf.fit(x_train,y_train)","ea853047":"tuning_model_rf.best_score_","424f6e12":"tuning_model_rf.best_params_","4440e89a":"tuned_model_rf = RandomForestRegressor(n_estimators=500,criterion=\"mse\",bootstrap=False ,max_features=1,min_samples_leaf=1,min_samples_split=2)\n\ntuned_model_rf.fit(x_train,y_train)","23ebd1a5":"pred_tuned_rf = tuned_model_rf.predict(x_test)\n\nfrom sklearn.metrics import r2_score\nprint(\" After Grid Search CV , Random Forest Regression r2 score is : {}\".format(r2_score(pred_tuned_rf,y_test)))","763a391a":"plt.figure(figsize=(15,10))\nsns.pointplot(x=['Before CV','After CV'], y=[r2_score(y_predict3,y_test),r2_score(pred_tuned_rf,y_test)],color=\"blue\")\nplt.xticks(rotation= 45)\nplt.xlabel('Grid Search Effect')\nplt.ylabel('r2 Score',)\nplt.title('Before and After Grid Search CV')\n\nplt.plot([0.9,1.1],[0.9859115470004818,0.9859115470004818],'--',color=\"red\")\nplt.plot([-0.1,0.1],[0.9800498013020378,0.9800498013020378],'--',color=\"red\")","e617f083":"<a id = \"7\"><\/a><br>\n# Decision Tree Regression ","7f0a749a":"<a id = \"10\"><\/a><br>\n# Random Forest Regression","1bc69331":"<a id = \"6\"><\/a><br>\n### Multiple Linear Regression After Grid Search CV","488fc7d1":"<a id = \"9\"><\/a><br>\n### Decision Tree Regression After Grid Search CV","4ad11035":"<a id = \"8\"><\/a><br>\n### Decision Tree Regression Before Grid Search CV","5149c970":"<a id = \"4\"><\/a><br>\n# Multiple Linear Regression","d3989d7f":"<a id = \"5\"><\/a><br>\n### Multiple Linear Regression Before Grid Search CV","af6bd2f0":"<a id = \"1\"><\/a><br>\n# Load and Check Data\n\nSpecifically:\n\n* X1 Relative Compactness\n* X2 Surface Area\n* X3 Wall Area\n* X4 Roof Area\n* X5 Overall Height\n* X6 Orientation\n* X7 Glazing Area\n* X8 Glazing Area Distribution\n* y1 Heating Load\n* y2 Cooling Load","65b2b1bc":"<a id = \"3\"><\/a><br>\n# Normalization of Data","111188fd":"<a id = \"12\"><\/a><br>\n### Random Forest Regression After Grid Search CV","9a90955d":"# Introduction\nThe dataset contains eight attributes (or features, denoted by X1...X8) and two responses (or outcomes, denoted by y1 and y2). The aim is to use the eight features to predict each of the two responses. I am going to learn Data Science and ML algorithms on this project's path. \n\n<font color = 'blue'>\nContent: \n\n1. [Load and Check Data](#1)\n1. [Outlier Detection](#2)\n1. [Normalization of Data](#3)    \n1. [Multiple Linear Regresion](#4)   \n    * [Before Grid Search](#5)\n    * [After Grid Search](#6)\n1.[Decision Tree Regression](#7)\n     * [Before Grid Search](#8)\n     * [After Grid Search](#9)\n1.[Random Forest Regression](#10)\n    * [Before Grid Search](#11)\n    * [After Grid Search](#12)\n        ","70103afa":"#### As you can see from table above , there is no outlier value in the dataset.","5128d019":"<a id = \"11\"><\/a><br>\n### Random Forest Regression Before Grid Search CV","da72ef1d":"#### Normalization should be done to reduce the effect of relatively high values in the data on model learning.","4fd05d06":"<a id = \"2\"><\/a><br>\n# Outlier Detection"}}