{"cell_type":{"52651be7":"code","44448db6":"code","62547c37":"code","04e9349e":"code","c5779f8f":"code","b55ed6fd":"code","c5fb61a8":"code","411dd70c":"code","b7d2d02f":"code","58a2b157":"code","823c802c":"code","51a8bf2d":"code","f1961b44":"code","e2c680f4":"code","9dd77210":"code","00c2e576":"code","e1f6c54e":"code","ba8bfb65":"code","433da064":"code","ce6f7cd9":"code","641654ee":"code","5160401e":"code","22cb7ac9":"code","ed113b59":"code","d74af7cd":"code","543f0843":"code","5f7bb050":"code","299e6ea8":"code","ceee60c5":"code","e5ed14d3":"code","b104e88d":"code","41093795":"code","9ec30dce":"markdown","c334d4d1":"markdown","634e7ba8":"markdown","896736f0":"markdown","eb6b1f8e":"markdown","13ad283a":"markdown","e426b981":"markdown","4551f552":"markdown","a3ee3d6d":"markdown","add0b648":"markdown","48504f78":"markdown","4715996e":"markdown","c29f9587":"markdown","e97a85dc":"markdown","0bddefaf":"markdown","12192eb9":"markdown","a71086b3":"markdown","826e7709":"markdown","3447d3ce":"markdown","9d9c66bb":"markdown","385f2721":"markdown","44665c6f":"markdown","1206065e":"markdown","ec065e8c":"markdown"},"source":{"52651be7":"## Import Libraries\nimport numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\nfrom xgboost import XGBRegressor\nimport sklearn.metrics as metrics\nimport math\nfrom scipy.stats import norm, skew\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline\n","44448db6":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\n\n","62547c37":"train.shape , test.shape ","04e9349e":"train.head()","c5779f8f":"train.info()","b55ed6fd":"print(train['SalePrice'].describe())\n","c5fb61a8":" sns.distplot(train['SalePrice'])\n","411dd70c":"print(\"Skewness: %f\" % train['SalePrice'].skew())\nprint(\"Kurtosis: %f\" % train['SalePrice'].kurt())\n","b7d2d02f":"train['SalePrice'] = np.log1p(train['SalePrice'])\nsns.distplot(train['SalePrice'], fit=norm);\n\n","58a2b157":"corrmat = train.corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corrmat, vmax=.8, square=True);\n","823c802c":"corr = train.corr()\nhighest_corr_features = corr.index[abs(corr[\"SalePrice\"])>0.5]\nplt.figure(figsize=(10,10))\ng = sns.heatmap(train[highest_corr_features].corr(),annot=True,cmap=\"RdYlGn\")\n","51a8bf2d":"corr[\"SalePrice\"].sort_values(ascending=False)\n","f1961b44":"cols = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'YearBuilt']\nsns.pairplot(train[cols])\n","e2c680f4":"y_train = train['SalePrice']\ntest_id = test['Id']\nall_data = pd.concat([train, test], axis=0, sort=False)\nall_data = all_data.drop(['Id', 'SalePrice'], axis=1)\n","9dd77210":"Total = all_data.isnull().sum().sort_values(ascending=False)\npercent = (all_data.isnull().sum() \/ all_data.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([Total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(25)\n","00c2e576":"all_data.drop((missing_data[missing_data['Total'] > 5]).index, axis=1, inplace=True)\nprint(all_data.isnull().sum().max())\n","e1f6c54e":"total = all_data.isnull().sum().sort_values(ascending=False)\ntotal.head(19)","ba8bfb65":"# filling the numeric data\nnumeric_missed = ['BsmtFinSF1',\n                  'BsmtFinSF2',\n                  'BsmtUnfSF',\n                  'TotalBsmtSF',\n                  'BsmtFullBath',\n                  'BsmtHalfBath',\n                  'GarageArea',\n                  'GarageCars']\n\nfor feature in numeric_missed:\n    all_data[feature] = all_data[feature].fillna(0)\n","433da064":"#filling categorical data\ncategorical_missed = ['Exterior1st',\n                  'Exterior2nd',\n                  'SaleType',\n                  'MSZoning',\n                   'Electrical',\n                     'KitchenQual']\n\nfor feature in categorical_missed:\n    all_data[feature] = all_data[feature].fillna(all_data[feature].mode()[0])\n","ce6f7cd9":"#Fill in the remaining missing values with the values that are most common for this feature.\n\nall_data['Functional'] = all_data['Functional'].fillna('Typ')\n","641654ee":"all_data.drop(['Utilities'], axis=1, inplace=True)\n","5160401e":"all_data.isnull().sum().max() #just checking that there's no missing data missing...\n","22cb7ac9":"\nnumeric_feats = all_data.dtypes[all_data.dtypes != 'object'].index\nskewed_feats = all_data[numeric_feats].apply(lambda x: skew(x)).sort_values(ascending=False)\nhigh_skew = skewed_feats[abs(skewed_feats) > 0.5]\nhigh_skew\n","ed113b59":"for feature in high_skew.index:\n    all_data[feature] = np.log1p(all_data[feature])\n","d74af7cd":"all_data['TotalSF'] = all_data['TotalBsmtSF'] + all_data['1stFlrSF'] + all_data['2ndFlrSF']\n\n","543f0843":"all_data = pd.get_dummies(all_data)\nall_data.head()","5f7bb050":"x_train =all_data[:len(y_train)]\nx_test = all_data[len(y_train):]\n","299e6ea8":"x_test.shape , x_train.shape","ceee60c5":"from sklearn.metrics import make_scorer\nfrom sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.metrics import mean_squared_error\n\nscorer = make_scorer(mean_squared_error,greater_is_better = False)\ndef rmse_CV_train(model):\n    kf = KFold(5,shuffle=True,random_state=42).get_n_splits(x_train.values)\n    rmse = np.sqrt(-cross_val_score(model, x_train, y_train,scoring =\"neg_mean_squared_error\",cv=kf))\n    return (rmse)\ndef rmse_CV_test(model):\n    kf = KFold(5,shuffle=True,random_state=42).get_n_splits(train.values)\n    rmse = np.sqrt(-cross_val_score(model, x_test, y_test,scoring =\"neg_mean_squared_error\",cv=kf))\n    return (rmse)\n","e5ed14d3":"import xgboost as XGB\n\nthe_model = XGB.XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.05, max_depth=3, \n                             min_child_weight=1.7817, n_estimators=2200,\n                             reg_alpha=0.4640, reg_lambda=0.8571,\n                             subsample=0.5213, random_state =7, nthread = -1)\nthe_model.fit(x_train, y_train)\n","b104e88d":"y_predict = np.floor(np.expm1(the_model.predict(x_test)))\ny_predict\n","41093795":"sub = pd.DataFrame()\nsub['Id'] = test_id\nsub['SalePrice'] = y_predict\nsub.to_csv('mysubmission.csv',index=False)","9ec30dce":"## 5. Converting the categorical to numerical.","c334d4d1":"#### ok let's focus on the features have highest correlation.","634e7ba8":"### 2. Let's know more about the Target and make some analysis\nYou may wonder what the target is? \nIt's the 'SalePrice' column. ","896736f0":"#### Let's add a new features","eb6b1f8e":"Now, We explored the data and know the important features.","13ad283a":"## 1. Gathering Data","e426b981":"### Are we need a specialist or a broker to know what are the most important features that affect home prices?\nOf course not, we can know the important features by sea. So let's go and explore the data.\n","4551f552":"## What we want?\n1. Gathering Data\n2. Analysis the target and understand what is the important features\n3. Looking for missing values\n4. Feature Engineering\n5. Converting categorical to numerical\n6. Modeling","a3ee3d6d":"## Introduction: \nThis is my second work of machine learning in kaggle. In This kernel I will go to solve House Pricing with Advanced Regression Analysis.\nIf there are any recommendations or changes you would like to see in my notebook, please leave a comment at the end of this kernel, I will be glad to answer any questions you may have in the comments. If you like this notebook, Please UPVOTE.","add0b648":"Well, if we look at these features that have many missing values, we will note that they are not important features, none of them has (correlation > 0.5), so if we delete them we will not miss the data.","48504f78":"## 2. Looking for Missing Data ","4715996e":"### Now, Filling the missing Data","c29f9587":"Now we fixed it.","e97a85dc":"let's check if we have another missing values.","0bddefaf":"## 5. Apply ML Model","12192eb9":"## 4. Feature Engineering","a71086b3":"As we see, we have a positive sekew, we must fix it.","826e7709":"Let's show the features and the number of Missing values","3447d3ce":"#### Before looking for Missing data: \nWe can concatenate train and test datasets, preprocess, and then divide them again. I think it will be easy for us.","9d9c66bb":"Obviously we have some features that have many missing values\u0632 we'll deal with it in a little while.\n","385f2721":"Ok, now as you see the correlation between features.. The colours show to us the strong and weak correlation.\nBut what we really need? we need the highest correlation between features and SalesPrice, so let's do it.","44665c6f":"#### We cleaned the data very well, and now let's separate the data to its origin (train, test)","1206065e":"#### What we note?\n* It's important to know what you do and how benefit from it. We can see 'OverQual' in the top of highest correlation it's 0.79!\n* 'GarageCars' & 'GarageArea' like each other (correlation between them is 0.88) \n* 'TotalBsmtSF' & '1stFlrSF' also like each other (correlation betwwen them is 0.82), so we can keep either one of them or add the1stFlrSF to the Toltal.\n* 'TotRmsAbvGrd' & 'GrLivArea' also has a strong correlation (0.83), I decided to keep 'GrLivArea' because it's correlation with 'SalePrice' is higher.\n","ec065e8c":"#### Fix The Skewness in the other features\n"}}