{"cell_type":{"ad75efde":"code","9d285208":"code","ba5e07d0":"code","74749d1e":"code","dad11a07":"code","f562ad70":"code","4a13a1b7":"code","615bc481":"code","c88018fb":"code","c1f2669b":"code","c5e7960a":"code","ba289b4a":"code","5fa31054":"code","ec27bdd5":"code","6b8305bd":"code","b7370c73":"code","1cbec3ba":"code","30f70d63":"code","7b9cabf2":"code","b1354262":"code","117ea470":"code","c491f2d0":"code","5dc5e62a":"code","42695a73":"code","eb84a1ca":"code","18132d4c":"code","589aec6d":"code","798cce8a":"code","bfc39baa":"code","2ebacda1":"markdown","fdbafa5d":"markdown","d4f56801":"markdown","7e2c5997":"markdown","ae7fd965":"markdown","3964c0c2":"markdown","8095822f":"markdown","32c0035a":"markdown","341fae06":"markdown","f3c1473e":"markdown","44d7cbdf":"markdown","d15410e9":"markdown","3c489c70":"markdown"},"source":{"ad75efde":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","9d285208":"!pip install pandas-flavor","ba5e07d0":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","74749d1e":"from pandas_flavor import register_dataframe_method\n\n@register_dataframe_method\ndef missing(df):\n        return sorted(\n                    [(col,str(df[col].dtypes),np.round(df[col].isna().sum()\/len(df) * 100,2)) for col in df.columns if df[col].isna().sum() !=0 ],\n                    key = lambda x: x[2], reverse=True)\n    \n@register_dataframe_method\ndef get_numeric_df(df):\n    return df.select_dtypes(np.number)\n\n@register_dataframe_method\ndef get_numeric_col_names(df):\n    return list(df.select_dtypes(np.number).columns)\n\n@register_dataframe_method\ndef discrete_features(df,thresold):\n#     thresold in number of unique values\n    return [feature for feature in df.columns if len(df[feature].unique()) < thresold]\n\n@register_dataframe_method\ndef continious_features(df,thresold):\n    #     thresold in number of unique values\n    return [feature for feature in df.columns if len(df[feature].unique()) >= thresold]\n\n@register_dataframe_method\ndef about(df):\n    print('shape of data')\n    print(df.shape)\n    print(\"==\"*50)\n    \n    print(f\"Datatypes in data\\n{df.dtypes.value_counts(ascending=False)}\")\n    print(\"==\"*50)\n    \n    \n    print(\"Percentage of missing values\")\n    print(*missing(df),sep=\"\\n\")\n    print(\"==\"*50)\n\n    print('data description \\n')\n    display(df.describe().T)\n    print(\"==\"*50)","dad11a07":"df = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\n\ndf.drop(['Id'],axis=1,inplace=True)\n# df.head()","f562ad70":"df.about()","4a13a1b7":"missing_val = df.missing()\nmissing_val","615bc481":"drop_me = [i[0] for i in missing_val if i[2]>15]\ndrop_me","c88018fb":"df.drop(drop_me,axis=1,inplace=True)\ndf.head()","c1f2669b":"discrete = df.discrete_features(thresold=50)\nprint(discrete)","c5e7960a":"len(discrete)","ba289b4a":"continious = df.continious_features(thresold=50)\ncontinious","5fa31054":"len(continious)","ec27bdd5":"df[\"YrSold\"].unique()","6b8305bd":"sns.displot(df['SalePrice'],kde=True,aspect=3)","b7370c73":"df['SalePrice'] = np.log(df['SalePrice'])\nsns.displot(df['SalePrice'],kde=True,aspect=3)","1cbec3ba":"# Plotting numerical features with polynomial order to detect outliers.\n\n# https:\/\/www.kaggle.com\/datafan07\/beginner-eda-with-feature-eng-and-blending-models\/notebook\n\nfrom matplotlib.ticker import MaxNLocator\n\ndef srt_reg(y, df,x_size=30,y_size=30):\n    \n    ncols = 3\n    nrows = int(np.ceil(df.shape[1]\/ncols))\n    \n    fig, axes = plt.subplots(nrows, ncols, figsize=(x_size,y_size))\n    axes = axes.flatten()\n\n    for i, j in zip(df.columns, axes):\n\n        sns.regplot(x=i,\n                    y=y,\n                    data=df,\n                    ax=j,\n                    order=3,\n                    ci=None,\n                    color='#e74c3c',\n                    line_kws={'color': 'black'},\n                    scatter_kws={'alpha':0.4})\n        j.tick_params(labelrotation=45)\n        j.yaxis.set_major_locator(MaxNLocator(nbins=10))\n\n        plt.tight_layout()","30f70d63":"\ndef srt_box(y, df):\n    fig, axes = plt.subplots(19, 3, figsize=(30,30))\n    axes = axes.flatten()\n\n    for i, j in zip(df.columns, axes):\n\n        sortd = df.groupby([i])[y].median().sort_values(ascending=False)\n        sns.boxplot(x=i,\n                    y=y,\n                    data=df,\n                    palette='plasma',\n                    order=sortd.index,\n                    ax=j)\n        j.tick_params(labelrotation=45)\n        j.yaxis.set_major_locator(MaxNLocator(nbins=18))\n\n        plt.tight_layout()\n\n","7b9cabf2":"srt_reg('SalePrice',df[continious])","b1354262":"df_tmp = df.copy()","117ea470":"from sklearn.preprocessing import StandardScaler","c491f2d0":"cols = [\"LotArea\",\"MasVnrArea\",\"BsmtFinSF1\",\"TotalBsmtSF\",\"1stFlrSF\",\"2ndFlrSF\",\"GrLivArea\"]\n\n\nscaler = StandardScaler()\n\n# apply standardization on numerical features\nfor i in cols:\n    \n    df_tmp[i] = scaler.fit_transform(df_tmp[[i]])","5dc5e62a":"srt_reg('SalePrice',df_tmp[cols + [\"SalePrice\"]],x_size=30,y_size=15)","42695a73":"year_feature = [feature for feature in continious if 'Yr' in feature or 'Year' in feature]\n\nprint(year_feature)\n\n\ndf[\"House_Age\"] = df[\"YrSold\"] - df[\"YearBuilt\"]\n\n\ndf[\"House_Remod_Age\"] = df[\"YrSold\"] - df[\"YearRemodAdd\"]\n\ndf[\"House_Garage_Age\"] = df[\"YrSold\"] - df[\"GarageYrBlt\"]\n\n# drop the old temporal data\ndrop_temporal = [\"YrSold\",\"YearBuilt\",\"YearRemodAdd\",\"GarageYrBlt\",\"MoSold\"]\ndf.drop(drop_temporal,inplace=True,axis=1)\n","eb84a1ca":"features = [\"House_Age\", \"House_Remod_Age\",\"House_Garage_Age\"]\nsrt_reg(\"SalePrice\", df[features + [\"SalePrice\"]],x_size=40,y_size=15)","18132d4c":"for i in drop_temporal:\n\n    try:\n        discrete.remove(i)\n    except ValueError:\n        pass\nprint(discrete)\n\n\n","589aec6d":"def histplot(df,x_size=30,y_size=60):\n    \n    ncols = 3\n    nrows = int(np.ceil(df.shape[1]\/ncols))\n    \n    fig, axes = plt.subplots(nrows, ncols, \n                             figsize=(x_size,y_size)\n                            )\n    axes = axes.flatten()\n\n    for i, j in zip(df.columns, axes):\n\n        sns.histplot(df[i],ax=j)\n        j.tick_params(labelrotation=45)\n#         j.yaxis.set_major_locator(MaxNLocator(nbins=18))\n\n        plt.tight_layout()\n    \ndef bar_with_variable(df,y,x_size=30,y_size=30):\n    ncols = 3\n    nrows = int(np.ceil(df.shape[1]\/ncols))\n    \n    fig, axes = plt.subplots(nrows, ncols, \n                             figsize=(x_size,y_size)\n                            )\n    axes = axes.flatten()\n\n    for i, j in zip(df.columns, axes):\n        \n        if i == y:\n            continue\n#         tmp = pd.DataFrame(df.groupby(i)[y].median()).reset_index(inplace=True)\n        sns.barplot(data=pd.DataFrame(df.groupby(i)[y].median()).reset_index(),\n                    x=i,\n                    y=y,\n                    ax=j)\n        j.tick_params(labelrotation=45)\n#         j.yaxis.set_major_locator(MaxNLocator(nbins=18))\n\n        plt.tight_layout()\n    \ndef violin(df,y,x_size=30,y_size=30):\n    ncols = 3\n    nrows = int(np.ceil(df.shape[1]\/ncols))\n    \n    fig, axes = plt.subplots(nrows, ncols, \n                             figsize=(x_size,y_size)\n                            )\n    axes = axes.flatten()\n\n    for i, j in zip(df.columns, axes):\n        \n        if i == y:\n            continue\n\n        sns.violinplot(data=df,\n                    x=i,\n                    y=y,\n                    ax=j)\n        \n#         j.yaxis.set_major_locator(MaxNLocator(nbins=18))\n\n        plt.tight_layout()\n    \n    \n","798cce8a":"violin(df[discrete+[\"SalePrice\"]],y=\"SalePrice\",y_size=90)","bfc39baa":"histplot(df[discrete],y_size=100)","2ebacda1":"**log transform to reduce skew**","fdbafa5d":"## Create custom methods for pandas dataframe for ease of use","d4f56801":"## apply standard scaling on certain Continious features","7e2c5997":"# lets drop features with greater missing values","ae7fd965":"# This is the initial EDA of the dataset\n## Note: This notebook is still under development, I have to still add feature engg and build models\n\n## Please like if you found it helpfull, and feel free to suggest any changes","3964c0c2":"# Imports and reading data","8095822f":"## lets handle year\/ temporal features\n\nIt makes sense to look at **year sold - year build** and **year sold - year remod**","32c0035a":"## Observing the trend\n\n- GrLivArea\n- LotArea\n- BsmtFubSF1\n- TotalBsmtSF\n- 1stFlrSF\n- 2ndFlrSF\n- GrLivArea\n\nhave clear trends, which is as guessed before","341fae06":"## Exploring discrete features","f3c1473e":"## Temporal features conclusion\nThe trends are exactly as anticipated","44d7cbdf":"# analyse continious features\n**initial guesses of which features matter**\n\n**P = proportional**\n**IP = Inversely proportional**\n**SP = SalePrice**\n\n- **LotArea:** Lot size in sqft. probably the area of the house. *P to SP*. may also depond on location of the plot\n- **YearBuilt** year of construction. *ideally IP to SP* some old mansions may be sold at heigher price\n- **YearRemodAdd** Remodel Date. *P to SP* adds extra cost\n- **TotalBsmtSF** *P to SP*\n- **1stFlrSF** and **2ndFlrSF** area in sqft of 1st and 2nd floor *P to SP*\n","d15410e9":"### distrubution of discrete features","3c489c70":"# Closing Taughts\nLooking at the graphs, the features which look important are\n(note we need to verify these with feature selection)\n\n\n**Continious Features**\n\n- LotArea (needs outlier handeling)\n- BsmtFinSF1\n- TotalBsmtSF\n- 1stFlrSF\n- 2ndFlrSF\n- GrLivArea\n- GarageYear\n- House_Age\n- House_Remod_Age\n- House_Garage_Age\n\n**Discrete Features**\n(some features distributions are not uniform, hence need to reduce cardinality)\n- MSSubClass(sine looking pattern)\n- HouseStyle\n- OverallQual\n- TotRmsAbvGrd\n- Fireplaces(maybe?)\n- GarageCars\n\n\n"}}