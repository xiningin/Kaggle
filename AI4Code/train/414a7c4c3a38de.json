{"cell_type":{"d04b8b77":"code","c1b033ed":"code","8e98eb41":"code","693c5833":"code","c0c61991":"code","636aba36":"code","0846c4a2":"code","03000d32":"code","56a5e1c0":"code","949b63cd":"code","358b75f6":"code","ac8e7add":"code","7aa61f7b":"code","3f32caf5":"code","4a7ec650":"code","131d5676":"code","c22967b2":"code","e3cd2e80":"code","3944fe35":"code","b311e430":"code","a150b85b":"code","1848364f":"code","48e39b23":"code","29a49c05":"code","eaf0a3fa":"code","ed96c46b":"code","c4fed4d7":"code","1d41fd31":"code","e614f0da":"code","e61ba31c":"markdown","03c4b275":"markdown","3c4886e3":"markdown","f782b8ed":"markdown","a6a0621b":"markdown","f11df147":"markdown","1d713d00":"markdown","34415fa1":"markdown","2e46b9e9":"markdown","cde87f50":"markdown","22bd6c8a":"markdown","1539e6bf":"markdown","5cea6e2d":"markdown","5a534a3c":"markdown","4e79fad6":"markdown","b831c0d4":"markdown","c5727644":"markdown","38ad95b8":"markdown","4739f019":"markdown","d847cf84":"markdown","887c060f":"markdown","5f37f68a":"markdown","210e50b8":"markdown","c98840c2":"markdown","2ca573a6":"markdown","6a6861f6":"markdown"},"source":{"d04b8b77":"import numpy as np \nimport pandas as pd\nimport os\nimport seaborn as sns\nimport plotly.express as px\nfrom plotly.offline import init_notebook_mode\nimport plotly.graph_objects as go\ninit_notebook_mode(connected=True)\npd.set_option('display.max_columns', 5000)\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nif not os.path.exists('individual_charts'):\n  os.mkdir('individual_charts')\nimport matplotlib.gridspec as gridspec\nfrom IPython.display import clear_output\nimport matplotlib.pyplot as plt","c1b033ed":"def count_then_return_percent(dataframe,column_name,count=None):\n    '''\n    A function to return value counts as percentages. \n    '''\n    if count:\n        counts = dataframe[column_name].value_counts(dropna=False)[0:count]\n    else:\n        counts = dataframe[column_name].value_counts(dropna=False)\n    percentages = round(counts*100\/(dataframe[column_name].count()),1).sort_values(ascending=True)\n    return percentages\n\ndef top_count(dataframe,column,count):\n    '''\n    A function to return a dataframe sorted by a given column.\n    '''\n    list = dataframe[column].value_counts().sort_values(ascending=False).keys()[0:count]\n    df = dataframe[dataframe[column].isin(list)]\n    return df \n\ndef create_dataframe_of_agr(dataframe,column,new_column,count_column,agr,return_percentages=False):\n    '''\n    A function to create a dataframe by aggregating over a column. resulting column will be named \n    as new_column if new_column is passed, else same as agrregated column.\n    '''\n    if count_column==None:\n          dataframe[new_column] = dataframe[column]\n    else:\n          dataframe[new_column] = dataframe[count_column]\n\n    dataframe = dataframe.groupby(column).agg(agr)[new_column]\n    if return_percentages==True:\n        dataframe[new_column] = (dataframe[new_column]*100)\/(dataframe[new_column].sum())\n    return dataframe\n\nclass plot_data():    \n    '''\n      A class to carry out an agrregation operation and plot the resulting data.\n      data: A list of format [dataframe,column,new_column,count_column], where dataframe is one over which agrregation operation\n        is carried out, column is the column to groupby, new_column is the name of the new_column(if None, the new column will\n        be named after column), count_column is the column to agrregate over(if None, agrregation will be carried over column)\n      title: title of the first graph, showing count\n      x_label: graph xlabel\n      ylabel: graph ylabel\n      ax: graph plot axis\n      fsize: figure size\n      title_c: title of second graph, showing % change\n      count: bool, wheater to sort the dataframe or not\n      agr: mathematical operation to aggregate, eg 'count', 'mean'.\n      cat: bool, wheater the dataframe has both categorical column or not\n      return_percentages: bool, wheater to return aggregation as percentage or not.\n    '''\n\n    def __init__(self,data,title=None,x_label=None,y_label=None,agr_list=None,ax=None,fsize=None,title_c=False,count=False,cat=False,agr='count',return_percentages=False):\n        self.data = data\n        self.agr = agr\n        self.cat = cat\n        self.return_percentages = return_percentages\n        self.title = title\n        self.x_label = x_label\n        self.y_label = y_label\n        self.title_c = title_c\n        self.ax = ax\n        self.fsize = fsize\n        self.count = count\n        self.agr_list = agr_list\n        \n    def create_dataframe_of_agr(self,dataframe,column,new_column,count_column=None):\n        '''\n        A function to create a dataframe by aggregating over a column. resulting column will be named \n        as new_column if new_column is passed, else same as agrregated column.\n        '''\n        if count_column==None:\n            dataframe[new_column] = dataframe[column]\n        else:\n            dataframe[new_column] = dataframe[count_column]\n\n        if self.cat:\n            dataframe = dataframe.groupby(column).agg({new_column: self.agr}).unstack(fill_value=0)[new_column]\n        else:\n            dataframe = dataframe.groupby(column).agg(self.agr)[new_column]\n\n        if self.return_percentages==True:\n            dataframe[new_column] = (dataframe[new_column]*100)\/(dataframe[new_column].sum())\n\n        return dataframe\n   \n    def plot_column_cat_multi(self):\n        '''\n         A function to plot data for multiple years, when both columns are categorical,\n         eg age-duration or industry-experience.\n        '''\n    \n        dataframe = self.data[0][0]\n        column = self.data[0][1]\n        new_column = self.data[0][2]\n        count_column = self.data[0][3]\n\n        df_all = pd.DataFrame(self.create_dataframe_of_agr(dataframe,column,new_column,count_column))\n        x = self.ax[0]\n        x[0].set_xlabel(self.x_label, fontsize=15)\n        x[0].set_ylabel(self.y_label, fontsize=15)                    \n        x[0].set_title(self.title, fontsize=20, fontweight='bold')\n\n        df_all = pd.DataFrame([(x,df_all[x].sort_values().keys()[-1],df_all[x].sort_values()[-1]) for x in df_all.keys()])\n        df_all.rename(columns={1:column,0:self.x_label+'_'+new_column,2:new_column},inplace=True)\n        df_all.index = df_all[self.x_label+'_'+new_column]\n        df_all.index.name=count_column\n        df_all.drop(columns={self.x_label+'_'+new_column},inplace=True)\n      \n        for i, v in enumerate(df_all[new_column]):\n            x[0].text(v + 3, i + .15, str(df_all.iloc[i][column]), fontweight='bold',color='blue')\n        df_all[new_column].plot(kind='barh',figsize=self.fsize, ax = x[0],ylabel=self.y_label,legend=True,color='blue',width=0.5)\n\n        for d in self.data[1::]:\n            df = d[0]\n            column = d[1]\n            new_column = d[2]\n            count_column=d[3]\n      \n            df_ = pd.DataFrame(self.create_dataframe_of_agr(df,column,new_column,count_column))\n            df_ = pd.DataFrame([(x,df_[x].sort_values().keys()[-1],df_[x].sort_values()[-1]) for x in df_.keys()])\n            df_.rename(columns={1:column,0:self.x_label+'_'+new_column,2:new_column},inplace=True)\n            df_.index = df_[self.x_label+'_'+new_column]\n            df_.index.name=self.data[0][3]\n            df_.drop(columns={self.x_label+'_'+new_column},inplace=True)\n            for i, v in enumerate(df_[new_column]):\n                x[0].text(v + 3, i - 0.15, str(df_.iloc[i][column]), fontweight='bold',color='red')\n            df_[new_column].plot(kind='barh',figsize=self.fsize, ax = x[0],ylabel=self.y_label,legend=True,color='red',width=0.25)\n\n    def plot_column_cat(self):\n            '''\n            A function to plot data for just year 2021 when both columns are categorical,\n            eg age-duration or industry-experience.\n            '''\n            dataframe = self.data[0][0]\n            column = self.data[0][1]\n            new_column = self.data[0][2]\n            count_column = self.data[0][3]\n            df_all = pd.DataFrame(self.create_dataframe_of_agr(dataframe,column,new_column,count_column))\n            self.ax[0][0].set_xlabel(self.x_label, fontsize=15)\n            self.ax[0][0].set_ylabel(self.y_label, fontsize=15)                    \n            self.ax[0][0].set_title(self.title, fontsize=20, fontweight='bold')\n            df_all = pd.DataFrame([(x,df_all[x].sort_values().keys()[-1],df_all[x].sort_values()[-1]) for x in df_all.keys()])\n            df_all.rename(columns={1:column,0:self.x_label+'_'+new_column,2:new_column},inplace=True)\n            df_all.index = df_all[self.x_label+'_'+new_column]\n            df_all.index.name=self.data[0][3]\n            df_all.drop(columns={self.x_label+'_'+new_column},inplace=True)\n      \n            for i, v in enumerate(df_all[new_column]):\n              self.ax[0][0].text(v + 3, i + .25, str(df_all.iloc[i][column]), fontweight='bold',color='blue')\n            df_all[new_column].plot(kind='barh',figsize=self.fsize, ax = self.ax[0][0],ylabel=self.y_label,legend=True,color='blue',width=0.5)\n\n    def plot_column(self):\n            '''\n            A function to plot data for multiple years, when one columns is categorical and other numerical, \n            eg age-duratin or industry-experience.\n            '''\n            dataframe = self.data[0][0]\n            column = self.data[0][1]\n            new_column = self.data[0][2]\n            count_column = self.data[0][3]\n\n            df_all = pd.DataFrame(self.create_dataframe_of_agr(dataframe,column,new_column,count_column))\n\n            if self.count:\n                df_all = df_all.sort_values(by=new_column,ascending=False)[0:self.count]\n    \n            for x in self.ax:\n                for d in self.data[1::]:\n                    df = d[0]\n                    column = d[1]\n                    new_column = d[2]\n                    count_column = d[3]\n                    df_ = pd.DataFrame(self.create_dataframe_of_agr(df,column,new_column,count_column))\n                    try:\n                        df_all = pd.merge(df_all,df_,on=column,how='left')\n                    except KeyError:\n                        df_all = pd.merge(df_all,df_,left_on=df_all.index, right_on=column,how='left')\n                        df_all.index = df_all[column]\n\n                x[0].set_xlabel(self.x_label, fontsize=15)\n                x[0].set_ylabel(self.y_label, fontsize=15)                    \n                x[0].set_title(self.title, fontsize=20, fontweight='bold')\n\n                df_all.plot(ax=x[0],figsize=self.fsize,xlabel=self.x_label)\n    \n                if self.title_c:\n                    if '2020' in df_all.columns:\n                        df_all['% change from 2020-2021'] = 100*(df_all['2021']-df_all['2020'])\/df_all['2020']\n                    if '2019' in df_all.columns:\n                        df_all['% change from 2019-2020'] = 100*(df_all['2020']-df_all['2019'])\/df_all['2019']\n                    if '2018' in df_all.columns:\n                        df_all['% change from 2018-2019'] = 100*(df_all['2019']-df_all['2018'])\/df_all['2018']\n                    if '2017' in df_all.columns:\n                        df_all['% change from 2017-2018'] = 100*(df_all['2018']-df_all['2017'])\/df_all['2018']\n        \n                    x[1].set_xlabel(self.x_label, fontsize=15)\n                    x[1].set_ylabel('percentage', fontsize=15)                    \n                    x[1].set_title(self.title_c, fontsize=20, fontweight='bold')\n                    df_all[[x for x in df_all.columns if '%' in x]].plot(figsize=self.fsize, \n                                                            ax=x[1],\n                                                            xlabel=self.x_label,\n                                                            )\n                    \n    def multi_column_count(self,df,column,agr_list,count_column,new_column=None):\n\n        d = df.groupby(count_column).agg('count')[agr_list].T\n        d = pd.DataFrame([(x,d[x].sort_values(ascending=False).keys()[0:4].values,d[x].sort_values(ascending=False)[0:4].values) for x in d.keys()])\n        d[2] = [x.mean() for x in d[2]]\n\n        d.rename(columns={1:column,0:count_column,2:new_column},inplace=True)\n        d.index = d[count_column]\n        d.index.name=count_column\n        d.drop(columns={count_column},inplace=True)\n        return d\n\n    def plot_multi_column(self):\n        '''\n        A function to plot data for multiple years, when the columns are a list of preference,\n         eg age and list of languages used on regular basis.\n        '''\n        dataframe = self.data[0][0]\n        column = self.data[0][1]\n        new_column = self.data[0][2]\n        count_column = self.data[0][3]\n        agr_list = self.agr_list\n        df_all = self.multi_column_count(dataframe,column,agr_list,count_column,new_column)\n        x = self.ax[0]\n\n        x[0].set_xlabel(self.x_label, fontsize=15)\n        x[0].set_ylabel(self.y_label, fontsize=15)                    \n        x[0].set_title(self.title, fontsize=20, fontweight='bold')\n\n        for i, v in enumerate(df_all[new_column]):\n            x[0].text(v + 3, i + .15, str(df_all.iloc[i][column]), fontweight='bold',color='blue')\n        df_all[new_column].plot(kind='barh',figsize=self.fsize, ax = x[0],ylabel=self.y_label,legend=True,color='blue',width=0.5)\n\n        for d in self.data[1::]:\n            df = d[0]\n            column = d[1]\n            new_column = d[2]\n            count_column=d[3]\n      \n            df_ = self.multi_column_count(df,column,agr_list,count_column,new_column)\n\n            for i, v in enumerate(df_[new_column]):\n                  x[0].text(v + 3, i - 0.15, str(df_.iloc[i][column]), fontweight='bold',color='red')\n            df_[new_column].plot(kind='barh',figsize=self.fsize, ax = x[0],ylabel=self.y_label,legend=True,color='red',width=0.25)  \n            \n\ndef plotly_choropleth_map(df, column, title, max_value):\n    '''\n    This function creates a choropleth map.\n    '''\n    df = pd.DataFrame(df)\n    df['country']=df.index\n    fig = px.choropleth(df, \n                    locations = 'country',  \n                    color = column,\n                    locationmode = 'country names', \n                    color_continuous_scale = 'viridis',\n                    title = title,\n                    range_color = [0, max_value])\n    fig.update(layout=dict(title=dict(x=0.5)))\n    fig.show()\n    return df    \n\ndef plotly_bar_chart(response_counts,title,y_axis_title,orientation):\n    '''\n    This function creates a bar chart.\n    '''\n    response_counts_series = pd.Series(response_counts)\n    pd.DataFrame(response_counts_series).to_csv('.\/individual_charts\/chart_'+title+'.csv',index=True)\n    fig = px.bar(response_counts_series,\n             labels={\"index\": '',\"value\": y_axis_title},\n             text=response_counts_series.values,\n             orientation=orientation,)\n    fig.update_layout(showlegend=False,\n                      title={'text': title+' in 2021',\n                             'y':0.95,\n                             'x':0.5,})\n    fig.show()","8e98eb41":"df_21 = pd.read_csv('..\/input\/kaggle-survey-2021\/kaggle_survey_2021_responses.csv')\ndf_20 = pd.read_csv('..\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv')\ndf_19 = pd.read_csv('..\/input\/kaggle-survey-2019\/multiple_choice_responses.csv')\ndf_18 = pd.read_csv('..\/input\/kaggle-survey-2018\/multipleChoiceResponses.csv')\ndf_17 = pd.read_csv('..\/input\/kaggle-survey-2017\/multipleChoiceResponses.csv',low_memory=False,encoding='ISO-8859-1')\n\ndef col_ren(df):\n    df.rename(columns={'Time from Start to Finish (seconds)':'duration',\n                   'Q1':'age', 'Q2':'gender', 'Q3':'country', 'Q4':'education', 'Q5':'title', 'Q6':'programming_exp', \n                   'Q7_Part_1':'python', 'Q7_Part_2':'r', 'Q7_Part_3':'sql', 'Q7_Part_4':'c', 'Q7_Part_5':'c++', 'Q7_Part_6':'java', \n                   'Q7_Part_7':'javascript', 'Q7_Part_8':'julia', 'Q7_Part_9':'swift', 'Q7_Part_10':'bash', 'Q7_Part_11':'matlab', \n                   'Q7_Part_12':'none_7', 'Q7_OTHER':'other_7', \n                   'Q8':'first_language', \n                   'Q9_Part_1':'jupyter', 'Q9_Part_2':'rstudio', 'Q9_Part_3':'vs', 'Q9_Part_4':'vscode', 'Q9_Part_5':'pycharm', \n                   'Q9_Part_6':'spyder', 'Q9_Part_7':'notepad++', 'Q9_Part_8':'sublime_text', 'Q9_Part_9':'vim\/emacs', 'Q9_Part_10':'matlab_', \n                   'Q9_Part_11':'jupyter_n', 'Q9_Part_12':'none_9', 'Q9_OTHER':'other_9',\n                   'Q10_Part_1':'kaggle','Q10_Part_2':'colab','Q10_Part_3':'azure','Q10_Part_4':'paperspace_gradient',\n                   'Q10_Part_5':'binder_jupyterhub','Q10_Part_6':'code_ocean','Q10_Part_7':'ibm_watson_studio',\n                   'Q10_Part_8':'sagemaker','Q10_Part_9':'emr','Q10_Part_10':'gcn','Q10_Part_11':'gcd','Q10_Part_12':'databricks',\n                   'Q10_Part_13':'zeppelin','Q10_Part_14':'deepnote','Q10_Part_15':'observable','Q10_Part_16':'none_10','Q10_OTHER':'other_10',\n                   'Q11':'prefered_computing', \n                   'Q12_Part_1':'gpu','Q12_Part_2':'tpu','Q12_Part_3':'trainium','Q12_Part_4':'inferentia','Q12_Part_5':'none_12',\n                   'Q12_OTHER':'other_12',\n                   'Q13':'tpu_usage',\n                   'Q14_Part_1':'matplotlib','Q14_Part_2':'seaborn','Q14_Part_3':'plotly','Q14_Part_4':'ggplot','Q14_Part_5':'shiny'\n                   ,'Q14_Part_6':'d3js','Q14_Part_7':'altair','Q14_Part_8':'bokeh','Q14_Part_9':'geoplotlib'\n                   ,'Q14_Part_10':'leaflet_folium','Q14_Part_11':'none_14','Q14_OTHER':'other_14'\n                   ,'Q15':'machine_exp'\n                   ,'Q16_Part_1':'scikit_learn','Q16_Part_2':'tensorflow','Q16_Part_3':'keras','Q16_Part_4':'pytorch','Q16_Part_5':'fastai'\n                   ,'Q16_Part_6':'mxnet','Q16_Part_7':'xgboost','Q16_Part_8':'lightgbm','Q16_Part_9':'catboost','Q16_Part_10':'prophet'\n                   ,'Q16_Part_11':'h2o3','Q16_Part_12':'caret','Q16_Part_13':'tidymodels','Q16_Part_14':'jax','Q16_Part_15':'pytorch_lightning'\n                   ,'Q16_Part_16':'huggingface','Q16_Part_17':'none_16','Q16_OTHER':'other_16'\n                   ,'Q17_Part_1':'regression','Q17_Part_2':'decision_random','Q17_Part_3':'gradient_boosting','Q17_Part_4':'bayesian'\n                   ,'Q17_Part_5':'evolution','Q17_Part_6':'dnn','Q17_Part_7':'cnn','Q17_Part_8':'gan','Q17_Part_9':'rnn'\n                   ,'Q17_Part_10':'transformer','Q17_Part_11':'none_17','Q17_OTHER':'other_17'\n                   ,'Q18_Part_1':'iv_tools','Q18_Part_2':'image_segmentation','Q18_Part_3':'object_detection','Q18_Part_4':'image_classification',\n                   'Q18_Part_5':'generative','Q18_Part_6':'none_18','Q18_OTHER':'others_18'\n                   ,'Q19_Part_1':'word_embedding','Q19_Part_2':'encoder_decoder','Q19_Part_3':'contextualized_embedding'\n                   ,'Q19_Part_4':'transformer_','Q19_OTHER':'others_19','Q19_Part_5':'none_19',\n                   'Q20':'industry', 'Q21':'company_size', 'Q22':'data_science_size', 'Q23':'ml_relevance',\n                   'Q24_Part_1':'analysis', 'Q24_Part_2':'data_infrastructure', 'Q24_Part_3':'prototypes', 'Q24_Part_4':'product_improvement', \n                   'Q24_Part_5':'model_improvement', 'Q24_Part_6':'R&D', 'Q24_Part_7':'none_24','Q24_OTHER':'others_24',\n                   'Q25':'current_yr_compensation', 'Q26':'company_past_5_yr_expense',\n                   'Q27_A_Part_1':'aws','Q27_A_Part_2':'azure_','Q27_A_Part_3':'gcp','Q27_A_Part_4':'ibm_red_hat','Q27_A_Part_5':'oracle','Q27_A_Part_6':'sap',\n                   'Q27_A_Part_7':'salesforce','Q27_A_Part_8':'vmware','Q27_A_Part_9':'alibaba','Q27_A_Part_10':'tencent','Q27_A_Part_11':'none_27',\n                   'Q27_A_OTHER':'othes_27',\n                   'Q28':'best_developer_exp', \n                   'Q29_A_Part_1':'aws_ec2','Q29_A_Part_2':'ms_azure_vm','Q29_A_Part_3':'google_cce','Q29_A_Part_4':'none_29','Q29_A_OTHER':'others_29',\n                   'Q30_A_Part_1':'ms_azure_dls', 'Q30_A_Part_2':'ms_azure_ds', 'Q30_A_Part_3':'aws_s3', 'Q30_A_Part_4':'aws_efs', 'Q30_A_Part_5':'gcs', \n                   'Q30_A_Part_6':'gcf', 'Q30_A_Part_7':'none_30', 'Q30_A_OTHER':'other_30',\n                   'Q31_A_Part_1':'aws_sagemaker','Q31_A_Part_2':'aws_mls','Q31_A_Part_3':'google_vi','Q31_A_Part_4':'datarobot','Q31_A_Part_5':'databricks_',\n                   'Q31_A_Part_6':'dataiku','Q31_A_Part_7':'alterys','Q31_A_Part_8':'rapidminer','Q31_A_Part_9':'none_31','Q31_A_OTHER':'othes_31',\n                   'Q32_A_Part_1':'mysql','Q32_A_Part_2':'postgresql','Q32_A_Part_3':'sqlite','Q32_A_Part_4':'oracle_db','Q32_A_Part_5':'mongodb',\n                   'Q32_A_Part_6':'snowflake','Q32_A_Part_7':'ibmdb2','Q32_A_Part_8':'ms_sqlserver','Q32_A_Part_9':'ms_azure_sql',\n                   'Q32_A_Part_10':'ms_sqldatabase','Q32_A_Part_11':'ms_cosmosdb','Q32_A_Part_12':'aws_redshift','Q32_A_Part_13':'aws_aurora',\n                   'Q32_A_Part_14':'aws_rds','Q32_A_Part_15':'aws_dynamodb','Q32_A_Part_16':'google_bigquery','Q32_A_Part_17':'google_sql',\n                   'Q32_A_Part_18':'google_firestore','Q32_A_Part_19':'google_bigtable', 'Q32_A_Part_20':'google_spanner','Q32_A_Part_21':'none_32',\n                   'Q32_A_OTHER':'other_32',\n                   'Q33':'bdp_most_often', \n                   'Q34_A_Part_1':'aws_quicksight','Q34_A_Part_2':'ms_powerbi','Q34_A_Part_3':'google_ds','Q34_A_Part_4':'looker','Q34_A_Part_5':'tableau',\n                   'Q34_A_Part_6':'salesforce(bi)','Q34_A_Part_7':'tableau_crm','Q34_A_Part_8':'Qlik',\n                   'Q34_A_Part_9':'domo','Q34_A_Part_10':'tibco_spotfire','Q34_A_Part_11':'alteryx','Q34_A_Part_12':'sisence','Q34_A_Part_13':'sap_analytics',\n                   'Q34_A_Part_14':'ms_synapse','Q34_A_Part_15':'thoughtspot','Q34_A_Part_16':'none_34','Q34_A_OTHER':'other_34',\n                   'Q35':'bi_most_often',\n                   'Q36_A_Part_1':'data_augumentation', 'Q36_A_Part_2':'feature_engineering', 'Q36_A_Part_3':'model_selection', \n                   'Q36_A_Part_4':'model_architecture_searches', 'Q36_A_Part_5':'hyperparameter_tuning', 'Q36_A_Part_6':'auto_ml_pipeline', \n                   'Q36_A_Part_7':'none_36', 'Q36_A_OTHER':'other_36',\n                   'Q37_A_Part_1':'google_automl','Q37_A_Part_2':'h2o_driverless_ai','Q37_A_Part_3':'databricks_automl','Q37_A_Part_4':'datarobot_automl',\n                   'Q37_A_Part_5':'aws_sagemaker_autopilot','Q37_A_Part_6':'azure_aml','Q37_A_Part_7':'none_37','Q37_A_OTHER':'other_37',\n                   'Q38_A_Part_1':'neptune_ai','Q38_A_Part_2':'weights_biases','Q38_A_Part_3':'comet_ml','Q38_A_Part_4':'sacred_omniboard',\n                   'Q38_A_Part_5':'tensorboard','Q38_A_Part_6':'guild_ai','Q38_A_Part_7':'polyaxon','Q38_A_Part_8':'clearml',\n                   'Q38_A_Part_9':'domino_model_monitor','Q38_A_Part_10':'mlflow','Q38_A_Part_11':'none_38','Q38_A_OTHER':'other_38',\n                   'Q39_Part_1':'plotly_','Q39_Part_2':'streamlit','Q39_Part_3':'nbviewer','Q39_Part_4':'github','Q39_Part_5':'personal_blog',\n                   'Q39_Part_6':'kaggle_','Q39_Part_7':'colab_','Q39_Part_8':'shiny_','Q39_Part_9':'none_39','Q39_OTHER':'other_39',\n                   'Q40_Part_1':'coursera','Q40_Part_2':'edx','Q40_Part_3':'kaggle_learn','Q40_Part_4':'datacamp','Q40_Part_5':'fast_ai',\n                   'Q40_Part_6':'udacity','Q40_Part_7':'udemy','Q40_Part_8':'linkedin_learning','Q40_Part_9':'cloud_certifications',\n                   'Q40_Part_10':'university','Q40_Part_11':'none_40','Q40_OTHER':'other_40',\n                   'Q41':'primary_work_tool',\n                   'Q42_Part_1':'twitter','Q42_Part_2':'email_newsletters','Q42_Part_3':'reddit','Q42_Part_4':'kaggle_forums','Q42_Part_5':'course_forums',\n                   'Q42_Part_6':'youtube','Q42_Part_7':'podcasts','Q42_Part_8':'blogs','Q42_Part_9':'journals','Q42_Part_10':'slack_communities',\n                   'Q42_Part_11':'none_42','Q42_OTHER':'others_42',\n                   'Q27_B_Part_1':'aws_2','Q27_B_Part_2':'ms_azure_2','Q27_B_Part_3':'gcp_2','Q27_B_Part_4':'ibm_redhat_5','Q27_B_Part_5':'oracle_2',\n                   'Q27_B_Part_6':'sap_2',\n                   'Q27_B_Part_7':'vmware_2','Q27_B_Part_8':'salesforce_2','Q27_B_Part_9':'alibaba_2','Q27_B_Part_10':'tencent_2','Q27_B_Part_11':'none_27b',\n                   'Q27_B_OTHER':'other_27b',\n                   'Q29_B_Part_1':'ec2_2','Q29_B_Part_2':'ms_azure_vm_2','Q29_B_Part_3':'gcc_2','Q29_B_Part_4':'none_29b','Q29_B_OTHER':'other_29b',\n                   'Q30_B_Part_1':'ms_azure_dls_2','Q30_B_Part_2':'ms_azure_ds_2','Q30_B_Part_3':'aws_s3_2','Q30_B_Part_4':'aws_efs_2','Q30_B_Part_5':'gcs_2',\n                   'Q30_B_Part_6':'google_firestore_2','Q30_B_Part_7':'none_30b','Q30_B_OTHER':'other_30b',\n                   'Q31_B_Part_1':'aws_sagemaker_2','Q31_B_Part_2':'azure_mls_2','Q31_B_Part_3':'google_vertex_ai_2','Q31_B_Part_4':'datarobot_2',\n                   'Q31_B_Part_5':'databricks_2','Q31_B_Part_6':'dataiku_2','Q31_B_Part_7':'alteryx_2','Q31_B_Part_8':'rapidminer_2',\n                   'Q31_B_Part_9':'none_31b','Q31_B_OTHER':'other_31b',\n                   'Q32_B_Part_1':'mysql_2','Q32_B_Part_2':'postgresql_2','Q32_B_Part_3':'sqlite_2','Q32_B_Part_4':'oracle_db_2','Q32_B_Part_5':'mongo_db_2',\n                   'Q32_B_Part_6':'snowflake_2','Q32_B_Part_7':'ibm_db_2','Q32_B_Part_8':'ms_sql_2','Q32_B_Part_9':'ms_sqldb_2',\n                   'Q32_B_Part_10':'ms_cosmosdb_2','Q32_B_Part_11':'aws_redshift_2','Q32_B_Part_12':'aws_aurora_2','Q32_B_Part_13':'aws_dynamodb_2',\n                   'Q32_B_Part_14':'amazon_rds_2','Q32_B_Part_15':'google_bigquery_2','Q32_B_Part_16':'google_sql_2','Q32_B_Part_17':'google_firestore_3',\n                   'Q32_B_Part_18':'google_bigtable_2','Q32_B_Part_19':'google_spanner_2','Q32_B_Part_20':'none_32b','Q32_B_OTHER':'other_32b',\n                   'Q34_B_Part_1':'ms_powerbi_2','Q34_B_Part_2':'aws_quicksight_2','Q34_B_Part_3':'google_ds_2','Q34_B_Part_4':'looker_2',\n                   'Q34_B_Part_5':'tableau_crm_2',\n                   'Q34_B_Part_6':'qlik_2','Q34_B_Part_7':'domo_2','Q34_B_Part_8':'tibco_spotfire_2','Q34_B_Part_9':'alteryx_bi_2','Q34_B_Part_10':'sisense_2',\n                   'Q34_B_Part_11':'sap_analytics_2','Q34_B_Part_12':'ms_synapse_2','Q34_B_Part_13':'thoughtspot_2','Q34_B_Part_14':'none_34b',\n                   'Q34_B_Part_15': 'thoughtspot','Q34_B_Part_16': 'none',\n                   'Q34_B_OTHER':'other_34b',\n                   'Q36_B_Part_1':'data_aug_2','Q36_B_Part_2':'feature_engineering_2','Q36_B_Part_3':'model_selection_2',\n                   'Q36_B_Part_4':'model_architecture_2','Q36_B_Part_5':'hyperparam_2','Q36_B_Part_6':'full_ml_2','Q36_B_Part_7':'none_36b',\n                   'Q36_B_OTHER':'other_36b',\n                   'Q37_B_Part_1':'google_automl_2','Q37_B_Part_2':'h2o_driverless_2','Q37_B_Part_3':'databricks_2_','Q37_B_Part_4':'datarobot_2',\n                   'Q37_B_Part_5':'aws_sagemaker_2','Q37_B_Part_6':'azure_ml_2','Q37_B_Part_7':'none_37b','Q37_B_OTHER':'other_37b',\n                   'Q38_B_Part_1':'neptune_ai_2','Q38_B_Part_2':'weights_biases_2','Q38_B_Part_3':'comet_ml','Q38_B_Part_4':'sacred_omniboard_2',\n                   'Q38_B_Part_5':'tensorboard_2','Q38_B_Part_6':'guild_ai_2','Q38_B_Part_7':'polyaxon_2','Q38_B_Part_8':'clearml_2',\n                   'Q38_B_Part_9':'domino_2','Q38_B_Part_10':'mlflow_2','Q38_B_Part_11':'none_38b','Q38_B_OTHER':'other_38b'\n      }, inplace=True)\n    df = df.iloc[1::]\n    df['duration'] = df['duration'].astype('int')\n    return df\n\ndf_21 = col_ren(df_21)\ndf_20 = col_ren(df_20)\ndf_19 = df_19.iloc[1::]\ndf_19.rename(columns={'Q10':'current_yr_compensation', 'Q15':'programming_exp', 'Q23':'machine_exp','Q5':'title',\n                      'Time from Start to Finish (seconds)':'duration','Q1':'age','Q2':'gender','Q3':'country',\n                      'Q4':'education'\n                     },inplace=True)\ndf_20.drop(columns={'current_yr_compensation'}, inplace=True)\ndf_20.rename(columns={'Q24':'current_yr_compensation'}, inplace=True)\ndf_18 = df_18.iloc[1::]\ndf_21.replace({'United Kingdom of Great Britain and Northern Ireland':'UK'}, inplace=True)\n\ndf_21['machine_exp_avg'] = df_21['machine_exp'].replace({'5-10 years':7, 'Under 1 year':0.5, \n                                                         'I do not use machine learning methods':0, \n               '10-20 years':15, '2-3 years':2.5, np.nan:0, '1-2 years':1.5, '4-5 years':4.5, '3-4 years':3.5,\n               '20 or more years':20,\n               '20+ years':20, '1-3 years':2, '< 1 years':0.5, '3-5 years':4,'I have never written code':0})\n\ndf_21['programming_exp_avg'] = df_21['programming_exp'].replace({'5-10 years':7, 'Under 1 year':0.5, 'I do not use machine learning methods':0, \n               '10-20 years':15, '2-3 years':2.5, np.nan:0, '1-2 years':1.5, '4-5 years':4.5, '3-4 years':3.5,\n               '20 or more years':20,\n               '20+ years':20, '1-3 years':2, '< 1 years':0.5, '3-5 years':4,'I have never written code':0})\n\ndf_19['machine_exp'] = df_19['machine_exp'].replace({'1-2 years':'1-2 years', \n                                                     'I have never written code':'I do not use machine learning methods', \n       '20+ years':'20+ years', '3-5 years':'3-4 years', '5-10 years':'5-10 years', '10-20 years':'10-20 years'})\n\ndf_19['programming_exp'] = df_19['programming_exp'].replace({'1-2 years':'1-2 years', \n                                                     'I have never written code':'I do not use machine learning methods', \n       '20+ years':'20+ years', '3-5 years':'3-4 years', '5-10 years':'5-10 years', '10-20 years':'10-20 years'})\n\ndf_21['current_yr_compensation_avg'] = df_21['current_yr_compensation'].replace({'25,000-29,999':27500, \n        '60,000-69,999':65000, '$0-999':500, '30,000-39,999':35000, np.nan:0,\n       '15,000-19,999':17500, '70,000-79,999':75000, '2,000-2,999':2500, '10,000-14,999':12500,\n       '5,000-7,499':6000, '20,000-24,999':22500, '1,000-1,999':1500, '100,000-124,999':112500,\n       '7,500-9,999':8700, '4,000-4,999':4500, '40,000-49,999':45000, '50,000-59,999':55000,\n       '3,000-3,999':3500, '300,000-499,999':375000, '200,000-249,999':225000,\n       '125,000-149,999':137000, '250,000-299,999':275000, '80,000-89,999':85000,\n       '90,000-99,999':95000, '150,000-199,999':175000, '>$1,000,000':1000000,\n       '$500,000-999,999':75000})\n\ndf_20['current_yr_compensation_avg'] = df_20['current_yr_compensation'].replace({'25,000-29,999':27500, \n        '60,000-69,999':65000, '$0-999':500, '30,000-39,999':35000, np.nan:0,\n       '15,000-19,999':17500, '70,000-79,999':75000, '2,000-2,999':2500, '10,000-14,999':12500,\n       '5,000-7,499':6000, '20,000-24,999':22500, '1,000-1,999':1500, '100,000-124,999':112500,\n       '7,500-9,999':8700, '4,000-4,999':4500, '40,000-49,999':45000, '50,000-59,999':55000,\n       '3,000-3,999':3500, '300,000-499,999':375000, '200,000-249,999':225000,\n       '125,000-149,999':137000, '250,000-299,999':275000, '80,000-89,999':85000,\n       '90,000-99,999':95000, '150,000-199,999':175000, '>$1,000,000':1000000,\n       '$500,000-999,999':75000,'> $500,000':500000,'300,000-500,000':400000})\n\ndf_19['current_yr_compensation_avg'] = df_19['current_yr_compensation'].replace({'25,000-29,999':27500, \n        '60,000-69,999':65000, '$0-999':500, '30,000-39,999':35000, np.nan:0,\n       '15,000-19,999':17500, '70,000-79,999':75000, '2,000-2,999':2500, '10,000-14,999':12500,\n       '5,000-7,499':6000, '20,000-24,999':22500, '1,000-1,999':1500, '100,000-124,999':112500,\n       '7,500-9,999':8700, '4,000-4,999':4500, '40,000-49,999':45000, '50,000-59,999':55000,\n       '3,000-3,999':3500, '300,000-499,999':375000, '200,000-249,999':225000,\n       '125,000-149,999':137000, '250,000-299,999':275000, '80,000-89,999':85000,\n       '90,000-99,999':95000, '150,000-199,999':175000, '>$1,000,000':1000000,'> $500,000':500000,\n       '$500,000-999,999':75000,'300,000-500,000':400000})\n\nclear_output()","693c5833":"d = create_dataframe_of_agr(df_21,'country','Count of respondents',None,'count',return_percentages=False)\nplotly_choropleth_map(d, \n                       'Count of respondents', \n                       'Total number of responses per country in 2021',\n                        max_value = 1000)\n\nd = count_then_return_percent(df_21,'country',20)\nplotly_bar_chart(d,'% of respondents from top 20 countries','% of respondents',orientation='h')\nprint('\\n\\n')","c0c61991":"fig1, ax1 = plt.subplots()\nfig2, ax2 = plt.subplots()\n\nplot_data(data=[[df_21,'country','2021',None],\n                  [df_20,'country','2020',None],\n                  [df_19,'country','2019',None],\n                  [df_18,'Q3','2018',None],\n                 ],\n            agr='count',\n            title='Number of respondents from 30 countries with most respondents',\n            y_label='count',\n            x_label='Countries',\n            title_c = '% change in number of respondents from various countries compared to previous year',\n            ax=[[ax1,ax2]],\n            fsize=(20,7),\n            count=30\n            ).plot_column()","636aba36":"fig1, ax1 = plt.subplots()\nfig2, ax2 = plt.subplots()\n\nplot_data(data=[[df_21,'machine_exp','2021','current_yr_compensation_avg'],\n                  [df_20,'machine_exp','2020','current_yr_compensation_avg'],\n                  [df_19,'machine_exp','2019','current_yr_compensation_avg'],\n                 ],\n            agr='mean',\n            title='How yearly compensation has changed with machine exp. over the past years ',\n            y_label='yearly compensation (USD)',\n            x_label='Machine Experience',\n            title_c='% change in yearly compensation',\n            ax=[[ax1,ax2]],\n            fsize=(20,7),\n            count=30\n            ).plot_column()","0846c4a2":"fig1, ax1 = plt.subplots()\nfig2, ax2 = plt.subplots()\n\nplot_data(data=[[df_21,'programming_exp','2021','current_yr_compensation_avg'],\n                  [df_20,'programming_exp','2020','current_yr_compensation_avg'],\n                  [df_19,'programming_exp','2019','current_yr_compensation_avg'],\n                 ],\n            agr='mean',\n            title='How yearly compensation has changed with programming exp. over the past years',\n            y_label='yearly compensation (USD)',\n            x_label='Machine Experience',\n            title_c='% change in yearly compensation',\n            ax=[[ax1,ax2]],\n            fsize=(20,7),\n            count=30\n            ).plot_column()","03000d32":"fig1, ax1 = plt.subplots()\nfig1, ax2 = plt.subplots()\n\nplot_data(data=[[df_21,'age','2021',None],\n                  [df_20,'age','2020',None],\n                  [df_19,'age','2019',None],\n                  [df_18,'Q2','2018',None],\n                 ],\n            agr='count',\n            title='Number of entries from each age group',\n            y_label='count',\n            x_label='Age groups',\n            title_c = '% change in number of respondents of various age groups',\n            ax=[[ax1,ax2]],\n            fsize=(10,5),\n            ).plot_column()","56a5e1c0":"fig1, f1_axes = plt.subplots(ncols=2, nrows=2, constrained_layout=True,figsize=(20,10),)\nspec4 = gridspec.GridSpec(ncols=2, nrows=2, figure=fig1)\n\nax1 = fig1.add_subplot(spec4[0, 0])\nax2 = fig1.add_subplot(spec4[0, 1])\nax3 = fig1.add_subplot(spec4[1, 0])\nax4 = fig1.add_subplot(spec4[1, 1])\n\nplot_data(data=[[df_21[df_21.gender=='Woman'],'age','2021',None],\n                  [df_20[df_20.gender=='Woman'],'age','2020',None],\n                  [df_19[df_19.gender=='Female'],'age','2019',None],\n                  [df_18[df_18.Q1=='Female'],'Q1','2018',None],\n                 ],\n            agr='count',\n            title='Number of entries by women from each age group',\n            y_label='count',\n            x_label='Age groups',\n            title_c = '% change in women respondents from various age groups',\n            ax=[[ax1,ax2]],\n            ).plot_column()\n\nplot_data(data=[[df_21[df_21.gender=='Man'],'age','2021',None],\n                  [df_20[df_20.gender=='Man'],'age','2020',None],\n                  [df_19[df_19.gender=='Male'],'age','2019',None],\n                  [df_18[df_18.Q1=='Male'],'Q1','2018',None],\n                 ],\n            agr='count',\n            title='Number of entries by men from each age group',\n            y_label='count',\n            x_label='Age groups',\n            title_c = '% change in men respondents from various age groups',\n            ax=[[ax3,ax4]],\n            ).plot_column()            ","949b63cd":"titles = list(set(df_21.title.unique()).intersection(set(df_20.title.unique())).intersection(set(df_19.title.unique()))-set(['Other']))\ntitles_21 = df_21[df_21.title.isin(titles)][['gender','title']]\ntitles_20 = df_20[df_20.title.isin(titles)][['gender','title']]\ntitles_19 = df_19[df_19.title.isin(titles)][['gender','title']]\n\nfig1, f1_axes = plt.subplots(ncols=2, nrows=2, constrained_layout=True,figsize=(30,10),)\nspec4 = gridspec.GridSpec(ncols=2, nrows=2, figure=fig1)\n\nax1 = fig1.add_subplot(spec4[0, 0])\nax2 = fig1.add_subplot(spec4[0, 1])\nax3 = fig1.add_subplot(spec4[1, 0])\nax4 = fig1.add_subplot(spec4[1, 1])\n\nplot_data(data=[[titles_21[titles_21.gender=='Woman'],'title','2021',None],\n                  [titles_20[titles_20.gender=='Woman'],'title','2020',None],\n                  [titles_19[titles_19.gender=='Female'],'title','2019',None],\n                 ],\n            agr='count',\n            title='Number of entries by women with different titles',\n            y_label='count',\n            x_label='Titles',\n            title_c = '% change in number of women with different titles',\n            ax=[[ax1,ax2]],\n            ).plot_column()\n\nplot_data(data=[[titles_21[titles_21.gender=='Man'],'title','2021',None],\n                  [titles_20[titles_20.gender=='Man'],'title','2020',None],\n                  [titles_19[titles_19.gender=='Male'],'title','2019',None],\n                 ],\n            agr='count',\n            title='Number of entries by men with different titles',\n            y_label='count',\n            x_label='Titles',\n            title_c = '% change in number of men with different titles',\n            ax=[[ax3,ax4]],\n            ).plot_column()            ","358b75f6":"c = df_21.country.value_counts().sort_values(ascending=False)[0:9].keys()\nd = df_21[df_21.country.isin(c)]\ncn_men = pd.DataFrame(d[d.gender=='Man'].groupby(['country']).agg(\"count\")['gender'])\ncn_men.rename(columns={'gender':'men'},inplace=True)\ncn_women = pd.DataFrame(d[d.gender=='Woman'].groupby(['country']).agg(\"count\")['gender'])\ncn_women.rename(columns={'gender':'women'},inplace=True)\nd = pd.merge(cn_men,cn_women,on='country',how='left')\nd['mw'] = 100*d['women']\/d['men']\nd = d.sort_values(by='mw',ascending=True)\nplotly_bar_chart(d['mw'], 'Percentage of female respondents in countries with most respondents', 'Percentage',orientation='h')\n\ni = df_21.industry.value_counts().sort_values(ascending=False)[1:6].keys()\nd = df_21[df_21.industry.isin(i)]\nd = d[d.country.isin(c)]\nd = d.groupby(['country']).agg({\"industry\": \"value_counts\"}).unstack(fill_value=0)['industry']\n(d\/d.sum()).plot(figsize=(20,10),title='Top 5 industry count in countries with most respondents')\nplt.show()","ac8e7add":"fig1, ax1 = plt.subplots()\n\nplot_data(data=[[df_21[df_21.gender=='Man'],'age','men','duration'],\n                  [df_21[df_21.gender=='Woman'],'age','women','duration'],\n                 ],\n            agr='mean',\n            title='Time spent by each age group to complete the survey',\n            y_label='mean duration',\n            x_label='Age groups',\n            ax=[[ax1,ax1]],\n            fsize=(10,5),\n            ).plot_column()            ","7aa61f7b":"d = top_count(df_21,'industry',11)\n\nfig1, ax1 = plt.subplots()\n\nplot_data(data=[[d[d.gender=='Man'],'industry','men machine learning experience','machine_exp_avg'],\n                  [d[d.gender=='Woman'],'industry','women machine learning experience','machine_exp_avg'],\n                 ],\n            agr='mean',\n            title='Level of experience of respondents from top 10 industries with most respondents',\n            y_label='Average Experience (years)',\n            x_label='Industries',\n            ax=[[ax1]],\n            fsize=(20,5),\n            ).plot_column()            \n\nplot_data(data=[[d[d.gender=='Man'],'industry','men programming experience','programming_exp_avg'],\n                  [d[d.gender=='Woman'],'industry','women programming experience','programming_exp_avg'],\n                 ],\n            agr='mean',\n            title='Level of experience of respondents from top 10 industries with most respondents',\n            y_label='Average Experience (years)',\n            x_label='Industries',\n            ax=[[ax1]],\n            fsize=(20,5),\n            ).plot_column()                        ","3f32caf5":"fig1, ax1 = plt.subplots()\n\nd_21 = df_21[(df_21.ml_relevance!=np.nan) & (df_21.ml_relevance!='I do not know')]\n\nplot_data(data=[[d_21[d_21.gender=='Man'],'ml_relevance','men','industry'],\n                [d_21[d_21.gender=='Woman'],'ml_relevance','women','industry']\n                 ],\n            cat=True,\n            agr='value_counts',\n            title='How relevant is machine learning in various industries',\n            x_label='count',\n            ax=[[ax1]],\n            fsize=(15,15),\n            ).plot_column_cat_multi()           ","4a7ec650":"cn_men = pd.DataFrame(df_21[df_21.gender=='Man'].groupby(['industry']).agg(\"count\")['gender'])\ncn_men.rename(columns={'gender':'men'},inplace=True)\ncn_women = pd.DataFrame(df_21[df_21.gender=='Woman'].groupby(['industry']).agg(\"count\")['gender'])\ncn_women.rename(columns={'gender':'women'},inplace=True)\nd = pd.merge(cn_men,cn_women,on='industry',how='left')\nd['mw'] = 100*d['women']\/d['men']\nd = d.sort_values(by='mw',ascending=True)\nplotly_bar_chart(d['mw'], 'Percentage of female respondents in various industry', 'Percentage',orientation='h')","131d5676":"fig1, ax1 = plt.subplots()\n\nplot_data(data=[[df_21[df_21.gender=='Man'],'age','men','industry'],\n                [df_21[df_21.gender=='Woman'],'age','women','industry'],\n                 ],\n            cat=True,\n            agr='value_counts',\n            title='Most common age group in every industry',\n            x_label='count',\n            ax=[[ax1]],\n            fsize=(15,10),\n            ).plot_column_cat_multi() ","c22967b2":"fig1, ax1 = plt.subplots()\n\nplot_data(data=[[df_21[df_21.gender=='Man'],'language','Man','age'],\n                [df_21[df_21.gender=='Woman'],'language','Woman','age'],\n                 ],\n            agr_list = ['python','r', 'sql', 'c', 'c++', 'java', 'javascript', 'julia', 'swift', 'bash', 'matlab'],\n            title='Most common languages used on regular basis by different age groups (2021)',\n            x_label='count',\n            ax=[[ax1]],\n            fsize=(15,10),\n            ).plot_multi_column()                        \n\nfig1, ax1 = plt.subplots()\n\nplot_data(data=[[df_20[df_20.gender=='Man'],'language','Man','age'],\n                [df_20[df_20.gender=='Woman'],'language','Woman','age'],\n                 ],\n            agr_list = ['python','r', 'sql', 'c', 'c++', 'java', 'javascript', 'julia', 'swift', 'bash', 'matlab'],\n            title='Most common languages used on regular basis by different age groups (2020)',\n            x_label='count',\n            ax=[[ax1]],\n            fsize=(15,10),\n            ).plot_multi_column()                        ","e3cd2e80":"fig1, ax1 = plt.subplots()\nfig2, ax2 = plt.subplots()\n\nd = top_count(df_21,'industry',11)\nfirst_language = list(df_21.first_language.unique())\nd_21 = d[d.first_language.isin(first_language)]\n\nplot_data(data=[[df_21[df_21.gender=='Man'],'title','men','age'],\n                [df_21[df_21.gender=='Woman'],'title','women','age'],\n                 ],\n            cat=True,\n            agr='value_counts',\n            title='Most common title for every age group (2021)',\n            x_label='count',\n            ax=[[ax1]],\n            fsize=(15,10),\n            ).plot_column_cat_multi()                        \n\nplot_data(data=[[df_20[df_20.gender=='Man'],'title','men','age'],\n                [df_20[df_20.gender=='Woman'],'title','women','age'],\n                 ],\n            cat=True,\n            agr='value_counts',\n            title='Most common title for every age group (2020)',\n            x_label='count',\n            ax=[[ax2]],\n            fsize=(15,10),\n            ).plot_column_cat_multi()","3944fe35":"fig1, ax1 = plt.subplots()\n\nd_21 = df_21[df_21.current_yr_compensation!='$0-999']\n\nplot_data(data=[[d_21[d_21.gender=='Man'],'current_yr_compensation','men','industry'],\n                [d_21[d_21.gender=='Woman'],'current_yr_compensation','women','industry'],\n                 ],\n            cat=True,\n            agr='value_counts',\n            title='Most common yearly compensation for every industry (2021)',\n            x_label='count',\n            ax=[[ax1]],\n            fsize=(15,10),\n            ).plot_column_cat_multi()      ","b311e430":"fig1, ax1 = plt.subplots()\n\nd_21 = df_21[df_21.current_yr_compensation!='$0-999']\nplot_data(data=[[d_21[d_21.gender=='Man'],'current_yr_compensation','men','title'],\n                [d_21[d_21.gender=='Woman'],'current_yr_compensation','women','title'],\n                 ],\n            cat=True,\n            agr='value_counts',\n            title='Most common yearly compensation for every title (2021)',\n            x_label='count',\n            ax=[[ax1]],\n            fsize=(15,10),\n            ).plot_column_cat_multi()                        ","a150b85b":"fig1, ax1 = plt.subplots()\n\nd_21 = df_21[df_21.current_yr_compensation!='$0-999']\n\nplot_data(data=[[d_21[d_21.gender=='Man'],'current_yr_compensation','men','education'],\n                [d_21[d_21.gender=='Woman'],'current_yr_compensation','women','education'],\n                 ],\n            cat=True,\n            agr='value_counts',\n            title='Most common, yearly compensation for every education (2021)',\n            x_label='count',\n            ax=[[ax1]],\n            fsize=(15,10),\n            ).plot_column_cat_multi()                        ","1848364f":"fig1, ax1 = plt.subplots()\n\nd_21 = df_21[df_21.current_yr_compensation!='$0-999']\n\nplot_data(data=[[d_21[d_21.gender=='Man'],'current_yr_compensation','men','machine_exp'],\n                [d_21[d_21.gender=='Woman'],'current_yr_compensation','women','machine_exp'],\n                 ],\n            cat=True,\n            agr='value_counts',\n            title='Most common, yearly compensation for every machine experience (2021)',\n            x_label='count',\n            ax=[[ax1]],\n            fsize=(15,10),\n            ).plot_column_cat_multi()                        \n\nfig1, ax1 = plt.subplots()\n\nplot_data(data=[[d_21[d_21.gender=='Man'],'current_yr_compensation','men','programming_exp'],\n                [d_21[d_21.gender=='Woman'],'current_yr_compensation','women','programming_exp'],\n                 ],\n            cat=True,\n            agr='value_counts',\n            title='Most common, yearly compensation for every programming experience (2021)',\n            x_label='count',\n            ax=[[ax1]],\n            fsize=(15,10),\n            ).plot_column_cat_multi()                        ","48e39b23":"fig1, ax1 = plt.subplots()\n\nd = df_21[df_21.gender=='Woman']\n\nplot_data(data=[\n                [d[d.title==d.title.unique()[2]],'machine_exp',d.title.unique()[2],'current_yr_compensation_avg'],\n                [d[d.title==d.title.unique()[3]],'machine_exp',d.title.unique()[3],'current_yr_compensation_avg'],\n                [d[d.title==d.title.unique()[4]],'machine_exp',d.title.unique()[4],'current_yr_compensation_avg'],\n                [d[d.title==d.title.unique()[5]],'machine_exp',d.title.unique()[5],'current_yr_compensation_avg'],\n                [d[d.title==d.title.unique()[7]],'machine_exp',d.title.unique()[7],'current_yr_compensation_avg'],\n                [d[d.title==d.title.unique()[8]],'machine_exp',d.title.unique()[8],'current_yr_compensation_avg'],\n                [d[d.title==d.title.unique()[9]],'machine_exp',d.title.unique()[9],'current_yr_compensation_avg'],\n                [d[d.title==d.title.unique()[10]],'machine_exp',d.title.unique()[10],'current_yr_compensation_avg'],\n                [d[d.title==d.title.unique()[11]],'machine_exp',d.title.unique()[11],'current_yr_compensation_avg'],\n                [d[d.title==d.title.unique()[12]],'machine_exp',d.title.unique()[12],'current_yr_compensation_avg'],\n                [d[d.title==d.title.unique()[13]],'machine_exp',d.title.unique()[13],'current_yr_compensation_avg'],\n                [d[d.title==d.title.unique()[14]],'machine_exp',d.title.unique()[14],'current_yr_compensation_avg'],\n                 ],\n            agr='mean',\n            title='How yearly compensation changes for women with title and machine exp.',\n            y_label='compensation (USD)',\n            x_label='Experience',\n            ax=[[ax1]],\n            fsize=(20,10),\n            ).plot_column()            ","29a49c05":"fig1, ax1 = plt.subplots()\n\nd = df_21[df_21.gender=='Woman']\n\nplot_data(data=[\n                [d[d.title==d.title.unique()[2]],'programming_exp',d.title.unique()[2],'current_yr_compensation_avg'],\n                [d[d.title==d.title.unique()[3]],'programming_exp',d.title.unique()[3],'current_yr_compensation_avg'],\n                [d[d.title==d.title.unique()[4]],'programming_exp',d.title.unique()[4],'current_yr_compensation_avg'],\n                [d[d.title==d.title.unique()[5]],'programming_exp',d.title.unique()[5],'current_yr_compensation_avg'],\n                [d[d.title==d.title.unique()[7]],'programming_exp',d.title.unique()[7],'current_yr_compensation_avg'],\n                [d[d.title==d.title.unique()[8]],'programming_exp',d.title.unique()[8],'current_yr_compensation_avg'],\n                [d[d.title==d.title.unique()[9]],'programming_exp',d.title.unique()[9],'current_yr_compensation_avg'],\n                [d[d.title==d.title.unique()[10]],'programming_exp',d.title.unique()[10],'current_yr_compensation_avg'],\n                [d[d.title==d.title.unique()[11]],'programming_exp',d.title.unique()[11],'current_yr_compensation_avg'],\n                [d[d.title==d.title.unique()[12]],'programming_exp',d.title.unique()[12],'current_yr_compensation_avg'],\n                [d[d.title==d.title.unique()[13]],'programming_exp',d.title.unique()[13],'current_yr_compensation_avg'],\n                [d[d.title==d.title.unique()[14]],'programming_exp',d.title.unique()[14],'current_yr_compensation_avg'],\n                 ],\n            agr='mean',\n            title='How yearly compensation changes for women with title and programming exp.',\n            y_label='compensation (USD)',\n            x_label='Experience',\n            ax=[[ax1]],\n            fsize=(20,10),\n            ).plot_column()        ","eaf0a3fa":"fig1, ax1 = plt.subplots()\n\nplot_data(data=[[df_21[df_21.gender=='Man'],'language','Man','age'],\n                [df_21[df_21.gender=='Woman'],'language','Woman','age'],\n                 ],\nagr_list = ['jupyter', 'rstudio', 'vs', 'vscode','pycharm', 'spyder', 'notepad++', \n            'sublime_text', 'vim\/emacs','matlab_', 'jupyter_n'],\n            title='Most common IDE used on regular basis by different age groups (2021)',\n            x_label='count',\n            ax=[[ax1]],\n            fsize=(15,15),\n            ).plot_multi_column()                        \n\nfig1, ax1 = plt.subplots()\n\nplot_data(data=[[df_20[df_20.gender=='Man'],'language','Man','age'],\n                [df_20[df_20.gender=='Woman'],'language','Woman','age'],\n                 ],\n            agr_list = ['jupyter', 'rstudio', 'vs', 'vscode','pycharm', 'spyder', 'notepad++', \n                        'sublime_text', 'vim\/emacs','matlab_', 'jupyter_n'],\n            title='Most common IDE used on regular basis by different age groups (2020)',\n            x_label='count',\n            ax=[[ax1]],\n            fsize=(15,15),\n            ).plot_multi_column()                     ","ed96c46b":"fig1, ax1 = plt.subplots()\n\nplot_data(data=[[df_21[df_21.gender=='Man'],'language','Man','age'],\n                [df_21[df_21.gender=='Woman'],'language','Woman','age'],\n                 ],\nagr_list = ['kaggle', 'colab',\n       'azure', 'paperspace_gradient', 'binder_jupyterhub', 'code_ocean',\n       'ibm_watson_studio', 'sagemaker', 'emr', 'gcn', 'gcd',\n       'databricks', 'zeppelin', 'deepnote', 'observable'],\n            title='Most common notebook used on regular basis by different age groups (2021)',\n            x_label='count',\n            ax=[[ax1]],\n            fsize=(15,15),\n            ).plot_multi_column()                        \n\nfig1, ax1 = plt.subplots()\n\nplot_data(data=[[df_20[df_20.gender=='Man'],'language','Man','age'],\n                [df_20[df_20.gender=='Woman'],'language','Woman','age'],\n                 ],\n            agr_list = ['kaggle', 'colab',\n       'azure', 'paperspace_gradient', 'binder_jupyterhub', 'code_ocean',\n       'ibm_watson_studio', 'sagemaker', 'emr', 'gcn', 'gcd',\n       'databricks', 'zeppelin'],\n            title='Most common notebook used on regular basis by different age groups (2020)',\n            x_label='count',\n            ax=[[ax1]],\n            fsize=(15,15),\n            ).plot_multi_column()                     ","c4fed4d7":"fig1, ax1 = plt.subplots()\n\nplot_data(data=[[df_21[df_21.gender=='Man'],'language','Man','title'],\n                [df_21[df_21.gender=='Woman'],'language','Woman','title'],\n                 ],\nagr_list = ['iv_tools', 'image_segmentation', 'object_detection',\n       'image_classification', 'generative'],\n            title='Most common computer vision methods used on regular basis by different titles (2021)',\n            x_label='count',\n            ax=[[ax1]],\n            fsize=(15,15),\n            ).plot_multi_column()                        \n","1d41fd31":"fig1, ax1 = plt.subplots()\n\nplot_data(data=[[df_21[df_21.gender=='Man'],'language','Man','title'],\n                [df_21[df_21.gender=='Woman'],'language','Woman','title'],\n                 ],\nagr_list = ['analysis',\n       'data_infrastructure', 'prototypes', 'product_improvement',\n       'model_improvement', 'R&D'],\n            title='Most common organizational role for different titles (2021)',\n            x_label='count',\n            ax=[[ax1]],\n            fsize=(15,15),\n            ).plot_multi_column()                        \n","e614f0da":"fig1, ax1 = plt.subplots()\n\nplot_data(data=[[df_21[df_21.gender=='Man'],'language','Man','title'],\n                [df_21[df_21.gender=='Woman'],'language','Woman','title'],\n                 ],\nagr_list = ['aws',\n       'azure_', 'gcp', 'ibm_red_hat', 'oracle', 'sap', 'salesforce',\n       'vmware', 'alibaba', 'tencent'],\n            title='Most common cloud computing platforms used by different titles (2021)',\n            x_label='count',\n            ax=[[ax1]],\n            fsize=(15,15),\n            ).plot_multi_column()                        \n","e61ba31c":"<div style=\"font-family:Helvetica Neue; font-size:20px; line-height:1.7; color:slategray;\">\nIn both 2020 and 2021, while more men respondents in age group 25-29 were data scintist, most women respondents were students.\n<mark>While in 2020 for age groups above 30-34 years, most common title for women was either other or currently unemployed. In 2021 things have changed drastically. Most common title for women from 30-44 years is data scientist.<\/mark> \n<br>\nAlso, while for some age group research scientist is a common title for women, it is not for men. Seems, less men are interested in research in data science compared to women.\n<br>\nFinally, software engineer was also most popular title for men in age group 45-49 years in 2020, which is not the case for any age group for either men or women. It does support the fact that as level of automation is progressing, jobs like programming might not exist in the furure.\n    <\/div>","03c4b275":"<div style=\"font-family:Helvetica Neue; font-size:20px; line-height:1.7; color:slategray;\"> \nIn case of every age group jupyter is most popular IDE. But the second most popular in case of men in 2021 is visual studio code. In case of women it is rstdio from age groups 40 onwards and pycharm from 30-39 years. \n<br>\nEven in 2020 the situation seems to be pretty much same.\n    <\/div>","3c4886e3":"<div style=\"font-family:Helvetica Neue; font-size:20px; line-height:1.7; color:slategray;\"> \nRetail\/sales, online services, manufacturing\/fabrication, hospitality\/entertainment\/sports, government\/public service and energy\/mining  are the industries where women are more often earning more than men. \n    <\/div>","f782b8ed":"<h1> The Subgroup <\/h1>\n<div style=\"font-family:Helvetica Neue; font-size:20px; line-height:1.7; color:slategray;\">\nWe can see that like at many other organisations and professional communities the gender bias is quit visible in kaggle 2021 community and there can be many reasons behind that. But lets look at the data further in order to understand our community better and how it has has evolved. \n<br><br>\n<mark>Till now you would have guessed that this story is about the female kaggle community.<\/mark>\n    <\/div>","a6a0621b":"<div style=\"font-family:Helvetica Neue; font-size:20px; line-height:1.7; color:slategray;\">\nYearly compensation has increased for both men and women as machine and programming experience increases. \n<br>\n <mark>Compensation has increased more with machine learning experience in comparision to programming experience. For instance people with 3-4 years of machine learning experience were earning more than those with 3-5 years of programming experince.<\/mark>\n    <\/div>","f11df147":"<div style=\"font-family:Helvetica Neue; font-size:20px; line-height:1.7; color:slategray;\">\nThe above graph is between age groups and languages. It shows the list of four most popular languages in every age group from 2020 to 2021. This is based in count. For instance in the age group 25-29 for men, in 2020, python, sql, r and javascript were the top four languages used on regular basis. But in 2021 c++ replaced javascript. \n<br>\nApart from the similarities, there are some differences in how women have chosen there languages in 2021. For instance python, sql and r are used on regular basis by all. But most women respondents prefer java, c++, and matlab, where as men have prefered javascipt.\n<br>\nAlso, we can see how regular language preference has changed from 2020-2021. Matlab, which was popular among women respondents aged between 25-39 years in 2020, is less popular in 2021 (30-34 age group), replaced by either java or c++.\n    <\/div>","1d713d00":"<div style=\"font-family:Helvetica Neue; font-size:20px; line-height:1.7; color:slategray;\">\nAs we can see, the number of respondents and % increase from previous years, from many countries decreased from 2018 to 2021.\nEven though there was a global pendamic towards 2020, a drop from 2018-2019 is a surprise. Overall, numbers have recovered. But 2021 count is still not a substantial improvement and in some countries 2018 count is more than 2021.\n    <\/div>","34415fa1":"# Conclusion\n<div style=\"font-family:Helvetica Neue; font-size:20px; line-height:1.7; color:slategray;\"> \nKaggle survey includes questions related to most professional aspects, but still it is not sufficient to predict the changes in the future for women in data science and machine learning. A lot more analysis is possible. At the moment few things are clear:\n<ul>\n    <li>\n        Though there is a substantial bias against women, like in many other industries, there is a brighter side too. First, overall data science industry has more opportunities for women, when compared to the overall IT sector. In traditional jobs like a software engineer or business analyst the bias in terms of compensation is much higher when compared to jobs like a data scientist. There are not just more opportunities but also there is more growth for people with more experience.<\/li>\n     <li>\n         Data science is still an unknown domain where many corporations have just joined the market. Roles like data engineer, research scientist, statistician and other have been more fruitful for women than men. I feel the gender bias will only decrease in the comming future.\n        <\/li>\n    <\/ul>\n    <\/div>    ","2e46b9e9":"<div style=\"font-family:Helvetica Neue; font-size:20px; line-height:1.7; color:slategray;\"> \nColab notebook is the most popular in 2021 except for few age group as 35-39 years.\n<br>\nIn 2020 however, zeppelin\/zepl notebook was the most popular among both men and women, except for men below 39 years.\n    <\/div>","cde87f50":"<div style=\"font-family:Helvetica Neue; font-size:20px; line-height:1.7; color:slategray;\">\n As we can see programming experience for men and women repondents are more than machine learning. But overall men respondents have more work experience. \n    <\/div>","22bd6c8a":"<div style=\"font-family:Helvetica Neue; font-size:20px; line-height:1.7; color:slategray;\"> \nAs it can be seen yearly compensation had droped from 2019 to 2020. But from 2020 to 2021 the increase was only for those with 5 years or more of machine learning experience or 3 to 5 years of programming experience.    \n    <\\div>","1539e6bf":"# Kaggle 2021 community bias\n<div style=\"font-family:Helvetica Neue; font-size:20px; line-height:1.7; color:slategray;\">\nThis is the second analytics challenge I am participating on kaggle. The first one being <a href=\"https:\/\/www.kaggle.com\/djvivekj\/solving-complex-issues-with-simple-vizualizations\"> Solving complex issues with simple vizualizations<\/a>, which did not impress many. \n<br>\nAs per the competition, I have tried to come up with a story revolving around a subgroup within the kaggle community. I have  used data from previous surveys. As the questionnaire has changed frequently, I was able to use the previous data only for the most common questions. Using line and horizontal bar graph, I have reflected upon the change that has come over the previous years, within the community. Lets find out more about our community. \n    <\\div>\n","5cea6e2d":"<div style=\"font-family:Helvetica Neue; font-size:20px; line-height:1.7; color:slategray;\">\nIn most industries there is a similarity in common age groups for men and women. But in industries like non-profit\/crm, insurance\/risk-assesment more women respondents are from a higher age froup then men. Where as in industries like miltary, medical\/pharmaceutical, broadcasting\/communications more men respondents were from a higher age group. Again  miltary and broadcasting\/communications where women presence is less than men. It might be a case where age could be a reason behind discrimination.\n    <\/div>","5a534a3c":"<div style=\"font-family:Helvetica Neue; font-size:20px; line-height:1.7; color:slategray;\"> \nThe above graph shows how within the same industry, men and women can have different level of relevance for machine learning.\nFor instance in shipping\/transportation, while most men do not use machine learning methods, most women respondents have been exploring machine learning methods. Similarly, in online bussiness\/internet based sales while more men responded for well established ml methods, women have recently started using ml methods. In military\/security\/defence while men are still exploring for ml methods, women have already being using ml methods since last two years. In marketing\/crm men are using well established method, while women are not using ml methos.\n<br><br>\nOverall, in shipping\/transportation, military\/security\/defence and energy\/mining women are ahead in terms of level of machine learning methods. While men have used machine leaning methods in online bussiness\/internet, marketing\/crm, broadcasting\/communication and acounting\/finance with higher level of relevance. \n<br><br>\n<mark>This could be infered in many ways, but in sectors related to information and technology more men are using machine learning. While most women using machine learning algorithm are working in non IT sectors .<\/mark>\n    <\/div>","4e79fad6":"<div style=\"font-family:Helvetica Neue; font-size:20px; line-height:1.7; color:slategray;\"> \nWhile AWS overall seems to be more popular, women product managers, statisticians and research scientist prefer google cloud platform over AWS.    \n   <\/div>","b831c0d4":"<div style=\"font-family:Helvetica Neue; font-size:20px; line-height:1.7; color:slategray;\">\nAgain, there were more respondents aged between 23 to 35 years in 2018 than 2021. Respondents aged between 23 to 35 years were more in number in 2019 than 2020. Respondents aged 35 years and above have increased the most in year 2021, when compared to previous years. \nSimilarly, negative growth can be seen from 2018 to 2019 for respondents aged upto around 35 years. 2019 to 2020 saw negative or very less growth for respondents aged 23 to 55 years.\n    <\/div>","c5727644":"<div style=\"font-family:Helvetica Neue; font-size:20px; line-height:1.7; color:slategray;\">\nFemale respondents from 21 to 45 and 49 to 59 have spent more duration of time to complete the survey.\n    <\/div>","38ad95b8":"<div style=\"font-family:Helvetica Neue; font-size:20px; line-height:1.7; color:slategray;\">  \nFor women machine learning engineer, the most common role is to analyze an understand data, whereas for men it is to build prototypes.\nFor women data engineer common task include build and or run data infrastructure, whereas for men it is data analyses.    \n    <\/div>","4739f019":"<div style=\"font-family:Helvetica Neue; font-size:20px; line-height:1.7; color:slategray;\"> \nIn case of non professional education like Some college\/university study without earning a bachelor\u2019s degree and No formal education past high school women were earning more than men in 2021. \n<br>\nElse in case of every professional course, men respondents were earning more than women.\n<br>\n<mark>For men the compensation seem to increase from bachelor's, master's, doctoral to professional doctoral. But for women, for some reason it decreases and then remains same.<\/mark>\n    <\/div>","d847cf84":"<h1> A Look At The Data <\/h1>\n<div style=\"font-family:Helvetica Neue; font-size:20px; line-height:1.7; color:slategray;\">\nThe survey has 42 questions, some divided into parts. Information like age, country, education, experiences and title tells about how the community has evolved. Where as preferences like language , IDE and computing platform can tell how the overall industry has shaped over the years. I have used the class plot_data which has the following functions to plot, the details are explained in the code:\n    <br> <br>\n    plot_column_cat_multi: It can plot data using two dataframes eg. for men\/women or for year 2021\/2020. The columns to plot need to be categorical eg, age\/industry. The plot has be used to compare two different sets of data.\n    <br><br>\n    plot_column_cat: It can take only one dataframe with both categorical columns eg, age\/ml_relevance\n    <br><br>\n    plot_column: It can take any number of dataframe with one categorical columns and other numerical eg, age\/current_compensation_avg. It has been used to plot line graphs and compare data over previous years. Eg. how compensation has changed with experience over past years.\n    <br><br>\n    plot_multi_column: It can take two dataframe with list of preference columns, eg. list of languages used on regular basis and a categorical column eg. age.\n    <br><br>\n <mark>All the horizontal bar plots find and plot the most common values after grouping and aggregation. Eg. The most common age group based\n on count or the most popular languages used on regular basis.<\/mark>\n    <\/div>","887c060f":"<div style=\"font-family:Helvetica Neue; font-size:20px; line-height:1.7; color:slategray;\">\nThe decrease in number of male data analyst,data engineer, data scientist, research scientist and software engineer from 2019 to 2020 is much more significant than the female. From 2020 to 2021 increase in male data engineer, data scientist, research scientist was more than female. Where as female software engineer increase percentage was more than male during this time.\n    <\/div>","5f37f68a":"<div style=\"font-family:Helvetica Neue; font-size:20px; line-height:1.7; color:slategray;\"> \nThe above two graphs above support the earlier findings. Women statisticians, product managers and data learning engineers with work experience earn the most. \n    <\/div>","210e50b8":"<div style=\"font-family:Helvetica Neue; font-size:20px; line-height:1.7; color:slategray;\"> \nIn industries like shipping\/transportation, military\/security\/defence and energy\/mining where more women were using machine learning methods, have one of the lowest percentage of women population.  \n    <\/div>","c98840c2":"<div style=\"font-family:Helvetica Neue; font-size:20px; line-height:1.7; color:slategray;\">\nA look at the count based on gender tells how a drop in number of male respondents aged from around 23 to 35 years contributed to an overall drop in number of respondents from 2019 to 2020. Also, the decrease from 2018 to 2021 was more significant for number of male respondents aged around 23 to 35 years when compared to female. \nFinally, from 2020 to 2021 the increase percentage in case of male was much more than female.\n<mark>Overall, it seems that from 2018 to 2021, when the world was going through a phase of panic and uncertainity, kaggle male community was affected more in comparison to female community members.<\/mark> An insight, that could be of great help to corporate policy makers.\n    <\/div>","2ca573a6":"<div style=\"font-family:Helvetica Neue; font-size:20px; line-height:1.7; color:slategray;\"> \nI terms of title, the picture was a little different. Women statisticians, program\/project manager, data engineer, dba\/database engineer were mostly earning more than men in 2021. \n<br>\nWhereas, men software engineer, research scientist, product managers and business analyst were able to earn more than women.\n<br>    \n<mark>It can be said that data science jobs are more fruitful for women than men.<\/mark>\n    <\/div>","6a6861f6":"<div style=\"font-family:Helvetica Neue; font-size:20px; line-height:1.7; color:slategray;\">\nCountries with higher percentage of female respondents (India, U.S.A, U.K., Nigeria) have more respondents from computers\/technology than manufacturing\/fabrication. Whereas in countries with lower female percentage like Brazil, Japan and Russia, manufacturing\/fabrication has more respondents than computers\/technology. \n    <\/div>"}}