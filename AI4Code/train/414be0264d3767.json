{"cell_type":{"7ab54332":"code","d1a43419":"code","b474bcd2":"code","9dfa8e4c":"code","fb734d27":"code","424e34ef":"code","85de5cd5":"code","18f5d10b":"code","20520e47":"code","0918a11d":"code","ae9b7ea2":"code","c57cbe08":"code","f1f0d529":"code","19dbee4b":"code","30eaa3db":"code","3440a34e":"code","a2a8fd4e":"code","951cc74e":"code","addbe0b3":"code","8fffc31c":"code","101a62cd":"code","6836250a":"code","0e42838f":"markdown","dfd80426":"markdown","d415775f":"markdown","87b57ac7":"markdown","a7c8bb3e":"markdown","fff4bc6a":"markdown","f31ca3f9":"markdown","1b2db518":"markdown","b36f07ab":"markdown"},"source":{"7ab54332":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","d1a43419":"from keras.applications.xception import Xception\nfrom keras.models import Model\nfrom keras.layers import Dense\nfrom keras.layers import Flatten\nfrom keras.optimizers import SGD,Adam,Adadelta\nfrom keras.callbacks import History \nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.preprocessing.image import load_img\nfrom keras.preprocessing.image import img_to_array\nfrom keras.models import load_model\nfrom keras.models import model_from_json\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os","b474bcd2":"os.mkdir('dataset_dogs_vs_cats\/')","9dfa8e4c":"#Copy files\ncp -avr ..\/input\/train\/train\/ \/kaggle\/working\/dataset_dogs_vs_cats","fb734d27":"# organize dataset into a useful structure\nfrom os import makedirs\nfrom os import listdir\nfrom shutil import copyfile\nfrom random import seed\nfrom random import random\n# create directories\ndataset_home = '\/kaggle\/working\/dataset_dogs_vs_cats\/'\nsubdirs = ['train\/', 'test\/']\nfor subdir in subdirs:\n    # create label subdirectories\n    labeldirs = ['dogs\/', 'cats\/']\n    for labldir in labeldirs:\n        newdir = dataset_home + subdir + labldir\n        makedirs(newdir, exist_ok=True)","424e34ef":"os.listdir(\"\/kaggle\/working\/dataset_dogs_vs_cats\/\")","85de5cd5":"#rm -r '\/kaggle\/working\/dataset_dogs_vs_cats\/'\n\n# seed random number generator\nseed(1)\n# define ratio of pictures to use for validation\nval_ratio = 0.25\n# copy training dataset images into subdirectories\nsrc_directory = '\/kaggle\/working\/dataset_dogs_vs_cats\/'\nfor file in listdir(src_directory):\n    src = src_directory + file\n    if random() < val_ratio:\n        dst_dir = 'test\/'     \n    else:\n        dst_dir = 'train\/'\n        \n    if file.startswith('cat'):\n        dst = dataset_home + dst_dir + 'cats\/'  + file\n        copyfile(src, dst)\n    elif file.startswith('dog'):\n        dst = dataset_home + dst_dir + 'dogs\/'  + file\n        copyfile(src, dst)","18f5d10b":"#Define train and test path\ntrain_path = '\/kaggle\/working\/dataset_dogs_vs_cats\/train\/'\ntest_path  = '\/kaggle\/working\/dataset_dogs_vs_cats\/test\/'","20520e47":"# plot dog photos from the dogs vs cats dataset\nplt.figure(figsize=(18,10))\n# define location of dataset\nfolder = train_path+'dogs\/'\n# plot first few images\nfor i in range(9):\n    # define subplot\n    pyplot.subplot(330 + 1 + i)\n    # define filename\n    filename = random.choice(os.listdir(folder))\n    file = folder + filename\n    # load image pixels\n    image = imread(file)\n    # plot raw pixel data\n    pyplot.imshow(image)\n# show the figure\npyplot.show()","0918a11d":"# plot dog photos from the dogs vs cats dataset\nplt.figure(figsize=(18,10))\n# define location of dataset\nfolder = train_path+'cats\/'\n# plot first few images\nfor i in range(9):\n    # define subplot\n    pyplot.subplot(330 + 1 + i)\n    # define filename\n    filename = random.choice(os.listdir(folder))\n    file = folder + filename\n    # load image pixels\n    image = imread(file)\n    # plot raw pixel data\n    pyplot.imshow(image)\n# show the figure\npyplot.show()","ae9b7ea2":"# define cnn model\ndef Model_CNN_SGD_No_Regularization():\n    # load model\n    model = Xception(include_top=False,weights='imagenet', input_shape=(299, 299, 3))\n    # mark loaded layers as not trainable\n    for layer in model.layers:\n        layer.trainable = False\n    # add new classifier layers\n    flat1 = Flatten()(model.layers[-1].output)\n    class1 = Dense(128, activation='relu', kernel_initializer='he_uniform')(flat1)\n    output = Dense(1, activation='sigmoid')(class1)\n    # define new model\n    model = Model(inputs=model.inputs, outputs=output)\n    # compile model\n    opt = SGD(lr=0.001, momentum=0.9)\n    model.compile(optimizer=opt, loss='binary_crossentropy', metrics=['accuracy'])\n    return model","c57cbe08":"# define cnn model\ndef Model_CNN_ADAM_No_Regularization():\n    # load model\n    model = Xception(include_top=False,weights='imagenet', input_shape=(299, 299, 3))\n    # mark loaded layers as not trainable\n    for layer in model.layers:\n        layer.trainable = False\n    # add new classifier layers\n    flat1 = Flatten()(model.layers[-1].output)\n    class1 = Dense(128, activation='relu', kernel_initializer='he_uniform')(flat1)\n    output = Dense(1, activation='sigmoid')(class1)\n    # define new model\n    model = Model(inputs=model.inputs, outputs=output)\n    # compile model\n    opt = Adam(lr=0.001, decay=0.0)\n    model.compile(optimizer=opt, loss='binary_crossentropy', metrics=['accuracy'])\n    return model","f1f0d529":"# define cnn model\ndef Model_CNN_ADADELTA_No_Regularization():\n    # load model\n    model = Xception(include_top=False,weights='imagenet', input_shape=(299, 299, 3))\n    # mark loaded layers as not trainable\n    for layer in model.layers:\n        layer.trainable = False\n    # add new classifier layers\n    flat1 = Flatten()(model.layers[-1].output)\n    class1 = Dense(128, activation='relu', kernel_initializer='he_uniform')(flat1)\n    output = Dense(1, activation='sigmoid')(class1)\n    # define new model\n    model = Model(inputs=model.inputs, outputs=output)\n    # compile model\n    opt = Adadelta(lr=0.001, decay=0.0)\n    model.compile(optimizer=opt, loss='binary_crossentropy', metrics=['accuracy'])\n    return model","19dbee4b":"from keras.preprocessing.image import ImageDataGenerator, load_img\n\n\n#For this case, we'll use Data Augmentation\ntraining_datagen = ImageDataGenerator(rescale=1.\/255\n                                      #,validation_split=0.1\n                                      ,data_format='channels_last'\n        ,shear_range=0.2,\n        zoom_range=0.2,\n        horizontal_flip=True,\n        featurewise_center=True)\n\n\ntest_datagen = ImageDataGenerator(rescale=1.\/255\n                                   #,validation_split=0.1\n                                  ,data_format='channels_last')\n\n\ntraining_set = training_datagen.flow_from_directory(\n        directory=train_path,\n        target_size=(299, 299),\n        batch_size=64,\n        #classes=['Dog','Cat'],\n        subset = \"training\",\n        #save_to_dir = os.path.join(dataset_path,'train'),\n        class_mode='binary')\n\ntest_set = test_datagen.flow_from_directory(\n       directory=test_path,\n        target_size=(299, 299),\n        batch_size=64,\n        #classes=['Dog','Cat'],\n        #subset = \"validation\",\n        #save_to_dir = os.path.join(dataset_path,'test'),\n        class_mode='binary')","30eaa3db":"#Define Models\nModel_CNN_SGD_No_Regularization = Model_CNN_SGD_No_Regularization()\nModel_CNN_ADAM_No_Regularization = Model_CNN_ADAM_No_Regularization()\nModel_CNN_ADADELTA_No_Regularization = Model_CNN_ADADELTA_No_Regularization()","3440a34e":"history_1 = History()\nhistory_2 = History()\nhistory_3 = History()\nepochs = 10","a2a8fd4e":"Model_CNN_SGD_No_Regularization.fit_generator(training_set,steps_per_epoch=len(training_set),epochs=epochs,validation_data=test_set,validation_steps=len(test_set),callbacks=[history_1])","951cc74e":"Model_CNN_ADAM_No_Regularization.fit_generator(training_set,steps_per_epoch=len(training_set),epochs=epochs,validation_data=test_set,validation_steps=len(test_set),callbacks=[history_2])","addbe0b3":"Model_CNN_ADAM_No_Regularization.fit_generator(training_set,steps_per_epoch=len(training_set),epochs=epochs,validation_data=test_set,validation_steps=len(test_set),callbacks=[history_2])","8fffc31c":"df = pd.DataFrame()\ndf['class'] = [os.listdir(train_path)[j][:3] for j in range(len(train_path))]\ndf['filepath'] = [os.listdir(train_path)[j][:3] for j in range(len(train_path))]\n#Rename files\n","101a62cd":"def rename_image_files(path):\n\"\"\"This fucntion will be used to rename images from the train dataset\"\"\"\n    i=0\n    os.listdir(path)\n    for filename in os.listdir(train_path): \n        dst = filename[4:]+str(\"_\") + str(i) + \".jpg\"\n        src =path + filename \n        dst =path+ dst \n\n        # rename() function will \n        # rename all the files \n        os.rename(src, dst) \n        i += 1\n    return None","6836250a":"df","0e42838f":"### Let's train our models","dfd80426":"**Import Packages**","d415775f":"#### 3 - CNN Model - Optimizer:Adadelta Without Regularization","87b57ac7":"### Prepare the datasets to the Fit process","a7c8bb3e":"#### 2 - CNN Model - Optimizer:Adam Without Regularization","fff4bc6a":"#### 1 - CNN Model - Optimizer:SGD Without Regularization","f31ca3f9":"### Plot Some images","1b2db518":"### Create a CNN Model based on Transfer Learning from Xception model\n[https:\/\/keras.io\/applications\/#xception](https:\/\/keras.io\/applications\/#xception)","b36f07ab":"## Pre-Process Photos into Directories"}}