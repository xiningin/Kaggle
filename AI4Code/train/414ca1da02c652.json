{"cell_type":{"63fccd97":"code","7084dc6d":"code","5eb1ac98":"code","2fc0705a":"code","60f1819a":"code","d02fb4fc":"code","ff2d2f11":"code","db347577":"code","9a083b24":"code","3ede2a56":"code","bde5ed37":"code","875da8a0":"code","8e6fde2c":"code","ac760758":"code","b8396761":"code","a416755b":"code","7d4c0776":"code","dffb7351":"code","d32de343":"code","f659304f":"code","f12e9860":"code","0f0231c2":"code","7c3a984b":"code","54f7e265":"code","ca56237e":"code","b8119a94":"code","3b5b3f73":"markdown","193f0c32":"markdown","6d7f0c1a":"markdown","4c05f0e4":"markdown","6be266f7":"markdown","e9d70f08":"markdown","7758bd12":"markdown","33afb0f4":"markdown","0ee6a493":"markdown","34c77be3":"markdown","8dbf7e77":"markdown","430a00f2":"markdown","8f018ffc":"markdown"},"source":{"63fccd97":"import tensorflow as tf\n\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nfrom sklearn.model_selection import train_test_split\n\nimport unicodedata\nimport re\nimport numpy as np\nimport os\nimport io\nimport time\n\nimport warnings\nwarnings.filterwarnings('ignore')","7084dc6d":"file = open('..\/input\/simple-dialogs-for-chatbot\/dialogs.txt','r').read()","5eb1ac98":"qna_list = [f.split('\\t') for f in file.split('\\n')]\n\nquestions = [x[0] for x in qna_list]\nanswers = [x[1] for x in qna_list]","2fc0705a":"print(\"Question: \", questions[0])\nprint(\"Answer: \", answers[0])","60f1819a":"def unicode_to_ascii(s):\n    return ''.join(c for c in unicodedata.normalize('NFD', s)\n      if unicodedata.category(c) != 'Mn')\n\n\ndef preprocess_sentence(w):\n    w = unicode_to_ascii(w.lower().strip())\n\n    w = re.sub(r\"([?.!,\u00bf])\", r\" \\1 \", w)\n    w = re.sub(r'[\" \"]+', \" \", w)\n\n    w = re.sub(r\"[^a-zA-Z?.!,\u00bf]+\", \" \", w)\n    w = w.strip()\n\n    w = '<start> ' + w + ' <end>'\n    return w","d02fb4fc":"print(preprocess_sentence(questions[0]))\nprint(preprocess_sentence(answers[0]))\n\npre_questions = [preprocess_sentence(w) for w in questions]\npre_answers = [preprocess_sentence(w) for w in answers]","ff2d2f11":"def tokenize(lang):\n    lang_tokenizer = tf.keras.preprocessing.text.Tokenizer(\n      filters='')\n    lang_tokenizer.fit_on_texts(lang)\n\n    tensor = lang_tokenizer.texts_to_sequences(lang)\n\n    tensor = tf.keras.preprocessing.sequence.pad_sequences(tensor,\n                                                         padding='post')\n\n    return tensor, lang_tokenizer","db347577":"def load_dataset(data, num_examples=None):\n    # creating cleaned input, output pairs\n    if(num_examples != None):\n        targ_lang, inp_lang, = data[:num_examples]\n    else:\n        targ_lang, inp_lang, = data\n\n    input_tensor, inp_lang_tokenizer = tokenize(inp_lang)\n    target_tensor, targ_lang_tokenizer = tokenize(targ_lang)\n\n    return input_tensor, target_tensor, inp_lang_tokenizer, targ_lang_tokenizer","9a083b24":"num_examples = 30000\ndata = pre_answers, pre_questions\ninput_tensor, target_tensor, inp_lang, targ_lang = load_dataset(data, num_examples)\n\n# Calculate max_length of the target tensors\nmax_length_targ, max_length_inp = target_tensor.shape[1], input_tensor.shape[1]","3ede2a56":"# Creating training and validation sets using an 80-20 split\ninput_tensor_train, input_tensor_val, target_tensor_train, target_tensor_val = train_test_split(input_tensor, target_tensor, test_size=0.2)\n\n# Show length\nprint(len(input_tensor_train), len(target_tensor_train), len(input_tensor_val), len(target_tensor_val))","bde5ed37":"def convert(lang, tensor):\n    for t in tensor:\n        if t!=0:\n            print (\"%d ----> %s\" % (t, lang.index_word[t]))","875da8a0":"print (\"Input Language; index to word mapping\")\nconvert(inp_lang, input_tensor_train[0])\nprint ()\nprint (\"Target Language; index to word mapping\")\nconvert(targ_lang, target_tensor_train[0])","8e6fde2c":"BUFFER_SIZE = len(input_tensor_train)\nBATCH_SIZE = 64\nsteps_per_epoch = len(input_tensor_train)\/\/BATCH_SIZE\nembedding_dim = 256\nunits = 1024\nvocab_inp_size = len(inp_lang.word_index)+1\nvocab_tar_size = len(targ_lang.word_index)+1\n\ndataset = tf.data.Dataset.from_tensor_slices((input_tensor_train, target_tensor_train)).shuffle(BUFFER_SIZE)\ndataset = dataset.batch(BATCH_SIZE, drop_remainder=True)\n\nexample_input_batch, example_target_batch = next(iter(dataset))\nexample_input_batch.shape, example_target_batch.shape","ac760758":"class Encoder(tf.keras.Model):\n    def __init__(self, vocab_size, embedding_dim, enc_units, batch_sz):\n        super(Encoder, self).__init__()\n        self.batch_sz = batch_sz\n        self.enc_units = enc_units\n        self.embedding = tf.keras.layers.Embedding(vocab_size, embedding_dim)\n        self.gru = tf.keras.layers.GRU(self.enc_units,\n                                       return_sequences=True,\n                                       return_state=True,\n                                       recurrent_initializer='glorot_uniform')\n\n    def call(self, x, hidden):\n        x = self.embedding(x)\n        output, state = self.gru(x, initial_state = hidden)\n        return output, state\n\n    def initialize_hidden_state(self):\n        return tf.zeros((self.batch_sz, self.enc_units))","b8396761":"encoder = Encoder(vocab_inp_size, embedding_dim, units, BATCH_SIZE)\n\n# sample input\nsample_hidden = encoder.initialize_hidden_state()\nsample_output, sample_hidden = encoder(example_input_batch, sample_hidden)\nprint ('Encoder output shape: (batch size, sequence length, units) {}'.format(sample_output.shape))\nprint ('Encoder Hidden state shape: (batch size, units) {}'.format(sample_hidden.shape))","a416755b":"class BahdanauAttention(tf.keras.layers.Layer):\n    def __init__(self, units):\n        super(BahdanauAttention, self).__init__()\n        self.W1 = tf.keras.layers.Dense(units)\n        self.W2 = tf.keras.layers.Dense(units)\n        self.V = tf.keras.layers.Dense(1)\n\n    def call(self, query, values):\n        # query hidden state shape == (batch_size, hidden size)\n        # query_with_time_axis shape == (batch_size, 1, hidden size)\n        # values shape == (batch_size, max_len, hidden size)\n        # we are doing this to broadcast addition along the time axis to calculate the score\n        query_with_time_axis = tf.expand_dims(query, 1)\n\n        # score shape == (batch_size, max_length, 1)\n        # we get 1 at the last axis because we are applying score to self.V\n        # the shape of the tensor before applying self.V is (batch_size, max_length, units)\n        score = self.V(tf.nn.tanh(\n            self.W1(query_with_time_axis) + self.W2(values)))\n\n        # attention_weights shape == (batch_size, max_length, 1)\n        attention_weights = tf.nn.softmax(score, axis=1)\n\n        # context_vector shape after sum == (batch_size, hidden_size)\n        context_vector = attention_weights * values\n        context_vector = tf.reduce_sum(context_vector, axis=1)\n\n        return context_vector, attention_weights","7d4c0776":"attention_layer = BahdanauAttention(10)\nattention_result, attention_weights = attention_layer(sample_hidden, sample_output)\n\nprint(\"Attention result shape: (batch size, units) {}\".format(attention_result.shape))\nprint(\"Attention weights shape: (batch_size, sequence_length, 1) {}\".format(attention_weights.shape))","dffb7351":"class Decoder(tf.keras.Model):\n    def __init__(self, vocab_size, embedding_dim, dec_units, batch_sz):\n        super(Decoder, self).__init__()\n        self.batch_sz = batch_sz\n        self.dec_units = dec_units\n        self.embedding = tf.keras.layers.Embedding(vocab_size, embedding_dim)\n        self.gru = tf.keras.layers.GRU(self.dec_units,\n                                       return_sequences=True,\n                                       return_state=True,\n                                       recurrent_initializer='glorot_uniform')\n        self.fc = tf.keras.layers.Dense(vocab_size)\n\n        # used for attention\n        self.attention = BahdanauAttention(self.dec_units)\n\n    def call(self, x, hidden, enc_output):\n        # enc_output shape == (batch_size, max_length, hidden_size)\n        context_vector, attention_weights = self.attention(hidden, enc_output)\n\n        # x shape after passing through embedding == (batch_size, 1, embedding_dim)\n        x = self.embedding(x)\n\n        # x shape after concatenation == (batch_size, 1, embedding_dim + hidden_size)\n        x = tf.concat([tf.expand_dims(context_vector, 1), x], axis=-1)\n\n        # passing the concatenated vector to the GRU\n        output, state = self.gru(x)\n\n        # output shape == (batch_size * 1, hidden_size)\n        output = tf.reshape(output, (-1, output.shape[2]))\n\n        # output shape == (batch_size, vocab)\n        x = self.fc(output)\n\n        return x, state, attention_weights","d32de343":"decoder = Decoder(vocab_tar_size, embedding_dim, units, BATCH_SIZE)\n\nsample_decoder_output, _, _ = decoder(tf.random.uniform((BATCH_SIZE, 1)),\n                                      sample_hidden, sample_output)\n\nprint ('Decoder output shape: (batch_size, vocab size) {}'.format(sample_decoder_output.shape))","f659304f":"optimizer = tf.keras.optimizers.Adam()\nloss_object = tf.keras.losses.SparseCategoricalCrossentropy(\n    from_logits=True, reduction='none')\n\ndef loss_function(real, pred):\n    mask = tf.math.logical_not(tf.math.equal(real, 0))\n    loss_ = loss_object(real, pred)\n\n    mask = tf.cast(mask, dtype=loss_.dtype)\n    loss_ *= mask\n\n    return tf.reduce_mean(loss_)","f12e9860":"@tf.function\ndef train_step(inp, targ, enc_hidden):\n    loss = 0\n\n    with tf.GradientTape() as tape:\n        enc_output, enc_hidden = encoder(inp, enc_hidden)\n\n        dec_hidden = enc_hidden\n\n        dec_input = tf.expand_dims([targ_lang.word_index['<start>']] * BATCH_SIZE, 1)\n\n        # Teacher forcing - feeding the target as the next input\n        for t in range(1, targ.shape[1]):\n            # passing enc_output to the decoder\n            predictions, dec_hidden, _ = decoder(dec_input, dec_hidden, enc_output)\n\n            loss += loss_function(targ[:, t], predictions)\n\n            # using teacher forcing\n            dec_input = tf.expand_dims(targ[:, t], 1)\n\n    batch_loss = (loss \/ int(targ.shape[1]))\n\n    variables = encoder.trainable_variables + decoder.trainable_variables\n\n    gradients = tape.gradient(loss, variables)\n\n    optimizer.apply_gradients(zip(gradients, variables))\n\n    return batch_loss","0f0231c2":"EPOCHS = 40\n\nfor epoch in range(1, EPOCHS + 1):\n    enc_hidden = encoder.initialize_hidden_state()\n    total_loss = 0\n\n    for (batch, (inp, targ)) in enumerate(dataset.take(steps_per_epoch)):\n        batch_loss = train_step(inp, targ, enc_hidden)\n        total_loss += batch_loss\n\n    if(epoch % 4 == 0):\n        print('Epoch:{:3d} Loss:{:.4f}'.format(epoch,\n                                          total_loss \/ steps_per_epoch))","7c3a984b":"def remove_tags(sentence):\n    return sentence.split(\"<start>\")[-1].split(\"<end>\")[0]","54f7e265":"def evaluate(sentence):\n    sentence = preprocess_sentence(sentence)\n\n    inputs = [inp_lang.word_index[i] for i in sentence.split(' ')]\n    inputs = tf.keras.preprocessing.sequence.pad_sequences([inputs],\n                                                         maxlen=max_length_inp,\n                                                         padding='post')\n    inputs = tf.convert_to_tensor(inputs)\n\n    result = ''\n\n    hidden = [tf.zeros((1, units))]\n    enc_out, enc_hidden = encoder(inputs, hidden)\n\n    dec_hidden = enc_hidden\n    dec_input = tf.expand_dims([targ_lang.word_index['<start>']], 0)\n\n    for t in range(max_length_targ):\n        predictions, dec_hidden, attention_weights = decoder(dec_input,\n                                                             dec_hidden,\n                                                             enc_out)\n\n        # storing the attention weights to plot later on\n        attention_weights = tf.reshape(attention_weights, (-1, ))\n\n        predicted_id = tf.argmax(predictions[0]).numpy()\n\n        result += targ_lang.index_word[predicted_id] + ' '\n\n        if targ_lang.index_word[predicted_id] == '<end>':\n            return remove_tags(result), remove_tags(sentence)\n\n        # the predicted ID is fed back into the model\n        dec_input = tf.expand_dims([predicted_id], 0)\n\n    return remove_tags(result), remove_tags(sentence)","ca56237e":"def ask(sentence):\n    result, sentence = evaluate(sentence)\n\n    print('Question: %s' % (sentence))\n    print('Predicted answer: {}'.format(result))","b8119a94":"ask(questions[1])","3b5b3f73":"## Bahdanau Attention","193f0c32":"# Encoder\/Decoder with attention equations","6d7f0c1a":"# Tokenize","4c05f0e4":"# Create Tensorflow dataset","6be266f7":"# Evaluate","e9d70f08":"# Preprocess sentences","7758bd12":"# Prepare Data","33afb0f4":"![bender.png](attachment:bender.png)","0ee6a493":"## Encoder","34c77be3":"# Word to index","8dbf7e77":"# Training\n\n1. Pass the input through the encoder which return encoder output and the encoder hidden state.\n2. The encoder output, encoder hidden state and the decoder input (which is the start token) is passed to the decoder.\n3. The decoder returns the predictions and the decoder hidden state.\n4. The decoder hidden state is then passed back into the model and the predictions are used to calculate the loss.\n5. Use teacher forcing to decide the next input to the decoder.\n6. Teacher forcing is the technique where the target word is passed as the next input to the decoder.\n7. The final step is to calculate the gradients and apply it to the optimizer and backpropagate.","430a00f2":"# Answer question","8f018ffc":"## Decoder"}}