{"cell_type":{"1ef78b64":"code","a12b9d0c":"code","8ffd0edd":"code","9efbd01d":"code","375c36e9":"code","2dc52bac":"code","53bcd572":"code","91afb608":"code","b10365e7":"code","3b951384":"code","2e7d9db0":"code","e9bc3ffc":"code","981e8e8c":"code","67a5fd0c":"code","92cf877d":"code","8b5b10c0":"code","a423a7dc":"code","d3cc6304":"code","2959215a":"code","e98eddbc":"code","cff23028":"code","f75a2cf9":"code","4f23446d":"code","b210b839":"code","31200973":"code","8344fc0f":"code","1c65d0d2":"code","be4ca6c3":"code","5a517b45":"code","87fed6fc":"code","cbec9d5b":"code","a9c35f76":"code","44807d80":"code","f3beac97":"markdown","31abd477":"markdown","a169743c":"markdown","94834ed8":"markdown","c76f25a1":"markdown","db0c4a68":"markdown","1a5e42b6":"markdown","05950f87":"markdown","c9ac3d4b":"markdown","f8d9b126":"markdown","d35a4473":"markdown","40588e30":"markdown","91b58bd1":"markdown","caedb8d2":"markdown","56d43dd1":"markdown","36032a8f":"markdown","16e1bd44":"markdown","681d49fc":"markdown","03f7d2e8":"markdown","5f0537a6":"markdown","7ec6a124":"markdown","4142b8c6":"markdown","11044ba2":"markdown","94c03d28":"markdown","93f4fa38":"markdown","ad60a599":"markdown","2cc80dda":"markdown","c4da31b7":"markdown","dc87dac5":"markdown","3f072602":"markdown","2c314248":"markdown","5920458c":"markdown","5f2debe0":"markdown","a5175196":"markdown","30da0bf9":"markdown","c77807dc":"markdown","b5d0de4a":"markdown","fab174e7":"markdown","47c42895":"markdown"},"source":{"1ef78b64":"#Importing the libraries\nimport pandas as pd\nimport geopandas as gpd\nfrom plotly.subplots import make_subplots\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n# for making gif\n# from chart_studio.plotly import image as PlotlyImage\n# from PIL import Image as PILImage\n# import io\n# import chart_studio\nimport glob\nfrom PIL import Image","a12b9d0c":"# import the data\ndf = pd.read_csv('..\/input\/energy-consumption-and-generation-in-the-globe\/Primary-energy-consumption-from-fossilfuels-nuclear-renewables.csv')\ndf.head()\n","8ffd0edd":"cont = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\ncont = cont[['name','continent']]\n\ndf = df.merge(cont, how='left', left_on='Entity', right_on='name').drop(columns=['name'])","9efbd01d":"df.loc[pd.isna(df.continent),:].Entity.unique()","375c36e9":"df.loc[df.Entity=='North Macedonia','continent'] = 'Europe'\n\n# keep european countries\ndf = df[df['continent']=='Europe'].reset_index(drop=True)\n\n# rename the columns\ndf.rename(columns={\n    'Fossil fuels (% sub energy)': 'Fossil',\n    'Nuclear (% sub energy)': 'Nuclear',\n    'Renewables (% sub energy)': 'Renewables'},inplace=True)\n\ndf.head()","2dc52bac":"bins=max(df['Year'])-min(df['Year'])+1\ndf['Year'].hist(bins=bins, grid=False)","53bcd572":"fig = px.choropleth(df,\n    locations='Code',\n    color='Nuclear',\n    locationmode='ISO-3',\n    animation_frame=\"Year\",\n)\n\nfig.update_layout(\n    title=dict(\n        text='Primary energy consumption from Nuclear energy',\n        x=.5,\n        font_size=18,\n        ),\n\n    geo=dict(\n        bgcolor='#8ad6ff',\n        lakecolor='#8ad6ff',\n        projection_type='miller',\n        scope='europe'\n        ),\n    \n    width = 700,\n    height = 700,\n    coloraxis=dict(colorscale='Reds',cmin=df['Nuclear'].min(),cmax=df['Nuclear'].max())\n)\n\nfig.layout.updatemenus[0].buttons[0].args[1][\"frame\"][\"duration\"] = 100\nfig.show()","91afb608":"steps = list()    \nfor i in range(df['Year'].min(),df['Year'].max()+1):\n    step = dict(\n        method='restyle',\n        args=['visible', [False] * len(df['Year'].unique()) * 2],\n        label=' {}'.format(i)\n    )\n    steps.append(step)\n\n# create a dataframe for styling\nmap_ = pd.DataFrame({'Nuclear': [0.45,0.8,'YlOrRd'],\n                    'Fossil': [.95,.8,'Greys'],\n                    'Renewables': [0.45,0.3,'Greens'],\n                     })\n\n# create subplots\nite=0\nfor year in range(df['Year'].min(),df['Year'].max()+1):\n    fig = make_subplots(rows=2, cols=2, \n                        specs=[[{\"type\": \"choropleth\"}, {\"type\": \"choropleth\"}], \n                               [{\"type\": \"choropleth\"}, {\"type\": \"bar\"}]], \n                        subplot_titles=('Nuclear', 'Fossil', 'Renewables','Global Energy Consumption in Europe'))\n\n    layout = dict(\n        autosize = False,\n        width = 1000,\n        height = 1000,\n        plot_bgcolor='rgba(0,0,0,0.1)',\n        xaxis= {'title': 'Energy source','domain':[0.6, 0.95]},\n        yaxis= {'title': 'Share (%)', 'range': [0, 100],'domain':[0.15, 0.45]},\n\n        sliders=[dict(\n            active=ite,\n            steps=steps,\n            y=1.2,\n            )],\n        )\n\n    # plot the three maps\n    df2 = df[df['Year']==year].reset_index(drop=True)\n    r=0\n    z=0\n    for index, col in enumerate(map_):\n\n        geo_key = 'geo'+str(index+1)\n\n        fig.add_trace(go.Choropleth(\n                locations=df2['Code'],\n                z=df2[col].astype(float),\n                locationmode='ISO-3',\n                colorscale=map_[col][2],\n                autocolorscale=False,\n                marker_line_color='white',\n                geo=geo_key,\n                zmin=df[col].min(),\n                zmax=df[col].max(),\n\n                colorbar=dict(\n                    title = '% energy',\n                    thickness=10, \n                    x=map_[col][0], \n                    y=map_[col][1],\n                    len=0.35),\n                    ), \n\n                row=1+r, col=z+1)\n\n        z = z+1\n        if z==2:\n            r = r+1\n            z = z-2\n\n        layout[geo_key] = dict(\n                scope = 'europe',\n                projection_type='natural earth',\n                domain = dict( x = [], y = [] ),\n                lakecolor='#7cd6fc',\n                )\n\n\n    # position of maps\n    z = 0\n    COLS = 2\n    ROWS = 2\n    for y in reversed(range(ROWS)):\n        for x in range(COLS):\n            geo_key = 'geo'+str(z+1)\n            layout[geo_key]['domain']['x'] = [float(x)\/float(COLS), float(x+1)\/float(COLS)-.03]\n            layout[geo_key]['domain']['y'] = [float(y)\/float(ROWS), float(y+1)\/float(ROWS)]\n            z=z+1\n            if z > 2:\n                break\n\n\n    # bar plot\n    x1 = ['Nuclear', 'Fossil', 'Renewables']\n    y1 = [df2['Nuclear'].mean(), df2['Fossil'].mean(), df2['Renewables'].mean()]\n\n    fig.add_trace(go.Bar(\n            x=x1, \n            y=y1,\n            text=y1,\n            texttemplate = '%{text:.2s}%',\n            textposition='auto',\n            marker_color=['red','black','green'],\n            width=.8,\n            ), \n            row=2, col=2)\n\n\n    ite=ite+1\n\n\n    fig.add_annotation(\n        text='Source:\\\n<a href=\"https:\/\/ourworldindata.org\/energy\">\\\nOur World in Data<\/a>',    \n        xref=\"paper\", \n        yref=\"paper\",\n        font_color='black',\n        x=0, y=0, \n        showarrow=False)\n\n    fig.layout.annotations[0].update(y=0.97)\n    fig.layout.annotations[1].update(y=0.97)\n    fig.layout.annotations[2].update(y=0.48)\n    fig.layout.annotations[3].update(y=0.48)\n\n    fig.update_layout(layout)\n#     fig.write_image(\"images\/\"+str(year)+\".jpg\",scale=2)\n\nfig.show()","b10365e7":"# # filepaths\n# fp_in = \"images\/*.jpg\"\n# fp_out = \"results\/primary_consumption.gif\"\n\n# img, *imgs = [Image.open(f) for f in sorted(glob.glob(fp_in))]\n# img.save(fp=fp_out, format='GIF', append_images=imgs,\n#          save_all=True, duration=200, loop=0)","3b951384":"from sklearn.linear_model import LinearRegression\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nregr = LinearRegression(normalize=True)\n\nlist_=df['Entity'].unique()\ndff = pd.DataFrame(index=range(len(list_)),columns=[\"Entity\", \"R\/F\",'continent'])\n\nfor l in range(len(list_)):\n    df3=df[df['Entity']==list_[l]]\n\n    Y=['Nuclear','Fossil','Renewables']\n    X = df3[['Year']]\n\n    z = np.zeros(3)\n    for i in range(len(Y)):\n        y=df3[[Y[i]]]\n        regr.fit(X, y)\n        z[i]=regr.coef_\n\n\n    out2=-z[1]*(z[2]-z[0])\n    \n    dff.at[l,'Entity'] = list_[l]\n    dff.at[l,'R\/F'] = out2\n    dff.at[l,'continent'] = 'Europe'\n    \ndff['R\/F'] = pd.to_numeric(dff['R\/F'])","2e7d9db0":"df3=df[df['Entity']==dff['Entity'].iloc[dff['R\/F'].idxmax()]]\ndf3.plot.line(x='Year', y=['Nuclear','Fossil','Renewables'],\n              title=dff['Entity'].iloc[dff['R\/F'].idxmax()],\n              color=['r','k','g'])\nplt.show()","e9bc3ffc":"df3=df[df['Entity']==dff['Entity'].iloc[dff['R\/F'].idxmin()]]\ndf3.plot.line(x='Year', y=['Nuclear','Fossil','Renewables'],\n              title=dff['Entity'].iloc[dff['R\/F'].idxmin()],\n              color=['r','k','g'])\nplt.show()","981e8e8c":"ite=0\nsteps = list()    \nfor i in range(df['Year'].min(),df['Year'].max()+1):\n    step = dict(\n        method='restyle',\n        args=['visible', [False] * len(df['Year'].unique()) * 2],\n        label=' {}'.format(i)\n    )\n    steps.append(step)\n    \n    \nfor year in range(df['Year'].min(),df['Year'].max()+1):\n    fig = make_subplots(rows=2, cols=2, \n                            specs=[[{\"type\": \"bar\"}, {\"type\": \"bar\"}], \n                                   [{\"type\": \"treemap\", \"colspan\": 2}, None]], \n                            subplot_titles=('Iceland', 'France', \n                                            '% Shift from fossil energy to low-carbon sources'\n                                            ))\n\n    layout = dict(\n        autosize = False,\n        width = 1000,\n        height = 1000,\n        plot_bgcolor='rgba(0,0,0,0.1)',\n        showlegend=False,\n        xaxis= {'title': 'Energy source','domain':[0, 0.45]},\n        yaxis= {'title': 'Share (%)', 'range': [0, 100],'domain':[0.55, 1]},\n        xaxis2= {'title': 'Energy source','domain':[0.55, 1]},\n        yaxis2= {'title': 'Share (%)', 'range': [0, 100],'domain':[0.55, 1]},\n\n        sliders=[dict(\n            active=ite,\n            steps=steps,\n            y=1.2\n            )]\n        )\n\n    # first bar \"Iceland\"\n    df2 = df[df['Year']==year].reset_index(drop=True)\n    df3=df2[df2['Entity']=='Iceland']\n    x1 = ['Nuclear', 'Fossil', 'Renewables']\n    y1 = [df3['Nuclear'].mean(), df3['Fossil'].mean(), df3['Renewables'].mean()]\n    fig.add_trace(go.Bar(\n                x=x1, y=y1,\n                text=y1,\n                texttemplate = '%{text:.2s}%',\n                textposition='auto',\n                marker_color=['red','black','green'],\n                width=.8,\n            ), row=1, col=1)\n\n\n    # first bar \"France\"\n    df3=df2[df2['Entity']=='France']\n    x1 = ['Nuclear', 'Fossil', 'Renewables']\n    y1 = [df3['Nuclear'].mean(), df3['Fossil'].mean(), df3['Renewables'].mean()]\n    fig.add_trace(go.Bar(\n                x=x1, y=y1,\n                text=y1,\n                texttemplate = '%{text:.2s}%',\n                textposition='auto',\n                marker_color=['red','black','green'],\n                width=.8,\n            ), row=1, col=2)\n\n    fig.add_trace(go.Treemap(\n        labels=dff['Entity'].to_list(),\n        parents=dff['continent'].to_list(),\n        values=dff['R\/F'].abs().to_list(),\n        branchvalues='total',\n        marker=dict(\n            colors=dff['R\/F'].to_list(),\n            colorscale=[\"darkred\",'white', \"darkgreen\"],\n            cmid=0),\n        ), row=2, col=1)\n\n    fig.update_layout(layout)\n    ite=ite+1\n\n    fig.add_annotation(\n        text='Source:\\\n<a href=\"https:\/\/ourworldindata.org\/energy\">\\\nOur World in Data<\/a>',    \n        xref=\"paper\", \n        yref=\"paper\",\n        font_color='black',\n        x=0, y=-0.05, \n        showarrow=False)\n#     fig.write_image(\"images1\/\"+str(year)+\".jpg\")\nfig.show()","67a5fd0c":"# # filepaths\n# fp_in = \"images1\/*.jpg\"\n# fp_out = \"results\/compensation.gif\"\n\n# img, *imgs = [Image.open(f) for f in sorted(glob.glob(fp_in))]\n# img.save(fp=fp_out, format='GIF', append_images=imgs,\n#          save_all=True, duration=200, loop=0)","92cf877d":"# import data\ndf = pd.read_csv('..\/input\/energy-consumption-and-generation-in-the-globe\/global_power_plant_database_last.csv')\ndf.head()","8b5b10c0":"# keep only desired columns\ndf = df[['country_long','latitude','longitude','primary_fuel','estimated_generation_gwh_2017']]","a423a7dc":"cont = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\ncont = cont[['name','continent']]\n\ndf = df.merge(cont, how='left', left_on='country_long', right_on='name').drop(columns=['name'])","d3cc6304":"df.loc[pd.isna(df.continent),:].country_long.unique()","2959215a":"continent_map = {'Bosnia and Herzegovina':'Europe','Czech Republic':'Europe'}\nfor country_, continent_ in continent_map.items():\n    df.loc[df.country_long==country_, 'continent'] = continent_\n\n# keep european countries\ndf = df[df['continent']=='Europe'].reset_index(drop=True)","e98eddbc":"df.isna().sum()","cff23028":"# remove them\ndf=df.dropna()\ndf.head()","f75a2cf9":"# px.set_mapbox_access_token(open(\".mapbox_token\").read())\n\ncolor_discrete_map ={\n    'Hydro':'#425fff',\n    'Gas':'#f569ff',\n    'Wind':'#7cfcf4',\n    'Solar':'#fff94d',\n    'Oil':'#45010c',\n    'Waste':'#77ff52',\n    'Nuclear':'#ff3838',\n    'Coal':'#c9c8c5',\n    'Geothermal':'#ff8000',\n    'Other':'#82ffaa'\n    }\n\nfig = px.scatter_mapbox(df, \n                        lat=\"latitude\", \n                        lon=\"longitude\", \n                        color=\"primary_fuel\", \n                        size=\"estimated_generation_gwh_2017\",\n                        size_max=12, \n                        color_discrete_map = color_discrete_map)\n\n\nfig.update_layout(\n#     mapbox_style=\"dark\",\n    mapbox_style=\"carto-positron\",\n    showlegend=True,\n    \n    legend=dict(\n            x=.04,\n            y=.96,\n            title='Type',\n            title_font_color='white',\n            bgcolor='rgba(0,0,0,0)',\n            font_color='white',\n            ),\n    \n    mapbox=dict(\n        bearing=0,\n        center=go.layout.mapbox.Center(lat=52, lon=10),\n        zoom=3,\n            ),\n    \n    title=dict(\n    text='Location and types of power plant in Europe (2017)',\n    x=.5,\n    font_size=25,\n        ),\n    width=1000,\n    height=700,\n    )\n\n\nfig.add_annotation(\n    text='Source:\\\n<a href=\"https:\/\/datasets.wri.org\/dataset\/globalpowerplantdatabase\">\\\nWord Resources Institute<\/a>',\n    xref=\"paper\", \n    yref=\"paper\",\n    font_color='white',\n    x=0, y=0, \n    showarrow=False)\n\n# fig.write_image('results\/Location-types-of-power-plant-in-Europe-2017.jpg',scale=2)\nfig.show()","4f23446d":"df = pd.read_csv('..\/input\/energy-consumption-and-generation-in-the-globe\/share-energy-consum-by-source.csv')\ndf.head()","b210b839":"cont = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\ncont = cont[['name','continent']]\n\ndf = df.merge(cont, how='left', left_on='Entity', right_on='name').drop(columns=['name'])","31200973":"df.loc[pd.isna(df.continent),:].Entity.unique()","8344fc0f":"df.loc[df.Entity=='North Macedonia','continent'] = 'Europe'\n\n# keep european countries\ndf = df[df['continent']=='Europe'].reset_index(drop=True)\n\n# rename the columns\ndf.rename(columns={\n    'Oil (% sub energy)': 'Oil',\n    'Coal (% sub energy)': 'Coal',\n    'Solar (% sub energy)': 'Solar',\n    'Nuclear (% sub energy)': 'Nuclear',\n    'Hydro (% sub energy)': 'Hydro',\n    'Wind (% sub energy)': 'Wind',\n    'Gas (% sub energy)': 'Gas',\n    'Other renewables (% sub energy)': 'Other renewables',\n    }, inplace=True)\n\ndf.head()","1c65d0d2":"fuel_type=['Oil', 'Coal', 'Solar', 'Nuclear', 'Hydro', 'Wind', 'Gas']\n\ndf['Other renewables'] = 100 - df[fuel_type].sum(axis=1)\n\n# if the values of 'other renewables' is negative, correct them.\nindex_=df.index[df['Other renewables']<0]\nfor i in range(len(index_)):\n    df.at[index_[i],'Oil'] = df['Oil'].iloc[index_[i]]+df['Other renewables'].iloc[index_[i]]\n    df.at[index_[i],'Other renewables'] = 0","be4ca6c3":"# list of desired columns\ncolumns = ['Country','Year','fuel_type','fuel_type_val']\n\n# list of unique countries\nlist_=df['Entity'].unique()\n\n# list of energy sources\nfuel_type = ['Oil', 'Coal', 'Solar', 'Nuclear', 'Hydro', 'Wind', 'Gas', 'Other renewables']\n\n# list of year span\nyears=df['Year'].unique()\n\n# prealocate the number of rows of new datafram\nindex=len(df)*len(fuel_type)\n\n# create the dataframe\ndf_new=pd.DataFrame(index=range(index),columns=columns)\n\n# insert the values from the old df\nz=0\nfor i in range(len(df)):\n    for f in range(len(fuel_type)):\n        \n        df_new.at[z,'Country'] = df['Entity'].iloc[i]\n        df_new.at[z,'Year'] = df['Year'].iloc[i]\n        df_new.at[z,'fuel_type'] = fuel_type[f]\n        df_new.at[z,'fuel_type_val'] = df[fuel_type[f]].iloc[i]\n        z=z+1","5a517b45":"# filter only data for 2019\ndf_new=df_new[df_new['Year']==2019]\n\n# create a map of colorcodes for each energy source\ncolor_discrete_map ={\n    'Hydro':'#425fff',\n    'Gas':'#f569ff',\n    'Wind':'#7cfcf4',\n    'Solar':'#fff94d',\n    'Oil':'#45010c',\n    'Nuclear':'#ff3838',\n    'Coal':'#c9c8c5',\n    'Other renewables':'#82ffaa',\n    '(?)':'#b1bbc9',}","87fed6fc":"fig = px.treemap(\n    df_new, path=[px.Constant('Europe'),'Country', 'fuel_type'], \n    values='fuel_type_val',\n    color='fuel_type',\n    color_discrete_map = color_discrete_map,\n    )\n\nfig.update_layout(    \n    title=dict(\n    text='Share of energy consumption in Europe (2019)',\n    x=.5,\n    font_size=18,\n        ),\n    width=600,\n    height=800,\n    )\n\nfig.add_annotation(\n    text='Source:\\\n<a href=\"https:\/\/ourworldindata.org\/energy\">\\\nOur World in Data<\/a>',    \n    xref=\"paper\", \n    yref=\"paper\",\n    font_color='black',\n    x=0, y=-0.05, \n    showarrow=False)\n\n# fig.write_image('results\/energy_consumption_2019.jpg',scale=2)\nfig.show()","cbec9d5b":"# import the data\ndf = pd.read_csv('..\/input\/energy-consumption-and-generation-in-the-globe\/share-elec-produc-by-source.csv')\n\n# assign the continent to each country\ncont = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\ncont = cont[['name','continent']]\ndf = df.merge(cont, how='left', left_on='Entity', right_on='name').drop(columns=['name'])\ndf.loc[df.Entity=='North Macedonia','continent'] = 'Europe'\n\n# keep european countries\ndf = df[df['continent']=='Europe'].reset_index(drop=True)\n\n# keep the same countries which the data was available in the previous section\ndf = df[df['Entity'].isin(list_)]\n\n# rename the columns\ndf.rename(columns={'Oil (% electricity)': 'Oil',\n                   'Coal (% electricity)': 'Coal',\n                   'Solar (% electricity)': 'Solar',\n                   'Nuclear (% electricity)': 'Nuclear',\n                   'Hydro (% electricity)': 'Hydro',\n                   'Wind (% electricity)': 'Wind',\n                   'Gas (% electricity)': 'Gas',\n                   'Other renewables (% electricity)': 'Other renewables',\n                   },inplace=True)\n\n\n# normalize the share of energy production to 100%\nfuel_type=['Oil', 'Coal', 'Solar', 'Nuclear', 'Hydro', 'Wind', 'Gas']\ndf['Other renewables'] = 100 - df[fuel_type].sum(axis=1)\n\n\n# create a new dataframe\ncolumns = ['Country','Year','fuel_type','fuel_type_val']\nfuel_type = ['Oil', 'Coal', 'Solar', 'Nuclear', 'Hydro', 'Wind', 'Gas', 'Other renewables']\nyears=df['Year'].unique()\nindex=len(df)*len(fuel_type)\ndf_new=pd.DataFrame(index=range(index),columns=columns)\nz=0\nfor i in range(len(df)):\n    for f in range(len(fuel_type)):\n        \n        df_new.at[z,'Country'] = df['Entity'].iloc[i]\n        df_new.at[z,'Year'] = df['Year'].iloc[i]\n        df_new.at[z,'fuel_type'] = fuel_type[f]\n        df_new.at[z,'fuel_type_val'] = df[fuel_type[f]].iloc[i]\n        z=z+1","a9c35f76":"# filter only data for 2019\ndf_new=df_new[df_new['Year']==2019]\n\n# create a map of colorcodes for each energy source\ncolor_discrete_map ={\n    'Hydro':'#425fff',\n    'Gas':'#f569ff',\n    'Wind':'#7cfcf4',\n    'Solar':'#fff94d',\n    'Oil':'#45010c',\n    'Nuclear':'#ff3838',\n    'Coal':'#c9c8c5',\n    'Other renewables':'#82ffaa',\n    '(?)':'#b1bbc9',}","44807d80":"fig = px.treemap(df_new, path=[px.Constant('Europe'),'Country', 'fuel_type'], \n                 values='fuel_type_val',\n                 color='fuel_type',\n                 color_discrete_map = color_discrete_map,\n                 )\n\nfig.update_layout(    \n    title=dict(\n    text='Share of energy production in Europe (2019)',\n    x=.5,\n    font_size=18,\n        ),\n    width=600,\n    height=800,\n    )\n\n# fig.write_image('results\/energy_production_2019.jpg',scale=2)\nfig.show()","f3beac97":"Add the continent of each countries from geopandas:","31abd477":"#### Import, Clearn, Transform","a169743c":"Find the countries which had the highest relative shift from fossil energy to renewables and nuclear energy, respectively:","94834ed8":"Now let's create a new DataFrame adapted for *plotly.treemap*","c76f25a1":"Since I will focus only in Europe, there is one country need to be update. Then I will only keep the european countries:","db0c4a68":"Check missing values:","1a5e42b6":"In this project I was curious to know:\n1. How the energy systems is changing in each country since 1965 to present? \n2. To what degree our countries are making progress on reducing electricity generation from high-carbon sources?\n3. How are we compensating this reduction? **Renewables** or **Nuclear?**\n\n<br>\nThe dataset were download from **Our World in Data** and **Word Resources Institute** organizations. Data is publicly available and can be downloaded in below:<br>\nSources: \n\n- <a href=\"https:\/\/ourworldindata.org\/energy\">Our World in Data<\/a>\n- <a href=\"https:\/\/datasets.wri.org\/dataset\/globalpowerplantdatabase\">Word Resources Institute<\/a>\n","05950f87":"#### result_2 <a class=\"anchor\" id=\"uno-dos\"><\/a>","c9ac3d4b":"## Share of energy consumption\/production in each country <a class=\"anchor\" id=\"cuatro\"><\/a>\njump back to [contents](#cero)","f8d9b126":"#### visualization","d35a4473":"Now let's see how all the three energy sources look like by time:","40588e30":"#### result_compensation <a class=\"anchor\" id=\"dos-uno\"><\/a>","91b58bd1":"# Objective","caedb8d2":"#### result_1 <a class=\"anchor\" id=\"uno-uno\"><\/a>","56d43dd1":"After saving the images, let's make a git :)","36032a8f":"Now do exactly the same thing for the energy production data","16e1bd44":"Add the continent of each countries from geopandas:","681d49fc":"#### Visualization","03f7d2e8":"Since I will focus only in Europe, there is one country need to be update. Then I will only keep the european countries:","5f0537a6":"#### result_consumption <a class=\"anchor\" id=\"cuatro-uno\"><\/a>","7ec6a124":"#### result_production <a class=\"anchor\" id=\"cuatro-dos\"><\/a>","4142b8c6":"Here I was curious to know how our countries reacted to the need of reducing high-carbon energy sources like Oil and Gas; some countries find the nuclear energy as a solution, however some other countries chose to move towards green energy; let's have a look!<br><br>\nThe method I used to quantify the shift toward around source is:<br>\n\n-**fossil** x (**renewable** - **nuclear**)\n\n<br> \nwhere the bold states the slope of linear regression fit from 1965 to present.","11044ba2":"## Compensated by Renewables or Nuclear? <a class=\"anchor\" id=\"dos\"><\/a>\njump back to [contents](#cero)","94c03d28":"Check if there are still countries which the continent is not assigned yet:","93f4fa38":"I would like to the results for the last year which is **2019**.","ad60a599":"#### Import, Clearn, Transform","2cc80dda":"After saving the images, let's make a git :)","c4da31b7":"Since the columns is the % share of energy consumption, the sum of sources should be exactly 100%.<br>\nHowever, for some rows this is not the case (e.g. ~99.9%); below I will slightly modify the values for the *other renewables* columns to be the case.","dc87dac5":"#### Import, Clearn, Transform","3f072602":"Check if there are still countries which the continent is not assigned yet:","2c314248":"#### Import, Clearn, Transform","5920458c":"### Contents:<a class=\"anchor\" id=\"cero\"><\/a>\n1. [Primary energy consumption from Fossil Fuels, Nuclear, and Renewables](#uno)\n<br> Here I illustrated the % share of energy consumption from each source for each country, and the global shift of energy since 1965 to 2020.<br>\n    - [result_1](#uno-uno)<br>\n    - [result_2](#uno-dos)<br><br>\n\n2. [Compensated by Renewables or Nuclear?](#dos)\n<br> Which direction our countries took by reducing the Fossil base energy sources?\n    - [result_compensation](#dos-uno)<br><br>\n\n3. [The geolocation of all power plants in Europe](#tres)\n<br> Here you can fine the location of all power plants, and information on plant capacity, generation, ownership, and fuel type.\n    - [result_geolocations](#tres-uno)<br><br>\n    \n4. [Share of energy consumption\/production in each country](#cuatro)\n<br> Finally a treemap on the percentage of source for the consumption or production in 2019.\n    - [result_consumption](#cuatro-uno)<br>\n    - [result_production](#cuatro-dos)","5f2debe0":"#### visualization","a5175196":"Apparently for some countries the data was not available between 1965 to 1989:","30da0bf9":"Add the continent of each countries from geopandas:","c77807dc":"Check if there are still countries which the continent is not assigned yet:","b5d0de4a":"## Primary energy consumption from Fossil Fuels, Nuclear, and Renewables <a class=\"anchor\" id=\"uno\"><\/a>\njump back to [contents](#cero)","fab174e7":"#### result_geolocations <a class=\"anchor\" id=\"tres-uno\"><\/a>","47c42895":"## The geolocation of all power plants in Europe <a class=\"anchor\" id=\"tres\"><\/a>\njump back to [contents](#cero)"}}