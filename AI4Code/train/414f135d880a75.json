{"cell_type":{"a95cc9d1":"code","f5834401":"code","51c51b22":"code","d28e50d6":"code","22bcd2e3":"code","317e0863":"code","44881a0a":"code","a8f135f3":"code","d1a4bb1b":"code","b156d7c7":"code","ba89a943":"code","fc872482":"code","0ecd54c8":"code","62968470":"code","81491a9e":"code","74d68595":"code","ffd7e65d":"code","3ff7f719":"code","eb4eb8a9":"code","5aea70ed":"code","36d8b2df":"code","1e4a09aa":"code","fa9321bd":"code","d3960644":"code","6abf2064":"code","023c71c6":"code","14671703":"code","b90157bc":"code","b40fa15c":"code","71d17a61":"code","160db642":"code","92ba5274":"code","ddc4139a":"code","9ce95e1e":"code","9c38c854":"code","28e8aed7":"code","6a98b5cb":"code","1cfbb859":"code","7ed1733c":"code","32206fa6":"code","b0ff7c57":"code","4159cdb7":"code","45c26039":"code","c96bf963":"code","50290e26":"code","f87915e3":"code","c0a986cd":"code","b38f3a1f":"code","46d25115":"code","9f2290b1":"code","082f82c6":"code","47571adf":"code","b0ac7cbd":"code","43c8c1e0":"code","2402625a":"code","2bd55445":"code","3de0799f":"code","84bb119f":"code","ad841fb1":"code","b2695687":"code","e2254488":"code","1735c642":"code","ad56ea69":"code","39807289":"code","7f9988cb":"code","269fa37d":"code","ff876688":"code","8b9169b6":"code","a3ed4eb8":"code","78a9c36f":"code","9c395e6c":"code","8a1d346a":"code","4b3b689b":"code","30a77d8c":"code","a73c23f4":"code","d4151690":"code","ab29dc42":"markdown","e82ef4cc":"markdown","75b79af0":"markdown","dbfebfa6":"markdown","9b9c268c":"markdown","a747aacf":"markdown","7c034018":"markdown","f6845b3d":"markdown","4202546b":"markdown","30c21bed":"markdown","594fe900":"markdown","13ae67c4":"markdown","95384950":"markdown","de4ceb7f":"markdown","08565fc4":"markdown","e1842036":"markdown","de6b2945":"markdown","f3791d48":"markdown","e41528e2":"markdown","2e01f204":"markdown","89212a8f":"markdown","dc87cd69":"markdown","fe61c31d":"markdown","03338b9d":"markdown","de3a054c":"markdown","2be2a85b":"markdown","fd23eb7a":"markdown"},"source":{"a95cc9d1":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns  # data visualization\nimport matplotlib.pyplot as plt\n# read data\ndata=pd.read_csv(\"..\/input\/heart-disease-uci\/heart.csv\")\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=FutureWarning)","f5834401":"df=data.copy() # Let's copy to protect the data\ndf.head()","51c51b22":"df.info()  # recognize the data","d28e50d6":"df.isnull().sum()","22bcd2e3":"df.describe().T ","317e0863":"df.shape","44881a0a":"# deeper\n# How is the correlation idea?\ndf.corr()","a8f135f3":"# It looks better\nplt.figure(figsize=(12,8))\nsns.heatmap(df.corr(),annot=True)\nplt.title(\"Correlation between features\")","d1a4bb1b":"plt.figure(figsize=(10,7))\nsns.countplot(df['sex'],hue=df[\"target\"], palette = 'pastel')\nplt.title('Distribution of Target', fontsize = 15)\nplt.show()","b156d7c7":"with sns.axes_style('ticks'):   \n    g = sns.factorplot(\"sex\", data=df, hue=\"age\", aspect=3,\n                       kind=\"count\")\n    plt.title(\"Sex-Age\")","ba89a943":"with sns.axes_style('ticks'):   \n    g = sns.factorplot(\"age\", data=df, hue=\"target\", aspect=3,\n                       kind=\"count\")\n    plt.title(\"Target-Age\")","fc872482":"plt.figure(figsize=(12,8))\nsns.boxenplot(data['slope'], data['thalach'],hue=data[\"target\"], palette = 'pastel')\nplt.title('Relation of Sex and target', fontsize = 20, fontweight = 30)\nplt.show()","0ecd54c8":"with sns.axes_style('darkgrid'): \n    plt.figure(figsize=(12,6))\n    sns.swarmplot(x=\"cp\",y=\"thalach\",hue=\"target\",data=df,size=8,palette=\"bright\")\n    plt.xlabel(\"CP Values\")\n    plt.ylabel(\"THALACH Values\")\n    plt.title(\"THALACH-TARGET-CP RELATIONSHIP\")\n    plt.show();","62968470":"sns.relplot(x=\"age\",y=\"trestbps\",hue=\"target\",data=df)\nplt.title(\"Age-Trestbps-Target Relationship\")","81491a9e":"df[\"cp\"]=df[\"cp\"].astype(\"category\")\ndf[\"slope\"]=df[\"slope\"].astype(\"category\")\ndf[\"ca\"]=df[\"ca\"].astype(\"category\")\ndf[\"thal\"]=df[\"thal\"].astype(\"category\")","74d68595":"df=pd.get_dummies(data=df,columns=[\"ca\",\"cp\",\"slope\",\"thal\"])","ffd7e65d":"df.head()","3ff7f719":"df.shape","eb4eb8a9":"X=df.drop('target',axis=1)\ny=df['target']\n\nprint(\"Shape of y:\", y.shape)\nprint(\"Shape of data_x:\", X.shape)","5aea70ed":"from sklearn.preprocessing import StandardScaler\nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\nfrom sklearn.model_selection import train_test_split,GridSearchCV,cross_val_score\nfrom sklearn.metrics import confusion_matrix,accuracy_score,classification_report\nfrom sklearn.metrics import roc_auc_score,roc_curve\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier","36d8b2df":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.20,random_state=42)","1e4a09aa":"scaler=StandardScaler()\nX_train=scaler.fit_transform(X_train)\nX_test=scaler.fit_transform(X_test)","fa9321bd":"X_train","d3960644":"print(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","6abf2064":"log_model=LogisticRegression()","023c71c6":"params = {\"penalty\": ['l1', 'l2'], 'C': [0.001, 0.01, 0.1, 1, 10, 100, 1000]}\nlog_cv = GridSearchCV(log_model,param_grid=params,cv=5)","14671703":"log_cv.fit(X_train,y_train)\n","b90157bc":"log_cv.best_params_","b40fa15c":"log_tuned=LogisticRegression(C=0.1,penalty=\"l2\").fit(X_train,y_train)\nlog_pred=log_tuned.predict(X_test)\n","71d17a61":"log_test_score = accuracy_score(y_test, log_tuned.predict(X_test)) \nlog_train_score= accuracy_score(y_train, log_tuned.predict(X_train))\nlog_test_cross=cross_val_score(log_tuned,X_test,y_test,cv=5).mean()  \nlog_train_cross=cross_val_score(log_tuned,X_train,y_train,cv=5).mean() \nprint(\"Test score: %\",log_test_score)\nprint(\"Train score: %\",log_train_score)\nprint(\"Test cross_val_score:%\",log_test_cross*100)\nprint(\"Train cross_val_score: %\",log_train_cross*100)","160db642":"print(classification_report(y_test,log_pred))","92ba5274":"log_cm=confusion_matrix(y_test,log_pred)\nplt.figure(figsize = (10,7))\nsns.heatmap(log_cm, annot=True,annot_kws={\"size\": 16})","ddc4139a":"rf=RandomForestClassifier()\n\nrf_params={\"max_depth\":[2,5,8,10],\n          \"min_samples_leaf\":[1,3,10],\n          \"max_features\":[2,5,8],\n          \"n_estimators\": [30,50,100,300],\n          \"min_samples_split\":[2,5]}\n\nrf_cv=GridSearchCV(rf,rf_params,cv=10,n_jobs=-1,verbose=2).fit(X_train,y_train)","9ce95e1e":"rf_cv.best_params_","9c38c854":"rf_tuned=RandomForestClassifier(max_depth=2,max_features=2,min_samples_leaf=1,min_samples_split=2,n_estimators=100,random_state=42).fit(X_train,y_train)\n# rf_tuned=RandomForestClassifier(max_depth=8,max_features=2,min_samples_leaf=3,min_samples_split=5,n_estimators=50,random_state=42).fit(X_train,y_train)\nrf_pred=rf_tuned.predict(X_test)","28e8aed7":"rf_test_score = accuracy_score(y_test, rf_tuned.predict(X_test)) \nrf_train_score= accuracy_score(y_train, rf_tuned.predict(X_train))\nrf_test_cross=cross_val_score(rf_tuned,X_test,y_test,cv=10).mean()  \nrf_train_cross=cross_val_score(rf_tuned,X_train,y_train,cv=10).mean()  \nprint(\"Random Forest Test Score: %\",rf_test_score*100)\nprint(\"Random Forest Train Score: %\",rf_train_score*100)\nprint(\"Random Forest Test Cross Validation Score: %\",rf_test_cross*100)\nprint(\"Random Forest Train Cross Validation Score: %\",rf_train_cross*100)","6a98b5cb":"print(classification_report(y_test,rf_pred))","1cfbb859":"rf_cm=confusion_matrix(y_test,rf_pred)\nplt.figure(figsize = (10,7))\nsns.heatmap(rf_cm, annot=True,annot_kws={\"size\": 16})","7ed1733c":"knn_model=KNeighborsClassifier()\n\nknn_cv=GridSearchCV(estimator=KNeighborsClassifier(), param_grid={'n_neighbors': range(2,30)}, cv=5)\nknn_cv.fit(X_train,y_train)\nknn_cv.best_params_","32206fa6":"knn_tuned=KNeighborsClassifier(n_neighbors=19).fit(X_train,y_train)\nknn_pred=knn_tuned.predict(X_test)\n","b0ff7c57":"knn_test_score = accuracy_score(y_test, knn_tuned.predict(X_test)) \nknn_train_score= accuracy_score(y_train, knn_tuned.predict(X_train))\nknn_test_cross=cross_val_score(knn_tuned,X_test,y_test,cv=10).mean()  \nknn_train_cross=cross_val_score(knn_tuned,X_train,y_train,cv=10).mean()  \nprint(\"KNN Test Score: %\",knn_test_score*100)\nprint(\"KNN Train Score: %\",knn_train_score*100)\nprint(\"KNN Test Cross Validation Score: %\",knn_test_cross*100)\nprint(\"KNN Train Cross Validation Score: %\",knn_train_cross*100)","4159cdb7":"print(classification_report(y_test,knn_pred))","45c26039":"knn_cm=confusion_matrix(y_test,knn_pred)\nplt.figure(figsize = (10,7))\nsns.heatmap(knn_cm, annot=True,annot_kws={\"size\": 16})","c96bf963":"from sklearn.neural_network import MLPClassifier\nysa=MLPClassifier()\nparam_grid ={\n    'hidden_layer_sizes': [(50,50,50), (50,100,50), (100,),(100,100,100)],\n    'activation': ['tanh', 'relu','identity','logistic'],\n    'solver': ['sgd', 'adam','lbfgs'],\n    'alpha': [0.0001, 0.05,0.01,0.1,0.5],\n    \n}\nysa_cv=GridSearchCV(ysa,param_grid,cv=10,n_jobs=-1,verbose=2).fit(X_train,y_train)","50290e26":"ysa_cv.best_params_","f87915e3":"ysa_tuned=MLPClassifier(activation=\"relu\",alpha=0.5,hidden_layer_sizes=(50,50,50),solver=\"sgd\",random_state=42).fit(X_train,y_train)\nysa_pred=ysa_tuned.predict(X_test)","c0a986cd":"ysa_test_score = accuracy_score(y_test, ysa_tuned.predict(X_test)) \nysa_train_score= accuracy_score(y_train, ysa_tuned.predict(X_train))\nysa_test_cross=cross_val_score(ysa_tuned,X_test,y_test,cv=10).mean()  \nysa_train_cross=cross_val_score(ysa_tuned,X_train,y_train,cv=10).mean()  \nprint(\"Neural Network Forest Test Score: %\",ysa_test_score*100)\nprint(\"Neural Network Train Score: %\",ysa_train_score*100)\nprint(\"Neural Network Test Cross Validation Score: %\",ysa_test_cross*100)\nprint(\"Neural Network Train Cross Validation Score: %\",ysa_train_cross*100)","b38f3a1f":"print(classification_report(y_test,ysa_pred))","46d25115":"ysa_cm=confusion_matrix(y_test,ysa_pred)\nplt.figure(figsize = (10,7))\nsns.heatmap(ysa_cm, annot=True,annot_kws={\"size\": 16})","9f2290b1":"gbm_model=GradientBoostingClassifier(random_state=42)\n\ngbm_params={\n           \"n_estimators\":[100,150,200,250,300,400,500,600,700,800,900,100],\n            \"max_depth\":[2,3,4,5,6,7,8,9,10],\n           }\n\ngbm_cv=GridSearchCV(gbm_model,gbm_params,cv=10,n_jobs=-1,verbose=2)\ngbm_cv.fit(X_train,y_train)","082f82c6":"gbm_cv.best_params_","47571adf":"gbm_tuned=GradientBoostingClassifier(max_depth=2,n_estimators=100,random_state=0).fit(X_train,y_train)","b0ac7cbd":"gbm_test_score = accuracy_score(y_test, gbm_tuned.predict(X_test)) \ngbm_train_score= accuracy_score(y_train, gbm_tuned.predict(X_train))\ngbm_test_cross=cross_val_score(gbm_tuned,X_test,y_test,cv=10).mean()  \ngbm_train_cross=cross_val_score(gbm_tuned,X_train,y_train,cv=10).mean()  ","43c8c1e0":"print(\"Gradient Boosting Test Score: %\",gbm_test_score*100)\nprint(\"Gradient Boostingk Train Score: %\",gbm_train_score*100)\nprint(\"Gradient Boosting Test Cross Validation Score: %\",gbm_test_cross*100)\nprint(\"Gradient Boosting Train Cross Validation Score: %\",gbm_train_cross*100)","2402625a":"print(classification_report(y_test, gbm_tuned.predict(X_test)))","2bd55445":"gbm_cm=confusion_matrix(y_test, gbm_tuned.predict(X_test))\nplt.figure(figsize = (10,7))\nsns.heatmap(gbm_cm, annot=True,annot_kws={\"size\": 16})","3de0799f":"xgb=XGBClassifier()\n\nxgb_params={\"n_estimators\":[100,300,500,1000],\n           \"max_depth\":[5,6,7,8],\n           \"learning_rate\":[0.1,0.01,0.001,0.02,0.05],\n           \"min_samples_split\":[2,5]}\n\nxgb_cv=GridSearchCV(xgb,xgb_params,cv=10,n_jobs=-1,verbose=2)\nxgb_cv.fit(X_train,y_train)","84bb119f":"xgb_cv.best_params_","ad841fb1":"xgb_tuned=XGBClassifier(learning_rate=0.05,max_depth=8,min_samples_split=2,n_estimators=100).fit(X_train,y_train)","b2695687":"xgb_pred=xgb_tuned.predict(X_test)","e2254488":"xgb_test_score = accuracy_score(y_test, xgb_tuned.predict(X_test)) \nxgb_train_score= accuracy_score(y_train, xgb_tuned.predict(X_train))\nxgb_test_cross=cross_val_score(xgb_tuned,X_test,y_test,cv=10).mean()  \nxgb_train_cross=cross_val_score(xgb_tuned,X_train,y_train,cv=10).mean()  \nprint(\"XGradient Boosting Test Score: %\",xgb_test_score*100)\nprint(\"XGradient Boostingk Train Score: %\",xgb_train_score*100)\nprint(\"XGradient Boosting Test Cross Validation Score: %\",xgb_test_cross*100)\nprint(\"XGradient Boosting Train Cross Validation Score: %\",xgb_train_cross*100)","1735c642":"print(classification_report(y_test,xgb_tuned.predict(X_test)))","ad56ea69":"xgb_cm=confusion_matrix(y_test, xgb_tuned.predict(X_test))\nplt.figure(figsize = (10,7))\nsns.heatmap(xgb_cm, annot=True,annot_kws={\"size\": 16})","39807289":"lgbm=LGBMClassifier()\n\nlgbm_params={\"n_estimators\":[100,500,1000,2000],\n            \"subsample\":[0.6,0.8,1.0],\n            \"max_depth\":[3,4,5,6],\n            \"learning_rate\":[0.1,0.01,0.02,0.05],\n            \"min_child_samples\":[5,10,20]}\n\nlgbm_cv=GridSearchCV(lgbm,lgbm_params,cv=10,n_jobs=-1,verbose=2)\nlgbm_cv.fit(X_train,y_train)","7f9988cb":"lgbm_cv.best_params_","269fa37d":"lgbm_tuned=LGBMClassifier(learning_rate=0.01,max_depth=3,min_child_samples=20,n_estimators=500,subsample=0.6).fit(X_train,y_train)\n\n","ff876688":"lgbm_pred=lgbm_tuned.predict(X_test)","8b9169b6":"lgbm_test_score = accuracy_score(y_test, lgbm_tuned.predict(X_test)) \nlgbm_train_score= accuracy_score(y_train, lgbm_tuned.predict(X_train))\nlgbm_test_cross=cross_val_score(lgbm_tuned,X_test,y_test,cv=10).mean()  \nlgbm_train_cross=cross_val_score(lgbm_tuned,X_train,y_train,cv=10).mean() \nprint(\"Light Gradient Boosting Test Score: %\",lgbm_test_score*100)\nprint(\"Light Gradient Boosting Train Score: %\",lgbm_train_score*100)\nprint(\"Light Gradient Boosting Test Cross Validation Score: %\",lgbm_test_cross*100)\nprint(\"Light Gradient Boosting Train Cross Validation Score: %\",lgbm_train_cross*100)","a3ed4eb8":"print(classification_report(y_test,lgbm_pred))","78a9c36f":"lgbm_cm=confusion_matrix(y_test, lgbm_tuned.predict(X_test))\nplt.figure(figsize = (10,7))\nsns.heatmap(lgbm_cm, annot=True,annot_kws={\"size\": 16})","9c395e6c":"cat=CatBoostClassifier()\n\ncat_params={\"iterations\":[200,300,400,500],\n           \"learning_rate\":[0.01,0.05,0.1],\n           \"depth\":[3,5,8]}\n\ncat_cv=GridSearchCV(cat,cat_params,cv=10,n_jobs=-1,verbose=2)\ncat_cv.fit(X_train,y_train)","8a1d346a":"cat_cv.best_params_","4b3b689b":"cat_tuned=CatBoostClassifier(depth=3,iterations=200,learning_rate=0.01).fit(X_train,y_train)\ncat_pred=cat_tuned.predict(X_test)","30a77d8c":"cat_test_score = accuracy_score(y_test, cat_tuned.predict(X_test)) \ncat_train_score= accuracy_score(y_train, cat_tuned.predict(X_train))\ncat_test_cross=cross_val_score(cat_tuned,X_test,y_test,cv=10).mean()  \ncat_train_cross=cross_val_score(cat_tuned,X_train,y_train,cv=10).mean()  \nprint(\"CatBoost Test Score: %\",cat_test_score*100)\nprint(\"CatBoost Train Score: %\",cat_train_score*100)\nprint(\"CatBoost Test Cross Validation Score: %\",cat_test_cross*100)\nprint(\"CatBoost Train Cross Validation Score: %\",cat_train_cross*100)","a73c23f4":"models = pd.DataFrame({\n    'Model': ['Logistic Regression', 'k-Nearest Neighbors', \n        \n               'Random Forest',  'XGBClassifier', 'LGBMClassifier',\n              'GradientBoostingClassifier', 'Neural Network'],\n    \n    'Score_train': [log_train_score,knn_train_score,rf_train_score,xgb_train_score,lgbm_train_score,gbm_train_score,ysa_train_score],\n    'Score_test': [log_test_score,knn_test_score,rf_test_score,xgb_test_score,lgbm_test_score,gbm_test_score,ysa_test_score],\n                    \n    \"Cross_val_score_train\":[log_train_cross,knn_train_cross,rf_train_cross,xgb_train_cross,lgbm_train_cross,gbm_train_cross,ysa_train_cross],\n    \"Cross_val_score_test\": [log_test_cross,knn_test_cross,rf_test_cross,xgb_test_cross,lgbm_test_cross,gbm_test_cross,ysa_test_cross] })","d4151690":"models","ab29dc42":"## <span style=\"color:blue\">**CONTEXT**<\/span>\n\nThis database contains 76 attributes, but all published experiments refer to using a subset of 14 of them. In particular, the Cleveland database is the only one that has been used by ML researchers to\nthis date. The \"goal\" field refers to the presence of heart disease in the patient. It is integer valued from 0 (no presence) to 4.","e82ef4cc":" *An interesting a dataset. A liitle more, please*","75b79af0":" ### <span style=\"color:blue\">THE DATA AND EXAMINATION<\/span>","dbfebfa6":"## CONCLUSION","9b9c268c":"I don't like this, very complicated ","a747aacf":"# <center>LOAD BASIC LIBRARY AND DATASET<\/center>","7c034018":"### <span style=\"color:blue\">STANDARDIZATION<\/span>","f6845b3d":" ## <span style=\"color:green\">XGB CLASSIFIER<\/span>  ","4202546b":" ## <span style=\"color:green\"> CATBOOST CLASSIFIER<\/span>","30c21bed":"### <span style=\"color:blue\">**COLUMNS ( DATA FEATURES )**<\/span>\n**age: **       age in years\n\n**sex**:        (1 = male; 0 = female)\n\n**cp**:         chest pain type\n\n**trestbps**:   resting blood pressure (in mm Hg on admission to the hospital)\n\n**chol**:       serum cholestoral in mg\/dl\n\n**fbs**:        (fasting blood sugar > 120 mg\/dl) (1 = true; 0 = false)\n\n**restecg**:    resting electrocardiographic results\n\n**thalach**:    maximum heart rate achieved\n\n**exang**:      exercise induced angina (1 = yes; 0 = no)\n\n**oldpeak**:    ST depression induced by exercise relative to rest\n\n**slope**:      the slope of the peak exercise ST segment\n\n**ca**:         number of major vessels (0-3) colored by flourosopy\n\n**thal**:       3 = normal; 6 = fixed defect; 7 = reversable defect\n\n**target**:     1 or 0","594fe900":"![](https:\/\/darkdot.net\/tahlil-yapan-doktor)","13ae67c4":"# <center>MODELING<\/center>","95384950":"## <span style=\"color:blue\">**CONTENT**<\/span>\n1. age\n1. sex\n1. chest pain type (4 values)\n1. resting blood pressure\n1. serum cholestoral in mg\/dl\n1. fasting blood sugar > 120 mg\/dl\n1. resting electrocardiographic results (values 0,1,2)\n1. maximum heart rate achieved\n1. exercise induced angina\n1. oldpeak = ST depression induced by exercise relative to rest\n1. the slope of the peak exercise ST segment\n1. number of major vessels (0-3) colored by flourosopy\n1. thal: 3 = normal; 6 = fixed defect; 7 = reversable defect","de4ceb7f":" ## <span style=\"color:green\">GRADIENT BOOSTING CLASSIFIER<\/span> ","08565fc4":" ## <span style=\"color:green\">   LIGHT GBM Classifier<\/span>","e1842036":"# <center>INTRODUCTION<\/center>","de6b2945":" ## <span style=\"color:green\">ARTIFICIAL NEURAL NETWORK<\/span>","f3791d48":"## <span style=\"color:green\">LOGISTIC REGRESSION MODEL<\/span>","e41528e2":"## <span style=\"color:blue\">DATA VISUALIZATION<\/span>","2e01f204":"# <center>MODELS<\/center>","89212a8f":"  Let's check for our target variable \"target\"\n*   Relatively high correlation with \"cp\", \"thalach\" ,\"slope\"\n*   There is a different correlation with age and gender\n*   Come on, let's  start visualizing  \n  \n\n","dc87cd69":"### <span style=\"color:green\">ALL RESULTS<\/span>","fe61c31d":"<center>![303-1000x1000.jpg](attachment:303-1000x1000.jpg)<\/center>","03338b9d":"## <span style=\"color:green\">RANDOM FOREST CLASSIFIER MODEL<\/span>","de3a054c":"Nicee job, no null values.\n> Is it statistics?\n> Okey let's look\n","2be2a85b":" ## <span style=\"color:green\">K-NEIGBORS CLASSIFIERS<\/span>","fd23eb7a":"### Which model do you think is the best?\n### Thank you for coming here \n\nThere is a lot more to learn: D"}}