{"cell_type":{"376e82b3":"code","4c6da569":"code","b7880678":"code","e6498d7f":"code","5e3dba0e":"code","78f60a86":"code","92461fff":"code","746534ce":"code","531028bb":"code","2c4592db":"code","28b73887":"code","8e7d4ea3":"code","9156bf61":"code","23ebf6dd":"code","7d472b75":"code","4895a7d4":"code","10520606":"code","6ac04826":"code","7fee90a3":"markdown","97041ee4":"markdown","9acc4bcc":"markdown","9e3be8f7":"markdown"},"source":{"376e82b3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\nprint('strat kar le ab')\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4c6da569":"import keras\nfrom tqdm import tqdm\nimport tensorflow as tf\n# from IPython.display import Image, display\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Flatten, GlobalAveragePooling2D, Conv2D, Dropout,MaxPooling2D\n# from tensorflow.keras.preprocessing.image import load_img, img_to_array\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom keras.wrappers.scikit_learn import KerasClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom time import time\nimport os\nfrom PIL import Image\nprint(os.listdir(\"..\/input\"))\n","b7880678":"import matplotlib.pyplot as plt\nDATADIR=\"..\/input\/waste-classification-data\/DATASET\/TRAIN\"\nDATADIR1=\"..\/input\/waste-classification-data\/DATASET\/TEST\"\n\nCATEGORIES=['O','R']\n# for cats in CATEGORIES:\n#     path= os.path.join(DATADIR,cats)\n#     for img in os.listdir(path):\n#         imge=Image.open(os.path.join(path,img))\n#         imge=imge.resize((150,150))\n        \n#         img_array= np.array(imge)\n#         print(img_array.shape)\n#         plt.imshow(img_array)\n#         plt.show()\n#         break\n      \n   ","e6498d7f":"test=[]\ntrain = []\nimage_size=128\n\ndef create_data(DIR,arr):\n    i=0\n    for category in CATEGORIES: \n\n        path = os.path.join(DIR,category) \n        class_num = np.array([CATEGORIES.index(category)]  )\n        print(class_num)\n        \n        print(i)\n        for img in tqdm(os.listdir(path)):  \n            try:\n                imge=Image.open(os.path.join(path,img))\n                imge=imge.resize((image_size,image_size))\n                img_array= np.array(imge)\n                i=+1\n                \n                if img_array.shape==(image_size,image_size,3):\n                    arr.append([img_array, class_num])\n                    \n            except Exception as e:\n                print(e)","5e3dba0e":"training=create_data(DATADIR,train)\ntesting=create_data(DATADIR1,test)","78f60a86":"# print(train.shape)\nimport random\nrandom.shuffle(train)\nrandom.shuffle(test)","92461fff":"type(train[2])\nf,t = train[0]\n# print(\"f\",f,\"t\",t)\nprint(f[0])","746534ce":"# x_train=np.array([])\n# y_train=np.array([])\n# x_test=np.array([])\n# y_test=np.array([])\n# for feature,label in train:\n#     x_train=np.append(x_train,feature)\n#     y_train=np.append(y_train,label)\n# y_train = keras.utils.to_categorical(y_train, 2)\n\n# for feature,label in test:\n#     x_test=np.append(x_test,feature)\n#     y_test=np.append(y_test,label)\n# y_test = keras.utils.to_categorical(y_test, 2)\nx_train=[]\ny_train=[]\nx_test=[]\ny_test=[]\nfor feature,label in train:\n    x_train.append(feature)\n    y_train.append(label)\n    \n\ny_train = keras.utils.to_categorical(y_train, 2)\n\nfor feature,label in test:\n    x_test.append(feature)\n    y_test.append(label)\n    \ny_test = keras.utils.to_categorical(y_test, 2)","531028bb":"x_train=np.array(x_train)\nx_test=np.array(x_test)\n\nx_test=x_test\/255\nx_train=x_train\/255\nprint(x_train)\ny_train","2c4592db":"import pickle\n\n# pickle_out = open(\"x_train.pickle\",\"wb\")\n# pickle.dump(x_train, pickle_out)\n# pickle_out.close()\n\n# pickle_out = open(\"y_train.pickle\",\"wb\")\n# pickle.dump(y_train, pickle_out)\n# pickle_out.close()\n\n# pickle_out = open(\"x_test.pickle\",\"wb\")\n# pickle.dump(x_test, pickle_out)\n# pickle_out.close()\n\n# pickle_out = open(\"y_test.pickle\",\"wb\")\n# pickle.dump(y_test, pickle_out)\n# pickle_out.close()","28b73887":"x_test=0","8e7d4ea3":"print(x_test)","9156bf61":"pickle_in = open(\"x_test.pickle\",\"rb\")\nx_test = pickle.load(pickle_in)\n","23ebf6dd":"print(x_test)","7d472b75":"model=Sequential()\nmodel.add(Conv2D(40,kernel_size=(3,3),strides=(2,2),activation='relu', input_shape=(150,150,3)))\nmodel.add(Conv2D(100,kernel_size=(4,4),activation='relu'))\n\nmodel.add(Conv2D(80, kernel_size=(3,3),activation='relu'))\nmodel.add(Flatten())\nmodel.add(Dropout(0.25))\nmodel.add(Dense(80,activation='relu'))\nmodel.add(Dropout(.2))\nmodel.add(Dense(2,activation='softmax'))\nmodel.compile(loss='categorical_crossentropy',\n              optimizer='adagrad',\n              metrics=['accuracy'])\n","4895a7d4":"# model=Sequential()\n# model.add(Conv2D(filters=40,kernel_size=(3,3),padding=\"Same\",activation=\"relu\",input_shape=(100,100,3)))\n# model.add(MaxPooling2D(pool_size=(2,2)))\n# model.add(Dropout(0.25))\n\n# model.add(Conv2D(filters=60,kernel_size=(3,3),padding=\"Same\",activation=\"relu\"))\n# model.add(MaxPooling2D(pool_size=(2,2),strides=(2,2)))\n# model.add(Dropout(0.25))\n\n# model.add(Conv2D(filters=100,kernel_size=(3,),padding=\"Same\",activation=\"relu\"))\n# model.add(MaxPooling2D(pool_size=(2,2),strides=(2,2)))\n# model.add(Dropout(0.25))\n# model.add(Flatten())\n# model.add(Dense(120,activation=\"relu\"))\n# model.add(Dropout(0.5))\n# model.add(Dense(2,activation='softmax'))\n# model.compile(loss='categorical_crossentropy',\n#               optimizer='adagrad',\n#               metrics=['accuracy'])","10520606":"model.fit(x_train,y_train,batch_size=178, epochs=50,steps_per_epoch=100, validation_split=0.2)","6ac04826":"k=np.array([])\nz=np.array([])\n\nfor i in range(3):\n    z=np.append(k,i)\n    print(z)\ntype(k)","7fee90a3":"# LOADING,CONVERTING AND SHUFFLING\n","97041ee4":"https:\/\/stackoverflow.com\/questions\/35525028\/how-to-transform-a-3d-arrays-into-a-dataframe-in-python\nhttps:\/\/machinelearningmastery.com\/how-to-load-large-datasets-from-directories-for-deep-learning-with-keras\/\nhttps:\/\/machinelearningmastery.com\/grid-search-hyperparameters-deep-learning-models-python-keras\/","9acc4bcc":"CREATING FEATURES AND LABEL\n","9e3be8f7":"trying to convert list to array"}}