{"cell_type":{"82104206":"code","933b8ed3":"code","91180194":"code","9f09db24":"code","a97e4a33":"code","6f434be5":"code","c6880b97":"code","405ba5da":"code","1a977c15":"code","90afd51d":"code","21abf5e3":"code","8d3941cf":"code","fe9477d7":"code","bf340073":"markdown"},"source":{"82104206":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n\n# Any results you write to the current directory are saved as output.","933b8ed3":"df = pd.read_csv('\/kaggle\/input\/CORD-19-research-challenge\/2020-03-13\/all_sources_metadata_2020-03-13.csv')","91180194":"len(df)","9f09db24":"all_words = []\nfor i in range(len(df)):\n    all_text = str(str(df.iloc[i].title) + ' '+str(df.iloc[i].abstract)).split()\n    all_words.append(all_text)","a97e4a33":"def find_word(find_words):\n    priority = []\n    for ii,i in enumerate(all_words):\n        if True in np.in1d(i, find_words):\n            priority.append(ii)\n    return priority","6f434be5":"relevant = find_word(['farmers'])\nfor i in range(0, len(relevant)):\n    print(i, df.iloc[i].title)\n    print ()","c6880b97":"df = df.astype({\"abstract\": str})\n\n#for i in range(0, len(relevant)):\n#    if df.iloc[i].abstract != 'nan':\n        #print(i, \"TITLE: \", df.iloc[i].title);\n        #print(\"ABSTRACT: \", df.iloc[i].abstract);\n        #print()\n","405ba5da":"word = ['SARS-CoV-2']\nrelevant = find_word(word)\nfor i in range(0, len(relevant)):\n    print(i, df.iloc[i].title)\n    print ()","1a977c15":"#for i in range(0, len(relevant)):\n#    if df.iloc[i].abstract != 'nan':\n#        print(i, \"TITLE: \", df.iloc[i].title)\n#        print(\"ABSTRACT: \", df.iloc[i].abstract)\n#        print()","90afd51d":"# Take information about (ACE2) gene in human","21abf5e3":"#PATH = \".\/\/kaggle\/input\/disgenet-gene-disease\/curated_gene_disease_associations.tsv\/\"\nfilename = \"\/kaggle\/input\/disgenet-gene-disease\/curated_gene_disease_associations.tsv\"\ndf = pd.read_csv(filename, sep = '\\t')\ndf.head()\n\ntarget = df.loc[df['geneSymbol'] == 'ACE2']\ntarget","8d3941cf":"biogrid=pd.read_csv('\/kaggle\/input\/new-biogrid\/BIOGRID-ALL-3.5.182.tab2.txt', sep='\\t')\n\n\ngenesymbol = ['ACE2']\n#select only human genes\nbiogrid=biogrid.loc[(biogrid['Organism Interactor A']==9606) & (biogrid['Organism Interactor B']==9606)]\n# look for the genes which interacts with at least one seed genes\nbio = biogrid.loc[(biogrid['Official Symbol Interactor A'].isin(genesymbol)) | (biogrid['Official Symbol Interactor B'].isin(genesymbol))]\nbio","fe9477d7":"#save a list of all the symbols in order to search their uniprot\nsyms=[]\nsyms.extend(bio['Official Symbol Interactor A'])\nsyms.extend(bio['Official Symbol Interactor B'])\n#remove duplicates\nsym_to_fix=list(set(syms))\n\n# using join() \n# avoiding printing last comma \nprint(\"The formatted output is : \") \nfor gene in sym_to_fix:\n    print(gene)\n##print in order to search on ENRICHR","bf340073":"I was inspired by https:\/\/www.kaggle.com\/kamalch\/screening-for-most-relevant-articles and used it in a different way. I have highlight the must relevant papers with title and abstract"}}