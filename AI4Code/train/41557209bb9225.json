{"cell_type":{"39e162c3":"code","e8f5f525":"code","a2681aa7":"code","abf29edc":"code","fb71fc9e":"code","0b7c659c":"code","e6aa5719":"code","95e10527":"code","5349c7a2":"code","10d5efdb":"code","b859b3f2":"code","2c4684e6":"code","6dd31f3a":"code","6753ac36":"code","929cc223":"code","81d8c2e6":"code","bff17bae":"code","db041bb8":"code","cb0eecb1":"code","979aefb6":"code","d514d2c3":"code","3260388b":"code","15640238":"code","b69b163a":"code","41f7fc44":"code","ea8b0ced":"code","6e5cff98":"code","d06f51fb":"code","2c0551ee":"code","3ce5d1ca":"code","a453e5d9":"code","7d88356a":"code","3145860b":"code","44462733":"code","a721e02f":"code","1b9ca9a5":"code","2de4943e":"code","4e21ebf3":"code","b7e906cb":"code","109825ad":"markdown","0894e077":"markdown","8e89ea05":"markdown","a2c18b2d":"markdown","f25572e5":"markdown","3cebb118":"markdown","d5f44a9e":"markdown"},"source":{"39e162c3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e8f5f525":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\n%matplotlib inline\nwarnings.filterwarnings('ignore')","a2681aa7":"df = pd.read_csv('..\/input\/black-friday\/train.csv')","abf29edc":"df.head()","fb71fc9e":"df.describe()","0b7c659c":"df.info()","e6aa5719":"df.apply(lambda x: len(x.unique()))","95e10527":"plt.style.use('fivethirtyeight')\nplt.figure(figsize=(13, 7))\nsns.distplot(df['Purchase'], bins=25 , color ='lightblue')","5349c7a2":"sns.countplot(df['Gender'], palette ='Set3')","10d5efdb":"sns.countplot(df['Age'] , palette ='Set3')","b859b3f2":"sns.countplot(df['Marital_Status'],palette ='Set3')","2c4684e6":"sns.countplot(df['Occupation'],palette ='Set3')","6dd31f3a":"sns.countplot(df['Product_Category_1'],palette ='Set3')","6753ac36":"sns.countplot(df['Product_Category_2'],palette ='Set3')","929cc223":"sns.countplot(df['Product_Category_3'],palette ='Set3')","81d8c2e6":"sns.countplot(df['City_Category'],palette ='Set3')","bff17bae":"sns.countplot(df['Stay_In_Current_City_Years'],palette ='Set3')","db041bb8":"occupation_plot = df.pivot_table(index='Occupation', values='Purchase', aggfunc=np.mean)\noccupation_plot.plot(kind='bar', figsize=(13, 7))\nplt.xlabel('Occupation')\nplt.ylabel(\"Purchase\")\nplt.title(\"Occupation and Purchase Analysis\")\nplt.xticks(rotation=0)\nplt.show()","cb0eecb1":"age_plot = df.pivot_table(index='Age', values='Purchase', aggfunc=np.mean)\nage_plot.plot(kind='bar', figsize=(13, 7))\nplt.xlabel('Age')\nplt.ylabel(\"Purchase\")\nplt.title(\"Age and Purchase Analysis\")\nplt.xticks(rotation=0)\nplt.show()","979aefb6":"gender_plot = df.pivot_table(index='Gender', values='Purchase', aggfunc=np.mean)\ngender_plot.plot(kind='bar', figsize=(13, 7))\nplt.xlabel('Gender')\nplt.ylabel(\"Purchase\")\nplt.title(\"Gender and Purchase Analysis\")\nplt.xticks(rotation=0)\nplt.show()","d514d2c3":"df.isnull().sum()","3260388b":"df['Product_Category_2'] = df['Product_Category_2'].fillna(-2.0).astype(\"float32\")\ndf['Product_Category_3'] = df['Product_Category_3'].fillna(-2.0).astype(\"float32\")","15640238":"df.isnull().sum()","b69b163a":"gender_dict = {'F':0, 'M':1}\ndf['Gender'] = df['Gender'].apply(lambda x: gender_dict[x])\ndf.head()","41f7fc44":"cols = ['Age', 'City_Category', 'Stay_In_Current_City_Years']\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nfor col in cols:\n    df[col] = le.fit_transform(df[col])\ndf.head()","ea8b0ced":"corr = df.corr()\nplt.figure(figsize=(20,7))\nsns.heatmap(corr, annot=True)","6e5cff98":"df.head()","d06f51fb":"X = df.drop(columns=['User_ID', 'Product_ID', 'Purchase'])\ny = df['Purchase']","2c0551ee":"from sklearn.model_selection import cross_val_score, train_test_split","3ce5d1ca":"from sklearn.metrics import mean_squared_error","a453e5d9":"def train(model, X, y):\n    \n    x_train, x_test, y_train, y_test = train_test_split(X, y, random_state=42, test_size=0.25)\n    model.fit(x_train, y_train)\n    \n    pred = model.predict(x_test)\n    \n    cv_score = cross_val_score(model, X, y, scoring='neg_mean_squared_error', cv=5)\n    cv_score = np.abs(np.mean(cv_score))\n    \n    print(\"Results\")\n    print(\"MSE:\", np.sqrt(mean_squared_error(y_test, pred)))\n    print(\"CV Score:\", np.sqrt(cv_score))","7d88356a":"from sklearn.linear_model import LinearRegression","3145860b":"model = LinearRegression(normalize=True)","44462733":"train(model, X, y)","a721e02f":"coef = pd.Series(model.coef_, X.columns).sort_values()","1b9ca9a5":"coef.plot(kind='bar', title='Model Coefficients')","2de4943e":"from sklearn.tree import DecisionTreeRegressor\nmodel = DecisionTreeRegressor()\ntrain(model, X, y)\nfeatures = pd.Series(model.feature_importances_, X.columns).sort_values(ascending=False)\nfeatures.plot(kind='bar', title='Feature Importance')","4e21ebf3":"from sklearn.ensemble import RandomForestRegressor\nmodel = RandomForestRegressor(n_jobs=-1)\ntrain(model, X, y)\nfeatures = pd.Series(model.feature_importances_, X.columns).sort_values(ascending=False)\nfeatures.plot(kind='bar', title='Feature Importance')","b7e906cb":"from sklearn.ensemble import ExtraTreesRegressor\nmodel = ExtraTreesRegressor(n_jobs=-1)\ntrain(model, X, y)\nfeatures = pd.Series(model.feature_importances_, X.columns).sort_values(ascending=False)\nfeatures.plot(kind='bar', title='Feature Importance')","109825ad":"# EXPLORATORY DATA ANALYSIS:","0894e077":"# IMPORT MODULE:","8e89ea05":"# LOADING THE DATASET:","a2c18b2d":"# INPUT SPLIT:","f25572e5":"# PREPROCESSING THE DATASET:","3cebb118":"# MODEL TRAINING:","d5f44a9e":"# CORRELATION MATRIX:"}}