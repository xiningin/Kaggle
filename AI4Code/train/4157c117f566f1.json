{"cell_type":{"f72ad993":"code","c6a591c3":"code","5e84138b":"code","cec3df5a":"code","41c05c33":"code","0fe69c2e":"code","93366b10":"code","7576411a":"code","6be6dc9d":"code","5e57f712":"code","78db2631":"code","dc9eef1f":"code","8d109ac9":"code","f1218422":"code","fb4cc152":"code","6af439b8":"code","41d4080d":"code","900c3684":"code","f36f7804":"code","f6cee160":"code","47ee1389":"code","34af5f7d":"code","b049ed3f":"code","879782c1":"code","13e7c340":"code","c79c5d0d":"code","b4ba3584":"code","fd8c72bb":"code","db659778":"code","53c2121f":"code","8354bd39":"code","4b1c638d":"code","1d1157b9":"code","5af475ac":"code","14022527":"code","e1887a61":"code","773cc324":"code","2a65c703":"code","d8827054":"code","5f24dabe":"code","c970e774":"code","913e26fe":"code","2446a8f5":"code","77da7ef0":"code","63e38026":"code","d13cf813":"code","f256744f":"code","a556e784":"code","247bd20f":"code","deb58428":"code","b689b05e":"code","83491439":"code","77126ce9":"code","264cc35e":"code","6ca7202f":"code","66d2eb4c":"code","30235103":"code","6bdc72ba":"code","f8a90afa":"code","61aa6648":"code","31c7d1a1":"code","31f6f93d":"code","d5d7ab57":"code","0087f791":"code","be899f31":"code","928fb486":"code","a2ba2b1a":"code","0c4ea7ca":"code","5e954f3f":"code","bf96bd9b":"code","2f7f820c":"code","4b784119":"code","8f12f3e7":"code","88fab54d":"code","efe4a707":"code","b0c65455":"code","a499d4c3":"code","abc325ae":"code","0988dc12":"code","81758545":"markdown","64afd326":"markdown","8122734f":"markdown","7dbc262e":"markdown","afa4d932":"markdown","ce5b7672":"markdown","373c7cf9":"markdown","6806ec7b":"markdown","b41ce955":"markdown","f1e03dfd":"markdown","289087b3":"markdown","5816c1d7":"markdown","68d44f63":"markdown","00e670f9":"markdown","62793d5f":"markdown","4f656dfd":"markdown","e6ebb776":"markdown","6c0dc1b1":"markdown","f188207f":"markdown","8843f952":"markdown","08578739":"markdown"},"source":{"f72ad993":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","c6a591c3":"#Importing libraries and Loading Dataset\nimport warnings\nwarnings.filterwarnings('ignore')\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\ndata=pd.read_csv('..\/input\/google-play-store-apps\/googleplaystore.csv')\ndata","5e84138b":"#Shape of dataframe(rows,cols)\ndata.shape","cec3df5a":"#Information of dataframe.\ndata.info()","41c05c33":"#Finding Null Values\ndata.isnull().sum()","0fe69c2e":"sns.heatmap(data.isnull(), yticklabels = False,  cmap=\"Accent\")","93366b10":"data.hist()","7576411a":"data[data['Rating']>5]","6be6dc9d":"data=data.drop([10472])\ndata","5e57f712":"data['Type'].mode()","78db2631":"data['Type']=data['Type'].fillna(data['Type'].mode().values[0])","dc9eef1f":"data['Android Ver'].mode()","8d109ac9":"data['Android Ver']=data['Android Ver'].fillna(data['Android Ver'].mode().values[0])","f1218422":"data['Current Ver'].mode()","fb4cc152":"data['Current Ver']=data['Current Ver'].fillna(data['Current Ver'].mode().values[0])","6af439b8":"data['Rating'].median()","41d4080d":"data['Rating']=data['Rating'].fillna(data['Rating'].median())","900c3684":"data.isnull().sum()","f36f7804":"data","f6cee160":"data['Reviews'] = data['Reviews'].apply(lambda x: int(x))\n\ndata['Installs'] = data['Installs'].apply(lambda x: x.replace('+', '') if '+' in str(x) else x)\ndata['Installs'] = data['Installs'].apply(lambda x: x.replace(',', '') if ',' in str(x) else x)\ndata['Installs'] = data['Installs'].apply(lambda x: int(x))\n\ndata['Price'] = data['Price'].apply(lambda x: str(x).replace('$', '') if '$' in str(x) else str(x))\ndata['Price'] = data['Price'].apply(lambda x: float(x))\n\ndata['Size'] = data['Size'].apply(lambda x: str(x).replace('Varies with device', 'NaN') if 'Varies with device' in str(x) else x)\ndata['Size'] = data['Size'].apply(lambda x: str(x).replace('M', '') if 'M' in str(x) else x)\ndata['Size'] = data['Size'].apply(lambda x: str(x).replace(',', '') if ',' in str(x) else x)\ndata['Size'] = data['Size'].apply(lambda x: float(str(x).replace('k', '')) \/ 1000 if 'k' in str(x) else x)\ndata['Size'] = data['Size'].apply(lambda x: float(x))","47ee1389":"data.info()","34af5f7d":"#Correlation between variables.\ndata.corr()","b049ed3f":"#Plotting correlation matrix\nimport seaborn as sns\nsns.heatmap(data.corr(), annot=False)","879782c1":"#Splitting Last Updated into Month and Year.\ndata['Last Updated'] = pd.to_datetime(data['Last Updated'])\ndata['year']=data['Last Updated'].dt.year\ndata['month']=data['Last Updated'].dt.month","13e7c340":"data","c79c5d0d":"data['Rating'].hist()","b4ba3584":"#Displaying all categories.\nplt.figure(figsize=(16,8))\nsns.countplot(y='Category', data=data, order = data['Category'].value_counts().sort_values().index)","fd8c72bb":"#Displaying all content ratings.\nsns.barplot(x='Installs',y='Content Rating', data=data)","db659778":"plt.figure(figsize=(16,20))\nsns.barplot(x=\"Installs\", y=\"Genres\", data=data)","53c2121f":"category=pd.get_dummies(data['Category'],prefix='catg',drop_first=True)\ncontent_rating=pd.get_dummies(data['Content Rating'],prefix='cr',drop_first=True)\nframes=[data,category,content_rating]\ndata=pd.concat(frames,axis=1)\ndata=data.drop(['Category','Content Rating'],axis=1)","8354bd39":"#Dropping unneccesary columns\ndata=data.drop(['App','Size','Installs','Price','Genres','Last Updated','Current Ver','Android Ver'],axis=1)","4b1c638d":"data.info()","1d1157b9":"rt={'Rating':data['Rating'],'Type':data['Type']}\nr_t=pd.DataFrame(rt)\nr_t","5af475ac":"free=r_t['Rating'] [r_t['Type']=='Free']\nfree","14022527":"paid=r_t['Rating'] [r_t['Type']=='Paid']\npaid","e1887a61":"r_t.hist(by='Type')","773cc324":"import seaborn as sns\nfree.hist(histtype='stepfilled', alpha=.5, bins=20) \npaid.hist(histtype='stepfilled', alpha=.5, color='red', bins=10)\nplt.xlabel('Type',fontsize=15)\nplt.ylabel('Rating',fontsize=15)\nplt.show()","2a65c703":"means_table = r_t.groupby('Type').mean()\nmeans_table","d8827054":"observed_difference=means_table['Rating'][1]-means_table['Rating'][0]","5f24dabe":"shuffled=r_t.sample(10840,replace = False)\nshuffled","c970e774":"shuffled_rates=shuffled['Rating']","913e26fe":"original_and_shuffled=r_t.assign(shuffled_rates=shuffled_rates.values )\noriginal_and_shuffled","2446a8f5":"all_group_means=original_and_shuffled.groupby('Type').mean()\nall_group_means","77da7ef0":"difference=all_group_means['shuffled_rates'][1]-all_group_means['shuffled_rates'][0]\ndifference","63e38026":"rt={'Rating':data['Rating'],'Type':data['Type']}\nr_t=pd.DataFrame(rt)\nshuffled = r_t.sample(10840,replace = False)\nshuffled_rates = shuffled['Rating']\noriginal_and_shuffled = r_t.assign(shuffled_rates=shuffled_rates.values )\nall_group_means= original_and_shuffled.groupby('Type').mean()\ndifference = all_group_means['shuffled_rates'][0]- all_group_means['shuffled_rates'][1]\ndifference","d13cf813":"import numpy as np\ndifferences = np.zeros(5000)\nfor i in np.arange(5000):\n    rt={'Rating':data['Rating'],'Type':data['Type']}\nr_t=pd.DataFrame(rt)\nshuffled = r_t.sample(10840,replace = False)\nshuffled_rates = shuffled['Rating']\noriginal_and_shuffled = r_t.assign(shuffled_rates=shuffled_rates.values )\nall_group_means= original_and_shuffled.groupby('Type').mean()\ndifference = all_group_means['shuffled_rates'][0]- all_group_means['shuffled_rates'][1]\ndifferences[i]=difference","f256744f":"differences","a556e784":"differences_df = pd.DataFrame(differences)\ndifferences_df","247bd20f":"p_value=np.count_nonzero(differences <= observed_difference)\/differences.size\np_value","deb58428":"if (p_value < 0.05):   \n    print(\" we are rejecting null hypothesis\")\nelse:\n    print(\"we are accepting null hypothesis\")","b689b05e":"rating=data['Rating']\nrating","83491439":"len(rating)","77126ce9":"rating_mean=np.mean(rating)\nprint(rating_mean)","264cc35e":"sample_size=30\nrates_sample=np.random.choice(rating,sample_size)\nrates_sample","6ca7202f":"from scipy.stats import ttest_1samp","66d2eb4c":"ttest,p_value=ttest_1samp(rates_sample,30)","30235103":"print(p_value)","6bdc72ba":"if (p_value < 0.05):   \n    print(\" we are rejecting null hypothesis\")\nelse:\n    print(\"we are accepting null hypothesis\")","f8a90afa":"from sklearn.preprocessing import LabelEncoder\nl=LabelEncoder()\ndata.Type=l.fit_transform(data.Type)","61aa6648":"X=data.drop('Type',axis=1)\ny=data['Type']","31c7d1a1":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state=0)","31f6f93d":"#Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc_X=StandardScaler()\nX_train=sc_X.fit_transform(X_train)\nX_test=sc_X.transform(X_test)","d5d7ab57":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nlr=LogisticRegression(random_state=0)\nlr.fit(X_train,y_train)\nlr_pred=lr.predict(X_test)\n#Accuracy\nlr_ac=f'{accuracy_score(y_test, lr_pred)*100:.2f}%'\nprint('LogisticRegression_accuracy:',lr_ac)","0087f791":"#Confusion Matrix\nlr_cm=confusion_matrix(y_test,lr_pred)\nprint('LogisticRegression_ConfusionMatrix:\\n',lr_cm)\nsns.heatmap(lr_cm,annot = True, fmt = \"d\")\nplt.title('Confusion Matrix of LR')","be899f31":"#Classification Report of model(F-Measure,Recall,Precision)\nfrom sklearn.metrics import classification_report\nprint(classification_report(y_test, lr_pred))","928fb486":"# 10 folds Cross-Validation\nfrom sklearn.model_selection import cross_val_score\nscores_lr = cross_val_score(lr, X, y, cv=10)\nscores_lr","a2ba2b1a":"scores_lr.mean()","0c4ea7ca":"#ROC Test\nfrom sklearn.metrics import plot_roc_curve\nplot_roc_curve(lr,X_test,y_test)\nplt.plot([0,1],[0,1],'k--')\nplt.xlim([0.0,1.0])\nplt.ylim([0.0,1.0])\nplt.title('Receiver Operating Characteristics ( ROC Curve)')\nplt.xlabel('False Positive Rate ( FPR )')\nplt.ylabel('True positive Rate ( TPR )')\nplt.legend(loc=0,fontsize='small')\nplt.show()","5e954f3f":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\ndt=DecisionTreeClassifier(criterion='entropy',random_state=0)\ndt.fit(X_train,y_train)\ndt_pred=dt.predict(X_test)\n#Accuracy\ndt_ac=f'{accuracy_score(y_test, dt_pred)*100:.2f}%'\nprint('Decision Tree Accuracy:',dt_ac)","bf96bd9b":"#Confusion Matrix\ndt_cm=confusion_matrix(y_test,dt_pred)\nprint('DecisionTree_ConfusionMatrix:\\n',dt_cm)\nsns.heatmap(dt_cm,annot = True, fmt = \"d\")\nplt.title('Confusion Matrix of DT')","2f7f820c":"#Classification Report\nfrom sklearn.metrics import classification_report\nprint(classification_report(y_test, dt_pred))","4b784119":"# 10 folds cross validation\nfrom sklearn.model_selection import cross_val_score\nscores_dt=cross_val_score(dt, X, y, cv=10)\nscores_dt","8f12f3e7":"scores_dt.mean()","88fab54d":"#ROC Test\nfrom sklearn.metrics import plot_roc_curve\nplot_roc_curve(dt,X_test,y_test)\nplt.plot([0,1],[0,1],'k--')\nplt.xlim([0.0,1.0])\nplt.ylim([0.0,1.0])\nplt.title('Receiver Operating Characteristics ( ROC Curve)')\nplt.xlabel('False Positive Rate ( FPR )')\nplt.ylabel('True positive Rate ( TPR )')\nplt.legend(loc=0,fontsize='small')\nplt.show()","efe4a707":"from sklearn.svm import SVC\nsvm=SVC(kernel='linear')\nsvm.fit(X_train,y_train)\nsvm_pred=svm.predict(X_test)\n#Accuracy\nsvm_ac=f'{accuracy_score(y_test, svm_pred)*100:.2f}%'\nprint('SVM_Accuracy:',svm_ac)","b0c65455":"#ConfusionMatrix\nsvm_cm=confusion_matrix(y_test,svm_pred)\nprint('SVM_ConfusionMatrix:\\n',svm_cm)\nsns.heatmap(svm_cm,annot = True, fmt = \"d\")\nplt.title('Confusion Matrix of SVM')","a499d4c3":"#Classification Report\nfrom sklearn.metrics import classification_report\nprint(classification_report(y_test, svm_pred))","abc325ae":"#ROC Test\nfrom sklearn.metrics import plot_roc_curve\nplot_roc_curve(svm,X_test,y_test)\nplt.plot([0,1],[0,1],'k--')\nplt.xlim([0.0,1.0])\nplt.ylim([0.0,1.0])\nplt.title('Receiver Operating Characteristics ( ROC Curve)')\nplt.xlabel('False Positive Rate ( FPR )')\nplt.ylabel('True positive Rate ( TPR )')\nplt.legend(loc=0,fontsize='small')\nplt.show()","0988dc12":"models={'Accuracy':[lr_ac,dt_ac,svm_ac],\n        'Model':['Logistic Regression','DecisionTree Classifier','SVC']}\nmodels_acc=pd.DataFrame(models)\nmodels_acc","81758545":"##### Ratings of Paid Apps","64afd326":"##### Here, we have one outlier with Rating>5. So, we are dropping that row.","8122734f":"##### Converting Variable from Object type to Integer type.","7dbc262e":"# Google Play Store Analysis","afa4d932":"### Logistic Regression","ce5b7672":"##### 5000 Simulations","373c7cf9":"### SVM","6806ec7b":"#### As our target variable is categorical type, we can use any classification problem.","b41ce955":"#### Dummy Variables","f1e03dfd":"### Test whether there is any difference in the ratings of the paid and free apps.","289087b3":"##### Imputing Null Values with Mode for Categorical Variable and Median for Continuous Variable.","5816c1d7":"#### Considering my Target Variable is \"Type\" which is of Categorical values(Free and Paid).","68d44f63":"### Exploratory Data Analysis(EDA)","00e670f9":"#### Splitting data into Training and Test Set","62793d5f":"### T-Test","4f656dfd":"### Data Pre-Processing","e6ebb776":"Null Hypothesis: No difference in ratings of free and paid apps.\nAlternative Hypothesis: There is a difference between ratings of free and paid apps.","6c0dc1b1":"### Decision Tree","f188207f":"##### Ratings of Free Apps","8843f952":"### Hypothesis Testing","08578739":"##### One Simulation"}}