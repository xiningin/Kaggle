{"cell_type":{"8d7d9530":"code","c6fdd010":"code","13685a13":"code","d0bd3789":"code","69d8d286":"code","6e67412a":"code","c7a4fc18":"code","49ee5b12":"code","994e1417":"code","108048e3":"code","a72a6241":"code","3192f07c":"code","a99f99ab":"code","8471f8ce":"code","df897e66":"code","10d4b88a":"code","4b0cd802":"code","6607f83e":"code","9f3cbef7":"code","715832e4":"code","23982821":"code","47e556c5":"code","ac4b7efc":"code","065b4432":"code","a2595a72":"code","99e5d5cc":"code","19134441":"code","73d00e63":"code","6993f09f":"code","694afe6a":"code","c8ac4422":"code","7e84dc0a":"code","4e16737f":"code","f1a71750":"code","70180b9f":"code","ee9b953d":"code","9fe45404":"code","bd395490":"code","392cbfeb":"code","b539a5fa":"code","4e757810":"markdown","291c7744":"markdown","faee457a":"markdown","478061f0":"markdown","a580abeb":"markdown","39a11f86":"markdown","cf894e57":"markdown","6cb44c32":"markdown","d8db6ee0":"markdown","465da570":"markdown","4f959336":"markdown","592ef971":"markdown","39735dcd":"markdown","f5a7ba20":"markdown","447c23b8":"markdown","525f8ad6":"markdown","0890a254":"markdown","e1d17491":"markdown","ef234b3a":"markdown","697bfb84":"markdown","db2d59fe":"markdown","07b78d61":"markdown","45aeb38f":"markdown","a369ac67":"markdown","80681e8b":"markdown","cb37466c":"markdown","1aef5f07":"markdown","a60a9a1c":"markdown","9a3efb61":"markdown","b508b50b":"markdown","c3616228":"markdown","b96ccc27":"markdown","29c9954a":"markdown","e65f3cb2":"markdown","2d33e253":"markdown","ec5bea1d":"markdown","dedfd322":"markdown","53fb6037":"markdown","e3787093":"markdown","70ccca57":"markdown"},"source":{"8d7d9530":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D \n\nfrom termcolor import colored\n\nimport seaborn as sns\n\nfrom plotly import tools\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True) \n\nfrom sklearn.preprocessing import LabelEncoder\n\nfrom PIL import Image #for image mask\nfrom subprocess import check_output\nfrom wordcloud import WordCloud, STOPWORDS\nstopwords = set(STOPWORDS)\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# Any results you write to the current directory are saved as output.","c6fdd010":"df = pd.read_json(\"..\/input\/english-premier-league-player-data-20172018\/fpl_data.json\") #Data is of Players who played in 2017-18 Premier League (web scraped) \ndf = df.T\ndf.reset_index(level=0, inplace = True)\ndf = df.rename(columns={\"index\": \"Player Name\"})\ndf['Goals']= df['Goals'].astype(int)\ndf['Goals']=df['Goals'].fillna(0)\ndf[df['Club']=='Sevilla'].dropna(inplace=True)\nPlayerData = df.sort_values(by=['Goals'],ascending=False) #Data Sorted by Goals\ntempPlayerData = PlayerData  #getting required data for graph\n#tempPlayerData.head(10)      #top 10 row printed\n\n#Sanitizing Data\ndf = df.fillna(0)\ndf['Accurate Long Balls'] = df['Accurate Long Balls'].str.replace(',', '')\ndf['Clearances'] = df['Clearances'].str.replace(',', '')\ndf['Crosses'] = df['Crosses'].str.replace(',', '')\ndf['Duels Lost'] = df['Duels Lost'].str.replace(',', '')\ndf['Duels Lost'] = df['Duels Lost'].str.replace(',', '')\ndf['Duels Won'] = df['Duels Won'].str.replace(',', '')\ndf['Goal Kicks'] = df['Goal Kicks'].str.replace(',', '')\ndf['Recoveries'] = df['Recoveries'].str.replace(',', '')\ndf['Passes'] = df['Passes'].str.replace(',', '')\ndf['Shooting Accuracy %'] = df['Shooting Accuracy %'].str.replace('%', '')\ndf['Cross Accuracy %'] = df['Cross Accuracy %'].str.replace('%', '')\ndf['Tackle Success %'] = df['Tackle Success %'].str.replace('%', '')\ndf[\"Passes Per Match\"]= df[\"Passes Per Match\"].astype(float)\ndf[\"Wins\"] = df[\"Wins\"].astype(int)\ndf[\"Shots On Target\"] = df[\"Shots On Target\"].astype(int)\ndf[\"Assists\"] = df[\"Assists\"].astype(int)\ndf[\"Penalties Saved\"] = df[\"Penalties Saved\"].astype(int)\ndf[\"Penalties Scored\"] = df[\"Penalties Scored\"].astype(int)\ndf[\"Saves\"] = df[\"Saves\"].astype(int)\ndf[\"Blocked Shots\"] = df[\"Blocked Shots\"].astype(int)","13685a13":"df.to_csv('Football.csv', index = False)","d0bd3789":"#word cloud - Popular Cities (top 50)\nwave_mask3 = np.array(Image.open( \"..\/input\/beerimage\/tulip-beer-glass.jpg\"))\nwordcloud = (WordCloud( max_words = 200,stopwords=stopwords, mask = wave_mask3, background_color='#361F1B',margin=10).generate_from_frequencies(df.groupby('Club')['Wins'].count()))\nfig = plt.figure(1,figsize=(15, 15))\nplt.imshow(wordcloud,interpolation='bilinear')\nplt.axis('off')\nplt.show()","69d8d286":"cm = sns.light_palette(\"#bc9b1b\", as_cmap=True)\ntemp = df.groupby(\"Club\")[\"Club\",\"Goals\"].sum().sort_values(\"Goals\",ascending=False).head(10)\nplotdata = df[df[\"Club\"].isin(temp.index)]\nprint(colored(\"#Top Club & the Average stats\",'blue'))\ndisplay(plotdata.groupby('Club')['Assists','Goals','Passes','Shots On Target','Tackles',\"Penalties Scored\",\"Saves\"].mean().style.background_gradient(cmap=cm))","6e67412a":"#Data Prep \ntopclubs = df.groupby('Club')['Wins'].count().sort_values(ascending=False).head(10).index\nXt = df.iloc[:,1:-1]\nXt = Xt[Xt['Club'].isin(topclubs)]\n#Xt = Xt[Xt.Club != ''].reset_index(drop=True)\n#Xt = Xt[Xt.Club != 'Sevilla'].reset_index(drop=True)\n#Xt = Xt.sort_values()\nyt = Xt['Club']\nXt = Xt.drop(columns=['Club','Position','Team Play','Defence','Discipline','Successful \/s', 'Successful 0\/0s', 'Successful 5\/5s',\n       'Successful 50\/50s'])\n\n\nXt['Crosses'] = Xt['Crosses'].str.replace(',', '')\nXt['Crosses'] = Xt['Crosses'].fillna(0)\nXt['Crosses'] = Xt['Crosses'].astype(int)\nXt['Accurate Long Balls'] = Xt['Accurate Long Balls'].fillna(0)\nXt['Accurate Long Balls'] = Xt['Accurate Long Balls'].astype(int)\nXt['Shots'] = Xt['Shots'].str.replace(',', '')\nXt['Shots']=Xt['Shots'].fillna(0)\nXt['Shots']=Xt['Shots'].astype(int)\nXt['Tackles'] = Xt['Tackles'].str.replace(',', '')\nXt['Tackles']=Xt['Tackles'].fillna(0)\nXt['Tackles']=Xt['Tackles'].astype(int)\nXt['Aerial Battles Lost'] = Xt['Aerial Battles Lost'].fillna(0)\nXt['Aerial Battles Lost'] = Xt['Aerial Battles Lost'].astype(int)\nXt['Aerial Battles Won'] = Xt['Aerial Battles Won'].fillna(0)\nXt['Aerial Battles Won'] = Xt['Aerial Battles Won'].astype(int)\nXt['Big Chances Created'] = Xt['Big Chances Created'].astype(int)\nXt['Headed Clearance'] = Xt['Headed Clearance'].str.replace(',', '')\nXt['Headed Clearance'] = Xt['Headed Clearance'].fillna(0)\nXt['Headed Clearance'] = Xt['Headed Clearance'].astype(int)\nXt['Errors Leading To Goal']= Xt['Errors Leading To Goal'].astype(int)\nXt['Goal Kicks']= Xt['Goal Kicks'].fillna(0)\nXt['Goal Kicks']= Xt['Goal Kicks'].astype(int)\nXt['Goalkeeping']= Xt['Goalkeeping'].str.replace('','0')\nXt['Goalkeeping']= Xt['Goalkeeping'].fillna(0)\nXt['Goalkeeping']= Xt['Goalkeeping'].astype(int)\nXt['Goals Conceded']= Xt['Goals Conceded'].astype(int)\nXt['Goals From Freekick']= Xt['Goals From Freekick'].astype(int)\nXt['Goals Per Match']= Xt['Goals Per Match'].astype(float)\nXt['Goals With Header']= Xt['Goals With Header'].astype(int)\nXt['Goals With Left Foot']= Xt['Goals With Left Foot'].astype(int)\nXt['Goals With Right Foot']= Xt['Goals With Right Foot'].astype(int)\nXt['Hit Woodwork']= Xt['Hit Woodwork'].astype(int)\nXt['Interceptions']= Xt['Interceptions'].astype(int)\nXt['Last Man Tackles']= Xt['Last Man Tackles'].astype(int)\nXt['Punches']= Xt['Punches'].astype(int)\nXt['Offsides']= Xt['Offsides'].astype(int)\nXt['Through Balls']= Xt['Through Balls'].astype(int)\nXt['Throw Outs']= Xt['Throw Outs'].str.replace(',','')\nXt['Throw Outs']= Xt['Throw Outs'].fillna(0)\nXt['Throw Outs']= Xt['Throw Outs'].astype(int)\nXt['Sweeper Clearances']= Xt['Sweeper Clearances'].astype(int)\nXt['Own Goals']= Xt['Own Goals'].astype(int)\nXt['Red Cards']= Xt['Red Cards'].astype(int)\nXt['Appearances']= Xt['Appearances'].astype(int)\nXt['Attack']= Xt['Attack'].str.replace('','0')\nXt['Attack']= Xt['Attack'].fillna(0)\nXt['Attack']= Xt['Attack'].astype(int)\nXt['Big Chances Missed']= Xt['Big Chances Missed'].astype(int)\nXt['Catches']= Xt['Catches'].astype(int)\nXt['Clean Sheets']= Xt['Clean Sheets'].astype(int)\nXt['Clearances']= Xt['Clearances'].fillna(0)\nXt['Clearances']= Xt['Clearances'].astype(int)\nXt['Clearances Off Line']= Xt['Clearances Off Line'].astype(int)\nXt['Cross Accuracy %']= Xt['Cross Accuracy %'].fillna(0)\nXt['Cross Accuracy %']= Xt['Cross Accuracy %'].astype(int)\nXt['Duels Lost']= Xt['Duels Lost'].fillna(0)\nXt['Duels Lost']= Xt['Duels Lost'].astype(int)\nXt['Duels Won']= Xt['Duels Won'].fillna(0)\nXt['Duels Won']= Xt['Duels Won'].astype(int)\nXt['Fouls']= Xt['Fouls'].astype(int)\nXt['High Claims']= Xt['High Claims'].astype(int)\nXt['Losses']= Xt['Losses'].astype(int)\nXt['Passes']= Xt['Passes'].astype(int)\nXt['Recoveries']= Xt['Recoveries'].fillna(0)\nXt['Recoveries']= Xt['Recoveries'].astype(int)\nXt['Shooting Accuracy %']= Xt['Shooting Accuracy %'].astype(float)\nXt['Tackle Success %']= Xt['Tackle Success %'].astype(float)\nXt = Xt.fillna(0)\n\n#encoding labels\nlb = LabelEncoder()\ny = pd.DataFrame(yt)  \ny['Label'] = lb.fit_transform(y['Club'])","c7a4fc18":"# Utility function to visualize the outputs of  t-SNE\n\ndef v_scatter(x, c,name,label):\n    # choose a color palette with seaborn.\n    num_classes = len(np.unique(c[label]))\n    palette = np.array(sns.color_palette(\"hls\", num_classes))\n\n    # create a scatter plot.\n    f = plt.figure(figsize=(15, 15))\n    ax = plt.subplot(aspect='equal')\n    sc = ax.scatter(x[:,0], x[:,1], lw=0, s=40, c=palette[c['Label'].astype(np.int)])\n    plt.xlim(-25, 25)\n    plt.ylim(-25, 25)\n    ax.axis('off')\n    ax.axis('tight')\n\n    # add the labels for each digit corresponding to the label\n    txts = []\n\n    for i in range(num_classes):\n\n        # Position of each label at median of data points.\n        xtext, ytext = np.median(x[c[label] == i, :], axis=0)\n        txt = ax.text(xtext, ytext, str(c[c[label] == i][name].unique()), fontsize=10)\n        txt.set_path_effects([\n            PathEffects.Stroke(linewidth=5, foreground=\"w\"),\n            PathEffects.Normal()])\n        txts.append(txt)\n\n    return f, ax, sc, txts","49ee5b12":"import matplotlib.patheffects as PathEffects\n%matplotlib inline\n\nimport seaborn as sns\nsns.set_style('darkgrid')\nsns.set_palette('muted')\nsns.set_context(\"notebook\", font_scale=1.5,\n                rc={\"lines.linewidth\": 2.5})\nRS = 123\n\nfrom sklearn.manifold import TSNE\nv_tsne = TSNE(random_state=RS).fit_transform(Xt)\nv_scatter(v_tsne, y,'Club','Label')\n","994e1417":"from sklearn.decomposition import PCA\npca = PCA(n_components=4)\npca_result = pca.fit_transform(Xt)\npca_df = pd.DataFrame(columns = ['pca1','pca2','pca3','pca4'])\n\npca_df['pca1'] = pca_result[:,0]\npca_df['pca2'] = pca_result[:,1]\npca_df['pca3'] = pca_result[:,2]\npca_df['pca4'] = pca_result[:,3]\n\nprint('Variance explained per principal component: {}'.format(pca.explained_variance_ratio_))\n\ntop_two_comp = pca_df[['pca1','pca2']] # taking first and second principal component\n\nv_scatter(top_two_comp.values,y,'Club','Label') # Visualizing the PCA output","108048e3":"#function for the 3D Scatter plot\ndef plot3D(xlabel, ylabel, n,desc='Player Name'):\n    fig = plt.figure()\n    ax = fig.gca(projection='3d')\n    fig.subplots_adjust(left=0.4, right=2,bottom=2,top=4)\n    \n    tempPlayerData[[xlabel,ylabel]] = tempPlayerData[[xlabel,ylabel]].fillna(0)\n    \n    z = np.array(tempPlayerData['Goals'])\n    y = np.array(tempPlayerData[ylabel].astype(int))\n    x = np.array(tempPlayerData[xlabel].astype(int))\n\n    Desc = np.array(tempPlayerData[desc])\n    \n    a = 'right'\n    for i in range(n):\n        ax.scatter(x[i], y[i], z[i], c='orange', marker='*',s=100)\n        ax.text(x[i], y[i], z[i], '%s'%(Desc[i]), color='r',alpha=0.8, fontsize=8,horizontalalignment=a,verticalalignment='bottom', \\\n           bbox=dict(facecolor='red', alpha=0.12)) \n        if a=='right':\n            a = 'left'\n        else:\n            a = 'right'\n        \n    plt.title(\"Top %d Players\"%(n))\n    ax.set_zlabel('Goals Scored')\n    ax.set_xlabel(xlabel)\n    ax.set_ylabel(ylabel)\n\n    ax.w_xaxis.set_pane_color((1.0, 0.99,1.0,  1.0))\n    ax.w_yaxis.set_pane_color((1.0, 0.99, 1.0, 1.0))\n    ax.w_zaxis.set_pane_color((0.2, 1.0, 0.2, 1.0))\n    #ax.mouse_init(rotate_btn=1, zoom_btn=3)\n    plt.show()  ","a72a6241":"plot3D('Shots On Target','Tackles',10)","3192f07c":"plot3D('Shots On Target','Tackles',5,\"Club\") #Uhhh Everton had\/have the player with max Goals scored - Wayne Rooney","a99f99ab":"#function for player comparision \ndef PlayerCompare1D(x,y,desc):\n    P1 = df[df[\"Player Name\"]==x][desc].values.astype(str)\n    P2 = df[df[\"Player Name\"]==y][desc].values.astype(str)\n    print(\"Player %s vs %s -- %s\"%(x,y,desc))\n    if P1[0]>P2[0]:\n        print(colored(\"          %s\"%(P1[0]),'green'),colored(\"          %s\"%(P2[0]),'red'))\n    else:\n        print(colored(\"          %s\"%(P1[0]),'red'),colored(\"          %s\"%(P2[0]),'green'))\n        \n","8471f8ce":"PlayerCompare1D(\"Romelu Lukaku\",\"Marcus Rashford\",\"Shooting Accuracy %\")","df897e66":"PlayerCompare1D(\"Wayne Rooney\",\"Paul Pogba\",\"Shooting Accuracy %\")","10d4b88a":"#functions to get player power\ndef Playwell(trace1):\n    x = df[df[\"Player Name\"] == trace1]\n    trace1 = go.Scatterpolar(\n      r = [x['Assists'].values[0],x['Goals'].values[0],x['Passes Per Match'].values[0],x['Shots On Target'].values[0],x['Tackles'].values[0],x[\"Penalties Scored\"].values[0]],\n      theta = ['Assists','Goals','Passes Per Match','Shots On Target','Tackles',\"Penalties Scored\"],\n      fill = 'toself',\n      name = trace1\n    )\n    return trace1\n\ndef PlayerSpotlight(trace1):\n    trace1 = Playwell(trace1)\n    layout = go.Layout(\n          xaxis=dict(\n            domain=[0, 0.45]\n            ),\n            yaxis=dict(\n            domain=[0, 0.45]\n            ),\n        \n           \n          showlegend = True,\n          title = \"Player Performance\"\n    )\n\n    data = [trace1]\n    fig = go.Figure(data=data, layout=layout)\n\n    iplot(fig, filename = \"Player stats\")","4b0cd802":"PlayerSpotlight(\"Wayne Rooney\")","6607f83e":"#Function to compare the Pok\u00e9mon powers\ndef PlayerFight(trace1,trace2,trace3,trace4):\n    trace1 = Playwell(trace1) #calling the Helper function defined before\n    trace2 = Playwell(trace2)\n    trace3 = Playwell(trace3)\n    trace4 = Playwell(trace4)\n    layout = go.Layout(\n      xaxis=dict(\n            domain=[0, 0.50]\n        ),\n        yaxis=dict(\n            domain=[0, 0.50]\n        ),\n        xaxis2=dict(\n            domain=[0.70, 1]\n        ),\n        xaxis3=dict(\n            domain=[0, 0.50],\n            anchor='y3'\n        ),\n        xaxis4=dict(\n            domain=[0.70, 1],\n            anchor='y4'\n        ),\n        yaxis2=dict(\n            domain=[0, 0.50],\n            anchor='x2'\n        ),\n        yaxis3=dict(\n            domain=[0.70, 1]\n        ),\n        yaxis4=dict(\n            domain=[0.70, 1],\n            anchor='x4'\n        ),\n      showlegend = True,\n      title = \"Player Fight (who will you bet on!)\"\n    )\n\n    data = [trace1, trace2, trace3, trace4]\n    fig = go.Figure(data=data, layout=layout)\n\n    iplot(fig, filename = \"Player Fight\")","9f3cbef7":"PlayerFight(\"Romelu Lukaku\",\"Marcus Rashford\",\"Paul Pogba\",\"Eden Hazard\")","715832e4":"#Getting Data specific to Man Utd.\nManUtdPlayerData = df[df[\"Club\"]==\"Manchester United\"].sort_values(by=\"Position\")\nManUtdPlayerData= ManUtdPlayerData.reset_index(drop=True)\n#ManUtdPlayerData","23982821":"#Main hardcoded funtion for finding best Players, what we get as Best player is based on the parameters defined in the function and weights given to them\ndef scoreEvaluator(tempData, Pos):\n    score = 0.0\n    #i have tried to keep the weights simple \n    if Pos == \"Goalkeeper\":\n        score = score - 1*float(tempData[\"Errors Leading To Goal\"]) \\\n            + 0.5*float(tempData[\"Assists\"]) \\\n            - 1*float(tempData[\"Red Cards\"]) \\\n            + 1.0*float(tempData[\"Penalties Saved\"]) - 0.9*float(tempData[\"Fouls\"]) \\\n            + 0.2*float(tempData[\"Appearances\"]) - 0.8*float(tempData[\"Own Goals\"]) \\\n            + 0.8*float(tempData[\"Blocked Shots\"]) - 1*float(tempData[\"Goals Conceded\"]) + \\\n            0.5*float(tempData[\"Accurate Long Balls\"]) + 3*float(tempData[\"Saves\"])\n        return score\n    \n    if Pos == \"Defender\":\n        score = score + 0.5*float(tempData[\"Goals\"]) - 1*float(tempData[\"Errors Leading To Goal\"]) \\\n            + 0.9*float(tempData[\"Shots On Target\"]) + 0.5*float(tempData[\"Assists\"])  \\\n            + 0.5*float(tempData[\"Tackles\"]) - 1*float(tempData[\"Red Cards\"]) \\\n            + 1.0*float(tempData[\"Penalties Saved\"]) - 0.9*float(tempData[\"Fouls\"]) \\\n            + 0.8*float(tempData[\"Goals With Header\"]) - 0.8*float(tempData[\"Own Goals\"]) \\\n            + 0.8*float(tempData[\"Blocked Shots\"]) + 0.5*float(tempData[\"Passes Per Match\"])\n        return score\n    \n    if Pos ==\"Midfielder\":\n        score = score + 0.5*float(tempData[\"Shooting Accuracy %\"]) +0.8*float(tempData[\"Goals\"]) \\\n            + 0.9*float(tempData[\"Shots On Target\"]) + 0.9*float(tempData[\"Assists\"]) \\\n            + 0.9*float(tempData[\"Tackle Success %\"]) - 1*float(tempData[\"Red Cards\"]) \\\n            + 0.8*float(tempData[\"Penalties Scored\"]) - 0.9*float(tempData[\"Fouls\"]) \\\n            + 0.5*float(tempData[\"Goals With Header\"]) - 0.8*float(tempData[\"Own Goals\"]) \\\n            + 0.5*float(tempData[\"Goals From Freekick\"]) + 1.0*float(tempData[\"Passes Per Match\"])\n        return score\n    \n    if Pos == \"Forward\":  \n        score = score + 0.8*float(tempData[\"Shooting Accuracy %\"]) +1*float(tempData[\"Goals\"]) \\\n            + 0.9*float(tempData[\"Shots On Target\"]) + 0.5*float(tempData[\"Assists\"]) \\\n            + 0.5*float(tempData[\"Tackle Success %\"]) - 1*float(tempData[\"Red Cards\"]) \\\n            + 0.8*float(tempData[\"Penalties Scored\"]) - 0.9*float(tempData[\"Fouls\"]) \\\n            + 0.8*float(tempData[\"Goals With Header\"]) - 0.8*float(tempData[\"Own Goals\"]) \\\n            + 0.8*float(tempData[\"Goals From Freekick\"]) + 0.5*float(tempData[\"Passes Per Match\"]) \\\n            + 0.8*float(tempData[\"Cross Accuracy %\"])\n        return score\n\n\n\n\ndef BestUtdPlayer(Pos):\n    if Pos not in [\"Defender\",\"Forward\",\"Midfielder\",\"Goalkeeper\"]:\n        print(\"Invalid Position given - ReTry\")\n        return\n    tempData = ManUtdPlayerData[ManUtdPlayerData[\"Position\"]==Pos]\n    nRows = tempData.shape[0]\n    MaxScore = 0.0 \n    j = 0\n    tempData[\"Score\"] = pd.Series([1.0]*nRows)  #initializing a score of 1 for each row\n    for i in range(nRows):\n        tempData[\"Score\"].iloc[i] = tempData[\"Score\"].iloc[i] + scoreEvaluator(tempData.iloc[i],Pos)\n        if tempData[\"Score\"].iloc[i] > MaxScore:\n            MaxScore = tempData[\"Score\"].iloc[i]\n            j = i \n    print(colored(\"Best Utd %s is %s\"%(Pos,tempData[\"Player Name\"].iloc[j]),'blue'))\n    ","47e556c5":"BestUtdPlayer(\"Goalkeeper\")\nBestUtdPlayer(\"Defender\")\nBestUtdPlayer(\"Midfielder\")\nBestUtdPlayer(\"Forward\")\n","ac4b7efc":"ManUtdPlayerData.to_csv('ManUtdPlayerData.csv', index = False)","065b4432":"#Plotting\nfig, (ax) = plt.subplots(figsize=(12,9),ncols=2, nrows=3)\n\nprint(\"Passes Per Match Correlation to Wins\",colored(df[\"Wins\"].corr(df[\"Passes Per Match\"]),'green')) #Pearson Correlation Coef.\nsns.regplot(x=\"Wins\",y=\"Passes Per Match\",data=df,ax=ax[0][0])\n\nprint(\"Shots On Target Correlation to Wins \",colored(df[\"Wins\"].corr(df[\"Shots On Target\"]),'green'))\nsns.regplot(x=\"Wins\",y=\"Shots On Target\",data=df,ax=ax[0][1])\n\nprint(\"Assists Correlation to Wins         \",colored(df[\"Wins\"].corr(df[\"Assists\"]),'green')) \nsns.regplot(x=\"Wins\",y=\"Assists\",data=df,ax=ax[1][0])\n\nprint(\"Penalites Scored Correlation to Wins\",colored(df[\"Wins\"].corr(df[\"Penalties Scored\"]),'green'))\nsns.regplot(x=\"Wins\",y=\"Penalties Scored\",data=df,ax=ax[1][1])\n\nprint(\"Goals Correlation to Wins           \",colored(df[\"Wins\"].corr(df[\"Goals\"]),'green'))\nsns.regplot(x=\"Wins\",y=\"Goals\",data=df,ax=ax[2][0])\n\nprint(\"Saves Correlation to Wins           \",colored(df[\"Wins\"].corr(df[\"Saves\"]),'green'))\nsns.regplot(x=\"Wins\",y=\"Saves\",data=df,ax=ax[2][1])\n\nplt.show()","a2595a72":"from mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\nfig = plt.figure(figsize=(12,9))\nax = fig.add_subplot(111, projection='3d')\n\nn = 100\n\n# Make data.\nxs = df[\"Goals\"]\nys = df[\"Passes Per Match\"]\nzs = df[\"Wins\"]\n\n\nax.scatter(xs, ys, zs,  marker='*',color='green')\nax.set_xlabel('Goals')\nax.set_ylabel('Passes Per Match')\nax.set_zlabel('Wins')\n\nplt.show()\n","99e5d5cc":"sns.jointplot(x='Passes Per Match',y='Goals',data=df,kind='kde',color='blue')\nplt.show()","19134441":"MG = df.groupby(\"Club\")[\"Goals\"].sum().sort_values(ascending=False).head(10)\nfig = plt.figure(figsize=(15,6))\nplt.bar(MG.index,MG.values,color='green')                                #plotting\nplt.xlabel(\"Clubs\",color='green')\nplt.ylabel(\"Total Goals (in Premiere League)\",color='green')\nplt.show()","73d00e63":"MW = df.groupby(\"Club\")[\"Wins\"].sum().sort_values(ascending=False).head(10)\nfig = plt.figure(figsize=(15,6))\nplt.bar(MW.index,MW.values)                              #plotting\nplt.xlabel(\"Clubs\",color='blue')\nplt.ylabel(\"Total Wins (in Premiere League)\",color='blue')\nplt.show()","6993f09f":"cm = sns.light_palette(\"yellow\", as_cmap=True)\ndf.groupby('Club')['Blocked Shots','Penalties Saved','Saves'].sum().sort_values(by='Saves',ascending = False).head(20).style.background_gradient(cmap=cm)","694afe6a":"cm = sns.light_palette(\"green\", as_cmap=True)\ndf.groupby('Club')['Goals','Penalties Scored','Assists'].sum().sort_values(by='Goals',ascending = False).head(20).style.background_gradient(cmap=cm)","c8ac4422":"fig = plt.figure(figsize=(12,6))\nprint(colored(\"Foul Play Distributions\",'blue'))\nplt.subplot(1,3,1)\nsns.distplot(df[\"Red Cards\"].astype(int),color='red')\nplt.subplot(1,3,2)\nsns.distplot(df[\"Yellow Cards\"].astype(int),color='yellow')\nplt.subplot(1,3,3)\nsns.distplot(df[\"Fouls\"].astype(int),color='grey')\n\nplt.show()","7e84dc0a":"#Data Prep\ndfc = df.sort_values(by='Goals',ascending=False).head(10) #Looking at top 10 Goal Scorer of 17-18 \ndfc['Shooting Accuracy %'] = dfc['Shooting Accuracy %'].astype(float)\n\n#plotting\nplt.style.use('dark_background')\nfig = plt.figure(figsize=(12,9))\na= dfc.groupby(\"Goals\")['Shooting Accuracy %'].mean().index\nb = dfc.groupby(\"Goals\")['Shooting Accuracy %'].mean().values\nplt.plot(a,b,ls='dashed')\nplt.ylabel('Shooting Accuracy %', color = 'red')\nplt.xlabel(\"Goals\", color = 'red')\nplt.title(\"Top 10 Strikers (in terms of #Goals)\",color='green')\nplt.show()","4e16737f":"#Data Prep, using same data as above dfc (#top 10 Strikers in terms of Goals)\ndfc['Tackles'] = dfc['Tackles'].astype(int)\ndfc['Assists'] = dfc['Assists'].astype(int)\ndfc['Passes Per Match'] = dfc['Passes Per Match'].astype(int)\ndfc['Shots On Target'] = dfc['Shots On Target'].astype(int)\ndfc['Penalties Scored'] = dfc['Penalties Scored'].astype(int)\n\n#plotting\n\nfig = plt.figure(figsize=(12,9))\ndef plotline(i): #main plotting function\n    a= dfc.groupby(\"Goals\")[i].mean().index\n    b = dfc.groupby(\"Goals\")[i].mean().values\n    plt.plot(a,b,ls='dashed')\ncap = ['Tackles','Assists','Passes Per Match','Shots On Target','Penalties Scored'] #capabilities we looking for\nfor i in cap:\n    plotline(i)\nplt.legend(cap, loc='upper left')\nplt.ylabel('Total #', color = 'red')\nplt.xlabel(\"Goals\", color = 'red')\nplt.title(\"Top 10 Strikers (in terms of #Goals)\",color='green')\nplt.show()","f1a71750":"#Data Prep\ndf[['Aerial Battles Won','Duels Won','Recoveries','Tackle Success %']]= df[['Aerial Battles Won','Duels Won','Recoveries','Tackle Success %']].fillna(0).astype(int)\n#Plotting\ncm = sns.light_palette(\"orange\", as_cmap=True)\ndf.groupby(\"Club\")['Aerial Battles Won','Duels Won','Tackle Success %','Recoveries'].sum().sort_values(by='Recoveries',ascending=False).head(20).style.background_gradient(cmap=cm)","70180b9f":"#Data Prep\nAB = df.copy()\nAB['Accurate Long Balls']= AB['Accurate Long Balls'].fillna(0)\nAB['Big Chances Created']=AB['Big Chances Created'].fillna(0)\nAB['Crosses'] = AB['Crosses'].fillna(0)\nAB['Crosses'] = AB['Crosses'].astype(int) #making sure all required fields are integers\nAB['Big Chances Created'] = AB['Big Chances Created'].astype(int)\nAB['Accurate Long Balls'] = AB['Accurate Long Balls'].astype(int)\nAB['Tackles'] = AB['Tackles'].astype(int)\nAB['Assists'] = AB['Assists'].astype(int)\n\n#plotting\nfig, (ax) = plt.subplots(figsize=(12,9),ncols=2, nrows=2,sharey=True)\n\nprint(\"Big Chances created correlation with Accurate long Balls\",colored(AB['Big Chances Created'].corr(AB['Accurate Long Balls']),'green')) #Pearson Correlation Coef.\nsns.regplot(x=\"Accurate Long Balls\",y=\"Big Chances Created\",data=AB,ax=ax[0][0])\nprint(\"Big Chances created correlation with Crosses \",colored(AB['Big Chances Created'].corr(AB['Crosses']),'green'))\nsns.regplot(x=\"Crosses\",y=\"Big Chances Created\",data=AB,ax=ax[0][1])\nprint(\"Big Chances created correlation with Tackles\",colored(AB['Big Chances Created'].corr(AB['Tackles']),'green')) #Pearson Correlation Coef.\nsns.regplot(x=\"Tackles\",y=\"Big Chances Created\",data=AB,ax=ax[1][0])\nprint(\"Big Chances created correlation with Assists \",colored(AB['Big Chances Created'].corr(AB['Assists']),'green'))\nsns.regplot(x=\"Assists\",y=\"Big Chances Created\",data=AB,ax=ax[1][1])\nplt.show()","ee9b953d":"cm = sns.light_palette(\"blue\", as_cmap=True)\nAB.groupby('Player Name')['Big Chances Created','Crosses','Assists'].sum().sort_values(by='Big Chances Created',ascending = False).head(20).style.background_gradient(cmap=cm)","9fe45404":"#Data Prep\ndfg = df.groupby('Club')['Saves','Wins'].sum().sort_values(by='Wins',ascending=False).head(3)\ncap = ['Saves','Wins'] #club names for legend\n#plotting\nfig = plt.figure(figsize=(12,9))\nx=np.array([1.0,2.0,3.0])\nax = plt.subplot(111)\nax.bar(x-0.1,dfg['Saves'].values ,width=0.2,color='b',align='center')\nax.bar(x+0.1, dfg['Wins'].values,width=0.2,color='r',align='center')\nLABELS = dfg.index\nplt.legend(cap, loc='upper left')\nplt.xticks(x, LABELS)\nplt.ylabel('Total #', color = 'g')\nplt.xlabel(\"Clubs\", color = 'g')\nplt.title(\"Top 3 Clubs (in terms of #Wins)\",color='grey')\nplt.show()\n","bd395490":"sns.boxplot(data=df[['Assists','Crosses','Goals','Passes Per Match','Shots On Target','Tackles',\"Penalties Scored\"]], orient=\"h\", palette=\"Set2\")\nplt.show()","392cbfeb":"#Data Prep - removed all zero and NaN values\ndf['Shooting Accuracy %'] = df['Shooting Accuracy %'].fillna(0)\ndf['Shooting Accuracy %'] = df['Shooting Accuracy %'].astype(int)\ndf['Shots On Target'] = df['Shots On Target'].astype(int)\nSD = df[df['Shooting Accuracy %']!=0]\nSD = SD[SD['Shots On Target']!=0]\n#plotting\nsns.jointplot(x='Shooting Accuracy %',y='Shots On Target',data=SD, color='#6e4e37',xlim=(10,100),kind ='hex', \n              size = 8.0)\nplt.show()","b539a5fa":"#data prep\ntempD = df.dropna(subset=['Tackle Success %'])\ntempD[\"Duels Won\"] = tempD[\"Duels Won\"].fillna(0)\ntempD[\"Recoveries\"] = tempD[\"Recoveries\"].fillna(0)\ntempD[\"Duels Won\"] = tempD[\"Duels Won\"].astype(int)\ntempD[\"Recoveries\"] = tempD[\"Recoveries\"].astype(int)\ntempD['Tackle Success %'] = tempD['Tackle Success %'].astype(int)\n#plotting\nfi = plt.figure(figsize=(12,9))\nprint(\"Tackle is Success, did we win the ball?\")\nplt.subplot(1,2,1)\nplt.plot(tempD[\"Recoveries\"],tempD[\"Tackle Success %\"],'*',color='brown')\nplt.xlabel('Recoveries')\nplt.ylabel('Tackle Success %')\nplt.subplot(1,2,2)\nplt.plot(tempD[\"Duels Won\"],tempD[\"Tackle Success %\"],'*', color='green')\nplt.xlabel('Duels Won')\n\n\nplt.show()","4e757810":"*<font size=4, color='#C5B358'>Let's watch our Favorite Club over a Pint of Beer <\/font>*","291c7744":"*<font size=4, color='#C5B358'>3D Scatter plot of Goals, Passes Per Match and Wins!<\/font>*","faee457a":"<br><\/br>\n*<font size=4, color='#C5B358'>Big Chances, Assists, Crosses and the Players we love!<\/font>*","478061f0":"*<font size=4, color='#C5B358'>Displaying Clubs instead of the Players' Name for above Plot<\/font>* ***(Top 5)***","a580abeb":"*Shots on Target* and *Tackles* seems to be the top two Capabilites that makes you a High Goal Scorer","39a11f86":"*<font size=4, color='#C5B358'>Best Manchester United Players Based on our Analysis (**may not be your choice**)<\/font>*","cf894e57":"*<font size=4, color='#C5B358'>Does Tackles Accuracy helps in winning Duels or Recovering?<\/font>*","6cb44c32":"*<font size=4, color='#C5B358'>Comparing Two Players based on Shooting Accuracy<\/font>*","d8db6ee0":"*Result Inconclusive,* though the range of shooting Accuracy is narrow between ~38 to 46% but the higher the number of Goals doesn't seem to have a strong relationship with number of Goals\n","465da570":"<br><\/br>\n*<font size=4, color='#C5B358'>Every Team loves taking chances, but what creates Big Chances?<\/font>*","4f959336":"*<font size=4, color='#C5B358'>Top 3 Premier League Club- How well the saved the day?<\/font>*","592ef971":"*<font size=4, color='#C5B358'>Top Defensive Clubs<\/font>*","39735dcd":"*<font size=4, color='#C5B358'>Top Aggressive Clubs<\/font>*","f5a7ba20":"*Tackle Success* doesn't seem to have an impact on *Recovery or Duels* winning; rather Duels Won and Recoveries by Players have a nice Normal Distribution. \n<br><\/br><br><\/br>\n\n<br><\/br>\n<font color='red'>Disclaimer:<\/font> The comments  made are personal opinion based on the Analysis and may not be 100% Accurate\n<br><\/br>\n**Thanks for Upvotes,  your Feedback as below will be highly appreciated :)**","447c23b8":"*<font size=4, color='#C5B358'>Some great players based on Goals, Tackles and shots on Target <\/font>* ***(Top 10)***","525f8ad6":"*<font size=4, color='#C5B358'>Does  good Shooting Accuracy leads to more Shots on Target?<\/font>*","0890a254":"*<font size=4, color='#C5B358'>PCA visualization of Top 10 Clubs <\/font>*","e1d17491":"*<font size=4, color='#C5B358'>How Average are Top 10 Clubs based on Goals scored by Players <\/font>*","ef234b3a":"Doesn't seems to be correlated","697bfb84":"^^Here we have the likes of *Wayne Rooney, David Silva*...","db2d59fe":"*<font size=4, color='#C5B358'>Does having a good shooting accuracy means you can score more goals?<\/font>*","07b78d61":"*<font size=4, color='#C5B358'>Top 10 Clubs by Maximum Wins!<\/font>*","45aeb38f":"<br><\/br>\n*<font size=4, color='#C5B358'>Best come-back Clubs!!!<\/font>*","a369ac67":"*<font size=4, color='#C5B358'>Search for a great Player (the likes of Rooney) Continues..<\/font>*","80681e8b":"Well Outliers is the name of Good Soccer, probably becuase we didn't segregate Players based on their role.","cb37466c":"*<font size=4, color='#C5B358'>Box-Plot showcasing Player Capabilities - how average are they?<\/font>*","1aef5f07":"*Hazard and Lukaku* outperform others.*Lukaku* has good number of Goals & Shots on Target while *Hazard* has a pretty good spread of Capabilities! [This Plot can be enhanced for specific roles -> Midfielder, Striker, Defender & Goal Keeper separately. ","a60a9a1c":"*<font size=4, color='#C5B358'>Player SpotLight - How well he Performed?<\/font>*","9a3efb61":"*Assists and Crosses* seems to be highly correlated with Big Chances Created. So, Players good in Assists and Crosses must be the ones who creating Big Chances for their Club! Lets look at them.","b508b50b":"**Goals, Passes and Assists are more correlated to Wins then Shots on Targets, Saves or Penalties Saved! (as shown by above plots). Also Assists correlate more to Wins then does Goals**","c3616228":"While Yellow Cards and Fouls have close to normal distribution. Red Cards are wierdly Multimodial!","b96ccc27":"<br><\/br>\n*<font size=4, color='#C5B358'>If not shooting accuracy what makes a Striker top-notch?<\/font>*","29c9954a":"*<font size=4, color='#C5B358'>Regression Plot to see what ability correlate more with Win!<\/font>*","e65f3cb2":"*<font size=4, color='#C5B358'>How Bad!, can one play?<\/font>*","2d33e253":"**<font size=4, color='#C5B358'>Data used-<\/font> web scraped data of every player playing in the *premier league 2017-2018*** and a private dataset BeerImage for Image mask (wordcloud visualiztion) ","ec5bea1d":"*<font size=4, color='#C5B358'>Can Passes help Goal?<\/font>*","dedfd322":"*<font size=4, color='#C5B358'>Top 10 Clubs by Maximum Goals Scored!<\/font>*","53fb6037":"<font size=4, color='#C5B358'>Preparing & Sanitizing the Data<\/font>","e3787093":"*<font size=4, color='#C5B358'>t-SNE visualization of Top 10 Clubs <\/font>*","70ccca57":"There is hardly any Correlation between *Shooting Accuracy* and *Shots on Target*. *Shooting Accuracy* is normally distributed with maximum *Shots on Target* value with Accuracy around 40%\n<br><\/br>"}}