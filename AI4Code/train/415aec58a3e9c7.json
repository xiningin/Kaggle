{"cell_type":{"2a415e04":"code","f418d163":"code","989525c4":"code","24f24f66":"code","9c0ba779":"code","651b09dc":"code","833cd85d":"code","97bcda20":"code","756c79f7":"code","9c44745c":"code","996d9a77":"code","10ded25b":"code","6f17f082":"code","c7cf7868":"code","5c7cc6cc":"code","f37ccb58":"code","1a2175af":"code","8b6270da":"code","07f6eb9a":"code","7c32ae1f":"code","0c4451a5":"code","019c00b5":"code","9163f316":"markdown","b0e3ffd5":"markdown","dca1eb45":"markdown","0547535c":"markdown","c669da1a":"markdown","4d9fb408":"markdown","72b4103f":"markdown","bd1e8197":"markdown"},"source":{"2a415e04":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","f418d163":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","989525c4":"print('Train contains %d rows and %d columns'%(train.shape[0],train.shape[1]))\nprint('Test contains %d rows and %d columns'%(test.shape[0],test.shape[1]))","24f24f66":"train.head()","9c0ba779":"test.head()","651b09dc":"train_data = train.drop(['label'],axis=1)\ntrain_label = train[['label']]","833cd85d":"train_img = np.array(train_data).reshape(-1,28,28,1)\ntest_img = np.array(test).reshape(-1,28,28,1)","97bcda20":"print(train_img.shape,test_img.shape)","756c79f7":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","9c44745c":"fig, ax = plt.subplots(3,3,figsize = (8,8))\nfor i, j in enumerate(ax.flat):\n    j.imshow(train_img[i][:,:,0], cmap ='binary')\n    j.text(2,2,str(train_label.label[i]),color = 'red')","996d9a77":"from keras.preprocessing import image\nfrom keras.layers.normalization import BatchNormalization","10ded25b":"batch_size = 32\nnp_classes = 10\nnb_epoch = 10\n#Normalize the data\nx_train = train_img.astype('float')\nx_test = test_img.astype('float')\nx_train \/= 255\nx_test \/= 255","6f17f082":"from keras.utils import to_categorical\ny_train = to_categorical(train_label, np_classes)","c7cf7868":"from keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Convolution2D, MaxPooling2D,Conv2D, MaxPool2D","5c7cc6cc":"model = Sequential()\nmodel.add(Conv2D(filters = 32, kernel_size=(3,3), padding='same', input_shape = (28,28,1),activation='relu'))\nmodel.add(Conv2D(filters = 32, kernel_size=(3,3), activation='relu'))\nmodel.add(MaxPool2D(pool_size = (2,2)))\nmodel.add(Dropout(0.4))\n\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(filters=64,kernel_size=(2,2), padding = 'same', activation = 'relu'))\nmodel.add(Conv2D(filters=64, kernel_size=(2,2), padding = 'same', activation = 'relu'))\nmodel.add(MaxPool2D(pool_size = (2,2)))\nmodel.add(Dropout(0.4))\n\nmodel.add(Flatten())\nmodel.add(BatchNormalization())\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(np_classes, activation='softmax'))","f37ccb58":"model.compile(loss='categorical_crossentropy',optimizer='adam',metrics = ['accuracy'])","1a2175af":"model.summary()","8b6270da":"model.fit(x_train, y_train,batch_size = batch_size, epochs = nb_epoch, shuffle = True)","07f6eb9a":"pred = model.predict_classes(x_test).reshape(-1).astype(np.int8)","7c32ae1f":"submis = pd.read_csv('..\/input\/sample_submission.csv')","0c4451a5":"submis['Label'] = pred","019c00b5":"submis.to_csv('digit_recog_v1.csv', index=False)","9163f316":"### Let's look at the shape and few example records","b0e3ffd5":"### Load the datasets ","dca1eb45":"### Data Augmentation","0547535c":"### Convert the label to categorical","c669da1a":"### Let's print few images and check ","4d9fb408":"### Seperate the label column ","72b4103f":"### Training a CNN model","bd1e8197":"### From the columns, it looks like the images are 28*28 pixels. Lets convert the data to numpy array and reshape the data"}}