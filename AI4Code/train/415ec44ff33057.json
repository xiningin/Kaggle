{"cell_type":{"dc42ecab":"code","be347b68":"code","668d3dac":"code","df3b1b17":"code","4be0a892":"code","bafdba8a":"code","6f15956b":"code","ec355a93":"code","1f6d13b6":"code","c3536e40":"code","ab2a1dd1":"markdown","710e5bd2":"markdown","55d43c8b":"markdown","63ac7002":"markdown","b2ed5d2a":"markdown"},"source":{"dc42ecab":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.neighbors import LocalOutlierFactor\n\nfrom scipy.stats import norm\nimport scipy.stats as st\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","be347b68":"df = pd.read_csv(\"\/kaggle\/input\/learnplatform-covid19-impact-on-digital-learning\/engagement_data\/5802.csv\", low_memory=False)\nprint(df.shape)\ndf.head().style.set_properties(**{'background-color':'black',\n                                     'color': '#03e8fc'})","668d3dac":"df.isnull().sum()","df3b1b17":"cont_FEATURES = ['pct_access', 'engagement_index', 'lp_id']\n\ncat_FEATURES = ['time' ]","4be0a892":"#Code by Tom C  https:\/\/www.kaggle.com\/tjcdev\/tps-outliers-hidden-features-baseline\/notebook\n\ndef plot_outliers(df, feature, threshold=5):\n    mean, std = np.mean(df), np.std(df)\n    z_score = np.abs((df-mean) \/ std)\n    good = z_score < threshold\n\n    print(f\"Rejection {(~good).sum()} points\")\n    visual_scatter = np.random.normal(size=df.size)\n    plt.scatter(df[good], visual_scatter[good], s=2, label=\"Good\", color=\"#4CAF50\")\n    plt.scatter(df[~good], visual_scatter[~good], s=8, label=\"Bad\", color=\"#F44336\")\n    plt.legend(loc='upper right')\n    plt.title(feature)\n    plt.show();\n    \n    return good\n\ndef plot_lof_outliers(df, feature):\n    lof = LocalOutlierFactor(n_neighbors=20, contamination=0.001, p=1)\n    good = lof.fit_predict(df) > 0.5 # change this value to set the threshold for outliers\n    print(f\"Rejection {(~good).sum()} points\")\n    \n    visual_scatter = np.random.normal(size=df.size)\n    plt.scatter(df[good], visual_scatter[good], s=2, label=\"Good\", color=\"#4CAF50\")\n    plt.scatter(df[~good], visual_scatter[~good], s=8, label=\"Bad\", color=\"#F44336\")\n    plt.legend(loc='upper right')\n    plt.title(feature)\n    plt.show();\n    \n    return good","bafdba8a":"#Code by Tom C  https:\/\/www.kaggle.com\/tjcdev\/tps-outliers-hidden-features-baseline\/notebook\n\nfor feature in cont_FEATURES:\n    print(feature)\n    plot_outliers(df[feature], feature)","6f15956b":"#Code by Tom C  https:\/\/www.kaggle.com\/tjcdev\/tps-outliers-hidden-features-baseline\/notebook\n\nfor feature in cont_FEATURES:\n    # There some reshaping done here for syntax sake\n    data = df[~df[feature].isna()][feature]\n    plot_lof_outliers(data.values.reshape(data.shape[0], -1), feature)","ec355a93":"#Code by Tom C  https:\/\/www.kaggle.com\/tjcdev\/tps-outliers-hidden-features-baseline\/notebook\n\nfor feature in cont_FEATURES:\n    sns.violinplot(x='lp_id', y=feature, data=df, inner='quartile');\n    plt.title(feature)\n    plt.show()","1f6d13b6":"#Code by Tom C  https:\/\/www.kaggle.com\/tjcdev\/tps-outliers-hidden-features-baseline\/notebook\n\nfor feature in cat_FEATURES:\n    sns.histplot(df[feature].values)\n    plt.show()","c3536e40":"#Code by Tom C  https:\/\/www.kaggle.com\/tjcdev\/tps-outliers-hidden-features-baseline\/notebook\n\ndef plot_cdf(df, feature):\n    ps = 100 * st.norm.cdf(np.linspace(-4, 4, 10)) # The last number in this tuple is the number of percentiles\n    x_p = np.percentile(df, ps)\n\n    xs = np.sort(df)\n    ys = np.linspace(0, 1, len(df))\n\n    plt.plot(xs, ys * 100, label=\"ECDF\")\n    plt.plot(x_p, ps, label=\"Percentiles\", marker=\".\", ms=10)\n    plt.legend()\n    plt.ylabel(\"Percentile\")\n    plt.title(feature)\n    plt.show();\n\nfor feature in cont_FEATURES:\n    plot_cdf(df[feature], feature)","ab2a1dd1":"#It was supposed to be violins. Probably, works better in survived Titanic.","710e5bd2":"#That's all for now with Outliers plots.","55d43c8b":"<h1><span class=\"label label-default\" style=\"background-color:black;border-radius:100px 100px; font-weight: bold; font-family:Garamond; font-size:20px; color:#03e8fc; padding:10px\">Outliers<\/span><\/h1><br>\n\nI included the integer in cont_features to have more charts.","63ac7002":"<h1><span class=\"label label-default\" style=\"background-color:black;border-radius:100px 100px; font-weight: bold; font-family:Garamond; font-size:20px; color:#03e8fc; padding:10px\">Feature Outliers<\/span><\/h1><br>","b2ed5d2a":"<h1><span class=\"label label-default\" style=\"background-color:black;border-radius:100px 100px; font-weight: bold; font-family:Garamond; font-size:20px; color:#03e8fc; padding:10px\">Empirical CDFs<\/span><\/h1><br>"}}