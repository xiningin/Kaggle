{"cell_type":{"34c50973":"code","6142c0b4":"code","6c188c5c":"code","bd717d01":"code","44e1e324":"code","01f365e1":"code","41ba4a4d":"code","b4158dd0":"code","7a6bf0a6":"markdown"},"source":{"34c50973":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6142c0b4":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold\nfrom tensorflow import keras\nfrom tensorflow.keras import layers","6c188c5c":"train = pd.read_csv('..\/input\/tabular-playground-series-jan-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-jan-2021\/test.csv')\n\nnumerical_cols = [f'cont{i}' for i in range(1, 15)]\ntarget_col = 'target'\n\nfor c in numerical_cols:\n    prep = StandardScaler()\n    train[c] = prep.fit_transform(train[[c]])\n    test[c] = prep.transform(test[[c]])\n\nX_train = train.drop(['id', 'target'], axis=1)\ny_train = train['target']\nX_test = test.drop('id', axis=1)","bd717d01":"X_train.head(2)","44e1e324":"X_test.head(2)","01f365e1":"cv = KFold(n_splits=5, shuffle=True, random_state=7)\n\ny_preds = []\nmodels = []\noof_train = np.zeros((len(X_train),))\n\nfor fold_id, (train_index, valid_index) in enumerate(cv.split(X_train, y_train)):\n    X_tr = X_train.loc[train_index, :]\n    X_val = X_train.loc[valid_index, :]\n    y_tr = y_train.loc[train_index]\n    y_val = y_train.loc[valid_index]\n\n    model = keras.Sequential([\n#         layers.BatchNormalization(),\n#         layers.Dropout(0.1),\n        layers.Dense(4096, activation='relu'),\n        layers.Reshape((256, 16)),\n#         layers.BatchNormalization(),\n#         layers.Dropout(0.1),\n        layers.Conv1D(filters=16, kernel_size=5, strides=1, activation='relu'),\n        layers.MaxPooling1D(pool_size=2),\n        layers.Flatten(),\n        layers.Dense(16, activation='relu'),\n        layers.Dense(1, activation='linear'),\n    ])\n\n    model.compile(\n        optimizer='adam',\n        loss='mse',\n        metrics=[keras.metrics.RootMeanSquaredError()]\n    )\n\n    early_stopping = keras.callbacks.EarlyStopping(\n        patience=10,\n        min_delta=0.001,\n        restore_best_weights=True,\n    )\n\n    model.fit(\n        X_tr, y_tr,\n        validation_data=(X_val, y_val),\n        batch_size=30000,\n        epochs=1000,\n        callbacks=[early_stopping],\n    )\n\n    oof_train[valid_index] = model.predict(X_val).reshape(1, -1)[0]\n    y_pred = model.predict(X_test).reshape(1, -1)[0]\n\n    y_preds.append(y_pred)\n    models.append(model)","41ba4a4d":"print(f'CV: {mean_squared_error(y_train, oof_train, squared=False)}')","b4158dd0":"sub = pd.read_csv('..\/input\/tabular-playground-series-jan-2021\/sample_submission.csv')\ny_sub = sum(y_preds) \/ len(y_preds)\nsub['target'] = y_sub\nsub.to_csv('submission.csv', index=False)\nsub.head()","7a6bf0a6":"This notebook is inspired by the [2nd place solution of Mechanisms of Action (MoA) Prediction](https:\/\/www.kaggle.com\/c\/lish-moa\/discussion\/202256)."}}