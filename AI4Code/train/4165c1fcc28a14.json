{"cell_type":{"a6ce7de9":"code","54877bd7":"code","e0850f81":"code","bb3b7a48":"code","23a87a9b":"code","5f375652":"code","fa79c642":"code","9ed866ab":"code","5e5f9b4c":"code","c82e4d40":"code","4ea4209a":"code","930e6844":"code","0d176b3c":"code","3ef52e3b":"code","a973798e":"code","6cfd5f21":"code","b7234fe4":"code","ee86b5f8":"code","2d973cc9":"code","f1628355":"code","5e9f4042":"code","a2cb2414":"code","128a95b8":"markdown","f5295d6b":"markdown","b068d72d":"markdown","39c2f1b5":"markdown","48133f55":"markdown","2695e403":"markdown","7b6aab6a":"markdown"},"source":{"a6ce7de9":"%%bash -e\nif ! [[ -f .\/xyz2mol.py ]]; then\n  wget https:\/\/raw.githubusercontent.com\/jensengroup\/xyz2mol\/master\/xyz2mol.py\nfi","54877bd7":"!pip install py3Dmol\n!pip install -U chembl_webresource_client\nimport sys\n!conda install --yes --prefix {sys.prefix} -c rdkit rdkit","e0850f81":"import glob\nimport json\nimport pandas as pd\nimport pickle\nimport spacy\nfrom spacy import displacy\nfrom spacy.matcher import Matcher\nfrom tqdm import tqdm\nimport en_ner_bc5cdr_md\nimport os\nfrom collections import Counter\nimport matplotlib.pyplot as plt\nfrom chembl_webresource_client.new_client import new_client\nimport rdkit\nfrom rdkit import Chem\nfrom rdkit.Chem import Draw\nimport py3Dmol # Amazing library for 3D visualization\nfrom rdkit import Chem\nfrom rdkit.Chem import AllChem\nfrom ipywidgets import interact, interactive, fixed\nfrom IPython.display import Image\nimport cv2\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom sklearn import decomposition\nfrom sklearn import datasets\nfrom sklearn.cluster import KMeans\nimport gc","bb3b7a48":"def doi_to_df(doi):\n    if isinstance(doi,float):\n        return None\n    elif doi.startswith('http'):\n        return str(doi)\n    elif doi.startswith('doi'):\n        return 'https:\/\/'+str(doi)\n    else:\n        return 'https:\/\/doi.org\/'+str(doi)","23a87a9b":"df_meta = pd.read_csv('..\/input\/CORD-19-research-challenge\/metadata.csv')\ndf_meta['url'] = df_meta.doi.apply(doi_to_df)\ndf_meta.head(3)","5f375652":"df=df_meta\ndf['abstract'].replace({\"Unknown\":np.nan},inplace=True)\ndf=df.dropna(subset=['abstract'])\ndf=df[['title','abstract']].copy()\ndf.reset_index(drop=True,inplace=True)\ndf.describe()","fa79c642":"covid19_terms = {\n    '2019-nCoV',\n    '2019-nCoV.',\n    '2019 ncov',\n    '2019 n cov',\n    '2019n cov',\n    '2019ncov',\n    '2019-novel Coronavirus',\n    'coronavirus 2',\n    'coronavirus 2019',\n    'covid',\n    'COVID-19',\n    'COVID19',\n    'n cov 2019',\n    'ncov 2019',\n    'wuhan pneumonia',\n    'wuhan virus',\n    'wuhan coronavirus'\n    }","9ed866ab":"def has_covid19(text):\n    for name in covid19_terms:\n        if text and name.lower() in text.lower():\n            return True\n    return False","5e5f9b4c":"df['title_has_covid19']=df.title.apply(has_covid19)\ndfTitle=df['title_has_covid19']\n\ndf['abstract_has_covid19']=df.abstract.apply(has_covid19)\ndfAbstract=df['abstract_has_covid19']","c82e4d40":"df_covid19=df[dfTitle | dfAbstract]\nprint(df_covid19.shape)","4ea4209a":"nlp=en_ner_bc5cdr_md.load()","930e6844":"example_text=\"\"\"\nAbstract Coronavirus 229E was grown to high titers in diploid fibroblast \ncells under medium containing twice the normal concentrations of amino acids \nand vitamins. Growth curves showed maximum virus production at multiplicities \nof infection of 0.1 and 1; maximum titers of intracellular virus occurred at \n22\u201324 hr and of extracellular virus at 26 hr postadsorption. Tube infectivity \ntiters ranged from 109.0\u2013109.5 TCID50\/ml and plaque titers from 1010.2\u20131010.9 \ny PFU\/ml at the time of peak virus production, when no cytopathology was \nevident. Virus titer dropped rapidly between 26 and 56 hr, coincident with \nincreasing cytopathology. A single precipitin band was observed in \nimmunodiffusion and immunoelectrophoresis between concentrated virus \npreparations and antiserum to purified 229E. Neuraminidase and hemagglutinin \nassays were negative. Virus was purified by two procedures: adsorption to and \nelution from human \u201c0\u201d erythrocytes and CaHPO4 gel followed by equilibrium \nsucrose gradient centrifugation, and PEG precipitation followed by equilibrium \nglycerol\/tartrate gradients and rate zonal sucrose or glycerol\/tartrate \ngradients. Final lots of purified virus containing <0.02% of the crude tissue \nculture proteins had absorption maxima at 256 nm and minima at 241.2 nm and a \nmean extinction coefficient of E 1cm 1% = 54.3 at 256 nm. The fully corrected \nsedimentation coefficient for the intact virion was S 20,v 0 = 381 S. PAGE by \ndifferent techniques revealed seven polypeptides of mean apparent molecular \nweights between 16,900 and 196,100. Six contained carbohydrate and one \ncontained lipid. Electropherograms of 3H- and 14C-labeled virus were identical \nto those of stained gels. Two glycoproteins constituting 25% of the virion \nprotein were identified by bromelin digestion as the spike proteins. The \ndensity in sucrose and in potassium tartrate was 1.18 g\/ml for the virion and \n1.15 g\/ml for the \u201cdespiked\u201d particle.\n\"\"\"","0d176b3c":"doc=nlp(example_text)","3ef52e3b":"colors={\n        'CHEMICAL': 'lightpink',\n        'DISEASE': 'lightorange',\n}\ndisplacy.render(doc, style='ent', options={\n    'colors': colors\n})","a973798e":"def apply_spacy(texts, nlp):\n    docs = []\n    for t in texts:\n        if t:\n            docs.append(nlp(t))\n        else:\n            docs.append(None)\n    return docs","6cfd5f21":"def annotate_with_spacy(df):\n    df['title_doc'] = apply_spacy(df.title, nlp)\n    df['abstract_doc'] = apply_spacy(df.abstract, nlp)\n    return df\n\ndef get_spacy_df(df):\n    try:\n        with open('df_spacy_cache.pickle', 'rb') as f:\n            df_spacy = pickle.load(f)\n    except FileNotFoundError:\n        df_spacy = annotate_with_spacy(df)\n        with open('df_spacy_cache.pickle', 'wb') as f:\n            pickle.dump(df_spacy, f)\n    return df_spacy","b7234fe4":"df_spacy = get_spacy_df(df_covid19)\ndf_spacy.iloc[0].abstract_doc.ents","ee86b5f8":"trial_indicators = {\n    'trial',\n    'study',\n    'experiment',\n    'evaluate',\n    'evaluation',\n    're-evaluate',\n    'report',\n    'test',\n    'testing',\n    'target',\n    'data',\n    'show',\n    'outcome',\n    'evaluation',\n    'find',\n    'agent',\n    \n       \n}\n\nusage_indicators = {\n    'approve',\n    'approval',\n    'therapeutic',\n    'therapy',\n    'inhibitory',\n    'effect',\n    'administer',\n    'achieve',\n    'improve'\n    'alleviate',\n    'reduce',\n    'antiviral',\n    'against',\n    'suppress',\n    'beneficial',\n    'evidence',\n    'take',\n\t'prescribe',\n\t'treatment',\n\t'receive',\n\t'treat',\n\t'regimen',\n\t'therapy',\n\t'use',\n\t'efficacy',\n\t'course',\n\t'drug',\n}\n\nidea_indicators = {\n    'promising',\n    'promise',\n    'speculate',\n    'believe',\n    'would',\n    'could',\n    'may',\n    'possibly',\n    'might',\n    'should',\n    'hypothesize',\n    'appear',\n    'lack',\n    'unclear',\n    'need',\n} \n\nmatcher = Matcher(nlp.vocab)\nfor n in trial_indicators:\n    matcher.add(\"trial\", None, [{'LEMMA': w.lemma_} for w in nlp(n)])\nfor n in usage_indicators:\n    matcher.add(\"usage\", None, [{'LEMMA': w.lemma_} for w in nlp(n)])\nfor n in idea_indicators:\n    matcher.add(\"idea\", None, [{'LEMMA': w.lemma_} for w in nlp(n)])\n\nexample_sent = \"Clinical trials (for example, ChiCTR2000029539) have been initiated to test HIV protease inhibitors such as lopinavir and ritonavir in patients infected with 2019-nCoV.\"\ndoc = nlp(example_sent)\nmatches = matcher(doc)\nfor match_name, start, end in matches:\n    print(nlp.vocab.strings[match_name], ':', doc[start:end])","2d973cc9":"def doc_to_matches(doc):\n    match_results = {\n        'trial': [],\n        'usage': [],\n        'idea': []\n    }\n    if not doc:\n        return match_results\n\n    matches = matcher(doc)\n    for match_id, start, end in matches:\n        match_name = nlp.vocab.strings[match_id]\n        match_results[match_name].append((start, end))\n    return match_results\n\ndef get_matches_df(docs):\n    matches = []\n    for doc in docs:\n        matches.append(doc_to_matches(doc))\n    df = pd.DataFrame(matches)\n    return df\n        \ndf_matches = get_matches_df(df_spacy.abstract_doc)\ndf_matches.columns = ['abstract_trial_matches', 'abstract_usage_matches', 'abstract_idea_matches']\ndf_with_matches = pd.concat([df_spacy.reset_index(drop=True), df_matches], axis=1)\ndf_with_matches.head(3)","f1628355":"# df_covid19 = df_with_matches[df_with_matches.abstract_has_covid19]\nprint('Example abstracts', df_with_matches.shape)\nfor i, row in list(df_with_matches.iterrows())[:5]:\n    print('TITLE:', row.title)\n    print('\\n')\n    print(row.abstract)\n    print('\\n', '-' * 50, '\\n')","5e9f4042":"BLACKLIST = {\n 'ACE2s',\n '2019-nCoV',\n '95%CI',\n 'ACE2-Fc',\n 'AMB',\n 'AMI',\n 'AMK',\n 'AOM',\n 'AST-045',\n 'AST-N041',\n 'ATP',\n 'BPO3-P',\n 'Betacoronavirus',\n 'CAP',\n 'CAZ',\n 'CC',\n 'CIP',\n 'CP',\n 'CLAVE',\n 'COVID-2019',\n 'CR3022',\n 'creatinine', \n 'CTX',\n 'CTX-M',\n 'CoV-2',\n 'DES',\n 'DHPG',\n 'DIP',\n 'E2',\n 'ESBL',\n 'Enterobacteriaceae',\n 'FASTA',\n 'FCA',\n 'FCS',\n 'FOS',\n 'GEN',\n 'GM',\n 'HK',\n 'HPDI',\n 'IFR',\n 'IM',\n 'IVA',\n 'JA',\n 'KLK13',\n 'LA',\n 'LPV\/r',\n 'LYM%',\n 'La',\n 'LcS',\n 'Li',\n 'MERS-CoV.',\n 'MICs',\n 'Metapneumovirus',\n 'M\u00e9decine',\n 'NAL',\n 'NCP',\n 'NG',\n 'NLR',\n 'NO',\n 'NOR',\n 'NP',\n 'NS7b',\n 'OC',\n 'OFL',\n 'OP',\n 'Prefixes',\n 'R\u00e9sum\u00e9',\n 'S.',\n 'SARS-CoV-2',\n 'SARS-COV-2',\n 'SARS-Cov2',\n 'SARS-CoV2',\n 'SARS-CoV-2 infection',\n 'SARS-CoV-2 infections',\n 'SARS-CoV-2 pneumonia',\n 'SARS-CoV.',\n 'SARS-Cov-2',\n 'SARS-related',\n 'SGC7901',\n 'SHV',\n 'SP',\n 'Sarbecovirus',\n 'Se',\n 'TCM',\n 'TCR',\n 'TCB',\n 'TGEV',\n 'TOB',\n 'TSL-EO',\n 'Texte',\n 'VME',\n 'VP',\n 'WeChat',\n 'ZJ01',\n '[ST]A',\n 'alcohol',\n 'amino acid',\n 'amino acids',\n 'aminoglycosides',\n 'bat-SL-CoVZXC21',\n 'betacoronavirus',\n 'cholesterol',\n 'coronavirus',\n 'des cas',\n 'https:\/\/doi.org\/10',\n 'infector-infectee',\n \"l'origine\",\n 'lactate',\n 'lockdowns',\n 'na',\n 'nucleic acid',\n 'nucleic acids',\n 'nucleotide',\n 'NBCZone',\n 'oxygen',\n 'quinolones',\n 'rinitis',\n 'self-imposed',\n 'sodium',\n 'smoking',\n '\u03b2-coronavirus',\n '\u2103'}\n\n\ndef count_chemical_ents(df):\n    ent_str = []\n    for i, row in df.iterrows():\n        if row.abstract_doc:            \n            for ent in row.abstract_doc.ents:\n                if ent.label_ == 'CHEMICAL':\n                    ent_str.append(row.abstract_doc[ent.start:ent.end].text)\n            \n    filtered = [e for e in Counter(ent_str).most_common() if e[1] > 8 and e[0] not in BLACKLIST]\n    return dict(filtered)\n\ncounts = count_chemical_ents(df_with_matches)\nprint('Count Frequencies\\n')\nprint(counts)\n\nplt.figure(figsize=(20,20))\nplt.rc('xtick', labelsize=20) \nplt.rc('ytick', labelsize=20) \nplt.xticks(rotation=90)\nplt.title('Frequency of CHEMICAL-type Strings in Abstracts', fontsize=20)\nplt.bar(counts.keys(), counts.values())","a2cb2414":"def doc_id_to_link(doc_id, df_meta, df_data):\n    rows = df_meta[df_meta.sha == doc_id]\n    if rows.empty:\n        return 'UNKNOWN URL AND TITLE'\n    url = rows.iloc[0].url\n    title = rows.iloc[0].title\n    if url and title:\n        return '<a href=\"{}\">'.format(url) + title + '<\/a>'\n    elif title:\n        return title\n    elif url:\n        return '<a href=\"{}\">'.format(url) + 'UNKNOWN TITLE' + '<\/a>'\n    else:\n        return 'UNKNOWN URL AND TITLE'\n\ndef chemical_df(chemicals, df_data, df_meta):\n    rows = []    \n    for chem in chemicals:\n        chem_row = {\n            'chemical_name': chem,\n            'chemical': [],\n            'trials': [],\n            'usages': [],\n            'ideas': []\n        }\n        matcher = Matcher(nlp.vocab)\n        matcher.add(\"query\", None, [{'LEMMA': w.lemma_} for w in nlp(chem)])\n        for i, row in df_data.iterrows():\n            chem_matches = matcher(row.abstract_doc)\n            for chem_match in chem_matches:\n                chem_row['chemical'].append((row.doc_id, chem_match[1], chem_match[2]))\n                for trial_match in row.abstract_trial_matches:\n                    if abs(trial_match[1] - chem_match[1]) < 15:\n                        chem_row['trials'].append((row.doc_id, trial_match[0], trial_match[1]))\n                for usage_match in row.abstract_usage_matches:\n                    if abs(usage_match[1] - chem_match[1]) < 15:\n                        chem_row['usages'].append((row.doc_id, usage_match[0], usage_match[1]))\n                for idea_match in row.abstract_idea_matches:\n                    if abs(idea_match[1] - chem_match[1]) < 15:\n                        chem_row['ideas'].append((row.doc_id, idea_match[0], idea_match[1]))\n        rows.append(chem_row)\n    return pd.DataFrame(rows)\n        \n    \ndf_chemical = chemical_df(list(counts.keys()), df_with_matches, df_meta)\ndf_chemical.head(3)","128a95b8":"**This notebook utilizes data from the COVID-19 Open Research Dataset Challenge (CORD-19) to answer the question: What do we know about vaccines and therapeutics?**\n\n**Methods:\nNLP, text mining ([spaCy](https:\/\/allenai.github.io\/scispacy\/)), dataframe processing and visualization resources. **","f5295d6b":"**Match relevant tokens, e.g. COVID-19, trial and usage indicators**\n","b068d72d":"**Apply Scispacy Model**\nUsing Scispacy's en_ner_bc5cdr_md. \nIt provides only two NER classes: \nDISEASE and CHEMICAL. The latter likely carries drugs and therapeutics.","39c2f1b5":"**Load Metadata**","48133f55":"# Organise matches by Drugs\/Therapeutics\n\nAbove, we compiled a list of drugs\/therapeutics that are relevant in the context of COVID-19. Now, we can dive deeper into the contexts these drugs appear in.\n\nTo this end, we match words that indicate the context of the drug mention:\n\ndrug is in an idea stage (e.g. 'darunavir could be useful against COVID-19')\ndrug is in a trial stage (e.g. 'lopinavir is currently being trialled')\ndrug is in usage stage (e.g. 'patients are being treated with ritonavir')\nThese 'indicator' words are marked as additional entities in context.","2695e403":"# Load and Preprocess Data","7b6aab6a":"# Extract all drugs and therapeutics from abstracts\u00b6\nDrop all chemicals that appear less than N times in the whole dataset. In the remaining, blacklist all false positives after manual inspection. Plot the remaining chemicals by occurrence frequency."}}