{"cell_type":{"ecce8f5c":"code","660eaa4a":"code","85ea0977":"code","128a4c7d":"code","c415c865":"code","a769e0e6":"code","ec1e6e55":"code","02de5edf":"code","e3ad4db7":"code","a22ef9d4":"code","c997bb13":"code","aa52310a":"code","f61c3924":"code","8089e20f":"code","98347959":"code","b239b17b":"code","43ba4f1c":"code","43f22206":"code","d369a590":"code","88f57e49":"code","7ee9d4ec":"code","fb9cee78":"code","b4b9a555":"code","a6fe0889":"code","3e7f1c50":"code","2880a15e":"code","688a8e1e":"code","3f62c2ed":"code","c6198ddb":"code","3ab0afb0":"code","6a634cb6":"code","7ef96306":"code","059df708":"code","64fefc4b":"code","7c30ef06":"markdown"},"source":{"ecce8f5c":"#K\u00fct\u00fcphanelerin yuklenmesi\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.linear_model import LogisticRegression  \nfrom sklearn.neighbors import KNeighborsClassifier  \nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier \nfrom sklearn.ensemble import RandomForestClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import preprocessing\nfrom sklearn.metrics import accuracy_score\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score, GridSearchCV\nfrom scipy.stats import shapiro\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n%config InlineBackend.figure_format = 'retina'\n","660eaa4a":"#verinin yuklenmesi\ndf = pd.read_csv(\"..\/input\/kredi-riski\/credit_risk kopyas.csv\", index_col=0)\ndf.head()","85ea0977":"df.Age.min()","128a4c7d":"#ilk 5 gozlem\ndf.head()\n\n#son 5 gozlem\ndf.tail()\n\n#verinin olculeri\ndf.shape\n\n#veri hakk\u0131ndak\u0131 bilgiler\ndf.info()\n\n#veride bulunan degiskenlerin isimleri\ndf.columns\n\n#verinin betimsel istatisti\u011fi\ndf.describe().T\n\n#Eksik degerin sorgulanmas\u0131(Saving accounts ve Checking account  degiskenlerinde eksik degerler bul\u0131unmaktad\u0131r.)\ndf.isnull().values.any()\ndf.isnull().sum()\n","c415c865":"#yeni degiskenler turetilmesi\ndf[\"faiz_yuzdesi\"] = (df.Duration * 1.25) \/ 100\ndf[\"toplam_borc\"] =(df[\"Credit amount\"]) + (df[\"Credit amount\"] * df[\"faiz_yuzdesi\"])\ndf[\"faiz_tutari\"] = (df[\"toplam_borc\"] - df[\"Credit amount\"])\ndf[\"yas_sure\"] = (df.Age * 12) + (df.Duration)\ndf[\"ust_yas\"] = (85 * 12) - (df[\"yas_sure\"])\ndf[\"c_d\"] = (df[\"Credit amount\"] * df[\"Duration\"])\n#df[\"c_d_faiz_tutari\"] = (df[\"c_d\"] * df[\"faiz_tutari\"] )\ndf[\"d_a\"] = (df[\"Credit amount\"] * df[\"Age\"])\ndf.loc[df[\"Job\"] == 0 , \"Job\" ] = 1\ndf.loc[df[\"Saving accounts\"] == \"quite rich\" , \"Saving accounts\" ] = \"rich\"\n\ndf.head(10)","a769e0e6":"#Eksik degerlerin mode ile doldurulmas\u0131\ndf[\"Saving accounts\"].fillna(df['Saving accounts'].mode()[0], inplace=True)\ndf[\"Checking account\"].fillna(df['Checking account'].mode()[0], inplace=True)","ec1e6e55":"#tum say\u0131sal degiskenlerde ayk\u0131r\u0131 deger mevcut\ndef outlier_thresholds(dataframe, variable):\n    quartile1 = dataframe[variable].quantile(0.25)\n    quartile3 = dataframe[variable].quantile(0.75)\n    interquantile_range = quartile3 - quartile1\n    up_limit = quartile3 + 1.5 * interquantile_range\n    low_limit = quartile1 - 1.5 * interquantile_range\n    return low_limit, up_limit\n\n\noutlier_thresholds(df, \"Age\")","02de5edf":"#Ayk\u0131r\u0131 deger var m\u0131 onu sorguluyoruz.\ndef has_outliers(dataframe, num_col_names, plot=False):\n    variable_names = []\n\n    for col in num_col_names:\n        low_limit, up_limit = outlier_thresholds(dataframe, col)\n\n        if dataframe[(dataframe[col] > up_limit) | (dataframe[col] < low_limit)].any(axis=None):\n            number_of_outliers = dataframe[(dataframe[col] > up_limit) | (dataframe[col] < low_limit)].shape[0]\n\n            print(col, \":\", number_of_outliers)\n            variable_names.append(col)\n\n            if plot:\n                sns.boxplot(x=dataframe[col])\n                plt.show()\n\n    return variable_names\n\n\n\n\nhas_outliers(df, [\"Age\",\"Credit amount\",\"Duration\"], plot=True)","e3ad4db7":"#Ayk\u0131r\u0131 degerler\u0131n alt ve ust degerlerinin tespiti.\ndef outlier_thresholds(dataframe, variable):\n    quartile1 = dataframe[variable].quantile(0.05)\n    quartile3 = dataframe[variable].quantile(0.95)\n    interquantile_range = quartile3 - quartile1\n    up_limit = quartile3 + 1.5 * interquantile_range\n    low_limit = quartile1 - 1.5 * interquantile_range\n    return low_limit, up_limit\n\n#Bask\u0131lama islemi.\n\ndef replace_with_thresholds(dataframe, variable):\n    low_limit, up_limit = outlier_thresholds(dataframe, variable)\n    dataframe.loc[(dataframe[variable] < low_limit), variable] = low_limit\n    dataframe.loc[(dataframe[variable] > up_limit), variable] = up_limit\n\n\n\n#Bask\u0131lama fonksiyonunun uygulanmas\u0131\n\na = [\"Age\" , \"Credit amount\" ,\"faiz_yuzdesi\",\"toplam_borc\",\"faiz_tutari\",\"yas_sure\",\"ust_yas\"]\nfor i in a:\n    replace_with_thresholds(df, i)","a22ef9d4":"#Normallik testinin yap\u0131lmas\u0131(Degiskenler normallik varsay\u0131m\u0131n\u0131 saglam\u0131yor.)\nfor i in [\"Age\" , \"Credit amount\" ,\"faiz_yuzdesi\",\"toplam_borc\",\"faiz_tutari\",\"yas_sure\",\"ust_yas\"]:\n    \n    p = shapiro(df[i])\n    print(p)\n    if p[1] < 0.05:\n        print(i, \"nin pvalue degeri 0.05'den kucuk oldugu icin H0 reddedilir.Yani normallik saglanm\u0131yor.\" )\n        \n    else:\n        print(i, \"nin pvalue degeri 0.05'den buyuk oldugu icin H0 reddedilemez.Yani normallik saglan\u0131yor.\" )\n        \n    \n    \n    \n    \n    ","c997bb13":"#veri setinin uzunlugu\nlen(df)","aa52310a":"#bos deger sorgulama\ndf.isnull().sum()","f61c3924":"# Kategorik degiskenlerin, Credit amount degiskenine gore  gorsellestirilmesi\ncat = [\"Job\",\"Housing\",\"Purpose\",\"Risk\",\"Saving accounts\",\"Sex\",\"Checking account\"]\nfor i in cat:\n    fig, ax = plt.subplots(figsize=(10,10)) \n    sns.barplot(x= i, y=\"Credit amount\", data=df)\n    plt.xticks( rotation = '65')\n    plt.show()","8089e20f":"#Kategorik degiskenlerin, Age degiskenine gore  gorsellestirilmesi\nfor i in cat:\n    fig, ax = plt.subplots(figsize=(10,10)) \n    sns.barplot(x= i, y=\"Age\", data=df)\n    plt.xticks( rotation = '65')\n    plt.show()","98347959":"#Kategorik degiskenlerin, Duration degiskenine gore  gorsellestirilmesi\nfor i in cat:\n    fig, ax = plt.subplots(figsize=(10,10))\n    sns.barplot(x= i, y=\"Duration\", data=df)\n    plt.xticks( rotation = '65')\n    plt.show()","b239b17b":"#Kategorik degiskenlerin, toplam_borc degiskenine gore  gorsellestirilmesi\nfor i in cat:\n    fig, ax = plt.subplots(figsize=(10,10)) \n    sns.barplot(x= i, y=\"toplam_borc\", data=df)\n    plt.xticks( rotation = '65')\n    plt.show()","43ba4f1c":"#Age degiskeninin Risk baz\u0131nda degerlendirilmesi\nsns.catplot(x =\"Risk\" , y=\"Age\" ,data = df , kind=\"violin\")\nplt.show()","43f22206":"#Duration degiskeninin Risk baz\u0131nda degerlendirilmesi\nsns.catplot(x =\"Risk\" , y=\"Duration\" ,data = df , kind=\"violin\")\nplt.show()","d369a590":"#Credit amount degiskeninin Risk baz\u0131nda degerlendirilmesi\nsns.catplot(x =\"Risk\" , y=\"Credit amount\" ,data = df , kind=\"violin\")\nplt.show()","88f57e49":"#Bask\u0131lama islemi\ndf.loc[df[\"Credit amount\"] > 10000 ,\"Credit amount\"] = 10000\n#df.loc[(df[\"Duration\"] > 55) & (df.Risk == \"good\") ,\"Duration\"] = 55","7ee9d4ec":"#eksik degerlerin sorgulanmas\u0131\ndf.isnull().sum()","fb9cee78":"# Kac kategorik de\u011fi\u015fken var ve isimleri neler?\ncat_cols = [col for col in df.columns if df[col].dtypes == 'O' and len(df[col].unique()) < 10]\nprint('Kategorik De\u011fi\u015fken Say\u0131s\u0131: ', len(cat_cols))\nprint(cat_cols)\n\nmore_cat_cols = [col for col in df.columns if len(df[col].unique()) < 10]\nprint('Kategorik De\u011fi\u015fken Say\u0131s\u0131: ', len(more_cat_cols))\nprint(more_cat_cols)","b4b9a555":"# Hangi kategorik de\u011fi\u015fkenin ka\u00e7 s\u0131n\u0131f\u0131 var?\ndf[more_cat_cols].nunique()","a6fe0889":"#Kategorik degiskenler hakk\u0131nda ozet bilgiler\ndef cats_summary(data):\n    cats_names = [col for col in data.columns if len(data[col].unique()) < 10 ]\n    for var in cats_names:\n        print(pd.DataFrame({var: data[var].value_counts(),\n                            \"Ratio\": 100 * data[var].value_counts() \/ len(data)}), end=\"\\n\\n\\n\")\n        import matplotlib.pyplot as plt\n        fig, ax = plt.subplots(figsize=(15, 5)) \n        sns.countplot(x=var, data=data)\n        plt.show()\n\n\ncats_summary(df)","3e7f1c50":"# \u00d6nceki kod ile:\nnum_cols = [col for col in df.columns if df[col].dtypes != 'O' and\n            col not in \"Risk\" and\n            col not in \"more_cat_cols\"]\nnum_cols","2880a15e":"#Say\u0131sal degiskenlerin grafiginin cizdirilmesi\ndef hist_for_nums(data, numeric_cols):\n    col_counter = 0\n    data = data.copy()\n    for col in numeric_cols:\n        data[col].hist(bins=20)\n        plt.xlabel(col)\n        plt.title(col)\n        plt.show()\n        col_counter += 1\n    print(col_counter, \"variables have been plotted\")\n\n\nhist_for_nums(df, ['Age',  'Credit amount', 'Duration',\"faiz_yuzdesi\",\"toplam_borc\",\"yas_sure\",\"ust_yas\"])","688a8e1e":"#Bag\u0131ml\u0131 degiskene gore say\u0131sal degiskenlerin ortalama degerleri\ndef target_summary_with_nums(data, target):\n    num_names = [col for col in data.columns if len(data[col].unique()) > 5\n                 and df[col].dtypes != 'O']\n\n\n    for var in num_names:\n        print(df.groupby(target).agg({var: np.mean}), end=\"\\n\\n\\n\")\n\n\ntarget_summary_with_nums(df, \"Risk\")","3f62c2ed":"#Enkod islemi\nfrom sklearn.preprocessing import LabelEncoder\ndef one_hot_encoder(dataframe, category_freq=10, nan_as_category=False):\n    categorical_cols = [col for col in dataframe.columns if len(dataframe[col].value_counts()) < category_freq\n                        and dataframe[col].dtypes == 'O' ]\n\n    dataframe = pd.get_dummies(dataframe, columns=categorical_cols, dummy_na=nan_as_category, drop_first=True)\n\n    return dataframe\n\n#label encoding\ndf = pd.get_dummies(df, columns=[\"Job\"], drop_first=True )\n\ndf = one_hot_encoder(df)\n\ndf.head()","c6198ddb":"#Standartlast\u0131rma(carp\u0131kl\u0131klar\u0131n giderilmesi)\nfrom sklearn.preprocessing import RobustScaler\nfor i in [\"Age\",\"Credit amount\",\"Duration\",\"toplam_borc\",\"faiz_tutari\",\"yas_sure\" ,\"ust_yas\"]:\n    transformer = RobustScaler().fit(df[[i]])\n    df[i] = transformer.transform(df[[i]])\n    \ndf.head()","3ab0afb0":"df.columns","6a634cb6":"#df = df.drop([\"Purpose_domestic appliances\",\"Purpose_repairs\",\"Purpose_vacation\/others\",\"Purpose_vacation\/others\",\"Purpose_education\",\"Checking account_rich\"] , axis = 1)\n\n\n","7ef96306":"#Risk degiskeninin dusurulmesi\nX = df.drop('Risk_good', axis=1)\ny = df[[\"Risk_good\"]]\n\n#Veri setinin egitim ve test seti olarak bolunmesi\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20,stratify=y, random_state=46)\n\n\n\n# LightGBM\n\n#Model olusturma\nlgbm = LGBMClassifier(random_state=12345)\ncross_val_score(lgbm, X, y, cv=10).mean()\n","059df708":"\n# model tuning\nlgbm_params = {\"learning_rate\": [0.01, 0.1],\n               \"n_estimators\": [500, 1000],\n               \"max_depth\": [3, 5]}\n\n#GridSearchCV hesaplanmas\u0131\ngs_cv = GridSearchCV(lgbm,\n                     lgbm_params,\n                     cv=5,\n                     n_jobs=-1,\n                     verbose=2).fit(X_train, y_train)\n\n#En iyi parametrelerle model kurma\nlgbm_tuned = LGBMClassifier(**gs_cv.best_params_).fit(X, y)\ncross_val_score(lgbm_tuned, X_test, y_test, cv=10).mean()\n\n\nfeature_imp = pd.Series(lgbm_tuned.feature_importances_,\n                        index=X.columns).sort_values(ascending=False)\n\n#Degisken onem duzeylerinin grafiksel gosterimi\nsns.barplot(x=feature_imp, y=feature_imp.index)\nplt.xlabel('De\u011fi\u015fken \u00d6nem Skorlar\u0131')\nplt.ylabel('De\u011fi\u015fkenler')\nplt.title(\"De\u011fi\u015fken \u00d6nem D\u00fczeyleri\")\nplt.show()\n\n#cv islemleri(caprazlama)\nkfold = KFold(n_splits=10, random_state=123456)\ncv_results = cross_val_score(LGBMClassifier(), X_train, y_train, cv=kfold, scoring=\"accuracy\")","64fefc4b":"#s\u0131n\u0131fland\u0131rma sonucu\ncv_results.mean()","7c30ef06":"\n# Problem\n\n\n\n**Kredi riski s\u0131n\u0131fland\u0131rmak \u00fczere bir makine \u00f6\u011frenmesi modeli kurmak.**\n\n**Veri Seti Hikayesi**\n\nVeri seti kayna\u011f\u0131: https:\/\/archive.ics.uci.edu\/ml\/datasets\/statlog+(german+credit+data)\n\n- **1000 bireye ait g\u00f6zlemler var.**\n\n**De\u011fi\u015fkenler**\n\n- **Age**: Ya\u015f\n\n- **Sex**: Cinsiyet\n\n- **Job**: Meslek-Yetenek (0 - unskilled and non-resident, 1 - unskilled and resident, 2 - skilled, 3 - highly skilled)\n\n- **Housing**: Bar\u0131nma Durumu (own, rent, or free)\n\n- **Saving accounts**: Tasarruf Durumu (little, moderate, quite rich, rich)\n\n- **Checking account**: Vadesiz Hesap (DM - Deutsch Mark)\n\n- **Credit amount**: Kredi Miktar\u0131 (DM)\n\n- **Duration**: S\u00fcre (month)\n\n- **Purpose**: Ama\u00e7 (car, furniture\/equipment, radio\/TV, domestic appliances, repairs, education, business, vacation\/others)\n\n- **Risk**: Risk (Good, Bad Risk)\n    \n\n"}}