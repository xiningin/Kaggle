{"cell_type":{"5aa1f2d8":"code","70a7d77c":"code","c4f13ecc":"code","83315a7f":"code","f05d000a":"code","73776994":"code","537e58fd":"code","d0f925d7":"code","206e2c87":"code","8363d4ff":"code","448d7f85":"code","bb36f230":"code","661f51eb":"code","e53721af":"code","1143d18f":"code","e0835d43":"code","a5caa802":"code","01c8c855":"code","af58281e":"code","d2e9ff1a":"code","d662fa2e":"code","68354a25":"code","0be193b6":"code","8c2ce67c":"code","0333aeb9":"code","a53c0d92":"code","4b8f3553":"code","029703aa":"code","44e7213f":"code","38ba6b8a":"code","6ff2a2ec":"code","cf4802fb":"code","2c137477":"code","52828221":"code","181e347b":"code","fc10283a":"code","ad00a8fd":"code","cb28d800":"code","86fbfe18":"code","0b65c20d":"code","c901e098":"code","04133723":"code","d020dae0":"code","fce7034e":"code","88de43be":"markdown","9fe3aee4":"markdown","25ab72e3":"markdown","d582156c":"markdown","78d1157c":"markdown","62a96054":"markdown","e6db1d48":"markdown"},"source":{"5aa1f2d8":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport folium\nimport numpy as np\n\nfrom sklearn.linear_model import Ridge\nfrom sklearn.model_selection import RepeatedKFold\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import explained_variance_score,mean_absolute_error,r2_score\nfrom time import time\nfrom sklearn.model_selection import KFold\n\nfrom sklearn.linear_model import LinearRegression, Ridge,Lasso\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.ensemble import ExtraTreesRegressor, RandomForestRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom lightgbm import LGBMRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.pipeline import make_pipeline","70a7d77c":"df = pd.read_csv('\/kaggle\/input\/miami-housing-dataset\/miami-housing.csv')\ndf.head(10)","c4f13ecc":"df.dtypes","83315a7f":"sns.relplot(x='LND_SQFOOT',y='SALE_PRC',sizes=(1, 100),size='SALE_PRC',hue='structure_quality',palette='mako',data=df)\nplt.xlabel('Land Square Foot')\nplt.ylabel('Sale Price')\nplt.ticklabel_format(style='plain', axis='y')","f05d000a":"sns.relplot(x='TOT_LVG_AREA',y='SALE_PRC',sizes=(1,100),hue='age',palette='light:b',size='SALE_PRC',data=df)\nplt.xlabel('Total Living Area')\nplt.ylabel('Sale Price')\nplt.ticklabel_format(style='plain', axis='y')","73776994":"sns.relplot(x='SPEC_FEAT_VAL',y='SALE_PRC',hue='TOT_LVG_AREA',sizes=(1,100),palette='viridis',size='SALE_PRC',data=df)\nplt.xlabel('Value of Special Features')\nplt.ylabel('Sale Price')\nplt.ticklabel_format(style='plain', axis='y')","537e58fd":"sns.relplot(x='RAIL_DIST',y='SALE_PRC',sizes=(1,100),hue='OCEAN_DIST',palette='Spectral',size='SALE_PRC',data=df)\nplt.xlabel('Rail Distance')\nplt.ylabel('Sale Price')\nplt.ticklabel_format(style='plain', axis='y')","d0f925d7":"sns.relplot(x='TOT_LVG_AREA',y='SALE_PRC',sizes=(1,100),hue='structure_quality',palette='coolwarm',size='SALE_PRC',data=df)\nplt.xlabel('Distance to Ocean')\nplt.ylabel('Sale Price')\nplt.ticklabel_format(style='plain', axis='y')","206e2c87":"sns.relplot(x='WATER_DIST',y='SALE_PRC',sizes=(1,100),hue='CNTR_DIST',palette='light:b',size='SALE_PRC',data=df)\nplt.xlabel('Distance to Water')\nplt.ylabel('Sale Price')\nplt.ticklabel_format(style='plain', axis='y')","8363d4ff":"sns.relplot(x='CNTR_DIST',y='SALE_PRC',sizes=(1,100),hue='TOT_LVG_AREA',palette='vlag',size='SALE_PRC',data=df)\nplt.xlabel('Distance to Miami central business')\nplt.ylabel('Sale Price')\nplt.ticklabel_format(style='plain', axis='y')\nplt.xticks(fontsize=8)","448d7f85":"miami_map = folium.Map(location=[25.761681,-80.191788], zoom_start=10)\nfor LATITUDE, LONGITUDE, in zip(df['LATITUDE'], df['LONGITUDE']):\n    miami_map.add_child(\n    folium.features.CircleMarker(\n        [LATITUDE, LONGITUDE],\n        radius=0.001, # define how big you want the circle markers to be\n        color='green',\n        fill=True,\n        fill_color='blue',\n        fill_opacity=0.5\n        )\n)","bb36f230":"miami_map","661f51eb":"missing_data = df.isnull()\nfor column in missing_data.columns.values.tolist():\n    print(column)\n    print (missing_data[column].value_counts())\n    print(\"\")","e53721af":"df.corr()","1143d18f":"X = df[['LND_SQFOOT','TOT_LVG_AREA','SPEC_FEAT_VAL','RAIL_DIST','OCEAN_DIST','WATER_DIST',\n        'CNTR_DIST','SUBCNTR_DI','HWY_DIST','age','structure_quality']]\ny = df['SALE_PRC']","e0835d43":"X_train, X_test, y_train, y_test = train_test_split(X, y,test_size = 0.2)","a5caa802":"sc_X = StandardScaler()\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.transform(X_test)","01c8c855":"regressors = [\n    KNeighborsRegressor(),\n    GradientBoostingRegressor(),\n    ExtraTreesRegressor(),\n    RandomForestRegressor(),\n    DecisionTreeRegressor(),\n    LinearRegression(),\n    Lasso(),\n    Ridge(),\n    LGBMRegressor()\n]","af58281e":"head = 10\nfor model in regressors[:head]:\n    start = time() \n    model.fit(X_train, y_train)\n    train_time = time() - start\n    start = time()\n    y_pred = model.predict(X_test)\n    predict_time = time()-start    \n    print(model)\n    print(\"\\tTraining time: %0.3fs\" % train_time)\n    print(\"\\tPrediction time: %0.3fs\" % predict_time)\n    print(\"\\tExplained variance:\", explained_variance_score(y_test, y_pred))\n    print(\"\\tMean absolute error:\", mean_absolute_error(y_test, y_pred))\n    print(\"\\tR2 score:\", r2_score(y_test, y_pred))\n    print()","d2e9ff1a":"RandomForestRegressor().get_params().keys()","d662fa2e":"ExtraTreesRegressor().get_params().keys()","68354a25":"LGBMRegressor().get_params().keys()","0be193b6":"import sklearn.metrics\nsklearn.metrics.SCORERS.keys()","8c2ce67c":"param_grid_rf = [{\n    'max_depth':[2, 3, 4],\n    'max_features':[2, 3, 4, 5, 6],\n    'min_samples_split': [2,5,10,30],\n    'n_estimators' :[100,200,500,1000], \n}]","0333aeb9":"gridRF = GridSearchCV(RandomForestRegressor(),\n                     param_grid_rf,\n                     cv=10,\n                     refit=True,\n                     scoring='r2',\n                     n_jobs=-1).fit(X_train,y_train)","a53c0d92":"print(gridRF.best_params_,'\\n')\nprint(gridRF.best_estimator_,'\\n')","4b8f3553":"FinalModelRF = RandomForestRegressor(**gridRF.best_params_)","029703aa":"FinalModelRF.fit(X_train,y_train)","44e7213f":"y_predRF = FinalModelRF.predict(X_test)","38ba6b8a":"sns.distplot(y_predRF-y_test)","6ff2a2ec":"param_grid_et = [{\n    'max_depth':[2, 3, 4],\n    'max_features':[2, 3, 4, 5, 6],\n    'min_samples_split': [2,5,10,30],\n    'n_estimators' :[100,200,500,1000], \n}]","cf4802fb":"gridET = GridSearchCV(ExtraTreesRegressor(),\n                     param_grid_et,\n                     cv=10,\n                     refit=True,\n                     scoring='r2',\n                     n_jobs=-1).fit(X_train,y_train)","2c137477":"print(gridET.best_params_,'\\n')\nprint(gridET.best_estimator_,'\\n')","52828221":"FinalModelET = RandomForestRegressor(**gridET.best_params_)","181e347b":"FinalModelET.fit(X_train,y_train)","fc10283a":"y_predET = FinalModelET.predict(X_test)","ad00a8fd":"sns.distplot(y_predET-y_test)","cb28d800":"lgbm_params = {\"learning_rate\": [0.01, 0.03, 0.05, 0.1, 0.5],\n               \"n_estimators\": [500, 1000, 1500],\n               \"max_depth\":[3,5,8]}","86fbfe18":"gridLGBM = GridSearchCV(LGBMRegressor(),\n                        lgbm_params,\n                        cv=10,\n                        refit=True,\n                        n_jobs=-1).fit(X_train,y_train)","0b65c20d":"print(gridLGBM.best_params_,'\\n')\nprint(gridLGBM.best_estimator_,'\\n')","c901e098":"FinalModelLGBM = LGBMRegressor(**gridLGBM.best_params_)","04133723":"FinalModelLGBM.fit(X_train,y_train)","d020dae0":"y_predLGBM = FinalModelLGBM.predict(X_test)","fce7034e":"sns.distplot(y_predLGBM-y_test)","88de43be":"## Random Forest","9fe3aee4":"## Tuning the three best models","25ab72e3":"## Extra Trees","d582156c":"## EDA","78d1157c":"## Pre-Processing","62a96054":"## LGBM","e6db1d48":"## Fits Models"}}