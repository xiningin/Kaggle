{"cell_type":{"6de023d9":"code","2d114bda":"code","a448feaf":"code","006b62fb":"code","f777c167":"code","4d300089":"code","950c9adf":"code","856d6ed6":"code","82a14394":"code","e30b9960":"code","257a3294":"code","7a1d21eb":"code","45f73472":"code","3eed0faf":"markdown","62fc5a49":"markdown","f9184c2d":"markdown","c7ecc974":"markdown","6b0dfe12":"markdown","9d1f58f5":"markdown","8baf5359":"markdown","d1c28b4d":"markdown"},"source":{"6de023d9":"%%bash\nwget http:\/\/xn--90aomiky.xn--p1ai\/include\/calendar\/calendar.json\nwget http:\/\/xn--90aomiky.xn--p1ai\/include\/iris.json\n\npip install git+https:\/\/github.com\/chiant1\/bimorph.git","2d114bda":"import os\nimport json\nimport sklearn\nimport datetime\nimport numpy as np\nimport pandas as pd\n\nfrom bimorph import BimorphClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.datasets import fetch_openml, make_blobs","a448feaf":"def read_jsondata(fname, target):\n    ds = pd.read_json(fname)\n    X = ds['dano'].apply(lambda x: pd.Series(x)).astype(np.float)\n    y = ds['itog'].apply(lambda x: pd.Series(x))[target]\n    return X, y","006b62fb":"def preprocess(X:np.array, y:np.array, n_samples=None):\n    X = np.round(pd.DataFrame(X)*1000)\n    X = X.fillna(X.mean())\n    X = X - X.min()\n    X.columns = list(map(lambda x: 'x' + str(x),X.columns.values))\n    y = pd.Series(list(map(str,y)))\n    X, y = sklearn.utils.shuffle(X, y, random_state=123, n_samples=n_samples)\n    return X, y","f777c167":"def score_models(X:pd.DataFrame, y:pd.Series, folds, models, name, random_state=123, versose=False):\n    tmp = []\n    if versose:\n        print (f\"{name} {folds}-Fold Accuracy:\")\n    for clf in models:\n        rec = {'model':type(clf).__name__}\n        t0 = datetime.datetime.now()\n        rec['cv_score'] = np.mean(cross_val_score(clf, X, y, cv=KFold(n_splits=folds, shuffle=True, random_state=random_state)))\n        t1 = datetime.datetime.now()\n        rec['cv_time'] = (t1-t0).total_seconds()*1000\/folds\n        if versose:\n            print (f\"{rec['model']:30s} {rec['cv_score']:.2f}  {rec['cv_time']:.1f} ms\")\n        tmp.append(rec)\n    return pd.DataFrame(tmp)","4d300089":"folds = 5\n\nmodels = [\n    BimorphClassifier(e=100),\n    LogisticRegression(solver='liblinear', multi_class='auto'),\n    RandomForestClassifier(n_estimators=100),\n    GradientBoostingClassifier(),\n]","950c9adf":"datasets = {\n    'miceprotein':\n        sklearn.utils.shuffle(\n            *preprocess(*fetch_openml('miceprotein', version=4, return_X_y=True)),\n            random_state=123, n_samples=40),\n    'calendar_weekday':\n        sklearn.utils.shuffle(\n            *read_jsondata('calendar.json', '\u0414\u0435\u043d\u044c\u041d\u0435\u0434\u0435\u043b\u0438'),\n            random_state=123, n_samples=50),\n    'calendar_work':\n        sklearn.utils.shuffle(\n            *read_jsondata('calendar.json', '\u0420\u0430\u0431\u043e\u0442\u0430'),\n            random_state=123, n_samples=60),\n    'blobs':\n        preprocess(*make_blobs(n_features=2, centers=3, n_samples=100, random_state=123)),\n    'real_iris':\n        sklearn.utils.shuffle(\n            *preprocess(*fetch_openml('iris', version=1, return_X_y=True)),\n            random_state=123, n_samples=150),\n    'bimorph_iris':\n        read_jsondata('iris.json', '\u0412\u0438\u0434\u0418\u0440\u0438\u0441\u0430'),\n}","856d6ed6":"dataset = 'iris'\nversion = 1\nX, y = fetch_openml(dataset, version=version, return_X_y=True)\nX, y = preprocess(X, y, n_samples=20)\nscores = score_models(X, y, folds=folds, models=models, name=f'{dataset}:{X.shape[0]}', random_state=123)\nscores","82a14394":"cv_score = pd.DataFrame()\ncv_time = pd.DataFrame()\nfor name in datasets:\n    X,y = datasets[name]\n    name1 = f'{name}:{X.shape[0]}'\n    scores = score_models(X, y, folds=folds, models=models, name=f'{dataset}:{X.shape[0]}', random_state=123)\n    scores.index = scores['model']\n    cv_score[name1] = scores['cv_score']\n    cv_time[name1] = scores['cv_time']","e30b9960":"cv_score.T.round(3) * 100","257a3294":"cv_time.T.round(0)","7a1d21eb":"(1 - cv_score).rank(axis=0).mean(axis=1).rank().astype(np.int).T.reset_index(name='#')","45f73472":"! rm *.sqlite","3eed0faf":"## 4. Score all Datasets on all Models","62fc5a49":"### Train time (ms)","f9184c2d":"# Self-expanding algorithm [bimorph](http:\/\/\u0431\u0438\u043c\u043e\u0440\u0444.\u0440\u0444)\n## 1. Installation","c7ecc974":"## 3. Define scoring routines","6b0dfe12":"### Model Leaderboard","9d1f58f5":"### Accuracy (%)","8baf5359":"## 6. Remote sqlite-files","d1c28b4d":"## 4. Example"}}