{"cell_type":{"7e2cb619":"code","f863e874":"code","4a937085":"code","358a910c":"code","8192a5ae":"code","609ff0c7":"code","8a5e8244":"code","c08e5930":"code","a2565d8c":"code","e0e6d35a":"code","49da6898":"code","761b07a3":"code","1167e7ce":"code","dd27a621":"code","60eb7bec":"code","eba8a7d2":"code","118efe5f":"code","a73d0a38":"code","a979e290":"code","bb6a76ec":"code","4ac3d4c3":"code","2d7fb879":"code","d14ddc59":"code","9fad28b9":"code","a32a65e7":"code","e41b45de":"code","38d02b70":"code","b25a9603":"code","8424e4c7":"code","c1947c91":"code","76824c93":"code","497cea2f":"code","0ea11ee1":"code","6a84e604":"code","51a7b616":"code","54b5b38b":"code","33773497":"code","e9194bb3":"code","331ecd87":"code","1c29a913":"code","16064afe":"code","5747d376":"code","6a2a9204":"code","9e8e9c92":"code","9dee5ae3":"code","85f2141b":"markdown","b7f340cf":"markdown","669dba99":"markdown","7fb4c539":"markdown","facba562":"markdown","02051fe4":"markdown","feea91d7":"markdown","f1d1c39e":"markdown","bf6020f2":"markdown","de4fe96d":"markdown","30735adf":"markdown","bb698779":"markdown","be8f483a":"markdown","0b2248f8":"markdown"},"source":{"7e2cb619":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # graphically presentation of dataset\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f863e874":"dataHouse = pd.read_csv(\"\/kaggle\/input\/home-demolitions-in-palestine-20042021\/House Demolitions in Palestine.csv\")\nprint(\"House Demolitions Data Shape: \", dataHouse.shape)","4a937085":"dataHouse.info()","358a910c":"dataHouse.head()","8192a5ae":"dataHouse.columns","609ff0c7":"# Change\/Rename the Name of Column for Easy Access\/EDA\ndataHouse.rename( columns = {'Year' : 'year', 'Housing Units' : 'housing-units', 'People Left Homeless' : 'people-left-homeless', \n                             'Minors Left Homeless' : 'minors-left-homeless', 'Area' : 'area', 'Type of Structure' : 'type-of-structure', \n                             'Demolish Scope' : 'demolish-scope', 'District' : 'district', 'Demolition Reason' : 'demolition-reason', \n                             'Demolition carried out by' : 'demolition-carried-outby'}, inplace=True )\ndataHouse.columns","8a5e8244":"dataHouse.isna().sum()","c08e5930":"# Drop Unwanted Columns\ndataHouse = dataHouse.drop(['demolish-scope', 'demolition-carried-outby'], axis=1)\ndataHouse.isna().sum()","a2565d8c":"# Strip the Extra Space and Replace the unwanted character like coma\",\" from DataSet\n\n# Remove the Extra Space by using Strip Command\n#data_house['year'] = data_house['year'].str.strip()\ndataHouse['housing-units'] = dataHouse['housing-units'].str.strip()\ndataHouse['people-left-homeless'] = dataHouse['people-left-homeless'].str.strip()\ndataHouse['minors-left-homeless'] = dataHouse['minors-left-homeless'].str.strip()\n\n# Remove the unwanted character like coma\",\" by using replace function\ndataHouse['housing-units'] = dataHouse['housing-units'].str.replace(',','')\ndataHouse['people-left-homeless'] = dataHouse['people-left-homeless'].str.replace(',','')\ndataHouse['minors-left-homeless'] = dataHouse['minors-left-homeless'].str.replace(',','')\n\n\n# Filling Null Values\ndataHouse['year'] = dataHouse['year'].fillna(0)\ndataHouse['housing-units'] = dataHouse['housing-units'].fillna(0)\ndataHouse['people-left-homeless'] = dataHouse['people-left-homeless'].fillna(0)\ndataHouse['minors-left-homeless'] = dataHouse['minors-left-homeless'].fillna(0)\n\n# Change data type of the remaining column as per their data\ndataHouse['year'] = dataHouse['year'].astype('int64')\ndataHouse['housing-units'] = dataHouse['housing-units'].astype('int64')\ndataHouse['people-left-homeless'] = dataHouse['people-left-homeless'].astype('int64')\ndataHouse['minors-left-homeless'] = dataHouse['minors-left-homeless'].astype('int64')\n\ndataHouse.isna().sum()","e0e6d35a":"dataHouse[dataHouse['district'].isna()]","49da6898":"# Drop Specified ambigious Columns\ndataHouse = dataHouse.drop(dataHouse[dataHouse['district'].isna()].index)\ndataHouse.isna().sum()","761b07a3":"# Verify Data Info for their dataTypes\ndataHouse.info()","1167e7ce":"dataHouse.head()","dd27a621":"# Data Sort by Year\nxdataHouse = dataHouse.sort_values(by=\"year\", ascending=True)\nxdataHouse.head()","60eb7bec":"# Total Numbers of Unique Area Names involve in datasets\nprint (\"Number of Areas: \", len(xdataHouse['area'].unique()))\nxdataHouse['area'].unique()","eba8a7d2":"# Total Numbers of Unique Districts Names involve in datasets\nprint (\"Number Of Districts: \", len(xdataHouse['district'].unique()))\nxdataHouse['district'].unique()","118efe5f":"# Correction of District Name in datasets\ndistrictNames = {\n    \"Ramallah and al-Bira\" : \"Ramallah and al-Bireh\", \n    \"Herbon\" : \"Hebron\", \n    \"Herbron\" : \"Hebron\", \n    \"Qalqiliya\" : \"Qalqilya\", \n    \"Talkum\" : \"Tulkarm\",\n    \"Noth Gaza\" :\"North Gaza\"} \n\nxdataHouse[\"district\"] = xdataHouse[\"district\"].replace(districtNames)\nprint (\"After Correction\\n-----------------\\nNumber Of Districts: \", len(xdataHouse['district'].unique()))\nxdataHouse['district'].unique()","a73d0a38":"# Simplify the Demolition-Reason for better understanding in Analysis\nxdataHouse['demolition-reason'] = xdataHouse['demolition-reason'].str.replace(\n    'Demolition for alleged military purposes', 'Alleged Military Purposes')\n\nxdataHouse['demolition-reason'] = xdataHouse['demolition-reason'].str.replace(\n    'Demolition of houses as punishment', 'Punishment')\n\nxdataHouse['demolition-reason'] = xdataHouse['demolition-reason'].str.replace(\n    'Demolition on the pretext of unlawful construction', 'UnLawful Construction')\n\nxdataHouse.head()","a979e290":"# Total Numbers of Unique Type-Of-Structures involve in datasets\nprint (\"Number of type-of-structure: \", len(xdataHouse['type-of-structure'].unique()))\nxdataHouse['type-of-structure'].unique()","bb6a76ec":"# Simplify for easy understanding in Analysis\nxdataHouse['type-of-structure'] = xdataHouse['type-of-structure'].str.replace(\n    'Residential Structure', 'Residential')\n\nxdataHouse['type-of-structure'] = xdataHouse['type-of-structure'].str.replace(\n    'Non Residential Structure', 'Non-Residential')\n\nprint (\"Length: \", len(xdataHouse['type-of-structure'].unique()))\nxdataHouse['type-of-structure'].unique()","4ac3d4c3":"# Simplify demolition-reason values for easy understanding in Analysis\nxdataHouse['demolition-reason'] = xdataHouse['demolition-reason'].str.replace(\n    'Demolition for alleged military purposes', 'Alleged Military Purposes')\n\nxdataHouse['demolition-reason'] = xdataHouse['demolition-reason'].str.replace(\n    'Demolition of houses as punishment', 'Punishment')\n\nxdataHouse['demolition-reason'] = xdataHouse['demolition-reason'].str.replace(\n    'Demolition on the pretext of unlawful construction', 'UnLawful Construction')\n\nprint (\"Number of Reasons: \", len(xdataHouse['demolition-reason'].unique()))\nxdataHouse['demolition-reason'].unique()","2d7fb879":"# Create Function for PIE Graph\n\ndef myPieChart(df, xName, lblName, myTitle, myXplode, rotlbl):\n    x = df[xName]\n    labels = lblName\n\n    fig, ax = plt.subplots(figsize=(7, 7))\n    patches, texts, pcts = ax.pie(\n        x, labels = labels, autopct='%.1f%%',\n        wedgeprops = {'linewidth': 3.0, 'edgecolor': 'white'},\n        textprops = {'size': 'small', 'weight':400},\n        labeldistance = 1.04,\n        rotatelabels = rotlbl,\n        explode = myXplode,\n        startangle = 90)\n    \n    # Set corresponding label color\n    for i, patch in enumerate(patches):\n        texts[i].set_color(patch.get_facecolor())\n        texts[i].set_fontsize(12)\n\n    plt.setp(pcts, color='white')\n    plt.setp(texts, fontweight=600)\n    ax.set_title(myTitle, fontsize=15, color= 'green', fontweight='bold')\n    \n#    ax.set_title(myTitle, fontsize=15, color= 'blue', fontweight='bold',loc='left')\n#    ax.set_title(myTitle, fontsize=15, color= 'blue', fontweight='bold', y= 1, x=1.2)\n    \n    plt.tight_layout()","d14ddc59":"# Create Function for PIE Chart Explode Property\ndef getXplode(df, colName):\n    xeplode = []\n    totalVal = df[colName].sum()\n    for index, row in df.iterrows():\n        percent = round((row[colName] \/ totalVal)*100, 1)\n        if(percent > 0 and percent <= 3.0 ):\n            xeplode.append(0.3)\n            \n        elif(percent > 3.0 and percent <= 5.0 ):\n            xeplode.append(0.1)\n            \n        elif(percent > 5.0 and percent <= 10.0 ):\n            xeplode.append(0.05)\n            \n        elif(percent > 10.0 ):\n            xeplode.append(0.01)\n        else:\n            xeplode.append(0)\n            \n    return xeplode","9fad28b9":"# House Demolished Dataset Sorted by Year\ndataby_year = xdataHouse.groupby(['year'], as_index=False).sum()\ndataby_year","a32a65e7":"# Call Pie Chart function in For-loop for each feature\nmyTitle = 'Null'\nmyXplode = 0\nfor x, name in databy_year.iteritems():\n    if x != \"year\":\n        if x == \"housing-units\":\n            myTitle = \"Year Wise Housing Units\"\n            myXplode = getXplode(databy_year, x)\n        elif x == \"people-left-homeless\":\n            myTitle = \"People Left Homeless Yearly\"\n            myXplode = getXplode(databy_year, x)\n        elif x == \"minors-left-homeless\":\n            myTitle = \"Minors Left Homeless Yearly\"\n            myXplode = getXplode(databy_year, x)\n\n        myPieChart(databy_year, x, databy_year['year'], myTitle, myXplode, True)","e41b45de":"# House Demolished Dataset Sorted by Area Wise\ndataby_area = xdataHouse.groupby(['area'], as_index=False).sum()\ndataby_area = databy_area.drop(['year'], axis=1)\ndataby_area","38d02b70":"# Call Pie Chart function in For-loop for each feature\nfor x, name in databy_area.iteritems():\n    if x != \"area\":\n        if x == \"housing-units\":\n            myTitle = \"Area Wise Housing Units\"\n            myXplode = getXplode(databy_area, x)\n        elif x == \"people-left-homeless\":\n            myTitle = \"People Left Homeless Area Wise\"\n            myXplode = getXplode(databy_area, x)\n        elif x == \"minors-left-homeless\":\n            myTitle = \"Minors Left Homeless Area Wise\"\n            myXplode = getXplode(databy_area, x)\n\n        myPieChart(databy_area, x, databy_area[\"area\"], myTitle, myXplode, False)","b25a9603":"# House Demolished Dataset Sorted by District Wise\ndataby_district = xdataHouse.groupby(['district'], as_index=False).sum()\ndataby_district = databy_district.drop(['year'], axis=1)\ndataby_district","8424e4c7":"# Call Pie Chart function in For-loop for each feature\nfor x, name in databy_district.iteritems():\n    if x != \"district\":\n        if x == \"housing-units\":\n            myTitle = \"District Wise Housing Units\"\n            myXplode = getXplode(databy_district, x)\n        elif x == \"people-left-homeless\":\n            myTitle = \"People Left Homeless District Wise\"\n            myXplode = getXplode(databy_district, x)\n        elif x == \"minors-left-homeless\":\n            myTitle = \"Minors Left Homeless District Wise\"\n            myXplode = getXplode(databy_district, x)\n\n        myPieChart(databy_district, x, databy_district[\"district\"], myTitle, myXplode, True)","c1947c91":"# House Demolished Dataset Sorted by Type Of Structure\ndataby_structure = xdataHouse.groupby(['type-of-structure'], as_index=False).sum()\ndataby_structure = databy_structure.drop(['year'], axis=1)\ndataby_structure","76824c93":"# Call Pie Chart function in For-loop for each feature\nfor x, name in databy_structure.iteritems():\n    if x != \"type-of-structure\":\n        if x == \"housing-units\":\n            myTitle = \"Structure Type of Housing Units\"\n            myXplode = getXplode(databy_structure, x)\n        elif x == \"people-left-homeless\":\n            myTitle = \"People Left Homeless\"\n            myXplode = getXplode(databy_structure, x)\n        elif x == \"minors-left-homeless\":\n            myTitle = \"Minors Left Homeless\"\n            myXplode = getXplode(databy_structure, x)\n\n        myPieChart(databy_structure, x, databy_structure[\"type-of-structure\"], myTitle, myXplode, False)","497cea2f":"# House Demolished Dataset Sorted by Reason\ndataby_reason = xdataHouse.groupby(['demolition-reason'], as_index=False).sum()\ndataby_reason = databy_reason.drop(['year'], axis=1)\ndataby_reason","0ea11ee1":"# Call Pie Chart function in For-loop for each feature\nfor x, name in databy_reason.iteritems():\n    if x != \"demolition-reason\":\n        if x == \"housing-units\":\n            myTitle = \"Demolition Reason of Housing Units\"\n            myXplode = getXplode(databy_reason, x)\n        elif x == \"people-left-homeless\":\n            myTitle = \"People Left Homeless Reason\"\n            myXplode = getXplode(databy_reason, x)\n        elif x == \"minors-left-homeless\":\n            myTitle = \"Minors Left Homeless Reason\"\n            myXplode = getXplode(databy_reason, x)\n\n        myPieChart(databy_reason, x, databy_reason[\"demolition-reason\"], myTitle, myXplode, False)","6a84e604":"print(\"----------- Demolished Statics -----------\" )\nprint(\"Total Housing Units: \", xdataHouse['housing-units'].sum() )\nprint(\"Total People Left Homeless: \", xdataHouse['people-left-homeless'].sum() )\nprint(\"Total Minors Left Homeless: \", xdataHouse['minors-left-homeless'].sum() )","51a7b616":"# Upload External CSV file for Districts Geographically Location and Distance Calculation\ndfdistrictLocation = pd.read_csv(\"\/kaggle\/input\/palistinedistrictswithlocations\/palestinecities.csv\")\nprint(\"Data Shape: \", dfdistrictLocation.shape)","54b5b38b":"# Actual Dataset Sorted by District Name\nxdataByDistrict = databy_district.sort_values(by=\"district\", ascending=True)\nxdataByDistrict","33773497":"from geopy.distance import geodesic","e9194bb3":"dfdistrictLocation[dfdistrictLocation['Name'] == 'Al-Quds']","331ecd87":"# Create 2-Columns to Add Geographical Location of Each Districts\n# 3rd-Columns for Distance Starting Point Al-Quds (Origin Location)\n# Distance will be calculated in Miles\n\nmy_origin = (31.75354199, 35.25682731) # Al-Quds as Origin Location\nfor x, xrow in dfdistrictLocation.iterrows():\n    for y, yRow in xdataByDistrict.iterrows():\n        if yRow[\"district\"] == xrow[\"Name\"]:\n            getlocation = (xrow.lat, xrow.lng)\n            getDistance = round(geodesic(my_origin, getlocation).miles, 0)\n            xdataByDistrict.at[y, 'lat'] = xrow['lat']\n            xdataByDistrict.at[y, 'lng'] = xrow['lng']\n            xdataByDistrict.at[y, 'distance'] = getDistance\n            \nxdataByDistrict","1c29a913":"markColors = {'pink', 'lightgray', 'lightblue', 'lightred', 'purple', 'darkred', \n             'cadetblue', 'red', 'darkblue', 'black', 'orange', 'lightgreen', 'blue', \n             'green', 'darkpurple', 'darkgreen', 'beige', 'gray'}\nmarkColors = list(markColors)\nprint(\"Total Colors: \",len(markColors))\nprint(markColors)","16064afe":"import folium","5747d376":"# Home Demolished Presented on the Geographicall Map with relevant information\n# Distance calculated with respect of A-Quds Starting Point of Each Destination\nmyMap = folium.Map(location = [31.952162, 35.233154],\n                   zoom_start= 8.5,\n                   min_zoom = 6,\n                   tiles='CartoDB positron'\n                 )\nfor district, hunits, dis, pHomeless, minorHomeless, lat, lng, colorlist in zip(list(xdataByDistrict['district']), \n                                      list(xdataByDistrict['housing-units']), \n                                      list(xdataByDistrict['distance']), \n                                      list(xdataByDistrict['people-left-homeless']), \n                                      list(xdataByDistrict['minors-left-homeless']), \n                                      list(xdataByDistrict['lat']), \n                                      list(xdataByDistrict['lng']), \n                                      list(markColors)):\n    folium.Marker([lat, lng], \n                  icon=folium.Icon(icon='home', prefix='fa', color=colorlist ), #color='lightred'),\n                  tooltip = (\"<strong>\" + district + \"<\/strong>\" +\n                             \"<br>Al-Quds to \" + district + \": <strong>\" + str(dis) + \" Miles<\/strong>\" +\n                             \"<br>Housing Units:\" + str(hunits) + \n                             \"<br>People Homeless:\" + str(pHomeless) + \n                             \"<br>Minor Homeless:\" + str(minorHomeless)\n                            ) ).add_to(myMap)    \nmyMap","6a2a9204":"# House Demolished Dataset Sorted by Reason\ndataby_Dist_reason = xdataHouse.groupby(['district', 'demolition-reason'], as_index=False).sum()\ndataby_Dist_reason = databy_Dist_reason.drop(['year'], axis=1)\ndataby_Dist_reason","9e8e9c92":"# Update with latitude and longitude and Distance\n# Distance will be calculated in Miles\n\nmy_origin = (31.75354199, 35.25682731) # Al-Quds as Origin Location\nfor x, xrow in dfdistrictLocation.iterrows():\n    for y, yRow in databy_Dist_reason.iterrows():\n        if yRow[\"district\"] == xrow[\"Name\"]:\n            getlocation = (xrow.lat, xrow.lng)\n            getDistance = round(geodesic(my_origin, getlocation).miles, 0)\n            databy_Dist_reason.at[y, 'lat'] = xrow['lat']\n            databy_Dist_reason.at[y, 'lng'] = xrow['lng']\n            databy_Dist_reason.at[y, 'distance'] = getDistance\n            \ndataby_Dist_reason","9dee5ae3":"col_Criteria = 'district' #Column Name in the Dataset\nxMap = folium.Map(location = [31.952162, 35.233154],\n                  zoom_start= 8.5,\n                  min_zoom = 6,\n                  tiles='OpenStreetMap'\n                 )\n\nfor district, lat, lng, colorlist in zip(list(xdataByDistrict['district']),\n                              list(xdataByDistrict['lat']),\n                              list(xdataByDistrict['lng']),\n                              list(markColors)):\n    \n    myDistrict = \"<strong>District: \" + str(district) + \"<\/strong><br>Distance Al-Quds to \"+str(district)+\": <strong>\"+str(dis)+\" Miles<\/strong>\"  \n    \n    findReason = []\n    table_tooltip = \"\"\n    table_tooltip_rows = \"\"\n    for k, kRows in databy_Dist_reason.iterrows():\n        if (kRows[col_Criteria] == district and kRows['demolition-reason'] not in findReason):\n            table_tooltip_rows = (table_tooltip_rows +\n                \"<tr><td>\" + str(kRows['demolition-reason']) + \"<\/td>\" + \n                    \"<td align='center'>\" + str(kRows['housing-units']) + \"<\/td>\" + \n                    \"<td align='center'>\" + str(kRows['people-left-homeless']) + \"<\/td>\" + \n                    \"<td align='center'>\" + str(kRows['minors-left-homeless']) + \"<\/td><\/tr>\")\n    \n    table_tooltip = (\"<table border='1' width='300px'>\" + \n                    \"<tr><td>&nbsp;<\/td><td>&nbsp;<\/td><td colspan='2' align='center'>Homeless<\/td><\/tr>\" +\n                    \"<tr><td>Reason<\/td><td>House Units<\/td><td>People<\/td><td>Minor<\/td><\/tr>\" +\n                    table_tooltip_rows + \"<\/table>\")\n\n    folium.Marker([lat, lng], \n                  icon=folium.Icon(icon='home', prefix='fa', color = colorlist), \n                  tooltip = (myDistrict + \" \" + table_tooltip)\n                 ).add_to(xMap)\n\nxMap","85f2141b":"## **House Demolished Area Wise**","b7f340cf":"### **Verify Uniqune District, Area and Spelling**","669dba99":"## **House Demolished Yearly**","7fb4c539":"## **Creating the Functions For Graphically Presentation (PIE Chart)**","facba562":"## **House Demolished by Reason**","02051fe4":"# **House Demolished Statics**","feea91d7":"## **House Demolished [Type of Structure]**","f1d1c39e":"## **Forced Houme Demolitions in Palestine with Geographical Representation on Map and Calculate the distance with help of geolocation**","bf6020f2":"# **Geographical Presentation by Reason in Districts**","de4fe96d":"Forced Houme Demolitions in Palestine with Geographical Representation on Map and Calculate the distance with help of geolocation\n\nThanks for Appriciation","30735adf":"### **Data Loading ...**","bb698779":"## **House Demolished District Wise**","be8f483a":"### **External Data for Geographic Locations and Distance Calculation**","0b2248f8":"### **Handling Missing Values and Data Types**"}}