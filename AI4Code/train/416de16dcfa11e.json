{"cell_type":{"db98fe3e":"code","46656b7a":"code","b23a9df9":"code","a08a9807":"code","2d1ee142":"code","2b524240":"code","2b83871d":"code","6a7e4f7b":"code","45e193a6":"code","c184e0af":"code","e1d874dc":"code","cc5e2910":"code","c6709be0":"code","4413cd11":"code","fc993cf2":"code","3ff38187":"code","0bc28dbc":"code","59e5892d":"code","2cdb2c67":"code","29b16f2f":"code","d52f0b77":"code","88ad5676":"code","034df2e1":"code","859be2b3":"code","4595570c":"code","8253b586":"code","d283d52b":"code","79bef83f":"code","7353563e":"code","7a345d3e":"code","69a1af16":"code","721d4821":"code","34dd6617":"code","f0634fd2":"code","beaf63a8":"code","4474bd51":"code","6c596a29":"code","3bb66ba4":"code","c0700566":"code","bfee560e":"code","eaa4e50b":"code","002d69f7":"code","4164e2d9":"code","0dfeceb9":"code","0490a28b":"code","5d0ef253":"code","9f5bbd66":"code","34dc1d19":"code","9da080db":"code","45e00e31":"code","c08d5079":"code","07132e83":"code","6b4fb17f":"code","bd073d64":"code","fe864726":"code","379d7dd2":"code","966f992d":"code","a1e1632c":"markdown","b99e608f":"markdown","57291a5e":"markdown","9df6e447":"markdown","55737ece":"markdown","1f1782b6":"markdown","7af4d75f":"markdown","895d631c":"markdown","2698d26a":"markdown","15066da4":"markdown"},"source":{"db98fe3e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","46656b7a":"import os\nimport glob","b23a9df9":"path = \"\/kaggle\/input\/siim-acr-pneumothorax-segmentation-data\/\"\n\nfor sub_dir_path in glob.glob(path + \"*\"):\n    print(sub_dir_path)","a08a9807":"train_data_path = \"\/kaggle\/input\/siim-acr-pneumothorax-segmentation-data\/dicom-images-train\/\"\ntest_data_path = \"\/kaggle\/input\/siim-acr-pneumothorax-segmentation-data\/dicom-images-test\/\"","2d1ee142":"import pandas as pd\nimport numpy as np\nimport re","2b524240":"import cv2\nimport matplotlib.pyplot as plt","2b83871d":"train_data = []\n\nfor sub_dir_path in glob.glob(train_data_path + \"*\"):\n    if os.path.isdir(sub_dir_path):\n        dirname = sub_dir_path.split(\"\/\")[-1]\n        for sub_dir_path_one in os.listdir(sub_dir_path):\n            for filename in os.listdir(sub_dir_path+\"\/\"+sub_dir_path_one):\n                image_path = sub_dir_path + \"\/\"+sub_dir_path_one+\"\/\"+ filename\n                train_data.extend([dirname, image_path, filename[:-4]])\n        \n        \ntrain_df = pd.DataFrame(\n    {\n        \"dirname\" : train_data[::3],\n        \"path\" : train_data[1::3],\n        \"ImageId\" : train_data[2::3]\n    }\n)\n\ntrain_df.head()","6a7e4f7b":"train_df = train_df.sort_values(['path'])","45e193a6":"train_df.iloc[0,2]","c184e0af":"test_data = []\n\nfor sub_dir_path in glob.glob(test_data_path + \"*\"):\n    if os.path.isdir(sub_dir_path):\n        dirname = sub_dir_path.split(\"\/\")[-1]\n        for sub_dir_path_one in os.listdir(sub_dir_path):\n            for filename in os.listdir(sub_dir_path+\"\/\"+sub_dir_path_one):\n                image_path = sub_dir_path + \"\/\"+sub_dir_path_one+\"\/\"+ filename\n                test_data.extend([dirname, image_path])\n        \n        \ntest_df = pd.DataFrame(\n    {\n        \"dirname\" : test_data[::2],\n        \"path\" : test_data[1::2]\n    }\n)\n\ntest_df.head()","e1d874dc":"test_df = test_df.sort_values(['path'])","cc5e2910":"def run_length_decode(rle, height=1024, width=1024, fill_value=1):\n    component = np.zeros((height, width), np.float32)\n    component = component.reshape(-1)\n    rle = np.array([int(s) for s in rle.strip().split(' ')])\n    if len(rle) == 1:\n        component = component.reshape(width, height).T\n        resized = cv2.resize(component, (128,128), interpolation = cv2.INTER_AREA)\n#         stacked = np.dstack((resized,resized,resized))\n        return resized\n    else:\n        rle = rle.reshape(-1, 2)\n        start = 0\n        for index, length in rle:\n            start = start+index\n            end = start+length\n            component[start: end] = fill_value\n            start = end\n        component = component.reshape(width, height).T\n        resized = cv2.resize(component, (128,128), interpolation = cv2.INTER_AREA)\n#         stacked = np.dstack((resized,resized,resized))\n        return resized","c6709be0":"rle_df = pd.read_csv(\"\/kaggle\/input\/siim-acr-pneumothorax-segmentation-data\/train-rle.csv\")\nrle_df = rle_df.sort_values(['ImageId'])\nrle_df","4413cd11":"print(train_df.iloc[0,2])\nprint(rle_df.iloc[0,0])","fc993cf2":"rle_df = rle_df.drop_duplicates(subset=['ImageId'])\nrle_df","3ff38187":"new_df = pd.merge(train_df,rle_df, on = \"ImageId\", how = \"inner\")\nnew_df","0bc28dbc":"new_df.columns","59e5892d":"class_list = []\nfor value in new_df[' EncodedPixels']:\n#     print(len(value))\n    if len(value) == 3:\n        class_list.append(0)\n    else:\n        class_list.append(1)\n    \nprint(\"Number of images with Pneumothorax : \"+str(sum(class_list)))\n\nnew_df['Category'] = class_list","2cdb2c67":"#We dont need all 10675 images since most of the images dont contain any pneumothorax pixels and the remaining 2379 images contain very small number of pneumothorax pixels. So if train the model on all 10675 images, then our model might be biased towards the non-Pneumothorax pixels.\nnew_df.drop(new_df[new_df['Category'] == 0].index, inplace = True)\nnew_df","29b16f2f":"all_masks_list = []\n\nfor index in range(len(new_df.index)):\n    pixels = new_df.iloc[index,3]\n    image = run_length_decode(pixels)\n    all_masks_list.append(image)\n    \nprint(\"Total Masks : \"+str(len(all_masks_list)))","d52f0b77":"import pydicom","88ad5676":"file_path = train_df.iloc[0,1]\nimage_data = pydicom.read_file(file_path)\nimage = image_data.pixel_array\nprint(type(image))\nplt.imshow(image)","034df2e1":"all_images_list = []","859be2b3":"for image_idx in range(len(new_df.index)):\n    file_path = new_df.iloc[image_idx,1]\n    image_data = pydicom.read_file(file_path)\n    image = image_data.pixel_array\n    image = image.astype('float32')\/255.0\n    resized = cv2.resize(image, (128,128), interpolation = cv2.INTER_AREA)\n    stacked = np.dstack((resized,resized,resized))\n    all_images_list.append(stacked)\n\nprint(\"Total Images : \"+str(len(all_images_list)))","4595570c":"plt.imshow(all_images_list[2378])","8253b586":"plt.imshow(all_masks_list[2378])","d283d52b":"all_images_list[0].shape","79bef83f":"all_masks_list[0].shape","7353563e":"print(all_images_list[0].dtype)\nprint(all_masks_list[0].dtype)","7a345d3e":"import tensorflow as tf","69a1af16":"BUFFER_SIZE = 1000\nBATCH_SIZE = 32\nIMG_WIDTH = 128\nIMG_HEIGHT = 128\nLEARNING_RATE = 0.001","721d4821":"def _bytes_feature(value):\n    \"\"\"Returns a bytes_list from a string \/ byte.\"\"\"\n    if isinstance(value, type(tf.constant(0))): # if value ist tensor\n        value = value.numpy() # get value of tensor\n    return tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))\n\ndef _float_feature(value):\n  \"\"\"Returns a floast_list from a float \/ double.\"\"\"\n  return tf.train.Feature(float_list=tf.train.FloatList(value=[value]))\n\ndef _int64_feature(value):\n  \"\"\"Returns an int64_list from a bool \/ enum \/ int \/ uint.\"\"\"\n  return tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))\n\ndef serialize_array(array):\n    array = tf.io.serialize_tensor(array)\n    return array","34dd6617":"def parse_single_image(image, mask):\n    \n    #define the dictionary -- the structure -- of our single example\n    data = {\n        'height' : _int64_feature(image.shape[0]),\n        'width' : _int64_feature(image.shape[1]),\n        'depth' : _int64_feature(image.shape[2]),\n        'raw_image' : _bytes_feature(serialize_array(image)),\n        'mask' : _bytes_feature(serialize_array(mask))\n    }\n  #create an Example, wrapping the single features\n    out = tf.train.Example(features=tf.train.Features(feature=data))\n\n    return out","f0634fd2":"def write_images_to_tfr(images, mask, filename:str=\"images\"):\n    filename= filename+\".tfrecords\"\n    writer = tf.io.TFRecordWriter(filename) #create a writer that'll store our data to disk\n    count = 0\n\n    for index in range(len(images)):\n        #get the data we want to write\n        current_image = images[index] \n        current_mask = mask[index]\n\n        out = parse_single_image(image=current_image, mask=current_mask)\n        writer.write(out.SerializeToString())\n        count += 1\n\n    writer.close()\n    print(f\"Wrote {count} elements to TFRecord\")\n    return count","beaf63a8":"count = write_images_to_tfr(all_images_list, all_masks_list, filename=\".\/Train\")","4474bd51":"filename = \".\/Train.tfrecords\"","6c596a29":"!du -sh {filename}","3bb66ba4":"def parse_tfr_element(element):\n    \n  #use the same structure as above; it's kinda an outline of the structure we now want to create\n    data = {\n      'height': tf.io.FixedLenFeature([], tf.int64),\n      'width':tf.io.FixedLenFeature([], tf.int64),\n      'mask':tf.io.FixedLenFeature([], tf.string),\n      'raw_image' : tf.io.FixedLenFeature([], tf.string),\n      'depth':tf.io.FixedLenFeature([], tf.int64),\n    }\n\n    \n    content = tf.io.parse_single_example(element, data)\n  \n    height = content['height']\n    width = content['width']\n    depth = content['depth']\n    mask = content['mask']\n    raw_image = content['raw_image']\n  \n  \n  #get our 'feature'-- our image -- and reshape it appropriately\n  # feature_img = tf.io.parse_tensor(raw_image, out_type=tf.uint8)\n  # feature_img = tf.reshape(feature_img, shape=[height,width,depth])\n\n  # feature_mask = tf.io.parse_tensor(mask, out_type=tf.uint8)\n  # feature_mask = tf.reshape(feature_mask, shape=[height,width,1])\n\n    feature_img = tf.io.parse_tensor(raw_image, out_type=tf.float32)\n    feature_img = tf.reshape(feature_img, shape=[height,width,depth])\n  # feature_img = feature_img\/255.0\n    feature_mask = tf.io.parse_tensor(mask, out_type=tf.float32)\n    feature_mask = tf.reshape(feature_mask, shape=[height,width,1])\n  # feature_mask = feature_mask\/255.0\n\n    return (feature_img, feature_mask)","c0700566":"def get_dataset(filename):\n    \n    dataset = tf.data.TFRecordDataset(filename)\n    \n    dataset = dataset.map(parse_tfr_element,num_parallel_calls = tf.data.AUTOTUNE)\n    \n    dataset = dataset.shuffle(BUFFER_SIZE)\n    \n    dataset = dataset.batch(BATCH_SIZE)\n    \n    return dataset\n    \n    \n  ","bfee560e":"train_dataset = get_dataset(filename)","eaa4e50b":"del all_images_list\ndel all_masks_list","002d69f7":"images_list = []\nmasks_list = []\nfor image_features in train_dataset.take(1):\n  image_raw = image_features[0][1].numpy()\n  mask_raw = image_features[1][1].numpy()\n  images_list.append(image_raw)\n  masks_list.append(mask_raw)\n  plt.imshow(image_raw)\n  plt.show()\n  print(image_raw.shape)\n  plt.imshow(mask_raw.reshape(128,128))\n  plt.show()\n  print(mask_raw.shape)","4164e2d9":"from tensorflow import keras\nfrom tensorflow.keras import layers","0dfeceb9":"base_model = tf.keras.applications.MobileNetV2(input_shape=[128, 128, 3], include_top=False)\n\n# Use the activations of these layers\nlayer_names = [\n    'block_1_expand_relu',   # 64x64\n    'block_3_expand_relu',   # 32x32\n    'block_6_expand_relu',   # 16x16\n    'block_13_expand_relu',  # 8x8\n    'block_16_project',      # 4x4\n]\nbase_model_outputs = [base_model.get_layer(name).output for name in layer_names]\nprint(base_model_outputs)\n# Create the feature extraction model\ndown_stack = tf.keras.Model(inputs=base_model.input, outputs=base_model_outputs)\n\ndown_stack.trainable = False","0490a28b":"!pip install -q git+https:\/\/github.com\/tensorflow\/examples.git","5d0ef253":"from tensorflow_examples.models.pix2pix import pix2pix","9f5bbd66":"up_stack = [\n    pix2pix.upsample(512, 3),  # 4x4 -> 8x8\n    pix2pix.upsample(256, 3),  # 8x8 -> 16x16\n    pix2pix.upsample(128, 3),  # 16x16 -> 32x32\n    pix2pix.upsample(64, 3),   # 32x32 -> 64x64\n]","34dc1d19":"def unet_model(output_channels:int):\n    inputs = tf.keras.layers.Input(shape=[128, 128, 3])\n\n    \n  # Downsampling through the model\n    skips = down_stack(inputs)\n    x = skips[-1]\n    skips = reversed(skips[:-1])\n\n  # Upsampling and establishing the skip connections\n    for up, skip in zip(up_stack, skips):\n        x = up(x)\n        concat = tf.keras.layers.Concatenate()\n        x = concat([x, skip])\n\n  # This is the last layer of the model\n    last = tf.keras.layers.Conv2DTranspose(filters=output_channels, kernel_size=3, strides=2,padding='same')  #64x64 -> 128x128\n\n    x = last(x)\n\n    return tf.keras.Model(inputs=inputs, outputs=x)","9da080db":"unet_model = unet_model(3)\nunet_model.summary()","45e00e31":"tf.keras.utils.plot_model(unet_model,show_shapes=True)","c08d5079":"unet_model.compile(optimizer='rmsprop',\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])","07132e83":"def add_sample_weights(image, label):\n    \n    class_weights = tf.constant([1.0, 9.0])\n    class_weights = class_weights\/tf.reduce_sum(class_weights)\n\n  # Create an image of `sample_weights` by using the label at each pixel as an \n  # index into the `class weights` .\n    sample_weights = tf.gather(class_weights, indices=tf.cast(label, tf.int32))\n\n    return image, label, sample_weights","6b4fb17f":"reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(monitor='loss', factor=0.25,\n                              patience=3, min_lr=0.001)","bd073d64":"filepath = \".\/BestModel\"\nsave_model = tf.keras.callbacks.ModelCheckpoint(filepath,monitor=\"loss\",save_best_only=True)","fe864726":"unet_model.fit(train_dataset.map(add_sample_weights), epochs=250, callbacks = [save_model,reduce_lr])","379d7dd2":"def create_mask(output):\n    output = tf.argmax(output[0], axis=-1)\n    output = output[..., tf.newaxis]\n    plt.imshow(output)\n    plt.show()","966f992d":"for image,mask in train_dataset.take(1):\n    \n    plt.imshow(image[0])\n    plt.show()\n    \n    plt.imshow(mask[0])\n    plt.show()\n    \n    output = unet_model.predict(image)\n    create_mask(output)\n\n\n\n  ","a1e1632c":"We have 2375 masks extracted and stored in all_masks_list. Lets extract the corresponding training images into all_images_list using pydicom:","b99e608f":"# **Extracting data using pydicom and preprocessing:**","57291a5e":"Storing file paths of training images:","9df6e447":"Note: This is a very simple architecture containing very few parameters for training successfully on Kaggle basic kernel. If you use a paid version, then modify the architecture to include more filters.","55737ece":"Converting rle strings to masks:","1f1782b6":"Storing file paths of test images if required for later use:","7af4d75f":"# **TF Record generation :**","895d631c":"Here we observe that after sorting both the image ids are the same indicating that the lists: all_images_list and all_masks_list will contain corresponding image and masks.","2698d26a":"# **TF Standard UNet Model with MobileNet backbone and Visualising the results:**","15066da4":"# **Finally, please upvote this notebook if you find it helpful :)**"}}