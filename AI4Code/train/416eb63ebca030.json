{"cell_type":{"d66fde2a":"code","b79b6651":"code","0d43f3a0":"code","741917f6":"code","ef51942b":"code","ec9b1ae4":"code","86ff9fa5":"code","d0baeae2":"code","36237738":"code","f04b1dab":"code","a96fe145":"code","f8196ea5":"code","c89e44d6":"code","a7a9771a":"code","741708c6":"code","4808879d":"code","6893e3d1":"code","753d0e0d":"code","a606a463":"code","770546b6":"code","535daec0":"code","7068f124":"code","6b4687ea":"code","b65ec795":"code","79aba1b0":"code","75c6b6f4":"code","497933db":"code","1a451f95":"code","62dbc79a":"code","bfe6f9bb":"code","1e5b154d":"code","25976398":"code","b87157ff":"code","c1fb2d8e":"code","e1f7d646":"code","89d96b98":"code","c27ff75f":"code","58dd71d0":"code","cdd0b3eb":"code","5df9d313":"code","9a9ec79a":"code","3219c3fc":"code","2d029b57":"code","52b92957":"code","fdc3772f":"code","8f90abbf":"code","c38687cf":"code","ec58b693":"code","1bc35afc":"code","6482f1cd":"code","416504cc":"code","ded23acd":"code","26f1cfb8":"code","75849da6":"code","f3020534":"code","2de72f8d":"code","7d2be379":"code","a3f270c0":"code","80a20131":"code","8ddae0c9":"code","3827c876":"code","8ce7656d":"code","ebf973d4":"code","baf13747":"code","1225a612":"code","9ff10214":"code","e71e4af5":"code","d109ed4b":"code","fd7a4a4d":"code","089bcac7":"code","580a879d":"code","12674133":"code","8df7e35a":"code","dae3b240":"code","a1240ea9":"code","e3c05a61":"code","a0b75790":"code","7d32e533":"code","ffd2e056":"code","8df473ca":"code","78c5f2ec":"code","304f9fd0":"code","66666951":"code","bfae52a2":"code","7b15cbcf":"code","66c60d32":"code","5f0a6611":"code","01dc684c":"code","6043e053":"code","fe207687":"code","a861f2c6":"markdown","7b8b063d":"markdown","5d2399fe":"markdown","e942ab8e":"markdown","80cc8dd5":"markdown","1b7324f6":"markdown","084bbd35":"markdown","d319f83e":"markdown","a750f5fa":"markdown","0c8dac22":"markdown","b99ac18b":"markdown","a17f43d2":"markdown","d62ba006":"markdown","960d5f4d":"markdown","4adc3838":"markdown","8b83e3e5":"markdown","4d4d9bff":"markdown","c68c30af":"markdown","6b305610":"markdown","e3d5b82f":"markdown","6bf094a2":"markdown","c9393876":"markdown","83161d47":"markdown","5e1fb5a3":"markdown","090b27c8":"markdown","9caf2f5d":"markdown","47b647e6":"markdown","75f8394f":"markdown","ecfa3dd9":"markdown","596aea3f":"markdown","ac504cbb":"markdown","73abf1ef":"markdown","459cfbc2":"markdown","9f6a661f":"markdown","da3be9d7":"markdown","ffd4a236":"markdown","cc930dfc":"markdown","829ea09a":"markdown","79af8136":"markdown","5f22a9d0":"markdown","d476353c":"markdown","448c1a49":"markdown","ab0c77dc":"markdown","69884115":"markdown","feb0781b":"markdown","26fd10d4":"markdown","32f6971d":"markdown","2f169453":"markdown","7ee3870a":"markdown","a813d010":"markdown"},"source":{"d66fde2a":"import numpy as np\nimport pandas as pd\nimport io\nimport requests\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n#import pickle\nimport os\nimport warnings\nwarnings.filterwarnings('ignore')\npd.options.display.float_format = '{:,.1f}'.format","b79b6651":"columns = ['age', 'workClass', 'fnlwgt', 'education', 'education-num','marital-status', 'occupation', 'relationship','race', 'sex', 'capital-gain', 'capital-loss', 'hours-per-week', 'native-country', 'income']\ntrain_data = pd.read_csv('..\/input\/adult-census-income\/adult.csv', names=columns, na_values='?',skiprows=1)","0d43f3a0":"data_numerics = ['int8','int16', 'int32', 'int64', 'float16', 'float32', 'float64']\ndisplay(train_data.select_dtypes(include=data_numerics).columns)\nprint(train_data.select_dtypes(include=data_numerics).shape)\ndata_numerics = train_data.select_dtypes(include=data_numerics)","741917f6":"display(train_data.select_dtypes(include=['object']).columns)\nprint(train_data.select_dtypes(include=object).shape)\ndata_cat = train_data.select_dtypes(include=['object'])","ef51942b":"train_data[['age', 'fnlwgt', 'education-num', 'capital-gain', 'capital-loss','hours-per-week']].describe()","ec9b1ae4":"train_data[['workClass', 'education', 'marital-status', 'occupation',\n       'relationship', 'race', 'sex', 'native-country', 'income']].describe()","86ff9fa5":"features = ['age', 'fnlwgt', 'education-num', 'capital-gain', 'capital-loss','hours-per-week']\nplt.figure(figsize=(15, 7))\nfor i in range(0, len(features)):\n    plt.subplot(1, 6, i+1)\n    sns.boxplot(train_data[features[i]],color='#982642')\n    plt.tight_layout()\n    \nplt.show","d0baeae2":"data_num = train_data[features]\nk = len(data_num.columns)\nn = 3\nm = (k - 1) \/\/ n + 1\nfig, axes = plt.subplots(m, n, figsize=(n * 5, m * 3))\nfor i, (name, col) in enumerate(data_num.iteritems()):\n    r, c = i \/\/ n, i % n\n    ax = axes[r, c]\n    col.hist(ax=ax, color='#73bbff')\n    ax2 = col.plot.kde(ax=ax, secondary_y=True, title=name, color='red')\n    ax2.set_ylim(0)\n\nfig.tight_layout()\nplt.show","36237738":"data_category = list(train_data['workClass'].unique())\n\nc = [data_category]\nplt.figure(figsize=(15,10))\nfor i in range(0, len(c)):\n    plt.subplot(1, 1, i+1)\n    ax = sns.countplot(x='workClass',data=train_data[train_data['workClass'].isin(c[i])])\n    for p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()),\n        xy = (p.get_x() + p.get_width() \/ 2, p.get_height()),     \n        xytext=(0,3),fontsize=10,\n        textcoords=\"offset points\",\n        ha ='center', va ='bottom')\n        plt.xticks(rotation=90)\n        \nax.set_ylabel(\"\")\nplt.show()","f04b1dab":"data_category = list(train_data['occupation'].unique())\n\nc = [data_category]\nplt.figure(figsize=(12,10))\nfor i in range(0, len(c)):\n    plt.subplot(1, 1, i+1)\n    ax = sns.countplot(x='occupation',data=train_data[train_data['occupation'].isin(c[i])])\n    for p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()),\n        xy = (p.get_x() + p.get_width() \/ 2, p.get_height()),     \n        xytext=(0,3),fontsize=10,\n        textcoords=\"offset points\",\n        ha ='center', va ='bottom')\n        plt.xticks(rotation=90)\n        \nax.set_ylabel(\"\")\nplt.show()","a96fe145":"data_missing_value = train_data.isnull().sum().reset_index()\ndata_missing_value.columns = ['feature','missing_value']\ndata_missing_value['percentage'] = round((data_missing_value['missing_value']\/len(train_data))*100,2)\ndata_missing_value = data_missing_value.sort_values('percentage', ascending=False).reset_index(drop=True)\ndata_missing_value = data_missing_value[data_missing_value['percentage']>0]\ndata_missing_value","f8196ea5":"x = data_missing_value['feature']\ny = data_missing_value['percentage']\nplt.figure(figsize=(10,8))\nbarh = plt.bar(x=x, height=y, data=data_missing_value, \n       color = '#842e2e', \n       edgecolor= '#2e2e2e',\n       linewidth = 2) \n\nplt.title('Missing Value', fontsize = 16)\nplt.ylabel('Persentage', fontsize=14)\nplt.xlabel('Feature', fontsize=14)\n\nx_numbers = range(len(x))\nfor i in x_numbers:\n    plt.text(x = x_numbers[i]-0.12,y = y[i]+0.08,s = str(round(y[i],2))+'%',size = 15)\nplt.tight_layout\nplt.show","c89e44d6":"train_data[['age','workClass']]","a7a9771a":"def conditions(s):\n    if (s['age'] >= 18) and (s['workClass'] is np.nan):\n        return 'Without-pay'\n    elif (s['age'] < 18) and (s['workClass'] is np.nan):\n        return 'Never-worked'\n    else:\n        return s['workClass']","741708c6":"train_data['workClass'] = train_data.apply(conditions, axis=1)","4808879d":"train_data['occupation'] = train_data['occupation'].fillna('Other')","6893e3d1":"train_data.dropna(subset=['native-country'],inplace=True)\ntrain_data.dropna(subset=['income'],inplace=True)","753d0e0d":"print('Jumlah duplicate values yang ada di data frame ada' ,train_data.duplicated().sum())\nduplicate_data = train_data[train_data.duplicated(keep=False)]\nduplicate_data.sort_values('fnlwgt', ascending=False)","a606a463":"train_data = train_data.drop_duplicates()","770546b6":"for column in train_data.columns:\n    print (\"---- %s ---\" % column)\n    print (train_data[column].value_counts())","535daec0":"train_data=train_data.drop('fnlwgt', 1)\ntrain_data=train_data.drop('education-num', 1)","7068f124":"Q1 = train_data['age'].quantile(0.25)\nQ3 = train_data['age'].quantile(0.75)\nIQR = Q3 - Q1\nlow_limit = Q1 - (1.5 * IQR)\nhigh_limit = Q3 + (1.5 * IQR)\nfiltered_entries = ((train_data['age'] >= low_limit) & (train_data['age'] <= high_limit))\ntrain_data = train_data[filtered_entries]","6b4687ea":"Q1 = train_data['capital-gain'].quantile(0.25)\nQ3 = train_data['age'].quantile(0.75)\nIQR = Q3 - Q1\nlow_limit = Q1 - (1.5 * IQR)\nhigh_limit = Q3 + (1.5 * IQR)\nfiltered_entries = ((train_data['age'] >= low_limit) & (train_data['age'] <= high_limit))\ntrain_data = train_data[filtered_entries]","b65ec795":"Q1 = train_data['capital-loss'].quantile(0.25)\nQ3 = train_data['age'].quantile(0.75)\nIQR = Q3 - Q1\nlow_limit = Q1 - (1.5 * IQR)\nhigh_limit = Q3 + (1.5 * IQR)\nfiltered_entries = ((train_data['age'] >= low_limit) & (train_data['age'] <= high_limit))\ntrain_data = train_data[filtered_entries]","79aba1b0":"Q1 = train_data['hours-per-week'].quantile(0.25)\nQ3 = train_data['hours-per-week'].quantile(0.75)\nIQR = Q3 - Q1\nlow_limit = Q1 - (1.5 * IQR)\nhigh_limit = Q3 + (1.5 * IQR)\nfiltered_entries = ((train_data['hours-per-week'] >= low_limit) & (train_data['hours-per-week'] <= high_limit))\ntrain_data = train_data[filtered_entries]","75c6b6f4":"train_datavis = train_data.copy()\ntrain_data_onehot = train_data.copy()\ntrain_clust = train_data.copy()\ntrain_clustvis = train_clust\ntrain_clustvis_rel = train_clustvis\ntrain_clustvis_rel['relationship'] = train_clustvis_rel['relationship'].map({'Not-in-family': 'Not In Family', 'Wife': 'In Family', 'Unmarried': 'Not In Family', 'Other-relative': 'In Family','Husband':'In Family','Own-child': 'In Family'}).astype(str)\ntrain_clustvis_rel['age'] = train_clustvis_rel['age'].map({17: 'Productive-age',18: 'Productive-age',19: 'Productive-age',20: 'Productive-age',21: 'Productive-age',22: 'Productive-age',23: 'Productive-age',24: 'Productive-age',25: 'Productive-age',26: 'Productive-age',27: 'Productive-age',28: 'Productive-age',29: 'Productive-age',30: 'Productive-age',31: 'Productive-age',32: 'Productive-age',33: 'Productive-age',34: 'Productive-age',35: 'Productive-age',36: 'Productive-age',37: 'Productive-age',38: 'Productive-age',39: 'Productive-age',40: 'Productive-age',41: 'Productive-age',42: 'Productive-age',43: 'Productive-age',44: 'Productive-age',45: 'Productive-age',46: 'Productive-age',47: 'Productive-age',48: 'Above-productive',49: 'Above-productive',50: 'Above-productive',51: 'Above-productive',52: 'Above-productive',53: 'Above-productive',54: 'Above-productive',55: 'Above-productive',56: 'Above-productive',57: 'Above-productive',58: 'Above-productive',59: 'Above-productive',60: 'Above-productive',61: 'Above-productive',62: 'Above-productive',63: 'Above-productive',64: 'Aged',65: 'Aged',66: 'Aged',67: 'Aged',68: 'Aged',69: 'Aged',70: 'Aged',71: 'Aged',72: 'Aged',73: 'Aged',74: 'Aged',75: 'Aged',76: 'Aged',77: 'Aged',78: 'Aged',79: 'Aged',80: 'Aged',81: 'Aged',82: 'Aged',83: 'Aged',84: 'Aged',85: 'Aged',86: 'Aged',87: 'Aged',88: 'Aged',90: 'Aged'}).astype(str) ","497933db":"train_data_onehot['age'] = train_data_onehot['age'].map({17: 'Productive-age',18: 'Productive-age',19: 'Productive-age',20: 'Productive-age',21: 'Productive-age',22: 'Productive-age',23: 'Productive-age',24: 'Productive-age',25: 'Productive-age',26: 'Productive-age',27: 'Productive-age',28: 'Productive-age',29: 'Productive-age',30: 'Productive-age',31: 'Productive-age',32: 'Productive-age',33: 'Productive-age',34: 'Productive-age',35: 'Productive-age',36: 'Productive-age',37: 'Productive-age',38: 'Productive-age',39: 'Productive-age',40: 'Productive-age',41: 'Productive-age',42: 'Productive-age',43: 'Productive-age',44: 'Productive-age',45: 'Productive-age',46: 'Productive-age',47: 'Productive-age',48: 'Above-productive',49: 'Above-productive',50: 'Above-productive',51: 'Above-productive',52: 'Above-productive',53: 'Above-productive',54: 'Above-productive',55: 'Above-productive',56: 'Above-productive',57: 'Above-productive',58: 'Above-productive',59: 'Above-productive',60: 'Above-productive',61: 'Above-productive',62: 'Above-productive',63: 'Above-productive',64: 'Aged',65: 'Aged',66: 'Aged',67: 'Aged',68: 'Aged',69: 'Aged',70: 'Aged',71: 'Aged',72: 'Aged',73: 'Aged',74: 'Aged',75: 'Aged',76: 'Aged',77: 'Aged',78: 'Aged',79: 'Aged',80: 'Aged',81: 'Aged',82: 'Aged',83: 'Aged',84: 'Aged',85: 'Aged',86: 'Aged',87: 'Aged',88: 'Aged',90: 'Aged'}).astype(str)\ntrain_data_onehot['income'] = train_data_onehot['income'].map({'<=50K': 0, '>50K': 1}).astype(int)\ntrain_data_onehot['marital-status'] = train_data_onehot['marital-status'].map({'Widowed': 'Not married', 'Married-spouse-absent': 'Married', 'Married-civ-spouse': 'Married', 'Married-AF-spouse': 'Married', 'Divorced': 'Not married','Separated': 'Not married', 'Never-married': 'Married'}).astype(str)\ntrain_data_onehot['workClass'] = train_data_onehot['workClass'].map({'Self-emp-inc': 'Without-pay', 'Without-pay': 'Without-pay','Federal-gov': 'Government', 'State-gov': 'Government', 'Local-gov': 'Government','Private': 'Private', 'Self-emp-not-inc': 'Without-pay','Never-worked':'Not-work'}).astype(str)\ntrain_data_onehot['education'] = train_data_onehot['education'].map({'Preschool': 'Preschool', '1st-4th': 'Primary-school', '5th-6th': 'Primary-school', '7th-8th': 'Junior-high-school','9th': 'Junior-high-school','10th': 'Senior-high-school', '11th': 'Senior-high-school', '12th': 'Senior-high-school','HS-grad': 'Senior-high-school','Prof-school': 'Senior-high-school','Assoc-voc': 'Senior-high-school','Assoc-acdm': 'Senior-high-school', 'Some-college': 'Senior-high-school','Bachelors': 'Bachelors', 'Masters': 'Masters', 'Doctorate': 'Doctorate' }).astype(str)\ntrain_data_onehot['native-country'] = train_data_onehot['native-country'].map({'Canada': 'USA','Outlying-US(Guam-USVI-etc)': 'USA','United-States': 'USA','Cambodia': 'Asia','China': 'Asia','Hong': 'Asia','India': 'Asia','Iran': 'Asia','Japan': 'Asia','Laos': 'Asia','Philippines': 'Asia','Taiwan': 'Asia','Thailand': 'Asia','Vietnam': 'Asia', 'Columbia': 'South America','Cuba': 'South America','Dominican-Republic': 'South America','Ecuador': 'South America','El-Salvador': 'South America','Guatemala': 'South America','Haiti': 'South America','Honduras': 'South America','Jamaica': 'South America','Mexico': 'South America','Nicaragua': 'South America','Peru': 'South America','Puerto-Rico': 'South America','South': 'South America','Trinadad&Tobago': 'South America','England': 'Europe','France': 'Europe','Germany': 'Europe','Greece': 'Europe','Holand-Netherlands': 'Europe','Hungary': 'Europe','Ireland': 'Europe','Italy': 'Europe','Poland': 'Europe','Portugal': 'Europe','Scotland': 'Europe','Yugoslavia': 'Europe'}).astype(str)","1a451f95":"train_data_One = pd.get_dummies(train_data_onehot)","62dbc79a":"train_data['age'] = train_data['age'].map({17: 0,18: 0,19: 0,20: 0,21: 0,22: 0,23: 0,24: 0,25: 0,26: 0,27: 0,28: 0,29: 0,30: 0,31: 0,32: 0,33: 0,34: 0,35: 0,36: 0,37: 0,38: 0,39: 0,40: 0,41: 0,42: 0,43: 0,44: 0,45: 0,46: 0,47: 0,48: 1,49: 1,50: 1,51: 1,52: 1,53: 1,54: 1,55: 1,56: 1,57: 1,58: 1,59: 1,60: 1,61: 1,62: 1,63: 1,64: 2,65: 2,66: 2,67: 2,68: 2,69: 2,70: 2,71: 2,72: 2,73: 2,74: 2,75: 2,76: 2,77: 2,78: 2,79: 2,80: 2,81: 2,82: 2,83: 2,84: 2,85: 2,86: 2,87: 2,88: 2,90: 2}).astype(int)\ntrain_data['income'] = train_data['income'].map({'<=50K': 0, '>50K': 1}).astype(int)\ntrain_data['capital-gain'] = train_data['capital-gain'].map({0: 0, 114: 1,401: 1,594: 1,914: 1,991: 1,1055: 1,1086: 1,1111: 1,1151: 1,1173: 1,1409: 1,1424: 1,1455: 1,1471: 1,1506: 1,1639: 1,1797: 1,1831: 1,1848: 1,2009: 1,2036: 1,2050: 1,2062: 1,2105: 1,2174: 1,2176: 1,2202: 1,2228: 1,2290: 1,2329: 1,2346: 1,2354: 1,2387: 1,2407: 1,2414: 1,2463: 1,2538: 1,2580: 1,2597: 1,2635: 1,2653: 1,2829: 1,2885: 1,2907: 1,2936: 1,2961: 1,2964: 1,2977: 1,2993: 1,3103: 1,3137: 1,3273: 1,3325: 1,3411: 1,3418: 1,3432: 1,3456: 1,3464: 1,3471: 1,3674: 1,3781: 1,3818: 1,3887: 1,3908: 1,3942: 1,4064: 1,4101: 1,4386: 1,4416: 1,4508: 1,4650: 1,4687: 1,4787: 1,4865: 1,4931: 1,4934: 1,5013: 1,5060: 1,5178: 1,5455: 1,5556: 1,5721: 1,6097: 1,6360: 1,6418: 1,6497: 1,6514: 1,6723: 1,6767: 1,6849: 1,7298: 1,7430: 1,7443: 1,7688: 1,7896: 1,7978: 1,8614: 1,9386: 1,9562: 1,10520: 1,10566: 1,10605: 1,11678: 1,13550: 1,14084: 1,14344: 1,15020: 1,15024: 1,15831: 1,18481: 1,20051: 1,22040: 1,25124: 1,25236: 1,27828: 1,34095: 1,41310: 1,99999: 1}).astype(int)\ntrain_data['capital-loss'] = train_data['capital-loss'].map({0: 0, 155: 1,213: 1,323: 1,419: 1,625: 1,653: 1,810: 1,880: 1,974: 1,1092: 1,1138: 1,1258: 1,1340: 1,1380: 1,1408: 1,1411: 1,1485: 1,1504: 1,1539: 1,1564: 1,1573: 1,1579: 1,1590: 1,1594: 1,1602: 1,1617: 1,1628: 1,1648: 1,1651: 1,1668: 1,1669: 1,1672: 1,1719: 1,1721: 1,1726: 1,1735: 1,1740: 1,1741: 1,1755: 1,1762: 1,1816: 1,1825: 1,1844: 1,1848: 1,1876: 1,1887: 1,1902: 1,1944: 1,1974: 1,1977: 1,1980: 1,2001: 1,2002: 1,2042: 1,2051: 1,2057: 1,2080: 1,2129: 1,2149: 1,2163: 1,2174: 1,2179: 1,2201: 1,2205: 1,2206: 1,2231: 1,2238: 1,2246: 1,2258: 1,2267: 1,2282: 1,2339: 1,2352: 1,2377: 1,2392: 1,2415: 1,2444: 1,2457: 1,2467: 1,2472: 1,2489: 1,2547: 1,2559: 1,2603: 1,2754: 1,2824: 1,3004: 1,3683: 1,3770: 1,3900: 1,4356: 1}).astype(int)\ntrain_data['sex'] = train_data['sex'].map({'Female': 0, 'Male': 1}).astype(int)\ntrain_data['race'] = train_data['race'].map({'Other': 0, 'White': 1,'Black': 2, 'Asian-Pac-Islander': 3, 'Amer-Indian-Eskimo': 4}).astype(int)\ntrain_data['marital-status'] = train_data['marital-status'].map({'Widowed': 0, 'Married-spouse-absent': 1, 'Married-civ-spouse': 1, 'Married-AF-spouse': 1, 'Divorced': 0,'Separated': 0, 'Never-married': 1}).astype(int)\ntrain_data['workClass'] = train_data['workClass'].map({'Self-emp-inc': 0, 'Without-pay': 0,'Federal-gov': 1, 'State-gov': 1, 'Local-gov': 1,'Private': 3, 'Self-emp-not-inc': 0,'Never-worked':2}).astype(int)\ntrain_data['education'] = train_data['education'].map({'Preschool': 0, '1st-4th': 1, '5th-6th': 1, '7th-8th': 2,'9th': 2,'10th': 3, '11th': 3, '12th': 3,'HS-grad': 3,'Prof-school': 3,'Assoc-voc': 3,'Assoc-acdm': 3, 'Some-college': 3,'Bachelors': 4, 'Masters': 5, 'Doctorate': 6 }).astype(int)\ntrain_data['occupation'] = train_data['occupation'].map({ 'Tech-support': 1, 'Handlers-cleaners': 2, 'Adm-clerical': 3, 'Farming-fishing': 4, 'Prof-specialty': 5,'Machine-op-inspct': 6, 'Exec-managerial': 7,'Priv-house-serv': 8,'Craft-repair': 9,'Sales': 10, 'Transport-moving': 11, 'Armed-Forces': 12, 'Other-service': 13,'Protective-serv':14,'Other':15}).astype(int)\ntrain_data['relationship'] = train_data['relationship'].map({'Not-in-family': 0, 'Wife': 1, 'Unmarried': 2, 'Other-relative': 3,'Husband': 4,'Own-child': 5}).astype(int)\ntrain_data['native-country'] = train_data['native-country'].map({'Canada': 0,'Outlying-US(Guam-USVI-etc)': 0,'United-States': 0,'Cambodia': 1,'China': 1,'Hong': 1,'India': 1,'Iran': 1,'Japan': 1,'Laos': 1,'Philippines': 1,'Taiwan': 1,'Thailand': 1,'Vietnam': 1, 'Columbia': 2,'Cuba': 2,'Dominican-Republic': 2,'Ecuador': 2,'El-Salvador': 2,'Guatemala': 2,'Haiti': 2,'Honduras': 2,'Jamaica': 2,'Mexico': 2,'Nicaragua': 2,'Peru': 2,'Puerto-Rico': 2,'South': 2,'Trinadad&Tobago': 2,'England': 3,'France': 3,'Germany': 3,'Greece': 3,'Holand-Netherlands': 3,'Hungary': 3,'Ireland': 3,'Italy': 3,'Poland': 3,'Portugal': 3,'Scotland': 3,'Yugoslavia': 3}).astype(int)","bfe6f9bb":"train_datavis.hist(figsize=(10,10));","1e5b154d":"plt.figure(figsize=(15,8))\nax=sns.distplot(train_datavis['age'],hist_kws=dict(edgecolor=\"k\", linewidth=2),kde_kws={\"color\": \"#ce0d55\", \"lw\": 2})\nax.set_title('Age Distribution')\nax.set_xlabel('Age',fontsize = 14);","25976398":"plt.figure(figsize=(15,8))\nax=sns.distplot(train_datavis['hours-per-week'],hist_kws=dict(edgecolor=\"k\", linewidth=2),kde_kws={\"color\": \"#ce0d55\", \"lw\": 2})\nax.set_title('Hours\/Week Distribution')\nax.set_xlabel('Hours Per Week', fontsize = 14);","b87157ff":"num_col = train_datavis.dtypes[train_datavis.dtypes != 'object']\n\nfig = plt.figure(figsize = (15,8))\nsns.heatmap(train_datavis[list(num_col.index)].corr(),annot = True,square = True)\nax.set_title('')\nax.set_xlabel('Hours Per Week', fontsize = 14);","c1fb2d8e":"ocpt = pd.crosstab(train_datavis['occupation'], train_datavis['income'])\nage= pd.crosstab(train_datavis['age'], train_datavis['income'])\nwc= pd.crosstab(train_datavis['workClass'], train_datavis['income'])\nedu = pd.crosstab(train_datavis['education'], train_datavis['income'])\nmarit_stat = pd.crosstab(train_datavis['marital-status'], train_datavis['income'])\nrace = pd.crosstab(train_datavis['race'], train_datavis['income'])\ncountry = pd.crosstab(train_datavis['native-country'], train_datavis['income'])\nrelasi = pd.crosstab(train_datavis['relationship'], train_datavis['income'])\nsextype = pd.crosstab(train_datavis['sex'], train_datavis['income'])","e1f7d646":"fig = plt.figure(figsize = (20,6))\nax = fig.add_subplot(1,2,1)\n(ocpt.div(ocpt.sum(axis= 1),axis = 0)*100).sort_values(by= '<=50K').plot(kind = 'bar',ax=ax);\nplt.xlabel(\"Occupation\",fontsize = 14);\nplt.ylabel('Proportion of People (%)',fontsize = 14);","89d96b98":"fig = plt.figure(figsize = (10,6))\nax=sns.countplot(train_datavis['occupation'], hue=train_datavis['income'])\nax.set_title('Occupation vs Income')\nplt.xlabel(\"Occupation\",fontsize = 10);\nplt.xticks(rotation=90)\nplt.ylabel('');","c27ff75f":"fig = plt.figure(figsize = (15,10))\nax=sns.countplot(train_datavis['occupation'],\n                order = train_datavis['occupation'].value_counts().index)\nax.set_title('Occupation <=50K')\nplt.xlabel(\"Occupation\",fontsize = 15);\nplt.xticks(rotation=90, fontsize = 10)\nplt.ylabel('');","58dd71d0":"a= train_clustvis.loc[train_clustvis['relationship'] == 'In Family']\nplt.figure(figsize=(12,7))\nax=sns.countplot(a['occupation'],\n                order = a['occupation'].value_counts().index)\nax.set_title('Occupation \/ Wage Class (<=50K)')\nax.set_xlabel('Occupation',fontsize=18)\nax.set_ylabel('Count',fontsize=18)\nplt.xticks(rotation=90)\nplt.show()","cdd0b3eb":"fig = plt.figure(figsize = (20,6))\nax = fig.add_subplot(1,2,2)\n(wc.div(wc.sum(axis = 1),axis = 0)*100).sort_values(by = '<=50K').plot(kind = 'bar',ax=ax);\nplt.xlabel(\"Workclass\",fontsize = 14);\nplt.ylabel('Proportion of People (%)',fontsize = 14);","5df9d313":"fig = plt.figure(figsize = (9,6))\nax=sns.countplot(train_datavis['workClass'], hue=train_datavis['income'])\nax.set_title('WorkClass vs Income')\nplt.xlabel(\"WorkClass\",fontsize = 14);\nplt.xticks(rotation=90)\nplt.ylabel('');","9a9ec79a":"fig = plt.figure(figsize = (20,6))\nax = fig.add_subplot(1,2,1)\n(edu.div(edu.sum(axis = 1),axis = 0)*100).sort_values(by = '<=50K').plot(kind = 'bar',ax =ax);\nplt.xlabel('Education',fontsize = 14);\nplt.ylabel('Proportion of People (%)',fontsize = 14);","3219c3fc":"fig = plt.figure(figsize = (9,6))\nax=sns.countplot(train_datavis['education'], hue=train_datavis['income'])\nax.set_title('Education vs Income')\nplt.xlabel(\"Education\",fontsize = 14);\nplt.xticks(rotation=90)\nplt.ylabel('');","2d029b57":"fig = plt.figure(figsize = (15,8))\nax=sns.countplot(train_datavis['education'],\n                order = train_datavis['education'].value_counts().index)\nax.set_title('education <=50K')\nplt.xlabel(\"education\",fontsize = 15);\nplt.xticks(rotation=90, fontsize = 10)\nplt.ylabel('');","52b92957":"fig = plt.figure(figsize = (20,6))\nax = fig.add_subplot(1,2,2)\n(marit_stat.div(marit_stat.sum(axis = 1),axis = 0)*100).sort_values(by = '<=50K').plot(kind = 'bar',ax = ax);\nplt.xlabel('Marital Status',fontsize = 14);\nplt.ylabel('Proportion of People (%)',fontsize = 14);","fdc3772f":"fig = plt.figure(figsize = (10,6))\nax=sns.countplot(train_datavis['marital-status'], hue=train_datavis['income'])\nax.set_title('Marital Status vs Income')\nplt.xlabel(\"Marital Status\",fontsize = 14);\nplt.xticks(rotation=90)\nplt.ylabel('');","8f90abbf":"fig = plt.figure(figsize = (20,6))\nax = fig.add_subplot(1,2,1)\n(race.div(race.sum(axis = 1),axis = 0)*100).sort_values(by = '<=50K').plot(kind = 'bar',ax =ax);\nplt.xlabel('Race',fontsize = 14);\nplt.ylabel('Proportion of People (%)',fontsize = 14);","c38687cf":"fig = plt.figure(figsize = (9,6))\nax=sns.countplot(train_datavis['race'], hue=train_datavis['income'])\nax.set_title('Race vs Income')\nplt.xlabel(\"Race\",fontsize = 14);\nplt.xticks(rotation=90)\nplt.ylabel('');","ec58b693":"fig = plt.figure(figsize = (20,6))\nax = fig.add_subplot(1,2,1)\n(sextype.div(sextype.sum(axis = 1),axis = 0)*100).sort_values(by = '<=50K').plot(kind = 'bar',ax =ax);\nplt.xlabel('Sex',fontsize = 14);\nplt.ylabel('Proportion of People (%)',fontsize = 14);","1bc35afc":"fig = plt.figure(figsize = (9,6))\nax=sns.countplot(train_datavis['sex'], hue=train_datavis['income'])\nax.set_title('Sex vs Income')\nplt.xlabel(\"Sex\",fontsize = 14);\nplt.xticks(rotation=90)\nplt.ylabel('');","6482f1cd":"fig = plt.figure(figsize = (10,6))\nax=sns.countplot(train_datavis['sex'],\n                order = train_datavis['sex'].value_counts().index)\nax.set_title('sex <=50K')\nplt.xlabel(\"Occupation\",fontsize = 10);\nplt.xticks()\nplt.ylabel('');","416504cc":"plt.figure(figsize=(15,10))\nax=sns.countplot(train_clustvis_rel['sex'],\n                order = train_clustvis_rel['sex'].value_counts().index)\nax.set_title('Sex \/ Wage Class (<=50K)',fontsize=18)\nax.set_xlabel('Sex',fontsize=15)\nax.set_ylabel('Count',fontsize=15)\nplt.show()","ded23acd":"fig = plt.figure(figsize = (40,6))\nax = fig.add_subplot(1,2,2)\n(age.div(age.sum(axis = 1),axis = 0)*100).sort_values(by = '<=50K').plot(kind = 'bar',ax = ax);\nplt.xlabel('Age',fontsize = 14);\nplt.ylabel('Proportion of People (%)',fontsize = 14);","26f1cfb8":"fig = plt.figure(figsize = (9,6))\nax=sns.countplot(train_data_onehot['age'], hue=train_datavis['income'])\nax.set_title('age vs Income')\nplt.xlabel(\"age\",fontsize = 14);\nplt.xticks()\nplt.ylabel('');","75849da6":"plt.figure(figsize=(15,10))\nax=sns.countplot(train_clustvis_rel['age'],\n                order = train_clustvis_rel['age'].value_counts().index)\nax.set_title('Age \/ Wage Class (<=50K)',fontsize=18)\nax.set_xlabel('Age',fontsize=15)\nax.set_ylabel('Count',fontsize=15)\nplt.show()","f3020534":"fig = plt.figure(figsize = (20,6))\nax = fig.add_subplot(1,2,1)\n(relasi.div(relasi.sum(axis = 1),axis = 0)*100).sort_values(by = '<=50K').plot(kind = 'bar',ax =ax);\nplt.xlabel('Relationship',fontsize = 14);\nplt.ylabel('Proportion of People (%)',fontsize = 14);","2de72f8d":"plt.figure(figsize=(12,7))\nax=sns.countplot(train_datavis['relationship'], hue=train_datavis['income'])\nax.set_title('Relationship Status \/ Wage Class')\nax.set_xlabel('Relationship')\nax.set_ylim(ymax=6500)\nplt.show()","7d2be379":"train_datavis_rel = train_datavis.loc[train_datavis['income'] == '<=50K']\nplt.figure(figsize=(12,7))\nax=sns.countplot(train_datavis_rel['relationship'],\n                order = train_datavis_rel['relationship'].value_counts().index)\nax.set_title('Relationship Status \/ Wage Class (<=50K)')\nax.set_xlabel('Relationship')\nplt.show()","a3f270c0":"plt.figure(figsize=(15,10))\nax=sns.countplot(train_clustvis_rel['relationship'],\n                order = train_clustvis_rel['relationship'].value_counts().index)\nax.set_title('Relationship \/ Wage Class (<=50K)',fontsize=18)\nax.set_xlabel('Relationship',fontsize=15)\nax.set_ylabel('Count',fontsize=15)\nplt.show()","80a20131":"fig = plt.figure(figsize = (15,8))\nax=sns.countplot(train_data['capital-gain'],\n                order = train_data['capital-gain'].value_counts().index)\nax.set_title('Capital Gain <=50K')\nplt.xlabel(\"Capital Gain\",fontsize = 15);\nplt.xticks()\nplt.ylabel('');","8ddae0c9":"import pandas as pd\nX_LG = train_data_One.drop(['income'], axis = 1) \ny_LG = train_data_One.iloc[:,3]","3827c876":"from sklearn.model_selection import train_test_split \nLG_X_train, LG_X_test,LG_y_train,LG_y_test = train_test_split(X_LG,\n                                                y_LG,\n                                                test_size = 0.3,\n                                                random_state = 42)","8ce7656d":"from sklearn.linear_model import LogisticRegression\n\nlogreg = LogisticRegression(random_state=42)\nlogreg.fit(LG_X_train, LG_y_train)","ebf973d4":"y_predicted = logreg.predict(LG_X_test)\ny_predicted\n\nfrom sklearn.metrics import classification_report, confusion_matrix\nprint('\\nConfustion Matrix') # generate the confusion matrix\nprint(confusion_matrix(LG_y_test, y_predicted))\n\nfrom sklearn.metrics import accuracy_score\nprint('\\nTest Accuracy')\nprint(accuracy_score(LG_y_test, y_predicted))\n\nfrom sklearn.metrics import classification_report\nprint('\\nClassification Report')\nprint(classification_report(LG_y_test, y_predicted))","baf13747":"from sklearn.model_selection import train_test_split\nfrom sklearn import tree\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix","1225a612":"train_data_DT =  pd.get_dummies(train_data)","9ff10214":"A = train_data_One.drop(['income'], axis = 1) \nB = train_data_One.iloc[:,3]\nX_trainDT, X_testDT, y_trainDT, y_testDT = train_test_split(A,B, test_size = 1\/3 , random_state = 42)","e71e4af5":"dectree = tree.DecisionTreeClassifier()\ndectree.fit(X_trainDT,y_trainDT)","d109ed4b":"predtree = dectree.predict(X_testDT)\naccurtree = accuracy_score(y_testDT, predtree)\nprint(f'Mean accuracy score: {accurtree:.5}')","fd7a4a4d":"from sklearn.metrics import classification_report, confusion_matrix\nprint('\\nConfusion Matrix')\nprint(confusion_matrix(y_testDT,predtree))\n\nfrom sklearn.metrics import accuracy_score\nprint('\\nTest Accuracy')\nprint(accuracy_score(y_testDT,predtree))\n\nfrom sklearn.metrics import classification_report\nprint('\\nClassification Report')\nprint(classification_report(y_testDT,predtree))","089bcac7":"cmtree = confusion_matrix(y_testDT, predtree)\nfig, (ax) = plt.subplots(1, 1, figsize=(8,7))\nsns.heatmap(cmtree, annot=True, ax = ax,fmt='g')\nax.set_xlabel('Predicted labels')\nax.set_ylabel('True labels');\nax.set_title('Confusion Matrix')\nsns.set(font_scale=1.5)\nax.xaxis.set_ticklabels(['Income > 50 K', 'Income < 50 K'])\nax.yaxis.set_ticklabels(['Income > 50 K', 'Income < 50 K'])","580a879d":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix","12674133":"train_data_RF =  pd.get_dummies(train_data)","8df7e35a":"X = train_data_One.drop(['income'], axis = 1) \ny = train_data_One.iloc[:,3]\n\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 1\/3 , random_state = 42)","dae3b240":"rf = RandomForestClassifier(max_depth=25,n_estimators=200, min_samples_leaf=1,min_samples_split=50,criterion='entropy', oob_score=True,random_state=42)\nrf.fit(X_train, y_train)","a1240ea9":"predrf = rf.predict(X_test)\naccurrf = accuracy_score(y_test, predrf)\nprint(f'Accuracy score: {accurrf:.5}')","e3c05a61":"from sklearn.metrics import classification_report, confusion_matrix\nprint('\\nConfusion Matrix')\nprint(confusion_matrix(y_test,predrf))\n\nfrom sklearn.metrics import accuracy_score\nprint('\\nTest Accuracy')\nprint(accuracy_score(y_test,predrf))\n\nfrom sklearn.metrics import classification_report\nprint('\\nClassification Report')\nprint(classification_report(y_test,predrf))","a0b75790":"import pandas as pd\nimport numpy as np","7d32e533":"train_data_RF =  pd.get_dummies(train_data)","ffd2e056":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(X_train)\n\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","8df473ca":"from sklearn.neighbors import KNeighborsClassifier\nclassifier = KNeighborsClassifier()\nclassifier.fit(X_train, y_train)","78c5f2ec":"y_pred = classifier.predict(X_test)","304f9fd0":"from sklearn.metrics import classification_report, confusion_matrix\nprint('\\nConfusion Matrix')\nprint(confusion_matrix(y_test, y_pred))\nprint(\"\\nTest Accuracy : \",(accuracy_score(y_test,y_pred)))\nprint(\"\\nClassification Report\")\nprint(classification_report(y_test, y_pred))","66666951":"cm = confusion_matrix(y_test, y_pred)\nfig, (ax) = plt.subplots(1, 1, figsize=(8,7))\nsns.heatmap(cm, annot=True, ax = ax,fmt='g')\n# labels, title and ticks\nax.set_xlabel('Predicted labels')\nax.set_ylabel('True labels');\nax.set_title('Confusion Matrix')\nsns.set(font_scale=1.5)\nax.xaxis.set_ticklabels(['Income > 50 K', 'Income < 50 K'])\nax.yaxis.set_ticklabels(['Income > 50 K', 'Income < 50 K'])","bfae52a2":"from xgboost import XGBClassifier\nimport xgboost as xgb\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix","7b15cbcf":"X_GB = train_data_One.drop(['income'], axis = 1) \ny_GB = train_data_One.iloc[:,3]","66c60d32":"from sklearn.model_selection import train_test_split \nGB_X_train, GB_X_test,GB_y_train,GB_y_test = train_test_split(X_GB,\n                                                y_GB,\n                                                test_size = 0.3,\n                                                random_state = 42)\nmodel = XGBClassifier(max_depth=3,learning_rate=0.1,n_estimators=300,booster=\"gbtree\",reg_lambda=0.5,reg_alpha=0.5)\nmodel.fit(GB_X_train, GB_y_train)\nmodel.fit(GB_X_test, GB_y_test)","5f0a6611":"Testpredxgb = model.predict(GB_X_test)\nTrainpredxgb = model.predict(GB_X_train)","01dc684c":"from sklearn.metrics import classification_report, confusion_matrix\n#train\nprint('\\nConfusion Matrix')\nprint(confusion_matrix(GB_y_train,Trainpredxgb))\nfrom sklearn.metrics import accuracy_score\nprint('\\nTrain Accuracy')\nprint(accuracy_score(GB_y_train,Trainpredxgb))\nfrom sklearn.metrics import classification_report\nprint('\\nClassification Report')\nprint(classification_report(GB_y_train,Trainpredxgb))\n\n#test\nprint('\\nConfusion Matrix')\nprint(confusion_matrix(GB_y_test,Testpredxgb))\nfrom sklearn.metrics import accuracy_score\nprint('\\nTest Accuracy')\nprint(accuracy_score(GB_y_test,Testpredxgb))\nfrom sklearn.metrics import classification_report\nprint('\\nClassification Report')\nprint(classification_report(GB_y_test,Testpredxgb))","6043e053":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.tree import DecisionTreeClassifier\n\nkfold = KFold(n_splits=10, random_state=22)\nxyz=[]\naccuracy=[]\nstd=[]\nclassifiers=['Logistic Regression','Decision Tree','Random Forest','KNN','XGBoost']\nmodels=[LogisticRegression(),DecisionTreeClassifier(),RandomForestClassifier(), KNeighborsClassifier(n_neighbors=9),XGBClassifier()]\nfor i in models:\n    model = i\n    cv_result = cross_val_score(model,X,y, cv = kfold,scoring = \"accuracy\")\n    cv_result=cv_result\n    xyz.append(cv_result.mean())\n    std.append(cv_result.std())\n    accuracy.append(cv_result)\nmodels_dataframe=pd.DataFrame({'CV Mean':xyz,'Std':std},index=classifiers)       \nmodels_dataframe","fe207687":"X = train_data[['capital-loss','native-country','workClass','race','marital-status','age','sex','capital-gain', 'education','occupation','relationship']]\ny = train_data['income']\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn import tree\n\nextree = ExtraTreesClassifier()\nextree.fit(X, y)\nrelval = extree.feature_importances_\n\nfig = plt.figure(figsize = (15,10))\npos = np.arange(11) + 0.5\nplt.barh(pos, relval, align='center')\nplt.title(\"Feature Importance\",fontsize=18)\nplt.xlabel(\"Model Accuracy\", fontsize=15)\nplt.ylabel(\"Features\",fontsize=15)\nplt.yticks(pos, ('capital-loss','native-country','workClass','race','marital-status','age','sex','capital-gain', 'education','occupation','relationship'))\nplt.grid(True)","a861f2c6":"# DATA VISUALIZATION","7b8b063d":"### Visualization Proportion Data of Relationship vs Income","5d2399fe":"## Education","e942ab8e":"# Cross Validation","80cc8dd5":"# DATA EXPLORATION","1b7324f6":"## Occupation","084bbd35":"## Train Data One Hot Encoding","d319f83e":"## Race","a750f5fa":"## Marital","0c8dac22":"## XGBoost","b99ac18b":"## Logistic Regression","a17f43d2":"### Visualization Occupation <=50K","d62ba006":"## Sex","960d5f4d":"### Visualization Proportion Data of Education vs Income","4adc3838":"## Age","8b83e3e5":"# FEATURE ENGGINERING","4d4d9bff":"### Visualization Distribution Data of Age","c68c30af":"### Visualization Occupation <=50K in Family","6b305610":"## Decision Tree","e3d5b82f":"### Missing Values 'workClass'","6bf094a2":"## Outliers","c9393876":"## KNN","83161d47":"# Modeling","5e1fb5a3":"## Missing Values","090b27c8":"### Visualization Proportion Data of Occupation vs Income","9caf2f5d":"Section ini kami lakukan untuk membedakan dataset mana yang kami gunakan untuk visualisasi dan feature enginering one-hot encoding maupun label encoding, dengan alasan mempermudah kami melakukan coding secara terpisah.","47b647e6":"## Copy Train_Data","75f8394f":"## Random Forest","ecfa3dd9":"### Visualization Proportion Data of Work Class vs Income","596aea3f":"### Visualization Proportion Data of Marital vs Income","ac504cbb":"### Visualization Sex <=50K","73abf1ef":"### Visualization Distribution Data of Hours\/Week","459cfbc2":"## Train Data Label Encoding","9f6a661f":"## Capital gain","da3be9d7":"### Missing Values 'Occupation'","ffd4a236":"# Feature Importance","cc930dfc":"## WorkClass","829ea09a":"## Relationship","79af8136":"### Missing Values 'Native-country'","5f22a9d0":"## Drop Values","d476353c":"### Visualization Proportion Data of Sex vs Income","448c1a49":"### Visualization Proportion Data of Age vs Income","ab0c77dc":"# IMPORT LIBRARIES","69884115":"### Visualization Education <=50K","feb0781b":"## Duplicate Values","26fd10d4":"# DATA CLEANSING","32f6971d":"### Visualization Relationship <=50K\n","2f169453":"### Visualization Proportion Data of Race vs Income","7ee3870a":"### Visualization Capital gain <=50K","a813d010":"## Distribution"}}