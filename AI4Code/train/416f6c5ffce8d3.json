{"cell_type":{"f143f8f6":"code","fadd1d18":"code","09656d2d":"code","d090274a":"code","944802ca":"code","35f9d887":"code","4adbca7c":"code","a71ace03":"code","1efbb5f8":"code","ec33fa31":"code","5b13817a":"code","6b2f1eaf":"code","d51fb0ff":"code","ec4331b4":"code","7ca587fb":"code","2e069622":"code","9aadc13b":"code","26337495":"code","730a8252":"code","8f180528":"code","825b447e":"code","b41f3c21":"markdown","0b35edf1":"markdown","ea334c7c":"markdown","673f540b":"markdown","bc4684b6":"markdown","398a76db":"markdown","cbeb1024":"markdown","24f8493d":"markdown","01c4c4c3":"markdown","9b2689dc":"markdown","849c3722":"markdown","9391c31b":"markdown","a63a60c9":"markdown","efe4f1cf":"markdown","fb4578ea":"markdown","f3cde2ab":"markdown","837a4755":"markdown","17af444b":"markdown","411a3de4":"markdown","712763b8":"markdown","20d60fc5":"markdown","08fff35a":"markdown"},"source":{"f143f8f6":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\n\n#plotly library\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n#matplotlib library\nimport matplotlib.pyplot as plt\n\n#word cloud library\nfrom wordcloud import WordCloud\n\n#from a unix time to a date\nfrom time import strftime\nfrom datetime import datetime\n\nimport warnings            \nwarnings.filterwarnings(\"ignore\") \n\nimport os\nprint(os.listdir(\"..\/input\"))","fadd1d18":"#Load data from csv file\ndataframe=pd.read_csv('..\/input\/ted_main.csv')","09656d2d":"#Let's get general information about our data\ndataframe.info()","d090274a":"#rare visualization tool\n#import missing library\nimport missingno as msno\nmsno.matrix(dataframe)\nplt.show()","944802ca":"dataframe.head()","35f9d887":"trace1 = go.Scatter(\n                    x = dataframe.index,\n                    y = dataframe.comments,\n                    mode = \"lines\",\n                    name = \"comments\",\n                    marker = dict(color = 'rgba(80, 26, 80, 0.8)'),\n                    text= dataframe.main_speaker)\ndata2 = [trace1]\nlayout = dict(title = 'Comment numbers for Ted Talks',\n              xaxis= dict(title= 'index',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data2, layout = layout)\niplot(fig)","4adbca7c":"df=dataframe[dataframe['main_speaker']=='Richard Dawkins']\ndf","a71ace03":"dataframe['main_speaker'].nunique()","1efbb5f8":"dfGlobal=dataframe[dataframe['event']=='TEDGlobal 2005']\ndf2002=dataframe[dataframe['event']=='TED2002']\ndfRoyal=dataframe[dataframe['event']=='Royal Institution']\n\ntrace1 =go.Scatter(\n                    x = dfGlobal.index,\n                    y = dfGlobal.views,\n                    mode = \"markers\",\n                    name = \"TEDGlobal 2005\",\n                    marker = dict(color = 'rgba(255, 128, 255, 0.8)'),\n                    text= dfGlobal.main_speaker)\n# creating trace2\ntrace2 =go.Scatter(\n                    x = df2002.index,\n                    y = df2002.views,\n                    mode = \"markers\",\n                    name = \"TED2002\",\n                    marker = dict(color = 'rgba(255, 128, 2, 0.8)'),\n                    text= df2002.main_speaker)\n# creating trace3\ntrace3 =go.Scatter(\n                    x = dfRoyal.index,\n                    y = dfRoyal.views,\n                    mode = \"markers\",\n                    name = \"Royal Institution\",\n                    marker = dict(color = 'rgba(0, 255, 200, 0.8)'),\n                    text= dfRoyal.main_speaker)\ndata3 = [trace1, trace2, trace3]\nlayout = dict(title = 'Number of views received at TEDGlobal 2005, TED2002, Royal Institution',\n              xaxis= dict(title= 'index',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Views',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data3, layout = layout)\niplot(fig)","ec33fa31":"#sort by highest number of comments\ndata_sorted=dataframe.sort_values(by='comments',ascending=False)\n#convert unix timestamp\ndata_sorted['published_date']=[datetime.fromtimestamp(int(item)).strftime('%Y') for item in data_sorted.published_date]\n#get 6 speakers with the highest number of comments\ndata_comments=data_sorted.iloc[:6,:]\n#duration convert  to minute\nimport datetime\ndata_duration=[]\ndata_duration=[str(datetime.timedelta(seconds=i))+\" minute \" for i in data_comments.duration]\ndate=[]\nfor item in data_comments.published_date:\n    date.append(item + 'Year')\n\n#visualization\n#create trace1\ntrace1 = go.Bar(\n                x = date,\n                y = data_comments.comments,\n                name = \"comments\",\n                marker = dict(color = 'rgba(255, 58, 255, 0.4)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = data_comments.main_speaker)\n# create trace2 \ntrace2 = go.Bar(\n                x = date,\n                y = data_comments.duration,\n                name = \"duration\",\n                marker = dict(color = 'rgba(15, 15, 250, 0.4)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = (data_duration + data_comments.main_speaker))\ndata4 = [trace1, trace2]\nlayout = go.Layout(barmode = \"group\")\nfig = go.Figure(data=data4, layout=layout)\niplot(fig)","5b13817a":"#get 3 speakers with the highest number of comments\ndata_comments=data_sorted.iloc[:3,:]\n#visualization\ntrace1 = {\n  'x': data_comments.main_speaker,\n  'y': data_comments.comments,\n  'name': 'comments',\n  'type': 'bar',\n  'marker':dict(\n        color='rgb(58,200,225)',\n        line=dict(\n            color='rgb(8,48,107)',\n            width=1.5),\n        ),\n   'opacity':0.6,\n};\ntrace2 = {\n  'x': data_comments.main_speaker,\n  'y': data_comments.duration,\n  'name': 'duration',\n  'type': 'bar',\n  'text':data_duration,\n  'marker':dict(\n        color='rgb(158,202,225)',\n        line=dict(color='rgb(8,48,107)',\n                    width=1.5)),\n  'opacity':0.6,\n};\ndata5 = [trace1, trace2];\nlayout = {\n  'xaxis': {'title': 'Top 3 speakers'},\n  'barmode': 'relative',\n  'title': 'Number of comments and speech duration of the 3 most commented'\n};\nfig = go.Figure(data = data5, layout = layout)\niplot(fig)","6b2f1eaf":"#from a unix time to a date\nfrom time import strftime\nfrom datetime import datetime\n\ndataframe['published_date']=[datetime.fromtimestamp(int(item)).strftime('%Y') for item in dataframe.published_date]\ndata_2006=dataframe[dataframe.published_date=='2006'].iloc[:,:]\nlabels=data_2006.event\n# figure\nfig = {\n  \"data\": [\n    {\n      \"values\": data_2006.views,\n      \"labels\": labels,\n      \"domain\": {\"x\": [0, .5]},\n      \"name\": \"Number Of Views Rates\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .3,\n      \"type\": \"pie\"\n    },],\n  \"layout\": {\n        \"title\":\"The number of watched talks events published in 2006\",\n        \"annotations\": [\n            { \"font\": { \"size\": 20},\n              \"showarrow\": False,\n              \"text\": \"Number of Views\",\n                \"x\": 0.30,\n                \"y\": 1.10\n            },\n        ]\n    }\n}\niplot(fig)","d51fb0ff":"data_sorted=dataframe.sort_values(by='views',ascending=True)\ndf=data_sorted.iloc[:20,:]\ndf.index=range(0,len(df))\n#visualization\ndata = [\n    {\n        'y': df.views,\n        'x': df.index,\n        'mode': 'markers',\n        'marker': {\n            'color': df.duration,\n            'size': df.comments,\n            'showscale': True\n        },\n        \"text\" :  df.main_speaker    \n    }\n]\niplot(data)\n","ec4331b4":"data_2014=dataframe.comments[dataframe.event=='TED2014']\ndata_2015=dataframe.comments[dataframe.event=='TED2015']\n    \ntrace2 = go.Histogram(\n    x=data_2014,\n    opacity=0.75,\n    name = \"2014\",\n    marker=dict(color='rgba(12, 50, 196, 0.6)'))\ntrace3 = go.Histogram(\n    x=data_2015,\n    opacity=0.75,\n    name = \"2015\",\n    marker=dict(color='rgba(125, 2, 100, 0.6)'))\ndata = [trace2, trace3]\nlayout = go.Layout(barmode='overlay',\n                   title=' Comments in 2014 and 2015',\n                   xaxis=dict(title='number of comments'),\n                   yaxis=dict( title='Count'),\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","7ca587fb":"data_2017=dataframe.tags[dataframe.published_date=='2017']\nplt.subplots(figsize=(8,8))\nwordcloud = WordCloud(\n                          background_color='white',\n                          width=512,\n                          height=384\n                         ).generate(\" \".join(data_2017))\nplt.imshow(wordcloud)\nplt.axis('off')\n\n\nplt.show()\n","2e069622":"data_2012=dataframe[dataframe.event=='TED2012']\n#visualization\ntrace0 = go.Box(\n    y=data_2012.comments,\n    name = 'number of comments in TED2012',\n    marker = dict(\n        color = 'rgb(12, 12, 140)',\n    )\n)\ntrace1 = go.Box(\n    y=data_2012.duration,\n    name = 'number of duration in TED2012',\n    marker = dict(\n        color = 'rgb(12, 128, 128)',\n    )\n)\ndata = [trace0, trace1]\niplot(data)","9aadc13b":"data_2012[data_2012.duration==181]","26337495":"# import figure factory\nimport plotly.figure_factory as ff\ndf_occupation=dataframe[dataframe.event=='TED2012']\ndata_occupation = df_occupation.loc[:,[\"comments\", \"views\"]]\ndata_occupation['index'] = np.arange(1,len(data_occupation)+1)\n# scatter matrix\nfig = ff.create_scatterplotmatrix(data_occupation, diag='box', index='index',colormap='Portland',\n                                  colormap_type='cat',\n                                  height=700, width=700)\niplot(fig)","730a8252":"#duration convert  to minute\nimport datetime\ndata_duration2=[]\ndata_duration2=[str(datetime.timedelta(seconds=i))+\" minute \" for i in dataframe.duration]\ndf_100=dataframe.iloc[:100,:]\n#visualization\n# first line plot\ntrace1 = go.Scatter(\n    x=df_100.index,\n    y=df_100.views,\n    name = \"views\",\n    marker = dict(color = 'rgba(200, 75, 45, 0.8)'),\n)\n# second line plot\ntrace2 = go.Scatter(\n    x=df_100.index,\n    y=df_100.duration,\n    xaxis='x2',\n    yaxis='y2',\n    name = \"duration\",\n    text=data_duration2,\n    marker = dict(color = 'rgba(85, 20, 200, 0.8)'),\n)\ndata = [trace1, trace2]\nlayout = go.Layout(\n    xaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='y2',        \n    ),\n    yaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='x2',\n    ),\n    title = 'Views and Comments'\n)\nfig = go.Figure(data=data, layout=layout)\nplt.savefig('graph.png')\niplot(fig)\nplt.show()","8f180528":"\ndata_sorted2=dataframe.sort_values(by='views',ascending=False)\ndf_150=data_sorted2.iloc[:150,:]\ndf_150['views_rank']=np.arange(1,len(df_150)+1)\n\nx, y, z = np.random.multivariate_normal(np.array([0,0,0]), np.eye(3), 400).transpose()\n# create trace 1 that is 3d scatter\ntrace1 = go.Scatter3d(\n    x=df_150.views_rank,\n    y=df_150.comments,\n    z=df_150.duration,\n    mode='markers',\n    marker=dict(\n        size=12,\n        color=z,                # set color to an array\/list of desired values\n        colorscale='Viridis',   # choose a colorscale\n        opacity=0.8\n    ),\n    text=data_duration2,)\ndata = [trace1]\nlayout = go.Layout(\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0))\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","825b447e":"trace1 = go.Scatter(\n    x=df_150.views_rank,\n    y=df_150.comments,\n    xaxis='x3',\n    yaxis='y3',\n    name = \"comments\"\n)\ntrace2 = go.Scatter(\n    x=df_150.views_rank,\n    y=df_150.duration,\n    xaxis='x4',\n    yaxis='y4',\n    name = \"duration\",\n    text=data_duration2,\n)\ndata = [trace1, trace2]\nlayout = go.Layout(\n    xaxis3=dict(\n        domain=[0, 0.45],\n        anchor='y3'\n    ),\n    xaxis4=dict(\n        domain=[0.55, 1],\n        anchor='y4'\n    ),\n    yaxis3=dict(\n        domain=[0.55, 1]\n    ),\n    yaxis4=dict(\n        domain=[0.55, 1],\n        anchor='x4'\n    ),\n    title = 'Number of Comments and Number of Duration VS Number of Views Rank '\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","b41f3c21":"<a id=13><\/a>\n**<h1>Multiple Plots<\/h1>**\n* After the 3D scatter plot, we can look at the number of comments and the duration of the speech with multiple subplots.","0b35edf1":"<a id=4><\/a>\n**<h1>Bar Charts<\/h1>**","ea334c7c":"<a id=3><\/a>\n**<h1>Scatter Plot<\/h1>**\n* Let's look at the numbers of people who spoke at TEDGlobal 2005, TED2002, Royal Institution.","673f540b":"<a id=0><\/a>\n**<h1>Line Chart<\/h1>**\n* It shows comments that speakers take.","bc4684b6":"* Let's learn about the person with the least conversation time.","398a76db":"<a id=12><\/a>\n**<h1>3D Scatter Plot<\/h1>**\n* We can look at the number of comments and the talk times related to the maximum number of views in 3D.","cbeb1024":"The highest number of comments belong to Richard Dawkins. Let's learn a little more about him.","24f8493d":"<a id=5><\/a>\n**<h1>Pie Plot<\/h1>**\n*  Views rate of events published in 2006  ","01c4c4c3":"<a id=6><\/a>\n**<h1>Bubble Charts<\/h1>**\n* With Bubble Charts, we can look at the comments of 20 speakers who have the highest number of views. Also if the number of comments received is too high, the size of the bubble charts will increase accordingly. Rich darkening depends on the speech duration of the speakers.","9b2689dc":"let's continue and look at the first 5 lines of our data.","849c3722":"<a id=11><\/a>\n**<h1>Inset Plots<\/h1>**\n* We can look at both the number of views and the number of comments for the first 100 data in our data.","9391c31b":"  * The most views rate belongs to the TED2006 event and the least watched rate belongs to the TEDSalon 2006 event. ","a63a60c9":"It appears missing data in the speaker occupation feature. Let's visualize it. \n* We can visually see the efficiency that is missing data with the missingno library.  Also we understand that it is not missing too much.","efe4f1cf":"<a id=9><\/a>\n**<h1>Box Plot<\/h1>**\n* At the TED2012 event, we can look at the number of comments and talk times with Box Plot. Talk times are in seconds. So the maximum speaking duration is approximately 25 minutes (1501 seconds) and the minimum speaking duration is approximately 4 minutes (181 seconds). Also we can see the outlines with the box plot in the comments.","fb4578ea":"<a id=7><\/a>\n**<h1>Histogram<\/h1>**\n* Have a look at the frequency of comments in 2014 and 2015 with histogram graph.","f3cde2ab":"According to the information we have, he participated in ted talks 3 times. \n* Now let's try to find out the number of people who repeat in our dataset by joining different events at once.\n      The number below is the number of main speakers we have unique. Then we can say;\n      We have 2550 rows in our dataset, so 394 main_speaker feature has repeat data.","837a4755":"### **<h1>INTRODUCTION<\/h1>**\nIn this kernel,we will learn visualization with the plotly library.\n* **Plotly Library**: The Plotly library gives us an interactive visualization.\n* [Loading Data and Explanation of Features](#1)\n* Data Visualization\n   * [Line Chart](#2)\n   * [Scatter Plots](#3)\n   * [Bar Plot](#4)  \n   * [Pie Plot](#5) \n   * [Bubble Charts](#6)\n   * [Histogram](#7)  \n   * [Word Cloud](#8)\n   * [Box Plot](#9)\n   * [Scatter Matrix Plots](#10)\n   * [Inset Plots](#11)\n   * [3D Scatter Plot](#12)\n   * [Multiple Subplots](#13) ","17af444b":"<a id=1><\/a>\n**<h1>Loading Data and Explanation of Features<\/h1>**\nted_main contains 17 features that are:\n* **comments** : The number of first level comments made on the talk\n* **description** : A blurb of what the talk is about\n* **duration** : The duration of the talk in seconds\n* **event **: The TED\/TEDx event where the talk took place\n* **film_date** : The Unix timestamp of the filming\n*  **languages **: The number of languages in which the talk is available\n* **main_speaker** : The first named speaker of the talk\n* **name** : The official name of the TED Talk. Includes the title and the speaker.\n* **num_speaker** : The number of speakers in the talk\n* **published_date** : The Unix timestamp for the publication of the talk on TED.com\n* **ratings** : A stringified dictionary of the various ratings given to the talk (inspiring, fascinating, jaw dropping, etc.)\n* **related_talks** : A list of dictionaries of recommended talks to watch next\n* **speaker_occupation** : The occupation of the main speaker\n* **tags** : The themes associated with the talk\n* **title** : The title of the talk\n* **url** : The URL of the talk\n* **views** : The number of views on the talk","411a3de4":"* The number of comments and conversation times for speakers were visualized according to the publication date of the \nspeeches.\n* A bar plot was used for 6 speakers with the highest number of comments.","712763b8":"<a id=10><\/a>\n**<h1>Scatter Matrix Plots<\/h1>**\n* We can look at the correlation between the number of comments and the number of views received by speakers entrepreneurs.","20d60fc5":"* The number of views and talk times of 3 people who received the most number of views.","08fff35a":"<a id=8><\/a>\n**<h1>Word Cloud<\/h1>**\nWord Cloud is not in the plotly library.\n* Visualization of the names of the tags shared in 2017. If the number of tags is more, the names of the tags are bigger."}}