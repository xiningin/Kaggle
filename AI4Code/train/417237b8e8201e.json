{"cell_type":{"26536bbe":"code","d92ae09b":"code","168c9eb8":"code","74a9cc48":"code","9204e3ef":"code","d1f27960":"code","ddac347e":"code","b1367343":"code","997d77bd":"code","9e8db395":"code","d97460f2":"code","c958b6a6":"code","101720f6":"code","b47f854d":"code","e28c3591":"code","4d285134":"code","13f38a4a":"code","dcae94d8":"code","b7a2bd22":"code","5644ee3e":"code","54d90c34":"code","8edc5fb3":"code","94264d40":"code","12b2446f":"code","a6aef4f9":"code","92ea317b":"code","9eb1ac73":"code","67266222":"code","0714eccd":"code","482e10ef":"code","4e4dfdf5":"code","83a5583c":"code","5d6c2b0a":"code","2f19a962":"code","0ce14460":"code","df0a49dd":"code","1fdb2f24":"code","890718f2":"code","d43c68fd":"code","73323e1a":"code","7194ec63":"code","1be56b28":"code","3cb321d4":"code","d81dc4ec":"code","86117377":"code","85561c2d":"code","cdab2001":"markdown","2df9630f":"markdown","ef2cef0c":"markdown","83aba9b2":"markdown","14de18af":"markdown","7df9d2a4":"markdown","476df887":"markdown","5f4050ba":"markdown","dc5f3006":"markdown","cbeca92b":"markdown","b4c2e004":"markdown","c5e0f3f8":"markdown","f709a7d4":"markdown","35cdf021":"markdown","6928022a":"markdown","57ce3ff5":"markdown","9106499d":"markdown","1522bba7":"markdown","22b94d95":"markdown","729e33cd":"markdown","6ea8bde2":"markdown","8ec1ca81":"markdown","79a29dd7":"markdown","a7ae88a1":"markdown","8e2ece0c":"markdown","bb49854a":"markdown","ed7f8240":"markdown","6f11bfa8":"markdown","513020c8":"markdown","eed810c2":"markdown"},"source":{"26536bbe":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\nimport seaborn as sns\nimport scipy.cluster.hierarchy as shc\nimport os\n\n# https:\/\/github.com\/pandas-profiling\/pandas-profiling\nfrom pandas_profiling import ProfileReport","d92ae09b":"# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","168c9eb8":"df = pd.read_csv('\/kaggle\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv')","74a9cc48":"df.head(10)","9204e3ef":"df.info()","d1f27960":"df.describe(include = 'all')","ddac347e":"profile = ProfileReport(df, title=\"Pandas Profiling Report\")\n# profile = ProfileReport(df, minimal=True)","b1367343":"profile.to_widgets()","997d77bd":"profile.to_notebook_iframe()","9e8db395":"sns.countplot(df['room_type'])","d97460f2":"df = df[(df['room_type'] == 'Private room') | (df['room_type'] == 'Shared room')]","c958b6a6":"print('Ahha! There are {} accommodations left here.'.format(len(df)))","101720f6":"df = df[df['availability_365'] >= 5]","b47f854d":"print('There are {} accommodations available here.'.format(len(df)))","e28c3591":"df = df[df['minimum_nights'] <= 30]","4d285134":"plt.figure(figsize=(17, 8))\n\nsns.countplot(df['minimum_nights'])","13f38a4a":"print('Lucky! I still have {} rooms left in my choice.'.format(len(df)))","dcae94d8":"df_filter = df.reset_index(drop=True)\n\ndf_filter.head()","b7a2bd22":"df_filter.info()","5644ee3e":"profile_filter = ProfileReport(df_filter, title=\"Pandas Profiling Report\")\n# profile = ProfileReport(df, minimal=True)","54d90c34":"profile_filter.to_widgets()","8edc5fb3":"profile_filter.to_notebook_iframe()","94264d40":"print('There are {} that have 0 review'.format(sum(df_filter['number_of_reviews'] == 0)))","12b2446f":"zero_review = (df_filter['number_of_reviews'] == 0)\n\nnull_last_review = (df_filter['last_review'].isna())\n\nnull_reviews_per_month = (df_filter['reviews_per_month'].isna())\n\nprint('We are now sure that {} records have null value because there is no review.\\nMaybe this is the new accommodation.'.format(len(df_filter[zero_review & null_last_review & null_reviews_per_month])))","a6aef4f9":"df_filter = df_filter[df_filter['number_of_reviews'] != 0]","92ea317b":"len(df_filter)","9eb1ac73":"selected_col = 'number_of_reviews last_review reviews_per_month price'.split()\n\ndf_selected = df_filter[selected_col]\n\ndf_selected.head()","67266222":"df_selected.info()","0714eccd":"df_selected.head()","482e10ef":"df_selected['last_review'] = df_selected['last_review'].apply(lambda x: datetime.strptime(x,'%Y-%m-%d'))","4e4dfdf5":"df_selected['last_review_day_ago'] = datetime.now() - df_selected['last_review']\n\ndf_selected['last_review_day_ago'] = df_selected['last_review_day_ago'].apply(lambda x: x.days)","83a5583c":"df_selected.head()","5d6c2b0a":"df_selected.info()","2f19a962":"df_cluster = df_selected[['number_of_reviews','reviews_per_month','price','last_review_day_ago']]","0ce14460":"df_cluster.head()","df0a49dd":"from sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\ndf_minmax = pd.DataFrame(scaler.fit_transform(df_cluster), columns=df_cluster.columns)\ndf_minmax.head()","1fdb2f24":"plt.figure(figsize=(10, 7))  \nplt.title(\"Dendrograms\")\nplt.xlabel('Accommodations')\nplt.ylabel('Euclidean distances')\n\ndend = shc.dendrogram(shc.linkage(df_minmax, method='ward'))","890718f2":"plt.figure(figsize=(10, 7))  \nplt.title(\"Dendrograms\")\nplt.xlabel('Accommodations')\nplt.ylabel('Euclidean distances')\n\ndend = shc.dendrogram(shc.linkage(df_minmax, method='ward'))\nplt.axhline(y=7, color='r', linestyle='--')","d43c68fd":"# Fitting Hierarchical Clustering to the dataset\nfrom sklearn.cluster import AgglomerativeClustering\n\ncluster = AgglomerativeClustering(n_clusters=3, affinity='euclidean', linkage='ward')  \ngroup = cluster.fit_predict(df_minmax)","73323e1a":"unique, counts = np.unique(group, return_counts=True)\ndict(zip(unique, counts))","7194ec63":"df_minmax['group'] = group\n\ndf_minmax.head()","1be56b28":"df_radar = df_minmax.groupby('group').mean()\n\ndf_radar = df_radar.reset_index()\n\n# df_radar['group'] = ['A','B','C']\ndf_radar['group'] = df_radar['group'].astype('str')\n\ndf_radar","3cb321d4":"# Scaling for visualization\ncol_visual = 'number_of_reviews reviews_per_month price last_review_day_ago'.split()\n\nscaler_visual = MinMaxScaler()\ndf_radar[col_visual] = pd.DataFrame(scaler_visual.fit_transform(df_radar.iloc[:,1:]), columns=col_visual)\ndf_radar.head()","d81dc4ec":"from math import pi\n \n# PART 1: Define a function that do a plot for one line of the dataset!\n \ndef make_spider(row, title, color):\n \n    # number of variable\n    categories=list(df_radar)[1:]\n    N = len(categories)\n\n    # What will be the angle of each axis in the plot? (we divide the plot \/ number of variable)\n    angles = [n \/ float(N) * 2 * pi for n in range(N)]\n    angles += angles[:1]\n    plt.figure(figsize=(10,10))\n    # Initialise the spider plot\n    ax = plt.subplot(2,2,row+1, polar=True, )\n\n    # If you want the first axis to be on top:\n    ax.set_theta_offset(pi \/ 2)\n    ax.set_theta_direction(-1)\n\n    # Draw one axe per variable + add labels labels yet\n    plt.xticks(angles[:-1], categories, color='grey', size=15)\n\n    # Draw ylabels\n    ax.set_rlabel_position(0)\n    plt.yticks([0.2,0.4,0.6,0.8,1.0], [\"0.2\",\"0.4\",\"0.6\",\"0.8\",\"1.0\"], color=\"grey\", size=10)\n    plt.ylim(0,1)\n\n    # Ind1\n    values=df_radar.loc[row].drop('group').values.flatten().tolist()\n    values += values[:1]\n    ax.plot(angles, values, color=color, linewidth=2, linestyle='solid')\n    ax.fill(angles, values, color=color, alpha=0.4)\n\n    # Add a title\n    plt.title(title, size=11, color=color, y=1.1)\n\n    \n# PART 2: Apply to all individuals\n# initialize the figure\n\nmy_dpi=96\nplt.figure(figsize=(1000\/my_dpi, 1000\/my_dpi), dpi=my_dpi)\n \n# Create a color palette:\nmy_palette = plt.cm.get_cmap(\"Set2\", len(df_radar.index))\n \n# Loop to plot\nfor row in range(0, len(df_radar.index)):\n    make_spider(row=row, title='group '+df_radar['group'][row], color=my_palette(row))\n","86117377":"import folium\nfrom folium.plugins import MarkerCluster\n\ndata = df_filter[:3000]\ndetails_col = 'name'.split()\nx = 'latitude'\ny = 'longitude'\n\nworld_map_final = folium.Map(location=[40.7128,-74.0060 ],tiles='cartodbpositron',zoom_start=11) \n# world_map= folium.Map(tiles=\"OpenStreetMap\")\n\nfor i in range(len(data)):\n    lat = data.iloc[i][x]\n    long = data.iloc[i][y]\n    radius = 4\n    popup_text = \"\"\"{}<br>\"\"\"\n    popup_text = popup_text.format(df_filter[details_col].iloc[i])\n\n    if df_minmax['group'][i] == 0:\n        folium.CircleMarker(location = [lat, long], radius=radius, popup= popup_text, fill =True, color='green').add_to(world_map_final)\n    elif df_minmax['group'][i] == 1:\n        folium.CircleMarker(location = [lat, long], radius=radius, popup= popup_text, fill =True, color='lightgreen').add_to(world_map_final)\n    else:\n        folium.CircleMarker(location = [lat, long], radius=radius, popup= popup_text, fill =True, color='gray').add_to(world_map_final)\n\nworld_map_final","85561c2d":"# world_map_final.save('airbnb_map.html')","cdab2001":"There are 3 types of room and sure, I'm solo traveler.\n\nJust **Private room** or **Shared room** is enough.","2df9630f":"What is the next condition?\n\nI think, popularity of the accommodation is quite interested.\n\nAnd thanks god, there are some of features that can be proxy of popularity.\n\nIn this case I will use **number_of_reviews**, **last_review**, **reviews_per_month** as the proxy of popularity.\n\nThen perform clustering with **price** feature to be my another condition here.          ","ef2cef0c":"# Data Exploration","83aba9b2":"Since I wanna go there. I have to check the available accommodation before I make a decision.\n\nMay be, at least 5 days is good to go.","14de18af":"# Feature engineering","7df9d2a4":"Let's check another condition.","476df887":"## Feature Scaling for perform clustering","5f4050ba":"# Download Data","dc5f3006":"# Hierarchical Clustering","cbeca92b":"## Check null value","b4c2e004":"### availability_365","c5e0f3f8":"**Hooray!**\n\n**I will now have more useful information for making my trip the best :)**\n\nPs. Sorry for my broken english.","f709a7d4":"\n### minimum_nights\n\n","35cdf021":"After I did clustering, I found the characteristic of each accommodation group as follow:\n\n**Group 1**: Recently get review but the number of review is just a little. Also review per month is not outperform any group. Maybe the accommodation in this group just launch recently in the platform.\n\n**Group 2**: Can see huge amout of review here in this group. Both number of review or review per month are not disappointed me at all. Moreover, the latest review is not that old. Maybe the accommodation in this group is now popular around the traveller.\n\n**Group 3**: Expensive and got the review long time ago. Not my preferrence for sure.","6928022a":"# Found something!","57ce3ff5":"# The End","9106499d":"## Select only useful features","1522bba7":"This time, I have 30 days of annual leave.\n\nSo, **minimum_nights** around 1-30 is suit my condition.","22b94d95":"### Let's check the data again.","729e33cd":"### room_type","6ea8bde2":"Create new feature here will be a feature that answer the question:\n\nHow long has it been since they have been review?","8ec1ca81":"## Create new features","79a29dd7":"From above clustering, I will choose number of cluster to be 3.","a7ae88a1":"Ahh.. New accommodation..\n\nHow can I sure that new accommodation is good?\n\nThere are only 2,236 rooms from 14,210.\n\nSo, let me filter out.","8e2ece0c":"**Me**: Knock..! Knock..! Is there any available accommodation here in NYC?\n\n**Anonymous**: Of course... There are tons of room here.\n\n**Me**: Oh no! How can I know that the accommodation will suit me?\n\n**Anonymous**: Okay. Let's see the data","bb49854a":"> **Owner**:\n> \n> 22p22c0433-\u0e0a\u0e25\u0e31\u0e0a\n> \n> 22p22c0433-Chalat","ed7f8240":"> Notebook \u0e19\u0e35\u0e49\u0e40\u0e1b\u0e47\u0e19\u0e2a\u0e48\u0e27\u0e19\u0e2b\u0e19\u0e36\u0e48\u0e07\u0e02\u0e2d\u0e07\u0e42\u0e04\u0e23\u0e07\u0e01\u0e32\u0e23 Super AI Engineer","6f11bfa8":"And it's match the number of null value!\n\nLet's check it out.","513020c8":"## From the information above. The accommodation in Group 2 (Light Green) is the best choice.\n\nFor making it easier to find the accommodation location separated by group.\n\nThe map below should be helpful.\n\n> Note: Just sample of it because of display issues.","eed810c2":"**First thing first. Let's filter suitable accommodation.**\n\n3 features here will be selected by rule-based.\n\n1. room_type\n\n2. availability_365\n\n3. minimum_nights"}}