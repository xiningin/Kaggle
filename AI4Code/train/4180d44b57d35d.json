{"cell_type":{"e51297d9":"code","4dec328f":"code","31f5116b":"code","6992a35d":"code","18e373ea":"code","c142c7e3":"code","6f70cf0d":"code","737acb30":"code","0cf6e2a9":"code","ad37a6f6":"code","5e83b57f":"code","15b48d97":"code","103e67e7":"code","5a0d7086":"code","d579b4af":"code","dee849df":"code","820a8796":"code","e78f30f4":"code","bdaa14cf":"markdown","c4f07a62":"markdown","5348811b":"markdown","14586b5f":"markdown","15f175d9":"markdown","24d77ccc":"markdown","fe974d8c":"markdown","95f08e33":"markdown","b0cdef21":"markdown","17009ddb":"markdown"},"source":{"e51297d9":"import pandas as pd\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, plot_precision_recall_curve, plot_confusion_matrix\n\nfrom matplotlib import pyplot as plt\n\n# seed the random\nimport random\nrandom.seed(22)","4dec328f":"!ls ..\/input\/titanic","31f5116b":"train_data = pd.read_csv(\"..\/input\/titanic\/train.csv\", index_col=\"PassengerId\")\ntrain_data.head()","6992a35d":"test_data = pd.read_csv(\"..\/input\/titanic\/test.csv\", index_col=\"PassengerId\")\ntest_data.head()","18e373ea":"y_train_all = train_data.pop(\"Survived\")\nprint(\"Shape of Train labels:\", y_train_all.shape)","c142c7e3":"def extract_title(name):\n    return name.split(\",\")[1].strip().split()[0].strip(\".\").strip()\ntrain_data['Title'] = train_data.Name.map(extract_title)\ntest_data['Title'] = test_data.Name.map(extract_title)","6f70cf0d":"X_train_no_names = train_data.drop([\"Name\"], axis=1)\nX_test_no_names = test_data.drop([\"Name\"], axis=1)\nprint(\"Shape of Train Features:\", X_train_no_names.shape)\nprint(\"Shape of Test Features:\", X_test_no_names.shape)","737acb30":"X_train_no_names.head()","0cf6e2a9":"X_both_no_names = pd.concat([X_train_no_names, X_test_no_names])\n\nX_both = pd.get_dummies(X_both_no_names)\nX_train_all = X_both.iloc[:len(X_train_no_names),:]\nX_test = X_both.iloc[len(X_train_no_names):,:]\n\nX_train_all = X_train_all.fillna(0.0)\nX_test = X_test.fillna(0.0)\n\nX_train_all.head()","ad37a6f6":"print(\"Train shape before and after one hot:\",X_train_no_names.shape, \" -> \", X_train_all.shape)\nprint(\"Test shape before and after one hot:\",X_test_no_names.shape, \" -> \", X_test.shape)","5e83b57f":"X_train, X_val, y_train, y_val = train_test_split(X_train_all, y_train_all, random_state=0)\nX_train.shape, X_val.shape","15b48d97":"model = RandomForestClassifier(verbose=1, criterion='entropy')\nmodel.fit(X_train, y_train)","103e67e7":"y_pred = model.predict(X_val)\nprint(\"Accuracy :\", accuracy_score(y_val, y_pred))\nprint(\"Precision:\", precision_score(y_val, y_pred))\nprint(\"Recall   :\", recall_score(y_val, y_pred))\nprint(\"F1 Score :\", f1_score(y_val, y_pred))","5a0d7086":"fig, ax = plt.subplots(1,2, sharey=True, figsize=(10,5))\nplot_precision_recall_curve(model, X_train, y_train, ax=ax[0])\nplot_precision_recall_curve(model, X_val, y_val, ax=ax[1])\nax[0].set_title(\"Training\")\nax[1].set_title(\"Validation\")\nplt.plot()","d579b4af":"fig, ax = plt.subplots(1,2, sharey=True, figsize=(10,5))\nplot_confusion_matrix(model, X_train, y_train, ax=ax[0])\nplot_confusion_matrix(model,X_val, y_val, ax=ax[1])\nax[0].set_title(\"Training\")\nax[1].set_title(\"Validation\")\nplt.plot()","dee849df":"prediction = model.predict(X_test)","820a8796":"result = pd.DataFrame(prediction, index=X_test.index, columns=[\"Survived\"])\nresult","e78f30f4":"result.to_csv(\"result.csv\")","bdaa14cf":"# 2. Model","c4f07a62":"## 2.3 Prediction on Test Data ","5348811b":"## 1.2 Preprocess Data\n1. Spliting Feature Columns and Label Columns for training data","14586b5f":"# 1. Data Preprocessing","15f175d9":"4. Combining all features to common one hot encoding\n5. Coverting all non-numberic(categorical) features into one hot encoding\n> Note: It will also handle NaN values for Categorical Features\n\n6. For numerical missing values, we will replace with 0.0 (Only Age will missing values)","24d77ccc":"## Train and Validation Split","fe974d8c":"## 1.1 Load Data","95f08e33":"## 2.1. Training Model","b0cdef21":"2. Extract title(Mr, Mrs, Miss, etc) from name\n3. Dropping Name and Ticket Columns from train and test features","17009ddb":"## 2.2 Scoring Model on Train Sata"}}