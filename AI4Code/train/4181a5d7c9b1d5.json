{"cell_type":{"0333c1bd":"code","6295523d":"code","2662ff5f":"code","fe7bc4e0":"code","ce017a48":"code","c4781aa7":"code","bd4cb4ee":"code","fb017c91":"code","5c55b93b":"code","96c69bc0":"code","ead67676":"code","3729621b":"code","01436977":"markdown"},"source":{"0333c1bd":"import numpy as np \nimport pandas as pd\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport os\n\nfrom tensorflow.python.client import device_lib\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras.preprocessing import image","6295523d":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    print(dirname)\n    \n    for filename in filenames:\n        os.path.join(dirname, filename)","2662ff5f":"def datagen_generator():\n    datagen = ImageDataGenerator(\n        rescale=1.\/255,\n        shear_range=0.25,\n        zoom_range=0.25,\n        horizontal_flip=True,\n        height_shift_range=0.5,\n        validation_split=0.2\n    )\n    \n    train = datagen.flow_from_directory(\n        '\/kaggle\/input\/chess-pieces-detection-images-dataset\/',\n        target_size=(128, 128),\n        class_mode='categorical',\n        color_mode='grayscale',\n        batch_size=32,\n        shuffle=True,\n        subset='training'\n    )\n    \n    validation = datagen.flow_from_directory(\n        '\/kaggle\/input\/chess-pieces-detection-images-dataset\/',\n        target_size=(128, 128),\n        class_mode='categorical',\n        color_mode='grayscale',\n        batch_size=32,\n        shuffle=True,\n        subset='validation'\n    )\n    \n    return train, validation\n\ntrain, val = datagen_generator()","fe7bc4e0":"def checkpoint_dir():\n    checkpoint_dir = 'checkpoints\/'\n    \n    if not os.path.exists(checkpoint_dir):\n        os.makedirs(checkpoint_dir)\n        \n    return checkpoint_dir\n\ndef checkpoint_path():\n    \n    return os.path.join(checkpoint_dir(), 'model_checkpoint')\n\ndef checkpoint_saver():\n    checkpoint = tf.compat.v1.train.Saver()\n    checkpoint_dir_ = checkpoint_dir()\n    checkpoint_path_ = checkpoint_path()\n    \n    return checkpoint","ce017a48":"def chess_model():\n    model = tf.keras.Sequential([\n        tf.keras.layers.Conv2D(32, kernel_size=(3, 3), padding='same', activation='relu', input_shape=(128, 128, 1)),\n        tf.keras.layers.BatchNormalization(),\n        tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=2),\n        tf.keras.layers.Dropout(0.2),\n        tf.keras.layers.Conv2D(64, kernel_size=(3, 3), padding='same', activation='relu'),\n        tf.keras.layers.BatchNormalization(),\n        tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=2),\n        tf.keras.layers.Dropout(0.2),\n        tf.keras.layers.Conv2D(128, kernel_size=(3, 3), padding='same', activation='relu'),\n        tf.keras.layers.BatchNormalization(),\n        tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=2),\n        tf.keras.layers.Dropout(0.2),\n        tf.keras.layers.Conv2D(256, kernel_size=(3, 3), padding='same', activation='relu'),\n        tf.keras.layers.BatchNormalization(),\n        tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=2),\n        tf.keras.layers.Dropout(0.2),\n        tf.keras.layers.Conv2D(512, kernel_size=(3, 3), padding='same', activation='relu'),\n        tf.keras.layers.BatchNormalization(),\n        tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=2),\n        tf.keras.layers.Dropout(0.2),\n        tf.keras.layers.Conv2D(1024, kernel_size=(3, 3), padding='same', activation='relu'),\n        tf.keras.layers.BatchNormalization(),\n        tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=2),\n        tf.keras.layers.Dropout(0.2),\n        tf.keras.layers.Conv2D(2048, kernel_size=(3, 5), padding='same', activation='relu'),\n        tf.keras.layers.BatchNormalization(),\n        tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=2),\n        tf.keras.layers.Dropout(0.2),\n        \n        tf.keras.layers.Flatten(),\n        tf.keras.layers.Dense(units=2048, activation='relu'),\n        tf.keras.layers.Dropout(0.2),\n        tf.keras.layers.Dense(units=5, activation='softmax')\n    ])\n    \n    checkpoint_path_ = checkpoint_path()\n    \n    model_checkpoint_callback = tf.keras.callbacks.ModelCheckpoint(\n        filepath=checkpoint_path_,\n        save_weights_only=False,\n        monitor='loss',\n        mode='min',\n        save_best_only=True\n    )\n    \n    callbacks = [\n        EarlyStopping(patience=10),\n        model_checkpoint_callback\n    ]\n    \n    return model, callbacks\n\nmodel, callbacks = chess_model()","c4781aa7":"model.summary()","bd4cb4ee":"model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),\n              loss=tf.keras.losses.CategoricalCrossentropy(from_logits=False),\n              metrics=['accuracy'])","fb017c91":"history = model.fit(\n    train,\n    steps_per_epoch=train.samples\/\/32,\n    validation_data=val,\n    validation_steps=val.samples\/\/32,\n    epochs=124,\n    #callbacks=callbacks\n)","5c55b93b":"img = image.load_img('\/kaggle\/input\/chess-pieces-detection-images-dataset\/pawn_resized\/00000041_resized.jpg', target_size=(128, 128))\n\nplt.imshow(img)\nplt.show()\n\ndef rgb2gray(imgs, axs):\n    rgb_weights = [0.2989, 0.5870, 0.1140]\n    \n    return np.expand_dims(np.dot(imgs, rgb_weights), axis=axs)\n\nimg = image.img_to_array(img)\nimg = np.expand_dims(img, axis=0)\nimg = rgb2gray(img, 3)\n\nimg_pred = model.predict(img)\nprint('Prediction labels: ', img_pred, '\\n')\n\nimg_pred_value = np.where(img_pred == np.amax(img_pred))\n\nif img_pred_value[1] == 0:\n    print('Rook')\nelif img_pred_value[1] == 1:\n    print('Pawn')\nelif img_pred_value[1] == 2:\n    print('Knight')\nelif img_pred_value[1] == 3:\n    print('Queen')\nelse:\n    print('Bishop')","96c69bc0":"metrics_df = pd.DataFrame(history.history)","ead67676":"metrics_df[['loss', 'val_loss']].plot()\nmetrics_df[['accuracy', 'val_accuracy']].plot\nplt.show()","3729621b":"metrics_df[['accuracy', 'val_accuracy']].plot()\nplt.show()","01436977":"Conclusion: Dataset is small, needs a KFold implementation for better results"}}