{"cell_type":{"a0ce18ac":"code","f2c7e841":"code","efc11025":"code","0f8827f9":"code","a099c307":"code","b3368b54":"code","c4d3207c":"code","f9a42653":"code","4016c965":"code","d0a64549":"code","13abd97c":"code","c903a912":"code","c8d57ef5":"code","772ac12c":"code","3b8db6b7":"code","652a4bf9":"code","6f520e03":"code","aea11d9f":"code","608cd514":"code","a8603809":"code","c2e8c15d":"code","d1bac052":"code","50b60d31":"code","b1bb04df":"code","b576d64f":"code","fba773aa":"code","a1e1e77b":"code","bea1053d":"code","6cbdb1cb":"code","443695ba":"code","45af91dd":"code","6bf5a58e":"code","84ba950c":"code","602d9acb":"code","1ec1c1f9":"code","960aacd1":"code","c7d2b61d":"code","4a433d83":"code","162b5e68":"code","60c1de21":"code","50f53245":"code","605a7307":"code","428bee4d":"code","6b0db9cb":"code","a3acd39b":"code","20793ebf":"markdown","65cbaa0f":"markdown","03b3e87d":"markdown","5bb749bb":"markdown","dee8a027":"markdown","7de232a0":"markdown","2f5e0396":"markdown","b854d502":"markdown","486a889d":"markdown","57dc3706":"markdown","8bf62925":"markdown","79f8f772":"markdown","a6085be5":"markdown","2fbac820":"markdown","bb7e5329":"markdown","20575629":"markdown","0a19552e":"markdown","5cdcc6d1":"markdown","6a5684e7":"markdown","c4186b6c":"markdown","c59b9ea7":"markdown","d88d1a1e":"markdown","96442731":"markdown","0f57e050":"markdown","c5f8e913":"markdown","93312976":"markdown","bc1b3d82":"markdown","f055293c":"markdown","7fe705c9":"markdown","41f0aacf":"markdown","063c92b1":"markdown","b033fb17":"markdown","161e6e5b":"markdown","7611755a":"markdown","3319b8ee":"markdown","2583d9c7":"markdown","121e884a":"markdown","2612f259":"markdown","f98a7a30":"markdown","849db94f":"markdown","a93a0abc":"markdown","fd19f2ce":"markdown","909cfbdc":"markdown","f1786f50":"markdown","80cde63e":"markdown","70e12be1":"markdown","66a05136":"markdown","5490b9de":"markdown","452d23c0":"markdown","e8d44c6a":"markdown","5b58e297":"markdown","16bb8932":"markdown","4d22b162":"markdown","bdff5086":"markdown","e0415cb6":"markdown","4a1b8f08":"markdown","b05ae889":"markdown","bd325450":"markdown","815d1220":"markdown","fe780dec":"markdown","9356ee84":"markdown","e041c3d8":"markdown","18b5c67a":"markdown","ecb4a320":"markdown","edde5c69":"markdown","15a54f4a":"markdown","275a1f2a":"markdown","5d007a79":"markdown","32541f0d":"markdown"},"source":{"a0ce18ac":"# Libraries for working with dataframes\nimport pandas as pd\nimport numpy as np\n\n# Libraries for data visualization\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport seaborn as sns\nfrom textwrap import wrap\n\n# Library for displaying multiple dataframes at once (well and much more)\nfrom IPython.display import display, display_html\n\n# Setting for pandas library to output string data in numeric (not exponential) format\npd.set_option('display.float_format', lambda x: f'{x:.2f}')\n\n# Setting for pandas that displays all the contents of a cell\npd.options.display.max_colwidth = 100","f2c7e841":"colors = ['#DC143C', '#fa9b98', '#0d8c68', '#95c5b1', '#4169E1', '#adc3ff', '#595959', '#c4c4c4']\nsns.palplot(sns.color_palette(colors))\nplt.axis('off')\nplt.box(on=None)","efc11025":"def viz_scatter(number_of_graphs: int, \n                df, \n                fill: str, \n                hovertemplate_name: list, \n                color_list: list, \n                title_one: str, \n                title_two: str, \n                y_title: str):\n    '''\n    \n    The function accepts the following arguments:\n    \n    number_of_graphs - the number of objects that need to be placed on the chart (for example, two lines, etc.)\n    df - dataframe\n    fill - parameter to fill the area under the line \n    hovertemplate_name - captions on hover\n    color_list - line colors \n    title_one - first chart name\n    title_two - the second name of the chart\n    y_title - y-axis label\n    legend_x - x-axis position of the legend\n    \n    '''\n    # Create an empty list to add data for graphs\n    data = []\n    \n    # At each iteration, we create parameters for the chart objects\n    for graph_number in range(number_of_graphs):\n        graph = go.Scatter(\n                   hoverinfo='skip', # Removing signatures when selecting\n                   x=df.iloc[:, 0], # Passing data for the x-axis\n                   y=df.iloc[:, graph_number + 1], # Passing data for the y-axis\n                   fill=fill, \n                   # Set your own format for pies on hover\n                   hovertemplate='<b>%{x}<\/b><br>' + f'<b>{hovertemplate_name[graph_number]}: <\/b>'+'%{y}<extra><\/extra>', \n                   # Setting the color\n                   marker_color=color_list[graph_number], \n                   # Setting a caption on hover\n                   name=hovertemplate_name[graph_number]\n        ) \n\n        # Adding parameters to the list\n        data.append(graph)\n    \n    # We transfer data for visualization\n    fig = go.Figure(data)\n\n    # Updating the chart settings when displaying\n    fig.update_layout(\n        title=f'<b>{\"<br>\".join(wrap(title_one, 70))}<\/b><br><sub>{title_two}<\/sub>', # Passing the name of the chart\n        xaxis_title='', # Set the name of the x-axis\n        yaxis_title=y_title, # Set the name of the y-axis\n        plot_bgcolor='rgba(0,0,0,0)', # Setting the background color\n        hovermode='x', # Using the x-axis values for the records\n        # Setting the legend parameters\n        legend_orientation='h',\n        # Setting parameters for the text\n        font=dict(\n            family='Arials',\n            size=13, \n            color='black'\n        )\n    )\n    \n    # Displaying the graph\n    fig.show()","0f8827f9":"def viz_bar(number_of_graphs: int, \n            df, \n            hovertemplate_name: list, \n            color_list: list, \n            title_one: str, \n            title_two: str, \n            x_title: str, \n            y_title: str, \n            barmode: str):\n    '''\n    \n    The function accepts the following arguments:\n    \n    number_of_graphs - the number of objects that need to be placed on the chart (for example, two lines, etc.)\n    df - dataframe\n    hovertemplate_name - captions on hover\n    color_list - line colors \n    title_one - first chart name\n    title_two - the second name of the chart\n    x_title - x-axis label\n    y_title - y-axis label\n    barmode - histogram display option (grouping or accumulation)\n    \n    '''\n    \n    # Create an empty list to add data for graphs\n    data = []\n    \n    # At each iteration, we create parameters for the chart objects\n    for graph_number in range(number_of_graphs):\n        graph = go.Bar(\n                   hoverinfo='skip', # Removing signatures when selecting\n                   x=df.iloc[:, 0], # Passing data for the x-axis\n                   y=df.iloc[:, graph_number + 1], # Passing data for the y-axis\n                   # Set your own format for pies on hover\n                   hovertemplate ='<b>%{x}<\/b><br>' + f'<b>{hovertemplate_name[graph_number]}: <\/b>'+'%{y} <extra><\/extra>', \n                   # Setting the color\n                   marker_color=color_list[graph_number],\n                   # Setting a caption on hover\n                   name=hovertemplate_name[graph_number]\n        ) \n        \n        # Adding parameters to the list\n        data.append(graph)\n    \n    # We transfer data for visualization\n    fig = go.Figure(data)\n\n    # Updating the chart settings when displaying\n    fig.update_layout(\n        title=f'<b>{\"<br>\".join(wrap(title_one, 70))}<\/b><br><sub>{title_two}<\/sub>', # Passing the name of the chart\n        xaxis_title=x_title, # Set the name of the x-axis\n        yaxis_title=y_title, # Set the name of the y-axis\n        plot_bgcolor='rgba(0,0,0,0)', # Setting the background color\n        hovermode=\"x\", # Using the x-axis values for the records\n        barmode=barmode, # Set histogram display option\n        bargap=0.15,# Set distance between columns\n        font=dict(\n            family='Arials', # Setting parameters for the text\n            size=13, \n            color='black'\n        )\n    )\n\n    # Displaying the graph\n    fig.show()","a099c307":"def count_records_and_columns(dfs: list, \n                              indexs: list):\n    '''\n    \n    The function accepts the following arguments:\n    \n    dfs - list of dataframes\n    indexs - list of index names\n    \n    '''\n    # Creating a list of dictionaries\n    info_for_df = []\n    \n    # Create a row counter\n    strings = 0\n    # Creating a column counter\n    columns = 0\n    \n    # At each iteration, we create a dictionary with the number of rows and columns of the current dataframe\n    for df in dfs:\n        info_for_df.append({'Strings': df.shape[0], 'Columns': df.shape[1]})\n\n    # At each iteration, we count the total number of rows and columns for all dataframes\n    for df in dfs:\n        strings += df.shape[0]\n        columns += df.shape[1]\n    \n    info_for_df.append({'Strings': strings, 'Columns': columns})\n    \n    # Create the final dataframe\n    df = pd.DataFrame(info_for_df, index=indexs).T\n\n    # Displaying the dataframe\n    display(df.style\\\n              .set_caption('Number of records and attributes in dataframes')\\\n              .set_table_styles([{'selector': 'tr:hover', 'props': [('background-color', '#c4c4c4')]}]))","b3368b54":"def color_text(df): \n    '''\n    \n    The function accepts the following arguments:\n    \n    df - dataframe\n\n    '''\n    # Checking the data type\n    if df in ['int64','int32']: # If the numeric color is white\n        color = 'White'\n        return f'Color: {color}'\n\ndef cell_fill(df): \n    '''\n    \n    The function accepts the following arguments:\n    \n    df - dataframe\n    \n    '''\n    # Checking data types and filling cells with color\n    if df == 'object': \n        color = '#DCDCDC'\n    elif df in ['float64','float32']:\n        color = '#C0C0C0'\n    elif df in ['int64','int32']:\n        color = '#696969'\n    else: \n        color = '#A9A9A9'\n    return f'background-color: {color}'\n\ndef data_type_visualization(dfs: list, titles: list):\n    '''\n    \n    The function accepts the following arguments:\n    \n    dfs - list of dataframes\n    titles - list of table names\n    \n    '''\n    # We create an empty list. We will put formatted dataframes there\n    data_styler = []\n    \n    output = ''\n\n    # At each iteration, we create a formatted dataframe and put it in the list\n    for i, name_df in enumerate(dfs):\n        df_for_data = pd.DataFrame([dfs[i].dtypes], index=['Type']).T # Create a dataframe\n        # Create a display block and a formatted dataframe\n        df_styler = df_for_data.style\\\n                               .set_table_attributes(\"style='display:inline'\")\\\n                               .set_caption(titles[i])\\\n                               .set_table_styles([{'selector': 'tr:hover', 'props': [('background-color', '#c4c4c4')]}])\\\n                               .background_gradient(cmap='Greys')\\\n                               .set_precision(2)\\\n                               .applymap(cell_fill)\\\n                               .applymap(color_text) \n        data_styler.append(df_styler)\n\n    # At each iteration, we combine the blocks with the dataframe and for display one by one\n    for i, block in enumerate(data_styler):\n        output += data_styler[i]._repr_html_() + ' '\n    \n    # Displaying information on the screen\n    display_html(output, raw=True) ","c4d3207c":"def count_missing_values(dfs: list, titles: list):\n    '''\n    \n    The function accepts the following arguments:\n    \n    dfs - list of dataframes\n    titles - list of table names\n    \n    '''\n    # We create an empty list. We will put formatted dataframes there\n    data_styler = []\n    \n    output = ''\n    \n    # At each iteration, we create a formatted dataframe and put it in the list\n    for i, name_df in enumerate(dfs):\n        new_df = []\n        # At each iteration, we go through the names of the columns of the dataframe\n        for col in name_df.columns:\n            # Calculating the percentage of missing values\n            pct_missing = name_df[col].isnull().mean()\n            # Create a dictionary\n            dic = {'Column name': col, '%': pct_missing}\n            # Add a dictionary to the list\n            new_df.append(dic) \n            \n        # Create a display block and a formatted dataframe    \n        df_styler = pd.DataFrame(new_df).style\\\n                                        .set_table_attributes(\"style='display:inline'\")\\\n                                        .set_caption(titles[i])\\\n                                        .set_table_styles([{'selector': 'tr:hover', 'props': [('background-color', '#c4c4c4')]}])\\\n                                        .background_gradient(cmap='Reds')\\\n                                        .set_precision(2)   \n        data_styler.append(df_styler)\n        \n    # At each iteration, we combine the blocks with the dataframe and for display one by one   \n    for i, block in enumerate(data_styler):\n        output += data_styler[i]._repr_html_() + ' '\n        \n    # Displaying information on the screen  \n    display_html(output, raw=True)","f9a42653":"def check_date(dfs: list, titles: list):\n    '''\n    \n    The function accepts the following arguments:\n    \n    dfs - list of dataframes\n    titles - list of table names\n      \n    '''\n    # We create an empty list. We will put formatted dataframes there\n    list_with_dates = []\n    \n    output = ''\n    \n    # At each iteration, we create a dataframe with a column of current dates and a column of correct dates\n    for i in range(len(dfs)):\n        dates_to_check = pd.concat([pd.DataFrame([dfs[i]['date'].unique()], index=['Date']).T\\\n                                      .astype('datetime64[ns]')\n                                      .sort_values('Date')\\\n                                      .reset_index(),\n                                    pd.DataFrame([pd.date_range(min(dfs[i]['date'].unique()), \n                                    periods=len(dfs[i]['date'].unique())).tolist()], index=['True date']).T\\\n                                      .sort_values('True date')],axis=1).drop('index', axis=1)\n        \n        # At each iteration, we create a dataframe with a column of current dates and a column of correct dates\n        dates_to_check['Check'] = dates_to_check['Date'] == dates_to_check['True date']\n        \n        # Create a display block and a formatted dataframe \n        df_styler = dates_to_check.T.style\\\n                                  .set_caption(titles[i])\\\n                                  .applymap(lambda v: 'background-color: #95c5b1' if v == True else '')\\\n                                  .set_table_styles([{'selector': 'tr:hover','props': [('background-color', '#c4c4c4')]}])\\\n                                  .set_properties(**{'white-space': 'nowrap'})\\\n                                  .set_table_attributes(\"style='display:inline'\")\n        \n        list_with_dates.append(df_styler)\n    \n    # At each iteration, we combine the blocks with the dataframe and for display one by one \n    for i, block in enumerate(list_with_dates):\n        output += list_with_dates[i]._repr_html_() + ' '\n    \n    # Displaying information on the screen \n    display_html(output, raw=True)","4016c965":"# Loading data\ncovid_summary = pd.read_csv('..\/input\/covid19-global-dataset\/worldometer_coronavirus_summary_data.csv')\nvaccination = pd.read_csv('..\/input\/covid-world-vaccination-progress\/country_vaccinations.csv')\ncovid_daily = pd.read_csv('..\/input\/covid19-global-dataset\/worldometer_coronavirus_daily_data.csv')\n\n# For the convenience of further work, we will create a list of dataframes\ndata = [covid_summary, covid_daily, vaccination]\n\n# Create a list of dateframes with time series\ndf_dates = [covid_daily, vaccination]\n\n# Create a list of table names\ntitles = ['Summary date numbers of daily Confirmed, Death and Active cases for 218 countries',\n          'Daily Confirmed, Death and Active cases for 218 countries',\n          'Data for daily and Total Vaccination for COVID-19 in the World']\n\n#Create an empty list for adding formatted dataframes\ndata_for_display = []\n\n# At each iteration, we set the format to the dataframe\nfor i, df in enumerate(data):\n    if i == 2:\n        style_df = df.head().style\\\n                            .set_caption(titles[i])\\\n                            .set_table_styles([{'selector': 'tr:hover','props': [('background-color', '#95c5b1')]}])\\\n                            .set_properties(**{'white-space': 'nowrap'})\\\n                            .set_precision(2)\n    else:\n        style_df = df.head().style\\\n                            .set_caption(titles[i])\\\n                            .set_table_styles([{'selector': 'tr:hover', 'props': [('background-color', '#fa9b98')]}])\\\n                            .set_properties(**{'white-space': 'nowrap'})\\\n                            .set_precision(2)\n        \n    data_for_display.append(style_df) \n    \n# Displaying dataframes\ndisplay(data_for_display[0], data_for_display[1], data_for_display[2])","d0a64549":"count_records_and_columns([data[0], data[1], data[2]], \n                          ['Covid summary', 'Covid daily', 'Vaccination', 'Total'])","13abd97c":"data_type_visualization([data[2], data[0], data[1]], \n                        ['Vaccination data types', 'Covid summary data types', 'Covid daily data types'])","c903a912":"# Let's convert dates to the correct format\ndata[2]['date'] = data[2]['date'].astype('datetime64')\ndata[1]['date'] = data[1]['date'].astype('datetime64')\n\ndata_type_visualization([data[2], data[0], data[1]], \n                        ['Vaccination data types', 'Covid summary data types', 'Covid daily data types'])","c8d57ef5":"# Create an empty list for adding formatted dataframes\ndata_for_display = []\n\n# At each iteration, we set the format to the dataframe\nfor i, df in enumerate(data):\n    if i == 2:\n        style_df = df.describe().style.set_caption(titles[i])\\\n                                .set_table_styles([{'selector': 'tr:hover','props': [('background-color', '#95c5b1')]}])\\\n                                .set_properties(**{'white-space': 'nowrap'})\\\n                                .applymap(lambda v: 'background-color: #fa9b98' if v < 0 else '')\\\n                                .set_precision(2)\n    else:\n        style_df = df.describe().style.set_caption(titles[i])\\\n                                .set_table_styles([{'selector': 'tr:hover', 'props': [('background-color', '#fa9b98')]}])\\\n                                .set_properties(**{'white-space': 'nowrap'})\\\n                                .applymap(lambda v: 'background-color: #fa9b98' if v < 0 else '')\\\n                                .set_precision(2)\n        \n    data_for_display.append(style_df)    \n    \n# Displaying dataframes\ndisplay(data_for_display[0], data_for_display[1], data_for_display[2])","772ac12c":"# Take the modulus of negative numbers\ndata[0]['active_cases'] = data[0]['active_cases'].abs()\ndata[1]['daily_new_cases'] = data[1]['daily_new_cases'].abs()\ndata[1]['active_cases'] = data[1]['active_cases'].abs()\ndata[1]['daily_new_deaths'] = data[1]['daily_new_deaths'].abs()\ndata[2]['daily_vaccinations_raw'] = data[2]['daily_vaccinations_raw'].abs()\n\n# Create an empty list for adding formatted dataframes\ndata_for_display = []\n\n# At each iteration, we set the format to the dataframe\nfor i, df in enumerate(data):\n    if i == 2:\n        style_df = df.describe().style.set_caption(titles[i])\\\n                                .set_table_styles([{'selector': 'tr:hover','props': [('background-color', '#95c5b1')]}])\\\n                                .set_properties(**{'white-space': 'nowrap'})\\\n                                .applymap(lambda v: 'background-color: #fa9b98' if v < 0 else '')\\\n                                .set_precision(2)\n    else:\n        style_df = df.describe().style.set_caption(titles[i])\\\n                                .set_table_styles([{'selector': 'tr:hover', 'props': [('background-color', '#fa9b98')]}])\\\n                                .set_properties(**{'white-space': 'nowrap'})\\\n                                .applymap(lambda v: 'background-color: #fa9b98' if v < 0 else '')\\\n                                .set_precision(2)\n        \n    data_for_display.append(style_df)    \n\n# Displaying dataframes\ndisplay(data_for_display[0], data_for_display[1], data_for_display[2])","3b8db6b7":"count_missing_values([data[2], data[0], data[1]],\n                     ['Missing values vaccination', \n                      'Missing values covid summary', \n                      'Missing values covid daily'])","652a4bf9":"# # Visualizing matrices of missing values in data\nplt.figure(figsize=(19, 4)) # Set the size of the visualizations\nplt.subplot(1, 3, 1) # Set the number of columns, rows and the position of the graph\nsns.heatmap(data[2].isnull(), cbar=False, cmap='nipy_spectral_r')\nplt.title('Missing values vaccination')\nplt.subplot(1, 3, 2)# Set the number of columns, rows and the position of the graph\nsns.heatmap(data[0].isnull(), cbar=False, cmap='nipy_spectral_r')\nplt.title('Missing values covid summary')        \nplt.subplot(1, 3, 3)# Set the number of columns, rows and the position of the graph\nsns.heatmap(data[1].isnull(), cbar=False, cmap='nipy_spectral_r')\nplt.title('Missing values covid daily')\nplt.show()","6f520e03":"# Selecting the required columns of the dataframe\ndata[0] = data[0][['country', \n                   'continent', \n                   'total_confirmed', \n                   'total_deaths', \n                   'total_recovered', \n                   'active_cases', \n                   'population']].copy()\n\n# Setting the formatting of the dataframe when displaying\ndisplay(data[0].iloc[191:212].style.set_caption(titles[0])\\\n                        .set_table_styles([{'selector': 'tr:hover', 'props': [('background-color', '#fa9b98')]}])\\\n                        .set_properties(**{'white-space': 'nowrap'})\\\n                        .highlight_null(null_color='#fa9b98')\\\n                        .set_precision(2))","aea11d9f":"# Replace missing values with zeros\ndata[0]['total_deaths'] = data[0]['total_deaths'].fillna(0)\n\n# Removing the remaining missing values\ndata[0] = data[0].dropna()\n\n# Setting the formatting of the dataframe when displaying\ndisplay(data[0].iloc[191:212].style.set_caption(titles[0])\\\n                        .set_table_styles([{'selector': 'tr:hover', 'props': [('background-color', '#fa9b98')]}])\\\n                        .set_properties(**{'white-space': 'nowrap'})\\\n                        .highlight_null(null_color='#fa9b98')\\\n                        .set_precision(2))","608cd514":"check_date(df_dates, ['Checking dates in covid daily dataframe', \n                      'Checking dates in vaccination dataframe'])","a8603809":"# Setting the formatting of the dataframe when displaying\ndisplay_html(pd.DataFrame([[country for country in data[2]['country'].unique() if country not in data[0]['country'].unique()]], index=['Vaccination country'])\\\n               .style.set_caption('Vaccination country not in covid country')\\\n               .set_table_styles([{'selector': 'tr:hover','props': [('background-color', '#c4c4c4')]}])\\\n               .set_properties(**{'white-space': 'nowrap'})\\\n               .applymap(lambda v: 'background-color: #fa9b98' if v in ['Czechia', 'Hong Kong','United Kingdom', 'United States', \n                                                                        'Vietnam', 'Macao', 'North Macedonia', \"Cote d'Ivoire\"] else '')\\\n               .applymap(lambda v: 'background-color: #c4c4c4' if v in ['England', 'Falkland Islands', 'Guernsey', 'Jersey',\n                                                                        'Northern Ireland', 'Saint Helena', 'Scotland', \n                                                                        'Turks and Caicos Islands', 'Wales'] else '')\\\n               .set_table_attributes(\"style='display:inline'\")._repr_html_() + \" \" +\n             pd.DataFrame([data[0]['country'].unique()], index=['Covid country']).head(len(covid_summary))\\\n               .style.set_caption('Covid country')\\\n               .set_table_styles([{'selector': 'tr:hover','props': [('background-color', '#c4c4c4')]}])\n               .set_properties(**{'white-space': 'nowrap'})\\\n               .applymap(lambda v: 'background-color: #95c5b1' if v in ['Czech Republic', 'China Hong Kong Sar', \n                                                                        'UK', 'USA', 'Viet Nam', 'Cote D Ivoire',\n                                                                        'China Macao Sar', 'Macedonia'] else '')\\\n               .set_table_attributes(\"style='display:inline'\")._repr_html_(), raw=True)","c2e8c15d":"# We leave data on UK and countries included in UK\nuk_countries = data[2][data[2]['country'].isin(['England', 'Falkland Islands', 'Scotland', 'United Kingdom', \n                                                'Wales', 'Northern Ireland','Turks and Caicos Islands', \n                                                'Saint Helena','Guernsey', 'Jersey'])]\\\n                                         .groupby('country').sum()\\\n                                         .sort_values('total_vaccinations', ascending=False)['total_vaccinations']\\\n                                         .reset_index().set_index('country')\n\n# Setting the formatting of the dataframe when displaying\ndisplay(uk_countries.style.highlight_max(color='#95c5b1')\\\n                    .set_caption('Countries of the United Kingdom')\\\n                    .set_table_styles([{'selector': 'tr:hover','props': [('background-color', '#c4c4c4')]}])\\\n                    .set_properties(**{'white-space': 'nowrap'})\\\n                    .applymap(lambda v: 'background-color: #c4c4c4' if v < uk_countries['total_vaccinations'].max() else '')\\\n                    .set_precision(2))\n\n# Setting the formatting of the dataframe when displaying\ndisplay(pd.DataFrame([{'United Kingdom': uk_countries.iloc[0]['total_vaccinations'], \n                       'United Kingdom countries': uk_countries.iloc[1:]['total_vaccinations'].sum(),\n                       'Difference': uk_countries.iloc[1:]['total_vaccinations'].sum() - uk_countries.iloc[0]['total_vaccinations']}], \n                        index=['Total vaccinations'])\\\n                       .style.set_caption('Difference in the number of vaccinations')\\\n                       .set_table_styles([{'selector': 'tr:hover','props': [('background-color', '#c4c4c4')]}])\\\n                       .set_properties(**{'white-space': 'nowrap'})\\\n                       .set_precision(2))","d1bac052":"# Let's bring the names to a single format\ndata[2] = data[2].replace({\"Cote d'Ivoire\": 'Cote D Ivoire', 'Czechia': 'Czech Republic',\n                           'Hong Kong': 'China Hong Kong Sar','Macao': 'China Macao Sar',\n                           'United Kingdom': 'UK', 'United States': 'USA', 'Vietnam': 'Viet Nam',\n                           'North Macedonia': 'Macedonia'})\n\n# Removing unnecessary countries\ndata[2] = data[2][~data[2]['country'].isin(['England', 'Falkland Islands', 'Guernsey',\n                                            'Jersey', 'Northern Ireland', 'Saint Helena',\n                                            'Scotland', 'Turks and Caicos Islands', 'Wales'])]\n\n# We bring the names of countries to a single spelling\ndata[2]['country'] = np.where(~data[2]['country'].isin(['UK', 'USA']), \n                               data[2]['country'].str.title(), \n                               data[2]['country'])\n\n# Setting the formatting of the dataframe when displaying\ndisplay_html(pd.DataFrame([[country for country in data[2]['country'].unique() if country not in data[0]['country'].unique()]], \n                            index=['Vaccination country'])\\\n               .style.set_caption('Vaccination country not in covid country')\\\n               .set_table_styles([{'selector': 'tr:hover','props': [('background-color', '#c4c4c4')]}])\\\n               .set_properties(**{'white-space': 'nowrap'})\\\n               .set_table_attributes(\"style='display:inline'\")._repr_html_() + \" \" +\n             pd.DataFrame([data[0]['country'].unique()], index=['Covid country']).head(len(covid_summary))\\\n               .style.set_caption('Covid country')\\\n               .set_table_styles([{'selector': 'tr:hover','props': [('background-color', '#c4c4c4')]}])\n               .set_properties(**{'white-space': 'nowrap'})\\\n               .set_table_attributes(\"style='display:inline'\")._repr_html_(), raw=True)","50b60d31":"# Setting the formatting of the dataframe when displaying\ndisplay(pd.DataFrame([data[0]['continent'].unique()], index=['Continent']).T\\\n               .style.set_caption('Continent names')\\\n               .set_table_styles([{'selector': 'tr:hover','props': [('background-color', '#c4c4c4')]}])\\\n               .set_properties(**{'white-space': 'nowrap'}))","b1bb04df":"# Setting the formatting of the dataframe when displaying\ndisplay(pd.DataFrame([data[2]['vaccines'].unique()], index=['Vaccine']).T.sort_values('Vaccine')\\\n          .style.set_caption('Vaccine names')\\\n          .set_table_styles([{'selector': 'tr:hover','props': [('background-color', '#c4c4c4')]}])\\\n          .set_properties(**{'white-space': 'nowrap'}))","b576d64f":"# Merge two dataframes for covid infection\nmerge_covid = data[1].merge(data[0][['country', 'continent']]).set_index('date')\n\n# We apply the resampling method, group the data by week\ncovid_weekly = merge_covid.resample('W').sum().reset_index().round(0)\n\n# Setting the formatting of the dataframe when displaying\ndisplay(covid_weekly.style.set_caption('Weekly Confirmed, Death and Active cases for 218 countries')\\\n                          .set_properties(**{'white-space': 'nowrap'})\\\n                          .set_table_styles([{'selector': 'tr:hover','props': [('background-color', '#c4c4c4')]}])\\\n                          .set_properties(**{'white-space': 'nowrap'})\\\n                          .set_precision(0)\\\n                          .bar(subset=['cumulative_total_cases'], color=colors[7])\\\n                          .bar(subset=['cumulative_total_deaths'], color=colors[1])\n                          .bar(subset=['active_cases'], color=colors[5]))","fba773aa":"disease_prevalence_rates = data[0].sort_values('total_confirmed', ascending=False)\n\n# At each iteration, we create a new column with the corresponding indicator\nfor col in disease_prevalence_rates.columns[2:6]:\n    disease_prevalence_rates[col.split('_')[1].title() + ' %'] = disease_prevalence_rates[col] \/ disease_prevalence_rates['population'] * 100\n\n# Select only the required columns\ndisease_prevalence_rates = disease_prevalence_rates[['country', \n                                                     'Confirmed %', \n                                                     'Deaths %', \n                                                     'Recovered %', \n                                                     'Cases %']].round(2).sort_values('Confirmed %',ascending=False)\n\n# Setting the formatting of the dataframe when displaying\ndisplay(disease_prevalence_rates.sort_values('Confirmed %', ascending=False).set_index('country').T.iloc[:, 0:15]\\\n                                      .style.set_caption('Disease prevalence rates top 15<br><sub>in % from population<\/sub>')\\\n                                      .set_table_styles([{'selector': 'tr:hover','props': [('background-color', '#c4c4c4')]}])\\\n                                      .set_properties(**{'white-space': 'nowrap'})\\\n                                      .set_precision(2)\\\n                                      .format({'Confirmed %': '{:2}%', 'Deaths %': '{:2}%', 'Recovered %': '{:2}%', 'Cases %': '{:2}%'}))","a1e1e77b":"# Create a copy of the dataframe\ndeaths_ratio = data[0].copy()\n\n# Create a new column with mortality rate\ndeaths_ratio['Deaths ratio'] = deaths_ratio['total_deaths'] \/ deaths_ratio['total_confirmed'] * 100\n\n# Select only the required columns\ndeaths_ratio = deaths_ratio[['country', 'continent', 'Deaths ratio']].round(2).sort_values('Deaths ratio', ascending=False)\n\n# Setting the formatting of the dataframe when displaying\ndisplay(deaths_ratio.sort_values('Deaths ratio', ascending=False).set_index('country').T.iloc[:, 0:15]\\\n                          .style.set_caption('Deaths ratio in the world top 15<br><sub>in % from confirmed<\/sub>')\\\n                          .set_table_styles([{'selector': 'tr:hover','props': [('background-color', '#c4c4c4')]}])\\\n                          .set_properties(**{'white-space': 'nowrap'})\\\n                          .set_precision(2)\\\n                          .format({'Deaths ratio': '{:2}%'}))","bea1053d":"# Grouping data by vaccines\nvaccines = data[2].groupby(['country', 'vaccines']).count().reset_index()[['country', 'vaccines']]\\\n                  .groupby('vaccines').count()['country'].reset_index().sort_values('country', ascending=False)\n\n# Select only the required columns\nvaccines.columns = ['Vaccines', 'Number of countries used']\n\n# Setting the formatting of the dataframe when displaying\ndisplay(vaccines.style.set_caption('Number of countries used vaccine')\\\n                      .set_table_styles([{'selector': 'tr:hover','props': [('background-color', '#c4c4c4')]}])\\\n                      .set_properties(**{'white-space': 'nowrap'}))","6cbdb1cb":"# We create a list of unique vaccines\nvaccines_list = set([v.strip() for vac in vaccines['Vaccines'].unique() for v in vac.split(',')])\n\n# Transpose the dataframe and create a dictionary\nvaccine_dicts = vaccines.T.to_dict().values()\n\n# We create an empty dictionary where we will add the vaccine and the number of countries that use it\ndict_vaccine = {}\n\n# At each iteration, we take the name of the vaccine and count the number of countries that use it\nfor vaccine in vaccines_list:\n    counter_countries = 0\n    for vac in vaccine_dicts:\n        if vaccine in vac['Vaccines']:\n            counter_countries += list(vac.values())[-1]\n    dict_vaccine[vaccine] = counter_countries\n\n# We create a dataframe with the top vaccines by the number of countries that use them    \ntop_vaccine = pd.DataFrame([dict_vaccine], index=['Number of countries used']).T.sort_values('Number of countries used', ascending=False)\n\n# Add a column about the country of production\ntop_vaccine.loc[top_vaccine.index.isin(['Oxford\/AstraZeneca']), 'The country of manufacture'] = 'Made in UK'\ntop_vaccine.loc[top_vaccine.index.isin(['Pfizer\/BioNTech']), 'The country of manufacture'] = 'Made in Germany and USA'\ntop_vaccine.loc[top_vaccine.index.isin(['Moderna', 'Johnson&Johnson']), 'The country of manufacture'] = 'Made in USA'\ntop_vaccine.loc[top_vaccine.index.isin(['Sinopharm\/Beijing', 'Sinovac', 'Sinopharm\/Wuhan']), 'The country of manufacture'] = 'Made in China'\ntop_vaccine.loc[top_vaccine.index.isin(['Sinopharm\/Beijing', 'Sinovac', 'Sinopharm\/Wuhan']), 'The country of manufacture'] = 'Made in China'\ntop_vaccine.loc[top_vaccine.index.isin(['Sputnik V', 'EpiVacCorona']), 'The country of manufacture'] = 'Made in Russia'\ntop_vaccine.loc[top_vaccine.index.isin(['Covaxin']), 'The country of manufacture'] = 'Made in India'\n\n# Setting the formatting of the dataframe when displaying\ndisplay(top_vaccine.style.set_caption('Number of countries used vaccine')\\\n                   .set_table_styles([{'selector': 'tr:hover','props': [('background-color', '#c4c4c4')]}])\\\n                   .set_properties(**{'white-space': 'nowrap'}))","443695ba":"# Grouping data by country and vaccine\ncountry_vaccines = data[2].groupby(['country', 'vaccines']).count().reset_index()[['country', 'vaccines']]\n\n# Setting the formatting of the dataframe when displaying\ndisplay(country_vaccines.head().style.set_caption('What vaccines are used by countries')\\\n                               .set_table_styles([{'selector': 'tr:hover','props': [('background-color', '#c4c4c4')]}])\\\n                               .set_properties(**{'white-space': 'nowrap'}))","45af91dd":"# Let's apply the resampling method and combine vaccination data with infection data\nglobal_vaccination = data[2].groupby('date').sum().resample('W')\\\n                                            .sum().reset_index()[['date', 'total_vaccinations', 'daily_vaccinations']]\\\n                                            .merge(covid_weekly)\\\n                                            .round(0)\n\n# Setting the formatting of the dataframe when displaying\ndisplay(global_vaccination.style.set_caption('Global_vaccination')\\\n                                .set_table_styles([{'selector': 'tr:hover','props': [('background-color', '#c4c4c4')]}])\\\n                                .set_properties(**{'white-space': 'nowrap'})\\\n                                .set_precision(0)\\\n                                .bar(subset=['total_vaccinations'], color=colors[3])\\\n                                .bar(subset=['cumulative_total_cases'], color=colors[7])\n                                .bar(subset=['active_cases'], color=colors[5])\n                                .bar(subset=['cumulative_total_deaths'], color=colors[1]))","6bf5a58e":"# Grouping data by country\ncountry_vaccination = data[2].groupby('country').sum().reset_index()\n\n# We combine the data by adding information about the population\ncountry_vaccination = country_vaccination.merge(covid_summary)[['country', \n                                                                'daily_vaccinations', \n                                                                'population']]\n\n# Let's calculate the column with the vaccination rate\ncountry_vaccination['Vaccination rate %'] = round((country_vaccination['daily_vaccinations'] \/ 2) \/ country_vaccination['population'], 4) \n\n# Setting the formatting of the dataframe when displaying\ndisplay(country_vaccination.sort_values('Vaccination rate %', ascending=False).set_index('country').T.iloc[:, 0:15]\\\n                   .style.set_caption('Vaccination rate %')\\\n                   .set_table_styles([{'selector': 'tr:hover','props': [('background-color', '#c4c4c4')]}])\\\n                   .set_properties(**{'white-space': 'nowrap'})\\\n                   .set_precision(2))","84ba950c":"# Let's group the data by date and vaccine\ndaly_total_vaccinations = data[2].groupby(['date', 'vaccines'])['total_vaccinations'].sum().reset_index()\n\n# Setting the formatting of the dataframe when displaying\ndisplay(daly_total_vaccinations.head().style.set_caption('Daily vaccinations by type of vaccine')\\\n                                      .set_table_styles([{'selector': 'tr:hover','props': [('background-color', '#c4c4c4')]}])\\\n                                      .set_properties(**{'white-space': 'nowrap'})\\\n                                      .set_precision(2))","602d9acb":"viz_scatter(2, covid_weekly[['date', 'cumulative_total_cases', 'cumulative_total_deaths']].iloc[:47], 'tozeroy',\n            ['Total infected', 'Total deaths'], [colors[6], colors[0]], \n            'The weekly dynamics of the spread of the disease around the world', \n            'Cumulative data on the number of infections and deaths','Count')","1ec1c1f9":"viz_scatter(3, covid_weekly[['date', 'daily_new_cases', 'active_cases', 'daily_new_deaths']].iloc[:47], 'none',\n            ['Weekly new infected', 'Weekly active cases', 'Weekly new deaths'], [colors[6], colors[4], colors[0]], \n            'The weekly dynamics of the spread of the disease around the world', \n            'Data on weekly infections, active cases and deaths (not cumulative data)', 'Count')","960aacd1":"fig = px.choropleth(\n         disease_prevalence_rates, # Passing the dataframe\n         locations=\"country\", # Select the column with the name of the countries\n         locationmode='country names', # We pass the parameter of determining the country on the map (by name)\n         color='Confirmed %', # Passing a column with values\n         hover_data=['Confirmed %'], # Passing a column with values for labels on hover\n         color_continuous_scale=\"reds\" # Setting a color for the heatmap\n)\n\n\nfig.update_layout(\n    # Set the name of the map\n    title_text='<b>Total infected in the world<\/b><br><sub>In % from population<\/sub>',\n    # Determine the map display settings (remove the frame, etc.)\n    geo=dict(\n       showframe=False,\n       showcoastlines=False,\n       projection_type='equirectangular'\n    ),\n       # Setting parameters for the text\n       font=dict(\n       family='Arials',\n       size=13, \n       color='black'\n    )\n)\n\nfig.show()","c7d2b61d":"fig = px.scatter_geo(\n         deaths_ratio, # Passing the dataframe\n         locations='country', # Select the column with the name of the countries\n         color='continent', # Passing a column with values\n         locationmode='country names', # We pass the parameter of determining the country on the map (by name)\n         hover_name='country',  # Passing values for the signature on hover\n         size='Deaths ratio' # Passing a column with values\n)\n\nfig.update_layout(\n    # Set the name of the map\n    title_text='<b>Death rate in the world<\/b><br><sub>In % of cases<\/sub>',\n    legend_orientation='h', # Place the legend caption under the chart\n    legend_title_text='', # Remove the name of the legend group\n    # Determine the map display settings (remove the frame, etc.)\n    geo=dict(\n       showframe=False,\n       showcoastlines=False,\n       projection_type='equirectangular'\n    ),\n    # Setting parameters for the text\n    font=dict(\n       family='Arials',\n       size=13, \n       color='black'\n    )\n)\n\nfig.show()","4a433d83":"viz_bar(3, disease_prevalence_rates[['country', 'Deaths %', 'Cases %', 'Recovered %']], \n                     ['Deaths', 'Active', 'Recovered'], [colors[0], colors[4], colors[2]], \n                     'Dynamics of the spread of the disease in the context of \u0441ountries', \n                     'The percentage of recovered, active and deaths from the total population of the \u0441ountries', \n                     '', 'Percents, (%)', 'stack')","162b5e68":"fig = go.Figure(go.Bar(\n         hoverinfo='skip', # Removing signatures when selecting\n         x=top_vaccine.sort_values(by='Number of countries used')['Number of countries used'], # Passing data for the x-axis\n         y=top_vaccine.sort_values(by='Number of countries used').index, # Passing data for the y-axis\n         # Set your own format for pies on hover\n         hovertemplate ='<b>Number of countries using vaccines: %{x}<\/b><br>', \n         orientation='h',\n         marker_color=colors[6], # Setting the color\n         name='',\n         text=top_vaccine.sort_values(by='Number of countries used')['The country of manufacture'],\n         textposition='auto'))\n\n# Updating the chart settings when displaying\nfig.update_layout(\n    title=f'<b>Vaccines used in different countries<\/b>', # Passing the name of the chart\n    # Set the name of the y-axis\n    plot_bgcolor='rgba(0,0,0,0)', # Setting the background color\n    # Using the x-axis values for the records\n    barmode='group', # Set histogram display option\n    bargap=0.15,# Set distance between columns\n    # Adding the x-axis trail on hover\n    hovermode='y',\n    font=dict(\n         family='Arials', # Setting parameters for the text\n         size=13, \n         color='black'))\n\nfig.update_xaxes(showticklabels=False)\n\n# Load flag data\nflags = pd.read_csv('..\/input\/countries-iso-codes-continent-flags-url\/countries_continents_codes_flags_url.csv')\n\n# Create a list of links to flags photos\nflag_image_links = [\n                    flags[flags['country'] == 'United Kingdom']['image_url'].to_string().split(' ')[4],\n                    flags[flags['country'] == 'United States']['image_url'].to_string().split(' ')[4],\n                    flags[flags['country'] == 'Germany']['image_url'].to_string().split(' ')[4],\n                    flags[flags['country'] == 'China']['image_url'].to_string().split(' ')[4],\n                    flags[flags['country'] == 'Russia']['image_url'].to_string().split(' ')[4],\n                    flags[flags['country'] == 'India']['image_url'].to_string().split(' ')[4]\n]\n\n# Create a list of coordinates to place each flag on the chart\nimage_position = [\n                  [1.006, 0.912], \n                  [0.750, 0.809], \n                  [0.805, 0.809], \n                  [0.390, 0.709], \n                  [0.296, 0.609], \n                  [0.260, 0.509], \n                  [0.240, 0.409], \n                  [0.240, 0.309], \n                  [0.240, 0.209], \n                  [0.240, 0.109], \n                  [0.240, 0.009]\n]\n\nmanufacture = top_vaccine.index.tolist()\nmanufacture.insert(3, manufacture[2])\nmanufacture[7], manufacture[8] = manufacture[8], manufacture[7]\nmanufacture[-1], manufacture[9] = manufacture[9], manufacture[-1]\n\n# At each iteration, add a flag on the chart\nfor vaccine in zip(image_position, manufacture):\n    if vaccine[1] == 'Oxford\/AstraZeneca':\n        fig.add_layout_image(\n            dict(\n                source=flag_image_links[0],\n                x=vaccine[0][0], y=vaccine[0][1],\n                sizex=0.05, sizey=0.081,\n                xanchor=\"right\", yanchor=\"bottom\",\n                sizing='stretch'\n        )\n    )\n        \n    elif vaccine[1] == 'Pfizer\/BioNTech':\n        fig.add_layout_image(\n            dict(\n                source=flag_image_links[2],\n                x=vaccine[0][0], y=vaccine[0][1],\n                sizex=0.05, sizey=0.081,\n                xanchor=\"right\", yanchor=\"bottom\",\n                sizing='stretch'\n        )\n    )    \n               \n    elif vaccine[1] in ('Moderna', 'Johnson&Johnson'):\n        fig.add_layout_image(\n            dict(\n                source=flag_image_links[1],\n                x=vaccine[0][0], y=vaccine[0][1],\n                sizex=0.05, sizey=0.081,\n                xanchor=\"right\", yanchor=\"bottom\",\n                sizing='stretch'\n        )\n    )\n        \n    elif vaccine[1] in ('Sinopharm\/Beijing', 'Sinovac','Sinopharm\/Wuhan'):\n        fig.add_layout_image(\n            dict(\n                source=flag_image_links[3],\n                x=vaccine[0][0], y=vaccine[0][1],\n                sizex=0.05, sizey=0.081,\n                xanchor=\"right\", yanchor=\"bottom\",\n                sizing='stretch'\n        )\n    )  \n    \n    elif vaccine[1] in ('Sputnik V', 'EpiVacCorona'):\n        fig.add_layout_image(\n            dict(\n                source=flag_image_links[4],\n                x=vaccine[0][0], y=vaccine[0][1],\n                sizex=0.05, sizey=0.081,\n                xanchor=\"right\", yanchor=\"bottom\",\n                sizing='stretch'\n        )\n    )\n        \n    elif vaccine[1] == 'Covaxin':\n        fig.add_layout_image(\n            dict(\n                source=flag_image_links[5],\n                x=vaccine[0][0], y=vaccine[0][1],\n                sizex=0.05, sizey=0.081,\n                xanchor=\"right\", yanchor=\"bottom\",\n                sizing='stretch'\n        )\n    )\n\nfig.show()","60c1de21":"fig = px.choropleth(\n         country_vaccines, # Passing the dataframe \n         locations='country', # Select the column with the name of the countries\n         color='vaccines', # Passing a column with values\n         locationmode='country names' # We pass the parameter of determining the country on the map (by name)\n)\n\nfig.update_layout(\n    # Set the name of the map\n    title_text='<b>Vaccines used in different countries<\/b>',\n    # Hide the legend\n    showlegend=False,\n    # Determine the map display settings (remove the frame, etc.)\n    geo=dict(\n       showframe=False,\n       showcoastlines=False,\n       projection_type='equirectangular'\n    ),\n       # Setting parameters for the text\n       font=dict(\n           family='Arials',\n           size=13, \n           color='black'\n    )\n)\nfig.show()","50f53245":"viz_scatter(3, global_vaccination[['date', 'total_vaccinations', 'cumulative_total_cases', 'cumulative_total_deaths']].loc[:16], 'tozeroy', \n            ['Total vaccinations', 'Total infected', 'Total deaths'], [colors[2], colors[6], colors[0]], \n            'The dynamics of the spread of the disease around the world, taking into account the global vaccination', \n            'Cumulative data on the number of vaccinations, infections and deaths','Count')","605a7307":"viz_scatter(4, global_vaccination[['date', 'daily_vaccinations', 'daily_new_cases', 'active_cases', 'daily_new_deaths']].loc[:16], 'none',\n            ['Weekly vaccinations', 'Weekly new infected', 'Weekly active cases', 'Weekly new deaths'], [colors[2], colors[6], colors[4], colors[0]], \n            'The dynamics of the spread of the disease around the world', \n            'Data on weekly vaccinations, infections, active cases and weekly deaths (not cumulative data)', 'Count')","428bee4d":"fig = px.choropleth(\n         country_vaccination, # Passing the dataframe \n         locations=\"country\", # Select the column with the name of the countries\n         locationmode='country names', # We pass the parameter of determining the country on the map (by name)\n         color=\"Vaccination rate %\", # Passing a column with values\n         color_continuous_scale=\"greens\" # Setting a color for the heatmap\n)\n\n\nfig.update_layout(\n    # Set the name of the map\n    title_text='<b>Total vaccinations in the world<\/b><br><sub>In % from population<\/sub>',\n    # Determine the map display settings (remove the frame, etc.)\n    geo=dict(\n       showframe=False,\n       showcoastlines=False,\n       projection_type='equirectangular'\n    ),\n       # Setting parameters for the text\n       font=dict(\n           family='Arials',\n           size=13, \n           color='black'\n    )\n)\n\nfig.show()","6b0db9cb":"viz_scatter(2, global_vaccination[['date', 'daily_vaccinations', 'daily_new_cases']].loc[:16], 'tozeroy',\n            ['Weekly vaccinations', 'Weekly new infected'], [colors[2], colors[6]], \n            'The dynamics of the spread of the disease around the world, taking into account the global vaccination', \n            'Data on weekly vaccinations and new cases (not cumulative data)', 'Count')","a3acd39b":"fig = px.line(\n         daly_total_vaccinations,# Passing the dataframe\n         x='date', # Passing parameters for the x axis\n         y='total_vaccinations', # Passing parameters for the y axis\n         color='vaccines' \n)\n\nfig.update_layout(\n    showlegend=False,# Hiding the legend\n    title=f'<b>Daily vaccinations by vaccine used<\/b>', # Passing the name of the chart\n    xaxis_title='', # Set the name of the x-axis\n    yaxis_title='Total vaccinations', # Set the name of the y-axis\n    plot_bgcolor='rgba(0,0,0,0)', # Setting the background color\n    hovermode=\"x\", # Using the x-axis values for the records\n    # Setting parameters for the text\n    font=dict(\n        family='Arials',\n        size=13, \n        color='black'\n    )\n)\n\nfig.show()","20793ebf":"<p id=\"part1\"><\/p>\n\n# <span style=\"font-family: Arials; font-size: 18px; font-style: bold; font-weight: bold; letter-spacing: 2px; color: #DC143C\">1. INTRODUCTION<\/span>\n<hr style=\"height: 0.5px; border: 0; background-color: 'Black'\">\n\n<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">Although it is still unknown exactly where the outbreak first started, many early cases of COVID-19 have been attributed to people who have visited the Huanan Seafood Wholesale Market, located in Wuhan, Hubei, China. On 11 February 2020, the World Health Organization (WHO) named the disease \"COVID-19\", which is short for coronavirus disease 2019. The virus that caused the outbreak is known as severe acute respiratory syndrome coronavirus 2 (SARS-CoV-2), a newly discovered virus closely related to bat coronaviruses, pangolin coronaviruses, and SARS-CoV. Scientific consensus is that COVID-19 is a zoonotic virus that arose from bats in a natural setting.<\/p>\n\n<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">The earliest known person with symptoms was later discovered to have fallen ill on 1 December 2019, and that person did not have visible connections with the later wet market cluster. However, an earlier case of infection could have occurred on 17 November. Of the early cluster of cases reported that month, two thirds were found to have a link with the market.<\/p>\n\n<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">At present, humanity continues to fight the global epidemic, weapons in the form of vaccines against the virus have been developed in various countries, and mass vaccination of the entire population of the planet is underway.<\/p>\n\n<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">The purpose of this work is to tell the story of how the struggle of the entire population of the planet with an insidious virus that has claimed millions of human lives all over the world is going on.<\/p>\n","65cbaa0f":"<p style=\"font-family: Arials; font-size: 14px; font-weight: bold; letter-spacing: 2px; color: #DC143C; line-height:2.0\">2.2.1 LOADING DATA<\/p>","03b3e87d":"<p style=\"font-family: Arials; font-size: 14px; font-weight: bold; letter-spacing: 2px; color: #DC143C; line-height:2.0\">DATA FOR FINAL ROUND<\/p>\n<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">\ud83d\udccc Let's use the resampling method again and group the data in a weekly context by illness, active case, and death, and add information about vaccinations to it.<\/p>","5bb749bb":"<p style=\"font-family: Arials; font-size: 14px; font-weight: bold; letter-spacing: 2px; color: #DC143C; line-height:2.0\">2.2.7 EXPLORING CATEGORICAL DATA<\/p>","dee8a027":"<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">But it is worth noting that the level of infection does not yet indicate the strength of the onset of darkness (the scale of the global pandemic). The worst consequences of the virus are the death of the infected. In this context, the most severe blow fell on <b style='font-weight: bold; color: Black'>Yemen, Western Sahara, Mexico, Sudan, Syria, Egypt, Ecuador, China, Montserrat, Bolivia.<\/b> On the graph, this can be seen from the volume of bubbles, the larger the volume, the higher the death rate in the country.<\/p>","7de232a0":"<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">2. Bar visualization function<\/p>\n<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">\ud83d\udccc Click the \"Show hidden code\" button to view the function.<\/p>","2f5e0396":"<p id=\"part10\"><\/p>\n\n# <span style=\"font-family: Arials; font-size: 15px; font-weight: bold; letter-spacing: 2px; color: #DC143C; line-height:2.0\">3.4 BONUS INFORMATION<\/span>\n<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">As bonus information, let's look directly at the vaccination process itself.<\/p>","b854d502":"<p style=\"font-family: Arials; font-size: 18px;  font-weight: bold; text-align: center; color: #DC143C\">Thank you for reading my work to the end. I tried to do not only an analysis of the global situation regarding the distribution of Covid-19 around the world, but also to create a guide to conducting an EDA for aspiring data science specialists (working with code, visualization, designing a notebook). I would be grateful for any feedback and your votes. Have a nice day and I hope my work was interesting and useful for you. See you soon.<\/p>\n<p style=\"font-family: Arials; font-size: 18px;  font-weight: bold; text-align: center; color: #DC143C\">This analytical solution will be updated as the source data is updated.<\/p>","486a889d":"<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">\ud83d\udccc Prepare data by country and vaccine used.<\/p>","57dc3706":"<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">\ud83d\udccc For a more correct display of the mortality rate of the population, we will calculate the mortality rate from the number of cases.<\/p>","8bf62925":"<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">A similar trend is observed in the weekly dynamics. The increase in the weekly number of infected, sick and dead is slowing down with an increase in vaccination of the population (not cumulatively, but weekly).<\/p>","79f8f772":"<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">As we can see, the names of some countries differ in spelling (I highlighted the wrong spelling in red, the correct one in green). In addition, the vaccination data contains data for the United Kingdom and its member countries (highlighted in gray). Perhaps this is duplication of information, you need to check it.<\/p>","a6085be5":"<p id=\"part4\"><\/p>\n\n# <span style=\"font-family: Arials; font-size: 16px; font-weight: bold; letter-spacing: 2px; color: #DC143C; line-height:2.0\">2.2 DATA EXPLORATION AND CLEANING<\/span>\n<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">Before the start of the battle, we explore the battlefield (data).<\/p>","2fbac820":"<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">According to Wikipedia, countries (England, Scotland, Wales, Northern Ireland, Jersey, Guernsey, Turks and Caicos Islands, Falkland Islands, Saint Helena (highlighted in gray)) are part of the United Kingdom. As you can see, the sum of all vaccinations in the UK is approximately equal to the sum of vaccinations in these countries. Thus, it can be assumed that this is duplication of information.<\/p>\n\n<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">We will standardize the names of countries, remove duplicate information, and bring the spelling of countries to a single format (all words with a capital letter).<\/p>","bb7e5329":"<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">The following countries have taken the worst hit: <b style='font-weight: bold; color: Black'>Andorra, Montenegro, Czech Republic, Gibraltar, San Marino, Slovenia, Luxembourg, USA, Israel, Aruba.<\/b> The level of infection of the population in them is the highest. This can be seen by the color on the heatmap. The brighter the red color, the stronger the infection rate in the country.<\/p>","20575629":"<p id=\"part8\"><\/p>\n\n# <span style=\"font-family: Arials; font-size: 15px; font-weight: bold; letter-spacing: 2px; color: #DC143C; line-height:2.0\">3.2 ROUND TWO: CREATING NEW WEAPONS (VACCINE)<\/span>\n<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">In the second round, humanity launched a retaliatory attack. All over the world, restrictive measures are being introduced for the operation of enterprises, borders are closed, educational institutions are moving online, and new outpatient centers are being created to serve the infected population. The production volumes of protective equipment (sterile masks, antiseptics, sterile gloves) and mechanical ventilation are increasing. Humanity is throwing all its strength into the production of weapons (vaccines) against the virus.<\/p>","0a19552e":"<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">\ud83d\udccc By analyzing the missing values, all three data frames were found to have missing values. Since it is difficult to establish the reason for the missing values, we will use the following approaches. For data containing time series, we will use the resampling method. For data containing general information for all countries, we will do the following:\n<ul style=\"font-family: Arials; font-size: 18px; color: 'Black\">\n<li> fill in the total_deaths column with zero values, since the total_confirmed column is the sum of the total_deaths, total_recovered and active_cases columns, and in the case of missing values \u200b\u200bin the total_deaths column, the value in the total_confirmed column is equal to the sum of the total_recovered and active_cases columns, so it can be assumed that there were no deaths in the country;<\/li>\n<li>we will simply delete the entries in which the values are missing in both the total_recovered column and the active_cases column, since it is difficult to guess what values there should be.<\/li>\n<\/ul>  ","5cdcc6d1":"<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">\ud83d\udccc Thus, we have prepared the following information:\n<ul style=\"font-family: Arials; font-size: 18px; color: 'Black\">    \n<li><b style='font-weight: bold; color: Black'>Worldwide weekly vaccination data.<\/b><\/li>\n<li><b style='font-weight: bold; color: Black'>The vaccination ratio was calculated, reflecting the intensity of vaccination of the population in the context of countries.<\/b><\/li>\n<li><b style='font-weight: bold; color: Black'>Information on the daily vaccination of the population by country and the vaccines used.<\/b><\/li>     \n<\/ul>\n<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">Thus, we have prepared all the necessary information about ready to start the battle (data visualization).<\/p>","6a5684e7":"<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">5. Counting missing values function<\/p>\n<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">\ud83d\udccc Click the \"Show hidden code\" button to view the function.<\/p>","c4186b6c":"<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">Humanity manages to develop a weapon to combat the virus (vaccine). <b style='font-weight: bold; color: Black'>USA and China have developed three vaccines each, Russia two, UK and India one each.<\/b> It should be noted that the most popular vaccine was the vaccine from the UK. it is used in over 80 countries.<\/p>","c59b9ea7":"<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">\ud83d\udccc After loading the data, we see that the total data contains <b style='font-weight: bold; color: Black'>34 features and 93 073 records<\/b>. For further work, we will not need everything. We'll fix this a bit later. The dates are <b style='font-weight: bold; color: Black'>not represented by the correct data type<\/b>. Fix it.<\/p>","d88d1a1e":"<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">Everything is clear.<\/p>","96442731":"<p style=\"font-family: Arials; font-size: 14px; font-weight: bold; letter-spacing: 2px; color: #DC143C; line-height:2.0\">2.2.2 LET'S SEE THE NUMBER OF RECORDS AND FEATURES IN DATAFRAMES<\/p>","0f57e050":"<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">On the map above, you can see which vaccines are used by different countries (just hover your cursor over the country of interest).<\/p>\n<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">Thus, the second round is for humanity. People were able to retaliate against the darkness (virus) and went on the offensive.<\/p>","c5f8e913":"<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">As you can see, the names of the continents and the names of the vaccines are spelled correctly.<\/p>\n\n<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">So we have explored our battlefield (data), made some fortifications (cleaned up data) and are ready to move on to the next stage.<\/p>","93312976":"<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">\ud83d\udccc We will use a resampling technique and group the data in a weekly context by illness, active case, and death. Highlight the dynamics of the increase in infection cases, active cases and deaths.<\/p>","bc1b3d82":"<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">At the beginning of 2020, humanity will face a real renaissance of darkness on the territory of all continents of the planet. The virus actively went on the offensive (the graph shows a sharp increase in the number of the diseased population of the planet and their deaths on an accrual basis since the beginning of the spread of the epidemic).<\/p>","f055293c":"<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">The number of daily infections, deaths and sick people is growing rapidly (this is clearly visible on the graph).<\/p>","7fe705c9":"<p id=\"part6\"><\/p>\n\n# <span style=\"font-family: Arials; font-size: 18px; font-style: bold; font-weight: bold; letter-spacing: 2px; color: #DC143C\">3. THE BATTLE (DATA VISUALIZATION)<\/span>\n<hr style=\"height: 0.5px; border: 0; background-color: 'Black'\">\n\n<p id=\"part7\"><\/p>\n\n# <span style=\"font-family: Arials; font-size: 16px; font-weight: bold; letter-spacing: 2px; color: #DC143C; line-height:2.0\">3.1 ROUND ONE: INFECTION <\/span>\n<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">At the first stage, we will use the information on the spread of the infection until 12\/13\/2020. After this date, the vaccination phase will begin. We will cover this time period in the third part.<\/p>","41f0aacf":"<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">6. Checking dates function<\/p>\n<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">\ud83d\udccc Click the \"Show hidden code\" button to view the function.<\/p>","063c92b1":"<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">\ud83d\udccc As you can see, data are not provided for every vaccine. Such data will not work. We will make a top for each vaccine.We will also indicate the country of the manufacturer.<\/p>","b033fb17":"<p id=\"part9\"><\/p>\n\n# <span style=\"font-family: Arials; font-size: 15px; font-weight: bold; letter-spacing: 2px; color: #DC143C; line-height:2.0\">3.3 FINAL ROUND: A FALL OF DARKNESS (MASS VACCINATION)<\/span>\n<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">In the third round, humanity went on the offensive, mass vaccination began.<\/p>","161e6e5b":"<p style=\"font-family: Arials; font-size: 14px; font-weight: bold; letter-spacing: 2px; color: #DC143C; line-height:2.0\">DATA FOR ROUND TWO<\/p>\n<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">In the second round, we will need information about the developed weapons against the virus (vaccines), which vaccines are the most popular, and which vaccines are used in countries.<\/p>","7611755a":"<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">3. Count records and columns function<\/p>\n<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">\ud83d\udccc Click the \"Show hidden code\" button to view the function.<\/p>","3319b8ee":"<p style=\"font-family: Arials; font-size: 14px; font-weight: bold; letter-spacing: 2px; color: #DC143C; line-height:2.0\">LIBRARIES<\/p>\n<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">\ud83d\udccc For convenience, the libraries were hidden. To view, click the \"Show hidden code\" button.<\/p>","2583d9c7":"<p style=\"font-family: Arials; font-size: 14px; font-weight: bold; letter-spacing: 2px; color: #DC143C; line-height:2.0\">DATA FOR ROUND ONE<\/p>\n<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">In the first round, we need information about the spread of the disease. We will prepare the relevant information.<\/p>","121e884a":"<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">\ud83d\udccc This section is one of the most difficult, as it is often very difficult to analyze categorical variables. This is caused by different spellings of words, lack of standardization of any names, there may be extra spaces in words, etc. We will adhere to the following algorithm:\n<ul style=\"font-family: Arials; font-size: 18px; color: 'Black\">    \n<li>we have two data sources. This is information about infections and vaccinations. Let's check if the names of the countries in the data correspond, if not, we will bring them to a single format.;<\/li>\n<li>we will remove duplicate information if it is present;<\/li>\n<li>let's bring the spelling of countries to one format (all words with a capital letter);<\/li>\n<li>let's check the spelling of the continents;<\/li>\n<li>let's check the spelling of the names of the vaccines.<\/li>","2612f259":"<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">\ud83d\udccc In order to compare countries in terms of the spread of the epidemic, it will not be correct to take the number of cases of infection, so we will calculate the following indicators from the total population of each country:\n<ul style=\"font-family: Arials; font-size: 18px; color: 'Black\">    \n<li><b style='font-weight: bold; color: Black'>Confirmed %<\/b> - shows the percentage of the diseased population from the total population of the country;<\/li>\n<li><b style='font-weight: bold; color: Black'>Deaths %<\/b> - shows the percentage of the deceased population of the total population of the country;<\/li>\n<li><b style='font-weight: bold; color: Black'>Recovered %<\/b> - shows the percentage of the recovered population from the total population of the country;<\/li>\n<li><b style='font-weight: bold; color: Black'>Cases %<\/b> - Shows the percentage of the population continuing to get sick from the total population of the country.<\/li>\n<\/ul>  ","f98a7a30":"<p style=\"font-family: Arials; font-size: 14px; font-weight: bold; letter-spacing: 2px; color: #DC143C; line-height:2.0\">2.2.4 LET'S LOOK AT THE DATA FROM THE SIDE OF DESCRIPTIVE STATISTICS (MAYBE THERE ARE NEGATIVE VALUES, ETC.)<\/p>","849db94f":"<p style=\"font-family: Arials; font-size: 18px; color: 'Black\"><b style='font-weight: bold; color: Black'>CONCLUSION:<\/b> Humanity today is actively confronting the global pandemic. Despite the active increase in infection in early 2020, mankind has managed to develop a weapon against the virus and reduce the number of cases and deaths around the world. The positive trend towards an improvement in the epidemiological situation in the world still persists, but the battle is not over yet. Humanity must be on the alert.<\/p>","a93a0abc":"<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">All country names now match.<\/p>\n<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">Check the spelling of continents and vaccines.<\/p>","fd19f2ce":"<p style=\"font-family: Arials; font-size: 14px; font-weight: bold; letter-spacing: 2px; color: #DC143C; line-height:2.0\">2.2.3 EXAMINING DATA TYPES IN DATAFRAMES<\/p>","909cfbdc":"<p style=\"font-family: Arials; font-size: 14px; font-weight: bold; letter-spacing: 2px; color: #DC143C; line-height:2.0\">2.2.6 LET'S CHECK THE DATES FOR ERRORS<\/p>","f1786f50":"<p style=\"font-family: Arials; font-size: 14px; font-weight: bold; letter-spacing: 2px; color: #DC143C; line-height:2.0\">FUNCTIONS:<\/p>\n<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">1. Scatter visualization function<\/p>\n<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">\ud83d\udccc Click the \"Show hidden code\" button to view the function.<\/p>","80cde63e":"<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">Based on the plotted graph, the following conclusions can be drawn:<\/p>\n<ul style=\"font-family: Arials; font-size: 18px; color: 'Black\">    \n<li>Most of the world's population is vaccinated with vaccines <b style='font-weight: bold; color: Black'>Johnson&Johnson, Moderna, Pfizer\/BioNTech.<\/b><\/li>\n<li>Vaccination in countries where only vaccines <b style='font-weight: bold; color: Black'>Sinopharm \/ Beijing, Sinopharm \/ Wuhan, Sinovac<\/b> (produced in China) are used is produced in a phased mode.This may be due either to the high demand for vaccines among the population (production does not keep pace with demand), or to the mechanism itself vaccinations (e.g. vaccination on certain days, etc.).<\/li>\n<li>Countries using <b style='font-weight: bold; color: Black'>Moderna, Oxford \/ AstraZeneca, Pfizer \/ BioNTech<\/b> vaccines have seen a decrease in the number of vaccinations. This is due to the fact that since mid-March, most countries have suspended the use of Oxford \/ AstraZeneca due to severe side effects.<\/li>     \n<\/ul>","70e12be1":"<p id=\"part3\"><\/p>\n\n# <span style=\"font-family: Arials; font-size: 16px; font-weight: bold; letter-spacing: 2px; color: #DC143C; line-height:2.0\">2.1 WEAPON PREPARATION (LIBRARIES, COLOR PALLETE, FUNCTIONS)<\/span>\n<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">We will use the weapons we need <b style='font-weight: bold; color: Black'>(libraries)<\/b>, camouflage <b style='font-weight: bold; color: Black'>(color pallete)<\/b>, and also use the secret weapons  <b style='font-weight: bold; color: Black'>(functions)<\/b> we have developed.<\/p>","66a05136":"<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">\ud83d\udccc We will prepare data on the number of countries in which a specific vaccine is used.<\/p>","5490b9de":"<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">\ud83d\udccc It happens that the date is entered in the wrong format, is text and simply does not change to the desired type, some days are missing (for example, there is no data for 2020.04.23). Of course, all this can be seen with our eyes, but what if we don't see something. I propose to entrust the check to the machine. What we will do:\n<ul style=\"font-family: Arials; font-size: 18px; color: 'Black\">    \n<li>create a list of available dates, sorted from lowest date to highest date;<\/li>\n<li>take the smallest and largest date and programmatically generate dates that must be exactly in this range;<\/li>\n<li>we will combine everything into one dataframe and compare the two columns (if everything is correct it will return True and will be highlighted in green for ease of perception).<\/li>","452d23c0":"<p style=\"font-family: Arials; font-size: 18px; font-style: bold; font-weight: bold; letter-spacing: 2px; color: #DC143C; line-height:1.0\">TABLE OF CONTENTS<\/p>\n<hr style=\"height: 0.5px; border: 0; background-color: 'Black'\">\n\n<p style=\"font-family: Arials; font-size: 16px; font-style: bold; letter-spacing: 2px; color: #DC143C; line-height:1.0\"><a href=\"#part1\" style=\"color:black\">1. INTRODUCTION<\/a><\/p>\n\n<p style=\"font-family: Arials; font-size: 16px; font-style: bold; letter-spacing: 2px; color: #DC143C; line-height:1.0\"><a href=\"#part2\" style=\"color:black\">2. PREPARING FOR BATTLE<\/a><\/p>\n\n<p style=\"text-indent: 2.5vw; font-family: Arials; font-size: 15px; letter-spacing: 2px; color: #DC143C; line-height:1.3\">\n<a href=\"#part3\" style=\"color:black\">2.1 IMPORTING WEAPONS (LIBRARIES, COLOR PALLETE, FUNCTIONS)<\/a><\/p>\n\n<p style=\"text-indent: 2.5vw; font-family: Arials; font-size: 15px; letter-spacing: 2px; color: #DC143C; line-height:1.3\">\n<a href=\"#part4\" style=\"color:black\">2.2 DATA EXPLORATION AND CLEANING<\/a><\/p>\n\n<p style=\"text-indent: 2.5vw; font-family: Arials; font-size: 15px; letter-spacing: 2px; color: #DC143C; line-height:1.3\">\n<a href=\"#part5\" style=\"color:black\">2.3 PREPARATION OF DATA FOR ANALYSIS<\/a><\/p>\n\n<p style=\"font-family: Arials; font-size: 16px; font-style: bold; letter-spacing: 2px; color: #DC143C; line-height:1.0\"><a href=\"#part6\" style=\"color:black\">3. THE BATTLE (DATA VISUALIZATION)<\/a><\/p>\n\n<p style=\"text-indent: 2.5vw; font-family: Arials; font-size: 15px; letter-spacing: 2px; color: #DC143C; line-height:1.3\">\n<a href=\"#part7\" style=\"color:black\">3.1 ROUND ONE: INFECTION<\/a><\/p>\n\n<p style=\"text-indent: 2.5vw; font-family: Arials; font-size: 15px; letter-spacing: 2px; color: #DC143C; line-height:1.3\">\n<a href=\"#part8\" style=\"color:black\">3.2 ROUND TWO: CREATING NEW WEAPONS (VACCINE)<\/a><\/p>\n\n<p style=\"text-indent: 2.5vw; font-family: Arials; font-size: 15px; letter-spacing: 2px; color: #DC143C; line-height:1.3\">\n<a href=\"#part9\" style=\"color:black\">3.3 FINAL ROUND: A FALL OF DARKNESS (MASS VACCINATION) <\/a><\/p>\n\n<p style=\"text-indent: 2.5vw; font-family: Arials; font-size: 15px; letter-spacing: 2px; color: #DC143C; line-height:1.3\">\n<a href=\"#part10\" style=\"color:black\">3.4 BONUS INFORMATION <\/a><\/p>","e8d44c6a":"<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">Done! We will work with the missing values in the rest of the data in the next section (we will use the resampling method).<\/p>","5b58e297":"<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">Thus, it is impossible to say unequivocally that humanity is gaining in the third round. Yes, the vaccine has slowed the spread of the infection, reducing the trend of an increase in the number of cases, but the virus continues to resist. Thus, it is too early to talk about the end of the battle, since no one knows what new blow the darkness will inflict.<\/p>","16bb8932":"<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">4. Data type visualization and conditional formatting<\/p>\n<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">\ud83d\udccc Click the \"Show hidden code\" button to view the function.<\/p>","4d22b162":"<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">\ud83d\udccc To display the activity of countries in vaccinating the population, we will calculate the vaccination rate. Let's calculate the total number of vaccinations for each country (we divide this number by 2, since usually there are 2 vaccines per person) from the entire population of the country.<\/p>","bdff5086":"<p style=\"font-family: Arials; font-size: 14px; font-weight: bold; letter-spacing: 2px; color: #DC143C; line-height:2.0\">2.2.5 LET'S LOOK AT MISSING VALUES IN DATAFRAMES<\/p>","e0415cb6":"<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">We will use different colors for each event:\n    <b style='color: #0d8c68; font-weight: bold'>Recovered, Vaccinations<\/b>, <b style='color: #DC143C; font-weight: bold'> Deaths<\/b>, <b style='color: #4169E1; font-weight: bold'> Active phase of the disease<\/b>, <b style='color: #595959; font-weight: bold'> Infected<\/b>.<\/p>","4a1b8f08":"<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">\ud83d\udccc As we can see, the data contains negative values. Since the algorithm for collecting data is unknown, it will be very problematic to understand the reason for such records. In my opinion, there should be no negative values, since it is not clear how to interpret, for example, daily negative records regarding deaths. 217 people did not die, but how many should have died then? My suggestion is to take the modulus of negative values, assuming that this is a technical input error.    <\/p>","b05ae889":"<p id=\"part5\"><\/p>\n\n# <span style=\"font-family: Arials; font-size: 16px; font-weight: bold; letter-spacing: 2px; color: #DC143C; line-height:2.0\">2.3 PREPARATION OF DATA FOR ANALYSIS<\/span>\n<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">In this block, we will prepare for the battle (prepare aggregated information for each of the rounds). Each round corresponds to the global world situation of the spread of the virus. The first round is global infection, the second is the development of a drug against the virus, the third is world vaccination.<\/p>","bd325450":"<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">As we can see, the dates have the correct format (there are no typos, string spelling of dates, etc.). In addition, there are no spaces in the sequence of dates (for example, any of the days is missing).<\/p>","815d1220":"<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">Global vaccination began at the end of 2020, and in mid-February, the number of vaccinations exceeded the number of infected, which slowed down the growth of the infected population, but did not completely suppress it. Unfortunately, the virus cannot be defeated like in the movies, in life everything is much more complicated, but definitely a positive trend is still observed,as seen in the graph (cumulative amount).<\/p>","fe780dec":"<img src=\"https:\/\/s.marketwatch.com\/public\/resources\/images\/MW-IB803_corona_ZG_20200309102442.jpg\" width=\"700\" align=\"centr\"\/>\n\n<p style=\"font-family: Arials; line-height: 1,5; font-size: 12px; text-align: center; color: '#000000\"><a href=\"https:\/\/www.marketwatch.com\/story\/was-coronavirus-made-in-a-laboratory-yes-say-30-of-americans-in-pew-survey-2020-04-13\" style=\"color:#DC143C\">Image source<\/a><\/p>\n<p style=\"font-family: Arials; line-height: 1.3; font-size: 26px; font-weight: bold; letter-spacing: 2px; text-align: center; color: #DC143C\">History of human resistance against the COVID-19<\/p>\n","9356ee84":"<p id=\"part2\"><\/p>\n\n# <span style=\"font-family: Arials; font-size: 18px; font-style: bold; font-weight: bold; letter-spacing: 2px; color: #DC143C\">2. PREPARING FOR BATTLE<\/span>\n<hr style=\"height: 0.5px; border: 0; background-color: 'Black'\">\n\n<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">At this step, we will prepare our field for battle. Let's load the necessary libraries, select a color palette for further visualizations, prepare several functions in order to prevent duplication of code in the notebook. Next, let's load the data, examine the types of variables, missing values, duplicates, work on dates, and also standardize the names in the data (if needed), prepare the data for visualizations.<\/p>","e041c3d8":"<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">Summing up the results of the first round of the battle, we can note the victory of darkness over the humanity of the planet. It is also worth noting that each country has different resistance to the virus. This can be seen in the graph, which displays the percentage of recovered, died and sick from the total population of each country.<\/p>","18b5c67a":"<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">\ud83d\udccc Thus, we have prepared the following information:\n<ul style=\"font-family: Arials; font-size: 18px; color: 'Black\">    \n<li><b style='font-weight: bold; color: Black'>Data on the weekly dynamics of the virus on a global scale.<\/b><\/li>\n<li><b style='font-weight: bold; color: Black'>Calculated rates of \u0441onfirmed, deaths, recovered, active cases by country.<\/b><\/li>\n<li><b style='font-weight: bold; color: Black'>Calculated the mortality rate of the population from the number of cases of the virus.<\/b><\/li>\n<\/ul>  ","ecb4a320":"<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">\ud83d\udccc In order to see the dynamics of vaccination in terms of vaccines, we will prepare information on the daily vaccination of countries in terms of vaccines.<\/p>","edde5c69":"<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">As we see now everything is correct.<\/p>","15a54f4a":"<p style=\"font-family: Arials; font-size: 14px; font-weight: bold; letter-spacing: 2px; color: #DC143C; line-height:2.0\">COLOR PALLETE<\/p>","275a1f2a":"<p style=\"font-family: Arials; font-size: 18px; text-align: center; color: Black\">Hello everyone! I would like to present you my new work.<\/p>\n<p style=\"font-family: Arials; font-size: 18px; text-align: center; color: Black\">This is not just a notebook, but the history of human resistance against the COVID-19.<\/p>\n<p style=\"font-family: Arials; font-size: 18px; text-align: center; color: Black\">In this notebook you will not see unnecessary information (all the code is hidden in the buttons \"Show hidden code\"), the program output is formatted as scrolling dataframe tables (I do not like the black output of the program), I tried to do deep work on the data processing stage and interactive visualization of graphs.<\/p>\n<p style=\"font-family: Arials; font-size: 18px; text-align: center; color: Black\">I would be very grateful for any feedback on this work and your vote. Happy reading.<\/p>","5d007a79":"<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">The most active resistance (vaccination) of the virus was provided by the following countries: <b style='font-weight: bold; color: Black'>Gibraltar, Israel, Seychelles, United Arab Emirates, Cayman Islands, Bermuda, Monaco, Chile, Great Britain, Anguilla.<\/b>These countries have the highest vaccination rates. On the heatmap, the brighter the green, the higher the vaccination rate in the country.<\/p>","32541f0d":"<p style=\"font-family: Arials; font-size: 18px; color: 'Black\">\ud83d\udccc Thus, we have prepared the following information:\n<ul style=\"font-family: Arials; font-size: 18px; color: 'Black\">    \n<li><b style='font-weight: bold; color: Black'>List of vaccines and number of countries applying a specific vaccine.<\/b><\/li>\n<li><b style='font-weight: bold; color: Black'>Information on which countries are using which vaccines.<\/b><\/li>\n<\/ul>"}}