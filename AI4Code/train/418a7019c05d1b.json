{"cell_type":{"fece63a7":"code","aa7d7a68":"code","5bbfb35a":"code","f3387d26":"code","1e7eabaa":"code","471dc513":"code","eb32d0a5":"code","50f52a51":"code","b60512f1":"code","23808b11":"code","464ac556":"code","c1b04bc3":"code","5cf0a784":"code","0ce99afe":"code","77391511":"code","56856388":"code","3e24ee61":"code","57cf6114":"code","6492a9f1":"code","539a0b74":"code","6106e4d6":"code","f9de5730":"code","180d6cc3":"code","ae08a072":"code","f68d9d89":"code","66ec62ee":"code","e28e9932":"code","946d9ca0":"code","bd389928":"code","70904a37":"code","bf45b30e":"markdown","72dce9fc":"markdown","5e75c870":"markdown","586ca854":"markdown","5cac376e":"markdown","ec607945":"markdown","2287d5e6":"markdown","4b6795ee":"markdown","0a1c27e2":"markdown","ce8af8b4":"markdown","ab6e7d5d":"markdown","09204910":"markdown","5658e45c":"markdown","b1686408":"markdown","eaf0df7c":"markdown","c45e83e9":"markdown"},"source":{"fece63a7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aa7d7a68":"df=pd.read_csv('\/kaggle\/input\/breast-cancer-wisconsin-data\/data.csv')","5bbfb35a":"df.head()","f3387d26":"df.info()","1e7eabaa":"df.isnull().sum()","471dc513":"X=df.drop(['id','diagnosis','Unnamed: 32'],axis=1)\nX","eb32d0a5":"y=df['diagnosis']\ny","50f52a51":"from sklearn.preprocessing import LabelEncoder\nfrom sklearn import preprocessing\n\n# Encode label category\n# Malignent-> 1\n# Benign -> 0\n\ndia_status=LabelEncoder()\ndia_status","b60512f1":"y=dia_status.fit_transform(y)\ny","23808b11":"X.corr()","464ac556":"import seaborn as sns\nfrom matplotlib import pyplot as plt\n%matplotlib inline\n\nplt.figure(figsize=(14,12))\nsns.heatmap(X.corr(),annot=True,cmap=plt.cm.CMRmap_r,alpha=.9)\nplt.tight_layout()","c1b04bc3":"# eg. columns col1 and col2 have correaltion greater than threshold, \n# then we can remove one of the col1 or col2 to balance biasness\n# the function return the columns to be removed\n\ndef correlation(dataset,threshold):\n    col_corr=set()\n    corr_matrix=dataset.corr()\n    for i in range(len(corr_matrix.columns)):\n        for j in range(i):\n            if abs(corr_matrix.iloc[i,j])>threshold:\n                colname=corr_matrix.columns[i]\n                col_corr.add(colname)\n    return col_corr\n            ","5cf0a784":"# columns having correlation greater than 0.90\ncorr_features=correlation(X,.90)\ncorr_features","0ce99afe":"# dropping columns\nX=X[X.drop(corr_features,axis=1).columns]","77391511":"X","56856388":"from sklearn.preprocessing import StandardScaler\nscaler=StandardScaler()\nscaler.fit(X)\n","3e24ee61":"X=scaler.transform(X)","57cf6114":"X.shape","6492a9f1":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=.2,random_state=101)","539a0b74":"from sklearn.svm import SVC\n\nclf=SVC()\nclf.fit(X_train,y_train)\nprint('Accuracy : ', clf.score(X_test,y_test))","6106e4d6":"clf=SVC(kernel='linear')\nclf.fit(X_train,y_train)\nprint('Accuracy : ', clf.score(X_test,y_test))","f9de5730":"clf=SVC(kernel='rbf')\nclf.fit(X_train,y_train)\nprint('Accuracy : ', clf.score(X_test,y_test))","180d6cc3":"clf=SVC(kernel='poly')\nclf.fit(X_train,y_train)\nprint('Accuracy : ', clf.score(X_test,y_test))","ae08a072":"svm=SVC()","f68d9d89":"# we are providing the parameters in form of list of dictionaries\n\ntuned_parameter=[{'C':[0.1,0.5,1,5,10,50,100],'kernel':['linear']},\n                 {'gamma':[0.0001,0.001,0.01,0.1,1,10],'kernel':['rbf']},\n                 {'degree':[1,2,3,4],'kernel':['poly']}]","66ec62ee":"from sklearn.model_selection import GridSearchCV\n\nmodel=GridSearchCV(estimator=svm,\n                   param_grid=tuned_parameter,\n                   cv=10,\n                   n_jobs=-1)\n","e28e9932":"# fitting the training data\n\nmodel.fit(X_train,y_train)","946d9ca0":"# best score\n\nmodel.best_score_","bd389928":"# best parameters from the parameters that we provided\n\nmodel.best_params_","70904a37":"# testing our model\nmodel.score(X_test,y_test)","bf45b30e":"**Splitting the data for training and testing in 4:1 ratio**","72dce9fc":"**Creating a function for finding the columns having correaltion beyond threshold**","5e75c870":"**Default RBF kernel**","586ca854":"**Checking for null values**","5cac376e":"**Lets use GridSearchCV to find best parameter**","ec607945":"**SVM with default hyperparameter**","2287d5e6":"**Reading the dataset**","4b6795ee":"**Encoding the label for better classification**","0a1c27e2":"Data Standardisation:-\n\nThe idea behind StandardScaler is that it will transform your data such that its distribution will have a mean value 0 and standard deviation of 1.\nIn case of multivariate data, this is done feature-wise (in other words independently for each column of the data).\nGiven the distribution of the data, each value in the dataset will have the mean value subtracted, and then divided by the standard deviation of the whole dataset (or feature in the multivariate case)","ce8af8b4":"**Storing the label in y**","ab6e7d5d":"**Default Linear kernel**","09204910":"Transforming y into encoded label","5658e45c":"**Lets look at the correlations and do some feature selection**","b1686408":"**Storing the features in X**","eaf0df7c":"**Default Polynomial kernel**","c45e83e9":"Seaborn heatmap for visualizing correlations"}}