{"cell_type":{"a95a8d9f":"code","0ff36d22":"code","1a5599c7":"code","6b89bd7a":"code","c5c18b0d":"code","42532a4d":"code","1c583816":"code","dcc6fb79":"code","3457ad12":"code","97263255":"code","4124308a":"code","e5e521b0":"code","4945a733":"code","607da511":"code","9f32b30a":"code","389c2008":"code","20d17c8b":"code","41716691":"code","2a82425b":"code","95f2a784":"code","d4d54535":"code","dd3e1163":"code","08662f81":"code","a0177cf1":"code","f40283db":"code","0f9e05a9":"code","27809fde":"markdown","20ea1235":"markdown","6c61391a":"markdown","c9d16374":"markdown","a55c1631":"markdown","a2d3956d":"markdown","eab20a2f":"markdown","baa64809":"markdown","27ecd71f":"markdown"},"source":{"a95a8d9f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","0ff36d22":"# We are reading our data\ndf = pd.read_csv(\"..\/input\/heart.csv\")","1a5599c7":"# First 5 rows of our data\ndf.head()","6b89bd7a":"df.target.value_counts()","c5c18b0d":"sns.countplot(x=\"target\", data=df, palette=\"bwr\")\nplt.show()","42532a4d":"countNoDisease = len(df[df.target == 0])\ncountHaveDisease = len(df[df.target == 1])\nprint(\"Percentage of Patients Haven't Heart Disease: {:.2f}%\".format((countNoDisease \/ (len(df.target))*100)))\nprint(\"Percentage of Patients Have Heart Disease: {:.2f}%\".format((countHaveDisease \/ (len(df.target))*100)))","1c583816":"sns.countplot(x='sex', data=df, palette=\"mako_r\")\nplt.xlabel(\"Sex (0 = female, 1= male)\")\nplt.show()","dcc6fb79":"countFemale = len(df[df.sex == 0])\ncountMale = len(df[df.sex == 1])\nprint(\"Percentage of Female Patients: {:.2f}%\".format((countFemale \/ (len(df.sex))*100)))\nprint(\"Percentage of Male Patients: {:.2f}%\".format((countMale \/ (len(df.sex))*100)))","3457ad12":"df.groupby('target').mean()","97263255":"pd.crosstab(df.age,df.target).plot(kind=\"bar\",figsize=(20,6))\nplt.title('Heart Disease Frequency for Ages')\nplt.xlabel('Age')\nplt.ylabel('Frequency')\nplt.savefig('heartDiseaseAndAges.png')\nplt.show()","4124308a":"pd.crosstab(df.sex,df.target).plot(kind=\"bar\",figsize=(15,6),color=['#1CA53B','#AA1111' ])\nplt.title('Heart Disease Frequency for Sex')\nplt.xlabel('Sex (0 = Female, 1 = Male)')\nplt.xticks(rotation=0)\nplt.legend([\"Haven't Disease\", \"Have Disease\"])\nplt.ylabel('Frequency')\nplt.show()","e5e521b0":"plt.scatter(x=df.age[df.target==1], y=df.thalach[(df.target==1)], c=\"red\")\nplt.scatter(x=df.age[df.target==0], y=df.thalach[(df.target==0)])\nplt.legend([\"Disease\", \"Not Disease\"])\nplt.xlabel(\"Age\")\nplt.ylabel(\"Maximum Heart Rate\")\nplt.show()","4945a733":"pd.crosstab(df.slope,df.target).plot(kind=\"bar\",figsize=(15,6),color=['#DAF7A6','#FF5733' ])\nplt.title('Heart Disease Frequency for Slope')\nplt.xlabel('The Slope of The Peak Exercise ST Segment ')\nplt.xticks(rotation = 0)\nplt.ylabel('Frequency')\nplt.show()","607da511":"pd.crosstab(df.fbs,df.target).plot(kind=\"bar\",figsize=(15,6),color=['#FFC300','#581845' ])\nplt.title('Heart Disease Frequency According To FBS')\nplt.xlabel('FBS - (Fasting Blood Sugar > 120 mg\/dl) (1 = true; 0 = false)')\nplt.xticks(rotation = 0)\nplt.legend([\"Haven't Disease\", \"Have Disease\"])\nplt.ylabel('Frequency of Disease or Not')\nplt.show()","9f32b30a":"pd.crosstab(df.cp,df.target).plot(kind=\"bar\",figsize=(15,6),color=['#11A5AA','#AA1190' ])\nplt.title('Heart Disease Frequency According To Chest Pain Type')\nplt.xlabel('Chest Pain Type')\nplt.xticks(rotation = 0)\nplt.ylabel('Frequency of Disease or Not')\nplt.show()","389c2008":"a = pd.get_dummies(df['cp'], prefix = \"cp\")\nb = pd.get_dummies(df['thal'], prefix = \"thal\")\nc = pd.get_dummies(df['slope'], prefix = \"slope\")","20d17c8b":"frames = [df, a, b, c]\ndf = pd.concat(frames, axis = 1)\ndf.head()","41716691":"df = df.drop(columns = ['cp', 'thal', 'slope'])\ndf.head()","2a82425b":"y = df.target.values\nx_data = df.drop(['target'], axis = 1)","95f2a784":"# Normalize\nx = (x_data - np.min(x_data)) \/ (np.max(x_data) - np.min(x_data)).values","d4d54535":"x_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2,random_state=0)","dd3e1163":"from sklearn.linear_model import LogisticRegression\n# all parameters not specified are set to their defaults\nlogisticRegr = LogisticRegression()\nlogisticRegr.fit(x_train, y_train)","08662f81":"# Returns a NumPy Array\n# Predict for One Observation (image)\ny_predict = logisticRegr.predict(x_test)","a0177cf1":"y_predict = pd.DataFrame(y_predict, columns=['Predict']) ","f40283db":"# Use score method to get accuracy of model\nscore = logisticRegr.score(x_test, y_test)\nprint(score)","0f9e05a9":"from sklearn import metrics\ncm = metrics.confusion_matrix(y_test, y_predict)\nprint(cm)","27809fde":"### Normalize Data\n<br>\n<br>\n<img src=\"https:\/\/beyondbacktesting.files.wordpress.com\/2017\/07\/normalization.png?w=863\" width=\"400px\"\/>","20ea1235":"### Creating Dummy Variables","6c61391a":"Data contains; <br>\n\n* age - age in years <br>\n* sex - (1 = male; 0 = female) <br>\n* cp - chest pain type <br>\n* trestbps - resting blood pressure (in mm Hg on admission to the hospital) <br>\n* chol - serum cholestoral in mg\/dl <br>\n* fbs - (fasting blood sugar > 120 mg\/dl) (1 = true; 0 = false) <br>\n* restecg - resting electrocardiographic results <br>\n* thalach - maximum heart rate achieved <br>\n* exang - exercise induced angina (1 = yes; 0 = no) <br>\n* oldpeak - ST depression induced by exercise relative to rest <br>\n* slope - the slope of the peak exercise ST segment <br>\n* ca - number of major vessels (0-3) colored by flourosopy <br>\n* thal - 3 = normal; 6 = fixed defect; 7 = reversable defect <br>\n* target - have disease or not (1=yes, 0=no)","c9d16374":"We will split our data. 80% of our data will be train data and 20% of it will be test data.","a55c1631":"## Read Data","a2d3956d":"## Creating Model for Logistic Regression\n<br>\nWe can use sklearn library or we can write functions ourselves. Let's them both. Firstly we will write our functions after that we'll use sklearn library to calculate score.","eab20a2f":"## Data Exploration","baa64809":"![](http:\/\/)Since 'cp', 'thal' and 'slope' are categorical variables we'll turn them into dummy variables.","27ecd71f":"# INTRODUCTION\n<br>\nWe have a data which classified if patients have heart disease or not according to features in it. We will try to use this data to create a model which tries predict if a patient has this disease or not. We will use logistic regression (classification) algorithm."}}