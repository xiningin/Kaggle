{"cell_type":{"039153ca":"code","c2c86e86":"code","1902208d":"code","e654a30f":"code","92ba0f16":"code","6ebfd3aa":"code","2d9a8857":"code","e6cf6672":"code","8fc34828":"code","ef220537":"code","aa05c2bb":"code","e6714555":"code","dfdfff1e":"code","eba5f800":"code","c3bfc0e3":"code","262c2553":"code","fdc46405":"code","d8a1ee64":"code","6026d18c":"code","b7f6743b":"code","3ade3c54":"markdown","b9c21c04":"markdown","99b46c27":"markdown","e3ca26d1":"markdown","e75320ae":"markdown"},"source":{"039153ca":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.datasets import load_wine\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import KFold, GridSearchCV\nfrom sklearn.preprocessing import LabelEncoder","c2c86e86":"# making a dataframe for the train sample\n\ndf_train = pd.read_csv('..\/input\/titanic\/train.csv')\nprint(df_train.shape)\ndf_train.head()","1902208d":"# dealing with missing values\n\nprint(df_train.isnull().sum())","e654a30f":"# filling missing Age values with the mean \ndf_train.Age[df_train.Age.isnull()] = df_train.Age.mean()\n\n# filling missing Embarked values with the majority\ndf_train.Embarked[df_train.Embarked.isnull()] = df_train.groupby('Embarked').count()['PassengerId'][df_train.groupby('Embarked').count()['PassengerId'] == df_train.groupby('Embarked').count()['PassengerId'].max()].index[0]","92ba0f16":"# dropping currently useless features\n\ndf_train = df_train.drop(['PassengerId','Name','Ticket','Cabin'], axis=1)","6ebfd3aa":"df_train.columns","2d9a8857":"# initiating label encoder for sklearn\nlabel = LabelEncoder()\ndicts = {}\n\n# initiating the labels for sex column\nlabel.fit(df_train.Sex.drop_duplicates())\ndicts['Sex'] = list(label.classes_)\n# coding the sex column values\ndf_train.Sex = label.transform(df_train.Sex)\n\n# initiating the labels for Embarked column\nlabel.fit(df_train.Embarked.drop_duplicates())\ndicts['Embarked'] = list(label.classes_)\n# coding the sex column values\ndf_train.Embarked = label.transform(df_train.Embarked)","e6cf6672":"# initializing the target variable and dropping it from features dataframe\ny = df_train.Survived\nX = df_train.drop(['Survived'], axis=1)","8fc34828":"print(X.columns)\nprint(X.shape, y.shape)","ef220537":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.25)","aa05c2bb":"print(X_train.shape, X_valid.shape, y_train.shape, y_valid.shape)","e6714555":"# initializing the dictionaries for the parameters that will be passed to GridSearchCV method\n\n## for the number of k neighbors\nk = list(range(1, 60, 2))\n\n## for the weights\nweights_options = ['uniform', 'distance']\n\n## for the algorithms applied \nalgos = ['ball_tree', 'kd_tree', 'brute']\n\n## leaf size (since i've initiated BallTree and KDTree algorithms)\nleaves = list(np.arange(10, 110, 10))\n\n## for the metrics\nmetric_options = ['euclidean', 'manhattan', 'chebyshev', 'minkowski']\n\n## for the parameters of the metrics\n#metric_params=metric_param_options\n\n# initializing the grid\n\nparams_grid = dict(n_neighbors=k, weights=weights_options, algorithm=algos, leaf_size=leaves, metric=metric_options, )\n\n# initializing the grid search with 10 cross_validation splits\n\nmodel_titanic = KNeighborsClassifier() \n\ngrid = GridSearchCV(model_titanic, params_grid, cv=10, scoring='accuracy')\n\n# training the model\ngrid.fit(X_train, y_train)","dfdfff1e":"print(f'best parameters: {grid.best_params_},\\nbest accuracy score: {grid.best_score_},\\nbest estimator: {grid.best_estimator_}')","eba5f800":"df_test = pd.read_csv('..\/input\/titanic\/test.csv')\ndf_test.columns","c3bfc0e3":"# checking the null values\ndf_test.info()","262c2553":"# proccesing the test features\n\nX_test = df_test\n\nX_test.Age[X_test.Age.isnull()] = X_test.Age.mean()\nX_test.Embarked[X_test.Embarked.isnull()] = X_test.groupby('Embarked').count()['PassengerId'][X_test.groupby('Embarked').count()['PassengerId'] == X_test.groupby('Embarked').count()['PassengerId'].max()].index[0]\n\n# got a single missing value in column Fare\nX_test.Fare[X_test.Fare.isnull()] = X_test.Fare.median()\n\nresult = pd.DataFrame(df_test.PassengerId)\nX_test = df_test.drop(['Name', 'Ticket', 'Cabin', 'PassengerId'], axis=1)\n\nlabel = LabelEncoder()\ndicts = {}\n\nlabel.fit(X_test.Sex.drop_duplicates())\ndicts['Sex'] = list(label.classes_)\n\nlabel.fit(X_test.Sex.drop_duplicates())\ndicts['Sex'] = list(label.classes_)\nX_test.Sex = label.transform(X_test.Sex)\n\n\nlabel.fit(X_test.Embarked.drop_duplicates())\ndicts['Embarked'] = list(label.classes_)\nX_test.Embarked = label.transform(X_test.Embarked)","fdc46405":"# duplicating the df_test to save PassengerId columns\n\nprint(df_test.columns, df_test.shape)\nprint(X_test.columns, X_test.shape)","d8a1ee64":"# launching prediction based on best grid parameters\n\npredictions = grid.predict(X_test)\npredictions","6026d18c":"# makeing the submission dataframe\n\nsubmit = pd.DataFrame(list(zip(df_test.PassengerId, predictions)), columns = ['PassengerId', 'Survived'])\nsubmit.head()","b7f6743b":"# saving the submission dataframe to csv\nsubmit.to_csv('submission.csv', sep=',', index=False)","3ade3c54":"## searching for the optimal parameters on the train sample","b9c21c04":"## preparing the test sample","99b46c27":"* ### import and check dataset","e3ca26d1":"## predict & submit","e75320ae":"## preparing the data for the model"}}