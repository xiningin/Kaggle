{"cell_type":{"267724dd":"code","07b73e4f":"code","3884ff31":"code","9c938a1b":"code","5662e217":"code","28bfece2":"code","4d050659":"code","4d77ac5c":"code","e0fbd2c6":"code","e2301d70":"code","48218d00":"code","e6866ddd":"code","1410b141":"code","b60b56f1":"code","189a7480":"code","9337c013":"code","8480c05b":"code","1ad9ca08":"code","8411d818":"code","78add82f":"markdown","20231d9f":"markdown","6e5413cd":"markdown","a0e3e362":"markdown","84e8fd52":"markdown","1cedbe5c":"markdown"},"source":{"267724dd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","07b73e4f":"pdata = pd.read_csv(\"\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv\")\npdata.head()","3884ff31":"from pandas_profiling import ProfileReport\n#EDA using Pandas Profiling\ndataset = pdata\nprofile = ProfileReport(dataset, title='Pandas Profiling Report')\nprofile.to_widgets()","9c938a1b":"profile.to_notebook_iframe()","5662e217":"profile.to_file(\"your_report.html\")","28bfece2":"pdata.shape # Check number of columns and rows in data frame","4d050659":"pdata.isnull().values.any() # If there are any null values in data set","4d77ac5c":"sns.pairplot(pdata,diag_kind='kde')","e0fbd2c6":"# Correlation \ncorr=pdata.corr()\nf,ax=plt.subplots(1,1,figsize=(12,8))\nsns.heatmap(corr, annot=True, cmap=\"YlGnBu\", ax=ax)","e2301d70":"pdata.describe()","48218d00":"pdata.info()","e6866ddd":"df=pdata.loc[(pdata.BMI>10) & (pdata.BloodPressure>20) & (pdata.Glucose>25)]\ndf.head()","1410b141":"df.shape","b60b56f1":"df.loc[(df.SkinThickness<5)& (df.Outcome==0), 'SkinThickness']=int(df[(df.Outcome==0)]['SkinThickness'].median())\ndf.loc[(df.SkinThickness<5)& (df.Outcome==1), 'SkinThickness']=int(df[(df.Outcome==1)]['SkinThickness'].median())\ndf.head()","189a7480":"df.loc[(df.Insulin==0)& (df.Outcome==0), 'Insulin']=int(df[(df.Outcome==0)]['Insulin'].median())\ndf.loc[(df.Insulin==0)& (df.Outcome==1), 'Insulin']=int(df[(df.Outcome==1)]['Insulin'].median())\ndf.head()","9337c013":"n_true = len(df.loc[df['Outcome'] == True])\nn_false = len(df.loc[df['Outcome'] == False])\nprint(\"Number of true cases: {0} ({1:2.2f}%)\".format(n_true, (n_true \/ (n_true + n_false)) * 100 ))\nprint(\"Number of false cases: {0} ({1:2.2f}%)\".format(n_false, (n_false \/ (n_true + n_false)) * 100))","8480c05b":"from sklearn.model_selection import train_test_split\n\nX = df.drop('Outcome',axis=1)     # Predictor feature columns (8 X m)\nY = df['Outcome']   # Predicted class (1=True, 0=False) (1 X m)\n\nx_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.3, random_state=1)\n# 1 is just any random seed number\n\nx_train.head()","1ad9ca08":"from sklearn import metrics\n\nfrom sklearn.linear_model import LogisticRegression\n\n# Fit the model on train\nmodel = LogisticRegression(solver=\"liblinear\")\nmodel.fit(x_train, y_train)\n#predict on test\ny_predict = model.predict(x_test)\n\n\ncoef_df = pd.DataFrame(model.coef_)\ncoef_df['intercept'] = model.intercept_\nprint(coef_df)","8411d818":"model_score = model.score(x_test, y_test)\nprint(model_score)","78add82f":"# Performing manual EDA.","20231d9f":"# Displaying EDA done by pandas profiling in iframe","6e5413cd":"# Performing EDA using Pandas Profiling.\nhttps:\/\/pypi.org\/project\/pandas-profiling\/","a0e3e362":"We can see that there are many outliers in the data:\n1. **BMI**\n    * A BMI of less than 18.5 means that a person is underweight. \n    * A BMI of between 18.5 and 24.9 is ideal. \n    * A BMI of between 25 and 29.9 is overweight. \n    * A BMI over 30 indicates obesity.\n\n\n2. **Blood Pressure**\nAs a general guide: \n    * Ideal blood pressure is considered to be between 90\/60mmHg and 120\/80mmHg. \n    * High blood pressure is considered to be 140\/90mmHg or higher. \n    * Low blood pressure is considered to be 90\/60mmHg or lower.\n\n3. **Glucose**\nFor the majority of healthy individuals, \n    * Normal blood sugar levels are as follows: Between 4.0 to 5.4 mmol\/L (72 to 99 mg\/dL) when fasting. \n    * Up to 7.8 mmol\/L (140 mg\/dL) 2 hours after eating.\n\n4. **SkinThickness**\nFor adults, the standard normal values for triceps skinfolds are (see TableH): 2.5mm (men) or about 20% fat; \n18.0mm (women) or about 30% fat","84e8fd52":"# Importing the dataset.","1cedbe5c":"# Creating html of EDA report."}}