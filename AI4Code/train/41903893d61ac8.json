{"cell_type":{"6d9df307":"code","e137e2a9":"code","150ced54":"code","24d86ed8":"code","255d4987":"code","f753a523":"code","b6952b22":"code","0da0dd06":"code","62a4dacc":"code","c4a423c9":"code","dfaae35d":"code","f5265b35":"markdown","326523f9":"markdown"},"source":{"6d9df307":"import numpy as np\nimport pandas as pd\nimport pylab as plt\nimport cv2\nimport os\n\nfrom tqdm import tqdm\nfrom IPython.display import clear_output\nfrom scipy.stats import zscore\nfrom IPython.display import SVG\n\nfrom keras.utils.vis_utils import plot_model, model_to_dot\nfrom keras.models import Sequential, Model\nfrom keras.callbacks import Callback, EarlyStopping\nfrom keras.optimizers import Adam, rmsprop\nfrom keras.applications import Xception\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.layers import Conv2D, SeparableConv2D, Dense, Flatten, concatenate, multiply, Dropout, MaxPooling2D, BatchNormalization, GlobalAveragePooling2D, Input","e137e2a9":"train_dir = '..\/input\/chest_xray\/chest_xray\/train\/'\nval_dir = '..\/input\/chest_xray\/chest_xray\/test\/'\n\nHEIGHT, WIDTH = 256,256","150ced54":"data_size = len(os.listdir(train_dir+'PNEUMONIA'))+len(os.listdir(train_dir+'NORMAL'))\nX = np.zeros((data_size,HEIGHT,WIDTH,3))\ny = np.zeros((data_size, 2))\ni = 0\nfor subdir in ['NORMAL\/', 'PNEUMONIA\/']:\n    for file in tqdm(os.listdir(train_dir+subdir)):\n        try:\n            X[i] = cv2.resize(cv2.imread(train_dir+subdir+file), (HEIGHT,WIDTH))\/255\n        except:\n            pass # Error for reading .DS_Store file\n        if subdir == 'NORMAL\/':\n            y[i] = np.array([1,0])\n        else:\n            y[i] = np.array([0,1])\n        i += 1","24d86ed8":"data_size = len(os.listdir(val_dir+'PNEUMONIA'))+len(os.listdir(val_dir+'NORMAL'))\nX_ = np.zeros((data_size,HEIGHT,WIDTH,3))\ny_ = np.zeros((data_size, 2))\ni = 0\nfor subdir in ['NORMAL\/', 'PNEUMONIA\/']:\n    for file in tqdm(os.listdir(val_dir+subdir)):\n        try:\n            X_[i] = cv2.resize(cv2.imread(val_dir+subdir+file), (HEIGHT,WIDTH))\/255\n        except:\n            pass # Error for reading .DS_Store file\n        if subdir == 'NORMAL\/':\n            y_[i] = np.array([1,0])\n        else:\n            y_[i] = np.array([0,1])\n        i += 1","255d4987":"X = X[::2]\ny = y[::2]","f753a523":"datagen = ImageDataGenerator(\n    horizontal_flip=True,\n    rotation_range=15,\n    featurewise_center=True,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    validation_split=0.1\n)\ndatagen.fit(X)","b6952b22":"early_stopping = EarlyStopping(monitor='val_loss', patience=2)\nclass PlotLearning(Callback):\n    def on_train_begin(self, logs={}):\n        self.i = 0\n        self.x = []\n        self.losses = []\n        self.val_losses = []\n        self.acc = []\n        self.val_acc = []\n        self.fig = plt.figure()\n        \n        self.logs = []\n        \n\n    def on_epoch_end(self, epoch, logs={}):\n        \n        self.logs.append(logs)\n        self.x.append(self.i)\n        self.losses.append(logs.get('loss'))\n        self.val_losses.append(logs.get('val_loss'))\n        self.acc.append(logs.get('acc'))\n        self.val_acc.append(logs.get('val_acc'))\n        self.i += 1\n        f, (ax1, ax2) = plt.subplots(1, 2, sharex=True)\n        \n        clear_output(wait=True)\n        \n        ax1.set_yscale('Log')\n        ax1.plot(self.x, self.losses, label=\"loss\")\n        ax1.plot(self.x, self.val_losses, label=\"val_loss\")\n        ax1.legend()\n        \n        ax2.plot(self.x, self.acc, label=\"acc\")\n        ax2.plot(self.x, self.val_acc, label=\"val_acc\")\n        ax2.legend()\n        \n        plt.show()\n        \n        \nplot = PlotLearning()","0da0dd06":"input_layer = Input((HEIGHT, WIDTH, 3))\n\nhidden_layer1 = Conv2D(8, (3,3), activation='relu')(input_layer)\nhidden_layer2 = SeparableConv2D(8, (3,3), activation='relu')(input_layer)\nhidden_layer1 = Conv2D(8, (3,3), activation='relu')(hidden_layer1)\nhidden_layer2 = SeparableConv2D(8, (3,3), activation='relu')(hidden_layer2)\n\nhidden_layer1 = BatchNormalization()(hidden_layer1)\nhidden_layer2 = BatchNormalization()(hidden_layer2)\n\nhidden_layer1 = MaxPooling2D((3,3))(hidden_layer1)\nhidden_layer2 = MaxPooling2D((3,3))(hidden_layer2)\n\nhidden_layer1 = Conv2D(16, (3,3), activation='relu')(hidden_layer1)\nhidden_layer2 = SeparableConv2D(16, (3,3), activation='relu')(hidden_layer2)\nhidden_layer1 = Conv2D(16, (3,3), activation='relu')(hidden_layer1)\nhidden_layer2 = SeparableConv2D(16, (3,3), activation='relu')(hidden_layer2)\n\nhidden_layer1 = BatchNormalization()(hidden_layer1)\nhidden_layer2 = BatchNormalization()(hidden_layer2)\n\nhidden_layer1 = MaxPooling2D((2,2))(hidden_layer1)\nhidden_layer2 = MaxPooling2D((2,2))(hidden_layer2)\n\nhidden_layer1 = Conv2D(32, (5,5), activation='relu')(hidden_layer1)\nhidden_layer2 = SeparableConv2D(32, (5,5), activation='relu')(hidden_layer2)\nhidden_layer1 = Conv2D(32, (5,5), activation='relu')(hidden_layer1)\nhidden_layer2 = SeparableConv2D(32, (5,5), activation='relu')(hidden_layer2)\n\nhidden_layer1 = MaxPooling2D((4,4))(hidden_layer1)\nhidden_layer2 = MaxPooling2D((4,4))(hidden_layer2)\n\nhidden_layer = concatenate([hidden_layer1, hidden_layer2])\n\nhidden_layer = GlobalAveragePooling2D()(hidden_layer)\nhidden_layer = Dense(60, activation='relu')(hidden_layer)\nhidden_layer = BatchNormalization()(hidden_layer)\nhidden_layer = Dense(60, activation='relu')(hidden_layer)\nhidden_layer = BatchNormalization()(hidden_layer)\n\noutput_layer = Dense(2, activation='softmax')(hidden_layer)\n\nmodel = Model(input_layer, output_layer)\nmodel.compile(\n    optimizer=Adam(0.001),\n    loss='categorical_crossentropy',\n    metrics=['accuracy']\n)\nmodel.summary()","62a4dacc":"#SVG(model_to_dot(model).create(prog='dot', format='svg'))","c4a423c9":"model.fit_generator(\n    datagen.flow(X, y, batch_size=64, subset='training'),\n    epochs=20,\n    validation_data=(X_,y_),\n    steps_per_epoch=1000,\n    callbacks=[plot, early_stopping],\n    workers=8\n)","dfaae35d":"test_img1 = cv2.resize(cv2.imread(train_dir+'NORMAL\/IM-0427-0001.jpeg'), (HEIGHT,WIDTH))\ntest_img2 = cv2.resize(cv2.imread(train_dir+'PNEUMONIA\/person755_bacteria_2659.jpeg'), (HEIGHT, WIDTH))\nplt.imshow(test_img1)\nplt.show()\nplt.imshow(test_img2)\nplt.show()\ntest_img1.shape","f5265b35":"> **Loading More Data**","326523f9":"**Loading Training Data**"}}