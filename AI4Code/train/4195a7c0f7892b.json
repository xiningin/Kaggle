{"cell_type":{"6bef434a":"code","eb239d16":"code","657e5986":"code","dc9e1d03":"code","5610d91e":"code","df540b9a":"code","9c2aa616":"code","c18bf7f9":"code","a7f462ae":"code","107175a6":"code","f6fdcd20":"code","58e38e3e":"code","82db7961":"code","9f64a259":"markdown","c7e2a6f5":"markdown","91577806":"markdown","b25fafe7":"markdown","cb121895":"markdown","67c0f4db":"markdown","1ac20c01":"markdown","746c9f9c":"markdown","83712066":"markdown","11509263":"markdown","15237fcb":"markdown","e212deb6":"markdown","235d5899":"markdown"},"source":{"6bef434a":"#-------Import Dependencies-------#\n%matplotlib inline\nimport pandas as pd\nimport os,shutil,math,scipy,cv2\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport random as rn\n\n\nfrom sklearn.utils import shuffle\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import confusion_matrix,roc_curve,roc_auc_score\n\nfrom PIL import Image\nfrom PIL import Image as pil_image\nfrom PIL import ImageDraw\n\nfrom time import time\nfrom glob import glob\nfrom tqdm import tqdm,tqdm_notebook\nfrom skimage.io import imread\nfrom IPython.display import SVG\nfrom scipy import misc,ndimage\nfrom scipy.ndimage.interpolation import zoom\nfrom scipy.ndimage import imread\n\nfrom keras import backend as K\nfrom keras.utils.np_utils import to_categorical\nfrom keras import layers\nfrom keras.preprocessing.image import save_img\nfrom keras.utils.vis_utils import model_to_dot\nfrom keras.applications.vgg16 import VGG16,preprocess_input\nfrom keras.applications.densenet import DenseNet121\nfrom keras.models import Sequential,Input,Model\nfrom keras.layers import Dense,Flatten,Dropout,Concatenate,GlobalAveragePooling2D,Lambda,ZeroPadding2D,GlobalMaxPooling2D\nfrom keras.layers import SeparableConv2D,BatchNormalization,MaxPooling2D,Conv2D\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.optimizers import Adam,SGD\nfrom keras.utils.vis_utils import plot_model\nfrom keras.callbacks import ModelCheckpoint,EarlyStopping,TensorBoard,CSVLogger,ReduceLROnPlateau,LearningRateScheduler","eb239d16":"def show_final_history(history):\n    fig, ax = plt.subplots(1, 2, figsize=(15,5))\n    ax[0].set_title('loss')\n    ax[0].plot(history.epoch, history.history[\"loss\"], label=\"Train loss\")\n    ax[0].plot(history.epoch, history.history[\"val_loss\"], label=\"Validation loss\")\n    ax[1].set_title('acc')\n    ax[1].plot(history.epoch, history.history[\"acc\"], label=\"Train acc\")\n    ax[1].plot(history.epoch, history.history[\"val_acc\"], label=\"Validation acc\")\n    ax[0].legend()\n    ax[1].legend()","657e5986":"train_df = pd.read_csv('..\/input\/train.csv')\ntrain_df.head()\n\nx_train,x_test,y_train,y_test = train_test_split(\n    train_df['id'],\n    train_df['has_cactus'],\n    test_size = 0.2,\n    random_state = 3)","dc9e1d03":"X_train = []\nfor images in tqdm(x_train):\n    img = plt.imread('..\/input\/train\/train\/' + images)\n    X_train.append(img)\n    \n\nX_test = []\nfor images in tqdm(x_test):\n    img = plt.imread('..\/input\/train\/train\/' + images)\n    X_test.append(img)\n    \nX_train = np.array(X_train)\nX_test = np.array(X_test)\n\nX_train = X_train.astype('float32')\nX_test = X_test.astype('float32')\nX_train = X_train\/255\nX_test = X_test\/255","5610d91e":"augmentations = ImageDataGenerator(\n    vertical_flip=True,\n    horizontal_flip=True,\n    zoom_range=0.1)\n\naugmentations.fit(X_train)","df540b9a":"inputs = Input((32,32,3))\nmodel_base = DenseNet121(weights='imagenet',include_top=False,input_shape=(32,32,3))\nx = model_base(inputs)\nx_1 = GlobalMaxPooling2D()(x)\nx_2 = GlobalAveragePooling2D()(x)\nx_3 = Flatten()(x)\nx = Concatenate(axis=-1)([x_1,x_2,x_3])\nx = Dropout(0.5)(x)\nx = Dense(256,activation='relu')(x)\nx = BatchNormalization()(x)\nx = Dense(1,activation='sigmoid')(x)\n\nfor layer in model_base.layers:\n    layer.trainable = True\n\nmodel = Model(inputs,x)\nmodel.summary()\n\nSVG(model_to_dot(model).create(prog='dot', format='svg'))\nplot_model(model, to_file='model_plot.png', show_shapes=True, show_layer_names=True)","9c2aa616":"#-------Callbacks-------------#\nbest_model_weights = '.\/base.model'\ncheckpoint = ModelCheckpoint(\n    best_model_weights,\n    monitor='val_loss',\n    verbose=1,\n    save_best_only=True,\n    mode='min',\n    save_weights_only=False,\n    period=1\n)\nearlystop = EarlyStopping(\n    monitor='val_loss',\n    min_delta=0.001,\n    patience=10,\n    verbose=1,\n    mode='auto'\n)\ntensorboard = TensorBoard(\n    log_dir = '.\/logs',\n    histogram_freq=0,\n    batch_size=16,\n    write_graph=True,\n    write_grads=True,\n    write_images=False,\n)\n\ncsvlogger = CSVLogger(\n    filename= \"training_csv.log\",\n    separator = \",\",\n    append = False\n)\n\n#lrsched = LearningRateScheduler(step_decay,verbose=1)\n\nreduce = ReduceLROnPlateau(\n    monitor='val_loss',\n    factor=0.5,\n    patience=10,\n    verbose=1, \n    mode='auto',\n    cooldown=1 \n)\n\ncallbacks = [checkpoint,tensorboard,csvlogger,reduce]","c18bf7f9":"opt = SGD(lr=1e-4,momentum=0.99)\nopt1 = Adam(lr=1e-3)\n\nmodel.compile(\n    loss='binary_crossentropy',\n    optimizer='rmsprop',\n    metrics=['accuracy']\n)\n    \nhistory = model.fit_generator(\n    augmentations.flow(X_train,y_train,batch_size = 16),\n    steps_per_epoch=150,\n    validation_steps=150,\n    validation_data=(X_test,y_test),\n    epochs = 50, \n    verbose = 1,\n    callbacks=callbacks,\n)","a7f462ae":"show_final_history(history)\nmodel.load_weights(best_model_weights)\n\nmodel_json = model.to_json()\nwith open(\"model.json\",\"w\") as json_file:\n    json_file.write(model_json)\n    \nmodel.save(\"model.h5\")\nprint(\"Weights Saved\")\nprint(\"JSON Saved\")","107175a6":"train_pred = model.predict(X_train, verbose= 1)\nvalid_pred = model.predict(X_test, verbose= 1)\n\ntrain_acc = roc_auc_score(np.round(train_pred), y_train)\nvalid_acc = roc_auc_score(np.round(valid_pred), y_test)\n\nconfusion_matrix(np.round(valid_pred),y_test)","f6fdcd20":"sample = pd.read_csv('..\/input\/sample_submission.csv')\ntest = []\nfor images in tqdm(sample['id']):\n    img = plt.imread('..\/input\/test\/test\/' + images)\n    test.append(img)\n\ntest = np.array(test)","58e38e3e":"test = test\/255\ntest_pred = model.predict(test, verbose= 1)\n\nsample['has_cactus'] = test_pred\nsample.head()\n\nsample.to_csv('sub.csv', index= False)","82db7961":"!wget https:\/\/bin.equinox.io\/c\/4VmDzA7iaHb\/ngrok-stable-linux-amd64.zip\n!unzip ngrok-stable-linux-amd64.zip\nLOG_DIR = '.\/logs' # Here you have to put your log directory\nget_ipython().system_raw(\n    'tensorboard --logdir {} --host 0.0.0.0 --port 8080 &'\n    .format(LOG_DIR)\n)\nget_ipython().system_raw('.\/ngrok http 8080 &')\n! curl -s http:\/\/localhost:4040\/api\/tunnels | python3 -c \\\n    \"import sys, json; print(json.load(sys.stdin)['tunnels'][0]['public_url'])\"\n","9f64a259":"# Data Augmentation","c7e2a6f5":"# Load In Test Data","91577806":"# Load In Train and Test Images","b25fafe7":"# TensorBoard Visualization","cb121895":"# Import Dependencies","67c0f4db":"# Get model Predictions","1ac20c01":"# Visualize The Training Results And Save The Weights","746c9f9c":"# Custom Function For Visualizing Training Results","83712066":"# Callbacks","11509263":"# Create The Model","15237fcb":"# Create Submission For Competition","e212deb6":"\n# Load Train Data and create a train test split","235d5899":"# Train The Model"}}