{"cell_type":{"fe67c360":"code","704b7f07":"code","85b418ab":"code","367722f8":"code","30760fd1":"code","843779d8":"code","87a37115":"code","9049cba3":"code","8033d6a2":"code","8f32c3d2":"code","7ca13d61":"code","14603071":"code","d361e667":"code","5b95dbac":"code","e94732bd":"code","41d35eb4":"code","b4750618":"code","287f1e24":"code","ac6cc3a8":"code","c5eaf850":"code","f1db477d":"code","6ffad374":"code","3e6d1b44":"markdown","b1ca0bbc":"markdown","474c0c8f":"markdown","7ee610b8":"markdown","778684d3":"markdown","c954f5b7":"markdown","e1ee0aac":"markdown","7132ab76":"markdown","ccaf7697":"markdown","ac8984be":"markdown","7e14d187":"markdown","4748e9d2":"markdown","3016182e":"markdown","e418a471":"markdown","511b7060":"markdown","42f8fa4f":"markdown","b9923a22":"markdown","ac719dee":"markdown","298cf3b8":"markdown","b0bce8fe":"markdown","b3958903":"markdown"},"source":{"fe67c360":"#lets start with the easy stuff:\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n#this part wasn't that easy(give it a go, maybe you won't have any problems, \n#if you're as unlucky as I was, the world of Github and stackoverflow awaits):\nimport geopandas as gpd\nimport os","704b7f07":"# From the above link, we've downloaded a file 'plz-gebiete.shp.zip' (because it was the biggest one, my intution\n#  din't fail me on that one!)\n# now it's almost like pandas dataframe, lets read it, assign it to a GeoDataFrame, and have a look at the first few rows:\ndata = gpd.read_file('..\/input\/germany-ebay\/plz-gebiete.shp') \ndata.head()","85b418ab":"# looks almost like a pandas DataFrame, is it though?\ntype(data)","367722f8":"data.plot()\nplt.show()","30760fd1":"data.plot(figsize=(12,12))\nplt.show()","843779d8":"data[data['plz']=='99998'].plot()\nplt.show()","87a37115":"data[data['plz']=='99998'].plot(color='r')\nplt.show()","9049cba3":"autos = pd.read_csv('..\/input\/germany-ebay\/postal.csv',  encoding=\"Latin-1\")\nautos.head()\n#remember this?","8033d6a2":"autos['postal_code'] = autos['postal_code'].apply(lambda x: '{0:0>5}'.format(x))","8f32c3d2":"price_post = autos.groupby('postal_code')['price'].mean()","7ca13d61":"price_post","14603071":"# BTW how much are we missing?\nmissing = (data.shape[0] - price_post.shape[0]) \/ data.shape[0] * 100\nprint('We are missing {} percent of values'.format(round(missing,2)))","d361e667":"data['avg_price'] = None","5b95dbac":"def wha(code):\n    if code in price_post:\n        return price_post[code]\n    else:\n        None\ndata['avg_price'] = data['plz'].apply(wha)","e94732bd":"data['avg_price'] = np.where((data['avg_price'].isnull()==True),autos['price'].mean() ,data['avg_price'])","41d35eb4":"#anything left?\ndata['avg_price'].isnull().value_counts()","b4750618":"data.head()","287f1e24":"#BTW remember this?\ndata.plot(figsize=(12,12))\nplt.show()","ac6cc3a8":"# we want to map the values of avg_price column, and we want a colormap(cmap) of our choosing for that:\ndata.plot(column=\"avg_price\", figsize=(12,12),cmap=\"gist_ncar\", legend=True)\nplt.show()","c5eaf850":"data.sort_values('avg_price')[-5:]","f1db477d":"data_below_100 = data[data['avg_price']<100000]","6ffad374":"#found this nice piece of code on stackoverflow, \n#when I was looking up 'Plotted map from shape file seems distorted':\nmap_1 = data_below_100.to_crs({'init' :'epsg:25832'})\n#That should solve the problem\n\nmap_1.plot(column=\"avg_price\", figsize=(12,12),cmap=\"gist_ncar\", legend=True, \n                    legend_kwds={'label': \"Average price\"})\nplt.show()","3e6d1b44":"Lets use the data from price_post to fill in the avg_price where we can:","b1ca0bbc":"Looks a bit flattened, but we'll deal with that issue later.","474c0c8f":"As we can see, we have some missing values in avg_price column. Lets fill them with the price average for the whole autos database:","7ee610b8":"# Ok, so we're gonna need a dataframe with postal codes and prices\nAs mentioned before, towards **the end of my ebay car sales project** (therefore this data has already been cleaned). Lets read in the dataframe from ebay project (here it's called postal.csv).","778684d3":"# Lets insert a few extra parameters into that line","c954f5b7":"column 'plz' is the postal code column, looks like the 'note' column contains the postal code and name of the town\/ city\/ district? the last column is the shape that geopandas is using to draw a map","e1ee0aac":"The colormaps range can reach way past 400 000 dollars, but we only have 1 entry in the whole database, above that.\nOnly 3 entries above the 100 000 dollars! Lets create a copy of the database for everything below 100 000 dollars:","7132ab76":"# That was as easy as a basic plot chart!\nCan we make it bigger?","ccaf7697":"# Fun fact: some postal codes in autos.csv are incorrect\nYeah, I know I said the data was clean...\nSome of the postal codes have only 4 digits, as I've recently learned to make it a proper German postal code you need a 5 digit code, thus if there's a 4 digit code: We need to add a '0' in front:","ac8984be":"# Lets group the data by postal code and calculate average price:","7e14d187":"# Can we color it?","4748e9d2":"## Is plotting that GeoDataFrame hard?","3016182e":"Now to start with, we need a map of Germany. To be precise we need a shapefile of Germany. Shapefile is something geopandas likes to swallow so it can spit out a map. But we are a bit more demenading: we need it with postal codes. Quick google search and voila: https:\/\/www.suche-postleitzahl.org\/downloads","e418a471":"# So about those postal codes...\nCan we pick one?","511b7060":"Now, we now that the 'autos' database doesn't cover all of the postal codes from Germany, we're going to need the values for all of the postal codes.","42f8fa4f":"We're getting somewhere, but what happened? If we look at the legend on the right: most of the cars are way below 100 000 mark, but because we have a few extremely priced entries, our maps colors are the same almost everywhere.","b9923a22":"# Lets try again:\nWhile we're at it, lets fix the problem of the map being a bit deformed:","ac719dee":"Voila!","298cf3b8":"22%, not bad. Lets create an empty column filled with null:","b0bce8fe":"Purpose of this notebook is to try to learn a few basic things about geopandas. Towards the end of my ebay car sales project I was left with a list of postal codes and average car prices assigned to those codes. **If only there was a way to plot a map of Germany and fill it with colors depending on the average car price in the postal code area...**","b3958903":"As we can see above, our GeoDataFrame now has a postal code column, a geometry column(for drawing the map shapes) and an average price column. We can start the magic: "}}