{"cell_type":{"ddbcd7a8":"code","54f28b57":"code","d5b3f25a":"code","21f7292e":"code","e017031c":"code","0a30d527":"code","c6a72b80":"code","e445a1b5":"code","3df210eb":"code","bcc2ce58":"code","f4386e9b":"code","57ee7d62":"code","68136e97":"code","ca0cb10a":"code","ebf1cde0":"code","04b14b4e":"code","ce3c57ff":"code","d3e855cf":"code","1e5a8077":"code","fc53ba82":"code","47ad5f29":"code","75b605dc":"code","802b9aca":"code","ca2559f1":"code","7ff6ef64":"code","558dc298":"code","4efa7824":"code","d3ba30ed":"code","b43caf57":"code","2787ad8c":"code","97643946":"code","41d51610":"code","545633e6":"code","8831f45d":"code","9a43870e":"code","1c404237":"code","df61b4af":"code","5d490f85":"code","ef784e52":"code","01bce4de":"code","f0200e9b":"code","2ada2143":"code","6fd13a0c":"code","42a153d9":"code","afa2afe9":"code","d5568015":"code","a669fcdb":"code","efaf9dd4":"code","3aee11f8":"code","b21f3513":"code","93d44e1c":"code","f115d736":"code","abde344c":"code","ef53d984":"code","c5db4fc4":"code","1f1c9eff":"code","0e7535a1":"code","8baed29b":"code","c0d182d1":"code","17f858c2":"code","e79e463c":"code","9cd5f1ec":"code","2aca6f10":"code","5453ae7f":"code","700f1537":"code","0a929486":"code","959368d8":"markdown","009883f3":"markdown","d6d80225":"markdown","a4353066":"markdown","13be3abc":"markdown","29f14a42":"markdown","332305df":"markdown","948fca67":"markdown"},"source":{"ddbcd7a8":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\npd.pandas.set_option('display.max_columns', None)","54f28b57":"df = pd.read_csv('..\/input\/titanic\/train.csv')","d5b3f25a":"df.head()","21f7292e":"df.tail()","e017031c":"df.shape","0a30d527":"df.info()","c6a72b80":"df.columns","e445a1b5":"df.index","3df210eb":"df.describe().T","bcc2ce58":"df.isnull().values.any()","f4386e9b":"df.isnull().sum()","57ee7d62":"def check_df(dataframe, head=5):\n    print(\"##### SHAPE #####\")\n    print(dataframe.shape)\n    print(\"##### TYPES #####\")\n    print(dataframe.dtypes)\n    print(\"##### HEAD ######\")\n    print(dataframe.head(head))\n    print(\"##### TAIL #####\")\n    print(dataframe.tail(head))\n    print(\"##### NA #####\")\n    print(dataframe.isnull().sum())\n    print(\"##### QUANTILES #####\")\n    print(dataframe.quantile([0, 0.05, 0.50, 0.95, 0.99, 1]).T)","68136e97":"check_df(df)","ca0cb10a":"df[\"Sex\"].value_counts()","ebf1cde0":"df[\"Sex\"].unique()","04b14b4e":"df[\"Sex\"].nunique()","ce3c57ff":"cat_cols = [col for col in df.columns if df[col].dtypes == \"O\"]\ncat_but_car = [col for col in df.columns if df[col].nunique() > 20 and df[col].dtypes == \"O\"]\ncat_cols = [col for col in cat_cols if col not in cat_but_car]","d3e855cf":"num_but_cat = [col for col in df.columns if df[col].nunique() < 10 and df[col].dtypes != \"O\"]","1e5a8077":"cat_cols = cat_cols + num_but_cat","fc53ba82":"cat_cols","47ad5f29":"df[cat_cols]","75b605dc":"df[cat_cols].nunique()","802b9aca":"df[cat_but_car].nunique()","ca2559f1":"def cat_summary(dataframe, col_name, plot=False):\n    print(pd.DataFrame({col_name: dataframe[col_name].value_counts(),\n                       \"Ratio\": 100 * dataframe[col_name].value_counts() \/ len(dataframe)}))\n    print(\"##############################\")\n    if plot:\n        sns.countplot(x=dataframe[col_name], data=dataframe)\n        plt.show()","7ff6ef64":"for col in cat_cols:\n    cat_summary(df, col, plot=True)","558dc298":"# analysis of numerical variables\ndf[[\"Age\", \"Fare\"]].describe([0.05, 0.10, 0.25, 0.50, 0.75, 0.80, 0.90, 0.95, 0.99]).T","4efa7824":"num_cols = [col for col in df.columns if df[col].dtypes != \"O\"]\nnum_cols = [col for col in df.columns if df[col].dtypes != \"O\" and col not in [\"PassengerId\"]]\nnum_cols = [col for col in num_cols if col not in cat_cols]","d3ba30ed":"num_cols","b43caf57":"def num_summary(dataframe, numerical_col, plot=False, plot_type=\"hist\"):\n    quantiles = [0.05, 0.10, 0.25, 0.50, 0.75, 0.80, 0.90, 0.95, 0.99]\n    print(dataframe[numerical_col].describe(quantiles).T)\n    if plot:\n        if plot_type == \"hist\":\n            dataframe[numerical_col].hist(bins=30)\n            plt.xlabel(numerical_col)\n            plt.title(numerical_col)\n            plt.show()\n        \n        elif plot_type == \"box_plot\":\n            sns.boxplot(x=dataframe[numerical_col])\n            plt.xlabel(numerical_col)\n            plt.title(numerical_col)\n            plt.show()\n        else:\n            print(\"Not correct chart type\")","2787ad8c":"num_summary(df, \"Age\", plot=True)","97643946":"for col in num_cols:\n    num_summary(df, col, plot=True)","41d51610":"for col in num_cols:\n    num_summary(df, col, plot=True, plot_type=\"box_plot\")","545633e6":"def grab_col_name(dataframe, cat_th=10, car_th=20):\n    \"\"\"\n    It gives the names of categorical, numerical and categorical but cardinal variables in the data set.\n    Note: Categorical variables with numerical appearance are also included in categorical variables.\n    \n    Parameters\n    ----------\n    dataframe: dataframe\n        The dataframe from which variable names are to be retrieved\n    cat_th: int, optional\n        Class threshold value for numeric but categorical variables\n    car_th: int, optional\n    \n    Returns\n    -------\n        cat_cols: list\n   Categorical variable list\n         num_cols: list\n             Numeric variable list\n         cat_but_car: list\n             Categorical view cardinal variable list\n    \n     Examples\n     --------\n         import seaborn as sns\n         df = sns.load_dataset(\"iris\")\n         print(grab_col_names(df))\n    \n     Notes\n     -----\n         cat_cols + num_cols + cat_but_Car = total number of variables\n         num_but_cat is inside cat_cols.\n         The sum of the 3 returned lists equals the total number of variables: cat_cols + num_cols + cat_but_car = number of variables\n        \n    \"\"\"\n    \n    # cat_cols, cat_but_car\n    cat_cols = [col for col in dataframe.columns if dataframe[col].dtypes == \"O\"]\n    \n    num_but_cat = [col for col in dataframe.columns if dataframe[col].nunique() < cat_th and \n                   dataframe[col].dtypes != \"O\"]\n    \n    cat_but_car = [col for col in dataframe.columns if dataframe[col].nunique() > car_th and \n                   dataframe[col].dtypes == \"O\"]\n    \n    cat_cols = cat_cols + num_but_cat\n    cat_cols = [col for col in cat_cols if col not in cat_but_car]\n    \n    # num_cols\n    num_cols = [col for col in dataframe.columns if dataframe[col].dtypes != \"O\"]\n    num_cols = [col for col in num_cols if col not in num_but_cat]\n    \n    print(f\"Observations: {dataframe.shape[0]}\")\n    print(f\"Variables: {dataframe.shape[1]}\")\n    print(f\"cat_cols: {len(cat_cols)}\")\n    print(f\"num_cols: {len(num_cols)}\")\n    print(f\"cat_but_car: {len(cat_but_car)}\")\n    print(f\"num_but_cat: {len(num_but_cat)}\")\n    \n    return cat_cols, num_cols, cat_but_car","8831f45d":"grab_col_name(df)","9a43870e":"dff = pd.read_csv(\"..\/input\/nba-players-data\/all_seasons.csv\")","1c404237":"cat_cols, num_cols, cat_but_car = grab_col_name(dff)","df61b4af":"for col in cat_cols:\n    cat_summary(dff, col, plot=True)","5d490f85":"for col in num_cols:\n    num_summary(dff, col, plot=True)","ef784e52":"cat_cols, num_cols, cat_but_car = grab_col_name(df)","01bce4de":"def target_summary_with_cat(dataframe, target, categorical_col):\n    print(pd.DataFrame({\"TARGET_MEAN\": dataframe.groupby(categorical_col)[target].mean()}), end=\"\\n\\n\\n\")","f0200e9b":"for col in cat_cols:\n    target_summary_with_cat(df, \"Survived\", col)","2ada2143":"def target_summary_with_num(dataframe, target, numerical_col):\n    print(dataframe.groupby(target).agg({numerical_col: \"mean\"}), end=\"\\n\\n\\n\")","6fd13a0c":"for col in num_cols:\n    target_summary_with_num(df, \"Survived\", col)","42a153d9":"df_bc = pd.read_csv(\"..\/input\/breast-cancer-wisconsin-data\/data.csv\")","afa2afe9":"df_bc.head()","d5568015":"df_bc = df_bc.iloc[:, 1:-1]","a669fcdb":"num_cols = [col for col in df_bc.columns if df_bc[col].dtype in [int, float]]","efaf9dd4":"corr = df_bc[num_cols].corr()","3aee11f8":"corr","b21f3513":"sns.set(rc={'figure.figsize': (12, 12)})\nsns.heatmap(corr, cmap=\"RdBu\")\nplt.show()","93d44e1c":"# deletion of highly correlated variables\npd.set_option('display.max_columns', 5)\n\ncor_matrix = df_bc.corr().abs()","f115d736":"cor_matrix","abde344c":"upper_triangle_matrix = cor_matrix.where(np.triu(np.ones(cor_matrix.shape), k=1).astype(np.bool))","ef53d984":"upper_triangle_matrix","c5db4fc4":"drop_list = [col for col in upper_triangle_matrix.columns if any(upper_triangle_matrix[col] > 0.90)]","1f1c9eff":"cor_matrix[drop_list]","0e7535a1":"df_bc.drop(drop_list, axis=1)","8baed29b":"def high_correlated_cols(dataframe, plot=False, corr_th=0.90):\n    corr = dataframe.corr()\n    cor_matrix = corr.abs()\n    upper_triangle_matrix = cor_matrix.where(np.triu(np.ones(cor_matrix.shape), k=1).astype(np.bool))\n    drop_list = [col for col in upper_triangle_matrix.columns if any(upper_triangle_matrix[col] > corr_th)]\n    if plot:\n        import seaborn as sns\n        import matplotlib.pyplot as plt\n        sns.set(rc={'figure.figsize': (15, 15)})\n        sns.heatmap(corr, cmap=\"RdBu\")\n        plt.show()\n    return drop_list","c0d182d1":"high_correlated_cols(df_bc, plot=True)","17f858c2":"drop_list = high_correlated_cols(df_bc)","e79e463c":"df_bc.drop(drop_list, axis=1)","9cd5f1ec":"high_correlated_cols(df_bc.drop(drop_list, axis=1), plot=True)","2aca6f10":"df_fraud = pd.read_csv(\"..\/input\/ieee-fraud-detection\/train_transaction.csv\")","5453ae7f":"df_fraud.head()","700f1537":"check_df(df_fraud)","0a929486":"drop_list = high_correlated_cols(df_fraud, plot=True)","959368d8":"### THANK YOU ###","009883f3":"* <span style=\"color:blue\">Analysis of target variable<\/span>","d6d80225":"### HEATMAP (CORRELATION MATRIX)","a4353066":"### DATASET ANALYSIS","13be3abc":"- <span style=\"color:blue\">Analysis of target variable with numerical variables<\/span>","29f14a42":"### STATISTICAL ANALYSIS","332305df":"### IMPORTING LIBRARIES & DATASET","948fca67":"### VISUALIZATIONS"}}