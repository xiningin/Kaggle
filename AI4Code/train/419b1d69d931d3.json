{"cell_type":{"5d5df446":"code","d8550de3":"code","85db7c80":"code","182dcc7e":"code","46f502f9":"markdown"},"source":{"5d5df446":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","d8550de3":"import pandas as pd\n\nmain_file_path = '..\/input\/dataset_no_outlier.csv' # this is the path to the genetic data that you will use\ndata = pd.read_csv(main_file_path)","85db7c80":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import signal\n\nfs=105e6\nfin=70.1e6\n\nN=np.arange(0,21e3,1)\n\n# Create a input sin signal of 70.1 MHz sampled at 105 MHz\nx_in=np.sin(2*np.pi*(fin\/fs)*N)\n\n# Define the \"b\" and \"a\" polynomials to create a CIC filter (R=8,M=2,N=6)\nb=data.X\nb[[0,16,32,48,64,80,96]]=[1,-6,15,-20,15,-6,1]\na=data.Y\na[[0,1,2,3,4,5,6]]=[1,-6,15,-20,15,-6,1]\n\nw,h=signal.freqz(b,a)\nplt.plot(w\/max(w),20*np.log10(abs(h)\/np.nanmax(h)))\nplt.title('CIC Filter Response')\n\noutput_nco_cic=signal.lfilter(b,a,x_in)\n\nplt.figure()        \nplt.plot(x_in)\nplt.title('Input Signal')\nplt.figure()        \nplt.plot(output_nco_cic)\nplt.title('Filtered Signal')","182dcc7e":"# import the libraries\n\nimport matplotlib.pyplot as plot\n\nimport numpy as np\n\n \n\n# Define the list of frequencies\n\nfrequencies         = np.arange(5,105,5)\n\n \n\n# Sampling Frequency\n\nsamplingFrequency   = 400\n\n \n\n# Create two ndarrays\n\ns1 = data.X # For samples\n\ns2 = data.Mixed # For signal\n\n \n\n# Start Value of the sample\n\nstart   = 1\n\n \n\n# Stop Value of the sample\n\nstop    = samplingFrequency+1\n\n \n\nfor frequency in frequencies:\n\n    sub1 = np.arange(start, stop, 1)\n\n \n\n    # Signal - Sine wave with varying frequency + Noise\n\n    sub2 = np.sin(2*np.pi*sub1*frequency*1\/samplingFrequency)+np.random.randn(len(sub1))\n\n  \n\n    s1      = np.append(s1, sub1)\n\n    s2      = np.append(s2, sub2)\n\n   \n\n    start   = stop+1\n\n    stop    = start+samplingFrequency\n\n \n\n# Plot the signal\n\nplot.subplot(211)\n\nplot.plot(s1,s2)\n\nplot.xlabel('Sample')\n\nplot.ylabel('Amplitude')\n\n \n\n \n\n# Plot the spectrogram\n\nplot.subplot(212)\n\npowerSpectrum, freqenciesFound, time, imageAxis = plot.specgram(s2, Fs=samplingFrequency)\n\nplot.xlabel('Time')\n\nplot.ylabel('Frequency')\n\n \n\nplot.show()   ","46f502f9":"**Introduction**\n\nI have applied CIC filters to the data"}}