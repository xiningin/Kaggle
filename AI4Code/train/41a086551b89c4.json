{"cell_type":{"45788cdb":"code","f4e2a03a":"code","dee97f54":"code","a80c85c4":"code","62c671a5":"code","da2d8a99":"code","322e37ca":"code","7d824fe6":"code","15f4fa21":"code","9f5b0842":"code","375fd775":"code","2c9d0879":"code","f75402e8":"code","bb26f489":"code","566f8fe2":"code","fe235d3f":"code","d19aa7f5":"code","252d19d7":"code","4e4d2870":"code","6978b909":"code","99ce238f":"code","22191d50":"code","60307440":"code","071562f8":"code","e10f562e":"markdown","45955e12":"markdown","eabf7abb":"markdown","3b600c4e":"markdown","158dddce":"markdown","681ae093":"markdown","631a27d6":"markdown","481e7452":"markdown","038bda71":"markdown","fc5a7b85":"markdown","b06c55ed":"markdown","e4e086b1":"markdown","6db7dd29":"markdown","bcc4e7f9":"markdown","8d133dd6":"markdown","31f699cf":"markdown","0eca03ba":"markdown","225c396c":"markdown","5fd6ab2b":"markdown","b3e1a760":"markdown","22a954df":"markdown","84db2eb5":"markdown","5af1e41a":"markdown","afb9c8b8":"markdown","f4d3089c":"markdown"},"source":{"45788cdb":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib import patches","f4e2a03a":"sns.set_style('whitegrid')\nsns.set_context('notebook')\nsns.set_palette('colorblind', 10)\nsns.set(font_scale=2)\n\ncurrent_palette = sns.color_palette()","dee97f54":"data = pd.read_csv('..\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv', low_memory=False).drop(0);\n\nindia = data[data['Q3'] == 'India'].copy()\nusa = data[data['Q3'] == 'United States of America'].copy()\nbrazil = data[data['Q3'] == 'Brazil'].copy()\njapan = data[data['Q3'] == 'Japan'].copy()\nrussia = data[data['Q3'] == 'Russia'].copy()","a80c85c4":"print('Number of respondents: ', data.shape[0])","62c671a5":"salary = data['Q24'].str.replace(',','').str.replace('$','').str.replace('>','').str.strip(' ').str.split('-', expand=True).astype(np.float32)\nsalary.columns = ['min', 'max']\nsalary['midrange'] = (salary['max'] + salary['min']) * 0.5","da2d8a99":"loglogtime = np.log(np.log(data['Time from Start to Finish (seconds)'].astype(np.int32)))\n\nindia_time = loglogtime.loc[india.index]\nusa_time = loglogtime.loc[usa.index]\nbrazil_time = loglogtime.loc[brazil.index]\njapan_time = loglogtime.loc[japan.index]\nrussia_time = loglogtime.loc[russia.index]","322e37ca":"q1_all, q3_all = np.quantile(loglogtime, [0.25, 0.75])\n\nq1_india, q3_india = np.quantile(india_time, [0.25, 0.75])\n\nq1_usa, q3_usa = np.quantile(usa_time, [0.25, 0.75])\n\nq1_brazil, q3_brazil = np.quantile(brazil_time, [0.25, 0.75])\n\nq1_japan, q3_japan = np.quantile(japan_time, [0.25, 0.75])\n\nq1_russia, q3_russia = np.quantile(russia_time, [0.25, 0.75])","7d824fe6":"fast_all = data.loc[(loglogtime < q1_all)]\nslow_all = data.loc[(loglogtime > q3_all)]\n\nfast_india = india.loc[(india_time < q1_india)]\nslow_india = india.loc[(india_time > q3_india)]\n\nfast_usa = usa.loc[(usa_time < q1_usa)]\nslow_usa = usa.loc[(usa_time > q3_usa)]\n\nfast_brazil = brazil.loc[(brazil_time < q1_brazil)]\nslow_brazil = brazil.loc[(brazil_time > q3_brazil)]\n\nfast_japan = japan.loc[(japan_time < q1_japan)]\nslow_japan = japan.loc[(japan_time > q3_japan)]\n\nfast_russia = russia.loc[(russia_time < q1_russia)]\nslow_russia = russia.loc[(russia_time > q3_russia)]","15f4fa21":"info_time = pd.DataFrame()\ninfo_time['Countries'] = ['All', 'India', 'USA', 'Brazil', 'Japan', 'Russia']\ninfo_time['Size'] = [fast_all.shape[0], fast_india.shape[0], fast_usa.shape[0], fast_brazil.shape[0], fast_japan.shape[0], fast_russia.shape[0]]\ninfo_time['Median duration for slow respondents, min'] = [slow_all['Time from Start to Finish (seconds)'].median().astype(int) \/\/ 60,\n                                                          slow_india['Time from Start to Finish (seconds)'].median().astype(int) \/\/ 60, \n                                                          slow_usa['Time from Start to Finish (seconds)'].median().astype(int) \/\/ 60, \n                                                          slow_brazil['Time from Start to Finish (seconds)'].median().astype(int) \/\/ 60, \n                                                          slow_japan['Time from Start to Finish (seconds)'].median().astype(int) \/\/ 60, \n                                                          slow_russia['Time from Start to Finish (seconds)'].median().astype(int) \/\/ 60]\ninfo_time['Median duration for quick respondents, min'] = [fast_all['Time from Start to Finish (seconds)'].median().astype(int) \/\/ 60,\n                                                           fast_india['Time from Start to Finish (seconds)'].median().astype(int) \/\/ 60, \n                                                           fast_usa['Time from Start to Finish (seconds)'].median().astype(int) \/\/ 60, \n                                                           fast_brazil['Time from Start to Finish (seconds)'].median().astype(int) \/\/ 60, \n                                                           fast_japan['Time from Start to Finish (seconds)'].median().astype(int) \/\/ 60, \n                                                           fast_russia['Time from Start to Finish (seconds)'].median().astype(int) \/\/ 60]","9f5b0842":"info_time","375fd775":"DATAFRAMES = [(slow_all, fast_all), (slow_india, fast_india), (slow_usa, fast_usa), (slow_brazil, fast_brazil), (slow_japan, fast_japan), (slow_russia, fast_russia)]\nTITLES = ['All', 'India', 'USA', 'Brazil', 'Japan', 'Russia']","2c9d0879":"AGE_ORDER = ['18-21', '22-24', '25-29', '30-34', '35-39', '40-44', '45-49', '50-54', '55-59', '60-69', '70+']\n\nfig, axs = plt.subplots(2, 3, figsize=(30,20));\nfig.suptitle('Age comparison', x=0.5, y=1.05)\n\ndef plot_results(series, reind, **kwargs):\n    return series.value_counts(normalize=True).reindex(reind).plot(alpha=0.8, **kwargs);\n\nfor i, pair in enumerate(DATAFRAMES):\n    axs[i\/\/3][i-3*(i\/\/3)].set_title(TITLES[i])\n    plot_results(pair[0]['Q1'], AGE_ORDER, ax=axs[i\/\/3][i-3*(i\/\/3)], kind='bar', color=current_palette[0], rot=30);\n    plot_results(pair[1]['Q1'], AGE_ORDER, ax=axs[i\/\/3][i-3*(i\/\/3)], kind='bar', color=current_palette[1], rot=30);\n\nfig.legend([patches.Patch(facecolor=current_palette[color]) for color in range(2)], ['Slow respondents', 'Quick respondents'], loc='upper right');\n\nfig.tight_layout();","f75402e8":"GENDER_ORDER = ['Prefer to self-describe', 'Prefer no to say', 'Nonbinary', 'Woman', 'Man']\n\nfig, axs = plt.subplots(2, 3, figsize=(30,20));\nfig.suptitle('Gender comparison', x=0.5, y=1.05)\n\nfor i, pair in enumerate(DATAFRAMES):\n    axs[i\/\/3][i-3*(i\/\/3)].set_title(TITLES[i])\n    plot_results(pair[0]['Q2'], GENDER_ORDER, ax=axs[i\/\/3][i-3*(i\/\/3)], kind='bar', color=current_palette[0], rot=30);\n    plot_results(pair[1]['Q2'], GENDER_ORDER, ax=axs[i\/\/3][i-3*(i\/\/3)], kind='bar', color=current_palette[1], rot=30);\n\nfig.legend([patches.Patch(facecolor=current_palette[color]) for color in range(2)], ['Slow respondents', 'Quick respondents'], loc='upper right');\n\nfig.tight_layout();","bb26f489":"EDUCATION_DICT = {'Master\u2019s degree': 'Master', \n                  'Bachelor\u2019s degree': 'Bachelor', \n                  'Doctoral degree': 'Doctor', \n                  'Some college\/university study without earning a bachelor\u2019s degree': 'Audition',\n                  'No formal education past high school': 'High School',\n                  'I prefer not to answer': 'Other',\n                  'Professional degree': 'Professional'}\n\nEDUCATION_ORDER = ['High School', 'Professional', 'Audition', 'Bachelor', 'Master', 'Doctor']\n\nfig, axs = plt.subplots(2, 3, figsize=(30,20));\nfig.suptitle('Education comparison', x=0.5, y=1.05)\n\nfor i, pair in enumerate(DATAFRAMES):\n    axs[i\/\/3][i-3*(i\/\/3)].set_title(TITLES[i])\n    plot_results(pair[0]['Q4'].map(EDUCATION_DICT), EDUCATION_ORDER, ax=axs[i\/\/3][i-3*(i\/\/3)], kind='bar', color=current_palette[0], rot=30);\n    plot_results(pair[1]['Q4'].map(EDUCATION_DICT), EDUCATION_ORDER, ax=axs[i\/\/3][i-3*(i\/\/3)], kind='bar', color=current_palette[1], rot=30);\n\nfig.legend([patches.Patch(facecolor=current_palette[color]) for color in range(2)], ['Slow respondents', 'Quick respondents'], loc='upper right');\n\nfig.tight_layout();","566f8fe2":"SIZE_ORDER = ['0-49 employees', '50-249 employees', '250-999 employees', '1000-9,999 employees', '10,000 or more employees']\n\nfig, axs = plt.subplots(2, 3, figsize=(30,20));\nfig.suptitle('Company size charts', x=0.5, y=1.05)\n\nfor i, pair in enumerate(DATAFRAMES):\n    axs[i\/\/3][i-3*(i\/\/3)].set_title(TITLES[i])\n    plot_results(pair[0]['Q20'], SIZE_ORDER, ax=axs[i\/\/3][i-3*(i\/\/3)], kind='bar', color=current_palette[0], rot=30);\n    plot_results(pair[1]['Q20'], SIZE_ORDER, ax=axs[i\/\/3][i-3*(i\/\/3)], kind='bar', color=current_palette[1], rot=30);\n\nfig.legend([patches.Patch(facecolor=current_palette[color]) for color in range(2)], ['Slow respondents', 'Quick respondents'], loc='upper right');\n\nfig.tight_layout();","fe235d3f":"DS_NUM_ORDER = ['0', '1-2', '3-4', '5-9', '10-14', '15-19', '20+']\n\nfig, axs = plt.subplots(2, 3, figsize=(30,20));\nfig.suptitle('Number of data scientists in a company', x=0.5, y=1.05)\n\nfor i, pair in enumerate(DATAFRAMES):\n    axs[i\/\/3][i-3*(i\/\/3)].set_title(TITLES[i])\n    plot_results(pair[0]['Q21'], DS_NUM_ORDER, ax=axs[i\/\/3][i-3*(i\/\/3)], kind='bar', color=current_palette[0], rot=30);\n    plot_results(pair[1]['Q21'], DS_NUM_ORDER, ax=axs[i\/\/3][i-3*(i\/\/3)], kind='bar', color=current_palette[1], rot=30);\n\nfig.legend([patches.Patch(facecolor=current_palette[color]) for color in range(2)], ['Slow respondents', 'Quick respondents'], loc='upper right');\n\nfig.tight_layout();","d19aa7f5":"ML_USE_ORDER = ['I do not know', \n                'No (we do not use ML methods)',\n                'We are exploring ML methods (and may one day put a model into production)',\n                'We use ML methods for generating insights (but do not put working models into production)',\n                'We recently started using ML methods (i.e., models in production for less than 2 years)',\n                'We have well established ML methods (i.e., models in production for more than 2 years)']\n\nML_USE_DICT = {x: x.split('(')[0].strip() for x in ML_USE_ORDER}\nML_USE_ORDER = [x.split('(')[0].strip() for x in ML_USE_ORDER]\n\nfig, axs = plt.subplots(1, 6, figsize=(30,20), sharey=True);\nfig.suptitle('Intensivity of ML use in company', x=0.5, y=1.05)\n\nfor i, pair in enumerate(DATAFRAMES):\n    axs[i].set_title(TITLES[i])\n    plot_results(pair[0]['Q22'].map(ML_USE_DICT), ML_USE_ORDER, ax=axs[i], kind='barh', color=current_palette[0]);\n    plot_results(pair[1]['Q22'].map(ML_USE_DICT), ML_USE_ORDER, ax=axs[i], kind='barh', color=current_palette[1]);\n\nfig.legend([patches.Patch(facecolor=current_palette[color]) for color in range(2)], ['Slow respondents', 'Quick respondents'], loc='upper right');\n\nfig.tight_layout();","252d19d7":"fig, axs = plt.subplots(2, 3, figsize=(30,20));\nfig.suptitle('Distribution of midrange salary', x=0.5, y=1.05)\n\nfor i, pair in enumerate(DATAFRAMES):\n    axs[i\/\/3][i-3*(i\/\/3)].set_title(TITLES[i])\n    plot_results(salary.loc[pair[0].index]['midrange'], None, ax=axs[i\/\/3][i-3*(i\/\/3)], kind='kde', color=current_palette[0]);\n    plot_results(salary.loc[pair[1].index]['midrange'], None, ax=axs[i\/\/3][i-3*(i\/\/3)], kind='kde', color=current_palette[1]);\n\nfig.legend([patches.Patch(facecolor=current_palette[color]) for color in range(2)], ['Slow respondents', 'Quick respondents'], loc='upper right');\n\nfig.tight_layout();","4e4d2870":"slow_median_all = salary.loc[slow_all.index]['midrange'].median()\nfast_median_all = salary.loc[fast_all.index]['midrange'].median()\nslow_mean_all = salary.loc[slow_all.index]['midrange'].mean()\nfast_mean_all = salary.loc[fast_all.index]['midrange'].mean()\n\nslow_median_india = salary.loc[slow_india.index]['midrange'].median()\nfast_median_india = salary.loc[fast_india.index]['midrange'].median()\nslow_mean_india = salary.loc[slow_india.index]['midrange'].mean()\nfast_mean_india = salary.loc[fast_india.index]['midrange'].mean()\n\nslow_median_usa = salary.loc[slow_usa.index]['midrange'].median()\nfast_median_usa = salary.loc[fast_usa.index]['midrange'].median()\nslow_mean_usa = salary.loc[slow_usa.index]['midrange'].mean()\nfast_mean_usa = salary.loc[fast_usa.index]['midrange'].mean()\n\nslow_median_brazil = salary.loc[slow_brazil.index]['midrange'].median()\nfast_median_brazil = salary.loc[fast_brazil.index]['midrange'].median()\nslow_mean_brazil = salary.loc[slow_brazil.index]['midrange'].mean()\nfast_mean_brazil = salary.loc[fast_brazil.index]['midrange'].mean()\n\nslow_median_japan = salary.loc[slow_japan.index]['midrange'].median()\nfast_median_japan = salary.loc[slow_brazil.index]['midrange'].median()\nslow_mean_japan = salary.loc[slow_japan.index]['midrange'].mean()\nfast_mean_japan = salary.loc[slow_brazil.index]['midrange'].mean()\n\nslow_median_russia = salary.loc[slow_russia.index]['midrange'].median()\nfast_median_russia = salary.loc[fast_russia.index]['midrange'].median()\nslow_mean_russia = salary.loc[slow_russia.index]['midrange'].mean()\nfast_mean_russia = salary.loc[fast_russia.index]['midrange'].mean()\n\ninfo_time['Mean slow salary - Mean quick salary'] = [np.round(slow_mean_all-fast_mean_all).astype(int), \n                                                     np.round(slow_mean_india-fast_mean_india).astype(int), \n                                                     np.round(slow_mean_usa-fast_mean_usa).astype(int), \n                                                     np.round(slow_mean_brazil-fast_mean_brazil).astype(int), \n                                                     np.round(slow_mean_japan-fast_mean_japan).astype(int),\n                                                     np.round(slow_mean_russia-fast_mean_russia).astype(int)]\n\ninfo_time['Median slow salary - Median quick salary'] = [int(slow_median_all-fast_median_all), \n                                                         int(slow_median_india-fast_median_india), \n                                                         int(slow_median_usa-fast_median_usa), \n                                                         int(slow_median_brazil-fast_median_brazil), \n                                                         int(slow_median_japan-fast_median_japan),\n                                                         int(slow_median_russia-fast_median_russia)]","6978b909":"info_time","99ce238f":"CC_SPENT_ORDER = ['$0 ($USD)', '$1-$99', '$100-$999', '$1000-$9,999', '$10,000-$99,999', '$100,000 or more ($USD)']\n\nfig, axs = plt.subplots(2, 3, figsize=(30,20));\nfig.suptitle('Money spent on cloud computing in the past 5 years', x=0.5, y=1.05)\n\nfor i, pair in enumerate(DATAFRAMES):\n    axs[i\/\/3][i-3*(i\/\/3)].set_title(TITLES[i])\n    plot_results(pair[0]['Q25'], CC_SPENT_ORDER, ax=axs[i\/\/3][i-3*(i\/\/3)], kind='bar', color=current_palette[0], rot=30);\n    plot_results(pair[1]['Q25'], CC_SPENT_ORDER, ax=axs[i\/\/3][i-3*(i\/\/3)], kind='bar', color=current_palette[1], rot=30);\n\nfig.legend([patches.Patch(facecolor=current_palette[color]) for color in range(2)], ['Slow respondents', 'Quick respondents'], loc='upper right');\n\nfig.tight_layout();","22191d50":"CODE_ECP_ORDER = ['I have never written code', '< 1 years', '1-2 years', '3-5 years', '5-10 years', '10-20 years', '20+ years']\n\nfig, axs = plt.subplots(1, 6, figsize=(30,20), sharey=True);\nfig.suptitle('Coding experience', x=0.5, y=1.05)\n\nfor i, pair in enumerate(DATAFRAMES):\n    axs[i].set_title(TITLES[i])\n    plot_results(pair[0]['Q6'], CODE_ECP_ORDER, ax=axs[i], kind='barh', color=current_palette[0]);\n    plot_results(pair[1]['Q6'], CODE_ECP_ORDER, ax=axs[i], kind='barh', color=current_palette[1]);\n\nfig.legend([patches.Patch(facecolor=current_palette[color]) for color in range(2)], ['Slow respondents', 'Quick respondents'], loc='upper right');\n\nfig.tight_layout();","60307440":"TPU_USAGE_ORDER = ['Never', 'Once', '2-5 times', '6-25 times', 'More than 25 times']\n\nfig, axs = plt.subplots(1, 6, figsize=(30,20), sharey=True);\nfig.suptitle('TPU usage (aka what Google is really interested in)', x=0.5, y=1.05)\n\nfor i, pair in enumerate(DATAFRAMES):\n    axs[i].set_title(TITLES[i])\n    plot_results(pair[0]['Q13'], TPU_USAGE_ORDER, ax=axs[i], color=current_palette[0], kind='barh');\n    plot_results(pair[1]['Q13'], TPU_USAGE_ORDER, ax=axs[i], color=current_palette[1], kind='barh');\n\nfig.legend([patches.Patch(facecolor=current_palette[color]) for color in range(2)], ['Slow respondents', 'Quick respondents'], loc='upper right');\n\nfig.tight_layout();","071562f8":"ML_CODE_EXP = ['I do not use machine learning methods', 'Under 1 year', '1-2 years', '2-3 years', '3-4 years', '4-5 years', '5-10 years', '10-20 years', '20 or more years']\n\nfig, axs = plt.subplots(1, 6, figsize=(30,20), sharey=True);\nfig.suptitle('Machine learning coding experience', x=0.5, y=1.05)\n\nfor i, pair in enumerate(DATAFRAMES):\n    axs[i].set_title(TITLES[i])\n    plot_results(pair[0]['Q15'], ML_CODE_EXP, ax=axs[i], color=current_palette[0], kind='barh');\n    plot_results(pair[1]['Q15'], ML_CODE_EXP, ax=axs[i], color=current_palette[1], kind='barh');\n\nfig.legend([patches.Patch(facecolor=current_palette[color]) for color in range(2)], ['Slow respondents', 'Quick respondents'], loc='upper right');\n\nfig.tight_layout();","e10f562e":"# ML experience","45955e12":"Small-mid sized companies becoming slower","eabf7abb":"# Education","3b600c4e":"![](https:\/\/assets.pokemon.com\/assets\/cms2\/img\/pokedex\/full\/079.png)","158dddce":"# Company size","681ae093":"# TPU usage","631a27d6":"Japan Masters are the fastest thinkers this year (sorry Brazilain PhDs)","481e7452":"# Intensity of ML use","038bda71":"In the end, we are all here to <s>machine<\/s> learn","fc5a7b85":"# Cloud computing","b06c55ed":"# Age","e4e086b1":"Males have more time to waste on surveys (Russian lost competive edge here)","6db7dd29":"Let Google analytics decide what to do with this info","bcc4e7f9":"# SLOW AND STEADY","8d133dd6":"Coding in kaggle competitions is overrated","31f699cf":"# Coding experience","0eca03ba":"The younger audience is generally faster in completing surveys (shocker)","225c396c":"The difference between median salaries suggests to take it slow and breathe","5fd6ab2b":"# Size of data science department","b3e1a760":"The fastest respondents are not even data scientists","22a954df":"We will compare respondents that spent more than time than the 3rd quartile (slow) and ones that spent less time than the 1st quartile (quick). I will take only top-5 countries in the number of responses.","84db2eb5":"And they do not know what their company is doing","5af1e41a":"# Gender","afb9c8b8":"This is rewrite of my original [2019 kernel](https:\/\/www.kaggle.com\/altprof\/slow-and-steady). All the outputs are made in the same manner, so they are completely comparable.","f4d3089c":"# Salary"}}