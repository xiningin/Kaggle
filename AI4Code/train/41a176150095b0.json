{"cell_type":{"2d6ff00f":"code","4046bf18":"code","d9d89001":"code","76828171":"code","d982eb64":"code","be49e57e":"code","849e59a9":"code","1fbc62a2":"code","463c696a":"code","9be42bfa":"code","7cf7c89a":"code","eb1254f6":"code","efe6aba7":"code","6c0110bd":"code","5f1954d3":"code","54a80db2":"code","67c67ab9":"code","5235c22b":"code","870bdc34":"code","1b52ca20":"code","d47f5f62":"code","5eb0a898":"code","eeba0d22":"code","9a8e2517":"code","85d2880d":"code","45e57b4e":"code","0f25f0ca":"code","72bd4c80":"code","89c2583d":"code","384034c7":"code","b949b41a":"code","7c69640f":"code","4a754a3f":"code","428d057c":"code","c8b984f0":"code","2157915d":"code","8e7a2782":"code","39e84c39":"code","f01d5d8c":"code","01c8310d":"code","ad3314b7":"code","7e657a2a":"code","8cc4d05f":"code","8f8ae14d":"code","c2cc39ff":"code","68995f26":"code","1cc0ca7d":"code","d280c486":"code","86a909ca":"code","35131d05":"code","97103674":"code","6584dc5c":"code","2e11f0eb":"code","ab1ee940":"code","cc7de3bc":"code","577fd56e":"code","82a965ab":"code","bcb86388":"code","4871c51e":"code","2fed3f22":"code","772d069b":"code","6c3f54f9":"code","83b581ce":"code","cdf46f86":"code","6ad65f7a":"code","ff34c128":"code","f84dcc03":"code","a9574059":"code","11fe7145":"code","c3d3978c":"code","e91fe6b9":"code","c0bae155":"code","57b8c7a6":"code","42df950c":"code","6561fa7b":"code","5e1a96aa":"code","c76ac127":"code","d9bd4839":"code","e8b53996":"code","464df6a8":"code","41ca3ef8":"code","71e4629c":"code","b8cef40b":"code","7e9d5842":"code","d009bfb9":"code","eee82a88":"code","d844d4ed":"code","d35fa3f0":"code","cc36450b":"code","1f240ac1":"code","3c42be26":"code","a8d7887a":"code","7bb960e4":"code","a96e1eff":"code","9b5849c8":"markdown","dd602336":"markdown","dd5fb6ad":"markdown","af70bf8a":"markdown","65220e85":"markdown","5ede727c":"markdown","4f6ec90e":"markdown","889297bc":"markdown","f765f232":"markdown","06eeee85":"markdown","f3d039bb":"markdown","8319b5fd":"markdown","d2dab05a":"markdown","49c11832":"markdown","61e7ee07":"markdown","7011dac6":"markdown","e8c10689":"markdown","fbc2ffc7":"markdown","b8ae96e9":"markdown","97cba2d9":"markdown","dea2092f":"markdown","ed237de5":"markdown","cb9f0d2c":"markdown","fc1148fc":"markdown","e4db26f5":"markdown","2027a525":"markdown","cfe8376f":"markdown","7a2b1a03":"markdown","6f1f54a0":"markdown","328cbbc6":"markdown","8268fb0a":"markdown"},"source":{"2d6ff00f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4046bf18":"data= pd. read_csv('\/kaggle\/input\/train-sjc\/train_SJC.csv')  # Loading the data\ndata.info()","d9d89001":"data.isnull().sum()     # checking the null values","76828171":"data.info()","d982eb64":"data.rename(columns={'Unnamed: 0': 'ClaimNumber','Unnamed: 1': 'DateTimeOfAccident',\n                    'Unnamed: 3': 'Age','Unnamed: 4': 'Gender','Unnamed: 5': 'MaritalStatus',\n                    'Unnamed: 6': 'DependentChildren','Unnamed: 8': 'WeeklyWages', \n                    'Unnamed: 9': 'PartTimeFullTime', 'Unnamed: 10': 'HoursWorkedPerWeek',\n                    'Unnamed: 12': 'ClaimDescription', 'Unnamed: 13': 'InitialIncurredCalimsCost',\n                    'Unnamed: 14': 'UltimateIncurredClaimCost'}, inplace = True) # renaming columns\n\n","be49e57e":"data.head()","849e59a9":"data.isnull().sum()     # checking the null values","1fbc62a2":"data_replace = data[data!='?']","463c696a":"data_replace['MaritalStatus']= data_replace['MaritalStatus'].fillna(data_replace['MaritalStatus'].mode()[0])\n","9be42bfa":"data_replace['WeeklyWages']= data_replace['WeeklyWages'].fillna(data_replace['WeeklyWages'].mode()[0])\n","7cf7c89a":"data_replace['HoursWorkedPerWeek']= data_replace['HoursWorkedPerWeek'].fillna(data_replace['HoursWorkedPerWeek'].mode()[0])","eb1254f6":"data.isnull().sum()","efe6aba7":"data_replace.isnull().sum()","6c0110bd":"df = data_replace \ndf.info()","5f1954d3":"#df['DateReported']=pd.to_datetime(df['DateReported'])","54a80db2":"df.info()","67c67ab9":"df.head()","5235c22b":"df.shape","870bdc34":"df.describe()","1b52ca20":"df['DependentChildren'].value_counts()","d47f5f62":"df['DependentsOther'].value_counts()","5eb0a898":"num_df=df.select_dtypes(include=[float,int])","eeba0d22":"cat_df=df.select_dtypes(exclude=[float,int])","9a8e2517":"num_df","85d2880d":"cat_df.head()","45e57b4e":"#Descrpitive statistics\nnum_df.describe()","0f25f0ca":"cat_df.describe()  #categorical variables","72bd4c80":"import pandas as pd # Data Analytical library\nimport numpy as np # Fast Linear Alegbra \nimport matplotlib.pyplot as plt # Visulizations\nimport seaborn as sns # Statistical Viz","89c2583d":"sns.boxplot(x=df['DaysWorkedPerWeek'])","384034c7":"plt.figure(figsize=(12,10))\nsns.countplot(x='Age',hue='Gender',data=df)\nplt.title('Dependent Children')","b949b41a":"plt.figure(figsize=(12,10))\ndf['Gender'].value_counts().plot.bar()\nplt.title('Gender Count')","7c69640f":"sns.catplot(x= df['Gender'], y=df['DaysWorkedPerWeek'],jitter=False, data=df)","4a754a3f":"plt.figure(figsize=(12,10))\nsns.countplot(x='DaysWorkedPerWeek',hue='Gender',data=df)\nplt.title('DaysWorkedPerWeek')","428d057c":"plt.figure(figsize=(12,10))\nsns.countplot(x='MaritalStatus',hue='Gender',data=df)\nplt.title('MaritalStatus')","c8b984f0":"plt.figure(figsize=(12,10))\nsns.barplot(x = df['PartTimeFullTime'], y= df['DaysWorkedPerWeek'], data = df)\nplt.title('Working Status')","2157915d":"plt.figure(figsize=(12,10))\nsns.countplot(x='PartTimeFullTime',hue='Gender',data=df)\nplt.title('Working status')","8e7a2782":"min_value = df['Age'].min()\nmax_value = df['Age'].max()\nprint(min_value)\nprint(max_value)","39e84c39":"# Binning\n\n#df['Age_bin']=pd.cut(df['Age'],bins=[10,20,40,60,80],labels=['Youth','MiddleAge','Old','VeryOld'], \n                 #include_lowest = True)","f01d5d8c":"#df['Age_bin']","01c8310d":"df.apply(pd.Series.nunique)","ad3314b7":"df.isnull().sum()","7e657a2a":"df.info()","8cc4d05f":"df.plot.box(figsize=(15,6))","8f8ae14d":"sns.catplot(data=df,x='DaysWorkedPerWeek', col='Gender',kind='box')","c2cc39ff":"missing = df.isnull().sum()\nprint(missing[missing > 0])  # checking if there is missing values. ie, if the sum>0 then there is missing values\n","68995f26":"exp_reg=df.columns[df.isnull().sum()>=0] # taking datas without null values ","1cc0ca7d":"df_withval=df[exp_reg] # taking datas with values","d280c486":"df_withval.drop('ClaimNumber',axis=1,inplace=True)\n\ndf_withval.drop('ClaimDescription',axis=1,inplace=True)","86a909ca":"df_withval.info()","35131d05":"import sklearn.preprocessing as pre    # importing packages\nimport sklearn.model_selection as ms\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error,r2_score","97103674":"#Calling label encoder\nle = pre.LabelEncoder()","6584dc5c":"#List of variables that needs to be transformed\nlist_df=['DateTimeOfAccident','DateReported','Gender','MaritalStatus','PartTimeFullTime']","2e11f0eb":"for x in list_df:\n    df[x]= le.fit_transform(df[x])","ab1ee940":"df_withval.info()","cc7de3bc":"df_ml = df_withval[list_df]","577fd56e":"df_test=df_ml.copy # copying it","82a965ab":"# Data Normalisation\nmin_max=pre.minmax_scale","bcb86388":"#df_test=min_max(df_ml.values)","4871c51e":"#df_Norm=pd.DataFrame(data=df_test, columns=df_ml.columns.to_list())\n#df_Norm.head()","2fed3f22":"import sklearn.model_selection as ms","772d069b":"#features=df_Norm.drop('UltimateIncurredClaimCost',axis=1)\n#outcome=df_Norm['UltimateIncurredClaimCost']","6c3f54f9":"df_withval.select_dtypes(include='object').columns.tolist()","83b581ce":"#['DateTimeOfAccident','DateReported','Gender','MaritalStatus','PartTimeFullTime'] are the columns being transformed","cdf46f86":"# data transformation\nle=pre.LabelEncoder()\nfor x in df_withval.select_dtypes(include='object').columns.tolist():\n    df_withval[x]=le.fit_transform(df_withval[x])","6ad65f7a":"pre.OrdinalEncoder()","ff34c128":"#\ndf_withval.info()","f84dcc03":"df_withval.columns","a9574059":"# selecting the features\nfeatures = ['DateTimeOfAccident', 'DateReported', 'Age', 'Gender', 'MaritalStatus',\n       'DependentChildren', 'DependentsOther', 'WeeklyWages',\n       'PartTimeFullTime', 'HoursWorkedPerWeek', 'DaysWorkedPerWeek',\n       'InitialIncurredCalimsCost']\nX = df_withval[features]\nY = df_withval['UltimateIncurredClaimCost']","11fe7145":"x_train,x_test,y_train,y_test=ms.train_test_split(X,Y,test_size=0.3,random_state=1234)","c3d3978c":"x_train.shape,x_test.shape,y_train.shape,y_test.shape","e91fe6b9":"#model initialisation\nregression_model = LinearRegression()\n# fitting the model\nregression_model.fit(x_train, y_train)\n\ny_predicted = regression_model.predict(x_test)","c0bae155":"# predicted values\ny_predicted","57b8c7a6":"regression_model.score(x_train,y_train)","42df950c":"test_data = pd.read_csv('\/kaggle\/input\/machine-learning-24-hrs-hackathon\/Test_SJC.csv')","6561fa7b":"test_data.info()","5e1a96aa":"test_data.isnull().sum()","c76ac127":"data_replace1 = test_data[test_data!='?']","d9bd4839":"#replacing the null values\ndata_replace1['MaritalStatus']= data_replace1['MaritalStatus'].fillna(data_replace1['MaritalStatus'].mode()[0])","e8b53996":"test_data.info()","464df6a8":"#dropping the column as we did with train dataset\ntest_data.drop('ClaimNumber',axis=1,inplace=True)\n\ntest_data.drop('ClaimDescription',axis=1,inplace=True)","41ca3ef8":"test_data.info()","71e4629c":"data_replace1.info()","b8cef40b":"import sklearn.preprocessing as pre    # importing packages\nimport sklearn.model_selection as ms","7e9d5842":"data_replace1.select_dtypes(include='object').columns.tolist()","d009bfb9":"# data transformation\nle=pre.LabelEncoder()\nfor x in data_replace1.select_dtypes(include='object').columns.tolist():\n    data_replace1[x]=le.fit_transform(data_replace1[x])","eee82a88":"pre.OrdinalEncoder()","d844d4ed":"data_replace1.info()","d35fa3f0":"# feature selection\nfeatures = ['DateTimeOfAccident', 'DateReported', 'Age', 'Gender', 'MaritalStatus',\n       'DependentChildren', 'DependentsOther', 'WeeklyWages',\n       'PartTimeFullTime', 'HoursWorkedPerWeek', 'DaysWorkedPerWeek',\n       'InitialIncurredCalimsCost']\nnew_X = data_replace1[features]\n\n","cc36450b":"x_train,x_test,y_train,y_test=ms.train_test_split(X,Y,test_size=0.3,random_state=1234)","1f240ac1":"regression_model.predict(new_X)","3c42be26":"sample = pd.read_csv('\/kaggle\/input\/machine-learning-24-hrs-hackathon\/sample_submission.csv')","a8d7887a":"sample.head()\n\n","7bb960e4":"# changing the column data to predicted values\nsample['UltimateIncurredClaimCost'] = regression_model.predict(new_X)","a96e1eff":"#making it into a csv file\nsample.to_csv('submission.csv', index= False)","9b5849c8":"-------------------------------------------------","dd602336":"## Uploading Sample csv","dd5fb6ad":"## The Count of Claimers(Male,Female, Unknown) with respect to the Days worked per week","af70bf8a":"## Uploading Test Data","65220e85":"### Renaming the column names ","5ede727c":"From the above graph we can conclude that the more number of claimers worked 5 days in a week and the number of males are more when compared to females","4f6ec90e":"## The Count of Claimers with respect to their Marital Status","889297bc":"## Doing Label encoding on test datas ","f765f232":"### Data Normalisation (minmax scaling)","06eeee85":"### Loading Data","f3d039bb":"# EDA ( Exploratory Data Analysis)","8319b5fd":"### Binning the Variable Age","d2dab05a":"> - Since the task is to predict the values, linear regression has been choosen. linear regression can make     predictions on continous, real or numeric variables.\n> - Linear Regression algorithm shows linear relationship between a dependent and more inependent variables.","49c11832":"### Replacing the missing values","61e7ee07":"from the baove plot we can understand that most of our claimers were full timers and worked 5 days a week","7011dac6":"## Working Status(full time,part time) of Claimers wrt Days worked per week","e8c10689":"The above data tells us that most of the claimers doesn't have dependent children","fbc2ffc7":"Here after loading the test data we follow the same steps done in train data","b8ae96e9":"## Count of Claimers based on their working status","97cba2d9":"## Model Building Using Linear Regression","dea2092f":"### Data Cleaning and Pre processing\n> - identifying the null value columns\n> - replacing null values with appropriate values\n> - renaming columns\n ","ed237de5":"### Outlier Analysis","cb9f0d2c":"#### Label Encoding","fc1148fc":"From the above graph we can conclude that most of our claimers are unmarried and in that most of them are male","e4db26f5":"### Changing the datatype of DateReported column","2027a525":"From the above plot we can infer that most of our claimers are male","cfe8376f":"## Count of Claimers ( Male,Female and Unknown) ","7a2b1a03":"### Droping Columns ClaimNumber, ClaimDescription","6f1f54a0":"**PROBLEM STATEMENT** : To predict the Actuarial loss. The challenge is to predict Workers Compensation                             claims using the realistic data\n> Actuarial gains or losses: refers to the differences between an employer\u2019s actual pension payments relative to the expected payments. When the employer\u2019s payments are higher than expected, it is referred to as an actuarial loss.","328cbbc6":"## Encoding the Data","8268fb0a":"### Doing Label encoding on datas without missing values"}}