{"cell_type":{"717fec98":"code","6fbb1152":"code","3a00f039":"code","65216d24":"code","213cb594":"code","25477b7c":"code","48cda820":"code","be994843":"code","d0b3e9c0":"code","74043402":"code","4206b48c":"code","f3bcc28d":"code","1b72aa55":"code","e339f528":"code","0564a953":"code","c6768593":"code","d9a0a5fd":"code","93375c86":"code","4adf95e2":"code","9ba4f761":"code","6db7cca9":"code","19bd27d0":"code","76de5637":"code","0b0ece8e":"code","d23dfa52":"code","e38f4193":"code","7d74274b":"code","23945bb9":"code","be1e080b":"code","63f438ee":"code","e86a9653":"code","ceeebff8":"code","99ae1131":"code","d794252c":"code","9f9e7e7f":"code","06d93537":"code","91126db8":"code","5cf32162":"code","af9549fd":"code","b2f5be5d":"code","63310190":"code","dd30829b":"code","88250574":"code","8ecb8c83":"code","d541ba84":"code","6dee96dc":"code","7a0affbc":"code","ae46cd92":"code","9318326e":"code","ee7878e8":"code","decf7f98":"code","1bea3a6f":"code","ad4685c8":"code","ddbd792d":"code","1324ced0":"code","78d06e47":"code","ef62a54a":"code","3b685258":"code","b9ff1b5a":"code","17b5d23c":"code","de665c94":"code","a89b4f64":"code","ae006efc":"code","a427341c":"code","0314f932":"code","51c77060":"code","519f4a54":"code","995e1995":"code","5d02ff91":"code","f54a1e3a":"code","04515c5b":"code","780a8f2d":"markdown","697d2689":"markdown","6ac6577c":"markdown","89e95e3b":"markdown","94fb2609":"markdown","be1de1e1":"markdown","578c9c5d":"markdown","7c099a82":"markdown","5ee731f0":"markdown","72049793":"markdown","0b49c69f":"markdown","217b2ae3":"markdown","c3d775f8":"markdown","812b603a":"markdown","acc51d22":"markdown","44cf57ce":"markdown","e72007a8":"markdown","d85a58e8":"markdown","8a0dfcc9":"markdown","7d71bf90":"markdown","891d736b":"markdown","9c5a9a35":"markdown","0d7156db":"markdown","05549af3":"markdown","35935abd":"markdown","8f8bb3ae":"markdown","7a0d95cf":"markdown","470b6e19":"markdown","7a063e44":"markdown","ecc67265":"markdown","9fd38a66":"markdown","4e4d886e":"markdown","c9cf2c3b":"markdown","6418f214":"markdown","a48a0d2f":"markdown","0d5ac36c":"markdown","cb66e2ac":"markdown","868d21aa":"markdown","0717b094":"markdown","ca0192bd":"markdown","06d83fee":"markdown","0448b599":"markdown","a6db8241":"markdown","012ba891":"markdown","a331f0d6":"markdown","7c8d9a5c":"markdown","1c6fe719":"markdown","5f213876":"markdown","7c3aff0c":"markdown","7e8596f2":"markdown","f5b0b1e4":"markdown","fde474bb":"markdown","3105e45f":"markdown","f70128e2":"markdown","524b40b4":"markdown","0843c6df":"markdown","b718ab5e":"markdown","d1a7659e":"markdown","399a1dc5":"markdown","bba4fd2a":"markdown","1cfc30f9":"markdown"},"source":{"717fec98":"# data analysis and wrangling\nimport pandas as pd\nimport numpy as np\nimport random as rnd\nfrom pandas import Series,DataFrame\n# visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# machine learning\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import cross_val_score, KFold\nfrom sklearn import metrics\nfrom sklearn import preprocessing\nimport pandas_profiling as pp\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import GridSearchCV, train_test_split, PredefinedSplit\n\n\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","6fbb1152":"encoding_method = 2","3a00f039":"train_df = pd.read_csv('train.csv')\ntest_df = pd.read_csv('test.csv')\nmerge = [train_df, test_df]\nmerge_df = pd.concat([train_df, test_df])","65216d24":"print(train_df.columns.values)","213cb594":"# preview the data\ntrain_df.head()","25477b7c":"train_df.tail()","48cda820":"train_df.info()\nprint('_'*40)\ntest_df.info()","be994843":"train_df.describe()","d0b3e9c0":"train_df.describe(include=['O'])","74043402":"train_df[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)","4206b48c":"train_df[[\"Sex\", \"Survived\"]].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)","f3bcc28d":"train_df[[\"SibSp\", \"Survived\"]].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False)","1b72aa55":"train_df[[\"Parch\", \"Survived\"]].groupby(['Parch'], as_index=False).mean().sort_values(by='Survived', ascending=False)","e339f528":"train_df.head()","0564a953":"corrMatrix = train_df[['Pclass','Age','Sex','SibSp','Parch','Fare','Embarked']].corr()\nsns.heatmap(corrMatrix, annot=True)\nplt.show()","c6768593":"g = sns.FacetGrid(train_df, col='Survived')\ng.map(plt.hist, 'Age', bins=20)","d9a0a5fd":"grid = sns.FacetGrid(train_df, col='Survived', row='Pclass', size=2.2, aspect=1.6)\ngrid.map(plt.hist, 'Age', alpha=.5, bins=20)\ngrid.add_legend();","93375c86":"grid = sns.FacetGrid(train_df, row='Embarked', size=2.2, aspect=1.6)\ngrid.map(sns.pointplot, 'Pclass', 'Survived', 'Sex', palette='deep')\ngrid.add_legend()","4adf95e2":"grid = sns.FacetGrid(train_df, row='Embarked', col='Survived', size=2.2, aspect=1.6)\ngrid.map(sns.barplot, 'Sex', 'Fare', alpha=.5, ci=None)\ngrid.add_legend()","9ba4f761":"pp.ProfileReport(train_df, title = 'Pandas Profiling report of \"Train\" set', html = {'style':{'full_width': True}})","6db7cca9":"print(\"Before\", train_df.shape, test_df.shape, merge_df.shape, merge_df.shape)\n\ntrain_df = train_df.drop(['PassengerId','Ticket', 'Cabin'], axis=1)\ntest_df = test_df.drop(['Ticket', 'Cabin'], axis=1)\n# Cabin has a lot of NaN values, so it won't cause a remarkable impact on prediction\n\"After\", train_df.shape, test_df.shape, merge_df.shape, merge_df.shape","19bd27d0":"# Fare\n\n# only for test_df, since there is a missing \"Fare\" values\n#test_df[\"Fare\"].fillna(test_df[\"Fare\"].median(), inplace=True)\ntest_df['Fare'].fillna(test_df['Fare'].dropna().mean(), inplace=True)\n\n# convert from float to int\ntrain_df['Fare'] = train_df['Fare'].astype(int)\ntest_df['Fare']    = test_df['Fare'].astype(int)\n\n# get fare for survived & didn't survive passengers \nfare_not_survived = train_df[\"Fare\"][train_df[\"Survived\"] == 0]\nfare_survived     = train_df[\"Fare\"][train_df[\"Survived\"] == 1]\n\n# get average and std for fare of survived\/not survived passengers\navgerage_fare = DataFrame([fare_not_survived.mean(), fare_survived.mean()])\nstd_fare      = DataFrame([fare_not_survived.std(), fare_survived.std()])\n\n# plot\ntrain_df['Fare'].plot(kind='hist', figsize=(15,3),bins=100, xlim=(0,50))\n\navgerage_fare.index.names = std_fare.index.names = [\"Survived\"]\navgerage_fare.plot(yerr=std_fare,kind='bar',legend=False)","76de5637":"train_df['FareBand'] = pd.qcut(train_df['Fare'], 6)\ntrain_df[['FareBand', 'Survived']].groupby(['FareBand'], as_index=False).mean().sort_values(by='FareBand', ascending=True)","0b0ece8e":"def update_fare(data_df):\n    \n    data_df.loc[ data_df['Fare'] <= 7.91, 'Fare'] = 0\n    data_df.loc[(data_df['Fare'] > 7.91) & (data_df['Fare'] <= 14.454), 'Fare'] = 1\n    data_df.loc[(data_df['Fare'] > 14.454) & (data_df['Fare'] <= 31), 'Fare']   = 2\n    data_df.loc[ data_df['Fare'] > 31, 'Fare'] = 3\n    data_df['Fare'] = data_df['Fare'].astype(int)\n    \n    return data_df\n\ntrain_df = update_fare(train_df)\ntest_df = update_fare(test_df)","d23dfa52":"train_df.head(10)","e38f4193":"test_df.head(10)","7d74274b":"def cat_encode(data_df, method, col, prefix):\n    if (method == 1):   #label (simple) encoding\n        le = LabelEncoder()\n        data_df[col]= le.fit_transform(data_df[col])\n    elif (method == 2): #one-hot encoding\n        dummies_df  = pd.get_dummies(train_df[col], prefix=prefix)        \n        data_df = data_df.join(dummies_df)\n    \n    return data_df","23945bb9":"# Sex\n\n# As we see, children(age < ~16) on aboard seem to have a high chances for Survival.\n# So, we can classify passengers as males, females, and child\ndef get_person(passenger):\n    age,sex = passenger\n    return 'child' if age < 16 else sex\n    \ntrain_df['Person'] = train_df[['Age','Sex']].apply(get_person,axis=1)\ntest_df['Person']    = test_df[['Age','Sex']].apply(get_person,axis=1)\n\n# create dummy variables for Person column, & drop Male as it has the lowest average of survived passengers\n\ntrain_df = cat_encode(train_df, encoding_method, 'Person', prefix='Person')\ntest_df = cat_encode(test_df, encoding_method, 'Person', prefix='Person')\n\nfig, (axis1,axis2) = plt.subplots(1,2,figsize=(10,5))\n\n# sns.factorplot('Person',data=titanic_df,kind='count',ax=axis1)\nsns.countplot(x='Person', data=train_df, ax=axis1)\n\n# average of survived for each Person(male, female, or child)\nperson_perc = train_df[[\"Person\", \"Survived\"]].groupby(['Person'],as_index=False).mean()\nsns.barplot(x='Person', y='Survived', data=person_perc, ax=axis2, order=['male','female','child'])\n\ntrain_df.drop(['Person'],axis=1,inplace=True)\ntest_df.drop(['Person'],axis=1,inplace=True)","be1e080b":"freq_port = train_df.Embarked.dropna().mode()[0]\nfreq_port","63f438ee":"for dataset in merge:\n    dataset['Embarked'] = dataset['Embarked'].fillna(freq_port)\n    \ntrain_df[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean().sort_values(by='Survived', ascending=False)","e86a9653":"# Embarked\n\n# only in train_df, fill the two missing values with the most occurred value, which is \"S\".\ntrain_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"S\")\n\n# plot\nsns.factorplot('Embarked','Survived', data=train_df,size=4,aspect=3)\n\nfig, (axis1,axis2,axis3) = plt.subplots(1,3,figsize=(15,5))\n\n# sns.factorplot('Embarked',data=titanic_df,kind='count',order=['S','C','Q'],ax=axis1)\n# sns.factorplot('Survived',hue=\"Embarked\",data=titanic_df,kind='count',order=[1,0],ax=axis2)\nsns.countplot(x='Embarked', data=train_df, ax=axis1)\nsns.countplot(x='Survived', hue=\"Embarked\", data=train_df, order=[1,0], ax=axis2)\n\n# group by embarked, and get the mean for survived passengers for each value in Embarked\nembark_perc = train_df[[\"Embarked\", \"Survived\"]].groupby(['Embarked'],as_index=False).mean()\nsns.barplot(x='Embarked', y='Survived', data=embark_perc,order=['S','C','Q'],ax=axis3)\n\n# Either to consider Embarked column in predictions,\n# and remove \"S\" dummy variable, \n# and leave \"C\" & \"Q\", since they seem to have a good rate for Survival.\n\n# OR, don't create dummy variables for Embarked column, just drop it, \n# because logically, Embarked doesn't seem to be useful in prediction.\n\ntrain_df = cat_encode(train_df, encoding_method, 'Embarked', prefix='Embarked')\ntest_df = cat_encode(test_df, encoding_method, 'Embarked', prefix='Embarked')\n\ntrain_df.drop(['Embarked'], axis=1,inplace=True)\ntest_df.drop(['Embarked'], axis=1,inplace=True)","ceeebff8":"# Age \n\nfig, (axis1,axis2) = plt.subplots(1,2,figsize=(15,4))\naxis1.set_title('Original Age values - Titanic')\naxis2.set_title('New Age values - Titanic')\n\n# axis3.set_title('Original Age values - Test')\n# axis4.set_title('New Age values - Test')\n\n# get average, std, and number of NaN values in titanic_df\naverage_age_titanic   = train_df[\"Age\"].mean()\nstd_age_titanic       = train_df[\"Age\"].std()\ncount_nan_age_titanic = train_df[\"Age\"].isnull().sum()\n\n# get average, std, and number of NaN values in test_df\naverage_age_test   = test_df[\"Age\"].mean()\nstd_age_test       = test_df[\"Age\"].std()\ncount_nan_age_test = test_df[\"Age\"].isnull().sum()\n\n# generate random numbers between (mean - std) & (mean + std)\nrand_1 = np.random.randint(average_age_titanic - std_age_titanic, average_age_titanic + std_age_titanic, size = count_nan_age_titanic)\nrand_2 = np.random.randint(average_age_test - std_age_test, average_age_test + std_age_test, size = count_nan_age_test)\n\n# plot original Age values\n# NOTE: drop all null values, and convert to int\ntrain_df['Age'].dropna().astype(int).hist(bins=70, ax=axis1)\n# test_df['Age'].dropna().astype(int).hist(bins=70, ax=axis1)\n\n# fill NaN values in Age column with random values generated\ntrain_df[\"Age\"][np.isnan(train_df[\"Age\"])] = rand_1\ntest_df[\"Age\"][np.isnan(test_df[\"Age\"])] = rand_2\n\n# convert from float to int\ntrain_df['Age'] = train_df['Age'].astype(int)\ntest_df['Age']    = test_df['Age'].astype(int)\n        \n# plot new Age Values\ntrain_df['Age'].hist(bins=70, ax=axis2)\n#test_df['Age'].hist(bins=70, ax=axis4)","99ae1131":"data = [train_df, test_df]\n\nfor dataset in data:\n    mean = train_df[\"Age\"].mean()\n    std = test_df[\"Age\"].std()\n    is_null = dataset[\"Age\"].isnull().sum()\n    # compute random numbers between the mean, std and is_null\n    rand_age = np.random.randint(mean - std, mean + std, size = is_null)\n    # fill NaN values in Age column with random values generated\n    age_slice = dataset[\"Age\"].copy()\n    age_slice[np.isnan(age_slice)] = rand_age\n    dataset[\"Age\"] = age_slice\n    dataset[\"Age\"] = train_df[\"Age\"].astype(int)\n    \ntrain_df[\"Age\"].isnull().sum()","d794252c":"# .... continue with plot Age column\n\n# peaks for survived\/not survived passengers by their age\nfacet = sns.FacetGrid(train_df, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train_df['Age'].max()))\nfacet.add_legend()\n\n# average survived passengers by age\nfig, axis1 = plt.subplots(1,1,figsize=(18,4))\naverage_age = train_df[[\"Age\", \"Survived\"]].groupby(['Age'],as_index=False).mean()\nsns.barplot(x='Age', y='Survived', data=average_age)","9f9e7e7f":"def extract_title(data_df):\n    data_df['Title'] = data_df.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n    return data_df\n\ntrain_df = extract_title(train_df)\ntest_df = extract_title(test_df)\npd.crosstab(train_df['Title'], train_df['Sex'])","06d93537":"def update_title(data_df):\n    data_df['Title'] = data_df['Title'].replace(['Lady', 'Countess','Capt', 'Col',\\\n \t'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n\n    data_df['Title'] = data_df['Title'].replace('Mlle', 'Miss')\n    data_df['Title'] = data_df['Title'].replace('Ms', 'Miss')\n    data_df['Title'] = data_df['Title'].replace('Mme', 'Mrs')\n    \n    return data_df\n\ntrain_df = update_title(train_df)\ntest_df = update_title(test_df)\ntrain_df[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()","91126db8":"title_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Rare\": 5}\ndef map_title(data_df):\n    \n    data_df['Title'] = data_df['Title'].map(title_mapping)\n    data_df['Title'] = data_df['Title'].fillna(0)\n    \n    return data_df\n\ntrain_df = map_title(train_df)\ntest_df = map_title(test_df)\ntrain_df.head()","5cf32162":"grid = sns.FacetGrid(train_df, row='Pclass', col='Sex', size=2.2, aspect=1.6)\ngrid.map(plt.hist, 'Age', alpha=.5, bins=20)\ngrid.add_legend()","af9549fd":"def update_age(dataset):\n    \n    for i in range(0, 2):\n        for j in range(0, 3):\n            guess_df = dataset[(dataset['Sex'] == i) & \\\n                                  (dataset['Pclass'] == j+1)]['Age'].dropna()\n            age_guess = guess_df.median()\n\n            # Convert random age float to nearest .5 age\n            guess_ages[i,j] = int( age_guess\/0.5 + 0.5 ) * 0.5\n            \n    for i in range(0, 2):\n        for j in range(0, 3):\n            dataset.loc[ (dataset.Age.isnull()) & (dataset.Sex == i) & (dataset.Pclass == j+1),\\\n                    'Age'] = guess_ages[i,j]\n\n    dataset['Age'] = dataset['Age'].astype(int)\n    \n    return dataset\n\ntrain_df['Sex'] = train_df['Sex'].map( {'female': 1, 'male': 0} ).astype(int)\ntest_df['Sex'] = test_df['Sex'].map( {'female': 1, 'male': 0} ).astype(int)\n\n#train_df.head()\n\nguess_ages = np.zeros((2,3))\nguess_ages\n\ntrain_df = update_age(train_df)\ntest_df = update_age(test_df)\n\ntrain_df.head()","b2f5be5d":"train_df['AgeBand'] = pd.cut(train_df['Age'], 5)\ntrain_df[['AgeBand', 'Survived']].groupby(['AgeBand'], as_index=False).mean().sort_values(by='AgeBand', ascending=True)","63310190":"def update_age_rep(dataset):\n    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n    dataset.loc[ dataset['Age'] > 64, 'Age']\n    return dataset\n\ntrain_df = update_age_rep(train_df)\ntest_df = update_age_rep(test_df)\n\ntrain_df.head()","dd30829b":"train_df = train_df.drop(['AgeBand'], axis=1)\ntrain_df.head()","88250574":"# Pclass\n\n# sns.factorplot('Pclass',data=titanic_df,kind='count',order=[1,2,3])\nsns.factorplot('Pclass','Survived',order=[1,2,3], data=train_df,size=5)\nencoding_method = 2\ntrain_df = cat_encode(train_df, encoding_method, 'Pclass', prefix='Pclass')\ntest_df = cat_encode(test_df, encoding_method, 'Pclass', prefix='Pclass')\n","8ecb8c83":"train_df.head()\n","d541ba84":"# Family\n\n# Instead of having two columns Parch & SibSp, \n# we can have only one column represent if the passenger had any family member aboard or not,\n# Meaning, if having any family member(whether parent, brother, ...etc) will increase chances of Survival or not.\ndef is_family(data_df):\n    data_df['Family'] =  data_df[\"Parch\"] + data_df[\"SibSp\"]\n    data_df['Family'].loc[data_df['Family'] > 0] = 1\n    data_df['Family'].loc[data_df['Family'] == 0] = 0\n    return data_df\n\ntrain_df = is_family(train_df)\ntest_df = is_family(test_df)\n\n# drop Parch & SibSp\ntrain_df = train_df.drop(['SibSp','Parch'], axis=1)\ntest_df    = test_df.drop(['SibSp','Parch'], axis=1)\n\n# plot\nfig, (axis1,axis2) = plt.subplots(1,2,sharex=True,figsize=(10,5))\n\n# sns.factorplot('Family',data=titanic_df,kind='count',ax=axis1)\nsns.countplot(x='Family', data=train_df, order=[1,0], ax=axis1)\n\n# average of survived for those who had\/didn't have any family member\nfamily_perc = train_df[[\"Family\", \"Survived\"]].groupby(['Family'],as_index=False).mean()\nsns.barplot(x='Family', y='Survived', data=family_perc, order=[1,0], ax=axis2)\n\naxis1.set_xticklabels([\"With Family\",\"Alone\"], rotation=0)","6dee96dc":"#train_df['FamilySize'] = train_df['SibSp'] + train_df['Parch'] + 1\n#test_df['FamilySize'] = test_df['SibSp'] + test_df['Parch'] + 1\n#train_df[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=False).mean().sort_values(by='Survived', ascending=False)","7a0affbc":"def is_alone(dataset):\n    dataset['IsAlone'] = 0\n    dataset.loc[dataset['Family'] == 1, 'IsAlone'] = 1\n    return dataset\n\ntrain_df = is_alone(train_df)\ntest_df = is_alone(test_df)\ntrain_df[['IsAlone', 'Survived']].groupby(['IsAlone'], as_index=False).mean()","ae46cd92":"test_df","9318326e":"train_df.head()","ee7878e8":"train_df['Age*Class'] = train_df.Age * train_df.Pclass\ntest_df['Age*Class'] = test_df.Age * test_df.Pclass\n\ntrain_df.loc[:, ['Age*Class', 'Age', 'Pclass']].head(10)","decf7f98":"train_df.head()","1bea3a6f":"#train_df = train_df.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)\n#test_df = test_df.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)\ntrain_df = train_df.drop(['Name','FareBand'], axis=1)\ntest_df = test_df.drop(['Name'], axis=1)\n\n#combine = [train_df, test_df]\n\n#train_df.head()","ad4685c8":"def prepare_sets(train_df, test_df):\n    # define training and testing sets\n    X_train = train_df.drop(\"Survived\", axis=1)\n    Y_train = train_df[\"Survived\"]\n    X_test  = test_df.drop(\"PassengerId\", axis=1).copy()\n    return X_train, Y_train, X_test\n\ndef data_split(X_train, Y_train, train_size=0.8):\n    X_train_train, X_train_val, y_train_train, y_train_val = train_test_split(X_train, Y_train, train_size=train_size, random_state = 2020)\n    split_index = [-1 if x in X_train_train.index else 0 for x in X_train.index]\n    return X_train_train, X_train_val, y_train_train, y_train_val\n    \n\ndef normalize(X_train, X_val, X_test):\n    sc = StandardScaler()\n    X_train_ = sc.fit_transform(X_train)\n    X_train.loc[:,:] = X_train_\n    if len(X_val) > 0:\n        X_val_ = sc.transform(X_val)\n        X_val.loc[:,:] = X_val_\n    X_test_ = sc.transform(X_test)\n    X_test.loc[:,:] = X_test_\n    \n    return X_train, X_val, X_test\n\ndef outliers_modified_z_score(ys):\n    threshold = 3.5\n\n    median_y = np.median(ys)\n    median_absolute_deviation_y = np.median([np.abs(y - median_y) for y in ys])\n    modified_z_scores = [0.6745 * (y - median_y) \/ median_absolute_deviation_y\n                         for y in ys]\n    return np.where(np.abs(modified_z_scores) > threshold)\n\ndef outliers_iqr(ys):\n    quartile_1, quartile_3 = np.percentile(ys, [25, 75])\n    iqr = quartile_3 - quartile_1\n    lower_bound = quartile_1 - (iqr * 1.5)\n    upper_bound = quartile_3 + (iqr * 1.5)\n    return np.where((ys > upper_bound) | (ys < lower_bound))\n\ndef run_classificationKFold(classifier, X_train, Y_train, X_test, n_estimators=100):\n    classifiers = ['LogisticRegression','RandomForest','SVC','XGBClassifier','KNeighbors','GaussianNB','DecisionTree']\n    if (classifier == 1):\n       # Logistic Regression\n        clf = LogisticRegression()\n    elif (classifier == 2):\n        # Random Forest\n        clf = RandomForestClassifier(n_estimators=n_estimators)\n    elif (classifier == 3):\n        # SVC\n        clf = SVC(kernel = 'rbf', random_state = 0)\n    elif (classifier == 4):\n        clf = XGBClassifier()\n    elif (classifier == 5):\n        clf = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)\n    elif (classifier == 6):\n        clf = GaussianNB()\n    elif (classifier == 7):\n        clf = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)\n\n    kf = KFold(n_splits=10)\n    clf.fit(X_train, Y_train)\n    Y_pred = clf.predict(X_test)\n    cv_score = cross_val_score(clf, X_train, Y_train, cv=kf).mean()\n    score = clf.score(X_train, Y_train)\n    Y_train_pred = clf.predict(X_train)\n        \n    return clf,score, cv_score, Y_pred, Y_train_pred, classifiers\n\ndef run_classification(classifier, X_train, Y_train, X_test, Y_test, n_estimators=100):\n    classifiers = ['LogisticRegression','RandomForest','SVC','XGBClassifier','KNeighbors','GaussianNB','DecisionTree']\n    if (classifier == 1):\n       # Logistic Regression\n        clf = LogisticRegression()\n    elif (classifier == 2):\n        # Random Forest\n        clf = RandomForestClassifier(n_estimators=n_estimators)\n    elif (classifier == 3):\n        # SVC\n        clf = SVC(kernel = 'rbf', random_state = 0)\n    elif (classifier == 4):\n        clf = XGBClassifier()\n    elif (classifier == 5):\n        clf = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)\n    elif (classifier == 6):\n        clf = GaussianNB()\n    elif (classifier == 7):\n        clf = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)\n\n    clf.fit(X_train, Y_train)\n    Y_train_pred = clf.predict(X_train)\n    Y_test_pred = clf.predict(X_test)\n    train_score = clf.score(X_train, Y_train)\n    test_score = clf.score(X_test, Y_test)\n        \n    return clf, train_score, test_score, Y_train_pred, Y_test_pred, classifiers\n        ","ddbd792d":"# define data split\n\ntrain_size=0.8\nX_train, Y_train, X_test = prepare_sets(train_df, test_df)\nX_train_train, X_train_val, Y_train_train, Y_train_val = data_split(X_train, Y_train, train_size=train_size)\nX_train_train, X_train_val, X_test = normalize(X_train_train, X_train_val, X_test)","1324ced0":"#X_train, Y_train, X_test = prepare_sets(train_df, test_df)\n#clf, score, cv_score, Y_pred, Y_train_pred, classifiers = run_classification(2, X_train, Y_train, X_test)\nclf, train_score, val_score, Y_train_pred, Y_test_pred, classifiers = run_classification(2, X_train_train, Y_train_train, X_train_val, Y_train_val)\nprint(train_score, val_score)","78d06e47":"X_train.head()","ef62a54a":"for cl in X_train.columns:\n    a = outliers_modified_z_score(X_train[cl])\n    b = outliers_iqr(X_train[cl])\n    print(len(a), len(b))\n    print(a,b)","3b685258":"import seaborn as sns\nsns.set_theme(style=\"whitegrid\")\ntips = sns.load_dataset(\"tips\")\nax = sns.boxplot(x=X_train['Age*Class'])","b9ff1b5a":"b","17b5d23c":"# Ensemble\n#print(X_train_train.shape, X_train_val.shape)\n\nX_train_train, X_train_val, X_test = normalize(X_train_train, X_train_val, X_test)\nclassifiers = ['LogisticRegression','RandomForest','SVC','XGBClassifier','KNeighbors','GaussianNB','DecisionTree']\nY_train_train_pred = pd.DataFrame(columns = classifiers)\nY_train_val_pred = pd.DataFrame(columns = classifiers)\nY_test_pred = pd.DataFrame(columns = classifiers)\nfor i in range(1,8):\n    print(classifiers[i-1])\n    clf, train_score, val_score, Y_train_train_pred.iloc[:,i-1], Y_train_val_pred.iloc[:,i-1], classifiers = run_classification(i, X_train_train, Y_train_train, X_train_val, Y_train_val)\n\nY_train_train_pred['Majority'] = Y_train_train_pred.mode(axis=1)[0]\nY_train_val_pred['Majority'] = Y_train_val_pred.mode(axis=1)[0]\nprint('Train: Ensemble score: ',metrics.precision_score(Y_train_train, Y_train_train_pred['Majority'], average='macro'))\nprint('Val: Ensemble score: ',metrics.precision_score(Y_train_val, Y_train_val_pred['Majority'], average='macro'))","de665c94":"## check which classifiers corresponded most to the majority voting- and use them\nclassifiers_rank_train = {}\nclassifiers_rank_val = {}\ni = 0\nfor cl in classifiers:\n    classifiers_rank_train[cl]= 100*(Y_train_train_pred[cl] == Y_train_train_pred['Majority']).sum()\/Y_train_train_pred.shape[0]\n    classifiers_rank_val[cl]= 100*(Y_train_val_pred[cl] == Y_train_val_pred['Majority']).sum()\/Y_train_val_pred.shape[0]\n    i += 1  \nprint(classifiers_rank_train)\nprint(classifiers_rank_val)","a89b4f64":"param_grid = [\n  {'n_estimators': [1, 10, 100, 1000, 10000]}\n ]\n# Create a list where train data indices are -1 and validation data indices are 0\nsplit_index = [-1 if x in X_train_train.index else 0 for x in X_train.index]\n\n# Use the list to create PredefinedSplit\npds = PredefinedSplit(test_fold = split_index)\nsearch = GridSearchCV(clf, cv=pds, param_grid=param_grid) # refit=False)\nsearch.fit(X_train, Y_train)\nprint(\"Best parameters set found on development set:\")\nprint()\nprint(search.best_params_)\nprint()\nprint(\"Grid scores on development set:\")\nprint()\nmeans = search.cv_results_['mean_test_score']\nstds = search.cv_results_['std_test_score']\nfor mean, std, params in zip(means, stds, search.cv_results_['params']):\n    print(\"%0.3f (+\/-%0.03f) for %r\"\n          % (mean, std * 2, params))\nprint()","ae006efc":"#EX_train, Y_train, X_test = prepare_sets(train_df, test_df)\n#clf, score, cv_score, Y_pred = run_classification(2, X_train, Y_train, X_test, search.best_params_.get('n_estimators'))\n#print(score,cv_score)","a427341c":"def plot_feature_importance(importances, featureList):\n    print(\"Features sorted by their score:\")\n    top_n = 10\n    feat_imp = pd.DataFrame({'importance': importances})\n    feat_imp['feature'] = featureList\n    feat_imp.sort_values(by='importance', ascending=False, inplace=True)\n    if (top_n < feat_imp.shape[0]):\n        feat_imp = feat_imp.iloc[:top_n]\n\n    print(feat_imp)\n    feat_imp.sort_values(by='importance', inplace=True)\n\n    plt.figure()\n    plt.title('Feature Importance')\n    plt.barh(range(feat_imp.shape[0]), feat_imp['importance'], color='b', align='center')\n    plt.yticks(range(feat_imp.shape[0]), feat_imp['feature'])\n\n    plt.xlabel('Relative Importance')\n    plt.savefig('feature_importance.png')\n    plt.show()\n\n    return\n\n\nplot_feature_importance(clf.feature_importances_, X_train.columns)","0314f932":"models = pd.DataFrame({\n    'Model': ['Logistic Regression', 'Random Forest'],\n    'Score': [acc_log, acc_random_forest]})\nsorted_model=models.sort_values(by='Score', ascending=False)\nsorted_model","51c77060":"plt.figure(figsize=(20,10))\nfig = plt.bar(sorted_model['Model'], sorted_model['Score'],color='aqua')\nplt.grid()\nplt.show()","519f4a54":"submission = pd.DataFrame({\n        \"PassengerId\": test_df[\"PassengerId\"],\n        \"Survived\": Y_test_pred\n    })\nsubmission.to_csv('submission.csv', index=False)","995e1995":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom autofeat import FeatureSelector, AutoFeatRegressor\n\n%matplotlib inline\n%load_ext autoreload\n%autoreload 2","5d02ff91":"fsel = FeatureSelector(verbose=1)\nnew_X = fsel.fit_transform(X_train_train, Y_train_train)\ncols = new_X.columns\nprint(new_X.columns)","f54a1e3a":"clf, train_score, val_score, Y_train_pred, Y_test_pred, classifiers = run_classification(2, X_train_train[cols], Y_train_train, X_train_val[cols], Y_train_val)\nprint(train_score, val_score)","04515c5b":"# autofeat with different number of feature engineering steps\n# 3 are perfect\nfor steps in range(5):\n    np.random.seed(55)\n    print(\"### AutoFeat with %i feateng_steps\" % steps)\n    afreg = AutoFeatRegressor(verbose=1, feateng_steps=steps)\n    df = afreg.fit_transform(X_train_train, Y_train_train)\n    r2 = afreg.score(X_train_train, Y_train_train)\n    print(\"## Final R^2: %.4f\" % r2)\n    plt.figure()\n    plt.scatter(afreg.predict(X_train_train), Y_train_train, s=2);\n    plt.title(\"%i FE steps (R^2: %.4f; %i new features)\" % (steps, r2, len(afreg.new_feat_cols_)))","780a8f2d":"## Analyze by visualizing data\n\nNow we can continue confirming some of our assumptions using visualizations for analyzing the data.\n\n### Correlating numerical features\n\nLet us start by understanding correlations between numerical features and our solution goal (Survived).\n\nA histogram chart is useful for analyzing continous numerical variables like Age where banding or ranges will help identify useful patterns. The histogram can indicate distribution of samples using automatically defined bins or equally ranged bands. This helps us answer questions relating to specific bands (Did infants have better survival rate?)\n\nNote that x-axis in historgram visualizations represents the count of samples or passengers.\n\n**Observations.**\n\n- Infants (Age <=4) had high survival rate.\n- Oldest passengers (Age = 80) survived.\n- Large number of 15-25 year olds did not survive.\n- Most passengers are in 15-35 age range.\n\n**Decisions.**\n\nThis simple analysis confirms our assumptions as decisions for subsequent workflow stages.\n\n- We should consider Age (our assumption classifying #2) in our model training.\n- Complete the Age feature for null values (completing #1).\n- We should band age groups (creating #3).","697d2689":"### Create new feature combining existing features\n\nWe can create a new feature for FamilySize which combines Parch and SibSp. This will enable us to drop Parch and SibSp from our datasets.","6ac6577c":"Convert the Fare feature to ordinal values based on the FareBand.","89e95e3b":"## Feature importance - random forest","94fb2609":"![](https:\/\/www.memecreator.org\/static\/images\/memes\/1598091.jpg)","be1de1e1":"## Classification Phase","578c9c5d":"Let us replace Age with ordinals based on these bands.","7c099a82":"### Completing a numerical continuous feature\n\nNow we should start estimating and completing features with missing or null values. We will first do this for the Age feature.\n\nWe can consider three methods to complete a numerical continuous feature.\n\n1. A simple way is to generate random numbers between mean and [standard deviation](https:\/\/en.wikipedia.org\/wiki\/Standard_deviation).\n\n2. More accurate way of guessing missing values is to use other correlated features. In our case we note correlation among Age, Gender, and Pclass. Guess Age values using [median](https:\/\/en.wikipedia.org\/wiki\/Median) values for Age across sets of Pclass and Gender feature combinations. So, median Age for Pclass=1 and Gender=0, Pclass=1 and Gender=1, and so on...\n\n3. Combine methods 1 and 2. So instead of guessing age values based on median, use random numbers between mean and standard deviation, based on sets of Pclass and Gender combinations.\n\nMethod 1 and 3 will introduce random noise into our models. The results from multiple executions might vary. We will prefer method 2.","5ee731f0":"**Which features are categorical?**\n\nThese values classify the samples into sets of similar samples. Within categorical features are the values nominal, ordinal, ratio, or interval based? Among other things this helps us select the appropriate plots for visualization.\n\n- Categorical: Survived, Sex, and Embarked. Ordinal: Pclass.\n\n**Which features are numerical?**\n\nWhich features are numerical? These values change from sample to sample. Within numerical features are the values discrete, continuous, or timeseries based? Among other things this helps us select the appropriate plots for visualization.\n\n- Continous: Age, Fare. Discrete: SibSp, Parch.","72049793":"## Age","0b49c69f":"We can also create an artificial feature combining Pclass and Age.","217b2ae3":"### Converting a categorical feature\n\nNow we can convert features which contain strings to numerical values. This is required by most model algorithms. Doing so will also help us in achieving the feature completing goal.\n\nLet us start by converting Sex feature to a new feature called Gender where female=1 and male=0.","c3d775f8":"We can not remove the AgeBand feature.","812b603a":"## Model, predict and solve\n\nNow we are ready to train a model and predict the required solution. There are 60+ predictive modelling algorithms to choose from. We must understand the type of problem and solution requirement to narrow down to a select few models which we can evaluate. Our problem is a classification and regression problem. We want to identify relationship between output (Survived or not) with other variables or features (Gender, Age, Port...). We are also perfoming a category of machine learning which is called supervised learning as we are training our model with a given dataset. With these two criteria - Supervised Learning plus Classification and Regression, we can narrow down our choice of models to a few. These include:\n\n- Logistic Regression\n- KNN or k-Nearest Neighbors\n- Support Vector Machines\n- Naive Bayes classifier\n- Decision Tree\n- Random Forrest\n- Perceptron\n- Artificial neural network\n- RVM or Relevance Vector Machine","acc51d22":"## References\n\nThis notebook has been created based on great work done solving the Titanic competition and other sources.\n\n- [A journey through Titanic](https:\/\/www.kaggle.com\/omarelgabry\/titanic\/a-journey-through-titanic)\n- [Getting Started with Pandas: Kaggle's Titanic Competition](https:\/\/www.kaggle.com\/c\/titanic\/details\/getting-started-with-random-forests)\n- [Titanic Best Working Classifier](https:\/\/www.kaggle.com\/sinakhorami\/titanic\/titanic-best-working-classifier)","44cf57ce":"**Which features contain blank, null or empty values?**\n\nThese will require correcting.\n\n- Cabin > Age > Embarked features contain a number of null values in that order for the training dataset.\n- Cabin > Age are incomplete in case of test dataset.\n\n**What are the data types for various features?**\n\nHelping us during converting goal.\n\n- Seven features are integer or floats. Six in case of test dataset.\n- Five features are strings (object).","e72007a8":"### Assumtions based on data analysis\n\nWe arrive at following assumptions based on data analysis done so far. We may validate these assumptions further before taking appropriate actions.\n\n**Correlating.**\n\nWe want to know how well does each feature correlate with Survival. We want to do this early in our project and match these quick correlations with modelled correlations later in the project.\n\n**Completing.**\n\n1. We may want to complete Age feature as it is definitely correlated to survival.\n2. We may want to complete the Embarked feature as it may also correlate with survival or another important feature.\n\n**Correcting.**\n\n1. Ticket feature may be dropped from our analysis as it contains high ratio of duplicates (22%) and there may not be a correlation between Ticket and survival.\n2. Cabin feature may be dropped as it is highly incomplete or contains many null values both in training and test dataset.\n3. PassengerId may be dropped from training dataset as it does not contribute to survival.\n4. Name feature is relatively non-standard, may not contribute directly to survival, so maybe dropped.\n\n**Creating.**\n\n1. We may want to create a new feature called Family based on Parch and SibSp to get total count of family members on board.\n2. We may want to engineer the Name feature to extract Title as a new feature.\n3. We may want to create new feature for Age bands. This turns a continous numerical feature into an ordinal categorical feature.\n4. We may also want to create a Fare range feature if it helps our analysis.\n\n**Classifying.**\n\nWe may also add to our assumptions based on the problem description noted earlier.\n\n1. Women (Sex=female) were more likely to have survived.\n2. Children (Age<?) were more likely to have survived. \n3. The upper-class passengers (Pclass=1) were more likely to have survived.","d85a58e8":"## Hyper-parameters tuning using GridSearch","8a0dfcc9":"### Quick completing and converting a numeric feature\n\nWe can now complete the Fare feature for single missing value in test dataset using mode to get the value that occurs most frequently for this feature. We do this in a single line of code.\n\nNote that we are not creating an intermediate new feature or doing any further analysis for correlation to guess missing feature as we are replacing only a single value. The completion goal achieves desired requirement for model algorithm to operate on non-null values.\n\nWe may also want round off the fare to two decimals as it represents currency.","7d71bf90":"![](https:\/\/i.pinimg.com\/originals\/02\/92\/48\/029248d83ed5ca6304d9515b89ff0ca7.jpg)","891d736b":"![](https:\/\/pics.esmemes.com\/sexiest-iceberg-ever-udhit-that-tmgtip-com-if-titanic-could-talk-63646295.png)","9c5a9a35":"## Sex","0d7156db":"## Family","05549af3":"![](https:\/\/cdn.images.express.co.uk\/img\/dynamic\/80\/590x\/The-Titanic-sunk-in-the-Atlantic-Ocean-in-1912-1231198.jpg?r=1579642201864)","35935abd":"![](https:\/\/pics.conservativememes.com\/exit-titanic-uextremopolis-the-lceberg-heave-ho-the-ship-is-63789220.png)","8f8bb3ae":"### Completing a categorical feature\n\nEmbarked feature takes S, Q, C values based on port of embarkation. Our training dataset has two missing values. We simply fill these with the most common occurance.","7a0d95cf":"## Acquire data\n\nThe Python Pandas packages helps us work with our datasets. We start by acquiring the training and testing datasets into Pandas DataFrames. We also combine these datasets to run certain operations on both datasets together.","470b6e19":"### Correlating categorical features\n\nNow we can correlate categorical features with our solution goal.\n\n**Observations.**\n\n- Female passengers had much better survival rate than males. Confirms classifying (#1).\n- Exception in Embarked=C where males had higher survival rate. This could be a correlation between Pclass and Embarked and in turn Pclass and Survived, not necessarily direct correlation between Embarked and Survived.\n- Males had better survival rate in Pclass=3 when compared with Pclass=2 for C and Q ports. Completing (#2).\n- Ports of embarkation have varying survival rates for Pclass=3 and among male passengers. Correlating (#1).\n\n**Decisions.**\n\n- Add Sex feature to model training.\n- Complete and add Embarked feature to model training.","7a063e44":"Let us drop Parch, SibSp, and FamilySize features in favor of IsAlone.","ecc67265":"Let us start by preparing an empty array to contain guessed Age values based on Pclass x Gender combinations.","9fd38a66":"### Converting categorical feature to numeric\n\nWe can now convert the EmbarkedFill feature by creating a new numeric Port feature.","4e4d886e":"## Ensemble of classifiers- majority voting","c9cf2c3b":"## Analyze by pivoting features\n\nTo confirm some of our observations and assumptions, we can quickly analyze our feature correlations by pivoting features against each other. We can only do so at this stage for features which do not have any empty values. It also makes sense doing so only for features which are categorical (Sex), ordinal (Pclass) or discrete (SibSp, Parch) type.\n\n- **Pclass** We observe significant correlation (>0.5) among Pclass=1 and Survived (classifying #3). We decide to include this feature in our model.\n- **Sex** We confirm the observation during problem definition that Sex=female had very high survival rate at 74% (classifying #1).\n- **SibSp and Parch** These features have zero correlation for certain values. It may be best to derive a feature or a set of features from these individual features (creating #1).","6418f214":"## Title","a48a0d2f":"## Age band","0d5ac36c":"## Feature Engineering","cb66e2ac":"We can convert the categorical titles to ordinal.","868d21aa":"Now we can safely drop the Name feature from training and testing datasets. We also do not need the PassengerId feature in the training dataset.","0717b094":"## Pre-processing\n\nCorrecting, fullfilling missing values, ...\n","ca0192bd":"## Data analysis\n\nPandas also helps describe the datasets answering following questions early in our project.\n\n**Which features are available in the dataset?**\n\nNoting the feature names for directly manipulating or analyzing these. These feature names are described on the [Kaggle data page here](https:\/\/www.kaggle.com\/c\/titanic\/data).","06d83fee":"Let us create Age bands and determine correlations with Survived.","0448b599":"Our submission to the competition site Kaggle results in scoring 3,883 of 6,082 competition entries. This result is indicative while the competition is running. This result only accounts for part of the submission dataset. Not bad for our first attempt. Any suggestions to improve our score are most welcome.","a6db8241":"![](https:\/\/i.imgur.com\/2BUDtOe.jpg)","012ba891":"### Correlating categorical and numerical features\n\nWe may also want to correlate categorical features (with non-numeric values) and numeric features. We can consider correlating Embarked (Categorical non-numeric), Sex (Categorical non-numeric), Fare (Numeric continuous), with Survived (Categorical numeric).\n\n**Observations.**\n\n- Higher fare paying passengers had better survival. Confirms our assumption for creating (#4) fare ranges.\n- Port of embarkation correlates with survival rates. Confirms correlating (#1) and completing (#2).\n\n**Decisions.**\n\n- Consider banding Fare feature.","a331f0d6":"We can create another feature called IsAlone.","7c8d9a5c":"### Correlating numerical and ordinal features\n\nWe can combine multiple features for identifying correlations using a single plot. This can be done with numerical and categorical features which have numeric values.\n\n**Observations.**\n\n- Pclass=3 had most passengers, however most did not survive. Confirms our classifying assumption #2.\n- Infant passengers in Pclass=2 and Pclass=3 mostly survived. Further qualifies our classifying assumption #2.\n- Most passengers in Pclass=1 survived. Confirms our classifying assumption #3.\n- Pclass varies in terms of Age distribution of passengers.\n\n**Decisions.**\n\n- Consider Pclass for model training.","1c6fe719":"### Creating new feature extracting from existing\n\nWe want to analyze if Name feature can be engineered to extract titles and test correlation between titles and survival, before dropping Name and PassengerId features.\n\nIn the following code we extract Title feature using regular expressions. The RegEx pattern `(\\w+\\.)` matches the first word which ends with a dot character within Name feature. The `expand=False` flag returns a DataFrame.\n\n**Observations.**\n\nWhen we plot Title, Age, and Survived, we note the following observations.\n\n- Most titles band Age groups accurately. For example: Master title has Age mean of 5 years.\n- Survival among Title Age bands varies slightly.\n- Certain titles mostly survived (Mme, Lady, Sir) or did not (Don, Rev, Jonkheer).\n\n**Decision.**\n\n- We decide to retain the new Title feature for model training.","5f213876":"### Model evaluation\n\nWe can now rank our evaluation of all the models to choose the best one for our problem. While both Decision Tree and Random Forest score the same, we choose to use Random Forest as they correct for decision trees' habit of overfitting to their training set. ","7c3aff0c":"And the test dataset.","7e8596f2":"We can replace many titles with a more common name or classify them as `Rare`.","f5b0b1e4":"![](https:\/\/i.redd.it\/zro1pv92z3u11.png)","fde474bb":"**Which features are mixed data types?**\n\nNumerical, alphanumeric data within same feature. These are candidates for correcting goal.\n\n- Ticket is a mix of numeric and alphanumeric data types. Cabin is alphanumeric.\n\n**Which features may contain errors or typos?**\n\nThis is harder to review for a large dataset, however reviewing a few samples from a smaller dataset may just tell us outright, which features may require correcting.\n\n- Name feature may contain errors or typos as there are several ways used to describe a name including titles, round brackets, and quotes used for alternative or short names.","3105e45f":"## Wrangle data\n\nWe have collected several assumptions and decisions regarding our datasets and solution requirements. So far we did not have to change a single feature or value to arrive at these. Let us now execute our decisions and assumptions for correcting, creating, and completing goals.\n\n### Dropping irrelevant features\n\nThis is a good starting goal to execute. By dropping features we are dealing with fewer data points. Speeds up our notebook and eases the analysis.\n\nBased on our assumptions and decisions we want to drop the Cabin (correcting #2) and Ticket (correcting #1) features.\n\nNote that where applicable we perform operations on both training and testing datasets together to stay consistent.","f70128e2":"**What is the distribution of categorical features?**\n\n- Names are unique across the dataset (count=unique=891)\n- Sex variable as two possible values with 65% male (top=male, freq=577\/count=891).\n- Cabin values have several dupicates across samples. Alternatively several passengers shared a cabin.\n- Embarked takes three possible values. S port used by most passengers (top=S)\n- Ticket feature has high ratio (22%) of duplicate values (unique=681).","524b40b4":"## Pclass","0843c6df":"## Family size","b718ab5e":"**What is the distribution of numerical feature values across the samples?**\n\nThis helps us determine, among other early insights, how representative is the training dataset of the actual problem domain.\n\n- Total samples are 891 or 40% of the actual number of passengers on board the Titanic (2,224).\n- Survived is a categorical feature with 0 or 1 values.\n- Around 38% samples survived representative of the actual survival rate at 32%.\n- Most passengers (> 75%) did not travel with parents or children.\n- Nearly 30% of the passengers had siblings and\/or spouse aboard.\n- Fares varied significantly with few passengers (<1%) paying as high as $512.\n- Few elderly passengers (<1%) within age range 65-80.","d1a7659e":"## Fare","399a1dc5":"## FareBand","bba4fd2a":"Now we iterate over Sex (0 or 1) and Pclass (1, 2, 3) to calculate guessed values of Age for the six combinations.","1cfc30f9":"![](https:\/\/i.imgflip.com\/2q750n.jpg)"}}