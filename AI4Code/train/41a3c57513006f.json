{"cell_type":{"c658bc5b":"code","5ac16717":"code","feca8ca7":"code","3e425be9":"code","f0ba67fd":"code","1df22f3f":"code","d13a6c30":"code","e2296edc":"code","a3f2310a":"code","c2e4d8d1":"code","f98918e8":"code","738c68b9":"code","3a819c6b":"code","bdaa4dee":"code","3f79796e":"code","471c699a":"markdown"},"source":{"c658bc5b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom tqdm.notebook import tqdm\nfrom scipy.optimize import curve_fit","5ac16717":"train = pd.read_csv('..\/input\/covid19-global-forecasting-week-3\/train.csv')\ntest = pd.read_csv('..\/input\/covid19-global-forecasting-week-3\/test.csv')\nworld_population = pd.read_csv('..\/input\/population-by-country-2020\/population_by_country_2020.csv')","feca8ca7":"world_population = world_population[['Country (or dependency)', 'Population (2020)']]\nworld_population.columns = ['Country (or dependency)', 'Population']\nworld_population.loc[world_population['Country (or dependency)']=='United States', 'Country (or dependency)'] = 'US'\n\ntrain = train.merge(world_population, left_on='Country_Region', right_on='Country (or dependency)', how='left')\ntest = test.merge(world_population, left_on='Country_Region', right_on='Country (or dependency)', how='left')","3e425be9":"train['State_Country'] = [s + '_' + c if s == s else c for s,c in train[['Province_State', 'Country_Region']].values ]\ntest['State_Country'] = [s + '_' + c if s == s else c for s,c in test[['Province_State', 'Country_Region']].values ]","f0ba67fd":"train.loc[(train['Date']=='2020-03-24')&(train['State_Country']=='France'),'ConfirmedCases'] = 22654\ntrain.loc[(train['Date']=='2020-03-24')&(train['State_Country']=='France'),'Fatalities'] = 1000","1df22f3f":"def clear_population(train):\n    train.loc[train.State_Country == 'Czechia', 'Population'] = 10704146\n    train.loc[train.State_Country == 'Korea, South', 'Population'] =  51259914\n    train.loc[train.State_Country == 'Saint Vincent and the Grenadines', 'Population'] =  110210 \n    train.loc[train.State_Country == 'Sao Tome and Principe', 'Population'] =  211028  \n    train.loc[train.State_Country == 'West Bank and Gaza', 'Population'] =  4569000  \n    train.loc[train.State_Country == 'Diamond Princess', 'Population'] =  2670  \n\n    train.loc[train.State_Country == 'Kosovo', 'Population'] = 1810366\n    train.loc[train.State_Country == 'MS Zaandam', 'Population'] = 1432\n    train.loc[train.State_Country == 'Taiwan*', 'Population'] = 23816775\n    train.loc[train.State_Country == 'Saint Kitts and Nevis', 'Population'] = 53106\n    train.loc[train.State_Country == 'Burma', 'Population'] = 54409800\n    train.loc[train.State_Country == 'Kosovo', 'Population'] = 1810366\n    train.loc[train.State_Country == 'Congo (Brazzaville)', 'Population'] = 5175324\n    train.loc[train.State_Country == 'Congo (Kinshasa)', 'Population'] = 14342000\n    train.loc[train.State_Country == \"Cote d'Ivoire\", 'Population'] = 26207028\n\n    train.loc[train.State_Country == 'Australian Capital Territory_Australia', 'Population'] = 418440\n    train.loc[train.State_Country == 'New South Wales_Australia', 'Population'] = 8023700\n    train.loc[train.State_Country == 'Northern Territory_Australia', 'Population'] = 249220\n    train.loc[train.State_Country == 'Queensland_Australia', 'Population'] = 5110000\n    train.loc[train.State_Country == 'South Australia_Australia', 'Population'] = 1700000\n    train.loc[train.State_Country == 'Tasmania_Australia', 'Population'] = 524170 \n    train.loc[train.State_Country == 'Victoria_Australia', 'Population'] = 6490000 \n    train.loc[train.State_Country == 'Western Australia_Australia', 'Population'] = 2760000 \n\n    train.loc[train.State_Country == 'Alberta_Canada', 'Population'] = 4413146\n    train.loc[train.State_Country == 'British Columbia_Canada', 'Population'] = 5110917\n    train.loc[train.State_Country == 'Manitoba_Canada', 'Population'] = 1377517\n    train.loc[train.State_Country == 'New Brunswick_Canada', 'Population'] = 761214\n    train.loc[train.State_Country == 'Newfoundland and Labrador_Canada', 'Population'] = 536000\n    train.loc[train.State_Country == 'Northwest Territories_Canada', 'Population'] = 44904 \n    train.loc[train.State_Country == 'Nova Scotia_Canada', 'Population'] = 977457 \n    train.loc[train.State_Country == 'Ontario_Canada', 'Population'] = 14711827 \n    train.loc[train.State_Country == 'Prince Edward Island_Canada', 'Population'] = 158158 \n    train.loc[train.State_Country == 'Quebec_Canada', 'Population'] = 8537674 \n    train.loc[train.State_Country == 'Saskatchewan_Canada', 'Population'] = 1181666 \n    train.loc[train.State_Country == 'Yukon_Canada', 'Population'] = 41078 \n\n    train.loc[train.State_Country == 'Faroe Islands_Denmark', 'Population'] = 48863\n    train.loc[train.State_Country == 'Greenland_Denmark', 'Population'] = 56746\n    train.loc[train.State_Country == 'Denmark', 'Population'] = 5792202\n\n    train.loc[train.State_Country == 'French Guiana_France', 'Population'] = 290691\n    train.loc[train.State_Country == 'French Polynesia_France', 'Population'] = 280908\n    train.loc[train.State_Country == 'Guadeloupe_France', 'Population'] = 400124\n    train.loc[train.State_Country == 'Martinique_France', 'Population'] = 375335\n    train.loc[train.State_Country == 'Mayotte_France', 'Population'] = 272815\n    train.loc[train.State_Country == 'New Caledonia_France', 'Population'] = 285498\n    train.loc[train.State_Country == 'Reunion_France', 'Population'] = 859959\n    train.loc[train.State_Country == 'Saint Barthelemy_France', 'Population'] = 9870\n    train.loc[train.State_Country == 'St Martin_France', 'Population'] = 38500\n    train.loc[train.State_Country == 'France', 'Population'] = 65273511\n\n    train.loc[train.State_Country == 'Aruba_Netherlands', 'Population'] = 106766\n    train.loc[train.State_Country == 'Curacao_Netherlands', 'Population'] = 164093\n    train.loc[train.State_Country == 'Sint Maarten_Netherlands', 'Population'] = 42754\n    train.loc[train.State_Country == 'Netherlands', 'Population'] = 17134872 \n\n    train.loc[train.State_Country == 'Anguilla_United Kingdom', 'Population'] = 14969\n    train.loc[train.State_Country == 'Bermuda_United Kingdom', 'Population'] = 62333\n    train.loc[train.State_Country == 'British Virgin Islands_United Kingdom', 'Population'] = 30231\n    train.loc[train.State_Country == 'Cayman Islands_United Kingdom', 'Population'] = 65528 \n    train.loc[train.State_Country == 'Channel Islands_United Kingdom', 'Population'] = 173863 \n    train.loc[train.State_Country == 'Gibraltar_United Kingdom', 'Population'] = 33691 \n    train.loc[train.State_Country == 'Isle of Man_United Kingdom', 'Population'] = 91556 \n    train.loc[train.State_Country == 'Montserrat_United Kingdom', 'Population'] = 4991 \n    train.loc[train.State_Country == 'Turks and Caicos Islands_United Kingdom', 'Population'] = 38717 \n    train.loc[train.State_Country == 'United Kingdom', 'Population'] = 67886011 \n\n    train.loc[train.State_Country == 'Anhui_China', 'Population'] = 62548000\n    train.loc[train.State_Country == 'Beijing_China', 'Population'] = 21707000\n    train.loc[train.State_Country == 'Chongqing_China', 'Population'] = 30752000\n    train.loc[train.State_Country == 'Fujian_China', 'Population'] = 39110000 \n    train.loc[train.State_Country == 'Gansu_China', 'Population'] = 26257000\n    train.loc[train.State_Country == 'Guangdong_China', 'Population'] = 111690000\n    train.loc[train.State_Country == 'Guangxi_China', 'Population'] = 48850000\n    train.loc[train.State_Country == 'Guizhou_China', 'Population'] = 35800000 \n    train.loc[train.State_Country == 'Hainan_China', 'Population'] = 9258000\n    train.loc[train.State_Country == 'Hebei_China', 'Population'] = 75195000\n    train.loc[train.State_Country == 'Heilongjiang_China', 'Population'] = 37887000\n    train.loc[train.State_Country == 'Henan_China', 'Population'] = 95590000 \n    train.loc[train.State_Country == 'Hong Kong_China', 'Population'] = 7496981\n    train.loc[train.State_Country == 'Hubei_China', 'Population'] = 59020000\n    train.loc[train.State_Country == 'Hunan_China', 'Population'] = 68602000\n    train.loc[train.State_Country == 'Inner Mongolia_China', 'Population'] = 25286000\n    train.loc[train.State_Country == 'Jiangxi_China', 'Population'] = 80293000\n    train.loc[train.State_Country == 'Jiangsu_China', 'Population'] = 46221000\n    train.loc[train.State_Country == 'Jilin_China', 'Population'] = 27174000\n    train.loc[train.State_Country == 'Liaoning_China', 'Population'] = 43689000\n    train.loc[train.State_Country == 'Macau_China', 'Population'] = 647097\n    train.loc[train.State_Country == 'Ningxia_China', 'Population'] = 6818000\n    train.loc[train.State_Country == 'Qinghai_China', 'Population'] = 5984000\n    train.loc[train.State_Country == 'Shaanxi_China', 'Population'] = 38354000\n    train.loc[train.State_Country == 'Shandong_China', 'Population'] = 100058000\n    train.loc[train.State_Country == 'Shanghai_China', 'Population'] = 24183000\n    train.loc[train.State_Country == 'Shanxi_China', 'Population'] = 37024000\n    train.loc[train.State_Country == 'Sichuan_China', 'Population'] = 83020000\n    train.loc[train.State_Country == 'Tianjin_China', 'Population'] = 15569000\n    train.loc[train.State_Country == 'Tibet_China', 'Population'] = 3371000\n    train.loc[train.State_Country == 'Xinjiang_China', 'Population'] = 24467000\n    train.loc[train.State_Country == 'Yunnan_China', 'Population'] = 48005000\n    train.loc[train.State_Country == 'Zhejiang_China', 'Population'] = 56570000\n\n    train.loc[train.State_Country == 'Alabama_US', 'Population'] = 4908621\n    train.loc[train.State_Country == 'Alaska_US', 'Population'] = 734002\n    train.loc[train.State_Country == 'Arizona_US', 'Population'] = 7378494\n    train.loc[train.State_Country == 'Arkansas_US', 'Population'] = 3038999\n    train.loc[train.State_Country == 'California_US', 'Population'] = 39937489\n    train.loc[train.State_Country == 'Colorado_US', 'Population'] = 5845526\n    train.loc[train.State_Country == 'Connecticut_US', 'Population'] = 3563077\n    train.loc[train.State_Country == 'Delaware_US', 'Population'] = 982895\n    train.loc[train.State_Country == 'District of Columbia_US', 'Population'] = 720687\n    train.loc[train.State_Country == 'Florida_US', 'Population'] = 21992985\n    train.loc[train.State_Country == 'Georgia_US', 'Population'] = 10736059\n    train.loc[train.State_Country == 'Guam_US', 'Population'] = 168775\n    train.loc[train.State_Country == 'Hawaii_US', 'Population'] = 1412687\n    train.loc[train.State_Country == 'Idaho_US', 'Population'] = 1826156\n    train.loc[train.State_Country == 'Illinois_US', 'Population'] = 12659682\n    train.loc[train.State_Country == 'Indiana_US', 'Population'] = 6745354\n    train.loc[train.State_Country == 'Iowa_US', 'Population'] = 3179849\n    train.loc[train.State_Country == 'Kansas_US', 'Population'] = 2910357\n    train.loc[train.State_Country == 'Kentucky_US', 'Population'] = 4499692\n    train.loc[train.State_Country == 'Louisiana_US', 'Population'] = 4645184\n    train.loc[train.State_Country == 'Maine_US', 'Population'] = 1345790\n    train.loc[train.State_Country == 'Maryland_US', 'Population'] = 6083116\n    train.loc[train.State_Country == 'Massachusetts_US', 'Population'] = 6976597\n    train.loc[train.State_Country == 'Michigan_US', 'Population'] = 10045029\n    train.loc[train.State_Country == 'Minnesota_US', 'Population'] = 5700671\n    train.loc[train.State_Country == 'Mississippi_US', 'Population'] = 2989260\n    train.loc[train.State_Country == 'Missouri_US', 'Population'] = 6169270\n    train.loc[train.State_Country == 'Montana_US', 'Population'] = 1086759\n    train.loc[train.State_Country == 'Nebraska_US', 'Population'] = 1952570\n    train.loc[train.State_Country == 'Nevada_US', 'Population'] = 3139658\n    train.loc[train.State_Country == 'New Hampshire_US', 'Population'] = 1371246\n    train.loc[train.State_Country == 'New Jersey_US', 'Population'] = 8936574\n    train.loc[train.State_Country == 'New Mexico_US', 'Population'] = 2096640\n    train.loc[train.State_Country == 'New York_US', 'Population'] = 19440469\n    train.loc[train.State_Country == 'North Carolina_US', 'Population'] = 10611862\n    train.loc[train.State_Country == 'North Dakota_US', 'Population'] = 761723\n    train.loc[train.State_Country == 'Ohio_US', 'Population'] = 11747694\n    train.loc[train.State_Country == 'Oklahoma_US', 'Population'] = 3954821\n    train.loc[train.State_Country == 'Oregon_US', 'Population'] = 4301089\n    train.loc[train.State_Country == 'Pennsylvania_US', 'Population'] = 12820878\n    train.loc[train.State_Country == 'Puerto Rico_US', 'Population'] = 3032165\n    train.loc[train.State_Country == 'Rhode Island_US', 'Population'] = 1056161\n    train.loc[train.State_Country == 'South Carolina_US', 'Population'] = 5210095\n    train.loc[train.State_Country == 'South Dakota_US', 'Population'] = 903027\n    train.loc[train.State_Country == 'Tennessee_US', 'Population'] = 6897576\n    train.loc[train.State_Country == 'Texas_US', 'Population'] = 29472295\n    train.loc[train.State_Country == 'Utah_US', 'Population'] = 3282115\n    train.loc[train.State_Country == 'Vermont_US', 'Population'] = 628061\n    train.loc[train.State_Country == 'Virgin Islands_US', 'Population'] = 104425\n    train.loc[train.State_Country == 'Virginia_US', 'Population'] = 8626207\n    train.loc[train.State_Country == 'Washington_US', 'Population'] = 7797095\n    train.loc[train.State_Country == 'West Virginia_US', 'Population'] = 1778070\n    train.loc[train.State_Country == 'Wisconsin_US', 'Population'] = 5851754\n    train.loc[train.State_Country == 'Wyoming_US', 'Population'] = 567025\n    \n    return train\n\ntrain = clear_population(train)\ntest = clear_population(test)","d13a6c30":"for metric in ['ConfirmedCases', 'Fatalities']:\n    dict_values = train.groupby('State_Country')[metric].apply(np.array).to_dict()\n\n    for country in dict_values:\n        if sum(np.diff(dict_values[country]) < 0):\n            print(country, metric)\n            new_val = [dict_values[country][-1]]\n            for val_1, val_2 in zip(dict_values[country][1:][::-1], dict_values[country][:-1][::-1]):\n                if val_2 <= new_val[-1]:\n                    new_val += [val_2]\n                else:\n                    new_val += [new_val[-1]]\n            new_val = np.array(new_val[::-1])\n            train.loc[train.State_Country == country, metric] = new_val","e2296edc":"def predict(data, country, len_predict, metrics, len_intersection, bound_0, bound_1):\n    country_data = data[data['State_Country']==country]\n    \n    if metrics != 'Fatalities':\n        if country_data[metrics].values.max() > 5000:\n            start_people = 3\n        elif country_data[metrics].values.max() > 500:\n            start_people = 2\n        else:\n            start_people = 0\n    else:\n        if country_data[metrics].values.max() > 50:\n            start_people = 1\n        else:\n            start_people = 0        \n\n    country_data = country_data.iloc[dict_case_date[country][start_people]:, :]\n\n    x_data = range(len(country_data.index))\n    y_data = country_data[metrics].values\n\n    if len(x_data) <= 1:\n        y_val = np.arange(len(x_data), len(x_data) + len_predict)\n        if metrics != 'Fatalities':\n            return [-1, -1, -1], log_curve(y_val, bound_0, bound_1, 100, 1)\n        else:\n            return [-1, -1, -1], log_curve(y_val, bound_0, bound_1, 3, 0)            \n    else:\n        if metrics != 'Fatalities':\n#             y_max = max(country_data['Population'].values[0] * 0.001, y_data[-1] * 5)\n            y_max = y_data[-1] * 10\n        else:\n            y_max = y_data[-1] * 7\n        y_min = y_data[-1]\n        if metrics != 'Fatalities':\n            diff_k = max(1,  y_data[-1] - y_data[-2])\n        else:\n            diff_k = 1\n\n        best_score = 100000000000\n\n        if len(x_data) < 10:\n            range_num = 1\n        else:\n            range_num = len(x_data) - 9\n            \n        for i in range(range_num):\n            popt, pcov = curve_fit(log_curve, x_data[i:], y_data[i:],  bounds=([bound_0 - 0.05, bound_1 - 7.5 , y_min, 0 ],\n                                                                  [bound_0 + 0.1, bound_1 + 7.5, y_max, diff_k]),\n                                p0=[bound_0, bound_1 ,(y_min + y_max) \/ 2, 0], maxfev=100000)\n            \n            tmp_pred = log_curve(x_data[-5:], popt[0], popt[1], popt[2], popt[3])\n            score = rmsle(y_data[-5:], tmp_pred)\n            if score < best_score:\n                best_score = score\n                best_i = i\n                best_popt = popt\n        \n        \n#         if y_min < 10000:\n#             popt, pcov = curve_fit(log_curve, x_data, y_data,bounds=([bound_0 - 0.05, bound_1 - 7.5 , y_min, 0 ],\n#                                                                   [bound_0 + 0.1, bound_1 + 7.5, y_max, diff_k]), \n#                             p0=[bound_0, bound_1 ,(y_min + y_max) \/ 2, 0], maxfev=100000)\n#         else:\n#             popt, pcov = curve_fit(log_curve, x_data, y_data,bounds=([0, 0 , y_min, 0 ],\n#                                                                   [np.inf,np.inf, y_max, diff_k]), \n#                             p0=[bound_0, bound_1 ,(y_min + y_max) \/ 2, 0], maxfev=100000)\n            \n        y_val = np.arange(len(x_data) - len_intersection, len(x_data) + len_predict - len_intersection)\n#         print(x_data)\n#         print(y_data)\n#         print([bound_0, bound_1 ,(y_min + y_max) \/ 2, 0])\n#         print([0, 0, y_min, 0 ],\n#                                                                   [np.inf, np.inf, y_max, diff_k])        \n#         print(y_val)\n        return  popt, log_curve(y_val, best_popt[0], best_popt[1], best_popt[2], best_popt[3])\n    \n\n\ndef log_curve(x, k, x_0, ymax, x_1):\n    return ymax \/ (1 + np.exp(-k*(x-x_0))) + x_1 * x\n\ndef rmsle(true, pred):\n    true = np.array(true)\n    pred = np.array(pred)\n    return np.mean((np.log1p(true) - np.log1p(pred)) ** 2) ** (1\/2)","a3f2310a":"metrics = 'ConfirmedCases'\n\ndata_train = train.copy()\ndata_val = test.copy()\nlen_predict = data_val[data_val.State_Country == country].shape[0]\nlen_intersection = len(set(data_train.Date.unique()) & set(data_val.Date.unique()))\n\ndict_values = data_train.groupby('State_Country')[metrics].apply(np.array).to_dict()\ndict_case_date = {}\nfor country in dict_values:\n    dict_case_date[country] = []\n    for case in [1, 30, 100, 500]:\n        try:\n            dict_case_date[country] += [np.where(dict_values[country] >= case)[0][0]]\n        except:\n            dict_case_date[country] += [-1]\n    dict_case_date[country] = np.array(dict_case_date[country])\n    \ndict_predict = {}\n\nfor country in tqdm(train.State_Country.unique()):\n\n    popt, pred_values = predict(data_train, country, len_predict, metrics, len_intersection, 0.15, 30)\n    \n    if pred_values[len_intersection] < train[train.State_Country == country][metrics].values[-1]:\n        pred_values += ( train[train.State_Country == country][metrics].values[-1] - pred_values[len_intersection] )\n    \n    dict_predict[country] = pred_values\n\ntest[metrics] = 0\nfor country in test['State_Country'].unique():\n    test.loc[test.State_Country == country, metrics] = dict_predict[country]","c2e4d8d1":"metrics = 'Fatalities'\n\ndict_values = data_train.groupby('State_Country')[metrics].apply(np.array).to_dict()\ndict_case_date = {}\nfor country in dict_values:\n    dict_case_date[country] = []\n    for case in [1, 5]:\n        try:\n            dict_case_date[country] += [np.where(dict_values[country] >= case)[0][0]]\n        except:\n            dict_case_date[country] += [-1]\n    dict_case_date[country] = np.array(dict_case_date[country])\n    \ndict_predict = {}\n\nfor country in tqdm(train.State_Country.unique()):\n\n    popt, pred_values = predict(data_train, country, len_predict, metrics, len_intersection, 0.15, 30)\n    \n    if pred_values[len_intersection] < train[train.State_Country == country][metrics].values[-1]:\n        pred_values += ( train[train.State_Country == country][metrics].values[-1] - pred_values[len_intersection] )\n        \n    dict_predict[country] = pred_values\n\ntest[metrics] = 0\nfor country in test['State_Country'].unique():\n    test.loc[test.State_Country == country, metrics] = dict_predict[country]","f98918e8":"def make_simple(train, test):\n    \n    train = pd.read_csv('..\/input\/covid19-global-forecasting-week-3\/train.csv')\n    test = pd.read_csv('..\/input\/covid19-global-forecasting-week-3\/test.csv')\n\n    train['State_Country'] = [s + '_' + c if s == s else c for s,c in train[['Province_State', 'Country_Region']].values ]\n    test['State_Country'] = [s + '_' + c if s == s else c for s,c in test[['Province_State', 'Country_Region']].values ]\n\n    for metric in ['ConfirmedCases', 'Fatalities']:\n        dict_values = train.groupby('State_Country')[metric].apply(np.array).to_dict()\n\n        for country in dict_values:\n            if sum(np.diff(dict_values[country]) < 0):\n                print(country, metric)\n                new_val = [dict_values[country][-1]]\n                for val_1, val_2 in zip(dict_values[country][1:][::-1], dict_values[country][:-1][::-1]):\n                    if val_2 <= new_val[-1]:\n                        new_val += [val_2]\n                    else:\n                        new_val += [new_val[-1]]\n                new_val = np.array(new_val[::-1])\n                train.loc[train.State_Country == country, metric] = new_val\n            \n    train['shift_1_cc'] = train.groupby(['State_Country'])['ConfirmedCases'].shift(3)\n    train['shift_1_ft'] = train.groupby(['State_Country'])['Fatalities'].shift(3)\n\n    train['diff_1_cc'] = (train['ConfirmedCases']-train['shift_1_cc'] )\/3 * 0.95\n    train['diff_1_ft'] = (train['Fatalities']-train['shift_1_ft'] )\/3 * 0.95\n\n    tmin = train[train['Date']==test['Date'].min()]\n    tmax = train[train['Date']==train['Date'].max()]\n\n    test1 = test[test['Date']<=train['Date'].max()]\n    test2 = test[test['Date']>train['Date'].max()]\n\n    test1 = pd.merge(test1, tmin[['State_Country','diff_1_cc','diff_1_ft']], on='State_Country')\n    test2 = pd.merge(test2, tmax[['State_Country','diff_1_cc','diff_1_ft']], on='State_Country')\n\n    test1['ConfirmedCases'] = test1['diff_1_cc']*1.2\n    test1['ConfirmedCases'] = test1.groupby(['State_Country'])['ConfirmedCases'].cumsum()\n    test1['Fatalities'] = test1['diff_1_ft']*1.2\n    test1['Fatalities'] = test1.groupby(['State_Country'])['Fatalities'].cumsum()\n\n    test2['ConfirmedCases'] = test2['diff_1_cc']\n    test2['Fatalities'] = test2['diff_1_ft']\n\n    test2.loc[test2['Date']==test2['Date'].min(),'ConfirmedCases'] = list(train.loc[train['Date']==test1['Date'].max(),'ConfirmedCases'])\n    test2.loc[test2['Date']==test2['Date'].min(),'Fatalities'] = list(train.loc[train['Date']==test1['Date'].max(),'Fatalities'])\n\n    test2['ConfirmedCases'] = test2.groupby(['State_Country'])['ConfirmedCases'].cumsum()\n    test2['Fatalities'] = test2.groupby(['State_Country'])['Fatalities'].cumsum()\n\n    test_final = test1.append(test2).reset_index(drop = True)\n#     test_final = test_final[test_final.Date >= '2020-04-09']\n    return test_final\n\nnew_test_s = make_simple(train, test)","738c68b9":"test['New_Fatalities'] = test['ForecastId'].map(dict(zip(new_test_s['ForecastId'], new_test_s['Fatalities'])))\ntest['New_Fatalities'] = (test['New_Fatalities'] * 0.6  + test['Fatalities'] * 0.4)\n\ntest['New_ConfirmedCases'] = test['ForecastId'].map(dict(zip(new_test_s['ForecastId'], new_test_s['ConfirmedCases'])))\ntest['New_ConfirmedCases'] = (test['New_ConfirmedCases'] * 0.6 + test['ConfirmedCases'] * 0.4 )","3a819c6b":"test['New_Fatalities'] = test['New_Fatalities'].clip(0, test['New_ConfirmedCases'] * 0.2)","bdaa4dee":"submit = pd.read_csv('..\/input\/covid19-global-forecasting-week-3\/submission.csv')\nsubmit['Fatalities'] = test['New_Fatalities'].astype('float')\nsubmit['ConfirmedCases'] = test['New_ConfirmedCases'].astype('float')\nsubmit.to_csv('submission.csv',index=False)","3f79796e":"# bad_country = ['Malawi', 'Saint Pierre and Miquelon_France', 'South Sudan', 'Falkland Islands (Malvinas)_United Kingdom', 'Sao Tome and Principe', 'Bonaire, Sint Eustatius and Saba_Netherlands', 'Western Sahara']\n\n# real_train = pd.read_csv('..\/input\/covid19-global-forecasting-week-4\/train.csv')\n# real_train['State_Country'] = [s + '_' + c if s == s else c for s,c in real_train[['Province_State', 'Country_Region']].values ]\n\n# new_test = test.merge(real_train[['State_Country', 'Date','ConfirmedCases', 'Fatalities']], on = ['State_Country', 'Date'])\n# new_test = new_test[(new_test.Date >  '2020-04-08') & (~new_test.State_Country.isin(bad_country))]\n# new_test = new_test.merge(new_test_s[['State_Country', 'Date','ConfirmedCases', 'Fatalities']], on = ['State_Country', 'Date'])\n# # rmsle(new_test['ConfirmedCases_y'], new_test['ConfirmedCases_x'])","471c699a":"# TRAIN"}}