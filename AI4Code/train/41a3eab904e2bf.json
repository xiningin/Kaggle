{"cell_type":{"91aaf100":"code","e60216c0":"code","92b75abb":"code","70abdf2a":"code","8d48a70c":"code","a4e902a7":"code","25bfbca7":"code","7f420b49":"code","a5ba8040":"code","51d5a404":"code","cad6f4e7":"code","b29bde5c":"code","ec41f4d7":"code","d09c29b5":"code","5534d396":"code","584777c6":"code","bc3df136":"code","bef3c2cd":"code","e1c464d6":"code","87d66115":"code","5ff70574":"code","84ff06d3":"code","b323319f":"code","97c9718e":"code","0377cca2":"code","16fd9f5d":"code","4007ac1c":"code","8b44b5b0":"code","930baad2":"code","4229f3cf":"code","a72c2f4e":"code","d807b2bf":"code","11f974fd":"markdown","01bf26c9":"markdown","4d176c93":"markdown","e6ad8b9b":"markdown","e50e867b":"markdown","fed255b7":"markdown","40ac6b09":"markdown","c7fad5f9":"markdown","40e5322d":"markdown","46ab8f6b":"markdown","382e9882":"markdown","f2afcf08":"markdown","f22876da":"markdown","6a761a38":"markdown","244ce648":"markdown","802b3915":"markdown","a505908e":"markdown"},"source":{"91aaf100":"!pip install pyecharts","e60216c0":"import csv\nimport json\nimport re\nimport numpy as np\nimport pandas as pd\nfrom pyecharts.charts import Bar,Pie, Timeline, Scatter,Radar, HeatMap, Grid, Tab, Line, MapGlobe\nfrom pyecharts.commons.utils import JsCode\nfrom pyecharts.globals import ThemeType\nfrom pyecharts import options as opts\nfrom collections import Counter, OrderedDict\n\nfrom collections import Counter, OrderedDict\nfrom IPython.display import HTML\npd.set_option('max_rows', 300)\n\n# The below is great for working but if you publish it, no charts show up.\n# The workaround in the next cell deals with this.\n#alt.renderers.enable('notebook')\n\nHTML(\"This code block contains import statements and setup.\")","92b75abb":"df_2017 = pd.read_csv('..\/input\/kaggle-survey-2017\/multipleChoiceResponses.csv', encoding='latin-1')\ndf_2018 = pd.read_csv('..\/input\/kaggle-survey-2018\/multipleChoiceResponses.csv')\ndf_2019 = pd.read_csv('..\/input\/kaggle-survey-2019\/multiple_choice_responses.csv')\ndf_2018 = df_2018.drop([0])\ndf_2019 = df_2019.drop([0])","70abdf2a":"df_responses = pd.read_csv('..\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv')\ndf_responses = df_responses.drop([0])\ndf_responses.head()","8d48a70c":"num_responses = [df_2017.shape[0], df_2018.shape[0], df_2019.shape[0], df_responses.shape[0]]\nyears = [\"Year: 2017\",\"Year: 2018\",\"Year: 2019\",\"Year: 2020\"]\n\nbar=Bar(init_opts=opts.InitOpts(width=\"650px\")).add_xaxis(years)\\\n.add_yaxis('Total Responses', num_responses)\\\n.set_global_opts(title_opts=opts.TitleOpts(title=\"Total Number of survey respondents\",subtitle=\"2017-2020 Kaggle Survey\"),\n             xaxis_opts=opts.AxisOpts(name='Year'), legend_opts=opts.LegendOpts(is_show=False))\n\nline = (Line().add_xaxis(xaxis_data=years).add_yaxis(series_name=\"responses\",y_axis=num_responses, label_opts=opts.LabelOpts(is_show=False)))\nbar.overlap(line)\nbar.render_notebook()","a4e902a7":"q1 = df_responses['Q1'].value_counts().sort_index()\nq1=q1.reset_index()\nq1.columns=['Age-Group', '# of responses']\nq1['pct'] = round(100 * q1['# of responses']\/q1['# of responses'].sum())\n\nbar=Bar(init_opts=opts.InitOpts(width=\"650px\")).add_xaxis(q1['Age-Group'].values.tolist())\\\n.add_yaxis('num responses', q1['# of responses'].values.tolist())\\\n.set_global_opts(title_opts=opts.TitleOpts(title=\"Number of respondents based on Age Group\"),\n             yaxis_opts=opts.AxisOpts(name='Age-Group'), legend_opts=opts.LegendOpts(is_show=False))\\\n.reversal_axis()\\\n.set_series_opts(\n        label_opts=opts.LabelOpts(position=\"inside\"),\n        markpoint_opts=opts.MarkPointOpts(\n            data=[\n                opts.MarkPointItem(type_=\"max\", name=\"Maximum no. of responses\"),\n            ]\n        ),\n    )\n\npie = (\n    Pie()\n    .add(\n        series_name=\"percent responses\",\n        data_pair=[list(z) for z in zip(q1['Age-Group'], q1.pct)],\n        radius=[\"20%\",\"30%\"],\n        center=[\"65%\", \"35%\"],\n    )\n    .set_series_opts(label_opts=opts.LabelOpts(formatter=\"{b}:{c}%\"),\n        tooltip_opts=opts.TooltipOpts(formatter=\"{b}:{c}%\"))\n)\n\nbar.overlap(pie)\n\nbar.render_notebook()","25bfbca7":"df_responses['Q4'] = df_responses['Q4'].map({'Master\u2019s degree': 'Master',\n                                       'Bachelor\u2019s degree': 'Bachelor', 'Doctoral degree': 'Higher than Master',\n                                       'Some college\/university study without earning a bachelor\u2019s degree': 'Lower than Bachelor',\n                                      'Professional degree': 'Higher than Master', 'No formal education past high school':'Lower than Bachelor'})\n\nq4=df_responses['Q4'].value_counts().to_frame()\nq4=q4.reset_index()\nq4.columns=['Degree', '# of responses']\nq4['pct'] = round(100 * q4['# of responses']\/q4['# of responses'].sum())\n\nbar=Bar(init_opts=opts.InitOpts(width =\"600px\")).add_xaxis(q4.Degree.values.tolist())\\\n.add_yaxis('', q4['# of responses'].values.tolist())\\\n.set_global_opts(title_opts=opts.TitleOpts(title=\"Number of respondents based on Education Level\",\n                                           subtitle=\"2020 Kaggle Survey\"), \n                 xaxis_opts=opts.AxisOpts(name='Degree', axislabel_opts=opts.LabelOpts(rotate=-20)),\n                 legend_opts=opts.LegendOpts(is_show=False),)\\\n\npie = (\n    Pie()\n    .add(\n        series_name=\"percent responses\",\n        data_pair=[list(z) for z in zip(q4.Degree, q4.pct)],\n        radius=[\"10%\",\"20%\"],\n        center=[\"75%\", \"25%\"],\n    )\n    .set_series_opts(label_opts=opts.LabelOpts(formatter=\"{b}:{c}%\"),\n        tooltip_opts=opts.TooltipOpts(formatter=\"{b}:{c}%\"))\n)\n\nbar.overlap(pie)\n\nbar.render_notebook()","7f420b49":"df_responses['Q2'] = df_responses['Q2'].apply(lambda x : 'ETC' if x not in ['Man', 'Woman'] else x)\ntotal_dist=df_responses.Q2.value_counts(normalize=True)\ndata_q1q2 = df_responses[df_responses['Q2'] != 'ETC'].groupby(['Q2'])['Q1'].value_counts().unstack().sort_index()\nman = data_q1q2.loc['Man']\nwoman = data_q1q2.loc['Woman']\n\nman=man.reset_index()\nman.columns = ['Age-Group', '# of responses']\n\nwoman=woman.reset_index()\nwoman.columns = ['Age-Group', '# of responses']","a5ba8040":"total_dist = total_dist.reset_index()\ntotal_dist.columns = [\"Group\", \"Percent\"]\ntotal_dist.Percent = np.round((total_dist.Percent * 100),2)\ntotal_dist['Group'] = total_dist['Group'].apply(lambda x : 'ETC' if x not in ['Man', 'Woman'] else x)\ntotal_dist['Group'] = total_dist.Group.map({\"Man\":\"Men\",\"Woman\":\"Women\", \"ETC\":\"ETC\"})","51d5a404":"bar=Bar(init_opts=opts.InitOpts(width=\"650px\")).add_xaxis(man['Age-Group'].values.tolist())\\\n.add_yaxis('Men', man['# of responses'].values.tolist(), stack=\"stack1\")\\\n.add_yaxis('Women', woman['# of responses'].values.tolist(), stack=\"stack1\")\\\n.set_series_opts(label_opts=opts.LabelOpts(position=\"inside\"))\\\n.reversal_axis()\\\n.set_global_opts(title_opts=opts.TitleOpts(title=\"Number of respondents based on Sex\"),\n                 xaxis_opts=opts.AxisOpts(name='# responses'), \n                 yaxis_opts=opts.AxisOpts(name='Age-Group'),\n                 legend_opts=opts.LegendOpts(type_=\"scroll\", pos_top=\"20%\", pos_left=\"80%\", orient=\"vertical\"))\\\n\npie = (\n    Pie()\n    .add(\n        series_name=\"percent responses\",\n        data_pair=[list(z) for z in zip(total_dist.Group, total_dist.Percent)],\n        radius=[\"10%\",\"20%\"],\n        center=[\"60%\", \"25%\"],\n    )\n    .set_series_opts(label_opts=opts.LabelOpts(formatter=\"{b}:{c}%\"),\n        tooltip_opts=opts.TooltipOpts(formatter=\"{b}:{c}%\"))\n)\n\nbar.overlap(pie)\n\nbar.render_notebook()","cad6f4e7":"continents_df = pd.read_csv(\"..\/input\/2020-kaggle-survey-supporting\/2020 Continents.csv\")\ncontinents_dict = d = {k:v for k,v in zip(continents_df[\"Country\"],continents_df[\"Continents\"])}\n\n\ncountry_long_name_dict = {\"United States of America\": \"USA\", \n                          \"United Kingdom of Great Britain and Northern Ireland\": \"United Kingdom\",\n                          \"Iran, Islamic Republic of...\": \"Iran\"\n                         }\n\ndf_2017[\"Continents\"] = df_2017[\"Country\"].map(continents_dict)\ndf_2018[\"Continents\"] = df_2018[\"Q3\"].map(continents_dict)\ndf_2019[\"Continents\"] = df_2019[\"Q3\"].map(continents_dict)\ndf_responses[\"Continents\"] = df_responses[\"Q3\"].map(continents_dict)\n\ndf_2017[\"Country\"] = df_2017[\"Country\"].replace(country_long_name_dict)\ndf_2018[\"Q3\"] = df_2018[\"Q3\"].replace(country_long_name_dict)\ndf_2019[\"Q3\"] = df_2019[\"Q3\"].replace(country_long_name_dict)\ndf_responses[\"Q3\"] = df_responses[\"Q3\"].replace(country_long_name_dict)","b29bde5c":"df_2017['year'] = 2017\ndf_2017.rename(columns={\"Country\":\"Q3\",\"GenderSelect\":\"Q2\"}, inplace=True)\ndf_2018['year'] = 2018\ndf_2018.rename(columns={\"Q1\":\"Q2\",\"Q2\":\"Q1\"}, inplace=True)\ndf_2019['year'] = 2019\ndf_responses['year'] = 2020\n\ntotal_responses = pd.concat([df_2017[['Q2','Q3','year']],\n                             df_2018[['Q2','Q3','year']],\n                             df_2019[['Q2','Q3','year']],\n                             df_responses[['Q2','Q3','year']]])\n\ntotal_responses=total_responses.groupby(['year','Q3']).count()","ec41f4d7":"total_responses = total_responses.reset_index()\ntotal_responses.columns = [\"year\", \"country\", \"count\"]\ntotal_responses.sort_values(by=[\"year\",\"count\"], inplace=True, ascending=[True, True])","d09c29b5":"tl = Timeline()\nfor i in range(2017, 2021):\n    data = total_responses.loc[total_responses.year == i].tail(20)\n    bar=Bar(init_opts=opts.InitOpts(width =\"600px\")).add_xaxis(data['country'].values.tolist())\\\n    .add_yaxis('num responses', data['count'].values.tolist())\\\n    .set_series_opts(label_opts=opts.LabelOpts(position=\"inside\"))\\\n    .reversal_axis()\\\n    .set_global_opts(title_opts=opts.TitleOpts(title=\"Number of respondents wrt Country\", subtitle=\"2017 - 2020 Kaggle Survey\"),\n                     xaxis_opts=opts.AxisOpts(name='Count'), legend_opts=opts.LegendOpts(is_show=False))\n    grid = (\n    Grid()\n    .add(bar, grid_opts=opts.GridOpts(pos_left=\"20%\", pos_right=\"20%\")))\n    \n    tl.add(grid, \"year:{}\".format(i))\n    \ntl.add_schema(is_auto_play=True, play_interval=2000)\ntl.render_notebook()","5534d396":"data_2020=df_responses[['Q2','Q3','year']]\ndata_2020.loc[data_2020[\"Q3\"].str.contains(\"China\"), \"Q3\"]=\"China\"\ndata_2020.loc[data_2020[\"Q3\"].str.contains(\"USA\"), \"Q3\"]=\"United States\"\ndata_2020 = data_2020.Q3.value_counts()\nhigh=data_2020.max()\nlow = data_2020.min()\ndata_2020= data_2020.reset_index().values.tolist()","584777c6":"c = (\n    MapGlobe()\n    .add_schema()\n    .add(\n        maptype=\"world\",\n        series_name=\"World Responses\",\n        data_pair=data_2020,\n        is_map_symbol_show=False,\n        label_opts=opts.LabelOpts(is_show=False, formatter=\"{c}\"),\n    )\n    .set_global_opts(title_opts=opts.TitleOpts(title=\"Globe Map - Number of respondents\", subtitle=\"2020 Kaggle Survey\"),\n        visualmap_opts=opts.VisualMapOpts(\n            min_=low,\n            max_=high,\n            range_text=[\"max\", \"min\"],\n            is_calculable=True,\n            range_color=[\"lightskyblue\", \"yellow\", \"orangered\"],\n        )\n    ))\n    \nc.render_notebook()","bc3df136":"#tl = Timeline()\n\n#data_dict={2017: df_2017, 2018: df_2018, 2019:df_2019, 2020:df_responses}\n\n#for i in range(2017, 2021):\ndata = df_responses\n\nasia_df = data[data[\"Continents\"]==\"Asia\"]\namerica_df = data[data[\"Continents\"]==\"America\"]\neurope_df = data[data[\"Continents\"]==\"Europe\"]\nafrica_df = data[data[\"Continents\"]==\"Africa\"]\naustralia_df = data[data[\"Continents\"]==\"Australia\"]\nothers_df = data[data[\"Continents\"]==\"Others\"]\n\ncontinents_count_df = pd.DataFrame(data[\"Q2\"].value_counts())\ncontinents_count_df = continents_count_df.reset_index(drop=False)\ncontinents_count_df.columns = [\"Gender\",\"Count\"]\n\nasia_country_count_df = pd.DataFrame(asia_df[\"Q2\"].value_counts())\nasia_country_count_df = asia_country_count_df.reset_index(drop=False)\nasia_country_count_df.columns = [\"Gender\",\"Count\"]\n\namerica_country_count_df = pd.DataFrame(america_df[\"Q2\"].value_counts())\namerica_country_count_df = america_country_count_df.reset_index(drop=False)\namerica_country_count_df.columns = [\"Gender\",\"Count\"]\n\neurope_country_count_df = pd.DataFrame(europe_df[\"Q2\"].value_counts())\neurope_country_count_df = europe_country_count_df.reset_index(drop=False)\neurope_country_count_df.columns = [\"Gender\",\"Count\"]\n\nothers_country_count_df = pd.DataFrame(others_df[\"Q2\"].value_counts())\nothers_country_count_df = others_country_count_df.reset_index(drop=False)\nothers_country_count_df.columns = [\"Gender\",\"Count\"]\n\nafrica_country_count_df = pd.DataFrame(africa_df[\"Q2\"].value_counts())\nafrica_country_count_df = africa_country_count_df.reset_index(drop=False)\nafrica_country_count_df.columns = [\"Gender\",\"Count\"]\n\naustralia_country_count_df = pd.DataFrame(australia_df[\"Q2\"].value_counts())\naustralia_country_count_df = australia_country_count_df.reset_index(drop=False)\naustralia_country_count_df.columns = [\"Gender\",\"Count\"]\n\npie_world = (\n    Pie()\n    .add(\n        \"World\",\n        [list(z) for z in zip(continents_count_df.Gender, continents_count_df.Count)],\n        center=[\"10%\", \"50%\"],\n        radius=[60, 80],\n        label_opts=opts.LabelOpts(formatter=\"World\", position=\"center\"),\n    )\n    .add(\n        \"Asia\",\n        [list(z) for z in zip(asia_country_count_df.Gender, asia_country_count_df.Count)],\n        center=[\"30%\", \"30%\"],\n        radius=[60, 80],\n        label_opts=opts.LabelOpts(formatter=\"Asia\", position=\"center\"),\n    )\n    .add(\n        \"Europe\",\n        [list(z) for z in zip(europe_country_count_df.Gender, europe_country_count_df.Count)],\n        center=[\"50%\", \"30%\"],\n        radius=[60, 80],\n        label_opts=opts.LabelOpts(formatter=\"Europe\", position=\"center\"),\n    )\n    .add(\n        \"Africa\",\n        [list(z) for z in zip(africa_country_count_df.Gender, africa_country_count_df.Count)],\n        center=[\"70%\", \"30%\"],\n        radius=[60, 80],\n        label_opts=opts.LabelOpts(formatter=\"Africa\", position=\"center\"),\n    )\n    .add(\n        \"America\",\n        [list(z) for z in zip(america_country_count_df.Gender, america_country_count_df.Count)],\n        center=[\"30%\", \"70%\"],\n        radius=[60, 80],\n        label_opts=opts.LabelOpts(formatter=\"America\", position=\"center\"),\n    )\n    .add(\n        \"Australia\",\n        [list(z) for z in zip(australia_country_count_df.Gender, australia_country_count_df.Count)],\n        center=[\"50%\", \"70%\"],\n        radius=[60, 80],\n        label_opts=opts.LabelOpts(formatter=\"Australia\", position=\"center\"),\n    )\n    .add(\n        \"Others\",\n        [list(z) for z in zip(others_country_count_df.Gender, others_country_count_df.Count)],\n        center=[\"70%\", \"70%\"],\n        radius=[60, 80],\n        label_opts=opts.LabelOpts(formatter=\"Others\", position=\"center\"),\n    )\n    .set_global_opts(\n        title_opts=opts.TitleOpts(title=\"Gender Distribution\",subtitle=\"wrt Continents in 2020 Kaggle survey\" ),\n        legend_opts=opts.LegendOpts(\n            type_=\"scroll\", pos_top=\"5%\", pos_left=\"40%\", orient=\"horizontal\"\n        ),\n    )\n)\n\npie_world.render_notebook()\n\n#tl.add(pie_world, \"year:{}\".format(i))\n    \n#tl.add_schema(is_auto_play=True, play_interval=2000)\n#tl.render_notebook()","bef3c2cd":"viz_lst = [\"Q14_Part_1\", \"Q14_Part_2\", \"Q14_Part_3\", \"Q14_Part_4\", \"Q14_Part_5\", \"Q14_Part_6\", \"Q14_Part_7\", \"Q14_Part_8\", \n             \"Q14_Part_9\", \"Q14_Part_10\", \"Q14_Part_11\", \"Q14_OTHER\"] \nviz_df = df_responses.groupby([\"Continents\"])[viz_lst].count()\nviz_df.columns = [\"Matplotlib\", \"Seaborn\", \"Plotly\/Plotly Express\", \"Ggplot\/ggplot2\", \"Shiny\", \"D3 js\", \"Altair\",\n                  \"Bokeh\", \"Geoplotlib\", \"Leaflet\/Folium\", \"None\", \"Other\"]\nviz_df = viz_df.loc[[\"Asia\", \"America\", \"Europe\", \"Others\", \"Africa\", \"Australia\"], :]\nviz_df=viz_df.T","e1c464d6":"hm = (\n    HeatMap()\n    .add_xaxis(viz_df.index.to_list())\n    .add_yaxis(\n        \"num responses\",\n        [\"Asia\", \"America\", \"Europe\", \"Others\", \"Africa\", \"Australia\"],\n        pd.melt(viz_df.reset_index(), id_vars='index').values.tolist(),\n        label_opts=opts.LabelOpts(is_show=True, position=\"inside\"),\n    )\n    .set_global_opts(\n        xaxis_opts=opts.AxisOpts(axislabel_opts=opts.LabelOpts(rotate=-30)),\n        title_opts=opts.TitleOpts(title=\"Popular Visualization Libraries\", subtitle=\"wrt Continents\" ),\n        legend_opts=opts.LegendOpts(is_show=False),\n        visualmap_opts=opts.VisualMapOpts(\n            min_=0, max_=10000, is_calculable=True, orient=\"horizontal\", pos_top=\"2%\", pos_right=\"45%\"\n        )\n    )\n)\nhm.render_notebook()\n\ngrid = (\n    Grid()\n    .add(hm, grid_opts=opts.GridOpts(pos_bottom=\"20%\", pos_right=\"25%\"))\n)\ngrid.render_notebook()","87d66115":"viz_lst = [\"Q14_Part_1\", \"Q14_Part_2\", \"Q14_Part_3\", \"Q14_Part_4\", \"Q14_Part_5\", \"Q14_Part_6\", \"Q14_Part_7\", \"Q14_Part_8\", \n             \"Q14_Part_9\", \"Q14_Part_10\", \"Q14_Part_11\", \"Q14_OTHER\"] \nviz_df = df_responses.groupby([\"Q5\"])[viz_lst].count()\nviz_df.columns = [\"Matplotlib\", \"Seaborn\", \"Plotly\/Plotly Express\", \"Ggplot\/ggplot2\", \"Shiny\", \"D3 js\", \"Altair\",\n                  \"Bokeh\", \"Geoplotlib\", \"Leaflet\/Folium\", \"None\", \"Other\"]","5ff70574":"hm = (\n    HeatMap()\n    .add_xaxis(viz_df.index.to_list())\n    .add_yaxis(\n        \"num responses\",\n        viz_df.columns.tolist(),\n        pd.melt(viz_df.reset_index(), id_vars='Q5').values.tolist(),\n        label_opts=opts.LabelOpts(is_show=True, position=\"inside\"),\n    )\n    .set_global_opts(\n        xaxis_opts=opts.AxisOpts(axislabel_opts=opts.LabelOpts(rotate=-30)),\n        yaxis_opts=opts.AxisOpts(axislabel_opts=opts.LabelOpts(rotate=30)),\n        title_opts=opts.TitleOpts(title=\"Popular Visualization Libraries\", subtitle=\"wrt Profession\" ),\n        legend_opts=opts.LegendOpts(is_show=False),\n        visualmap_opts=opts.VisualMapOpts(\n            min_=0, max_=4000, is_calculable=True, orient=\"horizontal\", pos_top=\"2%\", pos_right=\"45%\"\n        )\n    )\n)\n#hm.render_notebook()\n\ngrid = (\n    Grid()\n    .add(hm, grid_opts=opts.GridOpts(pos_bottom=\"20%\", pos_left=\"15%\", pos_right=\"20%\"))\n)\ngrid.render_notebook()","84ff06d3":"q5=df_responses['Q5'].value_counts().to_frame()\nq5=q5.reset_index()\nq5.columns=['Profession', '# of responses']\nq5['pct'] = round(100 * q5['# of responses']\/q5['# of responses'].sum())\n\nbar=Bar(init_opts=opts.InitOpts(width =\"600px\")).add_xaxis(q5.Profession.values.tolist())\\\n.add_yaxis('', q5['# of responses'].values.tolist())\\\n.set_global_opts(title_opts=opts.TitleOpts(title=\"Number of respondents based on Profession\",\n                                           subtitle=\"2020 Kaggle Survey\"), \n                 xaxis_opts=opts.AxisOpts(name='Degree', axislabel_opts=opts.LabelOpts(rotate=-25)),\n                 legend_opts=opts.LegendOpts(is_show=False),)\\\n.set_series_opts(label_opts=opts.LabelOpts(position=\"inside\"))\n\npie = (\n    Pie()\n    .add(\n        series_name=\"percent responses\",\n        data_pair=[list(z) for z in zip(q5.Profession, q5.pct)],\n        radius=[\"10%\",\"20%\"],\n        center=[\"65%\", \"25%\"],\n    )\n    .set_series_opts(label_opts=opts.LabelOpts(formatter=\"{b}:{c}%\"),\n        tooltip_opts=opts.TooltipOpts(formatter=\"{b}:{c}%\"))\n)\n\nbar.overlap(pie)\n\ngrid = (\n    Grid()\n    .add(bar, grid_opts=opts.GridOpts(pos_bottom=\"25%\", pos_right=\"35%\"))\n)\ngrid.render_notebook()","b323319f":"q6=df_responses['Q6'].value_counts().to_frame()\nq6=q6.reset_index()\nq6.columns=['Coding Experience', '# of responses']\nq6['pct'] = round(100 * q6['# of responses']\/q6['# of responses'].sum())\n\nbar=Bar(init_opts=opts.InitOpts(width =\"600px\")).add_xaxis(q6[\"Coding Experience\"].values.tolist())\\\n.add_yaxis('', q6['# of responses'].values.tolist())\\\n.set_global_opts(title_opts=opts.TitleOpts(title=\"Programming Experience of the respondents\",\n                                           subtitle=\"2020 Kaggle Survey\"), \n                 xaxis_opts=opts.AxisOpts(name='experience', axislabel_opts=opts.LabelOpts(rotate=-25)),\n                 legend_opts=opts.LegendOpts(is_show=False),)\\\n.set_series_opts(label_opts=opts.LabelOpts(position=\"inside\"))\n\npie = (\n    Pie()\n    .add(\n        series_name=\"percent responses\",\n        data_pair=[list(z) for z in zip(q6[\"Coding Experience\"], q6.pct)],\n        radius=[\"10%\",\"20%\"],\n        center=[\"55%\", \"25%\"],\n    )\n    .set_series_opts(label_opts=opts.LabelOpts(formatter=\"{b}:{c}%\"),\n        tooltip_opts=opts.TooltipOpts(formatter=\"{b}:{c}%\"))\n)\n\nbar.overlap(pie)\n\ngrid = (\n    Grid()\n    .add(bar, grid_opts=opts.GridOpts(pos_bottom=\"25%\", pos_right=\"35%\"))\n)\ngrid.render_notebook()","97c9718e":"dataprofs = df_responses[df_responses[\"Q5\"]!=\"Student\"]\nstudents = df_responses[df_responses[\"Q5\"]==\"Student\"]\n\nq7 = [col for col in df_responses.columns if 'Q7' in col]\n\n\nlanguages = []\nfor qn in q7:\n    for val in dataprofs[qn].unique():\n        languages.append(val)\n        \nlanguages = [lang for lang in languages if str(lang)!='nan']\n\nprof_langs = round(100 * ((dataprofs.shape[0] - dataprofs[q7].isnull().sum()) \/ dataprofs.shape[0]), 2)\nstudent_langs = round(100 *((students.shape[0] - students[q7].isnull().sum()) \/ students.shape[0]), 2)\n\nprof_langs = prof_langs.reset_index()\nprof_langs['language'] = languages\nprof_langs.rename(columns={0: \"pct_prof\"}, inplace=True)\nprof_langs.sort_values(by=[\"pct_prof\"], inplace=True)\nstudent_langs = student_langs.reset_index()\nstudent_langs['language'] = languages\nstudent_langs.rename(columns={0: \"pct_stud\"}, inplace=True)\nstudent_langs.sort_values(by=[\"pct_stud\"], inplace=True)\n\nlangs=pd.merge(prof_langs, student_langs, on='language')","0377cca2":"profs_recom_lang = dataprofs['Q8'].value_counts().reset_index()\nprofs_recom_lang['prof_pct'] = round(100*(profs_recom_lang['Q8']\/profs_recom_lang['Q8'].sum()),2)\nstuds_recom_lang = students['Q8'].value_counts().reset_index()\nstuds_recom_lang['stud_pct'] = round(100*(studs_recom_lang['Q8']\/studs_recom_lang['Q8'].sum()),2)\nrcom_lang=pd.merge(profs_recom_lang, studs_recom_lang, on='index')\nrcom_lang.sort_values(by=[\"prof_pct\"], inplace=True)","16fd9f5d":"bar=Bar(init_opts=opts.InitOpts(width=\"650px\")).add_xaxis(langs['language'].values.tolist())\\\n.add_yaxis('Data Professionals', langs['pct_prof'].values.tolist())\\\n.add_yaxis('Students', langs['pct_stud'].values.tolist())\\\n.set_series_opts(label_opts=opts.LabelOpts(position=\"right\", formatter=\"{c}%\"))\\\n.reversal_axis()\\\n.set_global_opts(title_opts=opts.TitleOpts(title=\"Popular Programming Language\"),\n                 xaxis_opts=opts.AxisOpts(name='% pct'), \n                 yaxis_opts=opts.AxisOpts(name='Language'),\n                 legend_opts=opts.LegendOpts(type_=\"scroll\", pos_top=\"50%\", pos_right=\"30%\", orient=\"vertical\"))\n\nbar2=Bar(init_opts=opts.InitOpts(width=\"650px\")).add_xaxis(rcom_lang['index'].values.tolist())\\\n.add_yaxis('Data Professionals', rcom_lang['prof_pct'].values.tolist())\\\n.add_yaxis('Students', rcom_lang['stud_pct'].values.tolist())\\\n.set_series_opts(label_opts=opts.LabelOpts(position=\"right\", formatter=\"{c}%\"))\\\n.reversal_axis()\\\n.set_global_opts(title_opts=opts.TitleOpts(title=\"Popular Recommended Languages\"),\n                 xaxis_opts=opts.AxisOpts(name='% pct'), \n                 yaxis_opts=opts.AxisOpts(name='Language'),\n                 legend_opts=opts.LegendOpts(type_=\"scroll\", pos_top=\"50%\", pos_right=\"50%\", orient=\"vertical\"))\n\ngrid = (\n    Grid()\n    .add(bar, grid_opts=opts.GridOpts(pos_left=\"10%\", pos_right=\"15%\"))\n)\n\ngrid2 = (\n    Grid()\n    .add(bar2, grid_opts=opts.GridOpts(pos_left=\"10%\", pos_right=\"15%\"))\n)\n\ntab = Tab()\n\ntab.add(grid, \"Current Language\")\ntab.add(grid2, \"Recommended Language\")","4007ac1c":"q9 = [col for col in df_responses.columns if 'Q9' in col]\n\nides = []\nfor qn in q9:\n    for val in dataprofs[qn].unique():\n        ides.append(val)\n        \nides = [ide.strip() for ide in ides if str(ide)!='nan']\n\nprof_ides = round(100 * ((dataprofs.shape[0] - dataprofs[q9].isnull().sum()) \/ dataprofs.shape[0]), 2)\nstudent_ides = round(100 *((students.shape[0] - students[q9].isnull().sum()) \/ students.shape[0]), 2)\n\nprof_ides = prof_ides.reset_index()\nprof_ides['ides'] = ides\nprof_ides.rename(columns={0: \"pct_prof\"}, inplace=True)\nprof_ides.sort_values(by=[\"pct_prof\"], inplace=True)\nstudent_ides = student_ides.reset_index()\nstudent_ides['ides'] = ides\nstudent_ides.rename(columns={0: \"pct_stud\"}, inplace=True)\nstudent_ides.sort_values(by=[\"pct_stud\"], inplace=True)\n\nides_df = pd.merge(prof_ides, student_ides, on='ides')\nides_df.loc[ides_df[\"ides\"].str.contains('Jupyter'), \"ides\"] = \"Jupyter\"\nides_df.loc[ides_df[\"ides\"].str.contains('(VSCode)'), \"ides\"] = \"VSCode\"","8b44b5b0":"q10 = [col for col in df_responses.columns if 'Q10' in col]\n\nnbs = []\nfor qn in q10:\n    for val in dataprofs[qn].unique():\n        nbs.append(val)\n        \nnbs = [nb.strip() for nb in nbs if str(nb)!='nan']\n\nprof_nbs = round(100 * ((dataprofs.shape[0] - dataprofs[q10].isnull().sum()) \/ dataprofs.shape[0]), 2)\nstudent_nbs = round(100 *((students.shape[0] - students[q10].isnull().sum()) \/ students.shape[0]), 2)\n\nprof_nbs = prof_nbs.reset_index()\nprof_nbs['nbs'] = nbs\nprof_nbs.rename(columns={0: \"pct_prof\"}, inplace=True)\nprof_nbs.sort_values(by=[\"pct_prof\"], inplace=True)\nstudent_nbs = student_nbs.reset_index()\nstudent_nbs['nbs'] = nbs\nstudent_nbs.rename(columns={0: \"pct_stud\"}, inplace=True)\nstudent_nbs.sort_values(by=[\"pct_stud\"], inplace=True)\n\nnbs_df = pd.merge(prof_nbs, student_nbs, on='nbs')\nnbs_df['nbs'] = nbs_df['nbs'].str.replace(\" Notebooks\", \"\").str.replace(\" Studio\", \"\")","930baad2":"profs_envs = dataprofs['Q11'].value_counts()\nprofs_envs=profs_envs.reset_index()\nprofs_envs.rename(columns={\"Q11\": \"pct_prof\"}, inplace=True)\nprofs_envs[\"pct_prof\"] = round(100*(profs_envs[\"pct_prof\"]\/profs_envs[\"pct_prof\"].sum()),2)\nprofs_envs.sort_values(by=[\"pct_prof\"], inplace=True)\n\nstudent_envs = students['Q11'].value_counts()\nstudent_envs=student_envs.reset_index()\n\nstudent_envs.rename(columns={\"Q11\": \"pct_stud\"}, inplace=True)\nstudent_envs[\"pct_stud\"] = round(100*(student_envs[\"pct_stud\"]\/student_envs[\"pct_stud\"].sum()),2)\nstudent_envs.sort_values(by=[\"pct_stud\"], inplace=True)\n\nenvs_df =pd.merge(profs_envs, student_envs, on='index')\nenvs_df.rename(columns={\"index\": \"envs\"}, inplace=True)","4229f3cf":"q12 = [col for col in df_responses.columns if 'Q12' in col]\n\nnbs = []\nfor qn in q12:\n    for val in dataprofs[qn].unique():\n        nbs.append(val)\n        \nnbs = [nb.strip() for nb in nbs if str(nb)!='nan']\n\nprof_nbs = round(100 * ((dataprofs.shape[0] - dataprofs[q12].isnull().sum()) \/ dataprofs.shape[0]), 2)\nstudent_nbs = round(100 *((students.shape[0] - students[q12].isnull().sum()) \/ students.shape[0]), 2)\n\nprof_nbs = prof_nbs.reset_index()\nprof_nbs['nbs'] = nbs\nprof_nbs.rename(columns={0: \"pct_prof\"}, inplace=True)\nprof_nbs.sort_values(by=[\"pct_prof\"], inplace=True)\nstudent_nbs = student_nbs.reset_index()\nstudent_nbs['nbs'] = nbs\nstudent_nbs.rename(columns={0: \"pct_stud\"}, inplace=True)\nstudent_nbs.sort_values(by=[\"pct_stud\"], inplace=True)\n\nhardware_df = pd.merge(prof_nbs, student_nbs, on='nbs')\n\nhardware_df.rename(columns={\"nbs\": \"hardware\"}, inplace=True)","a72c2f4e":"bar3=Bar(init_opts=opts.InitOpts(width=\"650px\")).add_xaxis(ides_df['ides'].values.tolist())\\\n.add_yaxis('Data Professionals', ides_df['pct_prof'].values.tolist())\\\n.add_yaxis('Students', ides_df['pct_stud'].values.tolist())\\\n.reversal_axis()\\\n.set_series_opts(label_opts=opts.LabelOpts(position=\"right\", formatter=\"{c}%\"))\\\n.set_global_opts(title_opts=opts.TitleOpts(title=\"Popular IDEs\"),\n                 yaxis_opts=opts.AxisOpts(name='IDEs', axislabel_opts=opts.LabelOpts(rotate=20)), \n                 xaxis_opts=opts.AxisOpts(name='% pct'),\n                 legend_opts=opts.LegendOpts(type_=\"scroll\", pos_top=\"50%\", pos_left=\"50%\", orient=\"vertical\"))\n\n\nbar4=Bar(init_opts=opts.InitOpts(width=\"650px\")).add_xaxis(nbs_df['nbs'].values.tolist())\\\n.add_yaxis('Data Professionals', nbs_df['pct_prof'].values.tolist())\\\n.add_yaxis('Students', nbs_df['pct_stud'].values.tolist())\\\n.reversal_axis()\\\n.set_series_opts(label_opts=opts.LabelOpts(position=\"right\", formatter=\"{c}%\"))\\\n.set_global_opts(title_opts=opts.TitleOpts(title=\"Popular Notebook Environments\"),\n                 yaxis_opts=opts.AxisOpts(name='NBs', axislabel_opts=opts.LabelOpts(rotate=20)), \n                 xaxis_opts=opts.AxisOpts(name='% pct'),\n                 legend_opts=opts.LegendOpts(type_=\"scroll\", pos_top=\"50%\", pos_left=\"50%\", orient=\"vertical\"))\n\nbar5=Bar(init_opts=opts.InitOpts(width=\"650px\")).add_xaxis(envs_df['envs'].values.tolist())\\\n.add_yaxis('Data Professionals', envs_df['pct_prof'].values.tolist())\\\n.add_yaxis('Students', envs_df['pct_stud'].values.tolist())\\\n.reversal_axis()\\\n.set_series_opts(label_opts=opts.LabelOpts(position=\"right\", formatter=\"{c}%\"))\\\n.set_global_opts(title_opts=opts.TitleOpts(title=\"Computing Platform\"),\n                 yaxis_opts=opts.AxisOpts(name='ENVs', axislabel_opts=opts.LabelOpts(rotate=20)), \n                 xaxis_opts=opts.AxisOpts(name='% pct'),\n                 legend_opts=opts.LegendOpts(type_=\"scroll\", pos_top=\"50%\", pos_left=\"50%\", orient=\"vertical\"))\n\nbar6=Bar(init_opts=opts.InitOpts(width=\"650px\")).add_xaxis(hardware_df['hardware'].values.tolist())\\\n.add_yaxis('Data Professionals', hardware_df['pct_prof'].values.tolist())\\\n.add_yaxis('Students', hardware_df['pct_stud'].values.tolist())\\\n.reversal_axis()\\\n.set_series_opts(label_opts=opts.LabelOpts(position=\"right\", formatter=\"{c}%\"))\\\n.set_global_opts(title_opts=opts.TitleOpts(title=\"Popular Hardware\"),\n                 yaxis_opts=opts.AxisOpts(name='HWs', axislabel_opts=opts.LabelOpts(rotate=20)), \n                 xaxis_opts=opts.AxisOpts(name='% pct'),\n                 legend_opts=opts.LegendOpts(type_=\"scroll\", pos_top=\"50%\", pos_left=\"50%\", orient=\"vertical\"))\n\ngrid3 = (\n    Grid()\n    .add(bar3, grid_opts=opts.GridOpts(pos_left=\"10%\", pos_right=\"25%\"))\n)\n\ngrid4 = (\n    Grid()\n    .add(bar4, grid_opts=opts.GridOpts(pos_left=\"20%\", pos_right=\"15%\"))\n)\n\ngrid5 = (\n    Grid()\n    .add(bar5, grid_opts=opts.GridOpts(pos_left=\"30%\", pos_right=\"15%\"))\n)\ngrid6 = (\n    Grid()\n    .add(bar6, grid_opts=opts.GridOpts(pos_left=\"10%\", pos_right=\"15%\"))\n)\n\n\ntab.add(grid3, \"IDEs\")\ntab.add(grid4, \"Hosted NBs\")\ntab.add(grid5, \"Computing Platform\")\ntab.add(grid6, \"Specialized HW\")\ntab.render_notebook()","d807b2bf":"data = df_responses['Q22'].value_counts()\ndata = data.reset_index()\ndata.rename(columns={\"index\":\"response\"}, inplace=True)\ndata['pct'] = round(100*(data['Q22']\/data['Q22'].sum()),2)\ndata.sort_values(by='pct', inplace=True, ascending=False)\npie = (\n    Pie()\n    .add(\n        series_name=\"ML Adoptions\",\n        data_pair=[list(z) for z in zip(data['response'], data['pct'])],\n        radius=[\"20%\",\"40%\"],\n        center=[\"50%\", \"60%\"],rosetype=\"area\"\n    )\n    .set_series_opts(label_opts=opts.LabelOpts(formatter=\"{c}%\"),\n        tooltip_opts=opts.TooltipOpts(formatter=\"{b}:{c}%\"))\\\n    .set_global_opts(title_opts=opts.TitleOpts(title=\"ML Adoptions\"),\n                 legend_opts=opts.LegendOpts(type_=\"scroll\", pos_top=\"3%\", orient=\"vertical\"))\n)\npie.render_notebook()","11f974fd":"**Current Programming Language**\n- `Python`, `SQL`, `R` are the primary languages used by majority of the data professionals\n- `Python`, `C++`, `C` are used more often by students -> could be from their course curriculum\n\n**Recommended Programming Language**\n- `Python` without any doubt\n\n**IDEs**\n- It is very clear that `Jupyter` is favoured among both the students and professionals\n- `VSCode`,`Pycharm` are follwed after `Jupyter`\n\n**Hosted Notebooks**\n- `Google Colab` and `Kaggle` are most widely used\n","01bf26c9":"Most of the survey participants have atleast `3-5 years` of programming experience","4d176c93":"## Programming Experience","e6ad8b9b":"2018 has highest number of survey participants and have `3553` respondents more than 2020","e50e867b":"Anywhere in the world - `Matplotlib` dominates as a popular library followed by `Seaborn` -> Hopefully `pyecharts` joins the list soon","fed255b7":"In 2017 and 2018 - `US` is the predominant country of the survey respondents\nBut from 2019 onwards - `India` goes to number 1 position and followed by `US`","40ac6b09":"## Education Level distribution\n\n- approx 77% of the survey respondents are holding a degree","c7fad5f9":"## Distribution based on Country","40e5322d":"## Distribution based on Sex\n\n- majority of the survey respondents are `male`","46ab8f6b":"## Visualization Libraries","382e9882":"The survey is Male dominated over various continents","f2afcf08":"Almost all the professionals and students use `Matplotlib` as the commmon visualization tool as expected","f22876da":"## Professionals v Students","6a761a38":"## Age Group Disribution\n\n- Maximum number of respondents come from the 25-29 age group","244ce648":"## Distribution based on Profession","802b3915":"### References\n\n* [Enthusiast to Data Professional - What changes?](https:\/\/www.kaggle.com\/spitfire2nd\/enthusiast-to-data-professional-what-changes)\n* [Kagglers seen by continents](https:\/\/www.kaggle.com\/dwin183287\/kagglers-seen-by-continents)\n* [Education level affects data analysis? ](https:\/\/www.kaggle.com\/michau96\/education-level-affects-data-analysis)\n* [KYC-Know YOur Community!](https:\/\/www.kaggle.com\/chandramanaha\/kyc-know-your-community)","a505908e":"I am continously imporving -> **This kernel is Work in Progress**\n\n*What to expect in this Kernel:*\n\n- I have created this kernel using **pyecharts** a new visualization library which is built on [Apache Echarts](http:\/\/echarts.apache.org\/en\/index.html)\n- This is a very new library and i wanted to try it out for a side project because of the cool animantions it has.\n- A huge shout out to the [team](https:\/\/pyecharts.org\/#\/en-us\/team) who developed it.\n- I hope this kernel will serve as a learning oppurtunity for kagglers who want to try out this new library.\n- Most of the visualizations are taken inspirations from various kagglers - [@dwin183287](https:\/\/www.kaggle.com\/dwin183287), [@michau96](https:\/\/www.kaggle.com\/michau96), [@chandramanaha](https:\/\/www.kaggle.com\/chandramanaha),[@spitfire2nd](https:\/\/www.kaggle.com\/spitfire2nd)\n\n**References are below-> Do checkout their kernels**"}}