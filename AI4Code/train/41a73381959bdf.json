{"cell_type":{"da3a4a92":"code","d3872165":"code","66cbb9a8":"code","e0c73d2b":"code","a9c9feb7":"code","bfcac32f":"code","f6bd96ec":"code","2e1bfeee":"code","6db5700e":"code","32020aed":"code","7277d621":"code","1403fb24":"code","e2f7cb2c":"code","d86cfdf1":"code","3804d832":"code","f7fc540a":"code","310aab52":"code","4fab4a94":"code","ea506134":"code","5f9dc9ef":"code","4495b753":"code","fa85eb5d":"code","ab7da7a0":"code","01d6960a":"code","ae58acd3":"code","035963cf":"code","6e65c610":"code","1760854c":"code","f5b46d95":"code","e176a20c":"code","c661251e":"code","c29f6640":"code","40ac443b":"code","b305440a":"code","a565f5ed":"code","fa9ae3a8":"code","9915d92a":"code","5ba9be4c":"code","256f161c":"code","2ce94ccb":"code","2847e067":"code","faa1ca8d":"code","4e008f4b":"code","104f5820":"code","7cc6299b":"code","71a8f57d":"code","4e889f58":"code","b81bbfc0":"code","9e77d61f":"code","1c0f1712":"code","426549af":"code","f4318d3b":"code","7d3ad4a2":"code","c2162917":"code","71d5be59":"code","ee486d31":"code","8c657e2b":"code","a2404309":"code","0bce353f":"code","3f7df1bc":"code","9a8e3dc8":"code","812b8822":"code","8b8061f8":"code","aa289f31":"code","0529cbb9":"code","09fb9ad6":"code","dcc4d4b1":"code","c6b91777":"code","685bb31e":"code","85bcd965":"code","f43d1efc":"code","dcefa1b7":"code","40625ac2":"code","06be0d8b":"code","75bb2990":"code","d294fb26":"code","126fb110":"code","af445e7b":"code","ff5a45fc":"code","eaba7b6c":"code","518ca2ca":"code","16511148":"code","8d169f62":"code","261586d1":"code","a8685863":"code","9b491eb6":"code","a64d3114":"code","a78f07d9":"code","c94ea359":"code","fc146491":"code","6b4b1dc2":"code","8a1ed644":"code","6eeb9a16":"code","bd0ffc12":"markdown","446f1438":"markdown","09270a2e":"markdown","c6b757db":"markdown","53070882":"markdown","9524179c":"markdown","a81761dd":"markdown","c306849d":"markdown","6b401075":"markdown","3e0e9a0a":"markdown","52a03868":"markdown","6d380566":"markdown","95506f3e":"markdown","2a28a949":"markdown","3795311d":"markdown"},"source":{"da3a4a92":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","d3872165":"data=pd.read_csv('..\/input\/championsdata.csv')","66cbb9a8":"data.info()","e0c73d2b":"data.corr()","a9c9feb7":"#correlation map\nf,ax = plt.subplots(figsize=(15,15))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","bfcac32f":"data.head(10)","f6bd96ec":"data.columns","2e1bfeee":"# Line Plot\ndata.FGA.plot(kind = 'line', color = 'b',label = 'FGA',linewidth=1,alpha = 0.9,grid = True,linestyle = ':')\ndata.PTS.plot(color = 'r',label = 'PTS',linewidth=1, alpha = 0.9,grid = True,linestyle = '-.')\nplt.legend(loc='upper right')     # legend = puts label into plot\nplt.xlabel('x axis')              # label = name of label\nplt.ylabel('y axis')\nplt.title('Line Plot')            # title = title of plot\nplt.show()","6db5700e":"# Scatter Plot \ndata.plot(kind='scatter', x='FG', y='FGA' , alpha = 0.5,color = 'red')\nplt.xlabel('PTS')              \nplt.ylabel('FGA')\nplt.title('Attack Defense Scatter Plot')\nplt.show()","32020aed":"# Histogram\ndata.TRB.plot(kind = 'hist',bins = 40,figsize = (10,10))\nplt.show()","7277d621":"# clf() = cleans it up again you can start a fresh\ndata.TRB.plot(kind = 'hist',bins = 50)\nplt.clf()","1403fb24":"dictionary={'italy': 'roma', 'spain': 'madrid'}\nprint(dictionary.keys())\nprint(dictionary.values())","e2f7cb2c":"dictionary ['italy'] = 'roma'\nprint(dictionary)\ndictionary['spain'] = 'madrid'\nprint(dictionary)\ndictionary ['turkey'] = 'istanbul'\nprint(dictionary)\ndel dictionary ['spain']\nprint(dictionary)\nprint('turkey' in dictionary) \ndictionary.clear()\nprint(dictionary)","d86cfdf1":"data=pd.read_csv('..\/input\/championsdata.csv')","3804d832":"series = data['TRB']\nprint(type(series))\ndata_frame = data[['TRB']]\nprint(type(data_frame))","f7fc540a":"#comperation operator\nprint(5>4)\nprint(5!=4)\n# Boolen operators","310aab52":"x = data['FGA']>100    # There are only 5 team who have higher FGA value than 100\ndata[x]","4fab4a94":"#There are only 2 team who have higher total rebound value than 50 and higher scores value than 125\ndata[np.logical_and(data['TRB']>50, data['PTS']>125 )]","ea506134":"# This is also same with previous code line. Therefore we can also use '&' for filtering.\ndata[(data['TRB']>50) & (data['PTS']>125)]","5f9dc9ef":"i = 0\nwhile i != 8 :\n    print('i is: ',i)\n    i +=2 \nprint(i,' is equal to 8')","4495b753":"lis = [1,2,3,4,5,6,7]\nfor i in lis:\n    print('i is: ', i)\nprint('')\n\nfor index, value in enumerate(lis):\n    print(index, ' : ' ,value)\nprint('')\n\ndictionary={'turkey': 'istanbul', 'italy': 'roma'}\nfor key, value in dictionary.items():\n    print(key, ' : ', value)\nprint('')\n\nfor index, value in data[['TRB']][0:1].iterrows():\n    print(index, ' : ', value)\n","fa85eb5d":"def tuble_ex():\n    'return defined t tuble'\n    t=(1,2,3)\n    return t\nx,y,z = tuble_ex()\nprint(x, y, z)","ab7da7a0":"x = 5\ndef f():\n    x=8\n    return x\nprint(x)       # x = 5 global scope\nprint(f())     # x= 8 local scope\n","01d6960a":"x=3\ndef f():\n    y=x*2\n    return y\nprint(f())\n","ae58acd3":"import builtins\ndir(builtins)","035963cf":"def square():\n    'return square of value'\n    def add():\n        'add two local variable'\n        x=3\n        y=9\n        z=x+y\n        return z\n    return add()**2\nprint(square())\n    ","6e65c610":"def f(a, b = 1 , c = 4):\n    x = a + b + c\n    return x\nprint(f(5))\n# what if we want to change default arguments\nprint(f(4,5,6))","1760854c":"def f(*args):\n    for i in args:\n        print(i)\n\n        \nf(1)\nprint('')\nf(1,2,3,4)\n\n\ndef f(**kwargs):\n    '''print key and value of dictionary '''\n    for key, value in kwargs.items():\n        print(key, ' : ', value)\nf(country = 'turkey', capital='istanbul', population = 123456)\n","f5b46d95":"square = lambda x : x**2\nprint(square(3))\ntot = lambda x,y,z : x+y+z\nprint(tot(2,6,9))\n","e176a20c":"number_list=[4,5,6]\ny = map(lambda x : x**2, number_list)\nprint(list(y))","c661251e":"name = 'ronaldo '\nit = iter(name)\nprint(next(it))\nprint(*it)","c29f6640":"list1 = [1,3,5,7]\nlist2 = [2,4,6,8]\nz = zip(list1,list2)\nprint(z)\nz_list = list(z)\nprint(z_list)","40ac443b":"un_zip = zip(*z_list)\nun_list1, un_list2 = list(un_zip)\nprint(un_list1)\nprint(un_list2)\nprint(type(un_list2))","b305440a":"num1= [1,5,9]\nnum2= [i + 1 for i in num1 ]\nprint(num2)","a565f5ed":"num1 = [3,6,9]\nnum2 = [i**2 if i==10 else i-5 if i < 7 else i+5 for i in num1]\nprint(num2)","fa9ae3a8":"#lets classify team  whether they have strong or weak scores . Our threshold is average speed.\nthresold = sum(data.PTS) \/ len( data.PTS )\ndata['team_level'] = ['strong ' if i > thresold else 'weak' for i in data.PTS ]\ndata.loc[:10, ['team_level' , 'PTS']]","9915d92a":"data = pd.read_csv('..\/input\/championsdata.csv')\ndata.head()","5ba9be4c":"data.tail()","256f161c":"data.columns","2ce94ccb":"data.shape","2847e067":"data.info()","faa1ca8d":"# For example lets look frequency of teams types\nprint(data['Team'].value_counts(dropna =False))","4e008f4b":"data.describe()","104f5820":"data.boxplot(column=\"FGP\", by=\"TP\" )\nplt.show()","7cc6299b":"data_new =data.head()\ndata_new\n","71a8f57d":"melted = pd.melt(frame= data_new, id_vars= 'Team', value_vars= ['AST', 'TRB'])\nmelted","4e889f58":"melted.pivot( index= 'Team', columns= 'variable', values = 'value')","b81bbfc0":"data1= data.head()\ndata2= data.tail()\nconc_data_row= pd.concat([data1,data2], axis=0, ignore_index =True )\nconc_data_row","9e77d61f":"data1 = data['FG'].head()\ndata2 = data['FGA'].head()\nconc_data_cool= pd.concat ([data1, data2], axis= 1)\nconc_data_cool","1c0f1712":"data.dtypes","426549af":"# lets convert object(str) to categorical and int to float.\ndata['Team'] = data['Team'].astype('category')\ndata['FGP'] = data['FGP'].astype('float')","f4318d3b":"data.dtypes","7d3ad4a2":"data.info()","c2162917":"data['TPP '].value_counts(dropna = False)\n# As you can see, there are 6 NAN value","71d5be59":"# Lets drop nan values\ndata1 = data # also we will use data to fill missing value so I assign it to data1 variable\ndata1[ 'TPP'].dropna(inplace = True) # inplace = True means we do not assign it to new variable. Changes automatically assigned to data\n# So does it work ?","ee486d31":"assert 2==2  #return nothing because it is true","8c657e2b":"assert  data['TPP'].notnull().all()  # returns nothing because we do not have nan values","a2404309":"country = ['Turkey', 'Germany', 'Italy', 'France','Denmark']\n\npopulation = ['15', '18', '20', '12','14']\nlist_label =  ['country', 'population']\nlist_col = [country, population,]\nzipped = list(zip(list_label, list_col))\ndata_dict = dict(zipped)\ndf = pd.DataFrame(data_dict)\ndf\n","0bce353f":"df ['capital'] = ['istanbul', 'berlin', 'roma', 'paris', 'Copenhagen']\ndf","3f7df1bc":"df ['income'] = 0\ndf","9a8e3dc8":"#plotting all data\ndata1 = data.loc [:,['FG', 'FGA', 'PTS']]\ndata1.plot()","812b8822":"data1.plot(subplots = True)\nplt.show()","8b8061f8":"data1.plot(kind='scatter', x='FG', y='FGA'  )\nplt.show()","aa289f31":"data1.plot(kind='hist', y='FGA' , bins = 50 , range= (60,100), normed = True  )\nplt.show()","0529cbb9":"fig,axes = plt.subplots (nrows= 2 ,ncols= 1)\ndata1.plot(kind= 'hist', y='FGA', bins= 50 , range= (60,100), normed = True, ax= axes[0])\ndata1.plot(kind= 'hist', y='FGA', bins= 50 , range= (60,100), normed = True, ax= axes[1], cumulative = True)\nplt.savefig= ( 'graph.png ')\nplt.show()\n","09fb9ad6":"data.describe()","dcc4d4b1":"time_list= ['1996-06-29', '1996-08-12']\nprint(type(time_list[1]))\ndatetime_object = pd.to_datetime(time_list)\nprint(type(datetime_object))","c6b91777":"import warnings\nwarnings.filterwarnings(\"ignore\")\ndata2 = data.head()\ndate_list= ['1980-06-29', '1980-07-29', '1980-09-20', '1980-09-22 ', '1981-01-9']\ndatetime_object = pd.to_datetime(date_list)\ndata2 ['date']= datetime_object\ndata2 = data2.set_index('date')\ndata2","685bb31e":"print(data2.loc['1980-09-20'])\nprint(data2.loc['1980-09-20' : '1980-09-29'])\n","85bcd965":"data2.resample('A').mean()","f43d1efc":"#Let's sample again according to the months\ndata2.resample('M').mean()","dcefa1b7":"data2.resample('M').first().interpolate('linear')","40625ac2":"data2.resample('M').mean().interpolate('linear')","06be0d8b":"boolean =data.FGA >100\ndata[boolean]","75bb2990":"first_filter = data.FGA>90\nsecond_filter = data.FG>50\ndata[first_filter & second_filter]\n","d294fb26":"data.FGA[data.FG< 28]","126fb110":"data.head()","af445e7b":"def div(n):\n    return n\/2\ndata.FGA.apply(div)","ff5a45fc":"data.FGA.apply(lambda n: n\/2)","eaba7b6c":"data['total_power'] = data.FGA + data.PTS\ndata.head()","518ca2ca":"data1 = data.set_index([\"Year\",\"Team\"]) \ndata1.head(100)","16511148":"#Another example\ndic = {'treatment': ['B', 'B', 'A', 'A'], 'gender' : ['F', 'M', 'F', 'M'], 'response': [15, 42,19,22], 'age': [15,68,26,9]}\ndf = pd.DataFrame(dic)\ndf","8d169f62":"df.pivot(index = 'treatment', columns = 'gender', values = 'response')","261586d1":"df1 = df.set_index(['treatment', 'gender'])\ndf1","a8685863":"df1.unstack(level = 0)\n","9b491eb6":"df1.unstack(level = 1)\n","a64d3114":"df2 = df1.swaplevel(0,1)\ndf2","a78f07d9":"df","c94ea359":"pd.melt(df, id_vars ='treatment', value_vars= ['age', 'response'])\n","fc146491":"df.groupby('treatment'). mean()","6b4b1dc2":"df.groupby('treatment'). age.max()","8a1ed644":"df.groupby('treatment')[['age', 'response']]. min()","6eeb9a16":"df.info()","bd0ffc12":"**INDEXING PANDAS TIME SERIES**","446f1438":"**LAMDA FUNCTION**","09270a2e":"**ANONYMOUS FUNCTION**","c6b757db":"**PIVOTING DATA FRAMES**","53070882":"***PANDAS FOUNDATION***","9524179c":"**TRANSFORMING DATA**","a81761dd":"**PANDAS**\n","c306849d":"**LIST COMPREHENSION**","6b401075":"***PYTHON DATA SCIENCE TOOLBOX***","3e0e9a0a":"**NESTED FUNCTION**","52a03868":"***CLEANING DATA***","6d380566":"**SCOPE**","95506f3e":"**WHILE and FOR LOOPS**","2a28a949":"**ITERATORS**","3795311d":"**EXPLORATORY DATA ANALYSIS**"}}