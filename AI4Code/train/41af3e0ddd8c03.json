{"cell_type":{"d2279e29":"code","691dc8fa":"code","2646e9ca":"code","9967e142":"code","4757ca84":"code","5c3ff301":"code","c4653906":"code","28f46aba":"code","696e9209":"code","0a38c1ae":"code","7c6b6226":"code","a3e89313":"code","87098bdf":"markdown","39848a8e":"markdown","8b2a743f":"markdown","d5d5c81c":"markdown","587779f5":"markdown","a3c351ae":"markdown"},"source":{"d2279e29":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n        \n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","691dc8fa":"from keras.preprocessing.image import ImageDataGenerator, img_to_array, load_img\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.applications.vgg16 import VGG16\nimport matplotlib.pyplot as plt\nfrom glob import glob\n\ntrain_path = \"..\/input\/fruits\/fruits-360\/Training\/\"\ntest_path = \"..\/input\/fruits\/fruits-360\/Test\/\"","2646e9ca":"img = load_img(train_path + 'Avocado\/0_100.jpg')\nplt.imshow(img)\nplt.show()","9967e142":"x = img_to_array(img)\nprint(x.shape)\n\nnumberofclass = len(glob(train_path + \"\/*\"))\nprint(numberofclass)","4757ca84":"vgg = VGG16()\nprint(vgg.summary())\nvgg_layer_list = vgg.layers\nprint(vgg_layer_list)","5c3ff301":"model = Sequential()\n\nfor i in range(len(vgg_layer_list)-1):\n    model.add(vgg_layer_list[i]) # add vgg_layer_list's models in our model except last model\n    \nprint(model.summary())\n","c4653906":"for layers in model.layers: # modellerim train edilmesin zaten train edilmi\u015f weight'lerimi kullanaca\u011f\u0131m\n    layers_trainable = False\n\nmodel.add(Dense(numberofclass, activation = \"softmax\"))  # added last element of our model\nprint(model.summary())","28f46aba":"model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","696e9209":"from keras.applications.vgg16 import preprocess_input\n\ntrain_data = ImageDataGenerator(rescale=1.\/255,   # all pixel values will be between 0 an 1\n                                shear_range=0.2, \n                                zoom_range=0.2,\n                                horizontal_flip=True,\n                                preprocessing_function=preprocess_input).flow_from_directory(train_path, target_size = (224,224), batch_size = 32, class_mode = 'categorical')\n\ntest_data = ImageDataGenerator(rescale = 1.\/255, preprocessing_function=preprocess_input).flow_from_directory(test_path, target_size = (224,224), batch_size = 32, class_mode = 'categorical')","0a38c1ae":"hist = model.fit_generator(train_data,\n                           steps_per_epoch=1,# bu de\u011ferin normalde training_data'n\u0131n say\u0131s\u0131 kadar olmas\u0131 gerekiyor  \u015fimdilik 50 olabilir!!!\n                           epochs = 1, # 50\n                           validation_data = test_data,\n                           validation_steps= 1, # bu de\u011ferin validation datan\u0131n say\u0131s\u0131 kadar olmas\u0131 gerkeiyor \u015fimdilik 25\n                           verbose = 2,\n                           shuffle = True)\n\n","7c6b6226":"acc = max(hist.history['accuracy'])\nval_acc = max(hist.history['val_accuracy'])\n\nprint ('Training Accuracy = ' + str(acc) )\nprint ('Validation Accuracy = ' + str(val_acc))","a3e89313":"print(hist.history.keys())\nplt.plot(hist.history[\"loss\"], label = \"training_loss\")\nplt.plot(hist.history[\"val_loss\"], label = \"val_loss\")\nplt.legend()\nplt.show()\nplt.figure()\nplt.plot(hist.history[\"accuracy\"], label = \"training_acc\")\nplt.plot(hist.history[\"val_accuracy\"], label = \"val_acc\")\nplt.legend()\nplt.show()","87098bdf":"# Image Data Generation","39848a8e":"# VGG16","8b2a743f":"# Visualization","d5d5c81c":"# Train data","587779f5":"# Create Model","a3c351ae":"# Import library"}}