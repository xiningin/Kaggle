{"cell_type":{"1a2c7da7":"code","96e154ab":"code","7cc0732d":"code","b83a35ec":"code","adadf7d9":"code","f201895b":"code","de9279ad":"code","05efb4d6":"code","5d76b5d4":"code","5cdf4e3c":"code","23b7d21f":"code","ae420152":"code","9e59cd31":"code","3620e8bc":"code","dc31a6e9":"code","67af2eef":"code","e97861a5":"code","bc632dfe":"code","50e1a284":"code","c8dfdab0":"code","c40d43e2":"code","44d58498":"code","c26db17d":"code","a1af65f1":"code","f382a40f":"code","1874bbfc":"code","369882de":"code","7857b19b":"code","57c70f25":"code","70d4f8ee":"code","35cbe0de":"code","1103343e":"code","8d64f9ce":"code","a9932b9b":"code","300ddd84":"code","da6262c0":"code","97f631db":"code","1419d32c":"code","6c3b0590":"code","16e01ec1":"code","86320a31":"code","9dda6f26":"code","1147ee6b":"code","248e452e":"code","cb9ffb8d":"code","8f111b31":"code","b147c74a":"markdown","c9e49f5f":"markdown","926a9e29":"markdown","cf199d08":"markdown","d35be29f":"markdown","c814bf70":"markdown","a87521c2":"markdown","082498c9":"markdown","a9734f63":"markdown","8399b52b":"markdown","657a2e4e":"markdown","f743360b":"markdown","de2255ee":"markdown"},"source":{"1a2c7da7":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","96e154ab":"df_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('..\/input\/titanic\/test.csv')\ndf = pd.concat([df_train, df_test]).reset_index(drop=True)","7cc0732d":"df.head()","b83a35ec":"df.info()","adadf7d9":"df.isnull().sum()","f201895b":"df.corr()","de9279ad":"# Median Age for each sex in each Pclass\nage_by_pclass_sex = df.groupby(['Sex', 'Pclass']).median()['Age']\nage_by_pclass_sex","05efb4d6":"# Count for each embarked\ndf['Embarked'].value_counts()","5d76b5d4":"cat_features = ['Embarked', 'Parch', 'Pclass', 'Sex', 'SibSp']\n\nfig, axs = plt.subplots(ncols=2, nrows=3, figsize=(20, 20))\nplt.subplots_adjust(right=1.5, top=1.25)\n\nfor i, feature in enumerate(cat_features, 1):    \n    plt.subplot(2, 3, i)\n    sns.countplot(x=feature, hue='Survived', data=df)\n    \n    plt.xlabel('{}'.format(feature), size=20, labelpad=15)\n    plt.ylabel('Passenger Count', size=20, labelpad=15)    \n    plt.tick_params(axis='x', labelsize=20)\n    plt.tick_params(axis='y', labelsize=20)\n    \n    plt.legend(['Not Survived', 'Survived'], loc='upper center', prop={'size': 18})\n    plt.title('Count of Survival in {} Feature'.format(feature), size=20, y=1.05)\n\nplt.show()","5cdf4e3c":"def fillnan(dataset):\n    # Fill NaN Cabin with Z\n    dataset['Cabin'] = dataset['Cabin'].fillna('Z')\n    \n    # Fill NaN Age with Median for each Pclass\n    dataset['Age'] = dataset.groupby(['Sex', 'Pclass'])['Age'].apply(lambda x: x.fillna(x.median()))\n    \n    # Fill NaN Embarked with mode()\n    dataset['Embarked'] = dataset['Embarked'].fillna(dataset['Embarked'].mode()[0])\n    \n    dataset['Fare'] = dataset['Fare'].fillna(dataset['Fare'].mode()[0])\n    \n    return dataset","23b7d21f":"df = fillnan(df)","ae420152":"df.isnull().sum()","9e59cd31":"def new_feature(dataset):\n    # Add Family_Size Feature, it will sum parch, sibsp and her\/himself\n    dataset['Family_Size'] = dataset['Parch'] + dataset['SibSp'] + 1\n    \n    # Add Family_Group Feature, if Family_Size == 1 is Alone , >=2 is Small, >=5 is Medium and >=7 is Large\n    family_map = {1: 'Alone', 2: 'Small', 3: 'Small', 4: 'Small', 5: 'Medium', 6: 'Medium', 7: 'Large', 8: 'Large', 11: 'Large'}\n    dataset['Family_Group'] = dataset['Family_Size'].map(family_map)\n    \n    # Add Age_Dist Feature\n    ranges = [0,10,20,30,40,50,60,70,80]\n    categories = ['0-10','10-20','20-30','30-40','40-50','50-60','60-70','80-90']\n    dataset['Age_Dist'] = pd.cut(dataset['Age'], bins=ranges, labels=categories)\n    \n    # Add Cabin_Symbol Feature\n    dataset['Cabin_Symbol'] = dataset['Cabin'].apply(lambda x: str(x)[0])\n    \n    # Add Ticket_Code Feature, it will give code before digit, if the first code is digit so we fill with Z\n    dataset['Ticket_Code'] = dataset['Ticket'].apply(lambda x:  'Z' if x[0].isdigit() else x.split(' ')[0])\n    \n    # Add Title Feature, it will take the title from the person's name\n    # If we look at Name Columm, there is a pattern , [LastName][Title][FirstName]\n    dataset['Title'] = dataset['Name'].str.split(', ', expand=True)[1].str.split('.', expand=True)[0]\n    \n    # Map Fare to 13 Bin\/Group\n    df['Fare'] = pd.qcut(df['Fare'], 13)\n    \n    return dataset","3620e8bc":"df = new_feature(df)","dc31a6e9":"df.head()","67af2eef":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.metrics import roc_curve, auc, confusion_matrix\nfrom sklearn.model_selection import StratifiedKFold, train_test_split, GridSearchCV","e97861a5":"df_train = df.loc[:890]\ndf_test = df.loc[891:]\ndfs = [df_train, df_test]","bc632dfe":"transform_features = ['Embarked', 'Sex', 'Title', 'Family_Group', 'Age_Dist', 'Cabin_Symbol', 'Ticket_Code','Fare']\nfor df in dfs:\n    for feature in transform_features:        \n        df[feature] = LabelEncoder().fit_transform(df[feature])","50e1a284":"df_test.head()","c8dfdab0":"Feature = ['Pclass','Sex','Fare','Embarked','Family_Group','Age_Dist','Cabin_Symbol','Ticket_Code','Title']\nTarget = 'Survived'","c40d43e2":"X = df_train[Feature]\nY = df_train[Target]\nX_test2 = df_test[Feature]","44d58498":"X_train,X_test,y_train,y_test = train_test_split(X,Y,test_size=0.2,random_state=42,stratify=Y)","c26db17d":"X_train.shape","a1af65f1":"X_test.shape","f382a40f":"random_forest = RandomForestClassifier(criterion='gini', \n                                           min_samples_split=4,\n                                           min_samples_leaf=5,\n                                           max_features='auto',\n                                           oob_score=True)\nparam_grid = {\n                 'n_estimators': [10, 50, 100, 500, 1000],\n                 'max_depth': [2, 5, 7, 9, 10]\n             }\n\ngrid_clf = GridSearchCV(random_forest, param_grid, cv=10)\ngrid_clf.fit(X_train, y_train)","1874bbfc":"grid_clf.best_estimator_","369882de":"y_pred = grid_clf.predict(X_test)","7857b19b":"confusion_matrix(y_test, y_pred)","57c70f25":"from xgboost import XGBClassifier","70d4f8ee":"xgbc = XGBClassifier(min_child_weight=3, gamma=0.2, subsample=0.6, colsample_bytree=1.0,\n                        objective='binary:logistic', nthread=4, scale_pos_weight=1, seed=27)\nparam_grid = {\n                 'n_estimators': [10, 50, 100, 500, 1000],\n                 'max_depth': [2, 5, 7, 9, 10]\n             }\n\ngrid_xgb = GridSearchCV(xgbc, param_grid, cv=10)\ngrid_xgb.fit(X_train, y_train)","35cbe0de":"grid_xgb.best_estimator_","1103343e":"y_pred2 = grid_xgb.predict(X_test)","8d64f9ce":"confusion_matrix(y_test, y_pred2)","a9932b9b":"import tensorflow as tf\nfrom tensorflow.keras.layers import Dense,Flatten,Dropout\nfrom tensorflow.keras.models import Sequential,Model\nimport numpy as np","300ddd84":"X_train_nn = np.array(X_train.values)\nX_test_nn = np.array(X_test.values)\ny_train_nn = y_train.values\ny_test_nn = y_test.values","da6262c0":"model = Sequential()\nmodel.add(Dense(512, input_shape=(9,), activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(512,activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(512,activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(512,activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(1,activation='sigmoid'))","97f631db":"model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])\nmodel.fit(X_train_nn,y_train_nn,epochs=100)","1419d32c":"model.evaluate(X_test_nn,y_test_nn)","6c3b0590":"pred=model.predict(X_test2)\ny_pred3 = []\nfor a in pred:\n  if a > 0.5:\n    y_pred3.append(1)\n  else:\n    y_pred3.append(0)","16e01ec1":"contoh = pd.read_csv('..\/input\/titanic\/gender_submission.csv')","86320a31":"contoh.head()","9dda6f26":"y_pred_real = grid_clf.predict(X_test2)\ny_pred_real2 = grid_xgb.predict(X_test2)\ny_pred_real3 = y_pred3","1147ee6b":"my_submission1 = pd.DataFrame({'PassengerId': df_test['PassengerId'], 'Survived': y_pred_real})\nmy_submission1['Survived'] = my_submission1['Survived'].astype('int')\nmy_submission1.head()","248e452e":"my_submission2 = pd.DataFrame({'PassengerId': df_test['PassengerId'], 'Survived': y_pred_real2})\nmy_submission2['Survived'] = my_submission1['Survived'].astype('int')\nmy_submission2.head()","cb9ffb8d":"my_submission3 = pd.DataFrame({'PassengerId': df_test['PassengerId'], 'Survived': y_pred3})\nmy_submission3.head()","8f111b31":"my_submission1.to_csv('submission_rf.csv', index=False)\nmy_submission2.to_csv('submission_xgb.csv', index=False)\nmy_submission3.to_csv('submission_nn.csv', index=False)","b147c74a":"## XGBoost","c9e49f5f":"## Add New Feature","926a9e29":"Conclusion from top left graph\n1. Only C has more survivors than those who dont, But Survivor from S more than other, although the dead are also the most\n2. The fewer parch, the higher the chances to survive\n3. the higher the Pclass, affect the number of people who die\n4. More Female are survive\n5. The fewer SibSp, the higher the chances to survive","cf199d08":"## Feature and Target Column","d35be29f":"# Modelling","c814bf70":"# Processing","a87521c2":"## Split Data","082498c9":"# EDA","a9734f63":"## Fillna","8399b52b":"## LabelEncode for non numeric and cat feature","657a2e4e":"# Predict Test Data","f743360b":"## Random Forest","de2255ee":"## Neural Network"}}