{"cell_type":{"91fd3bdb":"code","4ae0d52c":"code","9b3a6207":"code","f707e505":"code","b5ab90e2":"code","73a51e22":"code","743c0464":"code","1f3f71b0":"code","8166ee32":"code","3c192694":"code","d1d0d459":"code","2a66da1e":"code","00a7bd61":"code","ad5bfefe":"code","b9191c31":"code","51e61020":"code","61d202d1":"code","c6e3691f":"code","94658d9a":"code","279d3ab5":"code","5432d435":"code","d262a632":"code","e9a533a9":"code","6b6a5303":"code","61d1a1fb":"markdown","f404ebc6":"markdown","9c712255":"markdown","3b51aedb":"markdown","4d8bcb23":"markdown","dc144163":"markdown","d2d7c920":"markdown","daf10cb4":"markdown","218b955e":"markdown","c3f9b099":"markdown","29cbefb8":"markdown"},"source":{"91fd3bdb":"# necessary imports \n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport joblib\nimport pandas as pd\n\nplt.style.use(\"fivethirtyeight\")\n\n%matplotlib inline","4ae0d52c":"# creating a class for Perceptron Model\nclass Perceptron:\n    def __init__(self, eta, epochs, activationFunction):\n        self.weights = np.random.randn(3) * 1e-4\n        print(f\"Initial Random Weights: {self.weights}\")\n        self.eta = eta\n        self.epochs = epochs\n        self.activationFunction = activationFunction\n\n    def fit(self, X, y):\n        self.X = X\n        self.y = y\n\n        X_with_bias = np.c_[self.X, -np.ones((len(self.X), 1))] \n        print(f\"X_with_bias: \\n{X_with_bias}\")\n\n        for epoch in range(self.epochs):\n          print(f\"for epoch: {epoch}\")\n          y_hat = self.activationFunction(X_with_bias, self.weights)\n          print(f\"Predicted Value: \\n{y_hat}\")\n          error = self.y - y_hat\n          print(f\"error: \\n{error}\")\n          self.weights = self.weights + self.eta * np.dot(X_with_bias.T, error)\n          print(f\"updated weights: \\n{self.weights}\")\n          print(\"#############\\n\")\n\n    def predict(self, X):\n        X_with_bias = np.c_[X, -np.ones((len(self.X), 1))]\n        return self.activationFunction(X_with_bias, self.weights)\n","9b3a6207":"# creating a function for activationFunction \nactivationFunction = lambda inputs, weights: np.where(np.dot(inputs, weights) > 0, 1, 0)","f707e505":"# creating an AND dataframe\ndata = {\"X1\": [0, 0, 1, 1], \"X2\": [0, 1, 0, 1], \"y\": [0, 0, 0, 1]}\n\nAND = pd.DataFrame(data)\nAND","b5ab90e2":"# creating X for And dataset\nX = AND.drop(\"y\", axis = 1)\nX","73a51e22":"# creating y for AND dataset\ny = AND['y']\ny.to_frame()","743c0464":"# Perceptron model for AND dataset\nmodel = Perceptron(eta = 0.1, epochs = 10, activationFunction = activationFunction)","1f3f71b0":"model.fit(X, y)","8166ee32":"model.predict(X)","3c192694":"# creating an OR dataframe\ndata = {\"X1\": [0, 0, 1, 1], \"X2\": [0, 1, 0, 1], \"y\": [0, 1, 1, 1]}\n\nOR = pd.DataFrame(data)\nOR","d1d0d459":"# creating X for OR dataset\nX = OR.drop('y', axis = 1)\nX","2a66da1e":"# creating y for OR dataset\ny = OR['y']\ny.to_frame()","00a7bd61":"# Perceptron Model for OR dataset\nmodel = Perceptron(eta = 0.5, epochs = 10, activationFunction=activationFunction)","ad5bfefe":"model.fit(X,y)","b9191c31":"model.predict(X)","51e61020":"# creating an XOR dataframe\ndata = {\"X1\": [0,0,1,1], \"X2\": [0,1,0,1], \"y\": [0,1,1,0]}\n\nXOR = pd.DataFrame(data)\nXOR","61d202d1":"# creating X for XOR dataset\nX = XOR.drop(\"y\", axis=1)\nX","c6e3691f":"# creating y for XOR dataset\ny = XOR['y']\ny.to_frame()","94658d9a":"# Perceptron Model for XOR dataset\nmodel = Perceptron(eta = 0.5, epochs=10, activationFunction=activationFunction)","279d3ab5":"model.fit(X,y)","5432d435":"model.predict(X)","d262a632":"AND.plot(kind=\"scatter\", x=\"X1\", y=\"X2\", c=\"y\", s=50, cmap=\"winter\", figsize = (15, 8))\nx = np.linspace(0, 1.4) \ny = 1.5 - 1*np.linspace(0, 1.4) \n\nplt.plot(x, y, \"orange\")\n\nplt.show()","e9a533a9":"OR.plot(kind=\"scatter\", x=\"X1\", y=\"X2\", c=\"y\", s=50, cmap=\"winter\", figsize = (15, 8))\nx = np.linspace(0,0.75)\ny = 0.75 - 1*np.linspace(0,0.75) \n\nplt.plot(x, y, \"orange\")\n\nplt.show()","6b6a5303":"XOR.plot(kind=\"scatter\", x=\"X1\", y=\"X2\", c=\"y\", s=50, cmap=\"winter\", figsize = (15, 8))\nplt.show()","61d1a1fb":"## XOR","f404ebc6":"## Analysis using Graphs ","9c712255":"## OR","3b51aedb":"### Now Let's test our Perceptron Model on Some Datasets","4d8bcb23":"- **This data is not linearly seperable so we perceptron will not give good results. For these types of datasets we have to apply multiple layers perceptron.**","dc144163":"# Perceptron Using Python","d2d7c920":"### If You Liked the Notebook, Please do Upvote !!","daf10cb4":"## AND","218b955e":"### AND GATE","c3f9b099":"### XOR Gate","29cbefb8":"### OR Gate"}}