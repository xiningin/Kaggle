{"cell_type":{"e2b5528b":"code","cf01c784":"code","3cb67f73":"code","b45efc8b":"code","08b135ea":"code","9d7aa813":"code","fe68cd83":"code","d99e47f7":"code","386c5e09":"code","2bfc9510":"code","51d83ade":"code","dbe7a5ac":"code","6d6ac44c":"code","a390725a":"code","a8cc4e68":"code","84212696":"code","e0259be7":"code","98f3e4f2":"code","e904d307":"code","1c813748":"code","a49f97c8":"code","3be8e702":"code","abd86737":"code","15687d84":"code","f6a04ba8":"code","b240938c":"code","b50d620f":"code","1ba8b942":"code","c4df11b2":"code","c17365eb":"code","5f7ec775":"code","e42dd8c4":"code","22d19e04":"code","31688778":"code","634b442e":"code","6133017e":"code","4ffd30dc":"code","2820e244":"code","6a952590":"code","e939e846":"code","f6d08ad3":"code","dfabe066":"code","30ef9f40":"code","696de04d":"code","398f12fc":"code","860cb4d2":"code","6a17463d":"code","a6bb38bd":"code","c4308c96":"code","7e6809ee":"code","081b2241":"code","7c7d61cc":"code","85cb0abb":"code","2156dfbf":"code","72d2c86c":"code","f648062e":"code","77ed1fdb":"code","6be7a7dd":"code","ada06940":"code","53022e52":"code","34e56f82":"code","f7ce76be":"code","e9f9faa9":"markdown","3ce05648":"markdown","f5c13356":"markdown","89a1a2f1":"markdown","161c78ea":"markdown","1e95b6d0":"markdown","2ec74dba":"markdown","7f20c4d6":"markdown","c8d3ae78":"markdown","af65cde2":"markdown","077708dc":"markdown","ea851b7b":"markdown","085dd684":"markdown","0742d606":"markdown","b7b5e1f9":"markdown","007fde89":"markdown","a24b1e52":"markdown","f5478cb2":"markdown","3990220e":"markdown","62a24ca9":"markdown","41ccf069":"markdown","e43f2718":"markdown","1ae9687f":"markdown","550f52f3":"markdown","9569e151":"markdown","1ae28aa6":"markdown","bc79fa6f":"markdown","69608b69":"markdown","36e68e96":"markdown","d5c061f7":"markdown","d7e66f92":"markdown","8c5e74d4":"markdown","fd329b87":"markdown","cb8bb91d":"markdown","ad402269":"markdown","900d44e1":"markdown","dabccb12":"markdown","eb0d569c":"markdown","7c148694":"markdown","b40e0c44":"markdown","1f06d33e":"markdown","e0fdb361":"markdown","63339db7":"markdown","1d9985e1":"markdown","6b6162ef":"markdown","173587f2":"markdown","28d410d7":"markdown","ec0df3dd":"markdown","b001382e":"markdown","af65121b":"markdown","d4bd936f":"markdown","3199527c":"markdown","b047c079":"markdown","be0148df":"markdown","72313cfc":"markdown","c50acdcd":"markdown","6b096dd3":"markdown","f27678b9":"markdown","393ef59b":"markdown","cbf6ffe0":"markdown","51d81c34":"markdown","19975cba":"markdown","b93b6579":"markdown","42f683d6":"markdown","68cbd877":"markdown","0dc4c4e1":"markdown","f4b6115a":"markdown","c2b378f5":"markdown","b7232a6b":"markdown","b59618c3":"markdown","240b2383":"markdown","311d4378":"markdown","b83cf898":"markdown","4c08e97c":"markdown","d41d580d":"markdown","d59afc8b":"markdown","0635bdb2":"markdown","b240e8de":"markdown","44e52ab6":"markdown","f496b9ca":"markdown"},"source":{"e2b5528b":"import pandas as pd # package for high-performance, easy-to-use data structures and data analysis\nimport numpy as np # fundamental package for scientific computing with Python\nimport matplotlib\nimport matplotlib.pyplot as plt # for plotting\nimport seaborn as sns # for making plots with seaborn\ncolor = sns.color_palette()\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.offline as offline\noffline.init_notebook_mode()\n# from plotly import tools\n# import plotly.tools as tls\n# import squarify\n# from mpl_toolkits.basemap import Basemap\n# from numpy import array\n# from matplotlib import cm\n\n# import cufflinks and offline mode\nimport cufflinks as cf\ncf.go_offline()\n\n# from sklearn import preprocessing\n# # Supress unnecessary warnings so that presentation looks clean\n# import warnings\n# warnings.filterwarnings(\"ignore\")\n\n# # Print all rows and columns\n# pd.set_option('display.max_columns', None)\n# pd.set_option('display.max_rows', None)\n","cf01c784":"import os\nprint(os.listdir(\"..\/input\"))","3cb67f73":"application_train = pd.read_csv('..\/input\/application_train.csv')\nPOS_CASH_balance = pd.read_csv('..\/input\/POS_CASH_balance.csv')\nbureau_balance = pd.read_csv('..\/input\/bureau_balance.csv')\nprevious_application = pd.read_csv('..\/input\/previous_application.csv')\ninstallments_payments = pd.read_csv('..\/input\/installments_payments.csv')\ncredit_card_balance = pd.read_csv('..\/input\/credit_card_balance.csv')\nbureau = pd.read_csv('..\/input\/bureau.csv')\napplication_test = pd.read_csv('..\/input\/application_test.csv')","b45efc8b":"print('application_train\u30c7\u30fc\u30bf\u306e\u30b5\u30a4\u30ba', application_train.shape)\nprint('POS_CASH_balance\u30c7\u30fc\u30bf\u306e\u30b5\u30a4\u30ba', POS_CASH_balance.shape)\nprint('bureau_balance\u30c7\u30fc\u30bf\u306e\u30b5\u30a4\u30ba', bureau_balance.shape)\nprint('previous_application\u306e\u30c7\u30fc\u30bf\u30b5\u30a4\u30ba', previous_application.shape)\nprint('installments_payments\u306e\u30c7\u30fc\u30bf\u30b5\u30a4\u30ba', installments_payments.shape)\nprint('credit_card_balance\u306e\u30c7\u30fc\u30bf\u30b5\u30a4\u30ba', credit_card_balance.shape)\nprint('bureau\u306e\u30c7\u30fc\u30bf\u30b5\u30a4\u30ba', bureau.shape)","08b135ea":"application_train.head()","9d7aa813":"application_train.columns.values","fe68cd83":"POS_CASH_balance.head()","d99e47f7":"bureau_balance.head()","386c5e09":"previous_application.head()","2bfc9510":"previous_application.columns.values","51d83ade":"installments_payments.head()","dbe7a5ac":"credit_card_balance.head()","6d6ac44c":"credit_card_balance.columns.values","a390725a":"bureau.head()","a8cc4e68":"# checking missing data\ntotal = application_train.isnull().sum().sort_values(ascending = False)\npercent = (application_train.isnull().sum()\/application_train.isnull().count()*100).sort_values(ascending = False)\nmissing_application_train_data  = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_application_train_data.head(20)","84212696":"# checking missing data\ntotal = POS_CASH_balance.isnull().sum().sort_values(ascending = False)\npercent = (POS_CASH_balance.isnull().sum()\/POS_CASH_balance.isnull().count()*100).sort_values(ascending = False)\nmissing_POS_CASH_balance_data  = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_POS_CASH_balance_data.head(3)","e0259be7":"# checking missing data\ntotal = bureau_balance.isnull().sum().sort_values(ascending = False)\npercent = (bureau_balance.isnull().sum()\/bureau_balance.isnull().count()*100).sort_values(ascending = False)\nmissing_bureau_balance_data  = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_bureau_balance_data.head(3)","98f3e4f2":"# checking missing data\ntotal = previous_application.isnull().sum().sort_values(ascending = False)\npercent = (previous_application.isnull().sum()\/previous_application.isnull().count()*100).sort_values(ascending = False)\nmissing_previous_application_data  = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_previous_application_data.head(15)","e904d307":"# checking missing data\ntotal = installments_payments.isnull().sum().sort_values(ascending = False)\npercent = (installments_payments.isnull().sum()\/installments_payments.isnull().count()*100).sort_values(ascending = False)\nmissing_installments_payments_data  = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_installments_payments_data.head(3)","1c813748":"# checking missing data\ntotal = credit_card_balance.isnull().sum().sort_values(ascending = False)\npercent = (credit_card_balance.isnull().sum()\/credit_card_balance.isnull().count()*100).sort_values(ascending = False)\nmissing_credit_card_balance_data  = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_credit_card_balance_data.head(10)","a49f97c8":"# checking missing data\ntotal = bureau.isnull().sum().sort_values(ascending = False)\npercent = (bureau.isnull().sum()\/bureau.isnull().count()*100).sort_values(ascending = False)\nmissing_bureau_data  = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_bureau_data.head(8)","3be8e702":"plt.figure(figsize=(12,5))\nplt.title(\"Distribution of AMT_CREDIT\")\nax = sns.distplot(application_train[\"AMT_CREDIT\"])","abd86737":"plt.figure(figsize=(12,5))\nplt.title(\"Distribution of AMT_INCOME_TOTAL\")\nax = sns.distplot(application_train[\"AMT_INCOME_TOTAL\"].dropna())","15687d84":"plt.figure(figsize=(12,5))\nplt.title(\"Distribution of AMT_GOODS_PRICE\")\nax = sns.distplot(application_train[\"AMT_GOODS_PRICE\"].dropna())","f6a04ba8":"temp = application_train[\"NAME_TYPE_SUITE\"].value_counts()\n#print(\"Total number of states : \",len(temp))\ntrace = go.Bar(\n    x = temp.index,\n    y = (temp \/ temp.sum())*100,\n)\ndata = [trace]\nlayout = go.Layout(\n    title = \"Who accompanied client when applying for the  application in % \",\n    xaxis=dict(\n        title='Name of type of the Suite',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count of Name of type of the Suite in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='schoolStateNames')","b240938c":"temp = application_train[\"TARGET\"].value_counts()\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Loan Repayed or not')","b50d620f":"temp = application_train[\"NAME_CONTRACT_TYPE\"].value_counts()\nfig = {\n  \"data\": [\n    {\n      \"values\": temp.values,\n      \"labels\": temp.index,\n      \"domain\": {\"x\": [0, .48]},\n      #\"name\": \"Types of Loans\",\n      #\"hoverinfo\":\"label+percent+name\",\n      \"hole\": .7,\n      \"type\": \"pie\"\n    },\n    \n    ],\n  \"layout\": {\n        \"title\":\"Types of loan\",\n        \"annotations\": [\n            {\n                \"font\": {\n                    \"size\": 20\n                },\n                \"showarrow\": False,\n                \"text\": \"Loan Types\",\n                \"x\": 0.17,\n                \"y\": 0.5\n            }\n            \n        ]\n    }\n}\niplot(fig, filename='donut')","1ba8b942":"temp1 = application_train[\"FLAG_OWN_CAR\"].value_counts()\ntemp2 = application_train[\"FLAG_OWN_REALTY\"].value_counts()\n\nfig = {\n  \"data\": [\n    {\n      \"values\": temp1.values,\n      \"labels\": temp1.index,\n      \"domain\": {\"x\": [0, .48]},\n      \"name\": \"Own Car\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .6,\n      \"type\": \"pie\"\n    },\n    {\n      \"values\": temp2.values,\n      \"labels\": temp2.index,\n      \"text\":\"Own Realty\",\n      \"textposition\":\"inside\",\n      \"domain\": {\"x\": [.52, 1]},\n      \"name\": \"Own Reality\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .6,\n      \"type\": \"pie\"\n    }],\n  \"layout\": {\n        \"title\":\"Purpose of loan\",\n        \"annotations\": [\n            {\n                \"font\": {\n                    \"size\": 20\n                },\n                \"showarrow\": False,\n                \"text\": \"Own Car\",\n                \"x\": 0.20,\n                \"y\": 0.5\n            },\n            {\n                \"font\": {\n                    \"size\": 20\n                },\n                \"showarrow\": False,\n                \"text\": \"Own Realty\",\n                \"x\": 0.8,\n                \"y\": 0.5\n            }\n        ]\n    }\n}\niplot(fig, filename='donut')\n\n","c4df11b2":"temp = application_train[\"NAME_INCOME_TYPE\"].value_counts()\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Income sources of Applicant\\'s', hole = 0.5)","c17365eb":"temp = application_train[\"NAME_FAMILY_STATUS\"].value_counts()\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Family Status of Applicant\\'s', hole = 0.5)","5f7ec775":"temp = application_train[\"OCCUPATION_TYPE\"].value_counts()\ntemp.iplot(kind='bar', xTitle = 'Occupation', yTitle = \"Count\", title = 'Occupation of Applicant\\'s who applied for loan', color = 'green')","e42dd8c4":"temp = application_train[\"NAME_EDUCATION_TYPE\"].value_counts()\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Education of Applicant\\'s', hole = 0.5)","22d19e04":"temp = application_train[\"NAME_HOUSING_TYPE\"].value_counts()\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Type of House', hole = 0.5)","31688778":"temp = application_train[\"ORGANIZATION_TYPE\"].value_counts()\ntemp.iplot(kind='bar', xTitle = 'Organization Name', yTitle = \"Count\", title = 'Types of Organizations who applied for loan ', color = 'red')","634b442e":"temp = application_train[\"NAME_INCOME_TYPE\"].value_counts()\n#print(temp.values)\ntemp_y0 = []\ntemp_y1 = []\nfor val in temp.index:\n    temp_y0.append(np.sum(application_train[\"TARGET\"][application_train[\"NAME_INCOME_TYPE\"]==val] == 1))\n    temp_y1.append(np.sum(application_train[\"TARGET\"][application_train[\"NAME_INCOME_TYPE\"]==val] == 0))    \ntrace1 = go.Bar(\n    x = temp.index,\n    y = (temp_y1 \/ temp.sum()) * 100,\n    name='YES'\n)\ntrace2 = go.Bar(\n    x = temp.index,\n    y = (temp_y0 \/ temp.sum()) * 100, \n    name='NO'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title = \"Income sources of Applicant's in terms of loan is repayed or not  in %\",\n    #barmode='stack',\n    width = 1000,\n    xaxis=dict(\n        title='Income source',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","6133017e":"temp = application_train[\"NAME_FAMILY_STATUS\"].value_counts()\n#print(temp.values)\ntemp_y0 = []\ntemp_y1 = []\nfor val in temp.index:\n    temp_y0.append(np.sum(application_train[\"TARGET\"][application_train[\"NAME_FAMILY_STATUS\"]==val] == 1))\n    temp_y1.append(np.sum(application_train[\"TARGET\"][application_train[\"NAME_FAMILY_STATUS\"]==val] == 0))    \ntrace1 = go.Bar(\n    x = temp.index,\n    y = (temp_y1 \/ temp.sum()) * 100,\n    name='YES'\n)\ntrace2 = go.Bar(\n    x = temp.index,\n    y = (temp_y0 \/ temp.sum()) * 100, \n    name='NO'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title = \"Family Status of Applicant's in terms of loan is repayed or not in %\",\n    #barmode='stack',\n    width = 1000,\n    xaxis=dict(\n        title='Family Status',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","4ffd30dc":"temp = application_train[\"OCCUPATION_TYPE\"].value_counts()\n#print(temp.values)\ntemp_y0 = []\ntemp_y1 = []\nfor val in temp.index:\n    temp_y0.append(np.sum(application_train[\"TARGET\"][application_train[\"OCCUPATION_TYPE\"]==val] == 1))\n    temp_y1.append(np.sum(application_train[\"TARGET\"][application_train[\"OCCUPATION_TYPE\"]==val] == 0))    \ntrace1 = go.Bar(\n    x = temp.index,\n    y = (temp_y1 \/ temp.sum()) * 100,\n    name='YES'\n)\ntrace2 = go.Bar(\n    x = temp.index,\n    y = (temp_y0 \/ temp.sum()) * 100, \n    name='NO'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title = \"Occupation of Applicant's in terms of loan is repayed or not in %\",\n    #barmode='stack',\n    width = 1000,\n    xaxis=dict(\n        title='Occupation of Applicant\\'s',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","2820e244":"temp = application_train[\"NAME_EDUCATION_TYPE\"].value_counts()\n#print(temp.values)\ntemp_y0 = []\ntemp_y1 = []\nfor val in temp.index:\n    temp_y0.append(np.sum(application_train[\"TARGET\"][application_train[\"NAME_EDUCATION_TYPE\"]==val] == 1))\n    temp_y1.append(np.sum(application_train[\"TARGET\"][application_train[\"NAME_EDUCATION_TYPE\"]==val] == 0))    \ntrace1 = go.Bar(\n    x = temp.index,\n    y = (temp_y0 \/ temp.sum()) * 100,\n    name='YES'\n)\ntrace2 = go.Bar(\n    x = temp.index,\n    y = (temp_y1 \/ temp.sum()) * 100, \n    name='NO'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title = \"Education of Applicant's in terms of loan is repayed or not in %\",\n    #barmode='stack',\n    width = 1000,\n    xaxis=dict(\n        title='Education of Applicant\\'s',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","6a952590":"temp = application_train[\"NAME_HOUSING_TYPE\"].value_counts()\n#print(temp.values)\ntemp_y0 = []\ntemp_y1 = []\nfor val in temp.index:\n    temp_y0.append(np.sum(application_train[\"TARGET\"][application_train[\"NAME_HOUSING_TYPE\"]==val] == 1))\n    temp_y1.append(np.sum(application_train[\"TARGET\"][application_train[\"NAME_HOUSING_TYPE\"]==val] == 0))    \ntrace1 = go.Bar(\n    x = temp.index,\n    y = (temp_y1 \/ temp.sum()) * 100,\n    name='YES'\n)\ntrace2 = go.Bar(\n    x = temp.index,\n    y = (temp_y0 \/ temp.sum()) * 100, \n    name='NO'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title = \"For which types of house higher applicant's applied for loan in terms of loan is repayed or not in %\",\n    #barmode='stack',\n    width = 1000,\n    xaxis=dict(\n        title='types of house',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","e939e846":"temp = application_train[\"ORGANIZATION_TYPE\"].value_counts()\n#print(temp.values)\ntemp_y0 = []\ntemp_y1 = []\nfor val in temp.index:\n    temp_y0.append(np.sum(application_train[\"TARGET\"][application_train[\"ORGANIZATION_TYPE\"]==val] == 1))\n    temp_y1.append(np.sum(application_train[\"TARGET\"][application_train[\"ORGANIZATION_TYPE\"]==val] == 0))    \ntrace1 = go.Bar(\n    x = temp.index,\n    y = (temp_y1 \/ temp.sum()) * 100,\n    name='YES'\n)\ntrace2 = go.Bar(\n    x = temp.index,\n    y = (temp_y0 \/ temp.sum()) * 100, \n    name='NO'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title = \"Types of Organizations in terms of loan is repayed or not in %\",\n    #barmode='stack',\n    width = 1000,\n    xaxis=dict(\n        title='Types of Organizations',\n        tickfont=dict(\n            size=10,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","f6d08ad3":"temp = application_train[\"NAME_TYPE_SUITE\"].value_counts()\n#print(temp.values)\ntemp_y0 = []\ntemp_y1 = []\nfor val in temp.index:\n    temp_y0.append(np.sum(application_train[\"TARGET\"][application_train[\"NAME_TYPE_SUITE\"]==val] == 1))\n    temp_y1.append(np.sum(application_train[\"TARGET\"][application_train[\"NAME_TYPE_SUITE\"]==val] == 0))    \ntrace1 = go.Bar(\n    x = temp.index,\n    y = (temp_y1 \/ temp.sum()) * 100,\n    name='YES'\n)\ntrace2 = go.Bar(\n    x = temp.index,\n    y = (temp_y0 \/ temp.sum()) * 100, \n    name='NO'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title = \"Distribution of Name of type of the Suite in terms of loan is repayed or not in %\",\n    #barmode='stack',\n    width = 1000,\n    xaxis=dict(\n        title='Name of type of the Suite',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","dfabe066":"temp = previous_application[\"NAME_CONTRACT_TYPE\"].value_counts()\nfig = {\n  \"data\": [\n    {\n      \"values\": temp.values,\n      \"labels\": temp.index,\n      \"domain\": {\"x\": [0, .48]},\n      #\"name\": \"Types of Loans\",\n      #\"hoverinfo\":\"label+percent+name\",\n      \"hole\": .7,\n      \"type\": \"pie\"\n    },\n    \n    ],\n  \"layout\": {\n        \"title\":\"Contract product type of previous application\",\n        \"annotations\": [\n            {\n                \"font\": {\n                    \"size\": 20\n                },\n                \"showarrow\": False,\n                \"text\": \"Contract product type\",\n                \"x\": 0.12,\n                \"y\": 0.5\n            }\n            \n        ]\n    }\n}\niplot(fig, filename='donut')","30ef9f40":"temp = previous_application[\"WEEKDAY_APPR_PROCESS_START\"].value_counts()\n#print(\"Total number of states : \",len(temp))\ntrace = go.Bar(\n    x = temp.index,\n    y = (temp \/ temp.sum())*100,\n)\ndata = [trace]\nlayout = go.Layout(\n    title = \"On which day highest number of clients applied in prevoies application in % \",\n    xaxis=dict(\n        title='Day of the Week',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count of Day of Week in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='schoolStateNames')","696de04d":"temp = previous_application[\"NAME_CASH_LOAN_PURPOSE\"].value_counts()\n#print(\"Total number of states : \",len(temp))\ntrace = go.Bar(\n    x = temp.index,\n    y = (temp \/ temp.sum())*100,\n    marker=dict(\n        color=(temp \/ temp.sum())*100,\n        colorscale = 'Blues',\n        reversescale = True\n    ),\n)\ndata = [trace]\nlayout = go.Layout(\n    title = \"Purpose of cash loan in previous application in % \",\n    xaxis=dict(\n        title='Purpose of cash loan',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","398f12fc":"temp = previous_application[\"NAME_CONTRACT_STATUS\"].value_counts()\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Contract approved or not', hole = 0.5)","860cb4d2":"temp = previous_application[\"NAME_PAYMENT_TYPE\"].value_counts()\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Payment method that client choose to pay for the previous application', hole = 0.7,colors=['#75e575', '#ea7c96',])","6a17463d":"temp = previous_application[\"CODE_REJECT_REASON\"].value_counts()\ntemp.iplot(kind='bar', xTitle = 'Reason', yTitle = \"Count\", title = 'Top reasons of previous application rejection(Wriiten in some codes)', colors=['#75e575'])","a6bb38bd":"temp = previous_application[\"NAME_TYPE_SUITE\"].value_counts()\ntrace = go.Bar(\n    x = temp.index,\n    y = (temp \/ temp.sum())*100,\n    marker=dict(\n        color=(temp \/ temp.sum())*100,\n        colorscale = '#ea7c96',\n        #reversescale = True\n    ),\n)\ndata = [trace]\nlayout = go.Layout(\n    title = \"Who accompanied client when applying for the previous application in % \",\n    xaxis=dict(\n        title='Name of type of the Suite',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count of Name of type of the Suite in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","c4308c96":"temp = previous_application[\"NAME_CLIENT_TYPE\"].value_counts()\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Was the client old or new client when applying for the previous application', hole = 0.7,colors=['#ea7c96','#75e575',])","7e6809ee":"temp = previous_application[\"NAME_GOODS_CATEGORY\"].value_counts()\ntrace = go.Bar(\n    x = temp.index,\n    y = (temp \/ temp.sum())*100,\n    marker=dict(\n        color=(temp \/ temp.sum())*100,\n        colorscale = 'Greens',\n        reversescale = True\n    ),\n)\ndata = [trace]\nlayout = go.Layout(\n    title = \"What kind of goods did the client apply for in the previous application in % \",\n    xaxis=dict(\n        title='Name of the goods',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","081b2241":"temp = previous_application[\"NAME_PORTFOLIO\"].value_counts()\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Was the previous application for CASH, POS, CAR, \u2026', hole = 0.7,colors=['#ea7c96','#75e575',])","7c7d61cc":"temp = previous_application[\"NAME_PRODUCT_TYPE\"].value_counts()\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Was the previous application x-sell or walk-in', hole = 0.7)","85cb0abb":"temp = previous_application[\"CHANNEL_TYPE\"].value_counts()\ntrace = go.Bar(\n    x = temp.index,\n    y = (temp \/ temp.sum())*100,\n    marker=dict(\n        color=(temp \/ temp.sum())*100,\n#         colorscale = 'Violet',\n#         reversescale = True\n    ),\n)\ndata = [trace]\nlayout = go.Layout(\n    title = \"Top channels  through which they acquired the client on the previous application in % \",\n    xaxis=dict(\n        title='Name of the Channel',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","2156dfbf":"temp = previous_application[\"NAME_SELLER_INDUSTRY\"].value_counts()\ntrace = go.Bar(\n    x = temp.index,\n    y = (temp \/ temp.sum())*100,\n    marker=dict(\n        color=(temp \/ temp.sum())*100,\n        colorscale = 'Greens',\n        reversescale = True\n    ),\n)\ndata = [trace]\nlayout = go.Layout(\n    title = \"Top industry of the seller in % \",\n    xaxis=dict(\n        title='Industry Name',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","72d2c86c":"temp = previous_application[\"NAME_YIELD_GROUP\"].value_counts()\ntrace = go.Bar(\n    x = temp.index,\n    y = (temp \/ temp.sum())*100,\n    marker=dict(\n        color=(temp \/ temp.sum())*100,\n        colorscale = 'Greens',\n        reversescale = True\n    ),\n)\ndata = [trace]\nlayout = go.Layout(\n    title = \"Grouped interest rate into small medium and high of the previous application in % \",\n    xaxis=dict(\n        title='Grouped Interest rate',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","f648062e":"temp = previous_application[\"PRODUCT_COMBINATION\"].value_counts()\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Top Detailed product combination of the previous application', hole = 0.7)","77ed1fdb":"temp = previous_application[\"NFLAG_INSURED_ON_APPROVAL\"].value_counts()\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Did the client requested insurance during the previous application(YES : 1, NO : 0)', hole = 0.7, colors=['#ea7c96','#75e575',])","6be7a7dd":"data = [\n    go.Heatmap(\n        z= application_train.corr().values,\n        x=application_train.columns.values,\n        y=application_train.columns.values,\n        colorscale='Viridis',\n        reversescale = False,\n        text = True ,\n        opacity = 1.0 )\n]\n\nlayout = go.Layout(\n    title='Pearson Correlation of features',\n    xaxis = dict(ticks='', nticks=36),\n    yaxis = dict(ticks='' ),\n    width = 900, height = 700,\nmargin=dict(\n    l=240,\n),)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='labelled-heatmap')","ada06940":"from sklearn import preprocessing\ncategorical_feats = [\n    f for f in application_train.columns if application_train[f].dtype == 'object'\n]\n\nfor col in categorical_feats:\n    lb = preprocessing.LabelEncoder()\n    lb.fit(list(application_train[col].values.astype('str')) + list(application_test[col].values.astype('str')))\n    application_train[col] = lb.transform(list(application_train[col].values.astype('str')))\n    application_test[col] = lb.transform(list(application_test[col].values.astype('str')))","53022e52":"application_train.fillna(-999, inplace = True)","34e56f82":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(n_estimators=50, max_depth=8, min_samples_leaf=4, max_features=0.5, random_state=2018)\nrf.fit(application_train.drop(['SK_ID_CURR', 'TARGET'],axis=1), application_train.TARGET)\nfeatures = application_train.drop(['SK_ID_CURR', 'TARGET'],axis=1).columns.values","f7ce76be":"x, y = (list(x) for x in zip(*sorted(zip(rf.feature_importances_, features), \n                                                            reverse = False)))\ntrace2 = go.Bar(\n    x=x ,\n    y=y,\n    marker=dict(\n        color=x,\n        colorscale = 'Viridis',\n        reversescale = True\n    ),\n    name='Random Forest Feature importance',\n    orientation='h',\n)\n\nlayout = dict(\n    title='Barplot of Feature importances',\n     width = 900, height = 2000,\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=True,\n#         domain=[0, 0.85],\n    ),\n    margin=dict(\n    l=300,\n),\n)\n\nfig1 = go.Figure(data=[trace2])\nfig1['layout'].update(layout)\npy.iplot(fig1, filename='plots')","e9f9faa9":"* **\u30ea\u30dc\u30eb\u30d3\u30f3\u30b0\u30ed\u30fc\u30f3\uff1a** \u5951\u7d04\u306e\u6709\u52b9\u671f\u9650\u304c\u5207\u308c\u308b\u307e\u3067\u3001\u30ed\u30fc\u30f3\u306e\u91d1\u984d\u3092\u4efb\u610f\u306e\u65b9\u6cd5\u3067\u4f55\u5ea6\u3067\u3082\u518d\u5f15\u304d\u51fa\u3057\u3001\u8fd4\u6e08\u3001\u518d\u5f15\u304d\u51fa\u3057\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u53d6\u308a\u6c7a\u3081\u3002\u30af\u30ec\u30b8\u30c3\u30c8\u30ab\u30fc\u30c9\u30ed\u30fc\u30f3\u3068\u5f53\u5ea7\u501f\u8d8a\u306f\u3001\u30ea\u30dc\u30eb\u30d3\u30f3\u30b0\u30ed\u30fc\u30f3\u3067\u3059\u3002\u30a8\u30d0\u30fc\u30b0\u30ea\u30fc\u30f3\u30ed\u30fc\u30f3\u3068\u3082\u547c\u3070\u308c\u307e\u3059","3ce05648":"## <a id='5-1'>5.1 AMT_CREDIT\u306e\u5206\u5e03<\/a>","f5c13356":"## <a id='5=15=10'>5.15.10 \u7533\u8acb\u306fCASH, POS, CAR,\u2026\u306e\u3069\u308c\u3060\u3063\u305f\u306e\u304b\uff1f<\/a>","89a1a2f1":"## <a id='5-2'>5.2 AMT_INCOME_TOTAL\u306e\u5206\u5e03<\/a>","161c78ea":"* \u652f\u6255\u3044\u306e\u5927\u90e8\u5206\uff0861.9\uff05\uff09\u306f\u73fe\u91d1\u306e\u307f\u3067\u3059\u3002","1e95b6d0":"* \u7d0489\uff05\u306e\u4eba\u3005\u304c\u30ed\u30fc\u30f3\u3092\u7533\u8acb\u3057\u3001\u5f7c\u3089\u306f\u5bb6\u306e\u30bf\u30a4\u30d7\u306f **\u5bb6\/\u30a2\u30d1\u30fc\u30c8**\u3067\u3042\u308b\u3068\u8ff0\u3079\u307e\u3057\u305f\u3002","2ec74dba":"# <a id='4'> 4 \u6b20\u640d\u5024\u306e\u78ba\u8a8d<\/a>","7f20c4d6":"**credit_card_balance\u306e\u6b20\u640d\u5024\u3092\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002 **","c8d3ae78":"## <a id='5-10'>5.10 \u30ed\u30fc\u30f3\u3092\u7533\u8acb\u3057\u305f\u7533\u8acb\u8005\u306e\u8077\u696d<\/a>","af65cde2":"# <a id='1'>1. \u306f\u3058\u3081\u306b<\/a>","077708dc":"## <a id='5-12'>5.12 \u30ed\u30fc\u30f3\u3092\u7533\u8acb\u3057\u305f\u7533\u8acb\u8005\u306e\u4f4f\u5b85\u30bf\u30a4\u30d7<\/a>","ea851b7b":"**POS_CASH_balance\u306e\u6b20\u640d\u5024\u3092\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002 **","085dd684":"# <a id='7'>7. \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3092\u4f7f\u3063\u305f\u91cd\u8981\u306a\u7279\u5fb4\u91cf\u306b\u3064\u3044\u3066<\/a>","0742d606":"## <a id='5-7'>5.7 \u7533\u8fbc\u8005\u306f\u8eca\u3084\u5bb6\u3092\u6240\u6301\u3057\u3066\u3044\u308b\u304b<\/a>","b7b5e1f9":"* ** \u5fdc\u52df\u3057\u305f\u6642\u306e\u540c\u4f34\u8005\uff1a**\n  * \u540c\u4f34\u8005\u306a\u3057\uff1a\u7d0460\uff05\u56de\n  * \u5bb6\u65cf\uff1a\u7d0425\uff05\u56de\n  * \u914d\u5076\u8005\u3001\u30d1\u30fc\u30c8\u30ca\u30fc\uff1a\u7d048\uff05\n  * \u5b50\u4f9b\uff1a\u7d044\uff05","007fde89":"**POS_CASH_balance\u30c7\u30fc\u30bf**","a24b1e52":"## <a id='5-15-6'>5.15.6 \u306a\u305c\u7533\u8acb\u304c\u62d2\u7d76\u3055\u308c\u305f\u306e\u304b\uff1f<\/a>","f5478cb2":"## <a id='5-14'>5.14  \u30ed\u30fc\u30f3\u306e\u8fd4\u6e08\u306b\u95a2\u3059\u308b\u63a2\u7d22<\/a>","3990220e":"* \u306a\u3093\u3066\u5076\u7136\u304b\u3001\u6bce\u9031\u706b\u66dc\u65e5\u3001\u6c34\u66dc\u65e5\u3001\u6708\u66dc\u65e5\u3001\u91d1\u66dc\u65e5\u3001\u6728\u66dc\u65e5\u306e5\u65e5\u9593\u306b\u7d0415\uff05\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u7533\u3057\u8fbc\u307f\u307e\u3057\u305f\u3002","62a24ca9":"**credit_card_balance\u30c7\u30fc\u30bf**","41ccf069":"**previous_application\u306e\u6b20\u640d\u5024\u3092\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002 **","e43f2718":"* \u79c1\u305f\u3061\u304c\u898b\u308b\u9650\u308a\u3001\u30c7\u30fc\u30bf\u306f\u4e0d\u5747\u8861\u3067\u3059\u306d\u3002","1ae9687f":"**\u30ed\u30fc\u30f3\u3092\u7533\u8acb\u3057\u305f\u30c8\u30c3\u30d7\u7533\u8acb\u8005\uff1a**\n  - \u52b4\u50cd\u8005-\u7d0455 K\n  - \u55b6\u696d\u30b9\u30bf\u30c3\u30d5-\u7d0432 K\n  - \u30b3\u30a2\u30b9\u30bf\u30c3\u30d5-\u7d0428 K\n  - \u30de\u30cd\u30fc\u30b8\u30e3\u30fc-\u7d0421 K\n  - \u30c9\u30e9\u30a4\u30d0\u30fc-\u7d0419 K","550f52f3":"# <a id='6'>6. \u7279\u5fb4\u91cf\u306e\u30d4\u30a2\u30bd\u30f3\u76f8\u95a2<\/a>","9569e151":"## <a id='5-6'>5.6 \u30ed\u30fc\u30f3\u306e\u30bf\u30a4\u30d7<\/a>","1ae28aa6":"## <a id='5-14-4'>5.14.4 \u6559\u80b2\u3068\u30ed\u30fc\u30f3\u8fd4\u6e08\u306e\u95a2\u4fc2<\/a>","bc79fa6f":"* **\u524d\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u7372\u5f97\u3057\u305f\u30c8\u30c3\u30d7\u30c1\u30e3\u30cd\u30eb\uff1a**\n  * ATM\uff1a43\uff05\u56de\n  * \u56fd\u5168\u4f53\uff1a30\uff05\u56de\n  * \u30b9\u30c8\u30fc\u30f3\uff1a13\uff05\u56de","69608b69":"## <a id='5-15-9'>5.15.9 \u3069\u306e\u3088\u3046\u306a\u3082\u306e\u306b\u7533\u8acb\u3092\u3057\u305f\u306e\u304b\uff1f<\/a>","36e68e96":"## <a id='5-15-15'>5.15.15 \u4e0a\u4f4d\u306e\u5546\u54c1\u7d44\u307f\u5408\u308f\u305b\uff08\u8a73\u7d30\uff09<\/a>","d5c061f7":"- <a href='#1'>1. \u306f\u3058\u3081\u306b<\/a>  \n- <a href='#2'>2. \u30c7\u30fc\u30bf\u306e\u53d6\u5f97<\/a>\n- <a href='#3'>3. \u30c7\u30fc\u30bf\u306e\u6982\u8981<\/a>\n- <a href='#4'> 4. \u6b20\u640d\u5024\u306e\u78ba\u8a8d<\/a>\n- <a href='#5'>5. \u30c7\u30fc\u30bf\u63a2\u7d22<\/a>\n    - <a href='#5-1'>5.1 AMT_CREDIT\u306e\u5206\u5e03<\/a>\n    - <a href='#5-2'>5.2 AMT_INCOME_TOTAL\u306e\u5206\u5e03<\/a>\n    - <a href='#5-3'>5.3 AMT_GOODS_PRICE\u306e\u5206\u5e03<\/a>\n    - <a href='#5-4'>5.4 \u7533\u8fbc\u307f\u3092\u3057\u305f\u3068\u304d\u306b\u8ab0\u3068\u4e00\u7dd2\u3060\u3063\u305f\u304b\u306e\u5206\u5e03<\/a>\n    - <a href='#5-5'>5.5 \u30c7\u30fc\u30bf\u306f\u5747\u8861\u304c\u53d6\u308c\u3066\u3044\u308b\u306e\u304b\u53d6\u308c\u3066\u3044\u306a\u3044\u306e\u304b<\/a>\n    - <a href='#5-6'>5.6 \u30ed\u30fc\u30f3\u306e\u7a2e\u985e<\/a>\n    - <a href='#5-7'>5.7 \u7533\u8fbc\u8005\u306f\u8eca\u3084\u5bb6\u3092\u6240\u6301\u3057\u3066\u3044\u308b\u304b<\/a>\n    - <a href='#5-8'>5.8 \u30ed\u30fc\u30f3\u3092\u7533\u8acb\u3057\u305f\u7533\u8acb\u8005\u306e\u53ce\u5165\u6e90<\/a>\n    - <a href='#5-9'>5.9 \u30ed\u30fc\u30f3\u3092\u7533\u8acb\u3057\u305f\u7533\u8acb\u8005\u306e\u5bb6\u65cf\u306e\u30b9\u30c6\u30fc\u30bf\u30b9<\/a>\n    - <a href='#5-10'>5.10 \u30ed\u30fc\u30f3\u3092\u7533\u8acb\u3057\u305f\u7533\u8acb\u8005\u306e\u8077\u696d<\/a>\n    - <a href='#5-11'>5.11 \u30ed\u30fc\u30f3\u3092\u7533\u8acb\u3057\u305f\u7533\u8acb\u8005\u306e\u6559\u80b2<\/a>\n    - <a href='#5-12'>5.12 \u30ed\u30fc\u30f3\u3092\u7533\u8acb\u3057\u305f\u7533\u8acb\u8005\u306e\u4f4f\u5b85\u30bf\u30a4\u30d7<\/a>\n    - <a href='#5-13'>5.13 \u30ed\u30fc\u30f3\u3092\u7533\u8acb\u3057\u305f\u7d44\u7e54\u306e\u7a2e\u985e<\/a>\n    - <a href='#5-14'>5.14 \u30ed\u30fc\u30f3\u306e\u8fd4\u6e08\u306b\u95a2\u3059\u308b\u63a2\u7d22<\/a>\n        - <a href='#5-14-1'>5.14.1 \u7533\u8acb\u8005\u306e\u53ce\u5165\u3068\u30ed\u30fc\u30f3\u8fd4\u6e08\u306e\u95a2\u4fc2<\/a>\n        - <a href='#5-14-2'>5.14.2 \u5bb6\u65cf\u306e\u72b6\u6cc1\u3068\u30ed\u30fc\u30f3\u8fd4\u6e08\u306e\u95a2\u4fc2<\/a>\n        - <a href='#5-14-3'>5.14.3 \u8077\u696d\u3068\u30ed\u30fc\u30f3\u8fd4\u6e08\u306e\u95a2\u4fc2<\/a>\n        - <a href='#5-14-4'>5.14.4 \u6559\u80b2\u3068\u30ed\u30fc\u30f3\u8fd4\u6e08\u306e\u95a2\u4fc2<\/a>\n        - <a href='#5-14-5'>5.14.5 \u4f4f\u5b85\u5bfe\u5fdc\u3068\u30ed\u30fc\u30f3\u8fd4\u6e08\u306e\u95a2\u4fc2<\/a>\n        - <a href='#5-14-6'>5.14.6 \u7d44\u7e54\u7a2e\u985e\u3068\u30ed\u30fc\u30f3\u8fd4\u6e08\u306e\u95a2\u4fc2<\/a>\n        - <a href='#5-14-7'>5.14.7 Name of type of the Suite\u306e\u5206\u5e03\u3068\u30ed\u30fc\u30f3\u8fd4\u6e08\u306e\u95a2\u4fc2<\/a>\n    - <a href='#5-15'>5.15 \u4ee5\u524d\u306e\u7533\u8acb\u30c7\u30fc\u30bf\u306e\u63a2\u7d22<\/a>\n        - <a href='#5-15-1'>5.15.1 \u7533\u8acb\u6642\u306e\u5951\u7d04\u5546\u54c1\u30bf\u30a4\u30d7<\/a>\n        - <a href='#5-15-2'>5.15.2 \u3069\u306e\u65e5\u306b\u7533\u8acb\u304c\u4e00\u756a\u591a\u304f\u884c\u308f\u308c\u305f\u304b<\/a>\n        - <a href='#5-15-3'>5.15.3 \u30ed\u30fc\u30f3\u306e\u76ee\u7684<\/a>\n        - <a href='#5-15-4'>5.15.4 \u5951\u7d04\u306f\u3055\u308c\u305f\u304b\u3001\u3055\u308c\u306a\u304b\u3063\u305f\u304b<\/a>\n        - <a href='#5-15-5'>5.15.5 \u7533\u8acb\u6642\u306b\u9078\u629e\u3055\u308c\u305f\u652f\u6255\u3044\u65b9\u6cd5<\/a>\n        - <a href='#5-15-6'>5.15.6 \u306a\u305c\u7533\u8acb\u304c\u62d2\u7d76\u3055\u308c\u305f\u306e\u304b\uff1f<\/a>\n        - <a href='#5-15-7'>5.15.7 \u7533\u8acb\u6642\u306b\u8ab0\u304c\u540c\u4f34\u3057\u305f\u306e\u304b\uff1f<\/a>\n        - <a href='#5-15-8'>5.15.8 \u65b0\u898f\u9867\u5ba2\u304b\u65e2\u5b58\u9867\u5ba2\u304b\uff1f<\/a>\n        - <a href='#5-15-9'>5.15.9 \u3069\u306e\u3088\u3046\u306a\u3082\u306e\u306b\u7533\u8acb\u3092\u3057\u305f\u306e\u304b\uff1f<\/a>\n        - <a href='#5=15=10'>5.15.10 \u7533\u8acb\u306fCASH, POS, CAR,\u2026\u306e\u3069\u308c\u3060\u3063\u305f\u306e\u304b\uff1f<\/a>\n        - <a href='#5-15-11'>5.15.11 x-sell\u304bwalk-in\u304b?<\/a>\n        - <a href='#5-15-12'>5.15.12 \u9867\u5ba2\u7372\u5f97\u306b\u304a\u3051\u308b\u4e0a\u4f4d\u30c1\u30e3\u30cd\u30eb<\/a>\n        - <a href='#5-15-13'>5.15.13 \u58f2\u308a\u624b\u306b\u304a\u3051\u308b\u4e0a\u4f4d\u7523\u696d<\/a>\n        - <a href='#5-15-14'>5.15.14 \u4f4e\/\u4e2d\/\u9ad8\u306e\u8208\u5473\u95a2\u5fc3\u30b0\u30eb\u30fc\u30d7<\/a>\n        - <a href='#5-15-15'>5.15.15 \u4e0a\u4f4d\u306e\u5546\u54c1\u7d44\u307f\u5408\u308f\u305b\uff08\u8a73\u7d30\uff09<\/a>\n        - <a href='#5-15-16'>5.15.16 \u9867\u5ba2\u306e\u4fdd\u967a\u7533\u8acb\u7387<\/a>\n- <a href='#6'>6. \u7279\u5fb4\u91cf\u306e\u30d4\u30a2\u30bd\u30f3\u76f8\u95a2<\/a>\n- <a href='#7'>7. \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3092\u4f7f\u3063\u305f\u91cd\u8981\u306a\u7279\u5fb4\u91cf\u306b\u3064\u3044\u3066<\/a>","d7e66f92":"**application_train\u30c7\u30fc\u30bf\u306e\u4e2d\u306e\u6b20\u640d\u5024\u3092\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046 **","8c5e74d4":"## <a id='5-15-5'>5.15.5 \u7533\u8acb\u6642\u306b\u9078\u629e\u3055\u308c\u305f\u652f\u6255\u3044\u65b9\u6cd5<\/a>","fd329b87":"* 63.9\uff05\u306e\u5fdc\u52df\u8005\u306f\u7d50\u5a5a\u3057\u3066\u3044\u307e\u3059\u3002 14.8\uff05\u306f\u72ec\u8eab\u306a\u3069\u3002","cb8bb91d":"Home Credit\u793e\u306f\u3001\u9280\u884c\u53e3\u5ea7\u306e\u306a\u3044\u4eba\u3005\u306b\u524d\u5411\u304d\u3067\u5b89\u5168\u306a\u501f\u5165\u4f53\u9a13\u3092\u63d0\u4f9b\u3059\u308b\u3053\u3068\u3067\u3001\u91d1\u878d\u5e02\u5834\u306e\u62e1\u5927\u306b\u52aa\u3081\u3066\u3044\u307e\u3059\u3002 \u3053\u306e\u5341\u5206\u306a\u30b5\u30fc\u30d3\u30b9\u3092\u53d7\u3051\u3066\u3044\u306a\u3044\u4eba\u3005\u304c\u78ba\u5b9f\u306b\u878d\u8cc7\u3092\u53d7\u3051\u3089\u308c\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u3001Home Credit\u306f\u3001\u96fb\u8a71\u4f1a\u793e\u3084\u53d6\u5f15\u60c5\u5831\u306a\u3069\u306e\u3055\u307e\u3056\u307e\u306a\u4ee3\u66ff\u30c7\u30fc\u30bf\u3092\u5229\u7528\u3057\u3066\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u8fd4\u6e08\u80fd\u529b\u3092\u4e88\u6e2c\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u73fe\u5728\u3001Home Credit\u306f\u3055\u307e\u3056\u307e\u306a\u7d71\u8a08\u7684\u624b\u6cd5\u3084\u6a5f\u68b0\u5b66\u7fd2\u624b\u6cd5\u3092\u4f7f\u7528\u3057\u3066\u3053\u308c\u3089\u306e\u4e88\u6e2c\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u304c\u3001Kagglers\u304c\u30c7\u30fc\u30bf\u306e\u53ef\u80fd\u6027\u3092\u6700\u5927\u9650\u306b\u5f15\u304d\u51fa\u3059\u305f\u3081\u306e\u6311\u6226\u3092\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u3046\u3059\u308b\u3053\u3068\u3067\u3001\u8fd4\u6e08\u53ef\u80fd\u306a\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u62d2\u5426\u3055\u308c\u305a\u3001\u30ed\u30fc\u30f3\u304c\u5143\u672c\u3001\u6e80\u671f\u3001\u8fd4\u6e08\u30ab\u30ec\u30f3\u30c0\u30fc\u3067\u4e0e\u3048\u3089\u308c\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u6210\u529f\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002","ad402269":"## <a id='5-14-7'>5.14.7 \u30ed\u30fc\u30f3\u8fd4\u6e08\u3068\u5fdc\u52df\u6642\u540c\u4f34\u8005\u306e\u95a2\u4fc2<\/a>","900d44e1":"## <a id='5-3'>5.3 AMT_GOODS_PRICE\u306e\u5206\u5e03<\/a>","dabccb12":"## <a id='5-15-8'>5.15.8 \u65b0\u898f\u9867\u5ba2\u304b\u65e2\u5b58\u9867\u5ba2\u304b\uff1f<\/a>","eb0d569c":"## <a id='5-8'>5.8 \u30ed\u30fc\u30f3\u3092\u7533\u8acb\u3057\u305f\u7533\u8acb\u8005\u306e\u53ce\u5165\u6e90<\/a>","7c148694":"**bureau_balance\u30c7\u30fc\u30bf**","b40e0c44":"# <a id='5-15'>5.15 \u5fdc\u52df\u8005\u30c7\u30fc\u30bf\u306e\u63a2\u7d22<\/a>","1f06d33e":"**installments_payments\u306e\u6b20\u640d\u5024\u3092\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002 **","e0fdb361":"## <a id='5-14-1'>5.14.1 \u7533\u8acb\u8005\u306e\u53ce\u5165\u3068\u30ed\u30fc\u30f3\u8fd4\u6e08\u306e\u95a2\u4fc2<\/a>","63339db7":"**bureau_balance\u306e\u6b20\u640d\u5024\u3092\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002 **","1d9985e1":"# <a id='2'>2. \u30c7\u30fc\u30bf\u53d6\u5f97<\/a>","6b6162ef":"**application_train\u306e\u30c7\u30fc\u30bf**","173587f2":"![](http:\/\/www.homecredit.net\/~\/media\/Images\/H\/Home-Credit-Group\/image-gallery\/full\/image-gallery-01-11-2016-b.png)","28d410d7":"## <a id='5-15-1'>5.15.1 \u5fdc\u52df\u6642\u306e\u5951\u7d04\u88fd\u54c1\u30bf\u30a4\u30d7<\/a>","ec0df3dd":"## <a id='5-4'>5.4 \u7533\u8fbc\u307f\u3092\u3057\u305f\u3068\u304d\u306b\u8ab0\u3068\u4e00\u7dd2\u3060\u3063\u305f\u304b<\/a>","b001382e":"* 51.6\uff05\u306e\u7533\u8acb\u8005\u306f\u3001\u300c\u50cd\u3044\u3066\u3044\u308b\u300d\u3068\u8ff0\u3079\u305f\u3002 23.3\uff05\u304c\u5546\u7528\u30a2\u30bd\u30b7\u30a8\u30a4\u30c8\u3067\u300118\uff05\u304c\u5e74\u91d1\u53d7\u7d66\u8005\u306a\u3069\u3067\u3059\u3002","af65121b":"## <a id='5-5'>5.5 \u30c7\u30fc\u30bf\u306f\u5747\u8861\u304c\u53d6\u308c\u3066\u3044\u308b\u306e\u304b\u53d6\u308c\u3066\u3044\u306a\u3044\u306e\u304b<\/a>","d4bd936f":"## <a id='5-11'>5.11 \u30ed\u30fc\u30f3\u3092\u7533\u8acb\u3057\u305f\u7533\u8acb\u8005\u306e\u6559\u80b2\u72b6\u6cc1<\/a>","3199527c":"## <a id='5-15-16'>5.15.16 \u9867\u5ba2\u306e\u4fdd\u967a\u7533\u8acb\u7387<\/a>","b047c079":"# More To Come. Stayed Tuned ","be0148df":"## <a id='5-14-6'>5.14.6 \u8077\u696d\u3068\u30ed\u30fc\u30f3\u8fd4\u6e08<\/a>","72313cfc":"## <a id='5-15-12'>5.15.12 \u9867\u5ba2\u7372\u5f97\u306b\u304a\u3051\u308b\u4e0a\u4f4d\u30c1\u30e3\u30cd\u30eb<\/a>","c50acdcd":"## <a id='5-15-11'>5.15.11 x-sell\u304bwalk-in\u304b?<\/a>","6b096dd3":"**installments_payments data**","f27678b9":"## <a id='5-14-2'>5.14.2 \u5bb6\u65cf\u306e\u72b6\u6cc1\u3068\u30ed\u30fc\u30f3\u8fd4\u6e08\u306e\u95a2\u4fc2<\/a>","393ef59b":"## <a id='5-14-3'>5.14.3 \u8077\u696d\u3068\u30ed\u30fc\u30f3\u8fd4\u6e08\u306e\u95a2\u4fc2<\/a>","cbf6ffe0":"## <a id='5-14-5'>5.14.5 \u4f4f\u5b85\u3068\u30ed\u30fc\u30f3\u8fd4\u6e08\u306e\u95a2\u4fc2<\/a>","51d81c34":"* 71\uff05\u306e\u5fdc\u52df\u8005\u306f\u4e2d\u7b49\u6559\u80b2\u3092\u53d7\u3051\u300124.3\uff05\u306f\u9ad8\u7b49\u6559\u80b2\u3092\u53d7\u3051\u3066\u3044\u307e\u3059\u3002","19975cba":"## <a id='5-15-3'>5.15.3 \u5fdc\u52df\u6642\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u30ed\u30fc\u30f3\u306e\u76ee\u7684<\/a>","b93b6579":"* ** \u5fdc\u52df\u6642\u306e\u88fd\u54c1\u30bf\u30a4\u30d7\u306e\u5951\u7d04\uff1a**\n  * \u73fe\u91d1\u30ed\u30fc\u30f3-44.8\uff05\n  * \u6d88\u8cbb\u8005\u30ed\u30fc\u30f3-43.7\uff05\n  * \u30ea\u30dc\u30eb\u30d3\u30f3\u30b0\u30ed\u30fc\u30f3-11.6\uff05\n  * XNA-0.0207\uff05","42f683d6":"## <a id='5-15-14'>5.15.14 \u4f4e\/\u4e2d\/\u9ad8\u306e\u8208\u5473\u95a2\u5fc3\u30b0\u30eb\u30fc\u30d7<\/a>","68cbd877":"* \u30ed\u30fc\u30f3\u306e\u307b\u3068\u3093\u3069\u306f\u3001\u7533\u8acb\u8005\u304c\u53d6\u3063\u305f\u73fe\u91d1\u30ed\u30fc\u30f3\u3067\u3059\u3002 ** 90.5\uff05**\u30ed\u30fc\u30f3\u306f\u73fe\u91d1\u30ed\u30fc\u30f3\u3067\u3059\u3002","0dc4c4e1":"**bureau\u30c7\u30fc\u30bf**","f4b6115a":"# <a id='3'>3. \u30c7\u30fc\u30bf\u306e\u6982\u8981<\/a>","c2b378f5":"* **\u30ed\u30fc\u30f3\u3092\u7533\u8acb\u3057\u305f\u7d44\u7e54\u306e\u7a2e\u985e\uff1a**\n  * \u4e8b\u696d\u4f53\u30bf\u30a4\u30d73-\u7d0468 K\n  * XNA-\u7d0455 K\n  * \u81ea\u55b6\u696d-\u7d0438 K\n  * \u305d\u306e\u4ed6-\u7d0417 K\n  * \u533b\u7642\u7cfb-\u7d0411 K","b7232a6b":"## <a id='5-9'>5.9 \u30ed\u30fc\u30f3\u3092\u7533\u8acb\u3057\u305f\u7533\u8acb\u8005\u306e\u5bb6\u65cf\u306e\u30b9\u30c6\u30fc\u30bf\u30b9<\/a>","b59618c3":"** bureau\u306e\u6b20\u640d\u5024\u3092\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002 **","240b2383":"## <a id='5-15-4'>5.15.4 \u5951\u7d04\u304c\u627f\u8a8d\u3055\u308c\u305f\u304b\u3001\u4ee5\u524d\u306e\u7533\u8acb\u3067\u4e0d\u627f\u8a8d<\/a>","311d4378":"**previous_application\u30c7\u30fc\u30bf**","b83cf898":"* **Contract was approved or not in previous application :**\n  * Approved : 62.1 % times\n  * Cancelled : 18.9 % times\n  * Refused : 17.4 % times \n  * Unused offer : 1.58 % times","4c08e97c":"* **\u73fe\u91d1\u30ed\u30fc\u30f3\u306e\u4e3b\u306a\u76ee\u7684\u306f\uff1a**\n  * XAP-55\uff05\n  * XNA-41\uff05","d41d580d":"## <a id='5-13'>5.13 \u30ed\u30fc\u30f3\u3092\u7533\u8acb\u3057\u305f\u4eba\u306e\u7d44\u7e54\u7a2e\u985e <\/a>","d59afc8b":"## <a id='5-15-7'>5.15.7 \u7533\u8acb\u6642\u306b\u8ab0\u304c\u540c\u4f34\u3057\u305f\u306e\u304b\uff1f<\/a>","0635bdb2":"## <a id='5-15-13'>5.15.13 \u58f2\u308a\u624b\u306b\u304a\u3051\u308b\u4e0a\u4f4d\u7523\u696d<\/a>","b240e8de":"## <a id='5-15-2'>5.15.2 \u3069\u306e\u65e5\u306b\u5fdc\u52df\u8005\u304c\u591a\u304f\u306a\u308b\u306e\u304b\uff1f<\/a>","44e52ab6":"# <a id='5'>5. \u30c7\u30fc\u30bf\u63a2\u7d22<\/a>","f496b9ca":"*\u7d0474\uff05\u306f\u3001\u4ee5\u524d\u3082\u7533\u8acb\u3057\u305f\u3053\u3068\u304c\u3042\u308b\u30ea\u30d4\u30fc\u30bf\u30fc\u3067\u3057\u305f\u3002"}}