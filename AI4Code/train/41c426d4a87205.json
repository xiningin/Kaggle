{"cell_type":{"461bf74a":"code","1daecafd":"code","5b6388fb":"code","f8b99401":"code","add33e1d":"code","2e1a0a41":"code","b3a41b06":"code","92cbb58b":"code","4a459ced":"code","d9d6cde6":"code","199859e3":"code","3e96972f":"code","ac87b643":"code","c317a61b":"code","90daffbd":"code","cc447624":"code","2e195390":"code","c7aa95a1":"code","3e4eea4e":"code","f2109624":"code","e9fdffed":"code","c0e36d9e":"code","32d89bd2":"code","cb146e74":"code","37b59cda":"code","58f08b75":"code","6a66a104":"code","8f6481e1":"code","f5296291":"code","70ad9247":"code","593544f1":"code","8ab03cf0":"code","46775baa":"code","55443e79":"code","d03d4704":"code","01fcb62d":"code","7db79fb1":"code","c517d84a":"code","6af8788f":"code","09ed27d3":"code","88809d05":"code","bc2be14e":"code","945dfa46":"code","bea2c918":"code","d54f973b":"code","b629f127":"code","bb962372":"code","0d0cbea3":"code","659fd798":"code","c2d6a63d":"code","fc65f493":"code","cb1b0fef":"code","a68a46e5":"markdown","6a8a9873":"markdown","5cda3173":"markdown","fc57d38c":"markdown","dafe34d7":"markdown","5f130349":"markdown","192f896c":"markdown","98471743":"markdown","cad9a3b4":"markdown","93c4c7d1":"markdown","9cf571d8":"markdown","e1519acf":"markdown","f2353f4c":"markdown","5f3d5b9e":"markdown","45c04b62":"markdown","ecb1f471":"markdown","a8ee93c6":"markdown","af889276":"markdown","e1dd0332":"markdown","b18e23bb":"markdown","3921c0ed":"markdown","009a78dd":"markdown","35c0e7a5":"markdown","9e023dda":"markdown","bf137179":"markdown","ca1af478":"markdown","c5d337ad":"markdown","4303b5b8":"markdown","87a99b7a":"markdown","fdc261ca":"markdown","5698cf46":"markdown","03133525":"markdown","ddf5e37f":"markdown","26d42bf0":"markdown","ade8406e":"markdown","35b29cea":"markdown","c9aeca22":"markdown","6efe4fdd":"markdown"},"source":{"461bf74a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1daecafd":"import pandas as pd\nimport numpy as np \nimport matplotlib.pyplot as plt\nimport seaborn as sns","5b6388fb":"data_2015 = pd.read_csv(\"\/kaggle\/input\/world-happiness-report\/2015.csv\", delimiter=',')\ndata_2015.head()","f8b99401":"data_2015.describe()","add33e1d":"data_2015.info()","2e1a0a41":"heatmap = sns.heatmap(\n    data_2015.corr(), \n    vmin=-1, vmax=1, center=0,\n    cmap=sns.diverging_palette(20, 220, n=200),\n    square=True\n)\nheatmap.set_xticklabels(\n    heatmap.get_xticklabels(),\n    rotation=45,\n    horizontalalignment='right'\n);","b3a41b06":"sns.pairplot(data_2015)\nplt.show()","92cbb58b":"sns.jointplot(\"Economy (GDP per Capita)\", \"Happiness Score\", data=data_2015,\n                  kind=\"reg\", truncate=False,\n                  xlim=(0, 2), ylim=(0, 10),\n                  color=\"m\", height=7)","4a459ced":"sns.jointplot(\"Health (Life Expectancy)\", \"Happiness Score\", data=data_2015,\n                  kind=\"reg\", truncate=False,\n                  xlim=(0, 2), ylim=(0, 10),\n                  color=\"m\", height=7)","d9d6cde6":"sns.jointplot(\"Freedom\", \"Happiness Score\", data=data_2015,\n                  kind=\"reg\", truncate=False,\n                  xlim=(0, 1), ylim=(0, 10),\n                  color=\"m\", height=7)","199859e3":"sns.jointplot(\"Trust (Government Corruption)\", \"Happiness Score\", data=data_2015,\n                  kind=\"reg\", truncate=False,\n                  xlim=(0, 1), ylim=(0, 10),\n                  color=\"m\", height=7)","3e96972f":"avg_happiness = data_2015.groupby(\"Region\").mean()\nprint(avg_happiness)","ac87b643":"avg_happiness[[\"Happiness Score\"]].plot.bar()","c317a61b":"sns.lmplot(x=\"Health (Life Expectancy)\", y=\"Happiness Score\", col=\"Region\", data=data_2015, col_wrap=4)","90daffbd":"sns.lmplot(x=\"Economy (GDP per Capita)\", y=\"Happiness Score\", col=\"Region\", data=data_2015, col_wrap=4)","cc447624":"sns.lmplot(x=\"Family\", y=\"Happiness Score\", col=\"Region\", data=data_2015, col_wrap=4)","2e195390":"sns.lmplot(x=\"Freedom\", y=\"Happiness Score\", col=\"Region\", data=data_2015, col_wrap=4)","c7aa95a1":"sns.lmplot(x=\"Trust (Government Corruption)\", y=\"Happiness Score\", col=\"Region\", data=data_2015, col_wrap=4)","3e4eea4e":"data_2015['Year'] = '2015'\ndata2015 = data_2015[['Country','Happiness Score','Economy (GDP per Capita)','Health (Life Expectancy)',\n                      'Freedom','Trust (Government Corruption)','Generosity','Year']]\ndata2015.info()","f2109624":"data_2016 = pd.read_csv(\"\/kaggle\/input\/world-happiness-report\/2016.csv\", delimiter=',')\ndata_2016['Year'] = 2016\ndata2016 = data_2016[['Country','Happiness Score','Economy (GDP per Capita)','Health (Life Expectancy)',\n                      'Freedom','Trust (Government Corruption)','Generosity','Year']]\ndata2016.info()","e9fdffed":"data_2017 = pd.read_csv(\"\/kaggle\/input\/world-happiness-report\/2017.csv\", delimiter=',')\ndata_2017.rename(columns={\"Happiness.Score\": \"Happiness Score\", \"Economy..GDP.per.Capita.\": \"Economy (GDP per Capita)\", \n                          \"Health..Life.Expectancy.\": \"Health (Life Expectancy)\",\"Trust..Government.Corruption.\": \"Trust (Government Corruption)\"},\n                    inplace = True)\ndata_2017['Year'] = 2017\ndata2017 = data_2017[['Country','Happiness Score','Economy (GDP per Capita)','Health (Life Expectancy)',\n                      'Freedom','Trust (Government Corruption)','Generosity','Year']]\ndata2017.info()","c0e36d9e":"data_2018 = pd.read_csv(\"\/kaggle\/input\/world-happiness-report\/2018.csv\", delimiter=',')\ndata_2018.rename(columns={\"Country or region\": \"Country\", \"Score\": \"Happiness Score\", \"GDP per capita\": \"Economy (GDP per Capita)\",\n                         \"Healthy life expectancy\": \"Health (Life Expectancy)\",\"Freedom to make life choices\": \"Freedom\",\n                         \"Perceptions of corruption\": \"Trust (Government Corruption)\"}, inplace = True)\ndata_2018['Year'] = 2018\ndata2018 = data_2018[['Country','Happiness Score','Economy (GDP per Capita)','Health (Life Expectancy)',\n                      'Freedom','Trust (Government Corruption)','Generosity','Year']]\ndata2018.info()","32d89bd2":"is_NaN = data2018.isnull()\nrow_has_NaN = is_NaN. any(axis=1)\nrows_with_NaN = data2018[row_has_NaN]\nprint(rows_with_NaN)","cb146e74":"corruption_15 = data2015.loc[data2015['Country'] == 'United Arab Emirates']\ncorruption_15 = corruption_15['Trust (Government Corruption)'].values.item()\ncorruption_15","37b59cda":"corruption_16 = data2016.loc[data2016['Country'] == 'United Arab Emirates']\ncorruption_16 = corruption_16['Trust (Government Corruption)'].values.item()\ncorruption_16","58f08b75":"corruption_17 = data2017.loc[data2017['Country'] == 'United Arab Emirates']\ncorruption_17 = corruption_17['Trust (Government Corruption)'].values.item()\ncorruption_17","6a66a104":"corruption_mean = np.mean([corruption_15,corruption_16,corruption_17])\ncorruption_mean","8f6481e1":"data2018.loc[data2018.Country == 'United Arab Emirates', 'Trust (Government Corruption)'] = corruption_mean\ndata2018.info()","f5296291":"data_2019 = pd.read_csv(\"\/kaggle\/input\/world-happiness-report\/2019.csv\", delimiter=',')\ndata_2019['Year'] = 2019\ndata_2019.rename(columns={\"Country or region\": \"Country\",\"Score\": \"Happiness Score\",\"GDP per capita\": \"Economy (GDP per Capita)\",\n                         \"Healthy life expectancy\": \"Health (Life Expectancy)\", \"Freedom to make life choices\": \"Freedom\",\n                         \"Perceptions of corruption\": \"Trust (Government Corruption)\"}, inplace = True)\ndata2019 = data_2019[['Country','Happiness Score','Economy (GDP per Capita)','Health (Life Expectancy)',\n                      'Freedom','Trust (Government Corruption)','Generosity','Year']]\ndata2019.info()","70ad9247":"merged_happiness  = pd.concat([data2015, data2016, data2017, data2018, data2019], ignore_index = True)\nmerged_happiness.head()","593544f1":"merged_happiness.info()","8ab03cf0":"merged_happiness.describe()","46775baa":"sns.swarmplot(x=\"Year\", y=\"Happiness Score\",data=merged_happiness)","55443e79":"#sns.swarmplot(x=\"Year\", y=\"Happiness Score\", hue=\"Country\", data=merged_happiness)","d03d4704":"heatmap = sns.heatmap(\n    merged_happiness.corr(), \n    vmin=-1, vmax=1, center=0,\n    cmap=sns.diverging_palette(20, 220, n=200),\n    square=True\n)\nheatmap.set_xticklabels(\n    heatmap.get_xticklabels(),\n    rotation=45,\n    horizontalalignment='right'\n);","01fcb62d":"X = merged_happiness[['Economy (GDP per Capita)','Health (Life Expectancy)','Freedom','Trust (Government Corruption)','Generosity']]\ny = merged_happiness[['Happiness Score']]\nX.round(3)\ny.round(3)","7db79fb1":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8, random_state=42)","c517d84a":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\nlin_model = LinearRegression()\nlin_model.fit(X_train, y_train)\nlinear_pred = lin_model.predict(X_test)\nlinear_error = mean_squared_error(y_test, linear_pred)","6af8788f":"from sklearn.svm import LinearSVR\nsvr_model = LinearSVR()\nsvr_model.fit(X_train, y_train.values.ravel())\nsvr_pred = svr_model.predict(X_test)\nsvr_error = mean_squared_error(y_test, svr_pred)","09ed27d3":"from sklearn.ensemble import RandomForestRegressor\nrm_model = RandomForestRegressor(n_estimators=500, max_leaf_nodes=20, n_jobs=-1)\nrm_model.fit(X_train, y_train.values.ravel())\nrm_pred = rm_model.predict(X_test)\nrm_error = mean_squared_error(y_test, rm_pred)","88809d05":"print(\"The Mean Squared Error For Linear Regression is: {}\".format(linear_error))","bc2be14e":"print(\"The Mean Squared Error For Linear SVR is: {}\".format(svr_error))","945dfa46":"print(\"The Mean Squared Error For RandomForestRegressor is: {}\".format(rm_error))","bea2c918":"data_2020 = pd.read_csv(\"\/kaggle\/input\/world-happiness-report\/2020.csv\", delimiter=',')\ndata_2020.head()","d54f973b":"data_2020.drop(columns=['Generosity'] , inplace = True)\ndata_2020.head()","b629f127":"data_2020.rename(columns={'Ladder score':'Happiness Score','Explained by: Log GDP per capita': 'Economy (GDP per Capita)',\n                         'Explained by: Healthy life expectancy':'Health (Life Expectancy)',\n                          'Explained by: Freedom to make life choices':'Freedom',\n                         'Explained by: Perceptions of corruption':'Trust (Government Corruption)',\n                          'Explained by: Generosity': 'Generosity'}, inplace=True)\ndata2020 = data_2020[['Happiness Score','Economy (GDP per Capita)','Health (Life Expectancy)',\n                      'Freedom','Trust (Government Corruption)','Generosity']]\ndata2020.head()","bb962372":"X2020 = data2020[['Economy (GDP per Capita)','Health (Life Expectancy)',\n                      'Freedom','Trust (Government Corruption)','Generosity']]\ny2020 = data2020['Happiness Score']","0d0cbea3":"X2020.head()","659fd798":"pred2020 = rm_model.predict(X2020)","c2d6a63d":"maen_2020 = mean_squared_error(y2020, pred2020)","fc65f493":"print(\"The Mean Squared Error is: {}\".format(maen_2020))","cb1b0fef":"plt.scatter(y2020, pred2020)\nplt.plot([pred2020.min(), pred2020.max()], [pred2020.min(), pred2020.max()], 'k--', lw=4)\nplt.xlabel('Measured')\nplt.ylabel('Predicted')\nplt.title('RandomForestRegressor')\nplt.show()","a68a46e5":"In 2018 we can see that *Trust (Government Corruption)* has one NULL value,\nSo we will find the value and fill it with the mean of previuos years Trust (Government Corruption) as replacing it with 0 is not a great solution","6a8a9873":"Economy (GDP per Capita) Vs Happiness Score for each Region","5cda3173":"Now we will put the *corruption_mean* for country *United Arab Emirates*","fc57d38c":"Plotting the predictions.\n\n*I'm not sure wheather this plotting is correct or wrong so please suggest*","dafe34d7":"Freedom Vs Happiness Score","5f130349":"# Visualization For Year 2015","192f896c":"# LinearRegression","98471743":"HeatMap","cad9a3b4":"# RandomForestRegressor","93c4c7d1":"Here we will use three algo to predict the data \n1. LinearRegression\n2. LinearSVR\n3. RandomForestRegressor\nThen using Mean Squared Error we will compare their outputs and find the best model.\nAt last we will load the 2020 data, transform the data and do the prediction.","9cf571d8":"**Scatter Plot for each year**","e1519acf":"Family Vs Happiness Score for each Region","f2353f4c":"# Final Output","5f3d5b9e":"Transforming the data.","45c04b62":"#   A great obstacle to happiness is to expect too much happiness.\n![RFDHappiness-sfSpan.jpg](attachment:RFDHappiness-sfSpan.jpg)\n**World Happiness Report**\nThe World Happiness Report is a landmark survey of the state of global happiness that ranks 156 countries by how happy their citizens perceive themselves to be. The World Happiness Report 2020 for the first time ranks cities around the world by their subjective well-being and digs more deeply into how the social, urban and natural environments combine to affect our happiness.\n\nHere I have divided this notebook in three parts:-\n1. Visualization On 2015 Data\n2. Combining the data of 2015,2016,2017,2018,2019 in one format by combining common columns\n3. Finding the best model for prediction of Happiness of 2020 and do prediction\n","ecb1f471":"Great now we will go further.","a8ee93c6":"# LinearSVR","af889276":"Health (Life Expectancy) Vs Happiness Score","e1dd0332":"Get Mean for Each Region","b18e23bb":"# Loading 2020 data","3921c0ed":"# Prediction\nNow we will seperate the data in training and test sets.","009a78dd":"Freedom Vs Happiness Score for each Region","35c0e7a5":"I have commented the below code beacause the hue is overlappint the image. Please un-comment if you want and adjust the hue","9e023dda":"As the *RandomForestRegressor* has the least *Mean Squared Error* we will choose that model","bf137179":"Hence, we have done the prediction. \nHope you liked the Notebook. If yes please like it. And give suggestion if any. ThankYou...!!!","ca1af478":"After changing each columns name we will combine the data of each year in one form","c5d337ad":"**HeatMap**","4303b5b8":"Happiness Score Of Each Region","87a99b7a":"PairPlot","fdc261ca":"Health (Life Expectancy) Vs Happiness Score for each Region","5698cf46":"Economy (GDP per Capita) Vs Happiness Score","03133525":"**Loading Librarys**","ddf5e37f":"# Combining The Data\nAfter going through each years data one can notice is that each year has some different columns while calculating happiness for each country. Thus I combined  all the years data having same column according to 2015. Following process is a bit lengthy. The column names I used are :-*'Country', 'Happiness Score', 'Economy (GDP per Capita)', 'Health (Life Expectancy)', 'Freedom', 'Trust (Government Corruption)', 'Generosity','Year'*.\n\n*Note:- Some may have even better solution than this to combine the data. But I'm new to this field so I did it with the best way I can.Please give your suggestions if you have better solution ","26d42bf0":"Import 2015 Data","ade8406e":"Trust (Government Corruption) Vs Happiness Score","35b29cea":"Trust (Government Corruption) Vs Happiness Score for each Region","c9aeca22":"Splitting the data.","6efe4fdd":"*United Arab Emirates* has the empty value.\nWe will get the values of *Trust (Government Corruption)* for *United Arab Emirates* from previos years i.e 2015,2016,2017"}}