{"cell_type":{"fe8cfd3d":"code","933c3f00":"code","e4fb7777":"code","d08b5573":"code","16321a46":"code","7ecc3e67":"code","b1999bd1":"code","e36314f7":"code","78dd9516":"code","94acc7e5":"code","58016e99":"code","042c6fc3":"code","3f45c728":"code","60083476":"code","d3bb0e04":"code","b6ba0489":"code","b7466b2e":"code","f2758f3e":"code","ebd18024":"code","521bdc5c":"code","d1a6307d":"code","c4cac92b":"code","e4762e80":"code","8de47f60":"code","a8b2a12f":"code","dab9fda0":"code","92f50f9f":"code","4fd52c8d":"code","aa1dee18":"code","2404128f":"code","e17b5460":"code","5d47c747":"code","9ea97f1c":"code","025177fe":"code","ab8db2f6":"code","ca0c16bb":"code","824d5304":"code","dd771d21":"code","a2d629ea":"code","147826a1":"code","35f3c933":"code","c1b3543b":"code","e07e2157":"code","d5866868":"code","53fddb4c":"code","768cdd2e":"code","96f22c29":"code","551ea825":"code","b36289b8":"code","4df6ba17":"code","e00d1236":"code","e6da0efa":"code","c22a0cb2":"code","17123d73":"code","c8de9709":"code","6db72067":"code","c48f7c63":"code","5daef884":"code","c18e57dd":"code","e043b60f":"code","729cd5b5":"code","564ca6b4":"code","216c3648":"code","4541a626":"code","43bed6f6":"code","60b134a6":"code","e9160e00":"code","9ca174fb":"code","b7ee6fb2":"code","214a5637":"code","d70ae64d":"code","b1e00db2":"code","8659d91c":"code","208cac9c":"code","a8748f2c":"code","af06a7ad":"code","7cde0719":"code","935ee31a":"code","124d3743":"code","e4f6a708":"code","ac6a3138":"code","13f4bd35":"code","a7cc1acf":"code","3a22a12a":"code","0209c2a8":"code","4d84e523":"code","a8af5555":"code","3cb85158":"code","00508e2f":"code","cb0bb0b8":"code","66df26ba":"code","e81547bc":"code","5639984d":"code","4d8dc872":"code","ebd4914f":"code","7527312f":"code","bfaa26e6":"code","3436d29c":"code","ba87cce7":"code","712597fa":"code","ee57770b":"code","da6a0bd5":"code","6bacf3dc":"code","6c48be60":"code","28755807":"code","18b506b4":"code","60d6fdef":"code","1e8aec59":"code","b3c592c5":"code","29721a6a":"code","b2f3cfc5":"code","e651bf98":"code","09fcb897":"markdown","ded38c12":"markdown","9686a535":"markdown","962a7fea":"markdown","8b6302f7":"markdown","188d170d":"markdown","fcbc787d":"markdown","2e7b5815":"markdown","746cd0de":"markdown","53862674":"markdown","9933d2a8":"markdown","30d43c86":"markdown","6ff87bf1":"markdown","5cf7a1db":"markdown","3db3c598":"markdown","82007834":"markdown","e58a17dc":"markdown","dfafb00b":"markdown","99c32af8":"markdown","bbb0f1ed":"markdown","df640c55":"markdown","25b06ddd":"markdown","6af82fdd":"markdown","685ddbeb":"markdown","9b27af56":"markdown","707aa2cb":"markdown"},"source":{"fe8cfd3d":"import pandas as pd# data processing, CSV file I\/O (e.g. pd.read_csv)\nimport re\nimport numpy as np","933c3f00":"data = pd.read_csv('D:\\ka\\\\training.csv')","e4fb7777":"data.head()","d08b5573":"data_match = pd.read_csv('D:\\ka\\\\Matches IPL 2008-2019.csv')","16321a46":"data_match.head()","7ecc3e67":"squad = pd.read_csv('D:\\ka\\\\IPL 2020 Squads.csv')","b1999bd1":"squad","e36314f7":"line = \"Royal Challengers Bangalore\"\nwords = line.split()\nletters = [word[0] for word in words]\nprint(\"\".join(letters))","78dd9516":"data_match1=data_match.head()\nteam = data_match1[['team1']]\n#print(team)\ncolumns = list(data_match1) \n  \nfor i in columns: \n  \n    # printing the third element of the column \n    print (data_match1[i][1]) ","94acc7e5":"data_match.head()","58016e99":"team1_short = []\nfor index, row in data_match.iterrows():\n    line = (row['team1'])\n    words = line.split()\n    letters = [word[0] for word in words]\n    fw=\"\".join(letters)\n    team1_short.append(fw)\ndata_match['team1_short'] = team1_short","042c6fc3":"team2_short = []\nfor index, row in data_match.iterrows():\n    line = (row['team2'])\n    words = line.split()\n    letters = [word[0] for word in words]\n    fw=\"\".join(letters)\n    team2_short.append(fw)\ndata_match['team2_short'] = team2_short","3f45c728":"data_match.head()","60083476":"import re #for regex expressions\nstr= \"1_Bipul Sharma\"\nre.split('_',str)","d3bb0e04":"player_name = []\nmatch_id = []\nfor index, row in data.iterrows():\n    line = (row['Id'])\n    a = re.split('_',line)\n    match_id.append(int(a[0]))\n    player_name.append(a[1])\ndata['player_name'] = player_name\ndata['match_id'] = match_id","b6ba0489":"data.head()","b7466b2e":"new_df1= pd.merge(data,data_match[['match_id','team1_short','team2_short','season']])","f2758f3e":"new_df1.head()","ebd18024":"squad=squad.rename(columns={\"Player_name\": \"player_name\"})","521bdc5c":"player_name=[]\nsquad.head()\nfor index, row in squad.iterrows():\n    line = (row['player_name'])\n    a = re.split('\ufffd',line)\n    player_name.append(a[0])\nsquad['player_name'] = player_name","d1a6307d":"squad.head()","c4cac92b":"#find most common team, this can be used to find which team was the player playing for in each season\nfrom collections import Counter\n  \ndef most_common(test_list1):\n    print(test_list1)\n    test_list1 = Counter(test_list1) \n    res = test_list1.most_common()[0][0]\n    freq = test_list1.most_common()[0][1]\n    return freq,res","e4762e80":"player_lname=[]\nplayer_fname=[]\nnew_df1.head()\nfor index, row in new_df1.iterrows():\n    line = (row['player_name'])\n    #print(line)\n    ele = re.split(' ',line)\n    a=ele[-1]\n    b=ele[0]\n    #print(a,b)\n    #b=ele[0]\n    player_lname.append(a)\n    player_fname.append(b)\nnew_df1['lname'] = player_lname\nnew_df1['fname'] = player_fname\nnew_df1.head()","8de47f60":"season=[]\nplayer=[]\nteam=[]\nfor i in squad['player_name']:\n    nname=i #saving name for saving to list later\n    filter1=new_df1[new_df1.player_name.isin([i])]\n    if(filter1.empty):\n        nname=i.split()\n        nname=nname[1]\n        filter1=new_df1[new_df1.lname.isin([nname])]\n    for j in range(2008,2020):\n        #print(i,j)\n        filter2=filter1[filter1.season.isin([j])]\n        if(filter2.empty):\n            continue\n        else:\n            ipdf=filter2['team1_short'].values.tolist()\n            ipdf.extend(filter2['team2_short'].values.tolist())\n            freq,res=most_common(ipdf)# the mode team and its frequency\n            #print(filter2['team1_short'].head)\n            print(filter2['team1_short'].values.tolist())\n            #print(freq,res)\n            season.append(j)\n            player.append(i)\n            print(\"Team\",res)\n            team.append(res)\nnew_player_team_details = pd.DataFrame()\nnew_player_team_details['season']  = season\nnew_player_team_details['p_team']  = team\nnew_player_team_details['player_name']  = player\nnew_player_team_details","a8b2a12f":"new_df1= pd.merge(new_df1,new_player_team_details[['season','player_name','p_team']])\n","dab9fda0":"new_df1.head()","92f50f9f":"p_against=[]\nfor index, row in new_df1.iterrows():\n    p_team = (row['p_team'])\n    team1= (row['team1_short'])\n    team2=(row['team2_short'])\n    if team1==p_team:\n        p_against.append(team2)\n    else:\n        p_against.append(team1)\nnew_df1['p_against'] = p_against","4fd52c8d":"new_df1.head()","aa1dee18":"season1 = squad","2404128f":"season1.head()\nseason1['player_code'] = len(season1) - pd.Categorical(season1.player_name, ordered=True).codes","e17b5460":"new_df1= pd.merge(new_df1,season1[['player_name','player_code']])","5d47c747":"new_df1.head()","9ea97f1c":"p_against\nnew_df1['p_against_code'] = 30 - pd.Categorical(new_df1.p_against, ordered=True).codes","025177fe":"new_df1.to_csv (r'D:\\ka\\\\customtraining.csv', index = False, header=True)","ab8db2f6":"!pip install xgboost","ca0c16bb":"from numpy import loadtxt\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n# load data\ndataset = pd.read_csv('D:\\ka\\\\customtraining.csv')\n# split data into X and y\nY = dataset['Total Points']\nX = dataset[['player_code','p_against_code']]\n# split data into train and test sets\nseed = 7\ntest_size = 0.33\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=test_size, random_state=seed)\n# fit model no training data\nmodel = XGBClassifier()\nmodel.fit(X_train, y_train)\n# make predictions for test data\ny_pred = model.predict(X_test)\npredictions = [round(value) for value in y_pred]\n# evaluate predictions\naccuracy = accuracy_score(y_test, predictions)\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))","824d5304":"from sklearn import linear_model\nX = dataset[['player_code','p_against_code']]\ny = dataset['Total Points']\n# split data into train and test sets\nseed = 7\ntest_size = 0.05\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=test_size, random_state=seed)\nlm = linear_model.LinearRegression()\nmodel = lm.fit(X_train,y_train) #running with entire dataset","dd771d21":"y_pred = model.predict(X_test)","a2d629ea":"from sklearn.metrics import mean_squared_error\nmean_squared_error(y_test, y_pred,squared=False)","147826a1":"We are getting an RMSE value of 25.8 with 95% train and 5% test value using simple linear regression","35f3c933":"from sklearn import preprocessing\nscaler = preprocessing.StandardScaler().fit(X_train)\nX_scaled = scaler.transform(X_train)\nscaler1 = preprocessing.StandardScaler().fit(X_train)\nX_testscaled = scaler.transform(X_test)\n\nfrom sklearn.linear_model import LogisticRegression\nclf = LogisticRegression(random_state=0).fit(X_scaled,y_train)\ny_predl=clf.predict(X_testscaled)","c1b3543b":"mean_squared_error(y_test, y_predl,squared=False)","e07e2157":"submission= pd.read_csv(\"D:\\ka\\\\sample_submission.csv\")\ndataset = pd.read_csv('D:\\ka\\\\customtraining.csv')","d5866868":"submission.head()","53fddb4c":"player_name = []\nmatch_id = []\nfor index, row in submission.iterrows():\n    line = (row['Id'])\n    a = re.split('_',line)\n    match_id.append(int(a[0]))\n    player_name.append(a[1])\nsubmission['player_name'] = player_name\nsubmission['match_id'] = match_id\nsubmission.head()","768cdd2e":"data_match2020 = pd.read_csv('D:\\ka\\\\Matches IPL 2020.csv')\ndata_match2020.head()","96f22c29":"player_lname=[]\nplayer_fname=[]\nsubmission.head()\nfor index, row in submission.iterrows():\n    line = (row['player_name'])\n    #print(line)\n    ele = re.split(' ',line)\n    a=ele[-1]\n    b=ele[0]\n    #print(a,b)\n    #b=ele[0]\n    player_lname.append(a)\n    player_fname.append(b)\nsubmission['lname'] = player_lname\nsubmission['fname'] = player_fname\nsubmission.head()","551ea825":"squad=squad.rename(columns={\"Player_name\": \"player_name\"})","b36289b8":"squad['player_code'] = len(squad) - pd.Categorical(squad.player_name, ordered=True).codes","4df6ba17":"player_lname=[]\nplayer_fname=[]\nsquad.head()\nfor index, row in squad.iterrows():\n    line = (row['player_name'])\n    #print(line)\n    ele = re.split(' ',line)\n    a=ele[-1]\n    b=ele[0]\n    #print(a,b)\n    #b=ele[0]\n    player_lname.append(a)\n    player_fname.append(b)\nsquad['lname'] = player_lname\nsquad['fname'] = player_fname\nsquad.head()","e00d1236":"player_name=[]\nsquad.head()\nfor index, row in squad.iterrows():\n    line = (row['player_name'])\n    a = re.split('\ufffd',line)\n    player_name.append(a[0])\nsquad['player_name'] = player_name\n    ","e6da0efa":"submission= pd.merge(submission,data_match2020[['match_id','team1','team2']])\nsubmission.head()","c22a0cb2":"dataset.head()","17123d73":"squad=squad.rename(columns={\"Player_name\": \"player_name\"})","c8de9709":"player_name=[]\nfor index, row in squad.iterrows():\n    line = (row['player_name'])\n    a = re.split('\ufffd',line)\n    player_name.append(a[0])\nsquad['player_name'] = player_name","6db72067":"squad.head()","c48f7c63":"type(play)","5daef884":"player_name=[]\nteam=[]\nfailed_list=[]\nplayer_id=[]\nfor i in submission['player_name']:\n    filter1=squad[squad.player_name.isin([i])]\n    if(filter1.empty):\n        nname=i.split()\n        fname=nname[0]\n        if(len(nname)>=2):\n            lname=nname[len(nname)-1]\n        filter1=squad[squad.lname.isin([lname])]\n        if(filter1.empty):\n            continue\n   # else:\n    ipdf=filter1['Player_ipl_team'].values.tolist()\n        #print(ipdf)\n    if(len(ipdf)==1):\n        team.append(ipdf[0])\n        player_name.append(i)\n        player_code=filter1['player_code'].values.tolist()\n        player_id.append(player_code[0])\n    else:\n        filter2=filter1[filter1.fname.isin([fname])]\n        ipdf=filter2['Player_ipl_team'].values.tolist()\n            #print(ipdf)\n        if(len(ipdf)==1):\n            team.append(ipdf[0])\n            player_name.append(i)\n            player_code=filter1['player_code'].values.tolist()\n            player_id.append(player_code[0])\n        else:\n            failed_list.append(i)\nplay = pd.DataFrame()                   \nplay['player_name'] = player_name\nplay['team'] = team\nplay['player_code']=player_id\n#print(player_id)\nplay","c18e57dd":"play_drmvd = play.drop_duplicates()","e043b60f":"failed_list=np.array(failed_list)\nfailed_list=np.unique(failed_list)\nprint(len(failed_list))\nprint(failed_list)\n","729cd5b5":"squad['player_name'] = squad['player_name'].replace(['Axar Patel','Suryakumar Yadav','Ankit Sharma','Sheldon Cottrell','Deepak Chahar','Pavan Deshpande','Hardik Pandya','Harshal Patel','Harpreet Brar','Krunal Pandya','Karn Sharma','Josh Philippe','Prabhsimran Singh','Rinku Singh','Rahul Chahar','Rohit Sharma','Suryakumar Yadav','Sarfaraz Khan','Simran Singh','Umesh Yadav'],['AR Patel','AS Yadav','Ankit Sharma','Cottrell','DL Chahar','Deshpande',\n 'HH Pandya','HV Patel','Harpreet Singh','KH Pandya','KV Sharma','Philippe','Prabhsimran Singh','R Singh','RD Chahar','RG Sharma','SA Yadav' ,'SN Khan' ,'Simran Singh', 'UT Yadav'])","564ca6b4":"submission1= pd.merge(submission,play_drmvd[['player_name','team','player_code']],on='player_name',how = 'left')\nsubmission1.to_csv (r'D:\\ka\\\\playerteamnew.csv', index = False, header=True)","216c3648":"submission1.head()","4541a626":"p_against=[]\nfor index, row in submission1.iterrows():\n    p_team = (row['team'])\n    team1= (row['team1'])\n    team2=(row['team2'])\n    if team1==p_team:\n        p_against.append(team2)\n    else:\n        p_against.append(team1)\nsubmission1['p_against'] = p_against","43bed6f6":"submission1.head()","60b134a6":"submission1['p_against'] = submission1['p_against'].replace(['SRH'],'SH')\nsubmission1['p_against'] = submission1['p_against'].replace(['KXIP'],'KXP')","e9160e00":"dataset.head()","9ca174fb":"submission1.to_csv (r'D:\\ka\\\\submissionv2.csv', index = False, header=True)","b7ee6fb2":"submission1=pd.read_csv('D:\\ka\\\\submissionv2.csv')","214a5637":"submission1.head()","d70ae64d":"nds=dataset[['p_against','p_against_code']]","b1e00db2":"nds=nds.drop_duplicates()","8659d91c":"submission1.head()","208cac9c":"nds","a8748f2c":"submission1= pd.merge(submission1,nds[['p_against','p_against_code']],on='p_against',how = 'left')","af06a7ad":"submission1.head()","7cde0719":"X_pred = submission1[['player_code','p_against_code']]","935ee31a":"from sklearn import linear_model\nX_train = dataset[['player_code','p_against_code']]\ny_train = dataset['Total Points']\nlm = linear_model.LinearRegression()\nmodel = lm.fit(X_train,y_train) #running with entire dataset","124d3743":"y_pred = model.predict(X_pred)","e4f6a708":"y_pred","ac6a3138":"len(play.player_name.unique())","13f4bd35":"play_drmvd.to_csv (r'D:\\ka\\\\playersdd.csv', index = False, header=True)","a7cc1acf":"df2=pd.read_csv('D:\\ka\\\\csvplayer.csv')","3a22a12a":"p_names=df2['player_name']","0209c2a8":"p_names=p_names.drop_duplicates()","4d84e523":"p_name=[]\np_team=[]\nfor i in p_names:\n    n_f=df2[df2.player_name.isin([i])]\n    ipdf=n_f['team1'].values.tolist()\n    ipdf.extend(n_f['team2'].values.tolist())\n    freq,res=most_common(ipdf)\n    p_team.append(res)\n    p_name.append(i)\nn_p_d = pd.DataFrame()\nn_p_d['player_name']  = p_name\nn_p_d['team']  = p_team","a8af5555":"n_p_d","3cb85158":"dfextend= pd.merge(df2,n_p_d[['player_name','team']],on='player_name',how = 'left')","00508e2f":"p_against=[]\nfor index, row in dfextend.iterrows():\n    p_team = (row['team'])\n    team1= (row['team1'])\n    team2=(row['team2'])\n    if team1==p_team:\n        p_against.append(team2)\n    else:\n        p_against.append(team1)\ndfextend['p_against'] = p_against","cb0bb0b8":"dfextend","66df26ba":"#print(len(squad))\nnew_ids=len(squad)+len(n_p_d)\nprint(new_ids)","e81547bc":"dfextend['player_code'] = new_ids - pd.Categorical(dfextend.player_name, ordered=True).codes","5639984d":"dfextend","4d8dc872":"dfextend['p_against'] = dfextend['p_against'].replace(['SRH'],'SH')\ndfextend['p_against'] = dfextend['p_against'].replace(['KXIP'],'KXP')","ebd4914f":"nds=dataset[['p_against','p_against_code']]","7527312f":"nds=nds.drop_duplicates()","bfaa26e6":"dfextend= pd.merge(dfextend,nds[['p_against','p_against_code']],on='p_against',how = 'left')","3436d29c":"dfextend","ba87cce7":"dfextend.to_csv (r'D:\\ka\\\\missingplayerdetails.csv', index = False, header=True)","712597fa":"dfextend_final= pd.merge(submission1,dfextend[['Id','player_code','p_against_code','team']],on='Id',how = 'left')","ee57770b":"submission_final=submission1","da6a0bd5":"for index, row in submission_final.iterrows():\n    p_team = (row['player_code'])\n    if(pd.isna(p_team)):\n        id= (row['Id'])\n        filter1=dfextend[dfextend.Id.isin([id])]\n        team_val=filter1['team'].values.tolist()\n        pcodeval=filter1['player_code'].values.tolist()\n        t_against_val=filter1['p_against_code'].values.tolist()\n        submission_final.at[index,'team'] = team_val[0]\n        submission_final.at[index,'p_against_code'] = t_against_val[0]\n        submission_final.at[index,'player_code'] = pcodeval[0]","6bacf3dc":"submission_final.to_csv (r'D:\\ka\\\\final.csv', index = False, header=True)","6c48be60":"final_df=pd.read_csv('D:\\ka\\\\final_submission.csv')","28755807":"player_code=[]\np_against_code=[]\nteam=[]\nfor index, row in final_df.iterrows():\n    id= (row['Id'])\n    filter1=submission_final[submission_final.Id.isin([id])]\n    team_val=filter1['team'].values.tolist()\n    pcodeval=filter1['player_code'].values.tolist()\n    t_against_val=filter1['p_against_code'].values.tolist()\n    team.append(team_val[0])\n    p_against_code.append(t_against_val[0])\n    player_code.append(pcodeval[0])\nfinal_df['team'] = team\nfinal_df['player_code'] = player_code\nfinal_df['p_against_code']=p_against_code","18b506b4":"final_df.to_csv (r'D:\\ka\\\\finalfinal.csv', index = False, header=True)","60d6fdef":"import pandas as pd\nfinal_df=pd.read_csv('D:\\ka\\\\finalfinal.csv')","1e8aec59":"X_pred = final_df[['p_against_code']]","b3c592c5":"from sklearn import linear_model\nX_train = dataset[['p_against_code']]\ny_train = dataset['Total Points']\nlm = linear_model.LinearRegression()\nmodel = lm.fit(X_train,y_train) #running with entire dataset","29721a6a":"y_pred = model.predict(X_pred)","b2f3cfc5":"final_df['Total Points']=y_pred","e651bf98":"final_df.to_csv (r'D:\\ka\\\\finalsubmission2.csv', index = False, header=True)","09fcb897":"There are some missing values in the sheet so we are manually filling the data","ded38c12":"## Logistic Regression","9686a535":"Importing header files","962a7fea":"to check whether all rows  is filled correctly","8b6302f7":"since we now have data on which team the player is playing for we can get which team the player is playing against so that we can get the layer performace against every team","188d170d":"there are some issues in the name of player in squad and final_submission which makes it hard to merge files, we are merging files in 3 steps, first comaparing the player name, then if that fails comparing with last name only and even if that failes then doing manually","fcbc787d":"we are attempting to predict the ipl player performance for the year 2020 using previous year player performances","2e7b5815":"## Working with final file","746cd0de":"## Final Prediction","53862674":"splitting into ID and Player Name","9933d2a8":"### Linear Regression","30d43c86":"### Working with different sheets ","6ff87bf1":"Saving file for future use","5cf7a1db":"to find that we are getting the match details of each game player has participated and the most common team(mode) will be the team the player will be playing for","3db3c598":"#### RMSE","82007834":"Manually adding missing data","e58a17dc":"We have the player and match details but we dont have detail on which team the player was on for every year, we can use 2020 squad for now to get the team details","dfafb00b":"To find which team is playing against","99c32af8":"removing details such as captian from name which is not necessary for player score and the two dataframes can be merged","bbb0f1ed":"Splitting Player Name into first Name and last name","df640c55":"had to resave the csv file again in utf-8 format","25b06ddd":"since we are using regression we need to convert the strings to numbers. For that we are creating codes for each team","6af82fdd":"### Trying XGboost","685ddbeb":"### IPL Player Performance","9b27af56":"submission1.to_csv (r'D:\\ka\\\\submissionv3.csv', index = False, header=True)","707aa2cb":"#### Finding in which team each player has been playing for the previous years, so that we can map player performance against each team which will enable us to predict better"}}