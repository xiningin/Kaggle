{"cell_type":{"a9710b6d":"code","2799a647":"code","53fab79d":"code","561725bf":"code","2c37871d":"code","17992ebd":"code","cac843ae":"code","0e9c8615":"code","6aed13f9":"code","81a213fa":"code","ca7540dd":"code","5bb183db":"code","6b2de82a":"code","c166fc01":"code","81321c3b":"code","7b1d57a0":"code","24be4d13":"code","620f559e":"code","0af055c5":"code","e3eb24d6":"code","a43f67e3":"code","77b61db6":"code","e14e6c94":"code","526bfbc6":"code","4e85461f":"code","04d93671":"code","03e20b66":"code","2dd68629":"code","9d975ad9":"code","efa6cfc7":"code","10568aa4":"code","a0ee3568":"code","af878018":"code","1e7eb05d":"code","144d8d16":"code","a52a4deb":"code","6b1925e7":"code","a602820a":"code","57721e49":"code","d4bcf24d":"code","178f47eb":"code","60a2ca3b":"code","4d1899cd":"markdown","22ca674d":"markdown","99f05a1c":"markdown","0b27d71a":"markdown","345f6d66":"markdown","3b4fb441":"markdown","a0423c0a":"markdown","d7ee8cf7":"markdown","443879b0":"markdown","ff5de20c":"markdown","4ebce401":"markdown","ab31071e":"markdown","f91d49f7":"markdown","5ae7ce47":"markdown","fb1369a5":"markdown"},"source":{"a9710b6d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nfrom datetime import datetime\nfrom scipy.stats import skew  # for some statistics\nfrom scipy.special import boxcox1p\nfrom scipy.stats import boxcox_normmax\nfrom sklearn.linear_model import ElasticNetCV, LassoCV, RidgeCV\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.metrics import mean_squared_error\nfrom mlxtend.regressor import StackingCVRegressor\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","2799a647":"#Load data\ntrain = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","53fab79d":"#train and test's data's shape\ntrain.shape,test.shape","561725bf":"#A quick look at train and test's data\ntrain.head()","2c37871d":"test.head()","17992ebd":"#Leaving out the ID column , as it doesn't add any information for our model\ntrain = train.drop(['Id'],axis=1)\n#train = train.drop('Id',axis=1)\ntest = test.drop(['Id'],axis=1)\n#train.drop(['MSSubClass'], axis = 1)","cac843ae":"#\u5206\u5e03\u76f4\u65b9\u56fe\ntrain['SalePrice'].hist(bins = 40)","0e9c8615":"train['GrLivArea'].hist(bins = 40)","6aed13f9":"train = train[train.GrLivArea < 4000]#\u6b64\u5904\u539f\u6765\u4e3a< 4500\ntrain.reset_index(drop=True, inplace=True)\ntrain[\"SalePrice\"] = np.log1p(train[\"SalePrice\"])#log1p( ) \u7684\u4f7f\u7528\u5c31\u50cf\u662f\u4e00\u4e2a\u6570\u636e\u538b\u7f29\u5230\u4e86\u4e00\u4e2a\u533a\u95f4\uff0c\u4e0e\u6570\u636e\u7684\u6807\u51c6\u7c7b\u4f3c\u3002\u5176\u9006\u8fd0\u7b97\u5c31\u662fexpm1\u7684\u51fd\u6570\ny = train['SalePrice'].reset_index(drop=True)","81a213fa":"train['SalePrice'].hist(bins = 40)","ca7540dd":"train_features = train.drop(['SalePrice'],axis=1)\ntest_features = test\nfeatures = pd.concat([train_features,test_features]).reset_index(drop=True)","5bb183db":"features.shape","6b2de82a":"# Since these column are actually a category , using a numerical number will lead the model to assume\n# that it is numerical , so we convert to string .\nfeatures['MSSubClass'] = features['MSSubClass'].apply(str)\nfeatures['YrSold'] = features['YrSold'].astype(str)\nfeatures['MoSold'] = features['MoSold'].astype(str)\n","c166fc01":"## Filling these columns With most suitable value for these columns \nfeatures['Functional'] = features['Functional'].fillna('Typ') \nfeatures['Electrical'] = features['Electrical'].fillna(\"SBrkr\") \nfeatures['KitchenQual'] = features['KitchenQual'].fillna(\"TA\") \nfeatures[\"PoolQC\"] = features[\"PoolQC\"].fillna(\"None\")","81321c3b":"## Filling these with MODE , i.e. , the most frequent value in these columns .\nfeatures['Exterior1st'] = features['Exterior1st'].fillna(features['Exterior1st'].mode()[0]) \nfeatures['Exterior2nd'] = features['Exterior2nd'].fillna(features['Exterior2nd'].mode()[0])\nfeatures['SaleType'] = features['SaleType'].fillna(features['SaleType'].mode()[0])","7b1d57a0":"### Missing data in GarageYrBit most probably means missing Garage , so replace NaN with zero . \n\nfor col in ('GarageYrBlt', 'GarageArea', 'GarageCars'):\n    features[col] = features[col].fillna(0)\n\nfor col in ['GarageType', 'GarageFinish', 'GarageQual', 'GarageCond']:\n    features[col] = features[col].fillna('None')\n\n    \n### Same with basement\n\nfor col in ('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n    features[col] = features[col].fillna('None')","24be4d13":"#This code will filll the missing values with the mode (The frequently category appearing) By each MSsubclass:\nfeatures['MSZoning'] = features.groupby('MSSubClass')['MSZoning'].transform(lambda x:x.fillna(x.mode()[0]))","620f559e":"objects = []\nfor i in features.columns:\n    if features[i].dtype == object:\n        objects.append(i)\nfeatures.update(features[objects].fillna('None'))\nprint(objects)","0af055c5":"# We are still filling up missing values \nfeatures['LotFrontage'] = features.groupby('Neighborhood')['LotFrontage'].transform(lambda x: x.fillna(x.median()))\n\nnumeric_dtypes = ['int16','int32','int64','float16','float32','float64']\nnumerics = []\nfor i in features.columns:\n    if features[i].dtype in numeric_dtypes:\n        numerics.append(i)\nfeatures.update(features[numerics].fillna(0))\nnumerics[1:10]","e3eb24d6":"numeric_dtypes = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\nnumerics2 = []\nfor i in features.columns:\n    if features[i].dtype in numeric_dtypes:\n        numerics2.append(i)\nskew_features = features[numerics2].apply(lambda x: skew(x)).sort_values(ascending=False)\n\nhigh_skew = skew_features[skew_features > 0.5]\nskew_index = high_skew.index\n\nfor i in skew_index:\n    features[i] = boxcox1p(features[i], boxcox_normmax(features[i] + 1))","a43f67e3":"# Removing features that are not very useful . This can be understood only by doing proper EDA on data\n\nfeatures = features.drop(['Utilities', 'Street', 'PoolQC',], axis=1)\n\n# Adding new features . Make sure that you understand this. \n\nfeatures['YrBltAndRemod']=features['YearBuilt']+features['YearRemodAdd']\nfeatures['TotalSF']=features['TotalBsmtSF'] + features['1stFlrSF'] + features['2ndFlrSF']\n\nfeatures['Total_sqr_footage'] = (features['BsmtFinSF1'] + features['BsmtFinSF2'] +\n                                 features['1stFlrSF'] + features['2ndFlrSF'])\n\nfeatures['Total_Bathrooms'] = (features['FullBath'] + (0.5 * features['HalfBath']) +\n                               features['BsmtFullBath'] + (0.5 * features['BsmtHalfBath']))\n\nfeatures['Total_porch_sf'] = (features['OpenPorchSF'] + features['3SsnPorch'] +\n                              features['EnclosedPorch'] + features['ScreenPorch'] +\n                              features['WoodDeckSF'])","77b61db6":"## For ex, if PoolArea = 0 , Then HasPool = 0 too\n\nfeatures['haspool'] = features['PoolArea'].apply(lambda x: 1 if x > 0 else 0)\nfeatures['has2ndfloor'] = features['2ndFlrSF'].apply(lambda x: 1 if x > 0 else 0)\nfeatures['hasgarage'] = features['GarageArea'].apply(lambda x: 1 if x > 0 else 0)\nfeatures['hasbsmt'] = features['TotalBsmtSF'].apply(lambda x: 1 if x > 0 else 0)\nfeatures['hasfireplace'] = features['Fireplaces'].apply(lambda x: 1 if x > 0 else 0)","e14e6c94":"features.shape","526bfbc6":"final_features = pd.get_dummies(features).reset_index(drop=True)\nfinal_features.shape","4e85461f":"X = final_features.iloc[:len(y), :]\nX_sub = final_features.iloc[len(y):, :]\nX.shape, y.shape, X_sub.shape","04d93671":"outliers = [30, 88, 462, 631, 1322]\nX = X.drop(X.index[outliers])\ny = y.drop(y.index[outliers])\n\noverfit = []\nfor i in X.columns:\n    counts = X[i].value_counts()\n    zeros = counts.iloc[0]\n    if zeros \/ len(X) * 100 > 99.94:\n        overfit.append(i)\n\noverfit = list(overfit)\nX = X.drop(overfit, axis=1)\nX_sub = X_sub.drop(overfit, axis=1)\noverfit","03e20b66":"X.shape, y.shape, X_sub.shape","2dd68629":"# defining error functions for handy use. \n\n\nkfolds = KFold(n_splits=10, shuffle=True, random_state=42)\n\ndef rmsle(y, y_pred):\n    return np.sqrt(mean_squared_error(y, y_pred))\n\ndef cv_rmse(model, X=X):\n    rmse = np.sqrt(-cross_val_score(model, X, y, scoring=\"neg_mean_squared_error\", cv=kfolds))\n    return (rmse)","9d975ad9":"alphas_alt = [14.5, 14.6, 14.7, 14.8, 14.9, 15, 15.1, 15.2, 15.3, 15.4, 15.5]\nalphas2 = [5e-05, 0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0006, 0.0007, 0.0008]\ne_alphas = [0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0006, 0.0007]\ne_l1ratio = [0.8, 0.85, 0.9, 0.95, 0.99, 1]","efa6cfc7":"ridge = make_pipeline(RobustScaler(), RidgeCV(alphas=alphas_alt, cv=kfolds))\nlasso = make_pipeline(RobustScaler(), LassoCV(max_iter=1e7, alphas=alphas2, random_state=42, cv=kfolds))\nelasticnet = make_pipeline(RobustScaler(), ElasticNetCV(max_iter=1e7, alphas=e_alphas, cv=kfolds, l1_ratio=e_l1ratio))                                \nsvr = make_pipeline(RobustScaler(), SVR(C= 20, epsilon= 0.008, gamma=0.0003,))","10568aa4":"gbr = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05, max_depth=4, max_features='sqrt', min_samples_leaf=15, min_samples_split=10, loss='huber', random_state =42) ","a0ee3568":"lightgbm = LGBMRegressor(objective='regression', \n                                       num_leaves=4,\n                                       learning_rate=0.01, \n                                       n_estimators=5000,\n                                       max_bin=200, \n                                       bagging_fraction=0.75,\n                                       bagging_freq=5, \n                                       bagging_seed=7,\n                                       feature_fraction=0.2,\n                                       feature_fraction_seed=7,\n                                       verbose=-1,\n                                       )","af878018":"xgboost = XGBRegressor(learning_rate=0.01,n_estimators=3460,\n                                     max_depth=3, min_child_weight=0,\n                                     gamma=0, subsample=0.7,\n                                     colsample_bytree=0.7,\n                                     objective='reg:linear', nthread=-1,\n                                     scale_pos_weight=1, seed=27,\n                                     reg_alpha=0.00006)","1e7eb05d":"stack_gen = StackingCVRegressor(regressors=(ridge, lasso, elasticnet, gbr, xgboost, lightgbm),\n                                meta_regressor=xgboost,\n                                use_features_in_secondary=True)","144d8d16":"# Using various prediction models that we just created \n\nscore = cv_rmse(ridge , X)\nscore = cv_rmse(lasso , X)\nprint(\"LASSO: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()), datetime.now(), )\n\nscore = cv_rmse(elasticnet)\nprint(\"elastic net: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()), datetime.now(), )\n\nscore = cv_rmse(svr)\nprint(\"SVR: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()), datetime.now(), )\n\nscore = cv_rmse(lightgbm)\nprint(\"lightgbm: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()), datetime.now(), )\n\nscore = cv_rmse(gbr)\nprint(\"gbr: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()), datetime.now(), )\n\nscore = cv_rmse(xgboost)\nprint(\"xgboost: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()), datetime.now(), )","a52a4deb":"print('START Fit')\n\nprint('stack_gen')\nstack_gen_model = stack_gen.fit(np.array(X), np.array(y))\n\nprint('elasticnet')\nelastic_model_full_data = elasticnet.fit(X, y)\n\nprint('Lasso')\nlasso_model_full_data = lasso.fit(X, y)\n\nprint('Ridge')\nridge_model_full_data = ridge.fit(X, y)\n\nprint('Svr')\nsvr_model_full_data = svr.fit(X, y)\n\nprint('GradientBoosting')\ngbr_model_full_data = gbr.fit(X, y)\n\nprint('xgboost')\nxgb_model_full_data = xgboost.fit(X, y)\n\nprint('lightgbm')\nlgb_model_full_data = lightgbm.fit(X, y)","6b1925e7":"def blend_models_predict(X):\n    return ((0.1 * elastic_model_full_data.predict(X)) + \\\n            (0.05 * lasso_model_full_data.predict(X)) + \\\n            (0.1 * ridge_model_full_data.predict(X)) + \\\n            (0.1 * svr_model_full_data.predict(X)) + \\\n            (0.1 * gbr_model_full_data.predict(X)) + \\\n            (0.15 * xgb_model_full_data.predict(X)) + \\\n            (0.1 * lgb_model_full_data.predict(X)) + \\\n            (0.3 * stack_gen_model.predict(np.array(X))))","a602820a":"print('RMSLE score on train data:')\nprint(rmsle(y, blend_models_predict(X)))","57721e49":"print('Predict submission')\nsubmission = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv\")\nsubmission.iloc[:,1] = (np.expm1(blend_models_predict(X_sub)))","d4bcf24d":"q1 = submission['SalePrice'].quantile(0.0042)\nq2 = submission['SalePrice'].quantile(0.99)\n# Quantiles helping us get some extreme values for extremely low or high values \nsubmission['SalePrice'] = submission['SalePrice'].apply(lambda x: x if x > q1 else x*0.77)\nsubmission['SalePrice'] = submission['SalePrice'].apply(lambda x: x if x < q2 else x*1.1)\nsubmission.to_csv(\"submission.csv\", index=False)","178f47eb":"submission[0:4]","60a2ca3b":"submission['SalePrice'] = np.expm1(submission['SalePrice'])","4d1899cd":"**Now , we are merging train and test datasets , so that we can handle 'noise' and missing data in the dataset **","22ca674d":"**Submission**","99f05a1c":"**Here , we compare the various models that we just created..**","0b27d71a":"**We are going to transform skewed columns**","345f6d66":"**In simple words , Stacking helps avoid fitting on the same data twice , and is effective in reducing overfitting.**","3b4fb441":"**Get_dummies converts Categorical data to numerical , as models don't work with Text data .**","a0423c0a":"**Here , Again train and test are spilt back seperately , as now all data processing is done**","d7ee8cf7":"**STEP 3 : Feature Engineering**","443879b0":"**Data procession**","ff5de20c":"**For missing values in numerical cols , we fillNa with 0.**","4ebce401":"**Fill the remaining columns as None**","ab31071e":"**Blending Models \/ 'Ensambling'**","f91d49f7":"**Final Step :\nNow , we are getting started with the process of modelling**","5ae7ce47":"**Removing outliers . Read other Kernels to understand how they were found out**","fb1369a5":"**Turns out we have dropped just one column (Compare the shape)**"}}