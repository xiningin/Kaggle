{"cell_type":{"b7dc6b29":"code","0746fe0f":"code","d0ca0f75":"code","09d5f7a2":"code","79c7fab6":"code","d4e0e984":"code","e2d062ac":"code","47ae9247":"code","fb0c9275":"code","e2bdd7f3":"code","650469ee":"code","eb9cf6b5":"code","6ce4a8fa":"code","f0cf899a":"code","661a2ff5":"code","4b85570e":"code","b5b303fc":"code","72e39520":"code","1229e38c":"code","2d199592":"code","5aa61494":"code","d214d028":"code","b9c338f2":"code","e89a2144":"code","c232992f":"code","e30051b9":"code","6511a68d":"code","3b989713":"code","a49d5360":"code","d5ef9451":"code","8e26d98a":"code","5234367e":"code","f0af47e5":"code","f6f7f045":"code","b5d3ee75":"code","5bf200e1":"code","640c990e":"code","c1016611":"code","324eb0b9":"code","858c1fab":"code","03fb1456":"code","2a5a847e":"code","a450d47c":"code","ea0cca6b":"code","9134d3f8":"code","ba13489f":"code","fd41f0c9":"code","b1988a3a":"code","d3bb07dd":"code","8411af42":"code","e628f319":"code","45f5d106":"code","0edb6ee9":"code","669cef20":"code","0cee3152":"code","3075d60f":"code","f0988504":"code","34e5aad9":"code","840005a7":"code","4c641974":"code","9f2b5bba":"code","9afa5a52":"code","30961c9f":"code","75d098f7":"code","9d392660":"code","1ac4ecf9":"code","dc399863":"code","2ec41d1e":"code","b1bddce3":"code","801dbe2f":"code","f280d2e7":"code","e132d225":"code","aa6c3b7a":"code","918c2d4c":"code","26be2b02":"code","97022f58":"code","a58c9561":"code","875d012c":"markdown","a8c0dc32":"markdown","1decb2f6":"markdown","c15e6b33":"markdown","16ce6c18":"markdown","ea49ae48":"markdown","1be22704":"markdown","b0b461af":"markdown","aaec6f6f":"markdown","d6723c03":"markdown","6894ebc8":"markdown","99de84fa":"markdown","7641e9fc":"markdown","fbd01e01":"markdown","65b11cb1":"markdown","0167d70b":"markdown","f5e0db53":"markdown","364d19bb":"markdown","be85c313":"markdown","08c4093b":"markdown","77844bb6":"markdown","e3e0b8d5":"markdown","974cd0bb":"markdown","aa6409e6":"markdown","afe4f648":"markdown","edfa32bd":"markdown","1cd69fb3":"markdown","a3fda2d8":"markdown","cdb15b23":"markdown","1fd0b9ef":"markdown","89226718":"markdown","ce734ff2":"markdown"},"source":{"b7dc6b29":"import os\nfrom zipfile import ZipFile\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport missingno as msm\nimport pandas as pd\nfrom scipy import stats\n\nfrom sklearn.feature_selection import SelectKBest, f_regression, SelectFromModel, mutual_info_regression\nfrom sklearn.model_selection import cross_val_score, cross_val_predict, RandomizedSearchCV, train_test_split\nfrom sklearn.metrics import mean_squared_error, mean_squared_log_error\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.pipeline import make_pipeline, Pipeline\nfrom sklearn.ensemble import RandomForestRegressor, ExtraTreesRegressor, GradientBoostingRegressor, AdaBoostRegressor\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.preprocessing import StandardScaler\n\nfrom xgboost import XGBRegressor\n\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Flatten\nfrom tensorflow import keras","0746fe0f":"data = pd.read_csv('..\/input\/trainset\/Train.csv', low_memory=False, parse_dates=['saledate'])\ndata.head()","d0ca0f75":"data.describe()","09d5f7a2":"df_eda = data.copy()","79c7fab6":"plt.figure(figsize=(13, 5))\ni = 0\nfor attribute in ('Engine_Horsepower', 'Drive_System'):\n  i += 1\n  plt.subplot(1, 2, i)\n  sns.boxplot(df_eda[attribute], df_eda['SalePrice'])\nplt.show()","d4e0e984":"# Missing value\nmsm.bar(df_eda, figsize=(24, 5), fontsize=16, labels=True, log=False )\nplt.show()","e2d062ac":"(df_eda.isnull().sum()\/len(df_eda)).sort_values()","47ae9247":"# Let's identify the which feature contains more than 90% missing value\nheigh_nan_features = [feature for feature in df_eda.columns  if (df_eda[feature].isna().sum()\/len(df_eda)) > 0.9]\nheigh_nan_features","fb0c9275":"# Categorical features\ncategorical_feature_list = [feature for feature in df_eda.columns if feature != 'saledate' and df_eda[feature].dtype == 'O']\n\nfor feature in categorical_feature_list:\n  print(f'{feature :-<50} {df_eda[feature].nunique()}')","e2bdd7f3":"# Numerical categories analysis\nnumerical_feature_list = [feature for feature in df_eda.columns if feature not in ('SalePrice', 'saledate') and df_eda[feature].dtype != 'O']","650469ee":"discret_value_feature = [feature for feature in numerical_feature_list if len(df_eda[feature].unique()) < 25]\nsns.countplot(x='datasource', data=df_eda[['datasource']]);","eb9cf6b5":"continuous_value_feature = [feature for feature in numerical_feature_list if df_eda[feature].nunique() > 25]\ndef plot_hist (nrow=1, ncol=1, feature_list=None, figsize=(24, 10)):\n  plt.figure(figsize=figsize)\n  i = 0\n  for feature in feature_list:\n    i += 1\n    plt.subplot(nrow, ncol, i)\n    sns.distplot(df_eda[feature], bins=50)\n  plt.show()","6ce4a8fa":"plot_hist(nrow=2, ncol=3, feature_list=continuous_value_feature)","f0cf899a":"#2 SalePrice\ndf_eda['SalePrice'].describe()","661a2ff5":"sns.distplot(df_eda['SalePrice'], bins=50);","4b85570e":"df_eda['SalePrice'].skew(), df_eda['SalePrice'].kurt()","b5b303fc":"sns.boxplot(df_eda['SalePrice']);","72e39520":"# Descret value features\nsns.boxplot(x='datasource', y='SalePrice', data=df_eda);","1229e38c":"# continuous value feature\ndef scatter_plot (nrow=1, ncol=1, feature_list=None, figsize=(24, 10), target='SalePrice'):\n  plt.figure(figsize=figsize)\n  i = 0\n  for feature in feature_list:\n    i += 1\n    plt.subplot(nrow, ncol, i)\n    sns.scatterplot(df_eda[feature], df_eda[target])\n  plt.show()","2d199592":"scatter_plot(nrow=2, ncol=3, feature_list=continuous_value_feature)\n","5aa61494":"corr = df_eda.corr()\nplt.figure(figsize=(7, 7))\nsns.heatmap(corr, cmap='YlGn_r', cbar=False, annot=True);","d214d028":"# Let's plot what we have seen in heatmap using pairplot\nsns.pairplot(df_eda[numerical_feature_list + ['SalePrice']], height = 2.5);","b9c338f2":"saleprice_scaled = StandardScaler().fit_transform(df_eda['SalePrice'].to_numpy().reshape(-1, 1));\nlow_range = saleprice_scaled[saleprice_scaled[:,0].argsort()][:10]\nhigh_range= saleprice_scaled[saleprice_scaled[:,0].argsort()][-10:]\nprint('outer range (low) of the distribution:')\nprint(low_range)\nprint('\\nouter range (high) of the distribution:')\nprint(high_range)","e89a2144":"def statical_analysis (df, attribute_name, figsize=(15, 5)):\n\n  plt.figure(figsize=figsize)\n  i = 0\n  for item in (1, 2):\n    i +=1\n    plt.subplot(1, 2, i)\n    if i == 1: sns.distplot(df[attribute_name], bins=50, fit=stats.norm)\n    else:  stats.probplot(df[attribute_name], plot=plt)\n    \n  plt.show()","c232992f":"# For sale price \nstatical_analysis(df_eda, 'SalePrice')","e30051b9":"# let's apply log transform to SalePrice\ndf_log = df_eda.copy()\ndf_log['SalePrice'] = np.log1p(df_log['SalePrice'])\nstatical_analysis(df_log, 'SalePrice')","6511a68d":"numerical_feature_list","3b989713":"statical_analysis(df_eda, 'MachineHoursCurrentMeter')","a49d5360":"#apply log transform\ndf_log['MachineHoursCurrentMeter'] = np.log1p(df_log['MachineHoursCurrentMeter'])\nstatical_analysis(df_log, 'MachineHoursCurrentMeter')","d5ef9451":"df = data.copy()","8e26d98a":"# let's first work on sale date \ndef date_preprocessing (dataFrame, feature='saledate'):\n  dataFrame['saleYear'] = dataFrame[feature].dt.year\n  dataFrame['saleMonth'] = dataFrame[feature].dt.month\n  dataFrame['saleDay'] = dataFrame[feature].dt.day\n  dataFrame['saleDayOfWeek'] = dataFrame[feature].dt.dayofweek\n  dataFrame['saleDayOfYear'] = dataFrame[feature].dt.dayofyear\n  dataFrame.drop(feature, inplace=True, axis=1)","5234367e":"date_preprocessing(df)","f0af47e5":"def Ordinal_encoder (dataFrame, feature_list):\n  mask = {'Mini': 1, 'Small': 1, 'Medium': 2, 'Large \/ Medium': 3,  'Large': 3, 'Low': 1, 'High': 3}\n  for label in feature_list:\n    dataFrame[label] = dataFrame[label].map(mask)","f6f7f045":"Ordinal_encoder(df, ['ProductSize', 'UsageBand'])","b5d3ee75":"# Now let's handle Missing value\nclass FillMissing ():\n\n  def fill_categorical (self,  dataFrame):\n    for label, content in  dataFrame.items():\n      if pd.api.types.is_string_dtype(content):\n         dataFrame[label].fillna('missing', inplace=True)\n    # return df\n\n  def fill_numerical (self,  dataFrame):\n    for label, content in  dataFrame.items():\n     if pd.api.types.is_numeric_dtype(content):\n        dataFrame[label] = content.fillna(content.median())\n    # return df","5bf200e1":"fill_missing_value = FillMissing()","640c990e":"fill_missing_value.fill_categorical(df)","c1016611":"fill_missing_value.fill_numerical(df)","324eb0b9":"def nominal_encoder (dataFrame, label_list):\n\n  for label, content in  dataFrame.items():\n    if pd.api.types.is_string_dtype(content):\n       dataFrame[label] = content.astype('category').cat.as_ordered()\n       dataFrame[label] = pd.Categorical(content).codes + 3","858c1fab":"label_list = [feature for feature in df.columns if df[feature].dtype == 'O']\nnominal_encoder(df, label_list)","03fb1456":"#drop IDs \ndf =df.drop(['SalesID', 'MachineID','ModelID','auctioneerID'], axis=1)","2a5a847e":"# We will be using decision to simply findout which value of k that gives small MSE.\nfeature_selection = make_pipeline(SelectKBest(score_func=f_regression, k=52), DecisionTreeRegressor(max_depth=10, random_state=0))","a450d47c":"# For the purpose will split the training set into train and test. It is important to bear in mind that the mentioned splited dataset will be use only for finding best K value\nX_1, y_1 = df.drop('SalePrice', axis=1), df['SalePrice']\nX_1, X_2, y_1, y_2 = train_test_split(X_1, y_1, test_size=.2)\nfeature_selection.fit(X_1, y_1)","ea0cca6b":"y_1_pred, y_2_pred= feature_selection.predict(X_1),  feature_selection.predict(X_2)","9134d3f8":"print(f'mse_1: {np.sqrt(mean_squared_error(y_1, y_1_pred))}, mse_2:{np.sqrt(mean_squared_error(y_2, y_2_pred))}')","ba13489f":"def scale_feature (X):\n  scaled = StandardScaler().fit_transform(X)\n  return scaled","fd41f0c9":"X_train, y_train = df.drop('SalePrice', axis=1), df['SalePrice']\nX_train = scale_feature(X_train)","b1988a3a":"def model_training (models, X_train, y_train, cv=3):\n  for name, model in models.items():\n    print(name)\n    scores = cross_val_score(model, X_train, y_train, cv=cv, scoring='neg_mean_squared_error')\n    print({'score': np.sqrt(-scores).mean(), 'std': np.sqrt(-scores).std() })","d3bb07dd":"models = {'KNeighborsRegressor': KNeighborsRegressor(),\n          'RandomForestRegressor': RandomForestRegressor(), \n          'ExtraTreesRegressor': ExtraTreesRegressor(),  \n          'AdaBoostRegressor': AdaBoostRegressor(), \n          'GradientBoostingRegressor':  GradientBoostingRegressor(), \n          'XGBRegressor':  XGBRegressor()\n          }\n\nmodel_training(models, X_train, y_train)","8411af42":"def hyperparameters_tuning (model, X_train, y_train, param_grid, cv=5):\n  grid = RandomizedSearchCV(model, param_grid, n_iter=10, scoring='neg_mean_squared_error', n_jobs=-1, random_state=42, verbose=2, cv=cv)\n  grid.fit(X_train, y_train)\n  \n  return grid.best_estimator_","e628f319":"extra_forest_param_grid = {'n_estimators':[150, 300, 600], \n                          'min_samples_leaf':[2, 3],  \n                          'min_samples_split':[14, 12], \n                          'max_features':[0.7, 1],\n                          'max_samples':[10000], # 10000 has been used due to the limited available memory of notebook (in Kaggle).\n                          'bootstrap':[None, True]\n              }\nextra_forest = hyperparameters_tuning(ExtraTreesRegressor(), X_train, y_train, extra_forest_param_grid)\nextra_forest","45f5d106":"# let's prepare validation data \nX_valid = pd.read_csv('..\/input\/bluebook-for-bulldozers\/Valid.csv', parse_dates=['saledate'])\ny_valid = pd.read_csv('..\/input\/bluebook-for-bulldozers\/ValidSolution.csv')\ny_valid = y_valid['SalePrice']","0edb6ee9":"#drop IDs \nX_valid =X_valid.drop(['SalesID', 'MachineID','ModelID','auctioneerID'], axis=1)","669cef20":"date_preprocessing(X_valid)","0cee3152":"Ordinal_encoder(X_valid, ['ProductSize', 'UsageBand'])","3075d60f":"fill_missing_value.fill_categorical(X_valid)","f0988504":"fill_missing_value.fill_numerical(X_valid)","34e5aad9":"nominal_encoder(X_valid, label_list)","840005a7":"X_valid = scale_feature(X_valid)","4c641974":"def evaluate_best_model (X_train, y_train, X_valid, y_valid):\n\n    estimator = ExtraTreesRegressor(bootstrap=None, ccp_alpha=0.0, criterion='mse',\n                    max_depth=None, max_features=0.7, max_leaf_nodes=None,\n                    max_samples=None, min_impurity_decrease=0.0,\n                    min_impurity_split=None, min_samples_leaf=2,\n                    min_samples_split=12, min_weight_fraction_leaf=0.0,\n                    n_estimators=300, n_jobs=None, oob_score=False,\n                    random_state=None, verbose=0, warm_start=False)\n    \n    estimator.fit(X_train, y_train)\n    y_train_pred = estimator.predict(X_train)\n    y_valid_pred = estimator.predict(X_valid)\n\n    return {\n          'MSE_train': np.sqrt(mean_squared_error(y_train, y_train_pred)),\n          'MSLE_train':np.sqrt( mean_squared_log_error(y_train, y_train_pred)),\n          'MSE_valid': np.sqrt(mean_squared_error(y_valid, y_valid_pred)),\n          'MSLE_valid': np.sqrt(mean_squared_log_error(y_valid, y_valid_pred))\n      }","9f2b5bba":"evaluate_best_model(X_train, y_train, X_valid, y_valid)","9afa5a52":"FNN = keras.models.Sequential([\n                               Flatten(input_shape=[52]),\n                               Dense(350, activation='relu', kernel_initializer='lecun_normal'),\n                               keras.layers.Dropout(.3),\n                               Dense(250, activation='relu', kernel_initializer='lecun_normal'),\n                               keras.layers.Dropout(.3),\n                               Dense(150, activation='relu', kernel_initializer='lecun_normal'),\n                               keras.layers.Dropout(.4),\n                               Dense(100, activation='relu', kernel_initializer='lecun_normal'),\n                               keras.layers.Dropout(.5),\n                               Dense(70, activation='relu', kernel_initializer='lecun_normal'),\n                               keras.layers.Dropout(.5),\n                               Dense(1)\n])","30961c9f":"FNN.compile(optimizer='adam', loss='mse', metrics=['mse'])","75d098f7":"history = FNN.fit(X_train, y_train, validation_data=(X_valid, y_valid), epochs=100, batch_size=10, callbacks=[keras.callbacks.EarlyStopping(patience=10)])","9d392660":"plt.plot(history.history['loss'], label='Training')\nplt.plot(history.history['val_loss'], label='Validation')\nplt.legend();","1ac4ecf9":"def evaluate_feedforwardNN (X_train, y_train, X_valid, y_valid):\n    y_train_pred = FNN.predict(X_train)\n    y_valid_pred = FNN.predict(X_valid)\n\n    \n    return {\n          'MSE_train': np.sqrt(mean_squared_error(y_train, y_train_pred)),\n          'MSLE_train':np.sqrt( mean_squared_log_error(y_train, y_train_pred)),\n          'MSE_valid': np.sqrt(mean_squared_error(y_valid, y_valid_pred)),\n          'MSLE_valid': np.sqrt(mean_squared_log_error(y_valid, y_valid_pred))\n      }","dc399863":"evaluate_feedforwardNN (X_train, y_train, X_valid, y_valid)","2ec41d1e":"# Let's prepare the test data for prediction\ntestset =  pd.read_csv('..\/input\/bluebook-for-bulldozers\/Test.csv', parse_dates=['saledate'])\n#drop IDs \nX_test =testset.drop(['SalesID', 'MachineID','ModelID','auctioneerID'], axis=1)","b1bddce3":"date_preprocessing(X_test)","801dbe2f":"Ordinal_encoder(X_test, ['ProductSize', 'UsageBand'])","f280d2e7":"fill_missing_value.fill_categorical(X_test)","e132d225":"fill_missing_value.fill_numerical(X_test)","aa6c3b7a":"nominal_encoder(X_test, label_list)","918c2d4c":"X_test = scale_feature(X_test)","26be2b02":"X_test_predict = FNN.predict(X_test)","97022f58":"prediction = pd.DataFrame()\nprediction['SalesID'] = testset['SalesID']\nprediction['SalePrice']= X_test_predict","a58c9561":"prediction","875d012c":"The categories per feature varie between 2 and 4999. Disaggregation of fiModelDesc have the highest number of categories","a8c0dc32":"All the independant features that contain continuouse value are skewed. Therefore,one can use log transformation to reshape the data distribution to normal one.","1decb2f6":"Univarible analysis:\n- Independant variable analysis","c15e6b33":" The SalePrice deviate from the normal distribution. It is positively skewed. Hence, this would mean that many  Bulldozers were being sold for less than the average value (31099.712848).","16ce6c18":"# Feature selection\n- SelectKBest will be used along decision tree during feature selection process. It is important to underline that we have choose decision because it doesn't require a lot data preparation and it is also quiet fast.\n- Also we will split trainset. Hence, this will allow us to check if our model is not overfitting.","ea49ae48":"# Let's train our models (model experimentation)","1be22704":"We will keep all feature because they have provided the smallest MSE","b0b461af":"***Now let's analysis dependant variable (target feature)***","aaec6f6f":"Low range values are similar and not too far from 0. However, high range values are far from 0.\nNote that for now, we'll not consider any of these values as an outlier but we should be pay more attention on those high rnge values.","d6723c03":"After looking at each variable and try to understand their meaning and relevance to this problem ( we have selected based on our understanding about the meaning then we have ploted those feature versus SalePrice). The result has shown Drive_System, Engine_Horsepower can play an important role in this problem. However, none of the above mentioned key fields has strong relationship with salePrice.","6894ebc8":"Engine Horsepower, Drive System seem to be related with SalePrice. The relationship seems to be based on  different category. The box plot shows how sales prices increase with the different category.\nIt is important to understand we just analysed four variables. However, there are many other that we should analyse. ","99de84fa":"Boxplot has shown that salePrice variable contains some outliers.","7641e9fc":"# Hyper parameters tuning\nWe will proceed hyperparameters tune for ExtraTreesRegressor since it provides the smallest MSE value","fbd01e01":"# Evaluation of best estimator (model)","65b11cb1":"The missing value varie between 0.08% to 94% depending on feature. \nBased on that information, it is important to underline that all the features that contain more than 90% can be dropped during data processing (One can argues that they cannot help the ML model to generalize its prediction).However, we will keep them.","0167d70b":"Feature ingineering","f5e0db53":"'SalePrice' is not normally distributed. It depicts 'peakedness', positive skewness and does not follow the diagonal line, see probability plot. Hence, we will need a log transformation to solve the problem. \nIt is import to underline that apart of SalePrice the majority of numerical variable in dataset are just Id. Therefore, will not apply log transformation to those attributes.","364d19bb":"*`Problem statement`*: Predicting the sale price of bulldozers sold at auctions.\n\n*`Data`*: the data for this competition is split into three parts, which are trainset validationset and testset.\n\n*`The key fields are in train.csv are`*:\n- `SalesID`: the unique identifier of the sale\n- `MachineID`: the unique identifier of a machine.  A machine can be sold multiple times\n- `saleprice`: what the machine sold for at auction (only provided in train.csv)\n- `saledate`: the date of the sale.\nIt is important to underline that the ","be85c313":"# FeedForward Neural Network","08c4093b":"1. Dataset shape (rows and columns): (401125, 53)\n2. Target attribute name: SalePrices\n3. Data types of features:  2 x float64, 6 x int64(6), 45 x object\n4. Understand the problem:  We'll look at each variable and do an analysis about their meaning and importance for this problem.\n5. Analysis of different features\n  - Missing values analysis\n  - Categorical feature\n  - Numerical feature (discret and continue feature)\n  - Univariable study: We'll focus on the dependent variable ('SalePrice') and try to know a little bit more about it.\n  - Multivariate study. We'll try to understand how the dependent variable and independent variables relate.\n8. Data cleaning: We'll clean the dataset and handle the missing data, outliers and categorical variables.","77844bb6":"#EDA","e3e0b8d5":"First of all let's create a function to unzip the trainset.","974cd0bb":"# Predictions","aa6409e6":"***Outliers***\nAs already mentioned the feature SalePrice contains outliers, which can affect our models. But it can be at the same time a valuable source of information about specific behaviours. We will do a quick analysis through the standard deviation.\n\nWe will first establish a threshold that defines an observation as an outlier. To do so, we'll standardize the data. Moreover, data standardization means converting data values to have mean of 0 and a standard deviation of 1.","afe4f648":"***Statistical bases for multivariate analysis***\n-  We have already done some data analysis and discovered a lot about dependant variable('SalePrice'). Now it's time to go even deeper and understand how 'SalePrice' complies with the statistical assumptions that enables us to apply multivariate techniques.\n ","edfa32bd":"***Multivariate study*\nWe are going to investigate how target variable (SalePrice) and independent variables are related.***","1cd69fb3":"# Feature scaling","a3fda2d8":"# All the remarks and comment are welcome. Thank you....","cdb15b23":"The best estimator seems to overfit our training data. One can perform more hyper parameters tuning in order to solve the overfitting issue (or intance set max_depth to a value or check more possible value for min_samples_leaf, n_estimators value etc ... ). However, I will leave as it is for this moment.\nNext, I will build feedforward neural netwok and train and evaluate. ","1fd0b9ef":"It is quiet hard to quantify the relation between SalePrice and numerical feature values. However, we are going one more approach which allows us to determine the corelation coefficient between SalePrice and different independant feature.","89226718":"- Histogram - Kurtosis and skewness.\n- Normal probability plot - Data distribution should closely follow the diagonal that represents the normal distribution.","ce734ff2":"Although we already know some of the figures, this scatter plot gives us a reasonable idea about relationships between variables.\nThe correlation between dependandt and independant features are very close to zero as one can see on heatmap plot. Also, the above mega scatter plot as alo shwon that."}}