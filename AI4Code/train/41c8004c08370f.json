{"cell_type":{"b7b8546d":"code","05878cf6":"code","37385158":"code","3cefb39c":"code","e8b93735":"code","81dd7f24":"code","a4f038d2":"code","ead33808":"code","d890163b":"code","603cdd6c":"code","33f1c6bf":"code","8db4812b":"code","defb030a":"code","ebff45a8":"code","0e6af3be":"code","6061c999":"code","fd2336bd":"code","760624bc":"code","e053ab59":"code","2150de1a":"code","94ad9b6d":"code","4b190103":"code","a38ee1b0":"code","3368915c":"code","8943ca0e":"code","59daadf3":"code","39dc12c5":"code","8a52d39c":"code","ff9d479d":"code","5de92d1e":"code","31c5291e":"code","c7647338":"code","0eaefb02":"code","21d60000":"code","329a76d9":"code","96f17fff":"code","e482c6ee":"code","288a0afb":"code","4ffd26ee":"markdown","d694576e":"markdown","8a108e1e":"markdown","a43828aa":"markdown","c632cadd":"markdown","bd258247":"markdown","2bd52e11":"markdown","39c2c0d7":"markdown","9186fa01":"markdown","d279d759":"markdown","087183c8":"markdown","6d5f1338":"markdown","5897ae58":"markdown","88bf0cf8":"markdown","6574be1b":"markdown","4f193240":"markdown","c65a84a6":"markdown","029d6b7c":"markdown","5b2379e4":"markdown"},"source":{"b7b8546d":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","05878cf6":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport datetime\n\n\nfrom pandas.tseries.offsets import DateOffset\n\nimport matplotlib.pyplot as plt\nimport matplotlib\nfrom matplotlib import pyplot\n\n\n\nimport seaborn as sns;sns.set()\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport itertools\n\n#Arima Model\nimport statsmodels.api as sm\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom statsmodels.tsa.seasonal import seasonal_decompose\n\n#Facebook Prophet Model\nfrom fbprophet import Prophet\nfrom fbprophet.plot import plot_plotly\nfrom fbprophet.plot import add_changepoints_to_plot","37385158":"#Reading dataset\ndata=pd.read_csv('..\/input\/keralaroadaccidents\/Keralapolice datasetcsv.csv')\ndf=pd.read_csv('..\/input\/keralapolicemonthly\/2001 to 2019 Kerala Police.csv')","3cefb39c":"print('-'*60)\nprint('          *** Head of the dataframe ***')\nprint('-'*60)\nprint(data.head())\nprint('-'*60)\nprint('          *** Tail of the dataframe ***')\nprint('-'*60)\nprint(data.tail())","e8b93735":"data.info()","81dd7f24":"#Visualizing accidents in Kerala from year 2001 to 2019 \nplt.figure(figsize=(14,6))\n#plt.style.use('fivethirtyeight')\nplt.plot(data.YEAR,data.TOTAL, marker='P', markersize=15)\nplt.xlim(2001,2019) #to scale\nformatter = matplotlib.ticker.StrMethodFormatter(\"{x:.0f}\") #toformat the x axis \nplt.gca().xaxis.set_major_formatter(formatter)\nplt.title(\"Total Road Accidents in Kerala (2001 to 2019)\", size=\"25\",)\nplt.xlabel(\"Year\",size=\"15\")\nplt.ylabel(\"Number of accidents\", size=\"15\")","a4f038d2":"print('-'*60)\nprint('*** Head of the dataframe ***')\nprint('-'*60)\nprint(df.head())\nprint('-'*60)\nprint('*** Tail of the dataframe ***')\nprint('-'*60)\nprint(df.tail())","ead33808":"df.info()","d890163b":"fig, ax = plt.subplots(figsize=(14,6))\nplt.style.use('fivethirtyeight')\n\na = sns.lineplot(x='Year', y=\"No of accidents\", data=df ,marker='P', markersize=15,scalex=1.0)\nplt.xlim(2001,2019) #to scale\nformatter = matplotlib.ticker.StrMethodFormatter(\"{x:.0f}\") #toformat the x axis \nplt.gca().xaxis.set_major_formatter(formatter)\na.set_title(\"Road Accidents in Kerala (2001 to 2019)\",fontsize=15)\nplt.show()","603cdd6c":"fig, ax = plt.subplots(figsize=(14,5))\npalette = sns.color_palette(\"mako_r\", 4)\na = sns.barplot(x=\"Year\", y=\"No of accidents\",hue = 'Month',data=df)\na.set_title(\"Road Accidents in Kerala (2001 to 2019) plotting Accidents in each month\",fontsize=15)\na.set_ylabel(\"No of accidents in each month\")\nplt.legend(loc='lower right')\nplt.show()","33f1c6bf":"fig, a = plt.subplots(figsize=(14,6))\npalette = sns.color_palette(\"mako_r\", 4)\na = sns.boxplot(x=\"Year\", y=\"No of accidents\",data=df)\na.set_title(\"Road Accidents in Kerala (2001 to 2019)\",fontsize=15)\na.set_ylabel(\"No of accidents\")\n\nplt.show()","8db4812b":"fig, ax = plt.subplots(figsize=(14,6))\nplt.style.use('fivethirtyeight')\na = sns.lineplot(x=\"Year\", y=\"No of accidents\",hue='Month', data=df ,marker='P',linewidth='2',markersize=15)\nplt.xlim(2001,2019) #to scale\nformatter = matplotlib.ticker.StrMethodFormatter(\"{x:.0f}\") #toformat the x axis \nplt.gca().xaxis.set_major_formatter(formatter)\na.set_title(\"Road Accidents in Kerala (2001 to 2019) Monthly relation\",fontsize=15)\nplt.legend(loc='upper center')\nplt.show()","defb030a":"# We combine Year and Month as 'Year_Month' and now it has dates\npmonthly = pd.read_csv('..\/input\/keralapolicemonthly\/2001 to 2019 Kerala Police.csv', parse_dates=[[0,1]]) ","ebff45a8":"pmonthly.head()","0e6af3be":"pmonthly.info()","6061c999":"pmonthly.dtypes","fd2336bd":"monthly= pmonthly.set_index('Year_Month')","760624bc":"monthly.head()","e053ab59":"monthly.plot.line(figsize=(14,6), marker='p', linewidth='2',title=\"Road Accidents in Kerala (2001 to 2019)\")","2150de1a":"decomposition = seasonal_decompose(monthly, freq=12)  \nfig = plt.figure()  \nfig = decomposition.plot()  \nfig.set_size_inches(15, 8)","94ad9b6d":"p = d = q = range(0, 2)\npdq = list(itertools.product(p, d, q))\nseasonal_pdq = [(x[0], x[1], x[2], 12) for x in list(itertools.product(p, d, q))]\nprint('Examples of parameter for SARIMA...')\nprint('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[1]))\nprint('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[2]))\nprint('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[3]))\nprint('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[4]))","4b190103":"for param in pdq:\n    for param_seasonal in seasonal_pdq:\n        try:\n            mod = sm.tsa.statespace.SARIMAX(monthly,order=param,seasonal_order=param_seasonal,enforce_stationarity=False,enforce_invertibility=False)\n            results = mod.fit()\n            print('ARIMA{}x{}12 - AIC:{}'.format(param,param_seasonal,results.aic))\n        except: \n            continue","a38ee1b0":"# Applying Seasonal ARIMA model to forcast the data \nmod = sm.tsa.SARIMAX(monthly['No of accidents'], trend='n',\\\n                     order=(0,1,1), \\\n                     seasonal_order=(1,1,1,12),\\\n                     enforce_stationarity=False,\\\n                     enforce_invertibility=False)\nresults = mod.fit()\nprint(results.summary())","3368915c":"results.plot_diagnostics(figsize=(18, 8))\nplt.show()","8943ca0e":"pred = results.get_prediction(start=pd.to_datetime('2018-01-01'), dynamic=False)\npred_ci = pred.conf_int()\nax = monthly['2016':].plot(label='observed')\n\npred.predicted_mean.plot(ax=ax, label='Forecast', alpha=.7, figsize=(14, 6))\nax.fill_between(pred_ci.index,\n                pred_ci.iloc[:, 0],\n                pred_ci.iloc[:, 1], color='k', alpha=.2)\nax.set_title('Validating forecast model for last 12 months(2018 Jan to 2019 Dec)')\nax.set_xlabel('Year_Month')\nax.set_ylabel('Number of accidents')\nplt.legend()\nplt.show()","59daadf3":"monthly_forecasted = pred.predicted_mean\nmonthly_truth = monthly['2018-01-01':]\n\nmse = ((monthly_forecasted -  monthly_truth[\"No of accidents\"]) ** 2).mean()\n\nprint('The Mean Squared Error is {}'.format(round(mse, 2)))\nprint('The Root Mean Squared Error is {}'.format(round(np.sqrt(mse), 2)))","39dc12c5":"print('-'*30)\nprint(\"Actual accidents\")\nprint('-'*30)\nprint(monthly_truth.head(12))\nprint('-'*30)\nprint(\"Forcasted accidents\")\nprint('-'*30)\nprint(monthly_forecasted.head(12))\nprint('-'*45)\nprint('Forcasted Range (min-max) number of accidents')\nprint('-'*45)\nprint(pred_ci.head(24))","8a52d39c":"pred_uc = results.get_forecast(steps=12)\npred_ci = pred_uc.conf_int()\nax = monthly['2017':].plot(label='observed', figsize=(14, 6))\npred_uc.predicted_mean.plot(ax=ax, label='Forecast')\nax.fill_between(pred_ci.index,\n                pred_ci.iloc[:, 0],\n                pred_ci.iloc[:, 1], color='k', alpha=.25)\nax.set_title('Forecast of accidents in 2020')\nax.set_xlabel('Year_Month')\nax.set_ylabel('No of accidents')\nplt.legend()\nplt.show()","ff9d479d":"forecast = pred_uc.predicted_mean\nforecast.head(12)","5de92d1e":"pmonthly.head()","31c5291e":"train_dataset = pd.DataFrame()\ntrain_dataset['ds'] = pmonthly['Year_Month']\ntrain_dataset['y'] = pmonthly['No of accidents']","c7647338":"train_dataset.head()","0eaefb02":"#BY default interval_width\/ confidence factor is 80%\nprophet = Prophet(interval_width=0.95)\nprophet.fit(train_dataset)","21d60000":"future = prophet.make_future_dataframe(periods=12, freq='M')\nfuture.tail()","329a76d9":"forecast = prophet.predict(future)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","96f17fff":"fig = prophet.plot(forecast,xlabel=\"Year_Month\",ylabel=\"No of accidents\",figsize=(14, 6))\nax = fig.gca()\nax.set_title(\"Forecast of accidents till 2020\")\n\nplt.show","e482c6ee":"fig = prophet.plot(forecast,xlabel=\"Year_Month\",ylabel=\"No of accidents\",figsize=(14, 6))\nax = fig.gca()\nax.set_title(\"Forecast of accidents till 2020 & Vertical lines are where changepoints occurred\")\na = add_changepoints_to_plot(fig.gca(), prophet, forecast)","288a0afb":"fig1 = prophet.plot_components(forecast)","4ffd26ee":"                            Want to see more of Kernels like this one? Leave an upvote then :)","d694576e":" **Prophet plots the observed values of our time series (the black dots), the forecasted values (blue line) and the uncertainty intervals of our forecasts (the blue shaded regions).**","8a108e1e":"# Validating model for last 12 months(2018 Jan to 2019 Dec)","a43828aa":"# Seasonal Decomposition","c632cadd":"# 1.Seasonal Arima (SARIMA)Model forecast","bd258247":"# Measuring Accuracy using Mean Squared Error and Root Mean Squared Error","2bd52e11":"# Parse_dates and creating new dataframe 'monthly' ","39c2c0d7":"# 2. Facebook Prophet Model forecast\n","9186fa01":"* The above step consists in comparing the true values with the forecast predictions. \n* Our forecasts fit with the true values almost. \n* The command \u201cpred = results.get_prediction(start=pd.to_datetime(\u20182018\u201301\u201301\u2019)\u201d determines the period which you would      start the forecast in comparing with the true data.","d279d759":"According Peterson, T. (2014) the AIC (Akaike information criterion) is an estimator of the relative quality of statistical models for a given set of data. Given a collection of models for the data, AIC estimates the quality of each model, relative to each of the other models.\n\n* ***The low AIC value the better.***\n\nOur output suggests that SARIMAXARIMA (0, 1, 1)x(1, 1, 1, 12)12  with AIC value of **2573.200166278445** \nis the best combination, so we should consider this to be optimal option.","087183c8":"# Data Analysis of dataframe 'df'","6d5f1338":"It\u2019s always nice to check how does the model perform on historical data. \n* Deep blue line is forecasting number of accidents\n* Black dots are actual number of accidents\n* The light blue shade is 95% confidence interval around the forecast.\n\nFrom 2020 black dots are not visible as it shows only the future forecast","5897ae58":"# Future prediction","88bf0cf8":"# Plotting Monthly variation","6574be1b":"# Data Analysis of dataframe 'data'","4f193240":"\n* MSE and RMSE, values closer to zero are better. \n* That is the measure of accuracy.","c65a84a6":"With the diagnostic above we can visualize important information as the distribution and the Auto correlation function ACF (correlogram). Values upward the \u201c0\u201d has some correlation over the time series data. Values near to \u201c1\u201d demonstrates strongest correlation.","029d6b7c":"* Here we forecast the accidents for the next 12 months. \n* This parameter can me modified in the line \u201cpred_uc = results.get_forecast(steps=12)\u201d of the code.\n* Since covid-19 pandemic & lockdown the prediction may go wrong so the predication may be accurate till March 2020","5b2379e4":"**One other particularly strong feature of Prophet is its ability to return the components of our forecasts. This can help reveal how daily, weekly and yearly patterns of the time series plus manyally included holidayes contribute to the overall forecasted values:**"}}