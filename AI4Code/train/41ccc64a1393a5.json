{"cell_type":{"657b916f":"code","0872e377":"code","cf49f3bd":"code","89d44565":"code","a92fa0a7":"code","59429e43":"code","50400845":"code","f3b4d8b0":"code","edaa3f6e":"code","12591fa7":"code","9ce49b5c":"code","c14ac77a":"code","ef2a3dfe":"code","62ce8a74":"code","4ed41bbb":"code","4ef11d8f":"code","85dc3ea9":"code","c1a35a0d":"markdown","abaf10ce":"markdown","6714b11d":"markdown","97b0f37f":"markdown","e201605c":"markdown","bc6faa7e":"markdown","9d50dc2f":"markdown","1ec18eec":"markdown","48b11c8c":"markdown","57e07b84":"markdown","019a602a":"markdown","68975662":"markdown","e76c6cfb":"markdown","d20ba070":"markdown","450f1c61":"markdown","dafd82cb":"markdown","f6c43d67":"markdown","ef8648e6":"markdown","6531998c":"markdown","97f186bb":"markdown"},"source":{"657b916f":"# Set up code checking\nimport os\nif not os.path.exists(\"..\/input\/train.csv\"):\n    os.symlink(\"..\/input\/home-data-for-ml-course\/train.csv\", \"..\/input\/train.csv\")  \n    os.symlink(\"..\/input\/home-data-for-ml-course\/test.csv\", \"..\/input\/test.csv\") \nfrom learntools.core import binder\nbinder.bind(globals())\nfrom learntools.ml_intermediate.ex6 import *\nprint(\"Setup Complete\")","0872e377":"# for data processing\nimport pandas as pd\nimport numpy as np\n\n# for data visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')","cf49f3bd":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","89d44565":"print (\"Train Shape :\" ,train.shape)\nprint (\"Test Shape :\" ,test.shape)","a92fa0a7":"train.head(3).transpose()","59429e43":"train.describe().transpose()","50400845":"import pandas_profiling\nprofile_report = pandas_profiling.ProfileReport(train)","f3b4d8b0":"def missingValuesInfo(df):\n    total = df.isnull().sum().sort_values(ascending = False)\n    percent = round(df.isnull().sum().sort_values(ascending = False)\/len(df)*100, 2)\n    temp = pd.concat([total, percent], axis = 1,keys= ['Total', 'Percent'])\n    return temp.loc[(temp['Total'] > 0)]\n\nmissingValuesInfo(train)","edaa3f6e":"def HandleMissingValues(df):\n\n    num_cols = [cname for cname in df.columns if df[cname].dtype in ['int64', 'float64']]\n    cat_cols = [cname for cname in df.columns if df[cname].dtype == \"object\"]\n    values = {}\n\n    for a in cat_cols:\n        values[a] = 'UNKOWN'\n\n    for a in num_cols:\n        values[a] = df[a].median()\n        \n    df.fillna(value=values,inplace=True)\n    \n    \nHandleMissingValues(train)\nHandleMissingValues(test)","12591fa7":"# select categorical columns with relatively low cardinality (convenient but arbitrary)\nlow_cardinality_cols = [cname for cname in train.columns if train[cname].nunique() < 10 and \n                        train[cname].dtype == \"object\"]","9ce49b5c":"# select numeric columns\nnumeric_cols = [cname for cname in train.columns if train[cname].dtype in ['int64', 'float64']]\n\n# removing salesprice (target) & id\nnumeric_cols.remove('Id')\nnumeric_cols.remove('SalePrice')\n\n# Keep selected columns only\nmy_cols = low_cardinality_cols + numeric_cols","c14ac77a":"X_train = train[my_cols].copy()\nX_test = test[my_cols].copy()\ny_train = train['SalePrice']","ef2a3dfe":"# concatenating train and test for uniform one-hot encoding\nX_train['train_or_test']='train'\nX_test['train_or_test']='test'\ndata=pd.concat([X_train,X_test],sort=False)\n\n# resetting index, removing old index\ndata.reset_index(inplace=True)\ndata.drop('index',axis=1,inplace=True)\ndata = pd.get_dummies(data,columns = low_cardinality_cols)\n\nX_train = data[data['train_or_test']=='train']\nX_test = data[data['train_or_test']=='test']\n\nX_train.drop('train_or_test',axis=1,inplace=True)\nX_test.drop('train_or_test',axis=1,inplace=True)\n\n# looking at data after encoding\nprint(\"Shape of Training Data\", X_train.shape)\nprint(\"Shape of Test Data\", X_test.shape)","62ce8a74":"from sklearn.linear_model import RidgeCV\n\nridge_cv = RidgeCV(alphas=(0.01, 0.05, 0.1, 0.3, 1, 3, 5, 10), cv=4)\nridge_cv.fit(X_train, y_train)\nridge_cv_preds = ridge_cv.predict(X_test)","4ed41bbb":"import xgboost as xgb\n\nmodel_xgb = xgb.XGBRegressor(n_estimators=340, max_depth=2, learning_rate=0.2)\nmodel_xgb.fit(X_train, y_train)\nxgb_preds=model_xgb.predict(X_test)","4ef11d8f":"# final prediction based on esemble method. assign 50% weight to both models\npredictions = ( ridge_cv_preds + xgb_preds )\/2\n\n#make the submission data frame\nsubmission = {\n    'Id': test.Id.values,\n    'SalePrice': predictions\n}\nsolution = pd.DataFrame(submission)\nsolution.head()","85dc3ea9":"solution.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","c1a35a0d":"![Ames Housing dataset image](https:\/\/i.imgur.com\/lTJVG4e.png)","abaf10ce":"2. XGBoost","6714b11d":"##### expand below cell for data dictionary and file description","97b0f37f":"#### selecting only columns which are required","e201605c":"##### summary statistics on training data","bc6faa7e":"#### One-hot Encoding","9d50dc2f":"# Feature Engineering","1ec18eec":"## File descriptions\n\n    train.csv - the training set\n    test.csv - the test set\n    data_description.txt - full description of each column, originally prepared by Dean De Cock but lightly edited to match the column names used here\n    sample_submission.csv - a benchmark submission from a linear regression on year and month of sale, lot square footage, and number of bedrooms\n\n## Data fields\n\nHere's a brief version of what you'll find in the data description file.\n\n    SalePrice - the property's sale price in dollars. This is the target variable that you're trying to predict.\n    MSSubClass: The building class\n    MSZoning: The general zoning classification\n    LotFrontage: Linear feet of street connected to property\n    LotArea: Lot size in square feet\n    Street: Type of road access\n    Alley: Type of alley access\n    LotShape: General shape of property\n    LandContour: Flatness of the property\n    Utilities: Type of utilities available\n    LotConfig: Lot configuration\n    LandSlope: Slope of property\n    Neighborhood: Physical locations within Ames city limits\n    Condition1: Proximity to main road or railroad\n    Condition2: Proximity to main road or railroad (if a second is present)\n    BldgType: Type of dwelling\n    HouseStyle: Style of dwelling\n    OverallQual: Overall material and finish quality\n    OverallCond: Overall condition rating\n    YearBuilt: Original construction date\n    YearRemodAdd: Remodel date\n    RoofStyle: Type of roof\n    RoofMatl: Roof material\n    Exterior1st: Exterior covering on house\n    Exterior2nd: Exterior covering on house (if more than one material)\n    MasVnrType: Masonry veneer type\n    MasVnrArea: Masonry veneer area in square feet\n    ExterQual: Exterior material quality\n    ExterCond: Present condition of the material on the exterior\n    Foundation: Type of foundation\n    BsmtQual: Height of the basement\n    BsmtCond: General condition of the basement\n    BsmtExposure: Walkout or garden level basement walls\n    BsmtFinType1: Quality of basement finished area\n    BsmtFinSF1: Type 1 finished square feet\n    BsmtFinType2: Quality of second finished area (if present)\n    BsmtFinSF2: Type 2 finished square feet\n    BsmtUnfSF: Unfinished square feet of basement area\n    TotalBsmtSF: Total square feet of basement area\n    Heating: Type of heating\n    HeatingQC: Heating quality and condition\n    CentralAir: Central air conditioning\n    Electrical: Electrical system\n    1stFlrSF: First Floor square feet\n    2ndFlrSF: Second floor square feet\n    LowQualFinSF: Low quality finished square feet (all floors)\n    GrLivArea: Above grade (ground) living area square feet\n    BsmtFullBath: Basement full bathrooms\n    BsmtHalfBath: Basement half bathrooms\n    FullBath: Full bathrooms above grade\n    HalfBath: Half baths above grade\n    Bedroom: Number of bedrooms above basement level\n    Kitchen: Number of kitchens\n    KitchenQual: Kitchen quality\n    TotRmsAbvGrd: Total rooms above grade (does not include bathrooms)\n    Functional: Home functionality rating\n    Fireplaces: Number of fireplaces\n    FireplaceQu: Fireplace quality\n    GarageType: Garage location\n    GarageYrBlt: Year garage was built\n    GarageFinish: Interior finish of the garage\n    GarageCars: Size of garage in car capacity\n    GarageArea: Size of garage in square feet\n    GarageQual: Garage quality\n    GarageCond: Garage condition\n    PavedDrive: Paved driveway\n    WoodDeckSF: Wood deck area in square feet\n    OpenPorchSF: Open porch area in square feet\n    EnclosedPorch: Enclosed porch area in square feet\n    3SsnPorch: Three season porch area in square feet\n    ScreenPorch: Screen porch area in square feet\n    PoolArea: Pool area in square feet\n    PoolQC: Pool quality\n    Fence: Fence quality\n    MiscFeature: Miscellaneous feature not covered in other categories\n    MiscVal: $Value of miscellaneous feature\n    MoSold: Month Sold\n    YrSold: Year Sold\n    SaleType: Type of sale\n    SaleCondition: Condition of sale\n","48b11c8c":"#### lets look at a sample of training data for understanding the data","57e07b84":"# Exploratory Data Analysis","019a602a":"#### lets do basic missing value treatment, using 'UNKNOWN' for categorical and median value for numeric features","68975662":"# Loading Data","e76c6cfb":"# Setup","d20ba070":"This is a very easy way of doing quick EDA. \n\n#### High level summary\n* Number of variables\t81\n* Number of observations\t1460\n* Missing cells\t6965 (5.9%)\n\n#### Variables types\n* Numeric\t32\n* Categorical\t48\n* Boolean\t1\n","450f1c61":"# References:\n1. EDA - https:\/\/pandas-profiling.github.io\/pandas-profiling\/docs\/master\/rtd\/\n2. Ridge CV - https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.RidgeCV.html\n3. Ideas for feature engineering - https:\/\/www.kaggle.com\/vikumsw\/house-prices-solution-beginner\n\n## Feel free to share feedback, upvote if you found the notebook useful!","dafd82cb":"#### Encoding the categorical variables with low cardinality. \"Cardinality\" means the number of unique values in a column","f6c43d67":"# Housing Price Prediction\n\nAsk a home buyer to describe their dream house, and they probably won't begin with the height of the basement ceiling or the proximity to an east-west railroad. But this playground competition's dataset proves that much more influences price negotiations than the number of bedrooms or a white-picket fence.\n\nWith 79 explanatory variables describing (almost) every aspect of residential homes in Ames, Iowa, this competition challenges you to predict the final price of each home.","ef8648e6":"1.Ridge CV ","6531998c":"#### Lets have a deeper look into the missing values","97f186bb":"# Model Building"}}