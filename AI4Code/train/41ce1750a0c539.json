{"cell_type":{"a831b491":"code","1d4c3fd4":"code","b896d33f":"code","0a9011a9":"code","e8015a58":"code","402eab8f":"code","1ca03831":"code","90fc8295":"code","f205eff1":"code","fbef32e4":"code","dcd5b922":"code","6a9406c6":"code","b29269ac":"code","ea1fffc4":"code","1acd0798":"code","d84a080f":"code","b1789515":"code","143269be":"code","509223a8":"code","05a688df":"code","4b44c16f":"code","1da76056":"code","7ad39e79":"code","9e686401":"code","b30f8b74":"code","e6d9e470":"code","e594110c":"code","8892e717":"code","7b89e7d3":"code","5ac65f92":"code","fcf3a7e7":"code","d4bd0d97":"code","6e0abcdf":"code","6f90d193":"code","622e4d91":"code","7e1c6cfb":"code","0034b02e":"markdown","d0186ade":"markdown","ac038559":"markdown","37230ba6":"markdown","4969082e":"markdown"},"source":{"a831b491":"import re\nimport os\nimport numpy as np\nimport pandas as pd\nimport random\nimport seaborn as sns\nfrom time import time\nfrom collections import defaultdict\n\nfrom contextlib import contextmanager\nfrom tqdm import tqdm\nimport lightgbm as lgbm\nimport category_encoders as ce\n\nimport spacy\nfrom wordcloud import WordCloud\nfrom gensim.models.phrases import Phrases, Phraser\nfrom gensim.models import Word2Vec\nimport multiprocessing\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set_style(\"darkgrid\")\n\nfrom sklearn.decomposition import PCA\nfrom sklearn.manifold import TSNE\nfrom sklearn.utils import shuffle\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score, mean_squared_error\nfrom sklearn.model_selection import train_test_split, KFold\nfrom tensorflow.keras.utils import to_categorical\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots","1d4c3fd4":"data0 = pd.read_csv(\"..\/input\/calories-burned-during-exercise-and-activities\/exercise_dataset.csv\")\ndata0[0:2]","b896d33f":"data0.columns","0a9011a9":"data0['Activity, Exercise or Sport (1 hour)'].value_counts()","e8015a58":"data1=data0[['Activity, Exercise or Sport (1 hour)','Calories per kg']]","402eab8f":"data2=data1.sort_values(by='Calories per kg', ascending=False).reset_index(drop=True)\ndata2","1ca03831":"fig=make_subplots(specs=[[{\"secondary_y\":False}]])\nfig.add_trace(go.Bar(x=data2['Activity, Exercise or Sport (1 hour)'],y=data2['Calories per kg'],name=\"\"),secondary_y=False,)\nfig.update_layout(autosize=False,width=1200,height=800,title_text=\"Activity and Calories per kg\")\nfig.update_xaxes(title_text=\"Activity\")\nfig.update_yaxes(title_text=\"calory\",secondary_y=False)\nfig.show()","90fc8295":"nlp=spacy.load('en_core_web_lg',disable=['ner','parser'])\n\ndef cleaning(doc):\n    txt=[token.lemma_ for token in doc if not token.is_stop]\n    if len(txt)>2:\n        return ' '.join(txt)","f205eff1":"brief_cleaning = (re.sub(\"[^A-Za-z']+\", ' ', str(row)).lower() for row in data2['Activity, Exercise or Sport (1 hour)'])","fbef32e4":"txt = [cleaning(doc) for doc in nlp.pipe(brief_cleaning, batch_size=5000, n_threads=-1)]\nprint(txt[0:20])","dcd5b922":"df_clean = pd.DataFrame({'clean': txt})\ndf_clean = df_clean.dropna().drop_duplicates()\nprint(df_clean.shape)\nprint(df_clean[0:20])","6a9406c6":"sent = [row.split() for row in df_clean['clean']]\nphrases = Phrases(sent, min_count=30, progress_per=10000)\nbigram = Phraser(phrases)\nsentences = bigram[sent]","b29269ac":"word_freq = defaultdict(int)\nfor sent in sentences:\n    for i in sent:\n        word_freq[i]+=1\nprint(len(word_freq))","ea1fffc4":"words=sorted(word_freq, key=word_freq.get, reverse=True)\nprint(words)","1acd0798":"plt.figure(figsize=(15,10))\nwordcloud = WordCloud(background_color='white',width=750,height=500).generate(\" \".join(words))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.title('',fontsize=20)","d84a080f":"cores = multiprocessing.cpu_count()\nprint(cores)","b1789515":"data2[words]=0\ndata3=data2\ndata3","143269be":"len(words)","509223a8":"for i in range(len(data3)):\n    for j in range(len(words)):\n        if words[j] in data3.loc[i,'Activity, Exercise or Sport (1 hour)']:\n            data3.loc[i,words[j]]=1\ndata3","05a688df":"data3=data3.drop('Activity, Exercise or Sport (1 hour)',axis=1)","4b44c16f":"target=['Calories per kg']\ndatay=data3[target]\ndatax=data3.drop(target,axis=1)","1da76056":"train=np.array(datax)\ntrainy=np.array(datay)\nprint(train.shape)\nprint(trainy.shape)","7ad39e79":"df_columns = list(datax.columns)\nprint(df_columns)","9e686401":"train_df=pd.DataFrame(train)\n#test_df=pd.DataFrame(test)","b30f8b74":"train_df.columns=df_columns\n#test_df.columns=df_columns","e6d9e470":"def create_numeric_feature(input_df):\n    use_columns = df_columns \n    return input_df[use_columns].copy()","e594110c":"from contextlib import contextmanager\nfrom time import time\n\nclass Timer:\n    def __init__(self, logger=None, format_str='{:.3f}[s]', prefix=None, suffix=None, sep=' '):\n\n        if prefix: format_str = str(prefix) + sep + format_str\n        if suffix: format_str = format_str + sep + str(suffix)\n        self.format_str = format_str\n        self.logger = logger\n        self.start = None\n        self.end = None\n\n    @property\n    def duration(self):\n        if self.end is None:\n            return 0\n        return self.end - self.start\n\n    def __enter__(self):\n        self.start = time()\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.end = time()\n        out_str = self.format_str.format(self.duration)\n        if self.logger:\n            self.logger.info(out_str)\n        else:\n            print(out_str)","8892e717":"from tqdm import tqdm\n\ndef to_feature(input_df):\n\n    processors = [\n        create_numeric_feature,\n    ]\n    \n    out_df = pd.DataFrame()\n    \n    for func in tqdm(processors, total=len(processors)):\n        with Timer(prefix='create' + func.__name__ + ' '):\n            _df = func(input_df)\n\n        assert len(_df) == len(input_df), func.__name__\n        out_df = pd.concat([out_df, _df], axis=1)\n        \n    return out_df","7b89e7d3":"train_feat_df = to_feature(train_df)\n#test_feat_df = to_feature(test_df)","5ac65f92":"import lightgbm as lgbm\nfrom sklearn.metrics import mean_squared_error\n\ndef fit_lgbm(X, y, cv, \n             params: dict=None, \n             verbose: int=50):\n\n    if params is None:\n        params = {}\n\n    models = []\n    oof_pred = np.zeros_like(y, dtype=np.float)\n\n    for i, (idx_train, idx_valid) in enumerate(cv): \n        x_train, y_train = X[idx_train], y[idx_train]\n        x_valid, y_valid = X[idx_valid], y[idx_valid]\n\n        clf = lgbm.LGBMRegressor(**params)\n        \n        with Timer(prefix='fit fold={} '.format(i)):\n            clf.fit(x_train, y_train, \n                    eval_set=[(x_valid, y_valid)],  \n                    early_stopping_rounds=100,\n                    verbose=verbose)\n\n        pred_i = clf.predict(x_valid)\n        oof_pred[idx_valid] = pred_i\n        models.append(clf)\n        print(f'Fold {i} RMSLE: {mean_squared_error(y_valid, pred_i) ** .5:.4f}')\n        print()\n\n    score = mean_squared_error(y, oof_pred) ** .5\n    print('-' * 50)\n    print('FINISHED | Whole RMSLE: {:.4f}'.format(score))\n    return oof_pred, models","fcf3a7e7":"params = {\n    'objective': 'rmse', \n    'learning_rate': .1,\n    'reg_lambda': 1.,\n    'reg_alpha': .1,\n    'max_depth': 5, \n    'n_estimators': 10000, \n    'colsample_bytree': .5, \n    'min_child_samples': 10,\n    'subsample_freq': 3,\n    'subsample': .9,\n    'importance_type': 'gain', \n    'random_state': 71,\n    'num_leaves': 62\n}","d4bd0d97":"y = trainy\nprint(y.shape)","6e0abcdf":"ydf=pd.DataFrame(y)\nydf","6f90d193":"from sklearn.model_selection import KFold\n\nfor i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    \n    fig,ax = plt.subplots(figsize=(6,6))\n    ax.set_title(target[i],fontsize=20)\n    ax.set_xlabel('oof '+str(i),fontsize=12)\n    ax.set_ylabel('train_y '+str(i),fontsize=12)\n    ax.scatter(oof,y)\n","622e4d91":"def visualize_importance(models, feat_train_df):\n\n    feature_importance_df = pd.DataFrame()\n    for i, model in enumerate(models):\n        _df = pd.DataFrame()\n        _df['feature_importance'] = model.feature_importances_\n        _df['column'] = feat_train_df.columns\n        _df['fold'] = i + 1\n        feature_importance_df = pd.concat([feature_importance_df, _df], \n                                          axis=0, ignore_index=True)\n\n    order = feature_importance_df.groupby('column')\\\n        .sum()[['feature_importance']]\\\n        .sort_values('feature_importance', ascending=False).index[:50]\n\n    fig, ax = plt.subplots(figsize=(8, max(6, len(order) * .25)))\n    sns.boxenplot(data=feature_importance_df, \n                  x='feature_importance', \n                  y='column', \n                  order=order, \n                  ax=ax, \n                  palette='viridis', \n                  orient='h')\n    \n    ax.tick_params(axis='x', rotation=0)\n    #ax.set_title('Importance')\n    ax.grid()\n    fig.tight_layout()\n    \n    return fig,ax\n\n#fig, ax = visualize_importance(models, train_feat_df)","7e1c6cfb":"for i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    fig, ax = visualize_importance(models, train_feat_df)\n    ax.set_title(target[i]+' Imortance',fontsize=20)\n","0034b02e":"# Model","d0186ade":"### 'min', 'mile' and 'mph' are the most important factors for 'Calories per kg', . ","ac038559":"# Target setting","37230ba6":"# Data preparation","4969082e":"# Visualize Importance"}}