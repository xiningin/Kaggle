{"cell_type":{"33bc687e":"code","452f9fbd":"code","9ff7b01f":"code","336481a5":"code","53569028":"code","27c8e7e6":"code","f532edea":"code","9d611f97":"code","13b7e907":"code","0019ccde":"code","e21c4c5e":"code","8d7a9a1f":"code","4cf44760":"code","7aafa286":"code","b6297c89":"code","d51edc51":"code","62236219":"markdown","a1bddcdc":"markdown","b1d4fa4d":"markdown","655464c0":"markdown","3ae6ade0":"markdown","af03e997":"markdown","fbdcaf8e":"markdown","49e75876":"markdown","8b23026e":"markdown","10a6b573":"markdown","c7054a30":"markdown","329d80a5":"markdown","77e5b74b":"markdown","7b0f9e8d":"markdown"},"source":{"33bc687e":"\n!pip install lifetimes\nimport datetime as dt\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom lifetimes import BetaGeoFitter\nfrom lifetimes import GammaGammaFitter\nfrom lifetimes.plotting import plot_period_transactions\nfrom sklearn.preprocessing import MinMaxScaler\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","452f9fbd":"# 1.Data Preperation","9ff7b01f":"df_ = pd.read_csv(\"..\/input\/ecommerce-data\/data.csv\", encoding=\"ISO-8859-1\")\n\ndf=df_.copy()\ndf.head()","336481a5":"def outlier_thresholds(dataframe, variable):\n    quartile1 = dataframe[variable].quantile(0.01)\n    quartile3 = dataframe[variable].quantile(0.99)\n    interquantile_range = quartile3 - quartile1\n    up_limit = quartile3 + 1.5 * interquantile_range\n    low_limit = quartile1 - 1.5 * interquantile_range\n    return low_limit, up_limit\ndef replace_with_thresholds(dataframe, variable):\n    low_limit, up_limit = outlier_thresholds(dataframe, variable)\n    dataframe.loc[(dataframe[variable] < low_limit), variable] = low_limit\n    dataframe.loc[(dataframe[variable] > up_limit), variable] = up_limit\n","53569028":"df.describe().T\ndf.dropna(inplace=True)\ndf = df[~df[\"InvoiceNo\"].str.contains(\"C\", na=False)]\ndf = df[df[\"Quantity\"] > 0]\n\nreplace_with_thresholds(df, \"Quantity\")\nreplace_with_thresholds(df, \"UnitPrice\")\ndf.describe().T\n\ndf[\"TotalPrice\"] = df[\"Quantity\"] * df[\"UnitPrice\"]\ntoday_date = dt.datetime(2011, 12, 11)\n","27c8e7e6":"print(today_date) \nprint(df.InvoiceDate.max())\n# I convert string to date time because of error and applied all columns\nd,m,y=df.InvoiceDate.max().split()[0].split(\"\/\")\nnew_date = dt.datetime(int(y),int(m),int(d))\n(today_date - new_date).days\n\ndef convert_to_datetime(_date):\n    m,d,y=_date.split()[0].split(\"\/\")\n    new_date = dt.datetime(int(y),int(m),int(d))\n    return new_date\n\ndf.InvoiceDate = df.InvoiceDate.apply(convert_to_datetime)\n\n\n\n\n\ncltv_df = df.groupby('CustomerID').agg({'InvoiceDate': [lambda date: (date.max() - date.min()).days,\n                                                         lambda date: (today_date - date.min()).days],\n                                         'InvoiceNo': lambda num: num.nunique(),\n                                         'TotalPrice': lambda TotalPrice: TotalPrice.sum()})\n\ncltv_df.columns = cltv_df.columns.droplevel(0)\ncltv_df.columns = ['recency', 'T', 'frequency', 'monetary']\n\ncltv_df[\"monetary\"] = cltv_df[\"monetary\"] \/ cltv_df[\"frequency\"]\n\ncltv_df = cltv_df[cltv_df[\"monetary\"] > 0]\n","f532edea":"\ncltv_df[\"recency\"] = cltv_df[\"recency\"] \/ 7\ncltv_df[\"T\"] = cltv_df[\"T\"] \/ 7\n# Frequency needs to be greater than 1\ncltv_df = cltv_df[(cltv_df['frequency'] > 1)]\n\n","9d611f97":"bgf = BetaGeoFitter(penalizer_coef=0.001)\n\nbgf.fit(cltv_df['frequency'],\n        cltv_df['recency'],\n        cltv_df['T'])\n","13b7e907":"bgf.conditional_expected_number_of_purchases_up_to_time(1,\n                                                        cltv_df['frequency'],\n                                                        cltv_df['recency'],\n                                                        cltv_df['T']).sort_values(ascending=False).head(10)\n\nbgf.predict(1,\n            cltv_df['frequency'],\n            cltv_df['recency'],\n            cltv_df['T']).sort_values(ascending=False).head(10)\n\n\ncltv_df[\"expected_purc_1_week\"] = bgf.predict(1,\n                                              cltv_df['frequency'],\n                                              cltv_df['recency'],\n                                              cltv_df['T'])\n\ncltv_df.head()\n","0019ccde":"bgf.predict(4,\n            cltv_df['frequency'],\n            cltv_df['recency'],\n            cltv_df['T']).sort_values(ascending=False).head(10)\n\n\ncltv_df[\"expected_purc_1_month\"] = bgf.predict(4,\n                                               cltv_df['frequency'],\n                                               cltv_df['recency'],\n                                               cltv_df['T'])\n\n\n\ncltv_df.sort_values(\"expected_purc_1_month\", ascending=False).head(20)\n","e21c4c5e":"bgf.predict(4,\n            cltv_df['frequency'],\n            cltv_df['recency'],\n            cltv_df['T']).sum()\n","8d7a9a1f":"bgf.predict(4 * 3,\n            cltv_df['frequency'],\n            cltv_df['recency'],\n            cltv_df['T']).sum()\n","4cf44760":"plot_period_transactions(bgf)\nplt.show()\n","7aafa286":"ggf = GammaGammaFitter(penalizer_coef=0.01)\nggf.fit(cltv_df['frequency'], cltv_df['monetary'])\n\nggf.conditional_expected_average_profit(cltv_df['frequency'],\n                                        cltv_df['monetary']).head(10)\n\n\nggf.conditional_expected_average_profit(cltv_df['frequency'],\n                                        cltv_df['monetary']).sort_values(ascending=False).head(10)\n\n\ncltv_df[\"expected_average_profit\"] = ggf.conditional_expected_average_profit(cltv_df['frequency'],\n                                                                             cltv_df['monetary'])\n\ncltv_df.sort_values(\"expected_average_profit\", ascending=False).head(20)\n\n","b6297c89":"cltv = ggf.customer_lifetime_value(bgf,\n                                   cltv_df['frequency'],\n                                   cltv_df['recency'],\n                                   cltv_df['T'],\n                                   cltv_df['monetary'],\n                                   time=3,  # 3 monthly\n                                   freq=\"W\",  # T'nin frekans bilgisi.\n                                   discount_rate=0.01)\n\ncltv.head()\n\ncltv = cltv.reset_index()\ncltv.sort_values(by=\"clv\", ascending=False).head(50)\ncltv_final = cltv_df.merge(cltv, on=\"CustomerID\", how=\"left\")\n\ncltv_final.sort_values(by=\"clv\", ascending=False).head(10)\n\n","d51edc51":"cltv_final[\"segment\"] = pd.qcut(cltv_final[\"clv\"], 4, labels=[\"D\", \"C\", \"B\", \"A\"])\n\ncltv_final.head()\n\n\ncltv_final.groupby(\"segment\").agg(\n    {\"count\", \"mean\", \"sum\"})\n","62236219":"# 4. Calculating CLTV with BG-NBD and Gamma-Gamma ","a1bddcdc":"Recency and Tennure Calculation weekly ","b1d4fa4d":"# Data Cleaning and Reading","655464c0":"# 5. Segmentation ","3ae6ade0":"Prediction of Total Sales Amount 12 week","af03e997":"# 1. (Data Preperation)\n# 2. Calculating Expected Sales Forecasting with BG-NBD \n# 3. Calculating Expected Average Profit with Gamma-Gamma \n# 4. Calculating CLTV with BG-NBD and Gamma-Gamma \n# 5. Segmentation \n","fbdcaf8e":"# Preparation of LifeTime Datas\n* # recency: Last Shopping weekly. \n* # T: M\u00fc\u015fterinin ya\u015f\u0131. Haftal\u0131k. (Analysis Date - First Shopping Date)\n* # frequency: Occurance Shopping Count(frequency>1)\n* # monetary_value: Profit per Invoice\n","49e75876":"# Most Valuable 10 Customer within 1 week","8b23026e":"Forecasting of most valuable within 4 week","10a6b573":"# * Definition of Outlier Thresholds and Exculusion ","c7054a30":"# 2. Calculating Expected Sales Forecasting with BG-NBD ","329d80a5":"Prediction of Total Sales Amount 4 week","77e5b74b":"# 3. Calculating Expected Average Profit with Gamma-Gamma ","7b0f9e8d":"We have labelled our customers related with CLV value"}}