{"cell_type":{"2f7435fa":"code","ab25b07a":"code","8eb9fc84":"code","19378a0d":"code","2f4db375":"code","58377b6d":"code","8af8f7f1":"code","181e69ab":"code","ab3df468":"code","e31f2543":"code","cb0907df":"code","df95bc15":"code","220c9a34":"code","d0200f9f":"code","c0148484":"code","b6cdd1cf":"code","a1c3b96e":"code","8bf5dcc1":"code","1fdb0488":"code","8a8a14ac":"code","56294e59":"code","e62f322e":"code","eb5b4c9f":"markdown","97df3523":"markdown","73154c20":"markdown","64035fc6":"markdown","a011f8a7":"markdown","2676fec9":"markdown","9393f45e":"markdown","98c7dd6c":"markdown","ef85d756":"markdown","1908c448":"markdown","ce5df354":"markdown","78d5477d":"markdown","b5c4a7ba":"markdown","91b1513f":"markdown","3fe1e209":"markdown","0567b06d":"markdown","3b34b425":"markdown","e83e99fd":"markdown","9ae7b4d0":"markdown","97a6a9e3":"markdown","6b750b43":"markdown","42148160":"markdown","c6097616":"markdown","b3de510c":"markdown","aab70248":"markdown","6a6b8c68":"markdown","180415f5":"markdown","4943535b":"markdown","3b38c5de":"markdown","ac44642c":"markdown","344ca981":"markdown","c25db00c":"markdown","5a500533":"markdown","1742ecf9":"markdown","682acee1":"markdown","683fd5c4":"markdown","1b392623":"markdown","59d5cf99":"markdown","3f300c49":"markdown","3670bc5a":"markdown","c2b645e0":"markdown","3103585b":"markdown","0b4364d4":"markdown","1cdcb7f9":"markdown"},"source":{"2f7435fa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","ab25b07a":"import soundfile as sf\nimport IPython.display as ipd\nimport matplotlib.pyplot as plt","8eb9fc84":"sound, samplerate = sf.read(\"\/kaggle\/input\/Childish-Gambino-Me-and-Your-Mama-_Official-Audio_.wav\")","19378a0d":"sound.shape","2f4db375":"sound_ch1 = sound[:,0]","58377b6d":"eixo_x = range(10)\neixo_y = range(10,20)\nplt.plot(eixo_x, eixo_y)\nplt.show()","8af8f7f1":"eixo_y = [i**2 for i in range(10)]\nplt.plot(eixo_y)\nplt.show()","181e69ab":"plt.plot(sound)\nplt.show()","ab3df468":"plt.plot(sound_ch1)\nplt.show()","e31f2543":"# ipd.Audio(\"\/kaggle\/input\/Childish Gambino - Me and Your Mama (Official Audio).mp3\")","cb0907df":"# ipd.Audio(sound_ch1, rate=samplerate)","df95bc15":"peak_max = sound_ch1.max()\npeak_min = sound_ch1.min()\nprint(\"Valor m\u00e1ximo:\", peak_max)\nprint(\"Valor m\u00ednimo:\", peak_min)","220c9a34":"mean_value = sound_ch1.mean()\nprint(\"M\u00e9dia:\", mean_value)","d0200f9f":"plt.plot(sound_ch1)\nplt.plot(np.repeat(mean_value,sound_ch1.shape[0]) ,label=\"media\")\nplt.plot(np.repeat(peak_max,sound_ch1.shape[0]),label=\"pico maximo\")\nplt.plot(np.repeat(peak_min,sound_ch1.shape[0]), label=\"pico minimo\" )\nplt.show()","c0148484":"def separate_sound(sound, samplerate, x, y):\n    return sound[x*samplerate:y*samplerate]\n","b6cdd1cf":"plt.plot(separate_sound(sound_ch1, samplerate, 20, 30))\nplt.show()\nplt.plot(separate_sound(sound_ch1, samplerate, 70, 90))\nplt.show()\nplt.plot(separate_sound(sound_ch1, samplerate, 250, 260))\nplt.show()","a1c3b96e":"windows_steps = int(sound_ch1.shape[0]\/samplerate)\nwindows = np.zeros(samplerate)\nfor step in range(windows_steps):\n    window = separate_sound(sound_ch1, samplerate, step, step+1)\n    windows = np.vstack([windows, window])\nwindows = windows[1:]","8bf5dcc1":"peaks_max = windows.max(axis=1)\nmeans = windows.mean(axis=1)\npeaks_min = windows.min(axis=1)\n","1fdb0488":"print(\"Maximos e m\u00ednimos\")\nplt.plot(peaks_max)\nplt.plot(peaks_min)\nplt.show()\nprint(\"M\u00e9dia\")\nplt.plot(means)\nplt.show()\nprint(\"Som: \")\nplt.plot(sound_ch1)\nplt.show()","8a8a14ac":"letras = np.array([chr(i) for i in range(65,91)])\nposicoes = np.arange(91-65) + 1\ndf_letras = pd.DataFrame(data=np.vstack([letras, posicoes]).T, columns=['letras', 'posicoes'])\ndf_letras.head()","56294e59":"\nseconds = np.arange(windows.shape[0])\ndata = np.vstack([seconds,peaks_max,peaks_min]).T\ndf = pd.DataFrame(data=data,columns=['segundo','maximo','minimo'])\n","e62f322e":"df.head()","eb5b4c9f":"#### Resposta:","97df3523":"#### Tarefa 14: Crie um DataFrame `df` com as colunas `segundo`, `maximo`, `minimo` e `media`, cada linha representando uma janela, com, respectivamente, seu segundo, o valor do seu pico m\u00e1ximo, do m\u00ednimo e a m\u00e9dia da intensidade na janela","73154c20":"#### Tarefa 06: Reproduza o canal 1 do som ","64035fc6":"#### Tarefa 08: Consiga a m\u00e9dia da intensidade do vetor e salve na vari\u00e1vel `mean_value`","a011f8a7":"#### Tarefa 12: Agora, extraia os picos m\u00e1ximos, m\u00ednimos e a m\u00e9dia da intensidade de cada janela, utilizando os vetores: `peak_maxs`, `peaks_mins`, `means`, respectivamente. Cada elemento sendo o valor da propriedade na janela de mesma posi\u00e7\u00e3o.","2676fec9":"* dos 20 aos 30 segundos\n* dos 70 aos 90 segundos\n* dos 250 aos 260 segundos","9393f45e":"#### Tarefa 13: Rode essa c\u00e9lula e veja como agora essas informa\u00e7\u00f5es agora representam melhor o som","98c7dd6c":"Um DataFrame \u00e9 uma estrutura de dados usada pelo pandas, que pode ser vista como uma tabela, na primeira linha temos em cada coluna o nome da informa\u00e7\u00e3o que a coluna representa, e nas pr\u00f3ximas linhas cada uma representa as informa\u00e7\u00f5es de um dos dados. Como exemplo de cria\u00e7\u00e3o de um DataFrame temos o `df_letras` que possui duas colunas, as de letras e a posi\u00e7\u00e3o da letra correspondente.\nPara a cria\u00e7\u00e3o de um dataset precisamos de uma matriz com o shape `({N\u00famero de linhas}, {N\u00famero de colunas}` para o argumento `data`, e de prefer\u00eancia, uma lista com o nome de cada coluna como argumento de `columns`.\nA fun\u00e7\u00e3o `pd.DataFrame.head` mostra os 5 primeiros elementos do DataFrame.","ef85d756":"#### Tarefa 10: Plotte os seguintes segmentos da m\u00fasica\n","1908c448":"#### Resposta: \nComo o `sound.shape` retorna 2 na posi\u00e7\u00e3o 1 da shape, o som tem dois canais","ce5df354":"#### Resposta:","78d5477d":"#### Resposta:","b5c4a7ba":"## 6. Dividir o \u00e1udio","91b1513f":"## C\u00e9lula inicial \n\nQualquer notebook que voc\u00ea fizer no kaggle provavelmente vai come\u00e7ar com uma c\u00e9lula assim: primeiramente, s\u00e3o importadas as bibliotecas numpy e pandas, importantes para c\u00e1lculos de \u00e1lgebra linear e manipula\u00e7\u00e3o de dados (respectivamente).\nNo momento, n\u00e3o se preocupe com as linhas seguintes, s\u00f3 saiba que elas est\u00e3o mostrando todos os dados que foram colocados nesse notebook. No caso temos um arquivo .wav e .mp3 da m\u00fasica Me and Your Mama, a primeira m\u00fasica do \u00e1lbum Awaken My Love do artista Childish Gambino.\n","3fe1e209":"Agora temos as informa\u00e7\u00f5es de picos e a m\u00e9dia, mas qu\u00e3o bem elas representam nosso \u00e1udio?","0567b06d":"#### Resposta","3b34b425":"## 8. Salvando informa\u00e7\u00f5es num DataFrame","e83e99fd":"## 2. Plottando o som\n\nAt\u00e9 agora fizemos as coisas um pouco \u00e0s escuras, n\u00e3o visualizamos o som de nenhuma forma. Para fazer gr\u00e1ficos n\u00f3s usaremos a biblioteca matplotlib, recomendo fortemente fazer o [tutorial do kaggle de matplotlib]() para melhores explica\u00e7\u00f5es. Mas se quiser pular, em resumo usaremos nessa aula a fun\u00e7\u00e3o `plot` do m\u00f3dulo `matplotlib.pyplot`, que foi importado como `plt` por quest\u00f5es de padr\u00e3o. Essa fun\u00e7\u00e3o recebe um eixo x e um eixo y, e assim que a fun\u00e7\u00e3o `show` \u00e9 chamada, faz o gr\u00e1fico deles, por exemplo:","9ae7b4d0":"#### Tarefa 15: Rode a c\u00e9lula a seguir e veja a head do seu DataFrame","97a6a9e3":"## 4. Reproduzindo sons no notebook\n\nAgora conseguimos visualizar o som, mas uma coisa muito importante que fazemos com o som al\u00e9m de visualiz\u00e1-lo \u00e9 ouvir! Como reproduzimos sons pelo jupyter? O m\u00f3dulo `IPython.Display` (importado como `ipd` para facilitar) pode ajudar nisso, a sua fun\u00e7\u00e3o `Audio` pode receber tanto o endere\u00e7o de um som quanto o vetor de som e seu samplerate. Se quisermos reproduzir o arquivo `\/kaggle\/input\/Childish Gambino - Me and Your Mama (Official Audio).mp3` podemos fazer:","6b750b43":"#### Resposta:","42148160":"Antes de separar o som em janelas, devemos saber como obter segmentos desse som. O samplerate nos indica quantos samples o \u00e1udio possui por segundo, logo, uma parte do \u00e1udio com `n` segundos possui `n\u00d7samplerate` samples. \n\n#### Tarefa 09: Escreva uma fun\u00e7\u00e3o `separate_sound` que recebe um vetor de um canal de som, o samplerate, um n\u00famero `x`e outro `y` e retorna o segmento desse vetor correspondente aos tempo de x \u00e0 y em segundos","c6097616":"# Notebook de Processamento de Som - 01\n \n ### Nesse notebook iremos ver os seguintes t\u00f3picos:\n 1. Carregar arquivo de \u00e1udio\n 2. Separar canais de \u00e1udio\n 3. Plottar o vetor correspondente ao \u00e1udio\n 4. Reproduzir o vetor de \u00e1udio\n 5. Calcular as seguintes informa\u00e7\u00f5es do \u00e1udio\n    * Picos (m\u00e1ximos e m\u00ednimos)\n    * M\u00e9dia da intensidade\n    * Normaliza\u00e7\u00e3o \n 6. Divis\u00e3o do \u00e1udio em janelas\n 7. Processamento de informa\u00e7\u00f5es dessas janelas\n 8. Salvar informa\u00e7\u00f5es obtidas num csv","b3de510c":"## Bibliotecas utlizadas \n\n* soundfile: Carregamento de arquivos\n* ipython: Reprodu\u00e7\u00e3o de \u00e1udio\n* matplotlib: Representa\u00e7\u00e3o gr\u00e1fica","aab70248":"Agora que conseguimos visualizar e ouvir o som, vamos come\u00e7ar a extrair informa\u00e7\u00f5es dele. Dentre elas: o pico de m\u00e1ximo e m\u00ednimo (intensidade m\u00e1xima e m\u00ednima) e a m\u00e9dia das intensidades do vetor. ","6a6b8c68":"#### Resposta:","180415f5":"#### Resposta","4943535b":"#### Tarefa 04: Coloque o `sound` como entrada da fun\u00e7\u00e3o `plot`","3b38c5de":"## 7. Extra\u00e7\u00e3o de informa\u00e7\u00e3o das janelas","ac44642c":"#### Tarefa 07: Consiga as intensidades m\u00e1xima e m\u00ednima do vetor de som e salve elas respectivamente nas vari\u00e1veis `peak_max` e `peak_min`","344ca981":"#### Resposta:","c25db00c":"#### Tarefa 11: Crie um numpy array chamado `windows` em que cada elemento \u00e9 uma janela de 1 segundo do som. Dica: comece com um vetor de 0's (`np.zeros`) e fa\u00e7a a concatena\u00e7\u00e3o das janelas com `np.vstack`.","5a500533":"#### Resposta","1742ecf9":"Perceba que o tempo do display de \u00e1udio que foi criado n\u00e3o acaba em 6:19, e sim num tempo absurdamente grande, n\u00e3o se preocupe com isso agora, mas isso acontece porque n\u00e3o tem como o m\u00f3dulo saber o tamanho do som apenas com o vetor e o samplerate, mas quando colocado para reproduzir e chegar no fim, o display ir\u00e1 parar a reprodu\u00e7\u00e3o. \n*PS: O display pode travar um pouco o notebook, se isso estiver acontecendo com voc\u00ea, comente as c\u00e9lulas com display e as execute.*","682acee1":"#### Resposta:","683fd5c4":"#### Resposta:","1b392623":"Como pode ter percebido, a extra\u00e7\u00e3o de uma informa\u00e7\u00e3o unidimensional como a m\u00e9dia e os picos do \u00e1udio completo pode n\u00e3o ser muito \u00fatil e n\u00e3o representa t\u00e3o bem um \u00e1udio grande como esse. Para ter informa\u00e7\u00f5es de uma forma mais precisa, n\u00f3s dividimos o \u00e1udio em janelas de tempo e da\u00ed extra\u00edmos informa\u00e7\u00f5es dessas janelas separadamente.","59d5cf99":"## 1. Carregando Arquivos\nPara carregar arquivos, n\u00f3s usamos a biblioteca soundfile, que possui a fun\u00e7\u00e3o `read`, que recebe como argumento o caminho para o arquivo de \u00e1udio e como sa\u00edda uma tupla, na qual o primeiro elemento \u00e9 um numpy array que representa o som num vetor de intensidades (como vimos na aula, cada elemento \u00e9 a intensidade do \u00e1udio no tempo `(i\/samplerate)` segundos, com i sendo a posi\u00e7\u00e3o que o elemento se encontra no vetor) e o segundo elemento \u00e9 o samplerate da m\u00fasica. \nEssa fun\u00e7\u00e3o n\u00e3o funciona com arquivos .mp3, mas funciona com .wav e .au\n#### Tarefa 01: carregue a m\u00fasica Me and Your Mama utilizando essa fun\u00e7\u00e3o, com o vetor de som ficando numa vari\u00e1vel chamada `sound` e o samplerate numa chamada `samplerate`","3f300c49":"Como o som tem dois canais, a vari\u00e1vel `sound` n\u00e3o representa apenas um vetor do som, no qual cada elemento \u00e9 a intensidade do som no frame i (com i sendo a posi\u00e7\u00e3o do elemento no vetor), mas sim um vetor no qual cada elemento \u00e9 outro vetor (de tamanho 2) no qual o elemento 0 \u00e9 a intensidade no canal 1 e o elemento 1 a intensidade no canal 2.\nPara simplificarmos nosso problema, vamos selecionar apenas um dos canais.\n\n#### Tarefa 03: crie uma vari\u00e1vel `sound_ch1` que seja o vetor de intensidades do canal 1","3670bc5a":"Se apenas um vetor for colocado na fun\u00e7\u00e3o `plot` ela ir\u00e1 assumir que os valores representam o eixo y e o eixo x \u00e9 a posi\u00e7\u00e3o de cada elemento no vetor, por exemplo:","c2b645e0":"#### Tarefa 05: Como pode ver, tivemos duas cores diferentes no gr\u00e1fico, isso porque estamos plotando dois canais, agora plote apenas o canal 1","3103585b":"## 5. Conseguindo informa\u00e7\u00f5es do som","0b4364d4":"## 2. Separando canais de \u00e1udio\nMuitas vezes as m\u00fasicas s\u00e3o gravadas em dois canais, um para cada ouvido. Quando importamos arquivos de \u00e1udio que cont\u00eam dois canais, para simplificar muitas vezes selecionamos apenas um dos canais. Como fazemos isso? No momento que importamos o vetor de sons com a soundfile somos retornados com um numpy array, que, obviamente possui as fun\u00e7\u00f5es de um numpy array. Se pegarmos o `shape` do vetor retornado pela soundfile e o valor da posi\u00e7\u00e3o 1 da tupla for 2, o \u00e1udio possui dois canais.\n\n#### Tarefa 02: Descubra se a m\u00fasica possui dois canais","1cdcb7f9":"#### Resposta:"}}