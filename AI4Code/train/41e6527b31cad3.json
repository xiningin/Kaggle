{"cell_type":{"3e4708e5":"code","c8273415":"code","67625ba6":"code","430632bc":"code","1faafe9d":"code","b8ae945c":"code","e19d70bf":"code","b0e7ef6b":"code","da5ec14b":"code","5ed0479c":"code","1197fa91":"code","75122b8d":"code","88643592":"code","317c62f4":"code","fd93e3b8":"code","1fad7717":"code","67962adb":"code","7bb47608":"code","fef64e0e":"code","28224212":"code","b83c26f2":"code","21d1e79d":"code","7327d7c8":"code","4391a7d3":"code","976b2bf6":"code","a0bbaba2":"code","f112201f":"code","8c9afb0c":"markdown","a3688d4a":"markdown","30ff5601":"markdown","a0d03d4f":"markdown","a6b3d3c4":"markdown","f72ea998":"markdown","06affc4d":"markdown","290e1551":"markdown","e105e3a7":"markdown","5b28a8aa":"markdown","b1f8273f":"markdown","2b9dc777":"markdown","8e70fc53":"markdown","91e5d26d":"markdown","8161394e":"markdown","6ba620a8":"markdown","561d59ca":"markdown","044f7561":"markdown","f83afbca":"markdown","57d9dbb7":"markdown"},"source":{"3e4708e5":"!pip install torchsummary","c8273415":"import warnings\nwarnings.filterwarnings('ignore')","67625ba6":"from __future__ import print_function, division\n\nimport pathlib\nimport os\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom PIL import Image\nfrom torchsummary import summary\n\nimport torch\nimport torchaudio\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.nn.init as I\nimport torch.optim as optim\nimport torchvision\n\nfrom torch.utils.data import Dataset, DataLoader\nimport multiprocessing\nfrom tqdm import tqdm\nimport pandas as pd\nimport librosa\n\nimport shutil\nfrom pathlib import Path\nimport gc","430632bc":"example_test_audio_metadata = pd.read_csv('..\/input\/birdsong-recognition\/example_test_audio_metadata.csv')\nexample_test_audio_metadata.head()","1faafe9d":"example_test_audio_summary = pd.read_csv('..\/input\/birdsong-recognition\/example_test_audio_summary.csv')\nexample_test_audio_summary.head()","b8ae945c":"test = pd.read_csv('..\/input\/birdsong-recognition\/test.csv')\ntest.head()","e19d70bf":"train_df = pd.read_csv('..\/input\/birdsong-recognition\/train.csv')\ntrain_df.head()","b0e7ef6b":"EPOCHS = 50\nDURATION = 5\nTEST = True\nNO_OF_TEST_CLASSES = 5\ndata_dir = pathlib.Path('\/kaggle\/input\/birdsong-recognition\/train_audio\/')\n# Image size of spectrogram for 5 seconds \nIMG_SIZE=(552, 128)","da5ec14b":"device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\nprint(f'Running on : {device}')","5ed0479c":"train_df = train_df[[\"ebird_code\", \"channels\", \"duration\", \"filename\", \"species\",\"bird_seen\",\"latitude\", \"longitude\"]]\ntrain_df = train_df[train_df[\"duration\"] >= DURATION]\ntrain_df['offset'] = train_df.apply(lambda row: int((row.duration - DURATION) \/ 2) ,axis=1)\ntrain_df['path']= train_df.apply(lambda row: f'\/kaggle\/input\/birdsong-recognition\/train_audio\/{row.ebird_code}\/{row.filename}' ,axis=1)\ntrain_df.head()","1197fa91":"CLASS_NAMES = [item.name for item in data_dir.glob('*')]\nif TEST:\n    CLASS_NAMES = CLASS_NAMES[:NO_OF_TEST_CLASSES]\n    print(f\"Test running on {NO_OF_TEST_CLASSES} classes\")\n    print(f\"Class Names\", CLASS_NAMES)","75122b8d":"CLASS_MAP = {x: CLASS_NAMES.index(x) for x in CLASS_NAMES}\nprint(f\"Total Classes: {len(CLASS_NAMES)}\")\nprint(f\"Classes: \", CLASS_MAP)","88643592":"training_data = train_df[train_df.ebird_code.isin(CLASS_NAMES)]\ntraining_data = training_data[['path', 'offset']]\ntraining_data.head()","317c62f4":"paths = training_data.values\npaths = [[pathlib.Path(item[0]), item[1]] for item in paths]\n\ngroups = [[[y[0], y[1]] for y in paths if y[0].parts[-2]==x] for x in CLASS_NAMES]\n\nplot_data = []\n\n# Percentage window split. if split_window = [0, 0.25, 0.5, 1], the data splitted into 0%-25%, 25%-50% and 50%-100%\nsplit_window = [0, 1]  \nbatches = [[] for _ in range(len(split_window)-1)]\n\nfor group in groups:\n    plot_data.append(group[1]) \n    tr_b = [group[int(len(group) * split_window[i]) : int(len(group) * split_window[i+1])] for i in range(len(split_window)-1)]\n    batches = [tr_b[i] + batches[i] for i in range(len(batches))]\n    \nprint(\"Trainning audio batches count: \", [len(l) for l in batches])","fd93e3b8":"# Pie chart, where the slices will be ordered and plotted counter-clockwise:\nlabels = 'Bird Seen', 'Bird Unseen'\nbird_seen_count = train_df[train_df.bird_seen == 'yes'].shape[0]\nsizes = [bird_seen_count, train_df.shape[0] - bird_seen_count]\nexplode = (0, 0.1) \n\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()","1fad7717":"# Pie chart, where the slices will be ordered and plotted counter-clockwise:\nlabels = 'Stereo Audio Files', 'Mono Audio Files'\nmono_audio_count = train_df[train_df.channels == '1 (mono)'].shape[0]\nsizes = [train_df.shape[0] - mono_audio_count, mono_audio_count]\nexplode = (0, 0.1) \n\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()","67962adb":"if TEST:\n    labels = CLASS_NAMES\n    distribution = train_df[train_df.ebird_code.isin(CLASS_NAMES)]\n    distribution = distribution.groupby(['ebird_code'])['ebird_code'].value_counts().to_frame()\n    distribution = distribution.rename(columns={ distribution.columns[0]: \"count\" })\n    sizes = list(distribution['count'].values)\n\n    fig1, ax1 = plt.subplots()\n    ax1.pie(sizes, labels=labels, autopct='%1.1f%%',\n            shadow=True, startangle=90)\n    ax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n    plt.show()","7bb47608":"for i in range(5):\n    data = plot_data[i]\n    path = data[0]\n    name = path.parts[-2]\n    offset = data[1]\n    S, sr = librosa.load(path, mono=True, duration=DURATION, offset=offset)\n    specgram = torchaudio.transforms.MelSpectrogram()(torch.tensor(S))\n    img = torchvision.transforms.ToPILImage()(specgram).convert(\"RGB\")\n    img = img.resize(IMG_SIZE, Image.ANTIALIAS)    \n    plt.figure()\n    plt.subplot(2, 1, 1)\n    plt.plot(S)\n    plt.title(name)\n    plt.subplot(2, 1, 2)\n    plt.imshow(img)\n    plt.title(name + \": \"+ 'Mel spectrogram')\n    plt.tight_layout()","fef64e0e":"def delete_previous_image_dir():\n    if os.path.exists('\/kaggle\/working\/train_images\/'):\n        shutil.rmtree('\/kaggle\/working\/train_images\/')\n    \ndef create_dir():\n    if not os.path.exists('train_images'):\n        os.makedirs('train_images')\n    for name in CLASS_NAMES:\n        p = Path(f\"\/kaggle\/working\/train_images\/{name}\/\")\n        if not os.path.exists(p):\n            p.mkdir(parents=True)\n    \n\ndef convert_audio_to_image(data):\n    path = data[0]\n    offset = data[1]\n    class_name = path.parts[-2]\n    name = path.parts[-1].split(\".\")[0]\n    try:\n        S, sr = librosa.load(path, mono=True, duration=DURATION, offset=offset)\n        specgram = torchaudio.transforms.MelSpectrogram()(torch.tensor(S))\n        img = torchvision.transforms.ToPILImage()(specgram).convert(\"RGB\")\n        img.save(f\"\/kaggle\/working\/train_images\/{class_name}\/{name}.png\")\n        \n        del S\n        del specgram\n        del img\n    except Exception as e:\n        print(f\"Exception in reading: {path}\")\n    gc.collect()\n\ndef process_audio(paths):\n    for path in tqdm(paths):\n        convert_audio_to_image(path)\n        \ndef process_audio_in_pool(data):\n    pool = multiprocessing.Pool(multiprocessing.cpu_count())\n    pool.map(convert_audio_to_image, data)  \n    pool.close()\n    pool.join()\n\ndelete_previous_image_dir()\ncreate_dir()\n\nbatch = batches[0]\ntotal = int(len(batch) \/ 100) + (1 if len(batch) % 100 > 1 else 0)\ncurrent = 0\nwhile len(batch) > 0:\n    # Batch contain 100 images\n    print(f\"Processing mini batch(may take some time): {current + 1} \/ {total}\")\n    process_audio_in_pool(batch[:100])\n    batch = batch[100:]\n    current += 1","28224212":"data_dir = pathlib.Path('\/kaggle\/working\/train_images\/')\npaths = list(data_dir.glob('*\/*.png'))\nimage_count = len(paths)\nprint(f\"Total Image: {image_count}\")","b83c26f2":"groups = [[y for y in paths if y.parts[-2]==x] for x in CLASS_NAMES]\n\ntrain_path = []\ntest_path = []\n\nfor group in groups:\n    l = len(group)\n    l = int(l * 0.8)\n    train_path += group[:l]\n    test_path += group[l:]\n\n    \nprint(\"Trainning images: \", len(train_path))\nprint(\"Testing audio: \", len(test_path))","21d1e79d":"class AudioDataset(Dataset):\n\n    paths = []\n    \n    def __init__(self, paths):\n        self.paths = paths\n        \n    def __len__(self):\n        return len(self.paths)\n\n    def __getitem__(self, idx):\n        path = self.paths[idx]\n        img = Image.open(path)\n        img = img.resize(IMG_SIZE, Image.ANTIALIAS)    \n        pil_to_tensor = torchvision.transforms.ToTensor()(img)\n        return pil_to_tensor, CLASS_MAP[path.parts[-2]]","7327d7c8":"train_data = AudioDataset(paths=train_path)\ntest_data = AudioDataset(paths=test_path)\n\ntrain_loader = DataLoader(train_data, batch_size=16, shuffle=True)\ntest_loader = DataLoader(test_data, batch_size=16, shuffle=True)","4391a7d3":"net = torchvision.models.resnet18()\nnet = net.cuda() if torch.cuda.is_available() else net\nnet","976b2bf6":"criterion = nn.CrossEntropyLoss()\noptimizer = optim.SGD(net.parameters(), lr=0.0001, momentum=0.9)\n\n\nnum_ftrs = net.fc.in_features\nnet.fc = nn.Linear(num_ftrs, len(CLASS_NAMES))\nnet.fc = net.fc.cuda() if torch.cuda.is_available() else net.fc","a0bbaba2":"summary(net, (3, IMG_SIZE[0], IMG_SIZE[1]))","f112201f":"for epoch in range(EPOCHS):\n    print(f\"Running Epoch {epoch + 1}\")\n    # loop over the dataset multiple times\n    running_loss = 0.0\n    no_of_batches = 0\n    tk0 = tqdm(train_loader, total=int(len(train_loader)))\n    for i, data in enumerate(tk0):\n        # get the inputs; data is a list of [inputs, labels]\n        inputs, labels = data\n        inputs, labels = inputs.to(device), labels.to(device)\n\n        # zero the parameter gradients\n        optimizer.zero_grad()\n\n        # forward + backward + optimize\n        outputs = net(inputs)\n        loss = criterion(outputs, labels)\n        loss.backward()\n        optimizer.step()\n\n        # print statistics\n        running_loss += loss.item()\n        no_of_batches += 1\n    correct = 0\n    total = 0\n    with torch.no_grad():\n        tk1 = tqdm(test_loader, total=int(len(test_loader)))\n        for i, data in enumerate(tk1):\n            inputs, labels = data\n            inputs, labels = inputs.to(device), labels.to(device)\n            outputs = net(inputs)\n            _, predicted = torch.max(outputs.data, 1)\n            total += labels.size(0)\n            correct += (predicted == labels).sum().item()\n\n    print('[Epoch - %d] loss: %.3f   Accuracy: %d %%' % (epoch + 1, running_loss \/ no_of_batches, 100 * correct \/ total))\nprint('Finished Training')","8c9afb0c":"# Network","a3688d4a":"Parsing class name.","30ff5601":"## Creating a batch of data","a0d03d4f":"Creating batches of data. If split_window = [0, 0.25, 0.5, 1], the data splitted into 0%-25%, 25%-50% and 50%-100%. Created it for test run. Here I am creating 100% of split, Because I am training only for only 10 classes in test purpose","a6b3d3c4":"## Constants","f72ea998":"# Train Data Processing","06affc4d":"## Imports","290e1551":"# Test Mode Data\n\nData distribution in test mode","e105e3a7":"# Transfer Learning","5b28a8aa":"## Analysing CSV","b1f8273f":"Ref: https:\/\/pytorch.org\/tutorials\/beginner\/audio_preprocessing_tutorial.html","2b9dc777":"Creating transfer learning network with resnet18 as base model.","8e70fc53":"[**MelSpectrogram:**](https:\/\/medium.com\/analytics-vidhya\/understanding-the-mel-spectrogram-fca2afa2ce53#:~:text=A%20mel%20spectrogram%20is%20a,converted%20to%20the%20mel%20scale) A mel spectrogram is a spectrogram where the frequencies are converted to the mel scaleMelSpectrogram: ","91e5d26d":"# Analysis","8161394e":"Creating a new data frame with the required columns for analysis. For training filtering the audio which has a duration of more than 5 seconds, and then calculating offset to read 5 seconds of audio data in the middle.","6ba620a8":"Here the audio files are read from the offset with required durations(5 seconds) and converted to MelSpectrogram. Reading audio as mono channel audio. The MelSpectrogram images are resized into 552, 128 (Image size of spectrogram for 5 seconds) and saved as images. The audio to image conversion happens in a multiprocess pool to speed up the process.\n\nThe conversion processing happens as mini-batches, each mini-batch processing 100 audio files.","561d59ca":"## Converting Audio To Images","044f7561":"# Pytorch Audio Classification (In Progress)","f83afbca":"# Input Pipeline","57d9dbb7":"## Plotting audio samples"}}