{"cell_type":{"f25556bf":"code","99609815":"code","5f0de1e3":"code","fb1e545c":"code","0a75fb74":"code","200058bb":"code","d63e75da":"code","c093d269":"code","6f305b25":"code","91b8526f":"code","d937479c":"code","527274b5":"code","53ce6421":"code","f05d7c7d":"markdown"},"source":{"f25556bf":"# Import stuff\nfrom __future__ import print_function\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Flatten\nfrom keras import backend as K\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt #for plotting","99609815":"# How many images to send to GPU?\nbatch_size = 128\n\n# How many target classes are in the dataset? (10 number, 0 - 9)\nnum_classes = 10\n\n# Epoch = neural network have seen all training examples\nepochs = 5\n\n# input image dimensions\nimg_rows, img_cols = 28, 28","5f0de1e3":"# loading the training dataset\ntrain = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")","fb1e545c":"# the data\nx_train = (train.iloc[:,1:].values).astype('float32') # all pixel values\ny_train = train.iloc[:,0].values.astype('int32') # only labels i.e targets digits\nx_test = test.values.astype('float32') # this is not a validation set. We don't have labels for this!","0a75fb74":"# preview the images\nplt.figure(figsize=(12,10))\nplot_cols, plot_rows = 10, 4\nfor i in range(40):\n    plt.subplot(plot_rows, plot_cols, i+1)\n    plt.imshow(x_train[i+50, :].reshape((28,28)),interpolation='nearest')\nplt.show()","200058bb":"# Pixel values are from range 0 - 255. We must normalize to 0-1 (this is super important)!\nx_train = x_train \/ 255.0\nx_test = x_test \/ 255.0","d63e75da":"# Different Keras backends can have different index ordering!\nif K.image_data_format() == 'channels_first':\n    # array indexing is x_train[image_index, color, y, x]\n    x_train = x_train.reshape(x_train.shape[0], 1, img_rows, img_cols)\n    x_test = x_test.reshape(x_test.shape[0], 1, img_rows, img_cols)\n    input_shape = (1, img_rows, img_cols)\nelse:\n    # array indexing is x_train[image_index, y, x, color]\n    x_train = x_train.reshape(x_train.shape[0], img_rows, img_cols, 1)\n    x_test = x_test.reshape(x_test.shape[0], img_rows, img_cols, 1)\n    input_shape = (img_rows, img_cols, 1)\n\nprint('x_train shape:', x_train.shape)\nprint(x_train.shape[0], 'train samples')\nprint(x_test.shape[0], 'test samples')","c093d269":"# convert class vectors to binary class matrices \n# this means that: (2 -> [0,0,1,0,0,0,0,0,0,0])\n# in other words: we want network to put probability 100% (value 1.0) on index associated with number 2\ny_train_matrix = keras.utils.to_categorical(y_train, num_classes)\ny_train_matrix[0, :]","6f305b25":"# split to train and validation set (remember, x_test is not validation set, but Kaggle test dataset without labels!)\nfrom sklearn.model_selection import train_test_split\nX_train, X_val, Y_train, Y_val = train_test_split(x_train, y_train_matrix, test_size = 0.1, random_state=42)\nprint(X_train.shape, X_val.shape)","91b8526f":"model = Sequential()\n\n# https:\/\/keras.io\/layers\/core\/\nmodel.add(TODO ADD LAYERS (please use even number of neurons!))\n\n# https:\/\/keras.io\/losses\/\n# https:\/\/keras.io\/optimizers\/\nmodel.compile(loss='TODO_CHOOSE_LOSS',\n              optimizer=TODO_CHOOSE_OPTIMIZER,\n              metrics=['accuracy'])\n\nmodel.summary()","d937479c":"model.fit(X_train, Y_train,\n          batch_size=batch_size,\n          epochs=epochs,\n          verbose=1,\n          validation_data=(X_val, Y_val))\n\nscore = model.evaluate(X_val, Y_val, verbose=0)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","527274b5":"# show N-th layer neuron weights (this is going to be nice espeically for network without hidden layer!)\nLAYER_INDEX = 1\nweights = model.get_layer(name=Dense, index=LAYER_INDEX).get_weights()\n\nx, y = 6, int(weights[0].shape[1] \/ 6)\nfor i in range(weights[0].shape[1]):  \n    plt.subplot(y, x, i+1)\n    plt.imshow(weights[0][:,i].reshape(28,28))\nplt.show()\n","53ce6421":"## Kaggle stuff\n\n#get the predictions for the test data\npredicted_classes = model.predict_classes(x_test)\n\n# create submission file\nsubmissions=pd.DataFrame({\"ImageId\": list(range(1,len(predicted_classes)+1)),\n                         \"Label\": predicted_classes})\n# save results\nsubmissions.to_csv(\"submission.csv\", index=False, header=True)\n\n# save network\nmodel.save('my_awesome_model.h5')\njson_string = model.to_json()","f05d7c7d":"### Difference between batch & epoch\n![Batch vs Epoch](https:\/\/i.imgur.com\/Zsb38ZL.png)\nRead more at [StackOverflow - Epoch vs Iteration when training neural networks](https:\/\/stackoverflow.com\/a\/31842945)"}}