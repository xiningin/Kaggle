{"cell_type":{"48ee080c":"code","a54d72f7":"code","05f70088":"code","7fae1dd0":"code","03a263b9":"code","ccf599e7":"code","2ccebd80":"code","f89a2deb":"code","e940f66d":"code","f2d7012a":"code","50f48b46":"code","3d8e9627":"code","8a4cccc3":"code","20fe3fdc":"code","34ad1fc5":"code","22bf393d":"code","3db68dbf":"code","6a9119b0":"code","f44809f1":"code","76e3a1e0":"code","7e403f3f":"code","30afe5a2":"code","ae92df50":"code","052e02f0":"code","128f2138":"code","a1dd4295":"code","4293d622":"code","b6343716":"code","63a71d68":"code","fa66143d":"code","800ed2e4":"code","d9c6a2c8":"code","3cf9b631":"code","f6be1e62":"code","9941ee92":"code","a7f950cb":"code","e06b5b56":"code","62b6d437":"code","c721a7f6":"code","ae10a36a":"code","750c589f":"code","29067eeb":"code","378abf92":"code","b0a43f8a":"code","5d04c87e":"code","444e5c53":"code","a638cb80":"code","faff0f3e":"code","4429746d":"code","651aedcb":"code","f669187c":"code","5067f11b":"code","d02e5d71":"code","f8c03889":"code","b1aef454":"code","df68c26f":"code","eafcb725":"code","cfa587e5":"code","a7b6ceb8":"code","55764364":"code","acf8c4b2":"code","d87f1188":"code","01242114":"code","a48eaa40":"code","ca71c6fc":"code","c5dc1d19":"code","d3e9c5ac":"code","4bee0748":"code","f6920568":"code","943bb09c":"code","623c5a2f":"code","f32e3578":"code","858f124e":"code","0a71b015":"code","5a801e52":"code","52be138a":"code","76530f14":"code","81f70fac":"markdown","beeb4bd5":"markdown","160b9fd3":"markdown","4beec806":"markdown","eb6940be":"markdown","25072f0b":"markdown","a368b8a8":"markdown","bc66844b":"markdown","6eb79948":"markdown","ed86b3da":"markdown","04827006":"markdown","bf6bf715":"markdown","2869e34a":"markdown","30f0cec0":"markdown","ab3ae459":"markdown","efb280a3":"markdown","6f85778a":"markdown","1d33d6d1":"markdown","79e1d1b8":"markdown","828c0f88":"markdown","f079488a":"markdown","ade40bba":"markdown","863e67dc":"markdown","1f01cbdb":"markdown","92d29d95":"markdown","e5b0a421":"markdown","8d5734b3":"markdown","8c6d6273":"markdown","c1fbe7d3":"markdown","5d3b0703":"markdown","24f373a0":"markdown","2df3c738":"markdown","6e9fea64":"markdown","2ca56199":"markdown","40d01bca":"markdown","e86ebab6":"markdown","6b1c890e":"markdown","988a7005":"markdown","af4a9ec0":"markdown","06144e25":"markdown","181c53ed":"markdown","ac595956":"markdown","aa97f3c5":"markdown","91fc39b0":"markdown","260e7569":"markdown","918499ab":"markdown","aaf699e5":"markdown","42d0035a":"markdown","557e61f5":"markdown","0b401052":"markdown","bf08a4ab":"markdown","e3ed36bf":"markdown","a08e1c20":"markdown","99e10d4b":"markdown","af055249":"markdown","2adc66f1":"markdown","d1cefcb1":"markdown","814280e7":"markdown","8c462927":"markdown","0efaf972":"markdown","fd7fe3eb":"markdown","f8cfc8d9":"markdown","2dbc86a4":"markdown","1618d30d":"markdown","f0309382":"markdown","a4bed918":"markdown","5a9cbc09":"markdown","5cc7ca00":"markdown","83d33203":"markdown","b276ed87":"markdown","f4b4e86a":"markdown","36ed9722":"markdown","8bcdd748":"markdown","34221ada":"markdown","67a09849":"markdown","82d009f5":"markdown","c43d1993":"markdown"},"source":{"48ee080c":"import numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt","a54d72f7":"df = pd.read_csv(\"..\/input\/dataisbeautiful\/r_dataisbeautiful_posts.csv\")","05f70088":"df.head()","7fae1dd0":"df.info()","03a263b9":"df.iloc[:,5].value_counts()","ccf599e7":"df.iloc[:,7].value_counts()","2ccebd80":"df['id'].nunique()","f89a2deb":"df = pd.read_csv(\"..\/input\/dataisbeautiful\/r_dataisbeautiful_posts.csv\", \n                 usecols=[1,2,3,4,5,6,8,9,10,11],\n                 dtype={5:object})","e940f66d":"df.head()","f2d7012a":"df.info()","50f48b46":"df.over_18.replace(True,1,inplace = True)\ndf.over_18.replace(False,0,inplace = True)\ndf.over_18.value_counts()","3d8e9627":"df.isna().sum()","8a4cccc3":"df.total_awards_received.fillna(0, inplace = True)\n\n# \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c\ndf.isna().sum()","20fe3fdc":"df[df['title'].isna()]","34ad1fc5":"pd.set_option('display.max_colwidth', None)\ndf[df['title'].isna()]['full_link']","22bf393d":"# \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0443\u0441\u0442\u043e\u0439 title \u043f\u0443\u0441\u0442\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u043e\u0439, \u0447\u0442\u043e \u0431\u044b \u0431\u044b\u043b\u0430 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432 WordCloud\ndf.title.fillna(\" \",inplace = True)","3db68dbf":"print('author_flair_text is NaN: \\n', df[df['author_flair_text'].isna()]['full_link'].head(), \"\\n\")\nprint('removed_by is NaN: \\n', df[df['removed_by'].isna()]['full_link'].head(), \"\\n\")\nprint('author_flair_text is NaN: \\n', df[df['total_awards_received'].isna()]['full_link'].head(), \"\\n\")\nprint('author_flair_text is NaN and score >10 000: \\n', df[df['total_awards_received'].isna() & (df['score'] > 10000)]['full_link'].head())","6a9119b0":"df = df.drop(['full_link'], axis = 1)\ndf = df.drop(['created_utc'], axis = 1)\ndf.head()","f44809f1":"df['text'] = df['title'] + ' ' + df['author']","76e3a1e0":"df['author_encoded'] = df['author']\n\n# \u043f\u0435\u0440\u0435\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c NaN \u0432 \u0441\u0442\u0440\u043e\u043a\u0443 \"not available\" (object type) (\u0438\u043d\u0430\u0447\u0435 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0449\u0438\u043a \u043e\u0442\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 NaN)\ndf.author_flair_text.fillna(\"not available\",inplace = True)\ndf.removed_by.fillna(\"not available\",inplace = True)\ndf_to_encode = df[['author_encoded', 'author_flair_text', 'removed_by']]\ndf_to_encode.head()","7e403f3f":"# \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445\nfrom sklearn import preprocessing\n\n# \u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 DataFrame, \u043a\u043e\u0434\u0438\u0440\u0443\u0435\u0442 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n# \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0439 DataFrame \u0438 \u0441\u0430\u043c\u0438 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0449\u0438\u043a\u0438.\ndef number_encode_features(init_df):\n    result = init_df.copy() # \u043a\u043e\u043f\u0438\u0440\u0443\u0435\u043c \u043d\u0430\u0448\u0443 \u0438\u0441\u0445\u043e\u0434\u043d\u0443\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u0443\n    encoders = {}\n    for column in result.columns:\n        if result.dtypes[column] == np.object: # np.object -- \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0439 \u0442\u0438\u043f \/ \u0435\u0441\u043b\u0438 \u0442\u0438\u043f \u0441\u0442\u043e\u043b\u0431\u0446\u0430 - \u0441\u0442\u0440\u043e\u043a\u0430, \u0442\u043e \u043d\u0443\u0436\u043d\u043e \u0435\u0433\u043e \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u0442\u044c\n            encoders[column] = preprocessing.LabelEncoder() # \u0434\u043b\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0438 column \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0449\u0438\u043a\n            result[column] = encoders[column].fit_transform(result[column]) # \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0449\u0438\u043a \u043a \u0441\u0442\u043e\u043b\u0431\u0446\u0443 \u0438 \u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446\n    return result, encoders\n\ndf_encoded, encoders = number_encode_features(df_to_encode) # \u0422\u0435\u043f\u0435\u0440\u044c encoded data \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043a\u0430\u0442. \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \nencoders","30afe5a2":"df_encoded.head()","ae92df50":"df = df.drop(['author_encoded', 'author_flair_text', 'removed_by'], axis = 1).join(df_encoded)\ndf.head()","052e02f0":"# \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\nprint(df.groupby('over_18')['over_18'].count())\n\n# \u043f\u0440\u043e\u0446\u0435\u043d\u0442 over_18\nover_18_count = df[df['over_18'] == 1]['over_18'].count()\ntotal = df['over_18'].count()\nover_18_share = over_18_count\/total\nprint(\"\u0414\u043e\u043b\u044f \u0434\u0430\u043d\u043d\u044b\u0445, \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u0445 \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u0433\u0440\u0443\u043f\u043f\u0443 \\\"over_18\\\" {0:.4f}\".format(over_18_share))\n\n# \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0430\ndf[df['over_18'] == 0]['over_18'].astype(int).hist(label='False', grid = False, bins=1, rwidth=0.8)\ndf[df['over_18'] == 1]['over_18'].astype(int).hist(label='True', grid = False, bins=1, rwidth=0.8)\nplt.xticks((0,1),('False', 'True'))\nplt.show()","128f2138":"df.hist(figsize=(15,12), bins=20)","a1dd4295":"import seaborn as sns\nplt.figure(figsize=(8, 6))\nspearman = df.corr(method = 'spearman')\nsns.heatmap(spearman, annot = True)","4293d622":"# np.argwhere \u0432\u0435\u0440\u043d\u0435\u0442 \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u0442\u0435\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 y (\u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439), \u0433\u0434\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 0\nnot_over_18 = df['over_18'].astype(int).to_numpy()\nnot_over_18_ids = np.argwhere(not_over_18 == 0).flatten()\nprint('\u0412\u0441\u0435\u0433\u043e over_18 = False: ', len(not_over_18_ids))\nnot_over_18_ids","b6343716":"# \u041f\u0435\u0440\u0435\u043c\u0435\u0448\u0430\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u0441 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u043c random state (\u0447\u0442\u043e\u0431 \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u0443 \u043d\u0430\u0441 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u043b\u0438 \u0432\u044b\u0431\u043e\u0440\u043a\u0438) \u0432\u044b\u0431\u0435\u0440\u0435\u043c \u0432 \u043d\u0435\u043c \"\u043b\u0438\u0448\u043d\u0438\u0435\" id \u0442\u0435\u0445, \u043a\u0442\u043e not over_18 (\u043a\u0442\u043e \u043f\u043e\u0440\u0442\u0438\u0442 \u043d\u0430\u043c \u043f\u0440\u043e\u0433\u043d\u043e\u0437 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430). \n# \u041a\u043e\u043b-\u0432\u043e \"\u043b\u0438\u0448\u043d\u0438\u0445\" = \u043a\u043e\u043b-\u0432\u043e \u043e\u0441\u0442\u0430\u0432\u0448\u0438\u0445\u0441\u044f - \u043a\u043e\u043b-\u0432\u043e over_18.\nfrom sklearn.utils import shuffle\n\nnot_over_18_ids = shuffle(not_over_18_ids, random_state = 42)\n# \u043d\u0430\u0439\u0434\u0435\u043c \"\u043b\u0438\u0448\u043d\u0438\u0445\", \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043e\u0431\u0440\u0435\u0436\u0435\u043c \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0435 id \u043d\u0430 \u043a\u043e\u043b-\u0432\u043e over_18 (\u0432\u043d\u0443\u0442\u0440\u0438 len)\nnot_over_18_ids = not_over_18_ids[len(np.argwhere(not_over_18 == 1).flatten()):]\nprint(len(not_over_18_ids))\n# \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u043c \u043a\u043e\u043b-\u0432\u043e \u0438 \u0441\u0430\u043c\u0438 id, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u044b\u043a\u0438\u043d\u0443\u0442\u044c\nnot_over_18_ids","63a71d68":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b \u043b\u0438 \u043a\u043b\u0430\u0441\u0441\u044b\n# \u043f\u043e \u0438\u0434\u0435\u0435 (\u043e\u0441\u0442\u0430\u0432\u0448\u0438\u0435\u0441\u044f) - (\"\u043b\u0438\u0448\u043d\u0438\u0435\") = (over_18)\nlen(np.argwhere(not_over_18 == 0).flatten()) - len(not_over_18_ids) == len(np.argwhere(not_over_18 == 1).flatten())","fa66143d":"# \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u043d\u0430 X \u0438 y\n\nX = df.drop(['over_18'],axis = 1)\ny = df['over_18']\n\nX.shape, y.shape","800ed2e4":"# \u0432\u044b\u0431\u0440\u0430\u0441\u044b\u0432\u0430\u0435\u043c \u043b\u0438\u0448\u043d\u0438\u0445 \u043f\u043e \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u043c\nX = X.drop(X.index[not_over_18_ids])\ny = y.drop(y.index[not_over_18_ids])\n\n# \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u043c \u0438\u0442\u043e\u0433\u043e\u0432\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\nX.shape, y.shape","d9c6a2c8":"# \u0422\u0435\u043f\u0435\u0440\u044c \u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u043a\u043b\u0430\u0441\u0441\u044b \u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u044b.\ny.value_counts()","3cf9b631":"from sklearn.preprocessing import OneHotEncoder\n\n# \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\ncat_cols = ['author_encoded', 'author_flair_text', 'removed_by']\n\n# \u041a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\nohe_df = pd.DataFrame(index=X.index)\nohe = OneHotEncoder(handle_unknown='ignore')\n\nfor col in cat_cols:\n    ohe.fit(X[[col]])\n    ohe_result = pd.DataFrame(ohe.transform(X[[col]]).toarray(),\n                              columns=ohe.get_feature_names(input_features=[col]),\n                              index=X.index)\n    ohe_df = ohe_df.join(ohe_result)\n\nohe_df.head()","f6be1e62":"from sklearn.preprocessing import StandardScaler\n\nnum_cols = ['score', 'total_awards_received', 'num_comments']\nstd_df = pd.DataFrame(index=X.index)\nscaler = StandardScaler()\n\nfor col in num_cols:\n    scaler.fit(X[[col]])\n    std_result = pd.DataFrame(scaler.transform(X[[col]]),\n                              columns=[col],\n                              index=X.index)\n    std_df = std_df.join(std_result)\n\nstd_df.head()","9941ee92":"cols_to_drop = ['author_encoded', 'author_flair_text', 'removed_by', 'score', 'total_awards_received', 'num_comments']\nX_prepared = X.drop(cols_to_drop, axis=1).join(std_df).join(ohe_df)\nX = X_prepared\nX.head()","a7f950cb":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3,random_state = 42)","e06b5b56":"# title \u0434\u043b\u044f X train, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 over_18 = true\ntrain_true_title = X_train.loc[y_train[y_train == 1].index,:]['title']\n\n# author \u0434\u043b\u044f X train, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 over_18 = true\ntrain_true_author = X_train.loc[y_train[y_train == 1].index,:]['title']\n\n# text \u0434\u043b\u044f X train, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 over_18 = true\ntrain_true_text = X_train.loc[y_train[y_train == 1].index,:]['text']","62b6d437":"from wordcloud import WordCloud,STOPWORDS\n\ndef wordcloud_img(data):\n    plt.figure(figsize = (20,20))\n    wc = WordCloud(min_font_size = 3, \n                   background_color=\"white\",  \n                   max_words = 3000, \n                   width = 1000, \n                   height = 600, \n                   stopwords = STOPWORDS).generate(str(\" \".join(data)))\n    plt.imshow(wc,interpolation = 'bilinear')","c721a7f6":"wordcloud_img(train_true_title)","ae10a36a":"wordcloud_img(train_true_author)","750c589f":"def top10words(data):\n    wc = WordCloud(min_font_size = 3,  \n                   max_words = 3000 , \n                   width = 1000 , \n                   height = 600 , \n                   stopwords = STOPWORDS).generate(str(\" \".join(data)))\n    text_true = wc.process_text(str(\" \".join(data)))\n    print('10 \u0441\u043b\u043e\u0432 \\n', list(text_true.keys())[:10])\n    print('\u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043b\u043e\u0432: ', len(text_true.keys()), '\\n')\n\n# \u043f\u043e\u043b\u0435 title\nprint(top10words(train_true_title))\n# \u043f\u043e\u043b\u0435 author\nprint(top10words(train_true_author))","29067eeb":"wc = WordCloud(min_font_size = 3,  \n                   max_words = 3000, \n                   width = 1600, \n                   height = 800, \n                   stopwords = STOPWORDS).generate(str(\" \".join(train_true_text)))\ntrain_dictionary = wc.process_text(str(\" \".join(train_true_text)))\n# \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043b\u043e\u0432 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435\nn_of_words = len(train_dictionary.keys())\n\nprint('10 \u0441\u043b\u043e\u0432 \\n', list(train_dictionary.keys())[:10])\nprint('\u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043b\u043e\u0432: ', n_of_words)","378abf92":"# \u0421\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u043f\u043e \u0447\u0430\u0441\u0442\u043e\u0442\u0435 \u0443\u043f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u044f\ntrain_dictionary_sorted = sorted(train_dictionary.items(), key = lambda word:(word[1], word[0]))\n# \u0422\u043e\u043f 20% \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0443\u043f\u043e\u0442\u0440\u0435\u0431\u043b\u044f\u0435\u043c\u044b\u0445 \u0441\u043b\u043e\u0432 \u0432 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\u0445 over_18\ntrain_top_words = train_dictionary_sorted[round(n_of_words*0.8):]\n\n# \u0441\u043b\u043e\u0432\u0430-\u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f\nexclusion_words =['data', 'year', 'month', 'week', 'day', 'post', 'every', 'average', 'word', 'the world', \n                  'years of', 'new', 'graph', 'US', 'time', 'result', 'by state', 'UK', 'tags', 'countries', \n                  \"I've\", 'comment', 'last year', 'Chart', 'Countries', 'State', 'Map of', 'We', 'analysis of']\n\n# \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0442\u043e\u043f 20% \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0443\u043f\u043e\u0442\u0440\u0435\u0431\u043b\u044f\u0435\u043c\u044b\u0445 \u0441\u043b\u043e\u0432 \u0432 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 over_18\nans_true = []\nfor i in train_top_words:\n    # \u0438\u0441\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 \u0438\u0437 \u0441\u043b\u043e\u0432\u0430\u0440\u044f\n    if i[0] in exclusion_words: continue\n    ans_true.append(i[0])\n\n# \u0422\u043e\u043f 20% \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0443\u043f\u043e\u0442\u0440\u0435\u0431\u043b\u044f\u0435\u043c\u044b\u0445 \u0441\u043b\u043e\u0432 \u0432 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 over_18\nans_true[len(ans_true)-20:]","b0a43f8a":"predictions = []\nfor i in X_test['text']:\n    x = i.split()\n    for j in x:\n        if j in ans_true:\n            predictions.append(1)\n            break\n        else:\n            predictions.append(0)\n            break\nlen(predictions)","5d04c87e":"len(y_test)","444e5c53":"count = 0\nfor i in range(len(predictions)):\n    y_test = list(y_test)\n    if(predictions[i] == int(y_test[i])):\n        count += 1\nprint(count)","a638cb80":"accuracy = (count\/len(predictions))*100\nprint('Accuracy \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c Word Cloud \u0438 \u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u0440\u0430\u0432\u043d\u0430', np.round(accuracy, 2))","faff0f3e":"import nltk\nfrom nltk.corpus import stopwords\nimport string\n\nstop = set(stopwords.words('english'))\npunctuation = list(string.punctuation)\nstop.update(punctuation)","4429746d":"# \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u043b\u0430\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 (ADJ), \u0433\u043b\u0430\u0433\u043e\u043b\u043e\u0432 (VERB), \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 (NOUN) \u0438 \u043d\u0430\u0440\u0435\u0447\u0438\u0439 (ADV)\nfrom nltk.corpus import wordnet as wn\n\ndef get_simple_pos(tag):\n    if tag.startswith('J'):\n        return wn.ADJ\n    elif tag.startswith('V'):\n        return wn.VERB\n    elif tag.startswith('N'):\n        return wn.NOUN\n    elif tag.startswith('R'):\n        return wn.ADV\n    else:\n        return wn.NOUN\n\n# \u041b\u0435\u043c\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u044f \nfrom nltk.stem import WordNetLemmatizer\nfrom nltk import pos_tag\n\n# (\u043e\u0442\u0431\u0440\u0430\u0441\u044b\u0432\u0430\u0435\u043c \u0432\u0441\u0451 \u043b\u0438\u0448\u043d\u0435\u0435 \u0432 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0438, \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u043c \u0441\u043b\u043e\u0432\u0430 \u043a \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0444\u043e\u0440\u043c\u0435\u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0438\u0445 \u0441\u043f\u0438\u0441\u043e\u043a)\n# 'Once upone a time a man walked into a door' -> ['upone', 'time', 'man', 'walk', 'door']\nlemmatizer = WordNetLemmatizer()\ndef lemmatize_words(text):\n    final_text = []\n    for i in text.split():\n        if i.strip().lower() not in stop:\n            pos = pos_tag([i.strip()])\n            word = lemmatizer.lemmatize(i.strip(),get_simple_pos(pos[0][1]))\n            final_text.append(word.lower())\n    return final_text   \n\n# \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u043b\u0435\u043c\u043c\u0430\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0432 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0435\n# ['upone', 'time', 'man', 'walk', 'door'] -> 'upone time man walk door '\ndef join_text(text):\n    string = ''\n    for i in text:\n        string += i.strip() +' '\n    return string  ","651aedcb":"X_train['text_lemma'] = X_train['text'].apply(lemmatize_words).apply(join_text)\nX_test['text_lemma'] = X_test['text'].apply(lemmatize_words).apply(join_text)","f669187c":"X_train[['text', 'text_lemma']].head()","5067f11b":"from sklearn.feature_extraction.text import TfidfVectorizer\n\n# \u041f\u0440\u0438\u0441\u0432\u043e\u0435\u043d\u0438\u0435 \u0432\u0435\u0441\u043e\u0432 \u0441\u043b\u043e\u0432\u0430\u043c \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c TfidfVectorizer\ntv = TfidfVectorizer(min_df=0,max_df=1,use_idf=True,ngram_range=(1,2))\ntv_X_train = tv.fit_transform(X_train['text_lemma'])\ntv_X_test = tv.transform(X_test['text_lemma'])\n\nprint('TfidfVectorizer_train:', tv_X_train.shape)\nprint('TfidfVectorizer_test:', tv_X_test.shape)\n","d02e5d71":"# \u0441\u0431\u0440\u043e\u0441\u0438\u043c \u043f\u043e\u043b\u044f,\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u044b \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435 \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c (\u043c\u044b \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043b\u0438 \u0438\u0445 \u0432 \u0434\u0440\u0443\u0433\u0438\u0435 \u0444\u043e\u0440\u043c\u044b)\ncols_to_drop = ['title', 'author', 'text','text_lemma']\n\nX_train_dropped = X_train.drop(cols_to_drop, axis=1)\nX_test_dropped = X_test.drop(cols_to_drop, axis=1)","f8c03889":"# \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 tv_X_train\/test\nscaler_tv = StandardScaler()\ntv_X_train_scaled = scaler_tv.fit_transform(tv_X_train.toarray())\ntv_X_test_scaled = scaler_tv.transform(tv_X_test.toarray())\n\n# \u0442\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c tv_X_train\/test sparse numpy \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u0432 pandas Data Frame\ntv_X_train_pd_scaled = pd.DataFrame(data=tv_X_train_scaled, \n                             index=X_train.index, \n                             columns=np.arange(0, np.size(tv_X_train_scaled,1)))\ntv_X_test_pd_scaled = pd.DataFrame(data=tv_X_test_scaled, \n                             index=X_test.index, \n                             columns=np.arange(0, np.size(tv_X_test_scaled,1)))","b1aef454":"# \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0440\u0430\u043d\u0435\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0441 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u043c\u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c\u0438\nX_train = X_train_dropped.join(tv_X_train_pd_scaled)\nX_test = X_test_dropped.join(tv_X_test_pd_scaled)\n\n# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\nX_train","df68c26f":"from sklearn.linear_model import LogisticRegression\n\nlr = LogisticRegression(penalty='l2', max_iter=500, C=1, random_state=42)\n\n# \u0434\u043b\u044f Tf-idf\nlr_tfidf=lr.fit(tv_X_train, y_train)\nprint(lr_tfidf)","eafcb725":"# \u0434\u043b\u044f Tf-idf\nlr_tfidf_predict=lr.predict(tv_X_test)","cfa587e5":"from sklearn.metrics import accuracy_score\n\n# \u0434\u043b\u044f Tf-idf\nlr_tfidf_score=accuracy_score(y_test,lr_tfidf_predict)\nprint(\"lr_tfidf_score :\",lr_tfidf_score)","a7b6ceb8":"from sklearn.metrics import classification_report\n\n# \u0434\u043b\u044f Tf-idf\nlr_tfidf_report=classification_report(y_test,lr_tfidf_predict,target_names=['0','1'])\nprint(lr_tfidf_report)","55764364":"from sklearn.metrics import confusion_matrix, plot_confusion_matrix\n\n# \u0434\u043b\u044f Tf-idf\nplot_confusion_matrix(lr_tfidf, tv_X_test, y_test,display_labels=['0','1'],cmap=\"Blues\",values_format = '')","acf8c4b2":"from sklearn.metrics import r2_score\nr2 = r2_score(y_test, lr_tfidf_predict)\nprint (f\"R2 score \/ LR = {r2}\")","d87f1188":"from sklearn.metrics import mean_absolute_error\nmeanae = mean_absolute_error(y_test, lr_tfidf_predict)\nprint (\"MAE (Mean Absolute Error) {0}\".format(meanae))","01242114":"from sklearn.linear_model import LogisticRegression\n\nlr = LogisticRegression(penalty='l2', max_iter=500, C=1, random_state=42)\n\nlr_all=lr.fit(X_train, y_train)\nprint(lr_all)","a48eaa40":"lr_all_predict=lr.predict(X_test)","ca71c6fc":"from sklearn.metrics import accuracy_score\n\nlr_all_score=accuracy_score(y_test,lr_all_predict)\nprint(\"lr_all_score :\",lr_all_score)","c5dc1d19":"from sklearn.metrics import classification_report\n\nlr_all_report=classification_report(y_test,lr_all_predict,target_names=['0','1'])\nprint(lr_all_report)","d3e9c5ac":"from sklearn.metrics import confusion_matrix, plot_confusion_matrix\n\nplot_confusion_matrix(lr_all, X_test, y_test, display_labels=['0','1'], cmap=\"Blues\", values_format = '')","4bee0748":"from sklearn.metrics import r2_score\n\nr2 = r2_score(y_test, lr_all_predict)\nprint (f\"R2 score \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \/ LR = {r2}\")","f6920568":"from sklearn.metrics import mean_absolute_error\nmeanae = mean_absolute_error(y_test, lr_all_predict)\nprint (\"MAE (Mean Absolute Error) \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 {0}\".format(meanae))","943bb09c":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import GridSearchCV\n\nknn = KNeighborsClassifier()\n\n# \u0417\u0430\u0434\u0430\u0434\u0438\u043c \u0441\u0435\u0442\u043a\u0443 - \u0441\u0440\u0435\u0434\u0438 \u043a\u0430\u043a\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432\u044b\u0431\u0438\u0440\u0430\u0442\u044c \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440.\nknn_grid = {'n_neighbors': np.array(np.linspace(1, 30, 3), dtype='int')} # \u043f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043c \u043f\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0443 <<n_neighbors>>, \u043f\u043e \u0441\u0435\u0442\u043a\u0435 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0439 np.linspace\n\n# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438\ngs = GridSearchCV(knn, knn_grid, cv=3)\n\n# \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u0435\u0433\u043e\ngs.fit(X_train, y_train)","623c5a2f":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u0442\u0440\u0438\u0441\u043e\u0432\u043a\u0438 \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432\ndef grid_plot(x, y, x_label, title, y_label):\n    plt.figure(figsize=(12, 6))\n    plt.grid(True)\n    plt.plot(x, y, 'go-')\n    plt.xlabel(x_label)\n    plt.ylabel(y_label)\n    plt.title(title)","f32e3578":"grid_plot(knn_grid['n_neighbors'], gs.cv_results_['mean_test_score'], 'n_neighbors', 'KNeighborsClassifier', 'accuracy')","858f124e":"gs.best_params_, gs.best_score_","0a71b015":"clf_knn = KNeighborsClassifier(n_neighbors=15)","5a801e52":"# \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f\nclf_knn.fit(X_train, y_train)\ny_knn = clf_knn.predict(X_test)","52be138a":"print(classification_report(y_test, y_knn))","76530f14":"plot_confusion_matrix(lr_all, X_test, y_test, display_labels=['0','1'], cmap=\"Blues\", values_format = '')","81f70fac":"\u0414\u0430\u043d\u043d\u044b\u0435 \u0441\u0438\u043b\u044c\u043d\u043e \u043d\u0435 \u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\n\n\u0415\u0441\u043b\u0438 \u0432\u0441\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\u043c \u043f\u0440\u0438\u0441\u0432\u043e\u0438\u0442\u044c 0 (\u0442.\u0435. \u0432\u0441\u0435\u043c \u043f\u0440\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c over_18 = False), \u0442\u043e **Accuracy \u0442\u0430\u043a\u043e\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0431\u0443\u0434\u0435\u0442 99.487%**, \u0445\u043e\u0442\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c over_18 = 1 \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u043a\u043e\u043d\u0435\u0447\u043d\u043e \u0436\u0435","beeb4bd5":"### \u041a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445","160b9fd3":"### Accuracy","4beec806":"\u0441\u0442\u0440\u043e\u043a\u0438 \u0441 \u043f\u0443\u0441\u0442\u044b\u043c title","eb6940be":"### Confusion matrix","25072f0b":"\u0441\u0440\u0430\u0432\u043d\u0438\u043c \u0441 \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438","a368b8a8":"\u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043b\u0435\u043c\u043c\u0430\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0439","bc66844b":"10 \u0441\u043b\u043e\u0432 \u0434\u043b\u044f \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430 over_18","6eb79948":"### Classification report","ed86b3da":"### R^2","04827006":"# \u0422\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432","bf6bf715":"# \u0423\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441 \u0447\u0430\u0441\u0442\u043e\u0442\u043e\u0439 \u0441\u043b\u043e\u0432","2869e34a":"\u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 title \u0438\u0437 url","30f0cec0":"# \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u043d\u0430 train \u0438 test","ab3ae459":"#  \u041f\u0440\u0438\u0441\u0432\u043e\u0435\u043d\u0438\u0435 \u0432\u0435\u0441\u0430 \u0441\u043b\u043e\u0432\u0430\u043c \u043f\u043e\u0441\u043b\u0435 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u0441 \u0447\u0430\u0441\u0442\u043e\u0442\u043e\u0439","efb280a3":"memory usage \u0441\u043e\u043a\u0440\u0430\u0442\u0438\u043b\u043e\u0441\u044c \u043d\u0430 18% \u0441 15.6\u041c\u0431 \u0434\u043e 12.8\u041c\u0431","6f85778a":"## 2. \u0422\u0440\u0435\u043d\u0438\u0440\u0443\u0435\u043c \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044e \u043d\u0430 <u>\u0432\u0441\u0435\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445<\/u>","1d33d6d1":"### Accuracy","79e1d1b8":"\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438 \u0438\u0441\u0445\u043e\u0434\u043d\u0443\u044e \u0431\u0430\u0437\u0443 \u0441 \u043d\u0443\u0436\u043d\u044b\u043c\u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c\u0438 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430","828c0f88":"# \u041b\u0438\u043d\u0435\u0439\u043d\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0447\u0430\u0441\u0442\u043e\u0442\u044b \u0441\u043b\u043e\u0432","f079488a":"\u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 c\u0442\u043e\u043b\u0431\u0446\u0430\u0445","ade40bba":"### Confusion matrix","863e67dc":"\u0417\u0430\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u0432\u0441\u0435 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u0437\u0430 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\u043c title, author \u0438 text (\u043c\u044b \u0438\u0445 \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u0434\u043b\u044f \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430),\u0434\u043b\u044f author \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0443\u044e \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0443\u044e \u043a\u043e\u043b\u043e\u043d\u043a\u0443 author_encoded","1f01cbdb":"\u041e\u0447\u0435\u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u043d\u0430\u0434\u043e \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c \u044d\u0442\u0438 2 \u043f\u043e\u043b\u044f (title \u0438 author \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u043e \u0432 \u043f\u043e\u043b\u0435 text) \u0434\u043b\u044f \u0431\u043e\u043b\u0435\u0435 \u0442\u043e\u0447\u043d\u043e\u0439 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u0447\u0430\u0441\u0442\u043e\u0442\u043d\u043e\u0441\u0442\u0438, \u0442.\u043a. \u0432 \u043f\u043e\u043b\u0435 author \u0442\u0430\u043a\u0436\u0435 \u0435\u0441\u0442\u044c \u043a\u043e\u043c\u043f\u0440\u043e\u043c\u0435\u0442\u0438\u0440\u0443\u044e\u0449\u0438\u0435 \u0441\u043b\u043e\u0432\u0430","92d29d95":"\u041e\u0447\u0435\u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0442\u0438\u043f \u044d\u0442\u043e\u0433\u043e \u043f\u043e\u043b\u044f ([5]) - object","e5b0a421":"# 3. \u0422\u0440\u0435\u043d\u0438\u0440\u0443\u0435\u043c KNN \u043d\u0430 \u0432\u0441\u0435\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445","8d5734b3":"### R^2","8c6d6273":"### \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0432\u044b\u0431\u043e\u0440\u043e\u043a (OneHoteEncoding, Standard Scaler \u0438 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445)","c1fbe7d3":"### One Hot Encoding \u0434\u043b\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445","5d3b0703":"# \u0411\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0430 \u0432\u044b\u0431\u043e\u0440\u043a\u0438","24f373a0":"### \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445","2df3c738":"\u041f\u043e\u0441\u043c\u0442\u0440\u043e\u0438\u043c \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439","6e9fea64":"\u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c title \u0438\u0437 \u0441\u0441\u044b\u043b\u043a\u0438 \u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f, \u0442.\u043a. \u0432 \u043a\u043e\u043d\u0446\u0435 url \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0442\u0430\u043a\u0436\u0435 \u0441\u0442\u043e\u0438\u0442 Null","2ca56199":"\u041f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u043c \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0443 \u0444\u0430\u0439\u043b\u0430 \u0442\u0430\u043a,\u0447\u0442\u043e \u0431\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u043e\u0441\u044c \u043c\u0435\u043d\u044c\u0448\u0435 \u043f\u0430\u043c\u044f\u0442\u0438 \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043f\u0440\u043e\u0448\u043b\u0430 \u0431\u0435\u0437 warning\n\u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u043d\u0435 \u043d\u0443\u0436\u043d\u044b\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 7 (\u0447\u0442\u043e \u0431\u044b \u043b\u0438\u0448\u043d\u0438\u0439 \u0440\u0430\u0437 \u043d\u0435 \u0441\u0431\u0440\u0430\u0441\u044b\u0432\u0430\u0442\u044c \u0435\u0433\u043e \u043f\u043e\u0437\u0436\u0435) \u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0442\u0438\u043f \u0434\u043b\u044f \u0441\u0442\u043e\u043b\u0431\u0446\u0430 5\n\u0422\u0430\u043a\u0436\u0435 \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 id (\u0441\u0442\u043e\u043b\u0431\u0435\u0446 0) - \u043e\u043d \u043d\u0430\u043c \u043d\u0435 \u043d\u0443\u0436\u0435\u043d, \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u0432\u043c\u0435\u0441\u0442\u043e \u043d\u0435\u0433\u043e\n\u041d\u0435 \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 full_link (\u0441\u0442\u043e\u043b\u0431\u0435\u0446 9), \u0445\u043e\u0442\u044f \u043e\u043d \u043f\u043e \u0441\u0443\u0442\u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u0442 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 'title' \u0441 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c url (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0435\u0433\u043e \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 title)\n","40d01bca":"\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c **\u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0435** \u043e \u0441\u043c\u0435\u0448\u0430\u043d\u044b\u0445 \u0442\u0438\u043f\u0430\u0445 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u0445!\n\n\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0440\u0435\u0448\u0438\u0442\u044c \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u044d\u0442\u043e \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0435.","e86ebab6":"\u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044f title \u0438 author \u0434\u043b\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0440\u0430\u0441\u0447\u0451\u0442\u0430 \u0447\u0430\u0441\u0442\u043e\u0442\u043d\u043e\u0441\u0442\u0438 \u0443\u043f\u043e\u0442\u0440\u0435\u0431\u043b\u044f\u0435\u043c\u044b\u0445 \u0441\u043b\u043e\u0432","6b1c890e":"\u0414\u0430\u043d\u043d\u044b\u0435 \u0441\u043b\u0430\u0431\u043e\u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b. \u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u043c\u0435\u0436\u0434\u0443 num_comments \u0438 score - \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 0.48","988a7005":"\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0440\u0430\u043d\u0435\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 (OneHotENcoding, \u041d\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0442.\u043f.) \u0441 \u043d\u043e\u0432\u044b\u043c\u0438 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u043c\u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c\u0438 \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0431\u044b \u0443 \u043d\u0430\u0441 \u0431\u044b\u043b \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u043b\u043d\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430","af4a9ec0":"\u041e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 R^2 \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u043e \u0442\u043e\u043c, \u0447\u0442\u043e \u0443 \u043d\u0430\u0441 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430 (1320) \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 (13140) \u0438 \u0434\u043b\u044f \u0438\u0434\u0435\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0438 \u0440\u0430\u0441\u0447\u0451\u0442\u0430 \u043d\u0430\u0434\u043e \u0441\u043e\u043a\u0440\u0430\u0449\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043b\u0438\u0431\u043e \u0434\u0435\u043b\u0430\u0442\u044c \u0430\u0443\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e.","06144e25":"### \u041e\u0431\u043b\u0430\u043a\u043e \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0447\u0430\u0441\u0442\u043e \u0443\u043f\u043e\u0442\u0440\u0435\u0431\u043b\u044f\u0435\u043c\u044b\u0445 \u0441\u043b\u043e\u0432 \u0432\u043e \u0432\u0437\u0440\u043e\u0441\u043b\u043e\u043c \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0435 (\u0432 \u043f\u043e\u043b\u0435 author)","181c53ed":"\u041e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 R^2 \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u043e \u0442\u043e\u043c, \u0447\u0442\u043e \u0443 \u043d\u0430\u0441 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430 (1320) \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 (11701) \u0438 \u0434\u043b\u044f \u0438\u0434\u0435\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0438 \u0440\u0430\u0441\u0447\u0451\u0442\u0430 \u043d\u0430\u0434\u043e \u0441\u043e\u043a\u0440\u0430\u0449\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043b\u0438\u0431\u043e \u0434\u0435\u043b\u0430\u0442\u044c \u0430\u0443\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e.","ac595956":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432\u0435\u043b\u0435\u0447\u0438\u043d \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c \u0432 \u043d\u0430\u0448\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445","aa97f3c5":"\u0441\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0443\u043f\u043e\u0442\u0440\u0435\u0431\u043b\u044f\u0435\u043c\u044b\u0445 \u0441\u043b\u043e\u0432 \u0432 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 over_18","91fc39b0":"# \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \n(\u043c\u0438\u043d\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0430\u0441\u0445\u043e\u0434\u0430 \u043f\u0430\u043c\u044f\u0442\u0438, \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0439 \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043b\u0438\u0448\u043d\u0438\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432)","260e7569":"\u0434\u0430\u043d\u043d\u044b\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u043f\u0440\u043e\u0433\u0440\u0443\u0436\u0435\u043d\u044b \u0431\u0435\u0437 \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0439","918499ab":"### Mean Absolute Error","aaf699e5":"\u0441\u0431\u0440\u0430\u0441\u0432\u0430\u0435\u043c \u043f\u043e\u043b\u0435 full_link \u0438 created_utc, \u0442.\u043a. \u043e\u043d\u0438 \u043d\u0430\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435 \u043f\u0440\u0438\u0433\u043e\u0434\u044f\u0442\u0441\u044f","42d0035a":"# \u0422\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u0441\u043b\u0435 \u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0438 (\u0431\u043e\u043b\u0435\u0435 \u0442\u044f\u0436\u0451\u043b\u044b\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b)","557e61f5":"\u0447\u0438\u0441\u043b\u0430 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442, \u0437\u043d\u0430\u0447\u0438\u0442 id - \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u043e\u043b\u0435","0b401052":"\u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 id \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u043c \u0441 \u043e\u0431\u0449\u0438\u043c \u0447\u0438\u0441\u043b\u043e\u043c id","bf08a4ab":"\u043e\u0446\u0435\u043d\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u0441\u044f \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u0445 \u0441 \u043f\u0440\u0435\u0434\u0443\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0435\u043c \u043e \u0441\u043c\u0435\u0448\u0430\u043d\u043d\u044b\u0445 \u0442\u0438\u043f\u0430\u0445 (\u0441\u0442\u043e\u043b\u0431\u0446\u044b 5 \u0438 7)","e3ed36bf":"\u0442\u0438\u043f \u044d\u0442\u043e\u0433\u043e \u043f\u043e\u043b\u044f - object\n\n\u0442\u0430\u043a\u0436\u0435 \u043e\u0447\u0435\u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u044d\u0442\u043e\u0442 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0438\u0437 \u0430\u043d\u0430\u043b\u0438\u0437\u0430, \u0442.\u043a. \u0432 \u043d\u0451\u043c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u0432\u0441\u0435\u0433\u043e 1 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u0438 33331 \u043f\u0443\u0441\u0442\u044b\u0445 \u0441\u043a\u043e\u0431\u043e\u043a","a08e1c20":"# \u0427\u0430\u0441\u0442\u043e \u0443\u043f\u043e\u0442\u0440\u0435\u0431\u043b\u044f\u0435\u043c\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 \u0434\u043b\u044f over_18 \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430\n\n\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a\u0438\u0435 \u0441\u043b\u043e\u0432\u0430 \u0447\u0430\u0449\u0435 \u0432\u0441\u0435\u0433\u043e \u0443\u043f\u043e\u0442\u0440\u0435\u0431\u043b\u044f\u044e\u0442\u0441\u044f, \u043a\u043e\u0433\u0434\u0430 \u043c\u044b \u0438\u043c\u0435\u0435\u043c \u0434\u0435\u043b\u043e \u0441 \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u043e\u043c \u0434\u043b\u044f \u0432\u0437\u0440\u043e\u0441\u043b\u044b\u0445 (over_18)","99e10d4b":"\u041e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u043c \u043b\u0443\u0447\u0448\u0438\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 (y gs \u0435\u0441\u0442\u044c \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u044b best_param, best_score)","af055249":"\u0421 TFIDFVectorizer - \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0441\u043b\u043e\u0432\u0443 \u0441\u0442\u0430\u0432\u0438\u0442 \u0447\u0430\u0441\u0442\u043e\u0442\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u044f, \n\u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e \u0441\u0447\u0435\u0442\u0443, \u043d\u043e \u0441\u043c\u0435\u0449\u0430\u0435\u0442\u0441\u044f \u043d\u0430 \u0447\u0430\u0441\u0442\u043e\u0442\u0443 \u0441\u043b\u043e\u0432\u0430 \u0432 \u043a\u043e\u0440\u043f\u0443\u0441\u0435 ","2adc66f1":"### Confusion matrix","d1cefcb1":"### Stemming \u0438 Lemmatization","814280e7":"### Mean Absolute Error","8c462927":"\u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435","0efaf972":"\u0437\u0430\u043c\u0435\u043d\u0438\u043c True \u043d\u0430 1, False \u043d\u0430 0 \u0434\u043b\u044f over_18","fd7fe3eb":"### Classification report","f8cfc8d9":"\u0417\u0430\u043c\u0435\u043d\u0438\u043c NaN \u0432 total_awards_received \u043d\u0430 0 (\u0447\u0430\u0441\u0442\u043e \u044d\u0442\u043e \u0430\u0440\u0445\u0438\u0432\u043d\u044b\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0438 \u043e\u0431\u044b\u0447\u043d\u043e \u0442\u0430\u043c \u043d\u0443\u043b\u0435\u0432\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430\u0433\u0440\u0430\u0434)","2dbc86a4":"## 1. \u0422\u0440\u0435\u043d\u0438\u0440\u0443\u0435\u043c \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044e \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430 <u>\u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445<\/u>","1618d30d":"\u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0441\u0442\u0440\u043e\u043a \u0441 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438","f0309382":"\u0417\u0430\u043f\u0443\u0441\u043a \u043b\u0435\u043c\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044f \u0441 \u043b\u0435\u043c\u043c\u0430\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u043c\u0438 'text_lemma'","a4bed918":"\u0440\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u0435\u043c Accuracy","5a9cbc09":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c Stemming (\u043f\u043e\u0438\u0441\u043a \u043e\u0441\u043d\u043e\u0432\u044b \u0441\u043b\u043e\u0432\u0430)\nLemmatization (\u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043a \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0444\u043e\u0440\u043c\u0435: \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043a \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u043c\u0443 \u0447\u0438\u0441\u043b\u0443, \u043c\u0443\u0436\u0441\u043a\u043e\u043c\u0443 \u0440\u043e\u0434\u0443, \u0433\u043b\u0430\u0433\u043e\u043b\u043e\u0432 \u043a \u0438\u043d\u0444\u0438\u043d\u0438\u0442\u0438\u0432\u0443 \u0438 \u0442.\u043f) \n\u0434\u043b\u044f \u0441\u043e\u043a\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0441\u043b\u043e\u0432\u043e\u0444\u043e\u0440\u043c: am, are, is  ->  be; car, cars, car's, cars'  ->  car etc.\nhttps:\/\/ru.wikipedia.org\/wiki\/\u0421\u0442\u0435\u043c\u043c\u0438\u043d\u0433\nhttps:\/\/ru.wikipedia.org\/wiki\/\u041b\u0435\u043c\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u044f","5cc7ca00":"\u0421\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043e\u0442 \u0447\u0438\u0441\u043b\u0430 \u0441\u043e\u0441\u0435\u0434\u0435\u0439","83d33203":"# \u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445","b276ed87":"# \u041e\u0431\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0445 \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445","f4b4e86a":"\u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0435\u0440\u043d\u043e \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439","36ed9722":"\u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0441\u0442\u043e\u043f-\u0441\u043b\u043e\u0432 (\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0432\u043b\u0438\u044f\u044e\u0442 \u043d\u0430 \u0430\u043d\u0430\u043b\u0438\u0437, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a he, have, it, the \u0438 \u0442.\u043f.), \n\u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043a \u0441\u0442\u043e\u043f-\u0441\u043b\u043e\u0432\u0430\u043c \u043f\u0443\u043d\u043a\u0442\u0443\u0430\u0446\u0438\u044e","8bcdd748":"\u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0436\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f over_18 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u043e\u0441\u043d\u043e\u0432\u044b\u0432\u0430\u044f\u0441\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430 \u0442\u0435\u043a\u0441\u0442\u0435 \u0432 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0438\n\n\u0435\u0441\u043b\u0438 \u0432 text \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0441\u043b\u043e\u0432\u043e \u0438\u0437 \u0441\u043b\u043e\u0432\u0430\u0440\u044f, \u0442\u043e \u043c\u044b \u0441\u0442\u0430\u0432\u0438\u043c 1, \u0438\u043d\u0430\u0447\u0435 - 0","34221ada":"### \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0441\u0435\u0442\u043a\u0443 \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0431\u043e\u0440\u0430 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0434\u043b\u044f \u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u043b\u0443\u0447\u0448\u0435\u0433\u043e \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 KNN, \u043f\u0440\u043e\u0439\u0434\u0435\u043c 3 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f (\u043e\u0442 1 \u0434\u043e 30)","67a09849":"### \u041e\u0431\u043b\u0430\u043a\u043e \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0447\u0430\u0441\u0442\u043e \u0443\u043f\u043e\u0442\u0440\u0435\u0431\u043b\u044f\u0435\u043c\u044b\u0445 \u0441\u043b\u043e\u0432 \u0432\u043e \u0432\u0437\u0440\u043e\u0441\u043b\u043e\u043c \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0435 (\u0432 title)","82d009f5":"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441 \u043b\u0443\u0447\u0448\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c, \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u043c \u043d\u0430 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e \u043f\u0435\u0440\u0435\u0431\u043e\u0440\u0430","c43d1993":"\u0412\u044b\u0432\u043e\u0434: \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043b\u0443\u0447\u0448\u0435 \u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043a\u0430\u043a \u0435\u0441\u0442\u044c, \u0442.\u043a. \u043e\u0447\u0435\u0432\u0438\u0434\u043d\u044b\u0445 \u0437\u0430\u043c\u0435\u043d \u043d\u0435\u0442"}}