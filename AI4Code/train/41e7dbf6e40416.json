{"cell_type":{"9cab06ef":"code","3290083a":"code","1f8623c4":"code","00ac0338":"code","d3cc6f8b":"code","e6f16ddc":"code","9d03c467":"code","f8f5c6bf":"code","87c867e7":"code","69a7c1d0":"code","a1281cf9":"code","4adc2ce1":"code","9efe1f68":"code","12a5f100":"code","9694d959":"code","6b96f67f":"code","145b6fbb":"code","84f7ab61":"code","20bf6854":"code","bb7054c9":"code","a40273fc":"code","c93d5535":"code","b90397a5":"markdown","6e6b1d86":"markdown","ed45f094":"markdown"},"source":{"9cab06ef":"import numpy as np\nimport pandas as pd \nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport gensim\nimport re\nfrom gensim.parsing.preprocessing import remove_stopwords\nfrom gensim import corpora\nimport sklearn\nfrom sklearn.metrics.pairwise import cosine_similarity","3290083a":"df1 = pd.read_csv('..\/input\/questionanswer-dataset\/S08_question_answer_pairs.txt', sep='\\t')\ndf2 = pd.read_csv('..\/input\/questionanswer-dataset\/S09_question_answer_pairs.txt', sep='\\t')\ndf3 = pd.read_csv('..\/input\/questionanswer-dataset\/S10_question_answer_pairs.txt', sep='\\t', encoding = 'ISO-8859-1')","1f8623c4":"df1.head(4)","00ac0338":"df2.head(3)","d3cc6f8b":"data=df1.append([df2,df3])","e6f16ddc":"data.head(4)","9d03c467":"#here we used only improtent column for the automatic question answering inly we need question and answer column \ndata=data[['Question','Answer']]","f8f5c6bf":"data.head(15)","87c867e7":"data.shape","69a7c1d0":"#remove duplicate column \ndata =data.drop_duplicates(subset='Question')\ndata.head(10)","a1281cf9":"data.shape","4adc2ce1":"data=data.dropna()","9efe1f68":"data.head(10)","12a5f100":"data.shape","9694d959":"data.head(5)","6b96f67f":"#using stop word to clean the data\ndef clean_sentence(sentence,stopwords=False):\n    sentence=sentence.lower().strip()\n    sentence=re.sub(r'[^a-z0-9\\s]',' ',sentence)\n    if stopwords:\n        sentence=remove_stopwords(sentence)\n    return sentence","145b6fbb":"def get_cleaned_sentence(data,stopwords=False):\n    sents=data[['Question']];\n    cleaned_sentence=[]\n    for index,row in data.iterrows():\n        cleaned=clean_sentence(row['Question'],stopwords)\n        cleaned_sentence.append(cleaned);\n    return cleaned_sentence\ncleaned_sentence=get_cleaned_sentence(data,stopwords=True)\nprint(cleaned_sentence);\nprint('\\n')","84f7ab61":"#withut using the stop words\nclean_sentence_with_stopwords=get_cleaned_sentence(data,stopwords=False)\nprint(clean_sentence_with_stopwords)","20bf6854":"#convert sentences to word\n#here we usiing stop bag of word method to predict the sentences\nsentences=clean_sentence_with_stopwords\n#split the word with white spaces\nsentence_words=[[word for word in  document.split()]for document in sentences]\n#convert the word to the dictonery\ndictionary=corpora.Dictionary(sentence_words)\nfor key,value in dictionary.items():\n    print(key,':',value)","bb7054c9":"bow=[dictionary.doc2bow(text) for text in sentence_words]\nfor sent,embedding in zip(sentences,bow):\n    print(sent)\n    print(embedding)","a40273fc":"#Bag of word represent for Questions\nQuestion_orig='When Abraham Lincoln started his political career'\nquestion=clean_sentence(Question_orig,stopwords=False)\nquestion_embedding=dictionary.doc2bow(question.split())\nprint('\\n\\n',question,'\\n',question_embedding)","c93d5535":"def nearest_question(question_embedding,sentence_embedding,ques,sentences):\n    max_simalirty=-1;\n    index_simalrit=-1;\n    for index,answer_embedding in enumerate(sentence_embedding):\n        simlarity=cosine_similarity(answer_embedding,question_embedding)[0][0];\n        print(index,simlarity,sentences[index])\n        #which question max simalryt and sort them\n        if simlarity>max_simalirty:\n            max_simalirty=simlarity;\n            index_simalrity=index;\n    print('\\n')\n    print('question',question)\n    print('\\n')\n    print('retrived',ques.iloc[index_simalrity,0])\n    print(ques.iloc[index_simalrity,1])\nnearest_question(question_embedding,bow,data,sentences)","b90397a5":"Convert vector represnt to the cell using bag of words after here find distance between to vector using cosine simlarity closet matching answer can be find the cosine simlarity  we saw the bow are not gave the quality of questions","6e6b1d86":"# Automatic Question Answering \n# Convert each query question to vector\n# Find the closet question Vector to uses question vector\n# *used cosine simlarity*\n# ***Convert Word to Vector Following Method***\n* Bag of Word\n* word to vec\n* Glove\n* Bert\n# Data Preprocessing \n# here we are using only bag of word method to ","ed45f094":"IF IT IS USE FULL PLEASE UPVOTE ANY SUUGESTION HIGHLY  APPRECIATED "}}