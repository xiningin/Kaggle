{"cell_type":{"0a31c0ef":"code","4fac6ffe":"code","c16833a2":"code","884e9922":"code","d07cbc0a":"code","116fee02":"code","5ec39637":"markdown","d765425b":"markdown","eb0a0737":"markdown","259c8438":"markdown","72d7e0b4":"markdown","61b7d281":"markdown","ca76f17b":"markdown"},"source":{"0a31c0ef":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.io as pio\npio.templates.default = \"plotly_white\"\nfrom plotly.offline import plot, iplot, init_notebook_mode\ninit_notebook_mode(connected=True)\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4fac6ffe":"# We will be using the same table to create all the univariate charts\ndf_base=pd.read_csv(\"\/kaggle\/input\/retail-sales-data\/Retail_Sales_Data.csv\")\ndf_grouped=df_base.groupby(['Shop_Category']).size().reset_index(name='counts')\ndf_grouped.columns=['Category','Transactions']\ndf_grouped","c16833a2":"colors = ['gold', 'mediumturquoise', 'darkorange', 'lightgreen','pink','red']\n\nfig = go.Figure(data=[go.Pie(labels=df_grouped['Category'],\n                             values=df_grouped['Transactions'])])\nfig.update_traces(hoverinfo='label+percent', textinfo='value', textfont_size=20,\n                  marker=dict(colors=colors, line=dict(color='#000000', width=2)),\n                 hole=0.6)\nfig.update_layout(\n    # Add annotations in the center of the donut pies.\n    annotations=[dict(text='Transactions Across', x=0.5, y=0.55, font_size=15, showarrow=False),\n                dict(text='Categories', x=0.5, y=0.49, font_size=15, showarrow=False)\n                ])\nfig.update_layout(legend=dict(\n    orientation=\"h\",\n    yanchor=\"bottom\",\n    y=-0.2,\n    xanchor=\"right\",\n    x=0.75\n))\nfig.show()","884e9922":"fig = px.line_polar(df_grouped, r='Transactions', theta='Category', line_close=True)\nfig.update_traces(fill='toself')\nfig.update_layout(\n    title={\n        'text': \"Spread of Transactions Across Categories\",\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\n\nfig.show()","d07cbc0a":"bub_c=df_grouped\nbub_c=bub_c.sort_values(by=\"Transactions\",ascending=False).reset_index(drop=True)\nbub_c['category']=1\n\nfig = px.scatter(bub_c, x=\"category\", y=\"Transactions\", \n                 color_discrete_sequence=['gold', 'mediumturquoise', 'darkorange', 'lightgreen','pink','red'],\n                 color=\"Category\",\n                 size='Transactions', hover_data=['Transactions'],width=600,height=400)\nfig.update_layout(\n    title={\n        'text': \"Transactions Across Categories\",\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\nfig.update_xaxes(showticklabels=False)\nfig.show()\n","116fee02":"fig = px.scatter(bub_c, x=\"Category\", y=\"Transactions\", \n                 color_discrete_sequence=['gold', 'mediumturquoise', 'darkorange', 'lightgreen','pink','red'],\n                 color=\"Category\",\n                 size='Transactions', hover_data=['Transactions'],text='Transactions')\nfig.update_traces(textposition=\"top center\")\nfig.add_bar(x=bub_c[\"Category\"], y=bub_c[\"Transactions\"]-3,width=0.04,name=\" \")\n\nfig.update_layout(\n    title={\n        'text': \"Transactions Across Categories\",\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\nfig.update_xaxes(showticklabels=False)\nfig.show()\n","5ec39637":"## Bubble Chart","d765425b":"# Univariate Categorical Plotting Using Plotly","eb0a0737":"## Radar Chart","259c8438":"### Doughnut Chart\n- An alternative to the classical pie chart but looks way cooler than that","72d7e0b4":"## Lollypop Chart\nA fancy alternative to bar chart","61b7d281":"## Contents\n1. [Doughnut Chart](#Doughnut-Chart)\n2. [Radar Chart](#Radar-Chart)\n3. [Bubble Chart](#Bubble-Chart)\n4. [Lollypop Chart](#Lollypop-Chart)","ca76f17b":"Let us do the groundwork first and load the table we will be using to create the visualizations"}}