{"cell_type":{"2d12d956":"code","490a72b3":"code","f3247a12":"code","f4bf7f08":"code","c251092e":"code","2e93f96a":"code","7f0d3ced":"code","54d75413":"code","06e9e0ce":"code","db29b0d6":"code","7c09f7c8":"code","a03fee5d":"code","43835f33":"code","cbd9bf9e":"code","e79be731":"code","85ae0a6f":"code","5bc26890":"code","3046df2e":"code","f7d62df3":"code","60282f4b":"code","2c68de3c":"code","e1f41725":"code","d686f8f7":"code","acf13b2e":"code","6d636e8a":"code","641c41b4":"code","de59b3a5":"code","238c6e6f":"code","0a203cf6":"code","8d0dc594":"code","2f4e1d14":"code","8edbcc06":"code","852c6588":"code","4fd4f5e6":"code","6f8c30d2":"code","f0fee351":"code","6c2d2936":"code","9b3816a8":"code","65ad9b24":"code","f810b587":"code","fb2cdb32":"code","9e3dcf9c":"code","d30f89cc":"code","2c5af5c8":"code","5ff9a47d":"code","cfeb6fdc":"code","b46f1980":"code","2aab4455":"code","9c3507c2":"code","109de0b7":"code","af52a7be":"code","5d079f29":"code","4dd6f9ee":"code","73f76c1b":"code","3d51edb8":"code","b93fe695":"code","24cdd371":"code","9c74aeb7":"code","1ad36a2b":"code","d2db9508":"code","996814f2":"code","f7de6510":"code","a9ece11d":"code","100b4d1d":"code","744d3ed2":"code","5d8f1b3a":"code","02d73669":"code","886bc6fd":"code","9d793aac":"code","4d0de3eb":"code","11e17e2d":"code","678e111e":"code","89522d71":"code","49c8b7e5":"code","87cbaad9":"code","fb8c7443":"code","0182484e":"code","25f1f79f":"code","f831dfe8":"code","acf47400":"code","455d039d":"code","4009cdda":"code","c6b3b51a":"code","67b27279":"code","21e5a0e7":"code","3b84a42e":"code","7194f57b":"code","0c00c7d6":"code","7a6f2380":"code","06ddb335":"code","67da0bac":"code","2a347987":"code","b0de4410":"code","6176a801":"code","368c6313":"code","0bcb1cfa":"code","64245349":"code","25727cf9":"code","e2527464":"code","55d9bf40":"code","2ef95224":"code","cba16fe2":"code","1ab02e57":"code","acee55df":"code","1a27c36d":"code","eddb96a3":"code","22f95f93":"code","149dde47":"code","2d8c43f4":"code","4d16a1a6":"code","7087f3ae":"code","83f0accc":"code","e1d0048b":"code","3980c616":"code","506c1808":"code","451b32e5":"code","7977c164":"code","febdec47":"code","975781bd":"code","b1646548":"code","552fe5fe":"code","504766eb":"code","d7c40235":"code","efe94599":"code","2d468888":"code","6d417225":"code","e0ad515c":"code","e1a8182a":"code","a69c6525":"code","58030d8d":"code","1dc65947":"code","e4a9dbb1":"code","65543857":"code","7c12e7dd":"code","7d42d0c0":"markdown","0e3a0ef3":"markdown","f6225e18":"markdown","5dcd8e0d":"markdown","cf6b2c99":"markdown","4a17e897":"markdown","1fa709ca":"markdown","d3b4e159":"markdown","4911e95c":"markdown","d22b0b9a":"markdown"},"source":{"2d12d956":"import os\nprint(os.listdir('..\/input'))","490a72b3":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")","f3247a12":"# index_col function help to remove the coloumn\n\ndf= pd.read_csv('..\/input\/german credit1.csv',index_col=0)","f4bf7f08":"# shape of the data\ndf.shape","c251092e":"df.info()","2e93f96a":"# removing the Unnamed column\n#df.drop([' '],axis =1 )\nsns.pairplot(df)","7f0d3ced":"def outliers_iqr(ys):\n    quartile_1, quartile_3 = np.percentile(ys, [25, 75])\n    iqr = quartile_3 - quartile_1\n    lower_bound = quartile_1 - (iqr * 1.5)\n    upper_bound = quartile_3 + (iqr * 1.5)\n    return np.where((ys > upper_bound) | (ys < lower_bound))","54d75413":"df['Credit amount'].hist()","06e9e0ce":"df['Credit amount_log'] = np.log(df['Credit amount'])","db29b0d6":"df['Credit amount_log'].hist()","7c09f7c8":"# summary statistics help to understand the distribution of data\n# if the SD of any variable is 0 then we need to get rid of that \n# we will not get for categorical variable , only for numerical and continious numerical variable\n\ndf.describe()","a03fee5d":"cols=df.columns.tolist()","43835f33":"cols","cbd9bf9e":"cols = cols[-1:] + cols[:-1]","e79be731":"cols","85ae0a6f":"df=df[cols]","5bc26890":"df.head()","3046df2e":"# Null data\ndf.isnull().sum()","f7d62df3":"# this will help us to know the fields under each header\n\nprint(\"Purpose : \",df.Purpose.unique())\nprint(\"Job : \",df.Job.unique())\nprint(\"Sex : \",df.Sex.unique())\nprint(\"Housing : \",df.Housing.unique())\nprint(\"Saving account : \",df['Saving account'].unique())\nprint(\"Checking account : \",df['Checking account'].unique())\nprint(\"Risk : \",df['Risk'].unique())","60282f4b":"print(\"Saving accounts : \",df['Saving account'].value_counts())\nprint(\"Checking account : \",df['Checking account'].value_counts())","2c68de3c":"sns.countplot('Risk', data=df)","e1f41725":"sns.countplot('Sex', data=df)","d686f8f7":"dimension = (15,5)\nfig, ax = plt.subplots(figsize=dimension)\nsns.countplot('Purpose', data=df)","acf13b2e":"sns.countplot('Saving account', data=df)","6d636e8a":"sns.countplot('Checking account', data=df)","641c41b4":"dimension = (11, 6)\nfig, ax = plt.subplots(figsize=dimension)\nsns.countplot('Purpose', data=df)","de59b3a5":"sns.catplot(x='Purpose', y='Credit amount', hue='Risk', kind='bar', palette='Set1', data=df, height=4, aspect=4)\nplt.title('Mean Credit Amount by purpose and Risk')\nplt.show()","238c6e6f":"sns.catplot(x='Duration', y='Credit amount', hue='Risk', kind='bar', palette='Set1', data=df, height=4, aspect=4)\nplt.title('Mean Duration by Credit Amount and Risk')\nplt.show()","0a203cf6":"sns.catplot(x='Duration', y='Credit amount', hue='Sex', kind='bar', palette='Set1', data=df, height=4, aspect=4)\nplt.title('Mean Duration by Credit Amount and Sex')\nplt.show()","8d0dc594":"sns.catplot(x='Job', y='Credit amount', hue='Risk', kind='bar', palette='Set1', data=df, height=4, aspect=4)\nplt.title('Mean job by Credit Amount and Risk')\nplt.show()","2f4e1d14":"sns.catplot(x='Job', y='Credit amount', hue='Sex', kind='bar', palette='Set1', data=df, height=4, aspect=4)\nplt.title('Mean job by Credit Amount and sex')\nplt.show()","8edbcc06":"sns.catplot(x='Checking account', y='Credit amount', hue='Risk', kind='bar', palette='Set1', data=df, height=4, aspect=4)\nplt.title('Mean Checking account by Credit Amount and Risk')\nplt.show()","852c6588":"sns.catplot(x='Saving account', y='Credit amount', hue='Risk', kind='bar', palette='Set1', data=df, height=4, aspect=4)\nplt.title('Mean Saving accounts by Credit Amount and Risk')\nplt.show()","4fd4f5e6":"dimension = (15, 6)\nfig, ax = plt.subplots(figsize=dimension)\nsns.countplot(x=\"Duration\", data=df, \n              palette=\"hls\",  hue = \"Risk\")","6f8c30d2":"category = [\"Checking account\", 'Sex']\ncm = sns.light_palette(\"pink\", as_cmap=True)\npd.crosstab(df[category[0]],df[category[1]]).style.background_gradient(cmap = cm)","f0fee351":"category = [\"Saving account\", 'Sex']\ncm = sns.light_palette(\"green\", as_cmap=True)\npd.crosstab(df[category[0]],df[category[1]]).style.background_gradient(cmap = cm)","6c2d2936":"category = [\"Purpose\", 'Sex']\ncm = sns.light_palette(\"blue\", as_cmap=True)\npd.crosstab(df[category[0]], df[category[1]]).style.background_gradient(cmap = cm)","9b3816a8":"category = [\"Sex\", 'Risk']\ncm = sns.light_palette(\"red\", as_cmap=True)\npd.crosstab(df[category[0]], df[category[1]]).style.background_gradient(cmap = cm)","65ad9b24":"category = [\"Housing\",'Sex']\ncm = sns.light_palette(\"black\", as_cmap=True)\npd.crosstab(df[category[0]], df[category[1]]).style.background_gradient(cmap = cm)","f810b587":"category = [\"Job\",'Sex']\ncm = sns.light_palette(\"violet\", as_cmap=True)\npd.crosstab(df[category[0]], df[category[1]]).style.background_gradient(cmap = cm)","fb2cdb32":"sns.catplot(x='Sex', y='Age', hue='Risk', kind='bar', palette='Set1', data=df, height=3, aspect=3)\nplt.title('Mean Sex by Age and Risk')\nplt.show()","9e3dcf9c":"fig, ax = plt.subplots(figsize=(10, 5))\nax = sns.boxplot(x='Checking account', y='Credit amount', hue=None, data=df, palette='Set1')","d30f89cc":"fig, ax = plt.subplots(figsize=(10, 5))\nax = sns.boxplot(x='Saving account', y='Credit amount', hue=None, data=df, palette='Set1')","2c5af5c8":"def scatters(credit, h=None, pal=None):\n    fig, (ax1, ax2, ax3) = plt.subplots(3,1, figsize=(8,8))\n    sns.scatterplot(x=\"Credit amount\",y=\"Duration\", hue=h, palette='Set1', data=df, ax=ax1)\n    sns.scatterplot(x=\"Age\",y=\"Credit amount\", hue=h, palette='Set1', data=df, ax=ax2)\n    sns.scatterplot(x=\"Age\",y=\"Duration\", hue=h, palette='Set1', data=df, ax=ax3)\n    plt.tight_layout()","5ff9a47d":"scatters(df, h=\"Saving account\")","cfeb6fdc":"scatters(df, h=\"Checking account\")","b46f1980":"scatters(df, h=\"Risk\")","2aab4455":"scatters(df, h=\"Sex\")","9c3507c2":"# this will help to replace all the NAN values with little values in both saving and checking account\n\n#df[\"Saving accounts\"]=df[\"Saving accounts\"].fillna(method=\"bfill\")\n#df[\"Checking account\"]=df[\"Checking account\"].fillna(method=\"bfill\")\n\ndf.fillna('little',inplace=True)","109de0b7":"print(\"Saving account : \",df['Saving account'].value_counts())\nprint(\"Checking account : \",df['Checking account'].value_counts())","af52a7be":"df.info()","5d079f29":"features = df.iloc[:,:10]\nlabel = df.iloc[:,[-1]]","4dd6f9ee":"features.head()","73f76c1b":"label.head()","3d51edb8":"from sklearn.preprocessing import LabelEncoder","b93fe695":"SexinNumeric=LabelEncoder()\nHousinginNumeric=LabelEncoder()\nSavingaccountinNumeric=LabelEncoder()\nCheckingaccountinNumeric=LabelEncoder()\nPurposeinNumeric=LabelEncoder()\nRiskinNumeric=LabelEncoder()","24cdd371":"features['SexinNumeric']=SexinNumeric.fit_transform(features['Sex'])\nfeatures['HousinginNumeric']=HousinginNumeric.fit_transform(features['Housing'])\nfeatures['SavingaccountinNumeric']=SavingaccountinNumeric.fit_transform(features['Saving account'])\nfeatures['CheckingaccountinNumeric']=CheckingaccountinNumeric.fit_transform(features['Checking account'])\nfeatures['PurposeinNumeric']=PurposeinNumeric.fit_transform(features['Purpose'])\nlabel['RiskinNumeric']=RiskinNumeric.fit_transform(label['Risk'])","9c74aeb7":"features.tail()","1ad36a2b":"label.tail()","d2db9508":"NewFeatures = features.drop(['Sex','Housing','Saving account','Checking account', 'Purpose'], axis='columns')\nNewLabel = label.drop(['Risk'], axis='columns')","996814f2":"NewFeatures.head()","f7de6510":"NewLabel.head()","a9ece11d":"NewFeatures = features.drop(['Sex','Housing','Saving account', 'Checking account', 'Purpose'], axis='columns').values\nNewLabel = label.drop(['Risk'], axis='columns').values","100b4d1d":"#Create Train Test Split\n\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(NewFeatures,\n                                                NewLabel,\n                                                test_size=0.20,\n                                                random_state=44)","744d3ed2":"# Verifying\n\nprint(f'X_train dimension: {X_train.shape}')\nprint(f'X_test dimension: {X_test.shape}')\nprint(f'\\ny_train dimension: {y_train.shape}')\nprint(f'y_test dimension: {y_test.shape}')","5d8f1b3a":"#print(\"Saving account : \",X_train['SavingaccountinNumeric'].value_counts())\n#print(\"Checking account : \",X_train['CheckingaccountinNumeric'].value_counts())","02d73669":"from sklearn.linear_model import LogisticRegression\n\nmodel = LogisticRegression()\nmodel.fit(X_train,y_train.ravel())","886bc6fd":"model.score(X_train,y_train)","9d793aac":"model.score(X_test,y_test)","4d0de3eb":"ypred=model.predict(X_test)","11e17e2d":"print(ypred)","678e111e":"from sklearn.metrics import accuracy_score","89522d71":"print(accuracy_score(ypred, y_test))","49c8b7e5":"from sklearn.metrics import confusion_matrix\nCM = confusion_matrix(ypred,y_test)\nCM","87cbaad9":"sns.heatmap(CM, annot=True,fmt='d')\nplt.xlabel('Predicted')\nplt.ylabel('actual')","fb8c7443":"from sklearn.metrics import classification_report\nprint(classification_report(ypred,y_test))","0182484e":"from sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve","25f1f79f":"y_pred_prob = model.predict_proba(X_test)[:,1]","f831dfe8":"Log_roc = roc_auc_score(y_test,y_pred_prob)\nfpr, tpr, thresholds =  roc_curve(y_test,y_pred_prob)","acf47400":"plt.figure()\nplt.plot(fpr, tpr, label=\"model area (area = %0.2f)\" % Log_roc)\nplt.plot([0,1],[0,1],'r--')\nplt.xlim([-0.05, 1.05])\nplt.ylim([-0.05, 1.05])\nplt.xlabel('False Positive rate(100-specificity)')\nplt.ylabel('True Positive rate(sensitivity)')\nplt.legend(loc='lower right')\nplt.show()","455d039d":"from sklearn.neighbors import KNeighborsClassifier","4009cdda":"model2 = KNeighborsClassifier(n_neighbors=25) #k = 5\nmodel2.fit(X_train,y_train.ravel())","c6b3b51a":"model2.score(X_train,y_train)","67b27279":"model2.score(X_test,y_test)","21e5a0e7":"ypred2=model2.predict(X_test)","3b84a42e":"print(ypred2)","7194f57b":"CM2 = confusion_matrix(ypred,y_test)\nCM2","0c00c7d6":"sns.heatmap(CM2, annot=True,fmt='d')\nplt.xlabel('Predicted')\nplt.ylabel('actual')","7a6f2380":"print(classification_report(ypred2,y_test))","06ddb335":"y_pred_prob2 = model2.predict_proba(X_test)[:,1]","67da0bac":"Log_roc2 = roc_auc_score(y_test,y_pred_prob2)\nfpr, tpr, thresholds =  roc_curve(y_test,y_pred_prob2)","2a347987":"plt.figure()\nplt.plot(fpr, tpr, label=\"model area (area = %0.2f)\" % Log_roc2)\nplt.plot([0,1],[0,1],'r--')\nplt.xlim([-0.05, 1.05])\nplt.ylim([-0.05, 1.05])\nplt.xlabel('False Positive rate(100-specificity)')\nplt.ylabel('True Positive rate(sensitivity)')\nplt.legend(loc='lower right')\nplt.show()","b0de4410":"from sklearn import tree","6176a801":"model3 = tree.DecisionTreeClassifier()","368c6313":"model3=model3.fit(X_train,y_train)","0bcb1cfa":"model3.score(X_test,y_test)","64245349":"ypred3=model3.predict(X_test)","25727cf9":"print(ypred3)","e2527464":"from sklearn.metrics import confusion_matrix\nCM3 = confusion_matrix(ypred3,y_test)\nCM3","55d9bf40":"sns.heatmap(CM3, annot=True,fmt='d')\nplt.xlabel('Predicted')\nplt.ylabel('actual')","2ef95224":"print(classification_report(ypred3,y_test))","cba16fe2":"y_pred_prob3 = model3.predict_proba(X_test)[:,1]","1ab02e57":"Log_roc3 = roc_auc_score(y_test,y_pred_prob3)\nfpr, tpr, thresholds =  roc_curve(y_test,y_pred_prob3)","acee55df":"plt.figure()\nplt.plot(fpr, tpr, label=\"model area (area = %0.2f)\" % Log_roc3)\nplt.plot([0,1],[0,1],'r--')\nplt.xlim([-0.05, 1.05])\nplt.ylim([-0.05, 1.05])\nplt.xlabel('False Positive rate(100-specificity)')\nplt.ylabel('True Positive rate(sensitivity)')\nplt.legend(loc='lower right')\nplt.show()","1a27c36d":"from sklearn.ensemble import RandomForestClassifier\nmodel4 = RandomForestClassifier(n_estimators=29)\nmodel4.fit(X_train, y_train.ravel())","eddb96a3":"model4.score(X_train,y_train)","22f95f93":"model4.score(X_test,y_test)","149dde47":"ypred4 = model4.predict(X_test)","2d8c43f4":"print(ypred4)","4d16a1a6":"from sklearn.metrics import confusion_matrix\nCM4 = confusion_matrix(ypred4,y_test)\nCM4","7087f3ae":"sns.heatmap(CM4, annot=True,fmt='d')\nplt.xlabel('Predicted')\nplt.ylabel('actual')","83f0accc":"print(classification_report(ypred4,y_test))","e1d0048b":"y_pred_prob4 = model4.predict_proba(X_test)[:,1]","3980c616":"Log_roc4 = roc_auc_score(y_test,y_pred_prob4)\nfpr, tpr, thresholds =  roc_curve(y_test,y_pred_prob4)","506c1808":"plt.figure()\nplt.plot(fpr, tpr, label=\"model area (area = %0.2f)\" % Log_roc4)\nplt.plot([0,1],[0,1],'r--')\nplt.xlim([-0.05, 1.05])\nplt.ylim([-0.05, 1.05])\nplt.xlabel('False Positive rate(100-specificity)')\nplt.ylabel('True Positive rate(sensitivity)')\nplt.legend(loc='lower right')\nplt.show()","451b32e5":"from sklearn.svm import SVC","7977c164":"model5 = SVC(kernel='linear', probability=False)","febdec47":"model5.fit(X_train,y_train.ravel())","975781bd":"model5.score(X_train,y_train)","b1646548":"model5.score(X_test,y_test)","552fe5fe":"ypred5 = model5.predict(X_test)","504766eb":"print(ypred5)","d7c40235":"print(classification_report(ypred5,y_test))","efe94599":"CM5 = confusion_matrix(ypred5,y_test)\nCM5","2d468888":"sns.heatmap(CM5, annot=True,fmt='d')\nplt.xlabel('Predicted')\nplt.ylabel('actual')","6d417225":"# y_pred_prob5 = model5.predict_proba(X_test)[:,1]","e0ad515c":"Log_roc5 = roc_auc_score(y_test,y_pred_prob5)\nfpr, tpr, thresholds =  roc_curve(y_test,y_pred_prob5)","e1a8182a":"plt.figure()\nplt.plot(fpr, tpr, label=\"model area (area = %0.2f)\" % Log_roc5)\nplt.plot([0,1],[0,1],'r--')\nplt.xlim([-0.05, 1.05])\nplt.ylim([-0.05, 1.05])\nplt.xlabel('False Positive rate(100-specificity)')\nplt.ylabel('True Positive rate(sensitivity)')\nplt.legend(loc='lower right')\nplt.show()","a69c6525":"from sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report, fbeta_score #To evaluate our model","58030d8d":"print(cross_val_score(model,X_test,y_test,cv=10,scoring='accuracy').mean())","1dc65947":"print(cross_val_score(model2,X_test,y_test,cv=10,scoring='accuracy').mean())","e4a9dbb1":"print(cross_val_score(model3,X_test,y_test,cv=10,scoring='accuracy').mean())","65543857":"print(cross_val_score(model4,X_test,y_test,cv=10,scoring='accuracy').mean())","7c12e7dd":"print(cross_val_score(model5,X_test,y_test,cv=10,scoring='accuracy').mean())","7d42d0c0":"# Support Vector Machine","0e3a0ef3":"# RANDOM FOREST","f6225e18":"# decission tree model","5dcd8e0d":"# KNN Model","cf6b2c99":"# Test & Train Splitting","4a17e897":"# Cleaning ","1fa709ca":"# Logistic Regression","d3b4e159":"# EDA","4911e95c":"# Exploring data","d22b0b9a":"# Model Building"}}