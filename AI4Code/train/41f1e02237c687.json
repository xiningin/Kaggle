{"cell_type":{"80d820e3":"code","68d37b71":"code","6a0cbf1b":"code","df36604f":"code","8c2249f5":"code","bbd5dd0a":"code","5b861695":"code","5e3cc20d":"code","d422c65a":"code","a57ae4c4":"code","d7958bf8":"code","38300a39":"code","10d5ee69":"code","0241b4bc":"code","29c873e7":"code","f6f74a9c":"code","5d488e6b":"code","0554341a":"code","22758021":"code","33761a5c":"markdown","2c7341f3":"markdown","cf2fce67":"markdown","268adf1e":"markdown","92fd4302":"markdown"},"source":{"80d820e3":"pip install -U lightautoml","68d37b71":"import pandas as pd       \nimport matplotlib as mat\nimport matplotlib.pyplot as plt    \nimport numpy as np\nimport seaborn as sns\n%matplotlib inline\n\nimport random\nimport os\nfrom numpy.random import seed\n\nfrom sklearn import metrics\n\nfrom lightautoml.automl.presets.tabular_presets import TabularAutoML, TabularUtilizedAutoML\nfrom lightautoml.tasks import Task","6a0cbf1b":"df_train = pd.read_csv('..\/input\/tabular-playground-series-jun-2021\/train.csv', index_col = 'id')\n#Y_train = df_train['target'].copy()\n#X_train = df_train.copy().drop('target', axis = 1)\n\nX_test = pd.read_csv('..\/input\/tabular-playground-series-jun-2021\/test.csv', index_col = 'id')","df36604f":"train_knn = np.load(\"..\/input\/tps6-boost-your-score-with-knn-features\/add_feat_train.npy\")\ntest_knn = np.load(\"..\/input\/tps6-boost-your-score-with-knn-features\/add_feat_test.npy\")\n\ntrain_knn = pd.DataFrame(train_knn)\ntest_knn = pd.DataFrame(test_knn, index = range (200000,300000,1))\n\ntrain_knn.columns = [('knn_{0:d}').format(i) for i in range(1,10)]\ntest_knn.columns = [('knn_{0:d}').format(i) for i in range(1,10)]\n\ndf_train = pd.concat([df_train, train_knn], axis=1)\nX_test = pd.concat([X_test, test_knn], axis=1)","8c2249f5":"df_train['target'] = df_train['target'].str.slice(start=6).astype(int) - 1","bbd5dd0a":"df_train","5b861695":"X_test","5e3cc20d":"N_THREADS = 4 # threads cnt for lgbm and linear models\nN_FOLDS = 5 # folds cnt for AutoML\nRANDOM_STATE = 42 # fixed random state for various reasons\nTEST_SIZE = 0.2 # Test size for metric check\nTIMEOUT = 8 * 3600 # Time in seconds for automl run\nTARGET_NAME = 'target' # Target column name","d422c65a":"#Reproducible results\nseed(RANDOM_STATE)\nrandom.seed(RANDOM_STATE)\nos.environ['PYTHONHASHSEED'] = str(RANDOM_STATE)","a57ae4c4":"task = Task('multiclass',)","d7958bf8":"roles = {'target': TARGET_NAME}","38300a39":"%%time\n\nautoml = TabularUtilizedAutoML(task = task, \n                               timeout = TIMEOUT,\n                               cpu_limit = N_THREADS,\n                               general_params = {\n                                   'use_algos': [['linear_l2', 'lgb_tuned', 'cb_tuned'], ['lgb_tuned', 'cb_tuned']],\n                                   'return_all_predictions': True,\n                                   'weighted_blender_max_nonzero_coef': 0.0\n                               },\n                               tuning_params = {'max_tuning_time': 3600},\n                               reader_params = {'n_jobs': N_THREADS}\n                               )\noof_pred = automl.fit_predict(df_train, roles = roles)\nprint('oof_pred:\\n{}\\nShape = {}'.format(oof_pred[:10], oof_pred.shape))","10d5ee69":"print(oof_pred.shape)\noof_pred","0241b4bc":"test_pred = automl.predict(X_test)\nprint('Prediction for test data:\\n{}\\nShape = {}'.format(test_pred[:10], test_pred.shape))","29c873e7":"print('Check scores...')\nprint('OOF score: {}'.format(metrics.log_loss(df_train[TARGET_NAME].values, oof_pred.data)))","f6f74a9c":"train_oof = pd.DataFrame(oof_pred.data, columns = ['Class_1', 'Class_2', 'Class_3', 'Class_4', 'Class_5', 'Class_6', 'Class_7', 'Class_8', 'Class_9'])\ntrain_oof","5d488e6b":"pred_test = pd.DataFrame(test_pred.data, columns = ['Class_1', 'Class_2', 'Class_3', 'Class_4', 'Class_5', 'Class_6', 'Class_7', 'Class_8', 'Class_9'])\npred_test","0554341a":"train_oof.to_csv('lightautoml_train_oof.csv', index=False)\ntrain_oof","22758021":"output = pred_test\noutput['id'] = X_test.index\noutput.to_csv('submission.csv', index=False)\n\noutput","33761a5c":"## Submission","2c7341f3":"My other notebooks in this competition:\n- [Tabular Playground Series - June\/2021: Starter - EDA + Base LightGBM](https:\/\/www.kaggle.com\/jonaspalucibarbosa\/tps06-21-starter-eda-base-lgbm)\n- [Tabular Playground Series - June\/2021: Simple Neural Network with Keras](https:\/\/www.kaggle.com\/jonaspalucibarbosa\/tps06-21-simple-nn-with-keras)\n- [Tabular Playground Series - June\/2021: Keras Neural Network with Embedding Layer](https:\/\/www.kaggle.com\/jonaspalucibarbosa\/tps06-21-keras-nn-with-embedding)\n- [Tabular Playground Series - June\/2021: Wide and Deep Neural Network with Keras](https:\/\/www.kaggle.com\/jonaspalucibarbosa\/tps06-21-wide-and-deep-nn-w-keras)\n- [Tabular Playground Series - June\/2021: Keras Neural Network with Skip Connections](https:\/\/www.kaggle.com\/jonaspalucibarbosa\/tps06-21-keras-nn-with-skip-connections)","cf2fce67":"# <center>Tabular Playground Series - June\/2021<center>\n## <center>LightAutoML with KNN Features<center>\n---\n\n- Notebook created with the help of [@alexryzhkov's](https:\/\/www.kaggle.com\/alexryzhkov) notebook [LightAutoML baseline TPS June 2021](https:\/\/www.kaggle.com\/alexryzhkov\/lightautoml-baseline-tps-june-2021) and the LightAutoML documentation.\n- Using KNN features provided by [@melanie7744's](https:\/\/www.kaggle.com\/melanie7744) notebook [TPS6-Boost your score with KNN features](https:\/\/www.kaggle.com\/melanie7744\/tps6-boost-your-score-with-knn-features).\n","268adf1e":"## LightAutoML","92fd4302":"## Importing Libraries and Datasets"}}