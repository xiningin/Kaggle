{"cell_type":{"c4ab2a9f":"code","b52685a6":"code","c06749ef":"code","a7ee93c5":"code","c7294e2f":"code","3fc12fa0":"code","2c1c8a7a":"code","e3ec0fb3":"code","3e9ae562":"code","c0b35b06":"code","e732b12c":"code","1fb2e943":"code","5b882c7d":"code","13a2d90a":"code","57c9aede":"code","5a946086":"code","5588c323":"code","ee76d870":"code","7fae7d6b":"code","54655d7a":"code","8c407966":"code","34a22ed4":"code","aa0cd9da":"code","adcb687d":"code","5c69c240":"code","59276b11":"code","69c0b274":"code","7da4a44b":"code","deb01c81":"markdown"},"source":{"c4ab2a9f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b52685a6":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline \n","c06749ef":"df = pd.read_csv(\"..\/input\/google-play-store-apps\/googleplaystore.csv\")\ndf","a7ee93c5":"df.shape","c7294e2f":"df.columns","3fc12fa0":"df.describe\n","2c1c8a7a":"df.boxplot()","e3ec0fb3":"df.hist()","3e9ae562":"df.info()","c0b35b06":"df.isnull()","e732b12c":"df.isnull().sum()","1fb2e943":"df[df.Rating>5]","5b882c7d":"df.drop([10472],inplace=True)","13a2d90a":"df[10470:10475]","57c9aede":"df.boxplot()","5a946086":"df.hist()","5588c323":"#Define a function impute_median\ndef impute_median(series):\n    return series.fillna(series.median())","ee76d870":"df.Rating = df['Rating'].transform(impute_median)","7fae7d6b":"\n#count the number of null values in each column\ndf.isnull().sum()","54655d7a":"# Fill the missing categorical values with mode\ndf['Type'].fillna(str(df['Type'].mode().values[0]), inplace=True)\ndf['Current Ver'].fillna(str(df['Current Ver'].mode().values[0]), inplace=True)\ndf['Android Ver'].fillna(str(df['Android Ver'].mode().values[0]), inplace=True)","8c407966":"#count the number of null values in each column\ndf.isnull().sum()","34a22ed4":"\n### Let's convert Price, Reviews and Ratings into Numerical Values\ndf['Price'] = df['Price'].apply(lambda x: str(x).replace('$', '') if '$' in str(x) else str(x))\ndf['Price'] = df['Price'].apply(lambda x: float(x))\ndf['Reviews'] = pd.to_numeric(df['Reviews'], errors='coerce')","aa0cd9da":"df['Installs'] = df['Installs'].apply(lambda x: str(x).replace('+', '') if '+' in str(x) else str(x))\ndf['Installs'] = df['Installs'].apply(lambda x: str(x).replace(',', '') if ',' in str(x) else str(x))\ndf['Installs'] = df['Installs'].apply(lambda x: float(x))","adcb687d":"\ngrp = df.groupby('Category')\nx = grp['Rating'].agg(np.mean)\ny = grp['Price'].agg(np.sum)\nz = grp['Reviews'].agg(np.mean)\nprint(x)\nprint(y)\nprint(z)","5c69c240":"plt.figure(figsize=(12,5))\nplt.plot(x, \"ro\", color='g')\nplt.xticks(rotation=90)\nplt.show()","59276b11":"plt.figure(figsize=(16,5))\nplt.plot(x,'ro', color='r')\nplt.xticks(rotation=90)\nplt.title('Category wise Rating')\nplt.xlabel('Categories-->')\nplt.ylabel('Rating-->')\nplt.show()","69c0b274":"plt.figure(figsize=(16,5))\nplt.plot(y,'r--', color='b')\nplt.xticks(rotation=90)\nplt.title('Category wise Pricing')\nplt.xlabel('Categories-->')\nplt.ylabel('Prices-->')\nplt.show()","7da4a44b":"plt.figure(figsize=(16,5))\nplt.plot(z,'bs', color='g')\nplt.xticks(rotation=90)\nplt.title('Category wise Reviews')\nplt.xlabel('Categories-->')\nplt.ylabel('Reviews-->')\nplt.show()","deb01c81":"**Importing the required libraries**"}}