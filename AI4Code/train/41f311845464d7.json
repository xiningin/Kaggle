{"cell_type":{"c444429f":"code","f55e6593":"code","9ef39104":"code","b9625632":"code","e6025e82":"code","8ca98e7b":"code","f1ea9d6e":"code","a8106d53":"code","2105cf54":"code","a66e98d2":"code","f6ead498":"code","82458c56":"code","a7e033a6":"markdown","cd9bb8ba":"markdown","89fad332":"markdown","4aaf0c3e":"markdown","73837794":"markdown","5be95e64":"markdown","56a75089":"markdown"},"source":{"c444429f":"import numpy as np # linear algebra\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","f55e6593":"import pandas as pd\nfrom sklearn.metrics import f1_score, accuracy_score, roc_auc_score, ConfusionMatrixDisplay, precision_score, confusion_matrix, recall_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nimport seaborn as sns\nimport matplotlib.pyplot as plt","9ef39104":"data = pd.read_csv('..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv')","b9625632":"data.info()\ndata['gender'].unique()","e6025e82":"data['ever_married'].unique()","8ca98e7b":"data['work_type'].unique()","f1ea9d6e":"data['Residence_type'].unique()","a8106d53":"data['smoking_status'].unique()","2105cf54":"data[\"gender\"] = data[\"gender\"].apply(lambda x: 1 if x==\"Male\" else 0)\ndata[\"ever_married\"] = data[\"ever_married\"].apply(lambda x: 1 if x==\"Yes\" else 0)\ndata[\"Residence_type\"] = data[\"Residence_type\"].apply(lambda x: 1 if x==\"Urban\" else 0)\ndata[\"work_type\"] = data[\"work_type\"].apply(lambda x: 0 if x==\"children\" else 1)\ndata[\"smoking_status\"] = data[\"smoking_status\"].apply(lambda x: 0 if x==\"never smoked\" else 1 )\ndata = data.drop('id', axis = 1)\ndata.bmi = data.bmi.fillna(-9999)\n\ndata.head()","a66e98d2":"x = data.drop('stroke',axis=1).values\ny = data['stroke'].values\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=0)","f6ead498":"\nfrom xgboost.sklearn import XGBClassifier\nclf = XGBClassifier(\nbooster = \"gbtree\",\nobjective = \"reg:logistic\",\nn_estimators=50,\nalpha = 0,\nlearning_rate= 0.2,\nmax_depth=8,\nsubsample=1,\ngamma=0,\nreg_lambda=1,\nmax_delta_step=0,\ncolsample_bytree=1,\nmin_child_weight=1,\nseed=1000\n)\n\nclf.fit(x_train, y_train,eval_metric='auc')\ny_pred=clf.predict(x_test)\ny_true= y_test\n\nXG_f1 = f1_score(y_true = y_test , y_pred = y_pred, average = 'weighted')\nROC = roc_auc_score(y_test, y_pred)  \nprecision = precision_score(y_test, y_pred)  \nrecall = recall_score(y_test, y_pred)\ncm = confusion_matrix(y_test, y_pred)\nplt.figure(figsize = (6, 4))\nsns.heatmap(cm, cmap = 'Oranges', annot = True, fmt = 'd', linewidths = 3, cbar = False,yticklabels = ['No Stroke', 'Stroke'], xticklabels = ['Predicted No Stroke', 'Predicted Stroke'])\nplt.show()\n\nprint(\"XGB_Accuracy : %.4g\" % metrics.accuracy_score(y_true, y_pred),\"    \",  \"XGB_F1-score : %.4g\" % XG_f1, \"\\n\",\"XGB_ROC_AUC_score : %.4g\" % ROC,\"    \", \"XGB_precision : %.4g\" % precision, \"    \",\"XGB_recall : %.4g\" % recall)\n","82458c56":"from sklearn import ensemble\nforest = ensemble.RandomForestClassifier(n_estimators = 100)\nforest_fit = forest.fit(x_train, y_train)\ny_test_predicted = forest.predict(x_test)\ny_pred=forest.predict(x_test)\ny_true= y_test\nRF_f1 = f1_score(y_true = y_test , y_pred = y_pred, average = 'weighted')\n\nRF_ROC = roc_auc_score(y_test, y_pred)  \nRF_precision = precision_score(y_test, y_pred)  \nRF_recall = recall_score(y_test, y_pred)\nRF_cm = confusion_matrix(y_test, y_pred)\nplt.figure(figsize = (6, 4))\nsns.heatmap(RF_cm, cmap = 'Oranges', annot = True, fmt = 'd', linewidths = 3, cbar = False,yticklabels = ['No Stroke', 'Stroke'], xticklabels = ['Predicted No Stroke', 'Predicted Stroke'])\nplt.show()\n\nprint(\"RF_Accuracy : %.4g\" % metrics.accuracy_score(y_true, y_pred),\"    \",  \"RF_F1-score : %.4g\" %  RF_f1, \"\\n\",\"RF_ROC_AUC_score : %.4g\" % RF_ROC,\"    \", \"RF_precision : %.4g\" % RF_precision, \"    \", \"RF_recall : %.4g\" % RF_recall)","a7e033a6":"# **Import**","cd9bb8ba":"# **Checking dataset**","89fad332":"# **Loading dataset**","4aaf0c3e":"# **Building XGBoost Classifier model**","73837794":"# **Data cleaning**","5be95e64":"# **Split dataset into training set and test set**\n\n# **70% training and 30% testing**","56a75089":"# **Building Random Forest Classifier model**"}}