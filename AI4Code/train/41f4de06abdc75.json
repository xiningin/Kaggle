{"cell_type":{"dbf74207":"code","3d7f4366":"code","6ff5d962":"code","d49f34bb":"code","238688f3":"code","04489f6f":"code","39c5b36e":"code","c9fb9a7c":"code","10730262":"code","69f84c99":"code","a2358f19":"code","fcdf276b":"code","de314a78":"code","fa8eadf6":"code","870edc64":"code","0f594542":"code","49aa2e9b":"code","0e461250":"code","cf748287":"code","eb19907b":"code","74be5aad":"code","4bd6850d":"code","5de467fd":"code","f9f682f9":"code","3c557019":"code","a13a1c40":"code","a7b3e8f9":"code","b4e15904":"markdown","609ae385":"markdown","0e11142e":"markdown","b5251ed7":"markdown","ba57fe59":"markdown","99966119":"markdown","048700da":"markdown","3ab14ac7":"markdown","136c6c3c":"markdown","74c10461":"markdown","678901dd":"markdown"},"source":{"dbf74207":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3d7f4366":"import pandas as pd\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import confusion_matrix, classification_report","6ff5d962":"data_df = pd.read_json(\"\/kaggle\/input\/news-headlines-dataset-for-sarcasm-detection\/Sarcasm_Headlines_Dataset_v2.json\", lines = True)","d49f34bb":"data_df.head(10)","238688f3":"data_df.shape","04489f6f":"X_train, X_test, y_train, y_test = train_test_split(data_df[['headline']], data_df[['is_sarcastic']], test_size=0.2, random_state=101)","39c5b36e":"X_train.shape,y_train.shape,X_test.shape,y_test.shape","c9fb9a7c":"X_train = X_train.reset_index()\ny_train = y_train.reset_index()\nX_test = X_test.reset_index()\ny_test = y_test.reset_index()","10730262":"sentences = []\nlabels = []\ntest_sentences = []\ntest_labels = []","69f84c99":"for index in range(1,len(X_train)):\n    sentences.append(X_train['headline'][index])\n    labels.append(y_train['is_sarcastic'][index])","a2358f19":"for index in range(1,len(X_test)):\n    test_sentences.append(X_test['headline'][index])\n    test_labels.append(y_test['is_sarcastic'][index])","fcdf276b":"sentences[1:10], labels[1:10]","de314a78":"test_sentences[1:10], test_labels[1:10]","fa8eadf6":"vocab_size=10000\noov_token = \"oov\"\nmax_length = 15\nembedding_dim=16","870edc64":"tokenizer = Tokenizer(num_words = vocab_size, oov_token= oov_token)\ntokenizer.fit_on_texts(sentences)\nword_index = tokenizer.word_index\n#print(word_index)","0f594542":"training_sequences = tokenizer.texts_to_sequences(sentences)\ntraining_padded = pad_sequences(training_sequences,padding='post', maxlen=max_length)\nprint(training_padded[0])\nprint(training_padded.shape)","49aa2e9b":"testing_sequences = tokenizer.texts_to_sequences(test_sentences)\ntesting_padded = pad_sequences(testing_sequences,padding='post', maxlen=max_length)\nprint(testing_padded[0])\nprint(testing_padded.shape)","0e461250":"model = tf.keras.Sequential([\n    tf.keras.layers.Embedding(vocab_size,embedding_dim,input_length=max_length),\n    tf.keras.layers.GlobalAveragePooling1D(),\n    tf.keras.layers.Dense(24,activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n    \n])","cf748287":"model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])","eb19907b":"num_epochs=10","74be5aad":"training_padded = np.array(training_padded)\nlabels = np.array(labels)\ntesting_padded = np.array(testing_padded)\ntest_labels = np.array(test_labels)","4bd6850d":"history=model.fit(training_padded,labels,epochs=num_epochs,validation_data=(testing_padded,test_labels),verbose=1)","5de467fd":"def plot_graphs(history, string):\n  plt.plot(history.history[string])\n  plt.plot(history.history['val_'+string])\n  plt.xlabel(\"Epochs\")\n  plt.ylabel(string)\n  plt.legend([string, 'val_'+string])\n  plt.show()\n  \nplot_graphs(history, \"accuracy\")\nplot_graphs(history, \"loss\")","f9f682f9":"reverse_word_index = dict([(value, key) for (key, value) in word_index.items()])\n\ndef decode_sentence(text):\n    return ' '.join([reverse_word_index.get(i, '?') for i in text])\n\nprint(decode_sentence(training_padded[10]))\nprint(sentences[10])\nprint(labels[10])","3c557019":"print(decode_sentence(training_padded[1]))\nprint(sentences[1])\nprint(labels[1])","a13a1c40":"print(decode_sentence(testing_padded[15]))\nprint(test_sentences[15])\nprint(test_labels[15])","a7b3e8f9":"embeddingLayers = model.layers[0]\nweights = embeddingLayers.get_weights()[0]\nprint(weights.shape)","b4e15904":"#### Validation accuracy is around 0.85 and validation loss after decreasing starts to increase","609ae385":"#### the embedding layer and the learned weights","0e11142e":"#### Reference: Training a model to recognize sentiment in text (NLP Zero to Hero - Part 3)","b5251ed7":"#### tokenizer is only fit on the training sentences","ba57fe59":"# data","99966119":"# libraries","048700da":"#### training sequences","3ab14ac7":"# Train and test split","136c6c3c":"# Tokenization","74c10461":"# Model learning","678901dd":"#### test sequences"}}