{"cell_type":{"fa95dddb":"code","b5ee2adc":"code","10df1d31":"code","394350b9":"code","4b7ae0d1":"code","456a09c1":"code","bbe298f5":"code","889f8baf":"code","80a761c4":"code","fab907e1":"code","47167234":"code","28218ad8":"code","7146241b":"code","16bbd60c":"code","e2f92f65":"code","3cce2992":"code","65b75c9a":"code","646fdfcd":"code","f63763aa":"code","00fc4060":"code","5c893e87":"code","44f352de":"code","20c9fd85":"code","ec67f38b":"code","a3d1a03c":"code","95a26038":"code","0a27b6d0":"code","f8cde47a":"code","123c2856":"code","266c6b09":"code","88aed3da":"code","8c9a912a":"code","9c69e909":"code","24e514b2":"code","57c2fc8e":"code","222ca187":"code","ce1964e1":"code","6345fdbc":"code","48d79391":"code","ec01fe7c":"code","db3704a5":"code","a90edb11":"code","d887a424":"code","827e27bf":"code","677fbded":"code","89c15514":"code","cf524b54":"code","a2e0f022":"code","9de62a67":"code","57fa637d":"code","8270eb73":"code","43490d71":"code","3c827ff4":"code","1af99cd7":"code","136995a6":"code","91d047c5":"code","4cc31da9":"code","0564766c":"code","a47290fc":"markdown"},"source":{"fa95dddb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b5ee2adc":"raw_df = pd.read_csv(\"\/kaggle\/input\/weather-dataset-rattle-package\/weatherAUS.csv\")","10df1d31":"raw_df","394350b9":"raw_df.info()","4b7ae0d1":"raw_df.dropna(subset = [\"RainToday\", \"RainTomorrow\"], inplace = True)","456a09c1":"raw_df.isna().sum()","bbe298f5":"raw_df","889f8baf":"import plotly.express as px\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nsns.set_style(\"darkgrid\")\nmatplotlib.rcParams[\"font.size\"] = 14\nmatplotlib.rcParams[\"figure.figsize\"] = (10,6)\nmatplotlib.rcParams[\"figure.facecolor\"] = \"#00000000\"","80a761c4":"px.histogram(raw_df, x = \"Location\", \n             title = \"Location vs Rainy Days\", \n             color = \"RainToday\")","fab907e1":"px.histogram(raw_df, x =\"Temp3pm\", \n            title = \"Temperature at 3pm vs. Rain Tomorrow\",\n            color = \"RainTomorrow\")","47167234":"px.histogram(raw_df, x = \"RainTomorrow\",\n            color = \"RainToday\",\n            title = \"Rain Tomorrow vs. Rain Today\")","28218ad8":"px.scatter(raw_df.sample(2000),\n          title =\"Min Temp Vs Max Temp\",\n          x = \"MinTemp\",\n          y = \"MaxTemp\",\n          color = \"RainToday\")","7146241b":"px.scatter(raw_df.sample(2000),\n          title = \"Temp at 3pm Vs Humidity at 3pm\",\n          x = \"Temp3pm\",\n          y = \"Humidity3pm\",\n          color = \"RainTomorrow\")","16bbd60c":"from sklearn.model_selection import  train_test_split","e2f92f65":"train_val_df, test_df = train_test_split(raw_df, test_size = 0.2, \n                                         random_state = 42)\ntrain_df, val_df = train_test_split(train_val_df, test_size = 0.25, \n                                   random_state = 42)","3cce2992":"print(\"tarin_df.shape : \", train_df.shape)\nprint(\"val_df.shape : \", val_df.shape)\nprint(\"test_df.shape : \", test_df.shape)","65b75c9a":"plt.title(\"No of rows per year\")\nsns.countplot(x = pd.to_datetime(raw_df.Date).dt.year);","646fdfcd":"year = pd.to_datetime(raw_df.Date).dt.year\n\ntrain_df = raw_df[year < 2015]\nval_df = raw_df[year == 2015]\ntest_df = raw_df[year > 2015]","f63763aa":"raw_df","00fc4060":"train_df","5c893e87":"val_df","44f352de":"test_df","20c9fd85":"train_df.columns[1:-1]","ec67f38b":"train_df.columns[-1]","a3d1a03c":"input_cols = list(train_df.columns)[1:-1]\ntarget_col = \"RainTomorrow\"","95a26038":"train_inputs = train_df[input_cols].copy()\ntrain_target = train_df[target_col].copy()","0a27b6d0":"val_inputs = val_df[input_cols].copy()\nval_target = val_df[target_col].copy()","f8cde47a":"test_inputs = test_df[input_cols].copy()\ntest_target = test_df[target_col].copy()","123c2856":"train_inputs\n","266c6b09":"train_target","88aed3da":"numeric_cols = train_inputs.select_dtypes(include = np.number).columns.tolist()\ncategorical_cols = train_inputs.select_dtypes(\"object\").columns.tolist()","8c9a912a":"train_inputs[numeric_cols].describe()","9c69e909":"from sklearn.impute import SimpleImputer","24e514b2":"imputer = SimpleImputer(strategy = \"mean\")","57c2fc8e":"raw_df[numeric_cols].isna().sum()","222ca187":"imputer.fit(raw_df[numeric_cols])","ce1964e1":"list(imputer.statistics_)","6345fdbc":"train_inputs[numeric_cols] = imputer.transform(train_inputs[numeric_cols])\nval_inputs[numeric_cols] = imputer.transform(val_inputs[numeric_cols])\ntest_inputs[numeric_cols] = imputer.transform(test_inputs[numeric_cols])","48d79391":"train_inputs[numeric_cols].isna().sum()","ec01fe7c":"from sklearn.preprocessing import MinMaxScaler","db3704a5":"?MinMAxScaler","a90edb11":"scaler = MinMaxScaler()","d887a424":"scaler.fit(raw_df[numeric_cols])","827e27bf":"list(scaler.data_min_)","677fbded":"train_inputs[numeric_cols] = scaler.transform(train_inputs[numeric_cols])\nval_inputs[numeric_cols] = scaler.transform(val_inputs[numeric_cols])\ntest_inputs[numeric_cols] = scaler.transform(test_inputs[numeric_cols])","89c15514":"train_inputs[numeric_cols].describe()","cf524b54":"train_inputs[categorical_cols].nunique()","a2e0f022":"from sklearn.impute import SimpleImputer","9de62a67":"imputer = SimpleImputer(strategy = \"mean\")","57fa637d":"raw_df[numeric_cols].isna().sum()","8270eb73":"imputer.fit(raw_df[numeric_cols])","43490d71":"imputer.statistics_","3c827ff4":"train_inputs = imputer.transform(train_inputs[numeric_cols])\nval_inputs = imputer.transform(val_inputs[numeric_cols])\ntest_inputs = imputer.transform(test_inputs[numeric_cols])","1af99cd7":"raw_df[numeric_cols].describe()","136995a6":"from sklearn.preprocessing import MinMaxScaler","91d047c5":"scaler = MinMaxScaler()","4cc31da9":"scaler.fit(raw_df[numeric_cols])","0564766c":"scaler.data_min_","a47290fc":"## **Exploratory Data Analysis and Visualization**"}}