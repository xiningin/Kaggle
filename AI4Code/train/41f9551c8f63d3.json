{"cell_type":{"7b635cc0":"code","17997c99":"code","84a2e6be":"code","28c4ccb0":"code","a983600f":"code","a85e1589":"code","b573b755":"code","b5476705":"code","d69d6f2d":"code","7dfa2da7":"code","f0986910":"code","3dbb785f":"code","09b87c75":"code","0d052476":"code","80a33bd9":"code","b8982d7a":"code","6b5f8ced":"code","e217f8be":"code","24a374b7":"code","1cd5c63d":"code","d5a224c7":"code","d217778a":"code","43a7f352":"code","c2428db3":"code","53ce24c0":"code","1744ce97":"code","707a01af":"code","0526b197":"code","98fb5648":"code","b2e237f8":"code","2e46a10d":"code","1cf5e06b":"code","88d6b6a3":"code","757be1ae":"code","3ea2a8e6":"code","3835c7d6":"code","36d8e27c":"code","2d672b86":"code","8ceccaba":"code","01f09ee3":"code","ed1e0297":"code","bf0093ac":"code","8acd9377":"code","3df1f7a9":"code","ee5b4605":"code","161397eb":"markdown","ab6f38f3":"markdown","f5dc0b6c":"markdown","3cfd6f4f":"markdown","3e311761":"markdown","7e1381c2":"markdown","05ae2cf6":"markdown","27ac2334":"markdown"},"source":{"7b635cc0":"%matplotlib inline\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib as matplotlib\nfrom matplotlib import pyplot as plt\nimport matplotlib.gridspec as gridspec\nfrom datetime import datetime\nimport os\nimport gc\nimport json\nfrom scipy.optimize import curve_fit\nimport datetime\nfrom pathlib import Path\n\nimport plotly.express as px\nfrom urllib.request import urlopen","17997c99":"pd.options.display.float_format = '{:,.3f}'.format\npd.set_option('display.max_columns', 50)","84a2e6be":"df = pd.read_csv('https:\/\/query.data.world\/s\/keax53lpqwffhayvcjmowjiydtevwo', parse_dates=['REPORT_DATE']).copy()","28c4ccb0":"df.head()","a983600f":"print(\"date range: {0} to {1}\".format(df['REPORT_DATE'].min(), df['REPORT_DATE'].max()))","a85e1589":"df_us = df[df['COUNTRY_ALPHA_2_CODE'] == 'US']","b573b755":"df_us['PROVINCE_STATE_NAME'].unique()","b5476705":"df_usp = df_us.groupby(['REPORT_DATE','PROVINCE_STATE_NAME']).sum()[\n    [\n        'PEOPLE_POSITIVE_CASES_COUNT', \n        'PEOPLE_POSITIVE_NEW_CASES_COUNT', \n        'PEOPLE_DEATH_COUNT', \n        'PEOPLE_DEATH_NEW_COUNT'\n    ]\n]\ndf_usp['MORTALITY_RATIO'] = df_usp['PEOPLE_DEATH_COUNT']\/df_usp['PEOPLE_POSITIVE_CASES_COUNT']\ndf_usp = df_usp.unstack().copy().drop('District of Columbia', level=1, axis=1)","d69d6f2d":"top_10 = df_usp.xs('PEOPLE_DEATH_COUNT', axis=1, level=0).iloc[-1].sort_values(ascending=False)[0:10].index.values\ntop_25 = df_usp.xs('PEOPLE_DEATH_COUNT', axis=1, level=0).iloc[-1].sort_values(ascending=False)[0:25].index.values","7dfa2da7":"print(\"Total deaths to date:\\n{0}\".format(df_usp.xs('PEOPLE_DEATH_COUNT', axis=1, level=0).iloc[-1][top_25]))","f0986910":"df_usp.xs('PEOPLE_DEATH_COUNT', axis=1, level=0).iloc[30::][top_10].plot.line(\n    figsize=(12,9),\n    title=\"Top 10 US States with the most commulative COVID-19 fatalities\"\n);","3dbb785f":"df_usp.xs('PEOPLE_POSITIVE_CASES_COUNT', axis=1, level=0).iloc[30::].rolling(window=5).mean().diff().rolling(3).mean().plot(\n    subplots=True, \n#     ylim=(-10,25), \n    layout=(10,5), \n    figsize=(18,24),\n    grid=True, \n    title='New confirmed COVID-19 cases (US \/ daily rolling average)',\n);","09b87c75":"df_usp.xs('PEOPLE_DEATH_COUNT', axis=1, level=0).iloc[30::].rolling(window=5).mean().diff().rolling(3).mean().plot(\n    subplots=True, \n#     ylim=(-10,25), \n    layout=(10,5), \n    figsize=(18,24),\n    grid=True, \n    title='New COVID-19 fatalities (US \/ daily rolling average)',\n);","0d052476":"df_usp.xs('MORTALITY_RATIO', axis=1, level=0).iloc[30::].rolling(window=5).mean().plot(\n    subplots=True, \n#     ylim=(-10,25), \n    layout=(10,5), \n    figsize=(18,24),\n    grid=True, \n    title='Mortality Ratio by state over time',\n);","80a33bd9":"df_usp.xs('MORTALITY_RATIO', axis=1, level=0).iloc[30::].rolling(window=5).mean().iloc[-1].plot.box(\n    title=\"Range of US State Mortalities (median: {0:0.1f}%)\".format(np.median(df_usp.xs('MORTALITY_RATIO', axis=1, level=0).iloc[30::].rolling(window=5).mean().iloc[-1].fillna(0).values)*100)\n)","b8982d7a":"df_cp = df.groupby(['REPORT_DATE','COUNTRY_SHORT_NAME']).sum()[\n    [\n        'PEOPLE_POSITIVE_CASES_COUNT', \n        'PEOPLE_POSITIVE_NEW_CASES_COUNT', \n        'PEOPLE_DEATH_COUNT', \n        'PEOPLE_DEATH_NEW_COUNT'\n    ]\n]\ndf_cp['MORTALITY_RATIO'] = df_cp['PEOPLE_DEATH_COUNT']\/df_cp['PEOPLE_POSITIVE_CASES_COUNT']\ndf_cp = df_cp.unstack().copy()","6b5f8ced":"top_10c = df_cp.xs('PEOPLE_POSITIVE_CASES_COUNT', axis=1, level=0).iloc[-5:-1].max().sort_values(ascending=False)[0:10].index.values\ntop_25c = df_cp.xs('PEOPLE_POSITIVE_CASES_COUNT', axis=1, level=0).iloc[-5:-1].max().sort_values(ascending=False)[0:25].index.values","e217f8be":"df_cp.xs('PEOPLE_DEATH_COUNT', axis=1, level=0)[top_10c].plot.line(\n    figsize=(12,9),\n    title=\"Top 10 Countries with the most commulative COVID-19 fatalities\"\n);","24a374b7":"df_cp.xs('PEOPLE_POSITIVE_CASES_COUNT', axis=1, level=0).iloc[30::][top_25c].rolling(window=5).mean().diff().rolling(3).mean().plot(\n    subplots=True, \n#     ylim=(-25,100), \n    grid=True, \n    layout=(5,5), \n    figsize=(18,12), \n#     cmap='tab20',\n    title='New confirmed COVID-19 cases (global \/ daily rolling average)'\n);","1cd5c63d":"df_cp.xs('PEOPLE_DEATH_COUNT', axis=1, level=0).iloc[30::][top_25c].rolling(window=5).mean().diff().rolling(3).mean().plot(\n    subplots=True, \n#     ylim=(-25,100), \n    grid=True, \n    layout=(5,5), \n    figsize=(18,12), \n    cmap='tab20',\n    title='New COVID-19 fatalities (global \/ daily rolling average)'\n);","d5a224c7":"df_cp.xs('MORTALITY_RATIO', axis=1, level=0).iloc[30::][top_25c].rolling(window=5).mean().plot(\n    subplots=True, \n#     ylim=(-10,25), \n    layout=(10,5), \n    figsize=(18,24),\n    grid=True, \n    title='Mortality ratio by country over time',\n);","d217778a":"df_cp.xs('MORTALITY_RATIO', axis=1, level=0).iloc[30::].rolling(window=5).mean().iloc[-1].plot.box(\n    title=\"Range of Country Mortalities (median: {0:0.1f}%)\".format(np.median(df_cp.xs('MORTALITY_RATIO', axis=1, level=0).iloc[30::].rolling(window=5).mean().iloc[-1].fillna(0).values)*100)\n)","43a7f352":"df_statepop = pd.read_csv('..\/input\/world-and-us-population-data\/nst-est2019-alldata.csv').iloc[5::]\ndf_countrypop = pd.read_csv('..\/input\/world-and-us-population-data\/world_pop_2020.csv')\ndf_usppop = df_usp.iloc[-1].swaplevel(0,1).unstack().merge(df_statepop[['NAME','POPESTIMATE2019']], left_index=True, right_on='NAME').set_index('NAME')","c2428db3":"df_cppop = df_cp.iloc[-5:-1].max().swaplevel(0,1).unstack().merge(df_countrypop[['country_code','population', 'country']], left_index=True, right_on='country').set_index('country')\ndf_cppop_lg = df_cppop[df_cppop['population'] > 10000000]","53ce24c0":"ax = df_cppop_lg[df_cppop_lg.columns[0:4]].div(df_cppop_lg['population'], axis=0)[['PEOPLE_POSITIVE_CASES_COUNT','PEOPLE_DEATH_COUNT']].sort_values(ascending=False, by='PEOPLE_POSITIVE_CASES_COUNT')[0:50].plot.bar(\n    figsize=(20,8), \n    title=\"% of population infected with or killed by COVID-19 (by country >10M pop)\",\n#     stacked=True,\n#     logy=True\n#     icons='child', \n#     icon_size=18, \n#     icon_legend=True,\n);\nvals = ax.get_yticks();\nax.set_yticklabels(['{:,.1%}'.format(x) for x in vals]);","1744ce97":"ax = df_usppop[df_usppop.columns[0:4]].div(df_usppop['POPESTIMATE2019'], axis=0)[['PEOPLE_POSITIVE_CASES_COUNT','PEOPLE_DEATH_COUNT']].sort_values(ascending=False, by='PEOPLE_POSITIVE_CASES_COUNT')[0:50].plot.bar(\n    figsize=(20,8), \n    title=\"% of population infected with or killed by COVID-19 (by US state)\",\n#     stacked=True,\n#     logy=True\n#     icons='child', \n#     icon_size=18, \n#     icon_legend=True,\n);\nvals = ax.get_yticks();\nax.set_yticklabels(['{:,.1%}'.format(x) for x in vals]);","707a01af":"ax = (df_cppop_lg['PEOPLE_DEATH_COUNT']\/df_cppop_lg['PEOPLE_POSITIVE_CASES_COUNT']).sort_values(ascending=False)[0:50].plot.bar(\n    figsize=(15,8), \n    title=\"Mortality (fatalities per infections \/ by country >10M pop)\"\n);\nvals = ax.get_yticks();\nax.set_yticklabels(['{:,.1%}'.format(x) for x in vals]);","0526b197":"ax = (df_usppop['PEOPLE_DEATH_COUNT']\/df_usppop['PEOPLE_POSITIVE_CASES_COUNT']).sort_values(ascending=False).plot.bar(\n    figsize=(15,8), \n    title=\"Mortality (fatalities per infections \/ by US state)\"\n);\nvals = ax.get_yticks();\nax.set_yticklabels(['{:,.0%}'.format(x) for x in vals]);","98fb5648":"per_x = 100000","b2e237f8":"df_per = df_usp.iloc[-14::].sum().swaplevel(0,1).unstack().merge(df_statepop[['NAME','POPESTIMATE2019']], left_index=True, right_on='NAME').set_index('NAME')\n","2e46a10d":"(df_per['PEOPLE_POSITIVE_NEW_CASES_COUNT']\/df_per['POPESTIMATE2019']*10000).sort_values(ascending=False).plot.bar(\n    figsize=(15,8), \n    title=\"Active infections per 10,000 people (based on 14 day infection period)\"\n);","1cf5e06b":"df_rinf = df_usp.xs('PEOPLE_POSITIVE_NEW_CASES_COUNT', axis=1, level=0).rolling(window=14).sum().iloc[-180::].T.merge(\n    df_statepop[['NAME','POPESTIMATE2019']], left_index=True, right_on='NAME').set_index('NAME')\ndf_rinf_popadj = (df_rinf[df_rinf.columns[0:-2]].div(df_rinf[df_rinf.columns[-1]], axis=0)*per_x)\ndf_rinf_popadj.T.plot(\n    subplots=True, \n#     ylim=(0.01,50),\n#     logy=True,\n    grid=True, \n    layout=(12,5), \n    figsize=(18,24), \n#     cmap='tab20',\n    title='Active infections per 10,000 people (based on 14 infection period)'\n);","88d6b6a3":"(df_rinf[df_rinf.columns[0:-2]].div(df_rinf[df_rinf.columns[-1]], axis=0)*10000).T.iloc[-1].plot.box(\n    title=\"Range of State Infection Rate (median: {0:0.1f}%)\".format(np.median((df_rinf[df_rinf.columns[0:-2]].div(df_rinf[df_rinf.columns[-1]], axis=0)*10000).T.iloc[-1].values))\n)","757be1ae":"df_states = pd.read_csv('..\/input\/us-states\/us_states.csv')","3ea2a8e6":"df_rinf_popadj_ansi = df_rinf_popadj.merge(df_states[['Subdivision name', 'Ansi']], left_index=True, right_on=\"Subdivision name\" )","3835c7d6":"df_rinf_popadj_ansi.head()","36d8e27c":"df_rinf_popadj_ansi.columns[-3]","2d672b86":"fig = px.choropleth(\n    df_rinf_popadj_ansi,\n    locations=\"Ansi\", \n    locationmode=\"USA-states\", \n    color=df_rinf_popadj_ansi[df_rinf_popadj_ansi.columns[-3]].values,       \n    color_continuous_scale=\"YlOrRd\",\n    range_color=(0, 500),    \n    scope=\"usa\",\n    labels={df_rinf_popadj_ansi.columns[-3]:'Current cases per {0:,} people'.format(per_x)},\n)\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()","8ceccaba":"df_rinf_popadj_ansi2 = df_rinf_popadj_ansi.set_index('Ansi').drop('Subdivision name', axis=1).stack()\ndf_rinf_popadj_ansi2.index = df_rinf_popadj_ansi2.index.swaplevel(0,1)\ndf_rinf_popadj_ansi2 = df_rinf_popadj_ansi2.unstack()\ndf_rinf_popadj_ansi2.index = pd.to_datetime(df_rinf_popadj_ansi2.index)\ndf_rinf_popadj_ansi2 = df_rinf_popadj_ansi2.resample('W').mean()\ndf_rinf_popadj_ansi2 = df_rinf_popadj_ansi2.stack().reset_index()\ndf_rinf_popadj_ansi2['date_str'] = df_rinf_popadj_ansi2['level_0'].astype('str')\n\n# df_rinf_popadj_ansi2","01f09ee3":"fig = px.choropleth(\n    df_rinf_popadj_ansi2,\n    locations=\"Ansi\", \n    locationmode=\"USA-states\", \n    color=0,       \n    color_continuous_scale=\"YlOrRd\",\n    range_color=(0, 500),    \n    scope=\"usa\",\n#     labels={df_rinf_popadj_ansi.columns[-3]:'Current cases per {0:,} people'.format(PER_X)},\n    animation_frame=\"date_str\",\n    animation_group=\"Ansi\",\n    hover_name=\"Ansi\",\n)\nfig.show()","ed1e0297":"# df_trc = df.groupby(['Date','Country_Region','Case_Type']).agg({'Cases':sum,'Population_Count':sum})\n\ndf_rinfc = df_cp.xs('PEOPLE_POSITIVE_NEW_CASES_COUNT', axis=1, level=0)[top_25c].rolling(window=14).sum().iloc[-180::].T.merge(\n    df_countrypop[['country_code','population', 'country']], left_index=True, right_on='country').set_index('country')\n\n(df_rinfc[df_rinfc.columns[0:-2]].div(df_rinfc[df_rinfc.columns[-1]], axis=0)*10000).T.plot(\n    subplots=True, \n#     ylim=(0.01,50),\n#     logy=True,\n    grid=True, \n    layout=(5,5), \n    figsize=(18,12), \n    cmap='tab20',\n    title='Active infections per 10,000 people (based on 14 infection period)'\n);","bf0093ac":"def make_fips(st, ct):\n    return \"{0:02d}{1:03d}\".format(st, ct)\ndf_countypop = pd.read_csv('..\/input\/us-pop\/co-est2019-alldata.csv', engine='python');\ndf_countypop['fips'] = df_countypop.apply(lambda x: make_fips(x['STATE'],x['COUNTY']), axis=1);\n# extract NYC population since COVID dataset bundles all NYC counties as one location\nnyc_pop = df_countypop[df_countypop['CTYNAME'].isin(['New York County','Kings County','Bronx County','Richmond County','Queens County'])]['POPESTIMATE2019'].sum();","8acd9377":"def clean_county_name(name):   \n    toks = name.split()\n    if toks[-1] in ['County', 'Area', 'Municipality','Parish']:\n        return \" \".join(toks[0:-1])\n    else:\n        return name","3df1f7a9":"df_countypop['CTYNAME_SHORT'] = df_countypop['CTYNAME'].apply(lambda x: clean_county_name(x));\ndf_countypop['STATE-COUNTY'] = df_countypop.apply(lambda x: \"{0}, {1}\".format(x['CTYNAME_SHORT'],x['STNAME']), axis=1);\ndf_us['STATE-COUNTY'] = df_us.apply(lambda x: \"{0}, {1}\".format(x['COUNTY_NAME'],x['PROVINCE_STATE_NAME']), axis=1)\ndf_uscp = df_us.groupby(['REPORT_DATE','STATE-COUNTY']).sum()[\n    [\n        'PEOPLE_POSITIVE_CASES_COUNT', \n        'PEOPLE_POSITIVE_NEW_CASES_COUNT', \n        'PEOPLE_DEATH_COUNT', \n        'PEOPLE_DEATH_NEW_COUNT'\n    ]\n].unstack().copy();\n\ndf_uscppop = df_uscp.iloc[-14::].sum().swaplevel(0,1).unstack().merge(df_countypop[['STATE-COUNTY','REGION','DIVISION','STNAME','CTYNAME_SHORT','fips','POPESTIMATE2019']], left_index=True, right_on='STATE-COUNTY').set_index('STATE-COUNTY');\n\ndf_uscppop['14D_CASES_POP_ADJ'] = (df_uscppop['PEOPLE_POSITIVE_NEW_CASES_COUNT']\/df_uscppop['POPESTIMATE2019']*per_x);\ndf_uscppop['14D_DEATHS_POP_ADJ'] = (df_uscppop['PEOPLE_DEATH_NEW_COUNT']\/df_uscppop['POPESTIMATE2019']*per_x);\n\ndf_uscppop['label'] = df_uscppop.apply(lambda x: \"{0} (pop: {1:,})\".format(x.CTYNAME_SHORT,x.POPESTIMATE2019), axis=1);\n\n","ee5b4605":"from urllib.request import urlopen\nimport json\nimport plotly.express as px\n\nwith urlopen('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/geojson-counties-fips.json') as response:\n    counties = json.load(response)\n\nfig = px.choropleth(\n    df_uscppop, \n    geojson=counties, \n    locations='fips', \n    color='14D_CASES_POP_ADJ',       \n    color_continuous_scale=\"YlOrRd\",\n#     color_continuous_scale=\"matter\",\n    range_color=(0, 1000),\n#     color_continuous_midpoint=(250),\n    scope=\"usa\",\n    labels={\n        '14D_CASES_POP_ADJ':'Current cases per {0:,} people'.format(per_x), \n#         \"POPESTIMATE2019\":\"Polulation\",\n    },\n    hover_name='label',\n    width=1200, \n    height=800,\n)\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()\n","161397eb":"# county data","ab6f38f3":"The graphs below show the growth trends by state.  Note that the left axis is not standardized between states so it's important to look at the magnitude.","f5dc0b6c":"# Global Trends","3cfd6f4f":"# infected population","3e311761":"# US Trends","7e1381c2":"# Population Normed Comparisons","05ae2cf6":"The graphs below show the growth trends by country. Note that the left axis is not standardized between states so it's important to look at the magnitude.  Also note that this depends on accurate reporting by the countried themselves, which is questionable in some cases.","27ac2334":"The chart below shows the \"mortality\" of COVID-19 by region.  The very wide range of mortality could be due to very different potency of the virus in different regions (unlikely), differences in testing and reporting accuracy (more likely) or lag (since fatalities happen days or weeks after infection).  Germany seems to have the most robust testing and reporting system at the moment and their mortality rate hovers between 4-5%. "}}