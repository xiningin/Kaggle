{"cell_type":{"72e50f43":"code","afda1395":"code","79c3e3fb":"code","bf39b665":"code","5d1ee955":"code","279d00b9":"code","82ec0911":"code","1f313e68":"code","fc9bda4f":"code","da1f4a44":"markdown"},"source":{"72e50f43":"# Find earthquake data at: https:\/\/www.cisn.org\/shakemap\/sc\/shake\/archive\/\n# Copy shakemap to data\/CISN-Shakemap-May-2020.csv\n# Set the delimiter to |\n# Change the column headings to:\n#     EQ_EventID|EQ_Epicenter|EQ_Date|EQ_Time|EQ_Lat|EQ_Lng|EQ_Mag\n\nAstroPiQuake_data = \"\/kaggle\/input\/shakemap\/AstroPiQuake-2019.csv\"\nshakemap = \"\/kaggle\/input\/shakemap\/CISN-Shakemap-July-2019.csv\"\n\n# earthquake magnitude threshold\nEQmagnitude = 3.5\n\n# import the necessary libraries and set the dataframe viewing options\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\npd.options.display.max_columns=50\npd.options.display.max_rows=250","afda1395":"# A sensor reading was taken every 5 minutes with a timestamp in this format:  20190715 01:50\n# Reformat this timestamp into three fields: READING_DATE:  2019-07-15, READING_TIME: 01:50, and MERGEHOUR: 20190715 01\n# MERGEHOUR is used so that sensor readings taken within one hour of a known earthquake can be merged into a new dataframe for further analysis to find sensor readings during an eathquake\n\naq = pd.read_csv(AstroPiQuake_data)\nprint(aq.info())\naq['READING_DATE'] = pd.to_datetime(aq['timestamp'].str[:8]).apply(lambda x:x.strftime('%Y-%m-%d'))\naq['READING_TIME'] = aq['timestamp'].str[-5:]\naq['MERGEHOUR'] = aq['timestamp'].str[:11]\nprint(\"\\nBefore dropping duplicates: \", aq.shape)\naq.sort_values([\"READING_DATE\", \"READING_TIME\"], inplace = True) \naq.drop_duplicates(subset =[\"READING_DATE\", \"READING_TIME\"], keep='first', inplace=True) \nprint(\"\\nAfter dropping duplicates: \", aq.shape)\nprint(\"\\nUnique dates in AstroPiQuake data:\\n\",aq['READING_DATE'].unique())\n","79c3e3fb":"# Format the shakemap EQ_Date and EQ_Time into the MERGEHOUR field\n\nsm = pd.read_csv(shakemap, delimiter='|')\nprint(sm.info())\nsm['EQ_DATE'] = pd.to_datetime(sm['EQ_Date']).apply(lambda x:x.strftime('%Y-%m-%d'))\nsm['EQ_TIME'] = [str(int(str(x)[:2])+12)+str(x)[2:5] if \"PM\" in x else (str(x)[:5]) for x in sm['EQ_Time']]\nsm['MERGEHOUR'] = sm[\"EQ_DATE\"].str[:4]+sm[\"EQ_DATE\"].str[5:7]+sm[\"EQ_DATE\"].str[8:10]+\" \" +sm[\"EQ_TIME\"].str[:2]\n","bf39b665":"# find earthquakes greater than the threshold\n\nt = sm.loc[sm['EQ_Mag'] > EQmagnitude]\nt = t.sort_values([\"EQ_DATE\", \"EQ_TIME\"])\nprint(\"\\nCISN Shakemap data: \",t.shape)\n","5d1ee955":"# Merge AstroPiQuake and shakemap data to find sensor data at the time of an earthquake\n\neq = pd.merge(aq, t, how='inner', on='MERGEHOUR', suffixes=(False,False))\neq['EQ_MIN'] = eq['EQ_TIME'].str[3:]\neq['READING_MIN'] = eq['READING_TIME'].str[3:]\neq['EQ_MIN'] = eq.EQ_MIN.astype('int64')\neq['READING_MIN'] = eq.READING_MIN.astype('int64')\n\neq['x'] = eq['x'].round(decimals=6)\neq['y'] = eq['y'].round(decimals=6)\neq['z'] = eq['z'].round(decimals=6)\neq['pitch'] = eq['pitch'].round()\neq['roll'] = eq['roll'].round()\neq['yaw'] = eq['yaw'].round()\n\nmatchEQ = eq.loc[eq['EQ_MIN'].between(eq['READING_MIN']-1,eq['READING_MIN']+5)]\neq = matchEQ\n\n# add missing latitudes and longitudes for AstroPiQuake\neq[\"lng\"] = eq[\"lng\"].fillna(\"-118.323411\")\neq[\"lat\"] = eq[\"lat\"].fillna(\"33.893916\")\n\n# check for nulls\nprint(\"\\nThere should be zero null values in earthquake data found:\")\nprint(eq.isnull().sum())\n","279d00b9":"# EARTHQUAKES FOUND\n# This list contains the date, time, magnitude, and epicenter of known earthquakes in Southern California along with the sensor reading near that time\n\nprint(\"\\nEarthquake locations and magnitudes sorted by date, time, reading date, and reading time\\n\")\neq.sort_values(['EQ_DATE','EQ_TIME','READING_DATE','READING_TIME'], inplace=True, ascending=True)\ndisplay(eq[['EQ_DATE','EQ_TIME','READING_DATE','READING_TIME','EQ_Mag','EQ_Epicenter','EQ_Lat','EQ_Lng']])","82ec0911":"# MOVEMENT PLOTS\nfig, axs = plt.subplots(3,3,sharex=True)\nfig.suptitle('4.2 Earthquake 5.4 miles east of Coso Junction, CA on July 15, 2019')\n\n# Temperature\naxs[0,0].plot(eq['MERGEHOUR'], eq['temperature'], color=\"orange\") \naxs[0,0].set_ylabel(\"temperature Celsius\", fontsize='7')\naxs[0,0].set_yticklabels(eq['temperature'].round(), rotation=0, fontsize=7)\naxs[0,0].set_xticklabels(eq['MERGEHOUR'], rotation=45, fontsize='7')\naxs[0,0].axvline(x=2, ymin=0, ymax=1, ls='--', c=\"red\")\naxs[0,0].legend()\n\n# Humidity\naxs[1,0].plot(eq['MERGEHOUR'], eq['humidity'], color=\"green\") \naxs[1,0].set_ylabel(\"percent humidity\", fontsize='7')\naxs[1,0].set_yticklabels(eq['humidity'].round(), rotation=0, fontsize=7)\naxs[1,0].set_xticklabels(eq['MERGEHOUR'], rotation=45, fontsize='7')\naxs[1,0].axvline(x=2, ymin=0, ymax=1, ls='--', c=\"red\")\naxs[1,0].legend()\n\n# Pressure\naxs[2,0].plot(eq['MERGEHOUR'], eq['pressure']) \naxs[2,0].set_ylabel(\"barometric pressure\", fontsize='7')\naxs[2,0].set_yticklabels(eq['pressure'].round(), rotation=0, fontsize=7)\naxs[2,0].set_xticklabels(eq['MERGEHOUR'], rotation=45, fontsize='7')\naxs[2,0].axvline(x=2, ymin=0, ymax=1, ls='--', c=\"red\")\naxs[2,0].legend()\n\n\naxs[2,1].set_title(\"Accelerometer\")\naxs[2,1].plot(eq['MERGEHOUR'], eq['x'])\naxs[2,1].plot(eq['MERGEHOUR'], eq['y'])\naxs[2,1].plot(eq['MERGEHOUR'], eq['z'])\naxs[2,1].set_ylabel('G-Forces')\naxs[2,1].set_xticklabels(eq['MERGEHOUR'], rotation=45, fontsize='7')\naxs[2,1].axvline(x=2, ymin=0, ymax=1, ls='--', c=\"red\")\naxs[2,1].legend()\n\naxs[0,1].set_visible(False)\naxs[1,1].set_visible(False)\n\naxs[0,2].set_title(\"Gyroscope\")\naxs[0,2].plot(eq['MERGEHOUR'], eq['yaw'], color=\"silver\") \naxs[0,2].set_ylabel('degrees', fontsize='7')\naxs[0,2].set_yticklabels(eq['yaw'], rotation=0, fontsize=7)\naxs[0,2].set_xticklabels(eq['MERGEHOUR'], rotation=45, fontsize='7')\naxs[0,2].axvline(x=2, ymin=0, ymax=1, ls='--', c=\"red\")\naxs[0,2].legend()\n\naxs[1,2].plot(eq['MERGEHOUR'], eq['pitch'], color=\"gray\") \naxs[1,2].set_ylabel('degrees', fontsize='7')\naxs[1,2].set_yticklabels(eq['pitch'], rotation=0, fontsize=7)\naxs[1,2].set_xticklabels(eq['MERGEHOUR'], rotation=45, fontsize='7')\naxs[1,2].axvline(x=2, ymin=0, ymax=1, ls='--', c=\"red\")\naxs[1,2].legend()\n\naxs[2,2].plot(eq['MERGEHOUR'], eq['roll'], color=\"black\") \naxs[2,2].set_ylabel('degrees', fontsize='7')\naxs[2,2].set_yticklabels(eq['roll'], rotation=0, fontsize=7)\naxs[2,2].set_xticklabels(eq['MERGEHOUR'], rotation=45, fontsize='7')\naxs[2,2].axvline(x=2, ymin=0, ymax=1, ls='--', c=\"red\")\naxs[2,2].legend()\n\nplt.show()\n","1f313e68":"# MAGNITUDE REPORTS\nprint(\"\\nSORT BY EARTHQUAKE MAGNITUDE\")\neq.sort_values(['EQ_Mag','READING_DATE','READING_TIME'], inplace=True, ascending=False)\ndisplay(eq[['EQ_Mag','EQ_Epicenter','EQ_Lat','EQ_Lng','EQ_DATE','EQ_TIME','READING_DATE','READING_TIME' ]])\n","fc9bda4f":"# NOTE:  HOW TO FIND DATA\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","da1f4a44":"## Confirming Earthquake Detection\n\nThe purpose of this starter notebook is to provide some ideas for comparing your IoT sensor data to professional California Integrated Seismic Network (CISN) Shakemap data in order to confirm that your device is detecting earthquakes. \n\nSensor readings were taken by the <a href=\"https:\/\/github.com\/NelsonPython\/AstroPiQuake\"> AstroPiQuake environment sensor<\/a> in Los Angeles California\n\nCISN data was downloaded from <a href=\"https:\/\/www.cisn.org\/shakemap\/sc\/shake\/archive\/2019.html\"> Archive of ShakeMaps from 2019<\/a>\n"}}