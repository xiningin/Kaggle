{"cell_type":{"564ac384":"code","d9794fb4":"code","a12dffac":"code","01c72163":"code","366420ce":"code","818ecd8e":"code","6e41ea5c":"code","08a76f25":"code","9e0cba53":"code","5f3c3683":"code","26a2b8a9":"code","0c7452f2":"code","5c6b0b44":"code","4266f79a":"code","8430863a":"code","d2e5ef08":"code","8a4ee526":"code","3cd10f3c":"code","29c6050d":"code","289d97ac":"code","7b9761f7":"code","2a3bad8b":"code","21bf1a24":"code","d1bb275b":"code","aceac685":"code","9f304876":"code","b28ee246":"code","db993439":"code","0264989e":"code","e73b8e94":"code","77fc212b":"code","cc981c01":"code","86e291cb":"code","4982afba":"code","2e217238":"code","4b7e176c":"code","5407935d":"code","39c28cd6":"markdown","40b03604":"markdown","d350f354":"markdown"},"source":{"564ac384":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","d9794fb4":"# importing libraries\nimport numpy as np\nimport pandas as pd\nfrom pandas import datetime\nfrom datetime import datetime\nfrom datetime import date\nimport calendar\nimport matplotlib.pyplot as plt\nimport seaborn as sn\n%matplotlib inline","a12dffac":"train=pd.read_csv('..\/input\/train.csv')","01c72163":"test=pd.read_csv('..\/input\/test.csv')","366420ce":"# shape of training and testing data\ntrain.shape, test.shape","818ecd8e":"train.head()","6e41ea5c":"test.head()","08a76f25":"sn.heatmap(train.corr())","9e0cba53":"sn.heatmap(test.corr())","5f3c3683":"# distribution of count variable\nsn.distplot(train[\"count\"])","26a2b8a9":"# distribution of count variable\nsn.distplot(np.log(train[\"count\"]))","0c7452f2":"sn.distplot(train[\"registered\"])","5c6b0b44":"# looking at the correlation between numerical variables\ncorr = train[[\"temp\",\"atemp\",\"casual\",\"registered\",\"humidity\",\"windspeed\",\"count\"]].corr()\nmask = np.array(corr)\nmask[np.tril_indices_from(mask)] = False\nfig,ax= plt.subplots()\nfig.set_size_inches(20,10)\nsn.heatmap(corr, mask=mask,vmax=.9, square=True,annot=True, cmap=\"YlGnBu\")","4266f79a":"# looking for missing values in the datasaet\ntrain.isnull().sum()","8430863a":"# looking for missing values in the datasaet\ntest.isnull().sum()","d2e5ef08":"# extracting date, hour and month from the datetime\ntrain[\"date\"] = train.datetime.apply(lambda x : x.split()[0])\ntrain[\"hour\"] = train.datetime.apply(lambda x : x.split()[1].split(\":\")[0])\ntrain[\"month\"] = train.date.apply(lambda dateString : datetime.strptime(dateString,\"%d-%m-%Y\").month)","8a4ee526":"train=pd.read_csv('..\/input\/train.csv')","3cd10f3c":"training = train[train['datetime']<='2012-03-30 0:00:00']\nvalidation = train[train['datetime']>'2012-03-30 0:00:00']","29c6050d":"test=pd.read_csv('..\/input\/test.csv')","289d97ac":"train = train.drop(['datetime', 'atemp'],axis=1)\ntest = test.drop(['datetime', 'atemp'], axis=1)\ntraining = training.drop(['datetime', 'atemp'],axis=1)\nvalidation = validation.drop(['datetime', 'atemp'],axis=1)","7b9761f7":"from sklearn.linear_model import LinearRegression","2a3bad8b":"# initialize the linear regression model\nlModel = LinearRegression()","21bf1a24":"X_train = training.drop('count', 1)\ny_train = np.log(training['count'])\nX_val = validation.drop('count', 1)\ny_val = np.log(validation['count'])","d1bb275b":"# checking the shape of X_train, y_train, X_val and y_val\nX_train.shape, y_train.shape, X_val.shape, y_val.shape","aceac685":"# fitting the model on X_train and y_train\nlModel.fit(X_train,y_train)","9f304876":"# making prediction on validation set\nprediction = lModel.predict(X_val)","b28ee246":"prediction","db993439":"from sklearn.tree import DecisionTreeRegressor","0264989e":"# defining a decision tree model with a depth of 5. You can further tune the hyperparameters to improve the score\ndt_reg = DecisionTreeRegressor(max_depth=5)","e73b8e94":"dt_reg.fit(X_train, y_train)","77fc212b":"predict = dt_reg.predict(X_val)","cc981c01":"# defining a function which will return the rmsle score\ndef rmsle(y, y_):\n    y = np.exp(y),   # taking the exponential as we took the log of target variable\n    y_ = np.exp(y_)\n    log1 = np.nan_to_num(np.array([np.log(v + 1) for v in y]))\n    log2 = np.nan_to_num(np.array([np.log(v + 1) for v in y_]))\n    calc = (log1 - log2) ** 2\n    return np.sqrt(np.mean(calc))","86e291cb":"# calculating rmsle of the predicted values\nrmsle(y_val, predict)","4982afba":"test_prediction = dt_reg.predict(test)","2e217238":"final_prediction = np.exp(test_prediction)","4b7e176c":"submission = pd.DataFrame()","5407935d":"# creating a count column and saving the predictions in it\nsubmission['count'] = final_prediction","39c28cd6":"                                                 # decision tree","40b03604":"submission.to_csv('add.csv file path in which you want to save predictions',header=True,index=False)","d350f354":"                        # model building****"}}