{"cell_type":{"19f18a4c":"code","6f902c88":"code","11e6dd87":"code","2d0e2d42":"code","cad6d398":"code","987f59c2":"code","c8f6fed2":"code","8eacc128":"code","072d2370":"code","d206ca88":"code","8426810a":"code","2374c4a9":"code","1087ae57":"code","faa98294":"code","dd10beb2":"code","e28a428e":"code","95c16428":"code","34adb4ba":"code","94d36132":"code","ee438331":"code","8564d7e9":"code","b8e3c69d":"code","f876e8d1":"code","68a66a63":"code","bb95ac8e":"code","e23f8304":"code","07aa34b3":"code","86ae9931":"code","3abafd01":"code","0995f733":"code","5f649e98":"code","003e944e":"code","093db530":"code","653abbaf":"code","e250525b":"code","261ff52d":"code","429beeba":"code","fb42ced7":"code","883aaa41":"code","644a540c":"code","9b2d1672":"code","0335dc0d":"code","c6dc61dd":"code","45f8bb3f":"code","493e2fde":"code","bc86d946":"code","2e0fb237":"code","580debd0":"code","336b3863":"code","2a5ccbed":"code","dbe10dde":"code","0bcba78f":"code","214a2626":"code","2461d42b":"code","858780de":"code","64d08018":"code","4c76eedb":"code","5969240f":"code","039b53a1":"code","27090fd1":"code","1bf16dfc":"code","88e4036e":"code","c73aac4a":"code","ec9d7d86":"code","77952b80":"code","d63a3593":"code","e17a4598":"code","9d755430":"code","eac9c7b9":"code","a66dd707":"code","3d261609":"code","ef7e6c78":"code","ce38d46d":"code","29865580":"code","3191351b":"code","e4e46a69":"code","54fc66a7":"code","51baefd9":"code","af8504b0":"code","3dcdfc2d":"code","8ff7f534":"code","06dc926c":"code","5c9856a4":"code","b9f68f83":"code","41d03259":"code","1cd58d4a":"code","5ea9353e":"code","e467952e":"code","041005f3":"code","2c3f79d2":"code","0bad9031":"markdown","d2f59e15":"markdown","118bf8d8":"markdown","90ffbe42":"markdown","aa8d04d6":"markdown","cf917260":"markdown","2182f55a":"markdown","1e5172fd":"markdown","4b11faad":"markdown","78d6ab80":"markdown","21f5396d":"markdown","1b913735":"markdown","3d394afc":"markdown","fe4abaad":"markdown","8cea1ecd":"markdown","099d34d3":"markdown","6eef9daf":"markdown","5c68b494":"markdown","5f784c05":"markdown","3635f45b":"markdown","e47917c6":"markdown"},"source":{"19f18a4c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport sklearn\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n# Any results you write to the current directory are saved as output.","6f902c88":"import numpy as np\nimport pandas as pd","11e6dd87":"train = pd.read_csv(\"\/kaggle\/input\/new-york-city-taxi-fare-prediction\/train.csv\", nrows = 3000000)\ntest = pd.read_csv(\"\/kaggle\/input\/new-york-city-taxi-fare-prediction\/test.csv\")","2d0e2d42":"train.shape","cad6d398":"test.shape","987f59c2":"train.head(10)","c8f6fed2":"train.describe()","8eacc128":"#check for missing values in train data\ntrain.isnull().sum().sort_values(ascending=False)","072d2370":"\ntest.isnull().sum().sort_values(ascending=False)","d206ca88":"train = train.dropna(subset=['dropoff_latitude'])","8426810a":"train.isnull().sum().sort_values(ascending=False)","2374c4a9":"train['fare_amount'].describe()","1087ae57":"#38 fields have negative fare_amount values.\nfrom collections import Counter\nCounter(train['fare_amount']<0)\n","faa98294":"train = train.drop(train[train['fare_amount']<0].index, axis=0)","dd10beb2":"#no more negative values in the fare field\ntrain['fare_amount'].describe()","e28a428e":"#highest fare is $500\ntrain['fare_amount'].sort_values(ascending=False)","95c16428":"train.describe()","34adb4ba":"train['passenger_count'].describe()","94d36132":"train[train['passenger_count']>6]","ee438331":"train = train.drop(train[train['passenger_count']>6].index, axis = 0)","8564d7e9":"train[train['passenger_count']>6]","b8e3c69d":"#much neater now! Max number of passengers are 6. Which makes sense is the cab is an SUV :)\ntrain['passenger_count'].sort_values(ascending=False)","f876e8d1":"test['passenger_count'].sort_values(ascending= False)","68a66a63":"print(f'Rows before removing coordinate outliers - {train.shape[0]}')\n\ntrain = train[train.pickup_longitude.between(test.pickup_longitude.min(), test.pickup_longitude.max())]\ntrain = train[train.pickup_latitude.between(test.pickup_latitude.min(), test.pickup_latitude.max())]\ntrain = train[train.dropoff_longitude.between(test.dropoff_longitude.min(), test.dropoff_longitude.max())]\ntrain = train[train.dropoff_latitude.between(test.dropoff_latitude.min(), test.dropoff_latitude.max())]\n\nprint(f'Rows after removing coordinate outliers - {train.shape[0]}')","bb95ac8e":"train.describe()","e23f8304":"def distance(pickup_lat, pickup_lon, dropoff_lat, dropoff_lon):\n    \"\"\"\n    Return distance along great radius between pickup and dropoff coordinates.\n    \"\"\"\n    #Define earth radius (km)\n    R_earth = 6371\n    #Convert degrees to radians\n    pickup_lat, pickup_lon, dropoff_lat, dropoff_lon = map(np.radians,\n                                                             [pickup_lat, pickup_lon, \n                                                              dropoff_lat, dropoff_lon])\n    #Compute distances along lat, lon dimensions\n    dlat = dropoff_lat - pickup_lat\n    dlon = dropoff_lon - pickup_lon\n    \n    #Compute haversine distance\n    a = np.sin(dlat\/2.0)**2 + np.cos(pickup_lat) * np.cos(dropoff_lat) * np.sin(dlon\/2.0)**2\n    \n    return 2 * R_earth * np.arcsin(np.sqrt(a))\n\ndef add_airport_dist(dataset):\n    \"\"\"\n    Return minumum distance from pickup or dropoff coordinates to each airport.\n    JFK: John F. Kennedy International Airport\n    EWR: Newark Liberty International Airport\n    LGA: LaGuardia Airport\n    \"\"\"\n    jfk_coord = (40.639722, -73.778889)\n    ewr_coord = (40.6925, -74.168611)\n    lga_coord = (40.77725, -73.872611)\n    \n    pickup_lat = dataset['pickup_latitude']\n    dropoff_lat = dataset['dropoff_latitude']\n    pickup_lon = dataset['pickup_longitude']\n    dropoff_lon = dataset['dropoff_longitude']\n    \n    pickup_jfk  = distance(pickup_lat, pickup_lon, jfk_coord[0], jfk_coord[1]) \n    dropoff_jfk = distance(jfk_coord[0], jfk_coord[1], dropoff_lat, dropoff_lon) \n    pickup_ewr  = distance(pickup_lat, pickup_lon, ewr_coord[0], ewr_coord[1])\n    dropoff_ewr = distance(ewr_coord[0], ewr_coord[1], dropoff_lat, dropoff_lon) \n    pickup_lga  = distance(pickup_lat, pickup_lon, lga_coord[0], lga_coord[1]) \n    dropoff_lga = distance(lga_coord[0], lga_coord[1], dropoff_lat, dropoff_lon) \n    \n    dataset['jfk_dist'] = pd.concat([pickup_jfk, dropoff_jfk], axis=1).min(axis=1)\n    dataset['ewr_dist'] = pd.concat([pickup_ewr, dropoff_ewr], axis=1).min(axis=1)\n    dataset['lga_dist'] = pd.concat([pickup_lga, dropoff_lga], axis=1).min(axis=1)\n    \n    return dataset\n    \ndef add_datetime_info(dataset):\n    #Convert to datetime format\n    dataset['pickup_datetime'] = pd.to_datetime(dataset['pickup_datetime'],format=\"%Y-%m-%d %H:%M:%S UTC\")\n    \n    dataset['hour'] = dataset.pickup_datetime.dt.hour\n    dataset['day'] = dataset.pickup_datetime.dt.day\n    dataset['month'] = dataset.pickup_datetime.dt.month\n    dataset['weekday'] = dataset.pickup_datetime.dt.weekday\n    dataset['year'] = dataset.pickup_datetime.dt.year\n    \n    return dataset\n\n","07aa34b3":"train = add_datetime_info(train)\ntrain = add_airport_dist(train)\ntrain['distance'] = distance(train['pickup_latitude'], train['pickup_longitude'], \n                                   train['dropoff_latitude'] , train['dropoff_longitude'])\n\ntrain.head()","86ae9931":"train.shape","3abafd01":"train.sort_values(by = 'distance',ascending =False).head(100)","0995f733":"train.distance[(train.distance==0)].count()","5f649e98":"train[(train.pickup_latitude != train.dropoff_latitude) &\n              (train.pickup_longitude != train.dropoff_latitude) &\n              (train.distance == 0)].count()","003e944e":"train[(train['distance']==0)&(train['fare_amount']==0)]","093db530":"train = train.drop(train[(train['distance']==0)&(train['fare_amount']==0)].index, axis = 0)","653abbaf":"train[(train['distance']==0)&(train['fare_amount']==0)]","e250525b":"# good","261ff52d":"sns.distplot(a=train.fare_amount)","429beeba":"train['fare_amount'].skew()","fb42ced7":"# lets create a copy of train set\ntrain_data = train.copy()","883aaa41":"train_data.shape","644a540c":"train_data.drop(columns=['key', 'pickup_datetime'],inplace=True)","9b2d1672":"train_data.head()","0335dc0d":"train_data.sort_values(by = 'fare_amount',ascending =False).head(100)","c6dc61dd":"corr_matrix = train_data.corr()","45f8bb3f":"corr_matrix['fare_amount']","493e2fde":"train_data.sort_values(by = 'passenger_count',ascending =True).head(10)","bc86d946":"import matplotlib.pyplot as plt\nplt.figure(figsize=(10,7))\nplt.hist(train_data['passenger_count'],bins=15)\nplt.xlabel('No of Passanger')\nplt.ylabel('Frequency')","2e0fb237":"plt.figure(figsize=(10,7))\nplt.scatter(x= train_data['passenger_count'],y = train_data['fare_amount'],s = 1.5)\nplt.xlabel('No of Passengers')\nplt.ylabel('fare_amount')","580debd0":"# lets drop it where there are fares for 0 passanger\nprint('Train_data befor ',train_data.shape)","336b3863":"train_data[(train_data['passenger_count']==0)&(train_data['fare_amount']>0)].sort_values(by = 'fare_amount',ascending=False)","2a5ccbed":"train_data = train_data.drop(train_data[(train_data['passenger_count']==0)&(train_data['fare_amount']>0)].index, axis = 0)","dbe10dde":"train_data.shape","0bcba78f":"plt.figure(figsize=(15,7))\nplt.scatter(x=train_data['day'], y=train_data['fare_amount'], s=1.5)\nplt.xlabel('Date')\nplt.ylabel('Fare')","214a2626":"plt.figure(figsize=(10,7))\nplt.hist(train_data['hour'],bins=50)\nplt.xlabel('Hour')\nplt.ylabel('Frequency')","2461d42b":"plt.figure(figsize=(15,7))\nplt.scatter(x=train_data['distance'], y=train_data['fare_amount'], s=1.5)\nplt.xlabel('Distance')\nplt.ylabel('Fare')","858780de":"train_data.head()","64d08018":"train_data.shape","4c76eedb":"train_data_org = train_data.copy()","5969240f":"del train_data","039b53a1":"y = train_data_org['fare_amount']\ntrain_data = train_data_org.drop(columns=['fare_amount'])","27090fd1":"from sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import RobustScaler","1bf16dfc":"data_pipeline = Pipeline([('rob_scale',RobustScaler())])","88e4036e":"traindata_scaled = data_pipeline.fit_transform(train_data)","c73aac4a":"traindata_scaled","ec9d7d86":"train_data.head()","77952b80":"traindata_scaled = pd.DataFrame(traindata_scaled,columns=train_data.columns,index=train_data.index)","d63a3593":"traindata_scaled.head()","e17a4598":"traindata_scaled.shape","9d755430":"test = add_datetime_info(test)\ntest = add_airport_dist(test)\ntest['distance'] = distance(test['pickup_latitude'], test['pickup_longitude'], \n                                   test['dropoff_latitude'] , test['dropoff_longitude'])\n\ntest.head()","eac9c7b9":"test.drop(columns=['key', 'pickup_datetime'],inplace=True)","a66dd707":"test.head()","3d261609":"test.shape","ef7e6c78":"testdata_scaled = data_pipeline.fit_transform(test)","ce38d46d":"testdata_scaled","29865580":"testdata_scaled = pd.DataFrame(testdata_scaled,columns=test.columns,index=test.index)","3191351b":"testdata_scaled.head()","e4e46a69":"print(train_data.shape,traindata_scaled.shape)","54fc66a7":"print(test.shape,testdata_scaled.shape)","51baefd9":"traindata_scaled.to_csv('trained_scaled.csv',index=False)","af8504b0":"train_data.to_csv('trained_data.csv',index=False)","3dcdfc2d":"testdata_scaled.to_csv('testdata_scaled.csv',index=False)\ntest.to_csv('test.csv',index=False)","8ff7f534":"y.to_csv('train_labels.csv',index=False)","06dc926c":"train_data_org.to_csv('train_data_org.csv',index= False)","5c9856a4":"train_data_org.head()","b9f68f83":"train_data.head()","41d03259":"from sklearn.model_selection import train_test_split\nimport lightgbm as lgbm","1cd58d4a":"x_train,x_test,y_train,y_test = train_test_split(traindata_scaled,y,random_state=123,test_size=0.10)","5ea9353e":"params = {\n        'boosting_type':'gbdt',\n        'objective': 'regression',\n        'nthread': 4,\n        'num_leaves': 31,\n        'learning_rate': 0.05,\n        'max_depth': -1,\n        'subsample': 0.8,\n        'bagging_fraction' : 1,\n        'max_bin' : 5000 ,\n        'bagging_freq': 20,\n        'colsample_bytree': 0.6,\n        'metric': 'rmse',\n        'min_split_gain': 0.5,\n        'min_child_weight': 1,\n        'min_child_samples': 10,\n        'scale_pos_weight':1,\n        'zero_as_missing': True,\n        'seed':0,\n        'num_rounds':50000\n    }\n\n","e467952e":"testdata_scaled.head()","041005f3":"\n# train_set = lgbm.Dataset(x_train, y_train, silent=False,categorical_feature=['year','month','day','weekday'])\n# valid_set = lgbm.Dataset(x_test, y_test, silent=False,categorical_feature=['year','month','day','weekday'])\n# model = lgbm.train(params, train_set = train_set, num_boost_round=10000,early_stopping_rounds=500,verbose_eval=500, valid_sets=valid_set)\n\n# prediction = model.predict(testdata_scaled, num_iteration = model.best_iteration)      \n\n\n\n# submission = pd.read_csv(\"\/kaggle\/input\/new-york-city-taxi-fare-prediction\/sample_submission.csv\")\n# submission['fare_amount'] = prediction\n# submission.to_csv('lgbm_taxi_fare1.csv', index=False)\n\n\n\n\n\n#submission.head()\n\n#submission.head(20)","2c3f79d2":"train_data.head()","0bad9031":"### lets drop key and Pickup_datetime because we dont need it as we have extracted featuresfrom it","d2f59e15":"# Feature Engineering \n- total_distance: distance from pickup to dropoff. The longer the trip, the more expensive.\n- Extract information from datetime (day of week, month, hour, day). Taxi fares change day\/night or on weekdays\/holidays.\n- Add columns indicating distance from pickup or dropoff coordinates to airports. Trips from\/to an airport have a fixed fee.\n","118bf8d8":"# Handing Passanger Count","90ffbe42":"# Handling the target column fare amount ","aa8d04d6":"# Dealing with missing data in the Data","cf917260":"# Data cooked now Feed the food to Machine learnig Algorithms","2182f55a":"\nFare amount has a negative value, which doesn't make sense. Remove these fields","1e5172fd":"### cabs are less between 2 to 6 hour","4b11faad":"### Lets Drop it ","78d6ab80":"# test Set","21f5396d":"### Dealing with long and latitude\n\nQuick Googling gave me this info\n\n   - Latitudes range from -90 to 90.\n   - Longitudes range from -180 to 180.\n\nThe above describe clearly shows some outliers. Let's filter them\n","1b913735":"### On 12 th day price is highest","3d394afc":" # Dataset","fe4abaad":"# lets look for corellation with fare_amount ","8cea1ecd":"- From above plots i can see that mostly cabs are booked by single passanger\n- And i can also see that prices are high for single passanger \n- And i can see there are fare for 0 passanger which is very unsual for this we can check test set is there is fare for empty cab","099d34d3":"# Handling Latitude and Longitudes","6eef9daf":"### Lets do EDA(Explority Data Analysis). The following are my considerations -\n- Does the number of passengers affect the fare?\n- Does the date and time of pickup affect the fare?\n- Does the day of the week affect the fare?\n- Does the distance travelled affect the fare?\n","5c68b494":"### Dose Pickup dare and time affect Price","5f784c05":"### Lets look at  Fare and Distance are both 0. According to the table above, we shall delete them as they do not provide us any info with regards to the data.","3635f45b":"Next check the passenger_count variable","e47917c6":" # drop the missing values\n"}}