{"cell_type":{"1da79c5d":"code","1b30569d":"code","7b41e283":"code","ae88bae6":"code","391480b5":"code","3c1db9fb":"code","489e8c90":"code","622a505c":"code","cac80277":"code","12bf5c00":"code","bebb45f0":"code","c1b351cf":"code","d0ca432c":"code","da0184d3":"code","dd513584":"code","56b5e9c0":"code","9c5db0e7":"markdown","56da4aa2":"markdown","c838987d":"markdown","cabd144a":"markdown","5ceae073":"markdown","19c0db48":"markdown","9525c92b":"markdown","b970f167":"markdown","a9883990":"markdown","20c997dc":"markdown","8e1ecddf":"markdown","0ea87012":"markdown"},"source":{"1da79c5d":"! pip install mplfinance\nimport gresearch_crypto\nimport pandas as pd\nimport numpy as np\nimport tqdm\nimport mplfinance as mpf","1b30569d":"import gresearch_crypto\n#%%time\n## \u8aad\u307f\u8fbc\u307f\u306b\u5272\u3068\u6642\u9593\u304c\u304b\u304b\u308b\u306e\u3067\u3001\u6642\u9593\u3092\u78ba\u8a8d\u3002\n\n## \u5c02\u7528library(API)\u3092\u4f7f\u3063\u3066\u521d\u671f\u5316\u3002\u4e00\u5ea6\u521d\u671f\u5316\u3002\n#env = gresearch_crypto.make_env()\n\n## \u8aad\u307f\u8fbc\u307f\ntrain_df = pd.read_csv('..\/input\/g-research-crypto-forecasting\/train.csv', low_memory=False, \n                       dtype={'Asset_ID': 'int8', 'Count': 'int32', 'row_id': 'int32', 'Count': 'int32', \n                              'Open': 'float64', 'High': 'float64', 'Low': 'float64', 'Close': 'float64', \n                              'Volume': 'float64', 'VWAP': 'float64'\n                             }\n                      )\ntrain_df[\"timestamp\"] = pd.to_datetime(train_df['timestamp'].astype(int), unit='s')\ntrain_df.set_index(\"timestamp\",inplace=True)\ntrain_df.head(3)","7b41e283":"train_df.tail(3)","ae88bae6":"train_df.shape","391480b5":"train_df[\"Asset_ID\"].unique()","3c1db9fb":"train_df[\"tmp_dt\"] = train_df.index\ntrain_df[train_df[\"Asset_ID\"] == 0][\"tmp_dt\"].diff().value_counts()","489e8c90":"asset_df = pd.read_csv('..\/input\/g-research-crypto-forecasting\/asset_details.csv')\nasset_df","622a505c":"supplemental_df = pd.read_csv('..\/input\/g-research-crypto-forecasting\/supplemental_train.csv')\nsupplemental_df[\"timestamp\"] = pd.to_datetime(supplemental_df['timestamp'].astype(int), unit='s')\nsupplemental_df.set_index(\"timestamp\",inplace=True)\nsupplemental_df","cac80277":"train_df = pd.read_csv('..\/input\/g-research-crypto-forecasting\/train.csv', low_memory=False, \n                       dtype={'Asset_ID': 'int8', 'Count': 'int32', 'row_id': 'int32', 'Count': 'int32', \n                              'Open': 'float64', 'High': 'float64', 'Low': 'float64', 'Close': 'float64', \n                              'Volume': 'float64', 'VWAP': 'float64'\n                             }\n                      )\n\nasset_id = 1\ntgt_df = train_df[train_df[\"Asset_ID\"] == asset_id]\ntgt_df = tgt_df[['Open', 'High', 'Low', 'Close', 'Volume','timestamp']]  ## ohlcv\u3068\u6642\u9593\u306e\u60c5\u5831\u306e\u307f\u5fc5\u8981\u3002\ntgt_df[\"timestamp\"] = pd.to_datetime(tgt_df['timestamp'].astype(int), unit='s')\ntgt_df.set_index(\"timestamp\",inplace=True)\ntgt_df","12bf5c00":"import plotly.graph_objects as go\n\ntgt_df = tgt_df[0:1000]\nfig = go.Figure(data=[go.Candlestick(x=tgt_df.index, open=tgt_df['Open'], high=tgt_df['High'], low=tgt_df['Low'], close=tgt_df['Close'])])\nfig.show()","bebb45f0":"## Re read original data\nasset_id = 1\ntgt_df = train_df[train_df[\"Asset_ID\"] == asset_id]\ntgt_df = tgt_df[['Open', 'High', 'Low', 'Close', 'Volume','timestamp']]  ## ohlcv\u3068\u6642\u9593\u306e\u60c5\u5831\u306e\u307f\u5fc5\u8981\u3002\ntgt_df[\"timestamp\"] = pd.to_datetime(tgt_df['timestamp'].astype(int), unit='s')\ntgt_df.set_index(\"timestamp\",inplace=True)\n\n","c1b351cf":"## resample\nd_ohlcv = {'Open': 'first',\n           'High': 'max',\n           'Low': 'min',\n           'Close': 'last',\n           'Volume': 'sum'}\ntgt_df_daily = tgt_df.resample('D').agg(d_ohlcv)  #< \"D\" mean daily. \ntgt_df_daily = tgt_df_daily[0:1000]\nfig = go.Figure(data=[go.Candlestick(x=tgt_df_daily.index, open=tgt_df_daily['Open'], high=tgt_df_daily['High'], low=tgt_df_daily['Low'], close=tgt_df_daily['Close'])])\nfig.show()","d0ca432c":"d_ohlcv = {'Open': 'first',\n           'High': 'max',\n           'Low': 'min',\n           'Close': 'last',\n           'Volume': 'sum'}\ntgt_df_daily = tgt_df.resample('15min').agg(d_ohlcv)  #< 15 minutes. \ntgt_df_daily = tgt_df_daily[0:1000]\nfig = go.Figure(data=[go.Candlestick(x=tgt_df_daily.index, open=tgt_df_daily['Open'], high=tgt_df_daily['High'], low=tgt_df_daily['Low'], close=tgt_df_daily['Close'])])\nfig.show()","da0184d3":"mpf.plot(tgt_df[:100],type='candle')","dd513584":"env = gresearch_crypto.make_env()\niter_test = env.iter_test()\n(test_df, sample_prediction_df) = next(iter_test)\ntest_df.head()","56b5e9c0":"asset_id = 1\ntgt_df = test_df[test_df[\"Asset_ID\"] == asset_id]\ntgt_df[\"timestamp\"] = pd.to_datetime(tgt_df['timestamp'].astype(int), unit='s')\ntgt_df.set_index(\"timestamp\",inplace=True)\ntgt_df","9c5db0e7":"## **6. look into test data**\n\ntest\u30c7\u30fc\u30bf\u306fapi\u7d4c\u7531\u3067\u53d6\u5f97\u3059\u308b\u3002\u672a\u6765\u306e\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u8a55\u4fa1\u3059\u308b\u305f\u3081\u3001\u5c06\u6765\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u308c\u308b\u4ed5\u7d44\u307f\u304c\u5fc5\u8981\u306a\u305f\u3081\u3002<br>","56da4aa2":"## **0. \u306f\u3058\u3081\u306b**\n\n\u30b3\u30f3\u30da\u306e\u6982\u8981\u3068\u6ce8\u610f\u70b9\u3092\u81ea\u5206\u7528\u306b\u307e\u3068\u3081\u307e\u3059\n\n## **1. reference**\n* [Detailed API Introduction](https:\/\/www.kaggle.com\/sohier\/detailed-api-introduction)\n* [pandas, Matplotlib\uff08mplfinance\uff09\u3067\u30ed\u30fc\u30bd\u30af\u8db3\u30c1\u30e3\u30fc\u30c8\u3092\u4f5c\u6210](https:\/\/note.nkmk.me\/python-pandas-matplotlib-candlestick-chart\/)\n* [OHLC Charts in Python](https:\/\/plotly.com\/python\/ohlc-charts\/)\n\n## **2. \u6ce8\u610f\u70b9**\n\n\u666e\u6bb5\u306e\u30b3\u30f3\u30da\u3068\u9055\u3044\u3001API\u304b\u3089test\u7528\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u3001API\u3092\u4f7f\u3063\u3066model\u306e\u8a55\u4fa1\u7d50\u679c\u3092\u63d0\u51fa\u3059\u308b\u3002<br>\n\u3056\u3063\u304f\u308a\u3068\u3057\u305f\u30b3\u30fc\u30c9\u306e\u5168\u4f53\u50cf\u306f\u3001\u4e0a\u8a18\u306e\u30ea\u30f3\u30af\u306b\u8a18\u8f09\u3042\u308a\u3002\u7c21\u5358\u306b\u307e\u3068\u3081\u308b\u3068\u3001\n```\nimport gresearch_crypto   \u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000##<= \u4eca\u56de\u306e\u30b3\u30f3\u30da\u7528python library\nenv = gresearch_crypto.make_env()   \u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000##<= \u521d\u671f\u5316\u3002\n\n# Training data is in the competition dataset as usual\ntrain_df = pd.read_csv('\/kaggle\/input\/g-research-crypto-forecasting\/train.csv', low_memory=False)\ntgt_1_model.fit(train_df)\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000#<= \u3044\u3064\u3082\u3069\u304a\u308amodel\u3092\u4f5c\u6210\u3002\ntgt_2_model.fit(train_df)\niter_test = env.iter_test()\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000##<= \u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\u3092api\u7d4c\u7531\u3067\u53d6\u5f97\u3002\nfor (test_df, sample_prediction_df) in iter_test:\n    sample_prediction_df['Target'] = tgt_1_model.predict(test_df) ##<= \u30e2\u30c7\u30eb\u3092\u901a\u3057\u3066\u63d0\u51fa\u7528\u30c7\u30fc\u30bf\u4f5c\u6210\n    env.predict(sample_prediction_df)   ##<= \u63d0\u51fa\uff01\uff01\n```\n\n\u5927\u4f53\u4e0a\u8a18\u306e\u6d41\u308c\u306b\u306a\u308a\u305d\u3046\u3002<br>\n\u5916\u90e8\u30de\u30b7\u30f3\u3092\u4f7f\u3063\u305f\u30e2\u30c7\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3060\u308a\u3001\u3044\u308d\u3093\u306a\u30e2\u30c7\u30eb\u3092\u8a66\u305b\u308b\u3088\u3046\u306b\u3001<br>\nEDA\u3067\u4e00\u3064\u306enotebook\u3001model\u4f5c\u6210\u3067\u4e00\u3064\u306enotebook\u3001\u4ed6\u306enotebook\u306e\u30e2\u30c7\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067\u63d0\u51fa\u3059\u308b\u3060\u3051\u306enotebook\u306e\u69cb\u6210\u304c\u826f\u3055\u305d\u3046\u3002[A.I](\u2191\u4e00\u3064\u306enotebook\u3058\u3083\u306a\u304f\u3066\u3082\u3088\u3044\u304b\u8981\u78ba\u8a8d\u3002)<br>\n\n","c838987d":"## **4.2 asset details over view**\n\nweight\u3063\u3066\u306a\u3093\u3084\u306d\u3093\u3063\u3002\u5f8c\u3067\u8abf\u3079\u308b\u3002","cabd144a":"## **3. Library\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3068\u8aad\u307f\u8fbc\u307f**\n\nmplfinance is usefull for creating candle chart.","5ceae073":"## **5.3 mplfinance\u3092\u4f7f\u3063\u3066\u307f\u308b**\n\n**\u3000\u6ce8\u610f ** <br>\nmpf\u306b\u6e21\u3059DF\u306b\u306f\u3001ohlcv\u306e\u60c5\u5831\u3068\u3001index\u306f\u3001datetime\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308b\u3002<br>\nmpf require \"OHLCV\" columns and index is datetime object.\n\nUnn, no good.","19c0db48":"## **4.3 supplemental train over view**","9525c92b":"## **4.1 train data overview**","b970f167":"#### \u901a\u8ca8\u306f\uff11\uff14\u7a2e\u985e\uff1f","a9883990":"## **5.2.1 Resampling \"change period\" to daily OHLC**\n\nresumple train_df to daily ohlc data","20c997dc":"## **5.2.1 Resampling to 15 minutes OHLC**","8e1ecddf":"## **4.1.1 Is timestep 60[s]?**\n\nThe diff() method does not work for index..","0ea87012":"## **5.1 Visualize by plotly**\n\u666e\u6bb5plotly\u3092\u3088\u304f\u4f7f\u3046\u306e\u3067\u3002<br>\n\u8868\u793a\u7bc4\u56f2\u3092\u7d5e\u308c\u308b\u306e\u3067\u3001\u4fbf\u5229\u3002<br>\ndf\u306eindex\u306f\u3001datetime\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308b\u3002<br>"}}