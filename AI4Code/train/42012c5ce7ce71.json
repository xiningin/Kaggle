{"cell_type":{"486596d3":"code","8a2e3214":"code","8fc63eae":"code","aad4f062":"code","b007e5be":"code","5497dbc3":"code","20fe9004":"code","7a8a7697":"code","9ab86e4f":"code","306ade46":"code","cc84034c":"code","386f4618":"code","604d5146":"code","2d295d89":"code","00e416b4":"code","330be4bb":"code","8c93dd83":"code","b7e873c9":"code","1f2e052e":"code","1724c058":"code","6602e599":"code","a5b87b49":"code","60ff0464":"code","dfef954a":"code","b6ebb5c3":"code","2bbbcd66":"code","4b6a7f4d":"markdown","37aee19a":"markdown","d73b940a":"markdown","4b6974df":"markdown","b8c543ea":"markdown","c331c3dc":"markdown","0809a299":"markdown","c54adfb8":"markdown","c11d20a1":"markdown","2762712d":"markdown","ae151c4d":"markdown","adcaa30c":"markdown","8bbab95b":"markdown","a37854b5":"markdown","0bb27491":"markdown","ddf86e86":"markdown"},"source":{"486596d3":"#general \nimport os\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt \nfrom matplotlib import  cm\nimport cv2\nimport random\nfrom IPython import display\n\n\n\n#metrics \nfrom sklearn.metrics import accuracy_score,roc_auc_score,roc_curve,precision_score,recall_score\n\n\n#data loading \nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\n#deep learning\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Conv2D,Dropout,Dense,MaxPooling2D,GaussianNoise,Flatten,Input,BatchNormalization\nfrom tensorflow.keras import regularizers\nfrom tensorflow.keras import Model\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau,EarlyStopping\nfrom tensorflow.keras.metrics import AUC\nfrom tensorflow.keras.utils import to_categorical\n\n#backend\nfrom tensorflow.keras import backend as K\n\n#filter warnings\nimport warnings \nwarnings.filterwarnings('ignore')","8a2e3214":"seed=7\nimg_size = (224,224)\nbatch_size=64\n\n\n\ndef set_seed(seed):\n    \n    '''set seed for reproducablity'''\n    os.environ['PYTHONHASHSEED']= str(seed)\n    random.seed(seed)\n    tf.random.set_seed(seed)\n    \nset_seed(seed)    ","8fc63eae":"train_dir  = '..\/input\/skin-cancer-malignant-vs-benign\/train\/'\ntest_dir ='..\/input\/skin-cancer-malignant-vs-benign\/test\/'\n","aad4f062":"train_gen = ImageDataGenerator(    \n#     width_shift_range=(0.05,0.05), # (-width_shift_range, +width_shift_range)\n#     height_shift_range=(0.05,0.05),\n#     brightness_range=(0.8,1.2),\n#     shear_range=1.2,\n#     samplewise_std_normalization=False, # Divide each input by its std\n    zca_whitening=False,  # A whitening transform of an image is a linear algebra operation that reduces the redundancy in the matrix of pixel images.\n#     zca_epsilon=1e-06,   \n    rotation_range=180,    # degree range for randm rot\n    zoom_range=(0.8,1.2),\n#     channel_shift_range=0.05,\n#     fill_mode='nearest',\n#     cval=0.0,\n    horizontal_flip=True,\n    vertical_flip=True,\n    rescale=1\/255,\n    validation_split = 0.15)\n\ntest_gen = ImageDataGenerator(rescale=1\/255)\n\n\n\n\n#train data \ntrain_data = train_gen.flow_from_directory(train_dir,\n                                           target_size=img_size,\n                                           class_mode='binary',\n                                           batch_size=batch_size,\n                                           seed=seed,\n                                          subset='training',\n                                          shuffle=True)\n\n\n#validation data \nval_data = train_gen.flow_from_directory(train_dir,\n                                           target_size=img_size,\n                                           class_mode='binary',\n                                           batch_size=batch_size,\n                                           seed=seed,\n                                          subset='validation',\n                                          shuffle=True)\n\n\ntest_data = test_gen.flow_from_directory(test_dir,\n                                       target_size=img_size,\n                                       class_mode='binary',\n                                       batch_size=batch_size,\n                                       seed=seed,\n                                       shuffle=True)\n\n\nclass_dict = {str(v):k for k,v in train_data.class_indices.items()}","b007e5be":"def plot_image_grid(image_list,\n                    label_list,\n                    sample_images=False,\n                    num_images=12,\n                    pre_title='class',\n                    num_img_per_row=3,\n                    cmap=None,\n                    img_h_w=5):\n    '''viz images from a list of images and labels\n    INPUTS:\n    image_list: a list of images to be plotted,\n    label_list: a list of correspomding image labels'''\n    \n\n\n    #number of img rows\n    n_row= num_images\/\/num_img_per_row\n\n    plt.subplots(n_row,num_img_per_row,figsize=(img_h_w*num_img_per_row,img_h_w*n_row))\n\n    if sample_images:\n    #select_random images \n        sampled_ids = random.choices(np.arange(0,len(image_list)),k=num_images)\n\n        for i,idx in enumerate(sampled_ids):\n\n            img = image_list[idx]\n            label = label_list[i]\n            plt.subplot(n_row,num_img_per_row,i+1)\n            plt.title(f'{pre_title} - {label}')\n            plt.axis('off')\n            plt.imshow(img,cmap=cmap)\n    else:\n        for i,img in enumerate(image_list):\n\n            label = label_list[i]\n            plt.subplot(n_row,num_img_per_row,i+1)\n            plt.title(f'{pre_title} - {label}')\n            plt.axis('off')\n            plt.imshow(img,cmap=cmap)\n\n            # break the loop \n            if i==num_images-1 :\n                  break \n\n    #show\n    plt.tight_layout()\n    plt.show()\n    \n    \n    ","5497dbc3":"# import pdb\nclass custom_cnn:\n    def __init__(self):\n\n        # layer regularization\n        self.layer_reg ={'kernel_reg':{'l1':1e-5,\n                                       'l2':1e-4},\n                       'bias_reg': {'l1':1e-5,\n                                   'l2':1e-4}\n                        }\n\n\n        # params for building model\n        self.params = {\n                  'n_dense' : [16],             # number of dense layer after conv\n                  'dense_act': ['relu','relu'],     # dnese layer activation\n                  'layer_reg': self.layer_reg,           # layer regularization params\n                  'drop'    :[0.6,0.5],             # dropout rates \n                  'kernel_size':[(3,3),(3,3),(3,3)],      # kernel sizes\n                  'pool_size' : [(2,2),(2,2),(2,2)],      # pooling size\n                  'conv'    : [8,16,32],             # conv layer number of filters * 2\n                  'strides' : [1,1,1],\n                  'activations': ['relu','relu','relu'],   # conv layer activations \n                  'batch_norm': True,\n                  'gaussian_noise':True,\n                  'Gaussian_noise_std':0.1\n                 }\n        \n    \n    \n    def build(self,\n              input_shape,\n              update_params,\n              output_layer\n             ):\n        self.input_shape=input_shape\n        \n        self.output_params = output_layer\n        #update params shape\n        if update_params:\n            self.params.update(update_params)\n        '''\n        build a CNN with given parameters\n        -input_shape   :  input image shape (example: (256,256,3),\n        - update_params: update build params\n        - output_layer : output_layer_params , ex {'n_out':num_classes,'activation':'softmax'}\n        \n        \n        # Build Params:\n        \n        n_dense : list of number of units in each dense layer\n        activations: list of activation in each CONV layer  \n        kernel_size:list of kernel size\n        conv: list of number of conv filters\n        pool_size: list of pooling size \n        layer_reg: dense layer regularization\n        drop     : list of dropouts after dense layers\n        compile_params: model compilation parameters ,\n        gaussian_noise: add gaussian noise layer to the model with std of given value'''\n           \n        # input layer\n        inp = Input(shape = self.input_shape)\n        if self.params['gaussian_noise']:\n          #add gaussian noise\n            x = GaussianNoise(stddev=self.params['Gaussian_noise_std'])(inp)\n            \n            x = Conv2D(self.params['conv'][0],\n                   activation=self.params['activations'][0],\n                   kernel_size=self.params['kernel_size'][0],\n                   strides =self.params['strides'][0])(x)\n        \n        else:\n        \n            x = Conv2D(self.params['conv'][0],\n                   activation=self.params['activations'][0],\n                   kernel_size=self.params['kernel_size'][0],\n                   strides =self.params['strides'][0])(inp)\n        \n        x = Conv2D(self.params['conv'][0],\n                   activation=self.params['activations'][0],\n                   kernel_size=self.params['kernel_size'][0],\n                   strides =self.params['strides'][0])(x)\n        x = MaxPooling2D(pool_size=self.params['pool_size'][0],\n                         strides =self.params['strides'][0])(x)\n        \n        if self.params['batch_norm']:\n            x = BatchNormalization()(x)\n\n        for i in range(1,len(self.params['conv'])):\n            x = Conv2D(self.params['conv'][i],\n                       activation =self.params['activations'][i],\n                       kernel_size=self.params['kernel_size'][i],\n                       strides =self.params['strides'][i])(x)\n            x = Conv2D(self.params['conv'][i],\n                       activation =self.params['activations'][i],\n                       kernel_size=self.params['kernel_size'][i],\n                      strides =self.params['strides'][i])(x)\n            x = MaxPooling2D(pool_size=self.params['pool_size'][i],\n                             strides =self.params['strides'][i])(x)\n            \n            if self.params['batch_norm']:\n                x = BatchNormalization()(x)\n\n        # \n        x = Flatten()(x)\n        \n        \n#         pdb.set_trace()\n        # regularization\n        self.kernel_reg=regularizers.l1_l2(l1=self.params['layer_reg']['kernel_reg']['l1'],\n                                           l2=self.params['layer_reg']['kernel_reg']['l2'])\n\n        x = Dense(self.params['n_dense'][0],\n                  activation=self.params['dense_act'][0],\n                  kernel_regularizer=self.kernel_reg,\n                  bias_regularizer = regularizers.l1_l2(\n                      l1=self.params['layer_reg']['bias_reg']['l1'],\n                      l2=self.params['layer_reg']['bias_reg']['l2']))(x)\n\n        x = BatchNormalization()(x)\n        x = Dropout(self.params['drop'][0])(x)\n\n        if len(self.params['n_dense'])>1:\n            for i in range(1,len(self.params['n_dense'])):\n                x = Dense(self.params['n_dense'][i],\n                          activation=self.params['dense_act'][i],\n                          kernel_regularizer=self.kernel_reg,\n                          bias_regularizer = regularizers.l1_l2(l1=self.params['layer_reg']['bias_reg']['l1'],\n                                                                l2=self.params['layer_reg']['bias_reg']['l2']))(x)\n                #drop\n                x = BatchNormalization()(x)\n                x = Dropout(self.params['drop'][i])(x)\n\n        out = Dense(self.output_params['n_out'],\n                    activation=self.output_params['activation'])(x)\n        \n        \n        model = Model(inputs=[inp],outputs = out)\n        return model \n    \n# plot train and val acc as  a function of epochs\ndef plot_history(history,addn_metric=None):\n    '''\n    Inputs\n    history:history object from tensorflow\n    add_metric: metric name in the history (like f1_score)'''\n    his=pd.DataFrame(history.history)\n    \n    if addn_metric:\n        plt.subplots(1,3,figsize=(20,6))\n        \n        #loss:\n        ax1=plt.subplot(1,3,1)\n        ax1.plot(range(len(his)),his['loss'],color='g',label='training')\n        ax1.plot(range(len(his)),his['val_loss'],color='r',label='validation')\n        ax1.set_xlabel('EPOCHS')\n        ax1.set_ylabel('LOSS')\n        ax1.legend()\n        ax1.set_title('Loss Per Epoch')\n\n        #accuracy\n        ax2=plt.subplot(1,3,2)\n        ax2.plot(range(len(his)),his['accuracy'],color='g',label='training_acc')\n        ax2.plot(range(len(his)),his['val_accuracy'],color='r',label='validation_acc')\n        ax2.set_xlabel('EPOCHS')\n        ax2.set_ylabel('Accuracy')\n        ax2.legend()\n        ax2.set_title('Accuracy Per Epoch')\n\n    \n        \n        ax3= plt.subplot(1,3,3)\n        ax3.plot(range(len(his)),his[f'{addn_metric}'],color='g',label='training')\n        ax3.plot(range(len(his)),his[f'val_{addn_metric}'],color='r',label='validation')\n        ax3.set_xlabel('EPOCHS')\n        ax3.set_ylabel(f'{addn_metric}')\n        ax3.legend()\n        ax3.set_title(f'{addn_metric} Per Epoch')\n\n        \n    else:\n        plt.subplots(1,2,figsize=(20,8))\n        \n    \n    \n        #loss:\n        ax1=plt.subplot(1,2,1)\n        ax1.plot(range(len(his)),his['loss'],color='g',label='training')\n        ax1.plot(range(len(his)),his['val_loss'],color='r',label='validation')\n        ax1.set_xlabel('EPOCHS')\n        ax1.set_ylabel('LOSS')\n        ax1.legend()\n        ax1.set_title('Loss Per Epoch')\n\n        #accuracy\n        ax2=plt.subplot(1,2,2)\n        ax2.plot(range(len(his)),his['accuracy'],color='g',label='training_acc')\n        ax2.plot(range(len(his)),his['val_accuracy'],color='r',label='validation_acc')\n        ax2.set_xlabel('EPOCHS')\n        ax2.set_ylabel('Accuracy')\n        ax2.legend()\n        ax2.set_title('Accuracy Per Epoch')\n\n        \n    \n    \n    plt.show()  ","20fe9004":"imgs,lab = train_data.next()\n\nlabels = [class_dict[str(int(i))] for i in lab]\n\n\nplot_image_grid(image_list=imgs,label_list =labels,num_images=12)","7a8a7697":"\n#from https:\/\/datascience.stackexchange.com\/questions\/45165\/how-to-get-accuracy-f1-precision-and-recall-for-a-keras-model\ndef recall_m(y_true, y_pred):\n    true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n    possible_positives = K.sum(K.round(K.clip(y_true, 0, 1)))\n    recall = true_positives \/ (possible_positives + K.epsilon())\n    return recall\n\ndef precision_m(y_true, y_pred):\n    true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n    predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1)))\n    precision = true_positives \/ (predicted_positives + K.epsilon())\n    return precision\n\ndef f1_score(y_true, y_pred):\n    precision = precision_m(y_true, y_pred)\n    recall = recall_m(y_true, y_pred)\n    return 2*((precision*recall)\/(precision+recall+K.epsilon()))","9ab86e4f":"\n\nlayer_reg ={'kernel_reg':{'l1':1e-7,'l2':1e-6},\n            'bias_reg': {'l1':1e-7,\n                         'l2':1e-6}}\n\nparams = {\n                  'n_dense' : [16],             # number of dense layer after conv\n                  'dense_act': ['relu','relu'],     # dnese layer activation\n                  'layer_reg': layer_reg,           # layer regularization params\n                  'drop'    :[0.5,0.5],             # dropout rates after dense\n                  'kernel_size':[(3,3),(3,3),(3,3)],      # kernel sizes\n                  'pool_size' : [(2,2),(2,2),(2,2)],      # pooling size\n                  'conv'    : [16,32,64],             # conv layer number of filters * 2\n                  'strides' : [2,1,1],\n                  'activations': ['relu','relu','relu'],   # conv layer activations \n                  'batch_norm': True,\n                  'gaussian_noise':True,\n                  'Gaussian_noise_std':0.1  # gaussian noise std dev\n                 }\n\ncnn_model = custom_cnn().build(input_shape=(img_size+ (3,)),\n                               update_params=params,  # model parameters\n                               output_layer={'n_out':1, # output dense layer\n                                            'activation':'sigmoid'})\n\n\n# # compilation params\ncompile_params ={'loss':'binary_crossentropy',\n                'metrics':['accuracy',f1_score,recall_m,precision_m],\n                'optimizer':'adam'}\n\ncnn_model.compile(**compile_params)\n\ncnn_model.summary()","306ade46":"# callbacks \n#reduce_lr\nreduce_lr=ReduceLROnPlateau(patience=2,\n                            factor=0.8,\n                            min_delta=1e-2,\n                            monitor='val_f1_score',\n                            verbose=1,\n                            mode='max')\n\n#early stopping\nearly_stopping=EarlyStopping(patience=20,\n                             min_delta=1e-2,\n                              monitor='val_f1_score',\n                              restore_best_weights=True,\n                              mode='max')\n\nEPOCHS = 100\n\nhistory = cnn_model.fit(train_data,\n                        validation_data = val_data,\n                        steps_per_epoch=train_data.n\/\/batch_size,\n                        validation_steps = val_data.n\/\/batch_size,\n                       epochs=EPOCHS,\n                       callbacks = [reduce_lr,early_stopping],\n                       verbose=1)\n\ndisplay.clear_output()\n\nplot_history(history,'f1_score')","cc84034c":"#saving model\n\nmodels = 'saved_models'\nif not os.path.exists('.\/'+ models):\n    os.mkdir(models)\ncnn_model.save(filepath=os.path.join(models,'cnn_skin_cn.h5'))","386f4618":"_=cnn_model.evaluate(val_data)","604d5146":"_=cnn_model.evaluate(test_data)","2d295d89":"#thresholding \ndef roc_threshold(y_true,y_pred):\n    '''get best threshold from a roc_auc_curve\n    y_true: ground truth\n    y_pred: predicted probabilities'''\n\n\n    fpr, tpr, thresholds = roc_curve(y_true, y_pred)\n    # get the best threshold\n    J = tpr - fpr\n    ix = np.argmax(J)\n    best_thresh = thresholds[ix]\n    thresh_tpr=tpr[ix]\n    thresh_fpr=fpr[ix]\n    print(f'Best Threshold (TPR-FPR)= {best_thresh} \\n TPR :{thresh_tpr} \\n FPR :{thresh_fpr}')\n\n    #best threshold by geometric mean :\n    # calculate the g-mean for each threshold\n    gmeans = np.sqrt(tpr * (1-fpr))\n\n    # locate the index of the largest g-mean\n    ix1 = np.argmax(gmeans)\n    \n    \n    print('Best Threshold (geometric mean) = %f \\n G-Mean=%.3f' % (thresholds[ix1], gmeans[ix1]))\n\n    return best_thresh","00e416b4":"!pip install tf_keras_vis -q","330be4bb":"import tf_keras_vis \n\ntf_keras_vis.__version__","8c93dd83":"from tf_keras_vis.saliency import Saliency\nfrom tf_keras_vis.gradcam import Gradcam\nfrom tf_keras_vis.utils.scores import CategoricalScore\nfrom tf_keras_vis.utils.model_modifiers import ReplaceToLinear\nfrom tf_keras_vis.gradcam_plus_plus import GradcamPlusPlus\n\n","b7e873c9":"#gradcam algo : https:\/\/keras.io\/examples\/vision\/grad_cam\/\n\n\ndef get_img_array(img_path, size):\n    # `img` is a PIL image of size 299x299\n    img = keras.preprocessing.image.load_img(img_path, target_size=size)\n    # `array` is a float32 Numpy array of shape (299, 299, 3)\n    array = keras.preprocessing.image.img_to_array(img)\n    # We add a dimension to transform our array into a \"batch\"\n    # of size (1, 299, 299, 3)\n    array = np.expand_dims(array, axis=0)\n    return array\n\n\ndef make_gradcam_heatmap(img_array, model, last_conv_layer_name, pred_index=None):\n    # First, we create a model that maps the input image to the activations\n    # of the last conv layer as well as the output predictions\n    grad_model = tf.keras.models.Model(\n        [model.inputs], [model.get_layer(last_conv_layer_name).output, model.output]\n    )\n\n    # Then, we compute the gradient of the top predicted class for our input image\n    # with respect to the activations of the last conv layer\n    with tf.GradientTape() as tape:\n        last_conv_layer_output, preds = grad_model(img_array)\n        if pred_index is None:\n            pred_index = tf.argmax(preds[0])\n        class_channel = preds[:, pred_index]\n\n    # This is the gradient of the output neuron (top predicted or chosen)\n    # with regard to the output feature map of the last conv layer\n    grads = tape.gradient(class_channel, last_conv_layer_output)\n\n    # This is a vector where each entry is the mean intensity of the gradient\n    # over a specific feature map channel\n    pooled_grads = tf.reduce_mean(grads, axis=(0, 1, 2))\n\n    # We multiply each channel in the feature map array\n    # by \"how important this channel is\" with regard to the top predicted class\n    # then sum all the channels to obtain the heatmap class activation\n    last_conv_layer_output = last_conv_layer_output[0]\n    heatmap = last_conv_layer_output @ pooled_grads[..., tf.newaxis]\n    heatmap = tf.squeeze(heatmap)\n\n    # For visualization purpose, we will also normalize the heatmap between 0 & 1\n    heatmap = tf.maximum(heatmap, 0) \/ tf.math.reduce_max(heatmap)\n    return heatmap.numpy()\n","1f2e052e":"# src: https:\/\/pypi.org\/project\/tf-keras-vis\/\n\ndef model_modifier_function(cloned_model):\n    '''modify model activation'''\n    cloned_model.layers[-1].activation = tf.keras.activations.linear\n\n    \ndef get_saliency(img,\n                 score,\n                 cnn_model=cnn_model,\n                 model_modifier=model_modifier_function):\n    #saliency map\n    \n\n    # Create Saliency object.\n    saliency = Saliency(cnn_model,\n                        model_modifier=model_modifier_function,\n                        clone=True)\n    #saliency map \n    sal_map  = saliency(score,\n                        np.array(img),\n                        smooth_samples=20, # The number of calculating gradients iterations.\n                        smooth_noise=0.20) # noise spread level.\n    return sal_map\n\ndef get_gradcam(img,\n                score,\n                cnn_model=cnn_model,\n                model_modifier=model_modifier_function):\n\n    # Create Gradcam object\n    gradcam = Gradcam(cnn_model,\n                      model_modifier,\n                      clone=True)\n\n    # Generate heatmap with GradCAM\n    cam = gradcam(score,\n                  img,\n                  seek_penultimate_conv_layer=True)\n    \n    heatmap = np.uint8(cm.jet(cam[0])[..., :3] * 255)\n    \n    \n    return heatmap\n\ndef get_gradcam_plus(img,\n                    score,\n                    model=cnn_model,\n                    model_modifier=ReplaceToLinear()):\n    \n    # Create GradCAM++ object\n    gradcam = GradcamPlusPlus(model,\n                          model_modifier=model_modifier,\n                          clone=True)\n    \n    cam = gradcam(score,\n                  img)\n    \n    heatmap = np.uint8(cm.jet(cam[0])[..., :3] * 255)\n    \n    return heatmap","1724c058":"#get a batch of test data \nimgs,labs = test_data.next()","6602e599":"plt.subplots(5,4,figsize=(5*3,4*3))\n\nidx=1\n\nfor i,img in enumerate(imgs[:5]):\n    lab = np.argmax(labs[i])\n    score1 = CategoricalScore([lab])\n    \n     \n    #predict on image\n    prd= str(int(cnn_model.predict(img.reshape(1,224,224,3))>0.75))\n    \n    plt.subplot(5,4,idx)\n    plt.title(f'orignal image ({class_dict[str(lab)]})')\n    plt.axis('off')\n    plt.imshow(img)\n    idx+=1\n    \n    #saliency\n    plt.subplot(5,4,idx)\n    plt.title(f'predicted {class_dict[prd]}(saliency map)')\n    sal = get_saliency(img,\n                       score1).reshape(224,224,1)\n    plt.axis('off')\n    plt.imshow(img)\n    plt.imshow(sal,alpha=0.45,cmap='jet') #overlay\n    idx+=1\n    \n    #gradcam\n    plt.subplot(5,4,idx)\n    gdcam = get_gradcam(img,\n                        score1)\n    plt.imshow(img)\n    plt.imshow(gdcam,alpha=0.30,cmap='jet') #overlay\n    plt.title(f'predicted {class_dict[prd]}(gradcam)')\n    plt.axis('off')\n    idx+=1\n    \n    \n    #gradcam ++\n    plt.subplot(5,4,idx)\n    gdcam_pls = get_gradcam_plus(img,\n                                 score1)\n    plt.imshow(img)\n    plt.imshow(gdcam_pls,alpha=0.30,cmap='jet') #overlay\n    plt.title(f'predicted {class_dict[prd]}(gradcam + +)')\n    plt.axis('off')\n    idx+=1\n    \n    if idx>20:\n        break\n\nplt.tight_layout()\nplt.show()","a5b87b49":"plt.subplots(5,4,figsize=(5*3,4*3))\n\nidx=1\n\nfor i,img in enumerate(imgs[5:10]):\n    i=i+5\n    lab = np.argmax(labs[i])\n    score1 = CategoricalScore([lab])\n    \n    #predict on image\n    prd= str(int(cnn_model.predict(img.reshape(1,224,224,3))>0.75))\n    \n    plt.subplot(5,4,idx)\n    plt.title(f'orignal image ({class_dict[str(lab)]})')\n    plt.axis('off')\n    plt.imshow(img)\n    idx+=1\n    \n    #saliency\n    plt.subplot(5,4,idx)\n    plt.title(f'predicted {class_dict[prd]}(saliency map)')\n    sal = get_saliency(img,\n                       score1).reshape(224,224,1)\n    plt.axis('off')\n    plt.imshow(img)\n    plt.imshow(sal,alpha=0.45,cmap='jet') #overlay\n    idx+=1\n    \n    #gradcam\n    plt.subplot(5,4,idx)\n    gdcam = get_gradcam(img,\n                        score1)\n    plt.imshow(img)\n    plt.imshow(gdcam,alpha=0.30,cmap='jet') #overlay\n    plt.title(f'predicted {class_dict[prd]}(gradcam)')\n    plt.axis('off')\n    idx+=1\n    \n    \n    #gradcam ++\n    plt.subplot(5,4,idx)\n    gdcam_pls = get_gradcam_plus(img,\n                                 score1)\n    plt.imshow(img)\n    plt.imshow(gdcam_pls,alpha=0.30,cmap='jet') #overlay\n    plt.title(f'predicted {class_dict[prd]}(gradcam + +)')\n    plt.axis('off')\n    idx+=1\n    \n    if idx>20:\n        break\n\nplt.tight_layout()\nplt.show()","60ff0464":"plt.subplots(5,4,figsize=(5*3,4*3))\n\nidx=1\n\nfor i,img in enumerate(imgs[10:15]):\n    i=i+10\n    lab = np.argmax(labs[i])\n    score1 = CategoricalScore([lab])\n    \n    #predict on image\n    prd= str(int(cnn_model.predict(img.reshape(1,224,224,3))>0.75))\n    \n    plt.subplot(5,4,idx)\n    plt.title(f'orignal image ({class_dict[str(lab)]})')\n    plt.axis('off')\n    plt.imshow(img)\n    idx+=1\n    \n    #saliency\n    plt.subplot(5,4,idx)\n    plt.title(f'predicted {class_dict[prd]}(saliency map)')\n    sal = get_saliency(img,\n                       score1).reshape(224,224,1)\n    plt.axis('off')\n    plt.imshow(img)\n    plt.imshow(sal,alpha=0.45,cmap='jet') #overlay\n    idx+=1\n    \n    #gradcam\n    plt.subplot(5,4,idx)\n    gdcam = get_gradcam(img,\n                        score1)\n    plt.imshow(img)\n    plt.imshow(gdcam,alpha=0.30,cmap='jet') #overlay\n    plt.title(f'predicted {class_dict[prd]}(gradcam)')\n    plt.axis('off')\n    idx+=1\n    \n    \n    #gradcam ++\n    plt.subplot(5,4,idx)\n    gdcam_pls = get_gradcam_plus(img,\n                                 score1)\n    plt.imshow(img)\n    plt.imshow(gdcam_pls,alpha=0.30,cmap='jet') #overlay\n    plt.title(f'predicted {class_dict[prd]}(gradcam + +)')\n    plt.axis('off')\n    idx+=1\n    \n    if idx>20:\n        break\n\nplt.tight_layout()\nplt.show()","dfef954a":"class skin_cancer_detector:\n    def __init__(self,\n                model = cnn_model,\n                class_dict= class_dict,\n                img_size = (1,224,224,3),\n                threshold=0.65):\n        self.model = model\n        self.classes = class_dict\n        self.img_size= img_size\n        self.threshold = threshold\n        \n    def load_image(self,\n                   image_path):\n        \n        img= cv2.imread(image_path)\n        img = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\n        img = img.reshape(self.img_size)\n        \n        return img\n    \n    def predict(self,image_path,show_image=True):\n        \n        self.loaded_img = self.load_image(image_path)\n        \n        self.pred = self.model.predict(self.loaded_img)\n        print(self.pred)\n        \n        self.prediction = self.classes[str(int(self.pred>self.threshold))]\n        if self.pred< self.threshold:\n            self.pred = 1- self.pred\n                    \n        prob = str(self.pred)\n        if show_image:\n            plt.figure(figsize=(7,7))\n            plt.title(f'prediction {self.prediction} (probablity={prob})')\n            plt.imshow(self.loaded_img[0])\n            plt.axis('off')\n            plt.show()\n            \n        return self.prediction","b6ebb5c3":"#initiate predictor \npredictor = skin_cancer_detector()","2bbbcd66":"%%time\n#predict\n_=predictor.predict('..\/input\/skin-cancer-malignant-vs-benign\/test\/benign\/1033.jpg')","4b6a7f4d":"# Helper Functions","37aee19a":"# **Making a predictor**","d73b940a":"**Visualizing Test predictions**","4b6974df":"# About : \n\n**This notebook tries to classify between benign and malignant skin growths**\n\n Common skin growths can be:\n\n    Malignant: A cancerous growth that can spread very quickly and invade nearby tissues\n    Benign: A non-cancerous growth that usually grows very slowly and does not spread to other areas\n\nWhen a healthcare provider is consulted regarding a skin growth, the first step in the diagnostic procedure is a physical examination. The diagnostician must examine the skin closely to determine whether the growth is benign or if it has the potential to be malignant.\n\nIf a growth appears to have the potential to be malignant, a tissue sample must be sent to the lab and a biopsy must be performed. A biopsy involves looking under a microscope to determine if cancerous cells are present in a tissue sample.  \n\nsrc: https:\/\/www.verywellhealth.com\/common-skin-growths-5119764","b8c543ea":"# Checking some images ","c331c3dc":"# Evaluating Model","0809a299":"# Visualizing model predictions","c54adfb8":"# Imports ","c11d20a1":"# Get prediction on test set ","2762712d":"# Malignant Tumors: \n\nMalignant tumor is a tumor that is invasive, meaning it can invade the surrounding tissues. Malignant tumors contain cells that are cancerous, growing out of control and capable of metastasizing. Metastasize simply means that the cells of the tumor are able to leave the original tumor and travel to other parts of the body.\n\nIn cancerous tumors or malignant tumors, the cells have lost the ability to stop growing. In other words, they have gone rogue and will not stop dividing. To better explain, nearly every cell in the body is able to grow and divide to make new cells, to a certain extent. This is important for all living organisms. When cells go rogue, however, there is a problem with the DNA. When mutations, which are changes in the DNA sequence, occur, they cause the cells to forget how to stop dividing. After some time, the mass of cells becomes a tumor. \n\nsrc: https:\/\/study.com\/academy\/lesson\/what-is-a-malignant-tumor-definition-treatment.html","ae151c4d":"# Fitting Model","adcaa30c":"**Metrics**","8bbab95b":"# Input Data ","a37854b5":"# Building Model","0bb27491":"# Config","ddf86e86":"**What is Benign Tumor** \n\nBenign tumors are noncancerous growths in the body. Unlike cancerous tumors, they don\u2019t spread (metastasize) to other parts of the body.\n\nBenign tumors can form anywhere. If you discover a lump or mass in your body that can be felt from the outside, you might immediately assume it is cancerous. For instance, women who find lumps in their breasts during self-examinations are often alarmed. However, most breast growths are benign. In fact, many growths throughout the body are benign.\n\nThe exact cause of a benign tumor is often unknown. It develops when cells in the body divide and grow at an excessive rate. Typically, the body is able to balance cell growth and division. When old or damaged cells die, they are automatically replaced with new, healthy cells. In the case of tumors, dead cells remain and form a growth known as a tumor.\n\nsrc: https:\/\/www.healthline.com\/health\/benign\n\n\n"}}