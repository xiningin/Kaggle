{"cell_type":{"8ff0f172":"code","81065256":"code","c2dd33a3":"code","0e1e5e6d":"code","9b4afb64":"code","2b23c9fd":"code","33af916d":"code","01c0b42c":"code","6c97c79c":"code","c416c1f8":"code","6a059c06":"markdown","63057d89":"markdown","25393257":"markdown","17926e1b":"markdown","969d5fc7":"markdown","156295d8":"markdown","19901148":"markdown","5468d053":"markdown","2ba1956c":"markdown","6fb5c155":"markdown","f467959b":"markdown","5d068458":"markdown"},"source":{"8ff0f172":"def fib1(n):\n    \"\"\"this function takes a number as n\n    and returns the n-th fibbonaci number\n    arguments: n: int\n    \n    examples:\n    \n    fib(1) should return 1\n    fib(0) should return 0\n    fib(5) should return 5\n    fib(50) should return 12586269025\"\"\"\n    \n    x1, x2 = 0, 1\n    \n    for i in range(n):\n        x1, x2 = x2, x1 + x2\n        \n    return x1","81065256":"fib1(30)","c2dd33a3":"def fib2(n):\n    \"\"\"this function takes a number as n\n    and returns the n-th fibbonaci number\n    arguments: n: int\n    \n    examples:\n    \n    fib(1) should return 1\n    fib(0) should return 0\n    fib(5) should return 5\n    fib(50) should return 12586269025\"\"\"\n    \n    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)","0e1e5e6d":"memo = {0:0, 1:1}\n\ndef fib3(n):\n    \"\"\"this function takes a number as n\n    and returns the n-th fibbonaci number\n    arguments: n: int\n    \n    examples:\n    \n    fib(1) should return 1\n    fib(0) should return 0\n    fib(5) should return 5\n    fib(50) should return 12586269025\"\"\"\n        \n    \n        \n    if n not in memo:\n        memo[n] = fib3(n - 1) + fib3(n - 2)\n    return memo[n]","9b4afb64":"fib3(30)","2b23c9fd":"fib3(500)","33af916d":"from functools import lru_cache\n\n\n@lru_cache(maxsize=None)\n\ndef fib4(n):\n    \"\"\"this function takes a number as n\n    and returns the n-th fibbonaci number\n    arguments: n: int\n    \n    examples:\n    \n    fib(1) should return 1\n    fib(0) should return 0\n    fib(5) should return 5\n    fib(50) should return 12586269025\"\"\"\n        \n    if n < 2:\n        return n\n    \n    return fib4(n - 1) + fib4(n - 2)","01c0b42c":"fib4(500)","6c97c79c":"def fib5(n):\n    \"\"\"this function takes a number as n\n    and generates n fibbonaci numbers\n    arguments: n: int\n    \n    examples:\n    \n    fib(1) should return 1\n    fib(0) should return 0\n    fib(5) should return 5\n    fib(50) should return 12586269025\"\"\"\n    \n    x1, x2 = 0, 1\n    \n    for i in range(n):\n        yield x1\n        x1, x2 = x2, x1 + x2\n        \n    return x1","c416c1f8":"list(fib5(10))","6a059c06":"In this case you can run fib3 function for n much bigger than 30","63057d89":"# FIBONACCI","25393257":"## 1. First approach: classic","17926e1b":"## 2. Second approach: recursion","969d5fc7":"Hope it was helpfull \u270c","156295d8":"In this case it's better to not pass arguments bigger than 30 to this function because it may break the kernel","19901148":"## 5. Generator","5468d053":"## 4. Catching","2ba1956c":"Last solution is use generator to generate a iterable of n-th numbers","6fb5c155":"This approach is one of the best, the idea is:\n\n* set the dictionary as variable memo, set the base case when n-th number is less than 2\n* write a fucntion fib with using recursion calls like in example above but this time save the results in memo","f467959b":"## 3. Memo","5d068458":"In this approach I use catching to save previus results of fib, and write the same function as **fib2** - recursive approach"}}