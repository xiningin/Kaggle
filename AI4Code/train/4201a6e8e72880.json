{"cell_type":{"a700a69d":"code","bbed047c":"code","40d8e2a5":"code","afc156d9":"code","6c8dd2ca":"code","06de84e3":"code","c5f9a8d3":"code","7983c682":"code","d918060f":"code","8c6ba5b0":"code","ac8ba9ac":"code","45fa5cb8":"code","10e24c67":"code","0d7e1cbd":"code","675ec868":"code","c49a04e0":"code","3656dd73":"code","74b69168":"code","ce83d35d":"code","1df177be":"code","898fddc1":"code","0da0e95b":"code","d8dbf04a":"code","17dd2827":"code","cb6620d5":"code","adfe9c37":"code","ae3373b9":"code","122608df":"code","cf665c63":"code","8b10932e":"code","e7a23f2d":"code","b7f6e06c":"code","39fe29ca":"code","439a5914":"code","036b6e09":"code","6d73d4db":"code","a4b00fa5":"code","a77bfe6b":"code","27363321":"code","35dab669":"code","cc8dee8c":"code","27ba2346":"code","d287f198":"code","f44e72ca":"code","e8b138e3":"code","78c5141d":"code","d976c932":"code","16c6b0e8":"code","83652818":"code","561bd126":"code","b5a9bd34":"code","4fb8364e":"code","33ad5f6b":"code","2ddc6804":"code","3c1c4eb0":"code","b45d8e45":"code","c53f310d":"code","f3479712":"code","e0692a56":"code","789afb31":"code","e5a11dfd":"code","bba16253":"code","69102933":"code","9c70950b":"code","dfa1206f":"code","6f35f3a6":"code","346a479f":"code","a30ba61a":"code","f673a9ca":"code","7e2f1f13":"code","f0ae09ce":"markdown","71e93dc4":"markdown","504e0e82":"markdown","b2aa99d5":"markdown","a8a00f92":"markdown","f6394e15":"markdown","eff5bb75":"markdown","fc66ddf8":"markdown","d43b5d51":"markdown","a87c381d":"markdown","d64520b1":"markdown","cdfa24ca":"markdown","674be9cd":"markdown","a912e67a":"markdown","ba67f439":"markdown","cd026dbd":"markdown","3f0436ad":"markdown"},"source":{"a700a69d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","bbed047c":"data = pd.read_csv(\"..\/input\/mercedesbenz-greener-manufacturing\/train.csv\")","40d8e2a5":"data.head(5)","afc156d9":"data = data[['X0', 'X1', 'X2', 'X3', 'X4', 'X5', 'X6', 'X8']]","6c8dd2ca":"data","06de84e3":"dic = {}\nfor i in data.columns:\n    print(i , \":\\n\", data[i].value_counts())\n    dic.update({i : len(data[i].unique())})\n    ","c5f9a8d3":"data.info()","7983c682":"data.isnull().sum()","d918060f":"dic","8c6ba5b0":"df = data.copy()","ac8ba9ac":"X3_dummy = pd.get_dummies(df['X3'], drop_first = True)","45fa5cb8":"X3_dummy","10e24c67":"df = pd.concat([df,X3_dummy], axis = 1)","0d7e1cbd":"df","675ec868":"df = data.copy()","c49a04e0":"df.head()","3656dd73":"dic","74b69168":"#we take X0 for this encoding","ce83d35d":"df = df[['X0']]","1df177be":"df.value_counts()\n#from this taking top ten counts for creating dummies... anothers are eliminated","898fddc1":"X0_lst = df['X0'].value_counts().index[0:15]\n","0da0e95b":"def hot_encoding(df, var, lst):\n    for i in lst:\n        df[var + \"_\" + i] = np.where(df[var] == i, 1 , 0 )","d8dbf04a":"hot_encoding(df, 'X0', X0_lst)","17dd2827":"df","cb6620d5":"#mean encoding is done only based on the y value of the dataset","adfe9c37":"data = pd.read_csv(\"..\/input\/titanic\/train.csv\")","ae3373b9":"data.head()","122608df":"data.info()","cf665c63":"df = data.copy()","8b10932e":"#from this we take cabin column for this encoding\ndf['Cabin'] = df['Cabin'].astype(str).str[0]","e7a23f2d":"df['Cabin'].value_counts()","b7f6e06c":"mean_for_cab = df.groupby(['Cabin'])['Survived'].mean().to_dict()","39fe29ca":"mean_for_cab","439a5914":"df['Cabin'] = df['Cabin'].map(mean_for_cab)","036b6e09":"#this time we take Embarked column\n\ndf['Embarked']","6d73d4db":"df['Embarked'].value_counts()","a4b00fa5":"prob = df.groupby(['Embarked'])['Survived'].mean()","a77bfe6b":"prob","27363321":"neg_prob = 1 - prob","35dab669":"neg_prob","cc8dee8c":"probability_ratio = prob\/neg_prob","27ba2346":"probability_ratio","d287f198":"dic = dict(probability_ratio)","f44e72ca":"df['Embarked'] = df['Embarked'].map(dic)","e8b138e3":"prob_data = df['Embarked']","78c5141d":"plt.figure(figsize = (10,4))\nsns.countplot(prob_data)","d976c932":"df = data.copy()","16c6b0e8":"df['Embarked'].value_counts()","83652818":"#Replace that with the frequency\ndic = df['Embarked'].value_counts().to_dict()","561bd126":"df['Embarked'] = df['Embarked'].map(dic)","b5a9bd34":"df['Embarked'].plot(kind = \"hist\")","4fb8364e":"df = data.copy()","33ad5f6b":"df['Cabin']","2ddc6804":"df['Cabin'] = df['Cabin'].astype(str).str[0]","3c1c4eb0":"lst = df['Cabin'].value_counts().index","b45d8e45":"dic = {j:i for i,j in enumerate(lst , 0)}","c53f310d":"dic","f3479712":"#now map the dic to the variable","e0692a56":"df['Cabin'] = df['Cabin'].map(dic)","789afb31":"print(df['Cabin'].value_counts())\ndf['Cabin'].plot(kind = \"hist\")","e5a11dfd":"#it is based on the y variables","bba16253":"df = data.copy()","69102933":"df['Embarked']","9c70950b":"mean_val = df.groupby(['Embarked'])['Survived'].mean()","dfa1206f":"mean_val","6f35f3a6":"lst = mean_val.index","346a479f":"lst","a30ba61a":"#mapping based the mean \ndic = {j:i for i,j in enumerate(lst,0)}","f673a9ca":"df['Embarked'] = df['Embarked'].map(dic)","7e2f1f13":"df['Embarked'].value_counts()","f0ae09ce":"Considering the Same dataset by selecting cabin variable","71e93dc4":"# Counter Frequency Encoding","504e0e82":"For more...\n\n**Handling Missing Categories (Feature Engineering) **\nhttps:\/\/www.kaggle.comhandling-missing-categories-feature-engineering\n\n**Handling Missing Numerical Features(Feature Engineering)**\nhttps:\/\/www.kaggle.comhandling-missing-numerical-features-f-e\n\n**Handling Imbalanced Datasets **\nhttps:\/\/www.kaggle.comhandling-imbalanced-datasets\n\n**Handling Outliers**\nhttps:\/\/www.kaggle.comhandling-outliers-feature-engieering\n\n**Transformations (Feature Scaling)**\nhttps:\/\/www.kaggle.comtransformation-techniques-feature-scaling","b2aa99d5":"# First Analyze the data.. What's going on their\n\n#### First We see the encoding for Norminal variables","a8a00f92":"Some times It works","f6394e15":"# One hot Encoding with many Cata","eff5bb75":"# One Hot Encoding","fc66ddf8":"It deletes more information of the dataset, its an disadvantage","d43b5d51":"#This is one way of encoding Cata's. Its good, only we have less number of labels","a87c381d":"# Target Guided Encoding","d64520b1":"#X4 having only 4 cata's..\n#Do one hot Encoding for that X3 variable","cdfa24ca":"# Mean Encoding","674be9cd":"# Handling of Categorical Data's\n\n### For Ordinal Categories:\n1) One Hot Encoding\n\n2) One Hot Encoding with Many Categories\n\n3) Mean Encoding\n\n4) Probability Ratio Encoding\n\n5) Counter Frequency Encoding\n\n### For Nomical Categories:\n1) Label Encoding.\n\n2) Target Guided Encoding.","a912e67a":"This is the way of Probability Ratio Encoding\n","ba67f439":"# Probability Ratio Encoding","cd026dbd":"Taking same Embarked cata","3f0436ad":"# Encoding for the Ordinal Variables\n# Label Encoding:"}}