{"cell_type":{"f1d30646":"code","3ce65ea6":"code","5a8bd1f1":"code","f009a28e":"code","9fd392ca":"code","96247486":"code","c0420715":"code","df586461":"code","dd3b8d2f":"code","e4d0977d":"code","2b34b885":"code","c93c2f43":"code","74f1132f":"code","92b4f0c7":"code","14cefa7e":"code","e24690e2":"code","a27bcc43":"code","2c934044":"code","80136a96":"code","c99f2a35":"code","2c172055":"code","b9d8275e":"code","b15c8d42":"code","47581b14":"code","071f9da5":"code","e886ef8d":"code","ef0b6fa4":"code","baf58cd3":"code","d9dd6aa7":"code","dbfe5bda":"code","4193e010":"code","d0f9a094":"code","c01c7a76":"code","e8232db5":"code","0be137fe":"code","449a2127":"code","e58f7b28":"code","2e5786ff":"code","648523a8":"code","0ac92351":"code","994e5fb7":"code","70ba641f":"code","4a87e545":"code","287108b5":"code","b178f146":"code","d2c5436e":"code","a1e4d261":"code","876bbb3c":"code","55d24327":"code","cc5fc6b2":"code","2f20c2c2":"code","52a73cb1":"code","4ffa39df":"code","d517093b":"code","375f5aa3":"code","d5b45c27":"code","9119d501":"code","e71c725b":"code","14a90574":"code","01b1ee69":"code","90e1723d":"code","bc782a0f":"code","4867c841":"code","bcfccdd3":"code","fa65bed2":"code","867cdf42":"code","9da7ad0d":"code","c7b6aa91":"code","194b970c":"code","f1ee738b":"code","65ee7c43":"code","523227e9":"markdown","8c20a6ff":"markdown","b849035b":"markdown","c0a4cf2c":"markdown","74700513":"markdown","39d8b8d7":"markdown","fa6a8f4f":"markdown","09f28146":"markdown","c2b3f69d":"markdown","395cc873":"markdown","0338dfac":"markdown","a2aa23fa":"markdown"},"source":{"f1d30646":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3ce65ea6":"calendar = pd.read_csv(\"\/kaggle\/input\/m5-forecasting-accuracy\/calendar.csv\")\nsell_prices = pd.read_csv(\"\/kaggle\/input\/m5-forecasting-accuracy\/sell_prices.csv\")\nsales_train = pd.read_csv(\"\/kaggle\/input\/m5-forecasting-accuracy\/sales_train_validation.csv\")\nsample_sub = pd.read_csv(\"\/kaggle\/input\/m5-forecasting-accuracy\/sample_submission.csv\")","5a8bd1f1":"import matplotlib.pyplot as plt\nimport seaborn as sn\n%matplotlib inline","f009a28e":"import numpy as np\nimport scipy as sc","9fd392ca":"def memory_reduction(dataset):\n    column_types = dataset.dtypes\n    temp = None\n    for x in range(len(column_types)):\n        column_types[x] = str(column_types[x])\n    for x in range(len(column_types)):\n        temp = dataset.columns[x]\n        if dataset.columns[x] == \"date\":\n            dataset[temp] = dataset[temp].astype(\"datetime64\")\n        if column_types[x] == \"int64\" and dataset.columns[x] != \"date\":\n            dataset[temp] = dataset[temp].astype(\"int16\")\n        if column_types[x] == \"object\" and dataset.columns[x] != \"date\":\n            dataset[temp] = dataset[temp].astype(\"category\")\n        if column_types[x] == \"float64\" and dataset.columns[x] != \"date\":\n            dataset[temp] = dataset[temp].astype(\"float16\")\n    return dataset\n\n           ","96247486":"calendar.tail(56)","c0420715":"calendar_df = memory_reduction(calendar)","df586461":"calendar_df.dtypes","dd3b8d2f":"calendar_df.shape","e4d0977d":"sell_prices.dtypes","2b34b885":"sell_prices.head()","c93c2f43":"sell_prices[\"id\"] = sell_prices[\"item_id\"] + \"_\" + sell_prices[\"store_id\"] + \"_validation\" ","74f1132f":"sell_prices = pd.merge(sell_prices, sales_train[[\"cat_id\", \"id\", \"state_id\"]], on = \"id\")","92b4f0c7":"sell_prices.columns","14cefa7e":"sell_prices_df = memory_reduction(sell_prices)","e24690e2":"sell_prices_df.dtypes","a27bcc43":"sell_prices_df.shape","2c934044":"sales_train.head()","80136a96":"sales_train_df = memory_reduction(sales_train)","c99f2a35":"sales_train_df.dtypes","2c172055":"sales_train_df.shape","b9d8275e":"calendar_df = calendar_df[:1913]","b15c8d42":"calendar_df.shape","47581b14":"calendar_df.head()","071f9da5":"calendar_df[\"day\"] = pd.DatetimeIndex(calendar_df[\"date\"]).day","e886ef8d":"calendar_df[\"day\"] = calendar_df[\"day\"].astype(\"int8\")","ef0b6fa4":"calendar_df[\"week_num\"] = (calendar_df[\"day\"] - 1) \/\/ 7 + 1","baf58cd3":"calendar_df[\"week_num\"] = calendar_df[\"week_num\"].astype(\"int8\")","d9dd6aa7":"import gc","dbfe5bda":"def make_dataframe():\n    # Wide format dataset \n    df_wide_train = sales_train_df.drop(columns=[\"item_id\", \"dept_id\", \"cat_id\", \"state_id\",\"store_id\", \"id\"]).T\n    df_wide_train.index = calendar_df[\"date\"]\n    df_wide_train.columns = sales_train_df[\"id\"]\n    \n   \n    # Convert wide format to long format\n    df_long = df_wide_train.stack().reset_index(1)\n    df_long.columns = [\"id\", \"value\"]\n\n    del df_wide_train\n    gc.collect()\n    \n    df = pd.merge(pd.merge(df_long.reset_index(), calendar_df, on=\"date\"), sell_prices_df, on=[\"id\", \"wm_yr_wk\"])\n    df = df.drop(columns=[\"d\"])\n    #df[[\"cat_id\", \"store_id\", \"item_id\", \"id\", \"dept_id\"]] = df[[\"cat_id\"\", store_id\", \"item_id\", \"id\", \"dept_id\"]].astype(\"category\")\n    df[\"sell_price\"] = df[\"sell_price\"].astype(\"float16\")   \n    df[\"value\"] = df[\"value\"].astype(\"int32\")\n    df[\"state_id\"] = df[\"store_id\"].str[:2].astype(\"category\")\n\n\n    del df_long\n    gc.collect()\n\n    return df\n\ndf = make_dataframe()","4193e010":"#calendar_df.to_csv(\"calendar_normalized.csv\", index = False)\n#sales_train_df.to_csv(\"sales_train_normalized.csv\", index = False)\n#sell_prices_df.to_csv(\"sell_prices_normalized.csv\", index = False)","d0f9a094":"del calendar, sales_train, sell_prices\ngc.collect()","c01c7a76":"df.columns","e8232db5":"df.head()","0be137fe":"import matplotlib.pyplot as plt\nimport seaborn as sn \nimport numpy as np\nimport scipy as sc\n%matplotlib inline","449a2127":"temp = df.groupby([\"cat_id\", \"date\"])[\"value\"].sum()","e58f7b28":"temp","2e5786ff":"plt.figure(figsize = (12,4))\nplt.plot(temp[temp.index.get_level_values(\"cat_id\") == \"FOODS\"].index.get_level_values(\"date\"), temp[temp.index.get_level_values(\"cat_id\") == \"FOODS\"].values, label=\"FOODS\")\nplt.plot(temp[temp.index.get_level_values(\"cat_id\") == \"HOBBIES\"].index.get_level_values(\"date\"), temp[temp.index.get_level_values(\"cat_id\") == \"HOBBIES\"].values, label=\"HOBBIES\")\nplt.plot(temp[temp.index.get_level_values(\"cat_id\") == \"HOUSEHOLD\"].index.get_level_values(\"date\"), temp[temp.index.get_level_values(\"cat_id\") == \"HOUSEHOLD\"].values, label=\"HOUSEHOLD\")","648523a8":"temp = temp.loc[temp.index.get_level_values(\"date\") >= \"2015-01-01\"]","0ac92351":"plt.figure(figsize = (12,4))\nplt.plot(temp[temp.index.get_level_values(\"cat_id\") == \"FOODS\"].index.get_level_values(\"date\"), temp[temp.index.get_level_values(\"cat_id\") == \"FOODS\"].values, label=\"FOODS\")\nplt.plot(temp[temp.index.get_level_values(\"cat_id\") == \"HOBBIES\"].index.get_level_values(\"date\"), temp[temp.index.get_level_values(\"cat_id\") == \"HOBBIES\"].values, label=\"HOBBIES\")\nplt.plot(temp[temp.index.get_level_values(\"cat_id\") == \"HOUSEHOLD\"].index.get_level_values(\"date\"), temp[temp.index.get_level_values(\"cat_id\") == \"HOUSEHOLD\"].values, label=\"HOUSEHOLD\")\nplt.legend()","994e5fb7":"temp = df.groupby([\"cat_id\", \"date\"])[\"value\"].sum()","70ba641f":"temp = temp.loc[temp.index.get_level_values(\"date\") >= \"2015-01-01\"]","4a87e545":"temp = temp.loc[temp.index.get_level_values(\"date\") <= \"2015-02-01\"]","287108b5":"plt.figure(figsize = (12,4))\nplt.plot(temp[temp.index.get_level_values(\"cat_id\") == \"FOODS\"].index.get_level_values(\"date\"), temp[temp.index.get_level_values(\"cat_id\") == \"FOODS\"].values, label=\"FOODS\")\nplt.plot(temp[temp.index.get_level_values(\"cat_id\") == \"HOBBIES\"].index.get_level_values(\"date\"), temp[temp.index.get_level_values(\"cat_id\") == \"HOBBIES\"].values, label=\"HOBBIES\")\nplt.plot(temp[temp.index.get_level_values(\"cat_id\") == \"HOUSEHOLD\"].index.get_level_values(\"date\"), temp[temp.index.get_level_values(\"cat_id\") == \"HOUSEHOLD\"].values, label=\"HOUSEHOLD\")\nplt.legend()","b178f146":"plt.figure(figsize = (12,12))\nsn.heatmap(df.corr(), annot=True)","d2c5436e":"gc.collect()","a1e4d261":"temp = df.groupby([\"cat_id\", \"wday\"])[\"value\"].sum()","876bbb3c":"plt.figure(figsize=(6, 4))\nleft = np.arange(1,8) \nwidth = 0.3\nweeklabel = [\"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]    # Please Confirm df\n\n\nplt.bar(left, temp[temp.index.get_level_values(\"cat_id\") == \"FOODS\"].values, width=width, label=\"FOODS\")\nplt.bar(left + width, temp[temp.index.get_level_values(\"cat_id\") == \"HOUSEHOLD\"].values, width=width, label=\"HOUSEHOLD\")\nplt.bar(left + width + width, temp[temp.index.get_level_values(\"cat_id\") == \"HOBBIES\"].values, width=width, label=\"HOBBIES\")\nplt.legend(bbox_to_anchor=(1.01, 1.01))\nplt.xticks(left, weeklabel, rotation=60)\nplt.xlabel(\"day of week\")\nplt.ylabel(\"# of sold items\")\nplt.title(\"Total sold item in each daytype\")\n","55d24327":"temp = df.groupby([\"cat_id\", \"day\"])[\"value\"].sum()","cc5fc6b2":"plt.figure(figsize=(12, 8))\nleft = np.arange(1,32) \nwidth = 0.3\nweeklabel = [\"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]    # Please Confirm df\n\n\nplt.bar(left, temp[temp.index.get_level_values(\"cat_id\") == \"FOODS\"].values, width=width, label=\"FOODS\")\nplt.bar(left + width, temp[temp.index.get_level_values(\"cat_id\") == \"HOUSEHOLD\"].values, width=width, label=\"HOUSEHOLD\")\nplt.bar(left + width + width, temp[temp.index.get_level_values(\"cat_id\") == \"HOBBIES\"].values, width=width, label=\"HOBBIES\")\nplt.legend(bbox_to_anchor=(1.01, 1.01))\nplt.xlabel(\"day of month\")\nplt.ylabel(\"# of sold items\")\nplt.title(\"Total sold item in each day\")\n","2f20c2c2":"gc.collect()","52a73cb1":"temp = df.groupby([\"state_id\", \"wday\"])[\"value\"].sum()","4ffa39df":"plt.figure(figsize=(6, 4))\nleft = np.arange(1,8) \nwidth = 0.3\nweeklabel = [\"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]    # Please Confirm df\n\n\nplt.bar(left, temp[temp.index.get_level_values(\"state_id\") == \"CA\"].values, width=width, label=\"CA\")\nplt.bar(left + width, temp[temp.index.get_level_values(\"state_id\") == \"TX\"].values, width=width, label=\"TX\")\nplt.bar(left + width + width, temp[temp.index.get_level_values(\"state_id\") == \"WI\"].values, width=width, label=\"WI\")\nplt.legend(bbox_to_anchor=(1.01, 1.01))\nplt.xticks(left, weeklabel, rotation=60)\nplt.xlabel(\"day of week\")\nplt.ylabel(\"# of sold items\")\nplt.title(\"Total sold item in each daytype\")\n","d517093b":"temp = df.groupby([\"state_id\", \"day\"])[\"value\"].sum()","375f5aa3":"plt.figure(figsize=(12, 8))\nleft = np.arange(1,32) \nwidth = 0.3\nweeklabel = [\"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]    # Please Confirm df\n\n\nplt.bar(left, temp[temp.index.get_level_values(\"state_id\") == \"CA\"].values, width=width, label=\"CA\")\nplt.bar(left + width, temp[temp.index.get_level_values(\"state_id\") == \"TX\"].values, width=width, label=\"TX\")\nplt.bar(left + width + width, temp[temp.index.get_level_values(\"state_id\") == \"WI\"].values, width=width, label=\"WI\")\nplt.legend(bbox_to_anchor=(1.01, 1.01))\nplt.xlabel(\"day of month\")\nplt.ylabel(\"# of sold items\")\nplt.title(\"Total sold item in each day\")","d5b45c27":"gc.collect()","9119d501":"temp = df.groupby([\"state_id\", \"date\"])[\"value\"].sum()","e71c725b":"plt.figure(figsize = (12,4))\nplt.plot(temp[temp.index.get_level_values(\"state_id\") == \"CA\"].index.get_level_values(\"date\"), temp[temp.index.get_level_values(\"state_id\") == \"CA\"].values, label=\"CA\")\nplt.plot(temp[temp.index.get_level_values(\"state_id\") == \"TX\"].index.get_level_values(\"date\"), temp[temp.index.get_level_values(\"state_id\") == \"TX\"].values, label=\"TX\")\nplt.plot(temp[temp.index.get_level_values(\"state_id\") == \"WI\"].index.get_level_values(\"date\"), temp[temp.index.get_level_values(\"state_id\") == \"WI\"].values, label=\"WI\")\nplt.legend()","14a90574":"temp = temp.loc[temp.index.get_level_values(\"date\") >= \"2015-12-01\"]  \ntemp = temp.loc[temp.index.get_level_values(\"date\") <= \"2016-01-01\"]","01b1ee69":"plt.figure(figsize = (16,4))\nplt.plot(temp[temp.index.get_level_values(\"state_id\") == \"CA\"].index.get_level_values(\"date\"), temp[temp.index.get_level_values(\"state_id\") == \"CA\"].values, label=\"CA\")\nplt.plot(temp[temp.index.get_level_values(\"state_id\") == \"TX\"].index.get_level_values(\"date\"), temp[temp.index.get_level_values(\"state_id\") == \"TX\"].values, label=\"TX\")\nplt.plot(temp[temp.index.get_level_values(\"state_id\") == \"WI\"].index.get_level_values(\"date\"), temp[temp.index.get_level_values(\"state_id\") == \"WI\"].values, label=\"WI\")\nplt.legend()","90e1723d":"temp = df.groupby([\"year\"])[[\"snap_CA\", \"snap_TX\", \"snap_WI\"]].sum()\ntemp","bc782a0f":"fig, axs = plt.subplots(3, figsize = (8,6)) \n\naxs[0].plot(temp.index, temp.snap_CA, label = \"SNAP_CA\")\naxs[1].plot(temp.index, temp.snap_TX, label = \"SNAP_TX\")\naxs[2].plot(temp.index, temp.snap_WI, label = \"SNAP_WI\")\naxs[0].legend()\naxs[1].legend()\naxs[2].legend()","4867c841":"fig, axs = plt.subplots(3, figsize = (8,6)) \n\naxs[0].bar(temp.index, temp.snap_CA, label = \"SNAP_CA\")\naxs[1].bar(temp.index, temp.snap_TX, label = \"SNAP_TX\")\naxs[2].bar(temp.index, temp.snap_WI, label = \"SNAP_WI\")\naxs[0].legend()\naxs[1].legend()\naxs[2].legend()","bcfccdd3":"temp = calendar_df.groupby([\"year\"])[[\"snap_CA\", \"snap_TX\", \"snap_WI\"]].sum()\ntemp","fa65bed2":"fig, axs = plt.subplots(3, figsize = (8,6)) \n\naxs[0].bar(temp.index, temp.snap_CA, label = \"SNAP_CA\")\naxs[1].bar(temp.index, temp.snap_TX, label = \"SNAP_TX\")\naxs[2].bar(temp.index, temp.snap_WI, label = \"SNAP_WI\")\naxs[0].legend()\naxs[1].legend()\naxs[2].legend()","867cdf42":"temp = df.groupby([\"month\"])[[\"snap_CA\", \"snap_TX\", \"snap_WI\"]].sum()\ntemp","9da7ad0d":"fig, axs = plt.subplots(3, figsize = (8,6)) \n\naxs[0].plot(temp.index, temp.snap_CA, label = \"SNAP_CA\")\naxs[1].plot(temp.index, temp.snap_TX, label = \"SNAP_TX\")\naxs[2].plot(temp.index, temp.snap_WI, label = \"SNAP_WI\")\naxs[0].legend()\naxs[1].legend()\naxs[2].legend()","c7b6aa91":"fig, axs = plt.subplots(3, figsize = (8,6)) \n\naxs[0].bar(temp.index, temp.snap_CA, label = \"SNAP_CA\")\naxs[1].bar(temp.index, temp.snap_TX, label = \"SNAP_TX\")\naxs[2].bar(temp.index, temp.snap_WI, label = \"SNAP_WI\")\naxs[0].legend()\naxs[1].legend()\naxs[2].legend()","194b970c":"temp = df.groupby([\"week_num\"])[[\"snap_CA\", \"snap_TX\", \"snap_WI\"]].sum()\ntemp","f1ee738b":"fig, axs = plt.subplots(3, figsize = (8,6)) \n\naxs[0].plot(temp.index, temp.snap_CA, label = \"SNAP_CA\")\naxs[1].plot(temp.index, temp.snap_TX, label = \"SNAP_TX\")\naxs[2].plot(temp.index, temp.snap_WI, label = \"SNAP_WI\")\naxs[0].legend()\naxs[1].legend()\naxs[2].legend()","65ee7c43":"fig, axs = plt.subplots(3, figsize = (8,6)) \n\naxs[0].bar(temp.index, temp.snap_CA, label = \"SNAP_CA\")\naxs[1].bar(temp.index, temp.snap_TX, label = \"SNAP_TX\")\naxs[2].bar(temp.index, temp.snap_WI, label = \"SNAP_WI\")\naxs[0].legend()\naxs[1].legend()\naxs[2].legend()","523227e9":"memory reduction function\n","8c20a6ff":"#### as we  can see the data set in calendar has 1969 rows although sales_train has 1914 days\n     thus we need to reduce calendar data to 1919  ","b849035b":"## State analysis","c0a4cf2c":"# DATA ANALYSIS","74700513":"## Loading The data","39d8b8d7":"## Sell prices","fa6a8f4f":"## Reading The Data","09f28146":"## SNAP ANALYSIS\n","c2b3f69d":"## importing mathematical library","395cc873":"## importing ploting library","0338dfac":"## Sales_train","a2aa23fa":"## calendar"}}