{"cell_type":{"4247df2e":"code","d00b6ee3":"code","cf5d86e0":"code","d3678981":"code","cbd6c41a":"code","eaf6cd04":"code","f8b71f41":"code","372d26dd":"code","9fd5a35f":"code","389006bd":"code","2bca0482":"code","41056eeb":"code","4bc379b8":"code","0c77600f":"code","aa86f67f":"code","340c23f5":"code","7cab4cd0":"code","df453460":"code","9198dde6":"code","6159975f":"code","4aa10753":"code","744db824":"code","cf3c6ef1":"code","734bef5a":"code","89d930b0":"code","a299b8cc":"code","c2cd4378":"code","7aa61043":"code","a0de09a3":"code","9aeec2f2":"code","9ae8b8eb":"code","8d7fe8d9":"code","764665ac":"code","1591afd1":"code","00caea4a":"code","05a5db68":"code","48e61452":"code","1aabd50b":"code","da22ed94":"code","8ed83af5":"code","ea5e4577":"code","9e60315d":"code","2bfe7ffd":"code","2bf3d81d":"code","88af9e88":"code","fc6f7ce7":"code","7b8bf161":"code","5c14f5ae":"code","eca15600":"code","8131cc07":"code","0e4a28b5":"code","cce811d8":"code","2e3def53":"code","7bc2ab73":"code","c14b22d0":"code","43fa2b78":"code","f146fa37":"code","c750244c":"code","364a6726":"code","2668640d":"code","da75abfd":"code","7a1c293f":"code","065a449e":"code","8be98a06":"code","33b035c8":"code","55764efe":"code","4f29f240":"code","a6a152c7":"code","75db82d0":"code","639c1b8d":"code","02302f8e":"code","4015c782":"code","b895cbeb":"code","ea297bbd":"code","95a701d3":"markdown","68ded4d9":"markdown","385d4bf6":"markdown","1e9ff5c6":"markdown","ac36e051":"markdown","0557ea2e":"markdown","c146bb5a":"markdown","0d69652c":"markdown","474c033c":"markdown"},"source":{"4247df2e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d00b6ee3":"#\u0437\u0430\u0433\u0440\u0443\u0437\u0438\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438\nimport random\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split, cross_val_score\n\nfrom catboost import CatBoostRegressor\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import r2_score as r2\nfrom sklearn.model_selection import KFold, GridSearchCV\n\nfrom datetime import datetime\nimport warnings\nwarnings.filterwarnings('ignore')\nmatplotlib.rcParams.update({'font.size': 14})","cf5d86e0":"def evaluate_preds(train_true_values, train_pred_values, test_true_values, test_pred_values):\n    print(\"Train R2:\\t\" + str(round(r2(train_true_values, train_pred_values), 3)))\n    print(\"Test R2:\\t\" + str(round(r2(test_true_values, test_pred_values), 3)))\n    \n    plt.figure(figsize=(18,10))\n    \n    plt.subplot(121)\n    sns.scatterplot(x=train_pred_values, y=train_true_values)\n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('Train sample prediction')\n    \n    plt.subplot(122)\n    sns.scatterplot(x=test_pred_values, y=test_true_values)\n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('Test sample prediction')\n\n    plt.show()","d3678981":"#\u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043d\u0430\u0448\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0444\u0430\u0439\u043b\u043e\u0432 train \u0438 test\nTRAIN_DATASET_PATH = '..\/input\/real-estate-price-prediction-moscow\/train.csv'\nTEST_DATASET_PATH = '..\/input\/real-estate-price-prediction-moscow\/test.csv'","cbd6c41a":"train_df = pd.read_csv(TRAIN_DATASET_PATH)\ntrain_df.head()","eaf6cd04":"test_df = pd.read_csv(TEST_DATASET_PATH)\ntest_df.head()","f8b71f41":"#\u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 10000 \u0441\u0442\u0440\u043e\u043a \u0438 20 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432\n#\u0430 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 - 5000 \u0441\u0442\u0440\u043e\u043a \u0438 19 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432, \u043d\u0435\u0442 \u0441\u0442\u043e\u043b\u0431\u0446\u0430 price, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438 \u043d\u0443\u0436\u043d\u043e \u0441\u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c\nprint(train_df.shape)\nprint(test_df.shape)","372d26dd":"train_df.dtypes","9fd5a35f":"#\u0447\u0442\u043e\u0431\u044b id'\u0448\u043d\u0438\u043a\u0438 \u043d\u0435 \u0432\u043b\u0438\u044f\u043b\u0438 \u043d\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u043e\u0434\u0435\u043b\u0438 (\u043e\u0442 \u043d\u0438\u0445 \u0436\u0435 \u043d\u0438\u043a\u0430\u043a \u043d\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u0446\u0435\u043d\u0430 \u043d\u0430 \u0434\u043e\u043c), \u0441\u043c\u0435\u043d\u0438\u043c \u0443 \u043d\u0438\u0445 \u0442\u0438\u043f \u0441 \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0439.\n#district_id \u043d\u0430\u0434\u043e \u0441\u043c\u0435\u043d\u0438\u0442\u044c \u0441 \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u043d\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u044d\u0442\u043e \u043f\u043e\u0437\u0436\u0435, \u043e\u043d \u043d\u0430\u043c \u0435\u0449\u0451 \u043f\u0440\u0438\u0433\u043e\u0434\u0438\u0442\u0441\u044f \u043f\u0440\u0438 \u0437\u0430\u043c\u0435\u043d\u0435 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 Healthcare_1\ntrain_df['Id'] = train_df['Id'].astype(str)\n#train_df['DistrictId'] = train_df['DistrictId'].astype(str)","389006bd":"train_df.dtypes","2bca0482":"#\u043f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c \u0438\u0441\u043a\u043e\u043c\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 price\nplt.figure(figsize = (10, 5))\n\ntrain_df['Price'].hist(bins=30)\nplt.ylabel('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439')\nplt.xlabel('\u0426\u0435\u043d\u0430')\n\nplt.show()","41056eeb":"#\u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\ntrain_df.describe()","4bc379b8":"#\u0432\u044b\u0432\u043e\u0434\u044b \u043f\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u043c\n#\u0435\u0441\u0442\u044c \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u0441 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u043f\u043e \u0436\u0438\u043b\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0438 \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0443 Healthcare\n#\u0435\u0441\u0442\u044c \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b, \u0433\u0434\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442 = 0, \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b-\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442 19\n#\u0435\u0441\u0442\u044c \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u0441 \u043f\u043b\u043e\u0449\u0430\u0434\u044c\u044e 1,13 \u0438 641 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u044b\u0439 \u043c\u0435\u0442\u0440\n#\u0435\u0441\u0442\u044c \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b, \u0433\u0434\u0435 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0443\u0445\u043d\u0438 0, \u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f - 2014\n#\u0435\u0441\u0442\u044c \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b, \u0433\u0434\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u0442\u0430\u0436\u0435\u0439 - 0\n#\u0435\u0441\u0442\u044c \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b, \u0433\u0434\u0435 \u0433\u043e\u0434 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438 2005201. - \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0439\n#\u043f\u0440\u0438 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0438 \u0441\u0440\u0435\u0434\u043d\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0441 \u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439, \u0435\u0441\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0430\u044f \u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u0432 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044f\u0445: HouseYear \u0438 Social_3, \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e \u043f\u043e \u044d\u0442\u0438\u043c \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044f\u043c \u0435\u0441\u0442\u044c \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.","0c77600f":"#\u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\ntrain_df.select_dtypes(include='object').columns.tolist()","aa86f67f":"print(train_df['DistrictId'].value_counts())\nprint(train_df['Ecology_2'].value_counts())\nprint(train_df['Ecology_3'].value_counts())\nprint(train_df['Shops_2'].value_counts())","340c23f5":"#DictrictId - \u043e\u0447\u0435\u043d\u044c \u043c\u043d\u043e\u0433\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 (205), \u043d\u0430\u0434\u043e \u0441\u043e\u043a\u0440\u0430\u0442\u0438\u0442\u044c, \u0447\u0442\u043e\u0431\u044b \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c","7cab4cd0":"#\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0438 \u0432\u043b\u0438\u044f\u044e\u0442 \u043d\u0430 \u0446\u0435\u043d\u0443.\ncorrelation = train_df.corrwith(train_df['Price']).sort_values()\ncorrelation.drop('Price', inplace=True)\n\nplt.figure(figsize = (10, 5))\nplt.bar(correlation.index, correlation)\nplt.xticks(rotation='90')\nplt.xlabel('\u041f\u0440\u0438\u0437\u043d\u0430\u043a\u0438')\nplt.ylabel('\u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f')\nplt.show()\n#\u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u0446\u0435\u043d\u0443 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u044e\u0442 2 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044f: \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442.","df453460":"# \u043f\u043e\u0438\u0437\u0443\u0447\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u0438\u043c\u0435\u044e\u0449\u0438\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u044b\nprint(sorted(train_df['HouseYear'])[-5:])\n# 2 \u0432\u044b\u0431\u0440\u043e\u0441\u0430 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 HouseYear","9198dde6":"plt.figure(figsize = (10, 5))\n\ntrain_df['Social_3'].hist(bins=30)\nplt.ylabel('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439')\nplt.xlabel('Social_3')\n\nplt.show()","6159975f":"train_df['Rooms'].value_counts()\n# 8 \u043a\u0432\u0430\u0440\u0442\u0438\u0440 \u0431\u0435\u0437 \u043a\u043e\u043c\u043d\u0430\u0442, 2 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b 10 \u043a\u043e\u043c\u043d\u0430\u0442, 1 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u0430 - 19 \u043a\u043e\u043c\u043d\u0430\u0442","4aa10753":"plt.figure(figsize = (10, 5))\n\ntrain_df['Square'].hist(bins=20)\nplt.ylabel('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439')\nplt.xlabel('\u041f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b')\n\nplt.show()","744db824":"print(train_df[train_df['Square']<10]['Square'].count()) # 12 \u043a\u0432\u0430\u0440\u0442\u0438\u0440 \u043f\u043b\u043e\u0449\u0430\u0434\u044c\u044e \u043c\u0435\u043d\u044c\u0448\u0435 10 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u044b\u0445 \u043c\u0435\u0442\u0440\u043e\u0432\nprint(train_df[train_df['Square']>400]['Square'].count()) # 3 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u0441 \u043f\u043b\u043e\u0449\u0430\u0434\u044c\u044e \u0431\u043e\u043b\u044c\u0448\u0435 400 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u044b\u0445 \u043c\u0435\u0442\u0440\u043e\u0432\ntrain_df[train_df['Square']>400]","cf3c6ef1":"plt.figure(figsize = (10, 5))\n\ntrain_df['KitchenSquare'].hist(bins=50)\nplt.ylabel('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439')\nplt.xlabel('\u041f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0443\u0445\u043d\u0438')\n\nplt.show()","734bef5a":"train_df[train_df['KitchenSquare']>100] #'\u044d\u0442\u0438 \u0432\u0441\u0435 \u043a\u0443\u0445\u043d\u0438 - \u0442\u043e\u0447\u043d\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u044b, \u043d\u0435 \u0430\u0434\u0435\u043a\u0432\u0430\u0442\u043d\u044b\u0435 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043a\u0443\u0445\u043e\u043d\u044c'","89d930b0":"train_df[train_df['KitchenSquare']<4]['KitchenSquare'].value_counts()","a299b8cc":"#\u0431\u043e\u043b\u0435\u0435 3000 \u043a\u0432\u0430\u0440\u0442\u0438\u0440 \u0441 \u043f\u043b\u043e\u0449\u0430\u0434\u044c\u044e \u043a\u0443\u0445\u043d\u0438 \u0434\u043e 3 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u044b\u0445 \u043c\u0435\u0442\u0440\u043e\u0432. \u0425\u043e\u0440\u043e\u0448\u043e \u0447\u0442\u043e \u044d\u0442\u043e\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043d\u0435 \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b, \u0432\u0438\u0434\u0438\u043c\u043e \u043a\u0430\u043a\u043e\u0439-\u0442\u043e \u043d\u0435 \u0430\u0434\u0435\u043a\u0432\u0430\u0442\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a.","c2cd4378":"#\u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u044c Floor \u0438 HouseFloor\ntrain_df['Floor'].value_counts()","7aa61043":"train_df['HouseFloor'].value_counts()","a0de09a3":"train_df.loc[train_df['Floor'] > train_df['HouseFloor']]","9aeec2f2":"# \u0443 \u043d\u0430\u0441 269 \u0434\u043e\u043c\u043e\u0432 \u0441 \u043d\u0443\u043b\u0435\u0432\u043e\u0439 \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u044c\u044e\n# 1825 \u043a\u0432\u0430\u0440\u0442\u0438\u0440, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u044d\u0442\u0430\u0436 \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u044c \n# 3 \u0434\u043e\u043c\u0430 \u0441 \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0431\u043e\u043b\u044c\u0448\u0435 90 \u044d\u0442\u0430\u0436\u0435\u0439","9ae8b8eb":"#\u0437\u0430\u043c\u0435\u043d\u0438\u043c \u0433\u043e\u0434\u044b \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438, \u0441\u0432\u044b\u0448\u0435 2021 \u0433\u043e\u0434\u0430 \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u0443\ntrain_df['HouseYear_outlier'] = 0\ntrain_df.loc[(train_df['HouseYear'] > 2021), 'HouseYear_outlier'] = 1\ntrain_df.loc[train_df['HouseYear'] > 2021, 'HouseYear'] = train_df['HouseYear'].median()\ntrain_df['HouseYear'].sort_values(ascending=False)","8d7fe8d9":"#\u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043a\u043e\u043c\u043d\u0430\u0442 = 0 \u043d\u0430 1 \u0438 >=10 \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u0443\ntrain_df['Rooms_outlier'] = 0\ntrain_df.loc[(train_df['Rooms'] == 0) | (train_df['Rooms'] >= 10), 'Rooms_outlier'] = 1\ntrain_df.loc[train_df['Rooms'] == 0, 'Rooms'] = 1\ntrain_df.loc[train_df['Rooms'] >= 10, 'Rooms'] = train_df['Rooms'].median()\ntrain_df['Rooms'].value_counts()","764665ac":"#\u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u0441 \u043f\u043b\u043e\u0449\u0430\u0434\u044c\u044e \u043c\u0435\u043d\u0435\u0435 10 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u044b\u0445 \u043c\u0435\u0442\u0440\u043e\u0432 \u043d\u0430 10, \u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b, \u0441 \u043f\u043b\u043e\u0449\u0430\u0434\u044c\u044e \u0431\u043e\u043b\u0435\u0435 250 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u044b\u0445 \u043c\u0435\u0442\u0440\u043e\u0432 \u043d\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u0441 \u043f\u043b\u043e\u0449\u0430\u0434\u044c\u044e 250\ntrain_df['Square_outlier'] = 0\ntrain_df.loc[(train_df['Square'] <= 10) | (train_df['Square'] >= 250), 'Square_outlier'] = 1\ntrain_df.loc[train_df['Square'] <= 10, 'Square'] = 10\ntrain_df.loc[train_df['Square'] >= 250, 'Square'] = 250\ntrain_df['Square'].hist(bins=20)\nplt.show()\n","1591afd1":"#\u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043a\u0443\u0445\u043e\u043d\u044c \u0441 \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u0435\u043c > 97.5 \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u043a\u0443\u0445\u043d\u0438 \u0441 \u043f\u043b\u043e\u0449\u0430\u0434\u044c\u044e \u043c\u0435\u043d\u044c\u0448\u0435 3 \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u043a\u0443\u0445\u043d\u0438 \u0441 \u043f\u043b\u043e\u0449\u0430\u0434\u044c\u044e 0 \u043e\u0441\u0442\u0430\u0432\u0438\u043c \u043d\u0435\u0438\u0437\u043c\u0435\u043d\u043d\u044b\u043c\u0438.\ntrain_df['KitchenSquare_outlier'] = 0\ntrain_df.loc[(train_df['KitchenSquare'] <= 3) & (train_df['KitchenSquare'] > 0) | (train_df['KitchenSquare'] > train_df['KitchenSquare'].quantile(.975)), 'KitchenSquare_outlier'] = 1\ntrain_df.loc[train_df['KitchenSquare'] >= train_df['KitchenSquare'].quantile(.975), 'KitchenSquare'] = train_df['KitchenSquare'].median()\ntrain_df.loc[(train_df['KitchenSquare'] > 0) & (train_df['KitchenSquare'] <= 3), 'KitchenSquare'] = train_df['KitchenSquare'].median()\ntrain_df['KitchenSquare'].value_counts()","00caea4a":"print((train_df['KitchenSquare'] > train_df['Square']).sum())\nprint((train_df['LifeSquare'] > train_df['Square']).sum())","05a5db68":"# \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u0443 \u043d\u0430\u0441 476 \u043a\u0432\u0430\u0440\u0442\u0438\u0440, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0436\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u0432\u0441\u0435\u0439 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b, \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0442\u0430\u043a\u0438\u0435 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b\ntrain_df.loc[train_df['LifeSquare'] > train_df['Square']]","48e61452":"#\u0432\u0435\u0440\u043d\u0435\u043c\u0441\u044f \u043a \u044d\u0442\u043e\u043c\u0443 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0443 \u0447\u0443\u0442\u044c \u043f\u043e\u0437\u0436\u0435, \u0442.\u043a. \u0443 \u043d\u0435\u0433\u043e \u043c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439","1aabd50b":"# \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0434\u043e\u043c\u0430 \u0441 \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u043c\u0438 \u043f\u043e \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u0438\ntrain_df['HouseFloor_outlier'] = 0\ntrain_df.loc[train_df['HouseFloor'] == 0, 'HouseFloor_outlier'] = 1\ntrain_df.loc[train_df['HouseFloor'] > 90, 'HouseFloor_outlier'] = 1\ntrain_df.loc[train_df['HouseFloor'] == 0, 'HouseFloor'] = train_df['HouseFloor'].median()\n\n","da22ed94":"train_df.loc[train_df['HouseFloor'] > 90]\n","8ed83af5":"train_df.loc[train_df['HouseFloor'] > 90, 'HouseFloor'] = train_df['HouseFloor'].median()","ea5e4577":"train_df.loc[train_df['Floor'] > train_df['HouseFloor'], 'HouseFloor_outlier'] = 2\ntrain_df.loc[train_df['Floor'] > train_df['HouseFloor']]","9e60315d":"#\u043f\u043e\u043c\u0435\u043d\u044f\u0435\u043c \u043c\u0435\u0441\u0442\u0430\u043c\u0438 \u044d\u0442\u0430\u0436 \u0438 \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u044c\ntrain_df['HouseFloor_temp'] = train_df['HouseFloor']\ntrain_df.loc[train_df['HouseFloor_outlier'] == 2, 'HouseFloor'] = train_df.loc[train_df['HouseFloor_outlier'] == 2, 'Floor']\ntrain_df.loc[train_df['HouseFloor_outlier'] == 2, 'Floor'] = train_df.loc[train_df['HouseFloor_outlier'] == 2, 'HouseFloor_temp']\ntrain_df.drop('HouseFloor_temp', axis=1, inplace=True)","2bfe7ffd":"(train_df['Floor'] > train_df['HouseFloor']).sum()","2bf3d81d":"train_df.isna().sum()","88af9e88":"# 2 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0438\u043c\u0435\u044e\u0442 \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432\n# \u0440\u0430\u0437\u0431\u0435\u0440\u0435\u043c\u0441\u044f \u0441 LifeSquare\ntrain_df['LifeSquare_NaN'] = train_df['LifeSquare'].isna() * 1\n","fc6f7ce7":"# \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 Square - KitchenSquare - 6 (\u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u043c, \u0447\u0442\u043e \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043a\u043e\u0440\u0438\u0434\u043e\u0440\u043e\u0432, \u043a\u043b\u0430\u0434\u043e\u0432\u044b\u0445, \u0442\u0443\u0430\u043b\u0435\u0442\u043e\u0432 = 6 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u044b\u0445 \u043c\u0435\u0442\u0440\u043e\u0432)\ncondition = (train_df['LifeSquare'].isna()) & (~train_df['Square'].isna()) & (~train_df['KitchenSquare'].isna())\ntrain_df.loc[condition, 'LifeSquare'] = train_df.loc[condition, 'Square'] - train_df.loc[condition, 'KitchenSquare'] - 6","7b8bf161":"# \u0432\u0441\u043f\u043e\u043c\u043d\u0438\u043c, \u0447\u0442\u043e \u0443 \u043d\u0430\u0441 \u0431\u044b\u043b\u0438 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b, \u0441 \u0436\u0438\u043b\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u044c\u044e \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c \u043e\u0431\u0449\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c, \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0442\u0430\u043a\u0438\u0445 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\n(train_df['LifeSquare'] > train_df['Square']).sum()","5c14f5ae":"# \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u0438\u0445 \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u0442\u0430\u043a\u0436\u0435 \u043f\u043e \u0440\u0430\u043d\u0435\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0439 \u0444\u043e\u0440\u043c\u0443\u043b\u0435\ntrain_df['LifeSquare_outlier'] = 0\ntrain_df.loc[(train_df['LifeSquare'] > train_df['Square']), 'LifeSquare_outlier'] = 1\ncondition = ((train_df['LifeSquare_outlier'] == 1) & (~train_df['Square'].isna()) & (~train_df['KitchenSquare'].isna()))\ntrain_df.loc[condition, 'LifeSquare'] = train_df.loc[condition, 'Square'] - train_df.loc[condition, 'KitchenSquare'] - 6","eca15600":"(train_df['LifeSquare'] > train_df['Square']).sum()","8131cc07":"# \u0432\u0441\u0451, \u0431\u043e\u043b\u044c\u0448\u0435 \u0442\u0430\u043a\u0438\u0445 \u043a\u0432\u0430\u0440\u0442\u0438\u0440 \u043d\u0435 \u043e\u0441\u0442\u0430\u043b\u043e\u0441\u044c\n# \u0440\u0430\u0437\u0431\u0435\u0440\u0435\u043c\u0441\u044f \u0441 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c Healthcare_1\nplt.figure(figsize = (10, 5))\n\ntrain_df['Healthcare_1'].hist(bins=30)\nplt.ylabel('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439')\nplt.xlabel('Healthcare_1')\n\nplt.show()","0e4a28b5":"correlation = train_df.corrwith(train_df['Healthcare_1']).sort_values()\ncorrelation.drop(['Healthcare_1','Price',], inplace=True)\n\nplt.figure(figsize = (10, 5))\nplt.bar(correlation.index, correlation)\nplt.xticks(rotation='90')\nplt.xlabel('\u041f\u0440\u0438\u0437\u043d\u0430\u043a\u0438')\nplt.ylabel('\u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f')\nplt.show()","cce811d8":"# \u0432\u0438\u0434\u0438\u043c \u0447\u0442\u043e \u043d\u0430 Healthcare_1 \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 ID \u0440\u0430\u0439\u043e\u043d\u0430, \u0447\u0442\u043e \u043b\u043e\u0433\u0438\u0447\u043d\u043e, \u0438\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430.\n# \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f Healthcare_1 \u043d\u0430 \u0441\u0440\u0435\u0434\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u0440\u0430\u0439\u043e\u043d\u0443\ntrain_df['Healthcare_1_NaN'] = 0\ntrain_df['Healthcare_1_NaN'] = train_df['Healthcare_1'].isna() * 1\nHealthcare_1_mean_by_DistrictId = train_df.groupby('DistrictId', as_index=False).agg({'Healthcare_1': 'mean'}).rename(columns={'Healthcare_1': 'MeanHealthcare_1'})\ntrain_df = train_df.merge(Healthcare_1_mean_by_DistrictId, on = 'DistrictId', how = 'left')","2e3def53":"(train_df['MeanHealthcare_1'].isna()).sum()","7bc2ab73":"# \u043f\u043e \u043f\u0440\u0435\u0436\u043d\u0435\u043c\u0443 \u043e\u0441\u0442\u0430\u043b\u043e\u0441\u044c 1884 \u043d\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u0438\u0445 \u041c\u0435\u0434\u0438\u0430\u043d\u043e\u0439, \u0430 Healthcare_1 \u0443\u0434\u0430\u043b\u0438\u043c.\ntrain_df.drop('Healthcare_1', axis=1, inplace=True)\ntrain_df['MeanHealthcare_1'].fillna(train_df['MeanHealthcare_1'].median(), inplace=True)\ntrain_df.isna().sum()","c14b22d0":"# \u0442\u0435\u043f\u0435\u0440\u044c \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 DistrictId \u0438\u0437 \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u0432 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0442\u0438\u043f\ntrain_df['DistrictId'] = train_df['DistrictId'].astype(str)","43fa2b78":"class DataPreprocessing:\n    \"\"\"\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n\n    def __init__(self):\n        \"\"\"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043b\u0430\u0441\u0441\u0430\"\"\"\n        self.medians = None\n        self.kitchen_square_quantile = None\n        \n    def fit(self, X):\n        \"\"\"\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\"\"\"       \n        # \u0420\u0430\u0441\u0447\u0435\u0442 \u043c\u0435\u0434\u0438\u0430\u043d\n        self.medians = X.median()\n        self.kitchen_square_quantile = X['KitchenSquare'].quantile(.975)\n    \n    def transform(self, X):\n        \"\"\"\u0422\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n\n        # HouseYear\n        current_year = datetime.now().year        \n        X['HouseYear_outlier'] = 0\n        X.loc[X['HouseYear'] > current_year, 'HouseYear_outlier'] = 1       \n        X.loc[X['HouseYear'] > current_year, 'HouseYear'] = self.medians['HouseYear']\n        \n        # Rooms\n        X['Rooms_outlier'] = 0\n        X.loc[(X['Rooms'] == 0) | (X['Rooms'] >= 10), 'Rooms_outlier'] = 1\n        X.loc[X['Rooms'] == 0, 'Rooms'] = 1\n        X.loc[X['Rooms'] >= 10, 'Rooms'] = self.medians['Rooms']\n        \n        # Square\n        X['Square_outlier'] = 0\n        X.loc[(X['Square'] <= 10) | (X['Square'] >= 250), 'Square_outlier'] = 1\n        X.loc[X['Square'] <= 10, 'Square'] = 10\n        X.loc[X['Square'] >= 250, 'Square'] = 250\n        \n        \n        # KitchenSquare\n        X['KitchenSquare_outlier'] = 0\n        X.loc[(train_df['KitchenSquare'] <= 3) & (X['KitchenSquare'] > 0) | (X['KitchenSquare'] > self.kitchen_square_quantile), 'KitchenSquare_outlier'] = 1\n        X.loc[train_df['KitchenSquare'] >= self.kitchen_square_quantile, 'KitchenSquare'] = self.medians['KitchenSquare']\n        X.loc[(train_df['KitchenSquare'] > 0) & (train_df['KitchenSquare'] <= 3), 'KitchenSquare'] = self.medians['KitchenSquare']\n\n        \n        # HouseFloor, Floor\n        X['HouseFloor_outlier'] = 0\n        X.loc[X['HouseFloor'] == 0, 'HouseFloor_outlier'] = 1\n        X.loc[X['HouseFloor'] > 90, 'HouseFloor_outlier'] = 1\n        X.loc[X['HouseFloor'] == 0, 'HouseFloor'] = self.medians['HouseFloor']\n        X.loc[X['HouseFloor'] > 90, 'HouseFloor'] = self.medians['HouseFloor']\n        \n        X.loc[X['Floor'] > X['HouseFloor'], 'HouseFloor_outlier'] = 2\n        X['HouseFloor_temp'] = X['HouseFloor']\n        X.loc[X['HouseFloor_outlier'] == 2, 'HouseFloor'] = X.loc[X['HouseFloor_outlier'] == 2, 'Floor']\n        X.loc[X['HouseFloor_outlier'] == 2, 'Floor'] = X.loc[X['HouseFloor_outlier'] == 2, 'HouseFloor_temp']\n        X.drop('HouseFloor_temp', axis=1, inplace=True)\n        \n        \n        # LifeSquare\n        X['LifeSquare_NaN'] = X['LifeSquare'].isna() * 1\n        condition = (X['LifeSquare'].isna()) & (~X['Square'].isna()) & (~X['KitchenSquare'].isna())\n        X.loc[condition, 'LifeSquare'] = X.loc[condition, 'Square'] - X.loc[condition, 'KitchenSquare'] - 6\n        \n        X['LifeSquare_outlier'] = 0\n        X.loc[(X['LifeSquare'] > X['Square']), 'LifeSquare_outlier'] = 1\n        condition = ((X['LifeSquare_outlier'] == 1) & (~X['Square'].isna()) & (~X['KitchenSquare'].isna()))\n        X.loc[condition, 'LifeSquare'] = X.loc[condition, 'Square'] - X.loc[condition, 'KitchenSquare'] - 6\n        \n        \n        # Healthcare_1\n        X['Healthcare_1_NaN'] = 0\n        X['Healthcare_1_NaN'] = X['Healthcare_1'].isna() * 1\n        Healthcare_1_mean_by_DistrictId = X.groupby('DistrictId', as_index=False).agg({'Healthcare_1': 'mean'}).rename(columns={'Healthcare_1': 'MeanHealthcare_1'})\n        X = X.merge(Healthcare_1_mean_by_DistrictId, on = 'DistrictId', how = 'left')\n        \n        \n        if 'Healthcare_1' in X.columns:\n            X.drop('Healthcare_1', axis=1, inplace=True)\n        \n        \n        X.fillna(self.medians, inplace=True)\n        \n        return X","f146fa37":"class FeatureGenetator():\n    \"\"\"\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u0444\u0438\u0447\"\"\"\n    \n    def __init__(self):\n        self.DistrictId_counts = None\n        self.binary_to_numbers = None\n        self.med_price_by_district = None\n        self.med_price_by_floor_year = None\n        self.house_year_max = None\n        self.floor_max = None\n        self.house_year_min = None\n        self.floor_min = None\n        self.district_size = None\n        \n        \n    def fit(self, X, y=None):\n        \n        X = X.copy()\n        \n        # Binary features\n        self.binary_to_numbers = {'A': 0, 'B': 1}\n        \n        # DistrictID\n        self.district_size = X['DistrictId'].value_counts().reset_index() \\\n                               .rename(columns={'index':'DistrictId', 'DistrictId':'DistrictSize'})\n                \n        # Target encoding\n        ## District, Rooms\n        df = X.copy()\n        \n        if y is not None:\n            df['Price'] = y.values\n            self.med_price_by_district = df.groupby(['DistrictId', 'Rooms'], as_index=False).agg({'Price':'median'}).rename(columns={'Price':'MedPriceByDistrict'})\n            self.med_price_by_district_median = self.med_price_by_district['MedPriceByDistrict'].median()\n            \n        ## floor, year\n        if y is not None:\n            self.floor_max = df['Floor'].max()\n            self.floor_min = df['Floor'].min()\n            self.house_year_max = df['HouseYear'].max()\n            self.house_year_min = df['HouseYear'].min()\n            df['Price'] = y.values\n            df = self.floor_to_cat(df)\n            df = self.year_to_cat(df)\n            self.med_price_by_floor_year = df.groupby(['year_cat', 'floor_cat'], as_index=False).agg({'Price':'median'}).rename(columns={'Price':'MedPriceByFloorYear'})\n            self.med_price_by_floor_year_median = self.med_price_by_floor_year['MedPriceByFloorYear'].median()\n        \n\n        \n    def transform(self, X):\n        \n        X['MeanHealthcare_1'].fillna(X['MeanHealthcare_1'].median(), inplace=True)\n        \n        # Binary features\n        X['Ecology_2'] = X['Ecology_2'].map(self.binary_to_numbers)  # self.binary_to_numbers = {'A': 0, 'B': 1}\n        X['Ecology_3'] = X['Ecology_3'].map(self.binary_to_numbers)\n        X['Shops_2'] = X['Shops_2'].map(self.binary_to_numbers)\n        \n        # DistrictId, IsDistrictLarge\n        X = X.merge(self.district_size, on='DistrictId', how='left')\n        \n        X['new_district'] = 0\n        X.loc[X['DistrictSize'].isna(), 'new_district'] = 1\n        \n        X['DistrictSize'].fillna(-1, inplace=True)\n        \n        X['IsDistrictLarge'] = (X['DistrictSize'] > 100).astype(int)\n        \n        # More categorical features\n        X = self.floor_to_cat(X)  # + \u0441\u0442\u043e\u043b\u0431\u0435\u0446 floor_cat\n        X = self.year_to_cat(X)   # + \u0441\u0442\u043e\u043b\u0431\u0435\u0446 year_cat\n        \n        # Target encoding\n        if self.med_price_by_district is not None:\n            X = X.merge(self.med_price_by_district, on=['DistrictId', 'Rooms'], how='left')\n            X['MedPriceByDistrict'].fillna(self.med_price_by_district_median, inplace=True)\n            \n        if self.med_price_by_floor_year is not None:\n            X = X.merge(self.med_price_by_floor_year, on=['year_cat', 'floor_cat'], how='left')\n            X['MedPriceByFloorYear'].fillna(self.med_price_by_floor_year_median, inplace=True)\n        \n        return X\n    \n    def floor_to_cat(self, X):\n        bins = [self.floor_min, 3, 5, 9, 15, self.floor_max]\n        X['floor_cat'] = pd.cut(X['Floor'], bins=bins, labels=False)\n\n        X['floor_cat'].fillna(-1, inplace=True)\n        return X\n     \n    def year_to_cat(self, X):\n        bins = [self.house_year_min, 1941, 1945, 1980, 2000, 2010, self.house_year_max]\n        X['year_cat'] = pd.cut(X['HouseYear'], bins=bins, labels=False)\n\n        X['year_cat'].fillna(-1, inplace=True)\n        return X","c750244c":"train_df.columns.tolist()","364a6726":"feature_names = ['Rooms', 'Square', \n                 'LifeSquare', 'KitchenSquare', 'Floor', \n                'HouseFloor', 'HouseYear',\n                 'Ecology_1', 'Ecology_2', 'Ecology_3', \n                 'Social_1', 'Social_2', 'Social_3',\n                 'Helthcare_2', 'Shops_1', 'Shops_2'\n                ]\nnew_feature_names = ['HouseYear_outlier', 'Rooms_outlier', 'Square_outlier', 'KitchenSquare_outlier', 'HouseFloor_outlier', 'LifeSquare_NaN', 'LifeSquare_outlier',\n                    'Healthcare_1_NaN', 'MeanHealthcare_1', 'DistrictSize', 'new_district', 'IsDistrictLarge',  'MedPriceByDistrict', 'MedPriceByFloorYear']\n\ntarget_name = 'Price'","2668640d":"train_df = pd.read_csv(TRAIN_DATASET_PATH)\ntest_df = pd.read_csv(TEST_DATASET_PATH)\n\nX = train_df.drop(columns=target_name)\ny = train_df[target_name]","da75abfd":"# \u0440\u0430\u0437\u043e\u0431\u044c\u0435\u043c \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0441\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0438 67% \u043d\u0430 33% \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043d\u0430 67% \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u043d\u0430 \u043e\u0441\u0442\u0430\u0432\u0448\u0438\u0445\u0441\u044f 33%\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.33, shuffle=True, random_state=24)","7a1c293f":"# \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043d\u0430 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\npreprocessor = DataPreprocessing()\npreprocessor.fit(X_train)\n\nX_train = preprocessor.transform(X_train)\nX_valid = preprocessor.transform(X_valid)\ntest_df = preprocessor.transform(test_df)\n\n# \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0438 \u0432\u044b\u0431\u043e\u0440\u043e\u043a, \u0434\u043e\u043b\u0436\u043d\u043e \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nX_train.shape, X_valid.shape, test_df.shape","065a449e":"# \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435\nfeatures_gen = FeatureGenetator()\nfeatures_gen.fit(X_train, y_train)\n\n# \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0444\u0438\u0447\u0438 \u043d\u0430 \u0432\u0441\u0435\u0445 \u0432\u044b\u0431\u043e\u0440\u043a\u0430\u0445 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f, \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u0438 \u0442\u0435\u0441\u0442\u0430.\nX_train = features_gen.transform(X_train)\nX_valid = features_gen.transform(X_valid)\ntest_df = features_gen.transform(test_df)\n\n# \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u0447\u0442\u043e \u043a\u043e\u043b-\u0432\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0435\u0442 \u043d\u0430 \u0432\u0441\u0435\u0445 3-\u0445 \u0432\u044b\u0431\u043e\u0440\u043a\u0430\u0445\nX_train.shape, X_valid.shape, test_df.shape","8be98a06":"# \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u043e\u0442\u0431\u043e\u0440 \u0432\u0441\u0435\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nX_train = X_train[feature_names + new_feature_names]\nX_valid = X_valid[feature_names + new_feature_names]\ntest_df = test_df[feature_names + new_feature_names]","33b035c8":"# \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u0447\u0442\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043d\u0435\u0442, \u0432\u0441\u0435 3 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u043f\u043e \u043d\u0443\u043b\u044f\u043c \nX_train.isna().sum().sum(), X_valid.isna().sum().sum(), test_df.isna().sum().sum()","55764efe":"# \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u0440\u0430\u043b \u043c\u043e\u0434\u0435\u043b\u044c catboostregressor\n# \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u043b \u043e\u043f\u044b\u0442\u043d\u044b\u043c \u043f\u0443\u0442\u0435\u043c, \u0447\u0442\u043e\u0431\u044b R2 \u043e\u0446\u0435\u043d\u043a\u0430 \u0434\u043b\u044f Train, Test \u0438 \u041a\u0440\u043e\u0441\u0441\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u043d\u0435 \u0441\u0438\u043b\u044c\u043d\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u0430\u043b\u0438\u0441\u044c.\n# \u043f\u0440\u0438 \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u0438 \u0433\u043b\u0443\u0431\u0438\u043d\u044b \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0439 \u043c\u043e\u0436\u043d\u043e \u0434\u043e\u0431\u0438\u0442\u044c\u0441\u044f \u043e\u0446\u0435\u043d\u043a\u0438 R2 \u0431\u043b\u0438\u0437\u043a\u043e\u0439 \u043a 1, \u043d\u043e \u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0443\u0434\u0435\u0442 \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0430\n\nrf_model = CatBoostRegressor(\n    silent=True,\n    learning_rate=0.1,\n    iterations=1100,\n    eval_metric='R2',\n    depth=8\n)\n\nrf_model.fit(X_train, y_train)\n\n\n","4f29f240":"y_train_preds = rf_model.predict(X_train)\ny_test_preds = rf_model.predict(X_valid)\n\nevaluate_preds(y_train, y_train_preds, y_valid, y_test_preds)","a6a152c7":"cv_score = cross_val_score(rf_model, X_train, y_train, scoring='r2', cv=KFold(n_splits=3, shuffle=True, random_state=24))","75db82d0":"cv_score.mean()","639c1b8d":"# \u0432\u044b\u0432\u0435\u0434\u0435\u043c \u0441\u0442\u0435\u043f\u0435\u043d\u044c \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u0443\u0447\u0430\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0432 \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n# \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0443\u044e \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u0438\u043c\u0435\u044e\u0442 2 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430, \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u0438 \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u0430\u044f \u0446\u0435\u043d\u0430 \u043f\u043e \u0440\u0430\u0439\u043e\u043d\u0443.\nfeature_importances = pd.DataFrame(\n    zip(X_train.columns, rf_model.get_feature_importance()),\n    columns=['feature_name', 'importance']\n)\n\nfeature_importances.sort_values(by='importance', ascending=False, inplace=True)\nfeature_importances.head(20)","02302f8e":"submit = pd.read_csv('\/kaggle\/input\/real-estate-price-prediction-moscow\/sample_submission.csv')\nsubmit.head()","4015c782":"predictions = rf_model.predict(test_df)\npredictions","b895cbeb":"submit['Price'] = predictions\nsubmit.head()","ea297bbd":"submit.to_csv('rf_submit1.csv', index=False)","95a701d3":"# **\u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c**","68ded4d9":"# \u041f\u0440\u043e\u0432\u0435\u0434\u0435\u043c \u0430\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 EDA","385d4bf6":"# \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b","1e9ff5c6":"# \u0417\u0430\u043f\u0438\u0448\u0435\u043c \u0432\u0441\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0447\u0435\u0440\u0435\u0437 \u043a\u043b\u0430\u0441\u0441\n","ac36e051":"# **\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438**","0557ea2e":"# **\u0420\u0430\u0437\u043e\u0431\u044c\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0435 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435**","c146bb5a":"# **\u041e\u0442\u0431\u0435\u0440\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438**","0d69652c":"# **\u0421\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438**","474c033c":"# **\u041f\u0440\u043e\u0433\u043d\u043e\u0437 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445**"}}