{"cell_type":{"3a6de083":"code","19ae7ff1":"code","02c2f9d7":"code","3851eaae":"code","d3d0bc87":"code","487acb92":"code","96060302":"code","2756f33e":"code","4553bf85":"code","bdebb429":"code","8920790e":"code","c4df2c5a":"code","8bfa7541":"code","187ec933":"code","8e3db3e6":"code","39c319bf":"code","01826ec7":"code","5fc29a8a":"markdown","3615b80e":"markdown","0ad7c781":"markdown","76d7bcc6":"markdown","787aa2c9":"markdown","ef5e3e2b":"markdown","5a58aec7":"markdown","33f4c4d3":"markdown","6992e70d":"markdown"},"source":{"3a6de083":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","19ae7ff1":"data= pd.read_csv('..\/input\/biomechanical-features-of-orthopedic-patients\/column_2C_weka.csv')","02c2f9d7":"# With head, we can look at the first five rows of data \n\ndata.head()","3851eaae":"# We can see that our data has x,y columns\n# Now, we need to check any NaN values\n\ndata.info()","d3d0bc87":"data.describe()","487acb92":"f,ax = plt.subplots(figsize=(12, 12))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.2f',ax=ax)\nplt.title(\"Corrolation Map\")\nplt.show()","96060302":"sns.countplot(x=\"class\", data=data)\ndata.loc[:,'class'].value_counts()","2756f33e":"plt.scatter(data[data['class']=='Normal'].pelvic_incidence,data[data['class']=='Normal'].pelvic_radius,color='green',label='Normal')\nplt.scatter(data[data['class']=='Abnormal'].pelvic_incidence,data[data['class']=='Abnormal'].pelvic_radius,color='red',label='AbNormal')\nplt.xlabel('Pelvic incidence')\nplt.ylabel('Pelvic Radius')\nplt.legend()\nplt.show()\n","4553bf85":"sns.pairplot(data=data,hue='class',diag_kind=\"hist\")\nplt.show()","bdebb429":"data['class']=[1 if i=='Normal' else 0 for i in data['class']]\ny=data['class'].values\nsns.countplot(x=\"class\", data=data)\ny","8920790e":"x_nanorm=data.drop(['class'],axis=1)\nx_nanorm.head()","c4df2c5a":"x=(x_nanorm-np.min(x_nanorm))\/(np.max(x_nanorm)-np.min(x_nanorm)).values\nx","8bfa7541":"from sklearn.model_selection import train_test_split\n\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.3,random_state=8)","187ec933":"print('Train data size :' ,len(x_train),'\\nTest Data size :', len(y_test),'\\nTotal Data size : ',(len(x_train)+len(y_test)))","8e3db3e6":"from sklearn.neighbors import KNeighborsClassifier\nknn=KNeighborsClassifier(n_neighbors=3)\nknn.fit(x_train,y_train)\nprint(\" {} nn score: {} \".format(3,knn.score(x_test,y_test)))","39c319bf":"score_list = []\n\nfor i in range(1,20):\n    knn_n = KNeighborsClassifier(n_neighbors = i)\n    knn_n.fit(x_train, y_train)\n    score_list.append(knn_n.score(x_test, y_test))\n\nplt.plot(range(1,20),score_list)\nplt.xlabel('K values')\nplt.ylabel('accuracy')\nplt.show()","01826ec7":"optimal_k=score_list.index(max(score_list))+1\nknn=KNeighborsClassifier(n_neighbors=optimal_k)\nknn.fit(x_train,y_train)\nprint(\" {} nn score: {} \".format(optimal_k,knn.score(x_test,y_test)))","5fc29a8a":"<a id=\"4\"><\/a>\n# 4. Data Preproccesing","3615b80e":"### 4.1 Normalization","0ad7c781":"<a id=\"3\"><\/a>\n# 3. Visualization","76d7bcc6":"**we have no null values**","787aa2c9":"<a id=\"5\"><\/a>\n\n# 5. KNN Model","ef5e3e2b":"## Content : \n1. [Read Data](#1)\n1. [EXPLORATORY DATA ANALYSIS](#2)\n1. [Visualization](#3)\n1. [Data Preproccesing](#4)\n1. [ KNN Model ](#5)\n","5a58aec7":"### 4.2 Test Train Split","33f4c4d3":"<a id=\"2\"><\/a>\n# 2. EXPLORATORY DATA ANALYSIS\n\nLet's start with Exploratory Data Analysis to learn about data.","6992e70d":"<a id=\"1\"><\/a>\n\n# 1. Read Data"}}