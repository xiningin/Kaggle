{"cell_type":{"8743af1c":"code","8944b4cc":"code","a1c82544":"code","0e663427":"code","1ba254db":"code","c6e57bf4":"code","15178819":"code","28882d62":"code","f9907fc9":"code","37bfa9ad":"code","2dd119b8":"code","df30aa82":"code","7d0ad24e":"code","2cec85c3":"code","8f846f8d":"code","5f8a8507":"code","b3e87e4c":"code","153ead90":"code","e887d248":"code","ca6d8776":"code","70f127c0":"code","932db817":"code","db41c430":"code","c2382bab":"code","6cf3ed29":"code","62b8c7bd":"code","7867f2e6":"code","29a0a805":"code","9a2d3dd3":"code","d715871c":"code","b30ff0bb":"markdown","62055d45":"markdown","5b8c6211":"markdown","03cab6fd":"markdown","19c5cd8b":"markdown","be47622d":"markdown","9d264217":"markdown","26d6a713":"markdown","77133a31":"markdown","f64ae1a3":"markdown","6a519dc5":"markdown","e4c3049b":"markdown","a8a3c5aa":"markdown","aa738cb0":"markdown","a2ca7fc1":"markdown","b7365680":"markdown","6eb54864":"markdown","7550e770":"markdown","82435c59":"markdown","7abaeba8":"markdown","464939f1":"markdown","527cfb50":"markdown","17719d8b":"markdown","ecfc8203":"markdown","14864013":"markdown","d860f770":"markdown","2ab7fd66":"markdown","03d2800a":"markdown","9ec99ecd":"markdown","7a995082":"markdown","6de16b4e":"markdown","007eaded":"markdown","247cb2c9":"markdown","5e3ceb39":"markdown","24a62ab5":"markdown"},"source":{"8743af1c":"#importing the most relevant libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.rcParams.update({'font.size': 22})\n\n# wish_df = pd.read_csv('summer-products-with-rating-and-performance_2020-08.csv')\nwish_df = pd.read_csv( '..\/input\/summer-products-and-sales-in-ecommerce-wish\/summer-products-with-rating-and-performance_2020-08.csv')","8944b4cc":"print('Dimensions of the df', wish_df.shape)\nprint(wish_df.isnull().sum()) #checking how many values are not filled in each column\nwish_df = wish_df.drop_duplicates() # removing the duplicates if any\nprint('Dimensions of the df after dropping the duplicates', wish_df.shape)","a1c82544":"print('{:<30} {:<15}'.format('column', 'unique values'))\nfor key in wish_df.keys():\n    uniques = len(wish_df[str(key)].unique())\n    print('{:<30} {:<15}'.format(str(key) , uniques)) #prints how many unique values are present in a column\n    if uniques <= 20 : # If a column has less than or equal to 20 values, it shows the categories\n         print('\\t:', wish_df[str(key)].unique()) ","0e663427":"wish_df.head()","1ba254db":"wish_df['units_sold'] = [10 if x < 10 else x for x in wish_df['units_sold']]\nwish_df.iloc[0,:] #Here we take a look at the sample","c6e57bf4":"import seaborn as sns\nsns.set(font_scale=1.2)\nplt.figure(figsize=(12,6))\nsns.barplot(y='merchant_rating_count', x='units_sold', data=wish_df) ","15178819":"plt.figure(figsize=(12,6))\nmerch_pic = (wish_df.groupby(['units_sold'])['merchant_has_profile_picture'].value_counts(normalize=True).rename('Percentage').mul(100)\n            .reset_index())\n# print(merch_pic)\np = sns.barplot(x='units_sold', y='Percentage', hue='merchant_has_profile_picture', data=merch_pic, alpha=0.8)","28882d62":"plt.figure(figsize=(12,6))\nsns.scatterplot(x=wish_df.merchant_rating, y=wish_df.units_sold, s=80)","f9907fc9":"wish_df['origin_country'] = wish_df.origin_country.fillna('Nil') #Marking the gaps as unknown\norigin_countries = wish_df.origin_country.unique()\nprint(origin_countries)\nvolume_sold = np.zeros(len(origin_countries)) #to calculate the total volume of prodcut sold from a country\nfor i, country in enumerate(origin_countries):\n#     print(i, country)\n    volume_sold[i] = wish_df[wish_df['origin_country'] == str(country)]['units_sold'].sum()\n\n# print(volume_sold)\nfig, ax = plt.subplots(figsize=(8,4))\nax.set_yscale('log')\nsns.scatterplot(x=origin_countries,y=volume_sold, size=volume_sold, sizes=(100,1000))","37bfa9ad":"plt.figure(figsize=(14,6))\ngeo_sales = (wish_df.groupby(['units_sold'])['origin_country'].value_counts().rename('item_count')\n            .reset_index())\n# print(merch_pic)\nsns.barplot(x='units_sold', y='item_count', hue='origin_country', data=geo_sales, alpha=0.8)\nplt.legend(title='origin_country', loc='upper right')\nplt.ylim(0,80)","2dd119b8":"target_countries = wish_df.countries_shipped_to.unique()\n# print(target_countries)\nfig, ax = plt.subplots(figsize=(15,6))\nsns.scatterplot(x=wish_df.countries_shipped_to,y=wish_df.units_sold, s=100, alpha=0.8)","df30aa82":"#If no urgency text is present, then filled none.\nwish_df['urgency_text'] = wish_df['urgency_text'].fillna('None')\n#If has_urgency_banner is not present, then filled with zero.\nwish_df['has_urgency_banner'] = wish_df['has_urgency_banner'].fillna(0)\n\nplt.figure(figsize=(10,6))\n# sns.countplot(y='rating', hue='units_sold', data=wish_df)\nsns.scatterplot(wish_df['rating'], wish_df['units_sold'], size=wish_df.rating_count, sizes=(10,750), alpha=0.75)\nplt.legend(loc='upper left')","7d0ad24e":"rating = ['rating_count', 'rating_five_count','rating_four_count', 'rating_three_count', 'rating_two_count', 'rating_one_count']\nmarkers = ['p', 'd', 's', 'v', 'h', 'X']\n\nplt.figure(figsize=(15,6))\nplt.ylim(-500, 25000)\nplt.xlim(-150, 6000)\nfor i in range(len(rating)):\n    sns.regplot(x=rating[i], y='units_sold', data=wish_df, label=rating[i], marker=markers[i])\n\nplt.legend()\nplt.xlabel('Number of ratings')\nplt.ylabel('Units sold')\n","2cec85c3":"rating.append('units_sold')\nrating_corr = wish_df[rating].corr().round(2)\nplt.figure(figsize=(8,8))\nax = sns.heatmap(rating_corr.round(2), annot=True, linewidths=.5, cmap='hot')\nax.set_ylim(len(rating), 0) ","8f846f8d":"from wordcloud import WordCloud\n\ngood_sales = wish_df['units_sold'] >= 1000\n# with this we can focus only on those items that are sold considerably\nalltitle = ''\nalltitle_total = ''\nfor i, j in enumerate(wish_df[good_sales].title_orig):\n    sold_units = wish_df[good_sales]['units_sold'].iloc[i]\/1000\n    # title_orig only focuses on the keywords\n    # it doesn't say how much it is sold\n    # so in order to understand the extent of popularity of a keyword,\n    # it needs to multiplied by the times it's sold\n    # to make things more efficient we divide it by 1000\n    alltitle += ' ' + j\n    # alltitle makes a huge sentence composed of all the words in the title combined together\n    alltitle_total += (' ' + j)*int(sold_units)\n    # alltitle_total has each word multiplied by the number of products sold\n\nplt.figure(figsize=(16,16))\ncloud = WordCloud(max_words=100, background_color=\"gray\").generate(alltitle)\nplt.imshow(cloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","5f8a8507":"plt.figure(figsize=(16,16))\ncloud = WordCloud(max_words=100, stopwords=['Women', 'Summer', 'Fashion'], background_color=\"black\").generate(alltitle_total)\nplt.imshow(cloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","b3e87e4c":"from wordcloud import WordCloud\nwish_df['product_variation_size_id'] = wish_df['product_variation_size_id'].fillna('X')\nwish_df['product_variation_size_id'] = wish_df['product_variation_size_id'].str.replace('Size','')\nallsize = ''\nallsize_total = ''\nfor i, j in enumerate(wish_df[good_sales].product_variation_size_id):\n    sold_units = wish_df[good_sales]['units_sold'].iloc[i]\/1000\n    allsize += ' ' + str(j)\n    allsize_total += ('  ' + str(j))*int(sold_units)\n\nplt.figure(figsize=(16,16))\ncloud = WordCloud(max_words=100, background_color=\"gray\").generate(allsize)\nplt.imshow(cloud,interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","153ead90":"plt.figure(figsize=(16,16))\ncloud = WordCloud(max_words=100, background_color=\"black\").generate(allsize_total)\nplt.imshow(cloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","e887d248":"allcolors = ''\nallcolors_total = ''\nwish_df['product_color'] = wish_df['product_color'].fillna('colorful')\n\nfor i, j in enumerate(wish_df[good_sales].product_color):\n    sold_units = wish_df[good_sales]['units_sold'].iloc[i]\/1000\n    allcolors += ' ' + str(j)\n    allcolors_total += ('  ' + str(j))*int(sold_units)\n\nplt.figure(figsize=(16,16))\ncloud = WordCloud(max_words=100, background_color=\"gray\").generate(allcolors)\nplt.imshow(cloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","ca6d8776":"plt.figure(figsize=(16,16))\ncloud = WordCloud(max_words=100, background_color=\"black\").generate(allcolors_total)\nplt.imshow(cloud)\nplt.axis(\"off\", interpolation='bilinear')\nplt.show()","70f127c0":"# all letters made lower case\nwish_df['product_color'] = wish_df['product_color'].str.lower()\n\n# to simplify the number of colours some approximations are taken\n# all light\/dark shades are treated as the same parent color\nwish_df['product_color'] = wish_df['product_color'].str.replace('light','')\nwish_df['product_color'] = wish_df['product_color'].str.replace('dark','')\nwish_df['product_color'] = wish_df['product_color'].str.replace('white & black','black & white')\n# now some crude approximations\nwish_df['product_color'] = wish_df['product_color'].str.replace('tan','camel')\nwish_df['product_color'] = wish_df['product_color'].str.replace('rose','pink')\nwish_df['product_color'] = wish_df['product_color'].str.replace('grey','gray')\nwish_df['product_color'] = wish_df['product_color'].str.replace('coffee','brown')\n\n\n# we take these colors are main colors and anything else derived from it as the main color\n# except when there is & in the name of the color\ncolors = ['red', 'green', 'blue', 'black', 'pink', 'yellow', 'white', 'gold']\nfor subcolor in wish_df['product_color'].unique():\n    if '&' not in subcolor:\n        for maincolor in colors:\n            if maincolor in subcolor:\n                wish_df['product_color'] = wish_df['product_color'].str.replace(subcolor, maincolor)","932db817":"print(wish_df['product_color'].unique())\n\nunique_colors = wish_df['product_color'].unique()\ncolor_sales = np.zeros(len(unique_colors))\nfor i, icolor in enumerate(unique_colors):\n    color_sales[i] = wish_df[wish_df['product_color'] == icolor].units_sold.sum()\ngood_sales = wish_df[wish_df['units_sold'] >= 5000]\n\n\nchart = sns.catplot(x='product_color', y='units_sold', kind=\"strip\", data=wish_df[wish_df['units_sold'] > 5000], aspect=3, height=4, s=10);\nchart.set_xticklabels(rotation=65, horizontalalignment='right')","db41c430":"plt.figure(figsize=(10,5))\nsns.scatterplot(y=wish_df.units_sold, x=wish_df.inventory_total, s=100)","c2382bab":"params = ['badges_count', 'badge_local_product', 'badge_product_quality', 'badge_fast_shipping', 'units_sold']\nbadge_correlation = wish_df[params].corr().round(2) \n\n# plt.figure(figsize=(6,6))\n# ax = sns.heatmap(badge_correlation.round(2), annot=True, linewidths=.5, cmap='hot')\n# ax.set_ylim(len(params), 0) \n\nplt.figure(figsize=(12,6))\nbadge_sales = (wish_df.groupby(['units_sold'])['badges_count'].value_counts(normalize=True).rename('Percentage').mul(100)\n            .reset_index())\n# print(merch_pic)\nsns.barplot(x='units_sold', y='Percentage', hue='badges_count', data=badge_sales, palette=\"terrain_r\")\nplt.legend(title='badges_count', loc=(1,0.5))","6cf3ed29":"plt.figure(figsize=(12,6))\n\nsns.scatterplot(x=wish_df.shipping_option_price, y=wish_df.price, size=wish_df.units_sold, sizes=(100,1000), alpha=0.8)","62b8c7bd":"plt.figure(figsize=(12,6))\nbanner_sales = (wish_df.groupby(['units_sold'])['has_urgency_banner'].value_counts(normalize=True).rename('Percentage').mul(100)\n            .reset_index())\n# print(merch_pic)\nsns.barplot(x='units_sold', y='Percentage', hue='has_urgency_banner', data=banner_sales, palette=\"Reds\", alpha=0.8)\nplt.legend(title='has urgency banner', loc=(0.07,0.81))","7867f2e6":"plt.figure(figsize=(12,6))\nad_sales = (wish_df.groupby(['units_sold'])['uses_ad_boosts'].value_counts(normalize=True).rename('Percentage').mul(100)\n            .reset_index())\n# print(merch_pic)\nsns.barplot(x='units_sold', y='Percentage', hue='uses_ad_boosts', data=ad_sales, palette=\"Blues\", alpha=0.8)\nplt.legend(title='uses_ad_boosts', loc=(0.07,0.81))","29a0a805":"# discounted price vs original retail price\nwish_df['price_diff'] = wish_df['retail_price']-wish_df['price']\n#if price_diff is positive, then retail price is higher. then the customer sees a profit\n#if price_diff is negative, then retail price is lower. then the customer doesn't see a profit\nwish_df['price_diff_perc'] = (wish_df['retail_price']-wish_df['price'])*100\/wish_df['retail_price']\n\nparams = ['price', 'retail_price', 'price_diff', 'price_diff_perc', 'units_sold']\nparams1 = ['price', 'retail_price', 'price_diff_perc', 'units_sold']\nprice_correlation = wish_df[params].corr().round(2) \n\nplt.figure(figsize=(10,10))\nsns.pairplot(data=wish_df, vars=params, hue='has_urgency_banner',  plot_kws=dict(alpha=0.6) )","9a2d3dd3":"pdneg = wish_df[wish_df['price_diff'] < 0 ]\npd0 = wish_df[wish_df['price_diff'] == 0 ]\npd100 = wish_df[(wish_df['price_diff'] <= 100) & (wish_df['price_diff'] > 0)]\npd1000 = wish_df[wish_df['price_diff'] > 100]\nplt.figure(figsize=(15,10))\nsns.scatterplot(x=pdneg.price_diff, y=pdneg.units_sold, s=100, label='Price diff < 0 EUR' )\nsns.scatterplot(x=pd0.price_diff, y=pd0.units_sold, s=100, label='Price diff = 0 EUR' )\nsns.scatterplot(x=pd100.price_diff, y=pd100.units_sold, s=100, label='Price diff < 100 EUR' )\nsns.scatterplot(x=pd1000.price_diff, y=pd1000.units_sold, s=100, label='Price diff > 100 EUR'  )\nplt.legend()\nnet_sold = wish_df.units_sold.sum()\npdnegsum = pdneg.units_sold.sum()\npd0sum = pd0.units_sold.sum()\npd100sum = pd100.units_sold.sum()\npd1000sum = pd1000.units_sold.sum()\nprint('If the price_diff is negative, then the retail price is lower. The customer then doesn\\'t see an opportunity to save.\\n')\nprint('%2.1f %% products are sold at negative price_diff.'%(pdnegsum\/net_sold*100))\nprint('%2.1f %% products are sold at zero price_diff.'%(pd0sum\/net_sold*100))\nprint('%2.1f %% products are sold at less than 100 EUR price_diff.'%(pd100sum\/net_sold*100))\nprint('%2.1f %% products are sold at more than 100 EUR price_diff.'%(pd1000sum\/net_sold*100))","d715871c":"pcneg = wish_df[wish_df['price_diff_perc'] < 0]\npc0 = wish_df[wish_df['price_diff_perc'] == 0]\npc50 = wish_df[(wish_df['price_diff_perc'] <= 50) & (wish_df['price_diff_perc'] > 0)]\npc100 = wish_df[wish_df['price_diff_perc'] > 50]\n\nplt.figure(figsize=(15,10))\nsns.scatterplot(x=pcneg.price_diff_perc, y=pcneg.units_sold, label='Price diff % < 0 %' )\nsns.scatterplot(x=pc0.price_diff_perc, y=pc0.units_sold, label='Price diff % = 0 %' )\nsns.scatterplot(x=pc50.price_diff_perc, y=pc50.units_sold, label='Price diff % = 0-50 %' )\nsns.scatterplot(x=pc100.price_diff_perc, y=pc100.units_sold, label='Price diff % >50 %' )\nplt.legend()\npcnegsum = pcneg.units_sold.sum()\npc0sum = pc0.units_sold.sum()\npc50sum = pc50.units_sold.sum()\npc100sum = pc100.units_sold.sum()\n# print(pcnegsum\/net_sold, pc0sum\/net_sold, pc50sum\/net_sold, pc100sum\/net_sold)\nprint('If the price_diff is negative, then the retail price is lower. The customer then doesn\\'t see an opportunity to save. \\n')\nprint('%2.1f %% products are sold at negative price_diff: '%(pcnegsum\/net_sold*100))\nprint('%2.1f %% products are sold at the same price: '%(pc0sum\/net_sold*100))\nprint('%2.1f %% products are sold at less than 0-50 %% price difference: '%(pc50sum\/net_sold*100))\nprint('%2.1f %% products are sold at more than 50-100 %% price difference: '%(pc100sum\/net_sold*100))","b30ff0bb":"This figure shows the relevants of inventory total on sales.\n\nThe products are sold in high numbers either\n* when the inventory total is very low  \nOR \n* when the inventory total is real high","62055d45":"**If a product is delivered to larger number of countries, it doesn't mean that it will be sold more.**\nThe maximum sales happen when they are shipped to a range of 15-60 countires.","5b8c6211":"From the above figure **one can argue that having at least a badge helps in sales**, except for those products which are in the highest sales regime.","03cab6fd":"**Insights**  \nThe highest sales occurs when either\n* the customer doens't see an opportunity to save\nOR\n* the customer sees an opportunity to save more than 50% of the price\n\nOne third of the sales occur in these categories.","19c5cd8b":"\nFurther, we consider only those items which are sold more than 5000 units for ease of plotting.","be47622d":"This figure establishes **a strong linear relationship between number of ratings received and the units sold**.\nHowever **the dependence on the star ratings is not the same for all**.\n\n**The higher star ratings have higher impact than the lower star ratings.**\n\nNow we look at the correlation matrix between ratings and `units_sold`.","9d264217":"# Rating and sales\nIn this section, we examine the relationship between product ratings and sales.","26d6a713":"The following sizes are the highest in listings:\n* XS\n* XXS\n* XL\n* XXL\n\nNext we look at size in terms of units sold","77133a31":"**For nealry 50% of the products sold, the customer doesn't see an oppportunity to save (`price_diff` $\\leq$ 0 EUR)**  \n**If the `price_diff` is more than 100 EUR, the sales is lower.**","f64ae1a3":"**Insights**\n* **most of the highly sold products cost less than 25 EUR**\n* very few items sell well above 25 EUR\n* retail_price and price_diff has a linear relationship\n* retail_price and price_diff_perc has higher degree of relation\n* sales and discount price distributions are unaffected by has_urgency_banner sign","6a519dc5":"Our target variable here `units_sold`.\nNow we need to look into features and how they correlate with `units_sold`.  \n\nFor the ease of analysis, if the number of units sold is less than 10, it's rounded up to 10.\nWe look at the first item in the list to see how a listing actually looks like.","e4c3049b":"This figure shows that shipping price has a strong linear relationship with price. Hence we need not consider shipping option price while considering price.\n\nNow we examine if the urgency banner has any impact on sales.","a8a3c5aa":"The above correlation matrix shows that different ratings are correlated to each other strongly. Even one star and five star rating has a correlation of 0.83. **But `units_sold` has the strongest correlation with total ratings**, though only by a little over the others. So, when one prepares the model, he\/she doesn't need to take all the different ratings into consideration.","aa738cb0":"By sales the items with these words in the title are in most demand\n* Tank Top\n* Plus Size items\n* Short sleeves\n* Mini Dress\n\n### By size\nFirst we examine by the listings:","a2ca7fc1":"We have the summer sales data from **wish.com** for France in `summer-products-with-rating-and-performance_2020-08.csv`. I am trying to gain isights from analysing the data.","b7365680":"# Customer tastes and demands\n\nIn this section we look at other aspects such as type of product, size, color etc.  \nHere utilize wordclouds to get insights about the these types of information. Here there are two types of wordclouds.  \n1. The wordclouds in gray background show the items listed per se.\n2. The wordclouds in black background show words weighed proportional to their sales.\n\nSo in the second one, the most sold items will be having the largest size.\n\nNote: We utilize *only those items which are sold at least 1000 units* for the ease of analysis.\n\nIn the first case, we look at the names of the products in English.\n\n\n### By title of the product","6eb54864":"Most listed colors include\n* black \n* white\n* blue\n* pink\n* red","7550e770":"Now we try to idnentify the categorical variables.\nFor this, we look at the unique values. If there are only less than 20 unique values, we can safely say that these variables are categorical. In the following cell, we print those categorical values.\nHowever, please note that it is entirely possible to have more than 20 values for cateogrical variables.","82435c59":"We can make the following observations from the figure above.\n* The **products that are sold in higher numbers have a merchant rating in the range of 3.75-4.5** ie, moderately high\n* If a merchant has above 4.5 rating, he\/she has sold very few items","7abaeba8":"The above numbers shows that\n* 1201 unque items are listed as 1573 items over 958 unique sellers\n* Only 473 items have urgency banner\n* `has_urgency_barrier` is binary\n* There are only two kinds of urgency texts, if present\n* Products are available from 6 different countries\n* 45 items have no ratings\n* Most merchants (1347\/1573) don't have profile picture\n* All the items are priced in Euro","464939f1":"* # Wish.com - EDA insights","527cfb50":"Interestingly, the most listed colors are not the most sold except in the case of black and white.  \n\n**Blue, pink and red are not sold as much as gray, though higher number of listings are present**\n\nNext, in order to quantify the sales of colors we are making some crude approximations. For example:\n* some similar colors like coffee and brown are treated as the same. \n* light and dark shades are treated as the same color","17719d8b":"# Conclusion\nWe see that the following parameters impact the sales strongly\n1. Ratings\n2. Ratings count\n3. Merchant ratings\n4. Merchant rate count\n5. Price\n6. Color\n7. Product size","ecfc8203":"# Geography and sales\n\nIn this section we examine the relationship between geography and sales.\nIf the origin country is not marked, we mark it as Nil.","14864013":"The following sizes are the highest in demand:\n* XS\n* XXS\n* XL\n\nThe other popular items sold:\n* layered anklets\n* baby floats\n* pieces sold in pairs (socks?)\n\nI am not attempting to quantify theis information as separate units are often used.\nFor eg., in S\/X\/L units, cm, EU\/US\n\n### By color\n\nHere also first we examine listings and then by sales. The products for which color is not given is filled as black  white.","d860f770":"Now we check\n* the dimensions of the data\n* if there are any unfilled cells   \n\nThen we drop the duplicates and check the size again","2ab7fd66":"From the picture above, we can see that the Chinese products also dominate all the ranges.\nAfter China, majority of the products come from the US. After US, it's the countries of unmarked origin. Diversity in origin country is present only in the sales range of 100 and 1000.\n\nNext, we examine if the units sold are influenced by the number of countries they are shipped to.","03d2800a":"**This shows that orange is also a favorite during the summer.**\n\n# Miscellaneous\n\nNow we look at some impact of other factors such as inventory, badges, shipping, etc. on sales\n","9ec99ecd":"The plot above shows that **in the higher selling range more merchants tend to have a profile picture**. This could be the basic human psychology. If we can put a face to something, that's more acceptable. For example, in dating sites those profiles with a profile picture has higher response rate than those who don't.\n\nNext, we examine the relationship between the rating of a merchant and the sales.","7a995082":"Now we examine different how different aspects of a product influence the sales.\n\n# Merchants and sales\nIn this section we examine the relationship between the merchant data and the sales data","6de16b4e":"From the above figures, we can see that for nearly all different regimes of sales, we cannot make a clear call about the role ad boosts and urgency banners play.\n\nAs the sales of a particular item increase, **the urgency banner and ad booster seems to have less impact** (except on the highest sales regime). So, it's not clear whether the urgency banner has any impact on the sales.\n\nFor the sale of products in the range of 50000, the ad boost and urgency banner has very less impact.\n\n# Price and sales \n\nNow, we look at the most complex relation - how the price affects the sales.  \n\nThere are two prices given - `retail_price` and `price`. `retail_price` is the real price and `price` is the discounted price.\n\nWe use variables for price difference `price_diff` as = `retail_price` - `price` and  \npercentage price difference `price_diff_perc` as = (`retail_price` - `price`)* 100\/`retail_price`  \n\nIf `price_diff` is positive, then the retail price is higher. Then the customer sees an opportunity to make a saving.\nIf `price_diff` is negative, then the retail price is lower. Then the customer doesn't have see an opportunity to make a saving.\n\nFirst we examine the correlation between `price`, `retail_price`, `price_diff`, `price_diff_perc` and `units_sold`.","007eaded":"From the above wordcloud we can make the following insights about the listings:\n* Plus size items are highly listed\n* Women's fashion is featured prominently\n* Shirt, Top, Dress, Sleeveless are listed prominently\n\nNow we look at the keywords weighed by the units sold. We avoid generic terms such as fashion, summer, women to understand which specific items are sold the most.","247cb2c9":"We can see that the **largest sales happen in the range of 3-4.5 ratings.**\n* Extremely low rated products barely sell\n* Extremely high rated products have lesser votes of rating, so the customers need not trust the rating completely\n\nNow we have to check how the sales depend also on the number of each ratings received","5e3ceb39":"Most of the items are of Chinese origin. Given the fact that China is one of the biggest manufacturing powers, this is not surprising. So the Chinese products will dominate all the sales ranges.\n\nHence we look at the units sold by other countries.","24a62ab5":"The above figure clearly establishes a positive correlation between the number of ratings received by a merchant and the units sold.    \nIn other words, **the higher the votes of rating for a merchant, the higher the sale.**  \nNext we examine the relationship between the merchant profile and the sales."}}