{"cell_type":{"68400904":"code","d28779e8":"code","109394db":"code","cb6c437b":"code","858379de":"code","b01cac46":"code","13449c11":"code","209b75f4":"code","0c9faefc":"code","cd7b6611":"code","aef0b5c0":"code","60c0f0fd":"code","3e6a6d26":"code","82ff6543":"code","631d61a3":"code","3dc91be0":"code","1bb2282a":"code","b20ecc4e":"code","c755be9b":"code","c34bc062":"code","68fcf1bb":"code","f09714fa":"code","6ace662a":"code","dc030b82":"code","1cdae0fd":"code","643467dc":"code","23f21055":"code","65946b49":"code","b4563f11":"code","81cf450d":"code","ac0e2f3a":"code","6714ca63":"code","d933cfc6":"code","09f2937c":"code","a09621cc":"code","4a66084f":"code","d70b63ed":"code","4b1653a8":"code","ff822ea9":"code","02ba5c06":"code","3af0bff1":"code","1c1211b1":"code","6ad4f0dd":"code","323d57ce":"code","ad8d828c":"code","a93b8ab9":"code","04cadc11":"code","842a0568":"code","9b7117b7":"code","565c9759":"code","5b757a84":"code","2c613cba":"code","f5d09e33":"code","2119729b":"code","f8506f09":"code","1d995030":"code","4710409d":"code","717d7902":"code","23c6fdb7":"code","cd95f5b5":"code","ae5707cc":"code","8f203f36":"code","1b27a489":"code","679c5fef":"code","248bce03":"markdown","85597d9d":"markdown","c572ead3":"markdown","92ffe965":"markdown","7295c295":"markdown","4d360e66":"markdown","25606fe6":"markdown","62560da1":"markdown","c74b3c2b":"markdown","ea939f22":"markdown","586cbc22":"markdown","25de6602":"markdown","8939ac5b":"markdown","924d963a":"markdown","ee61f6ec":"markdown","3babd8e1":"markdown","0950dcec":"markdown","be4766c2":"markdown","99b02420":"markdown","53a5771b":"markdown","ae880685":"markdown","e69841e2":"markdown","17a3a0f1":"markdown","e86e9027":"markdown","f23b1c1f":"markdown","9e35421e":"markdown","da7120aa":"markdown","6da1b57d":"markdown","f07513f7":"markdown","75de6c66":"markdown","9f2f5f39":"markdown","2d49b8bc":"markdown","9c58b764":"markdown","e2b44988":"markdown","c79f39b4":"markdown","1ff0ad71":"markdown","a87ea90e":"markdown","23cce31c":"markdown","f21e1da9":"markdown","40c722f2":"markdown","8bbd6e68":"markdown","0d8bcab0":"markdown","a9c2a0e8":"markdown","f32a3340":"markdown","f3978c20":"markdown","e504b6c8":"markdown","15fbda60":"markdown","69606b10":"markdown","f5c07e9f":"markdown","0964ac29":"markdown","e6ad151a":"markdown","9607e0e8":"markdown","f200640c":"markdown","83121554":"markdown","a56d4996":"markdown","ab15d50f":"markdown","b8a4e23a":"markdown","058409d0":"markdown","b6076b78":"markdown","49406b30":"markdown","1d467844":"markdown","b7db983b":"markdown","73f70584":"markdown","67732680":"markdown","c2892c1c":"markdown","827b3bd5":"markdown","fc332d6a":"markdown","7a4ee078":"markdown","72b6303a":"markdown","311e9728":"markdown","bab78e88":"markdown","6eb90cb7":"markdown","d256ed57":"markdown","41b8f381":"markdown","17d38e14":"markdown"},"source":{"68400904":"import warnings\nwarnings.filterwarnings('ignore')","d28779e8":"# Importing all the neccessary libraries\n\nimport pandas as pd # To load files and perform tasks\nimport numpy as np # linear algebra\nimport seaborn as sns  # data visualizations\nimport matplotlib.pyplot as plt # data visualizations\n#import plotly  #  interactive plotting library ","109394db":"# Loading the dataset into the pandas dataframe (cleaned dataset)\n\ndf = pd.read_csv(\"..\/input\/data-scientist-salary-us-glassdoor\/data_cleaned_2021.csv\")\ndf = df.drop(\"index\",axis=1) # I droped the 'index' column because I don't need it.","cb6c437b":"# Display the first few rows of the dataframe.\ndf.head(2)","858379de":"# Lets look at the shape of the dataset\n\nprint(\"No. of rows in the dataset:\",df.shape[0])\nprint(\"No. of columns in the dataset:\",df.shape[1])","b01cac46":"# Scanning the dataset for missing values.\n\ndf.isnull().sum()","13449c11":"# Looking at some overall information and statistics about the data.\n\ndf.info()","209b75f4":"# Provide a summary of the numerical information...\n\ndf.describe()","0c9faefc":"# Lets look at how the 'Rating' column is distributed:\n\nplt.figure(figsize=(8,5))\nplt.title('\\n Distribution of Rating Column (before handling -1 values)\\n', size=16, color='black')\nplt.xlabel('\\n Rating \\n', fontsize=13, color='black')\nplt.ylabel('\\n Density\\n', fontsize=13, color='black')\nplt.xticks(fontsize=13)\nplt.yticks(fontsize=12)\nsns.distplot(df.Rating,color=\"purple\")\nplt.show()","cd7b6611":"# Replacing the -1 values in 'Rating' column with nan value.\n\ndf[\"Rating\"] = df[\"Rating\"].apply(lambda x: np.nan if x==-1 else x)\n\n# Fill missing values with the mean of the distribution.\n\ndf[\"Rating\"] = df[\"Rating\"].fillna(df[\"Rating\"].mean())","aef0b5c0":"# Verifying that the replace function worked properly for the 'Rating' column.\n\nplt.figure(figsize=(8,5))\nplt.title('\\n Distribution of Rating Column (after handling -1 values)\\n', size=16, color='black')\nplt.xlabel('\\n Rating \\n', fontsize=13, color='black')\nplt.ylabel('\\n Density\\n', fontsize=13, color='black')\nplt.xticks(fontsize=13)\nplt.yticks(fontsize=12)\nsns.distplot(df[\"Rating\"],kde=True,color=\"red\")\nplt.show()","60c0f0fd":"# Looking at the 'Age' column.\n\nplt.figure(figsize=(8,5))\na = sns.displot(df.Age,color=\"darkcyan\")\nplt.title('\\n Age Column\\n', size=16, color='black')\nplt.xlabel('\\n Age \\n', fontsize=13, color='black')\nplt.ylabel('\\n Count\\n', fontsize=13, color='black')\nplt.xticks(fontsize=13)\nplt.yticks(fontsize=12)\nplt.show()","3e6a6d26":"# To see any outliers in the 'Age' column.\n\nplt.figure(figsize=(8,5))\nsns.boxplot(df.Age,color=\"indianred\")\nplt.title('\\n Age Column Box Plot\\n', size=16, color='black')\nplt.xlabel('\\n Age \\n', fontsize=13, color='black')\nplt.xticks(fontsize=13)\nplt.show()","82ff6543":"# Importing the dataset and dropping columns that is not needed.\n#I changed a column name from \"State\" to \"Job Location\" because this will help me in merging the two dataframes together.\ndf2 = pd.read_csv(\"..\/input\/usa-latlong-for-state-abbreviations\/statelatlong.csv\").rename(columns={\"State\":\"Job Location\"})\n#Dropping the \\column that is not required.\ndf2 = df2.drop(\"City\",axis=1)\n#Looking at first few records.\ndf2.head(5)","631d61a3":"#Merging the two datasets based on \"Job Location\" column.\ndf = df.merge(df2, on='Job Location')","3dc91be0":"#Lets see if it works\ndf.head(2)","1bb2282a":"#Most of the libraries are pre installed in google colab but not all.\n%pip install geopandas --quiet #installing Geopandas library quitly i.e. without any output","b20ecc4e":"#Importing the GeoPandas library.\nimport geopandas as gpd\n#Geopandas lets you load the geometry for countries worldwide into an object called GeoDataFrame.\nfig, ax = plt.subplots(figsize=(10,8))\ncountries = gpd.read_file(gpd.datasets.get_path(\"naturalearth_lowres\"))\nax.set_xlim([-125,-65])\nax.set_ylim([22,55])\n# Since our focus is on US, we can slice the \u201ccountries\u201d object so it shows us US only:\ncountries[countries[\"name\"] == \"United States of America\"].plot(color=\"lightgrey\", ax=ax)\n#Now we put points on it.\ndf.plot(x=\"Longitude\", y=\"Latitude\", kind=\"scatter\",c=\"red\",edgecolor=\"black\", ax=ax)\nplt.xlabel(\"\")\nplt.ylabel(\"\")\nplt.tick_params(top=False, bottom=False, left=False, right=False,labelleft=False, labelbottom=False)\nplt.title('\\n Visualization of Jobs in Different States of US \\n', size=20, color='grey');\nplt.show()\n","c755be9b":"# We see few markers on the map, lets see how many unique state values are there.\ndf[\"Job Location\"].nunique()","c34bc062":"#Adding labels for the states\nlab=[\"California\",\"Massachusetts\",\"New York\",\"Virginia\",\"Illinois\",\"Maryland\",\"Pennsylvania\",\"Texas\",\"Washington\",\"North Carolina\"]\n\nfrom IPython.core.pylabtools import figsize\n#Lets look at the top 10 states with the most number of job postings.\n\nfig, ax = plt.subplots(nrows=1, ncols=1)\na = sns.barplot(x=df[\"Job Location\"].value_counts().index[0:10], y = df[\"Job Location\"].value_counts()[0:10])\n\n#Removing top and Right borders\n\nsns.despine(bottom = False, left = False)\n\n# figure size in inches\nimport matplotlib\nfrom matplotlib import rcParams\nrcParams['figure.figsize'] = 12,5\n\n#Putting % on the bar plot. Credit: Stackoverflow\n\nspots = df[\"Job Location\"].value_counts().index[0:10]\nfor p in ax.patches:\n    ax.text(p.get_x() + 0.1, p.get_height()+4.5, '{:.2f}%'.format((p.get_height()\/742)*100))\n\n#Beautifying the plot\nplt.title('\\n States with Most Number of Jobs \\n', size=16, color='black')\nplt.xticks(fontsize=13)\nplt.yticks(fontsize=12)\nplt.xlabel('\\n States \\n', fontsize=13, color='black')\nplt.ylabel('\\n Count \\n', fontsize=13, color='black')\npatches = [matplotlib.patches.Patch(color=sns.color_palette()[i], label=j) for i,j in zip(range(0,10),lab)]\nplt.legend(handles=patches, loc=\"upper right\")\nplt.show()","68fcf1bb":"# Making a dataframe with only 3 columns: Job Location, Lower Salary and Upper Salary.\n\na=df.groupby(\"Job Location\")[\"Lower Salary\",\"Upper Salary\"].mean().reset_index()","f09714fa":"#Making a sorter, to sort the dataframe according to the states which contains maximum number of jobs.\n\nsorter = df[\"Job Location\"].value_counts().index","6ace662a":"sorter","dc030b82":"# Converting Job Location column as Category and setting the sorter.\n# Thanks to Stackoverflow. Source = https:\/\/stackoverflow.com\/questions\/23482668\/sorting-by-a-custom-list-in-pandas\n\na[\"Job Location\"] = a[\"Job Location\"].astype(\"category\")\na[\"Job Location\"].cat.set_categories(sorter, inplace=True)\n\n#Resetting and droping the index\n\na = a.sort_values([\"Job Location\"]).reset_index()\na = a.drop(\"index\",axis=1)","1cdae0fd":"# Drawing the grouped bar plot.\n\nlab=[]\nfor i in sorter[0:10]:\n  lab.append(i)\n\nx = np.arange(len(lab))  # the label locations\nwidth = 0.35  # the width of the bars\nfig, ax = plt.subplots(1)\nrects1 = ax.bar(x - width\/2, a[\"Lower Salary\"][0:10], width, label='Min Salary')\nrects2 = ax.bar(x + width\/2, a[\"Upper Salary\"][0:10], width, label='Max Salary')\n\n#Beautifying the plot\nplt.title('\\n States with Average Annual Minimal and Maximal Salaries in the States \\n', size=16, color='black')\nplt.xticks(fontsize=13)\nplt.yticks(fontsize=12)\nplt.xlabel('\\n States \\n', fontsize=13, color='black')\nplt.ylabel('\\n Salary (K) \\n', fontsize=13, color='black')\n\nax.set_xticks(x)\nax.set_xticklabels(lab)\nax.legend()\nplt.show()\n","643467dc":"#Making a DF of Average Salary of top 10 states in which job postings was maximum.\n\ng = df.groupby(\"Job Location\")[\"Avg Salary(K)\"].mean().sort_values(ascending=False)[0:10]\ng = g.reset_index().rename(columns={\"Job Location\":\"Job Location\",\"Avg Salary(K)\":\"Average Salary\"})","23f21055":"# Plotting the average salary per annum for different states.\nlab=[\"California\",\"Illinois\",\"District of Columbia\",\"Massachusetts\",\"New Jersey\",\"Michigan\",\"Rhode island\",\"New York\",\"North Carolina\",\"Maryland\"]\n\nsns.barplot(y=\"Job Location\", x = \"Average Salary\",data=g)\n\n#Beautifying the plot\n\nplt.title('\\n Average Salary for Different States \\n', size=16, color='black')\nplt.xticks(fontsize=13)\nplt.yticks(fontsize=12)\nplt.xlabel('\\n Average Salary (K) \\n', fontsize=13, color='black')\nplt.ylabel('\\n States \\n', fontsize=13, color='black')\npatches = [matplotlib.patches.Patch(color=sns.color_palette()[i], label=j) for i,j in zip(range(0,10),lab)]\nplt.legend(handles=patches,bbox_to_anchor=(1, 1), loc=2, borderaxespad=0.)\nplt.show()","65946b49":"# To show all the records\npd.options.display.max_rows\npd.set_option('display.max_rows', None)\n\npd.pivot_table(df, index = ['Job Location','job_title_sim'], values = 'Avg Salary(K)', aggfunc = 'count').sort_values('Job Location', ascending = False)\n","b4563f11":"#Making a DF of Average Salary of top 10 states in which job postings was maximum.\n\ng = df.groupby(\"Job Location\")[\"Avg Salary(K)\"].mean().sort_values(ascending=False)\ng = g.reset_index().rename(columns={\"Job Location\":\"Job Location\",\"Avg Salary(K)\":\"Average Salary\"})\n\n# Converting Job Location column as Category and setting the sorter.\n# Thanks to Stackoverflow. Source = https:\/\/stackoverflow.com\/questions\/23482668\/sorting-by-a-custom-list-in-pandas\n\ng[\"Job Location\"] = g[\"Job Location\"].astype(\"category\")\ng[\"Job Location\"].cat.set_categories(sorter, inplace=True)\n\n#Resetting and droping the index\n\ng = g.sort_values([\"Job Location\"]).reset_index()\ng = g.drop(\"index\",axis=1)\n","81cf450d":"#Drawing bar plot of average salaries reported by top 10 states with most no. of jobs.\nlabe=[\"California\",\"Massachusetts\",\"New York\",\"Virginia\",\"Illinois\",\"Maryland\",\"Pennsylvania\",\"Texas\",\"Washington\",\"North Carolina\"]\n\nlab=[]\nfor i in sorter[0:10]:\n  lab.append(i)\n\nx = np.arange(len(lab))  # the label locations\nwidth = 0.35  # the width of the bars\nfig, ax = plt.subplots(1)\nrects1 = ax.bar(x, a[\"Lower Salary\"][0:10], width, label='Min Salary',color=\"salmon\")\n\n#Beautifying the plot\n\nplt.title('\\n Average Annual Salaries for States with Most No. of Jobs \\n', size=16, color='black')\nplt.xticks(fontsize=13)\nplt.xticks(rotation=90)\nplt.yticks(fontsize=12)\nplt.xlabel('\\n States \\n', fontsize=13, color='black')\nplt.ylabel('\\n Average Salary (K) \\n', fontsize=13, color='black')\nax.set_xticks(x)\nax.set_xticklabels(labe)\nplt.show()","ac0e2f3a":"#Lets see how many industries we have in the dataset.\n\ndf[\"Industry\"].nunique()","6714ca63":"#Plotting pie chart\n\nmy_explode=(0,0.1,0.1,0.1,0.1)\nlabels= [x for x in df[\"Industry\"].value_counts().sort_values(ascending=False)[0:5].index] # piechart for only top 5 industry\npatches,ax, text= plt.pie(df[\"Industry\"].value_counts().sort_values(ascending=False)[0:5],autopct='%1.1f%%',explode=my_explode,shadow=True,startangle=305)\nplt.title('\\n Top 5 Industries with Most Number of Data Science Related Jobs \\n', size=16, color='black')\nplt.legend(patches, labels, loc=\"best\")\nplt.axis('equal')\nplt.show()","d933cfc6":"for (i,j) in zip(df[\"Industry\"].value_counts().sort_values(ascending=False)[0:10],range(0,10)):\n  print(\" Percentage of jobs in {}  :  {:.2f}%\".format(df[\"Industry\"].value_counts().sort_values(ascending=False).index[j],(i\/742)*100 ))","09f2937c":"# Making a sorter, to sort the index with Industries having highest number of data science related jobs\n\nsort_ind = df[\"Industry\"].value_counts().sort_values(ascending=False).index","a09621cc":"#Making a DF and sortring it w.r.t. sort_ind\n\nind = df.groupby(\"Industry\")[\"Lower Salary\",\"Upper Salary\"].mean().sort_values(\"Industry\",ascending=False)\nind = ind.reset_index()\n\n# Converting Industry column as Category and setting the sorter.\n\nind[\"Industry\"] = ind[\"Industry\"].astype(\"category\")\nind[\"Industry\"].cat.set_categories(sort_ind, inplace=True)\n\n#Resetting and droping the index\n\nind = ind.sort_values([\"Industry\"]).reset_index()\nind = ind.drop(\"index\",axis=1)\nind.head(2)\n","4a66084f":"# Drawing the grouped bar plot.\n\nlab=[]\nfor i in sort_ind[0:5]:\n  lab.append(i)\n\nx = np.arange(len(lab))  # the label locations\nwidth = 0.35  # the width of the bars\nfig, ax = plt.subplots(1)\nrects1 = ax.bar(x - width\/2, ind[\"Lower Salary\"][0:5], width, label='Min avg Salary')\nrects2 = ax.bar(x + width\/2, ind[\"Upper Salary\"][0:5], width, label='Max avg Salary')\n\n#Beautifying the plot\nplt.title('\\n Top 5 Industries with Average Annual Minimal and Maximal Salaries \\n', size=16, color='black')\nplt.xticks(fontsize=13)\nplt.xticks(rotation=75,ha='right', rotation_mode='anchor')\nplt.yticks(fontsize=12)\nplt.xlabel('\\n Industries \\n', fontsize=13, color='black')\nplt.ylabel('\\n Salary (K) \\n', fontsize=13, color='black')\nax.set_xticks(x)\nax.set_xticklabels(lab)\nax.legend(loc=\"upper right\")\nplt.show()\n","d70b63ed":"# Tooking at the job postings in each industry, to find any outliers.\n\ndf[\"Industry\"].value_counts().sort_values(ascending=False).tail(10)","4b1653a8":"# Top 10 companies with maximum number of job postings.\n\ndf[\"company_txt\"].value_counts().sort_values(ascending=False).head(10)","ff822ea9":"# Total number of companies\n\ndf.company_txt.nunique()","02ba5c06":"# Viualizing the above information\n\nfrom IPython.core.pylabtools import figsize\n#Lets visualize the top 10 companies with the most number of job postings.\n\nfig, ax = plt.subplots(nrows=1, ncols=1)\na = sns.barplot(x= df[\"company_txt\"].value_counts().sort_values(ascending=False).head(10).index ,y= df[\"company_txt\"].value_counts().sort_values(ascending=False).head(10))\n\n#Removing top and Right borders\n\nsns.despine(bottom = False, left = False)\n\n# figure size in inches\nimport matplotlib\nfrom matplotlib import rcParams\n#rcParams['figure.figsize'] = 12,5\n\n#Putting % on the bar plot. Credit: Stackoverflow\n\nspots = df[\"company_txt\"].value_counts().sort_values(ascending=False).index[0:10]\nfor p in ax.patches:\n    ax.text(p.get_x() + 0.2, p.get_height()+0.5, '{:.2f}%'.format((p.get_height()\/742)*100))\n\n#Beautifying the plot\nplt.title('\\n Top 10 Companies with Maximum Number of Job Postings \\n', size=16, color='black')\nplt.xticks(fontsize=13,rotation=90)\nplt.yticks(fontsize=12)\nplt.xlabel('\\n Company name \\n', fontsize=13, color='black')\nplt.ylabel('\\n Count \\n', fontsize=13, color='black')\nplt.show()","3af0bff1":"# Making a sorter, to sort the index with companies having highest number of data science related jobs\n\nsort_com = df[\"company_txt\"].value_counts().sort_values(ascending=False).index","1c1211b1":"#Making a DF and sortring it w.r.t. sort_com\n\ncom = df.groupby(\"company_txt\")[\"Lower Salary\",\"Upper Salary\"].mean().sort_values(\"company_txt\",ascending=False)\ncom = com.reset_index()\n\n# Converting company_txt column as Category and setting the sorter.\n\ncom[\"company_txt\"] = com[\"company_txt\"].astype(\"category\")\ncom[\"company_txt\"].cat.set_categories(sort_com, inplace=True)\n\n#Resetting and droping the index\n\ncom = com.sort_values([\"company_txt\"]).reset_index()\ncom = com.drop(\"index\",axis=1)\ncom.head(5)\n","6ad4f0dd":"# Drawing the grouped bar plot.\n\nlab=[]\nfor i in sort_com[0:5]:\n  lab.append(i)\n\nx = np.arange(len(lab))  # the label locations\nwidth = 0.35  # the width of the bars\nfig, ax = plt.subplots(1)\nrects1 = ax.bar(x - width\/2, com[\"Lower Salary\"][0:5], width, label='Min avg Salary')\nrects2 = ax.bar(x + width\/2, com[\"Upper Salary\"][0:5], width, label='Max avg Salary')\n\n#Beautifying the plot\nplt.title('\\n Top 5 Companies with Average Annual Minimal and Maximal Salaries \\n', size=16, color='black')\nplt.xticks(fontsize=13)\nplt.xticks(rotation=90,ha='right', rotation_mode='anchor')\nplt.yticks(fontsize=12)\nplt.xlabel('\\n Company name \\n', fontsize=13, color='black')\nplt.ylabel('\\n Salary (K) \\n', fontsize=13, color='black')\nax.set_xticks(x)\nax.set_xticklabels(lab)\nax.legend(loc=\"upper right\")\nplt.show()\n","323d57ce":"# I need to first find the top 5 companies with maximum job postings in those states.\n\na1=df[df[\"Job Location\"]==\"CA\"].copy() # It will only copy those records where Job Location is CA.\ns1 = a1[\"company_txt\"].value_counts().sort_values(ascending=False).index #This will act as a sorter for a1.\n\nb1=df[df[\"Job Location\"]==\"MA\"].copy() # It will only copy those records where Job Location is MA.\ns2 = b1[\"company_txt\"].value_counts().sort_values(ascending=False).index #This will act as a sorter for b1.\n\nc1=df[df[\"Job Location\"]==\"NY\"].copy() # It will only copy those records where Job Location is NY.\ns3 = c1[\"company_txt\"].value_counts().sort_values(ascending=False).index #This will act as a sorter for c1.\n\nd1=df[df[\"Job Location\"]==\"VA\"].copy() # It will only copy those records where Job Location is VA.\ns4 = d1[\"company_txt\"].value_counts().sort_values(ascending=False).index #This will act as a sorter for d1.\n\ne1=df[df[\"Job Location\"]==\"IL\"].copy() # It will only copy those records where Job Location is IL.\ns5 = e1[\"company_txt\"].value_counts().sort_values(ascending=False).index #This will act as a sorter for e1.\n\n#Making a DF and sortring it w.r.t. s1\nca = df.groupby(\"company_txt\")[\"Lower Salary\",\"Upper Salary\"].mean().sort_values(\"company_txt\",ascending=False)\nca = ca.reset_index()\n\n# Converting company_txt column as Category and setting the sorter.\n\nca[\"company_txt\"] = ca[\"company_txt\"].astype(\"category\")\nca[\"company_txt\"].cat.set_categories(s1, inplace=True)\n\n#Resetting and droping the index\n\nca = ca.sort_values([\"company_txt\"]).reset_index()\nca = ca.drop(\"index\",axis=1)\n\n\n#Making a DF and sortring it w.r.t. s2\nma = df.groupby(\"company_txt\")[\"Lower Salary\",\"Upper Salary\"].mean().sort_values(\"company_txt\",ascending=False)\nma = ma.reset_index()\n\n# Converting company_txt column as Category and setting the sorter.\n\nma[\"company_txt\"] = ma[\"company_txt\"].astype(\"category\")\nma[\"company_txt\"].cat.set_categories(s2, inplace=True)\n\n#Resetting and droping the index\n\nma = ma.sort_values([\"company_txt\"]).reset_index()\nma = ma.drop(\"index\",axis=1)\n\n\n#Making a DF and sortring it w.r.t. s3\nny = df.groupby(\"company_txt\")[\"Lower Salary\",\"Upper Salary\"].mean().sort_values(\"company_txt\",ascending=False)\nny = ny.reset_index()\n\n# Converting company_txt column as Category and setting the sorter.\n\nny[\"company_txt\"] = ny[\"company_txt\"].astype(\"category\")\nny[\"company_txt\"].cat.set_categories(s3, inplace=True)\n\n#Resetting and droping the index\n\nny = ny.sort_values([\"company_txt\"]).reset_index()\nny = ny.drop(\"index\",axis=1)\n\n\n#Making a DF and sortring it w.r.t. s4\nva = df.groupby(\"company_txt\")[\"Lower Salary\",\"Upper Salary\"].mean().sort_values(\"company_txt\",ascending=False)\nva = va.reset_index()\n\n# Converting company_txt column as Category and setting the sorter.\n\nva[\"company_txt\"] = va[\"company_txt\"].astype(\"category\")\nva[\"company_txt\"].cat.set_categories(s4, inplace=True)\n\n#Resetting and droping the index\n\nva = va.sort_values([\"company_txt\"]).reset_index()\nva = va.drop(\"index\",axis=1)\n\n\n#Making a DF and sortring it w.r.t. s5\nil = df.groupby(\"company_txt\")[\"Lower Salary\",\"Upper Salary\"].mean().sort_values(\"company_txt\",ascending=False)\nil = il.reset_index()\n\n# Converting company_txt column as Category and setting the sorter.\n\nil[\"company_txt\"] = il[\"company_txt\"].astype(\"category\")\nil[\"company_txt\"].cat.set_categories(s5, inplace=True)\n\n#Resetting and droping the index\n\nil = il.sort_values([\"company_txt\"]).reset_index()\nil = il.drop(\"index\",axis=1)\n","ad8d828c":"# Drawing the grouped bar plots.\n\n#California\n\nlab=[]\nfor it in s1[0:5]:\n  lab.append(it)\n\nx = np.arange(len(lab))  # the label locations\nwidth = 0.35  # the width of the bars\nfig, ax = plt.subplots(1)\nrects1 = ax.bar(x - width\/2, ca[\"Lower Salary\"][0:5], width, label='Min avg Salary')\nrects2 = ax.bar(x + width\/2, ca[\"Upper Salary\"][0:5], width, label='Max avg Salary')\n\n#Beautifying the plot\nplt.title('\\n Top 5 Companies with Average Annual Minimal and Maximal Salaries in California \\n',size=16, color='black')\nplt.xticks(fontsize=13)\nplt.xticks(rotation=90,ha='right', rotation_mode='anchor')\nplt.yticks(fontsize=12)\nplt.xlabel('\\n Company name \\n', fontsize=13, color='black')\nplt.ylabel('\\n Salary (K) \\n', fontsize=13, color='black')\nax.set_xticks(x)\nax.set_xticklabels(lab)\nax.legend(loc=\"upper right\")\nplt.show()\n\n#Massachusetts\n\nlab=[]\nfor it in s2[0:5]:\n  lab.append(it)\n\nx = np.arange(len(lab))  # the label locations\nwidth = 0.35  # the width of the bars\nfig, ax = plt.subplots(1)\nrects1 = ax.bar(x - width\/2, ma[\"Lower Salary\"][0:5], width, label='Min avg Salary')\nrects2 = ax.bar(x + width\/2, ma[\"Upper Salary\"][0:5], width, label='Max avg Salary')\n\n#Beautifying the plot\nplt.title('\\n Top 5 Companies with Average Annual Minimal and Maximal Salaries in Massachusetts \\n',size=16, color='black')\nplt.xticks(fontsize=13)\nplt.xticks(rotation=90,ha='right', rotation_mode='anchor')\nplt.yticks(fontsize=12)\nplt.xlabel('\\n Company name \\n', fontsize=13, color='black')\nplt.ylabel('\\n Salary (K) \\n', fontsize=13, color='black')\nax.set_xticks(x)\nax.set_xticklabels(lab)\nax.legend(loc=\"upper right\")\nplt.show()\n\n#New York\n\nlab=[]\nfor it in s3[0:5]:\n  lab.append(it)\n\nx = np.arange(len(lab))  # the label locations\nwidth = 0.35  # the width of the bars\nfig, ax = plt.subplots(1)\nrects1 = ax.bar(x - width\/2, ny[\"Lower Salary\"][0:5], width, label='Min avg Salary')\nrects2 = ax.bar(x + width\/2, ny[\"Upper Salary\"][0:5], width, label='Max avg Salary')\n\n#Beautifying the plot\nplt.title('\\n Top 5 Companies with Average Annual Minimal and Maximal Salaries in New York \\n',size=16, color='black')\nplt.xticks(fontsize=13)\nplt.xticks(rotation=90,ha='right', rotation_mode='anchor')\nplt.yticks(fontsize=12)\nplt.xlabel('\\n Company name \\n', fontsize=13, color='black')\nplt.ylabel('\\n Salary (K) \\n', fontsize=13, color='black')\nax.set_xticks(x)\nax.set_xticklabels(lab)\nax.legend(loc=\"upper right\")\nplt.show()\n\n#Virginia\n\nlab=[]\nfor it in s4[0:5]:\n  lab.append(it)\n\nx = np.arange(len(lab))  # the label locations\nwidth = 0.35  # the width of the bars\nfig, ax = plt.subplots(1)\nrects1 = ax.bar(x - width\/2, va[\"Lower Salary\"][0:5], width, label='Min avg Salary')\nrects2 = ax.bar(x + width\/2, va[\"Upper Salary\"][0:5], width, label='Max avg Salary')\n\n#Beautifying the plot\nplt.title('\\n Top 5 Companies with Average Annual Minimal and Maximal Salaries in Virginia \\n',size=16, color='black')\nplt.xticks(fontsize=13)\nplt.xticks(rotation=90,ha='right', rotation_mode='anchor')\nplt.yticks(fontsize=12)\nplt.xlabel('\\n Company name \\n', fontsize=13, color='black')\nplt.ylabel('\\n Salary (K) \\n', fontsize=13, color='black')\nax.set_xticks(x)\nax.set_xticklabels(lab)\nax.legend(loc=\"upper right\")\nplt.show()\n\n#Illinois\n\nlab=[]\nfor it in s5[0:5]:\n  lab.append(it)\n\nx = np.arange(len(lab))  # the label locations\nwidth = 0.35  # the width of the bars\nfig, ax = plt.subplots(1)\nrects1 = ax.bar(x - width\/2, il[\"Lower Salary\"][0:5], width, label='Min avg Salary')\nrects2 = ax.bar(x + width\/2, il[\"Upper Salary\"][0:5], width, label='Max avg Salary')\n\n#Beautifying the plot\nplt.title('\\n Top 5 Companies with Average Annual Minimal and Maximal Salaries in Illinois \\n',size=16, color='black')\nplt.xticks(fontsize=13)\nplt.xticks(rotation=90,ha='right', rotation_mode='anchor')\nplt.yticks(fontsize=12)\nplt.xlabel('\\n Company name \\n', fontsize=13, color='black')\nplt.ylabel('\\n Salary (K) \\n', fontsize=13, color='black')\nax.set_xticks(x)\nax.set_xticklabels(lab)\nax.legend(loc=\"upper right\")\nplt.show()","a93b8ab9":"sz = df.groupby(\"Size\")[\"Lower Salary\",\"Upper Salary\",\"Avg Salary(K)\"].mean().sort_values(\"Avg Salary(K)\",ascending=False)\nsz = sz.drop(\"unknown\",axis=0) # Dropping unknown company size records\nsz","04cadc11":"# Plotting company employee size v\/s average annual salary.\n\nsns.barplot(y= sz.index,x=sz[\"Avg Salary(K)\"])\n#Beautifying the plot\n\nplt.title('\\n Average Annual Salary Breakdown by Company Size \\n', size=16, color='black')\nplt.xticks(fontsize=13)\nplt.yticks(fontsize=12)\nplt.xlabel('\\n Average Salary (K) \\n', fontsize=13, color='black')\nplt.ylabel('\\n Company Size \\n', fontsize=13, color='black')\nplt.show()","842a0568":"#Looking at the count of companies w.r.t. their size.\n\nplt.figure(figsize=(8,8))\ng = sns.countplot(x='Size', data=df, order = df['Size'].value_counts().index)\n\n#Beautifying the plot\n\nplt.title('\\n Count Plot for Company Size \\n', size=16, color='black')\nplt.xticks(fontsize=13,rotation=45, horizontalalignment='right')\nplt.yticks(fontsize=12)\nplt.xlabel('\\n Company size \\n', fontsize=13, color='black')\nplt.ylabel('\\n Count \\n', fontsize=13, color='black')\nplt.show()","9b7117b7":"# looking at the relation between company size and revenue\nsns.barplot(y=\"Revenue\",x=\"Avg Salary(K)\",data=df)\n\n#Beautifying the plot\n\nplt.title('\\n Revenue and Salary Relationship Plot \\n', size=16, color='black')\nplt.xticks(fontsize=13)\nplt.yticks(fontsize=12)\nplt.xlabel('\\n Avg Salary(K) \\n', fontsize=13, color='black')\nplt.ylabel('\\n Revenue \\n', fontsize=13, color='black')\nplt.show()","565c9759":"#Looking at the count of companies w.r.t. their revenue.\n\nplt.figure(figsize=(8,8))\ng = sns.countplot(x='Revenue', data=df, order = df['Revenue'].value_counts().index)\n\n#Beautifying the plot\n\nplt.title('\\n Count Plot for Company Revenue \\n', size=16, color='black')\nplt.xticks(fontsize=13,rotation=45, horizontalalignment='right')\nplt.yticks(fontsize=12)\nplt.xlabel('\\n Company revenue \\n', fontsize=13, color='black')\nplt.ylabel('\\n Count \\n', fontsize=13, color='black')\nplt.show()","5b757a84":"# Looking at the relation between company's age and revenue\nsns.barplot(x=\"Age\",y=\"Revenue\",data=df)\n#Beautifying the plot\n\nplt.title('\\n Company\\'s Revenue and Age Relationship Plot \\n', size=16, color='black')\nplt.xticks(fontsize=13)\nplt.yticks(fontsize=12)\nplt.xlabel('\\n Age \\n', fontsize=13, color='black')\nplt.ylabel('\\n Revenue \\n', fontsize=13, color='black')\nplt.show()","2c613cba":"# Looking at the relation between company's age and size\nsns.barplot(x=\"Age\",y=\"Size\",data=df)\n#Beautifying the plot\n\nplt.title('\\n Company\\'s Size and Age Relationship Plot \\n', size=16, color='black')\nplt.xticks(fontsize=13)\nplt.yticks(fontsize=12)\nplt.xlabel('\\n Age \\n', fontsize=13, color='black')\nplt.ylabel('\\n Size \\n', fontsize=13, color='black')\nplt.show()","f5d09e33":"# Looking at the most in demand job titles.\n\ncatp = sns.catplot(x=\"job_title_sim\",data=df,order=df.job_title_sim.value_counts().index,kind=\"count\")\ncatp.fig.set_size_inches(10,5)\n\n#Putting % on the bar plot. Credit: Stackoverflow\n\nspots = df.job_title_sim.value_counts().index\nax = catp.facet_axis(0,0)\nfor p in ax.patches:\n    ax.text(p.get_x() + 0.15, p.get_height()+5, '{:.2f}%'.format((p.get_height()\/742)*100))\n\n#Beautifying the plot\n\nplt.title('\\n Job Titles \\n', size=16, color='black')\nplt.xticks(rotation=90,ha='right', rotation_mode='anchor')\nplt.xticks(fontsize=13)\nplt.yticks(fontsize=12)\nplt.xlabel('\\n Job Title \\n', fontsize=13, color='black')\nplt.ylabel('\\n Count \\n', fontsize=13, color='black')\nplt.show()\n\n#na shows those titles other than the titles shown in the plot.","2119729b":"#Drawing a pivot table.\npd.pivot_table(df,index=[\"job_title_sim\",\"seniority_by_title\"],values=\"Avg Salary(K)\")","f8506f09":"#@title Before Visualization code\n# I need to first find the top 5 companies with maximum job postings in those states.\n\na1=df[df[\"Job Location\"]==\"CA\"].copy() # It will only copy those records where Job Location is CA.\ns1 = a1[\"job_title_sim\"].value_counts().sort_values(ascending=False).index #This will act as a sorter for a1.\n\nb1=df[df[\"Job Location\"]==\"MA\"].copy() # It will only copy those records where Job Location is MA.\ns2 = b1[\"job_title_sim\"].value_counts().sort_values(ascending=False).index #This will act as a sorter for b1.\n\nc1=df[df[\"Job Location\"]==\"NY\"].copy() # It will only copy those records where Job Location is NY.\ns3 = c1[\"job_title_sim\"].value_counts().sort_values(ascending=False).index #This will act as a sorter for c1.\n\nd1=df[df[\"Job Location\"]==\"VA\"].copy() # It will only copy those records where Job Location is VA.\ns4 = d1[\"job_title_sim\"].value_counts().sort_values(ascending=False).index #This will act as a sorter for d1.\n\ne1=df[df[\"Job Location\"]==\"IL\"].copy() # It will only copy those records where Job Location is IL.\ns5 = e1[\"job_title_sim\"].value_counts().sort_values(ascending=False).index #This will act as a sorter for e1.\n\n#Making a DF and sortring it w.r.t. s1\nca = df.groupby(\"job_title_sim\")[\"Avg Salary(K)\"].mean().sort_values(ascending=False)\nca = ca.reset_index()\n\n# Converting company_txt column as Category and setting the sorter.\n\nca[\"job_title_sim\"] = ca[\"job_title_sim\"].astype(\"category\")\nca[\"job_title_sim\"].cat.set_categories(s1, inplace=True)\n\n#Resetting and droping the index\n\nca = ca.sort_values([\"job_title_sim\"]).reset_index()\nca = ca.drop(\"index\",axis=1)\n\n\n#Making a DF and sortring it w.r.t. s2\nma = df.groupby(\"job_title_sim\")[\"Avg Salary(K)\"].mean().sort_values(ascending=False)\nma = ma.reset_index()\n\n# Converting company_txt column as Category and setting the sorter.\n\nma[\"job_title_sim\"] = ma[\"job_title_sim\"].astype(\"category\")\nma[\"job_title_sim\"].cat.set_categories(s2, inplace=True)\n\n#Resetting and droping the index\n\nma = ma.sort_values([\"job_title_sim\"]).reset_index()\nma = ma.drop(\"index\",axis=1)\n\n\n#Making a DF and sortring it w.r.t. s3\nny = df.groupby(\"job_title_sim\")[\"Avg Salary(K)\"].mean().sort_values(ascending=False)\nny = ny.reset_index()\n\n# Converting company_txt column as Category and setting the sorter.\n\nny[\"job_title_sim\"] = ny[\"job_title_sim\"].astype(\"category\")\nny[\"job_title_sim\"].cat.set_categories(s3, inplace=True)\n\n#Resetting and droping the index\n\nny = ny.sort_values([\"job_title_sim\"]).reset_index()\nny = ny.drop(\"index\",axis=1)\n\n\n#Making a DF and sortring it w.r.t. s4\nva = df.groupby(\"job_title_sim\")[\"Avg Salary(K)\"].mean().sort_values(ascending=False)\nva = va.reset_index()\n\n# Converting company_txt column as Category and setting the sorter.\n\nva[\"job_title_sim\"] = va[\"job_title_sim\"].astype(\"category\")\nva[\"job_title_sim\"].cat.set_categories(s4, inplace=True)\n\n#Resetting and droping the index\n\nva = va.sort_values([\"job_title_sim\"]).reset_index()\nva = va.drop(\"index\",axis=1)\n\n\n#Making a DF and sortring it w.r.t. s5\nil = df.groupby(\"job_title_sim\")[\"Avg Salary(K)\"].mean().sort_values(ascending=False)\nil = il.reset_index()\n\n# Converting company_txt column as Category and setting the sorter.\n\nil[\"job_title_sim\"] = il[\"job_title_sim\"].astype(\"category\")\nil[\"job_title_sim\"].cat.set_categories(s5, inplace=True)\n\n#Resetting and droping the index\n\nil = il.sort_values([\"job_title_sim\"]).reset_index()\nil = il.drop(\"index\",axis=1)\n","1d995030":"#@title\n# Viualizing the above information\n\nfrom IPython.core.pylabtools import figsize\n#Lets visualize the top 5 job titles with the most number of job postings.\n\nfig, ax = plt.subplots(nrows=1, ncols=1)\na = sns.barplot(x= a1[\"job_title_sim\"].value_counts().sort_values(ascending=False).index[0:10] ,y= a1[\"job_title_sim\"].value_counts().sort_values(ascending=False).head(10))\n\n#funtion to set width to 0.35\ndef change_width(ax, new_value) :\n    for patch in ax.patches :\n        current_width = patch.get_width()\n        diff = current_width - new_value\n\n        # we change the bar width\n        patch.set_width(new_value)\n\n        # we recenter the bar\n        patch.set_x(patch.get_x() + diff * .5)\n\nchange_width(ax, .35)\n\n#Removing top and Right borders\n\nsns.despine(bottom = False, left = False)\n\n# figure size in inches\nimport matplotlib\nfrom matplotlib import rcParams\n#rcParams['figure.figsize'] = 12,5\n\n#Putting % on the bar plot. Credit: Stackoverflow\n\nspots = df[\"job_title_sim\"].value_counts().sort_values(ascending=False).index[0:10]\nfor p in ax.patches:\n    ax.text(p.get_x(), p.get_height()+0.5, '{:.2f}%'.format((p.get_height()\/df[df[\"Job Location\"]==\"CA\"].shape[0])*100))\n\n#Beautifying the plot\nplt.title('\\n Job Titles with Maximum Number of Job Postings in California \\n', size=16, color='black')\nplt.xticks(fontsize=13,rotation=90)\nplt.yticks(fontsize=12)\nplt.xlabel('\\n Job Title \\n', fontsize=13, color='black')\nplt.ylabel('\\n Count \\n', fontsize=13, color='black')\nplt.show()\n\n#Massachussets\n\nfig, ax = plt.subplots(nrows=1, ncols=1)\na = sns.barplot(x= b1[\"job_title_sim\"].value_counts().sort_values(ascending=False).index[0:10] ,y= b1[\"job_title_sim\"].value_counts().sort_values(ascending=False).head(10))\n\n#funtion to set width to 0.35\ndef change_width(ax, new_value) :\n    for patch in ax.patches :\n        current_width = patch.get_width()\n        diff = current_width - new_value\n\n        # we change the bar width\n        patch.set_width(new_value)\n\n        # we recenter the bar\n        patch.set_x(patch.get_x() + diff * .5)\n\nchange_width(ax, .35)\n\n#Removing top and Right borders\n\nsns.despine(bottom = False, left = False)\n\n# figure size in inches\nimport matplotlib\nfrom matplotlib import rcParams\n#rcParams['figure.figsize'] = 12,5\n\n#Putting % on the bar plot. Credit: Stackoverflow\n\nspots = df[\"job_title_sim\"].value_counts().sort_values(ascending=False).index[0:10]\nfor p in ax.patches:\n    ax.text(p.get_x(), p.get_height()+0.5, '{:.2f}%'.format((p.get_height()\/df[df[\"Job Location\"]==\"MA\"].shape[0])*100))\n\n#Beautifying the plot\nplt.title('\\n Job Titles with Maximum Number of Job Postings in Massachussets \\n', size=16, color='black')\nplt.xticks(fontsize=13,rotation=90)\nplt.yticks(fontsize=12)\nplt.xlabel('\\n Job Title \\n', fontsize=13, color='black')\nplt.ylabel('\\n Count \\n', fontsize=13, color='black')\nplt.show()\n\n#New York\nfig, ax = plt.subplots(nrows=1, ncols=1)\na = sns.barplot(x= c1[\"job_title_sim\"].value_counts().sort_values(ascending=False).index[0:10] ,y= c1[\"job_title_sim\"].value_counts().sort_values(ascending=False).head(10))\n\n#funtion to set width to 0.35\ndef change_width(ax, new_value) :\n    for patch in ax.patches :\n        current_width = patch.get_width()\n        diff = current_width - new_value\n\n        # we change the bar width\n        patch.set_width(new_value)\n\n        # we recenter the bar\n        patch.set_x(patch.get_x() + diff * .5)\n\nchange_width(ax, .35)\n\n#Removing top and Right borders\n\nsns.despine(bottom = False, left = False)\n\n# figure size in inches\nimport matplotlib\nfrom matplotlib import rcParams\n#rcParams['figure.figsize'] = 12,5\n\n#Putting % on the bar plot. Credit: Stackoverflow\n\nspots = df[\"job_title_sim\"].value_counts().sort_values(ascending=False).index[0:10]\nfor p in ax.patches:\n    ax.text(p.get_x(), p.get_height()+0.5, '{:.2f}%'.format((p.get_height()\/df[df[\"Job Location\"]==\"NY\"].shape[0])*100))\n\n#Beautifying the plot\nplt.title('\\n Job Titles with Maximum Number of Job Postings in New York \\n', size=16, color='black')\nplt.xticks(fontsize=13,rotation=90)\nplt.yticks(fontsize=12)\nplt.xlabel('\\n Job Title \\n', fontsize=13, color='black')\nplt.ylabel('\\n Count \\n', fontsize=13, color='black')\nplt.show()\n\n#Virginia\nwidth = 0.35\nfig, ax = plt.subplots(nrows=1, ncols=1)\na = sns.barplot(x= d1[\"job_title_sim\"].value_counts().sort_values(ascending=False).index[0:10] ,y= d1[\"job_title_sim\"].value_counts().sort_values(ascending=False).head(10))\n\n#funtion to set width to 0.35\ndef change_width(ax, new_value) :\n    for patch in ax.patches :\n        current_width = patch.get_width()\n        diff = current_width - new_value\n\n        # we change the bar width\n        patch.set_width(new_value)\n\n        # we recenter the bar\n        patch.set_x(patch.get_x() + diff * .5)\n\nchange_width(ax, .20)\n\n#Removing top and Right borders\n\nsns.despine(bottom = False, left = False)\n\n# figure size in inches\nimport matplotlib\nfrom matplotlib import rcParams\n#rcParams['figure.figsize'] = 12,5\n\n#Putting % on the bar plot. Credit: Stackoverflow\n\nspots = df[\"job_title_sim\"].value_counts().sort_values(ascending=False).index[0:10]\nfor p in ax.patches:\n    ax.text(p.get_x(), p.get_height()+0.5, '{:.2f}%'.format((p.get_height()\/df[df[\"Job Location\"]==\"VA\"].shape[0])*100))\n\n#Beautifying the plot\nplt.title('\\n Job Titles with Maximum Number of Job Postings in Virginia \\n', size=16, color='black')\nplt.xticks(fontsize=13,rotation=90)\nplt.yticks(fontsize=12)\nplt.xlabel('\\n Job Title \\n', fontsize=13, color='black')\nplt.ylabel('\\n Count \\n', fontsize=13, color='black')\nplt.show()\n\n#Ilinois\n\nfig, ax = plt.subplots(nrows=1, ncols=1)\na = sns.barplot(x= e1[\"job_title_sim\"].value_counts().sort_values(ascending=False).index[0:10] ,y= e1[\"job_title_sim\"].value_counts().sort_values(ascending=False).head(10))\n\n#funtion to set width to 0.35\ndef change_width(ax, new_value) :\n    for patch in ax.patches :\n        current_width = patch.get_width()\n        diff = current_width - new_value\n\n        # we change the bar width\n        patch.set_width(new_value)\n\n        # we recenter the bar\n        patch.set_x(patch.get_x() + diff * .5)\n\nchange_width(ax, .35)\n\n#Removing top and Right borders\n\nsns.despine(bottom = False, left = False)\n\n# figure size in inches\nimport matplotlib\nfrom matplotlib import rcParams\n#rcParams['figure.figsize'] = 12,5\n\n#Putting % on the bar plot. Credit: Stackoverflow\n\nspots = df[\"job_title_sim\"].value_counts().sort_values(ascending=False).index[0:10]\nfor p in ax.patches:\n    ax.text(p.get_x(), p.get_height()+0.5, '{:.2f}%'.format((p.get_height()\/df[df[\"Job Location\"]==\"IL\"].shape[0])*100))\n\n#Beautifying the plot\nplt.title('\\n Job Titles with Maximum Number of Job Postings in Ilinois \\n', size=16, color='black')\nplt.xticks(fontsize=13,rotation=90)\nplt.yticks(fontsize=12)\nplt.xlabel('\\n Job Title \\n', fontsize=13, color='black')\nplt.ylabel('\\n Count \\n', fontsize=13, color='black')\nplt.show()","4710409d":"salary=[\"Avg Salary(K)\"]","717d7902":"df.groupby('job_title_sim')[salary].mean().sort_values(\"Avg Salary(K)\",ascending=False)","23c6fdb7":"#Data scientist\nds = df[df[\"job_title_sim\"]==\"data scientist\"].groupby(\"Job Location\")[salary].mean().sort_values(\"Avg Salary(K)\",ascending=False)[0:10]\n\n#Data Engineer\nde = df[df[\"job_title_sim\"]==\"data engineer\"].groupby(\"Job Location\")[salary].mean().sort_values(\"Avg Salary(K)\",ascending=False)[0:10]\n\n#Data Analyst\nda = df[df[\"job_title_sim\"]==\"analyst\"].groupby(\"Job Location\")[salary].mean().sort_values(\"Avg Salary(K)\",ascending=False)[0:10]\n\n#Machine Learning Engineer\nmle = df[df[\"job_title_sim\"]==\"machine learning engineer\"].groupby(\"Job Location\")[salary].mean().sort_values(\"Avg Salary(K)\",ascending=False)[0:10]","cd95f5b5":"lab=[\"District of Columbia\",\"Illinois\",\"California\",\"Utah\",\"Missouri\",\"New Jersey\",\"North Carolina\",\"Pennsylvania\",\"New York\",\"Wisconsin\"]\n\n#Plot for Data Scientist\n\nfig, ax = plt.subplots(nrows=1, ncols=1)\na = sns.barplot(x= ds.index, y = ds[\"Avg Salary(K)\"])\n\n# figure size in inches\nrcParams['figure.figsize'] = 12,5\n\n#Beautifying the plot\nplt.title('\\n Average Salary of Data Scientist in Different States \\n', size=16, color='black')\nplt.xticks(fontsize=13)\nplt.yticks(fontsize=12)\nplt.xlabel('\\n States \\n', fontsize=13, color='black')\nplt.ylabel('\\n Average Salary (K) \\n', fontsize=13, color='black')\npatches = [matplotlib.patches.Patch(color=sns.color_palette()[i], label=j) for i,j in zip(range(0,10),lab)]\nplt.legend(handles=patches,bbox_to_anchor=(1, 1), loc=2, borderaxespad=0.)\nplt.show()\n\n#Plot for Data Engineer\nlab=[\"District of Columbia\",\"Indiana\",\"Texas\",\"New Jersey\",\"Maryland\",\"Massachusetts\",\"North Carolina\",\"Iowa\",\"Tennessee\",\"Utah\"]\n\nfig, ax = plt.subplots(nrows=1, ncols=1)\na = sns.barplot(x= de.index, y = de[\"Avg Salary(K)\"])\n\n# figure size in inches\nrcParams['figure.figsize'] = 12,5\n\n#Beautifying the plot\nplt.title('\\n Average Salary of Data Engineer in Different States \\n', size=16, color='black')\nplt.xticks(fontsize=13)\nplt.yticks(fontsize=12)\nplt.xlabel('\\n States \\n', fontsize=13, color='black')\nplt.ylabel('\\n Average Salary (K) \\n', fontsize=13, color='black')\npatches = [matplotlib.patches.Patch(color=sns.color_palette()[i], label=j) for i,j in zip(range(0,10),lab)]\nplt.legend(handles=patches,bbox_to_anchor=(1, 1), loc=2, borderaxespad=0.)\nplt.show()\n\n\n#Plot for Data Analyst\nlab=[\"Rhode Island\",\"California\",\"New Jersey\",\"Maryland\",\"Minnesota\",\"Virginia\",\"Ilinois\",\"New York\",\"District of Columbia\",\"Pennsylvania\"]\n\nfig, ax = plt.subplots(nrows=1, ncols=1)\na = sns.barplot(x= da.index, y = da[\"Avg Salary(K)\"])\n\n# figure size in inches\nrcParams['figure.figsize'] = 12,5\n\n#Beautifying the plot\nplt.title('\\n Average Salary of Data Analyst in Different States \\n', size=16, color='black')\nplt.xticks(fontsize=13)\nplt.yticks(fontsize=12)\nplt.xlabel('\\n States \\n', fontsize=13, color='black')\nplt.ylabel('\\n Average Salary (K) \\n', fontsize=13, color='black')\npatches = [matplotlib.patches.Patch(color=sns.color_palette()[i], label=j) for i,j in zip(range(0,10),lab)]\nplt.legend(handles=patches,bbox_to_anchor=(1, 1), loc=2, borderaxespad=0.)\n\nplt.show()\n\n\n#Plot for Machine Learning Engineer\nlab=[\"California\",\"Illinois\",\"New York\",\"Pennsylvania\",\"Colorado\",\"Kansas\",\"Virginia\"]\n\nfig, ax = plt.subplots(nrows=1, ncols=1)\na = sns.barplot(x= mle.index, y = mle[\"Avg Salary(K)\"])\n\n# figure size in inches\nrcParams['figure.figsize'] = 12,5\n\n#Beautifying the plot\nplt.title('\\n Average Salary of Machine Learning Engineer in Different States \\n', size=16, color='black')\nplt.xticks(fontsize=13)\nplt.yticks(fontsize=12)\nplt.xlabel('\\n States \\n', fontsize=13, color='black')\nplt.ylabel('\\n Average Salary (K) \\n', fontsize=13, color='black')\npatches = [matplotlib.patches.Patch(color=sns.color_palette()[i], label=j) for i,j in zip(range(0,10),lab)]\nplt.legend(handles=patches,bbox_to_anchor=(1, 1), loc=2, borderaxespad=0.)\n\nplt.show()","ae5707cc":"# To show all the records\npd.options.display.max_rows\npd.set_option('display.max_rows', None)\n\npd.pivot_table(df, index = ['Job Location','job_title_sim'], values = 'Avg Salary(K)', aggfunc = 'count').sort_values('Job Location', ascending = False)\n","8f203f36":"df_pivots = df[['job_title_sim','Python', 'spark', 'aws', 'excel','sql','sas','keras','pytorch','scikit','tensor','hadoop','tableau','bi','flink','mongo','google_an','Avg Salary(K)']]\n","1b27a489":"# Checking Average Salary  and counts for each skills\nskills = ['Python', 'spark', 'aws', 'excel','sql','sas','keras','pytorch','scikit','tensor','hadoop','tableau','bi','flink','mongo','google_an']\nfor i in skills:\n  a = pd.pivot_table(df_pivots, index = 'job_title_sim', columns = i, values = 'Avg Salary(K)', aggfunc = ['mean','count']).rename(columns={\"mean\":\"Avg Salary(K)\"})\n  print(a)","679c5fef":"pd.pivot_table(df, index = 'job_title_sim', columns = \"Degree\", values = 'Avg Salary(K)', aggfunc = ['mean','count']).rename(columns={\"mean\":\"Avg Salary(K)\"})\n","248bce03":"Next, it is interesting to look at the salary of top job titles in demand. I will be looking at Data Scientists, Data Engineer, ML Engineer and Data Analyst.\nOther Scientists Title contains multiple job titles in it, this could be a little confusing. That's why, I will not look at it.","85597d9d":"Motion Picture Production & Distribution Industry has only 1 job posting in the whole dataset (total 742 records), the reliability of this record is questionable. It can be treated as an outlier.","c572ead3":"## 9. Relation between Average Salary and Education","92ffe965":"59. Senior ML Engineer is getting the highest salary while normal ML Engineer are paid ~20% less. It is followed by senior data scientist which are earning ~28% more than a Junior data scientist.\n60. A senior data analyst is getting ~78% less salary than a senior ML engineer and ~70% less than a senior data scientist.\n61. A senior data engineer is getting ~15% less salary than a senior ML engineer and ~9% less than a senior data scientist.\n\nNote: na means job seniority level was not mentioned in the job description.","7295c295":"Lets visualize this.","4d360e66":"Lets look at the average salary reported by top 10 states with most no. of jobs.","25606fe6":"## 1. States with Most Number of Jobs.","62560da1":"## Information","c74b3c2b":"## (A) Data Wrangling\n\nTo answer the above questions, the raw data was scraped from Glassdoor in a CSV format and then I read the downloaded CSV file through pandas. Prior to any use, the datasets must be conditioned into formats which are more easily manipulated during the investigation. This includes removing invalid entries, correcting salary records reported in hourly format instead of yearly format, extracting other factors like degree required etc. This is **already done** in the data cleaning notebook and now I will be using the cleaned csv file for the analysis.\n\nSelenium code, raw datafile and Data cleaning notebook can be found [here](https:\/\/github.com\/dsNikhilds).","ea939f22":"Using requests library and doing simple get requests would not work for this type of website.Sending too many request could still increase chances of getting IP block, this limited the dataset to only 1000 jobs. Therefore, the only way to scrape that data is to write a program that mimics a human user. Selenium is a library that lets you code a python script that would act just like a human user.\n\n\nWith each job, we get the following information:\n\n- Job title\n- Salary Estimate\n- Job Description\n- Rating\n- Company\n- Location\n- Company Headquarters\n- Company Size\n- Company Founded Date\n- Type of Ownership\n- Industry\n- Sector\n- Revenue\n- Competitors","586cbc22":"Lets try to find any relation between company size,revenue and salary offered by the company.","25de6602":"I will look at the average salary and no of time that skill appears in the job description for each job title.","8939ac5b":"- California\n  62. Almost 50% of the job postings are for Data Scientist position, followed by Data Engineer (~17%).\n  63. Data Scientist, Data Engineer and Data Analyst accounts for ~77% of the job postings. If we add Other Scientists job title in it, the percentage becomes more than 90%.\n- Massachusetts\n  64. Almost 50% of the job postings are for Other Scientists (e.g. research scientists) position, followed by Data scientists (~36%).\n  65. Other Scientists and Data Scientists positions alone accounts for ~74% of the job postings.\n- New York\n  66. Almost 56% of the job postings are for Data Scientist position, followed by Data Analyst (~20%).\n  67. Unlike California and Massachusetts, Data analyst is high in demand.\n  68. Data Scientists and Data Analyst accounts for 75% of the job postings in this state.\n- Virginia\n  69. Only 4 job title postings are available in this state i.e. Data Scientist, Data Engineer, Data Analyst and ML engineer.\n  70. Almost 56% of the job postings are for Data Scientist position, followed by Data Engineer (~25%).\n  71. Data Scientists and Data Engineer accounts for ~81% of the job postings in this state.\n-Illinois\n  72. Almost 53% of the job postings are for Data Scientist position, followed by Data Engineer (20%).\n  73. Data Scientists, Other Scientists and Data Engineer accounts for ~83% of the job postings in this state.","924d963a":"This shows the name of all the columns, and which columns have null values. The data types used are: int, float and object. It also tells us about the no. of columns of each data type.","ee61f6ec":"It follows a normal distribution, therefore we can replace -1 values with the mean of the distribution.","3babd8e1":"54. Clearly, old companies are larger in size. There are around 17% companies that are older than 100 years and make revenue of $10+ billion.\n55. Similar thing can be seen for company size and age. ","0950dcec":"4. Most of the companies are rated between 3.5 - 4 (~3.7).","be4766c2":"41. Again, we see that a Pharmaceuticals Company offers the highest minimal and maximal annual salary.","99b02420":"Ofc, we can't make a plot with all the industries. So, I will be choosing the top 5 industries for insights.","53a5771b":"Now, let's look at industry column, I will find the industry with maximum number of job postings related to data science.","ae880685":"### Looking at basic information about the dataset","e69841e2":"- California\n  42. Greentech has the highest minimal and maximal annual salary among top 5 companies with highest no. of job postings. It is followed by Central California Alliance for Health.\n- Massachusetts\n  43. Takeda Pharmaceuticals has the highest maximal annual salary. It is followed by Novaritis.\n  44. Kronos Bi has the highest minimal annual salary, followed by Takeda Pharmaceuticals.\n- New York\n  45. AstraZeneca has the highest maximal annual salary. It if followed by Rochester Regional Health.\n  46. Swiss Re has the highest minimal annual salary, followed by AstraZeneca.\n- Virginia\n  47. Novetta has the highest maximal and minimal annual salary.\n-Illinois\n  48. Liberty Mutual Insurance has the highest maximal and minimal annual salary, followed by TransUnion.","17a3a0f1":"5. It shows there are many outliners in the Age column, so the mean value of Age can't be trusted as it will be clearly biased towards the outliers.","e86e9027":"At last, Lets make a word cloud from job description column to see which words are most common in the column.","f23b1c1f":"74. Data Science Director is the most paying job in the dataset, followed by ML Engineer, Data Scientist, Data Engineer and Data Analyst.\n75. Even though ML Engineer was not in demand in most of the states, it still gets highly paid.","9e35421e":"This gives us a overall look at how the data is distributed for numerical columns.\n1. Average lower salary is about \\$75K pa. We see 75% of the jobs positing has minimum salary =< than \\$91K pa, so it doesn't look like the mean value is affected much by the outlier(\\$15K or $202K pa).\n2. Average maximum salary is around \\$128K pa. We see 75% of the jobs positing has maximum salary =< than \\$155K pa, so it doesn't look like the mean value is affected much by the outlier(\\$16K or \\$306K pa).\n3. Mean Avg. salary is about \\$101K pa.\n\nI will look at these columns separately later in the notebook.","da7120aa":"Some of the insights are surprising, I doubt their reliability. It is better to look at the no. of records supporting the insights for each job titles.","6da1b57d":"38. There are total 342 companies in the dataset. This is why there is less number of job postings by each company.\n39. Reynolds American, MassMutrual and Takeda Pharmaceuticals company tops the list with 14 job postings related to data science.\n40. In the previous plot, we also saw that a Pharmaceutical Industry was leading with the most number of job postings, we see the same trend here in this findings too. The industry also offered the highest minimum and maximum annual salary. It clearly shows that the demand of data science experts in this industry is increasing.\n","f07513f7":"## 6. Job Titles with Most Number of Jobs","75de6c66":"Let's first look at the average annual salary for different states.","9f2f5f39":"Lets take a look at how these job positions are getting paid with respect to different seniority levels.","2d49b8bc":"## (B) Exploratory Data Analysis\n\nThe approach is to inspect each categorical variable and look for direct correlations with the salary distribution as well as between themself.","9c58b764":"I will now look at the salary of Data Scientist, Data Engineer, Data Analyst, ML Engineer in different states.\nI am not taking Data Science Director here because it is only present in 5 records out of 742, I don't find it much relevant here.","e2b44988":"104. Most of the companies has mentioned Masters degree in their job descriptions.\n105. For companies that mentioned a PhD degree in their job description, they offered much highes average annual salary as compared to Masters.","c79f39b4":"#### **Visualization of jobs in different states of U.S.**\n","1ff0ad71":"State abbrevations can be found here: https:\/\/www.ssa.gov\/international\/coc-docs\/states.html","a87ea90e":"## 7. Salary of Job Titles with Most Number of Jobs","23cce31c":"49. Ofcourse, companies with the largest number of employees offers high salary. There are more than 120 such companies in the data set.\n50. Also, company size between 51-200 offers almost the same salary as the largest company.  There are less than 120 such companies in the data set.\n51. Not surprisingly, companies having less than 50 employee offers the third best salary. These are usally startups. There are less number of such startups in the dataset.\n52. Even though companies having 501-5000 employees are most common (more than 250 companies) in the dataset but they offer the least amount of salary.","f21e1da9":"25. Biotech & Pharmaceuticals Industry has maximum number of jobs followed by Insurance carriers.\n26. As a surprise, IT industry has fewer jobs for data science related roles.\n27. More than 65% data science related jobs lie in top 10 industries.\n28. For this dataset, Biotech & Pharmaceuticals Industry has twice the amount of jobs compared to IT services industry.\n29. It looks like Heath Care Services & Hospitals industry is hiring at a good rate because they almost surpassed the IT services industry.","40c722f2":"## 4. Top 5 Industries with Maximum Number of Data Science Related Job Postings.","8bbd6e68":"53. Suprising companies having revenue between 5-10 Million pays more salary, followed by companies with revenue between 1-g Million and companies with revenue more than 10 Billion. Looking at the count plot, there are about 20 companies with revenue between 5 and 10 Million, so it can't be fake.\n\nNote: Unknown means that the data was not present for scrapping.","0d8bcab0":"- Data Scientist\n  76. District of Columbia (DC) offers highest average annual salary to Data Scientist, followed by Ilinois (IL) ,California (CA). I was expecting CA on the top, mainly because California has the highest average annual salary in general (look at plot \"Average salary per annum for different states\").\n- Data Engineer\n\n  77. California offers the highest salary for Data Engineer, followed by Indiana and Texas.\n- Data Analyst\n\n  78. Surprisingly, Rhode Island offers the highest salary to a Data Analyst, followed by California.\n- Machine Learning Engineer\n\n  79. California offers the highest salary for ML Engineer, followed by Illinois and New York.\n\n","a9c2a0e8":"We can further look at the minimal and maximal salaries for these companies.","f32a3340":"Next, I take a look at these job titles in top 5 states which have maximum number of job postings.","f3978c20":"![image.png](attachment:4ff08968-2483-4eb9-aa93-b45b4063ad5b.png)","e504b6c8":"There are no null values, the df.info() also says the same.","15fbda60":"It worked, Latitude and Longitude columns are there at the very end. We can now start visualizing them on a map.","69606b10":"- Python\n  84. We see that job positions in which python skill is mentioned in the job description are getting paid more.\n  85. Also, Python skill is required in about 77%, 31%, 65% and 82% of the job postings for Data Scientist, Data Analyst, Data Engineer and ML Engineer job positions respectively.\n\n- AWS\n  86. We see that job positions in which AWS skill is mentioned are getting paid more.\n  87. Also, this skill is required in about 25%, 9%, 50% and 27% of the job postings for Data Scientist, Data Analyst, Data Engineer and ML Engineer job positions respectively.\n\n- Excel\n  88. Surprisingle, less salary for job postings in which Excel skill is mentioned.\n  89. Also, this skill is required in about 50%, 76%, 45% and 32% of the job postings for Data Scientist, Data Analyst, Data Engineer and ML Engineer job positions respectively.\n\n- SQL\n  90. Not much relation between the skill and the average annual salary for different job positions.\n  91. Also, this skill is required in about 56%, 74%, 73% and 59% of the job postings for Data Scientist, Data Analyst, Data Engineer and ML Engineer job positions respectively.\n\n- SAS\n  92. Not much relation between the skill and the average annual salary for different job positions.\n  93. Also, this skill is required in about 16%, 11%, 0% and NA of the job postings for Data Scientist, Data Analyst, Data Engineer and ML Engineer job positions respectively.\n\n- Hadoop\n  94. Not much relation between the skill and the average annual salary for different job positions.\n  95. Also, this skill is required in about 19%, NA, 42% and 18% of the job postings for Data Scientist, Data Analyst, Data Engineer and ML Engineer job positions respectively.\n\n- Tableau\n  96. Not much relation between the skill and the average annual salary for different job positions.\n  97. Also, this skill is required in about 24%, 39%, 0.1% and NA of the job postings for Data Scientist, Data Analyst, Data Engineer and ML Engineer job positions respectively.\n\n- PowerBi\n  98. Not much relation between the skill and the average annual salary for different job positions.\n  99. Also, this skill is required in about 0.1%, 16%, 0% and NA of the job postings for Data Scientist, Data Analyst, Data Engineer and ML Engineer job positions respectively.\n\n- MangoDB\n  100. Not much relation between the skill and the average annual salary for different job positions.\n  101. Also, this skill is required in about 0.06%, 0.02%, 0.1% and NA of the job postings for Data Scientist, Data Analyst, Data Engineer and ML Engineer job positions respectively.\n\n- Google Analytics Certificate\n  102. Not much relation between the skill and the average annual salary for different job positions.\n\n- Spark, Keras, Pytorch, Scikit, Tensor, Flink\n  103. In most of the job postings, these skills aren't mentioned.\n\n","f5c07e9f":"20. California has the highest average annual salary among all 10 states, followed by Illinois.\n21. Pennsylvania, Texas and Washington has almost the same annual average salary.\n22. Only 3 out of 10 states, California, Massachusetts and Illinois, have average annual salary more than $100K.\n23. Overlap of 6\/10 states between top 10 states reporting highest annual average salary and top 10 states where job postings are maximum. \n24. Even though District of Columbia, New Jersey, Michigan and Rhode Island are not in top 10 states with highest number of jobs, those states still offers an average annual salary of greater than 100,000\\$.","0964ac29":"Lets look at the top 5 company minimal and maximal salaries in top 5 states with most number of job postings. The top 5 states with maximum job postings related to data science are: Calfornia(CA), Massachusetts(MA), New York(NY), Virginia(VA) and Illinois(IL).","e6ad151a":"30. Computer Hardware & Software Industry has the highest average maximal salary among the 5 selected industries, it is followed by Biotech & Pharmaceuticals.\n31. Computer Hardware & Software Industry also has the highest average minimal salary among the 5 selected industries, it is followed by Biotech & Pharmaceuticals.\n32. Health Care Services & Hospitals industry has the lowest average maximal and minimal salary among the 5 selected industries.\n33. Telecommunications Manufacturing Industry has the lowest average minimum and maximum salary among all the industries.\n34. Financial Analytics & Research industry has the highest average minimum salary among all the industries.\n35. Motion Picture Production & Distribution industry has the highest average maximum salary among all the industries.\n36. The average maximum salary of Motion Picture Production & Distribution industry is 3.3 times of the Telecommunications Manufacturing Industry's average maximum salary.\n37. The average minimum salary of Financial Analytics & Research industry is 3.6 times of the Telecommunications Manufacturing Industry's average minimum salary.","9607e0e8":"## 3. Average Salary in Different States.","f200640c":"## Credits\n1. Ken Jee - https:\/\/github.com\/PlayingNumbers\n2. Ezequiel Starecinch - https:\/\/github.com\/echestare\/001KenJeeFromScratch_DSSalary","83121554":"## 2. Average Minimal and Maximal Salaries in Different States.","a56d4996":"## 5. Companies with Maximum Number of Job Openings","ab15d50f":"Lets take a look at how many job postings gives experience credits to candidates holding a Phd or a Masters degree.","b8a4e23a":"Lets take a look at the minimum and maximum average salary for top 5 industries.","058409d0":"6. 37 unique states are present in the whole dataset, that's why we see 37 markers on the map.\n7. Also, we see more point on the boundary of the country map becauise more people live in the coastal areas as compared to rest of the US.","b6076b78":"56. A large number of job postings are for Data Scientist, followed by other scientists (research scientists, consultants etc) and data engineer.\n57. Data scientist, data engineer and data analyst accounts for around 72% of the postings.\n58. Surprisingly ML engineers are in low demand. It will be interesting to see who gets paid more.","49406b30":"Lets look at the average annual minimal and maximum salary in states with most number of jobs.","1d467844":"8. California has the most number of jobs.\n9. It is obvious for California to have most number of jobs as it is a hub for Tech. companies and has silicon valley.\n10. Calfornia, Massachusetts, New York, Virginia together has around 50% jobs\n11. Massachusetts on 2nd rank is no surprise, according to latest edition of the Milken Institute\u2019s State and Technology Index, it has now become the tech state of US. Source: https:\/\/www.geekwire.com\/2020\/chart-new-report-ranks-top-states-tech\/\n12. One surprising thing is, despite having the largest number of Fortune 500 companies HQ in New York, it is still on 3rd position.\n","b7db983b":"![image.png](attachment:c8d315fe-8be6-4a1d-bf9f-58c3168af0df.png)","73f70584":"- Data Scientist\n  80. DC only has 5 records for Data Scientist job position while CA has 74 and Ilinois has 21, it doesn't look like DC has enough records to be considered a solid insight.\n\n- Data Engineer\n  81. CA has 25 records to support the insight. It is fine to consired that CA offers the highest salary to data engineer.\n\n- Data Analyst\n  82. Rhode Island has only 1 record that supports the insight, it is not a solid finding to say that RI offers the highest salary to data analyst.\n\n- Machine Learning Engineer\n  83. There aren't enough records to conclude anything.","67732680":"Lets begin the exploratory data analysis by looking at how the jobs are distributed among different states.","c2892c1c":"## 8. Skills Required by Companies for Each Job Title.","827b3bd5":"Next, let's look at the minimal and maximal average salary per annum in these states.","fc332d6a":"## Flow:","7a4ee078":"After looking at the industry, it makes sense to see which company has the maximum number of job postings related to data science.","72b6303a":"17. California has the highest average annual salary, followed by Illinois. This could be beacuse there are 74 job postings in California for Data scientists which are highly paid (shown later).\n18. Maryland has the lowest average annual salary because it is hiring less number of people and the jobs are also distributed among high salary and low salary job titles.\n19. Average Salary of California is twice the average salary of Alabama, Delaware, South Carolina, Idaho, Louisiana and Nebraska.\n","311e9728":"13. State with highest number of job, California also offers the highest average maximal annual salary, followed by Illinois.\n14. Both California and Illinois has almost the same average minimal annual salary.\n15. Pennsylvania has the lowest average minimum annual salary among the top 10 states.\n16. Washington has the lowest average maximum annual salary among the top 10 states.","bab78e88":"It will be interesting to see the average annual salary among the top 10 states.","6eb90cb7":"Lets look at the most in demand job titles.","d256ed57":"Lets look at the company age relation with revenue and size.","41b8f381":"The dataset doesn't have Longitude and Latitude information required for visualizations on a US map.\nSo, I am adding a Long, Lat US dataset into the main dataframe.\nSource: https:\/\/www.kaggle.com\/washimahmed\/usa-latlong-for-state-abbreviations","17d38e14":"## Questions:\n\n1. States with Most Number of Jobs.\n2. Average Minimal and Maximal Salaries in Different States.\n3. Average Salary in Different States.\n4. Top 5 Industries with Maximum Number of Data Science Related Job Postings.\n5. Companies with Maximum Number of Job Openings.\n6. Job Titles with Most Number of Jobs.\n7. Salary of Job Titles with Most Number of Jobs.\n8. Skills Required by Companies for Each Job Title.\n9. Relation between Average Salary and Education."}}