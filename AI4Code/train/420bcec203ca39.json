{"cell_type":{"07635522":"code","2d2fc025":"code","94f711ca":"code","1fe3fded":"code","7b3832e3":"code","e74e197b":"code","88477410":"code","0d6adaed":"code","d336b6da":"code","dd27e7b3":"code","d9321503":"code","9a7ef97c":"code","f0579fa5":"code","16986e51":"code","5c4c06b4":"code","5301a36f":"code","96168669":"code","7c415ce2":"code","9a2a33de":"code","d3dc0e00":"code","60458762":"code","4629d866":"code","79436d00":"code","910dd272":"code","101a3526":"code","8e6d1d11":"code","c874bcdc":"code","3643efd7":"code","91c3575e":"code","acaf34b1":"code","b60dfc89":"code","f56b7345":"code","21d6aa7d":"code","cfcc702e":"code","099a2709":"code","7a001d9f":"code","c25d63b5":"code","ff77d6af":"code","58d16722":"code","4076702d":"code","e2a82203":"code","c1bf8f8a":"code","aeaa77cd":"code","24c309ef":"code","965376f4":"code","c00171e5":"code","cba7a29d":"code","3a009bb0":"code","8d9fb65d":"code","10570409":"code","8cea397c":"code","e0f6b43c":"code","b41a5f10":"code","46a0cd85":"code","f680bc90":"code","c6ed087f":"code","dfb3f762":"code","ef2f814d":"code","8fc38411":"code","b598dfba":"code","5f1c0021":"code","dbd987c9":"code","548c52a8":"code","22ace03c":"code","10a5cfb7":"code","de09f48b":"code","f460ea19":"code","c5057678":"code","9b25ca50":"code","14af65f7":"code","8e47a6b4":"code","62efe54e":"code","28cd6258":"code","99fd9036":"code","3290c21d":"code","4b227471":"code","a176745a":"code","852e9770":"code","45e7d81d":"code","cb4bf5de":"code","4545063b":"code","6e145033":"code","059ad492":"code","a9e43d1d":"code","c14bb624":"code","fde2d6a8":"code","e20a382b":"code","7bfe14b1":"code","fb28ddc4":"code","6ab909f7":"code","6ff9bf2e":"code","565cb5ba":"code","c82747f9":"code","df88aa8f":"code","7d101220":"code","8944dee8":"code","77c90f08":"code","14159b83":"code","f6c8f470":"code","d48e4996":"code","44ea5a10":"code","ad098cee":"code","1af82d29":"code","6a171118":"code","0db6b070":"markdown","d1de27cc":"markdown","9ac2b9a1":"markdown","62579143":"markdown","b2abd007":"markdown","83fd105c":"markdown","cc871877":"markdown","c5fca0cb":"markdown","02f600b7":"markdown","813aefa4":"markdown","ce627fca":"markdown","42c3d05d":"markdown","c13d8f8b":"markdown","7c6fbeeb":"markdown","6594c125":"markdown","6c0ecd13":"markdown","0c9bce84":"markdown","0dff5800":"markdown","4bd1f571":"markdown","9feaeccd":"markdown","50023375":"markdown","7fe57640":"markdown","75ad8f98":"markdown","7be77790":"markdown","36b1be3f":"markdown","2b666346":"markdown"},"source":{"07635522":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport plotly.offline as py\nimport plotly.express as px","2d2fc025":"df_covid = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")\ndf_covid\n","94f711ca":"df_cov_ind = df_covid[df_covid[\"Country\/Region\"] == \"India\"]\ndf_cov_ind","1fe3fded":"df_cov_ind[\"Active\"] = df_cov_ind[\"Confirmed\"] - df_cov_ind[\"Deaths\"] - df_cov_ind[\"Recovered\"]\ndf_cov_ind","7b3832e3":"current = df_cov_ind.iloc[-1]\ndead = current[\"Deaths\"]\nrecov = current[\"Recovered\"]\nact = current[\"Active\"]\npatient_state = [[\"Active\",act],[\"Death\",dead],[\"Recovered\",recov]]\ndf = pd.DataFrame(patient_state, columns=[\"Patient State\",\"Count\"])\nfig = px.pie(df, values=\"Count\", names=\"Patient State\", title=\"State of Patients in India\", template=\"seaborn\")\nfig.update_traces(rotation=90, pull=0.05, textinfo=\"percent+label\")\nfig.show()","e74e197b":"import plotly.graph_objects as go\n\nfig = go.Figure(data=[go.Bar(name=\"Recovered\",x = df_cov_ind[\"ObservationDate\"],y=df_cov_ind[\"Recovered\"]),\n                      go.Bar(name=\"Deaths\",x = df_cov_ind[\"ObservationDate\"],y=df_cov_ind[\"Deaths\"]),\n                     go.Bar(name=\"Active\",x = df_cov_ind[\"ObservationDate\"],y=df_cov_ind[\"Active\"])])\nfig.update_layout(barmode='stack',title=\"India Covid-19 Pandemic Timeline\")\nfig.show()","88477410":"df_cov_ind1 = pd.read_csv(\"..\/input\/covid19-corona-virus-india-dataset\/complete.csv\")\ndf_cov_ind1","0d6adaed":"df_cov_ind1[\"Date\"] = pd.to_datetime(df_cov_ind1[\"Date\"])\ndf_cov_ind1 = df_cov_ind1.drop([\"Total Confirmed cases (Indian National)\",\"Total Confirmed cases ( Foreign National )\",\\\n                                 \"Latitude\",\"Longitude\"],axis=1)","d336b6da":"df_cov_state = df_cov_ind1[df_cov_ind1[\"Date\"] == df_cov_ind1[\"Date\"].max()]\n\ndf_cov_state = df_cov_state.rename(columns={\"Name of State \/ UT\":\"State\/UT\",\"Total Confirmed cases\":\"Confirmed\",\"Cured\/Discharged\/Migrated\":\"Cured\"})\ndf_cov_state.index = range(0,len(df_cov_state))\ndf_cov_state","dd27e7b3":"fig = px.pie(df_cov_state[df_cov_state[\"Confirmed\"]>100], values=\"Confirmed\", names=\"State\/UT\", title=\"Number of confirmed by State\/UT with major infection\", template=\"seaborn\")\nfig.update_traces(rotation=90, pull=0.05, textinfo=\"percent+label\")\nfig.show()","d9321503":"import geopandas as gpd","9a7ef97c":"df_map = gpd.read_file(\"..\/input\/indian-states\/Indian_States.shp\")\ndf_map[\"st_nm\"][df_map['st_nm'] == \"NCT of Delhi\"] = \"Delhi\"\ndf_map = df_map.sort_values(\"st_nm\")","f0579fa5":"df_map_state = df_cov_state[df_cov_state[\"State\/UT\"]!=\"Ladakh\"][[\"Confirmed\",\"State\/UT\"]]\nJandK = df_cov_state[\"Confirmed\"][df_cov_state[\"State\/UT\"] == \"Jammu and Kashmir\"].values[0]\ndf_map_state[\"Confirmed\"][df_map_state[\"State\/UT\"] == \"Jammu and Kashmir\"] = JandK + df_cov_state[\"Confirmed\"][df_cov_state[\"State\/UT\"] == \"Ladakh\"].values[0]","16986e51":"df_map[\"st_nm\"][df_map[\"st_nm\"] == \"Jammu & Kashmir\"] = \"Jammu and Kashmir\"\ndf_map[\"st_nm\"][df_map[\"st_nm\"] == \"Andaman & Nicobar Island\"] = \"Andaman and Nicobar Islands\"\ndf_map[\"st_nm\"][df_map[\"st_nm\"] == \"Telangana\"] = \"Telengana\"\ndf_map[\"st_nm\"][df_map[\"st_nm\"] == \"Arunanchal Pradesh\"] = \"Arunachal Pradesh\"","5c4c06b4":"merged_df = df_map.set_index('st_nm').join(df_map_state.set_index('State\/UT'))\nmerged_df = merged_df.dropna()","5301a36f":"fig, ax = plt.subplots(1, figsize=(20, 10))\nax.axis('off')\nax.set_title('State wise distribution of Covid-19 confirmed cases', fontdict={'fontsize': '25', 'fontweight' : '3'})\nmerged_df.plot(column='Confirmed', cmap='YlOrRd', linewidth=0.8, ax=ax, edgecolor='0.8', legend=True)","96168669":"fig = px.pie(df_cov_state[df_cov_state[\"Confirmed\"]>100], values=\"Death\", names=\"State\/UT\", title=\"Number of deaths by State\/UT with major infection\", template=\"seaborn\")\nfig.update_traces(rotation=90, pull=0.05, textinfo=\"percent+label\")\nfig.show()","7c415ce2":"df_map_state[\"Death\"] = df_cov_state[\"Death\"]\nJandK = df_cov_state[\"Death\"][df_cov_state[\"State\/UT\"] == \"Jammu and Kashmir\"].values[0]\ndf_map_state[\"Death\"][df_map_state[\"State\/UT\"] == \"Jammu and Kashmir\"] = JandK + df_cov_state[\"Death\"][df_cov_state[\"State\/UT\"] == \"Ladakh\"].values[0]","9a2a33de":"merged_df = df_map.set_index('st_nm').join(df_map_state.set_index('State\/UT'))\nmerged_df = merged_df.dropna()","d3dc0e00":"fig, ax = plt.subplots(1, figsize=(20, 10))\nax.axis('off')\nax.set_title('State wise distribution of Covid-19 deaths', fontdict={'fontsize': '25', 'fontweight' : '3'})\nmerged_df.plot(column='Death', cmap='YlOrRd', linewidth=0.8, ax=ax, edgecolor='0.8', legend=True)","60458762":"fig = px.pie(df_cov_state[df_cov_state[\"Confirmed\"]>100], values=\"Cured\", names=\"State\/UT\", title=\"Number of recovered by State\/UT with major infection\", template=\"seaborn\")\nfig.update_traces(rotation=90, pull=0.05, textinfo=\"percent+label\")\nfig.show()","4629d866":"df_map_state[\"Recovered\"] = df_cov_state[\"Cured\"]\nJandK = df_cov_state[\"Cured\"][df_cov_state[\"State\/UT\"] == \"Jammu and Kashmir\"].values[0]\ndf_map_state[\"Recovered\"][df_map_state[\"State\/UT\"] == \"Jammu and Kashmir\"] = JandK + df_cov_state[\"Cured\"][df_cov_state[\"State\/UT\"] == \"Ladakh\"].values[0]","79436d00":"merged_df = df_map.set_index('st_nm').join(df_map_state.set_index('State\/UT'))\nmerged_df = merged_df.dropna()","910dd272":"fig, ax = plt.subplots(1, figsize=(20, 10))\nax.axis('off')\nax.set_title('State wise distribution of Covid-19 Recovered', fontdict={'fontsize': '25', 'fontweight' : '3'})\nmerged_df.plot(column='Recovered', cmap='YlOrRd', linewidth=0.8, ax=ax, edgecolor='0.8', legend=True)","101a3526":"df_map_state[\"Active\"] = df_map_state[\"Confirmed\"] - (df_map_state[\"Death\"]+df_map_state[\"Recovered\"])\ndf_map_state","8e6d1d11":"fig = px.pie(df_map_state[df_map_state[\"Confirmed\"]>100], values=\"Active\", names=\"State\/UT\", title=\"Number of Active cases by State\/UT with major infection\", template=\"seaborn\")\nfig.update_traces(rotation=90, pull=0.05, textinfo=\"percent+label\")\nfig.show()","c874bcdc":"merged_df = df_map.set_index('st_nm').join(df_map_state.set_index('State\/UT'))\nmerged_df = merged_df.dropna()","3643efd7":"fig, ax = plt.subplots(1, figsize=(20, 10))\nax.axis('off')\nax.set_title('State wise distribution of Covid-19 Active Cases', fontdict={'fontsize': '25', 'fontweight' : '3'})\nmerged_df.plot(column='Active', cmap='YlOrRd', linewidth=0.8, ax=ax, edgecolor='0.8', legend=True)","91c3575e":"df_state_test = pd.read_csv(\"..\/input\/covid19-in-india\/StatewiseTestingDetails.csv\")\ndf_state_test","acaf34b1":"df_state_test[df_state_test[\"State\"] == \"Manipur\"]","b60dfc89":"df_state_test1 = pd.DataFrame(columns=[\"State\",\"TotalSamples\",\"Negative\",\"Positive\"])\n\nfor state in df_state_test[\"State\"].unique():\n    temp_df = df_state_test[df_state_test[\"State\"] == state]\n    temp_df = temp_df.dropna()\n    \n    temp_df.drop([\"Date\"],axis=1,inplace=True)\n    if(len(temp_df) > 0):\n        df_state_test1 = df_state_test1.append(temp_df.iloc[-1])\ndf_state_test = df_state_test1\ndf_state_test.index = range(0,len(df_state_test))\ndf_state_test[\"PositivePercent\"] = df_state_test[\"Positive\"]\/df_state_test[\"TotalSamples\"]\ndf_state_test[\"NegativePercent\"] = df_state_test[\"Negative\"]\/df_state_test[\"TotalSamples\"]\ndf_state_test","f56b7345":"fig = go.Figure(data=[go.Bar(name=\"Positive\",x = df_state_test[\"State\"],y=df_state_test[\"Positive\"]),\n                      go.Bar(name=\"Negative\",x = df_state_test[\"State\"],y=df_state_test[\"Negative\"])])\nfig.update_layout(barmode='stack',title=\"Statewise testing results\")\nfig.show()","21d6aa7d":"fig = px.pie(df_state_test, values=\"PositivePercent\", names=\"State\", title=\"States by positive test result percentage\", template=\"seaborn\")\nfig.update_traces(rotation=90, pull=0.05, textinfo=\"percent+label\")\nfig.show()","cfcc702e":"fig = px.pie(df_state_test, values=\"TotalSamples\", names=\"State\", title=\"States by number of tests conducted\", template=\"seaborn\")\nfig.update_traces(rotation=90, pull=0.05, textinfo=\"percent+label\")\nfig.show()","099a2709":"df_pop = pd.read_csv(\"..\/input\/covid19-in-india\/population_india_census2011.csv\")\ndf_pop = df_pop.rename(columns={\"State \/ Union Territory\":\"State\"})\ndf_state_testpop = df_state_test.join(df_pop.set_index('State'),how=\"left\",on=\"State\", rsuffix='Population')\ndf_state_testpop = df_state_testpop.drop([\"Sno\",\"Rural population\",\"Urban population\",\"Area\",\"Density\",\"Gender Ratio\"],axis=1)\ndf_state_testpop[\"Test\/1M\"] = (df_state_testpop[\"TotalSamples\"]\/df_state_testpop[\"Population\"])*1000000\ndf_state_testpop","7a001d9f":"df_state_testpop[\"TotalSamples\"][df_state_testpop[\"State\"] == \"Andhra Pradesh\"] = df_state_testpop[\"TotalSamples\"][df_state_testpop[\"State\"] == \"Andhra Pradesh\"].values[0] + \\\ndf_state_testpop[\"TotalSamples\"][df_state_testpop[\"State\"] == \"Telangana\"].values[0]\ndf_state_testpop.drop(index = df_state_testpop[\"TotalSamples\"][df_state_testpop[\"State\"] == \"Telangana\"].index[0],axis=0,inplace=True)\ndf_state_testpop[\"Test\/1M\"] = (df_state_testpop[\"TotalSamples\"]\/df_state_testpop[\"Population\"])*1000000\ndf_state_testpop","c25d63b5":"fig = px.bar(df_state_testpop,x=\"State\",y=\"Test\/1M\",title = \"States by No. of tests per million\")\nfig.show()","ff77d6af":"fig = px.pie(df_state_testpop, values=\"Test\/1M\", names=\"State\", title=\"States by number of tests per million\", template=\"seaborn\")\nfig.update_traces(rotation=90, pull=0.05, textinfo=\"percent+label\")\nfig.show()","58d16722":"df_state_phf = pd.read_csv(\"..\/input\/covid19-in-india\/HospitalBedsIndia.csv\")\ndf_state_phf","4076702d":"df_state_phf.drop(index=len(df_state_phf)-1,axis=0,inplace=True)\ndf_state_phf.drop([\"Sno\",\"NumPrimaryHealthCenters_HMIS\",\"NumCommunityHealthCenters_HMIS\",\"NumSubDistrictHospitals_HMIS\",\"NumDistrictHospitals_HMIS\"],axis=1,inplace=True)\n\n","e2a82203":"fig = px.bar(df_state_phf,x = \"State\/UT\",y=\"TotalPublicHealthFacilities_HMIS\",title=\"State by Health Facilities\",labels={\"TotalPublicHealthFacilities_HMIS\":\"Total Health Facilities\"})\nfig.show()","c1bf8f8a":"df_state_phf[\"TotalPublicHealthFacilities_HMIS\"][df_state_phf[\"State\/UT\"] == \"Andhra Pradesh\"] = df_state_phf[\"TotalPublicHealthFacilities_HMIS\"][df_state_phf[\"State\/UT\"] == \"Andhra Pradesh\"].values[0] + \\\ndf_state_phf[\"TotalPublicHealthFacilities_HMIS\"][df_state_phf[\"State\/UT\"] == \"Telangana\"].values[0]\ndf_state_phf.drop(index = df_state_phf[\"TotalPublicHealthFacilities_HMIS\"][df_state_phf[\"State\/UT\"] == \"Telangana\"].index[0],axis=0,inplace=True)\n","aeaa77cd":"df_state_phf[\"State\/UT\"][df_state_phf[\"State\/UT\"] == \"Andaman & Nicobar Islands\"] = \"Andaman and Nicobar Islands\"\ndf_state_phf[\"State\/UT\"][df_state_phf[\"State\/UT\"] == \"Jammu & Kashmir\"] = \"Jammu and Kashmir\"\n","24c309ef":"df_state_phf = df_state_phf.join(df_pop.set_index('State'),how=\"left\",on=\"State\/UT\", rsuffix='Population')\ndf_state_phf[\"Facilities\/1M\"] = (df_state_phf[\"TotalPublicHealthFacilities_HMIS\"]\/df_state_phf[\"Population\"])*1000000\ndf_state_phf","965376f4":"df_state_phf = df_state_phf.dropna()\n\nfig = px.bar(df_state_phf,x = \"State\/UT\",y=\"Facilities\/1M\",title=\"Distribution of Health Facilities per million\")\nfig.show()","c00171e5":"df_cov_ind1 = df_cov_ind1.rename(columns={\"Name of State \/ UT\":\"State\/UT\"})\ndf_cov_ind1 = df_cov_ind1.rename(columns={\"Name of State \/ UT\":\"State\/UT\",\"Total Confirmed cases\":\"Confirmed\",\"Cured\/Discharged\/Migrated\":\"Cured\"})\n","cba7a29d":"from PIL import Image\nimport datetime\nfrom matplotlib.animation import FuncAnimation","3a009bb0":"len(df_cov_ind1[\"Date\"].unique())","8d9fb65d":"\nstates = df_cov_ind1[\"State\/UT\"].unique()\n\n#fig,ax = plt.subplots(figsize=(15,15))\nfor date in df_cov_ind1[\"Date\"].unique()[::4]:\n    \n    df_temp = df_cov_ind1[df_cov_ind1[\"Date\"] == date]\n    \n    for s in states:\n        if s not in df_temp[\"State\/UT\"].values:\n            df_temp = df_temp.append({\"Date\":date,\"State\/UT\":s,\"Cured\":0,\"Confirmed\":0,\"Death\":0},ignore_index=True)\n    df_temp1 = df_temp[df_temp[\"State\/UT\"]!=\"Ladakh\"][[\"Date\",\"Confirmed\",\"Cured\",\"Death\",\"State\/UT\"]]\n    JandK = df_temp[\"Confirmed\"][df_temp[\"State\/UT\"] == \"Jammu and Kashmir\"].values[0]\n    df_temp1[\"Confirmed\"][df_temp1[\"State\/UT\"] == \"Jammu and Kashmir\"] = JandK + df_temp[\"Confirmed\"][df_temp[\"State\/UT\"] == \"Ladakh\"].values[0]\n    JandK = df_temp[\"Cured\"][df_temp[\"State\/UT\"] == \"Jammu and Kashmir\"].values[0]\n    df_temp1[\"Cured\"][df_temp1[\"State\/UT\"] == \"Jammu and Kashmir\"] = JandK + df_temp[\"Cured\"][df_temp[\"State\/UT\"] == \"Ladakh\"].values[0]\n    JandK = df_temp[\"Death\"][df_temp[\"State\/UT\"] == \"Jammu and Kashmir\"].values[0]\n    df_temp1[\"Death\"][df_temp1[\"State\/UT\"] == \"Jammu and Kashmir\"] = JandK + df_temp[\"Death\"][df_temp[\"State\/UT\"] == \"Ladakh\"].values[0]\n    \n    df_temp = df_temp1\n    #df_temp[\"Active\"] = df_temp[\"Confirmed\"] - df_temp[\"Death\"] - df_temp[\"Cured\"]\n    \n    merged_df = df_map.set_index('st_nm').join(df_temp.set_index('State\/UT'))\n    merged_df = merged_df.dropna()\n    \n    fig,ax = plt.subplots(figsize=(15,15))\n    fig.patch.set_facecolor(\"blue\")\n    ax.set_facecolor(\"blue\")\n    fig1 = merged_df.plot(column='Confirmed', cmap='YlOrRd', linewidth=0.8, ax=ax, edgecolor='0.8', legend=True)\n    fig1.axis('off')\n    fig1.set_title('State wise distribution of Covid-19 Confirmed Cases', fontdict={'fontsize': '25', 'fontweight' : '3'})\n    \n    date1 = datetime.datetime.utcfromtimestamp(date.tolist()\/1e9)\n    \n    date1 = date1.strftime('%Y.%m.%d')\n    fig1.annotate(date1,xy=(0.1, .225), xycoords='figure fraction',horizontalalignment='left', verticalalignment='top',fontsize=35)\n    \n    chart = fig1.get_figure()\n    chart.patch.set_facecolor(\"blue\")\n    #plt.close(chart)\n    chart.savefig(date1+\"img.jpg\",facecolor='blue')\n    plt.close(fig)\n    fig1.clear()\n    fig.clear()\n    ax.clear()\n    #images.append(Image.open(\"img.jpg\"))\n    \n#images[0].save(\"map.gif\",save_all=True,append_images=images[1:],optimize=False,duration=100,loop=0)\n    ","10570409":"images = []\nfor date in df_cov_ind1[\"Date\"].unique()[::4]:\n    date1 = datetime.datetime.utcfromtimestamp(date.tolist()\/1e9)\n    date1 = date1.strftime('%Y.%m.%d')\n    images.append(Image.open(date1+\"img.jpg\"))\n    \nimages[0].save(\"map.gif\",save_all=True,append_images=images[1:],optimize=False,duration=1000,loop=0)","8cea397c":"df_zones = pd.read_csv(\"..\/input\/covid19-corona-virus-india-dataset\/zones.csv\")\ndf_zones","e0f6b43c":"df_dist = gpd.read_file(\"..\/input\/districts1\/gadm36_IND_2.shp\")\ndf_dist = df_dist[[\"NAME_2\",\"geometry\"]]\ndf_dist.index = range(len(df_dist))\ndf_dist = df_dist.rename(columns={\"NAME_2\":\"district\"})\ndf_dist","b41a5f10":"df_dist[\"district\"][df_dist[\"district\"] == \"Ahmadabad\"] = \"Ahmedabad\"\ndf_dist[\"district\"][df_dist[\"district\"] == \"Ahmadnagar\"] = \"Ahmednagar\"\n\ndf_zones[\"district\"][df_zones[\"district\"] == \"Warangal Urban\"] = \"Warangal\"\ndf_zones = df_zones[df_zones[\"district\"] != \"Warangal Rural\"]","46a0cd85":"df_zones.drop([\"lastupdated\",\"source\",\"state\",\"statecode\",\"districtcode\"],axis=1,inplace=True)","f680bc90":"df_distzones = df_dist.set_index(\"district\").join(df_zones.set_index(\"district\"))\ndf_distzones","c6ed087f":"from matplotlib.colors import LinearSegmentedColormap\ncmap = [(0,1,0),(1,0.65,0),(1,0,0)]\ncmap = LinearSegmentedColormap.from_list(\"zones\",cmap)\n","dfb3f762":"df_distzones = df_distzones.fillna(\"Orange\")\nfig = df_distzones.plot(column=\"zone\", cmap=cmap, linewidth=0.8,figsize=(15,15), edgecolor='0.8', legend=True)\nfig.axis(\"off\")\nfig.set_title(\"Coronavirus Pandemic zones in India(Maps of some zones are not available as per the zone, hence such places are filled Orange)\")","ef2f814d":"df_age = pd.read_csv(\"..\/input\/covid19-in-india\/AgeGroupDetails.csv\")\n\nfig = px.bar(df_age,x = \"AgeGroup\",y=\"TotalCases\",title=\"Distribution of Covid-19 cases by age group\")\nfig.show()","8fc38411":"fig = px.pie(df_age, values=\"TotalCases\", names=\"AgeGroup\", title=\"Distribution of Covid-19 by age in India\", template=\"seaborn\")\nfig.update_traces(rotation=90, pull=0.05, textinfo=\"percent+label\")\nfig.show()","b598dfba":"df_pat = pd.read_csv(\"..\/input\/covid19-corona-virus-india-dataset\/patients_data.csv\")\ndf_pat = df_pat[[\"gender\",\"current_status\"]]\ndf_pat = df_pat.dropna()\n#df_pat.index = range(len(df_pat))\ndf_pat","5f1c0021":"m_pat = (df_pat[\"gender\"] == \"M\").sum()\nf_pat = (df_pat[\"gender\"] == \"F\").sum()\n\nfig = go.Figure(data=[\n    go.Bar(name='Male', x=[\"Count\"], y=[m_pat]),\n    go.Bar(name='Female', x=[\"Count\"], y=[f_pat])\n])\n# Change the bar mode\nfig.update_layout(barmode='group')\nfig.show()","dbd987c9":"m = df_pat[\"gender\"] == \"M\"\nf = df_pat[\"gender\"] == \"F\"\nm_hosp = (df_pat[\"current_status\"][m] == \"Hospitalized\").sum()\nf_hosp = (df_pat[\"current_status\"][f] == \"Hospitalized\").sum()\nm_dec = (df_pat[\"current_status\"][m] == \"Deceased\").sum()\nf_dec = (df_pat[\"current_status\"][f] == \"Deceased\").sum()\nm_rec = (df_pat[\"current_status\"][m] == \"Recovered\").sum()\nf_rec = (df_pat[\"current_status\"][f] == \"Recovered\").sum()\n\nfig = go.Figure(data=[\n    go.Bar(name='Male', x=[\"Hospitalized\",\"Deceased\",\"Recovered\"], y=[m_hosp,m_dec,m_rec]),\n    go.Bar(name='Female', x=[\"Hospitalized\",\"Deceased\",\"Recovered\"], y=[f_hosp,f_dec,f_rec])\n])\n# Change the bar mode\nfig.update_layout(barmode='group',title=\"Distribution of patient state by gender(Patient with not known gender not included)\")\nfig.show()","548c52a8":"import statsmodels.api as sm\nfrom fbprophet import Prophet\nfrom fbprophet.plot import plot_plotly\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\nfrom sklearn.neural_network import MLPRegressor\nfrom datetime import timedelta","22ace03c":"x = np.arange(len(df_cov_ind)).reshape(-1,1)\ny = df_cov_ind[\"Confirmed\"].values","10a5cfb7":"mlp_model1 = MLPRegressor(hidden_layer_sizes=[32, 32, 10], max_iter=50000, alpha=0.0005, random_state=26)\nmlp_model1.fit(x, y)","de09f48b":"pred = mlp_model1.predict(x)\n\nfig = go.Figure(data = [go.Scatter(x = df_cov_ind[\"ObservationDate\"], y = pred, mode=\"lines+markers\", name = \"Predicted\"),\n               go.Scatter(x = df_cov_ind[\"ObservationDate\"], y = y, mode=\"lines+markers\", name = \"Actual\")])\nfig.update_layout(title = \"Predicted values vs Actual values\")\nfig.show()","f460ea19":"df_cov_ind[\"ObservationDate\"] = pd.to_datetime(df_cov_ind[\"ObservationDate\"])","c5057678":"fut_pred = mlp_model1.predict(np.arange(len(df_cov_ind),len(df_cov_ind)+90).reshape(-1,1))\nfut_time = [df_cov_ind[\"ObservationDate\"].iloc[-1] + timedelta(days=i) for i in range(1,len(fut_pred))]\n\nfig = go.Figure(data=go.Scatter(x=fut_time, y=fut_pred, mode=\"lines+markers\"))\nfig.update_layout(title=\"Forecast 3 months\")\nfig.show()","9b25ca50":"x = np.arange(len(df_cov_ind)).reshape(-1,1)\ny = df_cov_ind[\"Deaths\"].values","14af65f7":"mlp_model2 = MLPRegressor(hidden_layer_sizes=[32, 32, 10], max_iter=50000, alpha=0.0005, random_state=26)\nmlp_model2.fit(x, y)","8e47a6b4":"pred = mlp_model2.predict(x)\n\nfig = go.Figure(data = [go.Scatter(x = df_cov_ind[\"ObservationDate\"], y = pred, mode=\"lines+markers\", name = \"Predicted\"),\n               go.Scatter(x = df_cov_ind[\"ObservationDate\"], y = y, mode=\"lines+markers\", name = \"Actual\")])\nfig.update_layout(title = \"Predicted values vs Actual values\")\nfig.show()","62efe54e":"fut_pred = mlp_model2.predict(np.arange(len(df_cov_ind),len(df_cov_ind)+90).reshape(-1,1))\nfut_time = [df_cov_ind[\"ObservationDate\"].iloc[-1] + timedelta(days=i) for i in range(1,len(fut_pred))]\n\nfig = go.Figure(data=go.Scatter(x=fut_time, y=fut_pred, mode=\"lines+markers\"))\nfig.update_layout(title=\"Forecast 3 months\")\nfig.show()","28cd6258":"x = np.arange(len(df_cov_ind)).reshape(-1,1)\ny = df_cov_ind[\"Recovered\"].values","99fd9036":"mlp_model3 = MLPRegressor(hidden_layer_sizes=[32, 32, 10], max_iter=50000, alpha=0.0005, random_state=26)\nmlp_model3.fit(x, y)","3290c21d":"pred = mlp_model3.predict(x)\n\nfig = go.Figure(data = [go.Scatter(x = df_cov_ind[\"ObservationDate\"], y = pred, mode=\"lines+markers\", name = \"Predicted\"),\n               go.Scatter(x = df_cov_ind[\"ObservationDate\"], y = y, mode=\"lines+markers\", name = \"Actual\")])\nfig.update_layout(title = \"Predicted values vs Actual values\")\nfig.show()","4b227471":"fut_pred = mlp_model3.predict(np.arange(len(df_cov_ind),len(df_cov_ind)+90).reshape(-1,1))\nfut_time = [df_cov_ind[\"ObservationDate\"].iloc[-1] + timedelta(days=i) for i in range(1,len(fut_pred))]\n\nfig = go.Figure(data=go.Scatter(x=fut_time, y=fut_pred, mode=\"lines+markers\"))\nfig.update_layout(title=\"Forecast 3 months\")\nfig.show()","a176745a":"pr_data= pd.DataFrame()\npr_data[\"ds\"] = df_cov_ind[\"ObservationDate\"]\npr_data[\"y\"] = df_cov_ind[\"Confirmed\"]\npr_data.index = range(len(pr_data))\npr_data.head()","852e9770":"pr_data['y'] = np.log(pr_data['y'] + 1)\nm1=Prophet()\nm1.fit(pr_data)","45e7d81d":"# compare actual vs predicted\npred_date = pd.DataFrame(df_cov_ind[\"ObservationDate\"])\npred_date.columns = ['ds']\npred = m1.predict(pred_date)\npred['yhat'] = np.exp(pred['yhat']) - 1\n\n\nfig = go.Figure(data = [go.Scatter(x = df_cov_ind[\"ObservationDate\"], y = pred.yhat, mode=\"lines+markers\", name = \"Predicted\"),\n               go.Scatter(x = df_cov_ind[\"ObservationDate\"], y = df_cov_ind[\"Confirmed\"], mode=\"lines+markers\", name = \"Actual\")])\nfig.update_layout(title = \"Predicted values vs Actual values\")\nfig.show()","cb4bf5de":"future=pd.DataFrame([df_cov_ind[\"ObservationDate\"].iloc[-1] + timedelta(i+1) for i in range(120)])\nfuture.columns = ['ds']\nforecast=m1.predict(future)\nforecast['yhat'] = np.exp(forecast['yhat']) - 1\n\nfig = go.Figure(data=go.Scatter(x=future[\"ds\"], y=forecast.yhat, mode=\"lines+markers\"))\nfig.update_layout(title=\"Forecast 4 months\")\nfig.show()","4545063b":"pr_data= pd.DataFrame()\npr_data[\"ds\"] = df_cov_ind[\"ObservationDate\"]\npr_data[\"y\"] = df_cov_ind[\"Deaths\"]\npr_data.index = range(len(pr_data))\npr_data.head()","6e145033":"pr_data['y'] = np.log(pr_data['y'] + 1)\nm2=Prophet()\nm2.fit(pr_data)","059ad492":"pred_date = pd.DataFrame(df_cov_ind[\"ObservationDate\"])\npred_date.columns = ['ds']\npred = m2.predict(pred_date)\npred['yhat'] = np.exp(pred['yhat']) - 1\n\n\nfig = go.Figure(data = [go.Scatter(x = df_cov_ind[\"ObservationDate\"], y = pred.yhat, mode=\"lines+markers\", name = \"Predicted\"),\n               go.Scatter(x = df_cov_ind[\"ObservationDate\"], y = df_cov_ind[\"Deaths\"], mode=\"lines+markers\", name = \"Actual\")])\nfig.update_layout(title = \"Predicted values vs Actual values\")\nfig.show()","a9e43d1d":"future=pd.DataFrame([df_cov_ind[\"ObservationDate\"].iloc[-1] + timedelta(i+1) for i in range(120)])\nfuture.columns = ['ds']\nforecast=m2.predict(future)\nforecast['yhat'] = np.exp(forecast['yhat']) - 1\n\nfig = go.Figure(data=go.Scatter(x=future[\"ds\"], y=forecast.yhat, mode=\"lines+markers\"))\nfig.update_layout(title=\"Forecast 4 months\")\nfig.show()","c14bb624":"pr_data= pd.DataFrame()\npr_data[\"ds\"] = df_cov_ind[\"ObservationDate\"]\npr_data[\"y\"] = df_cov_ind[\"Recovered\"]\npr_data.index = range(len(pr_data))\npr_data.head()","fde2d6a8":"pr_data['y'] = np.log(pr_data['y'] + 1)\nm3=Prophet()\nm3.fit(pr_data)","e20a382b":"pred_date = pd.DataFrame(df_cov_ind[\"ObservationDate\"])\npred_date.columns = ['ds']\npred = m3.predict(pred_date)\npred['yhat'] = np.exp(pred['yhat']) - 1\n\n\nfig = go.Figure(data = [go.Scatter(x = df_cov_ind[\"ObservationDate\"], y = pred.yhat, mode=\"lines+markers\", name = \"Predicted\"),\n               go.Scatter(x = df_cov_ind[\"ObservationDate\"], y = df_cov_ind[\"Recovered\"], mode=\"lines+markers\", name = \"Actual\")])\nfig.update_layout(title = \"Predicted values vs Actual values\")\nfig.show()","7bfe14b1":"future=pd.DataFrame([df_cov_ind[\"ObservationDate\"].iloc[-1] + timedelta(i+1) for i in range(120)])\nfuture.columns = ['ds']\nforecast=m3.predict(future)\nforecast['yhat'] = np.exp(forecast['yhat']) - 1\n\nfig = go.Figure(data=go.Scatter(x=future[\"ds\"], y=forecast.yhat, mode=\"lines+markers\"))\nfig.update_layout(title=\"Forecast 4 months\")\nfig.show()","fb28ddc4":"arima_data = pd.DataFrame()\narima_data[\"confirmed_data\"] = df_cov_ind[\"ObservationDate\"]\narima_data[\"count\"] = df_cov_ind[\"Confirmed\"]\narima_data.index = range(len(arima_data))\narima_data.head()","6ab909f7":"!pip install pmdarima","6ff9bf2e":"from pmdarima import auto_arima\n\nstepwise_fit = auto_arima(arima_data['count'], start_p = 1, start_q = 1, \n                          max_p = 3, max_q = 3, m = 12, \n                          start_P = 0, seasonal = True, \n                          d = None, D = 1, trace = True, \n                          error_action ='ignore',    \n                          suppress_warnings = True,  \n                          stepwise = True)           \nstepwise_fit.summary()","565cb5ba":"model1= SARIMAX(arima_data['count'],order=(1,2,2),seasonal_order=(1,1,1,12)) #Change the model as per the result of above as the dataset is updated\nfit_model1 = model1.fit(full_output=True, disp=True)\nfit_model1.summary()","c82747f9":"pred = fit_model1.predict(0,len(arima_data)-1)\n\nfig = go.Figure(data = [go.Scatter(x = df_cov_ind[\"ObservationDate\"], y = pred, mode=\"lines+markers\", name = \"Predicted\"),\n               go.Scatter(x = df_cov_ind[\"ObservationDate\"], y = df_cov_ind[\"Confirmed\"], mode=\"lines+markers\", name = \"Actual\")])\nfig.update_layout(title = \"Predicted values vs Actual values\")\nfig.show()","df88aa8f":"forecast = fit_model1.forecast(steps=90)\nfig = go.Figure(data=go.Scatter(x=fut_time, y=forecast, mode=\"lines+markers\"))\nfig.update_layout(title=\"Forecast 3 months\")\nfig.show()","7d101220":"arima_data = pd.DataFrame()\narima_data[\"confirmed_data\"] = df_cov_ind[\"ObservationDate\"]\narima_data[\"count\"] = df_cov_ind[\"Deaths\"]\narima_data.index = range(len(arima_data))\narima_data.head()","8944dee8":"stepwise_fit = auto_arima(arima_data['count'], start_p = 1, start_q = 1, \n                          max_p = 3, max_q = 3, m = 12, \n                          start_P = 0, seasonal = True, \n                          d = None, D = 1, trace = True, \n                          error_action ='ignore',    \n                          suppress_warnings = True,  \n                          stepwise = True)           \nstepwise_fit.summary()","77c90f08":"model2= SARIMAX(arima_data['count'],order=(0,2,1),seasonal_order=(0,1,1,12)) #Change the model as per the result of above as the dataset is updated\nfit_model2 = model2.fit(full_output=True, disp=True)\nfit_model2.summary()","14159b83":"pred = fit_model2.predict(0,len(arima_data)-1)\n\nfig = go.Figure(data = [go.Scatter(x = df_cov_ind[\"ObservationDate\"], y = pred, mode=\"lines+markers\", name = \"Predicted\"),\n               go.Scatter(x = df_cov_ind[\"ObservationDate\"], y = df_cov_ind[\"Deaths\"], mode=\"lines+markers\", name = \"Actual\")])\nfig.update_layout(title = \"Predicted values vs Actual values\")\nfig.show()","f6c8f470":"forecast = fit_model2.forecast(steps=90)\nfig = go.Figure(data=go.Scatter(x=fut_time, y=forecast, mode=\"lines+markers\"))\nfig.update_layout(title=\"Forecast 3 months\")\nfig.show()","d48e4996":"arima_data = pd.DataFrame()\narima_data[\"confirmed_data\"] = df_cov_ind[\"ObservationDate\"]\narima_data[\"count\"] = df_cov_ind[\"Recovered\"]\narima_data.index = range(len(arima_data))\narima_data.head()","44ea5a10":"stepwise_fit = auto_arima(arima_data['count'], start_p = 1, start_q = 1, \n                          max_p = 3, max_q = 3, m = 12, \n                          start_P = 0, seasonal = True, \n                          d = None, D = 1, trace = True, \n                          error_action ='ignore',    \n                          suppress_warnings = True,  \n                          stepwise = True)           \nstepwise_fit.summary()","ad098cee":"model3= SARIMAX(arima_data['count'],order=(0,2,0),seasonal_order=(0,1,0,12)) #Change the model as per the result of above as the dataset is updated\nfit_model3 = model3.fit(full_output=True, disp=True)\nfit_model3.summary()","1af82d29":"pred = fit_model3.predict(0,len(arima_data)-1)\n\nfig = go.Figure(data = [go.Scatter(x = df_cov_ind[\"ObservationDate\"], y = pred, mode=\"lines+markers\", name = \"Predicted\"),\n               go.Scatter(x = df_cov_ind[\"ObservationDate\"], y = df_cov_ind[\"Recovered\"], mode=\"lines+markers\", name = \"Actual\")])\nfig.update_layout(title = \"Predicted values vs Actual values\")\nfig.show()","6a171118":"forecast = fit_model3.forecast(steps=90)\nfig = go.Figure(data=go.Scatter(x=fut_time, y=forecast, mode=\"lines+markers\"))\nfig.update_layout(title=\"Forecast 3 months\")\nfig.show()","0db6b070":"## Statewise analysis","d1de27cc":"![SegmentLocal](map.gif \"map\")\n","9ac2b9a1":"### iii. Recovered","62579143":"### iii. Recovered","b2abd007":"### Number of Active cases by State\/UT\n","83fd105c":"### ii. Deaths","cc871877":"## Distribution of cases by age","c5fca0cb":"## Genderwise distribution","02f600b7":"### Number of recovered by State\/UT","813aefa4":"## Statewise testing analysis","ce627fca":"## Prediction of the Pandemic","42c3d05d":"### Number of confirmed cases by State\/UT","c13d8f8b":"# Analysis and prediction of Covid-19 in India","7c6fbeeb":"### Using ARIMA","6594c125":"### i. Confirmed","6c0ecd13":"### Number of Deaths by State\/UT","0c9bce84":"### i. Confirmed","0dff5800":"### Comparison of Public Health Facilities by state","4bd1f571":"### i. Total cases","9feaeccd":"### ii. Deaths","50023375":"### Using Regressor models\n1) MLP Regressor","7fe57640":"### Using Prophet","75ad8f98":"## Spread of Covid-19 in India over time","7be77790":"### iii. Recovered","36b1be3f":"## Districtwise Covid-19 zones in India","2b666346":"### ii. Deaths"}}