{"cell_type":{"942d9cb9":"code","51899bc9":"code","b7d8afe8":"code","7970ef54":"code","c02f0d60":"code","56df76c9":"code","a5f19050":"code","49bd51a4":"code","e4d9114c":"code","4e833e1e":"code","22d8094e":"code","58b926c8":"code","7b5d2cce":"code","14299616":"code","1df2c11c":"markdown","86768af1":"markdown","ed9d041d":"markdown","e13f0d74":"markdown","1c7cd7c8":"markdown","d30bb75f":"markdown","4b3fe4f4":"markdown","c37458a1":"markdown"},"source":{"942d9cb9":"# Importing the libraries\nfrom sklearn.datasets import load_boston\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import LinearRegression\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')","51899bc9":"#load the boston housing data which is part of sklearn package.\ndf=load_boston()\n# Convert the dataset to DataFrame\ndataset=pd.DataFrame(df.data)\ndataset.columns=df.feature_names\n# Defining the target column\ndataset['Price']=df.target\n\n# Heatmap\ncorr_matirx=dataset.corr()\nplt.figure(figsize=(20,12))\nax = sns.heatmap(corr_matirx, annot = True, cmap=\"Set1\")\ntop, bottom = ax.get_ylim()\nax.set_ylim(top+0.5, bottom-0.5)","b7d8afe8":"# Splitting the data in to X and y\nX=dataset.iloc[:,:-1]\ny=dataset.iloc[:,-1]\n\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\n\n# checking for multicollinearity using `VIF` and `correlation matrix\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nvif = pd.DataFrame()\n\nvif['VIF'] = [variance_inflation_factor(X_scaled, i) for i in range(X_scaled.shape[1])]\nvif['Features'] = X.columns\nvif","7970ef54":"X=X.drop(columns = ['TAX'], axis = 1)","c02f0d60":"# splitting data into training asnd test set\nfrom sklearn.model_selection import train_test_split\nX_scaled = scaler.fit_transform(X)\nX_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size = 0.30, random_state = 0)","56df76c9":"# fitting training data to model\nfrom sklearn.linear_model import LinearRegression\nlr = LinearRegression()\nlr.fit(X_train, y_train)\n# prediction of model\ny_pred = lr.predict(X_test)\n# training accuracy of model\nprint(\"************************************************************************************\")\nprint(\"Predection of Accuracy on Train data--> \",lr.score(X_train, y_train))\nprint(\"************************************************************************************\")\nprint(\"Predection on Accuracy on Test data--> \",lr.score(X_test, y_test))\nprint(\"************************************************************************************\")","a5f19050":"# creating a function to create adhusted R-Squared\ndef adj_r2(X, y, model):\n    r2 = model.score(X, y)\n    n = X.shape[0]\n    p = X.shape[1]\n    adjusted_r2 = 1 - (1 - r2) * (n - 1) \/ (n - p - 1)    \n    return adjusted_r2\n\nprint(\"******************************************************************************\")  \nprint(\"adjusted R2 Value of Train is:- \",adj_r2(X_train, y_train, lr))\nprint(\"******************************************************************************\")\nprint(\"adjusted R2 value of Test is:- \",adj_r2(X_test, y_test, lr))\nprint(\"******************************************************************************\")","49bd51a4":"from sklearn.metrics import r2_score,mean_squared_error\n# calculate Mean square error\nmse = mean_squared_error(y_test,y_pred)\n# Calculate R square vale\nrsq = r2_score(y_test,y_pred)\nprint(\"************************************************************\")\nprint('mean squared error for test data :',mse)\nprint('R Square for test data :',rsq)\nprint(\"************************************************************\")","e4d9114c":"# Intecept and coeff of the line\nprint('Intercept of the model(C):',lr.intercept_)\nprint('Coefficient of the line:',lr.coef_)","4e833e1e":"# Plotting the actual and predicted values\nf = plt.figure(figsize=(10,5))\nc = [i for i in range (1,len(y_test)+1,1)]\nplt.plot(c,y_test,color='r',linestyle='-')\nplt.plot(c,y_pred,color='b',linestyle='-')\nplt.xlabel('Price')\nplt.ylabel('index')\nplt.title('Prediction')\nplt.show()","22d8094e":"# plotting the error\nf = plt.figure(figsize=(10,5))\nc = [i for i in range(1,len(y_test)+1,1)]\nplt.plot(c,y_test-y_pred,color='green',linestyle='-')\nplt.xlabel('index')\nplt.ylabel('Error')\nplt.title('Error Value')\nplt.show()","58b926c8":"from sklearn.linear_model import Ridge\nfrom sklearn.model_selection import GridSearchCV\n\nridge=Ridge()\nparameters={'alpha':[1e-15,1e-10,1e-8,1e-3,1e-2,1,5,10,20,30,35,40,45,50,55,100]}\nridge_regressor=GridSearchCV(ridge,parameters,scoring='neg_mean_squared_error',cv=5)\nridge_regressor.fit(X_train,y_train)\n\nprint(\"******************************************************************************\")\nprint(\"Best alpha Value to be used for Ridge Regression:- \",ridge_regressor.best_params_)\nprint(\"Minimum MSE achived on the data is:- \",ridge_regressor.best_score_)\nprint(\"******************************************************************************\")\n\nrd = Ridge(alpha=0.01, solver='auto', random_state=42)\nrd.fit(X_train, y_train)\ny_pred = rd.predict(X_test)\n\nprint(\"Adjusted R2 Value of Train is:-\",adj_r2(X_train, y_train, rd))\nprint(\"******************************************************************************\")\nprint(\"R2 Value of Test is:-          \",r2_score(y_test, y_pred))\nprint(\"Adjusted R2 value of Test is:- \",adj_r2(X_test, y_test, rd))\nprint(\"Accuracy of Test prediction:-  \",rd.score(X_test, y_test))\nprint(\"******************************************************************************\")","7b5d2cce":"from sklearn.linear_model import Lasso\nfrom sklearn.model_selection import GridSearchCV\n\nlasso=Lasso()\nparameters={'alpha':[1e-15,1e-10,1e-8,1e-3,1e-2,1,5,10,20,30,35,40,45,50,55,100]}\nlasso_regressor=GridSearchCV(lasso,parameters,scoring='neg_mean_squared_error',cv=5)\nlasso_regressor.fit(X_train,y_train)\n\nprint(\"******************************************************************************\")\nprint(\"Best alpha Value to be used for Lasso Regression:- \",lasso_regressor.best_params_)\nprint(\"Minimum MSE achived on the data is:- \",lasso_regressor.best_score_)\nprint(\"******************************************************************************\")\n\nlas = Lasso(alpha=0.001, random_state=42)\nlas.fit(X_train, y_train)\ny_pred = las.predict(X_test)\n\nprint(\"Adjusted R2 Value of Train is:-\",adj_r2(X_train, y_train, las))\nprint(\"******************************************************************************\")\nprint(\"R2 Value of Test is:-          \",r2_score(y_test, y_pred))\nprint(\"Adjusted R2 value of Test is:- \",adj_r2(X_test, y_test, las))\nprint(\"Accuracy of Test prediction:-  \",las.score(X_test, y_test))\nprint(\"******************************************************************************\")","14299616":"from sklearn.linear_model import ElasticNet\nfrom sklearn.model_selection import GridSearchCV\n\nelastic=ElasticNet()\nparameters={'alpha':[1e-15,1e-10,1e-8,1e-3,1e-2,1,5,10,20,30,35,40,45,50,55,100]}\nelastic_regressor=GridSearchCV(elastic,parameters,scoring='neg_mean_squared_error',cv=5)\nelastic_regressor.fit(X_train,y_train)\n\nprint(\"******************************************************************************\")\nprint(\"Best alpha Value to be used for Elastic net:- \",elastic_regressor.best_params_)\nprint(\"Minimum MSE achived on the data is:- \",elastic_regressor.best_score_)\nprint(\"******************************************************************************\")\n\nela = ElasticNet(alpha=0.001, random_state=42)\nela.fit(X_train, y_train)\ny_pred = ela.predict(X_test)\n\nprint(\"Adjusted R2 Value of Train is:-\",adj_r2(X_train, y_train, ela))\nprint(\"******************************************************************************\")\nprint(\"R2 Value of Test is:-          \",r2_score(y_test, y_pred))\nprint(\"Adjusted R2 value of Test is:- \",adj_r2(X_test, y_test, ela))\nprint(\"Accuracy of Test prediction:-  \",ela.score(X_test, y_test))\nprint(\"******************************************************************************\")","1df2c11c":"## <b> Splitting and Scaling the dataset","86768af1":"## <b> METHOD 01:- CALCULATING ADJUSTED R2 VALUE USING SIMPLE LINEAR REGRESSION","ed9d041d":"## <b> METHOD 04:- With LASSO","e13f0d74":"## <b> METHOD 02:- With RIDGE REGRESSION","1c7cd7c8":"## <b> Loading Data set<\/b>","d30bb75f":"## <b> Loading Libraries<\/b>","4b3fe4f4":"## Dropping the column which has VIF greater than 5","c37458a1":"## <b> METHOD 04:- With ELASTIC NET"}}