{"cell_type":{"c0b52cf0":"code","4cf5f934":"code","e98ca957":"code","4d21e059":"code","73408689":"code","5dc00037":"code","0aa87620":"code","b92f3931":"code","71135e74":"code","26d9b9d1":"code","3b681b7f":"code","ca99069e":"code","2f447ae3":"code","e96be6f1":"code","62745227":"code","432dd5e0":"code","29a866b6":"code","7869820d":"code","cfef2083":"code","6373b9da":"code","496f97f7":"code","db17d369":"code","8b5cc092":"code","f941eb53":"code","663ad795":"code","22cc81fc":"code","3c751ad1":"code","e2e6834a":"code","8ac0e5cb":"code","c42cffb6":"code","e54c9b6e":"code","3f0c526b":"code","3ee92e0a":"code","4d2307fa":"code","e03ec302":"code","a69c67e1":"code","308f7fde":"code","834faee3":"code","e2f64c89":"code","69cb0775":"code","b0fca118":"code","77ac5b1b":"code","e9fc37ed":"code","360e18be":"code","8a814db8":"code","dce260c2":"code","6df5fd6a":"code","98f9f47f":"code","3fb1f28e":"code","c2908519":"code","7a9417b7":"code","9dee0ae1":"code","7beb57c3":"code","b561fc46":"code","b5605cb5":"code","0638f569":"code","fb76ac65":"code","8f18b635":"markdown","9b27fa92":"markdown","b8ae6675":"markdown","477a56d3":"markdown","1e8dd571":"markdown","bb8d1855":"markdown","1db448f2":"markdown","c7d92beb":"markdown","ced57b61":"markdown","1c9a5455":"markdown","ead6168d":"markdown","b0ec546f":"markdown","c5defc86":"markdown","6cf14c9f":"markdown","d8dbe075":"markdown","9598eef6":"markdown","e341cba9":"markdown","9e8d3973":"markdown","8c0d1538":"markdown","93af5dcb":"markdown","6e2f6834":"markdown","baad70aa":"markdown","2907e4e8":"markdown","6a196f2d":"markdown","083097a7":"markdown","d5b18461":"markdown","6cdccb56":"markdown","1ff4e9c6":"markdown","f4e53a45":"markdown","ddb10ebb":"markdown","b77ef8fd":"markdown","733eaba2":"markdown","33f030f3":"markdown","0979d234":"markdown","9cbd9a0f":"markdown","d17abeee":"markdown","34808cef":"markdown","b8ff7b5c":"markdown","47bef69c":"markdown","8bb201be":"markdown"},"source":{"c0b52cf0":"import pandas as pd\nimport numpy as np\n\nfrom sklearn.preprocessing import OneHotEncoder\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport xgboost as xgb\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn import linear_model\nfrom scipy.stats import uniform, randint\nfrom sklearn.metrics import auc, accuracy_score, confusion_matrix, mean_squared_error\nfrom sklearn.model_selection import cross_val_score, GridSearchCV, KFold, RandomizedSearchCV, train_test_split\n\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\npd.set_option(\"display.max_columns\", None)\npd.set_option(\"display.max_rows\", 160)","4cf5f934":"listings = pd.read_csv('..\/input\/listings.csv')\nlistings.head(2)","e98ca957":"# listings_data = listings[listings_useful_cols]\nlistings_data = listings.copy(deep=True)","4d21e059":"# typecastign all dates\nlistings_data['host_since'] = pd.to_datetime(listings_data['host_since'])\nlistings_data['first_review'] = pd.to_datetime(listings_data['first_review'])\nlistings_data['last_review'] = pd.to_datetime(listings_data['last_review'])\n","73408689":"#convert percentages to numeric from range 0 to 1\n\nlistings_data['host_response_rate'] = pd.to_numeric(listings_data['host_response_rate'].apply(lambda x: str(x)\n                                                                                              .replace('%', '')\n                                                                                              .replace('N\/A', '')),\n                                                    errors='coerce')\/100\n\nlistings_data['host_acceptance_rate'] = pd.to_numeric(listings_data['host_acceptance_rate'].apply(lambda x: str(x)\n                                                                                              .replace('%', '')\n                                                                                              .replace('N\/A', '')),\n                                                    errors='coerce')\/100\n\n","5dc00037":"# convert currency to numeric\n\nlistings_data['price'] = pd.to_numeric(listings_data['price'].apply(lambda x: str(x)\n                                                                    .replace('$', '')\n                                                                    .replace(',', '')),\n                                                    errors='coerce')\n\n\nlistings_data['weekly_price'] = pd.to_numeric(listings_data['weekly_price'].apply(lambda x: str(x)\n                                                                    .replace('$', '')\n                                                                    .replace(',', '')),\n                                                    errors='coerce')\n\n\nlistings_data['monthly_price'] = pd.to_numeric(listings_data['monthly_price'].apply(lambda x: str(x)\n                                                                    .replace('$', '')\n                                                                    .replace(',', '')),\n                                                    errors='coerce')\n\nlistings_data['security_deposit'] = pd.to_numeric(listings_data['security_deposit'].apply(lambda x: str(x)\n                                                                    .replace('$', '')\n                                                                    .replace(',', '')),\n                                                    errors='coerce')\n\nlistings_data['cleaning_fee'] = pd.to_numeric(listings_data['cleaning_fee'].apply(lambda x: str(x)\n                                                                    .replace('$', '')\n                                                                    .replace(',', '')),\n                                                    errors='coerce')\n\nlistings_data['extra_people'] = pd.to_numeric(listings_data['extra_people'].apply(lambda x: str(x)\n                                                                    .replace('$', '')\n                                                                    .replace(',', '')),\n                                                    errors='coerce')\n\n","0aa87620":"# normalize review score to fit to value between 0 to 1\nlistings_data['review_scores_rating'] = pd.to_numeric(listings_data['review_scores_rating'], errors='coerce')\/100\nlistings_data['review_scores_accuracy'] = pd.to_numeric(listings_data['review_scores_accuracy'], errors='coerce')\/10\nlistings_data['review_scores_cleanliness'] = pd.to_numeric(listings_data['review_scores_cleanliness'], errors='coerce')\/10\nlistings_data['review_scores_checkin'] = pd.to_numeric(listings_data['review_scores_checkin'], errors='coerce')\/10\nlistings_data['review_scores_communication'] = pd.to_numeric(listings_data['review_scores_communication'], errors='coerce')\/10\nlistings_data['review_scores_location'] = pd.to_numeric(listings_data['review_scores_location'], errors='coerce')\/10\nlistings_data['review_scores_value'] = pd.to_numeric(listings_data['review_scores_value'], errors='coerce')\/10\n","b92f3931":"# convert true\/false to codes\ncleanup_colval = {\n    'host_is_superhost' : {'f':0, 't':1},\n    'host_identity_verified': {'f':0, 't':1},\n    'is_location_exact': {'f':0, 't':1},\n    'instant_bookable': {'f':0, 't':1},\n    'require_guest_profile_picture': {'f':0, 't':1},\n    'require_guest_phone_verification': {'f':0, 't':1},\n    'host_has_profile_pic': {'f':0, 't':1}\n}\n\nlistings_data.replace(cleanup_colval, inplace=True)\n","71135e74":"# host name, is_superhost are non-existent for only 2 rows, so we can remove them \n\nlistings_data = listings_data.dropna(subset=['host_is_superhost'])\n\n# property_type has one missing value, so drop it\n\nlistings_data = listings_data.dropna(subset=['property_type'])","26d9b9d1":"listings_data['host_is_superhost'] = listings_data['host_is_superhost'].astype(int).astype('category')\nlistings_data['host_identity_verified'] = listings_data['host_identity_verified'].astype(int).astype('category')\nlistings_data['is_location_exact'] = listings_data['is_location_exact'].astype(int).astype('category')\nlistings_data['instant_bookable'] = listings_data['instant_bookable'].astype(int)\nlistings_data['require_guest_profile_picture'] = listings_data['require_guest_profile_picture'].astype(int).astype('category')\nlistings_data['require_guest_phone_verification'] = listings_data['require_guest_phone_verification'].astype(int).astype('category')\nlistings_data['host_has_profile_pic'] = listings_data['host_has_profile_pic'].astype(int).astype('category')","3b681b7f":"def changeTime(x):\n    '''\n    change host_response_time columns from string into numerical.\n    '''\n    if x == 'within an hour':\n        x='1'\n    elif x == 'within a few hours':\n        x='4'\n    elif x == 'within a day':\n        x='24'\n    elif x == 'a few days or more':\n        x='48'\n    elif x == np.nan:\n        np.nan\n    else:\n        x='96'\n        \n    return x\n\n\ndef changeStr(x):\n    '''\n    change back the host_response_time from the numerical into strings\n    '''\n    if x == 1:\n        x='within an hour'\n    elif x == 4:\n        x='within a few hours'\n    elif x == 24:\n        x='within a day'\n    elif x == 48:\n        x= 'a few days or more'\n    elif x == 96:\n        x= 'No Response'\n        \n    return x","ca99069e":"listings_data['host_response_time'] = listings_data['host_response_time'].apply(changeTime).astype(int)","2f447ae3":"listings_data['amenities'] = listings_data['amenities'].apply(lambda x: x.replace('{','')\n                                                              .replace('}','')\n                                                              .replace('\"','')\n                                                              .replace(' ','_')\n                                                              .replace(',',' ')\n                                                              .split()\n                                                             )\n","e96be6f1":"# find unique ameneties\namenities_list = []\nfor val in listings_data['amenities']:\n    for item in val:\n        item_to_append = 'has_'+item\n        if item_to_append not in amenities_list:\n            amenities_list.append(item_to_append)\n            ","62745227":"# add new columns for each item in amenities list\nlistings_data = listings_data.assign(**dict.fromkeys(amenities_list, np.nan))\n","432dd5e0":"# Fill in cell value with 1 if the property has a particular amenity, else 0\n\nfor index, row in listings_data.iterrows():\n    for amenity in amenities_list:\n        if amenity[4:] in row['amenities']:\n            listings_data.loc[index, amenity] = 1\n        else:\n            listings_data.loc[index, amenity] = 0\n","29a866b6":"listings_data['host_verifications'] = listings_data['host_verifications'].apply(lambda x: x.replace('[','')\n                                                              .replace(']','')\n                                                              .replace(\"'\",'')\n                                                              .replace(',','')\n                                                              .split()\n                                                             )","7869820d":"verification_list = []\nfor val in listings_data['host_verifications']:\n    for item in val:\n        item_to_append = 'verified_'+item\n        if item_to_append not in verification_list:\n            verification_list.append(item_to_append)\n            \nprint(verification_list)","cfef2083":"listings_data = listings_data.assign(**dict.fromkeys(verification_list, np.nan))","6373b9da":"# Fill in cell value with 1 if the host verification was done, else 0\n\nfor index, row in listings_data.iterrows():\n    for _ in verification_list:\n        if _[9:] in row['host_verifications']:\n            listings_data.loc[index, _] = 1\n        else:\n            listings_data.loc[index, _] = 0","496f97f7":"listings_data['security_deposit'] = listings_data['security_deposit'].fillna(0)\nlistings_data['cleaning_fee'] = listings_data['cleaning_fee'].fillna(0)","db17d369":"# imputing missing values in beds column\navg_beds_per_person = (listings_data['beds'] \/ listings_data['accommodates']).mean()\nprint(avg_beds_per_person)\nfillna_val = listings_data['accommodates']*avg_beds_per_person\nlistings_data['beds'] = listings_data['beds'].fillna(fillna_val).astype(int)\nprint(listings_data['beds'].isnull().sum())","8b5cc092":"# imputing missing values in bathrooms column\navg_bathrooms_per_person = (listings_data['bathrooms'] \/ listings_data['accommodates']).mean()\n# print(avg_bathrooms_per_person)\nfillna_val = listings_data['accommodates']*avg_bathrooms_per_person\nlistings_data['bathrooms'] = listings_data['bathrooms'].fillna(fillna_val).astype(int)\nprint(listings_data['bathrooms'].isnull().sum())","f941eb53":"# imputing missing values in bedrooms column\navg_bedrooms_per_person = (listings_data['bedrooms'] \/ listings_data['accommodates']).mean()\n# print(avg_bedrooms_per_person)\nfillna_val = listings_data['accommodates']*avg_bedrooms_per_person\nlistings_data['bedrooms'] = listings_data['bedrooms'].fillna(fillna_val).astype(int)\nprint(listings_data['bedrooms'].isnull().sum())","663ad795":"listings_data.head(2)","22cc81fc":"# listings_data.to_csv('.\/listings_cleaned_transformed.csv')","3c751ad1":"relevant_features = ['neighbourhood_cleansed', 'property_type', 'room_type', 'accommodates', 'bathrooms', \n                    'bedrooms', 'beds', 'bed_type', 'square_feet', 'price', 'guests_included',\n                    'instant_bookable', 'cancellation_policy']","e2e6834a":"# add amenities to the list of features\nrelevant_features.extend(amenities_list)\nprint(relevant_features)","8ac0e5cb":"price_predictions_df = listings_data[relevant_features]\nprice_predictions_df.head(2)","c42cffb6":"for column in price_predictions_df.columns:\n    print(\"% of null values for column \", column, \" = \", 100*price_predictions_df[column].isnull().sum()\/price_predictions_df.shape[0], '%')","e54c9b6e":"# histogram of price of listing\nplt.figure(figsize=(15,5))\nplt.hist(price_predictions_df['price'], bins=20)\nplt.xticks(np.arange(0, 1700, step=100))\nplt.ylabel('Number of listings')\nplt.xlabel('Price, $')\nplt.title('Number of listings depending on price')\n\n\n# plt.savefig('Price distrubution.png')\n\nplt.show()","3f0c526b":"plt.figure(figsize=(15,5))\nax = sns.countplot(x=\"neighbourhood_cleansed\", \n                   data=price_predictions_df,\n                  order = price_predictions_df['neighbourhood_cleansed'].value_counts().index)","3ee92e0a":"price_predictions_df['neighbourhood_cleansed'].value_counts()[0:15]","4d2307fa":"plt.figure(figsize=(15,5))\nplt.xticks(rotation=30)\nax = sns.countplot(x=\"property_type\", \n                   data=price_predictions_df,\n                  order = price_predictions_df['property_type'].value_counts().index)\n","e03ec302":"plt.figure(figsize=(15,5))\nplt.xticks(rotation=30)\nax = sns.countplot(x=\"room_type\", \n                   data=price_predictions_df,\n                  order = price_predictions_df['room_type'].value_counts().index)\n","a69c67e1":"plt.figure(figsize=(18,5))\n\nplt.xticks(rotation=30)\nax = sns.barplot(x=\"property_type\", y=\"accommodates\", hue=\"room_type\", \n                 data=pd.DataFrame({'accommodates' : price_predictions_df.groupby(['property_type', 'room_type'])['accommodates'].agg('sum')}).reset_index())","308f7fde":"plt.figure(figsize=(18,5))\nplt.xticks(rotation=30)\nax = sns.barplot(x=\"property_type\", y=\"bathrooms\", hue=\"room_type\", \n                 data=price_predictions_df)","834faee3":" ax = sns.boxplot(x=\"room_type\", y=\"price\", data=price_predictions_df)","e2f64c89":"price_predictions_df = price_predictions_df.drop(['square_feet'], axis = 1)","69cb0775":"corr = price_predictions_df[['accommodates', 'bathrooms', 'bedrooms', 'beds', 'price', 'guests_included']].corr()\n# sns.heatmap(uniform_data)\n\ncorr.style.background_gradient(cmap='coolwarm')","b0fca118":"price_predictions_df.dtypes","77ac5b1b":"price_predictions_df = pd.get_dummies(price_predictions_df, columns = [\"neighbourhood_cleansed\"], prefix=\"ngrhd\")\nprice_predictions_df = pd.get_dummies(price_predictions_df, columns = [\"property_type\"], prefix=\"property_type\")\nprice_predictions_df = pd.get_dummies(price_predictions_df, columns = [\"room_type\"], prefix=\"room_type\")\nprice_predictions_df = pd.get_dummies(price_predictions_df, columns = [\"bed_type\"], prefix=\"bed_type\")\nprice_predictions_df = pd.get_dummies(price_predictions_df, columns = [\"cancellation_policy\"], prefix=\"cancellation_policy\")\n","e9fc37ed":"price_predictions_df.head(2)","360e18be":"trainX = price_predictions_df.drop(['price'] , axis = 1)\ntrainy = price_predictions_df['price']\nX_train, X_test, y_train, y_test = train_test_split(trainX, trainy, test_size = 0.2, random_state = 42)","8a814db8":"xgb_model = xgb.XGBRegressor()\n\nparams = {\n    \"colsample_bytree\": uniform(0.7, 0.3),\n    \"gamma\": uniform(0, 0.5),\n    \"learning_rate\": uniform(0.03, 0.3), # default 0.1 \n    \"max_depth\": randint(2, 6), # default 3\n    \"n_estimators\": randint(100, 150), # default 100\n    \"subsample\": uniform(0.6, 0.4)\n}\n\n","dce260c2":"search = RandomizedSearchCV(xgb_model, param_distributions=params, \n                            random_state=42, n_iter=200, \n                            cv=5, verbose=1, n_jobs=-1, return_train_score=True)\n\nsearch.fit(X_train, y_train, early_stopping_rounds = 10, eval_set=[(X_test, y_test)], eval_metric = 'rmse')\n","6df5fd6a":"def report_best_scores(results, n_top=3):\n    for i in range(1, n_top + 1):\n        candidates = np.flatnonzero(results['rank_test_score'] == i)\n        for candidate in candidates:\n            print(\"Model with rank: {0}\".format(i))\n            print(\"Mean validation score: {0:.3f} (std: {1:.3f})\".format(\n                  results['mean_test_score'][candidate],\n                  results['std_test_score'][candidate]))\n            print(\"Parameters: {0}\".format(results['params'][candidate]))\n            print(\"\")\n","98f9f47f":"# Top score from all the combinations of parameters produced by randomizedcv\nprint('Scoring on RMSE')\nreport_best_scores(search.cv_results_, 1)","3fb1f28e":"best_xgbregressor = search.best_estimator_","c2908519":"best_xgbregressor","7a9417b7":"plt.figure(figsize=(16, 6))\nax = sns.regplot(x=y_test, y=best_xgbregressor.predict(X_test), marker=\"+\")\nax.set(xlabel='Actual Price', ylabel='Predicted Price')","9dee0ae1":"\nprint(np.sqrt(mean_squared_error(y_test, best_xgbregressor.predict(X_test))))","7beb57c3":"# get feature importances from the model and show top 30\nheaders = [\"name\", \"score\"]\nvalues = sorted(zip(X_train.columns, best_xgbregressor.feature_importances_), key=lambda x: x[1] * -1)\nxgb_feature_importances = pd.DataFrame(values, columns = headers)\n\n#plot feature importances for top 15 features\nfeatures = xgb_feature_importances['name'][:15]\ny_pos = np.arange(len(features))\nscores = xgb_feature_importances['score'][:15]\n \nplt.figure(figsize=(16,5))\nplt.bar(y_pos, scores, align='center', alpha=0.5)\nplt.xticks(y_pos, features, rotation='vertical')\nplt.ylabel('Score')\nplt.xlabel('Features')\nplt.title('Feature importances (XGBoost)')\n\nplt.savefig('feature importances XGB.png')\n \nplt.show()","b561fc46":"kfold = KFold(n_splits=5, shuffle=True, random_state=42)\n\nscores = []\n\nfor train_index, test_index in kfold.split(X_train.values):   \n    X_tr, X_te = X_train.values[train_index], X_train.values[test_index]\n    y_tr, y_te = y_train.values[train_index], y_train.values[test_index]\n    mlp = MLPRegressor(hidden_layer_sizes=(13,13,13),max_iter=500, random_state =42, activation ='relu')\n    mlp.fit(X_tr, y_tr)\n    \n    y_cvpred = mlp.predict(X_te)\n    \n    scores.append(mean_squared_error(y_te, y_cvpred))\n    \n","b5605cb5":"print(np.sqrt(scores))","0638f569":"plt.figure(figsize=(16, 6))\nax = sns.regplot(x=y_test, y=mlp.predict(X_test), marker=\"+\")\nax.set(xlabel='Actual Price', ylabel='Predicted Price')","fb76ac65":"print(np.sqrt(mean_squared_error(y_test, mlp.predict(X_test))))","8f18b635":"### How many people in total do the listings accomodate?","9b27fa92":"* Most common properties are entire house and apartment","b8ae6675":"Number of beds is missing for one row. Number of people it can accomodate is not missing for any row.\nImpute it using the `avg number of beds per person * number of persons` this listing can accomodate\n\nSimilarly, impute number of `bathrooms` and `bedrooms`","477a56d3":"## Currency","1e8dd571":"## Select only relevant features for predicting the price","bb8d1855":"### Neural Network - Mean square error on Holdout set","1db448f2":"### What are the types of rooms and their count ?","c7d92beb":"## Deriving variables from amenities","ced57b61":"### How many bathrooms does each property type have?","1c9a5455":"### How does the price compare against the neighbourhood?","ead6168d":"## Typecasting to numeric","b0ec546f":"## Impute missing values for some features","c5defc86":"## Deriving individual values from host_verifications","6cf14c9f":"## Check for null values","d8dbe075":"### XGBoost - Mean square error on Holdout set","9598eef6":"## Boolean values Encoding","e341cba9":"### Predicted vs Actual plot ","9e8d3973":"## One-hot encoding of categorical variables","8c0d1538":"NULL values in square_feet is 97.5% so drop that column","93af5dcb":"* The price ranges of an entire apartment have a very high variance","6e2f6834":"too many values to show in neighbourhood","baad70aa":"By heuristics, the price of the listing would depend on the the attributes of the house only.\n\nFeatures to consider:\n* Amenities offered\n* Features of the house like number of beds, number of people it can accomodate etc\n* Location details (neighbourhood)","2907e4e8":"## Drop some NULL values","6a196f2d":"## Encoding a few string features","083097a7":"# **XGBoost has given a better performance, so choose XGBoost**\n\n","d5b18461":"## Neural Networks Regression with Cross Validation","6cdccb56":"### What is the price distribution ?","1ff4e9c6":"## Top 15 features that influence the price","f4e53a45":"### Top Neighbourhoods by count of listings","ddb10ebb":"## Normalizing Review Scores","b77ef8fd":"## Percentages","733eaba2":"## XGboost regression with hyperparameter searching","33f030f3":"## Dates","0979d234":"# Data Cleaning","9cbd9a0f":"# Given the attributes of a new listing and it's location, predict the price. The prediction can be used to give a suggestion for price to be set for new listings","d17abeee":"High correlation between:\n* number of beds is and number of people a house can accomodate\n* number of bedrroms and number of people a house can accomodate\n","34808cef":"### What are the types of properties and their count ?","b8ff7b5c":"## Train-test split\n\nThe objective here is to predict the price of a new home and show as a suggested price to a new listing, hence it is a regression problem and the target variable is the price","47bef69c":"As evident, most of the listings have a price tag between $50-400","8bb201be":"Conclusions from feature importance:\n* 6 out of top 15 important features are amenities, therefore amenities have a high impact on the price of listing\n* Cancellation policy and instant booking feature is not important for deciding the pricing"}}