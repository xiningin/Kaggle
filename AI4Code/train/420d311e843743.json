{"cell_type":{"24482e2c":"code","a50a42f2":"code","9cb1eaed":"code","9803eb8e":"code","06394d5b":"code","755e5b0f":"code","448e0b2c":"code","f24c8097":"code","0982052a":"code","fed13dd0":"code","3e0a0f37":"code","8c0e83e4":"code","44cb90ac":"code","66f2d722":"code","f51c4fa6":"code","c12f1b2f":"markdown","f709011e":"markdown","a04860e2":"markdown","464ebb5c":"markdown","e5eaf94c":"markdown","26e954e0":"markdown","42ccdad5":"markdown","b3c03588":"markdown","2ef3eaeb":"markdown","f5ec34f9":"markdown","6d44ad3c":"markdown","53cdc6f9":"markdown","20b76a10":"markdown","31c87065":"markdown","65a17ee9":"markdown","91433c60":"markdown","31ec417e":"markdown","fc0d9d55":"markdown","a54f50aa":"markdown","c535894d":"markdown","dc584564":"markdown","567abce7":"markdown"},"source":{"24482e2c":"!pip install -q quick-ml","a50a42f2":"import tensorflow as tf\nimport quick_ml","9cb1eaed":"from quick_ml.begin_tpu import define_tpu_strategy, get_training_dataset, get_validation_dataset, get_test_dataset","9803eb8e":"strategy, tpu = define_tpu_strategy()","06394d5b":"from kaggle_datasets import KaggleDatasets\n\nGCS_DS_PATH = KaggleDatasets().get_gcs_path('iucn-animal-dataset-tfrecords')","755e5b0f":"print(\"GCS_DS_PATH -> \", GCS_DS_PATH)","448e0b2c":"train_tfrec_path = '\/training.tfrecords'\n\nval_tfrec_path = '\/validation.tfrecords'","f24c8097":"EPOCHS = 5\n\nBATCH_SIZE = 16 * strategy.num_replicas_in_sync","0982052a":"# Number of Training Images \/\/ Batch_Size\n\nSTEPS_PER_EPOCH = 3628 \/\/ BATCH_SIZE\nprint(STEPS_PER_EPOCH)","fed13dd0":"dictionary_labeled = \"{'image' : tf.io.FixedLenFeature([], tf.string),'label' : tf.io.FixedLenFeature([], tf.int64)}\"\nIMAGE_SIZE = \"192,192\"\n\n\n\nfrom quick_ml.begin_tpu import get_labeled_tfrecord_format\nget_labeled_tfrecord_format(dictionary_labeled, IMAGE_SIZE)","3e0a0f37":"train_dataset = get_training_dataset(GCS_DS_PATH, train_tfrec_path, BATCH_SIZE)","8c0e83e4":"val_dataset = get_validation_dataset(GCS_DS_PATH, val_tfrec_path, BATCH_SIZE)","44cb90ac":"\nfrom quick_ml.load_models_quick import create_model","66f2d722":"with strategy.scope():\n    model = create_model(10, model_name = 'EfficientNetB1', classification_model = 'default', freeze = False, input_shape = [192,192,3], activation = 'softmax', weights = 'imagenet', optimizer = 'adam', loss = 'sparse_categorical_crossentropy', metrics = 'sparse_categorical_accuracy')","f51c4fa6":"model.fit(train_dataset, epochs = EPOCHS,validation_data = val_dataset, batch_size = BATCH_SIZE, steps_per_epoch = STEPS_PER_EPOCH)","c12f1b2f":"Please ensure the order of imports.\n\n* Import Tensorflow then quick_ml\n* After successful import, you must receive an output message indicating the status of \"Tensorflow import & the latest version\" supported by quick_ml","f709011e":"### III. Define necessary parameters","a04860e2":"### V. Model Training","464ebb5c":"define_tpu_strategy is used to instantiate the TPU strategy (if TPU present) & tpu instance (if TPU present). Learn more [here](https:\/\/www.quickml.info\/begin-working-w-tpu)","e5eaf94c":"Note:- Please mention the full name of the dataset as an argument in get_gcs_path() rather than leaving it empty. In presence of more than one dataset, it would cause conflict. However, in the presence of single dataset, it's a good practice to mention the full name of the dataset as an argument in the get_gcs_path().","26e954e0":"get_labeled_tfrecord_format is used to define the format of the TFRecords dataset to be used for model trianing. Learn more [here](https:\/\/www.quickml.info\/begin-working-w-tpu)","42ccdad5":"Once **GCS_DS_PATH** for the Labeled Dataset is obtained, the **val_tfrec_path** is mentioned & the **Batch Size** is defined along with the above step where we mentioned the labeled_tfrecord_format, we can begin loading the training datasets. Learn more by scrolling down to **get_validation_dataset** section under **Begin Working w\/ TPU page**.","b3c03588":"### IV. Model Creation","2ef3eaeb":"If the GCS_DS_PATH was printed sucessfully, mention the relative path (relative to the GCS_DS_PATH's folder directory) of the tfrec files.","f5ec34f9":"### I. Install quick_ml & necessary imports","6d44ad3c":"##### Define Labeled TFRecord Format\n\nWe need to define the Labeled TFRecord Format so that quick_ml can read and process the TFRecords Dataset and use it for model training.","53cdc6f9":"## Multi - Class Classification using quick_ml","20b76a10":"#### In this notebook, we'll learn how to perform Multi-Class Classification using quick_ml. You'll observe how greatly it reduces your time for the workflow by atleast x30 times.\n<br>\n\nWorkflow => <br>\n1. Install quick_ml & do necessary imports\n2. Define TPU strategy & instance\n3. Define the necessary parameters which would be needed during model training.\n    * GCS_DS_PATH\n    * EPOCHS\n    * BATCH_SIZE\n    * dictionary_labeled, IMAGE_SIZE => get_labeled_tfrecord_format\n    * train_tfrec_path\n    * train_dataset\n4. Define the model under strategy.scope()\n5. Train the model.","31c87065":"##### Loading training & validation datasets","65a17ee9":"Model Specifications\nSpecifications :-\n\n* Efficient Net B1\n* Binary Output -> n_class = 10\n* classification model -> using 'default' classification model used by quick_ml. This is the classification model by removing the top of the pretrained model architecture. You can define your own classification model using TF and pass it as an argument to 'classification_model'\n* freeze -> True or False, depening on whether to freeze the entire model during training or not\n* input_shape -> of the images in TFRecords\n* activation -> softmax (multi-class)\n* weights -> imagenet\n\n<br>For compilation\n\n* optimizer -> adam\n* loss -> sparse_categorical_crossentropy\n* metrics -> sparse_categorical_accuracy","91433c60":"### II. Define TPU Strategy","31ec417e":"Once **GCS_DS_PATH** for the Labeled Dataset is obtained, the **train_tfrec_path** is mentioned & the **Batch Size** is defined along with the above step where we mentioned the labeled_tfrecord_format, we can begin loading the training datasets. Learn more by scrolling down to **get_training_dataset** section under **Begin Working w\/ TPU page**.","fc0d9d55":"Defining the Training Parameters\n* Batch Size - Usually 16 strategy.num_replicas_in_sync. However, 32strategy.num_replicas_in_sync will work equally good and faster.\n* Number of Epochs to train for\n* Num_Training_Images\n* Steps Per Epoch","a54f50aa":"##### quick_ml Official Website -> https:\/\/www.quickml.info <br>","c535894d":"### That's all. Prototype -> Coding -> Model Training \n### All under 8 mins.\n\n\n## Please appreciate the work by sharing & upvotes! Thanks!","dc584564":"Use create_model to create_model and compile it in the fastest possible manner. Learn more about create model [here](https:\/\/www.quickml.info\/create-models-quickly)","567abce7":"Begin training the model by calling the fit() method."}}