{"cell_type":{"33d06f1e":"code","ddc0b877":"code","c6376c42":"code","022c876e":"code","9fd8be88":"code","d1738238":"code","1177d3a0":"code","112e2ce0":"code","15805509":"code","13549241":"code","725cb4e0":"markdown"},"source":{"33d06f1e":"!git clone https:\/\/github.com\/ultralytics\/yolov3 ","ddc0b877":"!python3 \/kaggle\/working\/yolov3\/train.py --data \/kaggle\/input\/maskdetection\/yolo\/obj.data --img-size 320 --epochs 1 --batch-size 16 --weights \/kaggle\/input\/maskdetection\/yolo\/yolov3-spp-ultralytics.pt --cfg \/kaggle\/input\/maskdetection\/yolo\/yolov3-mask-spp.cfg","c6376c42":"!python3 \/kaggle\/working\/yolov3\/detect.py --names \/kaggle\/working\/yolov3\/data\/coco.names --weights \/kaggle\/input\/maskdetection\/yolo\/yolov3-spp-ultralytics.pt --cfg \/kaggle\/working\/yolov3\/cfg\/yolov3-spp.cfg  --source \/kaggle\/working\/yolov3\/data\/samples\/bus.jpg --conf-thres 0.3 --iou-thres 0.6","022c876e":"from PIL import Image\nImage.open('\/kaggle\/working\/output\/bus.jpg')","9fd8be88":"!python3 \/kaggle\/working\/yolov3\/detect.py --names \/kaggle\/input\/maskdetection\/yolo\/obj.names --weights \/kaggle\/input\/maskdetection\/yolo\/best.pt --cfg \/kaggle\/input\/maskdetection\/yolo\/yolov3-mask-spp.cfg  --source \/kaggle\/input\/maskdetection\/yolo\/images\/test --conf-thres 0.3 --iou-thres 0.6","d1738238":"from PIL import Image\nImage.open('\/kaggle\/working\/output\/173.jpg')","1177d3a0":"!python3 \/kaggle\/working\/yolov3\/test.py --cfg \/kaggle\/input\/maskdetection\/yolo\/yolov3-mask-spp.cfg --weights \/kaggle\/input\/maskdetection\/yolo\/best.pt --img 320 --augment --data \/kaggle\/input\/maskdetection\/yolo\/obj.data\n","112e2ce0":"%cd \/kaggle\/working\/yolov3","15805509":"def plot_results(start=0, stop=0, bucket='', id=()):  # from utils.utils import *; plot_results()\n    # Plot training 'results*.txt' as seen in https:\/\/github.com\/ultralytics\/yolov3#training\n    fig, ax = plt.subplots(2, 5, figsize=(12, 6))\n    ax = ax.ravel()\n    s = ['GIoU', 'Objectness', 'Classification', 'Precision', 'Recall',\n         'val GIoU', 'val Objectness', 'val Classification', 'mAP@0.5', 'F1']\n    if bucket:\n        os.system('rm -rf storage.googleapis.com')\n        files = ['https:\/\/storage.googleapis.com\/%s\/results%g.txt' % (bucket, x) for x in id]\n    else:\n        files = glob.glob('results*.txt') + glob.glob('..\/..\/Downloads\/results*.txt')\n    for f in sorted(files):\n        try:\n            results = np.loadtxt(f, usecols=[2, 3, 4, 8, 9, 12, 13, 14, 10, 11], ndmin=2).T\n            n = results.shape[1]  # number of rows\n            x = range(start, min(stop, n) if stop else n)\n            for i in range(10):\n                y = results[i, x]\n                if i in [0, 1, 2, 5, 6, 7]:\n                    y[y == 0] = np.nan  # dont show zero loss values\n                    # y \/= y[0]  # normalize\n                ax[i].plot(x, y, marker='.', label=Path(f).stem, linewidth=2, markersize=8)\n                ax[i].set_title(s[i])\n                if i in [5, 6, 7]:  # share train and val loss y axes\n                    ax[i].get_shared_y_axes().join(ax[i], ax[i - 5])\n        except:\n            print('Warning: Plotting error for %s, skipping file' % f)\n\n    fig.tight_layout()\n    ax[1].legend()\n    fig.savefig('\/kaggle\/working\/yolov3\/results.png', dpi=200)","13549241":"!python3 -c \"from utils import utf\nils; utils.plot_results()\"  # plot training results\nImage(filename='\/kaggle\/working\/yolov3\/results.png', width=800)","725cb4e0":"### YOLO Startkit using YOLOv3 Ultralytics\nChange your internet settings to On"}}