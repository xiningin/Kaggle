{"cell_type":{"02685f20":"code","0431950e":"code","c16f9383":"code","963b5399":"code","5d532437":"code","f7b0b8fe":"code","303da433":"code","3214d84f":"code","1d435ca2":"code","27260cb7":"code","c0640a90":"code","09386d28":"code","05cae090":"code","870c77ae":"code","7567f393":"code","cdee91b1":"code","ebdaf00d":"code","28bf0936":"code","54df9500":"code","3b6b7ab9":"code","27c9cac4":"code","a369e1de":"code","c0a92421":"code","232dc538":"code","82f48ec7":"code","43133a4c":"code","1804a4e6":"code","056cf86c":"markdown","d763ab7d":"markdown","e6b124ce":"markdown"},"source":{"02685f20":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0431950e":"import pandas as pd\ndf=pd.read_csv('\/kaggle\/input\/creditcardfraud\/creditcard.csv')\ndf.head()","c16f9383":"df.shape","963b5399":"df['Class'].value_counts()","5d532437":"X = df.drop(\"Class\",axis=1)\ny = df.Class","f7b0b8fe":"X.head()","303da433":"y.head()","3214d84f":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score,confusion_matrix,classification_report\nfrom sklearn.model_selection import KFold\nimport numpy as np\nfrom sklearn.model_selection import GridSearchCV","1d435ca2":"log_class=LogisticRegression()\ngrid={'C':10.0 **np.arange(-2,3),'penalty':['l1','l2']}\ncv=KFold(n_splits=5,random_state=None,shuffle=False)","27260cb7":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,train_size=0.7)","c0640a90":"clf=GridSearchCV(log_class,grid,cv=cv,n_jobs=-1,scoring='f1_macro')\nclf.fit(X_train,y_train)","09386d28":"y_pred=clf.predict(X_test)\nprint(confusion_matrix(y_test,y_pred))\nprint(accuracy_score(y_test,y_pred))\nprint(classification_report(y_test,y_pred))","05cae090":"y_train.value_counts()","870c77ae":"class_weight=dict({0:1,1:100})","7567f393":"from sklearn.ensemble import RandomForestClassifier\nclassifier=RandomForestClassifier(class_weight=class_weight)\nclassifier.fit(X_train,y_train)","cdee91b1":"y_pred=classifier.predict(X_test)\nprint(confusion_matrix(y_test,y_pred))\nprint(accuracy_score(y_test,y_pred))\nprint(classification_report(y_test,y_pred))","ebdaf00d":"from collections import Counter\nCounter(y_train)","28bf0936":"from collections import Counter\nfrom imblearn.under_sampling import NearMiss","54df9500":"ns=NearMiss(0.8)\nX_train_ns,y_train_ns=ns.fit_sample(X_train,y_train)\nprint(\"The number of classes before fit {}\".format(Counter(y_train)))\nprint(\"The number of classes after fit {}\".format(Counter(y_train_ns)))","3b6b7ab9":"from sklearn.ensemble import RandomForestClassifier\nclassifier=RandomForestClassifier()\nclassifier.fit(X_train_ns,y_train_ns)","27c9cac4":"y_pred=classifier.predict(X_test)\nprint(confusion_matrix(y_test,y_pred))\nprint(accuracy_score(y_test,y_pred))\nprint(classification_report(y_test,y_pred))","a369e1de":"from imblearn.over_sampling import RandomOverSampler","c0a92421":"os=RandomOverSampler(0.75)\nX_train_ns,y_train_ns=os.fit_sample(X_train,y_train)\nprint(\"The number of classes before fit {}\".format(Counter(y_train)))\nprint(\"The number of classes after fit {}\".format(Counter(y_train_ns)))","232dc538":"from sklearn.ensemble import RandomForestClassifier\nclassifier=RandomForestClassifier()\nclassifier.fit(X_train_ns,y_train_ns)","82f48ec7":"y_pred=classifier.predict(X_test)\nprint(confusion_matrix(y_test,y_pred))\nprint(accuracy_score(y_test,y_pred))\nprint(classification_report(y_test,y_pred))","43133a4c":"from imblearn.combine import SMOTETomek","1804a4e6":"os=SMOTETomek(0.75)\nX_train_ns,y_train_ns=os.fit_sample(X_train,y_train)\nprint(\"The number of classes before fit {}\".format(Counter(y_train)))\nprint(\"The number of classes after fit {}\".format(Counter(y_train_ns)))","056cf86c":"**Under Sampling**","d763ab7d":"**Over Sampling**","e6b124ce":"**Cross Validation Like KFOLD and Hyperpaqrameter Tuning**"}}