{"cell_type":{"19268c5f":"code","d93cbbd8":"code","b5c0dc60":"code","fba16f17":"code","b6bdf129":"code","725b8e9b":"code","c209eeb5":"code","971beee4":"code","05e5eac8":"code","cee41c18":"code","e45a9c11":"code","5d449a52":"code","3c12a0bb":"code","e8fbed32":"markdown","54c9a0c4":"markdown","4b0f9ff3":"markdown"},"source":{"19268c5f":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom keras.models import Sequential, Model\nfrom keras.layers import Conv1D, MaxPool1D, Dense, Dropout, Flatten, BatchNormalization\nfrom keras.optimizers import Adam\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import roc_curve, roc_auc_score\n\nnp.set_printoptions(suppress=True)","d93cbbd8":"raw_data = np.loadtxt('..\/input\/kepler-labelled-time-series-data\/exoTrain.csv', skiprows=1, delimiter=',')\nx_train = raw_data[:, 1:]\ny_train = raw_data[:, 0, np.newaxis] - 1\nraw_data = np.loadtxt('..\/input\/kepler-labelled-time-series-data\/exoTest.csv', skiprows=1, delimiter=',')\nx_test = raw_data[:, 1:]\ny_test = raw_data[:, 0, np.newaxis] - 1\ndel raw_data","b5c0dc60":"x_train_positives = x_train[np.squeeze(y_train) == 1]\nx_train_negatives = x_train[np.squeeze(y_train) == 0]","fba16f17":"num_rotations = 100\nfor i in range(len(x_train_positives)):\n     for r in range(num_rotations):\n          rotated_row = np.roll(x_train[i,:], shift = r)\n          x_train = np.vstack([x_train, rotated_row])","b6bdf129":"plt.plot(x_train_positives[0])\nplt.plot(x_train_negatives[0])\nplt.show()","725b8e9b":"x_train = x_train[:,0:1000]","c209eeb5":"y_train = np.vstack([y_train, np.array([1] * len(x_train_positives) * num_rotations).reshape(-1,1)])","971beee4":"x_train = ((x_train - np.mean(x_train, axis=1).reshape(-1,1)) \/ np.std(x_train, axis=1).reshape(-1,1))[:,:,np.newaxis] \nx_test = ((x_test - np.mean(x_test, axis=1).reshape(-1,1)) \/ np.std(x_test, axis=1).reshape(-1,1))[:,:,np.newaxis]","05e5eac8":"model = Sequential()\nmodel.add(Conv1D(filters=8, kernel_size=11, activation='relu', input_shape=x_train.shape[1:]))\nmodel.add(MaxPool1D(strides=2))\nmodel.add(BatchNormalization())\nmodel.add(Conv1D(filters=16, kernel_size=11, activation='relu'))\nmodel.add(MaxPool1D(strides=2))\nmodel.add(BatchNormalization())\nmodel.add(Conv1D(filters=32, kernel_size=11, activation='relu'))\nmodel.add(MaxPool1D(strides=2))\nmodel.add(BatchNormalization())\nmodel.add(Conv1D(filters=64, kernel_size=11, activation='relu'))\nmodel.add(MaxPool1D(strides=2))\nmodel.add(Flatten())\nmodel.add(Dropout(0.5))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.summary()","cee41c18":"model.compile(optimizer='adam', loss = 'binary_crossentropy', metrics=['accuracy'])\nmodel.fit(x_train, y_train, batch_size=32, epochs=20)","e45a9c11":"non_idx = np.where(y_test[:,0] == 0.)[0]\nyes_idx = np.where(y_test[:,0] == 1.)[0]\ny_predict = model.predict(x_test[:,0:1000])","5d449a52":"plt.plot([y_predict[i] for i in yes_idx], 'bo')\nplt.show()\nplt.plot([y_predict[i] for i in non_idx], 'ro')\nplt.show()","3c12a0bb":"threshold = 0.5\nprint(classification_report(y_test,y_predict >= threshold))","e8fbed32":"We have only 37 observations for exoplanet. So let's synthesize more samples using rotation.","54c9a0c4":"Taking a look at the flux, we see that exoplanets produce a sinusoidal curve. It should be sufficient to take the features t=1 to t=500 to capture this variation.","4b0f9ff3":"Center each observation around mean 0."}}