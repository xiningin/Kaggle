{"cell_type":{"a4d666aa":"code","feab8690":"code","04d08c5e":"code","686101e8":"code","2051946b":"code","cec90c90":"code","7a9b1b40":"code","d8bf3a94":"code","140b6569":"code","76540515":"code","57bfc953":"code","945f276a":"code","96d11352":"code","c5d79beb":"code","86b99852":"code","9c8a8b83":"code","36ab3023":"code","8d00c971":"code","e130752b":"code","122261ab":"code","f8d9742b":"code","562fd31a":"code","3b417a3b":"code","20c227ff":"code","daba5b13":"code","6372825c":"code","a594f683":"code","e14f2737":"code","4d110f03":"code","39892147":"code","0340d0d8":"code","8a6c1bde":"code","e2e2e8fa":"code","5f4daace":"code","867bf573":"code","bfb3ba1f":"code","cdce52e5":"markdown","a58e7a97":"markdown","443c08c9":"markdown","64f6b00c":"markdown","6d264df0":"markdown","e2a6f1ac":"markdown","bcee1640":"markdown","72763072":"markdown","52efe226":"markdown","e5f1ebe5":"markdown","bba23c0f":"markdown","8a6420c5":"markdown","fb7f56e3":"markdown","7043896c":"markdown","8a417e32":"markdown","7b7564f2":"markdown","c8955cf3":"markdown","a0140c1e":"markdown","b73cc9c3":"markdown"},"source":{"a4d666aa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","feab8690":"#Importing Necessary Libraries\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go \nimport seaborn as sns\nimport plotly\nimport plotly.express as px\nfrom fbprophet.plot import plot_plotly\nfrom fbprophet import Prophet","04d08c5e":"#Setting up plotly\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot, plot_mpl\nimport plotly.offline as py\ninit_notebook_mode(connected=True)","686101e8":"# Reading dataset\ndataset = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/2019_nCoV_data.csv')","2051946b":"dataset.head(10)","cec90c90":"# Checking if there is any null values\ndataset.isnull().any()","7a9b1b40":"# Seeing the datset with null rows\ndataset[dataset.isnull().any(axis=1)]","d8bf3a94":"# Affected Countries\nprint(f\"Affected Countries are : {dataset['Country'].unique()}\")\nprint(f\"Total Affected Countries are : {len(dataset['Country'].unique())}\")","140b6569":"# Affected States\/Provinces\nprint(f\"Affected State\/Provinces are : {dataset['Province\/State'].unique()}\")\nprint(f\"Total Affected State\/Provinces are : {len(dataset['Province\/State'].unique())}\")","76540515":"fig = px.bar(dataset, x='Date', y='Confirmed', hover_data=['Province\/State', 'Deaths', 'Recovered'], color='Country')\nannotations = []\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text='Confirmed bar plot for each country',\n                              font=dict(family='Arial',\n                                        size=30,\n                                        color='rgb(37,37,37)'),\n                              showarrow=False))\nfig.update_layout(annotations=annotations)\nfig.show()","57bfc953":"fig = px.bar(dataset.loc[dataset['Country'] == 'Mainland China'], x='Date', y='Confirmed', hover_data=['Province\/State', 'Deaths', 'Recovered'], color='Province\/State')\nannotations = []\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text='Confirmed bar plot for Mainland China',\n                              font=dict(family='Arial',\n                                        size=30,\n                                        color='rgb(37,37,37)'),\n                              showarrow=False))\nfig.update_layout(annotations=annotations)\nfig.show()","945f276a":"# Saving the image \npy.plot(fig, filename='Confirmed_plot.html')","96d11352":"fig = px.bar(dataset, x='Date', y='Deaths', hover_data=['Province\/State', 'Confirmed', 'Recovered'], color='Country')\nannotations = []\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text='Death bar plot for each country',\n                              font=dict(family='Arial',\n                                        size=30,\n                                        color='rgb(37,37,37)'),\n                              showarrow=False))\nfig.update_layout(annotations=annotations)\nfig.show()","c5d79beb":"fig = px.bar(dataset.loc[dataset['Country'] == 'Mainland China'], x='Date', y='Deaths', hover_data=['Province\/State', 'Confirmed', 'Recovered'], color='Province\/State')\nannotations = []\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text='Death bar plot for Mainland China',\n                              font=dict(family='Arial',\n                                        size=30,\n                                        color='rgb(37,37,37)'),\n                              showarrow=False))\nfig.update_layout(annotations=annotations)\nfig.show()","86b99852":"fig = px.line(dataset, x=\"Date\", y=\"Confirmed\", color='Country', hover_data=['Province\/State', 'Deaths'])\nannotations = []\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text='Confirmed Plot for each Country',\n                              font=dict(family='Arial',\n                                        size=30,\n                                        color='rgb(37,37,37)'),\n                              showarrow=False))\nfig.update_layout(annotations=annotations)\nfig.show()","9c8a8b83":"fig = px.line(dataset, x=\"Date\", y=\"Deaths\", color='Country', hover_data=['Province\/State', 'Deaths'])\nannotations = []\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text='Death plot for each country',\n                              font=dict(family='Arial',\n                                        size=30,\n                                        color='rgb(37,37,37)'),\n                              showarrow=False))\nfig.update_layout(annotations=annotations)\nfig.show()","36ab3023":"fig = px.line(pd.DataFrame(dataset.groupby('Date')['Confirmed'].sum().reset_index()), x=\"Date\", y=\"Confirmed\")\nannotations = []\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text='Showing Deaths of total country',\n                              font=dict(family='Arial',\n                                        size=30,\n                                        color='rgb(37,37,37)'),\n                              showarrow=False))\nfig.update_layout(annotations=annotations)\nfig.show()","8d00c971":"datasetJP = dataset[ dataset['Country'] == 'Japan']","e130752b":"datasetJP","122261ab":"confirmed_training_dataset = pd.DataFrame(dataset.groupby('Date')['Confirmed'].sum().reset_index()).rename(columns={'Date': 'ds', 'Confirmed': 'y'})\nconfirmed_training_dataset","f8d9742b":"confirmed_training_datasetJP = pd.DataFrame(datasetJP.groupby('Date')['Confirmed'].sum().reset_index()).rename(columns={'Date': 'ds', 'Confirmed': 'y'})\nconfirmed_training_datasetJP","562fd31a":"# Making the Model\nprophet = Prophet()\n#confirmed_training_dataset['cap'] = 1000000\nprophet.fit(confirmed_training_dataset)\nfuture = prophet.make_future_dataframe(periods=100)\n#future['cap'] = 1000000\nconfirmed_forecast = prophet.predict(future)","3b417a3b":"confirmed_forecast","20c227ff":"# Making the Model\nprophetJP = Prophet()\nprophetJP.fit(confirmed_training_datasetJP)\nfutureJP = prophetJP.make_future_dataframe(periods=100)\nconfirmed_forecastJP = prophetJP.predict(futureJP)","daba5b13":"future","6372825c":"fig = plot_plotly(prophet, confirmed_forecast)  \nannotations = []\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text='\u4e16\u754c\u3000\u611f\u67d3\u8005\u6570\u4e88\u6e2c',\n                              font=dict(family='Arial',\n                                        size=30,\n                                        color='rgb(37,37,37)'),\n                              showarrow=False))\nfig.update_layout(annotations=annotations)\nfig","a594f683":"figJP = plot_plotly(prophetJP, confirmed_forecastJP)  \nannotations = []\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text='\u65e5\u672c\u3000\u611f\u67d3\u8005\u6570\u4e88\u6e2c',\n                              font=dict(family='Arial',\n                                        size=30,\n                                        color='rgb(37,37,37)'),\n                              showarrow=False))\nfigJP.update_layout(annotations=annotations)\nfigJP","e14f2737":"death_training_dataset = pd.DataFrame(dataset.groupby('Date')['Deaths'].sum().reset_index()).rename(columns={'Date': 'ds', 'Deaths': 'y'})\ndeath_training_dataset","4d110f03":"death_training_datasetJP = pd.DataFrame(datasetJP.groupby('Date')['Deaths'].sum().reset_index()).rename(columns={'Date': 'ds', 'Deaths': 'y'})","39892147":"# Making the Model\nprophet = Prophet()\nprophet.fit(death_training_dataset)\nfuture = prophet.make_future_dataframe(periods=30)\ndeaths_forecast = prophet.predict(future)","0340d0d8":"# Making the Model\nprophetJP = Prophet()\nprophetJP.fit(death_training_datasetJP)\nfutureJP = prophetJP.make_future_dataframe(periods=30)\ndeaths_forecastJP = prophetJP.predict(futureJP)","8a6c1bde":"fig = plot_plotly(prophet, deaths_forecast)  \nannotations = []\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text='\u4e16\u754c\u3067\u306e\u6b7b\u4ea1\u8005\u6570',\n                              font=dict(family='Arial',\n                                        size=30,\n                                        color='rgb(37,37,37)'),\n                              showarrow=False))\nfig.update_layout(annotations=annotations)\nfig","e2e2e8fa":"figJP = plot_plotly(prophetJP, deaths_forecastJP)  \nannotations = []\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text='Predictions of Deaths JP',\n                              font=dict(family='Arial',\n                                        size=30,\n                                        color='rgb(37,37,37)'),\n                              showarrow=False))\nfigJP.update_layout(annotations=annotations)\nfigJP","5f4daace":"# Saving Death Forcasting  \npy.plot(fig, filename='death_forcasting.html')","867bf573":"data = {'Day':['Feb 5', 'Feb 6', 'Feb 7', 'Feb 8', 'Feb 9', 'Feb 10'],\n    'Predicted Values':  [529, 572, 614, 657, 700, 743],\n        'Actual Values': [494, 634, 638, 813, 910, 1013],\n        }\n\npredictions_accuracy = pd.DataFrame(data)","bfb3ba1f":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=['Feb 5', 'Feb 6', 'Feb 7', 'Feb 8', 'Feb 9', 'Feb 10'], y=[529, 572, 614, 657, 700, 743],\n                    mode='lines',\n                    name='Predicted Values'))\nfig.add_trace(go.Scatter(x=['Feb 5', 'Feb 6', 'Feb 7', 'Feb 8', 'Feb 9', 'Feb 10'], y=[494, 634, 638, 813, 910, 1013],\n                    mode='lines+markers',\n                    name='Actual Values'))\nannotations = []\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text='Predictions and Actual Death Data',\n                              font=dict(family='Arial',\n                                        size=30,\n                                        color='rgb(37,37,37)'),\n                              showarrow=False))\nfig.update_layout(annotations=annotations)\nfig.show()","cdce52e5":"# Confirmed Cases Forcasting Visualisation","a58e7a97":"## Forcasting Confirmed Cases","443c08c9":"# Here's come Machine Learning\nPrediting Confirmed and Death cases using **Prophet Model**","64f6b00c":"## Deaths Plots","6d264df0":"# Showing Death's of total countries \n\nGrouping Dataset by Date","e2a6f1ac":"Different Color shows different Country","bcee1640":"# Line Plots","72763072":"# Maps Visualisations\nIn Development...","52efe226":"## Confirmed PLots","e5f1ebe5":"# Bar Plots","bba23c0f":"# Dataset Visualisations","8a6420c5":"## Confirmed Visualisations","fb7f56e3":"# Accuracy in the  Prophet Model. ","7043896c":"# Forcasing Death Cases","8a417e32":"# Data Exploration","7b7564f2":"The cases are increasing at very high rate !","c8955cf3":"## Death Visualisations","a0140c1e":"# Data Exploration and Visualisations","b73cc9c3":"Here taking Mainland Chine as an example and different color shows different State\/Provinces "}}