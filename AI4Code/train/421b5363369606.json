{"cell_type":{"8bae0fb1":"code","a98f4667":"code","63594131":"code","8714b55e":"code","286e0603":"code","c5de1d41":"code","5869b3f0":"code","7a567666":"code","206e98f0":"code","308ab486":"code","3f0aa628":"code","53afaabf":"code","9832bcda":"code","a2647793":"code","376d8e14":"code","09b1c062":"code","ee102aa2":"code","14672d8d":"code","da2eefcc":"code","2ae6072d":"code","201eb264":"code","282e9e3e":"code","83f9ffa3":"code","2e78d95e":"code","deba5750":"code","c7164e08":"code","29f25199":"code","1359fc68":"code","c890286c":"code","f22329f7":"code","4fcd25b0":"code","e8331276":"code","ff8f421d":"code","a401f622":"code","e1a914ba":"code","74637cc8":"code","1dc7b279":"code","23f79553":"code","8c443d2d":"code","ee23ab94":"code","f5f15b62":"code","a4144f8d":"code","b7d60879":"code","56bb20c8":"code","ad643cf2":"code","7ef6aed7":"code","ff3745a6":"code","7cdf502a":"code","40c10447":"code","273b4fe4":"code","e7efc74e":"code","e6b4d145":"code","19b79dec":"code","4bd70084":"code","9aaced1d":"code","fd140148":"code","1a895f59":"code","23caee39":"code","c604ba35":"code","9e2fb089":"code","3a2f9dcc":"code","c18e4849":"code","3013098b":"code","c0151808":"code","63093a70":"code","beaf1b51":"code","d0818d7d":"code","fa525acf":"code","ca6acf41":"code","8c6ee70e":"code","e2d27a62":"code","7a651d71":"code","265374c9":"code","9bf71454":"code","c164b25f":"code","d6c626d5":"code","cb9dde31":"markdown","283c1062":"markdown","94f7cdc1":"markdown","443644de":"markdown","a4c2c955":"markdown","e8cebaeb":"markdown","6b188993":"markdown","80162290":"markdown","7a4217fa":"markdown","4b7448e5":"markdown","b680d05a":"markdown","651ad3ba":"markdown","0ed40424":"markdown","db8266ac":"markdown","7e2fe633":"markdown","315726a1":"markdown","bd60fc99":"markdown","6cb3242b":"markdown","7379c2da":"markdown","c852a5b6":"markdown"},"source":{"8bae0fb1":"#importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot\nimport missingno as msno\nimport category_encoders as ce\nimport os\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn import metrics\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.model_selection import RandomizedSearchCV\nimport pickle\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","a98f4667":"#reading the data\ndata = pd.read_csv('..\/input\/predict-test-scores-of-students\/test_scores.csv')\ndata.head()","63594131":"data.describe()","8714b55e":"data.info()","286e0603":"#Checking Null Values\ndata.isnull().sum()","c5de1d41":"print(data.classroom.unique())\nprint(data.classroom.unique().shape)","5869b3f0":"print(data.school.unique())\nprint(data.school.unique().shape)","7a567666":"data.school_type.unique()","206e98f0":"data.school_setting.unique()","308ab486":"data.teaching_method.unique()","3f0aa628":"data.lunch.unique()","53afaabf":"data.dtypes","9832bcda":"# checkign how the categorical data is distributed\nfor i in data.select_dtypes(include='object').columns:\n    print(\"-----Categorical_feature----\",i)\n    print('\\n')\n    print(\"number of categories in \"+\" \"+ i,len(data[i].value_counts()))\n    print('\\n')\n    print(data[i].value_counts())   ","a2647793":"#dropping student_id since its id column\ndata=data.drop('student_id',axis=1)\ndata.head()","376d8e14":"#showing the count of the schools by school_setting\nfig = px.histogram(data, x='school_setting', title=\"Count of Schools by School_setting\", color = 'school_setting')\nfig.show()","09b1c062":"#grouping the data based on school_setting\nschool_setting_data = pd.DataFrame(data.groupby(['school_setting'])['posttest','n_student'].mean().reset_index())\nschool_setting_data","ee102aa2":"fig = px.bar(school_setting_data, x='school_setting',y='posttest', title=\"School's Zone impact on test score\", color = 'n_student')\nfig.show()","14672d8d":"#checking the gender distribution\nfig = px.histogram(data, x='gender', title=\"Count of Students by Gender\", color = 'gender')\nfig.show()","da2eefcc":"#grouping posttest score based on teaching method\nteaching_method = pd.DataFrame(data.groupby(['teaching_method'])['posttest'].mean().reset_index())\nteaching_method","2ae6072d":"\nfig = px.histogram(data, x='teaching_method', title=\"Count of schools by teaching method\", color = 'teaching_method')\nfig.show()","201eb264":"#checking posttest score based on teaching_method\nfig = px.bar(teaching_method, x='teaching_method',y='posttest', title=\"Teaching method's impact on Test Score\", color = 'posttest')\nfig.show()","282e9e3e":"#calculating average posttest based on the school,school_type,teaching_method\nschool_data = pd.DataFrame(data.groupby(['school','school_type','teaching_method']).agg(n_students=('n_student','size'),posttest= ('posttest','mean')).reset_index())","83f9ffa3":"school_data","2e78d95e":"fig = px.bar(school_data, x='school',y='n_students', title=\"Teaching method's impact on Test Score\", color = 'teaching_method', hover_data=['school_type','posttest'], text = 'posttest')\nfig.show()","deba5750":"# plotting correlation heatmap\nfiltere_data=pd.DataFrame(data,columns={\"n_students\",\"posttest\"})\n\n# setting the dimensions of the plot\nfig, ax = plt.subplots(figsize=(15, 5))\n  \n# drawing the plot\ndataplot = sns.heatmap(data.corr(), cmap=\"YlGnBu\", annot=True, ax=ax)\nplt.show()","c7164e08":"data.columns","29f25199":"#dropping gender column since it has no affect on posttest score\ndata=data.drop('gender',axis=1)","1359fc68":"data.head()","c890286c":"#separating low and high cardinality features in separate dataframe\nlow_cardinality_features=['school_setting','school_type','teaching_method','lunch']\nhigh_cardinality_features=['school','classroom']","f22329f7":"low_cardinality_features","4fcd25b0":"low_cardinality_features_data=pd.DataFrame(data,columns={\"school_setting\",\"school_type\",\"teaching_method\",\"lunch\"})","e8331276":"high_cardinality_features_data=pd.DataFrame(data,columns={\"school\",\"classroom\"})","ff8f421d":"#performing one-hot encoding in low cardinality feature\nlow_cardinality_features_encoded_data=pd.get_dummies(data=low_cardinality_features_data,drop_first=True)","a401f622":"low_cardinality_features_encoded_data.head()","e1a914ba":"one_hot_encoding_on_most_frequent_categories=data.copy()\none_hot_encoding_on_most_frequent_categories1=pd.DataFrame(one_hot_encoding_on_most_frequent_categories,columns={\"school\",\"classroom\"})","74637cc8":"#Checking the categories in the dataset\nfor i in one_hot_encoding_on_most_frequent_categories1.columns:\n    print(i,\":\",len(one_hot_encoding_on_most_frequent_categories[i].unique()),\"labels\")","1dc7b279":"one_hot_encoding_on_most_frequent_categories1.school.value_counts().sort_values(ascending=False).head(10)","23f79553":"one_hot_encoding_on_most_frequent_categories1.classroom.value_counts().sort_values(ascending=False).head(10)","8c443d2d":"\n#print top 10 features for school\nschool_10=one_hot_encoding_on_most_frequent_categories1.school.value_counts().sort_values(ascending=False).head(10).index\nschool_10=list(school_10)\nschool_10","ee23ab94":"#print top 10 features for classroom\nclassroom_10=one_hot_encoding_on_most_frequent_categories1.classroom.value_counts().sort_values(ascending=False).head(10).index\nclassroom_10=list(classroom_10)\nclassroom_10","f5f15b62":"\nfor categories in school_10:\n    one_hot_encoding_on_most_frequent_categories1[categories]=np.where(one_hot_encoding_on_most_frequent_categories1['school']==categories,1,0)","a4144f8d":"one_hot_encoding_on_most_frequent_categories1.head()","b7d60879":"for categories in classroom_10:\n    one_hot_encoding_on_most_frequent_categories1[categories]=np.where(one_hot_encoding_on_most_frequent_categories1['classroom']==categories,1,0)","56bb20c8":"one_hot_encoding_on_most_frequent_categories1.head()\n","ad643cf2":"one_hot_encoding_on_most_frequent_categories1_filtered_features=one_hot_encoding_on_most_frequent_categories1.iloc[:,2:22]\none_hot_encoding_on_most_frequent_categories1_filtered_features.head()","7ef6aed7":"one_hot_encoding_on_most_frequent_categories1_filtered_features.shape","ff3745a6":"\n#combining the features\ncombined_features=pd.concat([one_hot_encoding_on_most_frequent_categories1_filtered_features, low_cardinality_features_encoded_data],axis=1)\ncombined_features.head()","7cdf502a":"combined_features.shape","40c10447":"Numerical_features=pd.DataFrame(data,columns={\"n_student\",\"pretest\"})","273b4fe4":"training_features=pd.concat([Numerical_features,combined_features],axis=1)\ntraining_features.head()","e7efc74e":"target_feature=pd.DataFrame(data,columns={\"posttest\"})","e6b4d145":"X =training_features.copy()\ny = target_feature.copy()","19b79dec":"X_train,X_test,y_train,y_test = train_test_split(X,y, test_size = 0.20,random_state = 42)","4bd70084":"X_train.shape,X_test.shape,y_train.shape,y_test.shape","9aaced1d":"\ntree = DecisionTreeRegressor()\ntree.fit(X_train, y_train)","fd140148":"dt_predictions = tree.predict(X_test)","1a895f59":"\n\nprint('Mean Absolute Error (MAE):', metrics.mean_absolute_error(y_test, dt_predictions))\nprint('Mean Squared Error (MSE):', metrics.mean_squared_error(y_test, dt_predictions))\nprint('Root Mean Squared Error (RMSE):', np.sqrt(metrics.mean_squared_error(y_test, dt_predictions)))\nprint('R^2:', metrics.r2_score(y_test, dt_predictions))","23caee39":"randomforest=RandomForestRegressor()\nrandomforest.fit(X_train,y_train)","c604ba35":"randomforest_prediction=randomforest.predict(X_test)","9e2fb089":"print('Mean Absolute Error (MAE):', metrics.mean_absolute_error(y_test, randomforest_prediction))\nprint('Mean Squared Error (MSE):', metrics.mean_squared_error(y_test, randomforest_prediction))\nprint('Root Mean Squared Error (RMSE):', np.sqrt(metrics.mean_squared_error(y_test, randomforest_prediction)))\nprint('R^2:', metrics.r2_score(y_test, randomforest_prediction))","3a2f9dcc":"regressor=KNeighborsRegressor()\nregressor.fit(X_train,y_train)","c18e4849":"knn_prediction=regressor.predict(X_test)","3013098b":"print('Mean Absolute Error (MAE):', metrics.mean_absolute_error(y_test, knn_prediction))\nprint('Mean Squared Error (MSE):', metrics.mean_squared_error(y_test, knn_prediction))\nprint('Root Mean Squared Error (RMSE):', np.sqrt(metrics.mean_squared_error(y_test, knn_prediction)))\nprint('R^2:', metrics.r2_score(y_test, knn_prediction))","c0151808":"xgboost_model = XGBRegressor()\nxgboost_model.fit(X, y)\nxgboost_prediction=regressor.predict(X_test)\n","63093a70":"print('Mean Absolute Error (MAE):', metrics.mean_absolute_error(y_test, xgboost_prediction))\nprint('Mean Squared Error (MSE):', metrics.mean_squared_error(y_test, xgboost_prediction))\nprint('Root Mean Squared Error (RMSE):', np.sqrt(metrics.mean_squared_error(y_test, xgboost_prediction)))\nprint('R^2:', metrics.r2_score(y_test, xgboost_prediction))","beaf1b51":"\n# Number of trees in random forest\nn_estimators = [int(x) for x in np.linspace(start = 200, stop = 3000, num = 10)]\n# Number of features to consider at every split\nmax_features = ['auto', 'sqrt','log2']\n# Maximum number of levels in tree\nmax_depth = [int(x) for x in np.linspace(10, 1000,10)]\n# Minimum number of samples required to split a node\n#[2, 5, 10,14]\nmin_samples_split = [3, 6, 11,16]\n# Minimum number of samples required at each leaf node\n#[1, 2, 4,6,8]\nmin_samples_leaf = [3, 5, 7,9,11]\n# Create the random grid\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf\n              }\nprint(random_grid)","d0818d7d":"\nrf=RandomForestRegressor()\nrf_randomcv=RandomizedSearchCV(estimator=rf,param_distributions=random_grid,n_iter=100,cv=10,verbose=2,\n                               random_state=100,n_jobs=-1)\n### fit the randomized model\nrf_randomcv.fit(X_train,y_train)","fa525acf":"rf_randomcv.best_params_","ca6acf41":"best_random_grid=rf_randomcv.best_estimator_","8c6ee70e":"optimized_pred=best_random_grid.predict(X_test)","e2d27a62":"print('Mean Absolute Error (MAE):', metrics.mean_absolute_error(y_test, optimized_pred))\nprint('Mean Squared Error (MSE):', metrics.mean_squared_error(y_test, optimized_pred))\nprint('Root Mean Squared Error (RMSE):', np.sqrt(metrics.mean_squared_error(y_test, optimized_pred)))\nprint('R^2:', metrics.r2_score(y_test, optimized_pred))","7a651d71":"\nmy_submission = pd.DataFrame(optimized_pred)\nmy_submission.to_csv('submission.csv', index=False)","265374c9":"data_prediction=pd.DataFrame(optimized_pred,columns={\"Predicted_score\"})\ny_test1=y_test.copy()\ny_test1=y_test1.reset_index()\ny_test2=pd.DataFrame(y_test1,columns={\"posttest\"})\n","9bf71454":"predicted_data_frame = pd.concat([data_prediction,y_test2],axis=1)\npredicted_data_frame.head(10)","c164b25f":"filename = 'model.pkl'\npickle.dump(rf_randomcv, open(filename, 'wb'))","d6c626d5":"!ls","cb9dde31":"# DecisionTreeRegressor","283c1062":"# Feature Engineering","94f7cdc1":"# ","443644de":"Analysis:\n\nIt can be observed that Maximum number schools are in urban from above graph","a4c2c955":"# Model Training","e8cebaeb":"Analysis\n\n* Both genders are equally present","6b188993":"Analysis\n\n* The number of schools with experimental startegy are less but the avg score of the students is more than that of the standard ones. \n* Teaching methid is an important feature for scoring good test score.","80162290":"# HyperParameter","7a4217fa":"Analysis\n\n* There is only one school which is not supporting Experimental way of teaching and one school which is supporting only Experimental way of teaching.\n* Almost all schools are supporting the Experimental way of teaching, and the results are significantly better.\n\n\n","4b7448e5":"# Random Forest Regressor","b680d05a":"#  Analysis\n\n* Students from suburbans are performing well than the students from Urbans areas and rurals areas.\n* Urban schools have more students than Rural and suburban this is the reason for getting less score by urban areas students","651ad3ba":"# Exploratory Data Analysis","0ed40424":"# Data Preperation","db8266ac":"# downloading the model\n","7e2fe633":"Analysis\n\n* The number of schools with experimental style are less than standard style","315726a1":"# Performing one-hot encoding on most 10 frequent categories and put 0 for remaining.","bd60fc99":"Analysis:\n\nThere is no any missing data in the dataset","6cb3242b":"# xgboost","7379c2da":"# KNN","c852a5b6":"# checking the unique values in the dataset"}}