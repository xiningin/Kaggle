{"cell_type":{"287ba8d6":"code","93e34c9d":"code","442b9635":"code","5cae9862":"code","436fb1c0":"code","3026d2f7":"code","8504de04":"code","7a79302b":"code","2aea1434":"code","71961db4":"code","717f13a9":"code","b80015a6":"code","63615d38":"code","fdd648e4":"code","671f3a18":"code","3d632f2b":"code","04ff3232":"code","483b9f2c":"code","9fb06302":"code","177f01d8":"code","47eef350":"code","84d7ad81":"code","47c7789e":"code","c0b8570c":"code","a5196a01":"code","99dead62":"code","830df3f6":"code","dcb05206":"code","78417b12":"code","5d1501b8":"code","c8f0968c":"code","00c2eab6":"code","5e818760":"code","3e6013d1":"code","7624605e":"code","1a9318bd":"code","f1aa0f7c":"code","0296638a":"code","cbbf8e17":"code","9ed3933c":"code","c103adc6":"code","a49fca44":"code","61de616d":"code","b20fbb86":"code","91ab8347":"code","de826f6e":"code","6c015609":"code","86605187":"code","c89b0e60":"code","03370dee":"code","5b40d2d5":"code","dcb415ae":"code","9694dc9e":"code","47f358d3":"code","05b7a49c":"code","4ddcdc23":"code","1115d691":"code","aad9ed54":"code","25640707":"code","150da4bf":"code","674db3dd":"code","22850087":"code","48c34bdb":"code","96a31538":"code","a1f72660":"code","446983d1":"code","ff1f5be5":"code","cb2f7c10":"markdown","4ae1c4b8":"markdown","ebe92e82":"markdown","55515fe3":"markdown","9b4dee6a":"markdown","291c74b2":"markdown","1f5c5186":"markdown","ac235791":"markdown","199b87af":"markdown","dfc95c94":"markdown","59140d47":"markdown","f703c634":"markdown","2c4a64ba":"markdown","16a9900d":"markdown","b7e1cb95":"markdown","b5ac10ae":"markdown","c6eb5520":"markdown","3180eb49":"markdown","80d72f3e":"markdown","3ab39cdd":"markdown","1612f4b1":"markdown","48ab9874":"markdown","787a127d":"markdown","83a58f04":"markdown","6b8c4a39":"markdown","028da3a4":"markdown","ecc30f0a":"markdown","b347c5fc":"markdown","040b7070":"markdown","b9ca62a4":"markdown","6608c080":"markdown","ed2499a0":"markdown","cfaca511":"markdown","d6986aef":"markdown","018d1be6":"markdown","e409cb55":"markdown","284cf459":"markdown","38434d67":"markdown","4154002b":"markdown","fd70c75c":"markdown","317e8a8f":"markdown","c7324d3b":"markdown","cdde7ae0":"markdown","d30ed32a":"markdown","17985392":"markdown","6abe2e11":"markdown","14a1c311":"markdown"},"source":{"287ba8d6":"import os\n# import gc\nimport time\nimport math\nimport datetime\nfrom math import log, floor\n# from sklearn.neighbors import KDTree\n\nimport numpy as np\nimport pandas as pd\nfrom pathlib import Path\nfrom sklearn.utils import shuffle\nfrom tqdm.notebook import tqdm as tqdm\n\nimport seaborn as sns\nfrom matplotlib import colors\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\n\n\n# import pywt\nfrom statsmodels.robust import mad\n\nimport scipy\nimport statsmodels\nfrom scipy import signal\nimport statsmodels.api as sm\nfrom fbprophet import Prophet\n\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","93e34c9d":"sales = pd.read_csv('..\/input\/m5-forecasting-accuracy\/sales_train_evaluation.csv')\ncalendar = pd.read_csv('..\/input\/m5-forecasting-accuracy\/calendar.csv')\nsell_prices = pd.read_csv('..\/input\/m5-forecasting-accuracy\/sell_prices.csv')\n","442b9635":"### Ref link :- https:\/\/www.kaggle.com\/anshuls235\/time-series-forecasting-eda-fe-modelling\/comments#1.-Fetch-the-data\n\n\n#Downcast in order to save memory\ndef downcast(df):\n    cols = df.dtypes.index.tolist()\n    types = df.dtypes.values.tolist()\n    for i,t in enumerate(types):\n        if 'int' in str(t):\n            if df[cols[i]].min() > np.iinfo(np.int8).min and df[cols[i]].max() < np.iinfo(np.int8).max:\n                df[cols[i]] = df[cols[i]].astype(np.int8)\n            elif df[cols[i]].min() > np.iinfo(np.int16).min and df[cols[i]].max() < np.iinfo(np.int16).max:\n                df[cols[i]] = df[cols[i]].astype(np.int16)\n            elif df[cols[i]].min() > np.iinfo(np.int32).min and df[cols[i]].max() < np.iinfo(np.int32).max:\n                df[cols[i]] = df[cols[i]].astype(np.int32)\n            else:\n                df[cols[i]] = df[cols[i]].astype(np.int64)\n        elif 'float' in str(t):\n            if df[cols[i]].min() > np.finfo(np.float16).min and df[cols[i]].max() < np.finfo(np.float16).max:\n                df[cols[i]] = df[cols[i]].astype(np.float16)\n            elif df[cols[i]].min() > np.finfo(np.float32).min and df[cols[i]].max() < np.finfo(np.float32).max:\n                df[cols[i]] = df[cols[i]].astype(np.float32)\n            else:\n                df[cols[i]] = df[cols[i]].astype(np.float64)\n        elif t == np.object:\n            if cols[i] == 'date':\n                df[cols[i]] = pd.to_datetime(df[cols[i]], format='%Y-%m-%d')\n            else:\n                df[cols[i]] = df[cols[i]].astype('category')\n    return df  \n","5cae9862":"sales = downcast(sales)\nsell_prices = downcast(sell_prices)\ncalendar = downcast(calendar)","436fb1c0":"sales.head()","3026d2f7":"sales = pd.melt(sales, id_vars=['id', 'item_id', 'dept_id', 'cat_id', 'store_id','state_id'], var_name='d', value_name='sold').dropna()","8504de04":"sales","7a79302b":"sell_prices","2aea1434":"calendar","71961db4":"df = pd.merge(sales, calendar,how = \"left\",on = 'd')","717f13a9":"df = pd.merge(df, sell_prices, how = 'left', on = ['store_id','item_id','wm_yr_wk'])","b80015a6":"\ndf_1 = df.loc[df['store_id'] == 'CA_1']\ngrouped = df_1.groupby(['date']).sum()","63615d38":"grouped = df.groupby(['store_id','date']).sum()\ngrouped.reset_index( inplace=True)","fdd648e4":"grouped","671f3a18":"# import plotly.express as px\nfig = px.line(grouped ,x = 'date', y = 'sold',color = 'store_id' ,title='Total number of products sold over time per store')\nfig.update_layout(width=1000, height=400)\nfig.show()","3d632f2b":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfig = make_subplots(rows=3, cols=4,subplot_titles=('CA_1',\n 'CA_2',\n 'CA_3',\n 'CA_4',\n 'TX_1',\n 'TX_2',\n 'TX_3','',\n 'WI_1',\n 'WI_2',\n 'WI_3' ))\n\nfig.add_trace(\n    go.Scatter(x=list(grouped.loc[grouped['store_id'] == 'CA_1']['date']), y=list(grouped.loc[grouped['store_id'] == 'CA_1']['sold'])), row = 1, col=1 )\n\nfig.add_trace(\n    go.Scatter(x=list(grouped.loc[grouped['store_id'] == 'CA_2']['date']), y=list(grouped.loc[grouped['store_id'] == 'CA_2']['sold'])), row = 1, col=2 )\n\n\nfig.add_trace(\n    go.Scatter(x=list(grouped.loc[grouped['store_id'] == 'CA_3']['date']), y=list(grouped.loc[grouped['store_id'] == 'CA_3']['sold'])), row = 1, col=3 )\n\nfig.add_trace(\n    go.Scatter(x=list(grouped.loc[grouped['store_id'] == 'CA_4']['date']), y=list(grouped.loc[grouped['store_id'] == 'CA_4']['sold'])), row = 1, col=4 )\n\nfig.add_trace(\n    go.Scatter(x=list(grouped.loc[grouped['store_id'] == 'TX_1']['date']), y=list(grouped.loc[grouped['store_id'] == 'TX_1']['sold'])), row = 2, col=1 )\n\nfig.add_trace(\n    go.Scatter(x=list(grouped.loc[grouped['store_id'] == 'TX_2']['date']), y=list(grouped.loc[grouped['store_id'] == 'TX_2']['sold'])), row = 2, col=2 )\n\nfig.add_trace(\n    go.Scatter(x=list(grouped.loc[grouped['store_id'] == 'TX_3']['date']), y=list(grouped.loc[grouped['store_id'] == 'TX_3']['sold'])), row = 2, col=3 )\n\nfig.add_trace(\n    go.Scatter(x=list(grouped.loc[grouped['store_id'] == 'WI_1']['date']), y=list(grouped.loc[grouped['store_id'] == 'WI_1']['sold'])), row = 3, col = 1 )\n\nfig.add_trace(\n    go.Scatter(x=list(grouped.loc[grouped['store_id'] == 'WI_2']['date']), y=list(grouped.loc[grouped['store_id'] == 'WI_2']['sold'])), row = 3, col=2 )\n\nfig.add_trace(\n    go.Scatter(x=list(grouped.loc[grouped['store_id'] == 'WI_3']['date']), y=list(grouped.loc[grouped['store_id'] == 'WI_3']['sold'])), row = 3, col=3 )\n\n\nfig.update_layout(height=800, width=2000, title_text=\"Total number of products sold over time per store\")\nfig.show()","04ff3232":"\ngrouped = df.groupby(['state_id','date']).sum()\ngrouped.reset_index( inplace=True)","483b9f2c":"fig = px.line(grouped ,x = 'date', y = 'sold',color = 'state_id' ,title='Total number of products sold over time per state')\nfig.update_layout(width=1000, height=400)\nfig.show()","9fb06302":"\ngrouped = df.groupby(['cat_id','date']).sum()\ngrouped.reset_index( inplace=True)","177f01d8":"fig = px.line(grouped ,x = 'date', y = 'sold',color = 'cat_id' ,title='Total number of products sold over time for all categories of items')\nfig.update_layout(width=1000, height=400)\nfig.show()","47eef350":"df['revenue'] = df['sold'] * df['sell_price']","84d7ad81":"grouped = df.groupby(['store_id','date']).sum()\ngrouped.reset_index( inplace=True)","47c7789e":"fig = px.line(grouped ,x = 'date', y = 'revenue',color = 'store_id' ,title='Total revenue generated daily from all the items sold for all the stores')\nfig.update_layout(width=1000, height=400)\nfig.show()","c0b8570c":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfig = make_subplots(rows=3, cols=4,subplot_titles=('CA_1',\n 'CA_2',\n 'CA_3',\n 'CA_4',\n 'TX_1',\n 'TX_2',\n 'TX_3','',\n 'WI_1',\n 'WI_2',\n 'WI_3' ))\n\nfig.add_trace(\n    go.Scatter(x=list(grouped.loc[grouped['store_id'] == 'CA_1']['date']), y=list(grouped.loc[grouped['store_id'] == 'CA_1']['revenue'])), row = 1, col=1 )\n\nfig.add_trace(\n    go.Scatter(x=list(grouped.loc[grouped['store_id'] == 'CA_2']['date']), y=list(grouped.loc[grouped['store_id'] == 'CA_2']['revenue'])), row = 1, col=2 )\n\n\nfig.add_trace(\n    go.Scatter(x=list(grouped.loc[grouped['store_id'] == 'CA_3']['date']), y=list(grouped.loc[grouped['store_id'] == 'CA_3']['revenue'])), row = 1, col=3 )\n\nfig.add_trace(\n    go.Scatter(x=list(grouped.loc[grouped['store_id'] == 'CA_4']['date']), y=list(grouped.loc[grouped['store_id'] == 'CA_4']['revenue'])), row = 1, col=4 )\n\nfig.add_trace(\n    go.Scatter(x=list(grouped.loc[grouped['store_id'] == 'TX_1']['date']), y=list(grouped.loc[grouped['store_id'] == 'TX_1']['revenue'])), row = 2, col=1 )\n\nfig.add_trace(\n    go.Scatter(x=list(grouped.loc[grouped['store_id'] == 'TX_2']['date']), y=list(grouped.loc[grouped['store_id'] == 'TX_2']['revenue'])), row = 2, col=2 )\n\nfig.add_trace(\n    go.Scatter(x=list(grouped.loc[grouped['store_id'] == 'TX_3']['date']), y=list(grouped.loc[grouped['store_id'] == 'TX_3']['revenue'])), row = 2, col=3 )\n\nfig.add_trace(\n    go.Scatter(x=list(grouped.loc[grouped['store_id'] == 'WI_1']['date']), y=list(grouped.loc[grouped['store_id'] == 'WI_1']['revenue'])), row = 3, col = 1 )\n\nfig.add_trace(\n    go.Scatter(x=list(grouped.loc[grouped['store_id'] == 'WI_2']['date']), y=list(grouped.loc[grouped['store_id'] == 'WI_2']['revenue'])), row = 3, col=2 )\n\nfig.add_trace(\n    go.Scatter(x=list(grouped.loc[grouped['store_id'] == 'WI_3']['date']), y=list(grouped.loc[grouped['store_id'] == 'WI_3']['revenue'])), row = 3, col=3 )\n\n\nfig.update_layout(height=800, width=2000, title_text=\"Total number of products sold over time per store\")\nfig.show()","a5196a01":"# df","99dead62":"grouped = df.groupby(['store_id','cat_id'], as_index=False).sum().dropna()\n# grouped.reset_index( inplace=True)","830df3f6":"# grouped","dcb05206":"x_axis = grouped['store_id'].unique()\nx_axis","78417b12":"import plotly.graph_objects as go\n\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    x=x_axis,\n    y=grouped.loc[(grouped['cat_id'] == 'FOODS')]['sold'],\n    name='FOODS',text = grouped.loc[(grouped['cat_id'] == 'FOODS')]['sold']\n))\nfig.add_trace(go.Bar(\n    x=x_axis,\n    y=grouped.loc[(grouped['cat_id'] == 'HOBBIES')]['sold'],\n    name='HOBBIES',text = grouped.loc[(grouped['cat_id'] == 'HOBBIES')]['sold'],\n    marker_color='rgb(0, 204, 0)'\n))\nfig.add_trace(go.Bar(\n    x=x_axis,\n    y=grouped.loc[(grouped['cat_id'] == 'HOUSEHOLD')]['sold'],\n    name='HOUSEHOLD\t', text = grouped.loc[(grouped['cat_id'] == 'HOUSEHOLD')]['sold'],\n    marker_color='rgb(153, 51, 255)'\n))\n\n\nfig.update_layout(barmode='group', xaxis_tickangle=-45)\nfig.update_layout(title_text='Total number of items sold in each store for each category')\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(width=1000, height=400)\nfig.show()","5d1501b8":"grouped = df.groupby(['state_id','cat_id'], as_index=False).sum().dropna()\nx_axis = grouped['state_id'].unique()","c8f0968c":"x_axis","00c2eab6":"import plotly.graph_objects as go\n\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    x=x_axis,\n    y=grouped.loc[(grouped['cat_id'] == 'FOODS')]['sold'],\n    name='FOODS',text = grouped.loc[(grouped['cat_id'] == 'FOODS')]['sold']\n))\nfig.add_trace(go.Bar(\n    x=x_axis,\n    y=grouped.loc[(grouped['cat_id'] == 'HOBBIES')]['sold'],\n    name='HOBBIES', text = grouped.loc[(grouped['cat_id'] == 'HOBBIES')]['sold'],\n    marker_color='rgb(0, 204, 0)'\n))\nfig.add_trace(go.Bar(\n    x=x_axis,\n    y=grouped.loc[(grouped['cat_id'] == 'HOUSEHOLD')]['sold'],\n    name='HOUSEHOLD\t', text = grouped.loc[(grouped['cat_id'] == 'HOUSEHOLD')]['sold'],\n    marker_color='rgb(153, 51, 255)'\n))\n\n\nfig.update_layout(barmode='group', xaxis_tickangle=-45)\nfig.update_layout(title_text='Total number of items sold in each state for each category')\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(width=1000, height=500)\nfig.show()","5e818760":"# df","3e6013d1":"grouped = df.groupby(['store_id','cat_id','item_id'], as_index=False)['sell_price'].mean()\ngrouped.dropna()","7624605e":"# grouped.head()\n# sell_prices","1a9318bd":"import plotly.express as px\n\nfig = px.box(grouped, x=\"store_id\", y=\"sell_price\", color=\"cat_id\")\nfig.update_layout(title_text='Distribution of prices of different categories in different stores')\nfig.show()","f1aa0f7c":"grouped = df.groupby(['store_id','dept_id'], as_index=False)['sold'].sum()\ngrouped.dropna()","0296638a":"fig = px.box(grouped, x=\"dept_id\", y=\"sold\")\nfig.update_layout(title_text='Total number of products sold for all subcategories of items per store',width=800, height=400)\nfig.show()","cbbf8e17":"df_F_3 = df.loc[(df['dept_id'] == \"FOODS_3\")]\n\ngrouped = df_F_3.groupby([\"dept_id\",'item_id'],as_index=False)['sold'].sum()\ngrouped.dropna(inplace = True)\n","9ed3933c":"grouped.sort_values('sold' ,inplace = True)\ngrouped","c103adc6":"fig = px.bar(grouped, x='item_id', y='sold', text='sold') \nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(barmode='stack', xaxis_tickangle=-45 ,width=1500, height=600 )\nfig.update_layout(title_text='Items sold in FOODS_3')\nfig.show()\n","a49fca44":"df.tail()\ndf_2016 = df.loc[df['year'] == 2016]\n\n# df_2016","61de616d":"grouped = df_2016.groupby(['date','event_type_1','event_name_1','cat_id'], as_index=False)['sold'].sum()\ngrouped.dropna(inplace=True)\ngrouped.head()","b20fbb86":"x_axis = grouped['event_name_1'].unique()","91ab8347":"import plotly.graph_objects as go\n\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    x=x_axis,\n    y=grouped.loc[(grouped['cat_id'] == 'FOODS')]['sold'],\n    name='FOODS',text = grouped.loc[(grouped['cat_id'] == 'FOODS')]['sold']\n))\nfig.add_trace(go.Bar(\n    x=x_axis,\n    y=grouped.loc[(grouped['cat_id'] == 'HOBBIES')]['sold'],\n    name='HOBBIES', text = grouped.loc[(grouped['cat_id'] == 'HOBBIES')]['sold'],\n    marker_color='rgb(0, 204, 0)'\n))\nfig.add_trace(go.Bar(\n    x=x_axis,\n    y=grouped.loc[(grouped['cat_id'] == 'HOUSEHOLD')]['sold'],\n    name='HOUSEHOLD\t', text = grouped.loc[(grouped['cat_id'] == 'HOUSEHOLD')]['sold'],\n    marker_color='rgb(153, 51, 255)'\n))\n\n\nfig.update_layout(barmode='group', xaxis_tickangle=-45 ,width=1500, height=600)\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(title_text=' Total number of products sold in events in 2016')\nfig.show()","de826f6e":"df_snap = df.loc[(df['snap_CA'] == 1) | (df['snap_TX'] == 1) | (df['snap_WI'] == 1)]\ngrouped = df.groupby(['store_id','cat_id'], as_index=False)['sold'].sum()\ngrouped.dropna(inplace=True)\ngrouped","6c015609":"x_axis = grouped['store_id'].unique()\nx_axis\n","86605187":"import plotly.graph_objects as go\n\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    x=x_axis,\n    y=grouped.loc[(grouped['cat_id'] == 'FOODS')]['sold'],\n    name='FOODS', text = grouped.loc[(grouped['cat_id'] == 'FOODS')]['sold']\n))\nfig.add_trace(go.Bar(\n    x=x_axis,\n    y=grouped.loc[(grouped['cat_id'] == 'HOBBIES')]['sold'],\n    name='HOBBIES', text = grouped.loc[(grouped['cat_id'] == 'HOBBIES')]['sold'],\n    marker_color='rgb(0, 204, 0)'\n))\nfig.add_trace(go.Bar(\n    x=x_axis,\n    y=grouped.loc[(grouped['cat_id'] == 'HOUSEHOLD')]['sold'],\n    name='HOUSEHOLD\t', text = grouped.loc[(grouped['cat_id'] == 'HOUSEHOLD')]['sold'],\n    marker_color='rgb(153, 51, 255)'\n))\n\n\nfig.update_layout(barmode='group', xaxis_tickangle=-45,width=1000, height=600)\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(title_text=' Total number of products sold during SNAP in stores')\nfig.show()","c89b0e60":"# df","03370dee":"grouped = df.groupby(['wday','cat_id'], as_index=False)['sold'].sum()\ngrouped.dropna(inplace=True)\ngrouped.head()","5b40d2d5":"x_axis = [ 'Saturday', 'Sunday','Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']","dcb415ae":"fig = go.Figure()\nfig.add_trace(go.Bar(\n    x=x_axis,\n    y=grouped.loc[(grouped['cat_id'] == 'FOODS')]['sold'],\n    name='FOODS', text = grouped.loc[(grouped['cat_id'] == 'FOODS')]['sold'],\n   \n))\nfig.add_trace(go.Bar(\n    x=x_axis,\n    y=grouped.loc[(grouped['cat_id'] == 'HOBBIES')]['sold'],\n    name='HOBBIES', text = grouped.loc[(grouped['cat_id'] == 'HOBBIES')]['sold'],\n    marker_color='rgb(0, 204, 0)'\n))\nfig.add_trace(go.Bar(\n    x=x_axis,\n    y=grouped.loc[(grouped['cat_id'] == 'HOUSEHOLD')]['sold'],\n    name='HOUSEHOLD\t', text = grouped.loc[(grouped['cat_id'] == 'HOUSEHOLD')]['sold'],\n    marker_color='rgb(153, 51, 255)'\n))\n\n\nfig.update_layout(barmode='group', xaxis_tickangle=-45,width=1000, height=600)\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(title_text='Products sold on weekdays and weeknds ')\nfig.show()","9694dc9e":"# df","47f358d3":"df_CA = df.loc[(df['state_id'] == \"CA\") & (df['year'] == 2016) ]\n","05b7a49c":"# df_CA","4ddcdc23":"# Monthly Analysis\ndf_CA= df.loc[(df['state_id'] == \"CA\") & (df['year'] == 2016)  ]\n\ngrouped = df_CA.groupby(['store_id','date']).sum()\ngrouped.dropna(inplace = True)\ngrouped.reset_index( inplace=True)\n","1115d691":"fig = px.line(grouped ,x = 'date', y = 'sold',color = 'store_id' ,title='Total number of products sold in each store in California during 2016')\nfig.update_layout(width=1000, height=400)\nfig.show()","aad9ed54":"df_CA= df.loc[(df['state_id'] == \"CA\") & (df['year'] == 2016) & (df['month'] == 3) & (df['store_id'] == \"CA_2\" )]\n\ngrouped = df_CA.groupby(['cat_id','date']).sum()\ngrouped.dropna(inplace = True)\ngrouped.reset_index( inplace=True)","25640707":"fig = px.line(grouped ,x = 'date', y = 'sold',color = 'cat_id' ,title='Total number of products sold in CA_2 during March 2016')\nfig.update_layout(width=1000, height=400)\nfig.show()","150da4bf":"# Monthly Analysis\ndf_TX= df.loc[(df['state_id'] == \"TX\") & (df['year'] == 2016) ]\n\ngrouped = df_TX.groupby(['store_id','date']).sum()\ngrouped.dropna(inplace = True)\ngrouped.reset_index( inplace=True)\n","674db3dd":"fig = px.line(grouped ,x = 'date', y = 'sold',color = 'store_id' ,title='Total number of products sold in each store in Texas during 2016')\nfig.update_layout(width=1000, height=400)\nfig.show()","22850087":"\ndf_TX= df.loc[(df['store_id'] == \"TX_2\") & (df['year'] == 2016) &(df['month'] == 5 ) ]\n\ngrouped = df_TX.groupby(['cat_id','date']).sum()\ngrouped.dropna(inplace = True)\ngrouped.reset_index( inplace=True)\n","48c34bdb":"fig = px.line(grouped ,x = 'date', y = 'sold',color = 'cat_id' ,title='Total number of products sold in TX_2 during May 2016')\nfig.update_layout(width=1000, height=400)\nfig.show()","96a31538":"# Monthly Analysis\ndf_WI= df.loc[(df['state_id'] == \"WI\") & (df['year'] == 2016) ]\n\ngrouped = df_WI.groupby(['store_id','date']).sum()\ngrouped.dropna(inplace = True)\ngrouped.reset_index( inplace=True)\n","a1f72660":"fig = px.line(grouped ,x = 'date', y = 'sold',color = 'store_id' ,title='Total number of products sold in each store in Wisconsin during 2016')\nfig.update_layout(width=1000, height=400)\nfig.show()","446983d1":"df_WI= df.loc[(df['year'] == 2016) & (df['store_id'] == \"WI_2\")&(df['month'] == 4 ) ]\n\ngrouped = df_WI.groupby(['cat_id','date']).sum()\ngrouped.dropna(inplace = True)\ngrouped.reset_index( inplace=True)","ff1f5be5":"fig = px.line(grouped ,x = 'date', y = 'sold',color = 'cat_id' ,title='Total number of products sold in WI_2 during April 2016')\nfig.update_layout(width=1000, height=400)\nfig.show()","cb2f7c10":"## Plot 14 :- Wisconsin","4ae1c4b8":"## Plot 12 :- California","ebe92e82":"Observations :-\n1. HOBBIES category items have the largest price range.\n2. FOODS category items have the least price range.\n3. The median price for HOUSEHOLD category is more as compared to FOODS and HOBBIES.\n4. The distribution of price range for all items seems to be very similar for all the stores.\n","55515fe3":"Daily Analysis","9b4dee6a":"## Plot 9 :- Total number of products sold in events in 2016","291c74b2":"Observations :-\n1. FOODS (FOODS = 5902) item category had the highest sale on April 9 2016.","1f5c5186":"## ML formulation :-\nWe will do some data preprocessing and feature engineering to get desired format and some new features respectively . Once the data is ready we will pass it through different machine learning and deep learning models . After the model is trained we will predict the values for test dataset.\nWe will pose this as a supervised machine learning regression problem. In this problem we will be using LGBMRegressor, Facebook Prophet and a deep learning model.","ac235791":"## Plot 10 :- Products sold in SNAP\n","199b87af":"Observations :-\n1. Most of the FOODS and HOUSEHOLD category items were sold on Orthodox Easter day in 2016.\n2. On SuperBowl , Valentine's Day, President's Day, Easter ,Pesach End, Orthodox Easter and Mother's Day more than 30000 FOODS category items were sold in 2016.\n","dfc95c94":"Observations :-\n1. FOODS and HOUDEHOLD (FOODS = 3887, HOUSEHOLD = 1423)  items had the highest sale on May 15 2016.","59140d47":"Observations :-\n1. Most items were sold in Texas on May 15 2016 by the store TX_2 (proudcts sold = 5866). We will look deeper into this. ","f703c634":"Observations :-\n1. CA_3 sold the most FOODS and HOUSEHOLD category items.\n2. CA_3 sold HOOBIES category items more than CA_1 but the difference is very less.\n3. The difference in number of items sold in HOBBIES category accross all the stores is very less as compared to FOODS and HOUSEHOLD categories.","2c4a64ba":"## Plot 3 :- Total number of products sold over time for all categories of items","16a9900d":"## Metrics :-\n\nThe performance measures are first computed for each series separately by averaging their values across the forecasting horizon and then averaged again across the series in a weighted fashion .\n\nForcasting horizon or number of days for which forecast is required is 28 days.\n\nThe metric used for evaluating the accuracy of the each series is Root Mean Squared Scaled Error (RMSSE).  \n\n\nAfter estimating the RMSSE for all the 42,840 time series of the competition, we will calculate Weighted RMSSE (WRMSSE) which will be used as our final metric .\n\nThe formulas for RMSSE and WRMSSE are given below :-\n\n\n![image.png](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAkcAAABFCAYAAABAFELVAAAgAElEQVR4Ae1d7VNUR7rfvwT4MvBF2Wyl1A8W3puy1NQmXiumdGujy+q1WDeJFGWRTVw28RoLakGXWrTUlVzxXuIdvBNCiIoI18noyIuiBMEdMSPhRaYG56Xmb\/jd6j6nz+lz5swwL+fAMDwfLAY806f76V8\/\/eunn5dflJWWgP6RDAgDhAHCAGGAMEAYIAwoGPgFCYIWA2GAMEAYIAwQBggDhAEdA0SOnLacHXBjOh5FIu5Fs9PvovbJCkoYIAwQBggDhIG8MUDkyGkQHbqOEU81EpwgMZJE\/0gG9mOATnz6iY9kQbIgDBAG8sUAkSOnyVGTF9NdH+TNYvOdaPo+KQvCAGGAMEAYIAxkhgEiR0SOiLg5jQFqnzBGGCAMEAbWFAaIHDkN2CYvJq7sWFOgoJNFZicLkhPJiTBAGCAMFCcGiBw5TI72X5uEv6k4wUNKgeaVMEAYIAwQBooRA0SOHCZHB7umiBw5LONiXJg0JtpwCAOEAcLA6mGAyJHDG\/fBrkn4Tq\/eBNPiItkTBggDawcDm9DonUPC16i5IlT+5iy8\/3yFWDyK1zND6Djk0v6Pj6u8Gh0j0whHokhEXmFmpB2Hy+U5\/wDuqSVjYExVI7wzISTiS5h\/aH5e\/i59XjvYsXeuiBw5TI5qe4fhOWDvpK1XsK7pcW\/cj7bBSUWBh4N4eKUaFQ5jb03Li2RjJADrRB7bmvow4H8okaMP4Am8wO3jG1BWvh2XR5ew2HfcIBvmupAYu4yd5SWo2HEWQ6El6UDqwuGuQfj9AYkcbcK5kRDGLm1HRfledI6biNM6kTXph\/T7MpEjhxdCs2+KyJHDMl4Li5xdr87cqkNlqQs7Lw0jtnADn5BcDJvcWphH6mP6DSUf+VQccuOxtxHbmrwSOTK+r7b3BUb\/vsmAm7fbHyGmkqOyjfXoD07CrR5ItzUN4nFXNQ53TUnk6BR8kUm49yltv31lLOX78hkPfdc4d2tNHkSOHN6giByt7QXiyII+1oOZkVZscRh7jvSd+mzYmEnGNq3v8o9wc+S6ch3GyVEL6m\/1GKoKVBzqxIO+BmxLwuB2tNz7WUuw+\/ybw6hkz1S1we9r4c+zw8l0Vx0u33LjYGkj\/HLFAva+qU7sT2rXprFRu2tyzRA5chS4LrT676HVcP9NC24tbiiV73yMy33jmGd+DeEgJvouoO6dDdkv+vJquO\/dwMkqwsFaxAH12SHcMoKSVD1AL7lUcagD929YEaMSMMvRov+scq22qR63gwsYOFECRoiS2gwIcqRbjracHybLkaP7oEOYcbjPRI4cFTC7L9cX+FpXrMrpy5ztm42ROUIOotFWWbqw98wNPJn4Hqd+tYqL643j6Bl\/iif3u9F5+mO8t8mFik17UHe6A733H2Ji9Gt88obSv7fOefF8yI3PdpgcRoVcyqvR+UMvESMhD\/qZPbleDzJjRMnfovnkMYvRw8FGxWJU3oC7\/cxZm+kdxWWB6aXY6AVOjso21uF2UPY5UtYmeyboqVblvQMd41FMe6pRofoxUS66VdSxBYppIkeOTsx6IEclKKv5BjOjbTZeEzEnyknM+1oUhefoHNmrFCprriMw+8gyosY9cgfN3GLkwsnBPsOVwVonztR\/e3G0fuX5Dr4YUCw+Sn64d9ExvmS0APFINqZbx9Cxi12fNaB\/cg6vmeUp8grPzVdvm3+HztEFJOK6\/2fFoXY8nmXthjCbFN1Gc7l+8afPPZEjRzfeD+AZ7UGto+\/QJ9MIaOZ0uFyBU8Wqte14N56Fl\/DS82fU9zzmEVWv\/S1JZMfaclQCZpaevtWBfh5uG8LwGaPDpLFfqfqr\/73iRB8Wgz2oXaPXkdvO3EOYm+\/1Me25MsZDkXUzf\/FYFLOdX3pexwXJIkdZHP4avmsU8Un4yRE\/GezJRI4yEFLuADwF3xS74zZNYPketHqfI+BwQVplQ15C4JrpKqx8O74ceIEEd0rcjhMtddh55h5eLzxC75+2o+L491gQlqADbkwn+QIw0iVOYS40+5YQm+rh10lHv53Os1zKu+h8GsWzq+8arhyafYLoifeWoEzyU3AkC7k8di3vinqNyGRiIkA6TmrQG1xKiqrR\/9+EBzM+6HfD3JPcCC+EAcLASmOAyJGjG1Ej\/KYNtLKmQzXnRjF0JoVvim19Uk3SkUl4zInTNrdiNKJbLxr6FzRCwkJbre7grS1HH+Hmz+Po3M0WL7vLl8hLLuPghGQYFzeblEFVG8YiUclvgP1\/HW7PLSHQW2cRwWL6fi59KXWBhQ4n4kan+m2XHiKx8AAX30s9f0xWifF2vJ3Te+3oO7Wx0sqU3keYIwwUDwaIHDm6eTXCL4eI1nrwpO8kdpazUNLoypQV2d2OiUgUsSm3KWusDGLduVEhOAF011TjUvtx\/EqSjyU5YmRm+joOs+c2t2Fs+jqOvteCc\/W\/zOn0zxO6ifakd5eVqhYqX6PqqCn8klRHTcOz8tjy\/MzJmkT4qhrhn7Ugm+b3n+hDOG5B8szP0e854YQ2oTxxvYZwx3WCpfVaWJMz+Smt4TU0dsL56uGcyJGTC2VXOya06xh5kleQHJWWYNv5Ye7vwqMzrMbL+hnqQwP\/vx34x8MQYrP3kywjVuSI+RuF+z9VNrhd5\/E4nF86fn59ZimzEmz5+wPEQv04WV7CE8XNpyV8srzz+cyuyNRrvvJqeKZewt+0dfkNnck0\/hI3j+XzbvoubQ6EgbLNp+BbUAhQbKoz2U3BSqeJv23cj8sjc5IbAMmT1lRmGCByJBaREz+Z1cFyo19ZclRWuhUXR1lkxgvcPJb6Kmj1F837cE9FMd\/7kTX5YJap+AJ8nSwizKtGfmUG9HzGVtv7Eomn36DT9xKBrkydQFd6jp2XQz4ypO\/S\/OSDAZY9O8ADTJayWIOqzHd34JnmI0nzkM88rKfvEjlyghSJNguGHCnZYpnPTsx7ypp4iD6v6k\/F2Xk6paP6JlwcZeG6GVxryePgV2PLmN5NvmEGJXCsB\/PxKBZ92VzhKeQocO39ApY3bRSGeZYxQ58LDLfKNTorPpv9Ia8a3dN0rUZYz07fETlyUgkeuo4hy41+5a0K\/OQV1msOFeZCyYwcadd4Ts6d3DYnR2pOFfnvaT8TOSpMjGWnIGkMhSSvrWj1s3xFUSQWVs5yTBgoJAysXF+IHKXd4PKciCavVOxQbmuFyVE2vjI2y4P5EFmG2Ysq9V6W7VbIZplrNebIHlmCv8l0Nciczq1SJmjtivZz+8kjz5IsSy409DP\/I1NftHeu8Bxr781tjPoc0PdJFgWMARYQofofZWfJLeAx0dqV9oDCmSciR04CMxU5Km\/BUDyagjjZDY6taPbNKanyDWM1hd2bCYaUQ0hPXMhM2nr4fyabiCU52n8Bd\/vOouW7QFJNo3QO2Ty5YjyA7kOSjL64gcWwfmVm+zVWeTW6WXkUqZxBWen7uPr4lZ7U0ap0CjlkF6TCywSz9Iy0vgw6ozD+XsEKN\/PrtSVMXDHmQ6O5K4w5KoZ5IHLk5OJv8mLsvJwt+i\/onwliPiTS4YewOBPEkw7n\/FJYpNpry6iuTzEQUu\/hsyYYLuw9fx\/zkRCG\/\/7vuHgviNdxlmG7JmlDtCRHqsy5RcbksJ4ylF\/2GzJZcRr65xxLuMjJmhpGbLCAMfIT7MYfU+GHQvmTsFAMCpPGUAibr+R\/lK3\/Yar1Sn+n9WrCAJEjk0DsVH5sozdsqA6+y6rf3M\/IMqrLhZ2t9xCWrEBZEYw3avDXU3tw1BNA+KdBXP7NBrDEiFqUWYZWJytyVMZJUDb5gVgSymyet0e5sxQG2ngt5pWPjZJAksK1wIbVWqW\/ZbsupZprgetpcrhl2y49T1hUMJA1OWr0CquHfpWRCM\/h2WAL9kq1sPjmoJ64zVcxullUaUPOFL3teAceiCKC\/PshLE58jSNCyVTVofPehOEq5fXCOLoOq6A+wHL2SH3T+hBd8YzFTAarRo6k3CDGazFZNuKKzIJgLEtw2LXcAu5+rvjcNPT\/hIETyYolW8tRWal1+ZCUC3ZfJwIsaWT5drS2N+EtgROHf7J1wHBbWdOOf9Sax03lQ1LOl8PzspLvNeo4KaeVsHJqVtEdaPT+pBZPXdDWiWVyw8grzIy4Uc8LFKu4MqxFU9SVmjlerHG98nwJikmXWs6r7H\/kPZVUC9LyO4WOP4Edad96vTAB75k9avJbhgkWfafqcZMVnY1Z5LVbHGnHIa3SwFbUdw1hRtxaRF5h\/nk3PhHyYCWtBqV9NTyHuaHzaoZ\/qWSS1C+OOYv3r0m5CzlIP7MmR2VVF\/CEC2gS7n0lKNv4a1zhOXRMPjTl9eifExuxvKAlxh+PIuxv0Uo\/8IKjrO3AN6jdxDbdDfjs9ks9\/Lz8UwxwZ7wpfPfxmxwslX+6iXmDz4ca7h2PQvc\/2YC2IVP\/JCE4NZkHu8Y0RejUO2xpNxeCwZyjw140c0LMrujuoXVHAzr+ZrwiTE2OXDj6bQCJobOoNM0Fx8FCHxoksp1ynDzxZBSx0GO4zSVSTO2mbCOH5z658RIxVtF7MDm836rwrJ3vprbMZHSVft94Ej71IPasc6+6eW1Cs0+NqNLIUQkqztxDIm7K0VNeh9s\/Mx25BN\/pEpSVv4nPbrFyNVHEtEzwbGzbcWVc6FI5wIEFBbAEh2Kj1C0oxaZLU2F+y+lBLPLxz2WWnDWHtZ7q3c78XdWLgnSUv4lazyRikUf4apeOc1b\/8on\/HqYNex+rUsAc1pcQM+V14kR+wYu2dzZwa27l8e8xo1m2FczGpq6r+64LOy8NY1Ek9y0t4fU25w1tunDYM5XkM+qMTPRxr2T72ZOjQ9cRZGDUMiqXQDtBScqAl5KIP8STMbZwdSfaLU1ehIPDGOPMV1UKKmBZfS+20FNeV3A\/jigSP6erdM82avZO6SS3SguioX8MngOrM7FZgSgXgsHmQltcx3Frdgmvn3YbT7ylJbAmR0okl6bUDYuOyUstDTLSZrBGZjWmVZrzyhqWoPIROlaQqK0FuRRnH\/UTtWYhlk\/+mj5UDoSx8XbskXGpBmYk4lKaCGElEpsjf55ZdgN4MvaS60fN0s7eFXmIsTHFmq8fBktQbLo0NX5k\/6NhXJQtbrKs18xnF1r9Ub3qAOs3x5RsYFDI9tDVDkwY6j4yshyA3zuMmLQ\/l5UulyIlg8ja04OImffdJq9kgFgD+1yWGMiaHLGipHxTE1XbSzfh3IiyOA3FStnmOdUJt1pNnSuP8o9wMzgH37UetdK70VdEazvyEsOX9idZFMp4BBAjPkuY91\/AbzdaTAizgkjkjTNkra8Wz2cpsNSLNLntZp8R0Nl8l551Ye+ZG3gy4dFNvw7OlR3yfuucDz+NuPHZjlTh\/ckYseO91MZqydVMjpQT+ExQsf4kVHKkWHGm0G0mzBaHvT\/2KN815PJiei8yCDcrZqxFubKs9yEEutzw88zRxsNgsenStBjnqUqUPSh9DclMcaIQFM2ix\/WOcpUlSLCQ72Lf8Yz96pp9upEg9XiUw70cyFPxeT\/CMoEuZeT3Edz7GKmR9pgDbgRG29DKjAyG6FoXTg4u8NxQrZa6SXFlYJajo1Z7amkJWJUAgUnuyzpW\/EW1syRHAjRqdfTyN\/H7Sw+4WfP1006DU5wQJi+9EI\/yqK09V8bwerQNe88PKwRLLsrKAFhejY4xYSZewrzXfGXhwuErj1QzahSx2cGkEhLMUVa3SCjm5tQZl9li0RWc+Xv67xIAs9igiRxlqozoudTKkmRTuLLRr\/D5psktOQ9w7rxX0UGcHClWI3ZFUWHSHYc9AeU5vpFtwO4\/9\/ASGWa9xnXaeDsOqrqNWdY54Qr2oPa4kr09Yb5eWRVdqliKdb2p6F\/z74Jg2DqvVS0Y4jcGuenqpL6o7iNaX9WDub6XMLL0Ar1\/WG59\/hL\/cWcYN49vRW3vMDw1+3HZP4HeJD9FtR1uJVJdVko3oOrIBYwumK5jSz\/CzQCrhcn6IG5f3kXH2I9wH1D2M4OhguGuqg69T0NIMMPDedl\/SXlvxXttGJ5dQiL8I3qPm2tHMv9S41zKvm1JsjPhfK3+f5bkSFxZyYKaxcilA9hs8A9RhMnYr3A6nO51w6+Gjgunbuvrs62o751Uc8gsYbx9RxIz33ZcUSJs0cXGLqlOY8okC3OyMnmMzOkOkCs7SezdwuG5JImwmRWG3Dfz\/9HvMt7osxUeZPzQ5+U2LPv+X6R68DcpFnS+eYqrMeY3xE79EavrnuQNJxEP4Z\/ffYHdptM702lcV7KrDWYV97nhCSyAvVPo14SldbxYdGkm86WQAtmHNb91oFiKxFXlwa5JLC4sQCMFm1sxPNKm+cumfVf5dnx25SbuP53C4swk+r\/cnkSUxfeFRUqs8djsMHpPmcgMI2p8vvV9lvk5Bhhp5vUnjVZE0Tbz4T16lRkX5uA7LaeYUeVbvh2n+58jFjFVUuDXv7rVi\/kacR+5IiFBunyMOMuOHAl\/ozi7DnNhX+c43\/ST7tL5BKn36KqiiEWWMMMmj7Fe1QkxdXZh\/apOmKbNA+AV2rkjnk5AWHI+VrjUaA41DtjcjnO\/s8Uq9221+kHvdW6OSbbrXbYaOerpxkyoHyfZIVEjRx3ofLqEwLUPkg54ZZq\/kbKRVX45gDDTZ0mBCExfqgc8blVgtQWXuAV+W6luudItGmZMFoMuNY\/J\/Lvqd2RrSRGFeHC5Mifnn\/rQoTkgu1Dbcx9uzZ9UuVGRr8IM62Ljfly+N4GJqVE8vtONyx+mIkfqfKpEl7uERMbQsds4XmZJFKSN4W\/a046B52oACyPQZiuigcSo79D84Yxtl6n7swFP7Po3bZvmNorj96zIkcZqhSOu8O8x3YeWMWEK5y21aGci5EUzCyvUviP7GzGWbmS7wuQsrEvsd\/GZA08QNfEeBgBN4UgOjvzaLJ31yKlrNSJHBgVhWKDFsXhofDSPghyFQ3N6tmZBjkILCLOrL4NVXZWZ8DfSHGdPwcd9h0y6il\/nqLqSHzrZ4U9cHYnvyLpzNXXp6lyrVRy6jun4HAZO2Ovrx+Y23N\/AnZyZpYVHHI62YduxHox6qlNaf4x64ZdovDPMr6r4tdqBrTjZP5biWk25mdGvxBRDgiBCot1GLxurgiMWDBWLzGHojHIVxt1YLK2I+lpl40pdgFzZD+V38oArQ5su1PZOan0Q\/Sq2n5mTI1FGgZ1uNGcv\/ZpND2VViwOOX8ZOtiFyMrSEsfNs8tTwP27xuYdWoTRUUjNzq447YVe+c1apn6OxZtXXKfg96pnJeeOv0eZjvknG9PGK45oczbYBR1kYJLd06eBYmUn8AB7\/dRxeDVJQVQfPGAttXekx0\/tWBlvp5KwoN8PJbzUwuE7eKchRQiZBghzFlauvZExIBVRZji4uK\/2aLXz3pBqMourLuZv4jOtKhQwpFvgSKOV0GFnSrzzEAbG4dGkavKvpXaYzJitp2jJhlh\/Qgy\/wzKf6vvKIrUk8e+iW\/GvVw7V8SDe1I+a\/2SeT2OR+KNbDaXxXo\/8fd0GRiQlPHxHAdzUKEWRWJO3mhgc8yftzCbihYuJrNXhJ+LXpRJIZPOb\/7zR2MnwJH2Jt32X9UCxNuj5xYfPH1xFgV8VaDiW9v2KsxfAzY3KkhetzYiNONy40+0RSSOU0o+TzUPxCkjZnYRbmbUh5h3adwq3xgF5WgyVCG7+B1vfESWAHGm+M4adZUc9qCeHgGPrlxFi7TuGHn0RflPeLe9uEISx2pSayEf4Vf68LO7+8gRe81pikMFMs1mIAMI3BjGciRyuJCYUcicOfOhfClcAcui\/WoUaeFD0lLAWyjuW6U1jHtQg1ea5N6TDENUlR6lJ53PJnpW6kPRFqcrvKZ35TIl\/VcYf7SXjMUYef92NeygmUG\/7k+dTdMRT3kTmM\/ufvsKVUNRKw\/dNib9GIelzPhfX23+4m7Zu9ks\/Th9cnMLcQUn1iQ1ic\/AHtNUouJDaO3X+5rUaWm\/ZUjdQnyy238RdeOxmTo2IZ8MqNw4ocCX8rQS7tBcRb5wbw8OoRVHISKkzv9r5j5eRH\/c5J1uUNuLtgcqgUmzL9TPb9IZmsWZlwy5nZeXgV5pM5a6f2nyU9lpMeW4V5NPeTyJFjk9AIv\/DNkt\/BToMRkVnaoYVD5GjNKnzzAs3299\/\/z0P4msyhuA7hTMY1fV63mMsWo7Y8v5vlflrQfG1saTMnDLMgoHF0\/vYI2posHO9zapPW6+rNpy57IkdOgZc5UgpTt\/wO5ohpRZrkZ\/L9TOSINqp8MUTfJwwVKgbUpI+LwhdoVftZg29fLPGce9YJFvXNthA2fOpD5vNB5MiphcUIigU5Yk5+0111qO8axnyEJbK8kVkNsWz6SeSINrZs8ELPEl7WDAZUJ\/WFQTQWuUMwEZnMiYwTsiJy5JRSYKncvadMSpdFpPyMJyN30Pun7ajY3YFnWliujUAgcmSSu42ydQov1C7NGWFgWQwopVhe4OYxEaxDa9sJYkBtloDIkVMK6dB1DHWZ7qB5ygIpsoWnOZBSGtjVl6IkRxvw29Y7mJz4Gh\/aJaeCbOdf0DIwjpGueiW81tBHRQbPQywqM4TZkXYppJg2CVLoRY6BKqXifKAr0xxDujxYlnE9HF3\/O2GGZJEKA0SODJuPjUBp8iYvRjk5ZmkJRM2kt+3uAw8BXrI1gkKUfNHSI6jpGOTfefixWsMn9uJ\/8cXxbkywjTx8H615mcC3otkbxDPPkeRixHbLriDac2HnGS\/mp+R8Kmp1bjXXV8WOCxiLzKG\/3kbMFsTYaTyplPX6\/ruSGyq3sH1Kb7G+sZObTiFy5NSGYEGOmL+RnplUyRFl62lm31d4MhPEIs9zxMoMvML8TBD9X+QGDsOC4tEhUcSmOnHQIDMXdp66jRk1t8auT5tRv6MFQ+E5jPcw60cdbs\/llzBs2\/lhtVyCGIeaeI0TND0niJ4nxqE0BlJ+Gn3epPwkFj5mBhka5CbGkuqn4lthVbBUafMj3Aw+wLm8SGeqd9Pfc583kp0TsmNFy2OWNeqWk7dy0FiMRzF0hq7inJibYm2TyFFWG9ZyC1H6\/yavaTEqGXBFwrcyXtaELdg3cdTTh6v\/Jn3XqT7l2S5XUHFzhWjWb6V+k5b0k1nInnZgD3sfi9rLKzqvBr3B5LxQFcd6OCEzKDxeSXsOoxZVp+1ZwFtxcXQJCVMCtPpbPyM21YP6KpvnkJWLiDzCV7vM7bpw+NoP6P+cQvbtmVezfOn3QpJrxSE3Ary0iikRoYX1WrZkmz9r+ilPPVhIsqG+OLdWiRw5tFCYFcOwGJOqJW9Cqz+ERDgI75rJS\/MuOsaXkIhYZImV5MjGLiwrLMts0HMEhy9cwidv5ABkVpvPsuih2VTOsuW+RC7+CNkomIomL2JSniquuGe9aLabGHF5KoTaWNDShcP\/dRe3iBgt67ybzbzSszmsTWnNOyc\/vayKmexk93v60h3O9b9Q5Ur9Wm7OiRw5tMCTyJFD71lugm3\/\/ypmzWDp66+ncAZmyky39Lx9cRivIy8xnKM1h6fwt0iVz8b1x54XSHALlVKVe34l8p5sbsVoZAF3P3ehjDmIzqYnivnKn\/l6hbXSBMxiNKSRaVZLcIDq5xFJKhbdQuMgLBcQBogcOTQZB7uGcfNYcbJz5gMUi0chCmDmSwDSfZ\/7EWmFjk3yZFal+Di+u2rhvOzQvIpCjOG7\/43uqZfwO2z14+MXvkyq35d8YjZYJx0bs0nu9B7axAgDhIEixwCRI4cmuKF\/DJ4DuW0q8ua3mp9TkxbV98byuiu3Mad6V1pyVKrWqpOLQ2YynzzVwTL+CymsVayfPMrQ0vfK3rGzdxnIUSZjo2do0ypWDLAo3J97UJvp+DbuR9vgJMLeRsJEpjKj5zSsEDlyCAzNPociphzqbypyYvl3nr4\/hMA1Ux4nB\/qW7lqtTCVHupO7\/eTEavycHIX60JD3eEXeokE0p2iLVdrWr9VWZnxWY6a\/kewLCgNS5KjxAKlGr+6\/gLt9Z9HyXQAJYXlNscYKalzUR42crPa8EDlyCIzNvkm4960hhVpVB8\/YnNGJ3FI2Tvj3CJJgkdwwpUO2mvfHIsM4y6LL\/I8qLPuf75woKRhiSe0zZ\/XJLKyF+3B58Aba\/votgnE9HYFRIZgjHPPtO33fKF+Sx5qRh0qGjMEJy88fWV6Xl9GawYAj+jy1fIgcOSLwTbg4mmrDSz0ZqwNSF3Z+eQMveG6kALoPpe\/ftiYvFi2csZmFR0SolZWaiYKUC8gUfst9Ztg1V8rkhkooP3eANsyVWmMpbswwvr\/jEcJa2O8SfKfTjydrmVe1YCgURdBTLZ1w\/oL+hRC0E+xUJ\/Yb+pqmD\/yKLwVWeITjGDqSQvnTtJfpe+k5af5InlmvgxXHz7vofJr9WiByRNjOFdtEjhxZ5CzMPMWG58j7cl8Ab50bwMOrR1DJN+llrgJZpFrYOjpLT8+fB1HgsklObpicBLIEZbJZ3WA2Z9aWF+j9Q+4ySb2Y5OSTJlmd6MPiSCu2aPMrP2v0b9JJpLB+WWFluSSQToyP2kw99ySbVZVNeSP8U249Aa28\/g0HLuNaInJEuM0Vt0SOtM3MThDlSY42HoHnx1eIRcbQsduFved\/wGw4itjsoEP5dMQmbdrwZdlwPyPr6KyKHWe5NUWLnEoiCpnKNlVywyzKhzBrSzZOm\/IY8\/hc2\/sS2Zr8+aK1tBylKB+SR\/9yVRD0vUyxS885ipXTgwgPnsTOL1vQkHFWeBeOfhtAYujsOik7RBi0E4NEjhzZcD6AxyedcrJ6xxtouX0HrTuOoHt6AUP9N+C9tB+VvGhtNAOfoBwXSFrL0SY0euf0ayPDSU23ighylEwUlrlW4\/JZLrlhhoVnTw8ixkL\/Nx5Bx8WPV+jq5H24p9iVJCM1l9Dyr5nPQd57PsEAAAKvSURBVEXNNwjG76Nto\/hOusKz4hn6aacSpLYKH09bztzH63gIz7oyra9o1jlpDn5Z6efClxXh2Z45InLkyMJohD9NKHhm4D0FXySKaY9agZqTo1RO3qmvcDQ\/GAvHZUM\/0pKjbMCWC1GwMblhfS\/mI1G8nrnjnJUtCTM78I+HIV7LbuJa5hXDWSSaPj9RyWcrG3nTswYcJ80NyYfkQxggDGSPASJHjihTG8gRj9KSCouyemVOXhfZRo5yIAqU3HCFLFzZKwhSqiQzwgBhYD1igMhRXuTIhZ0fXoD3+Y+mEO5G+EfbJOfc7BcXz+8jFWxlV1WO5ruxjRxlP9b1uPBozIQTwgBhgDBQuBggcpQHOfrY\/QCDrWdwOxhFTI5UYpXoDRFU2QKApQKIYr73I9WioOS7me6qxt7zfeiqzba9DJ5n2WfjS\/A3uciKkQcmSNllgDWSL60xwgBhoMAxQOTIhgna0uRFOP4CN4+pxIJZYfIiR59iICTn6HGhoe8lYpGXeHwlc5+WjDbqfV\/hyUwQizzPUZT7zczPBNH\/BW1yGcnPBvzQewhrhAHCAGGgsDBA5MiWzY0lKIsiNtqGbay9A25MaJXUC2vCaQHSfBAGCAOEAcIAYSA9Bogc2UKOSsBKVizG5zBwwoWyYz0Y63K+7hiBOz24ST4kH8IAYYAwQBjIBQNEjmwiR0rJjCXExtuxp8lLYdm2yZUWdi4Lm75DuCEMEAYIA7ljgMiRjZt4xbEezMQXcHfwHpEjG+VKCzz3BU6yI9kRBggDhIHsMUDkyNZNfCsujrLK8g5msra1v9kDhhYZyYwwQBggDBAGih0DRI7sJht\/6MYMkSMKU7UbV9QeYYowQBggDKwYBogc2Q62TWj2LThXA832\/tIJqNhPQDQ+wjhhgDBAGMgOA\/8P8WWIPCfvru0AAAAASUVORK5CYII=)","b7e1cb95":"Monthly analysis","b5ac10ae":"## Plot 11 :- Products sold on weekdays and weekends","c6eb5520":"## Plot 8 :- Total number of products sold for all subcategories of items per store","3180eb49":"## State Wise monthly analysis of 2016\n\nFor 2016 we have data until 22nd of May , so all the analysis done will be upto this day.\n","80d72f3e":"Observations :-\n\n1. CA_3 store sells most number of products daily as compared to any other store.\n2. The number of products sold daily increased for CA_2 just before the mid of 2015.\n3. The number of products sold daily increased for WI_1 during the end months of 2012.\n4. The number of products sold daily increased for WI_2 during the mid of 2012.","3ab39cdd":"Monthly Analysis","1612f4b1":"Daily analysis","48ab9874":"Observations :-\n1. All item categories were sold least on March 20 2016 for store CA_2 ( FOODS = 1406 , HOBBIES = 215  , HOUSEHOLD = 679).","787a127d":"Observations :-\n1. CA sold most items in all the categories.\n2. CA sold almost double the items in HOBBIES category as compared to TX and WI.\n3. TX and WI sold almost same number of items in FOODS category.\n4. TX sold more items than WI in HOUSEHOLD category.\n","83a58f04":"#### Highest sold item in FOODS_3 :-","6b8c4a39":"Monthly Analysis","028da3a4":"Observations :-\n1. FOODS is the most sold item category.\n2. HOOBIES is the least sold item category.\n3. The plot for FOODS category seems to have a yearly trend .\n4. The plot for HOBBIES category does not seem to have any trend.\n5. The sold values for HOUSEHOLD category has noticabely increased during the mid of 2012. ","ecc30f0a":"## Plot 1 :- Total number of products sold over time per store.\n","b347c5fc":"Observations :-\n1. CA_3 generates most revenue as compared to the other stores.\n2. All observations are similar to the observations in Plot 1 :- Total number of products sold over time per store.\n","040b7070":"Observations :-\n1. There is a sudden derease in sales for store CA_2 on March 20 2016 (products sold = 2300). We will look further into this.","b9ca62a4":"Observations :-\n\n1. Highest number of products were sold in Wisconsin by WI_2 store on April 9 2016 (products sold = 7852).","6608c080":"Observations :-\n1. FOODS_3_090 (units sold = 1017916) is the most sold item in FOODS_3.\n","ed2499a0":"Observations :-\n\n1. People buy more products on weeknds than on weekdays for all item categories.\n2. The FOODS category items are sold most on Sunday.\n3. The HOBBIES and HOUSEHOLD category items are sold most on Saturday.\n","cfaca511":"## Plot 2 :- Total number of products sold over time per state","d6986aef":"## Downcasting","018d1be6":"## Plot 13 :- Texas","e409cb55":"\nRMSSE variables :- Y_t is the actual future value of the examined time series at point t, (Y_t^)the generated forecast, n the length of the training sample (number of historical observations), and h the forecasting horizon. \n\nWRMSSE variables :- w_i is the weight of the i_th series of the competition. A lower WRMSSE score is better.Explaination on how to calculate w_i is given in the pdf present in M5 Participants Guide :- https:\/\/mofc.unic.ac.cy\/m5-competition\/ .\n\n","284cf459":"## EDA","38434d67":"## Business Problem :-\nM5 Forecasting Accuracy is a competetion in which we have to forecast future sales of each product in each store based on the hierarchical sales data provided by Walmart. In this competetion we have to forecast daily sales for next 28 days. Here we have the data for 3 states in US(California, Texas, and Wisconsin).\nThe data files (.csv files) provided for the competetion consists of item level, department, product categories,items sold on a day, store details, price, promotions, day of the week, and special events.\nSo by using this data we will forecast daily sales for next 28 days as accurately as possible.\n","4154002b":"#### Fetching the data","fd70c75c":"Observations :-\n1. FOODS_3 category have the most sold items among all the stores.\n2. FOODS_3 have the largest range for the number of items sold in different stores. It also has the highest variance in sales.\n\n2. HOBBIES_2 category have the least sold items among all the stores. It also has the least variance in sales.","317e8a8f":"## Plot 6 :- Total number of items sold in each state for each category","c7324d3b":"## Plot 7 :- Distribution of prices of different categories in different stores","cdde7ae0":"Daily Analysis","d30ed32a":"Observations :-\n1. CA sells most number of products daily .\n2. The number of products sold daily were more for TX as compared to WI before 2013 ,but after 2013 the sold value for both the states tends to fall in the same range as the plot for both the states seems to overlap for most of the time.","17985392":"Observations :-\n\n1. CA_3 sold most number of items in every category among all the stores during SNAP.\n2. CA_4 sold least number of FOODS category items during SNAP.\n3. WI_2 and WI_3 sold almost same number of FOODS category items during SNAP.\n","6abe2e11":"## Plot 5  :- Total number of items sold in each store for each category","14a1c311":"## Plot 4 :- Total revenue generated daily from all the items sold for all the stores."}}