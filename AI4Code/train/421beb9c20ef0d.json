{"cell_type":{"57239f99":"code","97651f78":"code","cf63285f":"code","4a450732":"code","149fc125":"code","821f4e64":"code","c2658e00":"code","2a7adb68":"code","6a30873b":"code","dc4f0c0e":"code","40072964":"code","ad1d0613":"code","4976e39f":"code","043ca04f":"code","0fb8ab90":"code","a5210fac":"code","d3978500":"code","b3a0cc1f":"code","7207b029":"code","ca3e11a7":"code","9ffc5123":"markdown"},"source":{"57239f99":"! pip install pyspark","97651f78":"! curl  https:\/\/raw.githubusercontent.com\/apache\/spark\/master\/data\/mllib\/sample_libsvm_data.txt > sample_libsvm_data.txt","cf63285f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\".\"))\n\n# Any results you write to the current directory are saved as output.","4a450732":"! wc -l sample_libsvm_data.txt","149fc125":"from pyspark.sql import SparkSession\nspark = SparkSession.builder.master(\"local[*]\").getOrCreate()","821f4e64":"from pyspark.ml.classification import LogisticRegression","c2658e00":"training = spark.read.format(\"libsvm\").load(\"sample_libsvm_data.txt\")\npdf = training.toPandas()\npdf.T","2a7adb68":"lr = LogisticRegression(maxIter = 10, regParam = 0.3, elasticNetParam= 0.8 )","6a30873b":"lr_model = lr.fit(training)","dc4f0c0e":"lr_model.coefficients","40072964":"lr_model.intercept","ad1d0613":"mlr = LogisticRegression(maxIter = 10, regParam = 0.3, elasticNetParam=0.8, family=\"multinomial\")","4976e39f":"mlr_model = mlr.fit(training)","043ca04f":"mlr_model.coefficientMatrix","0fb8ab90":"mlr_model.interceptVector","a5210fac":"train_summary = mlr_model.summary","d3978500":"obj_hist = train_summary.objectiveHistory\nfor obj in  obj_hist:\n    print(obj)","b3a0cc1f":"train_summary.roc.show()","7207b029":"train_summary.areaUnderROC","ca3e11a7":"f_measure = train_summary.fMeasureByThreshold\nf_measure","9ffc5123":"[Source](https:\/\/spark.apache.org\/docs\/latest\/ml-classification-regression.html#binomial-logistic-regression)"}}