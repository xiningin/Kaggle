{"cell_type":{"36c959b5":"code","6cda1172":"code","4efeca83":"code","fb97cb56":"code","5a911785":"code","469b928b":"code","3b9677d3":"code","35a99bac":"code","f451c152":"code","875b2009":"code","dcf38f5c":"code","8b58c357":"code","3c76ff01":"markdown","a61769e9":"markdown","930528f4":"markdown","c0050f41":"markdown","3a6d788b":"markdown","7deb0800":"markdown"},"source":{"36c959b5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6cda1172":"import csv\nimport pandas as pd\nimport numpy as np \ncv_details_file = \"..\/input\/..\/input\/datathon-guess-the-last-one\/data_cv_details.csv\"\ndata_job_details = \"..\/input\/..\/input\/datathon-guess-the-last-one\/data_job_details.csv\"\ndata_log = \"..\/input\/..\/input\/datathon-guess-the-last-one\/data_aday_log.csv\"\n\ncv_details = pd.read_csv(cv_details_file)\njob_details = pd.read_csv(data_job_details)\nall_train_test_data = pd.read_csv(data_log)\npersons_predict = pd.read_csv(\"..\/input\/datathon-guess-the-last-one\/son2_basvurular_test.csv\")","4efeca83":"cv_details\njob_details\nall_train_test_data","fb97cb56":"cv_cols = [\"Unnamed: 0\",\"departmentName\"]\ncv_details = cv_details.drop(cv_cols,axis=1)","5a911785":"job_details_cols = [\"Unnamed: 0\",\"jobDescription\",\"maxExperience\"]\njob_details = job_details.drop(job_details_cols,axis=1)\njob_details.minExperience.replace(99,0,inplace=True)\njob_details.minExperience.replace(98,0,inplace=True)","469b928b":"cols = [\"Unnamed: 0\", \"applicationDate\"]\nall_train_test_data = all_train_test_data.drop(cols, axis =1)","3b9677d3":"job_details","35a99bac":"cv_details","f451c152":"df1 = all_train_test_data.set_index('jobseekerId').join(cv_details.set_index('jobseekerId'))\ndf1","875b2009":"df_final = df1.merge(job_details,how=\"left\",on=\"jobId\")\ndf_final[\"jobseekerId\"] = all_train_test_data.iloc[:,0]\ndf_final","dcf38f5c":"persons = {}\nfor p in persons_predict.loc[:,\"jobseekerId\"]:\n    if p in persons:\n        persons[p] +=1\n    else:\n        persons[p]=1\nall_seekerId = list(persons.keys())\ndef sort_dic(dic):\n    return {k: v for k, v in sorted(dic.items(), key=lambda item: item[1])}\nall_seekerId[:10]","8b58c357":"with open(\"new3.csv\",\"w\",newline=\"\\n\") as f:\n    f = writer = csv.writer(f)\n    for seeker in all_seekerId[:200]:\n        dic = {}\n        unique = {}\n        for key in df_final.loc[df_final.jobseekerId==seeker][\"jobPosition\"]:\n            if key in dic:\n                dic[key] +=1\n            else:\n                dic[key] = 1\n\n        if len(dic)>0:\n            sorted_keys= list(sort_dic(dic).keys())\n\n            result=df_final.loc[(df_final.jobPosition == sorted_keys[-1]) & (df_final.jobseekerId !=seeker) &\n                        (df_final.jobCity==list(df_final.loc[df_final.jobseekerId == seeker,\"jobseekerCity\"])[0])\n                        &(df_final.minExperience <= list(df_final.loc[(df_final.jobseekerId == seeker),\n                        \"totalExperienceYear\"])[0]-2),\"jobId\"]\n            for key in result:\n                if key in unique:\n                    unique[key] +=1\n                else:\n                    unique[key]=1\n\n            if len(unique) >10:\n                l = list(unique.keys())\n                np.random.shuffle(l)\n                job_predic = l[0:10]\n                final_job_predic = list(zip(10*[seeker],job_predic))\n\n            elif len(unique)<10:\n                job_predic = list(unique.keys())\n                final_job_predic = list(zip(len(job_predic)*[seeker],job_predic))\n\n           \n\n\n            writer.writerows(final_job_predic)\n","3c76ff01":"# Bilinmeyen i\u015f deneyimlerini 0 olarak de\u011fi\u015ftirdik","a61769e9":"# \u0130htiyac\u0131m\u0131z olan kolonlar\u0131 tek bir Dataframe'de birle\u015ftirdik.","930528f4":"# Tahmin edece\u011fimiz ki\u015filerin listesi","c0050f41":"# Ba\u015fvuru yapan ki\u015finin en \u00e7ok ba\u015fvurdu\u011fu meslek grubu ve en \u00e7ok ba\u015fvurdu\u011fu \u015fehirden 10 adet tahminde bulunduk. Ki\u015finin tecr\u00fcbesi, i\u015fin minimum tecr\u00fcbesinden y\u00fcksek olacak \u015fekilde ayarlad\u0131k. Bir model e\u011fitmek yerine basit sorgular kulland\u0131k.","3a6d788b":"# Ba\u015fvurduklar\u0131 son pozisyonlar\u0131 g\u00f6z \u00f6n\u00fcne ald\u0131\u011f\u0131m\u0131z i\u00e7in \u00e7al\u0131\u015ft\u0131\u011f\u0131 kolonu d\u00fc\u015f\u00fcrd\u00fck. En \u00e7ok hangi i\u015flere ba\u015fvurduysa o i\u015fle alakal\u0131 \u00e7al\u0131\u015fmak istiyor demektir dolay\u0131s\u0131yla o pozisyonda bir i\u015f alma ihtimal\u0131 daha y\u00fcksektir.","7deb0800":"# 0.01598 Accuracy ald\u0131\u011f\u0131m\u0131z Notebook'u sizlerle payla\u015fmak istedik."}}