{"cell_type":{"9fa2874a":"code","7b00c73d":"code","b093b825":"code","66024e0d":"code","63410088":"code","20606b23":"code","f2b677f5":"code","7565e7a6":"code","e63e3d98":"code","82eb9dd9":"code","3e7428b9":"code","396431e7":"code","8ece17af":"code","fe1ca9f1":"code","c5a1c5e4":"code","90274076":"code","803e4661":"code","7b552d24":"code","6c1c16cf":"code","0ec7d454":"code","aecc4674":"code","fbceecde":"code","4e34574a":"code","569d2a27":"code","9b2c1450":"code","9ec8ebd9":"code","3eb398ee":"code","ea654577":"code","f040deae":"code","2ae10e8c":"code","100b297c":"code","669adf7e":"code","fd4ff08e":"code","ade3416a":"code","f88b0f75":"markdown","a77cf650":"markdown","f433b0ef":"markdown","0ea200ce":"markdown","3ba21066":"markdown","820871d9":"markdown","1fcd7c65":"markdown","81d41219":"markdown"},"source":{"9fa2874a":"import os\nimport pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\nfrom pandas.plotting import autocorrelation_plot\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom sklearn.metrics import mean_squared_error as mse\nfrom statsmodels.tsa.seasonal import seasonal_decompose","7b00c73d":"#import data\ntrain_data = pd.read_csv('..\/input\/train.csv',parse_dates=['date'],index_col='date')\ntest_data = pd.read_csv('..\/input\/test.csv',parse_dates=['date'],index_col='date')","b093b825":"train_data.head()","66024e0d":"test_data.head()","63410088":"train_data.info()","20606b23":"train_data.describe()","f2b677f5":"sales = train_data[(train_data['store']==1)&(train_data['item']==1)]['sales']","7565e7a6":"print(sales)","e63e3d98":"plt.plot(sales)\nplt.xlabel('date')\nplt.ylabel('sales')\nplt.title('STORE 1 ITEM 1')\nplt.show()","82eb9dd9":"plt.plot(sales.groupby(pd.Grouper(freq='Y')).mean())\nplt.xlabel('date')\nplt.ylabel('sales')\nplt.xticks(rotation=45)\nplt.title('Yearly average')\nplt.show()","3e7428b9":"plt.plot(sales.groupby(pd.Grouper(freq='M')).mean())\nplt.xlabel('date')\nplt.ylabel('sales')\nplt.xticks(rotation=45)\nplt.title('Monthly average')\nplt.show()","396431e7":"plt.plot(sales.groupby(pd.Grouper(freq='W')).mean())\nplt.xlabel('date')\nplt.ylabel('sales')\nplt.xticks(rotation=45)\nplt.title('Weekly average')\nplt.show()","8ece17af":"decomposition = seasonal_decompose(sales.groupby(pd.Grouper(freq='M')).mean(),model='multiplicative')\ndecomposition.plot()\nplt.show()","fe1ca9f1":"stores = train_data['store'].unique()\nitems = train_data['item'].unique()","c5a1c5e4":"store  = 1\nitem = 1\nsales = train_data[(train_data['store'] == store)&(train_data['item'] == item)]['sales']\nsales = sales.astype('float64')","90274076":"plt.plot(sales)\nplt.xlabel('date')\nplt.ylabel('sales')\nplt.show()","803e4661":"#train-validation split\ntrain_size = int(len(sales)*0.7)\ntrain, val = sales[:train_size], sales[train_size:]","7b552d24":"autocorrelation_plot(sales)\nplt.show()","6c1c16cf":"#model \nmodel = ARIMA(train,order=(5,1,0))\nmodel_fit = model.fit(disp=0)","0ec7d454":"print(model_fit.summary())","aecc4674":"#plot residual error\nresiduals = pd.DataFrame(model_fit.resid)\nresiduals.plot()\nplt.title('Residual Error')\nplt.show()","fbceecde":"residuals.plot(kind='kde')\nplt.xlabel('Residual')\nplt.show()","4e34574a":"#predict on validation set\nhistory = [x for x in train]\nprediction_val = list()\nfor t in range(len(val)):\n    model = ARIMA(history,order=(5,1,0))\n    model_fit = model.fit(disp=0)\n    output = model_fit.forecast()\n    prediction_val.append(int(output[0]))\n    history.append(val[t])\n    ","569d2a27":"error = mse(prediction_val,val)\nprint('Mean Squared Error = {}'.format(error))","9b2c1450":"#plot\nplt.plot(prediction_val,color='red')\nplt.xlabel('date')\nplt.ylabel('sales')\nplt.title('Prediction on Validation set')\nplt.show()","9ec8ebd9":"plt.plot(val)\nplt.xlabel('date')\nplt.ylabel('sales')\nplt.xticks(rotation=45)\nplt.show()","3eb398ee":"#predict on test set\nhistory = [x for x in sales]\nprediction_test = list()\nfor t in range(90):\n    model = ARIMA(history,order=(5,1,0))\n    model_fit = model.fit(disp=0)\n    output = model_fit.forecast()\n    prediction_test.append(int(output[0]))\n    history.append(val[t])\n    ","ea654577":"#creating a dataframe\ndates = pd.date_range('1\/1\/2018',periods=90,freq='D')\nprediction_test_df = pd.DataFrame(prediction_test,index=dates)\nprediction_test_df.columns = ['sales']","f040deae":"#plot\nplt.plot(prediction_test_df,color='green')\nplt.xlabel('date')\nplt.ylabel('sales')\nplt.xticks(rotation=45)\nplt.show()","2ae10e8c":"ids = list(test_data[(test_data['store'] == store)&(test_data['item'] == item)]['id'])","100b297c":"submission = pd.DataFrame({'id':ids,'sales':prediction_test})","669adf7e":"print(submission)","fd4ff08e":"complete_submission = pd.DataFrame({'id':[],'sales':[]})\nfor store in stores:\n    for item in items:\n        sales = train_data[(train_data['store'] == store)&(train_data['item'] == item)]['sales']\n        sales = sales.astype('float64')\n        #predict on test set\n        history = [x for x in sales]\n        prediction_test = list()\n        for t in range(90):\n            model = ARIMA(history,order=(5,1,0))\n            model_fit = model.fit(disp=0)\n            output = model_fit.forecast()\n            prediction_test.append(int(output[0]))\n            history.append(val[t])\n            \n        #creating a dataframe\n        dates = pd.date_range('1\/1\/2018',periods=90,freq='D')\n        prediction_test_df = pd.DataFrame(prediction_test,index=dates)\n        prediction_test_df.columns = ['sales']\n        ids = list(test_data[(test_data['store'] == store)&(test_data['item'] == item)]['id'])\n        submission = pd.DataFrame({'id':ids,'sales':prediction_test})\n        \n        complete_submission = complete_submission.append(submission)\n\n        ","ade3416a":"complete_submission.to_csv('submission.csv',index=False)","f88b0f75":"Sale is higher in mid of a year. Data is Seasonal.","a77cf650":"** For store 1 and item 1**","f433b0ef":"**Data Exploration**","0ea200ce":"We can see a clear trend here.","3ba21066":"We have 10 stores and 50 items. ","820871d9":"**ARIMA Model**","1fcd7c65":"Here, we can see the trend, seasonality and residual. ","81d41219":"**Similarly,  for other store-item combination,**"}}