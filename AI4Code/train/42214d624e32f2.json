{"cell_type":{"a666f0e4":"code","27a94908":"code","3c39fce3":"code","7a6a71ff":"code","a6571d0d":"code","8078dff9":"code","3a55aab0":"code","c0b35a71":"code","2ea09b50":"code","bad7cb9a":"markdown","4e1d7462":"markdown","d19e3d85":"markdown"},"source":{"a666f0e4":"%matplotlib inline\nimport os\nimport pandas as pd\nimport datetime as dt\nimport numpy as np\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"\nimport matplotlib.pyplot as plt\nplt.rcParams['figure.figsize'] = [16, 10]\nplt.rcParams['font.size'] = 14\nimport seaborn as sns\nsns.set_palette(sns.color_palette('tab20', 20))\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nfrom datetime import date, timedelta","27a94908":"class MetaData():\n    def __init__(self, path='\/kaggle\/input\/meta-kaggle'):\n        self.path = path\n\n    def ForumMessages(self, usecols, nrows=None):\n        df = pd.read_csv(os.path.join(self.path, 'ForumMessages.csv'), nrows=nrows, usecols=usecols)\n        df['PostDate'] = pd.to_datetime(df['PostDate'])\n        return df.rename(columns={'Id': 'ForumMessageId'})\n\n    def ForumMessageVotes(self, nrows=None):\n        df = pd.read_csv(os.path.join(self.path, 'ForumMessageVotes.csv'), nrows=nrows)\n        df['VoteDate'] = pd.to_datetime(df['VoteDate'])\n        return df\n\n    def Forums(self, nrows=None):\n        return pd.read_csv(os.path.join(self.path, 'Forums.csv'), nrows=nrows).rename(columns={'Id': 'ForumId'})\n\n    def ForumTopics(self, nrows=None):\n        df = pd.read_csv(os.path.join(self.path, 'ForumTopics.csv'), nrows=nrows)\n        return df.rename(columns={'Id': 'ForumTopicId'})\n\n    def Users(self, nrows=None):\n        df = pd.read_csv(os.path.join(self.path, 'Users.csv'), nrows=nrows)\n        return df.rename(columns={'Id': 'UserId'})\n    \n    def PerformanceTiers(self):\n        df = pd.DataFrame([\n            [0, 'Novice', '#5ac995'],\n            [1, 'Contributor', '#00BBFF'],\n            [2, 'Expert', '#95628f'],\n            [3, 'Master', '#f96517'],\n            [4, 'GrandMaster', '#dca917'],\n            [5, 'KaggleTeam', '#008abb'],\n        ], columns=['PerformanceTier', 'PerformanceTierName', 'PerformanceTierColor'])\n        return df\n    \n    def UserAchievements(self, nrows=None):\n        return pd.read_csv(os.path.join(self.path, 'UserAchievements.csv'), nrows=nrows)\n    \n    def Users(self, nrows=None):\n        df = pd.read_csv(os.path.join(self.path, 'Users.csv'), nrows=nrows)\n        return df.rename(columns={'Id': 'UserId'})\n\nstart = dt.datetime.now()\n\nSTART_DATE = '2016-01-01'\nmd = MetaData('\/kaggle\/input\/meta-kaggle')","3c39fce3":"fmv = md.ForumMessageVotes()\nfm = md.ForumMessages(usecols=['Id', 'ForumTopicId', 'PostUserId', 'PostDate'])\nft = md.ForumTopics()\n\nmessage_upvotes = fmv.groupby(['ForumMessageId', 'VoteDate']).size().reset_index()\nmessage_upvotes.columns = ['ForumMessageId', 'VoteDate', 'Upvotes']\nmessages = pd.merge(fm, message_upvotes, on='ForumMessageId')\nmessages.head(2)\n\ndaily_topic_votes = messages.groupby(['ForumTopicId', 'VoteDate'])[['Upvotes']].sum().reset_index()\ndaily_topic_votes['TopicRank'] = daily_topic_votes.groupby('VoteDate')['Upvotes'].rank(ascending=False, method='first')\ndaily_topic_votes = daily_topic_votes.merge(ft[['ForumTopicId', 'Title']], on='ForumTopicId')\ndaily_topic_votes = daily_topic_votes.sort_values(by='Upvotes', ascending=False)\ndaily_topic_votes.head(5)\n\n\ndaily_top_topics = daily_topic_votes[daily_topic_votes.TopicRank == 1]\ndaily_top_topics = daily_top_topics.sort_values(by='VoteDate', ascending=False)\ndaily_top_topics.head()\ndaily_top_topics.Upvotes.sum()\ndaily_top_topics.shape","7a6a71ff":"daily_top_topics = daily_top_topics[daily_top_topics.VoteDate > START_DATE]\ndata = [\n    go.Scatter(\n        y=daily_top_topics['Upvotes'].values,\n        x=daily_top_topics.VoteDate.astype(str),\n        mode='markers',\n        marker=dict(sizemode='diameter',\n                    sizeref=1,\n                    size=np.sqrt(daily_top_topics['Upvotes'].values),\n                    color=daily_top_topics['Upvotes'].values,\n                    colorscale='Viridis',\n                    showscale=True\n                    ),\n        text=daily_top_topics.Title.values,\n    )\n]\nlayout = go.Layout(\n    autosize=True,\n    title='Daily Hottest Forum Threads',\n    hovermode='closest',\n    xaxis=dict(title='VoteDate', ticklen=5, zeroline=False, gridwidth=2),\n    yaxis=dict(title='Number of votes (daily)', ticklen=5, gridwidth=2),\n    showlegend=False\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='dailyTopTopics')","a6571d0d":"daily_top_topics = daily_top_topics[daily_top_topics.VoteDate >= '2020-01-01']\ndata = [\n    go.Scatter(\n        y=daily_top_topics['Upvotes'].values,\n        x=daily_top_topics.VoteDate.astype(str),\n        mode='markers',\n        marker=dict(sizemode='diameter',\n                    sizeref=1,\n                    size=np.sqrt(daily_top_topics['Upvotes'].values),\n                    color=daily_top_topics['Upvotes'].values,\n                    colorscale='Reds',\n                    showscale=True\n                    ),\n        text=daily_top_topics.Title.values,\n    )\n]\nlayout = go.Layout(\n    autosize=True,\n    title='Daily Hottest Forum Threads (2020)',\n    hovermode='closest',\n    xaxis=dict(title='VoteDate', ticklen=5, zeroline=False, gridwidth=2),\n    yaxis=dict(title='Number of votes (daily)', ticklen=5, gridwidth=2),\n    showlegend=False\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='dailyTopTopics')","8078dff9":"users = md.Users().merge(md.PerformanceTiers(), on='PerformanceTier')\n\nupvotes = fmv.groupby(['ForumMessageId']).size().reset_index()\nupvotes.columns = ['ForumMessageId', 'Upvotes']\nmessages = pd.merge(fm, upvotes, on='ForumMessageId')\nmessages = messages.merge(users[['UserId', 'DisplayName', 'PerformanceTierColor']], left_on='PostUserId', right_on='UserId')\ndfdc = messages[messages.ForumTopicId == 157983].sort_values(by='PostDate')\ndfdc['n'] = np.arange(len(dfdc))\nzillow = messages[messages.ForumTopicId == 45770].sort_values(by='PostDate')\nzillow['n'] = np.arange(len(zillow))\ndfdc.head()\nzillow.head()\nzillow.shape, dfdc.shape","3a55aab0":"data = [\n    go.Scatter(\n        y=dfdc['n'].values,\n        x=dfdc.PostDate,\n        mode='markers',\n        marker=dict(sizemode='diameter',\n                    sizeref=0.4,\n                    size=np.sqrt(dfdc['Upvotes'].values),\n                    color=dfdc.PerformanceTierColor.values,\n                    ),\n        text=dfdc.DisplayName.values,\n    ),\n    go.Scatter(\n        y=dfdc['n'].values,\n        x=dfdc.PostDate,\n        mode='lines',\n    )\n]\nlayout = go.Layout(\n    autosize=True,\n    title='Deepfake Detection Challenge - Disqualification Thread',\n    hovermode='closest',\n    xaxis=dict(title='Time', ticklen=5, zeroline=False, gridwidth=2),\n    yaxis=dict(title='Cumulative number of messages', ticklen=5, gridwidth=2, range=[-10, 280]),\n    showlegend=False\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='dailyTopTopics')","c0b35a71":"data = [\n    go.Scatter(\n        y=zillow['n'].values,\n        x=zillow.PostDate,\n        mode='markers',\n        marker=dict(sizemode='diameter',\n                    sizeref=0.4,\n                    size=np.sqrt(zillow['Upvotes'].values),\n                    color=zillow.PerformanceTierColor.values,\n                    ),\n        text=zillow.DisplayName.values,\n    ),\n    go.Scatter(\n        y=zillow['n'].values,\n        x=zillow.PostDate,\n        mode='lines',\n    )\n]\nlayout = go.Layout(\n    autosize=True,\n    title='Zillow Prize - Disqualification Thread',\n    hovermode='closest',\n    xaxis=dict(title='Time', ticklen=5, zeroline=False, gridwidth=2),\n    yaxis=dict(title='Cumulative number of messages', ticklen=5, gridwidth=2, range=[-10, 280]),\n    showlegend=False\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='dailyTopTopics')","2ea09b50":"end = dt.datetime.now()\nprint('Latest run {}.\\nTotal time {}s'.format(end, (end - start).seconds))","bad7cb9a":"# Resolution Time","4e1d7462":"# Daily Top Forum Threads\n\nThere are a few spikes in the weekly total discussion votes.\nThese spikes are often a result of a single hot topic.  \n\nThese are the most popular topic categories:\n\n* **Competition winning solutions**: [1st place with representation learning](https:\/\/www.kaggle.com\/c\/porto-seguro-safe-driver-prediction\/discussion\/44629), \n[1st place solution overview](https:\/\/www.kaggle.com\/c\/jigsaw-toxic-comment-classification-challenge\/discussion\/52557), etc.\n* **General Kaggle Forum** (e.g. [Kaggle Survey](https:\/\/www.kaggle.com\/general\/36940),\n[Data Scientist Hero](https:\/\/www.kaggle.com\/general\/20388),\n[Kaggle Progression System & Profile Redesign Launch](https:\/\/www.kaggle.com\/general\/22208), etc.\n* **Complaints about extreme competition rules**: [This is insane discrimination](https:\/\/www.kaggle.com\/c\/passenger-screening-algorithm-challenge\/discussion\/35118),\n[Concerns regarding the competitive spirit](https:\/\/www.kaggle.com\/c\/home-credit-default-risk\/discussion\/64045), etc.\n* **Leakage of course :)**: [The Data \"Property\"](https:\/\/www.kaggle.com\/c\/santander-value-prediction-challenge\/discussion\/61329),\n[The 'Magic' (Leak) feature is attached](https:\/\/www.kaggle.com\/c\/two-sigma-connect-rental-listing-inquiries\/discussion\/31870),\n[The Magical Feature](https:\/\/www.kaggle.com\/c\/bosch-production-line-performance\/discussion\/24065),\n[you were only supposed to blow the * doors off](https:\/\/www.kaggle.com\/c\/talkingdata-mobile-user-demographics\/discussion\/23286), etc.\n\n","d19e3d85":"# 2020\nIn 2020 we had two disappointing topics (for very different reasons).\n* [PetFinder.my Contest: 1st Place Winner Disqualified](https:\/\/www.kaggle.com\/c\/petfinder-adoption-prediction\/discussion\/125436)\n* [1st Place Removed Solution - All Faces Are Real Team](https:\/\/www.kaggle.com\/c\/deepfake-detection-challenge\/discussion\/157983)"}}