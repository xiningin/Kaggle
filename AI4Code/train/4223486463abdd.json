{"cell_type":{"cd5d51cb":"code","8df27359":"code","8f38fd46":"code","5f4264e4":"code","e9e79004":"code","4bdbecac":"code","2d7b0c29":"code","b4ef3ce3":"code","eff7c287":"code","e58bc420":"code","9099f81d":"code","9ae1bbe6":"code","e6a6dfc0":"code","768ba336":"code","c5688e2f":"code","042b6b35":"code","7d2fc096":"code","a1f9dc1f":"code","0584fef4":"code","06ed864e":"code","91c647f9":"code","2d01f1bf":"code","eb4ccbcf":"code","97a80059":"code","71bb16fc":"code","01119c06":"code","39462b38":"code","b37dfd84":"code","327f4c11":"code","8fbb53d9":"code","5287eeb8":"code","371133b6":"code","2f476e34":"code","010aba31":"code","46651089":"code","a18e0738":"code","b740dc86":"code","71b67a01":"code","7dd5db4c":"code","94991e61":"code","8de81b55":"code","71f95756":"code","867795f5":"code","3859ad22":"code","6867329e":"code","7fe95559":"code","7cea70f5":"code","3fe1fe0b":"code","bd860a94":"code","7b6b9487":"code","b94d1919":"code","d01956a6":"code","a26c8ded":"code","ea041582":"code","fa2ca535":"code","b696571a":"code","02dc6a5a":"markdown","47438995":"markdown","b25a0a56":"markdown","e11f05c1":"markdown","a431abf9":"markdown","a8ecd9a0":"markdown","be04b5be":"markdown","47dc43a1":"markdown","04561f93":"markdown","0e2e595e":"markdown","0db2150d":"markdown","d623bca3":"markdown","b6e70302":"markdown","c258e259":"markdown"},"source":{"cd5d51cb":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport matplotlib.style as style\nstyle.use('fivethirtyeight')\nimport seaborn as sns\nimport os\nfrom matplotlib.ticker import FuncFormatter","8df27359":"import pandas as pd\nimport numpy as np\nimport datetime as dt\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm\nimport gc\nimport random\nimport lightgbm as lgb\nimport re\nfrom sklearn.metrics import *\nfrom sklearn.model_selection import StratifiedKFold\nimport warnings\nfrom tqdm import tqdm\nwarnings.filterwarnings(action='ignore')\n\n# \ud544\uc694\ud55c \ud568\uc218 \uc815\uc758\ndef make_datetime(x):\n    # string \ud0c0\uc785\uc758 Time column\uc744 datetime \ud0c0\uc785\uc73c\ub85c \ubcc0\uacbd\n    x     = str(x)\n    year  = int(x[:4])\n    month = int(x[4:6])\n    day   = int(x[6:8])\n    hour  = int(x[8:10])\n    #mim  = int(x[10:12])\n    #sec  = int(x[12:])\n    return dt.datetime(year, month, day, hour)\n\ndef string2num(x):\n    # (,)( )\uacfc \uac19\uc740 \ubd88\ud544\uc694\ud55c \ub370\uc774\ud130 \uc815\uc81c\n    x = re.sub(r\"[^0-9]+\", '', str(x))\n    if x =='':\n        return 0\n    else:\n        return int(x)\n\n\nPATH = '..\/input\/e13-cns\/'","8f38fd46":"train_prob = pd.read_csv(PATH+'train_problem_data.csv')\nproblem = np.zeros(15000)\n# error\uc640 \ub3d9\uc77c\ud55c \ubc29\ubc95\uc73c\ub85c person_idx - 10000 \uc704\uce58\uc5d0 \n# person_idx\uc758 problem\uc774 \ud55c \ubc88\uc774\ub77c\ub3c4 \ubc1c\uc0dd\ud588\ub2e4\uba74 1\n# \uc5c6\ub2e4\uba74 0\nproblem[train_prob.user_id.unique()-10000] = 1 \nproblem.shape\n","5f4264e4":"train_prob['datetime'] = train_prob['time'].apply(make_datetime)","e9e79004":"train_prob = train_prob.sort_values(by='user_id').reset_index(drop = True)\ndropIDX = []\nfor index, row in train_prob.iterrows():\n    if index == len(train_prob)-1:\n        break\n    if row['user_id'] == train_prob.loc[index+1]['user_id']:\n        dropIDX.append(index)\ntrain_prob = train_prob.drop(index = dropIDX).reset_index(drop = True)\ntrain_prob","4bdbecac":"train_err  = pd.read_csv(PATH+'train_err_data.csv')\ndisplay(train_err.head())","2d7b0c29":"train_err_anomaly = train_err[train_err['user_id'].isin(np.where(problem==1)[0]+10000)]\ntrain_err_anomaly","b4ef3ce3":"train_err_normal = train_err[train_err['user_id'].isin(np.where(problem==0)[0]+10000)]\ntrain_err_normal","eff7c287":"# train_err['datetime'] = train_err['time'].apply(make_datetime)","e58bc420":"train_err.info()","9099f81d":"# dropIDX = []\n# for index, row in tqdm(train_err.iterrows()):\n#     if np.any(np.where(problem==1)[0]+10000 == row['user_id']):\n#         if (row['datetime'] > train_prob[train_prob['user_id']==row['user_id']]['datetime'].to_numpy())[0]:\n#             dropIDX.append(index)\n# train_err_processed = train_probtrain_err.drop(index = dropIDX).reset_index(drop = True)\n# train_err_processed","9ae1bbe6":"# train_err_processed.info()","e6a6dfc0":"# train_err_processed","768ba336":"cids = train_err.user_id.value_counts()[:50]\n\nfig = plt.figure(figsize=(12,6))\nax = cids.plot.bar()\nplt.title(\"user_id\")\nplt.xticks(rotation=90)\nax.get_yaxis().set_major_formatter(FuncFormatter(lambda x, p: format(int(x), ','))) #add thousands separator\nplt.show()","c5688e2f":"total =  len(train_err_anomaly)\nnumb = len(np.where(problem==1)[0])\nres = total\/numb\nprint(f'Total number of error log for anomaly data is {total}')\nprint(f'Total number of target id is {numb}')\nprint(f'Average number of error log for anomaly data is {res}')","042b6b35":"total2 =  len(train_err_normal)\nnumb2 = len(np.where(problem==0)[0])\nres2 =  total2\/numb2\nprint(f'Total number of error log for normal data is {total2}')\nprint(f'Total number of normal id is {numb}')\nprint(f'Average number of error log for normal data is {res2}')","7d2fc096":"cids = train_err_normal.user_id.value_counts()\ncids2 = train_err_anomaly.user_id.value_counts()\nfig = plt.figure(figsize=(12,6))\nax = cids.plot.density()\nax2 = cids2.plot.density()\nplt.title(\"user_id\")\nplt.xticks(rotation=90)\nplt.xlim(0,10000)\nplt.show()","a1f9dc1f":"total\/total2","0584fef4":"cids = train_err.model_nm.value_counts()\n\nfig = plt.figure(figsize=(12,6))\nax = cids.plot.bar()\nplt.title(\"Model\")\nplt.xticks(rotation=90)\nax.get_yaxis().set_major_formatter(FuncFormatter(lambda x, p: format(int(x), ','))) #add thousands separator\nplt.show()","06ed864e":"models = train_err.model_nm.unique()\nmodels.sort()\ntotal_numb = 0\nfor model in models:\n    res = train_err[train_err['model_nm']==model].user_id.nunique()\n    print(f'{model}\\'s number of unique id is {res}' )\n    total_numb+=res\nprint(f'Sum of unique id is {total_numb}')","91c647f9":"models = train_err_anomaly.model_nm.unique()\nmodels.sort()\ntotal_numb = 0\nfor model in models:\n    res = train_err_anomaly[train_err_anomaly['model_nm']==model].user_id.nunique()\n    print(f'{model}\\'s number of unique id is {res}' )\n    total_numb+=res\nprint(f'Sum of unique id is {total_numb}')","2d01f1bf":"models = train_err_normal.model_nm.unique()\nmodels.sort()\ntotal_numb = 0\nfor model in models:\n    res = train_err_normal[train_err_normal['model_nm']==model].user_id.nunique()\n    print(f'{model}\\'s number of unique id is {res}' )\n    total_numb+=res\nprint(f'Sum of unique id is {total_numb}')","eb4ccbcf":"model_anomaly = train_err[train_err['user_id'].isin(np.where(problem==1)[0]+10000)].model_nm.value_counts().sort_index()\nmodel_anomaly","97a80059":"model_normal = train_err[train_err['user_id'].isin(np.where(problem==0)[0]+10000)].model_nm.value_counts().sort_index()\nmodel_normal","71bb16fc":"model_anomaly\/model_normal","01119c06":"cids = train_err.fwver.value_counts()[:20]\n\nfig = plt.figure(figsize=(12,6))\nax = cids.plot.bar()\nplt.title(\"Twenty most used fwver's\")\nplt.xticks(rotation=90)\nax.get_yaxis().set_major_formatter(FuncFormatter(lambda x, p: format(int(x), ','))) #add thousands separator\nplt.show()","39462b38":"tmp = train_err.fwver.nunique()\nprint(f'The number of types of fwver is  {tmp}')","b37dfd84":"tmp = train_err_anomaly.fwver.nunique()\nprint(f'The number of types of fwver is  {tmp}')","327f4c11":"tmp = train_err_normal.fwver.nunique()\nprint(f'The number of types of fwver is  {tmp}')","8fbb53d9":"fwver_avg_anomaly = train_err_anomaly.fwver.value_counts()\/len(np.where(problem==1)[0])\nprint(len(fwver_avg_anomaly))\n\ncids = fwver_avg_anomaly[:10]\n\nfig = plt.figure(figsize=(12,6))\nax = cids.plot.bar()\nplt.title(\"fwver's\")\nplt.xticks(rotation=90)\nax.get_yaxis().set_major_formatter(FuncFormatter(lambda x, p: format(int(x), ','))) #add thousands separator\nplt.show()","5287eeb8":"fwver_avg_normal = train_err_normal.fwver.value_counts()\/len(np.where(problem==0)[0])\nprint(len(fwver_avg_normal))\n\ncids = fwver_avg_normal[:10]\n\nfig = plt.figure(figsize=(12,6))\nax = cids.plot.bar()\nplt.title(\"fwver's\")\nplt.xticks(rotation=90)\nax.get_yaxis().set_major_formatter(FuncFormatter(lambda x, p: format(int(x), ','))) #add thousands separator\nplt.show()","371133b6":"fwver_avg_anomaly.sort_index()\/fwver_avg_normal.sort_index()","2f476e34":"fwvers = train_err.fwver.unique()\nfwvers.sort()\ntotal_numb = 0\nfor fwver in fwvers:\n    res = train_err[train_err['fwver']==fwver].user_id.nunique()\n    print(f'{fwver}\\'s number of unique id is {res}' )\n    total_numb+=res\nprint(f'Sum of unique id is {total_numb}')","010aba31":"total_numb = 0\nfor fwver in fwvers:\n    res = train_err_anomaly[train_err_anomaly['fwver']==fwver].user_id.nunique()\n    print(f'{fwver}\\'s number of unique id is {res}' )\n    total_numb+=res\nprint(f'Sum of unique id is {total_numb}')","46651089":"total_numb = 0\nfor fwver in fwvers:\n    res = train_err_normal[train_err_normal['fwver']==fwver].user_id.nunique()\n    print(f'{fwver}\\'s number of unique id is {res}' )\n    total_numb+=res\nprint(f'Sum of unique id is {total_numb}')","a18e0738":"train_err.errtype.nunique()","b740dc86":"cids = train_err.errtype.value_counts()[:20]\n\nfig = plt.figure(figsize=(12,6))\nax = cids.plot.bar()\nplt.title(\"errtype's\")\nplt.xticks(rotation=90)\nax.get_yaxis().set_major_formatter(FuncFormatter(lambda x, p: format(int(x), ','))) #add thousands separator\nplt.show()","71b67a01":"errtype_avg_anomaly = train_err_anomaly.errtype.value_counts()\/len(np.where(problem==1)[0])\n\ncids = errtype_avg_anomaly[:20]\n\nfig = plt.figure(figsize=(12,6))\nax = cids.plot.bar()\nplt.title(\"errtype's\")\nplt.xticks(rotation=90)\nax.get_yaxis().set_major_formatter(FuncFormatter(lambda x, p: format(int(x), ','))) #add thousands separator\nplt.show()","7dd5db4c":"errtype_avg_normal = train_err_normal.errtype.value_counts()\/len(np.where(problem==0)[0])\n\ncids = errtype_avg_normal[:20]\n\nfig = plt.figure(figsize=(12,6))\nax = cids.plot.bar()\nplt.title(\"errtype's\")\nplt.xticks(rotation=90)\nax.get_yaxis().set_major_formatter(FuncFormatter(lambda x, p: format(int(x), ','))) #add thousands separator\nplt.show()","94991e61":"types = train_err.errtype.unique()\ntypes.sort()\nfor t in types:\n    mean = train_err[train_err['errtype']==t].user_id.value_counts().mean()\n    std = train_err[train_err['errtype']==t].user_id.value_counts().std()\n    cids = train_err_normal[train_err_normal['errtype']==t].user_id.value_counts()\n    cids2 = train_err_anomaly[train_err_anomaly['errtype']==t].user_id.value_counts()\n    fig = plt.figure(figsize=(12,6))\n    ax = cids.plot.density()\n    ax2 = cids2.plot.density()\n    plt.title(t)\n    plt.xticks(rotation=90)\n    plt.xlim(0,mean+3*std)\n    plt.show()","8de81b55":"tmp= train_err_normal.errtype.value_counts().sort_index()\/train_err_normal.user_id.nunique()\ntmp2= train_err_anomaly.errtype.value_counts().sort_index()\/train_err_anomaly.user_id.nunique()\ntmp3= train_err.errtype.value_counts().sort_index()\/train_err.user_id.nunique()\ntmp4= train_err_normal.groupby(['errtype']).user_id.nunique()\/train_err_normal.user_id.nunique()\ntmp5 = train_err_anomaly.groupby(['errtype']).user_id.nunique()\/train_err_anomaly.user_id.nunique()\ntmp6 = train_err.groupby(['errtype']).user_id.nunique()\/train_err.user_id.nunique()\ndf = pd.concat([tmp,tmp2,tmp3,tmp4,tmp5,tmp6],axis=1)\ndf.columns = ['normal_log','anomaly_log','Total_log','normal_nuniqueid','anomaly_nuniqueid','Total_nuniqueid']\ndf","71f95756":"train_err.errcode.nunique()","867795f5":"cids = train_err.errcode.value_counts()[:20]\n\nfig = plt.figure(figsize=(12,6))\nax = cids.plot.bar()\nplt.title(\"errcode\")\nplt.xticks(rotation=90)\nax.get_yaxis().set_major_formatter(FuncFormatter(lambda x, p: format(int(x), ','))) #add thousands separator\nplt.show()","3859ad22":"errcodes = train_err.errcode.value_counts()[:30].index.tolist()\nfor errcode in errcodes:\n    mean = train_err[train_err['errcode']==errcode].user_id.value_counts().mean()\n    std = train_err[train_err['errcode']==errcode].user_id.value_counts().std()\n    cids = train_err_normal[train_err_normal['errcode']==errcode].user_id.value_counts()\n    cids2 = train_err_anomaly[train_err_anomaly['errcode']==errcode].user_id.value_counts()\n    fig = plt.figure(figsize=(12,6))\n    if len(cids)!=0:\n        ax = cids.plot.density()\n    if len(cids2)!=0:\n        ax2 = cids2.plot.density()\n    plt.title(errcode)\n    plt.xticks(rotation=90)\n    plt.xlim(0,mean+3*std)\n    plt.show()","6867329e":"train_qual = pd.read_csv(PATH+'train_quality_data.csv').drop(['fwver','time'],axis=1).fillna(0).replace(',','', regex=True).astype(int)\ntrain_qual.head()","7fe95559":"train_qual_anomaly = train_qual[train_qual['user_id'].isin(np.where(problem==1)[0]+10000)]\ntrain_qual_normal = train_qual[train_qual['user_id'].isin(np.where(problem==0)[0]+10000)]","7cea70f5":"train_qual.info()","3fe1fe0b":"cols = train_qual.columns[1:]\ncols","bd860a94":"fig = plt.figure(figsize=(20,20))\nfor i,col in enumerate(cols):\n    cids = train_qual[col].value_counts()[:5]\n    ax = fig.add_subplot(5,3,i+1)\n    ax = cids.plot.bar()\n    plt.title(col)\n    plt.xticks(rotation=90)\n    ax.get_yaxis().set_major_formatter(FuncFormatter(lambda x, p: format(int(x), ','))) #add thousands separator\n    plt.show()","7b6b9487":"fig = plt.figure(figsize=(20,20))\nfor i,col in enumerate(cols):\n    mean = train_qual[col].value_counts().mean()\n    std = train_qual[col].value_counts().mean()\n    cids = train_qual_normal.value_counts()\n    cids2 = train_qual_anomaly.value_counts()\n    fig = plt.figure(figsize=(12,6))\n    if len(cids)!=0:\n        ax = cids.plot.density()\n    if len(cids2)!=0:\n        ax2 = cids2.plot.density()\n    plt.title(col)\n    plt.xticks(rotation=90)\n    plt.xlim(0,mean+std)\n#     plt.xscale(\"log\")\n    plt.show()","b94d1919":"for i,col in enumerate(cols):\n    print(col)\n    print(f'number of unique {train_qual[col].nunique()}')\n    print(f'max number is {train_qual[col].max()}')","d01956a6":"df['quality_10'].nunique()","a26c8ded":"# ts = df['quality_10']\n# fig = plt.figure(figsize=(12,6))\n# ts.plot.hist(bins=50,range=(0,50))\n# plt.title(\"Histogram of quality_10\")\n# plt.xlim(0,50)\n# plt.xticks(rotation=0)\n# plt.xlabel(\"a\")\n# plt.show()","ea041582":"print(np.sort(train_err.user_id.unique()))\nprint(train_err.user_id.unique().max() -\\\n      train_err.user_id.unique().min() +1)\n\n# ueser_id\uac00 10000\ubd80\ud130 24999\uae4c\uc9c0 \ucd1d 15000\uac1c\uac00 \uc5f0\uc18d\uc801\uc73c\ub85c \uc874\uc7ac.","fa2ca535":"print(np.sort(train_err.errtype.unique()))\nprint(train_err.errtype.unique().max() - \\\n      train_err.errtype.unique().min() +1)\n# errtype\uc774 1\ubd80\ud130 42\uae4c\uc9c0 \ucd1d 42\uac1c\uac00 \uc5f0\uc18d\uc801\uc73c\ub85c \uc874\uc7ac.","b696571a":"# user_id\uc640 errtype\ub9cc\uc744 \uc0ac\uc6a9\ud558\uc5ec \ub370\uc774\ud130 \uc14b \uc0dd\uc131\n# \ubaa8\ub4e0 \uc77c\uc790\uc5d0 \ub300\ud574\uc11c errtype\ubcc4 \ubc1c\uc0dd \uac74\uc218\ub97c count\n# pandas\uc758 groupby\ub97c \ud65c\uc6a9\ud560 \uacbd\uc6b0 \ud070 \uc5f0\uc0b0 \uc790\uc6d0\uc774 \ud544\uc694.\n# numpy\ub85c placeholder\ub97c \ub9cc\ub4e4\uc5b4 \uad6c\ud604\ud568.\n\nid_error = train_err[['user_id','errtype']].values\nerror = np.zeros((15000,42))\n\nfor person_idx, err in tqdm(id_error):\n    # person_idx - 10000 \uc704\uce58\uc5d0 person_idx, errtype\uc5d0 \ud574\ub2f9\ud558\ub294 error\uac12\uc744 +1\n    error[person_idx - 10000,err - 1] += 1\nerror.shape","02dc6a5a":"## **fwver**","47438995":"\uce58\uba85\uc801\uc778 \uc5d0\ub7ec\ucf54\ub4dc \ucc3e\uae30","b25a0a56":"# **Quality data**","e11f05c1":"## **Model nm**","a431abf9":"## **Errcode**","a8ecd9a0":"# Library Import","be04b5be":"discussion\n\nnumber of unique\uac00 \ud070 \uac83 \uc911\uc5d0 \uc720\uc758\ubbf8\ud55c \ucc28\uc774\ub97c \ubcf4\uc774\ub294 \uac83\ub4e4\uc774 \uc788\uc74c.","47dc43a1":"## **Errtype**","04561f93":"# **1.Train Error Data**","0e2e595e":"\uc911\ubcf5\ub418\ub294 fwver\uc740 25\uac1c\ub9cc \uc788\uc74c.","0db2150d":"model 3\uc758 \uc720\ubb34 \uc815\ub3c4\ub294 feature\ub85c \uc0ac\uc6a9\uac00\ub2a5 \ud574\ubcf4\uc784. model 6,8\uc740 \uc218\uac00 \ub108\ubb34 \uc801\uc74c","d623bca3":"## **User ID**","b6e70302":"Discussion\n\n\ubd88\ub9cc\uc774 \uc811\uc218\ub41c \ub370\uc774\ud130\uc5d0\uc11c \ud6e8\uc52c \ub354 \ub9ce\uc740 \uc911\ubcf5\uc774 \uc77c\uc5b4\ub0a8 643\uac1c vs 61\uac1c\n\n\ucd1d ID \ucc28\uc774\ub294 \ub300\ub7b5 \ub450\ubc30\uc778\ub370 model 1,2,3,4\uc5d0\uc11c\uc758 \ucc28\uc774\uac00 2\ubc30\uc5d0\uc11c \ud06c\uac8c \ubc97\uc5b4\ub0a8.\n\n5,6,7,8\uc740 \ud45c\ubcf8\uc774 \uc801\uc5b4 \uc81c\uc678. \ub2e4\ub9cc 6\uc740 \ucc28\uc774\uac00 \ud07c.","c258e259":"## TODO:\ubd88\ub9cc \uc2e0\uace0\uc804\ub9cc \uce74\uc6b4\ud2b8\ud574\uc57c\ub428"}}