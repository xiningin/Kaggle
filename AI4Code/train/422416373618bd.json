{"cell_type":{"0d058a92":"code","52852a3c":"code","156e5bc0":"code","88b3a2f7":"code","3015d493":"code","8232a6d5":"code","f2446fdb":"code","77f1153b":"code","4a1ecffd":"code","4b594243":"code","52004cda":"code","537ba2e9":"code","79363b1a":"code","fe9a0102":"code","8a498d96":"code","be1b50e7":"code","fa138643":"code","a0680bcd":"code","7f45ae0f":"code","df4306bb":"code","41a4ddbf":"code","ac1c95fd":"code","d21777e0":"code","dab18a9e":"code","a79b8a51":"code","4ef32caf":"markdown"},"source":{"0d058a92":"\n\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))","52852a3c":"data = pd.read_csv('..\/input\/genius_hip_hop_lyrics.csv',encoding = \"ISO-8859-1\")\ndata.head()","156e5bc0":"data.info()","88b3a2f7":"data.tail()","3015d493":"data.columns","8232a6d5":"data.shape","f2446fdb":"print(data['sentiment'].value_counts(dropna=False))","77f1153b":"data.describe()\ndata.head()","4a1ecffd":"data.boxplot(column='album_release_date',by = 'sentiment') #Lower quartile\/Upper quartile -+ 1.5 IQR(upper quartile - lower quartile) = outliers","4b594243":"data_new = data.head()\ndata_new","52004cda":"melted = pd.melt(frame=data_new,id_vars = 'line', value_vars = ['artist','song'])\nmelted","537ba2e9":"melted.pivot(index = 'line',columns = 'variable',values = 'value')","79363b1a":"data1 = data.head()\ndata2 = data.tail()\nconc_data_row = pd.concat([data1,data2], axis = 0,ignore_index = True)\nconc_data_row","fe9a0102":"data1 = data['song'].head()\ndata2 = data['artist'].head()\nconc_data_col = pd.concat([data1,data2],axis=1)\nconc_data_col","8a498d96":"data.dtypes","be1b50e7":"data['theme'] = data['theme'].astype('object')\ndata['sentiment'] = data['sentiment'].astype('category')","fa138643":"data.dtypes","a0680bcd":"data.info()","7f45ae0f":"data[\"theme\"].value_counts(dropna = False)","df4306bb":"data1 = data\ndata1[\"theme\"].dropna(inplace=True) #Inplace means changes are going to be valid for main dataframe","41a4ddbf":"assert data[\"theme\"].notnull().all()","ac1c95fd":"data[\"theme\"].fillna('empty',inplace = True) # element of dataframe must be an object.\n","d21777e0":"assert data[\"theme\"].notnull().all()","dab18a9e":"assert data.theme.dtypes == np.object","a79b8a51":"data.dtypes","4ef32caf":"# Data Regulation Example\n**This kernel is created by using a dataset including Hip-Hop songs dedicated to presidential candidates of the U.S.A.** \n**Main purpose is practicing main data regulation methods and kernel regulation methods such as using markdown like I'm doing right now :)**\n"}}