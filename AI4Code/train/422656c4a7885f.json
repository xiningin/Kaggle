{"cell_type":{"206b12e9":"code","fc1045f6":"code","0e57405a":"code","54ca026f":"code","5ed5cce5":"code","07ccda80":"code","084be655":"code","1de421fd":"code","062e3a9a":"code","6e523edd":"code","f8e8bc97":"code","eb383465":"code","0b3a5a8e":"code","2ee1ace5":"code","faaf57b4":"code","b9b23c5b":"code","7391b74f":"code","1e5c0ebd":"code","87f8c382":"code","3a99b0d2":"code","539f5086":"code","3f8d4243":"code","ed3aa550":"code","fce452e1":"code","0f843165":"code","534e02e2":"code","0af383fb":"code","6e8bd789":"code","97fa19d7":"code","7633b3fe":"code","7f617f07":"code","daa7db83":"code","bb9c403e":"code","e04dd31b":"code","641d19e3":"code","e508c25f":"code","d8b9c4c4":"code","437716da":"code","99f87e97":"code","85ed0f2d":"code","7575c0e3":"code","97eb11da":"code","f4865fb3":"code","0a3a8f3b":"code","11069b3c":"code","39c75a72":"code","489b7582":"code","2d45f8a9":"code","48c09a15":"code","770dc42b":"code","ab8d0418":"code","36f0bde4":"code","588759ff":"code","3ab80edf":"code","43994255":"code","83df43ae":"code","59bb004d":"code","a0bb223a":"code","614b6f7f":"code","804cf6c1":"code","25799483":"code","93f7e2a4":"code","f3949107":"code","4d27803f":"code","1321eb38":"code","067c32e0":"code","3c56fc0e":"code","33c4d4ea":"code","48822f85":"code","d87578f0":"code","ea39d9c1":"code","0d11f7f2":"code","5fa602a8":"code","0da0352a":"code","1a11e029":"code","7afdeec8":"code","946d1875":"code","ea356126":"code","3a6a494c":"code","5f1b2fb4":"code","845c0b1c":"code","3ecbd3b2":"code","e8b423f7":"code","e9b1fec6":"code","fc42b1ab":"code","701e2be6":"code","a56922ca":"code","04dede52":"code","dabcaaf4":"code","a86df25c":"code","3816a170":"code","90f559e7":"code","16ab1563":"code","e4e7b3be":"code","fbacfb6a":"code","1c7a9107":"code","90c7968d":"code","7c883809":"code","5bc1af32":"code","690cafbe":"code","f1eb69f9":"code","5b3c9c01":"code","a5d9c385":"code","e0a44040":"code","d49d98d1":"code","c8b3a998":"code","a86aabb9":"code","de7914f5":"code","b72de291":"code","9ddb2995":"code","0ced6c01":"code","edbb4962":"code","ed6ce851":"code","a6242271":"code","ed6b020f":"code","5464fec0":"code","fd298578":"code","26d9d9f1":"code","39f3ff46":"markdown","1d38ab21":"markdown","cdfe9dc8":"markdown","5434a6da":"markdown","c788219d":"markdown","ea689520":"markdown","c6d41bf5":"markdown","43ef0be4":"markdown","05c3bf27":"markdown","4e37f0cf":"markdown","bc7db8ce":"markdown","d3b73b99":"markdown","d3d49ca0":"markdown","4197090a":"markdown","6bbc7f9c":"markdown","e3161bd7":"markdown","dec22ecb":"markdown","50e69193":"markdown","d5f71555":"markdown","d136813a":"markdown","e944c0af":"markdown","52273db9":"markdown","0e4f5aa5":"markdown","4f503475":"markdown","dbd8e51a":"markdown"},"source":{"206b12e9":"import sys\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\nfrom datetime import datetime\nimport datetime as dt\nfrom wordcloud import WordCloud\nimport seaborn as sns\nimport sklearn.preprocessing as pre\nimport sklearn.linear_model as lm\nimport sklearn.model_selection as ms\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_error as rmse\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import Lasso\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import GridSearchCV","fc1045f6":"# load data sets\ndata = pd.read_csv(\"..\/input\/data-for-train\/train1.csv\")\ntest = pd.read_csv(\"..\/input\/machine-learning-24-hrs-hackathon\/Test_SJC.csv\")\nsub = pd.read_csv(\"..\/input\/machine-learning-24-hrs-hackathon\/sample_submission.csv\")","0e57405a":"# idea of data distribution\nprint(data.info())\nprint(data.describe())\nprint(data.shape)\nprint(data.size)\nprint(data.columns)","54ca026f":"data.isnull().sum()","5ed5cce5":"data[\"MaritalStatus\"].value_counts()","07ccda80":"data[\"WeeklyWages\"].value_counts().nunique()","084be655":"data[\"HoursWorkedPerWeek\"].value_counts().nunique()","1de421fd":"# Converting the date data to year only\ndata['DateTimeOfAccident']=pd.to_datetime(data['DateTimeOfAccident'],format=\"%Y-%m-%dT%H:%M:%S\")\ndata[\"yearofAccident\"] =data[\"DateTimeOfAccident\"].dt.year\ndata[\"dayofweekAccident\"] = data[\"DateTimeOfAccident\"].dt.weekday\ndata['monthOfAccident'] =data['DateTimeOfAccident'].dt.month","062e3a9a":"data['DateReported']=pd.to_datetime(data['DateReported'],format=\"%Y-%m-%dT%H:%M:%S\")\ndata[\"yearofReported\"] =data[\"DateReported\"].dt.year\ndata[\"dayofweekReported\"] = data[\"DateReported\"].dt.weekday\ndata['monthOfReported'] =data['DateReported'].dt.month","6e523edd":"data['Difference_month_accident_and_reported'] = (data['yearofReported']-data['yearofAccident'])*12+(data['monthOfReported']-data['monthOfAccident'])","f8e8bc97":"data.info()","eb383465":"data.columns","0b3a5a8e":"data.isnull().sum()","2ee1ace5":"data.isnull().sum()","faaf57b4":"data[\"MaritalStatus\"].value_counts()","b9b23c5b":"data['MaritalStatus'].value_counts(dropna = False).plot(kind = 'bar', rot = 0)","7391b74f":"data['MaritalStatus'].fillna('U', inplace = True)","1e5c0ebd":"data.isnull().sum()","87f8c382":"data[\"WeeklyWages\"].value_counts().unique()","3a99b0d2":"data = data.dropna()","539f5086":"print(data[\"WeeklyWages\"].isnull().sum())\nprint(data[\"HoursWorkedPerWeek\"].isnull().sum())","3f8d4243":"data.plot.box(figsize = (20,8))","ed3aa550":"plt.figure(figsize = (12, 10))\nsns.countplot(data[\"Gender\"])","fce452e1":"log_UltimateIncurredClaimCost=np.log(data['UltimateIncurredClaimCost'])","0f843165":"plt.figure(figsize = (12, 10))\nsns.boxplot(x = 'Gender', y = log_UltimateIncurredClaimCost,  data =data)","534e02e2":"data[\"Gender\"].value_counts().unique()","0af383fb":"data.drop(data[ data['Gender'] == 'U' ].index, inplace = True)","6e8bd789":"plt.figure(figsize = (12, 10))\nsns.countplot(x = 'MaritalStatus',data =data)","97fa19d7":"plt.figure(figsize=(12,10))\nsns.barplot(x='MaritalStatus',y='UltimateIncurredClaimCost',data=data)","7633b3fe":"plt.figure(figsize = (12, 10))\nsns.countplot(x = 'DependentChildren',data =data)","7f617f07":"plt.figure(figsize=(12,10))\nsns.barplot(x='DependentChildren',y='UltimateIncurredClaimCost',data=data)","daa7db83":"plt.figure(figsize = (12, 10))\nsns.countplot(x='DependentsOther',data=data)","bb9c403e":"plt.figure(figsize=(12,10))\nsns.barplot(x='DependentsOther',y='UltimateIncurredClaimCost',data=data)","e04dd31b":"plt.figure(figsize = (12, 10))\nsns.distplot(data['WeeklyWages'],rug=False, hist=True, kde = False)","641d19e3":"plt.figure(figsize = (12, 10))\nsns.countplot(data.PartTimeFullTime)","e508c25f":"plt.figure(figsize=(12,10))\nsns.barplot(x='PartTimeFullTime',y='UltimateIncurredClaimCost',data=data)","d8b9c4c4":"plt.figure(figsize = (12, 10))\nplt.subplot(1, 2, 1)\nsns.distplot(data.InitialIncurredCalimsCost, hist=True, rug=False)\nplt.subplot(1, 2, 2)\nsns.distplot(np.log(data.InitialIncurredCalimsCost), hist=True, rug=False)","437716da":"plt.figure(figsize=(12,10))\nsns.barplot(x='Age',y='UltimateIncurredClaimCost',data=data)","99f87e97":"plt.figure(figsize=(12,10))\nsns.barplot(x='DaysWorkedPerWeek',y='UltimateIncurredClaimCost',data=data)","85ed0f2d":"plt.figure(figsize=(12,10))\nsns.barplot(x='Difference_month_accident_and_reported',y='UltimateIncurredClaimCost',data=data)","7575c0e3":"plt.figure(figsize = (12, 10))\nsns.scatterplot(data[\"Age\"],data[\"WeeklyWages\"],hue = data[\"Gender\"])","97eb11da":"plt.figure(figsize=(12,10))\nsns.scatterplot(x='HoursWorkedPerWeek',y='UltimateIncurredClaimCost',data=data)","f4865fb3":"plt.figure(figsize = (12, 10))\nsns.scatterplot(data[\"WeeklyWages\"],data[\"InitialIncurredCalimsCost\"],hue = data[\"PartTimeFullTime\"])","0a3a8f3b":"plt.figure(figsize=(12,10))\nsns.scatterplot(x='WeeklyWages',y='UltimateIncurredClaimCost',hue=\"MaritalStatus\",data=data)","11069b3c":"corr = data.corr()\nfig, ax = plt.subplots(figsize=(12, 10))\nsns.heatmap(corr, annot=True, \n            linewidth=2,ax = ax, \n            vmin = -1, vmax = 1, center = 0, \n            cmap=\"YlGnBu\")","39c75a72":"data=data.drop(['DateTimeOfAccident','DateReported','ClaimNumber','ClaimDescription','yearofAccident', 'dayofweekAccident',\n       'monthOfAccident', 'yearofReported', 'dayofweekReported','monthOfReported'],axis=1)","489b7582":"data.corr()","2d45f8a9":"fig, ax = plt.subplots(figsize=(12, 10))\nsns.heatmap(data.corr(), annot=True, \n            linewidth=2,ax = ax, \n            vmin = -1, vmax = 1, center = 0, \n            cmap=\"YlGnBu\")","48c09a15":"data_copy = data","770dc42b":"le = pre.LabelEncoder()\nregressor = lm.LinearRegression()\n\nfor x in data.select_dtypes(include = \"object\").columns:\n    data[x] = le.fit_transform(data[x])\n\nx = pre.minmax_scale(data.drop(\"UltimateIncurredClaimCost\",axis =1))\ny = data[\"UltimateIncurredClaimCost\"]","ab8d0418":"x_train,x_test,y_train,y_test = ms.train_test_split(x,y,random_state = 12345,test_size = 0.3)\nreg = regressor.fit(x_train,y_train)\nprint(reg.score(x_train,y_train))\nprint(reg.score(x_test,y_test))\ny_pred = reg.predict(x_test)\nprint(\"rmse = \",rmse(y_test,y_pred,squared = False))","36f0bde4":"x_train,x_test,y_train,y_test = ms.train_test_split(x,y,random_state = 2020,test_size = 0.3)\nreg = regressor.fit(x_train,y_train)\nprint(reg.score(x_train,y_train))\nprint(reg.score(x_test,y_test))\ny_predict = reg.predict(x_test)\nprint(\"rmse = \",rmse(y_test,y_pred,squared = False))","588759ff":"x_train,x_test,y_train,y_test = ms.train_test_split(x,y,random_state = 12345,test_size = 0.4)\nreg = regressor.fit(x_train,y_train)\ny_pred = reg.predict(x_test)\nprint(\"rmse = \",rmse(y_test,y_pred,squared = False))","3ab80edf":"x_train,x_test,y_train,y_test = ms.train_test_split(x,y,random_state = 2020,test_size = 0.3)\nreg = regressor.fit(x_train,y_train)\ny_pred = reg.predict(x_test)\nprint(\"rmse = \",rmse(y_test,y_pred,squared = False))","43994255":"reg.coef_","83df43ae":"data.columns","59bb004d":"datax=['Age','MaritalStatus','DependentChildren','DependentsOther', \n            'WeeklyWages', 'PartTimeFullTime',\n            'DaysWorkedPerWeek','InitialIncurredCalimsCost']","a0bb223a":"data = data[datax]","614b6f7f":"for x in data.select_dtypes(include = \"object\").columns:\n    data[x] = le.fit_transform(data[x])\nx = pre.minmax_scale(data)\nx_train,x_test,y_train,y_test = ms.train_test_split(x,y,random_state = 2020,test_size = 0.3)\nreg = regressor.fit(x_train,y_train)\ny_pred = reg.predict(x_test)\nprint(\"rmse = \",rmse(y_test,y_pred,squared = False))","804cf6c1":"reg.coef_","25799483":"data.columns","93f7e2a4":"datax=['Age','MaritalStatus','DependentChildren','DependentsOther', \n            'WeeklyWages', 'PartTimeFullTime',\n            'InitialIncurredCalimsCost']","f3949107":"data = data[datax]","4d27803f":"for x in data.select_dtypes(include = \"object\").columns:\n    data[x] = le.fit_transform(data[x])\nx = pre.minmax_scale(data)\nx_train,x_test,y_train,y_test = ms.train_test_split(x,y,random_state = 2020,test_size = 0.3)\nreg = regressor.fit(x_train,y_train)\ny_pred = reg.predict(x_test)\nprint(\"rmse = \",rmse(y_test,y_pred,squared = False))\nreg.coef_","1321eb38":"ridge = Ridge(alpha = 0.5,normalize = True)\nridge.fit(x_train,y_train)\npredict = ridge.predict(x_test)\nprint(reg.score(x_train,y_train))\nprint(reg.score(x_test,y_test))\nprint(\"rmse = \",rmse(y_test,predict,squared = False))","067c32e0":"ridge = Ridge(alpha = 20,normalize = True)\nridge.fit(x_train,y_train)\npredict = ridge.predict(x_test)\nprint(reg.score(x_train,y_train))\nprint(reg.score(x_test,y_test))\nprint(\"rmse = \",rmse(y_test,predict,squared = False))","3c56fc0e":"lasso = Lasso(alpha = 0.5,normalize = True)\nlasso.fit(x_train,y_train)\npredict = lasso.predict(x_test)\nerror = np.mean((predict - y_test)**2)\nprint(error)\nprint(reg.score(x_train,y_train))\nprint(reg.score(x_test,y_test))\nprint(\"rmse = \",rmse(y_test,predict,squared = False))","33c4d4ea":"lasso = Lasso(alpha = 10,normalize = True)\nlasso.fit(x_train,y_train)\npredict = lasso.predict(x_test)\nprint(reg.score(x_train,y_train))\nprint(reg.score(x_test,y_test))\nprint(\"rmse = \",rmse(y_test,predict,squared = False))","48822f85":"lasso = Lasso(alpha = 20,normalize = True)\nlasso.fit(x_train,y_train)\npredict = lasso.predict(x_test)\nprint(\"rmse = \",rmse(y_test,predict,squared = False))","d87578f0":"data_copy1 = data_copy\ndata_copy1.info()","ea39d9c1":"x = pre.minmax_scale(data_copy1.drop(\"UltimateIncurredClaimCost\",axis =1))\ny = data_copy1[\"UltimateIncurredClaimCost\"]\nx_train,x_test,y_train,y_test = ms.train_test_split(x,y,random_state = 12345,test_size = 0.3)\nrf_regressor = RandomForestRegressor(n_estimators = 10, random_state = 12345)\nrf_regressor.fit(x_train, y_train)\ny_pred = rf_regressor.predict(x_test)\nprint(rf_regressor.score(x_train,y_train))\nr2 = r2_score(y_test, y_pred)\nprint(\"r2 score :\", r2)\nprint(\"rmse = \",rmse(y_test,y_pred,squared = False))","0d11f7f2":"rf_regressor = RandomForestRegressor(n_estimators = 10, random_state = 1)\nrf_regressor.fit(x_train, y_train)\ny_pred = rf_regressor.predict(x_test)\nprint(rf_regressor.score(x_train,y_train))\nprint(\"rmse = \",rmse(y_test,y_pred,squared = False))","5fa602a8":"rf_regressor = RandomForestRegressor(n_estimators = 10, random_state = 0)\nrf_regressor.fit(x_train, y_train)\ny_pred = rf_regressor.predict(x_test)\nprint(rf_regressor.score(x_train,y_train))\nprint(\"rmse = \",rmse(y_test,y_pred,squared = False))","0da0352a":"model=rf_regressor.fit(x_train, y_train)\nmodel.feature_importances_\ndict(zip(data_copy1,model.feature_importances_))","1a11e029":"feature=['Age','MaritalStatus','DependentChildren','DependentsOther', \n            'WeeklyWages', 'PartTimeFullTime',\n            'InitialIncurredCalimsCost']","7afdeec8":"data = data_copy1[feature]","946d1875":"x = pre.minmax_scale(data)\ny = data_copy1[\"UltimateIncurredClaimCost\"]\nx_train,x_test,y_train,y_test = ms.train_test_split(x,y,random_state = 12345,test_size = 0.3)\nrf_regressor = RandomForestRegressor(n_estimators = 10, random_state = 12345)\nrf_regressor.fit(x_train, y_train)\ny_pred = rf_regressor.predict(x_test)\nprint(rf_regressor.score(x_train,y_train))\nr2 = r2_score(y_test, y_pred)\nprint(\"r2 score :\", r2)\nprint(\"rmse = \",rmse(y_test,y_pred,squared = False))","ea356126":"parameters = {\n    \"n_estimators\":[5,10,50,100,250],\n    \"max_depth\":[2,4,8,16,32,None],\n    \"random_state\":[10,124,456,2345,234564],\n    \"max_features\":[\"auto\",\"sqrt\",\"log2\"]\n}","3a6a494c":"rfr=RandomForestRegressor()\ncv = GridSearchCV(rfr,parameters,cv=5)\ncv.fit(x_train,y_train)","5f1b2fb4":"def display(results):\n    print(f'Best parameters are: {results.best_params_}')\n    print(\"\\n\")\n    print(\"mean_score =\", results.cv_results_['mean_test_score'])\n    print(\"std_score =\", results.cv_results_['std_test_score'])\n    print(\"params =\", results.cv_results_['params'])","845c0b1c":"display(cv)","3ecbd3b2":"rf_regressor = RandomForestRegressor(n_estimators = 250, max_depth = 2,max_features = \"auto\",random_state = 234564)\nrf_regressor.fit(x_train, y_train)\ny_pred = rf_regressor.predict(x_test)\nprint(rf_regressor.score(x_train,y_train))\nr2 = r2_score(y_test, y_pred)\nprint(\"r2 score :\", r2)\nprint(\"rmse = \",rmse(y_test,y_pred,squared = False))","e8b423f7":"data_copy2 = data_copy\ndata_copy2.info()","e9b1fec6":"x = pre.minmax_scale(data_copy2.drop(\"UltimateIncurredClaimCost\",axis =1))\ny = data_copy2[\"UltimateIncurredClaimCost\"]\nx_train,x_test,y_train,y_test = ms.train_test_split(x,y,random_state = 12345,test_size = 0.3)\nmodel = DecisionTreeRegressor()\nmodel.fit(x_train, y_train)\ny_pred = model.predict(x_test)\nprint(model.score(x_train,y_train))\nprint(\"rmse = \",rmse(y_test,y_pred,squared = False))","fc42b1ab":"data = data_copy2[feature]\ndata.info()","701e2be6":"x = pre.minmax_scale(data)\nx_train,x_test,y_train,y_test = ms.train_test_split(x,y,random_state = 12345,test_size = 0.3)\nmodel = DecisionTreeRegressor()\nmodel.fit(x_train, y_train)\ny_pred = model.predict(x_test)\nprint(model.score(x_train,y_train))\nprint(\"rmse = \",rmse(y_test,y_pred,squared = False))","a56922ca":"data_copy3 = data_copy\ndata_copy3.info()","04dede52":"from sklearn.metrics import mean_squared_error\nfrom sklearn.ensemble import GradientBoostingRegressor\nGBR = GradientBoostingRegressor()\nGBR.fit(x_train, y_train)\nprint('Train score:', mean_squared_error(y_pred = GBR.predict(x_test) , y_true = y_test, squared= False))\nprint('test score:', mean_squared_error(y_pred = GBR.predict(x_test) , y_true = y_test, squared= False))","dabcaaf4":"data_copy4 = data_copy","a86df25c":"from lightgbm import LGBMRegressor\n\ntest_col = ['Age','MaritalStatus','DependentChildren','DependentsOther', \n            'WeeklyWages', 'PartTimeFullTime',\n            'InitialIncurredCalimsCost']\ndata = data_copy4[test_col]\n\nx = pre.minmax_scale(data)\ny = data_copy1[\"UltimateIncurredClaimCost\"]\nx_train,x_test,y_train,y_test = ms.train_test_split(x,y,random_state = 12345,test_size = 0.3)\n\nlgbm = LGBMRegressor(\n               objective = 'regression', \n               num_leaves = 4,\n               learning_rate = 0.01, \n               n_estimators = 10000,\n               max_bin = 200, \n               bagging_fraction = 0.75,\n               bagging_freq = 5, \n               bagging_seed = 7,\n               feature_fraction = 0.2,\n               feature_fraction_seed = 7,\n               verbose = 1,\n            )\n\nlgbm_model = lgbm.fit(x_train, y_train)\nlg_vpreds = lgbm_model.predict(x_test)\nprint((f\"LGBM RMSE: {np.sqrt(mean_squared_error(y_test, lg_vpreds))}\"))","3816a170":"data_copy4.info()","90f559e7":"data_copy4.describe()","16ab1563":"sns.boxplot(x = \"InitialIncurredCalimsCost\",data = data_copy4)","e4e7b3be":"data = data_copy4","fbacfb6a":"data=data[data[\"InitialIncurredCalimsCost\"]<100000]\ndata","1c7a9107":"test_col = ['Age','MaritalStatus','DependentChildren','DependentsOther', \n            'WeeklyWages', 'PartTimeFullTime',\n            'InitialIncurredCalimsCost']\ndata1 = data[test_col]\n\nx = pre.minmax_scale(data1)\ny = data['UltimateIncurredClaimCost']\nx_train,x_test,y_train,y_test = ms.train_test_split(x,y,random_state = 12345,test_size = 0.3)\n\nlgbm = LGBMRegressor(\n               objective = 'regression', \n               num_leaves = 4,\n               learning_rate = 0.01, \n               n_estimators = 10000,\n               max_bin = 200, \n               bagging_fraction = 0.75,\n               bagging_freq = 5, \n               bagging_seed = 7,\n               feature_fraction = 0.2,\n               feature_fraction_seed = 7,\n               verbose = 1,\n            )\n\nlgbm_model1 = lgbm.fit(x_train, y_train)\nlg_vpreds1 = lgbm_model.predict(x_test)\nprint((f\"LGBM RMSE: {np.sqrt(mean_squared_error(y_test, lg_vpreds1))}\"))","90c7968d":"test.info()","7c883809":"test.isnull().sum()","5bc1af32":"test[\"MaritalStatus\"].value_counts()","690cafbe":"test['MaritalStatus'].value_counts(dropna = False).plot(kind = 'bar', rot = 0)","f1eb69f9":"test['MaritalStatus'].fillna('U', inplace = True)","5b3c9c01":"test.isnull().sum()","a5d9c385":"test['Gender'].value_counts()","e0a44040":"test.columns","d49d98d1":"test['DateTimeOfAccident']=pd.to_datetime(test['DateTimeOfAccident'],format=\"%Y-%m-%dT%H:%M:%S\")\ntest[\"yearofAccident\"] =test[\"DateTimeOfAccident\"].dt.year\ntest[\"dayofweekAccident\"] = test[\"DateTimeOfAccident\"].dt.weekday\ntest['monthOfAccident'] =test['DateTimeOfAccident'].dt.month","c8b3a998":"test['DateReported']=pd.to_datetime(test['DateReported'],format=\"%Y-%m-%dT%H:%M:%S\")\ntest[\"yearofReported\"] =test[\"DateReported\"].dt.year\ntest[\"dayofweekReported\"] = test[\"DateReported\"].dt.weekday\ntest['monthOfReported'] =test['DateReported'].dt.month","a86aabb9":"test['Difference_month_accident_and_reported']=(test['yearofReported']-test['yearofAccident'])*12+(test['monthOfReported']-test['monthOfAccident'])","de7914f5":"test=test.drop(['DateTimeOfAccident','DateReported','ClaimNumber','ClaimDescription','yearofAccident', 'dayofweekAccident',\n       'monthOfAccident', 'yearofReported', 'dayofweekReported',\n       'monthOfReported'],axis=1)\ntest_col = ['Age','MaritalStatus','DependentChildren','DependentsOther', \n            'WeeklyWages', 'PartTimeFullTime',\n            'InitialIncurredCalimsCost']\ntest = test[test_col]","b72de291":"test.info()","9ddb2995":"for x in test.select_dtypes(include = \"object\").columns:\n    test[x] = le.fit_transform(test[x])\ntest.info()","0ced6c01":"linear_predict = reg.predict(test)","edbb4962":"sub['UltimateIncurredClaimCost'] = linear_predict\nsub.to_csv('submission_linear.csv', index = False)\nsub.head(5)\nprint(np.mean(sub['UltimateIncurredClaimCost']))","ed6ce851":"rf_predict = rf_regressor.predict(test)","a6242271":"sub['UltimateIncurredClaimCost'] = rf_predict\nsub.to_csv('submission_rf.csv', index = False)\nsub.head(5)\nprint(np.mean(sub['UltimateIncurredClaimCost']))","ed6b020f":"test.info()","5464fec0":"boos_predict = GBR.predict(test)\nsub['UltimateIncurredClaimCost'] = boos_predict\nsub.to_csv('submission_gboost.csv', index = False)\nsub.head(5)\nprint(np.mean(sub['UltimateIncurredClaimCost']))\n","fd298578":"lg_vpreds = lgbm_model.predict(test)\nsub['UltimateIncurredClaimCost'] = lg_vpreds\nsub.to_csv('submission_lg.csv', index = False)\nsub.head(5)\nprint(np.mean(sub['UltimateIncurredClaimCost']))","26d9d9f1":"lg_vpreds = lgbm_model1.predict(test)\nsub['UltimateIncurredClaimCost'] = lg_vpreds\nsub.to_csv('submission_lg1.csv', index = False)\nsub.head(5)\nprint(np.mean(sub['UltimateIncurredClaimCost']))","39f3ff46":"- ClaimNumber: Unique policy identifier\n- DateTimeOfAccident: Date and time of accident\n- DateReported: Date that accident was reported\n- Age: Age of worker\n- Gender: Gender of worker\n- MaritalStatus: Martial status of worker. (M)arried, (S)ingle, (U)nknown.\n- DependentChildren: The number of dependent children\n- DependentsOther: The number of dependants excluding children\n- WeeklyWages: Total weekly wage\n- PartTimeFullTime: Binary (P) or (F)\n- HoursWorkedPerWeek: Total hours worked per week\n- DaysWorkedPerWeek: Number of days worked per week\n- ClaimDescription: Free text description of the claim\n- InitialIncurredClaimCost: Initial estimate by the insurer of the claim cost\n- UltimateIncurredClaimCost: Total claims payments by the insurance company. This is the field you are asked to predict in the test set.\n","1d38ab21":"if the number of children is high then the insurance claim will be high","cdfe9dc8":" On average incurred claims cost female are the higer amount than male","5434a6da":"import all libraries and modules required","c788219d":"number of dependent others also influence insurance claim cost, but if there is too many other dependent people the insurance claim will not increase significantly. ","ea689520":"# Data Modelling","c6d41bf5":"incurred claim cost are high, if the person is married ","43ef0be4":"# Random Forest","05c3bf27":"### normalization \n### feature and outcome\n### train test dataset\n### ml model","4e37f0cf":"# light gradient boosting","bc7db8ce":"# Decision Tree Regressor","d3b73b99":"the insurance will increase according to age, that is an elderly person will have a more amount as claim","d3d49ca0":"# Linear Regression","4197090a":"## hyper parameter tuning","6bbc7f9c":"# EDA","e3161bd7":"# Gradient Boost","dec22ecb":"partime jobbers will have more insurance than full timers","50e69193":"the insurance claim will be high if the difference is 2 years ","d5f71555":"6 day's worked per week more insurance clam cost","d136813a":"# Data_Preprocessing","e944c0af":"## Regularization","52273db9":"# TEST DATA","0e4f5aa5":"# Data_set","4f503475":"# Data fields","dbd8e51a":"## missing value imputation"}}