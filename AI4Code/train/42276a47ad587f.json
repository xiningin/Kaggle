{"cell_type":{"26dbe915":"code","150ad909":"code","da4ab0f9":"code","dd2f0b34":"code","6dbddad4":"code","930eafb4":"code","bca18032":"code","07cef040":"code","721ca731":"code","921e37e1":"code","542d2437":"code","8d220950":"code","b8e476f6":"code","872fd0d9":"code","da769dab":"code","2fc2401f":"code","1e227b38":"code","db28722d":"code","70422473":"code","11883dd2":"code","a32888fa":"markdown","fa87ca08":"markdown","21d6737f":"markdown","c9fbc857":"markdown","c2d0010a":"markdown","68d50661":"markdown","7d6b8cb8":"markdown","c5f25d8b":"markdown"},"source":{"26dbe915":"import numpy as np\nimport pandas as pd\nimport os\n\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns; sns.set()\n\nimport gc\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nprint(os.listdir(\"..\/input\"))","150ad909":"train = pd.read_json('..\/input\/train.json')\ntest = pd.read_json('..\/input\/test.json')\nsample_submission = pd.read_csv('..\/input\/sample_submission.csv')","da4ab0f9":"print(train.columns)\nprint(sample_submission.head(3))","dd2f0b34":"cols = [\"vid_id\", \"start_time_seconds_youtube_clip\", \"end_time_seconds_youtube_clip\",\n        \"audio_embedding\", \"is_turkey\"]\nprint(train.shape)\nprint(test.shape)\ntrain[train['is_turkey']==1][cols].head(3)","6dbddad4":"\"is_turkey rate is \" + str(train[train['is_turkey']==1].shape[0] \/ train.shape[0])","930eafb4":"print(train['audio_embedding'].head())\n\n#see the possible list lengths of the first dimension\nprint(\"train's audio_embedding can have this many frames: \"+ str(train['audio_embedding'].apply(lambda x: len(x)).unique())) \nprint(\"test's audio_embedding can have this many frames: \"+ str(test['audio_embedding'].apply(lambda x: len(x)).unique())) \n\n#see the possible list lengths of the first element\nprint(\"each frame can have this many features: \"+str(train['audio_embedding'].apply(lambda x: len(x[0])).unique()))","bca18032":"sns.countplot(train['audio_embedding'].apply(lambda x: len(x)))\n# plt.ylim(0,100)\nplt.show()","07cef040":"np.array(train['audio_embedding'].iloc[0]).shape","721ca731":"from keras.models import Sequential, Model\nfrom keras.layers import Dense, Bidirectional, LSTM, BatchNormalization, Dropout, Input, CuDNNLSTM\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\nfrom sklearn.model_selection import train_test_split, KFold, StratifiedKFold","921e37e1":"#split the training data to have a validation set\nxtrain = train['audio_embedding'].tolist()\nytrain = train['is_turkey'].values\n\n# Pad the audio features so that all are \"10 seconds\" long\nx_train = pad_sequences(xtrain, maxlen=10)\ntest_data = pad_sequences(test['audio_embedding'].tolist())\n\ny_train = np.asarray(ytrain)","542d2437":"## https:\/\/stackoverflow.com\/questions\/41032551\/how-to-compute-receiving-operating-characteristic-roc-and-auc-in-keras\nfrom sklearn.metrics import roc_auc_score\nfrom keras.callbacks import Callback\nimport tensorflow as tf\nimport keras.backend as K\nclass roc_callback(Callback):\n    def __init__(self,training_data,validation_data):\n        self.x = training_data[0]\n        self.y = training_data[1]\n        self.x_val = validation_data[0]\n        self.y_val = validation_data[1]\n\n\n    def on_train_begin(self, logs={}):\n        return\n\n    def on_train_end(self, logs={}):\n        return\n\n    def on_epoch_begin(self, epoch, logs={}):\n        return\n\n    def on_epoch_end(self, epoch, logs={}):\n        y_pred = self.model.predict(self.x)\n        roc = roc_auc_score(self.y, y_pred)\n        y_pred_val = self.model.predict(self.x_val)\n        roc_val = roc_auc_score(self.y_val, y_pred_val)\n        print('\\rroc-auc: %s - roc-auc_val: %s' % (str(round(roc,4)),str(round(roc_val,4))),end=100*' '+'\\n')\n        return\n\n    def on_batch_begin(self, batch, logs={}):\n        return\n\n    def on_batch_end(self, batch, logs={}):\n        return\n    \n    \n## https:\/\/github.com\/keras-team\/keras\/issues\/3230#issuecomment-292535661\n#-----------------------------------------------------------------------------------------------------------------------------------------------------\n# AUC for a binary classifier\ndef auc(y_true, y_pred):   \n    ptas = tf.stack([binary_PTA(y_true,y_pred,k) for k in np.linspace(0, 1, 1000)],axis=0)\n    pfas = tf.stack([binary_PFA(y_true,y_pred,k) for k in np.linspace(0, 1, 1000)],axis=0)\n    pfas = tf.concat([tf.ones((1,)) ,pfas],axis=0)\n    binSizes = -(pfas[1:]-pfas[:-1])\n    s = ptas*binSizes\n    return K.sum(s, axis=0)\n#-----------------------------------------------------------------------------------------------------------------------------------------------------\n# PFA, prob false alert for binary classifier\ndef binary_PFA(y_true, y_pred, threshold=K.variable(value=0.5)):\n    y_pred = K.cast(y_pred >= threshold, 'float32')\n    # N = total number of negative labels\n    N = K.sum(1 - y_true)\n    # FP = total number of false alerts, alerts from the negative class labels\n    FP = K.sum(y_pred - y_pred * y_true)    \n    return FP\/N\n#-----------------------------------------------------------------------------------------------------------------------------------------------------\n# P_TA prob true alerts for binary classifier\ndef binary_PTA(y_true, y_pred, threshold=K.variable(value=0.5)):\n    y_pred = K.cast(y_pred >= threshold, 'float32')\n    # P = total number of positive labels\n    P = K.sum(y_true)\n    # TP = total number of correct alerts, alerts from the positive class labels\n    TP = K.sum(y_pred * y_true)    \n    return TP\/P","8d220950":"## https:\/\/www.kaggle.com\/suicaokhoailang\/lstm-with-attention-baseline-0-989-lb\/notebook\nfrom keras import backend as K\nfrom keras.engine.topology import Layer\nfrom keras import initializers, regularizers, constraints\n\n# https:\/\/www.kaggle.com\/qqgeogor\/keras-lstm-attention-glove840b-lb-0-043\nclass Attention(Layer):\n    def __init__(self, step_dim,\n                 W_regularizer=None, b_regularizer=None,\n                 W_constraint=None, b_constraint=None,\n                 bias=True, **kwargs):\n        self.supports_masking = True\n        self.init = initializers.get('glorot_uniform')\n\n        self.W_regularizer = regularizers.get(W_regularizer)\n        self.b_regularizer = regularizers.get(b_regularizer)\n\n        self.W_constraint = constraints.get(W_constraint)\n        self.b_constraint = constraints.get(b_constraint)\n\n        self.bias = bias\n        self.step_dim = step_dim\n        self.features_dim = 0\n        super(Attention, self).__init__(**kwargs)\n\n    def build(self, input_shape):\n        assert len(input_shape) == 3\n\n        self.attention_weights = self.add_weight((input_shape[-1],),  # https:\/\/github.com\/keras-team\/keras\/issues\/7736\n                                 initializer=self.init,\n                                 name='{}_W'.format(self.name),\n                                 regularizer=self.W_regularizer,\n                                 constraint=self.W_constraint)\n        self.features_dim = input_shape[-1]\n\n        if self.bias:\n            self.b = self.add_weight((input_shape[1],),\n                                     initializer='zero',\n                                     name='{}_b'.format(self.name),\n                                     regularizer=self.b_regularizer,\n                                     constraint=self.b_constraint)\n        else:\n            self.b = None\n\n        self.built = True\n\n    def compute_mask(self, input, input_mask=None):\n        return None\n\n    def call(self, x, mask=None):\n        features_dim = self.features_dim\n        step_dim = self.step_dim\n\n        eij = K.reshape(K.dot(K.reshape(x, (-1, features_dim)),\n                        K.reshape(self.attention_weights, (features_dim, 1))), (-1, step_dim))\n\n        if self.bias:\n            eij += self.b\n\n        eij = K.tanh(eij)\n\n        a = K.exp(eij)\n\n        if mask is not None:\n            a *= K.cast(mask, K.floatx())\n\n        a \/= K.cast(K.sum(a, axis=1, keepdims=True) + K.epsilon(), K.floatx())\n\n        a = K.expand_dims(a)\n        weighted_input = x * a\n        return K.sum(weighted_input, axis=1)\n\n    def compute_output_shape(self, input_shape):\n        return input_shape[0],  self.features_dim","b8e476f6":"def get_model():\n    #Define a basic LSTM model\n    model = Sequential()\n    model.add(BatchNormalization(input_shape=(10, 128)))\n    model.add(Bidirectional(CuDNNLSTM(256, return_sequences=True)))\n    model.add(Bidirectional(CuDNNLSTM(128, return_sequences=True)))\n    model.add(Attention(10))\n    model.add(Dense(64, activation='relu', kernel_initializer='he_normal'))\n    model.add(BatchNormalization())\n    model.add(Dropout(0.2))\n    model.add(Dense(1, activation='sigmoid'))\n\n    #maybe there is something better to use, but let's use binary_crossentropy\n    model.compile(loss='binary_crossentropy',\n                  optimizer='adam',\n                  metrics=[auc])\n\n    # Callback\n    best_weights_filepath = 'best_weights.hdf5'\n    es = EarlyStopping(monitor='val_auc', min_delta=0, patience=5, verbose=0, mode='max')\n    mcp = ModelCheckpoint(best_weights_filepath, monitor='val_auc', verbose=0, save_best_only=True, mode='max')\n#     roc_cb = roc_callback(training_data=(x_tr, y_tr),validation_data=(x_val, y_val))\n    \n    return model, es, mcp, best_weights_filepath","872fd0d9":"epochs = 15\n# folds = KFold(n_splits=5)\nfolds = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\npreds = []\nfor k, (tr_idx, val_idx) in enumerate(folds.split(x_train, ytrain)):\n    x_tr = x_train[tr_idx]\n    y_tr = y_train[tr_idx]\n    x_val = x_train[val_idx]\n    y_val = y_train[val_idx]\n    model, es, mcp, bst_w_fp = get_model()\n    model.fit(x_tr, \n              y_tr,\n              validation_data=(x_val, y_val),\n              batch_size=256,\n              epochs=epochs,\n              callbacks=[es, mcp],\n              verbose=0)\n    # Evaluate and Prediction\n    model.load_weights(bst_w_fp)\n    loss, auc_score = model.evaluate(x_val, y_val, batch_size=256, verbose=0)\n    preds.append(model.predict(test_data))\n    del model, x_tr, y_tr, x_val, y_val\n    gc.collect()\n    print('Validation AUC:', auc_score)","da769dab":"preds = np.asarray(preds)[...,0]","2fc2401f":"preds_1 = np.mean(preds, axis=0)\nsubmission1 = pd.DataFrame({'vid_id':test['vid_id'].values,'is_turkey':preds_1})\nsubmission1['is_turkey'] = submission1.is_turkey\nsubmission1.to_csv('submission1.csv', index=False)\nsubmission1.head(10)","1e227b38":"def remove_minmax(arr, mode):\n    if mode==\"min\":\n        m = np.min(arr)\n    elif mode==\"max\":\n        m = np.max(arr)\n    m_loc = np.where(arr == m)[0][0]\n    arr = np.delete(arr, m_loc)\n    return arr","db28722d":"preds_2 = []\nfor row in preds.T:\n    row = remove_minmax(row, \"min\")\n    row = remove_minmax(row, \"max\")\n    rmax = np.max(row)\n    rmin = np.max(row)\n    if rmax > 1 - rmin:\n        preds_2.append(rmax)\n    else:\n        preds_2.append(rmin)\nsubmission2 = pd.DataFrame({'vid_id':test['vid_id'].values,'is_turkey':preds_2})\nsubmission2['is_turkey'] = submission2.is_turkey\nsubmission2.to_csv('submission_2.csv', index=False)\nsubmission2.head(10)","70422473":"preds_3 = np.median(preds, axis=0)\nsubmission3 = pd.DataFrame({'vid_id':test['vid_id'].values,'is_turkey':preds_3})\nsubmission3['is_turkey'] = submission3.is_turkey\nsubmission3.to_csv('submission_3.csv', index=False)\nsubmission3.head(10)","11883dd2":"preds_4 = []\nfor row in preds.T:\n    row = remove_minmax(row, \"min\")\n    row = remove_minmax(row, \"max\")\n    preds_4.append(np.mean(row))\nsubmission4 = pd.DataFrame({'vid_id':test['vid_id'].values,'is_turkey':preds_4})\nsubmission4['is_turkey'] = submission4.is_turkey\nsubmission4.to_csv('submission_4.csv', index=False)\nsubmission4.head(10)","a32888fa":"## Postprocessing","fa87ca08":"## Attention Settings","21d6737f":"## AUC Metric and Callback Settings","c9fbc857":"## Load Data and EDA","c2d0010a":"I use these:\n\n- *Based on [Starter Kernel](https:\/\/www.kaggle.com\/michaelapers\/lstm-starter-notebook)*\n- *CuDNNLSTM with [Attention](https:\/\/www.kaggle.com\/qqgeogor\/keras-lstm-attention-glove840b-lb-0-043)*\n- *[AUC Metric](https:\/\/github.com\/keras-team\/keras\/issues\/3230#issuecomment-292535661) and [Callback](https:\/\/stackoverflow.com\/questions\/41032551\/how-to-compute-receiving-operating-characteristic-roc-and-auc-in-keras)*\n- *StratifiedKfold(7Fold)*\n- *Postprocessing (inspired by [this kernel](https:\/\/www.kaggle.com\/suicaokhoailang\/10-fold-lstm-with-attention-0-990-lb?scriptVersionId=7639203))*\n\n<br>\n\n**Feel free to fork, but please upvote if you do !**","68d50661":"## Prepare ","7d6b8cb8":"## Training model with (Stratified)KFold","c5f25d8b":"## Building model"}}