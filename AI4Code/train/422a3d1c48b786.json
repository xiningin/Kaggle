{"cell_type":{"801eba5b":"code","347890cf":"code","86227214":"code","43a511fd":"code","536bd191":"code","71bfb40f":"code","6e6d590d":"code","8eaf87c6":"code","2b323d87":"code","bacb335c":"code","abe817dc":"code","70d591c8":"code","ba390fa1":"code","4c0afd6e":"code","938558f1":"code","d9100315":"markdown","1be1b27d":"markdown","16c5d239":"markdown","e5c2a75a":"markdown","df714786":"markdown","6b6333f7":"markdown"},"source":{"801eba5b":"import matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport numpy as np\nimport pandas as pd\n\nimport hashlib \n\nfrom scipy.spatial.distance import pdist\n\nimport pickle ","347890cf":"root_dir = '\/kaggle\/input\/shopee-product-matching\/'\ntrain_imgs_dir = root_dir+'train_images\/'\ntest_imgs_dir = root_dir+'test_images\/'\n\ntrain = pd.read_csv(root_dir+'train.csv')\ntest = pd.read_csv(root_dir+'test.csv')\nsubmission = pd.read_csv(root_dir+'sample_submission.csv')\n\n# add target column to training set\ntmp = train.groupby('label_group').posting_id.agg('unique').to_dict()\ntrain['target'] = train.label_group.map(tmp)","86227214":"def hamming_distance(hash1, hash2):\n    \"Calculates hamming distance between two hashes\"    \n    return sum([c1 != c2 for c1, c2 in zip(hash1, hash2)])","43a511fd":"# example for hamming distance between two images of the same label\ntrain_rand_label = np.random.choice(train.label_group.value_counts().index)\ntmp = train[train.label_group == train_rand_label]\nimg1, hash1 = tmp[['image', 'image_phash']].sample(1).values[0]\nimg2, hash2 = tmp[['image', 'image_phash']].sample(1).values[0]\n\nprint('Hamming distance:', hamming_distance(hash1, hash2))\n\nplt.figure(figsize=(10, 5))\nplt.subplot(1, 2, 1)\nplt.imshow(mpimg.imread(train_imgs_dir+img1))\nplt.title(hash1)\nplt.subplot(1, 2, 2)\nplt.imshow(mpimg.imread(train_imgs_dir+img2))\nplt.title(hash2)\nplt.axis('off');","536bd191":"# example for hamming distance between two random images\nimg1, hash1 = train[['image', 'image_phash']].sample(1).values[0]\nimg2, hash2 = train[['image', 'image_phash']].sample(1).values[0]\n\nprint('Hamming distance:', hamming_distance(hash1, hash2))\n\nplt.figure(figsize=(10, 5))\nplt.subplot(1, 2, 1)\nplt.imshow(mpimg.imread(train_imgs_dir+img1))\nplt.title(hash1)\nplt.subplot(1, 2, 2)\nplt.imshow(mpimg.imread(train_imgs_dir+img2))\nplt.title(hash2)\nplt.axis('off');","71bfb40f":"# %%time\n\n# # calculate pairwise distance matrix between postings using image_phash\n# hashes = train.image_phash.values.reshape(-1, 1)\n# dm = pdist(hashes, hamming_distance)\n\n# save mat for later used\n# pickle.dump(dm, open('phash_dist_mat.pkl', 'wb'))","6e6d590d":"# dm = squareform(pdist(hashes[:10000], lambda s1, s2: sum([c1 != c2 for h1, h2 in zip(s1, s2) for c1, c2 in zip(h1, h2)])))\n","8eaf87c6":"class HashOneHot:\n    def __init__(self):\n        hexa = '0123456789abcdef'\n        self.hexa_to_idx = {c: i for i, c in enumerate(hexa)}\n        self.idx_to_hexa = {i: c for i, c in enumerate(hexa)}\n    \n    def encode_hash(self, hash_string):\n        encoding = np.zeros((1, 16*len(hash_string)))\n        for i, hexa in enumerate(hash_string):\n            encoding[0, (i * 16) + self.hexa_to_idx[hexa]] = 1\n        return encoding\n    \n    def decode_hash(self, encoding):\n        hash_string = []\n        hexa_onehot = list(np.where(encoding == 1)[-1])\n        for i, hexa in zip(np.arange(0, 256, 16), hexa_onehot):\n            hash_string.append(self.idx_to_hexa[hexa - i])\n        return ''.join(hash_string)","2b323d87":"# testing\nhashes = train.image_phash.values\n\nencoder = HashOneHot()\nphash = hashes[0][0]\nencoding = encoder.encode_hash(phash)\ndecoding = encoder.decode_hash(encoding)\ndecoding == phash","bacb335c":"phash_onehot = np.empty((hashes.shape[0], 16*16))\n\nfor i, phash in enumerate(hashes):\n    phash_onehot[i, :] = encoder.encode_hash(phash)","abe817dc":"# another test\nfor i, phash in enumerate(phash_onehot):\n    encoder.decode_hash(phash) == hashes[i]","70d591c8":"phash_dist = np.empty(shape=[train.shape[0], train.shape[0]], dtype=np.int8)","ba390fa1":"%%time\nfor i in np.arange(0, 32450, 1000):\n    phash_dist[i:i+1000] = 16 - (np.matmul(phash_onehot[i:i+1000], phash_onehot.T))","4c0afd6e":"def plot_50_closest_posts(i):\n    closest_50_posts = np.argsort(phash_dist[i])[:50]\n    closest_50_images = train.loc[closest_50_posts, 'image'].tolist()\n    closest_50_hashes = train.loc[closest_50_posts, 'image_phash'].tolist()\n\n    n_rows = 5\n    n_cols = 10\n\n    plt.figure(figsize=(n_cols*3.2, n_rows*3.2))\n    for row in range(n_rows):\n        for col in range(n_cols):\n            idx = row * n_cols + col\n            plt.subplot(n_rows, n_cols, idx+1)\n\n            img = mpimg.imread(train_imgs_dir+closest_50_images[idx])\n            plt.imshow(img)\n            plt.axis('off')\n            plt.title(closest_50_hashes[idx] + '-' + str(phash_dist[i, closest_50_posts[idx]]))","938558f1":"rand_post = np.random.choice(32450)\nplot_50_closest_posts(rand_post)","d9100315":"## The aim of this notebook is to make a pHash distance matrix which can help in the analysis of the dataset, and modelling the solution.","1be1b27d":"#### Vanilla matrix multiplcation was too much for the memory to handle, so I opted for making the matrix 1000 posts at a time, which takes around 7 minutes.","16c5d239":"#### The hamming distance is a glorified way of saying how many characters are different between two given strings.","e5c2a75a":"#### Using this matrix, we can find the n closest posts to any given post. For example, this function plots the top 50 closest posts are those and puts the hash and the hamming distance in the title.","df714786":"#### One thing I noticed while fooling around with this function is that the similar posts won't probably appear in the top 50 closest posts. Definitely more analysis could carried out using this matrix, so I hope you enjoy it.","6b6333f7":"#### At first I tried usin numpy's pdist, but 32450x32450 pairwise distance adds up to more than a billion pairs.\n\n#### After that I divised a solution which converts the pHash to a one hot encoded version consisting of 16 features for each of the 16 characters of the hash. Where the hamming distance is just 16 - dot(hash1, hash2)."}}