{"cell_type":{"7a719c45":"code","71eafd20":"code","02f92c96":"code","4f65debe":"code","1c48c548":"code","45da7d19":"code","ce10dc15":"code","cd6c0391":"code","068383bd":"code","06c94883":"code","7e8c1187":"code","e0456883":"code","2ccf6395":"markdown","1d03d66d":"markdown","1e454151":"markdown","aa503d3d":"markdown","b70ee218":"markdown","f41ad916":"markdown","9c03ea8a":"markdown","e6e2ed03":"markdown","3e0c1912":"markdown","19f21081":"markdown","3abec7d9":"markdown","74b14706":"markdown","06e3c222":"markdown","95de1f87":"markdown","e1f4f78b":"markdown","24eeb8a3":"markdown","3d0b31a0":"markdown"},"source":{"7a719c45":"import pandas as pd\npd.options.display.float_format = '{:20,.2f}'.format # suppress scientific notation\npd.set_option('display.max_columns', None) # display all columns of a df\nimport numpy as np\nimport matplotlib.pyplot as plt\ndata = pd.read_csv('\/kaggle\/input\/nutritional-values-for-common-foods-and-products\/nutrition.csv').drop(['Unnamed: 0', 'serving_size'], axis=1)\n# use the name as the index \nnames = data['name']\ndata = data.drop('name', axis=1)","71eafd20":"numbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.']\n\ndef delete_unit(x):\n    if isinstance(x, str):\n        for char in range(len(x)):\n            if x[char] not in numbers:\n                return float(x[0:char:1])\n    else: \n        return x\n            \ncols_with_unit = data.columns.drop(['calories'])\nfor col in data[cols_with_unit]:\n    data[col] = data[col].apply(delete_unit)\ndata.head()","02f92c96":"data.describe()","4f65debe":"data = data.drop('lucopene', axis=1)","1c48c548":"fig, ax1 = plt.subplots(figsize=(12,4))\nax1.set_title('Missing Values per column')\nax1.set_ylabel('Number of Null Values in %')\nnum_rows = data.shape[0]\nnulls_per_col = data.isna().sum()\nnulls_per_col_sorted = nulls_per_col.sort_values(ascending=False)\n# we only want to display columns having at least one nullvalue\nmask_greater_zero = nulls_per_col>0\n(nulls_per_col_sorted*100\/num_rows)[mask_greater_zero].plot.bar(ax=ax1);","45da7d19":"# drop columns having at least ~1\/3 null values\nthresh_cols = int(data.shape[0] \/ 3)\ndata = data.dropna(axis=1, thresh=thresh_cols)\n\n# drop rows having at least ~50% null values \nthresh_rows = int(data.shape[1] \/ 2)\ndata = data.dropna(axis=0, thresh=thresh_rows)","ce10dc15":"from sklearn.impute import SimpleImputer\n\ncols = data.columns\nimputer = SimpleImputer(strategy='mean')\ndata = pd.DataFrame(imputer.fit_transform(data), columns=cols)\ndata","cd6c0391":"from scipy import stats\ndata_zscore = data.apply(stats.zscore, axis=0)\nmask_outliers = np.logical_not(((data_zscore>4).any(axis=1)).values + ((data_zscore<-4).any(axis=1)).values)\ndata.loc[mask_outliers,:]","068383bd":"# rows with more than 30g proteins\ndata_high_protein = data.loc[data['protein']>30, ['protein', 'calories']]\n\n# sort with \n# priority 1: low calories\n# priority 2: high protein\ndata_high_protein = data_high_protein.sort_values(by=['calories', 'protein'], ascending=[True, False]).head(10)\ndata_high_protein","06c94883":"def divide(x,y):\n    if y!=0:\n        return x \/ y\n    else:\n        return 0\n    \ndata_proPerCal = data.loc[data['calories']!=0, ['calories','protein']]\ndata_proPerCal['proteinPerCalory'] = data_proPerCal.apply(lambda row: divide(row['protein'], row['calories']), axis=1)\n\ndata_proPerCal = data_proPerCal['proteinPerCalory'].sort_values(ascending=False).head(10)","7e8c1187":"fig, ax1 = plt.subplots()\ndata_proPerCal.plot.barh(title='Products with highest amount of protein amount per calory', ax=ax1)\nax1.set_yticklabels(names[data_proPerCal.index].values)\nax1.set_xlabel('Grams of Protein per calory')\nplt.show()","e0456883":"# font sizes, this has to be updated for every plot, if changed once\nplt.rc('axes', titlesize=40)    \nplt.rc('axes', labelsize=30)    \nplt.rc('xtick', labelsize=20)    \nplt.rc('ytick', labelsize=20)\n\nwith plt.style.context('dark_background'):\n    fig, ax1  = plt.subplots(figsize=(20,10))\n    df_plot = pd.DataFrame(data, columns=['fat', 'calories'])\n    df_plot.plot(kind='scatter', x='fat', y='calories', alpha=0.4, c='yellow', ax=ax1, edgecolor='black')\n\n    ax1.set_xlabel(f'fat in g per 100g')\n    ax1.set_ylabel(f'calories per 100g')\n    ax1.set_title('Interaction between fat and calories')    \n\n    fig.tight_layout()\n    plt.savefig('fat')\n    plt.show()","2ccf6395":"<div class=\"alert alert-danger\" role=\"alert\">\n    <h3>This notebook is work in progress. Feel free to <span style=\"color:red\">comment<\/span> if you have any suggestions   |   motivate me with an <span style=\"color:red\">upvote<\/span> if you like this project.<\/h3>\n<\/div>","1d03d66d":"# High Protein Food\n![jonas-allert-MZ0U0g6RQpQ-unsplash.jpg](attachment:jonas-allert-MZ0U0g6RQpQ-unsplash.jpg)","1e454151":"# get an Overview\nFinally! We can get started and get an overview of the dataset","aa503d3d":"* The data seems to contain many `Null values`","b70ee218":"# Missing Values","f41ad916":"Replace the rest of the missing values with the column means","9c03ea8a":"* `lucopene` seems to contain zeros only -> drop it\n\n* Most variables seem to be extremely skewed, cause e.g. many of them have at least 50% zero values.","e6e2ed03":"# Products with high Protein and low Calories","3e0c1912":"I am interested in food having at least 30g of proteins and as few calories as possible. Let's take a look at these products.","19f21081":"source: https:\/\/unsplash.com\/photos\/MZ0U0g6RQpQ","3abec7d9":"The amount of missing values in this dataset is extremely high. \n\nLet's remove columns and rows containing too many missing values","74b14706":"# Outliers\nget rid of extreme outliers. Detect them using zscores","06e3c222":"Let's first of all get ridd of all the units to obtain cleaned numerical data. Each column has one unique unit.","95de1f87":"Let's take a look at fat as well!","e1f4f78b":"In this notebook, I will take a look at a dataset containing various nutrition facts. Let's see what we can find. ","24eeb8a3":"Now let's find the food which provides the most proteins per calory!","3d0b31a0":"We can clearly see a linear relationship between fat and calories."}}