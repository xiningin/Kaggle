{"cell_type":{"5c0c1743":"code","5c340c6b":"code","8f3ddcfe":"code","056a6fa1":"code","dddb8820":"code","b4c0dc47":"code","e060cab2":"code","691589e7":"code","5c05c7aa":"code","89432e54":"code","0259565b":"code","cf80d122":"code","557154c6":"code","82f12059":"code","f7d72e8a":"code","29f3a728":"markdown","2c3f1543":"markdown","c1b495ce":"markdown","fe7a3d17":"markdown","208f4ba9":"markdown","ecc556fd":"markdown","5cb6f408":"markdown","3b12de86":"markdown","68939407":"markdown"},"source":{"5c0c1743":"import numpy as np \nimport pandas as pd \nfrom keras.layers.core import Dense, Activation, Dropout\nfrom keras.layers.recurrent import LSTM\nfrom keras.models import Sequential\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt","5c340c6b":"df = pd.read_csv(\"..\/input\/nyse\/prices-split-adjusted.csv\", index_col = 0)\ndf.info()\ndf.head()\n\nprint('\\nNumber of different Stocks: ', len(list(set(df.symbol))))\nprint(list(set(df.symbol))[:10])","8f3ddcfe":"df.tail()\n","056a6fa1":"df.describe()","dddb8820":"\nplt.figure(figsize=(15, 5))\nplt.plot(df[df.symbol == 'YHOO'].open.values, color='red', label='open')\nplt.plot(df[df.symbol == 'YHOO'].close.values, color='green', label='close')\nplt.plot(df[df.symbol == 'YHOO'].low.values, color='blue', label='low')\nplt.plot(df[df.symbol == 'YHOO'].high.values, color='black', label='high')\nplt.title('Stock Price')\nplt.xlabel('Time[days]')\nplt.ylabel('Price')\n#plt.legend(loc='best')\nplt.show()","b4c0dc47":"def normalize_data(df):\n    min_max_scaler = MinMaxScaler()\n    df['open'] = min_max_scaler.fit_transform(df.open.values.reshape(-1,1))\n    df['high'] = min_max_scaler.fit_transform(df.high.values.reshape(-1,1))\n    df['low'] = min_max_scaler.fit_transform(df.low.values.reshape(-1,1))\n    df['close'] = min_max_scaler.fit_transform(df['close'].values.reshape(-1,1))\n    return df","e060cab2":"def create_data(stock, seq_len):\n    data_raw = stock.to_numpy()    #convert to numpy array\n    data = []\n    \n    #Create all possible sequences of length seq_len\n    \n    for idx in range(len(data_raw) - seq_len): \n        data.append(data_raw[idx: idx + seq_len])\n    percentage_of_val_set = 10 \n    percentage_of_test_set = 10   \n    data = np.array(data);\n    validation_set_size = int(np.round(percentage_of_val_set\/100*data.shape[0]));  \n    test_set_size = int(np.round(percentage_of_test_set\/100*data.shape[0]));\n    train_set_size = data.shape[0] - (validation_set_size + test_set_size);\n    \n    x_train = data[:train_set_size,:-1,:]\n    y_train = data[:train_set_size,-1,:]\n    \n    x_valid = data[train_set_size:train_set_size+validation_set_size,:-1,:]\n    y_valid = data[train_set_size:train_set_size+validation_set_size,-1,:]\n    \n    x_test = data[train_set_size+validation_set_size:,:-1,:]\n    y_test = data[train_set_size+validation_set_size:,-1,:]\n    \n    return [x_train, y_train, x_valid, y_valid, x_test, y_test]","691589e7":"\ndf_stock= pd.read_csv(\"..\/input\/nyse\/prices.csv\", index_col = 0)\n\ndf_stock = df[df.symbol == 'YHOO'].copy()\ndf_stock.drop(['symbol'],1,inplace=True)\ndf_stock.drop(['volume'],1,inplace=True)\n","5c05c7aa":"df_stock_norm = df_stock.copy()\ndf_stock_norm = normalize_data(df_stock_norm)\ndf_stock_norm.shape","89432e54":"seq_len = 20        \ntrain_x, train_y, val_x, val_y, test_x, test_y = create_data(df_stock_norm, seq_len)\n","0259565b":"plt.figure(figsize=(15, 5));\nplt.plot(df_stock_norm.open.values, color='red', label='open')\nplt.plot(df_stock_norm.close.values, color='green', label='low')\nplt.plot(df_stock_norm.low.values, color='blue', label='low')\nplt.plot(df_stock_norm.high.values, color='black', label='high')\n\n\nplt.title('Stock')\nplt.xlabel('Time [days]')\nplt.ylabel('Normalized price\/Volume')\nplt.legend(loc='best')\nplt.show()","cf80d122":"\n\nlstm_model = Sequential()\n\nlstm_model.add(LSTM(input_shape = (19, 4), units = 50, return_sequences=True)) \nlstm_model.add(Dropout(0.2))                                                   \n\nlstm_model.add(LSTM(100, return_sequences = False))                           \nlstm_model.add(Dropout(0.2))                                                   \n\nlstm_model.add(Dense(units=4))                                                 \nlstm_model.add(Activation('linear'))\n\n\n'''Compiling the model'''\n\nlstm_model.compile(loss='mse', optimizer='rmsprop', metrics = ['accuracy'])\n","557154c6":"\nlstm_model.fit(train_x, train_y, batch_size=128, epochs=5, validation_data=(val_x, val_y))","82f12059":"closing_price = lstm_model.predict(test_x)","f7d72e8a":"output=(np.mean(closing_price))\noutput","29f3a728":"# Graph of Normalized stock prices of 'YHOO'\n","2c3f1543":"# Function to Normalize the data","c1b495ce":"# Yahoo data plot","fe7a3d17":"# Function to create Train\/Validation\/Test data of a particular Stock data","208f4ba9":"Create Train\/Validation\/Test data","ecc556fd":"# Imports","5cb6f408":"#  **LSTM Model**","3b12de86":"Normalization of the data\n","68939407":"Removing the column 'Symbol' and 'Volume'"}}