{"cell_type":{"3b913b69":"code","c99de2b0":"code","e7a2d79f":"code","18bad63e":"code","ecff17ac":"code","53a884f1":"code","31ee8f60":"code","a73144ef":"code","516082c8":"code","e8314416":"code","4f5cd677":"code","c96e7e4c":"code","98f36f32":"code","65038100":"code","f64a733e":"code","e75c94e5":"code","c5369d94":"code","273c5874":"code","38ee040b":"code","8da313b3":"code","020e72d1":"code","c08a5c0a":"code","705c207b":"code","bca1db15":"code","0a23e9b7":"code","3b01f846":"code","7bc15722":"code","0c1ce408":"code","b908b8b3":"code","47638b69":"code","b37462a9":"code","190ec86c":"code","3bbf1fca":"code","127ab867":"code","b80097cc":"code","b915c26d":"code","3786ade3":"code","1e29d7ae":"code","36cc99be":"code","99c1e70e":"code","808a586e":"code","eeba7de5":"code","d81dbecd":"code","9e7d9cbd":"code","3a3b675d":"code","57841449":"code","6681e850":"code","5df24ba6":"code","dbc65421":"code","bf90799e":"code","dcf73f82":"code","704b4996":"code","178ca31f":"code","21eeaa5b":"code","bb777b95":"code","67290e50":"code","964d374d":"code","e8966028":"code","6c746b5d":"code","922a581f":"code","404ce256":"code","528a31d4":"code","9626b488":"code","4be74b92":"code","569edce0":"code","08512ff1":"code","1b61d896":"code","9dfef3b9":"code","b63ec606":"code","7462b7b9":"code","dd0ca420":"code","005f394e":"code","5c64853d":"code","a7d92e91":"code","c8cb2243":"code","9bcc33cf":"code","782f3c07":"code","082a3db8":"code","6faba9e3":"code","83029f8e":"code","d153083f":"code","d1f4cd00":"code","775997fd":"code","49b1605b":"code","c7fa5362":"code","9d7fb4d8":"markdown","8bd85ab5":"markdown","7c33b1a4":"markdown","a482fd38":"markdown","cc005fb2":"markdown","56dabb9d":"markdown","0e8bd0a8":"markdown","934c2bd9":"markdown","140ab3ba":"markdown","7847658d":"markdown","8d9f90a5":"markdown","67c2e4df":"markdown","20f141ff":"markdown","546175cc":"markdown","43d795d0":"markdown","e71bb8a0":"markdown","4d400217":"markdown"},"source":{"3b913b69":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nfrom collections import Counter\n\nsns.set_style('whitegrid')\nsns.set(font_scale = 1.2)\n\nimport missingno as msno\nimport warnings \nwarnings.filterwarnings(\"ignore\")\n\n%matplotlib inline","c99de2b0":"os.listdir(\"..\/input\")","e7a2d79f":"df_train = pd.read_csv(\"..\/input\/boazminipro\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/boazminipro\/test.csv\")","18bad63e":"df_train.head()","ecff17ac":"df_train.shape","53a884f1":"numerical_feats = df_train.dtypes[df_train.dtypes != \"object\"].index\nprint(\"Numerical Features: \", len(numerical_feats))\n\ncategorical_feats = df_train.dtypes[df_train.dtypes == \"object\"].index\nprint(\"Categorical Features: \",len(categorical_feats))\n\n# \ubc94\uc8fc\ud615 \ubcc0\uc218\uac00 \uc5c6\ub2e4 (\uc22b\uc790\ub85c \uc774\ub8e8\uc5b4\uc9c4 \ubc94\uc8fc\ud615 \ubcc0\uc218\uac00 \uc788\ub2e4. ex.\ub4f1\uae09)\n# \ud558\ub098\uc788\ub294 \ubc94\uc8fc\ud615 \ubcc0\uc218\ub294  [\"date\"]\uc774\ub2e4. datetime\uc73c\ub85c \uc124\uc815\ud55c\ub2e4.","31ee8f60":"for col in df_train.columns:\n    Null = \"Feature: {:<10}\\t Count of Null: {}\".format(col, df_train[col].isnull().sum())\n    print(Null)","a73144ef":"msno.matrix(df = df_train.iloc[:,:], color = (0.1, 0.4, 0.5), figsize = (15, 6))\n\n#missingno\uc758 matrix\ub85c \uc2dc\uac01\ud654\ud55c \ubaa8\uc2b5, \uc5ed\uc2dc null\uac12\uc740 \uc5c6\ub2e4.","516082c8":"numerical_feats = df_train.dtypes[df_train.dtypes != \"object\"].index\nprint(\"Numerical Features: \", len(numerical_feats))\n\nfor col in numerical_feats.difference([\"date\"]):\n    SkewKurt = \"{:<10}\\t Skewness: {:.4f}\\t Kurtosis: {:.4f}\".format(col, df_train[col].skew(), df_train[col].kurt())\n    print(SkewKurt)\n    \n#\uac01 feature\ub4e4\uc758 \uc65c\ub3c4\uc640 \ucca8\ub3c4\ub97c \uc0b4\ud3b4\ubcf8\ub2e4. \n#target feature\uc778 price \uc5ed\uc2dc \uc870\uc815\uc774 \ud544\uc694.\n#\ucc98\uc74c\uc5d0 \uc218\uce58\ud615, \ubc94\uc8fc\ud615 \uad6c\ubd84\ud560 \ub54c \ub9d0\ud588\ub358 \ubc94\uc8fc\uac00 \uc218\uce58(\ub4f1\uae09)\ub85c \uc9c0\uc815\ub418\uc5b4\uc788\ub294 \ubcc0\uc218\ub4e4\uc744 \uc8fc\uc758\ud55c\ub2e4.","e8314416":"df_train[\"price\"] = df_train[\"price\"].map(lambda i:np.log(i) if i>0 else 0)","4f5cd677":"corr_data = df_train[numerical_feats]\n\ncolormap = plt.cm.PuBu\nsns.set(font_scale=1.3)\n\nf , ax = plt.subplots(figsize = (14,12))\nplt.title('Correlation of Numeric Features with Price',size=18)\nsns.heatmap(corr_data.corr(),square = True, linewidths = 0.1,\n            cmap = colormap, linecolor = \"white\", vmax=0.8)\n\n#\uc804\uccb4\uc801\uc778 correlation heatmap","c96e7e4c":"k= 12\ncols = corr_data.corr().nlargest(k,'price')['price'].index\nprint(cols)\ncm = np.corrcoef(df_train[cols].values.T)\nf , ax = plt.subplots(figsize = (12,10))\nsns.heatmap(cm, vmax=.8, linewidths=0.1,square=True,annot=True,cmap=colormap,\n            linecolor=\"white\",xticklabels = cols.values ,annot_kws = {'size':14},yticklabels = cols.values)\n\n#\uc804\uccb4\uc801\uc778 correlation heatmap\uc5d0\uc11c \uc0c1\uad00\uacc4\uc218\uac00 \ub192\uc740 \uc21c\uc73c\ub85c 12\uac1c\ub97c \ubf51\uc544\uc11c \ub2e4\uc2dc \ub9cc\ub4e0 heatmap","98f36f32":"df_train.plot(kind='scatter', x='long', y='lat', alpha=.3, figsize=(10,7),\n         c=df_train['price'], cmap=plt.get_cmap('jet'), colorbar=True)","65038100":"fig, ((ax1, ax2), (ax3, ax4),(ax5,ax6)) = plt.subplots(nrows=3, ncols=2, figsize=(18,15))\n\nsqft_living_scatter_plot = pd.concat([df_train['price'],df_train['sqft_living']],axis = 1)\nsns.regplot(x='sqft_living',y = 'price',data = sqft_living_scatter_plot,scatter= True, fit_reg=True, ax=ax1)\n\nsqft_lot_scatter_plot = pd.concat([df_train['price'],df_train['sqft_lot']],axis = 1)\nsns.regplot(x='sqft_lot',y = 'price',data = sqft_lot_scatter_plot,scatter= True, fit_reg=True, ax=ax2)\n\nsqft_above_scatter_plot = pd.concat([df_train['price'],df_train['sqft_above']],axis = 1)\nsns.regplot(x='sqft_above',y = 'price',data = sqft_above_scatter_plot,scatter= True, fit_reg=True, ax=ax3)\n\nsqft_basement_scatter_plot = pd.concat([df_train['price'],df_train['sqft_basement']],axis = 1)\nsns.regplot(x='sqft_basement',y = 'price',data = sqft_basement_scatter_plot,scatter= True, fit_reg=True, ax=ax4)\n\nsqft_living15_scatter_plot = pd.concat([df_train['price'],df_train['sqft_living15']],axis = 1)\nsns.regplot(x='sqft_living15',y = 'price',data = sqft_living15_scatter_plot,scatter= True, fit_reg=True, ax=ax5)\n\nsqft_lot15_scatter_plot = pd.concat([df_train['price'],df_train['sqft_lot15']],axis = 1)\nsns.regplot(x='sqft_lot15',y = 'price',data = sqft_lot15_scatter_plot,scatter= True, fit_reg=True, ax=ax6)\n\n# \uc218\uce58\ud615 \ubcc0\uc218\ub4e4\uc5d0 \ub530\ub978 price\ub97c scatter plot\uc73c\ub85c \uadf8\ub824\ubcf8\ub2e4. \n# sqft_living, sqft_above, sqft_living15\ub294 \uc5b4\ub290\uc815\ub3c4 \uc774\uc0c1\uce58\uac00 \uc788\uc5b4\ubcf4\uc778\ub2e4.\n# \ub098\uba38\uc9c0\ub4e4\uc740 \ubd84\uc0b0\uc774 \ub9e4\uc6b0 \ucee4\ubcf4\uc778\ub2e4. \n# basement\ub294 0\uc758 \uac12\uc774 \uad49\uc7a5\ud788 \ub9ce\ub2e4. \ub610\ud55c \uc774\uc0c1\uce58\ub3c4 \ub9ce\uc544\ubcf4\uc778\ub2e4.","f64a733e":"df_train[[\"grade\", \"price\"]].groupby([\"grade\"], as_index = True).describe()\n\n# \ub4f1\uae09\uc5d0 \ub530\ub978 \uc8fc\ud0dd\uac00\uaca9","e75c94e5":"fig, ax = plt.subplots(figsize = (12, 8))\n\nsns.boxplot(x = df_train[\"grade\"], y = df_train[\"price\"], data = df_train, ax = ax, palette = \"Blues_d\")\n\n# grade\uc5d0 \ub530\ub978 price\uc758 boxplot\uc744 \uadf8\ub824\ubcf8 \uacb0\uacfc \n# 1) 2\ub4f1\uae09\uc740 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc74c\n# 2) 3\ub4f1\uae09\uc758 \ud3c9\uade0\uac12\uc774 4\ub4f1\uae09\ubcf4\ub2e4 \ub192\uac8c \ub098\ud0c0\ub0a8\n# 3) 7, 8, 11\ub4f1\uae09\uc5d0 \uc0c1\ub2f9\ud55c \uc774\uc0c1\uce58\uac00 \uc874\uc7ac\ud558\ub294 \uac83\uc73c\ub85c \ubcf4\uc784\n# 4) 7~10 \ub4f1\uae09\uc758 \uc774\uc0c1\uce58\uac00 \uaf64 \ub9ce\uc740 \uac83\uc73c\ub85c \ubcf4\uc784\n\n# \ub370\uc774\ud130 \uc124\uba85\uc5d0 \ub530\ub974\uba74 grade\uc758 \uacbd\uc6b0 \"1-3\uc740 \uac74\ubb3c \uac74\ucd95 \ubc0f \ub514\uc790\uc778\uc5d0 \ubbf8\uce58\uc9c0 \ubabb\ud558\uace0 7\uc740 \ud3c9\uade0 \uc218\uc900\uc758 \uac74\ucd95 \ubc0f \ub514\uc790\uc778\uc744, 11-13\uc740 \ub192\uc740 \uc218\uc900\uc758 \uac74\ucd95 \ubc0f \ub514\uc790\uc778\uc744 \uc9c0\ub2c8\uace0 \uc788\uc2b5\ub2c8\ub2e4.\" ","c5369d94":"df_train[[\"bedrooms\", \"price\"]].groupby([\"bedrooms\"], as_index = True).describe()\n\n# \ubc29\uc758 \uc218\uc5d0 \ub530\ub978 \uc8fc\ud0dd \uac00\uaca9","273c5874":"fig, ax = plt.subplots(figsize = (16, 10))\n\nsns.boxplot(x = df_train[\"bedrooms\"], y = df_train[\"price\"], data = df_train, ax = ax, palette = \"Blues_d\")\n\n# boxplot\uc744 \uc0b4\ud3b4\ubcf4\uba74 \ubc29\uc758 \uc218\uc5d0 \ub530\ub978 \uac00\uaca9\uc774 \uc9c1\uad00\uc801\uc73c\ub85c \ub300\ub7b5 \uc120\ud615\uc784\uc744 \uc54c \uc218 \uc788\uc74c.\n# \uc717 \uc140\uc758 describe\ub97c \ubd10\ub3c4 \uac00\uaca9\uc758 \ud3c9\uade0\uac12\uc774 \ubc29\uc5d0 \ub530\ub77c \uc99d\uac00\ud558\ub294 \uac83\uc744 \ubcfc \uc218 \uc788\uc74c.\n# boxplot\uc744 \ubc97\uc5b4\ub09c \uc774\uc0c1\uce58\ub4e4\uc740 \uc9c0\uc5ed\ud2b9\uc131(\ub545\uac12\uc774 \ube44\uc2f8\uac70\ub098 \ub300\ub3c4\uc2dc\uc774\uac70\ub098?)\uc5d0 \uc601\ud5a5\uc744 \ubc1b\ub294\ub2e4\uace0 \uc0dd\uac01\ud560 \uc218 \uc788\ub2e4.","38ee040b":"df_train[[\"bathrooms\", \"price\"]].groupby([\"bathrooms\"], as_index = True).describe()\n\n# \ub370\uc774\ud130 \uc124\uba85\uc5d0 \ub530\ub974\uba74\n# - 0.5 : \uc138\uba74\ub300, \ud654\uc7a5\uc2e4\n# - 0.75 : \uc138\uba74\ub300, \ud654\uc7a5\uc2e4, \uc0e4\uc6cc\uc2e4\n# - 1 : \uc138\uba74\ub300, \ud654\uc7a5\uc2e4, \uc0e4\uc6cc\uc2e4, \uc695\uc870\n# \uc758 \uac12\uc744 \uac16\ub294\ub2e4\uace0 \ud55c\ub2e4.","8da313b3":"fig, ax = plt.subplots(figsize = (16, 10))\n\nsns.boxplot(x = df_train[\"bathrooms\"], y = df_train[\"price\"], data = df_train, ax = ax, palette = \"Blues_d\")","020e72d1":"df_train[[\"floors\", \"price\"]].groupby([\"floors\"], as_index = True).describe()\n\n# \uce35\uc218\uc758 \uacbd\uc6b0 1.5, 2.5, 3.5\uc640 \uac19\uc774 \uc18c\uc22b\uc810\uc744 \uac00\uc9c4\ub2e4. \n# \ubbf8\uad6d\uc5d0\uc11c \ud754\ud788 \ubcfc \uc218 \uc788\ub294 \ud615\ud0dc\ub85c \ub2e4\ub77d\ubc29\uc744 \ub07c\uace0 \uc788\ub294 \ud615\ud0dc\n# floors, price\ub294 \uc120\ud615\uad00\uacc4\ub85c \ubcf4\uc784","c08a5c0a":"df_train[[\"waterfront\", \"price\"]].groupby([\"waterfront\"], as_index = True).describe()\n\n# \ubc14\uc774\ub108\ub9ac (\ub9ac\ubc84\ubdf0? \ub4f1\uc774 \uc788\uace0 \uc5c6\uace0)\n# waterfront, price\ub294 \uc120\ud615\uad00\uacc4\ub85c \ubcf4\uc784","705c207b":"df_train[[\"view\", \"price\"]].groupby([\"view\"], as_index = True).describe()\n\n# view, price\ub294 \uc120\ud615\uad00\uacc4\ub85c \ubcf4\uc784","bca1db15":"df_train[[\"condition\", \"price\"]].groupby([\"condition\"], as_index = True).describe()\n\n# condition, price\ub294 \uc120\ud615\uad00\uacc4\ub85c \ubcf4\uc784","0a23e9b7":"for data in [df_train, df_test]:\n    data['date'] = pd.to_datetime(data['date'])\n    data['date_year'] = data['date'].dt.year\n    data['date_month'] = data['date'].dt.month","3b01f846":"train_pivot = df_train.pivot_table(index=['date_month'], columns=['date_year'], values='price') # price mean\nplt.figure(figsize=(10,8))\nsns.heatmap(train_pivot, annot=True, cmap = colormap)","7bc15722":"plt.figure(figsize=(10,5))\nsns.lineplot(x=df_train['date_month'], y=df_train['price'])","0c1ce408":"df_train.loc[df_train.grade==3]\n\n# EDA \uacfc\uc815\uc5d0\uc11c \uc0b4\ud3b4\ubcf8 grade = 3\uc778 \uc774\uc0c1\uce58 \uc81c\uac70","b908b8b3":"print(df_train[df_train['grade']==3].sqft_lot.mean())\nprint(df_train[df_train['grade']==4].sqft_lot.mean())","47638b69":"df_train.drop([2302,4123], axis=0, inplace=True)","b37462a9":"df_train.loc[(df_train.grade==11) & (df_train.price>15.5)]\n\n# grade 11 \ud655\uc778, sqft_living\uc774 \ud06c\ubbc0\ub85c \uc81c\uac70\ud558\uc9c0 \uc54a\uc74c","190ec86c":"df_train[(df_train.grade)==11].sqft_living.max()","3bbf1fca":"df_train.loc[(df_train.bathrooms==4.5)&(df_train.price>15)]\n\n# bathroom \uc774\uc0c1\uce58, \uc81c\uac70 X","127ab867":"df_train.loc[(df_train.bathrooms==5.25)&(df_train.price<13)]\n\n# bathroom \uc774\uc0c1\uce58, \uc81c\uac70 X","b80097cc":"df_train[df_train.sqft_living > 13000]\n\n# sqft_living \uc774\uc0c1\uce58 \uc81c\uac70","b915c26d":"df_train.drop(8912, axis = 0, inplace = True)","3786ade3":"df_train.loc[(df_train.sqft_lot>1500000)&(df_train.price>13)]\n\n# sqft_lot \uc774\uc0c1\uce58 \uc81c\uac70","1e29d7ae":"df_train.drop(1231, axis = 0, inplace = True)","36cc99be":"df_train[\"sqft_above\"] = df_train[\"sqft_above\"].map(lambda i:np.log(i) if i>0 else 0)\ndf_train[\"sqft_basement\"] = df_train[\"sqft_basement\"].map(lambda i:np.log(i) if i>0 else 0)\ndf_train[\"sqft_living\"] = df_train[\"sqft_living\"].map(lambda i:np.log(i) if i>0 else 0)\ndf_train[\"sqft_living15\"] = df_train[\"sqft_living15\"].map(lambda i:np.log(i) if i>0 else 0)\ndf_train[\"sqft_lot\"] = df_train[\"sqft_lot\"].map(lambda i:np.log(i) if i>0 else 0)\ndf_train[\"sqft_lot15\"] = df_train[\"sqft_lot15\"].map(lambda i:np.log(i) if i>0 else 0)\n\ndf_test[\"sqft_above\"] = df_test[\"sqft_above\"].map(lambda i:np.log(i) if i>0 else 0)\ndf_test[\"sqft_basement\"] = df_test[\"sqft_basement\"].map(lambda i:np.log(i) if i>0 else 0)\ndf_test[\"sqft_living\"] = df_test[\"sqft_living\"].map(lambda i:np.log(i) if i>0 else 0)\ndf_test[\"sqft_living15\"] = df_test[\"sqft_living15\"].map(lambda i:np.log(i) if i>0 else 0)\ndf_test[\"sqft_lot\"] = df_test[\"sqft_lot\"].map(lambda i:np.log(i) if i>0 else 0)\ndf_test[\"sqft_lot15\"] = df_test[\"sqft_lot15\"].map(lambda i:np.log(i) if i>0 else 0)","99c1e70e":"logdata = df_train[[\"price\", \"sqft_above\", \"sqft_basement\", \"sqft_living\", \"sqft_living15\", \"sqft_lot\", \"sqft_lot15\"]]\n\nfor i in range(7):\n    print(\"{:<10}\\t Skewness: {:.3f}\\t Kurtosis: {:.3f}\".format(logdata.columns[i], df_train[logdata.columns[i]].skew(), df_train[logdata.columns[i]].kurt()))\n    \n# log\ub97c \ucde8\ud574\uc8fc\uc5b4 \ubd84\ud3ec\ub97c \uc870\uc815\ud574\uc900\ub2e4. \n# \uc218\uce58\uc801\uc73c\ub85c \uc815\uaddc\ubd84\ud3ec\uc5d0 \uac00\uae4c\uc6cc\uc9c4 \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\ub2e4.","808a586e":"df_train[\"total_sqft\"] = df_train[\"sqft_above\"] + df_train[\"sqft_basement\"]\ndf_test[\"total_sqft\"] = df_test[\"sqft_above\"] + df_test[\"sqft_basement\"]","eeba7de5":"df_train[[\"total_sqft\", \"sqft_living\"]].head()\n\n# \uac74\ubb3c\uc758 \ucd1d \uba74\uc801\uc744 \ub9cc\ub4e4\uc5b4\uc11c \uac70\uc8fc\uacf5\uac04 \uba74\uc801\uacfc \ube44\uad50\ud574\ubcf4\uba74 \uac12\uc774 \uac19\ub2e4. \n# \uc774\ub294 sqft_living \ubcc0\uc218\uac00 \uac74\ubb3c\uc758 \uc5f0\uba74\uc801\uc744 \uc758\ubbf8\ud568\uc744 \uc54c \uc218 \uc788\ub2e4.","d81dbecd":"df_train.drop([\"total_sqft\"], inplace = True, axis = 1)\ndf_test.drop([\"total_sqft\"], inplace = True, axis = 1)","9e7d9cbd":"df_train[\"Vol_ratio\"] = (df_train[\"sqft_living\"] \/ df_train[\"sqft_lot\"]) * 100\ndf_test[\"Vol_ratio\"] = (df_test[\"sqft_living\"] \/ df_test[\"sqft_lot\"]) * 100\n\n# \uc6a9\uc801\ub960 = \uac74\ubb3c\uc5f0\uba74\uc801 \/ \ud1a0\uc9c0\uba74\uc801 * 100\n# \uac74\ud3d0\uc728\uc744 \uc0ac\uc6a9\ud588\uc744 \ub54c \uc131\ub2a5\uc774 \uc88b\uc9c0\uc54a\uc544 \uc81c\uac70","3a3b675d":"for data in [df_train, df_test]:\n\n    data['above_per_living'] = data['sqft_above']\/data['sqft_living']","57841449":"zipcode_data = df_train.groupby('zipcode').aggregate(np.mean)\n\nzipcode_ranks = {}\nrank = 1\nfor idx, row in zipcode_data.sort_values(by='price').iterrows():\n    zipcode_ranks[idx] = rank\n    rank += 1\n    \n# zipcode\ubcc4\ub85c price\uc758 \ud3c9\uade0\uc744 \ub0b4\uc5b4 rank\ub97c \ub9e4\uaca8\uc900\ub2e4 (\uc9d1\uac12\uc774 \ub0ae\uc73c\uba74 1 \uc62c\ub77c\uac08\uc218\ub85d +)","6681e850":"for data in [df_train, df_test]:\n    zipcode_feature = []\n    for idx, row in data.iterrows():\n        zipcode_feature.append(zipcode_ranks[row.zipcode])\n    data['zipcode_ranks'] = zipcode_feature","5df24ba6":"zipcode_data = df_train.groupby('zipcode').aggregate(np.var)\n\nzipcode_ranks_var = {}\nrank = 1\nfor idx, row in zipcode_data.sort_values(by='price', ascending=False).iterrows():\n    zipcode_ranks_var[idx] = rank\n    rank +=1","dbc65421":"for data in [df_train, df_test]:\n    zipcode_feature = []\n    for idx, row in data.iterrows():\n        zipcode_feature.append(zipcode_ranks_var[row.zipcode])\n    data['zipcode_ranks_var'] = zipcode_feature","bf90799e":"month = df_train.groupby('date_month').aggregate(np.mean)\n\nmonth_ranks = {}\nrank = 1\nfor idx, row in month.sort_values(by='price').iterrows():\n    month_ranks[idx] = rank\n    rank += 1","dcf73f82":"for data in [df_train, df_test]:\n    month_feature = []\n    for idx, row in data.iterrows():\n        month_feature.append(month_ranks[row.date_month])\n    data['month_rank'] = month_feature","704b4996":"from haversine import haversine\nbridge_wh = (47.641076, -122.259196)\nfor data in [df_train, df_test]:\n    house_wh = data.loc[:, ['lat','long']]\n    house_wh = list(house_wh.itertuples(index=False, name=None))\n    \n    dist = []\n    for house in house_wh:\n        dist.append(np.log(1\/haversine(house, bridge_wh)))\n    data['dist_bridge'] = dist","178ca31f":"from sklearn.decomposition import PCA\nfrom sklearn.cluster import KMeans","21eeaa5b":"for data in [df_train, df_test]:\n    coord = data[['lat','long']]\n    pca_coord = PCA(n_components=2).fit(coord).transform(coord)\n    data['pca1'] = pca_coord[:, 0]\n    data['pca2'] = pca_coord[:, 1]\n    \n# \uc704\uacbd\ub3c4\ub97c \uae30\uc900\uc73c\ub85c \uc0ac\uc6a9\ud558\uc5ec pca\ub97c \uc9c4\ud589\ud558\uc5ec \uc0c8\ub85c\uc6b4 \ubcc0\uc218\ub97c \ub9cc\ub4e4\uc5b4\uc900\ub2e4. ","bb777b95":"for data in [df_train, df_test]:\n    \n    data['term'] = -(data.date_year - data.yr_built)","67290e50":"df_train.columns","964d374d":"df_train.shape","e8966028":"df_train.drop([\"date\", \"date_month\"], inplace = True, axis = 1)\ndf_test.drop([\"date\", \"date_month\"], inplace = True, axis = 1)","6c746b5d":"df_train.head()","922a581f":"import eli5\nfrom eli5.sklearn import PermutationImportance\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split, GridSearchCV\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor\nimport xgboost as xgb\nimport lightgbm as lgb","404ce256":"y_train = df_train.price\nx_train = df_train.drop(['id', 'price'], axis=1)\nx_test = df_test.drop(['id'], axis=1)","528a31d4":"X_tr, X_vld, y_tr, y_vld = train_test_split(x_train, y_train, test_size = 0.3, random_state = 2019)\n\nmodel = xgb.XGBRegressor()\nmodel.fit(X_tr, y_tr)\ny_val = model.predict(X_vld)","9626b488":"perm = PermutationImportance(model, random_state = 42).fit(X_vld, y_vld)\neli5.show_weights(perm, top = 33, feature_names = X_vld.columns.tolist())","4be74b92":"dt = DecisionTreeRegressor(random_state=10)\ndt_cv_score = cross_val_score(dt, x_train, y_train, cv=5)\nprint(\"score with cv = {} \\n mean cv score = {:.5f} \\n std = {:.5f}\".format(dt_cv_score, dt_cv_score.mean(), dt_cv_score.std()))","569edce0":"xgb_params = {\n    'eta': 0.01,\n    'max_depth': 6,\n    'subsample': 0.8,\n    'colsample_bytree': 0.8,\n    'objective': 'reg:linear',\n    'eval_metric': 'rmse',\n    'silent': 1\n}","08512ff1":"y_train = df_train.price\n\ndtrain = xgb.DMatrix(x_train, y_train)\ndtest = xgb.DMatrix(x_test)\n\ncv_output = xgb.cv(xgb_params, dtrain, num_boost_round=5000, early_stopping_rounds=50, verbose_eval=500, show_stdv=False)\n\nrounds=len(cv_output)\n\nxgb1 = xgb.train(xgb_params, dtrain, num_boost_round=rounds)\npreds = xgb1.predict(dtest)\n\nxgb1_sub = df_test[['id']]\nxgb1_sub['price'] = preds","1b61d896":"y_train = np.expm1(df_train.price)\n\ndtrain = xgb.DMatrix(x_train, y_train)\ndtest = xgb.DMatrix(x_test)\n\ncv_output = xgb.cv(xgb_params, dtrain, num_boost_round=20000, early_stopping_rounds=50, verbose_eval=500, show_stdv=False)\nrounds=len(cv_output)\n\nxgb2 = xgb.train(xgb_params, dtrain, num_boost_round=rounds)\npreds = xgb2.predict(dtest)\n\nxgb2_sub = df_test[['id']]\nxgb2_sub['price'] = preds","9dfef3b9":"xgb1_pred = xgb1.predict(dtrain)\nxgb2_pred = xgb2.predict(dtrain)\nmse = {}\nii = np.arange(0, 1, 0.01)\nfor i, ii in enumerate(ii):\n    xgb_train_pred = ii*np.expm1(xgb1_pred) + (1-ii)*xgb2_pred\n    mse[i] = np.sqrt(mean_squared_error(y_train, xgb_train_pred))\n\nxgb_min = min(mse.values())\n\nfor i in range(100):\n    if mse[i] == xgb_min:\n        print(i)","b63ec606":"xgb_train_pred = 0*np.expm1(xgb1_pred) + 1*xgb2_pred","7462b7b9":"xgb_sub = pd.merge(xgb1_sub, xgb2_sub, how='left', on='id')\nxgb_sub.columns = ['id','price1','price2']\nxgb_sub['price'] = (0*np.expm1(xgb_sub['price1']) + 1*xgb_sub['price2'])\nxgb_sub = xgb_sub[['id','price']]\nxgb_sub.to_csv('xgb_sub.csv', index=False)","dd0ca420":"param = {'num_leaves': 31,\n         'min_data_in_leaf': 30, \n         'objective':'regression',\n         'max_depth': -1,\n         'learning_rate': 0.015,\n         \"min_child_samples\": 20,\n         \"boosting\": \"gbdt\",\n         \"feature_fraction\": 0.9,\n         \"bagging_freq\": 1,\n         \"bagging_fraction\": 0.9 ,\n         \"bagging_seed\": 11,\n         \"metric\": 'rmse',\n         \"lambda_l1\": 0.1,\n         \"verbosity\": -1,\n         \"nthread\": 4,\n         \"random_state\": 4950\n}","005f394e":"y_train = df_train.price\n\nfolds = KFold(n_splits=5, shuffle=True, random_state=1)\npredictions = np.zeros(len(x_test))\n\nfor fold_, (trn_idx, val_idx) in enumerate(folds.split(df_train)):\n    trn_data = lgb.Dataset(x_train.iloc[trn_idx], label=y_train.iloc[trn_idx])\n    val_data = lgb.Dataset(x_train.iloc[val_idx], label=y_train.iloc[val_idx])\n    \n    num_round = 10000\n    lgb1 = lgb.train(param, trn_data, num_round, valid_sets = [trn_data, val_data], verbose_eval=500, early_stopping_rounds = 100)\n    predictions += lgb1.predict(x_test, num_iteration=lgb1.best_iteration) \/ folds.n_splits","5c64853d":"lgb1_sub = pd.DataFrame()\nlgb1_sub['id'] = df_test.id\nlgb1_sub['price'] = predictions","a7d92e91":"y_train = np.expm1(df_train.price)\n\nfolds = KFold(n_splits=5, shuffle=True, random_state=1)\npredictions = np.zeros(len(x_test))\n\nfor fold_, (trn_idx, val_idx) in enumerate(folds.split(df_train)):\n    trn_data = lgb.Dataset(x_train.iloc[trn_idx], label=y_train.iloc[trn_idx])\n    val_data = lgb.Dataset(x_train.iloc[val_idx], label=y_train.iloc[val_idx])\n    \n    num_round = 10000\n    lgb2 = lgb.train(param, trn_data, num_round, valid_sets = [trn_data, val_data], verbose_eval=500, early_stopping_rounds = 100)\n    predictions += lgb2.predict(x_test, num_iteration=lgb2.best_iteration) \/ folds.n_splits","c8cb2243":"lgb2_sub = pd.DataFrame()\nlgb2_sub['id'] = df_test.id\nlgb2_sub['price'] = predictions","9bcc33cf":"lgb1_pred = lgb1.predict(x_train)\nlgb2_pred = lgb2.predict(x_train)\nmse = {}\nii = np.arange(0, 1, 0.01)\nfor i, ii in enumerate(ii):\n    train_pred = ii*np.expm1(lgb1_pred) + (1-ii)*lgb2_pred\n    mse[i] = np.sqrt(mean_squared_error(y_train, train_pred))\n\nlgb_min = min(mse.values())\n\nfor i in range(100):\n    if mse[i] == lgb_min:\n        print(i)","782f3c07":"lgb_train_pred = 0.59*np.expm1(lgb1_pred)+0.41*lgb2_pred","082a3db8":"lgb_sub = pd.merge(lgb1_sub, lgb2_sub, how='left', on='id')\nlgb_sub.columns = ['id','price1','price2']\nlgb_sub['price'] = (0.59*np.expm1(lgb_sub['price1']) + 0.41*lgb_sub['price2'])\nlgb_sub = lgb_sub[['id','price']]","6faba9e3":"forest_regr = RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,\n           max_features=28, max_leaf_nodes=None,\n           min_impurity_decrease=0.0, min_impurity_split=None,\n           min_samples_leaf=1, min_samples_split=2,\n           min_weight_fraction_leaf=0.0, n_estimators=90, n_jobs=1,\n           oob_score=False, random_state=None, verbose=0, warm_start=False)\n\nrf = forest_regr.fit(x_train, y_train)\npredictions = rf.predict(x_test)","83029f8e":"rf_sub = pd.DataFrame()\nrf_sub['id'] = df_test.id\nrf_sub['price'] = predictions","d153083f":"gdb = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05,\n                                   max_depth=4, max_features='sqrt',\n                                   min_samples_leaf=15, min_samples_split=10, \n                                   loss='huber', random_state =5)\n\ngdb.fit(x_train, y_train)\npredictions = gdb.predict(x_test)","d1f4cd00":"gdb_sub = pd.DataFrame()\ngdb_sub['id'] = df_test.id\ngdb_sub['price'] = predictions","775997fd":"gdb_train_pred = gdb.predict(x_train)\nrf_train_pred = rf.predict(x_train)\nmse = {}\n\nii = np.arange(0, 0.1, 0.01)\n\nfor i, ii in enumerate(ii):\n    submse={}\n    train_pred = 0.8*xgb_train_pred + (1-ii)*lgb_train_pred + 0.1*gdb_train_pred + ii*rf_train_pred\n    mse[i] = np.sqrt(mean_squared_error(y_train, train_pred))","49b1605b":"train_min = min(mse.values())\n\nfor i in range(10):\n    if mse[i] == train_min:\n        print(i)","c7fa5362":"ensemble_sub = pd.DataFrame()\n\nensemble_sub['id'] = df_test.id\nensemble_sub['price'] = xgb_sub['price']*0.8 + lgb_sub['price']*0.05 + gdb_sub['price']*0.1 + rf_sub['price']*0.05  \nensemble_sub.to_csv('sub.csv', index=False)","9d7fb4d8":"# GB","8bd85ab5":"## \ubc94\uc8fc\ud615 \ubcc0\uc218 (numerical category feature)","7c33b1a4":"# FE","a482fd38":"# EDA","cc005fb2":"## \uc774\uc0c1\uce58 \ucc98\ub9ac","56dabb9d":"## ENSEMBLE","0e8bd0a8":"### month\uc5d0 \ub530\ub77c \uac00\uaca9\uc774 \ud328\ud134\uc774 \uc788\ub294\uac83\uc73c\ub85c \ubcf4\uc5ec\uc9d0\n### 4\uc6d4\uc5d0 price \ucd5c\ub300, \uadf8 \uc774\ud6c4 \ud558\ud5a5\uc138","934c2bd9":"## XGB","140ab3ba":"## Skew \/ Kurt \ud0d0\uc0c9 \ubc0f Log \ubcc0\ud658","7847658d":"# FEATURE ENGINEERING","8d9f90a5":"## 1. \ub370\uc774\ud130 \uc0b4\ud3b4\ubcf4\uae30\npandas\uc758 read_csv \ud568\uc218\ub97c \uc0ac\uc6a9\ud574 \ub370\uc774\ud130\ub97c \uc77d\uc5b4\uc624\uace0, \uac01 \ubcc0\uc218\ub4e4\uc774 \ub098\ud0c0\ub0b4\ub294 \uc758\ubbf8\ub97c \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\nID : \uc9d1\uc744 \uad6c\ubd84\ud558\ub294 \ubc88\ud638\n\ndate : \uc9d1\uc744 \uad6c\ub9e4\ud55c \ub0a0\uc9dc\n\nprice : \ud0c0\uac9f \ubcc0\uc218\uc778 \uc9d1\uc758 \uac00\uaca9\n\nbedrooms : \uce68\uc2e4\uc758 \uc218\n\nbathrooms : \uce68\uc2e4\ub2f9 \ud654\uc7a5\uc2e4 \uac1c\uc218\n\nsqft_living : \uc8fc\uac70 \uacf5\uac04\uc758 \ud3c9\ubc29 \ud53c\ud2b8\n\nsqft_lot : \ubd80\uc9c0\uc758 \ud3c9\ubc29 \ud53c\ud2b8\n\nfloors : \uc9d1\uc758 \uce35 \uc218\n\nwaterfront : \uc9d1\uc758 \uc804\ubc29\uc5d0 \uac15\uc774 \ud750\ub974\ub294\uc9c0 \uc720\ubb34 (a.k.a. \ub9ac\ubc84\ubdf0)\n\nview : \uc9d1\uc774 \uc5bc\ub9c8\ub098 \uc88b\uc544 \ubcf4\uc774\ub294\uc9c0\uc758 \uc815\ub3c4\n\ncondition : \uc9d1\uc758 \uc804\ubc18\uc801\uc778 \uc0c1\ud0dc\n\ngrade : King County grading \uc2dc\uc2a4\ud15c \uae30\uc900\uc73c\ub85c \ub9e4\uae34 \uc9d1\uc758 \ub4f1\uae09\n\nsqft_above : \uc9c0\ud558\uc2e4\uc744 \uc81c\uc678\ud55c \ud3c9\ubc29 \ud53c\ud2b8\n\nsqft_basement : \uc9c0\ud558\uc2e4\uc758 \ud3c9\ubc29 \ud53c\ud2b8\n\nyr_built : \uc9d1\uc744 \uc9c0\uc740 \ub144\ub3c4\n\nyr_renovated : \uc9d1\uc744 \uc7ac\uac74\ucd95\ud55c \ub144\ub3c4\n\nzipcode : \uc6b0\ud3b8\ubc88\ud638\n\nlat : \uc704\ub3c4\n\nlong : \uacbd\ub3c4\n\nsqft_living15 : 2015\ub144 \uae30\uc900 \uc8fc\uac70 \uacf5\uac04\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uc9d1\uc744 \uc7ac\uac74\ucd95\ud588\ub2e4\uba74, \ubcc0\ud654\uac00 \uc788\uc744 \uc218 \uc788\uc74c)\n\nsqft_lot15 : 2015\ub144 \uae30\uc900 \ubd80\uc9c0\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uc9d1\uc744 \uc7ac\uac74\ucd95\ud588\ub2e4\uba74, \ubcc0\ud654\uac00 \uc788\uc744 \uc218 \uc788\uc74c)","67c2e4df":"## \ubbf8\ub2c8\ud504\ub85c\uc81d\ud2b8 \uacb0\ub860\n\n### \ubc30\uc6b4\uc810\n1. EDA\ub97c \ud558\ub098\ud558\ub098 \ud574\ubcf4\uba70 \uc774\uc0c1\uce58\ub97c \uc81c\uac70\ud558\uace0 \ubd84\ud3ec\ub97c \ud655\uc778, \uc11c\uce6d\uc744 \ud1b5\ud574 \ub3c4\uba54\uc778 \uc9c0\uc2dd\uc744 \uc5bb\uc744 \uc218 \uc788\ub2e4\ub294 \uc810 \n2. \uc911\uc694\ubcc0\uc218\ub97c FE\uc5d0 \uc0ac\uc6a9\ud558\uc5ec \uc810\uc218 \ud5a5\uc0c1\n3. \uc131\ub2a5\uc774 \uc88b\uc740 \ubaa8\ub378\ub4e4\uc744 \ud65c\uc6a9\ud558\uc5ec \uc559\uc0c1\ube14\uc744 \ud588\uc744 \ub54c\uc758 \uacb0\uacfc (Log scaling\uc744 \ud588\uc744 \ub54c\uc640 \uc548\ud588\uc744 \ub54c)\n\n### \uc544\uc26c\uc6e0\ub358 \uc810\n1. \ub9c9\ud310\uc2a4\ud37c\ud2b8\n2. folium\ub4f1\uc744 \uc0ac\uc6a9\ud55c \uc9c0\ub3c4\uc2dc\uac01\ud654\n3. FE\ub97c \ud1b5\ud574 \uc911\uc694\ubcc0\uc218\ub4e4\uc744 \ub9ce\uc774 \ubc1c\uc804\uc2dc\ud0a4\uc9c0 \ubabb\ud55c \uc810","20f141ff":"## LGBM","546175cc":"## RF","43d795d0":"## \uc218\uce58\ud615 \ubcc0\uc218 \uc2dc\uac01\ud654","e71bb8a0":"# MODELING & SUBMISSION","4d400217":"# DATA CHECK"}}