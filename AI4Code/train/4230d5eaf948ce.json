{"cell_type":{"584fdb09":"code","3199ab40":"code","81802282":"code","13e713c9":"code","f95f6eac":"code","27387013":"code","629c5a7b":"code","20d32898":"code","4a6fdb37":"code","0070a392":"code","a76783db":"code","a813fe98":"code","deb30b4e":"code","3f3cd9cc":"code","585bc69e":"code","67df5ff0":"code","1b38c5db":"code","97233e7d":"code","2a44adcf":"code","d50420de":"code","8d326307":"code","43c6eb46":"code","89b9c7a9":"code","32bb50f3":"code","cc47f76a":"code","842e1ecf":"code","a451c410":"code","b3c30f49":"code","7f328182":"code","4b281aff":"code","5ea0b149":"code","cfe2c3f4":"code","17ab79b9":"code","6bf36028":"code","2a5e3c73":"markdown","fdbbb47a":"markdown","7729b7cc":"markdown","08f3ff52":"markdown","97edc8be":"markdown","9d2689f6":"markdown","a6028fcf":"markdown","e64ab2fd":"markdown","d72951dd":"markdown","dc3785de":"markdown","7390c6d8":"markdown","ba45b2de":"markdown","2ffede62":"markdown","8afaf3ce":"markdown","14a87564":"markdown","df2f1c5b":"markdown"},"source":{"584fdb09":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3199ab40":"from glob import glob\n\nfiles = glob(\"..\/input\/a-large-scale-fish-dataset\/Fish_Dataset\/*\/*\/*\/*.*\")","81802282":"data = list()\n\nfor i in files:\n    temp = i.split(\"\/\")\n    data.append([temp[-3], i])\ndata[:10]","13e713c9":"files = glob(\"..\/input\/a-large-scale-fish-dataset\/NA_Fish_Dataset\/*\/*.*\")\n\nfor i in files:\n    temp = i.split(\"\/\")\n    data.append([temp[-2], i])\n\ndata[-10:]","f95f6eac":"data = pd.DataFrame(data, columns = [\"Label\", \"Path\"])\ndata.head(10)","27387013":"data[\"Label\"].value_counts()","629c5a7b":"for row_index in range(len(data)):\n    if(data.iloc[row_index][\"Label\"] == \"Gilt-Head Bream\"):\n        data.iloc[row_index][\"Label\"] =\"Gilt Head Bream\"\n        \n    if(data.iloc[row_index][\"Label\"] == \"Hourse Mackerel\"):\n        data.iloc[row_index][\"Label\"] =\"Horse Mackerel\"","20d32898":"data.Label.value_counts()","4a6fdb37":"data.isnull().sum()","0070a392":"from sklearn.model_selection import train_test_split","a76783db":"data_train, data_test = train_test_split(data, test_size = 0.25, random_state = 23)","a813fe98":"data_train.info()","deb30b4e":"data_test.info()","3f3cd9cc":"import matplotlib.pyplot as plt","585bc69e":"x_ticks = data_train.Label.value_counts().index\n\nheights = list()\nfor i in range(len(data_train.Label.value_counts())):\n    heights.append(data_train.Label.value_counts()[i])\nheights\n\nplt.bar(range(len(data_train.Label.value_counts())), heights)\nplt.show()","67df5ff0":"x_ticks = data_test.Label.value_counts().index\n\nheights = list()\nfor i in range(len(data_test.Label.value_counts())):\n    heights.append(data_test.Label.value_counts()[i])\nheights\n\nplt.bar(range(len(data_test.Label.value_counts())), heights)\nplt.show()","1b38c5db":"from tensorflow.keras.preprocessing.image import ImageDataGenerator","97233e7d":"train_generator = ImageDataGenerator(\n    validation_split = 0.2\n)\n\ntest_generator = ImageDataGenerator()","2a44adcf":"train_images = train_generator.flow_from_dataframe(\n    dataframe = data_train,\n    class_mode = \"categorical\",\n    x_col = \"Path\",\n    y_col = \"Label\",\n    target_size = (256, 256),\n    color_mode = \"rgb\",\n    batch_size = 100,\n    shuffle = True,\n    seed = 98,\n    subset = \"training\"\n)","d50420de":"val_images = train_generator.flow_from_dataframe(\n    dataframe = data_train,\n    class_mode = \"categorical\",\n    x_col = \"Path\",\n    y_col = \"Label\",\n    target_size = (256, 256),\n    color_mode = \"rgb\",\n    batch_size = 100,\n    shuffle = True,\n    seed = 98,\n    subset = \"validation\"\n)","8d326307":"test_images = train_generator.flow_from_dataframe(\n    dataframe = data_test,\n    class_mode = \"categorical\",\n    x_col = \"Path\",\n    y_col = \"Label\",\n    target_size = (256, 256),\n    color_mode = \"rgb\",\n    batch_size = 100\n)","43c6eb46":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Dropout, Dense, Flatten\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint","89b9c7a9":"model = Sequential()\nmodel.add(Conv2D(64, (3,3), activation = \"relu\", input_shape = (256, 256, 3)))\nmodel.add(MaxPooling2D((2, 2)))\n\nmodel.add(Conv2D(128, (3,3), activation = \"relu\"))\nmodel.add(MaxPooling2D((2, 2)))\n\nmodel.add(Conv2D(256, (3,3), activation = \"relu\"))\nmodel.add(MaxPooling2D((2, 2)))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(128, activation = \"relu\"))\nmodel.add(Dropout(0.3))\nmodel.add(Dense(128, activation = \"relu\"))\nmodel.add(Dropout(0.3))\nmodel.add(Dense(9, activation = \"softmax\"))","32bb50f3":"model.summary()","cc47f76a":"model.compile(optimizer = \"adam\", loss = \"categorical_crossentropy\", metrics = [\"accuracy\"])","842e1ecf":"checkpoint_cb = ModelCheckpoint(\"Best Model.h5\", \n                                monitor = \"val_accuracy\",\n                                save_best_only = True)\nearly_stopping_cb = EarlyStopping(patience = 10, \n                                  restore_best_weights = True, \n                                  monitor = \"val_loss\", \n                                  mode = \"min\")","a451c410":"runs = 50","b3c30f49":"history = model.fit(\n    train_images,\n    steps_per_epoch = 50,\n    epochs = runs,\n    validation_data = val_images,\n    validation_steps = 25,\n    validation_freq = list(range(runs + 1)),\n    callbacks = [checkpoint_cb, early_stopping_cb]\n)","7f328182":"plt.plot(history.history[\"accuracy\"], label = \"Training Accuracy\")\nplt.plot(history.history[\"val_accuracy\"], label = \"Validation Accuracy\")\n\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Accuracy\")\nplt.legend()\nplt.show()","4b281aff":"plt.plot(history.history[\"loss\"], label = \"Training Loss\")\nplt.plot(history.history[\"val_loss\"], label = \"Validation Loss\")\n\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.show()","5ea0b149":"pred = model.predict(test_images)\npred = np.argmax(pred, axis=1)\n\nprint(pred)","cfe2c3f4":"labels = train_images.class_indices\nlabels = dict((value,key) for key, value in labels.items())\n\nprint(labels)","17ab79b9":"from sklearn.metrics import classification_report\ny_pred = [labels[k] for k in pred]\nprint(classification_report(data_test.Label, y_pred))","6bf36028":"result = model.evaluate(test_images)\nprint(f\"Loss in testing data: {result[0]}\")\nprint(f\"Accuracy in testing data: {result[1] * 100}%\")","2a5e3c73":"This is the final model.\n\n# Future Scope\nThis model once generalised to a larger dataset can be used to identify and classify marine life in an area without need of human intervention. This would prove useful in conservation efforts and in choosing best spots for commercial fishing.","fdbbb47a":"Values are relatively well distributed though distribution is a bit less uniform in the testing data but that is to be expected in real life as well so we will move on.","7729b7cc":"# Check For Nulls","08f3ff52":"# Create Model","97edc8be":"We will need to make a dictionary mapping label values to the label.","9d2689f6":"Here we are using the large scale fish dataset to create a CNN classifier that can predict the species of a fish given its image.\n\nWe are provided with images of Black Sea Sprat, Gilt Head Bream, Hore Mackrel, Red Mullet, Red Sea Bream, Sea Bass, Shrimp, Striped Red Mullet, and Trout.\n\nWe are given both processed images (rotated, zoomed etc.), ground truth images (silhouettes with only necessary information) and normal unprocessed images. Hence we may use the images as given.\n\nModel will be made from scratch with no transfer learning.\n\n# Import Required Libraries ","a6028fcf":"# Visualise Distribution \nWe will draw barplots for both training and testing splits to ensure diverse splits. ","e64ab2fd":"Rotation, zooming etc. is all done in the provided dataset itself, so we need only add validation size.","d72951dd":"Trout just doesn't have equal values. Gilt Head Bream and Horse Mackrel are made into different entries due to typos, that will be cleaned.\n# Data Cleaning","dc3785de":"# Get Metrics","7390c6d8":"# Train The Model","ba45b2de":"# Load Images","2ffede62":"# Load DataFrame With Classification And Full Path\nObservation revealed that normal fish dataset contains rotated, zoomed, sheared etc. images of the fish. Ground Truth contains silluoettes and NA_Fish_Dataset is unaltered images of fishes. Due to them all being sufficiently different, we will use them all for our model.","8afaf3ce":"No null values.\n# Train Test Split","14a87564":"# Plot The Training Of The Model","df2f1c5b":"We will start with creating a dataframe containing the label and the corresponding filepath to its image."}}