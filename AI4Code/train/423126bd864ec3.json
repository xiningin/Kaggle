{"cell_type":{"7f1af12f":"code","87683929":"code","fdbbf0b0":"code","bfcd1487":"code","356a7fb5":"code","531b3dc2":"markdown","bb3e6a64":"markdown","67549ead":"markdown","d136f2f0":"markdown"},"source":{"7f1af12f":"import tensorflow as tf\nimport numpy as np\n\ndef mean_score(y_true, y_pred):\n    \"\"\"\n    Calculate mean score for batch images\n\n    :param y_true: 4-D Tensor of ground truth, such as [NHWC]. Should have numeric or boolean type.\n    :param y_pred: 4-D Tensor of prediction, such as [NHWC]. Should have numeric or boolean type.\n    :return: 0-D Tensor of score\n    \"\"\"\n    y_true_ = tf.cast(tf.round(y_true), tf.bool)\n    y_pred_ = tf.cast(tf.round(y_pred), tf.bool)\n\n    # Flatten\n    y_true_ = tf.reshape(y_true_, shape=[tf.shape(y_true_)[0], -1])\n    y_pred_ = tf.reshape(y_pred_, shape=[tf.shape(y_pred_)[0], -1])\n    threasholds_iou = tf.constant(np.arange(0.5, 1.0, 0.05), dtype=tf.float32)\n\n    def _mean_score(y):\n        \"\"\"Calculate score per image\"\"\"\n        y0, y1 = y[0], y[1]\n        total_cm = tf.confusion_matrix(y0, y1, num_classes=2)\n        total_cm = tf.Print(total_cm, [total_cm])\n        sum_over_row = tf.to_float(tf.reduce_sum(total_cm, 0))\n        sum_over_col = tf.to_float(tf.reduce_sum(total_cm, 1))\n        cm_diag = tf.to_float(tf.diag_part(total_cm))\n        denominator = sum_over_row + sum_over_col - cm_diag\n        denominator = tf.where(tf.greater(denominator, 0), denominator, tf.ones_like(denominator))\n        # iou[0]: IoU of Background\n        # iou[1]: IoU of Foreground\n        iou = tf.div(cm_diag, denominator)\n        iou_fg = iou[1]\n        greater = tf.greater(iou_fg, threasholds_iou)\n        score_per_image = tf.reduce_mean(tf.cast(greater, tf.float32))\n        # Both predicted object and ground truth are empty, score is 1.\n        score_per_image = tf.where(\n            tf.logical_and(\n                tf.equal(tf.reduce_any(y0), False), tf.equal(tf.reduce_any(y1), False)),\n            1., score_per_image)\n        return score_per_image\n\n    elems = (y_true_, y_pred_)\n    scores_per_image = tf.map_fn(_mean_score, elems, dtype=tf.float32)\n    return tf.reduce_mean(scores_per_image)\n","87683929":"y_true = tf.placeholder(dtype=tf.int32, shape=[2, 2])\ny_pred = tf.placeholder(dtype=tf.int32, shape=[2, 2])\n_y_true = tf.reshape(y_true, [1, 2, 2, 1])\n_y_pred = tf.reshape(y_pred, [1, 2, 2, 1])\n\nscore = mean_score(_y_true, _y_pred)\n\nsess = tf.Session()","fdbbf0b0":"y_true_val = np.array([[1, 1],\n                       [0, 0]])\ny_pred_val = np.array([[1, 1],\n                       [1, 0]])\n\nprint(\"Score is {}\".format(sess.run(score, feed_dict={y_true: y_true_val, y_pred: y_pred_val})))","bfcd1487":"y_true_val = np.array([[1, 1],\n                       [0, 0]])\ny_pred_val = np.array([[0, 0],\n                       [0, 0]])\n\nprint(\"Score is {}\".format(sess.run(score, feed_dict={y_true: y_true_val, y_pred: y_pred_val})))","356a7fb5":"y_true_val = np.array([[0, 0],\n                       [0, 0]])\ny_pred_val = np.array([[0, 0],\n                       [0, 0]])\n\nprint(\"Score is {}\".format(sess.run(score, feed_dict={y_true: y_true_val, y_pred: y_pred_val})))","531b3dc2":"### Predicted object and ground truth are empy\nIn this case, score is 1.0","bb3e6a64":"## Smoke test\n\n### Predicted object and ground truth are no-empy\nIn the case of IoU = 0.666, score is mean([1, 1, 1, 1, 0, 0, 0, 0, 0, 0]) = 0.4","67549ead":"This is a metrics function for tensorflow (or Keras).","d136f2f0":"### Predicted object is empty, but ground truth is no-empy or an opposite case\nIn the case of IoU = 0, score is mean([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) = 0.0"}}