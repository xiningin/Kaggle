{"cell_type":{"889b99da":"code","de8aa9ed":"code","059e7b14":"code","cd94446f":"code","f4eabba9":"code","379a096a":"code","c3ce1c32":"markdown"},"source":{"889b99da":"import torch\nimport pandas as pd\nimport numpy as np\nfrom sklearn import preprocessing\nimport torch.nn as nn\nfrom torch.utils.data import DataLoader, TensorDataset\n\ndevice = 'cuda' if torch.cuda.is_available() else 'cpu'\nif device == 'cuda':\n  torch.cuda.manual_seed_all(111)\n\ntrain = pd.read_csv('..\/input\/ai-tomato\/training_set.csv', header=None, skiprows=1)\n\ntrain","de8aa9ed":"train[0] = train[0] % 10000 \/100\ntrain.drop(4, axis=1,inplace=True) #rainfall \uc0ad\uc81c\n\nxtrain = train.loc[:,[i for i in train.keys()[:-1]]]\nytrain = train[train.keys()[-1]]\n\nxtrain = np.array(xtrain)\nxtrain = torch.FloatTensor(xtrain).to(device)\n\nytrain = np.array(ytrain)\nytrain = torch.FloatTensor(ytrain).view(-1,1).to(device)\n\ntrain","059e7b14":"dataset = TensorDataset(xtrain, ytrain)\ndataloader = DataLoader(dataset, batch_size=8, shuffle=True, drop_last=True)\n\ntorch.manual_seed(111)\n\nlin1 = nn.Linear(6,32)\nlin2 = nn.Linear(32,1)\n\nnn.init.kaiming_uniform_(lin1.weight)\nnn.init.kaiming_uniform_(lin2.weight)\n\nrelu = nn.ReLU()\n\nmodel = nn.Sequential(lin1,relu,\n                      lin2).to(device)\n\noptimizer = torch.optim.Adam(model.parameters(), lr=1e-2)\nloss = nn.MSELoss().to(device)\n\nnb_epochs = 500\nfor epoch in range(nb_epochs + 1):\n  for x,y in dataloader:\n    x = x.to(device)\n    y=y.to(device)\n\n    H = model(x)\n    cost = loss(H, y)\n\n    optimizer.zero_grad()\n    cost.backward()\n    optimizer.step()\n\n  if epoch%50 == 0:\n      print('Epoch {}  Cost {}'.format(epoch, cost.item()))\n\nprint('Learning Finished')","cd94446f":"test = pd.read_csv('..\/input\/ai-tomato\/test_set.csv')\ntest","f4eabba9":"test=test.dropna(axis=1)","379a096a":"test['date'] = test['date'] % 10000 \/100\ntest.drop('rain fall', axis=1,inplace=True) #rainfall \uc0ad\uc81c\n\nxtest = test.loc[:,[i for i in test.keys()[:]]]\nxtest = np.array(xtest)\nxtest = torch.from_numpy(xtest).float().to(device)\n\nH = model(xtest)\n\nH = H.cpu().detach().numpy().reshape(-1,1)\n\nsubmit = pd.read_csv('..\/input\/ai-tomato\/submit_sample.csv')\n\nfor i in range(len(submit)):\n  submit['expected'][i] = H[i]\n\nsubmit.to_csv('sub.csv', index = None, header=True)\n\nsubmit","c3ce1c32":"1\ucc28 \ubc29\uc5b4\uc640\uc758 \ucc28\uc774\uc810\n\n* \uac12\uc774 0\uc778 \ub370\uc774\ud130\uac00 \ub9ce\uc740 \uc5f4(rain\uc5f4) \uc0ad\uc81c\n* hidden layer \ud655\uc7a5\n* \ucd08\uae30\ud654 \ud568\uc218 \ubcc0\uacbd(xavier -> he)\n* \ubc30\uce58 \uc0ac\uc774\uc988 \ubcc0\uacbd"}}