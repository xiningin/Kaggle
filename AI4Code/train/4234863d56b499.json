{"cell_type":{"2b8b66b9":"code","44c4c61a":"code","ea70ceaf":"code","ca08b407":"code","00cde9e1":"code","fd097eeb":"code","eb0c4555":"code","cc755b01":"code","c6815421":"code","05950483":"code","ab487710":"code","0a8bd21a":"code","3db0117a":"code","6e01480f":"code","7b587210":"code","81981db6":"code","dd7f5e95":"code","252c83cf":"code","1b997fbb":"code","8014dcde":"code","b87439b9":"code","b2bcc199":"code","46423747":"code","cb070593":"code","ba2171c0":"code","1ac5685b":"code","c7faa22e":"code","407a4dd5":"code","7346f89f":"code","a809cf9e":"code","8d183d27":"code","e7e4c56b":"code","22def3ed":"code","5f5c7499":"code","d18bd427":"code","b2fbb6fc":"code","3c306897":"code","2fadc81c":"code","e957159b":"code","68172092":"code","d29cdfd9":"code","ac753ae6":"code","c7adf657":"markdown","33637d7e":"markdown","f7656cac":"markdown","f6786e79":"markdown","881be979":"markdown","b02a7e06":"markdown","c4cc4729":"markdown","e40ddb87":"markdown","6ff6f602":"markdown","d8f5483a":"markdown","5bfb825c":"markdown","db60a675":"markdown","01750949":"markdown","e28f65b8":"markdown","ef347288":"markdown","851b0358":"markdown","e216f368":"markdown","e07327e8":"markdown"},"source":{"2b8b66b9":"import math\nimport numpy as np \nimport pandas as pd\nimport datetime as dt\nfrom datetime import datetime, timedelta\nimport itertools\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('bmh')    # print(plt.style.available)\n\nfrom plotly.offline import plot, iplot, init_notebook_mode\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.express as px","44c4c61a":"from sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.svm import SVR\nfrom sklearn.metrics import mean_squared_error","ea70ceaf":"# confirmed\ncdf = pd.read_csv('..\/input\/covid19-october2020\/time_series_covid19_confirmed_global.csv')\n# deaths\nddf = pd.read_csv('..\/input\/covid19-october2020\/time_series_covid19_deaths_global.csv')\n# recovered\nrdf = pd.read_csv('..\/input\/covid19-october2020\/time_series_covid19_recovered_global.csv')\n\ncdf.head(15)\n#ddf.head()\n#rdf.head()","ca08b407":"# cleaning: ignore regions and coordinates\n\nprev_datasets = [cdf, ddf, rdf]\nnew_datasets = []\nfor prev in prev_datasets:\n    new = prev.drop(['Lat','Long'], axis=1).groupby('Country\/Region').agg('sum').reset_index()\n    new.rename(columns={'Country\/Region':'Country'}, inplace=True)\n    new_datasets.append(new)    \ncdf_countries = new_datasets[0]\nddf_countries = new_datasets[1]\nrdf_countries = new_datasets[2]\n\ncdf_countries","00cde9e1":"# Fully grouped common dataset: first by dates, then by countries\n# len = (number of days) * (number of countries) \n\nn = len(cdf_countries.drop('Country', axis=1).columns)  # number of days considered, 282 originally\nc = len(cdf_countries)  # number of countries considered, 190 originally\n\ndates = [i for i in cdf_countries.columns[1:]]\ncountries = [i for i in cdf_countries['Country']]\nconfirmed = cdf_countries.drop('Country', axis=1).T.values.flatten()  # flatten 2d array\ndeaths = ddf_countries.drop('Country', axis=1).T.values.flatten()\nrecovered = rdf_countries.drop('Country', axis=1).T.values.flatten()\nactive = confirmed - deaths - recovered\n\nd={'Date': np.repeat(dates, c), 'Country': countries*n, 'Confirmed': confirmed, 'Deaths':deaths,\n   'Recovered':recovered, 'Active':active}\ngrouped1_df = pd.DataFrame(d)\ngrouped1_df['Date'] = pd.to_datetime(grouped1_df['Date'], format='%m\/%d\/%y')\n#grouped1_df.head(20)\ngrouped1_df.head(10)","fd097eeb":"# grouped1_df -> every 5th date\n# c=number of countries, n is number of dates. Originally c=190, n=282\n\nchunks = [range(i,i+c) for i in range(n*c) if i%c == 0]    \nevery5thchunk = chunks[::5]\nmerged = list(itertools.chain.from_iterable(every5thchunk))\ngrouped1_df_every5thdate = grouped1_df.iloc[merged]\ngrouped1_df_every5thdate","eb0c4555":"# Fully grouped common dataset: first by countries, then by dates\n# len = (number of days) * (number of countries) \n\nn = len(cdf_countries.drop('Country', axis=1).columns)  # number of days considered, 282 originally\nc = len(cdf_countries)  # number of countries considered, 190 originally\n\ndates = [i for i in cdf_countries.columns[1:]]\ncountries = [i for i in cdf_countries['Country']]\nconfirmed = cdf_countries.drop('Country', axis=1).values.flatten()  # flatten 2d array\ndeaths = ddf_countries.drop('Country', axis=1).values.flatten()\nrecovered = rdf_countries.drop('Country', axis=1).values.flatten()\nactive = confirmed - deaths - recovered\n\nd={'Country': np.repeat(countries, n), 'Date': dates*c, 'Confirmed': confirmed, 'Deaths':deaths,\n   'Recovered':recovered, 'Active':active}\ngrouped2_df = pd.DataFrame(d)\ngrouped2_df['Date'] = pd.to_datetime(grouped2_df['Date'], format='%m\/%d\/%y')\ngrouped2_df","cc755b01":"# Countries, today. Originally: 10\/29\/20\n\ntoday_df = grouped1_df.iloc[-190:].set_index('Date')\ntoday_df['Deaths\/100 cases']=(today_df['Deaths']\/today_df['Confirmed'])*100\ntoday_df = today_df.round(2)\ntoday_df.tail(20)","c6815421":"# World, today. Originally: 10\/29\/20\n\ntoday = today_df.index[0]   # originally today='10\/29\/20'\ntemp_df = today_df.copy()    # I add last row: world \ntemp_df.loc[str(c)] = temp_df.sum()    # c is the number of countries considered\ntemp_df.at[str(c), 'Country'] = 'World'\ntemp_df.at[str(c), '% of deaths'] = (temp_df.at[str(c), 'Deaths']\/temp_df.at[str(c), 'Confirmed'])*100\n\ntemp_df.rename(index={str(c): today}, inplace=True)\n\ntodayW_df = temp_df.drop('Confirmed', axis=1).tail(1)\ntodayW_df","05950483":"def draw_map(df, column, cs):        # cs for color scale \n    fig = px.choropleth(df, locations='Country', locationmode='country names', color=column, hover_name='Country', \n                  title='{} as of {}'.format(column, today.date()), hover_data=[column],\n                  color_continuous_scale=cs)   # px.colors.sequential.\n    fig.show()","ab487710":"draw_map(today_df, 'Confirmed', 'Blues')","0a8bd21a":"draw_map(today_df, 'Active', 'deep')","3db0117a":"draw_map(today_df, 'Deaths', 'Blues')","6e01480f":"draw_map(today_df, 'Deaths\/100 cases', 'deep')","7b587210":"def animation_map(df, column):\n    fig = px.choropleth(df, locations='Country', locationmode='country names', hover_name='Country',\n                        color=df[column],   # np.log\n                        title='Cases over time', animation_frame=df['Date'].dt.strftime('%Y-%m-%d'),\n                        color_continuous_scale=px.colors.sequential.Blues)\n    fig.update(layout_coloraxis_showscale=False)\n    fig.update_layout(transition = {'duration': 10})\n    fig.show()","81981db6":"animation_map(grouped1_df_every5thdate, 'Confirmed')","dd7f5e95":"def plot_hbar(df, column, n=15, hover_data=[]):\n    fig = px.bar(df.sort_values(column).tail(n), x=column, y=\"Country\", color='Country',  \n                 text=column, orientation='h', width=900, hover_data=hover_data,\n                 color_discrete_sequence = px.colors.qualitative.Prism) \n    fig.update_traces(texttemplate='%{text:.3s}', textposition='outside')\n    fig.update_layout(title=column, xaxis_title='', yaxis_title='', yaxis_categoryorder='total ascending',\n                      uniformtext_minsize=8, uniformtext_mode='hide') # margin=dict(l=50, r=50, b=100, t=100, pad=4)\n    fig.show()","252c83cf":"plot_hbar(today_df, 'Confirmed')","1b997fbb":"plot_hbar(today_df, 'Active')","8014dcde":"plot_hbar(today_df, 'Deaths')","b87439b9":"plot_hbar(today_df, 'Deaths\/100 cases')","b2bcc199":"def plot_line(df, column, n=6):\n    top_n = grouped1_df.sort_values(column)[grouped1_df['Date']==today].tail(n)['Country'].to_numpy()\n    #top10_df = grouped1_df[grouped1_df['Country'].isin(top_n)]     or\n    top10_df = grouped1_df.query('Country in @top_n')\n    \n    fig = px.line(top10_df, x='Date', y=column, color='Country', height=600, \n                  title=column,    # '{} as of {}'.format(column, today.date()) \n                  color_discrete_sequence = px.colors.qualitative.Dark24)\n    fig.update_layout(showlegend=True, xaxis_title='', yaxis_title='')\n    fig.show()","46423747":"plot_line(grouped2_df, 'Confirmed')","cb070593":"plot_line(grouped2_df, 'Active')","ba2171c0":"plot_line(grouped2_df, 'Deaths')","1ac5685b":"def plot_treemap(df, column):\n    fig = px.treemap(df, path=['Country'], values=column, height=600,\n                 title=column, color_discrete_sequence = px.colors.qualitative.Prism)\n    fig.data[0].textinfo = 'label+text+value'\n    fig.show()","c7faa22e":"plot_treemap(today_df, 'Confirmed')","407a4dd5":"plot_treemap(today_df, 'Active')","7346f89f":"plot_treemap(today_df, 'Deaths')","a809cf9e":"plot_treemap(today_df, 'Deaths\/100 cases')","8d183d27":"def plot_bubble(df, column):\n    temp = df[df[column]>0].sort_values('Country', ascending=False)\n    fig = px.scatter(temp, x='Date', y='Country', size=column, color=column, height=3000, title=column,\n                    color_continuous_scale=px.colors.sequential.ice)  # Aggrnyl \n    fig.update_layout(yaxis=dict(dtick=1), xaxis_title='', yaxis_title='') \n    fig.update(layout_coloraxis_showscale=False)\n    fig.show()","e7e4c56b":"plot_bubble(grouped1_df, 'Confirmed')","22def3ed":"US_df = grouped1_df[grouped1_df['Country']=='US'].groupby(['Date']).agg({'Confirmed':'sum', 'Deaths':'sum', 'Recovered':'sum', 'Active':'sum'})\nUS_df.tail()","5f5c7499":"US_df['Days since 1\/22'] = US_df.index - US_df.index[0]\nUS_df['Days since 1\/22'] = US_df['Days since 1\/22'].dt.days\nUS_df.head()","d18bd427":"cutpoint = int(US_df.shape[0]*0.9)\ntrain = US_df.iloc[:cutpoint]\nvalid = US_df.iloc[cutpoint:]\n\nmodel_scores = []","b2fbb6fc":"lin_reg = LinearRegression(normalize=True)\nlin_reg.fit(np.array(train['Days since 1\/22']).reshape(-1,1), np.array(train['Confirmed']).reshape(-1,1))\nprediction_lr = lin_reg.predict(np.array(valid['Days since 1\/22']).reshape(-1,1))\nmodel_scores.append(np.sqrt(mean_squared_error(valid['Confirmed'], prediction_lr)))\n\nprint('Square root of MSE for Liner Regression is', model_scores[0])","3c306897":"def plot_LR():\n    df = US_df\n    pred = lin_reg.predict(np.array(df['Days since 1\/22']).reshape(-1,1))\n    plt.figure(figsize=(9,6))\n    plt.plot(df['Confirmed'], label='Confirmed cases', color='darkblue')\n    plt.plot(df.index, pred, label='Predicted number of cases', color='red')\n    plt.title('Covid-19 cases in the US, linear regression', fontsize=20)\n    plt.xticks(rotation=45, size=15 )\n    plt.ylabel('Confirmed cases, 10M', fontsize=20)\n    plt.yticks(size=20)\n    plt.legend(loc=2, prop={'size': 17})\n\nplot_LR()","2fadc81c":"poly = PolynomialFeatures(degree=6)\n\ntrain_poly = poly.fit_transform(np.array(train['Days since 1\/22']).reshape(-1,1))\nvalid_poly = poly.fit_transform(np.array(valid['Days since 1\/22']).reshape(-1,1))","e957159b":"lin_reg = LinearRegression(normalize=True)\nlin_reg.fit(train_poly, train['Confirmed'])\nprediction_pr = lin_reg.predict(valid_poly)\nmodel_scores.append(np.sqrt(mean_squared_error(valid['Confirmed'], prediction_pr)))\n\nprint('Square root of MSE for Polynoial Regression is', model_scores[1])","68172092":"def plot_PR():\n    df = US_df\n    data = poly.fit_transform(np.array(df['Days since 1\/22']).reshape(-1,1))\n    pred = lin_reg.predict(data)\n    plt.figure(figsize=(9,6))\n    plt.plot(df['Confirmed'], label='Confirmed cases', color='darkblue')\n    plt.plot(df.index, pred, label='Predicted number of cases', color='red') #, linestyle='--')\n    plt.title('Covid-19 cases in the US, polynomial regression', fontsize=20)\n    plt.xticks(rotation=45, size=15)\n    plt.yticks(size=20)\n    plt.ylabel('Confirmed cases, 10M', fontsize=20)\n    plt.legend(loc=2, prop={'size': 17})\n    \nplot_PR()","d29cdfd9":"svm = SVR(C=1, degree=5, kernel='poly', epsilon=0.05)\nsvm.fit(np.array(train['Days since 1\/22']).reshape(-1,1), np.array(train['Confirmed']).reshape(-1,1))\npred_svm = svm.predict(np.array(valid['Days since 1\/22']).reshape(-1,1))\nmodel_scores.append(np.sqrt(mean_squared_error(valid['Confirmed'], pred_svm)))\n\nprint('Square root of MSE for SVM is', model_scores[2])","ac753ae6":"def plot_SVM():\n    df = US_df\n    pred = svm.predict(np.array(df['Days since 1\/22']).reshape(-1,1))\n    plt.figure(figsize=(9,6))\n    plt.plot(df['Confirmed'], label='Confirmed cases', color='darkblue')\n    plt.plot(df.index, pred, label='Predicted number of cases', color='red') #, linestyle='--')\n    plt.title('Covid-19 cases in the US, SVM', fontsize=20)\n    plt.xticks(rotation=45, size=15)\n    plt.yticks(size=20)\n    plt.ylabel('Confirmed cases, 10M', fontsize=20)\n    plt.legend(loc=2, prop={'size': 17})\n    \nplot_SVM()","c7adf657":"# Datasets","33637d7e":"### Linear regression","f7656cac":"#### The following dataset is obtained from the one above by considering every fifth date (used later so that the animation is of reasonable rate).","f6786e79":"#### Linear regression definitely does not help","881be979":"#### Today, by countries","b02a7e06":"#### Cleaning.","c4cc4729":"# Top 15 countries","e40ddb87":"### Preparation","6ff6f602":"### Polynomial Regression","d8f5483a":"#### Today, world","5bfb825c":"### Support Vector Machine","db60a675":"# Acknowledgements\nThe data is provided by John Hopkins University github repository, https:\/\/github.com\/CSSEGISandData\/COVID-19.\nThe analysis in this notebook is based on the data up to November 28th, 2020.","01750949":"# Libraries","e28f65b8":"#### Below I create the second fully grouped dataset. Now the rows are arranged first by countries, then by dates.","ef347288":"# US - Machine Learning","851b0358":"#### Below I create the fully grouped dataset, that is each row corresponds to certain date and country. The rows are arranged first by dates, then by countries.","e216f368":"# Maps","e07327e8":"#### I use three datasets which give the number of confirmed cases, the number of deaths and the number of people recovered."}}