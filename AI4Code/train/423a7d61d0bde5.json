{"cell_type":{"350fe1eb":"code","eacfba7a":"code","4d21d83c":"code","9446862a":"code","01c9580c":"code","1ca887c7":"code","e53311da":"code","b044476f":"code","e2ab5add":"code","228bd850":"code","b8436227":"code","bd256a62":"code","4858b672":"code","c35354ea":"code","821f9b91":"code","f22fb0d4":"code","daad9e4b":"code","441588e6":"code","a0e3a510":"code","a96628c3":"code","0436ef0e":"code","1164e659":"code","e4c785a5":"code","a8675a46":"code","a50ffea1":"code","244e2ef6":"code","1b31847a":"code","15408f43":"code","4f291b2e":"code","5fda8157":"code","7cdff1e5":"code","9e523c55":"code","407619e5":"code","8953f39a":"code","8e04736f":"code","7a3900ef":"code","5ff3fff1":"code","b5545fd3":"code","ab93c300":"code","11744310":"code","84ee5b83":"code","8754199b":"code","0f8e91e9":"code","afd6d844":"code","3591e2e1":"code","c241cd04":"code","cbec7bae":"code","6a7bab75":"code","46216d93":"markdown","3063d7ea":"markdown","0632fda2":"markdown","b9c77611":"markdown","4b793aaf":"markdown","217f97c6":"markdown","8e636931":"markdown","e8c909f7":"markdown","2277ba3b":"markdown","39ed4a35":"markdown","b8ef7715":"markdown","f1fa66fb":"markdown","180dd990":"markdown","8bccba93":"markdown","5c9af99c":"markdown","f19ea5d3":"markdown","262cebe9":"markdown","a533a48e":"markdown","bf4d1cf2":"markdown","849a4631":"markdown","65f26295":"markdown","8ebbafe8":"markdown","4ae4e95d":"markdown","fec0bce4":"markdown","46a2f914":"markdown","732f0972":"markdown","f128f9b3":"markdown","b7022ebb":"markdown","72bb5215":"markdown"},"source":{"350fe1eb":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_palette(\"tab10\")\nimport plotly.graph_objs as go\nimport plotly.express as px\n\nimport category_encoders as ce\n\nimport re\nimport nltk\nfrom nltk.corpus import stopwords\nnltk.download('stopwords')\n\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error","eacfba7a":"# reading .csv file\ndf=pd.read_csv('..\/input\/input-data\/CAR DETAILS FROM CAR DEKHO.csv')\nprint('Dataframe has {} rows and {} columns'.format(df.shape[0],df.shape[1]))\ndf.head()","4d21d83c":"df['brand']=df['name'].apply(lambda x: ' '.join(x.split(' ')[:2]) if 'Land' in x else x.split(' ')[0])\ndf['car']=df['name'].apply(lambda x: ' '.join(x.split(' ')[2:]) if 'Land' in x else ' '.join(x.split(' ')[1:]))\ndf.head()","9446862a":"#list of all brands and cars\nbrands=list(df['brand'].unique())\ncars=list(df['car'].unique())","01c9580c":"bharat_stage= [text for idx,text in enumerate(cars) if \"BS\" in text]\nbharat_stage[:5]","1ca887c7":"def removing_BS(text):\n    text= re.sub('BS-VI|BS-IV|BS-III|BS-II|BS VI|BS IV|BS III|BS II|BS I|BSVI|BSIV|BSIII|BSII|BS I|','',text)\n    return text\n\nStopwords=set(stopwords.words('english'))\ndef removing_stopwords(text):\n    return \" \".join([word for word in str(text).split() if word not in Stopwords])\n\ndf['car']=df['car'].apply(lambda text: removing_BS(text).lower())\ndf['car']=df['car'].apply(lambda text:removing_stopwords(text))\ndf.head()","e53311da":"car_rename={'Maruti':{'alto':'Alto','dzire':'Swift Dzire','swift':'Swift','wagon':'Wagon R','ertiga':'Ertiga','sx4':'SX4',\n                      'celerio':'Celerio','cross':'S-Cross','zen':'Zen','baleno':'Baleno','eeco':'Eeco','omni':'Omni',\n                      'star':'A-Star','ritz':'Ritz','esteem':'Esteem','800':'800','vitara':'Brezza','ignis':'Ignis',\n                      'gypsy':'Gypsy','presso':'S-Presso','ciaz':'Ciaz','estilo':'Estilo'},\n           'Hyundai':{'elite':'Elite i20','grand':'Grand i10','active':'i20 active','eon':'Eon','santro':'Santro','sonata':'Sonata',\n                      'i10':'i10','verna':'Verna','i20':'i20','creta':'Creta','xcent':'Xcent','accent':'Accent','getz':'Getz',\n                      'elantra':'Elantra','venue':'Venue','tucson':'Tucson','santa':'Santa Fe'},\n           'Datsun':{'redi':'Redigo','plus':'Go Plus','go':'Go'},\n           'Honda':{'amaze':'Amaze','jazz':'Jazz','city':'City','br-v':'BR-V','wr-v':'WR-V','brio':'Brio','mobilio':'Mobilio',\n                   'civic':'Civic','accord':'Accord','cr-v':'CR-V','brv':'BR-V'},\n           'Tata':{'nano':'Nano','vista':'Indica Vista','indigo':'Indigo','indica':'Indica','safari':'Safari','nexon':'Nexon',\n                  'manza':'Manza','zest':'Zest','sumo':'Sumo','bolt':'Bolt','hexa':'Hexa','tigor':'Tigor','tiago':'Tiago',\n                  'xenon':'Nexon','harrier':'Harrier','aria':'Aria','altroz':'Altroz','venture':'Venture','spacio':'Sumo','winger':'Winger'},\n           'Chevrolet':{'beat':'Beat','spark':'Spark','cruze':'Cruze','sail':'Sail','optra':'Optra','aveo':'Aveo','enjoy':'Enjoy',\n                       'captiva':'Captiva','tavera':'Tavera'},\n           'Toyota':{'innova':'Innova','fortuner':'Fortuner','etios':'Etios','corolla':'Corolla','camry':'Camry','yaris':'Yaris',\n                    'qualis':'Qualis'},\n           'Jaguar':{'xf 3.0 litre':'XF','xf 5.0 litre':'XF','xj 5.0':'XJ','xf 2.2 litre':'XF'},\n           'Mercedes-Benz':{'c-class':'C-Class','e-class':'E-Class','m-class':'M-Class','b-class':'B-Class',\n                            's-class':'S-Class','gls':'GLS','gl-class 350':'GL350','b class':'B-Class'},\n           'Audi':{'a6':'A6','a4':'A4','q3':'Q3','q5':'Q5','a8':'A8','q3':'Q3','q7':'Q7','a5':'A5','rs7':'RS7'},\n           'Skoda':{'laura':'Laura','rapid':'Rapid','superb':'Superb','octavia':'Octavia','fabia':'Fabia','yeti':'Yeti'},\n           'BMW':{'x5':'X5','x1':'X1','7 series':'7 Series','5 series':'5 Series','3 series':'3 Series'},\n           'Mahindra':{'xuv500':'XUV500','bolero':'Bolero','xylo':'Xylo','scorpio':'Scorpio','quanto':'Quanto','verito':'Verito',\n                      'tuv 300':'TUV 300','kuv':'KUV','thar':'Thar','marazzo':'Marazzo','renault logan':'Verito','jeep':'Jeep',\n                      'nuvosport':'NuvoSport','alturas':'Alturas','ingenio':'Imperio','xuv300':'XUV300','supro':'Supro'},\n           'Ford':{'figo':'Figo','ecosport':'EcoSport','endeavour':'Endeavour','fiesta':'Fiesta','freestyle':'Freestyle','ikon':'Ikon',\n                  'aspire':'Aspire','classic':'Fiesta','fusion':'Fusion'},\n           'Nissan':{'micra':'Micra','sunny':'Sunny','terrano':'Terrano','evalia':'Evalia','trail':'X-Trail','kicks':'Kicks'},\n           'Renault':{'kwid':'Kwid','duster':'Duster','scala':'Scala','lodgy':'Lodgy','captur':'Captur','fluence':'Fluence','pulse':'Pulse',\n                     'triber':'Triber','koleos':'Koleos'},\n           'Volkswagen':{'polo':'Polo','vento':'Vento','ameo':'Ameo','jetta':'Jetta','crosspolo':'CrossPolo','passat':'Passat'},\n           'Volvo':{'v40':'V40','xc60':'XC60','xc 90':'XC90'},\n           'Land Rover':{'discovery':'Discovery','evoque':'Range Rover Evoque','range rover 4.4 diesel lwb vogue':'range rover 4.4'}}","b044476f":"# function to rename car names\ndef rename_car(brnd,x):\n    text=x\n    temp_dict=car_rename[brnd]\n    for key,val in temp_dict.items():\n        if key in text:\n            text=val\n            return(text)\n            break\n        else:continue\n","e2ab5add":"df['Model']=0\ncol_num=df.columns.get_loc(\"Model\")\nfor idx in range(0,df.shape[0]):\n    brand=df.iloc[idx]['brand']\n    car=df.iloc[idx]['car']\n    df.iloc[idx,col_num]=rename_car(brand,car)\n    \ndf.drop(['car','name'],axis=1,inplace=True)\ndf['vehicle_age']=2020-df['year']\ncol_order=[  'brand', 'Model','year','vehicle_age', 'km_driven', 'fuel','transmission', 'seller_type', 'owner','selling_price']\ndf=df[col_order]\ndf.head()","228bd850":"hatchback=['800','Wagon R','Alto','Celerio','Tigor','i10','Santro','Grand i10','i20','Swift','Indica','Eon',\n          'Indica Vista','Getz','Elite i20','Brio','Micra','Kwid','Beat','Zen','Baleno','Nano','Figo','Spark',\n          'Bolt','Fabia','Jazz','Tiago','A-Star','Polo','Ritz','Estilo','Pulse','Ignis','Freestyle','S-Presso',\n          'Altroz','Redigo','Go Plus','Go','B-Class','V40']\nsedan=['Verna','Indigo','Corolla','Ciaz','City','A6','Superb','3 Series','Elantra','Swift Dzire','Etios','Civic',\n      'Rapid','A8','Jetta','A4','SX4','7 Series','Sonata','Cruze','Vento','Esteem','5 Series','Scala','Verito',\n      'Optra','Manza','Accord','Ikon','Laura','Octavia','Accent','Sunny','A5','Camry','Passat','Fusion','Fluence',\n      'RS7','Yaris','XF','XJ','C-Class','E-Class','S-Class','M-Class']\ncompact_sedan=['Amaze','Xcent','Sail','Ameo','Zest','Aspire','Aveo','Fiesta']\nsuv=['Q5','Q7','Scorpio','Jeep','XUV500','Bolero','Sumo','Yeti','Endeavour','Safari','Fortuner','BR-V','Tucson',\n    'X5','Gypsy','Hexa','Captiva','Thar','Alturas','Aria','CR-V','Santa Fe','Koleos','Harrier','X-Trail','GLS','GL350',\n    'Discovery','Range Rover Evoque','range rover 4.4','XC90','XC60']\nmuv=['Enjoy','Innova','Tavera','Xylo','Ertiga','Quanto','Mobilio','Marazzo','Lodgy','NuvoSport','Evalia','Winger','Qualis']\ncompact_suv=['Creta','Brezza','EcoSport','Terrano','Duster','X1','XUV300','TUV 300','WR-V','Q3','Kicks','Triber']\ncrossover=['Venue','S-Cross','i20 active','KUV','Nexon','Captur']\nminivan=['Omni','Eeco','Supro','Venture']\npickup=['Imperio']\n\nvehicle_class={'hatchback':hatchback,'compact_sedan':compact_sedan,'sedan':sedan,\n               'suv':suv,'compact_suv':compact_suv,'muv':muv,'pickup':pickup,'crossover':crossover,'minivan':minivan}\n","b8436227":"df['Class']=0\ncol_num=df.columns.get_loc(\"Class\")\nfor idx in range(0,df.shape[0]):\n    car_name=df.iloc[idx]['Model']\n    for key,val in vehicle_class.items():\n        if car_name in val:\n            df.iloc[idx,col_num]=key\ndf.head()","bd256a62":"print((df['fuel'].value_counts()))\ndf=df[df['fuel']!='Electric'].reset_index()\ndf.drop('index',axis=1,inplace=True)","4858b672":"temp_df=df.copy()\ntemp_df['count']=1\ntemp_df['Fuel']='Fuel'\nfig = px.sunburst(temp_df, path=[ 'Fuel','fuel', 'transmission'], values='count')\nfig.show()","c35354ea":"df0=df.loc[:,['Class']]\ndf0['count']=1\ndf0['Listed']='Vehicle Class'\nfig = px.sunburst(df0, path=['Listed','Class'], values='count')\nfig.show()","821f9b91":"df0=df.loc[:,['brand','fuel','transmission']]\ndf0['count']=1\ndf0['Listed']='Cars Listed of Sale'\nfig = px.sunburst(df0, path=['Listed','brand', 'fuel', 'transmission'], values='count',width=900, height=900,)\nfig.show()","f22fb0d4":"brands=df['brand'].value_counts().index\n\nfig = plt.figure(figsize=(20,100))\n\nfor b,num in zip(brands, range(1,len(brands)+1)):\n    if b=='Maruti':\n        rot=30\n    else:\n        rot=0\n    df0=df[df['brand']==b]\n    listed_car_num=df0.shape[0]\n    vc0=df0.Model.value_counts(normalize=True)\n    ax = fig.add_subplot(len(brands),1,num)\n    sns.barplot(x=vc0.index,y=vc0.values*100,ax=ax,palette='tab10')\n    plt.xticks(rotation=rot,horizontalalignment='center',fontsize=15)\n    plt.yticks(fontsize=15)\n    plt.ylabel('% of listed cars',fontsize=15)\n    ax.set_title(b+' \\nNumber of cars listed for sale : '+str(listed_car_num),fontsize=17)\n\nplt.tight_layout()\nplt.show()","daad9e4b":"Luxury_brand=['Audi','BMW','Mercedes-Benz','Jaguar','Land Rover','Volvo']\nluxury_df=df[df['brand'].isin(Luxury_brand)].reset_index()\nluxury_df.drop('index',axis=1,inplace=True)\nregular_df=df[~df['brand'].isin(Luxury_brand)].reset_index()\nregular_df.drop('index',axis=1,inplace=True)\nprint(luxury_df.shape,regular_df.shape)\nluxury_df.head()","441588e6":"plt.figure(figsize=(20,12))\nplt.subplot(2,1,1)\nclass_order=list(regular_df.groupby(['Class'])['selling_price'].mean().reset_index().sort_values('selling_price')['Class'])\n\nsns.boxplot(x='Class',y='selling_price',data=regular_df,hue='fuel',palette='tab10',order=class_order)\nplt.legend(bbox_to_anchor=(1.01, 1), loc=2, borderaxespad=0.)\nplt.xticks(fontsize=11)\nplt.xlabel('Class',fontsize=13)\nplt.yticks(fontsize=10)\nplt.ylabel('Selling Price',fontsize=13)\nplt.title(\"selling price of different class vehicles(Regular) and fuels\",fontsize=14)\n\nplt.subplot(2,1,2)\nclass_order=list(luxury_df.groupby(['Class'])['selling_price'].mean().reset_index().sort_values('selling_price')['Class'])\nsns.boxplot(x='Class',y='selling_price',data=luxury_df,hue='fuel',hue_order=['Petrol','Diesel'],palette='tab10',order=class_order)\nplt.legend(bbox_to_anchor=(1.01, 1), loc=2, borderaxespad=0.)\nplt.xticks(fontsize=11)\nplt.xlabel('Class',fontsize=13)\nplt.yticks(fontsize=10)\nplt.ylabel('Selling Price',fontsize=13)\nplt.title(\"selling price of different class vehicles(Luxury) and fuels\",fontsize=14)\n\nplt.tight_layout()","a0e3a510":"plt.figure(figsize=(20,12))\nplt.subplot(2,1,1)\nclass_order=list(regular_df.groupby(['Class'])['selling_price'].mean().reset_index().sort_values('selling_price')['Class'])\n\nsns.boxplot(x='Class',y='selling_price',data=regular_df,hue='transmission',hue_order=['Automatic','Manual'],palette='tab10',order=class_order)\nplt.legend(bbox_to_anchor=(1.01, 1), loc=2, borderaxespad=0.)\nplt.xticks(fontsize=11)\nplt.xlabel('Class',fontsize=13)\nplt.yticks(fontsize=10)\nplt.ylabel('Selling Price',fontsize=13)\nplt.title(\"selling price of different class vehicles(Regular) and transmission\",fontsize=14)\n\nplt.subplot(2,1,2)\nclass_order=list(luxury_df.groupby(['Class'])['selling_price'].mean().reset_index().sort_values('selling_price')['Class'])\nsns.boxplot(x='Class',y='selling_price',data=luxury_df,hue='transmission',hue_order=['Automatic','Manual'],palette='tab10',order=class_order)\nplt.legend(bbox_to_anchor=(1.01, 1), loc=2, borderaxespad=0.)\nplt.xticks(fontsize=11)\nplt.xlabel('Class',fontsize=13)\nplt.yticks(fontsize=10)\nplt.ylabel('Selling Price',fontsize=13)\nplt.title(\"selling price of different class vehicles(Luxury) and transmission\",fontsize=14)\n\nplt.tight_layout()","a96628c3":"plt.figure(figsize=(25,12))\nplt.subplot(2,1,1)\nsns.boxplot(x='brand',y='km_driven',data=regular_df,palette='tab10')\nplt.ylim(0,300000)\nplt.xticks(fontsize=11)\nplt.xlabel('Brand',fontsize=13)\nplt.yticks(fontsize=11)\nplt.ylabel('KM Driven',fontsize=13)\nplt.title(\"range of km's driven in each regular brand \",fontsize=14)\n\nplt.subplot(2,1,2)\nsns.boxplot(x='brand',y='km_driven',data=luxury_df,palette='tab10')\nplt.ylim(0,175000)\nplt.xticks(fontsize=11)\nplt.xlabel('Brand',fontsize=13)\nplt.yticks(fontsize=11)\nplt.ylabel('KM Driven',fontsize=13)\nplt.title(\"range of km's driven in each luxury brand \",fontsize=14);","0436ef0e":"plt.figure(figsize=(25,12))\n\nplt.subplot(2,1,1)\nsns.boxplot(x='brand',y='selling_price',data=regular_df,palette='tab10')\nplt.ylim(0,2200000)\nplt.xticks(fontsize=11)\nplt.xlabel('Brand',fontsize=13)\nplt.yticks(fontsize=11)\nplt.ylabel('selling_price',fontsize=13)\nplt.title(\"range of selling_price for each regular brand \",fontsize=14)\n\n\nplt.subplot(2,1,2)\nsns.boxplot(x='brand',y='selling_price',data=luxury_df,palette='tab10')\nplt.ylim(0,6000000)\nplt.xticks(fontsize=11)\nplt.xlabel('Brand',fontsize=13)\nplt.yticks(fontsize=11)\nplt.ylabel('selling_price',fontsize=13)\nplt.title(\"range of selling_price for each luxury brand \",fontsize=14);","1164e659":"plt.figure(figsize=(25,12))\nplt.subplot(2,1,1)\n\nsns.boxplot(x='brand',y='selling_price',data=regular_df,hue='seller_type',hue_order=['Individual','Dealer','Trustmark Dealer'],palette='tab10')\n#plt.legend(bbox_to_anchor=(1.01, 1), loc=2, borderaxespad=0.)\nplt.xticks(fontsize=11)\nplt.xlabel('Class',fontsize=13)\nplt.yticks(fontsize=10)\nplt.ylabel('Selling Price',fontsize=13)\nplt.title(\"selling price of different class vehicles(Regular) and seller type\",fontsize=14)\n\nplt.subplot(2,1,2)\nclass_order=list(luxury_df.groupby(['seller_type'])['selling_price'].mean().reset_index().sort_values('selling_price')['seller_type'])\nsns.boxplot(x='brand',y='selling_price',data=luxury_df,hue='seller_type',hue_order=['Individual','Dealer'],palette='tab10')\n#plt.legend(bbox_to_anchor=(1.01, 1), loc=2, borderaxespad=0.)\nplt.xticks(fontsize=11)\nplt.xlabel('Class',fontsize=13)\nplt.yticks(fontsize=10)\nplt.ylabel('Selling Price',fontsize=13)\nplt.title(\"selling price of different class vehicles(Luxury) and seller type\",fontsize=14)\n\nplt.tight_layout()","e4c785a5":"plt.figure(figsize=(25,7))\nsns.lineplot(x='vehicle_age',y='selling_price',data=df)\nplt.ticklabel_format(style='plain')","a8675a46":"plt.figure(figsize=(25,25))\ntemp_df=df[((df['selling_price']<2000000)&(df['km_driven']<500000))]\nfig = px.scatter_3d(temp_df, x='year', y='km_driven', z='selling_price',\n              color='Class')\nfig.show()","a50ffea1":"shape_before=df.shape\nvc=df.brand.value_counts(normalize=True)\nlow_freq_brands=list(vc[vc.values<=0.02].index)\n\ndf=df[~df['brand'].isin(low_freq_brands)]\ndf=df.reset_index()\ndf.drop('index',axis=1,inplace=True)\ndf.head()\nprint(shape_before,df.shape)","244e2ef6":"df.drop(['brand','year'],axis=1,inplace=True)\ndf=df[['Model','vehicle_age','km_driven','fuel','transmission','Class','owner','seller_type','selling_price']]\ndf.head()","1b31847a":"vc0=df.Model.value_counts()\nlow_freq=list(vc0[vc0.values<2].index)\nshape_before=df.shape\ndf=df[~df['Model'].isin(low_freq)].reset_index()\ndf=df.drop('index',axis=1)\nprint(shape_before,df.shape)\ndf.head()","15408f43":"target='selling_price'\nx=list(df.columns)\nx.remove(target)","4f291b2e":"x_train, x_test, y_train, y_test = train_test_split(df[x],df[target],random_state=10,stratify=df['Model'],test_size=0.25)\nprint(x_train.shape, x_test.shape, y_train.shape, y_test.shape)\n\nx_train.head()","5fda8157":"def outlier_flag(df_in, col_name):\n    q1 = df_in[col_name].quantile(0.25)\n    q3 = df_in[col_name].quantile(0.75)\n    iqr = q3-q1 #Interquartile range\n    fence_low  = q1-1.5*iqr\n    fence_high = q3+1.5*iqr\n    df_in.loc[((df_in[col_name] < fence_low) | (df_in[col_name] > fence_high)),'outlier_flag']='o_'+col_name\n    return df_in","7cdff1e5":"for data in [x_train,x_test]:\n    for col in ['km_driven','vehicle_age']:\n        data=outlier_flag(data,col)\n    data['outlier_flag'].fillna(value='no_outlier',inplace=True)","9e523c55":"te=ce.TargetEncoder(verbose=1,cols=['Model','Class'])","407619e5":"x_train=te.fit_transform(x_train,y_train,)\nx_test=te.transform(x_test)\nx_train.head()","8953f39a":"x_train=pd.get_dummies(x_train)\nx_test=pd.get_dummies(x_test)\nprint(x_train.shape,x_test.shape)","8e04736f":"print(x_train.shape,x_test.shape)","7a3900ef":"#importing required packages for model building\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import mean_squared_error,r2_score","5ff3fff1":"def mean_absolute_percentage_error(y_true, y_pred): \n    y_true, y_pred = np.array(y_true), np.array(y_pred)\n    return np.mean(np.abs((y_true - y_pred) \/ y_true)) * 100","b5545fd3":"from sklearn.model_selection import learning_curve\ndef plot_learning_curve(estimator, title, X, y, ylim=None, cv=None,n_jobs=None, train_sizes=np.linspace(.1, 1.0, 10)):\n    \n    plt.figure()\n    plt.title(title)\n    if ylim is not None:\n        plt.ylim(*ylim)\n    plt.xlabel(\"Training examples\")\n    plt.ylabel(\"Score\")\n    train_sizes, train_scores, test_scores = learning_curve(\n        estimator, X, y, cv=cv, n_jobs=n_jobs, train_sizes=train_sizes)\n    train_scores_mean = np.mean(train_scores, axis=1)\n    train_scores_std = np.std(train_scores, axis=1)\n    test_scores_mean = np.mean(test_scores, axis=1)\n    test_scores_std = np.std(test_scores, axis=1)\n    plt.grid()\n\n    plt.fill_between(train_sizes, train_scores_mean - train_scores_std,\n                     train_scores_mean + train_scores_std, alpha=0.1,\n                     color=\"r\")\n    plt.fill_between(train_sizes, test_scores_mean - test_scores_std,\n                     test_scores_mean + test_scores_std, alpha=0.1, color=\"g\")\n    plt.plot(train_sizes, train_scores_mean, 'o-', color=\"r\",\n             label=\"Training score\")\n    plt.plot(train_sizes, test_scores_mean, 'o-', color=\"g\",\n             label=\"Cross-validation score\")\n\n    plt.legend(loc=\"best\")\n    return plt","ab93c300":"from sklearn.ensemble import RandomForestRegressor\nrf=RandomForestRegressor()","11744310":"#creating parameter grid for random search\ngrid_forest_1={'criterion':['mse','mae'],\n      'n_estimators':np.arange(5,100,10),\n      'max_depth':np.arange(2,7,1),\n      'min_samples_split':np.arange(0.01,0.1,0.01),\n      'max_features':['log2','sqrt','auto'],    \n      'min_weight_fraction_leaf':np.arange(0.001,0.25,0.05)\n}\n\nrf_random=RandomizedSearchCV(estimator=rf,param_distributions=grid_forest_1,n_iter=500,n_jobs=-1,cv=3,verbose=1,random_state=1)\n\n\nrf_random.fit(x_train,y_train)\n","84ee5b83":"rf_random=rf_random.best_estimator_\nnp.sqrt(mean_squared_error(rf_random.predict(x_test),y_test))","8754199b":"plot_learning_curve(estimator=rf_random,title='RF_learning_curves',X=x_train,y=y_train,ylim=(0.5,1.05),cv=5)","0f8e91e9":"rf_random","afd6d844":"grid_forest_2={'criterion':['mae'],\n      'n_estimators':np.arange(60,80,5),\n      'max_depth':(6,7,8),\n      'min_samples_split':np.arange(0.001,0.01,0.008),\n      'max_features':['auto'],    \n      'min_weight_fraction_leaf':np.arange(0.001,0.1,0.008)\n}","3591e2e1":"rf=RandomForestRegressor()\ngrid_search_rf=GridSearchCV(estimator=rf,param_grid = grid_forest_2,cv=3,n_jobs=-1,verbose=1)\ngrid_search_rf.fit(x_train,y_train)","c241cd04":"grid_search_rf=grid_search_rf.best_estimator_\ngrid_search_rf.fit(x_train,y_train)","cbec7bae":"plot_learning_curve(estimator=grid_search_rf,title='RF_learning_curves',X=x_train,y=y_train,ylim=(0.5,1.05),cv=5)","6a7bab75":"y_pred=grid_search_rf.predict(x_test)\nprint(\"\\t\\tError Table\")\nprint('Mean Absolute Percentage Error  : ', mean_absolute_percentage_error(y_test, y_pred))\nprint('Root Mean Squared  Error        : ', np.sqrt(mean_squared_error(y_test, y_pred)))\nprint('R Squared Error                 : ', r2_score(y_test, y_pred))","46216d93":"### Observations\nas expected Suv's are more expensive in both economical and luxury segments with the median price of diesel Suv's being greater than petrol counterparts.","3063d7ea":"### Cleaning the data\nfew car names have bharat stage emission standards in them, which are creating duplicate values.\ncleaning the text to get accurate results","0632fda2":"# Get a used car for a fair price\n\n![used_car.jpeg](attachment:used_car.jpeg)\n\nThe auto industry is changing rapidly and car prices are only going up. So to speak, new cars are getting costlier each year, making them a very high value purchase for the common man. And quite ironically, the average life span of a car is going down despite the steady rise in prices, which brings in good news for potential used car buyers! Thanks to manufacturers launching newer versions of their models sooner now as compared to a few years ago, more and more modern cars are now entering the used car market, which makes it easy for you to make a good buy without having to bust your wallet.\n\nA used car in fact makes more sense for first time buyers upgrading from two-wheelers or public transportation, or for that matter, someone looking to buy a second set of wheels in the family. Now here\u2019s five reasons clarifying why buying a used car instead of a new car is more sensible.\n\n## Reasons to buy a used car\n\n![benefits.jpg](attachment:benefits.jpg)\n\n### 1: Save money and you can even upgrade your segment\n\nAll it takes is less than a minute for a new car, straight out from a showroom, to lose 8-10% of its purchase price as it enters used car territory. Going for used purchase means you have to pay a lot less than the original value of the car (depending on year of manufacture and kilometres done) which means you can save some serious money.\n\n### 2: Slower depreciation means you lose less money \n\nEvery car undergoes depreciation but a used car has an upper hand for the same when compared to a new car. It depreciates at a slower rate when compared to a brand new car. Let\u2019s find out how: Depreciation of a vehicle is at its peak during the first three years of purchase. When you are buying a used car, you will obviously purchase it at a price which has already gone under major depreciation.\n\n### 3: Insurance is cheaper\n\nGetting your used car insured will cost you a lot less as compared to a new car. That along with soaring additional taxes and other clauses makes a new car quite expensive.\n\n### 4: Tension free drive 24x7 \n\nA used car comes with its own perks. The primary benefit has to be the feeling of driving tension-free, without the jitters of getting that first dent or scratch, something only a brand new car is prone to. ","b9c77611":"Note: This is an interactive plot, click on the different class of vehhicles from the legend to show or hide the points from the plot.(zoom,pan and rotate the plot to know the plot in detail)","4b793aaf":"As we have very few instances, instead of removing the outliers (which reduces our data further), a new column is created to flag the rows which have outliers","217f97c6":"function to get learning curves\n\nit is one of the most important metric to select the best model, as it shows the bias and variance of the algorithm","8e636931":"### Observations\nJust as expected, hatchbacks rule the Indian roads, when taken into consideration the streets, traffic and the Indian mindset. Hatchbacks give more value for your hard-earned money, which is followed by sedan, Suv and compact Suv segments. As more Indians are moving into \"middle\" and \"upper-middle\" class, these segments will see a massive rise in demand.","e8c909f7":"separating luxury brands from others to look into it with greater detail.","2277ba3b":"learning curve looks good(low bias and low variance), grid search can be done to increase the model performance","39ed4a35":"### Observations\nWhen it comes to transmission, automatic cars are expensive when compared to manual cars, because of the complexity and electronics involved in the automatic vehicles.","b8ef7715":"## Model Building","f1fa66fb":"grouping the cars into segments of its own.\n\n1. Hatchback\n2. Sedan\n3. Compact Sedan\n4. SUV\n5. Compact SUV\n6. MUV\n7. Crossover\n8. Minivan\n9. Pickup\n\nThis gives us more information with respect to other parameters.","180dd990":"### Observations\n1. Brands which produce people movers(vehicles which are popular for taxi's and transportation) have higher median km's travelled when compared to others\n2. The median km's covered in luxury brands are lower than in the economical cars(maybe because people who own a luxury car will definitely own other vehicles, in which they might travel regularly)","8bccba93":"target encoding Model and Class columns","5c9af99c":"\nsplitting the data into train and test\n\ntry to tune hyperparameters by scoring the validation sample, instead of test to prevent overtraining( where you try to fit the model to get the best test result)\n\nas I have very less data, I'm splitting it into only train and test","f19ea5d3":"Dropping electric vehicle as it makes only one instance of 4282, which is insignificant.","262cebe9":"#### Note: do not forget to click on different parts of the chart to know more in detail","a533a48e":"removing different brands of vehicle whose frequency is very low to be able to help the predictions.","bf4d1cf2":"## Click different regions of the plot to know more details\n\n![1st_gif_2.gif](attachment:1st_gif_2.gif)","849a4631":"function to get mape score","65f26295":"### Observations\nThe median price of vehicle bought from a dealer is greater than when the car is purchased from an owner(individual). (maybe because of the commission of the dealer, dealers restore the vehicle to some sort, and usually, they thoroughly check the components properly before buying to reduce loss which comparatively increases the reliability of cars purchased from the dealer)","8ebbafe8":"### Observations\n1. most of the cars listed of sale are from Maruti, Hyundai and tata(which is smiliar to the brands popularity in indian market)\n2. greater percentage of economical cars are manual transmission.\n3. premium brands like VW,Skoda have a small share of automatic transmissions.\n4. all luxury brands like Audi,BMW, Land Rover vehicles have only automatic transmission. ","4ae4e95d":"### Observations\n\nA significant share of cars listed online are Diesel and petrol cars, with very small chuck taken by CNG and LPG.\nManual transmission is widespread when compared to automatic.\n","fec0bce4":"to predict the selling price correctly, atleast 2 data points for a given model is required.(one to train and one to predict on)\nif you have only one data point for a given model(for example innova) and this data point is sent to test dataframe, then the quality of the prediction will take a hit as the algorithm was not able to train on the given model.","46a2f914":"Before going,humble request if you liked the notebook the Please Upvote ( It motivates me )\n\nAnd Stay Tuned... I WILL BE ADDING LINK OF DEPLOYED MODEL SOON IN COMMENT SECTION If not done till Know","732f0972":"creating dummy columns to deal with categorical data","f128f9b3":"selecting hyperparameter values closer to best random search hyperparameters to do an exhaustive search.","b7022ebb":"Renaming the cars, there are a lot of varients in a single model (i.e you have high,medium and lower varients in a given car model)\n\nso Swift ZDI, Swift LDI,Swift VDI, all will be renamed to just 'Swift'.","72bb5215":"creating two new columns to save brand and car name"}}