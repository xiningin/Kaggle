{"cell_type":{"c2bab986":"code","7ab070d2":"code","295cbd02":"code","cce23665":"code","30800052":"code","e2ba0516":"code","fba1a815":"code","6c9e402d":"code","04c434c0":"code","0aa45a90":"code","90e2906f":"code","c5dbcdd3":"code","215d65bf":"code","933c06a3":"code","936a44ce":"code","27bdc6a7":"code","bcefafc0":"code","1f8266a5":"code","510fe344":"code","65390eaf":"code","80b05488":"code","cde949fb":"code","0dcad57f":"code","78f58c2d":"code","af8f0309":"code","5fda8cb3":"code","f5eccd35":"code","f529e096":"code","54553d95":"code","a1d08cfc":"code","a9040526":"code","73b89987":"code","9b3979ff":"code","34ef7ae3":"code","24486f71":"code","f93edc55":"code","20615b23":"code","71238fb0":"code","4fda77f5":"code","25a2a47b":"code","83c6c1d5":"code","18b7b21a":"code","609bb773":"code","ea69894d":"code","757b7ac3":"code","704c347c":"code","41005a0d":"code","9a42a7ad":"code","da38e521":"code","6a56b6eb":"code","0797bf6f":"code","49d7aac9":"code","9abaf6fc":"code","1a8aef4d":"code","c634c775":"code","c332a9c7":"code","55e41a60":"code","9c579fd7":"code","97d2b57f":"code","1c81fb68":"code","c6dfb2c5":"code","02bf31e7":"code","1c539be9":"code","6ecab406":"code","badd7e6e":"code","93a58446":"code","6ef53666":"code","d525904a":"code","dc781c1a":"code","edf41461":"code","ca667b77":"code","be1d8ac0":"code","3fe02bb2":"code","26f15d7f":"code","6a65cb5a":"code","04a47f06":"code","215ef53d":"code","743d226b":"code","8b8e7c44":"code","22325fa6":"code","c910de6f":"code","7e7e72fe":"code","e39041ce":"code","adda5fb6":"code","f87bb2dc":"code","17a36c4f":"code","e253266b":"code","53d3e9fd":"code","ada7f0a5":"code","0dc97b06":"code","23dbf0db":"code","f76534d4":"code","ab66b3ad":"code","f29b42d3":"code","ef6b3cd1":"code","20e6eee6":"code","a015da05":"code","79fcb6f0":"code","962f711a":"code","a2051367":"code","c906a1cb":"code","ef389593":"code","a5948ce2":"code","8b7474c6":"code","d072c40d":"code","551f1435":"code","0409a088":"code","2af00314":"code","ddf3b8db":"code","58badd4f":"code","63d76cf5":"code","d5b1089c":"code","a218c062":"code","3ad27003":"code","92be9527":"code","5de5c193":"code","d173702c":"code","6054b0bf":"code","3d439cd8":"code","a0e8c9b2":"code","7b6658bf":"code","2d63b19e":"markdown","6ba40205":"markdown","aefec65e":"markdown","3b8fb910":"markdown","176cb779":"markdown","451d02c0":"markdown","1f0bc680":"markdown","c53e444a":"markdown"},"source":{"c2bab986":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","7ab070d2":"train_df = pd.read_csv(\"..\/\/input\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/test.csv\")","295cbd02":"train_df.head(10)","cce23665":"train_df.columns","30800052":"train_df.info()\nprint(\"...................\")\ntest_df.info()","e2ba0516":"train_df.head()","fba1a815":"train_df = train_df.drop(['PassengerId','Name','Ticket'], axis=1)\ntest_df    = test_df.drop(['Name','Ticket'], axis=1)","6c9e402d":"train_df.head(5)","04c434c0":"test_df.head(5)","0aa45a90":"train_df.describe()","90e2906f":"train_df[\"Embarked\"].value_counts()","c5dbcdd3":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"S\")","215d65bf":"train_df.info()","933c06a3":"sns.factorplot(\"Embarked\",\"Survived\", data = train_df, size = 3 , aspect = 4)","936a44ce":"sns.countplot(\"Embarked\", data = train_df)","27bdc6a7":"sns.countplot(\"Survived\", data = train_df)","bcefafc0":"sns.countplot(x = \"Survived\", hue = \"Embarked\", data = train_df)","1f8266a5":"#Create dummy values for embarked \nembarked_dummy_train = pd.get_dummies(train_df[\"Embarked\"])\nembarked_dummy_train.head()","510fe344":"#drop S embarked as it has low rate of survival\nembarked_dummy_train.drop(\"S\", axis = 1 , inplace= True)\nembarked_dummy_train.head()","65390eaf":"train_df.head()","80b05488":"train_df = train_df.join(embarked_dummy_train)","cde949fb":"train_df.head()","0dcad57f":"train_df.drop(\"Embarked\", axis= 1 , inplace= True)","78f58c2d":"train_df.head()","af8f0309":"test_df.head()","5fda8cb3":"embarked_dummy_test = pd.get_dummies(test_df[\"Embarked\"])","f5eccd35":"embarked_dummy_test.head()","f529e096":"embarked_dummy_test.drop(\"S\", axis = 1 , inplace= True)","54553d95":"embarked_dummy_test.head()","a1d08cfc":"test_df = test_df.join(embarked_dummy_test)","a9040526":"test_df.drop(\"Embarked\", axis=1, inplace= True)\ntest_df.head()","73b89987":"train_df.info()\nprint(\"........\")\ntest_df.info()","9b3979ff":"#Fill Fare missing Values in test set by median\ntest_df[\"Fare\"].fillna(test_df[\"Fare\"].median(), inplace=True)","34ef7ae3":"test_df.info()","24486f71":"#Change the type float to int\ntrain_df[\"Fare\"] = train_df[\"Fare\"].astype(int)\ntest_df[\"Fare\"] = test_df[\"Fare\"].astype(int)","f93edc55":"train_df.info()\nprint(\"........\")\ntest_df.info()","20615b23":"fare_survived = train_df[\"Fare\"][train_df[\"Survived\"] == 1]\nfare_not_survived = train_df[\"Fare\"][train_df[\"Survived\"] == 0]","71238fb0":"Average = pd.DataFrame([fare_not_survived.mean(), fare_survived.mean()])\nAverage","4fda77f5":"Stdev = pd.DataFrame([fare_not_survived.std(), fare_survived.std()])\nStdev","25a2a47b":"sns.distplot(train_df[\"Fare\"], kde= False, bins = 30 , hist = True , color = \"green\")","83c6c1d5":"Average.plot(kind = \"bar\" , yerr = Stdev)","18b7b21a":"train_df.info()\nprint(\"........\")\ntest_df.info()","609bb773":"fig, (axis1,axis2) = plt.subplots(1,2,figsize=(15,4))\naxis1.set_title('Original Age values - Titanic')\naxis2.set_title('New Age values - Titanic')\ntrain_df['Age'].dropna().astype(int).hist(bins=70, ax = axis1)\n#Age data is also missing and it is in float \naverage_age_train = train_df[\"Age\"].mean()\nstd_age_train = train_df[\"Age\"].std()\ncount_age_train_null = train_df[\"Age\"].isnull().count()\naverage_age_test = test_df[\"Age\"].mean()\nstd_age_test = test_df[\"Age\"].std()\ncount_age_test_null = test_df[\"Age\"].isnull().count()\n#If you want to fill lots of missing values for age then create random values \nrand_train = np.random.randint(average_age_train - std_age_train , average_age_train + std_age_train , size = count_age_train_null)\nrand_test = np.random.randint(average_age_test - std_age_test , average_age_test + std_age_test , size = count_age_test_null)\n#fill values now \ntrain_df[\"Age\"][np.isnan(train_df[\"Age\"])] = rand_train\ntest_df[\"Age\"][np.isnan(test_df[\"Age\"])] = rand_test\n#convert the type\ntrain_df[\"Age\"]=train_df[\"Age\"].astype(int)\ntest_df[\"Age\"]=test_df[\"Age\"].astype(int)\ntrain_df['Age'].hist(bins=70, ax = axis2)","ea69894d":"target_1 = train_df[\"Age\"][train_df[\"Survived\"]== 0]\ntarget_2 = train_df[\"Age\"][train_df[\"Survived\"]== 1]","757b7ac3":"sns.distplot(target_1, hist = False, color = \"Blue\" , label = \"Not Survived\")\nsns.distplot(target_2, hist = False, color = \"green\", label= \"Survived\")","704c347c":"train_df.info()\nprint(\"........\")\ntest_df.info()","41005a0d":"#Cabin Values are missing. Explore the cabin values. Only 2\u00f64 values are present out of 891 train samples. Hence drop it \ntrain_df[\"Cabin\"].describe()","9a42a7ad":"train_df.drop(\"Cabin\", axis = 1 , inplace = True)\ntest_df.drop(\"Cabin\", axis = 1 , inplace = True)\n","da38e521":"train_df.info()\nprint(\"......................\")\ntest_df.info()\n#no missing values are remaining now","6a56b6eb":"train_df.head(10)","0797bf6f":"train_df.columns","49d7aac9":"#Family data cleaning \ntrain_df[\"Family\"] = train_df[\"SibSp\"] + train_df[\"Parch\"]\ntest_df[\"Family\"] = test_df[\"SibSp\"] + test_df[\"Parch\"]","9abaf6fc":"sns.countplot(train_df[\"Family\"])","1a8aef4d":"sns.countplot(test_df[\"Family\"])","c634c775":"train_df[\"Family\"][train_df[\"Family\"]>0]= 1\ntrain_df[\"Family\"][train_df[\"Family\"]==0]= 0\nsns.countplot(train_df[\"Family\"])\n","c332a9c7":"test_df[\"Family\"][test_df[\"Family\"]>0]= 1\ntest_df[\"Family\"][test_df[\"Family\"]==0]= 0\nsns.countplot(test_df[\"Family\"])\n","55e41a60":"train_df.head()","9c579fd7":"#drop SibSp and Parch\ntrain_df.drop([\"SibSp\",\"Parch\"], axis = 1 , inplace= True)\ntest_df.drop([\"SibSp\",\"Parch\"], axis = 1 , inplace= True)","97d2b57f":"train_df.head()","1c81fb68":"test_df.head()","c6dfb2c5":"sns.countplot(train_df[\"Family\"], hue= train_df[\"Survived\"])","02bf31e7":"train_df[\"People\"]  =train_df[['Age',\"Sex\"]].apply(lambda x: x[\"Sex\"] if x[\"Age\"] >= 16 else \"Child\" , axis = 1) ","1c539be9":"train_df[\"People\"].value_counts()","6ecab406":"test_df[\"People\"]  =test_df[['Age',\"Sex\"]].apply(lambda x: x[\"Sex\"] if x[\"Age\"] >= 16 else \"Child\" , axis = 1) ","badd7e6e":"test_df[\"People\"].value_counts()","93a58446":"train_df[train_df[\"People\"]== \"male\"][train_df[\"Survived\"]== 1].count()\/(train_df[train_df[\"People\"]== \"male\"].count())","6ef53666":"\nfor cat in (\"male\", \"female\",\"Child\"):\n    x = (train_df[train_df[\"People\"]== cat][train_df[\"Survived\"]== 1].count())\/(train_df[train_df[\"People\"]== cat].count())\n    print ( cat + str(x) )","d525904a":"train_df.head()","dc781c1a":"train_df.drop(\"Sex\", axis = 1 , inplace= True)","edf41461":"train_df.head()","ca667b77":"test_df.head()","be1d8ac0":"test_df.drop(\"Sex\", axis = 1 , inplace = True)","3fe02bb2":"test_df.head()","26f15d7f":"#get dummy values\npeople_dummy_train = pd.get_dummies(train_df[\"People\"])\npeople_dummy_train.head()","6a65cb5a":"people_dummy_train.drop(\"male\",axis = 1 , inplace= True)\npeople_dummy_train.head()","04a47f06":"people_dummy_test = pd.get_dummies(test_df[\"People\"])","215ef53d":"people_dummy_test.head()","743d226b":"people_dummy_test.drop(\"male\", axis = 1 , inplace= True)","8b8e7c44":"people_dummy_test.head()","22325fa6":"#join dummy dataframes with original tables\ntrain_df = train_df.join(people_dummy_train)\ntest_df = test_df.join(people_dummy_test)","c910de6f":"train_df.head()","7e7e72fe":"test_df.head()","e39041ce":"train_df.drop(\"People\", axis = 1 , inplace= True)","adda5fb6":"test_df.drop(\"People\", axis = 1 , inplace = True)","f87bb2dc":"train_df.head()","17a36c4f":"test_df.head()","e253266b":"\ntrain_df[\"Pclass\"].value_counts()","53d3e9fd":"sns.countplot(train_df[\"Pclass\"], hue = train_df[\"Survived\"])","ada7f0a5":"sns.factorplot(\"Pclass\", \"Survived\", data= train_df)","0dc97b06":"train_df.head()","23dbf0db":"class_dummy_train = pd.get_dummies(train_df[\"Pclass\"])\nclass_dummy_train.columns = [\"Class1\", \"Class2\", \"Class3\"]","f76534d4":"class_dummy_train.head()","ab66b3ad":"class_dummy_train.drop(\"Class3\", axis= 1 , inplace= True ) ","f29b42d3":"class_dummy_train.head()","ef6b3cd1":"train_df=train_df.join(class_dummy_train)","20e6eee6":"train_df.head()","a015da05":"train_df.drop(\"Pclass\", axis = 1 , inplace = True)","79fcb6f0":"train_df.head()","962f711a":"test_df.head()","a2051367":"Class_dummy_test = pd.get_dummies(test_df[\"Pclass\"])\nClass_dummy_test.columns = [\"Class1\",\"Class2\",\"Class3\"]","c906a1cb":"Class_dummy_test.head()","ef389593":"Class_dummy_test.drop(\"Class3\", axis= 1 , inplace= True)","a5948ce2":"Class_dummy_test.head()","8b7474c6":"test_df = test_df.join(Class_dummy_test)","d072c40d":"test_df.head()","551f1435":"test_df.drop(\"Pclass\", axis = 1 , inplace= True)","0409a088":"test_df.head()","2af00314":"#define training and testing data \nX_train = train_df.drop(\"Survived\", axis = 1)\nY_train = train_df[\"Survived\"]\nX_test = test_df.drop(\"PassengerId\", axis = 1 ).copy()","ddf3b8db":"X_train.head()","58badd4f":"Y_train.head()","63d76cf5":"X_test.head()","d5b1089c":"#Apply models now \n#logistic regression\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score","a218c062":"logistic = LogisticRegression()\nlogistic.fit(X_train,Y_train)\nprediction = logistic.predict(X_test)\nlogistic.score(X_train,Y_train)\n","3ad27003":"from sklearn.svm import SVC\nsvc = SVC()","92be9527":"svc.fit(X_train,Y_train)\npredict = svc.predict(X_test)\nsvc.score(X_train,Y_train)","5de5c193":"from sklearn.ensemble import RandomForestClassifier","d173702c":"random = RandomForestClassifier()","6054b0bf":"random.fit(X_train,Y_train)\npredict = random.predict(X_test)\nrandom.score(X_train,Y_train)","3d439cd8":"from sklearn.neighbors import KNeighborsClassifier","a0e8c9b2":"knn = KNeighborsClassifier()","7b6658bf":"knn.fit(X_train,Y_train)\npredict = knn.predict(X_test)\nknn.score(X_train,Y_train)","2d63b19e":"Check the data now :","6ba40205":"Check the Data ","aefec65e":"Much Needed Imports - For EDA","3b8fb910":"Fill Missing Embarked Values","176cb779":"Some Conclusions : \n\nTrain Data \n\n1. Total 891 Entries \n2. Age of only 714 people are present ( can be guessed for other people ) \n3. Cabin Info of only 204 people are present ( very less data is available ) \n4. Embarked infor of 889 people are present ( can be guessed for other people ) \n\nTest Data \n\n1. Total 418 Entries \n2. Age of only 332 people are present ( can be guessed for other people ) \n3. Cabin Info of only 91 people are present ( very less data is available ) \n\nNow check which data is irrelevant and then drop it : \n\n1. Passenger ID \n2. Ticket \n3. Name ","451d02c0":"Convert data to DataFrame","1f0bc680":"Lets check distribution of missing data fields to fill that up","c53e444a":"Lets look more into data"}}