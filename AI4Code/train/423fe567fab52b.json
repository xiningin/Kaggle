{"cell_type":{"5aff7489":"code","601c26db":"code","2cc2cf49":"code","4ad86985":"code","bfd65145":"code","d1d79876":"code","ef92ace5":"code","511cfd92":"code","8fb8dae2":"code","69eda4f3":"code","453b6005":"code","31b9277c":"code","23fd136d":"code","97e0282b":"code","a3943f21":"code","ef4e3ec9":"code","26f5ae1e":"code","c172b048":"code","80fc4a1c":"code","f085ee63":"code","80a2a644":"code","bb6af8fb":"code","e80696c6":"code","d0589eb6":"code","53711f37":"code","c20ac342":"code","b45fd773":"code","71c677ba":"code","9a5569e3":"code","867bfdda":"code","e5d44c87":"code","c40d1697":"code","575882cb":"code","502ec865":"code","6e4edece":"code","9411f424":"code","7a8c9b19":"code","e6363eee":"code","cb0a97a1":"code","e0eebc4c":"code","1752f8b0":"code","4d0b815d":"code","020aa469":"code","3c94ff5e":"code","8fd1d94c":"code","ae125c48":"code","c6b52435":"code","eda041e3":"code","a37eaa60":"code","67fd73f2":"code","9ebe3b0f":"code","1957644b":"code","afb045ff":"code","62662c44":"markdown","fd36c842":"markdown","3d882267":"markdown","6cfa7809":"markdown","29c46b5b":"markdown","3aae6a1f":"markdown","4f222fe7":"markdown","42879e69":"markdown","c3f94159":"markdown"},"source":{"5aff7489":"import numpy as np \nimport pandas as pd \n\nimport csv as csv\nimport matplotlib.pylab as plt\nimport plotly.express as px \nimport plotly.graph_objects as go\n%matplotlib inline\n","601c26db":"#importing the dataset\ndf =  pd.read_csv('..\/input\/delhi-house-price-prediction\/MagicBricks.csv',header=0)","2cc2cf49":"df.head()","4ad86985":"df.shape","bfd65145":"# checking Null Values\ndf.isnull().sum()","d1d79876":"#creating  price_per_sqft columns to understand the data\ndf['price_per_sqft'] = df['Price']\/df['Area']\ndf['price_per_sqft'] = df['price_per_sqft'].astype(int)","ef92ace5":"df.head(3)","511cfd92":"# Droping null values (as we cant even out average values due to not fitting correctly)\ndf = df[df['Furnishing'].notna()]\ndf = df[df['Bathroom'].notna()]\ndf = df[df['Parking'].notna()]\ndf = df[df['Per_Sqft'].notna()]","8fb8dae2":"df.isnull().sum()","69eda4f3":"# new dataframe without any null values\ndf1 = df","453b6005":"df1.shape","31b9277c":"df1.head()","23fd136d":"# Removing column: per_sqft\n# Re-Shifting Price column\ndf2 = df1.drop(columns=['Per_Sqft','price_per_sqft'])\ncol9 = df2.pop('Price')\ndf2.insert(9,'Price', col9)\ndf2.head()","97e0282b":"## removing outliers and making data frame distributed normally\n\ndef remove_outliers(df):\n    df_out = pd.DataFrame()\n    for key, subdf in df2.groupby('Locality'):\n        m = np.mean(subdf.Price)\n        st = np.std(subdf.Price)\n        red_df = subdf[(subdf.Price>(m-st)) &(subdf.Price<=(m+st))]\n        df_out = pd.concat([df_out,red_df],ignore_index = True)\n    return df_out\ndf3 = remove_outliers(df2)\ndf3.shape","a3943f21":"#Area and Price relation\nfig = px.histogram(df3,x='Area',y='Price',\n                    title='Area vs Price',\n                    opacity=0.8,\n                    color_discrete_sequence=['indianred'],\n                    labels={'Area':'Area in Sqft', 'Price':'Price'})\nfig.update_layout(barmode='group', bargap=0.30,bargroupgap=0.0,height=420,width=1080)\nfig.show()\n","ef4e3ec9":"# House Types\nfig = px.histogram(df3,x='Type',\n                    title='Different House Types',\n                    opacity=0.8,\n                    color = 'Type',\n                    #color_discrete_sequence=['indianred'],\n                    labels={'Type':'Type of House'})\nfig.update_layout(barmode='group', bargap=0.10,bargroupgap=0.0,height=520,width=600)\nfig.show()","26f5ae1e":"# House condition\nfig = px.histogram(df3,x='Furnishing',\n                    title='House condition',\n                    opacity=0.8,\n                    color = 'Furnishing')\n                    #color_discrete_sequence=['indianred']\nfig.update_layout(barmode='group', bargap=0.10,bargroupgap=0.2,height=520,width=600)\nfig.show()","c172b048":"# Price Share of House types\nfig = px.pie(df3, values='Price', names='Furnishing',\n                title='House Condition vs Price Share')\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.update_layout(height=420,width=600)\nfig.show()","80fc4a1c":"# Different house types\nfig = px.histogram(df3,x='Type',\n                    title='House Type',\n                    opacity=0.7,\n                    color = 'Type')\n                    #color_discrete_sequence=['indianred']\nfig.update_layout(barmode='group', bargap=0.10,bargroupgap=0.2,height=520,width=600)\nfig.show()","f085ee63":"# Price Share of House Type\nfig = px.pie(df3, values='Price', names='Type',\n                title='House Type vs Price Share')\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.update_layout(height=420,width=600)\nfig.show()","80a2a644":"#House shifting Status\nfig = px.histogram(df3,x='Status',\n                    title='House Shifting Status',\n                    opacity=1,\n                    color=\"Status\")\nfig.update_layout(barmode='group',height=520,width=600)\nfig.show()","bb6af8fb":"fig = px.histogram(df3,x='Transaction',\n                    title='House Ownership Vs House Type',\n                    opacity=0.8,\n                    color = 'Type',\n                    labels={'Transaction':'Ownership'})\n                    #color_discrete_sequence=['indianred']\nfig.update_layout(barmode='group', bargap=0.20,bargroupgap=0.0,height=520,width=600)\nfig.show()","e80696c6":"#Parking slots counts\nfig = px.histogram(df3,x='Parking',\n                    title='Parking Count',\n                    color_discrete_sequence=['mediumaquamarine'],\n                    labels={'Parking':'Number of Parkings'})\nfig.update_layout(bargap=0.20,height=420,width=1080)\nfig.show()","d0589eb6":"#Parking numbers vs price\nfig = px.scatter(df3,x='Parking',y='Price',\n                title='Price distribution by Number of Parkings',\n                labels={'Parking':'Number of Parkings'},\n                color='Parking')\nfig.update_layout(height=520,width=1080)\nfig.show()","53711f37":"#Checking for weather house price of 2BHK > 3BHK: Locality wise\ndef plot_scatter(df3,Locality):\n    bhk2 = df3[(df3.Locality == Locality) &(df3.BHK ==2)]\n    bhk3 = df3[(df3.Locality == Locality) &(df3.BHK ==3)]\n    fig = go.Figure() \n    fig.add_trace(go.Scatter(x=bhk2.Area,y=bhk2.Price,\n                    mode='markers',\n                    name='2 BHK'))\n    fig.add_trace(go.Scatter(x=bhk3.Area,y=bhk3.Price,\n                    mode='markers',\n                    name='3 BHK'))\n    fig.update_layout(title='2BHK vs 3BHK Price', xaxis_title='Area in Sqft', yaxis_title='Price',height=420,width=680)\n    fig.show()\n\nplot_scatter(df3,'Alaknanda')","c20ac342":"# Droping the data where Number of Bathrooms are greater than Number of BHK's (bhk+2)\ndf3.drop(df3[df3.BHK+2 < df3.Bathroom].index, inplace= True)","b45fd773":"# As we know, generally no house can be made in an area < 100 sqft \ndf3.drop(df3[df3['Area'] < 100].index,inplace=True)","71c677ba":"# Area requried for 2bhk or more than that must be > 300sqft \ndf3.drop(df3[(df3['Area'] < 300) & (df3['BHK'] >=2)].index, inplace=True)","9a5569e3":"df3.shape","867bfdda":"#writer = pd.ExcelWriter('Cleaned data_Delhi_hp_{}.xlsx'.format(pd.datetime.today().strftime('%d%m%y- %H-%M'))) \n#df3.to_excel(writer,'Sheet1')\n#writer.save()","e5d44c87":"df_final = pd.read_csv('..\/input\/cleaned-data\/Cleaned data_Delhi_hp_270521- 23-38.csv', index_col=0)","c40d1697":"df_final.shape","575882cb":"df_final.head(5)","502ec865":"# Due to more number of Localities i am making a general locality called OTHER (for localities occuring 1 times in data)\ndf_loc = df_final.Locality.value_counts()\nloc_lessthan2 = df_loc[df_loc==1]\ndf_final.Locality = df_final.Locality.apply(lambda x: 'other' if x in loc_lessthan2 else x)\n","6e4edece":"df_final.head()","9411f424":"#one hot enchoding for Locality column\ndummies_df1 =  pd.get_dummies(df_final.Locality)\ndf_final1 = pd.concat([df_final,dummies_df1],axis='columns')\n","7a8c9b19":"#one hot enchoding for Furnishing column\ndummies_df2 =  pd.get_dummies(df_final.Furnishing)\ndf_final1 = pd.concat([df_final1,dummies_df2],axis='columns')","e6363eee":"#one hot enchoding for Status column\ndummies_df3 =  pd.get_dummies(df_final.Status)\ndf_final1 = pd.concat([df_final1,dummies_df3],axis='columns')","cb0a97a1":"#one hot enchoding for Transaction column\ndummies_df4 =  pd.get_dummies(df_final.Transaction)\ndf_final1 = pd.concat([df_final1,dummies_df4],axis='columns')","e0eebc4c":"#one hot enchoding for Type column\ndummies_df5 =  pd.get_dummies(df_final.Type)\ndf_final1 = pd.concat([df_final1,dummies_df5],axis='columns')","1752f8b0":"df_final1.head()","4d0b815d":"# Droping useless columns\ndf_final1.drop(columns=['Furnishing','Locality','Status','Transaction','Type'],inplace=True)","020aa469":"df_final1.head()","3c94ff5e":"from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import preprocessing\n\nmodel = LinearRegression()","8fd1d94c":"df3.corr()","ae125c48":"# Taking the Features for our training \nx = df_final1.drop(columns=['Price','Parking'])\ny= df_final1['Price']","c6b52435":"# spliting the data set\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.35, random_state=0)","eda041e3":"# Fitting the Liner Regression model\nmodel.fit(x_train,y_train)\nmodel.score(x_test,y_test)","a37eaa60":"### Creating a prediction function for making predictions","67fd73f2":"x.columns","9ebe3b0f":"# Prediction Fucntion ( we can do the prediction without worrying about Hot enchoding)\ndef prediction(Locality,Furnishing,Status,Transaction,Type,Area_total,BHK,Bathroom):\n    Locality_index = np.where(x.columns== Locality)[0][0]\n    Furnishing_index = np.where(x.columns== Furnishing)[0][0]\n    Status_index = np.where(x.columns== Status)[0][0]\n    Transaction_index = np.where(x.columns== Transaction)[0][0]\n    Type_index = np.where(x.columns== Type)[0][0]\n\n    n = np.zeros(len(x.columns))\n    n[0]=Area_total\n    n[1]=BHK\n    n[2]=Bathroom\n    if Locality_index >=0:\n        n[Locality_index]=1\n    if Furnishing_index>=0:\n        n[Furnishing_index]=1\n    if Status_index >=0:\n        n[Status_index]=1\n    if Transaction_index >=0:\n        n[Transaction_index]=1\n    if Type_index >=0:\n        n[Type_index]=1\n    return model.predict([n])[0]\n    ","1957644b":"df3.iloc[2,:]","afb045ff":"Price_prediction = prediction('Alaknanda','Unfurnished','Ready_to_move','Resale','Apartment',1100,2,2)\nprint(\"The predicted price is\",Price_prediction ,\"lakh\")\n\n","62662c44":"## Data Exploring","fd36c842":"# Thank You\n\n    credits: {Project Made by: Kumar Shivam}","3d882267":"# Model Tranining","6cfa7809":"## Visulising Features of Dataset ","29c46b5b":"## Visulizing Data's Features\n","3aae6a1f":"## Predictions","4f222fe7":"# Model Building for price predictions","42879e69":"### Using One Hot Enchoding for handeling the 'text dtype' Columnes\n","c3f94159":"## Finding and Removing outliers by business understandings"}}