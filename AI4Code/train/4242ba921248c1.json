{"cell_type":{"c0bd45c1":"code","0794c619":"code","c644112e":"code","d6a88cb8":"code","58c70038":"code","8d5e18a2":"code","f6fc8957":"code","28b8c1ea":"code","6352009c":"code","9cb7f783":"code","482d22ea":"code","344957a6":"code","fde2e662":"code","f5b40905":"code","b1ff6e5c":"code","ba926db3":"code","f09d5cf3":"code","65e9be76":"code","c9d27f67":"code","b230a938":"code","0f6c715e":"code","03a502ee":"code","827de703":"code","0a09134d":"code","1c03b34b":"code","4536f883":"code","8a087c2b":"code","15288b83":"code","e16d14c9":"markdown","3c0bba17":"markdown","f8dd6f65":"markdown","c434a5a4":"markdown","b3a0bfdb":"markdown","1574b471":"markdown","30e66a6b":"markdown","dad9fa46":"markdown","7ff4dce5":"markdown","2b813c02":"markdown","9c1f1d7a":"markdown","17d76a9e":"markdown","04f9fb7e":"markdown","7f9876f4":"markdown","adc4c768":"markdown","84c12f5a":"markdown","016b6cc3":"markdown","3ad61837":"markdown","497cb1cb":"markdown"},"source":{"c0bd45c1":"#importing important libraries\nfrom sklearn.metrics import accuracy_score\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.model_selection import train_test_split\nfrom lightgbm import LGBMClassifier\nfrom xgboost import XGBClassifier\nfrom catboost import CatBoostClassifier\nimport optuna\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import StratifiedKFold, KFold\nfrom imblearn.over_sampling import SMOTE","0794c619":"# import data\ndf = pd.read_csv(\"..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv\")","c644112e":"col_name = ['age','creatinine_phosphokinase','ejection_fraction','platelets','serum_sodium','serum_creatinine']\ncol_label = ['Age','Creatinine Phosphokinase','Ejection Fraction','Platelets','Serum Sodium','Serum Creatinine']","d6a88cb8":"\n# Age plots\nvalue = col_name[0]\nX1 = col_label[0]\n\nplt.rcParams['figure.dpi'] = 600\nfig = plt.figure(figsize=(3.7,2), facecolor='#f6f5f5')\ngs = fig.add_gridspec(2, 2)\ngs.update(wspace=0.5, hspace=0.5)\n\nbackground_color = \"#f6f5f5\"\nsns.set_palette(['purple','#58FF0B'])\n\n\n#1\nax0 = fig.add_subplot(gs[0, 0])\n\n\nfor s in [\"right\", \"top\"]:\n    ax0.spines[s].set_visible(False)\n\nax0.set_facecolor(background_color)\n\n\nax0_sns = sns.histplot(data=df, x=value,ax=ax0,zorder=2,kde=False,hue=\"sex\",multiple=\"stack\", shrink=.8\n                      ,linewidth=0.3,alpha=0.5)\n\nax0_sns.set_xlabel('',fontsize=4, weight='bold')\nax0_sns.set_ylabel('',fontsize=4, weight='bold')\n\nax0_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\nax0_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n\n\nax0_sns.tick_params(labelsize=3, width=0.5, length=1.5)\n\nax0_sns.legend(['Male','Female'], ncol=2, facecolor='#D8D8D8', edgecolor=background_color,\n               fontsize=3, bbox_to_anchor=(1, 0.989), loc='upper right')\n\nax1 = fig.add_subplot(gs[0, 1])\n\n\nfor s in [\"right\", \"top\"]:\n    ax1.spines[s].set_visible(False)\n\nax1.set_facecolor(background_color)\n\n\nax1_sns = sns.kdeplot(x=df[value],ax=ax1,hue=df.sex,linewidth=0.3,fill=True,\n                      cbar='g',zorder=2,\n                      alpha=0.4,multiple='stack')\n\nax1_sns.set_xlabel('',fontsize=4, weight='bold')\nax1_sns.set_ylabel('',fontsize=4, weight='bold')\n\nax1_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\nax1_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n\n\nax1_sns.tick_params(labelsize=3, width=0.5, length=1.5)\n\nax1_sns.legend(['Male','Female'], ncol=2, facecolor='#D8D8D8', edgecolor=background_color,\n               fontsize=3, bbox_to_anchor=(1.07, 1.19), loc='upper right')\n\n#3\nax3 = fig.add_subplot(gs[1, 0])\n\n\nfor s in [\"right\", \"top\"]:\n    ax3.spines[s].set_visible(False)\n\nax3.set_facecolor(background_color)\n\n\nax3_sns = sns.histplot(data=df, x=value,ax=ax3,zorder=2,kde=False,\n                       hue=\"DEATH_EVENT\",multiple=\"stack\", shrink=.8\n                      ,linewidth=0.3,alpha=0.5,palette=['purple','#58FF0B'],bins=25)\n\nax3_sns.set_xlabel('',fontsize=4, weight='bold')\nax3_sns.set_ylabel('',fontsize=4, weight='bold')\n\nax3_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\nax3_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n\n\nax3_sns.tick_params(labelsize=3, width=0.5, length=1.5)\n\nax3_sns.legend(['Alive','Deceased'], ncol=2, facecolor='#D8D8D8',\n               edgecolor=background_color, fontsize=3, \n               bbox_to_anchor=(1.04, 1.19), loc='upper right')\n\n#4\nax4 = fig.add_subplot(gs[1, 1])\n\n\nfor s in [\"right\", \"top\"]:\n    ax4.spines[s].set_visible(False)\n\nax4.set_facecolor(background_color)\n\n\nax4_sns = sns.kdeplot( x=df[value],ax=ax4,hue=df.DEATH_EVENT,\n                      linewidth=0.3,fill=True,cbar='g',zorder=2,\n                      alpha=0.5,multiple='stack',palette=['purple','#58FF0B'])\n\nax4_sns.set_xlabel('',fontsize=4, weight='bold')\nax4_sns.set_ylabel('',fontsize=4, weight='bold')\n\nax4_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\nax4_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n\n\nax4_sns.tick_params(labelsize=3, width=0.5, length=1.5)\n\nax4_sns.legend(['Alive','Deceased'], ncol=2, facecolor='#D8D8D8', \n               edgecolor=background_color, fontsize=3, \n               bbox_to_anchor=(1.1, 1.19), loc='upper right')\n\nXstart, Xend = ax0.get_xlim()\nYstart, Yend = ax0.get_ylim()\n\nax0_sns.text(Xstart,Yend+20, f'{X1} Plot', fontsize=5, weight='bold',ha='left')\n#   ax0.text(Xstart,Yend+10,f'Mean: 60.83 | SD: 11.89',fontsize=3,ha='left')\nax0.get_xaxis().set_major_formatter(matplotlib.ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\nax1.get_xaxis().set_major_formatter(matplotlib.ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\nax3.get_xaxis().set_major_formatter(matplotlib.ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\nax4.get_xaxis().set_major_formatter(matplotlib.ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\n\nXstart, Xend = ax3.get_xlim()\nYstart, Yend = ax3.get_ylim()\n\nax3_sns.text(Xend+2,Ystart-30, f'{X1} Group', fontsize=3, weight='bold',ha='left')\n\nplt.show()","58c70038":"value = col_name[1]\nX1 = col_label[1]\nplt.rcParams['figure.dpi'] = 600\nfig = plt.figure(figsize=(3,2), facecolor='#f6f5f5')\ngs = fig.add_gridspec(2, 2)\ngs.update(wspace=0.5, hspace=0.5)\n\nbackground_color = \"#f6f5f5\"\nsns.set_palette(['purple','#58FF0B'])\n\n\n#1\nax0 = fig.add_subplot(gs[0, 0])\n\n\nfor s in [\"right\", \"top\"]:\n    ax0.spines[s].set_visible(False)\n\nax0.set_facecolor(background_color)\n\n\nax0_sns = sns.histplot(data=df, x=value,ax=ax0,zorder=2,kde=False,hue=\"sex\",multiple=\"stack\", shrink=.8\n                      ,linewidth=0.3,alpha=0.4,bins=25)\nax0_sns.set_xlabel('',fontsize=4, weight='bold')\nax0_sns.set_ylabel('',fontsize=4, weight='bold')\nax0_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\nax0_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\nax0_sns.tick_params(labelsize=3, width=0.5, length=1.5)\nax0_sns.legend(['Male','Female'], ncol=2, facecolor='#D8D8D8', edgecolor=background_color,\n               fontsize=3, bbox_to_anchor=(1, 1.19), loc='upper right')\n\n\n#2\n\nax1 = fig.add_subplot(gs[0, 1])\nfor s in [\"right\", \"top\"]:\n    ax1.spines[s].set_visible(False)\nax1.set_facecolor(background_color)\nax1_sns = sns.kdeplot( x=df[value],ax=ax1,hue=df.sex,linewidth=0.3,fill=True,\n                      cbar='g',zorder=2,alpha=0.4,multiple='stack')\nax1_sns.set_xlabel('',fontsize=4, weight='bold')\nax1_sns.set_ylabel('',fontsize=4, weight='bold')\nax1_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\nax1_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\nax1_sns.tick_params(labelsize=3, width=0.5, length=1.5)\nax1_sns.legend(['Male','Female'], ncol=2, facecolor='#D8D8D8', edgecolor=background_color,\n               fontsize=3, bbox_to_anchor=(1.07, 1.19), loc='upper right')\n\n\n#3\nax3 = fig.add_subplot(gs[1, 0])\nfor s in [\"right\", \"top\"]:\n    ax3.spines[s].set_visible(False)\nax3.set_facecolor(background_color)\nax3_sns = sns.histplot(data=df, x=value,ax=ax3,zorder=2,kde=False,hue=\"DEATH_EVENT\",multiple=\"stack\",\n                       shrink=.8,linewidth=0.3,alpha=0.4,palette=['purple','#58FF0B'],bins=25)\nax3_sns.set_xlabel('',fontsize=4, weight='bold')\nax3_sns.set_ylabel('',fontsize=4, weight='bold')\nax3_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\nax3_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\nax3_sns.tick_params(labelsize=3, width=0.5, length=1.5)\nax3_sns.legend(['Alive','Deceased'], ncol=2, facecolor='#D8D8D8', edgecolor=background_color,\n               fontsize=3, bbox_to_anchor=(1.04, 1.19), loc='upper right')\n\n\n#4\nax4 = fig.add_subplot(gs[1, 1])\nfor s in [\"right\", \"top\"]:\n    ax4.spines[s].set_visible(False)\nax4.set_facecolor(background_color)\nax4_sns = sns.kdeplot( x=df[value],ax=ax4,hue=df.DEATH_EVENT,linewidth=0.3,\n                      fill=True,cbar='g',zorder=2,alpha=0.4,multiple='stack',\n                      palette=['purple','#58FF0B'])\nax4_sns.set_xlabel('',fontsize=4, weight='bold')\nax4_sns.set_ylabel('',fontsize=4, weight='bold')\nax4_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\nax4_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\nax4_sns.tick_params(labelsize=3, width=0.5, length=1.5)\nax4_sns.legend(['Alive','Deceased'], ncol=2, facecolor='#D8D8D8',\n               edgecolor=background_color, fontsize=3, \n               bbox_to_anchor=(1.1, 1.19), loc='upper right')\nXstart, Xend = ax0.get_xlim()\nYstart, Yend = ax0.get_ylim()\nax0_sns.text(Xstart,Yend+50, f'{X1} Plot', fontsize=5, weight='bold',ha='left')\nax0.get_xaxis().set_major_formatter(matplotlib.ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\nax1.get_xaxis().set_major_formatter(matplotlib.ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\nax3.get_xaxis().set_major_formatter(matplotlib.ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\nax4.get_xaxis().set_major_formatter(matplotlib.ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\nXstart, Xend = ax3.get_xlim()\nYstart, Yend = ax3.get_ylim()\nax3_sns.text(Xend,Ystart-60, f'{X1} Group', fontsize=3, weight='bold',ha='left')\n\nplt.show()\n","8d5e18a2":"value = col_name[2]\nX1 = col_label[2]\nplt.rcParams['figure.dpi'] = 600\nfig = plt.figure(figsize=(3,2), facecolor='#f6f5f5')\ngs = fig.add_gridspec(2, 2)\ngs.update(wspace=0.5, hspace=0.5)\n\nbackground_color = \"#f6f5f5\"\nsns.set_palette(['purple','#58FF0B'])\n\n\n#1\nax0 = fig.add_subplot(gs[0, 0])\n\n\nfor s in [\"right\", \"top\"]:\n    ax0.spines[s].set_visible(False)\n\nax0.set_facecolor(background_color)\n\n\nax0_sns = sns.histplot(data=df, x=value,ax=ax0,zorder=2,kde=False,hue=\"sex\",multiple=\"stack\", shrink=.8\n                      ,linewidth=0.3,alpha=0.5,bins=25)\n\nax0_sns.set_xlabel('',fontsize=4, weight='bold')\nax0_sns.set_ylabel('',fontsize=4, weight='bold')\n\nax0_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\nax0_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n\n\nax0_sns.tick_params(labelsize=3, width=0.5, length=1.5)\n\nax0_sns.legend(['Male','Female'], ncol=2, facecolor='#D8D8D8', edgecolor=background_color,\n               fontsize=3, bbox_to_anchor=(1, 1.19), loc='upper right')\n\n\n#2\nax1 = fig.add_subplot(gs[0, 1])\n\n\nfor s in [\"right\", \"top\"]:\n    ax1.spines[s].set_visible(False)\n\nax1.set_facecolor(background_color)\n\n\nax1_sns = sns.kdeplot( x=df[value],ax=ax1,hue=df.sex,linewidth=0.3,fill=True,\n                      cbar='g',zorder=2,alpha=0.5,multiple='stack')\n\nax1_sns.set_xlabel('',fontsize=4, weight='bold')\nax1_sns.set_ylabel('',fontsize=4, weight='bold')\n\nax1_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\nax1_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n\n\nax1_sns.tick_params(labelsize=3, width=0.5, length=1.5)\n\nax1_sns.legend(['Male','Female'], ncol=2, facecolor='#D8D8D8', edgecolor=background_color,\n               fontsize=3, bbox_to_anchor=(1.07, 1.19), loc='upper right')\n\n#3\nax3 = fig.add_subplot(gs[1, 0])\n\n\nfor s in [\"right\", \"top\"]:\n    ax3.spines[s].set_visible(False)\n\nax3.set_facecolor(background_color)\n\n\nax3_sns = sns.histplot(data=df, x=value,ax=ax3,zorder=2,kde=False,hue=\"DEATH_EVENT\",multiple=\"stack\",\n                       shrink=.8,linewidth=0.3,alpha=0.5,palette=['purple','#58FF0B'],bins=25)\n\nax3_sns.set_xlabel('',fontsize=4, weight='bold')\nax3_sns.set_ylabel('',fontsize=4, weight='bold')\n\nax3_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\nax3_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n\n\nax3_sns.tick_params(labelsize=3, width=0.5, length=1.5)\n\nax3_sns.legend(['Alive','Deceased'], ncol=2, facecolor='#D8D8D8', edgecolor=background_color,\n               fontsize=3, bbox_to_anchor=(1.04, 1.19), loc='upper right')\n\n#4\nax4 = fig.add_subplot(gs[1, 1])\n\n\nfor s in [\"right\", \"top\"]:\n    ax4.spines[s].set_visible(False)\n\nax4.set_facecolor(background_color)\n\n\nax4_sns = sns.kdeplot( x=df[value],ax=ax4,hue=df.DEATH_EVENT,linewidth=0.3,\n                      fill=True,cbar='g',zorder=2,alpha=0.5,multiple='stack',\n                      palette=['purple','#58FF0B'])\n\nax4_sns.set_xlabel('',fontsize=4, weight='bold')\nax4_sns.set_ylabel('',fontsize=4, weight='bold')\n\nax4_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\nax4_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n\n\nax4_sns.tick_params(labelsize=3, width=0.5, length=1.5)\n\nax4_sns.legend(['Alive','Deceased'], ncol=2, facecolor='#D8D8D8',\n               edgecolor=background_color, fontsize=3, \n               bbox_to_anchor=(1.1, 1.19), loc='upper right')\n\nXstart, Xend = ax0.get_xlim()\nYstart, Yend = ax0.get_ylim()\n\nax0_sns.text(Xstart,Yend+50, f'{X1} Plot', fontsize=5, weight='bold',ha='left')\n#   ax0.text(Xstart,Yend+10,f'Mean: 60.83 | SD: 11.89',fontsize=3,ha='left')\nax0.get_xaxis().set_major_formatter(matplotlib.ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\nax1.get_xaxis().set_major_formatter(matplotlib.ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\nax3.get_xaxis().set_major_formatter(matplotlib.ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\nax4.get_xaxis().set_major_formatter(matplotlib.ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\n\nXstart, Xend = ax3.get_xlim()\nYstart, Yend = ax3.get_ylim()\n\nax3_sns.text(Xend,Ystart-60, f'{X1} Group', fontsize=3, weight='bold',ha='left')\n\nplt.show()\n","f6fc8957":"value = col_name[3]\nX1 = col_label[3]\nplt.rcParams['figure.dpi'] = 600\nfig = plt.figure(figsize=(3,2), facecolor='#f6f5f5')\ngs = fig.add_gridspec(2, 2)\ngs.update(wspace=0.5, hspace=0.5)\n\nbackground_color = \"#f6f5f5\"\nsns.set_palette(['purple','#58FF0B'])\n\n\n#1\nax0 = fig.add_subplot(gs[0, 0])\n\n\nfor s in [\"right\", \"top\"]:\n    ax0.spines[s].set_visible(False)\n\nax0.set_facecolor(background_color)\n\n\nax0_sns = sns.histplot(data=df, x=value,ax=ax0,zorder=2,kde=False,hue=\"sex\",multiple=\"stack\", shrink=.8\n                      ,linewidth=0.3,alpha=0.5,bins=25)\n\nax0_sns.set_xlabel('',fontsize=4, weight='bold')\nax0_sns.set_ylabel('',fontsize=4, weight='bold')\n\nax0_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\nax0_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n\n\nax0_sns.tick_params(labelsize=3, width=0.5, length=1.5)\n\nax0_sns.legend(['Male','Female'], ncol=2, facecolor='#D8D8D8', edgecolor=background_color,\n               fontsize=3, bbox_to_anchor=(1, 1.19), loc='upper right')\n\n\n#2\nax1 = fig.add_subplot(gs[0, 1])\n\n\nfor s in [\"right\", \"top\"]:\n    ax1.spines[s].set_visible(False)\n\nax1.set_facecolor(background_color)\n\n\nax1_sns = sns.kdeplot( x=df[value],ax=ax1,hue=df.sex,linewidth=0.3,fill=True,\n                      cbar='g',zorder=2,alpha=0.5,multiple='stack')\n\nax1_sns.set_xlabel('',fontsize=4, weight='bold')\nax1_sns.set_ylabel('',fontsize=4, weight='bold')\n\nax1_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\nax1_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n\n\nax1_sns.tick_params(labelsize=3, width=0.5, length=1.5)\n\nax1_sns.legend(['Male','Female'], ncol=2, facecolor='#D8D8D8', edgecolor=background_color,\n               fontsize=3, bbox_to_anchor=(1.07, 1.19), loc='upper right')\n\n#3\nax3 = fig.add_subplot(gs[1, 0])\n\n\nfor s in [\"right\", \"top\"]:\n    ax3.spines[s].set_visible(False)\n\nax3.set_facecolor(background_color)\n\n\nax3_sns = sns.histplot(data=df, x=value,ax=ax3,zorder=2,kde=False,hue=\"DEATH_EVENT\",multiple=\"stack\",\n                       shrink=.8,linewidth=0.3,alpha=0.5,palette=['purple','#58FF0B'],bins=25)\n\nax3_sns.set_xlabel('',fontsize=4, weight='bold')\nax3_sns.set_ylabel('',fontsize=4, weight='bold')\n\nax3_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\nax3_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n\n\nax3_sns.tick_params(labelsize=3, width=0.5, length=1.5)\n\nax3_sns.legend(['Alive','Deceased'], ncol=2, facecolor='#D8D8D8', edgecolor=background_color,\n               fontsize=3, bbox_to_anchor=(1.04, 1.19), loc='upper right')\n\n#4\nax4 = fig.add_subplot(gs[1, 1])\n\n\nfor s in [\"right\", \"top\"]:\n    ax4.spines[s].set_visible(False)\n\nax4.set_facecolor(background_color)\n\n\nax4_sns = sns.kdeplot( x=df[value],ax=ax4,hue=df.DEATH_EVENT,linewidth=0.3,\n                      fill=True,cbar='g',zorder=2,alpha=0.5,multiple='stack',\n                      palette=['purple','#58FF0B'])\n\nax4_sns.set_xlabel('',fontsize=4, weight='bold')\nax4_sns.set_ylabel('',fontsize=4, weight='bold')\n\nax4_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\nax4_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n\n\nax4_sns.tick_params(labelsize=3, width=0.5, length=1.5)\n\nax4_sns.legend(['Alive','Deceased'], ncol=2, facecolor='#D8D8D8',\n               edgecolor=background_color, fontsize=3, \n               bbox_to_anchor=(1.1, 1.19), loc='upper right')\n\nXstart, Xend = ax0.get_xlim()\nYstart, Yend = ax0.get_ylim()\n\nax0_sns.text(Xstart,Yend+50, f'{X1} Plot', fontsize=5, weight='bold',ha='left')\n#   ax0.text(Xstart,Yend+10,f'Mean: 60.83 | SD: 11.89',fontsize=3,ha='left')\nax0.get_xaxis().set_major_formatter(matplotlib.ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\nax1.get_xaxis().set_major_formatter(matplotlib.ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\nax3.get_xaxis().set_major_formatter(matplotlib.ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\nax4.get_xaxis().set_major_formatter(matplotlib.ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\n\nXstart, Xend = ax3.get_xlim()\nYstart, Yend = ax3.get_ylim()\n\nax3_sns.text(Xend,Ystart-60, f'{X1} Group', fontsize=3, weight='bold',ha='left')\n\nplt.show()\n","28b8c1ea":"value = col_name[4]\nX1 = col_label[4]\nplt.rcParams['figure.dpi'] = 600\nfig = plt.figure(figsize=(3,2), facecolor='#f6f5f5')\ngs = fig.add_gridspec(2, 2)\ngs.update(wspace=0.5, hspace=0.5)\n\nbackground_color = \"#f6f5f5\"\nsns.set_palette(['purple','#58FF0B'])\n\n\n#1\nax0 = fig.add_subplot(gs[0, 0])\n\n\nfor s in [\"right\", \"top\"]:\n    ax0.spines[s].set_visible(False)\n\nax0.set_facecolor(background_color)\n\n\nax0_sns = sns.histplot(data=df, x=value,ax=ax0,zorder=2,kde=False,hue=\"sex\",multiple=\"stack\", shrink=.8\n                      ,linewidth=0.3,alpha=0.5,bins=25)\n\nax0_sns.set_xlabel('',fontsize=4, weight='bold')\nax0_sns.set_ylabel('',fontsize=4, weight='bold')\n\nax0_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\nax0_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n\n\nax0_sns.tick_params(labelsize=3, width=0.5, length=1.5)\n\nax0_sns.legend(['Male','Female'], ncol=2, facecolor='#D8D8D8', edgecolor=background_color,\n               fontsize=3, bbox_to_anchor=(1, 1.19), loc='upper right')\n\n\n#2\nax1 = fig.add_subplot(gs[0, 1])\n\n\nfor s in [\"right\", \"top\"]:\n    ax1.spines[s].set_visible(False)\n\nax1.set_facecolor(background_color)\n\n\nax1_sns = sns.kdeplot( x=df[value],ax=ax1,hue=df.sex,linewidth=0.3,fill=True,\n                      cbar='g',zorder=2,alpha=0.5,multiple='stack')\n\nax1_sns.set_xlabel('',fontsize=4, weight='bold')\nax1_sns.set_ylabel('',fontsize=4, weight='bold')\n\nax1_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\nax1_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n\n\nax1_sns.tick_params(labelsize=3, width=0.5, length=1.5)\n\nax1_sns.legend(['Male','Female'], ncol=2, facecolor='#D8D8D8', edgecolor=background_color,\n               fontsize=3, bbox_to_anchor=(1.07, 1.19), loc='upper right')\n\n#3\nax3 = fig.add_subplot(gs[1, 0])\n\n\nfor s in [\"right\", \"top\"]:\n    ax3.spines[s].set_visible(False)\n\nax3.set_facecolor(background_color)\n\n\nax3_sns = sns.histplot(data=df, x=value,ax=ax3,zorder=2,kde=False,hue=\"DEATH_EVENT\",multiple=\"stack\",\n                       shrink=.8,linewidth=0.3,alpha=0.5,palette=['purple','#58FF0B'],bins=25)\n\nax3_sns.set_xlabel('',fontsize=4, weight='bold')\nax3_sns.set_ylabel('',fontsize=4, weight='bold')\n\nax3_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\nax3_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n\n\nax3_sns.tick_params(labelsize=3, width=0.5, length=1.5)\n\nax3_sns.legend(['Alive','Deceased'], ncol=2, facecolor='#D8D8D8', edgecolor=background_color,\n               fontsize=3, bbox_to_anchor=(1.04, 1.19), loc='upper right')\n\n#4\nax4 = fig.add_subplot(gs[1, 1])\n\n\nfor s in [\"right\", \"top\"]:\n    ax4.spines[s].set_visible(False)\n\nax4.set_facecolor(background_color)\n\n\nax4_sns = sns.kdeplot( x=df[value],ax=ax4,hue=df.DEATH_EVENT,linewidth=0.3,\n                      fill=True,cbar='g',zorder=2,alpha=0.5,multiple='stack',\n                      palette=['purple','#58FF0B'])\n\nax4_sns.set_xlabel('',fontsize=4, weight='bold')\nax4_sns.set_ylabel('',fontsize=4, weight='bold')\n\nax4_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\nax4_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n\n\nax4_sns.tick_params(labelsize=3, width=0.5, length=1.5)\n\nax4_sns.legend(['Alive','Deceased'], ncol=2, facecolor='#D8D8D8',\n               edgecolor=background_color, fontsize=3, \n               bbox_to_anchor=(1.1, 1.19), loc='upper right')\n\nXstart, Xend = ax0.get_xlim()\nYstart, Yend = ax0.get_ylim()\n\nax0_sns.text(Xstart,Yend+50, f'{X1} Plot', fontsize=5, weight='bold',ha='left')\n#   ax0.text(Xstart,Yend+10,f'Mean: 60.83 | SD: 11.89',fontsize=3,ha='left')\nax0.get_xaxis().set_major_formatter(matplotlib.ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\nax1.get_xaxis().set_major_formatter(matplotlib.ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\nax3.get_xaxis().set_major_formatter(matplotlib.ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\nax4.get_xaxis().set_major_formatter(matplotlib.ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\n\nXstart, Xend = ax3.get_xlim()\nYstart, Yend = ax3.get_ylim()\n\nax3_sns.text(Xend,Ystart-60, f'{X1} Group', fontsize=3, weight='bold',ha='left')\n\nplt.show()\n","6352009c":"value = col_name[5]\nX1 = col_label[5]\nplt.rcParams['figure.dpi'] = 600\nfig = plt.figure(figsize=(3,2), facecolor='#f6f5f5')\ngs = fig.add_gridspec(2, 2)\ngs.update(wspace=0.5, hspace=0.5)\n\nbackground_color = \"#f6f5f5\"\nsns.set_palette(['purple','#58FF0B'])\n\n\n#1\nax0 = fig.add_subplot(gs[0, 0])\n\n\nfor s in [\"right\", \"top\"]:\n    ax0.spines[s].set_visible(False)\n\nax0.set_facecolor(background_color)\n\n\nax0_sns = sns.histplot(data=df, x=value,ax=ax0,zorder=2,kde=False,hue=\"sex\",multiple=\"stack\", shrink=.8\n                      ,linewidth=0.3,alpha=0.5,bins=25)\n\nax0_sns.set_xlabel('',fontsize=4, weight='bold')\nax0_sns.set_ylabel('',fontsize=4, weight='bold')\n\nax0_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\nax0_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n\n\nax0_sns.tick_params(labelsize=3, width=0.5, length=1.5)\n\nax0_sns.legend(['Male','Female'], ncol=2, facecolor='#D8D8D8', edgecolor=background_color,\n               fontsize=3, bbox_to_anchor=(1, 1.19), loc='upper right')\n\n\n#2\nax1 = fig.add_subplot(gs[0, 1])\n\n\nfor s in [\"right\", \"top\"]:\n    ax1.spines[s].set_visible(False)\n\nax1.set_facecolor(background_color)\n\n\nax1_sns = sns.kdeplot( x=df[value],ax=ax1,hue=df.sex,linewidth=0.3,fill=True,\n                      cbar='g',zorder=2,alpha=0.5,multiple='stack')\n\nax1_sns.set_xlabel('',fontsize=4, weight='bold')\nax1_sns.set_ylabel('',fontsize=4, weight='bold')\n\nax1_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\nax1_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n\n\nax1_sns.tick_params(labelsize=3, width=0.5, length=1.5)\n\nax1_sns.legend(['Male','Female'], ncol=2, facecolor='#D8D8D8', edgecolor=background_color,\n               fontsize=3, bbox_to_anchor=(1.07, 1.19), loc='upper right')\n\n#3\nax3 = fig.add_subplot(gs[1, 0])\n\n\nfor s in [\"right\", \"top\"]:\n    ax3.spines[s].set_visible(False)\n\nax3.set_facecolor(background_color)\n\n\nax3_sns = sns.histplot(data=df, x=value,ax=ax3,zorder=2,kde=False,hue=\"DEATH_EVENT\",multiple=\"stack\",\n                       shrink=.8,linewidth=0.3,alpha=0.5,palette=['purple','#58FF0B'],bins=25)\n\nax3_sns.set_xlabel('',fontsize=4, weight='bold')\nax3_sns.set_ylabel('',fontsize=4, weight='bold')\n\nax3_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\nax3_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n\n\nax3_sns.tick_params(labelsize=3, width=0.5, length=1.5)\n\nax3_sns.legend(['Alive','Deceased'], ncol=2, facecolor='#D8D8D8', edgecolor=background_color,\n               fontsize=3, bbox_to_anchor=(1.04, 1.19), loc='upper right')\n\n#4\nax4 = fig.add_subplot(gs[1, 1])\n\n\nfor s in [\"right\", \"top\"]:\n    ax4.spines[s].set_visible(False)\n\nax4.set_facecolor(background_color)\n\n\nax4_sns = sns.kdeplot( x=df[value],ax=ax4,hue=df.DEATH_EVENT,linewidth=0.3,\n                      fill=True,cbar='g',zorder=2,alpha=0.5,multiple='stack',\n                      palette=['purple','#58FF0B'])\n\nax4_sns.set_xlabel('',fontsize=4, weight='bold')\nax4_sns.set_ylabel('',fontsize=4, weight='bold')\n\nax4_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\nax4_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n\n\nax4_sns.tick_params(labelsize=3, width=0.5, length=1.5)\n\nax4_sns.legend(['Alive','Deceased'], ncol=2, facecolor='#D8D8D8',\n               edgecolor=background_color, fontsize=3, \n               bbox_to_anchor=(1.1, 1.19), loc='upper right')\n\nXstart, Xend = ax0.get_xlim()\nYstart, Yend = ax0.get_ylim()\n\nax0_sns.text(Xstart,Yend+50, f'{X1} Plot', fontsize=5, weight='bold',ha='left')\n#   ax0.text(Xstart,Yend+10,f'Mean: 60.83 | SD: 11.89',fontsize=3,ha='left')\nax0.get_xaxis().set_major_formatter(matplotlib.ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\nax1.get_xaxis().set_major_formatter(matplotlib.ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\nax3.get_xaxis().set_major_formatter(matplotlib.ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\nax4.get_xaxis().set_major_formatter(matplotlib.ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\n\nXstart, Xend = ax3.get_xlim()\nYstart, Yend = ax3.get_ylim()\n\nax3_sns.text(Xend,Ystart-60, f'{X1} Group', fontsize=3, weight='bold',ha='left')\n\nplt.show()\n","9cb7f783":"# Categorical columns\ndeaths = df.DEATH_EVENT.value_counts()\nplt.figure(figsize = (6,4))\ndeaths.plot.pie(autopct = '%.2f%%', colors = ['powderblue', 'slateblue'], labels=[\"Alive\", \"Dead\"])\nplt.title(\"Dead or Alive Distribution\", pad = 2,\n          fontdict = {'size' : 12, 'color' : 'black', 'weight' : 'bold'})\nplt.ylabel(\"Deaths\")\nplt.show()","482d22ea":"plt.figure(figsize=(6, 6))\ngender_diab = df.groupby('DEATH_EVENT')['sex'].value_counts()\nmyexplode = [0.1, 0, 0.2, 0]\nplt.pie(gender_diab, autopct='%.2f%%', labels=['Alive-Male', 'Alive-Female',\n                                              'Dead-Male', 'Dead-Female'],\n        explode=myexplode, shadow=False, colors=['y', 'tan', 'c', 'hotpink'])\nplt.title('Death Cases Gender Percentage')\nplt.legend(gender_diab, loc='upper left', labels=['Alive-Male', 'Alive-Female',\n                                              'Dead-Male', 'Dead-Female'],\n          bbox_to_anchor=(1, 1.114))\nplt.show()","344957a6":"plt.figure(figsize=(6, 6))\ndeath_anae = df.groupby('DEATH_EVENT')['anaemia'].value_counts()\nmyexplode = [0.1, 0, 0.2, 0]\nplt.pie(death_anae, autopct='%.2f%%', labels=['Alive-non anaemic', 'Alive-anaemic',\n                                              'Dead-non anaemic', 'Dead-anaemic'],\n        explode=myexplode, shadow=False, colors=['hotpink', 'tan', 'c', 'y'])\nplt.title('Anaemic Patients In Death Cases')\nplt.legend(death_anae, loc='upper left', labels = ['Alive-non anaemic', 'Alive-anaemic',\n                                              'Dead-non anaemic', 'Dead-anaemic'],\n          bbox_to_anchor=(1, 1.114))\nplt.show()\n\n","fde2e662":"plt.figure(figsize=(6, 6))\ndeath_diab = df.groupby('DEATH_EVENT')['diabetes'].value_counts()\nmyexplode = [0.1, 0, 0.2, 0]\nplt.pie(death_diab, autopct='%.2f%%', labels=['Alive-non diabetic', 'Alive-diabetic',\n                                              'Dead-non diabetic', 'Dead-diabetic'],\n        explode=myexplode, shadow=False, colors=['hotpink', 'tan', 'c', 'y'])\nplt.title('Diabetic Patients In Death Cases')\nplt.legend(death_diab, loc='upper left', labels=['Alive-non diabetic', 'Alive-diabetic',\n                                              'Dead-non diabetic', 'Dead-diabetic'],\n          bbox_to_anchor=(1, 1.114))\nplt.show()","f5b40905":"# Categprical columns\ncat_col = ['anaemia','diabetes','high_blood_pressure','smoking','time']\ncat_name = ['Anaemia','Diabetes','High BP','Smoking','Time']\n\nfor i in range(len(cat_name)):\n\n    X = cat_col[i]\n    X1 = cat_name[i]\n\n    plt.rcParams['figure.dpi'] = 600\n\n    fig = plt.figure(figsize=(3,1), facecolor='#f6f5f5')\n    gs = fig.add_gridspec(1, 2)\n    gs.update(wspace=0.5, hspace=0.5)\n\n    background_color = \"#f6f5f5\"\n    sns.set_palette(['hotpink', 'powderblue'])\n\n\n    ax3 = fig.add_subplot(gs[0, 0])\n\n\n    for s in [\"right\", \"top\"]:\n        ax3.spines[s].set_visible(False)\n\n    ax3.set_facecolor(background_color)\n\n\n    ax3_sns = sns.histplot(data=df, x=X,ax=ax3,zorder=2,kde=False,hue=\"DEATH_EVENT\",multiple=\"stack\", shrink=.8,\n                          linewidth=0.3,alpha=0.5,palette=['hotpink', 'powderblue'])\n\n    ax3_sns.set_xlabel(X1,fontsize=4, weight='bold')\n    ax3_sns.set_ylabel('',fontsize=4, weight='bold')\n\n    ax3_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\n    ax3_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n\n    ax3_sns.tick_params(labelsize=3, width=0.5, length=1.5)\n\n    ax3_sns.legend(['Alive','Deceased'], ncol=2, facecolor='#D8D8D8',\n                   edgecolor=background_color, fontsize=3, bbox_to_anchor=(1, 1.1), loc='upper right')\n\n    ax0 = fig.add_subplot(gs[0, 1])\n    for s in [\"right\", \"top\"]:\n        ax0.spines[s].set_visible(False)\n\n    ax0.set_facecolor(background_color)\n\n\n    ax0_sns = sns.histplot(data=df, x=X,ax=ax0,zorder=2,kde=False,hue=\"sex\",multiple=\"stack\", shrink=.8\n                          ,linewidth=0.3,alpha=0.5)\n\n    ax0_sns.set_xlabel(X1,fontsize=4, weight='bold')\n    ax0_sns.set_ylabel('',fontsize=4, weight='bold')\n\n    ax0_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\n    ax0_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n\n\n    ax0_sns.tick_params(labelsize=3, width=0.5, length=1.5)\n\n    ax0_sns.legend(['Male','Female'], ncol=2, facecolor='#D8D8D8', \n                   edgecolor=background_color, fontsize=3, bbox_to_anchor=(1, 1.114), loc='upper right')\n\n    Xstart, Xend = ax0.get_xlim()\n    Ystart, Yend = ax0.get_ylim()\n\n    if i != 4:\n        ax3_sns.text(Xstart, Yend+43, f'{X1} Plot', fontsize=6, weight='bold',ha='left')\n    else:\n        ax3_sns.text(Xstart, Yend+15, f'{X1} Plot', fontsize=6, weight='bold',ha='left')\n\n    plt.show()","b1ff6e5c":"#heatmap of the dataset\nplt.rcParams['figure.dpi'] = 600\nbackground_color = \"#f6f5f5\"\n\nfig = plt.figure(figsize=(18, 8), facecolor=background_color)\ngs = fig.add_gridspec(1, 1)\nax0 = fig.add_subplot(gs[0, 0])\n\ncolors = [\"purple\", \"lightblue\",\"#ff355d\"]\ncolormap = matplotlib.colors.LinearSegmentedColormap.from_list(\"\", colors)\n\nax0.set_facecolor(background_color)\nax0.text(0, -1.1, 'Features Correlation on Heart Dataset', fontsize=15, fontweight='bold',\n         bbox=dict(facecolor='none', edgecolor='black', boxstyle='round', linewidth=1.5))\nax0.text(0, -0.4, 'Scale between -1 to 1', fontsize=9, fontweight='light')\n\nax0_sns = sns.heatmap(df.corr(), ax=ax0, vmin=-1, vmax=1, annot=True, square=True, \n            cbar_kws={\"orientation\": \"horizontal\"}, cbar=False, cmap=colormap, fmt='.1f')\n\nXstart, Xend = ax0.get_xlim()\nYstart, Yend = ax0.get_ylim()\nax0_sns.text(Xend+2, Ystart, f'{X1} Plot', fontsize=6, weight='bold',ha='left',alpha=0)\n\n\nplt.show()","ba926db3":"\n# import pycaret\n# from pycaret.classification import *\n# env = setup(silent=True,data=df,target='DEATH_EVENT',session_id=69,\n#             normalize=True,use_gpu=True,fix_imbalance=True, \n#            imputation_type = \"iterative\", remove_outliers=True)","f09d5cf3":"# models = compare_models(n_select=3)","65e9be76":"#  Hyperparameter tuning\ny = df.DEATH_EVENT\nX = df.drop('DEATH_EVENT',axis=1,inplace=False)\n\nsm = SMOTE(random_state=0) #balancing target count\nX, y = sm.fit_resample(X, y)","c9d27f67":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error as mse\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\n\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2,random_state=0)\n","b230a938":"accuracy_list=[]\n# logistic regression\n\nlog_reg = LogisticRegression()\nlog_reg.fit(X_train, y_train)\nlog_reg_pred = log_reg.predict(X_test)\nlog_reg_acc = accuracy_score(y_test, log_reg_pred)\naccuracy_list.append(100*log_reg_acc)\n\nprint(\"Accuracy of Logistic Regression is : \", \"{:.2f}%\".format(100* log_reg_acc))","0f6c715e":"# K Neighbors Classifier\n\nkn_clf = KNeighborsClassifier(n_neighbors=6)\nkn_clf.fit(X_train, y_train)\nkn_pred = kn_clf.predict(X_test)\nkn_acc = accuracy_score(y_test, kn_pred)\naccuracy_list.append(100*kn_acc)\n\nprint(\"Accuracy of K Neighbors Classifier is : \", \"{:.2f}%\".format(100* kn_acc))\n","03a502ee":"# Decision Tree Classifier\n\ndt_clf = DecisionTreeClassifier(max_leaf_nodes=10, random_state=0, criterion='entropy')\ndt_clf.fit(X_train, y_train)\ndt_pred = dt_clf.predict(X_test)\ndt_acc = accuracy_score(y_test, dt_pred)\naccuracy_list.append(100*dt_acc)\n\nprint(\"Accuracy of Decision Tree Classifier is : \", \"{:.2f}%\".format(100* dt_acc))\n\n","827de703":"# RandomForestClassifier\n\nr_clf = RandomForestClassifier(max_features=0.5, max_depth=15, random_state=1)\nr_clf.fit(X_train, y_train)\nr_pred = r_clf.predict(X_test)\nr_acc = accuracy_score(y_test, r_pred)\naccuracy_list.append(100*r_acc)\n\nprint(\"Accuracy of Decision Tree Classifier is : \", \"{:.2f}%\".format(100* r_acc))","0a09134d":"# GradientBoostingClassifier\n\ngradientboost_clf = GradientBoostingClassifier(max_depth=2, random_state=1)\ngradientboost_clf.fit(X_train,y_train)\ngradientboost_pred = gradientboost_clf.predict(X_test)\ngradientboost_acc = accuracy_score(y_test, gradientboost_pred)\naccuracy_list.append(100*gradientboost_acc)\n\nprint( \"Accuracy of Gradient Boosting is : \", \"{:.2f}%\".format(100* gradientboost_acc))","1c03b34b":"# CatBoostClassifier\n\ncat_clf = CatBoostClassifier(silent=True)\ncat_clf.fit(X_train,y_train)\ncat_pred = cat_clf.predict(X_test)\ncat_acc = accuracy_score(y_test, cat_pred)\naccuracy_list.append(100*cat_acc)","4536f883":"print( \"Accuracy of Gradient Boosting is : \", \"{:.2f}%\".format(100* cat_acc))","8a087c2b":"model_list = ['Logistic Regression', 'KNearestNeighbours', 'DecisionTree', 'RandomForest',\n              'GradientBooster', 'CatBoostClassifier']","15288b83":"plt.rcParams['figure.figsize']=20,8\nsns.set_style('darkgrid')\nax = sns.barplot(x=model_list, y=accuracy_list, palette = \"husl\", saturation =2.0)\nplt.xlabel('Classifier Models', fontsize = 20)\nplt.ylabel('% of Accuracy', fontsize = 20)\nplt.title('Accuracy of different Classifier Models', fontsize = 20, pad=4)\nplt.xticks(fontsize = 14, horizontalalignment = 'center')\nplt.yticks(fontsize = 14)\nfor i in ax.patches:\n    width, height = i.get_width(), i.get_height()\n    x, y = i.get_xy() \n    ax.annotate(f'{round(height,2)}%', (x + width\/2, y + height*1.02), ha='center', fontsize = 'x-large')\nplt.show()","e16d14c9":"From the Accuracy plot, we can see that The best models are Categorical boost classifier and Random Forest Classifier. Their accuracy is same(94%). From automatic model selection, we know that Random forest model was also select as best model when looking at precision, F1 score and Catboost was selected in terms of higest AUC score.","3c0bba17":"The Ejection faction distribution is not normal as compared to gender and death cases, which means that there are some irregular observations in this column. However, overall the deaths are more recorded than alive cases, as is the case with male and female. The males ratio is much higher.","f8dd6f65":"The serum sodium variable plot shows that the 0-120 serum sodium level are much low and most of these cases, the patient survived. On the other hand, as Serum Sodium level increase, the deaths increase too.","c434a5a4":"The serum Creatine plots are mostly concentrated on 2-4 range. The death cases are much higher on 0-2 serum Creatine level, and most of those are Males, as can be seen in first plot.","b3a0bfdb":"# EDA: Exploratory Data Analysis:\n\nThe data includes both numerical and categorical columns. Age, creatinine_phosphokinase, ejection_fraction, platelets, serum_sodium, serum_creatinine columns can be visulized with density plot and histogram.","1574b471":"Diabetic is considered an important factor in heart failure. However we can see that only 13.38% diabetic patients died, as compared to 18.73% non-diabetic patients.","30e66a6b":"The confusion matrix shows that Death is correlated with time, serum sodium, ejection fraction, age, smoking and serum creatinine. However, only time relation is strong, as compared to others(-0.5).","dad9fa46":"The first and second plot looks at Age group with gender ratio. The plot shows that males numbers are much higher than female one, which can also be seen in density plot. Moreover, looking at Alive or density plot, we can see that The male density is much higher than female, that means that male survival rate is high. But in total the Deceased cases are much higher than alive cases. Which can also be seen in density plot, the density of deceased is much higer than alive density.","7ff4dce5":"# Exploratory Analysis of Data and Applying Machine Learning Algorithms\n\nThe data analysis includes following,\n\n1. Exploratory Data Analysis\n2. Different Classification Models","2b813c02":"# Modeling\n\nWe are using pycaret library to do modelling. The package is useful if we have following characteristics in data:\n\n- outliers\n- categorical variable\n- Data normalization needed\n- class imbalance\n\nThis library can automatically handle all these issue, so it's an efficient library. However in the next section, we have created models without normalization or deleting outliers from data.","9c1f1d7a":"# Manual Modeling:\n\nThe below code creates X and y variable and then SMOTE resampling method is applied to balance the classes. \nThe benifit of using SMOTE is that it can create synthesized data from existing examples. That's why it is referred as \"Synthetic Minority Oversampling Technique\", or SMOTE for short.\nAfter that we have applied logistic regression, K-Neighbors Classifier, Decision Tree Classifer, Random Forest, Gradient boost and Catboost Classifer. ","17d76a9e":"The green sign means these options will be used in modeling.","04f9fb7e":"In our dataset, the deaths ratio is much smaller than alive.","7f9876f4":"The first and second plot looks at creatinine phosphokinase with respect to gender ratio. Most of patients creatinine is in range of 0-2000. However female ratio seems to be higher than mals. On the other hand if we look at Death ratio, it can be seen that deaths are much higher, as compared to survival cases.","adc4c768":"The Palettes density plot distribution is normal, which means that observations are consistent. The deaths are more recorded than alive cases, as is the case with male and female. The males ratio is much higher.","84c12f5a":"It can be seen that anaemic patients survival rate is much higher than death. So anamia is not the big cause of death.","016b6cc3":"The time plot shows that as time progress, the survival rate decreases. On the other hand, the female survival rate increases with time. ","3ad61837":"The compound plot shows gender based survival rate of patients. It can be seen that Male survival rate is much higer than female(44% compared to 23%). Same is true for Death cases. The reason can be that male population cases are much higher than female cases.","497cb1cb":"The classification table shows that the in terms of accuracy, the best model is Ada Boost Classifier. However, if we consider AUC metric, then the CatBoost classifier performance is best. Then Recall shows that Linear Discriminant Analysis and Ridge Classifier are performing better with same metric(78%). In terms of Precision, F1 score, Kappa and MCC, the Random forest classifier performance is much better than other classifiers."}}