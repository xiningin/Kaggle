{"cell_type":{"01dd9cb5":"code","aa529a99":"code","5ca03ffd":"code","8b95e192":"code","f7a38be1":"code","5926d6c0":"code","96c5b86c":"code","18e15415":"code","e66e34c5":"code","6584c5fd":"code","ec8139a1":"code","5fd7e44e":"code","23797565":"code","17efada7":"markdown","16ed0586":"markdown","fa957b81":"markdown","2a2aef14":"markdown","5b1d9b4b":"markdown","ef2e0a51":"markdown","e9507bc4":"markdown","2076e166":"markdown"},"source":{"01dd9cb5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport re\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport warnings\nwarnings.filterwarnings('ignore')\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aa529a99":"data = pd.read_csv('..\/input\/fifa19\/data.csv')\ndata.head()","5ca03ffd":"data.drop(columns='Unnamed: 0' ,inplace=True)\ndata.head()","8b95e192":"data.columns","f7a38be1":"df = data[['Name','Nationality','Club','Wage']]\ndf.head()","5926d6c0":"df.shape","96c5b86c":"df.drop_duplicates(inplace = True)\ndf.dropna(inplace = True)","18e15415":"for i in range(len(df)):\n    df.iloc[i]['Wage'] = df.iloc[i]['Wage'][1:-1]\ndf['Wage'] = df['Wage'].replace('',0)","e66e34c5":"df.reset_index(inplace=True)","6584c5fd":"df.drop(columns='index' , inplace = True)","ec8139a1":"count = 0\ni = 0\nfor item in df.values :\n    if 100 < int(item[-1]) < 500:\n        count += 1\n        print(item[0])\n    else : \n        df.drop(index= i,inplace = True)\n    i += 1\nprint('The Number of Players who get payed between 100K and 500K Euro is',count)","5fd7e44e":"df.sort_values('Wage',ascending=False)","23797565":"plt.figure(figsize = (16,8))\nplt.title('Most paied players by nationality')\nsns.set_style('darkgrid')\n#plt.subplot(1,1,1)\nsns.countplot(df['Nationality'])\nplt.xticks(rotation = 60)\nplt.show()\nplt.figure(figsize = (16,8))\nplt.title('Most paied Players by Club')\nsns.countplot(df['Club'])\nplt.xticks(rotation = 90)\nplt.show()","17efada7":"# First lets load data with Pandas","16ed0586":"this is where we check Wages that they should be between 100k and 500k","fa957b81":"In this case we just need to take Name and Wage but i take 2 more and i will show you later why","2a2aef14":"Well the Wage col is string type but for comparing wages we neeed to take them into numeric so i wrote this block of code that it removes the 'euro sign' at first then 'k' in the end of the word","5b1d9b4b":"Lets check what are our cols in dataset","ef2e0a51":"Lets sort them to find who payed most","e9507bc4":"lets drop duplicates and nans in dataset","2076e166":"# Now we drop first column"}}