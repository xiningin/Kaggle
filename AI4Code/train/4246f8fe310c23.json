{"cell_type":{"bfaf73a4":"code","b7d8269a":"code","6fb439b7":"code","4c8e3036":"code","05832ff0":"code","93f7234c":"code","b58c3689":"code","16c4d378":"code","4d9430bd":"code","c5725770":"code","becb6415":"code","87deb10d":"code","8c5f4991":"code","1a313414":"code","474a9e58":"code","80cd6209":"code","cd0b32f5":"code","48ca56f3":"code","4160dbb7":"code","4b8eb70e":"markdown","dcd1d91e":"markdown","90fc8214":"markdown","841536bd":"markdown","866a98c6":"markdown","79c54024":"markdown","160396c7":"markdown","d337b2f3":"markdown","c115448b":"markdown","a2cc3cc2":"markdown","ed2e7296":"markdown","33865b2e":"markdown","6dd1148e":"markdown","e2dd6726":"markdown"},"source":{"bfaf73a4":"#importing required dependency\n\nimport os\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib.image import imread\nfrom PIL import Image\n%matplotlib inline\n\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.express as px\nimport plotly.tools as tls\nimport warnings\nfrom collections import Counter\nimport squarify\nfrom scipy.stats import skew, boxcox, norm, probplot\n\n\nwarnings.filterwarnings('ignore')","b7d8269a":"working_dir= \"..\/input\/new-york-city-airbnb-open-data\/\"\n\n#load the data in pandas dataframe\n\ndf= pd.read_csv(working_dir+ \"AB_NYC_2019.csv\")\ndf.head()","6fb439b7":"rows = df.shape[0]\ncolumns = df.shape[1]\nprint(\"The train dataset contains {0} rows and {1} columns\".format(rows, columns))\n\nCounter(df.dtypes.values)","4c8e3036":"df.info()","05832ff0":"df_info= pd.DataFrame({\"Dtype\": df.dtypes, \"Unique\": df.nunique(), \"Missing%\": (df.isnull().sum()\/df.shape[0])*100})\ndf_info","93f7234c":"from scipy import stats\n\nsns.distplot(df['price'] , fit=norm);\n\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(df['price'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n\n#Now plot the distribution\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('Price distribution')\n\n#Get also the QQ-plot\nfig = plt.figure()\nres = stats.probplot(df['price'], plot=plt)\nplt.show()","b58c3689":"#We use the numpy fuction log1p which  applies log(1+x) to all elements of the column\n\nsns.distplot(np.log1p(df[\"price\"]) , fit=norm);\n\n(mu, sigma) = norm.fit(np.log1p(df[\"price\"]))\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('Price distribution')\n\n#Get also the QQ-plot\nfig = plt.figure()\nres = stats.probplot(np.log1p(df[\"price\"]), plot=plt)\nplt.show()","16c4d378":"colormap = plt.cm.magma\n\nfig= plt.figure(figsize= (10,5))\nsns.boxplot(df.neighbourhood_group, np.log1p(df[\"price\"]))\nplt.xlabel(\"log(Price)\", size= 12)\nplt.title(\"Borough wise distribution of log(price)\", size= 20)\nplt.show()","4d9430bd":"plt.figure(figsize=(10,6))\nsns.distplot(df[df.minimum_nights<30].minimum_nights)\nplt.title('Minimum no. of nights distribution')\nplt.show()","c5725770":"plt.figure(figsize=(10,6))\nsns.distplot(df.availability_365, color= \"blue\")\nplt.title('Distribution of availability in days')\nplt.show()","becb6415":"price_df= df.groupby(\"neighbourhood\")['price'].mean().reset_index()\n\ntrace = go.Scatter(\n    y = price_df.price,\n    x = price_df.neighbourhood,\n    mode='markers',\n    marker=dict(\n        sizemode = 'diameter',\n        sizeref = 1,\n        size = price_df.price*.1,\n        #color = np.random.randn(500), #set color equal to a variable\n        color = price_df.price,\n        colorscale='Portland',\n        showscale=True\n    )\n)\ndata = [trace]\n\nlayout= go.Layout(\n    autosize= True,\n    title= 'Mean Price by Regions',\n    hovermode= 'closest',\n     xaxis= dict(\n         ticklen= 5,\n         showgrid=False,\n        zeroline=False,\n        showline=False\n     ),\n    yaxis=dict(\n        title= 'Mean Price',\n        showgrid=False,\n        zeroline=False,\n        ticklen= 5,\n        gridwidth= 2\n    ),\n    showlegend= False\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig,filename='scatter2010')","87deb10d":"f,ax=plt.subplots(1,2,figsize=(15,5))\ndf['room_type'].value_counts().plot.pie(explode=[0,0.05,0],autopct='%1.1f%%',ax=ax[0],shadow=True)\nax[0].set_title('Share of Room Type',size= 16)\nsns.countplot('room_type',data=df,ax=ax[1],order=df['room_type'].value_counts().index)\nax[1].set_title('Share of Room Type', size= 16)\nplt.show()","8c5f4991":"f,ax=plt.subplots(1,2,figsize=(16,6))\ndf['neighbourhood_group'].value_counts().plot.pie(explode=[0,0.05,0,0,0],autopct='%1.1f%%',ax=ax[0],shadow=True)\nax[0].set_title('Share of Neighbourhood group', size= 18)\nsns.countplot('neighbourhood_group',data=df,ax=ax[1],order=df['neighbourhood_group'].value_counts().index)\nax[1].set_title('Share of Neighbourhood group',size=18)\nplt.show()","1a313414":"\ndata = [go.Bar(\n            x = df[df.room_type==\"Entire home\/apt\"].neighbourhood.unique()[:50],\n            y = df[df.room_type==\"Entire home\/apt\"].neighbourhood.value_counts().values[:50],\n            marker= dict(colorscale='Jet',\n                         color = df.neighbourhood.value_counts().values[:50]\n                        ),\n            text='Histogram of listing by region'\n    )]\n\nlayout = go.Layout(\n    title='Borough listings of Entire home'\n)\n\nfig = go.Figure(data=data, layout=layout)\n\npy.iplot(fig, filename='basic-bar')","474a9e58":"data = [go.Bar(\n            x = df[df.room_type==\"Private room\"].neighbourhood.unique()[:50],\n            y = df[df.room_type==\"Private room\"].neighbourhood.value_counts().values[:50],\n            marker= dict(colorscale='Viridis',\n                         color = df.neighbourhood.value_counts().values[:50]\n                        ),\n            text='Histogram of listing by region'\n    )]\n\nlayout = go.Layout(\n    title='Borough listings of Private rooms'\n)\n\nfig = go.Figure(data=data, layout=layout)\n\npy.iplot(fig, filename='basic-bar')","80cd6209":"data = [go.Bar(\n            x = df[df.room_type==\"Shared room\"].neighbourhood.unique()[:50],\n            y = df[df.room_type==\"Shared room\"].neighbourhood.value_counts().values[:50],\n            marker= dict(colorscale='Portland',\n                         color = df.neighbourhood.value_counts().values[:50]\n                        ),\n            text='Histogram of listing by region'\n    )]\n\nlayout = go.Layout(\n    title='Borrow listings of shared room'\n)\n\nfig = go.Figure(data=data, layout=layout)\n\npy.iplot(fig, filename='basic-bar')","cd0b32f5":"from wordcloud import WordCloud, STOPWORDS\n\ntext= df['name'].values\n\nplt.figure(figsize=(16,10))\nwc = WordCloud(background_color=\"black\", max_words=1000, stopwords=STOPWORDS, max_font_size= 40)\nwc.generate(\" \".join([str(x) for x in text]))\nplt.title(\"Wordcloud of descriptions on Airbnb\", fontsize=20)\n# plt.imshow(wc.recolor( colormap= 'Pastel1_r' , random_state=17), alpha=0.98)\nplt.imshow(wc.recolor( colormap= 'Pastel2' , random_state=17), alpha=1.0)\nplt.axis('off')","48ca56f3":"plt.figure(figsize=(12,8))\nsns.scatterplot(df.longitude,df.latitude,hue=df.neighbourhood_group)\nplt.ioff()","4160dbb7":"import folium\nfrom folium.plugins import HeatMap\n\nm=folium.Map([40.7128,-74.0060],zoom_start=11)\nHeatMap(df[['latitude','longitude']].dropna(),radius=8,gradient={0.2:'green',0.4:'yellow',0.6:'orange',1.0:'red'}).add_to(m)\ndisplay(m)","4b8eb70e":"### Majority of the listing are either based in Manhattan or Brooklyn","dcd1d91e":"### Fort Wadsworth and Woodrow have most expensive properties","90fc8214":"### Keywords used in most of the listings are: heart, Central Park, Private, East village.","841536bd":"### Lower east side and hell's kitchen have most of the shared room listings","866a98c6":"## This is my first notebook. Please upvote if you liked!","79c54024":"#### Most of the listing have minimum number of nights below 5.","160396c7":"1. Manhattan clearly has property prices on the higher end than other neighbourhoods followed by Brooklyn.\n2. There is a lot of variation in the prices and there are many outliers present in the data.","d337b2f3":"### Most of the listings are either offering Entire home or a private room.","c115448b":"## Context\n\nSince 2008, guests and hosts have used Airbnb to expand on traveling possibilities and present more unique, personalized way of experiencing the world. This dataset describes the listing activity and metrics in NYC, NY for 2019.","a2cc3cc2":"### Data:\n\nThe data includes all needed information to find out more about hosts, geographical availability, necessary metrics to make predictions and draw conclusions.\n\nThe dataset has around 49,000 rows and 16 columns with 6 categorical and 10 numerical features. There is no target variable mentioned in the dataset. This notebook explores interactions and hidden insights from the available dataset.","ed2e7296":"### Harlem and Kensignton have majority of Private room listings.","33865b2e":"## Price Distribution","6dd1148e":"#### The peak of distribution is at extreme ends.","e2dd6726":"### Most of the listings of entire apartment are in Midtown and Clinton Hill."}}