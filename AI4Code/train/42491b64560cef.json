{"cell_type":{"bd203a8f":"code","4798d618":"code","184e2ccc":"code","2f060bc5":"code","2bbce8fb":"code","896a719c":"code","64de808e":"code","557ef9df":"code","d5ffc62e":"code","e33ca0b3":"code","8c17a92a":"code","9ca3e826":"code","3c445866":"code","f41d98a1":"code","83c8f914":"code","892c7a0e":"code","f920e679":"code","ecd16a3f":"code","411e3cca":"code","468560d1":"code","bc6be013":"code","bc61fc0f":"markdown"},"source":{"bd203a8f":"import pandas as pd\nimport numpy as np\nimport math\nimport matplotlib.pyplot as plt\nimport seaborn as sns","4798d618":"train=pd.read_csv('..\/input\/supplement-sales-prediction\/TRAIN.csv')\ntest=pd.read_csv('..\/input\/supplement-sales-prediction\/TEST_FINAL.csv')","184e2ccc":"train.head()","2f060bc5":"train.describe()","2bbce8fb":"train.info()","896a719c":"train['Date']=pd.to_datetime(train['Date'])\ntest['Date']=pd.to_datetime(test['Date'])","64de808e":"train['month']=train['Date'].dt.month\ntrain['week']=train['Date'].dt.week\ntrain['day']=train['Date'].dt.day\n\ntest['month']=test['Date'].dt.month\ntest['week']=test['Date'].dt.week\ntest['day']=test['Date'].dt.day","557ef9df":"X=train.drop(['ID','Date','#Order'],axis=1)\ny=train['Sales']\ntest_id=test.ID\ntest=test.drop(['ID','Date'],axis=1)","d5ffc62e":"X=pd.get_dummies(X,drop_first=True)\ntest=pd.get_dummies(test,drop_first=True)","e33ca0b3":"y=X['Sales']\nX=X.drop('Sales',axis=1)","8c17a92a":"X.shape,y.shape,test.shape","9ca3e826":"from sklearn.preprocessing import RobustScaler,LabelEncoder\nfrom sklearn.model_selection import train_test_split\n\nsc=RobustScaler()\nX=sc.fit_transform(X)\ntest=sc.transform(test)","3c445866":"from sklearn.metrics import mean_squared_error,r2_score,mean_absolute_error,mean_squared_log_error\n\nfrom sklearn.linear_model import LinearRegression,Ridge\nfrom lightgbm import LGBMRegressor\nfrom xgboost import XGBRegressor","f41d98a1":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.25,random_state=42)","83c8f914":"lr=LinearRegression()\nmodel=lr.fit(X_train,y_train)\ny_pred=model.predict(X_test)\nprint(f'RMSE: {mean_squared_error(y_test,y_pred,squared=False)}')\nprint(f'MSlE: {mean_squared_log_error(y_test,y_pred)}')\nprint(f'R2 :{r2_score(y_test,y_pred)}')","892c7a0e":"from lightgbm import LGBMRegressor \nlgbm=LGBMRegressor(bagging_fraction=0.75, bagging_freq=5, boosting_type='gbdt',\n              class_weight=None, colsample_bytree=1.0, feature_fraction=0.9,\n              importance_type='split', learning_rate=0.005, max_bin=90000,\n              max_depth=7, metric=['rmse'], min_child_samples=20,\n              min_child_weight=0.001, min_split_gain=0.0, n_estimators=100,\n              n_jobs=-1, num_iterations=200000, num_leaves=127,\n              objective='regression', random_state=None, reg_alpha=0.0,\n              reg_lambda=0.0, silent=True, subsample=1.0,\n              subsample_for_bin=200000, subsample_freq=0, task='train',\n              verbose=0)\n\nlgbm_model=lgbm.fit(X_train,y_train,eval_set=[(X_test,y_test)],eval_metric='rmse',early_stopping_rounds=1000)\ny_pred=lgbm_model.predict(X_test)\nprint(f'RMSE: {mean_squared_error(y_test,y_pred,squared=False)}')\nprint(f'R2 :{r2_score(y_test,y_pred)}')","f920e679":"from xgboost import XGBRegressor\nparams={\n    'colsample_bytree':0.3,\n    'gamma':0.05,\n    'learning_rate':1,\n    'max_depth':3,\n    'min_child_weight':1.3,\n    'n_estimators':30000,\n    'reg_alpha':0.3,\n    'reg_lambda':0.4,\n    'subsample':0.5,\n    'metric':['rmse']\n}\nxgb=XGBRegressor(**params)\nxgb_model=xgb.fit(X_train,y_train,eval_set=[(X_test,y_test)],eval_metric='rmse',early_stopping_rounds=1000)\ny_pred=xgb_model.predict(X_test)\nprint(f'RMSE: {mean_squared_error(y_test,y_pred,squared=False)}')\nprint(f'R2 :{r2_score(y_test,y_pred)}')","ecd16a3f":"pip install catboost","411e3cca":"from catboost import CatBoostRegressor\ncbr=CatBoostRegressor()\ncbr_model=cbr.fit(X_train,y_train)\ny_pred=cbr_model.predict(X_test)\nprint(f'RMSE: {mean_squared_error(y_test,y_pred,squared=False)}')\nprint(f'R2 :{r2_score(y_test,y_pred)}')","468560d1":"pred1=xgb.predict(test)\npred2=lgbm.predict(test)\npred3=cbr.predict(test)\npred_final=(pred1+pred2+pred3)\/3\n","bc6be013":"submission=pd.DataFrame({'ID':test_id,'Sales':pred_final})\nsubmission.head()","bc61fc0f":"If you like this notebook please do upvote!"}}