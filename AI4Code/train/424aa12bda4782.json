{"cell_type":{"ffa20831":"code","66fab50c":"code","402c9602":"code","15b55db7":"code","6a7e83eb":"code","a889927e":"code","d2f7ab86":"code","48ccd1e9":"code","439509eb":"code","fd46b850":"code","4f4009c6":"code","290880fb":"code","1b8527ed":"code","27213d2a":"code","82d67d53":"code","f5c27872":"code","6f27229b":"code","05c3fc28":"code","8f619595":"code","3b8a5f27":"code","64124caa":"code","e23d1be4":"code","e7caabef":"code","c5979e93":"code","6704f0e4":"code","99589b27":"code","9eed9837":"code","b3d9a3df":"code","5d25e4a1":"code","6147ce2e":"code","19a7fad1":"code","a7412e7f":"code","217c7228":"markdown","80a0df4b":"markdown","60cefbd7":"markdown","d32f2de1":"markdown","772f0236":"markdown"},"source":{"ffa20831":"import tensorflow as tf","66fab50c":"# Tensor is a multi-dimensional array\n# Tensor with zero dimension (axis) => Scalar\n# Tensor with one dimension (axis) => Vector\n# Tensor with two dimension (axis) => Matrix\n# Tensor with more than two dimension (axis) => Tensor\n\n# create a tensor with one dimension\nt = tf.range(12)\nt","402c9602":"# inspect the shape of tensor\nt.shape","15b55db7":"# inspect number of elements in tensor = product of all the shape elements\ntf.size(t)","6a7e83eb":"# change the shape of tensor => convert into two dimension\ntf.reshape(t, (2, 6))","a889927e":"# change the shape of tensor => convert into two dimension\n# but not give all shape element => tensor will calculate automatically\ntf.reshape(t, (-1, 6))","d2f7ab86":"# change the shape of tensor => convert into two dimension\n# but not give all shape element => tensor will calculate automatically\ntf.reshape(t, (2, -1))","48ccd1e9":"# create a tensor with three dimension and zero value initialized\ntf.zeros((2, 3, 4))","439509eb":"# create a tensor with three dimension and one value initialized\ntf.ones((2, 3, 4))","fd46b850":"# create a tensor with three dimension and random value initialized\n# random value are sampled from stadard normal distribution\ntf.random.normal((2, 3, 4))","4f4009c6":"# create a tensor with two dimension and value we give\ntf.constant([[1, 2, 3, 4], [2, 3, 4, 5]])","290880fb":"# element-wise mathematical operation\nt1 = tf.constant([1, 2, 3, 4, 5])\nt2 = tf.constant([2, 3, 4, 5, 6])\nt3 = tf.constant([1.0, 2.0, 3.0])\n\nt1+t2, t1-t2, t1*t2, t1\/t2, t1**t2","1b8527ed":"# exponential value for each element in tensor\ntf.exp(t3)","27213d2a":"# concatenate two tensor\nt1 = tf.ones((3, 4))\nt2 = tf.zeros((3, 4))\n\ntf.concat([t1, t2], axis=0), tf.concat([t1, t2], axis=1)","82d67d53":"# element-wise logical operation for two tensor\nt1==t2, t1>t2, t1<t2","f5c27872":"# summation of all elements in tensor\nt = tf.reshape(tf.range(15), (3, -1))\nt, tf.reduce_sum(t)","6f27229b":"# access element in tensor with index\nt = tf.reshape(tf.range(15), (5, -1))\nt, t[0, :], t[:, 0]","05c3fc28":"# tensor is immutable in tensorflow\n# however, \"Variable\" tensor is an exception\nt = tf.random.normal((3, 4))\nt","8f619595":"t[0, 1] = 0.45","3b8a5f27":"var_t = tf.Variable(t)\nvar_t","64124caa":"var_t[0, 2].assign(100)","e23d1be4":"var_t[2, :].assign(tf.range(4, dtype=tf.float32))","e7caabef":"# running operation will cause new memory to be allocated to host result\nx = tf.range(5, dtype=tf.float32)\ny = tf.ones((5))\nx, y","c5979e93":"# a new memory space is allocated to host result\n# model will have tens of thousands of parameters which should be updated in place\naddress = id(y)\ny = x + y\nid(y), address","6704f0e4":"var_z = tf.Variable(tf.zeros((5)))\nvar_z","99589b27":"address = id(var_z)\nvar_z.assign(x+y)\nvar_z","9eed9837":"id(var_z)==address","b3d9a3df":"tensor = tf.constant([1, 2, 3])\ntensor","5d25e4a1":"# tensor to numpy array\narr = tensor.numpy()\narr","6147ce2e":"# numpy array to tensor\ntensor = tf.constant(arr)\ntensor","19a7fad1":"# tenosr without dimension\nscalar_tensor = tf.constant(3)\nscalar_tensor","a7412e7f":"# tensor to scalar\nscalar_tensor.numpy(), int(scalar_tensor), float(scalar_tensor)","217c7228":"## Operations","80a0df4b":"## Saving Memory","60cefbd7":"## Get Started","d32f2de1":"## Conversion Between Numpy & Tensor","772f0236":"## Indexing and Slicing"}}