{"cell_type":{"de8b0728":"code","ab51f971":"code","4673ae89":"code","464e04b1":"code","9f46f9a7":"code","930cc8a6":"code","02759420":"code","f016867a":"code","c3dfc287":"code","eb5ffe43":"code","2df3736b":"code","b94a551d":"code","0a9bd301":"code","36f2ea84":"code","b1ab861f":"code","ae9f8a21":"code","55c12459":"code","bbafd7c0":"code","d4e6fa32":"markdown","f1ed025b":"markdown","3f39d48c":"markdown","835c47b1":"markdown","e08556a6":"markdown","f1d1242c":"markdown","aebdbbb8":"markdown","27d501e8":"markdown","0971eb80":"markdown","9ec0de1d":"markdown","8066956c":"markdown","c2914421":"markdown","1b68c6fc":"markdown","e48c27c7":"markdown","f4ca308c":"markdown","897fb4ac":"markdown","d6f102c1":"markdown","0257afad":"markdown","9d3a1214":"markdown","1413395e":"markdown","d49245a4":"markdown","f63224d6":"markdown","8e0b76a1":"markdown","479d3854":"markdown","feadeebd":"markdown"},"source":{"de8b0728":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","ab51f971":"%%HTML\n<iframe width=\"560\" height=\"315\" src=\"https:\/\/www.youtube-nocookie.com\/embed\/jbkSRLYSojo?start=34\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>","4673ae89":"data = pd.read_csv('..\/input\/gapminder\/gapminder.tsv', delimiter='\\t',thousands=',',index_col='year')\ndata.head()","464e04b1":"data = data.rename(columns={'pop':'population'});\ndata.head()","9f46f9a7":"from bokeh.io import output_notebook, output_file\n\noutput_notebook()  # Render inline in a Jupyter Notebook or\n#output_file('filename.html')  # Render to static HTML\n","930cc8a6":"from bokeh.io import show\nfrom bokeh.plotting import figure\n\n# Set up a generic figure() object\nfig = figure()\n\n# See what it looks like\nshow(fig)","02759420":"fig = figure(x_range=(100,1000),\n             y_range=(0,10),\n             background_fill_color='pink',\n             background_fill_alpha=0.2,\n             plot_height=400,\n             plot_width=600,\n             x_axis_label='X Label',\n             y_axis_label='Y Label',\n             title='Example Figure',\n             toolbar_location='below',\n             tools='save')\n\n# See what it looks like\nshow(fig)","f016867a":"# Circles\n\np = figure(plot_width=300, plot_height=300)\n\n# add a circle renderer with a size, color, and alpha\np.circle([1, 2, 3, 4, 5], [6, 7, 1, 4, 3], size=20, color=\"green\", alpha=0.5)\n\n# show the results\nshow(p)","c3dfc287":"# Squares\n\np = figure(plot_width=300, plot_height=300)\n\n# add a circle renderer with a size, color, and alpha\np.square([1, 2, 3, 4, 5], [6, 7, 1, 4, 3], size=20, color=\"red\", alpha=0.5)\n\n# show the results\nshow(p)","eb5ffe43":"# Line\n\np = figure(plot_width=300, plot_height=300)\n\n# add a circle renderer with a size, color, and alpha(for transparency)\np.line([1, 2, 3, 4, 5], [6, 7, 1, 4, 3], line_width=2, color=\"pink\")\n\n# show the results\nshow(p)","2df3736b":"from bokeh.io import show\nfrom bokeh.plotting import figure\n\np = figure(height = 400, width = 400)\np.circle(x = data['gdpPercap'], y = data['lifeExp'])\np.xaxis.axis_label = \"GDP per Capita\"\np.yaxis.axis_label = \"Life Expectancy\"\nshow(p)","b94a551d":"from bokeh.io import show\nfrom bokeh.plotting import figure\n\n\np = figure(\n    height = 400, \n    width = 600,\n    x_axis_type = 'log',\n    x_range =(100,100000), y_range = (0,100),\n    title = \"Life Expectancy vs GDP of Nations \",)\n\np.circle(x = data['gdpPercap'], y = data['lifeExp'],color=\"orange\",alpha = 0.6)\np.xaxis.axis_label = \"GDP per Capita\"\np.yaxis.axis_label = \"Life Expectancy(Years)\"\n\n\nfrom bokeh.models import NumeralTickFormatter\np.xaxis[0].formatter = NumeralTickFormatter(format='$0,')\n\n\nshow(p)","0a9bd301":"# Choosing year 2007\n\nfrom bokeh.models import ColumnDataSource\nsource = ColumnDataSource(data.loc[2007])","36f2ea84":"# Adding the source option in our plot\n\nfrom bokeh.io import show\nfrom bokeh.plotting import figure\n\np = figure(\n    height = 400, \n    width = 600,\n    x_axis_type = 'log',\n    x_range = (100,100000), y_range = (0,100),\n    title = \"Life Expectancy vs GDP of Nations for 2010\")\n\np.circle(x='gdpPercap', y='lifeExp',color=\"orange\",alpha=0.6,source=source)\np.xaxis.axis_label = \"GDP per Capita\"\np.yaxis.axis_label = \"Life Expectancy\"\n\n\nfrom bokeh.models import NumeralTickFormatter\np.xaxis[0].formatter = NumeralTickFormatter(format='$0,')\n\nshow(p)","b1ab861f":"#Resizing the bubbles w.r.t population\n\nfrom bokeh.io import show\nfrom bokeh.models import LinearInterpolator\nfrom bokeh.plotting import figure\n\n\np = figure(\n    height = 400, \n    width = 600,\n    x_axis_type = 'log',\n    x_range = (100,100000), y_range = (0,100),\n    title = \"Life Expectancy vs GDP of Nations for 2010\")\n\n\nsize_mapper = LinearInterpolator(\n    x = [data.population.min(), data.population.max()],\n    y = [10,100]\n)\n\n\np.circle(x='gdpPercap', y='lifeExp',color=\"orange\",alpha=0.6,source=source,\n         size={'field':'population', 'transform':size_mapper})\n\np.xaxis.axis_label = \"GDP per Capita\"\np.yaxis.axis_label = \"Life Expectancy\"\n\n\nfrom bokeh.models import NumeralTickFormatter\np.xaxis[0].formatter = NumeralTickFormatter(format='$0,')\n\nshow(p)","ae9f8a21":"from bokeh.io import show\nfrom bokeh.models import LinearInterpolator\nfrom bokeh.plotting import figure\nfrom bokeh.models import CategoricalColorMapper\nfrom bokeh.palettes import Spectral6\n\np = figure(\n    height = 400, \n    width = 600,\n    x_axis_type = 'log',\n    x_range = (100,100000), y_range = (0,100),\n    title = \"Life Expectancy vs GDP of Nations\")\n\n\nsize_mapper = LinearInterpolator(\n    x = [data.population.min(), data.population.max()],\n    y = [10,100]\n)\n\n# Mapping color to region\ncolor_mapper = CategoricalColorMapper(\n    factors=list(data.continent.unique()),\n    palette=Spectral6\n)\n\n\np.circle(x='gdpPercap', y='lifeExp',alpha=0.6,source=source,\n         size={'field':'population', 'transform':size_mapper},\n         color={'field':'continent', 'transform':color_mapper},\n         legend='continent'\n        )\n\np.xaxis.axis_label = \"GDP per Capita\"\np.yaxis.axis_label = \"Life Expectancy\"\n\n\nfrom bokeh.models import NumeralTickFormatter\np.xaxis[0].formatter = NumeralTickFormatter(format='$0,')\n\nshow(p)","55c12459":"from bokeh.io import show\nfrom bokeh.models import LinearInterpolator\nfrom bokeh.plotting import figure\nfrom bokeh.models import CategoricalColorMapper\nfrom bokeh.palettes import Spectral6\nfrom bokeh.models import HoverTool\n\n\nhover = HoverTool(tooltips='@country')\n\np = figure(\n    height = 400, \n    width = 600,\n    x_axis_type = 'log',\n    tools = [hover],\n    x_range = (100,100000), y_range = (0,100),\n    title = \"Life Expectancy vs GDP of Nations\")\n\n\nsize_mapper = LinearInterpolator(\n    x = [data.population.min(), data.population.max()],\n    y = [10,100]\n)\n\n# Mapping color to region\ncolor_mapper = CategoricalColorMapper(\n    factors=list(data.continent.unique()),\n    palette=Spectral6\n)\n\n\np.circle(x='gdpPercap', y='lifeExp',alpha=0.6,source=source,\n         size={'field':'population', 'transform':size_mapper},\n         color={'field':'continent', 'transform':color_mapper},\n         legend='continent'\n        )\n\np.xaxis.axis_label = \"GDP per Capita\"\np.yaxis.axis_label = \"Life Expectancy\"\n\n\nfrom bokeh.models import NumeralTickFormatter\np.xaxis[0].formatter = NumeralTickFormatter(format='$0,')\n\n# formating the legend\np.legend.location = (20, -6)\np.right.append(p.legend[0])\np.legend.border_line_color = None\n\n\nshow(p)","bbafd7c0":"'''\nfrom bokeh.io import show\nfrom bokeh.models import LinearInterpolator\nfrom bokeh.plotting import figure\nfrom bokeh.models import CategoricalColorMapper\nfrom bokeh.palettes import Spectral6\nfrom bokeh.models import HoverTool\n\n\nhover = HoverTool(tooltips='@country')\n\np = figure(\n    height = 400, \n    width = 600,\n    x_axis_type = 'log',\n    tools = [hover],\n    x_range = (100,100000), y_range = (0,100),\n    title = \"Life Expectancy vs GDP of Nations\")\n\n\nsize_mapper = LinearInterpolator(\n    x = [data.population.min(), data.population.max()],\n    y = [10,100]\n)\n\n# Mapping color to continent\ncolor_mapper = CategoricalColorMapper(\n    factors=list(data.continent.unique()),\n    palette=Spectral6\n)\n\n\nfrom bokeh.io import push_notebook\ndef update(year):\n    new_data = dict(\n        gdpPercap=data.loc[year].gdpPercap,\n        lifeExp=data.loc[year].lifeExp,\n        country=data.loc[year].country,\n        population=data.loc[year].population,\n        continent=data.loc[year].continent\n    )\n    source.data = new_data\n    if len(p.title.text) > len(\"Life Expectancy vs GDP of Nations \"):\n        tmp = str(p.title.text)\n        p.title.text=tmp[:-4]\n        p.title.text = p.title.text + str(year)\n    else:\n        p.title.text = p.title.text + str(year)\n    push_notebook()\n\n\np.circle(x='gdpPercap', y='lifeExp',alpha=0.6,source=source,\n         size={'field':'population', 'transform':size_mapper},\n         color={'field':'continent', 'transform':color_mapper},\n         legend='continent'\n        )\n\np.xaxis.axis_label = \"GDP per Capita\"\np.yaxis.axis_label = \"Life Expectancy\"\n\n\nfrom bokeh.models import NumeralTickFormatter\np.xaxis[0].formatter = NumeralTickFormatter(format='$0,')\n\n# formating the legend\np.legend.location = (30, -5)\np.right.append(p.legend[0])\np.legend.border_line_color = None\n\n\nshow(p,notebook_handle=True)\n\nimport time\nyear = 1952\nwhile True:\n    update(year)\n    if year == 2007:\n        year=1952\n    else:\n        year+=5\n    time.sleep(0.5)\n    continue\n'''    ","d4e6fa32":"# Adding Hovertool Capabilities\n\nFinally its time to add the Hovrtools functionality of Bokeh. Till will help us to identifythe country being represented by each bubble.","f1ed025b":"Before, we start with using Bokeh on the Gapminder data, lets get an idea about its various features and usage. \n\n* We need to begin by setting up an output interface for Bokeh. This is where the visualisations will be rendered. There are a [number of ways](https:\/\/docs.bokeh.org\/en\/latest\/docs\/user_guide\/concepts.html#output-methods) to output the visualisations but let's stick to the basic two:\n\n  - **output_file('filename.html')** outputs the visualization to a static HTML file.\n  - **output_notebook()** renders the visualization in a Jupyter Notebook.\n  \nTo display Bokeh plots inline in a Jupyter notebook, use the `output_notebook()` function from bokeh.io. When `show()` is called, the plot will be displayed inline in the next notebook output cell. To save your Bokeh plots, you can use the `output_file()` function instead (or in addition).\n  ","3f39d48c":"![](https:\/\/imgur.com\/undefined.png)","835c47b1":"# ColumnData Source\n\nLet's choose a specific year instead of taking in all the years, which is a lot of data. Let's see the relationship betwwen GDP and Life expectancy in 2007. For this we shall use the ColumnDataSoure Object.\n\nColumnDataSource is a built in functionality within Bokeh to handle various data structures like:\n* Python dict\n* Pandas Dataframe\n* Pandas groupby\n\nThe COlumnDataSOurce helps to pass the data to the glyphs for the purpose of visualisation. It essentially maps name of the column to the data.","e08556a6":"let's rename the pop column to population since, pop is a keyword in Python","f1d1242c":"# Glyphs : the building blocks of Bokeh visualizations.\n\nThe basic visual building blocks of Bokeh plots, e.g. lines, rectangles, squares, wedges, patches, etc. The bokeh.plotting interface provides a convenient way to create plots centered around glyphs. See Plotting with Basic Glyphs for more information [Source](https:\/\/docs.bokeh.org\/en\/latest\/docs\/user_guide\/plotting.html#userguide-plotting)","aebdbbb8":"Hans Rosling is a name that needs no introduction in the field of Data Visualisation. In this spectacular section of \u2018The Joy of Stats\u2019, he tells the story of the world\u2019s 200 countries over 200 years using 120,000 numbers \u2014 in just four minutes. Plotting life expectancy against income for every country since 1810, Hans showed how the world we live in is radically different from the world most of us imagine to be.\n\n","27d501e8":"Bokeh is a very verstaile library and this notebook is just the tip of the iceberg. Explore the documentation for indepth visualisatons.","0971eb80":"It is important to notice here that the default Bokeh figure comes pre-loaded with a toolbarwhich can be further configured for various interactions. ","9ec0de1d":"![](https:\/\/imgur.com\/McE4iJ3.png)","8066956c":"![](https:\/\/imgur.com\/rqAmm56.png)","c2914421":"Let's try to recreate the same visualization (as shown in the video\/talk) to analyse how Life Expectancy in years (health) and GDP per capita (wealth) have changed over time in the world for various countries. However, we shall try to do the same in Bokeh and also understand some of the Bokeh's amazing features along the way.\n\nThe following notebook is intended to illustrate some of Bokeh's interactive utilities and is based on a [video at Pydata 2016](https:\/\/www.youtube.com\/watch?v=9FlUFLmaWvY) by software engineer and Bokeh developer Sarah Bird.\n","1b68c6fc":"# Generating a Basic first plot with Axes\n\nlet's create a basic first plot to learn how to configure the figure() object.\n\nThe figure() object is the key to all of Bokeh\u2019s available tools for visualizing data. The Bokeh figure is a subclass of the [Bokeh Plot](https:\/\/docs.bokeh.org\/en\/latest\/docs\/reference\/models\/plots.html#bokeh.models.plots.Plot) object, which provides a lot of the parameters to configure the plot.","e48c27c7":"![](https:\/\/imgur.com\/RHOcYYQ.png)","f4ca308c":"Available Markers in Bokeh\n\n* asterisk()\n* circle()\n* circle_cross()\n* circle_x()\n* cross()\n* dash()\n* diamond()\n* diamond_cross()\n* inverted_triangle()\n* square()\n* square_cross()\n* square_x()\n* triangle()","897fb4ac":"# Coloring the countries by the continent column\n\nFor this we shall use the **CategoricalColorMapper** option from bokeh and the **Spectral6** pallete.","d6f102c1":"# Animating the Visualisation\n\nBokeh makes it very easy to create interactice dashboards with sliders and widgets, which can then be deployed to server. You can read more about it in the official documentation. Uncomment and run the code below to see the animated version of the plot like the one below:\n\n![Alt Text](https:\/\/imgur.com\/HGAoi1M.gif)\n","0257afad":"# Generating an Empty canvas with Bokeh\n\nLet's generate a bare empty figure with Bokeh just to get things started","9d3a1214":"# Bokeh\n\nBokeh is an interactive Python library for visualizations  that uses web browsers for its presentation. Bokeh supports a wide variety of visualization tasks from basic exploration through to building advanced data applications. Its goal is to provide elegant, concise construction of novel graphics in the style of D3.js, and to extend this capability with high-performance interactivity over very large or streaming datasets. Bokeh can help anyone who would like to quickly and easily create interactive plots, dashboards, and data applications.\n\n - To get started using Bokeh , see the [User Guide](http:\/\/bokeh.pydata.org\/en\/latest\/docs\/user_guide.html#userguide).\n - Check out the [Gallery] to see examples (http:\/\/bokeh.pydata.org\/en\/latest\/docs\/gallery.html#gallery).\n - A complete API reference of Bokeh is at [Reference Guide](http:\/\/bokeh.pydata.org\/en\/latest\/docs\/reference.html#refguide).\n\n\n","1413395e":"Voila ! here we have different countries represented by different size of bubbles. But they all look the same. Now let us give each region a color to add more dimensions and provide a legend.","d49245a4":"# Importing data","f63224d6":"## Customizing the plot\n\nLet's customize out plot by :\n\n* changing the color and the alpha value which decides the transparency. \n* Also, the plot is skewed and it will mak much more sense if we change the x-axis to logarithmic scale. We would also set the ranges for both the axes.\n* Adding the [NumeralTickFormatter](https:\/\/docs.bokeh.org\/en\/latest\/docs\/reference\/models\/formatters.html#bokeh.models.formatters.NumeralTickFormatter) to to format x-axis to $ format","8e0b76a1":"# Creating a basic scatter plot between GDP and Life Expectancy\nNow,thatwe have a basic idea about working with Bokeh, let's start working with our original **Gapminder** dataset.","479d3854":"*\u201cMy interest is not data, it\u2019s the world. And part of world development you can see in numbers.\u201d \u2014 Hans Rosling*","feadeebd":"# Customizing bubble size according to Population\n\nIn the above graph all the bubbles are of th esame size. Let's map bubble zise according to the size so that countries having large population have bigger bubbles. For this we shall use the **Linear Interpolator**."}}