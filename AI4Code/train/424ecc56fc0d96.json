{"cell_type":{"ab0ae109":"code","3efb1159":"code","22c062d3":"code","69ae97fb":"code","91ee8c8b":"code","c75060c0":"code","894dc94e":"code","2cb342a2":"code","622cfd42":"code","30f8a33f":"code","c5899f7f":"code","7df992d0":"code","b8ffb5a7":"code","087a81da":"code","6ea03458":"code","9ad9dd7c":"code","fb96f4a6":"code","67fee9b1":"code","a27ef2a6":"code","54eb191c":"code","22c9900f":"code","b552a784":"code","ecd3a05d":"code","83d52fbe":"code","0b311837":"code","b2f16fc1":"code","14e87abe":"code","df9f07a1":"code","c2c4f183":"code","9758bbab":"code","72f5eb12":"code","4bffd1dc":"code","eadefeed":"code","f9e33d3e":"code","7cb3c5a6":"code","6a8fd177":"code","fc4a90cf":"markdown","37f0000c":"markdown","37946c9a":"markdown","ba851e13":"markdown","9b60f667":"markdown","a4ec5fc4":"markdown","4dd557e1":"markdown","3a2dbd8c":"markdown","f8941462":"markdown","8fababac":"markdown","1212c50e":"markdown","7baccaba":"markdown","e24fc9ac":"markdown","307949fe":"markdown","e1a1a6a0":"markdown","26fc2795":"markdown","2ab19cf2":"markdown"},"source":{"ab0ae109":"import numpy as np\nimport pandas as pd\nimport nltk","3efb1159":"movies_data = pd.read_csv('\/kaggle\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv')\ncredits_data = pd.read_csv('\/kaggle\/input\/tmdb-movie-metadata\/tmdb_5000_credits.csv')","22c062d3":"data = movies_data.merge(credits_data, how = 'inner', on = movies_data['id'])","69ae97fb":"data.info()","91ee8c8b":"data.drop(['homepage', 'key_0', 'title_x', 'title_y', 'movie_id'], axis = 1, inplace = True)","c75060c0":"data.info()","894dc94e":"from ast import literal_eval","2cb342a2":"data['genres'] = data['genres'].apply(literal_eval)","622cfd42":"data['keywords'] = data['keywords'].apply(literal_eval)","30f8a33f":"data['cast'] = data['cast'].apply(literal_eval)","c5899f7f":"data['crew'] = data['crew'].apply(literal_eval)","7df992d0":"def getDirectorName(crew) :\n    for i in crew :\n        if i['job'] == 'Director' :\n            return i['name']","b8ffb5a7":"def getNameList(words) :\n    names = []\n    for i in words :\n        names.append(i['name'])\n    \n    if len(names) > 5 :\n        return names[0:5]\n    \n    else :\n        return names","087a81da":"data['Director'] = data['crew'].apply(lambda x : getDirectorName(x))","6ea03458":"data['keywords'] = data['keywords'].apply( lambda x : getNameList(x) )","9ad9dd7c":"data['genres'] = data['genres'].apply( lambda x : getNameList(x) )","fb96f4a6":"data['cast'] = data['cast'].apply( lambda x : getNameList(x) )","67fee9b1":"data.info()","a27ef2a6":"data['Director'] = data['Director'].fillna(' ')","54eb191c":"def cleanDiretor(name) :\n    name = name.lower()\n    name = name.replace(' ', '')\n    return name","22c9900f":"def cleanWordList(words) :\n    names = []\n    \n    for word in words :\n        word = word.lower()\n        word = word.replace(' ', '')\n        names.append(word)\n    return names","b552a784":"def finalData(x):\n    return ' '.join(x['keywords']) + ' ' + ' '.join(x['cast']) + ' ' + x['Director'] + ' ' + ' '.join(x['genres'])\n\ndata['Final_Data'] = data.apply(finalData, axis=1)","ecd3a05d":"data.info()","83d52fbe":"from sklearn.feature_extraction.text import CountVectorizer","0b311837":"countvectorizer = CountVectorizer()","b2f16fc1":"vectormatrix = countvectorizer.fit_transform(data['Final_Data'])","14e87abe":"vectormatrix.shape","df9f07a1":"from sklearn.metrics.pairwise import cosine_similarity","c2c4f183":"similaritymatrix = cosine_similarity(vectormatrix, vectormatrix)","9758bbab":"similaritymatrix.shape","72f5eb12":"similaritymatrix[0][0:10]","4bffd1dc":"indices = pd.Series(data = data['id'].index, index = data['original_title']).drop_duplicates()","eadefeed":"indices","f9e33d3e":"def getSimilarMovies(moviename) :\n    index = indices[moviename]\n    \n    similarmovies = list(enumerate(similaritymatrix[index]))\n    similarmovies = sorted(similarmovies, key = lambda x : x[1], reverse = True)\n    similarmovies = similarmovies[1:11]\n    \n    moviesindex = []\n    \n    for movie in similarmovies :\n        moviesindex.append(movie[0])\n        \n    similarmovies = data['original_title'].iloc[moviesindex]\n    \n    return similarmovies","7cb3c5a6":"getSimilarMovies('The Wolverine')","6a8fd177":"getSimilarMovies('The Dark Knight Rises')","fc4a90cf":"Filling the Null Values of the Director Column with ' '","37f0000c":"Merging the two DataSets\n","37946c9a":"Function to get the Director's Name","ba851e13":"Importing the DataSets ","9b60f667":"Importing the Libraries","a4ec5fc4":"Function to get the top 5 Keyword, Genres and Keyword","4dd557e1":"Removing the whitespaces in the Director name and converting all to lowercase","3a2dbd8c":"Getting Movies Similar to the movie 'The Dark Knight Rises'","f8941462":"Applying the literal_eval on the Columns having Unstructured Data","8fababac":"Creating a Series of Indices and Title","1212c50e":"Getting Movies Similar to the movie 'The Wolverine'","7baccaba":"Combining the Director Name, Cast, Keywords and Genres in a single column","e24fc9ac":"Creating a Function to recommend movies based on a movie","307949fe":"Removing the spaces in the names and converting all to lowercase","e1a1a6a0":"Recommendation Using Content Based Filtering","26fc2795":"Importing the CountVectorizer and creating BOW matrix","2ab19cf2":"Dropping the Redundant Columns"}}