{"cell_type":{"a95d0196":"code","5175b41b":"code","029fefee":"code","280ef829":"code","9c4488e2":"code","1cc35723":"code","adcff2ab":"code","86716212":"code","4e089ef8":"code","d376f99f":"code","e53195a8":"code","cd99fdb7":"code","20290bf1":"code","ea4c8f76":"code","9239f1c0":"code","9fae702a":"code","55907711":"markdown","de22ddde":"markdown","c2f786a9":"markdown","91fb938e":"markdown","575218db":"markdown","2e72be5c":"markdown","b7f0d8f0":"markdown","7a57c908":"markdown","337192fd":"markdown","e9acde8b":"markdown","be139bd8":"markdown","f589d92a":"markdown","620c6281":"markdown","0861d2d5":"markdown"},"source":{"a95d0196":"!pip install pycoingecko","5175b41b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom pandas import DataFrame\nfrom matplotlib import pyplot as plt\nfrom datetime import datetime\nfrom pycoingecko import CoinGeckoAPI\nimport seaborn as sns\nsns.set()\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","029fefee":"# define constant variables\nCOINS = ['bitcoin', 'polkadot']\nSTART_DATE = datetime(2016, 1, 1)\nEND_DATE = datetime(2021, 3, 25)","280ef829":"class Crypto_data_getter(object):\n    \"\"\"\n    class to get and format crypto data\n    \"\"\"\n    def __init__(self):\n        self.cg = CoinGeckoAPI()\n        \n    def get_crypto_data(self, identifier: str, start_date: datetime, end_date: datetime) -> DataFrame:\n        \"\"\"\n        get crypto historical price, market cap, and 24h volume between start_date and end_date\n        start_date: the start date\n        end_date: the end date\n        \"\"\"\n        start_timestamp = datetime.timestamp(start_date)\n        end_timestamp = datetime.timestamp(end_date)\n\n        data = self.cg.get_coin_market_chart_range_by_id(identifier, vs_currency='usd', from_timestamp=start_timestamp, to_timestamp=end_timestamp)\n        df = DataFrame(data)\n        dates = [datetime.fromtimestamp(x[0]\/1e3) for x in df.prices]\n        df.index = dates\n        df = df.applymap(lambda x: x[1])\n        return df\n    \n    def get_crypto_data_column_name_modified(self, identifier: str, start_date: datetime, end_date: datetime) -> DataFrame:\n        \"\"\"\n        get crypto historical price, market cap, and 24h volume between start_date and end_date, with crypto name appended to each column name in the df\n        \"\"\"\n        df = self.get_crypto_data(identifier, start_date, end_date)\n        df.columns = [x + '_' + identifier for x in df.columns]\n        return df\n    \n    def get_crypto_data_multiple(self, identifiers: list, start_date: datetime, end_date: datetime) -> DataFrame:\n        \"\"\"\n        get multiple crypto historical price, market cap, and 24h volume between start_date and end_date for all the crypto in the identifier list\n        start_date: the start date\n        end_date: the end date\n        \"\"\"\n        df_old = self.get_crypto_data_column_name_modified(identifiers[0], start_date, end_date)\n\n        for identifier in identifiers[1:]:\n            df_new = self.get_crypto_data_column_name_modified(identifier, start_date, end_date)\n            df_old = df_old.merge(df_new, left_index=True, right_index=True, how='outer')\n        return df_old","9c4488e2":"crypto_data_getter = Crypto_data_getter()\n\n# crypto_data_getter\n# ('polkadot', START_DATE, END_DATE)","1cc35723":"crypto_data_getter.get_crypto_data_column_name_modified('bitcoin', START_DATE, END_DATE)","adcff2ab":"crypto_data_getter = Crypto_data_getter()\ndata = crypto_data_getter.get_crypto_data_multiple(COINS, START_DATE, END_DATE)","86716212":"data.head()","4e089ef8":"data.describe()","d376f99f":"data[data.columns[-3:]].dropna()","e53195a8":"data1 = data.fillna(0)","cd99fdb7":"data_pct_chg = data1.pct_change()\ndata_pct_chg.describe()","20290bf1":"data_polkadot = data1.iloc[:, -3:]\ndata_polkadot[data_polkadot!=0].dropna().pct_change().describe()","ea4c8f76":"data1['market_caps_total'] = data1[['market_caps_' + x for x in COINS]].sum(axis=1)\ndata1['bitcoin_dominance'] = data1['market_caps_bitcoin'] \/ data1['market_caps_total']","9239f1c0":"data1.bitcoin_dominance.plot(title='Bitcoin Dominance')","9fae702a":"ETHBTC = data1.loc[data1.index >= datetime(2020,12,15), 'prices_ethereum'] \/ data1.loc[data1.index >= datetime(2020,12,15), 'prices_bitcoin']\nETHBTC_dict = dict(zip(ETHBTC.index, ETHBTC.values))\nprint(ETHBTC_dict)","55907711":"Even though Coingecko is a popular API for crypto data, we nevertheless should check and ensure the data quality. In this short demo, I will first look at the summary statistics and then examine day-over-day percentage change.","de22ddde":"Since it's just a single insert per minute, we can simply use CRONTAB to schedule a Python script that insert one record into SQL database per minute. For example, if it's for SQL Server, we can use pyodbc to perform the insert. We should also set up the warning and error mechanism so that we can get notified timely if anything goes wrong. \n\nHowever, with the growth of our signals, performing scheduled task each minute might slow down our local machine, therefore we will prefer cloud service like Apache Airflow in this case.","c2f786a9":"# Problem 2","91fb938e":"## Examine the Data","575218db":"I would like to thank Sherwin, Anish, Aurora, and Rachael for organizing this exercise for me. It's the first time I got exposed to crypto data and it's been really enjoyable.\n\nI look forward to hearing from your end!","2e72be5c":"# Problem 3","b7f0d8f0":"## Calculate and Plot Bitcoin Market Capitalization Dominance","7a57c908":"Next, we calculate day-over-day change for each column. This is an effective way to find erroneous data. (In equity market, it can often help us find mishandling of stock split.) Note that we need to treat Polkadot separately since it misses a lot of data.","337192fd":"We can see that polkadot is missing a lot of data. the polkadot's data are only available from mid August. We will simply fill missing values with 0 so as to calculate the Bitcoin dominance.","e9acde8b":"We can see that the Bitcoin Dominance dropped a lot around late August 2020, it's probably because of the introduction of Polkadot.","be139bd8":"## Get Data","f589d92a":"# Problem 1","620c6281":"We can see that there's no absurd price change (>100% or <-50%), and the max and min percentage change of mkt cap is inline with that of the price, so we can tentatively conclude that the data is good now and proceed with EDA.","0861d2d5":"# Acknowledgement"}}