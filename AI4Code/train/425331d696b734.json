{"cell_type":{"2849df0a":"code","467ac5ec":"code","ab54e9ef":"code","9e8d3d7e":"code","21143e88":"code","e0340fb5":"code","e62500a2":"code","e6b6c8c5":"markdown","7422689c":"markdown","fc74b729":"markdown","673f0917":"markdown","7038998f":"markdown","14f25e0a":"markdown","e35b6a4b":"markdown"},"source":{"2849df0a":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\nfrom tensorflow.keras.preprocessing import image_dataset_from_directory\nimport tensorflow.keras.layers.experimental.preprocessing as preprocessing\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport pandas as pd\nfrom glob import glob\nfrom PIL import Image","467ac5ec":"pneumonia = glob('..\/input\/chest-xray-pneumonia\/chest_xray\/train\/PNEUMONIA\/*')\nnormal = glob('..\/input\/chest-xray-pneumonia\/chest_xray\/train\/NORMAL\/*')\n\nfig, ax = plt.subplots(1,6, figsize=(30,10))\n\nfor i in range(6):\n    if i % 2 == 0:\n        current_img = Image.open(normal[i]).resize((256,256))\n        title = 'Normal'\n    elif i % 2 == 1:\n        current_img = Image.open(pneumonia[i]).resize((256,256))\n        title = 'Pneumonia'\n        \n    ax[i].imshow(current_img, cmap='gray')\n    ax[i].set_title(title)\n\nplt.show()\n\ncategories = [\"Normal\", \"Pneumonia\"]\nxray_amounts = [len(normal), len(pneumonia)]\nsns.barplot(categories, xray_amounts)\nplt.title('Data in Training Set')\nplt.grid(color='#a8a8a8', linewidth=0.4)\nplt.show()","ab54e9ef":"def process_img(img, label):\n    img = tf.image.convert_image_dtype(img, dtype=tf.float32)\n    return img, label\n\ntrain_ds = image_dataset_from_directory(\n    '..\/input\/chest-xray-pneumonia\/chest_xray\/train',\n    labels='inferred',\n    shuffle=True,\n    batch_size=64,\n    image_size=(256,256),\n    color_mode='grayscale',\n    label_mode='binary',\n    interpolation='nearest'\n).map(process_img)\n\ntest_ds = image_dataset_from_directory(\n    '..\/input\/chest-xray-pneumonia\/chest_xray\/test',\n    labels='inferred',\n    shuffle=False,\n    batch_size=64,\n    image_size=(256,256),\n    color_mode='grayscale',\n    label_mode='binary',\n    interpolation='nearest'\n).map(process_img)","9e8d3d7e":"model = keras.Sequential([\n    layers.InputLayer(input_shape=(256,256,1)),\n\n    # Data Augmentation\n    preprocessing.RandomContrast(0.3),\n    preprocessing.RandomRotation(0.2),\n\n    # Body\n    layers.Conv2D(filters=32, kernel_size=(3,3), strides=(1,1), activation='relu'),\n    layers.Conv2D(filters=32, kernel_size=(3,3), strides=(1,1), activation='relu'),\n    layers.MaxPool2D(pool_size=(2,2), strides=(2,2)),\n    layers.Conv2D(filters=64, kernel_size=(3,3), strides=(1,1), activation='relu'),\n    layers.Conv2D(filters=64, kernel_size=(3,3), strides=(1,1), activation='relu'),\n    layers.MaxPool2D(pool_size=(2,2), strides=(2,2)),\n    layers.Conv2D(filters=128, kernel_size=(3,3), strides=(1,1), activation='relu'),\n    layers.Conv2D(filters=128, kernel_size=(3,3), strides=(1,1), activation='relu'),\n    layers.MaxPool2D(pool_size=(2,2), strides=(2,2)),\n    layers.Conv2D(filters=256, kernel_size=(3,3), strides=(1,1), activation='relu'),\n    layers.Conv2D(filters=256, kernel_size=(3,3), strides=(1,1), activation='relu'),\n    layers.MaxPool2D(pool_size=(2,2), strides=(2,2)),\n    layers.Conv2D(filters=512, kernel_size=(3,3), strides=(1,1), activation='relu'),\n    layers.Conv2D(filters=512, kernel_size=(3,3), strides=(1,1), activation='relu'),\n    layers.MaxPool2D(pool_size=(2,2), strides=(2,2)),\n\n    # Head\n    layers.Flatten(),\n    layers.Dense(128, activation='relu'),\n    layers.Dropout(0.5),\n    layers.Dense(1, activation='sigmoid')\n])","21143e88":"optimizer = keras.optimizers.Adam(learning_rate=1e-5)\n\nmodel.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['binary_accuracy'])\nmodel.summary()","e0340fb5":"early_stopping = EarlyStopping(\n    min_delta = 1e-3,\n    patience=3,\n    restore_best_weights=True,\n    verbose=1\n)\n\nckpt = ModelCheckpoint(\n    'pneumonia-weights.hdf5',\n    save_best_only=True,\n    save_weights_only=True,\n    verbose=1\n)\n\nhistory = model.fit(\n    train_ds,\n    validation_data=(test_ds),\n    batch_size=64,\n    epochs=200,\n    callbacks=[early_stopping, ckpt],\n    verbose=1\n)","e62500a2":"fit_hist = pd.DataFrame(history.history)\n\nloss = round(np.min(fit_hist['loss']), 2)\nval_loss = round(np.min(fit_hist['val_loss']), 2)\nacc = round(np.max(fit_hist['binary_accuracy']), 2)\nval_acc = round(np.max(fit_hist['val_binary_accuracy']), 2)\n\nplt.title(f\"Train Loss ({loss}) and Validation Loss ({val_loss})\")\nplt.plot(fit_hist['loss'], label='Train Loss')\nplt.plot(fit_hist['val_loss'], label='Val Loss')\nplt.xlabel('Epoch')\nplt.ylabel('Loss')\nplt.grid(color='#e6e6e6')\nplt.legend()\nplt.show()\n\nplt.title(f\"Train Accuracy ({acc}) and Validation Accuracy ({val_acc})\")\nplt.plot(fit_hist['binary_accuracy'], label='Train Acc')\nplt.plot(fit_hist['val_binary_accuracy'], label='Val Acc')\nplt.xlabel('Epoch')\nplt.ylabel('Accuracy')\nplt.grid(color='#e6e6e6')\nplt.legend()\nplt.show()","e6b6c8c5":"## Graphing the Results","7422689c":"## Creating the pipelines","fc74b729":"## Compiling the model\nI used the Adam optimizer with a learning rate of 1e-4 or 0.0001","673f0917":"## Training the model","7038998f":"## Making the model","14f25e0a":"# Pneumonia Detection Using Convolutional Neural Networks in TensorFlow","e35b6a4b":"## Visualizing and analyzing the data"}}