{"cell_type":{"6e4f6f4c":"code","4450ff76":"code","a4dcf196":"code","aa96a570":"code","bf7da326":"code","d7767139":"code","d0221b22":"code","f874b01f":"code","c467b44c":"code","a56ab9ec":"code","48c4d113":"code","5b4de03e":"code","d8ed2756":"code","426139fc":"code","ceda5c13":"code","05a26dee":"code","900c888e":"code","cffa10a9":"code","e0062c8a":"code","3c1515ba":"code","359e82c3":"code","db346912":"code","60c0313f":"code","a5f769a6":"code","d5f94dd8":"code","6250f4a4":"markdown","a2151053":"markdown","8e811953":"markdown","5f0fe393":"markdown","b978875f":"markdown","3feb0d51":"markdown","b24cdda7":"markdown","5a9a0723":"markdown","03a79a2f":"markdown","695580b3":"markdown","b13305cd":"markdown","30b57c73":"markdown","7264b147":"markdown"},"source":{"6e4f6f4c":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression, RidgeCV, LassoCV, ElasticNetCV\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import mean_squared_error\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')","4450ff76":"# the dataset\ntrain=pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")\ntestID = test['Id']\n\ndata = pd.concat([train.drop('SalePrice', axis=1), test], keys=['train', 'test'])\ndata.drop(['Id'], axis=1, inplace=True)","a4dcf196":"#check the decoration\ntrain.columns","aa96a570":"#descriptive statistics summary\ntrain['SalePrice'].describe()","bf7da326":"\n#histogram\nsns.distplot(train['SalePrice']);","d7767139":"\nnum_feats = ['OverallQual', 'OverallCond', \n             'YearBuilt', 'GarageCars',\n             'GrLivArea','TotalBsmtSF']  \ncat_feats = data.drop(num_feats, axis=1).columns   \nnum=data.drop(cat_feats,axis=1)\nnum.fillna(1,inplace=True)\nnum.isnull().sum()[data.isnull().sum() > 0]    ","d0221b22":"#scatter plot grlivarea\/saleprice\nvar = 'GrLivArea'\ndata = pd.concat([train['SalePrice'], train[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","f874b01f":"#scatter plot totalbsmtsf\/saleprice\nvar = 'TotalBsmtSF'\ndata = pd.concat([train['SalePrice'], train[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","c467b44c":"#box plot overallqual\/saleprice\nvar = 'OverallQual'\ndata = pd.concat([train['SalePrice'], train[var]], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);","a56ab9ec":"#box plot overallcond\/saleprice\nvar = 'OverallCond'\ndata = pd.concat([train['SalePrice'], train[var]], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);","48c4d113":"var = 'GarageCars'\ndata = pd.concat([train['SalePrice'], train[var]], axis=1)\nf, ax = plt.subplots(figsize=(16, 8))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);\nplt.xticks(rotation=90);","5b4de03e":"var = 'YearBuilt'\ndata = pd.concat([train['SalePrice'], train[var]], axis=1)\nf, ax = plt.subplots(figsize=(16, 8))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);\nplt.xticks(rotation=90);","d8ed2756":"#correlation matrix\ncorrmat = train.corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corrmat, vmax=.8, square=True);","426139fc":"#saleprice correlation matrix\nk = 10 #number of variables for heatmap\ncols = corrmat.nlargest(k, 'SalePrice')['SalePrice'].index\ncm = np.corrcoef(train[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","ceda5c13":"#scatterplot\nsns.set()\ncols = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'YearBuilt']\nsns.pairplot(train[cols], size = 2.5)\nplt.show();","05a26dee":"#standardizing data\nsaleprice_scaled = StandardScaler().fit_transform(train['SalePrice'][:,np.newaxis]);\nlow_range = saleprice_scaled[saleprice_scaled[:,0].argsort()][:10]\nhigh_range= saleprice_scaled[saleprice_scaled[:,0].argsort()][-10:]\nprint('outer range (low) of the distribution:')\nprint(low_range)\nprint('\\nouter range (high) of the distribution:')\nprint(high_range)","900c888e":"#applying log transformation\nprice = np.log1p(train['SalePrice'])","cffa10a9":"finaldata=num\nX_test = finaldata.loc['test']\nX_train = finaldata.loc['train']\n\ny_train = price\nm = X_train.mean()\nstd = X_train.std()\n\n\nX_train = (X_train - m) \/ std\nX_test = (X_test - m) \/ std","e0062c8a":"LR = LinearRegression()\n\n\nLR.fit(X_train, y_train)\nscore=cross_val_score(LR, X_train, y_train)","3c1515ba":"from sklearn.linear_model import RANSACRegressor\n\nRB = RANSACRegressor(base_estimator=LinearRegression(), max_trials=100)\nRB.fit(X_train, y_train)","359e82c3":"from sklearn.linear_model import Ridge\nRD = Ridge(alpha=100, solver='cholesky', tol=0.0001, random_state=42)\nRD.fit(X_train, y_train)","db346912":"from sklearn.linear_model import Lasso\n\nLS = Lasso(alpha=0.1,precompute=True, positive=True, selection='random',random_state=42)\nLS.fit(X_train, y_train)","60c0313f":"from sklearn.linear_model import ElasticNet\n\nEN = ElasticNet(alpha=0.1, l1_ratio=0.9, selection='random', random_state=42)\nEN.fit(X_train, y_train)","a5f769a6":"model = [LR, RB, RD, LS, EN]\nnum = len(model)\nCV = 5\nscore = np.empty((num, CV))\ngreatest = 0\ntemp =0\nfor i in range(0, num):\n    score[i, :] = cross_val_score(model[i], X_train, y_train, cv=CV)\nprint(score.mean(axis=1))","d5f94dd8":"prediction=RD.predict(X_test)\nsubmit = pd.DataFrame({'Id': testID, 'SalePrice': np.exp(RD.predict(X_test))})\nsubmit.to_csv('submission.csv', index=False)","6250f4a4":"'OverallQual', 'GrLivArea' and 'TotalBsmtSF' are strongly correlated with 'SalePrice'. \n'GarageCars' and 'GarageArea' are also some of the most strongly correlated variables. \n'TotalBsmtSF' and '1stFloor' also seem to be important however, we only need to keep 'TotalBsmSF'\n'TotRmsAbvGrd' and 'GrLivArea' we need to only keep 'GrLivArea'","a2151053":"# Compare which model performs better or with a better prediction","8e811953":"Thinking about what do we care the most when we buying a hose?\nWhat variables have higher expectation and remove the unimportant variables \nAfter going through some research online I decided to use the variables in the num_feats","5f0fe393":"### Relationship with numerical variables","b978875f":"### Univariate analysis","3feb0d51":"Prepare final data for trainning","b24cdda7":"#### 'SalePrice' correlation matrix (zoomed heatmap style)","5a9a0723":"'GrLivArea', 'TotalBsmtSF', and 'OverallQual' are seem to have great relation with SalePrice which means our assumption is correct.","03a79a2f":"# Train the model using the training sets","695580b3":"RD seems to have a better prediction thus we choose RD as our final model \nCreate the submission.csv with RD model","b13305cd":"A linear relationship between GrLivArea and SalePrice","30b57c73":"Import the dataset save the test Id for submission.csv","7264b147":"Low range values are similar and not too far from 0.\nHigh range values are far from 0 and the 7.something values are really out of range."}}