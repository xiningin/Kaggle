{"cell_type":{"d74577c0":"code","af71db2e":"code","90f1137a":"code","bac08137":"code","6d84ce6c":"code","19b2884b":"code","9dba7f03":"code","8d15b71d":"code","e271ad3a":"code","b879bb4d":"code","e6980ff1":"code","73a45f9c":"code","4fbf75c6":"code","05012729":"code","81e7719c":"code","4c200109":"code","67791ed9":"code","cbc5843f":"code","7e43bcdb":"code","57b302b7":"code","c3a0ca4e":"code","1357c703":"code","db975e6a":"code","47703d81":"code","f7d150e2":"code","369d28fb":"code","33b8ed53":"code","11df0d0a":"code","13e37420":"code","8053889d":"code","545875bf":"code","4943e1ae":"code","237f85bd":"code","ffee7677":"code","15af5a51":"code","35d1a56b":"code","0d4c8bae":"code","a6a3f622":"code","ac2dbe04":"code","78434d12":"code","bd9e9d57":"code","44b33f47":"code","509004bb":"code","0c991c3a":"code","e0e2b6f9":"code","9030f735":"code","9826bd0b":"code","392b8ade":"code","61af2c1e":"code","07030bf3":"code","d49fded9":"code","55243f85":"code","69bf4f43":"code","3bebc34a":"code","e7cbe94f":"code","169d087c":"code","243462b5":"code","9ece8920":"code","1363a156":"markdown"},"source":{"d74577c0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","af71db2e":"import numpy as np\nimport pandas as pd\n\ndf =  pd.read_csv('\/kaggle\/input\/new-york-city-taxi-fare-prediction\/train.csv', nrows = 10_000_000)\ndf.dtypes","90f1137a":"df.head(10)","bac08137":"df.shape","6d84ce6c":"df.describe()","19b2884b":"df.dropna()\ndf.shape","9dba7f03":"df.isnull().sum().sort_values(ascending=False)","8d15b71d":"df = df.drop(df[df['fare_amount']<0].index, axis=0)\ndf.shape","e271ad3a":"df.head(15)","b879bb4d":"df['fare_amount'].sort_values(ascending=False)","e6980ff1":"df = df.drop(df[df['fare_amount']==0].index, axis=0)\ndf.shape","73a45f9c":"print('Old size: %d' % len(df))\ndf = df.dropna(how = 'any', axis = 'rows')\nprint('New size: %d' % len(df))","4fbf75c6":"df.columns","05012729":"df['passenger_count'].describe()","81e7719c":"import matplotlib.pyplot as plt\ndf.passenger_count.hist(bins=200, figsize=(20,3))\nplt.title('Histogram');","4c200109":"df.passenger_count.describe","67791ed9":"df.head()","cbc5843f":"df=df.drop(df[df['passenger_count']>5].index,axis=0)\ndf.shape","7e43bcdb":"df['passenger_count'].describe()\n","57b302b7":"passenger_count = df['passenger_count']\nplt.hist(passenger_count)\nplt.show()\n\n","c3a0ca4e":"df['pickup_latitude'].describe()","1357c703":"df = df.drop((df[df['dropoff_latitude']<-90]).index, axis=0)\ndf = df.drop((df[df['dropoff_latitude']>90]).index, axis=0)\ndf = df.drop((df[df['pickup_latitude']<-90]).index, axis=0)\ndf = df.drop((df[df['pickup_latitude']>90]).index, axis=0)\ndf.shape","db975e6a":"df = df.drop((df[df['dropoff_longitude']<-180]).index, axis=0)\ndf = df.drop((df[df['dropoff_longitude']>180]).index, axis=0)\ndf = df.drop((df[df['pickup_longitude']<-180]).index, axis=0)\ndf = df.drop((df[df['pickup_longitude']>180]).index, axis=0)\ndf.shape","47703d81":"df.dtypes","f7d150e2":"df.head()","369d28fb":"df.dtypes","33b8ed53":"from datetime import datetime\ndf['key'] = pd.to_datetime(df['key'])\ndf.head()\n\n","11df0d0a":"df.dtypes","13e37420":"df.loc[:, 'year']= df['key'].dt.year\ndf.loc[:, 'month']= df['key'].dt.month\ndf.head()\n","8053889d":"df.loc[:, 'hour']= df['key'].dt.hour\ndf.loc[:, 'Day of Week']= df['key'].dt.dayofweek\ndf.head()","545875bf":"df.corr()","4943e1ae":"plt.figure(figsize=(15,7))\nplt.scatter(x=df['key'], y=df['fare_amount'], s=1.5)\nplt.xlabel('Date')\nplt.ylabel('Fare')\nplt.show()","237f85bd":"def haversine_distance(lat1, long1, lat2, long2):\n    data = [df]\n    for i in data:\n        R = 6371  #radius of earth in kilometers\n        #R = 3959 #radius of earth in miles\n        phi1 = np.radians(i[lat1])\n        phi2 = np.radians(i[lat2])\n    \n        delta_phi = np.radians(i[lat2]-i[lat1])\n        delta_lambda = np.radians(i[long2]-i[long1])\n    \n        #a = sin\u00b2((\u03c6B - \u03c6A)\/2) + cos \u03c6A . cos \u03c6B . sin\u00b2((\u03bbB - \u03bbA)\/2)\n        a = np.sin(delta_phi \/ 2.0) ** 2 + np.cos(phi1) * np.cos(phi2) * np.sin(delta_lambda \/ 2.0) ** 2\n    \n        #c = 2 * atan2( \u221aa, \u221a(1\u2212a) )\n        c = 2 * np.arctan2(np.sqrt(a), np.sqrt(1-a))\n    \n        #d = R*c\n        d = (R * c) #in kilometers\n        i['H_Distance'] = d\n    return d","ffee7677":"haversine_distance('pickup_latitude', 'pickup_longitude', 'dropoff_latitude', 'dropoff_longitude')","15af5a51":"df.head()","35d1a56b":"plt.figure(figsize=(15,7))\nplt.scatter(x=df['H_Distance'], y=df['fare_amount'], s=15.5)\nplt.xlabel('Distance')\nplt.ylabel('Fare')\nplt.show()","0d4c8bae":"df.sort_values(['H_Distance','fare_amount'], ascending=False)","a6a3f622":"df.corr()","ac2dbe04":"df.describe()","78434d12":"high_distance = df.loc[(df['H_Distance']>200)&(df['fare_amount']!=0)]\nhigh_distance.shape","bd9e9d57":"high_distance.describe()","44b33f47":"df.groupby('passenger_count')['H_Distance','fare_amount'].mean()","509004bb":"df=df.drop(df[df['passenger_count']==0].index,axis=0)\ndf.shape","0c991c3a":"df.groupby('passenger_count')['H_Distance','fare_amount'].mean()","e0e2b6f9":"df.head()","9030f735":"import seaborn as sns\nplt.figure(figsize = (10, 6))\nsns.distplot(df['fare_amount']);\nplt.title('Distribution of Fare');","9826bd0b":"df.head()","392b8ade":"df.columns","61af2c1e":"df.passenger_count.unique()","07030bf3":"def generate_features(df):\n    \n    aggs={}\n    aggs['month']= ['nunique','mean']\n    aggs['year']= ['nunique']\n    aggs['hour']= ['nunique','mean']\n    aggs['Day of Week']=['nunique','mean']\n    aggs['passenger_count']=['nunique']\n    aggs['fare_amount']=['mean']\n    agg_df=df.groupby('key').agg(aggs)\n    agg_df = agg_df.reset_index()\n    \n    return agg_df\n    ","d49fded9":"print(generate_features(df))","55243f85":"generate_features(df).head()","69bf4f43":"df.head()","3bebc34a":"df.dtypes","e7cbe94f":"from sklearn import preprocessing\n\nlbl_enc = preprocessing.LabelEncoder()\ndf.loc[:,'year']=lbl_enc.fit_transform(df.year.values)","169d087c":"df.head()","243462b5":"from sklearn import ensemble\nfrom sklearn import metrics\nfrom sklearn import model_selection\n\nX= df[['passenger_count','year','month','hour','Day of Week','H_Distance']].values\ny= df.fare_amount.values","9ece8920":"reg = ensemble.RandomForestRegressor()\n\nparam_grid = {\n    'n_estimators':[100,200,300,400,500],\n    'max_depth' : [1,2,5,7,11,15],\n    'criterion': ['mse','mae']\n}","1363a156":"model = model_selection.GridSearchCV(\n    estimator = reg,\n    param_grid=param_grid,\n    scoring='accuracy',\n    verbose=10,\n    n_jobs=1,\n    cv=5\n)"}}