{"cell_type":{"bcd4cbee":"code","16380d20":"code","fc1438e1":"code","7144f426":"code","e8bd26b8":"code","24daf137":"code","c8ead46f":"code","f6ae4b0b":"code","7869dc37":"code","05c0beb0":"code","626aa588":"markdown"},"source":{"bcd4cbee":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport pandas as pd\nimport numpy as np\nimport scipy.sparse\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=FutureWarning)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom numpy import hstack\nfrom numpy import vstack\nfrom numpy import asarray\nfrom pandas.core.common import flatten\n\nfrom sklearn.model_selection import KFold\n\n\n\nfrom sklearn import metrics\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import roc_curve,accuracy_score,confusion_matrix,recall_score,precision_score,f1_score, auc, roc_auc_score\nfrom sklearn.model_selection import train_test_split, GridSearchCV\n\n# Our algorithms, by from the easiest to the hardest to intepret.\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom xgboost.sklearn import XGBClassifier\nfrom mlens.ensemble import SuperLearner\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier, cv, Pool\n\nimport os\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","16380d20":"df =pd.read_csv('\/kaggle\/input\/malware-executable-detection\/uci_malware_detection.csv')\nprint(df.shape)\ndf.head()","fc1438e1":"df['Label'] = df['Label'].map({'non-malicious': 1, 'malicious': 0})\nprint(df.shape)\ndf.head()","7144f426":"df = df.drop_duplicates(keep=False)\nprint(df.shape)","e8bd26b8":"# Get X, y\ny = df[\"Label\"]\nX = df.drop(\"Label\", axis=1)","24daf137":"print(\"Target Attribute distribution \\n\")\nprint(df.Label.value_counts(),\"\\n\")\n\nfig,ax= plt.subplots()\nfig.set_size_inches(20,5)\nsns.countplot(x= \"Label\",data=df,ax= ax)\nplt.show()","c8ead46f":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test= train_test_split(X,y, test_size=0.2, random_state=42)\n\nprint(X_train.shape, y_train.shape)\nprint(X_test.shape, y_test.shape)","f6ae4b0b":"# 1. Logistic Regression\nlr_model =  LogisticRegression(max_iter=500 ,random_state=42)\n\n# 2. Decision Tree\ndt_model =  DecisionTreeClassifier()\n\n# 3. Naive Bayes\nnb_model = GaussianNB()\n\n# 4. Random Forest\nrf_model = RandomForestClassifier( n_jobs=-1)\n\n# 5. KNN\nknn_model = KNeighborsClassifier(n_jobs=-1)\n\n# 6. AdaBoost\nada_boost_model = AdaBoostClassifier()\n\n# 7. XgBoost\nxg_boost_model = XGBClassifier()\n\n# 8. Bagging\nbagging_model = BaggingClassifier()\n\n# 9. ExtraTrees \nextra_trees_model = ExtraTreesClassifier()\n\n# 10. SVM\n#svm_model = SVC(probability=True)\n\n# 11. LGBM classifier\nlgbm_model = LGBMClassifier(random_state = 16)\n\n# 12. Categorical Boosting\ncatboost_model = CatBoostClassifier()\n\n######################### LIST OF ALL MODELS #############################3\nensemble_clf=[lr_model, dt_model, nb_model, rf_model, knn_model, ada_boost_model, \\\n              xg_boost_model, bagging_model,extra_trees_model,lgbm_model ] \n\n#print(ensemble_clf)\nprint(len(ensemble_clf))","7869dc37":"for i in range(len(ensemble_clf)):\n    # Initialising model\n    print('#############################'+str(type(ensemble_clf[i]).__name__)+'#############################')\n    #Fitting on data\n    ensemble_clf[i].fit(X_train, y_train)\n\n    #Scoring the model on train data\n    print(\"Training Accuracy :\\t \", ensemble_clf[i].score(X_train, y_train))\n\n    #Scoring the model on test_data\n    print(\"Testing Accuracy :\\t  \",  ensemble_clf[i].score(X_test, y_test))\n\n    y_pred = ensemble_clf[i].predict(X_test)\n    print(accuracy_score(y_test, y_pred))\n    print('ROC-AUC score', roc_auc_score(y_test,y_pred))\n    print('Confusion matrix:\\n ', confusion_matrix(y_test, y_pred))","05c0beb0":"# create a list of base-models\n\ndef get_models():\n    models = list()\n    models.append(LogisticRegression(max_iter=500 ,random_state=42))\n    models.append(dt_model)\n    #models.append(SVC(gamma='scale', probability=True))\n    models.append(nb_model)\n    #models.append(knn_model)\n    models.append(ada_boost_model)\n    models.append(xg_boost_model)\n    models.append(rf_model)\n    models.append(bagging_model)\n    models.append(extra_trees_model)\n    return models\n\n\n# create the super learner\ndef get_super_learner(X):\n    ensemble = SuperLearner(scorer=accuracy_score, folds=10, sample_size=len(X))\n    # add base models\n    models = get_models()\n    ensemble.add(models)\n    # add the meta model\n    #ensemble.add_meta(LogisticRegression(solver='lbfgs'))\n    ensemble.add_meta(LogisticRegression(solver='lbfgs'))\n    return ensemble\n\n\nprint('Train', X_train.shape, y_train.shape, 'Test', X_test.shape, y_test.shape)\n# create the super learner\nensemble_mlens = get_super_learner(X_train)\n# fit the super learner\nensemble_mlens.fit(X_train, y_train)\n# summarize base learners\nprint(ensemble_mlens.data)\n# make predictions on hold out set\nyhat = ensemble_mlens.predict(X_test)\nprint('Super Learner: %.3f' % (accuracy_score(y_test, yhat) * 100))\nprint('ROC-AUC score', roc_auc_score(y_test, yhat))\nprint('Confusion matrix:\\n ', confusion_matrix(y_test, yhat))","626aa588":"### Super Classifier"}}