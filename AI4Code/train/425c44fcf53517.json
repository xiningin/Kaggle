{"cell_type":{"522a3a49":"code","7a717632":"code","4cf3670b":"code","6c3cbe8d":"code","f85060c6":"code","0d2b32c0":"code","18748d25":"code","27f2475e":"code","907ee1dd":"code","2fe28450":"code","ab9273a0":"code","53d2fd3d":"code","d5735734":"code","fb22cdf5":"markdown","de5e4e3b":"markdown","f4082276":"markdown","e637817b":"markdown","96e0f6d0":"markdown","f18fd5f4":"markdown","8c93a9b7":"markdown","e8834aed":"markdown","39c9f511":"markdown","510c1b04":"markdown","bcb5f680":"markdown","ce023282":"markdown","e1dbad5f":"markdown","ae5ac76f":"markdown","67af37e3":"markdown","c9739afd":"markdown","e0ec883c":"markdown","a1ed48e0":"markdown","d67be944":"markdown","006b76d5":"markdown","ebee34d6":"markdown"},"source":{"522a3a49":"import pandas as pd\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.model_selection import GridSearchCV\n\nfrom lwoku import RANDOM_STATE, N_JOBS, VERBOSE, get_prediction\nfrom grid_search_utils import plot_grid_search, table_grid_search\n\nimport pickle","7a717632":"# Read training and test files\nX_train = pd.read_csv('..\/input\/learn-together\/train.csv', index_col='Id', engine='python')\nX_test = pd.read_csv('..\/input\/learn-together\/test.csv', index_col='Id', engine='python')\n\n# Define the dependent variable\ny_train = X_train['Cover_Type'].copy()\n\n# Define a training set\nX_train = X_train.drop(['Cover_Type'], axis='columns')","4cf3670b":"lda_clf = LinearDiscriminantAnalysis()","6c3cbe8d":"parameters = {\n    'solver': ['svd', 'lsqr'] # eigen solver fails\n}\nclf = GridSearchCV(lda_clf, parameters, cv=5, verbose=VERBOSE, n_jobs=N_JOBS)\nclf.fit(X_train, y_train)\nplot_grid_search(clf)\ntable_grid_search(clf)","f85060c6":"parameters = {\n    'solver': ['lsqr'],\n    'shrinkage': [None] + [x \/ 10 for x in range(0, 11)] + ['auto']\n}\nclf = GridSearchCV(lda_clf, parameters, cv=5, verbose=VERBOSE, n_jobs=N_JOBS)\nclf.fit(X_train, y_train)\nplot_grid_search(clf)\ntable_grid_search(clf)","0d2b32c0":"parameters = {\n    'n_components': [None] + [1, 2, 5, 8, 13, 21, 34, 55]\n}\nclf = GridSearchCV(lda_clf, parameters, cv=5, verbose=VERBOSE, n_jobs=N_JOBS)\nclf.fit(X_train, y_train)\nplot_grid_search(clf)\ntable_grid_search(clf)","18748d25":"parameters = {\n    'solver': ['svd'],\n    'store_covariance': [True, False]\n}\nclf = GridSearchCV(lda_clf, parameters, cv=5, verbose=VERBOSE, n_jobs=N_JOBS)\nclf.fit(X_train, y_train)\nplot_grid_search(clf)\ntable_grid_search(clf)","27f2475e":"parameters = {\n    'tol': [1e-2, 1e-3, 1e-4, 1e-5, 1e-6, 1e-7, 1e-8, 1e-9, 1e-10, 1e-11, 1e-12, 1e-13, 1e-14, 1e-15]\n}\nclf = GridSearchCV(lda_clf, parameters, cv=5, verbose=VERBOSE, n_jobs=N_JOBS)\nclf.fit(X_train, y_train)\nplot_grid_search(clf)\ntable_grid_search(clf)","907ee1dd":"parameters = {\n    'solver': ['svd', 'lsqr'],\n    'n_components': [None] + [1, 2, 5, 8, 13, 21, 34, 55],\n    'store_covariance': [True, False],\n    'tol': [1e-2, 1e-3, 1e-4, 1e-5, 1e-6, 1e-7, 1e-8, 1e-9, 1e-10, 1e-11, 1e-12, 1e-13, 1e-14, 1e-15]\n}\nclf = GridSearchCV(lda_clf, parameters, cv=5, verbose=VERBOSE, n_jobs=N_JOBS)\nclf.fit(X_train, y_train)\nplot_grid_search(clf)\ntable_grid_search(clf)","2fe28450":"parameters = {\n    'solver': ['lsqr'],\n    'shrinkage': [None] + [x \/ 10 for x in range(0, 11)] + ['auto'],\n    'n_components': [None] + [1, 2, 5, 8, 13, 21, 34, 55],\n    'store_covariance': [True, False],\n    'tol': [1e-2, 1e-3, 1e-4, 1e-5, 1e-6, 1e-7, 1e-8, 1e-9, 1e-10, 1e-11, 1e-12, 1e-13, 1e-14, 1e-15]\n}\nclf = GridSearchCV(lda_clf, parameters, cv=5, verbose=VERBOSE, n_jobs=N_JOBS)\nclf.fit(X_train, y_train)\nplot_grid_search(clf)\ntable_grid_search(clf)","ab9273a0":"parameters = {\n    'solver': ['lsqr'],\n    'shrinkage': [None] + [x \/ 10 for x in range(0, 11)] + ['auto']\n}\nclf = GridSearchCV(lda_clf, parameters, cv=5, verbose=VERBOSE, n_jobs=N_JOBS)\nclf.fit(X_train, y_train)\nplot_grid_search(clf)\ntable_grid_search(clf)","53d2fd3d":"with open('clf.pickle', 'wb') as fp:\n    pickle.dump(clf, fp)","d5735734":"lda_clf = clf.best_estimator_\nlda_clf","fb22cdf5":"The best results are get with solver `lsqr` and shrinkage `auto`.\nAll other parameters has no effect in getting a better score.","de5e4e3b":"The better solver without shrinkage is `lsqr`.\n\nThe parameters: `n_components`, `store_covariance` and `tol`, have no effect in the score.","f4082276":"# Introduction\n\nThe aim of this notebook is to optimize the Logistic Regression model.\n\nFirst, all [Linear Discriminant Analysis](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.html#sklearn.discriminant_analysis.LinearDiscriminantAnalysis) parameters are analysed separately.\n\nThen, a grid search is carried out.\nThis is a search through all the combinations of parameters,\nwhich optimize the internal score in the train set.\n\nThe results are collected at [Tactic 03. Hyperparameter optimization](https:\/\/www.kaggle.com\/juanmah\/tactic-03-hyperparameter-optimization).","e637817b":"Shrinkage `auto` gets a better score.\n\nThe parameters: `n_components`, `store_covariance` and `tol`, have no effect in the score.","96e0f6d0":"# solver\n##### : string, optional\n\nSolver to use, possible values:\n  - 'svd': Singular value decomposition (default).\n    Does not compute the covariance matrix, therefore this solver is\n    recommended for data with a large number of features.\n  - 'lsqr': Least squares solution, can be combined with shrinkage.\n  - 'eigen': Eigenvalue decomposition, can be combined with shrinkage.","f18fd5f4":"# Search over parameters","8c93a9b7":"# shrinkage\n##### : string or float, optional\n\n> Shrinkage parameter, possible values:\n>   - None: no shrinkage (default).\n>   - 'auto': automatic shrinkage using the Ledoit-Wolf lemma.\n>   - float between 0 and 1: fixed shrinkage parameter.\n> Note that shrinkage works only with 'lsqr' and 'eigen' solvers.","e8834aed":"# store_covariance\n##### : bool, optional\n\nAdditionally compute class covariance matrix (default False), used\n![](http:\/\/)only in 'svd' solver.","39c9f511":"# Exhaustive search","510c1b04":"# priors\n##### : array, optional, shape (n_classes,)\n\nClass priors.\n\n**Not applied**","bcb5f680":"The parameter `tol` has no effect in the score, neither the fit time.","ce023282":"# n_components\n###### : int, optional (default=None)\n\nNumber of components (<= min(n_classes - 1, n_features)) for\ndimensionality reduction. If None, will be set to\nmin(n_classes - 1, n_features).","e1dbad5f":"The solver `eigen` fails. The both working solvers has the same score. ","ae5ac76f":"To try the effect of shrinkage, a grid search with fixed solver `lsqr` is performed.","67af37e3":"# Prepare data","c9739afd":"The solver `lsqr` with  shrinkage `auto` has a slightly better score.","e0ec883c":"The score is equal regardless the number of components. The fit time is the same too.","a1ed48e0":"# Conclusion","d67be944":"# tol\n##### : float, optional, (default 1.0e-4)\n\nThreshold used for rank estimation in SVD solver.","006b76d5":"## Export grid search results","ebee34d6":"The parameter `store_covariance` has no effect in the score."}}