{"cell_type":{"16b66207":"code","a9267c03":"code","143c5610":"code","e22f9c7f":"code","17034267":"code","c4857798":"code","4e750964":"code","a04549d7":"markdown","f104c559":"markdown","7b76e4c0":"markdown","16038ff6":"markdown"},"source":{"16b66207":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\n\n# Read the data\nX_full = pd.read_csv('..\/input\/home-data-for-ml-course\/train.csv', index_col='Id')\nX_test_full = pd.read_csv('..\/input\/home-data-for-ml-course\/test.csv', index_col='Id')\n\n# Remove rows with missing target, separate target from predictors\nX_full.dropna(axis=0, subset=['SalePrice'], inplace=True)\ny = X_full.SalePrice\nX_full.drop(['SalePrice'], axis=1, inplace=True)\n\n# Break off validation set from training data\nX_train_full, X_valid_full, y_train, y_valid = train_test_split(X_full, y, \n                                                                train_size=0.8, test_size=0.2,\n                                                                random_state=0)\n\n# \"Cardinality\" means the number of unique values in a column\n# Select categorical columns with relatively low cardinality (convenient but arbitrary)\ncategorical_cols = [cname for cname in X_train_full.columns if\n                    X_train_full[cname].nunique() < 10 and \n                    X_train_full[cname].dtype == \"object\"]\n\n# Select numerical columns\nnumerical_cols = [cname for cname in X_train_full.columns if \n                X_train_full[cname].dtype in ['int64', 'float64']]\n\n# Keep selected columns only\nmy_cols = categorical_cols + numerical_cols\nX_train = X_train_full[my_cols].copy()\nX_valid = X_valid_full[my_cols].copy()\nX_test = X_test_full[my_cols].copy()","a9267c03":"X_train.head()","143c5610":"from sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\nimport numpy as np\n\n# Preprocessing for numerical data\nnumerical_transformer = SimpleImputer(strategy='constant')\n\n# Preprocessing for categorical data\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n\n# Bundle preprocessing for numerical and categorical data\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_cols),\n        ('cat', categorical_transformer, categorical_cols)\n    ])\n\n# # RF Define model\n# rf_model = RandomForestRegressor(n_estimators=700, random_state=0)\n\n# # Bundle preprocessing and modeling code in a pipeline\n# rf_clf = Pipeline(steps=[('preprocessor', preprocessor),\n#                       ('rf_model', rf_model)\n#                      ])\n\n# # Preprocessing of training data, fit model \n# rf_clf.fit(X_train, y_train)\n\n# # Preprocessing of validation data, get predictions\n# rf_preds = rf_clf.predict(X_valid)\n\n\n\n# GB Define model\nGB_model = GradientBoostingRegressor(n_estimators=750, random_state=0)\n\n# Bundle preprocessing and modeling code in a pipeline\nGB_clf = Pipeline(steps=[('preprocessor', preprocessor),\n                      ('GB_model', GB_model)\n                     ])\n\n# Preprocessing of training data, fit model \nGB_clf.fit(X_train, y_train)\n\n# Preprocessing of validation data, get predictions\nGB_preds = GB_clf.predict(X_valid)\n\n# print('RF_MAE:', mean_absolute_error(y_valid, rf_preds))\nprint('GB_MAE:', mean_absolute_error(y_valid, GB_preds))","e22f9c7f":"# Preprocessing for numerical data\nnumerical_transformer = SimpleImputer(strategy='mean')\n# Preprocessing for categorical data\ncategorical_transformer = Pipeline(steps=[('imputer', SimpleImputer(strategy='most_frequent')),('onehot', OneHotEncoder(handle_unknown='ignore'))])\n\n# Bundle preprocessing for numerical and categorical data\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_cols),\n        ('cat', categorical_transformer, categorical_cols)\n    ])\n\n# Define model\nmodel = GradientBoostingRegressor(n_estimators=750, random_state=0)","17034267":"# Bundle preprocessing and modeling code in a pipeline\nmy_pipeline = Pipeline(steps=[('preprocessor', preprocessor),('model', model)])\n\n# Preprocessing of training data, fit model \nmy_pipeline.fit(X_train, y_train)\n\n# Preprocessing of validation data, get predictions\npreds = my_pipeline.predict(X_valid)\n\n# Evaluate the model\nscore = mean_absolute_error(y_valid, preds)\nprint('MAE:', score)\nprint('RMSE:', np.sqrt(mean_squared_error(y_valid, preds)))","c4857798":"# Preprocessing of test data, fit model\npreds_test = my_pipeline.predict(X_test)","4e750964":"output = pd.DataFrame({'Id': X_test.index,\n                       'SalePrice': preds_test})\noutput.to_csv('submission.csv', index=False)","a04549d7":"---\n\n\n\n\n*Have questions or comments? Visit the [Learn Discussion forum](https:\/\/www.kaggle.com\/learn-forum\/161289) to chat with other Learners.*","f104c559":"### Step 3: Save test predictions to file","7b76e4c0":"### Step 2: Generate test predictions","16038ff6":"### Step 1: Improve the performance"}}