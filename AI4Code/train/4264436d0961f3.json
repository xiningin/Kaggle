{"cell_type":{"92aeb1d8":"code","ed1d39a7":"code","41266343":"code","5d257a93":"code","ecdf47ad":"code","278f1010":"code","469bfc61":"code","9d58b3d2":"code","d5fd86c9":"code","097b1737":"code","3d59c684":"code","7e456063":"code","e957ca1f":"code","064bea47":"code","dceb3342":"code","f4d15581":"code","b86c1219":"code","6dcf64cd":"code","7cb0d812":"code","5a89d7e0":"code","878bce46":"code","0d20c8ac":"code","eca6bc40":"code","76fdef4e":"code","61194edb":"code","56377e48":"code","623d7d7e":"code","6c15f8ac":"code","6b4d25f1":"code","1251c6f3":"code","0e2528a7":"code","b0a612b5":"markdown","5d390b8f":"markdown","af88c33a":"markdown","a2747bd8":"markdown","c7611dd4":"markdown","682e4345":"markdown","012217df":"markdown","d50eed01":"markdown","ca1f0d69":"markdown","59d44caa":"markdown","ed9a0ba4":"markdown","63727531":"markdown","fcb4d136":"markdown","c0a0cbac":"markdown","a22da9a1":"markdown","d00127d4":"markdown","30cf2831":"markdown","d827f34b":"markdown","18c035a2":"markdown","8ad952f0":"markdown"},"source":{"92aeb1d8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport itertools as it\nfrom itertools import product\nimport seaborn as sns\nimport plotly.offline as py\nimport plotly.graph_objs as go\nimport folium\nimport os\n\nfrom decimal import Decimal\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","ed1d39a7":"def tem_numero(string): # Retornar se string possue numero\n  return any(char.isdigit() for char in string)\n\ndef remove_repetidos(array): # Remover Elementos Repetidos do Array\n    l = []\n    for i in array:\n        if i not in l:\n            l.append(i)\n    l.sort()\n    return l\n\ndef numero_em_cima(rects, ax):\n    for rect in rects:\n        height = rect.get_height()\n        ax.annotate('{}'.format(height),\n                    xy=(rect.get_x() + rect.get_width() \/ 2, height),\n                    xytext=(0, 3),  \n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\n","41266343":"dados = pd.read_csv('\/kaggle\/input\/opendataaigbrazil\/accidents.csv')\ndados.dataframeName = 'Accidents'\nnRow, nCol, = dados.shape\n\ndados","5d257a93":"remover_fator = []\nfor i in range(1, len(dados.columns)):\n  if tem_numero(dados.columns[i]) == True:\n    remover_fator.append(dados.columns[i])\n\ndados.drop(columns=remover_fator, inplace=True)\ndados.head(2)","ecdf47ad":"data_ocorrencias = []\nfor i in range(len(dados)):\n  data_ocorrencias.append(dados['ocorrencia_dia'][i])\n\nanos_ocorrencias = []\nano = []\nfor i in range(len(data_ocorrencias)):\n  ano.append(data_ocorrencias[i].split('-'))\n  anos_ocorrencias.append(ano[i][0])\n\n# Transformar anos para inteiro\nanos_int = []\nfor i in range(len(anos_ocorrencias)):\n  anos_int.append(int(anos_ocorrencias[i]))\nanos_int\n\ndados['ano'] = anos_int\n\ndados.head(2)","278f1010":"dados_lat_long = pd.read_csv('https:\/\/raw.githubusercontent.com\/jhiltonsantos\/ADS-Estatistica-IFPI\/master\/MunicipiosBrasil.csv')\n\ndados_lat_long.head(3)","469bfc61":"# Esses Dados j\u00e1 foram inseridos em um novo CSV (DADO PRONTOS)\n\n# Criando colunas latitude e longitude\n#dados['latitude'] = -9.42\n#dados['longitude'] = -30.89\n\n# Passando valores de base_geo_br.csv para dados\n#for i in range(len(dados_lat_long)):\n#  for k in range(len(dados)):\n#    if (dados['ocorrencia_cidade'][k] == dados_lat_long['MUNICIPIO'][i]) and (dados['ocorrencia_uf'][k] == dados_lat_long['UF'][i]):\n#      dados['latitude'][k] = dados_lat_long['LATITUDE'][i]\n#      dados['longitude'][k] = dados_lat_long['LONGITUDE'][i]\n\n#export_csv = dados.to_csv(r'drive\/My Drive\/dados_prontos.csv', index = None, header=True)","9d58b3d2":"dados_prontos = pd.read_csv('https:\/\/raw.githubusercontent.com\/jhiltonsantos\/ADS-Estatistica-IFPI\/master\/dados_prontos.csv')\ndados_prontos.head()","d5fd86c9":"mapa_br = folium.Map(location=[-12, -50],\n                 zoom_start = 4, control_scale = True, prefer_canvas=True)\n\n\nfor i in range (0, 5000, 5):\n  if dados_prontos['latitude'][i] != -9.42:\n    folium.Marker(\n        location=[dados_prontos['latitude'][i], dados_prontos['longitude'][i]],\n        popup=\"Codigo da Ocorrencia: \"+str(dados_prontos['codigo_ocorrencia'][i])+\"<br>\"\n              +\"<br>Estado(UF): \"+dados_prontos['ocorrencia_uf'][i]+\"<br>\"\n              +\"<br>Cidade:\"+dados_prontos['ocorrencia_cidade'][i]+\"<br>\"\n              +\"<br>Classificacao da Ocorrencia: \"+dados_prontos['ocorrencia_classificacao'][i]+\"<br>\"\n              +\"<br>Tipo de Ocorrencia: \"+dados_prontos['ocorrencia_tipo'][i]+\"<br>\"\n              +\"<br>Data:\"+dados_prontos['ocorrencia_dia'][i]+\"<br>\"\n              +\"<br>Modelo Aeronave: \"+dados_prontos['aeronave_modelo'][i]+\"<br>\"\n              +\"<br>Ano Fabricacao Aeronave: \"+str(dados_prontos['aeronave_ano_fabricacao'][i])+\"<br>\"\n              ,\n        icon=folium.Icon(color='red', icon='info-sign'),\n    ).add_to(mapa_br)\n\nmapa_br","097b1737":"cidades = ['RIO DE JANEIRO', 'SAO PAULO', 'BELO HORIZONTE', 'BRASILIA', 'GUARULHOS']\nanos = sorted(list(set(dados_prontos['ano'])))\nnot_null = dados_prontos.dropna()\ndic_anos = {i: [int(not_null.loc[not_null['ano'] == ano, \n                             ['quantidade_fatalidades']].loc[not_null['ocorrencia_cidade'] == i, \n                                                             ['quantidade_fatalidades']].sum()) for ano in anos] for i in cidades}\ndic_anos['ano'] = anos \ndados_anos = pd.DataFrame(dic_anos)\ndados_anos","3d59c684":"dados_m_anos = pd.DataFrame({'ano': anos, 'mortes': [int(not_null.loc[not_null['ano'] == ano, \n                                                                      ['quantidade_fatalidades']].sum()) for ano in anos]})\ndados_m_anos = dados_m_anos.sort_values('mortes')\ndados_m_anos","7e456063":"f, ax = plt.subplots()\npallete = sns.cubehelix_palette(11, 3, 0.4, 0.60, 0.8, 0.6)\n\nsns.barplot(dados_m_anos['ano'], dados_m_anos['mortes'], palette=pallete)\n\nax.set_xlabel('Anos')\nax.set_ylabel(\"Mortes\")\nax.set_title('Mortes por ano')\nplt.show()","e957ca1f":"dic_regioes = {'Nordeste': ['AL', 'BA', 'CE', 'MA', 'PB', 'PE', 'PI', 'RN', 'SE'],\n                'Norte': ['AM', 'RR', 'AP', 'PA', 'TO', 'RO', 'AC'],\n                'Centro Oeste': ['MT', 'MS', 'GO'], \n                'Sudeste': ['SP', 'RJ', 'ES', 'MG'],\n                'Sul': ['PR', 'RS', 'SC']}\ntipos = ['ACIDENTE', 'INCIDENTE']\ndic_01 = {i: [ len([k for k in list(dados_prontos.loc[dados_prontos['ocorrencia_classificacao'] == i, ['ocorrencia_uf']]['ocorrencia_uf'])\n                    if k in dic_regioes[j]]) for j in dic_regioes.keys()] for i in tipos}\n\ndic_01['tipo'] = list(dic_regioes.keys())\ndados_regioes = pd.DataFrame(dic_01)\ndados_regioes","064bea47":"x = np.arange(5)\nwidth = 0.35\n\nfig, ax = plt.subplots()\nrects1 = ax.bar(x - width\/2, dados_regioes['ACIDENTE'], width, label='ACIDENTE')\nrects2 = ax.bar(x + width\/2, dados_regioes['INCIDENTE'], width, label='INCIDENTE')\n\nax.set_ylabel('Ocorr\u00eancias')\nax.set_title('REGI\u00d5ES\\nACIDENTE vs INCIDENTE')\nax.set_xticks(x)\nax.set_xticklabels(dados_regioes['tipo'])\nax.legend()\n\nnumero_em_cima(rects1, ax)\nnumero_em_cima(rects2, ax)\n\nfig.tight_layout()\n\nplt.show()","dceb3342":"plt.text(40, 0.6, 'Mediana de mortes: %.2f'%(np.median(np.array(dados_m_anos['mortes']))))\nplt.text(40, 0.7, 'M\u00e9dia de mortes: %.2f'%(np.mean(np.array(dados_m_anos['mortes']))))\nplt.boxplot(dados_m_anos['mortes'], 0, 'rs', 0)\nplt.title('BoxPlot do numero de mortes por ano')\nplt.show()","f4d15581":"tipos_operacao = list(set(dados_prontos['aeronave_tipo_operacao']))\ntodos_inicidentes = list(dados_prontos.loc[(dados_prontos['ocorrencia_classificacao']) == 'INCIDENTE', ['aeronave_tipo_operacao']]\n                         ['aeronave_tipo_operacao'])\nqtd_incidentes_tipo = pd.DataFrame({'Tipo': tipos_operacao, 'Incidentes': [todos_inicidentes.count(i) for i in tipos_operacao]})\nqtd_incidentes_tipo = qtd_incidentes_tipo.sort_values(['Incidentes'])","b86c1219":"todos_acidentes = list(dados_prontos.loc[(dados_prontos['ocorrencia_classificacao']) == 'ACIDENTE', ['aeronave_tipo_operacao']]\n                         ['aeronave_tipo_operacao'])\nqtd_acidentes_tipo = pd.DataFrame({'Tipo': tipos_operacao, 'Acidentes': [todos_acidentes.count(i) for i in tipos_operacao]})\nqtd_acidentes_tipo = qtd_acidentes_tipo.sort_values(['Acidentes'])","6dcf64cd":"f, ax = plt.subplots()\npallete = sns.cubehelix_palette(10, 3, 0.4, 0.60, 0.8, 0.6)\n\nsns.barplot(qtd_incidentes_tipo['Incidentes'], qtd_incidentes_tipo['Tipo'], palette=pallete)\n\nax.invert_yaxis()\nax.set_xlabel('Quantidade de incidentes')\nax.set_ylabel(\"\")\nax.set_title('Tipos de opera\u00e7\u00e3o e numero de incidentes ')\n\nplt.show()","7cb0d812":"f, ax = plt.subplots()\npallete = sns.cubehelix_palette(10, 5, 0.4, 0.60, 0.8, 0.6)\n\nsns.barplot(qtd_acidentes_tipo['Acidentes'], qtd_acidentes_tipo['Tipo'], palette=pallete)\n\nax.invert_yaxis()\nax.set_xlabel('Quantidade de Acidentes')\nax.set_ylabel(\"\")\nax.set_title('Tipos de opera\u00e7\u00e3o e numero de Acidentes ')\n\nplt.show()","5a89d7e0":"data = pd.DataFrame ({\n    'lat' : [-23.52, -22.9, -19.81, -25.42,  -30.03, -16.67, -1.45, -15.59, -3.1,    -12.97, -27.59,  -15.78,  -20.44,  -8.05,    -3.71,   -20.31,   -2.53,   -9.97,   -10.16,   2.82,   -5.08,   -8.76,  -7.11,    -10.91,   -9.66,    -6.19,    0.03,       -9.42],\n    'lon' : [-46.63, -43.2, -43.95, -49.27,  -51.23, -49.25, -48.5, -56.09, -60.02,  -38.51, -48.54,   -47.93, -54.64,  -34.88,   -38.54,  -40.33,   -44.3,  -67.81,   -48.33,  -60.67,  -42.8,   -63.9,  -34.86,   -37.07,   -35.73,   -35.16,   -51.06,     -30.89],\n    'name' : ['SP',   'RJ',   'MG',   'PR',   'RS',   'GO',  'PA',  'MT',    'AM',   'BA',    'SC',   'DF',     'MS',    'PE',    'CE',    'ES',      'MA',   'AC',     'TO',   'RR',     'PI',   'RO',   'PB',     'SE',     'AL',     'RN',    'AP',    'AGUAS INTERNACIONAIS'],\n    'value' : [1191,  496,    458,    428,    344,    263,   244,   238,     216,    206,      160,    154,     129,     87,       71,      66,       59,     52,       51,     51,       38,      28,     20,      19,       16,       15,       13,         3]\n})","878bce46":"map_br = folium.Map(location=[-12, -50],\n                 zoom_start = 4, control_scale = True, prefer_canvas=True)\n\n\ndata['value']=data.value.astype(float)\n\nfor i in range(0,len(data)):\n   folium.Circle(\n      location=[data.iloc[i]['lat'], data.iloc[i]['lon']],\n      popup=\"<br>ESTADO: \"+data.iloc[i]['name']+\"<br>\"+\"<br>QUANTIDADE DE ACIDENTES: \" + str(int(data['value'][i])),\n      radius=data.iloc[i]['value']*300,\n      color='crimson',\n      fill=True,\n      fill_color='crimson'\n   ).add_to(map_br)\n\nmap_br","0d20c8ac":"plt.style.use(\"ggplot\")\nacidentes_uf_bar = dados_prontos['ocorrencia_uf'].value_counts().plot(kind='bar',\n                                                         subplots=True,\n                                                         label='Quantidade de Ocorrencias por Estados',\n                                                         figsize=(15,8))","eca6bc40":"d_incidentes = pd.DataFrame ({\n    'fatalidade' : [21, 12, 0, 9, 2, 19, 0, 0, 2, 1],\n    'lat' : [-22.9, -23.54, -23.46, -19.81, -15.78, -23.31, -22.9, -30.03, -16.67, -12.97],\n    'lon' : [-43.2, -46.63, -46.53, -43.95, -47.93, -51.16, -47.06, -51.23, -49.25, -38.51],\n    'cidade' : ['RIO DE JANEIRO', 'SAO PAULO', 'GUARULHOS', 'BELO HORIZONTE', 'BRASILIA', 'LONDRINA',\n                'CAMPINAS','PORTO ALEGRE', 'GOIANIA', 'SALVADOR'],\n    'regiao' : ['SUDESTE','SUDESTE','SUDESTE','SUDESTE','CENTRO-OESTE', 'SUL', 'SUDESTE', 'SUL',\n                'CENTRO-OESTE', 'NORDESTE'],\n    'estado' : ['RJ','SP','SP','MG','DF','PR','SP','RS','GO', 'BA'],\n    'acidentes' : [239, 202, 137, 133, 123, 100, 96, 78, 76, 75]\n    })\n\nd_incidentes","76fdef4e":"mapa_incidente = folium.Map(location=[-23.54\t, -46.63\t],\n                 zoom_start = 5.4, control_scale = True, prefer_canvas=True)\n\nd_incidentes['acidentes']=d_incidentes.acidentes.astype(float)\n\nfor i in range(len(d_incidentes)):\n   folium.Circle(\n      location=[d_incidentes.iloc[i]['lat'], d_incidentes.iloc[i]['lon']],\n      popup=\"<br>CIDADE: \"+d_incidentes.iloc[i]['cidade']+\"<br>\"+\n            \"<br>ESTADO: \"+d_incidentes.iloc[i]['estado']+\"<br>\"+\n            \"<br>REGIAO: \"+d_incidentes.iloc[i]['regiao']+\"<br>\"+\n            \"<br>QUANTIDADE ACIDENTES: \"+str(int(d_incidentes.iloc[i]['acidentes']))+\"<br>\"+\n            \"<br>FATALIDADES: \" + str(d_incidentes.iloc[i]['fatalidade'])+\"<br>\",\n      radius=d_incidentes.iloc[i]['acidentes']*500,\n      color='crimson',\n      fill=True,\n      fill_color='crimson'\n   ).add_to(mapa_incidente)\n\nmapa_incidente","61194edb":"cidades = ['RIO DE JANEIRO', 'SAO PAULO', 'BELO HORIZONTE', 'BRASILIA', 'GUARULHOS']\nanos = sorted(list(set(dados_prontos['ano'])))\nnot_null = dados_prontos.dropna()\ndic_anos = {i: [int(not_null.loc[not_null['ano'] == ano, \n                             ['quantidade_fatalidades']].loc[not_null['ocorrencia_cidade'] == i, \n                                                             ['quantidade_fatalidades']].sum()) for ano in anos] for i in cidades}\ndic_anos['ano'] = anos \ndados_anos = pd.DataFrame(dic_anos)\ndados_anos","56377e48":"trace_bh = go.Scatter(x=dados_anos['ano'],\n                     y=dados_anos['BELO HORIZONTE'],\n                     mode = 'lines+markers',\n                     name='BELO HORIZONTE',\n                     line={'color': '#341f97',\n                            'dash': 'dash'})\n\ntrace_rj = go.Scatter(x=dados_anos['ano'],\n                     y=dados_anos['RIO DE JANEIRO'],\n                     mode = 'lines+markers',\n                     name='RIO DE JANEIRO',\n                     line={'color': '#F15230',\n                            'dash': 'dash'})\n\ntrace_sp = go.Scatter(x=dados_anos['ano'],\n                     y=dados_anos['SAO PAULO'],\n                     mode = 'lines+markers',\n                     name='SAO PAULO',\n                     line={'color': '#F1C40F',\n                            'dash': 'dash'})\n\ntrace_br = go.Scatter(x=dados_anos['ano'],\n                     y=dados_anos['BRASILIA'],\n                     mode = 'lines+markers',\n                     name='BRASILIA',\n                     line={'color': '#F130EE',\n                            'dash': 'dash'})\n\ntrace_gu = go.Scatter(x=dados_anos['ano'],\n                     y=dados_anos['GUARULHOS'],\n                     mode = 'lines+markers',\n                     name='GUARULHOS',\n                     line={'color': '#0C701B',\n                            'dash': 'dash'})\n\ndata = [trace_bh, trace_rj, trace_sp, trace_br, trace_gu]\n\nlayout = go.Layout(title='N\u00famero de Fatalidades nas Cinco Cidades com Maiores Ocorr\u00eancias',\n                   yaxis = {'title':'Mortes'},\n                   xaxis = {'title':'Anos'})\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","623d7d7e":"operacao_rj = list(set(dados_prontos['aeronave_tipo_operacao']))\ntodos_operacao_rj = list(dados_prontos.loc[(dados_prontos['ocorrencia_cidade'])=='RIO DE JANEIRO',\n                                           ['aeronave_tipo_operacao']]\n                         ['aeronave_tipo_operacao'])\n\nqtd_operacao_rj = pd.DataFrame({'Tipo':operacao_rj, 'Ocorrencia': [todos_operacao_rj.count(i) for i in operacao_rj]})\nqtd_operacao_rj = qtd_operacao_rj.sort_values(['Ocorrencia'])\n\nf, ax = plt.subplots()\npallete = sns.cubehelix_palette(10, 3, 0.4, 0.60, 0.8, 0.6)\n\nsns.barplot(qtd_operacao_rj['Ocorrencia'], qtd_operacao_rj['Tipo'], palette=pallete)\n\nax.invert_yaxis()\nax.set_xlabel('Quantidade de incidentes')\nax.set_ylabel(\"\")\nax.set_title('Tipos de opera\u00e7\u00e3o e Numero de Ocorrencias na Cidade do Rio de Janeiro ')\n\nplt.show()","6c15f8ac":"operacao_rj = list(set(dados_prontos['aeronave_tipo_operacao']))\ntodos_operacao_rj = list(dados_prontos.loc[(dados_prontos['ocorrencia_cidade'])=='BELO HORIZONTE',\n                                           ['aeronave_tipo_operacao']]\n                         ['aeronave_tipo_operacao'])\n\nqtd_operacao_rj = pd.DataFrame({'Tipo':operacao_rj, 'Ocorrencia': [todos_operacao_rj.count(i) for i in operacao_rj]})\nqtd_operacao_rj = qtd_operacao_rj.sort_values(['Ocorrencia'])\n\nf, ax = plt.subplots()\npallete = sns.cubehelix_palette(10, 3, 0.4, 0.60, 0.8, 0.6)\n\nsns.barplot(qtd_operacao_rj['Ocorrencia'], qtd_operacao_rj['Tipo'], palette=pallete)\n\nax.invert_yaxis()\nax.set_xlabel('Quantidade de incidentes')\nax.set_ylabel(\"\")\nax.set_title('Tipos de opera\u00e7\u00e3o e Numero de Ocorrencias na Cidade do Belo Horizonte ')\n\nplt.show()","6b4d25f1":"operacao_rj = list(set(dados_prontos['aeronave_tipo_operacao']))\ntodos_operacao_rj = list(dados_prontos.loc[(dados_prontos['ocorrencia_cidade'])=='SAO PAULO',\n                                           ['aeronave_tipo_operacao']]\n                         ['aeronave_tipo_operacao'])\n\nqtd_operacao_rj = pd.DataFrame({'Tipo':operacao_rj, 'Ocorrencia': [todos_operacao_rj.count(i) for i in operacao_rj]})\nqtd_operacao_rj = qtd_operacao_rj.sort_values(['Ocorrencia'])\n\nf, ax = plt.subplots()\npallete = sns.cubehelix_palette(10, 3, 0.4, 0.60, 0.8, 0.6)\n\nsns.barplot(qtd_operacao_rj['Ocorrencia'], qtd_operacao_rj['Tipo'], palette=pallete)\n\nax.invert_yaxis()\nax.set_xlabel('Quantidade de incidentes')\nax.set_ylabel(\"\")\nax.set_title('Tipos de opera\u00e7\u00e3o e Numero de Ocorrencias na Cidade do S\u00e3o Paulo')\n\nplt.show()","1251c6f3":"operacao_rj = list(set(dados_prontos['aeronave_tipo_operacao']))\ntodos_operacao_rj = list(dados_prontos.loc[(dados_prontos['ocorrencia_cidade'])=='BRASILIA',\n                                           ['aeronave_tipo_operacao']]\n                         ['aeronave_tipo_operacao'])\n\nqtd_operacao_rj = pd.DataFrame({'Tipo':operacao_rj, 'Ocorrencia': [todos_operacao_rj.count(i) for i in operacao_rj]})\nqtd_operacao_rj = qtd_operacao_rj.sort_values(['Ocorrencia'])\n\nf, ax = plt.subplots()\npallete = sns.cubehelix_palette(10, 3, 0.4, 0.60, 0.8, 0.6)\n\nsns.barplot(qtd_operacao_rj['Ocorrencia'], qtd_operacao_rj['Tipo'], palette=pallete)\n\nax.invert_yaxis()\nax.set_xlabel('Quantidade de incidentes')\nax.set_ylabel(\"\")\nax.set_title('Tipos de opera\u00e7\u00e3o e Numero de Ocorrencias na Cidade de Brasilia')\n\nplt.show()","0e2528a7":"operacao_rj = list(set(dados_prontos['aeronave_tipo_operacao']))\ntodos_operacao_rj = list(dados_prontos.loc[(dados_prontos['ocorrencia_cidade'])=='GUARULHOS',\n                                           ['aeronave_tipo_operacao']]\n                         ['aeronave_tipo_operacao'])\n\nqtd_operacao_rj = pd.DataFrame({'Tipo':operacao_rj, 'Ocorrencia': [todos_operacao_rj.count(i) for i in operacao_rj]})\nqtd_operacao_rj = qtd_operacao_rj.sort_values(['Ocorrencia'])\n\nf, ax = plt.subplots()\npallete = sns.cubehelix_palette(10, 3, 0.4, 0.60, 0.8, 0.6)\n\nsns.barplot(qtd_operacao_rj['Ocorrencia'], qtd_operacao_rj['Tipo'], palette=pallete)\n\nax.invert_yaxis()\nax.set_xlabel('Quantidade de incidentes')\nax.set_ylabel(\"\")\nax.set_title('Tipos de opera\u00e7\u00e3o e Numero de Ocorrencias na Cidade de Guarulhos')\n\nplt.show()","b0a612b5":"# An\u00e1lise de Dados de Acidentes Aereos (2008-2018)","5d390b8f":"## Importar Dados","af88c33a":"### Bubble Map com a Quantidade de Ocorr\u00eancia por Estados ","a2747bd8":"### Removendo Dados Nao Manipulados (Fator_*)","c7611dd4":"### Dados Originais - Opendata AIG Brazil (Centro de Investiga\u00e7\u00e3o e Preven\u00e7\u00e3o de Acidentes Aeron\u00e1uticos - CENIPA)","682e4345":"### N\u00famero de Fatalidades no Per\u00edodo de 2008 \u00e0 2018 ","012217df":"## 2. Classifica\u00e7\u00e3o por Estados","d50eed01":"### Adicionando Coluna \"ano\" aos Dados","ca1f0d69":"### Dados Prontos","59d44caa":"### Rela\u00e7\u00e3o de Acidentes x Incidentes","ed9a0ba4":"### Ocorrencias no Mapa","63727531":"## Fun\u00e7\u00f5es","fcb4d136":"### Mapa com as Dez Cidades com Maiores N\u00fameros de Ocorr\u00eancia","c0a0cbac":"### Dados do IBGE sobre os Municipios do Brasil","a22da9a1":"### Box Plot do N\u00famero de Mortes por Ano","d00127d4":"## 3. Classifica\u00e7\u00e3o por Cidades","30cf2831":"## 1. Ocorr\u00eancias no Pa\u00eds","d827f34b":"### N\u00famero do Tipos de Opera\u00e7\u00f5es que mais ocorrem","18c035a2":"### Quantidade de Acidentes por Estados","8ad952f0":"### N\u00famero de Fatalidades nas Cinco Cidades com Maiores Ocorr\u00eancias"}}