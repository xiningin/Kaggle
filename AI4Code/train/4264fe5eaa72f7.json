{"cell_type":{"956d0a55":"code","8747b385":"code","bad42383":"code","a39c27c9":"code","03c24e23":"code","7e7014e5":"code","f74d7d4c":"code","f8f795a0":"code","f7f14c14":"code","4565b9c7":"code","ed52f083":"code","20a398b0":"code","2a369cfa":"code","72fed0fc":"code","8609f27f":"code","206fcfd7":"code","6b18c990":"code","bed21bee":"code","909df78a":"code","3700848b":"code","cd164084":"code","6a98f8c9":"code","cf6b7c48":"markdown","a39ced2b":"markdown"},"source":{"956d0a55":"## Imports\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import roc_auc_score\n\nimport tensorflow as tf","8747b385":"## read data\npath = '..\/input\/cirrhosis-prediction-dataset\/cirrhosis.csv'\ndata = pd.read_csv(path)\nprint(data.shape)\ndata.head()","bad42383":"data.columns","a39c27c9":"data.describe()","03c24e23":"data.info()","7e7014e5":"## Data Cleaning\ndata['Age'] = data['Age'] \/ 365 # convert age to years\ndata.head()","f74d7d4c":"## Check missing values\ndata.isnull().any()","f8f795a0":"## Util functions\ndef plot_count(df, col):\n    count = df[col].value_counts()\n    plt.title(f'Value counts of {col}')\n    plt.xlabel(f'{col}')\n    plt.ylabel('Counts')\n    plt.bar(count.index, count.values);\n    return count\n\ndef fill_na_mean(df):\n    return df.fillna(df.mean())\n\ndef insert_missing_equal_classes(df, col):\n    # impute missing values while maintaining class ratios\n    count = 0\n    for index, row in df.iterrows():\n        if pd.isnull(row[col]) and count%2 == 0:\n            df[col].iloc[index] = df[col].value_counts().index[0]\n        elif pd.isnull(row[col]) and count%2 != 0:\n            df[col].iloc[index] = df[col].value_counts().index[1]\n        count += 1\n        \ndef insert_missing_unequal_classes(df, col):\n    count = 0\n    values = df[col].isnull().sum() \/ 2\n    for index, row in df.iterrows():\n        if pd.isnull(row[col]) and count <= values:\n            df[col].iloc[index] = df[col].value_counts().index[0]\n            count += 1\n        elif pd.isnull(row[col]) and count > values:\n            df[col].iloc[index] = df[col].value_counts().index[1]\n            count += 1","f7f14c14":"# Fix missing values in Drug\nplot_count(data, 'Drug')\n# seems like both are equally same so lets impute with equal in both to maintain the balance\nprint(\"Number of null rows:\", data['Drug'].isnull().sum())\ninsert_missing_equal_classes(data, 'Drug')","4565b9c7":"## handle missing values for ascites\nascites_count = plot_count(data, 'Ascites')\nprint(\"Number of null rows:\", data['Ascites'].isnull().sum())\ninsert_missing_unequal_classes(data, 'Ascites')\ndata['Ascites'].value_counts()","ed52f083":"## handle missing values for Hepatomegaly\nplot_count(data, 'Hepatomegaly')\nprint(data['Hepatomegaly'].isnull().sum())\ninsert_missing_equal_classes(data, 'Hepatomegaly')\nprint(data['Hepatomegaly'].isnull().sum())","20a398b0":"## Handle missing values for Spiders\nplot_count(data, 'Spiders')\ninsert_missing_unequal_classes(data, 'Spiders')","2a369cfa":"# Fill missing values with mean\nnumerical_col = ['Cholesterol', 'Copper', 'Alk_Phos', 'SGOT', 'Tryglicerides', 'Platelets', 'Prothrombin', 'Stage']\nfor col in numerical_col:\n    if col == 'Stage':\n        data[col] = data[col].fillna(data[col].mode()[0]) # Only Stage with mode as it is categorical\n    data[col] = fill_na_mean(data[col])","72fed0fc":"## Label encode all categorical columns\nfrom sklearn import preprocessing\n\ncategorical_cols = ['Status', 'Drug', 'Sex', 'Ascites', 'Hepatomegaly', 'Spiders', 'Edema', 'Stage']\nle = preprocessing.LabelEncoder()\nfor col in categorical_cols:\n    data[col] = le.fit_transform(data[col])","8609f27f":"## Lets check the target\nplot_count(data, 'Stage')","206fcfd7":"# Split the data\nX, y = data.drop(['ID', 'Stage'], axis=1), data['Stage']\nX_train, X_val, y_train, y_val = train_test_split(X, y, train_size = 0.8)\nprint(X_train.shape, X_val.shape)","6b18c990":"# Start with simpler models like Random Forest\nrf = RandomForestClassifier(criterion = 'entropy', max_depth = 20, n_estimators = 100)\nrf.fit(X_train, y_train)","bed21bee":"# Eval\nprobs = rf.predict_proba(X_val)\nscore = roc_auc_score(y_val, probs, multi_class = 'ovr')\nscore","909df78a":"# Train XGB\nxgb = XGBClassifier(use_label_encoder = False, eval_metric = 'mlogloss')\nparam_grid_xgb = [{'eta' : [0.005, 0.05, 0.1, 0.3, 0.5], 'max_depth' : [2, 4, 6, 8, 10], 'lambda': [0.25, 0.5, 1, 1.5, 2]}]\ngrid_search_xgb = GridSearchCV(xgb, param_grid_xgb, cv = 5, return_train_score = True)\ngrid_search_xgb.fit(X_train, y_train)","3700848b":"grid_search_xgb.best_params_, grid_search_xgb.best_score_","cd164084":"## Neural Network\n# set seed\ntf.random.set_seed(42)\n\n# model\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(4, activation=\"relu\"),\n    tf.keras.layers.Dense(100, activation=\"relu\"),\n    tf.keras.layers.Dense(10, activation=\"relu\"),\n    tf.keras.layers.Dense(4)\n])\n\n# compile\nmodel.compile(loss=\"binary_crossentropy\",\n                optimizer=tf.keras.optimizers.Adam(lr=0.01),\n                metrics=\"accuracy\")\n\n# fit model\nmodel.fit(X_train, y_train, epochs=500, verbose=0)","6a98f8c9":"model.evaluate(X_val, y_val)","cf6b7c48":"Let check what are these attributes\n\n1) ID: unique identifier\n\n2) N_Days: number of days between registration and the earlier of death, transplantation, or study analysis time in July 1986\n\n3) Status: status of the patient C (censored), CL (censored due to liver tx), or D (death)\n\n4) Drug: type of drug D-penicillamine or placebo\n\n5) Age: age in [days]\n\n6) Sex: M (male) or F (female)\n\n7) Ascites: presence of ascites N (No) or Y (Yes)\n\n8) Hepatomegaly: presence of hepatomegaly N (No) or Y (Yes)\n\n9) Spiders: presence of spiders N (No) or Y (Yes)\n\n10) Edema: presence of edema N (no edema and no diuretic therapy for edema), S (edema present without diuretics, or edema resolved by diuretics), or Y (edema despite diuretic therapy)\n\n11) Bilirubin: serum bilirubin in [mg\/dl]\n\n12) Cholesterol: serum cholesterol in [mg\/dl]\n\n13) Albumin: albumin in [gm\/dl]\n\n14) Copper: urine copper in [ug\/day]\n\n15) Alk_Phos: alkaline phosphatase in [U\/liter]\n\n16) SGOT: SGOT in [U\/ml]\n\n17) Triglycerides: triglicerides in [mg\/dl]\n\n18) Platelets: platelets per cubic [ml\/1000]\n\n19) Prothrombin: prothrombin time in seconds [s]\n\n20) Stage: histologic stage of disease (1, 2, 3, or 4)","a39ced2b":"### Next Steps?\n\n- For the numerical columns find the outliers and try to reduce them\n- Validate numerical columns (eg. Cholesterol highest is 125, to check if thats possible or is a glitch ?) \n- Try stacking of models\n- Tune Neural Network to perform better"}}