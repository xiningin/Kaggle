{"cell_type":{"7f0bdf26":"code","5ef18ac9":"code","d353f0c1":"code","ed777497":"code","eae4312b":"code","64a3cd22":"code","15a58194":"code","eb3bbfd1":"code","77011977":"code","a2133b5f":"code","0edad9cd":"code","0f5940dd":"code","3cdae21d":"code","95bc7943":"code","6a2059ec":"code","36610624":"code","25d0fcf8":"code","02be6934":"code","11e78686":"code","eb576004":"code","eb4e0c3e":"markdown","6618e510":"markdown","959461bf":"markdown","fdc9d17a":"markdown","6f31887f":"markdown","57e9634f":"markdown","a6da9682":"markdown","c310d2a5":"markdown"},"source":{"7f0bdf26":"  import numpy as np\n  import pandas as pd\n  from sklearn.tree import DecisionTreeClassifier # Import Decision Tree Classifier\n  from sklearn.model_selection import train_test_split # Import train_test_split function\n  from sklearn import metrics #Import scikit-learn metrics module for accuracy calculation","5ef18ac9":"col_name= ['pregnant', 'glucose', 'bp', 'skin', 'insulin', 'bmi', 'pedigree', 'age', 'label']\n","d353f0c1":"# load Dataset\ndiabetes = pd.read_csv(\"..\/input\/pima-data\/pima-indians-diabetes.csv\", header=None, names=col_name)\n","ed777497":"# Check The Dataset\ndiabetes.head()","eae4312b":"# first Describe the missing value in dataset\ndiabetes.isna().sum()","64a3cd22":"# second Describe the Standardization Dataset\nfrom sklearn import preprocessing\n  \nmin_max_scaler = preprocessing.MinMaxScaler(feature_range =(0, 1))\n  \ndiabetes_after_min_max_scaler = min_max_scaler.fit_transform(diabetes)\n  \nprint (\"\\nAfter min max Scaling : \\n\", diabetes_after_min_max_scaler)\n  \nStandardisation = preprocessing.StandardScaler()\n  \ndiabetes_after_Standardisation = Standardisation.fit_transform(diabetes)\n  \nprint (\"\\nAfter Standardisation : \\n\", diabetes_after_Standardisation)","15a58194":"#split dataset in features and target variable\nfeature_cols = ['pregnant', 'insulin', 'bmi', 'age','glucose','bp','pedigree'] \nX = diabetes[feature_cols].values # Features\ny = diabetes.label # Target variable","eb3bbfd1":"# Split dataset into training set and test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=1)","77011977":"clf = DecisionTreeClassifier()\n# Train Decision Tree Classifer\n\nclf = clf.fit(X_train,y_train)","a2133b5f":"#Predict the response for train dataset\ny_pred_train = clf.predict(X_train)","0edad9cd":"#Predict the response for test dataset\ny_pred = clf.predict(X_test)","0f5940dd":"# Model Accuracy, how often is the classifier correct?\nprint(\"Train Accuracy:\",metrics.accuracy_score(y_train, y_pred_train))","3cdae21d":"# Model Accuracy, how often is the classifier correct?\nprint(\"Test Accuracy:\",metrics.accuracy_score(y_test, y_pred))","95bc7943":"import graphviz\nfrom sklearn import tree\n# DOT data\ndot_data = tree.export_graphviz(clf, out_file=None,feature_names=feature_cols,class_names=['0','1'],\n                                filled=True)\n\n# Draw graph\ngraph = graphviz.Source(dot_data, format=\"png\") \ngraph","6a2059ec":"from sklearn import tree\ntree.plot_tree(clf,feature_names=feature_cols,  \n                   class_names=['0','1'],\n                   filled=True)","36610624":"clf_entropy = DecisionTreeClassifier(criterion = \"entropy\", max_depth=2, min_samples_leaf=5)\nclf_entropy = clf_entropy.fit(X_train,y_train)","25d0fcf8":"#Predict the response for train dataset\ny_pred_train = clf_entropy.predict(X_train)","02be6934":"#Predict the response for test dataset\ny_pred = clf_entropy.predict(X_test)","11e78686":"# Model Accuracy, how often is the classifier correct?\nprint(\"Train Accuracy:\",metrics.accuracy_score(y_train, y_pred_train))","eb576004":"# Model Accuracy, how often is the classifier correct?\nprint(\"Test Accuracy:\",metrics.accuracy_score(y_test, y_pred))","eb4e0c3e":"# Access the accuracy of your model.\n# Using A Entropy or Gini Method","6618e510":"# Spit the dataset into Train and Test dataset, respectively","959461bf":"# Upload The Data For Diabetes","fdc9d17a":"# Visualize your training data to know whether the relationship between dependent and \nindependent variable is linear.","6f31887f":"# Use train dataset to create a decision tree model.","57e9634f":" # Load libraries","a6da9682":"# Detailing Of dataset Making In Small size Tree","c310d2a5":"# Use preprocessing methods to clean the dataset."}}