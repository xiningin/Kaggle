{"cell_type":{"72f424b6":"code","381acc49":"code","4de837ae":"code","95386851":"code","eef6b693":"code","b6919c94":"code","31f0c2ba":"code","d5cc904c":"code","74acb647":"code","784ed21d":"code","051fcf9d":"code","42ef0495":"code","e10dc3b8":"code","3c3992a7":"code","7f2cabd7":"code","91632ad2":"code","1f5a80cc":"code","4dc140cc":"code","91b96323":"code","b287ef61":"code","ebc1b949":"code","92830699":"markdown","d6566246":"markdown","0968f7ab":"markdown","d97fe3ef":"markdown","29052ff3":"markdown"},"source":{"72f424b6":"# Code you have previously used to load data\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor\n\n# Set up code checking\nimport os\nif not os.path.exists(\"..\/input\/train.csv\"):\n    os.symlink(\"..\/input\/home-data-for-ml-course\/train.csv\", \"..\/input\/train.csv\")  \n    os.symlink(\"..\/input\/home-data-for-ml-course\/test.csv\", \"..\/input\/test.csv\") \nfrom learntools.core import binder\nbinder.bind(globals())\nfrom learntools.machine_learning.ex7 import *\n\n# Path of the file to read. We changed the directory structure to simplify submitting to a competition\niowa_file_path = '..\/input\/train.csv'\n\nhome_data = pd.read_csv(iowa_file_path)\n# Create target object and call it y\ny = home_data.SalePrice\n# Create X\nfeatures = ['LotArea', 'YearBuilt', '1stFlrSF', '2ndFlrSF', 'FullBath', 'BedroomAbvGr', 'TotRmsAbvGrd']\nX = home_data[features]\n\n# Split into validation (test) and training data\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1)\n\n# Specify Model\niowa_model = DecisionTreeRegressor(random_state=1)\n# Fit Model\niowa_model.fit(X_train, y_train)\n\n# Make validation predictions and calculate mean absolute error\ny_predictions = iowa_model.predict(X_test)\ny_mae = mean_absolute_error(y_predictions, y_test)\nprint(\"Validation MAE when not specifying max_leaf_nodes: {:,.0f}\".format(y_mae))\n\n# Using best value for max_leaf_nodes\niowa_model = DecisionTreeRegressor(max_leaf_nodes=100, random_state=1)\niowa_model.fit(X_train, y_train)\ny_predictions = iowa_model.predict(X_test)\ny_mae = mean_absolute_error(y_predictions, y_test)\nprint(\"Validation MAE for best value of max_leaf_nodes: {:,.0f}\".format(y_mae))\n\n# Define the model. Set random_state to 1\nrf_model = RandomForestRegressor(random_state=1)\nrf_model.fit(X_train, y_train)\nrf_y_predictions = rf_model.predict(X_test)\nrf_y_mae = mean_absolute_error(rf_y_predictions, y_test)\n\nprint(\"Validation MAE for Random Forest Model: {:,.0f}\".format(rf_y_mae))","381acc49":"# To improve accuracy, create a new Random Forest model which you will train on all training data\nrf_model_on_full_data = RandomForestRegressor(random_state=1) \n\n# fit rf_model_on_full_data on all data from the training data\nrf_model_on_full_data.fit(X, y)","4de837ae":"# path to file you will use for predictions\ntest_data_path = '..\/input\/test.csv'\n\n# read test data file using pandas\ntest_data = pd.read_csv(test_data_path)\n\n# create test_X which comes from test_data but includes only the columns you used for prediction.\n# The list of columns is stored in a variable called features\ntest_X = test_data[features]\n\n# make predictions which we will submit. \ntest_preds = rf_model_on_full_data.predict(test_X)\n\n# The lines below shows how to save predictions in format used for competition scoring\n# Just uncomment them.\n\noutput = pd.DataFrame({'Id': test_data.Id,\n                       'SalePrice': test_preds})\noutput.to_csv('submission.csv', index=False)","95386851":"output","eef6b693":"# Check your answer\nstep_1.check()\n# step_1.solution()","b6919c94":"home_data.fillna(0, inplace=True)\nhome_data","31f0c2ba":"features2 =['Street','Alley','Utilities','Condition2','RoofMatl','MasVnrType','Electrical','LowQualFinSF',\n            'KitchenAbvGr','Functional','3SsnPorch', 'ScreenPorch', 'PoolArea', 'PoolQC','MiscFeature',\n            'MiscVal','Exterior1st','Exterior2nd','GarageQual','Heating','HouseStyle','KitchenQual','MSZoning','SaleType']\n\nhome_data.drop(features2,1,inplace=True)","d5cc904c":"y = home_data.SalePrice\nX = home_data[home_data.columns[:-1]]\n\nXd = X.T.to_dict().values()\n\nfrom sklearn.feature_extraction import DictVectorizer\nprep = DictVectorizer()\nXt = prep.fit_transform(Xd).toarray()","74acb647":"X_train, X_test, y_train, y_test = train_test_split(Xt, y, random_state=1)\n\nrf_model1 = RandomForestRegressor(random_state=1)\nrf_model1.fit(X_train, y_train)\nrf_y_predictions = rf_model1.predict(X_test)\nrf_y_mae = mean_absolute_error(rf_y_predictions, y_test)\n\nprint(\"Validation MAE for Random Forest Model: {:,.0f}\".format(rf_y_mae))","784ed21d":"test_data.drop(features2,1,inplace=True)\ntest_data.fillna(0, inplace=True)\ntest_data","051fcf9d":"test_X= test_data\nXdtest = test_X.T.to_dict().values()\nXttest = prep.fit_transform(Xdtest).toarray()","42ef0495":"rf_model_on_full_data = RandomForestRegressor(random_state=1) \nrf_model_on_full_data.fit(Xt, y)","e10dc3b8":"test_preds1 = rf_model_on_full_data.predict(Xttest)","3c3992a7":"output1 = pd.DataFrame({'Id': test_data.Id,\n                       'SalePrice': test_preds1})\noutput1.to_csv('BoostedModel.csv', index=False)","7f2cabd7":"df_combined = pd.concat([output, output1[\"SalePrice\"]], axis = 1, sort = False)\ndf_combined","91632ad2":"from xgboost import XGBRegressor\n\nX_train, X_test, y_train, y_test = train_test_split(Xt, y, random_state=1)\n\nmy_model_1 = XGBRegressor(n_estimators=45) \nmy_model_1.fit(X_train, y_train)\npredictions_1 = my_model_1.predict(X_test)\nerr = mean_absolute_error(predictions_1, y_test)\nprint(\"Validation MAE for Random Forest Model: {:,.0f}\".format(err))","1f5a80cc":"rf_model_on_full_data1 = XGBRegressor(n_estimators=45)  \nrf_model_on_full_data1.fit(Xt, y)\ntest_preds2 = rf_model_on_full_data1.predict(Xttest)","4dc140cc":"output2 = pd.DataFrame({'Id': test_data.Id,\n                       'SalePrice': test_preds2})\noutput2.to_csv('XGBoostModel.csv', index=False)","91b96323":"df_combined_final = pd.concat([df_combined, output2[\"SalePrice\"]], axis = 1, sort = False)\ndf_combined_final","b287ef61":"home_data.drop('GarageCond',1,inplace=True)","ebc1b949":"y = home_data.SalePrice\nX = home_data[home_data.columns[:-1]]\n\nXd = X.T.to_dict().values()\n\nfrom sklearn.feature_extraction import DictVectorizer\nprep = DictVectorizer()\nXt = prep.fit_transform(Xd).toarray()\n\nX_train, X_test, y_train, y_test = train_test_split(Xt, y, random_state=1)\n\nrf_model1 = RandomForestRegressor(random_state=1)\nrf_model1.fit(X_train, y_train)\nrf_y_predictions = rf_model1.predict(X_test)\nrf_y_mae = mean_absolute_error(rf_y_predictions, y_test)\n\nprint(\"Validation MAE for Random Forest Model: {:,.0f}\".format(rf_y_mae))","92830699":"# **With XGBoost**","d6566246":"# Make Predictions\nRead the file of \"test\" data. And apply your model to make predictions","0968f7ab":"Before submitting, run a check to make sure your `test_preds` have the right format.","d97fe3ef":"# ***Choosing other features***","29052ff3":"# Creating a Model For the Competition\n\nBuild a Random Forest model and train it on all of **X** and **y**."}}