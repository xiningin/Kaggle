{"cell_type":{"bdeb6544":"code","b838ef52":"code","6ad6592d":"code","f4c725ed":"code","b5a21959":"code","b7833d60":"code","37cc944b":"code","612ae8e4":"code","08bd7912":"code","d67c3f7e":"code","b27a557c":"code","ac328e7b":"code","40d28fdd":"code","c29c0f9c":"code","9358c03a":"code","defc5adb":"code","a45ba9a6":"code","6deba8c7":"code","c8b5df1d":"code","8d0c7762":"code","74bd51ab":"code","64103fa6":"code","49fc9d6b":"code","fa787816":"code","3056e727":"markdown"},"source":{"bdeb6544":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b838ef52":"df_train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf_test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\n\ndf_train.head()","6ad6592d":"df_train.info()","f4c725ed":"corr_matrix = df_train.corr()\n\ncorr_matrix['SalePrice'].sort_values(ascending = False)","b5a21959":"def prcossing_data(df):\n    \n    #dropping columns\n    df.drop(['Alley' , 'Id' , 'GarageYrBlt' , 'PoolQC','Fence','MiscFeature'],axis=1,inplace=True)\n    #drop na rows\n    for col in df.columns:\n        if df[col].dtype == 'float64':\n            df[col].fillna(df[col].mean(), inplace = True)\n        elif df[col].dtype == 'object':\n            df[col].fillna(df[col].value_counts().index[0] , inplace = True)\n    \n    return df\n    ","b7833d60":"df_train = prcossing_data(df_train)\ndf_test = prcossing_data(df_test)","37cc944b":"for col in df_test.columns:\n    df_test[col].astype(df_train[col].dtype)","612ae8e4":"df_train.head()","08bd7912":"df_train.info()  #no null values","d67c3f7e":"df_test['SalePrice'] = 0","b27a557c":"full_df = pd.concat([df_train , df_test] , axis = 0)","ac328e7b":"import seaborn as sns\nsns.heatmap(full_df.isnull(), cbar=False)","40d28fdd":"categorical_cols = [col for col in df_train.columns if df_train[col].dtype == 'object']","c29c0f9c":"def category_onehot_multcols(multcolumns):\n    df_final=full_df\n    i=0\n    for fields in multcolumns:\n        \n        #print(fields)\n        df1=pd.get_dummies(full_df[fields],drop_first=True)\n        \n        full_df.drop([fields],axis=1,inplace=True)\n        if i==0:\n            df_final=df1.copy()\n        else:\n            \n            df_final=pd.concat([df_final,df1],axis=1)\n        i=i+1\n       \n        \n    df_final=pd.concat([full_df,df_final],axis=1)\n        \n    return df_final","9358c03a":"full_df=category_onehot_multcols(categorical_cols)","defc5adb":"full_df =full_df.loc[:,~full_df.columns.duplicated()]","a45ba9a6":"df_Train=full_df.iloc[:1461,:]\ndf_Test=full_df.iloc[1460:,:]","6deba8c7":"df_Test.drop('SalePrice' , axis = 1 , inplace = True)","c8b5df1d":"X = df_Train.drop(['SalePrice'],axis=1)\ny = df_Train['SalePrice']","8d0c7762":"import tensorflow as tf\n\nmodel = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Dense(128,input_dim = X.shape[1], activation='relu'))\n\nmodel.add(tf.keras.layers.Dense(128 ,activation = 'relu'))\n\nmodel.add(tf.keras.layers.Dense(64 ,activation = 'relu'))\n\nmodel.add(tf.keras.layers.Dense(64 ,activation = 'relu'))\n\nmodel.add(tf.keras.layers.Dense(32 ,activation = 'relu'))\n\nmodel.add(tf.keras.layers.Dense(1 , activation = 'linear'))\n\n\n\nmodel.compile(optimizer = 'adam' , loss = 'mae' , metrics = ['mae'])\n\nmodel.summary()\n","74bd51ab":"model.fit(X , y , validation_split = 0.2 , epochs = 1000 , batch_size = 64)","64103fa6":"pred = model.predict(df_Test)\npreds = [prd[0] for prd in pred]","49fc9d6b":"samp = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\ndata = {'Id': samp['Id'] , 'SalePrice': preds}\nsubm = pd.DataFrame(data = data)","fa787816":"subm.to_csv('my submission.csv',index = False)","3056e727":"# getting score around 0.16"}}