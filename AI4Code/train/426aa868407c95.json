{"cell_type":{"7c1e1145":"code","a6319955":"code","6a8c0273":"code","107d56c6":"code","9b4e005b":"code","e3e2b743":"code","2b3f9bd8":"code","7d3330ae":"code","4be10380":"code","4b51966e":"markdown","02195627":"markdown","cd924d83":"markdown","7d9170f6":"markdown"},"source":{"7c1e1145":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import rcParams\nimport seaborn as sns\n\n\nfrom scipy import stats\nfrom scipy.stats import norm, skew\n\nfrom sklearn.manifold import TSNE\nfrom sklearn.cluster import KMeans\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.tree import DecisionTreeClassifier\n\nimport warnings\nwarnings.filterwarnings('ignore')","a6319955":"arabica_data = pd.read_csv('..\/input\/coffee-quality-database-from-cqi\/arabica_data_cleaned.csv')\narabica_data.head()","6a8c0273":"arabica_data_wet = arabica_data.loc[arabica_data['Processing.Method'] == 'Washed \/ Wet']\n\n# Binding 'Other' in 'Variety' is None cases\narabica_data_wet['Variety'] = arabica_data_wet['Variety'].fillna('Other')\n\narabica_data_wet['Coffee_Name'] = [arabica_data_wet['Country.of.Origin'].iloc[i] + '_' + arabica_data_wet['Variety'].iloc[i]\n                                     if arabica_data_wet['Variety'].iloc[i] != 'Other'\n                                     else arabica_data_wet['Country.of.Origin'].iloc[i]\n                                     for i in range(len(arabica_data_wet))]","107d56c6":"# Rating\ntastes = ['Aroma', 'Flavor', 'Aftertaste', 'Acidity', 'Body', 'Balance']\nuniformity_sweetness = ['Uniformity', 'Sweetness']\n\n\nfor i in range(len(tastes)):\n    arabica_data_wet['{}_Rating'.format(tastes[i])] = 0\n\nfor i in range(len(arabica_data_wet)):\n    ratings = arabica_data_wet[tastes].iloc[i].sort_values(ascending = False).index\n    for rating in range(len(ratings)):\n        arabica_data_wet['{}_Rating'.format(ratings[rating])].iloc[i] = rating + 1","9b4e005b":"### Ordering\n\n\"\"\"arabica_data_wet['Ordering'] = 0\nOrdering = set()\n\nfeatures = tastes + uniformity_sweetnees + ['Ordering']\nfor column in arabica_data_wet.columns:\n    if column in features:\n        coffee[column] = arabica_data_wet[column]\n\"\"\"\n\n\"\"\"\n# categorical feature : \ub354\ubbf8\ubcc0\uc218\ud6c4 cluster_data\uc640 \ud569\uce68\nOrder_dummies =  pd.concat((coffee['Coffee_Name'], pd.get_dummies(coffee['Ordering'])), axis = 1).groupby('Coffee_Name').max().reset_index()\ncluster_data = pd.concat((cluster_data, Order_dummies.drop(['Coffee_Name'], axis = 1)), axis = 1)\ncluster_data.shape\n\"\"\"","e3e2b743":"# numerical features : adding mean value by tastes' columns\ncluster_data = pd.DataFrame({'Coffee_Name' : arabica_data_wet.groupby('Coffee_Name')['Aroma'].mean().index})\nratings = ['Aroma_Rating', 'Flavor_Rating', 'Aftertaste_Rating', 'Acidity_Rating', 'Body_Rating', 'Balance_Rating']\nfeatures = tastes + uniformity_sweetness + ratings\nfor column in features:\n    cluster_data[column] = arabica_data_wet.groupby('Coffee_Name')[column].mean().values\n    ","2b3f9bd8":"model = TSNE(n_components = 2, random_state = 0, perplexity = 50)\ntsne = model.fit_transform(cluster_data.drop(['Coffee_Name'], axis = 1).values)\n\nstd = StandardScaler()\ns = std.fit_transform(cluster_data.drop(['Coffee_Name'], axis = 1))\n\npca = PCA(n_components = 7)\npca.fit(cluster_data.drop(['Coffee_Name'], axis = 1))\npc = pca.transform(cluster_data.drop(['Coffee_Name'], axis = 1))\nkmeans = KMeans(n_clusters = 35)\nkmeans.fit(pc)\n\nfr = pd.DataFrame({'tsne1' : tsne[:,0], 'tsne2' : tsne[:, 1], 'cluster' : kmeans.labels_})\n#sns.lmplot(data = fr, x = 'tsne1', y = 'tsne2', hue = 'cluster', fit_reg = False)\nprint(np.sum(pca.explained_variance_ratio_))\n\ncluster_data['Cluster'] = kmeans.labels_","7d3330ae":"\"\"\"def scatter_plot(data, x, y, hue = 'Cluster'):\n    sns.lmplot(data = data, x = x, y = y, hue = hue, fit_reg = False)\n    plt.show()\n    \nscatter_plot(cluster_data, 'Aroma', 'Acidity')\"\"\"","4be10380":"result = pd.concat((cluster_data, pd.get_dummies(cluster_data['Cluster'])), axis = 1)\nresult.drop(['Cluster'],  axis = 1, inplace = True)\n\nfig, ax = plt.subplots(figsize = (25, 20))\n\nsns.heatmap(result.corr(), annot = True)","4b51966e":"# Checking Scatter","02195627":"## Checking correlationship with each input variables by Clusters.","cd924d83":"# Washed \/ Wet processing method\n- Variety null -> other\n- Coffee_Name Create\n- Rating column create by tastes' score's -> it will be encoded by 'get_dummies'","7d9170f6":"### I don't know why 'sns.lmplot' can't work in kaggle notebook. However it is not big deal to understand this notebook process. So I will pass that step."}}