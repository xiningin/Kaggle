{"cell_type":{"28c1bec9":"code","b92b8635":"code","7049ec16":"code","8ade491b":"code","5f2d049b":"code","7e200aa0":"code","2a83075f":"code","8a1e2643":"code","b37e61d4":"markdown","a0c359d3":"markdown","cdca1962":"markdown","19a78d49":"markdown","4b54ed47":"markdown","2717ec1e":"markdown","57e5f774":"markdown","7e58f761":"markdown"},"source":{"28c1bec9":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom collections import Counter","b92b8635":"train = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv('..\/input\/test.csv')","7049ec16":"first = test[test[\"difficulty\"] == 1].reset_index()","8ade491b":"char = Counter(\"\".join(first.loc[list(range(first.shape[0]))][\"ciphertext\"]))\ncipher_stats = pd.DataFrame([[x[0], x[1]]for x in char.items()], columns=[\"Letter\", \"Frequency\"])\n\ncipher_stats = cipher_stats.sort_values(by='Frequency', ascending=True)\ncipher_stats.head()","5f2d049b":"memo = Counter(\"\".join(train.loc[range(train.shape[0])][\"text\"]))\nmemo_stats = pd.DataFrame([[x[0], x[1]] for x in memo.items()], columns=[\"Letter\", \"Frequency\"])\nmemo_stats = memo_stats.sort_values(by='Frequency', ascending=True)\n\nf, ax = plt.subplots(figsize=(5, 15))\nplt.barh(np.array(range(len(memo_stats))) + 0.5, memo_stats['Frequency'].values)\nplt.yticks(np.array(range(len(memo_stats))) + 0.5, memo_stats['Letter'].values)\n# plt.savefig(\"count.png\")\nplt.show()","7e200aa0":"f, ax = plt.subplots(figsize=(5, 15))\nplt.barh(np.array(range(len(cipher_stats))) + 0.5, cipher_stats['Frequency'].values)\nplt.yticks(np.array(range(len(cipher_stats))) + 0.5, cipher_stats['Letter'].values)\n# plt.savefig(\"count.png\")\nplt.show()","2a83075f":"memo = Counter(\"\".join(train.loc[0][\"text\"]))\nmemo_stats = pd.DataFrame([[x[0], x[1]] for x in memo.items()], columns=[\"Letter\", \"Frequency\"])\nmemo_stats = memo_stats.sort_values(by='Frequency', ascending=True)\n\nf, ax = plt.subplots(figsize=(5, 15))\nplt.barh(np.array(range(len(memo_stats))) + 0.5, memo_stats['Frequency'].values)\nplt.yticks(np.array(range(len(memo_stats))) + 0.5, memo_stats['Letter'].values)\n# plt.savefig(\"count.png\")\nplt.show()","8a1e2643":"memo = Counter(\"\".join(first.loc[0][\"ciphertext\"]))\nmemo_stats = pd.DataFrame([[x[0], x[1]] for x in memo.items()], columns=[\"Letter\", \"Frequency\"])\nmemo_stats = memo_stats.sort_values(by='Frequency', ascending=True)\nf, ax = plt.subplots(figsize=(5, 15))\nplt.barh(np.array(range(len(memo_stats))) + 0.5, memo_stats['Frequency'].values)\nplt.yticks(np.array(range(len(memo_stats))) + 0.5, memo_stats['Letter'].values)\n# plt.savefig(\"count.png\")\nplt.show()","b37e61d4":"[Cracking the code: difficulty 1](https:\/\/www.kaggle.com\/group16\/cracking-the-code-difficulty-1)\n\nI used this as the reference.","a0c359d3":"1 Train data","cdca1962":"Difficulty 1","19a78d49":"All Test data","4b54ed47":"1 Test data","2717ec1e":"It seems that training data uses fewer characters.","57e5f774":"# Visualization","7e58f761":"All Train data"}}