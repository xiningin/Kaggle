{"cell_type":{"c6e16795":"code","477079f3":"code","97f9dfc3":"code","afbf8a7c":"code","e642ae5c":"code","2ebd2806":"code","093558a2":"code","65e9fde6":"code","de297d4c":"code","de4959f6":"code","f7ab55a1":"code","71cbcb7e":"code","41e24f53":"code","4843a199":"code","9b060df9":"code","42437942":"code","00a0d720":"code","9401bcc0":"code","f7154003":"code","d29e3899":"code","7801e3e9":"code","1e41e47f":"code","f303258b":"code","b517afe6":"code","9f1535a6":"code","10e1eec8":"code","ecebf191":"code","0630d3cd":"code","0a240470":"code","0f530322":"code","2f0045c4":"code","a6eaae62":"code","896013ed":"code","ce55c60e":"code","b9d777db":"code","85118b6a":"code","3637b18b":"code","f4c3908e":"code","8ed4d08a":"code","7d125f13":"code","fd6d5821":"markdown","bf75c157":"markdown","b3538e89":"markdown","7a23a59f":"markdown","fa0f8e47":"markdown","6da84f30":"markdown","ffd3ff27":"markdown","d92c4553":"markdown","12ac4002":"markdown","c643f035":"markdown"},"source":{"c6e16795":"\nfrom pathlib import Path\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n#EDA exploratoring data analisis\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pickle\n\n%matplotlib inline \n\nfrom sklearn.preprocessing import OneHotEncoder\n\n# Models from Scikit-Learn\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import SGDRegressor\n\n## Model evaluators\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.metrics import precision_score, recall_score, f1_score\nfrom sklearn.metrics import plot_roc_curve\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_log_error, mean_absolute_error\n        \ninput_path = Path('\/kaggle\/input\/tabular-playground-series-feb-2021\/')\n\n","477079f3":"submission = pd.read_csv(input_path \/ 'sample_submission.csv', index_col='id')\ndisplay(submission.head())","97f9dfc3":"train = pd.read_csv(input_path \/ 'train.csv', index_col='id')\ndisplay(train.head())","afbf8a7c":"test = pd.read_csv(input_path \/ 'test.csv', index_col='id')\ndisplay(test.head())","e642ae5c":"len(train)","2ebd2806":"len(test)","093558a2":"train.shape","65e9fde6":"test.shape","de297d4c":"fig, ax = plt.subplots()\nax.scatter(train[\"cat0\"][:100], train[\"target\"][:100])","de4959f6":"train.plot(kind=\"scatter\", x=\"cat1\", y=\"target\", alpha=0.1)","f7ab55a1":"train.target.plot.hist()","71cbcb7e":"train[\"cat0\"].value_counts()","41e24f53":" import seaborn as sns\n\ncorr_matrix = train.corr()\ncorr_matrix\n    \nfig, ax = plt.subplots(figsize=(15, 10))\nax = sns.heatmap(corr_matrix,\n                 annot=True,\n                 linewidths=0.5,\n                 fmt=\".3f\",\n                 cmap=\"YlGnBu\")","4843a199":"corr_matrix[\"target\"].sort_values(ascending=False)","9b060df9":"train.info()","42437942":"from sklearn.preprocessing import LabelEncoder\ndf=train\nfor c in df.columns:\n    if df[c].dtype=='object': \n        lbl = LabelEncoder()\n        df[c]=df[c].fillna('N')\n        lbl.fit(list(df[c].values))\n        df[c] = lbl.transform(df[c].values)\n        \nX=df\n\n","00a0d720":"df=test\nfor c in df.columns:\n    if df[c].dtype=='object': \n        lbl = LabelEncoder()\n        df[c] = df[c].fillna('N')\n        lbl.fit(list(df[c].values))\n        df[c] = lbl.transform(df[c].values)\n        \ntest=df","9401bcc0":"y = X[\"target\"].copy()\nX = X.drop(\"target\", axis=1)","f7154003":"test[:10]","d29e3899":"# Split data into train and test sets\nnp.random.seed(42) # Makes the random numbers predictable\n\n# Split into train & test set\nX_train, X_test, y_train, y_test = train_test_split(X,\n                                                    y,                                                   \n                                                    test_size=0.2)","7801e3e9":"def rmse(model):\n    yhat = model.predict(X_test)\n    mse = mean_squared_error(y_test, yhat)\n    score = {\"Training root mean squared error \": np.sqrt(mse)}\n    pred = {\"Predictions  \": yhat}\n    \n    return score\n    ","1e41e47f":"def display_scores(scores):\n    print(\"Scores:\", scores)\n    print(\"Mean:\", scores.mean())\n    print(\"Standard deviation:\", scores.std())","f303258b":"model_lr = LinearRegression(n_jobs=-1)\nmodel_lr.fit(X_train, y_train)    \nrmse(model_lr)","b517afe6":"pickle.dump(model_lr, open('linear_regression_model', 'wb'))","9f1535a6":"model_sdg = SGDRegressor(max_iter=100, tol=1e-3)    \nmodel_sdg.fit(X_train, y_train)\nrmse(model_sdg)","10e1eec8":"from sklearn.model_selection import cross_val_score\n\nforest_scores = cross_val_score(model_lr, X_train, y_train,\n                                scoring=\"neg_mean_squared_error\", cv=10, verbose=True, n_jobs=-1)\nregressor_forest_rmse_scores = np.sqrt(-forest_scores)\ndisplay_scores(regressor_forest_rmse_scores)","ecebf191":"model_rf = RandomForestRegressor(n_jobs=-1, verbose=True, n_estimators=100)                          \nmodel_rf.fit(X_train, y_train)\n","0630d3cd":"rmse(model_rf)","0a240470":"model_rf.predict(X_test)","0f530322":"pickle.dump(model_rf, open('finalized_model_rf.pkl', 'wb'))","2f0045c4":"\n# Different RandomForestClassifier hyperparameters\nparam_distribs = {\"n_estimators\": np.arange(10, 100, 10),\n                  \"max_depth\": [None, 3, 5, 10, 20],    # number of splits\n                  \"min_samples_split\": np.arange(2, 20, 2),\n                  \"min_samples_leaf\": np.arange(1, 20, 2),\n                  \"max_features\": [0.5, 1, \"sqrt\", \"auto\"], # number of input(features) per tree\n                 }\n                  #\"max_samples\": [3000]}\n\nrs_model_rf = RandomizedSearchCV(RandomForestRegressor(n_jobs=-1),\n                              param_distributions=param_distribs,\n                              n_iter=5,scoring='neg_mean_squared_error',\n                              cv=2,  random_state=42)\n\nrs_model_rf.fit(X_train, y_train)","a6eaae62":"rs_model_rf.best_params_","896013ed":"negative_mse = rs_model_rf.best_score_\nrmse = np.sqrt(-negative_mse)\nrmse\n","ce55c60e":"rs_model_rf.predict(X_test)","b9d777db":" pickle.dump(rs_model_rf, open('finalized_model_rf_cv.pkl', 'wb'))","85118b6a":"\nparam_distribs = {\n    'alpha': 10.0 ** -np.arange(1, 3),\n    #'loss': ['squared_loss', 'huber', 'epsilon_insensitive'],\n    'loss': ['squared_loss', 'huber'],\n    'penalty': ['l2', 'l1'],\n    'learning_rate': ['constant', 'optimal'],\n    'max_iter': np.arange(1, 100)\n}\n\nclf = RandomizedSearchCV(SGDRegressor(),\n                              param_distributions=param_distribs,\n                              n_iter=5,scoring='neg_mean_squared_error',\n                              cv=2,  random_state=42)\n\nclf.fit(X_train, y_train)\nprint(\"Best score: \" + str(clf.best_score_))\n","3637b18b":"clf.best_params_","f4c3908e":"negative_mse = clf.best_score_\nrmse = np.sqrt(-negative_mse)\nrmse","8ed4d08a":"pickle.dump(model_sdg, open('finalized_rs_model_sdg.pkl', 'wb'))","7d125f13":"submission['target'] = model_sdg.predict(test)\nsubmission.to_csv('SGDRegressor.csv')","fd6d5821":"## Prepare the data for Machine Learning algorithms","bf75c157":"### SGDRegressor Model","b3538e89":"## Modeling","7a23a59f":"### Hyperparameters Tuning with RandomizedSearchCV and SGDRegressor.","fa0f8e47":"### LinearRegression Model","6da84f30":"### Prepare the categorical","ffd3ff27":"### Hyperparameters Tuning with RandomizedSearchCV RandomForestRegressor","d92c4553":"### Scores","12ac4002":"### RandomForestRegressor Model","c643f035":"### cross_val_score with Linear Regressor"}}