{"cell_type":{"cc1cf70f":"code","8ba51f9f":"code","a8552044":"code","fe65ea21":"code","dba5cf70":"code","fa2efa14":"code","ed4fc898":"code","10c5f1cb":"code","1a52e953":"code","bb295ba1":"code","4a198d08":"code","92660b4e":"code","a2b8c8af":"code","9ba34882":"code","d8554571":"code","55dff92b":"code","e5fd6089":"code","51011b56":"code","3dc86ef3":"code","ef00a907":"code","7857efbd":"code","b8b61401":"code","c0feeb8d":"markdown","f85b1f59":"markdown","370da6e5":"markdown","570a5545":"markdown","410810bd":"markdown","7a400d88":"markdown"},"source":{"cc1cf70f":"import os\nimport pandas as pd\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nimport numpy as np\nimport pandas as pd\nfrom time import time\nimport pprint\nimport joblib\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Classifiers\nfrom catboost import CatBoostClassifier\n\n# Model selection\nfrom sklearn.model_selection import StratifiedKFold\n\n# Metrics\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import make_scorer\n\n# Skopt functions\nfrom skopt import BayesSearchCV\nfrom skopt.callbacks import DeadlineStopper, VerboseCallback, DeltaXStopper\nfrom skopt.space import Real, Categorical, Integer\nfrom time import time\n","8ba51f9f":"PATH_TO_DATA = '..\/input\/'\n\ndf_train_features = pd.read_csv(os.path.join(PATH_TO_DATA, \n                                             'train_features.csv'), \n                                    index_col='match_id_hash')\ndf_train_targets = pd.read_csv(os.path.join(PATH_TO_DATA, \n                                            'train_targets.csv'), \n                                   index_col='match_id_hash')\n","a8552044":"df_train_features.head(n=2)","fe65ea21":"df_train_features.shape","dba5cf70":"y_target=df_train_targets['radiant_win'].apply(lambda x:int(x)).values","fa2efa14":"X_train, X_valid, y_train, y_valid = train_test_split(df_train_features.values, y_target, \n                                                      test_size=0.3, \n                                                      random_state=17)","ed4fc898":"%%time\nbase_model = CatBoostClassifier(task_type = \"GPU\",verbose=True)\nbase_model.fit(X_train,y_train,)","10c5f1cb":"y_pred = base_model.predict_proba(X_valid)[:, 1]\nvalid_score = roc_auc_score(y_valid, y_pred)\nprint('Validation ROC-AUC score:', valid_score)","1a52e953":"def submit_predictions(name,model):\n    df_test_features = pd.read_csv(os.path.join(PATH_TO_DATA, 'test_features.csv'), \n                                   index_col='match_id_hash')\n    X_test = df_test_features.values\n    y_test_pred = model.predict_proba(X_test)[:, 1]\n\n    df_submission = pd.DataFrame({'radiant_win_prob': y_test_pred}, \n                                 index=df_test_features.index)\n    submission_filename = 'submission_{}.csv'.format(name)\n    df_submission.to_csv(submission_filename)\n    print('Submission saved to {}'.format(submission_filename))","bb295ba1":"submit_predictions('simple_cat_boost',model=base_model)","4a198d08":"# Reporting util for different optimizers\ndef report_perf(optimizer, X, y, title, callbacks=None):\n    \"\"\"\n    A wrapper for measuring time and performances of different optmizers\n    \n    optimizer = a sklearn or a skopt optimizer\n    X = the training set \n    y = our target\n    title = a string label for the experiment\n    \"\"\"\n    start = time()\n    if callbacks:\n        optimizer.fit(X, y, callback=callbacks)\n    else:\n        optimizer.fit(X, y)\n    d=pd.DataFrame(optimizer.cv_results_)\n    best_score = optimizer.best_score_\n    best_score_std = d.iloc[optimizer.best_index_].std_test_score\n    best_params = optimizer.best_params_\n    print((title + \" took %.2f seconds,  candidates checked: %d, best CV score: %.3f \"\n           +u\"\\u00B1\"+\" %.3f\") % (time() - start, \n                                  len(optimizer.cv_results_['params']),\n                                  best_score,\n                                  best_score_std))    \n    print('Best parameters:')\n    pprint.pprint(best_params)\n    print()\n    return best_params","92660b4e":"roc_auc = make_scorer(roc_auc_score, greater_is_better=True, needs_threshold=True)\nskf = StratifiedKFold(n_splits=5, shuffle=True, random_state=0)","a2b8c8af":"clf = CatBoostClassifier(thread_count=2,\n                         loss_function='Logloss',\n                        \n                         od_type = 'Iter',\n                         verbose= False\n                        )","9ba34882":"# Defining your search space\nsearch_spaces = {'iterations': Integer(10, 1000),\n                 'depth': Integer(1, 8),\n                 'learning_rate': Real(0.01, 1.0, 'log-uniform'),\n                 'random_strength': Real(1e-9, 10, 'log-uniform'),\n                 'bagging_temperature': Real(0.0, 1.0),\n                 'border_count': Integer(1, 255),\n                 'l2_leaf_reg': Integer(2, 30),\n                 'scale_pos_weight':Real(0.01, 1.0, 'uniform')}\n","d8554571":"# Setting up BayesSearchCV\nopt = BayesSearchCV(clf,\n                    search_spaces,\n                    scoring=roc_auc,\n                    cv=skf,\n                    n_iter=100,\n                    n_jobs=1,  # use just 1 job with CatBoost in order to avoid segmentation fault\n                    return_train_score=False,\n                    refit=True,\n                    optimizer_kwargs={'base_estimator': 'GP'},\n                    random_state=42)","55dff92b":"# best_params = report_perf(opt, df_train_features, y_target,'CatBoost', \n#                           callbacks=[VerboseCallback(100), \n#                                      DeadlineStopper(60*10)])","e5fd6089":"best_params={'bagging_temperature': 0.41010395885331385,\n 'border_count': 186,\n 'depth': 8,\n 'iterations': 323,\n 'l2_leaf_reg': 21,\n 'learning_rate': 0.0673344419215237,\n 'random_strength': 3.230824361824754e-06,\n 'scale_pos_weight': 0.7421091918485163}","51011b56":"best_params['iterations']=1000","3dc86ef3":"# %%time\n# tuned_model = CatBoostClassifier(**best_params,task_type = \"GPU\",od_type='Iter',one_hot_max_size=10)\n# tuned_model.fit(X_train,y_train)","ef00a907":"# %%time\n# y_pred = tuned_model.predict_proba(X_valid)[:, 1]\n# valid_score = roc_auc_score(y_valid, y_pred)\n# print('Validation ROC-AUC score:', valid_score)\n# ##ROC_AUC is 0.8056","7857efbd":"%%time\ntuned_model = CatBoostClassifier(**best_params,task_type = \"GPU\",od_type='Iter',one_hot_max_size=10)\ntuned_model.fit(df_train_features,y_target)","b8b61401":"submit_predictions('tuned_cat_boost',model=tuned_model)","c0feeb8d":"Making predictions on holdout set","f85b1f59":"Preparing a submission file","370da6e5":"Now, using Bayesian optimization to find optimal parameters.\nCode has been taken from https:\/\/github.com\/lmassaron\/kaggledays-2019-gbdt\/blob\/master\/Kaggle%20Days%20Paris%20-%20Skopt%20%2B%20CatBoost%20solution.ipynb","570a5545":"Making a classifer based on tuned paramters","410810bd":"**We have nearly 40K examples with each described with match_id_hash and 245 features.**","7a400d88":"**Training a simple Catboost classifier**"}}