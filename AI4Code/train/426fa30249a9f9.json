{"cell_type":{"a35fc1db":"code","13dfa04a":"code","4cdf2bb0":"code","2fed7e72":"code","a677f65d":"code","90fefaf4":"code","9bf0cfe9":"code","08b3c31f":"markdown","184d8e2c":"markdown","c2beb9b2":"markdown","ea2534f2":"markdown","ef4876e5":"markdown"},"source":{"a35fc1db":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom xgboost import XGBRegressor, XGBClassifier\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import MinMaxScaler\n\n%matplotlib inline\nnp.random.seed(0)","13dfa04a":"trainData = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/train.csv')\ntestData = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/test.csv')\n\ntrainData.head()","4cdf2bb0":"y = trainData['claim']\ntrainDataCopy = trainData.copy()\ntrainDataCopy['n_missing'] = trainData.isnull().sum(axis=1)\nX = trainDataCopy.drop(['claim', 'id'], axis=1)\n\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, train_size=0.7, test_size=0.3,\n                                                      random_state=0)\n","2fed7e72":"def score_dataset(X_train, X_valid, y_train, y_valid, est, lrate, model_type):\n    if model_type == 'classifier':\n        model = XGBClassifier(n_estimators=est, learning_rate=lrate, n_jobs=4, tree_method='gpu_hist')\n    else:\n        model = XGBRegressor(n_estimators=est, learning_rate=lrate, n_jobs=4, tree_method='gpu_hist')\n\n    model.fit(X_train, y_train)\n    preds = model.predict(X_valid)\n    score = roc_auc_score(y_valid, preds)\n    return score","a677f65d":"imputer = SimpleImputer(strategy='mean')\nimputed_X_train = pd.DataFrame(imputer.fit_transform(X_train))\nimputed_X_valid = pd.DataFrame(imputer.transform(X_valid))\n\nimputed_X_train.columns = X_train.columns\nimputed_X_valid.columns = X_valid.columns\n\n","90fefaf4":"print(score_dataset(imputed_X_train, imputed_X_valid, y_train, y_valid, 2300, 0.02, 'regressor')) ","9bf0cfe9":"testDataCopy = testData.copy().drop('id', axis=1)\ntestDataCopy['n_missing'] = testData.isnull().sum(axis=1)\n\nimputer = SimpleImputer(strategy='mean')\nimputed_X_test = pd.DataFrame(imputer.fit_transform(testDataCopy))\nimputed_X_test.columns = testDataCopy.columns\n\nmodel = XGBRegressor(n_estimators=2500, learning_rate=0.02, n_jobs=4, tree_method='gpu_hist')\nmodel.fit(imputed_X_train, y_train)\npreds = model.predict(imputed_X_test)\nseries = pd.Series(preds, index=testData['id'].astype('int'), name='claim')\nprint(series)\nseries.to_csv('output.csv')","08b3c31f":"# Valida\u00e7\u00e3o","184d8e2c":"# Loading Data and Split","c2beb9b2":"# Arquivo de submiss\u00e3o","ea2534f2":"# Imputer","ef4876e5":"# Imports"}}