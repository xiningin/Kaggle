{"cell_type":{"0544c6d6":"code","72ecb506":"code","e9c0119b":"code","fc79e30b":"code","59e6da60":"code","c1fa97b4":"code","dcf1df44":"code","16f3a5d0":"code","dec5d135":"code","72e16e58":"code","5155ad80":"code","a846ec40":"code","246ca9e1":"code","f838da2d":"code","77f7f958":"code","57886639":"markdown","8440b3c7":"markdown"},"source":{"0544c6d6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","72ecb506":"#import data\ntrain = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\")\nprint(train.head())","e9c0119b":"#split numeric and object columns\n#print(train.dtypes == object)\nobj_train = train.loc[:, train.dtypes == object]\nnot_obj_train = train.loc[:, ~(train.dtypes == object)]\nprint(\"Object columns is {}\".format(obj_train.shape[1]))\nprint(\"Not object columns is {}\".format(not_obj_train.shape[1]))","fc79e30b":"print(not_obj_train.columns)\ndt = not_obj_train.copy()\ndt = dt.drop('Id', axis = 1) # \u53bb\u9664Id \u5217\n# Corr\n#corr_matrix = np.corrcoef(dt.T)\ncorr_matrix = dt.corr()\nsns.heatmap(corr_matrix, square = True)\n","59e6da60":"k = 10 #find out top k cols  most related with SalePrice\ncols = corr_matrix.nlargest(k, 'SalePrice')['SalePrice'].index\n#cols = corr_matrix.sort_values('SalePrice', ascending = False)['SalePrice'][:10].index #The same meaning with above\nprint(cols)","c1fa97b4":"dt_top10 = dt[cols]\nfig, ax = plt.subplots(figsize = (10,8))\nsns.heatmap(dt_top10.corr(), annot = True, square = True, cbar = True, annot_kws = {\"size\":8})","dcf1df44":"cols_need = ['OverallQual', 'GrLivArea','GarageCars','TotalBsmtSF','FullBath','YearBuilt','SalePrice']\nnum_cols_drop = [col for col in cols if col not in cols_need]\nprint(num_cols_drop)\n# for numeric columns, these cols have strong realtions with SalePrice. and the others can forget it.","16f3a5d0":"#Missing Data\ntotal_nulls = train.isnull().sum().sort_values(ascending = False)\ntotal_counts = train.isnull().count()\npercent = (total_nulls\/total_counts).sort_values(ascending = False)\npercent_df = pd.concat([total_nulls, percent], axis = 1, keys = ['Total Nulls', 'Percent'])\nprint(percent_df[:20])","dec5d135":"df_train = train.drop((percent_df[percent_df['Total Nulls']>1]).index, axis = 1)\ndf_train = df_train.drop(df_train[df_train['Electrical'].isnull()].index, axis = 0)\ndf_train = df_train.drop(num_cols_drop, axis = 1)\nprint(df_train.shape)","72e16e58":"obj_df_train = df_train.loc[:, df_train.dtypes == object]\nnot_obj_df_train = df_train.loc[:, ~(df_train.dtypes == object)]\nprint(obj_df_train.shape)\nprint(not_obj_df_train.shape)","5155ad80":"model = StandardScaler()\nnumeric_model = model.fit_transform(not_obj_df_train) #\u6807\u51c6\u5316\u5904\u7406\nnumeric_model_df = pd.DataFrame(numeric_model, columns = not_obj_df_train.columns)\nprint(numeric_model_df.head())","a846ec40":"df_train_ = pd.concat([numeric_model_df, obj_df_train], axis = 1)","246ca9e1":"print(df_train.shape)","f838da2d":"df_train = pd.get_dummies(df_train)\nprint(df_train.shape)\nprint(df_train.columns)","77f7f958":"forest = RandomForestClassifier(n_estimators = 10, random_state = 1)","57886639":"For further exploration, We split the columns to Obj and Not Obj data","8440b3c7":"We can see that OverallQual,GrLivArea and GarageArea have strong relation with SalePrice, and GrLivArea has strong relation with TotRmsAbvGrd, GarageCars and GarageArea , 1stFlrSF and TotalBsmtSF also have this relation."}}