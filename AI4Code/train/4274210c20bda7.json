{"cell_type":{"79152df0":"code","48e5c5e7":"code","cf6e762d":"code","6841a404":"code","1ca09707":"code","d83d652e":"code","1dc5b7bd":"code","ea81631e":"code","9262668f":"code","f6ab9cf8":"code","da1f2073":"code","072e5acd":"code","b27c7fbb":"code","fc737e0c":"code","26497109":"code","cbed91ae":"code","2b99c2cc":"code","2de9a986":"code","9518b160":"code","7cec7e86":"code","23473f71":"code","6ee4d531":"code","2073e516":"code","eadc910e":"markdown","c7ddbf38":"markdown","2b230c4a":"markdown","08b8d1dc":"markdown","b8a3320b":"markdown"},"source":{"79152df0":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom pandas.tools.plotting import scatter_matrix\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import KFold\nimport os\nprint(os.listdir(\"..\/input\"))\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\nimport warnings\nwarnings.filterwarnings('ignore')","48e5c5e7":"eye_data = pd.read_csv(r\"..\/input\/eye movement.csv\")","cf6e762d":"eye_data.info()","6841a404":"eye_data.describe()","1ca09707":"eye_data.head()","d83d652e":"fig,ax = plt.subplots(nrows = 4, ncols=4, figsize=(16,10))\nrow = 0\ncol = 0\nfor i in range(len(eye_data.columns) -1):\n    if col > 3:\n        row += 1\n        col = 0\n    axes = ax[row,col]\n    sns.boxplot(x = eye_data['Target'], y = eye_data[eye_data.columns[i]],ax = axes)\n    col += 1\nplt.tight_layout()\n# plt.title(\"Individual Features by Class\")\nplt.show()","1dc5b7bd":"p = eye_data.hist(figsize = (20,20),bins=50)","ea81631e":"color_wheel = {1: \"#0392cf\", \n               2: \"#7bc043\"}\ncolors = eye_data[\"Target\"].map(lambda x: color_wheel.get(x + 1))\np = eye_data.Target.value_counts().plot(kind=\"bar\")\nplt.xlabel(\"Target\")\nplt.ylabel(\"Count of Target\")","9262668f":"X = eye_data.drop(['Target'],axis=1)\ny = eye_data.Target","f6ab9cf8":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.33, random_state=20,shuffle=True)","da1f2073":"test_scores = []\ntrain_scores = []\nfor i in range(1,15):\n    \n    knn = KNeighborsClassifier(i,weights=\"distance\")\n    \n    knn.fit(X_train,y_train)\n    \n    test_scores.append(knn.score(X_test,y_test))\n    train_scores.append(knn.score(X_train,y_train))\n    ","072e5acd":"## score that comes from testing on the same datapoints that were used for training\nmax_train_score = max(train_scores)\ntrain_scores_ind = [i for i, v in enumerate(train_scores) if v == max_train_score]\nprint('Max train score {} % and k = {}'.format(max_train_score*100,list(map(lambda x: x+1, train_scores_ind))))","b27c7fbb":"## score that comes from testing on the datapoints that were split in the beginning to be used for testing solely\nmax_test_score = max(test_scores)\ntest_scores_ind = [i for i, v in enumerate(test_scores) if v == max_test_score]\nprint('Max test score {} % and k = {}'.format(max_test_score*100,list(map(lambda x: x+1, test_scores_ind))))","fc737e0c":"plt.figure(figsize=(12,5))\np = sns.lineplot(range(1,15),train_scores,marker='*',label='Train Score')\np = sns.lineplot(range(1,15),test_scores,marker='o',label='Test Score')","26497109":"from numpy import mean\nfrom numpy import std\nfrom numpy import delete\nfrom numpy import savetxt\n# load the dataset.\ndata = eye_data\nvalues = data.values\n# step over each EEG column\nfor i in range(values.shape[1] - 1):\n\t# calculate column mean and standard deviation\n\tdata_mean, data_std = mean(values[:,i]), std(values[:,i])\n\t# define outlier bounds\n\tcut_off = data_std * 4\n\tlower, upper = data_mean - cut_off, data_mean + cut_off\n\t# remove too small\n\ttoo_small = [j for j in range(values.shape[0]) if values[j,i] < lower]\n\tvalues = delete(values, too_small, 0)\n\tprint('>deleted %d rows' % len(too_small))\n\t# remove too large\n\ttoo_large = [j for j in range(values.shape[0]) if values[j,i] > upper]\n\tvalues = delete(values, too_large, 0)\n\tprint('>deleted %d rows' % len(too_large))\n# save the results to a new file\nsavetxt('eye_movement_no_outliers.csv', values, delimiter=',')","cbed91ae":"eye_data_no_out = pd.read_csv('eye_movement_no_outliers.csv',names = eye_data.columns )\neye_data_no_out.plot(kind='box')","2b99c2cc":"eye_data_no_out.describe()","2de9a986":"X = eye_data_no_out.drop(['Target'],axis=1)\ny = eye_data_no_out.Target","9518b160":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.33, random_state=20,shuffle=True)","7cec7e86":"from sklearn.neighbors import KNeighborsClassifier\n\n\ntest_scores = []\ntrain_scores = []\n\nfor i in range(1,7):\n\n    knn = KNeighborsClassifier(i)\n    knn.fit(X_train,y_train)\n    \n    train_scores.append(knn.score(X_train,y_train))\n    test_scores.append(knn.score(X_test,y_test))","23473f71":"## score that comes from testing on the same datapoints that were used for training\nmax_train_score = max(train_scores)\ntrain_scores_ind = [i for i, v in enumerate(train_scores) if v == max_train_score]\nprint('Max train score {} % and k = {}'.format(max_train_score*100,list(map(lambda x: x+1, train_scores_ind))))","6ee4d531":"## score that comes from testing on the datapoints that were split in the beginning to be used for testing solely\nmax_test_score = max(test_scores)\ntest_scores_ind = [i for i, v in enumerate(test_scores) if v == max_test_score]\nprint('Max test score {} % and k = {}'.format(max_test_score*100,list(map(lambda x: x+1, test_scores_ind))))","2073e516":"plt.figure(figsize=(12,5))\np = sns.lineplot(range(1,7),train_scores,marker='*',label='Train Score')\np = sns.lineplot(range(1,7),test_scores,marker='o',label='Test Score')","eadc910e":"#### The variable ranges vary greatly. It calls for standardisation!","c7ddbf38":"### With this result I feel this is a case of overfitting or some detail that I missed. I will try to use different classification models to this data. Comment your suggestions!","2b230c4a":"## K = 1 gives the best accuracy rate for predictions","08b8d1dc":"#### Do up vote and share if you liked this notebook.","b8a3320b":"## Basic EDA"}}