{"cell_type":{"1a37ebe3":"code","3d0b3e47":"code","6529fcaa":"code","1696de34":"code","05033b46":"code","0acf2c59":"code","39b71cf6":"code","04dc5cef":"code","b8c06958":"code","bd762b7a":"code","1c292741":"code","c3295a6d":"code","e52c4ca4":"code","cea92a02":"code","e01e094c":"code","aba0edb2":"code","e1e99b3f":"code","b4485284":"code","8d145f38":"code","6c1ac48f":"code","6f88096f":"code","5bb7740a":"code","dd23c382":"code","31a5f281":"code","9ab5c917":"code","be967d5c":"code","587e7586":"code","9f9e25fd":"code","326eb10d":"code","240c62a3":"code","3033a935":"code","a6d4f34f":"code","dcbeabce":"code","e79b4e1a":"code","eb6a99e7":"code","68b1be30":"code","e80cfbed":"code","1797198d":"code","f2498874":"code","c8c2c148":"code","304f0473":"code","22840c08":"code","212257b6":"code","e56f8498":"code","cdec4194":"code","76974c4d":"code","d6c9147c":"code","c25d3e64":"code","dd467fc6":"code","ed303d78":"code","9f6d8e0b":"code","07b6c31b":"code","9df70dc5":"code","7b697670":"code","b06a5c3d":"code","383b0abd":"code","1a4019ba":"code","8ab5eace":"code","db4d68ce":"code","c2d3614b":"code","0ac9fe38":"code","1bb03927":"code","4cb5605f":"code","bcbd6f8f":"code","4701b7a9":"code","6fff2b88":"code","c23b6c23":"code","6dc75ce5":"code","7b8edd52":"code","1406eda5":"code","71c809e0":"markdown","7ce8d624":"markdown","ff3531d6":"markdown","1b09ba80":"markdown","4e0fe8fe":"markdown","9a86f6c1":"markdown","f55c1dfe":"markdown","11a6dfb3":"markdown","5fb4f2df":"markdown","905a046d":"markdown","76cc3265":"markdown","ee4355bc":"markdown","0a3aef17":"markdown","9b9d5f72":"markdown","be72daba":"markdown","5d5b91e8":"markdown","69c5bfca":"markdown"},"source":{"1a37ebe3":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('ggplot')\n\nfrom sklearn.preprocessing import RobustScaler,LabelEncoder\nfrom sklearn.model_selection import train_test_split\n# from sklearn.manifold import TSNE\nfrom imblearn.over_sampling import SMOTE\n\nseed= 42","3d0b3e47":"# df = pd.read_csv(\"AndMalTrainPrep.zip\")","6529fcaa":"df = pd.read_csv(\"..\/input\/andmal2020cdmc\/AndroidMalware_Training_set.csv\", header=None)\ndf_test = pd.read_csv(\"..\/input\/andmal2020cdmc\/AndroidMalware_Testing_set.csv\", header=None)","1696de34":"print(\"Training data shape:\",df.shape)\nprint(\"Testing data shape:\",df_test.shape)","05033b46":"df.head()","0acf2c59":"df_test.head()","39b71cf6":"df.iloc[:,:12].describe().transpose()","04dc5cef":"df_test.iloc[:,:12].describe().transpose()","b8c06958":"fig = plt.figure(figsize=(16,24))\nfor i in range(12):\n    sns.distplot(df.iloc[:,i], ax=fig.add_subplot(6,2,i+1), kde=False)","bd762b7a":"#drop hash and last target column \ndf = df.drop([2493,2496],axis = 1)\ndf_test = df_test.drop(2493,1)\n#changing the column name of targets\ndf = df.rename(columns={2494:\"Family\",2495:\"Category\"})","1c292741":"# null value in training data\ndf[df[0]==int(df[df[2492].isna()][0])].Family.value_counts()","c3295a6d":"# null value in testing data\ndf[df[0]==int(df_test[df_test[2492].isna()][0])].Family.value_counts()","e52c4ca4":"df_test[df_test[2492].isna()]","cea92a02":"df.dropna(inplace=True)\nfor col in df_test.columns:\n    df_test[col].fillna(df_test[col].mode()[0], inplace=True)","e01e094c":"df_test.iloc[559]","aba0edb2":"missing = 30428\ncustom = 559","e1e99b3f":"#identify and drop useless columns\ndrop_cols = []\nfor i in df.columns:\n    if len(df[i].unique())==1:\n        drop_cols.append(i)\nprint(\"Total columns with only 1 unique value:\", len(drop_cols))\ndf.drop(drop_cols, 1, inplace=True)\ndf_test.drop(drop_cols, 1, inplace=True)","b4485284":"#identify and convert columns to datatype: bool\nbool_col = []\nfor i in df.columns:\n    if len(df[i].unique())==2:\n        bool_col.append(i)\nprint(\"Total columns with boolean value:\",len(bool_col))\ndf[bool_col] = df[bool_col].astype('bool')\ndf_test[bool_col] = df_test[bool_col].astype('bool')","8d145f38":"#converting float to int\nfloat_col = df.select_dtypes(\"float\").columns\ndf[float_col] = df[float_col].astype(\"int\")\ndf_test[float_col] = df_test[float_col].astype(\"int\")","6c1ac48f":"df.info()","6f88096f":"df_test.info()","5bb7740a":"plt.xticks(rotation = 90)\nsns.countplot(df.Category)","dd23c382":"fam_counts = df.Family.value_counts()\nfam_counts","31a5f281":"#separating features and target\ny = df[['Category','Family']]\nX = df.drop(['Category','Family'],1)","9ab5c917":"print('Features shape:', X.shape)\nprint('Target shape:', y.shape)\nprint('Test shape:', df_test.shape)","be967d5c":"scaler = RobustScaler()\nX.iloc[:,:12] = scaler.fit_transform(X.iloc[:,:12])\ndf_test.iloc[:,:12] = scaler.transform(df_test.iloc[:,:12])","587e7586":"!pip install sklearn-deap\nfrom evolutionary_search import EvolutionaryAlgorithmSearchCV","9f9e25fd":"from sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\nfrom imblearn.over_sampling import RandomOverSampler\n\nfrom joblib import dump, load\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, StackingClassifier\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier","326eb10d":"#helper function\n\n# evaluate the models and store results for oversampled minority class\ndef evaluate_models(models, xtrain, ytrain, cv=3, output=True):\n    results, names = list(), list()\n    for name, model in models.items():\n        scores = cross_val_score(model, xtrain, ytrain, scoring='accuracy', cv=cv, n_jobs=-1,verbose=1)\n        results.append(scores)\n        names.append(name)\n        if output:\n            print('*%s %.3f (%.3f)' % (name, scores.mean(), scores.std()))\n    return names, results\n\n# Hyperparameter Optimization using EvolutionaryAlgorithmSearchCV\ndef evaluate_params(models, xtrain, ytrain, param_grids, cv=3, output=True):\n    best_params = param_grids\n    names= list(param_grids.keys())\n    for name, param_grid, model in zip(param_grids.keys(), param_grids.values(), models.values()):\n        eascv = EvolutionaryAlgorithmSearchCV(model, param_grid, verbose=5, cv=cv)\n        eascv.fit(xtrain,ytrain)\n        best_params[name] = eascv.best_params_\n        if output:\n            print(name)\n            print(\"best score:\",eascv.best_score_)\n            print(\"best params:\",eascv.best_params_)\n    return names, best_params","240c62a3":"y.Category.value_counts()","3033a935":"# d={'Riskware': 16977, 'Adware': 8134, 'Trojan': 2398, 'Ransomware': 1093, 'Spyware': 617, 'SMS': 617, 'Dropper': 617, 'PUA': 617, 'Backdoor': 287, 'Scareware': 287, 'Banker': 287, 'FileInfector': 287}\n# oversampler = SMOTE(sampling_strategy=d, n_jobs=-1, random_state=42)\n# X_smote, y_smote_cat = oversampler.fit_resample(X, y.Category)","a6d4f34f":"# X_train, X_test, y_train, y_test = train_test_split(X_smote, y_smote_cat, test_size=0.4, random_state=42, stratify=y_smote_cat)","dcbeabce":"#encoding category\n# le_cat = LabelEncoder()\n# y_train = le_cat.fit_transform(y_train)\n# y_test = le_cat.transform(y_test)","e79b4e1a":"# models = {\n#     'GB':GradientBoostingClassifier(random_state=seed),\n#     'RF':RandomForestClassifier(n_jobs=-1, random_state=seed),\n#     'XGB':XGBClassifier(n_jobs=-1, random_state=seed),\n#     'LGBM':LGBMClassifier(n_jobs=-1, random_state=seed)\n#     }","eb6a99e7":"# names, results = evaluate_models(models, X_train, y_train)","68b1be30":"# plt.boxplot(results, labels=names, showmeans=True)\n# plt.show()","e80cfbed":"# for name, model in models.items():\n#     print(name,'parameters:')\n#     print(model.get_params())\n#     print('='*140)","1797198d":"# param_grids = {\n   \n#     'GB':{'learning_rate': [0.1, 0.2, 0.5], 'max_depth':[3,5,8,10],\n#           'min_samples_split': [5,8,10,12], 'n_estimators': [50,100,200,500],\n#           'subsample':[0.5,0.7,0.9]},\n    \n#     'RF':{'max_depth':[None,3,5,10,15,25], 'n_estimators': [100,500,1000],\n#           'min_samples_split': [2,3,5,10]},\n    \n#     'XGB':{'max_depth':[None, 5, 10, 20], 'n_estimators': [100, 200, 500, 1000],\n#            'learning_rate': [0.05, 0.1, 0.2, 0.25], 'subsample':[0.5,0.7,0.9]},\n    \n#     'LGBM':{'n_estimators': [750, 800],\n#             'learning_rate': [0.07, 0.075, 0.08], 'subsample':[0.7,0.9],\n#            'feature_fraction':[0.7,0.9,1],'num_leaves': [25, 31]}\n# }","f2498874":"# names, best_params = evaluate_params(models, X_train, y_train, param_grids)","c8c2c148":"df.groupby(['Category','Family']).count()","304f0473":"y = y.Category+\",\"+y.Family\ny","22840c08":"dros = {'Riskware,smsreg': 9202, 'Riskware,smspay': 5197, 'Adware,shedun': 3495, 'Riskware,skymobi': 1878, 'Adware,zdtad': 1073, 'Adware,inoco': 1055, 'Trojan,cnsms': 652, 'Ransomware,smsspy': 627, 'Adware,dowgin': 455, 'Adware,airpush': 428, 'SMS,fakeinst': 388, 'Spyware,smforw': 337, 'Scareware,fakeapp': 262, 'Dropper,locker': 228, 'Spyware,smsthief': 215, 'Trojan,smsagent': 214, 'Riskware,mobilepay': 209, 'Adware,mobidash': 200, 'Trojan,mytrackp': 195, 'Adware,ewind': 195, 'Ransomware,slocker': 180, 'PUA,secapk': 175, 'Adware,kuguo': 174, 'Adware,oimobi': 173, 'Trojan,styricka': 164, 'Adware,baiduprotect': 162, 'Ransomware,jisut': 152, 'Trojan,gappusin': 148, 'Riskware,jiagu': 146, 'Backdoor,hiddad': 143, 'Riskware,revmob': 135, 'Trojan,gluper': 123, 'Trojan,lotoor': 122, 'Trojan,blouns': 115, 'PUA,youmi': 103, 'Dropper,ztorg': 98, 'Trojan,autoins': 92, 'Riskware,triada': 90, 'Trojan,rootnik': 85, 'Adware,adflex': 81, 'FileInfector,aqplay': 75, 'SMS,opfake': 71, 'Trojan,hypay': 70, 'Adware,batmobi': 70, 'Adware,fictus': 69, 'Adware,inmobi': 60, 'Ransomware,lockscreen': 59, 'Trojan,mobtes': 58, 'Adware,adend': 54, 'Banker,guerrilla': 50, 'Banker,asacub': 46, 'Trojan,autosms': 45, 'Adware,sprovider': 44, 'Trojan,boogr': 42, 'Ransomware,congur': 41, 'Adware,leadbolt': 39, 'Backdoor,moavt': 35, 'Spyware,sandr': 35, 'PUA,utchi': 32, 'SMS,plankton': 31, 'Trojan,mseg': 29, 'Adware,mulad': 29, 'Trojan,hiddenapp': 29, 'Riskware,tencentprotect': 29, 'Adware,domob': 29, 'Backdoor,fobus': 29, 'PUA,apptrack': 29, 'Trojan,wkload': 29, 'Adware,kalfere': 29, 'Scareware,avpass': 29, 'Backdoor,mobby': 29, 'Dropper,hqwar': 29, 'Adware,adwo': 29, 'PUA,scamapp': 29, 'Trojan,ginmaster': 29, 'FileInfector,commplat': 29, 'Dropper,boqx': 29, 'Adware,feiwo': 29, 'Trojan,hyspu': 29, 'FileInfector,leech': 29, 'Riskware,wapron': 29, 'Trojan,zbot': 29, 'Backdoor,androrat': 29, 'Ransomware,koler': 29, 'Adware,appad': 29, 'Dropper,ramnit': 29, 'Adware,mobisec': 29, 'Banker,marcher': 29, 'Trojan,qysly': 29, 'SMS,boxer': 29, 'Trojan,syringe': 29, 'Adware,kyview': 29, 'Backdoor,levida': 29, 'Adware,igexin': 29, 'Ransomware,fusob': 29, 'Trojan,basebridge': 29, 'Adware,admogo': 29, 'Adware,appsgeyser': 29, 'Dropper,rooter': 29, 'Banker,minimob': 29, 'SMS,smsdel': 29, 'Adware,adviator': 29, 'SMS,feejar': 29, 'PUA,umpay': 29, 'Banker,zitmo': 29, 'Riskware,deng': 29, 'Riskware,nqshield': 29, 'Riskware,anydown': 29, 'Trojan,lovetrap': 29, 'Spyware,spyagent': 29, 'Backdoor,droidkungfu': 29, 'Trojan,xinyinhe': 29, 'Adware,loki': 29, 'FileInfector,tachi': 29, 'Adware,pandaad': 29, 'Riskware,remotecode': 29, 'Adware,hiddenad': 29, 'Banker,svpeng': 29, 'Banker,faketoken': 29, 'Trojan,iconosys': 29, 'Trojan,systemmonitor': 29, 'Dropper,xiny': 29, 'Adware,viser': 29, 'Trojan,uupay': 29, 'Trojan,noicondl': 29, 'Riskware,badpac': 29, 'Adware,xynyin': 29, 'Backdoor,pyls': 29, 'Backdoor,dendroid': 29, 'PUA,cauly': 29, 'Riskware,talkw': 29, 'Riskware,metasploit': 29, 'Adware,dianjin': 29, 'Adware,hummingbad': 29, 'SMS,hipposms': 29, 'Backdoor,kmin': 29, 'Riskware,dnotua': 29, 'Trojan,drosel': 29, 'Trojan,rusms': 29, 'Adware,wooboo': 29, 'Adware,kyhub': 29, 'Adware,ganlet': 29, 'Riskware,kingroot': 29, 'Riskware,secneo': 29, 'Dropper,cnzz': 29, 'Spyware,qqspy': 29, 'Adware,frupi': 29, 'Spyware,smszombie': 29, 'Spyware,spynote': 29, 'Ransomware,masnu': 29, 'Spyware,kasandra': 29, 'Trojan,droiddreamlight': 29, 'FileInfector,gudex': 29, 'Adware,stopsms': 29, 'Adware,gmobi': 29, 'Trojan,wintertiger': 29, 'SMS,podec': 29, 'Trojan,typstu': 29, 'SMS,smsbot': 29, 'Riskware,wificrack': 29, 'Banker,fakebank': 29, 'Trojan,oveead': 29, 'Dropper,gorpo': 29, 'Trojan,coinge': 29, 'Adware,adcolony': 29, 'Trojan,autoinst': 29, 'Trojan,walkfree': 29, 'Adware,dianle': 29, 'Adware,mobclick': 29, 'Trojan,subspod': 29, 'Adware,plague': 29, 'Spyware,tekwon': 29, 'Trojan,uapush': 29, 'SMS,vietsms': 29, 'Trojan,droiddream': 29, 'Banker,gugi': 29, 'SMS,jsmshider': 29, 'Trojan,uten': 29, 'Spyware,spyoo': 29, 'Scareware,mobwin': 29, 'PUA,wiyun': 29, 'Trojan,gedma': 29, 'Trojan,obtes': 29, 'Banker,wroba': 29, 'Adware,accutrack': 29}\nrsampler = RandomOverSampler(sampling_strategy=dros, random_state=seed)\nX_ros, y_ros = rsampler.fit_resample(X,y)","212257b6":"dsmote = {'Riskware,smsreg': 9202, 'Riskware,smspay': 5197, 'Adware,shedun': 3495, 'Riskware,skymobi': 1878, 'Adware,zdtad': 1073, 'Adware,inoco': 1055, 'Trojan,cnsms': 652, 'Ransomware,smsspy': 627, 'Adware,dowgin': 455, 'Adware,airpush': 428, 'SMS,fakeinst': 388, 'Spyware,smforw': 337, 'Scareware,fakeapp': 262, 'Dropper,locker': 228, 'Spyware,smsthief': 215, 'Trojan,smsagent': 214, 'Riskware,mobilepay': 209, 'Adware,mobidash': 200, 'Trojan,mytrackp': 195, 'Adware,ewind': 195, 'Ransomware,slocker': 195, 'PUA,secapk': 195, 'Adware,kuguo': 195, 'Adware,oimobi': 195, 'Trojan,styricka': 195, 'Adware,baiduprotect': 195, 'Ransomware,jisut': 195, 'Trojan,gappusin': 195, 'Riskware,jiagu': 195, 'Backdoor,hiddad': 195, 'Riskware,revmob': 195, 'Trojan,gluper': 195, 'Trojan,lotoor': 195, 'Trojan,blouns': 195, 'PUA,youmi': 195, 'Dropper,ztorg': 98, 'Trojan,autoins': 98, 'Riskware,triada': 98, 'Trojan,rootnik': 98, 'Adware,adflex': 98, 'FileInfector,aqplay': 98, 'SMS,opfake': 98, 'Trojan,hypay': 98, 'Adware,batmobi': 98, 'Adware,fictus': 98, 'Adware,inmobi': 98, 'Ransomware,lockscreen': 98, 'Trojan,mobtes': 98, 'Adware,adend': 54, 'Banker,guerrilla': 54, 'Banker,asacub': 54, 'Trojan,autosms': 54, 'Adware,sprovider': 54, 'Trojan,boogr': 54, 'Ransomware,congur': 54, 'Adware,leadbolt': 54, 'Backdoor,moavt': 54, 'Spyware,sandr': 54, 'PUA,utchi': 54, 'SMS,plankton': 54, 'Trojan,mseg': 29, 'Adware,mulad': 29, 'Trojan,hiddenapp': 29, 'Riskware,tencentprotect': 29, 'Adware,domob': 29, 'Backdoor,fobus': 29, 'PUA,apptrack': 29, 'Trojan,wkload': 29, 'Adware,kalfere': 29, 'Scareware,avpass': 29, 'Backdoor,mobby': 29, 'Dropper,hqwar': 29, 'Adware,adwo': 29, 'PUA,scamapp': 29, 'Trojan,ginmaster': 29, 'FileInfector,commplat': 29, 'Dropper,boqx': 29, 'Adware,feiwo': 29, 'Trojan,hyspu': 29, 'FileInfector,leech': 29, 'Riskware,wapron': 29, 'Trojan,zbot': 29, 'Backdoor,androrat': 29, 'Ransomware,koler': 29, 'Adware,appad': 29, 'Dropper,ramnit': 29, 'Adware,mobisec': 29, 'Banker,marcher': 29, 'Trojan,qysly': 29, 'SMS,boxer': 29, 'Trojan,syringe': 29, 'Adware,kyview': 29, 'Backdoor,levida': 29, 'Adware,igexin': 29, 'Ransomware,fusob': 29, 'Trojan,basebridge': 29, 'Adware,admogo': 29, 'Adware,appsgeyser': 29, 'Dropper,rooter': 29, 'Banker,minimob': 29, 'SMS,smsdel': 29, 'Adware,adviator': 29, 'SMS,feejar': 29, 'PUA,umpay': 29, 'Banker,zitmo': 29, 'Riskware,deng': 29, 'Riskware,nqshield': 29, 'Riskware,anydown': 29, 'Trojan,lovetrap': 29, 'Spyware,spyagent': 29, 'Backdoor,droidkungfu': 29, 'Trojan,xinyinhe': 29, 'Adware,loki': 29, 'FileInfector,tachi': 29, 'Adware,pandaad': 29, 'Riskware,remotecode': 29, 'Adware,hiddenad': 29, 'Banker,svpeng': 29, 'Banker,faketoken': 29, 'Trojan,iconosys': 29, 'Trojan,systemmonitor': 29, 'Dropper,xiny': 29, 'Adware,viser': 29, 'Trojan,uupay': 29, 'Trojan,noicondl': 29, 'Riskware,badpac': 29, 'Adware,xynyin': 29, 'Backdoor,pyls': 29, 'Backdoor,dendroid': 29, 'PUA,cauly': 29, 'Riskware,talkw': 29, 'Riskware,metasploit': 29, 'Adware,dianjin': 29, 'Adware,hummingbad': 29, 'SMS,hipposms': 29, 'Backdoor,kmin': 29, 'Riskware,dnotua': 29, 'Trojan,drosel': 29, 'Trojan,rusms': 29, 'Adware,wooboo': 29, 'Adware,kyhub': 29, 'Adware,ganlet': 29, 'Riskware,kingroot': 29, 'Riskware,secneo': 29, 'Dropper,cnzz': 29, 'Spyware,qqspy': 29, 'Adware,frupi': 29, 'Spyware,smszombie': 29, 'Spyware,spynote': 29, 'Ransomware,masnu': 29, 'Spyware,kasandra': 29, 'Trojan,droiddreamlight': 29, 'FileInfector,gudex': 29, 'Adware,stopsms': 29, 'Adware,gmobi': 29, 'Trojan,wintertiger': 29, 'SMS,podec': 29, 'Trojan,typstu': 29, 'SMS,smsbot': 29, 'Riskware,wificrack': 29, 'Banker,fakebank': 29, 'Trojan,oveead': 29, 'Dropper,gorpo': 29, 'Trojan,coinge': 29, 'Adware,adcolony': 29, 'Trojan,autoinst': 29, 'Trojan,walkfree': 29, 'Adware,dianle': 29, 'Adware,mobclick': 29, 'Trojan,subspod': 29, 'Adware,plague': 29, 'Spyware,tekwon': 29, 'Trojan,uapush': 29, 'SMS,vietsms': 29, 'Trojan,droiddream': 29, 'Banker,gugi': 29, 'SMS,jsmshider': 29, 'Trojan,uten': 29, 'Spyware,spyoo': 29, 'Scareware,mobwin': 29, 'PUA,wiyun': 29, 'Trojan,gedma': 29, 'Trojan,obtes': 29, 'Banker,wroba': 29, 'Adware,accutrack': 29}\nssampler = SMOTE(sampling_strategy=dsmote, random_state=seed, n_jobs=-1)\nX_smote, y_smote = ssampler.fit_resample(X_ros, y_ros)","e56f8498":"y_smote = pd.DataFrame(y_smote.str.split(\",\"))\ny_smote[\"Category\"] = y_smote.loc[:,0].apply(lambda x: x[0])\ny_smote[\"Family\"] = y_smote.loc[:,0].apply(lambda x: x[1])\ny_smote.drop(0,1,inplace=True)","cdec4194":"X_train, X_test, y_train, y_test = train_test_split(pd.DataFrame(X_smote), y_smote, test_size=0.3, random_state=42, stratify=y_smote)","76974c4d":"# RF = RandomForestClassifier(n_estimators=1000, n_jobs=-1, random_state=seed)\n# RF.fit(X_train, y_train.Category)","d6c9147c":"LGBM = LGBMClassifier(n_estimators=800, learning_rate=0.075, subsample=0.7, num_leaves=50, n_jobs=-1, random_state=seed)\nLGBM.fit(X_train, y_train.Category)","c25d3e64":"# XGB = XGBClassifier(n_estimators=750, learning_rate=0.075, subsample=0.5, n_jobs=-1, random_state=seed) \n# XGB.fit(X_train, y_train.Category)","dd467fc6":"import os\nos.makedirs(\"parent_clfs\")\nos.makedirs(\"sub_clfs\")","ed303d78":"# dump(RF,\"parent_clfs\/ParentRF.joblib\")\ndump(LGBM,\"parent_clfs\/ParentLGBM.joblib\")\n# dump(XGB,\"parent_clfs\/ParentXGB.joblib\")","9f6d8e0b":"# ParentRF = load(\"parent_clfs\/ParentRF.joblib\")\nParentLGBM = load(\"parent_clfs\/ParentLGBM.joblib\")\n# ParentXGB = load(\"parent_clfs\/ParentXGB.joblib\")","07b6c31b":"# print(ParentRF.score(X_test, y_test.Category))\nprint(ParentLGBM.score(X_test, y_test.Category))\n# print(ParentXGB.score(X_test, y_test.Category))","9df70dc5":"LGBM=LGBMClassifier(n_estimators=500, learning_rate=0.05, seed=42)\nLGBM.fit(X_train,y_train.Family)\nLGBM.score(X_test,y_test.Family)","7b697670":"Cats = dict()\nfor cat in y_smote.Category.unique():\n    Cats[cat] = X_train.join(y_train)[y_train.Category==cat]","b06a5c3d":"Cats.keys()","383b0abd":"sub_clfs = {'Riskware': LGBMClassifier(n_jobs=-1, random_state=seed),\n 'Adware': LGBMClassifier(n_estimators=400, learning_rate=0.05, n_jobs=-1, random_state=seed),\n 'Trojan': LGBMClassifier(n_jobs=-1, random_state=seed),\n 'Ransomware': LGBMClassifier(n_jobs=-1, random_state=seed),\n 'Spyware': LGBMClassifier(n_jobs=-1, random_state=seed),\n 'SMS': LGBMClassifier(n_jobs=-1, random_state=seed),\n 'Dropper': LGBMClassifier(n_jobs=-1, random_state=seed),\n 'PUA': LGBMClassifier(n_jobs=-1, random_state=seed),\n 'Backdoor': LGBMClassifier(n_jobs=-1, random_state=seed),\n 'Scareware': LGBMClassifier(n_jobs=-1, random_state=seed),\n 'Banker': LGBMClassifier(n_jobs=-1, random_state=seed),\n 'FileInfector': LGBMClassifier(n_jobs=-1, random_state=seed)}","1a4019ba":"best_params = [{'n_estimators': 800, 'learning_rate': 0.025, 'feature_fraction': 0.75, 'num_leaves': 31},\n{'n_estimators': 800, 'learning_rate': 0.025, 'feature_fraction': 0.75, 'num_leaves': 31},\n{'n_estimators': 200, 'learning_rate': 0.075, 'feature_fraction': 0.75, 'num_leaves': 31},\n{'n_estimators': 800, 'learning_rate': 0.075, 'feature_fraction': 0.75, 'num_leaves': 31},\n{'n_estimators': 500, 'learning_rate': 0.075, 'feature_fraction': 0.75, 'num_leaves': 25},\n{'n_estimators': 200, 'learning_rate': 0.025, 'feature_fraction': 0.75, 'num_leaves': 31},\n{'n_estimators': 200, 'learning_rate': 0.1, 'feature_fraction': 0.75, 'num_leaves': 31},\n{'n_estimators': 200, 'learning_rate': 0.075, 'feature_fraction': 1, 'num_leaves': 31},\n{'n_estimators': 200, 'learning_rate': 0.025, 'feature_fraction': 0.75, 'num_leaves': 25},\n{'n_estimators': 200, 'learning_rate': 0.05, 'feature_fraction': 1, 'num_leaves': 25},\n{'n_estimators': 500, 'learning_rate': 0.1, 'feature_fraction': 0.75, 'num_leaves': 25},\n{'n_estimators': 500, 'learning_rate': 0.05, 'feature_fraction': 1, 'num_leaves': 25}]","8ab5eace":"for cat, param in zip(Cats.keys(), best_params):\n    sub_clfs[cat].set_params(**param)","db4d68ce":"# param_grid={'n_estimators': [250,500,750,1000],'learning_rate': [0.01, 0.03, 0.05, 0.07, 0.09],\n#             'feature_fraction':[0.75,1],'num_leaves': [25, 31, 50]}\n# for cat in Cats.keys():\n#     if list(Cats.keys()).index(cat) not in [0,3,8,10,11]:\n#         eascv = EvolutionaryAlgorithmSearchCV(sub_clfs[cat], param_grid)\n#         feat = Cats[cat].drop(['Category', 'Family'],1)\n#         target = Cats[cat]['Family']\n#         eascv.fit(feat, target)\n#         print(eascv.best_params_)","c2d3614b":"# Training and saving encoders\n# encoders=dict()\n# for cat in Cats.keys():\n#     encoders[cat] = LabelEncoder()\n#     encoders[cat].fit_transform(Cats[cat]['Family'])\n#     np.save(\"encoders\/\"+cat+'_classes.npy', encoders[cat].classes_)\n#     encoders[cat].classes_ = np.load(\"encoders\/\"+cat+'_classes.npy',allow_pickle=True)","0ac9fe38":"# Training and saving sub classifiers\nfor cat in Cats.keys():\n    print(cat, end=\" \")\n    feat = Cats[cat].drop(['Category', 'Family'],1)\n    target = Cats[cat]['Family']\n    sub_clfs[cat].fit(feat, target)\n    print(\"Trained.\")\n    dump(sub_clfs[cat],\"sub_clfs\/\"+cat+\".joblib\")","1bb03927":"sub_clfs=dict()\nfor cat in Cats.keys():\n    sub_clfs[cat] = load(\"sub_clfs\/\"+cat+\".joblib\")","4cb5605f":"def Hierarchical_classifier(X_test):\n    preds = []\n    Parent_clf = load(\"parent_clfs\/ParentLGBM.joblib\")\n    for i in range(len(X_test)):\n        x=X_test.iloc[i:i+1]\n        cat_pred = Parent_clf.predict(x)[0]\n        sub_clf = sub_clfs[cat_pred]\n        mal_pred = sub_clf.predict(x)\n        mal_pred = mal_pred[0]\n        preds.append([cat_pred,mal_pred])\n    return preds","bcbd6f8f":"#accuracy of each family\ndef fam_acc(y_test, preds):\n    for cat in Cats.keys():\n        ind = y_test.reset_index()[y_test.reset_index().Category==cat].index\n        true = y_test.iloc[ind, 1]\n        pred = preds.iloc[ind, 1]\n        acc = round(accuracy_score(true, pred)*100,2)\n        print(cat,acc)","4701b7a9":"preds = pd.DataFrame(Hierarchical_classifier(X_test))","6fff2b88":"print(\"Malware Category\", round(accuracy_score(y_test.iloc[:,0], preds.iloc[:,0])*100,2))","c23b6c23":"print(\"Malware Family\", round(accuracy_score(y_test.iloc[:,1], preds.iloc[:,1])*100,2))","6dc75ce5":"fam_acc(y_test, preds)","7b8edd52":"prds =  pd.DataFrame(Hierarchical_classifier(X_train))","1406eda5":"fam_acc(y_train, prds)","71c809e0":"## Prep data\n***Analyzing the columns - null values, data type and unique values***","7ce8d624":"## Malware Family model","ff3531d6":"\n## Malware Category","1b09ba80":"### EvolutionaryAlgorithmSearchCV","4e0fe8fe":"### SMOTE Malware Category","9a86f6c1":"## The dataset","f55c1dfe":"## Exploring the target columns","11a6dfb3":"Riskware . Best individual is: {'n_estimators': 800, 'learning_rate': 0.025, 'feature_fraction': 0.75, 'num_leaves': 31}\nwith fitness: 0.955862977602108\n\nAdware . Best individual is: {'n_estimators': 800, 'learning_rate': 0.025, 'feature_fraction': 0.75, 'num_leaves': 31}\nwith fitness: 0.9293042641872395\n\nRansomware . Best individual is: {'n_estimators': 200, 'learning_rate': 0.075, 'feature_fraction': 0.75, 'num_leaves': 31}\nwith fitness: 0.8047673098751419\n\nBanker . Best individual is: {'n_estimators': 800, 'learning_rate': 0.075, 'feature_fraction': 0.75, 'num_leaves': 31}\nwith fitness: 0.9957805907172996\n\nDropper . Best individual is: {'n_estimators': 500, 'learning_rate': 0.075, 'feature_fraction': 0.75, 'num_leaves': 25}\nwith fitness: 0.918918918918919\n\nSpyware . Best individual is: {'n_estimators': 200, 'learning_rate': 0.025, 'feature_fraction': 0.75, 'num_leaves': 31}\nwith fitness: 0.9188712522045855\n\nTrojan . Best individual is: {'n_estimators': 200, 'learning_rate': 0.1, 'feature_fraction': 0.75, 'num_leaves': 31}\nwith fitness: 0.9324664429530202\n\nSMS . Best individual is: {'n_estimators': 200, 'learning_rate': 0.075, 'feature_fraction': 1, 'num_leaves': 31}\nwith fitness: 0.935064935064935\n\nScareware . Best individual is: {'n_estimators': 200, 'learning_rate': 0.025, 'feature_fraction': 0.75, 'num_leaves': 25}\nwith fitness: 0.9910714285714286\n\nPUA . Best individual is: {'n_estimators': 200, 'learning_rate': 0.05, 'feature_fraction': 1, 'num_leaves': 25}\nwith fitness: 0.9223300970873787\n\nBackdoor . Best individual is: {'n_estimators': 500, 'learning_rate': 0.1, 'feature_fraction': 0.75, 'num_leaves': 25}\nwith fitness: 0.9821958456973294\n\nFileInfector . Best individual is: {'n_estimators': 500, 'learning_rate': 0.05, 'feature_fraction': 1, 'num_leaves': 25}\nwith fitness: 0.9866666666666667","5fb4f2df":"## Importing the libraries","905a046d":"## Tuning Results\n\nBest individual is: {'max_depth': None, 'n_estimators': 1000, 'min_samples_split': 2}\n\nwith fitness: 0.9327086122266846\n\nRF\n\nbest score: 0.9327086122266846\n\nbest params: {'max_depth': None, 'n_estimators': 1000, 'min_samples_split': 2}","76cc3265":"### Acer LGBM tuning\nBest individual is: {'n_estimators': 800, 'learning_rate': 0.075, 'subsample': 0.7, 'num_leaves': 31}\nwith fitness: 0.9199689601655457\n\nLGBM\n\nbest score: 0.9199689601655457\n\nbest params: {'n_estimators': 800, 'learning_rate': 0.075, 'subsample': 0.7, 'num_leaves': 31}","ee4355bc":"### Evaluate Base Models","0a3aef17":"## Hierarchical Classification","9b9d5f72":"### Final models for Malware Category","be72daba":"## Final Prep","5d5b91e8":"## Model Imports","69c5bfca":"### Kaggle LGBM tuning\nBest individual is: {'n_estimators': 750, 'learning_rate': 0.1, 'subsample': 0.9, 'num_leaves': 50}\nwith fitness: 0.9203828246249354\n\nLGBM\n\nbest score: 0.9203828246249354\n\nbest params: {'n_estimators': 750, 'learning_rate': 0.1, 'subsample': 0.9, 'num_leaves': 50}"}}