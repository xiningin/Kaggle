{"cell_type":{"a6bf2f91":"code","d27f72ec":"code","486cd2d1":"code","4bcfba95":"code","b001a737":"code","b0383a4c":"code","9a8588e9":"code","f6233970":"code","56fd2509":"code","6865c6f0":"code","df315bef":"markdown"},"source":{"a6bf2f91":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d27f72ec":"data = pd.read_csv(\"..\/input\/biomechanical-features-of-orthopedic-patients\/column_2C_weka.csv\")\ndata.head()","486cd2d1":"data.drop([\"degree_spondylolisthesis\"],axis=1)","4bcfba95":"data['class'] = [0 if each == \"Normal\" else 1 for each in data['class'] ]\ny = data['class'].values\nx_data = data.drop(['class'],axis=1)","b001a737":"# Normalization\nx = (x_data - np.min(x_data))\/(np.max(x_data)-np.min(x_data))","b0383a4c":"x,y","9a8588e9":"#training model\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.3,random_state =1)","f6233970":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors= 19) # k=3\nknn.fit(x_train,y_train)\nprediction = knn.predict(x_test)","56fd2509":"print(\"{} n\u0131n score: {}\".format(3,knn.score(x_test,y_test)))","6865c6f0":"# find k values\nscore_list = []\nfor each in range(1,20):\n    knn2 = KNeighborsClassifier(n_neighbors=each)\n    knn2.fit(x_train,y_train)\n    score_list.append(knn2.score(x_test,y_test))\n    \nplt.plot(range(1,20),score_list)\nplt.xlabel(\"k values\")\nplt.ylabel(\"accuracy\")\nplt.show()","df315bef":"# KNN Model"}}