{"cell_type":{"ca454f47":"code","98b0b9e8":"code","760d9e6e":"code","fcd90eb8":"code","ade14cda":"code","a4b9258b":"code","f006bc2a":"code","953a3634":"code","312ba14c":"code","93abcf3c":"code","06ff0f6e":"code","0e974ac3":"code","4c21725a":"code","ad70cb4f":"code","b21e4c56":"code","28da8ad1":"code","0ad0a74d":"code","799583e9":"code","fba05142":"code","31091220":"code","56b9d681":"code","9e65a8f8":"code","6a33d637":"code","db9eb006":"code","56c31005":"code","83706a31":"markdown","ee9e4eef":"markdown"},"source":{"ca454f47":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport xgboost as xgb\nfrom xgboost import plot_importance, plot_tree\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nplt.style.use('fivethirtyeight')","98b0b9e8":"pjme = pd.read_csv('..\/input\/PJME_hourly.csv', index_col=[0], parse_dates=[0])","760d9e6e":"color_pal = [\"#F8766D\", \"#D39200\", \"#93AA00\", \"#00BA38\", \"#00C19F\", \"#00B9E3\", \"#619CFF\", \"#DB72FB\"]\n_ = pjme.plot(style='.', figsize=(15,5), color=color_pal[0], title='PJM East')","fcd90eb8":"split_date = '01-Jan-2015'\npjme_train = pjme.loc[pjme.index <= split_date].copy()\npjme_test = pjme.loc[pjme.index > split_date].copy()","ade14cda":"_ = pjme_test \\\n    .rename(columns={'PJME_MW': 'TEST SET'}) \\\n    .join(pjme_train.rename(columns={'PJME_MW': 'TRAINING SET'}), how='outer') \\\n    .plot(figsize=(15,5), title='PJM East', style='.')","a4b9258b":"def create_features(df, label=None):\n    \"\"\"\n    Creates time series features from datetime index\n    \"\"\"\n    df['date'] = df.index\n    df['hour'] = df['date'].dt.hour\n    df['dayofweek'] = df['date'].dt.dayofweek\n    df['quarter'] = df['date'].dt.quarter\n    df['month'] = df['date'].dt.month\n    df['year'] = df['date'].dt.year\n    df['dayofyear'] = df['date'].dt.dayofyear\n    df['dayofmonth'] = df['date'].dt.day\n    df['weekofyear'] = df['date'].dt.weekofyear\n    \n    X = df[['hour','dayofweek','quarter','month','year',\n           'dayofyear','dayofmonth','weekofyear']]\n    if label:\n        y = df[label]\n        return X, y\n    return X","f006bc2a":"X_train, y_train = create_features(pjme_train, label='PJME_MW')\nX_test, y_test = create_features(pjme_test, label='PJME_MW')","953a3634":"reg = xgb.XGBRegressor(n_estimators=1234,max_depth=7,gamma=1,learning_rate=0.113)\nreg.fit(X_train, y_train,\n        eval_set=[(X_train, y_train), (X_test, y_test)],\n        early_stopping_rounds=100,\n       verbose=True) # Change verbose to True if you want to see it train","312ba14c":"_ = plot_importance(reg, height=0.9)","93abcf3c":"pjme_test['MW_Prediction'] = reg.predict(X_test)\npjme_all = pd.concat([pjme_test, pjme_train], sort=False)","06ff0f6e":"_ = pjme_all[['PJME_MW','MW_Prediction']].plot(figsize=(15, 5))","0e974ac3":"# Plot the forecast with the actuals\nf, ax = plt.subplots(1)\nf.set_figheight(5)\nf.set_figwidth(15)\n_ = pjme_all[['MW_Prediction','PJME_MW']].plot(ax=ax,\n                                              style=['-','.'])\nax.set_xbound(lower='01-01-2015', upper='02-01-2015')\nax.set_ylim(0, 60000)\nplot = plt.suptitle('January 2015 Forecast vs Actuals')","4c21725a":"# Plot the forecast with the actuals\nf, ax = plt.subplots(1)\nf.set_figheight(5)\nf.set_figwidth(15)\n_ = pjme_all[['MW_Prediction','PJME_MW']].plot(ax=ax,\n                                              style=['-','.'])\nax.set_xbound(lower='01-01-2015', upper='01-08-2015')\nax.set_ylim(0, 60000)\nplot = plt.suptitle('First Week of January Forecast vs Actuals')","ad70cb4f":"f, ax = plt.subplots(1)\nf.set_figheight(5)\nf.set_figwidth(15)\n_ = pjme_all[['MW_Prediction','PJME_MW']].plot(ax=ax,\n                                              style=['-','.'])\nax.set_ylim(0, 60000)\nax.set_xbound(lower='07-01-2015', upper='07-08-2015')\nplot = plt.suptitle('First Week of July Forecast vs Actuals')","b21e4c56":"mean_squared_error(y_true=pjme_test['PJME_MW'],\n                   y_pred=pjme_test['MW_Prediction'])","28da8ad1":"mean_absolute_error(y_true=pjme_test['PJME_MW'],\n                   y_pred=pjme_test['MW_Prediction'])","0ad0a74d":"def mean_absolute_percentage_error(y_true, y_pred): \n    \"\"\"Calculates MAPE given y_true and y_pred\"\"\"\n    y_true, y_pred = np.array(y_true), np.array(y_pred)\n    return np.mean(np.abs((y_true - y_pred) \/ y_true)) * 100","799583e9":"mean_absolute_percentage_error(y_true=pjme_test['PJME_MW'],\n                   y_pred=pjme_test['MW_Prediction'])","fba05142":"pjme_test['error'] = pjme_test['PJME_MW'] - pjme_test['MW_Prediction']\npjme_test['abs_error'] = pjme_test['error'].apply(np.abs)\nerror_by_day = pjme_test.groupby(['year','month','dayofmonth']) \\\n    .mean()[['PJME_MW','MW_Prediction','error','abs_error']]","31091220":"# Over forecasted days\nerror_by_day.sort_values('error', ascending=True).head(10)","56b9d681":"# Worst absolute predicted days\nerror_by_day.sort_values('abs_error', ascending=False).head(10)","9e65a8f8":"# Best predicted days\nerror_by_day.sort_values('abs_error', ascending=True).head(10)","6a33d637":"f, ax = plt.subplots(1)\nf.set_figheight(5)\nf.set_figwidth(10)\n_ = pjme_all[['MW_Prediction','PJME_MW']].plot(ax=ax,\n                                              style=['-','.'])\nax.set_ylim(0, 60000)\nax.set_xbound(lower='08-13-2016', upper='08-14-2016')\nplot = plt.suptitle('Aug 13, 2016 - Worst Predicted Day')","db9eb006":"f, ax = plt.subplots(1)\nf.set_figheight(5)\nf.set_figwidth(10)\n_ = pjme_all[['MW_Prediction','PJME_MW']].plot(ax=ax,\n                                              style=['-','.'])\nax.set_ylim(0, 60000)\nax.set_xbound(lower='10-03-2016', upper='10-04-2016')\nplot = plt.suptitle('Oct 3, 2016 - Best Predicted Day')","56c31005":"f, ax = plt.subplots(1)\nf.set_figheight(5)\nf.set_figwidth(10)\n_ = pjme_all[['MW_Prediction','PJME_MW']].plot(ax=ax,\n                                              style=['-','.'])\nax.set_ylim(0, 60000)\nax.set_xbound(lower='08-13-2016', upper='08-14-2016')\nplot = plt.suptitle('Aug 13, 2016 - Worst Predicted Day')","83706a31":"# Error Metrics On Test Set\nOur RMSE error is 13780445  \nOur MAE error is 2848.89  \nOur MAPE error is 8.9%","ee9e4eef":"# Hourly Time Series Forecasting using XGBoost"}}