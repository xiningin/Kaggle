{"cell_type":{"aa66960e":"code","41b7b49a":"code","3c3107c3":"code","abf94934":"code","b6e72d91":"code","a5fe628d":"code","45c27be1":"code","e49c4f70":"code","f0ae8302":"code","ee878bcc":"code","67f6eb91":"code","3e49e8ae":"code","1c09b38f":"code","7ee35428":"code","2857d275":"code","8d49602d":"code","7c7566fd":"code","eb3c4687":"code","07057e5e":"code","0b46041a":"code","fb3bbdb4":"code","fbce1d88":"code","d9dd799c":"code","a719ea14":"code","36bf396d":"code","27f70ce3":"code","197f8d25":"code","5c5412e6":"code","f41d7497":"code","c9395316":"code","d1357ab0":"code","c82e7e8b":"code","f82b502d":"code","20557ef6":"code","2883d7c5":"code","f75850af":"code","bb4bcb22":"code","51957b56":"markdown","03de37d0":"markdown","881526e3":"markdown","318d02f8":"markdown","db5fa19e":"markdown"},"source":{"aa66960e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","41b7b49a":"data2015 = pd.read_csv('..\/input\/2015.csv') #Read our datas from csv files.","3c3107c3":"data2016 = pd.read_csv('..\/input\/2016.csv')","abf94934":"data2017 = pd.read_csv('..\/input\/2017.csv')","b6e72d91":"data2015.info()","a5fe628d":"data2015.columns","45c27be1":"data2015.shape #That means we've got 158 rows and 13 columns","e49c4f70":"data2015.corr() #give us to correloation map","f0ae8302":"f,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(data2015.corr(), annot=True,fmt='.1f',ax=ax) #this give us a figure of correlation map\nplt.show() #dismiss an information column","ee878bcc":"data2015.head(10) #Default value is 5","67f6eb91":"data2015.columns","3e49e8ae":"data2015.Freedom.plot(kind='line',color='g',label='Freedom',linewidth=1,alpha=0.5,linestyle='-.')\ndata2015.Family.plot(kind='line',color='red',label='Family',linewidth=1,alpha=0.5,linestyle=':')\nplt.legend()\nplt.xlabel='x axis'\nplt.ylabel='y axis'\nplt.show()","1c09b38f":"data2015.Freedom.plot(kind='line',color='g',label='2015Freedom',linewidth=1,alpha=0.5,linestyle='-.')\ndata2016.Freedom.plot(kind='line',color='red',label='2016Freedom',linewidth=1,alpha=0.5,linestyle=':')\nplt.legend()\nplt.xlabel='x axis'\nplt.ylabel='y axis'\nplt.show()","7ee35428":"data2015.columns","2857d275":"data2015.plot(kind='scatter',x='Family',y='Generosity',alpha=0.5,color='green')\nplt.xlabel = 'Family'\nplt.ylabel = 'Generosity'\nplt.show()","8d49602d":"#histogram plot\ndata2015.Generosity.plot(kind = 'hist',bins = 50,figsize = (12,12))\nplt.show()","7c7566fd":"data2015","eb3c4687":"#Filtering\nfiltered_data = data2015['Freedom'] > 0.65\ndata2015[filtered_data]","07057e5e":"#Filtering with use logical_and method\ndata2015[np.logical_and(data2015['Freedom']>0.65, data2015['Family']>1.34)]","0b46041a":"#Let's use for loop on this project\nfor index,value in data2015[['Family']][0:2].iterrows():\n    print(\"index: \",index,\"value: \",value)","fb3bbdb4":"#List comprehension usage\naverage = sum(data2015.Family)\/len(data2015.Family)\ndata2015[\"Family_Situtation\"] = [\"Above Average\" if i>average else \"Average\" if i==average else \"Below Average\" for i in data2015.Family]\ndata2015.columns #We'll see Family_Situtation is in our columns right now!\ndata2015.head()","fbce1d88":"#Use a filter for see the Below Average countries\nfiltered_data = data2015.Family_Situtation ==\"Below Average\"\ndata2015[filtered_data]","d9dd799c":"print(data2015['Region'].value_counts(dropna=False))\n#That means; there are 40 Sab-Saharan Africa, 29 Central and Eastern Europe etc. countries in this report.","a719ea14":"data2015.describe()\n#This method gives us just numerical values.\n#min is minimum value of a feature\n#max is maximum value of a feature\n#%50 is median of a feature\n#%25 is median of %50 and min values in a feature (that named as Q1)\n#%75 is median of \u00bd50 and max values in a feature (that named as Q3)\n\n#Outlier data: the value that is considerably higher or lower from rest of the data\n#IQR = (Q3-Q1)\n#If a value smaller than Q1-(1.5xIQR) or bigger than Q3+(1.5xIQR) that means; that data is an outlier data!","36bf396d":"#boxplot shows us min, max, quantiles(%25,%50,%75)\n# Black line at top is max\n# Blue line at top is 75%\n# Red line is median (50%)\n# Blue line at bottom is 25%\n# Black line at bottom is min\n# There is an outlier data. It's shape a circle and it located on 'Below Average'\ndata2015.boxplot(column='Happiness Score',by='Family_Situtation')\nplt.show()","27f70ce3":"#create a small data from data2015\nsmaller_data = data2015.tail()\nsmaller_data","197f8d25":"#melt method is a method of pandas\n#frame shows us which data will used\n#id_vars show us which feature won't melt\n#value_vars show us which features will melt\nmelted_data = pd.melt(frame=smaller_data,id_vars='Country',value_vars=['Generosity','Family'])\nmelted_data","5c5412e6":"#pivot method is used for reverse of melting.\nmelted_data.pivot(index='Country',columns='variable',values='value')","f41d7497":"#concatenate datas\ndata1 = data2015.head()\ndata2 = data2015.tail()\nconcat_data = pd.concat([data1,data2],axis=0,ignore_index=False)\n#'[data1,data2]' means concat data1 and data2\n#'axis=0' means adds dataframes in row\n#'ignore_index = True' means give new indexes our datas. Firstly, Rwanda's index was 153 but we ignore it and its index is 5 now.\nconcat_data","c9395316":"#adds dataframes in columns\ndata1 = data2015['Family'].head()\ndata2 =data2015['Generosity'].head()\nconcat1_data = pd.concat([data1,data2],axis=1)\nconcat1_data","d1357ab0":"#if we want to learn our datas' type, we use dtypes method.\ndata2015.dtypes","c82e7e8b":"#we can convert types of features. We use astype method for it.\n#for example; type of Freedom feature is float and I want to convert it to int.\ndata2015['Freedom'] = data2015['Freedom'].astype('int')\ndata2015.dtypes\n#as you can see; type od Freedom data is changed.","f82b502d":"data2015.head()\n#All of the indexes of Freedom are 0 right now. Because we converted it and 0.xxx is 0 right now.\n#for this reason we should read the data again. This is just an example.\ndata2015 = pd.read_csv('..\/input\/2015.csv')\ndata2015.head()","20557ef6":"#let's add our Family_Situtations feature quickly again.\naverage = sum(data2015.Family)\/len(data2015.Family)\ndata2015[\"Family_Situtation\"] = [\"Above Average\" if i>average else \"Average\" if i==average else \"Below Average\" for i in data2015.Family]\ndata2015.columns\n#we added it!","2883d7c5":"#Some datas could be have some NaN (Not-a-Number) values. That datas named as 'Missing Value' Let's check it!\ndata2015.info()","f75850af":"#Check it with a feature\ndata2015['Region'].value_counts(dropna=False)","bb4bcb22":"assert data2015.Freedom.dtype==float #that returns nothing. Because that's true.","51957b56":"We have no NaN value, you can see that easily. So, we have no **'missing value'** in there.\nWe can use '**assert**' for test our datas. If our test is true, return nothing.","03de37d0":"**Let's see the difference data2015's and data2016's Freedom feature**","881526e3":"**Let's see a scatter plot example**","318d02f8":"**I'll use data2015 for my project**","db5fa19e":"**Let's see the difference between Family and Freedom feature in line plot**"}}