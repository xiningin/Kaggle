{"cell_type":{"c77be2d3":"code","36c6ea4f":"code","d3696384":"code","892c56bd":"code","52f9d073":"code","4a868bb0":"code","089f1649":"code","17c3bd8e":"code","782157f6":"code","11068d71":"code","acf5f1e8":"code","5d30f455":"code","f488d61b":"code","dc0f2f4b":"code","e67be4b3":"code","0c7e891f":"code","a7fe5806":"code","88ff82c0":"code","417249b9":"code","1088b272":"markdown","6e878f15":"markdown","07f4bf10":"markdown","a6e5d5c7":"markdown","316202f6":"markdown","32ae9a96":"markdown"},"source":{"c77be2d3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns \nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","36c6ea4f":"#Read data\ntrain = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")\nprint(train.shape)\nprint(test.shape)\n","d3696384":"train.head()","892c56bd":"Y_train = train[\"label\"]\n#drop label column\nX_train = train.drop(labels=[\"label\"], axis=1)","52f9d073":"#Plot Data\nplt.figure(figsize =(15,10))\ng = sns.countplot(Y_train)","4a868bb0":"#Normalization\nX_train = X_train \/ 255.0\ntest = test \/ 255.0","089f1649":"#Reshape\nX_train = X_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)","17c3bd8e":"# Label encoding \nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding**\nY_train = to_categorical(Y_train, num_classes = 10)","782157f6":"#Split test and train set\nfrom sklearn.model_selection import train_test_split\n# Set the random seed\nrandom_seed = 2\n\nX_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size=0.1, random_state=random_seed)\nprint(\"X_train shape: \", X_train.shape)\nprint(\"X_test shape: \", X_val.shape)\nprint(\"Y_train shape: \", Y_train.shape)\nprint(\"Y_test shape: \", Y_val.shape)","11068d71":"#CNN\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical  # convert to one-hot-encoding\nfrom keras.models import Sequential # Sequential: A structure with layers in it.\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop, Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\nmodel = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))\n\n","acf5f1e8":"#Adam Optimizer\n#optimizer = Adam(lr=0.003, beta_1=0.9, beta_2=0.999)\noptimizer = RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)\n","5d30f455":"#Compile\nmodel.compile(optimizer = optimizer, loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])","f488d61b":"# Set a learning rate annealer\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)","dc0f2f4b":"epochs = 1 # for better result increase the epochs\nbatch_size = 86","e67be4b3":"#Data Augmentation\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\n\ndatagen.fit(X_train)","0c7e891f":"#Fitting\nhistory = model.fit_generator(datagen.flow(X_train, Y_train, batch_size),\n                             epochs = epochs, validation_data = (X_val, Y_val), steps_per_epoch = X_train.shape[0] \/\/ batch_size)","a7fe5806":"# Look at confusion matrix \n# https:\/\/www.kaggle.com\/yassineghouzam\/introduction-to-cnn-keras-0-997-top-6\n\ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n\n# Predict the values from the validation dataset\nY_pred = model.predict(X_val)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(Y_val,axis = 1) \n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n# plot the confusion matrix\nplot_confusion_matrix(confusion_mtx, classes = range(10)) ","88ff82c0":"# predict results\nresults = model.predict(test)\n\n# select the indix with the maximum probability\nresults = np.argmax(results,axis = 1)\n\nresults = pd.Series(results,name=\"Label\")","417249b9":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"cnn_submission.csv\",index=False)","1088b272":"# Develop Model","6e878f15":"This is my first approach to Keras. \nI followed some shared notebooks to totally understand some things about how it works. So thanks to:\n\n* https:\/\/www.kaggle.com\/yassineghouzam\/introduction-to-cnn-keras-0-997-top-6\n* https:\/\/www.kaggle.com\/cihanyatbaz\/cnn-with-digit-recognizer\n* https:\/\/www.kaggle.com\/toregil\/welcome-to-deep-learning-cnn-99","07f4bf10":"# Read Data","a6e5d5c7":"# Understand and Prepare Data","316202f6":"# Submit","32ae9a96":"# Results"}}