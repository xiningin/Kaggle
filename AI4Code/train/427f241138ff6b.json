{"cell_type":{"fc569e6e":"code","a597269e":"code","fe643854":"code","1aa5a8d8":"code","fedad5e9":"code","8cc0f825":"code","5e22215a":"code","878e91bb":"code","f374887a":"code","89db36c6":"code","39397a39":"code","9017e84c":"code","d6ad0023":"code","05185134":"code","51eb0d4b":"code","dbd71851":"code","f45e2b18":"code","5e6a2792":"code","5df042e4":"markdown","f68c4a65":"markdown","34d9ad04":"markdown","537e9f7c":"markdown","9e1055ff":"markdown","8888147e":"markdown","066f230f":"markdown","120080b1":"markdown","35d4a726":"markdown"},"source":{"fc569e6e":"import os\nimport sklearn\nimport itertools\nimport collections\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport datetime as dt\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud\nfrom sklearn.preprocessing import LabelEncoder\n\nsns.set(font_scale=1.5)\nsns.set(rc={'figure.figsize': (11.7, 8.27)})\nsns.set_style(\"whitegrid\", {'axes.grid': False})","a597269e":"df = pd.read_csv('\/kaggle\/input\/jobs-on-naukricom\/home\/sdf\/marketing_sample_for_naukri_com-jobs__20190701_20190830__30k_data.csv')\ndf.info()","fe643854":"df.head(2)","1aa5a8d8":"#df = pd.read_csv('\/kaggle\/input\/jobs-on-naukricom\/home\/sdf\/marketing_sample_for_naukri_com-jobs__20190701_20190830__30k_data.csv')\ndef clean(df):\n    date_le = LabelEncoder()\n    df.loc[:, 'Crawl Timestamp'] = df['Crawl Timestamp'].apply(\n        lambda x: dt.datetime.strptime(x, \"%Y-%m-%d %H:%M:%S +%f\").date())\n    #df['Job Experience Required'] = date_le.fit_transform(\n    #    list(df['Job Experience Required']))\n    df['Job Salary'] = df['Job Salary'].str.replace(',', '', regex=False)\n    df['Job Salary'] = df['Job Salary'].str.findall(\n        '[0-9]{4,}').apply(lambda x: x if x else ['0']).fillna('0')\n    df['Job Salary'] = df['Job Salary'].apply(\n        lambda x: '-'.join(x) if ((x[0] != '1') and (len(x)==2)) else '0')\n    return df, date_le","fedad5e9":"df, date_le = clean(df)","8cc0f825":"temp = df['Job Experience Required'].value_counts()[:10][::-1]\npx.bar(x=temp.values, y=temp.index, orientation='h', color_discrete_sequence=['forestgreen'],width=800,labels={'x':'Count','y':'Work experience'})","5e22215a":"x = collections.Counter(df['Job Salary']).most_common(20)\na, b = list(map(lambda x: str(x[0]), x)), list(map(lambda x: x[1], x))\nplt.xticks(rotation=80)\nfig = sns.barplot(x=a[1:], y=b[1:], order=a[1:])","878e91bb":"# top job titles for\ndef salary_top_5(salary, col2):\n    temp = df.loc[df['Job Salary'] == salary, col2].value_counts()[:5]\n    fig = px.pie(names=temp.index, values=temp.values, hole=0.6)\n    fig.show()\n    return fig","f374887a":"_ = salary_top_5('200000-400000', 'Job Title')","89db36c6":"_ = salary_top_5('200000-400000', 'Role')","39397a39":"_ = salary_top_5('200000-400000', 'Role Category')","9017e84c":"THRESH = 10\ntop_loc = df.groupby('Location').size().nlargest(10).index\nloc = []\nsal = []\nc = []\nfor group in df[df.Location.isin(top_loc)].groupby('Location'):\n    a = group[1]['Job Salary'].value_counts()\n    a = a[a>THRESH]\n    a = a[a.index!='0']\n    for ele in a.index:\n        loc.append(group[0])\n        sal.append(ele)\n        c.append(a[ele])\ndr = pd.DataFrame({'Location':loc,'Salary Range':sal,'No. of Postings':c})\npx.bar(dr,x='Location',y='No. of Postings',color='Salary Range')","d6ad0023":"roles = df['Role Category'].value_counts()[:10].index\nlocs = df['Location'].value_counts()[:10].index\ndf1 = df[(df['Role Category'].isin(roles)) & (df['Location'].isin(locs))].groupby(\n    ['Role Category', 'Location']).size().reset_index().sort_values(by=0, ascending=False)\ndf1 = df1.pivot(index='Role Category', columns='Location', values=0).fillna(0)\ndf1 = df1.applymap(lambda x: 1000 if x > 1000 else x)\nsns.heatmap(df1)","05185134":"roles = df['Role'].value_counts()[:10].index\nlocs = df['Location'].value_counts()[:10].index\ndf1 = df[(df['Role'].isin(roles)) & (df['Location'].isin(locs))].groupby(\n    ['Role', 'Location']).size().reset_index().sort_values(by=0, ascending=False)\ndf1 = df1.pivot(index='Role', columns='Location', values=0).fillna(0)\ndf1 = df1.applymap(lambda x: 800 if x > 800 else x)\nsns.heatmap(df1)","51eb0d4b":"def nested_wc(col, delim, color='white'):\n    a = df[col].apply(lambda x: list(\n        map(lambda y: y.strip(), x.strip().split(delim))) if type(x) != float else [])\n    freq = {}\n    for x in a:\n        for y in x:\n            if y not in freq.keys():\n                freq[y] = 1\n            else:\n                freq[y] += 1\n    wc = WordCloud(width=600, height=400, min_font_size=5, max_font_size=150,\n                   background_color=color).generate_from_frequencies(freq)\n    plt.axis('off')\n    plt.imshow(wc)","dbd71851":"# functional Area heatmap\nnested_wc('Functional Area', ',', '#ff6347')","f45e2b18":"# key skills heatmap\nnested_wc('Key Skills', '|', 'yellow')","5e6a2792":"# industry heatmap\nnested_wc('Industry', ',', 'green')","5df042e4":"### Lets view top 5 job titles, role and role category for the most common salary range","f68c4a65":"### Generic Wordcloud function","34d9ad04":"## Job title for specific salary","537e9f7c":"## Setup","9e1055ff":"## WordClouds","8888147e":"## Salary ranges with maximum postings","066f230f":"## Top in-demand Work ex","120080b1":"## Location and Role heatmap","35d4a726":"## Location wise Salary range offers"}}