{"cell_type":{"df654c99":"code","24531166":"code","542d9ae6":"code","f06957d0":"code","250afb3b":"code","306c870e":"code","18d716ba":"code","b0144ecc":"code","685f02d4":"code","bb310571":"code","59be3ff7":"code","8b6cbc06":"code","1b30a1fa":"code","733ecb30":"code","5716ac89":"code","86d9ae30":"code","51f68ad2":"code","c23f055f":"code","9a11c947":"code","eb6e334d":"code","4249d769":"code","f2dbe6e5":"code","62b43be2":"code","201ac943":"code","3a26a0ef":"code","e0f2c8d6":"code","695838a0":"code","f84f5cf7":"code","91f5cd9d":"code","c8b198d4":"code","727dfeba":"code","81ed6020":"code","b97bbb31":"code","56faf07d":"markdown","d17b195a":"markdown","8e089e85":"markdown","b86f3070":"markdown","cc39ee4a":"markdown","fd543a27":"markdown","6465caa3":"markdown","581eed68":"markdown","d7d193bc":"markdown","4591a8b1":"markdown"},"source":{"df654c99":"# packages\n\n# standard\nimport numpy as np\nimport pandas as pd\nimport time\n\n# plots\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns\nfrom statsmodels.graphics.mosaicplot import mosaic\n\n# PCA\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\n\n# start H2O\nimport h2o\nfrom h2o.estimators import H2ORandomForestEstimator","24531166":"# read data \/ preview\ndf = pd.read_csv('..\/input\/orbitclassification\/classast - pha.csv')\ndf.head()","542d9ae6":"# structure of data frame\ndf.info()","f06957d0":"# summary stats for numerical features\ndf.describe()","250afb3b":"# eval target\nprint(df['class'].value_counts())\n\nplt.figure(figsize=(8,6))\ndf['class'].value_counts().plot(kind='bar')\nplt.title('Target')\nplt.grid()\nplt.show()","306c870e":"features_num = ['a (AU)', 'e', 'i (deg)', 'w (deg)', \n                'Node (deg)', 'M (deg)', 'q (AU)',\n                'Q (AU)', 'P (yr)', 'H (mag)', 'MOID (AU)']","18d716ba":"# plot distributions\nfor f in features_num:\n    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12,7))\n    ax1.hist(df[f], bins=50)\n    ax1.grid()\n    ax1.set_title(f)\n    ax2.boxplot(df[f], vert=False)\n    ax2.grid()   \n    ax2.set_title(f + '- boxplot')\n    plt.show()","b0144ecc":"# look at outlier\ndf[df['a (AU)'] > 17]","685f02d4":"# remove outlier for the following\ndf = df[df['a (AU)']<=17]","bb310571":"# check boxplots again\nfor f in features_num:\n    plt.figure(figsize=(10,2))\n    df[f].plot(kind='box', vert=False)\n    plt.title(f + ' - outlier removed')\n    plt.grid()\n    plt.show()","59be3ff7":"# correlations\ncorr_pearson = df[features_num].corr(method='pearson')\ncorr_spearman = df[features_num].corr(method='spearman')\n\nfig = plt.figure(figsize = (10,8))\nsns.heatmap(corr_pearson, annot=True, cmap='RdYlGn', vmin=-1, vmax=+1)\nplt.title('Pearson Correlation')\nplt.show()\n\nfig = plt.figure(figsize = (10,8))\nsns.heatmap(corr_spearman, annot=True, cmap='RdYlGn', vmin=-1, vmax=+1)\nplt.title('Spearman Correlation')\nplt.show()","8b6cbc06":"fx = 'a (AU)'\nfy = 'Q (AU)'\nplt.scatter(df[fx], df[fy], alpha=0.5)\nplt.xlabel(fx)\nplt.ylabel(fy)\nplt.grid()\nplt.show()","1b30a1fa":"fx = 'Q (AU)'\nfy = 'P (yr)'\nplt.scatter(df[fx], df[fy], alpha=0.5)\nplt.xlabel(fx)\nplt.ylabel(fy)\nplt.grid()\nplt.show()","733ecb30":"fx = 'a (AU)'\nfy = 'P (yr)'\nplt.scatter(df[fx], df[fy], alpha=0.5)\nplt.xlabel(fx)\nplt.ylabel(fy)\nplt.grid()\nplt.show()","5716ac89":"df[fx].corr(df[fy], method='spearman')","86d9ae30":"for f in features_num:\n    plt.figure(figsize=(10,5))\n    sns.violinplot(x=f, y='class', data=df)\n    my_title = 'Distribution by class for ' + f\n    plt.title(my_title)\n    plt.grid()","51f68ad2":"# use PCA to reduce dimension of data\ndf4pca = df[features_num]\n# standardize first\ndf4pca_std = StandardScaler().fit_transform(df4pca)\n# define 3D PCA\npc_model = PCA(n_components=3)\n# apply PCA\npc = pc_model.fit_transform(df4pca_std)\n# add to original data frame\ndf['pc_1'] = pc[:,0]\ndf['pc_2'] = pc[:,1]\ndf['pc_3'] = pc[:,2]\n# show extended data frame\ndf.head()","c23f055f":"# interactive plot - click on legend to filter for individual classes\ndf['size'] = 1\nfig = px.scatter_3d(df, x='pc_1', y='pc_2', z='pc_3',\n                    color='class',\n                    size='size',\n                    size_max=10,\n                    opacity=0.5)\nfig.update_layout(title='PCA 3D')\nfig.show()","9a11c947":"# init H2O\nh2o.init(max_mem_size='12G', nthreads=4)","eb6e334d":"# upload data frame in H2O environment\nt1 = time.time()\ndf_hex = h2o.H2OFrame(df)\nt2 = time.time()\nprint('Elapsed time [s]: ', np.round(t2-t1,2))","4249d769":"# define target\ntarget = 'class'\n# select features\nfeatures = features_num\nfeatures.remove('P (yr)') # removed due to 100% (rank) correlation with other feature\n\n# explicitly convert target to categorical => classification problem\ndf_hex[target] = df_hex[target].asfactor()","f2dbe6e5":"# train \/ test split\ntrain_perc = 0.7\ntrain_hex, test_hex = df_hex.split_frame(ratios=[train_perc], seed=999)","62b43be2":"train_hex['class'].as_data_frame().value_counts()","201ac943":"test_hex['class'].as_data_frame().value_counts()","3a26a0ef":"# factors for class sampling => mitigate unbalanced target distribution\ncsf = [1.0,10.0,10.0,60.0,120.0,120.0]","e0f2c8d6":"# define (distributed) random forest model\nfit_DRF = H2ORandomForestEstimator(ntrees=100,\n                                   max_depth=20,\n                                   min_rows=5,\n                                   nfolds=5,\n                                   balance_classes=True,\n                                   class_sampling_factors=csf,\n                                   seed=999)\n\n# train model\nt1 = time.time()\nfit_DRF.train(x=features,\n              y=target,\n              training_frame=train_hex)\nt2 = time.time()\nprint('Elapsed time [s]: ', np.round(t2-t1,2))","695838a0":"# show training scoring history\nfit_DRF.plot()","f84f5cf7":"# variable importance\nfit_DRF.varimp_plot()","91f5cd9d":"# cross validation metrics\nfit_DRF.cross_validation_metrics_summary()","c8b198d4":"pred_train = fit_DRF.predict(train_hex)\n# add actual target\npred_train['target'] = train_hex[target]\npred_train = pred_train.as_data_frame()\npred_train.head()","727dfeba":"# confusion matrix; rows ~ actual observations, cols ~ predictions\nconf_train = pd.crosstab(pred_train['target'], pred_train['predict'])\n# visualize\nsns.heatmap(conf_train, cmap='Blues', annot=True, \n            cbar=False, fmt='d',\n            linecolor='black',\n            linewidths=0.1)\nplt.show()","81ed6020":"# predict\npred_test = fit_DRF.predict(test_hex)\n# add actual target\npred_test['target'] = test_hex[target]\npred_test = pred_test.as_data_frame()\npred_test.head()","b97bbb31":"# confusion matrix; rows ~ actual observations, cols ~ predictions\nconf_test = pd.crosstab(pred_test['target'], pred_test['predict'])\n# visualize\nsns.heatmap(conf_test, cmap='Blues', annot=True, \n            cbar=False, fmt='d',\n            linecolor='black',\n            linewidths=0.1)\nplt.show()","56faf07d":"<a id='2'><\/a>\n# Target vs Features","d17b195a":"<a id='1'><\/a>\n# Feature exploration","8e089e85":"# Table of contents\n* [Feature exploration](#1)\n* [Target vs Features](#2)\n* [PCA Visualization](#3)\n* [Fit Model](#4)","b86f3070":"### There are a few really strong correlations, let's have a closer look:","cc39ee4a":"#### Well, P (yr) is (almost) 100% correlated to a (AU). Therefore we will not use it as a feature later...","fd543a27":"### Check distribution of target in train \/ test","6465caa3":"<a id='3'><\/a>\n# PCA Visualization","581eed68":"<a id='4'><\/a>\n# Fit Model","d7d193bc":"### Performance on Training Data","4591a8b1":"### Performance on Test Set"}}