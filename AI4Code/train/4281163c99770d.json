{"cell_type":{"5e6e6680":"code","d4f95035":"code","1a240e93":"code","c8235ad2":"code","f3ff63bf":"code","449a411f":"code","b02f5fc4":"code","57ef1e56":"code","a01553dc":"code","5e138603":"code","e34a68c3":"code","7dce7de1":"code","361114ce":"code","38906e62":"code","41320c70":"code","4925fa2b":"code","718e9cdd":"code","334d042e":"code","08b3cdb4":"code","6e889513":"code","9823d157":"code","2a3b68f2":"code","cbbf20ea":"code","ad4d04a2":"code","4f1aadcf":"code","a0acf0b9":"code","ed3184f5":"code","f9d17354":"code","6ce2fd07":"code","8c4de7bf":"code","23cd2557":"markdown","4b5efc86":"markdown","b85db459":"markdown","a8ead232":"markdown","d5f4eb06":"markdown","c81d787e":"markdown","3e621c12":"markdown","282aed53":"markdown","a4717d24":"markdown","59ef85bc":"markdown","baa387f9":"markdown","89ba65d2":"markdown","b30c7f25":"markdown","0710d5a3":"markdown","007329be":"markdown","7e2ba883":"markdown","b3a1dd9b":"markdown","3d497f63":"markdown","8990f4c4":"markdown","3ed41397":"markdown","54e65e28":"markdown","9d99d82d":"markdown","eef8bba7":"markdown","fee16fa3":"markdown","cff2074e":"markdown","ceeb7764":"markdown","156f2ec4":"markdown","fdee8bae":"markdown","76c3483e":"markdown","4df3c0b5":"markdown","c6d59796":"markdown","aae4e29f":"markdown","4415db79":"markdown","0eee9dca":"markdown","794b927e":"markdown","adfb8838":"markdown","ae41a154":"markdown","d50cb5a7":"markdown","7160cdb8":"markdown","de852bbd":"markdown","80b98945":"markdown","f854c523":"markdown"},"source":{"5e6e6680":"#coding = utf-8\nimport numpy as np\nimport pandas as pd\nimport requests\nimport warnings; warnings.simplefilter('ignore') # to avoid warnings on slicing","d4f95035":"client_id = \"H0LRD2VTB1XWM5F3RKUTSLLC54FLOXC1TAIPNMMTS5B1ITFO\"\nclient_secret = \"XTRGSTITTQQUCXCUQVGSJ3QYV5GJ303EA5JWL2HBRA3S2DQ1\"","1a240e93":"# client_id = ....\n# client_secret = ...\nendpoint = \"https:\/\/api.foursquare.com\/v2\/venues\/search\"\nv = \"20200101\"\nhec_ll = \"45.50433081907987,-73.62086000795014\"         # HEC MONTREAL coordinates\nradius = str(4000)   # radius of search around central point, in meters\nlimit = str(100)     # max number of venues returned by the request\nquery = f'{endpoint}?client_id={client_id}&client_secret={client_secret}&v={v}&ll={hec_ll}&radius={radius}&limit={limit}&categoryId='","c8235ad2":"categories = {\n    'french': \"4bf58dd8d48988d10c941735\",\n    'italian':  \"4bf58dd8d48988d110941735\",\n    'pools':  \"4bf58dd8d48988d15e941735\",\n    'metros':  \"4bf58dd8d48988d1fd931735\",\n    'supermarkets':  \"52f2ab2ebcbc57f1066b8b46\"}\n\nlist_of_dicts = []\nfor cat_name, cat_id in categories.items():\n    query_for_category = query + cat_id\n    list_of_venues_for_category = requests.get(query_for_category).json()['response']['venues']\n    for venue in list_of_venues_for_category:\n        list_of_dicts.append({\n            'id': venue['id'],\n            'name': venue['name'],\n            'lat': venue['location']['lat'],\n            'lon': venue['location']['lng'],\n            'address': venue['location']['formattedAddress'][0],\n            'category': cat_name\n        })\nvenues = pd.DataFrame(list_of_dicts)","f3ff63bf":"venues","449a411f":"venues.groupby(\"category\").count()[['id']]","b02f5fc4":"list_of_dfs = []\ncolors = ['red', 'green', 'blue', 'black', 'orange']\nfor category, color in zip(categories.keys(), colors):\n    df_name = \"df_\" + category\n    globals()[df_name] = venues[venues['category']==category]\n    globals()[df_name].loc[:,'color'] = color\n    list_of_dfs.append(globals()[df_name])","57ef1e56":"df_french.head()","a01553dc":"import folium\nhec_lat_lon = [float(item) for item in hec_ll.split(',')]","5e138603":"class VenuesMap:\n    \n    def __init__(self):\n        self.venues_map = folium.Map(location = hec_lat_lon, zoom_start=13)\n        folium.Marker(hec_lat_lon, popup='<b>HEC Montreal<\/b>', tooltip = \"HEC Montreal\").add_to(self.venues_map)\n\n    def add_markers_for(self, dfs, cluster=False, opacity=1, edge_color='black'):\n        for df in dfs:\n            if cluster:\n                zipped_list = zip(df['lat'], df['lon'], df['cluster color'], df['name'], df['category'])\n                radius = 15\n            else:\n                zipped_list = zip(df['lat'], df['lon'], df['color'], df['name'], df['category'])\n                radius = 5\n            for lat, lon, color, name, category in zipped_list:\n                folium.CircleMarker(\n                    [lat, lon],\n                    radius=radius,\n                    weight=1,\n                    color=edge_color,\n                    popup=f'{name} ({category})',\n                    fill=True,\n                    fill_color=color,\n                    fill_opacity=opacity).add_to(self.venues_map)\n    \n    def show(self):\n        display(self.venues_map)\n        \n    reset = __init__\n\nvenues_map = VenuesMap()","e34a68c3":"venues_map.show()","7dce7de1":"venues_map.add_markers_for(list_of_dfs)\nvenues_map.show()","361114ce":"venues_map.reset()\nvenues_map.add_markers_for([df_french])\nvenues_map.show()","38906e62":"venues_map.reset()\nvenues_map.add_markers_for([df_italian])\nvenues_map.show()","41320c70":"from sklearn.cluster import DBSCAN\nfrom sklearn.preprocessing import StandardScaler","4925fa2b":"X_french = df_french[['lat', 'lon']].to_numpy()\nX_french = StandardScaler().fit_transform(X_french)\nclustering = DBSCAN().fit(X_french)\nprint('The list of labels is:')\nprint(clustering.labels_)\nprint(f'There are {len(set(clustering.labels_))} clustering labels:')\nprint(set(clustering.labels_))","718e9cdd":"cluster_color = [['red', 'pink'][color+1] for color in clustering.labels_]\ndf_french['cluster color'] = cluster_color\ndf_french.head()","334d042e":"venues_map.reset()\nvenues_map.add_markers_for([df_french], cluster=True)\nvenues_map.show()","08b3cdb4":"X_italian = df_italian[['lat', 'lon']].to_numpy()\nX_italian = StandardScaler().fit_transform(X_italian)\nclustering = DBSCAN().fit(X_italian)\nprint('The list of labels is:')\nprint(clustering.labels_)\nprint(f'There are {len(set(clustering.labels_))} clustering labels:')\nprint(set(clustering.labels_))","6e889513":"cluster_color = [['blue', 'green', 'lightblue', 'lightgreen'][color+1] for color in clustering.labels_]\ndf_italian['cluster color'] = cluster_color\ndf_italian.head()","9823d157":"venues_map.reset()\nvenues_map.add_markers_for([df_italian], cluster=True)\nvenues_map.show()","2a3b68f2":"venues_map.reset()\nvenues_map.add_markers_for([df_french, df_italian], cluster=True)\nvenues_map.show()","cbbf20ea":"df_french['cluster color'] = \"purple\"\ndf_italian['cluster color'] = \"purple\"\ndf_restaurants = pd.concat([df_french, df_italian])\n","ad4d04a2":"venues_map.reset()\nvenues_map.add_markers_for([df_restaurants], cluster=True, opacity=0.2, edge_color=None)\nvenues_map.add_markers_for([df_pools, df_metros, df_supermarkets])\nvenues_map.show()","4f1aadcf":"query_for_metros = query + categories['metros']\nmetros = requests.get(query_for_metros)\nmetros.json()['response']['venues'][0]","a0acf0b9":"wiki = pd.read_html('https:\/\/en.wikipedia.org\/wiki\/List_of_Montreal_Metro_stations')\nwiki[4]","ed3184f5":"blue_stations = wiki[4].iloc[3,1].split()\nblue_stations[6] = \"Parc de Castelnau\"\ncleaned = [item for item in blue_stations if item not in [\"Parc\",\"De\", \"Castelnau\"]]\nblue_stations = cleaned\nblue_stations","f9d17354":"is_blue = []\nfor station in df_metros['name']:\n    is_blue.append(any([blue_station in station for blue_station in blue_stations]))\ndf_metros['blue line'] = is_blue\ndf_metros.head()","6ce2fd07":"index_not_on_blue_line = df_metros[df_metros['blue line'] == False].index\ndf_metros.drop(index_not_on_blue_line, inplace=True)\ndf_metros","8c4de7bf":"df_metros['color'] = 'red'\nvenues_map.reset()\nvenues_map.add_markers_for([df_restaurants], cluster=True, opacity=0.2, edge_color=None)\nvenues_map.add_markers_for([df_pools, df_metros, df_supermarkets])\nvenues_map.show()","23cd2557":"Then let's visualize the map with clusters:","4b5efc86":"We see that 3 zones concentrate both french and italian restaurants:\n- the light blue and southern part of pink circles (close to Villemarie)\n- the light green, dark blue, and northern part of pink circles (close to Mont-Royal)\n- the grey blue and red circles (close to Villeray Saint Michel Parc Extension)","b85db459":"Here is our base dataframe:","a8ead232":"# 7. Conclusion\n\nThe analysis of Foursquare data in conjunction with map rendering allowed to answer the question \"What is the best place to settle to be close to french and italian restaurants, a pool, a park, a metro station linked to HEC Montr\u00e9al, and a supermarket?\". And the answer is likely to be **Villeray-Saint-Michel**. \n\nBut \"a map is not the territory it represents\" (Alfred Korybski) and many other parameters may invalidate this conclusion. So a battle-hardened data scientist may smile while reading this little report, but as a final exercice, I did enjoy building it and to be able to define my own problem and find my own solutions. \n\nThanks for your indulgence as this is my very first work!","d5f4eb06":"Now let's add markers for all venues we are interested in:\n- french restaurants in red\n- italian restaurants in green\n- pools in blue\n- metro in black\n- supermarket in orange","c81d787e":"It seems that they are distributed differently. So let's cluster them separately.","3e621c12":"Add color label according to clustering label, we chose red and pink since there are 2 labels:","282aed53":"## 3. First visualization and analysis","a4717d24":"Let's get and clean the data:","59ef85bc":"Let's find clusters for french restaurants:","baa387f9":"## 4. Clustering and refining data","89ba65d2":"Let's start by visualizing only french restaurants:","b30c7f25":"## Summary\n\n1. Introduction \/ Business problem  \n2. Getting and cleaning data  \n3. First visualization and analysis  \n4. Clustering and refining data  \n   1. DBSCAN clustering  \n   2. Getting complementary data  \n5. Results      \n6. Discussion  \n7. Conclusion  ","0710d5a3":"# 6. Discussion","007329be":"## 5. Results","7e2ba883":"## 2. Getting and cleaning data\n\nThe datasets will come from the following Foursquare categories as required for this work. The corresponding Foursquare category ids are between brackets:\n\n- French Restaurant  (4bf58dd8d48988d10c941735)\n- Italian Restaurant  (4bf58dd8d48988d110941735)\n- Pool  (4bf58dd8d48988d15e941735)\n- Metro Station  (4bf58dd8d48988d1fd931735)\n- Supermarket   (52f2ab2ebcbc57f1066b8b46\n\nThe area is centered on HEC Montreal coordinates, with a radius of 4 000 m. ","b3a1dd9b":"Now let's apply the same process to italian restaurants:","3d497f63":"# What is the best place to settle in as a HEC Montreal new student ?","8990f4c4":"Let's create a different dataframe for each category and add colors in view of future map creation. The dataframes will be named *df_french*, *df_italian*, etc.","3ed41397":"There is no Blue line station is on the Ville-Marie zone.  \nThe Outremont station is a little far from the restaurants of Le Plateau - Mont-Royal.   \nBut the North zone, ***Villeray-Saint-Michel-Parc-extension*** fulfills all required criteria:\n- french and italian restaurants\n- Blue line metro station\n- close to a park (parc Jarry, as can be seen on the map)\n- close to a supermarket (there is one just next the metro station)\n- close to a swimming pool (Piscine St Denis which is just next the metro station, or Piscine Jarry).\n\n","54e65e28":"# 8. References\n\n[Foursquare API](https:\/\/developer.foursquare.com\/)   \n[Foursquare list of venue categories](https:\/\/developer.foursquare.com\/docs\/build-with-foursquare\/categories\/)  \n[Wikipedia page \"List of Montreal Metro stations\"](https:\/\/en.wikipedia.org\/wiki\/List_of_Montreal_Metro_stations)","9d99d82d":"### A. DBSCAN clustering","eef8bba7":"The metro line color is not indicated, so we have to find the list of stations for the Blue line elsewhere. Let's try with Wikipedia:","fee16fa3":"A first conclusion is this map is not very clear. We would like to summarize data by clustering some categories in several clusters so the final map is easier to understand.  \n\nThis is especially important for venues such as restaurants : usually they tend to aggregate in certain places, so a clustering is likely to show the more animated neighborhoods of the city. While clustering pools, supermarkets or metro stations is not really relevant from that point of view : they are more utilitarian facilities that have to be equally spread on the territory.","cff2074e":"Are the italian restaurants grouped the same way ?","ceeb7764":"The clustering did not take in account parameters such as, for restaurants, the prices. This could have been an interesting approach too, but the aim was essentially to spot geographic clusters. This work is based on the assumption that what makes a neighborhood lively is the high number of leisure venues such as restaurants. \n\nBars and shops could also have been added, but for bars, my daughter will discover them soon enough by herself ;-), and for shops, they may not be that representative of lively places where students like to come together.  \n\nAnother important element that was not taken in account was rental prices, and we may discover that prices are very high (or suspiciously low) in the selected zone. This analysis may be carried out to continue the present one.","156f2ec4":"Check the number of each category (limited to 100 in the request)","fdee8bae":"We will use Folium librairy to create a map centered on HEC Montr\u00e9al.","76c3483e":"There are lots of metro station, but only those on the Blue line go to HEC Montreal. So we'd like to narrow the list of stations to these ones.\n\nIs color of line supplied by Foursquare ? Let's query again for metros and check the response part of json:","4df3c0b5":"Now we can visualize both kind of retaurants on the same map :","c6d59796":"The density criteria is respected : pink retaurants are in the most dense place, clumped together, while red ones are part of a sparser cluster.","aae4e29f":"And keep only them:","4415db79":"The last line is what we need, let's split it (and fix the splitting of \"Parc de Castelnau\")","0eee9dca":"### B. Getting complementary data","794b927e":"We could use k-means clustering which is very commonly used, and efficient. But there are outliers that may alter this k-means clustering, such as the restaurants located close to the Autoroute D\u00e9carie for instance, \n\nFurthermore, the notion of density is important : the more restaurants are in a given area, the more it can be considered as an lively and nice place. This is why DBSCAN, based on density analysis, may better fit our purpose.","adfb8838":"Let's unify their colors and make them translucent, then add metro stations (in black), pools (blue) and supermarkets (orange):","ae41a154":"First, let's have a look at the map without any venue, only HEC Montreal marker:","d50cb5a7":"Now let's find, in df_metros, which ones are on Blue line:","7160cdb8":"Again, DBSCAN shows its efficiency : green clusters are those of aggregated retaurants, while blue cluster is that of sparse ones.","de852bbd":"We define a class that will help us to display markers:","80b98945":"## 1. Introduction \/ Business problem\n\nThis notebook was created as a final assignement for my Data Science Certificate. It is also is a true-life problem I would like to solve. \n\nMy daughter started studying at HEC Montreal (Quebec, Canada) but due to the Covid-19 pandemic, she could not move there from France so far. She may be able to go there next summer and will then have to find a flat or room. She would like to find the best zone, close to her school, where she could find:\n\n- french and italian retaurants (she's French and loves italian food ;-) )\n- a park\n- a pool\n- a supermarket\n- a metro station\n\nThe aim is to show these places on a map, with different color for each category, and determine the zones that fulfill most criteria. \nSince parks are already displayed on the map, I chose not to search them in Foursquare.","f854c523":"Let's draw the final map with restaurants, pools, supermarkets, and only blue line metro stations. To improve visibility, the metro station markers are colored in red (logic would have it colored in blue but it is swimming pools markers color):"}}