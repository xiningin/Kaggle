{"cell_type":{"92be8153":"code","145f28a0":"code","a7c2bda6":"code","eeabadaa":"code","3d613c6f":"code","b3c98ae3":"code","790871cd":"code","566a7b77":"code","34cce626":"code","173a9113":"code","4de8fd76":"code","be48ac22":"code","7182bbe0":"code","f7f73bde":"code","b4f37a4c":"code","e054045c":"code","ce19f1bf":"code","f52334b0":"code","1239b328":"markdown","a0ca8b64":"markdown","7b990007":"markdown","0482b3c3":"markdown","86a3a44c":"markdown","d3fc3bdb":"markdown","ea6cfe23":"markdown"},"source":{"92be8153":"\nimport numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\n\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import SGDClassifier\n\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\n\n","145f28a0":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","a7c2bda6":"train_data.shape","eeabadaa":"train_data.head()","3d613c6f":"train_data.describe()","b3c98ae3":"train_data.info()","790871cd":"train_data.hist(bins=50, figsize=(15,10))\n","566a7b77":"# Fill empty values of age with mean age \nmean_age = int(train_data['Age'].mean())\ntrain_data['Age'].fillna(mean_age, inplace=True)\ntrain_data['Age'] = train_data['Age'].astype('int')","34cce626":"# Assign X and y values\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\", \"Age\"]\ny = train_data[\"Survived\"]\nX = pd.get_dummies(train_data[features])\n\n# split data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = .1, random_state=42, stratify=y)\n","173a9113":"# Training KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=15)\nknn.fit(X_train, y_train)\npredicted = knn.predict(X_test)\nprint(knn.score(X_test, y_test))","4de8fd76":"# Linear Regression \nreg = LinearRegression()\nreg.fit(X_train, y_train)\npredicted = reg.predict(X_test)\nprint(reg.score(X_test, y_test))\n","be48ac22":"# Decision Tree\nclf = DecisionTreeClassifier()\nclf.fit(X_train, y_train)\npredicted = clf.predict(X_test)\nprint(clf.score(X_test, y_test))","7182bbe0":"# SGDClassifier \nsgdc = SGDClassifier(max_iter=1000, tol=0.01)\nsgdc.fit(X_train, y_train)\npredicted = sgdc.predict(X_test)\nprint(sgdc.score(X_test, y_test))","f7f73bde":"# Scoring KNeighborsClassifier\nscores = cross_val_score(knn, X, y, cv=10)\nprint(np.mean(scores))","b4f37a4c":"# Scoring Linear Regression \nscores = cross_val_score(reg, X, y, cv=10)\nprint(np.mean(scores))","e054045c":"# Scoring Decision Tree\nscores = cross_val_score(clf, X, y, cv=10)\nprint(np.mean(scores))","ce19f1bf":"# Scoring SGD Classifier \nscores = cross_val_score(sgdc, X, y, cv=10)\nprint(np.mean(scores))","f52334b0":"# Fill any missing values in the test data with the mean age of the train data\ntest_data['Age'].fillna(mean_age, inplace=True)\n\n# Change the type of the Age column to int\ntest_data['Age'] = test_data['Age'].astype('int')\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\", \"Age\"]\nX_test = pd.get_dummies(test_data[features])\n\n# Generate predictions using best performing model\npredictions = clf.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","1239b328":"# Exploratory Data Analisys ","a0ca8b64":"# Scoring Models Using Cross-validation","7b990007":"# Pre-processing\n","0482b3c3":"# Imports:","86a3a44c":"# Training Models\n","d3fc3bdb":"# Loading the data","ea6cfe23":"# Generate Submission Data"}}