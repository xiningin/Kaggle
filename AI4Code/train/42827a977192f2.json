{"cell_type":{"0e00370e":"code","3a81c95c":"code","27f34245":"code","f5ece7c8":"code","acd2ba5e":"code","141d6318":"code","5437aeb2":"code","0edc2648":"code","0ea1f24d":"code","197b2873":"code","1a7acc4a":"code","77ccf479":"code","b749c014":"code","9af278b1":"code","5e02ed91":"code","91b35893":"code","3e4215b8":"code","8539f415":"code","10145e8a":"code","29a3d8da":"code","1548f4fa":"code","ee6441a5":"code","ac9507f9":"code","ec5befcf":"code","0911865a":"code","b8cea338":"code","399c1430":"code","a52addaa":"code","a56088c1":"markdown","5ec991a9":"markdown","9c1a62f0":"markdown","cd3c1d7c":"markdown"},"source":{"0e00370e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport pickle","3a81c95c":"# loading the dataset\ndf = pd.read_csv('..\/input\/pima-indians-diabetes-database\/diabetes.csv')","27f34245":"df.head()","f5ece7c8":"df.info()","acd2ba5e":"df[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']]=df[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']].replace(0,np.nan)","141d6318":"df.isna().sum()","5437aeb2":"from sklearn.impute import SimpleImputer\nimputer = SimpleImputer(missing_values =np.NaN,strategy='median')\nimputer.fit(df)\nx = imputer.transform(df)","0edc2648":"df_new = pd.DataFrame(x,columns=df.columns)","0ea1f24d":"df_new.head()","197b2873":"df_new.info()","1a7acc4a":"corr_matrix=df_new.corr()","77ccf479":"corr_matrix","b749c014":"corr_matrix['Outcome'].sort_values(ascending=False)","9af278b1":"sns.heatmap(corr_matrix,annot=True)","5e02ed91":"df_new.hist(bins=50,figsize=(20,15))","91b35893":"df_new.plot(kind='box',figsize=(20,15))","3e4215b8":"df_new.plot(kind='scatter',y='Pregnancies',x='Age',figsize=(20,15))","8539f415":"X = df_new.iloc[:,:-1].values\nY = df_new.iloc[:,-1].values","10145e8a":"from sklearn.model_selection import train_test_split\nX_train,X_test,Y_train,Y_test =train_test_split(X,Y,test_size=0.2,random_state=42)","29a3d8da":"# import all the algorithm we want to test\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier","1548f4fa":"models = []\nmodels.append(('LR', LogisticRegression()))\nmodels.append(('KNN', KNeighborsClassifier()))\nmodels.append(('NB', GaussianNB()))\nmodels.append(('SVC', SVC()))\nmodels.append(('RFC', RandomForestClassifier()))\nmodels.append(('DTR', DecisionTreeClassifier()))\nmodels.append(('XG',XGBClassifier()))\nmodels.append(('LGB',LGBMClassifier()))\nmodels.append(('CAT',CatBoostClassifier()))","ee6441a5":"from sklearn.model_selection import KFold,cross_val_score\nnames = []\nresults = []\n\nfor name,model in models:\n    kfold = KFold(n_splits=10,random_state=7)\n    cv_results = cross_val_score(model,X,Y,cv=kfold,scoring='accuracy')\n    results.append(cv_results)\n    names.append(name)\n    msg = \"%s: %f (%f)\" % (\n        name, cv_results.mean(), cv_results.std()\n    )\n    print(msg)","ac9507f9":"fig = plt.figure()\nfig.suptitle('Algorithm Comparison')\nax = fig.add_subplot(111)\nplt.boxplot(results)\nax.set_xticklabels(names)\nplt.show()","ec5befcf":"model = XGBClassifier(learning_rate =0.01,\n n_estimators=1000,\n max_depth=5,\n min_child_weight=1,\n gamma=0,\n subsample=0.8,\n colsample_bytree=0.8,\n objective= 'binary:logistic',\n nthread=4,\n scale_pos_weight=1,\n seed=27)\nmodel.fit(X_train,Y_train)","0911865a":"filename = 'model.pkl'\npickle.dump(model,open(filename, 'wb'))","b8cea338":"pred = model.predict(X_test)","399c1430":"from sklearn.metrics import confusion_matrix,accuracy_score\ncm = confusion_matrix(Y_test,pred)\nprint(cm)","a52addaa":"accuracy_score(Y_test,pred)","a56088c1":"### Handling Missing Values","5ec991a9":"### Splitting the Data","9c1a62f0":"### Visualization\n","cd3c1d7c":"### Looking for Correlations"}}