{"cell_type":{"090694db":"code","fe5f0397":"code","7b43dcaf":"code","9c5592d5":"code","16ed26eb":"code","c6b799f2":"code","16fe490b":"code","4275ea28":"code","5d92042b":"code","4e5bd956":"code","190a7363":"code","50d6694c":"code","55738af4":"code","a4880767":"markdown","a8a8cbc2":"markdown","71107f5d":"markdown","900ebe6b":"markdown","0a6c2f4a":"markdown","0322d4b5":"markdown","88e86b6f":"markdown","31e23ad5":"markdown","70495727":"markdown","3b751854":"markdown","1881c8f9":"markdown","2e1df003":"markdown","2d19816e":"markdown"},"source":{"090694db":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","fe5f0397":"from sklearn.model_selection import train_test_split\nfrom tensorflow.python import keras\nfrom tensorflow.python.keras.models import Sequential\nfrom tensorflow.python.keras.layers import Dense, Flatten, Conv2D, Dropout\n\nimg_rows, img_cols = 28, 28\nnum_classes = 10\n\ndef data_prep(raw):\n    out_y = keras.utils.to_categorical(raw.label, num_classes)\n\n    num_images = raw.shape[0]\n    x_as_array = raw.values[:,1:]\n    x_shaped_array = x_as_array.reshape(num_images, img_rows, img_cols, 1)\n\n    out_x = x_shaped_array \/ 255\n    return out_x, out_y\n\ntrain_file = \"..\/input\/train.csv\"\nraw_data = pd.read_csv(train_file)\n\nx, y = data_prep(raw_data)\n\n","7b43dcaf":"from PIL import Image\nfrom matplotlib.pyplot import imshow\n\ndef generate_image(raw):\n    showing = np.zeros((img_rows, img_cols))\n    for r in range(0, len(raw)):\n        for c in range(0, len(raw[r])):\n            showing[r][c] = raw[r][c][0]\n    return Image.fromarray(showing)\n\nimg = generate_image(x[0])\nimshow(img)\n","9c5592d5":"digit_model = Sequential([\n    Conv2D(filters=32, kernel_size=(5,5), activation=\"relu\", input_shape=(img_rows, img_rows, 1)),\n    Conv2D(filters=32, kernel_size=(5,5), activation=\"relu\"),\n    Conv2D(filters=32, kernel_size=(5,5), activation=\"relu\", strides=2),\n    Dropout(0.25),\n    Conv2D(filters=64, kernel_size=(3,3), activation=\"relu\"),\n    Conv2D(filters=64, kernel_size=(3,3), activation=\"relu\"),\n    Conv2D(filters=64, kernel_size=(3,3), activation=\"relu\", strides=2),\n    Dropout(0.25),\n    Flatten(),\n    Dense(256, activation=\"relu\"),\n    Dropout(0.5),\n    Dense(num_classes, activation=\"softmax\")\n])","16ed26eb":"digit_model.compile(loss=keras.losses.categorical_crossentropy,\n              optimizer='adam',\n              metrics=['accuracy'])","c6b799f2":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.model_selection import train_test_split\n\nvalidation_split = 0.1\nepochs = 50\nbatch_size = 512\n\n#Prepare for some basic data augmentation\ntrain_x, val_x, train_y, val_y = train_test_split(x, y, test_size=validation_split, stratify=y)\n\ndata_generator_with_aug = ImageDataGenerator(width_shift_range=0.1,\n                                             height_shift_range=0.1,\n                                             zoom_range = 0.1,\n                                             rotation_range=10,\n                                             validation_split=validation_split)\n\ndata_generator_no_aug = ImageDataGenerator(validation_split=validation_split)\n\ntrain_generator = data_generator_with_aug.flow(\n    train_x, train_y,\n    batch_size=batch_size,\n    subset='training')\n\nvalidation_generator = data_generator_no_aug.flow(\n    val_x, val_y,\n    subset='validation') \n\ntraining_history = digit_model.fit_generator(train_generator,\n                                             steps_per_epoch=len(train_x) \/ batch_size,\n                                             validation_data=validation_generator,\n                                             epochs=epochs)\n\n# No Augmentation \n# training_history = digit_model.fit(x, y,\n#           batch_size=batch_size,\n#           epochs=epochs,\n#           validation_split = validation_split)","16fe490b":"import matplotlib.pyplot as plt\n\n# summarize history for accuracy\nplt.plot(training_history.history['acc'])\nplt.plot(training_history.history['val_acc'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()\n# summarize history for loss\nplt.plot(training_history.history['loss'])\nplt.plot(training_history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","4275ea28":"def data_prep_test(raw):\n    num_images = raw.shape[0]\n    x_shaped_array = raw.values.reshape(num_images, img_rows, img_cols, 1)\n    out_x = x_shaped_array \/ 255\n    return out_x\n\nraw_data_test = pd.read_csv(\"..\/input\/test.csv\")\n\nx_test = data_prep_test(raw_data_test)","5d92042b":"showing_test = np.zeros((img_rows, img_cols))\n\nimg_test = generate_image(x_test[0])\nimshow(img_test)","4e5bd956":"result = digit_model.predict(x_test)","190a7363":"np.argmax(result[0])","50d6694c":"collapsed_results = np.transpose(np.asmatrix(list(map(lambda x: np.argmax(x), result))))\n    \n# add indicies\nindicies = np.transpose(np.asmatrix(range(1,collapsed_results.shape[0]+1)))\n\n# print(collapsed_results.shape)\n# print(indicies.shape)\n\noutput = np.append(np.asmatrix([\"ImageId\", \"Label\"]), np.append(indicies, collapsed_results, axis=1), axis=0)","55738af4":"pd.DataFrame(output).to_csv(\"out.csv\",index=False,header=False)","a4880767":"Let make predictions! I will now create a new method for test.csv import...","a8a8cbc2":"Let's borrow some code from Kaggle Learn to prepare the data","71107f5d":"This is my first competetion. I want to make my model simple.","900ebe6b":"> Look at the first (or other) image","0a6c2f4a":"Looks good. Let's create a CNN model.","0322d4b5":"Predictions!","88e86b6f":"Let see how it does with graphs.","31e23ad5":"Let's fit!","70495727":"Plot again...","3b751854":"Let's see the first prediction.","1881c8f9":"Compile it!","2e1df003":"And we are done!","2d19816e":"Now generate output file."}}