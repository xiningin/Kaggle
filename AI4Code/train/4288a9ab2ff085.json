{"cell_type":{"a86dd4d8":"code","a7562cc7":"code","a8c606d3":"code","9904268c":"code","8bb80e9b":"code","053afc96":"code","d3ad48eb":"code","68fb63a7":"code","2c1ae078":"code","fa5f2b80":"code","0311fbad":"code","ceb15e76":"code","64c41ceb":"code","82309b56":"code","937e3b2c":"code","3f6c2554":"code","cfbb0ccc":"code","eba6986f":"code","ec6f5160":"code","26c7f32e":"code","3d321b53":"code","8972a392":"code","2b8dc41b":"code","80b38728":"code","e3e6eb6f":"code","4134a8a7":"code","0e79ea59":"code","1f3abe1d":"markdown","ab826875":"markdown","cd795e77":"markdown","2cc30873":"markdown","62a2c032":"markdown","709170bf":"markdown","9f53e1f5":"markdown","ac37583f":"markdown","a5c3d2e0":"markdown","69201ca7":"markdown","90a42be0":"markdown"},"source":{"a86dd4d8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","a7562cc7":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","a8c606d3":"housing = pd.read_csv('..\/input\/USA_Housing.csv')","9904268c":"housing.head()","8bb80e9b":"housing.info()","053afc96":"housing.describe()","d3ad48eb":"housing.rename(columns = {'Avg. Area Income':'income','Avg. Area House Age':'age','Avg. Area Number of Rooms':'room','Avg. Area Number of Bedrooms':'bedroom','Area Population':'population','Price':'price','Address':'address'},inplace=True)","68fb63a7":"housing.columns","2c1ae078":"housing.describe(include = ['O'])","fa5f2b80":"x = housing.iloc[:,1:6]\ny = housing.iloc[:,0:1]","0311fbad":"def normalise(x):\n    for i in x.columns:\n        x[i] = (x[i]-np.min(x[i]))\/(np.max(x[i])-np.min(x[i]))\nnormalise(x)\nnormalise(y)","ceb15e76":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size =0.3,random_state=0)","64c41ceb":"from sklearn.linear_model import LinearRegression\nlr = LinearRegression()\nlr.fit(x_train,y_train)","82309b56":"y_pred_lr = lr.predict(x_test)\nc = [i for i in range(1500)]\nplt.figure(figsize=(16,7))\nplt.plot(c,y_test - y_pred_lr,'-')\nplt.show()","937e3b2c":"import statsmodels.api as sm\nx_train_sm = sm.add_constant(x_train)\nx_test_sm = sm.add_constant(x_test)\nlr_ols_1 = sm.OLS(y_train,x_train_sm).fit()","3f6c2554":"print(lr_ols_1.summary())","cfbb0ccc":"x_train_sm.drop('bedroom',inplace=True,axis=1)\nimport statsmodels.api as sm\nlr_ols_1 = sm.OLS(y_train,x_train_sm).fit()\nprint(lr_ols_1.summary())","eba6986f":"from sklearn.preprocessing import PolynomialFeatures\nlr1 = PolynomialFeatures(degree=3)\nx_train_pf = lr1.fit_transform(x_train)\nx_test_pf = lr1.fit_transform(x_test)\nlr_pf = LinearRegression()\nlr_pf.fit(x_train_pf,y_train)","ec6f5160":"y_pred_pf = lr_pf.predict(x_test_pf)","26c7f32e":"plt.figure(figsize=(10,7))\nplt.plot(c, y_test - y_pred_pf,'-')","3d321b53":"from sklearn.metrics import mean_squared_error, r2_score\nmse = mean_squared_error(y_test,y_pred_pf)\nr2 = r2_score(y_test,y_pred_pf)\nprint(mse)\nprint(r2)","8972a392":"from sklearn.svm import SVR\nlr_svr = SVR()\nlr_svr.fit(x_train,y_train)\ny_pred_svr = lr_svr.predict(x_test)","2b8dc41b":"from sklearn.metrics import mean_squared_error, r2_score\nmse = mean_squared_error(y_test,y_pred_svr)\nr2 = r2_score(y_test,y_pred_svr)\nprint(mse)\nprint(r2)","80b38728":"from sklearn.tree import DecisionTreeRegressor\nlr_dtr = DecisionTreeRegressor()\nlr_dtr.fit(x_train,y_train)\ny_pred_dtr = lr_dtr.predict(x_test)","e3e6eb6f":"from sklearn.metrics import mean_squared_error, r2_score\nmse = mean_squared_error(y_test,y_pred_dtr)\nr2 = r2_score(y_test,y_pred_dtr)\nprint(mse)\nprint(r2)","4134a8a7":"from sklearn.ensemble import RandomForestRegressor\nlr_rfr = RandomForestRegressor(n_estimators = 100)\nlr_rfr.fit(x_train,y_train)\ny_pred_rfr = lr_rfr.predict(x_test)","0e79ea59":"from sklearn.metrics import mean_squared_error, r2_score\nmse = mean_squared_error(y_test,y_pred_rfr)\nr2 = r2_score(y_test,y_pred_rfr)\nprint(mse)\nprint(r2)","1f3abe1d":"Linear Regression","ab826875":"**Looking in the dataset**","cd795e77":"**Normalise\/Standardise the data**","2cc30873":"Random Forest Regression","62a2c032":"**Creating training and testing data**","709170bf":"Support Vector Regression  ","9f53e1f5":"**Importing Libraries**","ac37583f":"Polynomial Regression","a5c3d2e0":"Decision Tree Regression","69201ca7":"84% accuracy","90a42be0":"**Importing dataset(s)**"}}