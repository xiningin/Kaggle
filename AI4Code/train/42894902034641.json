{"cell_type":{"c5ab20af":"code","58cdca67":"code","4b907582":"code","e7e2375a":"code","d3b43980":"code","7ae7a829":"code","b51b6da3":"code","584906ba":"code","c43524ef":"code","7477e0cb":"code","25fed2cf":"code","9ac2f0f7":"code","6a58b32c":"code","6eef8266":"code","d66cb54b":"code","f6451bbb":"code","14ec2490":"code","7517e3a6":"code","39816246":"code","0b562ca4":"code","29b1371c":"code","884ddf9d":"code","a796d213":"markdown","168d0bd0":"markdown","b0f7d6df":"markdown","c69adc1d":"markdown","d5518114":"markdown","ab86b2b8":"markdown","28bbf692":"markdown","daea3780":"markdown","6dc0a850":"markdown","e9b8c988":"markdown","d2f05d83":"markdown","60575d58":"markdown","f60b70b1":"markdown","d3304e18":"markdown","4c36e0ac":"markdown","91d6f2fc":"markdown","db09a160":"markdown","201ae972":"markdown","5018ddb2":"markdown","20ef30bd":"markdown"},"source":{"c5ab20af":"# Relevant library import\n\nimport pandas as pd\nimport numpy as np\nfrom datetime import datetime\n\nfrom plotly import tools\nimport plotly.express as px\nimport plotly.offline as py\nimport plotly.graph_objs as go\n\npy.init_notebook_mode(connected=True)\n\npd.options.display.max_columns = 999\npd.options.display.float_format = '{:,.2f}'.format","58cdca67":"# Data import\ndf = pd.read_csv('..\/input\/shot_logs.csv')","4b907582":"# Examination of how the data looks\ndf.head()","e7e2375a":"# High-level overview of the DataFram structure\ndf.info()","d3b43980":"# Examination of numeric fields in more detail\ndf.describe()","7ae7a829":"df[(df['GAME_ID']==21400899) & (df['SHOT_NUMBER']==1)][:5]","b51b6da3":"df['GAME_ID'].nunique()","584906ba":"# Convert all column names to lowercase for ease of typing\ndf.columns = df.columns.str.lower()","c43524ef":"df['home_game'] = np.where(df['location'] == 'H', 1, 0)\n\ndf['game_won'] = np.where(df['w'] == 'W', 1, 0)","7477e0cb":"# Fill the shot_clock NaN values with game_clock values \ndf['shot_clock'] = df['shot_clock'].fillna(df['game_clock'])","25fed2cf":"# Drop unneeded columns\ndf = df.drop(['shot_result', 'location', 'w'], axis=1)","9ac2f0f7":"# Extract game date and convert to datetime object\ndf['date'] = df['matchup'].str[:12]\ndf['date'] = pd.to_datetime(df['date'], format='%b %d, %Y')","6a58b32c":"# Extract home and away team names\ndf['away_team'] = df['matchup'].str[15:18]\ndf['home_team'] = df['matchup'].str[-3:]\n\n# Drop the now redundant column\ndf = df.drop(['matchup'], axis=1)","6eef8266":"# Split the DataFrame by 2\/3 point field goals\ntwo_point_shots = df['pts_type'] == 2\nthree_point_shots = df['pts_type'] == 3\n\n# Split the DataFrame by missed\/made field goals\nmissed = df['fgm'] == 0\nmade = df['fgm'] == 1\n\n# Create views\nmissed_twos = df[two_point_shots & missed]\nmade_twos = df[two_point_shots & made]\n\nmissed_threes = df[three_point_shots & missed]\nmade_threes = df[three_point_shots & made]","d66cb54b":"trace1 = go.Bar(\n    x=df[two_point_shots]['fgm'].value_counts().index.values,\n    y=df[two_point_shots]['fgm'].value_counts(),\n    name='2-Point Field Goals'\n)\ntrace2 = go.Bar(\n    x=df[three_point_shots]['fgm'].value_counts().index.values,\n    y=df[three_point_shots]['fgm'].value_counts(),\n    name='3-Point Field Goals'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    barmode='stack',\n    title='Count of Made and Missed Field Goals',\n    xaxis = dict(\n        tickmode = 'array',\n        tickvals = [0, 1],\n        ticktext = ['Missed', 'Made']\n    ),\n    yaxis=dict(\n        title='Number of Shots'\n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","f6451bbb":"print('Average 2-point conversion rate ' + str(round(len(made_twos) \/ len(df[two_point_shots]), 2)) +'%')\nprint('Average 3-point conversion rate ' + str(round(len(made_threes) \/ len(df[three_point_shots]), 2)) +'%')","14ec2490":"print('First day of the regular season ' + str(df['date'].min()))\nprint('Last day in the dataset ' + str(df['date'].max()))","7517e3a6":"shots_by_day = df.groupby(['date'])['fgm'].agg(['sum','count'])\nshots_by_day['percentage'] = round((shots_by_day['sum'] \/ shots_by_day['count']), 2)\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(\n        x=shots_by_day.index,\n        y=shots_by_day['percentage'].values)\n             )\n\nfig.update_layout(\n    shapes=[\n        go.layout.Shape(\n            type=\"line\",\n            x0=shots_by_day.index.min(),\n            x1=shots_by_day.index.max(),\n            y0=round(df['fgm'].sum()\/df['fgm'].count(),2),\n            y1=round(df['fgm'].sum()\/df['fgm'].count(),2),\n            line=dict(\n                color=\"LightSeaGreen\",\n                dash=\"dashdot\"\n            )\n        )\n    ]\n)\n\nfig.show()","39816246":"shots_by_period = df.groupby(['period','pts_type'])['fgm'].agg(['sum','count'])\nshots_by_period['percentage'] = round((shots_by_period['sum'] \/ shots_by_period['count']), 2)\n\ntwo_point_shots_by_period = shots_by_period.xs(2, level=1)\nthree_point_shots_by_period = shots_by_period.xs(3, level=1)","0b562ca4":"trace1 = go.Scatter(\n    x=two_point_shots_by_period.index,\n    y=two_point_shots_by_period['percentage'].values,\n    name='2-Point Field Goal'\n)\ntrace2 = go.Scatter(\n    x=three_point_shots_by_period.index,\n    y=three_point_shots_by_period['percentage'].values,\n    name='3-Point Field Goal'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    barmode='group',\n    title='Field Goal Percentage by Quarter',\n    xaxis = dict(\n        tickmode = 'array',\n        tickvals = [1, 2, 3, 4, 5, 6, 7],\n        ticktext = ['Q1', 'Q2', 'Q3', 'Q4', 'OT1', 'OT2', 'OT3']\n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","29b1371c":"\"\"\"\nimport plotly.figure_factory as ff\nimport numpy as np\n\ndf['shot_clock'] = df['shot_clock'].dropna().astype(int)\n\nx1 = df['shot_clock']\n\nhist_data = [[x1]]\n\ngroup_labels = ['Group 1']\n\n# Create distplot with curve_type set to 'normal'\nfig = ff.create_distplot(hist_data, group_labels, show_hist=False)\n\n# Add title\nfig.update_layout(title_text='Curve and Rug Plot')\nfig.show()\n\"\"\"","884ddf9d":"trace1 = go.Scattergl(\n    x=df['shot_dist'],\n    y=df['close_def_dist'],\n    mode='markers',\n    marker=dict(\n        opacity=0.5\n    )\n)\n\ndata=[trace1]\n\nfigure = go.Figure(data=data)\n\npy.iplot(figure)","a796d213":"**2.3 Second of the Possession**","168d0bd0":"# Summary","b0f7d6df":"# 5. In Depth Data Exploration","c69adc1d":"Shot number does not seems to only reflect individual palyers","d5518114":"The purpose of this section is to examine the dataset from a high-level perspective and to build some initial intuitions that will be tested later on. This exploration will also serve as a basis for DataFrame changes in the preprocessing and feature engineering sections. ","ab86b2b8":"# 3. Data Preprocessing","28bbf692":"___","daea3780":"There are 30 teams in the NBA and each plays 82 games in the regular season, so it should be expected to see 30 * 82 \/ 2 = 1,230 individual game records. This leads me to believe that the dataset does not contain the entire season or there are data quality issues.","6dc0a850":"## 5.2 Shot Accuracy Over Different Time Periods","e9b8c988":"### 5.2.1 Days of the Season","d2f05d83":"*Draft Version*\n\nThe intended purpose of this kernel is twofold:\n1. Explore the shots taken by NBA players in the 2014-2015 season\n2. Experiment with the Plotly data visualization library\n\nTo illustrate the findings I will be using the Plotly visualization library. The immediate appeal of Plotly is highly interactive charts.","60575d58":"**3. Shot Accuracy Based on Player's **","f60b70b1":"**2.2 Quarter of the Game**","d3304e18":"Initial observations:\n1. *TOUCH_TIME* minimum value is -163.60 and that does not seem logical\n2. The maximum value for *SHOT_NUMBER* seems to be rather small ","4c36e0ac":"## 5.1 Target Variable","91d6f2fc":"Initial observations and actions:\n1. Labels that will have to be encoded: *LOCATION*, *W*, *SHOT_RESULT* (complete)\n2. *SHOT_RESULT* and *FGM* fields seem to be identical\n2. Additional data will need to be extracted from the *MATCHUP* field\n2. Change the records in the *CLOSEST_DEFENDER* column to corespond with *player_name*\n4. Not sure what is the distance unit used in fields like *SHOT_DIST* and *CLOSE_DEF_DIST*","db09a160":"# 4. Feature Engineering","201ae972":"# 1. Introduction","5018ddb2":"\n# 2. Initial Data Exploration\n","20ef30bd":"Initial observations:\n1. *SHOT_CLOCK* variable is missing some data\n2. Need to convert *GAME_CLOCK* into a time series object"}}