{"cell_type":{"9ad584b2":"code","3396caec":"code","999b8a1c":"code","75de54a5":"code","fa70ab96":"code","254eda55":"code","804fe9f8":"code","e7d4446f":"code","ab790f3c":"code","28509d1c":"code","37915ce9":"code","948918f4":"code","ef868a5e":"code","4c04dee1":"code","2a38132c":"code","87e0b910":"code","dc2b484f":"code","9bd12ba4":"code","cf98e145":"code","c5639c43":"code","0ec2f7ae":"code","b9f9dd94":"code","52644178":"code","b251934d":"code","14bc5812":"code","b4f77f84":"code","a150e5e8":"markdown","510b4ad6":"markdown","6376d813":"markdown","94b61eb6":"markdown","96a1035c":"markdown","016e4884":"markdown","9f223f64":"markdown"},"source":{"9ad584b2":"import keras\nimport os\nimport shutil\nimport numpy as np\nimport math\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\nfrom platform import python_version\n\nprint('Python version:', python_version())\nprint('Numpy version:', np.__version__)\nprint('Seaborn version:', sns.__version__)\nfrom distutils.dir_util import copy_tree\nimport tensorflow as tf\nprint('tensorflow version: ',tf.__version__)\nprint('keras version:', keras.__version__)","3396caec":"from keras.layers import Convolution2D\nfrom keras.layers import MaxPooling2D\nfrom keras.layers import Flatten\nfrom keras.layers import Dense\nfrom keras.models import Sequential\nfrom keras.layers import Dropout\nfrom keras_preprocessing.image import ImageDataGenerator","999b8a1c":"#created data set using console\nsource='..\/input\/african-wildlife\/'\ntarget='.\/train_data\/'\nshutil.copytree(source, target)\nos.mkdir('test_data')","75de54a5":"# remove unwanted data and create same classed for test_data\n\npath=\".\/train_data\/\"\nfor file in os.listdir(path):\n    for image in os.listdir(path+file+'\/'):\n        if '.jpg' not in image:\n            os.remove(path+file+'\/'+image)\n    os.mkdir('.\/test_data\/'+file)\n","fa70ab96":"# create test_data by taking 25% images from data\n\ntotal_train_images,total_test_images,total_train_classes,total_test_classes=0,0,0,0\npath=\".\/train_data\/\"\nfor file in os.listdir(path):\n    total_train_classes+=1\n    total_images=len(os.listdir(path+file+\"\/\"))\n    test_image_count=(25\/100)*total_images #25% for test and 75% for train\n    for i in range(math.ceil(test_image_count)):\n        img=random.choice(os.listdir(path+file+'\/'))\n        shutil.move(path+file+'\/'+img,'.\/test_data\/'+file+'\/')\n        #print(img)\n    print(file,total_images,math.ceil(test_image_count))\n    total_train_images+=(total_images-math.ceil(test_image_count))\n    #print(file,math.ceil(test_image_count))\nprint(\"total train images are : \",total_train_images,\" and total train classes are : \",total_train_classes)","254eda55":"model = Sequential()","804fe9f8":"#inputlayer : apply filters\nmodel.add(Convolution2D(filters=32, \n                        kernel_size=(3,3),\n                        strides=(1,1),\n                        padding='same',\n                        activation='relu',\n                   input_shape=(32, 32, 1)))","e7d4446f":"# pooling layer where we are doing maxpooling\nmodel.add(MaxPooling2D(pool_size=(2, 2)))","ab790f3c":"#adding one more convolution layer for better model\nmodel.add(Convolution2D(filters=32, \n                        kernel_size=(3,3),\n                        strides=(1,1),\n                        padding='same', \n                        activation='relu'\n                      ))","28509d1c":"#adding one more Pooling layer for better model\nmodel.add(MaxPooling2D(pool_size=(2, 2)))","37915ce9":"#dropout regularlization\nmodel.add(Dropout(0.5))","948918f4":"#layer in which we are converting 2d\/3d image to 1d image i.e flattening\nmodel.add(Flatten())","ef868a5e":"# layer: appling relu to give positive output from here our hidden layerrs starts\nmodel.add(Dense(units=20, activation='relu'))","4c04dee1":"#dropout regularlization\nmodel.add(Dropout(0.5))","2a38132c":"# output layer : Since we have to do multi-class classification so we'll apply softmax activation function \n# we have 4 classes of animals so output layer would have that many neurons.\nmodel.add(Dense(units=4, activation='softmax'))","87e0b910":"model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","dc2b484f":"model.summary()","9bd12ba4":"#url : https:\/\/keras.io\/api\/preprocessing\/image\/ \ntrain_datagen = ImageDataGenerator(\n        rescale=1.\/255,\n        shear_range=0.2,\n        zoom_range=0.2,\n        horizontal_flip=True)\ntest_datagen = ImageDataGenerator(rescale=1.\/255)\ntraining_set = train_datagen.flow_from_directory(\n        '.\/train_data\/',\n        target_size=(32,32),\n        color_mode=\"grayscale\",\n        batch_size=64,\n        class_mode='categorical')\ntest_set = test_datagen.flow_from_directory(\n        '.\/test_data\/',\n        target_size=(32,32),\n        color_mode=\"grayscale\",\n        batch_size=64,\n        class_mode='categorical')","cf98e145":"training_set.class_indices # to see classes of our dataset","c5639c43":"history = model.fit(\n        training_set,\n        steps_per_epoch=(1125\/64),\n        epochs=100,\n        validation_data=test_set,\n        validation_steps=(376\/64))","0ec2f7ae":"#Graphing our training and validation\naccuracy = history.history['accuracy']\nval_accuracy = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(len(accuracy))\nplt.plot(epochs, accuracy, 'r', label='Training acc')\nplt.plot(epochs, val_accuracy, 'b', label='Validation acc')\nplt.title('Training and validation accuracy')\nplt.ylabel('accuracy') \nplt.xlabel('epoch')\nplt.legend()\nplt.figure()\nplt.plot(epochs, loss, 'r', label='Training loss')\nplt.plot(epochs, val_loss, 'b', label='Validation loss')\nplt.title('Training and validation loss')\nplt.ylabel('loss') \nplt.xlabel('epoch')\nplt.legend()\nplt.show()","b9f9dd94":"#model.save(\"simple_animal_classification_model.h5\")#save model","52644178":"#from keras.models import load_model\n#model=load_model(\"simple_animal_classification_model.h5\") ","b251934d":"from keras.preprocessing import image\ntest_image = image.load_img(\"..\/input\/african-wildlife\/zebra\/001.jpg\",target_size=(32,32),color_mode='grayscale')\ntest_image \n","14bc5812":"test_image = image.img_to_array(test_image)\ntest_image = np.expand_dims(test_image,axis=0)","b4f77f84":"result = model.predict(test_image)\n\nmy_dict=training_set.class_indices\ndef get_key(val): \n    for key, value in my_dict.items(): \n         if val == value: \n             return key \n  \n    return \"key doesn't exist\"\n\npred=list(result[0])\nfor i in range(len(pred)):\n    if pred[i]!=0:\n        print(get_key(i))","a150e5e8":"## Task 5: Model Training","510b4ad6":"## Task 3: Model Creation","6376d813":"## Task 2: Dataset Creation","94b61eb6":"## Task 6: Accuracy","96a1035c":"## Task 7: Testing","016e4884":"## Task 1: Importing Libraries","9f223f64":"## Task 4: Image Augmentation"}}