{"cell_type":{"b59bca3c":"code","b6b6782d":"code","90c65a99":"code","8105ea84":"code","5b9e966f":"code","4de09773":"code","1276c27e":"code","1c977c80":"code","c1be422a":"code","ed1f9c4e":"code","8c8e10cb":"code","76a5dbc9":"code","aa82092e":"code","4e9bc9d3":"code","a54725e3":"code","c718352d":"code","0cab62df":"code","d19c52c7":"code","579b2591":"code","c576fa4b":"code","d986715f":"code","4d186bd7":"code","d1e6855c":"code","04978297":"code","e5f068a3":"code","c882dea3":"code","0ea4b9c2":"code","15255110":"code","f7e324c1":"code","b30149bc":"code","2e6fdf9f":"code","aa9a8e18":"code","51207cdf":"code","8f8cb4ab":"code","32151ef6":"code","df0e3db0":"code","816cc438":"code","a7311080":"code","fb2ccef2":"code","82838fbb":"code","1d65a0ee":"code","9cca3b36":"code","2e22ce02":"code","66bdc01e":"code","e1579dd2":"code","d1a53849":"code","51802aae":"code","ca01ad70":"code","6a978669":"markdown","96b9b03a":"markdown"},"source":{"b59bca3c":"##List of Libraries which we will be using in this exercise\n\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nimport xgboost as xgb\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b6b6782d":"df = pd.read_csv(\"\/kaggle\/input\/bike-sharing-demand\/train.csv\",parse_dates=['datetime'],index_col=0)\ndf_test = pd.read_csv('\/kaggle\/input\/bike-sharing-demand\/test.csv',parse_dates=['datetime'],index_col=0)","90c65a99":"df.head()","8105ea84":"df.describe().T","5b9e966f":"def add_features(df):\n    df['year'] = df.index.year\n    df['month'] = df.index.month\n    df['day'] = df.index.day\n    df['dayofweek'] = df.index.dayofweek\n    df['hour'] = df.index.hour","4de09773":"add_features(df)\nadd_features(df_test)\ndf.head()","1276c27e":"plt.figure(figsize=(16,5))\ndf['count'].plot()\nplt.show()","1c977c80":"plt.figure(figsize=(16,5))\nplt.title('Rental Count - Gaps')\ndf['2012-02':'2012-04']['count'].plot()\nplt.show()","c1be422a":"plt.figure(figsize=(16,5))\nplt.title('Rental Count - Hourly Trend')\ndf['2011-01-01']['count'].plot()\nplt.show()","ed1f9c4e":"plt.figure(figsize=(16,5))\nplt.title('Jan 2011 Rentals (1 month)')\ndf['2011-01']['count'].plot()\nplt.show()","8c8e10cb":"plt.figure(figsize=(16,5))\nplt.plot(df['2011']['count'],label='2011')\nplt.plot(df['2012']['count'],label='2012')\nplt.title('2011 and 2012 Rentals (Year to Year)')\nplt.xlabel('Date')\nplt.ylabel('Rental Count')\nplt.legend()\nplt.show()","76a5dbc9":"plt.scatter(x=df.temp,y=df[\"count\"])\nplt.grid(True)\nplt.xlabel('Temperature')\nplt.ylabel('Count')\nplt.title('Temperature vs Count')\nplt.show()","aa82092e":"    plt.figure(figsize=(16,5))\n    df.corr()['count'].plot(kind='bar')\n    plt.show()","4e9bc9d3":"# Training = 70% of the data\n# Validation = 30% of the data\n# Randomize the datset\nnp.random.seed(5)\nl = list(df.index)\nnp.random.shuffle(l)\ndf = df.loc[l]","a54725e3":"rows = df.shape[0]\ntrain = int(.7 * rows)\ntest = rows-train\nrows, train, test","c718352d":"columns = ['count', 'season', 'holiday', 'workingday', 'weather', 'temp',\n       'atemp', 'humidity', 'windspeed', 'year', 'month', 'day', 'dayofweek','hour']","0cab62df":"# Prepare Training Set & Validation\ndf_train=df.iloc[:train].reset_index()\ndf_validation=df.iloc[train:].reset_index()\n","d19c52c7":"X_train = df_train[['season', 'holiday', 'workingday', 'weather', 'temp',\n       'atemp', 'humidity', 'windspeed', 'year', 'month', 'day', 'dayofweek','hour']]\ny_train= df_train[['count']]\nX_validation = df_validation[['season', 'holiday', 'workingday', 'weather', 'temp',\n       'atemp', 'humidity', 'windspeed', 'year', 'month', 'day', 'dayofweek','hour']]\ny_validation = df_validation[['count']]","579b2591":"# XGBoost Training Parameter Reference: \n#   https:\/\/github.com\/dmlc\/xgboost\/blob\/master\/doc\/parameter.md\n#regressor = xgb.XGBRegressor(max_depth=5,eta=0.1,subsample=0.7,num_round=150)\nregressor = xgb.XGBRegressor(max_depth=5,n_estimators=150)","c576fa4b":"regressor","d986715f":"regressor.fit(X_train,y_train, eval_set = [(X_train, y_train), (X_validation, y_validation)])","4d186bd7":"eval_result = regressor.evals_result()\ntraining_rounds = range(len(eval_result['validation_0']['rmse']))\nprint(training_rounds)","d1e6855c":"plt.figure(figsize=(8,4))\nplt.scatter(x=training_rounds,y=eval_result['validation_0']['rmse'],label='Training Error')\nplt.scatter(x=training_rounds,y=eval_result['validation_1']['rmse'],label='Validation Error')\nplt.grid(True)\nplt.xlabel('Iteration')\nplt.ylabel('RMSE')\nplt.title('Training Vs Validation Error')\nplt.legend()\nplt.show()","04978297":"xgb.plot_importance(regressor)\nplt.show()","e5f068a3":"\nX_test=df_validation[['season', 'holiday', 'workingday', 'weather', 'temp',\n       'atemp', 'humidity', 'windspeed', 'year', 'month', 'day', 'dayofweek','hour']]\ny_test=df_validation['count']","c882dea3":"result = regressor.predict(X_test)","0ea4b9c2":"df_validation['count_predicted']=result","15255110":"df_validation.head()","f7e324c1":"df_validation['count_predicted'].describe()","b30149bc":"df_validation[df_validation['count_predicted'] < 0].head()","2e6fdf9f":"df_validation['count_predicted'].hist()\nplt.title('Predicted Count Histogram')\nplt.show()","aa9a8e18":"def adjust_count(x):\n    if x < 0:\n        return 0\n    else:\n        return x","51207cdf":"df_validation['count_predicted'] = df_validation['count_predicted'].map(adjust_count)","8f8cb4ab":"df_validation[df_validation['count_predicted'] < 0]","32151ef6":"# Actual Vs Predicted\nplt.plot(df_validation['count'], label='Actual')\nplt.plot(df_validation['count_predicted'],label='Predicted')\nplt.xlabel('Sample')\nplt.ylabel('Count')\nplt.xlim([100,150])\nplt.title('Validation Dataset - Predicted Vs. Actual')\nplt.legend()\nplt.show()","df0e3db0":"# Over prediction and Under Prediction needs to be balanced\n# Training Data Residuals\nresiduals = (df_validation['count'] - df_validation['count_predicted'])\n\nplt.hist(residuals)\nplt.grid(True)\nplt.xlabel('Actual - Predicted')\nplt.ylabel('Count')\nplt.title('Residuals Distribution')\nplt.axvline(color='r')\nplt.show()","816cc438":"value_counts = (residuals > 0).value_counts(sort=False)\nprint(' Under Estimation: {0:0.2f}'.format(value_counts[True]\/len(residuals)))\nprint(' Over  Estimation: {0:0.2f}'.format(value_counts[False]\/len(residuals)))","a7311080":"print(\"RMSE: {0:0.2f}\".format(mean_squared_error(df_validation['count'],df_validation['count_predicted'])**.5))","fb2ccef2":"# Reference:Katerina Malahova, Khor SoonHin \n# https:\/\/www.slideshare.net\/KhorSoonHin\/rmsle-cost-function\ndef compute_rmsle(y_true, y_pred):\n    if type(y_true) != np.ndarray:\n        y_true = np.array(y_true)\n        \n    if type(y_pred) != np.ndarray:\n        y_pred = np.array(y_pred)\n     \n    return(np.average((np.log1p(y_pred) - np.log1p(y_true))**2)**.5)","82838fbb":"print(\"RMSLE: {0}\".format(compute_rmsle(df_validation['count'],df_validation['count_predicted'])))","1d65a0ee":"df_test=df_test.reset_index()\nX_test =  df_test.iloc[:,1:] # Exclude datetime for prediction","9cca3b36":"X_test.head()","2e22ce02":"result = regressor.predict(X_test)","66bdc01e":"result[:5]","e1579dd2":"df_test[\"count\"] = result","d1a53849":"df_test[df_test[\"count\"]<0]","51802aae":"df_test[\"count\"]=df_test[\"count\"].map(adjust_count)","ca01ad70":"df_test[['datetime','count']].to_csv('predicted_count.csv',index=False)","6a978669":"Thank You! ","96b9b03a":"**Objective** - To share learnings on how to implement Forecasting using XGBoost Algorithm \n\n**Audience**: Any one who would like to learn simple prediction using XG Boost can refer this notebook. "}}