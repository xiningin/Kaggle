{"cell_type":{"c1109c64":"code","fd871acd":"code","b6fe3820":"code","808e5903":"code","a95d8564":"code","171c5da4":"code","75b3ce98":"code","67185b6c":"code","034961db":"code","14ff03d6":"code","bb97fe7c":"code","5cb530ac":"code","44e73e75":"code","3d5ec11a":"code","0d4078ac":"code","80760901":"code","2ce5709d":"code","eb782a1e":"code","6b7d9906":"code","b962e521":"code","e9c0ff1b":"code","68afdb87":"code","1c810c78":"code","87232b23":"code","62bcdb48":"code","42fb5b56":"code","25a483aa":"code","ca246b12":"code","f348eef8":"code","ad80b2e7":"code","30c51b52":"code","cd48e946":"code","ee285143":"code","9bce0296":"code","c8eaf17d":"code","55a78f15":"code","6e23d7ec":"code","b826bbc0":"code","3a0cd147":"code","420f34aa":"code","c6e0363d":"code","1e4b55be":"code","8e20b5f1":"code","3e91d76b":"code","f3877b3c":"code","4fb83bc9":"code","e5373fd2":"code","40b23c11":"code","4baf00d3":"code","ce1f4d77":"code","1a130987":"code","0578b1d1":"code","7f5d1611":"code","fe4c7a23":"code","96156ff6":"code","b72bdf35":"code","bea93bd6":"code","8f73fbbd":"code","76ed35d8":"code","00ff637c":"markdown","d5c8f5fb":"markdown","9291b160":"markdown","79a1b399":"markdown","a4fd44d8":"markdown","74d43e46":"markdown","c8666c66":"markdown","d306c8b9":"markdown","7745e3cb":"markdown","9d7e1415":"markdown","ae3084ea":"markdown","ba27b6e2":"markdown","667871d7":"markdown","bc5463cd":"markdown","204284b1":"markdown","42c543f0":"markdown","c997b772":"markdown","d2217da6":"markdown","da108bb9":"markdown","f6ac7cd1":"markdown","91801e16":"markdown","df0b0c19":"markdown","90aa56b9":"markdown","02412225":"markdown","eb9c8206":"markdown","0edb2c00":"markdown","85b40402":"markdown","309fa7e5":"markdown","cf433be5":"markdown","d7ea3293":"markdown","3af5dc1d":"markdown","1777566e":"markdown","061b66d0":"markdown","4e430e4e":"markdown","12a82498":"markdown","5255d455":"markdown","631f273f":"markdown","efdc2641":"markdown","e2cc27da":"markdown","4b094864":"markdown","613e4bc1":"markdown","e1014743":"markdown","7e079441":"markdown","8dbd5c4a":"markdown"},"source":{"c1109c64":"%matplotlib inline\nfrom scipy import stats\nimport numpy as np\nimport pandas as pd\nimport missingno as mg\nimport matplotlib.pyplot as plt\nimport matplotlib.style as style\nimport seaborn as sns\n# box-cox\u53d8\u6362\u7528\u5230\nfrom scipy.stats import boxcox_normmax\nfrom scipy.special import boxcox1p\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers,losses,optimizers,metrics\n\n# \u5ffd\u7565\u8b66\u544a\nimport warnings\nwarnings.filterwarnings(action='ignore')","fd871acd":"# \u52a0\u8f7d\u6570\u636e\u96c6\ntrain = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv',header=0,index_col=0)\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv',header=0,index_col=0)\n# \u4ee5 f\u5f00\u5934\u8868\u793a\u5728\u5b57\u7b26\u4e32\u5185\u652f\u6301\u5927\u62ec\u53f7\u5185\u7684python \u8868\u8fbe\u5f0f\uff0c\u4e0e\u5e38\u89c1\u7684\u4ee5r\u5f00\u5934\u662f\u540c\u4e00\u7c7b\u7528\u6cd5\uff0c\u53ea\u4e0d\u8fc7\u4ee5r\u5f00\u5934\u662f\u53bb\u6389\u53cd\u659c\u6760\u673a\u5236\nprint (f\"Train has {train.shape[0]} rows and {train.shape[1]} columns\")\nprint (f\"Test has {test.shape[0]} rows and {test.shape[1]} columns\")","b6fe3820":"# \u5173\u4e8e\u6570\u503c\u53d8\u91cf\u7684\u7edf\u8ba1\u4fe1\u606f\ntrain.describe().T","808e5903":"# \u5bf9\u6240\u6709\u7279\u5f81\u53d8\u91cf\u7684\u5c5e\u6027\uff0c\u5185\u5b58\u7b49\u4fe1\u606f\u7684\u7edf\u8ba1\ntrain.info()","a95d8564":"# \u7edf\u8ba1\u4e0d\u540c\u7c7b\u578b\u5bf9\u8c61\u7684\u4e2a\u6570\ntrain.dtypes.value_counts()","171c5da4":"# \u4f7f\u7528missingno\u8fdb\u884c\u7f3a\u5931\u503c\u53ef\u89c6\u5316\nmg.matrix(train)","75b3ce98":"# \u5b9a\u4e49\u4e00\u4e2a\u7edf\u8ba1\u6bcf\u4e2a\u53d8\u91cf\u7f3a\u5931\u6bd4\u4f8b\u7684\u51fd\u6570\ndef missing_percentage(df):\n    total = df.isnull().sum().sort_values(ascending = False)[df.isnull().sum().sort_values(ascending = False) != 0]\n    percentage = round(df.isnull().sum().sort_values(ascending=False)*100 \/ len(df),2)[df.isnull().sum().sort_values(ascending=False)*100 \/ len(df) != 0]\n    return pd.concat([total,percentage],axis = 1,keys=['Total','Percentage'])\n\nmissing_percentage(train)","67185b6c":"mg.matrix(test)","034961db":"missing_percentage(test)","14ff03d6":"def plot_1(df,feature):\n    # \u4e00\u79cd\u56fe\u7684\u683c\u5f0f\n    style.use('fivethirtyeight')\n    fig,axes = plt.subplots(3,1,constrained_layout=True,figsize=(10,24))\n    # \u753b\u76f4\u65b9\u56fe\u4e0e\u8fde\u7eed\u6982\u7387\u5bc6\u5ea6\u4f30\u8ba1\u56fe\n    # norm_hist=True:\u5982\u679c\u4e3aTrue\uff0c\u5219\u76f4\u65b9\u56fe\u7684\u9ad8\u5ea6\u663e\u793a\u5bc6\u5ea6\u800c\u4e0d\u662f\u8ba1\u6570\n    sns.distplot(df.loc[:,feature],norm_hist=True,ax=axes[0])\n    \n    # \u901a\u8fc7\u6bd4\u8f83\u6570\u636e\u548c\u6b63\u6001\u5206\u5e03\u7684\u5206\u4f4d\u6570\u662f\u5426\u76f8\u7b49\u6765\u5224\u65ad\u6570\u636e\u662f\u4e0d\u662f\u7b26\u5408\u6b63\u6001\u5206\u5e03\n    stats.probplot(df.loc[:,feature],plot=axes[1])\n    \n    # \u7bb1\u578b\u56fe\n    sns.boxplot(df.loc[:,feature],orient='h',ax=axes[2])\n    \n\nplot_1(train,'SalePrice')\n    ","bb97fe7c":"train.SalePrice.skew(),train.SalePrice.kurtosis()","5cb530ac":"# \u5e73\u65b9\u662f\u786e\u4fdd\u975e\u8d1f\uff0c\u7136\u540e\u964d\u5e8f\u6392\u5217\uff0c\u7b2c\u4e00\u4e2a\u503c\u662f'SalePrice'\uff0c\u4e0d\u53d6\n(train.corr()**2)[\"SalePrice\"].sort_values(ascending=False)[1:]","44e73e75":"# \u7bb1\u578b\u56fe\u9002\u5408\u7c7b\u522b\u53d8\u91cf\uff0c\u8fd9\u662f\u4e3a\u7c7b\u522b\u53d8\u91cf\u5b9a\u5236\u7684\ndef customized_cat_boxplot(y, x):\n    style.use('fivethirtyeight')\n    plt.subplots(figsize=(12,8))\n    sns.boxplot(y=y,x=x)\n\ncustomized_cat_boxplot(train.SalePrice, train.OverallQual)","3d5ec11a":"# \u6563\u70b9\u56fe\u9002\u5408\u8fde\u7eed\u53d8\u91cf\uff0c\u8fd9\u662f\u4e3a\u8fde\u7eed\u53d8\u91cf\u5b9a\u5236\u7684\ndef customized_num_scatterplot(y, x):\n    style.use('fivethirtyeight')\n    plt.subplots(figsize=(12,8))\n    sns.scatterplot(y=y,x=x)\n\ncustomized_num_scatterplot(train.SalePrice, train.GrLivArea)","0d4078ac":"customized_num_scatterplot(train.SalePrice, train.GarageArea)","80760901":"customized_num_scatterplot(train.SalePrice, train.TotalBsmtSF)","2ce5709d":"customized_num_scatterplot(train.SalePrice, train['1stFlrSF'])","eb782a1e":"customized_num_scatterplot(train.SalePrice, train.MasVnrArea)","6b7d9906":"# \u5220\u9664\u8fd9\u4e24\u4e2a\u5f02\u5e38\u503c\ntrain = train[train.GrLivArea < 4500]\n# \u6b64\u65f6\u53d1\u73b0:TotalBsmtSF\u4e2d\u7684\u5f02\u5e38\u70b9\u4e5f\u5728\u5176\u4e2d,1stFlrSF\u4e2d\u7684\u5f02\u5e38\u70b9\u4e5f\u5728\u5176\u4e2d\u3002\u5e76\u4e14\u6700\u5173\u952e\u7684\u95ee\u9898\u662f\u7d22\u5f15\u4e0d\u8fde\u7eed\u4e86\uff0c\u6b64\u65f6\u5c31\u8981\u91cd\u7f6e\u7d22\u5f15\ntrain.reset_index(drop = True, inplace = True)\nprevious_train = train.copy()","b962e521":"fig, (ax1, ax2) = plt.subplots(figsize = (12,8), ncols=2,sharey=False)\n# Scatter plotting for SalePrice and GrLivArea. \nsns.scatterplot( x = train.GrLivArea, y = train.SalePrice,  ax=ax1)\n# Putting a regression line. \nsns.regplot(x=train.GrLivArea, y=train.SalePrice, ax=ax1)\n\n# Scatter plotting for SalePrice and MasVnrArea. \nsns.scatterplot(x = train.MasVnrArea,y = train.SalePrice, ax=ax2)\n# regression line for MasVnrArea and SalePrice. \nsns.regplot(x=train.MasVnrArea, y=train.SalePrice, ax=ax2)","e9c0ff1b":"plt.subplots(figsize = (12,8))\nsns.residplot(train.GrLivArea, train.SalePrice)","68afdb87":"plot_1(train,'SalePrice')","1c810c78":"# \u5bf9\u6570\u53d8\u6362\ntrain['SalePrice'] = np.log1p(train['SalePrice'])\n# \u68c0\u9a8c\u5176\u6b63\u6001\u6027\nplot_1(train,'SalePrice')","87232b23":"## Customizing grid for two plots. \nfig, (ax1, ax2) = plt.subplots(figsize = (15,6), \n                               ncols=2, \n                               sharey = False, \n                               sharex=False\n                              )\n## doing the first scatter plot. \nsns.residplot(x = previous_train.GrLivArea, y = previous_train.SalePrice, ax = ax1)\n## doing the scatter plot for GrLivArea and SalePrice. \nsns.residplot(x = train.GrLivArea, y = train.SalePrice, ax = ax2)","62bcdb48":"# Plot fig sizing. \nstyle.use('ggplot')\nsns.set_style('whitegrid')\nplt.subplots(figsize = (30,20))\n# Plotting heatmap. \n\n# Generate a mask for the upper triangle (taken from seaborn example gallery)\nmask = np.zeros_like(train.corr(), dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\nsns.heatmap(train.corr(), \n            cmap=sns.diverging_palette(20, 220, n=200), \n            mask = mask, \n            annot=True, \n            center = 0, \n           )\n# Give title. \nplt.title(\"Heatmap of all the Features\", fontsize = 30)","42fb5b56":"# Saving the target values in \"y_train\". \ny = train['SalePrice'].reset_index(drop=True)\n\n# getting a copy of train\nprevious_train = train.copy()","25a483aa":"# Combining train and test datasets together so that we can do all the work at once. \nall_data = pd.concat((train, test)).reset_index(drop = True)\n# Dropping the target variable. \nall_data.drop(['SalePrice'], axis = 1, inplace = True)","ca246b12":"missing_percentage(all_data)","f348eef8":"missing_val_col = [\"Alley\", \n                   \"PoolQC\", \n                   \"MiscFeature\",\n                   \"Fence\",\n                   \"FireplaceQu\",\n                   \"GarageType\",\n                   \"GarageFinish\",\n                   \"GarageQual\",\n                   \"GarageCond\",\n                   'BsmtQual',\n                   'BsmtCond',\n                   'BsmtExposure',\n                   'BsmtFinType1',\n                   'BsmtFinType2',\n                   'MasVnrType']\n\nfor i in missing_val_col:\n    all_data[i] = all_data[i].fillna('None')","ad80b2e7":"missing_val_col2 = ['BsmtFinSF1',\n                    'BsmtFinSF2',\n                    'BsmtUnfSF',\n                    'TotalBsmtSF',\n                    'BsmtFullBath', \n                    'BsmtHalfBath', \n                    'GarageYrBlt',\n                    'GarageArea',\n                    'GarageCars',\n                    'MasVnrArea']\n\nfor i in missing_val_col2:\n    all_data[i] = all_data[i].fillna(0)","30c51b52":"# \u5c06'Neighborhood'\u5206\u6876\uff0c\u7528\u5bf9\u5e94\u6876\u5185'LotFrontage'\u7684\u5747\u503c\u6765\u586b\u5145\u7f3a\u5931\u503c\nall_data['LotFrontage'] = all_data.groupby('Neighborhood')['LotFrontage'].transform( lambda x: x.fillna(x.mean()))","cd48e946":"# \u6709\u4e9b\u7c7b\u522b\u7279\u5f81\u4ee5\u6570\u5b57\u5f62\u5f0f\u7ed9\u51fa\uff0c\u6240\u4ee5\u8981\u8f6c\u53d8\u6210\u7c7b\u522b\u53d8\u91cf\nall_data['MSSubClass'] = all_data['MSSubClass'].astype(str)\n# mode\u6307\u7684\u662f\u6700\u5e38\u51fa\u73b0\u7684\u503c\nall_data['MSZoning'] = all_data.groupby('MSSubClass')['MSZoning'].transform(lambda x: x.fillna(x.mode()[0]))\n# \u91cd\u8981\u7684\u5e74\u4efd\u548c\u6708\u4efd\u5e94\u5f53\u662f\u7c7b\u522b\u53d8\u91cf\u800c\u4e0d\u662f\u8fde\u7eed\u53d8\u91cf\nall_data['YrSold'] = all_data['YrSold'].astype(str)\nall_data['MoSold'] = all_data['MoSold'].astype(str)\n\nall_data['Functional'] = all_data['Functional'].fillna('Typ') \nall_data['Utilities'] = all_data['Utilities'].fillna('AllPub') \nall_data['Exterior1st'] = all_data['Exterior1st'].fillna(all_data['Exterior1st'].mode()[0]) \nall_data['Exterior2nd'] = all_data['Exterior2nd'].fillna(all_data['Exterior2nd'].mode()[0])\nall_data['KitchenQual'] = all_data['KitchenQual'].fillna(\"TA\") \nall_data['SaleType'] = all_data['SaleType'].fillna(all_data['SaleType'].mode()[0])\nall_data['Electrical'] = all_data['Electrical'].fillna(\"SBrkr\") ","ee285143":"missing_percentage(all_data)","9bce0296":"numeric_feats = all_data.dtypes[all_data.dtypes != \"object\"].index\nskewed_feats = all_data[numeric_feats].apply(lambda x: x.skew()).sort_values(ascending=False)\n\nskewed_feats","c8eaf17d":"# \u5c55\u793a'1stFlrSF'\u7684\u76f4\u65b9\u56fe\u4e0e\u8fde\u7eed\u6982\u7387\u5bc6\u5ea6\u4f30\u8ba1\nsns.distplot(all_data['1stFlrSF'])","55a78f15":"all_data['1stFlrSF'].skew(),all_data['1stFlrSF'].kurtosis()","6e23d7ec":"def fixing_skewness(df):\n    \"\"\"\n    This function takes in a dataframe and return fixed skewed dataframe\n    \"\"\"\n    ## Import necessary modules \n    from scipy.stats import skew\n    from scipy.special import boxcox1p\n    from scipy.stats import boxcox_normmax\n    \n    ## Getting all the data that are not of \"object\" type. \n    numeric_feats = df.dtypes[df.dtypes != \"object\"].index\n\n    # Check the skew of all numerical features\n    skewed_feats = df[numeric_feats].apply(lambda x: x.skew()).sort_values(ascending=False)\n    high_skew = skewed_feats[abs(skewed_feats) > 0.5]\n    skewed_features = high_skew.index\n    \n    # \u4fee\u6b63\n    for feat in skewed_features:\n        # \u8fd9\u91cc\u7684+1\u53ea\u662f\u786e\u4fdd\u975e\u8d1f\uff0c\u6ca1\u6709\u5176\u4ed6\u542b\u4e49\n        df[feat] = boxcox1p(df[feat], boxcox_normmax(df[feat] + 1))\n\nfixing_skewness(all_data)","b826bbc0":"sns.distplot(all_data['1stFlrSF'])","3a0cd147":"all_data['1stFlrSF'].skew(),all_data['1stFlrSF'].kurtosis()","420f34aa":"# feture engineering a new feature \"TotalFS\"\nall_data['TotalSF'] = (all_data['TotalBsmtSF'] \n                       + all_data['1stFlrSF'] \n                       + all_data['2ndFlrSF'])\n\nall_data['YrBltAndRemod'] = all_data['YearBuilt'] + all_data['YearRemodAdd']\n\nall_data['Total_sqr_footage'] = (all_data['BsmtFinSF1'] \n                                 + all_data['BsmtFinSF2'] \n                                 + all_data['1stFlrSF'] \n                                 + all_data['2ndFlrSF']\n                                )\n                                 \n\nall_data['Total_Bathrooms'] = (all_data['FullBath'] \n                               + (0.5 * all_data['HalfBath']) \n                               + all_data['BsmtFullBath'] \n                               + (0.5 * all_data['BsmtHalfBath'])\n                              )\n                               \nall_data['Total_porch_sf'] = (all_data['OpenPorchSF'] \n                              + all_data['3SsnPorch'] \n                              + all_data['EnclosedPorch'] \n                              + all_data['ScreenPorch'] \n                              + all_data['WoodDeckSF']\n                             )","c6e0363d":"all_data['haspool'] = all_data['PoolArea'].apply(lambda x: 1 if x > 0 else 0)\nall_data['has2ndfloor'] = all_data['2ndFlrSF'].apply(lambda x: 1 if x > 0 else 0)\nall_data['hasgarage'] = all_data['GarageArea'].apply(lambda x: 1 if x > 0 else 0)\nall_data['hasbsmt'] = all_data['TotalBsmtSF'].apply(lambda x: 1 if x > 0 else 0)\nall_data['hasfireplace'] = all_data['Fireplaces'].apply(lambda x: 1 if x > 0 else 0)","1e4b55be":"all_data.shape","8e20b5f1":"all_data = all_data.drop(['Utilities', 'Street', 'PoolQC'], axis=1)\nall_data.shape","3e91d76b":"X_train,X_test = all_data.iloc[:train.shape[0],:],all_data.iloc[train.shape[0]:,:]","f3877b3c":"X_train.shape,y.shape, X_test.shape","4fb83bc9":"# \u5220\u9664\u5f02\u5e38\u70b9\u2014\u8fd9\u4e9b\u5f02\u5e38\u70b9\u662f\u600e\u4e48\u627e\u51fa\u6765\u7684\uff0c\u6211\u6ca1\u5206\u6790\noutliers = [30, 88, 462, 631, 1322]\nX_train = X_train.drop(X_train.index[outliers])\ny = y.drop(y.index[outliers])","e5373fd2":"# \u7edf\u8ba1\u503c\nfor i in X_train.columns:\n    counts = X_train[i].value_counts()\n    print (counts)","40b23c11":"# \u5220\u9664\u63a5\u8fd1\u4e8e\u5e38\u91cf\u7684\u53d8\u91cf\ndef overfit_reducer(df):\n    \"\"\"\n    This function takes in a dataframe and returns a list of features that are overfitted.\n    \"\"\"\n    overfit = []\n    for i in df.columns:\n        counts = df[i].value_counts()\n        zeros = counts.iloc[0]\n        if zeros \/ len(df) * 100 > 95:\n            overfit.append(i)\n    overfit = list(overfit)\n    return overfit\n\n\noverfitted_features = overfit_reducer(X_train)\nprint(overfitted_features)\nX_train = X_train.drop(overfitted_features, axis=1)\nX_test = X_test.drop(overfitted_features, axis=1)","4baf00d3":"X_train.shape,y.shape, X_test.shape","ce1f4d77":"X_train.reset_index(drop=True,inplace=True)\nX_test.reset_index(drop=True,inplace=True)\nX_train.shape,X_train.index","1a130987":"# \u8fd9\u91cc\u8981\u62fc\u63a5\u7684\u539f\u56e0\u662fX_test\u4e2d\u67d0\u4e9b\u7279\u5f81\u7684\u7c7b\u522b\u5728X_train\u4e2d\u4e0d\u5168\nX = pd.concat([X_train,X_test],axis=0)","0578b1d1":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder,MinMaxScaler\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import Model,layers,optimizers,metrics,losses\n\nimport sys\nsys.setrecursionlimit(100000)","7f5d1611":"# \u4e3a\u4e86\u540e\u9762\u7f51\u7edc\u7684\u6784\u5efa\uff0c\u60f3\u8981\u7c7b\u522b\u578b\u7279\u5f81\u7684\u8f93\u5165\u5728\u524d\u9762\uff0c\u8fde\u7eed\u578b\u7279\u5f81\u7684\u8f93\u5165\u5728\u540e\u9762\ncat_features = X_train.dtypes[X_train.dtypes == 'object'].index\nnum_features = X_train.dtypes[X_train.dtypes != 'object'].index\ncat_features.size,num_features.size","fe4c7a23":"def prepare_input(X,X_train):\n    X_train_enco,X_test_enco = list(),list()\n    # \u7c7b\u522b\u578b\u7279\u5f81\n    for var in cat_features:\n        le = LabelEncoder()\n        X_ = le.fit_transform(X.loc[:,var])\n        \n        train_enco = X_[:len(X_train)]\n        test_enco = X_[len(X_train):]\n        # \u6dfb\u52a0\n        X_train_enco.append(train_enco)\n        X_test_enco.append(test_enco)\n    # \u6570\u503c\u578b\u53d8\u91cf-\u8fd9\u91cc\u6211\u91c7\u7528\u4e86\u5f52\u4e00\u5316\n    for var in num_features:\n#         mm = MinMaxScaler()\n#         X_ = mm.fit_transform(X.loc[:,var])\n        train_enco = X.loc[:,var][:len(X_train)]\n        test_enco = X.loc[:,var][len(X_train):]\n        # \u6dfb\u52a0\n        X_train_enco.append(train_enco)\n        X_test_enco.append(test_enco)\n    return X_train_enco,X_test_enco","96156ff6":"# \u51c6\u5907\u8f93\u5165\u6570\u636e\nX_train_enco,X_test_enco = prepare_input(X_train,X_test)\nlen(X_train_enco)\ny = y.values.reshape((len(y), 1))","b72bdf35":"# label_num = [len(set(X_train_enco[i])) for i in range(39)]\n# print(label_num)","bea93bd6":"# in_layers = list()\n# em_layers = list()\n# for i in range(len(X_train_enc)):\n# \t# calculate the number of unique inputs\n# \tn_labels = len(unique(X_train_enc[i]))\n# \t# define input layer\n# \tin_layer = Input(shape=(1,))\n# \t# define embedding layer\n# \tem_layer = Embedding(n_labels, 10)(in_layer)\n# \t# store layers\n# \tin_layers.append(in_layer)\n# \tem_layers.append(em_layer)\n# # \u5408\u5e76\u6240\u7528embedding\u5411\u91cf\n# merge = concatenate(em_layers)\n# dense = Dense(10, activation='relu', kernel_initializer='he_normal')(merge)\n# output = Dense(1, activation='sigmoid')(dense)\n# model = Model(inputs=in_layers, outputs=output)\n# # compile the keras model\n# model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])","8f73fbbd":"import numpy as np\ninput_layer = []\nem_layer = []\n\nfor i in range(len(X_train_enco)):\n    if i < 39:\n        # \u79cd\u7c7b\n        n_labels = len(np.unique(X_train_enco[i]))\n        # \u8f93\u5165\n        inp = layers.Input(shape=(1,))\n        em = layers.Embedding(n_labels,6)(inp)\n        em = layers.Reshape(target_shape=(6,))(em)\n        input_layer.append(inp)\n        em_layer.append(em)\n    else:\n        inp = layers.Input(shape=(1,))\n#         inp = layers.BatchNormalization()(inp)\n        dense = layers.Dense(6)(inp)\n        input_layer.append(inp)\n        em_layer.append(dense)\n\n    \n# \u5408\u5e76\nx = layers.Concatenate()(em_layer)\n# x = layers.BatchNormalization()(x)\nx = layers.Dense(32,activation = 'relu')(x)\nx = layers.Dropout(0.1)(x)\noutput = layers.Dense(1)(x)\n\nmodel = keras.Model(inputs=input_layer, outputs=output)","76ed35d8":"model.compile(optimizer=optimizers.Adam(learning_rate=0.01),\n             loss='mse',\n             metrics=[tf.keras.metrics.AUC(name='auc')])\nmodel.fit(X_train_enco, y, epochs=2, batch_size=16, verbose=1)","00ff637c":"### \u89c2\u5bdf\u7ed3\u679c\uff1a\n* \u6211\u4eec\u7684\u76ee\u6807\u53d8\u91cf\u5728\u5927\u591a\u6570\u9884\u6d4b(\u72ec\u7acb)\u53d8\u91cf\u4e4b\u95f4\u663e\u793a\u4e0d\u76f8\u7b49\u7684\u65b9\u5dee\u6c34\u5e73\u3002\u8fd9\u88ab\u79f0\u4e3a\u5f02\u65b9\u5dee(\u5728\u4e0b\u9762\u7684\u66f4\u591a\u89e3\u91ca)\uff0c\u662f\u591a\u5143\u7ebf\u6027\u56de\u5f52\u6a21\u578b\u7684\u4e00\u4e2a\u5371\u9669\u4fe1\u53f7\u3002\n* \u6563\u70b9\u56fe\u4e2d\u6709\u8bb8\u591a\u5f02\u5e38\u503c\n* SalePrice\u548cGrLivArea\u4f3c\u4e4e\u9075\u5faa\u4e86\u4e00\u79cd\u8d8b\u52bf\uff1a\u201c\u968f\u7740\u4ef7\u683c\u4e0a\u6da8\uff0c\u533a\u57df\u4e5f\u5728\u4e0a\u6da8\u3002\u7136\u800c\uff0c\u540c\u4e00\u56fe\u8868\u53f3\u4e0b\u89d2\u7684\u4e24\u4e2a\u6570\u636e\u5e76\u6ca1\u6709\u9075\u5faa\u4efb\u4f55\u8d8b\u52bf\u3002\u6211\u4eec\u628a\u4e0b\u9762\u8fd9\u4e24\u4e2a\u53bb\u6389\u3002","d5c8f5fb":"## 5.\u6570\u636e\u53d8\u6362","9291b160":"\u6211\u4eec\u770b\u5230\u5de6\u8fb9\u7684\u9884\u8f6c\u6362\u56fe\u8868\u5177\u6709\u5f02\u65b9\u5dee\u6027\uff0c\u800c\u53f3\u8fb9\u7684\u540e\u8f6c\u6362\u56fe\u8868\u5177\u6709\u540c\u65b9\u5dee\u6027(\u5728\u96f6\u7ebf\u4e0a\u7684\u65b9\u5dee\u51e0\u4e4e\u76f8\u7b49)\u3002\u5b83\u770b\u8d77\u6765\u50cf\u4e00\u56e2\u6570\u636e\u70b9\u3002\u8fd9\u6b63\u662f\u6211\u4eec\u6240\u5e0c\u671b\u7684\u3002\n* No or Little multicollinearity:\u5f53\u81ea\u53d8\u91cf\u4e4b\u95f4\u6709\u5f88\u5f3a\u7684\u76f8\u5173\u6027\u65f6\u4f1a\u51fa\u73b0\u591a\u91cd\u5171\u7ebf\u6027\u3002\u7ebf\u6027\u56de\u5f52\u6216\u591a\u7ebf\u6027\u56de\u5f52\u8981\u6c42\u81ea\u53d8\u91cf\u5f88\u5c11\u6216\u6ca1\u6709\u7c7b\u4f3c\u7684\u7279\u5f81\u3002\u591a\u91cd\u5171\u7ebf\u6027\u4f1a\u5bfc\u81f4\u5404\u79cd\u95ee\u9898\uff0c\u5305\u62ec\uff1a\n    * 1. \u56de\u5f52\u4f30\u8ba1\u7684\u9884\u6d4b\u53d8\u91cf\u7684\u6548\u679c\u5c06\u53d6\u51b3\u4e8e\u6211\u4eec\u7684\u6a21\u578b\u4e2d\u5305\u542b\u7684\u5176\u4ed6\u53d8\u91cf\n    * 2.\u6837\u672c\u4e2d\u7684\u5fae\u5c0f\u53d8\u5316\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4f30\u8ba1\u6548\u679c\u5927\u4e0d\u76f8\u540c\n    * 3.\u7531\u4e8e\u591a\u91cd\u5171\u7ebf\u6027\u5ea6\u5f88\u9ad8\uff0c\u9006\u77e9\u9635\u7684\u8ba1\u7b97\u53ef\u80fd\u4e0d\u51c6\u786e\n    * 4.\u6211\u4eec\u4e0d\u80fd\u518d\u628a\u53d8\u91cf\u4e0a\u7684\u7cfb\u6570\u89e3\u91ca\u4e3a\u4fdd\u6301\u5176\u4ed6\u53d8\u91cf\u4e0d\u53d8,\u53d8\u91cf\u6bcf\u589e\u52a0\u4e00\u4e2a\u5355\u4f4d\u5bf9\u76ee\u6807\u7684\u5f71\u54cd\u3002\u8fd9\u80cc\u540e\u7684\u539f\u56e0\u662f\uff0c\u5f53\u9884\u6d4b\u56e0\u5b50\u7d27\u5bc6\u76f8\u5173\u65f6\uff0c\u4e0d\u5b58\u5728\u4e00\u4e2a\u53d8\u91cf\u53ef\u4ee5\u6539\u53d8\u800c\u53e6\u4e00\u4e2a\u53d8\u91cf\u4e0d\u53d1\u751f\u6761\u4ef6\u53d8\u5316\u7684\u60c5\u51b5\u3002\n    \nHeatmap\u662f\u8bc6\u522b\u662f\u5426\u5b58\u5728\u591a\u91cd\u5171\u7ebf\u6027\u7684\u597d\u65b9\u6cd5\u3002\u89e3\u51b3\u591a\u91cd\u5171\u7ebf\u6027\u7684\u6700\u597d\u65b9\u6cd5\u662f\u4f7f\u7528\u6b63\u5219\u5316\u65b9\u6cd5like Ridge or Lasso.","79a1b399":"\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u591a\u91cd\u5171\u7ebf\u6027\u4ecd\u7136\u5b58\u5728\u4e8e\u5404\u79cd\u7279\u5f81\u4e2d\u3002\u7136\u800c\uff0c\u4e3a\u4e86\u5b66\u4e60\uff0c\u6211\u4eec\u5c06\u4fdd\u7559\u5b83\u4eec\uff0c\u5e76\u8ba9\u6a21\u578b(**\u6b63\u89c4\u5316**\u6a21\u578b\u5982Lasso, Ridge)\u7a0d\u540e\u505a\u6e05\u7406\u3002\n* There is 0.83 or 83% correlation between **GarageYrBlt** and **YearBuilt**. \n* 83% correlation between **TotRmsAbvGrd ** and **GrLivArea**. \n* 89% correlation between **GarageCars** and **GarageArea**. \n* Similarly many other features such as**BsmtUnfSF**, **FullBath** have good correlation with other independent feature.\n\n\u5982\u679c\u6211\u53ea\u4f7f\u7528\u591a\u5143\u7ebf\u6027\u56de\u5f52\uff0c\u6211\u4f1a\u4ece\u6570\u636e\u96c6\u4e2d\u5220\u9664\u8fd9\u4e9b\u7279\u5f81\uff0c\u4ee5\u9002\u5e94\u66f4\u597d\u7684\u591a\u5143\u7ebf\u6027\u56de\u5f52\u7b97\u6cd5\u3002\u7136\u800c\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u8bb8\u591a\u7b97\u6cd5\uff0c\u56e0\u4e3ascikit\u5b66\u4e60\u6a21\u5757\u4f7f\u5176\u6613\u4e8e\u5b9e\u73b0\uff0c\u5e76\u83b7\u5f97\u6700\u597d\u7684\u53ef\u80fd\u7ed3\u679c\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5c06\u6682\u65f6\u4fdd\u7559\u6240\u6709\u7684\u7279\u6027\u3002","a4fd44d8":"### SalePrice vs GarageArea","74d43e46":"\u8fd9\u91cc\u6211\u4eec\u7528\u4e24\u4e2a\u81ea\u53d8\u91cfGrLivArea\u548cMasVnrArea\u7ed8\u5236\u76ee\u6807\u53d8\u91cf\u3002\u4ece\u56fe\u4e2d\u53ef\u4ee5\u660e\u663e\u770b\u51fa\uff0cSalePrice\u548cGrLivArea\u4e4b\u95f4\u7684\u7ebf\u6027\u5173\u7cfb\u6bd4SalePrice\u548cMasVnrArea\u4e4b\u95f4\u7684\u7ebf\u6027\u5173\u7cfb\u66f4\u597d\u3002\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u4e00\u70b9\u662f\uff0c\u6570\u636e\u96c6\u4e2d\u6709\u4e00\u4e9b\u5f02\u5e38\u503c\u3002\u7531\u4e8e\u7ebf\u6027\u56de\u5f52\u5bf9\u5f02\u5e38\u503c\u7684\u5f71\u54cd\u5f88\u654f\u611f\uff0c\u6240\u4ee5\u5fc5\u987b\u68c0\u67e5\u5f02\u5e38\u503c\u3002\u6709\u65f6\uff0c\u5f53\u6570\u636e\u53ef\u80fd\u4e0d\u662f\u90a3\u4e48\u7ebf\u6027\u65f6\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u5c1d\u8bd5\u62df\u5408\u4e00\u4e2a\u7ebf\u6027\u56de\u5f52\u6a21\u578b\uff0c\u6216\u8005\u51fd\u6570\u53ef\u80fd\u9700\u8981\u53e6\u4e00\u4e2a\u81ea\u7531\u5ea6\u6765\u62df\u5408\u6570\u636e\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u80fd\u9700\u8981\u6839\u636e\u6570\u636e\u6539\u53d8\u6211\u4eec\u7684\u51fd\u6570\uff0c\u4ee5\u83b7\u5f97\u53ef\u80fd\u7684\u6700\u4f73\u62df\u5408\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u68c0\u67e5\u6b8b\u5dee\u56fe\uff0c\u5b83\u544a\u8bc9\u6211\u4eec\u8bef\u5dee\u65b9\u5dee\u662f\u5982\u4f55\u7a7f\u8fc7\u771f\u7ebf\u7684\u3002\u8ba9\u6211\u4eec\u770b\u770b\u81ea\u53d8\u91cfGrLivArea\u548c\u76ee\u6807\u53d8\u91cf*SalePrice *\u7684\u6b8b\u5dee\u56fe\u3002","c8666c66":"\u53c2\u8003:[\nA Detailed Regression Guide with House-pricing](https:\/\/www.kaggle.com\/masumrumi\/a-detailed-regression-guide-with-house-pricing?scriptVersionId=0)","d306c8b9":"### \u7ed8\u5236\u6b8b\u5dee\u56fe","7745e3cb":"### SalePrice vs MasVnrArea","9d7e1415":"### 6.1\u7279\u5f81\u7ec4\u5408\n\u7279\u5f81\u7ec4\u5408\u662f\u5efa\u7acb\u5728\u4e1a\u52a1\u903b\u8f91\u4e0a\u7684\u3002\u5c31\u6bd4\u5982\u7b2c\u4e00\u4e2a\u7279\u5f81\u7ec4\u5408\u7684\u5b9e\u9645\u542b\u4e49\u662f\uff1a\u5730\u4e0b\u5ba4\u603b\u9762\u79ef+\u4e00\u697c\u9762\u79ef+\u4e8c\u697c\u9762\u79ef=\u623f\u5b50\u7684\u603b\u9762\u79ef\u3002\u7b2c\u4e8c\u4e2a\u7279\u5f81\u7ec4\u5408\u7684\u5b9e\u9645\u542b\u4e49\u662f\uff1a\u623f\u5b50\u7684\u4e24\u6b21\u52a8\u5de5\u65e5\u671f\u7684\u548c\u7b49","ae3084ea":"\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u5047\u8bbe\u6ee1\u8db3\uff0c\u6b8b\u5dee\u5c06\u968f\u673a\u5206\u6563\u5728\u4e3a\u96f6\u7684\u4e2d\u5fc3\u7ebf\u4e0a\uff0c\u6ca1\u6709\u660e\u663e\u7684\u6a21\u5f0f\u3002\u770b\u8d77\u6765\u50cf\u4e00\u4e2a\u4ee50\u4e3a\u4e2d\u5fc3\u7684\u975e\u7ed3\u6784\u5316\u7684\u70b9\u4e91\u3002\u7136\u800c\uff0c\u6211\u4eec\u7684\u5269\u4f59\u56fe\u4e0d\u662f\u4e00\u4e2a\u975e\u7ed3\u6784\u5316\u7684\u70b9\u4e91\u3002\u5c3d\u7ba1\u54cd\u5e94\u53d8\u91cf\u548c\u9884\u6d4b\u53d8\u91cf\u4e4b\u95f4\u4f3c\u4e4e\u5b58\u5728\u7ebf\u6027\u5173\u7cfb\uff0c\u4f46\u6b8b\u5dee\u56fe\u770b\u8d77\u6765\u66f4\u50cf\u4e00\u4e2a\u6f0f\u6597\u3002\u6b8b\u5dee\u56fe\u663e\u793a\uff0c\u968f\u7740GrLivArea\u503c\u7684\u589e\u52a0\uff0c\u65b9\u5dee\u4e5f\u968f\u4e4b\u589e\u52a0\uff0c\u8fd9\u5c31\u662f\u6240\u8c13\u7684\u5f02\u65b9\u5dee\u7279\u5f81\u3002","ba27b6e2":"### 4.1\u586b\u5145\u7f3a\u5931\u503c","667871d7":"### \u7ed8\u5236\u7ebf\u6027\u5173\u7cfb","bc5463cd":"### 7.4\u8bad\u7ec3\u6a21\u578b","204284b1":"### SalePrice vs 1stFlrSF","42c543f0":"\u6709\u4e9b\u7c7b\u522b\u7279\u5f81\u4e2d\uff0c\u7f3a\u5931\u503c\u672c\u8eab\u5c31\u6709\u5176\u542b\u4e49\uff1b\u6bd4\u5982Alley\u7279\u5f81\uff0c\u7f3a\u5931\u8868\u660e\u6ca1\u6709\u5df7\u5b50\uff0c\u5c06\u8fd9\u4e00\u7c7b\u4e2d\u7684\u7f3a\u5931\u503c\u7528'None'\u6765\u586b\u5145","c997b772":"### \u6211\u4eec\u4ece\u4e0a\u56fe\u53ef\u77e5\uff0c\u76ee\u6807\u53d8\u91cf\u7684\u5206\u5e03\u4e0d\u662f\u6b63\u6001\u5206\u5e03\uff1b\u53f3\u504f\uff08\u8fd9\u91cc\u7684\u5de6\u53f3\u6307\u62d6\u5c3e\u65b9\u5411\uff09\uff1b\u6709\u5f02\u5e38\u503c","d2217da6":"### \u8fd9\u91cc\u4ee5\u504f\u6001\u4e0e\u5cf0\u5ea6\u5b9a\u91cf\u63cf\u8ff0","da108bb9":"### 4.3\u5220\u9664\u7279\u5f81","f6ac7cd1":"### \u6211\u4eec\u53d1\u73b0:\u623f\u5c4b\u7684\u4ef7\u683c\u968f\u7740\u6574\u4f53\u8d28\u91cf\u7684\u63d0\u9ad8\u800c\u4e0a\u6da8","91801e16":"### 7.2 \u5148\u5c06\u7c7b\u522b\u578b\u7279\u5f81\u7f16\u7801\u4e3a\u6570\u5b57","df0b0c19":"### 6.2\u589e\u52a0\u7279\u5f81\n\u4e0b\u9762\u7684\u9762\u79ef\u4e2d\uff0c\u6ca1\u6709\u9762\u79ef\u4e3a0\uff0c\u6709\u9762\u79ef\u4e3a1\uff0c\u8fd9\u4e2a\u5de5\u4f5c\u6548\u679c\u5f97\u5c1d\u8bd5\uff0c\u56e0\u4e3a\u903b\u8f91\u4e0a\u9762\u79ef\u5927\u7684\u5c31\u5e94\u8be5\u6bd4\u9762\u79ef\u5c0f\u7684\u8d35\u70b9\uff0c\u800c\u540c\u65f6\u8f6c\u6362\u4e3a1\uff0c\u53cd\u800c\u5ffd\u7565\u4e86\u5dee\u5f02\u6027\u3002\u8fd9\u91cc\u589e\u52a0\u4e86\u7279\u5f81\uff0c\u76f4\u63a5\u4ea4\u7ed9\u6b63\u5219\u5316\u6a21\u578b\u6765\u5224\u65ad\u9009\u53d6\u54ea\u4e00\u4e2a\uff0c\u4e0d\u5931\u4e3a\u597d\u7684\u529e\u6cd5\u3002","90aa56b9":"## 4.\u7f3a\u5931\u503c\u5904\u7406","02412225":"### \u5b9a\u6027\u5206\u6790\u4e0a\u8ff0\u76f8\u5173\u6027\u2014\u53ef\u89c6\u5316","eb9c8206":"### \u5229\u7528boxcox\u53d8\u6362\u63d0\u53d6\u503e\u659c\u7279\u5f81","0edb2c00":"### 5.1box-cox\u53d8\u6362\u4fee\u6b63\u504f\u6001","85b40402":"### 7.3\u5b9a\u4e49\u7f16\u7801\u6a21\u578b\n![image.png](attachment:image.png)","309fa7e5":"### SalePrice vs GrLivArea","cf433be5":"### SalePrice vs OverallQual","d7ea3293":"\u6709\u4e9b\u8fde\u7eed\u7279\u5f81\u4e2d\u5b58\u5728\u7f3a\u5931\u503c\u662f\u6709\u76ee\u7684\u7684\uff0c\u6211\u4eec\u5c06\u5176\u66ff\u6362\u4e3a0","3af5dc1d":"## 7.\u63a5\u4e0b\u6765\u5c1d\u8bd5\u4f7f\u7528embedding\u7f16\u7801\u4e0emlp\u795e\u7ecf\u7f51\u7edc","1777566e":"### \u63a5\u4e0b\u6765\u5206\u6790\uff1a\u76ee\u6807\u53d8\u91cf\u4e0e\u5176\u4ed6\u9884\u6d4b\u53d8\u91cf\u7684\u5173\u7cfb","061b66d0":"## 3.\u53d8\u91cf\u5206\u6790","4e430e4e":"## 2.\u7f3a\u5931\u503c\u7edf\u8ba1\u53ca\u53ef\u89c6\u5316","12a82498":"### 7.1\u5bfc\u5165\u6a21\u5757","5255d455":"## 1.\u6570\u636e\u96c6\u57fa\u672c\u4fe1\u606f","631f273f":"* version2\u4e3b\u8981\u8fdb\u884c\u4e86\u6570\u636e\u9884\u5904\u7406\u4e0e\u7279\u5f81\u5de5\u7a0b\uff0c\u4ee5\u53caonehot\u7f16\u7801\u90a3\u4e00\u5957\n* \u8fd9\u4e00\u7248\u672c\u60f3\u5c1d\u8bd5\u5bf9\u7c7b\u522b\u578b\u7279\u5f81\u8fdb\u884cembedding\u7f16\u7801","efdc2641":"## 0.\u5bfc\u5165\u6a21\u5757","e2cc27da":"## 6.\u7279\u5f81\u5de5\u7a0b","4b094864":"\u6709\u4e9b\u7279\u5f81\u4e2d\u7684\u7f3a\u5931\u503c\u4e0e\u5176\u4ed6\u7279\u5f81\u6709\u5173\u7cfb","613e4bc1":"* \u540c\u65b9\u5dee\u7684\u5047\u8bbe\u5bf9\u4e8e\u7ebf\u6027\u56de\u5f52\u6a21\u578b\u81f3\u5173\u91cd\u8981\u3002\u540c\u65b9\u5dee\u63cf\u8ff0\u4e86\u8fd9\u6837\u4e00\u79cd\u60c5\u51b5\uff0c\u5176\u4e2d\u81ea\u53d8\u91cf\u4e0e\u56e0\u53d8\u91cf\u4e4b\u95f4\u7684\u5173\u7cfb\u4e2d\u7684\u8bef\u5dee\u9879\u6216\u65b9\u5dee\u6216\u201c\u566a\u58f0\u201d\u6216\u968f\u673a\u5e72\u6270\u5728\u81ea\u53d8\u91cf\u7684\u6240\u6709\u503c\u4e0a\u5747\u76f8\u540c\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u968f\u7740\u9884\u6d4b\u53d8\u91cf\u7684\u589e\u52a0\uff0c\u54cd\u5e94\u53d8\u91cf\u4e2d\u5b58\u5728\u6052\u5b9a\u7684\u65b9\u5dee\u3002\u5982\u679c\u50cf\u4e0a\u9762\u7684\u6b8b\u5dee\u56fe\u6240\u793a\uff0c\u5219\u6211\u4eec\u79f0\u5176\u4e3a\u5f02\u65b9\u5dee\u3002\n![image.png](attachment:image.png)\n* \u4e0a\u9762\u7684\u8fd9\u5f20\u56fe\u662f\u540c\u65b9\u5dee\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\u3002\u5982\u4f60\u6240\u89c1\uff0c\u65b9\u5dee\u53d8\u5316\u4e0e\u9884\u6d4b\u53d8\u91cf\u503c\u7684\u589e\u52a0\u662f\u4e00\u6837\u7684\u3002\u89e3\u51b3\u5f02\u65b9\u5dee\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528\u4e00\u79cd\u53d8\u6362\u65b9\u6cd5\uff0c\u6bd4\u5982\u5bf9\u6570\u53d8\u6362\u6216\u8005box-cox\u53d8\u6362\u3002\u6211\u4eec\u7a0d\u540e\u518d\u505a\u3002\n* \u591a\u5143\u6b63\u6001\u6027(\u8bef\u5dee\u6b63\u6001\u6027):\u7ebf\u6027\u56de\u5f52\u5206\u6790\u8981\u6c42\u56e0\u53d8\u91cf\u670d\u4ece\u591a\u5143\u6b63\u6001\u5206\u5e03\u3002\u76f4\u65b9\u56fe\u3001\u7bb1\u5f62\u56fe\u6216q - q\u56fe\u53ef\u4ee5\u68c0\u67e5\u76ee\u6807\u53d8\u91cf\u662f\u5426\u4e3a\u6b63\u6001\u5206\u5e03\u3002\u62df\u5408\u4f18\u5ea6\u68c0\u9a8c\uff0c\u5982Kolmogorov-Smirnov\u68c0\u9a8c\uff0c\u53ef\u4ee5\u68c0\u9a8c\u56e0\u53d8\u91cf\u7684\u6b63\u6001\u6027\u3002\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u6211\u4eec\u7684\u76ee\u6807\u53d8\u91cf\u4e0d\u670d\u4ece\u6b63\u6001\u5206\u5e03\u3002\u8ba9\u6211\u4eec\u8fd4\u56de\u4e09\u4e2a\u56fe\u8868\u6765\u663e\u793a\u6211\u4eec\u7684\u76ee\u6807\u53d8\u91cf\u3002","e1014743":"#### \u5206\u6790\u76ee\u6807\u6807\u91cf\uff0c\u5efa\u7acb\u76f4\u65b9\u56fe\u4e0e\u8fde\u7eed\u6982\u7387\u4f30\u8ba1\u56fe\uff1b","7e079441":"### \u53ef\u4ee5\u53d1\u73b0\u4e0a\u56fe\u4e2d\u6709\u4e24\u4e2a\u5f02\u5e38\u70b9\uff0c\u7a0d\u540e\u5c06\u5176\u53bb\u6389","8dbd5c4a":"### SalePrice vs TotalBsmtSF"}}