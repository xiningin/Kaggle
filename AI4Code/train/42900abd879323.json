{"cell_type":{"4b1fce72":"code","4892d761":"code","3b4a4ff6":"code","f61486c7":"code","ffb4f9db":"code","b5cb9392":"code","bbef2e7d":"code","718a1a35":"code","5dfd2cb8":"markdown","232c7d62":"markdown","0d63d19c":"markdown"},"source":{"4b1fce72":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport cv2 \n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4892d761":"!pip install imutils","3b4a4ff6":"import imutils","f61486c7":"class config():\n\n    # base path to YOLO directory\n    # belum setting \n    MODEL_PATH = \"\/kaggle\/input\/yolo-coco-data\"\n\n    # initialize minimum probability to filter weak detections along with\n    # the threshold when applying non-maxima suppression\n    MIN_CONF = 0.3\n    NMS_THRESH = 0.3\n\n    # boolean indicating if NVIDIA CUDA GPU should be used\n    USE_GPU = True\n\n    # define the minimum safe distance (in pixels) that two people can be\n    # from each other\n    MIN_DISTANCE = 50","ffb4f9db":"\ndef detect_people(frame, net, ln, personIdx=0):\n    # grab the dimensions of the frame and  initialize the list of\n    # results\n    (H, W) = frame.shape[:2]\n    results = []\n\n    # construct a blob from the input frame and then perform a forward\n    # pass of the YOLO object detector, giving us our bounding boxes\n    # and associated probabilities\n    blob = cv2.dnn.blobFromImage(frame, 1 \/ 255.0, (416, 416), swapRB=True, crop=False)\n    net.setInput(blob)\n    layerOutputs = net.forward(ln)\n\n    # initialize our lists of detected bounding boxes, centroids, and\n    # confidences, respectively\n    boxes = []\n    centroids = []\n    confidences = []\n\n    # loop over each of the layer outputs\n    for output in layerOutputs:\n    # loop over each of the detections\n        for detection in output:\n            # extract the class ID and confidence (i.e., probability)\n            # of the current object detection\n            scores = detection[5:]\n            classID = np.argmax(scores)\n            confidence = scores[classID]\n\n            # filter detections by (1) ensuring that the object\n            # detected was a person and (2) that the minimum\n            # confidence is met\n            if classID == personIdx and confidence > config.MIN_CONF:\n                # scale the bounding box coordinates back relative to\n                # the size of the image, keeping in mind that YOLO\n                # actually returns the center (x, y)-coordinates of\n                # the bounding box followed by the boxes' width and\n                # height\n                box = detection[0:4] * np.array([W, H, W, H])\n                (centerX, centerY, width, height) = box.astype(\"int\")\n\n                # use the center (x, y)-coordinates to derive the top\n                # and and left corner of the bounding box\n                x = int(centerX - (width \/ 2))\n                y = int(centerY - (height \/ 2))\n\n                # update our list of bounding box coordinates,\n                # centroids, and confidences\n                boxes.append([x, y, int(width), int(height)])\n                centroids.append((centerX, centerY))\n                confidences.append(float(confidence))\n\n    # apply non-maxima suppression to suppress weak, overlapping\n    # bounding boxes\n    idxs = cv2.dnn.NMSBoxes(boxes, confidences, config.MIN_CONF, config.NMS_THRESH)\n\n    # ensure at least one detection exists\n    if len(idxs) > 0:\n        # loop over the indexes we are keeping\n        for i in idxs.flatten():\n            # extract the bounding box coordinates\n            (x, y) = (boxes[i][0], boxes[i][1])\n            (w, h) = (boxes[i][2], boxes[i][3])\n\n            # update our results list to consist of the person\n            # prediction probability, bounding box coordinates,\n            # and the centroid\n            r = (confidences[i], (x, y, x + w, y + h), centroids[i])\n            results.append(r)\n\n    # return the list of results\n    return results","b5cb9392":"input_data = '\/kaggle\/input\/social-distancing\/pedestrians.mp4'\noutput_data = 'output.avi'\ndisplay = 0","bbef2e7d":"# USAGE\n# python social_distance_detector.py --input pedestrians.mp4\n# python social_distance_detector.py --input pedestrians.mp4 --output output.avi\n\n# import the necessary packages\n## from pyimagesearch import social_distancing_config as config\n## from pyimagesearch.detection import detect_people\nfrom scipy.spatial import distance as dist\n\n'''\n# construct the argument parse and parse the arguments\nap = argparse.ArgumentParser()\nap.add_argument(\"-i\", \"--input\", type=str, default=\"\",\n\thelp=\"path to (optional) input video file\")\nap.add_argument(\"-o\", \"--output\", type=str, default=\"\",\n\thelp=\"path to (optional) output video file\")\nap.add_argument(\"-d\", \"--display\", type=int, default=1,\n\thelp=\"whether or not output frame should be displayed\")\nargs = vars(ap.parse_args())\n'''\n\n# load the COCO class labels our YOLO model was trained on\nlabelsPath = os.path.sep.join([config.MODEL_PATH, \"coco.names\"])\nLABELS = open(labelsPath).read().strip().split(\"\\n\")\n\n# derive the paths to the YOLO weights and model configuration\nweightsPath = os.path.sep.join([config.MODEL_PATH, \"yolov3.weights\"])\nconfigPath = os.path.sep.join([config.MODEL_PATH, \"yolov3.cfg\"])\n\n# load our YOLO object detector trained on COCO dataset (80 classes)\nprint(\"[INFO] loading YOLO from disk...\")\nnet = cv2.dnn.readNetFromDarknet(configPath, weightsPath)\n\n# check if we are going to use GPU\nif config.USE_GPU:\n    # set CUDA as the preferable backend and target\n    print(\"[INFO] setting preferable backend and target to CUDA...\")\n    net.setPreferableBackend(cv2.dnn.DNN_BACKEND_OPENCV)\n    net.setPreferableTarget(cv2.dnn.DNN_TARGET_OPENCL_FP16)\n\n# determine only the *output* layer names that we need from YOLO\nln = net.getLayerNames()\nln = [ln[i[0] - 1] for i in net.getUnconnectedOutLayers()]\n\n# initialize the video stream and pointer to output video file\nprint(\"[INFO] accessing video stream...\")\nvs = cv2.VideoCapture(input_data if input_data else 0)\nwriter = None\n\n# loop over the frames from the video stream\nwhile True:\n    # read the next frame from the file\n    (grabbed, frame) = vs.read()\n\n    # if the frame was not grabbed, then we have reached the end\n    # of the stream\n    if not grabbed:\n        break\n\n    # resize the frame and then detect people (and only people) in it\n    frame = imutils.resize(frame, width=700)\n    results = detect_people(frame, net, ln, personIdx=LABELS.index(\"person\"))\n\n    # initialize the set of indexes that violate the minimum social\n    # distance\n    violate = set()\n\n    # ensure there are *at least* two people detections (required in\n    # order to compute our pairwise distance maps)\n    if len(results) >= 2:\n        # extract all centroids from the results and compute the\n        # Euclidean distances between all pairs of the centroids\n        centroids = np.array([r[2] for r in results])\n        D = dist.cdist(centroids, centroids, metric=\"euclidean\")\n\n        # loop over the upper triangular of the distance matrix\n        for i in range(0, D.shape[0]):\n            for j in range(i + 1, D.shape[1]):\n                # check to see if the distance between any two\n                # centroid pairs is less than the configured number\n                # of pixels\n                if D[i, j] < config.MIN_DISTANCE:\n                    # update our violation set with the indexes of\n                    # the centroid pairs\n                    violate.add(i)\n                    violate.add(j)\n\n    # loop over the results\n    for (i, (prob, bbox, centroid)) in enumerate(results):\n        # extract the bounding box and centroid coordinates, then\n        # initialize the color of the annotation\n        (startX, startY, endX, endY) = bbox\n        (cX, cY) = centroid\n        color = (0, 255, 0)\n\n        # if the index pair exists within the violation set, then\n        # update the color\n        if i in violate:\n            color = (0, 0, 255)\n\n        # draw (1) a bounding box around the person and (2) the\n        # centroid coordinates of the person,\n        cv2.rectangle(frame, (startX, startY), (endX, endY), color, 2)\n        cv2.circle(frame, (cX, cY), 5, color, 1)\n\n    # draw the total number of social distancing violations on the\n    # output frame\n    text = \"Social Distancing Violations: {}\".format(len(violate))\n    cv2.putText(frame, text, (10, frame.shape[0] - 25),\n        cv2.FONT_HERSHEY_SIMPLEX, 0.85, (0, 0, 255), 3)\n\n    # check to see if the output frame should be displayed to our\n    # screen\n    #if args[\"display\"] > 0:\n    if False:\n        # show the output frame\n        cv2.imshow(\"Frame\", frame)\n        key = cv2.waitKey(1) & 0xFF\n\n        # if the `q` key was pressed, break from the loop\n        if key == ord(\"q\"):\n            break\n\n    # if an output video file path has been supplied and the video\n    # writer has not been initialized, do so now\n    if output_data != \"\" and writer is None:\n        # initialize our video writer\n        fourcc = cv2.VideoWriter_fourcc(*\"MJPG\")\n        writer = cv2.VideoWriter(output_data, fourcc, 25, (frame.shape[1], frame.shape[0]), True)\n\n    # if the video writer is not None, write the frame to the output\n    # video file\n    if writer is not None:\n        writer.write(frame)\nprint('[INFO] done')","718a1a35":"# play video on kaggle\nfrom IPython.display import HTML\nfrom base64 import b64encode\nvid1 = open('\/kaggle\/working\/output.avi','rb').read()\ndata_url = \"data:video\/avi;base64,\" + b64encode(vid1).decode()\nHTML(\"\"\"\n<video width=600 controls>\n      <source src=\"%s\" type=\"video\/avi\">\n<\/video>\n\"\"\" % data_url)","5dfd2cb8":"# **Detection**","232c7d62":"# **Social Distancing Config**","0d63d19c":"# **Social Distance Detector**"}}