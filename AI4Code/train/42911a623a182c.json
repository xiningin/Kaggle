{"cell_type":{"9e0a9770":"code","bf9f8d10":"code","4c82fbd1":"code","7e93a249":"code","57acfe10":"code","f8e5cdbb":"code","f7b961ad":"code","d4931ad2":"code","8a4e91a4":"code","195bb411":"code","f807d8f4":"code","a34f9f21":"code","b60ad34e":"code","6f7a8692":"code","860a040c":"code","30a3408f":"code","3f5c92c0":"code","a1518add":"code","bf9514f7":"code","752827ac":"code","c42e8f01":"code","6e64c076":"code","dbdc15b7":"code","63e9b8c3":"code","d26c04e1":"code","dbdc56e2":"code","3c0013d2":"code","9b345d1a":"code","3e7470aa":"code","f20ed9a6":"code","061d18a2":"code","93208216":"code","ff50b4b1":"code","af89eb52":"code","69030982":"code","6ef30375":"code","f4363f36":"code","cd524ae9":"code","eb5102d8":"code","f530fe0e":"code","dde60702":"code","7753da6e":"code","40613c84":"code","4a8caf83":"code","dbc95d55":"code","5f53700a":"code","78cf32b7":"code","20db5032":"code","4bb5ea60":"code","0205f6f1":"code","565fc137":"code","cca3b899":"code","d261497b":"code","0a4a0f37":"code","02cf3dd9":"markdown","da022633":"markdown","d59da25b":"markdown","5fb9391b":"markdown","3dc54368":"markdown","1a31b85e":"markdown","d721c545":"markdown","2623e5b0":"markdown","d7d22af7":"markdown","e16ba3f2":"markdown","c522c850":"markdown","e02b57a9":"markdown","d8d238cf":"markdown","e7cd04db":"markdown","9222b098":"markdown","70dec94c":"markdown","da0d06b4":"markdown","a53629db":"markdown","bff7a77a":"markdown","da3564b8":"markdown","465ff448":"markdown","e6ab0fc2":"markdown","8574ed58":"markdown","a93ff721":"markdown","2f338083":"markdown","97b5ebdf":"markdown","5672aef1":"markdown","8b408818":"markdown","1ee4568f":"markdown","698b123d":"markdown","ed17138b":"markdown","e6ada43d":"markdown","2fb8ca65":"markdown","e44cc979":"markdown","e2105c29":"markdown","6e4456df":"markdown","6ec172ff":"markdown","0f355103":"markdown","b3b4a05b":"markdown","fc739b8d":"markdown"},"source":{"9e0a9770":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","bf9f8d10":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as mn\nimport plotly.graph_objects as go","4c82fbd1":"data_filepath = \"..\/input\/d\/sobhanmoosavi\/us-accidents\/US_Accidents_Dec20_updated.csv\"\ndata = pd.read_csv(data_filepath)\ndata.head()","7e93a249":"data.info()","57acfe10":"data.columns","f8e5cdbb":"data.describe().T","f7b961ad":"# int, float and boolean data\nprint(data.count(numeric_only=True))\nprint(\"Total No. of Numerical Columns:\", len(data.count(numeric_only=True)))","d4931ad2":"missing_values = data.isna().sum().sort_values(ascending=False)\nmissing_percentage = missing_values[missing_values!=0]\/len(data)*100\nprint(\" Percentage of Missing Values \\n\", missing_percentage)","8a4e91a4":"null_cols = [i for i in data.columns if data[i].isnull().any()]\nprint(null_cols)","195bb411":"mn.matrix(data[null_cols]);","f807d8f4":"new_data_a = data.drop(columns=[\"End_Lng\", \"End_Lat\", \"Number\"], axis=0)\nnew_data_b = new_data_a.dropna(subset = ['Visibility(mi)','Weather_Condition','Humidity(%)',\n                                         'Temperature(F)','Wind_Direction','Pressure(in)',\n                                         'Weather_Timestamp','Airport_Code','Timezone',\n                                         'Zipcode','Sunrise_Sunset','Civil_Twilight',\n                                         'Nautical_Twilight','Astronomical_Twilight',\n                                         'City','Description'])\n\ndataf = new_data_b.drop(columns = 'ID', axis=0)","a34f9f21":"dataf[\"Wind_Chill(F)\"] = dataf['Wind_Chill(F)'].fillna(dataf['Wind_Chill(F)'].mean())\ndataf[\"Precipitation(in)\"] = dataf['Precipitation(in)'].fillna(dataf['Precipitation(in)'].mean())\ndataf[\"Wind_Speed(mph)\"] = dataf['Wind_Speed(mph)'].fillna(dataf['Wind_Speed(mph)'].mean())","b60ad34e":"final_data = dataf.reindex(copy=True)\nfinal_data.head()","6f7a8692":"state_counts = final_data[\"State\"].value_counts()\nfig = go.Figure(data=go.Choropleth(locations=state_counts.index, z=state_counts.values.astype(float), locationmode=\"USA-states\", colorscale=\"turbo\"))\nfig.update_layout(title_text=\"Number of Accidents for each State\", geo_scope=\"usa\")\nfig.show()","860a040c":"print(\"State Code: \", final_data.State.unique())\nprint(\"Total No. of State in Dataset: \", len(final_data.State.unique()))","30a3408f":"fig, ax = plt.subplots(figsize = (20,5))\nc = sns.countplot(x=\"State\", data=final_data, orient = 'v', palette = \"crest_r\", order = final_data['State'].value_counts().index)\nc.set_title(\"States with No. of Accidents\");","3f5c92c0":"print(\"City Code: \", final_data.City.unique())\nprint(\"Total No. of Cities in Dataset: \", len(final_data.City.unique()))","a1518add":"fig, ax = plt.subplots(figsize = (20,5))\nc = sns.countplot(x=\"City\", data=final_data, order=final_data.City.value_counts().iloc[:50].index, orient = 'v', palette = \"crest_r\")\nc.set_title(\"Top 50 Cities with Highest No. of Accidents\")\nc.set_xticklabels(c.get_xticklabels(), rotation=90)\nplt.show()","bf9514f7":"final_data.Start_Time = pd.to_datetime(final_data.Start_Time)\nfinal_data.Start_Time[0]","752827ac":"final_data['Month'] = final_data['Start_Time'].dt.month\nfinal_data['Year'] = final_data['Start_Time'].dt.year\nfinal_data['Hour'] = final_data['Start_Time'].dt.hour\nfinal_data['Weekday'] = final_data['Start_Time'].dt.weekday\n#yearly data subset \ndata_2016 = final_data[final_data.Start_Time.dt.year == 2016]\ndata_2017 = final_data[final_data.Start_Time.dt.year == 2017]\ndata_2018 = final_data[final_data.Start_Time.dt.year == 2018]\ndata_2019 = final_data[final_data.Start_Time.dt.year == 2019]\ndata_2020 = final_data[final_data.Start_Time.dt.year == 2020]\ndata_2017_2019 = final_data[(final_data[\"Year\"] >= 2017) & (final_data[\"Year\"] <= 2019)]","c42e8f01":"fig, ax = plt.subplots(figsize = (10,5))\nc = sns.countplot(x=\"Year\", data=final_data, orient = 'v', palette = \"crest\")\nplt.annotate('Data Not Available',xy=(-0.4,500000), fontsize=11)\nc.set_title(\"No. of Accidents in Year\")\nfor i in ax.patches:\n    count = '{:,.0f}'.format(i.get_height())\n    x = i.get_x()+i.get_width()-0.60\n    y = i.get_height()+10000\n    ax.annotate(count, (x, y))\nplt.show()","6e64c076":"fig, ax = plt.subplots(figsize = (10,5))\nc = sns.countplot(x=\"Month\", data=data_2016, orient = 'v', palette = \"crest\")\nplt.annotate('Data Not Available',xy=(1,10000), fontsize=11)\nc.set_title(\"No. of Accidents in Months of Year 2016\")\nplt.show()","dbdc15b7":"fig, ax = plt.subplots(figsize = (10,5))\nc = sns.countplot(x=\"Month\", data=data_2017_2019, orient = 'v', palette = \"crest\")\nc.set_title(\"No. of Accidents in Month of Year 2017 to 2019\")\nplt.show()","63e9b8c3":"fig, ax = plt.subplots(figsize = (10,5))\nc = sns.countplot(x=\"Month\", data=data_2020, orient = 'v', palette = \"crest\")\nplt.annotate('Covid-19 Pandemic',xy=(2,120000), fontsize=12)\nplt.annotate(\"[\",xy=(0,0),xytext=(1.9,120000),arrowprops={'arrowstyle':'-|>'}, fontsize=12)\nplt.annotate(\"]\",xy=(10,0),xytext=(4.5,120000),arrowprops={'arrowstyle':'-|>'}, fontsize=12)\nc.set_title(\"No. of Accidents in Month of Year 2020\")\nplt.show()","d26c04e1":"fig, ax = plt.subplots(figsize = (15,5))\nc = sns.countplot(x=data_2016.Start_Time.dt.isocalendar().week, data=data_2016, orient = 'v', palette = \"crest\")\nplt.annotate('Data Not Available',xy=(3,2500), fontsize=11)\nc.set_title(\"No. of Accidents in Month of Year 2016\")\nplt.show()","dbdc56e2":"fig, ax = plt.subplots(figsize = (15,5))\nc = sns.countplot(x=data_2017_2019.Start_Time.dt.isocalendar().week, data=data_2017_2019, orient = 'v', palette = \"crest\")\nc.set_title(\"No. of Accidents in Month of Year 2020\")\nplt.show()","3c0013d2":"fig, ax = plt.subplots(figsize = (15,5))\nc = sns.countplot(x=data_2020.Start_Time.dt.isocalendar().week, data=data_2020, orient = 'v', palette = \"crest\")\nplt.annotate('Covid-19 Pandemic',xy=(9,25000), fontsize=12)\nplt.annotate(\"[\",xy=(0,0),xytext=(8.5,25000),arrowprops={'arrowstyle':'-|>'}, fontsize=12)\nplt.annotate(\"]\",xy=(41,0),xytext=(16.5,25000),arrowprops={'arrowstyle':'-|>'}, fontsize=12)\nc.set_title(\"No. of Accidents in Month of Year 2020\")\nplt.show()","9b345d1a":"fig, ax = plt.subplots(figsize = (10,5))\nc = sns.countplot(x=\"Weekday\", data=final_data, orient = 'v', palette = \"crest_r\")\nplt.annotate('Weekdays',xy=(2,150000), fontsize=12)\nplt.annotate('Weekend',xy=(5.1,150000), fontsize=12)\nc.set_title(\"No. of Accidents in Weekdays\")\nplt.show()","3e7470aa":"fig, ax = plt.subplots(figsize = (10,5))\nsns.countplot(x=\"Hour\", data=final_data, orient = 'v', palette = \"icefire_r\")\nplt.annotate('Morning Peak',xy=(6,105000), fontsize=12)\nplt.annotate('Evening Peak',xy=(15,105000), fontsize=12)\nplt.annotate('go to work',xy=(6,0),xytext=(3,95000),arrowprops={'arrowstyle':'-|>'}, fontsize=12)\nplt.annotate('get off work',xy=(17,0),xytext=(19,95000),arrowprops={'arrowstyle':'-|>'}, fontsize=12)\nplt.show()","f20ed9a6":"fig, ax = plt.subplots(figsize = (10,5))\nc = sns.countplot(x=\"Severity\", data=final_data, orient = 'v', palette = \"crest_r\")\nc.set_title(\"Degree of Severity\")\nfor i in ax.patches:\n    count = \"{:.2%}\".format(i.get_height()\/len(final_data.Severity))\n    x = i.get_x()+i.get_width()-0.50\n    y = i.get_height()+20000\n    ax.annotate(count, (x, y))\nplt.show()","061d18a2":"df_state = final_data.groupby('State').sum('Severity')[['Severity']]\ndf_state = df_state.reset_index().sort_values('Severity', ascending = False)[:50]\nfig, ax = plt.subplots(figsize = (20,5))\nc = sns.barplot(x = 'State', y = 'Severity', data = df_state, orient = 'v', palette = \"crest_r\")\nc.set_title(\"Top State with Highest Severity\")\nplt.show()","93208216":"df_city = final_data.groupby('City').sum('Severity')[['Severity']]\ndf_city = df_city.reset_index().sort_values('Severity', ascending = False)[:50]\nfig, ax = plt.subplots(figsize = (20,5))\nc = sns.barplot(x = 'City', y = 'Severity', data = df_city, orient = 'v', palette = \"crest_r\")\nc.set_title(\"Top 50 Cities with Highest Severity\")\nc.set_xticklabels(c.get_xticklabels(), rotation=90)\nplt.show()","ff50b4b1":"weather = final_data.iloc[:, 17:26]\nweather['Severity'] = final_data['Severity']\nweather.head()","af89eb52":"plt.figure(figsize=(10,5))\nsns.boxplot(data=weather, orient=\"h\", palette=\"Set2\")","69030982":"def remove_outliers(df,name='feature'):\n    #Store the 25th and 75th percentile \n    q25,q75=np.percentile(df[name],25),np.percentile(df[name],75)\n    #Calculate the Interquartile range\n    iqr_cut=1.5*(q75-q25)\n    #Create variable of lower and upper cut\n    lower,upper=q25-iqr_cut,q75+iqr_cut\n    #Remove the outliers\n    df=df[(df[name] >= lower) & (df[name] <= upper)]\n    return df","6ef30375":"weather = remove_outliers(weather,name='Temperature(F)')\nweather = remove_outliers(weather,name='Wind_Chill(F)')\nweather = remove_outliers(weather,name='Humidity(%)')\nweather = remove_outliers(weather,name='Pressure(in)')\nweather = remove_outliers(weather,name='Wind_Speed(mph)')","f4363f36":"plt.figure(figsize=(10,5))\nsns.boxplot(data=weather, orient=\"h\", palette=\"Set2\")","cd524ae9":"print(\"Unique Values : \",weather[\"Temperature(F)\"].nunique())\nprint(\"Missing Values : \",weather[\"Temperature(F)\"].isna().sum())","eb5102d8":"sns.displot(weather, x=\"Temperature(F)\", hue=\"Severity\",kind='kde', palette=\"Set2\", height=5, aspect=2);","f530fe0e":"print(\"Unique Values : \",weather[\"Wind_Chill(F)\"].nunique())\nprint(\"Missing Values : \",weather[\"Wind_Chill(F)\"].isna().sum())\nprint(\"Mean : \",weather[\"Wind_Chill(F)\"].mean())","dde60702":"sns.displot(weather, x=\"Wind_Chill(F)\", hue=\"Severity\",kind='kde', palette=\"Set2\", height=5, aspect=2);","7753da6e":"print(\"Unique Values : \",weather[\"Humidity(%)\"].nunique())\nprint(\"Missing Values : \",weather[\"Humidity(%)\"].isna().sum())","40613c84":"sns.displot(weather, x=\"Humidity(%)\", hue=\"Severity\",kind='kde', palette=\"Set2\", height=5, aspect=2);","4a8caf83":"print(\"Missing Values : \",weather[\"Pressure(in)\"].isna().sum())","dbc95d55":"sns.displot(weather, x=\"Pressure(in)\", hue=\"Severity\",kind='kde', palette=\"Set2\", height=5, aspect=2);","5f53700a":"print(\"Unique Values : \",weather[\"Visibility(mi)\"].nunique())\nprint(\"Missing Values : \",weather[\"Visibility(mi)\"].isna().sum())","78cf32b7":"sns.displot(weather, x=\"Visibility(mi)\", hue=\"Severity\",kind='kde', palette=\"Set2\", height=5, aspect=2);","20db5032":"print(\"Unique Cat. : \",weather[\"Wind_Direction\"].unique())\nprint(\"Unique Values : \",weather[\"Wind_Direction\"].nunique())","4bb5ea60":"f,ax=plt.subplots(2,figsize=(16,10))\nsns.countplot(x=\"Wind_Direction\",\n              data=weather,\n              order=weather.Wind_Direction.value_counts().iloc[0:12].index,\n              palette=\"Set2\",\n              ax=ax[0])\nsns.countplot(x=\"Wind_Direction\",\n              data=weather,\n              order=weather.Wind_Direction.value_counts().iloc[12:24].index,\n              palette=\"Set2\",\n              ax=ax[1])","0205f6f1":"print(\"Unique Values : \",weather[\"Wind_Speed(mph)\"].nunique())","565fc137":"sns.displot(weather, x=\"Wind_Speed(mph)\", hue=\"Severity\",kind='kde', palette=\"Set2\", height=5, aspect=2);","cca3b899":"f,ax=plt.subplots(5,figsize=(25,16))\nsns.countplot(x=\"Weather_Condition\",\n              data=weather,\n              order=weather.Weather_Condition.value_counts().iloc[0:10].index,\n              palette=\"Set2\",\n              ax=ax[0])\nsns.countplot(x=\"Weather_Condition\",\n              data=weather,\n              order=weather.Weather_Condition.value_counts().iloc[10:20].index,\n              palette=\"Set2\",\n              ax=ax[1])\nsns.countplot(x=\"Weather_Condition\",\n              data=weather,\n              order=weather.Weather_Condition.value_counts().iloc[20:30].index,\n              palette=\"Set2\",\n              ax=ax[2])\nsns.countplot(x=\"Weather_Condition\",\n              data=weather,\n              order=weather.Weather_Condition.value_counts().iloc[30:40].index,\n              palette=\"Set2\",\n              ax=ax[3])\nsns.countplot(x=\"Weather_Condition\",\n              data=weather,\n              order=weather.Weather_Condition.value_counts().iloc[40:50].index,\n              palette=\"Set2\",\n              ax=ax[4])","d261497b":"location = final_data.iloc[:, 26:39]\nlocation.head()","0a4a0f37":"f,ax=plt.subplots(4,3,figsize=(25,25))\nax[0,0] = location['Amenity'].value_counts().plot.pie(autopct='%1.1f%%',ax=ax[0,0],colors=[\"cornflowerblue\",\"salmon\"])\nax[0,0].set_title(\"Amenity\",fontweight =\"bold\")\nax[0,1] = location['Bump'].value_counts().plot.pie(autopct='%1.1f%%',ax=ax[0,1],colors=[\"cornflowerblue\",\"salmon\"])\nax[0,1].set_title(\"Bump\",fontweight =\"bold\")\nax[0,2] = location['Crossing'].value_counts().plot.pie(autopct='%1.1f%%',ax=ax[0,2],colors=[\"cornflowerblue\",\"salmon\"])\nax[0,2].set_title(\"Crossing\",fontweight =\"bold\")\nax[1,0] = location['Give_Way'].value_counts().plot.pie(autopct='%1.1f%%',ax=ax[1,0],colors=[\"cornflowerblue\",\"salmon\"])\nax[1,0].set_title(\"Give_Way\",fontweight =\"bold\")\nax[1,1] = location['Junction'].value_counts().plot.pie(autopct='%1.1f%%',ax=ax[1,1],colors=[\"cornflowerblue\",\"salmon\"])\nax[1,1].set_title(\"Junction\",fontweight =\"bold\")\nax[1,2] = location['No_Exit'].value_counts().plot.pie(autopct='%1.1f%%',ax=ax[1,2],colors=[\"cornflowerblue\",\"salmon\"])\nax[1,2].set_title(\"No_Exit\",fontweight =\"bold\")\nax[2,0] = location['Railway'].value_counts().plot.pie(autopct='%1.1f%%',ax=ax[2,0],colors=[\"cornflowerblue\",\"salmon\"])\nax[2,0].set_title(\"Railway\",fontweight =\"bold\")\nax[2,1] = location['Roundabout'].value_counts().plot.pie(autopct='%1.1f%%',ax=ax[2,1],colors=[\"cornflowerblue\",\"salmon\"])\nax[2,1].set_title(\"Roundabout\",fontweight =\"bold\")\nax[2,2] = location['Station'].value_counts().plot.pie(autopct='%1.1f%%',ax=ax[2,2],colors=[\"cornflowerblue\",\"salmon\"])\nax[2,2].set_title(\"Station\",fontweight =\"bold\")\nax[3,0] = location['Stop'].value_counts().plot.pie(autopct='%1.1f%%',ax=ax[3,0],colors=[\"cornflowerblue\",\"salmon\"])\nax[3,0].set_title(\"Stop\",fontweight =\"bold\")\nax[3,1] = location['Traffic_Calming'].value_counts().plot.pie(autopct='%1.1f%%',ax=ax[3,1],colors=[\"cornflowerblue\",\"salmon\"])\nax[3,1].set_title(\"Traffic_Calming\",fontweight =\"bold\")\nax[3,2] = location['Traffic_Signal'].value_counts().plot.pie(autopct='%1.1f%%',ax=ax[3,2],colors=[\"cornflowerblue\",\"salmon\"])\nax[3,2].set_title(\"Traffic_Signal\",fontweight =\"bold\")\nplt.show()","02cf3dd9":"## All Weeks of Year 2017 to 2019","da022633":"#  Data Handeling","d59da25b":"# US Accidents Analysis","5fb9391b":"- Total No. of State in Dataset:  49\n- There are 50 states in US\n- New York not in dataset","3dc54368":"#### Numerical Columns to deal with","1a31b85e":"Drop Rows w.r.t to columns having least percentage of missing values (do not effect much to data with 4.2 million records)","d721c545":"# Monthly Analysis of Accidents","2623e5b0":"## All Weeks of Year 2016 [Data N\/A]","d7d22af7":"## Wind Direction","e16ba3f2":"### Loading Dataset into Pandas Dataframe","c522c850":"Getting List of Columns Having Null Values","e02b57a9":"## All Weeks of Year 2020 [CoVID-19 Pandemic]","d8d238cf":"Drop Four Columns [End_Lng, End_Lat, Number, TMC ] having high no. of Missing Values","e7cd04db":"#### Columns in dataframe","9222b098":"# Yearly Analysis of Accidents","70dec94c":"### Information","da0d06b4":"- California (CA) is the 3rd most largest state of US after Texas (TX) and Alaska (AL)\n- Also California (CA) is the most populated among all, followed by Texas (TX)\n- Alaska (AL) is the largest state but least populated state at 48th rank","a53629db":"## Pressure(in)","bff7a77a":"# Location Based Analysis of Accidents","da3564b8":"#### Statistical Description of each numerical column","465ff448":"## Wind Speed(mph)","e6ab0fc2":"- Total No. of Cities in Dataset:  11537\n- There were 19,502 incorporated places registered in the United States","8574ed58":"#### Related Columns","a93ff721":"# Weather Stimuli Impact on Accidents","2f338083":"# Exploratory Data Analysis","97b5ebdf":"## Outlier Cleaning","5672aef1":"## Wind Chill(F)","8b408818":"## Severity Based Analysis of Accidents","1ee4568f":"Checking Missing Values Pattern in Dataframe","698b123d":"## Visibility(mi)","ed17138b":"## Humidity(%)","e6ada43d":"## Weather Condition","2fb8ca65":"#### Related Columns","e44cc979":"# Location Impact on Accidents","e2105c29":"# Weekly Analysis of Accidents","6e4456df":"Percentage of Missing Values","6ec172ff":"## Temperature(F)","0f355103":"# Timestamp Tweaking","b3b4a05b":"# Importing Required Libraries\n","fc739b8d":"## Weekdays"}}