{"cell_type":{"54a7c32a":"code","74b2b5cc":"code","4e93e9e1":"code","b7e03e3c":"code","0fbd69ac":"code","b636847f":"code","2e201d39":"code","956ee31d":"code","614c0102":"code","0e41d102":"code","d4243f20":"code","6d0160dc":"code","f1339f0d":"code","ed94f9a0":"code","07a4ae47":"code","9c68df1f":"code","2bb7a9d0":"code","151b67f6":"code","3043aa7d":"code","2206f01f":"code","905a4453":"code","46ea5f90":"code","36c733c9":"code","29ee5091":"code","22828746":"code","568509a6":"code","07b1f679":"code","1b2a7041":"code","02dc667f":"code","026da3f8":"code","4f9746c3":"code","d34ad33b":"code","f0c8d263":"code","e7a80d5f":"code","44f47c00":"code","57ac0c70":"code","992164f2":"code","d81e330f":"code","b0fc0319":"code","b58d3b74":"code","d817a96d":"code","7f20d02d":"code","578809d2":"code","2d9546cb":"code","cc653348":"code","c20a5fbd":"code","910bf4c7":"code","8d8d0f28":"code","e194242f":"code","2fa17044":"code","2cb77ca3":"code","1d08fc7d":"code","7df8e756":"code","f254d027":"code","3ed46d79":"code","73037495":"code","03bf3782":"code","5433dffe":"code","cbc048e1":"code","e459e073":"code","5d4855f2":"code","e05de1a6":"code","34f69120":"code","7044f059":"code","545929b7":"code","69507f50":"code","496c9560":"code","6934200b":"code","5b06c490":"markdown","2a49ce2f":"markdown","6613c059":"markdown","601d8d7a":"markdown","d3ba1685":"markdown","3be96696":"markdown","c5ffe946":"markdown","a61d5c35":"markdown","62c2471a":"markdown","b5353f10":"markdown","f42ac41c":"markdown","4f2f9a5a":"markdown","7966e98c":"markdown","ce01082d":"markdown","2dfcb29a":"markdown","664d61e1":"markdown","fb4b69ac":"markdown"},"source":{"54a7c32a":"# Import all necessary Libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n","74b2b5cc":"#Step2: Import the Dataset\ndf=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')","4e93e9e1":"df.head()","b7e03e3c":"df.info()","0fbd69ac":"df.shape","b636847f":"with open('..\/input\/house-prices-advanced-regression-techniques\/data_description.txt','r') as f:\n    print(f.read())","2e201d39":"df.corr()['SalePrice'].sort_values()","956ee31d":"sns.scatterplot(data=df,x='OverallQual', y='SalePrice')\nplt.axhline(y=200000,color='r')\nplt.axhline(y=650000,color='r')","614c0102":"df[(df['OverallQual']>8) & (df['SalePrice']<200000)][['SalePrice', 'OverallQual']]\n","0e41d102":"df[(df['OverallQual']>8) & (df['SalePrice']>650000)][['SalePrice', 'OverallQual']]","d4243f20":"sns.scatterplot(data=df,x='GrLivArea', y='SalePrice')\nplt.axhline(y=200000, color='r')\nplt.axvline(x=4000, color='r')","6d0160dc":"df[(df['GrLivArea']>4000) & (df['SalePrice']>200000)][['SalePrice', 'GrLivArea']]","f1339f0d":"sns.scatterplot(data=df,x='GarageCars', y='SalePrice')\nplt.axhline(y=650000, color='r')\n","ed94f9a0":"df[df['SalePrice']>650000][['SalePrice', 'GarageCars']]","07a4ae47":"sns.lmplot(x='1stFlrSF',y='SalePrice',data=df) ","9c68df1f":"#Remove the outliers:\nindex_drop=df[df['SalePrice']>650000 ].index\ndf=df.drop(index_drop, axis=0)\nindex_drop1=df[(df['OverallQual']>8) & (df['SalePrice']<200000)].index\ndf=df.drop(index_drop1, axis=0)","2bb7a9d0":"df.corr()['SalePrice'].sort_values()","151b67f6":"df=df.drop('Id',axis=1)","3043aa7d":"#number of missing Data in each columns:\ndf.isnull().sum().sort_values()","2206f01f":"#The percent of missing data in any feature:\n100*(df.isnull().sum()\/len(df)).sort_values()","905a4453":"#Make a Function to calculate the percent of missing data in each columns (feature) and then sort it\ndef missing_percent(df):\n    nan_percent= 100*(df.isnull().sum()\/len(df))\n    nan_percent= nan_percent[nan_percent>0].sort_values()\n    return nan_percent","46ea5f90":"nan_percent= missing_percent(df)\nnan_percent","36c733c9":"plt.figure(figsize=(12,6),dpi=200)\nsns.barplot(x=nan_percent.index,y=nan_percent)\nplt.xticks(rotation=90)","29ee5091":"plt.figure(figsize=(12,6),dpi=200)\nsns.barplot(x=nan_percent.index,y=nan_percent)\nplt.xticks(rotation=90)\n#Set 1% threshold:\nplt.ylim(0,1)","22828746":"#columns with missing Data under 1%:\nnan_percent[nan_percent<1]","568509a6":"100\/len(df)","07b1f679":"#The index of a row with missing Data of Electrical:\ndf[df['Electrical'].isnull()]['Electrical']","1b2a7041":"#removing the row with missing Data of Electrical:\ndf=df.dropna(axis=0, subset=['Electrical'])","02dc667f":"nan_percent= missing_percent(df)\nplt.figure(figsize=(12,6),dpi=200)\nsns.barplot(x=nan_percent.index,y=nan_percent)\nplt.xticks(rotation=90)\n#Set 1% threshold:\nplt.ylim(0,1)","026da3f8":"#filling a missing Data with 0 for integer feature and None for object one:\ndf['MasVnrType']= df['MasVnrType'].fillna('None')\ndf['MasVnrArea']= df['MasVnrArea'].fillna(0)","4f9746c3":"nan_percent= missing_percent(df)\nplt.figure(figsize=(12,6),dpi=200)\nsns.barplot(x=nan_percent.index,y=nan_percent)\nplt.xticks(rotation=90)","d34ad33b":"bsm=['BsmtQual','BsmtCond','BsmtFinType1','BsmtExposure','BsmtFinType2']\nfor i in bsm:\n    print(type(i))","f0c8d263":"df[bsm]=df[bsm].fillna('None')","e7a80d5f":"nan_percent= missing_percent(df)\nplt.figure(figsize=(12,6),dpi=200)\nsns.barplot(x=nan_percent.index,y=nan_percent)\nplt.xticks(rotation=90)","44f47c00":"garage=['GarageType','GarageFinish','GarageQual','GarageCond']\ndf[garage]=df[garage].fillna('None')","57ac0c70":"#replace the amount of missing Data with mean of the GarageYrBlt:\ndf['GarageYrBlt']=df['GarageYrBlt'].fillna(value=df['GarageYrBlt'].mean())","992164f2":"nan_percent= missing_percent(df)\nplt.figure(figsize=(12,6),dpi=200)\nsns.barplot(x=nan_percent.index,y=nan_percent)\nplt.xticks(rotation=90)","d81e330f":"plt.figure(figsize=(8,12))\nsns.boxplot(data=df, x='LotFrontage', y='Neighborhood')","b0fc0319":"df.groupby('Neighborhood')['LotFrontage'].mean()","b58d3b74":"df['LotFrontage']=df.groupby('Neighborhood')['LotFrontage'].transform(lambda val: val.fillna(val.mean()))","d817a96d":"nan_percent= missing_percent(df)\nplt.figure(figsize=(12,6),dpi=200)\nsns.barplot(x=nan_percent.index,y=nan_percent)\nplt.xticks(rotation=90)","7f20d02d":"df['FireplaceQu']= df['FireplaceQu'].fillna('None')","578809d2":"nan_percent= missing_percent(df)\nplt.figure(figsize=(12,6),dpi=200)\nsns.barplot(x=nan_percent.index,y=nan_percent)\nplt.xticks(rotation=90)","2d9546cb":"df=df.drop(['Fence','Alley','MiscFeature','PoolQC'],axis=1)","cc653348":"nan_percent= missing_percent(df)\nnan_percent","c20a5fbd":"# A- Changing Numerical Columns to Categorical\ndf['MSSubClass']","910bf4c7":"df.info()","8d8d0f28":"df['MSSubClass'].unique()","e194242f":"#Convert to String:\ndf['MSSubClass']= df['MSSubClass'].apply(str)","2fa17044":"df.info()\n#or: df['MSSubClass'].dtype","2cb77ca3":"# B- Creating Dummy Variables:\ndf.select_dtypes(include='object')","1d08fc7d":"df_num= df.select_dtypes(exclude='object')\ndf_obj= df.select_dtypes(include='object')","7df8e756":"df_num.info()","f254d027":"df_obj.info()","3ed46d79":"# Converting:\ndf_obj= pd.get_dummies(df_obj, drop_first=True)","73037495":"df_obj.shape","03bf3782":"Final_df= pd.concat([df_num, df_obj], axis=1)\nFinal_df.head()","5433dffe":"Final_df.info()","cbc048e1":"from scipy.stats import norm\nplt.figure(figsize=(12,6))\nsns.distplot(Final_df['SalePrice'] , fit=norm);\nplt.figure(figsize=(12,6))\nsns.distplot(Final_df['SalePrice'],color='purple',hist_kws=dict(edgecolor='pink',linewidth=5,),bins=50)\nplt.axvline(x=(Final_df['SalePrice'].mean()), color='r')","e459e073":"Final_df['SalePrice'] = np.log1p(Final_df['SalePrice'])\n","5d4855f2":"from scipy.stats import norm\nplt.figure(figsize=(12,6))\nsns.distplot(Final_df['SalePrice'] , fit=norm);\nplt.figure(figsize=(12,6))\nsns.distplot(Final_df['SalePrice'],color='purple',hist_kws=dict(edgecolor='pink',linewidth=5,),bins=50)\nplt.axvline(x=(Final_df['SalePrice'].mean()), color='r')","e05de1a6":"#Determine the Features & Target Variable\nX=Final_df.drop('SalePrice',axis=1)\ny=Final_df['SalePrice']","34f69120":"#Split the Dataset to Train & Test\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)","7044f059":"#Train the Model\nfrom sklearn.linear_model import LinearRegression\nmodel=LinearRegression()\nmodel.fit(X_train, y_train)\npd.DataFrame(model.coef_ , X.columns ,columns=['coefcient'])","545929b7":"#predicting Test Data\ny_pred= model.predict(X_test)\npd.DataFrame({'Y_Test': y_test,'Y_Pred':y_pred})[:5]","69507f50":"#Evaluating the Model\nfrom sklearn import metrics\nMAE_linear=metrics.mean_absolute_error(y_test , y_pred)\nMSE_linear=metrics.mean_squared_error(y_test , y_pred)\nRMSE_linear=np.sqrt(MSE_linear)\npd.DataFrame([MAE_linear,MSE_linear,RMSE_linear], index=['MAE_linear','MSE_linear','RMSE_linear'],columns=['Quantity'])","496c9560":"#Residuals:\ntest_residual=y_test-y_pred\nsns.scatterplot(x=y_test,y=y_pred,color='green' ,s=200)\nplt.ylabel('y_pred')\nplt.xlabel('y_test')\nplt.title('bias of y')","6934200b":"sns.scatterplot(x=y_test,y=test_residual,s=200)\nplt.axhline(y=0,color='red',ls='--')","5b06c490":"**2-Dealing with Missing Data**","2a49ce2f":"# Starting Polynomial Model","6613c059":"we can see with removing outliers corrolations get improved.","601d8d7a":"**The folowing Dataset is about the price of a house in the Us and it Contains 1455 rows and 76 columns.**","d3ba1685":"This shows relations are linear.","3be96696":"\n# Linear Regression \nLet's begin to train out regression model! We will need to first split up our data into an X array that contains the features to train on, and a y array with the target variable, in this case the Price column. ","c5ffe946":"It will be study in the next notebook","a61d5c35":"# finding outliers:","62c2471a":"It shows Electrical has got just 1 row missing Data.","b5353f10":"**3-Dealing with Categorical Data**","f42ac41c":"we predict a y quantity for each y_test data and then compare it with the real value of its label to understand how much the model is aqurated.","4f2f9a5a":"There is no more missing Data","7966e98c":"The plot shows intenses are choosed accidently from all parts and doesnt have specific pattern so the model works well.","ce01082d":"As you see the sale price value is right skewed. We need to make this normal distributed. ","2dfcb29a":"**1- Dealing with Outliers**","664d61e1":"This time we split Datas to train and test ,building a model on train datas and evaluating the model in test datas.","fb4b69ac":"# Starting a Linear Regression model"}}