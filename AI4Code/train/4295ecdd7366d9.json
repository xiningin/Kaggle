{"cell_type":{"d544ac1c":"code","84cc0ffd":"code","aded9f70":"code","914a594c":"code","59144256":"code","bd7d6534":"code","1a8087cd":"code","6c7d4633":"code","0adf98e8":"code","15aab5f6":"code","50e6cd5f":"code","1ce5582e":"code","d5800604":"code","9e16af7b":"code","fb053c3a":"code","c62c0217":"code","48a74aa8":"code","2ae1f769":"code","11d18fc4":"code","c56d8fcf":"code","44697508":"code","ba7e3f7e":"code","ba324233":"code","cb80f238":"code","65a321e9":"code","d89376c8":"code","5024b03a":"code","a7cd5e32":"code","b9f23548":"markdown","d099c3d4":"markdown","e07255b3":"markdown","09375e54":"markdown","d5a111d8":"markdown","61cf8974":"markdown","fe775749":"markdown"},"source":{"d544ac1c":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport os\nimport warnings\nprint(os.listdir(\"..\/input\"))\n\nwarnings.filterwarnings('ignore')\npd.options.display.float_format = '{:20,.2f}'.format\n%matplotlib inline","84cc0ffd":"data = pd.read_csv(\"..\/input\/road-weather-information-stations.csv\", parse_dates=[2])","aded9f70":"data = data[(data.DateTime.dt.year ==2015)]","914a594c":"data.shape","59144256":"data.head()","bd7d6534":"data.info()","1a8087cd":"data.describe()","6c7d4633":"data.StationName.value_counts()","0adf98e8":"data.StationLocation.value_counts()","15aab5f6":"data = data.set_index(\"DateTime\", drop=False)\ndata[\"year\"] = data.DateTime.dt.year\ndata[\"month\"] = data.DateTime.dt.month\ndata[\"day\"] = data.DateTime.dt.day","50e6cd5f":"data.shape","1ce5582e":"data.head()","d5800604":"dictionaries_stationlocation = data[\"StationLocation\"].apply(lambda x: eval(x))","9e16af7b":"data.drop(\"StationLocation\", axis=1, inplace=True)","fb053c3a":"def downcast_dtypes(df):   \n    # Select columns to downcast\n    float_cols = [c for c in df if df[c].dtype == \"float64\"]\n    int_cols =   [c for c in df if df[c].dtype == \"int64\"]\n    df[float_cols] = df[float_cols].astype(np.float32)\n    df[int_cols]   = df[int_cols].astype(np.int32)\n    return df","c62c0217":"data = downcast_dtypes(data)","48a74aa8":"data[\"longitude\"] = dictionaries_stationlocation.apply(lambda x: x[\"longitude\"])","2ae1f769":"data[\"latitude\"] = dictionaries_stationlocation.apply(lambda x: x[\"latitude\"])","11d18fc4":"data[\"latitude\"] = data[\"latitude\"].astype(np.float32)\ndata[\"longitude\"] = data[\"longitude\"].astype(np.float32)","c56d8fcf":"dictionaries_stationlocation = 0","44697508":"data = downcast_dtypes(data)","ba7e3f7e":"data.head()","ba324233":"data_feb = data[data.month==2].groupby([\"StationName\",pd.Grouper(freq='D')])[\"AirTemperature\",\"RoadSurfaceTemperature\"].mean()","cb80f238":"data_feb.reset_index(inplace=True)\ndata_feb.set_index(\"DateTime\", inplace=True)","65a321e9":"stations =  data_feb.StationName.unique()\nstations","d89376c8":"import plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly import tools\n\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode()","5024b03a":"scatter_list = []\nsubtitles = ()\nfor index, item in enumerate(stations):\n    subtitles = subtitles + (item,)\n\nprint(subtitles)\nfig = tools.make_subplots(rows=10, cols=1,\n                          subplot_titles=subtitles,shared_xaxes=True)\n\n\n# Create The lineplots  for each Station\nfor index, item in enumerate(stations):\n    line = go.Scatter(x=data_feb[data_feb[\"StationName\"]==item].index, \n                       y=data_feb[data_feb[\"StationName\"]==item].AirTemperature,    \n                       mode = 'lines+markers',\n                       name = item,\n                      marker = dict(\n                      size = 3,\n                      line = dict(\n                                width = 2\n                              )\n                            )\n                      )\n    scatter_list.append(line)\n\n# place each plot in a specific position\nnum_plots = len(scatter_list)\ncount = 0\nfor i in range(0,9):\n#    for j in range(0,2):\n    fig.append_trace(scatter_list[count],i+1, 1)\n    count = count+1\n    if count==num_plots:\n        break\n\nlayout = dict(title = \"Mean AirTemperature per Station daily\",\n              xaxis= dict(title= 'day',ticklen= 8,zeroline= False,ticks='outside',tickcolor='#000',\n                          rangeslider=dict(visible = True), type='date'),\n              yaxis = dict(title= 'day',ticklen= 8,zeroline= False,ticks='outside'))\n\nfig.layout.xaxis.update(rangeslider = dict(visible = True))\nfig.layout.update(height=1000, width=1200, title = \"Mean AirTemperature per Station daily\")\n# fig =  go.Figure(data=scatter_list, layout=layout)\niplot(fig)    ","a7cd5e32":"data_resume = data_feb.groupby(pd.Grouper(freq='D')).mean()\nline1 = go.Scatter(x=data_resume.index, \n                   y=data_resume.AirTemperature,    \n                   mode = 'lines+markers',\n                   name = 'AirTemperature',\n                   marker = dict(\n                       color = 'rgb(166, 206, 204)',\n                      size = 4,\n                      line = dict(\n                        color = 'rgb(118, 206, 249)',\n                        width = 1\n                      )\n                    )\n                  )\nline2 = go.Scatter(x=data_resume.index, \n                   y=data_resume.RoadSurfaceTemperature,    \n                   mode = 'lines',\n                   name = 'RoadSurfaceTemperature',\n                   marker = dict(\n                      color = 'rgb(232, 138, 62)',\n                      size = 4,\n                      line = dict(\n                        color = 'rgb(232, 167, 72)',\n                        width = 1\n                      )\n                    )\n                  \n                )\n\ndata_plotly=[line1, line2]\n\nlayout = dict(title = \"Temperature\",\n              xaxis= dict(title= 'day',ticklen= 8,zeroline= False,ticks='outside',tickcolor='#000',\n                          rangeslider=dict(visible = True), type='date'),\n              yaxis = dict(title= 'day',ticklen= 8,zeroline= False,ticks='outside'))\n\nfig =  go.Figure(data=data_plotly, layout=layout)\niplot(fig)","b9f23548":"# Subplots\nLet's create a plot for every *Station* in a grid","d099c3d4":"**What information is changing relatively quickly (every day or hour)?**\n> AirTemperature and RoadTemperature were recorded every minute since 2014 in each Station, So I would like to contrast the trend against other months and years.\n\n**What information is the most important to your mission?**\n> The AirTemperature and RoadTemperature in each Station\n\n**What will affect the choices you or others will need to make?**\n> Which are the months with highest temperature and if there is a relation of causasity between the time either month, specific weeks,  and the temperature (AirTemperature, RoadSurfaceTemperature).\n\n**What changes have you made?**\n> Track the temperature variability  thorugh the years.\n\n","e07255b3":"# It's always a good practice to extract some useful descriptive statistics before going deep\n- RoadSurfaceTemperature and AirTemperature seems to be in Farenheit, I couldn't find out a complete description of these fields.\n- RoadSurfaceTemperature and AirTemperature are very similar","09375e54":" Let's check the columns and their types","d5a111d8":" I'm using just **2015 ** of the data because I run out of memory too many times.","61cf8974":"**SeriesTime plot with plotly **\n ![](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/3\/37\/Plotly-logo-01-square.png\/220px-Plotly-logo-01-square.png)","fe775749":"# Seattle Road Weather - DashboardingPlotly\n![](https:\/\/assets.smoothradio.com\/2013\/30\/weather-1375260252-article-1.jpg)"}}