{"cell_type":{"c3bcdf40":"code","2ab2b57e":"code","0a80e196":"code","502c07af":"code","14cc5d50":"code","08bb08ed":"code","91ef4033":"code","41de2f47":"code","f787c6ac":"code","0853d159":"code","cfc517ab":"code","b43f1ac9":"code","80cd3c68":"code","68f7da57":"code","bcf575a6":"markdown","49c66258":"markdown","f689f4d2":"markdown","1ea01f84":"markdown","f7a29af7":"markdown","6fd7b1db":"markdown","c14ba565":"markdown","1c3db4c5":"markdown","2ccd9227":"markdown","8aaf1239":"markdown","d2f221e0":"markdown","d5343763":"markdown","e45f6019":"markdown","2e0b2d8d":"markdown","a5283ae6":"markdown","d52442b9":"markdown","a42e88f0":"markdown"},"source":{"c3bcdf40":"import numpy as np\nimport pandas as pd\nimport scipy.io\nimport scipy.optimize as opt\nimport matplotlib.pyplot as plt","2ab2b57e":"base_path = \"..\/input\/unsupervised-data\/\"\n\nmovies_mat = scipy.io.loadmat(base_path + 'ex8_movies.mat')\nparams_mat = scipy.io.loadmat(base_path + 'ex8_movieParams.mat')","0a80e196":"y = movies_mat['Y']\nr = movies_mat['R']\n\nX = params_mat['X']\ntheta = params_mat['Theta']\n\nn_users = params_mat['num_users'][0][0]\nn_movies = params_mat['num_movies'][0][0]\nn_features = params_mat['num_features'][0][0]","502c07af":"with open(base_path + 'movie_ids.txt', encoding='latin-1') as f:\n    content = f.readlines()\n    \nmovie_list = [' '.join(line.split()[1:]) for line in content]\nmovie_list[:5]","14cc5d50":"ratings = np.zeros((len(X), 1))\n\nnr_r = 5\nr_idx = np.random.randint(0, len(X), nr_r)\nrs = np.random.randint(1, 5, nr_r)\n\nfor i, ra in enumerate(r_idx):\n    ratings[ra] = rs[i]\n    print('Rated:%1.3f for %s' % (rs[i], movie_list[r_idx[i]]))","08bb08ed":"def cost_func(params, y, r, n_users, n_movies, n_features, lambda_r):\n    X = np.reshape(params[:n_movies*n_features], newshape=(n_movies, n_features), order='F')\n    theta = np.reshape(params[n_movies*n_features:], newshape=(n_users, n_features), order='F')\n    \n    C = np.subtract(X.dot(theta.T), y) ** 2\n    J = np.sum(np.sum(r*C)) \/ 2 + ((lambda_r\/2)*np.sum(np.sum(theta**2))) + ((lambda_r\/2)*np.sum(np.sum(X**2)))\n    \n    X_grad = np.zeros(X.shape)\n    theta_grad = np.zeros(theta.shape)\n    \n    # rows - movies\n    for i in range(n_movies):\n        idx = np.argwhere(r[i,:]==1).T[0]\n        X_grad[i,:] = np.subtract(X[i,:].dot(theta[idx,:].T), y[i,idx]).dot(theta[idx,:])\n       \n    # cols - users ratings\n    for j in range(n_users):\n        idx = np.argwhere(r[:,j]==1).T[0]\n        theta_grad[j,:] = np.subtract(X[idx,:].dot(theta[j,:].T), y[idx,j]).T.dot(X[idx,:])\n        \n    grad = np.hstack((X_grad.ravel(order='F'), theta_grad.ravel(order='F')))\n\n    return J, grad","91ef4033":"lambda_r = 10\n\nX = np.random.normal(size=(n_movies, n_features))\ntheta = np.random.normal(size=(n_users, n_features))\n\ninitial_params = np.hstack((X.ravel(order='F'), theta.ravel(order='F')))","41de2f47":"opt_results = opt.minimize(cost_func, initial_params, args=(y, r, n_users, n_movies, n_features, lambda_r),\n                           method='L-BFGS-B', jac=True, options={'maxiter':100})\ntheta = opt_results['x']\n\n# format\nX = np.reshape(theta[:n_movies*n_features], newshape=(n_movies, n_features), order='F')\ntheta = np.reshape(theta[n_movies*n_features:], newshape=(n_users, n_features), order='F')","f787c6ac":"def normalize_ratings(y, r):\n    y_mean = np.zeros((y.shape[0], 1))\n    y_norm = np.zeros(y.shape)\n    for i in range(y.shape[0]):\n        idx = np.argwhere(r[i,:]==1).T[0]\n        y_mean[i] = np.mean(y[i,idx], axis=0)\n        y_norm[i,idx] = np.subtract(y[i,idx], y_mean[i])\n    return y_norm, y_mean","0853d159":"_, y_mean = normalize_ratings(y, r)","cfc517ab":"def predict(X, y, theta):\n    p = X.dot(theta.T)\n    preds = p[:,0] + y.T[0]\n    return preds","b43f1ac9":"preds = predict(X, y_mean, theta)","80cd3c68":"top_ratings = ratings[np.where(ratings > 0)[0]].reshape(-1)\n\nprint('Top 5 ratings provided:')\nfor i,m in enumerate(np.array(movie_list)[np.where(ratings > 0)[0]].tolist()):\n    print(\"Rating:%6.3f, -  Movie:%45s\" % (top_ratings[i], m))","68f7da57":"top_nr = 5\ni = np.argsort(preds)[::-1][:top_nr]\npreds_ratings = preds[i]\npreds_movies = np.array(movie_list)[i]\n\nprint('Top 5 ratings predicted:')\nfor i, rating in enumerate(preds_ratings):\n    print(\"Rating:%6.3f, -  Movie:%45s\" % (rating, preds_movies[i]))","bcf575a6":"Coursera - [Machine Learning - Andrew NG](https:\/\/www.coursera.org\/learn\/machine-learning)","49c66258":"<h1 id=\"hyper\" style=\"color:brown; background:white; border:0.5px dotted red;\"> \n    <center>Hyperparameters\n        <a class=\"anchor-link\" href=\"#hyper\" target=\"_self\">\u00b6<\/a>\n    <\/center>\n<\/h1>","f689f4d2":"<h1 id=\"preds\" style=\"color:brown; background:white; border:0.5px dotted red;\"> \n    <center>Results\n        <a class=\"anchor-link\" href=\"#preds\" target=\"_self\">\u00b6<\/a>\n    <\/center>\n<\/h1>","1ea01f84":"### Forward\n\n![image.png](attachment:b9fd19ec-953c-4087-9971-b65bf9846800.png)","f7a29af7":"y : ratings (1 to 5)<br>\nR : user gave rating to movie (0 or 1)<br>\nX : feature vector<br>\nT : row corresponds to one parameter vector","6fd7b1db":"## Load dataset","c14ba565":"<h1 id=\"train\" style=\"color:brown; background:white; border:0.5px dotted red;\"> \n    <center>Training\n        <a class=\"anchor-link\" href=\"#train\" target=\"_self\">\u00b6<\/a>\n    <\/center>\n<\/h1>","1c3db4c5":"<h1 id=\"normalize\" style=\"color:brown; background:white; border:0.5px dotted red;\"> \n    <center>Normalize labels\n        <a class=\"anchor-link\" href=\"#normalize\" target=\"_self\">\u00b6<\/a>\n    <\/center>\n<\/h1>","2ccd9227":"<h1 id=\"predict\" style=\"color:brown; background:white; border:0.5px dotted red;\"> \n    <center>Predict function\n        <a class=\"anchor-link\" href=\"#predict\" target=\"_self\">\u00b6<\/a>\n    <\/center>\n<\/h1>","8aaf1239":"### Backward\n\n![image.png](attachment:c416c9a6-f3d9-4660-bddb-fe8e80f73ea2.png)","d2f221e0":"<div width=\"100%\">\n    <img width=\"100%\" src=\"https:\/\/storage.googleapis.com\/kaggle-datasets-images\/46259\/90016\/cb50fd3b236d01184fd23ad59af50b4f\/dataset-cover.jpg\"\/>\n<\/div>","d5343763":"<h1 id=\"dataset\" style=\"color:brown; background:white; border:0.5px dotted red;\"> \n    <center>Dataset\n        <a class=\"anchor-link\" href=\"#dataset\" target=\"_self\">\u00b6<\/a>\n    <\/center>\n<\/h1>","e45f6019":"<h1 id=\"pseudo\" style=\"color:brown; background:white; border:0.5px dotted red;\"> \n    <center>Pseudocode\n        <a class=\"anchor-link\" href=\"#pseudo\" target=\"_self\">\u00b6<\/a>\n    <\/center>\n<\/h1>","2e0b2d8d":"<h1 id=\"refs\" style=\"color:brown; background:white; border:0.5px dotted red;\"> \n    <center>References\n        <a class=\"anchor-link\" href=\"#refs\" target=\"_self\">\u00b6<\/a>\n    <\/center>\n<\/h1>","a5283ae6":"<h1 id=\"cost\" style=\"color:brown; background:white; border:0.5px dotted red;\"> \n    <center>Cost function\n        <a class=\"anchor-link\" href=\"#cost\" target=\"_self\">\u00b6<\/a>\n    <\/center>\n<\/h1>","d52442b9":"## Random ratings","a42e88f0":"## Movie list"}}