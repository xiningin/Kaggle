{"cell_type":{"d5af4e5d":"code","8b3fc3b8":"code","d3b5db57":"code","677baf96":"code","5560f3fe":"code","63a6e206":"code","e48e85f8":"code","15a260f0":"code","7c0fd505":"code","a42af1fb":"code","27339ded":"code","b1697d9d":"code","18fb3f1c":"code","bd396d53":"code","cd38d00d":"code","0f9e1b36":"code","1a30567a":"code","79857a4d":"code","fa6a7380":"code","2861e86f":"code","ff6ddf94":"code","7787269e":"code","f807cd3c":"code","7edcf131":"code","6d9cd5b7":"code","dbe3e91e":"code","eba9bc65":"code","94188d60":"code","439b13ab":"code","162f343f":"code","83d67eda":"code","ab84d6d3":"code","686178e9":"code","2b0a08f7":"code","20a3ac1a":"code","b364af36":"code","dafe527c":"code","1b0d61a3":"code","6e5aa8dd":"code","4885ccbb":"code","855ef93c":"code","384f0576":"code","b2ab59ee":"code","cf33bb1d":"code","915c8e09":"code","bafe9834":"code","340e4223":"code","a438282b":"code","1d67ecbc":"code","bb7b7f01":"code","6e550eaa":"code","c18d68fa":"code","789cd7d4":"code","bbb6eacd":"code","8f18fa16":"code","7550b959":"code","d8a6f4f1":"code","5ec3a9ed":"code","f1a14b9d":"code","3445c89e":"code","2d526a6d":"code","3f3793a5":"code","9104df3b":"code","0701413e":"code","6cf6770f":"code","6ffd2a86":"code","224dea53":"code","f0d81379":"code","98e32753":"code","c045685d":"code","f7597378":"code","767c8cc2":"code","565de743":"code","7fa2bc19":"code","9cc95eac":"code","8a20ac82":"code","6cc2dc38":"code","9c54375d":"code","d00d866f":"code","871c8e02":"code","a3cff8d9":"code","eac4a081":"code","275b26df":"code","a2290f03":"code","51090b50":"markdown","5d158ade":"markdown","085c6809":"markdown","56e6776b":"markdown","fa7dbb08":"markdown","297f443e":"markdown","0b9dea87":"markdown","338add25":"markdown","eb63a8dd":"markdown","a231d676":"markdown","844135f8":"markdown","57948b43":"markdown","69687613":"markdown","65c42568":"markdown","0d0b3d8d":"markdown","8dee8c01":"markdown","9f1ce5c6":"markdown","31f1605a":"markdown","5d86fcaf":"markdown","d535866e":"markdown","d970bb96":"markdown","16d63611":"markdown","a9ca2ced":"markdown","8045fce5":"markdown","1500efac":"markdown","165e3ab6":"markdown","1fc7e6d4":"markdown","867b4cd1":"markdown","2af08b1f":"markdown","803ad26e":"markdown","526e333e":"markdown","d050f9ad":"markdown","d4153e66":"markdown","996e96d4":"markdown","5d433870":"markdown","eb5f4e90":"markdown","15c34bab":"markdown","766b6264":"markdown","dc8fc002":"markdown","ef35ee2e":"markdown","479e92a3":"markdown","49bf2bd2":"markdown","36fab148":"markdown","c99a3b3f":"markdown","72104579":"markdown","1529da6c":"markdown"},"source":{"d5af4e5d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8b3fc3b8":"#Supressing Warnings (if any).\n\nimport warnings\nwarnings.filterwarnings('ignore')","d3b5db57":"#Importing the necessary libraries.\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport statsmodels.api as sm\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\n\nimport sklearn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.feature_selection import RFE\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_error\n\nfrom math import sqrt","677baf96":"#Loading the dataset.\ndf = pd.read_csv('..\/input\/bikesharing\/day.csv')","5560f3fe":"#Inspecting the first five rows.\ndf.head()","63a6e206":"#Checking the shape.\ndf.shape","e48e85f8":"df.info()","15a260f0":"df.describe()","7c0fd505":"df.columns","a42af1fb":"df.dtypes","27339ded":"df.values","b1697d9d":"df.isnull().values.any()","18fb3f1c":"df.drop_duplicates(subset=None,inplace=True)","bd396d53":"df.shape","cd38d00d":"df.rename(columns={'yr':'year','mnth':'month','hum':'humidity'},inplace=True)","0f9e1b36":"df.drop(['instant'],axis=1,inplace=True)","1a30567a":"df.drop(['dteday'],axis=1,inplace=True)","79857a4d":"df.drop(['casual','registered'],axis=1,inplace=True)","fa6a7380":"df.nunique()","2861e86f":"#Mapping the 'season' column.\ndf.season = df.season.map({1:'spring',2:'summer',3:'fall',4:'winter'})\ndf.season.unique()","ff6ddf94":"#Mapping the 'month' column.\ndf.month = df.month.map({1:'jan',2:'feb',3:'mar',4:'apr',5:'may',6:'jun',7:'jul',8:'aug',9:'sep',10:'oct',11:'nov',12:'dec'})\ndf.month.unique()","7787269e":"#Mapping the 'weekday' column.\ndf.weekday = df.weekday.map({0:'sun',1:'mon',2:'tue',3:'wed',4:'thu',5:'fri',6:'sat'})\ndf.weekday.unique()","f807cd3c":"#Mapping the 'weathersit' column.\ndf.weathersit = df.weathersit.map({1:'clear',2:'hazy',3:'light_rain',4:'heavy_rain'})\ndf.weathersit.unique()","7edcf131":"#Now lets have a look at the dataset.\ndf.head()","6d9cd5b7":"df.info()","dbe3e91e":"#Changing dtypes of numerical columns to their appropriate types.\ndf[['temp','atemp','humidity','cnt']] = df[['temp','atemp','humidity','cnt']].apply(pd.to_numeric)","eba9bc65":"df.info()","94188d60":"sns.pairplot(df,vars=['temp','atemp','humidity','windspeed','cnt'],diag_kind='kde')\nplt.show()","439b13ab":"plt.figure(figsize=(20,15))\nplt.subplot(2,4,1)\nsns.boxplot(x='year',y='cnt',data=df)\nplt.subplot(2,4,2)\nsns.boxplot(x='month',y='cnt',data=df)\nplt.subplot(2,4,3)\nsns.boxplot(x='weekday',y='cnt',data=df)\nplt.subplot(2,4,4)\nsns.boxplot(x='workingday',y='cnt',data=df)\nplt.subplot(2,4,5)\nsns.boxplot(x='holiday',y='cnt',data=df)\nplt.subplot(2,4,6)\nsns.boxplot(x='season',y='cnt',data=df)\nplt.subplot(2,4,7)\nsns.boxplot(x='holiday',y='cnt',data=df)\nplt.show()","162f343f":"def plot_cols(column):\n    plt.figure(figsize=(12,10))\n    plt.subplot(1,2,1)\n    sns.barplot(column,'cnt',data=df)\n    plt.subplot(1,2,2)\n    sns.barplot(column,'cnt',data=df,hue='year')\n    plt.legend(labels=['2018','2019'])\n    plt.show()","83d67eda":"plot_cols('season')","ab84d6d3":"plot_cols('month')","686178e9":"plot_cols('weathersit')","2b0a08f7":"plot_cols('weekday')","20a3ac1a":"plot_cols('holiday')","b364af36":"plot_cols('workingday')","dafe527c":"plot_cols('year')","1b0d61a3":"df.corr()","6e5aa8dd":"#Heatmap for various variables.\nplt.figure(figsize=(10,8))\nsns.heatmap(df.corr(),annot=True,cmap='RdBu')","4885ccbb":"df.drop(['temp'],axis=1,inplace=True)\ndf.head()","855ef93c":"plt.figure(figsize=(5,5))\nplt.title('Cnt vs Temp',fontsize=10)\nsns.regplot(data=df,x='atemp',y='cnt')\nplt.xlabel('Temperature')\nplt.show()","384f0576":"plt.figure(figsize=(5,5))\nplt.title('Cnt vs Humidity',fontsize=10)\nsns.regplot(data=df,x='humidity',y='cnt')\nplt.xlabel('Humidity')\nplt.show()","b2ab59ee":"plt.figure(figsize=(5,5))\nplt.title('Cnt vs Windspeed',fontsize=10)\nsns.regplot(data=df,x='windspeed',y='cnt')\nplt.xlabel('Windspeed')\nplt.show()","cf33bb1d":"#Creating dummy variable.\ndummy = df[['season','month','weekday','weathersit']]","915c8e09":"dummy = pd.get_dummies(dummy,drop_first=True)","bafe9834":"#Adding dummy variables to original dataset.\ndf = pd.concat([dummy,df],axis=1)\ndf.head()","340e4223":"#Dropping columns for which dummy variables were created.\ndf.drop(['season','month','weekday','weathersit'],axis=1,inplace=True)","a438282b":"df.head()","1d67ecbc":"df.shape","bb7b7f01":"train,test = train_test_split(df,train_size=0.7,test_size=0.3,random_state=100)","6e550eaa":"scaler = MinMaxScaler()\n\n#Applying scaler() to all columns except the 'dummy' variables.\nnum_vars = ['cnt','humidity','windspeed','atemp']\ntrain[num_vars] = scaler.fit_transform(train[num_vars])\ntrain.head()","c18d68fa":"train.describe()","789cd7d4":"plt.figure(figsize=(20,10))\nsns.heatmap(train.corr(),annot=True,cmap='YlGnBu')\nplt.show()","bbb6eacd":"#Dividing into X and y sets for model building.\ny_train = train.pop('cnt')\nX_train = train","8f18fa16":"#Running RFE with output number of the variable equal to 10.\nlm = LinearRegression()\nlm.fit(X_train,y_train)\nrfe = RFE(lm,13)\nrfe = rfe.fit(X_train,y_train)","7550b959":"#Columns selected by RFE and their weights.\nlist(zip(X_train.columns,rfe.support_,rfe.ranking_))","d8a6f4f1":"col = X_train.columns[rfe.support_]\ncol","5ec3a9ed":"X_train.columns[~rfe.support_]","f1a14b9d":"#Creating X_test dataframe with RFE selected variables.\nX_train_rfe = X_train[col]","3445c89e":"#Adding a constant variable.\nX_train_rfe = sm.add_constant(X_train_rfe)","2d526a6d":"#Creating a first fitted model.\nlm = sm.OLS(y_train,X_train_rfe).fit()","3f3793a5":"lm.params","9104df3b":"lm.summary()","0701413e":"#Dropping 'month_feb'.\nX_train_new = X_train_rfe.drop(['month_feb'],axis=1)","6cf6770f":"#Adding a constant variable.\nX_train_lm = sm.add_constant(X_train_new)\n\n#Running the linear model.\nX_train_lm = sm.OLS(y_train,X_train_lm).fit()","6ffd2a86":"lm.summary()","224dea53":"#Calculating the VIFs for the new model.\nvif = pd.DataFrame()\nX = X_train_new\nvif['Features'] = X.columns\nvif['VIF'] = [variance_inflation_factor(X.values,i) for i in range(X.shape[1])]\nvif['VIF'] = round(vif['VIF'],2)\nvif = vif.sort_values(by='VIF',ascending=False)\nvif","f0d81379":"X_train_new = X_train_new.drop(['const'],axis=1)","98e32753":"#Calculating the VIFs for the new model again.\nvif = pd.DataFrame()\nX = X_train_new\nvif['Features'] = X.columns\nvif['VIF'] = [variance_inflation_factor(X.values,i) for i in range(X.shape[1])]\nvif['VIF'] = round(vif['VIF'],2)\nvif = vif.sort_values(by='VIF',ascending=False)\nvif","c045685d":"#Dropping 'humidity' from the model.\nX_train_new = X_train_new.drop(['humidity'],axis=1)\n\n#Adding a constant variable.\nX_train_lm = sm.add_constant(X_train_new)\n\n#Creating a fitted model.\nlm = sm.OLS(y_train,X_train_lm).fit()","f7597378":"lm.summary()","767c8cc2":"#Calculating the VIFs for the new model again.\nvif = pd.DataFrame()\nX = X_train_new\nvif['Features'] = X.columns\nvif['VIF'] = [variance_inflation_factor(X.values,i) for i in range(X.shape[1])]\nvif['VIF'] = round(vif['VIF'],2)\nvif = vif.sort_values(by='VIF',ascending=False)\nvif","565de743":"y_train_cnt = lm.predict(X_train_lm)","7fa2bc19":"#Plotting the histogram of the error terms.\nfig = plt.figure()\nsns.distplot((y_train - y_train_cnt),bins=20)\nfig.suptitle('Error terms',fontsize=20)\nplt.xlabel('Errors',fontsize=10)","9cc95eac":"num_vars = ['cnt','humidity','windspeed','atemp']\ntest[num_vars] = scaler.transform(test[num_vars])","8a20ac82":"test.describe()","6cc2dc38":"y_test = test.pop('cnt')\nX_test = test","9c54375d":"#Adding constant variable to test dataframe.\nX_test = sm.add_constant(X_test)","d00d866f":"#Predicting using values used by the final model.\ntest_col = X_train_lm.columns\nX_test = X_test[test_col[1:]]\n\n#Adding constant variable to test dataframe.\nX_test = sm.add_constant(X_test)\nX_test.info()","871c8e02":"#Making predictions using the final model.\ny_pred = lm.predict(X_test)","a3cff8d9":"r2_score(y_test,y_pred)","eac4a081":"mse = mean_squared_error(y_test,y_pred)\nmse","275b26df":"#Plotting y_test and y_pred to understand the spread\n\nfig = plt.figure()\nplt.scatter(y_test,y_pred)\nfig.suptitle('y_test vs y_pred',fontsize=20)\nplt.xlabel('y_test',fontsize=10)\nplt.ylabel('y_pred',fontsize=10)\nplt.show()","a2290f03":"param = pd.DataFrame(lm.params)\nparam.insert(0,'Variables',param.index)\nparam.rename(columns = {0:'Coefficient value'},inplace = True)\nparam['index'] = list(range(0,12))\nparam.set_index('index',inplace = True)\nparam.sort_values(by = 'Coefficient value',ascending = False,inplace = True)\nparam","51090b50":"# Data Loading","5d158ade":"Okay so first we build a model using all columns.","085c6809":"Demands for bikes is positvely correlated to temp and we can also see that cnt is increasing with temp indicating a linear relationship.","56e6776b":"Okay so we are dropping month_feb since it has p>0.05.","fa7dbb08":"Most of the bookings has been done during the month of may, june, july, aug, sep and oct.Trend increased starting of the year till mid of the year and then it started decreasing as we approached the end of year. Number of booking for each month seems to have increased from 2018 to 2019.","297f443e":"Next the column 'dteday' has the date, since we already have seperate columns for 'year' & 'month',hence, we could live without this column. So let's drop it.","0b9dea87":"Okay so now to check if the error terms are also normally distributed (which is infact, one of the major assumptions of linear regression), let us plot the histogram of the error terms and see what it looks like.","338add25":"# Final Report","eb63a8dd":"The heatmap clearly shows which all variable are multicollinear in nature, and which variable have high collinearity with the target variable.\n\nCorrelation between temp and atemp is 0.99 which is almost 1 so we can drop temp and consider atemp.","a231d676":"Booking seemed to be almost equal either on working day or non-working day. But, the count increased from 2018 to 2019.","844135f8":"Now that we have fitted the model and checked the normality of error terms, it's time to go ahead and make predictions using the final, i.e. third model.","57948b43":"This proves that there is a linear relationship between temp, atemp and cnt.","69687613":"Now lets look at the basics of the given dataset.","65c42568":"We want a VIF less than 5 so we can drop 'const'.","0d0b3d8d":"# Data Cleaning","8dee8c01":"Clearly, 2019 attracted more number of booking from the previous year, which shows good progress in terms of business.\n\nAgain all this is just the confirmation of the insights derived from the pairplots.\n\nMoving forward with the statistical part now, we will look into the correlation between the different variables.","9f1ce5c6":"## Model 3(final)","31f1605a":"Fall season seems to have attracted more booking. Also in each season the booking count has increased drastically from 2018 to 2019 as seen above.","5d86fcaf":"The humidity vs cnt values are scattered as we can see in the graph. Although there is a decreasing with increase in humidity.","d535866e":"# Dummy Variable Creation","d970bb96":"Also 'season','year,'month','holiday','weekday','workingday' and 'weathersit' are categorical variables. So we'll replace them with the appropriate values.","16d63611":"Now here 'instant' is just an index column so we can drop it.","a9ca2ced":"Now lets split the data into training and testing datasets.","8045fce5":"Okay so dropping 'humidity' column now.","1500efac":"Now rebuilding the model without the 'month_feb' column.","165e3ab6":"# Predictions using the Final ML model","1fc7e6d4":"The graph of cnt and windspeed is scattered and we can see a decrease in the cnt with an increase in the windspeed.","867b4cd1":"Observations:\n\n1) The count of bike sharing has increased as compared to the previous year,i.e. from 2018 to 2019.\n\n2) The count of bike sharing is the most for the months of September, October and August. While it is the least for January and February.\n\n3) The count for the weekdays is optimum for Friday while the least is on Monday.\n\n4) The count is almost the same for working and non-working day.\n\n5) The count is the best during the 'fall' while the worst during the 'spring'.","2af08b1f":"Lets rename some columns for better readabilty.","803ad26e":"# Model Interpretation","526e333e":"# Train-Test Split","d050f9ad":"# Residual Analysis of the train data","d4153e66":"# Data Exploration","996e96d4":"\nAs per our final model, the top 3 predictor variables that influences the bike sharing are:\n\n*Temperature.\n\n*Year.\n\n*Weather Situation.\n\nSo, it's suggested to consider these variables utmost importance while planning, to achive optimum profit:\n\n-- Company should focus on expanding business during Spring.\n\n-- Company should focus on expanding business during September.\n\n-- Based on previous data it is expected to have a boom in number of users once situation comes back to normal, compared to 2019.\n\n-- There would be less bookings during Light Snow or Rain, they could probably use this time to serive the bikes without having business impact.\n\nHence when the situation comes back to normal, the company should come up with new offers during spring when the weather is pleasant and also advertise a little for September as this is when business would be at its best.\n\nOther significant variables to predict the demand for shared bikes:\n\nholiday\n\nhumidity\n\nwindspeed\n\nSeason\n\nmonths(January, July, September, November, December)\n\nYear (2019)\n\nSunday","5d433870":"First we will use pairplots to look at various relationships between numerical relationships.","eb5f4e90":"## Model 1","15c34bab":"Clear weather attracted more booking which seems obvious. And in comparison to previous year, i.e 2018, booking increased for each weather situation in 2019.","766b6264":"# EDA","dc8fc002":"## Model 2","ef35ee2e":"# Rescaling the features","479e92a3":"# Building a  linear regression model","49bf2bd2":"When its not holiday, booking seems to be less in number which seems reasonable as on holidays, people may want to spend time at home and enjoy with family.","36fab148":"Thu, Fri, Sat and Sun have more number of bookings as compared to the start of the week.","c99a3b3f":"Let's now plot a graph for actual versus predicted values to see if our model holds or not.","72104579":"Okay so there are no null values and also no duplicates in the dataset.","1529da6c":"Next, 'casual' and 'registered' columns both are not useful to us in the future at the time of prediction and they also together constitute our target variable 'cnt' so it will be safe to drop them as well."}}