{"cell_type":{"bf57fd85":"code","6efd759e":"code","242af957":"code","581c4906":"code","2a26600d":"code","4d23ea1c":"code","99f66f45":"code","766d7a38":"code","3e87f6af":"code","6fb0c7c9":"code","26196488":"code","b42bddbd":"code","c6bd28bb":"code","f15d7efc":"code","89377cdf":"code","d8bc9b5a":"code","d1588fb0":"code","bcee49a4":"code","12d8ff4a":"markdown","df212c49":"markdown","445fcfe8":"markdown"},"source":{"bf57fd85":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfrom sklearn.multioutput import MultiOutputRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import make_scorer\n\nfrom xgboost import XGBRegressor\n\npd.set_option('display.max_columns', 100)","6efd759e":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","242af957":"train = pd.read_json('..\/input\/stanford-covid-vaccine\/train.json', lines = True)\ntest = pd.read_json('..\/input\/stanford-covid-vaccine\/test.json', lines = True)\nsub = pd.read_csv('..\/input\/stanford-covid-vaccine\/sample_submission.csv')","581c4906":"stop_codon = [\"UAA\", \"UAG\", \"UGA\"]\namino_acid = [\"Ala\", \"Arg\", \"Asn\", \"Asp\", \"Cys\", \"Glu\", \"Gln\", \"Gly\", \"His\", \"Ile\", \"Leu\", \"Lys\",\n              \"Met\", \"Phe\", \"Pro\", \"Ser\", \"Thr\", \"Trp\", \"Tyr\", \"Val\"]\ncodon_U = [\"UUU\", \"UUC\", \"UUA\", \"UUG\",\n           \"UCU\", \"UCC\", \"UCA\", \"UCG\",\n           \"UAU\", \"UAC\", \"UAA\", \"UAG\",\n           \"UGU\", \"UGC\", \"UGA\", \"UGG\"]\ncodon_C = [\"CUU\", \"CUC\", \"CUA\", \"CUG\",\n           \"CCU\", \"CCC\", \"CCA\", \"CCG\",\n           \"CAU\", \"CAC\", \"CAA\", \"CAG\",\n           \"CGU\", \"CGC\", \"CGA\", \"CGG\"]\ncodon_A = [\"AUU\", \"AUC\", \"AUA\", \"AUG\",\n           \"ACU\", \"ACC\", \"ACA\", \"ACG\",\n           \"AAU\", \"AAC\", \"AAA\", \"AAG\",\n           \"AGU\", \"AGC\", \"AGA\", \"AGG\"]\ncodon_G = [\"GUU\", \"GUC\", \"GUA\", \"GUG\",\n           \"GCU\", \"GCC\", \"GCA\", \"GCG\",\n           \"GAU\", \"GAC\", \"GAA\", \"GAG\",\n           \"GGU\", \"GGC\", \"GGA\", \"GGG\"]","2a26600d":"#####Get the codons######\ndef codon(codon_in):\n    \n    translated_amino_acid = []\n\n    #codon_in = train['sequence'].values[0]\n    codon_txt = [(codon_in[i:i + 3]) for i in range(0, len(codon_in), 3)]\n    for r in range(0, len(codon_txt)):\n        if codon_txt[r] == \"AUG\":\n            translated_amino_acid.append(amino_acid[12])\n            r += 1\n        elif codon_txt[r] == (\"UUU\" or \"UUC\"):\n            translated_amino_acid.append(amino_acid[13])\n            r += 1\n        elif codon_txt[r] == (((\"UUA\" or \"UUG\") or (\"CUU\" or \"CUA\")) or (\"CUG\" or \"CUC\")):\n            translated_amino_acid.append(amino_acid[10])\n            r += 1\n        elif codon_txt[r] == (((\"UCU\" or \"UCA\") or (\"UCC\" or \"UCG\")) or (\"AGU\" or \"AGC\")):\n            translated_amino_acid.append(amino_acid[15])\n            r += 1\n        elif codon_txt[r] == (\"UAU\" or \"UAC\"):\n            translated_amino_acid.append(amino_acid[18])\n            r += 1\n        elif codon_txt[r] == (\"UGU\" or \"UGC\"):\n            translated_amino_acid.append(amino_acid[4])\n            r += 1\n        elif codon_txt[r] == \"UGG\":\n            translated_amino_acid.append(amino_acid[17])\n            r += 1\n        elif codon_txt[r] == ((\"CCU\" or \"CCC\") or (\"CCA\" or \"CCG\")):\n            translated_amino_acid.append(amino_acid[14])\n            r += 1\n        elif codon_txt[r] == (\"CAU\" or \"CAC\"):\n            translated_amino_acid.append(amino_acid[8])\n            r += 1\n        elif codon_txt[r] == (\"CAA\" or \"CUG\"):\n            translated_amino_acid.append(amino_acid[6])\n            r += 1\n        elif codon_txt[r] == (((\"CGU\" or \"CGC\") or (\"CGA\" or \"CGG\")) or (\"AGA\" or \"AGG\")):\n            translated_amino_acid.append(amino_acid[1])\n            r += 1\n        elif codon_txt[r] == ((\"AUU\" or \"AUC\") or \"AUA\"):\n            translated_amino_acid.append(amino_acid[9])\n            r += 1\n        elif codon_txt[r] == ((\"ACU\" or \"ACC\") or (\"ACA\" or \"ACG\")):\n            translated_amino_acid.append(amino_acid[16])\n            r += 1\n        elif codon_txt[r] == (\"AAU\" or \"AAC\"):\n            translated_amino_acid.append(amino_acid[2])\n            r += 1\n        elif codon_txt[r] == (\"AAA\" or \"AAG\"):\n            translated_amino_acid.append(amino_acid[11])\n            r += 1\n        elif codon_txt[r] == ((\"GUU\" or \"GUC\") or (\"GUA\" or \"GUG\")):\n            translated_amino_acid.append(amino_acid[19])\n            r += 1\n        elif codon_txt[r] == ((\"GCU\" or \"GCC\") or (\"GCA\" or \"GCG\")):\n            translated_amino_acid.append(amino_acid[0])\n            r += 1\n        elif codon_txt[r] == (\"GAU\" or \"GAC\"):\n            translated_amino_acid.append(amino_acid[3])\n            r += 1\n        elif codon_txt[r] == (\"GAA\" or \"GAG\"):\n            translated_amino_acid.append(amino_acid[5])\n            r += 1\n        elif codon_txt[r] == ((\"GGU\" or \"GGC\") or (\"GGA\" or \"GGG\")):\n            translated_amino_acid.append(amino_acid[7])\n            r += 1\n        elif codon_txt[r] == ((\"UAG\" or \"UAA\") or \"UGA\"):\n            translated_amino_acid.append(\"Stop\")\n            r += 1\n    return translated_amino_acid","4d23ea1c":"train['AminoAcid'] = \"\"\nfor i in range(len(train)):\n    train['AminoAcid'][i] = codon(train['sequence'].values[i])","99f66f45":"train_data = []\nfor mol_id in train['id'].unique():\n    sample_data = train.loc[train['id']==mol_id]\n    \n    for i in range(68):\n        sample_tuple = (sample_data['id'].values[0], sample_data['AminoAcid'].values[0],i,sample_data['sequence'].values[0][i],\n                        sample_data['structure'].values[0][i], sample_data['predicted_loop_type'].values[0][i],\n                        sample_data['reactivity'].values[0][i], sample_data['reactivity_error'].values[0][i],\n                        sample_data['deg_Mg_pH10'].values[0][i], sample_data['deg_error_Mg_pH10'].values[0][i],\n                        sample_data['deg_pH10'].values[0][i], sample_data['deg_error_pH10'].values[0][i],\n                        sample_data['deg_Mg_50C'].values[0][i], sample_data['deg_error_Mg_50C'].values[0][i],\n                        sample_data['deg_50C'].values[0][i], sample_data['deg_error_50C'].values[0][i])\n        train_data.append(sample_tuple)","766d7a38":"train_data = pd.DataFrame(train_data, columns=['id', 'AminoAcid','seqno','sequence', 'structure', 'predicted_loop_type', 'reactivity', 'reactivity_error', 'deg_Mg_pH10', 'deg_error_Mg_pH10',\n                                  'deg_pH10', 'deg_error_pH10', 'deg_Mg_50C', 'deg_error_Mg_50C', 'deg_50C', 'deg_error_50C'])","3e87f6af":"test['AminoAcid'] = \"\"\nfor i in range(len(test)):\n    test['AminoAcid'][i] = codon(test['sequence'].values[i])\n\ntest_data = []\nfor mol_id in test['id'].unique():\n    sample_data = test.loc[test['id'] == mol_id]\n    for i in range(sample_data['seq_scored'].values[0]):\n        sample_tuple = (sample_data['id'].values[0] + f'_{i}', sample_data['AminoAcid'].values[0],i,sample_data['sequence'].values[0][i],\n                        sample_data['structure'].values[0][i], sample_data['predicted_loop_type'].values[0][i])\n        test_data.append(sample_tuple)","6fb0c7c9":"test_data = pd.DataFrame(test_data, columns=['id','AminoAcid', 'seqno','sequence', 'structure', 'predicted_loop_type'])\ntest_data.head(1)","26196488":"train_data1 = pd.concat([train_data.drop('AminoAcid', 1), \n                         pd.get_dummies(train_data['AminoAcid'].apply(pd.Series).stack()).sum(level=0)], 1)\n\ntest_data1 = pd.concat([test_data.drop('AminoAcid', 1), \n                         pd.get_dummies(test_data['AminoAcid'].apply(pd.Series).stack()).sum(level=0)], 1)","b42bddbd":"map_sequence ={'G':'1','A':'2','C':'3','U':'4'}\nmap_structure = {'.':'1','(':'2',')':'3'}\nmap_loop = {'E':'1', 'S':'2', 'H':'3', 'B':'4', 'X':'5', 'I':'6', 'M':'7'}\n\ntrain_data1['sequence'] = train_data1['sequence'].map(map_sequence)\ntrain_data1['structure'] = train_data1['structure'].map(map_structure)\ntrain_data1['predicted_loop_type'] = train_data1['predicted_loop_type'].map(map_loop)\n\ntest_data1['sequence'] = test_data1['sequence'].map(map_sequence)\ntest_data1['structure'] = test_data1['structure'].map(map_structure)\ntest_data1['predicted_loop_type'] = test_data1['predicted_loop_type'].map(map_loop)","c6bd28bb":"# Split data in features and labels\nX_train = train_data1.drop(['reactivity', 'deg_Mg_pH10', 'deg_Mg_50C','reactivity_error','deg_error_Mg_pH10','deg_pH10',\n                            'deg_error_pH10','deg_error_Mg_50C','deg_50C','deg_error_50C'], axis=1)\nY_train = train_data1[['reactivity', 'deg_Mg_pH10', 'deg_Mg_50C']]\nX_train, X_test, Y_train, Y_test = train_test_split(X_train, Y_train, test_size=0.2)\nX_train.shape, X_test.shape, Y_train.shape, Y_test.shape","f15d7efc":"def mcrmse_loss(y_true, y_pred, N=3):\n    \"\"\"\n    Calculates competition eval metric\n    \"\"\"\n    assert len(y_true) == len(y_pred)\n    n = len(y_true)\n    return np.sum(np.sqrt(np.sum((y_true - y_pred)**2, axis=0)\/n)) \/ N\n\ncustom_scorer = make_scorer(mcrmse_loss, greater_is_better=False)","89377cdf":"# Basic XGB without hyperparameter tuning\nxgb = XGBRegressor(\n    subsample=0.8,\n    colsample_bytree=0.8,\n    reg_lambda=1,\n    reg_alpha=1,\n    random_state=42,\n    n_estimators = 1000,\n    learning_rate = 0.1,\n    max_depth = 5\n)\n\nreg = MultiOutputRegressor(xgb)\n\nreg.fit(X_train.drop('id',1), Y_train)","d8bc9b5a":"# Train score\nmcrmse_loss(reg.predict(X_train.drop('id',1)), np.array(Y_train))","d1588fb0":"# Predict\npreds = pd.DataFrame(reg.predict(test_data1.drop('id',1)))","bcee49a4":"preds = preds.rename(columns={0: 'reactivity', 1: 'deg_Mg_pH10', 2: 'deg_Mg_50C'})\npreds['id'] = test_data1['id']\nsub = pd.merge(sub[['id_seqpos']], preds, left_on='id_seqpos', right_on='id', how='left').drop(['id'],axis=1)\nsub = sub.fillna(0)\nsub['deg_pH10'] = 0\nsub['deg_50C'] = 0\nsub = sub[['id_seqpos', 'reactivity', 'deg_Mg_pH10', 'deg_pH10', 'deg_Mg_50C', 'deg_50C']]\nsub.head()","12d8ff4a":"There are several other features which need to be explored further. Some of them are:\n* Paired codon sequences\n* Outliers in reactivity and else\n* Meaningful use of error data\n* Additional features","df212c49":"This is my first notebook with the baseline score. It achieves the following:\n* Putting the sequence into RNA codons\n* Creating the data for modeling purposes\n* Xgboost based base model","445fcfe8":"Putting the sequence into codons. Refer the codon table here: https:\/\/www.genome.gov\/genetics-glossary\/Genetic-Code"}}