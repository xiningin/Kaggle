{"cell_type":{"e5b7695e":"code","58483b87":"code","a3600ee9":"code","f782da1e":"code","155c98be":"code","9f96d134":"code","65b7a297":"code","8c0e67cc":"code","950aaf34":"code","b4cda958":"code","b663c9c5":"code","1d37aca1":"code","fc167113":"code","0b6f8fff":"code","7ef9f692":"code","bf86bf82":"code","49ed009e":"code","2ea8be8c":"code","8e90c3f2":"code","204fb239":"code","55d84b11":"code","c0ef94ff":"code","c2701e77":"code","76da6c1a":"code","961b3aea":"code","3a5ae457":"code","4220c727":"code","93972ad5":"code","e24c3297":"code","5fe27803":"code","85c47de1":"code","15810921":"code","015f01b0":"code","e1362f01":"code","55c01e7c":"code","6fca3efa":"code","235ad633":"code","04504f72":"code","74690a9d":"code","7f60dc98":"code","5639bc67":"code","9b65b0c3":"code","9ec60503":"code","256078cb":"code","a48c94bc":"code","96a26d2d":"code","358f1b2a":"code","33e7a850":"code","363b8d84":"code","b57c6cec":"code","7bbd9411":"code","d6e49fcd":"code","c3ae1a1b":"code","dda871ea":"code","f7630873":"code","dd2ca03f":"code","4ef69bfd":"code","2f1ad85f":"code","3252a4f6":"code","83273cb5":"code","d93adba7":"code","57ff0e67":"code","3b7d1192":"code","59a9a020":"code","c83c38a0":"code","b180b1ec":"code","6830dcad":"code","8a2ede2f":"code","e234d19e":"code","eeb763f8":"code","5e125d4c":"code","9642d324":"code","4b980c3b":"code","850109ee":"code","1764b034":"code","0872ed1e":"code","5623b25f":"code","28bd0bdd":"code","1a7fa6bd":"code","518c24a3":"code","b775e7e0":"code","84ba4e21":"code","8453940e":"code","25b69925":"code","40bc348f":"markdown","c02ff358":"markdown","945d8508":"markdown","c3a96bca":"markdown","adc474e8":"markdown","027f5255":"markdown","c33969f8":"markdown","39158f8f":"markdown"},"source":{"e5b7695e":"import numpy as np\nimport pandas as pd\nimport seaborn.apionly as sns\nimport matplotlib.pyplot as plt","58483b87":"#setup para el notebook\n\n%matplotlib inline\npd.options.display.max_rows = 10\npd.options.display.float_format = '{:,.2f}'.format\nplt.rcParams['figure.figsize'] = (16, 12)","a3600ee9":"data = pd.read_csv(\".\/titanic.csv\", index_col=\"PassengerId\")\ndata","f782da1e":"data.index","155c98be":"data.columns","9f96d134":"data.loc[[1, 2, 3], [\"Name\", \"Sex\"]]","65b7a297":"data.iloc[[1, 2, 3], [2, 3]]","8c0e67cc":"data.ix[[1, 2, 3], [\"Name\", \"Sex\"]]","950aaf34":"temp = data.copy()\ntemp.index = [\"elemento_\" + str(i) for i in temp.index]\ntemp","b4cda958":"temp.loc[[\"elemento_1\", \"elemento_2\", \"elemento_3\"], [\"Name\", \"Sex\"]]","b663c9c5":"temp.iloc[[1, 2, 3], [2, 3]]","1d37aca1":"temp.ix[[1, 2, 3], [\"Name\", \"Sex\"]]","fc167113":"del temp","0b6f8fff":"data.loc[:3, :\"Sex\"]","7ef9f692":"#indexar por `slices`\n\ndata.iloc[:3]","bf86bf82":"data.iloc[-3:]","49ed009e":"data.loc[1:10, [\"Name\", \"Sex\", \"Ticket\"]]","2ea8be8c":"data[[\"Name\", \"Ticket\"]]","8e90c3f2":"use_cols = [\"Name\", \"Ticket\"]\ndata[use_cols]","204fb239":"data[\"Name\"]","55d84b11":"cols =[\"Name\"]\ndata[cols]","c0ef94ff":"data.Name","c2701e77":"temp = data[[\"Name\"]].copy()\ntemp.OtroNombre = [\"OTRO_\" + n for n in data.Name]\ntemp","76da6c1a":"temp.OtroNombre[:10]","961b3aea":"temp[\"OtroNombre\"] = [\"OTRO_\" + n for n in data.Name]\ntemp","3a5ae457":"del temp","4220c727":"data.iloc[1]","93972ad5":"data.iloc[[1]]","e24c3297":"data.SibSp","5fe27803":"data[\"NumFam\"] = data.SibSp + data.Parch\ndata","85c47de1":"data.SibSp > 0","15810921":"#otra forma de filtrar es con mascaras binarias (`boolean`)\ndata[data.SibSp > 0][[\"Sex\", \"Age\"]]","015f01b0":"data[[\"Age\", \"ex\"]]","e1362f01":"data[(data.SibSp > 0) | (data.Age < 18)]","55c01e7c":"# escribir la solucion aqui...\n","6fca3efa":"# %load soluciones\/mayores_solos.py\n","235ad633":"data.shape","04504f72":"valid_index = np.random.choice(data.index, int(data.index.shape[0] * 0.1), replace=False)\nvalid_index","74690a9d":"train = data.drop(valid_index)\nvalid = data.loc.__getitem__(valid_index)\ntrain","7f60dc98":"valid","5639bc67":"X_train, y_train = train.drop(\"Survived\", axis=1), train[\"Survived\"]\nX_valid, y_valid = valid.drop(\"Survived\", axis=1), valid[\"Survived\"]\nX_train","9b65b0c3":"y_train","9ec60503":"#agrupar\nagrupado = data.groupby(\"Pclass\")\nagrupado","256078cb":"#s\u00f3lo hemos agrupado, no se ha hecho ning\u00fan c\u00e1lculo, para eso hay que aplicar alguna funci\u00f3n\nagrupado.Survived.mean()","a48c94bc":"agrupado.Survived.agg({\"media\": \"mean\", \"media_2\": np.mean, \"varianza\": \"var\", \"cantidad\": \"count\"})","96a26d2d":"data.columns","358f1b2a":"data.groupby(\"Survived\")[['Age', 'SibSp', 'Parch', 'NumFam', 'Fare']].mean()","33e7a850":"pd.crosstab(data.Pclass, data.Survived)","363b8d84":"pd.crosstab(data.Pclass, data.Survived).apply(lambda x: x\/x.sum(), axis=1)","b57c6cec":"data.Survived.value_counts()","7bbd9411":"data.Survived.value_counts?","d6e49fcd":"data.Survived.value_counts(True).sort_index()","c3ae1a1b":"pd.crosstab(data.Pclass, pd.cut(data.Age, [i * 10 for i in range(9)]), \n            values=data.Survived, aggfunc=np.mean)","dda871ea":"pd.crosstab(data.Pclass, pd.cut(data.Age, [i * 10 for i in range(9)]))","f7630873":"#hay variables que no son numericas y que hay que codificar antes que nada\ntipos = data.dtypes\ntipos.value_counts()","dd2ca03f":"tipos_objeto = tipos[tipos == \"object\"]\ntipos_objeto","4ef69bfd":"nulos = data.isnull().sum()\nnulos","2f1ad85f":"nulos[nulos > 0]","3252a4f6":"data[\"Sex\"].value_counts()","83273cb5":"data[\"Sex\"] = data.Sex.apply(lambda x: {\"male\": 0, \"female\": 1}[x])\ndata[\"Sex\"].value_counts()","d93adba7":"data[\"Ticket\"].unique().shape","57ff0e67":"data[\"Ticket\"].factorize()","3b7d1192":"data[\"Ticket\"] = data[\"Ticket\"].factorize()[0]\ndata[\"Ticket\"].value_counts()","59a9a020":"data.Embarked.fillna(-1).value_counts()","c83c38a0":"data[data.Embarked.isnull()]","b180b1ec":"data[(data.Fare >= 70) & (data.Fare <= 90)].Embarked.value_counts()","6830dcad":"data.Embarked.fillna(\"S\", inplace=True)\ndata.Embarked.fillna(-1).value_counts()","8a2ede2f":"pd.crosstab(data.Embarked, data.Survived)","e234d19e":"pd.crosstab(data.Embarked, data.Survived).apply(lambda x: x\/x.sum(), axis=1)","eeb763f8":"pd.get_dummies(data.Embarked)","5e125d4c":"data = data.join(pd.get_dummies(data.Embarked)).drop(\"Embarked\", axis=1)","9642d324":"data","4b980c3b":"data.Cabin.fillna(-1).value_counts()","850109ee":"data[\"Cabin\"] = data.Cabin.fillna(-1).factorize()[0]","1764b034":"data","0872ed1e":"data.Age.fillna(-1).value_counts()","5623b25f":"pd.crosstab(data.Age.isnull(), data.Survived).apply(lambda x: x\/x.sum(), axis=1)","28bd0bdd":"data[\"Age_nul\"] = data.Age.isnull().astype(int)\ndata","1a7fa6bd":"data.Age.fillna(data.Age.mean(), inplace=True)\ndata","518c24a3":"data.isnull().sum().sum()","b775e7e0":"data.drop(\"Name\", axis=1, inplace=True)\ndata","84ba4e21":"data.dtypes.value_counts()","8453940e":"data.info()","25b69925":"valid_index","40bc348f":"### Ejercicio\n\n###### seleccionar varones mayores de 65 a\u00f1os que viajan solos","c02ff358":"## Tipos de Indexado\n\nHay varias formas de seleccionar un subconjunto de los datos:\n\n- Como las listas o arrays, por posici\u00f3n.\n- Como los diccionarios, por llave o etiqueta.\n- Como los arrays, por m\u00e1scaras de verdadero o falso.\n- Se puede indexar por n\u00famero, rango o lista (array)\n- Todos estos m\u00e9todos pueden funcionar subconjunto como en las columnas\n\n\n## Reglas B\u00e1sicas\n\n1. Se usan corchetes (abreviatura para el m\u00e9todo `__getitem__`) para seleccionar columnas de un `DataFrame`\n\n    ```python\n    >>> df[['a', 'b', 'c']]\n    ```\n\n2. Se usa `.iloc` para indexar por posici\u00f3n (tanto filas como columnas)\n\n    ```python\n    >>> df.iloc[[1, 3], [0, 2]]\n    ```\n    \n3. Se usa `.loc` para indexar por etiquetas (tanto filas como columnas)\n\n    ```python\n    >>> df.loc[[\"elemento1\", \"elemento2\", \"elemento3\"], [\"columna1\", \"columna2\"]]\n    ```\n\n4. `ix` permite mezclar etiquetas y posiciones (tanto filas como columnas)\n\n    ```python\n    >>> df.ix[[\"elemento1\", \"elemento2\", \"elemento3\"], [0, 2]]\n    ```\n    ```python\n    >>> df.ix[[1, 3], [\"columna1\", \"columna2\"]]\n    ```\n","945d8508":"# Tutorial Manejo de Datos y Pandas\n\n## Estructuras de Datos e \u00cdndices\n\n\nPandas soporta la lectura de una amplia cantidad de formatos ([m\u00e1s info](http:\/\/pandas.pydata.org\/pandas-docs\/stable\/io.html)): \n\n- read_csv\n- read_excel\n- read_hdf\n- read_sql\n- read_json\n- read_msgpack (experimental)\n- read_html\n- read_gbq (experimental)\n- read_stata\n- read_sas\n- read_clipboard\n- read_pickle\n\nVamos a empezar a probar con una dataset publicado para una competencia de kaggle: [Titanic: Machine Learning from Disaster](https:\/\/www.kaggle.com\/c\/titanic\/data).","c3a96bca":"#### Tablas de Contingencia\n\nLas tablas de contingencia asemejan las tablas din\u00e1micas de excel, sirven apra ver inteacciones entre variables","adc474e8":"### Filtrado de filas y columnas\n\nPara eliminar lo que no quieren en lugar de seleccionar lo que s\u00ec\n\n```\nDataFrame.drop(etiquetas, axis=0, ...)\n\nPar\u00e1metros\n----------\netiquetas : etiqueta o lista de etiquetas\naxis : entero o nombre de la dimesi\u00f3n\n    - 0 \/ 'index', para eliminar filas\n    - 1 \/ 'columns', para elimnar columnas\n```","027f5255":"### Poniendo todo junto en un ejemplo de Data Mining","c33969f8":"### Agrupaciones y Tablas de Contingencia\n\n#### Agrupaciones\n\nLas agrupaciones sirven para hacer c\u00e1lculos sobre subconjuntos de los datos, generalmente tienen tres partes:\n\n1. Definir los grupos\n2. Aplicar un c\u00e1lculo\n3. Combinar los resultados","39158f8f":"Las estructuras de datos en pandas, por lo general, no son modificadas en vivo con comandos como `set_index`, para hacer eso es necesario cambiar el argumento `inplace` o reasignar la variables"}}