{"cell_type":{"748893b9":"code","7a317b49":"code","d500ad42":"code","f5deb9d6":"code","c3cf7784":"code","30afdbc1":"code","44164eb5":"code","6ba8ef2b":"code","12c0d348":"code","b355df6a":"code","cef318f9":"code","de87581d":"code","cb716892":"code","27945e8c":"code","ac55ce85":"code","1f8a60c9":"code","6809c0b3":"code","52739962":"code","6d9dddd6":"code","9f507434":"code","95625d47":"code","98baecac":"code","829831de":"code","58e32c4e":"code","242f4080":"code","66a7714e":"code","94eef26c":"code","e8e31f7b":"code","2c2f7b51":"code","2197fad4":"code","32aea219":"code","d75ae4e9":"code","6c4c6cf2":"code","bdf9a934":"code","96345b50":"code","bfe960e3":"code","2bb657e1":"code","a0e628a0":"code","ab2d5f5a":"code","51cc77bc":"code","87ffa7b0":"code","cda86019":"code","f3379b60":"code","4078ee1a":"code","22060853":"code","85fc5a94":"code","f4a27192":"code","efaf5d12":"code","c6f582df":"code","3a8c65fa":"code","1a1843ea":"code","829df05c":"code","416b4fc5":"code","eed961e3":"code","79a00381":"code","4de465bc":"code","1457a3ff":"code","4f3b3bde":"code","c5e8e9a1":"code","8f4d2495":"code","0db60e9e":"code","5843b8c5":"code","2cefe032":"code","15cd1f74":"code","f352484a":"code","fb4c966b":"code","6f337cca":"code","ebc29eaf":"code","1558f70a":"markdown","e866ff0f":"markdown","193b7742":"markdown","904f18d1":"markdown","2af0ed6f":"markdown","b38a5d07":"markdown","d86f0f6c":"markdown","41a2d781":"markdown","4fcbfee6":"markdown","e056ad23":"markdown","1370de41":"markdown","9640ea28":"markdown","915c6a51":"markdown","ba0375ae":"markdown","d01190f8":"markdown","31cdaa69":"markdown","67134795":"markdown","77b76f2e":"markdown","e2ba2a71":"markdown","3a3864c7":"markdown","d2b9e05d":"markdown","3a73971e":"markdown","6731d7b1":"markdown","b6dcc303":"markdown","c63fe4bb":"markdown","05f620b0":"markdown","5349abfa":"markdown","a3a28bba":"markdown","4bbd301b":"markdown","d595942f":"markdown","18c172fa":"markdown","57bccfd2":"markdown","580212c9":"markdown","4d6b463e":"markdown"},"source":{"748893b9":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","7a317b49":"train = pd.read_csv('..\/input\/titanic\/train.csv')\n\ntest = pd.read_csv('..\/input\/titanic\/test.csv')","d500ad42":"train.head()","f5deb9d6":"train.info()","c3cf7784":"train.shape","30afdbc1":"plt.figure(figsize=(12,8))\nsns.heatmap(train.notnull());","44164eb5":"train.Age.isnull().sum()\/(len(train))*100","6ba8ef2b":"train.Cabin.isnull().sum()\/len(train)*100","12c0d348":"train.drop(columns=['Cabin', 'Name', 'Ticket', 'PassengerId'], axis=1, inplace=True)\n\ntrain.head()","b355df6a":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()","cef318f9":"train.iloc[:,2] = le.fit_transform(train.iloc[:,2])\n\ntrain.head()","de87581d":"train.Age.mean()","cb716892":"from sklearn.impute import SimpleImputer","27945e8c":"si = SimpleImputer(missing_values=np.nan, strategy='mean')","ac55ce85":"si.fit(train.iloc[:,3:4])","1f8a60c9":"train.iloc[:,3:4] = si.transform(train.iloc[:,3:4])","6809c0b3":"SI = SimpleImputer(missing_values=np.nan, strategy='most_frequent')","52739962":"SI.fit(train.iloc[:, 7:8])","6d9dddd6":"train.iloc[:,7:8] = SI.transform(train.iloc[:,7:8])","9f507434":"from sklearn.preprocessing import LabelEncoder","95625d47":"LE = LabelEncoder()","98baecac":"train.iloc[:, 7:8] = LE.fit_transform(train.iloc[:,7:8])","829831de":"train.isnull().sum()","58e32c4e":"plt.rcParams['figure.figsize'] = [12,8]\nsns.boxplot(train.Age, orient='v')\nplt.xlabel('Age', fontsize=14, fontweight='bold');","242f4080":"sns.boxplot(train.Fare, orient='v')\nplt.xlabel('Fare', fontsize=14, fontweight='bold', color='magenta');","66a7714e":"corr = train.corr().round(2)","94eef26c":"corr","e8e31f7b":"plt.figure(figsize=(12,8))\nsns.heatmap(corr, annot=True, linewidths=2, linecolor='white');","2c2f7b51":"sns.pairplot(train, hue='Survived');","2197fad4":"fig, ax = plt.subplots(2,2, figsize=(12,8))\n\ntrain.Survived.value_counts(sort = False).plot.bar(ax=ax[0][0], alpha=0.5)\ntrain.Sex.value_counts(sort=False).plot.bar(ax=ax[0][1])\ntrain.Pclass.value_counts(sort=False).plot.bar(ax=ax[1][0])\ntrain.Age.plot.hist(bins=10, ax=ax[1][1], alpha=0.5);","32aea219":"train.describe().round()","d75ae4e9":"train.head()","6c4c6cf2":"x = train.drop(columns='Survived')","bdf9a934":"y = train['Survived']","96345b50":"from sklearn.model_selection import train_test_split","bfe960e3":"x_train, x_test, y_train, y_test = train_test_split(x,y,random_state=123, test_size=0.2)","2bb657e1":"print(x_train.shape, x_test.shape)","a0e628a0":"from sklearn.ensemble import RandomForestClassifier","ab2d5f5a":"rfc = RandomForestClassifier(n_estimators=70, criterion='gini', min_samples_split=10, \n                             min_samples_leaf=5, oob_score=True, random_state=0)","51cc77bc":"rfc.fit(x_train, y_train)","87ffa7b0":"pred = rfc.predict(x_test)","cda86019":"pred","f3379b60":"rfc.estimators_","4078ee1a":"from sklearn import tree","22060853":"plt.figure(figsize=(20,15))\ntree.plot_tree(rfc.estimators_[3], filled=True);","85fc5a94":"from sklearn.metrics import confusion_matrix, classification_report, accuracy_score, plot_precision_recall_curve, plot_roc_curve","f4a27192":"print(classification_report(y_test, pred))","efaf5d12":"cf = confusion_matrix(y_test, pred)","c6f582df":"cf","3a8c65fa":"sns.heatmap(cf, annot=True);","1a1843ea":"tn, fp, fn, tp = confusion_matrix(y_test, pred).ravel()","829df05c":"plot_precision_recall_curve(rfc, x_test, y_test);","416b4fc5":"plot_roc_curve(rfc, x_test, y_test)\nplt.plot([0,1], [0,1], color='red', linestyle='--');","eed961e3":"test_eva = test.iloc[:, [1,3,4,5,6,8,10]]","79a00381":"print(test.shape, test_eva.shape)","4de465bc":"test_eva.head()","1457a3ff":"test_eva.iloc[:, 1:2]= LE.fit_transform(test_eva.iloc[:, 1:2])\n\ntest_eva.iloc[:,6:7] = LE.fit_transform(test_eva.iloc[:,6:7])","4f3b3bde":"test_eva.isnull().sum()","c5e8e9a1":"from sklearn.impute import SimpleImputer","8f4d2495":"SI = SimpleImputer(missing_values=np.nan, strategy='mean')","0db60e9e":"SI.fit(test_eva.iloc[:,2:3])","5843b8c5":"test_eva.iloc[:,2:3] = SI.transform(test_eva.iloc[:,2:3])","2cefe032":"SI.fit(test_eva.iloc[:, 5:6])\n\ntest_eva.iloc[:, 5:6] = SI.fit_transform(test_eva.iloc[:, 5:6])","15cd1f74":"predict = rfc.predict(test_eva)","f352484a":"predict","fb4c966b":"res = pd.DataFrame({'PassengerId':test.PassengerId, 'Survived':predict})","6f337cca":"res","ebc29eaf":"res.to_csv('Submission.csv', index=None)","1558f70a":"# Exploratory Data Analysis (EDA)","e866ff0f":"### There were 20% missing values in Age columns and Cabin column we have 77% missing values","193b7742":"# Plot RandomForest Tree","904f18d1":"#### Sex Columns","2af0ed6f":"# Load Libraries","b38a5d07":"# Train_Test_Split","d86f0f6c":"# Model Development_Random Forest","41a2d781":"# Filling the Missing Values in Both Age & Embarked Columns","4fcbfee6":"# Preparing the Test Data for Prediction of Survival","e056ad23":"# Outliers Detection","1370de41":"# Impute the Missing Values in Test data","9640ea28":"## Lable Encoding Both Sex & Embarked Column","915c6a51":"#### Embraked column is a Categorical variable fill the missing values with Most frequent Value","ba0375ae":"### Age","d01190f8":"#### Encoding the **Sex** column using Label encoder","31cdaa69":"# Predicting Results on Test Dataset","67134795":"### Assigning the Random Forest Classifier to an Object","77b76f2e":"# Check for Missing Values","e2ba2a71":"# Check the Null Value Count","3a3864c7":"# Spliiting the Dependent and Independent Varaible from training Data","d2b9e05d":"# Model Evaluation","3a73971e":"# Check the Corralation Betrween the variables","6731d7b1":"#### Cabin colums is having 77$ missing values and name and ticket number are not relevent for this Study","b6dcc303":"#Drop the Columns with >60% null values and not Relavent for this Study","c63fe4bb":"# Label Encoding the Sex Column","05f620b0":"#Lable Encoding the Enbarked Column","5349abfa":"### Merging predicted results with passenger ID","a3a28bba":"# Visualizing Non-Null Values","4bbd301b":"# Data **Describe()**","d595942f":"#### Impute the missing values in Age columns by using Mean","18c172fa":"#### Outliers detection in Fare Columns","57bccfd2":"# Load Data","580212c9":"## Fitting Model to Train DataSet","4d6b463e":"## Visualizing outliers By using Box Plots"}}