{"cell_type":{"b7cef94d":"code","85c10050":"code","e82ca0ee":"code","fcad9114":"code","d8a266c7":"code","0e195119":"code","10e791bb":"code","e015d824":"code","8ec02bef":"code","107c069f":"code","b4b14c76":"code","846bcc63":"code","8ad02ac6":"code","db74b4e5":"code","05641ae7":"code","ac0e2e4f":"code","3a969e12":"code","b64af15f":"code","e937b13b":"code","209c6e87":"code","ea54bc24":"code","003bf7c3":"code","e2ac3228":"code","160385d0":"code","e9088653":"markdown","3584ddfb":"markdown","91ba5500":"markdown","1a3ba76a":"markdown","7640abc2":"markdown","dac48579":"markdown","d50ed9c7":"markdown","9f2c0e3b":"markdown","6eea2aef":"markdown","4789d870":"markdown","ff41d1c5":"markdown"},"source":{"b7cef94d":"import os\nfor filenames in os.listdir('\/kaggle\/input\/'):\n        print(os.path.join(\"\/kaggle\/input\", filenames))","85c10050":"import numpy as np \nimport pandas as pd\n\nimport random\n\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img\n\nimport matplotlib.pyplot as plt","e82ca0ee":"base_dir = os.path.join(\"\/kaggle\/input\/rock-paper-scissors-dataset\/Rock-Paper-Scissors\")\nprint(\"Base directory --> \", os.listdir(base_dir))","fcad9114":"# Train set\ntrain_dir = os.path.join(\"\/kaggle\/input\/rock-paper-scissors-dataset\/Rock-Paper-Scissors\/train\/\")\nprint(\"Train --> \", os.listdir(train_dir))\n\n# Test set\ntest_dir = os.path.join(\"\/kaggle\/input\/rock-paper-scissors-dataset\/Rock-Paper-Scissors\/test\/\")\nprint(\"Test --> \", os.listdir(test_dir))\n\n# Validation set\nvalidation_dir = os.path.join(\"\/kaggle\/input\/rock-paper-scissors-dataset\/Rock-Paper-Scissors\/validation\/\")\nprint(\"Validation --> \", os.listdir(validation_dir)[:5])","d8a266c7":"# Displaying random image from the dataset\n\nfig, ax = plt.subplots(1, 3, figsize=(15, 10))\n\nsample_paper = random.choice(os.listdir(train_dir + \"paper\"))\nimage = load_img(train_dir + \"paper\/\" + sample_paper)\nax[0].imshow(image)\nax[0].set_title(\"Paper\")\nax[0].axis(\"Off\")\n\nsample_rock = random.choice(os.listdir(train_dir + \"rock\"))\nimage = load_img(train_dir + \"rock\/\" + sample_rock)\nax[1].imshow(image)\nax[1].set_title(\"Rock\")\nax[1].axis(\"Off\")\n\nsample_scissor = random.choice(os.listdir(train_dir + \"scissors\"))\nimage = load_img(train_dir + \"scissors\/\" + sample_scissor)\nax[2].imshow(image)\nax[2].set_title(\"Scissor\")\nax[2].axis(\"Off\")\n\nplt.show()","0e195119":"model = tf.keras.models.Sequential([\n    \n    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3)),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    \n    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    \n    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    \n    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    \n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(512, activation='relu'),\n    \n    tf.keras.layers.Dense(3, activation='softmax')\n])\n","10e791bb":"model.summary()","e015d824":"model.compile(loss = 'categorical_crossentropy',\n              optimizer = 'adam',\n              metrics = ['accuracy'])","8ec02bef":"class myCallback(tf.keras.callbacks.Callback):\n    def on_epoch_end(self, epoch, logs={}):\n        if(logs.get('accuracy')>0.95):\n            print(\"\\nReached >95% accuracy so cancelling training!\")\n            self.model.stop_training = True\n        \ncallbacks = myCallback()","107c069f":"train_datagen = ImageDataGenerator(\n      rescale=1.\/255,\n      rotation_range=40,\n      width_shift_range=0.2, # Shifting image width by 20%\n      height_shift_range=0.2,# Shifting image height by 20%\n      shear_range=0.2,       # Rotation across X-axis by 20%\n      zoom_range=0.2,        # Image zooming by 20%\n      horizontal_flip=True,\n      fill_mode='nearest')\n\ntrain_generator = train_datagen.flow_from_directory(\n    train_dir,\n    target_size = (150, 150),\n    class_mode = 'categorical',\n    batch_size = 20\n)","b4b14c76":"validation_datagen = ImageDataGenerator(rescale=1.\/255)\n\nvalidation_generator = validation_datagen.flow_from_directory(\n    test_dir,\n    target_size = (150, 150),\n    class_mode = 'categorical',\n    batch_size = 20\n)","846bcc63":"history = model.fit_generator(\n      train_generator,\n      steps_per_epoch = np.ceil(2520\/20),  # 2520 images = batch_size * steps\n      epochs = 10,\n      validation_data=validation_generator,\n      validation_steps = np.ceil(372\/20),  # 372 images = batch_size * steps\n      callbacks=[callbacks],\n      verbose = 2)","8ad02ac6":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(len(acc))\n\nplt.figure(figsize=(7,7))\n\nplt.plot(epochs, acc, 'r', label='Training accuracy')\nplt.plot(epochs, val_acc, 'b', label='Validation accuracy')\nplt.title('Training and validation accuracy')\nplt.legend()\n\nplt.figure(figsize=(7,7))\n\nplt.plot(epochs, loss, 'r', label='Training Loss')\nplt.plot(epochs, val_loss, 'b', label='Validation Loss')\nplt.title('Training and validation loss')\nplt.legend()\n\nplt.show()","db74b4e5":"test_img = os.listdir(os.path.join(validation_dir))\n\ntest_df = pd.DataFrame({'Image': test_img})\ntest_df.head()","05641ae7":"test_gen = ImageDataGenerator(rescale=1.\/255)\n\ntest_generator = test_gen.flow_from_dataframe(\n    test_df, \n    validation_dir, \n    x_col = 'Image',\n    y_col = None,\n    class_mode = None,\n    target_size = (150, 150),\n    batch_size = 20,\n    shuffle = False\n)","ac0e2e4f":"predict = model.predict_generator(test_generator, steps = int(np.ceil(33\/20)))","3a969e12":"# Identifying the classes\n\nlabel_map = dict((v,k) for k,v in train_generator.class_indices.items())\nlabel_map","b64af15f":"test_df['Label'] = np.argmax(predict, axis = -1) # axis = -1 --> To compute the max element index within list of lists\n\ntest_df['Label'] = test_df['Label'].replace(label_map)","e937b13b":"test_df.head()","209c6e87":"test_df.Label.value_counts()","ea54bc24":"test_df.Label.value_counts().plot.bar(color = ['red','blue','green'])\nplt.xticks(rotation = 0)\nplt.show()","003bf7c3":"v = random.randint(0, 25)\n\nsample_test = test_df.iloc[v:(v+18)].reset_index(drop = True)\nsample_test.head()\n\nplt.figure(figsize=(12, 24))\nfor index, row in sample_test.iterrows():\n    filename = row['Image']\n    category = row['Label']\n    img = load_img(validation_dir + filename, target_size = (150, 150))\n    plt.subplot(6, 3, index + 1)\n    plt.imshow(img)\n    plt.xlabel(filename + ' ( ' + \"{}\".format(category) + ' )' )\nplt.tight_layout()\nplt.show()","e2ac3228":"lis = []\nfor ind in test_df.index: \n    if(test_df['Label'][ind] in test_df['Image'][ind]):\n        lis.append(1)\n    else:\n        lis.append(0)","160385d0":"print(\"Accuracy of the model on test data is {:.2f}\".format((sum(lis)\/len(lis))*100))","e9088653":"### Training Generator with Image Augmentation","3584ddfb":"### Validation Generator","91ba5500":"### Visualizing the training","1a3ba76a":"### Results of testing the model with unseen images","7640abc2":"### Defining the CNN Model","dac48579":"### Callback Function","d50ed9c7":"### Importing necessary packages","9f2c0e3b":"### Test Generator","6eea2aef":"### Model Fitting","4789d870":"### Defining dataset path","ff41d1c5":"### Preparing the Test Data"}}