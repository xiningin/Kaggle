{"cell_type":{"790ede78":"code","78fadb0f":"code","2164b7ca":"code","15b1acb3":"code","7f5f218f":"code","42083d10":"code","302e9db6":"code","4f7c0fc9":"code","5413f900":"code","26136515":"code","c90d8e00":"code","33ce361a":"code","6ffbea3b":"code","c224bc90":"code","13391ec6":"code","73b8b342":"markdown","10cec1a8":"markdown","e546e3ba":"markdown","b485215b":"markdown","09956cdc":"markdown","209e6652":"markdown","ecdb38b0":"markdown","6dc3c70f":"markdown","5fd027c1":"markdown"},"source":{"790ede78":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom sklearn.manifold import TSNE\nimport matplotlib.pyplot as plt\n\nimport keras\nfrom keras.datasets import mnist \nfrom keras.models import Sequential \nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D,MaxPooling2D\nimport keras.backend as K\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","78fadb0f":"train_images = np.load('..\/input\/kmnist-train-imgs.npz')['arr_0']\ntest_images = np.load('..\/input\/kmnist-test-imgs.npz')['arr_0']\n\n\ntrain_labels = np.load('..\/input\/kmnist-train-labels.npz')['arr_0']\ntest_labels = np.load('..\/input\/kmnist-test-labels.npz')['arr_0']","2164b7ca":"print(\"K-MNIST train shape:\", train_images.shape)\nprint(\"K-MNIST test shape:\", test_images.shape)\n\nprint(\"K-MNIST train shape:\", train_labels.shape)\nprint(\"K-MNIST test shape:\", test_labels.shape)","15b1acb3":"plt.figure(figsize = (10,10))\n\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(train_images[i], cmap = plt.cm.binary)\n    plt.xlabel(train_labels[i])","7f5f218f":"plt.figure()\nplt.imshow(train_images[0])\nplt.colorbar()\nplt.grid(False)","42083d10":"# Sample from the training set\nsample_size = 5000\n\nidx = np.random.choice(50000, size=sample_size, replace=False)\ntrain_sample = train_images.reshape(60000, -1)[idx, :]\nlabel_sample = train_labels[idx]\n\n# Generate 2D embedding with TSNE\nembeddings = TSNE(verbose=2).fit_transform(train_sample)","302e9db6":"vis_x = embeddings[:, 0]\nvis_y = embeddings[:, 1]\n\nplt.figure(figsize=(20,10))\nplt.scatter(vis_x, vis_y, c=label_sample, cmap=plt.cm.get_cmap(\"jet\", 10))\nplt.colorbar(ticks=range(10))\nplt.show()","4f7c0fc9":"x_train_flat = train_images.reshape(60000,-1)\n\nx_test_flat = test_images.reshape(10000,-1)","5413f900":"x_train = np.expand_dims(train_images,axis = -1)\nx_test = np.expand_dims(test_images,axis= -1)\n\ny_train = keras.utils.to_categorical(train_labels)\ny_test = keras.utils.to_categorical(test_labels)","26136515":"img_rows , img_cols = 28,28\nbatch_size = 128 \nnum_classes = 10 \nepochs = 50","c90d8e00":"model = Sequential()\n\nmodel.add(Conv2D(32, kernel_size=(3, 3),\n                 activation='relu',\n                 input_shape=(img_rows, img_cols, 1)))\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(num_classes, activation='softmax'))\n\nmodel.compile(loss = keras.losses.categorical_crossentropy, \n                             optimizer = keras.optimizers.Adam(),\n                                 metrics = ['accuracy'])","33ce361a":"history = model.fit(x_train,y_train, batch_size = batch_size, epochs =epochs, verbose = 1, validation_split = 0.3)","6ffbea3b":"plt.plot(history.history['acc'])\nplt.plot(history.history['val_acc'])\nplt.legend(['Training', 'Validation'])\nplt.title('Accuracy')\nplt.xlabel('Epochs')","c224bc90":"test_accuracy = model.evaluate(x_test, y_test)[1]\ntest_accuracy","13391ec6":"baseline = KNeighborsClassifier(n_neighbors=3, n_jobs=-1)\nbaseline.fit(x_train_flat, train_labels)\nprint(\"k-NN Test Accuracy:\", baseline.score(x_test_flat, test_labels))","73b8b342":"* ***Our CNN performs better than the Baseline version***","10cec1a8":"**Displaying Single Images**","e546e3ba":"* There are 60,000 samples in training set of 28*28 size\n* 10,000 samples of 28*28 in test set ","b485215b":"***Loading the Packages***","09956cdc":"***CNN with Keras***","209e6652":"***Data Exploration & Visualization***","ecdb38b0":"***Comparing CNN with Baseline Model ***","6dc3c70f":"***Loading the Dataset***","5fd027c1":"**Displaying Sample Images**"}}