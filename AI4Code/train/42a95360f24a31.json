{"cell_type":{"f1f614b5":"code","5147d78b":"code","e08d5660":"code","728e038c":"code","c825231a":"code","831d652f":"code","48c96132":"code","247d21ba":"code","b385c71c":"code","690eca50":"code","82d3dffa":"code","34edc3d6":"code","b783627b":"code","6b095745":"code","aae2928c":"code","0d080347":"code","d6ce52fe":"code","f9b05430":"code","e72f6178":"code","85fce356":"code","ec000214":"code","639b74b5":"code","9b8fa338":"code","f91f7371":"markdown","069d615f":"markdown","5904e98f":"markdown","5941cbf9":"markdown","e02f0376":"markdown","b8260c77":"markdown","910413a2":"markdown","8aad306d":"markdown","c470a8f4":"markdown","304cbfdf":"markdown","326c41a4":"markdown","e7b3fb2a":"markdown","7545a87f":"markdown","c2467b25":"markdown","174f68a5":"markdown","24a90ad0":"markdown","ec3db29f":"markdown","fb39bd96":"markdown","92f68fab":"markdown","51528079":"markdown","865fd722":"markdown","e975d960":"markdown","c581de8b":"markdown","95fa879a":"markdown","c076996b":"markdown","7ad61704":"markdown"},"source":{"f1f614b5":"# Imports\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt # As we are on it let's import packages that will enable us to plot things.\nimport seaborn as sns","5147d78b":"temp_df = \\\n    pd.read_csv(\"..\/input\/france_temperatures_geopositions.csv\", sep=\",\")[[\"Latitude\", \"Longitude\", \"Mois\", \"NORTAV\"]] \\\n      .rename(columns = {\"NORTAV\": \"Temperature\", \"Mois\": \"Month\", \"Latitude\": \"latitude\", \"Longitude\": \"longitude\"})\n\ntemp_df.head(3)","e08d5660":"# We also need to load our mistery city temperature data from the image !\nmystery_city_temp_df = \\\n    pd.DataFrame(\n        columns=[\"Month\", \"Temperature_Mystery_Location\"],\n        data=[\n            [1, 5.6],\n            [2, 5.9],\n            [3, 8.1],\n            [4, 10.2],\n            [5, 13],\n            [6, 15.7],\n            [7, 17.4],\n            [8, 17.4],\n            [9, 15.9],\n            [10, 12.5],\n            [11, 8.7],\n            [12, 6.5]\n        ]\n    )","728e038c":"#\u00a0The mystery city temperatures info\nmystery_city_temp_df","c825231a":"# A bit less straightforward here, to add the longitude\/latitude information\n# we'll join our city_population dataframe with a city_geoposition dataframe on code_insee, a unique ID per city\n\n# Load\ncity_pop_df = \\\n    pd.read_csv(\"..\/input\/france_city_populations.csv\", sep=\",\")[[\"Nom de la commune\", \"Population totale\", \"Code d\u00e9partement\", \"Code commune\"]]\\\n      .rename(columns = {\"Nom de la commune\": \"city_name\", \"Population totale\": \"population\"})\n\ncity_geoposition_df = \\\n    pd.read_csv(\"..\/input\/france_city_geopositions.csv\", sep=\",\")[[\"latitude\", \"longitude\", \"code_insee\"]] \\\n      .rename(columns = {\"codes_postaux\": \"postal_code\"})\n\n# Create or format the joining column according to table\ncity_pop_df[\"code_insee\"] = \\\n    city_pop_df[\"Code d\u00e9partement\"].apply(lambda x:x.zfill(2)) + city_pop_df[\"Code commune\"].apply(lambda x:'%03d'%x)\n\ncity_geoposition_df[\"code_insee\"] = city_geoposition_df[\"code_insee\"].apply(lambda x:'%05d'%x)\n\n# Joining on city names can be tricky because of special characters, one has to be cautious\ncity_pop_geoposition_df = \\\n    city_pop_df\\\n        .merge(city_geoposition_df, on=\"code_insee\", how=\"inner\") \\\n        .dropna()\n\n# Formatting of the longitude and latitude columns and filtering out some bad values \n# (France max longitude should be around 10)\ncity_pop_geoposition_df[\"longitude\"] = \\\n    city_pop_geoposition_df[\"longitude\"].apply(lambda x:round(float(x), 2) if x!='-' else 0)\n\ncity_pop_geoposition_df[\"latitude\"] = \\\n    city_pop_geoposition_df[\"latitude\"].apply(lambda x:round(float(x), 2) if x!='-' else 0)\n\ncity_pop_geoposition_df = city_pop_geoposition_df[city_pop_geoposition_df[\"longitude\"] < 10]\ncity_pop_geoposition_df = city_pop_geoposition_df.drop_duplicates()[[\"city_name\", \"population\", \"latitude\", \"longitude\"]]\n\n# We should normally check for duplicates and missing values.\n# In practice this won't pose any problem here, but could have","831d652f":"# The dataframe that contains population by city along their geoposition \ncity_pop_geoposition_df.head(3)","48c96132":"# Merge both dataframes\ntemp_df_merged = temp_df.merge(mystery_city_temp_df, on=\"Month\")\n\n# Compute metric per position per month\ntemp_df_merged[\"diff_squared_temperatures\"] = \\\n    (temp_df_merged[\"Temperature\"] - temp_df_merged[\"Temperature_Mystery_Location\"])**2 \/12\n\n# Aggregate per position\ntemp_metric_df = temp_df_merged\\\n    .groupby([\"latitude\", \"longitude\"], as_index=False)\\\n    .diff_squared_temperatures.agg(['mean'])\\\n    .reset_index() \\\n    .rename(columns={\"mean\": \"mean_squared_diff\"})","247d21ba":"temp_metric_df.sort_values([\"mean_squared_diff\"]).reset_index().head(5)","b385c71c":"sns.set(rc={'figure.figsize':(6,5)})\nplt.scatter(\n    temp_metric_df.longitude,\n    temp_metric_df.latitude,\n    c=temp_metric_df.mean_squared_diff\n)\nplt.colorbar()\nplt.title(\"Average squared difference in temperature with the mystery city\")\nplt.show()","690eca50":"sns.set(rc={'figure.figsize':(30,10)})\nsns.distplot(temp_metric_df[\"mean_squared_diff\"], bins=500)\nplt.title(\"Distribution of mean_squared_difference of temperature across all geolocalised points\", fontsize=20)","82d3dffa":"sns.distplot(temp_metric_df[temp_metric_df[\"mean_squared_diff\"] < 2][\"mean_squared_diff\"], bins=500)\nplt.title(\"Distribution of mean_squared_difference of temperature across all geolocalised points - zoomed in\", fontsize=20)","34edc3d6":"sns.set(rc={'figure.figsize':(15,13)})\n\nfig, ax = plt.subplots(2, 2)\ns = ax[0, 0].scatter(temp_metric_df.longitude, temp_metric_df.latitude, c=temp_metric_df.mean_squared_diff, vmax=0.5)\nfig.colorbar(s, ax=ax[0, 0])\n\ns = ax[0, 1].scatter(temp_metric_df.longitude, temp_metric_df.latitude, c=temp_metric_df.mean_squared_diff, vmax=0.2)\nfig.colorbar(s, ax=ax[0, 1])\n\ns = ax[1, 0].scatter(temp_metric_df.longitude, temp_metric_df.latitude, c=temp_metric_df.mean_squared_diff, vmax=0.06)\nfig.colorbar(s, ax=ax[1, 0])\n\ns = ax[1, 1].scatter(temp_metric_df.longitude, temp_metric_df.latitude, c=temp_metric_df.mean_squared_diff, vmax=0.03)\nfig.colorbar(s, ax=ax[1, 1])\n\n\nfig.suptitle('Mean Squared difference across all locations for different colorscales', fontsize=16)\n\nplt.show()","b783627b":"# Compute the percentile information\ntemp_metric_df['percentile_temp'] = \\\n    temp_metric_df[\"mean_squared_diff\"].rank(pct=True)","6b095745":"city_pop_geoposition_df.shape[0]","aae2928c":"# A look at the distribution (with removed outliers)\nsns.set(rc={'figure.figsize':(30,10)})\nsns.distplot(city_pop_geoposition_df[city_pop_geoposition_df[\"population\"] < 100000][\"population\"], bins=500)\nplt.title(\"Distribution of population counts across all French cities\", fontsize=20)","0d080347":"city_pop_geoposition_df[\"population_diff\"] = abs(city_pop_geoposition_df[\"population\"] - 45000)\n\n# Computes the percentile information\ncity_pop_geoposition_df[\"percentile_population\"] = \\\n    city_pop_geoposition_df[\"population_diff\"].rank(pct=True)\n\n# Let's represent the 100 cities which population count are the closest to 45000\ncity_pop_geoposition_df_head = city_pop_geoposition_df.sort_values([\"population_diff\"]).reset_index().head(100)\n\nsns.set(rc={'figure.figsize':(8,7)})\nplt.scatter(city_pop_geoposition_df.longitude, city_pop_geoposition_df.latitude, s=10, c='grey')\nplt.scatter(city_pop_geoposition_df_head.longitude, city_pop_geoposition_df_head.latitude, s=100, c=city_pop_geoposition_df_head.population_diff)\nplt.colorbar()\nplt.title(\"Population count difference with the mystery city for the 100 closest cities\")\nplt.show()","d6ce52fe":"# To join the info we have to make a join with longitude and latitude information.\n# This is not a straightforward thing to do due to the different precisions the datasets might have\n# Hence, we'll join information by selecting the closest point neighbours for each line of dataframe A \n# to each line of dataframe B\n\n# This is a costly operation so we'll do on the shortlist we could have created from the population analysis above,\n# keeping 2000 cities is far enough\npotential_cities_df = city_pop_geoposition_df.sort_values([\"population_diff\"]).reset_index().head(2000)\n\ndef euc_dist(lata, latb, longa, longb):\n    return np.sqrt((lata - latb)**2 + (longa - longb)**2)\n\n# prepare the cross join\npotential_cities_df['key'] = 0\ntemp_metric_df['key'] = 0\n\n# perform cross join and computes distance\ncrossed_info = potential_cities_df.merge(temp_metric_df, on=\"key\")\ncrossed_info[\"euc_distance\"] = euc_dist(crossed_info[\"latitude_x\"], crossed_info[\"latitude_y\"], crossed_info[\"longitude_x\"], crossed_info[\"longitude_y\"])\n\n# Select for each city the closest temperature information\ncrossed_info = crossed_info.sort_values('euc_distance', ascending=True).drop_duplicates(['city_name'])","f9b05430":"# That's it ! We now have the two metric for our shortlisted cities.\n#\u00a0(note that we associate them with their respective percentiles)\ncrossed_info[[\"city_name\", \"population_diff\", \"mean_squared_diff\", \"percentile_population\", \"percentile_temp\"]].head(5) ","e72f6178":"crossed_info_filtered = crossed_info[crossed_info[\"percentile_population\"] < 0.05]\ncrossed_info_filtered = crossed_info_filtered[crossed_info_filtered[\"percentile_temp\"] < 0.05]\ncrossed_info_filtered = crossed_info_filtered.reset_index()\n\nsns.set(rc={'figure.figsize':(15,13)})\np = sns.regplot(\n    data=crossed_info_filtered,\n    x=\"percentile_population\",\n    y=\"percentile_temp\",\n    fit_reg=False,\n    scatter_kws={'s':200},\n    color=\"skyblue\"\n)\n\n\n# add annotations one by one with a loop\nfor line in range(0, crossed_info_filtered.shape[0]):\n     p.text(\n         crossed_info_filtered.percentile_population[line] + 0.0005,\n         crossed_info_filtered.percentile_temp[line],\n         crossed_info_filtered.city_name[line],\n         horizontalalignment='left',\n         size='small',\n         color='grey',\n     )\n        \nplt.xlim(0, 0.05)\nplt.ylim(0, 0.05)\n\nplt.title(\"Top shortlisted cities, given their population and temperature features percentiles\")","85fce356":"crossed_info_filtered[crossed_info_filtered[\"city_name\"] == \"Auray\"][[\"city_name\", \"population\", \"population_diff\", \"mean_squared_diff\", \"percentile_population\", \"percentile_temp\"]]","ec000214":"crossed_info_filtered[crossed_info_filtered[\"city_name\"] == \"Lanester\"][[\"city_name\", \"population\", \"population_diff\", \"mean_squared_diff\", \"percentile_population\", \"percentile_temp\"]]","639b74b5":"crossed_info_filtered[crossed_info_filtered[\"city_name\"] == \"Saint-Herblain\"][[\"city_name\", \"population\", \"population_diff\", \"mean_squared_diff\", \"percentile_population\", \"percentile_temp\"]]","9b8fa338":"print(\"On average, Saint-Herblain's monthly average temperature is %s\u00b0C away from our hint distribution\" % round(np.sqrt(0.051807),2))","f91f7371":"# Getting data <a name=\"chap2\"><\/a>\n\nHow to easily get temperature and population information in France ? Google datasets recently came to the rescue !\n\n## Temperature\n\nA quick query over Google Datasets points out to https:\/\/www.data.gouv.fr\/, a French government open-data initiative. Here, we'll use _Meteo France_ data that we can on this specific address: https:\/\/www.data.gouv.fr\/en\/datasets\/indices-annuels-de-temperature-et-nombre-de-jours-de-temperature-issus-du-modele-aladin-climat\/#_\n\nWhat does REF, RCP8.5 .. etc mean ? Well, this data is the output of a climate model named Aladin which is used by meteorologists. REF, RCP8.5 seem simply different input parameters of the model, that won't change much our analysis.\n\nAnother thing to point out is the schema of this data set. To make it simple, we'll come up with the table:\n| Longitude | Latitude | Mean temperature |\n\nWarning !\n- Here the mean temperature is computed over the period 1976-2005. This might have an impact later on.\n- This dataset is not 'by city', but 'by longitude\/latitude tuple', we'll need to join this info with an other dataset to get cities.\n\n## Population\nGoogle datasets directly point us to INSEE's public data. The French national organisation that produces statistics about the country's economics and demographics.\n\nWe'll get the 2015's population by city report here:\nhttps:\/\/www.insee.fr\/fr\/statistiques\/3545833?sommaire=3292701\n\nTo get geopositions we'll use the table available here: https:\/\/www.data.gouv.fr\/en\/datasets\/listes-des-communes-geolocalisees-par-regions-departements-circonscriptions-nd\/","069d615f":"Saint-Malo city seems to stand out by being alone close to the origin. It is one of the few in the top 1% for both metrics.\n\nA couple of cities match very well a hint (better than our point close to the origin), but perform less better when matching the other.\n\nNow we could select Saint-Malo and let it go but we should look at these other cities as well. In the event that one of the two hints was very inaccurate they could have been disadvantaged by our calculations.**","5904e98f":"# Temperature distibution matching <a name=\"chap3\"><\/a>\n\n## Compute distribution of temperature distance\n\nWe'll simply compute the average squared difference to compare the distribution. \nWhy ? \n- We want to compare values between each other and the square enables to account for negative differences.\n- It makes sense that smaller difference should impact way less the overall results than great difference (hence the square)\n- Averaging the results over the different months makes sense as well to get a more intuitive sense over what's happening\n","5941cbf9":"# The result <a name=\"chap6\"><\/a>\n\nAnd the answer is... that Saint-Malo might be the mysterious city ! It seems likely, but given the precision of out hints we could think about Saint-Herblain, Vannes and Lorient as well.\n\nAs a conclusion, the analysis of the two (almost independant) features enables us to narrow this down to a couple off cities with good confidence.\n\nHowever, the lack of precision given in the hints prevent us from using more subtle techniques to describe precisely how confident we are in our shortlisted cities. Plus, to select the final city we'll have to weigh the two features (population and mean temperatures) against each other. No city is first contendant in both.","e02f0376":"# The conclusion <a name=\"chap7\"><\/a>\n\nIn practice the mystery city was indeed Saint-Malo! :) This was a fun thing to try, and shows the power of open-source data. Indeed, we could always have  scraped wikipedia or other websites to get these info as well; But today, I believe that theses tables enable any person with basic data handling abilities to get the same result.","b8260c77":"Auray matches the temperature distribution very well but is 30000 population count away from our hint ! We should discard that.","910413a2":"### Population","8aad306d":"The distribution is highly skewed to the left. And as we have some outliers near the Alps the colormap is wrongly automatically set. Let's have a closer look at the bulk of the distribution","c470a8f4":"### Temperature","304cbfdf":"32263 cities are registered in the table. The global population count distribution across all cities in France is as follow:","326c41a4":"## Transforming downloaded data to Pandas dataframe","e7b3fb2a":"We only have a couple of cities which population count get very close to 45000. This information alone wouldn't enable us to find the mystery city, but it is still quite selective. Hopefully crossing this information with the temperature study above will make it.\n\nThis number alone enables us to reduce the study to a hundreth of cities. It's unlikely that given the hint our mistery city has a population count above 50000 or below 40000.","7545a87f":"*We can now get going !*","c2467b25":"This zoom enables us to see that we do have locations that match our mystery city very closely in terms of temperature. And that there are not tons of them like this. This is encouraging. The distribution enables us to manually set a proper colorscale.","174f68a5":"# Crossing information <a name=\"chap5\"><\/a>\n\nWhat's the good way of crossing the information given by our two metrics ? (difference in population count, and mean squared difference on the monthly temperature distribution).\n\nA product of the two maybe ? or by putting a square on population differences before multiplying info together ? We don't know for sure, hence, best way to choose is to look at the data. Let's represent our 100 potential cities and their metrics, by percentile rank in a 2Dimensional graph. ","24a90ad0":"## Plotting results\n\nLet's plot the previously computed metric it in a geographical fashion!","ec3db29f":"# Population matching <a name=\"chap4\"><\/a>","fb39bd96":"This seems like a smaller difference and in my opinion we shouldn't discard it.","92f68fab":"This is not useful. The whole map (almost) is black, hence 'close' to the mystery city temperature distribution. Or is it ? Fact here is that the **colormap is wrongly set**. We will better understand this by looking at the distribution of our mean_squared_difference.","51528079":"# Summary\n1. [A closer look at the hints](#chap1)\n2. [Getting data](#chap2)\n3. [Temperature distribution matching](#chap3)\n4. [Population matching](#chap4)\n5. [Crossing information](#chap5)\n6. [The result](#chap6)\n7. [Conclusion](#chap7)","865fd722":"# Can we find a city name given only population counts and temperature information ?","e975d960":"## Intermediate conclusions\n\nIn the lower right map we can make out two areas in north-west of France (Bretagne) that are our best candidates. We are not sure about the precision of this metric (given than the hint lacks info) hence we might consider the south\/south-west region of France (Pyr\u00e9n\u00e9es) that lights up in the lower left corner. Maybe north of France as well.\n\nIn a nutshell, this hint enables to narrow down the analysis to few regions, but is not enough to pinpoint a specific area.\n\nThere are not many regions left to consider so we could look up a map and find average sized cities that have around 45000 people, but we'll try to do it with data","c581de8b":"# A closer look at the hints <a name=\"chap1\"><\/a>\n\nWhile the hints about population and temperature seem powerful at first we may notice that they lack information.\n\nFirst, the population. Two things to be careful about here.\n- The precision. The data seems to have been rounded in some way. However, has it been rounded to the nearest 5 thousands (Then the true population would be 45000 +\/- 2500) or to the nearest thousand (Then the true population would be 45000 +\/- 500) ? or anything else ? We don't know for sure.\n- Time information. Is this number the population of yesterday ? last year ? has it been rounded over the last ten years ? We don't know. However we could guess that this a recent information (my friends probably looked it up on Wikipedia)\n\nThen, the monthly temperature distribution. No precision troubles here (we seem enough significant numbers under the celsius unit so that should be fine enough). However there is no time information about the data as well. Is it last year data ? data smoothed over the 10, 20, 50 last years ?","95fa879a":"Same thing for Lanester ! It was to be expected given the look at the population count distribution. It super selective. Hence we should consider only cities in the left part of the graph.","c076996b":"# Introduction\n\nI was recently challenged by friends to find the location of a \"surprise weekend\" given few hints:\nI was told that it was in **France** and that there were around **45000 habitants** in the city. I was also given this table which looks like a monthly average** temperature diagram**.\n\n\n|                          | January | February | March | April | May | June | July | August | September | October | November | December |\n|--------------------------|---------|----------|-------|-------|-----|------|------|--------|-----------|---------|----------|----------|\n| Average temperature (\u00b0C) |   5.6   |    5.9   |  8.1  |  10.2 |  13 | 15.7 | 17.4 |  17.4  |    15.9   |   12.5  |    8.7   |    6.5   |\n\nIs it enough to find the mystery place ? Let's find out.","7ad61704":"There are A LOT of small villages.\nWe'll just look for the cities which have a population count close to 45000. There should be **few** according to the distribution."}}