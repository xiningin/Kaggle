{"cell_type":{"91a48f4b":"code","451f7287":"code","f8a278f1":"code","616cd825":"code","d36d5d80":"code","83805d0f":"code","d78eb094":"code","da0b86c9":"code","2cd51e96":"code","dade878b":"code","96ed3715":"code","161d90d5":"code","f8ca337b":"code","0cf1a48e":"code","afb9dec3":"code","76e7b47f":"code","4ab1fe15":"code","40c892ef":"code","fe61f8f5":"code","0888ed4d":"code","0bb1c96e":"code","ea306668":"code","e34a01b8":"code","dea01894":"code","5b5da752":"code","92c50d48":"code","3ee353a4":"code","6e45b6ed":"code","96fada91":"code","e0def023":"code","e67b7e8c":"code","966b372f":"code","2a2d2647":"code","1f6e9555":"code","124579b5":"code","102912a3":"code","f36463b6":"code","ce8abcc5":"code","2fd767a8":"code","1c6b3422":"code","0ae95cd7":"code","69bca43e":"code","09783ecf":"code","cb720ed6":"markdown","ab3ee3b0":"markdown","944f0af7":"markdown","67d97be3":"markdown","0ee8c24a":"markdown","78041996":"markdown","8254f0e6":"markdown","27d138f2":"markdown","6c4bff82":"markdown"},"source":{"91a48f4b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\nimport numpy as np \nimport pandas as pd \nimport nltk\nimport os\nimport gc\nfrom keras.preprocessing import sequence,text\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.models import Sequential\nfrom keras.layers import Dense,Dropout,Embedding,LSTM,Conv1D,GlobalMaxPooling1D,Flatten,MaxPooling1D,GRU,SpatialDropout1D,Bidirectional\nfrom keras.callbacks import EarlyStopping\nfrom keras.utils import to_categorical\nfrom keras.losses import categorical_crossentropy\nfrom keras.optimizers import Adam\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score,confusion_matrix,classification_report,f1_score\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n#pd.set_option('display.max_colwidth',100)\npd.set_option('display.max_colwidth', -1)\n\n# Any results you write to the current directory are saved as output.","451f7287":"train=pd.read_csv('..\/input\/train.tsv',sep='\\t')\ntrain.head()","f8a278f1":"print(train.shape)","616cd825":"test=pd.read_csv('..\/input\/test.tsv',sep='\\t')\n\ntest.head()","d36d5d80":"print(test.shape)","83805d0f":"sub=pd.read_csv('..\/input\/sampleSubmission.csv')\nsub.head()","d78eb094":"test['Sentiment']=-999\ntest.head()","da0b86c9":"df=pd.concat([train,test],ignore_index=True)\nprint(df.shape)\ndf.tail()","2cd51e96":"del train,test\ngc.collect()","dade878b":"from nltk.tokenize import word_tokenize\nfrom nltk import FreqDist\nfrom nltk.stem import SnowballStemmer,WordNetLemmatizer\nstemmer=SnowballStemmer('english')\nlemma=WordNetLemmatizer()\nfrom string import punctuation\nimport re","96ed3715":"def clean_review(review_col):\n    review_corpus=[]\n    for i in range(0,len(review_col)):\n        review=str(review_col[i])\n        review=re.sub('[^a-zA-Z0-9]',' ',review)\n        #review=[stemmer.stem(w) for w in word_tokenize(str(review).lower())]\n        review=[lemma.lemmatize(w) for w in word_tokenize(str(review).lower())]\n        review=' '.join(review)\n        review_corpus.append(review)\n    return review_corpus","161d90d5":"df['clean_review']=clean_review(df.Phrase.values)\ndf.head()","f8ca337b":"df_train=df[df.Sentiment!=-999]\ndf_train.shape","0cf1a48e":"df_train.head()","afb9dec3":"df_test=df[df.Sentiment==-999]\ndf_test.drop('Sentiment',axis=1,inplace=True)\nprint(df_test.shape)\ndf_test.head()","76e7b47f":"del df\ngc.collect()","4ab1fe15":"train_text=df_train.clean_review.values\ntest_text=df_test.clean_review.values\ntarget=df_train.Sentiment.values\ny=to_categorical(target)\nprint(train_text.shape,target.shape,y.shape)","40c892ef":"X_train_text,X_val_text,y_train,y_val=train_test_split(train_text,y,test_size=0.2,stratify=y,random_state=123)\nprint(X_train_text.shape,y_train.shape)\nprint(X_val_text.shape,y_val.shape)","fe61f8f5":"all_words=' '.join(X_train_text)\nall_words=word_tokenize(all_words)\ndist=FreqDist(all_words)\nnum_unique_word=len(dist)\nnum_unique_word","0888ed4d":"r_len=[]\nfor text in X_train_text:\n    word=word_tokenize(text)\n    l=len(word)\n    r_len.append(l)\n    \nMAX_REVIEW_LEN=np.max(r_len)\nMAX_REVIEW_LEN","0bb1c96e":"max_features = num_unique_word\nmax_words = MAX_REVIEW_LEN\nbatch_size = 128\nepochs = 5\nnum_classes=5","ea306668":"tokenizer = Tokenizer(num_words=max_features)\ntokenizer.fit_on_texts(list(X_train_text))\nX_train = tokenizer.texts_to_sequences(X_train_text)\nX_val = tokenizer.texts_to_sequences(X_val_text)\nX_test = tokenizer.texts_to_sequences(test_text)","e34a01b8":"X_train = sequence.pad_sequences(X_train, maxlen=max_words)\nX_val = sequence.pad_sequences(X_val, maxlen=max_words)\nX_test = sequence.pad_sequences(X_test, maxlen=max_words)\nprint(X_train.shape,X_val.shape,X_test.shape)","dea01894":"model1=Sequential()\nmodel1.add(Embedding(max_features,100,mask_zero=True))\nmodel1.add(LSTM(64,dropout=0.4, recurrent_dropout=0.4,return_sequences=True))\nmodel1.add(LSTM(32,dropout=0.5, recurrent_dropout=0.5,return_sequences=False))\nmodel1.add(Dense(num_classes,activation='softmax'))\nmodel1.compile(loss='categorical_crossentropy',optimizer=Adam(lr=0.001),metrics=['accuracy'])\nmodel1.summary()","5b5da752":"%%time\nhistory1=model1.fit(X_train, y_train, validation_data=(X_val, y_val),epochs=epochs, batch_size=batch_size, verbose=1)","92c50d48":"y_pred1=model1.predict_classes(X_test,verbose=1)","3ee353a4":"### plot the accuray\ndef train_validation(x, vy, ty, ax, colors=['b']):\n    ax.plot(x, vy, 'b', label=\"Validation Loss\")\n    ax.plot(x, ty, 'r', label=\"Train Loss\")\n    plt.legend()\n    plt.grid()\n    fig.canvas.draw()\n    \nfig,ax = plt.subplots(1,1)\nax.set_xlabel('epoch') ; \nax.set_ylabel('Binary Crossentropy Loss')\nx = list(range(1,epochs+1))\nvy = history1.history['val_loss']\nty = history1.history['loss']\ntrain_validation(x, vy, ty, ax)","6e45b6ed":"sub.Sentiment=y_pred1\nsub.to_csv('sub1.csv',index=False)\nsub.head()","96fada91":"model2= Sequential()\nmodel2.add(Embedding(max_features,100,input_length=max_words))\nmodel2.add(Dropout(0.2))\n\nmodel2.add(Conv1D(64,kernel_size=3,padding='same',activation='relu',strides=1))\nmodel2.add(GlobalMaxPooling1D())\n\nmodel2.add(Dense(128,activation='relu'))\nmodel2.add(Dropout(0.2))\n\nmodel2.add(Dense(num_classes,activation='softmax'))\n\n\nmodel2.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])\n\nmodel2.summary()\n","e0def023":"%%time\nhistory2=model2.fit(X_train, y_train, validation_data=(X_val, y_val),epochs=epochs, batch_size=batch_size, verbose=1)","e67b7e8c":"### plot the accuray\ndef train_validation(x, vy, ty, ax, colors=['b']):\n    ax.plot(x, vy, 'b', label=\"Validation Loss\")\n    ax.plot(x, ty, 'r', label=\"Train Loss\")\n    plt.legend()\n    plt.grid()\n    fig.canvas.draw()\n    \nfig,ax = plt.subplots(1,1)\nax.set_xlabel('epoch') ; \nax.set_ylabel('Binary Crossentropy Loss')\nx = list(range(1,epochs+1))\nvy = history2.history['val_loss']\nty = history2.history['loss']\ntrain_validation(x, vy, ty, ax)","966b372f":"y_pred2=model2.predict_classes(X_test, verbose=1)","2a2d2647":"sub.Sentiment=y_pred2\nsub.to_csv('sub2_cnn.csv',index=False)\nsub.head()","1f6e9555":"model3= Sequential()\nmodel3.add(Embedding(max_features,100,input_length=max_words))\nmodel3.add(Conv1D(64,kernel_size=3,padding='same',activation='relu'))\nmodel3.add(MaxPooling1D(pool_size=2))\nmodel3.add(Dropout(0.25))\nmodel3.add(GRU(128,return_sequences=True))\nmodel3.add(Dropout(0.3))\nmodel3.add(Flatten())\nmodel3.add(Dense(128,activation='relu'))\nmodel3.add(Dropout(0.5))\nmodel3.add(Dense(5,activation='softmax'))\nmodel3.compile(loss='categorical_crossentropy',optimizer=Adam(lr=0.001),metrics=['accuracy'])\nmodel3.summary()","124579b5":"%%time\nhistory3=model3.fit(X_train, y_train, validation_data=(X_val, y_val),epochs=epochs, batch_size=batch_size, verbose=1)","102912a3":"### plot the accuray\ndef train_validation(x, vy, ty, ax, colors=['b']):\n    ax.plot(x, vy, 'b', label=\"Validation Loss\")\n    ax.plot(x, ty, 'r', label=\"Train Loss\")\n    plt.legend()\n    plt.grid()\n    fig.canvas.draw()\n    \nfig,ax = plt.subplots(1,1)\nax.set_xlabel('epoch') ; \nax.set_ylabel('Binary Crossentropy Loss')\nx = list(range(1,epochs+1))\nvy = history3.history['val_loss']\nty = history3.history['loss']\ntrain_validation(x, vy, ty, ax)","f36463b6":"y_pred3=model3.predict_classes(X_test, verbose=1)","ce8abcc5":"sub.Sentiment=y_pred3\nsub.to_csv('sub3_cnn+gru.csv',index=False)\nsub.head()","2fd767a8":"model4 = Sequential()\n\nmodel4.add(Embedding(max_features, 100, input_length=max_words))\nmodel4.add(SpatialDropout1D(0.25))\nmodel4.add(Bidirectional(GRU(128)))\nmodel4.add(Dropout(0.5))\n\nmodel4.add(Dense(5, activation='softmax'))\nmodel4.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel4.summary()","1c6b3422":"%%time\nhistory4=model4.fit(X_train, y_train, validation_data=(X_val, y_val),epochs=epochs, batch_size=batch_size, verbose=1)","0ae95cd7":"### plot the accuray\ndef train_validation(x, vy, ty, ax, colors=['b']):\n    ax.plot(x, vy, 'b', label=\"Validation Loss\")\n    ax.plot(x, ty, 'r', label=\"Train Loss\")\n    plt.legend()\n    plt.grid()\n    fig.canvas.draw()\n    \nfig,ax = plt.subplots(1,1)\nax.set_xlabel('epoch') ; \nax.set_ylabel('Binary Crossentropy Loss')\nx = list(range(1,epochs+1))\nvy = history4.history['val_loss']\nty = history4.history['loss']\ntrain_validation(x, vy, ty, ax)","69bca43e":"y_pred4=model4.predict_classes(X_test, verbose=1)","09783ecf":"sub.Sentiment=y_pred4\nsub.to_csv('sub4_bidirectional+gru.csv',index=False)\nsub.head()","cb720ed6":"###  Finding number of unique words in train set\n\n\n\n","ab3ee3b0":"### 2. CNN","944f0af7":"### Tokenize Text","67d97be3":"### Finding max length of a review in train set","0ee8c24a":"### 1. LSTM model","78041996":"### 4. Bidirectional GRU","8254f0e6":"### sequence padding","27d138f2":"###  Building Keras LSTM model\n\n\n\n","6c4bff82":"### 3. CNN +GRU"}}