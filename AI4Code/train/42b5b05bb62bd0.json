{"cell_type":{"80909dec":"code","d7d30bae":"code","cd3b6f4c":"code","41179f3e":"code","2cc0a12c":"code","545640b4":"code","4de9d341":"code","6f1a4a22":"code","250ef17d":"code","3f654178":"code","203c7d63":"code","c24bba35":"code","7b5ffcea":"code","a63cdc10":"code","867f16d2":"code","beff54cc":"code","3c205a9b":"code","3a2220d5":"code","60aa57c6":"code","5bcbaf50":"code","b32ad10c":"code","1f399651":"code","e56196ac":"code","a7a10ae0":"code","409b64c0":"markdown","a0333ac2":"markdown","bffe2db9":"markdown","833debb8":"markdown","2f3ed953":"markdown","bc37d4dd":"markdown","ef4a5626":"markdown","ceb208f4":"markdown","7a74fbbe":"markdown","f1cc7c0c":"markdown","598b2852":"markdown","7b7bfbaf":"markdown","37159ed8":"markdown","a34281f6":"markdown","ac23050c":"markdown","e5e88fd0":"markdown","692e349d":"markdown","49b0fb67":"markdown","724603e5":"markdown","62aed8d8":"markdown","67b014d3":"markdown","be343e96":"markdown","1e0e6fde":"markdown","2c4bfd20":"markdown","048119d2":"markdown"},"source":{"80909dec":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport seaborn as sns\n\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        (os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d7d30bae":"df = pd.read_csv(\"..\/input\/world-happiness\/2019.csv\")\ndf","cd3b6f4c":"\ndf_corr = df[[\"GDP per capita\" , \"Social support\", \"Healthy life expectancy\" , \"Freedom to make life choices\", \"Generosity\" , \"Perceptions of corruption\"]]\ncorrelation_mat = df_corr.corr()\n\nsns.heatmap(correlation_mat, annot = True)\n\nplt.show()","41179f3e":"df1 = df.iloc[:,2:]\nmaxValues = df1.max()\ni = 2\ncolStore = []\nfor col in df.columns:\n    colStore.append(col)\n    \n    \nfor stuff in maxValues:\n    counter = 0\n    for things in df.iloc[:,i]:\n        if things == stuff:\n            print(colStore[i])\n            print(\"----------\")\n            print(df.iloc[counter,1])\n            print(stuff)\n            print()\n            i = i+1\n        counter = counter + 1\n","2cc0a12c":"df2 = df.loc[df['Country or region'] == 'Finland']\n\ndf2","545640b4":"x = df_corr.mean()\nprint(x)\n","4de9d341":"meanValues = []\n\nfor things in x:\n    meanValues.append(things)\n\nmeanNp = np.array(meanValues)\n","6f1a4a22":"i = 3  \nfinlandValues = []\nfor things in df.iloc[0,i:]:\n    finlandValues.append(things)\n\nfinlandNp = np.array(finlandValues)\n","250ef17d":"\ndiffNp = (finlandNp-meanNp)\n\npercentNp = (diffNp\/meanNp) * 100 \ni = 3\nfor stuff in percentNp:\n    \n    print(colStore[i])\n    print(\"--------\")\n    print(str(round(stuff)) + \"%\") \n  \n    print()\n    i = i+1\n    \n    ","3f654178":"df.head()","203c7d63":"fin = pd.DataFrame(percentNp, columns=[\"A\"])\nfin = fin.transpose()\nfin.columns = colStore[3:]\nfin.index = {\"Finland\"}\n","c24bba35":"i = 3  \ndenmarkValues = []\nfor things in df.iloc[1,i:]:\n    denmarkValues.append(things)\n\ndenmarkNp = np.array(denmarkValues)\ndiffNp = (denmarkNp-meanNp)\npercentNp = (diffNp\/meanNp) * 100 \n\nden = pd.DataFrame(percentNp, columns=[\"A\"])\nden = den.transpose()\nden.columns = colStore[3:]\nden.index = {\"Denmark\"}\n\n    ","7b5ffcea":"i = 3  \nnorwayValues = []\nfor things in df.iloc[2,i:]:\n    norwayValues.append(things)\n\nnorwayNp = np.array(norwayValues)\ndiffNp = (norwayNp-meanNp)\npercentNp = (diffNp\/meanNp) * 100 \n\nnor = pd.DataFrame(percentNp, columns=[\"A\"])\nnor = nor.transpose()\nnor.columns = colStore[3:]\nnor.index = {\"Norway\"}\n\n\n   ","a63cdc10":"i = 3  \nicelandValues = []\nfor things in df.iloc[3,i:]:\n    icelandValues.append(things)\n\nicelandNp = np.array(icelandValues)\ndiffNp = (icelandNp-meanNp)\npercentNp = (diffNp\/meanNp) * 100 \n\nice = pd.DataFrame(percentNp, columns=[\"A\"])\nice = ice.transpose()\nice.columns = colStore[3:]\nice.index = {\"Iceland\"}\n","867f16d2":"i = 3  \nnetherlandsValues = []\nfor things in df.iloc[4,i:]:\n    netherlandsValues.append(things)\n\nnetherlandsNp = np.array(netherlandsValues)\ndiffNp = (netherlandsNp-meanNp)\npercentNp = (diffNp\/meanNp) * 100 \n\nnet = pd.DataFrame(percentNp, columns=[\"A\"])\nnet = net.transpose()\nnet.columns = colStore[3:]\nnet.index = {\"Netherlands\"}\n","beff54cc":"import seaborn as sns\nframes = [fin, den, nor, ice, net]\n\nresult = pd.concat(frames)\nresult\n\ncm = sns.light_palette(\"blue\", as_cmap=True)\nresult.style.background_gradient(cmap=cm)\n","3c205a9b":"df.head(2)","3a2220d5":"diffNp = (finlandNp-denmarkNp)\npercentNp = (diffNp\/denmarkNp) * 100\n\ntop2 = pd.DataFrame(percentNp, columns=[\"A\"])\ntop2 = top2.transpose()\ntop2.columns = colStore[3:]\ntop2.index = {\"Fin. vs. Den.\"}\n\ncm = sns.light_palette(\"red\", as_cmap=True)\ntop2.style.background_gradient(cmap=cm)\n","60aa57c6":"tempdf = df.sort_values(['GDP per capita'], ascending = False)\ntempdf = tempdf.head(5)\n\n\nplt.bar(tempdf['Country or region'], tempdf['GDP per capita'])\nplt.title('Country Vs GDP Per Capita')\nplt.xlabel('Country')\nplt.ylabel('GDP Per Capita')\nplt.show()\n\ntempdf[['Overall rank','Country or region','Score','GDP per capita']]","5bcbaf50":"tempdf = df.sort_values(['Social support'], ascending = False)\ntempdf = tempdf.head(5)\n\n\nplt.bar(tempdf['Country or region'], tempdf['Social support'])\nplt.title('Country Vs Social support')\nplt.xlabel('Country')\nplt.ylabel('Social support')\nplt.show()\n\ntempdf[['Overall rank','Country or region','Score','Social support']]","b32ad10c":"tempdf = df.sort_values(['Healthy life expectancy'], ascending = False)\ntempdf = tempdf.head(5)\n\n\nplt.bar(tempdf['Country or region'], tempdf['Healthy life expectancy'])\nplt.title('Country Vs Healthy life expectancy')\nplt.xlabel('Country')\nplt.ylabel('Healthy life expectancy')\nplt.show()\n\ntempdf[['Overall rank','Country or region','Score','Healthy life expectancy']]","1f399651":"tempdf = df.sort_values(['Freedom to make life choices'], ascending = False)\ntempdf = tempdf.head(5)\n\n\nplt.bar(tempdf['Country or region'], tempdf['Freedom to make life choices'])\nplt.title('Country Vs Freedom to make life choices')\nplt.xlabel('Country')\nplt.ylabel('Freedom to make life choices')\nplt.show()\n\ntempdf[['Overall rank','Country or region','Score','Freedom to make life choices']]","e56196ac":"tempdf = df.sort_values(['Generosity'], ascending = False)\ntempdf = tempdf.head(5)\n\n\nplt.bar(tempdf['Country or region'], tempdf['Generosity'])\nplt.title('Country Vs Generosity')\nplt.xlabel('Country')\nplt.ylabel('Generosity')\nplt.show()\n\ntempdf[['Overall rank','Country or region','Score','Generosity']]","a7a10ae0":"tempdf = df.sort_values(['Perceptions of corruption'], ascending = False)\ntempdf = tempdf.head(5)\n\n\nplt.bar(tempdf['Country or region'], tempdf['Perceptions of corruption'])\nplt.title('Country Vs Perceptions of corruption')\nplt.xlabel('Country')\nplt.ylabel('Perceptions of corruption')\nplt.show()\n\ntempdf[['Overall rank','Country or region','Score','Perceptions of corruption']]","409b64c0":"<h1>Top five countries for each factor<\/h1>\n\nLastly, we are going to see the five highest valued countries for each attribute independently, and create a bar graph to visualize the values. ","a0333ac2":"**Calculating our mean**\n\nNext, to compare Finland with the rest of the world, we are going to calculate the average value of every column. Luckily, there is a simple function that will do that for us, and we can print out the values to take a look.","bffe2db9":"<h3> How much better are the top five countries exactly? <\/h3>","833debb8":"In the code cell above, we are doing the same thing as we did to get our meanNp, except this time, we are doing it to have a NumPy array called **finlandNp** which will hold all the values of Finland. ","2f3ed953":"In the code cell above, we are creating an empty list and iterating through the values of x. Currently, x is an object, which means in order to pull out values and perform calculations, we will have to do import the numbers into a list. After appending all the values into a **meanValues** list, we then convert it into a NumPy array called **meanNp** to make it simpler to perform computations. ","bc37d4dd":"<h1>WORLD HAPPINESS REPORT<\/h1>\n\n<h3>Analyzing which countries are scored the happiest, and how they compare against one other.<\/h3>\n<h4>By: Devesh Dalmia <\/h4>\n\nToday we are analyzing a dataset which contains values to rank countries to determine which country is the **happiest.** A variety of factors are used in our dataframe, including:\n\n* GDP per capita \n* Social Support\n* Health Life Expectancy \n* Freedom to make life choices\n* Generosity \n* Perceptions of corruption","ef4a5626":"Above is a correlation matrix which we have created. The purpose of a correlation matrix is to show the relationship between two variables and how strongly a change in one can predict a change in another. We ignore the diagonal because it is comparing the variable to itself. Having a value closer to 1 indicates a strong positive correlation, and having a value of -1 indicates a strong negative correlation. \n\nWhile this matrix will no bearing in how we analyze our data, nonetheless it is interesting to see how each variable stacks up against each other. It can be useful in a lot of functions, specially regression, though that is something we will not be looking at today. ","ceb208f4":"Here we have our dataframe with values computed for the top five countries based on score. All the values are represented in percents. The higher the value, the darker the cell color. Looking at the table, here are some of interesting datas.\n\n* Finland is the only country with a lower generosity than average\n* Iceland has a few lower perceptions of corruption value than the other four countries, at a measly 6% compared to over 150%+ for other countries. \n* Denmark and Norway are the only countries to have all non-least values \n","7a74fbbe":"Here in our output, we can see the countries which ranked the highest in each attribute. Using the maxValue function, we located the max value in each column, and then looped through every column again manually to match the max value with its respective column, and pull out the country name. From our analysis, it seems that *Finland*  has the overall highest score. And Singapore is the only the country to have the highest value in more than one column!","f1cc7c0c":"Well it turns out that comparing Denmark is actually better in a lot of factors than Finland. All the values are in percentages, and represent the jump (or a fall) when going from Denmark to Finland. While **generosity** has a very large percent decrease, at almost 40%, the original value only has a difference of 0.99. Therefore, using generosity as an example, it explains why after even having a decrease in certain attributes, Finland still ranks higher than Denmark because of the weightage of the attributes that Finland *did* rank higher in. ","598b2852":"<h3> Finland vs. Denmark <\/h3>\n\nBeing the top two countries that are supposedly the happiest, let's compare just how much is Finland better than Denmark. Once again, here is our dataframe with just the two countries as a reference. ","7b7bfbaf":"<h3> GDP Per Capita <\/h3>","37159ed8":"<h3>Healthy life expectancy<\/h3>","a34281f6":"<h3>Freedom to make life choices<\/h3>","ac23050c":"<h3>Generosity<\/h3>","e5e88fd0":"<h3> Which Countries have the highest attributes? <\/h3>","692e349d":"As we see, Finland tends to excel in almost every category with a healthy margin of 30-50% from the average. While it does score lower in the generosity section, it significantly outpaces the mean in the perceptions of corruption attribute, with a whopping difference of 255%. In fact, lets take a look at how well do the top five countries rank compared to the mean!","49b0fb67":"In the code cell below, we calculate the percent difference by using the formula **(A-B)\/B**.\nThe percent difference of each attribute is stored in **percentNp** and using a *for loop* we can iterate through each value and print out the result, with the matching attribute name. \n\n**colStore** is a list which we created earlier that stores all the names of the attributes. It is only used for referencing and assigning values. ","724603e5":"Just like how we found the percent difference for every attribute for *Finland*, we are going to repeat the same process for the top five countries, and assemble all the values in a new dataframe. As a reference, lets look at the top five countries again. ","62aed8d8":"<h1>Conclusion<\/h1>\n\nIn this report we analyzed a dataset which ranked countries and calculated a happiness score. We compared the top five countries against the average, and then the top two countries against each other. We then looked at the top five countries for each category independently. We realized that there isn't that much of a difference between the top two countries, and rarely did the same country appear to be in the top five for more than two attributes.  ","67b014d3":"\n**Let's take a look at our data**\n\nWe are going to load our dataset using the pandas library into a variable called df, short for *data frame.* Using pandas, our data is clearly laid out in tables for us to access and manipulate. As you can see in our *df*, we have 156 rows, representing the total countries in this dataset, and nine columns, starting from **Overall rank** to all the way to **Perceptions of corruption.** We will be dealing with six factors and using them for all our calculations. ","be343e96":"<h3>How much better is Finland than the rest of the world?<\/h3>\n\nTo do this, first let's take a look at Finland and how it scored in all the categories. After creating a new dataframe called *df2,* we can see all the values that make up Finland. Adding the last six columns gives us a score of 7.769","1e0e6fde":"<h3>Social Support<\/h3>","2c4bfd20":"<h3>Perceptions of corruption<\/h3>","048119d2":"**Let's look at Correlation**"}}