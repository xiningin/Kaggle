{"cell_type":{"f5498de3":"code","8170765c":"code","a29ac12d":"code","1b4b17f2":"code","830ec490":"code","bd40b600":"code","cf6788e1":"code","6453cd15":"code","8e8d81e0":"code","61ce5df8":"code","31bcca19":"code","c22d698f":"code","3ee9746e":"code","b836c276":"code","341dca95":"code","00f5d0f0":"code","44c08b66":"markdown","ced85809":"markdown","6fc36c0b":"markdown","505479ff":"markdown","bdcee50b":"markdown","6638e88b":"markdown","765306e0":"markdown","99607967":"markdown","59a28657":"markdown","b44e2486":"markdown","f71e7510":"markdown","ea7e8a58":"markdown","70d9d351":"markdown","7b9f7bab":"markdown","e9db9abc":"markdown","ca594442":"markdown","6a50f345":"markdown","a3a1a948":"markdown"},"source":{"f5498de3":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport matplotlib.pyplot as plt","8170765c":"df = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ndf.shape","a29ac12d":"train_labels = df[\"label\"]\ntrain_labels.head()","1b4b17f2":"train_data = df.loc[:, df.columns != 'label']\ntrain_data.head()","830ec490":"train_data = train_data.to_numpy()\ntrain_labels = train_labels.to_numpy()","bd40b600":"train_data = train_data \/ 255","cf6788e1":"train_data = train_data.reshape((train_data.shape[0], 28, 28, 1))\ntrain_data.shape","6453cd15":"filters = 64\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Conv2D(filters=filters, kernel_size=(3,3), activation=tf.nn.relu),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.Conv2D(filters=filters, kernel_size=(3,3), activation=tf.nn.relu),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.Conv2D(filters=filters, kernel_size=(5,5), strides=2, padding='same', activation=tf.nn.relu),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.Dropout(0.4),\n\n    tf.keras.layers.Conv2D(filters=2*filters, kernel_size=(3,3), activation=tf.nn.relu),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.Conv2D(filters=2*filters, kernel_size=(3,3), activation=tf.nn.relu),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.Conv2D(filters=2*filters, kernel_size=(5,5), strides=2, padding='same', activation=tf.nn.relu),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.Dropout(0.4),\n\n    tf.keras.layers.Conv2D(filters=4*filters, kernel_size=(4,4), activation=tf.nn.relu),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dropout(0.4),\n    \n    tf.keras.layers.Dense(64, activation=tf.nn.relu),\n    tf.keras.layers.Dense(32, activation=tf.nn.relu),\n    tf.keras.layers.Dense(16, activation=tf.nn.relu),\n    tf.keras.layers.Dense(10, activation=tf.nn.softmax)\n])\nmodel.compile(optimizer='adam', loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True), metrics=['accuracy'])","8e8d81e0":"dataGenerator = tf.keras.preprocessing.image.ImageDataGenerator(width_shift_range=0.1,\n                                                               height_shift_range=0.1,\n                                                               rotation_range=5,\n                                                               zoom_range=0.1)","61ce5df8":"history = model.fit(dataGenerator.flow(train_data, train_labels, batch_size=32), epochs=100, validation_data=(train_data, train_labels))","31bcca19":"plt.figure(figsize=[8,6])\nplt.plot(history.history['accuracy'],'r',linewidth=3.0)\nplt.legend(['Training Accuracy', 'Validation Accuracy'],fontsize=18)\nplt.xlabel('Epochs ',fontsize=16)\nplt.ylabel('Accuracy',fontsize=16)\nplt.title('Accuracy Curves',fontsize=16)\nplt.show()","c22d698f":"df_test = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\ndf_test.shape","3ee9746e":"test_data = df_test.to_numpy()\ntest_data = test_data \/ 255\ntest_data = test_data.reshape((test_data.shape[0], 28, 28, 1))\ntest_data.shape","b836c276":"predictions = model.predict(test_data)\npredictions = np.asarray([np.argmax(prediction) for prediction in predictions])\npredictions.shape","341dca95":"df_predictions = pd.DataFrame(predictions).rename(columns={0: \"Label\"})\ndf_predictions.index.names = ['ImageId']\ndf_predictions.index += 1\ndf_predictions.head()","00f5d0f0":"df_predictions.shape\ndf_predictions.to_csv(\"predictions.csv\")","44c08b66":"## Solution\nTo solve the identification problem I will create a Convolutional Neural Network (CNN) using the TensorFlow library.","ced85809":"Reshape the data","6fc36c0b":"For training I will augment the given dataset in an effort to improve the model's accuracy.","505479ff":"### Data loading","bdcee50b":"__Predicting__","6638e88b":"Convert Pandas DataFrames to Numpy arrays","765306e0":"# Digit Recognizer\n_MNIST (\"Modified National Institute of Standards and Technology\") is the de facto \u201chello world\u201d dataset of computer vision. Since its release in 1999, this classic dataset of handwritten images has served as the basis for benchmarking classification algorithms. As new machine learning techniques emerge, MNIST remains a reliable resource for researchers and learners alike._","99607967":"### Training","59a28657":"Split the data and labels","b44e2486":"### CNN Model","f71e7510":"Processing data for saving","ea7e8a58":"Save as CSV","70d9d351":"## Inference","7b9f7bab":"## Goal\nThe goal of this competition is to correctly identify digits from a dataset of tens of thousands of handwritten images.","e9db9abc":"Load the test data","ca594442":"Preprocessing","6a50f345":"__Create the model and compile it__\n* SparseCategoricalCrossentropy loss function\n* Adam optimizer","a3a1a948":"Normalize the data"}}