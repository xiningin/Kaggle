{"cell_type":{"cf4a29ab":"code","905a923f":"code","a8839b4f":"code","bcd625e6":"code","e1d37fee":"code","d306d66d":"code","313ba1a2":"code","d3bd2b41":"code","3ed748e4":"code","454e6c97":"code","1cc522a4":"code","62bcddb4":"code","614f065a":"code","c4cbb0eb":"code","a6cac0c9":"code","9238d91a":"code","421a04e5":"code","ee47cc4e":"code","2c8f5669":"code","f0f85a1c":"code","bc644c79":"markdown","30f51fc2":"markdown","34b26517":"markdown","0015f96d":"markdown","438c89fe":"markdown","c827ed2d":"markdown","746a0b98":"markdown","1bc7eee9":"markdown","1449bf77":"markdown","df02cea4":"markdown","488d92b9":"markdown","90dfae74":"markdown","a7f650d3":"markdown"},"source":{"cf4a29ab":"#import the librraies\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport time\nimport matplotlib.ticker as ticker\nimport plotly.express as px","905a923f":"df = pd.read_csv('..\/input\/sample-sales-data\/sales_data_sample.csv', engine='python') #read the dataset","a8839b4f":"df.head() #show five datas from the top","bcd625e6":"df.info() #show the data info","e1d37fee":"df['ORDERDATE'] = pd.to_datetime(df['ORDERDATE']) #convert ORDERDATE to pandas datetime format","d306d66d":"df.sort_values(by = ['ORDERDATE'], inplace = True) #sorting data by ORDERDATE\ndf.set_index('ORDERDATE', inplace = True) #setting the index to be the ORDERDATE (it will hep a lot later on)","313ba1a2":"print(df.isnull().sum()) #check if there is any null data or not","d3bd2b41":"to_drop = ['ADDRESSLINE2','STATE','POSTALCODE','TERRITORY']\ndf = df.drop(to_drop, axis = 1)\ndf.head()","3ed748e4":"print(df.isnull().sum()) #checking again if there are null values","454e6c97":"#show the unique value of each column\nfor c in df.columns:\n    print(f'Number of {c} unique values: {df[c].nunique()}')","1cc522a4":"df.describe() # describing the data","62bcddb4":"top_customer = df.groupby(['CUSTOMERNAME']).sum().sort_values('SALES', ascending = False).head(20) #sorting the customers as per the sales\ntop_customer = top_customer[['SALES']].round(3) #round off the sales value up to 3 decimal places\ntop_customer.reset_index(inplace = True) #reset the index to add the customer name into dataframe","614f065a":"plt.figure(figsize = (15,5)) #width an dheight of figure is defined in inches\nplt.title('20 Most Valueable Customer (2003 - 2005)', fontsize = 18)\nplt.bar(top_customer['CUSTOMERNAME'], top_customer['SALES'], color = '#37C6AB', edgecolor = 'black', linewidth = 1)\nplt.xlabel('Customer Name', fontsize = 15) #x axis shows the customer name\nplt.ylabel('Revenue', fontsize = 15) #y axis shows the revenue\nplt.xticks(fontsize = 12, rotation = 90)\nplt.yticks(fontsize = 12)\nfor k, v in top_customer['SALES'].items(): #to show the exact revenue generated on the figure\n    if v > 600000:\n        plt.text(k, v-270000, '$' + str(v), fontsize = 12, rotation = 90, color = 'black', ha = 'center')\n    else:\n        plt.text(k, v+ 50000, '$' + str(v), fontsize = 12, rotation = 90, color = 'black', ha = 'center')","c4cbb0eb":"top_country = df.groupby(['COUNTRY']).sum().sort_values('SALES', ascending = False).head(20) #sort the country as per the sales\ntop_country = top_country[['SALES']].round(3) #round off teh sales value up to 3 decimal places\ntop_country.reset_index(inplace = True) #reset the index to add the country into dataframe","a6cac0c9":"plt.figure(figsize = (15,5)) #width and height of figure is defined in inches\nplt.title('20 Highest Revenue by Country (2003 - 2005)', fontsize = 18)\nplt.bar(top_country['COUNTRY'], top_country['SALES'], color = '#37C6AB', edgecolor = 'black', linewidth = 1)\nplt.xlabel('Country', fontsize = 15) #x axis shows the country\nplt.ylabel('Revenue', fontsize = 15) #y axis shows the revenue\nplt.xticks(fontsize = 12, rotation = 90)\nplt.yticks(fontsize = 12)\nfor k, v in top_country['SALES'].items(): #to show the exact revenue generated on the figure\n    if v > 3000000:\n        plt.text(k, v-1200000, '$' + str(v), fontsize = 12, rotation = 90, color = 'black', ha = 'center')\n    else:\n        plt.text(k, v+100000, '$' + str(v), fontsize = 12, rotation = 90, color = 'black', ha = 'center')","9238d91a":"top_city = df.groupby(['CITY']).sum().sort_values('SALES', ascending = False).head(20) #sort the city as per the sales\ntop_city = top_city[['SALES']].round(3) #round off the sales value up to 3 decimal places\ntop_city.reset_index(inplace = True) #reset the index","421a04e5":"plt.figure(figsize = (15,5))\nplt.title('20 Highest Revenue by City (2003 - 2005)', fontsize = 18)\nplt.bar(top_city['CITY'], top_city['SALES'], color = '#37C6AB', edgecolor = 'black', linewidth = 1 )\nplt.xlabel('City', fontsize = 15) #x axis shows the city\nplt.ylabel('Revenue', fontsize = 15) #y axis shows the revenue\nplt.xticks(fontsize = 12, rotation = 90)\nplt.yticks(fontsize = 12)\nfor k, v, in top_city['SALES'].items():\n    if v > 800000:\n        plt.text(k, v-350000, '$' + str(v), fontsize = 12, rotation = 90, color = 'black', ha = 'center')\n    else:\n        plt.text(k, v+35000, '$' + str(v), fontsize = 12, rotation = 90, color = 'black', ha = 'center')","ee47cc4e":"top_product = df.groupby(['PRODUCTLINE']).sum().sort_values('SALES', ascending = False) #sort the categories as per the sales\ntop_product = top_product[['SALES']] #keep only the sales column in dataframe\ntop_product.reset_index(inplace = True) #reset index\ntotal_revenue_product = top_product['SALES'].sum() #find the total revenue generated as per product line\ntotal_revenue_product = str(int(total_revenue_product)) #convert the total revenue from float to int and then to string\ntotal_revenue_product = '$' + total_revenue_product #adding '$' sign before the value","2c8f5669":"plt.rcParams['figure.figsize'] = (13,7)\nplt.rcParams['font.size'] = 12.0 #font size is defined\nplt.rcParams['font.weight'] = 6 #font weight is defined\n# we don't want to look at the percentage distribution in the pie chart. Instead, we want to look at the exact revenue generated by the product line.\ndef autopct_format(values):\n    def my_format(pct):\n        total = sum(values)\n        val = int(round(pct*total\/100.0))\n        return ' ${v:d}'.format(v = val)\n    return my_format\ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99','#55B4B0','#E15D44','#009B77'] # Colors are defined for the pie chart\nexplode = (0.05,0.05,0.05,0.05,0.05,0.05,0.05)\nfig1, ax1 = plt.subplots()\npie1 = ax1.pie(top_product['SALES'], colors = colors, labels = top_product['PRODUCTLINE'], autopct = autopct_format(top_product['SALES']), startangle = 90, explode = explode)\nfraction_text_list = pie1[2]\nfor text in fraction_text_list:\n    text.set_rotation(315)\ncenter_circle = plt.Circle((0,0), 0.80, fc = 'white') # drawing a circle on the pie chart to make it look better \nfig = plt.gcf()\nfig.gca().add_artist(center_circle)\nax1.axis('equal') # Equal aspect ratio ensures that pie is drawn as a circle\n# we can look the total revenue generated by all the categories at the center\nlabel = ax1.annotate('Total Revenue \\n' + str(total_revenue_product), color = 'red', xy = (0,0), fontsize = 12, ha  ='center')\nplt.tight_layout()\nplt.show()","f0f85a1c":"plt.figure(figsize = (10,10))\ncorr_matrix = df.corr()\nsns.heatmap(corr_matrix, annot = True)","bc644c79":"Since there are lot of null values in ADDRESSLINE2, STATE, POSTALCODE, COUNTRY, and TERRITORY, the I will drop them. COUNTRY and CITY will represent the order geographical information","30f51fc2":"### Take a look at the dataset","34b26517":"**Observations**\n* There is high co-relation in ORDERNUMBER and YEAR_ID, and between QTR_ID and MONTH_ID\n* +velly correlated between SALES, QUANTITYORDERED, PRICEEACH and MSRP\n* YEAR_ID is -velly correlated to QTR_ID and MONTH_ID","0015f96d":"**Find out 20 Most Valuable Customers**\n\nThe Most Valuable Customers are the customer who are the most profitable for a company (have a big sales on them). These customers buy more or higher-value than the other customers.","438c89fe":"## Part 1 - Exploratory Data Analysis","c827ed2d":"**Which products give the highest revenue**","746a0b98":"**Find out 20 Highest Revenue by City**\n\nHere are th Top 20 City which generated the highest revenue","1bc7eee9":"**Find out 20 Highest Revenue by Country**\n\nHere are th Top 20 Country which generated the highest revenue","1449bf77":"Seen on the figure above, that Classic Cars generated the highest revenue of about 3919616 dollar. And the total revenue generated by all these product line 10032628 dollar","df02cea4":"### Gain the insights","488d92b9":"# Exploratory Data Analysis, Time Series Analysis, and Sales Forecasting\n\nI have used the dataset to perform exploratory data analysis to gain valuable insights, and also apply time series analysis to get forecast of sales after time period of 7 days.\n\nThis task has beeen divided into three notebooks:\n1. Pert 1 - Exploratory Data Analysis\n2. Part 2 - Time Series Analysis\n3. Part 3 - Sales Forecasting","90dfae74":"**Correlation Features**\n\nPlotting a correlation matrix to see the overview of how the features are related to one another","a7f650d3":"### Correlation Test"}}