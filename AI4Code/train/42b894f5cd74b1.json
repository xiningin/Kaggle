{"cell_type":{"9d30c19a":"code","7f0e733d":"code","f47f0477":"code","c042988d":"code","418d1166":"code","5aa596b5":"code","c3e0dd80":"code","62f7af6c":"code","605cbc3e":"code","7ce77732":"code","8cd2dd5a":"code","1a67c80a":"code","3d5d8d0d":"code","666f4367":"code","980bed94":"code","6e9d280d":"code","b4c2dd93":"code","753e256d":"code","35b99fb2":"code","634aa7bb":"code","c8624070":"code","2976159e":"code","7f398c39":"code","49acc1f9":"code","1aff613e":"code","d2ac48fc":"code","4c431091":"code","3ee2c76d":"code","8b6e5e85":"code","776afbf9":"code","27d9577c":"code","b4d89d8e":"code","1e6f33f5":"code","9975e456":"code","b541ade1":"code","52e1e54d":"code","8454824f":"code","4952b030":"code","da89919f":"code","63ef5a86":"code","a2393a2a":"markdown","f4b28234":"markdown"},"source":{"9d30c19a":"#Country = input(\"Enter the country\")\nCountry = 'US'","7f0e733d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f47f0477":"import numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier","c042988d":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","418d1166":"! git clone https:\/\/github.com\/CSSEGISandData\/COVID-19.git\n","5aa596b5":"cd COVID-19\/csse_covid_19_data\/csse_covid_19_time_series","c3e0dd80":"con= pd.read_csv('time_series_covid19_confirmed_global.csv')\ndeath = pd.read_csv('time_series_covid19_deaths_global.csv')\nrec = pd.read_csv('time_series_covid19_recovered_global.csv')\ncon=con.groupby('Country\/Region').sum(inplace=True)\nrec=rec.groupby('Country\/Region').sum(inplace=True)\ndeath=death.groupby('Country\/Region').sum(inplace=True)\ncombine= [con,death,rec]","62f7af6c":"con","605cbc3e":"for dataset in combine:\n    dataset.drop(['Lat','Long'],axis=1,inplace = True)\n    dataset.dropna(inplace=True)\n    dataset.reset_index(inplace=True)\n   # dataset.drop('index',axis=1,inplace=True)\n    dataset.iloc[:,-1]=dataset.iloc[:,-1].astype(int)\n","7ce77732":"con=con.transpose()\ncon.columns=con.iloc[0]\ncon.drop('Country\/Region',inplace=True)\nrec=rec.transpose()\nrec.columns=rec.iloc[0]\nrec.drop('Country\/Region',inplace=True)\ndeath=death.transpose()\ndeath.columns=death.iloc[0]\ndeath.drop('Country\/Region',inplace=True)\ncond=con.diff().drop('1\/22\/20')\nrecd=rec.diff().drop('1\/22\/2020')\ndeathd=death.diff().drop('1\/22\/20')\n","8cd2dd5a":"s1['rate']=s1['sum_y']\/s1['sum_x']*100","1a67c80a":"s1.loc['Country\/Region',:]=con.sum(axis=0)\ncon.drop(['Province\/State'],axis=1,inplace = True)\ncon = con.loc[['con'],:]","3d5d8d0d":"s1.groupby(['Country\/Region']).sum().sort_values('rate',ascending=False)","666f4367":"s1.sort_values('rate',ascending=False)","980bed94":"s1","6e9d280d":"combine= [con,death,rec]\nfor dataset in combine:\n    dataset.drop(['sum'],axis=1,inplace = True)\n\n","b4c2dd93":"con.loc['con',:]=con.sum(axis=0)\ncon.drop(['Province\/State'],axis=1,inplace = True)\ncon = con.loc[['con'],:]\n\nrec.drop(['Province\/State'],axis=1,inplace = True)\nrec.loc['rec',:]= rec.sum(axis=0)\nrec = rec.loc[['rec'],:]\n\ndeath.loc['death',:]= death.sum(axis=0)\ndeath.drop(['Province\/State'],axis=1,inplace = True)\ndeath = death.loc[['death'],:]","753e256d":"dfcon=con.loc[con['Country\/Region']==Country]\ndfrec=rec.loc[rec['Country\/Region']==Country]\ndfdeath=death.loc[death['Country\/Region']==Country]","35b99fb2":"dfcon","634aa7bb":"\ndfcon.loc['con',:]=dfcon.sum(axis=0)\ndfcon.drop(['Province\/State','Country\/Region'],axis=1,inplace = True)\ndfcon = dfcon.loc[['con'],:]\n\ndfrec.drop(['Province\/State','Country\/Region'],axis=1,inplace = True)\ndfrec.loc['rec',:]= dfrec.sum(axis=0)\ndfrec = dfrec.loc[['rec'],:]\n\ndfdeath.loc['death',:]= dfdeath.sum(axis=0)\ndfdeath.drop(['Province\/State','Country\/Region'],axis=1,inplace = True)\ndfdeath = dfdeath.loc[['death'],:]","c8624070":"df = pd.concat([dfcon,dfrec,dfdeath])\ndf.tail()","2976159e":"df= df.transpose()\ndf.head()\n","7f398c39":"index=df.index\n#df.insert(0, \"Date\",index, True) \n#df.rename(columns={'a':'Date'},inplace=True)\ndf.index=pd.to_datetime(df.index)  #change the formant of the date","49acc1f9":"#df.drop(['Day','month'],axis=1,inplace=True)\ndf = df[(df.T != 0).any()]\n\nfeature_list=['con','rec','death']\nlag = pd.DataFrame(0, index=np.arange(len(df)), columns=feature_list)\nfor i in range(0,df['con'].count()-1):\n    lag.iloc[i,0]=df.iloc[i+1,0]-df.iloc[i,0]\n    lag.iloc[i,1]=df.iloc[i+1,1]-df.iloc[i,1]\n    lag.iloc[i,2]=df.iloc[i+1,2]-df.iloc[i,2]","1aff613e":"trend = lag[feature_list].rolling(window=5, center=True).mean()\n#df.drop(['Day','month'],axis=1,inplace=True)","d2ac48fc":"fig, ax = plt.subplots(figsize=(20, 10))\nax.plot(lag,\nmarker='.', linestyle='-', linewidth=0.5, label='Daily')\n","4c431091":"fig, ax = plt.subplots(figsize=(20, 10))\n\nax.plot(trend,\nmarker='o', markersize=1, linestyle='-')\nax.plot(trend,\nmarker='.', linestyle='-', label=ax.get_legend_handles_labels() )\nax.set_ylabel('Number of people)')\nax.legend();\n","3ee2c76d":"lag['ds']=df.index\n#lag=lag[(lag[['con']].T != 0).any()]","8b6e5e85":"df.reset_index(inplace=True)\ndf.rename(columns={'index':'ds'},inplace=True)\n","776afbf9":"conn=df.drop(['rec','death'],axis=1)\nrecc=df.drop(['con','death'],axis=1)\ndeatt=df.drop(['rec','con'],axis=1)\nlaggcon=lag.drop(['rec','death'],axis=1)\nlaggrec=lag.drop(['con','death'],axis=1)\nlaggdet=lag.drop(['rec','con'],axis=1)\nlaggcon.rename(columns={'con':'y'},inplace=True)\nlaggrec.rename(columns={'rec':'y'},inplace=True)\nlaggdet.rename(columns={'death':'y'},inplace=True)\nconn.rename(columns={'con':'y'},inplace=True)\nrecc.rename(columns={'rec':'y'},inplace=True)\ndeatt.rename(columns={'death':'y'},inplace=True)","27d9577c":"from fbprophet import Prophet","b4d89d8e":"conn","1e6f33f5":"conn=conn.iloc[10:]","9975e456":"m = Prophet()\nm.fit(conn)","b541ade1":"\nfuture = m.make_future_dataframe(periods=10)\nfuture.tail()","52e1e54d":"forecast = m.predict(future)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","8454824f":"fig1 = m.plot(forecast)","4952b030":"fig2 = m.plot_components(forecast)","da89919f":"from fbprophet.plot import plot_plotly\nimport plotly.offline as py\npy.init_notebook_mode()\n\nfig = plot_plotly(m, forecast)  # This returns a plotly Figure\npy.iplot(fig)","63ef5a86":"forecast[['ds','yhat']].tail(20)","a2393a2a":"\nfeature_list=list(con.columns.values.tolist())[0:]\ncond = pd.DataFrame(0, index=np.arange(len(con)), columns=feature_list)\nfor i in range(0,con['Country\/Region'].count()):\n    cond.iloc[[i]]=con.iloc[lambda x: x.index[[i]]].diff(1,axis=1)\ncond.iloc[:,0]=con['Country\/Region']\n\nfeature_list=list(rec.columns.values.tolist())[0:]\nrecd = pd.DataFrame(0, index=np.arange(len(rec)), columns=feature_list)\nfor i in range(0,rec['Country\/Region'].count()):\n    recd.iloc[[i]]=rec.iloc[lambda x: x.index[[i]]].diff(1,axis=1)\nrecd.iloc[:,0]=rec['Country\/Region']\n\nfeature_list=list(death.columns.values.tolist())[0:]\ndeathd = pd.DataFrame(0, index=np.arange(len(death)), columns=feature_list)\nfor i in range(0,death['Country\/Region'].count()):\n    deathd.iloc[[i]]=death.iloc[lambda x: x.index[[i]]].diff(1,axis=1)\ndeathd.iloc[:,0]=death['Country\/Region']\n\ncond.drop('1\/22\/20',axis=1,inplace=True)\nrecd.drop('1\/22\/20',axis=1,inplace=True)\ndeathd.drop('1\/22\/20',axis=1,inplace=True)","f4b28234":"cond['sum']=cond.sum(axis=1)\ndeathd['sum']=deathd.sum(axis=1)\nrecd['sum']=recd.sum(axis=1)\ns1 = pd.merge(cond[['sum','Country\/Region']],deathd[['sum','Country\/Region']], how='inner', on=['Country\/Region'])\ns2=  pd.merge(cond[['sum','Country\/Region']],recd[['sum','Country\/Region']], how='inner', on=['Country\/Region'])\ns3=  pd.merge(deathd[['sum','Country\/Region']],recd[['sum','Country\/Region']], how='inner', on=['Country\/Region'])"}}