{"cell_type":{"bde8ae2e":"code","48dddd6e":"code","ed9a8c30":"code","8b2b8eaa":"code","c3b1e57a":"code","73165397":"code","97a42890":"code","b4ecafa6":"code","e59fb69b":"code","1ef2d567":"code","8c6f668f":"code","07e9c10e":"code","c3b3c02d":"code","2c6ec6cf":"code","4072287a":"code","1154b376":"code","d109e6a6":"code","bcaaca5a":"code","c779757d":"code","2da4a0e3":"code","15a77a46":"code","363f64ad":"code","89f0eb6b":"code","8abfa4d1":"code","a72c56f9":"code","8e305507":"code","a3bcea10":"code","63bef147":"code","19c251fc":"code","b41e755e":"code","30be5cdd":"code","71fa57ea":"code","4aba142a":"code","9d8144e8":"code","e43cbbfd":"code","ff353d3c":"code","0cf6b67a":"code","2d023430":"code","50fcf8c2":"code","97286a05":"code","1898cfcb":"code","7850e29d":"markdown","6bbf8495":"markdown","da693ac7":"markdown"},"source":{"bde8ae2e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","48dddd6e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()\nimport warnings\nwarnings.filterwarnings('ignore')","ed9a8c30":"from scipy.stats import zscore\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score,confusion_matrix\nfrom time import time\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier,AdaBoostClassifier,BaggingClassifier,ExtraTreesClassifier\nlr=LogisticRegression()\ndt=DecisionTreeClassifier()\nknn=KNeighborsClassifier()\nrf=RandomForestClassifier()\nada=AdaBoostClassifier()\nbag=BaggingClassifier()\nxtree=ExtraTreesClassifier()\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.feature_extraction.text import CountVectorizer\ncount=CountVectorizer()\nfrom sklearn.decomposition import PCA","8b2b8eaa":"train=pd.read_excel('\/kaggle\/input\/predicting-food-delivery-time\/Participants Data\/Data_Train.xlsx')\ntest=pd.read_excel('\/kaggle\/input\/predicting-food-delivery-time\/Participants Data\/Data_Test.xlsx')\nsample=pd.read_excel('\/kaggle\/input\/predicting-food-delivery-time\/Participants Data\/Sample_Submission.xlsx')","c3b1e57a":"train['Restaurant']=le.fit_transform(train['Restaurant'])\ntrain['Location']=le.fit_transform(train['Location'])\ntrain['Minimum_Order']=pd.to_numeric(train['Minimum_Order'].str.replace('\u20b9',' '))\ntrain['Average_Cost']=pd.to_numeric(train['Average_Cost'].str.replace('[^0-9]',''))\ntrain['Rating']=pd.to_numeric(train['Rating'].apply(lambda x : np.nan if x in ['Temporarily Closed','Opening Soon','-','NEW'] else x))\ntrain['Votes']=pd.to_numeric(train['Votes'].apply(lambda x : np.nan if x=='-' else x))\ntrain['Reviews']=pd.to_numeric(train['Reviews'].apply(lambda x : np.nan if x=='-' else x))\ntrain['Delivery_Time']=pd.to_numeric(train['Delivery_Time'].str.replace('[^0-9]',''))","73165397":"q1=train['Rating'].quantile(0.25)\nq3=train['Rating'].quantile(0.75)\niqr=q3-q1\ntrain['Rating']=train['Rating'].apply(lambda x: np.nan if x>q3+1.5*iqr or x<q1-1.5*iqr else x)\ntrain['Rating']=train['Rating'].fillna(train['Rating'].median())\n\n\nq1=train['Votes'].quantile(0.25)\nq3=train['Votes'].quantile(0.75)\niqr=q3-q1\ntrain['Votes']=train['Votes'].apply(lambda x: np.nan if x>(q3+1.5*iqr) or x<(q1-1.5*iqr) else x)\ntrain['Votes']=train['Votes'].fillna(train['Votes'].mode()[0])\n\n\nq1=train['Reviews'].quantile(0.25)\nq3=train['Reviews'].quantile(0.75)\niqr=q3-q1\ntrain['Reviews']=train['Reviews'].apply(lambda x: np.nan if x>(q3+1.5*iqr) or x<(q1-1.5*iqr) else x)\ntrain['Reviews']=train['Reviews'].fillna(round(train['Reviews'].mean()))\n\n\n\nq1=train['Average_Cost'].quantile(0.25)\nq3=train['Average_Cost'].quantile(0.75)\niqr=q3-q1\ntrain['Average_Cost']=train['Average_Cost'].apply(lambda x: np.nan if x>(q3+1.5*iqr) or x<(q1-1.5*iqr) else x)\ntrain['Average_Cost']=train['Average_Cost'].fillna(round(train['Average_Cost'].mean()))","97a42890":"train.head()","b4ecafa6":"train_01=train.copy()","e59fb69b":"train['Cuisines']=le.fit_transform(train['Cuisines'])","1ef2d567":"x=train.drop('Delivery_Time',axis=1)\ny=train['Delivery_Time']","8c6f668f":"x=x.apply(zscore)","07e9c10e":"start_time=time()\nmodel_list=[lr,dt,knn,rf,ada,bag,xtree]\nScore=[]\nfor i in model_list:\n    x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=50)\n    i.fit(x_train,y_train)\n    y_pred=i.predict(x_test)\n    score=accuracy_score(y_test,y_pred)\n    Score.append(score)\nprint(pd.DataFrame(zip(model_list,Score),columns=['Model Used','R2-Score']))\nend_time=time()\nprint(round(end_time-start_time,2),'sec')","c3b3c02d":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=42)\nrf=RandomForestClassifier(n_estimators=100,criterion='entropy',random_state=42)\nrf.fit(x_train,y_train)\ny_pred=rf.predict(x_test)\naccuracy_score(y_test,y_pred)","2c6ec6cf":"train_01.head()","4072287a":"train_01['Cuisines']=train_01['Cuisines'].str.lower()\ntrain_01['Cuisines']=train_01['Cuisines'].str.replace('[^a-z]',' ')","1154b376":"count.fit(train_01['Cuisines'])","d109e6a6":"cols=['Restaurant','Location','Average_Cost','Minimum_Order','Rating','Votes','Reviews']","bcaaca5a":"data=pd.concat([pd.DataFrame(zscore(train_01.drop(['Cuisines','Delivery_Time'],axis=1)),columns=cols),pd.DataFrame(count.transform(train_01['Cuisines']).todense())],axis=1)","c779757d":"x=data\ny=train_01['Delivery_Time']","2da4a0e3":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=42)\nrf=RandomForestClassifier(n_estimators=100,criterion='entropy',random_state=42)\nrf.fit(x_train,y_train)\ny_pred=rf.predict(x_test)\naccuracy_score(y_test,y_pred)","15a77a46":"x=data\ny=train_01['Delivery_Time']","363f64ad":"x.shape","89f0eb6b":"pca=PCA()\npca.fit(x)","8abfa4d1":"plt.plot(np.cumsum(pca.explained_variance_ratio_))","a72c56f9":"pca=PCA(n_components=22)","8e305507":"x=pca.fit_transform(x)","a3bcea10":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=42)\nrf=RandomForestClassifier(n_estimators=100,criterion='entropy',random_state=42)\nrf.fit(x_train,y_train)\ny_pred=rf.predict(x_test)\naccuracy_score(y_test,y_pred)","63bef147":"grid=GridSearchCV(rf,param_grid={'n_estimators':range(1,10)},return_train_score=1).fit(x_train,y_train)","19c251fc":"pd.DataFrame(grid.cv_results_).set_index('params')['mean_test_score'].plot.line()\npd.DataFrame(grid.cv_results_).set_index('params')['mean_train_score'].plot.line()\nplt.xticks(rotation=45)","b41e755e":"test['Restaurant']=le.fit_transform(test['Restaurant'])\ntest['Location']=le.fit_transform(test['Location'])\ntest['Minimum_Order']=pd.to_numeric(test['Minimum_Order'].str.replace('\u20b9',' '))\ntest['Average_Cost']=pd.to_numeric(test['Average_Cost'].str.replace('[^0-9]',''))\ntest['Rating']=pd.to_numeric(test['Rating'].apply(lambda x : np.nan if x in ['Temporarily Closed','Opening Soon','-','NEW'] else x))\ntest['Votes']=pd.to_numeric(test['Votes'].apply(lambda x : np.nan if x=='-' else x))\ntest['Reviews']=pd.to_numeric(test['Reviews'].apply(lambda x : np.nan if x=='-' else x))\ntest['Rating']=test['Rating'].fillna(test['Rating'].median())\ntest['Votes']=test['Votes'].fillna(test['Votes'].mode()[0])\ntest['Reviews']=test['Reviews'].fillna(test['Reviews'].median())\ntest['Average_Cost']=test['Average_Cost'].fillna(test['Average_Cost'].mean())\nsample['Delivery_Time']=le.fit_transform(pd.to_numeric(sample['Delivery_Time'].str.replace('[^0-9]','')))","30be5cdd":"test['Cuisines']=test['Cuisines'].str.lower()\ntest['Cuisines']=test['Cuisines'].str.replace('[^a-z]',' ')","71fa57ea":"count.fit(test['Cuisines'])","4aba142a":"pca=PCA(n_components=22)","9d8144e8":"data=pd.concat([pd.DataFrame(zscore(test.drop(['Cuisines'],axis=1)),columns=cols),pd.DataFrame((count.transform(test['Cuisines']).todense()))],axis=1)","e43cbbfd":"data.head()","ff353d3c":"x=pca.fit_transform(data)","0cf6b67a":"data['Delivery_Time']=pd.DataFrame(rf.predict(x))","2d023430":"data['Delivery_Time'].value_counts()","50fcf8c2":"sample_refined=[]\nfor i in data['Delivery_Time']:\n    i=(str(i)+' minutes')\n    sample_refined.append(i)","97286a05":"sample_refined=pd.DataFrame(sample_refined,columns=['Delivery_Time'])\nsample_refined.to_excel('Machine_Hack_Submit.xlsx',index=False)","1898cfcb":"pd.read_excel('Machine_Hack_Submit.xlsx')['Delivery_Time'].value_counts()","7850e29d":"# Applying PCA for Dimensionality Reduction.","6bbf8495":"# Checking on Test Dataset","da693ac7":"# Implementing Text Analysis Using Count Vector"}}