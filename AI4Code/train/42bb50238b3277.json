{"cell_type":{"63486e35":"code","f62ebde8":"code","747234bb":"code","21b8d552":"code","c5913fba":"code","8f9aed5a":"code","d880f95b":"code","92960cc9":"code","be7c3f61":"code","d1058714":"code","777b65b1":"code","48aee5e8":"code","68e8d622":"code","666a9052":"code","a8215a14":"code","3fd64e10":"code","3d965cc2":"code","18d9c6f6":"code","9ecf97c9":"code","d31e91b5":"code","08279ec5":"code","1a76e32c":"code","c9d5bf29":"code","28d7a9cc":"code","83022816":"code","e7b4a985":"code","2973fc96":"code","f143b45e":"code","3b304154":"code","de777c5c":"code","472568a7":"code","e54264b0":"code","db05353f":"code","d7dfd5c7":"code","c02ea522":"code","96cefe27":"code","3af2e510":"code","62cad893":"code","d9578443":"code","d47a1124":"code","1bfadce1":"code","b4f9a955":"code","aa71799b":"code","9ffcabed":"code","a294c9a6":"code","6980218c":"code","3071da94":"code","ab355f52":"code","a4a61fe8":"code","325da1da":"code","8110da39":"code","73dd7269":"code","3afbf474":"code","2f363209":"code","cafb92f3":"code","a050e5e3":"code","ec84add1":"code","bfb931d9":"code","e7f987ef":"code","674f3bfa":"code","20073d4c":"code","62593114":"code","ef96fbff":"code","ab03be2c":"code","e39f04e7":"code","bc59fad3":"code","e26b912c":"code","70916df0":"code","a0568350":"code","aea1c4de":"code","ee16df86":"code","6fa043cf":"code","b9bbb2da":"code","c30c9934":"code","98e919cf":"code","24ed3050":"code","f738b725":"code","fd4a0a52":"code","ca1dc8a1":"code","91b6b944":"code","c460c471":"code","132c1943":"code","597609ae":"code","8767f21a":"code","ebfd45fc":"code","4677371e":"code","85ec2d7c":"code","7e2df9b7":"code","540efa19":"code","436bb63a":"code","e7fe4a71":"code","e86ad4d6":"code","a7796b59":"code","d930e041":"code","5ee1dcb5":"code","1fdf6958":"code","6bf37bc1":"code","cf57af97":"code","96ddc416":"code","ff77cfd0":"code","075bdfa0":"code","7bb0f3fe":"code","9784f3b0":"code","a99d8b8e":"code","508466b3":"code","32c6f8d6":"code","5392fad4":"code","8a9056c2":"code","cd475f9a":"code","8e8f7a72":"code","9a545d0d":"code","e8803128":"code","39ded0aa":"code","0dc9524d":"code","56d1b512":"code","90df58aa":"code","d714395c":"code","73bb060b":"code","489ba00d":"code","9ea11a5e":"code","a6f02289":"code","c1a7c4bc":"code","afc19bd3":"code","f7c5119d":"code","7db7b4a8":"code","218aa06c":"code","ef086ddc":"code","7e1ddc31":"code","a7e71bea":"code","931dcddb":"code","0501fe96":"code","a0aba911":"code","70b426ab":"code","10c010f9":"code","dc4606c3":"code","881c828c":"code","41ecc417":"code","f4af1571":"code","fdaf5834":"code","983772e4":"code","83890b51":"code","d11290f1":"code","fd077331":"code","de039783":"code","5002f053":"code","428ac55f":"code","5c521d3f":"code","bc366e12":"code","ba6aad38":"code","5ac751b4":"code","4353f35a":"code","33a7a703":"code","e9f92daa":"code","d203c0bd":"code","c1b9f25b":"code","275f6b47":"code","08762ca9":"code","4dbee176":"code","5da733f6":"code","ca874d70":"code","582acde4":"code","c151d022":"code","b3ab2487":"markdown","e3eef327":"markdown","bd7ecc22":"markdown","e613b5af":"markdown","ea9a7350":"markdown","a086543d":"markdown","25ce6507":"markdown","3d658465":"markdown","deec86e0":"markdown","36774174":"markdown","28584e91":"markdown","b616515e":"markdown","a9bef64f":"markdown","dcb30341":"markdown","bcbf0e9e":"markdown","049401b1":"markdown","a0ff3090":"markdown","67b7cb24":"markdown","e72a334d":"markdown","a340ad76":"markdown","dfcc88d1":"markdown","167c7211":"markdown","7ff9d649":"markdown","502d257c":"markdown","f7de9770":"markdown","4171331e":"markdown","71482f6f":"markdown","48333402":"markdown","73ca3161":"markdown","e93d7462":"markdown","8f9af4cb":"markdown","28f8a5ee":"markdown","77f20ce2":"markdown","19be558a":"markdown","0df451f9":"markdown","1b13efde":"markdown","e5908d2e":"markdown","11ddf72a":"markdown","98bd0bcc":"markdown","d7d10bcd":"markdown","118ab981":"markdown","f0ccbf10":"markdown","8b350cbb":"markdown","ebc0cf3b":"markdown","71bf7e32":"markdown","15f8f26b":"markdown","3821884a":"markdown","6bbc5d56":"markdown","310d1e7d":"markdown","c52866d8":"markdown","cb8710c5":"markdown","985ea9ac":"markdown","27f276f3":"markdown","20a98bb6":"markdown","17220421":"markdown","152082c1":"markdown","62495a3c":"markdown","b58ad369":"markdown","b9d34b0f":"markdown","9b67637b":"markdown","086c8cb5":"markdown","b377ac34":"markdown","5bb8e1fa":"markdown","20f91379":"markdown","b52ff51d":"markdown","8da88e24":"markdown","a94bf0ba":"markdown","c26a1d15":"markdown","41c6cc85":"markdown","dbfb95d9":"markdown","3764ef3a":"markdown","efd576fe":"markdown","363d04a6":"markdown","53d6b3b2":"markdown","0ebd7e65":"markdown","34027a50":"markdown","59a0fd4a":"markdown","7034b417":"markdown","e40a3fa2":"markdown","f51573bb":"markdown","d847220f":"markdown","7268b30e":"markdown","6c1afcf9":"markdown","20a97910":"markdown","fdd1c5dd":"markdown","fcb89f15":"markdown","441ddaba":"markdown","e1bdfaf4":"markdown","4791100c":"markdown","e27ea267":"markdown"},"source":{"63486e35":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","f62ebde8":"train_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\nsubmission_data = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')","747234bb":"print(f'Size: {train_data.shape}')","21b8d552":"train_data.head(2)","c5913fba":"train_data.isnull().sum().to_frame().rename(columns={0:'Null values'})","8f9aed5a":"print(f'Size: {test_data.shape}')","d880f95b":"test_data.head(2)","92960cc9":"test_data.isnull().sum().to_frame().rename(columns={0:'Null values'})","be7c3f61":"print(f'Size: {submission_data.shape}')","d1058714":"submission_data.head(2)","777b65b1":"submission_data.isnull().sum().to_frame().rename(columns={0:'Null values'})","48aee5e8":"full_data = pd.concat([train_data,test_data])","68e8d622":"print(f'Size: {full_data.shape}')","666a9052":"full_data.head(2)","a8215a14":"full_data = pd.concat([train_data,train_data])","3fd64e10":"full_data.isnull().sum().to_frame().rename(columns={0:'Null values'})","3d965cc2":"for col in full_data.columns:\n    print(f'{len(full_data[col].unique())} unique values in {col} column')","18d9c6f6":"full_data.drop(columns=['PassengerId','Survived']).describe()","9ecf97c9":"plt.figure(figsize=(20,8));\nsns.heatmap(full_data.isnull(), cmap='viridis');","d31e91b5":"corr = full_data.corr()\ncorr['Survived'].sort_values(ascending=False)[1:].to_frame().style.background_gradient(axis=1,cmap=sns.light_palette('green', as_cmap=True))","08279ec5":"plt.figure(figsize=(20,8));\nsns.heatmap(corr, cmap=\"viridis\");","1a76e32c":"full_data.skew().to_frame().rename(columns={0:'Skewness'}).sort_values('Skewness')","c9d5bf29":"fig, axes = plt.subplots(1,3, figsize=(20, 8));\nfig.suptitle('Skewness', fontsize=20);\n\nsns.kdeplot(full_data['Fare'], ax=axes[0],hue=full_data['Survived']);\nsns.kdeplot(full_data['SibSp'], ax=axes[1],hue=full_data['Survived']);\nsns.kdeplot(full_data['Parch'], ax=axes[2],hue=full_data['Survived']);","28d7a9cc":"data_train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndata_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ndata_submission = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')","83022816":"test_PassengerId = data_submission['PassengerId'] ","e7b4a985":"data_train['Embarked'] = data_train['Embarked'].fillna('C')","2973fc96":"data_train = pd.get_dummies(data_train, columns=['Embarked'])\n#.drop(columns=['Sex_male']).rename(columns={'Sex_female':'Sex'})\n#\u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c 'Sex'","f143b45e":"data_train.head(2)","3b304154":"data_test['Embarked'] = data_test['Embarked'].fillna('C')","de777c5c":"data_test = pd.get_dummies(data_test, columns=['Embarked'])\n#.drop(columns=['Sex_male']).rename(columns={'Sex_female':'Sex'})\n#\u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c 'Sex'","472568a7":"data_test.head(2)","e54264b0":"data_test.loc[data_test['Fare'].isna(), 'Fare'] = data_test.Fare.mean()","db05353f":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.metrics import classification_report","d7dfd5c7":"basic_data_train = data_train.drop(columns=['PassengerId','Ticket','Cabin','Name','Age'])","c02ea522":"basic_data_test = data_test.drop(columns=['PassengerId','Ticket', 'Cabin','Name','Age'])","96cefe27":"basic_data_train = pd.get_dummies(basic_data_train, columns=['Sex']).drop(columns=['Sex_male']).rename(columns={'Sex_female':'Sex'})","3af2e510":"basic_data_test = pd.get_dummies(basic_data_test, columns=['Sex']).drop(columns=['Sex_male']).rename(columns={'Sex_female':'Sex'})","62cad893":"basic_data_train","d9578443":"X_train, X_test, y_train, y_test = train_test_split(basic_data_train.drop(columns='Survived'), basic_data_train.Survived, test_size=0.25, random_state=42)","d47a1124":"paramentrs_for_basic_clf = {'criterion':['gini','entropy'],'max_depth':np.arange(1,20),'min_samples_split':np.arange(2,10),'min_samples_leaf':np.arange(1,10)}","1bfadce1":"basic_clf = DecisionTreeClassifier(random_state=42) ","b4f9a955":"grid_search_cv_basic_clf = GridSearchCV(basic_clf, paramentrs_for_basic_clf, cv=5, n_jobs=-1)","aa71799b":"grid_search_cv_basic_clf.fit(X_train, y_train)","9ffcabed":"best_basic_clf = grid_search_cv_basic_clf.best_estimator_","a294c9a6":"kf = KFold(n_splits=5, shuffle=True, random_state=42)","6980218c":"y_pred_basic_clf = best_basic_clf.predict(X_test)","3071da94":"print(classification_report(y_test,y_pred_basic_clf))","ab355f52":"cross_val_score(best_basic_clf, X_test, y_test, cv=kf, scoring=\"f1\").mean()","a4a61fe8":"y_pred_basic_clf = best_basic_clf.predict(basic_data_test)","325da1da":"submission = pd.DataFrame({\"PassengerId\": test_PassengerId,\"Survived\": y_pred_basic_clf})\nsubmission.to_csv('basic_submission_for_kaggle.csv', index=False)","8110da39":"train = data_train.copy() \ntest = data_test.copy()","73dd7269":"Title_Dict = {}\nTitle_Dict.update(dict.fromkeys(['Capt', 'Col', 'Major', 'Dr', 'Rev'], 'Officer'))\nTitle_Dict.update(dict.fromkeys(['Don', 'Sir', 'the Countess', 'Dona', 'Lady'], 'Royalty'))\nTitle_Dict.update(dict.fromkeys(['Mme', 'Ms', 'Mrs'], 'Mrs'))\nTitle_Dict.update(dict.fromkeys(['Mlle', 'Miss'], 'Miss'))\nTitle_Dict.update(dict.fromkeys(['Mr'], 'Mr'))\nTitle_Dict.update(dict.fromkeys(['Master','Jonkheer'], 'Master'))","3afbf474":"train['Title'] = train['Name'].apply(lambda x:x.split(',')[1].split('.')[0].strip())\ntrain['Title'] = train['Title'].map(Title_Dict)\ntrain = train.drop(columns=['Name'])","2f363209":"test['Title'] = test['Name'].apply(lambda x:x.split(',')[1].split('.')[0].strip())\ntest['Title'] = test['Title'].map(Title_Dict).drop(columns=['Name'])\ntest = test.drop(columns=['Name'])","cafb92f3":"age_df = pd.concat([train, test])[['Age', 'Pclass','Sex','Title']]\nage_df=pd.get_dummies(age_df)\nknown_age = age_df[age_df.Age.notnull()].iloc[:,:].values\nunknown_age = age_df[age_df.Age.isnull()].iloc[:,:].values\ny = known_age[:, 0]\nX = known_age[:, 1:]","a050e5e3":"rfr = RandomForestRegressor(random_state=42, n_estimators=100, n_jobs=-1)\nrfr.fit(X, y)","ec84add1":"tr_df = pd.get_dummies(train[['Age', 'Pclass','Sex','Title']])\nunknown_age_tr_df = tr_df[tr_df.Age.isnull()].iloc[:,:].values\ntrain.loc[ (train.Age.isnull()), 'Age' ] = rfr.predict(unknown_age_tr_df[:, 1::])","bfb931d9":"te_df = pd.get_dummies(test[['Age', 'Pclass','Sex','Title']])\nunknown_age_te_df = te_df[te_df.Age.isnull()].iloc[:,:].values\ntest.loc[ (test.Age.isnull()), 'Age' ] = rfr.predict(unknown_age_te_df[:, 1::])","e7f987ef":"def Fam_label(s):\n    if (s >= 2) & (s <= 4):\n        return 2\n    elif ((s > 4) & (s <= 7)) | (s == 1):\n        return 1\n    elif (s > 7):\n        return 0","674f3bfa":"train['FamilySize'] = train['SibSp']+train['Parch']+1","20073d4c":"train['Family'] = train['FamilySize'].apply(Fam_label)","62593114":"test['FamilySize'] = test['SibSp']+test['Parch']+1","ef96fbff":"test['Family'] = test['FamilySize'].apply(Fam_label)","ab03be2c":"train['Cabin'] = train['Cabin'].fillna('Unknown')\ntrain['Deck'] = train['Cabin'].str.get(0)\ntrain.loc[(train['Deck'] == 'T'), 'Deck'] = 'A'","e39f04e7":"test['Cabin'] = test['Cabin'].fillna('Unknown')\ntest['Deck'] = test['Cabin'].str.get(0)","bc59fad3":"Ticket_Count = dict(pd.concat([train, test])['Ticket'].value_counts())","e26b912c":"def Ticket_Label(s):\n    if (s >= 2) & (s <= 4):\n        return 2\n    elif ((s > 4) & (s <= 8)) | (s == 1):\n        return 1\n    elif (s > 8):\n        return 0","70916df0":"train['TicketGroup'] = train['Ticket'].map(Ticket_Count).apply(Ticket_Label)","a0568350":"test['TicketGroup'] = test['Ticket'].map(Ticket_Count).apply(Ticket_Label)","aea1c4de":"test = test.drop(columns=['PassengerId','Ticket', 'Cabin'])\ntrain = train.drop(columns=['PassengerId','Ticket', 'Cabin'])","ee16df86":"train = pd.get_dummies(train)","6fa043cf":"test = pd.get_dummies(test)","b9bbb2da":"X_train, X_test, y_train, y_test = train_test_split(train.drop(columns='Survived'), train.Survived, test_size=0.25, random_state=42)","c30c9934":"paramentrs_for_clf = {'criterion':['gini','entropy'],'max_depth':np.arange(1,20),'min_samples_split':np.arange(2,10),'min_samples_leaf':np.arange(1,10)}","98e919cf":"clf = DecisionTreeClassifier(random_state=42) ","24ed3050":"grid_search_cv_clf = GridSearchCV(clf, paramentrs_for_clf, cv=5, n_jobs=-1)","f738b725":"grid_search_cv_clf.fit(train.drop(columns='Survived'), train.Survived)","fd4a0a52":"best_clf = grid_search_cv_clf.best_estimator_","ca1dc8a1":"best_clf.get_params()","91b6b944":"kf = KFold(n_splits=5, shuffle=True, random_state=42)","c460c471":"y_pred_clf = best_clf.predict(X_test)","132c1943":"print(classification_report(y_test,y_pred_clf))","597609ae":"cross_val_score(best_clf, train.drop(columns='Survived'), train.Survived, cv=kf, scoring=\"f1\").mean()","8767f21a":"cross_val_score(best_clf, X_test, y_test, cv=kf, scoring=\"accuracy\").mean()","ebfd45fc":"y_pred_clf = best_clf.predict(test)","4677371e":"submission = pd.DataFrame({\"PassengerId\": test_PassengerId,\"Survived\": y_pred_clf})\nsubmission.to_csv('dtr_submission_for_kaggle.csv', index=False)","85ec2d7c":"basic_data_train = data_train.drop(columns=['PassengerId','Ticket','Cabin','Name','Age'])","7e2df9b7":"basic_data_test = data_test.drop(columns=['PassengerId','Ticket', 'Cabin','Name','Age'])","540efa19":"basic_data_train = pd.get_dummies(basic_data_train, columns=['Sex']).drop(columns=['Sex_male']).rename(columns={'Sex_female':'Sex'})","436bb63a":"basic_data_test = pd.get_dummies(basic_data_test, columns=['Sex']).drop(columns=['Sex_male']).rename(columns={'Sex_female':'Sex'})","e7fe4a71":"basic_data_train","e86ad4d6":"X_train, X_test, y_train, y_test = train_test_split(basic_data_train.drop(columns='Survived'), basic_data_train.Survived, test_size=0.25, random_state=42)","a7796b59":"paramentrs_for_rf_clf = {'n_estimators':range(2,150), \\\n                         'criterion':['entropy','gini'],\\\n                         'max_depth':np.arange(1,20),\\\n                         'min_samples_split':np.arange(2,10),\\\n                         'min_samples_leaf':np.arange(1,10)\n                        }","d930e041":"rf_clf = RandomForestClassifier(random_state=42) ","5ee1dcb5":"grid_search_cv_basic_rf_clf = RandomizedSearchCV(rf_clf, paramentrs_for_rf_clf, cv=5, n_jobs=-1, n_iter=200)","1fdf6958":"grid_search_cv_basic_rf_clf.fit(X_train, y_train)","6bf37bc1":"best_basic_rf_clf = grid_search_cv_basic_rf_clf.best_estimator_","cf57af97":"best_basic_rf_clf.get_params()","96ddc416":"kf = KFold(n_splits=5, shuffle=True, random_state=42)","ff77cfd0":"y_pred_basic_rf_clf = best_basic_rf_clf.predict(X_test)","075bdfa0":"print(classification_report(y_test,y_pred_basic_rf_clf))","7bb0f3fe":"cross_val_score(best_basic_rf_clf, basic_data_train.drop(columns='Survived'), basic_data_train.Survived, cv=kf, scoring=\"accuracy\").mean()","9784f3b0":"cross_val_score(best_basic_rf_clf, X_test, y_test, cv=kf, scoring=\"accuracy\").mean()","a99d8b8e":"y_pred_basic_rf_clf = best_basic_rf_clf.predict(basic_data_test)","508466b3":"submission = pd.DataFrame({\"PassengerId\": test_PassengerId,\"Survived\": y_pred_basic_rf_clf})\nsubmission.to_csv('basic_rf_submission_for_kaggle.csv', index=False)","32c6f8d6":"train = data_train.copy() \ntest = data_test.copy()","5392fad4":"Title_Dict = {}\nTitle_Dict.update(dict.fromkeys(['Capt', 'Col', 'Major', 'Dr', 'Rev'], 'Officer'))\nTitle_Dict.update(dict.fromkeys(['Don', 'Sir', 'the Countess', 'Dona', 'Lady'], 'Royalty'))\nTitle_Dict.update(dict.fromkeys(['Mme', 'Ms', 'Mrs'], 'Mrs'))\nTitle_Dict.update(dict.fromkeys(['Mlle', 'Miss'], 'Miss'))\nTitle_Dict.update(dict.fromkeys(['Mr'], 'Mr'))\nTitle_Dict.update(dict.fromkeys(['Master','Jonkheer'], 'Master'))","8a9056c2":"train['Title'] = train['Name'].apply(lambda x:x.split(',')[1].split('.')[0].strip())\ntrain['Title'] = train['Title'].map(Title_Dict)\ntrain = train.drop(columns=['Name'])","cd475f9a":"test['Title'] = test['Name'].apply(lambda x:x.split(',')[1].split('.')[0].strip())\ntest['Title'] = test['Title'].map(Title_Dict).drop(columns=['Name'])\ntest = test.drop(columns=['Name'])","8e8f7a72":"age_df = pd.concat([train, test])[['Age', 'Pclass','Sex','Title']]\nage_df=pd.get_dummies(age_df)\nknown_age = age_df[age_df.Age.notnull()].iloc[:,:].values\nunknown_age = age_df[age_df.Age.isnull()].iloc[:,:].values\ny = known_age[:, 0]\nX = known_age[:, 1:]","9a545d0d":"rfr = RandomForestRegressor(random_state=42, n_estimators=100, n_jobs=-1)\nrfr.fit(X, y)","e8803128":"tr_df = pd.get_dummies(train[['Age', 'Pclass','Sex','Title']])\nunknown_age_tr_df = tr_df[tr_df.Age.isnull()].iloc[:,:].values\ntrain.loc[ (train.Age.isnull()), 'Age' ] = rfr.predict(unknown_age_tr_df[:, 1::])","39ded0aa":"te_df = pd.get_dummies(test[['Age', 'Pclass','Sex','Title']])\nunknown_age_te_df = te_df[te_df.Age.isnull()].iloc[:,:].values\ntest.loc[ (test.Age.isnull()), 'Age' ] = rfr.predict(unknown_age_te_df[:, 1::])","0dc9524d":"def Fam_label(s):\n    if (s >= 2) & (s <= 4):\n        return 2\n    elif ((s > 4) & (s <= 7)) | (s == 1):\n        return 1\n    elif (s > 7):\n        return 0","56d1b512":"train['FamilySize'] = train['SibSp']+train['Parch']+1","90df58aa":"train['Family'] = train['FamilySize'].apply(Fam_label)","d714395c":"test['FamilySize'] = test['SibSp']+test['Parch']+1","73bb060b":"test['Family'] = test['FamilySize'].apply(Fam_label)","489ba00d":"train['Cabin'] = train['Cabin'].fillna('Unknown')\ntrain['Deck'] = train['Cabin'].str.get(0)\ntrain.loc[(train['Deck'] == 'T'), 'Deck'] = 'A'","9ea11a5e":"test['Cabin'] = test['Cabin'].fillna('Unknown')\ntest['Deck'] = test['Cabin'].str.get(0)","a6f02289":"Ticket_Count = dict(pd.concat([train, test])['Ticket'].value_counts())","c1a7c4bc":"def Ticket_Label(s):\n    if (s >= 2) & (s <= 4):\n        return 2\n    elif ((s > 4) & (s <= 8)) | (s == 1):\n        return 1\n    elif (s > 8):\n        return 0","afc19bd3":"train['TicketGroup'] = train['Ticket'].map(Ticket_Count).apply(Ticket_Label)","f7c5119d":"test['TicketGroup'] = test['Ticket'].map(Ticket_Count).apply(Ticket_Label)","7db7b4a8":"test = test.drop(columns=['PassengerId','Ticket', 'Cabin'])\ntrain = train.drop(columns=['PassengerId','Ticket', 'Cabin'])","218aa06c":"train = pd.get_dummies(train)","ef086ddc":"test = pd.get_dummies(test)","7e1ddc31":"X_train, X_test, y_train, y_test = train_test_split(train.drop(columns='Survived'), train.Survived, test_size=0.25, random_state=42)","a7e71bea":"# The best model is:\nbest_rf_clf = RandomForestClassifier(criterion='gini', \n                                           n_estimators=1100,\n                                           max_depth=5,\n                                           min_samples_split=4,\n                                           min_samples_leaf=5,\n                                           max_features='auto',\n                                           oob_score=True,\n                                           random_state=42,\n                                           n_jobs=-1)","931dcddb":"best_rf_clf.fit(train.drop(columns='Survived'), train.Survived)","0501fe96":"kf = KFold(n_splits=5, shuffle=True, random_state=42)","a0aba911":"y_pred_rf_clf = best_rf_clf.predict(X_test)","70b426ab":"print(classification_report(y_test,y_pred_rf_clf))","10c010f9":"cross_val_score(best_rf_clf, train.drop(columns='Survived'), train.Survived, cv=kf, scoring=\"accuracy\").mean()","dc4606c3":"cross_val_score(best_rf_clf, X_test, y_test, cv=kf, scoring=\"accuracy\").mean()","881c828c":"y_pred_rf_clf = best_rf_clf.predict(test)","41ecc417":"submission = pd.DataFrame({\"PassengerId\": test_PassengerId,\"Survived\": y_pred_rf_clf})\nsubmission.to_csv('rf_submission_for_kaggle.csv', index=False)","f4af1571":"train = data_train.copy() \ntest = data_test.copy()","fdaf5834":"Title_Dict = {}\nTitle_Dict.update(dict.fromkeys(['Capt', 'Col', 'Major', 'Dr', 'Rev'], 'Officer'))\nTitle_Dict.update(dict.fromkeys(['Don', 'Sir', 'the Countess', 'Dona', 'Lady'], 'Royalty'))\nTitle_Dict.update(dict.fromkeys(['Mme', 'Ms', 'Mrs'], 'Mrs'))\nTitle_Dict.update(dict.fromkeys(['Mlle', 'Miss'], 'Miss'))\nTitle_Dict.update(dict.fromkeys(['Mr'], 'Mr'))\nTitle_Dict.update(dict.fromkeys(['Master','Jonkheer'], 'Master'))","983772e4":"train['Title'] = train['Name'].apply(lambda x:x.split(',')[1].split('.')[0].strip())\ntrain['Title'] = train['Title'].map(Title_Dict)\ntrain = train.drop(columns=['Name'])","83890b51":"test['Title'] = test['Name'].apply(lambda x:x.split(',')[1].split('.')[0].strip())\ntest['Title'] = test['Title'].map(Title_Dict).drop(columns=['Name'])\ntest = test.drop(columns=['Name'])","d11290f1":"age_df = pd.concat([train, test])[['Age', 'Pclass','Sex','Title']]\nage_df=pd.get_dummies(age_df)\nknown_age = age_df[age_df.Age.notnull()].iloc[:,:].values\nunknown_age = age_df[age_df.Age.isnull()].iloc[:,:].values\ny = known_age[:, 0]\nX = known_age[:, 1:]","fd077331":"rfr = RandomForestRegressor(random_state=42, n_estimators=100, n_jobs=-1)\nrfr.fit(X, y)","de039783":"tr_df = pd.get_dummies(train[['Age', 'Pclass','Sex','Title']])\nunknown_age_tr_df = tr_df[tr_df.Age.isnull()].iloc[:,:].values\ntrain.loc[ (train.Age.isnull()), 'Age' ] = rfr.predict(unknown_age_tr_df[:, 1::])","5002f053":"te_df = pd.get_dummies(test[['Age', 'Pclass','Sex','Title']])\nunknown_age_te_df = te_df[te_df.Age.isnull()].iloc[:,:].values\ntest.loc[ (test.Age.isnull()), 'Age' ] = rfr.predict(unknown_age_te_df[:, 1::])","428ac55f":"Ticket_Count = dict(pd.concat([train, test])['Ticket'].value_counts())","5c521d3f":"def Ticket_Label(s):\n    if (s >= 2) & (s <= 4):\n        return 2\n    elif ((s > 4) & (s <= 8)) | (s == 1):\n        return 1\n    elif (s > 8):\n        return 0","bc366e12":"train['TicketGroup'] = train['Ticket'].map(Ticket_Count).apply(Ticket_Label)","ba6aad38":"test['TicketGroup'] = test['Ticket'].map(Ticket_Count).apply(Ticket_Label)","5ac751b4":"test = test.drop(columns=['PassengerId','Ticket', 'Cabin'])\ntrain = train.drop(columns=['PassengerId','Ticket', 'Cabin'])","4353f35a":"train = pd.get_dummies(train)","33a7a703":"test = pd.get_dummies(test)","e9f92daa":"X_train, X_test, y_train, y_test = train_test_split(train.drop(columns='Survived'), train.Survived, test_size=0.25, random_state=42)","d203c0bd":"best_rf_clf = RandomForestClassifier(criterion='gini', \n                                           n_estimators=1100,\n                                           max_depth=5,\n                                           min_samples_split=4,\n                                           min_samples_leaf=5,\n                                           max_features='auto',\n                                           oob_score=True,\n                                           random_state=42,\n                                           n_jobs=-1)","c1b9f25b":"best_rf_clf.fit(train.drop(columns='Survived'), train.Survived)","275f6b47":"kf = KFold(n_splits=5, shuffle=True, random_state=42)","08762ca9":"y_pred_rf_clf = best_rf_clf.predict(X_test)","4dbee176":"print(classification_report(y_test,y_pred_rf_clf))","5da733f6":"cross_val_score(best_rf_clf, train.drop(columns='Survived'), train.Survived, cv=kf, scoring=\"accuracy\").mean()","ca874d70":"cross_val_score(best_rf_clf, X_test, y_test, cv=kf, scoring=\"accuracy\").mean()","582acde4":"y_pred_rf_clf = best_rf_clf.predict(test)","c151d022":"submission = pd.DataFrame({\"PassengerId\": test_PassengerId,\"Survived\": y_pred_rf_clf})\nsubmission.to_csv('best_submission_for_kaggle.csv', index=False)","b3ab2487":"##### Ticket in train","e3eef327":"### Kaggle score: 0.78468","bd7ecc22":"### Metrics","e613b5af":"##### Age in test","ea9a7350":"#### Ticket","a086543d":"### Train data","25ce6507":"##### Deck in test","3d658465":"### Visualization of skewness","deec86e0":"#### Name => Title","36774174":"##### Ticket in train","28584e91":"### Kaggle score: 0.76794","b616515e":"#### Family","a9bef64f":"### Visualization of correlation between columns and target column","dcb30341":"### +Preprocessing","bcbf0e9e":"##### Ticket in test","049401b1":"### Metrics","a0ff3090":"### Metrics","67b7cb24":"## Basic","e72a334d":"grid_search_cv_rf_clf = RandomizedSearchCV(rf_clf, paramentrs_for_rf_clf, cv=5, n_jobs=-1, n_iter=500)","a340ad76":"#### Data","dfcc88d1":"grid_search_cv_rf_clf.fit(train.drop(columns='Survived'), train.Survived)","167c7211":"##### Family in test","7ff9d649":"### Metrics","502d257c":"### Model","f7de9770":"## Quick analysis","4171331e":"### Result","71482f6f":"##### Age in train","48333402":"### Full data","73ca3161":"best_rf_clf.get_params()","e93d7462":"### Kaggle score: 0.77900","8f9af4cb":"#### Age","28f8a5ee":"#### Ticket","77f20ce2":"### Model","19be558a":"### Result","0df451f9":"##### Deck in train","1b13efde":"#### Family","e5908d2e":"## Basic RandomForest","11ddf72a":"##### Ticket in test","98bd0bcc":"### Result","d7d10bcd":"## Loading data","118ab981":"##### Age in train","f0ccbf10":"## Visual data analysis","8b350cbb":"best_rf_clf = grid_search_cv_rf_clf.best_estimator_","ebc0cf3b":"## RandomForest with work on variables","71bf7e32":"#### Name => Title","15f8f26b":"rf_clf = RandomForestClassifier(max_features='auto', oob_score=True, random_state=42) ","3821884a":"### Result","6bbc5d56":"### +Preprocessing","310d1e7d":"### Result","c52866d8":"#### Age","cb8710c5":"#### Age","985ea9ac":"### Visualization of null values","27f276f3":"## Work with categorical columns","20a98bb6":"### Test data","17220421":"##### Age in test","152082c1":"#### Data","62495a3c":"#### Deck","b58ad369":"### Model","b9d34b0f":"## A little magic","9b67637b":"##### Family in train","086c8cb5":"#### Remove unnecessary","b377ac34":"# Conclusion","5bb8e1fa":"##### Ticket in test","20f91379":"#### Deck","b52ff51d":"##### Age in train","8da88e24":"##### Deck in test","a94bf0ba":"## Best model + best preprocessing","c26a1d15":"##### Deck in train","41c6cc85":"### +Preprocessing","dbfb95d9":"#### Encoding 'Sex'","3764ef3a":"#### Data","efd576fe":"### Model","363d04a6":"paramentrs_for_rf_clf = {'n_estimators':np.arange(2,5000), \\\n                         'criterion':['entropy','gini'],\\\n                         'max_depth':np.arange(1,15),\\\n                         'min_samples_split':np.arange(2,10),\\\n                         'min_samples_leaf':np.arange(1,10)\n                        }","53d6b3b2":"#  Machine learning models","0ebd7e65":"### Kaggle score: 0.76076","34027a50":"#### Remove unnecessary","59a0fd4a":"#### Ticket","7034b417":"##### Age in test","e40a3fa2":"### +Preprocessing","f51573bb":"# EDA","d847220f":"##### Ticket in train","7268b30e":"##### Family in test","6c1afcf9":"### Metrics","20a97910":"# Preprocessing","fdd1c5dd":"### Submission","fcb89f15":"##### Family in train","441ddaba":"#### Name => Title","e1bdfaf4":"### Kaggle score: 0.77990","4791100c":"### Model","e27ea267":"## Basic model with work on variables"}}