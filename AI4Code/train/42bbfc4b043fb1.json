{"cell_type":{"242bc303":"code","7b373f2a":"code","efbf5528":"code","703b72e1":"code","3bf201e7":"code","ed861f26":"markdown"},"source":{"242bc303":"import numpy as np\nfrom keras.datasets import mnist\nfrom keras.utils import np_utils\nfrom keras.models import Sequential\nfrom keras.layers import Dense,Dropout,Convolution2D,MaxPooling2D,Flatten\nfrom keras.optimizers import Adam\nfrom keras.utils.vis_utils import plot_model\nimport matplotlib.pyplot as plt\n# install pydot and graphviz","7b373f2a":"(x_train, y_train),(x_test, y_test) = mnist.load_data()\nprint(x_train.shape)","efbf5528":"x_train = x_train.reshape(-1,28,28,1)\/255.0\nx_test = x_test.reshape(-1,28,28,1)\/255.0\n\ny_train = np_utils.to_categorical(y_train,num_classes=10)\ny_test = np_utils.to_categorical(y_test,num_classes=10)\n\nx_train.shape","703b72e1":"model = Sequential()\n\n# first Convolutional layer\n# filters: number of convolution kernel\n# kernel_size:convolution windows\n# strides\n# padding: same\/valid\n# activation\n\nmodel.add(Convolution2D(input_shape=(28,28,1),filters=32,kernel_size=5,strides=1,padding='same',activation='relu'))\n\n# first pooling layer(input_shape\u2192(14,14,1))\nmodel.add(MaxPooling2D(pool_size=2,strides=2,padding='same'))\n\n# second convolution layer\nmodel.add(Convolution2D(filters=64,kernel_size=5,strides=1,padding='same',activation='relu'))\n\n# second pooling layer(input_shape\u2192(7,7,1))\nmodel.add(MaxPooling2D(pool_size=2,strides=2,padding='same'))\n\n# tranform the second pooling layer to one dimention(flatten_shape=(64,7,7))\nmodel.add(Flatten())\n\n# add the first fully connected layer\nmodel.add(Dense(1024,activation='relu'))\n\n# Dropout\nmodel.add(Dropout(0.5))\n\n# the second fully connected layer\nmodel.add(Dense(10,activation='softmax'))\n\n# # define optimizer\n# adam = Adam(lr=1e-4)\n\n# # compile the model\n# model.compile(optimizer=adam,loss='categorical_crossentropy',metrics=['accuracy'])\n\n# # fit model\n# model.fit(x_train, y_train, batch_size=64, epochs=10)\n\n# # evaluate the model\n# loss, accuracy = model.evaluate(x_test, y_test)\n# print('test loss:', loss)\n# print('test accuracy:', accuracy)","3bf201e7":"plot_model(model,to_file='model.png',show_shapes=True,show_layer_names='False',rankdir='TB')\nplt.figure(figsize=(10,10))\nimg = plt.imread('model.png')\nplt.imshow(img)\nplt.axis('off')\nplt.show()","ed861f26":"This time we convert x_trian.shape(60000,28,28) to (60000,28,28,1)\n\n- example:\n- (a,b,c,d) = a:the number of samples ;\n            b:length of picture\n            c:width of the picture\n            d:1 means black and white photo\n              3 means Color photos"}}