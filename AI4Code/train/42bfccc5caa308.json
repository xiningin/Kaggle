{"cell_type":{"391647c4":"code","1f8c6eb6":"code","1a8c60f8":"code","534339fa":"code","74a2cfc6":"code","57bc5468":"code","4fe7dc74":"code","cc696ea4":"code","ce4ffc60":"code","f60cac6d":"code","51fc7047":"code","d8c4961a":"code","d189f1e4":"code","15cbf588":"code","cea047af":"code","fd7f69f6":"code","4c528407":"code","4c168ae5":"code","69723339":"code","fe205d1d":"code","8c823052":"code","8f21e6a5":"code","6cbfa028":"code","e4b891a4":"code","614be158":"code","1fe0a7b1":"code","47b67d63":"code","52b48f6c":"code","526fd98b":"code","6a5fa353":"markdown","9d45af2d":"markdown","45e8ff9e":"markdown","a19e1e33":"markdown","a2a655f9":"markdown","21af62e9":"markdown","bf90ccd6":"markdown","85c577ec":"markdown","ad4c5636":"markdown","598d7e51":"markdown","fe3efa03":"markdown","5140e349":"markdown","85015227":"markdown","1935cccc":"markdown","0b820f5f":"markdown"},"source":{"391647c4":"import datetime\nimport time","1f8c6eb6":"\"\"\"\nAs we have seen, we have created one of our employees, but if the number of these employees is 200, \nit will take a long time to create them one by one, and object-oriented programming will help us here.\n\"\"\"\nemployee1_name = \"David\"\nemployee1_surname = \"Alex\"\nemployee1_age = 19\nemployee1_position = \"Marketing\"","1a8c60f8":"#Create a class\n\nclass EmployeeList:\n  #attribute = age, phone-number, adress, name and surname\n  #behaviour = capabilities\n  pass","534339fa":"#attribute\n# Note: Normally coding is not done in this way, but in general, it is written in this way to repeat and gain knowledge about the subject.\nclass SalesMan:\n  company = \"XYZ\"\n  age = 20\n  gender = \"MALE\"\n\nnew_salesman1 = SalesMan()\nprint(new_salesman1.gender)\nprint(new_salesman1.company)\nprint(new_salesman1.age)\nprint(\" \")\n\n#Changing the data\nnew_salesman1.company = \"ZYX\"\nprint(new_salesman1.company)","74a2cfc6":"#methods\n\n#Create a new class\n\nclass Square:\n  edge = 10 #meter\n\n  def areaSqaure(self):\n    area = self.edge * self.edge\n    return area\n    \nsquare1 = Square()\nprint(square1)\nprint(square1.edge)\nprint(square1.areaSqaure())","57bc5468":"# methods vs functions\n\n#Create a new class\n\nclass StudentsList:\n  age = 17\n  exam_score = 70\n\n  #methods\n  def ageExamScoreRatio(self):\n    ratio = print(self.age \/ self.exam_score)\n    return ratio\n\n#functions\ndef ageExamScoreRatio2(age1, exam_score1):\n  return print(age1 \/ exam_score1)\n  \n\nstudent_1 = StudentsList()\nprint(\"Method:\")\nstudent_1.ageExamScoreRatio()\nprint(\" \")\nprint(\"Function:\")\nageExamScoreRatio2(40,80)","4fe7dc74":"#Constructor\n\nclass Animals:\n\n  def __init__(self, animal, animal_age):\n    self.animal = animal\n    self.animal_age = animal_age\n  \n  def getAge(self):\n    return self.animal_age\n  \n  def getAnimal(self):\n    return self.animal\n  \nanimal1 = Animals(\"dog\", 7)\nanimal2 = Animals(\"cat\", 4)\n\nprint(animal1.getAge())\nprint(animal2.getAnimal())","cc696ea4":"#calculator project\n\nclass CalculatorProject:\n\n  def __init__(self, value1, value2):\n    self.value1 = value1\n    self.value2 = value2\n  \n  def valueAddition(self):\n    return self.value1 + self.value2\n  \n  def valueMultiply(self):\n    return self.value1 * self.value2\n  \n  def valueDivision(self):\n    return self.value1 \/ self.value2\n  \n  def valueSubtraction(self):\n    return self.value1 - self.value2\n\n# In its simplest form\nv1 = 100\nv2 = 20\nc1 = CalculatorProject(v1, v2)\n\nprint(c1.valueAddition())\nprint(c1.valueMultiply())\nprint(\"------------------\")\nct1 = c1.valueAddition()\nct2 = c1.valueMultiply()\nprint(\"Addition: {} , Multiply: {}\".format(ct1, ct2))","ce4ffc60":"# Improved version\n\n\"\"\"\nclass CalculatorProject:\n\n  def __init__(self, value1, value2):\n    self.value1 = value1\n    self.value2 = value2\n  \n  def valueAddition(self):\n    return self.value1 + self.value2\n  \n  def valueMultiply(self):\n    return self.value1 * self.value2\n\"\"\"\nprint(\"Choose to add (1) or to multiply (2) or devision(3) or subtraction(4)\")\nselection = int(input(\"Select 1 or 2 or 3 or 4\"))\n\nv3 = int(input(\"first value\"))\nv4 = int(input(\"second value\"))\nc2 = CalculatorProject(v3,v4)\n\nif selection == 1:\n  print(\"Addition:\", c2.valueAddition())\nelif selection == 2:\n  print(\"Multiply:\", c2.valueMultiply())\nelif selection == 3:\n  print(\"Division:\", c2.valueDivision())\nelif selection == 4:\n  print(\"Subtraction:\", c2.valueSubtraction())\nelse:\n  print(\" \")\n\n#finish","f60cac6d":"#Encapsulation\n#restricting methods and direct access to variables\n\nclass BankAccount:\n\n  def __init__(self, name, money, address):\n    self.name = name #global variable\n    self.money = money #private variable1!\n    self.address = address #gloabal variable\n\nperson1 = BankAccount(\"john\", 400, \"USA\")\nperson2 = BankAccount(\"messi\", 600, \"Canada\")","51fc7047":"person1.name","d8c4961a":"#Bank accounts are secure, but we have changed this value, now let's prevent it from being changed.\n\nperson1.money = person1.money + person2.money \nperson2.money = 0\n\nprint(person1.money)\nprint(person2.money)","d189f1e4":"#Private variable!\n\nclass BankAccount2:\n\n  def __init__(self, name1, money1, address1):\n    self.name1 = name1 #global variable\n    self.__money1 = money1 #private variable1!\n    self.address1 = address1 #gloabal variable\n  \n  #get and set methods\n  def getMoney(self):\n    return self.__money1\n  \n  def setMoney(self, amount):\n    self.__money1 = amount\n\n  def increase(self):\n    self.__money1 = self.__money1 + 500\n\nperson3 = BankAccount2(\"john\", 400, \"USA\")\nperson4 = BankAccount2(\"messi\", 600, \"Canada\")","15cbf588":"#As we have seen, we cannot pull this object or variable.\n# person3.__money\n\n#But now we can access this data by using the get and set methods.\nprint(\"Get Method:\", person3.getMoney())\nperson3.setMoney(300)\nprint(\"After Set Method:\", person3.getMoney())","cea047af":"print(\"Set Method:\", person4.getMoney())\nperson4.increase()\nprint(\"After Increase Method:\", person4.getMoney())","fd7f69f6":"#Inheritance\n\nclass Animals1(object):\n\n  def __init__(self):\n    print(\"animal is created\")\n\n  def walk(self):\n    print(\"animal walk\")\n  \n  def run(self):\n    print(\"animal run\")\n\nclass Bird(Animals1):\n  \n  def __init__(self):\n    super().__init__()\n    print(\"bird is created\")\n  \n  def fly(self):\n    print(\"bird can fly\")\n\nanimal2 = Bird()\nanimal2.fly()","4c528407":"#Abstract Classes\n#1. A superclass variable cannot be defined.\n#2. A superclass defined method needs to be defined in child classes\n\nfrom abc import ABC, abstractclassmethod\n\nclass Book(ABC):\n\n  @abstractclassmethod\n  def numberOfPages(self):\n    pass  \n  @abstractclassmethod\n  def costBook(self):\n    pass\n\nclass FunnyBook(Book):\n\n  def __init__(self):\n    print(\"Funny book\")\n  def numberOfPages(self):\n    print(\"200 pages\")\n  def costBook(self):\n    print(\"20.00 $\")\n\nbook1 = FunnyBook()","4c168ae5":"#Overriding\n\nclass Fruits(object):\n\n  def toString(self):\n    print(\"Fruit created\")\n  \nclass Banana(Fruits):\n\n  def toString(self):\n    print(\"Banana!\")\n\nfruit1 = Fruits()\nfruit1.toString()\n\nfruit2 = Banana() # banana calls overriding method\nfruit2.toString()","69723339":"#Polymorphism\n\nclass Employee:\n\n  def raisee(self):\n    raisee_rate = 0.10\n    result = 200 + 200 * raisee_rate\n    print(\"Employee:\", result)\n\nclass ComputerEngineer(Employee):\n\n  def raisee(self):\n    raisee_rate = 0.20\n    result = 200 + 200 * raisee_rate\n    print(\"Computer Engineer:\", result)\n\nclass ElectricEngineer(Employee):\n\n  def raisee(self):\n    raisee_rate = 0.35\n    result = 200 + 200 * raisee_rate\n    print(\"ElectricEngineer:\", result)\n\nemployee1 = Employee()\nemployee1.raisee()\n\ncomputerengineer1 = ComputerEngineer()\ncomputerengineer1.raisee()\n\nelectricengineer1 = ElectricEngineer()\nelectricengineer1.raisee()\n\nemployee_list = [computerengineer1, electricengineer1]\nprint(\" \")\n\nprint(\"For each in employee_list\")\nfor each in employee_list:\n  each.raisee()","fe205d1d":"from abc import ABC, abstractclassmethod\n\nclass Shape(ABC):\n\n  @abstractclassmethod\n  def area(self): pass\n\n  @abstractclassmethod\n  def perimeter(self): pass\n\n  def toString(self): pass\n\nclass Square(Shape):\n\n  def __init__(self, edge):\n    self.__edge = edge\n  \n  def area(self):\n    result = self.__edge**2\n    print(\"Square Area:\", result)\n\n  def perimeter(self):\n    result = self.__edge*4\n    print(\"Square Perimeter:\", result)\n  \n  def toString(self):\n    print(\"Square\")\n  \nclass Circle(Shape):\n\n  PI = 3.14\n  def __init__(self, radius):\n    self.__radius = radius\n  \n  def area(self):\n    result = Circle.PI*self.__radius**2\n    print(\"Circle Area:\", result)\n  \n  def perimeter(self):\n    result = 2*Circle.PI*self.__radius\n    print(\"Circle Perimeter:\", result)\n  \n  def toString(self):\n    print(\"Circle\")\n\nclass Rectangle(Shape):\n  \n  def __init__(self, short_edge, long_edge):\n    self.__short_edge = int(short_edge)\n    self.__long_edge = int(long_edge)\n  \n  def area(self):\n    result = (self.__short_edge * self.__long_edge)\n    print(\"Rectangle Area:\", result)\n\n  def perimeter(self):\n    result = (2 * (self.__short_edge + self.__long_edge))\n    print(\"Rectangle Perimeter:\", result)\n\n  def toString(self):\n    print(\"Rectangle\")\n  \nsquare1 = Square(5)\nsquare1.area()\nsquare1.perimeter()\nsquare1.toString()\nprint(\" \")\n\ncircle1 = Circle(5)\ncircle1.area()\ncircle1.perimeter()\ncircle1.toString()\nprint(\" \")\n\nrectangle1 = Rectangle(4,5)\nrectangle1.area()\nrectangle1.perimeter()\nrectangle1.toString()","8c823052":"#Create classes\nimport datetime\n\nclass VehicleRent:\n\n  def __init__(self, stock):\n    self.stock = stock\n    self.now = 0\n  \n  def displayStock(self):\n    print(\"{} vehicle available to rent\".format(self.stock))\n    return self.stock\n  \n  def rentHourly(self, n):\n    if n <= 0:\n      print(\"The value entered cannot be negative!\")\n      return None\n    elif n > self.stock:\n      print(\"Sorry, {} vehicle available to rent\".format(self.stock))\n      return None\n    else:\n      self.now = datetime.datetime.now()\n      print(\"Rented a {} vehicle for hourly at {} hours\".format(n,self.now.hour))\n\n      self.stock -= n\n      return self.now\n    \n  def rentDaily(self, n):\n    if n <= 0:\n      print(\"The value entered cannot be negative!\")\n      return None\n    elif n > self.stock:\n      print(\"Sorry, {} vehicle avaiable to rent\".format(self.stock))\n      return None\n    else:\n      self.now = datetime.datetime.now()\n      print(\"Rented a {} vehicle for daily at {} hours\".format(n,self.now.hour))\n\n      self.stock -= n\n      return self.now\n  def returnVehicle(self, request, brand):\n    car_h_price = 100\n    car_d_price = car_h_price\/8*24\n    bike_h_price = 50\n    bike_d_price = bike_h_price\/8*24\n\n    rentalTime, rentalBasis, numofVehicle = request\n    rentalTime = self.now\n    bill = 0\n\n    if (brand == \"car\"):\n      if rentalTime and rentalBasis and numofVehicle:\n        self.stock += numofVehicle\n        now = datetime.datetime.now()\n        rentalPeriod = now - rentalTime\n\n        if rentalBasis == 1: #hourly\n          bill = rentalPeriod.seconds\/3600*car_h_price*numofVehicle\n        elif rentalBasis == 2: #daily\n          bill = rentalPeriod.seconds\/(3600*24)*car_d_price*numofVehicle\n        \n        if (2 <= numofVehicle):\n          print(\"You have extra 20% discount!\")\n          bill = bill*0.8\n        \n        print(\"Thank you for returning your car\")\n        print(\"Price: $ {}\".format(bill))\n        return bill\n    \n    elif (brand == \"bike\"):\n      if rentalTime and rentalBasis and numofVehicle:\n        self.stock += numofVehicle\n        now = datetime.datetime.now()\n        rentalPeriod = now - rentalTime\n\n      if (rentalBasis == 1): #Hourly\n        bill = rentalPeriod.seconds\/3600*bike_h_price*numofVehicle\n      elif (rentalBasis == 2): #Daily\n        bill = rentalPeriod.seconds\/(3600*24)*bike_d_price*numofVehicle\n\n      print(\"Thank you for returning your bike\")\n      print(\"Price: $ {}\".format(bill))\n      return bill\n    \n    else:\n      print(\"You did not rent a car!\")\n      return None","8f21e6a5":"class CarRent(VehicleRent):\n\n  global discount_rate\n  discount_rate = 15\n  def __init__(self, stock):\n    super().__init__(stock)\n  \n  def discount(self, b):\n    bill = b - (b * discount.rate)\/100\n    return bill\n\nclass BikeRent(VehicleRent):\n\n  def __init__(self, stock):\n    super().__init__(stock)\n\nclass Customer:\n\n  def __init__(self):\n    self.bikes = 0\n    self.cars = 0\n    self.rentalBasis_b = 0\n    self.rentalBasis_c = 0\n    self.rentalTime_b = 0\n    self.rentalTime_c = 0 \n  \n  def requestVehicle(self, brand):\n    if brand == \"bike\":\n      bikes = input(\"How many bikes would you like to rent?\")\n      \n      try: \n        bikes = int(bikes)\n      except ValueError:\n        print(\"Number should be Number!\")\n        return -1\n      \n      if bikes < 1:\n        print(\"Number of bikes should be greater than zero\")\n        return -1\n      else:\n        self.bikes = bikes\n        return self.bikes\n\n    elif brand == \"car\":\n      cars = input(\"How many cars would you like to rent?\")\n\n      try: \n        cars = int(cars)\n      except ValueError:\n        print(\"Number should be Number!\")\n        return -1\n\n      if cars < 1:\n        print(\"Number of bikes should be greater than zero\")\n        return -1\n      else:\n        self.cars = cars\n        return self.cars\n\n    else:\n      print(\"Request vehicle error\")\n      return None\n\n  def returnVehicle(self, brand):\n    if brand == \"bike\":\n      if self.rentalBasis_b and self.rentalTime_b and self.bikes:\n        return self.rentalBasis_b, self.rentalTime_b, self.bikes\n      else:\n        return 0,0,0\n    \n    elif brand == \"car\":\n        if self.rentalBasis_c and self.rentalTime_c and self.cars:\n          return self.rentalBasis_c, self.rentalTime_c, self.cars\n        else:\n          return 0,0,0\n    else:\n      print(\"Return vehicle error\")","6cbfa028":"bike100 = BikeRent(100)\ncar10 = CarRent(10)\ncustomer11 = Customer()","e4b891a4":"main_menu = True\n\nwhile True:\n\n  if main_menu:\n    print(\"\"\"\n    **** Vehicle Rental Shop ****\n    A. Bike Menu\n    B. Car Menu\n    Q. Exit\n    \"\"\")\n    main_menu = False\n\n    choice = input(\"Enter choice: \")\n\n  if choice == \"A\" or choice == \"a\":\n    print(\"\"\"\n    **** Bike Menu ****\n    1. Display Available Bikes\n    2. Request a bike on hourly basis $50\n    3. Request a bike on daily basis $160\n    4. Return a Bike\n    5. Main Menu\n    6. Exit\n    \"\"\")\n\n    choice = input(\"Enter choice: \")\n\n    try:\n      choice = int(choice)\n    except ValueError:\n      print(\"It is not integer\")\n      continue\n    \n    if choice == 1:\n      bike100.displayStock()\n      choice = \"A\"\n    elif choice == 2:\n      customer11.rentalTime_b = bike100.rentHourly(customer11.requestVehicle(\"bike\"))\n      main_menu = True\n      print(\"----------------\")\n    elif choice == 3:\n      customer11.rentalTime_b = bike100.rentDaily(customer11.requestVehicle(\"bike\"))\n      customer11.rentalBasis_b = 2\n      main_menu = True\n      print(\"----------------\")\n    elif choice == 4:\n      customer11.bill = bike100.returnVehicle(customer11.returnVehicle(\"bike\"),\"bike\")\n      customer11.rentalBasis_b, customer11.rentalTime_b, customer11.bikes = 0,0,0\n      main_menu = True\n      print(\"----------------\")\n    elif choice == 5:\n      main_menu = True\n    elif choice == 6:\n      break\n    else:\n      print(\"Invalid input! Please enter a number between 1-6\")\n      main_menu = True\n\n  elif choice == \"B\" or choice == \"b\":\n    print(\"\"\"\n    **** Car Menu ****\n    1. Display Available Cars\n    2. Request a car on hourly basis $50\n    3. Request a car on daily basis $160\n    4. Return a Car\n    5. Main Menu\n    6. Exit\n    \"\"\")\n\n    choice = input(\"Enter a choice: \")\n\n    try:\n      choice = int(choice)\n    except ValueError:\n      print(\"It is not integer\")\n      continue\n    \n    if choice == 1:\n      car10.displayStock()\n      choice = \"B\"\n    elif choice == 2:\n      customer11.rentalTime_c = car10.rentHourly(customer11.requestVehicle(\"car\"))\n      customer11.rentalBasis_c = 1\n      main_menu = True\n      print(\"-------------------\")\n    elif choice == 3:\n      customer11.rentalTime_c = car10.rentDaily(customer11.requestVehicle(\"car\"))\n      customer11.rentalBasis_c = 2\n      main_menu = True\n      print(\"-------------------\")\n    elif choice == 4:\n      customer11.bill = car10.returnVehicle(customer11.returnVehicle(\"car\"),\"car\")\n      customer11.rentalBasis_c, customer11.rentalTime_c, customer11.cars = 0,0,0\n      main_menu = True\n      print(\"-------------------\")\n    elif choice == 5:\n      main_menu = True\n    elif choice == 6:\n      break\n    else:\n      print(\"Invalid input! Please enter a number between 1-6\")\n      main_menu = True\n\n  elif choice == \"Q\" or choice == \"q\":\n    break\n  \n  else:\n    print(\"Invalid input! Please enter A-B-Q\")\n    main_menu = True\n  print(\"Thank you for using Rental Vehicle Shop!\")","614be158":"def addition(value1, value2):\n  return value1 + value2\n\ndef subtract(value1, value2):\n  return value1 - value2\n\ndef division(value1, value2):\n  return value1\/value2\n\ndef multiply(value1, value2):\n  return value1 * value2\n\nwhile True:\n\n  try:\n    value1 = float(input(\"Enter a value1: \"))\n    value2 = float(input(\"Enter a value2: \"))\n    operator = input(\"\"\"\n    What is the procedure to do(addition, subtract, division, multiply): \n    Note: Press (Q) to sign out!:\n    \"\"\")\n\n    if operator == \"addition\":\n      addition_o = addition(value1, value2)\n      print(\"Addition: {}\".format(addition_o))\n      break\n    \n    elif operator == \"subtract\":\n      subtract_o = subtract(value1, value2)\n      print(\"Subtract: {}\".format(subtract_o))\n      break\n    \n    elif operator == \"divison\":\n      division_o = division(value1, value2)\n      print(\"Divison: {}\".format(division_o))\n      break\n\n    elif operator == \"multiply\":\n      multiply_o = multiply(value1, value2)\n      print(\"Multiply: {}\".format(multiply_o))\n      break\n    \n    elif operator == \"q\":\n      break\n     \n    else:\n      print(\"An incorrect value was entered.\")\n  except ValueError:\n    print(\"An incorrect value was entered.\")","1fe0a7b1":"import time\n\nrentalTime4 = time.ctime()\nprint(rentalTime4)\n","47b67d63":"rentalTime5 = time.ctime()\nprint(rentalTime5)","52b48f6c":"import datetime\nrentalTime6 = datetime.datetime.now()\nprint(rentalTime6)","526fd98b":"rentalTime7 = datetime.datetime.now()\nprint(rentalTime7)\n\nd = rentalTime7 - rentalTime6\nprint(d.seconds\/3600*24*100)","6a5fa353":"<a id=0><\/a>\n# **Introduction to Classes**","9d45af2d":"<a id=12><\/a>\n# **Rent a Vehicle Shop**\n\nVehicle Rental Project; The overall aim of the project is that customers can rent two vehicles (cars or bicycles). They can rent them on an hourly or daily basis, and there will be a price reduction on certain rentals.\n\n**I recommend you do it with a scripting program while this example, some data can be save my problems.**","45e8ff9e":"<a id=2><\/a>\n# **Methods**","a19e1e33":"<a id=8><\/a>\n# **Abstract Classes**","a2a655f9":"<a id=6><\/a>\n# **Encapsulation**","21af62e9":"<a id=10><\/a>\n# **Polymorphism**","bf90ccd6":"<a id=4><\/a>\n# **Constructor**","85c577ec":"# **Chapter 2: Object Based Programming (OBP)**\n\n## Introduction: In this section, we will generally make operations on object-oriented programs, and we will make general examples in line with the operations. Note: You can review the introduction to the previous [python basics](https:\/\/www.kaggle.com\/ddarkk007\/python-workbook-for-beginners).\n\n<font color='blue'>\n# **Content:**\n\n1. [Introduction to Classes](#0)\n1. [Attribute](#1)\n1. [Methods](#2)\n1. [Methods vs Functions](#3)\n1. [Constructor](#4)\n1. [Example: Calculator Project](#5)\n1. [Encapsulation](#6)\n1. [Inheritance](#7)\n1. [Abstract Classes](#8)\n1. [Overriding](#9)\n1. [Polymorphism](#10)\n1. [Example: Calculator Shape](#11)\n1. [Example: Rent Vehicle Shop](#12)\n1. [Example: Calculator Project 2](#13)","ad4c5636":"<a id=5><\/a>\n# **Calculator Project**","598d7e51":"<a id=11><\/a>\n# **Calculator Shapes**\n\nCalculating the circumference and areas of geometric shapes.","fe3efa03":"<a id=3><\/a>\n# **Methods vs Functions**","5140e349":"<a id=7><\/a>\n# **Inheritance**","85015227":"<a id=1><\/a>\n# **Attribute**","1935cccc":"<a id=9><\/a>\n# **Overriding**","0b820f5f":"<a id=13><\/a>\n# **Calculator Project 2**"}}