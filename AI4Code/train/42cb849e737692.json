{"cell_type":{"b1ac59d7":"code","fe679386":"code","bdd7f5e3":"code","610a972e":"code","008c30e2":"code","87fa0e9e":"code","7f476f54":"code","baccd7a1":"code","31aba7c1":"code","b9645f93":"code","34d5dcda":"code","42ce55e9":"code","0e0f7531":"code","08e93910":"code","7211acce":"code","f2feaa86":"code","12660bd5":"markdown"},"source":{"b1ac59d7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","fe679386":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime\nimport matplotlib.dates as mdates\nimport matplotlib.dates as dates\nfrom datetime import datetime,timedelta","bdd7f5e3":"#..\/input\/temperature-readings-iot-devices\/IOT-temp.csv\nIoT_temp = pd.read_csv(\"..\/input\/temperature-readings-iot-devices\/IOT-temp.csv\",parse_dates=['noted_date'])\nIoT_temp.head()","610a972e":"IoT_temp.head(100)","008c30e2":"IoT_temp.info()","87fa0e9e":"IoT_temp.describe()","7f476f54":"IoT_temp.describe(include='O')","baccd7a1":"fig,ax = plt.subplots(1,figsize=(7,5))\nsns.countplot(IoT_temp['out\/in'])\nplt.show()","31aba7c1":"fig,ax = plt.subplots(1,figsize=(15,8))\nsns.kdeplot(IoT_temp.loc[IoT_temp['out\/in']=='Out','temp'],shade=True,ax=ax, label=\"outside temp\")\nsns.kdeplot(IoT_temp.loc[IoT_temp['out\/in']=='In','temp'],shade=True,ax=ax,label=\"inside temp\")\nplt.show()","b9645f93":"fig,ax = plt.subplots(1,figsize=(15,8))\nsns.distplot(IoT_temp.loc[IoT_temp['out\/in']=='Out','temp'],ax=ax)\nsns.distplot(IoT_temp.loc[IoT_temp['out\/in']=='In','temp'],ax=ax)\nplt.show()","34d5dcda":"IoT_temp.iloc[99][\"noted_date\"]","42ce55e9":"IoT_temp.iloc[0][\"noted_date\"]","0e0f7531":"# Load data\ndf = IoT_temp\ndf[\"noted_date\"] = pd.to_datetime(df[\"noted_date\"])\n\nstart_datetime = df.iloc[99][\"noted_date\"]\nend_datetime = df.iloc[0][\"noted_date\"]\ntitle_label = start_datetime.strftime(\"%Y\/%m\/%d\")\n\nfig = plt.figure(figsize=(20,4), dpi=200)\nax = fig.add_subplot(1,1,1)\n\nax.bar(x=df[\"noted_date\"], height=df[\"temp\"], width=0.008, color=\"lightgreen\", align=\"edge\")\nax.set_xlim(start_datetime, end_datetime)\nax.set_title(title_label, fontsize=10)\nax.set_facecolor(\"white\")\nax.grid(axis=\"both\", which=\"both\", linewidth=0.5, linestyle=\"dashed\", alpha=0.5)\n\n# \u4e3b\u76ee\u76db\u8a2d\u5b9a\n# x\u8ef8\u76ee\u76db\u306e\u30e9\u30d9\u30eb\u306b\u6642\u523b\u3092\u8868\u793a\u3059\u308b\u3068\u88dc\u52a9\u76ee\u76db\u306e\u30e9\u30d9\u30eb\u3068\u88ab\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u65e5\u4ed8\u3060\u3051\u3002\nax.xaxis.set_major_locator(dates.DayLocator())\nax.xaxis.set_major_formatter(dates.DateFormatter(\"%m\/%d %a\"))\nax.tick_params(axis=\"x\", which=\"major\", labelsize=8)\nax.tick_params(axis=\"y\", which=\"major\", labelsize=8)\n\n# \u88dc\u52a9\u76ee\u76db\u8a2d\u5b9a\nax.xaxis.set_minor_locator(dates.HourLocator(interval=3))\nax.xaxis.set_minor_formatter(dates.DateFormatter(\"\\n\\n%H:%M\"))\nax.tick_params(axis=\"x\", which=\"minor\", labelsize=6)\n\n","08e93910":"#\u5916\u306e\u30c7\u30fc\u30bf\u3068\u3001\u4e2d\u306e\u30c7\u30fc\u30bf\u3067\u308f\u3051\u308b\ndf1 = IoT_temp[IoT_temp['out\/in']=='Out']\ndf2 = IoT_temp[IoT_temp['out\/in']=='In']\ndf1","7211acce":"# \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u6e96\u5099\n\nstart_datetime = df.iloc[99][\"noted_date\"]\nend_datetime = df.iloc[0][\"noted_date\"]\n\ntarget_df1 = df1[(df1[\"noted_date\"] > start_datetime)&(df1[\"noted_date\"] < end_datetime)]\ntarget_df2 = df2[(df2[\"noted_date\"] > start_datetime)&(df2[\"noted_date\"] < end_datetime)]\n\n\n# \u63cf\u753b\nfig = plt.figure(figsize=(20,4), dpi=200)\nax = fig.add_subplot(1,1,1)\n\n\nax.set_xlim(start_datetime, end_datetime)\nax.set_title(title_label, fontsize=10)\nax.set_facecolor(\"white\")\nax.grid(axis=\"both\", which=\"both\", linewidth=0.5, linestyle=\"dashed\", alpha=0.5)\n\nax.plot(target_df1[\"noted_date\"], target_df1[\"temp\"])\nax.plot(target_df2[\"noted_date\"], target_df2[\"temp\"])\n\n\n# \u8ef8\u76ee\u76db\u306e\u8a2d\u5b9a\nax.xaxis.set_major_locator(dates.DayLocator())\nax.xaxis.set_major_formatter(dates.DateFormatter(\"%m\/%d %a\"))\n\n# \u8ef8\u76ee\u76db\u30e9\u30d9\u30eb\u306e\u56de\u8ee2\nlabels = ax.get_xticklabels()\nplt.setp(labels, rotation=45, fontsize=10);\n\nax.grid()","f2feaa86":"# building new features for time stamp.\n\ndef features_build(df):\n    df['Date'] = pd.to_datetime(df['noted_date'])\n    df['Year'] = df['noted_date'].dt.year\n    df['Month'] = df.Date.dt.month\n    df['Day'] = df.Date.dt.day\n    df['WeekOfYear'] = df.Date.dt.weekofyear\n    \nfeatures_build(IoT_temp)\nfig ,ax = plt.subplots(1,figsize=(8,5))\nsns.scatterplot(x=\"Month\", y=\"temp\", hue=\"out\/in\", data=IoT_temp,ax=ax)\nplt.show()\n# plotting discrete tempt values for month time stamp.\n","12660bd5":"\u2191This graph ...:thinkingface:\nPlease tell me about the graph of time series data."}}