{"cell_type":{"cd3b285c":"code","2541caf0":"code","effeec46":"code","85273aed":"code","a170d090":"code","e4b0dcd3":"code","5009347f":"code","c2f9fa48":"code","1274adc0":"code","8e640f38":"code","6070bc96":"code","b2dbbe71":"code","9b173cd6":"code","168e2e0e":"code","aee12652":"code","131986c5":"code","ccf5900a":"code","4594f84d":"code","2da9b286":"code","66f8b3fc":"code","043eb395":"code","d4cd8960":"code","decfbe37":"code","0328ab54":"code","264abf90":"code","f0766d2a":"code","992e0f3b":"code","a6e2e1a7":"code","e0f54a43":"code","1d8897f1":"code","2e4a2dcb":"code","adaab75b":"code","a03eb8ad":"code","8f37ff83":"code","ec2e989e":"code","da7d233a":"code","4e8db839":"code","bd393f72":"code","9a59ba7b":"code","ccdecae1":"code","6519e282":"code","b46bb425":"code","ea9e180d":"code","74e64634":"code","92871adf":"code","9acb8f95":"code","32309e3b":"code","756cb873":"code","9e537927":"code","33657dae":"markdown","5883919e":"markdown","0cf87cea":"markdown","a7c3ea19":"markdown","08016c80":"markdown","74254a58":"markdown","1579dc73":"markdown"},"source":{"cd3b285c":"import numpy as np \nimport pandas as pd \nimport os\nimport gc\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport datetime\nprint(os.listdir(\"..\/input\"))","2541caf0":"train_df = pd.read_csv(\"..\/input\/train.csv\", parse_dates=[\"first_active_month\"])\ntest_df = pd.read_csv(\"..\/input\/test.csv\", parse_dates=[\"first_active_month\"])","effeec46":"train_df.head()","85273aed":"train_df[\"feature_1\"].value_counts()","a170d090":"train_df[\"feature_2\"].value_counts()","e4b0dcd3":"train_df[\"feature_3\"].value_counts()","5009347f":"sns.set_style(\"ticks\")\nplt.figure(figsize=[6,4])\nsns.distplot(train_df[\"target\"])\nplt.show()","c2f9fa48":"train_df.isna().sum()","1274adc0":"test_df.isna().sum()","8e640f38":"train_df.shape","6070bc96":"train_df.dtypes","b2dbbe71":"# from old fastai old\n# https:\/\/github.com\/fastai\/fastai\/blob\/master\/old\/fastai\/structured.py#L76\nimport re\ndef add_datepart(df, fldname, drop=False, time=False):\n    fld = df[fldname]\n    fld_dtype = fld.dtype\n    if isinstance(fld_dtype, pd.core.dtypes.dtypes.DatetimeTZDtype):\n        fld_dtype = np.datetime64\n\n    if not np.issubdtype(fld_dtype, np.datetime64):\n        df[fldname] = fld = pd.to_datetime(fld, infer_datetime_format=True)\n    targ_pre = re.sub('[Dd]ate$', '', fldname)\n    attr = ['Year', 'Month', 'Week', 'Day', 'Dayofweek', 'Dayofyear',\n            'Is_month_end', 'Is_month_start', 'Is_quarter_end', 'Is_quarter_start', 'Is_year_end', 'Is_year_start']\n    if time: attr = attr + ['Hour', 'Minute', 'Second']\n    for n in attr: df[targ_pre + n] = getattr(fld.dt, n.lower())\n    df[targ_pre + 'Elapsed'] = fld.astype(np.int64) \/\/ 10 ** 9\n    if drop: df.drop(fldname, axis=1, inplace=True)\n","9b173cd6":"add_datepart(train_df, \"first_active_month\")\nadd_datepart(test_df, \"first_active_month\")","168e2e0e":"train_df['elapsed_time'] = (datetime.date(2018, 2, 1) - train_df['first_active_month'].dt.date).dt.days\ntest_df['elapsed_time'] = (datetime.date(2018, 2, 1) - test_df['first_active_month'].dt.date).dt.days","aee12652":"print(\"Train Data Time Range:\",train_df[\"first_active_month\"].min(), \"-\", train_df[\"first_active_month\"].max())\nprint(\"Test Data Time Range:\",test_df[\"first_active_month\"].min(), \"-\",  test_df[\"first_active_month\"].max())","131986c5":"train_df.groupby(\"first_active_month\")[\"target\"].mean().plot()","ccf5900a":"set((train_df[\"first_active_month\"])).intersection(set(test_df[\"first_active_month\"]))","4594f84d":"train_card_id = train_df[\"card_id\"]\ntest_card_id = test_df[\"card_id\"]","2da9b286":"train_df.sort_values(\"first_active_month\", inplace=True)","66f8b3fc":"train_df.reset_index(drop=True, inplace=True)","043eb395":"train_columns = [c for c in train_df.columns if c not in [\"first_active_month\", \"card_id\", \"target\"]]","d4cd8960":"from sklearn.model_selection import train_test_split","decfbe37":"X_train, X_val, y_train, y_val = train_test_split(train_df[train_columns], train_df[\"target\"], test_size = 0.2, random_state=1001)","0328ab54":"(X_train.shape, y_train.shape), (X_val.shape, y_val.shape)","264abf90":"from sklearn.metrics import mean_squared_error\nimport lightgbm as lgb","f0766d2a":"params = {\n\"objective\" : \"regression\",\n\"metric\" : \"rmse\",\n\"num_leaves\" : 12,\n\"learning_rate\" : 0.01,\n\"bagging_fraction\" : 0.7,\n\"feature_fraction\" : 0.9,\n\"bagging_frequency\" : 4,\n\"bagging_seed\" : 1001,\n\"verbosity\" : -1\n}","992e0f3b":"cat_cols = [\"feature_1\", \"feature_2\", \"feature_3\"]","a6e2e1a7":"dtrain = lgb.Dataset(X_train, label=y_train, categorical_feature=cat_cols, free_raw_data=False)\ndval = lgb.Dataset(X_val, label=y_val, categorical_feature=cat_cols, free_raw_data=False)","e0f54a43":"evals_result = {}\nmodel_lgb = lgb.train(params, dtrain, 500, valid_sets=[dtrain,dval], valid_names=[\"train\", \"val\"], early_stopping_rounds=30, verbose_eval=100, evals_result=evals_result)","1d8897f1":"lgb.plot_importance(model_lgb, figsize=(12,10))","2e4a2dcb":"lgb.plot_importance(model_lgb, figsize=(12,10), importance_type=\"gain\")","adaab75b":"lgb.plot_metric(evals_result, \"rmse\", figsize=(12,10))","a03eb8ad":"pred_lgb = model_lgb.predict(test_df[train_columns])","8f37ff83":"ss = pd.DataFrame({\"card_id\":test_card_id, \"target\":pred_lgb})\nss.to_csv(\"preds_starter_lgb.csv\", index=None)\nss.head()","ec2e989e":"import xgboost as xgb","da7d233a":"dtrain_xgb = xgb.DMatrix(X_train, label=y_train)\ndval_xgb = xgb.DMatrix(X_val, y_val)","4e8db839":"xgb_params = {\n        'objective': 'reg:linear',\n        'learning_rate': 0.02,\n        'max_depth': 5,\n        'subsample': 0.7,\n        'colsample_bytree': 0.9,\n        'colsample_bylevel': 0.9,\n        'n_jobs': -1,\n        \"silent\": 1\n    }","bd393f72":"evallist  = [(dtrain_xgb, 'train'), (dval_xgb, \"val\")]","9a59ba7b":"model_xgb = xgb.train(xgb_params, dtrain_xgb, num_boost_round=500, evals=evallist, early_stopping_rounds=50, verbose_eval=100)","ccdecae1":"xgb.plot_importance(model_xgb)","6519e282":"preds_xgb = model_xgb.predict(xgb.DMatrix(test_df[train_columns]))","b46bb425":"ss = pd.DataFrame({\"card_id\":test_card_id, \"target\":preds_xgb})\nss.to_csv(\"preds_starter_xgb.csv\", index=None)\nss.head()","ea9e180d":"from catboost import CatBoostRegressor","74e64634":"model_cat = CatBoostRegressor(iterations=500,\n                             learning_rate=0.02,\n                             depth=6,\n                             eval_metric='RMSE',\n                             bagging_temperature = 0.9,\n                             od_type='Iter',\n                             metric_period = 100,\n                             od_wait=50)","92871adf":"model_cat.fit(X_train, y_train,\n             eval_set=(X_val,y_val),\n             cat_features=np.array([0,1,2]),\n             use_best_model=True,\n             verbose=100)","9acb8f95":"preds_cat = model_cat.predict(test_df[train_columns])  ","32309e3b":"pd.DataFrame(model_cat.get_feature_importance(), index=X_train[train_columns].columns, columns=[\"FeatureImportance\"]).sort_values(\"FeatureImportance\", ascending=False).plot(kind=\"barh\", legend=False, figsize=(12,10))","756cb873":"ss = pd.DataFrame({\"card_id\":test_card_id, \"target\":preds_cat})\nss.to_csv(\"preds_starter_cat.csv\", index=None)\nss.head()","9e537927":"ss_blend = pd.DataFrame({\"card_id\":test_card_id, \"target\":((0.33 * preds_xgb) + (0.34 * pred_lgb)+ (0.33 * preds_cat))})\nss_blend.to_csv(\"preds_starter_blend.csv\", index=None)\nss_blend.head()","33657dae":"So there are some intersection between train and test data.","5883919e":"### Blending","0cf87cea":"So seems like feature 1,2 and 3 are cateogrical.","a7c3ea19":"#### xgboost","08016c80":"### To be continued...","74254a58":"#### Catboost","1579dc73":"Sort data by date and get last 10% for validation split"}}