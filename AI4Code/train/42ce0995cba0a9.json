{"cell_type":{"5e8b9b68":"code","748f07d9":"code","1af239f1":"code","9d1223b6":"code","15d11189":"code","7c79ca1c":"code","0f79141f":"code","9b635638":"code","0bf3c00a":"code","5982885d":"code","a9cd3f7d":"code","566213a6":"code","1f80015f":"code","88372537":"code","ab033d75":"code","20084ba5":"code","500b7116":"code","3a43f39f":"code","d85d5d7c":"code","a586129d":"code","0916fc21":"code","c7244f8e":"code","721bfb3c":"code","1faad81c":"code","330c79fa":"code","eeb4bb94":"code","e6f95c63":"code","b30b988e":"code","2d1227ec":"code","ac968890":"code","31431111":"code","4db3eb4f":"code","9fc28aff":"code","f7636ac2":"code","67f279fd":"code","b18f423a":"code","2d97034e":"code","d6e3f085":"code","df9b0deb":"code","352f2bff":"code","d09087bb":"code","feda8608":"code","3405482c":"code","33286a1a":"code","b31a160c":"code","2d1ef84d":"code","87bc462c":"code","f0e4dfdb":"code","44fcf250":"code","e3b01e63":"code","dae30d6c":"code","b77a03e9":"code","05ccb8ee":"code","48be889f":"code","a2592369":"code","8c23e3e4":"code","32cd3d1c":"code","899cab66":"code","12acfcd0":"code","b7d8ea12":"code","a054cd6a":"code","785194c5":"code","dfba36ea":"code","62ef916c":"code","35fbf737":"code","0efb3cd4":"code","2dd26924":"code","17ba61a3":"code","61730fda":"code","b339e4bd":"code","df08ab7b":"code","378afab2":"code","085b7f67":"code","f3a8e378":"code","4367d42e":"code","3bae4c63":"code","e38c169d":"code","3019cd9d":"code","b7e92159":"code","a30095a7":"code","7b178d21":"code","29f2c960":"code","2bb13483":"code","8c505fb6":"code","6cafc57c":"code","bfdbe18d":"code","149b3428":"code","5c583f3a":"code","0ae882f5":"code","4428167a":"code","483ee93b":"code","8bb8da29":"code","3d7990b2":"code","18a31f34":"code","2e30ebe8":"code","64a9651f":"code","8b438516":"code","010f48b0":"code","a57f31ae":"markdown","d3f4c9ac":"markdown","89f352ff":"markdown","f04a05fc":"markdown","b8e25e39":"markdown","b13bac1d":"markdown","3d530768":"markdown","47e08841":"markdown","a2dd96f2":"markdown","2bde4d2c":"markdown","fad0aa49":"markdown","cf68c7db":"markdown","81548aa2":"markdown","eb23359b":"markdown","75a84d79":"markdown","4739ac76":"markdown","e09e7520":"markdown","a956d9d9":"markdown","7baa4410":"markdown","a768817e":"markdown","9dfdbb87":"markdown","0c8447ae":"markdown","cd4c2f38":"markdown","95806ca7":"markdown","c2070877":"markdown","da55e482":"markdown","0cf39ba8":"markdown","5593bb36":"markdown","a1dc466d":"markdown","b7bae5c2":"markdown","a9929b8f":"markdown","55c1649e":"markdown","d1e0e063":"markdown","510686cd":"markdown","9552441a":"markdown","b221ff34":"markdown","52c7faea":"markdown","e0e3db7b":"markdown","7d1e8fa7":"markdown","2815a41e":"markdown","71aabe3e":"markdown","4963baf3":"markdown","4bdbdbce":"markdown","f5c385b5":"markdown","8c78a122":"markdown","4adb5d2d":"markdown"},"source":{"5e8b9b68":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom collections import Counter\nimport warnings\nwarnings.filterwarnings(\"ignore\") #This ignores the warnings coming from python.\nplt.style.use(\"seaborn-whitegrid\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","748f07d9":"plt.style.available #The whole plot sytles that we can use","1af239f1":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]","9d1223b6":"train_df.columns","15d11189":"train_df.head()","7c79ca1c":"train_df.describe()","0f79141f":"train_df.info()","9b635638":"def bar_plot(variable):\n    \"\"\"\n    input: Variable ex: \"Sex\"\n    output: bar plot & value count\n    \n    \"\"\"\n    # Get feature\n    var = train_df[variable]\n    # Count Number of categorical variable(value\/sample)\n    varValue = var.value_counts()\n    \n    #Visualize\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index,varValue)\n    plt.xticks(varValue.index,varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))","0bf3c00a":"category1 = [\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\",\"Parch\"]\nfor c in category1:\n    bar_plot(c)\n    plt.show()","5982885d":"category2 = [\"Cabin\",\"Name\",\"Ticket\"]\nfor c in category2:\n    print(\"{}\\n\".format(train_df[c].value_counts()))","a9cd3f7d":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable],bins = 50) #Calling variables from df\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequencey\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","566213a6":"numericVar = [\"Fare\",\"Age\",\"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","1f80015f":"train_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"],as_index = False)","88372537":"# Pclass vs Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"],as_index = False).mean().sort_values(by = \"Survived\",ascending = False)","ab033d75":"# Sex vs Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"],as_index = False).mean().sort_values(by = \"Survived\",ascending = False)","20084ba5":"# SibSp vs Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"],as_index = False).mean().sort_values(by = \"Survived\",ascending = False)","500b7116":"# Parch vs Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"],as_index = False).mean().sort_values(by = \"Survived\",ascending = False)","3a43f39f":"# Embarked vs Survived\ntrain_df[[\"Embarked\",\"Survived\"]].groupby([\"Embarked\"],as_index = False).mean().sort_values(by = \"Survived\",ascending = False)","d85d5d7c":"def detect_outliers(df,features):\n    outlier_indices = []\n    for c in features:\n        #Q1\n        Q1 =  np.percentile(df[c],25)        \n        #Q3\n        Q3 = np.percentile(df[c],75)\n        #IQR\n        IQR = Q3 - Q1\n        #Outlier step\n        outlier_step = IQR* 1.5\n        #Detect outlier and their indeces\n        outlier_list_col = df[((df[c]) < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        #Store indeces\n        outlier_indices.extend(outlier_list_col)\n        \n    outlier_indices = Counter(outlier_indices)  \n    multiple_outliers = list(i for i,v in outlier_indices.items() if v > 2)\n    return multiple_outliers","a586129d":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"],)]","0916fc21":"# Drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis = 0).reset_index(drop = True)","c7244f8e":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df],axis = 0).reset_index(drop = True)","721bfb3c":"train_df.columns[train_df.isnull().any()]","1faad81c":"train_df.isnull().sum()","330c79fa":"train_df[train_df[\"Embarked\"].isnull()]","eeb4bb94":"train_df.boxplot(column = \"Fare\",by = \"Embarked\")","e6f95c63":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")","b30b988e":"train_df[train_df[\"Fare\"].isnull()]","2d1227ec":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(train_df[train_df[\"Pclass\"] == 3][\"Fare\"].mean())","ac968890":"train_df[train_df[\"Fare\"].isnull()]","31431111":"import matplotlib.pyplot as plt\nplt.plot([1, 2, 3, 4])\nplt.ylabel('some numbers')\nplt.show()","4db3eb4f":"list1 = [\"SibSp\",\"Parch\",\"Age\",\"Fare\",\"Survived\"]\nsns.heatmap(train_df[list1].corr(), annot = True,fmt = \".2f\")\nplt.show()","9fc28aff":"g = sns.factorplot(x = \"SibSp\",y = \"Survived\",data = train_df,kind = \"bar\",size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","f7636ac2":"g = sns.factorplot(x = \"Parch\",y = \"Survived\", data = train_df, size = 5,kind = \"bar\")\ng.set_ylabels(\"Survived Probability\")\nplt.show()","67f279fd":"g = sns.catplot(x = \"Pclass\",y = \"Survived\",data = train_df,kind = \"bar\",size = 4)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","b18f423a":"g = sns.FacetGrid(train_df,col = \"Survived\")\ng.map(sns.distplot,\"Age\",bins = 25)\nplt.show()","2d97034e":"g = sns.FacetGrid(train_df,col = \"Survived\",row = \"Pclass\",size = 2)\ng.map(plt.hist,\"Age\",bins = 25)\ng.add_legend()\nplt.show()","d6e3f085":"g = sns.FacetGrid(train_df,row = \"Embarked\",size = 2)\ng.map(sns.pointplot,\"Pclass\",\"Survived\",\"Sex\",bins = 25)\ng.add_legend()\nplt.show()","df9b0deb":"g = sns.FacetGrid(train_df,col = \"Survived\",row = \"Embarked\",size = 2)\ng.map(sns.barplot,\"Sex\",\"Fare\")\ng.add_legend()\nplt.show()","352f2bff":"train_df.isnull().sum()","d09087bb":"train_df[train_df[\"Age\"].isnull()]","feda8608":"sns.factorplot(x= \"Sex\",y = \"Age\",data = train_df,kind = \"box\")\nplt.show()","3405482c":"sns.factorplot(x= \"Sex\",y = \"Age\",hue = \"Pclass\",data = train_df,kind = \"box\")\nplt.show()","33286a1a":"sns.factorplot(x= \"Parch\",y = \"Age\",data = train_df,kind = \"box\")\nsns.factorplot(x= \"SibSp\",y = \"Age\",data = train_df,kind = \"box\")\nplt.show()","b31a160c":"#We convert str to int for Sex\ntrain_df[\"Sex\"] = [1 if i ==\"male\" else 0 for i in train_df[\"Sex\"]]","2d1ef84d":"sns.heatmap(train_df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\"]].corr(),annot = True)\nplt.show()","87bc462c":"index_non_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_non_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) & (train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"]) & (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_med =  train_df[\"Age\"].median()    \n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med","f0e4dfdb":"train_df[train_df[\"Age\"].isnull()]","44fcf250":"train_df[\"Name\"].head(10)","e3b01e63":"name = train_df[\"Name\"]\ntrain_df[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name] # List comrehension yaptik, ilk basta noktaya gore ayirdik elimizde ahmet,mr gibi bir sey oldu 0 inci elemani alinca. Sonra virgule gore ayirdik ve sonuncu elemani almak icin -1 yazdik. Ve en son bosluktan kurtulmak icin strip metodunu kullandik.\n","dae30d6c":"train_df[\"Title\"].head(10)","b77a03e9":"sns.countplot(x = \"Title\",data = train_df)\nplt.xticks(rotation = 45)\nplt.show()","05ccb8ee":"# Convert to categorical\n#train_df[\"Title\"] = train_df[\"Title\"].replace([\"Lady\",\"the Countess\",\"Capt\",\"Col\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"other\")","48be889f":"train_df[\"Title\"] = train_df[\"Title\"].replace([\"Lady\",\"the Countess\",\"Capt\",\"Col\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"other\")\ntrain_df[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Ms\" or\n                     i == \"Mlle\" or i == \"Mrs\" else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"]]","a2592369":"sns.countplot(x = \"Title\",data = train_df)\nplt.xticks(rotation = 45)\nplt.show()","8c23e3e4":"g = sns.factorplot(x = \"Title\",y = \"Survived\",data = train_df,kind = \"bar\")\ng.set_xticklabels([\"Master\",\"Mrs\",\"Mr\",\"Other\"])\ng.set_ylabels(\"Survival Probability\")\nplt.show()","32cd3d1c":"train_df.drop([\"Name\"],axis = 1,inplace = True)","899cab66":"train_df.head()","12acfcd0":"train_df = pd.get_dummies(train_df,columns=[\"Title\"])\ntrain_df.head(10)","b7d8ea12":"train_df[\"Fsize\"] = train_df[\"SibSp\"] + train_df[\"Parch\"] + 1","a054cd6a":"train_df.head()","785194c5":"g = sns.factorplot(x = \"Fsize\",y = \"Survived\",data = train_df,kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","dfba36ea":"train_df[\"family_size\"] = [1 if i < 5 else 0 for i in train_df[\"Fsize\"]]","62ef916c":"train_df.head(10)","35fbf737":"sns.countplot(x = \"family_size\",data = train_df)\nplt.show()","0efb3cd4":"g = sns.factorplot(x = \"family_size\",y = \"Survived\",data = train_df,kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","2dd26924":"train_df = pd.get_dummies(train_df,columns = [\"family_size\"])","17ba61a3":"train_df.head()","61730fda":"train_df[\"Embarked\"].head()","b339e4bd":"sns.countplot(x = \"Embarked\",data = train_df)\nplt.show()","df08ab7b":"train_df = pd.get_dummies(train_df,columns = [\"Embarked\"])\ntrain_df.head()","378afab2":"train_df[\"Ticket\"].head(20)","085b7f67":"a = \"STON\/O2. 3101282\"\na.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0]","f3a8e378":"tickets = []\nfor i in list(train_df[\"Ticket\"]):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"] = tickets        ","4367d42e":"train_df[\"Ticket\"].head(10)","3bae4c63":"train_df = pd.get_dummies(train_df, columns= [\"Ticket\"], prefix = \"T\")\n","e38c169d":"train_df.head()","3019cd9d":"sns.countplot(x = \"Pclass\",data = train_df)\nplt.show()","b7e92159":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df,columns = [\"Pclass\"])","a30095a7":"#train_df[\"Pclass\"].head(10)\n#for i in train_df[\"Pclass\"]:\n   # print(type(i))","7b178d21":"#train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\n#train_df = pd.get_dummies(train_df,columns = [\"Pclass\"])","29f2c960":"train_df.head(20)","2bb13483":"train_df[\"Pclass_1\"].head(10)\nfor i in train_df[\"Pclass_1\"].head():\n    print(type(i))","8c505fb6":"for i in train_df[\"Sex\"].head():\n    print(type(i))","6cafc57c":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")","bfdbe18d":"for i in train_df[\"Sex\"].head():\n    print(type(i))","149b3428":"train_df = pd.get_dummies(train_df,columns = ([\"Sex\"]))","5c583f3a":"train_df.head()","0ae882f5":"train_df.drop([\"PassengerId\",\"Cabin\"],axis = 1,inplace = True)","4428167a":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","483ee93b":"test = train_df[train_df_len:]\ntest.drop([\"Survived\"],axis = 1,inplace = True)","8bb8da29":"train = train_df[:train_df_len]\nX_train = train.drop([\"Survived\"],axis = 1)\ny_train = train[\"Survived\"]\nX_train,X_test,y_train,y_test = train_test_split(X_train,y_train,test_size = 0.33,random_state = 42)\nprint(\"X_train\",len(X_train))\nprint(\"X_test\",len(X_test))      \nprint(\"y_train\",len(y_train))      \nprint(\"y_test\",len(y_test))\nprint(\"test\",len(test))      ","3d7990b2":"logreg = LogisticRegression()\nlogreg.fit(X_train,y_train)\nacc_log_train = round(logreg.score(X_train,y_train)*100,2)\nacc_log_test = round(logreg.score(X_test,y_test)*100,2)\nprint(\"Training Accuracy: {} \".format(acc_log_train))\nprint(\"Test Accuracy: {} \".format(acc_log_test))","18a31f34":"random_state = 42\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n              SVC(random_state = random_state),\n              RandomForestClassifier(random_state = random_state),\n              LogisticRegression(random_state = random_state),\n              KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\": range(10,500,20),\n                \"max_depth\": range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001,0.01,0.1,1],\n                 \"C\":[1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\":[\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\":np.linspace(1,19,10,dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid]","2e30ebe8":"cv_results = [] \nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i],param_grid = classifier_param[i],cv = StratifiedKFold(n_splits = 10),scoring = \"accuracy\",n_jobs = -1,verbose = 1 )\n    #scoring sonucu neye gore degerlendirdigimiz,n_jobs: hizli bir sekilde kodun kosmasi icin, verbose: kodu bize gosterecek kosarken \n    clf.fit(X_train,y_train)\n    cv_results.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_results[i])","64a9651f":"cv_results = pd.DataFrame({\"Cross Validation Means\":cv_result, \"ML Models\":[\"DecisionTreeClassifier\", \"SVM\",\"RandomForestClassifier\",\n             \"LogisticRegression\",\n             \"KNeighborsClassifier\"]})\n\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")\nplt.show()","8b438516":"votingC = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),\n                                         (\"rfc\",best_estimators[2]),\n                                        (\"lr\",best_estimators[3])],\n                                        voting = \"soft\",n_jobs = -1)\nvotingC = votingC.fit(X_train,y_train)\nprint(accuracy_score(votingC.predict(X_test),y_test))","010f48b0":"test_survived = pd.Series(votingC.predict(test),name = \"Survived\").astype(int)\nresults = pd.concat([test_PassengerId,test_survived],axis = 1)\nresults.to_csv(\"titanic.csv\",index = False)","a57f31ae":"<a id = \"22\"><\/a>\n## Name -- Title","d3f4c9ac":"<a id = \"10\"><\/a>\n# Fill Missing Value\n* Embarked has 2 missing value\n* Fare has only 1","89f352ff":"<a id = \"25\"><\/a>\n# Ticket","f04a05fc":"<a id = \"1\"><\/a> \n# Load and Check data","b8e25e39":"<a id = \"4\"><\/a> \n## Categorical Variable","b13bac1d":"<a id = \"29\"><\/a>\n# MODELING","3d530768":"* pclass is an important feature for modal training.","47e08841":"<a id = \"26\"><\/a>\n# PCLASS","a2dd96f2":"<a id = \"28\"><\/a>\n# Drop Passenger ID and Cabin","2bde4d2c":"* age <= has a high survival rate\n* oldes passengers (80) survived\n* large number of 20 years old did not survive\n* most passenger are in 15-35 age range\n* use age feature in training\n* use age distribution for missing value of age\n","fad0aa49":"<a id = \"20\"><\/a>\n# Fill Missing Age Feature","cf68c7db":"<a id = \"3\"><\/a> \n# Univeriate Variable Analysis\n* Categorical Variable Analysis: Survived,Sex,Pclass,Embarked,Cabin,Name,Ticket,Sibsp and Parch\n* Numerical Variable Analysis: Age, fare and PassengerID","81548aa2":"Fare feature seems to have a correlation with survived feature (0.26).","eb23359b":"<a id = \"34\"><\/a> \n# Prediction and Submission","75a84d79":"### 1st class passengers are older than 2nd, and 2nd is older than the 3rd class.","4739ac76":"<a id = \"27\"><\/a>\n# SEX","e09e7520":"<a id = \"8\"><\/a>\n# Missing Value\n\n* Find Missing Value\n* Fill Missing Value","a956d9d9":"# INTRODUCTION:\nThe sinking of Titanic is one of the most notorious shipwrecks in the history. In 1921, during her voyage, the Titanic sank after colliding with an iceberg. Killing 1502 out of 2224 passengers and the crew\n\n<font color = \"green\">\nContent: \n\n1. [Load and Check Data](#1)\n2. [Variable Description](#2)\n    * [Univeriate Variable Analysis](#3)\n        * [Categorical Variable Analysis](#4)\n        * [Numerical Variable Analysis](#5)\n3. [Basic Data Analysis](#6)    \n4. [Outlier Detection](#7) \n5. [Missing Value](#8)    \n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n6. [Visualization](#11)    \n    * [Correlation Between Sipsp -- Parch -- Age -- Fare -- Survived](#12)\n    * [SibSp -- Survived](#13)\n    * [Parch -- Survived](#14)\n    * [Pclass -- Survived](#15)\n    * [Age -- Survived](#16)\n    * [Pclass -- Age -- Survived](#17)\n    * [Embarked -- Sex -- Pclass -- Survived](#18)\n    * [Embarked -- Sex -- Fare -- Survived](#19)\n    * [Fill Missing Age Feature](#20)\n7. [Feature Engineering](#21)\n    * [Name -- Title](#22)\n    * [Family Size](#23)\n    * [Embarked](#24)\n    * [Ticket](#25)\n    * [Pclass](#26)\n    * [Sex](#27)\n    * [Drop Passenger ID and Cabin](#28)\n8. [Modeling](#29)    \n    * [Train Test Split](#30)\n    * [Simple Logistic Regression](#31)\n    * [Hyperparameter Tuning -- Grid Search -- Cross Validation](#32)\n    * [Ensemble Modeling](#33)\n    * [Prediction and Submission](#34)\n    \n    ","7baa4410":"<a id = \"33\"><\/a> \n# Ensemble Modeling","a768817e":"<a id = \"16\"><\/a>\n# Age -- Survived","9dfdbb87":"<a id = \"17\"><\/a>\n# Pclass -- Survived -- Age","0c8447ae":"### Sex is not informative for age prediction. Age distribution seems to be same","cd4c2f38":"<a id = \"30\"><\/a>\n# Train Test Split","95806ca7":"<a id = \"31\"><\/a>\n# Simple Logistic Regression","c2070877":"Age is not correlated with sex but it is correlated with parch, sibsp and pclass","da55e482":"* Female passenger have much better survival rate than males.\n* Male have better survival rate in pclass 3 in C\n* Embarked and Sex will be used in training.","0cf39ba8":"<a id = \"18\"><\/a>\n# Embarked -- Sex -- Pclass -- Survived","5593bb36":"<a id = \"12\"><\/a>\n## Correlation Between Sipsp -- Parch -- Age -- Fare -- Survived","a1dc466d":"<a id = \"24\"><\/a>\n# Embarked","b7bae5c2":"<a id = \"21\"><\/a>\n# Feature Engineering","a9929b8f":"<a id = \"6\"><\/a> \n# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","55c1649e":"<a id = \"23\"><\/a> \n## Family Size ","d1e0e063":"<a id = \"14\"><\/a>\n# Parch -- Survived","510686cd":"* Havin a lot of SibSp have less chance to survive\n* If SibSp == 0 or 1 or 2, passenger has more chance to survive\n* We can consider a new feature describing these categories","9552441a":"<a id = \"19\"><\/a>\n# Embarked -- Sex-- Fare -- Survived","b221ff34":"<a id = \"7\"><\/a> \n# Outlier Detection","52c7faea":"<a id = \"13\"><\/a>\n# SibSp -- Survived","e0e3db7b":"* float64(2): Fare and Age\n* int64(5): Pclass, sibsp,parch,PassengerId,and survival\n* object(5): Cabin, embarked,name,sex,ticket","7d1e8fa7":"<a id = \"11\"><\/a>\n# Visualization","2815a41e":"<a id = \"2\"><\/a> \n# Variable Description\n1. PassengerId : Unique id number for each passenger\n1. Survived : Passenger Survived(1) or Died(0)\n1. Pclass : Passenger class (1,2,3)\n1. Name\n1. Sex\n1. Age\n1. SibSp : Number of siblings\/spouses\n1. Parch : Number of parents\/children\n1. Ticket : Ticket number\n1. Fare : Amount of money spent on ticket\n1. Cabin : Cabin category\n1. Embarked : Port where passenger embarked from (C = Cherburg, Q = Queenstown, S = Southampton)","71aabe3e":"<a id = \"15\"><\/a>\n# Pclass -- Survived","4963baf3":" * SibSp and Parch can be used for a new feature extraction with th = 3\n * Small families have more chance to survive\n * There is a standart deviation in survival of passenger with parch == 3 ","4bdbdbce":"<a id = \"5\"><\/a> \n## Numerical Variable","f5c385b5":"<a id = \"32\"><\/a>\n# Hyperparameter Tuning -- Grid Search -- Cross Validation\n*We will compare five ML classifier and evaluate the mean accuracy of each by using stratified cross validation.\n\n* Decision Tree\n* SVM\n* Random Forest\n* KNN\n* Logistic Regression\n","8c78a122":"* Passenger who pay higher pay have a better survival.\n* Fare can be used as a categorical for training.","4adb5d2d":"<a id = \"9\"><\/a>\n# Find Missing Value"}}