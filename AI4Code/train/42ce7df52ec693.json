{"cell_type":{"00711678":"code","96c080c0":"code","e81a229b":"code","95106243":"code","d93168bc":"code","ac3834f1":"code","e159870b":"code","3938b6f7":"code","c64501df":"code","cbe8b677":"code","e60a8ebe":"code","887c2cd4":"code","f8910083":"code","3a93621a":"code","5f52a864":"code","ca29530f":"code","fa1de9bb":"code","bc3badcd":"code","85063578":"code","481c5748":"code","5a96203c":"code","9dc83afd":"code","1a822fff":"markdown","a4a3768e":"markdown","bb042430":"markdown","27bda9a3":"markdown","e8ffe02a":"markdown","d11dc8aa":"markdown"},"source":{"00711678":"# Jungletronics - Kaggle Juggle - How to use kaggle Notebook to Study Python\u200a-\u200a#PySeries#Episode 36\n\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","96c080c0":"df = pd.read_csv('..\/input\/amazon-cell-phones-reviews\/20191226-items.csv')","e81a229b":"df.info()","95106243":"df.head(5)","d93168bc":"df.drop(columns=['asin', 'url', 'image', 'reviewUrl', 'totalReviews', 'originalPrice'], inplace=True)\n ","ac3834f1":"df.head(5)","e159870b":"print(df['brand'].unique())","3938b6f7":"# drop all rows with any NaN and NaT values\ndf1 = df.dropna()\ndf1.head(5)","c64501df":"print(df1['brand'].unique())","cbe8b677":" mobiles = list(set(df1['brand']))","e60a8ebe":"print(mobiles)","887c2cd4":"sales = [1500, 2000, 3200, 4000, 5400, 6000, 7000,8000, 9000, 10000]","f8910083":"for i in range(10):\n    print('Product: {} - Sale: ${}'.format(mobiles[i], sales[i]) )","3a93621a":"for i in range(5, 10):\n    print('Product: {} - Sale: ${}'.format(mobiles[i], sales[i]) )","5f52a864":"for i in range(0, 10, 2):\n    print('Product: {} - Sale: ${}'.format(mobiles[i], sales[i]) )","ca29530f":"email = \"j3@gmail.com\"\nfor i in email:\n    print(i)","fa1de9bb":"for entry in enumerate(\"abcd\"):\n...    print(entry)","bc3badcd":"i=0\n\ncod_prod_price_list = []\n\nfor entry in enumerate(mobiles):\n    temp = list(entry)\n    temp.insert(3, sales[i])\n    entry = tuple(temp)\n    i+=1    \n    cod_prod_price_list.append(entry)\n","85063578":"print(cod_prod_price_list)","481c5748":"income = 0\nfor item in cod_prod_price_list:\n    print(item)","5a96203c":"income = 0\nfor i, brand, sale in cod_prod_price_list:\n    income += sale \n    \n# juggle to format the thousands separator from dot (.) to comma (,), \n# and decimal separator from comma (,) to dot (.)\n# What crazy engineering, huh?\nincome = \"R${:_.2f}\".format(income).replace('.', ',').replace('_', '.')\n\nprint(\"The total Revenue generated by the sale of goods, in Brazilian Real, was {}\".format(income))","9dc83afd":"print(\"That's all for today! Hope you enjoy!\")","1a822fff":"### Dropping NAN values ","a4a3768e":"### LIST (ordered sequence)\n['Motorola',   'Nokia',   'Samsung',   'Sony',   'OnePlus',   'ASUS',   'Apple',   'Google',   'HUAWEI',   'Xiaomi']\n\n     [0]    [1]   [2]    [3]    [4]    [5]    [6]    [7]    [8]     [9] ","bb042430":"### Droping COLUMNS unwanted","27bda9a3":"#### skipping even (odd) values","e8ffe02a":"### Criating a LIST from PANDAS DATAFRAME","d11dc8aa":"### RANGE\n\n##### structure: \n         range(size)\n         range(start, stop)\n         range(start, stop, step)"}}