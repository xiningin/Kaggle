{"cell_type":{"1a9941fb":"code","7741ad05":"code","ea768baf":"code","2cda0b27":"code","36a33ea6":"code","88f060e4":"code","24fd765d":"code","dcef4331":"code","f460ab94":"code","ecc089ae":"code","67570e42":"code","a477c049":"code","8fbced60":"code","dcb2cedc":"code","bf2fdcd2":"code","45154040":"code","ed70ed40":"code","a5f3a88c":"code","f4ecb594":"code","fc9f6159":"code","0359ec11":"code","edf5f324":"code","2fedc1a5":"code","c5abf802":"code","33c9e25e":"code","8993757e":"code","1c1a3b39":"code","3fd9a676":"code","648d4f2a":"code","7aa53e0e":"code","653588d5":"markdown","7fc2c92a":"markdown","d3b0004f":"markdown","ee1b2e5f":"markdown","63f36d80":"markdown","3cf66b55":"markdown","2bc055db":"markdown","6e16937e":"markdown","47278c91":"markdown","01000e5d":"markdown","f8b69d4f":"markdown"},"source":{"1a9941fb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-whitegrid') # plt.style.available\nimport seaborn as sns\nfrom collections import Counter\nimport warnings\nwarnings.filterwarnings('ignore')\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7741ad05":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df.PassengerId\ntrain_df.columns","ea768baf":"train_df.head()","2cda0b27":"train_df.describe()","36a33ea6":"train_df.info()","88f060e4":"var1 = train_df[\"Embarked\"]\nvar1Value = var1.value_counts()\nprint(var1Value)\nprint(var1Value.index)\nprint(var1Value.index.values)","24fd765d":"def bar_plot(x:str):\n    \"\"\"\n        input: variable examp: \"Sex\"\n        output: bar plot & value count\n    \"\"\"\n    # get feature\n    var = train_df[x]\n    # count number of categorical variable\n    varValue = var.value_counts()\n    \n    # visualize\n    plt.figure(figsize=(9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(x)\n    plt.show()\n    print(f\"{x}: \\n {varValue}\")","dcef4331":"category1 = [\"Survived\", \"Sex\", \"Pclass\", \"Embarked\", \"SibSp\", \"Parch\"]\nfor c in category1:\n    bar_plot(c)","f460ab94":"category2 = [\"Cabin\", \"Name\", \"Ticket\"]\nfor c in category2:\n    print(f\"{train_df[c].value_counts()} \\n\")","ecc089ae":"def plotHist(var):\n    plt.figure(figsize=(9,3))\n    plt.hist(train_df[var], bins=25)\n    plt.xlabel(var)\n    plt.ylabel(\"Frequency\")\n    plt.title(f\"{var} distrubution with histogtram\")\n    plt.show()","67570e42":"numericVar = [\"Fare\", \"Age\", \"PassengerId\"]\nfor i in numericVar:\n    plotHist(i)","a477c049":"# Pclass vs Survived\na = train_df[[\"Pclass\", \"Survived\"]].groupby(\"Pclass\", as_index=False).mean().sort_values(by=\"Survived\", ascending=False)\na.Survived = [float(f\"{i:.2f}\") for i in a.Survived] # for setting the digits of Survived values\na","8fbced60":"# Sex vs Survived\ntrain_df[[\"Sex\", \"Survived\"]].groupby(\"Sex\", as_index=False).mean().sort_values(by=\"Survived\", ascending=False)\n","dcb2cedc":"# SibSp vs Survived\ntrain_df[[\"SibSp\", \"Survived\"]].groupby(\"SibSp\", as_index=False).mean().sort_values(by=\"Survived\", ascending=False)\n","bf2fdcd2":"# Parch vs Survived\ntrain_df[[\"Parch\", \"Survived\"]].groupby(\"Parch\", as_index=False).mean().sort_values(by=\"Survived\", ascending=False)\n","45154040":"# Age vs Survived\ntrain_df[[\"Age\", \"Survived\"]].groupby(\"Survived\", as_index=False).mean().sort_values(by=\"Age\", ascending=False)","ed70ed40":"def detectOutlier(df, features):\n    outlier_indices = []\n    \n    for i in features:\n        # 1st quartile\n        Q1 = np.percentile(df[i], 25)\n        # 3rd quartile\n        Q3 = np.percentile(df[i], 75)\n\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        step = IQR * 1.5\n        # detect outlier and their indices\n        outlier_list_col = df[(df[i] < Q1 - step) | (df[i] > Q3 + step)].index\n        # store indices\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = [i for i, j in outlier_indices.items() if j > 2]\n    \n    return multiple_outliers","a5f3a88c":"# train_df.describe()\n# print(detectOutlier(train_df, [\"Age\", \"SibSp\", \"Parch\", \"Fare\"]))\ntrain_df.loc[detectOutlier(train_df, [\"Age\", \"SibSp\", \"Parch\", \"Fare\"])]","f4ecb594":"# drop outliers\ndroped_df = train_df.drop(detectOutlier(train_df, [\"Age\", \"SibSp\", \"Parch\", \"Fare\"]), axis=0).reset_index(drop=True)\ndroped_df","fc9f6159":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df, test_df], axis=0).reset_index(drop=True)","0359ec11":"train_df.columns[train_df.isnull().any()]","edf5f324":"train_df.isnull().sum()","2fedc1a5":"train_df[train_df[\"Embarked\"].isnull()]","c5abf802":"train_df.boxplot(column=\"Fare\", by=\"Embarked\")\nplt.show()","33c9e25e":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")","8993757e":"# Check the filling process\ntrain_df.loc[[61,829]]","1c1a3b39":"train_df[train_df[\"Fare\"].isnull()]","3fd9a676":"train_df[train_df[\"Pclass\"] == 3][\"Fare\"].mean()","648d4f2a":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(train_df[train_df[\"Pclass\"] == 3][\"Fare\"].mean())","7aa53e0e":"# Check the filling process\ntrain_df.loc[[1043]]","653588d5":"<a id = \"7\" ><\/a>\n# Outlier Detection","7fc2c92a":"<a id = \"2\"><\/a>\n# Variable Description\n1. PassengerId\n1. Survived\n1. Pclass\n1. Name\n1. Sex\n1. Age\n1. SibSp\n1. Parch\n1. Ticket\n1.  Fare\n1.  Cabin\n1.  Embarked","d3b0004f":" <a id = \"10\" ><\/a>\n ## Fill Missing Value\n * Embarked has 2 missing value\n * Fare has only 1","ee1b2e5f":"# Introduction\n\nRMS Titanic was a British passenger liner operated by the White Star Line that sank in the North Atlantic Ocean in the early morning hours of 15 April 1912, after striking an iceberg during her maiden voyage from Southampton to New York City.\n\n<font color = \"blue\">\n    \nContents\n    \n1. [Load and Checks](#1)\n2. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable](#4)\n        * [Numerical Variable](#5)\n3. [Basic Data Analysis](#6)\n4. [Outlier Detection](#7)\n5. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n","63f36d80":"<a id = \"3\"><\/a>\n# Univariate Variable Analysis\n* Categorical Variable: Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, SibSp, ParCh\n* Numerical Variable: Age, PassengerId, Fare","3cf66b55":"<a id = \"1\"><\/a>\n# Load and Checks","2bc055db":"<a id = \"8\" ><\/a>\n# Missing Value\n* Find Missing Value\n* Fill Missing Value","6e16937e":"<a id = \"5\"><\/a>\n## Numerical Variable","47278c91":"<a id = \"6\" ><\/a>\n# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived\n* Age - Survived","01000e5d":"<a id = \"4\"><\/a>\n## Categorical Variable","f8b69d4f":"<a id = \"9\" ><\/a>\n## Find Missing Value"}}