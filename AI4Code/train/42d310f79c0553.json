{"cell_type":{"d3bd63cc":"code","c53dba54":"code","f3a68eb2":"code","59055367":"code","277ae88a":"code","8d1b458a":"code","30e8a23d":"code","cb0f6a93":"code","f20b3321":"code","e3cbbae8":"code","8cc3fe1e":"code","a8eee09a":"code","ff90843c":"code","21d5b021":"code","624aa2c7":"code","3cea0b3f":"code","4718f797":"code","5e9d4912":"code","052b94b2":"code","1c9695ba":"code","92bad2b1":"code","2433895d":"code","83e1c094":"code","cb077f2a":"code","dd28a19a":"code","33fd12fc":"code","e04c528b":"code","8118fefb":"code","56c8bc8e":"code","909fe163":"code","5747eb1f":"code","37456466":"code","49aea71e":"code","550ee101":"markdown"},"source":{"d3bd63cc":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nimport time \n### Create the Stacked LSTM model\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense,Activation, Dropout\nfrom tensorflow.keras.layers import LSTM","c53dba54":"df=pd.read_csv('..\/input\/nyse\/prices-split-adjusted.csv')","f3a68eb2":"data.head(5)","59055367":"data.shape","277ae88a":"data.describe().T","8d1b458a":"data.isnull().sum()","30e8a23d":"data.info()","cb0f6a93":"data.dtypes","f20b3321":"data.tail(5)","e3cbbae8":"# choose one stock\nstock_data = data[data.symbol == 'AAPL'].copy()","8cc3fe1e":"stock=stock_data.reset_index()['close']","a8eee09a":"plt.figure(figsize=(10, 5));\nplt.plot(stock,color='y')\nplt.title('stock')\nplt.xlabel('time [days]')\nplt.ylabel('normalized price\/volume')\nplt.legend(loc='best')\nplt.show()","ff90843c":"scale=MinMaxScaler(feature_range=(0,1))\nstock_scale=scale.fit_transform(np.array(stock).reshape(-1,1))","21d5b021":"print(stock_scale)","624aa2c7":"#split the data train test split\n##splitting dataset into train and test split\ntraining_size=int(len(stock_scale)*0.65)\ntest_size=len(stock_scale)-training_size\ntrain_data,test_data=stock_scale[0:training_size,:],stock_scale[training_size:len(stock_scale),:1]","3cea0b3f":"test_size","4718f797":"train_data","5e9d4912":"import numpy\n# convert an array of values into a dataset matrix\ndef create_dataset(dataset,step=1):\n    X, Y = [], []\n    for i in range(len(dataset)-step-1):\n        a = dataset[i:(i+step), 0]   ###i=0, 0,1,2,3-----99   100 \n        X.append(a)\n        Y.append(dataset[i + step, 0])\n    return numpy.array(X), numpy.array(Y)","052b94b2":"time_step = 100\nX_train, y_train = create_dataset(train_data, time_step)\nX_test, ytest = create_dataset(test_data, time_step)","1c9695ba":"# reshape input to be [samples, time steps, features] which is required for LSTM\nX_train =X_train.reshape(X_train.shape[0],X_train.shape[1] , 1)\nX_test = X_test.reshape(X_test.shape[0],X_test.shape[1] , 1)","92bad2b1":"X_test","2433895d":"model=Sequential()\nmodel.add(LSTM(50,return_sequences=True,input_shape=(100,1)))\nmodel.add(LSTM(50,return_sequences=True))\nmodel.add(LSTM(50))\nmodel.add(Dense(1))\nmodel.compile(loss='mean_squared_error',optimizer='adam')","83e1c094":"model.summary()","cb077f2a":"model.fit(X_train,y_train,validation_data=(X_test,ytest),epochs=10,batch_size=64,verbose=1)","dd28a19a":"### Lets Do the prediction and check performance metrics\ntrain_predict=model.predict(X_train)\ntest_predict=model.predict(X_test)","33fd12fc":"train_predict.shape","e04c528b":"test_predict.shape","8118fefb":"##Transformback to original form\ntrain_predict=scaler.inverse_transform(train_predict)\ntest_predict=scaler.inverse_transform(test_predict)","56c8bc8e":"## Calculate RMSE performance metrics\nimport math\nfrom sklearn.metrics import mean_squared_error\nmath.sqrt(mean_squared_error(y_train,train_predict))","909fe163":"## Test Data RMSE\nmath.sqrt(mean_squared_error(ytest,test_predict))","5747eb1f":"## Plotting \n# shift train predictions for plotting\nlook_back=100\ntrainPredictPlot = numpy.empty_like(stock_data)\ntrainPredictPlot[:, :] = np.nan\ntrainPredictPlot[look_back:len(train_predict)+look_back, :] = train_predict\n# shift test predictions for plotting\ntestPredictPlot = numpy.empty_like(stock_data)\ntestPredictPlot[:, :] = numpy.nan\ntestPredictPlot[len(train_predict)+(look_back*2)+1:len(stock_data)-1, :] = test_predict\n# plot baseline and predictions\nplt.plot(trainPredictPlot)\nplt.plot(testPredictPlot)\nplt.show()","37456466":"len(test_data)","49aea71e":"len(train_data)","550ee101":"# Predict SPecfic stock price data"}}