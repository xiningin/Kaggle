{"cell_type":{"cce2c0be":"code","ee14e742":"code","2426d5a0":"code","0b3c7ab1":"code","d450fdb2":"code","c29e6f0f":"code","000bc21e":"code","e5377caf":"code","41f894e6":"code","d7723eb3":"code","b4f294bd":"code","4f733c55":"code","f8ff6d3d":"code","ab77bc37":"code","40ee6fc5":"code","a6f5b846":"code","cab4335c":"code","791670d4":"code","dbe43c2c":"code","7025a318":"code","f7e64069":"code","182d4cd5":"code","b99f235c":"code","0c5cfc16":"code","55fb275a":"code","468d9659":"code","d8dd00b7":"code","b029ab28":"code","7755def2":"code","4349a5ab":"code","f8bbed31":"code","60aef84c":"code","bf9c988d":"code","93a6c0ae":"code","ff0badce":"code","2520c8a0":"code","121c00aa":"code","20e61fcd":"markdown","0628c991":"markdown","12dc06f8":"markdown","38b54306":"markdown","9683e674":"markdown","844269f5":"markdown","54eb571a":"markdown","b9fc8ca4":"markdown","0042466d":"markdown","6dc258e2":"markdown","b2716beb":"markdown","7d25e347":"markdown","179e24f4":"markdown","ff54ff02":"markdown","6a4d862e":"markdown","a9712787":"markdown","457e9cbd":"markdown","5130ee9f":"markdown","8d35cddf":"markdown"},"source":{"cce2c0be":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For exaample, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pylab as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\n# Any results you write to the current directory are saved as output.","ee14e742":"!ls ..\/input\/train\/ | wc -l\n!ls ..\/input\/train_masks\/ | wc -l\n!ls ..\/input\/test\/ | wc -l","2426d5a0":"!ls ..\/input\/train\/ | grep c_01.jpg","0b3c7ab1":"import os \nfrom glob import glob\n\nINPUT_PATH = '..\/input'\nDATA_PATH = INPUT_PATH\nTRAIN_DATA = os.path.join(DATA_PATH, \"train\")\nTRAIN_MASKS_DATA = os.path.join(DATA_PATH, \"train_masks\")\nTEST_DATA = os.path.join(DATA_PATH, \"test\")\nTRAIN_MASKS_CSV_FILEPATH = os.path.join(DATA_PATH, \"train_masks.csv\")\nMETADATA_CSV_FILEPATH = os.path.join(DATA_PATH, \"metadata.csv\")\n\nTRAIN_MASKS_CSV = pd.read_csv(TRAIN_MASKS_CSV_FILEPATH)\nMETADATA_CSV = pd.read_csv(METADATA_CSV_FILEPATH)","d450fdb2":"train_files = glob(os.path.join(TRAIN_DATA, \"*.jpg\"))\ntrain_ids = [s[len(TRAIN_DATA)+1:-4] for s in train_files]\n\ntest_files = glob(os.path.join(TEST_DATA, \"*.jpg\"))\ntest_ids = [s[len(TEST_DATA)+1:-4] for s in test_files]","c29e6f0f":"def get_filename(image_id, image_type):\n    check_dir = False\n    if \"Train\" == image_type:\n        ext = 'jpg'\n        data_path = TRAIN_DATA\n        suffix = ''\n    elif \"Train_mask\" in image_type:\n        ext = 'gif'\n        data_path = TRAIN_MASKS_DATA\n        suffix = '_mask'\n    elif \"Test\" in image_type:\n        ext = 'jpg'\n        data_path = TEST_DATA\n        suffix = ''\n    else:\n        raise Exception(\"Image type '%s' is not recognized\" % image_type)\n\n    if check_dir and not os.path.exists(data_path):\n        os.makedirs(data_path)\n\n    return os.path.join(data_path, \"{}{}.{}\".format(image_id, suffix, ext))","000bc21e":"import cv2\nfrom PIL import Image\n\n\ndef get_image_data(image_id, image_type, **kwargs):\n    if 'mask' in image_type:\n        img = _get_image_data_pil(image_id, image_type, **kwargs)\n    else:\n        img = _get_image_data_opencv(image_id, image_type, **kwargs)\n    return img\n\ndef _get_image_data_opencv(image_id, image_type, **kwargs):\n    fname = get_filename(image_id, image_type)\n    img = cv2.imread(fname)\n    assert img is not None, \"Failed to read image : %s, %s\" % (image_id, image_type)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    return img\n\n\ndef _get_image_data_pil(image_id, image_type, return_exif_md=False, return_shape_only=False):\n    fname = get_filename(image_id, image_type)\n    try:\n        img_pil = Image.open(fname)\n    except Exception as e:\n        assert False, \"Failed to read image : %s, %s. Error message: %s\" % (image_id, image_type, e)\n\n    if return_shape_only:\n        return img_pil.size[::-1] + (len(img_pil.getbands()),)\n\n    img = np.asarray(img_pil)\n    assert isinstance(img, np.ndarray), \"Open image is not an ndarray. Image id\/type : %s, %s\" % (image_id, image_type)\n    if not return_exif_md:\n        return img\n    else:\n        return img, img_pil._getexif()","e5377caf":"train_ids","41f894e6":"image_id = train_ids[0]\n\nplt.figure(figsize=(20, 20))\nimg = get_image_data(image_id, \"Train\")\nmask = get_image_data(image_id, \"Train_mask\")\nimg_masked = cv2.bitwise_and(img, img, mask=mask)\n\nprint(\"Image shape: {} | image type: {} | mask shape: {} | mask type: {}\".format(img.shape, img.dtype, mask.shape, mask.dtype) )\n\nplt.subplot(131)\nplt.imshow(img)\nplt.subplot(132)\nplt.imshow(mask)\nplt.subplot(133)\nplt.imshow(img_masked)","d7723eb3":"500 * 1.0 \/ 5","b4f294bd":"_train_ids = list(train_ids)\nnp.random.shuffle(_train_ids)\n_train_ids = _train_ids[:500]\ntile_size = (256, 256)\nn = 8\n\nm = int(np.ceil(len(_train_ids) * 1.0 \/ n))\ncomplete_image = np.zeros((m*(tile_size[0]+2), n*(tile_size[1]+2), 3), dtype=np.uint8)\n\ncounter = 0\nfor i in range(m):\n    ys = i*(tile_size[1] + 2)\n    ye = ys + tile_size[1]\n    for j in range(n):\n        xs = j*(tile_size[0] + 2)\n        xe = xs + tile_size[0]\n        if counter == len(_train_ids):\n            break\n        image_id = _train_ids[counter]; counter+=1\n        img = get_image_data(image_id, 'Train')\n        img = cv2.resize(img, dsize=tile_size)\n        img = cv2.putText(img, image_id, (5,img.shape[0] - 5), cv2.FONT_HERSHEY_PLAIN, 1.5, (0, 255, 0), thickness=2)\n        complete_image[ys:ye, xs:xe, :] = img[:,:,:]\n    if counter == len(_train_ids):\n        break    ","4f733c55":"m = complete_image.shape[0] \/ (tile_size[0] + 2)\nk = 8\nn = int(np.ceil(m \/ k))\nfor i in range(n):\n    plt.figure(figsize=(20, 20))\n    ys = i*(tile_size[0] + 2)*k\n    ye = min((i+1)*(tile_size[0] + 2)*k, complete_image.shape[0])\n    plt.imshow(complete_image[ys:ye,:,:])\n    plt.title(\"Training dataset, part %i\" % i)","f8ff6d3d":"len(METADATA_CSV['id'].unique()), len(METADATA_CSV['id'])","ab77bc37":"TRAIN_MASKS_CSV['id'] = TRAIN_MASKS_CSV['img'].apply(lambda x: x[:-7])\nlen(TRAIN_MASKS_CSV['id'].unique()), len(TRAIN_MASKS_CSV['id'].unique()) * 16\n","40ee6fc5":"all_318_car_ids = TRAIN_MASKS_CSV['id'].unique()","a6f5b846":"all_318_cars_image_ids = [_id + '_03' for _id in all_318_car_ids]","cab4335c":"_train_ids = list(all_318_cars_image_ids)\ntile_size = (256, 256)\nn = 8\n\nm = int(np.ceil(len(_train_ids) * 1.0 \/ n))\ncomplete_image = np.zeros((m*(tile_size[0]+2), n*(tile_size[1]+2), 3), dtype=np.uint8)\n\ncounter = 0\nfor i in range(m):\n    ys = i*(tile_size[1] + 2)\n    ye = ys + tile_size[1]\n    for j in range(n):\n        xs = j*(tile_size[0] + 2)\n        xe = xs + tile_size[0]\n        if counter == len(_train_ids):\n            break\n        image_id = _train_ids[counter]; counter+=1\n        img = get_image_data(image_id, 'Train')\n        img = cv2.resize(img, dsize=tile_size)\n        img = cv2.putText(img, image_id, (5,img.shape[0] - 5), cv2.FONT_HERSHEY_PLAIN, 1.5, (0, 255, 0), thickness=2)\n        complete_image[ys:ye, xs:xe, :] = img[:,:,:]\n    if counter == len(_train_ids):\n        break   ","791670d4":"m = complete_image.shape[0] \/ (tile_size[0] + 2)\nk = 8\nn = int(np.ceil(m \/ k))\nfor i in range(n):\n    plt.figure(figsize=(20, 20))\n    ys = i*(tile_size[0] + 2)*k\n    ye = min((i+1)*(tile_size[0] + 2)*k, complete_image.shape[0])\n    plt.imshow(complete_image[ys:ye,:,:])\n    plt.title(\"All 318 cars from train dataset, part %i\" % i)","dbe43c2c":"METADATA_CSV.index = METADATA_CSV['id']\ntrain_metadata_csv = METADATA_CSV.loc[TRAIN_MASKS_CSV['id'].unique(),:]","7025a318":"import seaborn as sns\nsns.countplot(y=\"make\", data=train_metadata_csv, palette=\"Greens_d\")","f7e64069":"train_gb_year_make_model_trim1 = train_metadata_csv.groupby(['year', 'make', 'model', 'trim1'])\nlen(train_gb_year_make_model_trim1.groups)","182d4cd5":"similar_cars = [k for k in train_gb_year_make_model_trim1.groups if len(train_gb_year_make_model_trim1.groups[k]) > 1]","b99f235c":"for gname in similar_cars:\n    _ids = train_gb_year_make_model_trim1.get_group(gname)['id']\n    _trim2 = train_gb_year_make_model_trim1.get_group(gname)['trim2']\n    plt.figure(figsize=(14, 6))\n    plt.suptitle(\"{}\".format(gname))    \n    n = len(_ids)\n    for i, _id in enumerate(_ids):\n        plt.subplot(1, n, i + 1)\n        plt.title('{}'.format(_trim2[i]))\n        img = get_image_data(_id + '_03', 'Train')\n        plt.imshow(img)            ","0c5cfc16":"test_dataset_ids = list(set(METADATA_CSV['id']) - set(TRAIN_MASKS_CSV['id']))\nlen(test_dataset_ids), len(METADATA_CSV['id'])","55fb275a":"test_metadata_csv = METADATA_CSV.loc[test_dataset_ids,:]\nsns.countplot(y=\"make\", data=test_metadata_csv, palette=\"Greens_d\")","468d9659":"test_metadata_csv.loc[test_metadata_csv['trim1'].isnull(), 'trim1'] = '-'\ntest_gb_year_make_model_trim1 = test_metadata_csv.groupby(['year', 'make', 'model', 'trim1'])\nlen(test_gb_year_make_model_trim1.groups)","d8dd00b7":"similar_cars = [k for k in test_gb_year_make_model_trim1.groups if len(test_gb_year_make_model_trim1.groups[k]) > 1]\nlen(similar_cars)","b029ab28":"k = 5 \nfor gname in similar_cars[:20]:\n    _ids = test_gb_year_make_model_trim1.get_group(gname)['id']      \n    _trim2 = test_gb_year_make_model_trim1.get_group(gname)['trim2']    \n    plt.figure(figsize=(14, 6))\n    plt.suptitle(\"{}\".format(gname))    \n    n = min(len(_ids), k)\n    m = int(np.ceil(len(_ids) * 1.0 \/ k))\n    for i, _id in enumerate(_ids):\n        plt.subplot(m, n, i + 1)    \n        plt.title(\"{}\".format(_trim2[i]))\n        img = get_image_data(_id + '_03', 'Test')\n        plt.imshow(img)        \n    ","7755def2":"METADATA_CSV['in_train'] = False\nMETADATA_CSV['in_test'] = False\n\nMETADATA_CSV.loc[test_dataset_ids, 'in_test'] = True\nMETADATA_CSV.loc[TRAIN_MASKS_CSV['id'].unique(), 'in_train'] = True","4349a5ab":"METADATA_CSV[METADATA_CSV['in_train'] & METADATA_CSV['in_test']]","f8bbed31":"METADATA_CSV.loc[METADATA_CSV['trim1'].isnull(), 'trim1'] = '-'\ngb_year_make_model_trim1 = METADATA_CSV.groupby(['year', 'make', 'model', 'trim1'])\nlen(gb_year_make_model_trim1.groups)","60aef84c":"similar_cars = [k for k in gb_year_make_model_trim1.groups if len(gb_year_make_model_trim1.groups[k]) > 1]\nlen(similar_cars)","bf9c988d":"gb_year_make_model_trim1.get_group(similar_cars[0])","93a6c0ae":"k = 5 \nfor gname in similar_cars[:10]:\n    _ids = gb_year_make_model_trim1.get_group(gname)['id']      \n    _trim2 = gb_year_make_model_trim1.get_group(gname)['trim2']\n    _in_train = gb_year_make_model_trim1.get_group(gname)['in_train']\n    _in_test = gb_year_make_model_trim1.get_group(gname)['in_test']    \n    \n    plt.figure(figsize=(14, 6))\n    plt.suptitle(\"{}\".format(gname))    \n    n = min(len(_ids), k)\n    m = int(np.ceil(len(_ids) * 1.0 \/ k))\n    for i, _id in enumerate(_ids):\n        plt.subplot(m, n, i + 1)    \n        plt.title(\"{}\\ntrain={}, test={}\\n{}\".format(_trim2[i], _in_train[i], _in_test[i], _id))\n        image_type = \"Train\" if  _in_train[i] else \"Test\"\n        img = get_image_data(_id + '_03', image_type)\n        plt.imshow(img)        \n    ","ff0badce":"cond = lambda k: (len(gb_year_make_model_trim1.groups[k]) > 1) and gb_year_make_model_trim1.get_group(k)[['in_train', 'in_test']].any().all()\nmodels_in_train_and_test = [k for k in gb_year_make_model_trim1.groups if cond(k)]\nlen(models_in_train_and_test)","2520c8a0":"sns.set_style(\"whitegrid\", {'axes.grid' : False})","121c00aa":"k = 5 \nfor gname in models_in_train_and_test[:10]:\n    _ids = gb_year_make_model_trim1.get_group(gname)['id']      \n    _trim2 = gb_year_make_model_trim1.get_group(gname)['trim2']\n    _in_train = gb_year_make_model_trim1.get_group(gname)['in_train']\n    _in_test = gb_year_make_model_trim1.get_group(gname)['in_test']    \n    \n    train_index = np.where(_in_train == True)[0][0]    \n    first_train_mask = get_image_data(_ids[train_index] + '_03', \"Train_mask\")    \n    \n    plt.figure(figsize=(14, 6))\n    plt.suptitle(\"{}\".format(gname))    \n    n = min(len(_ids), k)\n    m = int(np.ceil(len(_ids) * 1.0 \/ k))\n    for i, _id in enumerate(_ids):\n        plt.subplot(m, n, i + 1)    \n        plt.title(\"{}\\ntrain={}, test={}\\n{}\".format(_trim2[i], _in_train[i], _in_test[i], _id))\n        image_type = \"Train\" if  _in_train[i] else \"Test\"\n        img = get_image_data(_id + '_03', image_type)\n        if _in_train[i]:\n            img = cv2.bitwise_and(img, img, mask=first_train_mask)\n            plt.imshow(img)\n        else:\n            plt.imshow(img)\n            plt.imshow(first_train_mask, alpha=0.50)\n\n    ","20e61fcd":"* ## Which cars are present in the train dataset:","0628c991":"### Display only models that present in train and test\nTrain image is display with its mask and test images are blended with the train mask","12dc06f8":"# Visual Data Analysis","38b54306":"## Display 500 random cars from train dataset","9683e674":"## Are there 'same' cars in train and test ?","844269f5":"## Which cars are present in the test dataset:","54eb571a":"## Display a single car with its mask","b9fc8ca4":"### Display some of similar cars","0042466d":"## How many different cars in train dataset:","6dc258e2":"#### Display some of similar cars","b2716beb":"For example, train filenames looks like","7d25e347":"How many images we have in train and test datasets","179e24f4":"### Search for similar cars that have same year, make, model and trim1 ","ff54ff02":"#### Display similar cars","6a4d862e":"We see that model BMW Z4 Z4 sDrive35i 2014 is in test and train dataset","a9712787":"### Search for similar cars that have same year, make, model and trim1 ","457e9cbd":"No cars with the same ids","5130ee9f":"## How many different car in all datasets:","8d35cddf":"## Display all 318 cars at '03' angle from train dataset"}}