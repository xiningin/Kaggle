{"cell_type":{"a67385d7":"code","5bcf28ff":"code","92bd6eaf":"code","1a8662e9":"code","e790b076":"code","590f0265":"code","bd62b064":"code","fd842829":"code","990c8f04":"code","4cabcf5e":"code","c1f090f6":"code","5ed47dd1":"code","2f9e9b14":"code","50d43dc3":"code","d4a5fa1b":"code","e7e61e10":"code","347eb95d":"markdown","62995011":"markdown","a3685500":"markdown","7bd9e934":"markdown"},"source":{"a67385d7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5bcf28ff":"data = pd.read_csv('..\/input\/world-happiness-report-2021\/world-happiness-report.csv')","92bd6eaf":"data.shape","1a8662e9":"data.head()","e790b076":"data.isnull().sum()","590f0265":"data[\"Perceptions of corruption\"] = data[\"Perceptions of corruption\"].fillna(data[\"Perceptions of corruption\"].mean())","bd62b064":"data.columns","fd842829":"data[\"Life Ladder\"].dtype","990c8f04":"for i in data.columns:\n    if data[i].dtype != \"float64\" :\n        pass\n    else:\n        data[i] = data[i].fillna(data[i].mean())","4cabcf5e":"data.isna().sum()","c1f090f6":"data.info()","5ed47dd1":"import matplotlib.pyplot as plt\nimport seaborn as sns\nf, ax = plt.subplots(figsize=(10, 8))\ncorr = data.corr()\nsns.heatmap(corr, mask=np.zeros_like(corr, dtype=np.bool), cmap=sns.diverging_palette(240,10,as_cmap=True),\n            square=True, ax=ax)","2f9e9b14":"f= plt.figure(figsize=(12,5))\n\n#ax=f.add_subplot(121)\nsns.relplot(x = \"Life Ladder\", y = \"Positive affect\" , hue=\"Positive affect\", palette=\"ch:r=-.5,l=.75\",data = data )\n","50d43dc3":"f= plt.figure(figsize=(12,5))\n\n#ax=f.add_subplot(121)\nsns.relplot(x = \"Freedom to make life choices\",y = \"Positive affect\" , hue = \"Positive affect\" , data = data)","d4a5fa1b":"happiness_score = data.groupby('Country name')['Life Ladder'].sum().sort_values(ascending=False).head(35)\nhappiness_score","e7e61e10":"f= plt.figure(figsize=(30,20))\n\nsns.scatterplot(x='Healthy life expectancy at birth',y='Positive affect',data=data,palette='magma',hue='Country name')","347eb95d":"## Sorting countries with decreasing Happiness Index","62995011":"# Plotting Positively correlated features with Positive affect","a3685500":"# Similarly can be plotted for the negative affect as well","7bd9e934":"### I have a few more ideas for exploring this dataset. I will soon implement them. And now we are going to predict the happiness index of a country given the conditions. We'll start with a simple linear regression."}}