{"cell_type":{"63691ad0":"code","3fb89a0a":"code","0442d198":"code","fefd000b":"code","73e15f98":"code","6e4f6f5f":"code","286868fe":"code","e2a10a80":"code","0cdc9a38":"code","6f6cc166":"code","0749b5a9":"code","5ef7ef53":"code","27bf77c1":"code","d9f379ef":"code","a6911321":"code","5352ef52":"code","b68c0a46":"code","92b04242":"code","53393706":"code","0e6b6408":"code","1a83ba22":"code","1b4a7986":"code","2d9c7efe":"code","7ee5cd75":"code","508bf2b0":"code","13f181f8":"code","a714e59e":"code","9aa72bd5":"code","91cefb13":"code","53add15d":"code","2c6ccba4":"code","66ef6366":"code","46bb53ed":"code","cde260c3":"code","657b07c2":"code","3d838999":"code","637ca692":"code","891055a8":"code","39d8dce6":"code","558eff32":"code","6b8a4118":"code","3d0ab191":"code","b17714e1":"code","7eda0c94":"code","9cb77b80":"code","dfad1438":"code","ddc74ef3":"code","47f6615a":"code","d933f78f":"code","3732b90b":"code","2230eec3":"code","4cb17b15":"code","c35c2c09":"code","980d0b27":"code","e602a3e8":"code","f32c2003":"code","77b858b0":"code","8488a39e":"code","f07a1dd5":"code","03f143e6":"code","e936ee48":"code","8b7dd702":"code","0d632bdf":"code","ed4270ad":"code","77e819a4":"code","c00ec60b":"code","86b58276":"code","bc32cd67":"code","ff005906":"code","fa286fb4":"code","d45d9c83":"code","a3ed2d78":"code","8c9b13a1":"code","eee0f47e":"code","14019216":"code","5ff9d516":"code","6883da49":"code","68baeaf0":"code","cea830af":"code","d3833e10":"code","a495ee4e":"code","134e4c53":"markdown","adbeade6":"markdown","c99338ea":"markdown","72cdd507":"markdown","21a28f90":"markdown","868c109c":"markdown","0d91e0b7":"markdown","3413d461":"markdown","15abbda7":"markdown","c313fec8":"markdown","1e9c92bb":"markdown","f4cfeae3":"markdown","4086c4eb":"markdown","3eb4a5e2":"markdown","422800be":"markdown","aa80387b":"markdown","ca563188":"markdown","5ba25c16":"markdown","972b2be7":"markdown","44dac76f":"markdown","671fcfa2":"markdown","100c309b":"markdown","f7d581a2":"markdown","90ef7560":"markdown","db97a59b":"markdown","5d468fc8":"markdown","9731f554":"markdown","e19a9aa0":"markdown","4f0953d1":"markdown","08ca1315":"markdown","e0548086":"markdown","1eb40bc0":"markdown","9a5df6cf":"markdown","a7b45e0f":"markdown","d656a82f":"markdown","57baad89":"markdown","544096d9":"markdown","5a9fb13c":"markdown","474a6dd2":"markdown","dcac8064":"markdown","d3886706":"markdown","baa5c39d":"markdown","070f0465":"markdown","c0471f77":"markdown","f6b9513e":"markdown","fa5c7e60":"markdown","cecf4c99":"markdown","6aa43380":"markdown","6662fc18":"markdown","2c6eab0d":"markdown","11b2bd7f":"markdown","00683373":"markdown","12b90404":"markdown","2565b170":"markdown","b93344a1":"markdown","044acf5d":"markdown","a6f8e5aa":"markdown","8e24fbb4":"markdown","1b137906":"markdown","2bdc66dc":"markdown","4c69dc05":"markdown","e08690f9":"markdown","f007d373":"markdown","d05c07d3":"markdown","761ac747":"markdown","00794a2e":"markdown","cba0b103":"markdown","1957879f":"markdown","55c77dfd":"markdown","58ee3109":"markdown","bbaf54c0":"markdown","3f6a13f1":"markdown","bf7311b5":"markdown","b229e0fa":"markdown","4a1634e7":"markdown","13ede8a7":"markdown","6120edf2":"markdown","ee3ff86d":"markdown","24021159":"markdown","96b2a75f":"markdown","ecfce93a":"markdown","73b1ebf7":"markdown","c6c25806":"markdown","9261a205":"markdown","7b6b1626":"markdown","5617592c":"markdown","f65c10a8":"markdown","fd99884c":"markdown","098da574":"markdown","037e339b":"markdown","78f3a1ac":"markdown","2905723d":"markdown","8e08fcf1":"markdown","0c70ddaf":"markdown","1686edfc":"markdown","c80d7b9d":"markdown","e4dd75fd":"markdown","0a427ba9":"markdown","eccd7a3f":"markdown","17f1c51e":"markdown","54db1e90":"markdown","63d1469c":"markdown","39c80b66":"markdown","6dfcd275":"markdown","97ea7f26":"markdown","3caf4150":"markdown","8f43ed29":"markdown","08cdf669":"markdown","3ffe93c9":"markdown","255af599":"markdown","a1bc5786":"markdown","b4466b1b":"markdown","f324bb60":"markdown","cced5c31":"markdown","e0ca187a":"markdown","59103b23":"markdown","94902c76":"markdown","3154a0ff":"markdown","94236f82":"markdown","6e91e6e9":"markdown","e452483b":"markdown","6f581fa1":"markdown","62685c6e":"markdown","4580896e":"markdown","ae156b45":"markdown","990145da":"markdown"},"source":{"63691ad0":"no_of_friends, fence_height = map(int, input().split())\n\n# friend_heights = list(map(int, input().split()))\n# limiting number of friend_heights in the list to those the user specified\nfriend_heights = [int(friend_height) for idx, friend_height in enumerate(input().split()) if idx < no_of_friends]\n\nmin_width = 0\n\nfor friend_height in friend_heights:\n    if friend_height <= fence_height:\n        min_width = min_width + 1\n    else:\n        min_width = min_width + 2\n\nprint(min_width)","3fb89a0a":"no_of_friends, fence_height = map(int, input().split())\n\n# limiting number of friend_heights in the list to those the user specified\nfriend_heights = [int(friend_height) for idx, friend_height in enumerate(input().split()) if idx < no_of_friends]\n\nmin_width = sum([(friend_height > fence_height) + 1 for friend_height in friend_heights])\n\nprint(min_width)","0442d198":"# reading inputs\nno_of_games = int(input())\ngames_results = [result for result in input()]\n\nanton_wins, danik_wins = 0, 0\n\nfor idx, result in enumerate(games_results):\n    if result == 'A' and idx < no_of_games:\n        anton_wins += 1\n    elif result == 'D' and idx < no_of_games:\n        danik_wins += 1\n\n    # handling no. of inputs larger than the no. of games\n    if idx == no_of_games:\n        break\n\n# printing final result\nif anton_wins > danik_wins:\n    print(\"Anton\")\nelif anton_wins < danik_wins:\n    print(\"Danik\")\nelse:\n    print(\"Friendship\")","fefd000b":"# reading inputs\nno_of_games = int(input())\ngames_results = input()\n\nanton_wins, danik_wins = games_results.count('A'), games_results.count('D')\n\nif anton_wins > danik_wins:\n    print(\"Anton\")\nelif anton_wins < danik_wins:\n    print(\"Danik\")\nelse:\n    print(\"Friendship\")","73e15f98":"# reading inputs\nlimak_weight, bob_weight = map(int, input().split())\nno_of_years = 0\n\nwhile(limak_weight <= bob_weight):\n    no_of_years += 1\n    limak_weight = 3*limak_weight\n    bob_weight = 2*bob_weight\n\nprint(no_of_years)","6e4f6f5f":"no_of_problems = int(input())\nno_pbs_to_finally_solve = 0\n\nfor i in range(no_of_problems):\n    friends_no_pb_or_not = map(int, input().split())\n    if sum(friends_no_pb_or_not) >= 2:\n        no_pbs_to_finally_solve += 1\n\nprint(no_pbs_to_finally_solve)","286868fe":"# a function for getting string position in a matrix\ndef find(num, matrix):\n    for i in range(5):\n        for j in range(5):\n            if matrix[i][j] == num:\n                return (i, j)\n\n# gettting the inputs\nmatrix = []\nfor i in range(5):\n    matrix.append(list(map(int, input().split())))\n\none_position = find(1, matrix)\n\nif one_position[0] > 2:\n    row_move = (one_position[0] - 2)\nelse:\n    row_move = (2 - one_position[0])\n\nif one_position[1] > 2:\n    col_move = (one_position[1] - 2)\nelse:\n    col_move = (2 - one_position[1])\n\nmin_no_moves = row_move + col_move\n\nprint(min_no_moves)","e2a10a80":"# gettting the inputs\nfor i in range(5):\n    row_i = list(map(int, input().split()))\n    if 1 in row_i:\n        row_pos = i\n        col_pos = row_i.index(1)\n\nif row_pos > 2:\n    row_move = (row_pos - 2)\nelse:\n    row_move = (2 - row_pos)\n\nif col_pos > 2:\n    col_move = (col_pos - 2)\nelse:\n    col_move = (2 - col_pos)\n\nmin_no_moves = row_move + col_move\n\nprint(min_no_moves)","0cdc9a38":"# gettting the inputs\nfor i in range(5):\n    row_i = list(map(int, input().split()))\n    if 1 in row_i:\n        row_pos = i\n        col_pos = row_i.index(1)\n\nmin_no_moves = abs(2 - row_pos) + abs(2 - col_pos)\n\nprint(min_no_moves)","6f6cc166":"no_of_cols = int(input())\n\ncolumns = map(int, input().split())\n\n# only getting the number of inputs obtained\ncolumns = [col for idx, col in enumerate(columns) if idx < no_of_cols]\n# (*sorted) for printing the numbers in the list instead of including the list brackets and commas [ , , , ] in the print\nprint(*sorted(columns))","0749b5a9":"no_of_cols = int(input())\n\ncolumns = list(map(int, input().split()))[:no_of_cols]\n\ncolumns.sort()\n# (*sorted) for printing the numbers in the list instead of including the list brackets and commas [ , , , ] in the print\nprint(*columns)","5ef7ef53":"string1 = input().lower()\nstring2 = input().lower()\n\nif string1 < string2:\n    print('-1')\nelif string1 > string2:\n    print('1')\nelse:\n    print('0')","27bf77c1":"name = input().strip()\n\nnum_unique_chars = len(set(name))\n\nif num_unique_chars % 2 == 0:\n    # even number\n    print(\"girl\")\nelse:\n    # even number\n    print(\"boy\")","d9f379ef":"print(\"boy\") if len(set(input().strip())) % 2 == 1 else print(\"girl\")","a6911321":"word = input().strip()\n\nnum_lowercase_chars, num_uppercase_chars = 0, 0\n\nfor char in word:\n    if char.islower():\n        num_lowercase_chars += 1\n    else:    \n        num_uppercase_chars += 1\n\nif num_uppercase_chars > num_lowercase_chars:\n    print(word.upper())      \nelse:\n    print(word.lower())","5352ef52":"word = input().strip()\n\nnum_lowercase_chars = sum(map(str.islower, word))\nnum_uppercase_chars = sum(map(str.isupper, word))\n\nif num_uppercase_chars > num_lowercase_chars:\n    print(word.upper())\nelse:\n    print(word.lower())","b68c0a46":"word = input()\n\nprint(word[0].capitalize() + word[1:])","92b04242":"num_magnets = int(input())\n\nnum_groups = 1\n\nfor i in range(num_magnets):\n\n    magnet_pole = input()\n    \n    if i == 0:\n        previous_pole = magnet_pole\n    else:    \n        if magnet_pole != previous_pole:\n            num_groups += 1\n        previous_pole = magnet_pole   \n\nprint(num_groups)","53393706":"num_magnets = int(input())\n\nprevious_pole, num_groups = \"11\", 0\n\nfor i in range(num_magnets):\n\n    current_pole = input()\n    num_groups += (previous_pole != current_pole)\n    previous_pole = current_pole\n\nprint(num_groups)","0e6b6408":"# from IPython.core.debugger import set_trace\n# set_trace()\nnum_cards = int(input())\n\ncard_nos = list(map(int, input().split()))\n\nlast_card_no_idx = len(card_nos) - 1\nsereja_sum, dima_sum = 0, 0\n\n\n\nidx = -1\nwhile len(card_nos) > 0:\n    \n    idx += 1\n    \n    if idx % 2 == 0:\n        \n        # sereja turn\n        if len(card_nos) != 1:\n            sereja_choice = max(card_nos[0], card_nos[-1])\n            sereja_sum += sereja_choice\n            # remove the chosen item from the list\n            card_nos.remove(sereja_choice)\n        else:\n            # when there is one card left in the list\n            sereja_sum += card_nos[0]\n            # remove the chosen item from the list\n            card_nos.remove(card_nos[0])\n    else:\n        # dima turn\n        if len(card_nos) != 1:\n            dima_choice = max(card_nos[0], card_nos[-1])\n            dima_sum += dima_choice\n            # remove the chosen item from the list\n            card_nos.remove(dima_choice)\n        else:\n            # when there is one card left in the list\n            dima_sum += card_nos[0]\n            # remove the chosen item from the list\n            card_nos.remove(card_nos[0])\n\nprint(sereja_sum, dima_sum)","1a83ba22":"num_cards = int(input())\n\ncard_nos = list(map(int, input().split()))\n\nlast_card_no_idx = len(card_nos) - 1\nsereja_sum, dima_sum = 0, 0\n\nsereja_and_dima_sums = [0, 0]\n\nfor idx in range(len(card_nos)):\n\n    if len(card_nos) > 1:\n        choice = max(card_nos[0], card_nos[-1])\n    else:\n        # when there is one card no. left in the list\n        choice = card_nos[0]\n\n    sereja_and_dima_sums[idx % 2] += choice\n    card_nos.remove(choice)\n\nprint(*sereja_and_dima_sums)","1b4a7986":"no_of_stones = int(input())\nstones_colors = input()\n\nmin_no_stones_to_remove = 0\ncompare_1_index = 0\n\nif no_of_stones > 1:\n\n    for i in range(no_of_stones - 1):\n        # if the two consecutive stones are not the same, remove one of them\n        if stones_colors[compare_1_index] == stones_colors[i+1]:\n            min_no_stones_to_remove += 1\n            \n        compare_1_index = i + 1\n\nprint(min_no_stones_to_remove)","2d9c7efe":"no_of_stones = int(input())\nstones_colors = input()\n\nmin_no_stones_to_remove = 0\n\nif no_of_stones > 1:\n\n    for i in range(no_of_stones - 1):\n        # if the two consecutive stones are not the same, remove one of them\n        if stones_colors[i] == stones_colors[i+1]:\n            min_no_stones_to_remove += 1\n\nprint(min_no_stones_to_remove)","7ee5cd75":"num_events = int(input())\n\n# converting input into list for looping on it\nevents = list(map(int, input().split()))\n\nnum_hired, num_crimes, num_untreated_crimes = 0, 0, 0\n\nfor i in range(num_events):\n\n    if events[i] > 0:\n        # police officer hired\n        num_hired += events[i]\n    else:\n        # crime happened\n        if num_hired > 0:\n            num_hired -= 1\n        else:\n            num_untreated_crimes += 1\n\nprint(num_untreated_crimes)","508bf2b0":"calories_per_strip = list(map(int, input().split()))\n\ncalories_per_strip_dict = {i+1: calories_per_strip[i] for i in range(len(calories_per_strip))}\n\ngame_clicks = list(input())\n\ncalories_wasted = [calories_per_strip_dict[int(game_click)] for game_click in game_clicks]\n\nprint(sum(calories_wasted))","13f181f8":"calories_per_strip = list(map(int, input().split()))\n\ngame_clicks = list(input())\n\ncalories_wasted = [calories_per_strip[int(game_click)-1] for game_click in game_clicks]\n\nprint(sum(calories_wasted))","a714e59e":"word = input()\n\ndef modify_min_char_distance_dict_values_fn(alphabetics, min_char_distance_dict):\n    alphabetics_len = len(alphabetics)\n    # firstly centering around a\n    for idx, char in enumerate(alphabetics):\n        if idx <= alphabetics_len\/2:\n            # moving to one side of the embosser\n            min_char_distance_dict[char] = alphabetics.find(char)\n        else:\n            # moving to the other side of the embosser\n            min_char_distance_dict[char] = alphabetics_len - alphabetics.find(char)\n\n    return min_char_distance_dict\n\ndef modify_alphabetics_order_fn(current_char, min_char_distance_dict, alphabetics):\n    # splitting on the current character\n    alphabetics = alphabetics.split(current_char)\n    # centering alphabetics around the current character\n    alphabetics = current_char + alphabetics[1] + alphabetics[0]\n\n    return alphabetics\n\nalphabetics = 'abcdefghijklmnopqrstuvwxyz'\n\n# a dictionary for storing min distance to the current character\nmin_char_distance_dict = {}\n# calculating the min_char_distance_dict by initially centering around 'a' character\nmin_char_distance_dict = modify_min_char_distance_dict_values_fn(alphabetics, min_char_distance_dict)\n\nmin_rotations = 0\n\nfor char in word:\n    \n    min_rotations += min_char_distance_dict[char]\n    # updaing the alphabetics string by centering it around the new character\n    alphabetics = modify_alphabetics_order_fn(char, min_char_distance_dict, alphabetics)\n    # updating min_char_distance_dict distances from the new current character\n    min_char_distance_dict = modify_min_char_distance_dict_values_fn(alphabetics, min_char_distance_dict)\n    \nprint(min_rotations)","9aa72bd5":"word = input()\n\nprevious_letter = 'a'\n\nmin_rotations = 0\n\nfor char in word:\n\n    distance_1 = abs(ord(previous_letter) - ord(char))\n    distance_2 = 26 - distance_1\n    min_rotations += min(distance_1, distance_2)\n    previous_letter = char\n\nprint(min_rotations)","91cefb13":"num_teams = int(input())\n\nteam_uniforms = [tuple(map(int, input().split())) for i in range(num_teams)]\n\nhost_in_guest_uniform_num = 0\n\nfor host in range(num_teams):\n    for guest in range(num_teams):\n\n        if host != guest:\n            if team_uniforms[host][0] == team_uniforms[guest][1]:\n                host_in_guest_uniform_num += 1\n\nprint(host_in_guest_uniform_num)","53add15d":"num_teams = int(input())\n\nhost_uniforms, guests_uniforms = list(), list()\n\nhost_in_guest_uniform_num = 0\n\nfor i in range(num_teams):\n    input_uniforms = tuple(map(int, input().split()))\n\n    host_uniforms.append(input_uniforms[0])\n    guests_uniforms.append(input_uniforms[1])\n\nfor host_uniform in host_uniforms:\n    if host_uniform in guests_uniforms:\n        # adding the number of times the current host uniform is found in the guest uniforms\n        host_in_guest_uniform_num += guests_uniforms.count(host_uniform)\n\nprint(host_in_guest_uniform_num)","2c6ccba4":"input_nums = list(map(int, input().split()))\n\nshovel_price, coin_denomination = input_nums[0], input_nums[1]\n\nnum_shovels_buy = 1\ntotal_shovel_price = shovel_price\n\nwhile ((total_shovel_price % 10) != coin_denomination) and ((total_shovel_price % 10) != 0):\n\n    num_shovels_buy += 1\n    total_shovel_price += shovel_price\n\nprint(num_shovels_buy)","66ef6366":"horseshoe_colors = list(map(int, input().split()))\n\nprint(4 - len(set(horseshoe_colors)))","46bb53ed":"stones_positions = input()\ninstructions = input()\n\ncurrent_pos = 1\n\nfor instruction in instructions:\n    if stones_positions[current_pos-1] == instruction:\n        current_pos += 1\n        \nprint(current_pos)","cde260c3":"input_nums = list(map(int, input().split()))\n\nbest_options = [idx for idx in range(max(input_nums), 7)]\n\nif len(best_options) == 0:\n    probability_numerator = 0\n    probability_denominator = 1\nelse:\n    probability_numerator = len(best_options)\n\n    if probability_numerator == 4:\n        probability_numerator = 2\n        probability_denominator = 3\n\n    elif probability_numerator == 5:\n        probability_denominator = 6\n\n    else:\n        probability_denominator = int(6\/probability_numerator)\n        probability_numerator = 1\n\nprint(f'{probability_numerator}\/{probability_denominator}')","657b07c2":"from fractions import Fraction\n\ninput_nums = list(map(int, input().split()))\n\nbest_options = [idx for idx in range(max(input_nums), 7)]\n\nnum_best_options = 6 - max(input_nums) + 1\n\nif num_best_options == 6:\n    print(\"1\/1\")\nelse:\n    print(str(Fraction(num_best_options, 6)))","3d838999":"print(['1\/1', '5\/6', '2\/3', '1\/2', '1\/3', '1\/6'][max(map(int, input().split())) - 1])","637ca692":"num_wires = int(input())\nnum_birds_per_wire = list(map(int, input().split()))\n\nnum_shots = int(input())\n\nshots_positions = [list(map(int, input().split())) for i in range(num_shots)]\n\nfor shot_pos in shots_positions:\n\n    x_pos, y_pos = shot_pos[0], shot_pos[1]\n    x_pos, y_pos = x_pos - 1, y_pos - 1\n\n\n\n    if x_pos > 0:\n        num_birds_per_wire[x_pos - 1] += y_pos\n\n    if x_pos < num_wires - 1:\n        num_birds_per_wire[x_pos + 1] += (num_birds_per_wire[x_pos] - y_pos - 1)\n\n    num_birds_per_wire[x_pos] = 0\n\nfor i in num_birds_per_wire:\n    print(i)","891055a8":"inputs = lambda: list(map(int, input().split()))\n\nnum_wires,  = inputs()\n\nnum_birds_per_wire = inputs()\n\nnum_shots = int(input())\n\nfor i in range(num_shots):\n\n    x, y = inputs()\n    x, y = x-1, y-1\n\n    if x > 0:\n        num_birds_per_wire[x - 1] += y\n\n    if x < num_wires - 1:\n        num_birds_per_wire[x + 1] += num_birds_per_wire[x] - y - 1\n\n    num_birds_per_wire[x] = 0\n\nprint('\\n'.join(map(str, num_birds_per_wire)))","39d8dce6":"inputs = lambda: list(map(int, input().split()))\n\nnum_oranges, max_orange_size, max_overall_size = inputs()\n\norange_sizes = inputs()\n\noverall_juice_size, num_empty_waste = 0, 0\n\nfor orange_size in orange_sizes:\n    if orange_size > max_orange_size:\n        continue\n    else:\n        overall_juice_size += orange_size\n\n        if overall_juice_size > max_overall_size:\n            num_empty_waste += 1\n            overall_juice_size = 0\n            \nprint(num_empty_waste)","558eff32":"inputs = lambda: list(map(int, input().split()))\n\nnum_oranges, max_orange_size, max_overall_size = inputs()\n\norange_sizes = inputs()\n\noverall_juice_size, num_empty_waste = 0, 0\n\nfor orange_size in orange_sizes:\n    \n    if orange_size <= max_orange_size:\n        overall_juice_size += orange_size\n\n    if overall_juice_size > max_overall_size:\n        num_empty_waste += 1\n        overall_juice_size = 0\n\nprint(num_empty_waste)","6b8a4118":"import math\n\nnum_cakes, oven_baking_time, num_simul_cakes, oven_build_time = list(map(int, input().split()))\n\n# dividing all given cakes into the final number of groups such that they will fit into the furnace\nnum_groups = math.ceil(num_cakes\/num_simul_cakes)\n\n# first calculating the total time taken using two furnaces\n# making two counters for the available times for each furnace\noven_1_available_time, oven_2_available_time = 0, oven_build_time\n\n# looping over the groups, the cakes will be given to the earliest available furnace at that time\nfor i in range(num_groups):\n\n    if oven_1_available_time <= oven_2_available_time: oven_1_available_time += oven_baking_time\n\n    else: oven_2_available_time += oven_baking_time\n\ntwo_furnaces_time = max(oven_1_available_time, oven_2_available_time)\n# second calculating the total time taken using one furnace\none_furnace_time = num_groups*oven_baking_time\n\nprint(\"YES\" if two_furnaces_time < one_furnace_time else \"NO\")","3d0ab191":"import re\n\nprint(len(set(filter(None, re.split(',| ', input()[1:-1])))))","b17714e1":"print(len(set(filter(None, input()[1:-1].split(', ')))))","7eda0c94":"n = int(input())\n\nabbreviations = list()\n\nfor i in range(n):\n    word = input()\n    \n    if len(word) > 10:\n        abbreviations.append(word[0] + str(len(word)-2) + word[-1])\n    else:    \n        abbreviations.append(word)\n\nfor abbrev in abbreviations:\n    print(abbrev)","9cb77b80":"n = int(input())\n\nfor i in range(n):\n    word = input()\n\n    if len(word) > 10:\n        print(word[0] + str(len(word)-2) + word[-1])\n    else:\n        print(word)","dfad1438":"queue_length, num_packs = list(map(int, input().split()))\nnum_child_not_receive = 0\n\nfor i in range(queue_length):\n    queue_i = input()\n\n    if queue_i[0] == '+':\n        num_packs += int(queue_i.split()[-1])\n    else:\n        wanted_packs = int(queue_i.split()[-1])\n        if num_packs >= wanted_packs:\n            num_packs -= wanted_packs\n        else:\n            num_child_not_receive += 1\n\nprint(num_packs, num_child_not_receive)","ddc74ef3":"queue_length, num_packs = list(map(int, input().split()))\nnum_child_not_receive = 0\n\nfor i in range(queue_length):\n    queue_i = int(input().replace(' ', ''))\n\n    if queue_i + num_packs < 0: num_child_not_receive += 1\n    else: num_packs += queue_i\n\nprint(num_packs, num_child_not_receive)","47f6615a":"sorted_nums = sorted(map(int, input().split('+')))\n\noutput_string = ''\n\nif len(sorted_nums) > 0:\n    for idx, num in enumerate(sorted_nums):\n        if idx != len(sorted_nums) - 1:\n            output_string += str(num) + '+'\n        else:\n            output_string += str(num)\nelse:\n    output_string = sorted_nums[0]\n\n\nprint(output_string)","d933f78f":"sorted_nums = sorted(map(int, input().split('+')))\n\nprint('+'.join(map(str, sorted_nums)))","3732b90b":"print('+'.join(sorted(input()[::2])))","2230eec3":"num_teams = int(input())\n\nchildren_ids = list()\n\nchildren_talents = list(map(int, input().split()))\n\nnum_talent_1, num_talent_2, num_talent_3 = children_talents.count(1), children_talents.count(2), children_talents.count(3)\n\nmax_no_teams = min(num_talent_1, num_talent_2, num_talent_3)\n\nchildren_ids_sorted_by_talents = sorted(range(num_teams), key = lambda i: children_talents[i])\n\nprint(max_no_teams)\n\nif max_no_teams > 0:\n\n    for i in range(max_no_teams):\n        print(children_ids_sorted_by_talents[i]+1, children_ids_sorted_by_talents[i+num_talent_1]+1, children_ids_sorted_by_talents[i+num_talent_1+num_talent_2]+1)","4cb17b15":"num_teams = int(input())\n\nchildren_talents = [[], [], []]\n\nfor i, children_talent in enumerate(map(int, input().split())):\n    children_talents[children_talent - 1].append(i + 1)\n\nmax_no_teams = min(len(children_talents[i]) for i in range(3))\n\nprint(max_no_teams)\n\nfor i in range(max_no_teams):\n    print(*[children_talents[j][i] for j in range(3)])","c35c2c09":"import string\n\npass_length, num_distinct = map(int, input().split())\n\nconsecutive_distinct = False\n\nused_chars = string.ascii_lowercase[:num_distinct]\n\npassword = ''\n\nidx = 0\nfor i in range(pass_length):\n    if idx == len(used_chars):\n        idx = 0\n    password += used_chars[idx]\n    idx += 1\n\nprint(password)","980d0b27":"import string\n\npass_length, num_distinct = map(int, input().split())\n\nprint((string.ascii_lowercase[:num_distinct] * pass_length)[:pass_length])","e602a3e8":"num_friends = int(input())\n\nfriend_gave_present_to = map(int, input().split())\n\nfriend_received_present_from = [0] * num_friends\n\nfor idx, i in enumerate(friend_gave_present_to):\n    friend_received_present_from[i-1] = idx + 1\n\nprint(*friend_received_present_from)","f32c2003":"num_friends = int(input())\n\nfriend_gave_present_to = list(map(int, input().split()))\n\nprint(' '.join([str(friend_gave_present_to.index(i) + 1) for i in range(1, num_friends + 1)]))","77b858b0":"num_cities = int(input())\n\ncoordinates = list(map(int, input().split()))\n\nmin_coordinate = min(coordinates)\n\nif min_coordinate < 0:\n    coordinates = [coord + min_coordinate for coord in coordinates]\n\nfor idx, coord in enumerate(coordinates):\n    if idx == 0:\n        print(abs(coord - coordinates[idx+1]), abs(coord - coordinates[-1]))\n    elif idx == num_cities - 1:\n        print(coord - coordinates[idx-1], coord - coordinates[0])\n    else:\n        min_ = min(abs(coord - coordinates[idx+1]), coord - coordinates[idx-1])\n        max_ = max(abs(coord - coordinates[-1]), coord - coordinates[0])\n        print(min_, max_)","8488a39e":"num_cities = int(input())\n\ncoordinates = list(map(int, input().split()))\n\nfor i in range(num_cities):\n    print(min(abs(coordinates[i] - coordinates[i - 1]), abs(coordinates[i - num_cities + 1] - coordinates[i])), max(coordinates[i] - coordinates[0], coordinates[-1] - coordinates[i]))","f07a1dd5":"string_1, string_2 = input(), input()\n\nprint(-1 if string_1 == string_2 else max(len(string_1), len(string_2)))","03f143e6":"n = int(input())\n\nsizes = map(int, input().split())\n\nwaiting_list = list()\n\nfor size in sizes:\n    waiting_list.append(size)\n\n    if size == n:\n        waiting_list.sort(reverse=True)\n        needed_index = waiting_list.index(n)\n        to_be_added = list()\n            \n        for idx, size_ in enumerate(waiting_list):\n            current_size = size_\n            if idx == needed_index:\n                previous_size = size_\n                to_be_added.append(size_)\n            elif (idx > needed_index) and (current_size == previous_size - 1):\n                to_be_added.append(size_)\n                previous_size = size_\n                \n        for i in to_be_added:\n            waiting_list.remove(i)\n\n        print(*to_be_added)\n        n = min(to_be_added) - 1\n\n    else:\n        print()","e936ee48":"n = int(input())\n\nsizes = map(int, input().split())\n\nwaiting_list = list()\n\nfor size in sizes:\n    waiting_list.append(size)\n\n    if size == n:\n\n        to_be_added = list()\n\n        len_ = len(waiting_list)\n        \n        for i in range(len_):\n            if n in waiting_list:\n                to_be_added.append(waiting_list[waiting_list.index(n)])\n                n -= 1\n            else:\n                break\n\n        print(*to_be_added)\n\n    else:\n        print()","8b7dd702":"n = int(input())\n\nstewards_strengths = list(map(int, input().split()))\n\nnum_to_support = 0\n\nstewards_strengths_copy = sorted(set(stewards_strengths))\n\nif len(stewards_strengths_copy) > 2:\n    lowest_strength_count = stewards_strengths.count(stewards_strengths_copy[0])\n    largest_strength_count = stewards_strengths.count(stewards_strengths_copy[-1])\n    num_to_support = len(stewards_strengths) - lowest_strength_count - largest_strength_count\n\nprint(num_to_support)","0d632bdf":"n = int(input()); stewards_strengths = list(map(int, input().split()))\n\nprint(max(0, n - stewards_strengths.count(max(stewards_strengths)) - stewards_strengths.count(min(stewards_strengths))))","ed4270ad":"num_participants, kth_place = map(int, input().split())\n\nscores = [*map(int, input().split())]\n\nprint(len([1 for score in scores if (score > 0) and (score >= scores[kth_place - 1])]))","77e819a4":"input_ = lambda: map(int, input().split())\n\nnum_participants, kth_place = input_()\nscores = list(input_())\n\nprint(sum(score >= max(1, scores[kth_place - 1]) for score in scores))","c00ec60b":"num = int(input())\n\nx = 0\n\nfor i in range(num):\n    if input().find('+') != -1:\n        x += 1\n    else:\n        x -= 1\n\nprint(x)","86b58276":"num = int(input())\n\nx = 0\n\nfor i in range(num):\n    if '+' in input():\n        x += 1\n    else:\n        x -= 1\n\nprint(x)","bc32cd67":"input_ = lambda: map(int, input().split())\n\nnum_forces = int(input())\n\nx_equil, y_equil, z_equil = 0, 0, 0\n\nfor i in range(num_forces):\n    f_x, f_y, f_z = input_()\n    x_equil += f_x\n    y_equil += f_y\n    z_equil += f_z\n\nif (x_equil == 0) and (y_equil == 0) and (z_equil == 0):\n    print(\"YES\")\nelse:\n    print(\"NO\")","ff005906":"print(\"YNEOS\"[any(map(sum, zip(*[map(int, input().split()) for i in ' '*int(input())])))::2])","fa286fb4":"import string\n\nnum_char = int(input())\nstring_ = input().lower()\n\nall_letters = string.ascii_lowercase\n\nif num_char >= len(all_letters):\n\n    is_pangram = True\n\n    for letter in all_letters:\n\n        if letter not in string_:\n            is_pangram = False\n\n    print('YES') if is_pangram else print('NO')\n\nelse:\n    print('NO')","d45d9c83":"n = int(input())\n\nprint(('NO', 'YES')[len(set(input().lower())) == 26])","a3ed2d78":"num_coinst = int(input())\n\ncoins = list(map(int, input().split()))\n\nsum_1, remaining_sum = 0, sum(coins)\n\ncoins.sort(reverse=True)\n\nfor idx, coin in enumerate(coins):\n    sum_1 += coin\n    remaining_sum -= coin\n\n    if sum_1 > remaining_sum:\n        break\n\nprint(idx + 1)","8c9b13a1":"input(); coins = sorted(map(int, input().split())); sum_ = i = 0\n\nwhile sum_ <= sum(coins): sum_ += coins.pop(); i += 1\n\nprint(i)","eee0f47e":"direction = input()\n\nwrong_message = input()\n\nkeyboard_chars = \"qwertyuiopasdfghjkl;zxcvbnm,.\/\"\n\ncorrect_message = \"\"\n\nfor letter in wrong_message:\n    if direction == \"R\":\n        correct_message += keyboard_chars[keyboard_chars.index(letter) - 1]\n    elif direction == \"L\":\n        correct_message += keyboard_chars[keyboard_chars.index(letter) + 1]\n\nprint(correct_message)","14019216":"direction = input(); keyboard_chars = \"qwertyuiopasdfghjkl;zxcvbnm,.\/\"\n\nfor letter in input(): print(keyboard_chars[keyboard_chars.index(letter) + [1, -1][direction == \"R\"]], end=\"\")","5ff9d516":"import numpy as np\n\ndef valid(i, j, n):\n    return (i >= 0 and j >= 0  and i < n and j < n)\n\ndef check_eagle(ii, jj, n):\n\n    seen[ii][jj] = 1\n\n    for idx in range(8):\n        dx = ii + valid_dx[idx]\n        dy = jj + valid_dy[idx]\n        if valid(dx, dy, n) and (seen[dx][dy] == 0) and (int(img[dx][dy]) == 1):\n\n            check_eagle(dx, dy, n)\n\nif __name__ == '__main__':\n    \n    # reading the input file\n    text_file_name = input()\n\n    with open(text_file_name, 'r') as reader:\n        text = reader.read().split('\\n')\n\n    # getting images dimensions, and pixels into separate lists\n    img_dims, img_pixels = list(), list()\n    dim_flag = True\n    img_pixel = list()\n    for line in text:\n        if dim_flag:\n            img_dims.append(line)\n            if line == '':\n                break\n            stop_after = int(line)\n\n            counter = 0\n            dim_flag = False\n        else:\n            img_pixel.append(line)\n            counter += 1\n            if counter == stop_after:\n                img_pixels.append(img_pixel)\n                img_pixel = list()\n                dim_flag = True\n\n    valid_dx = [1, 1, 0, -1, -1, -1, 0, 1]\n    valid_dy = [0, 1, 1, 1, 0, -1, -1, -1]\n\n\n\n    output_text = \"\"\n\n    for idx, img in enumerate(img_pixels):\n        num_eagles = 0\n        img_dim = int(img_dims[idx])\n        seen = np.zeros((img_dim, img_dim))\n        for i in range(img_dim):\n            for j in range(img_dim):\n                if (int(img[i][j]) == 1) and (seen[i][j] == 0):\n\n                    check_eagle(i, j, img_dim)\n                    num_eagles += 1\n\n        output_text += f\"Image number {idx+1} contains {num_eagles} war eagles.\\n\"\n\n    with open('output.txt', 'w') as writer:\n        text = writer.write(output_text)","6883da49":"with open('.\/output.txt', 'r') as writer:\n        text = writer.read()\n        print(text)","68baeaf0":"import numpy as np\n\ndef valid(i, j, n):\n    return (i >= 0 and j >= 0  and i < n and j < n)\n\ndef check_eagle(ii, jj, n):\n\n    seen[ii][jj] = 1\n\n    for idx in range(8):\n        dx = ii + valid_dx[idx]\n        dy = jj + valid_dy[idx]\n        if valid(dx, dy, n) and (seen[dx][dy] == 0) and (int(img[dx][dy]) == 1):\n\n            check_eagle(dx, dy, n)\n\nif __name__ == '__main__':\n    \n    img_dims, img_pixels = list(), list()\n    dim_flag = True\n    img_pixel = list()\n\n    while True:\n        try:\n            line = input()\n\n            if dim_flag:\n                img_dims.append(line)\n                stop_after = int(line)\n                counter = 0\n                dim_flag = False\n            else:\n                img_pixel.append(line)\n                counter += 1\n                if counter == stop_after:\n                    img_pixels.append(img_pixel)\n                    img_pixel = list()\n                    dim_flag = True\n\n        except:\n            break\n\n    valid_dx = [1, 1, 0, -1, -1, -1, 0, 1]\n    valid_dy = [0, 1, 1, 1, 0, -1, -1, -1]\n\n\n    for idx, img in enumerate(img_pixels):\n        num_eagles = 0\n        img_dim = int(img_dims[idx])\n        seen = np.zeros((img_dim, img_dim))\n        for i in range(img_dim):\n            for j in range(img_dim):\n                if (int(img[i][j]) == 1) and (seen[i][j] == 0):\n\n                    check_eagle(i, j, img_dim)\n                    num_eagles += 1\n\n        print(f\"Image number {idx+1} contains {num_eagles} war eagles.\")","cea830af":"num_test_cases = int(input())\n\npath_letters = 'IEHOVA#'\nall_commands = list()\n\nfor i in range(num_test_cases):\n    current_commands = list()\n    m, n = map(int, input().split())\n\n    path = list()\n\n    for j in range(m):\n        path.insert(0, list(input()))\n\n    current_pos = path[0].index('@')\n    idx = 0\n    for letter in path_letters:\n        if letter in path[idx]:\n            destination_pos = path[idx].index(letter)\n            if destination_pos > current_pos:\n                current_commands.append('right')\n            else:\n                current_commands.append('left')\n        else:\n            idx += 1\n            destination_pos = path[idx].index(letter)\n            current_commands.append('forth')\n\n        current_pos = destination_pos\n\n    all_commands.append(current_commands)\n\nfor commands in all_commands:\n    print(*commands)","d3833e10":"import numpy as np\n\nnum_test_cases = int(input())\n\ndx = [0, 0, 1, -1]\ndy = [1, -1, 0, 0]\n\n\ndef is_valid_fn(ii, jj, nn, seen_, grid_, ship_len_):\n    if ii >= 0 and jj >= 0 and ii < nn and jj < nn and seen_[ii][jj] == 0 and\\\n     (grid_[ii][jj] == 'x' or grid_[ii][jj] == '@') and (ship_len_+1 <= nn\/2):\n        return 1\n    else:\n        return 0\n\n\noutput_print = list()\n\nfor idxx in range(num_test_cases):\n    grid_dim = int(input())\n    grid = list()\n    alive_ships = 0\n\n    for _ in range(grid_dim):\n        grid.append(list(input()))\n\n    seen = np.zeros((grid_dim, grid_dim))\n\n    for i in range(grid_dim):\n        for j in range(grid_dim):\n            ship_len = 0\n            if (grid[i][j] == 'x') and (seen[i][j] == 0):\n                seen[i][j] = 1\n                alive_ships += 1\n                ship_len += 1\n\n                for k in range(4):\n                    x = i + dx[k]\n                    y = j + dy[k]\n\n                    if is_valid_fn(x, y, grid_dim, seen, grid, ship_len):\n                        seen[x][y] = 1\n                        ship_len += 1\n                        enter_1, enter_2 = True, True\n                        if abs(dx[k]):\n                            for idx, m in enumerate(range(x+1, x + int(np.ceil(grid_dim\/2) + 1)), 1):\n                                if is_valid_fn(m, y, grid_dim, seen, grid,\n                                   ship_len) and enter_1:\n                                    seen[m][y] = 1\n                                    ship_len += 1\n                                else:\n                                    enter_1 = False\n                                if is_valid_fn(x-idx, y, grid_dim, seen, grid,\n                                   ship_len) and enter_2:\n                                    seen[x-idx][y] = 1\n                                    ship_len += 1\n                                else:\n                                    enter_2 = False\n                        else:\n                            for idx, n in enumerate(range(y+1, y + int(np.ceil(grid_dim\/2)) + 1), 1):\n                                if is_valid_fn(x, n, grid_dim, seen, grid, ship_len) and enter_1:\n                                    seen[x][n] = 1\n                                    ship_len += 1\n                                else:\n                                    enter_1 = False\n                                if is_valid_fn(x, y-idx, grid_dim, seen, grid, ship_len) and enter_2:\n                                    seen[x][y-idx] = 1\n                                    ship_len += 1\n                                else:\n                                    enter_2 = False\n                        break\n\n    output_print.append(f\"Case {idxx+1}: {alive_ships}\")\n\nfor output in output_print:\n    print(output)","a495ee4e":"import numpy as np\n\nnum_test_cases = int(input())\n\n\ndef search(ii, jj, nn, seen_, grid_):\n    if ii >= 0 and jj >= 0 and ii < nn and jj < nn and seen_[ii][jj] == 0 and\\\n     (grid_[ii][jj] == 'x' or grid_[ii][jj] == '@'):\n        seen_[ii][jj] = 1\n        search(ii + 1, jj,  nn, seen_, grid_)\n        search(ii - 1, jj,  nn, seen_, grid_)\n        search(ii, jj + 1,  nn, seen_, grid_)\n        search(ii, jj - 1,  nn, seen_, grid_)\n    else:\n        return\n\n\noutput_print = list()\n\nfor idxx in range(num_test_cases):\n    grid_dim = int(input())\n    grid = list()\n    alive_ships = 0\n\n    for _ in range(grid_dim):\n        grid.append(list(input()))\n\n    seen = np.zeros((grid_dim, grid_dim))\n\n    for i in range(grid_dim):\n        for j in range(grid_dim):\n            if (grid[i][j] == 'x') and (seen[i][j] == 0):\n                alive_ships += 1\n                search(i, j, grid_dim, seen, grid)\n\n    output_print.append(f\"Case {idxx+1}: {alive_ships}\")\n\nfor output in output_print:\n    print(output)\n","134e4c53":"## Problem 45: [Forming Teams](http:\/\/codeforces.com\/contest\/216\/problem\/B)","adbeade6":"### solution 42.2 reading from stdin, and printing output","c99338ea":"### solution","72cdd507":"### solution 36.2","21a28f90":"### solution","868c109c":"## Problem 27: Free Ice Cream","0d91e0b7":"### solution 12.1","3413d461":"## Problem 7: [Petya and Strings](https:\/\/codeforces.com\/contest\/112\/problem\/A)","15abbda7":"### solution 34.1 [Time Limit Exceeded]","c313fec8":"### solution 9.2","1e9c92bb":"### solution 41.2","f4cfeae3":"### solution","4086c4eb":"### solution 28.1","3eb4a5e2":"## Problem 35: Oath of the Night's Watch","422800be":"## Problem 18: [Buy a Shovel](https:\/\/codeforces.com\/contest\/732\/problem\/A)","aa80387b":"## Problem 6: [Gravity Flip](https:\/\/codeforces.com\/contest\/405\/problem\/A)","ca563188":"### solution 40.1","5ba25c16":"## Problem 5: [Beautiful Matrix](https:\/\/codeforces.com\/contest\/263\/problem\/A)","972b2be7":"## Problem 32: [Lineland Mail](https:\/\/codeforces.com\/contest\/567\/problem\/A)","44dac76f":"## Problem 44: [Battleships](https:\/\/onlinejudge.org\/index.php?option=onlinejudge&Itemid=8&page=show_problem&problem=3104)","671fcfa2":"### solution","100c309b":"### solution 38.1","f7d581a2":"### solution","90ef7560":"### solution 39.1","db97a59b":"## Problem 41: [Keyboard](https:\/\/codeforces.com\/contest\/474\/problem\/A)","5d468fc8":"## Problem 30: [New Password](https:\/\/codeforces.com\/contest\/770\/problem\/A)","9731f554":"### solution 11.2","e19a9aa0":"### solution 8.1","4f0953d1":"### solution 34.2 [Time Limit Exceeded]","08ca1315":"## Problem 38: Young Physicist","e0548086":"### solution 1.1","1eb40bc0":"### solution","9a5df6cf":"### solution 5.2","a7b45e0f":"### solution 22.2","d656a82f":"### solution 21.1","57baad89":"### solution 6.1","544096d9":"# Description\n\nI am here following Dr. Mostafa Saad's [Algorithmic Interviews Sheet](https:\/\/docs.google.com\/spreadsheets\/d\/1ClmoHFMqQKOHinRhrId42sbofQ0T0IyaFzZcEcVvXbU\/edit#gid=1160016643) for enhancing by problem solving skills. That sheet consists of three levels. I have solved some of level 1 problems in this Notebook.\n\nI have also inserted the code here in separate python files for submitting them on [CodeForces](https:\/\/codeforces.com\/), and other platforms I used to validate my solution. These files are found on my [Problem Solving in Python GitHub Repository](https:\/\/github.com\/bahgat-ahmed\/Problem-Solving-in-Python).\n\nYou can find here more than one solution to the same problem. The point of this is that just solving the problem on myself isn't just necessarily the best approach in terms of Time, and Space Comlexity for instance. Therefore, after solving each problem, I should see others' solutions to that same problem to see how can I solve the same problem more efficiently. In other words, I am practicing not only solving the problem, but also solving it efficiently.\n\n>In some problems there is only one solution, and that is mostly because I didn't find a better solution than the first one I submitted.","5a9fb13c":"### solution 30.1","474a6dd2":"## Problem 17: [Games](https:\/\/codeforces.com\/contest\/268\/problem\/A)","dcac8064":"### solution 37.1","d3886706":"### solution 2.2","baa5c39d":"### solution 28.3","070f0465":"### solution","c0471f77":"### solution 17.1","f6b9513e":"### solution 35.2","fa5c7e60":"## Problem 33: [Mahmoud and Longest Uncommon Subsequence](https:\/\/codeforces.com\/contest\/766\/problem\/A)","cecf4c99":"## Problem 21: Die Roll","6aa43380":"### solution 21.3","6662fc18":"### solution 1.2","2c6eab0d":"## Problem 19: Is your horseshoe on the other hoof?","11b2bd7f":"## Problem 2: [Anton and Danik](https:\/\/codeforces.com\/contest\/734\/problem\/A)","00683373":"### solution 27.1","12b90404":"## Problem 42: [The Seasonal War](https:\/\/onlinejudge.org\/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=288)","2565b170":"## Problem 1: [Vanya and Fence](http:\/\/codeforces.com\/contest\/677\/problem\/A)","b93344a1":"### solution 5.1","044acf5d":"### solution 11.1","a6f8e5aa":"## Problem 14: [Police Recruits](https:\/\/codeforces.com\/contest\/427\/problem\/A)","8e24fbb4":"### solution","1b137906":"### solution 23.2","2bdc66dc":"## Problem 34: Snacktower","4c69dc05":"### solution 8.2","e08690f9":"## Problem 22: [Shaass and Oskols](https:\/\/codeforces.com\/contest\/294\/problem\/A)","f007d373":"## Problem 3: [Bear and Big Brother](https:\/\/codeforces.com\/contest\/791\/problem\/A)","d05c07d3":"### solution 42.1 Reading from a file, and writing to a file","761ac747":"## Problem 37: [Bit++](https:\/\/codeforces.com\/contest\/282\/problem\/A)","00794a2e":"## Problem 25: [Anton and Letters](https:\/\/codeforces.com\/contest\/443\/problem\/A)","cba0b103":"### solution","1957879f":"### solution 32.1","55c77dfd":"### solution 16.1","58ee3109":"## Problem 31: [Presents](https:\/\/codeforces.com\/contest\/136\/problem\/A)","bbaf54c0":"## Problem 16: [Night at the Museum](https:\/\/codeforces.com\/contest\/731\/problem\/A)","3f6a13f1":"### solution 25.1","bf7311b5":"### solution 40.2","b229e0fa":"### solution 12.2","4a1634e7":"## Problem 43: Marcus","13ede8a7":"## Problem 26: [Way Too Long Words](https:\/\/codeforces.com\/contest\/71\/problem\/A)","6120edf2":"### solution 31.1","ee3ff86d":"## Problem 39: [Pangram](https:\/\/codeforces.com\/contest\/520\/problem\/A)","24021159":"### solution 2.1","96b2a75f":"### solution 27.2","ecfce93a":"### solution 15.1","73b1ebf7":"### solution 36.1","c6c25806":"### solution 23.1","9261a205":"### solution 28.2","7b6b1626":"### solution 9.1","5617592c":"### solution 26.2","f65c10a8":"### solution 5.3","fd99884c":"### solution 37.2","098da574":"### solution 32.2","037e339b":"## Problem 9: [Word](https:\/\/codeforces.com\/contest\/59\/problem\/A)","78f3a1ac":"### solution 13.2","2905723d":"### solution","8e08fcf1":"### solution 41.1","0c70ddaf":"## Problem 29: [Team Olympiad](https:\/\/codeforces.com\/contest\/490\/problem\/A)","1686edfc":"### solution 22.1","c80d7b9d":"## Problem 28: [Helpful Maths](https:\/\/codeforces.com\/contest\/339\/problem\/A)","e4dd75fd":"## Problem 23: [Juicer](https:\/\/codeforces.com\/contest\/709\/problem\/A)","0a427ba9":"### solution 16.2","eccd7a3f":"## Problem 10: [Word Capitalization](https:\/\/codeforces.com\/contest\/281\/problem\/A)","17f1c51e":"### solution 39.2","54db1e90":"## Problem 40: Twins","63d1469c":"## Problem 8: [Boy or Girl]","39c80b66":"### solution 30.2","6dfcd275":"## Problem 12: [Sereja and Dima](https:\/\/codeforces.com\/contest\/381\/problem\/A)","97ea7f26":"### solution 31.2","3caf4150":"### solution 35.1","8f43ed29":"## Problem 11: [Magnets](https:\/\/codeforces.com\/contest\/344\/problem\/A)","08cdf669":"### solution 29.2","3ffe93c9":"### solution 29.1","255af599":"## Problem 4: [Team](https:\/\/codeforces.com\/contest\/231\/problem\/A)","a1bc5786":"### solution 38.2","b4466b1b":"### solution 44.1","f324bb60":"### solution 15.2","cced5c31":"### solution 25.2","e0ca187a":"### solution 6.2","59103b23":"## Problem 24: Carrot Cakes","94902c76":"### solution","3154a0ff":"## Problem 36: [Next Round](https:\/\/codeforces.com\/contest\/158\/problem\/A)","94236f82":"## Problem 20: [Colorful Stones (Simplified Edition)](https:\/\/codeforces.com\/contest\/265\/problem\/A)","6e91e6e9":"### solution 26.1","e452483b":"### solution 44.2","6f581fa1":"## Problem 15: [Black Square](https:\/\/codeforces.com\/contest\/431\/problem\/A)","62685c6e":"### solution 21.2","4580896e":"## Problem 13: [Stones on the Table](https:\/\/codeforces.com\/contest\/266\/problem\/A)","ae156b45":"### solution 17.2","990145da":"### solution 13.1"}}