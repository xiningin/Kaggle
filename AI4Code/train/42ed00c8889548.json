{"cell_type":{"cfc37b91":"code","b8f703cd":"code","c8319794":"code","585e5e4f":"code","b7a7a69b":"code","045cc9d4":"code","964cd1b3":"code","5846f41a":"code","cc9eaf8c":"code","2a4d928b":"code","58629d7d":"code","bcac6ac6":"code","c80587c6":"code","ebd1c3f8":"code","5acea7bf":"code","a453a1b6":"code","a7ac6ed2":"code","bf4365dd":"code","9c21a196":"code","3b491260":"code","cd69ff33":"code","1265322a":"code","734ac6f6":"code","05f4931d":"code","4fca2cbe":"code","ecf7010f":"code","d4df201d":"code","dc90e5b4":"code","e98f3e34":"code","c1f097e1":"code","996a72a5":"code","efbec1c6":"code","d587c677":"code","48c54a92":"code","e2c24fb4":"code","30225081":"code","ebbc05c6":"code","782aad43":"code","d27d3131":"code","f2caa0a1":"code","1a447f5e":"markdown","0ba22edc":"markdown","438fa3dc":"markdown","3c280252":"markdown","6e982a36":"markdown"},"source":{"cfc37b91":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\/titanic\"))\n\n# Any results you write to the current directory are saved as output.","b8f703cd":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntrain.head()","c8319794":"test = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest.head()","585e5e4f":"train.info()","b7a7a69b":"test.info()","045cc9d4":"all = pd.concat([train, test], sort = False)\nall.info()","964cd1b3":"#Fill Missing numbers with median\nall['Age'] = all['Age'].fillna(value=all['Age'].median())\nall['Fare'] = all['Fare'].fillna(value=all['Fare'].median())","5846f41a":"all.info()","cc9eaf8c":"sns.catplot(x = 'Embarked', kind = 'count', data = all) #or all['Embarked'].value_counts()","2a4d928b":"all['Embarked'] = all['Embarked'].fillna('S')\nall.info()","58629d7d":"#Age\nall.loc[ all['Age'] <= 16, 'Age'] = 0\nall.loc[(all['Age'] > 16) & (all['Age'] <= 32), 'Age'] = 1\nall.loc[(all['Age'] > 32) & (all['Age'] <= 48), 'Age'] = 2\nall.loc[(all['Age'] > 48) & (all['Age'] <= 64), 'Age'] = 3\nall.loc[ all['Age'] > 64, 'Age'] = 4 ","bcac6ac6":"#Title\nimport re\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+\\.)', name)\n    \n    if title_search:\n        return title_search.group(1)\n    return \"\"","c80587c6":"all['Title'] = all['Name'].apply(get_title)\nall['Title'].value_counts()","ebd1c3f8":"all['Title'] = all['Title'].replace(['Capt.', 'Dr.', 'Major.', 'Rev.'], 'Officer.')\nall['Title'] = all['Title'].replace(['Lady.', 'Countess.', 'Don.', 'Sir.', 'Jonkheer.', 'Dona.'], 'Royal.')\nall['Title'] = all['Title'].replace(['Mlle.', 'Ms.'], 'Miss.')\nall['Title'] = all['Title'].replace(['Mme.'], 'Mrs.')\nall['Title'].value_counts()","5acea7bf":"#Cabin\nall['Cabin'] = all['Cabin'].fillna('Missing')\nall['Cabin'] = all['Cabin'].str[0]\nall['Cabin'].value_counts()","a453a1b6":"all.info()","a7ac6ed2":"#Family Size & Alone \nall['Family_Size'] = all['SibSp'] + all['Parch'] + 1\nall['IsAlone'] = 0\nall.loc[all['Family_Size']==1, 'IsAlone'] = 1\nall.head()","bf4365dd":"all.info()","9c21a196":"#Drop unwanted variables\nall_1 = all.drop(['Name', 'Ticket'], axis = 1)\nall_1.head()","3b491260":"all_dummies = pd.get_dummies(all_1)\nall_dummies.info()","cd69ff33":"all_train = all_dummies[all_dummies['Survived'].notna()]\nall_train.info()","1265322a":"all_test = all_dummies[all_dummies['Survived'].isna()]\nall_test.info()","734ac6f6":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(all_train.drop(['PassengerId','Survived'],axis=1), \n                                                    all_train['Survived'], test_size=0.30, \n                                                    random_state=101)","05f4931d":"from sklearn.ensemble import RandomForestClassifier","4fca2cbe":"RF_Model = RandomForestClassifier()","ecf7010f":"#from sklearn.model_selection import GridSearchCV","d4df201d":"#Using max_depth, criterion will suffice for DT Models, rest all will remain constant \n#parameters = {'n_estimators' : (10,30,50,70,90,100)\n#              , 'criterion' : ('gini', 'entropy')\n#              , 'max_depth' : (3,5,7,9,10)\n#              , 'max_features' : ('auto', 'sqrt')\n#              , 'min_samples_split' : (2,4,6)\n#              #, 'min_weight_fraction_leaf' : (0.0,0.1,0.2,0.3)\n#             }","dc90e5b4":"#RF_grid  = GridSearchCV(RandomForestClassifier(n_jobs = -1, oob_score= False), param_grid = parameters, cv = 3, verbose = True)","e98f3e34":"#RF_grid_model = RF_grid.fit(X_train, y_train)","c1f097e1":"#RF_grid_model.best_estimator_","996a72a5":"RF_Model = RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n                       criterion='gini', max_depth=7, max_features='sqrt',\n                       max_leaf_nodes=None, max_samples=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=6,\n                       min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=-1,\n                       oob_score=False, random_state=None, verbose=0,\n                       warm_start=False)","efbec1c6":"RF_Model.fit(X_train, y_train)","d587c677":"predictions = RF_Model.predict(X_test)\npredictions","48c54a92":"print(f'Test : {RF_Model.score(X_test, y_test):.3f}')\nprint(f'Train : {RF_Model.score(X_train, y_train):.3f}')","e2c24fb4":"all_test.head()","30225081":"TestForPred = all_test.drop(['PassengerId', 'Survived'], axis = 1)","ebbc05c6":"t_pred = RF_Model.predict(TestForPred).astype(int)","782aad43":"PassengerId = all_test['PassengerId']","d27d3131":"RF_Sub = pd.DataFrame({'PassengerId': PassengerId, 'Survived':t_pred })\nRF_Sub.head()","f2caa0a1":"RF_Sub.to_csv(\"RF_Class_Submission.csv\", index = False)","1a447f5e":"****Extra Features:","0ba22edc":"****Check Accuracy","438fa3dc":"****Final Predictions","3c280252":"### Build Random Forest","6e982a36":"****Train\/Test Split"}}