{"cell_type":{"1f17c274":"code","1a24035d":"code","be7018c4":"code","b3873358":"code","91ecdd39":"code","42d7375e":"code","542a8bc9":"code","7dd3c13d":"code","a0dd6a8e":"code","812e9fda":"code","42f2e451":"code","2c6f86b7":"code","38912149":"code","08951ba0":"code","ba259294":"code","cf072902":"code","6b89368c":"code","86a200fd":"code","f3705a56":"code","98381436":"code","f82ab487":"code","9eb5ab7a":"code","058f9977":"code","cef013c9":"code","627b05ae":"code","1abad88c":"code","da15b9d2":"code","bca1ba83":"code","4f61b0e9":"code","406ab425":"code","79d6a2a9":"code","9721803f":"code","7296629a":"code","bdbae402":"code","e4fb47c3":"code","1a63a0ac":"code","d31562bf":"code","10d3404c":"code","411b7cce":"markdown","040851f0":"markdown","a8e95714":"markdown","083d7b17":"markdown","835bcb33":"markdown","88b92634":"markdown","cb37e633":"markdown","acdfea4a":"markdown","6135b0c2":"markdown","15918dc7":"markdown","ffb070a6":"markdown","f28c2e86":"markdown","f4836191":"markdown","9fe47867":"markdown","46512b0a":"markdown","718d0d9b":"markdown","818d3358":"markdown","eae322d2":"markdown","83ced511":"markdown","113eca2d":"markdown","3563600e":"markdown","b124c31c":"markdown","4fa64efc":"markdown","c4d799b4":"markdown","8e9c2c8d":"markdown","702afcd8":"markdown","1dc7a9ec":"markdown","f371e49a":"markdown","3b83a857":"markdown","10f144f0":"markdown"},"source":{"1f17c274":"# Input data files are available in the read-only \"..\/input\/\" directory\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","1a24035d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt \nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom sklearn.preprocessing import MinMaxScaler\nimport plotly.express as px","be7018c4":"df = pd.read_csv('\/kaggle\/input\/visualizing-covid19-in-nepal\/Global_Mobility_Report.csv')\nprint(df.head)\nlist(df)","b3873358":"df3 = df[df['country_region'] == 'Nepal']\nprint(df3.isnull().sum())\ndf3","91ecdd39":"df3 = df3.drop(columns = ['country_region', 'country_region_code','sub_region_1', 'sub_region_2', 'metro_area', 'iso_3166_2_code', 'census_fips_code', 'place_id'])\ndf3 = df3.iloc[:-1 , :]\ndf3","42d7375e":"df3 = df3.rename(columns={\"retail_and_recreation_percent_change_from_baseline\": \"retail_recreation\", \"grocery_and_pharmacy_percent_change_from_baseline\": \"grocery_pharmacy\", \"parks_percent_change_from_baseline\": \"parks\", \"transit_stations_percent_change_from_baseline\": \"transit_stations\", \"workplaces_percent_change_from_baseline\": \"workplaces\", \"residential_percent_change_from_baseline\": \"residential\"})\ndf3['date'] = pd.to_datetime(df3.date)\ndf3 = df3.set_index('date')\ndf3.sort_index(inplace = True)\ndf3","542a8bc9":"plt.style.use('dark_background')\ndf3.plot(subplots=True, legend=True, figsize=(10,8))\nplt.show()","7dd3c13d":"!pip install mplcyberpunk \nimport mplcyberpunk\n\nplt.style.use(\"cyberpunk\")\ndf3.plot(title='Change\/in Mobility', xlabel = 'Dates', figsize=(10,8))\nmplcyberpunk.add_glow_effects()\nplt.show()","a0dd6a8e":"dfr = pd.read_csv('\/kaggle\/input\/visualizing-covid19-in-nepal\/recovery_rate.csv')\ndfr","812e9fda":"dfr = dfr[dfr['Country\/Region'] == 'Nepal']\ndfr = dfr.drop(columns = ['Lat', 'Long', 'Province\/State'])\ndfr = dfr.T\ndfr","42f2e451":"dfr = dfr.reset_index()\ndfr = dfr.iloc[1:-4 , :]\ndfr = dfr.rename(columns = {'index': 'date', 177: 'Recovery'})\ndfr['date'] = pd.to_datetime(dfr.date)\ndfr = dfr.set_index('date')\ndfr['daily_recovery'] = dfr['Recovery'].diff().fillna(0)\ndfr","2c6f86b7":"dfn1 = pd.read_csv('\/kaggle\/input\/visualizing-covid19-in-nepal\/owid-covid-data.csv')\ndfn = dfn1[dfn1['location'] == 'Nepal']\ndfn","38912149":"dfn = dfn.drop(columns = ['icu_patients', 'gdp_per_capita', 'extreme_poverty', 'cardiovasc_death_rate', 'diabetes_prevalence',\n                          'female_smokers', 'male_smokers', 'handwashing_facilities', 'hospital_beds_per_thousand',\n                          'life_expectancy', 'human_development_index', 'new_deaths_smoothed_per_million', \n                          'new_cases_smoothed', 'new_deaths_smoothed', 'iso_code', 'new_cases_smoothed_per_million', \n                          'continent', 'location', 'icu_patients_per_million', 'icu_patients_per_million', 'hosp_patients', \n                          'hosp_patients_per_million', 'weekly_icu_admissions', 'weekly_icu_admissions_per_million', \n                          'weekly_hosp_admissions', 'weekly_hosp_admissions_per_million', 'population', 'population_density',\n                          'median_age', 'aged_65_older', 'aged_70_older', 'new_vaccinations_smoothed_per_million',\n                          'new_vaccinations_smoothed', 'tests_units', 'total_vaccinations', 'people_vaccinated', \n                          'people_fully_vaccinated', 'new_vaccinations', 'new_vaccinations_smoothed', \n                          'total_vaccinations_per_hundred', 'people_vaccinated_per_hundred', \n                          'people_fully_vaccinated_per_hundred', 'new_tests_smoothed', 'new_tests_smoothed_per_thousand',\n                          'reproduction_rate'])\ndfn['date'] = pd.to_datetime(dfn.date)\ndfn = dfn.set_index('date')\ndfn.sort_index(inplace = True)\ndfn['daily_recovery'] = dfr['daily_recovery']\ndfn['recovery'] = dfr['Recovery']\ndfn = dfn.iloc[:-4 , :]\ndfn","08951ba0":"dfv = pd.read_csv('\/kaggle\/input\/visualizing-covid19-in-nepal\/Nepal_vaccine.csv')\ndfv","ba259294":"dfv = dfv.drop(columns = ['location', 'source_url', 'vaccine'])\ndfv['date'] = pd.to_datetime(dfv.date)\ndfv = dfv.set_index('date')\ndfv.sort_index(inplace = True)\ndfv","cf072902":"dff = dfn[['total_cases', 'total_tests']]\nfig = px.area(dff)\n\nfig.update_layout(legend=dict(\n    orientation=\"h\",\n    yanchor=\"bottom\",\n    y=1.02,\n    xanchor=\"right\",\n    x=1))\nfig.update_layout(\n    title_text=\"Total cases vs Total tests\"\n)\n    \nfig.update_layout(legend_title_text='')\n    \nfig.show()","6b89368c":"dff = dfn[['new_cases', 'new_tests']]\nfig = px.area(dff)\n\nfig.update_layout(legend=dict(\n    orientation=\"h\",\n    yanchor=\"bottom\",\n    y=1.02,\n    xanchor=\"right\",\n    x=1))\n\nfig.update_layout(\n    title_text=\"New cases vs New tests\"\n)\n    \nfig.update_layout(legend_title_text='')\n\nfig.show()","86a200fd":"dfv1 = dfv[['people_fully_vaccinated', 'total_vaccinations']]\nfig = px.area(dfv1)\nfig.update_layout(legend=dict(\n    orientation=\"h\",\n    yanchor=\"bottom\",\n    y=1.02,\n    xanchor=\"right\",\n    x=1))\n\nfig.update_layout(\n    title_text=\"Vaccination\"\n)\n    \nfig.update_layout(legend_title_text='')\n\nfig.show()","f3705a56":"def mobility(mobility_name, title):\n    fig = make_subplots(specs=[[{\"secondary_y\": True}]])\n\n\n    fig.add_trace(\n        go.Scatter(x = df3.index, y=df3[mobility_name], name=title),\n        row=1, col=1, secondary_y=False)\n\n    fig.add_trace(\n        go.Scatter(x = dfn.index, y=dfn['new_cases'], name=\"New Cases\"),\n        row=1, col=1, secondary_y=True,\n    )\n\n    fig.update_layout(\n        title_text=\"Change in Mobility in {} vs New Cases\".format(title)\n    )\n\n    # Set x-axis title\n    fig.update_xaxes(title_text=\"date\")\n    \n    fig.update_layout(legend=dict(\n        orientation=\"h\",\n        yanchor=\"bottom\",\n        y=1.02,\n        xanchor=\"right\",\n        x=1))\n    \n    fig.update_layout(legend_title_text='')\n    # Set y-axes titles\n    fig.update_yaxes(title_text=\"<b>percent change in mobility<\/b>\", secondary_y=False)\n    fig.update_yaxes(title_text=\"<b>new cases<\/b>\", secondary_y=True)\n\n\n    return fig.show()","98381436":"mobility('retail_recreation', 'Retail & Recreational Area')","f82ab487":"mobility('residential', 'Residential Area')","9eb5ab7a":"mobility('transit_stations', 'Transit Station')","058f9977":"mobility('parks', 'Parks')","cef013c9":"df3.loc['2021-04-12']","627b05ae":"mobility('workplaces', 'Workplaces')","1abad88c":"mobility('grocery_pharmacy', 'Grocery & Pharmacy')","da15b9d2":"fig = px.line(dfn, x=dfn.index, y=[\"daily_recovery\", 'new_cases'], title='Daily Recovery vs New Cases')\nfig.show()","bca1ba83":"dfrc = pd.DataFrame()\ndfrc['rec_vs_cas'] = dfn['daily_recovery'] - dfn['new_cases']\ndfrc[\"rec_vs_cas_count\"] = np.where(dfrc[\"rec_vs_cas\"]>0,1,0)\ndfrc.drop(dfrc.index[dfrc['rec_vs_cas'] == 0], inplace = True)\ndfrc['rec_vs_cas_count'].value_counts()\n#0 = Days when cases were higher than recovery\n#1 = Days when recovery was higher than cases","4f61b0e9":"dfm = pd.DataFrame()\ndfm['total_test'] = dfn['new_tests'].resample('M').sum()\ndfm['total_cases'] = dfn['new_cases'].resample('M').sum()\ndfm['total_deaths'] = dfn['new_deaths'].resample('M').sum()\ndfm['total_recovery'] = dfn['daily_recovery'].resample('M').sum()\ndfm","406ab425":"fig = px.bar(dfm, x=dfm.index, y=[\"total_deaths\", \"total_cases\", \"total_recovery\", \"total_test\"], title=\"Monthly Report\")\nfig.update_layout(legend=dict(\n    orientation=\"h\",\n    yanchor=\"bottom\",\n    y=1.02,\n    xanchor=\"right\",\n    x=1\n))\n\nfig.update_layout(legend_title_text='')\nfig.show()","79d6a2a9":"x = dfm.values #returns a numpy array\nmin_max_scaler = MinMaxScaler()\nx_scaled = min_max_scaler.fit_transform(x)\ndfmt = pd.DataFrame(x_scaled)\ndfmt.index = dfm.index\ndfmt = dfmt.rename(columns = {0: 'total_tests', 1: 'total_cases', 2: 'total_deaths'})\ndfmt","9721803f":"fig = px.bar(dfmt, x=dfmt.index, y=[\"total_deaths\", \"total_cases\", \"total_tests\"], title=\"Monthly Report\")\nfig.show()","7296629a":"fig = make_subplots(specs=[[{\"secondary_y\": True}]])\n\nfig.add_trace(\n    go.Scatter(x = dfn.index, y=dfn['stringency_index'], name='stringency_index'),\n    row=1, col=1, secondary_y=False)\n\nfig.add_trace(\n    go.Scatter(x = dfn.index, y=dfn['new_cases'], name=\"new_cases\"),\n    row=1, col=1, secondary_y=True,\n)\n\nfig.update_layout(\n    title_text=\"Stringency Index Vs New Cases\"\n)\n\n# Set x-axis title\nfig.update_xaxes(title_text=\"date\")\n\n# Set y-axes titles\nfig.update_yaxes(title_text=\"<b>stringency index<\/b>\", secondary_y=False)\nfig.update_yaxes(title_text=\"<b>new cases<\/b>\", secondary_y=True)\n\nfig.show()","bdbae402":"fig = make_subplots(specs=[[{\"secondary_y\": True}]])\n\nfig.add_trace(\n    go.Scatter(x = dfn.index, y=dfn['stringency_index'], name='stringency_index'),\n    row=1, col=1, secondary_y=False)\n\n\n\nfig.add_trace(\n    go.Scatter(x = df3.index, y=df3['parks'], name=\"percent change in mobility of parks\"),\n    row=1, col=1, secondary_y=True,\n)\n\nfig.update_layout(\n    title_text=\"Stringency Index Vs Mobility Change in Parks\"\n)\n\n# Set x-axis title\nfig.update_xaxes(title_text=\"date\")\n\nfig.update_layout(legend=dict(\n    orientation=\"h\",\n    yanchor=\"bottom\",\n    y=1.02,\n    xanchor=\"right\",\n    x=1))\n    \nfig.update_layout(legend_title_text='')\n\n\n# Set y-axes titles\nfig.update_yaxes(title_text=\"<b>stringency index<\/b>\", secondary_y=False)\nfig.update_yaxes(title_text=\"<b>percent change in mobility in parks<\/b>\", secondary_y=True)\n\nfig.show()","e4fb47c3":"df_main = pd.concat([df3, dfn], axis=1)\ndf_main = df_main.fillna(0)\ndf_main['case_change'] = df_main['new_cases'].diff(periods=-1)\ndf_main['death_change'] = df_main['new_deaths'].diff(periods=-1)\n","1a63a0ac":"df_main[\"case_prediction\"] = np.where(df_main[\"case_change\"]>0,0,1)\ndf_main[\"death_prediction\"] = np.where(df_main[\"death_change\"]>0,0,1)\ndf_main","d31562bf":"from sklearn.model_selection import train_test_split\nfeature_names = ['grocery_pharmacy', 'parks', 'transit_stations', 'residential', 'new_cases', 'new_deaths', 'daily_recovery']\nX = df_main[feature_names]\ny = df_main[\"case_prediction\"] #Couldn't get better accuracy while predicting cases\ny2 = df_main[\"death_prediction\"] #Will be using this\nX_train, X_test, y_train, y_test = train_test_split(X, y2, random_state=0)","10d3404c":"#Got best result (76% accuracy) on test set using Gradient Boosting Classifier.\n#Tried many algorithms, but this (76%) was best\nfrom sklearn.ensemble import GradientBoostingClassifier\nclf = GradientBoostingClassifier().fit(X_train, y_train)\ny_predict = clf.predict(X_test)\nprint('Accuracy of Gradient Boosting classifier on training set: {:.2f}'\n     .format(clf.score(X_train, y_train)))\nprint('Accuracy of Gradient Boosting classifier on test set: {:.2f}'\n     .format(clf.score(X_test, y_test)))","411b7cce":"## Feature Preprocessing","040851f0":"## Visualizing Mobility & New Cases","a8e95714":"## Reading the first Dataset","083d7b17":"## Prediction Model","835bcb33":"## Feature Preprocessing","88b92634":"## Feature Preprocessing","cb37e633":"## Importing files","acdfea4a":"## Reading second Dataset","6135b0c2":"## Visualizing Stringency Index vs New Cases","15918dc7":"## Getting Nepal Data","ffb070a6":"## Creating new dataset with monthly total","f28c2e86":"## Visualizing Scaled Monthly Report","f4836191":"## Feature Engineering","9fe47867":"## Visualizing Stringency Index vs Mobility Change in Parks","46512b0a":"## Feature Preprocessing","718d0d9b":"### Creating train & test set","818d3358":"### Feature Engineering","eae322d2":"## Visualiztion","83ced511":"## Reading Fourth Dataset","113eca2d":"## [I have written an article on what I found visualizing covid-19 in Nepal.You can click here to read it.](https:\/\/komalniraula.medium.com\/what-i-found-visualizing-covid-19-in-nepal-8d80ad56e669)\n\nThis notebook contains more visualization and analysis than what is presented in the article. I have also given prediction model here. ","3563600e":"## Reading Third Dataset","b124c31c":"## Visualizing the data","4fa64efc":"### Feature Preprocessing","c4d799b4":"## Feature Scaling Monthly Report","8e9c2c8d":"### Using Gradient boosting algorithm to predict if the death with will increase or decrease the next day","702afcd8":"## Visualizing Monthly Report","1dc7a9ec":"This is based on data up to May 31, 2021. Here are the datasets used:\n1. [Coronavirus dataset from Our World in Data](http:\/\/ourworldindata.org\/coronavirus\/country\/nepal)\n2. [Mobility dataset from Google Mobility Report](http:\/\/www.google.com\/covid19\/mobility\/)\n3. [Recovery dataset from Johns Hopkins University](http:\/\/https:\/\/github.com\/CSSEGISandData\/COVID-19)\n4. [Vaccine data from Our World in Data](http:\/\/github.com\/owid\/covid-19-data\/blob\/master\/public\/data\/vaccinations\/country_data\/Nepal.csv)","f371e49a":"## Importing Libraries","3b83a857":"## Visualizing in same graph","10f144f0":"## Number of days when recovery was higher than cases"}}