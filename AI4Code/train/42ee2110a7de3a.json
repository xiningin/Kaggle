{"cell_type":{"b48c05df":"code","9dad5c79":"code","5f8f5007":"code","29a908cb":"code","488bbf00":"code","19f2cca5":"code","6c270766":"code","f8bb26c5":"code","6b43d3bb":"code","c62eb9cb":"code","1362f0cd":"code","5fec1dc3":"code","30d03fa8":"code","6b718961":"code","93b2373d":"code","30033e24":"code","165f4ad0":"code","dbdce5d6":"code","df5bc3de":"code","261e9ed9":"code","dfb1d90a":"code","28e2cb8d":"code","5c58a45e":"code","8f326f21":"code","94f0bf07":"code","1614ad43":"code","19df8a1b":"code","c45b832a":"markdown","5f3d174e":"markdown","6d4ce7e8":"markdown","aa0a0183":"markdown","f94558d5":"markdown","a4867ea9":"markdown","602226ec":"markdown","7ee1bcb2":"markdown","5f31272d":"markdown","33884069":"markdown","61cd8045":"markdown","53683aa6":"markdown","801f74b0":"markdown","61a57434":"markdown","d3a8e6ed":"markdown","acdaa27c":"markdown","b81e0cba":"markdown","ee8c3b9f":"markdown","f45827b7":"markdown","c0b6d498":"markdown","6150a5ff":"markdown","dc661e73":"markdown","e5b2a6c7":"markdown","9810a55a":"markdown","fe7b3b09":"markdown","b04b1e57":"markdown","2fb49fae":"markdown","aef36f34":"markdown","7f889ee9":"markdown","5f4d48a6":"markdown","0a9e5b48":"markdown","a8832671":"markdown","7b6f52be":"markdown","dbdfc81d":"markdown","e2afce6f":"markdown","b0e61f48":"markdown","566971fb":"markdown","4753ff61":"markdown","e8d0f4c0":"markdown","3319deab":"markdown","a8e54a3f":"markdown","e272a979":"markdown","01ec532f":"markdown","db7e18ea":"markdown","86a96fa7":"markdown","5125719c":"markdown","6154bc97":"markdown","584e661e":"markdown","18f257f1":"markdown"},"source":{"b48c05df":"import numpy as np\nimport pandas as pd\nimport matplotlib.pylab as plt\nimport os","9dad5c79":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\n\ntrain.shape,test.shape","5f8f5007":"basement_columns = ['BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinSF1',\n                    'BsmtFinType2', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF']","29a908cb":"basement_missing_df = pd.DataFrame(columns=['train','test'], index=basement_columns)","488bbf00":"for e in basement_columns:\n    basement_missing_df.loc[e]['train'] = train[e].isna().sum()\n    basement_missing_df.loc[e]['test'] = test[e].isna().sum()","19f2cca5":"basement_missing_df","6c270766":"def draw_graph(df, variables, n_rows, n_cols):\n    fig=plt.figure(figsize=(15,50))\n    for i, var_name in enumerate(variables):\n        ax=fig.add_subplot(n_rows,n_cols,i+1)\n                \n        ingredients = df[var_name].value_counts().index\n        data = df[var_name].value_counts().values\n        \n        def func(pct, allvals):\n            total = sum(allvals)\n            val = int(round(pct*total\/100.0))\n            return \"{:.1f}%({:d})\".format(pct, val)\n\n\n        wedges, texts, autotexts = ax.pie(data, autopct=lambda pct: func(pct, data),\n                                          textprops=dict(color=\"w\"))\n        ax.legend(wedges, ingredients,\n          title=var_name,\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n        plt.setp(autotexts, size=15, weight=\"bold\")\n\n        ax.set_title(var_name, fontsize = 20)\n        ax.tick_params(axis = 'both', which = 'major', labelsize = 35)\n        ax.tick_params(axis = 'both', which = 'minor', labelsize = 35)\n        ax.set_xlabel('')\n    fig.tight_layout(rect = [0, 0.03, 1, 0.95])  # Improves appearance a bit.\n    plt.show()\n    \ndraw_graph(train, ['BsmtCond','BsmtQual'], 1, 2)","f8bb26c5":"print(\"NA (no basement) values in train set of BsmtQual:\",train['BsmtQual'].isna().sum())\nprint(\"NA (no basement) values in test set of BsmtQual :\",test['BsmtQual'].isna().sum())\nprint(\"******************************************************\")\nprint(\"NA (no basement) values in train set of BsmtCond:\",train['BsmtCond'].isna().sum())\nprint(\"NA (no basement) values in test set of BsmtCond :\",test['BsmtCond'].isna().sum())","6b43d3bb":"no_basement_train_cnt = len(train.loc[(train['BsmtCond'].isna()) & (train['BsmtQual'].isna())])\nno_basement_test_cnt = len(test.loc[(test['BsmtCond'].isna()) & (test['BsmtQual'].isna())])","c62eb9cb":"print(\"The house which have no basement in train : \",no_basement_train_cnt)\nprint(\"The house which have no basement in test  : \",no_basement_test_cnt)","1362f0cd":"test[['Id','BsmtQual','BsmtCond']].loc[(test['BsmtQual'].isna()) & (~test['BsmtCond'].isna())]","5fec1dc3":"test[['Id','BsmtQual','BsmtCond']].loc[(test['BsmtCond'].isna()) & (~test['BsmtQual'].isna())]","30d03fa8":"print(\"NA (no basement) values in train set of BsmtExposure:\",train['BsmtExposure'].isna().sum())\nprint(\"NA (no basement) values in test set of BsmtExposure :\",test['BsmtExposure'].isna().sum())","6b718961":"train[['Id','BsmtQual','BsmtCond','BsmtExposure']].loc[(train['BsmtExposure'].isna()) & (~train['BsmtQual'].isna())]","93b2373d":"train['BsmtExposure'].iloc[948] = 'No'","30033e24":"test[['Id','BsmtQual','BsmtCond','BsmtExposure']].loc[(test['BsmtExposure'].isna()) & (~test['BsmtCond'].isna()) & (~test['BsmtQual'].isna())]","165f4ad0":"test['BsmtExposure'].iloc[27] = 'No'\ntest['BsmtExposure'].iloc[888] = 'No'","dbdce5d6":"print(\"Missing value in train set of TotalBsmtSF:\",train['TotalBsmtSF'].isna().sum())\nprint(\"Missing value in test set of TotalBsmtSF :\",test['TotalBsmtSF'].isna().sum())","df5bc3de":"test[basement_columns].loc[test['TotalBsmtSF'].isna()]","261e9ed9":"test['BsmtQual'].iloc[660] = 'NA'\ntest['BsmtCond'].iloc[660] = 'NA'\ntest['BsmtExposure'].iloc[660] = 'NA'\ntest['BsmtFinType1'].iloc[660] = 'NA'\ntest['BsmtFinSF1'].iloc[660] = 0\ntest['BsmtFinType2'].iloc[660] = 'NA'\ntest['BsmtFinSF2'].iloc[660] = 0\ntest['BsmtUnfSF'].iloc[660] = 0\ntest['TotalBsmtSF'].iloc[660] =  0","dfb1d90a":"test[basement_columns].iloc[660]","28e2cb8d":"print(\"No basement in train set of TotalBsmtSF:\",(train['TotalBsmtSF']==0).sum())\nprint(\"No basement in test set of TotalBsmtSF :\",(test['TotalBsmtSF']==0).sum())","5c58a45e":"print(\"NA (no basement-type 1) houses in train set of BsmtFinType1:\",train['BsmtFinType1'].isna().sum())\nprint(\"NA (no basement- type1) houses in test set of BsmtFinType1 :\",test['BsmtFinType1'].isna().sum())\nprint(\"***************************************************\")\nprint(\"Null values in train set of BsmtFinSF1:\",train['BsmtFinSF1'].isna().sum())\nprint(\"Null values in test set of BsmtFinSF1 :\",test['BsmtFinSF1'].isna().sum())\nprint(\"****************************************************\")\nprint(\"no basement-type1 houses in train set of BsmtFinSF1:\", (train['BsmtFinSF1'] == 0).sum())\nprint(\"no basement-type1 houses in test set of BsmtFinSF1 :\",(test['BsmtFinSF1'] == 0).sum())","8f326f21":"train[basement_columns].loc[(train['BsmtFinType1'].isna()) & (train['BsmtFinSF1']!=0)]","94f0bf07":"print(\"NA (no basement - type2) houses in train set of BsmtFinType2:\",train['BsmtFinType2'].isna().sum())\nprint(\"NA (no basement -type2) houses in test set of BsmtFinType2 :\",test['BsmtFinType2'].isna().sum())\nprint(\"***************************************************\")\nprint(\"Null values in train set of BsmtFinSF2:\",train['BsmtFinSF2'].isna().sum())\nprint(\"Null values in test set of BsmtFinSF2 :\",test['BsmtFinSF2'].isna().sum())\nprint(\"****************************************************\")\nprint(\"no basement-type2 houses in train set of BsmtFinSF2:\", (train['BsmtFinSF2'] == 0).sum())\nprint(\"no basement-type2 houses in test set of BsmtFinSF2 :\",(test['BsmtFinSF2'] == 0).sum())","1614ad43":"train[basement_columns].loc[(train['BsmtFinType2'].isna()) & (train['BsmtFinSF2']!=0)]","19df8a1b":"print(\"Null values in train set of BsmtUnfSF:\",train['BsmtUnfSF'].isna().sum())\nprint(\"Null values in test set of BsmtUnfSF :\",test['BsmtUnfSF'].isna().sum())\nprint(\"****************************************************\")\nprint(\"No unfinished basement houses in train set of BsmtUnfSF:\", (train['BsmtUnfSF'] == 0).sum())\nprint(\"No unfinished basement houses in test set of BsmtUnfSF :\",(test['BsmtUnfSF'] == 0).sum())","c45b832a":"Using two feature BsmtQual and BsmtCond in train dataset, we can conclude that there are only 37 houses which have no basement. And there are only 42 houses which have no basement.\n\nBut, we got one more NA(no basement) value in BsmtExposure feature in train set.","5f3d174e":"** More to come! Stay tuned, and thanks for reading. :) **","6d4ce7e8":"Above result show that, \nthis house has NaN value in BsmtFinType2 feature however BsmtFinSF2(type2 finished area) has 479 sq.ft area.\n\nSo, it's Outlier.","aa0a0183":"let's see the missing value (or NA value) of column BsmtQual and BsmtCond.","f94558d5":"## Let's count the house which have no basement in train & test","a4867ea9":"No helpful information found!!","602226ec":"**BsmtQual: Evaluates the height of the basement\n\n       Ex\tExcellent (100+ inches)\t\n       Gd\tGood (90-99 inches)\n       TA\tTypical (80-89 inches)\n       Fa\tFair (70-79 inches)\n       Po\tPoor (<70 inches\n       NA\tNo Basement\n\t\t\nBsmtCond: Evaluates the general condition of the basement\n\n       Ex\tExcellent\n       Gd\tGood\n       TA\tTypical - slight dampness allowed\n       Fa\tFair - dampness or some cracking or settling\n       Po\tPoor - Severe cracking, settling, or wetness\n       NA\tNo Basement","7ee1bcb2":"BsmtFinType2: Rating of basement finished area (if multiple types)\n\n       GLQ\tGood Living Quarters\n       ALQ\tAverage Living Quarters\n       BLQ\tBelow Average Living Quarters\t\n       Rec\tAverage Rec Room\n       LwQ\tLow Quality\n       Unf\tUnfinshed\n       NA\tNo Basement","5f31272d":"No Outlier..","33884069":"Let's check any missing value present in TotalBsmtSF feature","61cd8045":"**Data Cleaning**","53683aa6":"BsmtQual: Evaluates the height of the basement\n\t\nBsmtCond: Evaluates the general condition of the basement\n\t\nBsmtExposure: Refers to walkout or garden level walls\n\t\nBsmtFinType1: Rating of basement finished area\n\t\t\nBsmtFinSF1: Type 1 finished square feet\n\nBsmtFinType2: Rating of basement finished area (if multiple types)\n\nBsmtFinSF2: Type 2 finished square feet\n\nBsmtUnfSF: Unfinished square feet of basement area\n\nTotalBsmtSF: Total square feet of basement area","801f74b0":"Ohh!!\ntwo wrong missing value detected in testdata in column BsmtExposure.\n\nLet's fill empty value to 'No' as No Exposure","61a57434":"# Great!! one more outlier detected in train & test","d3a8e6ed":"interesting!! one missing value found in test data. Let's find it","acdaa27c":"Here, is the description of the basement related columns","b81e0cba":"Great.. No Outlier.\nThis feature TotalBsmtSF indicate the same number of houses with no basement.","ee8c3b9f":"Let's see the house which indicate basement in BsmtCond feature but indicate no basement in BsmtQual feature.","f45827b7":"As described in data description file, these ['BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1','BsmtFinType2'] columns contain NA values which indicate No Basement.\n\nNA  --> No Basement","c0b6d498":"Let's see the distribution of BsmtQual and BsmtCond feature.","6150a5ff":"Outlier Fetected!!!\n\nNow, Our task is best imputation for these outlier. ","dc661e73":"Let's fill the features of this house with appropriate values","e5b2a6c7":"Let's check the houses who have zero basement area.\n\n0 basement area ---> means \"no basement\" right?","9810a55a":"Data Cleaning plays a significant role in machine learning. Data Cleaning is a process of removing or modifying unnecessary data like redundant data, incomplete information, irrelevant data from a dataset. These type of data harm to a machine learning algorithm. So, It\u2019s better to clean these data to make it better using several techniques.\u00a0\n\nData Cleaning is not just detecting the bad data and removing it from the dataset, but also correcting the bad data and get better results. Data Correcting is itself is a very challenging task. The main goal of the Data Cleaning is to make data standardize and consistent to allow Machine Learning algorithm to analyze data easily.","fe7b3b09":"Let's Load Package","b04b1e57":"## Let's check other columns related to basements.\n## Next Fetaure : BsmtExposure\n","2fb49fae":"Analysis of basement related features is completed. There is also such kind of ambiguities preset in Garage related features. Next will do an analysis of Garage related features. ","aef36f34":"# Next Feature BsmtUnfSF: Unfinished square feet of basement area","7f889ee9":"## Let's see all basement releated information and find outlier","5f4d48a6":"In this kernel, I have demonstrated how to find noisy data from the dataset.","0a9e5b48":"## Analysis","a8832671":"Let's check outlier!!\n\nLet's see the houses which doesn't have basement-type1 and have area for basement-type1.","7b6f52be":"Let's check outlier!!\n\nLet's see the houses which doesn't have basement-type2 and have area for basement-type2.\n","dbdfc81d":"BsmtFinType1: Rating of basement finished area\n\n       GLQ\tGood Living Quarters\n       ALQ\tAverage Living Quarters\n       BLQ\tBelow Average Living Quarters\t\n       Rec\tAverage Rec Room\n       LwQ\tLow Quality\n       Unf\tUnfinshed\n       NA\tNo Basement","e2afce6f":"BsmtFinSF1: Type 1 finished square feet\n\nO square feet ---> means no basement-type1 finished area","b0e61f48":"Let's check in test data.. Is their any outlier exist in BsmtExposure feature in testdata?\n\nLet's see the house in test data which indicate basement in BsmtQual and BsmtCond features, but indicate no basement in BsmtExposure feature.","566971fb":"## Next Feature: TotalBsmtSF (Total square feet of basement area)","4753ff61":"In train data, columns BsmtQual and BsmtCond both have same number of NA (no basement) values.\nbut, test data have one more NA (no basement) value in BsmtCond column then BsmtQual.\n\nIn test data...BsmtQual feature says , there are only 44 houses with no basement, and\nBsmtCond feature says, there are only 45 houses with no basement.\n\nSo here is the conflict with the data. So we have to resolve this conflict.","e8d0f4c0":"Let's see the house in train data which indicate basement in BsmtQual and BsmtCond features, but indicate no basement in BsmtExposure feature.","3319deab":"BsmtExposure: Refers to walkout or garden level walls\n\n       Gd\tGood Exposure\n       Av\tAverage Exposure (split levels or foyers typically score average or above)\t\n       Mn\tMimimum Exposure\n       No\tNo Exposure\n       NA\tNo Basement","a8e54a3f":"# Next Feature: BsmtFinType1  & BsmtFinSF1","e272a979":"Ooh..It's not possible. \nwhat you think this house has basement or not? If it has basement, NaN value not possible for BsmtExposure feature.\n\nWhat's best value you are going to substitute to this outlier?\n\nLet's consider empty value to No Exposure.","01ec532f":"# Next Feature : BsmtFinType2 & BsmtFinSF2","db7e18ea":"Here, there should be some value in BsmtCond column instead of NaN.\nSo, these three rows are outlier.","86a96fa7":"\nIf you find this kernel helpful, please upvote it. ","5125719c":"Here, there should be some value in BsmtQual column instead of NaN.\nSo, these 2 rows are outlier.","6154bc97":"Let's see the house which indicate basement in BsmtQual feature, but indicate no basement in BsmtCond feature.","584e661e":"BsmtFinSF2: Type 2 finished square feet\n\nO square feet ---> means no basement-type2 finished area","18f257f1":"Great.. This house has no basemant as basement related each feature contain null values."}}