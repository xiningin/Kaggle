{"cell_type":{"11ae0013":"code","b4ea3800":"code","047fc19a":"code","28da6909":"code","2ef4bac8":"code","13163faa":"code","cc806406":"code","496fc41c":"code","62957f0e":"code","014ac811":"code","5723fdf9":"code","3d70cafe":"code","55295968":"code","15a143b7":"code","5499d412":"code","7b3ac85b":"code","7b7bb17d":"code","b738b8b7":"markdown","545dee66":"markdown","e4043c2f":"markdown","b42785b2":"markdown","5bc568a5":"markdown","daaca135":"markdown","50db6455":"markdown","cd6d2626":"markdown","08a5e180":"markdown","49f09c1d":"markdown","6d431cc1":"markdown","9b360943":"markdown","d25d3b0a":"markdown"},"source":{"11ae0013":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b4ea3800":"import pandas as pd\nimport numpy as np\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport plotly.offline as py\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport seaborn as sns\ncolors = [\"#121212\",\"#CF673A\",\"#E4C56F\",\"#97A37B\",\"#BABABA\",\"#E8DCCC\"]\n#sns.palplot(sns.color_palette(colors))","047fc19a":"df = pd.read_csv(\"\/kaggle\/input\/kaggle-survey-2021\/kaggle_survey_2021_responses.csv\")\ndf = df[1:]\ndf.head()","28da6909":"df.info()","2ef4bac8":"plt.rcParams[\"axes.grid\"] = True\nplt.rcParams[\"grid.color\"] = colors[3]\nplt.rcParams[\"grid.alpha\"] = 0.5\nplt.rcParams[\"grid.linestyle\"] = '--'","13163faa":"plt.rcParams['figure.figsize'] = (16,9)\nplt.rcParams['axes.edgecolor'] = 'black'\nplt.rcParams['axes.linewidth'] = 1.5\nplt.rcParams['figure.frameon'] = True\nplt.rcParams['axes.spines.top'] = False\nplt.rcParams['axes.spines.right'] = False\nplt.rcParams[\"font.family\"] = \"monospace\"","cc806406":"sns.countplot(x = df['Q1'].sort_values(),\n              color=colors[2],\n              edgecolor='white',\n              linewidth=1.5,\n              saturation=1.5)\n\nplt.ylabel('Count', weight='semibold', fontname = 'Georgia')\nplt.xlabel('Age Group', weight='semibold', fontname = 'Georgia')\nplt.tick_params(axis='x', which='major', labelsize=10)\n\nplt.suptitle('Age Distribution', fontname = 'Georgia', weight='bold')\nplt.show()","496fc41c":"import plotly.express as px\n\npie_col = [\"#CF673A\",\"#E4C56F\",\"#97A37B\",\"#BABABA\",\"#E8DCCC\",\"#1274A1\"]\n\nfig = px.pie(values= df['Q2'].value_counts().values, names= df['Q2'].value_counts().index)\n\nfig.update_traces(hoverinfo='label+percent',\n                  textinfo='value',\n                  textfont_size=20,\n                  marker=dict(colors=pie_col,\n                              line=dict(color='#000000', width=1)))\nfig.show()","62957f0e":"scale =[[0, '#E4C56F'],\n             [0.5,'#455C4F'],\n             [1.0, '#CF673A']]\n\n\nsettings = [ dict(\n        type = 'choropleth',\n        autocolorscale = False,\n        colorscale = scale,\n        showscale = True,\n        locations = df.Q3.value_counts().index,\n        z = df.Q3.value_counts().values,\n        locationmode = 'country names',\n        text = df.Q3.value_counts().index,\n        marker = dict(\n            line = dict(color = '#E4C56F', width = 0.5)),\n            colorbar = dict(autotick = True, tickprefix = '', \n            title = 'Participants')\n            )\n       ]\n\nlayout = dict(\n    title = 'Number of People Participated in Survey',\n    geo = dict(\n        showframe = True,\n        showocean = True,\n        oceancolor = '#1274A1',\n        projection = dict(\n        type = 'orthographic',\n            rotation = dict(\n                    lon = 60,\n                    lat = 10),\n        ),\n        lonaxis =  dict(\n                showgrid = False,\n                gridcolor = '#6e6d6d'\n            ),\n        lataxis = dict(\n                showgrid = False,\n                gridcolor = '#6e6d6d'\n                )\n            ),\n        )\nfig = dict(data=settings, layout=layout)\npy.iplot(fig, validate=False, filename='worldmap')","014ac811":"from textwrap import wrap\n\nA = sns.countplot(x= df['Q4'],\n              color=colors[2],\n              edgecolor='white',\n              linewidth=1.5,\n              saturation=1.5)\n\nlabels = [ '\\n'.join(wrap(l, 12)) for l in df['Q4'].unique()]\n\nplt.ylabel('Count', weight='semibold', fontname = 'Georgia')\nplt.xlabel('Education', weight='semibold', fontname = 'Georgia')\n\nplt.suptitle('Formal Education', fontname = 'Georgia', weight='bold')\n\nplt.tick_params(axis='x', which='major', labelsize=10)\n\nA.set_xticklabels(labels, fontsize=10)\n\nplt.show()","5723fdf9":"import plotly.graph_objs as go\n\nedu = df['Q5'].value_counts()\n\ntrace = go.Scatter(\n    x=edu.index,\n    y=edu.values,\n    mode='markers',\n    marker=dict(\n        sizemode = 'diameter',\n        sizeref = 30,\n        size = edu.values,\n        color = edu.values,\n        colorscale='Fall',\n        showscale=True\n    ),\n)\n\nlayout = go.Layout(\n    title='Current Role'\n)\n\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename=\"Current Role\")","3d70cafe":"import plotly.graph_objs as go\n\nedu = df['Q6'].value_counts()\n\ntrace = go.Scatter(\n    x=edu.index,\n    y=edu.values,\n    mode='markers',\n    marker=dict(\n        sizemode = 'diameter',\n        sizeref = 30,\n        size = edu.values,\n        #color = np.random.randn(500), #set color equal to a variable\n        color = edu.values,\n        colorscale='Fall',\n        showscale=True\n    ),\n)\n\nlayout = go.Layout(\n    title='Coding Experience'\n)\n\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename=\"LearningDataScience\")","55295968":"q7 = df[['Q7_Part_1', 'Q7_Part_2', 'Q7_Part_3', 'Q7_Part_4', 'Q7_Part_5', 'Q7_Part_6', 'Q7_Part_7', 'Q7_Part_8', 'Q7_Part_9', 'Q7_Part_10','Q7_Part_11','Q7_Part_12', 'Q7_OTHER']]\n\nq7.columns = ['Python', 'R', 'SQL', 'C', 'C++', 'Java', 'Javascript', 'Julia', 'Swift', 'Bash', 'MATLAB', 'None', 'Other']\n\nq7.count().sort_values(ascending=True).plot(kind='barh',color=colors[2])\n\n\nplt.xlabel('Count', weight='semibold', fontname = 'Georgia')\nplt.ylabel('Languages', weight='semibold', fontname = 'Georgia')\nplt.suptitle('Programming on Regular Basis', fontname = 'Georgia', weight='bold')\n\n\nplt.show()","15a143b7":"A = sns.countplot(x= df['Q8'],\n              color=colors[2],\n              edgecolor='white',\n              linewidth=1.5,\n              saturation=1.5)\n\nplt.ylabel('Count', weight='semibold', fontname = 'Georgia')\nplt.xlabel('Languages', weight='semibold', fontname = 'Georgia')\nplt.suptitle('Programming Language Recommended', fontname = 'Georgia', weight='bold')\n\n\n\nplt.show()","5499d412":"q9 = df[['Q9_Part_1',\n         'Q9_Part_2',\n        'Q9_Part_3',\n        'Q9_Part_4',\n         'Q9_Part_5',\n        'Q9_Part_6',\n         'Q9_Part_7',\n         'Q9_Part_8',\n         'Q9_Part_9',\n         'Q9_Part_10',\n         'Q9_Part_11',\n         'Q9_Part_12',\n         'Q9_OTHER']]\n\nq9.columns = ['Jupyter (JupyterLab, Jupyter Notebooks, etc)',\n              ' RStudio',\n              'Visual Studio',\n              'Visual Studio Code (VSCode)',\n              'PyCharm',\n              'Spyder',\n             'Notepad++',\n              'Sublime Text',\n              'Vim \/ Emacs',\n              'MATLAB',\n              'Jupyter Notebook',\n              'None',\n              'Other']\n\nq9.count().sort_values().plot(kind='barh',color=colors[2])\n\n\nplt.xlabel('Count', weight='semibold', fontname = 'Georgia')\nplt.ylabel('IDE', weight='semibold', fontname = 'Georgia')\nplt.suptitle('IDE on Regular Basis', fontname = 'Georgia', weight='bold')\n\n\nplt.show()","7b3ac85b":"q10 = df[['Q10_Part_1',\n         'Q10_Part_2',\n        'Q10_Part_3',\n        'Q10_Part_4',\n         'Q10_Part_5',\n        'Q10_Part_6',\n         'Q10_Part_7',\n         'Q10_Part_8',\n         'Q10_Part_9',\n         'Q10_Part_10',\n         'Q10_Part_11',\n         'Q10_Part_12',\n         'Q10_Part_13',\n         'Q10_Part_14',\n         'Q10_Part_15',\n         'Q10_Part_16',\n         'Q10_OTHER']]\n\nq10.columns = ['Kaggle Notebooks',\n              'Colab Notebooks',\n              'Azure Notebooks',\n              'Paperspace \/ Gradient',\n              'Binder \/ JupyterHub',\n              'Code Ocean',\n             'IBM Watson Studio',\n              'Amazon Sagemaker Studio Notebooks',\n              'Amazon EMR Notebooks',\n              'Google Cloud Notebooks (AI Platform \/ Vertex AI)',\n              'Google Cloud Datalab',\n              'Databricks Collaborative Notebooks',\n              'Zeppelin \/ Zepl Notebooks',\n              'Deepnote Notebooks',\n              'Observable Notebooks',\n               'None',\n               'Other']\n\nq10.count().sort_values().plot(kind='barh',color=colors[2])\n\n\nplt.xlabel('Count', weight='semibold', fontname = 'Georgia')\nplt.ylabel('Notebooks', weight='semibold', fontname = 'Georgia')\nplt.suptitle('Notebooks', fontname = 'Georgia', weight='bold')\n\n\nplt.show()","7b7bb17d":"# IMPORTING THE LIBRARIES\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\nsns.set(color_codes=True)\nimport matplotlib.pyplot as plt\nimport altair as alt\nfrom sklearn import datasets\n%matplotlib inline\n\nfrom wordcloud import WordCloud\n\nimport folium\nfrom folium.plugins import MarkerCluster\nfrom geopy.geocoders import Nominatim\n\nimport warnings\nwarnings.filterwarnings( 'ignore' )","b738b8b7":"# Gender Distribution","545dee66":"# Programming Language Recommended","e4043c2f":"# DE on Regular Basis","b42785b2":"# Current Role****","5bc568a5":"**Hey! It's a great opportunity to get involved in the best and coolest community of Data Scientists, Statisticians, Coders, and Creatives. I look up to many people here and learned a lot in the past few months and want to get involved in the most creative competition of Kaggle's 5th Survey.\n\nI will try to do my best here with creativity and analysis. I am working on ideas on how I am going to tell the story, but I started with my favorite season of the year autumn so my colors are inspired by it. I will keep updating the notebook with new Ideas and hopefully will complete it before submission.\n\nLet's get started and Enjoy!**","daaca135":"# Level of Formal Education","50db6455":"# Coding Experience","cd6d2626":"# Countries Participated","08a5e180":"**About Competition\n\ntell a data story about a subset of the data science community represented in this survey, through a combination of both narrative text and data exploration. A \u201cstory\u201d could be defined any number of ways, and that\u2019s deliberate. The challenge is to deeply explore (through data) the impact, priorities, or concerns of a specific group of data science and machine learning practitioners. That group can be defined in the macro (for example: anyone who does most of their coding in Python) or the micro (for example: female data science students studying machine learning in masters programs).\n\nThis is an opportunity to be creative and tell the story of a community you identify with or are passionate about!\n**","49f09c1d":"#  Age Distribution","6d431cc1":"# Use of Notebooks of Regular Basis","9b360943":"Programming on Regular Basis","d25d3b0a":"# Exploratory Data Analysis"}}