{"cell_type":{"7a96bee3":"code","b7120b00":"code","779a88db":"code","042291ac":"code","2bf29682":"code","210b635e":"code","94a8ef70":"code","88d72fc7":"code","e275494c":"code","2915cb19":"code","99625c2b":"code","581d1181":"code","241daf62":"code","ea197a2a":"code","f4444e37":"code","18b0cc18":"code","27849c3b":"code","806032fe":"code","2c6a2c74":"code","d8450c12":"code","8ccc11e0":"code","2be7187b":"code","935a2f3d":"code","0c4cdc7b":"code","72f63177":"code","cba6c2c1":"code","451bf596":"code","0392a275":"code","ed854e86":"code","98083082":"code","2da7abf6":"code","08c423cd":"markdown","cb02f888":"markdown","74a38c95":"markdown","59882a0f":"markdown","27568275":"markdown","2336d59d":"markdown","e02326c3":"markdown","3571fb9d":"markdown","023e3951":"markdown"},"source":{"7a96bee3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b7120b00":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")\n\ncars = pd.read_csv(\"\/kaggle\/input\/cars-dataset-audi-bmw-ford-hyundai-skoda-vw\/cars_dataset.csv\")\ncars.head()","779a88db":"cars.isna().any()","042291ac":"cars.hist(figsize=(12, 9))\nplt.show()","2bf29682":"plt.figure(figsize=(8, 6))\ncorrelations = cars.corr().round(2)\nmask = np.triu(np.ones_like(correlations))\nsns.heatmap(data=correlations, mask=mask, square=True, linewidths=0.5, annot=True)\nplt.show()","210b635e":"from collections import Counter\n\nprint(Counter(cars[\"Make\"]))\nprint(Counter((\"_\".join(model) for model in zip(cars[\"Make\"].to_list(), cars[\"model\"].to_list()))))\nprint(Counter(cars[\"transmission\"]))\nprint(Counter(cars[\"fuelType\"]))","94a8ef70":"plt.figure(figsize=(12, 10))\nplt.subplot(3, 2, 1)\nplt.scatter(cars[\"year\"], cars[\"price\"])\nplt.title(\"price vs year\")\nplt.subplot(3, 2, 2)\nplt.scatter(cars[\"mileage\"], cars[\"price\"])\nplt.title(\"price vs mileage\")\nplt.subplot(3, 2, 3)\nplt.scatter(cars[\"tax\"], cars[\"price\"])\nplt.title(\"price vs tax\")\nplt.subplot(3, 2, 4)\nplt.scatter(cars[\"mpg\"], cars[\"price\"])\nplt.title(\"price vs mpg\")\nplt.subplot(3, 2, 5)\nplt.scatter(cars[\"engineSize\"], cars[\"price\"])\nplt.title(\"price vs enginSize\")\nplt.show()","88d72fc7":"cars[cars[\"mpg\"] > 400]","e275494c":"plt.figure(figsize=(12, 4.5))\nsns.violinplot(x=\"Make\", y=\"price\", data=cars)\nplt.show()","2915cb19":"plt.figure(figsize=(12, 4.5))\nplt.subplot(1,2,1)\nsns.violinplot(x=\"transmission\", y=\"price\", data=cars)\nplt.subplot(1,2,2)\nsns.violinplot(x=\"fuelType\", y=\"price\", data=cars)\nplt.show()","99625c2b":"cars.drop(columns=[\"mpg\", \"model\"], inplace=True)","581d1181":"cars[\"log_price\"] = cars[\"price\"].apply(np.log)\ncars[\"log_timelength\"] = cars[\"year\"].apply(lambda x: np.log(2022 - x))\ncars[\"log_mileage\"] = cars[\"mileage\"].apply(np.log)\n\ncars[[\"log_price\", \"log_timelength\", \"log_mileage\"]].hist(figsize=(12, 9))\nplt.show()","241daf62":"plt.figure(figsize=(12, 9))\nplt.subplot(2, 2, 1)\nplt.scatter(cars[\"log_timelength\"], cars[\"log_price\"])\nplt.title(\"log(price) vs log(2022 - year)\")\nplt.subplot(2, 2, 2)\nplt.scatter(cars[\"log_mileage\"], cars[\"log_price\"])\nplt.title(\"log(price) vs log(mileage)\")\nplt.subplot(2, 2, 3)\nplt.scatter(cars[\"tax\"], cars[\"log_price\"])\nplt.title(\"log(price) vs tax\")\nplt.subplot(2, 2, 4)\nplt.scatter(cars[\"engineSize\"], cars[\"log_price\"])\nplt.title(\"log(price) vs engineSize\")\nplt.show()","ea197a2a":"plt.show()\nplt.figure(figsize=(8, 6))\ncorrelations = cars[[\"log_price\", \"log_timelength\", \"log_mileage\", \"tax\", \"engineSize\"]].corr().round(2)\nmask = np.triu(np.ones_like(correlations))\nsns.heatmap(data=correlations, mask=mask, square=True, linewidths=0.5, annot=True)\nplt.show()","f4444e37":"dummy_Make = pd.get_dummies(cars[\"Make\"], prefix=\"Make\")\ndummy_transmission = pd.get_dummies(cars[\"transmission\"], prefix=\"transmission\")\ndummy_fuel = pd.get_dummies(cars[\"fuelType\"], prefix=\"fuel\")\ncars_new = cars.drop(columns=[\"Make\", \"transmission\", \"fuelType\", \"price\", \"year\", \"mileage\"]) \\\n  .join(dummy_Make.iloc[:, 1:]) \\\n  .join(dummy_transmission.drop(columns=[\"transmission_Other\"])) \\\n  .join(dummy_fuel.drop(columns=[\"fuel_Other\"]))\ncars_new.head()","18b0cc18":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score\n\nX = cars_new.drop(columns=\"log_price\")\ny = cars_new[\"log_price\"]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=12345)","27849c3b":"from sklearn.linear_model import LinearRegression\n\nlr = LinearRegression()\nlr.fit(X_train, y_train)\n\ncoef = pd.Series(lr.coef_, index=X.columns).sort_values(ascending=False)\nplt.figure(figsize=(8, 6))\nplt.bar(coef.index, coef)\nplt.grid()\nplt.title(\"Coefficients\")\nplt.xticks(rotation=-90)\nplt.show()","806032fe":"y_pred = lr.predict(X_test)\nr2_score(np.exp(y_test), np.exp(y_pred))","2c6a2c74":"from sklearn.linear_model import Lasso\n\nalphas = np.linspace(0.00005, 0.005, 100)\nr2s = []\nfor alpha in alphas:\n    lasso = Lasso(alpha=alpha)\n    lasso.fit(X_train, y_train)\n    y_pred = lasso.predict(X_test)\n    r2s.append(r2_score(np.exp(y_test), np.exp(y_pred)))\n\ni = np.argmax(r2s)\nplt.figure(figsize=(8, 6))\nplt.plot(alphas, r2s)\nplt.plot([alphas[i]], r2s[i], \"ro\")\nplt.grid()\nplt.title(\"R2 vs alpha\")\nplt.show()","d8450c12":"print(\"alpha used:\", alphas[i])\nlasso = Lasso(alpha=alphas[i])\nlasso.fit(X_train, y_train)\n\ncoef = pd.Series(lasso.coef_, index=X.columns)\nprint(\"Features dropped:\", coef[coef == 0.0].index.to_list())\ncoef = coef[coef != 0.0].sort_values(ascending=False)\nplt.figure(figsize=(8, 6))\nplt.bar(coef.index, coef)\nplt.grid()\nplt.title(\"Coefficients\")\nplt.xticks(rotation=-90)\nplt.show()","8ccc11e0":"y_pred = lasso.predict(X_test)\nr2_score(np.exp(y_test), np.exp(y_pred))","2be7187b":"from sklearn.ensemble import RandomForestRegressor\n\nrf = RandomForestRegressor(random_state=12345)\nrf.fit(X_train, y_train)\n\nimportance = pd.Series(rf.feature_importances_, index=X.columns) \\\n  .sort_values(ascending=False)\nplt.figure(figsize=(8, 6))\nplt.bar(importance.index, importance)\nplt.grid()\nplt.title(\"Feature importances\")\nplt.xticks(rotation=-90)\nplt.show()","935a2f3d":"y_pred = rf.predict(X_test)\nr2_score(np.exp(y_test), np.exp(y_pred))","0c4cdc7b":"rf = RandomForestRegressor(ccp_alpha=0.001, random_state=12345)\nrf.fit(X_train, y_train)\n\ny_pred = rf.predict(X_test)\nr2_score(np.exp(y_test), np.exp(y_pred))","72f63177":"rf = RandomForestRegressor(n_estimators=500, random_state=12345)\nrf.fit(X_train, y_train)\n\ny_pred = rf.predict(X_test)\nr2_score(np.exp(y_test), np.exp(y_pred))","cba6c2c1":"rf = RandomForestRegressor(n_estimators=1000, random_state=12345)\nrf.fit(X_train, y_train)\n\ny_pred = rf.predict(X_test)\nr2_score(np.exp(y_test), np.exp(y_pred))","451bf596":"import torch\nimport torch.nn as nn\nimport torch.nn.functional as F","0392a275":"class price_prediction(nn.Module):\n    def __init__(self):\n        super(price_prediction, self).__init__()\n        self.fc1 = nn.Linear(17, 20)\n        self.fc2 = nn.Linear(20, 50)\n        self.fc3 = nn.Linear(50, 20)\n        self.fc4 = nn.Linear(20, 1)\n    def forward(self, x):\n        x = F.leaky_relu(self.fc1(x))\n        x = F.leaky_relu(self.fc2(x))\n        x = F.leaky_relu(self.fc3(x))\n        return self.fc4(x)","ed854e86":"X_train_tensor = torch.tensor(X_train.values, dtype = torch.float)\ny_train_tensor = torch.tensor(y_train.values.reshape(-1, 1), dtype = torch.float)\nX_test_tensor = torch.tensor(X_test.values, dtype = torch.float)\ny_test_tensor = torch.tensor(y_test.values.reshape(-1, 1), dtype = torch.float)","98083082":"from tqdm.notebook import tqdm\n\nnet = price_prediction()\noptimizer = torch.optim.Adam(net.parameters(), lr=0.01)\ncriterion = nn.MSELoss()\n\nnepochs = 3000\ntrain_loss, test_loss = [], []\nfor epoch in tqdm(range(nepochs)):\n    pass\n    optimizer.zero_grad()\n    output = net(X_train_tensor)\n    loss = criterion(output, y_train_tensor)\n    loss.backward()\n    optimizer.step()\n    train_loss.append(loss.item())\n    test_loss.append(criterion(net(X_test_tensor), y_test_tensor).item())\n    if epoch % 200 == 0:\n        print(\"Epoch:\", epoch, \", Loss:\", loss.item())\n\nplt.figure(figsize=(8, 6))\ntrain_plot, = plt.plot(train_loss)\ntest_plot, = plt.plot(test_loss)\nplt.legend(handles=[train_plot, test_plot], labels=[\"Training\", \"Testing\"])\nplt.grid()\nplt.show()","2da7abf6":"y_pred = net(X_test_tensor).detach().numpy()\nr2_score(y_test, y_pred)","08c423cd":"# Preprocessing and Feature Engineering\n\"model\" varies too much and \"mpg\" makes no sence for electric and hybrid cars, drop these columns:","cb02f888":"## Advanced model: Neural Networks","74a38c95":"# Load dataset and EDA","59882a0f":"use log-transformation to make the data not so skewed:","27568275":"# Model Selection","2336d59d":"## More exploration: Random Forest regression\nReference: https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.ensemble.RandomForestRegressor.html","e02326c3":"Convert categorical attributes to dummies:","3571fb9d":"## Optimization: Lasso linear regression (variable selection)\nReference: https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.Lasso.html","023e3951":"## Base model: Simple multiple linear regression\nReference: https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.LinearRegression.html"}}