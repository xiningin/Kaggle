{"cell_type":{"6fbb5ed5":"code","e5da24e6":"code","7ead091b":"code","e17bce8a":"code","93f1ca6e":"code","f22d0d5f":"code","ab83fb38":"code","f866bdab":"code","51c7af68":"code","4b4abbe1":"code","17b7847e":"code","0b5e8372":"code","e441218c":"code","7a403f07":"code","2eac1468":"code","8defae4a":"code","7159d0d7":"code","9a7c422c":"code","919d462d":"code","c8cad482":"code","6ba68536":"code","73f0fa20":"code","4700b32c":"code","fec95234":"code","1d1135ec":"code","462024d3":"code","206f7bb0":"code","3c147bd9":"code","0e8715ad":"code","ac6a74fd":"code","f70879a3":"code","b86226ff":"code","2eae19dd":"code","9ada4f28":"code","a884e74d":"code","3f927731":"code","36df4957":"code","334f6c79":"code","14e6ce46":"code","3cf74b8b":"code","13170eaa":"code","13904b14":"code","89aaf141":"code","3fcf1c75":"code","4eaa266c":"markdown","fcceb195":"markdown","c8ca6f9c":"markdown","21a581af":"markdown","991d7ad7":"markdown","53ae0dba":"markdown","776e7b23":"markdown","da76bf80":"markdown","6d5167a1":"markdown","d72e9cd9":"markdown","c010a37c":"markdown","18086e11":"markdown","622eafbb":"markdown","cb7525ff":"markdown","7ee8d516":"markdown","e6c96d07":"markdown","44c3129a":"markdown","2fffaaf8":"markdown","2e62ed8e":"markdown","48a603ac":"markdown","596b0a44":"markdown","4cba7172":"markdown","357c38dc":"markdown","8650a615":"markdown","fbb3b341":"markdown","41b0f0ad":"markdown","e39c606e":"markdown","59630fa2":"markdown","04a12911":"markdown","da12b6b7":"markdown","679c0edd":"markdown","fe72ae2a":"markdown","d396729f":"markdown","0d92eeb1":"markdown","424cdb65":"markdown","48328808":"markdown","31d880b1":"markdown","f8328d32":"markdown","ce1eac86":"markdown","1104d471":"markdown","dab8444f":"markdown","e2b5d09f":"markdown","915bff07":"markdown","f1b8d489":"markdown","71ec751d":"markdown","62be55d5":"markdown","2c76a32a":"markdown","cf7f6dbc":"markdown","788ae310":"markdown","f9356db0":"markdown","6843972d":"markdown","dcdfe11e":"markdown","f9076f95":"markdown","2542ce87":"markdown","3a52abba":"markdown","7fec1d5e":"markdown","4fb55007":"markdown","0a1e52e2":"markdown","17d150ac":"markdown","00a5eb81":"markdown","23b9f0be":"markdown","8c2290a4":"markdown","76b6a91a":"markdown","08538787":"markdown","5d22f000":"markdown"},"source":{"6fbb5ed5":"import numpy as np  # useful for many scientific computing in Python\nimport pandas as pd # primary data structure library","e5da24e6":"from __future__ import print_function # adds compatibility to python 2","7ead091b":"# install xlrd\n!pip install xlrd\nimport xlrd\nprint('xlrd installed!')","e17bce8a":"df_can = pd.read_excel('https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/DV0101EN\/labs\/Data_Files\/Canada.xlsx',\n                       sheet_name='Canada by Citizenship',\n                       skiprows=range(20),\n                       skipfooter=2)\n\n\nprint ('Data read into a pandas dataframe!')","93f1ca6e":"df_can.head()\n# tip: You can specify the number of rows you'd like to see as follows: df_can.head(10) ","f22d0d5f":"df_can.tail()","ab83fb38":"df_can.info()","f866bdab":"df_can.columns.values ","51c7af68":"df_can.index.values","4b4abbe1":"print(type(df_can.columns))\nprint(type(df_can.index))","17b7847e":"df_can.columns.tolist()\ndf_can.index.tolist()\n\nprint (type(df_can.columns.tolist()))\nprint (type(df_can.index.tolist()))","0b5e8372":"# size of dataframe (rows, columns)\ndf_can.shape    ","e441218c":"# in pandas axis=0 represents rows (default) and axis=1 represents columns.\ndf_can.drop(['AREA','REG','DEV','Type','Coverage'], axis=1, inplace=True)\ndf_can.head(2)","7a403f07":"df_can.rename(columns={'OdName':'Country', 'AreaName':'Continent', 'RegName':'Region'}, inplace=True)\ndf_can.columns","2eac1468":"df_can['Total'] = df_can.sum(axis=1)","8defae4a":"df_can.isnull().sum()","7159d0d7":"df_can.describe()","9a7c422c":"df_can.Country  # returns a series","919d462d":"df_can[['Country', 1980, 1981, 1982, 1983, 1984, 1985]] #returns a dataframe\n# notice that 'Country' is string, and the years are integers. \n# for the sake of consistency, we will convert all column names to string later on.","c8cad482":"df_can.set_index('Country', inplace=True)\n# tip: The opposite of set is reset. So to reset the index, we can use df_can.reset_index()","6ba68536":"df_can.head(3)","73f0fa20":"# optional: to remove the name of the index\ndf_can.index.name = None","4700b32c":"# 1. the full row data (all columns)\nprint(df_can.loc['Japan'])\n\n# alternate methods\nprint(df_can.iloc[87])\nprint(df_can[df_can.index == 'Japan'].T.squeeze())","fec95234":"# 2. for year 2013\nprint(df_can.loc['Japan', 2013])\n\n# alternate method\nprint(df_can.iloc[87, 36]) # year 2013 is the last column, with a positional index of 36","1d1135ec":"# 3. for years 1980 to 1985\nprint(df_can.loc['Japan', [1980, 1981, 1982, 1983, 1984, 1984]])\nprint(df_can.iloc[87, [3, 4, 5, 6, 7, 8]])","462024d3":"df_can.columns = list(map(str, df_can.columns))\n[print (type(x)) for x in df_can.columns.values] #<-- uncomment to check type of column headers","206f7bb0":"# useful for plotting later on\nyears = list(map(str, range(1980, 2014)))\nyears","3c147bd9":"# 1. create the condition boolean series\ncondition = df_can['Continent']=='Asia'\nprint (condition)","0e8715ad":"# 2. pass this condition into the dataFrame\ndf_can[condition]","ac6a74fd":"# we can pass mutliple criteria in the same line. \n# let's filter for AreaNAme = Asia and RegName = Southern Asia\n\ndf_can[(df_can['Continent']=='Asia') & (df_can['Region']=='Southern Asia')]\n\n# note: When using 'and' and 'or' operators, pandas requires we use '&' and '|' instead of 'and' and 'or'\n# don't forget to enclose the two conditions in parentheses","f70879a3":"print ('data dimensions:', df_can.shape)\nprint(df_can.columns)\ndf_can.head(2)","b86226ff":"# we are using the inline backend\n%matplotlib inline \n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt","2eae19dd":"print ('Matplotlib version: ', mpl.__version__ ) # >= 2.0.0","9ada4f28":"print(plt.style.available)\nmpl.style.use(['ggplot']) # optional: for ggplot-like style","a884e74d":"haiti = df_can.loc['Haiti', years] # Passing in years 1980 - 2013 to exclude the 'total' column\nhaiti.head()","3f927731":"haiti.plot()","36df4957":"haiti.plot(kind='line')\n\nplt.title('Immigration from Haiti')\nplt.ylabel('Number of immigrants')\nplt.xlabel('Years')\n\nplt.show() # Need this line to show the updates made to the figure","334f6c79":"haiti.plot(kind='line')\n\nplt.title('Immigration from Haiti')\nplt.ylabel('Number of Immigrants')\nplt.xlabel('Years')\n\n# annotate the 2010 Earthquake. \n# syntax: plt.text(x, y, label)\nplt.text(20, 6000, '2010 Earthquake') # see note below\n\nplt.show() ","14e6ce46":"df_CI = df_can.loc[['India', 'China'], years]\ndf_CI.head()","3cf74b8b":"df_CI.plot(kind='line')","13170eaa":"df_CI = df_CI.transpose()\ndf_CI.head()","13904b14":"df_CI.plot(kind='line')\n\nplt.title('Immigrants from China and India')\nplt.ylabel('Number of Immigrants')\nplt.xlabel('Years')\n\nplt.show() ","89aaf141":"# inplace = True paramemter saves the changes to the original df_can dataframe\ndf_can.sort_values(by='Total', ascending=False, axis=0, inplace=True)\n\n# get the top 5 entries\ndf_top5 = df_can.head(5)\n\n# transpose the dataframe\ndf_top5 = df_top5[years].transpose() \n\ndf_top5","3fcf1c75":"df_top5.plot(kind='line', figsize=(14, 8)) # pass a tuple (x, y) size\n\nplt.title('Immigration Trend of Top 5 Countries')\nplt.ylabel('Number of Immigrants')\nplt.xlabel('Years')\n\nplt.show()","4eaa266c":"## Thank you !\n### **Do Share and Upvote if you like it and follow for more**","fcceb195":"This notebook was inspired from the free course on **Cognitive Class** called *Data Visualization with Python*.","c8ca6f9c":"Similarly, to get the list of indicies we use the `.index` parameter.","21a581af":"Example: Let's try filtering on the list of countries ('Country').","991d7ad7":"Note: The main types stored in *pandas* objects are *float*, *int*, *bool*, *datetime64[ns]* and *datetime64[ns, tz] (in >= 0.17.0)*, *timedelta[ns]*, *category (in >= 0.15.0)*, and *object* (string). In addition these dtypes have item sizes, e.g. int64 and int32. ","53ae0dba":"**Question:** Compare the trend of top 5 countries that contributed the most to immigration to Canada.","776e7b23":"To get the list of column headers we can call upon the dataframe's `.columns` parameter.","da76bf80":"*Note*: How come we didn't need to transpose Haiti's dataframe before plotting (like we did for df_CI)?\n\nThat's because `haiti` is a series as opposed to a dataframe, and has the years as its indices as shown below. \n```python\nprint(type(haiti))\nprint(haiti.head(5))\n```\n>class 'pandas.core.series.Series' <br>\n>1980    1666 <br>\n>1981    3692 <br>\n>1982    3498 <br>\n>1983    2860 <br>\n>1984    1418 <br>\n>Name: Haiti, dtype: int64 <br>","6d5167a1":"### Matplotlib.Pyplot\n\nOne of the core aspects of Matplotlib is `matplotlib.pyplot`. It is Matplotlib's scripting layer which we studied in details in the videos about Matplotlib. Recall that it is a collection of command style functions that make Matplotlib work like MATLAB. Each `pyplot` function makes some change to a figure: e.g., creates a figure, creates a plotting area in a figure, plots some lines in a plotting area, decorates the plot with labels, etc. In this lab, we will work with the scripting layer to learn how to generate line plots. In future labs, we will get to work with the Artist layer as well to experiment first hand how it differs from the scripting layer. \n","d72e9cd9":"To get the index and columns as lists, we can use the `tolist()` method.","c010a37c":"![image.png](attachment:image.png)","18086e11":"*pandas* automatically populated the x-axis with the index values (years), and the y-axis with the column values (population).\n\nLet us label the x and y axis using `plt.title()`, `plt.ylabel()`, and `plt.xlabel()` as follows:","622eafbb":"### Plotting in *pandas*\n\nFortunately, pandas has a built-in implementation of Matplotlib that we can use. Plotting in *pandas* is as simple as appending a `.plot()` method to a series or dataframe.\n\nDocumentation:\n- [Plotting with Series](http:\/\/pandas.pydata.org\/pandas-docs\/stable\/api.html#plotting)<br>\n- [Plotting with Dataframes](http:\/\/pandas.pydata.org\/pandas-docs\/stable\/api.html#api-dataframe-plotting)","cb7525ff":"### Select Row\n\nThere are main 3 ways to select rows:\n\n```python\n    df.loc[label]        \n        #filters by the labels of the index\/column\n    df.iloc[index]       \n        #filters by the positions of the index\/column\n    df.ix[label\/index]  \n        #filters by labels first (loc) but falls back to positions (iloc) if label is not found \n```","7ee8d516":"Now we are ready to read in our data.","e6c96d07":"Example: Let us view the number of immigrants from Japan (row 87) for the following scenarios:\n    1. The full row data (all columns)\n    2. For year 2013\n    3. For years 1980 to 1985","44c3129a":"Note: The default type of index and columns is NOT list.","2fffaaf8":"That doesn't look right...\n\nRecall that *pandas* plots the indices on the x-axis and the columns as individual lines on the y-axis. Since `df_CI` is a dataframe with the `country` as the index and `years` as the columns, we must first transpose the dataframe using `transpose()` method to swap the row and columns.","2e62ed8e":"Let us start by importing `Matplotlib` and `Matplotlib.pyplot` as follows:","48a603ac":"We will also add a 'Total' column that sums up the total immigrants by country over the entire period 1980 - 2013, as follows:","596b0a44":"We can clearly notice how number of immigrants from Haiti spiked up from 2010 as Canada stepped up its efforts to accept refugees from Haiti. Let us annotate this spike in the plot by using the `plt.text()` method.","4cba7172":"Let's try filtering on the list of countries ('OdName') and the data for years: 1980 - 1985.","357c38dc":"First, we will extract the data series for Haiti.","8650a615":"Step 1: Get the dataset. Recall that we created a `Total` column that calculates the cumulative immigration by country. We will sort on this column to get our top 5 countries using pandas `sort_values()` method.","fbb3b341":"Let's view the top 5 rows of the dataset using the `head()` function.","41b0f0ad":"Step 1: Get the data set for China and India.","e39c606e":"Let us clean the data set to remove a few unnecessary columns. We can use *pandas* `drop()` method as follows:","59630fa2":"Finally, let's view a quick summary of each column in our dataframe using the `describe()` method.","04a12911":"Line plot is a handy tool to display several dependent variables against one independent variable. However, it is recommended that no more than 5-10 lines on a single graph; any more than that and it becomes difficult to interpret.","da12b6b7":"Let us rename the columns so that they make sense. We can use `rename()` method by passing in a dictionary of old and new names as follows:","679c0edd":"With just a few lines of code, you were able to quickly identify and visualize the spike in immigration!\n\nQuick note on x and y values in `plt.text(x, y, label)`:\n\n    Since the x-axis (years) is type 'string', we need to specify the years in terms of its index position. Eg 20th index is year 2000. The y axis (number of Immigrants) is type 'integer', so we can just specify the value y = 6000.\n```python\n    plt.text(20, 6000, '2010 Earthquake') # years stored as type str\n```\n    If the years were stored as type 'integer' or 'float', we would have specified x = 2000 instead.\n```python\n    plt.text(2000, 6000, '2010 Earthquake') # years stored as type int\n```\n    We will cover advanced annotation methods in later modules.","fe72ae2a":"# Line Pots (Series\/Dataframe) <a id=\"12\"><\/a>","d396729f":"## Matplotlib: Standard Python Visualization Library<a id=\"10\"><\/a>\n\nThe primary plotting library we will explore in the course is [Matplotlib](http:\/\/matplotlib.org\/).  As mentioned on their website: \n>Matplotlib is a Python 2D plotting library which produces publication quality figures in a variety of hardcopy formats and interactive environments across platforms. Matplotlib can be used in Python scripts, the Python and IPython shell, the jupyter notebook, web application servers, and four graphical user interface toolkits.\n\nIf you are aspiring to create impactful visualization with python, Matplotlib is an essential tool to have at your disposal.","0d92eeb1":"### Other Plots\n\nCongratulations! you have learned how to wrangle data with python and create a line plot with Matplotlib. There are many other plotting styles available other than the default Line plot, all of which can be accessed by passing `kind` keyword to `plot()`. The full list of available plots are as follows:\n\n* `bar` for vertical bar plots\n* `barh` for horizontal bar plots\n* `hist` for histogram\n* `box` for boxplot\n* `kde` or `density` for density plots\n* `area` for area plots\n* `pie` for pie plots\n* `scatter` for scatter plots\n* `hexbin` for hexbin plot","424cdb65":"Since we converted the years to string, let us declare a variable that will allow us to easily call upon the full range of years:","48328808":"When analyzing a dataset, it's always a good idea to start by getting basic information about your dataframe. We can do this by using the `info()` method.","31d880b1":"#       Introduction to Matplotlib and Line Plots","f8328d32":"Step 2: Plot graph. We will explicitly specify line plot by passing in `kind` parameter to `plot()`.","ce1eac86":"The first thing we'll do is import two key data analysis modules: *pandas* and **Numpy**.","1104d471":"*pandas* will auomatically graph the two countries on the same graph. Note that we can alternatively pass a `title` parameter to the `plot()` method as an alternate approach to add the title.","dab8444f":"### **Note-This material was inspired by cognitive class material**\n------------\n**Edits-** I found the dataset and I have attached it in the input section although I am still extracting the dataset from there site.","e2b5d09f":"# Exploring Datasets with *pandas* <a id=\"0\"><\/a>\n\n*pandas* is an essential data analysis toolkit for Python. From their [website](http:\/\/pandas.pydata.org\/):\n>*pandas* is a Python package providing fast, flexible, and expressive data structures designed to make working with \u201crelational\u201d or \u201clabeled\u201d data both easy and intuitive. It aims to be the fundamental high-level building block for doing practical, **real world** data analysis in Python.\n\nThe course heavily relies on *pandas* for data wrangling, analysis, and visualization. We encourage you to spend some time and  familizare yourself with the *pandas* API Reference: http:\/\/pandas.pydata.org\/pandas-docs\/stable\/api.html.","915bff07":"We can check to see how many null objects we have in the dataset as follows:","f1b8d489":"---\n# Visualizing Data using Matplotlib<a id=\"8\"><\/a>","71ec751d":"**What is a line plot and why use it?**\n\nA line chart or line plot is a type of plot which displays information as a series of data points called 'markers' connected by straight line segments. It is a basic type of chart common in many fields.\nUse line plot when you have a continuous data set. These are best suited for trend-based visualizations of data over a period of time.","62be55d5":"Dataset Source: [International migration flows to and from selected countries - The 2015 revision](http:\/\/www.un.org\/en\/development\/desa\/population\/migration\/data\/empirical2\/migrationflows.shtml).\n\nThe dataset contains annual data on the flows of international immigrants as recorded by the countries of destination. The data presents both inflows and outflows according to the place of birth, citizenship or place of previous \/ next residence both for foreigners and nationals. The current version presents data pertaining to 45 countries.\n\n\n---","2c76a32a":"We can easily add more countries to line plot to make meaningful comparisons immigration from different countries. \n\n**Question:** Let us compare the number of immigrants from India and China from 1980 to 2013.\n","cf7f6dbc":"Step 2: Plot the dataframe. To make the plot more readeable, we will change the size using the `figsize` parameter.","788ae310":"## The Dataset: Immigration to Canada from 1980 to 2013 <a id=\"2\"><\/a>","f9356db0":"*optional: apply a style to Matplotlib.","6843972d":"## *pandas* Basics<a id=\"4\"><\/a>","dcdfe11e":"Column names that are integers (such as the years) might introduce some confusion. For example, when we are referencing the year 2013, one might confuse that when the 2013th positional index. \n\nTo avoid this ambuigity, let's convert the column names into strings: '1980' to '2013'.","f9076f95":"### Select Column\n**There are two ways to filter on a column name:**\n\nMethod 1: Quick and easy, but only works if the column name does NOT have spaces or special characters.\n```python\n    df.column_name \n        (returns series)\n```\n\nMethod 2: More robust, and can filter on multiple columns.\n\n```python\n    df['column']  \n        (returns series)\n```\n\n```python \n    df[['column 1', 'column 2']] \n        (returns dataframe)\n```\n---","2542ce87":"Before we proceed, notice that the defaul index of the dataset is a numeric range from 0 to 194. This makes it very difficult to do a query by a specific country. For example to search for data on Japan, we need to know the corressponding index value.\n\nThis can be fixed very easily by setting the 'Country' column as the index using `set_index()` method.","3a52abba":"### Filtering based on a criteria\nTo filter the dataframe based on a condition, we simply pass the condition as a boolean vector. \n\nFor example, Let's filter the dataframe to show the data on Asian countries (AreaName = Asia).","7fec1d5e":"*optional: check if Matplotlib is loaded.","4fb55007":"Before we proceed: let's review the changes we have made to our dataframe.","0a1e52e2":"**Let's start with a case study:**\n\nIn 2010, Haiti suffered a catastrophic magnitude 7.0 earthquake. The quake caused widespread devastation and loss of life and aout three million people were affected by this natural disaster. As part of Canada's humanitarian effort, the Government of Canada stepped up its effort in accepting refugees from Haiti. We can quickly visualize this effort using a `Line` plot:\n\n**Question:** Plot a line graph of immigration from Haiti using `df.plot()`.\n","17d150ac":"## Table of Contents\n\n<div class=\"alert alert-block alert-info\" style=\"margin-top: 20px\">\n\n1. [Exploring Datasets with *pandas*](#0)<br>\n1.1 [The Dataset: Immigration to Canada from 1980 to 2013](#2)<br>\n1.2 [*pandas* Basics](#4) <br>\n1.3 [*pandas* Intermediate: Indexing and Selection](#6) <br>\n2. [Visualizing Data using Matplotlib](#8) <br>\n2.1 [Matplotlib: Standard Python Visualization Library](#10) <br>\n3. [Line Plots](#12)\n<\/div>\n<hr>","00a5eb81":"Next, we will plot a line plot by appending `.plot()` to the `haiti` dataframe.","23b9f0be":"---\n## *pandas* Intermediate: Indexing and Selection (slicing)<a id=\"6\"><\/a>\n","8c2290a4":"We can also veiw the bottom 5 rows of the dataset using the `tail()` function.","76b6a91a":"Let us download and import our primary Canadian Immigration dataset using *pandas* `read_excel()` method. But before we can do that, we need to download a module which *pandas* requires to read in excel files. This module is **xlrd**. **Note**- *this is not reqiured while using notebbok in kaggle*","08538787":"From the above plot, we can observe that the China and India have very similar immigration trends through the years. ","5d22f000":"To view the dimensions of the dataframe, we use the `.shape` parameter."}}