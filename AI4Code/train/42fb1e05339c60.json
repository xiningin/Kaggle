{"cell_type":{"774f1301":"code","38854f3d":"code","59b98f66":"code","37b71ba6":"code","849ac432":"code","7cbc3d85":"code","2a23a70a":"code","be602cdc":"code","9028babb":"code","98919d17":"code","701a1344":"code","3f7531f2":"code","c8ca48aa":"code","f094662a":"code","73d7e051":"code","8da088cb":"code","df53b037":"code","8f9818d3":"code","47bfc0c4":"code","ee105bbc":"code","ee1e17a2":"code","4b79f3a8":"code","225cae64":"code","883185c3":"code","d0f06f29":"code","7d359e0a":"code","61c2475c":"code","18c0d2cc":"code","b0e58530":"markdown","0e16de37":"markdown","aab1dad3":"markdown","3971f49e":"markdown","188d7fe5":"markdown","b0736812":"markdown","5d13f1c8":"markdown","53d6337c":"markdown","73b0e370":"markdown","0d817575":"markdown","366f1cb5":"markdown"},"source":{"774f1301":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","38854f3d":"weather = pd.read_csv(\"\/kaggle\/input\/weather-data\/Weather Data.csv\")\nweather.head()","59b98f66":"weather[\"Date\/Time\"] = pd.to_datetime(weather[\"Date\/Time\"])\nweather.head(10)","37b71ba6":"typeofweather = weather['Weather'].str.get_dummies(sep=',')\nforecast = pd.concat([weather,typeofweather],axis=1)\nforecast = forecast.drop(\"Weather\",axis=1)\nforecast.head()","849ac432":"forecast[\"Day\"]=forecast[\"Date\/Time\"].dt.weekday\nforecast[\"Hour\"]=forecast[\"Date\/Time\"].dt.hour\nimport datetime as dt\nforecast['Date\/Time']=forecast['Date\/Time'].map(dt.datetime.toordinal)\nforecast.head()","7cbc3d85":"X = forecast.drop(\"Visibility_km\",axis=1)\ny = forecast[\"Visibility_km\"]","2a23a70a":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2)","be602cdc":"from sklearn.linear_model import Ridge\nnp.random.seed(42)\nrmodel = Ridge()\nrmodel.fit(X_train,y_train)\nprint(f\"Ridge Model Accuracy: {rmodel.score(X_test,y_test) *100}%\")","9028babb":"from sklearn.ensemble import RandomForestRegressor\nnp.random.seed(42)\nrfmodel = RandomForestRegressor()\nrfmodel.fit(X_train,y_train)\nprint(f\"Random Forest Model Accuracy: {rfmodel.score(X_test,y_test) *100}%\")","98919d17":"y_preds = rfmodel.predict(X_test)\ny_preds[:5]","701a1344":"#Comparing truth with predictions\nfrom sklearn.metrics import mean_absolute_error\nmean_absolute_error(y_test,y_preds)","3f7531f2":"from sklearn.metrics import r2_score\nr2_score(y_test,y_preds)","c8ca48aa":"from sklearn.metrics import mean_squared_error\nmean_squared_error(y_test,y_preds)","f094662a":"compare = pd.DataFrame(data={\"Actual\":y_test,\"Predicted\":y_preds})\ncompare.head()","73d7e051":"comp=compare[:50]\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots()\nx = np.arange(0, len(comp),1)\nax.scatter(x,comp[\"Actual\"],c=\"b\",label=\"Actual Values\")\nax.scatter(x,comp[\"Predicted\"],c=\"r\",label=\"Predicted Values\")\nax.legend(loc=(1,0.5))\nax.grid()","8da088cb":"from sklearn.model_selection import cross_val_score\n#R^2 Score\ncv_r2= cross_val_score(rfmodel, X,y,cv=5,scoring=\"r2\")\nprint(f\"Cross Validated R^2 Score is {np.mean(cv_r2):2f}\")","df53b037":"rfmodel.get_params()","8f9818d3":"grid = {\"n_estimators\":[10,100,200,500,1000,1200],\n       \"max_depth\":[None,5,10,20,30],\n       \"max_features\":[\"auto\",\"sqrt\"],\n       \"min_samples_split\":[2,4,6],\n       \"min_samples_leaf\":[1,2,4]}","47bfc0c4":"from sklearn.model_selection import RandomizedSearchCV\nrsmodel = RandomizedSearchCV(estimator=rfmodel,\n                            param_distributions=grid,\n                            n_iter=20,\n                            cv=5,\n                            verbose=2)\nrsmodel.fit(X_train,y_train)","ee105bbc":"rsmodel.best_params_","ee1e17a2":"rs_y_preds = rsmodel.predict(X_test)\nrs_y_preds","4b79f3a8":"compare = pd.DataFrame(data={\"Actual\":y_test,\"Predicted\":rs_y_preds})\ncompare.head()","225cae64":"rsmodel.score(X_test,y_test)","883185c3":"from sklearn.model_selection import GridSearchCV\npipe_grid = {\n    \"n_estimators\": [100, 1000],\n    \"max_depth\": [None, 5],\n    \"max_features\": [\"auto\", \"sqrt\"],\n    \"min_samples_split\": [2, 4]\n}\n\ngs_model = GridSearchCV(rfmodel, pipe_grid, cv=5, verbose=2)\ngs_model.fit(X_train, y_train)","d0f06f29":"gs_model.score(X_test, y_test)","7d359e0a":"import pickle\n#Save\npickle.dump(gs_model,open(\"gs_model_randomforest.pkl\",\"wb\"))","61c2475c":"#Load Model\nloadmodel = pickle.load(open(\"gs_model_randomforest.pkl\",\"rb\"))","18c0d2cc":"loadmodel.score(X_test,y_test)","b0e58530":"*Mean absolute error*","0e16de37":"### Ridge Regression","aab1dad3":"*R^2 or Coefficient of determination*","3971f49e":"### Random Forest Regression","188d7fe5":"## Prediction of Visibility","b0736812":"#### Comparing Predicted vs Actual Value","5d13f1c8":"#### Scoring Parameter","53d6337c":"### Hyperparameter tuning using GridSearchCV","73b0e370":"### Saving Model","0d817575":"### Hyperparameter tuning using RandomizedSearchCV","366f1cb5":"*Mean Squared Error*"}}