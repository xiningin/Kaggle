{"cell_type":{"6425c500":"code","4322c262":"code","c5d47ce7":"code","79d733e3":"code","bfab411e":"code","13b07b04":"code","4ead1369":"code","e25d2acd":"code","bce76311":"code","e85dfc99":"code","cf0fb76e":"code","6a0f8184":"code","0e0b170c":"code","5168e8d0":"code","576ba143":"code","aa2455f9":"code","14812af3":"code","209b078a":"code","4046e9c8":"code","89c4c889":"code","cc748557":"code","65af05f4":"code","5421ce04":"code","2e1286f2":"code","5210da7f":"markdown","3cc2140b":"markdown","ad66e55d":"markdown","c5917aac":"markdown","547cda95":"markdown","884a95b3":"markdown","a1eaf2fb":"markdown","18497f91":"markdown","2f9b7a50":"markdown","eaf2c713":"markdown"},"source":{"6425c500":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4322c262":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, plot_confusion_matrix , accuracy_score","c5d47ce7":"df=pd.read_csv('..\/input\/mushroom-classification\/mushrooms.csv')\ndf.head()","79d733e3":"df.describe(include='all')","bfab411e":"df.isnull().sum()","13b07b04":"categorical_cols = [col for col in df.columns if df[col].dtype=='object']\nlabel_encoder=LabelEncoder()\nlabelled_df=df.copy()\nfor col in categorical_cols:\n    labelled_df[col]=label_encoder.fit_transform(df[col])\nlabelled_df.head()","4ead1369":"correlation=labelled_df.corr()\nplt.figure(figsize=(15,10))\nsns.heatmap(correlation,annot=True)","e25d2acd":"labelled_df.drop('veil-type',axis=1,inplace=True)","bce76311":"y=labelled_df.iloc[:,0]\nX=labelled_df.iloc[:,1:22]","e85dfc99":"scaler=StandardScaler()\nfeature_set=scaler.fit_transform(X)\nfeature_set","cf0fb76e":"X_train,X_val,y_train,y_val=train_test_split(feature_set,y,test_size=0.2,random_state=0)\nX_train","6a0f8184":"from sklearn.linear_model import LogisticRegression\n\nlr=LogisticRegression(C=0.01,solver='sag')\nlr.fit(X_train,y_train)\npred=lr.predict(X_val)\nlr_acc=accuracy_score(pred,y_val)\nlr_acc","0e0b170c":"plot_confusion_matrix(lr,X_val,y_val,display_labels=['Poison','No Poison'])","5168e8d0":"from sklearn.naive_bayes import GaussianNB\n\nnb=GaussianNB()\nnb.fit(X_train,y_train)\npred=nb.predict(X_val)\nnb_acc=accuracy_score(pred,y_val)\nnb_acc","576ba143":"plot_confusion_matrix(nb,X_val,y_val,display_labels=['Poison','No Poison'])","aa2455f9":"from sklearn.neighbors import KNeighborsClassifier\n\nknn=KNeighborsClassifier(n_neighbors=5)\nknn.fit(X_train,y_train)\npred=knn.predict(X_val)\nknn_acc=accuracy_score(pred,y_val)\nknn_acc","14812af3":"plot_confusion_matrix(knn,X_val,y_val,display_labels=['Poison','No Poison'])","209b078a":"from sklearn.tree import DecisionTreeClassifier\n\ntree=DecisionTreeClassifier(criterion='entropy')\ntree.fit(X_train,y_train)\npred=tree.predict(X_val)\ntree_acc=accuracy_score(pred,y_val)\ntree_acc","4046e9c8":"plot_confusion_matrix(tree,X_val,y_val,display_labels=['Poison','No Poison'])","89c4c889":"from sklearn.ensemble import RandomForestClassifier\n\nforest=RandomForestClassifier(n_estimators=100,random_state=0)\nforest.fit(X_train,y_train)\npred=forest.predict(X_val)\nforest_acc=accuracy_score(pred,y_val)\nforest_acc","cc748557":"plot_confusion_matrix(forest,X_val,y_val,display_labels=['Poison','No Poison'])","65af05f4":"from xgboost import XGBClassifier\n\nxgb=XGBClassifier()\nxgb.fit(X_train,y_train)\npred=xgb.predict(X_val)\nxgb_acc=accuracy_score(pred,y_val)\nxgb_acc","5421ce04":"plot_confusion_matrix(xgb,X_val,y_val,display_labels=['Poison','No Poison'])","2e1286f2":"df_acc=pd.DataFrame({\n    'Models':['Logistic Regression','Gaussian Naive Bayes','KNeighbors','Decision Tree','Random Forest','Xg Boost'],\n    'Accuracy':[lr_acc,nb_acc,knn_acc,tree_acc,forest_acc,xgb_acc]\n})\ndf_acc.sort_values(by='Accuracy',ascending=False)","5210da7f":"# Importing Libraries","3cc2140b":"# Train Test Split","ad66e55d":"# Gaussian Naive Bayes","c5917aac":"# KNearest Neighbors","547cda95":"# Random Forest","884a95b3":"# Logistic Regression","a1eaf2fb":"# Label Encoding to Categorical Variables","18497f91":"# Models' Accurccy","2f9b7a50":"# Xg Boost","eaf2c713":"# Decision Tree"}}