{"cell_type":{"9e463c3f":"code","6949ed8e":"code","cd67988b":"code","eb6d47a3":"code","91ae4862":"code","fc266e90":"code","3324e75f":"code","918910f5":"code","06a51e96":"code","34c1db31":"code","bb065490":"code","f03ffb42":"code","339e0015":"code","bb3410d3":"code","9dde66fc":"code","87d03ef9":"code","a481773c":"code","3f1b3465":"markdown","d4c72c15":"markdown","238bb57d":"markdown","0335c250":"markdown","e3b58ef7":"markdown","8d74a51c":"markdown","7f4244d3":"markdown","73b4d5e2":"markdown","aa6f63cb":"markdown","61c4687a":"markdown"},"source":{"9e463c3f":"import numpy as np\nimport tensorflow as tf\nimport pandas as pd\nimport matplotlib as plt\nimport seaborn as sns\nfrom sklearn.metrics import mean_absolute_error\nfrom scipy.stats import skew","6949ed8e":"N_SAMPLES = 100000\nN_TEST = 1000\nMAX_TIMESTEPS = 9\nMASK_VALUE = -1\n\ntrain_X = np.random.uniform(size=(N_SAMPLES, MAX_TIMESTEPS, 1))\ntrain_L = np.random.randint(4, MAX_TIMESTEPS, N_SAMPLES)\n\ntest_X = np.random.uniform(size=(N_TEST, MAX_TIMESTEPS, 1))\ntest_L = np.random.randint(4, MAX_TIMESTEPS, N_TEST)","cd67988b":"for i in range(N_SAMPLES):\n    train_X[i, train_L[i]:] = MASK_VALUE","eb6d47a3":"for i in range(N_TEST):\n    test_X[i, test_L[i]:] = MASK_VALUE","91ae4862":"train_y = np.ma.masked_array(train_X, train_X==MASK_VALUE).std(axis=1).data\ntest_y = np.ma.masked_array(test_X, test_X==MASK_VALUE).std(axis=1).data","fc266e90":"input_ = tf.keras.Input(shape=(None, 1))\nmasked = tf.keras.layers.Masking(MASK_VALUE)(input_)\nlstm1 = tf.keras.layers.LSTM(32, return_sequences=True)(masked)\nlstm2 = tf.keras.layers.LSTM(32)(lstm1)\noutput = tf.keras.layers.Dense(1)(lstm2)\n\nmodel = tf.keras.Model(inputs=input_, outputs=output)\nmodel.summary()","3324e75f":"model.compile('adam', 'mse')","918910f5":"hist = model.fit(train_X, train_y, epochs=3)","06a51e96":"prediction = model.predict(test_X)","34c1db31":"prediction[:5]","bb065490":"test_y[:5]","f03ffb42":"mse = model.evaluate(train_X,train_y)","339e0015":"Skew_ = skew(train_y,axis = 0,bias = True,nan_policy= 'omit')","bb3410d3":"# Value of Skewness\nSkew_","9dde66fc":"# Value of Mean Squared Error\nmse","87d03ef9":"# Value of Mean absolute error\nmean_absolute_error(test_y, prediction)","a481773c":"# Value of Decile\nnp.percentile(train_X,10)","3f1b3465":"# Recurrent Network\n\nThis notebook shows how to create a recurrent network","d4c72c15":"S = (8 % 5) + 1 \n    = 3 + 1\n    = 4","238bb57d":"N = JAURIGUE (8)\n","0335c250":"### Compile the model by providing the optimization algorithm and the loss function","e3b58ef7":"### View the predictions on the test set","8d74a51c":"### Generate random values and calculate the label using the toy problem\n\nThe model shold be able to learn how to calculate the standard deviation of a sequence\n\nTo define data with different lengths, we set the unused parts of the data as -1.","7f4244d3":"S+5 = 9","73b4d5e2":"### Define the connections of the nodes in the network and verify the model\n\nThe ```Masking``` layer removes the numbers whose values are equal to -1. This allows us to tell the network that the data lengths are different.\n\nThe ```return_sequence``` flag defines if the LSTM should return only the last or the full sequence","aa6f63cb":"### Train the model for 3 epochs","61c4687a":"### Import all the needed modules"}}