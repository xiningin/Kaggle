{"cell_type":{"b74f5063":"code","3f815f99":"code","3e5580ef":"code","e4351eef":"code","5b3dba97":"code","10edc1a2":"code","201c11cc":"code","70e2c21e":"code","8d5135e2":"code","94bb954c":"markdown","022d3ea8":"markdown"},"source":{"b74f5063":"import numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import MinMaxScaler","3f815f99":"aug = pd.read_csv('..\/input\/moa-ctgan\/ctgan_aug.csv')\ntrain_features = pd.read_csv('..\/input\/lish-moa\/train_features.csv')\ntrain_targets_scored = pd.read_csv('..\/input\/lish-moa\/train_targets_scored.csv')\ntrain_targets_nonscored = pd.read_csv('..\/input\/lish-moa\/train_targets_nonscored.csv')\ntest_features = pd.read_csv('..\/input\/lish-moa\/test_features.csv')","3e5580ef":"aug['cp_dose'] = aug['cp_dose'].map({0: 'D1', 1: 'D2'})\naug['cp_type'] = 'trt_cp'\naug.insert(1, 'sig_id', range(1, 1 + len(aug)))\naug['sig_id'] = \"id_\" + aug.sig_id.map(str)\naug_features = aug[train_features.columns]\naug_targets = aug[train_targets_scored.columns]","e4351eef":"GENES = [col for col in train_features.columns if col.startswith('g-')]\nCELLS = [col for col in train_features.columns if col.startswith('c-')]","5b3dba97":"print(\"Total cell values\",len(CELLS))\nprint(\"Total Genes values\",len(GENES))","10edc1a2":"scaler = MinMaxScaler()\ndata_g = pd.concat([pd.DataFrame(train_features[GENES]), pd.DataFrame(test_features[GENES])])\ndata_rescaled_g = scaler.fit_transform(data_g)\npca_g = PCA().fit(data_rescaled_g)\n\nplt.rcParams[\"figure.figsize\"] = (12,6)\n\nfig, ax = plt.subplots()\nxi = np.arange(1, 773, step=1)\ny = np.cumsum(pca_g.explained_variance_ratio_)\n\nplt.ylim(0.0,1.1)\nplt.plot(xi, y, marker='o', linestyle='--', color='b')\n\nplt.xlabel('Number of Components')\nplt.xticks(np.arange(0, 720, step=40)) #change from 0-based array index to 1-based human-readable label\nplt.ylabel('Cumulative variance (%)')\nplt.title('The number of components needed to explain variance')\n\nplt.axhline(y=0.95, color='r', linestyle='-')\nplt.text(0.5, 0.85, '95% cut-off threshold', color = 'red', fontsize=16)\n\nax.grid(axis='x')\nplt.show()","201c11cc":"scaler = MinMaxScaler()\ndata_c = pd.concat([pd.DataFrame(train_features[CELLS]), pd.DataFrame(test_features[CELLS])])\ndata_rescaled_c = scaler.fit_transform(data_c)\n# ","70e2c21e":"pca_c = PCA().fit(data_rescaled_c)","8d5135e2":"plt.rcParams[\"figure.figsize\"] = (12,6)\n\nfig, ax = plt.subplots()\nxi = np.arange(1, 101, step=1)\ny = np.cumsum(pca_c.explained_variance_ratio_)\n\nplt.ylim(0.0,1.1)\nplt.plot(xi, y, marker='o', linestyle='--', color='b')\n\nplt.xlabel('Number of Components')\nplt.xticks(np.arange(0, 101, step=40)) #change from 0-based array index to 1-based human-readable label\nplt.ylabel('Cumulative variance (%)')\nplt.title('The number of components needed to explain variance')\n\nplt.axhline(y=0.95, color='r', linestyle='-')\nplt.text(0.5, 0.85, '95% cut-off threshold', color = 'red', fontsize=16)\n\nax.grid(axis='x')\nplt.show()","94bb954c":"520 to 600 components for Genes data\n\n50 to 60 components for Cells data","022d3ea8":"Will try to capture 95-99% variance, let's see we can ;)"}}