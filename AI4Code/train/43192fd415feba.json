{"cell_type":{"991fc001":"code","b7fb580e":"code","9b046adc":"code","2ced9ad9":"code","9fa87396":"code","03f7a36a":"code","7201541b":"code","e85d0010":"code","6c1e66ee":"code","aaec712f":"code","f84015d5":"code","0ca54459":"code","724d91b3":"code","2f4fb902":"code","9ad1d406":"code","a1ccfb29":"code","9ab957f5":"code","f321949b":"code","aec559e5":"code","10c951f7":"code","fd22f818":"code","c044f881":"code","fe0cc880":"code","391cec67":"code","41fbbc73":"code","e62013d8":"code","0b2b0e80":"code","220a033c":"code","61e213c0":"code","ed70206d":"code","a5ed3ff7":"code","e0efe2a8":"code","c6494ab0":"code","3eb9ff57":"code","96496ec5":"code","bffcf419":"code","a2bdbee9":"code","0b76b90a":"code","3ca423de":"code","c0480500":"code","c223365e":"code","4d5a1015":"code","184e6635":"code","2fe3436d":"code","c42b73a2":"code","90818a34":"code","6a5865f2":"code","562685a4":"code","29937a86":"code","b1ffff08":"code","e9f6f77f":"code","8f423ac2":"code","65432828":"code","211bdd6a":"code","e6d1e76a":"code","fd571956":"code","9d02cfc1":"code","78e454b9":"code","6f947118":"code","e6e57411":"code","cdaa004e":"code","417d5187":"code","856cad57":"code","5113ce3b":"code","938718a4":"code","c3e0430e":"markdown","b82069e5":"markdown","4c7031dd":"markdown","97adbac8":"markdown","a44feadf":"markdown","b339f530":"markdown","92604faa":"markdown","2fe21368":"markdown"},"source":{"991fc001":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n# import zipfile\nimport seaborn as sns\nsns.set(rc={'figure.figsize':(12,8)})\n# set the precision of 2 decimal place.\npd.set_option('display.precision',2)\n# pd.options.display.float_format = '{:,.2f}'.format\n# zipfile.ZipFile('flight-delays.zip').extractall('.')","b7fb580e":"# plotly\nimport plotly.offline as py\ninit_notebook_mode(connected=True)","9b046adc":"path = '..\/input\/flight-delays\/'\n# read data of flight.csv\n# a warning claims 'ORIGIN_AIRPORT' and 'DESTINATION_AIRPORT' have type of int data\nflight_raw = pd.read_csv(path+'flights.csv', dtype={'ORIGIN_AIRPORT': str, \n                                               'DESTINATION_AIRPORT': str})","2ced9ad9":"# over 5 million rows, over 30 columns, quite a big data.\nflight_raw.shape","9fa87396":"# take a look at the basic statistics\nflight_raw.loc[:,['DEPARTURE_TIME', 'DEPARTURE_DELAY',\n                  'AIR_TIME', 'DISTANCE', 'ARRIVAL_TIME', \n                  'ARRIVAL_DELAY', 'DIVERTED', 'CANCELLED'\n                 ]].describe()","03f7a36a":"# Count the number of NAN and different values in each column\ndef count_NA_levels(data):\n    for i in data.columns:\n        x = data[i].unique()\n        y = data[i]\n        count_na = data.shape[0] - (y.dropna(axis=0, how='any')).shape[0]\n        if count_na > 0:\n            print(i + '({} NaN): '.format(count_na) + str(len(x)))\n        else:\n            print(i + '(no NaN): ' + str(len(x)))","7201541b":"count_NA_levels(flight_raw)","e85d0010":"flight_dropna = flight_raw.dropna(axis=0, how='any', \n                                  subset=['ARRIVAL_DELAY', 'DEPARTURE_DELAY'])","6c1e66ee":"count_NA_levels(flight_dropna)","aaec712f":"flight_dropna.shape","f84015d5":"flight_clean = flight_dropna.loc[:,['MONTH','DAY','DAY_OF_WEEK',\n                           'AIRLINE','ORIGIN_AIRPORT','DESTINATION_AIRPORT',\n                           'DEPARTURE_DELAY','ARRIVAL_DELAY', 'DISTANCE',\n                           'AIR_SYSTEM_DELAY','SECURITY_DELAY','AIRLINE_DELAY',\n                           'LATE_AIRCRAFT_DELAY','WEATHER_DELAY'\n                          ]]","0ca54459":"flight_clean.shape","724d91b3":"count_NA_levels(flight_clean)","2f4fb902":"delay_over15min = flight_clean.dropna(subset=['AIR_SYSTEM_DELAY','SECURITY_DELAY',\n                                        'AIRLINE_DELAY','LATE_AIRCRAFT_DELAY',\n                                        'WEATHER_DELAY'], how='all')","9ad1d406":"count_NA_levels(delay_over15min)","a1ccfb29":"delay_over15min.shape","9ab957f5":"flight_clean[flight_clean.ARRIVAL_DELAY >= 15].shape","f321949b":"flight = flight_clean.drop(['AIR_SYSTEM_DELAY','SECURITY_DELAY','AIRLINE_DELAY',\n                           'LATE_AIRCRAFT_DELAY','WEATHER_DELAY'], axis=1)","aec559e5":"flight.shape","10c951f7":"# create a column to measure delay or not\n# DELAY_OR_NOT: True (ARRIVAL_DELAY > 0), False (ARRIVAL_DELAY <= 0)\n\nflight['DELAY_OR_NOT'] = flight.loc[:, ['ARRIVAL_DELAY']] > 0\nflight.head()","fd22f818":"# read data of airlines.csv for the full name of airlines\nairline_name = pd.read_csv(path+'airlines.csv')\nairline_name","c044f881":"# merge the fullname of airline companies into flight data\nflight_fullname = flight.rename(columns={'AIRLINE': 'IATA_CODE'})\nflight_fullname = flight_fullname.merge(airline_name, on='IATA_CODE')","fe0cc880":"# Make clear on DEPARTURE_DELAY and ARRIVAL_DELAY\n# Delay caused before departure or after departure?\n\nairline_deparr_plot = flight_fullname.loc[:, ['AIRLINE', \n                                     'DEPARTURE_DELAY',\n                                     'ARRIVAL_DELAY']].groupby('AIRLINE').mean()","391cec67":"airline_deparr_plot","41fbbc73":"airline_deparr_plot.plot.barh(figsize=(12,8), stacked=False)\nplt.show()","e62013d8":"# ARRIVAL_DELAY is the total delay, i.e. delay result of this flight\n# extract the delay in the airtime and landing\nairline_deparr_plot['ARRIVAL_DELAY'] = (- airline_deparr_plot['DEPARTURE_DELAY'] \n                                        + airline_deparr_plot['ARRIVAL_DELAY'])\nax = airline_deparr_plot.plot.barh(figsize=(12,8), stacked=True)\nax.legend(['DEPARTURE_DELAY', 'AIRTIME_LANDING_DELAY\\n(ARRIVAL_DELAY-DEPARTURE_DELAY)'])\n# ax.title('')\nplt.show()","0b2b0e80":"# use this function to select which airline we are interested\ndef flight_airline(airline):\n    return flight.loc[flight['AIRLINE']==airline]\n# draw the number of delays for [what, e.g. MONTH] we want to groupby\ndef draw_count_delay(data, select, kind='bar'):\n    data_select = data.loc[:, [select, 'DELAY_OR_NOT']].groupby(select).sum()\n    ax = data_select.plot(kind=kind, figsize=(10,6))\n    ax.legend(['Number of Delays'])\n    plt.show()","220a033c":"draw_count_delay(flight_fullname, 'AIRLINE')","61e213c0":"# split by month\nflight_month = flight.loc[:, ['MONTH']].groupby('MONTH').sum()\nget_airline = flight.AIRLINE.unique()\n\nfor a in get_airline:\n    flight_month[a] = flight_airline(a).loc[:, ['MONTH', 'DELAY_OR_NOT']]\\\n                                        .groupby('MONTH').sum()\n#set full name\nflight_month.columns = flight_fullname.AIRLINE.unique()","ed70206d":"ax = flight_month.T.plot(kind='bar', stacked=True, figsize=(12,8), colormap='rainbow')\nax.set(ylabel='Number of Delays', xlabel='AIRLINE')\nplt.show()","a5ed3ff7":"# view the market share of these airlines\n\ndef airline_marketshare(data=flight_fullname, by='AIRLINE', titlehere='Market Share of Airlines in 2015'):\n    df = data.loc[:, [by]]\n    df['Share %'] = 1\n    top = df.groupby(by).sum().sort_values(by='Share %',ascending=False)\n    top = top.reset_index()\n    \n    sharePlot = top['Share %'].plot.pie(subplots=True,\n                                         autopct='%0.2f%%',\n                                         fontsize=12,\n                                         figsize=(10,10),\n                                         legend=False,\n                                         labels=top[by],\n                                         shadow=False,\n                                         explode=(0.01,0.02,0.03,0.04,0.05,0.06,\n                                                  0.07,0.08,0.1,0.15,\n                                                  0.2,0.25,\n                                                  0.3,0.35)[:len(data[by].unique())],\n                                         startangle=90,\n                                         colormap='summer',\n                                         title=titlehere\n                                       )\n    \n    plt.show()","e0efe2a8":"airline_marketshare()","c6494ab0":"def draw_pct_delay(data, select, kind='bar'):\n    data_select = (100*(data.loc[:, [select, 'DELAY_OR_NOT']].groupby(select).sum())\n                   \/(data.loc[:, [select, 'DELAY_OR_NOT']].groupby(select).count()))\n    data_select.plot(kind=kind)\n    plt.show()","3eb9ff57":"draw_pct_delay(flight, 'AIRLINE')","96496ec5":"def draw_pct_delay_month(data, select, kind='bar'):\n    for m in range(12):\n        data_select['{}'.format(m)] = (100*(data.loc[:, [select, 'DELAY_OR_NOT']].groupby(select).sum())\n                       \/(data.loc[:, [select, 'DELAY_OR_NOT']].groupby(select).count()))\n    data_select.plot(kind=kind, stacked=True)\n    plt.show()","bffcf419":"flight_month_pct = flight.loc[:, ['MONTH']].groupby('MONTH').sum()\nairline = flight.AIRLINE.unique()\n\nfor a in airline:\n    flight_a = flight_airline(a)\n    flight_month_pct[a] = 100*(flight_a.loc[:, ['MONTH', 'DELAY_OR_NOT']].groupby('MONTH').sum()\n                          \/flight_a.shape[0])\nflight_month_pct.columns = flight_fullname.AIRLINE.unique()","a2bdbee9":"flight_month_pct.T","0b76b90a":"ax = flight_month_pct.T.plot.bar(figsize=(12,8), stacked=True, colormap='rainbow')\nax.set(ylabel='Percentage %',xlabel='AIRLINE')\nplt.show()","3ca423de":"# boxplot of delay time (min) and airlines\n\na = flight_fullname.loc[:, ['ARRIVAL_DELAY','AIRLINE']]\nax = sns.boxplot(y='AIRLINE', x='ARRIVAL_DELAY', data=a, linewidth=1, fliersize=2)\nax.set(xscale=\"log\", xlabel='Delay Time (min)') #will ignore the negative value (no delays)\nplt.show()","c0480500":"# read airport data for longitude and latitude\n# so we can draw it in the map\nairport = pd.read_csv(path+'airports.csv')","c223365e":"# get the delay rate of (origin or destination) airports\ndef get_airport_plot(select):\n    data_select = airport.rename(columns={'IATA_CODE': select})\n    data_select_plot = pd.merge(data_select,\n                               flight.loc[:, [select, 'DELAY_OR_NOT']]\\\n                               .groupby(select).mean().reset_index())\n    \n    data_select_plot['text_plot'] = ('Airport: ' + data_select_plot['AIRPORT'] + '<br>' \n                                    + 'City: ' + data_select_plot['CITY'] + '<br>'\n                                    + 'State: ' + data_select_plot['STATE'] + '<br>'\n                                    + 'Percentage of Delay: '\n                                    + ((data_select_plot['DELAY_OR_NOT']*10000)\\\n                                       .astype(int)\/100).astype(str) + '%<br>')\n    \n    return data_select_plot","4d5a1015":"airport_origin_plot = get_airport_plot('ORIGIN_AIRPORT')\n# airport_origin_plot.head()","184e6635":"#colorscale made for plotting\nscale = [[0.0, 'rgb(0,100,0)'],[0.2, 'rgb(34,139,34)'],\n         [0.4, 'rgb(60,179,60)'],[0.6, 'rgb(173,255,47)'],\n         [0.8, 'rgb(255,215,0)'],[1.0, 'rgb(255,99,71)']]\n# draw the (origin or destination) airports in the map w.r.t delay rate\ndef delay_pct(dataplot, titlehere, filename):\n    #data\n    data = [dict(type='scattergeo',\n                 lat=dataplot['LATITUDE'],\n                 lon=dataplot['LONGITUDE'],\n                 marker=dict(\n                     autocolorscale=False, \n                     cmax=50, \n                     cmin=0, \n                     color= dataplot['DELAY_OR_NOT']*100,\n                     colorbar=dict(title=\"Percentage of Delay (%)\"), \n                     colorscale=scale, #'Viridis' \n                     line=dict(\n                         color=\"rgba(102,102,102)\", \n                         width=1\n                     ), \n                     opacity=0.8, \n                     size=8\n                 ),\n\n                 text=dataplot['text_plot'],\n                 mode='markers',\n                )]\n    \n    #layout\n    layout = dict(title= titlehere + '<br> Hover for value',\n                 geo=dict(scope='USA',\n                          projection=dict(type='albers usa'),\n                          showlakes=True,\n                          showland=True,\n                          lakecolor='rgb(95,145,237)',\n                          landcolor='rgb(250,250,250)',\n                         )\n                 )\n    \n    fig = dict(data=data, layout=layout)\n    return py.iplot(fig, validate=False, filename=filename)","2fe3436d":"delay_pct(airport_origin_plot, 'Flight Delay Rate of Origin Airports in 2015', 'Delay_2015_Origin')","c42b73a2":"airport_destination_plot = get_airport_plot('DESTINATION_AIRPORT')\n# airport_destination_plot.head()","90818a34":"delay_pct(airport_destination_plot, 'Flight Delay Rate of Destination Airports in 2015', 'Delay_2015_Destination')","6a5865f2":"# get the delay time info w.r.t (origin or destination) airports\ndef get_airport_delaytime_plot(select, val):\n    #merge flight dataset and airport dataset\n    data_select = airport.rename(columns={'IATA_CODE': select})\n    data_select_plot = pd.merge(data_select,\n                               flight.loc[:, [select, val]]\\\n                               .groupby(select).mean().reset_index())\n    \n    #for the hover text when plotting\n    data_select_plot['text_plot'] = ('Airport: ' + data_select_plot['AIRPORT'] + '<br>' \n                                    + 'City: ' + data_select_plot['CITY'] + '<br>'\n                                    + 'State: ' + data_select_plot['STATE'] + '<br>'\n                                    + 'Average Delay Minutes: '\n                                    + ((data_select_plot[val]*100)\\\n                                       .astype(int)\/100).astype(str) + '<br>')\n    \n    return data_select_plot","562685a4":"airport_origin_delaytime_plot = get_airport_delaytime_plot('ORIGIN_AIRPORT', 'ARRIVAL_DELAY')\n# airport_origin_delaytime_plot.head()","29937a86":"# delay as origin vs. delay as destination (delay rate)\na = airport_origin_plot.rename(columns={'ORIGIN_AIRPORT': 'APT',\n                                        'DELAY_OR_NOT': 'DELAYasORIGIN'})\nb = airport_destination_plot.rename(columns={'DESTINATION_AIRPORT': 'APT',\n                                             'DELAY_OR_NOT': 'DELAYasDEST'})\nc = a.loc[:,['APT','DELAYasORIGIN']].merge(b.loc[:,['APT','DELAYasDEST']], on='APT')\nc.set_index('APT').corr()","b1ffff08":"# delay as origin vs. delay as destination (delay rate)\nsns.lmplot(x='DELAYasORIGIN', y='DELAYasDEST',\n           data=c, height=9)\nplt.show()","e9f6f77f":"#draw the (origin or destination) airports in the map visualized by delay time\ndef delay_time(dataplot, titlehere, filename):\n    #data\n    data = [dict(type='scattergeo',\n                 lat=dataplot['LATITUDE'],\n                 lon=dataplot['LONGITUDE'],\n                 marker=dict(\n                     autocolorscale=False, \n                     cmax=15, \n                     cmin=-20, \n                     color= dataplot[dataplot.columns[-2]],\n                     colorbar=dict(title=\"Average Delay Minutes\"), \n                     colorscale=scale, #'Viridis' \n                     line=dict(\n                         color=\"rgba(102,102,102)\", \n                         width=1\n                     ), \n                     opacity=0.8, \n                     size=8\n                 ),\n\n                 text=dataplot['text_plot'],\n                 mode='markers',\n                )]\n    \n    #layout\n    layout = dict(title=titlehere + '<br> Hover for value',\n                 geo=dict(scope='USA',\n                          projection=dict(type='albers usa'),\n                          showlakes=True,\n                          showland=True,\n                          lakecolor='rgb(95,145,237)',\n                          landcolor='rgb(250,250,250)',\n                         )\n                 )\n    \n    fig = dict(data=data, layout=layout)\n    return py.iplot(fig, validate=False, filename=filename)","8f423ac2":"delay_time(airport_origin_delaytime_plot, 'Average Flight Delay Time of Origin Airports in 2015', 'Avg_DelayTime_Origin')","65432828":"airport_dest_delaytime_plot = get_airport_delaytime_plot('DESTINATION_AIRPORT', 'ARRIVAL_DELAY')\n# airport_dest_delaytime_plot.head()","211bdd6a":"delay_time(airport_dest_delaytime_plot, 'Average Flight Delay Time of Destination Airports in 2015', 'Avg_DelayTime_Destionation')","e6d1e76a":"# delay as origin vs. delay as destination (delay time)\na = airport_origin_delaytime_plot.rename(columns={'ORIGIN_AIRPORT': 'APT',\n                                        'ARRIVAL_DELAY': 'DELAYasORIGIN'})\nb = airport_dest_delaytime_plot.rename(columns={'DESTINATION_AIRPORT': 'APT',\n                                             'ARRIVAL_DELAY': 'DELAYasDEST'})\nc = a.loc[:,['APT','DELAYasORIGIN']].merge(b.loc[:,['APT','DELAYasDEST']], on='APT')\nc.set_index('APT').corr()","fd571956":"# delay as origin vs. delay as destination (delay time)\nsns.lmplot(x='DELAYasORIGIN', y='DELAYasDEST',\n           data=c, height=9)\nplt.show()","9d02cfc1":"# get the info (origin and destination airports) of each flight route\ndef route(flight):\n    #for origin airports info\n    a = flight.loc[:, ['ORIGIN_AIRPORT', 'DESTINATION_AIRPORT', 'ARRIVAL_DELAY']]\n    a['AtoB'] = a['ORIGIN_AIRPORT'] + a['DESTINATION_AIRPORT']\n    b = a.loc[:,['AtoB','ARRIVAL_DELAY']].groupby('AtoB').mean()\n    b['IATA_CODE'] = b.index.str[:3]\n    c = pd.merge(airport, b.reset_index())\n    c.rename(columns={'IATA_CODE': 'ORIGIN_AIRPORT'}, inplace=True)\n    c_sorted = c.set_index('AtoB').sort_index()\n    \n    #for destination airports info\n    b.drop('IATA_CODE', axis=1, inplace=True)\n    b['IATA_CODE'] = b.index.str[3:]\n    d = pd.merge(airport, b.reset_index())\n    d.rename(columns={'IATA_CODE': 'DESTINATION_AIRPORT'}, inplace=True)\n    d_sorted = d.set_index('AtoB').sort_index()\n    \n    return (c_sorted, d_sorted)","78e454b9":"#draw the route map visualized by the delay time\ndef delay_time_route(airline='AA'):\n    #data\n    \n    route_origin, route_destination = route(flight_airline(airline))\n\n    #draw the airport points in the map\n    data = [dict(type='scattergeo',\n                 lat=route_origin['LATITUDE'],\n                 lon=route_origin['LONGITUDE'],\n                 marker=dict(\n                     color='#FFD700',\n                     line=dict(\n                         color=\"rgba(102,102,102)\", \n                         width=1\n                     ), \n                     opacity=0.8, \n                     size=6\n                 ),\n                 mode='markers',\n                )]   \n    \n    #draw the flight route in the map\n    for i in range(route_origin.shape[0]):\n        data += [dict(\n            lat=[route_origin['LATITUDE'][i], route_destination['LATITUDE'][i]], \n            line=dict(  \n                color='#4682B4',\n                width=1\n            ), \n            locationmode=\"USA-states\", \n            lon=[route_origin['LONGITUDE'][i], route_destination['LONGITUDE'][i]], \n            mode=\"lines\",\n            text=('From: ' + (route_origin['AIRPORT'][i]) \n                  + '<br>To: ' + route_destination['AIRPORT'][i]\n                  + '<br>Avg. Delay: ' \n                  + ((route_origin['ARRIVAL_DELAY'][i]*100).astype(int)\/100).astype(str) \n                  + ' mins'\n                 ),\n            opacity=(route_origin['ARRIVAL_DELAY'][i])\/30 if (route_origin['ARRIVAL_DELAY'][i])>0 else 0, \n            type=\"scattergeo\"\n        )]\n    \n    #layout\n    layout = dict(title='Average Delay Time of Airline {} Route in 2015'.format(airline)\n                  + '<br> Hover for value',\n                 geo=dict(scope='north america',\n                          projection=dict(type=\"azimuthal equal area\"),\n                          showlakes=True,\n                          showland=True,\n                          lakecolor='rgb(95,145,237)',\n                          landcolor='rgb(250,250,250)'\n                         ),\n                  showlegend=False\n                 )\n    \n    fig = dict(data=data, layout=layout)\n    return py.iplot(fig, validate=False, filename='Delay_Route_2015_{}'.format(airline))","6f947118":"delay_time_route('DL')","e6e57411":"delay_time_route('AA')","cdaa004e":"delay_time_route('HA')","417d5187":"# get the main reason of a delay\n\ndelay_over15min['DELAY_REASON'] = None\nfor reason in delay_over15min.columns[-6:-1]:\n    delay_over15min['DELAY_REASON'][delay_over15min[reason]\n                                    \/delay_over15min['ARRIVAL_DELAY'] > 0.5] = reason","856cad57":"# find the main delay reason of each airline\n\n# calculate the reason of delays w.r.t the delay time (min)\n# i.e. if a delay occurs, how long is the delay time in this delay reason?\nax = sns.barplot(x='AIRLINE', y='ARRIVAL_DELAY',\n                data=delay_over15min, \n                hue='DELAY_REASON')\nax.set(ylabel='Delay Time (min)')\nplt.show()","5113ce3b":"# calculate the reason caused delays in percentage\n# i.e. if a delay occurs, what is the probability of this delay reason?\ncount_delay_reason = delay_over15min.loc[:, ['AIRLINE', 'AIR_SYSTEM_DELAY',\n                                             'AIRLINE_DELAY', 'LATE_AIRCRAFT_DELAY',\n                                             'SECURITY_DELAY', 'WEATHER_DELAY'\n                                            ]]\ncount_delay_reason.set_index('AIRLINE', inplace=True)\ncount_delay_reason = 100*(((count_delay_reason>0).reset_index().groupby('AIRLINE').sum())\n                      \/count_delay_reason.groupby('AIRLINE').count())\ncount_delay_reason","938718a4":"ax = count_delay_reason.plot.bar(width=0.8)\nax.set(ylabel='Percentage %')\nplt.show()","c3e0430e":"# Data Overview","b82069e5":"<p>\n<center>\n<font size=\"6\">\nVisualization: Flight Delay\n<\/font>\n<\/center>\n<\/p>\n\n<p>\n<center>\n<font size=\"4\">\nBy Gaofeng Huang\n<\/font>\n<\/center>\n<\/p>\n\n<p>\n<center>\n<font size=\"3\">\n<a href=\"https:\/\/www.kaggle.com\/usdot\/flight-delays#flights.csv\">\n    Source: 2015 Flight Delays and Cancellations \n    <\/a>\n<\/font>\n<\/center>\n<\/p>","4c7031dd":"Comparing with the previous bar chart, weather delays are less probable occured. However, if a weather delay happens, it will cause a longer delay time in average.","97adbac8":"## Airlines","a44feadf":"### Variables (Column Names)\n\n**MONTH**: Month of the Flight Trip  \n**DAY**: Day of the Flight Trip  \n**DAY_OF_WEEK**: Day of week of the Flight Trip  \n**AIRLINE**: Airline Identifier  \n**ORIGIN_AIRPORT**: Starting Airport  \n**DESTINATION_AIRPORT**: Destination Airport  \n**DEPARTURE_DELAY**: Total Delay on Departure  \n**ARRIVAL_DELAY**: ARRIVAL_TIME - SCHEDULED_ARRIVAL  \n**DISTANCE**: Distance between two airports  \n\n**DELAY_OR_NOT**: True (ARRIVAL_DELAY > 0), False (ARRIVAL_DELAY <= 0)\n\n**AIR_SYSTEM_DELAY**: Delay caused by air system  \n**SECURITY_DELAY**: Delay caused by security  \n**AIRLINE_DELAY**: Delay caused by the airline  \n**LATE_AIRCRAFT_DELAY**: Delay caused by aircraft  \n**WEATHER_DELAY**: Delay caused by weather  ","b339f530":"## Data Analysis and Visualization\n### Departure Delay and Arrival Delay","92604faa":"### Raw Variables (Column Names)\n**YEAR**: Year of the Flight Trip  \n**MONTH**: Month of the Flight Trip  \n**DAY**: Day of the Flight Trip  \n**DAY_OF_WEEK**: Day of week of the Flight Trip  \n**AIRLINE**: Airline Identifier  \n**FLIGHT_NUMBER**: Flight Identifier  \n**TAIL_NUMBER**: Aircraft Identifier  \n**ORIGIN_AIRPORT**: Starting Airport  \n**DESTINATION_AIRPORT**: Destination Airport  \n**SCHEDULED_DEPARTURE**: Planned Departure Time  \n**DEPARTURE_TIME**: WHEEL_OFF - TAXI_OUT  \n**DEPARTURE_DELAY**: Total Delay on Departure  \n**TAXI_OUT**: The time duration elapsed between departure from the origin airport gate and wheels off  \n**WHEELS_OFF**: The time point that the aircraft's wheels leave the ground  \n**SCHEDULED_TIME**: Planned time amount needed for the flight trip  \n**ELAPSED_TIME**: AIR_TIME + TAXI_IN + TAXI_OUT  \n**AIR_TIME**: The time duration between wheels_off and wheels_on time  \n**DISTANCE**: Distance between two airports  \n**WHEELS_ON**: The time point that the aircraft's wheels touch on the ground  \n**TAXI_IN**: The time duration elapsed between wheels-on and gate arrival at the destination airport  \n**SCHEDULED_ARRIVAL**: Planned arrival time  \n**ARRIVAL_TIME**: WHEELS_ON + TAXI_IN  \n**ARRIVAL_DELAY**: ARRIVAL_TIME - SCHEDULED_ARRIVAL  \n**DIVERTED**: Aircraft landed on airport that out of schedule  \n**CANCELLED**: Flight Cancelled (1 = cancelled)  \n**CANCELLATION_REASON**: Reason for Cancellation of flight: A - Airline\/Carrier; B - Weather; C - National Air System; D - Security  \n**AIR_SYSTEM_DELAY**: Delay caused by air system  \n**SECURITY_DELAY**: Delay caused by security  \n**AIRLINE_DELAY**: Delay caused by the airline  \n**LATE_AIRCRAFT_DELAY**: Delay caused by aircraft  \n**WEATHER_DELAY**: Delay caused by weather  ","2fe21368":"## Airports"}}