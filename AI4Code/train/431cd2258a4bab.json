{"cell_type":{"2f5fc92d":"code","d9de9fd4":"code","fbe1d66a":"code","ea8c81e1":"code","bd1dec85":"code","f9faa5eb":"code","30a177ed":"markdown","08c54c5d":"markdown","74100598":"markdown","8e7c2dbb":"markdown","f0253499":"markdown"},"source":{"2f5fc92d":"# Imports\nimport numpy as np\nimport pandas as pd\nimport time \nimport numpy as np\nimport pandas as pd\nimport warnings\nwarnings.filterwarnings('ignore')","d9de9fd4":"spread_df = []\nyears_list = [20, 19, 18,17,16,15,14,13,12,11,10,'09','08','07','06','05','04','03']\nyear_int = 2021\nfor year in years_list: \n    temp_spread_df = pd.read_csv(\"..\/input\/moredata2\/Data\/Point spreads\/ncaabb\" + str(year) + \".csv\")\n    temp_spread_df['Season'] = year_int\n    year_last = year\n    year_int = year_int-1    \n    if year==20:\n        spread_df = temp_spread_df\n    else:\n        spread_df = spread_df.append(temp_spread_df)\nspread_df['home'] = spread_df['home'].str.lower()\nspread_df['road'] = spread_df['road'].str.lower()\n\n# Match Team IDs to data\n\nteams_df = pd.read_csv('..\/input\/ncaam-march-mania-2021\/MTeamSpellings.csv', sep='\\,', engine='python', encoding='cp1252')\n\nteams_df.head()\n\nteam_list = ['home','road']\nfor team in team_list:\n    spread_df = pd.merge(spread_df, teams_df, left_on=[team], right_on = ['TeamNameSpelling'], how='left')\n    if team=='home':\n        spread_df.rename(columns={'TeamID': 'HTeamID'}, inplace=True)\n    if team=='road':\n        spread_df.rename(columns={'TeamID': 'RTeamID'}, inplace=True)\n    spread_df = spread_df.drop(['TeamNameSpelling'], axis=1)\n\n\nspread_df.loc[spread_df['hscore']>spread_df['rscore'], 'WTeamID'] = spread_df['HTeamID']\nspread_df.loc[spread_df['hscore']<spread_df['rscore'], 'LTeamID'] = spread_df['HTeamID']\n\nspread_df.loc[spread_df['hscore']>spread_df['rscore'], 'WScore'] = spread_df['hscore']\nspread_df.loc[spread_df['hscore']<spread_df['rscore'], 'LScore'] = spread_df['hscore']\n\nspread_df.loc[spread_df['rscore']>spread_df['hscore'], 'WTeamID'] = spread_df['RTeamID']\nspread_df.loc[spread_df['rscore']<spread_df['hscore'], 'LTeamID'] = spread_df['RTeamID']\n\nspread_df.loc[spread_df['rscore']>spread_df['hscore'], 'WScore'] = spread_df['rscore']\nspread_df.loc[spread_df['rscore']<spread_df['hscore'], 'LScore'] = spread_df['rscore']\n\nspread_df.replace([np.inf, -np.inf], np.nan).dropna(subset=['WTeamID','LTeamID','WScore','LScore','line'])\nspread_df = spread_df[spread_df['WScore'] != \".\"]\nspread_df = spread_df[spread_df['LScore'] != \".\"]\nspread_df = spread_df[spread_df['line'] != \".\"]\n\nspread_df['line'].value_counts(dropna=False)\n\n#drop spreads with bad coverage\nspread_df = spread_df.drop(['line7ot','lineargh','lineash','lineashby','linedd','linedunk','lineer','linegreen','linemarkov','linemass','linepib','linepig','linepir','linepiw','linepom','lineprophet','linerpi','lineround','linesauce','lineseven','neutral','lineteamrnks','linetalis','lineespn','linemassey','linedonc','linesaggm','std','linepugh','linefox','linedok','lineopen'], axis=1)\n\nspread_df.tail()\n\nspread_df.dropna(subset=['line'])\nspread_df","fbe1d66a":"kp_df = []\nyears_list = [2021, 2020, 2019,2018,2017,2016,2015,2014,2013,2012,2011,\n              2010,2009,2008,2007,2006,2005,2004,2003,2002]\n\nfor year in years_list:\n    temp_kp_df = pd.read_csv(\"..\/input\/moredata2\/Data\/Ken Pom\/KP\" + str(year) + \"_final.csv\",  index_col=False)\n    temp_kp_df=temp_kp_df.rename(columns={'adj_o': 'adjo', 'adj_d': 'adjd', 'conference': 'conf'})\n    temp_kp_df['Season'] = year\n    year_last = year   \n    if year==2021:\n        kp_df = temp_kp_df\n    else:\n        kp_df = kp_df.append(temp_kp_df)\n\n    kp_df['Season'].value_counts(dropna=False)\n\nkp_df['team'] = kp_df['team'].str.lower()\n\n# Match Team IDs to data\n\nteams_df = pd.read_csv('..\/input\/ncaam-march-mania-2021\/MTeamSpellings.csv', sep='\\,', engine='python', encoding='cp1252')\nteams_df.head()\n\nkp_df = pd.merge(kp_df, teams_df, left_on=['team'], right_on = ['TeamNameSpelling'], how='left')\nkp_df = kp_df.drop(['TeamNameSpelling'], axis=1)\n\nkp_df['Season'].value_counts(dropna=False)\nkp_df.head()\n\n# Write the data to a csv\nkp_df.to_csv('kenpom.csv', index=False)\nkp_df = kp_df.drop(['Unnamed: 0', 'adjem'], 1)\nkp_df.to_csv('kenpom.csv', index=False)\nkp_df","ea8c81e1":"spread_df.to_csv('.\/spread.csv')","bd1dec85":"\n# Load packages\n\nimport numpy as np\nimport pandas as pd\n\n\n# Combine all tournament and reg season games\n\ntourney_compact_df = pd.read_csv('..\/input\/ncaam-march-mania-2021\/MNCAATourneyCompactResults.csv')\ntourney_compact_df['is_tourney'] = 1.0\n\nregseason_compact_df = pd.read_csv('..\/input\/ncaam-march-mania-2021\/MRegularSeasonCompactResults.csv')\nregseason_compact_df['is_tourney'] = 0.0\n\nall_games_df = regseason_compact_df.append(tourney_compact_df)\nall_games_df.head()\n\nall_games_df.tail()\n\n\n# Load and merge on point spread\n\nspread_df = pd.read_csv('.\/spread.csv')\nspread_df = spread_df[['Season','date','line','lineavg','road','home','rscore','hscore','WScore','LScore','HTeamID','RTeamID','WTeamID','LTeamID']]\n\n# Merge point spread on to games\n\nall_games_df = pd.merge(all_games_df, spread_df, left_on=['WTeamID','LTeamID','Season','WScore','LScore'], right_on = ['WTeamID','LTeamID','Season','WScore','LScore'], how='inner')\nall_games_df = all_games_df[['Season','date','is_tourney','home','HTeamID','hscore','road','RTeamID','rscore','line','lineavg']]\n\nall_games_df['Hwin'] = 0\nall_games_df.loc[all_games_df['hscore']>all_games_df['rscore'], 'Hwin'] = 1      \n\nall_games_df\n\n# # Add seeds\n\nseeds_df = pd.read_csv('..\/input\/ncaam-march-mania-2021\/MNCAATourneySeeds.csv')\nseeds_df['Seed_num'] = seeds_df['Seed'].str.extract('(\\d\\d)', expand=True)\nseeds_df['Seed_num'] = pd.to_numeric(seeds_df['Seed_num'])\nseeds_df = seeds_df[['Season','TeamID','Seed_num']]\nseeds_df.rename(columns={'Seed_num': 'Seed'}, inplace=True)\nseeds_df\n\n#Note: we merge twice for this merge and subsequent merges, because the data are in a wide format by team (i.e., there are two variables rather than two rows for each game)\nhome_road = ['H','R']\nfor hr in home_road:\n    all_games_df = pd.merge(all_games_df, seeds_df, left_on=[hr+'TeamID','Season'], right_on = ['TeamID','Season'], how='left')\n    all_games_df.rename(columns={'Seed': hr+'Seed'}, inplace=True)\n    all_games_df = all_games_df.drop(['TeamID'], axis=1)\n\nall_games_df\n\n\nkp_df = pd.read_csv('.\/kenpom.csv')\n\nefficiency_list = ['conf','adjem','adjo','adjd','luck']\nfor hr in home_road:\n    all_games_df = pd.merge(all_games_df, kp_df, left_on=[hr+'TeamID','Season'], right_on = ['TeamID','Season'], how='inner')\n    for metric in efficiency_list:\n        all_games_df.rename(columns={metric: hr+metric}, inplace=True)\n    all_games_df = all_games_df.drop(['TeamID','team'], axis=1)\n\n\n\n# Add Massey and Ken Pom rankings\n\nmassey_df = pd.read_csv('..\/input\/ncaam-march-mania-2021\/MMasseyOrdinals.csv')\nmassey_df21 = massey_df.loc[massey_df['Season'] == 2021]\n\n#Ranking at the end of season versus end of tourney (as shown in KP data)\nPOM_df_else = massey_df[massey_df['SystemName'].str.contains(\"POM\")]\nPOM_end_df_else = POM_df_else.loc[POM_df_else['RankingDayNum'] == 133]\nPOM_df21 = massey_df21[massey_df21['SystemName'].str.contains(\"POM\")]\nPOM_end_df_21 = POM_df21.loc[POM_df21['RankingDayNum'] == 128]\nPOM_end_df = POM_end_df_else.append(POM_end_df_21)\nPOM_end_df = POM_end_df[['Season','TeamID','OrdinalRank']]\nPOM_end_df.rename(columns={'OrdinalRank': 'RankPOM'}, inplace=True)\n\nfor hr in home_road:\n    all_games_df = pd.merge(all_games_df,POM_end_df, left_on=[hr+'TeamID','Season'], right_on = ['TeamID','Season'], how='left')\n    all_games_df.rename(columns={'RankPOM': hr+'RankPOM'}, inplace=True)\n    all_games_df = all_games_df.drop(['TeamID'], axis=1)\n\n# Calculate regular season avg stats\n\nregseason_detail_df = pd.read_csv('..\/input\/ncaam-march-mania-2021\/MRegularSeasonDetailedResults.csv')\nregseason_detail_df\n\n\n\n#Attach the POM data\nteamslist = ['W','L']\nfor wl in teamslist:\n    regseason_detail_df = pd.merge(regseason_detail_df, POM_end_df, left_on=[wl+'TeamID','Season'], right_on = ['TeamID','Season'], how='left')\n    regseason_detail_df.rename(columns={'RankPOM': wl+'RankPOM'}, inplace=True)\n    regseason_detail_df = regseason_detail_df.drop(['TeamID'], axis=1)\n\n# Regular season (create one row for each team with avg stats and win info)\n\nwin_team_only = regseason_detail_df.drop(['LTeamID','WAst','LAst','LStl','WStl','LBlk','WBlk','LPF','WPF','NumOT','DayNum'], axis=1)\nwin_team_only.rename(columns={'WTeamName': 'TeamName'}, inplace=True)\nwin_team_only.rename(columns={'WTeamID': 'TeamID'}, inplace=True)\n\nteam_factors_list = ['Score','FGM','FGA','FGA3','FGM3','TO','FTM','FTA','RankPOM']\nfor factor in team_factors_list:\n    win_team_only.rename(columns={'W'+factor: factor}, inplace=True)\n    win_team_only.rename(columns={'L'+factor: 'Opponent'+factor}, inplace=True)\n\nwin_team_only['wins'] = 1 \n\nwin_team_only['wins_top25'] = 0\nwin_team_only.loc[win_team_only['OpponentRankPOM']<26, 'wins_top25'] = 1\n\nwin_team_only['wins_top5'] = 0\nwin_team_only.loc[win_team_only['OpponentRankPOM']<6, 'wins_top5'] = 1\n\nwin_team_only = win_team_only[['Season','TeamID','wins','wins_top25','wins_top5','Score','OpponentScore','FGM','FGA','OpponentFGM','OpponentFGA','FGM3','FGA3','OpponentFGM3','OpponentFGA3','FTM','FTA','OpponentFTM','OpponentFTA','TO','OpponentTO']]\n\nloss_team_only = regseason_detail_df.drop(['WTeamID','WAst','LAst','LStl','WStl','LBlk','WBlk','LPF','WPF','NumOT','DayNum'], axis=1)\nloss_team_only.rename(columns={'LTeamName': 'TeamName'}, inplace=True)\nloss_team_only.rename(columns={'LTeamID': 'TeamID'}, inplace=True)\n\nfor factor in team_factors_list:\n    loss_team_only.rename(columns={'L'+factor: factor}, inplace=True)\n    loss_team_only.rename(columns={'W'+factor: 'Opponent'+factor}, inplace=True)\n\nloss_team_only['wins'] = 0\nloss_team_only['wins_top25'] = 0\nloss_team_only['wins_top5'] = 0\n\nloss_team_only = loss_team_only[['Season','TeamID','wins','wins_top25','wins_top5','Score','OpponentScore','FGM','FGA','OpponentFGM','OpponentFGA','FGM3','FGA3','OpponentFGM3','OpponentFGA3','FTM','FTA','OpponentFTM','OpponentFTA','TO','OpponentTO']]\n\nreg_season_all = win_team_only.append(loss_team_only)\n\nreg_season_all['TOmargin'] = reg_season_all['TO']-reg_season_all['OpponentTO']\n\nreg_season_all['PointMargin'] = reg_season_all['Score']-reg_season_all['OpponentScore']\n\nreg_season_all['FG'] = reg_season_all['FGM']\/reg_season_all['FGA']\nreg_season_all['FGopponent'] = reg_season_all['OpponentFGM']\/reg_season_all['OpponentFGA']\n\nreg_season_all['FG3'] = reg_season_all['FGM3']\/reg_season_all['FGA3']\nreg_season_all['FG3opponent'] = reg_season_all['OpponentFGM3']\/reg_season_all['OpponentFGA3']\n\nreg_season_all['FT'] = reg_season_all['FTM']\/reg_season_all['FTA']\n\nreg_season_all = reg_season_all.drop(['TO','OpponentTO','FGM','FGA','OpponentFGA','OpponentFGM','FGM3','FGA3','OpponentFGM3','OpponentFGA3','FTM','FTA','OpponentFTM','OpponentFTA'], axis=1)\nreg_season_all\n\n\n# Collapse regular season sums\/means\n\nreg_season_means = reg_season_all.groupby(['TeamID','Season']).mean().reset_index()\nreg_season_means = reg_season_means.drop(['wins','wins_top25','wins_top5'], axis=1)\n\nreg_season_sum = reg_season_all.groupby(['TeamID','Season']).sum().reset_index()\nreg_season_sum = reg_season_sum.drop(['Score','OpponentScore','TOmargin','PointMargin','FG','FG3','FGopponent','FG3opponent','FT'], axis=1)\n\nregseason_df = pd.merge(reg_season_means, reg_season_sum, left_on=['TeamID','Season'], right_on = ['TeamID','Season'], how='left')\n\nregseason_df.to_csv('regseason_df.csv', index=False)\n\n\n# Combine regular season stats with game level data\n\n#Merge the avg regular season performance with all games and have performance wide: \nperformance_list = ['wins','wins_top5','wins_top25','Score','OpponentScore','TOmargin','PointMargin','FG','FGopponent','FG3','FG3opponent','FT','RBMargin']\nfor hr in home_road:\n    all_games_df = pd.merge(all_games_df, regseason_df, left_on=[hr+'TeamID','Season'], right_on = ['TeamID','Season'], how='left')\n    for var in performance_list:\n        all_games_df.rename(columns={var: hr+var}, inplace=True)\n    all_games_df = all_games_df.drop(['TeamID'], axis=1)\n\n# Add binary experience dummy\n\ntemp_df = all_games_df[all_games_df['is_tourney'] == 1]\ntemp_df_home = temp_df[['home']]\ntemp_df_home.rename(columns={'home': 'team'}, inplace=True)\ntemp_df_road = temp_df[['road']]\ntemp_df_road.rename(columns={'road': 'team'}, inplace=True)\ntourney_teams_df = temp_df_home.append(temp_df_road)\ntourney_teams_df['team'].value_counts(dropna=False)\n\nall_games_df['Htourny20plus'] = 0\nall_games_df['Rtourny20plus'] = 0\n\nexperienced_teams = ['kansas','north carolina','kentucky','duke','michigan st.','wisconsin','florida','villanova','gonzaga','louisville','arizona','xavier','connecticut','syracuse','butler','ohio st.','ucla','west virginia','texas','michigan','pittsburgh','memphis','oregon']\nfor team in experienced_teams:\n    all_games_df.loc[all_games_df['home']==team, 'Htourny20plus'] = 1\n    all_games_df.loc[all_games_df['road']==team, 'Rtourny20plus'] = 1\n\ntemp_df = all_games_df[all_games_df['is_tourney'] == 1]\ntemp_df_home = temp_df[['Hconf']]\ntemp_df_home.rename(columns={'Hconf': 'conf'}, inplace=True)\ntemp_df_road = temp_df[['Rconf']]\ntemp_df_road.rename(columns={'Rconf': 'conf'}, inplace=True)\ntourny_teams_df = temp_df_home.append(temp_df_road)\ntourny_teams_df['conf'].value_counts(dropna=False)\n\nall_games_df['HBig4Conf'] = 0\nall_games_df['RBig4Conf'] = 0\nconferences = ['ACC','B10','B12','SEC']\nfor conf in conferences:\n    all_games_df.loc[all_games_df['Hconf']==conf, 'HBig4Conf'] = 1\n    all_games_df.loc[all_games_df['Rconf']==conf, 'RBig4Conf'] = 1\n\n#mean imputations of variables for model\nall_games_df = all_games_df.fillna(all_games_df.mean())\n\n# Output to csv\n\nall_games_df.to_csv('all_games_df.csv', index=False)\nall_games_df.sample(10)","f9faa5eb":"all_games_df.describe()","30a177ed":"## Combining Data","08c54c5d":"## Using Kenpom Data","74100598":"# Using External Data\n---\n# If you fork, do leave an upvote!","8e7c2dbb":"## Using Point Spread Data\nCredit goes to Dave Lorenz. Check out his github repo and leave a star there as well\nhttps:\/\/github.com\/DaveLorenz\/NCAAMarchMadnessNN","f0253499":"---\n# Give this notebook an upvote!"}}