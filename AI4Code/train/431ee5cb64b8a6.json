{"cell_type":{"b311f32d":"code","9a026d6d":"code","a50cf5e9":"code","0c68c273":"code","294ad22e":"code","356a2b54":"code","17f0d27a":"code","2a8192c2":"code","bd5a5943":"code","b7174a29":"code","b0ac6777":"code","49bda27b":"code","84ddc2c1":"code","33315009":"code","bd3a3050":"code","bf0b0d15":"code","e150cf58":"code","6ca40f96":"code","7d5bcbdd":"code","aa016a46":"code","48e83d24":"code","f16ad17e":"code","0f6b991c":"code","e6d535a6":"code","f41c17ae":"code","73bd0bd9":"code","27e106b7":"markdown"},"source":{"b311f32d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport nltk\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","9a026d6d":"data1 = open('..\/input\/amazon_cells_labelled.txt')","a50cf5e9":"text=data1.read()","0c68c273":"import re\nsent=re.findall(r'.*\\n',text)\nsent","294ad22e":"sent=[(line[:-3],int(line[-2])) for line in sent]\nsent","356a2b54":"data=pd.DataFrame(sent,columns=['review','score'])","17f0d27a":"data","2a8192c2":"print(sum(data['score'])) #equally mixed data","bd5a5943":"import string\nfrom nltk.corpus import stopwords\nfrom nltk.stem import PorterStemmer\nps=PorterStemmer()\ndef pre_process(text):\n    clean_text=[char for char in text if char not in string.punctuation]\n    clean_text=\"\".join(clean_text)\n    clean_text=[words.lower() for words in clean_text.split()]\n    clean_text=[words for words in clean_text if words not in stopwords.words('english')]\n#     clean_text=[ps.stem(words) for words in clean_text]\n    return clean_text\n#     send=[]\n#     for i in range(len(clean_text)):\n#         if i+1<=len(clean_text)-1:\n#             send.append((clean_text[i],clean_text[i+1]));\n#     return send\n\npre_process(\"Hello i am a singer and singing\")","b7174a29":"from sklearn.feature_extraction.text import CountVectorizer\nx = CountVectorizer(analyzer=pre_process).fit(data['review'])","b0ac6777":"len(x.vocabulary_)","49bda27b":"x = x.transform(data['review'])\nprint(x)","84ddc2c1":"print(x.shape)","33315009":"y=data['score']","bd3a3050":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=101)","bf0b0d15":"print(x_train.shape)\nprint(y_train.shape)\nprint(x_test.shape)\nprint(y_test.shape)","e150cf58":"from sklearn.naive_bayes import MultinomialNB\nnb=MultinomialNB()\nnb.fit(x_train,y_train)","6ca40f96":"pred=nb.predict(x_test)","7d5bcbdd":"from sklearn.metrics import accuracy_score\nprint(\"ACCURACY : \"+str(accuracy_score(y_test,pred)))","aa016a46":"from sklearn.metrics import confusion_matrix, classification_report\nprint(confusion_matrix(y_test, pred))\nprint('\\n')\nprint(classification_report(y_test, pred))","48e83d24":"from sklearn import svm\nsvmc=svm.SVC(C=1.0, kernel='linear', degree=3, gamma='auto')\nsvmc.fit(x_train,y_train)","f16ad17e":"pred1=svmc.predict(x_test)\nprint(\"ACCURACY : \"+str(accuracy_score(y_test,pred1)))","0f6b991c":"from sklearn.metrics import confusion_matrix, classification_report\nprint(confusion_matrix(y_test, pred1))\nprint('\\n')\nprint(classification_report(y_test, pred1))","e6d535a6":"test=\"I don't like this charger\"\nx = CountVectorizer(analyzer=pre_process).fit(data['review'])\ntest=x.transform([test])\nnb.predict(test)[0]","f41c17ae":"test='Waste product and failure woks'\nx = CountVectorizer(analyzer=pre_process).fit(data['review'])\ntest=x.transform([test])\nsvmc.predict(test)[0]","73bd0bd9":"test='Belt is not good quality... not worth for money'\nx = CountVectorizer(analyzer=pre_process).fit(data['review'])\ntest=x.transform([test])\nsvmc.predict(test)[0]","27e106b7":"**PREDICTION ON SOME CASES**"}}