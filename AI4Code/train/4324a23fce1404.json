{"cell_type":{"c4116462":"code","a01c0c84":"code","ed7199b3":"code","1201b8d5":"code","8a5ecc27":"code","2097d36b":"code","e94c305b":"code","9b9b874c":"code","46530caf":"code","1678fe19":"code","e23735fc":"code","952f6996":"code","95ca36a1":"code","2f5ac126":"code","9ef6284a":"code","c1009a13":"code","3810c148":"code","b2a62197":"code","7cc7eba9":"markdown","6a7ffdd9":"markdown","8e03775e":"markdown","28905685":"markdown","1ed491ec":"markdown","85cb6f96":"markdown","7bb4ad54":"markdown","2a3306c1":"markdown","80b1aa42":"markdown","d8904f3b":"markdown","911898eb":"markdown","5110f470":"markdown","2e1710be":"markdown","239e7a1c":"markdown","dd4cecc1":"markdown","bd638d3f":"markdown"},"source":{"c4116462":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a01c0c84":"df = pd.read_csv(\"\/kaggle\/input\/youtube-new\/GBvideos.csv\")\ndf.head()","ed7199b3":"x = 10 # Global\ndef f():\n    x = 15 # Local\n    return x\nprint(x)\nprint(f())","1201b8d5":"x = 5 # burada x = 5 olarak tan\u0131mlanm\u0131\u015f (Global).\ndef f():\n    y = 2*x # fakat burada x tan\u0131mlanmam\u0131\u015f (Local).\n    return y\nprint(f()) # f'yi ekrana yazd\u0131r\u0131yoruz\n# x'i 5 olarak tan\u0131ml\u0131yor ve 2 ile \u00e7arp\u0131yor. e\u011fer x tan\u0131ml\u0131 olsayd\u0131 farkl\u0131 bir sonu\u00e7 \u00e7\u0131kard\u0131.","8a5ecc27":"import builtins # builtins'i \u00e7a\u011f\u0131r\u0131yoruz\ndir(builtins) # builtins'in komutlar\u0131na bak\u0131yoruz\n# G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi bunlar python taraf\u0131ndan tan\u0131mlanm\u0131\u015f komutlar. Bu komutlardan variable yap\u0131lmas\u0131 yanl\u0131\u015ft\u0131r, yoksa istenmedik sonu\u00e7lar elde edebilirsiniz.","2097d36b":"def f(a, b = 1, c = 2): # Bu kod sat\u0131r\u0131nda a'ya de\u011fer verilmemei\u015f b = 1, c = 2 denilmi\u015f.\n    y = a + b \/ c # y = a + 1 + 2\n    return y\nprint(f(5)) # E\u011fer bu komudu yazmasayd\u0131k cevap hata vericekti. \u00c7\u00fcnk\u00fc str ile int toplanmaz ve burada da a'n\u0131n de\u011ferini 5 olarak kodlad\u0131k. Cevap 5 + 1 \/ 2 = 5.5\nprint(f(5,7,1)) # Burada ise a = 5, b = 7, c = 1 olarak kodlad\u0131k. Cevap 12\n# Bu bir defauld arguments'dir.\n# Ayn\u0131 zamanda cevaplar fload say\u0131lard\u0131r.","e94c305b":"def f(*args): # *args bir liste olarak d\u00fc\u015f\u00fcnebilirsiniz. Her farkl\u0131 say\u0131 yazmak i\u00e7in print(\"\") olan k\u0131sma kadar yazmak yerine *args komudunu yazarak karma\u015fadan ve zamandan tasaruf edebilirsiniz.\n    for i in args:\n        print(i)\nf(1) # f'mizin de\u011feri 1\nprint(\"\")\nf(1,2,3,4) # burada *args komudunu kullanarak f'nin de\u011ferini de\u011fi\u015ftiriyoruz. 1,2,3,4","9b9b874c":"def f(**kwargs): # **kwargs dictionary'ler i\u00e7in kullan\u0131lan *args gibi d\u00fc\u015f\u00fcnebilirsiniz. \u0130smide zaten kwARGS.\n    for key, value in kwargs.items(): # kwargs'\u0131n i\u00e7indeki key ve value'lar\u0131n\u0131 al\u0131yoruz\n        print(key, \" \", value) # key ve value'lar\u0131 yazd\u0131r\u0131yoruz\nf(country = 'spain', capital = 'madrid', population = 123456) # key = country, capital, population value = spain, madrid, 123456","46530caf":"square = lambda x: x**2 # square = lambda x: (de\u011fer)**2\nprint(square(4)) # square 4 de\u011feri verdik ve karesini bulduk. Cevap 16\ntot = lambda x,y,z: x+y+z\nprint(tot(1,2,3)) # x = 1, y = 2, z = 3","1678fe19":"x = int(input(\"Tavan Say\u0131s\u0131: \"))\nsquare = lambda x: x**2\nprint(square(x))\n# inputlu \u015fekli.","e23735fc":"i = 1\nS = int(input(\"Tavan Say\u0131s\u0131: \"))\nwhile i <= S:\n    kare = S * S\n    print(kare)\n    break\n# karesini bulmak i\u00e7in bu yolda olabilir ama a\u00e7\u0131klamada dedi\u011fim gibi kod ve zaman tasarufu sa\u011fl\u0131yor.","952f6996":"number_list = [1,2,3] # G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi birden fazla arguments alabiliyor.\ny = map(lambda x:x**2,number_list) # Burada yap\u0131lan i\u015flem 1'i al\u0131yor 1 ile \u00e7arp\u0131yor, 2'yi al\u0131yor 2 ile \u00e7arp\u0131yor, 3'\u00fc al\u0131yor 3 ile \u00e7arp\u0131yor.\nprint(list(y)) # Sonrada y'yi yaz\u0131yor.","95ca36a1":"name = \"Data Science\"\nit = iter(name) # iterators.\nprint(next(it)) # next y\u00f6ntemi kullan\u0131yor, \"Data Science\"'nin ilk harfi \"D\" oldu\u011fundan dolay\u0131 D yaz\u0131l\u0131yor.\nprint(*it) # *it komudu ile geri kalan harfler yaz\u0131l\u0131yor.","2f5ac126":"list1 = [1,2,3,4]\nlist2 = [5,6,7,8]\nz = zip(list1,list2) # zip komudu ile liste1'i ve liste2'yi birle\u015ftiriyoruz.\nprint(z)\nz_list = list(z)\nprint(z_list)","9ef6284a":"un_zip = zip(*z_list) # iki listeyi i\u00e7inde bulunduran listemizin ba\u015f\u0131na * ekleyip ayr\u0131\u015ft\u0131r\u0131yoruz\nun_list1,un_list2 = list(un_zip) # un_zip tekrardan tek bir liste haline getirdi\u011fi listelerin type'n\u0131 \"tuple\" olarak kaydeder \nprint(un_list1)\nprint(un_list2)\nprint(type(un_list2))\n# listelerimizin type'n\u0131 list'e d\u00f6n\u00fc\u015ft\u00fcrmek istersek alttaki komudu kullan\u0131yoruz.\nprint(type(list(un_list1))) # tuple'yi list'e d\u00f6n\u00fc\u015ft\u00fcrd\u00fck","c1009a13":"num1 = [1,2,3] # Bir liste olu\u015fturduk\nnum2 = [i + 1 for i in num1 ] # num2 (yeni liste) = num1 listesi ama i = 1 ise +1 ekle yada i = 2 ise +1 ekle diyoruz.\nprint(num2)","3810c148":"num1 = [5,10,15] \nnum2 = [i**2 if i == 10 else i-5 if i < 7 else i+5 for i in num1] # num1 listesini dola\u015f i'ye o say\u0131lar\u0131n de\u011ferini ver\n# e\u011fer i 10'a e\u015fitse karesini al, e\u011fer i 7'den k\u00fc\u00e7\u00fckse 5 ile \u00e7\u0131kar, hi\u00e7biri de\u011filse 5 ile topla.\nprint(num2)","b2a62197":"# Likes ortalamas\u0131n\u0131 bulma.\nthreshold = sum(df.likes)\/len(df.likes) # t\u00fcm datan\u0131n likesi topluyorum uzunlu\u011funa b\u00f6l\u00fcyorum.\nprint(\"Ortalama:\",threshold)\ndf[\"likes_number\"] = [\"fazla\" if i > threshold else \"az\" for i in df.likes] # likes say\u0131s\u0131 ortalamadan fazla ise fazla de\u011filse az yaz\ndf.loc[:10,[\"likes_number\",\"likes\"]] # ilk 10 likes de\u011feri.","7cc7eba9":"lambda function gibi ama fark\u0131 birden fazla arguments alabiliyor olmas\u0131d\u0131r.","6a7ffdd9":"zip lists, iki yada daha fazla listeyi birle\u015ftirmeye yar\u0131yan komutdur","8e03775e":"un_zip komudu birle\u015ftirdi\u011fimiz listeleri ayr\u0131\u015ft\u0131rmam\u0131z\u0131 sa\u011fl\u0131yor","28905685":"LAMBDA FUNCTION","1ed491ec":"zip lists","85cb6f96":"ITERATORS","7bb4ad54":"1. Scope variable'larla ilgili konudur. Asl\u0131nda bu konuyu bilmesek bile python'a az \u00e7ok hakimseniz bu konuyu kullan\u0131yorsunuzdur.\n2. global: Main variable.\n3. local: Tan\u0131mlanmam\u0131\u015f variable. \n4. built in scope: Python'\u0131n \u00f6nceden kendisi tan\u0131mlad\u0131\u011f\u0131 mod\u00fcl variable'lar.","2a3306c1":"D\u00f6ng\u00fcler ile yeni liste olu\u015fturulmas\u0131na \"List Comprehension\" denir.","80b1aa42":"Bu konu daha az komut sat\u0131r\u0131 ve zaman harc\u0131man\u0131za yar\u0131yor.","d8904f3b":"Varsay\u0131lan (fabrika \u00e7\u0131k\u0131\u015f\u0131) ve esnek arg\u00fcmanlar","911898eb":"1. \u0130terators komudu liste, string, dictionaries'lara gelir.\n2. \"next\" y\u00f6ntemiyle sonraki de\u011feri \u00fcretir.","5110f470":"SCOPE","2e1710be":"ANONYMOUS FUNCT\u0130ON","239e7a1c":"LIST COMPREHENS\u0130ON","dd4cecc1":"un_zip","bd638d3f":"DEFAULT AND FLEXIBLE ARGUMENTS"}}