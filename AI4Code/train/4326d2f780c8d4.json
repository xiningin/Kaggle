{"cell_type":{"699c4ac6":"code","76f66b7f":"code","95ffe620":"code","80d23d50":"code","172da131":"code","096c750f":"code","0aa21b68":"code","7ed48a1c":"code","ed030411":"code","86f5976e":"code","816272d2":"code","9278f3a5":"code","9d4d63db":"code","b4a4850a":"code","82df8627":"code","a0b29147":"code","707d8b02":"code","8855c3c1":"code","b11d81d7":"code","7c438527":"code","13aea5a8":"code","583a1341":"code","ca258702":"code","a34abff5":"code","ef2a0d5a":"code","62c2c418":"code","875a49f8":"code","9047c169":"markdown"},"source":{"699c4ac6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","76f66b7f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport glob\nimport cv2\nfrom PIL import Image\nl=[]\nimage=[]\nfor i in glob.glob('\/kaggle\/input\/10-monkey-species\/training\/training\/n0\/*.jpg'):\n    img=cv2.imread(i)\n    ar=Image.fromarray(img,'RGB')\n    r=ar.resize((50,50))\n    image.append(np.array(r))\n    l.append('n0')\nfor i in glob.glob('\/kaggle\/input\/10-monkey-species\/training\/training\/n1\/*.jpg'):\n    img=cv2.imread(i)\n    ar=Image.fromarray(img,'RGB')\n    r=ar.resize((50,50))\n    image.append(np.array(r))\n    l.append('n1')\nfor i in glob.glob('\/kaggle\/input\/10-monkey-species\/training\/training\/n2\/*.jpg'):\n    img=cv2.imread(i)\n    ar=Image.fromarray(img,'RGB')\n    r=ar.resize((50,50))\n    image.append(np.array(r))\n    l.append('n2')\nfor i in glob.glob('\/kaggle\/input\/10-monkey-species\/training\/training\/n3\/*.jpg'):\n    img=cv2.imread(i)\n    ar=Image.fromarray(img,'RGB')\n    r=ar.resize((50,50))\n    image.append(np.array(r))\n    l.append('n3')\nfor i in glob.glob('\/kaggle\/input\/10-monkey-species\/training\/training\/n4\/*.jpg'):\n    img=cv2.imread(i)\n    ar=Image.fromarray(img,'RGB')\n    r=ar.resize((50,50))\n    image.append(np.array(r))\n    l.append('n4')\nfor i in glob.glob('\/kaggle\/input\/10-monkey-species\/training\/training\/n5\/*.jpg'):\n    img=cv2.imread(i)\n    ar=Image.fromarray(img,'RGB')\n    r=ar.resize((50,50))\n    image.append(np.array(r))\n    l.append('n5')\nfor i in glob.glob('\/kaggle\/input\/10-monkey-species\/training\/training\/n6\/*.jpg'):\n    img=cv2.imread(i)\n    ar=Image.fromarray(img,'RGB')\n    r=ar.resize((50,50))\n    image.append(np.array(r))\n    l.append('n6')\nfor i in glob.glob('\/kaggle\/input\/10-monkey-species\/training\/training\/n7\/*.jpg'):\n    img=cv2.imread(i)\n    ar=Image.fromarray(img,'RGB')\n    r=ar.resize((50,50))\n    image.append(np.array(r))\n    l.append('n7')\nfor i in glob.glob('\/kaggle\/input\/10-monkey-species\/training\/training\/n8\/*.jpg'):\n    img=cv2.imread(i)\n    ar=Image.fromarray(img,'RGB')\n    r=ar.resize((50,50))\n    image.append(np.array(r))\n    l.append('n8')\nfor i in glob.glob('\/kaggle\/input\/10-monkey-species\/training\/training\/n9\/*.jpg'):\n    img=cv2.imread(i)\n    ar=Image.fromarray(img,'RGB')\n    r=ar.resize((50,50))\n    image.append(np.array(r))\n    l.append('n9')","95ffe620":"len(image)","80d23d50":"l=pd.DataFrame(l)\nfrom sklearn.preprocessing import LabelEncoder\nla=LabelEncoder()\nlabels=la.fit_transform(l)","172da131":"labels","096c750f":"image=np.array(image)","0aa21b68":"import matplotlib.pyplot as plt\nfigure=plt.figure(figsize=(15,10))\nax=figure.add_subplot(121)\nax.imshow(image[0])\nbx=figure.add_subplot(122)\nbx.imshow(image[60])","7ed48a1c":"np.save(\"Images\",image)\nnp.save(\"labels\",labels)","ed030411":"image=np.load(\"Images.npy\",allow_pickle=True)\nlabels=np.load(\"labels.npy\",allow_pickle=True)","86f5976e":"s=np.arange(image.shape[0])\nnp.random.shuffle(s)\nimage=image[s]\nlabels=labels[s]","816272d2":"from keras.preprocessing.image import ImageDataGenerator\ndatagen = ImageDataGenerator(\n    featurewise_center=False,\n    samplewise_center=False,\n    featurewise_std_normalization=False, \n    samplewise_std_normalization=False,\n    rotation_range=60, \n    zoom_range = 0.1, \n    width_shift_range=0.1, \n    height_shift_range=0.1,\n    shear_range=0.1,\n    fill_mode = \"reflect\"\n    )","9278f3a5":"y_class=len(np.unique(labels))","9d4d63db":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(image,labels,test_size=0.1)","b4a4850a":"import keras\ny_train=keras.utils.to_categorical(y_train,y_class)\ny_test=keras.utils.to_categorical(y_test,y_class)","82df8627":"datagen.fit(x_train)","a0b29147":"from keras.models import Sequential\nfrom keras.layers import Dense,Conv2D,MaxPooling2D,Dropout,Flatten,MaxPool2D\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.layers import Activation, Convolution2D, Dropout, Conv2D,AveragePooling2D, BatchNormalization,Flatten,GlobalAveragePooling2D\nfrom keras import layers\nfrom keras.regularizers import l2\nfrom keras.callbacks import ModelCheckpoint,ReduceLROnPlateau","707d8b02":"l2_reg=0.001\nopt=Adam(lr=0.001)","8855c3c1":"model=Sequential()\nmodel.add(Conv2D(filters=16,kernel_size=2,padding=\"same\",activation=\"relu\",input_shape=(50,50,3)))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(Conv2D(filters=32,kernel_size=2,padding=\"same\",activation=\"relu\"))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(Conv2D(filters=64,kernel_size=2,padding=\"same\",activation=\"relu\"))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(Dropout(0.2))\nmodel.add(Flatten())\nmodel.add(Dense(500,activation=\"relu\"))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(10,activation=\"softmax\"))\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.summary()","b11d81d7":"history = model.fit_generator(datagen.flow(x_train,y_train,batch_size=128),epochs= 50,validation_data=(x_test,y_test),steps_per_epoch=50)","7c438527":"scores = model.evaluate(x_test, y_test, verbose=1)\nprint('Test loss:', scores[0])\nprint('Test accuracy:', scores[1])","13aea5a8":"figure=plt.figure(figsize=(15,15))\nax=figure.add_subplot(121)\nax.plot(history.history['accuracy'])\nax.plot(history.history['val_accuracy'])\nax.legend(['Training Accuracy','Val Accuracy'])\nbx=figure.add_subplot(122)\nbx.plot(history.history['loss'])\nbx.plot(history.history['val_loss'])\nbx.legend(['Training Loss','Val Loss'])","583a1341":"t_image=[]\nfor i in glob.glob('\/kaggle\/input\/10-monkey-species\/validation\/validation\/*\/*.jpg'):\n    img=cv2.imread(i)\n    ar=Image.fromarray(img,'RGB')\n    r=ar.resize((50,50))\n    t_image.append(np.array(r))","ca258702":"len(t_image)","a34abff5":"np.save(\"images\",t_image)\nt_images=np.load('images.npy')","ef2a0d5a":"pred=np.argmax(model.predict(t_images),axis=1)\npred_t=la.fit_transform(pred)","62c2c418":"t_img=np.expand_dims(t_images[0],axis=0)\npred1=np.argmax(model.predict(t_img),axis=1)\npred_t1=la.fit_transform(pred1)","875a49f8":"print(pred_t1[0])\nplt.imshow(t_images[0])","9047c169":"# TEST"}}