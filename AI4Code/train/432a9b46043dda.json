{"cell_type":{"b75c7576":"code","eb240f50":"code","d153f19d":"code","7c35a8f0":"code","eab90bf4":"code","c0f96557":"code","92996741":"code","e46bea85":"code","784a318c":"code","f79079a4":"code","2c73085b":"code","7822ef9e":"code","f0f89749":"markdown","0dbb019a":"markdown","15d648f1":"markdown","732f3055":"markdown","f924f262":"markdown","158618d1":"markdown","265f97b8":"markdown","2487d357":"markdown","c2bbe720":"markdown","9e4f8488":"markdown","bd154d9a":"markdown","ba8ffc37":"markdown","26a9548d":"markdown"},"source":{"b75c7576":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","eb240f50":"import numpy as np\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import preprocessing","d153f19d":"dataset = np.array(\n    [\n     ['Sunny', 'Hot', 'High', 'False','No'],\n     ['Sunny', 'Hot', 'High', 'True','No'],\n     ['Overcast', 'Hot', 'High', 'False','Yes'],\n     ['Rainy', 'Mild', 'High', 'False','Yes'],\n     ['Rainy', 'Cool', 'Normal', 'True','No'],\n     ['Overcast', 'Cool', 'Normal', 'True','Yes'],\n     ['Sunny', 'Mild', 'High', 'False','No'],\n     ['Sunny', 'Cool', 'Normal', 'False','Yes'],\n     ['Rainy', 'Mild', 'Normal', 'False','Yes'],\n     ['Rainy', 'Mild', 'Normal', 'True','Yes'],\n     ['Overcast', 'Mild', 'High', 'True','Yes']\n    ]\n)","7c35a8f0":"print(dataset)","eab90bf4":"Features = dataset[:,0:-1]\nprint(Features)","c0f96557":"prep = preprocessing.OrdinalEncoder()\nprep.fit(Features)\nfeatures = prep.transform(Features)","92996741":"print(features)","e46bea85":"target = dataset[:,-1]\nprint(target)","784a318c":"model = KNeighborsClassifier(n_neighbors=1, metric=\"hamming\")\nmodel.fit(features, target)","f79079a4":"# new data\nnewdata = np.array([[\"Sunny\",\"Cool\",\"Normal\",\"True\"]])\n","2c73085b":"prediction = model.predict(prep.transform(newdata))","7822ef9e":"print(prediction)","f0f89749":"### Normalized the data\n### Now we can use preprocessing method to normalized the data (0-1) range\n### In this process we can use OrdinalEncoder","0dbb019a":"## Now we will predict the new value","15d648f1":"### Now print to see the data\n","732f3055":"You can now our data is fully normalized","f924f262":"we can train our model","158618d1":"### Select the target variable","265f97b8":"As you can see the last target variable is not inclueded in Features","2487d357":"## Now the next part is Feature selections\n## We will select Feature and target variable separatly","c2bbe720":"# KNN K-Nearest Neighbor \n## KNN on weather Data to predict and guss the new data","9e4f8488":"### Loading DataSet using Numpy Array","bd154d9a":"### Importing the required libraries","ba8ffc37":"## Using KKN to predict the new value \n### Now we can train our model than predict","26a9548d":"## Now guss the new value "}}