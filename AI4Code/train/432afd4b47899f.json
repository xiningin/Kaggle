{"cell_type":{"01bed1b3":"code","95d2e904":"code","4f6d2020":"code","11acde43":"code","21808095":"code","5af72c1c":"code","aaf5daa6":"code","20ffca1b":"code","19f73708":"code","b8480a89":"code","311628ae":"code","18b130be":"code","5bcce8a0":"code","b6e903f1":"markdown","d6ad250e":"markdown","ed43a398":"markdown","8a5ff601":"markdown","a2e67f48":"markdown","2d0ab8d0":"markdown","6f584544":"markdown","b5a370f4":"markdown","da804d5b":"markdown","fa69763c":"markdown","c95897b8":"markdown","7bdeb087":"markdown"},"source":{"01bed1b3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\nimport os\ndataset_folder=\"\/kaggle\/input\/vinbigdata-chest-xray-abnormalities-detection\/\"\n\nimport matplotlib.pyplot as plt\nimport pydicom\nfrom matplotlib import patches\nfile_train = dataset_folder+\"train.csv\"\ndf_train = pd.read_csv(file_train)","95d2e904":"# df_train.loc[df_train['image_id'] == \"e31be972e181987a8600a8700c1ebe88\"] \n\n## function gambar Review\ndef GetRawDicom(image_id=\"\"):\n    dataset_train_dir = dataset_folder + \"train\/\"\n    try:\n        filename = dataset_train_dir+image_id+\".dicom\"\n        ds = pydicom.dcmread(filename)\n        return ds\n    except:\n        print(\"Something Error\")\n        return False\ndef ShowRawImage(image_id=\"\",cmap=plt.cm.gray):\n    if GetRawDicom(image_id):\n        raw_dicom=GetRawDicom(image_id)\n        plt.imshow(raw_dicom.pixel_array,cmap=cmap) \n        plt.show()\ndef ShowImageWithDetectedMark(image_id=\"\"):\n    if GetRawDicom(image_id):\n        raw_dicom=GetRawDicom(image_id)\n        fig, ax = plt.subplots()\n        ax.imshow(raw_dicom.pixel_array,cmap=plt.cm.gray)\n        abn_det = df_train.loc[df_train['image_id'] == image_id]\n        for det in abn_det.iterrows():\n            ax.add_patch(\n             patches.Rectangle(\n                (det[1].x_min,det[1].y_min),\n                (det[1].x_max-det[1].x_min),\n                (det[1].y_max-det[1].y_min),\n                edgecolor = 'red',\n                facecolor = 'Blue',\n                fill=False     \n             ) )\n            ax.text(det[1].x_min,det[1].y_min,det[1].class_name,bbox=dict(facecolor='red', alpha=0.1))\n        plt.show()\ndef ZoomShowImageWithDetectedMark(image_id=\"\",x_min=0,x_max=100,y_min=0,y_max=100):\n    if GetRawDicom(image_id):\n        fig, ax = plt.subplots()\n        raw_dicom=GetRawDicom(image_id)\n        ax.imshow(raw_dicom.pixel_array,cmap=plt.cm.gray)\n        ax.set(xlim=(x_min, x_max), ylim=(y_min, y_max))\n        abn_det = df_train.loc[df_train['image_id'] == image_id]\n        for det in abn_det.iterrows():\n            rule1= (det[1].x_min > x_min) and (det[1].x_min < x_max)\n            rule2= (det[1].x_max > x_min) and (det[1].x_max < x_max)\n            rule3= (det[1].y_min > y_min) and (det[1].y_min < y_max)\n            rule4= (det[1].y_max > y_min) and (det[1].y_max < y_max)\n            ax.add_patch(\n             patches.Rectangle(\n                (det[1].x_min,det[1].y_min),\n                (det[1].x_max-det[1].x_min),\n                (det[1].y_max-det[1].y_min),\n                edgecolor = 'red',\n                facecolor = 'Blue',\n                fill=False     \n             ) )\n            if (rule1 and rule2 and rule3 and rule4):\n                ax.text(det[1].x_min,det[1].y_min,det[1].class_name,bbox=dict(facecolor='red', alpha=0.1))\n        plt.show()","4f6d2020":"print('Isi pada folder Dataset adalah :')\nfor i in os.listdir(dataset_folder):\n    print(i)\n# os.listdir(dataset_folder)","11acde43":"dataset_train_dir = dataset_folder + \"train\"\ndataset_test_dir = dataset_folder + \"test\"\njumlah_filetrain = len(os.listdir(dataset_train_dir))\njumlah_filetest = len(os.listdir(dataset_test_dir))\npersentase_train = (jumlah_filetrain\/(jumlah_filetrain+jumlah_filetest))*100\npersentase_test = (jumlah_filetest\/(jumlah_filetrain+jumlah_filetest))*100\nprint(\"Jumlah File Train adalah \" + str(jumlah_filetrain) + \" (\"+ str(persentase_train) +\"%)\")\nprint(\"Jumlah File Test adalah \" + str(jumlah_filetest) + \" (\"+ str(persentase_test) +\"%)\")","21808095":"data_sample = GetRawDicom(\"fa109c087e46fe1ea27e48ce6d154d2f\")\n# print(data_sample.file_meta)\ncount = 1\nfor i in data_sample:\n    print(\"data \"+str(count)+\" :\"+str(i))\n    count = count+1\ncount = 1\nfor i in data_sample.file_meta:\n    print(\"data Meta \"+str(count)+\" :\"+str(i))\n    count = count+1","5af72c1c":"file_sampleSubmission = dataset_folder+\"sample_submission.csv\"\nsample_submission = pd.read_csv(file_sampleSubmission)\nsample_submission","aaf5daa6":"from pandas_profiling import ProfileReport\nprofile = ProfileReport(df_train, title=\"Train Profiling Report\", correlations=None,interactions=None,progress_bar=False)\nprofile.to_notebook_iframe()","20ffca1b":"print(\"Daftar Abnormaliti nya adalah : \")\nfor ab in df_train.class_name.unique():\n    print(ab)","19f73708":"# sample_undetected = df_train.loc[df_train['class_id'] == 14]\n# sample_undetected","b8480a89":"ShowRawImage(\"50a418190bc3fb1ef1633bf9678929b3\")\nShowRawImage(\"21a10246a5ec7af151081d0cd6d65dc9\")\nShowRawImage(\"063319de25ce7edb9b1c6b8881290140\")","311628ae":"ShowRawImage(\"03e6ecfa6f6fb33dfeac6ca4f9b459c9\")","18b130be":"ShowImageWithDetectedMark(\"03e6ecfa6f6fb33dfeac6ca4f9b459c9\")\nShowImageWithDetectedMark(\"c699f16ba0b86f474390da9515bcad7a\")\nShowImageWithDetectedMark(\"dfd523a5991fc852654bf1235c6282c6\")","5bcce8a0":"ZoomShowImageWithDetectedMark(\"03e6ecfa6f6fb33dfeac6ca4f9b459c9\",x_min=1750,x_max=2500,y_min=750,y_max=1250)\nZoomShowImageWithDetectedMark(\"03e6ecfa6f6fb33dfeac6ca4f9b459c9\",x_min=1800,x_max=2000,y_min=2000,y_max=2500)","b6e903f1":"### Penampilan Gambar Sampel mentah","d6ad250e":"### Penampilan Gambar Sampel Bertanda","ed43a398":"### Tentang sample_submision.csv","8a5ff601":"### Penampilan Gambar Sampel yang tidak terdeteksi","a2e67f48":"### Cek Sample Data Dicom","2d0ab8d0":"<h2 align=\"center\" style=\"background-color:#005595;color:white;\">Eksplorasi sampel gambar medis<\/h2>","6f584544":"<h2 align=\"center\" style=\"background-color:#005595;color:white;\">Eksplorasi File<\/h2>","b5a370f4":"### Tentang folder \"test\" dan \"train\"","da804d5b":"# Explorasi VinBigData Chest X-ray Abnormaliti dalam Bahasa Indonesia\n#### oleh Muhammad Zharfan Wiranata","fa69763c":"Kita Pastikan bahwa data abnormaliti sesuai dengan deskripsi data di [\u201cVinDr-CXR: An open dataset of chest X-rays with radiologist's annotations\u201d.](https:\/\/www.kaggle.com\/c\/vinbigdata-chest-xray-abnormalities-detection\/overview)\n* 0 - Aortic enlargement\n* 1 - Atelectasis\n* 2 - Calcification\n* 3 - Cardiomegaly\n* 4 - Consolidation\n* 5 - ILD\n* 6 - Infiltration\n* 7 - Lung Opacity\n* 8 - Nodule\/Mass\n* 9 - Other lesion\n* 10 - Pleural effusion\n* 11 - Pleural thickening\n* 12 - Pneumothorax\n* 13 - Pulmonary fibrosis\n\nuntuk \"No Finding\", diberikan \"class_id\" bernilai 14\n\n#### Ringkasan Profiling\n* Perlu diperhatikan, bahwa hampir setengahnya (46.9%) data tidak terdeteksi Abnormaliti.\n* Id Gambar **<i style=\"color:red;\">03e6ecfa6f6fb33dfeac6ca4f9b459c9<\/i>** memiliki repetisi terbanyak pada data train. Yang bisa diartikan banyak terdeteksi <b><u>abnormaliti<\/u><\/b>\n* ","c95897b8":"Pada kompetisi ini, kita akan lokalisasi dan mengklasifikasi 14 tipe thoracic abnormaliti dari radiograf pundak secara otomatis. dengan 18,000 dataset yang telah discan oleh radiolog bepengalaman, kita dapat 15,000 data train yabg berlebel dan independent dan akan dievaluasi dengan sisa 3,000 gambar yang lain. Anotasi ini dikumpulkan oleh VinBigData via webnya VinLab. Detai pada dataset bisa dilihati di [\u201cVinDr-CXR: An open dataset of chest X-rays with radiologist's annotations\u201d.](https:\/\/www.kaggle.com\/c\/vinbigdata-chest-xray-abnormalities-detection\/overview)","7bdeb087":"### Tentang train.csv"}}