{"cell_type":{"cee479f8":"code","6fe84245":"code","56ffe16b":"code","82934b14":"code","d9408a6d":"code","7913f47b":"code","563dd2f0":"code","2d8abcc0":"code","698642cc":"code","0ba0f518":"code","5d4908c9":"code","9d5e42a3":"code","2c2f0c5b":"code","113e4cf0":"code","ab5f7159":"code","e6922ec9":"code","d27b920f":"code","83a7b043":"code","5095b56c":"code","719bafd6":"code","4f3c9d31":"code","0de0561f":"code","e22d47ad":"code","7a981b76":"code","dbe58e38":"code","df72b2d4":"code","04b4e05c":"code","20f2324f":"code","078735d1":"code","73eff1ef":"code","ece1bd79":"code","480f3fd4":"code","365b1e48":"code","41e31c24":"code","b196afbb":"code","30207d08":"code","7518ac07":"code","b53b26b3":"code","2ec10ad5":"code","dfcf350e":"code","66201ee8":"code","e5c4dd8e":"code","93d1ed57":"code","e65c91c4":"code","1e5ab522":"code","e3a1aec8":"code","f140549b":"code","b2dc5dd7":"code","f57bd872":"code","e46fd159":"code","01c94873":"code","d6140432":"code","f56abbf9":"code","26d922f8":"code","484ec7cf":"code","1e0c53da":"code","703f2f30":"code","31e691cc":"code","538bd49b":"code","4ceda711":"code","65180732":"code","07e68f67":"code","e57d70ba":"code","37c55c4c":"code","aeb116b2":"code","6a2d2e61":"code","c4f6ecff":"code","2092e56f":"code","70c00a45":"code","15f107e6":"code","cba79cc0":"code","d38413c9":"code","b2c4624f":"code","c8b096c9":"code","43b6e76c":"code","e5c29e5c":"code","14c873b3":"code","e9eddb81":"code","b532c0e6":"code","65157297":"code","c7076cdf":"code","38bc1fab":"code","e883f4fa":"code","1480de21":"code","81121e1d":"code","42878e82":"code","ededa1ca":"code","40581ee8":"code","f1351653":"code","fc433c11":"code","9d04420b":"code","9e0bf13a":"code","03dd462e":"markdown","463826cc":"markdown","6af3220e":"markdown","6b87cd19":"markdown","cfa78b73":"markdown","2fe89e78":"markdown","4efece69":"markdown","2c52ab4d":"markdown","5f8d5de8":"markdown","d22af50d":"markdown","a51ef236":"markdown","8cfc9d4b":"markdown","81703858":"markdown","01321fdd":"markdown","cf736781":"markdown","040d96ed":"markdown","3835f30f":"markdown","5f9f77c1":"markdown","395bfb82":"markdown","d0156b95":"markdown","f8db0d59":"markdown","497c7697":"markdown","7ab0d3e9":"markdown","4db4c5e6":"markdown","cfc10c7e":"markdown","a865d7ee":"markdown","db38bdc2":"markdown","516ae095":"markdown","914ad6c1":"markdown","ae4b4c13":"markdown"},"source":{"cee479f8":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","6fe84245":"import warnings\nwarnings.filterwarnings('ignore')","56ffe16b":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\nIDtest = test[\"PassengerId\"]","82934b14":"# concat all data to analyze\ndataset = pd.concat(objs=[train, test], axis=0).reset_index(drop=True)\ndataset_origin = dataset\nlen(dataset)","d9408a6d":"train_len = len(train)","7913f47b":"dataset.head()","563dd2f0":"dataset.info()","2d8abcc0":"# null includes: Age, Cabin, Embarked\ndataset.isnull().sum()","698642cc":"dataset.describe()","0ba0f518":"dataset[dataset['Survived'] == 1]","5d4908c9":"plt.figure(figsize=(12, 8))\nplt.title('Pearson correlation of Features')\nsns.heatmap(train.drop(labels=['PassengerId'], axis=1).corr(), cmap=plt.cm.RdBu, annot=True)","9d5e42a3":"import re\ndef get_title(name):\n    title_search = re.search(r'([A-Za-z]+)\\.', name)\n    if title_search:\n        return title_search.group(1)\n    \n    return ''\n\ndataset['Title'] = dataset['Name'].apply(get_title)","2c2f0c5b":"dataset['Title'].value_counts()","113e4cf0":"#replacing all titles with mr, mrs, miss, master, rare\ndef replace_titles(title):\n    if title in ['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona']:\n        return 'Rare'\n    elif title in ['Countess', 'Mme']:\n        return 'Mrs'\n    elif title in ['Mlle', 'Ms']:\n        return 'Miss'\n    elif title =='Dr':\n        if x['Sex']=='Male':\n            return 'Mr'\n        else:\n            return 'Mrs'\n    else:\n        return title\n\ndataset['Title'] = dataset['Title'].apply(replace_titles)","ab5f7159":"dataset['Title'].value_counts()","e6922ec9":"# Mapping titles\ntitle_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Rare\": 5}\ndataset['Title'] = dataset['Title'].map(title_mapping)","d27b920f":"sns.factorplot(x='Title', y='Survived', data=dataset, kind='bar')","83a7b043":"dataset['HasCabin'] = dataset['Cabin'].apply(lambda x: 0 if type(x) == float else 1)","5095b56c":"sns.factorplot(x='HasCabin', y='Survived', data=dataset, kind='bar')","719bafd6":"dataset['FamilySize'] = dataset['SibSp'] + dataset['Parch'] + 1","4f3c9d31":"dataset['FamilySize'].value_counts()","0de0561f":"sns.factorplot(x='FamilySize', y='Survived', data=dataset)","e22d47ad":"# FamilySize which equal to 1 is the same as \"IsAlone\"\n# dataset['IsAlone'] = dataset['FamilySize'].map(lambda s: 1 if s == 1 else 0)\n# sns.factorplot(x='IsAlone', y='Survived', data=dataset, kind='bar')","7a981b76":"dataset['Embarked'].value_counts()","dbe58e38":"dataset['Embarked'].fillna('S', inplace=True)","df72b2d4":"sns.factorplot(x='Embarked', y='Survived', data=dataset, kind='bar')","04b4e05c":"dataset[\"Sex\"] = dataset[\"Sex\"].map({\"male\": 1, \"female\": 0})","20f2324f":"sns.factorplot(x='Sex', y='Survived', data=dataset, kind='bar')","078735d1":"plt.figure(figsize=(8, 6))\nplt.title('Pearson correlation of Age')\nsns.heatmap(dataset[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\"]].corr(), cmap=plt.cm.RdBu, annot=True)","73eff1ef":"# Explore Age vs Survived\ng = sns.FacetGrid(train, col='Survived')\ng = g.map(sns.distplot, \"Age\")","ece1bd79":"# Explore Age vs Parch , Pclass and SibSP\ng = sns.factorplot(y=\"Age\",x=\"Pclass\", data=dataset,kind=\"box\")\ng = sns.factorplot(y=\"Age\",x=\"Parch\", data=dataset,kind=\"box\")\ng = sns.factorplot(y=\"Age\",x=\"SibSp\", data=dataset,kind=\"box\")","480f3fd4":"# Filling missing value of Age \n\n## Fill Age with the median age of similar rows according to Pclass, Parch and SibSp\n# Index of NaN age rows\nindex_NaN_age = list(dataset[\"Age\"][dataset[\"Age\"].isnull()].index)\n\nage_med = dataset[\"Age\"].median()\nfor i in index_NaN_age :\n    age_pred = dataset[\"Age\"][((dataset['SibSp'] == dataset.iloc[i][\"SibSp\"]) &\n                                (dataset['Parch'] == dataset.iloc[i][\"Parch\"]) &\n                                (dataset['Pclass'] == dataset.iloc[i][\"Pclass\"]))].median()\n    if not np.isnan(age_pred) :\n        dataset['Age'].iloc[i] = age_pred\n    else :\n        dataset['Age'].iloc[i] = age_med\n","365b1e48":"dataset[:len(train)][['Age', 'Survived']].groupby(by=['Age']).sum()","41e31c24":"dataset['NameParenthesis'] = dataset['Name'].apply(lambda x: 1 if re.search(r'\\(.*?\\)', x) else 0)","b196afbb":"dataset[:train_len][['NameParenthesis', 'Survived']].groupby(by=['NameParenthesis']).sum()","30207d08":"dataset[:train_len]['NameParenthesis'].value_counts()","7518ac07":"sns.factorplot(x='NameParenthesis', y='Survived', data=dataset, kind='bar')","b53b26b3":"dataset['NameLength'] = dataset['Name'].apply(len)","2ec10ad5":"name_subset = dataset[['NameLength', 'Survived']]","dfcf350e":"name_length_counts = dataset[:train_len]['NameLength'].value_counts().reset_index()","66201ee8":"plt.figure(figsize=(16, 8))\nsns.countplot(x='NameLength', hue='Survived', data=name_subset)","e5c4dd8e":"# sns.factorplot(x='NameLength', y='Survived', data=dataset, kind='bar')\n# dataset[['NameLength', 'Survived']].groupby(['NameLength']).mean().plot()","93d1ed57":"# dataset[:train_len]['NameLength'].value_counts(sort=False).plot.bar()","e65c91c4":"# dataset[:train_len][['NameLength', 'NameParenthesis', 'Survived']].groupby(by=['NameLength'], as_index=False).mean()","1e5ab522":"plt.figure(figsize=(12, 8))\nsns.heatmap(dataset.corr(), cmap=plt.cm.RdBu, annot=True)","e3a1aec8":"name_set = dataset[:]","f140549b":"name_set['Name2'] = name_set['Name'].apply(lambda x: x.split('.')[1])\n\n# #\u8ba1\u7b97\u6570\u91cf,\u7136\u540e\u5408\u5e76\u6570\u636e\u96c6\nName2_sum = name_set['Name2'].value_counts().reset_index()\nName2_sum.columns=['Name2','Name2Sum']","b2dc5dd7":"name_set = pd.merge(left=name_set, right=Name2_sum, how='left',on='Name2')","f57bd872":"# The Second name occured only once is a useless feature value, set to be 'one'\nname_set.loc[name_set['Name2Sum'] == 1 , 'Name2New'] = 'one'\nname_set.loc[name_set['Name2Sum'] > 1 , 'Name2New'] = name_set['Name2']","e46fd159":"sns.countplot(x='Name2New', hue='Survived', data=name_set[name_set['Name2New'] != 'one'][name_set['Survived'] >= 0.7])","01c94873":"name_new_s = name_set[['Name2New', 'Survived']].groupby(['Name2New']).mean() ","d6140432":"name_new_s[name_new_s['Survived'] >= 0.7]","f56abbf9":"Name2_sum.columns=['Name2New', 'Name2Sum']","26d922f8":"pd.merge(left=name_new_s[name_new_s['Survived'] > 0.5], right=Name2_sum, how='left', on='Name2New')","484ec7cf":"dataset = pd.concat([dataset, name_set.loc[:, ['Name2New']]], axis=1)","1e0c53da":"dataset['TicketLetter'] = dataset['Ticket'].apply(lambda x: 0 if re.search('^\\d+$', x) else 1)","703f2f30":"dataset[:train_len][['TicketLetter', 'Pclass']].groupby(['Pclass']).mean()","31e691cc":"sns.countplot(x='Pclass', hue='TicketLetter', data=dataset[:train_len])","538bd49b":"dataset[:train_len][['TicketLetter', 'Survived']].groupby(['TicketLetter']).mean()","4ceda711":"sns.countplot(x='TicketLetter', hue='Survived', data=dataset[:train_len])","65180732":"plt.figure(figsize=(12, 8))\nsns.heatmap(dataset.corr(), cmap=plt.cm.RdBu, annot=True)","07e68f67":"dataset.head(3)","e57d70ba":"#dataset = dataset.drop(labels=['PassengerId', 'Name', 'Cabin', 'Parch', 'SibSp', 'Ticket'], axis=1)","37c55c4c":"dataset = dataset.drop(['Cabin', 'Name', 'PassengerId', 'Ticket'], axis=1)","aeb116b2":"dataset.head()","6a2d2e61":"# Mapping Fare\ndataset['Fare'] = dataset['Fare'].fillna(train['Fare'].median())\ndataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] = 0\ndataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\ndataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2\ndataset.loc[ dataset['Fare'] > 31, 'Fare'] = 3\ndataset['Fare'] = dataset['Fare'].astype(int)\n\n# Mapping Age\ndataset.loc[ dataset['Age'] <= 16, 'Age'] = 0\ndataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1\ndataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\ndataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\ndataset.loc[ dataset['Age'] > 64, 'Age'] = 4\ndataset['Age'] = dataset['Age'].astype(int)\n\n# Mapping Embarked\ndataset['Embarked'] = dataset['Embarked'].map({'S': 0, 'C': 1, 'Q': 2})","c4f6ecff":"# Create new feature of family size\ndataset['Single'] = dataset['FamilySize'].map(lambda s: 1 if s == 1 else 0)\ndataset['SmallFamily'] = dataset['FamilySize'].map(lambda s: 1 if  s == 2  else 0)\ndataset['MedFamily'] = dataset['FamilySize'].map(lambda s: 1 if 3 <= s <= 4 else 0)\ndataset['LargeFamily'] = dataset['FamilySize'].map(lambda s: 1 if s >= 5 else 0)\ndel dataset['FamilySize']","2092e56f":"plt.figure(figsize=(12, 8))\nsns.heatmap(dataset.corr(), cmap=plt.cm.RdBu, annot=True)","70c00a45":"# one-hot values Title and Embarked \ndataset = pd.get_dummies(dataset, columns = [\"Age\"])\ndataset = pd.get_dummies(dataset, columns = [\"Embarked\"])\ndataset = pd.get_dummies(dataset, columns = [\"Fare\"])\n# dataset = pd.get_dummies(dataset, columns = [\"Parch\", 'SibSp'])\ndataset = pd.get_dummies(dataset, columns = [\"Pclass\"])\ndataset = pd.get_dummies(dataset, columns = [\"Title\"])","15f107e6":"# dataset = pd.get_dummies(dataset, columns = [\"NameLength\"])\ndataset = pd.get_dummies(dataset, columns = [\"Name2New\"])","cba79cc0":"dataset.head()","d38413c9":"#### Feature Correlation List","b2c4624f":"plt.figure(figsize=(24, 6))\ndataset.corr()['Survived'].sort_values()[-40:]","c8b096c9":"## Separate train dataset and test dataset\ntrain = dataset[:len(train)]\ntest = dataset[len(train):]\ntest.drop(labels=[\"Survived\"],axis = 1,inplace=True)","43b6e76c":"## Separate train features and label \ntrain[\"Survived\"] = train[\"Survived\"].astype(int)\nX_train = train.drop(labels = [\"Survived\"],axis = 1)\ny_train = train[\"Survived\"]","e5c29e5c":"from sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import (GradientBoostingClassifier, RandomForestClassifier, \\\n                              ExtraTreesClassifier,AdaBoostClassifier,\\\n                              BaggingClassifier, VotingClassifier)\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\n\nfrom sklearn.model_selection import StratifiedKFold, StratifiedShuffleSplit\nfrom pprint import pformat","14c873b3":"random_state = 2","e9eddb81":"cv = StratifiedShuffleSplit(n_splits=10,)","b532c0e6":"clf_list = [\n    GradientBoostingClassifier(),\n    RandomForestClassifier(),\n    ExtraTreesClassifier(),\n    AdaBoostClassifier(),\n    BaggingClassifier(),\n    DecisionTreeClassifier(),\n    SVC(),\n    KNeighborsClassifier(),\n    LogisticRegression(),\n    GaussianNB(),\n    LGBMClassifier(),\n    XGBClassifier(),\n]\n","65157297":"accuracy_dict = {}\nfor clf in clf_list:\n    acc = cross_val_score(clf, X_train, y=y_train, cv=cv, scoring = \"accuracy\")    \n    accuracy_dict[clf.__class__.__name__] = [acc.min(), acc.mean(), acc.max()]","c7076cdf":"accuracy_df = pd.DataFrame(accuracy_dict).transpose()\naccuracy_df","38bc1fab":"accuracy_df.plot(kind='bar',rot=60)","e883f4fa":"gbm = LGBMClassifier(num_leaves=20,\n                        learning_rate=0.5,\n                        n_estimators=100)\ngbm.fit(X_train, y_train,\n        eval_metric='l1')\nprint('Feature importances:', list(gbm.feature_importances_))","1480de21":"from sklearn.metrics import accuracy_score\npredictions = gbm.predict(X_train)\naccuracy_score(predictions, y_train)","81121e1d":"cv = StratifiedKFold(n_splits=10)","42878e82":"lgbm = LGBMClassifier(num_leaves=9, learning_rate=0.01, n_estimators=300)\nprint(cross_val_score(lgbm, X_train, y_train, cv=cv))\n# print(cross_validate(lgbm, X_train, y_train, cv=cv))","ededa1ca":"lgbm.fit(X_train, y_train)","40581ee8":"# xgbt = XGBClassifier(learning_rate=0.03, n_estimators=300)\n# cross_val_score(xgbt, X_train, y_train, cv=cv)\n\n# xgbt.fit(X_train, y_train)","f1351653":"feats = {}\nfor x, y in zip(dataset.columns, lgbm.feature_importances_):\n   feats[x] = y\n","fc433c11":"feats_df = pd.DataFrame(list(feats.items()), columns=['feat', 'importance'])","9d04420b":"feats_df.sort_values(by=['importance'], ascending=False)[:40]","9e0bf13a":"test_Survived = pd.Series(lgbm.predict(test), name=\"Survived\")\n\nresults = pd.concat([IDtest, test_Survived],axis=1)\n\nresults.to_csv(\"titanic_with_ensemble.csv\",index=False)","03dd462e":"### Basic Feature Engineering with the Titanic Data\nrefer to\uff1ahttps:\/\/triangleinequality.wordpress.com\/2013\/09\/08\/basic-feature-engineering-with-the-titanic-data\/","463826cc":"### Feature Importances","6af3220e":"#### Age\n263 null values in train set","6b87cd19":"Test: We could Parse First Name to find single man without any family with a big family on this ship","cfa78b73":"got 177 passengers with `age_pred` according to this startegy, amazing!","2fe89e78":"### Ticket\n\nSeperate the `Ticket` with number only, number with letter might be with higher `Pclass`","4efece69":"survival probability is highly related to survival probability\n\ncreate 4 categories for `FamilySize`\n- 1\n- 2\n- 3,4\n- \\>=5","2c52ab4d":"refer to: https:\/\/www.kaggle.com\/yassineghouzam\/titanic-top-4-with-ensemble-modeling\n        \nAge is negatively correlated with Pclass, Parch and SibSp.\n\nUse SibSP, Parch and Pclass in order to impute the missing ages.\nThe strategy is to fill Age with the median age of similar rows according to Pclass, Parch and SibSp.","5f8d5de8":"### Inspect data","d22af50d":"#### Embark\n2 null values","a51ef236":"### Remove Features\n- Use `Title` instead of `Name`\n- Use `HasCabin` instead of `Cabin`\n- Categorize `FamilySize` instead of `Parch` `SibSp`\n- `PassengerId` is random variable\n- `Ticket` might be a random variable","8cfc9d4b":"#### Family Size\nsibsp: The dataset defines family relations in this way...\n- Sibling = brother, sister, stepbrother, stepsister\n- Spouse = husband, wife (mistresses and fianc\u00e9s were ignored)\n\nparch: The dataset defines family relations in this way...\n- Parent = mother, father\n- Child = daughter, son, stepdaughter, stepson","81703858":"I am not sure `Name Length` could be a very good feature, I will drop it because `NameParenthesis` could more reasonable.","01321fdd":"### Fill Null Values","cf736781":"Theres is a peek for young passengers who are survived\n\nPassengers with age between 60-80 were less survived","040d96ed":"### Submit","3835f30f":"Variable |\tDefinition |Key\n--| -- | --\nsurvival| \tSurvival|\t0 = No, 1 = Yes\npclass\t|Ticket class|\t1 = 1st, 2 = 2nd, 3 = 3rd\nsex\t|Sex|\t\nAge\t|Age in years\t|\nsibsp\t|# of siblings \/ spouses aboard the Titanic\t|\nparch\t|# of parents \/ children aboard the Titanic\t|\nticket\t|Ticket number\t|\nfare\t|Passenger fare\t|\ncabin\t|Cabin number\t|\nembarked|\tPort of Embarkation|","5f9f77c1":"### Name","395bfb82":"### Seperate data back to train test","d0156b95":"### Feature Correlation","f8db0d59":"#### Sex\nConvert to categorical value","497c7697":"TicketLetter doesn\\'t look like has any relation with `Pclass` or `Survived`","7ab0d3e9":"Age is more related to: Pclass, SibSp, Parch, FamilySize, IsAlone ","4db4c5e6":"Survived passengers Age: \n\n1st Class > 2nd Class > 3rd Class\n\nolder if have more Parents\/childre and siblings\/spouses","cfc10c7e":"#### Title\nClassify to Mr. Miss. Mrs. Master Rare","a865d7ee":"### Models","db38bdc2":"#### Cabin\nonly 1st class tickets have cabins\n\nfind that 1st class tickets has much higher survival proberblity","516ae095":"Survived Correlation: Sex > NamePatrentthesis > Pclass > NameLength??? > HasCabin > Fare > Family Categories","914ad6c1":"These passengers with the same `Second Name` above might be in the same family who might be lucky enough that they all got their life boat","ae4b4c13":"### Load data"}}