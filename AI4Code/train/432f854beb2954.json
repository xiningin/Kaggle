{"cell_type":{"1087030e":"code","c661433c":"code","554a82fb":"code","9e8ee803":"code","6b2e3476":"code","1bd2486f":"code","cf238354":"code","31541133":"code","670fa8eb":"code","acb77506":"code","738ccc0a":"code","e747f52a":"code","e4fd1320":"code","c7b70f2d":"code","15a519a6":"code","d08f737f":"code","03a5a7b0":"code","dd45e8bc":"code","bd2699ff":"code","735f8a4d":"code","dc6cda79":"code","596bada7":"code","6a6c0a43":"code","8d090690":"code","201c1b8d":"code","f7588e7e":"code","64abac9e":"code","bd95e7a4":"code","de7a0700":"code","55a53fba":"code","553ccb39":"code","9698f57c":"markdown","93a2ac10":"markdown"},"source":{"1087030e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c661433c":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","554a82fb":"%matplotlib inline","9e8ee803":"diabetes = pd.read_csv('\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv')","6b2e3476":"diabetes.head()","1bd2486f":"diabetes.info()","cf238354":"diabetes.describe()","31541133":"sns.pairplot(diabetes)","670fa8eb":"from sklearn.model_selection import train_test_split,GridSearchCV\nfrom sklearn.linear_model import LinearRegression, LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import r2_score,classification_report, confusion_matrix,accuracy_score,f1_score","acb77506":"X = diabetes.drop('Outcome',axis=1)\ny = diabetes['Outcome']\n\nscaler = StandardScaler()\nscaler.fit(X)\nx = scaler.transform(X)","738ccc0a":"X_train, X_test, y_train, y_test = train_test_split(x,y,test_size=0.3,random_state=101)","e747f52a":"# LinearRegression","e4fd1320":"lr = LinearRegression()\nlr.fit(X_train,y_train)\npredict_lr = lr.predict(X_test)\n\nprint('r2_score:',r2_score(y_test,predict_lr))","c7b70f2d":"# Logistic Regression","15a519a6":"log_r = LogisticRegression()\nlog_r.fit(X_train,y_train)\npredict_logr = log_r.predict(X_test)\n\nprint('Confusion matrix')\nprint(confusion_matrix(y_test,predict_logr))\nprint('classification_report')\nprint(classification_report(y_test,predict_logr))\nprint('accuracy_score:',accuracy_score(y_test,predict_logr))\nprint('f1_score:',f1_score(y_test,predict_logr))","d08f737f":"# Decision Tree","03a5a7b0":"dt = DecisionTreeClassifier()\ndt.fit(X_train,y_train)\npredict_dt = dt.predict(X_test)\n\nprint('Confusion matrix')\nprint(confusion_matrix(y_test,predict_dt))\nprint('classification_report')\nprint(classification_report(y_test,predict_dt))\nprint('accuracy_score:',accuracy_score(y_test,predict_dt))\nprint('f1_score:',f1_score(y_test,predict_dt))","dd45e8bc":"# Random Forest","bd2699ff":"rfc = RandomForestClassifier(n_estimators=200)\nrfc.fit(X_train,y_train)\npredict_rfc = rfc.predict(X_test)\n\nprint('Confusion matrix')\nprint(confusion_matrix(y_test,predict_rfc))\nprint('classification_report')\nprint(classification_report(y_test,predict_rfc))\nprint('accuracy_score:',accuracy_score(y_test,predict_rfc))\nprint('f1_score:',f1_score(y_test,predict_rfc))","735f8a4d":"# K Nearest Neighbors","dc6cda79":"error_rate = []\nfor i in range(1,40):\n    k = KNeighborsClassifier(n_neighbors=i)\n    k.fit(X_train,y_train)\n    predict_i = k.predict(X_test)\n    error_rate.append(np.mean(predict_i != y_test))","596bada7":"plt.figure(figsize=(10,7))\nplt.plot(range(1,40),error_rate,color='blue',linestyle='dashed',marker='o',markerfacecolor='red',markersize=10)","6a6c0a43":"knn = KNeighborsClassifier(n_neighbors=9)\nknn.fit(X_train,y_train)\npredict_knn = knn.predict(X_test)\n\nprint('Confusion matrix')\nprint(confusion_matrix(y_test,predict_knn))\nprint('classification_report')\nprint(classification_report(y_test,predict_knn))\nprint('accuracy_score:',accuracy_score(y_test,predict_knn))\nprint('f1_score:',f1_score(y_test,predict_knn))","8d090690":"# Support Vector Machine","201c1b8d":"svm = SVC()\nsvm.fit(X_train,y_train)\npredict_sv = svm.predict(X_test)\n\nprint('Confusion matrix')\nprint(confusion_matrix(y_test,predict_sv))\nprint('classification_report')\nprint(classification_report(y_test,predict_sv))\nprint('accuracy_score:',accuracy_score(y_test,predict_sv))\nprint('f1_score:',f1_score(y_test,predict_sv))","f7588e7e":"# Grid Search","64abac9e":"param_svm = {'C':[0.1,1,10,100,1000],'gamma':[1,0.1,0.01,0.001,0.0001],'kernel':['linear','poly','rbf','sigmoid']}","bd95e7a4":"grid_svm = GridSearchCV(SVC(),param_svm,verbose=3)\ngrid_svm.fit(X_train,y_train)","de7a0700":"grid_svm.best_params_","55a53fba":"grid_svm.best_score_","553ccb39":"predict_svm = grid_svm.predict(X_test)\n\nprint('Confusion matrix')\nprint(confusion_matrix(y_test,predict_svm))\nprint('classification_report')\nprint(classification_report(y_test,predict_svm))\nprint('accuracy_score:',accuracy_score(y_test,predict_svm))\nprint('f1_score:',f1_score(y_test,predict_svm))","9698f57c":"# Data Viaualization","93a2ac10":"# Features and Target"}}