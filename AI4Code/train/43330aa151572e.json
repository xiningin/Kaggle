{"cell_type":{"ad79f178":"code","3a55354d":"code","d76d044b":"code","607562b3":"code","5630d845":"code","eecb11c5":"code","29e9c79b":"code","c4c05ac1":"code","a98ed10c":"code","47921a00":"code","b30efb89":"code","f13ede9d":"markdown"},"source":{"ad79f178":"\"\"\"This is my first model. Please share your feedback\/suggestion to help me improve this model. \nI am new to DS\/ML to getting difficulties in my applying different trics.\"\"\"","3a55354d":"#Import libraries\nimport numpy as np \nimport pandas as pd \nfrom sklearn import preprocessing\nfrom sklearn import metrics\nfrom sklearn.preprocessing import LabelEncoder\nimport xgboost as xgb\nfrom sklearn.model_selection import train_test_split\nimport xgboost as xgb","d76d044b":"#reading data\ntrain= pd.read_csv('..\/input\/pet-adopt\/train.csv')  #Reading train and test files.\n\ntest= pd.read_csv('..\/input\/pet-adopt\/test.csv')\n\n#Shape of our train and test data.\n\nprint(\"Train Shape: \",train.shape)\nprint(\"Test Shape: \", test.shape)","607562b3":"df=train[['length(m)','height(cm)']]\ndf['length(cm)'] = df['length(m)']*100","5630d845":"print(len(train[train['length(m)'] == 0]))\nprint(len(test[test['length(m)']==0]))\ntrain['length(cm)'] = train['length(m)'].apply(lambda x: x*100) # convert length from cm to m. \ntest['length(cm)'] = test['length(m)'].apply(lambda x: x*100)\ntrain.drop('length(m)', axis=1, inplace=True)\ntest.drop('length(m)', axis=1, inplace=True)","eecb11c5":"# replace all 0 length with mean of lengths\nval = train['length(cm)'].mean()\ntrain['length(cm)'] = train['length(cm)'].replace(to_replace=0, value=val)\ntest['length(cm)'] = test['length(cm)'].replace(to_replace=0, value=val)","29e9c79b":"lbl = preprocessing.LabelEncoder()  #label encoding for categorical features.\ntrain['color_type'] = lbl.fit_transform(train['color_type'])\ntest['color_type'] = lbl.fit_transform(test['color_type'])\n\ntrain.drop(['issue_date', 'listing_date'], axis=1, inplace=True)\ntest.drop(['issue_date', 'listing_date'], axis=1, inplace=True)","c4c05ac1":"X_train = train.drop(['pet_id','breed_category', 'pet_category'], axis=1)\ny_train = train['breed_category']\nX_test = test.drop('pet_id', axis=1).copy()","a98ed10c":"gbm = xgb.XGBClassifier(max_depth=5, n_estimators=100, learning_rate=0.01).fit(X_train, y_train)\npredictions = gbm.predict(X_test)\nacc = round(gbm.score(X_train, y_train)*100, 2)\nacc","47921a00":"X_train = train.drop(['pet_id','breed_category', 'pet_category'], axis=1)\ny_train = train['pet_category']\nX_test = test.drop('pet_id', axis=1).copy()","b30efb89":"gbm = xgb.XGBClassifier(max_depth=5, n_estimators=100, learning_rate=0.01).fit(X_train, y_train)\npredictions = gbm.predict(X_test)\nacc = round(gbm.score(X_train, y_train)*100, 2)\nacc","f13ede9d":"Preparing train and test dataset for modl."}}