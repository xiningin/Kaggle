{"cell_type":{"b808be92":"code","8dffbc7a":"code","ac3f3221":"markdown","be5c0d59":"markdown"},"source":{"b808be92":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport random\nimport seaborn as sns\nfrom sklearn import preprocessing\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import jaccard_similarity_score\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn import svm\nfrom sklearn.metrics import accuracy_score\n\ndf = pd.read_csv(r'..\/input\/titanic\/train.csv')      #Training set\ntest_df = pd.read_csv(r'..\/input\/titanic\/test.csv')  #test set\n\n\n\n\ncdf = df[['Survived','Pclass','Sex','Age','SibSp','Parch','Fare','Embarked']] #modified train df\n\ncdf['Age'].fillna(29,inplace=True)\nembarked_list = ['S','Q','C']\ncdf['Embarked'].fillna(random.choice(embarked_list), inplace=True)\ncdf['Fare'].fillna(35.4,inplace=True)\n\n\n\n\ntest_cdf = test_df[['Pclass','Sex','Age','SibSp','Parch','Fare','Embarked']] #modified test df\n\ntest_cdf['Age'].fillna(30,inplace=True)                               #fill nan position in age with avg age\ntest_cdf['Embarked'].fillna(random.choice(embarked_list), inplace=True)#fill nan positons in embarked with random location\ntest_cdf['Fare'].fillna(32.2,inplace=True)\n\n\n\n\nx_train = np.asarray(cdf[['Pclass','Sex','Age','SibSp','Parch','Embarked','Fare']]) #array conversion train\ny_train = np.asarray(cdf['Survived'])\n\nx_test = np.asarray(test_cdf[['Pclass','Sex','Age','SibSp','Parch','Embarked','Fare']]) #array conversion test\n\n\n\nsex = preprocessing.LabelEncoder()                          #label conversion F\/M\nsex.fit(['female','male'])\nx_train[:,1] = sex.transform(x_train[:,1])\nx_test[:,1] = sex.transform(x_test[:,1])\n\nembarked = preprocessing.LabelEncoder()                     #label conversion S\/C\/Q\nembarked.fit(['S','C','Q'])\nx_train[:,5] = embarked.transform(x_train[:,5])\nx_test[:,5] = embarked.transform(x_test[:,5])\n\n\n\n\nx_train = preprocessing.StandardScaler().fit(x_train).transform(x_train)\nx_test = preprocessing.StandardScaler().fit(x_test).transform(x_test)\n#x_train1, x_test1, y_train1, y_test1 = train_test_split(x_train, y_train, test_size=0.2, random_state=4) #train-test split\n\n\n\n\n\n########################################SVM########################################\nparam = {'C':[0,1,1,2,3,4,5,10,100,100],'gamma':[0.0001, 0.001, 0.005, 0.1, 1, 3, 5]}\ngsc = GridSearchCV(svm.SVC(kernel='rbf'),param,cv=5,scoring='neg_mean_squared_error', verbose=0, n_jobs=-1)\ngrid_result = gsc.fit(x_train,y_train)\nbest_params = grid_result.best_params_\n\nclf = svm.SVC(kernel='rbf', C=best_params[\"C\"], gamma=best_params[\"gamma\"],tol=0.001, cache_size=200, verbose=False, max_iter=-1)\nclf.fit(x_train,y_train)\n\nprediction = clf.predict(x_test)\n\nprint(prediction)\n\n#print(classification_report(y_test1,prediction))\n#print(accuracy_score(y_test1, prediction))\n\noutput = pd.DataFrame({'PassengerId':test_df.PassengerId, 'Survived':prediction})\noutput.to_csv('Titanic_Pavi4.csv', index=False)\n\n\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8dffbc7a":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport random\nimport seaborn as sns\n\ndf = pd.read_csv(r'..\/input\/titanic\/train.csv')      #Training set\n\ncdf = df[['Survived','Pclass','Sex','Age','Embarked']] #modified train df\ncdf['Age'].fillna(29,inplace=True)\nembarked_list = ['S','Q','C']\ncdf['Embarked'].fillna(random.choice(embarked_list), inplace=True)\nprint(cdf.shape)\n\ncdf['Sex'] = cdf['Sex'].astype('category')\ncdf['Embarked'] = cdf['Embarked'].astype('category')\n\ncdf['Sex'] = cdf['Sex'].cat.codes\ncdf['Embarked'] = cdf['Embarked'].cat.codes\n\nprint(cdf.head(10))\n\ng = sns.PairGrid(cdf,hue='Survived')\ng = g.map_diag(plt.hist)\ng = g.map_offdiag(plt.scatter)\ng = g.add_legend()\nplt.show()\n\n#x_train = np.asarray(cdf[['Pclass','Sex','Age','SibSp','Parch','Embarked']]) #array conversion train\n#y_train1 = np.asarray(cdf['Survived'])\n\n\n","ac3f3221":"# Data analysis","be5c0d59":"# Titanic Code_Learning"}}