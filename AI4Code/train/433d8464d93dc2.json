{"cell_type":{"1040797d":"code","a3044252":"code","8b26fefc":"code","6fa2a877":"code","36a4d9ce":"code","bce3a5af":"code","40fe3932":"code","2c6d72a1":"code","22216f6c":"code","0e315ab0":"code","a4d278e0":"code","52d4de6d":"code","28beb14f":"code","55b84872":"code","1db45fec":"code","78893d69":"code","7a891ded":"code","5be33437":"code","435da5e1":"code","f0a6696b":"code","cef144e0":"code","93384862":"markdown","fc26de6f":"markdown","86ec6840":"markdown","9be7da48":"markdown","d8b6977f":"markdown","6fdc7578":"markdown","6afb5352":"markdown","f9457046":"markdown","13b0c2dc":"markdown","c1405f8b":"markdown","48f7e39f":"markdown","3b021558":"markdown","4e4109d6":"markdown","893ab488":"markdown","bc412569":"markdown","2a7a467f":"markdown","0d9e6962":"markdown","eb744ceb":"markdown","d2dff73b":"markdown"},"source":{"1040797d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport warnings \nwarnings.filterwarnings('ignore')\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a3044252":"dataset_train = pd.read_csv('\/kaggle\/input\/Stock_Price_Train.csv')\ndataset_train.head()","8b26fefc":"train = dataset_train.loc[:,[\"Open\"]].values\ntrain","6fa2a877":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler(feature_range = (0,1))\ntrain_scaled = scaler.fit_transform(train)\ntrain_scaled\n","36a4d9ce":"plt.plot(train_scaled)\nplt.show()","bce3a5af":"X_train = []\ny_train = []\ntimesteps = 50\nfor i in range(timesteps, 1258):\n    X_train.append(train_scaled[i-timesteps:i, 0])\n    y_train.append(train_scaled[i, 0])\nX_train, y_train = np.array(X_train), np.array(y_train)\n","40fe3932":"X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))\nX_train","2c6d72a1":"y_train","22216f6c":"from keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import SimpleRNN\nfrom keras.layers import Dropout\n","0e315ab0":"regressor = Sequential()","a4d278e0":"regressor.add(SimpleRNN(units = 50, activation = 'tanh',return_sequences = True, input_shape = (X_train.shape[1],1)))\nregressor.add(Dropout(0.2))\n\nregressor.add(SimpleRNN(units = 50, activation = 'tanh',return_sequences = True))\nregressor.add(Dropout(0.2))\n\nregressor.add(SimpleRNN(units = 50, activation = 'tanh',return_sequences = True))\nregressor.add(Dropout(0.2))\n\nregressor.add(SimpleRNN(units = 50))\nregressor.add(Dropout(0.2))\n","52d4de6d":"regressor.add(Dense(units = 1))","28beb14f":"regressor.compile(optimizer = 'adam',loss = 'mean_squared_error')","55b84872":"regressor.fit(X_train,y_train,epochs = 100, batch_size = 32)","1db45fec":"test_dataset = pd.read_csv('\/kaggle\/input\/Stock_Price_Test.csv')\ntest_dataset.head()","78893d69":"real_stock_price = test_dataset.loc[:,['Open']].values\nreal_stock_price","7a891ded":"dataset_total = pd.concat((dataset_train['Open'],test_dataset['Open']),axis = 0)\ninputs = dataset_total[len(dataset_total) - len(test_dataset) - timesteps:].values.reshape(-1,1)\ninputs = scaler.transform(inputs)\ninputs","5be33437":"X_test = []\ny_test = []\nfor i in range(timesteps, 70):\n    X_test.append(inputs[i-timesteps:i,0])\n    y_test.append(inputs[i, 0])\nX_test, y_test = np.array(X_test), np.array(y_test)\nX_test = np.reshape(X_test, (X_test.shape[0],X_test.shape[1],1))","435da5e1":"predicted_stock_price = regressor.predict(X_test)\npredicted_stock_price = scaler.inverse_transform(predicted_stock_price)","f0a6696b":"import math\nfrom sklearn.metrics import mean_squared_error\n\ntrain_predict = regressor.predict(X_train)\ntest_predict = regressor.predict(X_test)\ntrain_predict = scaler.inverse_transform(train_predict)\ntrainY = scaler.inverse_transform([y_train])\ntest_predict = scaler.inverse_transform(test_predict)\ntestY= scaler.inverse_transform([y_test])\ntrain_score = math.sqrt(mean_squared_error(trainY[0],train_predict[:,0]))\nprint('Train Score %.2f RMSE' %(train_score))\ntest_score = math.sqrt(mean_squared_error(testY[0],test_predict[:,0]))\nprint('Test Score %.2f RMSE' %(test_score))","cef144e0":"plt.plot(real_stock_price, color =  'red', label = 'real_stock_price')\nplt.plot(predicted_stock_price, color = 'blue', label = 'predicted_stock_price without lstm' )\nplt.title('Google Stock Price Prediction')\nplt.xlabel('Time')\nplt.ylabel('Google Stock Price')\nplt.legend()\nplt.show","93384862":"* **Compilation of RNN (Compiling RNN)**","fc26de6f":"# Implementing RNN(Recurrent Neural Network without LSTM) with Keras\n* > For Implementing RNN(Recurrent Neural Network with LSTM) with Kreas, Please Look at [here](https:\/\/www.kaggle.com\/muhammeddalkran\/implementing-rnn-stock-price-dataset-with-keras)","86ec6840":"* **Getting Test Data**","9be7da48":"# Reshaping","d8b6977f":"* **Adding the output layer**","6fdc7578":"# Predictions and Visualization RNN Model","6afb5352":"# Feature Scaling (Normalization)","f9457046":"# Create RNN Model","13b0c2dc":"* **Needed Libraries**","c1405f8b":"# Load and Preprocessing Data","48f7e39f":"* This preprocessing provide us with opportunities to rescale our train data from 0 to 1. \n* Actually, It is a normalization process. ","3b021558":"# Spliting Train to x_train and y_train\n* In this part, A data structure with 50 timesteps and 1 output is  created.\n* It takes first 50 datas as x_train and 51th data become y_train to predict it. Then again It takes 1 - 51 data as x_train and 52th data as y_train and so on with shifting one.","4e4109d6":"* **Prediction Part**","893ab488":"* > Note that: this model gives us not good result even if its loss result is very small (Loss = 0.0018). \n* > To deal with this obstacle, we should implement LSTM into our model. \n* > Therefore, I write same model with LSTM.\n* > You can find LSTM model [here](https:\/\/www.kaggle.com\/muhammeddalkran\/implementing-rnn-stock-price-dataset-with-keras)","bc412569":"* **Adding RNN Layers and Dropouts to regulate**","2a7a467f":"* Visualization of Our Train Data\n","0d9e6962":"* **Fitting the RNN to the Training data set**","eb744ceb":"* **Initializing Recurrent Neural Neural**","d2dff73b":"* **Visualization**"}}