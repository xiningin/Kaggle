{"cell_type":{"da298049":"code","14845b32":"code","3971924d":"code","7031f1d5":"code","b2b0898e":"code","822a6c67":"code","672efa0a":"code","904a689f":"code","7b441692":"code","4e722307":"code","82284af0":"code","c9585f28":"code","f98405ab":"code","9e8eb8d1":"code","2bf3f2ab":"code","6139dd42":"code","e044eeba":"code","c4d2ae59":"code","903a384e":"markdown","2031b5b6":"markdown","1be67575":"markdown","b4d28103":"markdown","eedf754a":"markdown","56b7bea3":"markdown","0281113f":"markdown","e361ee1e":"markdown","6c6c24f0":"markdown","02377f71":"markdown"},"source":{"da298049":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","14845b32":"# load of test and training data\ntrain_raw_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_raw_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","3971924d":"# Exploring and understand the data set\ntrain_raw_data.head()","7031f1d5":"# Scan training data, null data count\nprint(\"Train data\")\ntrain_raw_data.isnull().sum()","b2b0898e":"# Mapping unique values from Embarked\nlookup_Embarked_values = dict(zip(train_raw_data.Embarked.unique(), train_raw_data.Embarked.unique()))   \nlookup_Embarked_values","822a6c67":"# Clean data process \ndef clean_data(df):\n    # Fill de Nan Valuen in Fare an Age \n    df[\"Fare\"]=df[\"Fare\"].fillna(df[\"Fare\"].dropna().median())\n    # Fill the Nan values in Age Column\n    df[\"Age\"]=df[\"Age\"].fillna(df[\"Age\"].dropna().median())\n    #Clear NaN values from embarked:\n    df.dropna(subset=['Embarked'],inplace=True)\n    #Drop Columns no used to do the analsis\n    df.drop(['Cabin','Name','PassengerId','Ticket'],axis=1,inplace=True)\n    #Change Male and female por numeric values\n    df.Sex = [1 if each == \"male\" else 0 for each in df.Sex]\n    #Change Embarked por numeric values\n    df.loc[df[\"Embarked\"]==\"S\",\"Embarked\"]=0\n    df.loc[df[\"Embarked\"]==\"C\",\"Embarked\"]=1\n    df.loc[df[\"Embarked\"]==\"Q\",\"Embarked\"]=2\n    \n    return df\n\nclean_train_data = clean_data(train_raw_data)","672efa0a":"clean_train_data.isnull().sum()","904a689f":"clean_train_data.head()","7b441692":"#Split de train clean data in X(data) y Y(Label):\nX = clean_train_data.drop('Survived', axis=1)\ny = clean_train_data.get('Survived')","4e722307":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 0)\n\nclf = LogisticRegression().fit(X_train, y_train)\nprint('Breast cancer dataset')\nprint('Accuracy of Logistic regression classifier on training set: {:.2f}'\n     .format(clf.score(X_train, y_train)))\nprint('Accuracy of Logistic regression classifier on test set: {:.2f}'\n     .format(clf.score(X_test, y_test)))","82284af0":"test_raw_data.head()","c9585f28":"#Exploraci\u00f3n y limpieza de los datos de prueba:\nprint(\"Test data\")\ntest_raw_data.isnull().sum()","f98405ab":"# Clean data process \ndef clean_data(df):\n    # Fill de Nan Valuen in Fare an Age \n    df[\"Fare\"]=df[\"Fare\"].fillna(df[\"Fare\"].dropna().median())\n    # Fill the Nan values in Age Column\n    df[\"Age\"]=df[\"Age\"].fillna(df[\"Age\"].dropna().median())\n    #Clear NaN values from embarked:\n    df.dropna(subset=['Embarked'],inplace=True)\n    #Drop Columns no used to do the analsis\n    df.drop(['Cabin','Name','Ticket'],axis=1,inplace=True)\n    #Change Male and female por numeric values\n    df.Sex = [1 if each == \"male\" else 0 for each in df.Sex]\n    #Change Embarked por numeric values\n    df.loc[df[\"Embarked\"]==\"S\",\"Embarked\"]=0\n    df.loc[df[\"Embarked\"]==\"C\",\"Embarked\"]=1\n    df.loc[df[\"Embarked\"]==\"Q\",\"Embarked\"]=2\n    \n    return df","9e8eb8d1":"clean_test_data = clean_data(test_raw_data)\nclean_test_data.isnull().sum()","2bf3f2ab":"clean_test_data.head()","6139dd42":"# Add the column ['predicted_survived'] to data set\nclean_test_data['predicted_survived'] = clf.predict(clean_test_data.drop('PassengerId',axis=1))","e044eeba":"clean_test_data.head()","c4d2ae59":"submission = pd.DataFrame({\n        \"PassengerId\": clean_test_data['PassengerId'],\n        \"Survived\": clean_test_data['predicted_survived']\n    })\nsubmission.to_csv('submission.csv',index=False)","903a384e":"**Clean the test data set**\n\nTo clean the test data the first thing that will be done is:\n\n* Fill in the null age and fare data using the median\n* Drop the null values from the 'Embarked' column\n* Drop the columns ['Cabin','Name','Ticket']\n* Change the sex data to numerical data, 1 for male and 0 for female\n* Change Embarked by numeric values","2031b5b6":"**Use the clean_test_data in the KNeighbors Classifier created earlier**\n\nWith the test data created and cleaned, we make the prediction using the model created previously","1be67575":"Create train-test split for fit and score the Logistic Regression","b4d28103":"**Exploring the test data set**","eedf754a":"Split de train_clean_data\n\nSplit 'clean train data' to get the data and tags that are saved in the DataFrame:\n\n* The data is found in the columns:['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked'] and will be saved in the variable x\n* The tags are found in the columns: ['Survived'] and will be saved in the variable y","56b7bea3":"Clean the training data set\n\nTo clean the training data the first thing that will be done is:\n\n* Fill in the null age and fare data using the median\n* Drop the two null values from the 'Embarked' column\n* Drop the colunms ['Cabin','Name','PassengerId','Ticket']\n* Change the sex data to numerical data, 1 for male and 0 for female\n* Change Embarked by numeric values","0281113f":"It is necessary to perform an initial scan to understand the data and then make the necessary adjustments to them \n(Cleaning)","e361ee1e":"**Machine Learning 2.0 Up the firts score:**\n\nMy first solution to the proposed problem was built using the **KNN model**, since it was the first one I learned and wanted to test it. The idea with this second attempt is to improve the rating initially obtained for that I will use the **Logistic Regression** model","6c6c24f0":"We explore the final prediction result and create the file that should be sent for evaluation","02377f71":"**Load the data**\n\nIn this case I use the variables, train_raw_data and test_raw_data, to save each of the data set."}}