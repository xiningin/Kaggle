{"cell_type":{"941a098f":"code","16645267":"code","32f04def":"code","3abb1409":"code","009b7cb4":"code","6c0ba0cf":"code","306f1070":"code","26c5ba1a":"code","13bddfed":"code","6357f378":"code","ca32c166":"code","67c1c88b":"code","2d8b2c00":"code","8ab4d292":"code","b4d546e8":"code","42c46160":"code","b6c97c05":"code","e5546b66":"code","3b164555":"code","b8afa13d":"code","d0eaccd3":"code","00c608e3":"code","f756eabb":"code","b3450cf8":"code","f584f9b9":"code","62d50ae4":"code","a6e52c4b":"code","fcb2fc37":"markdown","63b3869f":"markdown","c6edf50f":"markdown"},"source":{"941a098f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","16645267":"!pip install tensorflow-addons","32f04def":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.models import Sequential, Model\nfrom tensorflow.keras.layers import (\n    Conv2D, BatchNormalization, Dropout, MaxPool2D,#Normalization,\n    Flatten, Dense, Input, Concatenate, LeakyReLU, Add\n)\nimport tensorflow_addons as tfa\n\nfrom sklearn.model_selection import train_test_split","3abb1409":"img_shape = (28,28,1)\nepochs = 100\nbatch = 16","009b7cb4":"train = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('..\/input\/digit-recognizer\/test.csv')\n\nsub = pd.read_csv('..\/input\/digit-recognizer\/sample_submission.csv')","6c0ba0cf":"testing = test.to_numpy().reshape(28000,28,28,1)","306f1070":"x = train.iloc[:,1:]\ny = train.iloc[:,:1]","26c5ba1a":"train_x, val_x, train_y,val_y = train_test_split(x,y, test_size=0.2,\n                                                stratify=y)\n\nprint(train_x.shape,train_y.shape)\nprint(val_x.shape,val_y.shape)","13bddfed":"def gen(data_x,data_y):\n    for x in range(len(data_x)):\n        y = np.zeros(10)\n        tmp = data_x[x]\n        input_ = tmp.reshape(img_shape)\/255.\n        y[int(data_y[x][0])] = 1.\n        input_ = tf.convert_to_tensor(input_,dtype=tf.float32)\n        y = tf.convert_to_tensor(y,dtype=tf.float32)\n        yield input_,y","6357f378":"train_dataset = tf.data.Dataset.from_generator(gen,\n                                         (tf.float32,tf.float32),\n                                         ((img_shape),(10)),\n                                         args=(train_x,train_y))\nval_dataset = tf.data.Dataset.from_generator(gen,\n                                         (tf.float32,tf.float32),\n                                         (img_shape,(10)),\n                                         args=(val_x,val_y))\ntrain_dataset = train_dataset.shuffle(128).batch(batch)\nval_dataset = val_dataset.shuffle(128).batch(batch)\nfor example in train_dataset.take(1):\n    plt.subplot(2,1,1)\n    image, label = example\n    plt.imshow(image[0])\n    plt.title(str(np.argmax(label)))\n    \nfor example in val_dataset.take(1):\n    plt.subplot(2,1,2)\n    image, label = example\n    plt.imshow(image[0])\n    plt.title(str(np.argmax(label)))    \n    \nplt.show()","ca32c166":"def makemodel():\n    model = Sequential()\n    model.add(Conv2D(32, kernel_size = 3, activation='relu', input_shape = (28, 28, 1)))\n    model.add(Conv2D(32, kernel_size = 3, activation='relu'))\n    model.add(Conv2D(32, kernel_size = 5, strides=2, padding='same', activation='relu'))\n\n    model.add(Flatten())\n    model.add(Dropout(0.4))\n    model.add(Dense(10, activation='softmax'))\n\n    # COMPILE WITH ADAM OPTIMIZER AND CROSS ENTROPY COST\n    model.compile(optimizer=\"adam\", loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])\n    return model","67c1c88b":"cnn_model = makemodel()\ncnn_history = cnn_model.fit(\n    train_dataset,validation_data=val_dataset,\n    epochs=epochs, \n    verbose=1\n)","2d8b2c00":"input_shape = (28,28,1)\nlearning_rate = 0.001\nweight_decay = 0.0001\nbatch_size = 16\nnum_epochs = 100\nimage_size = 72  # We'll resize input images to this size\npatch_size = 6  # Size of the patches to be extract from the input images\nnum_patches = (image_size \/\/ patch_size) ** 2\nprojection_dim = 64\nnum_heads = 4\ntransformer_units = [\n    projection_dim * 2,\n    projection_dim,\n]  # Size of the transformer layers\ntransformer_layers = 8\nmlp_head_units = [2048, 1024]  # Size of the dense layers of the final classifier","8ab4d292":"def gen(data_x,data_y):\n    for x in range(len(data_x)):\n        y = np.zeros(10)\n        tmp = data_x[x]\n        input_ = tmp.reshape(img_shape)\/255.\n        y[int(data_y[x][0])] = 1.\n        input_ = tf.convert_to_tensor(input_,dtype=tf.float32)\n        y = tf.convert_to_tensor(y,dtype=tf.float32)\n        yield input_,data_y[x]\n        \ntrain_dataset = tf.data.Dataset.from_generator(gen,\n                                         (tf.float32,tf.float32),\n                                         ((img_shape),(1)),\n                                         args=(train_x,train_y))\nval_dataset = tf.data.Dataset.from_generator(gen,\n                                         (tf.float32,tf.float32),\n                                         (img_shape,(1)),\n                                         args=(val_x,val_y))\ntrain_dataset = train_dataset.shuffle(128).batch(batch_size)\nval_dataset = val_dataset.shuffle(128).batch(batch_size)\n\nfor image, label in train_dataset.take(1):\n    print(label)\n    for i in range(batch_size):\n        plt.subplot(4,4,i+1)\n        plt.imshow(image[i])\n\nplt.show()","b4d546e8":"data_augmentation = keras.Sequential(\n    [\n        layers.experimental.preprocessing.Normalization(),\n        layers.experimental.preprocessing.Resizing(image_size, image_size),\n        layers.experimental.preprocessing.RandomFlip(\"horizontal\"),\n        layers.experimental.preprocessing.RandomRotation(factor=0.02),\n        layers.experimental.preprocessing.RandomZoom(\n            height_factor=0.2, width_factor=0.2\n        ),\n    ],\n    name=\"data_augmentation\",\n)","42c46160":"def mlp(x, hidden_units, dropout_rate):\n    for units in hidden_units:\n        x = layers.Dense(units, activation=tf.nn.gelu)(x)\n        x = layers.Dropout(dropout_rate)(x)\n    return x","b6c97c05":"class Patches(layers.Layer):\n    def __init__(self, patch_size):\n        super(Patches, self).__init__()\n        self.patch_size = patch_size\n\n    def call(self, images):\n        batch_size = tf.shape(images)[0]\n        patches = tf.image.extract_patches(\n            images=images,\n            sizes=[1, self.patch_size, self.patch_size, 1],\n            strides=[1, self.patch_size, self.patch_size, 1],\n            rates=[1, 1, 1, 1],\n            padding=\"VALID\",\n        )\n        patch_dims = patches.shape[-1]\n        patches = tf.reshape(patches, [batch_size, -1, patch_dims])\n        return patches","e5546b66":"plt.figure(figsize=(4, 4))\nimage = train_x.iloc[0].to_numpy().reshape((28,28,1))\nplt.imshow(image.astype(\"uint8\"))\nplt.axis(\"off\")\n\nresized_image = tf.image.resize(\n    tf.convert_to_tensor([image]), size=(image_size, image_size)\n)\npatches = Patches(patch_size)(resized_image)\nprint(f\"Image size: {image_size} X {image_size}\")\nprint(f\"Patch size: {patch_size} X {patch_size}\")\nprint(f\"Patches per image: {patches.shape[1]}\")\nprint(f\"Elements per patch: {patches.shape[-1]}\")\n\nn = int(np.sqrt(patches.shape[1]))\nplt.figure(figsize=(4, 4))\nfor i, patch in enumerate(patches[0]):\n    ax = plt.subplot(n, n, i + 1)\n    patch_img = tf.reshape(patch, (patch_size, patch_size, 1))\n    plt.imshow(patch_img.numpy().astype(\"uint8\"))\n    plt.axis(\"off\")","3b164555":"class PatchEncoder(layers.Layer):\n    def __init__(self, num_patches, projection_dim):\n        super(PatchEncoder, self).__init__()\n        self.num_patches = num_patches\n        self.projection = layers.Dense(units=projection_dim)\n        self.position_embedding = layers.Embedding(\n            input_dim=num_patches, output_dim=projection_dim\n        )\n\n    def call(self, patch):\n        positions = tf.range(start=0, limit=self.num_patches, delta=1)\n        encoded = self.projection(patch) + self.position_embedding(positions)\n        return encoded","b8afa13d":"def create_vit_classifier():\n    inputs = layers.Input(shape=input_shape)\n    # Augment data.\n    augmented = data_augmentation(inputs)\n    # Create patches.\n    patches = Patches(patch_size)(augmented)\n    # Encode patches.\n    encoded_patches = PatchEncoder(num_patches, projection_dim)(patches)\n\n    # Create multiple layers of the Transformer block.\n    for _ in range(transformer_layers):\n        # Layer normalization 1.\n        x1 = layers.LayerNormalization(epsilon=1e-6)(encoded_patches)\n        # Create a multi-head attention layer.\n        attention_output = layers.MultiHeadAttention(\n            num_heads=num_heads, key_dim=projection_dim, dropout=0.1\n        )(x1, x1)\n        # Skip connection 1.\n        x2 = layers.Add()([attention_output, encoded_patches])\n        # Layer normalization 2.\n        x3 = layers.LayerNormalization(epsilon=1e-6)(x2)\n        # MLP.\n        x3 = mlp(x3, hidden_units=transformer_units, dropout_rate=0.1)\n        # Skip connection 2.\n        encoded_patches = layers.Add()([x3, x2])\n\n    # Create a [batch_size, projection_dim] tensor.\n    representation = layers.LayerNormalization(epsilon=1e-6)(encoded_patches)\n    representation = layers.Flatten()(representation)\n    representation = layers.Dropout(0.5)(representation)\n    # Add MLP.\n    features = mlp(representation, hidden_units=mlp_head_units, dropout_rate=0.5)\n    # Classify outputs.\n    logits = layers.Dense(10)(features)\n    # Create the Keras model.\n    model = keras.Model(inputs=inputs, outputs=logits)\n    return model","d0eaccd3":"def run_experiment(model):\n    optimizer = tfa.optimizers.AdamW(\n        learning_rate=learning_rate, weight_decay=weight_decay\n    )\n\n    model.compile(\n        optimizer=optimizer,\n        loss=keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n        metrics=[\n            keras.metrics.SparseCategoricalAccuracy(name=\"accuracy\"),\n            keras.metrics.SparseTopKCategoricalAccuracy(5, name=\"top-5-accuracy\"),\n        ],\n    )\n\n    checkpoint_filepath = \".\/\"\n    checkpoint_callback = keras.callbacks.ModelCheckpoint(\n        checkpoint_filepath,\n        monitor=\"val_accuracy\",\n        save_best_only=True,\n        save_weights_only=True,\n    )\n\n    history = model.fit(\n        train_dataset,validation_data=val_dataset,\n        batch_size=batch_size,\n        epochs=num_epochs,\n        callbacks=[checkpoint_callback],\n    )\n\n    model.load_weights(checkpoint_filepath)\n    _, accuracy, top_5_accuracy = model.evaluate(val_dataset)\n    print(f\"Test accuracy: {round(accuracy * 100, 2)}%\")\n    print(f\"Test top 5 accuracy: {round(top_5_accuracy * 100, 2)}%\")\n    return history","00c608e3":"vit_classifier = create_vit_classifier()\nvit_history = run_experiment(vit_classifier)","f756eabb":"model = create_vit_classifier()\nmodel.load_weights('.\/')","b3450cf8":"pred = model.predict(testing)","f584f9b9":"preds = []\nfor x in pred:\n    preds.append(np.argmax(x))","62d50ae4":"sub['Label'] = preds","a6e52c4b":"sub.to_csv('sub.csv')","fcb2fc37":"## VIT  \n[reference](https:\/\/keras.io\/examples\/vision\/image_classification_with_vision_transformer\/)","63b3869f":"* * *","c6edf50f":"## Basic CNN"}}