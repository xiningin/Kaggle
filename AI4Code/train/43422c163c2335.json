{"cell_type":{"9d0acc6d":"code","f7fe1392":"code","f09994f7":"code","6d6add5c":"code","e6fe1be0":"code","d971cba1":"code","58682114":"code","3ac60910":"code","76aff468":"code","19e4d974":"code","acfa9975":"code","1223375a":"code","f0c66b38":"code","b306ae9c":"code","75b5dd2c":"code","0ef64fd4":"code","42ede0ec":"code","548c23e3":"code","ef551fcc":"markdown","52611906":"markdown","44b33f17":"markdown","fe91ba98":"markdown","1cc6556b":"markdown","60b0cfdf":"markdown","180bd173":"markdown","57823f4a":"markdown","f4a18e62":"markdown"},"source":{"9d0acc6d":"import pandas as pd\nimport numpy as np\nfrom itertools import product, combinations\nimport gc\n\n\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\nfrom sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\n\nrand_state = 719","f7fe1392":"from time import time\ndef timer(t): # t = beginning of timing\n    timing = time() - t\n    if timing < 60:\n        return str(round(timing,1)) + ' second(s)'\n    elif timing < 3600:\n        return str(round(timing \/ 60,1)) + ' minute(s)'\n    else:\n        return str(round(timing \/ 3600,1)) + ' hour(s)'","f09994f7":"data_path = '\/kaggle\/input\/learn-together\/'\ndef reload(x):\n    return pd.read_csv(data_path + x, index_col = 'Id')\n\ntrain = reload('train.csv')\nn_train = len(train)\ntest = reload('test.csv')\nn_test = len(test)\n\nindex_test = test.index.copy()\ny_train = train.Cover_Type.copy()\nall_data = train.iloc[:,train.columns != 'Cover_Type'].append(test)\nall_data['train'] = [1]*n_train + [0]*n_test\n\ndel train\ndel test","6d6add5c":"numerical = ['Elevation', 'Horizontal_Distance_To_Hydrology',\n             'Vertical_Distance_To_Hydrology', 'Horizontal_Distance_To_Roadways',\n             'Horizontal_Distance_To_Fire_Points',\n             'Aspect', 'Slope', \n             'Hillshade_9am', 'Hillshade_Noon', 'Hillshade_3pm']\n\ncategorical = ['Soil_Type{}'.format(i) for i in range(1,41)] + ['Wilderness_Area{}'.format(i) for i in range(1,5)]","e6fe1be0":"questionable_0 = ['Hillshade_9am', 'Hillshade_3pm']\n\ncorr_cols = {'Hillshade_9am': ['Hillshade_3pm', 'Aspect', 'Slope', 'Soil_Type10', 'Wilderness_Area1',\n                               'Wilderness_Area4', 'Vertical_Distance_To_Hydrology']\n            , 'Hillshade_3pm': ['Hillshade_9am', 'Hillshade_Noon', 'Slope', 'Aspect']\n            }","d971cba1":"rfr = RandomForestRegressor(n_estimators = 100, random_state = rand_state, verbose = 1, n_jobs = -1)\nfor col in questionable_0:\n    print('='*20)\n    print(col)\n    all_data_0 = all_data[all_data[col] == 0].copy()\n    all_data_non0 = all_data[all_data[col] != 0].copy()\n    rfr.fit(all_data_non0[corr_cols[col]], all_data_non0[col])\n    pred = rfr.predict(all_data_0[corr_cols[col]])\n    pred_col = 'predicted_{}'.format(col)\n    \n    all_data[pred_col] = all_data[col].copy()\n    all_data.loc[all_data_0.index, pred_col] = pred\n\nfor col in questionable_0:\n    all_data['predicted_{}'.format(col)] = all_data['predicted_{}'.format(col)].apply(int)","58682114":"def aspect_slope(df):\n    df['AspectSin'] = np.sin(np.radians(df.Aspect))\n    df['AspectCos'] = np.cos(np.radians(df.Aspect))\n    df['AspectSin_Slope'] = df.AspectSin * df.Slope\n    df['AspectCos_Slope'] = df.AspectCos * df.Slope\n    df['AspectSin_Slope_Abs'] = np.abs(df.AspectSin_Slope)\n    df['AspectCos_Slope_Abs'] = np.abs(df.AspectCos_Slope)\n    df['Hillshade_Mean'] = df[['Hillshade_9am',\n                              'Hillshade_Noon',\n                              'Hillshade_3pm']].apply(np.mean, axis = 1)\n    return df","3ac60910":"def distances(df):\n    horizontal = ['Horizontal_Distance_To_Fire_Points', \n                  'Horizontal_Distance_To_Roadways',\n                  'Horizontal_Distance_To_Hydrology']\n    \n    df['Euclidean_to_Hydrology'] = np.sqrt(df['Horizontal_Distance_To_Hydrology']**2 + df['Vertical_Distance_To_Hydrology']**2)\n    df['EuclidHydro_Slope'] = df.Euclidean_to_Hydrology * df.Slope\n    df['Elevation_VDH_sum'] = df.Elevation + df.Vertical_Distance_To_Hydrology\n    df['Elevation_VDH_diff'] = df.Elevation - df.Vertical_Distance_To_Hydrology\n    df['Elevation_2'] = df.Elevation**2\n    df['Elevation_3'] = df.Elevation**3\n    df['Elevation_log1p'] = np.log1p(df.Elevation) # credit: https:\/\/www.kaggle.com\/evimarp\/top-6-roosevelt-national-forest-competition\/notebook\n    \n    for col1, col2 in combinations(zip(horizontal, ['HDFP', 'HDR', 'HDH']), 2):\n        df['{0}_{1}_diff'.format(col1[1], col2[1])] = df[col1[0]] - df[col2[0]]\n        df['{0}_{1}_sum'.format(col1[1], col2[1])] = df[col1[0]] + df[col2[0]]\n    \n    df['Horizontal_sum'] = df[horizontal].sum(axis = 1)\n    return df","76aff468":"def OHE_to_cat(df, colname, data_range): # data_range = [min_index, max_index+1]\n    df[colname] = sum([i * df[colname + '{}'.format(i)] for i in range(data_range[0], data_range[1])])\n    return df","19e4d974":"soils = [\n    [7, 15, 8, 14, 16, 17,19, 20, 21, 23], #unknow and complex \n    [3, 4, 5, 10, 11, 13],   # rubbly\n    [6, 12],    # stony\n    [2, 9, 18, 26],      # very stony\n    [1, 24, 25, 27, 28, 29, 30,\n     31, 32, 33, 34, 36, 37, 38, \n     39, 40, 22, 35], # extremely stony and bouldery\n]\nsoil_dict = {}\nfor index, soil_group in enumerate(soils):\n    for soil in soil_group:\n        soil_dict[soil] = index\n\ndef rocky(df):\n    df['Rocky'] = sum(i * df['Soil_Type' + str(i)] for i in range(1,41))\n    df['Rocky'] = df['Rocky'].map(soil_dict)\n    return df","acfa9975":"all_data = aspect_slope(all_data)\nall_data = distances(all_data)\nall_data = OHE_to_cat(all_data, 'Wilderness_Area', [1,5])\nall_data = OHE_to_cat(all_data, 'Soil_Type', [1,41])\nall_data = rocky(all_data)\nall_data.drop(['Soil_Type7', 'Soil_Type15', 'train'] + questionable_0, axis = 1, inplace = True)","1223375a":"# Important columns: https:\/\/www.kaggle.com\/hoangnguyen719\/beginner-eda-and-feature-engineering\nimportant_cols = ['Elevation', 'Aspect', 'Slope', 'Horizontal_Distance_To_Hydrology'\n                  , 'Vertical_Distance_To_Hydrology', 'Horizontal_Distance_To_Roadways'\n                  , 'Hillshade_Noon', 'Horizontal_Distance_To_Fire_Points', 'Wilderness_Area1'\n                  , 'Wilderness_Area3', 'Wilderness_Area4', 'Soil_Type3', 'Soil_Type4', 'Soil_Type10'\n                  , 'predicted_Hillshade_9am', 'predicted_Hillshade_3pm', 'AspectSin', 'AspectCos'\n                  , 'AspectSin_Slope', 'AspectCos_Slope', 'AspectSin_Slope_Abs', 'AspectCos_Slope_Abs'\n                  , 'Hillshade_Mean', 'Euclidean_to_Hydrology', 'EuclidHydro_Slope'\n                  , 'Elevation_VDH_sum', 'Elevation_VDH_diff', 'Elevation_2', 'Elevation_3'\n                  , 'Elevation_log1p', 'HDFP_HDR_diff', 'HDFP_HDR_sum', 'HDFP_HDH_diff'\n                  , 'HDFP_HDH_sum', 'HDR_HDH_diff', 'HDR_HDH_sum', 'Horizontal_sum'\n                  , 'Wilderness_Area', 'Soil_Type', 'Rocky'\n                 ]","f0c66b38":"all_data = all_data[important_cols]\nX_train = all_data.iloc[:n_train,:].copy()\nX_test = all_data.iloc[n_train:, :].copy()\ndel all_data\n\ndef mem_reduce(df):\n    # credit: https:\/\/www.kaggle.com\/arateris\/2-layer-k-fold-learning-forest-cover\n    start_mem = df.memory_usage().sum() \/ 1024.0**2\n    for col in df.columns:\n        if df[col].dtype=='float64': \n            df[col] = df[col].astype('float32')\n        if df[col].dtype=='int64': \n            if df[col].max()<1: df[col] = df[col].astype(bool)\n            elif df[col].max()<128: df[col] = df[col].astype('int8')\n            elif df[col].max()<32768: df[col] = df[col].astype('int16')\n            else: df[col] = df[col].astype('int32')\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Reduce from {0:.3f} MB to {1:.3f} MB (decrease by {2:.2f}%)'.format(start_mem, end_mem, \n                                                                (start_mem - end_mem)\/start_mem*100))\n    return df\n\nX_train = mem_reduce(X_train)\nprint('='*10)\nX_test=mem_reduce(X_test)\ngc.collect()","b306ae9c":"# lgbmc = LGBMClassifier(learning_rate = 1\n#                        , max_depth = 450\n#                        , n_estimators = 700\n#                        , num_leaves = 5\n#                       )\n\n# scores = cross_val_score(lgbmc\n#                          , X_train\n#                          , y_train\n#                          , scoring = 'accuracy'\n#                          , n_jobs = -1\n#                          , verbose = 1\n#                         )\n\n# print('{0:.2f} (+\/- {1:.2f})'.format(scores.mean()\n#                                      , scores.std()\n#                                     ))\n##### OUTPUT######\n# 0.45 (+\/- 0.10)","75b5dd2c":"params = {'max_depth': [5, 15, 45]\n          , 'learning_rate': [0.1, 0.3, 1]\n          , 'n_estimators':  np.logspace(2.3,3,4).astype(int) # array([ 199,  341,  584, 1000])\n          , 'reg_lambda': [0.1, 0.5]\n         } \nlgbmc = LGBMClassifier(objective = 'multiclass'\n                       , num_class = 7\n                       , num_leaves = 50\n                      )\ngrid = GridSearchCV(estimator = lgbmc\n                  , param_grid = params\n                  , n_jobs = -1\n                  , cv = 3\n                  , scoring = 'accuracy'\n                  , verbose = 1\n                  )\nt = time()\ngrid.fit(X_train, y_train)\n\n#### PREVIOUS OUTPUT #####\n# Best hyper-parameters found:\n# {'learning_rate': 0.3, 'max_depth': 15, 'n_estimators': 316}\n\n# Fitting time:\n# 16.813884496688843\n# \\Best score:\n# 0.7985449735449736\n\nprint('Total training time: {}'.format(timer(t)))\n\nprint('Best hyper-parameters found:')\nprint(grid.best_params_)\nprint('\\nFitting time:')\nprint(grid.refit_time_)\nprint('\\nBest score:')\nprint(grid.best_score_)","0ef64fd4":"results = pd.DataFrame(grid.cv_results_)\nresults.sort_values(by=['rank_test_score'], inplace=True)\nresults[['params', 'mean_fit_time','mean_test_score']].head(10)","42ede0ec":"print('Best 10 hyper-params combinations: ')\nprint(results[['params', 'mean_fit_time','mean_test_score']].head(10))","548c23e3":"predict = grid.predict(X_test)\noutput = pd.DataFrame({'Id': index_test\n                       ,'Cover_Type': predict\n                      })\noutput.to_csv('Submission.csv', index=False)","ef551fcc":"#### Params tuning\nRanges of hyper-params were chosen arbitrarily based on this __[tuning results](https:\/\/www.kaggle.com\/arateris\/xgb-rf-with-gridsearch-for-forest-classifier\/#Searching-model-param-with-test-distributions\/#Light-GBM)__ by @arateris.","52611906":"### Rockiness","44b33f17":"### Params Tuning\n#### Trial run","fe91ba98":"# Load Data","1cc6556b":"# Other Features\n### Aspect, Slope & Shadow","60b0cfdf":"# Impute \"Fake\" 0s","180bd173":"# Hyper-params Tuning\n### Data setup","57823f4a":"### Categorical","f4a18e62":"### Distances & Elevation"}}