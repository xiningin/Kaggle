{"cell_type":{"57e29d99":"code","26f9b199":"code","0554d22b":"code","b731243e":"code","df45c783":"code","d869a97a":"code","83c8cc00":"code","43dc33c5":"code","266b45db":"code","2b6e79fc":"code","e237ff58":"code","79c75973":"code","352c727e":"code","086ba21d":"code","650b9047":"code","f7debf13":"code","dcd4a81d":"code","2bb8b4d3":"code","3c797f7b":"code","d1132519":"code","9bcd2326":"code","21b9048f":"code","57d00d0c":"markdown","68a9a607":"markdown"},"source":{"57e29d99":"# \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport numpy as np # \u884c\u5217\u6f14\u7b97\nimport pandas as pd # \u30c6\u30fc\u30d6\u30eb\u30c7\u30fc\u30bf\u3092\u6271\u3046\nfrom pandas import DataFrame\npd.set_option(\"display.max_columns\", 100) # \u30ab\u30e9\u30e0\u6570\u8868\u793a\u306e\u4e0a\u9650\u3092100\u306b\u7de9\u548c\n\nimport matplotlib.pyplot as plt # \u53ef\u8996\u5316\u30e9\u30a4\u30d6\u30e9\u30ea\nplt.style.use('ggplot')\n%matplotlib inline\n\nfrom category_encoders import CountEncoder # \u30ab\u30c6\u30b4\u30ea\u3092\u6570\u5024\u306b\u5909\u63db\uff08\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\uff09\nfrom sklearn.feature_extraction.text import TfidfVectorizer # scikit-learn\u3000python\u3067ML\u3084\u308b\u4e0a\u3067\u306e\u30c7\u30d5\u30a1\u30af\u30c8\u30e9\u30a4\u30d6\u30e9\u30ea\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import KFold\n\nfrom tqdm.notebook import tqdm # \u30d7\u30ed\u30b0\u30ec\u30b9\u30d0\u30fc\nfrom xgboost import XGBRegressor # \u5b66\u7fd2\u5668\uff08\u5f37\u3044\u3084\u3064 \u305d\u306e1\uff09\nfrom lightgbm import LGBMRegressor # \u5b66\u7fd2\u5668\uff08\u5f37\u3044\u3084\u3064 \u305d\u306e2\uff09\nimport cv2 #opencv, \u753b\u50cf\u30c7\u30fc\u30bf\u306e\u5404\u7a2e\u51e6\u7406\u306b\u4f7f\u3046","26f9b199":"# \u30e1\u30a4\u30f3\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3093\u3067\u898b\u307e\u3059\ndf_train = pd.read_csv('\/kaggle\/input\/data-science-autumn-2021\/train.csv', parse_dates=['latest_saledate'])\ndf_test = pd.read_csv('\/kaggle\/input\/data-science-autumn-2021\/test.csv', parse_dates=['latest_saledate'])","0554d22b":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u305d\u308c\u305e\u308c\u306e\u884c\u6570\u3068\u5217\u6570\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\ndf_train.shape, df_test.shape","b731243e":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u5148\u982d\uff15\u884c\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\n# \u3056\u3063\u3068\u307f\u305f\u3068\u3053\u308d\u3067\u306f\u3001\u6570\u5024\u3001\u30ab\u30c6\u30b4\u30ea\u3001\u65e5\u4ed8\u306e\u4ed6\u306b\u3001\u30c6\u30ad\u30b9\u30c8\uff08description\uff09\u3001\u5730\u7406\u7a7a\u9593\uff08latitude\/longitude\u306a\u3069\uff09\u3001\u753b\u50cf(homeImage)\u304c\u542b\u307e\u308c\u308b\u3088\u3046\u3067\u3059\u306d\u3002\n# \u753b\u50cf\u306ffile path\u304c\u5165\u3063\u3066\u3044\u307e\u3059\u3002\ndf_train.head()","df45c783":"# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5148\u982d\uff15\u884c\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\ndf_test.head()","d869a97a":"df_train['homeImage'] # Series","83c8cc00":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u306b\u5bfe\u5fdc\u3059\u308b\u753b\u50cf\u3092\u5148\u982d12\u679a\u307f\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n# \u7dba\u9e97\u306a\u304a\u5bb6\u3067\u3059\u306d\u3002\u65e5\u672c\u3067\u306f\u306a\u304b\u306a\u304b\u306a\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\nn=12\nfiles = df_train['homeImage'].values[:n]\n\nplt.figure(figsize=[30,30])\nfor i, file in enumerate(files):\n    plt.subplot(n\/\/3,3,i+1)\n    img = cv2.imread('\/kaggle\/input\/data-science-autumn-2021\/train\/%s'%file)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    plt.title(file)\n    plt.imshow(img)\nplt.show()","43dc33c5":"# \u8aac\u660e\u5909\u6570\u3068\u30bf\u30fc\u30b2\u30c3\u30c8\u5909\u6570\u306b\u5206\u5272\u3057\u3066\u304a\u304d\u307e\u3059\n# \u30c6\u30ad\u30b9\u30c8\u3068\u753b\u50cf\u4e00\u65e6\u9664\u3044\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\u3053\u308c\u3089\u306e\u6271\u3044\u306b\u3064\u3044\u3066\u306f\u672c\u30b3\u30f3\u30da\u3092\u901a\u3058\u3066\u5b66\u3093\u3067\u3044\u304d\u307e\u3057\u3087\u3046\u3002\u307e\u305f\u3001\u65e5\u4ed8\u3082year\u3068month\u304c\u65e2\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u306e\u3067\u4e00\u65e6\u4f7f\u308f\u306a\u3044\u3067\u3084\u3063\u3066\u307f\u307e\u3059\u3002\ny_train = df_train.latestPrice\nX_train = df_train.drop(['latestPrice', 'description', 'homeImage', 'latest_saledate'], axis=1)\nX_test = df_test.drop(['description', 'homeImage', 'latest_saledate'], axis=1)","266b45db":"# dtype\u304cobject\uff08\u6570\u5024\u3067\u306a\u3044\u3082\u306e\uff09\u306e\u30ab\u30e9\u30e0\u540d\u3068\u30e6\u30cb\u30fc\u30af\u6570\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n# streetAddress\u304c\u30e6\u30cb\u30fc\u30af\u306b\u8fd1\u3044\u3067\u3059\u306d\u3002\ncats = []\nfor col in X_train.columns:\n    if X_train[col].dtype == 'object':\n        cats.append(col)\n        \n        print(col, X_train[col].nunique())","2b6e79fc":"# streetAddress\u3082\u3042\u3068\u3067\u8003\u3048\u308b\u3053\u3068\u306b\u3057\u3066\u4e00\u65e6\u9664\u3044\u3066\u304a\u304d\u307e\u3059\u3002\n# 2\u5ea6\u3042\u308b\u3053\u3068\u306f3\u5ea6\u3042\u308b\u65b9\u5f0f\u3067\u5b66\u7fd2\u3059\u308b\u306e\u304c\u6a5f\u68b0\u5b66\u7fd2\u3067\u3059\u306e\u3067\u3001\u5168\u90e81\u56de\u3057\u304b\u89b3\u6e2c\u3055\u308c\u306a\u3044\u73fe\u72b6\u306e\u307e\u307e\u3067\u306f\u76f4\u63a5\u306f\u610f\u5473\u3092\u306a\u3055\u306a\u3044\u304b\u3089\u3067\u3059\u3002\nX_train = X_train.drop(['streetAddress'], axis=1)\nX_test = X_test.drop(['streetAddress'], axis=1)","e237ff58":"# \u305d\u306e\u4ed6\u306b\u3082\u8272\u3005\u3084\u308c\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u3053\u3067\u306f\u3082\u3046\u4e00\u62ec\u3057\u3066\u30a8\u30a4\u30e4\u3067Count Encoding\u3057\u3066\u3057\u307e\u3044\u307e\u3059\ncats = []\n\nfor col in X_train.columns:\n    if X_train[col].dtype == 'object':\n        cats.append(col)\n        \nce = CountEncoder(cols=cats)\n\nX_train = ce.fit_transform(X_train)\nX_test = ce.transform(X_test)","79c75973":"objectives = [\n    'reg:squarederror', \n    'reg:gamma', \n    'reg:tweedie'\n]","352c727e":"# \uff15\u5206\u5272\u4ea4\u5dee\u691c\u5b9a\u3067\u4e88\u6e2c\u30b9\u30b3\u30a2\u3092\u898b\u7a4d\u3082\u3063\u3066\u307f\u307e\u3057\u3087\u3046\ndf_score = DataFrame(columns=['score', 'best_iter'])\ndf_score.index.name = 'objective'\n\nfor obj in tqdm(objectives):\n    scores = []\n\n    cv = KFold(n_splits=5, random_state=71, shuffle=True)\n\n    for i, (train_ix, val_ix) in tqdm(enumerate(cv.split(X_train, y_train))):\n        X_train_, y_train_ = X_train.iloc[train_ix], y_train.iloc[train_ix]\n        X_val, y_val = X_train.iloc[val_ix], y_train.iloc[val_ix]\n\n        model = XGBRegressor(objective=obj, n_estimators=9999, learning_rate=0.05, random_state=71)\n        model.fit(X_train_, y_train_, eval_set=[(X_val, y_val)], eval_metric='mae', early_stopping_rounds=30)\n        y_pred = model.predict(X_val)\n        score = mean_absolute_error(y_val, y_pred)\n        scores.append(score)\n        print('CV Score of Fold_%d is %f' % (i, score))\n    mean_score = np.array(scores).mean()\n    df_score.loc[obj, 'score'] = mean_score\n    df_score.loc[obj, 'best_iter'] = model.best_iteration","086ba21d":"# \u4ee5\u4e0b\u306e\u3088\u3046\u306a\u7d50\u679c\u306b\u306a\u308a\u307e\u3057\u305f\u3002\ndf_score","650b9047":"objectives = [\n    'rmse', \n    'mae',\n    'poisson', \n    'gamma', \n    'tweedie', \n    'mape'\n]","f7debf13":"# \uff15\u5206\u5272\u4ea4\u5dee\u691c\u5b9a\u3067\u4e88\u6e2c\u30b9\u30b3\u30a2\u3092\u898b\u7a4d\u3082\u3063\u3066\u307f\u307e\u3057\u3087\u3046\ndf_score2 = DataFrame(columns=['score', 'best_iter'])\ndf_score2.index.name = 'objective'\n\nfor obj in tqdm(objectives):\n    scores = []\n\n    cv = KFold(n_splits=5, random_state=71, shuffle=True)\n\n    for i, (train_ix, val_ix) in tqdm(enumerate(cv.split(X_train, y_train))):\n        X_train_, y_train_ = X_train.iloc[train_ix], y_train.iloc[train_ix]\n        X_val, y_val = X_train.iloc[val_ix], y_train.iloc[val_ix]\n\n        model = LGBMRegressor(objective=obj, n_estimators=9999, learning_rate=0.05, random_state=71)\n        model.fit(X_train_, y_train_, eval_set=[(X_val, y_val)], eval_metric='mae', early_stopping_rounds=30)\n        y_pred = model.predict(X_val)\n        score = mean_absolute_error(y_val, y_pred)\n        scores.append(score)\n        print('CV Score of Fold_%d is %f' % (i, score))\n    mean_score = np.array(scores).mean()\n    df_score2.loc[obj, 'score'] = mean_score\n    df_score2.loc[obj, 'best_iter'] = model.best_iteration_","dcd4a81d":"# \u5f53\u7136\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001MAE\u3092\u76f4\u63a5optimize\u3059\u308b\u306e\u304c\u6700\u3082\u826f\u3044\u7d50\u679c\u3068\u306a\u308a\u307e\u3057\u305f\u3002\ndf_score2","2bb8b4d3":"# \u3067\u306f\u3001\u5168\u30c7\u30fc\u30bf\u3067\u518d\u5b66\u7fd2\u3057\u3066\u307f\u307e\u3057\u3087\u3046\n# \u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u6570\u306f\u5148\u307b\u3069\u306e\u6700\u9069\u5024\u3092\u7528\u3044\u3066\u307f\u307e\u3059\nbest_iter = df_score2.loc['mae', 'best_iter']\nmodel = LGBMRegressor(objective='mae', learning_rate=0.05, n_estimators=best_iter, random_state=71)\nmodel.fit(X_train, y_train)","3c797f7b":"# \u3044\u3088\u3044\u3088\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u4e88\u6e2c\u3057\u307e\u3059\ny_pred_test = model.predict(X_test)\ny_pred_test","d1132519":"# \u63d0\u51fa\u7528\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u3093\u3067\u4e88\u6e2c\u5024\u3092\u4ee3\u5165\u3057\u307e\u3059\u3002\nsubmission = pd.read_csv('\/kaggle\/input\/data-science-autumn-2021\/sample_submission.csv', index_col=0)\nsubmission.latestPrice = y_pred_test","9bcd2326":"submission","21b9048f":"# csv\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u4fdd\u5b58\u3057\u307e\u3059\nsubmission.to_csv('submission.csv')","57d00d0c":"\u3055\u3066\u3001sklearn\u6e96\u62e0\u306eUI\u3067\u306ffit&predict\u3067\u7c21\u5358\u306b\u30e2\u30c7\u30eb\u306e\u5b66\u7fd2\u3068\u4e88\u6e2c\u304c\u3067\u304d\u3066\u3057\u307e\u3044\u307e\u3059\u304c\u3001\u305d\u306e\u969b\u306b\u306f\u5185\u90e8\u3067\u306f\u4f55\u304coptimize\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\u3053\u308c\u306b\u3064\u3044\u3066\u306f\u901a\u5e38\u3001\u5206\u985e\u30bf\u30b9\u30af\u3067\u3042\u308c\u3070logloss\u304c\u3001\u56de\u5e30\u30bf\u30b9\u30af\u3067\u3042\u308c\u3070RMSE\u304c\u6700\u5c0f\u5316\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u304c\u666e\u901a\u3067\u3057\u3087\u3046\u3002\u4e00\u65b9\u3001\u4eca\u56de\u306e\u30b3\u30f3\u30da\u30c6\u30a3\u30b7\u30e7\u30f3\u306b\u304a\u3051\u308b\u8a55\u4fa1\u6307\u6a19\u306fMAE\u3067\u3059\u304b\u3089\u3001\u672c\u6765\u6700\u5c0f\u5316\u3059\u3079\u304d\u3082\u306e\u3092\u76f4\u63a5\u6700\u5c0f\u5316\u3067\u304d\u3066\u3044\u306a\u3044\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u306d\u3002\u3068\u306a\u308b\u3068objective\u306bMAE\u3092\u76f4\u63a5\u7528\u3044\u305f\u304f\u306a\u308a\u307e\u3059\u304c\u3001[XGBoost\u306e\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](https:\/\/xgboost.readthedocs.io\/en\/latest\/parameter.html)\u3092\u898b\u3066\u307f\u308b\u3068MAE\u306fearly_stopping\u306e\u305f\u3081\u306eeval_metric\u306b\u306f\u4f7f\u3048\u3066\u3082objective\u306b\u306f\u9078\u3079\u306a\u3044\u3088\u3046\u3067\u3059\u3002\u56f0\u308a\u307e\u3057\u305f\u3002\u3068\u308a\u3042\u3048\u305a\u306f\u9078\u3079\u308b\u3082\u306e\u3092\u5168\u90e8\u8a66\u3057\u3066\u307f\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002","68a9a607":"\u3055\u3066\u3001\u306a\u305cXGBoost\u306eObjective\u306bMAE\u304c\u6307\u5b9a\u3067\u304d\u306a\u3044\u304b\u306f\u61f8\u547d\u306a\u53c2\u52a0\u8005\u69d8\u8af8\u5144\u306f\u304a\u5206\u304b\u308a\u306e\u3053\u3068\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u52fe\u914d\u30d6\u30fc\u30b9\u30c6\u30a3\u30f3\u30b0\u6728 (GBDT)\u3067\u306f\u8aa4\u5dee\u95a2\u6570\u30922\u6b21\u306e\u9805\u307e\u3067\u5c55\u958b\u3057\u3066\u52fe\u914d\/\u30d8\u30b7\u30a2\u30f3\u3092\u7528\u3044\u308b\u305f\u3081\u3067\u3059\u306d\u3002MAE\u306f\u3053\u308c\u306b\u3064\u3044\u3066\u4e0d\u9069\u306a\u306e\u3067\u3059\u3002\u3067\u306f\u305d\u3053\u3092\u306a\u3093\u3068\u304b\u306a\u3089\u306a\u3044\u304b\u3068\u3044\u3046\u8a71\u3067\u3059\u304c\u3001LightGBM\u3067\u306f[\u3053\u3093\u306a\u8a71](https:\/\/stackoverflow.com\/questions\/60137453\/how-does-lightgbm-or-other-boosted-trees-implementations-with-2nd-order-approxi)\u304c\u3042\u3063\u3066\u30d8\u30b7\u30a2\u30f3\u7121\u8996\u3057\u3066MAE\u4f7f\u3048\u305f\u308a\u3057\u307e\u3059\u3002"}}