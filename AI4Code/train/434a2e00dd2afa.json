{"cell_type":{"825554e6":"code","3fcc7701":"code","6166c66b":"code","005efe09":"code","3a2ab1ae":"code","b4653b77":"code","e1007df0":"code","f01381dc":"code","30ea6e79":"code","3e9cbb6a":"code","9aa2b72a":"code","30dd4d1f":"code","928ab081":"code","e23417a9":"code","b2ca9814":"code","96c588fc":"code","6c58be3e":"code","87783cf6":"code","c75ef342":"code","c0be790d":"code","fc9b5c41":"code","35a9bc26":"code","55f67d51":"code","ef2c1866":"code","e3ead772":"code","7c6b866c":"code","46ff6306":"code","bf000b6d":"code","db88569f":"code","cd2b5198":"code","8f8e4bc0":"code","f475152f":"code","cca23b77":"code","07207e35":"code","09925ebb":"code","63d903fa":"code","af0ea277":"code","f39d9319":"code","8cd4148e":"code","3ff0c9cb":"code","6b500536":"code","5619eaa4":"code","0a2e2e53":"code","732a07a5":"code","308e5ad4":"code","ab5c6df4":"code","ba6fe9be":"code","3e3ff870":"markdown","c85307ce":"markdown","9904f3d0":"markdown","2a49dd8e":"markdown","a14fad49":"markdown","b97b73fb":"markdown","4f288ac4":"markdown","617d3a5b":"markdown","7581e383":"markdown","e9a5e057":"markdown","f4f9021b":"markdown","f28e088c":"markdown","b4c5ed11":"markdown","2c2c3ef9":"markdown","85261c30":"markdown","663103bc":"markdown","eb07ac04":"markdown","9ecc273f":"markdown"},"source":{"825554e6":"import math\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport os\nfor dirname,_,filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname,filename))","3fcc7701":"pd.set_option('display.max_columns',50)","6166c66b":"data = pd.read_csv('\/kaggle\/input\/fraud-detection\/fraudTrain.csv')\ndata = data.append(pd.read_csv('\/kaggle\/input\/fraud-detection\/fraudTest.csv'))\ndel data['Unnamed: 0']\ndata['merchant'] = data['merchant'].str.strip('fraud_')\n\nfullname = data[['first','last']].apply(lambda x: ' '.join(x),axis=1)\ndata.insert(7,'fullname',fullname)\n\ndata_yes = data[data.is_fraud==1]\ndata_no = data[data.is_fraud==0]","005efe09":"data.info()","3a2ab1ae":"data.nunique()","b4653b77":"print('Total Transactions: {}'.format(len(data)))\nprint('   Fraudulent: {}'.format(len(data_yes)))\nprint('   Non-Fraudulent: {}'.format(len(data_no)))","e1007df0":"def table_summary(split_attrs, info_attrs):\n    \n    agg_dict = {'is_fraud': 'count'}\n    agg_dict.update(dict((k, 'nunique') for k in info_attrs))\n    agg_dict.update({'amt': ['min','mean','max','sum']})\n    \n    dfall = data.groupby(by=split_attrs).agg(agg_dict)\n    df1 = data_yes.groupby(by=split_attrs).agg(agg_dict)\n    df0 = data_no.groupby(by=split_attrs).agg(agg_dict)\n    \n    df = pd.merge(df1,df0,on=split_attrs,how='outer',suffixes=('_yes','_no'))\n    df = pd.merge(df,dfall,on=split_attrs,how='outer').fillna(0)\n    df.columns = ['_'.join(col) for col in df.columns.values]\n    \n    p_yes = df.is_fraud_yes_count\/df.is_fraud_count\n    df.insert(0,'p_yes',p_yes)   \n    df = df.sort_values(by='p_yes',ascending=False).reset_index()\n    \n    if len(split_attrs)>1:\n        label = df[split_attrs].apply(lambda x: ', '.join(x),axis=1)\n        df.insert(len(split_attrs),'-'.join(split_attrs),label)\n    \n    return df","f01381dc":"def top_summary(df, main_attrs, info_attrs, n):\n    \n    cols1 = main_attrs+['p_yes','is_fraud_yes_count','is_fraud_count']\n    cols1.extend([k for ks in info_attrs for k in [ks+'_yes_nunique',ks+'_nunique']])\n    cols2 = ['amt_yes_min','amt_yes_mean','amt_yes_max']\n    \n    top_df = df[cols1+cols2].sort_values(by='is_fraud_yes_count',ascending=False).head(n)\n    top_df[cols2] = round(top_df[cols2],2)\n    \n    return top_df","30ea6e79":"def print_summary(df, attr):\n    \n    print(' and '.join([v.capitalize() for v in attr.split('-')]))\n    \n    total = len(df.p_yes)\n    p0 = np.sum(df.p_yes==0)\n    p1 = np.sum(df.p_yes==1)\n    \n    print('Total: {}'.format(total))\n    print('   No Fraud: {}'.format(p0))\n    print('   Fraud: {}'.format(total-p0))\n    print('      Partial Fraud: {}'.format(total-p0-p1))\n    print('      Definite Fraud: {}'.format(p1))","3e9cbb6a":"def plot(df, attr, istick0, istick1):\n    \n    if istick0: hspace = 0.7\n    else: hspace = 0.25\n        \n    fig, axes = plt.subplots(nrows=2,ncols=1,\n                             gridspec_kw={'hspace':hspace})\n    fig.set_size_inches(15,10)\n    \n    title = []\n    title.append('Partial Fraud: 0 < P[Fraud] < 1')\n    title.append('Definite Fraud: P[Fruad] = 1')\n    \n    ls = []\n    ls.append(df[df.p_yes.between(0,1,inclusive=False)])\n    ls.append(df[df.p_yes==1])\n    \n    color = ['orchid','orangered']\n\n    for i in range(2):\n        if ls[i].empty:\n            fig.delaxes(axes[i])\n        else:\n            axes[i].set_title(title[i])\n            sns.scatterplot(x=attr,y='p_yes',data=ls[i],\n                            s=10,color=color[i],ax=axes[i])\n            \n    for ind,v in enumerate([istick0,istick1]):\n        axes[ind].tick_params(axis='x',rotation=90)\n        if not v:\n            axes[ind].set(xticklabels=[])\n            axes[ind].set(xticks=[]) \n\n    plt.show()","9aa2b72a":"print('Maximum Transaction Amount')\nprint('Fraudulent: {}'.format(max(data_yes.amt)))\nprint('Non-Fraudulent: {}'.format(max(data_no.amt)))","30dd4d1f":"fig, axes = plt.subplots(nrows=2,ncols=4,\n                         gridspec_kw={'hspace':0.3,'wspace': 0.3})\nfig.set_size_inches(20,10)\n\ntitle = ['Fraudulent','Non-Fraudulent']\ncolor = ['lightcoral','lightseagreen']\ntick = [0,200,1000,4000,\n        math.ceil(max(max(data_yes.amt),max(data_no.amt)))]\n\nfor i in range(4):\n    \n    ls = []\n    ls.append(data_yes[data_yes.amt.between(tick[i],tick[i+1])].amt)\n    ls.append(data_no[data_no.amt.between(tick[i],tick[i+1])].amt)\n    \n    for k in range(2):\n                    \n        if ls[k].empty:\n            fig.delaxes(axes[k,i])\n        else:                 \n            axes[k,i].set_title(title[k])\n            sns.histplot(ls[k],bins=50,color=color[k],ax=axes[k,i])","928ab081":"data[['fullname','job','category']].nunique()","e23417a9":"df_gender = table_summary(['gender'],['fullname','job','category'])\ndf_gender.to_csv('df_gender.csv')\ndf_gender","b2ca9814":"print_summary(df_gender,'gender')","96c588fc":"fig = sns.barplot(x='gender',y='p_yes',data=df_gender,palette='pastel')\nplt.show(fig)","6c58be3e":"top_summary(df_gender,['gender'],['job'],2)","87783cf6":"data[['fullname','category','merchant','city']].nunique()","c75ef342":"df_job = table_summary(['job'],['fullname','category','merchant','city'])\ndf_job.to_csv('df_job.csv')\ndf_job","c0be790d":"print_summary(df_job,'job')","fc9b5c41":"plot(df_job,'job',istick0=False,istick1=True)","35a9bc26":"top_summary(df_job,['job'],['fullname','merchant'],5)","55f67d51":"data[['city','merchant','category']].nunique()","ef2c1866":"df_fullname = table_summary(['fullname'],['city','merchant','category'])\ndf_fullname.to_csv('df_fullname.csv')\ndf_fullname","e3ead772":"print_summary(df_fullname,'fullname')","7c6b866c":"plot(df_fullname,'fullname',istick0=False,istick1=True)","46ff6306":"top_summary(df_fullname,['fullname'],['merchant','category'],5)","bf000b6d":"data[['fullname','job','merchant','category']].nunique()","db88569f":"df_city_state = table_summary(['city','state'],['fullname','job','merchant','category'])\ndf_city_state.to_csv('df_city_state.csv')\ndf_city_state","cd2b5198":"print_summary(df_city_state,'city-state')","8f8e4bc0":"plot(df_city_state,'city-state',istick0=False,istick1=True)","f475152f":"top_summary(df_city_state,['city','state'],['merchant','category'],5)","cca23b77":"data[['city','category','gender','fullname']].nunique()","07207e35":"df_merchant = table_summary(['merchant'],['city','category','gender','fullname'])\ndf_merchant.to_csv('df_merchant.csv')\ndf_merchant","09925ebb":"print_summary(df_merchant,'merchant')","63d903fa":"plot(df_merchant,'merchant',istick0=False,istick1=True)","af0ea277":"top_summary(df_merchant,['merchant'],['city','fullname'],5)","f39d9319":"data[['category','gender','fullname']].nunique()","8cd4148e":"df_merchant_city = table_summary(['merchant','city'],['category','gender','fullname'])\ndf_merchant_city.to_csv('df_merchant_city.csv')\ndf_merchant_city","3ff0c9cb":"print_summary(df_merchant_city,'merchant-city')","6b500536":"plot(df_merchant_city,'merchant-city',istick0=False,istick1=False)","5619eaa4":"top_summary(df_merchant_city,['merchant','city'],['fullname'],5)","0a2e2e53":"data[['merchant','gender','job']].nunique()","732a07a5":"df_category = table_summary(['category'],['merchant','gender','job'])\ndf_category.to_csv('df_category.csv')\ndf_category","308e5ad4":"print_summary(df_category,'category')","ab5c6df4":"plot(df_category,'category',istick0=True,istick1=True)","ba6fe9be":"top_summary(df_category,['category'],['merchant','job'],13)","3e3ff870":"### Merchant","c85307ce":"### Gender","9904f3d0":"### Graphs of Partial and Definite Frauds","2a49dd8e":"### Category","a14fad49":"## User-Defined Functions","b97b73fb":"### Job","4f288ac4":"## Splitting Attributes","617d3a5b":"## Histogram of Transaction Amount","7581e383":"# Libraries","e9a5e057":"# Exploratory Data Analysis (EDA)","f4f9021b":"### Merchant and City","f28e088c":"### City and State","b4c5ed11":"## Attributes (or Features)","2c2c3ef9":"# Training Data","85261c30":"### Information on Partial and Definite Frauds","663103bc":"### Database of Top Fradulent Records","eb07ac04":"### Fullname","9ecc273f":"### Sorted Database in Order of Probability"}}