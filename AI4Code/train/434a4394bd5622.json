{"cell_type":{"461911be":"code","995ff138":"code","f7309d52":"code","3da1c3df":"code","dc08d835":"code","3fcf2e98":"code","0ffa6bd2":"code","0d238f71":"code","7e431569":"code","1dad83ee":"code","f5d0f0da":"code","fce3f341":"code","3cd24c05":"code","a843089c":"code","5e5973ec":"code","17c1e2f6":"code","d42ce09f":"code","d7522224":"code","cc6f9981":"code","9dd14ffa":"code","045e2272":"code","8d216545":"code","64a8e0a6":"code","84897154":"code","f806f35d":"code","3931dcc7":"code","c29d470f":"code","b7ab5d6f":"code","514a5e82":"code","ef184de4":"code","32284647":"code","3e82d20d":"code","49c9e0ec":"code","9c615b7d":"code","a11aba77":"code","e813d278":"code","4d08b4cd":"code","23c19048":"code","d7722b90":"code","c850db0d":"code","2c27af04":"code","ed2abdfe":"code","8d7109f8":"code","4efb2c48":"code","8392d038":"code","c0de2e1b":"code","0ceb2c7e":"code","0928ff99":"markdown","486b9fca":"markdown","4e6f2238":"markdown","4a9b6c6e":"markdown","639f0b66":"markdown","749cbd1d":"markdown","bb368468":"markdown","5410f743":"markdown","b5f23d7a":"markdown","3ac26cd8":"markdown","c8cb4339":"markdown","e6266e18":"markdown","105b9124":"markdown","03a92cb5":"markdown","c9b56bc5":"markdown","8f9c80bd":"markdown","244d5fa5":"markdown","c0bf189d":"markdown"},"source":{"461911be":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","995ff138":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","f7309d52":"import matplotlib.pyplot as plt\nimport seaborn as sns","3da1c3df":"train_df.head()","dc08d835":"train_df.columns","3fcf2e98":"train_df.info()","0ffa6bd2":"train_df.describe().T","0d238f71":"def category(variable):\n    print(train_df[variable].value_counts())\n    \n    sns.countplot(train_df[variable])\n    plt.show()","7e431569":"category_list = [\"Survived\", \"Pclass\", \"Sex\", \"SibSp\", \"Parch\", \"Embarked\", \"Cabin\"]","1dad83ee":"for i in category_list:\n    category(i)","f5d0f0da":"def numeric(variable):\n    \n    plt.hist(train_df[variable], bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} variable distribution\".format(variable))\n    plt.show()","fce3f341":"numeric_list = [\"Age\", \"Fare\"]","3cd24c05":"for i in numeric_list:\n    numeric(i)","a843089c":"train_df.groupby(\"Sex\")[\"Survived\"].mean()","5e5973ec":"train_df.groupby(\"Pclass\")[\"Survived\"].mean()","17c1e2f6":"train_df[(train_df[\"Sex\"] == \"female\") & (train_df[\"Pclass\"] == 1)][\"Survived\"].mean()","d42ce09f":"train_df[(train_df[\"Sex\"] == \"male\") & (train_df[\"Pclass\"] == 1)][\"Survived\"].mean()","d7522224":"sns.jointplot(\"Age\", \"Survived\", data = train_df, kind = \"reg\")","cc6f9981":"sns.jointplot(\"Fare\", \"Survived\", data = train_df, kind = \"reg\")","9dd14ffa":"sns.boxplot(x = \"Pclass\", y = \"Fare\", data = train_df, hue = \"Survived\")","045e2272":"sns.pairplot(train_df)","8d216545":"df_corr = train_df.corr()\nsns.heatmap(df_corr,annot = True)","64a8e0a6":"def outlier(variable):\n    \n    sns.boxplot(train_df[variable])\n    plt.show()","84897154":"list_outlier = [\"Pclass\", \"Age\", \"SibSp\", \"Parch\", \"Fare\"]","f806f35d":"for i in list_outlier:\n    outlier(i)","3931dcc7":"Q1 = train_df[\"Age\"].quantile(0.25)\nQ3 = train_df[\"Age\"].quantile(0.75)\n\nIQR = Q3 - Q1\n    \nlower_bound = Q1 - IQR*1.5\nupper_bound = Q3 + IQR*1.5\n    \ntotal_filter = ((train_df[\"Age\"] < lower_bound) | (train_df[\"Age\"]>upper_bound))\noutliers = train_df[\"Age\"][total_filter]","c29d470f":"list(outliers.index)","b7ab5d6f":"train_df.loc[outliers.index]","514a5e82":"clean_train_df = train_df[~((train_df[\"Age\"] < lower_bound) | (train_df[\"Age\"]>upper_bound))] ","ef184de4":"clean_train_df.shape","32284647":"Q1 = train_df[\"SibSp\"].quantile(0.25)\nQ3 = train_df[\"SibSp\"].quantile(0.75)\n\nIQR = Q3 - Q1\n    \nlower_bound = Q1 - IQR*1.5\nupper_bound = Q3 + IQR*1.5\n    \ntotal_filter = ((train_df[\"SibSp\"] < lower_bound) | (train_df[\"SibSp\"]>upper_bound))\noutliers = train_df[\"SibSp\"][total_filter]","3e82d20d":"list(outliers.index)","49c9e0ec":"clean_train_df = train_df[~((train_df[\"SibSp\"] < lower_bound) | (train_df[\"SibSp\"]>upper_bound))] ","9c615b7d":"clean_train_df.shape","a11aba77":"Q1 = train_df[\"Fare\"].quantile(0.25)\nQ3 = train_df[\"Fare\"].quantile(0.75)\n\nIQR = Q3 - Q1\n    \nlower_bound = Q1 - IQR*1.5\nupper_bound = Q3 + IQR*1.5\n    \ntotal_filter = ((train_df[\"Fare\"] < lower_bound) | (train_df[\"Fare\"]>upper_bound))\noutliers = train_df[\"Fare\"][total_filter]","e813d278":"list(outliers.index)","4d08b4cd":"clean_train_df = train_df[~((train_df[\"Fare\"] < lower_bound) | (train_df[\"Fare\"]>upper_bound))] ","23c19048":"clean_train_df.shape","d7722b90":"train_df = clean_train_df","c850db0d":"total_df = pd.concat([train_df, test_df], axis = 0).reset_index(drop = True)","2c27af04":"total_df.isnull().any()","ed2abdfe":"total_df.isnull().sum()","8d7109f8":"total_df.groupby([\"Pclass\", \"Sex\", \"Embarked\"])[\"Fare\"].mean()","4efb2c48":"total_df[total_df[\"Fare\"].isnull()]","8392d038":"total_df[\"Fare\"].fillna(12.521002, inplace =True)","c0de2e1b":"list_fill = list(total_df[total_df[\"Age\"].isnull()].index)","0ceb2c7e":"for i in list_fill:\n    \n    filling_age = total_df[(total_df[\"SibSp\"] == total_df[\"SibSp\"].iloc[i]) & \n               (total_df[\"Parch\"] == total_df[\"Parch\"].iloc[i])&\n               (total_df[\"Pclass\"] == total_df[\"Pclass\"].iloc[i])][\"Age\"].median()\n    \n    age_med = total_df[\"Age\"].median()\n    \n    if not np.isnan(filling_age):\n        \n        total_df[\"Age\"].iloc[i] = filling_age\n        \n    else:\n        \n        total_df[\"Age\"].iloc[i] = age_med","0928ff99":"Age, Sibsp, and Fare variables have outlier values.","486b9fca":"Categorical variable analysis","4e6f2238":"96 percent of women with 1st class tickets survived.","4a9b6c6e":"Let's look at the correlation analysis","639f0b66":"Numbers here represent the correlation coefficient.If the coefficient is close to 1, there is a strong positive relationship, and if it is close to -1, there is a strong negative relationship.","749cbd1d":"Let's examine our continuous variables now.","bb368468":"Relationship between independent variables and dependent variables","5410f743":"Missing values","b5f23d7a":"We deleted 11 observations. Now let's do the same operations to other variables","3ac26cd8":"Let's delete the outlier values","c8cb4339":"Here I wrote a function to visualize data and created a list, then I scrolled through the list I created in the for loop and visualized the variables with the loop.","e6266e18":"36 percent of male passengers with 1st class tickets survived, This is rate lower than women.","105b9124":"The higher the fare, the higher the survival.","03a92cb5":"There are 7 numeric variables and 5 categorical variables. Dependent variable survived.","c9b56bc5":"Outlier detection.\nI will use the boxplot graph to determine the outlier.","8f9c80bd":"When we look at the correlation analysis here, we took the ones with the strongest relationship with age variable to filter","244d5fa5":"74 percent of women survived. We can think of an idea that women were given priority in the rescue efforts.","c0bf189d":"We converted it to list format"}}