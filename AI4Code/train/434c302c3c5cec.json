{"cell_type":{"55e7906a":"code","e06ef8b1":"code","c875d4f7":"code","725e373a":"code","caf69694":"markdown","8cd33a20":"markdown","84dd49a8":"markdown","74f92adc":"markdown","656af5e3":"markdown"},"source":{"55e7906a":"# Import statements to get started\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\n\n\n# Get the full filepath for each file available to this notebook\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        fullpath = os.path.join(dirname, filename)\n        print(fullpath)","e06ef8b1":"alldata = []\n\n# YOUR CODE HERE","c875d4f7":"# YOUR CODE HERE","725e373a":"# YOUR CODE HERE","caf69694":"That's it \u2013 great job!","8cd33a20":"We're finally ready to make your plots! Loop through your data one last time and generate a plot of HFC concentration over time. The names aren't consistent between datasets, but luckily, the positions are. You'll need to refer to the data by column number instead of column name. You can do this using an arument like `x=DATAFRAME.iloc[:,COLUMN_NUMBER]`, where DATAFRAME is the dataset, and COLUMN_NUMBER is the index of the column you want. Remember that Python counts the first column as 0 not 1.\n\nWhile your final code should make all 7 plots, you should probably make just one at first to make sure it's working. Your code shouldn't take more than a minute to run, so something has probably gone wrong if it takes longer.\n\nNote: remember that you need to make a new plot each time through your loop using `plt.figure()` if you like, you can put in a `figsize` as an argument.","84dd49a8":"# Hydrofluorocarbons in the atmostphere\n\nIn this file are 7 data files pulled in from the [NOAA HATS program](https:\/\/www.esrl.noaa.gov\/gmd\/hats\/). In this exercise, we will script a process for graphing all of them in a single pass.\n\nBelow is some code to get things started. It imports the relevant packages, then lists all of the filenames. Adjust the code so that it saves the file paths into an array named `allfiles`.","74f92adc":"Nearly there! The data is annoyingly out of order, so we need to sort it. Loop through your `alldata` array and sort by decimal date using `DATAFRAME.sort_values('COLUMN_NAME')`, replacing the all-caps words with the appropriate . Doubly annoyingly there are two heading titles: decdate and dec_date, so you'll need to use an `if` statement. You can check if a column is in your dataframe using `if COLUMN_NAME in DATAFRAME:`\n\nOnce you've written your code, check that it worked by again using a line like `allfiles[0]`","656af5e3":"Your `allfiles` list should contain the filepath of .txt and .tsv files. In the space below loop through this list import all of the files into a new list called `alldata`. Because they have different file types, you'll need to check the suffix and use the right command for each. Import the txt files using `pd.read_fwf(FILENAME)`, and import the tsv files using `pd.read_csv(FILENAME, sep='\\t')`.\n\nCheck that it worked to import all of your data desired. Use `len(allfiles)` to check how many files were imported. Use a line like `allfiles[0]` to check that each list object ended up as a Pandas dataframe. "}}