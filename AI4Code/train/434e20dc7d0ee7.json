{"cell_type":{"758748af":"code","0f87d835":"code","722fa467":"code","7e4b62e7":"code","08dbb6db":"code","ec97a066":"code","017172d9":"code","d847cfab":"code","03796d8d":"code","4e0989da":"code","eb56d6f9":"code","feb847e8":"code","a7d247dd":"code","357fd859":"code","2ec0d9fc":"code","0fa4de6e":"code","ae4e4dcb":"code","6235d110":"code","6b767cdb":"code","6547379d":"code","9ed178f4":"code","ddb6714c":"code","b70a6ad1":"code","3293219a":"code","7ccde394":"code","aa509f40":"code","05022a92":"code","0f70f759":"code","e24f9067":"code","296e9410":"code","51296542":"code","4c83bb86":"code","920191b3":"code","3f896651":"code","1ae14af5":"code","c1862284":"code","7b0129e9":"code","e2c31668":"code","414d35bb":"code","86d05eaf":"code","3ebe03ec":"code","e8e82e7b":"code","aea4b7e0":"code","27c00fa3":"code","b2ee7758":"code","7d5ae87f":"code","c800807c":"code","8e528070":"code","523b0bd7":"code","6b20c647":"code","af00d9a2":"code","25ed276b":"code","9eddb2a0":"code","a4a561c1":"code","77eb0f14":"code","f38ea4f2":"code","3b5a387b":"code","b7ce3571":"markdown","5bdfc289":"markdown","b88e611a":"markdown","a5f2a498":"markdown","7a7be344":"markdown","06ecc00d":"markdown"},"source":{"758748af":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0f87d835":"#importing Libraries\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","722fa467":"#Importing Datasets\ntrain = pd.read_csv(\"..\/input\/hranalysis\/train.csv\")\ntest = pd.read_csv(\"..\/input\/hranalysis\/test.csv\")","7e4b62e7":"train.head()","08dbb6db":"test.head()","ec97a066":"train.shape","017172d9":"train.isnull().any()","d847cfab":"import missingno as msno\nmsno.matrix(train)","03796d8d":"train.info()","4e0989da":"train.describe().T","eb56d6f9":"import pandas_profiling\ntrain.profile_report()","feb847e8":"dict(train.dtypes)","a7d247dd":"#Heatmap\nplt.figure(figsize=(10,10))\nsns.heatmap(train.corr(),annot=True,cmap='Greys')","357fd859":"#Pairplot\nplt.figure(figsize=(20,20))\nplt.style.use(\"fivethirtyeight\")\nsns.pairplot(train,palette='rainbow')\nplt.show()","2ec0d9fc":"#Lets explore Categorical Variables\n#Department\nplt.figure(figsize=(6,6))\ntrain.department.value_counts().plot(kind='pie',subplots=True)\nplt.ylabel(\"\")\nplt.title(\"Department\")","0fa4de6e":"#Region\nplt.figure(figsize=(10,5))\ntrain.region.value_counts().plot(kind='bar',color='g')\nplt.xlabel('Region')\nplt.ylabel('count')\nplt.show()","ae4e4dcb":"#Education\nplt.figure(figsize=(10,5))\nsns.countplot('education',data=train)\nplt.xlabel(\"Education\")\nplt.ylabel(\"Count\")\nplt.title(\"Different Education\")\nplt.legend()\nplt.show()","6235d110":"#Donut chart on gender\ntrain.gender.value_counts()\nlabels = ['Male','Female']\ncolors = ['b','r']\nsizes = [55092,23206]\nplt.figure(figsize=(6,6))\nplt.pie(sizes, labels=labels, colors=colors, autopct = '%.2f%%',shadow=True)\n#Now make circle at the centre to make it donut\ncircle = plt.Circle((0,0),0.75,facecolor='white',edgecolor='black')\nfig=plt.gcf()  #gcf represent \"get current figure\"\nfig.gca().add_artist(circle)\nplt.legend()\nplt.show()","6b767cdb":"#recruitment channel\nplt.figure(figsize=(6,6))\ntrain.recruitment_channel.value_counts().plot(kind='pie')\nplt.ylabel(\"\")\nplt.title(\"Recritment Channel\")\nplt.legend()\nplt.show()","6547379d":"#Now Exploring Numerical Variables\n#Age\nplt.figure(figsize=(10,5))\nsns.distplot(train.age,color='purple')\nplt.xlabel(\"Age\")\nplt.title(\"Age of Employees\")\nplt.show()","9ed178f4":"#Previous year rating\nplt.figure(figsize=(10,5))\ntrain.previous_year_rating.value_counts().plot(kind='bar',color=['green','purple','red','orange','black'])\nplt.xlabel(\"Ratings\")\nplt.ylabel(\"Count\")\nplt.title(\"Previous Year Rating of Employees\")\nplt.legend()\nplt.show()","ddb6714c":"#Length of Service\nplt.figure(figsize=(10,5))\nsns.distplot(train['length_of_service'],color='orange')\nplt.xlabel(\"Length of Service\")\nplt.title(\"Length of Service of Employee\")\nplt.legend()\nplt.show()","b70a6ad1":"# KPIs_met >80%\nplt.figure(figsize=(6,6))\ntrain['KPIs_met >80%'].value_counts().plot(kind='pie',subplots=True,explode=(0,0.05),labels = ['KPIs_met <80%','KPIs_met >80%'])\nplt.ylabel(\"\")\nplt.title(\"KPIs_met >80%\")\nplt.legend()\nplt.show()","3293219a":"#Award Won\nplt.figure(figsize=(7,5))\ntrain['awards_won?'].value_counts().plot(kind='bar',color=['red','blue'])\nplt.xlabel('Award won')\nplt.ylabel('Count')\nplt.title(\"Employee who won Awards\")\nplt.show()","7ccde394":"#Average Training Score\nplt.figure(figsize=(10,5))\nsns.distplot(train.avg_training_score,color='green')\nplt.xlabel(\"Average Training Score\")\nplt.title(\"Average Training Score of Employees\")\nplt.legend()\nplt.show()","aa509f40":"#Number of Trainings\nplt.figure(figsize=(10,5))\nsns.countplot('no_of_trainings',data=train)\nplt.xlabel(\"Number of Trainings\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Trainings taken by Employees\")\nplt.show()","05022a92":"plt.figure(figsize=(10,5))\nsns.countplot(x = 'education', hue='gender',data=train,palette='twilight')\nplt.xlabel(\"Education\")\nplt.ylabel(\"Count\")\nplt.show()","0f70f759":"plt.figure(figsize=(10,5))\nsns.countplot(x = 'recruitment_channel', hue='gender',data=train,palette='Greys')\nplt.xlabel(\"Recruitment_channel\")\nplt.ylabel(\"Count\")\nplt.show()","e24f9067":"#Avg training score and Is promoted\n\nct = pd.crosstab(train['avg_training_score'], train['is_promoted'])\nct.plot.bar(stacked=True,figsize=(15,5),color=['purple','green'])\nplt.legend()\nplt.xlabel('Average Training Score')","296e9410":"#Awards won and is promoted\n\nct = pd.crosstab(train['awards_won?'],train['is_promoted'])\nct.div(ct.sum(1).astype('float'),axis=0).plot(kind='bar',stacked=True,color=['pink','red'])\nplt.legend()\nplt.xlabel('Awards Won')\nplt.title(\"Awards Won vs Is Promoted\")","51296542":"#Region vs Is Promoted\nct = pd.crosstab(train['region'], train['is_promoted'])\nct.div(ct.sum(1).astype('float'),axis=0).plot.bar(stacked=True,figsize=(15,5),color=['blue','cyan'])\nplt.legend()\nplt.xlabel('region')","4c83bb86":"#length of service vs is promoted\nct = pd.crosstab(train['length_of_service'], train['is_promoted'])\nct.plot.bar(stacked=True,figsize=(15,5),color=['purple','green'])\nplt.legend()\nplt.xlabel('Length of Service')","920191b3":"#Previous year rating vs promotion\nct = pd.crosstab(train['previous_year_rating'], train['is_promoted'])\nct.plot.bar(stacked=True,figsize=(15,5),color=['purple','green'])\nplt.legend()\nplt.xlabel('Previous Year Rating')","3f896651":"train.head()","1ae14af5":"dict(train.dtypes)","c1862284":"#Divide Numerical and categorical variables\nnumeric_var_names = [key for key in dict(train.dtypes) if dict(train.dtypes)[key] in ['float32','float64','int32','int64']]\ncat_var_names = [key for key in dict(train.dtypes) if dict(train.dtypes)[key] in ['object','O']]","7b0129e9":"hr_num = train[numeric_var_names]\nhr_cat = train[cat_var_names]","e2c31668":"#create Data Audit Report\ndef var_summary(x):\n    return pd.Series([x.count(),x.isnull().sum(),x.sum(),x.var(),x.std(),x.mean(),x.median(),x.min(),x.dropna().quantile(0.01),x.dropna().quantile(0.05),\n              x.dropna().quantile(0.10),x.dropna().quantile(0.25),x.dropna().quantile(0.50),x.dropna().quantile(0.75),x.dropna().quantile(0.90),\n              x.dropna().quantile(0.95),x.dropna().quantile(0.99)],index=['N','NMISS','SUM','VAR','STD','MEAN','MEDIAN','MIN','P1','P5','P10','P25','P50','P75','P90','P95','P99'])\nnum_summary = hr_num.apply(lambda x : var_summary(x)).T\nnum_summary\n\n#As we can see that there are no outliers.","414d35bb":"#Missing Value Treatment\nhr_num['previous_year_rating'].fillna(3,inplace=True)\nhr_num['previous_year_rating'].isnull().sum()\ntest['previous_year_rating'].fillna(3,inplace=True)\ntest['previous_year_rating'].isnull().sum()","86d05eaf":"def cat_summary(x):\n    return pd.Series([x.count(),x.isnull().sum(),x.value_counts()],index=['N','NMISS','COUNT'])\n\ncat_summary = hr_cat.apply(lambda x : cat_summary(x)).T\ncat_summary","3ebe03ec":"#Missing value Treatment of categorical variables\n\nhr_cat.education.fillna(hr_cat.education.mode()[0],inplace=True)\nhr_cat.education.isnull().sum()\ntest.education.fillna(test.education.mode()[0],inplace=True)\ntest.education.isnull().sum()","e8e82e7b":"#Converting Categorical variables into Numeric by label encoding\nfrom sklearn.preprocessing import LabelEncoder\nhr_cat['department'] = LabelEncoder().fit_transform(hr_cat['department'])\nhr_cat['region'] = LabelEncoder().fit_transform(hr_cat['region'])\nhr_cat['education'] = LabelEncoder().fit_transform(hr_cat['education'])\nhr_cat['gender'] = LabelEncoder().fit_transform(hr_cat['gender'])\nhr_cat['recruitment_channel'] = LabelEncoder().fit_transform(hr_cat['recruitment_channel'])","aea4b7e0":"hr = pd.DataFrame(pd.concat([hr_num,hr_cat],axis=1))\nhr.head()","27c00fa3":"#Dropping employee id column\nhr.drop(['employee_id'],axis=1,inplace=True)","b2ee7758":"test.drop(['employee_id'],axis=1,inplace=True)\ntest.head()","7d5ae87f":"#Converting Categorical variables into Numeric by label encoding\nfrom sklearn.preprocessing import LabelEncoder\ntest['department'] = LabelEncoder().fit_transform(test['department'])\ntest['region'] = LabelEncoder().fit_transform(test['region'])\ntest['education'] = LabelEncoder().fit_transform(test['education'])\ntest['gender'] = LabelEncoder().fit_transform(test['gender'])\ntest['recruitment_channel'] = LabelEncoder().fit_transform(test['recruitment_channel'])","c800807c":"test.columns","8e528070":"#Predictive Modelling\nfeature_columns = hr.columns.difference(['is_promoted'])\nfeature_columns","523b0bd7":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\n\ntrain_x, val_x, train_y, val_y = train_test_split(hr[feature_columns], hr['is_promoted'], test_size=0.2)\nprint(train_x.shape)\nprint(train_y.shape)\nprint(val_x.shape)\nprint(val_y.shape)","6b20c647":"logreg = LogisticRegression()\nlogreg.fit(train_x,train_y)","af00d9a2":"logreg.coef_","25ed276b":"list(zip(feature_columns, logreg.coef_[0]))","9eddb2a0":"pred_y = logreg.predict(test)","a4a561c1":"pred_y","77eb0f14":"#Random Forest Classifier\nfrom sklearn.ensemble import RandomForestClassifier\n\nrf = RandomForestClassifier()\nrf.fit(train_x,train_y)\n\nrf_pred = rf.predict(test)\nprint(\"Accuracy \" +str(rf.score(train_x,train_y)))","f38ea4f2":"#CatBoost Classifier\nfrom catboost import CatBoostClassifier\n\ncb = CatBoostClassifier()\ncb.fit(train_x,train_y)\n\ncb_pred = cb.predict(test)\n\nprint(\"Accuracy \" +str(cb.score(train_x,train_y)))","3b5a387b":"from lightgbm import LGBMClassifier\nlgb = LGBMClassifier()\nlgb.fit(train_x, train_y)\n\nlgb_pred = lgb.predict(test)\n\nprint(\"Accuracy \"+str(lgb.score(train_x, train_y)))","b7ce3571":"### Exploratory Analysis","5bdfc289":"# Do Upvote if you like this kernel. Thank You :)","b88e611a":"#### Pandas Profiling gives the overview of all the features we have used in the model. It gives how many missing values , unique valuesn there distinct count, memory size, Interactions,correlation between variables,mean , skewness, count, heatmap, visualization.","a5f2a498":"#### Univariate","7a7be344":"#### Bivariate","06ecc00d":"#### Lets check data in each file"}}