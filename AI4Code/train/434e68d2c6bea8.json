{"cell_type":{"14817785":"code","4c8fc244":"code","76a6bacf":"code","d2e736df":"code","eba042df":"code","8a6e9b1d":"code","bc43f54c":"code","025feeb4":"code","13d4d35a":"code","3f70c66e":"code","30eedd3c":"code","fd24f8e6":"code","4a00ce5d":"code","409ccd07":"code","0238b6a9":"code","92aec355":"code","01d18f48":"code","3bf62b89":"code","c572bd97":"code","7aa83e38":"code","a76dd79f":"code","9d72f1c7":"code","e2e1ff2b":"code","21e9de87":"code","da638820":"code","7b06ec2c":"code","ddb09d9c":"code","a1cc28c1":"code","9151d2f0":"code","e3d40186":"code","375b5798":"code","385ab938":"code","3cfd81d4":"code","b114b55e":"code","02f57e60":"code","209fd562":"code","57cb4fda":"code","45f4aa72":"code","ac1b3885":"code","3733c4d9":"code","9207461a":"markdown","73ada240":"markdown","a0bd4d35":"markdown"},"source":{"14817785":"# for manipulations\nimport numpy as np\nimport pandas as pd\n\n# for data visualizations\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# for interactivity\nfrom ipywidgets import interact\n\n%matplotlib widget","4c8fc244":"df = pd.read_csv('..\/input\/precision-framing\/data.csv')","76a6bacf":"# Lets check the shape\ndf.shape","d2e736df":"df.head()","eba042df":"# Check for missing value\ndf.isnull().sum()","8a6e9b1d":"# check the Crops available in this dataset.\n# Will get the Unique column values.. with their count or occurance in the data observations.\ndf.label.value_counts()","bc43f54c":"# Summary for all Crops.\nprint(\"   Average Ratio of Nitrogen in the Soil : {0:.2f}\".format(df.N.mean()))\nprint(\"Average Ratio of Phosphorous in the Soil : {0:.2f}\".format(df.P.mean()))\nprint(\"  Average Ratio of Potassium in the Soil : {0:.2f}\".format(df.K.mean()))\nprint(\"          Average Temperature in Celsius : {0:.2f}\".format(df.temperature.mean()))\nprint(\"               Average Relative Humidity : {0:.2f}\".format(df['humidity'].mean()))\nprint(\"            Average PH Value of the Soil : {0:.2f}\".format(df['ph'].mean()))\nprint(\"                  Average Rainfall in mm : {0:.2f}\".format(df['rainfall'].mean()))","025feeb4":"# Summary Statistics for each of the Crops \n\n@interact\ndef summary(crops = list(df['label'].value_counts().index)):\n    x = df[df['label'] == crops]\n    \n    print(\"-\"*30)\n    print(\"STatistics for Nitrogen\")\n    print(\"Minimum Nitrogen required : \", x['N'].min())\n    print(\"Average Nitrogen required : \", x['N'].mean())\n    print(\"Maxiumm Nitrogen required : \", x['N'].max())\n    \n    print(\"-\"*30)\n    print(\"STatistics for Phosphorous\")\n    print(\"Minimum Phosphorous required : \", x['P'].min())\n    print(\"Average Phosphorous required : \", x['P'].mean())\n    print(\"Maxiumm Phosphorous required : \", x['P'].max())\n    \n    print(\"-\"*30)\n    print(\"STatistics for Potassium\")\n    print(\"Minimum Potassium required : \", x['K'].min())\n    print(\"Average Potassium required : \", x['K'].mean())\n    print(\"Maxiumm Potassium required : \", x['K'].max())\n    \n    print(\"-\"*30)\n    print('Similar for other features')","13d4d35a":"def summary(crops):\n    x = df[df['label'] == crops]\n    \n    print(\"-\"*30)\n    print(\"STatistics for Nitrogen\")\n    print(\"Minimum Nitrogen required : \", x['N'].min())\n    print(\"Average Nitrogen required : \", x['N'].mean())\n    print(\"Maxiumm Nitrogen required : \", x['N'].max())\n    \n    print(\"-\"*30)\n    print(\"STatistics for Phosphorous\")\n    print(\"Minimum Phosphorous required : \", x['P'].min())\n    print(\"Average Phosphorous required : \", x['P'].mean())\n    print(\"Maxiumm Phosphorous required : \", x['P'].max())\n    \n    print(\"-\"*30)\n    print(\"STatistics for Potassium\")\n    print(\"Minimum Potassium required : \", x['K'].min())\n    print(\"Average Potassium required : \", x['K'].mean())\n    print(\"Maxiumm Potassium required : \", x['K'].max())\n    \n    print(\"-\"*30)\n    print('Similar for other features')\n    \ninteract(summary, crops = list(df['label'].value_counts().index) ); ","3f70c66e":"# Compare the Average Requirement fr each crops with average condition\n\nall_features = list(df.columns.values)\n# all_features = list(df.columns.values.tolist())\n# type(all_features)\n\n@interact\ndef compare(conditions = all_features):\n    print(\"Average Value for \", conditions, \"is {0:.2f}\".format(df[conditions].mean()))\n    print('-'*40)\n    print(\"Rice  : {0:.2f}\".format(df[(df['label'] == 'rice')][conditions].mean()))\n    print(\"Mango : {0:.2f}\".format(df[(df['label'] == 'mango')][conditions].mean()))\n    print('SImilar for other Crops....')","30eedd3c":"# Lets make this function more Intuitive\n\n@interact\ndef compare(conditions = ['N', 'P', 'K', 'temperature','ph', 'rainfall']):\n    print(\"Crops which require greater than average\", conditions, '\\n')\n    print(df[df[conditions] > df[conditions].mean()]['label'].unique())\n    print('*'*40)\n    print(\"Crops which require less than avergae\", conditions, '\\n')\n    print(df[df[conditions] <= df[conditions].mean()]['label'].unique())","fd24f8e6":"plt.subplot(2,4,1)\nsns.distplot(df['N'], color = 'darkblue')\nplt.xlabel(\"Ratio of Nitrogen\", fontsize = 12)\nplt.grid()\n\nplt.subplot(2,4,2)\nsns.distplot(df['P'], color = 'darkblue')\nplt.xlabel(\"Ratio of Phosphorous\", fontsize = 12)\nplt.grid()\n\n\nplt.subplot(2,4,3)\nsns.distplot(df['K'], color = 'darkblue')\nplt.xlabel(\"Ratio of Potassium\", fontsize = 12)\nplt.grid()\n\nplt.subplot(2,4,4)\nsns.distplot(df['temperature'], color = 'black')\nplt.xlabel(\"Temperature\", fontsize = 12)\nplt.grid()\n\nplt.subplot(2,4,5)\nsns.distplot(df['rainfall'], color = 'grey')\nplt.xlabel(\"Rainfall\", fontsize = 12)\nplt.grid()\n\nplt.subplot(2,4,6)\nsns.distplot(df['humidity'], color = 'lightgreen')\nplt.xlabel(\"Humidity\", fontsize = 12)\nplt.grid()\n\nplt.subplot(2,4,7)\nsns.distplot(df['ph'], color = 'darkgreen')\nplt.xlabel(\"pH Level\", fontsize = 12)\nplt.grid()\n\nplt.suptitle(\"Distribution for Agriculture Conditions\", fontsize = 20)\nplt.show()\n","4a00ce5d":"## Lets find out some interesting facts\n\nprint(\"   Crops which requires very high ratio of Nitrogen content in Soil : \", df[df['N'] > 120]['label'].unique())\nprint(\"Crops which requires very high ratio of Phosphorous content in Soil : \", df[df['P'] > 100]['label'].unique())\nprint(\"  Crops which requires very high ratio of Potassium content in Soil : \", df[df['K'] > 200]['label'].unique())\nprint(\"                            Crops which requires very high Rainfall : \", df[df['rainfall'] > 200]['label'].unique())\nprint(\"                          Crops which requires very low temperature : \", df[df['temperature'] < 10]['label'].unique())\nprint(\"                         Crops which requires very high temperature : \", df[df['temperature'] > 40]['label'].unique())\nprint(\"                             Crops which requires very low humidity : \", df[df['humidity'] < 20]['label'].unique())\nprint(\"                                   Crops which requires very low ph : \", df[df['ph'] < 4]['label'].unique())\nprint(\"                                  Crops which requires very high ph : \", df[df['ph'] > 9]['label'].unique())","409ccd07":"# Lets understand which crops can only be grown in SUmmer season; winter season; rainy season\n\nprint(\"Summer Crops -->\")\nprint(df[(df['temperature'] > 30) & (df['humidity'] > 50 )]['label'].unique())\nprint('*'*50)\n\nprint(\"Winter Crops -->\")\nprint(df[(df['temperature'] < 20) & (df['humidity'] > 30 )]['label'].unique())\nprint('*'*50)\n\nprint(\"Rainy Crops -->\")\nprint(df[(df['rainfall'] > 200) & (df['humidity'] > 30 )]['label'].unique())\nprint('*'*50)\n","0238b6a9":"from sklearn.cluster import KMeans","92aec355":"# Removing the label column\nX = df.drop(['label'], axis = 1)","01d18f48":"X.head()","3bf62b89":"# Selecting all the values.. output will be of ndarray.\nX = X.values","c572bd97":"X[:2]","7aa83e38":"X.shape","a76dd79f":"# Lets determine the optimum number of Clusters within the DataSet.\n\nplt.rcParams['figure.figsize'] = (10,4)\n\nwcss = []\n\nfor i in range(1,11):\n    km = KMeans(n_clusters = i, init = 'k-means++', max_iter = 300, n_init = 10, random_state = 0)\n    km.fit(X)\n    wcss.append(km.inertia_)\n    print(\"Iteration \", i, \" Done.\")\n    ","9d72f1c7":"print(wcss)","e2e1ff2b":"plt.rcParams['figure.figsize'] = (10,4)\n\n# Lets plot the results\nplt.plot(range(1,11), wcss)\nplt.title(\"The Elbow Method\", fontsize = 20)\nplt.xlabel(\"No. of Clusters\")\nplt.ylabel(\"wcss\")\nplt.show()","21e9de87":"# Lets implement the K means algorithm to perform clustering analysis.\n\nkm = KMeans(n_clusters = 4, init = 'k-means++', max_iter = 300, n_init = 10, random_state = 0)\ny_means = km.fit_predict(X)\n\n# Lets find out the Results\na = df['label']\ny_means = pd.DataFrame(y_means)\nz = pd.concat([y_means, a], axis = 1)\nz = z.rename(columns = {0:'Cluster'})\n\nz.head()","da638820":"# Lets check the CLuster of each crops\nprint(\"Lets check the Results After Applying the K Means Clustering Analysis \\n\")\nprint(\"Crops in First Cluster : \", z[z['Cluster'] == 0]['label'].unique())\nprint('-'*50)\n\nprint(\"Crops in Second Cluster : \", z[z['Cluster'] == 1]['label'].unique())\nprint('-'*50)\n\nprint(\"Crops in Third Cluster : \", z[z['Cluster'] == 2]['label'].unique())\nprint('-'*50)\n\nprint(\"Crops in Fourth Cluster : \", z[z['Cluster'] == 3]['label'].unique())\nprint('-'*50)","7b06ec2c":"# Lets split the datase\nX = df.drop(['label'], axis = 1)\ny = df['label']\n\nX.shape, y.shape","ddb09d9c":"from sklearn.model_selection import train_test_split","a1cc28c1":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size = .2, random_state = 0)","9151d2f0":"X_train.shape, X_valid.shape, y_train.shape, y_valid.shape","e3d40186":"# Lets crete a Predictive Model\n\nfrom sklearn.linear_model import LogisticRegression","375b5798":"# model = LogisticRegression(random_state=0, solver='lbfgs', multi_class='multinomial')\n# model = LogisticRegression(solver='lbfgs', multi_class='multinomial')\nmodel = LogisticRegression(solver='liblinear')\nmodel.fit(X_train, y_train)","385ab938":"# import sklearn\n# print('The scikit-learn version is {}.'.format(sklearn.__version__))","3cfd81d4":"# pip install -U scikit-learn","b114b55e":"# import sklearn\n# print('The scikit-learn version is {}.'.format(sklearn.__version__))","02f57e60":"y_pred = model.predict(X_valid)","209fd562":"# Lets evaluate the Model PErformance\nfrom sklearn.metrics import confusion_matrix","57cb4fda":"cm = confusion_matrix(y_valid, y_pred)\nsns.heatmap(cm, annot = True, cmap = 'YlGnBu')\nplt.title(\"Confusion Matrix for Logistic Regression\", fontsize = 15)\nplt.show()","45f4aa72":"from sklearn.metrics import classification_report","ac1b3885":"# Lets print classification Report\ncr = classification_report(y_valid, y_pred)\nprint(cr)","3733c4d9":"pred = model.predict(\n    (\n        np.array(\n            [\n                [\n                    90,   # Value for N\n                    40,   # Value for P\n                    40,   # Value for K\n                    20,   # Value for Temp\n                    80,   # Value for Humidity\n                    7,    # Value for pH\n                    200   # Value for Rainfall\n                    # Expected is \"Rice\"\n                ]\n            ]\n        )\n    )\n)\n\nprint(\"The Suggested Crop for Given Climatic Condition is \", pred)","9207461a":"# Distribution\n","73ada240":"From above we see two elbow.. one at 3 and another at 4... but we can consider the last elbow.. so considering at 4.\n\nWith this we can say that we have or need 4 clusters.\n\nLets implement KMeans cluster.","a0bd4d35":"was getting error `AttributeError: 'str' object has no attribute 'decode'`.\n\nRefer to https:\/\/stackoverflow.com\/questions\/65682019\/attributeerror-str-object-has-no-attribute-decode-in-fitting-logistic-regre for solution"}}