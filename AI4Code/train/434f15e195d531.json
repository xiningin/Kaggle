{"cell_type":{"03692af0":"code","c9859378":"code","570864f2":"code","53471ad8":"code","7507dc54":"code","064a1176":"code","d36205bd":"code","56d51bb8":"code","608a3f81":"code","2bef0295":"code","61548914":"code","67814d5b":"code","4f97bd9b":"code","86346ad2":"code","7c002ad5":"code","67e52b8a":"code","9864b5ae":"code","331d0e31":"code","489c53be":"code","7ca11e0e":"code","d4d6c6ab":"code","56d8012e":"code","bd62f33f":"code","f4c720bc":"code","0a930000":"code","5f802ff8":"code","5e689063":"code","a76770f5":"code","6c9138c7":"code","1fa4d607":"code","dc729a1e":"code","c17c99f3":"code","c78ba2ff":"code","afc8727d":"code","f3161621":"code","903d230d":"code","25b37425":"code","ad6cf57b":"code","04f8493a":"code","48af80fb":"code","a9dbfe03":"code","4184fc40":"code","5885a89b":"code","9502eeec":"code","b3315b24":"code","37e8c990":"code","6e1af458":"code","617a1388":"code","27805b2d":"code","d487cec1":"code","65cf456b":"code","04ad7d85":"code","43be697a":"code","cda93914":"code","13225927":"code","9fc6070f":"code","b34d1e6f":"code","7e33e74a":"code","9740b617":"code","43275cdf":"code","f994971a":"code","6cbbd431":"code","4efa52fe":"markdown","1b02846f":"markdown","77b3a938":"markdown","914600a1":"markdown","05de1901":"markdown","e8acf395":"markdown","8541d917":"markdown","13e5cb14":"markdown","c51c86b6":"markdown","3d3b0979":"markdown","5804b54a":"markdown","1ba4950a":"markdown"},"source":{"03692af0":"!pip install xlrd\n!pip install openpyxl","c9859378":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline","570864f2":"#from sklearn.linear_model import LinearRegression\n#from sklearn.linear_model import Lasso\n#from sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import Ridge\n#from sklearn.tree import DecisionTreeRegressor\n#from xgboost import XGBRegressor\n\nfrom sklearn.preprocessing import MinMaxScaler\n#from sklearn.preprocessing import PolynomialFeatures\n#from sklearn.pipeline import make_pipeline\n#from sklearn.model_selection import GridSearchCV","53471ad8":"df = pd.read_excel('\/kaggle\/input\/eczacibasi-projesi\/Takmlarla Paylalacak Veri Seti.xlsx', parse_dates = [2])\nid_df = pd.read_excel('\/kaggle\/input\/eczacibasi-projesi\/id.xlsx', parse_dates = [3])\nsample_submission = pd.read_csv('\/kaggle\/input\/eczacibasi-projesi\/sample_submission.csv')","7507dc54":"df = df.sort_values(['date', 'item']).reset_index(drop=True)","064a1176":"df['year'] = df['date'].dt.year\ndf['month'] = df['date'].dt.month\ndf['year'] = df['year'].map({2018:0, 2019:1, 2020:2})\n#df.drop('date', axis=1, inplace=True)","d36205bd":"df.head()","56d51bb8":"df.shape","608a3f81":"df.info()","2bef0295":"plt.title('Customer Category Counts', fontsize=15)\nplt.bar(df['customer'].value_counts().index, df['customer'].value_counts())\nplt.show()","61548914":"customer_a = df[df['customer'] == 'A']\ncustomer_b = df[df['customer'] == 'B']\ncustomer_c = df[df['customer'] == 'C']","67814d5b":"customer_a_items = np.sort(customer_a['item'].unique())\ncustomer_b_items = np.sort(customer_b['item'].unique())\ncustomer_c_items = np.sort(customer_c['item'].unique())\nprint(f\"Items Customer A ordered:\\n{customer_a_items}\\n\")\nprint(f\"Items Customer B ordered:\\n{customer_b_items}\\n\")\nprint(f\"Items Customer C ordered:\\n{customer_c_items}\")","4f97bd9b":"plt.figure(figsize=(12,8))\nplt.title('Item Category Counts by Customer', fontsize=15)\nplt.xticks(range(0, 83), rotation = 90, fontsize=9)\nplt.xlim(-1, 83)\nplt.bar(customer_a['item'].value_counts().index, customer_a['item'].value_counts(),label='A')\nplt.bar(customer_b['item'].value_counts().index, customer_b['item'].value_counts(), label='B')\nplt.bar(customer_c['item'].value_counts().index, customer_c['item'].value_counts(), label='C')\nplt.legend()\nplt.show()","86346ad2":"plt.figure(figsize=(12,8))\nplt.title('Total Order by Item', fontsize=15)\nplt.xticks(range(0, 83), rotation = 90, fontsize=9)\nplt.xlim(-1, 83)\nplt.bar(df.groupby(['item'])['order'].sum().index, df.groupby(['item'])['order'].sum())\nplt.show()","7c002ad5":"customer_a_2018 = customer_a[customer_a['year'] == 0]\ncustomer_b_2018 = customer_b[customer_b['year'] == 0]\ncustomer_c_2018 = customer_c[customer_c['year'] == 0]\n\ncustomer_a_2019 = customer_a[customer_a['year'] == 1]\ncustomer_b_2019 = customer_b[customer_b['year'] == 1]\ncustomer_c_2019 = customer_c[customer_c['year'] == 1]\n\ncustomer_a_2020 = customer_a[customer_a['year'] == 2]\ncustomer_b_2020 = customer_b[customer_b['year'] == 2]\ncustomer_c_2020 = customer_c[customer_c['year'] == 2]","67e52b8a":"plt.figure(figsize=(18, 18))\n\n\nplt.subplot(3, 3, 1)\nplt.title('2018 Monthly Total Orders for Customer A', fontsize=10)\nfor i in customer_a_items:\n    plt.bar(customer_a_2018.groupby(['item', 'month'])['order'].sum()[i].index, customer_a_2018.groupby(['item', 'month'])['order'].sum()[i], label=i)\n\nplt.xticks(ticks=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\n           labels=['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'],\n           fontsize=10)\nplt.yticks(ticks=[i for i in range(0, 16000, 2000)], fontsize=10)\n\nplt.xlabel('Months', fontsize=10)\nplt.ylabel('Total Orders', fontsize=10)\n#plt.legend()\n\n\nplt.subplot(3, 3, 2)\nplt.title('2018 Monthly Total Orders for Customer B', fontsize=10)\nfor i in customer_b_items:\n    plt.bar(customer_b_2018.groupby(['item', 'month'])['order'].sum()[i].index, customer_b_2018.groupby(['item', 'month'])['order'].sum()[i], label=i)\n\nplt.xticks(ticks=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\n           labels=['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'],\n           fontsize=10)\nplt.yticks(fontsize=10)\n\nplt.xlabel('Months', fontsize=10)\nplt.ylabel('Total Orders', fontsize=10)\n#plt.legend()\n\n\nplt.subplot(3, 3, 3)\nplt.title('2018 Monthly Total Orders for Customer C', fontsize=10)\nfor i in customer_c_items:\n    plt.bar(customer_c_2018.groupby(['item', 'month'])['order'].sum()[i].index, customer_c_2018.groupby(['item', 'month'])['order'].sum()[i], label=i)\n\nplt.xticks(ticks=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\n           labels=['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'],\n           fontsize=10)\nplt.yticks(ticks=[i for i in range(0, 18000, 2000)], fontsize=10)\n\nplt.xlabel('Months', fontsize=10)\nplt.ylabel('Total Orders', fontsize=10)\n#plt.legend()\n\n\nplt.subplot(3, 3, 4)\nplt.title('2019 Monthly Total Orders for Customer A', fontsize=10)\nfor i in customer_a_items:\n    plt.bar(customer_a_2019.groupby(['item', 'month'])['order'].sum()[i].index, customer_a_2019.groupby(['item', 'month'])['order'].sum()[i], label=i)\n\nplt.xticks(ticks=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\n           labels=['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'],\n           fontsize=10)\nplt.yticks(ticks=[i for i in range(0, 16000, 2000)], fontsize=10)\n\nplt.xlabel('Months', fontsize=10)\nplt.ylabel('Total Orders', fontsize=10)\n#plt.legend()\n\n\nplt.subplot(3, 3, 5)\nplt.title('2019 Monthly Total Orders for Customer B', fontsize=10)\nfor i in customer_b_items:\n    plt.bar(customer_b_2019.groupby(['item', 'month'])['order'].sum()[i].index, customer_b_2019.groupby(['item', 'month'])['order'].sum()[i], label=i)\n\nplt.xticks(ticks=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\n           labels=['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'],\n           fontsize=10)\nplt.yticks(fontsize=10)\n\nplt.xlabel('Months', fontsize=10)\nplt.ylabel('Total Orders', fontsize=10)\n#plt.legend()\n\n\nplt.subplot(3, 3, 6)\nplt.title('2019 Monthly Total Orders for Customer C', fontsize=10)\nfor i in customer_c_items:\n    plt.bar(customer_c_2019.groupby(['item', 'month'])['order'].sum()[i].index, customer_c_2019.groupby(['item', 'month'])['order'].sum()[i], label=i)\n\nplt.xticks(ticks=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\n           labels=['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'],\n           fontsize=10)\nplt.yticks(ticks=[i for i in range(0, 18000, 2000)], fontsize=10)\n\nplt.xlabel('Months', fontsize=10)\nplt.ylabel('Total Orders', fontsize=10)\n#plt.legend()\n\n\nplt.subplot(3, 3, 7)\nplt.title('2020 Monthly Total Orders for Customer A', fontsize=10)\nfor i in customer_a_items:\n    plt.bar(customer_a_2020.groupby(['item', 'month'])['order'].sum()[i].index, customer_a_2020.groupby(['item', 'month'])['order'].sum()[i], label=i)\n\nplt.xticks(ticks=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\n           labels=['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'],\n           fontsize=10)\nplt.yticks(fontsize=10)\n\nplt.xlabel('Months', fontsize=10)\nplt.ylabel('Total Orders', fontsize=10)\n#plt.legend()\n\n\nplt.subplot(3, 3, 8)\nplt.title('2020 Monthly Total Orders for Customer B', fontsize=10)\nfor i in customer_b_items:\n    plt.bar(customer_b_2020.groupby(['item', 'month'])['order'].sum()[i].index, customer_b_2020.groupby(['item', 'month'])['order'].sum()[i], label=i)\n\nplt.xticks(ticks=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\n           labels=['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'],\n           fontsize=10)\nplt.yticks(fontsize=10)\n\nplt.xlabel('Months', fontsize=10)\nplt.ylabel('Total Orders', fontsize=10)\n#plt.legend()\n\n\nplt.subplot(3, 3, 9)\nplt.title('2020 Monthly Total Orders for Customer C', fontsize=10)\nfor i in customer_c_items:\n    plt.bar(customer_c_2020.groupby(['item', 'month'])['order'].sum()[i].index, customer_c_2020.groupby(['item', 'month'])['order'].sum()[i], label=i)\n\nplt.xticks(ticks=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\n           labels=['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'],\n           fontsize=10)\nplt.yticks(ticks=[i for i in range(0, 18000, 2000)], fontsize=10)\n\nplt.xlabel('Months', fontsize=10)\nplt.ylabel('Total Orders', fontsize=10)\n#plt.legend()\n\nplt.show()","9864b5ae":"a = pd.DataFrame()\nfor i in customer_a_items:\n    item_df = pd.concat([pd.Series('A', index=df['date'].unique(), name='customer'), pd.Series(i, index=df['date'].unique(), name='item'), df.groupby(['customer', 'item', 'date'])['order'].sum()['A'][i]], axis=1).fillna(0)\n    a = pd.concat([a, item_df])\n    \na = a.reset_index()\na.columns = ['date', 'customer', 'item', 'order']\na = a[['customer', 'item', 'date', 'order']]","331d0e31":"#a.loc[a['order'] > np.quantile(a['order'], 0.99), 'order'] = np.quantile(a['order'], 0.75)\n#a.loc[a['order'] < np.quantile(a['order'], 0.01), 'order'] = np.quantile(a['order'], 0.1)","489c53be":"b = pd.DataFrame()\nfor i in customer_b_items:\n    item_df = pd.concat([pd.Series('B', index=df['date'].unique(), name='customer'), pd.Series(i, index=df['date'].unique(), name='item'), df.groupby(['customer', 'item', 'date'])['order'].sum()['B'][i]], axis=1).fillna(0)\n    b = pd.concat([b, item_df])\n    \nb = b.reset_index()\nb.columns = ['date', 'customer', 'item', 'order']\nb = b[['customer', 'item', 'date', 'order']]","7ca11e0e":"#b.loc[b['order'] > np.quantile(b['order'], 0.99), 'order'] = np.quantile(b['order'], 0.75)\n#b.loc[b['order'] < np.quantile(b['order'], 0.01), 'order'] = np.quantile(b['order'], 0.1)","d4d6c6ab":"c = pd.DataFrame()\nfor i in customer_c_items:\n    item_df = pd.concat([pd.Series('C', index=df['date'].unique(), name='customer'), pd.Series(i, index=df['date'].unique(), name='item'), df.groupby(['customer', 'item', 'date'])['order'].sum()['C'][i]], axis=1).fillna(0)\n    c = pd.concat([c, item_df])\n    \nc = c.reset_index()\nc.columns = ['date', 'customer', 'item', 'order']\nc = c[['customer', 'item', 'date', 'order']]","56d8012e":"#c.loc[c['order'] > np.quantile(c['order'], 0.99), 'order'] = np.quantile(c['order'], 0.75)\n#c.loc[c['order'] < np.quantile(c['order'], 0.01), 'order'] = np.quantile(c['order'], 0.1)","bd62f33f":"df_new = pd.concat([a, b, c])","f4c720bc":"df_new['year'] = df_new['date'].dt.year\ndf_new['month'] = df_new['date'].dt.month\ndf_new['year'] = df_new['year'].map({2018:0, 2019:1, 2020:2})\n#df_new.drop('date', axis=1, inplace=True)","0a930000":"train_customer_dummies = pd.get_dummies(df_new['customer'])\n\ntrain_item_dummies = pd.get_dummies(df_new['item'])\ntrain_item_dummies.columns = ['item'+str(i) for i in range(83)]\n\n#train_year_dummies = pd.get_dummies(df['year'])\n#train_year_dummies.columns = ['y0', 'y1', 'y2']\n\n#train_month_dummies = pd.get_dummies(df['month'])\n#train_month_dummies.columns = ['m'+str(i) for i in range(1, 13)]","5f802ff8":"y_train = df_new['order']\ndf_new.drop('order', axis=1, inplace=True)","5e689063":"X_train = pd.concat([train_customer_dummies, train_item_dummies, df_new.drop(['customer', 'item'], axis=1)], axis=1)\n\nX_train.reset_index(drop=True, inplace=True)\n#y_train.reset_index(drop=True, inplace=True)","a76770f5":"X_train.drop('date', axis=1, inplace=True)","6c9138c7":"id_df['year'] = id_df['date'].dt.year\nid_df['month'] = id_df['date'].dt.month\nid_df['year'] = id_df['year'].map({2020:2, 2021:3})\n\n#id_df.drop('date', axis=1, inplace=True)\nid_df.set_index('id', inplace=True)","1fa4d607":"id_df.shape","dc729a1e":"id_df.columns","c17c99f3":"id_df.info()","c78ba2ff":"test_customer_dummies = pd.get_dummies(id_df['customer'])\n\ntest_item_dummies = pd.get_dummies(id_df['item'])\ntest_item_dummies.columns = ['item'+str(i) for i in range(83)]\n\n#test_year_dummies = pd.get_dummies(id_df['year'])\n#test_year_dummies.columns = ['y1', 'y2']\n#test_year_dummies = pd.concat([pd.Series(np.zeros(498), index=np.arange(1, 499), name='y0', dtype=np.uint8), test_year_dummies], axis=1)\n\n#test_month_dummies = pd.get_dummies(id_df['month'])\n#test_month_dummies.columns = ['m1', 'm8', 'm9', 'm10', 'm11', 'm12']\n#test_month_dummies = pd.concat([pd.DataFrame(np.zeros((498, 6)), dtype=np.uint8, columns=['m2', 'm3', 'm4', 'm5', 'm6', 'm7'], index=np.arange(1, 499)), test_month_dummies], axis=1)\n#test_month_dummies = test_month_dummies[['m1', 'm2', 'm3', 'm4', 'm5', 'm6', 'm7', 'm8', 'm9', 'm10', 'm11', 'm12']]","afc8727d":"X_test = pd.concat([id_df.drop(['customer', 'item'], axis=1), test_customer_dummies, test_item_dummies], axis=1)\nX_test = X_test.reset_index(drop=True)","f3161621":"X_test = X_test[['A', 'B', 'C', 'item0', 'item1',\n                 'item2', 'item3', 'item4', 'item5', 'item6', 'item7', 'item8', 'item9',\n                 'item10', 'item11', 'item12', 'item13', 'item14', 'item15', 'item16',\n                 'item17', 'item18', 'item19', 'item20', 'item21', 'item22', 'item23',\n                 'item24', 'item25', 'item26', 'item27', 'item28', 'item29', 'item30',\n                 'item31', 'item32', 'item33', 'item34', 'item35', 'item36', 'item37',\n                 'item38', 'item39', 'item40', 'item41', 'item42', 'item43', 'item44',\n                 'item45', 'item46', 'item47', 'item48', 'item49', 'item50', 'item51',\n                 'item52', 'item53', 'item54', 'item55', 'item56', 'item57', 'item58',\n                 'item59', 'item60', 'item61', 'item62', 'item63', 'item64', 'item65',\n                 'item66', 'item67', 'item68', 'item69', 'item70', 'item71', 'item72',\n                 'item73', 'item74', 'item75', 'item76', 'item77', 'item78', 'item79',\n                 'item80', 'item81', 'item82', 'year', 'month']]","903d230d":"### Dropping 2020 data\n\n#X_train = X_train[X_train['year'].isin([0, 1])].reset_index(drop=True)","25b37425":"#y_train = y_train[:1992]","ad6cf57b":"#total_cases = pd.read_csv(\"total_cases.csv\", parse_dates=[0])","04f8493a":"#europe_cases = total_cases[['date', 'Europe']].fillna(0)","48af80fb":"#europe_cases = europe_cases[(europe_cases['date'].isin(df['date'].unique())) | (europe_cases['date'].isin(id_df['date'].unique()))]","a9dbfe03":"#europe_cases['year'] = europe_cases['date'].dt.year\n#europe_cases['month'] = europe_cases['date'].dt.month","4184fc40":"#df.drop('date', axis=1, inplace=True)\n#id_df.drop('date', axis=1, inplace=True)\n#europe_cases.drop('date', axis=1, inplace=True)","5885a89b":"#europe_cases['Europe'] = europe_cases['Europe'].astype('int')","9502eeec":"#europe_cases['year'] = europe_cases['year'].map({2020:2, 2021:3})","b3315b24":"#europe_cases.reset_index(drop=True, inplace=True)","37e8c990":"#europe_X_train = europe_cases.iloc[:6,:]\n#europe_X_test = europe_cases.iloc[6:,:]","6e1af458":"#europe_cases","617a1388":"#X_train = pd.merge(X_train, europe_X_train, on=['year', 'month'], how='left')\n#X_test = pd.merge(X_test, europe_X_test, on=['year', 'month'], how='left')","27805b2d":"#X_train.fillna(0, inplace=True)","d487cec1":"scaler = MinMaxScaler((0, 1))","65cf456b":"#X_train_std = scaler.fit_transform(X_train)\n#X_test_std =  scaler.fit_transform(X_test)","04ad7d85":"X_train_std = scaler.fit_transform(pd.concat([X_train, X_test]).reset_index(drop=True))[:2573]\nX_test_std = scaler.fit_transform(pd.concat([X_train, X_test]).reset_index(drop=True))[2573:]","43be697a":"### Exporting train dataset for validation in another notebook\ndf_export = pd.concat([pd.DataFrame(X_train_std), pd.DataFrame(y_train.reset_index(drop=True))], axis=1)\n#df_export.to_csv('df.csv', index=False)","cda93914":"print('X_train:')\ndisplay(X_train.head())\nprint()\nprint('X_test:')\ndisplay(X_test.head())\nprint()\nprint('y_train:')\ndisplay(y_train.head())","13225927":"X_train.info()","9fc6070f":"X_test.info()","b34d1e6f":"print('X_train_std:')\nprint(X_train_std)\nprint()\nprint('X_test_std:')\nprint(X_test_std)","7e33e74a":"ridge = Ridge(alpha=3.0)\nridge.fit(X_train_std, y_train)\nridge_predictions = ridge.predict(X_test_std)","9740b617":"ridge_order = pd.Series(ridge_predictions, name='order')","43275cdf":"ridge_submission = pd.concat([id_df.reset_index()['id'], ridge_order], axis=1)","f994971a":"ridge_submission","6cbbd431":"#ridge_submission.to_csv('ridge_submission_7.csv', index=False)","4efa52fe":"Source: [data.world total_cases data](https:\/\/data.world\/markmarkoh\/coronavirus-data\/workspace\/file?filename=total_cases.csv)","1b02846f":"## Test Set","77b3a938":"## Exploratory Data Analysis","914600a1":"## Covid-19 Data","05de1901":"## Pre-processing","e8acf395":"## MinMaxScaler","8541d917":"## Ridge Regression","13e5cb14":"### Item Category Counts","c51c86b6":"### Customer Category Counts","3d3b0979":"# Building the Model: Training and Predictions","5804b54a":"# Data&Analytics Challenge - Eczac\u0131ba\u015f\u0131","1ba4950a":"## Importing Libraries and Data"}}