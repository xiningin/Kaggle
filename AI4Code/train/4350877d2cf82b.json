{"cell_type":{"b8dda4b3":"code","da2a20e8":"code","c28e892c":"code","29715c95":"code","ed61774e":"code","38b37137":"code","9eae5b0c":"code","925bccfc":"code","8a4cbce7":"code","bb7657f3":"code","05bd50b5":"markdown","58f3aef2":"markdown","78e6229c":"markdown","ab4b6d14":"markdown","ab1a7830":"markdown","b7e2e3d2":"markdown","37130c79":"markdown","c3f7a01f":"markdown"},"source":{"b8dda4b3":"!pip install openpyxl","da2a20e8":"import pandas as pd\nimport numpy as np\n\ndf = pd.read_excel(\"..\/input\/xss-attacks-dataset\/XSS Attack Dataset with 461 entries.xlsx\")\ndf.head()","c28e892c":"print(\"Unique values in App Names:\", len(pd.unique(df['App Names'])))\nprint(\"Unique values in Permissions:\", len(pd.unique(df['Permissions'])))\nprint(\"Unique values in API Name:\", len(pd.unique(df['API Name'])))\nprint(\"Unique values in Website Name:\", len(pd.unique(df['Website Name'])))\nprint(\"Unique values in IP:\", len(pd.unique(df['IP'])))\nprint(\"Unique values in Location:\", len(pd.unique(df['Location'])))\nprint(\"Unique values in Label:\", len(pd.unique(df['Label'])))","29715c95":"from sklearn.preprocessing import LabelEncoder\n\nfor c in df.columns:\n    if df[c].dtype=='object': \n        lbl = LabelEncoder()\n        lbl.fit(list(df[c].values))\n        df[c] = lbl.transform(df[c].values)\n        \ndf.head()        ","ed61774e":"df.corr().abs()['Label'].sort_values(ascending = False)","38b37137":"import matplotlib.pyplot as plt\n%matplotlib inline\ndf.hist(layout=(5,4), figsize=(15,10))\n\nplt.show()","9eae5b0c":"from numpy import mean\nfrom numpy import std\nfrom sklearn.datasets import make_classification\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import RepeatedStratifiedKFold\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom matplotlib import pyplot\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import make_pipeline","925bccfc":"# get a list of models to evaluate\ndef get_models():\n\tmodels = dict()\n\tmodels['lr'] = make_pipeline(StandardScaler(),LogisticRegression())\n\tmodels['knn'] = make_pipeline(StandardScaler(),KNeighborsClassifier())\n\tmodels['cart'] = DecisionTreeClassifier()\n\tmodels['svm'] = make_pipeline(StandardScaler(),SVC())\n\tmodels['bayes'] = make_pipeline(StandardScaler(), GaussianNB())\n\treturn models\n\nX = df.drop(['Label'], axis = 1)\ny = df['Label']","8a4cbce7":"# evaluate a given model using cross-validation\ndef evaluate_model(model, X, y):\n\tcv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\n\tscores = cross_val_score(model, X, y, scoring='accuracy', cv=cv, n_jobs=-1, error_score='raise')\n\treturn scores","bb7657f3":"# get the models to evaluate\nmodels = get_models()\n# evaluate the models and store results\nresults, names = list(), list()\nfor name, model in models.items():\n\tscores = evaluate_model(model, X, y)\n\tresults.append(scores)\n\tnames.append(name)\n\tprint('>%s %.3f (%.3f)' % (name, mean(scores), std(scores)))\n# plot model performance for comparison\npyplot.boxplot(results, labels=names, showmeans=True)\npyplot.show()","05bd50b5":"API Name is very strongly correlated with Label.","58f3aef2":"# Upvote if you like it or fork it.","78e6229c":"![](https:\/\/1tskcg39n5iu1jl9xp2ze2ma-wpengine.netdna-ssl.com\/wp-content\/uploads\/2019\/05\/cross-site-scripting-example.png)","ab4b6d14":"# Applying pipeline with scaling variables","ab1a7830":"# Modelling with different models and stratified k fold ","b7e2e3d2":"# Acknowledgements\nKhalid, Usama (2019), \u201cXSS Attacks Dataset\u201d, Mendeley Data, V1, doi: 10.17632\/9jhzmswdfj.1","37130c79":"# Basic plotting","c3f7a01f":"# So we can see Naive Bayes gave 100% accuracy.\n## Then comes Decision Tree classifier with 99.9% accuracy"}}