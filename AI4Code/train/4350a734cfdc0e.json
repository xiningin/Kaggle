{"cell_type":{"c2fffde8":"code","fb3072d3":"code","64dce745":"code","2ef12071":"code","4e469133":"code","78ab2909":"code","3109fd7f":"code","a9ff8748":"code","91fa661f":"code","c225d275":"code","3b55029b":"code","7c7c3a64":"code","b25ed547":"code","2e10a1a4":"code","2434f26e":"code","7b284366":"code","d01524cd":"code","a7362168":"code","1a2341f7":"code","fc9082be":"code","1441cb27":"code","bc40a39f":"code","cd486255":"code","d7f305ce":"code","b738be7a":"code","bbd5cd2f":"code","c33bc5a5":"code","bdba5145":"code","13bf4930":"code","3bc0d7ae":"code","7f360582":"code","89f01e05":"code","601b5dfc":"code","17c67b9e":"code","34f0bb21":"code","27edbb5f":"code","ae5a1c42":"code","84445264":"code","31b657e3":"code","4758bff5":"code","fbeb83c8":"code","585dd773":"code","1ae46ffc":"code","62b34875":"code","db70920a":"code","cb9c037a":"code","b0184c19":"code","28a8d4ef":"code","9dd7a7e5":"code","8be1ad7e":"code","67327857":"code","2ec5841c":"code","b8e79c3a":"code","8b1f6b35":"code","a6395641":"code","bf890a39":"code","796e4ad2":"code","f998c9eb":"markdown","63dd65fb":"markdown","d363b3e3":"markdown","e876794d":"markdown"},"source":{"c2fffde8":"import numpy as np\nimport pandas as pd \nimport datetime as dt\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")","fb3072d3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","64dce745":"train = pd.read_csv('\/kaggle\/input\/nyc-taxi-trip-duration\/train.zip')\ntest = pd.read_csv('\/kaggle\/input\/nyc-taxi-trip-duration\/test.zip')\nsample_submission = pd.read_csv('\/kaggle\/input\/nyc-taxi-trip-duration\/sample_submission.zip')","2ef12071":"train.head(3)","4e469133":"test.head(3)","78ab2909":"train.info()","3109fd7f":"train.isnull().sum()","a9ff8748":"from scipy import stats\nfrom scipy.stats import norm","91fa661f":"plt.scatter(range(train.shape[0]),np.sort(train['trip_duration']))","c225d275":"sns.distplot(train.trip_duration.values, fit = norm)","3b55029b":"sns.distplot(np.log1p(train.trip_duration.values), fit = norm)","7c7c3a64":"train['trip_duration'] = np.log(train['trip_duration'].values)","b25ed547":"feature_names=list(test)\ndf_train=train[feature_names]\ndf=pd.concat((df_train, test))","2e10a1a4":"print(train.shape, test.shape, df.shape)","2434f26e":"df.head(3)","7b284366":"df['pickup_datetime'] = pd.to_datetime(df['pickup_datetime'])","d01524cd":"df['month'] = df['pickup_datetime'].dt.month\ndf['day'] = df['pickup_datetime'].dt.day\ndf['weekday'] = df['pickup_datetime'].dt.weekday\ndf['hour'] = df['pickup_datetime'].dt.hour\ndf['dayofweek'] = df['pickup_datetime'].dt.dayofweek","a7362168":"df.drop(['pickup_datetime'], axis=1, inplace=True)","1a2341f7":"sns.countplot(df['hour'])","fc9082be":"sns.countplot(df['dayofweek'])","1441cb27":"df['dist_long'] = df['pickup_longitude'] - df['dropoff_longitude']\ndf['dist_lat'] = df['pickup_latitude'] - df['dropoff_latitude']","bc40a39f":"df['dist'] = np.sqrt(np.square(df['dist_long']) + np.square(df['dist_lat']))","cd486255":"def ft_haversine_distance(lat1, lng1, lat2, lng2):\n    lat1, lng1, lat2, lng2 = map(np.radians, (lat1, lng1, lat2, lng2))\n    AVG_EARTH_RADIUS = 6371 #km\n    lat = lat2 - lat1\n    lng = lng2 - lng1\n    d = np.sin(lat * 0.5) ** 2 + np.cos(lat1) * np.cos(lat2) * np.sin(lng * 0.5) ** 2\n    h = 2 * AVG_EARTH_RADIUS * np.arcsin(np.sqrt(d))\n    return h\n\ndf['distance'] = ft_haversine_distance(df['pickup_latitude'].values,\n                                       df['pickup_longitude'].values, \n                                       df['dropoff_latitude'].values,\n                                       df['dropoff_longitude'].values)","d7f305ce":"df.boxplot(column='distance')","b738be7a":"#df = df[(df.distance < 200)]","bbd5cd2f":"g_vendor = train.groupby('vendor_id')['trip_duration'].mean()\nsns.barplot(g_vendor.index,g_vendor.values)","c33bc5a5":"sfflag = train.groupby('store_and_fwd_flag')['trip_duration'].mean()\nsns.barplot(sfflag.index,sfflag.values)","bdba5145":"pc = train.groupby('passenger_count')['trip_duration'].mean()\nsns.barplot(pc.index,pc.values)","13bf4930":"df = pd.concat([df, pd.get_dummies(df['store_and_fwd_flag'],prefix = 'store')], axis=1)\ndf.drop(['store_and_fwd_flag'], axis=1, inplace=True)\n\ndf = pd.concat([df, pd.get_dummies(df['vendor_id'],prefix = 'vendor')], axis=1)\ndf.drop(['vendor_id'], axis=1, inplace=True)","3bc0d7ae":"df.head(3)","7f360582":"cor = df.corr()\nmask = np.array(cor)\nmask[np.tril_indices_from(mask)] = False\nfig,ax= plt.subplots()\nfig.set_size_inches(20,10)\nsns.heatmap(cor,mask= mask,square=True,annot=True)","89f01e05":"from sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import mean_squared_log_error\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nfrom sklearn.linear_model import LinearRegression","601b5dfc":"df.head(3)","17c67b9e":"df.drop([\"id\"], axis=1, inplace=True)","34f0bb21":"new_train = df[:train.shape[0]]\nnew_test = df[train.shape[0]:]","27edbb5f":"target = train['trip_duration']","ae5a1c42":"X_train, X_val, y_train, y_val = train_test_split(new_train, target, test_size=0.2, shuffle=True)","84445264":"def rmsle_score(preds, true):\n    rmsle_score = (np.sum((np.log1p(preds)-np.log1p(true))**2)\/len(true))**0.5\n    return rmsle_score","31b657e3":"from sklearn.metrics.scorer import make_scorer\n\nRMSLE = make_scorer(rmsle_score)","4758bff5":"import statsmodels.api as sm","fbeb83c8":"model = sm.OLS(target.values, new_train.astype(float))","585dd773":"re = model.fit()\nre.summary()","1ae46ffc":"import lightgbm as lgbm","62b34875":"lgb_params = {\n    'metric' : 'rmse',\n    'learning_rate': 0.1,\n    'max_depth': 25,\n    'num_leaves': 1000, \n    'objective': 'regression',\n    'feature_fraction': 0.9,\n    'bagging_fraction': 0.5,\n    'max_bin': 1000 }\n","db70920a":"lgb_df = lgbm.Dataset(new_train,target)","cb9c037a":"lgb_model = lgbm.train(lgb_params, lgb_df, num_boost_round=1500)","b0184c19":"pred = lgb_model.predict(new_test)","28a8d4ef":"pred_lgb = np.exp(pred)","9dd7a7e5":"import xgboost as xgb","8be1ad7e":"params = {\n    'booster':            'gbtree',\n    'objective':          'reg:linear',\n    'learning_rate':      0.1,\n    'max_depth':          14,\n    'subsample':          0.8,\n    'colsample_bytree':   0.7,\n    'colsample_bylevel':  0.7,\n    'silent':             1\n}","67327857":"dtrain = xgb.DMatrix(new_train, target)","2ec5841c":"gbm = xgb.train(params,\n                dtrain,\n                num_boost_round = 200)","b8e79c3a":"pred_test = np.exp(gbm.predict(xgb.DMatrix(new_test)))","8b1f6b35":"#ensemble = (0.8*pred_lgb + 0.4*pred_test) 0.42295\n#ensemble = (0.7*pred_lgb + 0.3*pred_test) 0.38148\nensemble = (0.6*pred_lgb + 0.4*pred_test) #0.38124\n#ensemble = (0.55*pred_lgb + 0.45*pred_test) 0.38126","a6395641":"sub = pd.DataFrame()\nsub['id'] = test.id\nsub['trip_duration'] = ensemble\nsub.head(3)","bf890a39":"sub = pd.DataFrame()\nsub['id'] = test.id\nsub['trip_duration'] = ensemble\nsub.head(3)","796e4ad2":"sub.to_csv('submission.csv', index=False)","f998c9eb":"## II. EDA & FE <a id=\"two\"><\/a>","63dd65fb":"### e. xgboost <a id=\"three-d\"><\/a>","d363b3e3":"### d. lightgbm <a id=\"three-d\"><\/a>","e876794d":"### a. train_test_split <a id=\"three-a\"><\/a>"}}