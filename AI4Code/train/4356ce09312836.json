{"cell_type":{"6bea3a73":"code","fc47c706":"code","22ef968e":"code","e066b3a3":"code","4d05f819":"code","2cf71cad":"code","eb28c295":"code","1a0bb5df":"code","52e2f42d":"code","9ee89421":"code","36394921":"code","0a14ec31":"code","1729ef8e":"code","cd28e66a":"code","0b28a1d2":"code","5669e2a8":"code","e95c4ecd":"code","ae73bb26":"code","3fa14913":"code","de5ad0e1":"code","8eff87ec":"code","e8ae13f1":"code","3b9408ee":"code","65d55b62":"code","bec9193f":"code","380b654d":"code","ca8b057e":"code","b0a665a2":"code","3159d134":"code","e2bdf85a":"code","eb5e5fb8":"code","3438b9de":"code","87f51a07":"code","1462a9cd":"code","4a85e287":"code","bd63393e":"code","b7a6287b":"code","df5bf925":"code","35a2327c":"code","f09b22c8":"code","29e92f83":"code","86666370":"code","4e73b6b1":"code","9ab872e8":"code","cf0b07a2":"code","37934eb3":"code","a3544167":"code","683a6e4e":"code","3eca64ad":"code","440564b8":"code","1b5a0782":"code","f2b78961":"code","3deaf49b":"code","56aa7ea1":"code","6ca8ac07":"code","f5dd58bd":"code","08f579ba":"code","0a36e6b8":"code","8a404096":"code","47cd1c72":"markdown","de518d27":"markdown","f6d1777b":"markdown","5ec3e694":"markdown","ee9ce74c":"markdown","7f09550d":"markdown","196bea57":"markdown","89fdba1c":"markdown","47a69513":"markdown","2cfa01cf":"markdown","9a966c3b":"markdown","3a42f3b3":"markdown","a4b83628":"markdown","efbbf1a8":"markdown","53510156":"markdown","c9200a6a":"markdown","57c16d98":"markdown","36db4b52":"markdown","d6a715ed":"markdown","997a5078":"markdown","9db8f28a":"markdown","29aa5609":"markdown","4e863500":"markdown","0cc08005":"markdown","02d495e9":"markdown","2da778f0":"markdown","f2d8fc13":"markdown"},"source":{"6bea3a73":"import pandas as pd\nimport numpy as np\n\n# DRAGONS\nimport xgboost as xgb\nimport lightgbm as lgb\nimport catboost as cat\n\n# plots\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# pandas \/ plt options\npd.options.display.max_columns = 999\nplt.rcParams['figure.figsize'] = (14, 7)\nfont = {'family' : 'verdana',\n        'weight' : 'bold',\n        'size'   : 14}\nplt.rc('font', **font)\n\n# remove warnings\nimport warnings\nwarnings.simplefilter(\"ignore\")\n\n# garbage collector\nimport gc\ngc.enable()","fc47c706":"train = pd.read_csv('..\/input\/create-extracted-json-fields-dataset\/extracted_fields_train.gz', dtype={'date': str, 'fullVisitorId': str, 'sessionId':str, 'visitId': np.int64})\ntest = pd.read_csv('..\/input\/create-extracted-json-fields-dataset\/extracted_fields_test.gz', dtype={'date': str, 'fullVisitorId': str, 'sessionId':str, 'visitId': np.int64})\ntrain.shape, test.shape","22ef968e":"train.head()","e066b3a3":"train.columns","4d05f819":"# Getting data from leak\ntrain_store_1 = pd.read_csv('..\/input\/exported-google-analytics-data\/Train_external_data.csv', low_memory=False, skiprows=6, dtype={\"Client Id\":'str'})\ntrain_store_2 = pd.read_csv('..\/input\/exported-google-analytics-data\/Train_external_data_2.csv', low_memory=False, skiprows=6, dtype={\"Client Id\":'str'})\ntest_store_1 = pd.read_csv('..\/input\/exported-google-analytics-data\/Test_external_data.csv', low_memory=False, skiprows=6, dtype={\"Client Id\":'str'})\ntest_store_2 = pd.read_csv('..\/input\/exported-google-analytics-data\/Test_external_data_2.csv', low_memory=False, skiprows=6, dtype={\"Client Id\":'str'})","2cf71cad":"# Getting VisitId from Google Analytics...\nfor df in [train_store_1, train_store_2, test_store_1, test_store_2]:\n    df[\"visitId\"] = df[\"Client Id\"].apply(lambda x: x.split('.', 1)[1]).astype(np.int64)","eb28c295":"# Merge with train\/test data\ntrain = train.merge(pd.concat([train_store_1, train_store_2], sort=False), how=\"left\", on=\"visitId\")\ntest = test.merge(pd.concat([test_store_1, test_store_2], sort=False), how=\"left\", on=\"visitId\")\n\n# Drop Client Id\nfor df in [train, test]:\n    df.drop(\"Client Id\", 1, inplace=True)","1a0bb5df":"train.columns","52e2f42d":"# Cleaning Revenue\nfor df in [train, test]:\n    df[\"Revenue\"].fillna('$', inplace=True)\n    df[\"Revenue\"] = df[\"Revenue\"].apply(lambda x: x.replace('$', '').replace(',', ''))\n    df[\"Revenue\"] = pd.to_numeric(df[\"Revenue\"], errors=\"coerce\")\n    df[\"Revenue\"].fillna(0.0, inplace=True)","9ee89421":"for df in [train_store_1, train_store_2, test_store_1, test_store_2]:\n    del df\ngc.collect()","36394921":"target_sums = train.groupby(\"fullVisitorId\")[\"totals.transactionRevenue\"].sum().reset_index()","0a14ec31":"plt.figure(figsize=(20,6))\nplt.scatter(range(target_sums.shape[0]), np.sort(np.log1p(target_sums[\"totals.transactionRevenue\"].values)), color = \"#ff4500\")\nplt.xlabel('index')\nplt.ylabel('TransactionRevenue')\nplt.show()","1729ef8e":"train.date = pd.to_datetime(train.date, format=\"%Y%m%d\")\ntest.date = pd.to_datetime(test.date, format=\"%Y%m%d\")\nplt.figure(figsize=(20,6))\ntrain.date.value_counts().sort_index().plot(label=\"train\", color = \"#FFD700\")\ntest.date.value_counts().sort_index().plot(label=\"test\", color = \"#48D1CC\")\nplt.legend()","cd28e66a":"palette = sns.color_palette(\"bright\")\n\n# Use palplot and pass in the variable:\n# sns.palplot(palette)\n\ndef drawBars(columnname):\n    plt.figure(figsize=(20,6))\n    sns.barplot(x=\"count\", y=\"index\", hue=\"dataset\",data=pd.melt(pd.concat([train[columnname].value_counts().rename(\"train\"), \n                                                                            test[columnname].value_counts().rename(\"test\")], axis=1, sort=\"False\").reset_index(), \n                                                                 id_vars=\"index\", var_name=\"dataset\", value_name=\"count\"),palette=palette)\n\ndrawBars(\"channelGrouping\")","0b28a1d2":"drawBars(\"geoNetwork.continent\")","5669e2a8":"ids_train = set(train.fullVisitorId.unique())\nids_test = set(test.fullVisitorId.unique())\nprint(\"Unique visitor ids in train:\", len(ids_train))\nprint(\"Unique visitor ids in test:\", len(ids_test))\nprint(\"Common visitors in train and test:\", len(ids_train & ids_test))","e95c4ecd":"problem = train[train.sessionId.map(train.sessionId.value_counts() == 2)].sort_values([\"sessionId\", 'visitStartTime'])\nproblem.head(10)","ae73bb26":"plt.figure(figsize=(20,6))\n(train.visitStartTime == train.visitId).value_counts()\n(train.visitStartTime == train.visitId).value_counts().plot.barh(color = [\"orange\",\"green\"])","3fa14913":"train.loc[pd.to_datetime(train.visitStartTime, unit='s') == \"2017-04-25 18:49:35\"].head(8)","de5ad0e1":"print(\"Train: \", np.bincount(train.visitId.value_counts()))","8eff87ec":"print(\"test: \", np.bincount(test.visitId.value_counts()))","e8ae13f1":"train.visitStartTime = pd.to_datetime(train.visitStartTime, unit='s')\ntest.visitStartTime = pd.to_datetime(test.visitStartTime, unit='s')\ntrain[\"date\"] = train.visitStartTime\ntest[\"date\"] = test.visitStartTime","3b9408ee":"train.set_index(\"visitStartTime\", inplace=True)\ntest.set_index(\"visitStartTime\", inplace=True)\ntrain.sort_index(inplace=True)\ntest.sort_index(inplace=True)","65d55b62":"def clearRare(columnname, limit = 1000):\n    # you may search for rare categories in train, train&test, or just test\n    #vc = pd.concat([train[columnname], test[columnname]], sort=False).value_counts()\n    vc = test[columnname].value_counts()\n    \n    common = vc > limit\n    common = set(common.index[common].values)\n    print(\"Set\", sum(vc <= limit), columnname, \"categories to 'other';\", end=\" \")\n    \n    train.loc[train[columnname].map(lambda x: x not in common), columnname] = 'other'\n    test.loc[test[columnname].map(lambda x: x not in common), columnname] = 'other'\n    print(\"now there are\", train[columnname].nunique(), \"categories in train\")","bec9193f":"train.fillna(0, inplace=True)\ntest.fillna(0, inplace=True)","380b654d":"clearRare(\"device.browser\")\nclearRare(\"device.operatingSystem\")\nclearRare(\"geoNetwork.country\")\nclearRare(\"geoNetwork.city\")\nclearRare(\"geoNetwork.metro\")\nclearRare(\"geoNetwork.networkDomain\")\nclearRare(\"geoNetwork.region\")\nclearRare(\"geoNetwork.subContinent\")\nclearRare(\"trafficSource.adContent\")\nclearRare(\"trafficSource.campaign\")\nclearRare(\"trafficSource.keyword\")\nclearRare(\"trafficSource.medium\")\nclearRare(\"trafficSource.referralPath\")\nclearRare(\"trafficSource.source\")","ca8b057e":"# Clearing leaked data:\nfor df in [train, test]:\n    df[\"Avg. Session Duration\"][df[\"Avg. Session Duration\"] == 0] = \"00:00:00\"\n    df[\"Avg. Session Duration\"] = df[\"Avg. Session Duration\"].str.split(':').apply(lambda x: int(x[0]) * 60 + int(x[1]))\n    df[\"Bounce Rate\"] = df[\"Bounce Rate\"].astype(str).apply(lambda x: x.replace('%', '')).astype(float)\n    df[\"Goal Conversion Rate\"] = df[\"Goal Conversion Rate\"].astype(str).apply(lambda x: x.replace('%', '')).astype(float)","b0a665a2":"for df in [train, test]:\n    # remember these features were equal, but not always? May be it means something...\n    df[\"id_incoherence\"] = pd.to_datetime(df.visitId, unit='s') != df.date\n    # remember visitId dublicates?\n    df[\"visitId_dublicates\"] = df.visitId.map(df.visitId.value_counts())\n    # remember session dublicates?\n    df[\"session_dublicates\"] = df.sessionId.map(df.sessionId.value_counts())","3159d134":"for df in [train, test]:\n    df['weekday'] = df['date'].dt.dayofweek.astype(object)\n    df['time'] = df['date'].dt.second + df['date'].dt.minute*60 + df['date'].dt.hour*3600\n    #df['month'] = df['date'].dt.month   # it must not be included in features during learning!\n    df['day'] = df['date'].dt.date       # it must not be included in features during learning!","e2bdf85a":"df = pd.concat([train, test])\ndf.sort_values(['fullVisitorId', 'date'], ascending=True, inplace=True)\ndf['prev_session'] = (df['date'] - df[['fullVisitorId', 'date']].groupby('fullVisitorId')['date'].shift(1)).astype(np.int64) \/\/ 1e9 \/\/ 60 \/\/ 60\ndf['next_session'] = (df['date'] - df[['fullVisitorId', 'date']].groupby('fullVisitorId')['date'].shift(-1)).astype(np.int64) \/\/ 1e9 \/\/ 60 \/\/ 60\ndf.sort_index(inplace=True)\n\ntrain = df[:len(train)]\ntest = df[len(train):]","eb5e5fb8":"for df in [train, test]:\n    df['source.country'] = df['trafficSource.source'] + '_' + df['geoNetwork.country']\n    df['campaign.medium'] = df['trafficSource.campaign'] + '_' + df['trafficSource.medium']\n    df['browser.category'] = df['device.browser'] + '_' + df['device.deviceCategory']\n    df['browser.os'] = df['device.browser'] + '_' + df['device.operatingSystem']","3438b9de":"for df in [train, test]:\n    df['device_deviceCategory_channelGrouping'] = df['device.deviceCategory'] + \"_\" + df['channelGrouping']\n    df['channelGrouping_browser'] = df['device.browser'] + \"_\" + df['channelGrouping']\n    df['channelGrouping_OS'] = df['device.operatingSystem'] + \"_\" + df['channelGrouping']\n    \n    for i in ['geoNetwork.city', 'geoNetwork.continent', 'geoNetwork.country','geoNetwork.metro', 'geoNetwork.networkDomain', 'geoNetwork.region','geoNetwork.subContinent']:\n        for j in ['device.browser','device.deviceCategory', 'device.operatingSystem', 'trafficSource.source']:\n            df[i + \"_\" + j] = df[i] + \"_\" + df[j]\n    \n    df['content.source'] = df['trafficSource.adContent'].astype(str) + \"_\" + df['source.country']\n    df['medium.source'] = df['trafficSource.medium'] + \"_\" + df['source.country']","87f51a07":"for feature in [\"totals.hits\", \"totals.pageviews\"]:\n    info = pd.concat([train, test], sort=False).groupby(\"fullVisitorId\")[feature].mean()\n    train[\"usermean_\" + feature] = train.fullVisitorId.map(info)\n    test[\"usermean_\" + feature] = test.fullVisitorId.map(info)\n    \nfor feature in [\"visitNumber\"]:\n    info = pd.concat([train, test], sort=False).groupby(\"fullVisitorId\")[feature].max()\n    train[\"usermax_\" + feature] = train.fullVisitorId.map(info)\n    test[\"usermax_\" + feature] = test.fullVisitorId.map(info)","1462a9cd":"excluded = ['date', 'fullVisitorId', 'sessionId', 'totals.transactionRevenue', 'visitId', 'visitStartTime', \n            'month', 'day', 'help']\n\ncat_cols = [f for f in train.columns if (train[f].dtype == 'object' and f not in excluded)]\nreal_cols = [f for f in train.columns if (not f in cat_cols and f not in excluded)]","4a85e287":"train[cat_cols].nunique()","bd63393e":"from sklearn.preprocessing import LabelEncoder\nfor col in cat_cols:\n    lbl = LabelEncoder()\n    lbl.fit(list(train[col].values.astype('str')) + list(test[col].values.astype('str')))\n    train[col] = lbl.transform(list(train[col].values.astype('str')))\n    test[col] = lbl.transform(list(test[col].values.astype('str')))","b7a6287b":"for col in real_cols:\n    train[col] = train[col].astype(float)\n    test[col] = test[col].astype(float)","df5bf925":"train[real_cols + cat_cols].head()","35a2327c":"for to_del in [\"date\", \"sessionId\", \"visitId\", \"day\"]:\n    del train[to_del]\n    del test[to_del]","f09b22c8":"excluded = ['date', 'fullVisitorId', 'sessionId', 'totals.transactionRevenue', 'visitId', 'visitStartTime', \"month\", \"help\"]\n\ncat_cols = [f for f in train.columns if (train[f].dtype == 'int64' and f not in excluded)]\nreal_cols = [f for f in train.columns if (not f in cat_cols and f not in excluded)]","29e92f83":"from sklearn.metrics import mean_squared_error\ndef score(data, y):\n    validation_res = pd.DataFrame(\n    {\"fullVisitorId\": data[\"fullVisitorId\"].values,\n     \"transactionRevenue\": data[\"totals.transactionRevenue\"].values,\n     \"predictedRevenue\": np.expm1(y)})\n\n    validation_res = validation_res.groupby(\"fullVisitorId\")[\"transactionRevenue\", \"predictedRevenue\"].sum().reset_index()\n    return np.sqrt(mean_squared_error(np.log1p(validation_res[\"transactionRevenue\"].values), \n                                     np.log1p(validation_res[\"predictedRevenue\"].values)))","86666370":"from sklearn.model_selection import GroupKFold\n\nclass KFoldValidation():\n    def __init__(self, data, n_splits=5):\n        unique_vis = np.array(sorted(data['fullVisitorId'].astype(str).unique()))\n        folds = GroupKFold(n_splits)\n        ids = np.arange(data.shape[0])\n        \n        self.fold_ids = []\n        for trn_vis, val_vis in folds.split(X=unique_vis, y=unique_vis, groups=unique_vis):\n            self.fold_ids.append([\n                    ids[data['fullVisitorId'].astype(str).isin(unique_vis[trn_vis])],\n                    ids[data['fullVisitorId'].astype(str).isin(unique_vis[val_vis])]\n                ])\n            \n    def validate(self, train, test, features, model, name=\"\", prepare_stacking=False, \n                 fit_params={\"early_stopping_rounds\": 50, \"verbose\": 100, \"eval_metric\": \"rmse\"}):\n        model.FI = pd.DataFrame(index=features)\n        full_score = 0\n        \n        if prepare_stacking:\n            test[name] = 0\n            train[name] = np.NaN\n        \n        for fold_id, (trn, val) in enumerate(self.fold_ids):\n            devel = train[features].iloc[trn]\n            y_devel = np.log1p(train[\"totals.transactionRevenue\"].iloc[trn])\n            valid = train[features].iloc[val]\n            y_valid = np.log1p(train[\"totals.transactionRevenue\"].iloc[val])\n                       \n            print(\"Fold \", fold_id, \":\")\n            model.fit(devel, y_devel, eval_set=[(valid, y_valid)], **fit_params)\n            \n            if len(model.feature_importances_) == len(features):  # some bugs in catboost?\n                model.FI['fold' + str(fold_id)] = model.feature_importances_ \/ model.feature_importances_.sum()\n\n            predictions = model.predict(valid)\n            predictions[predictions < 0] = 0\n            print(\"Fold \", fold_id, \" error: \", mean_squared_error(y_valid, predictions)**0.5)\n            \n            fold_score = score(train.iloc[val], predictions)\n            full_score += fold_score \/ len(self.fold_ids)\n            print(\"Fold \", fold_id, \" score: \", fold_score)\n            \n            if prepare_stacking:\n                train[name].iloc[val] = predictions\n                \n                test_predictions = model.predict(test[features])\n                test_predictions[test_predictions < 0] = 0\n                test[name] += test_predictions \/ len(self.fold_ids)\n                \n        print(\"Final score: \", full_score)\n        return full_score","4e73b6b1":"Kfolder = KFoldValidation(train)","9ab872e8":"lgbmodel = lgb.LGBMRegressor(n_estimators=1500, objective=\"regression\", metric=\"rmse\", num_leaves=31, min_child_samples=100,\n                      learning_rate=0.03, bagging_fraction=0.75, feature_fraction=0.55, bagging_frequency=6, \n                      bagging_seed=2019, subsample=.9, colsample_bytree=.9, use_best_model=True)","cf0b07a2":"Kfolder.validate(train, test, real_cols + cat_cols, lgbmodel, \"lgbpred\", prepare_stacking=True)","37934eb3":"lgbmodel.FI.mean(axis=1).sort_values()[:30].plot(kind=\"barh\")","a3544167":"def create_user_df(df):\n    agg_data = df[real_cols + cat_cols + ['fullVisitorId']].groupby('fullVisitorId').mean()\n    \n    pred_list = df[['fullVisitorId', 'lgbpred']].groupby('fullVisitorId').apply(lambda visitor_df: list(visitor_df.lgbpred))\\\n        .apply(lambda x: {'pred_'+str(i): pred for i, pred in enumerate(x)})\n    all_predictions = pd.DataFrame(list(pred_list.values), index=agg_data.index)\n    feats = all_predictions.columns\n\n    all_predictions['t_mean'] = all_predictions.mean(axis=1)\n    all_predictions['t_median'] = all_predictions.median(axis=1)   # including t_mean as one of the elements? well, ok\n    all_predictions['t_sum_log'] = all_predictions.sum(axis=1)\n    all_predictions['t_sum_act'] = all_predictions.fillna(0).sum(axis=1)\n    all_predictions['t_nb_sess'] = all_predictions.isnull().sum(axis=1)\n\n    full_data = pd.concat([agg_data, all_predictions], axis=1).astype(float)\n    full_data['fullVisitorId'] = full_data.index\n    del agg_data, all_predictions\n    gc.collect()\n    return full_data","683a6e4e":"user_train = create_user_df(train)\nuser_test = create_user_df(test)","3eca64ad":"features = list(user_train.columns)[:-1]  # don't include \"fullVisitorId\"\nuser_train[\"totals.transactionRevenue\"] = train[['fullVisitorId', 'totals.transactionRevenue']].groupby('fullVisitorId').sum()","440564b8":"for f in features:\n    if f not in user_test.columns:\n        user_test[f] = np.nan","1b5a0782":"Kfolder = KFoldValidation(user_train)","f2b78961":"lgbmodel = lgb.LGBMRegressor(n_estimators=1500, objective=\"regression\", metric=\"rmse\", num_leaves=31, min_child_samples=100,\n                      learning_rate=0.03, bagging_fraction=0.7, feature_fraction=0.55, bagging_frequency=6, \n                      bagging_seed=2019, subsample=.9, colsample_bytree=.9, use_best_model=True)","3deaf49b":"Kfolder.validate(user_train, user_test, features, lgbmodel, name=\"lgbfinal\", prepare_stacking=True)","56aa7ea1":"xgbmodel = xgb.XGBRegressor(max_depth=22, learning_rate=0.02, n_estimators=1000, \n                                         objective='reg:linear', gamma=1.45, seed=2019, silent=False,\n                                        subsample=0.67, colsample_bytree=0.054, colsample_bylevel=0.50)","6ca8ac07":"Kfolder.validate(user_train, user_test, features, xgbmodel, name=\"xgbfinal\", prepare_stacking=True)","f5dd58bd":"catmodel = cat.CatBoostRegressor(iterations=500, learning_rate=0.2, depth=5, random_seed=2019)","08f579ba":"Kfolder.validate(user_train, user_test, features, catmodel, name=\"catfinal\", prepare_stacking=True,\n                fit_params={\"use_best_model\": True, \"verbose\": 100})","0a36e6b8":"user_train['PredictedLogRevenue'] = 0.5 * user_train[\"lgbfinal\"] + \\\n                                    0.1 * user_train[\"xgbfinal\"] + \\\n                                    0.4 * user_train[\"catfinal\"]\nscore(user_train, user_train.PredictedLogRevenue)","8a404096":"user_test['PredictedLogRevenue'] = 0.5 * user_test[\"lgbfinal\"] +  0.4 * user_test[\"catfinal\"] + 0.1 * user_test[\"xgbfinal\"]\nuser_test[['PredictedLogRevenue']].to_csv('leak_check_submission.csv', index=True)","47cd1c72":"# Encoding features","de518d27":"Make one user one object:\n* all features are averaged\n* we hope, that categorical features do not change for one user (that's not true :\/ )\n* categoricals labels are averaged (!!!) and are treated as numerical features (o_O)\n* predictions are averaged in multiple ways...","f6d1777b":"Clearing rare categories and setting 0 to NaNs:","5ec3e694":"# Preparing validation","ee9ce74c":"Paired categories from \"teach-lightgbm-to-sum-predictions\" kernel","7f09550d":"# User-level","196bea57":"Suspicious simultaneous visitors with same visitorId and same visitStartTime:","89fdba1c":"Based on strange things in dataset:","47a69513":"Basic time features:","2cfa01cf":"Some pictures to have in mind: target distribution","9a966c3b":"User-aggregating features:","3a42f3b3":"# Features","a4b83628":"# Meta-models","efbbf1a8":"Seems to be a serious problem:","53510156":"# Preprocessing","c9200a6a":"Cute function to validate and prepare stacking","57c16d98":"Looking to future features (from https:\/\/www.kaggle.com\/ashishpatel26\/future-is-here):","36db4b52":"# Loading data","d6a715ed":"Comparing categories in train and test:","997a5078":"# Ensembling dragons","9db8f28a":"Key problem:","29aa5609":"# Looking around","4e863500":"VisitStartTime seems to be same thing as visitId... yet not always!","0cc08005":"# Used in this kernel:\n* preprocessed dataset by olivier https:\/\/www.kaggle.com\/ogrellier\/create-extracted-json-fields-dataset\n* exported google analytics data https:\/\/www.kaggle.com\/satian\/exported-google-analytics-data\n\n\n* story of a leak v.01 https:\/\/www.kaggle.com\/igauty\/story-of-a-leak-v01\n* future is here https:\/\/www.kaggle.com\/ashishpatel26\/future-is-here\n* teach-lightgbm-to-sum-predictions https:\/\/www.kaggle.com\/satian\/story-of-a-leak\/notebook\n* Thanks for karkun : https:\/\/www.kaggle.com\/karkun\/sergey-ivanov-msu-mmp\/\n\n\nThe code below is full of bugs, which I didn't remove as they seem to improve LB.","02d495e9":"Weird \"double\" sessions:","2da778f0":"Function to tell us the score using the metric we actually care about","f2d8fc13":"Setting time as index and saving time as feature (for FE purposes only)"}}