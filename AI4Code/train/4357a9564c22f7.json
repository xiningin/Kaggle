{"cell_type":{"e3fb81a6":"code","9d6f08da":"code","c18cde88":"code","3fa55f87":"code","35f4dc48":"code","29aaa3a6":"code","67791afb":"code","dd2e4e19":"code","bbc2470d":"code","f12bc028":"code","0949cb15":"code","b523fc42":"code","f10b6a0b":"code","3e3c1f05":"code","b93fe23e":"code","b621f11c":"code","bae99eda":"code","00cf5ce3":"code","5e259b27":"markdown","8597c28f":"markdown","f3fcd9a1":"markdown","0cc73d1d":"markdown","50cec373":"markdown"},"source":{"e3fb81a6":"# for some basic operations\nimport numpy as np \nimport pandas as pd \n\n# for basic visualizations\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# for network visualizations\nimport networkx as nx","9d6f08da":"edgelist = [['Mannheim', 'Frankfurt', 85], ['Mannheim', 'Karlsruhe', 80], ['Erfurt', 'Wurzburg', 186], ['Munchen', 'Numberg', 167], ['Munchen', 'Augsburg', 84], ['Munchen', 'Kassel', 502], ['Numberg', 'Stuttgart', 183], ['Numberg', 'Wurzburg', 103], ['Numberg', 'Munchen', 167], ['Stuttgart', 'Numberg', 183], ['Augsburg', 'Munchen', 84], ['Augsburg', 'Karlsruhe', 250], ['Kassel', 'Munchen', 502], ['Kassel', 'Frankfurt', 173], ['Frankfurt', 'Mannheim', 85], ['Frankfurt', 'Wurzburg', 217], ['Frankfurt', 'Kassel', 173], ['Wurzburg', 'Numberg', 103], ['Wurzburg', 'Erfurt', 186], ['Wurzburg', 'Frankfurt', 217], ['Karlsruhe', 'Mannheim', 80], ['Karlsruhe', 'Augsburg', 250],[\"Mumbai\", \"Delhi\",400],[\"Delhi\", \"Kolkata\",500],[\"Kolkata\", \"Bangalore\",600],[\"TX\", \"NY\",1200],[\"ALB\", \"NY\",800]]\n","c18cde88":"# Undirected Graphs\n'''\n['bipartite_layout',\n 'circular_layout',\n 'kamada_kawai_layout',\n 'random_layout',\n 'rescale_layout',\n 'shell_layout',\n 'spring_layout',\n 'spectral_layout',\n 'fruchterman_reingold_layout']\n '''\ng = nx.Graph()\nfor edge in edgelist:\n    g.add_edge(edge[0],edge[1], weight = edge[2])\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nplt.rcParams['figure.figsize'] = (11, 11)\n#plt.style.use('fivethirtyeight')\n\npos = nx.spring_layout(g)\n\n# drawing nodes\nnx.draw_networkx(g,pos)\n#plt.title('Undirected Graphs', fontsize = 20)\nplt.axis('off')\nplt.show()","3fa55f87":"for i, x in enumerate(nx.connected_components(g)):\n    print(\"cc\"+str(i)+\":\",x)","35f4dc48":"print(nx.shortest_path(g, 'Stuttgart','Frankfurt',weight='weight'))\nprint(nx.shortest_path_length(g, 'Stuttgart','Frankfurt',weight='weight'))\n","29aaa3a6":"for x in nx.all_pairs_dijkstra_path(g,weight='weight'):\n    print(x)","67791afb":"nx.draw_networkx(nx.minimum_spanning_tree(g))","dd2e4e19":"import os\nprint(os.listdir('..\/input\/'))","bbc2470d":"# reading the dataset\n\nfb = nx.read_edgelist('..\/input\/facebook-combined.txt', create_using = nx.Graph(), nodetype = int)","f12bc028":"print(nx.info(fb))","0949cb15":"pos = nx.spring_layout(fb)\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nplt.style.use('fivethirtyeight')\nplt.rcParams['figure.figsize'] = (20, 15)\nplt.axis('off')\nnx.draw_networkx(fb, pos, with_labels = False, node_size = 35)\nplt.show()","b523fc42":"pagerank = nx.pagerank(fb)","f10b6a0b":"import operator\nsorted_pagerank = sorted(pagerank.items(), key=operator.itemgetter(1),reverse=True)\nprint(sorted_pagerank[:5])","3e3c1f05":"first_degree_connected_nodes = list(fb.neighbors(3437))\nsecond_degree_connected_nodes = []\nfor x in first_degree_connected_nodes:\n    second_degree_connected_nodes+=list(fb.neighbors(x))\nsecond_degree_connected_nodes.remove(3437)\nsecond_degree_connected_nodes = list(set(second_degree_connected_nodes))\n\nsubgraph_3437 = nx.subgraph(fb,first_degree_connected_nodes+second_degree_connected_nodes,)\n","b93fe23e":"pos = nx.spring_layout(subgraph_3437)","b621f11c":"import warnings\nwarnings.filterwarnings('ignore')\nnode_color = ['yellow' if v == 3437 else 'red' for v in subgraph_3437]\nnode_size =  [1000 if v == 3437 else 35 for v in subgraph_3437]\nplt.style.use('fivethirtyeight')\nplt.rcParams['figure.figsize'] = (20, 15)\nplt.axis('off')\n\nnx.draw_networkx(subgraph_3437, pos, with_labels = False, node_color=node_color,node_size=node_size )\nplt.show()","bae99eda":"pos = nx.spring_layout(subgraph_3437)\nbetweennessCentrality = nx.betweenness_centrality(subgraph_3437,normalized=True, endpoints=True)","00cf5ce3":"node_size =  [v * 10000 for v in betweennessCentrality.values()]\nplt.figure(figsize=(20,20))\nnx.draw_networkx(subgraph_3437, pos=pos, with_labels=False,\n                 node_size=node_size )\nplt.axis('off')","5e259b27":"# 3. Minimum Spanning Tree","8597c28f":"# 5. Centrality","f3fcd9a1":"# 4. Pagerank","0cc73d1d":"# 1. Connected Component","50cec373":"# 2. Shortest paths"}}