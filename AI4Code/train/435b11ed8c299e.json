{"cell_type":{"c95b7873":"code","aec8e67e":"code","4ea3741d":"code","9eafa5b1":"code","2be01b0c":"code","e8aed7e4":"code","6936ff66":"code","1fa44375":"code","8da9a06d":"code","b616ae9f":"markdown","e78b1747":"markdown","bb053168":"markdown","917c8798":"markdown","bbe84bc9":"markdown","aee9c31d":"markdown"},"source":{"c95b7873":"import numpy as np\nimport pandas as pd\n\ndf = pd.read_csv('..\/input\/israeli-elections-2015-2013\/votes per booth 2019b.csv', encoding='iso-8859-8')\ndf.head()","aec8e67e":"new_supervision_fields = ['\u05d1\u05e8\u05d6\u05dc', '\u05e1\u05de\u05dc \u05d5\u05e2\u05d3\u05d4', '\u05e9\u05d5\u05e4\u05d8', '\u05e8\u05d9\u05db\u05d5\u05d6']\nmetadata_columns = ['\u05d1\u05d6\u05d1', '\u05de\u05e6\u05d1\u05d9\u05e2\u05d9\u05dd', '\u05e4\u05e1\u05d5\u05dc\u05d9\u05dd', '\u05db\u05e9\u05e8\u05d9\u05dd']\n\ndf.drop(new_supervision_fields+metadata_columns+['\u05e1\u05de\u05dc \u05d9\u05e9\u05d5\u05d1'], axis=1, inplace=True)\n\ndf.set_index(['\u05e9\u05dd \u05d9\u05e9\u05d5\u05d1', '\u05e7\u05dc\u05e4\u05d9'], inplace=True)\ndf.head()","4ea3741d":"print('dropping parties with zero votes: ' + str(df.columns[df.sum()==0]))\ndf.drop(df.columns[df.sum()==0], axis=1, inplace=True)\n\nprint('dropping ballots with zero legit votes: ' +str(df.index[df.sum(axis=1)==0]))\ndf.drop(df.index[df.sum(axis=1)==0], axis=0, inplace=True)","9eafa5b1":"party_sizes = df.sum().div(df.sum().sum())\nprint(party_sizes.sort_values(ascending=False).round(2))\nmajor_parties = party_sizes.index[party_sizes>0.01].to_list()","2be01b0c":"import sklearn\nfrom sklearn.decomposition import PCA\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\n\nnormalized_votes=df.div(df.sum(axis=1), axis=0) \n\npca=PCA(n_components=2)\nK=7; \nk_means = KMeans(n_clusters=K, max_iter=100).fit(normalized_votes)\n\ntransformed_votes=pca.fit_transform(normalized_votes)\ncluster_centers = pca.transform(k_means.cluster_centers_)","e8aed7e4":"df_for_plot = pd.DataFrame(transformed_votes, columns=['x','y']).join(pd.Series(k_means.labels_, name='label'))\nax = df_for_plot.plot.scatter('x','y',c='label', figsize=(16,12), cmap='jet', style='.', s=3, grid=True)\n\npd.DataFrame(cluster_centers).plot.scatter(0,1,ax=ax, c='black', s=60, grid=True)\n\nfor cluster_label, cluster_center in enumerate(cluster_centers):\n    plt.text(cluster_center[0], cluster_center[1] ,r' Cluster '+str(cluster_label), fontsize=16)","6936ff66":"cluster_sizes = pd.DataFrame.from_dict({'votes': df.sum(axis=1), 'cluster': k_means.labels_}).groupby('cluster').sum()\ncluster_sizes = cluster_sizes.div(cluster_sizes.sum()).round(2)\n\nclusters_df = pd.DataFrame(columns = df.columns, data=k_means.cluster_centers_)\nclusters_df['size'] = cluster_sizes\nclusters_df[['size'] + major_parties].round(2)","1fa44375":"import networkx as nx\nfrom community import best_partition # --> http:\/\/perso.crans.org\/aynaud\/communities\/\n\nG=nx.Graph(normalized_votes.corr()>0)\nG=nx.relabel_nodes(G,dict(zip(G.nodes(),[x[::-1] for x in normalized_votes.columns])))\ncommunities=best_partition(G)\nnum_communities = len(set(communities.values()))\n\ncommunity_colors={x: x\/(num_communities-1) for x in range(num_communities)}\nnode_coloring=[community_colors[communities[node]] for node in G.nodes()]\n\nnx.pos=nx.fruchterman_reingold_layout(G, dim=2, k=None, pos=None, fixed=None, iterations=5000, weight='weight', scale=1.0, center=None)\n\nnx.draw_networkx(G, cmap=plt.get_cmap('jet'), with_labels=True, node_color=node_coloring,font_size=16)\nplt.title('Party correlation network and community partition (all parties)', fontsize=22)\nfig = plt.gcf()\nfig.set_size_inches(18.5, 10.5)","8da9a06d":"major_party_votes=normalized_votes[major_parties]\n\nG=nx.Graph(major_party_votes.corr()>0)\nG=nx.relabel_nodes(G,dict(zip(G.nodes(),[x[::-1] for x in major_parties])))\ncommunities=best_partition(G)\n\ncommunity_colors={0:0,1:0.2,2:0.5,3:0.7,4:0.9}\nnode_coloring=[community_colors[communities[node]] for node in G.nodes()]\n\nnx.pos=nx.fruchterman_reingold_layout(G, dim=2, k=None, pos=None, fixed=None, iterations=5000, weight='weight', scale=1.0, center=None)\n\nnx.draw_networkx(G, cmap=plt.get_cmap('jet'), with_labels=True, node_color=node_coloring,font_size=30)\nplt.title('Party correlation network and community partition (major parties)', fontsize=22)\nfig = plt.gcf()\nfig.set_size_inches(18.5, 10.5)","b616ae9f":"# Partitioning the booths into different clusters using K-Means, and plotting them on a 2-D plot using PCA\nInspired by [This analysis of the 2013 elections (Hebrew)](http:\/\/https:\/\/sadnadearaa.blogspot.co.il\/2013\/01\/blog-post_24.html) <br>\nNote that we analyze the partition of votes per booth, to account for booths with different sizes <br>\nThe top 5 parties is each cluster is shown. <br>\nK=7 was chosen because it is possible to see all clusters clearly in a 2-D plot.","e78b1747":"# Reading the data\nKeeping only the votes per party. The previous columns are the settlement names, etc <br>\nDropping booths with zero votes","bb053168":"### The network clearly shows Yisrael Beitenu as a central party, separating two distinct 'left' and 'right' clusters, and the Joint List (the Arab party) disjoint from all other major parties.","917c8798":"# Showing the correlation plot between parties. \n## Each node corresponds to a party, and an edge between parties corresponds to positive correlation between the fraction of votes for those two parties.\nNo threshold is taken for the correlation (at this phase). <br> \nParties are partitioned into communities, maximizing connections inside a community and minimizing connections between nodes from different communities.","bbe84bc9":"# Correlation between major parties\nWe now consider only the major parties, which recieved a significant (over 2%) of total votes, and show the correlation network between those.","aee9c31d":"### Evidently, the following clusters are:\n1. Cluster 1: Arab party"}}