{"cell_type":{"c20184c6":"code","6f7554df":"code","7712e332":"code","c6a73eae":"code","007d7929":"code","0ccbb771":"code","4b570e97":"code","9019c85b":"code","6aa289fa":"code","a020f3d0":"code","d4c373f2":"code","15fdb37c":"code","b173c534":"code","2095509a":"code","596a92e9":"code","600be4f3":"code","649aeae3":"code","f2645764":"code","ab9be1ca":"code","a281f8db":"code","7500f242":"code","97251a4e":"code","274e5643":"code","232a3b90":"code","b9c5abd1":"code","95add72c":"code","64446777":"code","92d8d40a":"code","30a65dbb":"code","31535245":"code","54b2adc2":"code","fd55fe61":"code","0ce02e60":"markdown","4eabbafa":"markdown"},"source":{"c20184c6":"!pip install googletrans","6f7554df":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7712e332":"data=pd.read_csv(\"..\/input\/contradictory-my-dear-watson\/train.csv\")\ndata.head()","c6a73eae":"## check sentences with less than 5 characters\n\nfor i in range(len(data)):\n    if len(data[\"premise\"][i])<5 or len(data[\"hypothesis\"][i])<5:\n        print(data[\"premise\"][i]+ \">>\"+ data[\"hypothesis\"][i])","007d7929":"## check max avg and min len of sentences\npremise=[]\nhypothesis=[]\n\nfor i in range(len(data)):\n    premise.append(len(data[\"premise\"][i]))\n    hypothesis.append(len(data[\"hypothesis\"][i]))\n    \nprint(\"Average len of characters in premise\",sum(premise)\/\/len(premise))\nprint(\"Maximum len of characters in premise\",max(premise))\nprint(\"Minimum len of characters in premise\",min(premise),end=\"\\n\\n\")\n\nprint(\"Average len of characters in hypothesis\",sum(hypothesis)\/\/len(hypothesis))\nprint(\"Maximum len of characters in hypothesis\",max(hypothesis))\nprint(\"Minimum len of characters in hypothesis\",min(hypothesis))\n\n","0ccbb771":"language_data=pd.DataFrame(data[\"language\"].value_counts()).reset_index().rename(columns={\"index\":\"language\",\"language\":\"counts\"})","4b570e97":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\n\nplt.figure(figsize=(20,5))\n\nsns.set(style=\"whitegrid\")\nax = sns.barplot(x=language_data[\"language\"], y=language_data[\"counts\"])","9019c85b":"languages4plot=[]\nPercentage=[]\nfor ind in range(len(language_data)):\n    Percentage.append(round((language_data[\"counts\"][ind]\/sum(language_data[\"counts\"]))*100,2))\n    languages4plot.append(language_data['language'][ind])","6aa289fa":"explode=np.random.uniform(0,0,len(Percentage))\nplt.figure(figsize=(10,10))\nplt.pie(Percentage, explode=explode, labels=languages4plot, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()\nplt.savefig(\"unbalanced_data.png\")","a020f3d0":"lang_abv=set(data[\"lang_abv\"])\nlang_abv","d4c373f2":"english_data=data[data[\"lang_abv\"]==\"en\"]\nenglish_data.sample(frac=1)","15fdb37c":"from googletrans import Translator\nimport googletrans\ntranslator=Translator()","b173c534":"googletrans.LANGUAGES","2095509a":"set(lang_abv)-set(googletrans.LANGUAGES.keys())","596a92e9":"set(data[\"language\"])","600be4f3":"all_df=[]\nenglish_index=set(english_data.sample(frac=1).index)\nfor lang in lang_abv:\n    print(len(english_index))\n    print(lang)\n    lang_data=data[data[\"lang_abv\"]==lang]\n    if lang==\"en\":\n        balance_num=808\n    else:\n        balance_num=808-len(lang_data)\n        \n    required_ind=list(english_index)[:balance_num]\n    lang_english_data=data.iloc[required_ind]\n    premise=[]\n    hypothesis=[]\n    lang_abv_list=[]\n    \n    if lang==\"en\":\n        all_df.append(lang_english_data)\n        \n    else:\n    \n        for i in lang_english_data.index:\n            if lang==\"zh\":\n                lang=\"zh-cn\"\n    #         print(lang_english_data[\"premise\"][i],lang)\n            try:\n\n                premise_trans=translator.translate(lang_english_data[\"premise\"][i],dest=lang).text\n\n                hypothesis_trans=translator.translate(lang_english_data[\"hypothesis\"][i],dest=lang).text\n\n                lang_abv_list.append(lang)\n\n            except:\n                premise_trans=lang_english_data[\"premise\"][i]\n                hypothesis_trans=lang_english_data[\"hypothesis\"][i]\n                lang_abv_list.append(\"en\")\n\n\n            premise.append(premise_trans)\n            hypothesis.append(hypothesis_trans)\n\n\n        lang_english_data[\"premise\"]=premise\n        lang_english_data[\"hypothesis\"]=hypothesis\n        lang_english_data['lang_abv']=lang_abv_list\n\n        all_df.append(pd.concat([lang_english_data,lang_data]))\n\n    \n    english_index=english_index-set(list(english_index)[:balance_num])\n\n","649aeae3":"balanced_df=pd.concat(all_df)","f2645764":"google_language=googletrans.LANGUAGES","ab9be1ca":"language_list=[]\n\nfor lang in balanced_df[\"lang_abv\"]:\n    if lang==\"zh\" or lang==\"zh-cn\":\n        language_list.append(\"chinease\")\n    else:\n        language_list.append(google_language[lang])\n    ","a281f8db":"balanced_df[\"language\"]=language_list","7500f242":"balanced_df.reset_index(drop=True, inplace=True)","97251a4e":"balanced_df.to_csv(\"balanced_data.csv\",index=False)","274e5643":"language_abbr=list(balanced_df[\"language\"].value_counts().index)\npercentage=[round((i\/sum(balanced_df[\"language\"].value_counts().values))*100,2) for i in balanced_df[\"language\"].value_counts().values]","232a3b90":"explode=np.random.uniform(0,0,len(percentage))\nplt.figure(figsize=(10,10))\nplt.pie(percentage, explode=explode, labels=language_abbr, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()\nplt.savefig(\"balanced.png\")","b9c5abd1":"from transformers import BertTokenizer, TFBertModel\ntokenizer = BertTokenizer.from_pretrained('bert-base-multilingual-cased')\n","95add72c":"tokenize_premise=[]\ntokenize_hypothesis=[]\nlanguages=[]\n\nfor ind in range(len(balanced_df)):\n    tokenize_premise.append(len(list(tokenizer.tokenize(balanced_df[\"premise\"][ind], return_tensors=\"tf\"))))\n    tokenize_hypothesis.append(len(list(tokenizer.tokenize(balanced_df[\"hypothesis\"][ind], return_tensors=\"tf\"))))\n    languages.append(balanced_df[\"language\"][ind])\n    ","64446777":"print(\"Average len of premise\",sum(tokenize_premise)\/\/len(tokenize_premise))\nprint(\"Maximum len of premise\",max(tokenize_premise))\nprint(\"Minimum len of premise\",min(tokenize_premise),end=\"\\n\\n\")\n\nprint(\"Average len of hypothesis\",sum(tokenize_hypothesis)\/\/len(tokenize_hypothesis))\nprint(\"Maximum len of hypothesis\",max(tokenize_hypothesis))\nprint(\"Minimum len of hypothesis\",min(tokenize_hypothesis))","92d8d40a":"plt.figure(figsize=(20,5))\n\nsns.set(style=\"whitegrid\")\nax = sns.scatterplot(x=languages, y=tokenize_premise)","30a65dbb":"plt.figure(figsize=(20,5))\n\nsns.set(style=\"whitegrid\")\nax = sns.scatterplot(x=languages, y=tokenize_hypothesis)","31535245":"X_data=data[[\"premise\", \"hypothesis\"]]\nY_data=data[\"label\"]","54b2adc2":"count_df=pd.DataFrame(Y_data.value_counts()).reset_index().rename(columns={\"index\":\"label\",\"label\":\"counts\"})\nlabels=list(count_df[\"label\"])\nsizes=[(i\/len(Y_data))*100 for i in count_df[\"counts\"]]\nexplode = (0, 0.1, 0)","fd55fe61":"plt.figure(figsize=(10,5))\nplt.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()","0ce02e60":"Average Sentence length for hypothesis","4eabbafa":"Here is the plot of average length of the Sentences according the the languages for premise column"}}