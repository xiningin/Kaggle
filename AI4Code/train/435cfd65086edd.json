{"cell_type":{"9eef28e8":"code","b260758d":"code","538f101c":"code","a525525a":"code","f976c4fa":"code","7c2a58b8":"code","f82500dd":"code","8b07ca84":"markdown","23d10012":"markdown","62d0a818":"markdown","f4db17fa":"markdown","9bf512f2":"markdown","aceb64d2":"markdown","4f244c43":"markdown","be2ca82c":"markdown"},"source":{"9eef28e8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # drawing graph\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","b260758d":"train_df = pd.read_csv('\/kaggle\/input\/learn-together\/train.csv')\nprint(\"Size of Train dataframe is: {}\".format(train_df.shape))\ntest_df =  pd.read_csv('\/kaggle\/input\/learn-together\/test.csv')\nprint(\"Size of Test dataframe is: {}\".format(test_df.shape))","538f101c":"def Diff(a,b):\n    return(list(set(a)-set(b)))\n\ntrain = train_df.columns\ntest = test_df.columns\ntarget = Diff(train,test)\nprint('The target is',target[0])","a525525a":"categories = train_df[target[0]].unique()\nval = []\nfor i in categories:\n    temp = len(train_df[train_df[target[0]]==i])\n    val.append(temp)\nlabels=categories\nsizes=val\ncolors=['green','red','orange','blue','darkorange','grey','pink']\nplt.axis('equal')\nplt.title('target classes distribution')\nplt.pie(sizes, explode=(0,0,0,0,0,0,0), labels=labels,colors=colors,autopct='%1.2f%%', shadow=True, startangle=90)\nplt.show()                        ","f976c4fa":"print('We have following categorical features:')\nprint()\ncat = []\ncont = []\nfor i in test[1:]:\n    temp1 = train_df[i].unique()\n    temp2 = test_df[i].unique()\n    if len(temp1) == len(temp2):\n        print(i,':',len(temp1),'unique values')\n        cat.append(i)\n    else:\n        cont.append(i)\nprint()\nprint('And we have',len(cont), 'of following continuous features:') \nprint(cont)","7c2a58b8":"train_df[cont].hist(bins=20, figsize=(15,15), color = 'orange')\nplt.suptitle(\"Histogram for each train numeric input variable\")\nplt.show()","f82500dd":"test_df[cont].hist(bins=20, figsize=(15,15), color = 'darkorange')\nplt.suptitle(\"Histogram for each test numeric input variable\")\nplt.show()","8b07ca84":"# Where is the target?\n\nSimple, this is the only column present in the train dataset and absent from the test set.","23d10012":"# Value distributions of continuous features in test dataset:","62d0a818":"We see that target distribution is perfectly balanced.\n\n# Now, let' look at Data categories:\n\nThere are several methods to detect categorical data...\nHere i simply look at the amount of unique values if we have have the same unique values in the same train and test column, this is a categorical feature. If not, it's a continuous feature.  ","f4db17fa":"# To be continued...","9bf512f2":"# Let's see the target distribution:\n\nIn the train dataset, we can identify 7 classes (labels from 1 to 7).","aceb64d2":"# First step, we start with a quick look at the datasets:","4f244c43":"# Value distributions of continuous features in train dataset:","be2ca82c":"# Here is my quick EDA approach that can be reused for any tabular dataset.\n"}}