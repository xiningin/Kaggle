{"cell_type":{"e7b6739f":"code","98c76ed6":"code","f6122f78":"code","23b5b7fa":"code","dea98fee":"code","dcb14236":"code","1955f6e9":"code","9d3761ea":"markdown","7983f41f":"markdown","1f144d60":"markdown","7f740d96":"markdown","ce09796c":"markdown","2c37ec83":"markdown"},"source":{"e7b6739f":"# You can edit the font size here to make rendered text more comfortable to read\n# It was built on a 13\" retina screen with 18px\nfrom IPython.core.display import display, HTML\ndisplay(HTML(\"<style>.rendered_html { font-size: 18px; }<\/style>\"))\n\n# we'll also use this package to read tables\n# it's generally useful for astrophysics work, including this challenge\n# so we'd suggest installing it, even if you elect to work with pandas\nfrom astropy.table import Table","98c76ed6":"import os\nimport numpy as np\nimport scipy.stats as spstat\nimport matplotlib.pyplot as plt\nfrom collections import OrderedDict\n\n%matplotlib inline\n\nfrom gatspy.periodic import LombScargleMultiband","f6122f78":"class LightCurve(object):\n    '''Light curve object for PLAsTiCC formatted data'''\n    \n    _passbands = OrderedDict([(0,'C4'),\\\n                              (1,'C2'),\\\n                              (2,'C3'),\\\n                              (3,'C1'),\\\n                              (4,'k'),\\\n                              (5,'C5')])\n    \n    _pbnames = ['u','g','r','i','z','y']\n    \n    #def __init__(self, filename):\n    def __init__(self, fluxDF):\n        '''Read in light curve data'''\n\n        #self.DFlc     = Table.read(filename, format='ascii.csv')\n        self.DFlc     = fluxDF\n        #self.filename = filename.replace('.csv','')\n        self._finalize()\n     \n    # this is some simple code to demonstrate how to calculate features on these multiband light curves\n    # we're not suggesting using these features specifically\n    # there also might be additional pre-processing you do before computing anything\n    # it's purely for illustration\n    def _finalize(self):\n        '''Store individual passband fluxes as object attributes'''\n        # in this example, we'll use the weighted mean to normalize the features\n        weighted_mean = lambda flux, dflux: np.sum(flux*(flux\/dflux)**2)\/np.sum((flux\/dflux)**2)\n        \n        # define some functions to compute simple descriptive statistics\n        normalized_flux_std = lambda flux, wMeanFlux: np.std(flux\/wMeanFlux, ddof = 1)\n        normalized_amplitude = lambda flux, wMeanFlux: (np.max(flux) - np.min(flux))\/wMeanFlux\n        normalized_MAD = lambda flux, wMeanFlux: np.median(np.abs((flux - np.median(flux))\/wMeanFlux))\n        beyond_1std = lambda flux, wMeanFlux: sum(np.abs(flux - wMeanFlux) > np.std(flux, ddof = 1))\/len(flux)\n        \n        for pb in self._passbands:\n            ind = self.DFlc['passband'] == pb\n            pbname = self._pbnames[pb]\n            \n            if len(self.DFlc[ind]) == 0:\n                setattr(self, f'{pbname}Std', np.nan)\n                setattr(self, f'{pbname}Amp', np.nan)\n                setattr(self, f'{pbname}MAD', np.nan)\n                setattr(self, f'{pbname}Beyond', np.nan)\n                setattr(self, f'{pbname}Skew', np.nan)\n                continue\n            \n            f  = self.DFlc['flux'][ind]\n            df = self.DFlc['flux_err'][ind]\n            m  = weighted_mean(f, df)\n            \n            # we'll save the measurements in each passband to simplify access.\n            setattr(self, f'{pbname}Flux', f)\n            setattr(self, f'{pbname}FluxUnc', df)\n            setattr(self, f'{pbname}Mean', m)\n            \n            # compute the features\n            std = normalized_flux_std(f, df)\n            amp = normalized_amplitude(f, m)\n            mad = normalized_MAD(f, m)\n            beyond = beyond_1std(f, m)\n            skew = spstat.skew(f) \n            \n            # and save the features\n            setattr(self, f'{pbname}Std', std)\n            setattr(self, f'{pbname}Amp', amp)\n            setattr(self, f'{pbname}MAD', mad)\n            setattr(self, f'{pbname}Beyond', beyond)\n            setattr(self, f'{pbname}Skew', skew)\n        \n        # we can also construct features between passbands\n        pbs = list(self._passbands.keys())\n        for i, lpb in enumerate(pbs[0:-1]):\n            rpb = pbs[i+1]\n            \n            lpbname = self._pbnames[lpb]\n            rpbname = self._pbnames[rpb]\n            \n            colname = '{}Minus{}'.format(lpbname, rpbname.upper())\n            lMean = getattr(self, f'{lpbname}Mean', np.nan)\n            rMean = getattr(self, f'{rpbname}Mean', np.nan)\n            col = -2.5*np.log10(lMean\/rMean) if lMean> 0 and rMean > 0 else -999\n            setattr(self, colname, col)\n    \n    def plot_multicolor_lc(self, target_id=None):\n        '''Plot the multiband light curve'''\n        \n        # Lomb-Scargle\n        model = LombScargleMultiband(fit_period=True)\n        # we'll window the search range by setting minimums and maximums here\n        # but in general, the search range you want to evaluate will depend on the data\n        # and you will not be able to window like this unless you know something about\n        # the class of the object a priori\n        t_min = max(np.median(np.diff(sorted(self.DFlc['mjd']))), 0.1)\n        t_max = min(10., (self.DFlc['mjd'].max() - self.DFlc['mjd'].min())\/2.)\n        \n        model.optimizer.set(period_range=(t_min, t_max), first_pass_coverage=5)\n        model.fit(self.DFlc['mjd'], self.DFlc['flux'], dy=self.DFlc['flux_err'], filts=self.DFlc['passband'])\n        period = model.best_period\n        obj_id = self.DFlc['object_id'][0] # object ID\n        print(f'object ID: {obj_id} has a period of {period} days')\n        \n        phase = (self.DFlc['mjd'] \/period) % 1\n        \n        #fig, ax = plt.subplots(figsize=(8,6))\n        fig, (ax, ax2) = plt.subplots(ncols=2, figsize=(16,6))\n\n        #if phase is None:\n        #    phase = []\n        #if len(phase) != len(self.DFlc):\n        #    phase = self.DFlc['mjd']\n        #    xlabel = 'MJD'\n        #else:\n        #    xlabel = 'Phase'\n          \n        for i, pb in enumerate(self._passbands):\n            pbname = self._pbnames[pb]\n            ind = self.DFlc['passband'] == pb\n            if len(self.DFlc[ind]) == 0:\n                continue\n            # errorbar: plot y versus x as lines and\/or markers with attached errorbars\n            #ax.errorbar(phase[ind], \n            #         self.DFlc['flux'][ind],\n            #         self.DFlc['flux_err'][ind],\n            #         fmt = 'o', color = self._passbands[pb], label = f'{pbname}')\n            ax.errorbar(self.DFlc['mjd'][ind], \n                     self.DFlc['flux'][ind],\n                     self.DFlc['flux_err'][ind],\n                     fmt = 'o', color = self._passbands[pb], label = f'{pbname}')\n            ax2.errorbar(phase[ind], \n                     self.DFlc['flux'][ind],\n                     self.DFlc['flux_err'][ind],\n                     fmt = 'o', color = self._passbands[pb], label = f'{pbname}')\n        ax.legend(ncol = 4, frameon = True)\n        #ax.set_xlabel(f'{xlabel}', fontsize='large')\n        ax.set_xlabel('MJD', fontsize='large')\n        ax.set_ylabel('Flux', fontsize='large')\n        ax2.legend(ncol = 4, frameon = True)\n        ax2.set_xlabel('Phase', fontsize='large')\n        ax2.set_ylabel('Flux', fontsize='large')\n        #fig.suptitle(self.filename, fontsize='x-large')\n        fig.suptitle('object ID: ' + str(self.DFlc['object_id'][0]) + ', target ID: ' + str(target_id), fontsize='x-large') # graph title = object ID\n        fig.tight_layout(rect=[0, 0, 1, 0.97])\n    \n    def get_features(self):\n        '''Return all the features for this object'''\n        variables = ['Std', 'Amp', 'MAD', 'Beyond', 'Skew']\n        feats = []\n        for i, pb in enumerate(self._passbands):\n            pbname = self._pbnames[pb]\n            feats += [getattr(self, f'{pbname}{x}', np.nan) for x in variables]\n        return feats","23b5b7fa":"trainfilename = '..\/input\/PLAsTiCC-2018\/training_set.csv'\ntrain = Table.read(trainfilename, format='csv')\ntrain","dea98fee":"# read a sample object data\nobj_id = train['object_id'][0]\nfluxDF = train[train['object_id'] == obj_id]\nfluxDF","dcb14236":"lc = LightCurve(fluxDF)\nlc.plot_multicolor_lc()","1955f6e9":"trainmetafilename = '..\/input\/PLAsTiCC-2018\/training_set_metadata.csv'\ntrain_meta = Table.read(trainmetafilename, format='csv')\n# set: remove duplicated object_id\n# list: change type to list\ntarget_list = list(set(train_meta['target']))\nall_obj_id_list = []\n\n# create a list: object IDs which has same target ID\nfor target_id in target_list:\n    #print(train_meta[train_meta['target'] == target_id]['object_id'])\n    all_obj_id_list.append(train_meta[train_meta['target'] == target_id]['object_id'])\n    \nfor i in range(len(all_obj_id_list)):\n#for i in range(2):\n    print('********* target ID: ' + str(target_list[i]) + ' *********')\n    each_obj_id_list = all_obj_id_list[i]\n    print('********* ' + str(len(each_obj_id_list)) + ' objects in target type ' + str(target_list[i]) + ' *********')\n    # WARNING: this takes very long time...\n    #for j in range(len(each_obj_id_list)):\n    for j in range(10):\n        obj_id = each_obj_id_list[j]\n        print ('****** object ID: ' + str(obj_id) + ' ******')\n        fluxDF = train[train['object_id'] == obj_id]\n        lc = LightCurve(fluxDF)\n        lc.plot_multicolor_lc(target_list[i])\n","9d3761ea":"So let's read the training data set:","7983f41f":"## Plotting light curves of training data set\nInspired by <a href=\"https:\/\/www.kaggle.com\/michaelapers\/the-plasticc-astronomy-starter-kit\">The PLAsTiCC Astronomy \"Starter Kit\"<\/a> kernel, I tried to plot light curves of training data set. \nI wonder if this kernel is helpful to classify objects, but I expect to get light curve overview of each target ID.\n\nThank you for creating \"Starter Kit\" kernel !","1f144d60":"I arranged LightCurve class in the \"Starter Kit\" kernel in order to:\n* use Lomb-Scargle Periodogram\n* display light curve plots horizontally:  x-axis are 'MJD' and 'Phase'\n* display target ID on light curve plots","7f740d96":"I make a sample plot (without displaying the target ID) :","ce09796c":"Then, I plot 10 light curves for each target ID. There are many objects in each target ID, so I limited the number of plots.","2c37ec83":"Thank you for reading !"}}