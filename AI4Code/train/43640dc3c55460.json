{"cell_type":{"31d14308":"code","5a56700f":"code","9ae0360e":"code","9e82b454":"code","34f0daa2":"code","459ddcf4":"code","c4a5c686":"code","16675160":"code","ff726a30":"code","bf9edf39":"code","ca028df4":"code","0a14b74c":"code","fc967063":"code","a143a642":"code","040a735e":"code","2674d8ae":"code","7c027b05":"code","37894e1e":"code","3495fa1a":"code","316ace9b":"markdown","c3b4a66a":"markdown","b0f8cb10":"markdown","e0ec8c06":"markdown","8a81cf1a":"markdown","adf0ea3a":"markdown","6e410497":"markdown","0e4c874c":"markdown","fd18b175":"markdown","a8dc2ee7":"markdown","fe6c4919":"markdown","cfa6c79e":"markdown"},"source":{"31d14308":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.offline as py\nimport plotly.figure_factory as ff\n%matplotlib inline\n# import plotly.io as pio\n# pio.renderers.default = 'colab'","5a56700f":"data= pd.read_csv('\/kaggle\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv')\ndf=data.iloc[1:, :]\nprint(df.shape)\ndf.head(3)","9ae0360e":"data.iloc[0,:].transpose()","9e82b454":"init_notebook_mode(connected=True)\ncol='Q1'\nv1=df[col].value_counts().reset_index()\nv1=v1.rename(columns={col:'count','index':col})\nv1=v1.sort_values(col)\ntrace1 = go.Bar(x=v1[col], y=v1[\"count\"], marker=dict())\nlayout={'title':\"Age Distribution\",'xaxis':{'title':\"Age Group\"},'yaxis':{'title':\"Count\"}}\nfig = go.Figure(data=[trace1], layout=layout)\niplot(fig)","34f0daa2":"import plotly\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\ncol = \"Q2\"\ngrouped = df[col].value_counts().reset_index()\ngrouped = grouped.rename(columns = {col : \"count\", \"index\" : col})\n\n## plot\ntrace = go.Pie(labels=grouped[col], values=grouped['count'], pull=[0.05, 0])\nlayout = {'title': 'Gender Distribution'}\nfig = go.Figure(data = [trace], layout = layout)\niplot(fig)","459ddcf4":"d1 = df[df[\"Q2\"] == 'Man']\nd2 = df[df[\"Q2\"] == 'Woman']\ncol='Q1'\nv1=d1[col].value_counts().reset_index()\nv1=v1.rename(columns={col:'count','index':col})\nv1['percent']=v1['count'].apply(lambda x : 100*x\/sum(v1['count']))\nv1=v1.sort_values(col)\nv2=d2[col].value_counts().reset_index()\nv2=v2.rename(columns={col:'count','index':col})\nv2['percent']=v2['count'].apply(lambda x : 100*x\/sum(v2['count']))\nv2=v2.sort_values(col)\ntrace1 = go.Bar(x=v1[col], y=v1[\"count\"], name=\"Man\", marker=dict(color=\"rgb(26, 118, 255)\"))\ntrace2 = go.Bar(x=v2[col], y=v2[\"count\"], name=\"Woman\", marker=dict(color='rgb(55, 83, 109)'))\ny = [trace1, trace2]\nlayout={'title':\"Age Distribution over the Gender\",'bargap':0.2,'bargroupgap':0.1,\n        'xaxis':{'title':\"Age Distribution\"},'yaxis':{'title':\"Count\"}}\nfig = go.Figure(data=y, layout=layout)\nfig.layout.template='presentation'\niplot(fig)","c4a5c686":"plt.style.use('fivethirtyeight')\ncol='Q3'\nv2=df[col].value_counts().reset_index()\nv2=v2.rename(columns={col:'count','index':col})\n#v2['percent']=v2['count'].apply(lambda x : 100*x\/sum(v2['count']))\nv2=v2.sort_values(by='count',ascending=False)\nplt.figure(figsize=(30,12))\nbarplot = plt.bar(v2.Q3,v2['count'],color='black')\nfor bar in barplot:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()\/2.0, yval, int(yval), va='bottom') #va: vertical alignment y positional argument\n    \nplt.title(\" Number of Respondents per Country\")\nplt.xticks(rotation=90)\nplt.show()","16675160":"col='Q3'\nv1=d1[col].value_counts().reset_index()\nv1=v1.rename(columns={col:'count','index':col})\nv1['percent']=v1['count'].apply(lambda x : 100*x\/sum(v1['count']))\nv1=v1.sort_values(by='count')\nv2=d2[col].value_counts().reset_index()\nv2=v2.rename(columns={col:'count','index':col})\nv2['percent']=v2['count'].apply(lambda x : 100*x\/sum(v2['count']))\nv2=v2.sort_values(col)\ntrace1 = go.Bar(x=v1[col], y=v1[\"count\"], name=\"Man\", marker=dict(color=\"black\"))\ntrace2 = go.Bar(x=v2[col], y=v2[\"count\"], name=\"Woman\", marker=dict(color='orange'))\ny = [trace1, trace2]\nlayout={'title':\"Gender Distribution over the Country\",'barmode': 'relative',\n        'xaxis_tickangle':-45,'yaxis':{'title':\"Count\"}}\nfig = go.Figure(data=y, layout=layout)\nfig.layout.template='presentation'\niplot(fig)","ff726a30":"%matplotlib inline\ncol='Q4'\nv2=df[col].value_counts().reset_index()\nv2=v2.rename(columns={col:'count','index':col})\n#v2['percent']=v2['count'].apply(lambda x : 100*x\/sum(v2['count']))\nv2=v2.sort_values(by='count',ascending=False)\nplt.figure(figsize=(20,8))\nbarplot = plt.bar(v2.Q4,v2['count'],color='red')\nfor bar in barplot:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()\/2.0, yval, int(yval), va='bottom') #va: vertical alignment y positional argument\n    \nplt.title(\" Distribution of Eduction\")\nplt.xticks(rotation=90)\nplt.show()","bf9edf39":"key1 = \"Master's degree\"\nkey2 = \"Bachelor's degree\"\ndf1 = df[df['Q4'] == 'Master\u2019s degree']\ndf2 = df[df['Q4'] == 'Bachelor\u2019s degree']\n\nnations = [\"United States of America\", \"Canada\", \"Brazil\", \"Mexico\", \n           \"Germany\", \"Spain\", \"France\", \"Italy\", \n           \"India\", \"Japan\", \"China\", \"South Korea\"]\nnation_map = {\"United States of America\" : \"USA\", \"United Kingdom of Great Britain and Northern Ireland\" : \"UK\"}\nplt.figure(figsize=(15,15))\nvals = []\nfor j in range(len(nations)):\n    country = nations[j]\n    country_df = df[df['Q3'] == country]\n    ddf1 = country_df[country_df['Q4'] == 'Master\u2019s degree']\n    ddf2 = country_df[country_df['Q4'] == 'Bachelor\u2019s degree']\n    plt.subplot(4, 4, j+1)\n    \n    if j < 4:\n        colors = [\"orange\", \"yellow\"]\n    elif j < 8:\n        colors = [\"red\", \"#ff8ce0\"]\n    else:\n        colors = [\"green\", \"#827ec4\"]\n    \n    vals.append(len(ddf1) \/ (len(ddf1) + len(ddf2)))    \n    plt.pie([len(ddf1), len(ddf2)],\n            labels=[\"Mastor Degree\", \"Bachelor's Degree\"],\n            autopct=\"%1.0f%%\", \n            colors=colors,\n            wedgeprops={\"linewidth\":5,\"edgecolor\":\"white\"})\n    if country in nation_map:\n        country = nation_map[country]\n    plt.title(r\"$\\bf{\" + country + \"}$\")\n","ca028df4":"%matplotlib inline\ncol='Q5'\nv2=df[col].value_counts().reset_index()\nv2=v2.rename(columns={col:'count','index':col})\n#v2['percent']=v2['count'].apply(lambda x : 100*x\/sum(v2['count']))\nv2=v2.sort_values(by='count',ascending=False)\nplt.figure(figsize=(20,8))\nbarplot = plt.bar(v2.Q5,v2['count'],color='green')\nfor bar in barplot:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()\/2.0, yval, int(yval), va='bottom') #va: vertical alignment y positional argument\n    \nplt.title(\" Title most similar to your current role \")\nplt.ylabel('Number of Data Science Enthusiasts')\nplt.xticks(rotation=90)\nplt.show()","0a14b74c":"fig = go.Figure(layout={'title':\"Whats your Experience? \",'xaxis':{'title':\"Experience Distribution\"},\n                        'yaxis':{'title':\"Count\"}})\ncol='Q6'\nv1=df[col].value_counts().reset_index()\nv1=v1.rename(columns={col:'count','index':col})\nv1=v1.sort_values(col)\nfig.add_trace(go.Scatter(x=v1.Q6, y=v1['count'],\n                    mode='lines+markers',\n                    marker=dict(color=\"black\"),\n                    name='Dealyed'))\nfig.show()","fc967063":"col='Q8'\nv1=df[col].value_counts().reset_index()\nv1=v1.rename(columns={col:'count','index':col})\nv1=v1.sort_values(by='count',ascending=False)\ntrace1 = go.Bar(x=v1[col], y=v1[\"count\"], marker=dict(color=\"orange\"))\nlayout={'title':\"Most recommend Programming language\",'yaxis':{'title':\"Count\"}}\nfig = go.Figure(data=[trace1], layout=layout)\niplot(fig)","a143a642":"%matplotlib inline\ncol='Q8'\nv2=df[col].value_counts().reset_index()\nv2=v2.rename(columns={col:'count','index':col})\n#v2['percent']=v2['count'].apply(lambda x : 100*x\/sum(v2['count']))\nv2=v2.sort_values(by='count',ascending=False)\nplt.figure(figsize=(20,8))\nbarplot = plt.bar(v2.Q8,v2['count'])\nfor bar in barplot:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()\/2.0, yval, int(yval), va='bottom') #va: vertical alignment y positional argument\n    \nplt.title(\" Most recommend Programming language  \",fontsize=20)\nplt.xticks(rotation=90)\nplt.show()","040a735e":"#sns.set(style=\"darkgrid\")\nfig, ax =plt.subplots(6,1)\nmax_count = max([max(df[i].value_counts()) for i in df.columns])\nA=sns.countplot(y=df['Q9_Part_1'],ax=ax[0],order=df.Q9_Part_1.value_counts().iloc[:2].index,color='blue')\nB=sns.countplot(y=df['Q9_Part_2'],ax=ax[1],order=df.Q9_Part_2.value_counts().iloc[:2].index,color='red')\nC=sns.countplot(y=df['Q9_Part_3'],ax=ax[2],order=df.Q9_Part_3.value_counts().iloc[:2].index,color='peru')\nD=sns.countplot(y=df['Q9_Part_5'],ax=ax[3],order=df.Q9_Part_5.value_counts().iloc[:2].index,color='black')\nE=sns.countplot(y=df['Q9_Part_4'],ax=ax[4],order=df.Q9_Part_4.value_counts().iloc[:2].index,color='green')\nF=sns.countplot(y=df['Q9_Part_6'],ax=ax[5],order=df.Q9_Part_6.value_counts().iloc[:2].index,color='green')\nax[0].set_xlim(0,max_count)\nax[1].set_xlim(0,max_count)\nax[2].set_xlim(0,max_count)\nax[3].set_xlim(0,max_count)\nax[4].set_xlim(0,max_count)\nax[5].set_xlim(0,max_count)\nA.set(xticklabels=[])\nB.set(xticklabels=[])\nC.set(xticklabels=[])\nD.set(xticklabels=[])\nE.set(xticklabels=[])\nplt.show()","2674d8ae":"#sns.set(style=\"darkgrid\")\nfig, ax =plt.subplots(5,1)\nmax_count = max([max(df[i].value_counts()) for i in df.columns])\nA=sns.countplot(y=df['Q10_Part_1'],ax=ax[0],order=df.Q10_Part_1.value_counts().iloc[:2].index,color='blue')\nB=sns.countplot(y=df['Q10_Part_2'],ax=ax[1],order=df.Q10_Part_2.value_counts().iloc[:2].index,color='red')\nC=sns.countplot(y=df['Q10_Part_4'],ax=ax[2],order=df.Q10_Part_4.value_counts().iloc[:2].index,color='peru')\nD=sns.countplot(y=df['Q10_Part_3'],ax=ax[3],order=df.Q10_Part_3.value_counts().iloc[:2].index,color='black')\nE=sns.countplot(y=df['Q10_Part_5'],ax=ax[4],order=df.Q10_Part_5.value_counts().iloc[:2].index,color='green')\nax[0].set_xlim(0,max_count)\nax[1].set_xlim(0,max_count)\nax[2].set_xlim(0,max_count)\nax[3].set_xlim(0,max_count)\nax[4].set_xlim(0,max_count)\nA.set(xticklabels=[])\nB.set(xticklabels=[])\nC.set(xticklabels=[])\nD.set(xticklabels=[])\nplt.show()","7c027b05":"%matplotlib inline\ncol='Q11'\nv2=df[col].value_counts().reset_index()\nv2=v2.rename(columns={col:'count','index':col})\n#v2['percent']=v2['count'].apply(lambda x : 100*x\/sum(v2['count']))\nv2=v2.sort_values(by='count',ascending=False)\nplt.figure(figsize=(20,8))\nbarplot = plt.bar(v2.Q11,v2['count'])\nfor bar in barplot:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()\/2.0, yval, int(yval), va='bottom') #va: vertical alignment y positional argument\n    \nplt.title(\" computing platform  \",fontsize=20)\nplt.xticks(rotation=90)\nplt.show()","37894e1e":"fig, ax =plt.subplots(4,1)\nmax_count = max([max(df[i].value_counts()) for i in df.columns])\nA=sns.countplot(y=df['Q12_Part_1'],ax=ax[0],order=df.Q12_Part_1.value_counts().iloc[:2].index,color='blue')\nB=sns.countplot(y=df['Q12_Part_2'],ax=ax[1],order=df.Q12_Part_2.value_counts().iloc[:2].index,color='orange')\nC=sns.countplot(y=df['Q12_Part_3'],ax=ax[2],order=df.Q12_Part_3.value_counts().iloc[:2].index,color='red')\nD=sns.countplot(y=df['Q12_OTHER'],ax=ax[3],order=df.Q12_OTHER.value_counts().iloc[:2].index,color='green')\n#E=sns.countplot(y=df['Q10_Part_5'],ax=ax[4],order=df.Q10_Part_5.value_counts().iloc[:2].index,color='green')\nax[0].set_xlim(0,max_count)\nax[1].set_xlim(0,max_count)\nax[2].set_xlim(0,max_count)\nax[3].set_xlim(0,max_count)\n#ax[4].set_xlim(0,max_count)\nA.set(xticklabels=[])\nB.set(xticklabels=[])\nC.set(xticklabels=[])\n#D.set(xticklabels=[])\nplt.show()","3495fa1a":"col='Q13'\nv1=df[col].value_counts().reset_index()\nv1=v1.rename(columns={col:'count','index':col})\nv1=v1.sort_values(by='count',ascending=False)\ntrace1 = go.Bar(x=v1[col], y=v1[\"count\"], marker=dict(color=\"#522e75\"))\nlayout={'title':\"TPU Used\",'yaxis':{'title':\"Count\"}}\nfig = go.Figure(data=[trace1], layout=layout)\niplot(fig)","316ace9b":"## Q12. Which types of specialized hardware do you use on a regular basis?","c3b4a66a":"## Q7\/Q8. What programming language would you recommend an aspiring data scientist to learn first?","b0f8cb10":"## Q1. Whats your Age?","e0ec8c06":"## Q2. What is Your Gender ?","8a81cf1a":"## Q4. What is the highest level of formal education that you have attained or plan to attained?","adf0ea3a":"## Q9. Which of the following integrated development environments (IDE's) do you use on a regular basis?","6e410497":"## Q3. In which country do you currently reside?","0e4c874c":"## Q5. Select the title most similar to your current role (or most recent title if retired)","fd18b175":"## Q13. Approximately how many times have you used a TPU (tensor processing unit)?","a8dc2ee7":"## Q6. For how many years have you been writing code and\/or programming?","fe6c4919":"## Q10. Which of the following hosted notebook products do you use on a regular basis? ","cfa6c79e":"## Q11. What type of computing platform do you use most often for your data science projects?"}}