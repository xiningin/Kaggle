{"cell_type":{"c674c5c9":"code","6c5125e7":"code","09b28e98":"code","711702d8":"code","0fa541b5":"code","e268aaf3":"code","2fdf20f6":"code","2fbf3836":"code","981c94a7":"code","a4ad146f":"code","5de5a262":"code","4e32a35d":"code","bd7154f1":"code","12aa0204":"markdown","2243fddf":"markdown","38c34db5":"markdown","56b7e73b":"markdown","39290671":"markdown","994adbd2":"markdown","3d0e1c62":"markdown","6e8e6796":"markdown","6edbec87":"markdown","5fdf5767":"markdown","4ba7b2d7":"markdown"},"source":{"c674c5c9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Set Matplotlib defaults\nplt.style.use(\"seaborn-whitegrid\")\nplt.rc(\"figure\", autolayout=True, figsize=(14, 6))\nplt.rc(\n    \"axes\",\n    labelweight=\"bold\",\n    labelsize=\"large\",\n    titleweight=\"bold\",\n    titlesize=14,\n    titlepad=10,\n)\n\nplot_params = dict(\n    color=\"0.75\",\n    style=\".-\",\n    markeredgecolor=\"0.25\",\n    markerfacecolor=\"0.25\",\n    legend=False,\n)\n\nfrom sklearn.linear_model import LinearRegression\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6c5125e7":"TRAIN_CSV = '\/kaggle\/input\/tabular-playground-series-jan-2022\/train.csv'\nTEST_CSV = '\/kaggle\/input\/tabular-playground-series-jan-2022\/test.csv'\nSAMPLE_CSV = '\/kaggle\/input\/tabular-playground-series-jan-2022\/sample_submission.csv'\n\n# Use the date column as the index\ntrain_df = pd.read_csv(TRAIN_CSV, parse_dates=['date'])\ntrain_df = train_df.set_index('date').to_period('D')\ntrain_df","09b28e98":"hat_sales = train_df.loc[train_df['product'] == 'Kaggle Hat'].copy()\ndata_sample=hat_sales.loc[(hat_sales['country']=='Finland') & (hat_sales['store']=='KaggleMart')]\ndata_sample = data_sample['num_sold']","711702d8":"trend = data_sample.rolling(\n    window=365,       # 365-day window\n    center=True,      # puts the average at the center of the window\n    min_periods=183,  # choose about half the window size\n).mean()              # compute the mean (could also do median, std, min, max, ...)\n\n# Make a plot\nax = data_sample.plot(**plot_params, alpha=0.5)\nax = trend.plot(ax=ax, linewidth=3, legend=False)","0fa541b5":"from statsmodels.tsa.deterministic import DeterministicProcess\n\ny = data_sample.copy()  # the target\n\n# Instantiate `DeterministicProcess` with arguments appropriate for a quadratic trend model\ndp = DeterministicProcess(index=data_sample.index, order=2)\n\n# Create the feature set for the dates given in y.index\nX = dp.in_sample()\n\n# Create features for a 1-year forecast.\nX_fore = dp.out_of_sample(steps=365)\n\nmodel = LinearRegression()\nmodel.fit(X, y)\n\ny_pred = pd.Series(model.predict(X), index=X.index)\ny_fore = pd.Series(model.predict(X_fore), index=X_fore.index)\n\nax = y.plot(**plot_params, alpha=0.5, title=\"Average Sales\", ylabel=\"items sold\")\nax = y_pred.plot(ax=ax, linewidth=3, label=\"Trend\", color='C0')\nax = y_fore.plot(ax=ax, linewidth=3, label=\"Trend Forecast\", color='C3')","e268aaf3":"df_pre_2018 = train_df.loc[train_df.index < '2018-01-01']\ndf_2018 = train_df.loc[train_df.index > '2017-12-31']\ndf_2018","2fdf20f6":"from statsmodels.tsa.deterministic import DeterministicProcess\n\ncountries = ['Finland', 'Norway', 'Sweden']\nproducts = ['Kaggle Hat', 'Kaggle Mug', 'Kaggle Sticker']\nstores = ['KaggleMart', 'KaggleRama']\n\ndef train_and_predict(train_df, test_df):\n    pred_dfs = list()\n\n    for country in countries:\n        for product in products:\n            for store in stores:\n                df = train_df.loc[(train_df['country'] == country) &\n                                  (train_df['product'] == product) &\n                                  (train_df['store'] == store)].copy()\n                test_sample = test_df.loc[(test_df['country'] == country) &\n                                          (test_df['product'] == product) &\n                                          (test_df['store'] == store)].copy()\n                \n                y = df['num_sold'].copy()  # the target\n                \n                # Instantiate `DeterministicProcess` with arguments appropriate for a quadratic trend model.\n                # If we use order=1 here, it will be exactly the same as a linear model.\n                dp = DeterministicProcess(index=df.index, order=2)\n\n                # Create the feature set for the dates given in y.index\n                X = dp.in_sample()\n\n                # Create features for a forecast.\n                X_fore = dp.out_of_sample(steps=len(test_sample))\n\n                # Train the model\n                model = LinearRegression()\n                model.fit(X, y)\n                \n                # Make the forecast\n                y_fore = model.predict(X_fore)\n                \n                pred_df = pd.DataFrame({'row_id': test_sample['row_id'], 'y_pred': y_fore}).reset_index(drop=True)\n                pred_dfs.append(pred_df)\n\n    predictions_df = pd.concat(pred_dfs)\n    return predictions_df\n\npreds_2018_df = train_and_predict(df_pre_2018, df_2018)\npreds_2018_df","2fbf3836":"val_pred_df = df_2018.merge(preds_2018_df, how='left', on='row_id')\nval_pred_df","981c94a7":"def smape(a, f):\n    return 1\/len(a) * np.sum(2 * np.abs(f-a) \/ (np.abs(a) + np.abs(f))*100)\n\nactual = np.array(val_pred_df['num_sold'])\nforecast = np.array(val_pred_df['y_pred'])\nsmape(actual, forecast)","a4ad146f":"# Keep the row_id for the sample submission\ntest_df = pd.read_csv(TEST_CSV, index_col='date', parse_dates=['date'])\ntest_df","5de5a262":"preds_2019_df = train_and_predict(train_df, test_df)\npreds_2019_df","4e32a35d":"test_pred_df = test_df.merge(preds_2019_df, how='left', on='row_id')\ntest_pred_df","bd7154f1":"submission_df = test_pred_df[['row_id', 'y_pred']]\nsubmission_df.columns = ['row_id', 'num_sold']\nsubmission_df.to_csv('.\/submission.csv', index=False)","12aa0204":"The rolling average is used to determine if there's an overall trend in the data by averaging over the longest period (a year in this case). The data seems to be trending slightly upwards each year, but it looks fairly linear. This is why I suspect the results will not be much better than the baseline. Let's try a quadratic fit to see if it's any better.","2243fddf":"### Build the quadratic models and make predictions","38c34db5":"This score is (as expected) worse than using a linear model. We could try higher-order polynomials, but those are only likely to be even worse for forecasting.\n\nThere's not much use in making predictions to submit to the competition based on this model, but let's do it anyway. We've made it this far, and the hard part is already done.","56b7e73b":"### Load the training data set","39290671":"### Plotting a rolling average","994adbd2":"### Load the test data set","3d0e1c62":"Note the slight upwards curve of the trendline and forecast. The predictions for this model should be slightly higher than for a linear model.","6e8e6796":"### Motivation\n\nThis notebook is based on my learnings from the second lesson in Kaggle's [Time Series](https:\/\/www.kaggle.com\/learn\/time-series) course, *Trend*, applied to the January 2022 Tabular Playground Series challenge. I don't expect the results to be much improved over my [linear baseline](https:\/\/www.kaggle.com\/bcruise\/tps-jan-2022-linear-baseline\/notebook), but it's worth a shot.","6edbec87":"### Re-train models and make predictions using all training data","5fdf5767":"### Estimate SMAPE score\nTo estimate our leaderboard score, we can train out models on the first three years of training data, then compute the SMAPE score for the last year of training data.","4ba7b2d7":"We'll start with just a small sample of the data so we can show a rolling average for one product, country, and store."}}