{"cell_type":{"65e2cec3":"code","29d86970":"code","0bfa7149":"code","c99ff9c6":"code","23bb09ab":"code","d6557613":"code","b554a676":"code","c53caa30":"code","c7fcc0a9":"code","298f2935":"code","c4f41ba8":"code","14e7336e":"code","5a5537c6":"markdown","bd45ec51":"markdown","7aa0a08a":"markdown","bb6e7dce":"markdown","74aa621a":"markdown","5cc2f56a":"markdown","6c7ac6d5":"markdown"},"source":{"65e2cec3":"#importing required libraries\nimport pandas as pd\nimport numpy as np\nimport sklearn as skl\n\nfrom pandas import Series,DataFrame\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline\n\nfrom datetime import datetime, timedelta\nfrom collections import defaultdict","29d86970":"df = pd.read_csv(\"..\/input\/shopee-code-league-20\/_DA_Order_Brushing\/order_brush_order.csv\")\ndf.head()","0bfa7149":"df_subset = df.head(100500)","c99ff9c6":"shop = defaultdict(list)","23bb09ab":"for i in range(df_subset.shape[0]):\n    orderid, sid, userid, time = df.iloc[i]\n    #print(et)\n    et = datetime.strptime(time, '%Y-%m-%d %H:%M:%S')\n    shop[sid].append((et, userid, orderid))","d6557613":"#Converting  to a normal dict.\ndata = dict(shop)","b554a676":"shops = df_subset['shopid'].unique()","c53caa30":"shops_dict = defaultdict(list)\nfor shop in shops:\n    #print(shop)\n    shops_dict[shop].append(data[shop])\n        \nshops_dict = dict(shops_dict)","c7fcc0a9":"\"\"\" mul_shops gives a list of shopids with more than 1 purchase\"\"\"\nmul_shops = []\nfor shop in shops_dict:\n    if (len(shops_dict[shop][0])>1):\n        mul_shops.append(shop)","298f2935":"\"\"\" user_dict gives a list of users for each shop\"\"\"\nuser_dict = defaultdict(list)\nfor shop in mul_shops:\n    for i in range(len(shops_dict[shop][0])):\n        user_dict[shop].append(shops_dict[shop][0][i][1])\n\nuser_dict = dict(user_dict)","c4f41ba8":"order=[]\nshopid=[]\nfor shop in mul_shops:\n    \"\"\"Obtaining the min and max time of purchase of a shop with multiple purchases will give a time-span of buying\"\"\"\n    max_time = max(shops_dict[shop][0])\n    min_time = min(shops_dict[shop][0])\n\n    time_delta = max_time[0]-min_time[0] # time_delta is the time-span of buying\n\n    \"\"\" Order-concentration can be interpreted as orders per each hr of purchase\"\"\"\n    order_concentration = (time_delta\/len(shops_dict[shop][0])).seconds\/3600\n    \n    \"\"\" For each hour, we are looking at how much of the order quantity belonged to each one of unique customer\"\"\"\n    order_per_cust_con = order_concentration\/len(set(user_dict[shop]))  #unique user found out using set-function\n    #this pretty much gives the idea of how much order is concentrated to each customer.\n                                                                      \n    if (order_per_cust_con > 3): #Considering shops with order concentration is greater than 3 per hr per customer.\n        order.append(order_per_cust_con)\n        shopid.append(shop)","14e7336e":"suspicious_order_brushing = DataFrame({'ShopID':shopid,'Order per UniqueCust':order})\nsuspicious_order_brushing","5a5537c6":"# Identifying unique shop-ids and related variables","bd45ec51":"Unique shop-ids are:","7aa0a08a":"Identifying shops with multiple orders","bb6e7dce":"Creating a new dictionary with each shop-as keys and corresponding values","74aa621a":"Creating a dictionary for all shop id's ","5cc2f56a":"let's take a subset of 100500 values for ease of working, which can be updated later.","6c7ac6d5":"# Order Brushing"}}