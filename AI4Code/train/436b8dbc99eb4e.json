{"cell_type":{"b548074b":"code","a33f445f":"code","40d207a8":"code","56e42c69":"code","953bbd84":"code","b6803164":"code","8489245e":"code","788d3dcf":"code","3864744f":"code","5cefe7b0":"code","cd0e3cdd":"code","3e663f47":"code","24ed5e0c":"code","ffbf3f3f":"code","a72f22f7":"markdown","53588f14":"markdown","1587f21d":"markdown","ebb025e7":"markdown","78461a78":"markdown"},"source":{"b548074b":"import numpy as np \nimport pandas as pd\nimport os\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom tensorflow.keras.layers import Conv2D, Dense, Dropout, Flatten\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom PIL import Image\nimport cv2\n\nimport warnings\nwarnings.filterwarnings(action='ignore')","a33f445f":"axes = []\nfig = plt.figure(figsize=(20,6))\nfor i in range (13):\n    axes.append(fig.add_subplot(2,7,i+1))\n    subplot_title = str(i)\n    axes[-1].set_title(subplot_title)\n    img = Image.open('..\/input\/pceo-mnist\/train\/'+str(i)+'\/'+'G_0_0_0_0_0.png')\n    plt.imshow(img)\nfig.tight_layout()\nplt.show()","40d207a8":"sample_submission = pd.read_csv('..\/input\/pceo-mnist\/sample_submission.csv')\nsample_submission.head()","56e42c69":"train_dir = '..\/input\/pceo-mnist\/train'\ntest_dir = '..\/input\/pceo-mnist\/test'\nn_classes = 13\nclass_label = [i for i in range (n_classes)]\ntarget_size = (28,28)\ntarget_dim = (28,28,3)\nval_size = 0.2\nbatch_size = 64","953bbd84":"data_augmentor = ImageDataGenerator(samplewise_center=True, \n                                    samplewise_std_normalization=True, \n                                    validation_split=val_size)\ntest_data_augmentor = ImageDataGenerator(samplewise_center=True, \n                                    samplewise_std_normalization=True)\n\ntrain_generator = data_augmentor.flow_from_directory(train_dir, target_size=target_size, batch_size=batch_size, shuffle=True, subset=\"training\")\nval_generator = data_augmentor.flow_from_directory(train_dir, target_size=target_size, batch_size=batch_size, subset=\"validation\")\ntest_generator = test_data_augmentor.flow_from_directory(test_dir, target_size=target_size, batch_size=batch_size, shuffle=False)","b6803164":"model = Sequential()\nmodel.add(Conv2D(32, kernel_size=(5,5), activation='relu', input_shape=target_dim))\nmodel.add(Conv2D(64, kernel_size=(3,3), activation='relu'))\nmodel.add(Flatten())\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dense(n_classes, activation='softmax'))\nmodel.summary()","8489245e":"model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=[\"accuracy\"])","788d3dcf":"model.fit_generator(train_generator, epochs=10, validation_data = val_generator)","3864744f":"test_generator.reset()\npredict = model.predict_generator(test_generator)\nresult = np.argmax(predict, axis=1)","5cefe7b0":"submission = sample_submission.copy()\nfor i in range(len(submission)):\n    submission.iloc[i,0] = str(submission.iloc[i,0])\nsubmission = submission.sort_values('file_index')","cd0e3cdd":"class_map = train_generator.class_indices","3e663f47":"submission = submission.reset_index()\nfor i in range(len(submission)):\n    submission.iloc[i,-1] = list(class_map.keys())[list(class_map.values()).index(result[i])]\nsubmission = submission.drop('index', axis=1)","24ed5e0c":"submission.head()","ffbf3f3f":"submission.to_csv('submission.csv', index=False)","a72f22f7":"### \ub370\uc774\ud130 \uc804\ucc98\ub9ac","53588f14":"### Predict \ubc0f Submission\n\nsubmission\uc744 \uc704\ud55c \ubd80\ubd84\uc744 \ubcc0\uacbd\ud558\uc9c0 \ub9d0\uc544\uc8fc\uc138\uc694. \uc544\ub798 \ucf54\ub4dc\ub85c \uc2e4\ud589\ud558\uc5ec submission \ud30c\uc77c\uc744 \ub9cc\ub4e4\uc5b4\uc57c \uc62c\ubc14\ub974\uac8c \ucc44\uc810\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. ","1587f21d":"### \ubaa8\ub378\ub9c1 \ubc0f \ud6c8\ub828","ebb025e7":"### \ub77c\uc774\ube0c\ub7ec\ub9ac \ub85c\ub4dc","78461a78":"## Simple EDA"}}