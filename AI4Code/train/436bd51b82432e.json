{"cell_type":{"663d4ae0":"code","2d5370fb":"code","2a13aa64":"code","6344bc74":"code","b47be352":"code","50d3adc5":"code","74b33604":"code","c6dc8d41":"code","bec1140b":"code","7f854b16":"code","68211af5":"code","3e141d30":"code","3df71600":"code","f43b715e":"code","92b0324f":"code","75d26ec3":"code","398c4152":"code","11d20165":"code","5e920dc6":"code","683cb581":"code","c55f715e":"code","2e8dc6ca":"code","3c24910f":"code","175e16bf":"code","fa08a655":"code","266fa5c2":"code","8ec1e2a2":"code","458df906":"code","01ca151c":"code","4618e899":"code","1af5c441":"code","21932210":"code","c87bb96d":"code","d34a9b6d":"code","643afd0b":"code","804ba74b":"code","14d110db":"code","021cb29c":"code","2b8039fb":"code","946d464d":"code","2cbc870d":"code","57b8becb":"code","9bcc61d7":"code","01be5832":"code","6e8140df":"code","eeac5b81":"code","8b6fe17d":"code","43840892":"code","385ef2dd":"code","2f65db4d":"code","be28659d":"code","a4616ba3":"code","cf492655":"code","f09aabb2":"code","a7a7665a":"code","8a70d372":"code","451e2a00":"code","ca7110b3":"markdown","4bcbddb5":"markdown","67e29996":"markdown","14ba15b3":"markdown","d4f9ff48":"markdown","c7fcbd04":"markdown","02eacf95":"markdown","92a888e7":"markdown","bcfd3dd3":"markdown","922c99ed":"markdown","57811e6f":"markdown","0fa9abd5":"markdown","7d92b09b":"markdown","34dfa6e1":"markdown","5f09e35e":"markdown","c0d549c2":"markdown","c224766c":"markdown","b9947b0b":"markdown","d737c323":"markdown","2f6cc14e":"markdown","2dd44502":"markdown","5006a275":"markdown","6c87c827":"markdown","ff21004c":"markdown","bb4c023c":"markdown","e4c6009f":"markdown","164a156a":"markdown","49f4557b":"markdown","8168485c":"markdown","bd958a57":"markdown","90c02cc2":"markdown","e56538b4":"markdown","9e37aa0b":"markdown","0c4cadc7":"markdown","aedf0b02":"markdown","53741ce1":"markdown","c5b6865f":"markdown","573e553b":"markdown","da07c329":"markdown","346fb50d":"markdown","2258df6a":"markdown","a54423ac":"markdown","b0254381":"markdown","b012cea4":"markdown","3705c1bf":"markdown","539268df":"markdown","216b32b8":"markdown","715ad07b":"markdown","eae40591":"markdown","8847cbf1":"markdown"},"source":{"663d4ae0":"# modules we'll use\nimport pandas as pd\nimport numpy as np\n\n# helpful character encoding module\nimport chardet\n\n# set seed for reproducibility\nnp.random.seed(0)","2d5370fb":"# start with a string\nbefore = \"This is the euro symbol: \u20ac\"\n\n# check to see what datatype it is\ntype(before)","2a13aa64":"# encode it to a different encoding, replacing characters that raise errors\nafter = before.encode(\"utf-8\", errors = \"replace\")\n\n# check the type\ntype(after)","6344bc74":"# take a look at what the bytes look like\nafter","b47be352":"# convert it back to utf-8\nprint(after.decode(\"utf-8\"))","50d3adc5":"# try to decode our bytes with the ascii encoding\nprint(after.decode(\"ascii\"))","74b33604":"# start with a string\nbefore = \"This is the euro symbol: \u20ac\"\n\n# encode it to a different encoding, replacing characters that raise errors\nafter = before.encode(\"ascii\", errors = \"replace\")\n\n# convert it back to utf-8\nprint(after.decode(\"ascii\"))\n\n# We've lost the original underlying byte string! It's been \n# replaced with the underlying byte string for the unknown character :(","c6dc8d41":"# Your turn! Try encoding and decoding different symbols to ASCII and\n# see what happens. I'd recommend $, #, \u4f60\u597d and \u0928\u092e\u0938\u094d\u0924\u0947 but feel free to\n# try other characters. What happens? When would this cause problems?","bec1140b":"# start with a string\nbefore = \"This is the Dollar symbol: $\"\n\n# check to see what datatype it is\ntype(before)","7f854b16":"# encode it to a different encoding, utf-8, replacing characters that raise errors\nafter = before.encode(\"utf-8\", errors = \"replace\")\n\n# check the type\ntype(after)","68211af5":"# Take a look what the bytes look like\n\nafter","3e141d30":"# Let us decode it with utf-8\ngoing_back = after.decode('utf-8')\n\n# Let us see the data type of decode\ntype(going_back)","3df71600":"# Just for confirmation, take a look at what the string looks like\n\ngoing_back","f43b715e":"# start with a string\nbefore = \"This is the number sign\/hash\/pound sign: #\"\n\n# check to see what datatype it is\ntype(before)","92b0324f":"# encode it to a different encoding, utf-8, replacing characters that raise errors\nafter = before.encode(\"utf-8\", errors = \"replace\")\n\n# check the type\ntype(after)","75d26ec3":"# Take a look what the bytes look like\n\nafter","398c4152":"# Let us decode it with utf-8\ngoing_back = after.decode('utf-8')\n\n# Let us see the data type of decode\ntype(going_back)","11d20165":"# Just for confirmation, take a look at what the string looks like\n\ngoing_back","5e920dc6":"# start with a string\nbefore = \"This is a 'Hi' in Chinese: \u4f60\u597d\"\n\n# check to see what data type it is\n\ntype(before)","683cb581":"# encode it to a different encoding, utf-8, replacing characters that raise errors\nafter = before.encode(\"utf-8\", errors = \"replace\")\n\n# check the type\ntype(after)","c55f715e":"# Take a look what the bytes look like\n\nafter","2e8dc6ca":"# convert it back to utf-8\ngoing_back = after.decode(\"utf-8\")\n\n# Let us check the data type \n\ntype(going_back)","3c24910f":"# Let us check what str looks like\n\nprint(going_back)","175e16bf":"# start with a string\nbefore = \"This is the way of greeting in India: \u0928\u092e\u0938\u094d\u0924\u0947\"\n\n# check to see what data type it is\n\ntype(before)","fa08a655":"# encode it to a different encoding, utf-8, replacing characters that raise errors\nafter = before.encode(\"utf-8\", errors = \"replace\")\n\n# check the type\ntype(after)","266fa5c2":"# Take a look what the bytes look like\n\nafter","8ec1e2a2":"# convert it back to utf-8\ngoing_back = after.decode(\"utf-8\")\n\n# Let us look at the data type of going_back\n\ntype(going_back)","458df906":"# Just for confirmation, we will look at what the str looks like.\n\nprint(going_back)","01ca151c":"# start with a string\nbefore = \"This is the Dollar symbol: $\"\n\n# Check to see what data type it is.\ntype(before)","4618e899":"# encode it to a different encoding, ASCII, replacing characters that raise errors\nafter = before.encode(\"ascii\", errors = \"replace\")\ntype(after)","1af5c441":"# Take a look at what byptes look like.\n\nafter","21932210":"# decoding to ascii\n\ngoing_back = after.decode(\"ascii\")\n\n# Let us see the data type of going_back\ntype(going_back)\n","c87bb96d":"# Just for confirmation, let us see what the str looks like\n\nprint(going_back)","d34a9b6d":"# start with a string\nbefore = \"This is the hash\/number sign\/pound sign: #\"\n\n# Check to see what data type it is.\ntype(before)","643afd0b":"# encode it to a different encoding, ASCII, replacing characters that raise errors\nafter = before.encode(\"ascii\", errors = \"replace\")\ntype(after)","804ba74b":"# Take a look at what byptes look like.\n\nafter","14d110db":"# decoding to ascii\n\ngoing_back = after.decode(\"ascii\")\n\n# Let us see the data type of going_back\ntype(going_back)\n","021cb29c":"# Just for confirmation, let us see what the str looks like\n\nprint(going_back)","2b8039fb":"# start with a string\nbefore = \"This is the way of saying 'hi' in Chinese: \u4f60\u597d\"\n\n# Check to see what data type it is.\ntype(before)","946d464d":"# encode it to a different encoding, ASCII, replacing characters that raise errors\nafter = before.encode(\"ascii\", errors = \"replace\")\ntype(after)","2cbc870d":"# Take a look at what byptes look like.\n\nafter","57b8becb":"# decoding to ascii\n\ngoing_back = after.decode(\"ascii\")\n\n# Let us see the data type of going_back\ntype(going_back)\n","9bcc61d7":"# Just for confirmation, let us see what the str looks like\n\nprint(going_back)","01be5832":"# start with a string\nbefore = \"This is the way of greeting in India: \u0928\u092e\u0938\u094d\u0924\u0947\"\n\n# Check to see what data type it is.\ntype(before)","6e8140df":"# encode it to a different encoding, ASCII, replacing characters that raise errors\nafter = before.encode(\"ascii\", errors = \"replace\")\ntype(after)","eeac5b81":"# Take a look at what byptes look like.\n\nafter","8b6fe17d":"# decoding to ascii\n\ngoing_back = after.decode(\"ascii\")\n\n# Let us see the data type of going_back\ntype(going_back)\n","43840892":"# Just for confirmation, let us see what the str looks like\n\nprint(going_back)","385ef2dd":"# try to read in a file not in UTF-8\nkickstarter_2016 = pd.read_csv(\"..\/input\/kickstarter-projects\/ks-projects-201612.csv\")","2f65db4d":"# look at the first ten thousand bytes to guess the character encoding\nwith open(\"..\/input\/kickstarter-projects\/ks-projects-201801.csv\", 'rb') as rawdata:\n    result = chardet.detect(rawdata.read(10000))\n\n# check what the character encoding might be\nprint(result)","be28659d":"# read in the file with the encoding detected by chardet\nkickstarter_2016 = pd.read_csv(\"..\/input\/kickstarter-projects\/ks-projects-201612.csv\", encoding='Windows-1252')\n\n# look at the first few lines\nkickstarter_2016.head()","a4616ba3":"# Your Turn! Trying to read in this file gives you an error. Figure out\n# what the correct encoding should be and read in the file. :)\npolice_killings = pd.read_csv(\"..\/input\/fatal-police-shootings-in-the-us\/PoliceKillingsUS.csv\")","cf492655":"# look at the first ten thousand bytes to guess the character encoding\n\nwith open(\"..\/input\/fatal-police-shootings-in-the-us\/PoliceKillingsUS.csv\", 'rb') as rawdata:\n    result = chardet.detect(rawdata.read(100000))\n\n# check what the character encoding might be\nprint(result)","f09aabb2":"# read in the file with the encoding detected by chardet\npolice_killings = pd.read_csv(\"..\/input\/fatal-police-shootings-in-the-us\/PoliceKillingsUS.csv\", encoding='Windows-1252')\n\n# look at the first few lines\npolice_killings.head()","a7a7665a":"# save our file (will be saved as UTF-8 by default!)\nkickstarter_2016.to_csv(\"ks-projects-201801-utf8.csv\")","8a70d372":"# Your turn! Save out a version of the police_killings dataset with UTF-8 encoding ","451e2a00":"# save our file (will be saved as UTF-8 by default!)\n\npolice_killings.to_csv(\"PoliceKillingsUS.csv-utf8.csv\")","ca7110b3":"# Get our environment set up\n________\n\nThe first thing we'll need to do is load in the libraries we'll be using. Not our datasets, though: we'll get to those later!\n\n> **Important!** Make sure you run this cell yourself or the rest of your code won't work!","4bcbddb5":"Notice that we get the same `UnicodeDecodeError` we got when we tried to decode UTF-8 bytes as if they were ASCII! This tells us that this file isn't actually UTF-8. We don't know what encoding it actually *is* though. One way to figure it out is to try and test a bunch of different character encodings and see if any of them work. A better way, though, is to use the chardet module to try and automatically guess what the right encoding is. It's not 100% guaranteed to be right, but it's usually faster than just trying to guess.\n\nI'm going to just look at the first ten thousand bytes of this file. This is usually enough for a good guess about what the encoding is and is much faster than trying to look at the whole file. (Especially with a  large file this can be very slow.) Another reason to just look at the first part of the file is that  we can see by looking at the error message that the first problem is the 11th character. So we probably only need to look at the first little bit of the file to figure out what's going on.","67e29996":"### All days of the challange:\n\n* [Day 1: Handling missing values](https:\/\/www.kaggle.com\/rtatman\/data-cleaning-challenge-handling-missing-values)\n* [Day 2: Scaling and normalization](https:\/\/www.kaggle.com\/rtatman\/data-cleaning-challenge-scale-and-normalize-data)\n* [Day 3: Parsing dates](https:\/\/www.kaggle.com\/rtatman\/data-cleaning-challenge-parsing-dates\/)\n* [Day 4: Character encodings](https:\/\/www.kaggle.com\/rtatman\/data-cleaning-challenge-character-encodings\/)\n* [Day 5: Inconsistent Data Entry](https:\/\/www.kaggle.com\/rtatman\/data-cleaning-challenge-inconsistent-data-entry\/)\n___\nWelcome to day 4 of the 5-Day Data Challenge! Today, we're going to be working with different character encodings. To get started, click the blue \"Fork Notebook\" button in the upper, right hand corner. This will create a private copy of this notebook that you can edit and play with. Once you're finished with the exercises, you can choose to make your notebook public to share with others. :)\n\n> **Your turn!** As we work through this notebook, you'll see some notebook cells (a block of either code or text) that has \"Your Turn!\" written in it. These are exercises for you to do to help cement your understanding of the concepts we're talking about. Once you've written the code to answer a specific question, you can run the code by clicking inside the cell (box with code in it) with the code you want to run and then hit CTRL + ENTER (CMD + ENTER on a Mac). You can also click in a cell and then click on the right \"play\" arrow to the left of the code. If you want to run all the code in your notebook, you can use the double, \"fast forward\" arrows at the bottom of the notebook editor.\n\nHere's what we're going to do today:\n\n* [Get our environment set up](#Get-our-environment-set-up)\n* [What are encodings?](#What-are-encodings?)\n* [Reading in files with encoding problems](#Reading-in-files-with-encoding-problems)\n* [Saving your files with UTF-8 encoding](#Saving-your-files-with-UTF-8-encoding)\n\nLet's get started!","14ba15b3":"This is bad and we want to avoid doing it! It's far better to convert all our text to UTF-8 as soon as we can and keep it in that encoding. The best time to convert non UTF-8 input into UTF-8  is when you read in files, which we'll talk about next.\n\nFirst, however, try converting between bytes and strings with different encodings and see what happens. Notice what this does to your text. Would you want this to happen to data you were trying to analyze?","d4f9ff48":"**Query:** Figure out what correct encoding should be for police_killings dataset","c7fcbd04":"**Now, it is the turn of #**","02eacf95":"We can also run into trouble if we try to use the wrong encoding to map from a string to bytes. Like I said earlier, strings are UTF-8 by default in Python 3, so if we try to treat them like they were in another encoding we'll create problems. \n\nFor example, if we try to convert a string to bytes for ascii using encode(), we can ask for the bytes to be what they would be if the text was in ASCII. Since our text isn't in ASCII, though, there will be some characters it can't handle. We can automatically replace the characters that ASCII can't handle. If we do that, however, any characters not in ASCII will just be replaced with the unknown character. Then, when we convert the bytes back to a string, the character will be replaced with the unknown character. The dangerous part about this is that there's not way to tell which character it *should* have been. That means we may have just made our data unusable!","92a888e7":"There you go, \u4f60\u597d has not been correctly encoded or decoded with the ascii encoding","bcfd3dd3":"**$ (deconding)**","922c99ed":"And that's it for today! We didn't do quite as much coding, but  take my word for it: if you don't have the right tools, figuring out what encoding a file is in can be a huge time sink. If you have any questions, be sure to post them in the comments below or [on the forums](https:\/\/www.kaggle.com\/questions-and-answers). \n\nRemember that your notebook is private by default, and in order to share it with other people or ask for help with it, you'll need to make it public. First, you'll need to save a version of your notebook that shows your current work by hitting the \"Commit & Run\" button. (Your work is saved automatically, but versioning your work lets you go back and look at what it was like at the point you saved it. It also lets you share a nice compiled notebook instead of just the raw code.) Then, once your notebook is finished running, you can go to the Settings tab in the panel to the left (you may have to expand it by hitting the [<] button next to the \"Commit & Run\" button) and setting the \"Visibility\" dropdown to \"Public\".\n\n# More practice!\n___\n\nCheck out [this dataset of files in different character encodings](https:\/\/www.kaggle.com\/rtatman\/character-encoding-examples). Can you read in all the files with their original encodings and them save them out as UTF-8 files?\n\nIf you have a file that's in UTF-8 but has just a couple of weird-looking characters in it, you can try out the [ftfy module](https:\/\/ftfy.readthedocs.io\/en\/latest\/#) and see if it helps. ","57811e6f":"So chardet is 73%  confidence that the right encoding is \"Windows-1252\". Let's see if that's correct:","0fa9abd5":"# Reading in files with encoding problems\n___\n\nMost files you'll encounter will probably be encoded with UTF-8. This is what Python expects by default, so most of the time you won't run into problems. However, sometimes you'll get an error like this: ","7d92b09b":"Yep, looks like chardet was right! The file reads in with no problem (although we do get a warning about datatypes) and when we look at the first few rows it seems to be be fine. \n\n> **What if the encoding chardet guesses isn't right?** Since chardet is basically just a fancy guesser, sometimes it will guess the wrong encoding. One thing you can try is looking at more or less of the file and seeing if you get a different result and then try that.","34dfa6e1":"There you go,  \u4f60\u597d has not been correctly encoded.\n\n**\u4f60\u597d(decoding)**\n\nLet us convert our bytes back to a string with the correct encoding.\n","5f09e35e":" $ has been correctly encoded and decoded with ascii encoding\n","c0d549c2":"## Now, let us look into ASCII encoding and decoding.","c224766c":"So, $ has been correctly decoded.","b9947b0b":"Now we're ready to work with some character encodings! (If you like, you can add a code cell here and take this opportunity to take a look at some of the data.)","d737c323":"# What are encodings?\n____\n\nCharacter encodings are specific sets of rules for mapping from raw binary byte strings (that look like this: 0110100001101001) to characters that make up human-readable text (like \"hi\"). There are many different encodings, and if you tried to read in text with a different encoding that the one it was originally written in, you ended up with scrambled text called \"mojibake\" (said like mo-gee-bah-kay). Here's an example of mojibake:\n\n\u00e6\u2013\u2021\u00e5\u2014\u00e5\u0152\u2013\u00e3??\n\nYou might also end up with a \"unknown\" characters. There are what gets printed when there's no mapping between a particular byte and a character in the encoding you're using to read your byte string in and they look like this:\n\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n\nCharacter encoding mismatches are less common today than they used to be, but it's definitely still a problem. There are lots of different character encodings, but the main one you need to know is UTF-8.\n\n> UTF-8 is **the** standard text encoding. All Python code is in UTF-8 and, ideally, all your data should be as well. It's when things aren't in UTF-8 that you run into trouble.\n\nIt was pretty hard to deal with encodings in Python 2, but thankfully in Python 3 it's a lot simpler. (Kaggle Kernels only use Python 3.) There are two main data types you'll encounter when working with text in Python 3. One is is the string, which is what text is by default.","2f6cc14e":"\u4f60\u597d has been converted back to string.","2dd44502":"**Query:** Save out a version of the police_killings dataset with UTF-8 encoding.","5006a275":"hash (#) sign been correctly encoded.","6c87c827":"**$ (decoding)**","ff21004c":"**Let us start with $ (encoding)**","bb4c023c":"**Next comes \u4f60\u597d**","e4c6009f":"## In the first place, try encoding and decoding with \"utf-8\"","164a156a":"Pretty easy, huh? :)\n\n> If you haven't saved a file in a kernel before, you need to hit the commit & run button and wait for your notebook to finish running first before you can see or access the file you've saved out. If you don't see it at first, wait a couple minutes and it should show up. The files you save will be in the directory \"..\/output\/\", and you can download them from your notebook.","49f4557b":"**Next comes \u0928\u092e\u0938\u094d\u0924\u0947**","8168485c":"# Saving your files with UTF-8 encoding\n___\n\nFinally, once you've gone through all the trouble of getting your file into UTF-8, you'll probably want to keep it that way. The easiest way to do that is to save your files with UTF-8 encoding. The good news is, since UTF-8 is the standard encoding in Python, when you save a file it will be saved as UTF-8 by default:","bd958a57":"yeap, it worked fine.","90c02cc2":"**# (decoding)**","e56538b4":"**# decoding**","9e37aa0b":"So, # has been correctly decoded.","0c4cadc7":" So, $ has been correctly encoded.","aedf0b02":"**Next goes the turn of \u4f60\u597d**","53741ce1":"**Let us start with $ (encoding)**","c5b6865f":"If you look at a bytes object, you'll see that it has a b in front of it, and then maybe some text after. That's because bytes are printed out as if they were characters encoded in ASCII. (ASCII is an older character encoding that doesn't really work for writing any language other than English.) Here you can see that our euro symbol  has been replaced with some mojibake that looks like \"\\xe2\\x82\\xac\" when it's printed as if it were an ASCII string.","573e553b":"When we look at the above UnicodeDecodeError, it gives an indication of error occuring in the 2nd character, so let us\nlook at the first 100 thousand bytes and see if that works fine.","da07c329":"There you go, \u0928\u092e\u0938\u094d\u0924\u0947 has not been correctly encoded or decoded with the ascii encoding","346fb50d":"**Now comes #**","2258df6a":"So chardet is 73%  confidence that the right encoding is \"Windows-1252\". Let's see if that's correct:","a54423ac":"hash(#) has been correctly encoded and decoded with ascii encoding","b0254381":"When we convert our bytes back to a string with the correct encoding, we can see that our text is all there correctly, which is great! :)","b012cea4":"The other data is the [bytes](https:\/\/docs.python.org\/3.1\/library\/functions.html#bytes) data type, which is a sequence of integers. You can convert a string into bytes by specifying which encoding it's in:","3705c1bf":"**Now comes the turn of \u0928\u092e\u0938\u094d\u0924\u0947** ","539268df":"**\u0928\u092e\u0938\u094d\u0924\u0947 decoding**","216b32b8":"\u0928\u092e\u0938\u094d\u0924\u0947 has been converted back to string.","715ad07b":"**\u4f60\u597d decoding**","eae40591":"There you go, \u0928\u092e\u0938\u094d\u0924\u0947 has not been correctly encoded.\n\n **** \u0928\u092e\u0938\u094d\u0924\u0947 decoding****\n\nLet us convert our bytes back to a string with the correct encoding.\n","8847cbf1":"However, when we try to use a different encoding to map our bytes into a string,, we get an error. This is because the encoding we're trying to use doesn't know what to do with the bytes we're trying to pass it. You need to tell Python the encoding that the byte string is actually supposed to be in.\n\n> You can think of different encodings as different ways of recording music. You can record the same music on a CD, cassette tape or 8-track. While the music may sound more-or-less the same, you need to use the right equipment to play the music from each recording format. The correct decoder is like a cassette player or a cd player. If you try to play a cassette in a CD player, it just won't work. "}}