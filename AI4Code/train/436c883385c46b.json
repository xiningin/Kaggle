{"cell_type":{"39b20ff9":"code","1b6a1b2c":"code","d76558e9":"code","7025f604":"code","8c125075":"code","b3ebb7e0":"code","942dfe59":"code","903a7523":"code","06010087":"code","10c2b322":"code","43311b16":"code","25e1e8d3":"code","369ffcc9":"code","74e758ad":"code","9ee31a17":"code","7487eb33":"code","50c40a90":"code","ab42f71d":"code","97e47264":"code","5ded85ac":"code","cc54734e":"code","f869ee18":"code","89af8d61":"code","f24fc89e":"code","c7f621b0":"code","20db24b2":"code","05543ea7":"code","55eeb337":"code","30173e9b":"code","274e788a":"code","96207bcd":"code","4f0004e9":"code","36bf82c4":"code","511c30d1":"code","1dea32cb":"markdown","2dba1efc":"markdown","ac5eca84":"markdown","e99359e6":"markdown","50e9760b":"markdown","091c3f38":"markdown","aab25fd2":"markdown","4184ea54":"markdown","9a821f76":"markdown","600a36b6":"markdown"},"source":{"39b20ff9":"# Pandas : librairie de manipulation de donn\u00e9es\n# NumPy : librairie de calcul scientifique\n# MatPlotLib : librairie de visualisation et graphiques\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\nfrom sklearn import metrics\nfrom sklearn import preprocessing\nfrom sklearn import model_selection\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_curve, roc_auc_score,auc, accuracy_score\n\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.model_selection import train_test_split\n\nfrom IPython.core.display import HTML # permet d'afficher du code html dans jupyter","1b6a1b2c":"# Read the dataset\ndf = pd.read_csv(\"..\/input\/creditcardfraud\/creditcard.csv\")","d76558e9":"# Print the four firsts values of each column\ndf.head().T","7025f604":"# Count the number of values of each column\ndf.count()","8c125075":"df.info()","b3ebb7e0":"# Check if exist null values in dataset\ndf.isnull().values.sum()","942dfe59":"df.describe()","903a7523":"df.columns","06010087":"columns = df.columns\ncolumns = columns.drop(['Time'])","10c2b322":"for col in columns :\n    plt.figure(figsize=[10,5])\n    sns.kdeplot(df[col])","43311b16":"from sklearn.model_selection import train_test_split\n\nX = df.drop(['Class'], axis=1)\ny = df.Class\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)","25e1e8d3":"from sklearn import ensemble\n\nrf = ensemble.RandomForestClassifier()\nrf.fit(X_train, y_train)\ny_rf = rf.predict(X_test)","369ffcc9":"print(classification_report(y_test, y_rf))","74e758ad":"cm = confusion_matrix(y_test, y_rf)\nprint(cm)","9ee31a17":"df.Class.value_counts()","7487eb33":"from imblearn.under_sampling import RandomUnderSampler \n\nrus = RandomUnderSampler()\nX_train, y_train = rus.fit_resample(X_train, y_train)","50c40a90":"y_train.value_counts()","ab42f71d":"rf = ensemble.RandomForestClassifier()\nrf.fit(X_train, y_train)\ny_rf = rf.predict(X_test)","97e47264":"print(classification_report(y_test, y_rf))","5ded85ac":"cm = confusion_matrix(y_test, y_rf)\nprint(cm)","cc54734e":"X = df.drop(['Class'], axis=1)\ny = df.Class\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)","f869ee18":"from imblearn.over_sampling import SMOTE\n\nsmote = SMOTE()\nX_train, y_train = smote.fit_resample(X_train, y_train)","89af8d61":"y_train.value_counts()","f24fc89e":"from sklearn import ensemble\nrf = ensemble.RandomForestClassifier()\nrf.fit(X_train, y_train)\ny_rf = rf.predict(X_test)","c7f621b0":"print(classification_report(y_test, y_rf))","20db24b2":"cm = confusion_matrix(y_test, y_rf)\nprint(cm)","05543ea7":"from xgboost import XGBClassifier\nxgb = XGBClassifier()\nxgb.fit(X_train,y_train)\nprint(xgb.score(X_test,y_test))","55eeb337":"y_xgb = xgb.predict(X_test)\n\nprint(classification_report(y_test, y_xgb))","30173e9b":"cm = metrics.confusion_matrix(y_test, y_xgb)\nprint(cm)","274e788a":"X = df.drop(['Class'], axis=1)\ny = df.Class\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)","96207bcd":"df.Class.value_counts()","4f0004e9":"from xgboost import XGBClassifier\nxgb = XGBClassifier(scale_pos_weight=2278\/388)\n# xgb = XGBClassifier()\nxgb.fit(X_train,y_train)\ny_xgb = xgb.predict(X_test)","36bf82c4":"print(classification_report(y_test, y_xgb))","511c30d1":"cm = confusion_matrix(y_test, y_xgb)\nprint(cm)","1dea32cb":"*Ces donn\u00e9es contiennent les transactions effectu\u00e9es par carte de cr\u00e9dit en septembre 2013 par les d\u00e9tenteurs de cartes europ\u00e9ennes.\nCet ensemble de donn\u00e9es pr\u00e9sente les transactions qui ont eu lieu en deux jours, o\u00f9 nous avons 492 fraudes sur 284 807 transactions. L'ensemble de donn\u00e9es est tr\u00e8s d\u00e9s\u00e9quilibr\u00e9, la classe positive (fraudes) repr\u00e9sente 0,172 % de toutes les transactions.*\n\n*Il ne contient que des variables d'entr\u00e9e num\u00e9riques qui sont le r\u00e9sultat d'une transformation ACP (analyse en composantes principales - une m\u00e9thode de r\u00e9duction de dimension). Malheureusement, pour des raisons de confidentialit\u00e9, nous ne pouvons pas fournir les caract\u00e9ristiques originales et plus d'informations sur le contexte des donn\u00e9es. Les caract\u00e9ristiques V1, V2, ... V28 sont les principales composantes obtenues avec l'ACP, les seules caract\u00e9ristiques qui n'ont pas \u00e9t\u00e9 transform\u00e9es avec l'ACP sont \"Temps\" et \"Montant\". La caract\u00e9ristique \"Temps\" contient les secondes \u00e9coul\u00e9es entre chaque transaction et la premi\u00e8re transaction de l'ensemble de donn\u00e9es. La caract\u00e9ristique \"Montant\" est le montant de la transaction, cette caract\u00e9ristique peut \u00eatre utilis\u00e9e par exemple pour l'apprentissage d\u00e9pendant des co\u00fbts. La caract\u00e9ristique \n\"Class\" est la variable de r\u00e9ponse et prend la valeur 1 en cas de fraude et 0 dans le cas contraire.*","2dba1efc":"## Oversampling","ac5eca84":"## Downsampling","e99359e6":"## Random Forest","50e9760b":"Pr\u00e9dire les fraudes \u00e0 la carte bancaire sur le dataset :  \nhttps:\/\/www.kaggle.com\/mlg-ulb\/creditcardfraud","091c3f38":"## Extreme Gradient Boosting : XGBoost with oversampling SMOTE","aab25fd2":"## XGBoost weighted","4184ea54":"# Machine Learning","9a821f76":"# Visualization of dataset","600a36b6":"# Treatement of dataset"}}