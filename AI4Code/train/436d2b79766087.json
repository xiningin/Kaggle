{"cell_type":{"adb39fdd":"code","6e08fd1d":"code","7e4ec648":"code","1c4965f2":"code","4545d488":"code","a96fa1fb":"code","da7e9661":"code","d3e87e54":"code","6fcb7d05":"code","cf617465":"code","1a5ddf9c":"code","e7f7a537":"code","9323d807":"code","6957b61f":"code","b6b63c93":"code","5d27d49d":"code","46fc4068":"code","2b12d5ed":"code","3799598b":"code","8ee4ca5f":"code","946c1e93":"code","e044a4a7":"code","28a4829b":"code","9086bf0a":"code","3cc8a8bc":"code","ac0c7a05":"code","57a92431":"markdown","d92e589a":"markdown","3c69a985":"markdown","a71f0a8e":"markdown"},"source":{"adb39fdd":"'''\nImportando as bbiotecas necess\u00e1rias\n'''\nimport sklearn\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as graphic\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import accuracy_score as acs\nfrom sklearn import preprocessing\nfrom sklearn.metrics import accuracy_score\n","6e08fd1d":"'''\nGuardando as bases de teste e treino\n'''\n\nadultTrain = pd.read_csv(\"\/kaggle\/input\/adult-pmr3508\/train_data.csv\",\n        sep=r'\\s*,\\s*',\n        engine='python',\n        na_values=\"?\")\n\nadultTest = pd.read_csv(\"\/kaggle\/input\/adult-pmr3508\/test_data.csv\")\n","7e4ec648":"adultTest.shape","1c4965f2":"adultTrain.shape","4545d488":"adultTrain.head()","a96fa1fb":"adultTrain[\"native.country\"].value_counts()","da7e9661":"adultTrain[\"age\"].value_counts().plot(kind=\"bar\")","d3e87e54":"adultTrain[\"sex\"].value_counts().plot(kind=\"bar\")","6fcb7d05":"adultTrain[\"education\"].value_counts().plot(kind=\"bar\")","cf617465":"adultTrain[\"occupation\"].value_counts().plot(kind=\"bar\")","1a5ddf9c":"adultTrain[\"income\"].value_counts().plot(kind=\"bar\")","e7f7a537":"adultTrain[\"income\"].value_counts().plot(kind=\"bar\")","9323d807":"adultTrain[\"race\"].value_counts().plot(kind=\"pie\")","6957b61f":"'''\nPrimeiramente devemos eliminar os dados faltantes das bases de teste e de treinamento\n'''\nnTrain = adultTrain.dropna()\nadultTest.set_index('Id',inplace=True)\nnTest = adultTest.dropna()\nnTest.shape","b6b63c93":"nTrain.shape\nnTrain","5d27d49d":"nTest.shape\nnTest","46fc4068":"'''\nTransformando os valores em n\u00famericos\n'''\nnumTrain = nTrain.apply(preprocessing.LabelEncoder().fit_transform)\nnumTest = adultTest.apply(preprocessing.LabelEncoder().fit_transform)","2b12d5ed":"numTrain","3799598b":"numTrain2 = nTrain.apply(preprocessing.LabelEncoder().fit_transform)\nnumTrain2.corr()","8ee4ca5f":"'''\nPegando os valores que tem correla\u00e7\u00e3o positiva com o income temos:\n\nPegando s\u00f3mente as colunas n\u00famericas:\n'''\nxTrain = numTrain[[\"age\", \"workclass\", \"education\",\"education.num\",\n        \"occupation\", \"race\", \"sex\", \"capital.gain\", \"capital.loss\",\n        \"hours.per.week\", \"native.country\"]]\nYTrain = nTrain.income\n\n'''\nPegando os Targets do Test data:\n'''\nxTest = numTest[[\"age\", \"workclass\", \"education\",\"education.num\",\n        \"occupation\", \"race\", \"sex\", \"capital.gain\", \"capital.loss\",\n        \"hours.per.week\", \"native.country\"]]\n#YTest = numTest.income\n","946c1e93":"def mediaKNN (K,CV,Xadult, Yadult):\n    '''\n    Essa fun\u00e7\u00e3o calcula a m\u00e9dia dos scores para CV foldes eilizando k neighbors \n    '''\n    knn = KNeighborsClassifier(n_neighbors= K )\n    scores = cross_val_score(knn, Xadult, Yadult, cv=CV)\n    average = 0\n    for i in scores:\n        average += i\n    average = average\/len(scores)\n    return average , scores , K \n    ","e044a4a7":"'''\nmediaMax = 0 \nK = 0\nScores = [0]\nfor i in range (1,31):\n    average,Pscores,PK =  mediaKNN (i,10,xTrain, YTrain)\n    if average>mediaMax:\n        mediaMax = average\n        K = PK\n        Scores = Pscores\nprint (mediaMax)\nprint (K)\nprint (Scores)\n'''","28a4829b":"knn = KNeighborsClassifier(n_neighbors = 30 )# o Trinta foi definido pelo c\u00f3digo acima\nknn.fit(xTrain,YTrain)","9086bf0a":"YtestPred = knn.predict(xTest)","3cc8a8bc":"#accuracy_score(YTest,YtestPred)","ac0c7a05":"savepath = \"predictions1.csv\"\nprev = pd.DataFrame(YtestPred, columns = [\"income\"])\nprev.to_csv(savepath, index_label=\"Id\")\nprev","57a92431":"**Parte 1 :** An\u00e1lise dos Dados","d92e589a":"**Parte 2 :** classificador KNN \n","3c69a985":"**PMR-3508 Aprendizado de M\u00e1quina e Reconhecimento de Padr\u00f5es (2019)**\n\nAn\u00e1lise: Base Adult\n\nAutor: Thiago Lam Brawerman\n\nNUSP: 10770502","a71f0a8e":"- Dados de treino"}}