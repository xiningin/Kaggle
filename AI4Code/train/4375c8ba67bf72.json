{"cell_type":{"43c88c54":"code","ab35b1d9":"code","788b4c49":"code","6ec586af":"code","053fd4a0":"code","d15d9da9":"code","d3606f5e":"code","4124d1bb":"code","a9219b5b":"code","90ba4714":"code","bb46269d":"code","a51ccd20":"code","81496b16":"code","1206608c":"code","cedbe92b":"code","7069d190":"code","f553a20d":"code","b1b48d85":"code","a554c73c":"code","a5d79b3e":"code","f4a10539":"code","da137b41":"code","ac04eed9":"code","871d0cbf":"code","256f33b9":"code","2b1732be":"code","aa4d3faf":"code","df7b93c3":"code","c4a45f0a":"code","867e456e":"code","0edb98b7":"code","cfb11916":"code","3a464a8f":"code","426ece21":"code","a9c10996":"code","dc326b54":"code","df711ec3":"code","e3e55394":"code","87833d1a":"code","0cf3c12a":"code","5c05110d":"code","5f9aa839":"code","e8a8de9a":"code","8f714b85":"code","5e664314":"code","21b6c0bf":"code","40e2f8be":"code","ac55cde0":"code","cde17047":"code","8c9e2006":"code","e50c8fb8":"code","674f22fd":"code","b722b2a5":"code","5865d3e7":"code","1aef27b6":"code","84c71994":"code","846194dc":"code","d8ae62d1":"code","461b2a26":"code","f1629b6b":"code","d23a683b":"code","dab42f59":"code","0d1cd10b":"code","126c1caf":"code","53f184e2":"code","32334a69":"code","d78c0847":"code","7f782928":"code","578c3cf4":"code","15b1d34f":"code","9a674b12":"code","0e619e59":"code","05a7012e":"code","92227bf2":"code","5e6435b7":"code","5a8862a5":"code","9afd3d1e":"code","0fadc6df":"code","786335d2":"code","4c76f1e6":"code","b0c6f74f":"code","ffff7144":"code","0db763f5":"code","5d9fa0a2":"code","055da8d5":"code","7ddcb14f":"code","5ce156da":"code","e9ed24a0":"code","830ce9fc":"code","8ebd0dca":"code","321d42e1":"code","c1dc0186":"code","055abd45":"code","6c86b5a2":"code","2ca22e32":"code","5a276520":"code","6e977b91":"code","70872288":"code","6f9a3959":"code","bd5c0612":"code","00c11ff3":"code","85b8c339":"code","2b29e5e4":"code","e7864348":"code","8c9c26e4":"code","2c8f4b65":"code","e06cfd51":"code","12fe3672":"code","d4b84c2a":"code","f1d39486":"code","851b5855":"code","b3e42cb6":"code","aed91fc6":"code","32ffbf6c":"code","345cbfc7":"code","9459962b":"code","16dbd485":"code","fe273998":"code","c905826d":"code","f7f7ce5b":"code","12a0c87d":"code","ec5da95f":"code","69d9ede5":"code","d74dcb5a":"code","1c8206fb":"code","b2d4fce5":"code","85f6dad3":"code","09ce9246":"code","48a85b4a":"code","c0a2b412":"code","67f76292":"code","0535e18b":"code","8ba75b81":"code","2a311d24":"code","f4296eb4":"code","c62df984":"code","cc482b89":"code","f8d69b97":"code","9603fa67":"code","f31211c3":"markdown","8386f342":"markdown","399b77fb":"markdown","c2936546":"markdown","81e7b246":"markdown","317cc49b":"markdown","3fcbfa87":"markdown","18a0a7b5":"markdown","886f235c":"markdown","b81a4d0d":"markdown","cfa33412":"markdown","125f5f05":"markdown"},"source":{"43c88c54":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","ab35b1d9":"train = pd.read_excel('..\/input\/Data_Train.xlsx')\ntest = pd.read_excel('..\/input\/Data_Test.xlsx')\nexample = pd.read_excel('..\/input\/Sample_submission.xlsx')","788b4c49":"train.head()","6ec586af":"test.head()","053fd4a0":"example.head()","d15d9da9":"print('Training dataset has {} row and {} columns'.format(train.shape[0], train.shape[1]))\nprint('Testing dataset has {} row and {} columns'.format(test.shape[0], test.shape[1]))","d3606f5e":"train.describe()","4124d1bb":"train.info()","a9219b5b":"test.info()","90ba4714":"combined = train.append(test, ignore_index=True, sort=False)","bb46269d":"combined.shape","a51ccd20":"combined.head()","81496b16":"combined.tail()","1206608c":"train_locations = train.Location.unique()\nprint(train_locations)","cedbe92b":"all_locations = combined.Location.unique()\nprint(all_locations)","7069d190":"train_car_names = train.Name.unique()\nprint('There are {} car models in our dataset'.format(len(train_car_names)))","f553a20d":"all_car_names = combined.Name.unique()\nprint('There are {} car models in our dataset'.format(len(all_car_names)))","b1b48d85":"car_counts = {}\nfor car in combined.Name:\n    if car not in car_counts:\n        car_counts[car] = 1\n    else:\n        car_counts[car] += 1\n        \nprint(len(car_counts))","a554c73c":"car_count_df = pd.DataFrame.from_dict(car_counts, orient='index', columns=['Count'])\ncar_count_df.head()","a5d79b3e":"car_count_df = car_count_df.sort_values(by='Count', ascending=False)\ncar_count_df.head()","f4a10539":"plt.figure(figsize=(15,8))\nax = sns.barplot(data=car_count_df.iloc[:50], x=car_count_df.iloc[:50].index, y='Count')\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n             rotation_mode=\"anchor\")\nplt.show()","da137b41":"location_price = train.groupby(by='Location').mean()['Price']\nlocation_price","ac04eed9":"plt.figure(figsize=(12,6))\nlocation_price.plot(kind='bar', grid=True, rot=0, )\nplt.ylabel('Average Price (in lakhs)')\nplt.show()","871d0cbf":"all_location_count = combined.groupby(by='Location').count()['Name']\nall_location_count","256f33b9":"train_location_count = train.groupby(by='Location').count()['Name']\ntrain_location_count","2b1732be":"plt.figure(figsize=(12,6))\nall_location_count.plot(kind='bar', grid=True, rot=0, )\nplt.ylabel('No. of cars in complete dataset')\nplt.show()","aa4d3faf":"plt.figure(figsize=(12,6))\ntrain_location_count.plot(kind='bar', grid=True, rot=0, )\nplt.ylabel('No. of cars in train dataset')\nplt.show()","df7b93c3":"train.groupby(['Fuel_Type'])['Price'].mean().plot.bar(title = 'Average price vs Fuel type', rot=0)\nplt.show()","c4a45f0a":"train.groupby(['Year'])['Price'].mean().plot.bar(title = 'Average price vs Year')\nplt.show()","867e456e":"train.groupby(['Owner_Type'])['Price'].mean().plot.bar(title = 'Average price vs Owner Type', rot=0)\nplt.show()","0edb98b7":"combined.insert(1, 'Company', combined.Name.apply(lambda x : str.title(x).split()[0]))","cfb11916":"combined.head()","3a464a8f":"plt.figure(figsize=(15,4))\ncombined.groupby(['Company'])['Price'].mean().plot.bar(title = 'Average price vs Company', rot=45)\nplt.show()","426ece21":"plt.figure(figsize=(15,4))\ncombined.groupby(['Company'])['Name'].count().plot.bar(title = 'Number of Cars per Company', rot=45)\nplt.show()","a9c10996":"sns.distplot(train.Price)\nplt.show()","dc326b54":"train.plot.scatter(y = 'Price', x='Kilometers_Driven', rot=45)\nplt.show()","df711ec3":"combined[combined.Kilometers_Driven > 6000000]","e3e55394":"combined.loc[2328, 'Kilometers_Driven'] = 65000","87833d1a":"combined.loc[2328]","0cf3c12a":"combined[combined.Kilometers_Driven > 400000]","5c05110d":"train.New_Price.unique()","5f9aa839":"train.dtypes","e8a8de9a":"combined.New_Price = combined.New_Price.fillna(0)","8f714b85":"def clean_price(price):\n    \n    '''Converts Prices to floats'''\n    \n    if price == 0:\n        return price\n    \n    elif 'Cr' in price:\n        price = price.split()[0]\n        new_price = float(price)*1000\n        return new_price\n    \n    else:\n        new_price = float(price.split()[0])\n        return new_price\n\ncombined.New_Price = combined.New_Price.apply(lambda x : clean_price(x))","5e664314":"combined[combined.New_Price != 0]","21b6c0bf":"combined[combined.New_Price == 0]","40e2f8be":"combined[combined.New_Price == 0].shape","ac55cde0":"combined.Mileage.unique()","cde17047":"combined[combined.Mileage.str.contains('km\/kg') == True]","8c9e2006":"cng_per_kg = 51.57\nlpg_per_kg = 49.96 #(709.50\/14.2)\ndiesel_per_ltr = 67.40\npetrol_per_ltr = 76.15\n\ndef convert_mileage(data):\n    #print(data)\n    #print(type(data))\n    if data.Fuel_Type == 'CNG':\n        data.Mileage = float(data.Mileage.split()[0]) \/ cng_per_kg\n\n    elif data.Fuel_Type == 'LPG':\n        data.Mileage = float(data.Mileage.split()[0]) \/ lpg_per_kg\n        \n    elif data.Fuel_Type == 'Petrol':\n        data.Mileage = float(data.Mileage.split()[0]) \/ petrol_per_ltr\n        \n    elif data.Fuel_Type == 'Diesel':\n        data.Mileage = float(data.Mileage.split()[0]) \/ diesel_per_ltr\n        \n    return data","e50c8fb8":"combined = combined.apply(lambda x:convert_mileage(x), axis=1)","674f22fd":"combined.Mileage.unique()","b722b2a5":"combined[combined.Mileage == 0]","5865d3e7":"combined[combined.Mileage == 0].index","1aef27b6":"train.iloc[[  14,   67,   79,  194,  229,  262,  307,  424,  443,  544,  631,\n             647,  707,  749,  915,  962,  996, 1059, 1259, 1271, 1308, 1345,\n            1354, 1385, 1419, 1460, 1764, 1857, 2053, 2096, 2130, 2267, 2343,\n            2542, 2597, 2681, 2780, 2842, 3033, 3044, 3061, 3093, 3189, 3210,\n            3271, 3516, 3522, 3645, 4152, 4234, 4302, 4412, 4629, 4687, 4704,\n            5016, 5022, 5119, 5270, 5311, 5374, 5426, 5529, 5647, 5875, 5943,\n            5972, 6011]]","84c71994":"combined[combined.Mileage == 0].shape","846194dc":"combined.Mileage = combined.Mileage.fillna(0)","d8ae62d1":"combined[combined.Mileage == 0].shape","461b2a26":"combined[combined.Mileage == 0]","f1629b6b":"combined.head(10)","d23a683b":"def clean_engine_power(data):\n    \n    #print(data.Engine, data.Power)\n    data.Engine = data.Engine.split()[0]\n    data.Power = data.Power.split()[0]\n    \n    return data","dab42f59":"combined.Engine = combined.Engine.fillna('0 CC')\ncombined.Power = combined.Power.fillna('0 bhp')","0d1cd10b":"combined[combined.Engine == '0 CC']","126c1caf":"combined = combined.apply(lambda x: clean_engine_power(x), axis=1)","53f184e2":"combined.Engine.unique()","32334a69":"len(combined.Engine.unique())","d78c0847":"combined[combined.Engine == '0']","7f782928":"combined[combined.Engine == '0'].shape","578c3cf4":"combined.Power.unique()","15b1d34f":"combined[combined.Power == 'null'].shape","9a674b12":"combined[combined.Power == '0'].shape","0e619e59":"combined.Power = combined.Power.replace('null', '0')","05a7012e":"combined[combined.Power == '0'].shape","92227bf2":"combined.Power.unique()","5e6435b7":"combined.head()","5a8862a5":"combined.Power.unique()","9afd3d1e":"combined[combined.Power == '0']","0fadc6df":"combined[combined.Power == '0'].shape","786335d2":"combined.Seats.unique()","4c76f1e6":"combined.Seats = combined.Seats.fillna(99)","b0c6f74f":"combined[combined.Seats == 99 ].index","ffff7144":"combined.Seats = combined.Seats.replace(99, np.NaN)","0db763f5":"combined.Seats.unique()","5d9fa0a2":"combined.Seats = combined.Seats.interpolate('nearest')","055da8d5":"combined.Seats.unique()","7ddcb14f":"combined[combined.Seats == 10.]","5ce156da":"train.iloc[[ 194,  208,  229,  733,  749, 1294, 1327, 1385, 1460, 1917, 2074,\n            2096, 2264, 2325, 2335, 2369, 2530, 2542, 2623, 2668, 2737, 2780,\n            2842, 3272, 3404, 3520, 3522, 3800, 3810, 3882, 4011, 4152, 4229,\n            4577, 4604, 4697, 4712, 4952, 5015, 5185, 5270, 5893]]","e9ed24a0":"combined[combined.Seats == 0.]","830ce9fc":"combined.iloc[3999, combined.columns.get_loc('Seats')] = 5.0","8ebd0dca":"combined.iloc[3999]","321d42e1":"combined[['Engine', 'Power']] = combined[['Engine', 'Power']].apply(pd.to_numeric)","c1dc0186":"combined.dtypes","055abd45":"categories = ['Location', 'Company', 'Year', 'Fuel_Type', 'Transmission', \n              'Owner_Type', 'Seats',]\n\nfor cols in categories:\n    combined[cols] = combined[cols].astype('category')","6c86b5a2":"combined.dtypes","2ca22e32":"combined.describe()","5a276520":"combined.info()","6e977b91":"combined.isnull().sum(axis=0)","70872288":"combined = combined.apply(lambda x : x.replace(0, np.NaN))","6f9a3959":"combined.isnull().sum(axis=0)","bd5c0612":"from sklearn.impute import SimpleImputer\nimputer = SimpleImputer(missing_values = np.nan, strategy = 'mean')\n\ncols_impute = ['Mileage', 'Engine', 'Power']\ncombined[cols_impute] = imputer.fit_transform(combined[cols_impute])","00c11ff3":"combined.isnull().sum()","85b8c339":"combined.columns","2b29e5e4":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()","e7864348":"cols_clean = ['Company', 'Location', 'Year', 'Kilometers_Driven', 'Fuel_Type',\n       'Transmission', 'Owner_Type', 'Mileage', 'Engine', 'Power', 'Seats',\n       'New_Price', 'Price']\ncombined_clean = combined[cols_clean]","8c9c26e4":"combined_clean[['Kilometers_Driven', 'Mileage', 'Engine', ]] = ","2c8f4b65":"combined_clean = pd.get_dummies(combined_clean, drop_first=True)","e06cfd51":"combined_clean.shape","12fe3672":"combined_clean.describe()","d4b84c2a":"combined_clean.info()","f1d39486":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()","851b5855":"combined_clean = scaler.fit_transform(combined_clean)","b3e42cb6":"df_new_price = combined_clean.drop(['Price'], axis=1).sort_values(by='New_Price', ascending=False).reset_index(drop=True)\ndf_new_price.head()","aed91fc6":"df_new_price.tail()","32ffbf6c":"df_new_price.isnull().sum()","345cbfc7":"7253-6247","9459962b":"df_new_price.iloc[1005]","16dbd485":"df_new_price.iloc[1006]","fe273998":"train_new_price = df_new_price.iloc[:1006]\ntest_new_price = df_new_price.iloc[1006:]","c905826d":"x_train_new_price = train_new_price.drop(['New_Price'], axis=1)\ny_train_new_price = train_new_price['New_Price']","f7f7ce5b":"print(x_train_new_price.shape, y_train_new_price.shape)","12a0c87d":"from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nlr = LinearRegression()","ec5da95f":"x_train, x_test, y_train, y_test = train_test_split(x_train_new_price, y_train_new_price, test_size=0.3, random_state = 11)","69d9ede5":"lr.fit(x_train, y_train)","d74dcb5a":"\nlr = LinearRegression()","1c8206fb":"#pd.get_dummies(train_new)\ntrain_new.isnu","b2d4fce5":"train_columns = ['Name', 'Location', 'Company', 'Year', 'Kilometers_Driven', 'Fuel_Type',\n                 'Transmission', 'Owner_Type', 'Mileage', 'Engine', 'Power', 'Seats']\n#df_train = train[train_columns]\n#y_new_price = train['New_Price']\n#y_price = train['Price']","85f6dad3":"df_train.Location.unique()","09ce9246":"df_train.Year.unique()","48a85b4a":"df_train.Fuel_Type.unique()","c0a2b412":"df_train.Transmission.unique()","67f76292":"df_train.Owner_Type.unique()","0535e18b":"df_train.Mileage.unique()","8ba75b81":"df_train.Engine.unique()","2a311d24":"df_train.Power.unique()","f4296eb4":"df_train[df_train.Seats == df_train.Seats.unique()[-1]]","c62df984":"df_train.isnull().sum()","cc482b89":"print(train.shape)\nprint(y_new_price.shape)\nprint(y_price.shape)","f8d69b97":"df_train.head()","9603fa67":"y_new_price.isnull().sum()","f31211c3":"Audi A4 is a 5 seater car","8386f342":"Before starting data pre-processing let us combine both train and test data sets.","399b77fb":"Most of the entries in New_Price columns are empty","c2936546":"This kernel is an attempt to explain my approach on Imarticus Car price prediction Hackathon.","81e7b246":"Kilometers driven shown for above car seems to be insane and probably impossible. So we set to a more likely value like 65000 kms","317cc49b":"There are lots of missing values in New Price column.","3fcbfa87":"Most simplest one I could think of was to convert Mileage to Cost per km. For this I used prices of CNG, LPG, Petrol and Diesel in Mumbai, since as per our training dataset Mumbai has most number of cars.","18a0a7b5":"### Observations\n\n- We have to predict the Price\n- Train and test datasets has New Price column which has missing values.\n","886f235c":"## Data Inspection[](http:\/\/)","b81a4d0d":"### Modelling to predict New Price","cfa33412":"We can see that in Mileage column there are two units of measurement kmpl and km\/kg. Let us have a look into it.","125f5f05":"It is clear that km\/kg unit is for cars with CNG\/LPG as fuel. Now we have to do an effective conversion of these to a common metric"}}