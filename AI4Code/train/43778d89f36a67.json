{"cell_type":{"e6ca8045":"code","e3c4bc14":"code","e5a119b2":"code","d592a1d4":"code","82acf677":"code","16c5eb6d":"code","7ceee207":"code","ed367aa8":"code","677abad6":"code","89953728":"code","ff757890":"code","413ba66e":"code","60d764c4":"code","7bcf6756":"code","afb98cc9":"code","2b398a03":"code","aace2377":"code","c1ddcf2b":"code","0b9c16b7":"code","4f027be4":"code","d44dea87":"code","ba04f520":"code","987e3321":"markdown","fb7444d5":"markdown","b3d41eaa":"markdown","91c140ad":"markdown","a02354da":"markdown"},"source":{"e6ca8045":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e3c4bc14":"data_test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv',index_col='Id')\ndata_train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv',index_col='Id')\ndata_train","e5a119b2":"data_train.describe()","d592a1d4":"for i in data_train.columns:    \n    print(i ,': ',data_train[i].isnull().sum())","82acf677":"cols_with_missing_train = [col for col in data_train.columns\n                     if data_train[col].isnull().any()]\ncols_with_missing_test = [col for col in data_test.columns\n                     if data_test[col].isnull().any()]\n#print(cols_with_missing_train)\n#print('----------------------')\n#print(cols_with_missing_test)\n#print(set(cols_with_missing_test) - set(cols_with_missing_train))\nall_missing_columns = cols_with_missing_train + cols_with_missing_test\nprint(len(all_missing_columns))\n#Drop columns in training and validation data\ndata_train.drop(all_missing_columns, axis=1,inplace=True)\ndata_test.drop(all_missing_columns, axis=1,inplace=True)","16c5eb6d":"# Get  columns whose data type is object i.e. string\nfilteredColumns = data_train.dtypes[data_train.dtypes == np.object]\n# list of columns whose data type is object i.e. string\n#print(filteredColumns.index)\nlistOfColumnNames = list(filteredColumns.index)\nprint(listOfColumnNames)\ndata_train.drop(listOfColumnNames, axis=1,inplace=True)\ndata_test.drop(listOfColumnNames, axis=1,inplace=True)","7ceee207":"data_train","ed367aa8":"#for i in data_train.columns:    \n #   print(i ,': ',len(data_train[i].unique()))\n#len(data_train.Name.unique)","677abad6":"y = data_train.SalePrice\n#############################\nX = data_train.drop(columns=['SalePrice'])","89953728":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y)","ff757890":"from xgboost import XGBRegressor\nfrom sklearn.metrics import mean_absolute_error ,explained_variance_score, mean_squared_error\nfrom sklearn.ensemble import RandomForestRegressor","413ba66e":"\nparameters = {'max_depth':  [6, 10, 15],\n              'max_leaf_nodes': [30,50,100],\n              'n_estimators': [400,500]}\n\nfrom sklearn.model_selection import GridSearchCV\n\ngsearch = GridSearchCV(estimator=RandomForestRegressor(),\n                       param_grid = parameters, \n                       scoring='neg_mean_absolute_error',\n                       n_jobs=4,cv=5,verbose=7)\n\ngsearch.fit(X_train, y_train)\n\n","60d764c4":"print (gsearch.best_params_.get('n_estimators'))\nprint(gsearch.best_params_.get('max_depth'))","7bcf6756":"'''parameters_final = {'learning_rate': gsearch.best_params_.get('learning_rate'), #so called `eta` value''\n              'max_depth': gsearch.best_params_.get('max_depth'),\n              'min_child_weight': gsearch.best_params_.get('min_child_weight'),\n              'subsample': gsearch.best_params_.get('subsample'),\n              'n_estimators': gsearch.best_params_.get('n_estimators')}'''","afb98cc9":"my_model = RandomForestRegressor(\n                         max_depth = gsearch.best_params_.get('max_depth'),\n                           max_leaf_nodes = gsearch.best_params_.get('max_leaf_nodes'),\n              n_estimators = gsearch.best_params_.get('n_estimators'),random_state=1, n_jobs=4)\nmy_model.fit(X_train, y_train)\npredictions = my_model.predict(X_test)\nmean_Error = mean_absolute_error(y_true=y_test,y_pred = predictions)\nprint(mean_Error)","2b398a03":"''' my_model = XGBRegressor(learning_rate = gsearch.best_params_.get('learning_rate'),\n                         max_depth = gsearch.best_params_.get('max_depth'),\n                           min_child_weight = gsearch.best_params_.get('min_child_weight'),\n                           subsample = gsearch.best_params_.get('subsample'),\n              n_estimators = gsearch.best_params_.get('n_estimators'),random_state=1, n_jobs=4)\nmy_model.fit(X_train, y_train)\npredictions = my_model.predict(X_test)\nmean_Error = mean_absolute_error(y_true=y_test,y_pred = predictions)\nprint(mean_Error)'''","aace2377":"def getBestScore(n_est):\n    my_model = RandomForestRegressor(n_estimators=n_est,random_state=1,learning_rate=0.05, n_jobs=4)\n    my_model.fit(X_train, y_train)\n    predictions = my_model.predict(X_test)\n    mean_Error = mean_absolute_error(y_true=y_test,y_pred = predictions)\n    return mean_Error \n","c1ddcf2b":"###","0b9c16b7":"#explained_variance_score\n#range_Estimation = getBestScore(1)\n#minEstim = 1\n#for i in range(1,100,1):\n    #print(getBestScore(i),'*-*',i)\n #   if range_Estimation > getBestScore(i):\n  #      minEstim = i\n#print(range_Estimation,'>>>',minEstim)\n##### 196 is the best...'''","4f027be4":"final_model = RandomForestRegressor(\n                         max_depth = gsearch.best_params_.get('max_depth'),\n                           max_leaf_nodes = gsearch.best_params_.get('max_leaf_nodes'),\n              n_estimators = gsearch.best_params_.get('n_estimators'),random_state=1, n_jobs=4)\n\nfinal_model.fit(X, y)\npredictions = final_model.predict(X)\n#print(predictions)\n#mean_absolute_error(y_true=y , y_pred = predictions)\n#print(predictions[:5])\n#print(y[:5])","d44dea87":"data_test","ba04f520":"test_preds = final_model.predict(data_test)\noutput = pd.DataFrame({'Id': data_test.index,\n                       'SalePrice': test_preds})\noutput.to_csv('submission.csv', index=False)\nprint('Done')","987e3321":"# Drop any column content datatype is String or object","fb7444d5":"# Drop any column have missing value","b3d41eaa":"# View the sum of empty values in each column.","91c140ad":"# Read DataSet & Show data_train","a02354da":"# Show describe()"}}