{"cell_type":{"d2554aff":"code","e3c724ba":"code","9be6aa83":"code","f74a78d8":"code","0c092369":"code","2761781f":"code","d29dd531":"code","efd75e5a":"code","d0965f19":"code","6e7041db":"code","8a9e35e5":"code","8a4a9dce":"code","29bdee04":"code","57d1ae88":"code","3eb22cb0":"code","a3245caa":"code","48097fa7":"code","84bc68b6":"code","377d7427":"code","da2b1dd5":"code","6c28f834":"code","a0a84fdb":"code","77e2b870":"code","4f2eba9e":"code","eaa88401":"code","ff3c31e0":"code","0f45a335":"code","caa4e869":"code","8d237668":"code","93c0822d":"code","dd26a9bc":"code","25a66a67":"code","1dd122e6":"code","4d62ee9a":"code","665dab4d":"code","28b3ba6f":"code","53bf0c8c":"code","e22dc6a8":"code","da627ade":"code","b64416ab":"code","94ceeeb4":"code","994082a3":"code","d8b51a61":"code","0e7d426f":"code","8f8392cf":"code","a2c7e42f":"code","3980bfde":"code","b48e3721":"code","fd9e1c57":"code","cae4be46":"code","acb15f25":"code","a44abf53":"code","5e66ce20":"code","412b4b11":"code","7252ac95":"code","9f3151a5":"code","cb298aef":"code","298bacc4":"code","996d66b6":"code","2964109a":"code","40ae76c4":"code","5283d3e9":"code","f841b737":"code","0d9a5500":"code","bcbda1c3":"code","eee8c030":"code","d955a661":"code","870c5245":"code","05fce507":"code","39f61650":"code","b2d52b19":"code","2f127b6d":"code","e05491c2":"code","b9c2dfae":"code","1873988e":"code","3af427c7":"code","d033499c":"code","4305ad7c":"code","52d8d9cb":"code","aeb3fd22":"code","a959d57b":"code","6cd4752b":"code","1df76a48":"code","761532d9":"code","9f72e3f9":"code","f2aee5a3":"code","c233163f":"code","cc35285f":"code","050c3249":"code","ad778f6a":"code","e5705194":"markdown","5ebd1179":"markdown","84ee67e7":"markdown","29ea0d60":"markdown","09103665":"markdown","187ee92c":"markdown","c4ed4302":"markdown","b7f7c724":"markdown","9ec1a566":"markdown","3ff1f353":"markdown","ed788082":"markdown","903cd0d8":"markdown","132246b6":"markdown","8d342c82":"markdown","27347213":"markdown","33f277b8":"markdown","e3d0c57a":"markdown","9c063df2":"markdown"},"source":{"d2554aff":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-whitegrid')\n\nimport seaborn as sns\n\nfrom collections import Counter\n\n#from sklearn.cross_validation import train_test_split\nfrom sklearn.model_selection import train_test_split\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e3c724ba":"data = pd.read_csv(\"..\/input\/lung-cancer\/survey lung cancer.csv\")  ","9be6aa83":"train_df = data.copy()","f74a78d8":"train_df.columns","0c092369":"train_df.head()","2761781f":"train_df.describe()","d29dd531":"train_df.info()","efd75e5a":"train_df.info()","d0965f19":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable], bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","6e7041db":"numericVar = [\"AGE\"]\nfor n in numericVar:\n    plot_hist(n)","8a9e35e5":"def bar_plot(variable):\n\n    var = train_df[variable]\n    varValue = var.value_counts()\n    \n    # g\u00f6rselle\u015ftirme\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))","8a4a9dce":"category1 = [\"GENDER\",\"SMOKING\",\"YELLOW_FINGERS\",\"ANXIETY\",\"PEER_PRESSURE\", \"CHRONIC DISEASE\",\"FATIGUE \", \"ALLERGY \", \"WHEEZING\", \"ALCOHOL CONSUMING\", \"COUGHING\", \"SHORTNESS OF BREATH\", \"SWALLOWING DIFFICULTY\", \"CHEST PAIN\", \"LUNG_CANCER\"]\nfor c in category1:\n    bar_plot(c)","29bdee04":"train_df.info()","57d1ae88":"train_df[\"GENDER\"] = train_df[\"GENDER\"].map({\"F\": 0, \"M\": 1})\ntrain_df['LUNG_CANCER']= train_df['LUNG_CANCER'].map({'NO':0, \"YES\":1})","3eb22cb0":"train_df.info()","a3245caa":"plt.figure(figsize = (20, 25))\nplotnumber = 1\nfor column in train_df:\n    if plotnumber <= 16:\n        ax = plt.subplot(4, 4, plotnumber)\n        sns.distplot(train_df[column])\n        plt.xlabel(column, fontsize = 15)\n        \n    plotnumber += 1\nplt.show()","48097fa7":"sns.pairplot(train_df,hue='LUNG_CANCER')\nplt.legend()\nplt.show()","84bc68b6":"train_df[\"LUNG_CANCER\"].value_counts()","377d7427":"#bo\u015f\/kay\u0131p veri var m\u0131,hangi feature larda var diye kontrol ediyorum, varsa ona g\u00f6re dolduraca\u011f\u0131m \nprint(\"Number of cells with null values: \" , train_df.isnull().sum().sum())","da2b1dd5":"print(\"Number of cells with null values: \" , train_df.duplicated().sum())","6c28f834":"df = train_df.drop_duplicates()","a0a84fdb":"train_df[[\"GENDER\",\"LUNG_CANCER\"]].groupby([\"GENDER\"], as_index = False).mean()","77e2b870":"g = sns.factorplot(x = \"GENDER\", y = \"LUNG_CANCER\", data = train_df, kind = \"bar\", size = 4)\ng.set_ylabels(\"Lung Cancer Probability\")\nplt.show()","4f2eba9e":"train_df[[\"AGE\",\"LUNG_CANCER\"]].groupby([\"AGE\"], as_index = False).mean().sort_values(by=\"LUNG_CANCER\",ascending = False )\n","eaa88401":"g = sns.FacetGrid(train_df, col = \"LUNG_CANCER\")\ng.map(sns.distplot, \"AGE\", bins = 20)\nplt.show()","ff3c31e0":"train_df[[\"SMOKING\",\"LUNG_CANCER\"]].groupby([\"SMOKING\"], as_index = False).mean()","0f45a335":"g = sns.factorplot(x = \"SMOKING\", y = \"LUNG_CANCER\", data = train_df, kind = \"bar\", size = 4)\ng.set_ylabels(\"Lung Cancer Probability\")\nplt.show()","caa4e869":"train_df[[\"YELLOW_FINGERS\",\"LUNG_CANCER\"]].groupby([\"YELLOW_FINGERS\"], as_index = False).mean()","8d237668":"g = sns.factorplot(x = \"YELLOW_FINGERS\", y = \"LUNG_CANCER\", data = train_df, kind = \"bar\", size = 4)\ng.set_ylabels(\"Lung Cancer Probability\")\nplt.show()","93c0822d":"train_df[[\"ANXIETY\",\"LUNG_CANCER\"]].groupby([\"ANXIETY\"], as_index = False).mean()","dd26a9bc":"g = sns.factorplot(x = \"ANXIETY\", y = \"LUNG_CANCER\", data = train_df, kind = \"bar\", size = 4)\ng.set_ylabels(\"Lung Cancer Probability\")\nplt.show()","25a66a67":"train_df[[\"PEER_PRESSURE\",\"LUNG_CANCER\"]].groupby([\"PEER_PRESSURE\"], as_index = False).mean()","1dd122e6":"g = sns.factorplot(x = \"PEER_PRESSURE\", y = \"LUNG_CANCER\", data = train_df, kind = \"bar\", size = 4)\ng.set_ylabels(\"Lung Cancer Probability\")\nplt.show()","4d62ee9a":"train_df[[\"CHRONIC DISEASE\",\"LUNG_CANCER\"]].groupby([\"CHRONIC DISEASE\"], as_index = False).mean()","665dab4d":"g = sns.factorplot(x = \"CHRONIC DISEASE\", y = \"LUNG_CANCER\", data = train_df, kind = \"bar\", size = 4)\ng.set_ylabels(\"Lung Cancer Probability\")\nplt.show()","28b3ba6f":"train_df[[\"FATIGUE \",\"LUNG_CANCER\"]].groupby([\"FATIGUE \"], as_index = False).mean()","53bf0c8c":"g = sns.factorplot(x = \"FATIGUE \", y = \"LUNG_CANCER\", data = train_df, kind = \"bar\", size = 4)\ng.set_ylabels(\"Lung Cancer Probability\")\nplt.show()","e22dc6a8":"train_df[[\"ALLERGY \",\"LUNG_CANCER\"]].groupby([\"ALLERGY \"], as_index = False).mean()","da627ade":"g = sns.factorplot(x = \"ALLERGY \", y = \"LUNG_CANCER\", data = train_df, kind = \"bar\", size = 4)\ng.set_ylabels(\"Lung Cancer Probability\")\nplt.show()","b64416ab":"train_df[[\"WHEEZING\",\"LUNG_CANCER\"]].groupby([\"WHEEZING\"], as_index = False).mean()","94ceeeb4":"g = sns.factorplot(x = \"WHEEZING\", y = \"LUNG_CANCER\", data = train_df, kind = \"bar\", size = 4)\ng.set_ylabels(\"Lung Cancer Probability\")\nplt.show()","994082a3":"train_df[[\"ALCOHOL CONSUMING\",\"LUNG_CANCER\"]].groupby([\"ALCOHOL CONSUMING\"], as_index = False).mean()","d8b51a61":"g = sns.factorplot(x = \"ALCOHOL CONSUMING\", y = \"LUNG_CANCER\", data = train_df, kind = \"bar\", size = 4)\ng.set_ylabels(\"Lung Cancer Probability\")\nplt.show()","0e7d426f":"train_df[[\"COUGHING\",\"LUNG_CANCER\"]].groupby([\"COUGHING\"], as_index = False).mean()","8f8392cf":"g = sns.factorplot(x = \"COUGHING\", y = \"LUNG_CANCER\", data = train_df, kind = \"bar\", size = 4)\ng.set_ylabels(\"Lung Cancer Probability\")\nplt.show()","a2c7e42f":"train_df[[\"SHORTNESS OF BREATH\",\"LUNG_CANCER\"]].groupby([\"SHORTNESS OF BREATH\"], as_index = False).mean()\n","3980bfde":"g = sns.factorplot(x = \"SHORTNESS OF BREATH\", y = \"LUNG_CANCER\", data = train_df, kind = \"bar\", size = 4)\ng.set_ylabels(\"Lung Cancer Probability\")\nplt.show()","b48e3721":"train_df[[\"SWALLOWING DIFFICULTY\",\"LUNG_CANCER\"]].groupby([\"SWALLOWING DIFFICULTY\"], as_index = False).mean()\n","fd9e1c57":"g = sns.factorplot(x = \"SWALLOWING DIFFICULTY\", y = \"LUNG_CANCER\", data = train_df, kind = \"bar\", size = 4)\ng.set_ylabels(\"Lung Cancer Probability\")\nplt.show()","cae4be46":"train_df[[\"CHEST PAIN\",\"LUNG_CANCER\"]].groupby([\"CHEST PAIN\"], as_index = False).mean()","acb15f25":"g = sns.factorplot(x = \"CHEST PAIN\", y = \"LUNG_CANCER\", data = train_df, kind = \"bar\", size = 4)\ng.set_ylabels(\"Lung Cancer Probability\")\nplt.show()","a44abf53":"list1 = [\"GENDER\", \"AGE\", \"SMOKING\",\"YELLOW_FINGERS\",\"ANXIETY\",\"PEER_PRESSURE\", \"CHRONIC DISEASE\",\"FATIGUE \", \"ALLERGY \", \"WHEEZING\", \"ALCOHOL CONSUMING\", \"COUGHING\", \"SHORTNESS OF BREATH\", \"SWALLOWING DIFFICULTY\", \"CHEST PAIN\", \"LUNG_CANCER\"]\nsns.heatmap(train_df[list1].corr(), annot = True, fmt = \".2f\")\nsns.set(rc = {'figure.figsize':(15,12)})\nplt.show()","5e66ce20":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV, cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\n#from sklearn.metrics import accuracy_score\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report","412b4b11":"#ba\u011f\u0131ml\u0131 ve ba\u011f\u0131ms\u0131z de\u011fi\u015fken se\u00e7imi\nX = train_df.drop([\"LUNG_CANCER\"], axis=1)\ny = train_df[\"LUNG_CANCER\"]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 42 ) #test-train data split - 20\/80\n#X_train[0:10]  #e\u011fitim setinin ilk 10 sat\u0131r\u0131\nprint(\"X_train : \",len(X_train))\nprint(\"X_test : \",len(X_test))\nprint(\"y_train : \",len(y_train))\nprint(\"y_test : \",len(y_test))","7252ac95":"X_train.shape","9f3151a5":"X_test.shape","cb298aef":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","298bacc4":"#Default de\u011felerle modeli e\u011fitiyorum\nlogreg = LogisticRegression(solver='lbfgs', multi_class='auto', max_iter=1000)\nlogreg.fit(X_train, y_train)  #X_train de feature lar var y_train de kanser olup olmad\u0131\u011f\u0131\ny_pred = logreg.predict(X_test)\nacc_log_train = round(logreg.score(X_train, y_train)*100,2) #modeli e\u011fittim\nacc_log_test = round(logreg.score(X_test,y_test)*100,2) #teste bak\u0131yorum modeli de\u011ferlendiriyorum\nprint(\"Training Accuracy: % {}\".format(acc_log_train))\nprint(\"Test Accuracy: % {}\".format(acc_log_test))","996d66b6":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","2964109a":"X_train","40ae76c4":"conf_matrix = confusion_matrix(y_test, y_pred)\nconf_matrix","5283d3e9":"#plot as heatmap\nplt.figure(figsize=(16,7))\nsns.set(font_scale=1.4)\nsns.heatmap(conf_matrix, annot=True, annot_kws={'size':10},\n            linewidths=0.2, vmin=0, vmax=1)\n\n#plot settings\nclass_names = ['Lung cancer', 'No lung cancer']\ntick_marks = np.arange(len(class_names))\ntick_marks2 = tick_marks + 0.5\nplt.xticks(tick_marks, class_names, rotation=25)\nplt.yticks(tick_marks2, class_names, rotation=0)\nplt.xlabel('Predicted label')\nplt.ylabel('True label')\nplt.title('Confusion Matrix for LogisticRegression')\nplt.show()","f841b737":"print(classification_report(y_test, y_pred))","0d9a5500":"random_state = 42","bcbda1c3":"#Decision Tree\ndt = DecisionTreeClassifier(random_state = random_state)\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                 \"max_depth\": range(1,20,2)\n                }\n\n#clf = GridSearchCV(dt, param_grid=dt_param_grid, cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1, verbose = 1) \nclf = GridSearchCV(dt, param_grid=dt_param_grid, cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1)\nclf.fit(X_train,y_train)\ny_pred_dt = clf.predict(X_test)\nacc_dt_train = round(clf.score(X_train, y_train)*100,2) \nacc_dt_test = round(clf.score(X_test,y_test)*100,2) \nprint(\"Training Accuracy: % {}\".format(acc_dt_train))\nprint(\"Test Accuracy: % {}\".format(acc_dt_test))\n\n\ncv_result_dt = clf.best_score_ \nbest_estimators_dt = clf.best_estimator_ \nprint(\"Decision Tree Best Score : \", cv_result_dt)\nprint(\"Best Estimator : \", best_estimators_dt)","eee8c030":"conf_matrix = confusion_matrix(y_test, y_pred_dt)\nconf_matrix","d955a661":"plt.figure(figsize=(16,7))\nsns.set(font_scale=1.4)\nsns.heatmap(conf_matrix, annot=True, annot_kws={'size':10},\n            linewidths=0.2, vmin=0, vmax=1)\n\nclass_names = ['Lung cancer', 'No lung cancer']\ntick_marks = np.arange(len(class_names))\ntick_marks2 = tick_marks + 0.5\nplt.xticks(tick_marks, class_names, rotation=25)\nplt.yticks(tick_marks2, class_names, rotation=0)\nplt.xlabel('Predicted label')\nplt.ylabel('True label')\nplt.title('Confusion Matrix for Decision Tree')\nplt.show()","870c5245":"print(classification_report(y_test, y_pred_dt))","05fce507":"#Support-Vector-Classifier\nsvc = SVC(random_state = random_state)\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000]\n             }\n\nclf = GridSearchCV(svc, param_grid=svc_param_grid, cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1)\nclf.fit(X_train,y_train)\ny_pred_svc = clf.predict(X_test)\nacc_svc_train = round(clf.score(X_train, y_train)*100,2) \nacc_svc_test = round(clf.score(X_test,y_test)*100,2) \nprint(\"Training Accuracy: % {}\".format(acc_svc_train))\nprint(\"Test Accuracy: % {}\".format(acc_svc_test))\n\ncv_result_svc = clf.best_score_ \nbest_estimators_svc = clf.best_estimator_ \nprint(\"SVC Best Score : \", cv_result_svc)\nprint(\"Best Estimator : \", best_estimators_svc)","39f61650":"conf_matrix = confusion_matrix(y_test, y_pred_svc)\nconf_matrix","b2d52b19":"plt.figure(figsize=(16,7))\nsns.set(font_scale=1.4)\nsns.heatmap(conf_matrix, annot=True, annot_kws={'size':10},\n            linewidths=0.2, vmin=0, vmax=1)\n\nclass_names = ['Lung cancer', 'No lung cancer']\ntick_marks = np.arange(len(class_names))\ntick_marks2 = tick_marks + 0.5\nplt.xticks(tick_marks, class_names, rotation=25)\nplt.yticks(tick_marks2, class_names, rotation=0)\nplt.xlabel('Predicted label')\nplt.ylabel('True label')\nplt.title('Confusion Matrix for Support-Vector-Classifier')\nplt.show()","2f127b6d":"print(classification_report(y_test, y_pred_svc))","e05491c2":"#Random Forest\nrf = RandomForestClassifier(random_state = random_state)\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],  #en iyiyi bulmak i\u00e7in 100 yap\u0131l\u0131yor genelde\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]\n             }\n\n\nclf = GridSearchCV(rf, param_grid=rf_param_grid, cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1)\nclf.fit(X_train,y_train)\ny_pred_rf = clf.predict(X_test)\nacc_rf_train = round(clf.score(X_train, y_train)*100,2)\nacc_rf_test = round(clf.score(X_test,y_test)*100,2)\nprint(\"Training Accuracy: % {}\".format(acc_rf_train))\nprint(\"Test Accuracy: % {}\".format(acc_rf_test))\n\ncv_result_rf = clf.best_score_ \nbest_estimators_rf = clf.best_estimator_ \nprint(\"Random Forest Best Score : \", cv_result_rf)\nprint(\"Best Estimators : \", best_estimators_rf)","b9c2dfae":"conf_matrix = confusion_matrix(y_test, y_pred_rf)\nconf_matrix","1873988e":"plt.figure(figsize=(16,7))\nsns.set(font_scale=1.4)\nsns.heatmap(conf_matrix, annot=True, annot_kws={'size':10},\n            linewidths=0.2, vmin=0, vmax=1)\n\nclass_names = ['Lung cancer', 'No lung cancer']\ntick_marks = np.arange(len(class_names))\ntick_marks2 = tick_marks + 0.5\nplt.xticks(tick_marks, class_names, rotation=25)\nplt.yticks(tick_marks2, class_names, rotation=0)\nplt.xlabel('Predicted label')\nplt.ylabel('True label')\nplt.title('Confusion Matrix for Random Forest Classifier')\nplt.show()","3af427c7":"print(classification_report(y_test, y_pred_rf))","d033499c":"#Logistic Regression\nlr = LogisticRegression(random_state = random_state)\nparam_grid = {\"C\":np.logspace(-3,3,7),  #-3 ten 3 e kadar 7 tane say\u0131 istiyorum\n                    \"penalty\": [\"l1\",\"l2\"] \n             }  \n\n\nclf = GridSearchCV(lr, param_grid=param_grid, cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1)\nclf.fit(X_train,y_train)\ny_pred_lr = clf.predict(X_test)\nacc_lr_train = round(clf.score(X_train, y_train)*100,2)\nacc_lr_test = round(clf.score(X_test,y_test)*100,2) \nprint(\"Training Accuracy: % {}\".format(acc_lr_train))\nprint(\"Test Accuracy: % {}\".format(acc_lr_test))\n\ncv_result_lr = clf.best_score_  \nbest_estimators_lr = clf.best_estimator_ \nprint(\"Logistic Regression Best Score : \", cv_result_lr)\nprint(\"Best Estimators : \", best_estimators_lr)","4305ad7c":"conf_matrix = confusion_matrix(y_test, y_pred_lr)\nconf_matrix","52d8d9cb":"plt.figure(figsize=(16,7))\nsns.set(font_scale=1.4)\nsns.heatmap(conf_matrix, annot=True, annot_kws={'size':10},\n            linewidths=0.2, vmin=0, vmax=1)\n\nclass_names = ['Lung cancer', 'No lung cancer']\ntick_marks = np.arange(len(class_names))\ntick_marks2 = tick_marks + 0.5\nplt.xticks(tick_marks, class_names, rotation=25)\nplt.yticks(tick_marks2, class_names, rotation=0)\nplt.xlabel('Predicted label')\nplt.ylabel('True label')\nplt.title('Confusion Matrix for Logistic Regression')\nplt.show()","aeb3fd22":"print(classification_report(y_test, y_pred_lr))","a959d57b":"#KNeighborsClassifier\nknn = KNeighborsClassifier()\nparam_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),  #1den 19 a kadar 10 tane yazd\u0131r  #linspace float bir deger \u00fcretiyor ama m say\u0131s\u0131 float bir de\u011fer olamaz o nedenle dtype = int diyoruz\n                 \"weights\": [\"uniform\",\"distance\"], \n                 \"metric\":[\"euclidean\",\"manhattan\"]\n             }  \n\n\nclf = GridSearchCV(knn, param_grid=param_grid, cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1)\nclf.fit(X_train,y_train)\ny_pred_knn = clf.predict(X_test)\nacc_knn_train = round(clf.score(X_train, y_train)*100,2) \nacc_knn_test = round(clf.score(X_test,y_test)*100,2) \nprint(\"Training Accuracy: % {}\".format(acc_knn_train))\nprint(\"Test Accuracy: % {}\".format(acc_knn_test))\n\ncv_result_knn = clf.best_score_  \nbest_estimators_knn = clf.best_estimator_ \nprint(\"KNeighborsClassifier Best Score : \", cv_result_knn)\nprint(\"Best Estimators : \", best_estimators_knn)\n","6cd4752b":"conf_matrix = confusion_matrix(y_test, y_pred_knn)\nconf_matrix","1df76a48":"plt.figure(figsize=(16,7))\nsns.set(font_scale=1.4)\nsns.heatmap(conf_matrix, annot=True, annot_kws={'size':10},\n            linewidths=0.2, vmin=0, vmax=1)\n\n\nclass_names = ['Lung cancer', 'No lung cancer']\ntick_marks = np.arange(len(class_names))\ntick_marks2 = tick_marks + 0.5\nplt.xticks(tick_marks, class_names, rotation=25)\nplt.yticks(tick_marks2, class_names, rotation=0)\nplt.xlabel('Predicted label')\nplt.ylabel('True label')\nplt.title('Confusion Matrix for KNeighborsClassifier')\nplt.show()","761532d9":"print(classification_report(y_test, y_pred_knn))","9f72e3f9":"cv_result = [cv_result_dt, cv_result_svc, cv_result_lr, cv_result_rf, cv_result_knn]\n#cv_result\n","f2aee5a3":"cv_results = pd.DataFrame({\"ML Models\":[\"DecisionTreeClassifier\", \"SVM\",\"RandomForestClassifier\",\"LogisticRegression\",\"KNeighborsClassifier\"], \n                           \"Cross Validation Means\":cv_result,   })\n\nprint(cv_results)\n\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")","c233163f":"votingC = VotingClassifier(estimators = [(\"rf\",best_estimators_rf),\n                                        (\"lr\",best_estimators_lr),\n                                        (\"knn\",best_estimators_knn)],\n                                        voting = \"soft\", n_jobs = -1)\nvotingC = votingC.fit(X_train, y_train)\ny_pred_em = votingC.predict(X_test)\nprint(\"Ensemble Modelling Accuracy Score :\",accuracy_score(votingC.predict(X_test),y_test))","cc35285f":"conf_matrix = confusion_matrix(y_test, y_pred_em)\nconf_matrix","050c3249":"plt.figure(figsize=(16,7))\nsns.set(font_scale=1.4)\nsns.heatmap(conf_matrix, annot=True, annot_kws={'size':10},\n            linewidths=0.2, vmin=0, vmax=1)\n\nclass_names = ['Lung cancer', 'No lung cancer']\ntick_marks = np.arange(len(class_names))\ntick_marks2 = tick_marks + 0.5\nplt.xticks(tick_marks, class_names, rotation=25)\nplt.yticks(tick_marks2, class_names, rotation=0)\nplt.xlabel('Predicted label')\nplt.ylabel('True label')\nplt.title('Confusion Matrix for Ensemble Modelling ')\nplt.show()","ad778f6a":"print(classification_report(y_test, y_pred_em))","e5705194":"# Veri Analizi\n\n## De\u011fi\u015fkenler\n\n1. GENDER : Cinsiyet : M(male), F(Female)\n2. AGE : Hastan\u0131n ya\u015f\u0131\n3. SMOKING : Sigara kullanma durumu YES=2 NO=1\n4. YELLOW_FINGERS : Parmaklarda sar\u0131l\u0131k YES=2 NO=1\n5. ANXIETY :  Anksiyete YES=2 NO=1\n6. PEER_PRESSURE  : Kayg\u0131 YES=2 NO=1\n7. CHRONIC DISEASE : Kronik rahats\u0131zl\u0131\u011f\u0131 var m\u0131 YES=2 NO=1\n8. FATIGUE : Yorgunluk YES=2 NO=1\n9. ALLERGY : Alerji YES=2 NO=1\n10. WHEEZING : H\u0131r\u0131lt\u0131 YES=2 NO=1\n11. ALCOHOL CONSUMING : Alkol T\u00fcketimi YES=2 NO=1\n12. COUGHING : \u00d6ks\u00fcr\u00fck YES=2 NO=1\n13. SHORTNESS OF BREATH : Nefes Darl\u0131\u011f\u0131 YES=2 NO=1\n14. SWALLOWING DIFFICULTY : Yutma Zorlu\u011fu YES=2 NO=1\n15. CHEST PAIN : G\u00f6\u011f\u00fcs A\u011fr\u0131s\u0131 YES=2 NO=1\n16. LUNG_CANCER : Akci\u011fer Kanseri YES=2 NO=1","5ebd1179":"# SVC","84ee67e7":"# Simple Logistic Regression","29ea0d60":"# Modelleme\n","09103665":"# Korelasyon Matrisi","187ee92c":"## Farkl\u0131 makine \u00f6\u011frenmesi algoritmalar\u0131 kullan\u0131larak akci\u011fer kanseri tespiti","c4ed4302":"## N\u00fcmerik De\u011fi\u015fkenlerin Analizi\nVeri da\u011f\u0131l\u0131mlar\u0131\n","b7f7c724":"* Kategorik De\u011fi\u015fkenler: Smoking,Yelow_Fingers,Anxiety,Peer_Pressure,Chronic_Disease, Fatique,Allergy,Wheezing,Alcohol_Consuming,Caughing,Shortness of Breath, Swallowing Difficulty, Chest Pain,Gender, Lung Cancer\n<\/br>\n* N\u00fcmerik De\u011fi\u015fkenler: Age","9ec1a566":"# Decision Tree","3ff1f353":"# Modellerin Ba\u015far\u0131s\u0131n\u0131n Kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131","ed788082":"## Train-Test Verilerinin Ayr\u0131m\u0131","903cd0d8":"# Ensemble Modelling","132246b6":"# KNeighborsClassifier","8d342c82":"# Logistic Regression","27347213":"## Kategorik De\u011fi\u015fkenlerin Analizi\nVeri da\u011f\u0131l\u0131mlar\u0131","33f277b8":"# Temel Veri Analizi\nFeaturelar\u0131n kanser olma \u00fczerindeki etkisinin incelenmesi\n* GENDER - LUNG_CANCER\n* AGE - LUNG_CANCER\n* SMOKING - LUNG_CANCER\n* YELLOW_FINGERS - LUNG_CANCER\n* ANXIETY - LUNG_CANCER\n* PEER_PRESSURE - LUNG_CANCER\n* CHRONIC DISEASE - LUNG_CANCER\n* FATIGUE - LUNG_CANCER\n* ALLERGY - LUNG_CANCER\n* WHEEZING - LUNG_CANCER\n* ALCOHOL CONSUMING - LUNG_CANCER\n* COUGHING - LUNG_CANCER\n* SHORTNESS OF BREATH - LUNG_CANCER\n* SWALLOWING DIFFICULTY - LUNG_CANCER\n* CHEST PAIN - LUNG_CANCER","e3d0c57a":"# Veri Y\u00fckleme ve Analiz Etme","9c063df2":"# Random Forest \n"}}