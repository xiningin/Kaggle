{"cell_type":{"f5708a0c":"code","68533a2c":"code","34686242":"code","8899becd":"code","78f12572":"code","9b7fa48b":"code","41fc81ac":"code","0c8d2a11":"code","7d6f1ae9":"code","1083af68":"code","e16234a4":"code","e71173d1":"code","da38f272":"code","37096343":"code","5b3cf4b4":"code","0e077d27":"code","5ad3bb04":"code","152b03da":"code","3320d8d8":"code","8465c3aa":"code","e3ca8908":"code","cc8a84f5":"code","9368e52b":"code","0e7a7c05":"code","7b806f94":"code","49af778c":"code","13519876":"code","e33ebf4c":"code","89d64637":"code","7f0c9ef0":"code","8261e793":"code","e5eb68cc":"markdown","70317612":"markdown","258bf67f":"markdown","469eb95c":"markdown","8c6575e4":"markdown","70f8f63d":"markdown","24fe205c":"markdown","5577c670":"markdown","57ea8042":"markdown","702e033d":"markdown","ead97f69":"markdown","ebbb02a9":"markdown","1642c5f6":"markdown","82ddce77":"markdown","296ae5cb":"markdown","4230083e":"markdown","6c509005":"markdown","50e4a911":"markdown","6213ee35":"markdown","3019b7e5":"markdown","78f923ee":"markdown","48e90a63":"markdown","fb6298eb":"markdown","46489bd3":"markdown","c5844fdc":"markdown","79f13705":"markdown","f4929847":"markdown"},"source":{"f5708a0c":"project_name = \"ipl-dataset-analysis\" # change this (use lowercase letters and hyphens only)","68533a2c":"import pandas as pd\nraw_ipl_team_df = pd.read_csv('..\/input\/indian-premier-league-csv-dataset\/Team.csv')\nraw_ipl_match_df = pd.read_csv('..\/input\/indian-premier-league-csv-dataset\/Match.csv')","34686242":"# Let's print the Teams dataset \nprint(raw_ipl_team_df)","8899becd":"# Information about raw_ipl_team_df - rows, columns and other details\nprint(raw_ipl_team_df.info())","78f12572":"# Information about raw raw_ipl_match_df \nprint(raw_ipl_match_df.info())","9b7fa48b":"# Rename \"Team_Id\" to \"Team_Name_Id\" in raw_ipl_team_df\nraw_ipl_team_df.rename(columns = {'Team_Id':'Team_Name_Id'}, inplace = True)\nprint(raw_ipl_team_df.info())","41fc81ac":"# Now merge the two dataframes on column \"Team_Name_Id\" and print the info() of combined_df\nraw_ipl_combined_df = pd.merge(raw_ipl_match_df, raw_ipl_team_df, on='Team_Name_Id')\nprint(raw_ipl_combined_df.info())","0c8d2a11":"# Let us print sample data from dataset\nprint(raw_ipl_combined_df.sample(n = 15))","7d6f1ae9":"# Dropping columns of no use and saving the output as a new dataframe which is to be used for data analysis\ncombined_ipl_df = raw_ipl_combined_df.drop(columns =['Is_DuckWorthLewis', 'First_Umpire_Id', 'Second_Umpire_Id', 'Man_Of_The_Match_Id', 'Match_Date'])\n# Confirm on delete columns\nprint(combined_ipl_df.info())","1083af68":"# Change below columns from integer to string \ncombined_ipl_df['Team_Name_Id'] = combined_ipl_df['Team_Name_Id'].apply(str)\ncombined_ipl_df['Match_Id'] = combined_ipl_df['Match_Id'].apply(str)\ncombined_ipl_df['Opponent_Team_Id'] = combined_ipl_df['Opponent_Team_Id'].apply(str)\ncombined_ipl_df['Toss_Winner_Id'] = combined_ipl_df['Toss_Winner_Id'].apply(str)\ncombined_ipl_df['Season_Id'] = combined_ipl_df['Season_Id'].apply(str)\ncombined_ipl_df['Match_Winner_Id'] = combined_ipl_df['Match_Winner_Id'].apply(str)\n\n# Print the information to confirm the changes \nprint(combined_ipl_df.info())","e16234a4":"print(combined_ipl_df.describe())","e71173d1":"import seaborn as sns\nimport matplotlib\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nsns.set_style('darkgrid')\nmatplotlib.rcParams['font.size'] = 14\nmatplotlib.rcParams['figure.figsize'] = (9, 5)\nmatplotlib.rcParams['figure.facecolor'] = '#00000000'\n","da38f272":"city_match_count = combined_ipl_df.City_Name.value_counts()\n\ncity_match_count.plot(kind = 'bar')\nplt.xlabel(\"Number of matches hosted\")\nplt.ylabel(\"Name of Cities where IPL got hosted\")\nplt.title(\"IPL Matches hosted in various cities\");\n","37096343":"team_match_count = combined_ipl_df['Team_Name'].value_counts()\nteam_match_count.plot(kind = 'bar')\nplt.xlabel(\"Various teams which featured in the IPL so far\")\nplt.ylabel(\"Number of match\")\nplt.title(\"Number of matches played by IPL Teams\");\n","5b3cf4b4":"# Count the number of matches won by batting second \nnumber_of_matches_won_batting_second = combined_ipl_df[combined_ipl_df.Win_Type == \"by wickets\"].count()['Win_Type']\n\n# Count the number of matches won by batting first\nnumber_of_matches_won_batting_first = combined_ipl_df[combined_ipl_df.Win_Type == \"by runs\"].count()['Win_Type']\n\n\nplt.pie([number_of_matches_won_batting_first, number_of_matches_won_batting_second], labels = [\"Batting First\", \"Batting second\"])\nplt.title(\"Matches Won - Batting First vs Batting Second\")","0e077d27":"# define a function \"find_match_winner\" which takes dataframe as an input \ndef find_match_winner(combined_df):\n\n  # Get the values of team_name_id, match_winner_id and opponent_team_id and convert them into float for comparison\n  team_name_id = float(combined_df['Team_Name_Id'])\n  match_winner_id = float(combined_df['Match_Winner_Id'])\n  opponent_team_id = float(combined_df['Opponent_Team_Id'])\n\n  # Check if team name id is euqal to match winner id \n  if (team_name_id == match_winner_id):\n    # return the value of team name in the row which will get filled in the column Winner Team\n    return combined_df['Team_Name']\n\n  # Check if opponent team id is euqal to match winner id \n  elif (match_winner_id == opponent_team_id):\n    # return the value of team name available at location opponent_team_id - 1 from dataframe raw_ipl_df\n    return raw_ipl_team_df.loc[int(opponent_team_id) - 1]['Team_Name']\n  else:\n    # Place null for no result or a tie\n    return \"NULL\"\n    \n# Call apply function on every row of the dataframe \ncombined_ipl_df['Winner_Team'] = combined_ipl_df.apply(find_match_winner, axis = 1)\n\n# Count the unique occurences of each Winning Team \nteam_match_win_count = combined_ipl_df['Winner_Team'].value_counts()\nteam_match_win_count.plot(kind='bar')\nplt.xlabel(\"Teams\")\nplt.ylabel(\"Number of matches\")","5ad3bb04":"# Get the number of matches won batting first and by more than or euqal to 10 runs \nnumber_of_matches_won_by_more_than_10_runs = combined_ipl_df[(combined_ipl_df.Win_Type == \"by runs\") & (combined_ipl_df.Won_By >= 10)].count()['Win_Type']\n\n# Get the number of matches won batting first and by less than 10 runs \nnumber_of_matches_won_by_less_than_10_runs = combined_ipl_df[(combined_ipl_df.Win_Type == \"by runs\") & (combined_ipl_df.Won_By < 10)].count()['Win_Type']\n\n# Plot the pie chart\nplt.pie([number_of_matches_won_by_more_than_10_runs, number_of_matches_won_by_less_than_10_runs], labels = [\"Won by more than 10 runs\", \"Won by less than 10 runs\"])\nplt.title(\"Matches Won - By More than 10 runs vs By less than 10 runs\");","152b03da":"winner_team = combined_ipl_df.max()['Winner_Team']\nby_runs = combined_ipl_df.max()['Won_By']\nvenue = combined_ipl_df.max()['City_Name']","3320d8d8":"print(\"{} is the team to win a match by most number of runs\".format(winner_team))","8465c3aa":"print(\"They won the match by {} runs\".format(int(by_runs)))","e3ca8908":"print(\"Match was played in {}\". format(venue))\n","cc8a84f5":"# Number of matches tied \ntied_count = combined_ipl_df[combined_ipl_df.Win_Type == \"Tie\"].count()['Win_Type']\n\n# Number of matches with no result \nno_result = combined_ipl_df[combined_ipl_df.Win_Type == \"No Result\"].count()['Win_Type']\n","9368e52b":"print(\"Number of Tied Matches in  9 IPL seasons = \", tied_count )\n","0e7a7c05":"print(\"Number of matches with no result in 9 IPL seasons = \", no_result)","7b806f94":"probability_of_tied_match = combined_ipl_df[combined_ipl_df.Win_Type == \"Tie\"].count()['Win_Type'] \/ combined_ipl_df.count()['Win_Type']\nprobability_of_no_result = combined_ipl_df[combined_ipl_df.Win_Type == \"No Result\"].count()['Win_Type'] \/ combined_ipl_df.count()['Win_Type']","49af778c":"print(\"Probability of a match getting tied is - \", probability_of_tied_match)\nprint(\"Probability of a match having no result is - \", probability_of_no_result)","13519876":"# Get the number of matches won batting first and by less than 75 runs \nnumber_of_matches_won_by_less_than_10_runs = combined_ipl_df[(combined_ipl_df.Win_Type == \"by runs\") & (combined_ipl_df.Won_By < 10)].count()['Win_Type']\n\nprobability = number_of_matches_won_by_less_than_10_runs \/ combined_ipl_df[combined_ipl_df.Win_Type == 'by runs'].count()['Win_Type']","e33ebf4c":"print(\"Probability of a close match (a team winning by a margin of less than 10 runs) is \", probability)","89d64637":"wins_batting_first = combined_ipl_df[combined_ipl_df.Win_Type == \"by runs\"].count()['Win_Type']\nprobability_of_win_batting_first = wins_batting_first \/ combined_ipl_df.count()['Win_Type']","7f0c9ef0":"wins_batting_second =  combined_ipl_df[combined_ipl_df.Win_Type == \"by wickets\"].count()['Win_Type']\nprobability_of_win_batting_second = wins_batting_second \/ combined_ipl_df.count()['Win_Type']","8261e793":"print(\"Probability of winning a match by batting first - \", probability_of_win_batting_first)\nprint(\"Probability of winning a match by batting second - \", probability_of_win_batting_second)","e5eb68cc":"It is observed that a few columns like Team ID, Match ID, etc. are integer format and will provide wrong information in terms of sum, mean, etc. ID has to be a string and so we need to change the type of these columns to ensure that we dont get wrong information while analysis. We can use the following syntax to get this done - \n- df['DataFrame Column'] = df['DataFrame Column'].apply(str)","70317612":"Let us get the list of cities where IPL matches were placed and plot a bargraph to get a visualization of which city got highest matches to host among all. To get this done we need to perform the following steps - \n\n- Count the number of matches hosted by each city - We use value_count() function to get the series of cities and their number of occurences \n- use the output count series to plot the graph which provides following insights","258bf67f":"Use describe() function to get more readymade statistics of the dataframe. describe() function will provide following relevant information - \n- count of rows \n- list of columns \n- mathematical mean, std, min, max \n- shape of dataframe","469eb95c":"## Inferences and Conclusion\n\nFollowing conclusions can be made based on the IPL dataset studied - \n- Team batting second has more chances of winning a match. Team batting second won 53 out of 100 matches played \n- Chances of a match getting tied is just 1% . This means only 1 match gets tied out of 100 matches\n- Chances of a match getting no result is just 0.5%. This means only 1 out of 200 matches played will have no result \n- There is 20% chance of a close match where a team batting first just win by a margin of less than 10 runs","8c6575e4":"## References and Future Work\n\nThe dataset download from Kaggle has many more files and columns which can be used to analyze the performance of a player, team and answer many more complex questions like the one given below - \n- probability of a team winning by batting first in Mumbai\n- probability of a team winning between two opponents who clashed in the past\n- performance of various players in the team against various opponents\n\n\n## References \n- [Pandas API documentation](https:\/\/pandas.pydata.org\/docs\/)\n- [Pandas Geeks for Geeks tutorial](https:\/\/www.geeksforgeeks.org\/pandas-tutorial\/)\n- [Pandas Tutorial: DataFrames in Python](https:\/\/www.datacamp.com\/community\/tutorials\/pandas-tutorial-dataframe-python)\n- [Course: Pandas and NumPy Fundamentals](https:\/\/www.dataquest.io\/course\/pandas-fundamentals\/)\n","70f8f63d":"The above graph clearly indicated that Mumbai got the maximum number of matches hosted while Kanpur and Indore got least number of matches to host","24fe205c":"The above graph clearly indicates that Royal Challenges Bangalore played most number of matches and Kochi Tuskers Kerela played the least number of matches in 9 seasons of IPL","5577c670":"#### Q5: What is the probability of winning a match if batting first and second respectively ?","57ea8042":"#### Q4: What is the probability of a close match when a team wins batting first ?\nLet us say that a close match is when a team wins by a margin of less than 10 runs. We will calculate the probabiliy of a team winning a match by less than 10 runs","702e033d":"# Project Title - Analyzing IPL (Indian Premier League) dataset available on [Kaggle](https:\/\/www.kaggle.com\/harsha547\/indian-premier-league-csv-dataset\/code)\n\n- This project analyzes IPL dataset which is openly and freely available on [kaggle](https:\/\/www.kaggle.com\/harsha547\/indian-premier-league-csv-dataset\/code)\n- [kaggle](https:\/\/www.kaggle.com\/harsha547\/indian-premier-league-csv-dataset\/code) has thousands of freely available datasets for datanalaytics purpose\n- Dataset has information on matches playes across the IPL seasons which can be used to answer some interesting questions related to teams' performance and many other interesting statistcs. \n- We will use Kaggle, python libraries like pandas, matplotlib and seaborn as major libraries \n- Google Colab (Jupyter notebook) as runtime environment ","ead97f69":"#### Q1: Which team won the match by most number of runs in 9 seasons of IPL ? Asnwer the following - \n- Team which won by most number of runs \n- By how many runs \n- Where was the match played ","ebbb02a9":"Get basic meta information both datasets \/ dataframes imported into pandas by using info function of pandas.\ninfo() will list number of entries, name of columns and their data type, null\/or not null, size of dataset, etc.","1642c5f6":"## We import two datasets which are -\n- Raw IPL Team dataset - this dataset is a simple table having IPL team information like team name, team id and team short code. This is going to be a helper dataset which will be used as a part of analysis\n- Raw IP Match dataset - this dataset has information on all matches playes between different teams. It has a match by match detail, which teams played it, when was it played, who won, by how many runs or wickets, where was it played, etc. ","82ddce77":"## Downloading the Dataset\n\n- Below are the instructions to download the datasets available on [Kaggle](https:\/\/www.kaggle.com\/)\n- We will install [opendatasets](https:\/\/github.com\/JovianML\/opendatasets#opendatasets), a special library to donwload datasets from online sources like Kaggle and Google Drive\n- Below is the command python code to download dataset of interest ","296ae5cb":"#### Q3: What is the probability of a match getting tied or no result ?\n","4230083e":"Let's merge two dataframes on teams id to get a single consolidated dataframe for further analysis. We will use merge function of pandas to get this done. \n- Please note that Team ID column in both dataframes has a different column name and we need to rename one to get this operation fixed.\n- raw_ipl_team_df has team id column as **\"Team_Id\"** and raw_ipl_match_team_df has team id column as **\"Team_Name_Id\"**\n- Let us rename the column of raw_ip_team_df \n","6c509005":"Let us now get the list of teams and the number of matches each team played in 9 seasons of data we have. To get this done we need to do the following - \n- Count the number of occurences of each team name in \"Tean_Name\" column which will return a series \n- Plot the graph using the series ","50e4a911":"Let us now get something more difficult and complex. Let us get a graph for number of matches won by each time. This is difficult because we dont have any column in dataframe with the name of the winner. What we have is the Match Winner ID which is to be mapped with the dataframe having details related to the teams. We will use apply() function to get our job done. \nPsuedo Steps to acheive the requirements are given below - \n- Create a column \"Winner_Team\" and place the value of Winner Team if the Team ID is equal to Match Winner ID \n- Now we will have team name for all the rows where value of Team ID is equal to Match winner ID\n- In the case where opponent team won the match, we need to get opponent team ID and put the value of ipl_teams_dataframe on the index \n\nPlease read the comments in the source code to understand each step\n","6213ee35":"> Submission Instructions (delete this cell)\n> \n> - Upload your notebook to your Jovian.ml profile using `jovian.commit`.\n> - **Make a submission here**: https:\/\/jovian.ml\/learn\/data-analysis-with-python-zero-to-pandas\/assignment\/course-project\n> - Share your work on the forum: https:\/\/jovian.ml\/forum\/t\/course-project-on-exploratory-data-analysis-discuss-and-share-your-work\/11684\n> - Share your work on social media (Twitter, LinkedIn, Telegram etc.) and tag [@JovianML](https:\/\/twitter.com\/jovianml)\n>\n> (Optional) Write a blog post\n> \n> - A blog post is a great way to present and showcase your work.  \n> - Sign up on [Medium.com](https:\/\/medium.com) to write a blog post for your project.\n> - Copy over the explanations from your Jupyter notebook into your blog post, and [embed code cells & outputs](https:\/\/medium.com\/jovianml\/share-and-embed-jupyter-notebooks-online-with-jovian-ml-df709a03064e)\n> - Check out the Jovian.ml Medium publication for inspiration: https:\/\/medium.com\/jovianml\n\n\n ","3019b7e5":"## Asking and Answering Questions\n\nThe below section will now answer critical and interesting questions based on the analysis done on the dataset. This is the most fruitful part of data analysis which is to answer the questions asked by business. We will put 5 interesting questions and will try to answer them based on our analysis on IPL Data\n\n","78f923ee":"#### Q2: How many matches were tied or with no result  in 9 IPL Seasons ?","48e90a63":"Let's begin by importing`matplotlib.pyplot` and `seaborn`.","fb6298eb":"Let us remove a few columns which are not required for our analysis purpose. We will remove following columns from the combined dataframe - \n- Is_DuckWorthLewis \n- First_Umpire_Id\n- Second_Umpire_Id\n- Man_Of_The_Match_Id\n- Match_Date","46489bd3":"## Exploratory Analysis and Visualization\n\nLet's start with the core analysis of our final dataset we have derieved after data preparation and cleaning activity. We will get sum, mean and other interesting stats and will plot graphs for some interesting insights received from the dataset. \n\n","c5844fdc":"Let us now see through graph on the number of matches won by batting first or batting second. To get this done we need to do the following - \n- Get the count of matches won by batting first, i.e. matches won by runs \n- Get the count of matches won by batting second,i.e. matches won by wickets \n- Plot the two values on pie chart","79f13705":"## Data Preparation and Cleaning\n\nThis section is the first and most important step, i.e. to clean and prepare data for consumption. Data Preparation and cleaning consumes the most amount of time for Data Engineers and Analysts.\n\n### Why do we need to prepare and clean data ?\n- To ensure that datasets has no missing values \n- Remove columns which does not make any sense in analysis process \n- Remove columns and data which could be a sensitive information \n- Remove invalid data which might be a part of dataset by mistake-\n- Create additional columns which might help in analzing data better \n- Merge data from various datasets to make a solid useful data \n\n### Steps used below \n- import and load pandas library\n- load the dataset and explore the schema of it \n\n","f4929847":"Let us know explore the frequency of matches won by more than 10 runs and less than 10 runs. To get this done, we will follow the steps as given - \n- count the events of win by more than 75 runs by using conditions on column WinType and Wonby > 10\n- count the events of win by less than 75 runs by using conditions on column WinType and Wonby < 10\n- Plot the pie graph"}}