{"cell_type":{"cf375778":"code","ba1145b9":"code","3288e1ed":"code","9a908beb":"code","689544fc":"code","afa87fbb":"code","5fd5b164":"code","1287ab1d":"code","b4f1b74c":"code","9d3b9ac0":"code","8bb9a751":"code","c005b457":"code","396a0747":"code","43c5bbc7":"code","ed5a1c23":"code","5690d810":"code","5a84f686":"code","a6ad6e5f":"code","dce9d42a":"code","4fffa5af":"code","f22b384e":"code","d096b950":"code","57e4e574":"code","5eaa70b6":"code","aa006e15":"code","babe1755":"code","605a54ad":"code","48122899":"code","a380b9d2":"code","c585e0f4":"code","fb56bc7e":"code","b15e2380":"code","e723e496":"code","92081431":"code","04c19491":"code","cafb7b95":"code","6238a775":"code","3068495c":"code","f9b257b0":"markdown","ec9de99a":"markdown","62318b85":"markdown","4fba8b5b":"markdown","f8721bd2":"markdown","fd87fefa":"markdown","9a77eb8b":"markdown","0163f05d":"markdown","c8d2b5be":"markdown","dd5b609a":"markdown","4c27fc9e":"markdown","0b8958d7":"markdown","25602568":"markdown","c6924dcc":"markdown","de35e72d":"markdown","8686292e":"markdown","a65dce65":"markdown","ab25831e":"markdown","d57529c7":"markdown","7babade4":"markdown","4d088911":"markdown","787b00de":"markdown","b4cdb09a":"markdown","d369c6b2":"markdown","87409638":"markdown","b557e693":"markdown","02cb669c":"markdown"},"source":{"cf375778":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\nfrom pandas_profiling import ProfileReport\nfrom scipy.stats import norm\nfrom sklearn.preprocessing import MultiLabelBinarizer\nfrom wordcloud import WordCloud","ba1145b9":"df = pd.read_csv('..\/input\/netflix-data\/netflix_titles.csv')\ndf.head()","3288e1ed":"report = ProfileReport(df)\nreport","9a908beb":"df.nunique()","689544fc":"df.isna().sum()","afa87fbb":"df[df['rating'].isna()]","5fd5b164":"rating_replacements = {\n    67: 'TV-PG',\n    2359: 'TV-14',\n    3660: 'TV-MA',\n    3736: 'TV-MA',\n    3737: 'NR',\n    3738: 'TV-MA',\n    4323: 'TV-MA '\n}\n\nfor id, rate in rating_replacements.items():\n    df.iloc[id, 8] = rate\n\ndf['rating'].isna().sum()","1287ab1d":"df = df.drop(['director', 'cast'], axis=1)","b4f1b74c":"df = df[df['date_added'].notna()]","9d3b9ac0":"df['country'] = df['country'].fillna(df['country'].mode()[0])","8bb9a751":"df.isna().sum()","c005b457":"df['ano_adicionado'] = pd.DatetimeIndex(df['date_added']).year\ndf['mes_adicionado'] = pd.DatetimeIndex(df['date_added']).month\ndf['trimestre_adicionado'] = pd.DatetimeIndex(df['date_added']).quarter","396a0747":"classificacao_indicativa = {\n    'TV-PG': 'Crian\u00e7as mais velhas',\n    'TV-MA': 'Adultos',\n    'TV-MA ': 'Adultos',\n    'TV-Y7-FV': 'Crian\u00e7as mais velhas',\n    'TV-Y7': 'Crian\u00e7as mais velhas',\n    'TV-14': 'Adolescentes',\n    'R': 'Adultos',\n    'TV-Y': 'Crian\u00e7as',\n    'NR': 'Adultos',\n    'PG-13': 'Adolescentes',\n    'TV-G': 'Crian\u00e7as',\n    'PG': 'Crian\u00e7as mais velhas',\n    'G': 'Crian\u00e7as',\n    'UR': 'Adultos',\n    'NC-17': 'Adultos'\n}\n\ndf['publico_alvo'] = df['rating'].replace(classificacao_indicativa)\ndf['publico_alvo'].unique()","43c5bbc7":"df['pais_principal'] = df['country'].apply(lambda x: x.split(\",\")[0])","ed5a1c23":"df['genero'] = df['listed_in'].apply(lambda x :  x.replace(' ,',',').replace(', ',',').split(',')) ","5690d810":"df['type'] = pd.Categorical(df['type'])\n\ndf['publico_alvo'] = pd.Categorical(df['publico_alvo'], \n                                   categories=['Crian\u00e7as', 'Crian\u00e7as mais velhas', \n                                               'Adolescentes', 'adultos'])","5a84f686":"df['tipo'] = df['type'].replace('TV Show','Programa de TV').replace('Movie','Filme')\n\nfilme_df = df[df['tipo'] == 'Filme']\nprograma_df = df[df['tipo'] == 'Programa de TV']","a6ad6e5f":"df = df.drop(['type', 'date_added', 'listed_in','country','description'], axis=1)","dce9d42a":"df.head()","4fffa5af":"fig = px.pie(df['tipo'].value_counts().reset_index(), values='tipo', names='index')\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.show()","f22b384e":"def generate_rating_df(df):\n    rating_df = df.groupby(['rating', 'publico_alvo']).agg({'show_id': 'count'}).reset_index()\n    rating_df = rating_df[rating_df['show_id'] != 0]\n    rating_df.columns = ['classificacao', 'publico_alvo', 'quantidade']\n    rating_df = rating_df.sort_values('publico_alvo')\n    return rating_df","d096b950":"rating_df = generate_rating_df(df)\nfig = px.bar(rating_df, x='classificacao', y='quantidade', color='publico_alvo')\nfig.show()","57e4e574":"filme_classif_df = generate_rating_df(filme_df)\nprograma_classif_df = generate_rating_df(programa_df)\n\nfig = make_subplots(rows=1, cols=2, specs=[[{\"type\": \"pie\"}, {\"type\": \"pie\"}]])\n\nfig.add_trace(\n    go.Pie(labels=filme_classif_df['publico_alvo'], values=filme_classif_df['quantidade']),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Pie(labels=programa_classif_df['publico_alvo'], values=programa_classif_df['quantidade']),\n    row=1, col=2\n)\n\nfig.update_traces(textposition='inside', hole=.4, hoverinfo=\"label+percent\")\nfig.update_layout(\n    title_text=\"Distribui\u00e7\u00e3o de classifica\u00e7\u00e3o por tipo de conte\u00fado\",\n    annotations=[dict(text='     Filmes', x=0.16, y=0.5, font_size=12, showarrow=False),\n                 dict(text='Programas', x=0.82, y=0.5, font_size=12, showarrow=False)])\nfig.show()","5eaa70b6":"country_df = df['pais_principal'].value_counts().reset_index()\ncountry_df = country_df[country_df['pais_principal'] \/  country_df['pais_principal'].sum() > 0.01]\n\nfig = px.pie(country_df, values='pais_principal', names='index')\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.show()","aa006e15":"fig = px.histogram(df, x='pais_principal')\nfig.update_xaxes(categoryorder='total descending')\nfig.show()","babe1755":"ano_lancado_df = df.loc[df['release_year'] > 2010].groupby(['release_year', 'tipo']).agg({'show_id': 'count'}).reset_index()\nano_adicionado_df = df.loc[df['ano_adicionado'] > 2010].groupby(['ano_adicionado', 'tipo']).agg({'show_id': 'count'}).reset_index()\n\nfig = go.Figure()\nfig.add_trace(go.Scatter( \n    x=ano_lancado_df.loc[ano_lancado_df['tipo'] == 'Filme']['release_year'], \n    y=ano_lancado_df.loc[ano_lancado_df['tipo'] == 'Filme']['show_id'],\n    mode='lines+markers',\n    name='filme: ano de lan\u00e7amento',\n    marker_color='green',\n))\nfig.add_trace(go.Scatter( \n    x=ano_lancado_df.loc[ano_lancado_df['tipo'] == 'Programa de TV']['release_year'], \n    y=ano_lancado_df.loc[ano_lancado_df['tipo'] == 'Programa de TV']['show_id'],\n    mode='lines+markers',\n    name='Programa de TV: ano de lan\u00e7amento',\n    marker_color='darkgreen',\n))\nfig.add_trace(go.Scatter( \n    x=ano_adicionado_df.loc[ano_adicionado_df['tipo'] == 'Filme']['ano_adicionado'], \n    y=ano_adicionado_df.loc[ano_adicionado_df['tipo'] == 'Filme']['show_id'],\n    mode='lines+markers',\n    name='filme: ano de adicionado',\n    marker_color='orange',\n))\nfig.add_trace(go.Scatter( \n    x=ano_adicionado_df.loc[ano_adicionado_df['tipo'] == 'Programa de TV']['ano_adicionado'], \n    y=ano_adicionado_df.loc[ano_adicionado_df['tipo'] == 'Programa de TV']['show_id'],\n    mode='lines+markers',\n    name='Programa de TV: ano adicionado',\n    marker_color='darkorange',\n))\nfig.update_xaxes(categoryorder='total descending')\nfig.show()","605a54ad":"def calculate_mlb(series):\n    mlb = MultiLabelBinarizer()\n    mlb_df = pd.DataFrame(mlb.fit_transform(series), columns=mlb.classes_, index=series.index)\n    return mlb_df","48122899":"def top_genres(df, title='Melhores'):\n    genero_df = calculate_mlb(df['genero'])\n    tdata = genero_df.sum().sort_values(ascending=False)\n    \n    fig = go.Figure()\n    fig.add_trace(go.Bar(\n        x=tdata.index,\n        y=tdata.values,\n    ))\n    fig.update_layout(title=title)\n    fig.show()","a380b9d2":"top_genres(filme_df, title='gen\u00earos mais famosos (filmes)')","c585e0f4":"filme_top_generos =  [\n    'International Movies',\n    'Dramas',\n    'Comedies',\n    'Documentaries',\n    'Action & Adventure',\n]","fb56bc7e":"top_genres(programa_df, title='gen\u00earos mais famosos (programas)')","b15e2380":"text = str(list(filme_df['genero'])).replace(',', '').replace('[', '').replace(\"'\", '').replace(']', '')\n\nplt.rcParams['figure.figsize'] = (15, 15)\nwordcloud = WordCloud(background_color = 'white', width = 1200,  height = 1200, max_words = 121).generate(text)\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.show()","e723e496":"fig = px.histogram(x=programa_df['duration'])\nfig.update_xaxes(categoryorder=\"total descending\")\nfig.update_layout(\n    title=\"Distribui\u00e7\u00e3o da dura\u00e7\u00e3o dos programas\",\n    xaxis_title=\"Dura\u00e7\u00e3o do programa\",\n)\nfig.show()","92081431":"temp_duracao = filme_df['duration'].apply(lambda x: int(x.split(' ')[0]))","04c19491":"filme_df.loc[temp_duracao.loc[temp_duracao < 90].index, 'duration_bin'] = 'Menos de 1.30 horas'\nfilme_df.loc[temp_duracao.loc[(temp_duracao >= 90) & (temp_duracao < 150)].index, 'duration_bin'] = 'Mais de 1.30 horas e menos de 2.30 horas'\nfilme_df.loc[temp_duracao.loc[temp_duracao >= 150].index, 'duration_bin'] = 'Mais de 2.30 horas'","cafb7b95":"fig = px.histogram(x=filme_df['duration_bin'], color=filme_df['duration_bin'])\nfig.update_layout(\n    title=\"Distribui\u00e7\u00e3o da dura\u00e7\u00e3o dos filmes\",\n    xaxis_title=\"Dura\u00e7\u00e3o dos filmes\",\n)\nfig.show()","6238a775":"filme_df['genero_principal'] = filme_df['genero'].apply(lambda genres: genres[0])","3068495c":"genero_ano_df = filme_df[(filme_df['genero_principal'].isin(filme_top_generos)) & (filme_df['ano_adicionado'] >= 2017)].groupby(['genero_principal', 'ano_adicionado']).agg({'title': 'count'})\ngenero_ano_df = genero_ano_df.reset_index()\ngenero_ano_df.columns = ['genero_principal', 'ano_adicionado', 'quantidade']\n\nfig = px.sunburst(genero_ano_df, path=['ano_adicionado', 'genero_principal'], values='quantidade')\nfig.show()","f9b257b0":"### Datas\n- Pra uma melhor visualiza\u00e7\u00e3o das datas elas sar\u00e3o separadas em 3 colunas:\nano_adicionado, mes_adicionado e trimestre_adicionado.","ec9de99a":"## An\u00e1lise de dura\u00e7\u00e3o","62318b85":"#### filmes","4fba8b5b":"### date_added ","f8721bd2":"##  Verificando se os dados est\u00e3o limpos","fd87fefa":"### Filmes\n\n a dura\u00e7\u00e3o dos filmes ser\u00e1 dividida em tr\u00eas categorias:\n\n   - Menos de 1.30 horas.\n   - Mais de 1.30 horas e menos de 2.30 horas.\n   - Mais de 2.30 horas.","9a77eb8b":"## Distribui\u00e7\u00e3o do conte\u00fado","0163f05d":"**director** e **cast**: n\u00e3o s\u00e3o necess\u00e1rias para a an\u00e1lise (sem muita informa\u00e7\u00e3o).\n\n**country**: \u00e9 uma vari\u00e1vel importante,ent\u00e3o ser\u00e1 necess\u00e1rio corrigi-l\u00e1. \n\n**date_added** : N\u00e3o foi poss\u00edvel achar os valores para esta coluna na internet, ent\u00e3o as linhas que n\u00e3o cont\u00eam o valor ser\u00e3o descartadas, pois s\u00e3o apenas 11.\n\n**rating** : os dados para esta coluna pode ser encontrados na Amazon ranting.","c8d2b5be":"## df.info()","dd5b609a":"# Cirando novas colunas com base em vari\u00e1veis","4c27fc9e":"### Programas de TV","0b8958d7":"# visualiza\u00e7\u00e3o dos dados","25602568":"### Rating","c6924dcc":"### Type e publico_alvo\n- As colunas type e publico_alvo devem ser uma categoria.","de35e72d":"## Lan\u00e7amento do ano por g\u00eaneros","8686292e":"# An\u00e1lise de dados - Netflix \n\nEssa an\u00e1lise de dados foi feita utilizando um conjunto de dados coletado do Flixable, um mecanismo de pesquisa de terceiros da Netflix.\n\n---\n# Dados\n\n- **'show_id'**: ID \u00fanico para cada filme \/ programa de TV.\n- **'type'**: se \u00e9 filme ou programa de TV.\n- **'title'**: T\u00edtulo do filme \/ programa de TV.\n- **'director'**: Diretor do filme\/ programa de TV.\n- **'cast'**: Atores envolvidos no filme\/ programa de TV.\n- **'country'**: Pa\u00eds onde o filme\/ programa de TV foi produzido.\n- **'date_added'**: Data em que foi adicionado ao Netflix.\n- **'release_year'**: Ano de lan\u00e7amento real do filme\/ programa de TV.\n- **'rating'**: Classifica\u00e7\u00e3o do filme\/ programa de TV.\n- **'duration'**: Dura\u00e7\u00e3o total - em minutos ou em n\u00fameros de temporadas.","a65dce65":"### P\u00fablico alvo\n- o p\u00fablico alvo ser\u00e1 definido com base na Classifica\u00e7\u00e3o Indicativa (rating).","ab25831e":"## An\u00e1lise de g\u00eanero","d57529c7":"# Retirando colunas desnecess\u00e1rias","7babade4":"### Country\n- Em algumas linhas a coluna country cont\u00e9m uma lista com varios pa\u00edses. Para facilitar, ser\u00e1 usado apenas o primeiro pa\u00eds de cada lista.","4d088911":"### Separando filmes e programas de TV","787b00de":"# Ajustando os dados","b4cdb09a":"### Country\n-  os valores nulos ser\u00e3o trocados pelo pa\u00eds com maior numero de repeti\u00e7\u00f5es na coluna.","d369c6b2":"# Limpeza de Dados","87409638":"#### Programas","b557e693":"### Director e Cast","02cb669c":"### g\u00eanero\n- a coluna listed_in tem os g\u00eaneros que pertencem aos filmes \/ programas de tv , porem eles est\u00e3o juntos em apenas uma string, impossibilitando a leitura dos dados. Para que seja poss\u00edvel uma leitura de dados adequada \u00e9 necess\u00e1rio separar todos os g\u00eaneros em uma nova coluna."}}