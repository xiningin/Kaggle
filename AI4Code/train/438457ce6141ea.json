{"cell_type":{"5c7b5620":"code","9013826a":"code","2180bbcb":"code","42dbdc17":"code","7cd0a85c":"code","b3bd9b9b":"code","1d42ae5e":"code","4c74cfae":"code","64ff8779":"code","0dee96c1":"code","a499b880":"code","dee4057e":"code","77585d09":"code","4099c1ba":"code","f2fc3c37":"code","746c00f6":"code","62617419":"markdown","d9da4112":"markdown","dd3fe96f":"markdown","3729be1f":"markdown","37620ca8":"markdown","2f6d547b":"markdown","08719ebc":"markdown","cac85b1b":"markdown","bacaa72e":"markdown","39e7d524":"markdown","e76c85d3":"markdown","911ad69c":"markdown","22a8dec8":"markdown","09088a91":"markdown","04a92231":"markdown","be4f4a58":"markdown","05b33d3d":"markdown","f15595a3":"markdown","e3f9bdc7":"markdown"},"source":{"5c7b5620":"from datetime import datetime\nimport shutil\nimport os\n\nimport pandas as pd","9013826a":"DATA_DIR = '\/kaggle\/input\/ironmarch\/'\n\nMESSAGE_CSV = DATA_DIR + 'message_posts_edited.csv'\n\nMESSAGE_TOPIC_CSV_CORE = DATA_DIR + 'core_message_topics.csv'\nMESSAGE_TOPIC_CSV_ORIG = DATA_DIR + 'orig_message_topics.csv'\n\nUSER_CSV_CORE = DATA_DIR + 'core_members.csv'\nUSER_CSV_ORIG = DATA_DIR + 'orig_members.csv'\n\nPOST_CSV = DATA_DIR + 'forums_posts_edited.csv'\n\nPOST_TOPIC_CSV = DATA_DIR + 'orig_topics.csv'\n\n# load and combine `core` and `orig` message topic datasets\n_mtdfc = pd.read_csv( MESSAGE_TOPIC_CSV_CORE )\n_mtdfo = pd.read_csv( MESSAGE_TOPIC_CSV_ORIG )\nmtdf = pd.concat( [ _mtdfo, _mtdfc ] )\nmtdf = mtdf.drop_duplicates( )\n\n# load mesage dataset\nmdf = pd.read_csv( MESSAGE_CSV )\n\n# load and combine `core` and `orig` user datasets\n_udfc = pd.read_csv( USER_CSV_CORE )\n_udfo = pd.read_csv( USER_CSV_ORIG )\nudf = pd.concat( [ _udfo, _udfc ] )\nudf = udf.drop_duplicates( )\n\n# create dicts that map user ID to username, and vice-versa\nuser_id_to_name = dict( zip( udf[ 'member_id' ], udf[ 'name' ] ) )\nuser_name_to_id = dict( zip( udf[ 'name' ], udf[ 'member_id' ] ) )\n\n# load post dataset\npdf = pd.read_csv( POST_CSV )\n\n# load post topic (post thread ID) dataset \nptdf = pd.read_csv( POST_TOPIC_CSV )\n\n# get a dict that maps message topic id to the users in that conversation\ntopics_dict = dict( )\n\n# loop over all message topic ids in the topic dataset\nfor mt_id in mtdf[ 'mt_id' ]:\n\n    # there's some missing data between the message datasets and the message topic datasets, so \n    # this makes sure all users for a given topic are included\n    tmpdf = mdf[ mdf[ 'msg_topic_id' ] == mt_id ]\n    users_m = list( set( tmpdf[ 'msg_author_id' ] ) )\n\n    tmpdf = mtdf[ mtdf[ 'mt_id' ] == mt_id ]\n    users_t = list( set( list( tmpdf['mt_starter_id'] ) + list( tmpdf[ 'mt_to_member_id' ] ) ) )\n\n    # get list of all users involved in the conversation for the given message topic\n    users = list( set( users_m + users_t ) )\n\n    # remove null user\n    if 0 in users:\n        users.remove( 0 )\n\n    # add sorted tuple of users in the conversation to the \n    users = tuple( sorted( users ) )\n    topics_dict[ mt_id ] = users","2180bbcb":"DT_FMT = \"%m\/%d\/%Y, %H:%M:%S\"\n\ndef get_datetime( timestamp ):\n  \n    return datetime.fromtimestamp( int( timestamp ) ).strftime( DT_FMT )\n  \ndef print_message_results( _tdf ):\n  \n    for msg, username, uid, timestamp in zip( \n        _tdf[ 'msg_post' ], \n        _tdf[ 'user_name' ],\n        _tdf[ 'msg_author_id' ],\n        _tdf[ 'msg_date' ] ):\n\n        print( f'{username} ({uid})' )\n        print( get_datetime( timestamp ) )\n        print( '\\n' )\n        print( msg )\n        print( '\\n' )\n        print( '+' * 80 )\n        print( '\\n\\n' )\n\ndef print_post_results( _tdf ):\n\n    for post, tid, pid, username, uid, timestamp in zip( \n        _tdf[ 'post' ], \n        _tdf[ 'topic_id' ],\n        _tdf[ 'pid' ], \n        _tdf[ 'author_name' ],\n        _tdf[ 'author_id' ],  \n        _tdf[ 'post_date' ], ):\n\n        print( f'{username} ({uid})' )\n        print( f'thread id: {tid}, post id: {pid}' )\n        print( get_datetime( timestamp ) )\n        print( '\\n' )\n        print( post )\n        print( '\\n' )\n        print( '+' * 80 )\n        print( '\\n\\n' )\n\ndef get_interacted_users( user_id ):\n  \n    topics = { tid : users for tid, users in topics_dict.items( ) if ( user_id in users ) }  \n\n    _tdf = mdf[ mdf[ 'msg_topic_id' ].isin( topics.keys( ) ) ]\n    user_id_list = sorted( list( set( _tdf[ 'msg_author_id' ] ) ) )\n\n    return { uid : user_id_to_name.get( uid ) for uid in user_id_list if uid not in ( user_id, 0 ) }\n\ndef get_threads_started( user_id ):\n    \n    _tdf = ptdf[ ptdf[ 'starter_id' ] == user_id ]\n    _tdf = _tdf.sort_values( by = 'start_date' )\n    \n    return sorted( list( set( _tdf[ 'tid' ] ) ) )","42dbdc17":"def get_messages( user_id_1 = None, user_id_2 = None, term = None, filename = None ):\n  \n    if all( v is None for v in [ user_id_1, user_id_2, term ] ):\n        raise ValueError( 'at least one of `user_id_1`, `user_id_2`, or `term` must be specified' )\n\n    if ( ( user_id_1 is None ) and ( user_id_2 is None ) ):\n        topic_bool = True\n    else:\n        if user_id_2 is None:\n            topics = { tid : users for tid, users in topics_dict.items( ) if ( user_id_1 in users ) }  \n        else:\n            topics = { tid : users for tid, users in topics_dict.items( ) if ( (user_id_1 in users ) and (user_id_2 in users) ) }\n        topic_bool = mdf[ 'msg_topic_id' ].isin( topics.keys( ) )\n        \n    if term is None:\n        term_bool = True\n    else:\n        term_bool = mdf[ 'msg_post' ].str.lower( ).str.contains( term.lower( ), na = False )\n\n    _tdf = mdf[ topic_bool & term_bool ]\n\n    if filename is None:\n        print_message_results( _tdf )\n    else:\n        _tdf.to_csv( filename, index = False )\n\ndef get_posts( user_id = None, thread_id = None, term = None, filename = None ):\n  \n    if all( v is None for v in [ user_id, thread_id, term ] ):\n        raise ValueError( 'at least one of `user_id`, `topic_id`, or `term` must be specified' )\n\n    if user_id is None:\n        user_bool = True\n    else:\n        user_bool = pdf[ 'author_id' ] == user_id\n\n    if thread_id is None:\n        thread_bool = True\n    else:\n        thread_bool = pdf['topic_id'] == thread_id\n\n    if term is None:\n        term_bool = True\n    else:\n        term_bool = pdf[ 'post' ].str.lower( ).str.contains( term.lower( ), na = False )\n\n    _tdf = pdf[ user_bool & thread_bool & term_bool ]\n\n    if filename is None:\n        print_post_results( _tdf )\n    else:\n        _tdf.to_csv( filename, index = False )","7cd0a85c":"username_1 = 'Odin'\nusername_2 = 'Rape'\n\nuser_id_1 = user_name_to_id[ username_1 ]\nuser_id_2 = user_name_to_id[ username_2 ]\n\nprint( username_1, user_id_1 )\nprint( username_2, user_id_2 )","b3bd9b9b":"get_messages( user_id_1 = 7600, user_id_2 = 13353 )","1d42ae5e":"get_messages( user_id_1 = 7600, user_id_2 = 13353, term = 'atomwaffen' )","4c74cfae":"get_messages( user_id_1 = 7600, user_id_2 = 13353, filename = '7600_13353_messages.csv' )","64ff8779":"get_messages( user_id_1 = 7600, filename = '7600_messages.csv' )","0dee96c1":"get_interacted_users( user_id = 7600 )","a499b880":"user_id_1 = 7600\n\noutput_dir = f'{user_id_1}_messages'\n\nos.makedirs( output_dir, exist_ok = True )\n\nfor user_id_2 in get_interacted_users( user_id = user_id_1 ):\n    get_messages( \n        user_id_1 = user_id_1, \n        user_id_2 = user_id_2, \n        filename = os.path.join( output_dir, f'{user_id_1}_{user_id_2}.csv' ) )\n    \nshutil.make_archive( \n    base_name = output_dir, \n    format = 'zip', \n    base_dir = output_dir )","dee4057e":"get_threads_started( 7600 )","77585d09":"get_posts( thread_id = 3759 )","4099c1ba":"get_posts( user_id = 7600, filename = '7600_posts.csv' )","f2fc3c37":"get_posts( term = 'islamofascism' )","746c00f6":"get_posts( user_id = 7600, thread_id = 4457,  term = 'train' )","62617419":"We can also use the `get_posts` function to search posts for a given term. The search is case-insensitive. For example, the following command searches for all posts that use the term \"islamofascism\" ","d9da4112":"* **get_messages** : retrieve messages from the message dataset if they satisfy the specified criteria:\n    * `user_id_1` ( `int`, default `None` ) :\n        If specified, only messages involving this user are retrieved.\n    * `user_id_2` ( `int`, default `None` ) :\n        If specified, only messages between `user_id_1` and this user are retrieved\n    * `term`: ( `str`, default `None` ) :\n        If specified, only messages that contain this term (case insensitive) are retrieved\n    * `filename`: ( `str`, default `None` ) :\n        If specified, retrieved messages and associated information are saved as CSV to this file.\n        If not specified, results are printed.\n        \n        \n* **get_posts** : retrieve posts from the post dataset if they satisfy the specified criteria:\n    * `user_id` ( `int`, default `None` ) :\n        If specified, only posts made by this user are retrieved.\n    * `thread_id` ( `int`, default `None` ) :\n        If specified, only posts from the specified thread are retrieved.\n    * `term`: ( `str`, default `None` ) :\n        If specified, only posts that contain this term (case insensitive) are retrieved\n    * `filename`: ( `str`, default `None` ) :\n        If specified, retrieved posts and associated information are saved as CSV to this file.\n        If not specified, results are printed.","dd3fe96f":"We can also use the `get_posts` function to retrieve every post Brandon made. He made a lot of posts (more than 1800), so we'll save that by specifying a value for the `filename` argument:","3729be1f":"## Define main functions for searching data","37620ca8":"## Define auxilliary functions","2f6d547b":"Now let's find all messages between Brandon and John using the `get_messages` function","08719ebc":"It turns out that Brandon had a lot of Nazi friends, and sent messages to a lot of other Iron March users. We can get a list of all users who Brandon interacted with using the `get_interacted_users` function:","cac85b1b":"We can also retrieve all messages sent by a given user, if we leave the `user_id_2` argument blank, for example, the following command saves all messages sent by Brandon:","bacaa72e":"If we add a `filename` argument to the `get_messages` function, we can save the results of the search as a CSV, which can be accessed on the right sidebar, under the directory `output\/kaggle\/working`. to download a file, hover your mouse over the file name, click the vertical 3 dots, and click the \"Download\" button. \n\nNOTE: you may beed to click the \"Refresh directory contents\" button to the right of `\/kaggle\/working` for the file to show up.","39e7d524":"This notebook contains functions for reading and exporting data from the Iron March data leak. You can filter messages and posts based on particular fields, for example finding all messages between two users that contain a particular term, or finding all posts made by a particular user from a particular forum thread.\n\nThe two main functions are \n* `get_messages` : retrieve entries from the message dataset based on specified criteria\n* `get_posts` : retrieve entries from the post dataset based on specified criteria\n\nIf you've never used a Jupyter Notebook before, this all might look confusing. Basically, just read the text, and press your \"Shift+Enter\" button on the Code cells (the sections that have colorful text), and by the end of the notebook you should have some idea how to use the search functions.","e76c85d3":"# Iron March Advanced Search","911ad69c":"Let's look at all posts in the first thread Brandon started, which introduced himself to the Iron March community (most of the replies are people making fun of him for being a \"third positionist\", rather than a full Nazi). We can do this by using the first thread ID from the previous cell as the `thread_id` argument in the `get_posts` function:","22a8dec8":"Finally, we can use the `get_posts` function to search by multiple criteria, specifying a `term`, `thread_id`, and `user_id`. For example, the following command retrieves all posts by user `7600` from thread `4457`, that contain the term `\"train\"`","09088a91":"# Examples","04a92231":"## Load datasets and prepare auxilliary variables","be4f4a58":"We can also see what forum threads a given user started using the `get_threads_started` function. For example, the command below returns a list of all threads started by Brandon:","05b33d3d":"The `7600_messages.csv` file is a bit of a pain to use, since there are multiple conversations in the same file, which can get confusing. Instead, we can use the `get_interacted_users` function with the `get_messages` function to make individual CSV files for each conversation. The following command creates files for every conversation Brandon had on Iron March, then compresses them all into a single zip file:","f15595a3":"We can also filter by a search term, for example finding all messages between Brandon and John that contain the term `atomwaffen`:","e3f9bdc7":"Start out by getting the user ID of Atomwaffen Division founder Brandon Russell, who used the username *Odin*, and former Atomwaffen Division leader John Cameron Denton, who used the username *Rape*"}}