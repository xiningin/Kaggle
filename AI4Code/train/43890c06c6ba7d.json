{"cell_type":{"3dddba4e":"code","077dbb24":"code","7e5e3a8c":"code","01451e59":"code","314f5786":"code","5dec3bb4":"code","a3a83b55":"code","30795be1":"code","9320030b":"code","4ed758dd":"markdown"},"source":{"3dddba4e":"#\u30e9\u30a4\u30d6\u30e9\u30ea\u30a4\u30f3\u30dd\u30fc\u30c8\nimport os\nimport re\nimport time\nimport warnings\nfrom tqdm import tqdm\nimport numpy as np\nfrom numpy import array\nfrom numpy import newaxis\nimport pandas as pd \nfrom sklearn import preprocessing, metrics\nfrom keras.layers.core import Dense, Activation, Dropout\nfrom keras.layers.recurrent import LSTM\nfrom keras.layers import RepeatVector,TimeDistributed\nfrom keras.models import Sequential\n\n#\u74b0\u5883\u8a2d\u5b9a\nos.environ['TF_CPP_MIN_LOG_LEGEL']='3'\nwarnings.filterwarnings('ignore')\n\n#\u30c7\u30fc\u30bf\u30a4\u30f3\u30dd\u30fc\u30c8\ncal = pd.read_csv(\"\/kaggle\/input\/m5-forecasting-accuracy\/calendar.csv\")\nss = pd.read_csv(\"\/kaggle\/input\/m5-forecasting-accuracy\/sample_submission.csv\")\nsellp = pd.read_csv(\"\/kaggle\/input\/m5-forecasting-accuracy\/sell_prices.csv\")\nstv = pd.read_csv(\"\/kaggle\/input\/m5-forecasting-accuracy\/sales_train_validation.csv\")","077dbb24":"#\u30e2\u30c7\u30eb\u751f\u6210\u95a2\u6570\ndef build_model(n_features,n_out_seq_length,num_y):\n    \n    model = Sequential()\n    \n    model.add(LSTM(128, activation='relu', input_shape=(28, n_features),return_sequences=False))\n    model.add(RepeatVector(n_out_seq_length))\n    \n    model.add(LSTM(32, activation='relu',return_sequences=True))\n    \n    model.add(TimeDistributed(Dense(num_y)))\n    model.compile(optimizer='adam', loss='mse')\n\n    start = time.time()\n    print('\u5b9f\u884c\u6642\u9593\uff1a\u3000', time.time()-start)\n    return model","7e5e3a8c":"#\u6b63\u898f\u5316\u3059\u308b\u95a2\u6570\uff08\u6700\u5927\u5024\u30920,\u6700\u5927\u5024\u30921\u306b\u3059\u308b\uff09\ndef Normalize(list):\n    list = np.array(list)\n    #\u914d\u5217\u306e\u72b6\u614b\u304b\u3089\u884c\u5217\u306b\u5909\u63db\n    low, high = np.percentile(list, [0, 100])\n    delta = high - low\n    if delta != 0:\n        for i in range(0, len(list)):\n            list[i] = (list[i]-low)\/delta\n    return  list,low,high\n\n#\u6b63\u898f\u5316\u304b\u3089\u623b\u3059\u95a2\u6570\ndef FNoramlize(list,low,high):\n    delta = high - low\n    if delta != 0:\n        for i in range(0, len(list)):\n            list[i] = list[i]*delta + low\n    return list","01451e59":"###calendar\u306e\u6587\u5b57\u30c7\u30fc\u30bf\u3092\u6570\u5024\u306b\u5909\u63db\u3059\u308b\u6642\u306b\u4f7f\u3046\u95a2\u6570\ndef transform(data):\n    #nan\u3092\"unknown\"\u3067\u57cb\u3081\u308b\n    nan_features = ['event_name_1', 'event_type_1', 'event_name_2', 'event_type_2']\n    for feature in nan_features:\n        data[feature].fillna('unknown', inplace = True)\n    #\u6587\u5b57\u30c7\u30fc\u30bf\u3092\u6570\u5024\u5316\n    cat = ['event_name_1','event_type_1','event_name_2','event_type_2','snap_CA','snap_TX','snap_WI']\n    for feature in cat:\n        encoder = preprocessing.LabelEncoder()\n        data[feature] = encoder.fit_transform(data[feature])\n    \n    return data","314f5786":"###sell_price.csv\u306e\u6574\u5f62###\n#\u8ca9\u58f2\u4fa1\u683c\u3068calendar\u306e\u7d50\u5408\nprice_fea = cal[['wm_yr_wk','date']].merge(sellp, on = ['wm_yr_wk'], how = 'left')\n#\u5546\u54c1\u3092\u7e26\u8ef8\u3001\u65e5\u306b\u3061\u3092\u6a2a\u8ef8\u306b\u3057\u3066\u5024\u6bb5\u3092pivot\nprice_fea['id'] = price_fea['item_id']+'_'+price_fea['store_id']+'_validation'\ndf = price_fea.pivot('id','date','sell_price')\n#\u5024\u6bb5\u306e\u9077\u79fb\u3092stv\u3068merge\u3057\u3001\u9077\u79fb\u3060\u3051\u3092\u53d6\u308a\u51fa\u3057\u3001index\u3092\u63c3\u3048\u305f\nprice_df = stv.merge(df,on=['id'],how= 'left').iloc[:,-145:]\nprice_df.index = stv.id","5dec3bb4":"###validation.csv\u306e\u6574\u5f62###\n#\u5b9a\u6570\ndays_val = range(1, 1914)\n#validation.csv\u304b\u3089\u58f2\u308a\u4e0a\u3052\u30c7\u30fc\u30bf\u306e\u307f\u3092\u62bd\u51fa\ntime_series_columns = [f'd_{i}' for i in days_val]\ntime_series_data = stv[time_series_columns]","a3a83b55":"###calendar.csv\u306e\u6574\u5f62###\n#\u5b9a\u6570\ndays_cal = range(1, 1970)\nx_label = ['event_name_1','event_type_1','event_name_2','event_type_2','snap_CA','snap_TX','snap_WI','wday_bool']\n#\u9031\u672b\u30921,0\u306b\u5909\u63db\ncal.loc[cal['wday'] < 3, 'wday_bool'] = 1\ncal.loc[cal['wday'] >= 3, 'wday_bool'] = 0\n#cal\u30c7\u30fc\u30bf\u306e\u30c7\u30fc\u30bf\u6574\u5f62\uff08\u8ee2\u7f6e\u30010\u57cb\u3081\uff09\ntime_series_columns = [f'd_{i}' for i in days_cal]\ntransfer_cal = pd.DataFrame(cal[x_label].values.T, index=x_label, columns= time_series_columns)\ntransfer_cal = transfer_cal.fillna(0)\n#\u53e4\u3044\u30c7\u30fc\u30bf\u524a\u9664\ncal['date'] = pd.to_datetime(cal['date'])\ncal = cal[cal['date']>= '2016-1-27']\n#\u6587\u5b57\u30c7\u30fc\u30bf\u306e\u6570\u5024\u5316\ncal= transform(cal)\n#\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u5316\ntransfer_cal = pd.DataFrame(cal[x_label].values.T,index=x_label)","30795be1":"###\u5b66\u7fd2\u3001\u30c6\u30b9\u30c8\u3067\u4f7f\u7528\u3059\u308b\u30de\u30b9\u30bf\u30fc\u30c7\u30fc\u30bf\u4f5c\u6210###\n#\u5b9a\u6570\ndata_len, step_len = 100,28\n\n#\u30de\u30b9\u30bf\u30fc\u30c7\u30fc\u30bf\nX_data = []\n\n#price,calender,validation\u306e\u30c7\u30fc\u30bf\u3092\u7d50\u5408\u3057\u3066\u30de\u30b9\u30bf\u30fc\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\nfor i in tqdm(range(time_series_data.shape[0])):\n    X_data.append([list(t) for t in zip(time_series_data.iloc[i][-data_len:],\n                                   transfer_cal.loc['event_type_1'][-(data_len+step_len):-(step_len)],\n                                   transfer_cal.loc['event_type_2'][-(data_len+step_len):-(step_len)],\n                                   transfer_cal.loc['snap_CA'][-(data_len+step_len):-(step_len)],\n                                   transfer_cal.loc['snap_TX'][-(data_len+step_len):-(step_len)],\n                                   transfer_cal.loc['snap_WI'][-(data_len+28):-(step_len)],\n                                   transfer_cal.loc['wday_bool'][-(data_len+28):-(step_len)],\n                                   price_df.iloc[i][-(data_len+28):-(step_len)])]) \nX_data = np.asarray(X_data, dtype=np.float32)","9320030b":"#\u5b9a\u6570\nn_steps = 28\nn_features = 8\nn_out_seq_length =28\nnum_y = 1\nn_items = 30490 # number of traindata\n\n###\u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\u4f5c\u6210###\n\n#X_data\u306e\u3046\u3061\u300156\u65e5\u9593\u306e\u307f\u306e\u30c7\u30fc\u30bf\u3092\u62bd\u51fa\u3001\u305d\u308c\u3092\u6b63\u898f\u5316\u3059\u308b\u3002(y:d_1857~d_1913 x:d_1885~d_1941)\ntrain_n,train_low,train_high = Normalize(X_data[:,-(n_steps*2):,:])\n\n#d_1857~d_1885\u306e\u76ee\u7684\u5909\u6570\u3068d_1885~d_1913\u306e\u8aac\u660e\u5909\u6570\u3092\u62bd\u51fa\nX_train = train_n[:,-28*2:-28,:]\nX_train = X_train.reshape((X_train.shape[0], X_train.shape[1], n_features))\n\n#d_1885~d_1913\u306e\u76ee\u7684\u5909\u6570\uff08\u58f2\u308a\u4e0a\u3052\uff09\u3092\u62bd\u51fa\ny = train_n[:,-28:,0] \ny = y.reshape((y.shape[0], y.shape[1], 1))\n\n###\u30e2\u30c7\u30eb\u69cb\u7bc9\u3001\u5b66\u7fd2###\n\nmodel = build_model(n_features,n_out_seq_length,num_y)\nmodel.fit(X_train, y, epochs=15, batch_size=1000)\n\n\n###\u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\u4f5c\u6210###\n\n#x_train\u304b\u3089\u4e0e\u3048\u3089\u308c\u305f28\u65e5\u306einput\u7528\u306e\u8aac\u660e\u5909\u6570\u3092\u62bd\u51fa\uff08d_1913~d_1941\uff09\nx_input = array(X_train[:,-n_steps*1:])\nx_input = x_input.reshape((n_items, n_steps*1, n_features))\n\n###\u30c6\u30b9\u30c8###\n\n#\u4e0e\u3048\u3089\u308c\u305f28\u65e5\u306einput\u7528\u306e\u8aac\u660e\u5909\u6570\u304b\u3089\u63d0\u51fa\u7528\u306e\u76ee\u7684\u5909\u6570\uff08\u58f2\u308a\u4e0a\u3052\uff09\u3092\u51fa\u529b\u3001\u3053\u308c\u307e\u3067\u306e\u58f2\u308a\u4e0a\u3052\u3068\u7d50\u5408\ny_predict = model.predict(x_input[:,-n_steps:], verbose=0)\nx_input = np.concatenate((x_input[:,:,0].reshape(x_input.shape[0],x_input.shape[1]),y_predict.astype(np.float32).reshape(x_input.shape[0],x_input.shape[1])),axis=1).reshape((x_input.shape[0],x_input.shape[1]+28,1))\n\n###submit\u7528\u306e\u30c7\u30fc\u30bf\u8abf\u6574###\n\n#\u6b63\u898f\u5316\u89e3\u9664\u3068\u6574\u6570\u5316\uff08\u4e38\u3081\u8fbc\u307f\uff09\nx_input = FNoramlize(x_input,train_low,train_high)\nx_input = np.rint(x_input)\n\n#\u4e88\u6e2c\u90e8\u4f4d\u3092\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u5316\u3001\u30ab\u30e9\u30e0\u8ffd\u52a0\u30010\u672a\u6e80\u30c7\u30fc\u30bf\u30920\u306b\u3059\u308b\nforecast = pd.DataFrame(x_input.reshape(x_input.shape[0],x_input.shape[1])).iloc[:,-28:]\nforecast.columns = [f'F{i}' for i in range(1, forecast.shape[1] + 1)]\nforecast[forecast < 0] =0\n\n#submit\u7528\u306e\u30c7\u30fc\u30bf\u6574\u5f62\uff08id\u8ffd\u52a0\u3068validation\u3001evaluation\u7528\u306e\u4e88\u6e2c\u30c7\u30fc\u30bf\u8907\u88fd\uff09\nvalidation_ids = stv['id'].values\nevaluation_ids = [i.replace('validation', 'evaluation') for i in validation_ids]\nids = np.concatenate([validation_ids, evaluation_ids])\n\npredictions = pd.DataFrame(ids, columns=['id'])\nforecast = pd.concat([forecast]*2).reset_index(drop=True)\npredictions = pd.concat([predictions, forecast], axis=1)\npredictions.to_csv('submission.csv', index=False)  #Generate the csv file.","4ed758dd":"\u53c2\u8003notebook:<br>\n\u30fbhttps:\/\/www.kaggle.com\/takahiro1127\/starter-data-exploration-lstm<br>\n\u30fbhttps:\/\/www.kaggle.com\/robikscube\/m5-forecasting-starter-data-exploration"}}