{"cell_type":{"1a7c666f":"code","a76595ab":"code","7e0ec133":"code","49dd1976":"code","5a1d3079":"code","0b9a49ae":"code","f65afecf":"code","5762b3cc":"code","f411a09d":"code","344c5c31":"code","9079ff04":"code","de1f8009":"code","3fd5a8cc":"code","223d275e":"code","5ff4c036":"code","1c210323":"code","a8e267dc":"code","79461710":"code","719504b6":"code","20d257a2":"code","9847efa5":"code","4f41e664":"code","c47ec0be":"code","612162fd":"code","4aee4593":"code","d3e15313":"code","3d53b507":"code","389ac8d0":"code","0d9d494c":"code","a1417c97":"code","93ff25d6":"code","70d33a8b":"code","a8d91e38":"code","ee60faad":"code","cac90b37":"code","db0f82a9":"code","478c0942":"code","3656387b":"code","48e6d332":"code","e9724bd5":"code","d5a8836d":"code","1be0e999":"code","c23082b1":"code","3a594ae6":"code","f0dc0aad":"code","e7ac6a42":"code","73363b68":"code","796f0d6d":"code","a51a6ab3":"code","2383a354":"code","587bde66":"code","72e20926":"code","d4b241f4":"code","7ef08af8":"code","6b293036":"code","7a5f458c":"code","ded5e9f7":"code","1eef1231":"code","c7f5bd6e":"code","c7835a9a":"code","6e47fdb1":"code","dacba61b":"code","fab9b30c":"code","13fe8b0e":"code","99b96dbe":"code","10f59a0e":"code","fafb23f7":"code","d2a39b96":"code","ae2bbefa":"code","e9ac22e6":"markdown","f1197d75":"markdown","bdcd1ac2":"markdown","17f23756":"markdown","c2d08fa1":"markdown","d139ecf3":"markdown","ea57d235":"markdown","1204b623":"markdown","80d171d7":"markdown","7fbd784b":"markdown","3618c050":"markdown","f2669fd7":"markdown","dd2de52a":"markdown","1febf8ea":"markdown","7109fcdb":"markdown","a2c32456":"markdown","7a14f0af":"markdown","44e4d85b":"markdown","2246a59c":"markdown","b6c82a50":"markdown","6687f90f":"markdown","1e73f6fe":"markdown","426ee778":"markdown","3c872742":"markdown","87f3b514":"markdown","afe376ce":"markdown","0e32cd8b":"markdown","d6122cbc":"markdown","ecd6c1f9":"markdown","8c329eab":"markdown","b6e50213":"markdown","669a7469":"markdown","9a11c55f":"markdown","87aa51b8":"markdown","f77ce9e4":"markdown","8f5e4207":"markdown","6a3a57d4":"markdown","27bccd0d":"markdown","1d87224b":"markdown","1e9a5bae":"markdown","4cbde003":"markdown","2c9c03f2":"markdown","c885aa45":"markdown","d124808c":"markdown","41da3030":"markdown","19472945":"markdown","59bce178":"markdown","5209163f":"markdown","3f0c0ece":"markdown","d33d9a14":"markdown","42e1d6d2":"markdown","f022cfb8":"markdown","a85159d5":"markdown","b66a7acf":"markdown","91e3ae9e":"markdown","78eee005":"markdown"},"source":{"1a7c666f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a76595ab":"# import the necessary libraries\n\nimport numpy as np \nimport pandas as pd\nfrom datetime import date\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom IPython.display import Markdown\nimport plotly.graph_objs as go\nimport plotly.offline as py\nfrom plotly.subplots import make_subplots\nimport plotly.express as px\nfrom plotly.offline import init_notebook_mode, plot, iplot, download_plotlyjs\nimport plotly as ply\nimport pycountry\nimport folium \nfrom folium import plugins\nimport json\nfrom folium.plugins import HeatMap, HeatMapWithTime\n\n\n%config InlineBackend.figure_format = 'retina'\ninit_notebook_mode(connected=True)\n\n\n# Utility Functions\n\n'''Display markdown formatted output like bold, italic bold etc.'''\ndef formatted_text(string):\n    display(Markdown(string))\n\n\n'''highlight the maximum in a Series or DataFrame'''  \ndef highlight_max(data, color='yellow'):\n    attr = 'background-color: {}'.format(color)\n    if data.ndim == 1:  # Series from .apply(axis=0) or axis=1\n        is_max = data == data.max()\n        return [attr if v else '' for v in is_max]\n    else:  # from .apply(axis=None)\n        is_max = data == data.max().max()\n        return pd.DataFrame(np.where(is_max, attr, ''), index=data.index, columns=data.columns)   ","7e0ec133":"covid_19 = pd.read_csv('..\/input\/corona-virus-report\/covid_19_clean_complete.csv', parse_dates=['Date'])","49dd1976":"print(\"Covid_19 Shape\", covid_19.shape)","5a1d3079":"covid_19.head()","0b9a49ae":"formatted_text('***Covid 19 data information -***')\ncovid_19.info()","f65afecf":"formatted_text('***NULL values in the data -***')\ncovid_19.isnull().sum()","5762b3cc":"# Convert 'Last Update' column to datetime object\ncovid_19['Date'] = covid_19['Date'].apply(pd.to_datetime)\n\n# Fill the missing values in 'Province\/State' with the 'Country' name.\ncovid_19['Province\/State'] = covid_19['Province\/State'].replace(np.nan, covid_19['Country\/Region'])\n\n# Fill the missing values (if any) in 'Confirmed', 'Deaths', 'Recovered' with the 0\ncovid_19['Confirmed'] = covid_19['Confirmed'].replace(np.nan, 0)\ncovid_19['Deaths'] = covid_19['Deaths'].replace(np.nan, 0)\ncovid_19['Recovered'] = covid_19['Recovered'].replace(np.nan, 0)\n\n\n# Lets rename the columns - 'Province\/State' and 'Last Update' to remove the '\/' and space respectively.\ncovid_19.rename(columns={'Country\/Region': 'Country', 'Province\/State': 'State'}, inplace=True)\n\n# Convert 'Mainland China' to 'China'\ncovid_19['Country'] = np.where(covid_19['Country'] == 'Mainland China', 'China', covid_19['Country'])\n\n# Data Glimpse\ncovid_19.head()","f411a09d":"# Check for the missing values again to ensure that there are no more remaining\nformatted_text('***NULL values in the data -***')\ncovid_19.isnull().sum()","344c5c31":"# Lets check the total #Countries affected by nCoV\n\nformatted_text('***Affected Countries -***')\nCovid_19_Countries = covid_19['Country'].unique().tolist()\nprint(Covid_19_Countries)\nprint(\"\\n------------------------------------------------------------------\")\nprint(\"\\nTotal countries affected by nCoV: \",len(Covid_19_Countries))","9079ff04":"# Now lets see the Country - 'Others' which is there in the list above\nformatted_text('***Affected Country - Others***')\ncovid_19[covid_19['Country'] == 'US'].head()","de1f8009":"# Lets create a subset of the data for the cruise ship\n\ndiamond_cruise_ship_cases = covid_19[covid_19['Country'] == 'Cruise Ship']\n\n# Data Glimpse\ndiamond_cruise_ship_cases.head()","3fd5a8cc":"# Now that we have created a different subset for the cruise ship data, lets derive a subset with only the country data\ncovid_19_world_data = covid_19[covid_19['Country'] != 'Cruise Ship']\n\nformatted_text('***World Data -***')\n# Data Glimpse\ncovid_19_world_data.head()","223d275e":"formatted_text('***World Data Countries Afftected -***')\n\nprint(covid_19_world_data.Country.unique().tolist())\nprint(\"\\nTotal number of countries: \", len(covid_19_world_data.Country.unique().tolist()))","5ff4c036":"formatted_text('***Country and State wise grouped data -***')\n\ncovid_19_country_wise_data = covid_19_world_data.groupby(['Country', 'State'])['Confirmed', 'Deaths', 'Recovered'].max()\ncovid_19_country_wise_data","1c210323":"strDate = covid_19_world_data['Date'][-1:].astype('str')\nyear = int(strDate.values[0].split('-')[0])\nmonth = int(strDate.values[0].split('-')[1])\nday = int(strDate.values[0].split('-')[2].split()[0])\n\nformatted_text('***Last reported case date-time***')\nprint(strDate)\nprint(year)\nprint(month)\nprint(strDate.values[0].split('-')[2].split())","a8e267dc":"latest_covid_19_data = covid_19_world_data[covid_19_world_data['Date'] == pd.Timestamp(date(year,month,day))]\n\nlatest_covid_19_data.reset_index(inplace=True, drop=True)\n\nlatest_covid_19_data.head()","79461710":"latest_covid_19_data[pd.isnull(latest_covid_19_data).any(axis=1)]","719504b6":"CountryWiseData = pd.DataFrame(latest_covid_19_data.groupby('Country')['Confirmed', 'Deaths', 'Recovered'].sum())\nCountryWiseData['Country'] = CountryWiseData.index\nCountryWiseData.index = np.arange(1, len(covid_19_world_data.Country.unique().tolist())+1)\n\nCountryWiseData = CountryWiseData[['Country','Confirmed', 'Deaths', 'Recovered']]\n\nformatted_text('***Country wise numbers of ''Confirmed'', ''Deaths'', ''Recovered'' Cases***')\n\n#CountryWiseData = pd.merge(latest_covid_19_data[['Country', 'Lat','Long']], CountryWiseData, on='Country')\n\n#CountryWiseData = CountryWiseData.drop_duplicates(subset = \"Country\", keep = 'first', inplace = True) \n\nCountryWiseData","20d257a2":"# Import the WORLD Latitute Longitude Data\n\nworld_lat_lon_coordinates = pd.read_csv('\/kaggle\/input\/world-coordinates\/world_coordinates.csv')\nworld_lat_lon_coordinates.head()","9847efa5":"# Merge the Country co-coordinates above to the country wise data we created.\n\nCountryWiseData = pd.merge(world_lat_lon_coordinates, CountryWiseData, on='Country')\nCountryWiseData.head()","4f41e664":"WorldMap = folium.Map(location=[0,0], zoom_start=1.5,tiles='cartodbpositron')\n\nformatted_text('***Click on the pin to veiw details stats***')\n\nfor lat, long, confirmed, deaths, recovered, country in zip(CountryWiseData['latitude'],\n                                                           CountryWiseData['longitude'],\n                                                           CountryWiseData['Confirmed'],\n                                                           CountryWiseData['Deaths'],\n                                                           CountryWiseData['Recovered'], \n                                                           CountryWiseData['Country']):\n\n    if (deaths == 0):\n        folium.Marker(location=[lat, long]\n                    , popup = ('<strong>nCov Numbers:<\/strong> ' + '<br>' + \n                               '<strong>Country:<\/strong> ' + str(country) + '<br>'\n                               '<strong>Confirmed:<\/strong> ' + str(int(confirmed)) + '<br>'\n                               '<strong>Deaths:<\/strong> ' + str(int(deaths)) + '<br>'\n                               '<strong>Recovered:<\/strong> ' + str(int(recovered)) + '<br>')\n                    , icon=folium.Icon(color='darkblue',icon='info-sign'), color='rgb(55, 83, 109)'\n                    , tooltip = str(country), fill_color='rgb(55, 83, 109)').add_to(WorldMap)\n\n    else:\n        folium.Marker(location=[lat, long]\n                    , popup = ('<strong>nCov Numbers:<\/strong> ' + '<br>' + \n                               '<strong>Country:<\/strong> ' + str(country) + '<br>'\n                               '<strong>Confirmed:<\/strong> ' + str(int(confirmed)) + '<br>'\n                               '<strong>Deaths:<\/strong> ' + str(int(deaths)) + '<br>'\n                               '<strong>Recovered:<\/strong> ' + str(int(recovered)) + '<br>')\n                    , icon=folium.Icon(color='red', icon='info-sign'), color='rgb(26, 118, 255)'\n                    , tooltip = str(country), fill_color='rgb(26, 118, 255)').add_to(WorldMap)\n        \nWorldMap","c47ec0be":"WorldMap = folium.Map(location=[0,0], zoom_start=1.5,tiles='Stamen Toner')\n\nformatted_text('***Click on the dots to veiw details stats***')\n\nfor lat, long, confirmed, deaths, recovered, country, state in zip(latest_covid_19_data['Lat'],\n                                                           latest_covid_19_data['Long'],\n                                                           latest_covid_19_data['Confirmed'],\n                                                           latest_covid_19_data['Deaths'],\n                                                           latest_covid_19_data['Recovered'], \n                                                           latest_covid_19_data['Country'],\n                                                           latest_covid_19_data['State']):\n\n    if (deaths == 0):\n        folium.CircleMarker(location=[lat, long]\n                    , radius=3\n                    , popup = ('<strong>nCov Numbers:<\/strong> ' + '<br>' + \n                               '<strong>Country:<\/strong> ' + str(country) + '<br>'\n                               '<strong>State:<\/strong> ' + str(state) + '<br>'\n                               '<strong>Confirmed:<\/strong> ' + str(int(confirmed)) + '<br>'\n                               '<strong>Deaths:<\/strong> ' + str(int(deaths)) + '<br>'\n                               '<strong>Recovered:<\/strong> ' + str(int(recovered)) + '<br>')\n                    , color='blue'\n                    , tooltip = str(state)\n                    , fill_color='blue'\n                    , fill_opacity=0.7).add_to(WorldMap)\n\n    else:\n        folium.CircleMarker(location=[lat, long]\n                    , radius=3\n                    , popup = ('<strong>nCov Numbers:<\/strong> ' + '<br>' + \n                               '<strong>Country:<\/strong> ' + str(country) + '<br>'\n                               '<strong>State:<\/strong> ' + str(state) + '<br>'\n                               '<strong>Confirmed:<\/strong> ' + str(int(confirmed)) + '<br>'\n                               '<strong>Deaths:<\/strong> ' + str(int(deaths)) + '<br>'\n                               '<strong>Recovered:<\/strong> ' + str(int(recovered)) + '<br>')\n                    , color='red'\n                    , tooltip = str(state)\n                    , fill_color='red'\n                    , fill_opacity=0.7).add_to(WorldMap)\n        \nWorldMap","612162fd":"choropleth_map_confirmed = px.choropleth(CountryWiseData, locations='Country', \n                    locationmode='country names', color='Confirmed', \n                    hover_name='Country', range_color=[1,max(CountryWiseData.Confirmed)], \n                    color_continuous_scale='reds', \n                    title='Covid-19 Globally Confirmed Countries')\n\nchoropleth_map_confirmed.update(layout_coloraxis_showscale=False)\niplot(choropleth_map_confirmed)","4aee4593":"choropleth_map_deaths = px.choropleth(CountryWiseData, locations='Country', locationmode='country names', color='Deaths', hover_name='Country', range_color=[1,max(CountryWiseData.Deaths)], \n                                      color_continuous_scale='reds', title='Covid-19 Global Deaths Numbers')\n\nchoropleth_map_deaths.update(layout_coloraxis_showscale=False)\niplot(choropleth_map_deaths)","d3e15313":"choropleth_map_recovered = px.choropleth(CountryWiseData, locations='Country', \n                    locationmode='country names', color='Recovered', \n                    hover_name='Country', range_color=[1,max(CountryWiseData.Recovered)], \n                    color_continuous_scale='reds', \n                    title='Covid-19 Global Recovered Cases')\n\nchoropleth_map_recovered.update(layout_coloraxis_showscale=False)\niplot(choropleth_map_recovered)","3d53b507":"chinese_data_over_time = covid_19[(covid_19['Country'] == 'China')]\nchinese_data_over_time.head()","389ac8d0":"china_statewise_data = chinese_data_over_time.groupby(['State'])['Confirmed', 'Deaths', 'Recovered'].max()\n\nchina_statewise_data['State'] = china_statewise_data.index\nchina_statewise_data.index = np.arange(1, len(china_statewise_data.State.unique().tolist())+1)\n\nchina_statewise_data = china_statewise_data[['State','Confirmed', 'Deaths', 'Recovered']]\n\nformatted_text('***Country wise numbers of ''Confirmed'', ''Deaths'', ''Recovered'' Cases***')\n\nchina_statewise_data.head()","0d9d494c":"# Extract the state latitude and longitude coordinates from the time series data.\nchina_coordinates = chinese_data_over_time[['State','Lat','Long']]\nchina_coordinates.drop_duplicates(keep='first', inplace=True)\n\nchina_coordinates.index = np.arange(1, len(china_coordinates.State.unique().tolist())+1)\n\nchina_coordinates.head()","a1417c97":"china_statewise_data = pd.merge(china_coordinates, china_statewise_data, on='State')\n\nchina_statewise_data.head()","93ff25d6":"china_lat = 35.8617\nchina_lon = 104.1954\n\nformatted_text('***Click on the pin to veiw details stats***')\n\nChinaMap = folium.Map(location=[china_lat, china_lon], zoom_start=4, tiles='cartodbpositron')\n\nfor lat, long, confirmed, deaths, recovered, state in zip(china_statewise_data['Lat'],\n                                                           china_statewise_data['Long'],\n                                                           china_statewise_data['Confirmed'],\n                                                           china_statewise_data['Deaths'],\n                                                           china_statewise_data['Recovered'], \n                                                           china_statewise_data['State']):\n    \n    if (deaths == 0):\n        folium.Marker(location=[lat, long]\n                    , popup = ('<strong>nCov Numbers:<\/strong> ' + '<br>' + \n                                 '<strong>State:<\/strong> ' + str(state).capitalize() + '<br>'\n                                 '<strong>Confirmed:<\/strong> ' + str(int(confirmed)) + '<br>'\n                                 '<strong>Deaths:<\/strong> ' + str(int(deaths)) + '<br>'\n                                 '<strong>Recovered:<\/strong> ' + str(int(recovered)) + '<br>')\n                    , icon=folium.Icon(color='darkblue',icon='info-sign'), color='rgb(55, 83, 109)'\n                    , tooltip = str(state).capitalize(), fill_color='rgb(55, 83, 109)').add_to(ChinaMap)\n    else:\n        folium.Marker(location=[lat, long]\n                    , popup = ('<strong>nCov Numbers:<\/strong> ' + '<br>' + \n                                 '<strong>State:<\/strong> ' + str(state).capitalize() + '<br>'\n                                 '<strong>Confirmed:<\/strong> ' + str(int(confirmed)) + '<br>'\n                                 '<strong>Deaths:<\/strong> ' + str(int(deaths)) + '<br>'\n                                 '<strong>Recovered:<\/strong> ' + str(int(recovered)) + '<br>')\n                    , icon=folium.Icon(color='red', icon='info-sign'), color='rgb(26, 118, 255)'\n                    , tooltip = str(state).capitalize(), fill_color='rgb(26, 118, 255)').add_to(ChinaMap)\n    \n    \nChinaMap","70d33a8b":"# Load the CHina geo json file\n\nwith open('\/kaggle\/input\/china-geo-json\/china_geojson.json') as file:\n    china = json.load(file)","a8d91e38":"china_conf_choropleth = go.Figure(go.Choroplethmapbox(geojson=china, locations=china_statewise_data['State'],\n                                                      z=china_statewise_data['Confirmed'], colorscale='Aggrnyl',\n                                                      zmin=0, zmax=max(china_statewise_data['Confirmed']), marker_opacity=0.5, marker_line_width=0))\n\nchina_conf_choropleth.update_layout(mapbox_style=\"carto-positron\", mapbox_zoom=3, \n                                    mapbox_center = {\"lat\": china_lat, \"lon\": china_lon})\n\nchina_conf_choropleth.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\n\niplot(china_conf_choropleth)","ee60faad":"china_death_choropleth = go.Figure(go.Choroplethmapbox(geojson=china, locations=china_statewise_data['State'],\n                                                      z=china_statewise_data['Deaths'], colorscale='Sunset',\n                                                      zmin=0, zmax=max(china_statewise_data['Deaths']), marker_opacity=0.5, marker_line_width=0))\n\nchina_death_choropleth.update_layout(mapbox_style=\"carto-positron\", mapbox_zoom=3, \n                                    mapbox_center = {\"lat\": china_lat, \"lon\": china_lon})\n\nchina_death_choropleth.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\n\niplot(china_death_choropleth)","cac90b37":"china_recovered_choropleth = go.Figure(go.Choroplethmapbox(geojson=china, locations=china_statewise_data['State'],\n                                                      z=china_statewise_data['Recovered'], colorscale='Brbg',\n                                                      zmin=0, zmax=10000, marker_opacity=0.5, marker_line_width=0))\n\nchina_recovered_choropleth.update_layout(mapbox_style=\"carto-positron\", mapbox_zoom=3, \n                                    mapbox_center = {\"lat\": china_lat, \"lon\": china_lon})\n\nchina_recovered_choropleth.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\n\niplot(china_recovered_choropleth)","db0f82a9":"rest_of_world = CountryWiseData[CountryWiseData['Country'] != 'China']\nrest_of_world.head()","478c0942":"rest_of_world_confirmed = px.choropleth(rest_of_world, locations='Country', \n                    locationmode='country names', color='Confirmed', \n                    hover_name='Country', range_color=[1, 10000], \n                    color_continuous_scale='Geyser', \n                    title='Covid-19 Rest of World Confirmed Cases')\n\niplot(rest_of_world_confirmed)","3656387b":"rest_of_world_death = px.choropleth(rest_of_world, locations='Country', \n                    locationmode='country names', color='Deaths', \n                    hover_name='Country', range_color=[0, len(rest_of_world.Deaths)], \n                    color_continuous_scale='Picnic', \n                    title='Covid-19 Rest of World Death Cases')\n\niplot(rest_of_world_death)","48e6d332":"rest_of_world_recovered = px.choropleth(rest_of_world, locations='Country', \n                    locationmode='country names', color='Recovered', \n                    hover_name='Country', range_color=[1,len(rest_of_world.Recovered)], \n                    color_continuous_scale='viridis', \n                    title='Covid-19 Rest of World Recovered Cases')\n\niplot(rest_of_world_recovered)","e9724bd5":"formatted_text('***Countries withh all reported cases recovered -***')\nprint(rest_of_world[rest_of_world['Confirmed'] == \n                    rest_of_world['Recovered']][['Country','Confirmed', 'Recovered']].reset_index())","d5a8836d":"# diamond_cruise_ship_cases.reset_index(drop=True, inplace=True)\n\n# # We only need the latest data here\n# temp_ship = diamond_cruise_ship_cases.sort_values(by='Date', ascending=False).head(1)[['State', 'Confirmed', \n#                                                                                        'Deaths', 'Recovered']]\n\n# temp_ship","1be0e999":"# formatted_text('***Click on the pin to veiw details stats***')\n# cruiseMap = folium.Map(location=[diamond_cruise_ship_cases.iloc[0]['Lat'], diamond_cruise_ship_cases.iloc[0]['Long']], \n#                        tiles='cartodbpositron', min_zoom=8, max_zoom=12, zoom_start=12)\n\n# folium.Marker(location=[diamond_cruise_ship_cases.iloc[0]['Lat'], diamond_cruise_ship_cases.iloc[0]['Long']],\n#         popup =   '<strong>Ship : ' + str(temp_ship.iloc[0]['State']) + '<br>' +\n#                     '<strong>Confirmed : ' + str(temp_ship.iloc[0]['Confirmed']) + '<br>' +\n#                     '<strong>Deaths : ' + str(temp_ship.iloc[0]['Deaths']) + '<br>' +\n#                     '<strong>Recovered : ' + str(temp_ship.iloc[0]['Recovered'])\n#                     , icon=folium.Icon(color='red', icon='info-sign'), color='rgb(26, 118, 255)'\n#                     , tooltip = str(temp_ship.iloc[0]['State']), fill_color='rgb(26, 118, 255)').add_to(cruiseMap)\n\n# cruiseMap","c23082b1":"china_statewise_data[\"Country\"] = \"China\" # in order to have a single root node\n\nfig1 = px.treemap(china_statewise_data.sort_values(by='Confirmed', ascending=False).reset_index(drop=True), \n                 path=[\"Country\", \"State\"], values=\"Confirmed\", title='Number of Confirmed Cases in Chinese Provinces',\n                 color_discrete_sequence = px.colors.qualitative.Prism, hover_data=[\"Confirmed\"])\n\nfig1.data[0].textinfo = 'label+text+value+percent entry'\npy.offline.iplot(fig1)\n\nfig2 = px.treemap(china_statewise_data.sort_values(by='Deaths', ascending=False).reset_index(drop=True), \n                 path=[\"Country\", \"State\"], values=\"Deaths\", title='Number of Deaths Reported in Chinese Provinces',\n                 color_discrete_sequence = px.colors.qualitative.Prism, hover_data=[\"Deaths\"])\n\nfig2.data[0].textinfo = 'label+text+value+percent entry'\npy.offline.iplot(fig2)","3a594ae6":"temp2 = pd.DataFrame(covid_19_world_data.groupby(['Country', 'State'])['Confirmed', 'Deaths', 'Recovered'].max().reset_index())\ntemp2['Global'] = \"Global\" # to have a single root","f0dc0aad":"fig = px.treemap(temp2, \n                 path=[\"Global\", \"Country\"], values=\"Confirmed\", height=700,\n                 title='Number of Confirmed Cases Around The Globe',\n                 color_discrete_sequence = px.colors.qualitative.Prism)\nfig.data[0].textinfo = 'label+text+value+percent entry'\nfig.show()\n\nfig = px.treemap(temp2, \n                 path=[\"Global\", \"Country\", \"State\"], values=\"Confirmed\", height=700,\n                 title='Number of Confirmed Cases Around The Globe',\n                 color_discrete_sequence = px.colors.qualitative.Prism)\nfig.data[0].textinfo = 'label+text+value+percent parent+percent entry'\nfig.show()\n","e7ac6a42":"fig = px.treemap(temp2, \n                 path=[\"Global\", \"Country\"], values=\"Deaths\", height=700,\n                 title='Number of Deaths reported Globally',\n                 color_discrete_sequence = px.colors.qualitative.Prism)\nfig.data[0].textinfo = 'label+text+value+percent entry'\nfig.show()\n\nfig = px.treemap(temp2, \n                 path=[\"Global\", \"Country\", \"State\"], values=\"Deaths\", height=700,\n                 title='Number of Deaths reported Globally',\n                 color_discrete_sequence = px.colors.qualitative.Prism)\nfig.data[0].textinfo = 'label+text+value+percent parent+percent entry'\nfig.show()","73363b68":"conf_heatmap = folium.Map(location=[0,0], zoom_start=2)\n\nHeatMap(data=latest_covid_19_data[['Lat', 'Long', 'Confirmed']].groupby(['Lat', 'Long']).sum().reset_index().values.tolist(),radius=18, max_zoom=12).add_to(conf_heatmap)\n\nconf_heatmap","796f0d6d":"deaths_heatmap = folium.Map(location=[0,0], zoom_start=2)\n\nHeatMap(data=latest_covid_19_data[['Lat', 'Long', 'Deaths']].groupby(['Lat', 'Long']).sum().reset_index().values.tolist(),radius=18, max_zoom=12).add_to(deaths_heatmap)\n\ndeaths_heatmap","a51a6ab3":"Italy_Covid19 = pd.read_csv('\/kaggle\/input\/coronavirus-in-italy\/dati-regioni\/dpc-covid19-ita-regioni-20200318.csv')\nItaly_Covid19.head()","2383a354":"Italy_Covid19[['denominazione_regione','totale_positivi','deceduti']].sort_values('totale_positivi', ascending=False).head(5)","587bde66":"italy_lat = 42.50\nitaly_lon = 12.50\n\nformatted_text('***Click on the pin to veiw details stats***')\n\nItalyMap = folium.Map(location=[italy_lat, italy_lon], zoom_start=6, tiles='cartodbpositron')\n\nfor lat, long, confirmed, current_positive, deaths, recovered, region in zip(Italy_Covid19['lat'],\n                                                           Italy_Covid19['long'],\n                                                           Italy_Covid19['totale_casi'], \n                                                           Italy_Covid19['totale_positivi'],\n                                                           Italy_Covid19['deceduti'],\n                                                           Italy_Covid19['ricoverati_con_sintomi'], \n                                                           Italy_Covid19['denominazione_regione']):\n    \n    if (deaths == 0):\n        folium.Marker(location=[lat, long]\n                    , popup = ('<strong>nCov Numbers:<\/strong> ' + '<br>' + \n                                 '<strong>State:<\/strong> ' + str(region).capitalize() + '<br>'\n                                 '<strong>Total Confirmed:<\/strong> ' + str(confirmed) + '<br>'\n                                 '<strong>Current Positive Cases:<\/strong> ' + str(int(current_positive)) + '<br>'\n                                 '<strong>Deaths:<\/strong> ' + str(int(deaths)) + '<br>'\n                                 '<strong>Recovered:<\/strong> ' + str(int(recovered)) + '<br>')\n                    , icon=folium.Icon(color='darkblue',icon='info-sign'), color='rgb(55, 83, 109)'\n                    , tooltip = str(region).capitalize(), fill_color='rgb(55, 83, 109)').add_to(ItalyMap)\n    else:\n        folium.Marker(location=[lat, long]\n                    , popup = ('<strong>nCov Numbers:<\/strong> ' + '<br>' + \n                                 '<strong>State:<\/strong> ' + str(region).capitalize() + '<br>'\n                                 '<strong>Total Confirmed:<\/strong> ' + str(confirmed) + '<br>'\n                                 '<strong>Current Positive Cases<\/strong> ' + str(int(current_positive)) + '<br>'\n                                 '<strong>Deaths:<\/strong> ' + str(int(deaths)) + '<br>'\n                                 '<strong>Recovered:<\/strong> ' + str(int(recovered)) + '<br>')\n                    , icon=folium.Icon(color='red', icon='info-sign'), color='rgb(26, 118, 255)'\n                    , tooltip = str(region).capitalize(), fill_color='rgb(26, 118, 255)').add_to(ItalyMap)\n    \n    \nItalyMap","72e20926":"temp_Italy = Italy_Covid19.copy()\ntemp_Italy['Country'] = 'Italy' # to have a single root\n\nfig = px.treemap(temp_Italy, \n                 path=[\"Country\", \"denominazione_regione\"], values=\"totale_casi\", height=700,\n                 title='Total Confirmed Cases In Italy',\n                 color_discrete_sequence = px.colors.qualitative.Prism)\nfig.data[0].textinfo = 'label+text+value+percent entry'\nfig.show()\n\nfig = px.treemap(temp_Italy, \n                 path=[\"Country\", \"denominazione_regione\"], values=\"totale_positivi\", height=700,\n                 title='Number of Currently Positive Cases In Italy',\n                 color_discrete_sequence = px.colors.qualitative.Prism)\nfig.data[0].textinfo = 'label+text+value+percent entry'\nfig.show()\n","d4b241f4":"fig = px.treemap(temp_Italy, \n                 path=[\"Country\", \"denominazione_regione\"], values=\"deceduti\", height=700,\n                 title='Number of Deaths reported in the Italian Region',\n                 color_discrete_sequence = px.colors.qualitative.Prism)\nfig.data[0].textinfo = 'label+text+value+percent parent+percent entry'\nfig.show()","7ef08af8":"covid19_USA = pd.read_csv(\"..\/input\/covid19-in-usa\/us_states_covid19_daily.csv\")\ncovid19_USA.head(3)","6b293036":"# US Data\ncovid_19_USA = covid_19[covid_19['Country'] == 'US']\ncovid_19_USA = covid_19_USA[covid_19_USA['State'] != 'Grand Princess']\ncovid_19_USA = covid_19_USA[covid_19_USA['State'] != 'Diamond Princess']\n#covid_19_USA = covid_19_USA[covid_19_USA['State'] != 'Guam']\n\nformatted_text('***USA Numbers -***')\n\n# Data Glimpse\ncovid_19_USA.head()","7a5f458c":"USA_statewise_data = covid_19_USA.groupby(['State'])['Confirmed', 'Deaths', 'Recovered'].max()\n\nUSA_statewise_data['State'] = USA_statewise_data.index\nUSA_statewise_data.index = np.arange(1, len(USA_statewise_data.State.unique().tolist())+1)\n\nUSA_statewise_data = USA_statewise_data[['State','Confirmed', 'Deaths', 'Recovered']]\n\nUSA_locations = covid_19_USA[['State','Lat','Long']]\nUSA_locations.drop_duplicates(keep='first', inplace=True)\n\nUSA_statewise_data = pd.merge(USA_statewise_data, USA_locations, on='State')\n\nformatted_text('***Country wise numbers of ''Confirmed'', ''Deaths'', ''Recovered'' Cases***')\n\nUSA_statewise_data.head()","ded5e9f7":"us_lat = 45\nus_lon = -115\n\nformatted_text('***Click on the pin to veiw details stats***')\n\nUSAMap = folium.Map(location=[us_lat, us_lon], zoom_start=4, tiles='cartodbpositron')\n\nfor lat, long, confirmed, deaths, recovered, state in zip(USA_statewise_data['Lat'],\n                                                           USA_statewise_data['Long'],\n                                                           USA_statewise_data['Confirmed'],\n                                                           USA_statewise_data['Deaths'],\n                                                           USA_statewise_data['Recovered'], \n                                                           USA_statewise_data['State']):\n    \n    if (deaths == 0):\n        folium.Marker(location=[lat, long]\n                    , popup = ('<strong>nCov Numbers:<\/strong> ' + '<br>' + \n                                 '<strong>State:<\/strong> ' + str(state).capitalize() + '<br>'\n                                 '<strong>Total Confirmed:<\/strong> ' + str(confirmed) + '<br>'\n                                 '<strong>Deaths:<\/strong> ' + str(int(deaths)) + '<br>'\n                                 '<strong>Recovered:<\/strong> ' + str(int(recovered)) + '<br>')\n                    , icon=folium.Icon(color='darkblue',icon='info-sign'), color='rgb(55, 83, 109)'\n                    , tooltip = str(state).capitalize(), fill_color='rgb(55, 83, 109)').add_to(USAMap)\n    else:\n        folium.Marker(location=[lat, long]\n                    , popup = ('<strong>nCov Numbers:<\/strong> ' + '<br>' + \n                               \n                                 '<strong>State:<\/strong> ' + str(state).capitalize() + '<br>'\n                                 '<strong>Total Confirmed:<\/strong> ' + str(confirmed) + '<br>'\n                                 '<strong>Deaths:<\/strong> ' + str(int(deaths)) + '<br>'\n                                 '<strong>Recovered:<\/strong> ' + str(int(recovered)) + '<br>')\n                    , icon=folium.Icon(color='red', icon='info-sign'), color='rgb(26, 118, 255)'\n                    , tooltip = str(state).capitalize(), fill_color='rgb(26, 118, 255)').add_to(USAMap)\n    \n    \nUSAMap","1eef1231":"temp_USA = USA_statewise_data.copy()\ntemp_USA['Country'] = 'United States of America' # to have a single root\n\nfig = px.treemap(temp_USA, \n                 path=[\"Country\", \"State\"], values=\"Confirmed\", height=700,\n                 title='Total Confirmed Cases In USA',\n                 color_discrete_sequence = px.colors.qualitative.Prism)\nfig.data[0].textinfo = 'label+text+value+percent entry'\nfig.show()\n\nfig = px.treemap(temp_USA, \n                 path=[\"Country\", \"State\"], values=\"Deaths\", height=700,\n                 title='Total Reported Deaths In USA',\n                 color_discrete_sequence = px.colors.qualitative.Prism)\nfig.data[0].textinfo = 'label+text+value+percent entry'\nfig.show()","c7f5bd6e":"# Brazil Data\ncovid_19_Brazil = covid_19[covid_19['Country'] == 'Brazil']\ncovid_19_Brazil.head()","c7835a9a":"# Brazil Data\ncovid_Brazil = pd.read_csv(\"..\/input\/corona-virus-brazil\/brazil_covid19.csv\")\n#covid_Brazil\nbrazil_statewise_data = covid_Brazil.groupby(['state'])['cases', 'deaths'].max()\n#brazil_statewise_data\n\nbrazil_statewise_data['state'] = brazil_statewise_data.index\nbrazil_statewise_data.index = np.arange(1, len(brazil_statewise_data.state.unique().tolist())+1)\nbrazil_statewise_data = brazil_statewise_data[['state', 'cases', 'deaths']]\n\ngeoBrazil = pd.read_csv(\"..\/input\/brazilianstates\/states.csv\")\n\n# rename state to State\ngeoBrazil.rename(columns={'State': 'state'}, inplace=True)\nbrazilian_statewise_data = pd.merge(brazil_statewise_data, geoBrazil, on='state')\n\n#brazilian_statewise_data.drop(['uf', 'population'], axis=1, inplace=True)\nbrazilian_statewise_data","6e47fdb1":"brazil_lat = -14.235\nbrazil_lon = -51.9253\n\nformatted_text('***Click on the pin to veiw details stats***')\n\nBrazilMap = folium.Map(location=[brazil_lat, brazil_lon], zoom_start=4, tiles='cartodbpositron')\n\nfor lat, long, confirmed, deaths, state in zip(brazilian_statewise_data['Latitude'],\n                                                           brazilian_statewise_data['Longitude'],\n                                                           brazilian_statewise_data['cases'],\n                                                           brazilian_statewise_data['deaths'],\n                                                           brazilian_statewise_data['state']):\n    \n    if (deaths == 0):\n        folium.Marker(location=[lat, long]\n                    , popup = ('<strong>nCov Numbers:<\/strong> ' + '<br>' + \n                                 '<strong>State:<\/strong> ' + str(state).capitalize() + '<br>'\n                                 '<strong>Confirmed Cases:<\/strong> ' + str(int(confirmed)) + '<br>'\n                                 '<strong>Deaths Reported:<\/strong> ' + str(int(deaths)) + '<br>')\n                    , icon=folium.Icon(color='darkblue',icon='info-sign'), color='rgb(55, 83, 109)'\n                    , tooltip = str(state).capitalize(), fill_color='rgb(55, 83, 109)').add_to(BrazilMap)\n    else:\n        folium.Marker(location=[lat, long]\n                    , popup = ('<strong>nCov Numbers:<\/strong> ' + '<br>' + \n                               \n                                 '<strong>State:<\/strong> ' + str(state).capitalize() + '<br>'\n                                 '<strong>Confirmed Cases:<\/strong> ' + str(int(confirmed)) + '<br>'\n                                 '<strong>Deaths Reported:<\/strong> ' + str(int(deaths)) + '<br>')\n                    , icon=folium.Icon(color='red', icon='info-sign'), color='rgb(26, 118, 255)'\n                    , tooltip = str(state).capitalize(), fill_color='rgb(26, 118, 255)').add_to(BrazilMap)\n    \n    \nBrazilMap","dacba61b":"temp_Brazil = brazil_statewise_data.copy()\ntemp_Brazil['Country'] = 'Brazil' # to have a single root\n\nfig = px.treemap(temp_Brazil, \n                 path=[\"Country\", \"state\"], values=\"cases\", height=700,\n                 title='Total Confirmed Cases In Brazil',\n                 color_discrete_sequence = px.colors.qualitative.Prism)\nfig.data[0].textinfo = 'label+text+value+percent entry'\nfig.show()\n\nfig = px.treemap(temp_Brazil, \n                 path=[\"Country\", \"state\"], values=\"deaths\", height=700,\n                 title='Total Reported Deaths In Brazil',\n                 color_discrete_sequence = px.colors.qualitative.Prism)\nfig.data[0].textinfo = 'label+text+value+percent entry'\nfig.show()","fab9b30c":"SKor_Covid_19 = pd.read_csv('\/kaggle\/input\/coronavirusdataset\/Case.csv')\nSKor_Covid_19.head()","13fe8b0e":"SKor_Covid_19.province.unique()","99b96dbe":"SKor_Covid_19.city.unique()","10f59a0e":"### Convert 'from other city', '-' in cities to 'Others'\nSKor_Covid_19['city'] = np.where(SKor_Covid_19['city'] == '-', 'Others', SKor_Covid_19['city'])\nSKor_Covid_19['city'] = np.where(SKor_Covid_19['city'] == 'from other city', 'Others', SKor_Covid_19['city'])\nSKor_Covid_19.city.unique()","fafb23f7":"SKor_Covid_19['latitude'] = np.where(SKor_Covid_19['latitude'] == '-', '37.00', SKor_Covid_19['latitude'])\nSKor_Covid_19['longitude'] = np.where(SKor_Covid_19['longitude'] == '-', '127.30', SKor_Covid_19['longitude'])\n\nSKor_location_data = SKor_Covid_19.drop_duplicates(subset = \"city\", keep = 'first', inplace = False)\n\nSKor_location_data = SKor_location_data[['city', 'latitude', 'longitude']]","d2a39b96":"SKorea_citywise_data = pd.DataFrame(SKor_Covid_19.groupby(['city'], as_index=False)['confirmed'].sum())\nSKorea_citywise_data = pd.merge(SKorea_citywise_data, SKor_location_data, on='city')\n\nSKorea_citywise_data","ae2bbefa":"SKorea_lat = 36.00\nSKorea_Lon = 127.30\n\nformatted_text('***Click on the pin to veiw details stats***')\n\nSKoreaMap = folium.Map(location=[SKorea_lat, SKorea_Lon], zoom_start=7, tiles='cartodbpositron')\n\nfor lat, long, confirmed, city in zip(SKorea_citywise_data['latitude'],\n                                                           SKorea_citywise_data['longitude'],\n                                                           SKorea_citywise_data['confirmed'],\n                                                           SKorea_citywise_data['city']):  \n    folium.Marker(location=[lat, long]\n                  , popup = ('<strong>nCov Numbers:<\/strong> ' + '<br>' + \n                             '<strong>State:<\/strong> ' + str(city).capitalize() + '<br>'\n                             '<strong>Total Confirmed:<\/strong> ' + str(confirmed) + '<br>')\n                             ,icon=folium.Icon(color='blue', icon='info-sign'), color='rgb(26, 118, 255)'\n                  , tooltip = str(city).capitalize(), fill_color='rgb(26, 118, 255)').add_to(SKoreaMap)\n    \nSKoreaMap    ","e9ac22e6":"### *More to be continued...*","f1197d75":"**`Hubei is the worst affected state in China with almost 92% of the cases reported. The virus outbreak has been feared to be started in Wuhan, Hubei`**","bdcd1ac2":"# World Data","17f23756":"# Choropleth Global\n\n## Confirmed Cases","c2d08fa1":"## 4. South Korea","d139ecf3":"### Latest World Data","ea57d235":"## 3. Brazil\n\nData Credits - https:\/\/www.kaggle.com\/unanimad\/corona-virus-brazil <br><\/br>\nBrazil Geo Data - https:\/\/www.kaggle.com\/delimixx\/geobrazil","1204b623":"## 2. Reported Deaths","80d171d7":"# Country & State wise distribution","7fbd784b":"## Death Cases","3618c050":"# Rest of World","f2669fd7":"## Confirmed Cases","dd2de52a":"So there are a total of 147 countries affected with Covid-19. \n\nOne stand out from the above country list is the item - **`Others`**. Lets check what are these records.","1febf8ea":"## Rest of World - Recovered Cases","7109fcdb":"# Getting Started - Import Required Packages & Libraries","a2c32456":"## Global Tree","7a14f0af":"**Translation**\n1. deceduti = deceased\n2. denominazione regione = region denomination\n3. totale_positivi = total currently positive\n4. totale_casi = total cases\n5. ricoverati con sintomi = hospitalized with symptoms\n6. dimessi guariti = discharged healed","44e4d85b":"**We have some cities not recorded. Their spayial location details are also missing. We will denote those as 'Others' and set the spatial location to that of South Korea (Coutries latitude and longitude)**","2246a59c":"**Washington, Newyork, California, Georgia, Louisinia are amongst the most affected states in the US**","b6c82a50":"**`As China has the most reported cases, the number of deaths has also been on the higher side. The virus did not match any other known virus. \nThis raised concern because when a virus is new, we do not know how it affects people. There were no existing medications available. \nDue to lack of timely medication available the number of deaths has see the higher side`**","6687f90f":"# Diamond Cruise Ship Data","1e73f6fe":"# Data pre-processing","426ee778":"**Lombardia\t(10043), Emilia Romagna\t(2741), Veneto\t(1989) are the worst affected regions in Italy.**","3c872742":"This is the **`Diamond Princess cruise ship`** which started on the **`5th of February`** from **`Yokohama, Japan`**. The ship is the biggest cluster outside China. The number of patients infected with the COVID-19 coronavirus aboard a quarantined cruise ship docked in Yokohama, Japan has continued to rise making the ship the largest cluster of the deadly virus outside China.\n\nWith nearly 6% of the 3,711 passengers and crew members now infected, the 952-foot cruise ship also has the **`highest infection rate of the coronavirus`** anywhere in the world. Wuhan, China, the city where the disease is believed to have originated has nearly 33,000 official cases\u2014but spread across a population of more than 11 million, that\u2019s an infection rate of less than 0.3%.\n\nHealth experts say the Diamond Princess highlights the high risk that an infection will spread in confined spaces. According to the U.S. Centers for Disease Control and Preventions, **`close-contact environments such as cruises can facilitate the transmission of viruses through droplets or contaminated surfaces`**.\n\nThere have been death cases reported from the ship. Two Japanese passengers who had been on the quarantined Diamond Princess cruise ship have died after being infected with the novel coronavirus. Japan's health ministry says the male and female passengers were hospitalized last week. They were both in their 80s.\nThe man and woman are the first Diamond Princess passengers to die during the virus outbreak. The cruise ship has been under a quarantine at Yokohama's port near Tokyo since Feb. 3.\n\nSource - \n\n - https:\/\/time.com\/5783451\/covid-19-princess-diamond-cruise-ship\/\n - https:\/\/www.channelnewsasia.com\/news\/asia\/covid19-coronavirus-diamond-princess-japan-79-test-positive-12450498\n - https:\/\/www.npr.org\/sections\/goatsandsoda\/2020\/02\/20\/807745305\/coronavirus-2-princess-diamond-cruise-ship-passengers-die-after-contracting-covi","87f3b514":"### Reported Deaths","afe376ce":"## Rest of World - Death Cases","0e32cd8b":"# Country Wise Analysis\n\n## 1. Italy\n\nData Credits - https:\/\/github.com\/pcm-dpc\/COVID-19","d6122cbc":"**Sao Polo has been the worst affected state in Brazil reporting a majority of 56% of the cases so far.**","ecd6c1f9":"# Treemaps","8c329eab":"**This notebook is a continuation of https:\/\/www.kaggle.com\/sauravmishra1710\/covid-19-sars-cov-2-a-geo-statistical-analysis\/**","b6e50213":"**==>`The data looks clean now. This should be good to continue with further analysis`**.","669a7469":"# World HeatMap\n\n## 1. Confirmed Cases","9a11c55f":"## 2. United States of America\n\nData Credits - https:\/\/www.kaggle.com\/sudalairajkumar\/covid19-in-usa","87aa51b8":"**Globally we have more that 2 lakhs confirmed cases of the people infectedd with the Virus from countries all overthe globe. \nThe reason why WHO has declared this as a Pandemic. \nFrom the plots above we know -**\n\nChina (38%), Italy (17%), Iran (8%), Spain (6%), Germany (6%) are the worst affected countries followed by United States, France and South Korea.","f77ce9e4":"# China State wise distribution","8f5e4207":"## Rest of World - Confirmed Cases","6a3a57d4":"# China - Distribution on Map","27bccd0d":"## Global Deaths ","1d87224b":"# Import Dataset","1e9a5bae":"## Global Recovered Cases","4cbde003":"# Data Insights:\n\n`Covid-19: The new coronavirus disease now officially has a name.`\nRead more: https:\/\/www.newscientist.com\/article\/2233218-covid-19-the-new-coronavirus-disease-now-officially-has-a-name\/#ixzz6DpiKd2Ee\n\n1. China is the worst affected where the numbers continue to rise.\n\n\n2. Hubei is the worst affected State in China where the virus is believed to be originated.\n\n\n3. The virus has spread to other countries as well. This could be due to people being present in China\/Hubei as the time of the outbreak and in the event of their return to home \n   country unknowingly carried the virus along.\n\n\n4. There have been many confirmed cases reported outside of Hubei. **Zhejiang, Guangdong, Henan, Hunan** beng the top four.\n\n\n5. The recovery from the virus outside of Hubei has not been fast. The virus did not match any other known virus. This raised concern because when a virus is new, we do not know how it \n   affects people. There were no existing medications available. However, A team of doctors in Thailand have seen some apparent success treating Coronavirus with drug cocktail. The \n   doctors combined the anti-flu drug oseltamivir with lopinavir and ritonavir, anti-virals used to treat HIV, Kriengsak said, adding the ministry was awaiting research results to \n   prove the findings.\n\nRead more at: https:\/\/economictimes.indiatimes.com\/news\/international\/world-news\/thailand-sees-apparent-success-treating-virus-with-drug-cocktail\/articleshow\/73879572.cms?utm_source=contentofinterest&utm_medium=text&utm_campaign=cppst\n\n6. Rest of World has reported cases from 27 different countries outsdie China. Most of the cases have been reported from Thailand, Singapore and Japan.\n\n\n7. Honkong, Australia, South Korea have also reported more than 10 cases.\n\n\n8. India has reported 3 cases so far. \n\n9. There have been countries where all the reported cases have been recovered. Such countries are **India, Belgium, Spain, Finland, Cambodia, Sri Lanka, Nepal, Russia**.\n\n\n\n**This notebook is a continuation of https:\/\/www.kaggle.com\/sauravmishra1710\/covid-19-sars-cov-2-a-geo-statistical-analysis\/**","2c9c03f2":"**`The recovery rate has been a little slowerthan expected. The virus did not match any other known virus. \nThis raised concern because when a virus is new, we do not know how it affects people. There were no existing medications available. \nHowever, A team of doctors in Thailand have seen some apparent success treating Coronavirus with drug cocktail. The doctors combined the anti-flu drug oseltamivir with lopinavir \nand ritonavir, anti-virals used to treat HIV, Kriengsak said, adding the ministry was awaiting research results to prove the findings.`**\n\nRead more at: https:\/\/economictimes.indiatimes.com\/news\/international\/world-news\/thailand-sees-apparent-success-treating-virus-with-drug-cocktail\/articleshow\/73879572.cms?utm_source=contentofinterest&utm_medium=text&utm_campaign=cppst","c885aa45":"# What is Coronavirus?\n\n    Coronaviruses (CoV) are a large family of viruses that cause illness ranging from the common cold to more severe \n    diseases such as Middle East Respiratory Syndrome (MERS-CoV) and Severe Acute Respiratory Syndrome (SARS-CoV). \n    A novel coronavirus (nCoV) is a new strain that has not been previously identified in humans.  \n\n    Coronaviruses are zoonotic, meaning they are transmitted between animals and people.  Detailed investigations found \n    that SARS-CoV was transmitted from civet cats to humans and MERS-CoV from dromedary camels to humans. Several \n    known coronaviruses are circulating in animals that have not yet infected humans. \n\n    Common signs of infection include respiratory symptoms, fever, cough, shortness of breath and breathing difficulties.\n    In more severe cases, infection can cause pneumonia, severe acute respiratory syndrome, kidney failure and even death. \n\n    Standard recommendations to prevent infection spread include regular hand washing, covering mouth and nose when coughing\n    and sneezing, thoroughly cooking meat and eggs. Avoid close contact with anyone showing symptoms of respiratory illness\n    such as coughing and sneezing.\n\n\n    The World Health Organization has declared the novel coronavirus outbreak a public health emergency, it has increased \n    the general fear among the public. A lot of countires have heightened their measures to fight with this virus with the \n    condition in China still senitive..More than 20 countries and territories outside of mainland China have confirmed cases \n    of the virus -- spanning Asia, Europe, North America and the Middle East -- as India, Italy and the Philippines reported \n    their first cases.\n\n\n\n# Data Source\n\n1. The data has been shared in kaggle @ https:\/\/www.kaggle.com\/sudalairajkumar\/novel-corona-virus-2019-dataset.\n\n\n2. Real time data on everyday basis is also made available by the Johns Hopkins university @ \n    https:\/\/github.com\/CSSEGISandData\/COVID-19\n\n\n# Interactive Real Time Data Visualizations\n\n1. An Interactive real time data visualization provided by the Johns Hopkins University - https:\/\/arcg.is\/0fHmTX\n\n\n2. An interactive web-based dashboard to track COVID-19 in real time -    https:\/\/www.thelancet.com\/journals\/laninf\/article\/PIIS1473-3099(20)30120-1\/fulltext\n\n\n3. Real time data visuals - https:\/\/www.worldometers.info\/coronavirus\/\n\n\n4. World Health Organization Coverage on Covid-19 - https:\/\/www.who.int\/health-topics\/coronavirus\n\n\n# Previous Work\n\n   Initially I worked on the same dataset in a more statistical approach. The work can be viewed @ https:\/\/www.kaggle.com\/sauravmishra1710\/covid-19-sars-cov-2-a-geo-statistical-analysis\n   This work was more on the statistical and time series analysis. This noteboook is a continuation of the previous one and concentrates more on the geographical maps.\n\n","d124808c":"### Confirmed Cases","41da3030":"**`China is the worst affected country with Covid-19. The virus has spread to other neighbouring countries and cases of covid-19 have been reported there. \nHowever the numbers are not as high as China. Some distant countries in Europe, North America & Australia have also seen cases of Covid-19. \nThis could be due to some citizens would have been present in China at the time of the virus out-break and unknowingly would have carried along with them in \ntheir return journey back to their respective countries.`**","19472945":"This is the **`Diamond Princess cruise ship`** which started on the **`5th of February`** from **`Yokohama, Japan`**. The ship is the biggest cluster outside China. The number of patients infected with the COVID-19 coronavirus aboard a quarantined cruise ship docked in Yokohama, Japan has continued to rise making the ship the largest cluster of the deadly virus outside China.\n\nWith nearly 6% of the 3,711 passengers and crew members now infected, the 952-foot cruise ship also has the **`highest infection rate of the coronavirus`** anywhere in the world. Wuhan, China, the city where the disease is believed to have originated has nearly 33,000 official cases\u2014but spread across a population of more than 11 million, that\u2019s an infection rate of less than 0.3%.\n\nHealth experts say the Diamond Princess highlights the high risk that an infection will spread in confined spaces. According to the U.S. Centers for Disease Control and Preventions, **`close-contact environments such as cruises can facilitate the transmission of viruses through droplets or contaminated surfaces`**.\n\nThere have been death cases reported from the ship. Two Japanese passengers who had been on the quarantined Diamond Princess cruise ship have died after being infected with the novel coronavirus. Japan's health ministry says the male and female passengers were hospitalized last week. They were both in their 80s.\nThe man and woman are the first Diamond Princess passengers to die during the virus outbreak. The cruise ship has been under a quarantine at Yokohama's port near Tokyo since Feb. 3.\n\nSource - \n\n - https:\/\/time.com\/5783451\/covid-19-princess-diamond-cruise-ship\/\n - https:\/\/www.channelnewsasia.com\/news\/asia\/covid19-coronavirus-diamond-princess-japan-79-test-positive-12450498\n - https:\/\/www.npr.org\/sections\/goatsandsoda\/2020\/02\/20\/807745305\/coronavirus-2-princess-diamond-cruise-ship-passengers-die-after-contracting-covi","59bce178":"# Map Visualizations\n\n# Country wise distribution","5209163f":"**Initial Insights**\n\n- The **'Province\/State'** column has some missing values. We could fill in these misssing values with the 'Others' name. \n  As we do not know the State for these records, lets go with 'Others' for now.\n   \n- The column name for - **'Province\/State'** and **'Country\/Region'** can be simplified. Lets rename them to 'State' and  \n  'Country' respectively.\n  \n- China is recorded as 'Mainland China'. We will rename it to 'China'","3f0c0ece":"# Choropleth China","d33d9a14":"# Diamond Princess Cruise Ship","42e1d6d2":"**`The recovery rate has been a little slowerthan expected. The virus did not match any other known virus. This raised concern because when a virus is new, we do not \nknow how it affects people. There were no existing medications available. However, A team of doctors in Thailand have seen some apparent success treating Coronavirus with \ndrug cocktail. The doctors combined the anti-flu drug oseltamivir with lopinavir and ritonavir, anti-virals used to treat HIV, Kriengsak said, adding the ministry was \nawaiting research results to prove the findings.`**\n\nRead more at: https:\/\/economictimes.indiatimes.com\/news\/international\/world-news\/thailand-sees-apparent-success-treating-virus-with-drug-cocktail\/articleshow\/73879572.cms?utm_source=contentofinterest&utm_medium=text&utm_campaign=cppst","f022cfb8":"**As we see from the above maps, Hubei, the said origin of the novel Corona Virus is the worst affected state in China with a staggering 84% of the confirmed cases coming out of it and 96% of deaths happenning there**","a85159d5":"## Recovered Cases","b66a7acf":"**`There have been countable number of deaths reported outside of China.`**","91e3ae9e":"Globally thousands of people have lost their lives to the Corona virus. From the plots above we know -\n\nChina (37%), Italy (34%), Iran (13%), Spain (7%), France (2%) are the worst affected countries in terms of the number of deaths reported.","78eee005":"**`Outside of China there hve been countries where the confirmed cases have been all recovered from the virus`**\n\nLets see how many such countries are there - "}}