{"cell_type":{"5ba954e0":"code","acfa94c6":"code","bd8fd45c":"code","88106edf":"code","27048a42":"code","b2652ae8":"code","930fc85c":"code","33bef4a6":"code","4dbbfc4b":"code","13e9535c":"code","543bcaf6":"code","658d8131":"code","d5f4b0d2":"code","c76703f1":"code","3f927663":"code","573cf07c":"code","e988c3ed":"code","de14c0c8":"code","707773d9":"code","13ad7dae":"code","5d9fd6c6":"code","5875236a":"code","0838c76e":"code","479146b0":"code","1bcafbcf":"code","6d315800":"code","6acaa018":"code","cc3524c6":"code","889917f6":"code","5eb3e2f3":"code","a8fea59d":"code","8cada859":"code","dda25ec2":"code","960a662c":"code","84e2edc7":"markdown","69449cfd":"markdown","3fbb50cd":"markdown","18b1067f":"markdown","de8f02f8":"markdown","8bd6d366":"markdown","e4b2db3a":"markdown","f1f46f87":"markdown","3a1fcfff":"markdown","958e21fc":"markdown","ad591fce":"markdown","2a0a2dec":"markdown","20ca5439":"markdown","8375002e":"markdown","7cc84563":"markdown","26c86cb3":"markdown","1ca98926":"markdown","74088147":"markdown","7346d116":"markdown","60d8dde6":"markdown","e42e350c":"markdown","520f2adf":"markdown","348cc578":"markdown","e5b392bc":"markdown","c3af977e":"markdown","37fe9473":"markdown","ee81fa59":"markdown"},"source":{"5ba954e0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","acfa94c6":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('white')\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")","bd8fd45c":"movies_df = pd.read_csv('\/kaggle\/input\/movies\/movies.csv', sep='::', names=['MovieID','Title','Genres'])\nratings_df = pd.read_csv('\/kaggle\/input\/ratings\/ratings.csv', sep='::', names=['UserID','MovieID','Rating','Timestamp'])\nusers_df = pd.read_csv('\/kaggle\/input\/users\/users.csv', sep='::',names=['UserID','Gender','Age','Occupation','Zip-code'])","88106edf":"print('Shape of movies dataset {}'.format(movies_df.shape))\nprint('Shape of ratings dataset {}'.format(ratings_df.shape))\nprint('Shape of users dataset {}'.format(users_df.shape))","27048a42":"movies_df.head()","b2652ae8":"ratings_df.head()","930fc85c":"users_df.head()","33bef4a6":"movies_df['Year'] = movies_df['Title'].str.extract('(\\(\\d\\d\\d\\d\\))')\nmovies_df['Year'] = movies_df['Year'].str.extract('(\\d\\d\\d\\d)')\n","4dbbfc4b":"movies_df['Title'] = movies_df['Title'].str.replace('(\\(\\d\\d\\d\\d\\))','')","13e9535c":"movies_df['Title'] = movies_df['Title'].apply(lambda title : title.strip())","543bcaf6":"movies_df['Genres'] = movies_df['Genres'].apply(lambda genres : genres.split('|'))","658d8131":"movies_df.head()","d5f4b0d2":"moviesWithGenres_df = movies_df.copy()","c76703f1":"for index, row in movies_df.iterrows():\n    for genre in row['Genres']:\n        moviesWithGenres_df.at[index, genre] = 1\n        ","3f927663":"moviesWithGenres_df.head()","573cf07c":"moviesWithGenres_df.fillna(0, inplace=True)","e988c3ed":"ratings_df.head()","de14c0c8":"ratings_df.drop('Timestamp', axis=1, inplace=True)","707773d9":"user_12_ratings = ratings_df[ratings_df['UserID'] == 12]\nuser_12_ratings.head()","13ad7dae":"user_12_ratings = pd.merge(user_12_ratings, moviesWithGenres_df, on='MovieID')\nuser_12_ratings.head()","5d9fd6c6":"user_12_genre = user_12_ratings.drop(columns=['MovieID', 'Rating','UserID','Title','Genres','Year'], axis=1)\nuser_12_genre","5875236a":"user_12_profile = user_12_genre.transpose().dot(user_12_ratings['Rating'])","0838c76e":"plt.figure(figsize=(10,8))\nsns.barplot(data= user_12_profile.reset_index().sort_values(by=0, ascending =False), x = 'index', y=0)\nplt.title('Genres preferred by user 12', fontsize=24)\nplt.xticks(rotation=90, fontsize=12)\nplt.ylabel('Percentage',fontsize=16)\nplt.xlabel('Genre',fontsize=16)","479146b0":"genre_table = moviesWithGenres_df.drop(columns=['Title', 'Genres','Year','MovieID'],axis=1)\ngenre_table.head()","1bcafbcf":"recommendation_user_12 = genre_table * user_12_profile\nrecommendation_user_12.head()","6d315800":"recommendation_user_12 = recommendation_user_12.sum(axis=1)\/user_12_profile.sum()","6acaa018":"recommendation_user_12 = pd.DataFrame(recommendation_user_12)\nrecommendation_user_12 = recommendation_user_12.reset_index()\nrecommendation_user_12.rename(columns = {'index':'MovieID', 0:'Recommend_Percent'},inplace=True)\nrecommendation_user_12 = recommendation_user_12.sort_values(by='Recommend_Percent',ascending=False)\nrecommendation_user_12.head(10)","cc3524c6":"recommendation_user_12 = pd.merge(recommendation_user_12,movies_df, on='MovieID')\nrecommendation_user_12.head(10)","889917f6":"def get_user_profile(userID):\n    '''\n       Input required: Id of the user\n       Returns user profile in the form of pandas Series object. \n       User profile is percentage of each genre rated\/liked by user\n       \n    '''\n    userID_ratings = ratings_df[ratings_df['UserID'] == userID]\n    userID_ratings = pd.merge(userID_ratings, moviesWithGenres_df, on='MovieID')\n    userID_genre = userID_ratings.drop(columns=['MovieID', 'Rating','UserID','Title','Genres','Year'], axis=1)\n    user_profile = userID_genre.transpose().dot(userID_ratings['Rating'])\n    \n    return user_profile","5eb3e2f3":"# test above function\nget_user_profile(12)","a8fea59d":"def get_recommendation_for_user(user_ID, number_of_movies=10):\n    '''\n        Returns movies with recommendation percentage in the form of pandas dataframe\n        \n    '''\n    user_profile=  get_user_profile(user_ID)\n    recommendation_for_user = genre_table * user_profile\n    recommendation_for_user = recommendation_for_user.sum(axis=1)\/user_12_profile.sum()\n    recommendation_for_user = pd.DataFrame(recommendation_for_user, columns=['Recommend_Percent'])\n    recommendation_for_user.index.name='idx'\n    recommendation_for_user.reset_index(inplace=True)\n    recommendation_for_user.rename(columns={'idx':\"MovieID\"}, inplace=True)\n    recommendation_for_user = recommendation_for_user.sort_values(by='Recommend_Percent',ascending=False)\n    recommendation_for_user = recommendation_for_user.head(number_of_movies)\n    \n    recommendation_for_user = pd.merge(recommendation_for_user,movies_df, on='MovieID')\n    return recommendation_for_user","8cada859":"# test above function for some users\nget_recommendation_for_user(12,5)","dda25ec2":"get_recommendation_for_user(25)","960a662c":"get_recommendation_for_user(311)","84e2edc7":"Drop unnecessary columns","69449cfd":"### Most preferred Genre of user is Drame, followed by Comedy, action and crime","3fbb50cd":"To create user profile, we need only genre columns. So drop other columns","18b1067f":"We will take dot product of ratings given by each movie with genre and find out what kind of genre user likes most","de8f02f8":"Remove white spaces from the beginning and end of the Title","8bd6d366":"We don't need Timestamp column. Let's drop it","e4b2db3a":"# Content based recommender system\n\nContent based recommnder system works based on the genre of the movie and rating provided by user the for movies.\n\nSuppose user has rated movies as following\n\n|Movie Name  | Genres   | Rating | \n|------------- | ------------- | ------|\n|Movie A  | Drama, Action, Commedy |  4 |\n|Movie B  | Comedy, Adenture | 5 |\n\nWe encode movies with one hot encoding schema\n\n\n|         | Drama | Action  | Comedy | Adventure |\n|---------|-------|---------|--------|-----------|\n| Movie A | 1     | 1       | 1      | 0         |\n| Movie B | 0     | 0       | 1      | 1         |\n\n\nWe calculate weighted feature matrix by multiplying ratings to Weighted genre matrix\n\n|         | Drama | Action  | Comedy | Adventure |\n|---------|-------|---------|--------|-----------|\n| Movie A | 4     | 4       | 4      | 0         |\n| Movie B | 0     | 0       | 5      | 5         |\n\nCreate user profile by taking sum along columns\n\n| Drama | Action  | Comedy | Adventure |\n|---------|-------|---------|--------|\n| 4     | 4       | 9      | 5         |\n\n\nCreate Normalised user profile\n\n| Drama | Action  | Comedy | Adventure |\n|-------|---------|--------|-----------|\n | 0.18  | 0.18    | 0.41   | 0.23      |\n \nWe have following movies to recommend to user with genre\n\n|         | Drama | Action  | Comedy | Adventure |\n|---------|-------|---------|--------|-----------|\n| Movie C | 1     | 0       | 0      | 1         |\n| Movie D | 0     | 1       | 1      | 0         |\n| Movie E | 1     | 0       | 0      | 0         |\n\nWe will multiply user profile with this matrix and take sum along row\n\n|         | Drama | Action  | Comedy | Adventure | Total \n|---------|-------|---------|--------|-----------| ------|\n| Movie C | 0.18  | 0       | 0      | 0.23      | 0.41  |\n| Movie D | 0     | 0.18    | 0.41   | 0         | 0.59 |\n| Movie E | 0.18  | 0       | 0      | 0         | 0.18 |\n\nThis is our recommendation matrix. We can recommend Movie D to user","f1f46f87":"Multiply user profile with genre table","3a1fcfff":"#### In order to recommend movies to user we will create genre table of all movies","958e21fc":"Extracting year from title and creating separate column\n","ad591fce":"Now as we have extracted year and created separate column, we can remove it from title","2a0a2dec":"## Import required libraries","20ca5439":"## Import dataset","8375002e":"## Processing Genres columns\n","7cc84563":"In order to get names we will join with movies_df on MovieID column","26c86cb3":"Calculate average rating for each movie","1ca98926":"## Let's take a quick look at our data","74088147":"## Preprocessing of Movies dataframe\n","7346d116":"## Creating functions to get recommendation\n\nConvert above data to functions","60d8dde6":"Replace NaN values with 0","e42e350c":"Convert movies to recommend to user 12 into dataframe","520f2adf":"We will create copy for movies dataframe and create separate column for each genre with one hot encoding","348cc578":"## Preprocessing Rating dataframe","e5b392bc":"## Download Data from MovieLens\nData can be downloaded from MovieLens database http:\/\/files.grouplens.org\/datasets\/movielens\/ml-1m.zip","c3af977e":"In order to create user profile we will need genre of the movies user has given rating. We will get this from moviesWithGenres_df dataframe","37fe9473":"## Getting movies for particular user\n\nLet's get movies for user with ID 12","ee81fa59":"We will split Genres on '|' and create list with python split function\n"}}