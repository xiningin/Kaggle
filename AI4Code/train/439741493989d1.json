{"cell_type":{"1b2b2e7e":"code","7f7e2dd7":"code","9f5ccd81":"code","70551071":"code","95292e96":"code","badd6584":"code","0967dea2":"code","138371c8":"code","547bb190":"code","d652cbb5":"markdown","45d9c1a2":"markdown","405bd8f8":"markdown","39d99095":"markdown","23758d1c":"markdown","989d1784":"markdown","6b394e2f":"markdown","32735c96":"markdown","32c7fbaa":"markdown","6f6c9556":"markdown","c96250ce":"markdown","0aae55bb":"markdown"},"source":{"1b2b2e7e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","7f7e2dd7":"def AND(x1, x2):\n    w1, w2, theta = 0.5, 0.5, 0.7\n    tmp = x1*w1 + x2*w2\n    if tmp <= theta:\n        return 0\n    elif tmp > theta:\n        return 1","9f5ccd81":"print(AND(0, 0))\nprint(AND(1, 0))\nprint(AND(0, 1))\nprint(AND(1, 1))","70551071":"import numpy as np\nx = np.array([0, 1])\nw = np.array([0.5, 0.5])\nb = -0.7\nprint(x*w)\nprint(np.sum(w*x))\nprint(np.sum(w*x)+b)","95292e96":"def AND(x1, x2):\n    x = np.array([x1, x2])\n    w = np.array([0.5, 0.5])\n    b = -0.7\n    tmp = np.sum(w*x) + b\n    if tmp <= 0:\n        return 0\n    else:\n        return 1","badd6584":"def NAND(x1, x2):\n    x = np.array([x1, x2])\n    w = np.array([-0.5, -0.5])\n    b = 0.7\n    tmp = np.sum(w*x) + b\n    if tmp <= 0:\n        return 0\n    else:\n        return 1","0967dea2":"def OR(x1, x2):\n    x = np.array([x1, x2])\n    w = np.array([0.5, 0.5])\n    b = -0.2\n    tmp = np.sum(w*x) + b\n    if tmp <= 0:\n        return 0\n    else:\n        return 1","138371c8":"def XOR(x1, x2):\n    s1 = NAND(x1, x2)\n    s2 = OR(x1, x2)\n    y = AND(s1, s2)\n    return y","547bb190":"print(XOR(0, 0))\nprint(XOR(1, 0))\nprint(XOR(0, 1))\nprint(XOR(1, 1))","d652cbb5":"4. XOR Gate\n\n![image.png](attachment:image.png)\n\n* Can't express it as a perceptron\n* The perceptron creates two areas that are divided into straight lines\n* But with a multilayer perceptron, it can be expressed","45d9c1a2":"3. OR Gate\n\n![image.png](attachment:image.png)","405bd8f8":"> ### How It Works\n\n![image.png](attachment:image.png)","39d99095":"2. NAND Gate\n\n![image.png](attachment:image.png)\n\nex) ($w_{1}, w_{2}, \\theta$) = (-0.5, -0.5, -0.7), (-1.0, -1.0, -1.0)\n\nreverse the parameter's sign of AND gate","23758d1c":"* Answer \n\n![image.png](attachment:image.png)","989d1784":"### 2 Input Perceptron\n\n![image.png](attachment:image.png)\n\n* $x_{1}$, $x_{2}$ : input\n* y      : output\n* $w_{1}$, $w_{2}$ : weight\n* circle : neuron or node","6b394e2f":"![image.png](attachment:image.png)","32735c96":"We adjust parameters($w_{1}, w_{2}, \\theta$) in perceptron","32c7fbaa":"### Multi-Layer Perceptron\n\n![image.png](attachment:image.png)\n\n* Complete the XOR by substituting one AND, one NAND, one OR gate for '?'","6f6c9556":"## Truth Table\n\n1. ### AND Gate\n\n![image.png](attachment:image.png)\n\n($w_{1}, w_{2}, \\theta$) = (0.5, 0.5, 0.7), (1.0, 1.0, 1.0)","c96250ce":"substitute -b for $\\theta$\n\n![image.png](attachment:image.png)\n\n* b              : bias\n* $w_{1}, w_{2}$ : weight ","0aae55bb":"### Truth Table of XOR Gate\n\n![image.png](attachment:image.png)"}}