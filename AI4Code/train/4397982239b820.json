{"cell_type":{"273f74a3":"code","4a92e6f0":"code","a4ad4d8f":"code","2fd21457":"code","83483925":"code","ce4e640e":"code","71acdf72":"code","b2286310":"code","d11bc97a":"code","504929cb":"code","5bd1390c":"code","b835cb88":"code","df2ce36e":"code","0516a3b3":"code","f845c08a":"code","e63ed5f0":"code","a2a6bc46":"code","a69c4b1d":"code","9b911e65":"code","023b52e3":"code","0d87f5db":"code","1faec672":"code","7323c517":"code","d7101b9b":"code","2057f64d":"code","3352234c":"code","3c4610a0":"code","735600a5":"code","78ee31a1":"code","ef926664":"code","2073265e":"code","03101aad":"code","151d6f70":"code","57637f3e":"code","2099e705":"code","ff99deb1":"code","54f784d4":"code","eee71204":"code","19a7088d":"markdown","7b6a00b4":"markdown","ae6e9e53":"markdown","9d701b45":"markdown","4ddf5bd2":"markdown","2e398d3c":"markdown","d0fd621d":"markdown","40329048":"markdown","cf40a860":"markdown","ff2439f2":"markdown","5ae03e9a":"markdown","2cb9e534":"markdown","9bb75b3f":"markdown","086c32f7":"markdown","96ca783b":"markdown","834fb5e8":"markdown","814d0f6c":"markdown","eb33a02a":"markdown"},"source":{"273f74a3":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport plotly.express as px\nfrom pandas_profiling import ProfileReport\nfrom plotly.offline import iplot\n!pip install joypy\nimport joypy\nfrom sklearn.cluster import KMeans\n\nplt.rcParams['figure.figsize'] = 8, 5\nplt.style.use(\"fivethirtyeight\")\n\ndata = pd.read_csv('..\/input\/palmer-archipelago-antarctica-penguin-data\/penguins_size.csv')\nstudy_data = pd.read_csv('..\/input\/palmer-archipelago-antarctica-penguin-data\/penguins_lter.csv')","4a92e6f0":"# description\n\ndata.describe(include='all')","a4ad4d8f":"#Covariance\n\ndata.cov()","2fd21457":"#correlation\n\ndata.corr()","83483925":"data['species'].value_counts().plot(kind='barh')\nplt.show()","ce4e640e":"#checking number of null values in the data\ndata.isnull().sum()","71acdf72":"# Dropping the 2 rows with null values for all variables\n\ndata.drop(data[data['body_mass_g'].isnull()].index,axis=0, inplace=True)","b2286310":"#imputing the null values in sex with its mode\n\ndata['sex'] = data['sex'].fillna('MALE')","d11bc97a":"#dropping the 336th row due to its faulty value in sex variable\n\ndata.drop(data[data['sex']=='.'].index, inplace=True)","504929cb":"print('Culmen Length Distribution')\nsns.violinplot(data=data, x=\"species\", y=\"culmen_length_mm\", size=8)\nplt.show()","5bd1390c":"print('Culmen Depth Distribution')\nsns.boxplot(data=data, x=\"species\", y=\"culmen_depth_mm\")\nplt.show()","b835cb88":"print('Flipper Length Distribution')\ndf = data.copy()\ndf[\"MALE_flipper\"] = df.apply(lambda row: row[\"flipper_length_mm\"] if row[\"sex\"] == \"MALE\" else np.nan, axis = 1)\ndf[\"FEMALE_flipper\"] = df.apply(lambda row: row[\"flipper_length_mm\"] if row[\"sex\"] == \"FEMALE\" else np.nan, axis = 1)\nfig, axes = joypy.joyplot(df, \n                          column=['FEMALE_flipper', 'MALE_flipper'],\n                          by = \"species\",\n                          ylim = 'own',\n                          figsize = (12,8), \n                          legend = True\n                         )","df2ce36e":"print('Body Mass Distribution')\nsns.FacetGrid(data, hue=\"species\", height=6,).map(sns.kdeplot, \"body_mass_g\",shade=True).add_legend()\nplt.show()","0516a3b3":"print('culmen_length vs culmen_depth')\nsns.scatterplot(data=data, x='culmen_length_mm', y='culmen_depth_mm', hue='species')\nplt.show()","f845c08a":"print('culmen_length vs flipper_length')\nsns.scatterplot(data=data, x='culmen_length_mm', y='flipper_length_mm', hue='species')\nplt.show()","e63ed5f0":"print('culmen_depth vs flipper_length')\nsns.scatterplot(data=data, x='culmen_depth_mm', y='flipper_length_mm', hue='species')\nplt.show()","a2a6bc46":"print('culmen_depth vs body_mass')\nsns.scatterplot(data=data, x='culmen_depth_mm', y='body_mass_g', hue='species')\nplt.show()","a69c4b1d":"print('culmen_length vs body_mass')\nsns.scatterplot(data=data, x='culmen_length_mm', y='body_mass_g', hue='species')\nplt.show()","9b911e65":"print('flipper_length vs body_mass')\nsns.scatterplot(data=data, x='flipper_length_mm', y='body_mass_g', hue='species')\nplt.show()","023b52e3":"print('Pairplot')\nsns.pairplot(data=data[['species','culmen_length_mm','culmen_depth_mm','flipper_length_mm', 'body_mass_g']], hue=\"species\", height=3, diag_kind=\"hist\")\nplt.show()","0d87f5db":"print('Which island consists of most Penguins?')\nprint('Answer: Biscoe')\ndf = data['island'].value_counts().reset_index()\n\nfig = sns.barplot(data=df, x='island', y='index')\nfig.set(xlabel='', ylabel='ISLANDS')\nplt.show()","1faec672":"print('Which species have highest culmen_length?')\nprint('Answer: Chinstrap(male and female)')\ndf = data.loc[:,['species','culmen_length_mm','sex']]\ndf['mean_culmen_length'] = df.groupby(['species','sex'])['culmen_length_mm'].transform('mean')\ndf = df.drop('culmen_length_mm', axis=1).drop_duplicates()\n\nsns.barplot(data=df, x='mean_culmen_length', y='species', hue='sex')\nplt.show()","7323c517":"print('Which species have highest culmen_depth?')\nprint('Answer: Chinstrap(male and female)')\ndf = data.loc[:,['species','culmen_depth_mm','sex']]\ndf['mean_culmen_depth'] = df.groupby(['species','sex'])['culmen_depth_mm'].transform('mean')\ndf = df.drop('culmen_depth_mm', axis=1).drop_duplicates()\n\nsns.barplot(data=df, x='mean_culmen_depth', y='species', hue='sex')\nplt.show()","d7101b9b":"print('Which species have highest flipper_length?')\nprint('Answer: Gentoo(male and female)')\ndf = data.loc[:,['species','flipper_length_mm','sex']]\ndf['mean_flipper_length'] = df.groupby(['species','sex'])['flipper_length_mm'].transform('mean')\ndf = df.drop('flipper_length_mm', axis=1).drop_duplicates()\n\nsns.barplot(data=df, x='mean_flipper_length', y='species', hue='sex')\nplt.show()","2057f64d":"print('Which species have highest body_mass?')\nprint('Answer: Gentoo(male and female) - Highly diverse values noticed')\ndf = data.loc[:,['species','body_mass_g','sex']]\ndf['mean_body_mass'] = df.groupby(['species','sex'])['body_mass_g'].transform('mean')\ndf = df.drop('body_mass_g', axis=1).drop_duplicates()\n\nsns.barplot(data=df, x='mean_body_mass', y='species', hue='sex')\nplt.show()","3352234c":"df = data.copy()\ntarget = 'sex'\nencode = ['species','island']\n\nfor col in encode:\n    dummy = pd.get_dummies(df[col], prefix=col)\n    df = pd.concat([df,dummy], axis=1)\n    del df[col]","3c4610a0":"target_mapper = {'MALE':0, 'FEMALE':1}\ndef target_encode(val):\n    return target_mapper[val]\n\ndf['sex'] = df['sex'].apply(target_encode)","735600a5":"#separating X and y\n\nX = df.drop('sex', axis=1)\ny = df['sex']","78ee31a1":"# scaling the data\n\nfrom sklearn import preprocessing\nX = preprocessing.scale(X)","ef926664":"#splitting the data\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2, random_state=13)","2073265e":"# model fitting and prediction\n\nfrom sklearn.linear_model import LogisticRegression\n\nmodel = LogisticRegression().fit(X_train, y_train)\npred = model.predict(X_test)","03101aad":"# checking performance of model\n\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_curve, roc_auc_score\n\nprint('CONFUSION MATRIX')\nprint(confusion_matrix(y_test, pred))","151d6f70":"print('CLASSIFICATION REPORT\\n')\nprint(classification_report(y_test, pred))","57637f3e":"# ROC CURVE\n\nprint('ROC CURVE')\ntrain_probs = model.predict_proba(X_train)\ntrain_probs1 = train_probs[:, 1]\nfpr0, tpr0, thresholds0 = roc_curve(y_train, train_probs1)\n\ntest_probs = model.predict_proba(X_test)\ntest_probs1 = test_probs[:, 1]\nfpr1, tpr1, thresholds1 = roc_curve(y_test, test_probs1)\n\nplt.plot(fpr0, tpr0, marker='.', label='train')\nplt.plot(fpr1, tpr1, marker='.', label='validation')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.legend()\nplt.show()","2099e705":"df = data.copy()","ff99deb1":"print('CLUSTERING ON CULMEN LENGTH AND CULMEN DEPTH')\nX = df[['culmen_length_mm','culmen_depth_mm']]\n\nkmeans = KMeans(n_clusters=3)\nkmeans.fit(X)\ny_kmeans = kmeans.predict(X)\n\nplt.scatter(X.loc[:, 'culmen_length_mm'], X.loc[:, 'culmen_depth_mm'], c=y_kmeans, s=50, cmap='viridis')\n\ncenters = kmeans.cluster_centers_\nplt.scatter(centers[:, 0], centers[:, 1], c='black', s=200, alpha=0.5)\nplt.show()","54f784d4":"print('CLUSTERING ON FLIPPER LENGTH AND CULMEN DEPTH')\nX = df[['flipper_length_mm','culmen_depth_mm']]\n\nkmeans = KMeans(n_clusters=3)\nkmeans.fit(X)\ny_kmeans = kmeans.predict(X)\n\nplt.scatter(X.loc[:, 'flipper_length_mm'], X.loc[:, 'culmen_depth_mm'], c=y_kmeans, s=50, cmap='viridis')\n\ncenters = kmeans.cluster_centers_\nplt.scatter(centers[:, 0], centers[:, 1], c='black', s=200, alpha=0.5)\nplt.show()","eee71204":"print('CLUSTERING ON FLIPPER LENGTH AND BODY MASS')\nX = df[['flipper_length_mm','body_mass_g']]\n\nkmeans = KMeans(n_clusters=3)\nkmeans.fit(X)\ny_kmeans = kmeans.predict(X)\n\nplt.scatter(X.loc[:, 'flipper_length_mm'], X.loc[:, 'body_mass_g'], c=y_kmeans, s=50, cmap='viridis')\n\ncenters = kmeans.cluster_centers_\nplt.scatter(centers[:, 0], centers[:, 1], c='black', s=200, alpha=0.5)\nplt.show()","19a7088d":"<h1 style=\"font-size:40px\">Filling in missing values<\/h1>","7b6a00b4":"<h1 style=\"font-size:40px\">Extreme values of the variables<\/h1>","ae6e9e53":"<h1 style=\"font-size:40px\">Clustering the species<\/h1>","9d701b45":"<h1 style=\"font-size:40px\">Creating classifier for gender prediction<\/h1>","4ddf5bd2":"<h1 style=\"font-size:40px\">Distribution of the variables<\/h1>","2e398d3c":"<table style=\"font-size: 20px\">\n    <tr>\n        <th style=\"float: left\">1. Describing the data<\/th>\n    <\/tr>\n    <tr>\n        <th style=\"float: left\">2. Filling in missing values<\/th>\n    <\/tr>\n    <tr>\n        <th style=\"float: left\">3. Distribution of the variables<\/th>\n    <\/tr>\n    <tr>\n        <th style=\"float: left\">4. Correlation of the variables<\/th>\n    <\/tr>\n    <tr>\n        <th style=\"float: left\">5. Extreme values of the variables<\/th>\n    <\/tr>\n    <tr>\n        <th style=\"float: left\">6. Creating classifier for gender prediction<\/th>\n    <\/tr>\n<\/table>","d0fd621d":"<h1 style=\"font-size:40px\">Correlation of the variables<\/h1>","40329048":"Since the missing values are already we don't need to worry about that. Next step is to encode the categorical variables.\n\nI am setting 'sex' as the target variable. So the categorical variables to be encoded are 'species' and 'island'","cf40a860":"### <b>Columns in the dataset<\/b>\n<ul>\n    <li><b>Species: <\/b>penguin species (Chinstrap, Ad\u00e9lie, or Gentoo)<\/li>\n    <li><b>Island: <\/b>island name (Dream, Torgersen, or Biscoe) in the Palmer Archipelago (Antarctica)<\/li>\n    <li><b>culmen_length_mm: <\/b>culmen length (mm)<\/li>\n    <li><b>culmen_depth_mm: <\/b>culmen depth (mm)<\/li>\n    <li><b>flipper_length_mm: <\/b>flipper length (mm)<\/li>\n    <li><b>body_mass_g: <\/b>body mass (g)<\/li>\n    <li><b>Sex: <\/b>penguin sex<\/li>\n<\/ul>","ff2439f2":"It can be observed that unlike the Iris dataset, this data contains different number of entries for each species","5ae03e9a":"### Number of entries in data for each species","2cb9e534":"### What is culmen?\n\nThe upper margin of the beak or bill is referred to as the culmen and the measurement is taken using calipers with one jaw at the tip of the upper mandible and the other at base of the skull or the first feathers depending on the standard chosen.","9bb75b3f":"Lets label encode the target variable as well. \n\nI won't be using any fit transform from the scikit learn api rather i will be using a primitive mapping.","086c32f7":"### So the model achieved an accuracy of 88%.","96ca783b":"<h1 style=\"font-size:40px\">Contents<\/h1>","834fb5e8":"<img src=\"https:\/\/previews.123rf.com\/images\/aomeditor\/aomeditor1903\/aomeditor190300021\/122254680-illustrator-of-body-parts-of-penguin.jpg\" height='600px' width='400px'>","814d0f6c":"## Various observations of the data","eb33a02a":"<h1 style=\"font-size:40px\">Describing the data<\/h1>"}}