{"cell_type":{"82d63e64":"code","70623a7a":"code","88b3e702":"code","e910fded":"code","0107e449":"code","4d3ac17b":"code","ac31a24d":"code","8a393ef6":"code","e11b8686":"code","8cadc8d9":"code","5a749ec9":"code","28676bee":"code","131236c8":"code","466be184":"code","828bbd07":"code","e0c2043c":"code","4cf5016e":"code","19bdc355":"code","d80b9713":"code","48d01134":"code","da5e6bf8":"code","eb924e19":"code","93de5d2e":"code","94d26c71":"code","e06a4ad4":"code","740d799e":"code","9e1d2bf1":"code","6f28a0c5":"code","b2719251":"code","d8d313ee":"code","cc8ee109":"code","d23bf3ce":"code","7b762ac9":"code","585f48cc":"code","60ad5b89":"code","ee98af92":"code","491ed116":"code","086b92d3":"code","3cb9f004":"code","4446774f":"code","a19ac0ff":"code","a7a8fca3":"markdown","32b2826c":"markdown","1af79e57":"markdown","c840633e":"markdown","78da2d91":"markdown","bf8efbd3":"markdown","8f5a3f05":"markdown","c66abcc6":"markdown","a9006fc6":"markdown","5ab9b2be":"markdown","69193bb5":"markdown","0b5d0c36":"markdown","6b50e058":"markdown","3acc227c":"markdown","90a15453":"markdown","9b68a4fb":"markdown","0dc7ae69":"markdown","e0a2f064":"markdown","4e53a3eb":"markdown","a6b88e88":"markdown","5f0fdb85":"markdown","e1fbf1c6":"markdown"},"source":{"82d63e64":"import tensorflow as tf\n\nimport os\nimport pathlib\nimport time\nimport datetime\n\nfrom matplotlib import pyplot as plt\nfrom IPython import display","70623a7a":"PATH = '..\/input\/colour-the-flower-gan-data\/Data'","88b3e702":"sample_image = tf.io.read_file(str(PATH + '\/train\/1.jpg'))\nsample_image = tf.io.decode_jpeg(sample_image)\nprint(sample_image.shape)","e910fded":"plt.figure()\nplt.imshow(sample_image)","0107e449":"def load(image_file):\n  # Read and decode an image file to a uint8 tensor\n  image = tf.io.read_file(image_file)\n  image = tf.image.decode_jpeg(image)\n\n  # Split each image tensor into two tensors:\n  # - one with a real building facade image\n  # - one with an architecture label image \n  w = tf.shape(image)[1]\n  w = w \/\/ 2\n  input_image = image[:, w:, :]\n  real_image = image[:, :w, :]\n\n  # Convert both images to float32 tensors\n  input_image = tf.cast(input_image, tf.float32)\n  real_image = tf.cast(real_image, tf.float32)\n\n  return input_image, real_image","4d3ac17b":"inp, re = load(str(PATH + '\/train\/100.jpg'))\n# Casting to int for matplotlib to display the images\nplt.figure()\nplt.imshow(inp \/ 255.0)\nplt.figure()\nplt.imshow(re \/ 255.0)","ac31a24d":"# The facade training set consist of 400 images\nBUFFER_SIZE = 400\n# The batch size of 1 produced better results for the U-Net in the original pix2pix experiment\nBATCH_SIZE = 1\n# Each image is 512X512 in size\nIMG_WIDTH = 512\nIMG_HEIGHT = 512","8a393ef6":"def resize(input_image, real_image, height, width):\n  input_image = tf.image.resize(input_image, [height, width],\n                                method=tf.image.ResizeMethod.NEAREST_NEIGHBOR)\n  real_image = tf.image.resize(real_image, [height, width],\n                               method=tf.image.ResizeMethod.NEAREST_NEIGHBOR)\n\n  return input_image, real_image","e11b8686":"def random_crop(input_image, real_image):\n  stacked_image = tf.stack([input_image, real_image], axis=0)\n  cropped_image = tf.image.random_crop(\n      stacked_image, size=[2, IMG_HEIGHT, IMG_WIDTH, 3])\n\n  return cropped_image[0], cropped_image[1]","8cadc8d9":"# Normalizing the images to [-1, 1]\ndef normalize(input_image, real_image):\n  input_image = (input_image \/ 127.5) - 1\n  real_image = (real_image \/ 127.5) - 1\n\n  return input_image, real_image","5a749ec9":"@tf.function()\ndef random_jitter(input_image, real_image):\n  # Resizing to 286x286\n  input_image, real_image = resize(input_image, real_image, 542, 542)\n\n  # Random cropping back to 256x256\n  input_image, real_image = random_crop(input_image, real_image)\n\n  if tf.random.uniform(()) > 0.5:\n    # Random mirroring\n    input_image = tf.image.flip_left_right(input_image)\n    real_image = tf.image.flip_left_right(real_image)\n\n  return input_image, real_image","28676bee":"plt.figure(figsize=(6, 6))\nfor i in range(4):\n  rj_inp, rj_re = random_jitter(inp, re)\n  plt.subplot(2, 2, i + 1)\n  plt.imshow(rj_inp \/ 255.0)\n  plt.axis('off')\nplt.show()","131236c8":"def load_image_train(image_file):\n  input_image, real_image = load(image_file)\n  input_image, real_image = random_jitter(input_image, real_image)\n  input_image, real_image = normalize(input_image, real_image)\n\n  return input_image, real_image","466be184":"def load_image_test(image_file):\n  input_image, real_image = load(image_file)\n  input_image, real_image = resize(input_image, real_image,\n                                   IMG_HEIGHT, IMG_WIDTH)\n  input_image, real_image = normalize(input_image, real_image)\n\n  return input_image, real_image","828bbd07":"train_dataset = tf.data.Dataset.list_files(str(PATH + '\/train\/*.jpg'))\ntrain_dataset = train_dataset.map(load_image_train,\n                                  num_parallel_calls=tf.data.AUTOTUNE)\ntrain_dataset = train_dataset.shuffle(BUFFER_SIZE)\ntrain_dataset = train_dataset.batch(BATCH_SIZE)","e0c2043c":"test_dataset = tf.data.Dataset.list_files(str(PATH + '\/test\/*.jpg'))\n\ntest_dataset = test_dataset.map(load_image_test)\ntest_dataset = test_dataset.batch(BATCH_SIZE)","4cf5016e":"OUTPUT_CHANNELS = 3","19bdc355":"def downsample(filters, size, apply_batchnorm=True):\n  initializer = tf.random_normal_initializer(0., 0.02)\n\n  result = tf.keras.Sequential()\n  result.add(\n      tf.keras.layers.Conv2D(filters, size, strides=2, padding='same',\n                             kernel_initializer=initializer, use_bias=False))\n\n  if apply_batchnorm:\n    result.add(tf.keras.layers.BatchNormalization())\n\n  result.add(tf.keras.layers.LeakyReLU())\n\n  return result","d80b9713":"down_model = downsample(3, 4)\ndown_result = down_model(tf.expand_dims(inp, 0))\nprint (down_result.shape)","48d01134":"def upsample(filters, size, apply_dropout=False):\n  initializer = tf.random_normal_initializer(0., 0.02)\n\n  result = tf.keras.Sequential()\n  result.add(\n    tf.keras.layers.Conv2DTranspose(filters, size, strides=2,\n                                    padding='same',\n                                    kernel_initializer=initializer,\n                                    use_bias=False))\n\n  result.add(tf.keras.layers.BatchNormalization())\n\n  if apply_dropout:\n      result.add(tf.keras.layers.Dropout(0.5))\n\n  result.add(tf.keras.layers.ReLU())\n\n  return result","da5e6bf8":"up_model = upsample(3, 4)\nup_result = up_model(down_result)\nprint (up_result.shape)","eb924e19":"def Generator():\n  inputs = tf.keras.layers.Input(shape=[512, 512, 3])\n\n  down_stack = [\n    downsample(64, 4, apply_batchnorm=False),  # (batch_size, 128, 128, 64)\n    downsample(128, 4),  # (batch_size, 64, 64, 128)\n    downsample(256, 4),  # (batch_size, 32, 32, 256)\n    downsample(512, 4),  # (batch_size, 16, 16, 512)\n    downsample(512, 4),  # (batch_size, 8, 8, 512)\n    downsample(512, 4),  # (batch_size, 4, 4, 512)\n    downsample(512, 4),  # (batch_size, 2, 2, 512)\n    downsample(512, 4),  # (batch_size, 1, 1, 512)\n  ]\n\n  up_stack = [\n    upsample(512, 4, apply_dropout=True),  # (batch_size, 2, 2, 1024)\n    upsample(512, 4, apply_dropout=True),  # (batch_size, 4, 4, 1024)\n    upsample(512, 4, apply_dropout=True),  # (batch_size, 8, 8, 1024)\n    upsample(512, 4),  # (batch_size, 16, 16, 1024)\n    upsample(256, 4),  # (batch_size, 32, 32, 512)\n    upsample(128, 4),  # (batch_size, 64, 64, 256)\n    upsample(64, 4),  # (batch_size, 128, 128, 128)\n  ]\n\n  initializer = tf.random_normal_initializer(0., 0.02)\n  last = tf.keras.layers.Conv2DTranspose(OUTPUT_CHANNELS, 4,\n                                         strides=2,\n                                         padding='same',\n                                         kernel_initializer=initializer,\n                                         activation='tanh')  # (batch_size, 256, 256, 3)\n\n  x = inputs\n\n  # Downsampling through the model\n  skips = []\n  for down in down_stack:\n    x = down(x)\n    skips.append(x)\n\n  skips = reversed(skips[:-1])\n\n  # Upsampling and establishing the skip connections\n  for up, skip in zip(up_stack, skips):\n    x = up(x)\n    x = tf.keras.layers.Concatenate()([x, skip])\n\n  x = last(x)\n\n  return tf.keras.Model(inputs=inputs, outputs=x)","93de5d2e":"generator = Generator()","94d26c71":"gen_output = generator(inp[tf.newaxis, ...], training=False)\nplt.imshow(gen_output[0, ...])","e06a4ad4":"LAMBDA = 100","740d799e":"loss_object = tf.keras.losses.BinaryCrossentropy(from_logits=True)","9e1d2bf1":"def generator_loss(disc_generated_output, gen_output, target):\n  gan_loss = loss_object(tf.ones_like(disc_generated_output), disc_generated_output)\n\n  # Mean absolute error\n  l1_loss = tf.reduce_mean(tf.abs(target - gen_output))\n\n  total_gen_loss = gan_loss + (LAMBDA * l1_loss)\n\n  return total_gen_loss, gan_loss, l1_loss","6f28a0c5":"def Discriminator():\n  initializer = tf.random_normal_initializer(0., 0.02)\n\n  inp = tf.keras.layers.Input(shape=[512, 512, 3], name='input_image')\n  tar = tf.keras.layers.Input(shape=[512, 512, 3], name='target_image')\n\n  x = tf.keras.layers.concatenate([inp, tar])  # (batch_size, 256, 256, channels*2)\n\n  down1 = downsample(64, 4, False)(x)  # (batch_size, 128, 128, 64)\n  down2 = downsample(128, 4)(down1)  # (batch_size, 64, 64, 128)\n  down3 = downsample(256, 4)(down2)  # (batch_size, 32, 32, 256)\n\n  zero_pad1 = tf.keras.layers.ZeroPadding2D()(down3)  # (batch_size, 34, 34, 256)\n  conv = tf.keras.layers.Conv2D(512, 4, strides=1,\n                                kernel_initializer=initializer,\n                                use_bias=False)(zero_pad1)  # (batch_size, 31, 31, 512)\n\n  batchnorm1 = tf.keras.layers.BatchNormalization()(conv)\n\n  leaky_relu = tf.keras.layers.LeakyReLU()(batchnorm1)\n\n  zero_pad2 = tf.keras.layers.ZeroPadding2D()(leaky_relu)  # (batch_size, 33, 33, 512)\n\n  last = tf.keras.layers.Conv2D(1, 4, strides=1,\n                                kernel_initializer=initializer)(zero_pad2)  # (batch_size, 30, 30, 1)\n\n  return tf.keras.Model(inputs=[inp, tar], outputs=last)","b2719251":"discriminator = Discriminator()","d8d313ee":"disc_out = discriminator([inp[tf.newaxis, ...], gen_output], training=False)\nplt.imshow(disc_out[0, ..., -1], vmin=-20, vmax=20, cmap='RdBu_r')\nplt.colorbar()","cc8ee109":"def discriminator_loss(disc_real_output, disc_generated_output):\n  real_loss = loss_object(tf.ones_like(disc_real_output), disc_real_output)\n\n  generated_loss = loss_object(tf.zeros_like(disc_generated_output), disc_generated_output)\n\n  total_disc_loss = real_loss + generated_loss\n\n  return total_disc_loss","d23bf3ce":"generator_optimizer = tf.keras.optimizers.Adam(2e-4, beta_1=0.5)\ndiscriminator_optimizer = tf.keras.optimizers.Adam(2e-4, beta_1=0.5)","7b762ac9":"checkpoint_dir = '.\/training_checkpoints'\ncheckpoint_prefix = os.path.join(checkpoint_dir, \"ckpt\")\ncheckpoint = tf.train.Checkpoint(generator_optimizer=generator_optimizer,\n                                 discriminator_optimizer=discriminator_optimizer,\n                                 generator=generator,\n                                 discriminator=discriminator)","585f48cc":"def generate_images(model, test_input, tar):\n  prediction = model(test_input, training=True)\n  plt.figure(figsize=(15, 15))\n\n  display_list = [test_input[0], tar[0], prediction[0]]\n  title = ['Input Image', 'Ground Truth', 'Predicted Image']\n\n  for i in range(3):\n    plt.subplot(1, 3, i+1)\n    plt.title(title[i])\n    # Getting the pixel values in the [0, 1] range to plot.\n    plt.imshow(display_list[i] * 0.5 + 0.5)\n    plt.axis('off')\n  plt.show()","60ad5b89":"for example_input, example_target in test_dataset.take(1):\n  generate_images(generator, example_input, example_target)","ee98af92":"log_dir=\"logs\/\"\n\nsummary_writer = tf.summary.create_file_writer(\n  log_dir + \"fit\/\" + datetime.datetime.now().strftime(\"%Y%m%d-%H%M%S\"))","491ed116":"@tf.function\ndef train_step(input_image, target, step):\n  with tf.GradientTape() as gen_tape, tf.GradientTape() as disc_tape:\n    gen_output = generator(input_image, training=True)\n\n    disc_real_output = discriminator([input_image, target], training=True)\n    disc_generated_output = discriminator([input_image, gen_output], training=True)\n\n    gen_total_loss, gen_gan_loss, gen_l1_loss = generator_loss(disc_generated_output, gen_output, target)\n    disc_loss = discriminator_loss(disc_real_output, disc_generated_output)\n\n  generator_gradients = gen_tape.gradient(gen_total_loss,\n                                          generator.trainable_variables)\n  discriminator_gradients = disc_tape.gradient(disc_loss,\n                                               discriminator.trainable_variables)\n\n  generator_optimizer.apply_gradients(zip(generator_gradients,\n                                          generator.trainable_variables))\n  discriminator_optimizer.apply_gradients(zip(discriminator_gradients,\n                                              discriminator.trainable_variables))\n    \n  with summary_writer.as_default():\n    tf.summary.scalar('gen_total_loss', gen_total_loss, step=step\/\/1000)\n    tf.summary.scalar('gen_gan_loss', gen_gan_loss, step=step\/\/1000)\n    tf.summary.scalar('gen_l1_loss', gen_l1_loss, step=step\/\/1000)\n    tf.summary.scalar('disc_loss', disc_loss, step=step\/\/1000)\n","086b92d3":"def fit(train_ds, test_ds, steps):\n  example_input, example_target = next(iter(test_ds.take(1)))\n  start = time.time()\n\n  for step, (input_image, target) in train_ds.repeat().take(steps).enumerate():\n    if (step) % 1000 == 0:\n      display.clear_output(wait=True)\n\n      if step != 0:\n        print(f'Time taken for 1000 steps: {time.time()-start:.2f} sec\\n')\n\n      start = time.time()\n\n      generate_images(generator, example_input, example_target)\n      print(f\"Step: {step\/\/1000}k\")\n\n    train_step(input_image, target, step)\n\n    # Training step\n    if (step+1) % 10 == 0:\n      print('.', end='', flush=True)\n\n\n    # Save (checkpoint) the model every 5k steps\n    if (step + 1) % 5000 == 0:\n      checkpoint.save(file_prefix=checkpoint_prefix)","3cb9f004":"fit(train_dataset, test_dataset, steps=50000)","4446774f":"# Restoring the latest checkpoint in checkpoint_dir\ncheckpoint.restore(tf.train.latest_checkpoint(checkpoint_dir))","a19ac0ff":"# Run the trained model on a few examples from the test set\nfor inp, tar in test_dataset.take(5):\n  generate_images(generator, inp, tar)","a7a8fca3":"### Let's have a look at the data","32b2826c":"#### imports ","1af79e57":"#### The dataset is simple we have two folders train and test containing the images in a specific pattern ( as described in the dataset )","c840633e":"#### Now we can see that we have two images for the model i.e we have input and output, in this notebook, we will develop a model that takes the image input and produces the image output.","78da2d91":"#### We are ready with the image data generators, We have successfully defined our input data pipeline, based on the requirements we can also change the pre-processing operations.","bf8efbd3":"### Upsampler","8f5a3f05":"#### Discriminator tries to classify if image produced by the generator is real or not real","c66abcc6":"### Thank you for reading, Happy to hear your thoughts and suggestions. ","a9006fc6":"#### The generator is a modified U-Net. you can find more information [here](https:\/\/arxiv.org\/abs\/1505.04597)\n#### it consists of an encoder or downsampler and a decoder or upsampler","5ab9b2be":"### Downsampler","69193bb5":"## Let's see the model performance on the test set images. ","0b5d0c36":"#### Processing image data is computationally expensive, Though the size of the image is 512X512 we can also take smaller image sizes to experiment quickly.","6b50e058":"## Loss \n\n#### the loss function takes the real images and generated images and returns the loss. ","3acc227c":"#### before passing the image to the model we first resize and normalize the input and we use the functions like random crop and random_jitter to perform image data augmentations. ","90a15453":"## Discriminator ","9b68a4fb":"## Model building: generator ","0dc7ae69":"#### GANs learn a loss that adapts to the data, while cGANs learn a structured loss that penalizes a possible structure that differs from the network output and the target image as described [here](https:\/\/arxiv.org\/abs\/1611.07004)","e0a2f064":"## Train the model","4e53a3eb":"#  Basic EDA and Solution approach\n\n#### Hello readers\n\n#### In this notebook, we will be looking into the data and try to develop the solution for flower colouring using the Conditional GAN and Tensorflow \n","a6b88e88":"## Create the Datagenerators ","5f0fdb85":"#### We can see that the image has two images in it, The right one is the output (i.e colored image ) and the left one is the input (i.e Black and white image) \n\n#### To use the image data as input and output we need to separate the images, Following function does the loading of these image data points in the specific format. ","e1fbf1c6":"## Loss"}}