{"cell_type":{"40c18fc9":"code","fe155b5b":"code","e835aef2":"code","558b5cdb":"code","3cd371be":"code","203e79ca":"code","c35ee2c0":"code","fbf0f349":"code","2aa4f03d":"code","a169cb5d":"code","fd613399":"code","fdbc486a":"code","f52f840d":"code","a1c5e654":"code","e996387a":"code","dccdb60f":"code","217ad5be":"code","8483f10d":"code","77c7a7da":"code","525ad9ef":"code","09681ab4":"code","7a303c7a":"code","88557e55":"code","0f20a92e":"code","2ce53808":"markdown","06030b68":"markdown","4d458ae3":"markdown","ff75e3d8":"markdown","2794aeb4":"markdown"},"source":{"40c18fc9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n\n# Loading pacakges\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","fe155b5b":"# Importing data\ndf = pd.read_csv('\/kaggle\/input\/coronavirus-covid19-vaccinations\/data.csv')\ndf.head()","e835aef2":"# Deleting the first line\ndf = df.iloc[1: , :]\ndf.head()","558b5cdb":"# Checking the types of data\ndf.info()","3cd371be":"# Changeing the data type of 'total_vaccinations' and 'daily_vaccinations'\ndf.loc[:,'total_vaccinations'] = pd.to_numeric(df.loc[:,'total_vaccinations'])\ndf.loc[:,'daily_vaccinations'] = pd.to_numeric(df.loc[:,'daily_vaccinations'])\ndf.info()","203e79ca":"# Checking the unique iso_code\ndf['iso_code'].unique() ## Code that starts with OWID_ is not country","c35ee2c0":"# Dividing the dataset into country and group datasets\ndf_group = df[df['iso_code'].str.contains('OWID')]\ndf_group['iso_code'].unique()","fbf0f349":"df_country = df[df[\"iso_code\"].str.contains(\"OWID\")==False]\ndf_country['iso_code'].unique()","2aa4f03d":"# Get the last total Number of vaccinated people per country by grouping countries\n# The total numbers of vaccinated people are accumulated. \ndf_country_total = df_country.groupby(\"location\").last().sort_values(by='total_vaccinations',ascending=False)\ndf_country_total","a169cb5d":"df_country_total.isnull().sum()\n# people_fully_vaccinated and daily_vaccinations_raw have a lot of missing values\n# Those per_hundred columns have values larger than 100\n# So'total_vaccinations' seems to be more reliable to visualize","fd613399":"# Creating the fuction for adding values in the barplot\ndef show_values_on_bars(axs, h_v=\"v\", space=0.4):\n    def _show_on_single_plot(ax):\n        if h_v == \"v\":\n            for p in ax.patches:\n                _x = p.get_x() + p.get_width() \/ 2\n                _y = p.get_y() + p.get_height()\n                value = int(p.get_height())\n                ax.text(_x, _y, value, ha=\"center\") \n        elif h_v == \"h\":\n            for p in ax.patches:\n                _x = p.get_x() + p.get_width() + float(space)\n                _y = p.get_y() + p.get_height()\n                value = int(p.get_width())\n                ax.text(_x, _y, value, ha=\"left\")\n\n    if isinstance(axs, np.ndarray):\n        for idx, ax in np.ndenumerate(axs):\n            _show_on_single_plot(ax)\n    else:\n        _show_on_single_plot(axs)","fdbc486a":"# Visualizing the data with their values\nf, ax = plt.subplots(figsize = (10,40))\nfig = sns.barplot(y= df_country_total.index, x= df_country_total['total_vaccinations'], data = df_country_total)\nshow_values_on_bars(fig, \"h\", 0.3)","f52f840d":"# Seeking the extreme ends\np95 = np.percentile(df_country_total['total_vaccinations'], 95)\np5 = np.percentile(df_country_total['total_vaccinations'], 5)\nlevel = []\nfor row in df_country_total['total_vaccinations']:\n    if row >= p95  :             \n        level.append('H')\n    elif row <= p5:               \n        level.append('L')\n    else:                        \n        level.append('Not_Rated')\n\ndf_country_total['level'] = level\ndf_low = df_country_total[df_country_total['level'] == 'L']\ndf_high = df_country_total[df_country_total['level'] == 'H']","a1c5e654":"fig, ax = plt.subplots(2,1)\nsns.set_color_codes('pastel')\n\n_ = sns.barplot(y= df_high.index, x= df_high['total_vaccinations']\/1000000, \n            data = df_high, ax=ax[0])\n_ = ax[0].set_title(\"Highest Number of Total Vaccinations Countries (>95 percentile)\")\n_ = ax[0].set_xlabel('Total Vaccinations (in millions)')\n\n_ = sns.barplot(y= df_low.index, x= df_low['total_vaccinations']\/1000000, \n            data = df_low, ax=ax[1])\n_ = ax[1].set_title(\"Lowest Number of Total Vaccinations Countries (<5 percentile)\")\n_ = ax[1].set_xlabel('Total Vaccinations (in millions)')\n\n_ = plt.subplots_adjust(hspace= 0.5)\n\nfig.set_size_inches(15, 7)\nfig.show()","e996387a":"# In addition, checking the dataset with different lenses \n# Visualizing the data with their values but using 'total_vaccinations_per_hundred'\nf, ax = plt.subplots(figsize = (10,35))\nfig = sns.barplot(y= df_country_total.index, x= df_country_total['total_vaccinations_per_hundred'], data = df_country_total)\nplt.title(\"Total Number of Vaccinated people per hundred\")\nshow_values_on_bars(fig, \"h\", 0.2)","dccdb60f":"# Visualizing the data with their values but using 'people_vaccinated_per_hundred' \n# Because percentages of some countries are greater than the 100 percentages\n\nf, ax = plt.subplots(figsize = (10,35))\nfig = sns.barplot(y= df_country_total.index, x= df_country_total['people_vaccinated_per_hundred'], data = df_country_total)\nplt.title(\"Number of Vaccinated people per hundred\")\nshow_values_on_bars(fig, \"h\", 0.2)","217ad5be":"# Seeking the extreme ends\np95_per_hundred = np.percentile(df_country_total['people_vaccinated_per_hundred'], 95)\np5_per_hundred = np.percentile(df_country_total['people_vaccinated_per_hundred'], 5)\nlevel_per_hundred = []\nfor row in df_country_total['people_vaccinated_per_hundred']:\n    if row >= p95_per_hundred:             \n        level_per_hundred.append('H')\n    elif row <= p5_per_hundred:               \n        level_per_hundred.append('L')\n    else:                        \n        level_per_hundred.append('Not_Rated')\n\ndf_country_total['level_per_hundred'] = level_per_hundred\ndf_low_per_hundred = df_country_total[df_country_total['level_per_hundred'] == 'L']\ndf_high_per_hundred = df_country_total[df_country_total['level_per_hundred'] == 'H']\n\ndf_low_per_hundred = df_low_per_hundred.sort_values(by='people_vaccinated_per_hundred',ascending=False)\ndf_high_per_hundred = df_high_per_hundred.sort_values(by='people_vaccinated_per_hundred',ascending=False)","8483f10d":"fig, ax = plt.subplots(2,1)\n\nsns.set_color_codes('pastel')\n\n_ = sns.barplot(y= df_high_per_hundred.index, x= df_high_per_hundred['people_vaccinated_per_hundred'], \n            data = df_high_per_hundred, ax=ax[0])\n_ = ax[0].set_title(\"Highest Number of Vaccinated People per Hundred by Countries (>95 percentile)\")\n_ = ax[0].set_xlabel('Vaccinated People per Hundred')\n\n_ = sns.barplot(y= df_low_per_hundred.index, x= df_low_per_hundred['people_vaccinated_per_hundred'], \n            data = df_low_per_hundred, ax=ax[1])\n_ = ax[1].set_title(\"Lowest Number of Vaccinated People per Hundred by Countries (<5 percentile)\")\n_ = ax[1].set_xlabel('Vaccinated People per Hundred')\n\n_ = plt.subplots_adjust(hspace= 0.5)\n\nfig.set_size_inches(15, 7)\nfig.show()","77c7a7da":"df_group['location'].unique()","525ad9ef":"# Subsetting World and 6 continents from 'location' column\nworld_covid_trend = df_group[df_group['location'] == 'World']\ndf_Asia = df_group[df_group['location'] == 'Asia']\ndf_Africa = df_group[df_group['location'] == 'Africa']\ndf_Europe = df_group[df_group['location'] == 'Europe']\ndf_North_America = df_group[df_group['location'] == 'North America']\ndf_South_America = df_group[df_group['location'] == 'South America']\ndf_Oceania = df_group[df_group['location'] == 'Oceania']","09681ab4":"# size of the entire plot\nplt.figure(figsize=(50, 25))\n# x and y axis label names\n# title of the plot and its size\nplt.title('COVID Vaccination Trend', fontweight='bold', fontsize=40)\nplt.xlabel('Date', fontweight='bold')\nplt.ylabel('# OF Total Vaccination (in billion)', fontweight='bold')\nplt.plot('date', 'total_vaccinations', data = world_covid_trend, \\\n         c='black', linewidth = 4, label = 'World')\nplt.plot('date', 'total_vaccinations', data = df_Asia, \\\n         c='blue', linewidth = 4, label = 'Asia')\nplt.plot('date', 'total_vaccinations', data = df_Africa, \\\n         c='red', linewidth = 4, label = 'Africa')\nplt.plot('date', 'total_vaccinations', data = df_Europe, \\\n         c='green', linewidth = 4, label = 'Europe')\nplt.plot('date', 'total_vaccinations', data = df_North_America, \\\n         c='orange', linewidth = 4, label = 'North America')\nplt.plot('date', 'total_vaccinations', data = df_South_America, \\\n         c='purple', linewidth = 4, label = 'South America')\nplt.xticks(rotation = 70, fontsize = '10')\nplt.yticks(fontsize = '20')\n# legend position and size\nplt.legend(loc='upper left', prop={'size':35})\nplt.grid(False)\n# axes label font size change\naxes = plt. gca()\naxes. xaxis. label. set_size(30)\naxes. yaxis. label. set_size(30)\nplt.show()","7a303c7a":"# Subsetting 4 groups based their income levels from 'location' column\nUpper_middle = df_group[df_group['location'] == 'Upper middle income'] \nLower_middle = df_group[df_group['location'] == 'Lower middle income'] \nHigh = df_group[df_group['location'] == 'High income'] \nLow= df_group[df_group['location'] == 'Low income'] ","88557e55":"# size of the entire plot\nplt.figure(figsize=(50, 25))\n# x and y axis label names\n# title of the plot and its size\nplt.title('COVID Vaccination Trend (in billion)', fontweight='bold', fontsize=40)\nplt.xlabel('Date', fontweight='bold')\nplt.ylabel('# OF Total Vaccination', fontweight='bold')\nplt.plot('date', 'total_vaccinations', data = High, \\\n         c='blue', linewidth = 4, label = 'High income')\nplt.plot('date', 'total_vaccinations', data = Low, \\\n         c='red', linewidth = 4, label = 'Low income')\nplt.plot('date', 'total_vaccinations', data = Upper_middle, \\\n         c='green', linewidth = 4, label = 'Upper middle income')\nplt.plot('date', 'total_vaccinations', data = Lower_middle, \\\n         c='orange', linewidth = 4, label = 'Lower middle income')\nplt.xticks(rotation = 70, fontsize = '10')\nplt.yticks(fontsize = '20')\n# legend position and size\nplt.legend(loc='upper left', prop={'size':35})\nplt.grid(False)\n# axes label font size change\naxes = plt. gca()\naxes. xaxis. label. set_size(30)\naxes. yaxis. label. set_size(30)\nplt.show()","0f20a92e":"df_country.loc[df_country['daily_vaccinations']==(df_country['daily_vaccinations'].max())]","2ce53808":"## **Task 2.** Trend of vaccination doses with time","06030b68":"## **Task 1.** Calculate the total number of vaccinated people per country","4d458ae3":"## **0.** Import and Inspect Data","ff75e3d8":"**Co-Contributors: Im. D., Kim. Y., Luo. Y.**","2794aeb4":"## **Task 3**. Name the country where maximum vaccination has taken place in a day"}}