{"cell_type":{"fae15a2a":"code","400e3328":"code","2ad83913":"code","e0f39d1f":"code","9f19be13":"code","5e2013c2":"code","02bec635":"code","66ff0b9d":"code","d2546cf4":"code","bd97afe2":"code","4b475da0":"code","22faefa6":"code","0a7dc7ff":"code","1288ca40":"code","23cd0702":"markdown","ae70b5dc":"markdown","91305ccd":"markdown","dcdaa822":"markdown","76b5e143":"markdown","b050d1a0":"markdown","e3e13bae":"markdown","bdb7fce1":"markdown"},"source":{"fae15a2a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","400e3328":"tr_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\nte_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","2ad83913":"tr_data.info()","e0f39d1f":"tr_data.head()","9f19be13":"te_data.info()","5e2013c2":"te_data.head()","02bec635":"tr_data = tr_data.drop(['Cabin','Embarked'],axis = 1)\nte_data = te_data.drop(['Cabin','Embarked'],axis = 1)","66ff0b9d":"tr_data = tr_data.drop(tr_data[tr_data.Age.isna()].index)\n#te_data = te_data.drop(te_data[te_data.Age.isna()].index)\nte_data.Age.fillna(te_data.Age.mean(),inplace = True)\nte_data.Fare.fillna(0,inplace = True)","d2546cf4":"object_cols = [cname for cname in tr_data.columns if tr_data[cname].dtype == \"object\"]\n\nlow_cardinality_cols  = [cname for cname in tr_data.columns if tr_data[cname].nunique() < 10 and \n                        tr_data[cname].dtype == \"object\"]\nnumerical_cols = [cname for cname in tr_data.columns if tr_data[cname].dtype in ['int64', 'float64']]\n\nprint(object_cols)\nprint(low_cardinality_cols)\nprint(numerical_cols)","bd97afe2":"nouse_object_cols = list(set(object_cols)-set(low_cardinality_cols))\ntr_data = tr_data.drop(nouse_object_cols,axis = 1)\nte_data = te_data.drop(nouse_object_cols,axis = 1)","4b475da0":"from sklearn.preprocessing import LabelEncoder\nlabel_tr_data = tr_data.copy()\nlabel_te_data = te_data.copy()\nlabel_encoder = LabelEncoder()\nlabel_tr_data.Sex = label_encoder.fit_transform(tr_data['Sex'])\nlabel_te_data.Sex = label_encoder.fit_transform(te_data['Sex'])","22faefa6":"label_tr_data.head()","0a7dc7ff":"label_te_data.head()","1288ca40":"from sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\ny = label_tr_data.Survived\nX = label_tr_data.drop('Survived',axis = 1)\n\nmodel = RandomForestClassifier(criterion = 'entropy',n_estimators=100,n_jobs = 16)\nmodel.fit(X, y)\n\nimportances = model.feature_importances_\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ncolor = sns.color_palette()\nsns.set_style('darkgrid')\n \nfeatures_list = label_tr_data.columns.values\nfeature_importance = model.feature_importances_\nsorted_idx = np.argsort(feature_importance)\n \nplt.figure(figsize=(5,7))\nplt.barh(range(len(sorted_idx)), feature_importance[sorted_idx], align='center')\nplt.yticks(range(len(sorted_idx)), features_list[sorted_idx])\nplt.xlabel('Importance')\nplt.title('Feature importances')\nplt.draw()\n\n\n\npredictions = model.predict(label_te_data)\n\noutput = pd.DataFrame({'PassengerId': label_te_data.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\n","23cd0702":">  \u627e\u51fa\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u4e2dobject\u7c7b\u578b\u7684\u5217\uff0cobject\u7c7b\u578b\u4e14\u503c\u79cd\u7c7b\u5c0f\u4e8e10\u7684\u5217\uff0c\u4ee5\u53ca\u6570\u503c\u578b\u7684\u5217","ae70b5dc":"> \u5220\u9664Age\u4e2d\u7684nan\u6570\u636e","91305ccd":"# 3\u3001\u5efa\u7acb\u6a21\u578b\uff0c\u8fdb\u884c\u8bad\u7ec3\u548c\u9884\u6d4b","dcdaa822":"# 2\u3001\u6e05\u6d17\u6570\u636e","76b5e143":"# 1\u3001\u5bfc\u5165\u6570\u636e\u5e76\u8fdb\u884c\u89c2\u5bdf","b050d1a0":"> \u5220\u9664\u7c7b\u578b\u662fobject\u5e76\u4e14\u503c\u79cd\u7c7b\u5927\u4e8e10\u7684\u5217","e3e13bae":"> \u5bf9Sex\u8fdb\u884cLabelEncoding","bdb7fce1":"> \u8239\u8231\u7b49\u7ea7\u3001\u767b\u8239\u6e2f\u53e3\u4e0e\u751f\u8fd8\u5173\u8054\u4e0d\u5927\uff0c\u5220\u9664Cabin\u3001Embarked"}}