{"cell_type":{"ef5a4997":"code","a7306b17":"code","886cc717":"code","554b05ba":"code","2d13bf67":"code","d0fbdd6d":"code","71f0b768":"code","4027ae2a":"code","c0cee07d":"code","c634cf83":"code","46126992":"code","17aabfc0":"code","0b785921":"code","7a51a422":"code","a618fa25":"code","bc94f809":"code","39f2caba":"code","517fa186":"code","633a369a":"code","5f25d0e3":"code","073b36e7":"code","9e3ac1d2":"code","38035d5b":"code","1c83d65a":"code","551f95a5":"code","92ab7881":"code","d0ff4941":"code","f94b7ee7":"code","91dfd341":"code","22ea4bcb":"code","07658bea":"code","f0a875fe":"markdown","400d43d8":"markdown","d1b9d1ba":"markdown","8b5f54c7":"markdown","436346a4":"markdown","afba9217":"markdown","54f0155a":"markdown","2596bcd3":"markdown","9f4a010b":"markdown","a21503a8":"markdown"},"source":{"ef5a4997":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import normalize ,StandardScaler\nfrom sklearn.decomposition import PCA\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a7306b17":"creditcard_df=pd.read_csv('\/kaggle\/input\/ccdata\/CC GENERAL.csv')","886cc717":"creditcard_df\n","554b05ba":"creditcard_df.info()","2d13bf67":"print('Average,Max,Min of BALANCE col:',creditcard_df['BALANCE'].mean(),\" \",creditcard_df['BALANCE'].max(),\" \",creditcard_df['BALANCE'].min())\ncreditcard_df['BALANCE'].describe()","d0fbdd6d":"creditcard_df.describe()","71f0b768":"creditcard_df[(creditcard_df['ONEOFF_PURCHASES']==creditcard_df['ONEOFF_PURCHASES'].max())]","4027ae2a":"creditcard_df[(creditcard_df['CASH_ADVANCE']==creditcard_df['CASH_ADVANCE'].max())]","c0cee07d":"sns.heatmap(creditcard_df.isnull(),cmap='Blues')\n#as mentioned before ,  'MINIMUM_PAYMENTS' having some missing values","c634cf83":"# to figure out how many missing values we got in our dataset\ncreditcard_df.isnull().sum()","46126992":"#fill missing data with the average value \ncreditcard_df.loc[(creditcard_df['MINIMUM_PAYMENTS'].isnull()==True),'MINIMUM_PAYMENTS']=creditcard_df['MINIMUM_PAYMENTS'].mean()\n","17aabfc0":"#to cheak if it works\ncreditcard_df.isnull().sum()","0b785921":"creditcard_df.loc[(creditcard_df['CREDIT_LIMIT'].isnull()==True),'CREDIT_LIMIT']=creditcard_df['CREDIT_LIMIT'].mean()\n#to check\ncreditcard_df.isnull().sum()","7a51a422":"#Double cheak if it works\nsns.heatmap(creditcard_df.isnull(),cmap='Blues')","a618fa25":"creditcard_df.duplicated().sum()","bc94f809":"creditcard_df.drop('CUST_ID',axis=1,inplace=True)\ncreditcard_df","39f2caba":"plt.figure(figsize=(10,50))\nfor i in range(0,len(creditcard_df.columns)):\n    plt.subplot(17,1,i+1)\n    sns.distplot(creditcard_df[creditcard_df.columns[i]],kde_kws={'color':'b','lw':3,'label':'KDE','bw':0},hist_kws={'color':'g'})\n    plt.title(creditcard_df.columns[i])\n\n\nplt.tight_layout()\n    \n\n    ","517fa186":"corrolations=creditcard_df.corr()\nf,ax=plt.subplots(figsize=(20,10))\nsns.heatmap(corrolations,cmap='Blues',annot=True)","633a369a":"scale=StandardScaler()\ncreditcard_df_scaled=scale.fit_transform(creditcard_df)","5f25d0e3":"creditcard_df_scaled","073b36e7":"scores_1=[]\nrange_values=range(1,20)\n#to get WCSS in each iteration \nfor i in range_values:\n    kmeans=KMeans(n_clusters=i)\n    kmeans.fit(creditcard_df_scaled)\n    scores_1.append(kmeans.inertia_) \nplt.plot(scores_1)    \nplt.xlabel('#K clusters')\nplt.ylabel('WCSS')\n            \n\n","9e3ac1d2":"kmeans=KMeans(n_clusters=7)\nkmeans.fit(creditcard_df_scaled)\nlabels=kmeans.labels_","38035d5b":"kmeans.cluster_centers_.shape","1c83d65a":"cluster_centers=pd.DataFrame(data=kmeans.cluster_centers_,columns=[creditcard_df.columns])\ncluster_centers","551f95a5":"# In order to understand what these numbers mean, let's perform inverse transformation\ncluster_centers = scale.inverse_transform(cluster_centers)\ncluster_centers = pd.DataFrame(data = cluster_centers, columns = [creditcard_df.columns])\ncluster_centers\n\n# First Customers cluster (Transactors): Those are customers who pay least amount of intrerest charges and careful with their money, Cluster with lowest balance ($104) and cash advance ($303), Percentage of full payment = 23%\n# Second customers cluster (revolvers) who use credit card as a loan (most lucrative sector): highest balance ($5000) and cash advance (~$5000), low purchase frequency, high cash advance frequency (0.5), high cash advance transactions (16) and low percentage of full payment (3%)\n# Third customer cluster (VIP\/Prime): high credit limit $16K and highest percentage of full payment, target for increase credit limit and increase spending habits\n# Fourth customer cluster (low tenure): these are customers with low tenure (7 years), low balance ","92ab7881":"labels.shape","d0ff4941":"labels.max()","f94b7ee7":"labels.min()","91dfd341":"k_means_predict=kmeans.fit_predict(creditcard_df_scaled)\nk_means_predict","22ea4bcb":"creditcard_df_clusters=pd.concat([creditcard_df,pd.DataFrame({'cluster':labels})],axis=1)\ncreditcard_df_clusters.head()","07658bea":"\n# Plot the histogram of various clusters\nfor i in creditcard_df.columns:\n  plt.figure(figsize = (35, 5))\n  for j in range(5):\n    plt.subplot(1,7,j+1)\n    cluster = creditcard_df_clusters[creditcard_df_clusters['cluster'] == j]\n    cluster[i].hist(bins = 20)\n    plt.title('{}    \\nCluster {} '.format(i,j))\n  \n  plt.show()\n","f0a875fe":" Obtain the row(customer)that has the max 'ONEOFF_PURCHASES' and his\/her features , the row(customer)that has the max 'CASH_ADVANCE' and his\/her features , as well.","400d43d8":" Now fill that one missing value in 'CREDIT_LIMIT '","d1b9d1ba":"Explore our dataset and viualize it","8b5f54c7":"Check the deplicated data","436346a4":"get a statistical insights about our dataset ; itskind useful to know more about our data.","afba9217":"# ****view our data_Set","54f0155a":"Cheaking for missing data","2596bcd3":"As it is obvious that there are some missing values though column 'MINIMUM_PAYMENTS', we will deal with it later on\n","9f4a010b":"Calculate Within Cluster Sum Ofd Squares(WCSS), So we can use it later to determine the optimal K ","a21503a8":"It's clear that all our values are unique"}}