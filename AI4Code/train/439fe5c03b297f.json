{"cell_type":{"dce3764a":"code","4cebff19":"code","e97a27a3":"code","18e87868":"code","db8815a7":"code","44868487":"code","994b0d63":"code","47c8a45b":"code","84d09865":"code","29e47919":"code","395fdc80":"code","ded58a19":"code","81b64ae8":"code","86548213":"code","e30241f5":"code","b94a2bdf":"code","0787cdd2":"code","634a9087":"markdown","87c378cd":"markdown","eb8f51a3":"markdown","810ca609":"markdown","e0e75ad4":"markdown","8c391c30":"markdown","1af2af23":"markdown","aee9b542":"markdown"},"source":{"dce3764a":"# General Imports\nimport numpy as np \nimport pandas as pd      \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport math\nfrom datetime import datetime\nfrom datetime import date, timedelta\nimport scipy.stats\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","4cebff19":"# Load CSV data to pandas DataFrames\n\nUK_TOTAL_DATA = pd.read_csv('..\/input\/uk-covid19-data\/UK_National_Total_COVID_Dataset.csv', index_col='date',parse_dates=True) \nDEVOLVED_NATION_DATA = pd.read_csv('..\/input\/uk-covid19-data\/UK_Devolved_Nations_COVID_Dataset.csv', index_col='date',parse_dates=True)\nENGLAND_REGIONS_DATA = pd.read_csv('..\/input\/uk-covid19-data\/England_Regions_COVID_Dataset.csv', index_col='date',parse_dates=True)\nUK_LOCAL_AUTHORITY_DATA = pd.read_csv('..\/input\/uk-covid19-data\/UK_Local_Authority_UTLA_COVID_Dataset.csv', index_col='date',parse_dates=True)\nPOPULATION_DATA = pd.read_csv('..\/input\/uk-covid19-data\/NEW_Official_Population_Data_ONS_mid-2019.csv',index_col='Unnamed: 0')\n\nUK_AND_NATIONS = pd.concat([UK_TOTAL_DATA,DEVOLVED_NATION_DATA])\nENGLAND_AND_REGIONS = pd.concat([DEVOLVED_NATION_DATA[DEVOLVED_NATION_DATA['areaName'] == 'England'],ENGLAND_REGIONS_DATA])\nUK_AND_UTLAS = pd.concat([UK_TOTAL_DATA,UK_LOCAL_AUTHORITY_DATA])","e97a27a3":"# Add population density data to UK_LOCAL_AUTHORITY_DATA dataframe\nmapping = dict(POPULATION_DATA[['areaCode', 'Population Density (per sq. km)']].values)\nUK_LOCAL_AUTHORITY_DATA['Population Density (per sq. km)'] = UK_LOCAL_AUTHORITY_DATA['areaCode'].map(mapping)\n\n# Add population data to UK_LOCAL_AUTHORITY_DATA dataframe\nMAPPING_POP = dict(POPULATION_DATA[['areaCode', 'Population']].values)\nUK_LOCAL_AUTHORITY_DATA['Population'] = UK_LOCAL_AUTHORITY_DATA['areaCode'].map(MAPPING_POP)\n\n# Add population data to UK_AND_NATIONS dataframe - '.title()' method used to convert country names from all caps so they match with COVID-19 DataFrame\nNATION_MAPPING_POP = dict(POPULATION_DATA[['areaName', 'Population']].values)\nNATION_MAPPING_POP_fix = dict(zip([i.title() for i in NATION_MAPPING_POP.keys()], [i for i in NATION_MAPPING_POP.values()]))\n\nUK_AND_NATIONS['Population'] = UK_AND_NATIONS['areaName'].map(NATION_MAPPING_POP_fix)","18e87868":"# Calculate 7-day averages for new deaths and new deaths per 100,000 people\n\nSEVEN_DAY_AVERAGES = pd.Series(dtype='float64')\nSEVEN_DAY_TOTALS = pd.Series(dtype='float64')\nAVERAGES_CASES = pd.Series(dtype='float64')\nTOTALS_CASES = pd.Series(dtype='float64')\n\nfor i in UK_AND_NATIONS['areaName'].unique():\n    SEVEN_DAY_AVERAGES = SEVEN_DAY_AVERAGES.append(UK_AND_NATIONS[UK_AND_NATIONS[\"areaName\"] == i]['newDeaths28DaysByDeathDate'].rolling(window=7).mean())\n    SEVEN_DAY_TOTALS = SEVEN_DAY_TOTALS.append(UK_AND_NATIONS[UK_AND_NATIONS[\"areaName\"] == i]['newDeaths28DaysByDeathDate'].rolling(window=7).sum())\n    AVERAGES_CASES = AVERAGES_CASES.append(UK_AND_NATIONS[UK_AND_NATIONS[\"areaName\"] == i]['newCasesByPublishDate'].rolling(window=7).mean())\n    SEVEN_DAY_TOTALS_CASES = TOTALS_CASES.append(UK_AND_NATIONS[UK_AND_NATIONS[\"areaName\"] == i]['newCasesByPublishDate'].rolling(window=7).sum())\n\nUK_AND_NATIONS['New_Deaths_7_day_average'] = SEVEN_DAY_AVERAGES\nUK_AND_NATIONS['New_Deaths_7_day_totals'] = SEVEN_DAY_TOTALS\nUK_AND_NATIONS['New_Cases_7_day_average'] = AVERAGES_CASES\nUK_AND_NATIONS['New_Cases_7_day_totals'] = SEVEN_DAY_TOTALS_CASES\n\n# Create new 7 day rolling average deaths per 100,000 people\n\nUK_AND_NATIONS['New_Deaths_7_day_average_per_100,000'] = (UK_AND_NATIONS['New_Deaths_7_day_average']*100000\/\n                                                                   UK_AND_NATIONS['Population'])\n\n# Create % population first-dose vaccinated\n\nUK_AND_NATIONS['People_Vaccinated_First_Dose_Percent'] = UK_AND_NATIONS['cumPeopleVaccinatedFirstDoseByPublishDate']*100\/UK_AND_NATIONS['Population'].fillna(0)","db8815a7":"# 7 day averages for Local boroughs\n\nSEVEN_DAY_AVERAGES = pd.Series(dtype='float64')\n\nfor i in UK_LOCAL_AUTHORITY_DATA['areaName'].unique():\n    SEVEN_DAY_AVERAGES = SEVEN_DAY_AVERAGES.append(UK_LOCAL_AUTHORITY_DATA[UK_LOCAL_AUTHORITY_DATA[\"areaName\"] == i]['newDeaths28DaysByDeathDate'].rolling(window=7).mean())\n    \nUK_LOCAL_AUTHORITY_DATA['New_Deaths_7_day_average'] = SEVEN_DAY_AVERAGES\n\n# Create new 7 day rolling average deaths per 100,000 people\n\nUK_LOCAL_AUTHORITY_DATA['New_Deaths_7_day_average_per_100,000'] = (UK_LOCAL_AUTHORITY_DATA['New_Deaths_7_day_average']*100000\/\n                                                                   UK_LOCAL_AUTHORITY_DATA['Population'])","44868487":"# Plot Daily New Deaths vs Percent of Population Vaccinated (First-Dose)\n\nNEW_DEATHS_GRAD = np.gradient(UK_AND_NATIONS[UK_AND_NATIONS['areaName']=='United Kingdom'][\"New_Cases_7_day_average\"].rolling(7).mean())\n\nf, ax1 = plt.subplots(figsize=(15,6))\nsns.lineplot(data=UK_AND_NATIONS[UK_AND_NATIONS['areaName']=='United Kingdom'],\n             x=UK_AND_NATIONS[UK_AND_NATIONS['areaName']=='United Kingdom'].index,\n             y=\"New_Cases_7_day_average\")\nplt.title('New Daily Confirmed Cases (7-day Rolling Average) and Rate-of-Change for United Kingdom')\nax1.grid(linestyle=':', linewidth='0.5')\nax1.set_xlim(date.fromisoformat('2020-08-01'),UK_AND_NATIONS.index[-2])\nax1.set_ylim(0)\n#ax.legend(ncol=2,title=None,loc=(0.45,0.03))\n\n\n# Full UK Lockdown 1 Text\nTEXT = [\n        ('2020-11-26','Pfizer Vaccine Approval'),\n        ('2020-12-24','Oxford University\/AstraZeneca Vaccine Approval')\n       ]\n\nfor i,j in TEXT: \n    ax1.text(date.fromisoformat(i), UK_AND_NATIONS['New_Cases_7_day_average'].max()*1.04, j, rotation=90,va='top')\n# for i,j in TEXT[6:]: \n#     ax.text(date.fromisoformat(i), 3, j, rotation=90)\n\n# Vertical Lines\n\n# ax1.axvline(date.fromisoformat('2020-03-23'), ls='--', color='black')\n# ax1.axvline(date.fromisoformat('2020-05-28'), ls='--', color='black')\n# ax1.axvline(date.fromisoformat('2020-06-29'), ls='--', color='black')\n# ax1.axvline(date.fromisoformat('2020-10-14'), ls='--', color='black')\n# ax1.axvline(date.fromisoformat('2020-10-23'), ls='--', color='black')\n# ax1.axvline(date.fromisoformat('2020-11-05'), ls='--', color='black')\nax1.axvline(date.fromisoformat('2020-12-02'), ls='--', color='black')\nax1.axvline(date.fromisoformat('2020-12-30'), ls='--', color='black')\n\n# Second axis (Vaccine introduction)\n\nax2 = ax1.twinx()\ncolor = 'magenta'\nax2.set_ylabel('Rate of Change of New Daily Cases', color=color)  # we already handled the x-label with ax1\nsns.lineplot(x=UK_AND_NATIONS[UK_AND_NATIONS['areaName']=='United Kingdom'].index,\n             y=NEW_DEATHS_GRAD,color=color,linestyle='--',ax=ax2)\nax2.tick_params(axis='y', labelcolor=color)\nax2.set_ylim(-3500,3500)\nplt.savefig('UK_Cases_and_Rate_of_Change.jpg',dpi=300)\nplt.show\n","994b0d63":"UK_AND_NATIONS.columns","47c8a45b":"UK_AND_NATIONS['CFR'] = UK_AND_NATIONS['cumDeaths28DaysByDeathDate']*100\/UK_AND_NATIONS['cumCasesByPublishDate']\n\nUK_AND_NATIONS['Hospitalisation_Rate'] = UK_AND_NATIONS['cumAdmissions']*100\/UK_AND_NATIONS['cumCasesByPublishDate']\n\nUK_AND_NATIONS['HFR'] = UK_AND_NATIONS['cumDeaths28DaysByDeathDate']*100\/UK_AND_NATIONS['cumAdmissions']\n\nUK_AND_NATIONS['CFR_Moving'] = UK_AND_NATIONS['New_Deaths_7_day_average']*100\/UK_AND_NATIONS['New_Cases_7_day_average'].shift(periods=13, fill_value=0)\n\nUK_AND_NATIONS['CFR_Moving_sum'] = UK_AND_NATIONS['New_Deaths_7_day_totals']*100\/UK_AND_NATIONS['New_Cases_7_day_totals']","84d09865":"UK_AND_NATIONS['New_Deaths_7_day_totals'].shift(periods=-3, fill_value=0)","29e47919":"UK_AND_NATIONS['New_Deaths_7_day_totals']","395fdc80":"# Plot Daily New Deaths vs Percent of Population Vaccinated (First-Dose)\n\n#NEW_DEATHS_GRAD = np.gradient(UK_AND_NATIONS[UK_AND_NATIONS['areaName']=='United Kingdom'][\"New_Cases_7_day_average\"].rolling(7).mean())\n\nf, ax1 = plt.subplots(figsize=(15,6))\nsns.lineplot(data=UK_AND_NATIONS[UK_AND_NATIONS['areaName']=='United Kingdom'],\n             x=UK_AND_NATIONS[UK_AND_NATIONS['areaName']=='United Kingdom'].index,\n             y=\"CFR\")\nplt.title('New Daily Confirmed Cases (7-day Rolling Average) and Rate-of-Change for United Kingdom')\nax1.grid(linestyle=':', linewidth='0.5')\nax1.set_xlim(date.fromisoformat('2020-03-01'),UK_AND_NATIONS.index[-2])\nax1.set_ylim(0)\n\n","ded58a19":"f, ax1 = plt.subplots(figsize=(15,6))\nsns.lineplot(data=UK_AND_NATIONS[UK_AND_NATIONS['areaName']=='United Kingdom'],\n             x=UK_AND_NATIONS[UK_AND_NATIONS['areaName']=='United Kingdom'].index,\n             y=\"Hospitalisation_Rate\")\nplt.title('New Daily Confirmed Cases (7-day Rolling Average) and Rate-of-Change for United Kingdom')\nax1.grid(linestyle=':', linewidth='0.5')\nax1.set_xlim(date.fromisoformat('2020-03-01'),UK_AND_NATIONS.index[-2])\nax1.set_ylim(0)","81b64ae8":"f, ax1 = plt.subplots(figsize=(15,6))\nsns.lineplot(data=UK_AND_NATIONS[UK_AND_NATIONS['areaName']=='United Kingdom'],\n             x=UK_AND_NATIONS[UK_AND_NATIONS['areaName']=='United Kingdom'].index,\n             y=\"HFR\")\nplt.title('New Daily Confirmed Cases (7-day Rolling Average) and Rate-of-Change for United Kingdom')\nax1.grid(linestyle=':', linewidth='0.5')\nax1.set_xlim(date.fromisoformat('2020-03-01'),UK_AND_NATIONS.index[-2])\n#ax1.set_ylim(0)","86548213":"peak_gap = UK_AND_NATIONS[UK_AND_NATIONS['areaName']=='United Kingdom']['New_Deaths_7_day_average'].idxmax()-UK_AND_NATIONS[UK_AND_NATIONS['areaName']=='United Kingdom']['New_Cases_7_day_average'].idxmax()\n\nprint('time lag between peak cases and peak deaths in UK = {}'.format(peak_gap))","e30241f5":"f, ax1 = plt.subplots(figsize=(15,6))\nsns.lineplot(data=UK_AND_NATIONS[UK_AND_NATIONS['areaName']=='United Kingdom'],\n             x=UK_AND_NATIONS[UK_AND_NATIONS['areaName']=='United Kingdom'].index,\n             y=\"New_Cases_7_day_average\")\nplt.title('New Daily Confirmed Cases (7-day Rolling Average) and Rate-of-Change for United Kingdom')\nax1.grid(linestyle=':', linewidth='0.5')\nax1.set_xlim(date.fromisoformat('2020-03-01'),UK_AND_NATIONS.index[-2])\n#ax1.set_ylim(0,10)\n\n# Second axis (Vaccine introduction)\n\nax2 = ax1.twinx()\ncolor = 'magenta'\nax2.set_ylabel('Rate of Change of New Daily Cases', color=color)  # we already handled the x-label with ax1\nsns.lineplot(data=UK_AND_NATIONS[UK_AND_NATIONS['areaName']=='United Kingdom'],\n             x=UK_AND_NATIONS[UK_AND_NATIONS['areaName']=='United Kingdom'].index,\n             y='New_Deaths_7_day_average',color=color,linestyle='--',ax=ax2)\nax2.tick_params(axis='y', labelcolor=color)\nax2.set_ylim(0)\nplt.savefig('UK_Cases_and_Rate_of_Change.jpg',dpi=300)\nplt.show","b94a2bdf":"f, ax1 = plt.subplots(figsize=(15,6))\nsns.lineplot(data=UK_AND_NATIONS[UK_AND_NATIONS['areaName']=='United Kingdom'],\n             x=UK_AND_NATIONS[UK_AND_NATIONS['areaName']=='United Kingdom'].index,\n             y=\"CFR_Moving\")\nplt.title('New Daily Confirmed Cases (7-day Rolling Average) and Rate-of-Change for United Kingdom')\nax1.grid(linestyle=':', linewidth='0.5')\nax1.set_xlim(date.fromisoformat('2020-03-01'),UK_AND_NATIONS.index[-2])\nax1.set_ylim(0,20)\n\n# Second axis (Vaccine introduction)\n\nax2 = ax1.twinx()\ncolor = 'magenta'\nax2.set_ylabel('Rate of Change of New Daily Cases', color=color)  # we already handled the x-label with ax1\nsns.lineplot(data=UK_AND_NATIONS[UK_AND_NATIONS['areaName']=='United Kingdom'],\n             x=UK_AND_NATIONS[UK_AND_NATIONS['areaName']=='United Kingdom'].index,\n             y='New_Deaths_7_day_average',color=color,linestyle='--',ax=ax2)\nax2.tick_params(axis='y', labelcolor=color)\nax2.set_ylim(0)\nplt.savefig('UK_Cases_and_Rate_of_Change.jpg',dpi=300)\nplt.show","0787cdd2":"f, ax1 = plt.subplots(figsize=(15,6))\n\ncolor1 = 'blue'\nsns.lineplot(data=UK_AND_NATIONS[UK_AND_NATIONS['areaName']=='United Kingdom'],\n             x=UK_AND_NATIONS[UK_AND_NATIONS['areaName']=='United Kingdom'].index,\n             y=\"CFR_Moving\",color=color1)\nplt.title('7-day Rolling Case Fatality Rate (%) and New Daily Deaths in the United Kingdom')\nax1.grid(linestyle=':', linewidth='0.5')\nax1.tick_params(axis='y', labelcolor=color1)\nax1.set_ylabel('Case Fatality Rate (7-day rolling)', color=color1)\nax1.set_xlim(date.fromisoformat('2020-03-01'),UK_AND_NATIONS.index[-2])\nax1.set_ylim(0,10)\n\n# Second axis (Vaccine introduction)\n\nax2 = ax1.twinx()\ncolor = 'red'\n\nsns.lineplot(data=UK_AND_NATIONS[UK_AND_NATIONS['areaName']=='United Kingdom'],\n             x=UK_AND_NATIONS[UK_AND_NATIONS['areaName']=='United Kingdom'].index,\n             y='New_Deaths_7_day_average',color=color,linestyle='--',ax=ax2)\nax2.tick_params(axis='y', labelcolor=color)\nax2.set_ylabel('New Daily Deaths (7-day rolling)', color=color)  # we already handled the x-label with ax1\nax2.set_ylim(0)\nplt.savefig('UK_CFR_Rolling.jpg',dpi=300)\nplt.show","634a9087":"# UK Total New Confirmed Cases and Rate of Change (for context)\n______________________________________________________________________________","87c378cd":"# COVID-19 UK - Case Fatality Rate (CFR) Over Time","eb8f51a3":"**Case Fatality Rate**","810ca609":"![](.\/UK_CFR_Rolling.jpg)","e0e75ad4":"Definitions\n\nCase Fatality Rate (CFR): Divide Daily New Deaths (7-day rolling mean) by Daily New Cases (7-day rolling mean) from 13 days before\n\n13 days was chosen as the offset between the deaths and cases because this is the time-lag between peak deaths and cases in the UK. This also corresponds well to the typical time between symptom onset and death in the UK (see [link](https:\/\/assets.publishing.service.gov.uk\/government\/uploads\/system\/uploads\/attachment_data\/file\/928729\/S0803_CO-CIN_-_Time_from_symptom_onset_until_death.pdf))","8c391c30":"Despite the success of the UK vaccine roll-out in the UK, the back end of 2021 has still seen very high recorded cases relative to even the worst periods of the pandemic. However, the number of deaths recorded within 28-days of a positive test seems to have fallen significantly as a proportion of positive cases. \n\nThis is a notebook looking at the 'Case Fatality Rate' (the number of COVID deaths as a percentage of the number of confirmed COVID cases) in the UK over the course of the pandemic to see if this metric shows anything interesting, and in particular to track how the increasing prevalence of the Omicron variant and the UK's Vaccine Booster drive may affect it. \n\nThe data is from the [UK COVID-19 Dataset](https:\/\/www.kaggle.com\/vascodegama\/uk-covid19-data) so unfortunately the cases represent ALL COVID-19 confirmed cases regardless of the variant. Our World in Data does have data on variant prevalence in the UK, however it is somewhat behind the curve as Omicron is estimated to make up 50-60% of cases in the UK by the end of Week 50, 2021.\n\nThere is some redundancy in the code (and it's a bit messy!) because I have forked this from my own extended work on COVID-19 in the UK, which can be found here: [UK COVID-19: Cases, Deaths, Vaccines, Regions](https:\/\/www.kaggle.com\/vascodegama\/uk-covid-19-cases-deaths-vaccines-regions)\n\nAny questions\/comments let me know!","1af2af23":"# Load Data and Create DataFrames\n______________________________________________________________________________","aee9b542":"# Imports\n______________________________________________________________________________"}}