{"cell_type":{"b9cadc96":"code","8d564287":"code","a6c70556":"code","4583681d":"code","716ec0d6":"code","be8c0473":"code","2a244134":"code","5d35bd1e":"code","1127f25d":"code","a83e6416":"code","57e2c026":"code","adc4999b":"code","48830784":"code","43672b86":"code","0942fe8c":"code","fa5c0e29":"code","cbb3bfa2":"code","b773cb0a":"code","590f546d":"code","e7cfcf20":"code","9d0b8913":"code","e20a9a9f":"code","952a0612":"code","a3bfc579":"code","d816456e":"code","d54fd323":"code","bfe8de17":"code","8bfc938a":"code","0f4b27d9":"code","853fd873":"code","5fde6536":"code","11f9bfa8":"code","e50061de":"code","ad98ca40":"code","dc87d84d":"code","5eaf0f08":"code","50517141":"markdown","d79eed08":"markdown","88e65017":"markdown","cef24a91":"markdown","890ce301":"markdown","702b74c5":"markdown"},"source":{"b9cadc96":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8d564287":"#to display all the columns\npd.set_option('display.max_columns', None)","a6c70556":"#loading datasets\ndf1 = pd.read_csv('\/kaggle\/input\/flight-delay-prediction\/Jan_2020_ontime.csv')\ndf2 = pd.read_csv('\/kaggle\/input\/flight-delay-prediction\/Jan_2019_ontime.csv')","4583681d":"#concatenating both the datasets\nframes = [df1, df2]\n\ndf = pd.concat(frames)\n\ndf.reset_index(drop=True, inplace=True)","716ec0d6":"#dealing with empty rows\ndf.drop(['Unnamed: 21'], axis=1, inplace=True)\ndf = df.fillna(method ='pad')","be8c0473":"#differentiating distance \n\nlow_dist = df[(df['DISTANCE']<=1000) & (df['CANCELLED']==1.0)]['CANCELLED'].count()\nmid_dist = df[((df['DISTANCE']> 1000) & (df['DISTANCE']<=2000)) & (df['CANCELLED']==1.0)]['CANCELLED'].count()\nhigh_dist = df[(df['DISTANCE']> 2000) & (df['CANCELLED']==1.0)]['CANCELLED'].count()","2a244134":"df[(df['DISTANCE']<=1000)& (df['CANCELLED']==0)]","5d35bd1e":"#plotting distance into pie-chart\n\nlabels = ['low','mid','high']\ndata  = [low_dist,mid_dist,high_dist]\n\nplt.rcParams['figure.figsize'] = (15,9)\n\nplt.pie(data, labels = labels,explode=(0, 0.3, 0.9),autopct='%1.1f%%',shadow=True)\nplt.axis('equal')\nplt.title(\"Canceled Hotel Percent by Type\", fontsize=20)\nplt.show()","1127f25d":"#differentiating departure time\nlow_dep = df[(df['DEP_TIME']<=1000) & (df['CANCELLED']==1.0)]['CANCELLED'].count()\nmid_dep = df[((df['DEP_TIME']> 1000) & (df['DEP_TIME']<=2000)) & (df['CANCELLED']==1.0)]['CANCELLED'].count()\nhigh_dep = df[(df['DEP_TIME']> 2000) & (df['CANCELLED']==1.0)]['CANCELLED'].count()","a83e6416":"labels = ['low','mid','high']\ndata  = [low_dep,mid_dep,high_dep]\n\nplt.rcParams['figure.figsize'] = (15,9)\n\nplt.pie(data, labels = labels,explode=(0, 0.1, 0.1),autopct='%1.1f%%',shadow=True)\nplt.axis('equal')\nplt.title(\"Canceled Hotel Percent by Type\", fontsize=20)\nplt.show()","57e2c026":"#data with cancelled flights\n\ncancel =  df[df['CANCELLED']==1.0]","adc4999b":"cancel.groupby('DEP_TIME').count()","48830784":"#day with most number of cancelled flights\n\nmonth_cancel = cancel.groupby('DAY_OF_MONTH')['CANCELLED'].count()\nsns.barplot(x = month_cancel.index , y = month_cancel.values,palette = 'bone')","43672b86":"def cancel_func(column):\n    org_cancel = cancel.groupby(column)['CANCELLED'].count()\n    org_cancel = org_cancel[org_cancel >400]\n    sns.barplot(x = org_cancel.index , y = org_cancel.values)","0942fe8c":"#flight cancelation by origin\ncancel_func('ORIGIN')","fa5c0e29":"#flight cancelation by origin\ncancel_func('DEST')","cbb3bfa2":"#cancelation by op_carrier\ncarrier_cancel = cancel.groupby('OP_CARRIER')['CANCELLED'].count()\nsns.barplot(x = carrier_cancel.index , y = carrier_cancel.values, palette = 'Wistia')","b773cb0a":"df1 = df[['OP_CARRIER','ORIGIN','DEST','DAY_OF_MONTH','DEP_TIME','ARR_TIME','DISTANCE','CANCELLED']]\ndf1.head()","590f546d":"from sklearn import preprocessing","e7cfcf20":"label_encoder = preprocessing.LabelEncoder()\n","9d0b8913":"df1['OP_CARRIER']= label_encoder.fit_transform(df1['OP_CARRIER'])\ndf1['ORIGIN']= label_encoder.fit_transform(df1['ORIGIN'])\ndf1['DEST']= label_encoder.fit_transform(df1['DEST'])","e20a9a9f":"X = df1.drop('CANCELLED', axis=1)\ny = df1.CANCELLED","952a0612":"from imblearn.under_sampling import NearMiss","a3bfc579":"nm = NearMiss()","d816456e":"X_res, y_res = nm.fit_sample(X,y.ravel())","d54fd323":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score","bfe8de17":"X_train, X_test, y_train, y_test = train_test_split(\n    X_res, y_res, test_size=0.3, random_state=101)","8bfc938a":"from sklearn.tree import DecisionTreeClassifier\nalgo = DecisionTreeClassifier()\nalgo.fit(X_train, y_train)","0f4b27d9":"predict_test = algo.predict(X_test)","853fd873":"accuracy_score(y_test,predict_test)","5fde6536":"from sklearn.neighbors import KNeighborsClassifier\nclassifier = KNeighborsClassifier(n_neighbors = 8)\nclassifier.fit(X_train, y_train)","11f9bfa8":"y_pred = classifier.predict(X_test)","e50061de":"accuracy_score(y_test,y_pred)","ad98ca40":"from sklearn.naive_bayes import GaussianNB\nGNBclf = GaussianNB()\nmodel = GNBclf.fit(X_train, y_train)","dc87d84d":"y_pred = model.predict(X_test)","5eaf0f08":"accuracy_score(y_test,y_pred)","50517141":"# Decision Tree","d79eed08":"# Naive Bayes","88e65017":"# Data Preprocessing","cef24a91":"# Training Data","890ce301":"# KNN","702b74c5":"Thank You."}}