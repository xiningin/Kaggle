{"cell_type":{"c72c0538":"code","1418972f":"code","32cbc023":"code","470bf5e0":"code","ca64bb10":"code","09dfe2be":"code","8e2ddceb":"code","0e483221":"code","63d265f7":"code","b1e3d612":"code","8d1ebc1e":"code","0b9a6821":"code","925edb9d":"code","18ea5d98":"code","5618f980":"code","bcc0c477":"code","08576a0e":"code","5306c32d":"code","c4876deb":"code","86fd54c7":"code","8dabec4e":"code","42451059":"code","5e2b1259":"code","992efa4a":"code","8d666dfe":"code","b2883fa9":"code","0db28480":"markdown"},"source":{"c72c0538":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn import linear_model # regression model\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","1418972f":"# import the data\nnew_data = pd.read_csv('..\/input\/2015.csv')","32cbc023":"var_cols = ['MENTHLTH', 'SEX', '_AGEG5YR', 'EDUCA', 'EMPLOY1', 'INCOME2', '_RACE', 'NUMADULT', 'MARITAL', 'VETERAN3', 'PREGNANT', \n            'ADPLEASR', 'ADDOWN', 'ADSLEEP', 'ADENERGY', 'ADEAT1', 'ADFAIL', 'ADTHINK', 'ADMOVE']\n\nsk_data = pd.DataFrame(new_data, columns = var_cols)\n\n# MENTHLTH code: [77, 99]\nsk_data['MENTHLTH'].replace([77, 99], np.nan, inplace=True)\nsk_data['MENTHLTH'].replace(88, 0, inplace=True)\n\n# _AGEG5YR code: 14 is 'missing\/refuse to answer'\nsk_data['_AGEG5YR'].replace(14, np.nan, inplace=True)\n\n# EDUCA code: 9 is 'refuse to answer'\nsk_data['EDUCA'].replace(9, np.nan, inplace=True)\n\n# EMPLOY1 code: 9 is 'refuse to answer'\nsk_data['EMPLOY1'].replace(9, np.nan, inplace=True)\n\n# INCOME2 code: [77, 99] is 'refuse to answer\/don't know'\nsk_data['INCOME2'].replace([77, 99], np.nan, inplace=True)\n\n# _RACE code: 9 is 'don't know\/refuse to answer\/not sure'\nsk_data['_RACE'].replace(9, np.nan, inplace=True)\n\n# MARITAL code: 9 is 'refuse to answer'\nsk_data['MARITAL'].replace(9, np.nan, inplace=True)\n\n# VETERAN3 code: [7, 9] is 'don't know\/refused'\nsk_data['VETERAN3'].replace([7, 9], np.nan, inplace=True)\n\n# PREGNANT code: [7, 9] is 'don't know\/refused'\nsk_data['PREGNANT'].replace([7, 9], np.nan, inplace=True)\n\n##########\n\nfor i in var_cols[11:]:\n    sk_data[i].replace([77, 99], np.nan, inplace=True)\n    sk_data[i].replace(88, 0, inplace=True)\n\nsk_data.head(10)","470bf5e0":"# Normalize \/ Transform to prevent prediction of negative values\n# Ensure outputs are 0 to 14\n# Use logistic transform f(x) = 14 \/ (1 + e^(-x))\n# Inverse: f^(-1) = -log(14 \/ y - 1)\n\ndef logistic_inverse(y):\n    threshold = 3\n    if y == 0:\n        return -threshold\n    elif y == 14:\n        return threshold\n    return -np.log(14 \/ y-1)\n\ndef logistic(x):\n    return 13 \/ (1 + np.exp(-x))\n\n# We want the threshold value to be larger than the next largest value, but not too much.\nprint([logistic_inverse(x) for x in np.arange(15)])","ca64bb10":"sk_data.shape","09dfe2be":"# drop nulls from ['MENTHLTH':'PREGNANT']\nsk_data = sk_data.dropna(axis=0, subset=var_cols[:10]).reset_index(drop=True)\nsk_data.head()\nprint(sk_data.shape)","8e2ddceb":"def isPregnant(x):\n    if x['SEX'] == 1 or (x['_AGEG5YR'] >= 6 and x['_AGEG5YR'] <= 13):\n        return 2\n    else:\n        return x['PREGNANT']\n\nsk_data['PREGNANT'] = sk_data.apply(isPregnant, axis=1)\nprint('Missing values from PREGNANT:', sk_data['PREGNANT'].isnull().sum())\nsk_data['PREGNANT'].value_counts()","0e483221":"###########\n# Evaluation via train\/test set\n\nsrc_data = sk_data.copy()\n\ncols = var_cols[11:]\nquestions = pd.DataFrame(src_data, columns=cols)\nsrc_data.drop(cols, axis = 1, inplace=True)\nsrc_data.drop('MENTHLTH', axis=1, inplace=True)\n\n# Convert to dummy\nfor i in src_data.columns[::-1]:\n    dummy_data = pd.get_dummies(src_data[i], prefix=i) # Convert col to dummy\n    src_data.drop(i, axis=1, inplace=True) # Drop the original col\n    src_data = dummy_data.join(src_data) # append dummies to src\nsrc_data = src_data.join(questions) # append back the 8 questions","63d265f7":"print(\"Shape:\", src_data.shape)\nsrc_data.head()","b1e3d612":"model_data = src_data.dropna().reset_index(drop=True)\nprint(\"Shape:\", model_data.shape)\nmodel_data.head()","8d1ebc1e":"from sklearn.model_selection import train_test_split\ntrain_data, test_data = train_test_split(model_data, test_size=0.15)\ntrain_data.head()","0b9a6821":"test_data.head()","925edb9d":"input_vars = train_data.columns[:68]\noutput_vars = train_data.columns[68:]\n\ntrain_input = train_data[input_vars]\ntrain_output = train_data[output_vars]\ntrain_input.head()","18ea5d98":"# Fit the data to the model\nregr = linear_model.LinearRegression()\n# regr.fit(train_input, train_output)\n\n# In order to bound the output with 0 and 14, we need to perform a logistic transform\ntrain_output_transformed = pd.DataFrame()\nfor col in output_vars:\n    train_output_transformed[col] = train_output[col].apply(logistic_inverse)\ntrain_output_transformed.head()\nregr.fit(train_input, train_output_transformed)","5618f980":"test_data_copy = test_data.copy()\ntest_data_copy.head()","bcc0c477":"for i in test_data_copy.index:\n    test_data_copy.loc[i, np.random.choice(output_vars, size=2, replace=False)] = np.nan\n    # Randomly set 2 values to null\ntest_data_copy.head()","08576a0e":"test_data.head()","5306c32d":"pred_cols = var_cols[11:]\npred_cols = [i + '_prediction' for i in pred_cols]\n\npred_transformed = regr.predict(test_data_copy[input_vars])\npred_transformed = pd.DataFrame(pred_transformed, columns=output_vars)\n# we need to transform the logistic values back to [0, 14]\npred = pd.DataFrame()\nfor col in output_vars:\n    new_col = col + \"_prediction\"\n    pred[new_col] = pred_transformed[col].apply(logistic)\npred = pred.round(0)\npred.head()","c4876deb":"pred.describe()","86fd54c7":"test_data_impute = test_data.copy().reset_index(drop=True)\ntest_data_impute.head()","8dabec4e":"test_data_impute = test_data_impute.join(pred)\ntest_data_impute.head()","42451059":"error_cols = var_cols[11:]\nerror_cols = [i + '_error' for i in error_cols]\nerror_cols","5e2b1259":"for i in range(8):\n    test_data_impute[error_cols[i]] = (test_data_impute[var_cols[(11+i)]] - test_data_impute[pred_cols[i]])**2\n\ntest_data_impute.head()","992efa4a":"len(test_data_copy.index) * 2","8d666dfe":"np.sum(np.sum(pd.isnull(test_data_copy.loc[:, var_cols[11:]])))","b2883fa9":"error_sum = np.sum(np.sum(test_data_impute[error_cols]))\nerror_n = np.sum(np.sum(pd.isnull(test_data_copy.loc[:, var_cols[11:]])))\n\nprint('error sum:', error_sum, '\\nerror n:', error_n)\nprint(\"Mean square error:\", error_sum \/ error_n)","0db28480":"### Imputing Via Linear Regression Model with sklearn\n#### [Example Model](https:\/\/scikit-learn.org\/stable\/auto_examples\/linear_model\/plot_ols.html)\n\n#### [Doc](https:\/\/scikit-learn.org\/stable\/documentation.html)\n\n#### [BRFSS Handbook](https:\/\/www.cdc.gov\/brfss\/annual_data\/2015\/pdf\/codebook15_llcp.pdf)"}}