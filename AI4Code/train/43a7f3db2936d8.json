{"cell_type":{"0dca7474":"code","8c06bed6":"code","ca14170b":"code","6f467ffe":"code","86b9b418":"code","cdc810b4":"code","359c82b9":"code","5247a30c":"code","31aee934":"markdown","5f4ecfad":"markdown","84b8c169":"markdown","dc1b84e9":"markdown","8eb298e0":"markdown"},"source":{"0dca7474":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8c06bed6":"# Import helpful libraries\nimport pandas as pd\nimport pickle\nfrom lightgbm import LGBMRegressor\nfrom sklearn.model_selection import StratifiedKFold \n\n#Importing pickle files\nwith open('\/kaggle\/input\/ubiquanttrainpicklefile\/train.pickle', 'rb') as f:\n    train_full = pickle.load(f)\n","ca14170b":"#Create y_train,X_train_full\n#y_train=X_train_full.target\n#X_train_full.drop(['target'], axis=1, inplace=True)","6f467ffe":"train_full.shape","86b9b418":"#y_train.shape","cdc810b4":"train_full.head()","359c82b9":"seed = 0\nfolds = 3\nmodels = []\nfeatures = [f'f_{i}' for i in range(300)]\ntarget = 'target'\n\nskf = StratifiedKFold(folds, shuffle = True, random_state = seed)\n\nfor train_index, test_index in skf.split(train_full, train_full['investment_id']):\n    train = train_full.iloc[train_index]\n    valid = train_full.iloc[test_index]\n    \n    lgbm = LGBMRegressor(\n        num_leaves=2 ** np.random.randint(3, 8),\n        learning_rate = 10 ** (-np.random.uniform(0.1,2)),\n        n_estimators = 1000,\n        min_child_samples = 1000, \n        subsample=np.random.uniform(0.5,1.0), \n        subsample_freq=1,\n        n_jobs= -1\n    )\n\n    lgbm.fit(train[features], train[target], eval_set = (valid[features], valid[target]), early_stopping_rounds = 10)\n    models.append(lgbm)","5247a30c":"import ubiquant\nenv = ubiquant.make_env()   # initialize the environment\niter_test = env.iter_test()    # an iterator which loops over the test set and sample submission\nfor (test_df, sample_prediction_df) in iter_test:\n    \n    test_df['target']  = 0\n    \n    for lgbm in models:\n        test_df['target'] += lgbm.predict(test_df[features])\n    test_df['target'] \/= len(models)\n    env.predict(test_df[['row_id','target']])","31aee934":"# 2.LGBM","5f4ecfad":"- The original data is too large to load, so we will load the Pickle file created in [this note](https:\/\/www.kaggle.com\/shashimo\/ubiquant-how-to-make-pickle-file).","84b8c169":"# 1.Create a dataset that will be used in this analyses","dc1b84e9":"# 0.Import libraries and pickle file","8eb298e0":"- This notebook is simple baseline with LGBM\n- I used [this note](https:\/\/www.kaggle.com\/ilialar\/ubiquant-eda-and-baseline) as a reference.\n- Don't forget to disable Internet access!"}}