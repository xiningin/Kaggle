{"cell_type":{"e64bf84c":"code","01a73348":"code","3b808cab":"code","c99de406":"code","de64dace":"code","027ec3e0":"code","f644d555":"markdown","a61246ed":"markdown","3e80b9f5":"markdown"},"source":{"e64bf84c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport seaborn as sn\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","01a73348":"Train_Path = \"..\/input\/train.csv\"\nColumn_Header = pd.read_csv(Train_Path, nrows=55)\nColumn_Header.info()\n","3b808cab":"df = pd.read_csv(Train_Path, usecols=(Column_Header.select_dtypes(include=\"object\").columns))\nDV = pd.read_csv(Train_Path, usecols=[\"HasDetections\"])\ndf.drop([\"MachineIdentifier\"], axis=1, inplace=True)","c99de406":"for i, col in enumerate(df.columns):\n\n    try:\n        Value = (pd.isna(df[col]).value_counts().loc[True]\/len(df))*100\n\n        print(col, \" % of null values: \",Value,\"%\")\n        \n        Missing_Value = df[col].mode().values\n\n        df[col].fillna(Missing_Value[0], axis=0, inplace=True)\n        print(\"Updated; \", col)\n        \n    except:\n        pass\n    ","de64dace":"df_C = pd.concat((df,DV),axis=1)\n","027ec3e0":"for i, col in enumerate(df_C.select_dtypes(include=\"object\").columns):\n        \n    df_Desc = df_C[col].describe(include='all')\n    \n    if df_Desc[\"unique\"] > 20:\n        #pass\n        #print(i, \" \", col)\n\n        Temp = df_C[[\"HasDetections\",col]]\n        #Creates column of 1s\n        Temp[\"Val\"] = 1\n        \n        #Creates a pivot table with catergories as rows and DV as columns\n        Pivot = pd.pivot_table(Temp, values=[\"Val\"], index=[col], \n                       columns=[\"HasDetections\"], aggfunc=np.sum)\n        \n        #Plots this on a bar graph sort by 0 and with top 25 values\n        Total = Pivot.sort_values([('Val', 0)], ascending=False).head(25)\n        \n       \n        plt.figure(i, figsize=(7,5))\n        DV_1_G = plt.barh(Total['Val', 1].index, Total['Val', 1].values, alpha=0.4)\n        DV_0_G = plt.barh(Total['Val', 0].index, Total['Val', 0].values, alpha=0.4)\n        #plt.xticks( rotation='vertical' )\n        plt.title(col)\n        plt.legend((DV_1_G, DV_0_G), (\"DV = 1\", \"DV = 0\"))\n        plt.show()\n        \n        #print(DV_1)\n        \n    else:\n        #print(i, \" \", col)\n        \n        DV_1 = df_C[col].loc[df_C[\"HasDetections\"]==1].value_counts()\n        DV_1 = (DV_1\/DV_1.sum())*100\n        \n        DV_0 = df_C[col].loc[df_C[\"HasDetections\"]==0].value_counts()\n        DV_0 = (DV_0\/DV_0.sum())*100\n        \n        plt.figure(i, figsize=(7,5))\n        DV_1_G = plt.barh(DV_1.index, DV_1.values, alpha=0.4)\n        DV_0_G = plt.barh(DV_0.index, DV_0.values, alpha=0.4)\n        plt.title(col)\n        plt.legend((DV_1_G, DV_0_G), (\"DV = 1\", \"DV = 0\"))\n        plt.show()\n        \n        #print(DV_1)\n        ","f644d555":"How many missing values does the dataset have?\n\nThis a simple fix by using the mode of the feature to fill in the missing values.","a61246ed":"Certain features such as AppVersion, EngineVersion and AvSigVersion have different distribution for malware vs no maleware therefore they could make good features for modelling.","3e80b9f5":"I only want to load in categorical data"}}