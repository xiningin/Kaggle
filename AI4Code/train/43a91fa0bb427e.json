{"cell_type":{"c17daebc":"code","9bac046e":"code","dc20a376":"code","cff9acc8":"code","5cbf9081":"code","a3c28968":"code","7120b71a":"code","671a7e50":"code","f4c92b04":"code","a1db2d50":"code","52c5b749":"code","a395c443":"code","4697ff7c":"code","10caf7c3":"code","ed61811b":"code","faca6d8a":"code","ab61cd2d":"code","433ae05c":"code","4f4195d8":"code","6fd3c743":"code","a9f87324":"code","e06923db":"code","c68648b8":"code","056da7d3":"code","1aa5edfd":"code","8fb41dc2":"code","a16855eb":"markdown","2f324adc":"markdown","9a1a41e9":"markdown"},"source":{"c17daebc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9bac046e":"df  = pd.read_csv(\"\/kaggle\/input\/top50spotify2019\/top50.csv\",encoding='latin1')","dc20a376":"df.head()","cff9acc8":"df.columns.to_list()","5cbf9081":"### total tracks\nlen(df)","a3c28968":"for val in df.columns:\n    print(val)\n    print(df[val].unique())\n    print(\"*\"*50)","7120b71a":"df_bpm = df.sort_values(by=['Beats.Per.Minute'])","671a7e50":"import matplotlib.pyplot as plt\nimport pandas as pd\n\ndff = pd.DataFrame({\"Track.Name\": df['Track.Name'],\n                   \"Beats.Per.Minute\" : df['Beats.Per.Minute'],\n                   \"Popularity\" : df['Popularity'] })\ndff.plot(x=\"Track.Name\", y=[\"Beats.Per.Minute\", \"Popularity\"],figsize=(20,5), grid=True)\nplt.show()","f4c92b04":"df_energy = df.sort_values(by=['Energy'])\ndff = pd.DataFrame({\"Track.Name\": df['Track.Name'],\n                   \"Energy\" : df['Energy'],\n                   \"Popularity\" : df['Popularity'] })\ndff.plot(x=\"Track.Name\", y=[\"Energy\", \"Popularity\"],figsize=(20,5), grid=True)\nplt.show()","a1db2d50":"df_energy = df.sort_values(by=['Danceability'])\ndff = pd.DataFrame({\"Track.Name\": df['Track.Name'],\n                   \"Danceability\" : df['Danceability'],\n                   \"Popularity\" : df['Popularity'] })\ndff.plot(x=\"Track.Name\", y=[\"Danceability\", \"Popularity\"],figsize=(20,5), grid=True)\nplt.show()","52c5b749":"df.columns","a395c443":"df_energy = df.sort_values(by=['Loudness..dB..'])\ndff = pd.DataFrame({\"Track.Name\": df['Track.Name'],\n                   \"Loudness..dB..\" : df['Loudness..dB..'],\n                   \"Popularity\" : df['Popularity'] })\ndff.plot(x=\"Track.Name\", y=[\"Loudness..dB..\", \"Popularity\"],figsize=(20,5), grid=True)\nplt.show()","4697ff7c":"df_energy = df.sort_values(by=['Liveness'])\ndff = pd.DataFrame({\"Track.Name\": df['Track.Name'],\n                   \"Liveness\" : df['Liveness'],\n                   \"Popularity\" : df['Popularity'] })\ndff.plot(x=\"Track.Name\", y=[\"Liveness\", \"Popularity\"],figsize=(20,5), grid=True)\nplt.show()","10caf7c3":"df.columns","ed61811b":"df_energy = df.sort_values(by=['Valence.'])\ndff = pd.DataFrame({\"Track.Name\": df['Track.Name'],\n                   \"Valence.\" : df['Valence.'],\n                   \"Popularity\" : df['Popularity'] })\ndff.plot(x=\"Track.Name\", y=[\"Valence.\", \"Popularity\"],figsize=(20,5), grid=True)\nplt.show()","faca6d8a":"df_energy = df.sort_values(by=['Length.'])\ndff = pd.DataFrame({\"Track.Name\": df['Track.Name'],\n                   \"Length.\" : df['Length.'],\n                   \"Popularity\" : df['Popularity'] })\ndff.plot(x=\"Track.Name\", y=[\"Length.\", \"Popularity\"],figsize=(20,5), grid=True)\nplt.show()","ab61cd2d":"df_energy = df.sort_values(by=['Acousticness..'])\ndff = pd.DataFrame({\"Track.Name\": df['Track.Name'],\n                   \"Acousticness..\" : df['Acousticness..'],\n                   \"Popularity\" : df['Popularity'] })\ndff.plot(x=\"Track.Name\", y=[\"Acousticness..\", \"Popularity\"],figsize=(20,5), grid=True)\nplt.show()\n","433ae05c":"df_energy = df.sort_values(by=['Speechiness.'])\ndff = pd.DataFrame({\"Track.Name\": df['Track.Name'],\n                   \"Speechiness.\" : df['Speechiness.'],\n                   \"Popularity\" : df['Popularity'] })\ndff.plot(x=\"Track.Name\", y=[\"Speechiness.\", \"Popularity\"],figsize=(20,5), grid=True)\nplt.show()\n","4f4195d8":"df","6fd3c743":"## Songs which are featured by the Other artists","a9f87324":"df['Track.Name'] = df['Track.Name'].str.lower()","e06923db":"featured_songs = df[df['Track.Name'].str.contains(\"feat\")]","c68648b8":"featured_songs","056da7d3":"single_artist_songs = df[df[\"Track.Name\"].str.contains('feat') == False]\n","1aa5edfd":"single_artist_songs.head()","8fb41dc2":"# Popularity of the individual artist songs and featured songs\nfig, axes = plt.subplots(nrows=1, ncols=2, figsize=(5, 3))\naxes[0].scatter(featured_songs.index, featured_songs['Popularity'])\naxes[1].scatter(single_artist_songs.index, single_artist_songs['Popularity'])\nfig.tight_layout()","a16855eb":"**Lets look into the variables**","2f324adc":"### The below graph clearly describes the effect of the Popularity over the BPM of the song.","9a1a41e9":"## Let's look into the Songs with the fastest BPM."}}