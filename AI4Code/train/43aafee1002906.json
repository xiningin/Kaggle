{"cell_type":{"c6bae93f":"code","0e27c685":"code","723bf45f":"code","328c0685":"code","ebde4fca":"code","c0cb5ebd":"code","982fa621":"code","081dec25":"code","3d7616fe":"code","2e334d79":"code","1a5a7676":"code","e83817c7":"code","9dd9b00d":"code","22517fc0":"code","615ba9ac":"code","31db01da":"code","981378b1":"code","16a33fbd":"code","120b663d":"code","61dfe3fe":"code","cfe90468":"code","bccc403d":"code","b73033f4":"code","bd87ea04":"code","e2550b8e":"code","0eba4acc":"code","2ff33710":"code","75346956":"code","4e4e5939":"code","a28ffe76":"code","4f513225":"code","7b379424":"code","ba9f9140":"code","ba248cc5":"code","f56ab7c5":"code","8e934d28":"code","f7302a84":"code","f03867ac":"code","b74eef22":"code","d9b460ff":"code","2cd08956":"code","1619f318":"code","ce6874cc":"code","d8f16422":"code","1a03ebbb":"code","97093be6":"code","947210ce":"code","4b804832":"code","fadff09e":"code","16afbd7d":"code","18ab81e9":"code","9309158e":"code","c6552970":"code","fc49ffe8":"code","ce362120":"code","b713ee81":"code","2daeb933":"code","c50d51ed":"code","f078b4be":"code","49f5e120":"code","75573cd7":"code","6c1538f5":"code","e435d315":"code","845862c2":"markdown","4fed581f":"markdown","13ef0fc2":"markdown","ff4ec00f":"markdown","428436f1":"markdown","34539a28":"markdown","5c1d2b98":"markdown","ce997690":"markdown","6372c2cf":"markdown","0f93d6b2":"markdown","e86b0ac7":"markdown","1a04516e":"markdown","8da6caf4":"markdown","42640826":"markdown","04eaa798":"markdown","66c28581":"markdown","eff4fa3c":"markdown","b5eab94c":"markdown","39775c49":"markdown","2a63c854":"markdown","2f97a099":"markdown"},"source":{"c6bae93f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","0e27c685":"cust_acq = pd.read_csv(\"..\/input\/creditcard\/Customer Acqusition.csv\")\ncust_repay = pd.read_csv(\"..\/input\/creditcard\/Repayment.csv\")\ncust_spend = pd.read_csv(\"..\/input\/creditcard\/spend.csv\")","723bf45f":"cust_acq.head()","328c0685":"cust_repay.head()","ebde4fca":"cust_spend.head()","c0cb5ebd":"cust_spend=cust_spend.drop([\"Sl No:\"],axis=1)\ncust_spend.head()","982fa621":"cust_repay=cust_repay.drop([\"Unnamed: 4\",\"SL No:\"],axis=1)\ncust_repay.dropna(inplace=True)\ncust_repay.head()","081dec25":"cust_acq.Age = np.where(cust_acq.Age<18, round(cust_acq.Age.mean()),cust_acq.Age)","3d7616fe":"#Creating a new dataframe by joining cust_acq & cust_spend on basis of Customer column\ncust_spend1 = pd.merge(left=cust_acq,right=cust_spend,on=\"Customer\",how=\"inner\")","2e334d79":"cust_spend1.head()","1a5a7676":"# Find number of observations where Spend amount is > then customer limit\ncust_spend1.loc[cust_spend1[\"Amount\"] > cust_spend1[\"Limit\"]]","e83817c7":"cust_spend1.loc[cust_spend1[\"Amount\"] > cust_spend1[\"Limit\"],\"Amount\"] = (50 * cust_spend1[\"Limit\"]\/100)","9dd9b00d":"cust_spend1.loc[cust_spend1[\"Amount\"] > cust_spend1[\"Limit\"]]","22517fc0":"#Creating a new dataframe by joining cust_acq & cust_repay on basis of Customer column\ncust_repay1 = pd.merge(left=cust_repay,right=cust_acq,on=\"Customer\",how=\"inner\")","615ba9ac":"cust_repay1.head()","31db01da":"# Find number of observations where Repay amount is > then customer limit\ncust_repay1[cust_repay1.Amount > cust_repay1.Limit]","981378b1":"cust_repay1.loc[cust_repay1.Amount > cust_repay1.Limit,\"Amount\"] = cust_repay1.Limit","16a33fbd":"cust_repay1[cust_repay1.Amount > cust_repay1.Limit]","120b663d":"distinct_cust = cust_acq.Customer.nunique()","61dfe3fe":"print(\"Total number of distinct customers are: \",distinct_cust)","cfe90468":"dist_cat = cust_acq.Segment.value_counts()","bccc403d":"print(\"Total distinct categories are: \",len(dist_cat),\"\\n Which are :\\n\",dist_cat)","b73033f4":"# First convert Month in cust_spend table to datetime object\ncust_spend.Month = pd.to_datetime(cust_spend.Month)\ncust_spend.info()","bd87ea04":"# New month and year column\ncust_spend['Monthly'] = cust_spend['Month'].apply(lambda x:pd.Timestamp.strftime(x,format=\"%b\"))\ncust_spend['Yearly'] = cust_spend['Month'].apply(lambda x:pd.Timestamp.strftime(x,format=\"%Y\"))","e2550b8e":"cust_spend.head()","0eba4acc":"# Using groupby function average monthly spend by customers for respective years\nout1 = cust_spend.groupby([\"Yearly\",\"Monthly\"]).mean()","2ff33710":"round(out1,2)","75346956":"# First convert Month in cust_repay table to datetime object\ncust_repay.Month = pd.to_datetime(cust_repay.Month)\ncust_repay.info()","4e4e5939":"# New month and year column\ncust_repay['Monthly'] = cust_repay['Month'].apply(lambda x:pd.Timestamp.strftime(x,format=\"%b\"))\ncust_repay['Yearly'] = cust_repay['Month'].apply(lambda x:pd.Timestamp.strftime(x,format=\"%Y\"))","a28ffe76":"cust_repay.head()","4f513225":"# Using groupby function average monthly repayment done by customers for respective years\nout2 = cust_repay.groupby([\"Yearly\",\"Monthly\"]).mean()\nround(out2,2)","7b379424":"# Merging all tables\n# 1. cust_spend1 is already merged table of cust_acq and cust_spend\n# 2. So merging cust_repay with cust_spend1\n\nfinal_cust = pd.merge(left=cust_spend1,right=cust_repay,on=\"Customer\",how=\"inner\")","ba9f9140":"final_cust.head(1)","ba248cc5":"# Renaming the columns of final_cust tabe\nfinal_cust.rename(columns={\"Amount_x\":\"Spend_Amount\",\"Amount_y\":\"Repay_Amount\"},inplace=True)","f56ab7c5":"final_cust.head(1)","8e934d28":"interest_amt = final_cust.groupby([\"Yearly\",\"Monthly\"])[\"Spend_Amount\",\"Repay_Amount\"].sum()","f7302a84":"interest_amt","f03867ac":"interest_amt[\"M_Profit\"] = interest_amt.Repay_Amount - interest_amt.Spend_Amount","b74eef22":"interest_amt","d9b460ff":"# As all profit amount is in positive.\ninterest_amt[\"M_interest\"] = interest_amt.M_Profit * 2.9\/100","2cd08956":"interest_amt","1619f318":"top_products = cust_spend.Type.value_counts().head(5)\ntop_products","ce6874cc":"city_spend = cust_spend1.groupby(\"City\")[\"Amount\"].sum()\nprint(city_spend.idxmax(),\" has max spend.\")","d8f16422":"# New column \"age_group\" with 8 bins between 18 to 88 \ncust_spend1[\"age_group\"] =  pd.cut(cust_spend1[\"Age\"],bins=np.arange(18,88,8),labels=[\"18-26\",\"26-34\", \"34-42\" ,\"42-50\" ,\"50-58\",\"58-66\",\"66-74\",\"74-82\"],include_lowest=True)\ncust_spend1.head(2)","1a03ebbb":"age_spend = cust_spend1.groupby(\"age_group\")[\"Amount\"].sum()\nprint(\"Age group (\",age_spend.idxmax(),\") has max spend.\")","97093be6":"cust_repay1.groupby(\"Customer\")[[\"Amount\"]].sum().sort_values(by=\"Amount\",ascending=False).head(10)","947210ce":"# Converting \"Month\" column to date time \ncust_spend1[\"Month\"] = pd.to_datetime(cust_spend1[\"Month\"])","4b804832":"# Creating new column \"year\" \ncust_spend1['Year'] = cust_spend1['Month'].apply(lambda x:pd.Timestamp.strftime(x,format=\"%Y\"))\ncust_spend1.head(2)","fadff09e":"out3 = pd.pivot_table(data = cust_spend1,index=[\"City\",\"Year\"],columns='Product',aggfunc=\"sum\",values=\"Amount\")","16afbd7d":"out3","18ab81e9":"out3.plot(kind=\"bar\",figsize=(18,5),width=0.8)\nplt.ylabel(\"Spend Amount\")\nplt.title(\"Amount spended by customers according to year and city\")\nplt.show()","9309158e":"# Creating column \"Monthly\" for graph \ncust_spend1['Monthly'] = cust_spend1['Month'].apply(lambda x:pd.Timestamp.strftime(x,format=\"%B\"))","c6552970":"out1a = cust_spend1.groupby([\"Monthly\",\"City\"])[[\"Amount\"]].sum().sort_index().reset_index()\nout1a =pd.pivot_table(data=cust_spend1,values='Amount',index='City',columns='Monthly',aggfunc='sum')\nout1a","fc49ffe8":"out1a.plot(kind=\"bar\",figsize=(20,7),width=0.8)\nplt.show()","ce362120":"spend_tickets = cust_spend1.groupby([\"Year\",\"Type\"])[[\"Amount\"]].sum().reset_index()","b713ee81":"out1b = spend_tickets.loc[spend_tickets[\"Type\"]==\"AIR TICKET\"]\nout1b","2daeb933":"plt.bar(out1b[\"Year\"],height=out1b[\"Amount\"],color=\"blue\")\nplt.xlabel(\"Year\")\nplt.ylabel(\"Amount Spent\")\nplt.title(\"Spend on air tickets\")\nplt.show()","c50d51ed":"out2a = pd.pivot_table(data=cust_spend1,index='Product',columns='Monthly',values='Amount',aggfunc='sum')","f078b4be":"out2a","49f5e120":"out2a.plot(kind=\"bar\",figsize=(18,6),width=0.8)\nplt.show()","75573cd7":"cust_repay1['Month'] = pd.to_datetime(cust_repay1['Month'])\n#creating new column \"Monthly\" and \"Yearly\" using already existing 'Month' column\ncust_repay1['Monthly'] = cust_repay1['Month'].apply(lambda x:pd.Timestamp.strftime(x,format=\"%B\"))\ncust_repay1['Yearly'] = cust_repay1['Month'].apply(lambda x:pd.Timestamp.strftime(x,format=\"%Y\"))","6c1538f5":"def top_cust(product,time_period):\n    print('Give the product name and time_period for which you want the data')\n    if product.lower()=='gold' and time_period.lower()=='monthly':\n        table3 = cust_repay1.pivot_table(index=['Product','City','Customer'],columns='Monthly',aggfunc='sum',values='Amount')\n        result = table3.loc[('Gold',['BANGALORE','COCHIN','CALCUTTA','BOMBAY','CHENNAI','TRIVANDRUM','PATNA','DELHI']),:]\n    elif product.lower()=='gold' and time_period.lower()=='yearly':\n        table3 = cust_repay1.pivot_table(index=['Product','City','Customer'],columns='Yearly',aggfunc='sum',values='Amount')\n        result = table3.loc[('Gold',['BANGALORE','COCHIN','CALCUTTA','BOMBAY','CHENNAI','TRIVANDRUM','PATNA','DELHI']),:]\n    elif product.lower()=='silver' and time_period.lower()=='monthly':\n        table3 = cust_repay1.pivot_table(index=['Product','City','Customer'],columns='Monthly',aggfunc='sum',values='Amount')\n        result = table3.loc[('Silver',['BANGALORE','COCHIN','CALCUTTA','BOMBAY','CHENNAI','TRIVANDRUM','PATNA','DELHI']),:]\n    elif product.lower()=='silver' and time_period.lower()=='yearly':\n        table3 = cust_repay1.pivot_table(index=['Product','City','Customer'],columns='Yearly',aggfunc='sum',values='Amount')\n        result = table3.loc[('Silver',['BANGALORE','COCHIN','CALCUTTA','BOMBAY','CHENNAI','TRIVANDRUM','PATNA','DELHI']),:]\n    if product.lower()=='platimum' and time_period.lower()=='monthly':\n        table3 = cust_repay1.pivot_table(index=['Product','City','Customer'],columns='Monthly',aggfunc='sum',values='Amount')\n        result = table3.loc[('Platimum',['BANGALORE','COCHIN','CALCUTTA','BOMBAY','CHENNAI','TRIVANDRUM','PATNA','DELHI']),:]\n    elif product.lower()=='platimum' and time_period.lower()=='yearly':\n        table3 = cust_repay1.pivot_table(index=['Product','City','Customer'],columns='Yearly',aggfunc='sum',values='Amount')\n        result = table3.loc[('Platimum',['BANGALORE','COCHIN','CALCUTTA','BOMBAY','CHENNAI','TRIVANDRUM','PATNA','DELHI']),:]\n    return result","e435d315":"top_cust(\"platimum\",\"yearly\")","845862c2":"### e. If the monthly rate of interest is 2.9%, what is the profit for the bank for each month?","4fed581f":"### h. Which age group is spending more money?","13ef0fc2":"### (d) What is the average monthly repayment by customers?","ff4ec00f":"### b. In case spend amount is more than the limit, replace it with 50% of that customer\u2019s limit.\n#### (customer\u2019s limit provided in acquisition table is the per transaction limit on his card)","428436f1":"### b. How many distinct categories exist?","34539a28":"## 4. Create graphs for\n### a. Monthly comparison of total spends, city wise","5c1d2b98":"### i. Who are the top 10 customers in terms of repayment?","ce997690":"## (5) Write user defined PYTHON function to perform the following analysis:\n### You need to find top 10 customers for each city in terms of their repayment amount by different products and by different time periods i.e. year or month. The user should be able to specify the product (Gold\/Silver\/Platinum) and time period (yearly or monthly) and the function should automatically take these inputs while identifying the top 10 customers.","6372c2cf":"## c. Incase the repayment amount is more than the limit, replace the repayment with the limit.","0f93d6b2":"### (b) Comparison of yearly spend on air tickets","e86b0ac7":"### (c) Comparison of monthly spend for each product (look for any seasonality that exists in terms of spend)","1a04516e":"### g. Which city is having maximum spend?","8da6caf4":"### c. What is the average monthly spend by customers?","42640826":"### Remove Unnamed: 4 from Repayment.csv and drop NaN numbers","04eaa798":"## 2. From the above dataset create the following summaries:\n### a. How many distinct customers exist?","66c28581":"## 3. Calculate the city wise spend on each product on yearly basis. Also include a graphical representation for the same.","eff4fa3c":"### Import Necessary Files","b5eab94c":"### Import Datasets","39775c49":"### f. What are the top 5 product types?","2a63c854":"### a. In case age is less than 18, replace it with mean of age values.","2f97a099":"## Credit card Data Analysis"}}