{"cell_type":{"5b13a5e2":"code","677b6c70":"code","fd082ee6":"code","2d583991":"code","04d9ea24":"code","5be6ea16":"code","67966404":"code","5da01ed9":"code","d642cbb2":"code","b824c30d":"code","193391a0":"markdown","682b8380":"markdown","7884af45":"markdown","a88500bb":"markdown","b72b939b":"markdown","308b7792":"markdown","eb30d616":"markdown","ded9e97a":"markdown","eaefdc75":"markdown"},"source":{"5b13a5e2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","677b6c70":"import glob\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n%matplotlib inline\n\ndata_dir = \"..\/input\/covid-19-x-ray-10000-images\/dataset\"\n\nnormal_images = [mpimg.imread(img_path) for img_path in glob.glob(data_dir+'\/normal\/*')]\ncovid_images = [mpimg.imread(img_path) for img_path in glob.glob(data_dir+'\/covid\/*')]\n\nplt.imshow(normal_images[0], cmap='gray')\nplt.figure()\nplt.imshow(covid_images[0], cmap='gray')","fd082ee6":"from keras_preprocessing.image import ImageDataGenerator\n\ntrain_datagen = ImageDataGenerator(rescale=1\/255, \n                                   horizontal_flip=True,\n                                   zoom_range=0.2,\n                                   height_shift_range=0.2,\n                                   width_shift_range=0.2,\n                                   fill_mode='nearest',\n                                   validation_split=0.25)\n\n\ntrain_generator = train_datagen.flow_from_directory(data_dir,\n                                                    target_size=(150,150),\n                                                    class_mode='binary',\n                                                    batch_size=3,\n                                                    subset='training')\nvalidation_generator = train_datagen.flow_from_directory(data_dir,\n                                                       target_size=(150,150),\n                                                       batch_size=3,\n                                                       class_mode='binary',\n                                                       subset='validation',\n                                                       shuffle=True)","2d583991":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.applications.inception_v3 import InceptionV3\n\n!wget --no-check-certificate \\\n    https:\/\/storage.googleapis.com\/mledu-datasets\/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5 \\\n    -O \/tmp\/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5","04d9ea24":"local_weights_file = '\/tmp\/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5'\n\npre_trained_model = InceptionV3(include_top=False, weights=None, input_shape=(150,150,3))\npre_trained_model.load_weights(local_weights_file)\n\nfor layer in pre_trained_model.layers:\n    layer.trainable=False\n\nlast_layer = pre_trained_model.get_layer('mixed7')\nlast_output = last_layer.output","5be6ea16":"from tensorflow.keras.optimizers import RMSprop\nfrom tensorflow import keras\n\n\nx = keras.layers.Flatten()(last_output)\n\nx = keras.layers.Dense(512, activation='relu')(x)\nx = keras.layers.Dropout(0.2)(x)\nx = keras.layers.Dense(1, activation='sigmoid')(x)\n\nmodel = keras.Model(inputs=pre_trained_model.input, outputs=x)","67966404":"model.compile(loss='binary_crossentropy',\n              optimizer=RMSprop(lr=0.0001),\n              metrics=['accuracy'])","5da01ed9":"history = model.fit(\n            train_generator,\n            validation_data = validation_generator,\n            epochs = 5,\n            verbose = 2)","d642cbb2":"import matplotlib.pyplot as plt\nacc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(len(acc))\n\nplt.plot(epochs, acc, 'r', label='Training accuracy')\nplt.plot(epochs, val_acc, 'b', label='Validation accuracy')\nplt.title('Training and validation accuracy')\nplt.legend(loc=0)\n\nplt.figure()\n\nplt.plot(epochs, loss, 'r', label='Training loss')\nplt.plot(epochs, val_loss, 'b', label='Validation loss')\nplt.title('Training and validation loss')\nplt.legend(loc=0)\n\nplt.show()","b824c30d":"import numpy as np\npred = model.predict(validation_generator)\npredicted_class_indices = np.argmax(pred,axis=1)\nlabels = dict((value,key) for key,value in validation_generator.class_indices.items())\npredictions = [labels[key] for key in predicted_class_indices]\nprint(predicted_class_indices)\nprint (labels)\nprint (predictions)","193391a0":"## **Importing Local weights**","682b8380":"## **Training**","7884af45":"## **Comparing the labels and predictions**","a88500bb":"## **Image Augmentation using ImageDataGenerator**","b72b939b":"## **Looking at the input images**","308b7792":"## **Plotting the loss and accuracy**","eb30d616":"## **Model Compilation**","ded9e97a":"## **Creating a pretrained model(Inception)**","eaefdc75":"## **Appending to the pretrained model**"}}