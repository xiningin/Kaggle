{"cell_type":{"8a4d559f":"code","0bee4042":"code","5e39f4d6":"code","e0109b1a":"code","103760cf":"code","c15fc009":"code","efb526f6":"code","03df2e11":"code","ad4cc767":"code","cdf87d94":"code","2f0a6a78":"code","1a8ea089":"code","cd2e2710":"code","45907c8a":"code","29412fa2":"code","0b119efe":"code","261e3986":"code","0ae1b892":"code","6262b12f":"code","c91be889":"code","51231618":"code","cc165e61":"code","f86bc15a":"code","efe1aacc":"code","9f3413e0":"code","52f1b36c":"code","240a7356":"code","85afbd34":"markdown","af2ce973":"markdown","ee12bf01":"markdown","33438057":"markdown","72316185":"markdown","08a6088c":"markdown","82ecf333":"markdown","1dfc4485":"markdown","772d61ac":"markdown","b2a616e3":"markdown","b7781c15":"markdown","c66eb254":"markdown","60711f87":"markdown","efc43e70":"markdown","94d17aa3":"markdown","f728d166":"markdown","393c8b9b":"markdown","22401e11":"markdown","9fe05282":"markdown","c86662f7":"markdown","d972b5c4":"markdown","0cccd2e4":"markdown","a00eaec5":"markdown","e51b2627":"markdown","78b9994f":"markdown","3fa5b37e":"markdown"},"source":{"8a4d559f":"import matplotlib.pyplot as plt\nimport matplotlib as mpl\nmpl.rcParams['figure.figsize'] = (10,10)\nmpl.rcParams['axes.grid'] = False\n\nimport numpy as np\nfrom PIL import Image\nimport time\nimport functools","0bee4042":"import tensorflow as tf\n\nfrom tensorflow.python.keras.preprocessing import image as kp_image\nfrom tensorflow.python.keras import models \nfrom tensorflow.python.keras import losses\nfrom tensorflow.python.keras import layers\nfrom tensorflow.python.keras import backend as K","5e39f4d6":"# If you get a tensorflow version error while using it, you should uncomment and run this code.\n# After Ctrl + Shift + P and confirm restart kernal \n\n# !pip install tensorflow==1.15.2\n# !pip install tensorflow-gpu==1.15.2\n# !pip install keras==2.2.4","e0109b1a":"print(tf.__version__)","103760cf":"import os\nimg_dir = '\/tmp\/nst'\nif not os.path.exists(img_dir):\n    os.makedirs(img_dir)\n!wget --quiet -P \/tmp\/nst\/ https:\/\/upload.wikimedia.org\/wikipedia\/commons\/d\/d7\/Green_Sea_Turtle_grazing_seagrass.jpg\n!wget --quiet -P \/tmp\/nst\/ https:\/\/upload.wikimedia.org\/wikipedia\/commons\/0\/0a\/The_Great_Wave_off_Kanagawa.jpg\n!wget --quiet -P \/tmp\/nst\/ https:\/\/upload.wikimedia.org\/wikipedia\/commons\/b\/b4\/Vassily_Kandinsky%2C_1913_-_Composition_7.jpg\n!wget --quiet -P \/tmp\/nst\/ https:\/\/upload.wikimedia.org\/wikipedia\/commons\/0\/00\/Tuebingen_Neckarfront.jpg\n!wget --quiet -P \/tmp\/nst\/ https:\/\/upload.wikimedia.org\/wikipedia\/commons\/6\/68\/Pillars_of_creation_2014_HST_WFC3-UVIS_full-res_denoised.jpg\n!wget --quiet -P \/tmp\/nst\/ https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/e\/ea\/Van_Gogh_-_Starry_Night_-_Google_Art_Project.jpg\/1024px-Van_Gogh_-_Starry_Night_-_Google_Art_Project.jpg\n\n## Test images\n!wget --quiet -P \/tmp\/nst\/ https:\/\/www.emrecetin.net\/download\/cio.jpg\n!wget --quiet -P \/tmp\/nst\/ https:\/\/www.emrecetin.net\/download\/test_ekip.jpg\n!wget --quiet -P \/tmp\/nst\/ https:\/\/www.emrecetin.net\/download\/test_emre.jpg\n\n","c15fc009":"tf.enable_eager_execution()\nprint(\"Eager execution: {}\".format(tf.executing_eagerly()))","efb526f6":"def load_img(path_to_img):\n  max_dim = 512\n  img = Image.open(path_to_img)\n  long = max(img.size)\n  scale = max_dim\/long\n  img = img.resize((round(img.size[0]*scale), round(img.size[1]*scale)), Image.ANTIALIAS)\n  \n  img = kp_image.img_to_array(img)\n  \n  # We need to broadcast the image array such that it has a batch dimension \n  img = np.expand_dims(img, axis=0)\n  return img","03df2e11":"def imshow(img, title=None):\n  # Remove the batch dimension\n  out = np.squeeze(img, axis=0)\n  # Normalize for display \n  out = out.astype('uint8')\n  plt.imshow(out)\n  if title is not None:\n    plt.title(title)\n  plt.imshow(out)","ad4cc767":"# Set up some global values here\ncontent_path = '\/tmp\/nst\/cio.jpg'\nstyle_path = '\/tmp\/nst\/The_Great_Wave_off_Kanagawa.jpg'","cdf87d94":"plt.figure(figsize=(10,10))\n\ncontent = load_img(content_path).astype('uint8')\nstyle = load_img(style_path).astype('uint8')\n\nplt.subplot(1, 2, 1)\nimshow(content, 'Content Image')\n\nplt.subplot(1, 2, 2)\nimshow(style, 'Style Image')\nplt.show()","2f0a6a78":"def load_and_process_img(path_to_img):\n  img = load_img(path_to_img)\n  img = tf.keras.applications.vgg19.preprocess_input(img)\n  return img","1a8ea089":"def deprocess_img(processed_img):\n  x = processed_img.copy()\n  if len(x.shape) == 4:\n    x = np.squeeze(x, 0)\n  assert len(x.shape) == 3, (\"Input to deprocess image must be an image of \"\n                             \"dimension [1, height, width, channel] or [height, width, channel]\")\n  if len(x.shape) != 3:\n    raise ValueError(\"Invalid input to deprocessing image\")\n  \n  # perform the inverse of the preprocessiing step\n  x[:, :, 0] += 103.939\n  x[:, :, 1] += 116.779\n  x[:, :, 2] += 123.68\n  x = x[:, :, ::-1]\n\n  x = np.clip(x, 0, 255).astype('uint8')\n  return x","cd2e2710":"# Content layer where will pull our feature maps\ncontent_layers = ['block5_conv2'] \n\n# Style layer we are interested in\nstyle_layers = ['block1_conv1',\n                'block2_conv1',\n                'block3_conv1', \n                'block4_conv1', \n                'block5_conv1'\n               ]\n\nnum_content_layers = len(content_layers)\nnum_style_layers = len(style_layers)","45907c8a":"def get_model():\n  \"\"\" Creates our model with access to intermediate layers. \n  \n  This function will load the VGG19 model and access the intermediate layers. \n  These layers will then be used to create a new model that will take input image\n  and return the outputs from these intermediate layers from the VGG model. \n  \n  Returns:\n    returns a keras model that takes image inputs and outputs the style and \n      content intermediate layers. \n  \"\"\"\n  # Load our model. We load pretrained VGG, trained on imagenet data\n  vgg = tf.keras.applications.vgg19.VGG19(include_top=False, weights='imagenet')\n  vgg.trainable = False\n  # Get output layers corresponding to style and content layers \n  style_outputs = [vgg.get_layer(name).output for name in style_layers]\n  content_outputs = [vgg.get_layer(name).output for name in content_layers]\n  model_outputs = style_outputs + content_outputs\n  # Build model \n  return models.Model(vgg.input, model_outputs)","29412fa2":"# Computing content lso\ndef get_content_loss(base_content, target):\n  return tf.reduce_mean(tf.square(base_content - target))","0b119efe":"# Computing style loss\n\ndef gram_matrix(input_tensor):\n  # We make the image channels first \n  channels = int(input_tensor.shape[-1])\n  a = tf.reshape(input_tensor, [-1, channels])\n  n = tf.shape(a)[0]\n  gram = tf.matmul(a, a, transpose_a=True)\n  return gram \/ tf.cast(n, tf.float32)\n\ndef get_style_loss(base_style, gram_target):\n  \"\"\"Expects two images of dimension h, w, c\"\"\"\n  # height, width, num filters of each layer\n  # We scale the loss at a given layer by the size of the feature map and the number of filters\n  height, width, channels = base_style.get_shape().as_list()\n  gram_style = gram_matrix(base_style)\n  \n  return tf.reduce_mean(tf.square(gram_style - gram_target))# \/ (4. * (channels ** 2) * (width * height) ** 2)","261e3986":"def get_feature_representations(model, content_path, style_path):\n  \"\"\"Helper function to compute our content and style feature representations.\n\n  This function will simply load and preprocess both the content and style \n  images from their path. Then it will feed them through the network to obtain\n  the outputs of the intermediate layers. \n  \n  Arguments:\n    model: The model that we are using.\n    content_path: The path to the content image.\n    style_path: The path to the style image\n    \n  Returns:\n    returns the style features and the content features. \n  \"\"\"\n  # Load our images in \n  content_image = load_and_process_img(content_path)\n  style_image = load_and_process_img(style_path)\n  \n  # batch compute content and style features\n  style_outputs = model(style_image)\n  content_outputs = model(content_image)\n  \n  \n  # Get the style and content feature representations from our model  \n  style_features = [style_layer[0] for style_layer in style_outputs[:num_style_layers]]\n  content_features = [content_layer[0] for content_layer in content_outputs[num_style_layers:]]\n  return style_features, content_features","0ae1b892":"def compute_loss(model, loss_weights, init_image, gram_style_features, content_features):\n  \"\"\"This function will compute the loss total loss.\n  \n  Arguments:\n    model: The model that will give us access to the intermediate layers\n    loss_weights: The weights of each contribution of each loss function. \n      (style weight, content weight, and total variation weight)\n    init_image: Our initial base image. This image is what we are updating with \n      our optimization process. We apply the gradients wrt the loss we are \n      calculating to this image.\n    gram_style_features: Precomputed gram matrices corresponding to the \n      defined style layers of interest.\n    content_features: Precomputed outputs from defined content layers of \n      interest.\n      \n  Returns:\n    returns the total loss, style loss, content loss, and total variational loss\n  \"\"\"\n  style_weight, content_weight = loss_weights\n  \n  # Feed our init image through our model. This will give us the content and \n  # style representations at our desired layers. Since we're using eager\n  # our model is callable just like any other function!\n  model_outputs = model(init_image)\n  \n  style_output_features = model_outputs[:num_style_layers]\n  content_output_features = model_outputs[num_style_layers:]\n  \n  style_score = 0\n  content_score = 0\n\n  # Accumulate style losses from all layers\n  # Here, we equally weight each contribution of each loss layer\n  weight_per_style_layer = 1.0 \/ float(num_style_layers)\n  for target_style, comb_style in zip(gram_style_features, style_output_features):\n    style_score += weight_per_style_layer * get_style_loss(comb_style[0], target_style)\n    \n  # Accumulate content losses from all layers \n  weight_per_content_layer = 1.0 \/ float(num_content_layers)\n  for target_content, comb_content in zip(content_features, content_output_features):\n    content_score += weight_per_content_layer* get_content_loss(comb_content[0], target_content)\n  \n  style_score *= style_weight\n  content_score *= content_weight\n\n  # Get total loss\n  loss = style_score + content_score \n  return loss, style_score, content_score","6262b12f":"def compute_grads(cfg):\n  with tf.GradientTape() as tape: \n    all_loss = compute_loss(**cfg)\n  # Compute gradients wrt input image\n  total_loss = all_loss[0]\n  return tape.gradient(total_loss, cfg['init_image']), all_loss","c91be889":"import IPython.display\n\ndef run_style_transfer(content_path, \n                       style_path,\n                       num_iterations=1000,\n                       content_weight=1e3, \n                       style_weight=1e-2): \n  # We don't need to (or want to) train any layers of our model, so we set their\n  # trainable to false. \n  model = get_model() \n  for layer in model.layers:\n    layer.trainable = False\n  \n  # Get the style and content feature representations (from our specified intermediate layers) \n  style_features, content_features = get_feature_representations(model, content_path, style_path)\n  gram_style_features = [gram_matrix(style_feature) for style_feature in style_features]\n  \n  # Set initial image\n  init_image = load_and_process_img(content_path)\n  init_image = tf.Variable(init_image, dtype=tf.float32)\n  # Create our optimizer\n  opt = tf.train.AdamOptimizer(learning_rate=5, beta1=0.99, epsilon=1e-1)\n\n  # For displaying intermediate images \n  iter_count = 1\n  \n  # Store our best result\n  best_loss, best_img = float('inf'), None\n  \n  # Create a nice config \n  loss_weights = (style_weight, content_weight)\n  cfg = {\n      'model': model,\n      'loss_weights': loss_weights,\n      'init_image': init_image,\n      'gram_style_features': gram_style_features,\n      'content_features': content_features\n  }\n    \n  # For displaying\n  num_rows = 2\n  num_cols = 5\n  display_interval = num_iterations\/(num_rows*num_cols)\n  start_time = time.time()\n  global_start = time.time()\n  \n  norm_means = np.array([103.939, 116.779, 123.68])\n  min_vals = -norm_means\n  max_vals = 255 - norm_means   \n  \n  imgs = []\n  for i in range(num_iterations):\n    grads, all_loss = compute_grads(cfg)\n    loss, style_score, content_score = all_loss\n    opt.apply_gradients([(grads, init_image)])\n    clipped = tf.clip_by_value(init_image, min_vals, max_vals)\n    init_image.assign(clipped)\n    end_time = time.time() \n    \n    if loss < best_loss:\n      # Update best loss and best image from total loss. \n      best_loss = loss\n      best_img = deprocess_img(init_image.numpy())\n\n    if i % display_interval== 0:\n      start_time = time.time()\n      \n      # Use the .numpy() method to get the concrete numpy array\n      plot_img = init_image.numpy()\n      plot_img = deprocess_img(plot_img)\n      imgs.append(plot_img)\n      IPython.display.clear_output(wait=True)\n      IPython.display.display_png(Image.fromarray(plot_img))\n      print('Iteration: {}'.format(i))        \n      print('Total loss: {:.4e}, ' \n            'style loss: {:.4e}, '\n            'content loss: {:.4e}, '\n            'time: {:.4f}s'.format(loss, style_score, content_score, time.time() - start_time))\n  print('Total time: {:.4f}s'.format(time.time() - global_start))\n  IPython.display.clear_output(wait=True)\n  plt.figure(figsize=(14,4))\n  for i,img in enumerate(imgs):\n      plt.subplot(num_rows,num_cols,i+1)\n      plt.imshow(img)\n      plt.xticks([])\n      plt.yticks([])\n      \n  return best_img, best_loss ","51231618":"best, best_loss = run_style_transfer(content_path, \n                                     style_path, num_iterations=1000)","cc165e61":"Image.fromarray(best)","f86bc15a":"def show_results(best_img, content_path, style_path, show_large_final=True):\n  plt.figure(figsize=(10, 5))\n  content = load_img(content_path) \n  style = load_img(style_path)\n\n  plt.subplot(1, 2, 1)\n  imshow(content, 'Content Image')\n\n  plt.subplot(1, 2, 2)\n  imshow(style, 'Style Image')\n\n  if show_large_final: \n    plt.figure(figsize=(10, 10))\n\n    plt.imshow(best_img)\n    plt.title('Output Image')\n    plt.show()","efe1aacc":"show_results(best, content_path, style_path)","9f3413e0":"content_img = '\/tmp\/nst\/test_ekip.jpg.1'\nstyle_img = '\/tmp\/nst\/1024px-Van_Gogh_-_Starry_Night_-_Google_Art_Project.jpg'\n\noutput, loss = run_style_transfer(content_img, style_img)\nshow_results(output, content_img, style_img)","52f1b36c":"content_img = '\/tmp\/nst\/test_ekip.jpg.1'\nstyle_img = '\/tmp\/nst\/Pillars_of_creation_2014_HST_WFC3-UVIS_full-res_denoised.jpg'\n\noutput, loss = run_style_transfer(content_img, style_img)\nshow_results(output, content_img, style_img)","240a7356":"content_img = '\/tmp\/nst\/test_ekip.jpg.1'\nstyle_img = '\/tmp\/nst\/Vassily_Kandinsky,_1913_-_Composition_7.jpg'\n\noutput, loss = run_style_transfer(content_img, style_img)\nshow_results(output, content_img, style_img)","85afbd34":"## Build the Model \nIn this case, we load [VGG19](https:\/\/keras.io\/applications\/#vgg19), and feed in our input tensor to the model. This will allow us to extract the feature maps (and subsequently the content and style representations) of the content, style, and generated images.\n\nWe use VGG19, as suggested in the paper. In addition, since VGG19 is a relatively simple model (compared with ResNet, Inception, etc) the feature maps actually work better for style transfer. ","af2ce973":"## Style Loss","ee12bf01":"## Visualize the input","33438057":"We\u2019ll define a little helper function that will load our content and style image, feed them forward through our network, which will then output the content and style feature representations from our model. ","72316185":"In order to view the outputs of our optimization, we are required to perform the inverse preprocessing step. Furthermore, since our optimized image may take its values anywhere between $- \\infty$ and $\\infty$, we must clip to maintain our values from within the 0-255 range.   ","08a6088c":"### Import and configure modules","82ecf333":"### Define content and style representations\nThese intermediate layers are necessary to define the representation of content and style from our images. \n","1dfc4485":"## Define and create our loss functions (content and style distances)","772d61ac":"### Run Gradient Descent \n\nIn this case, we use the [Adam](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/optimizers\/Adam) optimizer in order to minimize our loss. We iteratively update our output image such that it minimizes our loss: we don't update the weights associated with our network, but instead we train our input image to minimize loss. In order to do this, we must know how we calculate our loss and gradients. \n","b2a616e3":"### Content Loss","b7781c15":"In the above code snippet, we\u2019ll load our pretrained image classification network. Then we grab the layers of interest as we defined earlier. Then we define a Model by setting the model\u2019s inputs to an image and the outputs to the outputs of the style and content layers. In other words, we created a model that will take an input image and output the content and style intermediate layers! \n","c66eb254":"### Download Images","60711f87":"## Prepare the data\nLet's create methods that will allow us to load and preprocess our images easily. We perform the same preprocessing process as are expected according to the VGG training process. VGG networks are trained on image with each channel normalized by `mean = [103.939, 116.779, 123.68]`and with channels BGR.","efc43e70":"### Optimization loop","94d17aa3":"### Computing the loss and gradients\nHere we use [**tf.GradientTape**](https:\/\/www.tensorflow.org\/programmers_guide\/eager#computing_gradients) to compute the gradient. It allows us to take advantage of the automatic differentiation available by tracing operations for computing the gradient later. It records the operations during the forward pass and then is able to compute the gradient of our loss function with respect to our input image for the backwards pass.","f728d166":"Computing style loss is a bit more involved, but follows the same principle, this time feeding our network the base input image and the style image. However, instead of comparing the raw intermediate outputs of the base input image and the style image, we instead compare the Gram matrices of the two outputs. \n","393c8b9b":"https:\/\/medium.com\/mlreview\/making-ai-art-with-style-transfer-using-keras-8bb5fa44b216\nhttps:\/\/towardsdatascience.com\/neural-style-transfer-tutorial-part-1-f5cd3315fa7f\nhttps:\/\/towardsdatascience.com\/neural-style-transfer-series-part-2-91baad306b24\nhttps:\/\/towardsdatascience.com\/light-on-math-machine-learning-intuitive-guide-to-neural-style-transfer-ef88e46697ee\n\n","22401e11":"These are input content and style images. We hope to \"create\" an image with the content of our content image, but with the style of the style image. ","9fe05282":"## Key Takeaways\n\n\n* We built several different loss functions and used backpropagation to transform our input image in order to minimize these losses\n  * In order to do this we had to load in a **pretrained model** and use its learned feature maps to describe the content and style representation of our images.\n    * Our main loss functions were primarily computing the distance in terms of these different representations\n* We implemented this with a custom model and **eager execution**\n  * We built our custom model with the Functional API \n  * Eager execution allows us to dynamically work with tensors, using a natural python control flow\n  * We manipulated tensors directly, which makes debugging and working with tensors easier. \n* We iteratively updated our image by applying our optimizers update rules using **tf.gradient**. The optimizer minimized a given loss with respect to our input image. ","c86662f7":"## Apply style transfer to our images\n","d972b5c4":"## Visualize outputs\nWe \"deprocess\" the output image in order to remove the processing that was applied to it. ","0cccd2e4":"We\u2019ll begin by enabling [eager execution](https:\/\/www.tensorflow.org\/guide\/eager). Eager execution allows us to work through this technique in the clearest and most readable way. ","a00eaec5":"### Starry night + My Teammates","e51b2627":"In order to access the intermediate layers corresponding to our style and content feature maps, we get the corresponding outputs and using the Keras [**Functional API**](https:\/\/keras.io\/getting-started\/functional-api-guide\/), we define our model with the desired output activations. \n\nWith the Functional API defining a model simply involves defining the input and output: \n\n`model = Model(inputs, outputs)`","78b9994f":"Our content loss definition is actually quite simple. We\u2019ll pass the network both the desired content image and our base input image. This will return the intermediate layer outputs (from the layers defined above) from our model. Then we simply take the euclidean distance between the two intermediate representations of those images.  \n\nWe perform backpropagation in the usual way such that we minimize this content loss. We thus change the initial image until it generates a similar response in a certain layer (defined in content_layer) as the original content image.\n\nThis can be implemented quite simply. Again it will take as input the feature maps at a layer L in a network fed by x, our input image, and p, our content image, and return the content distance.\n\n","3fa5b37e":"Then computing the gradients is easy:"}}