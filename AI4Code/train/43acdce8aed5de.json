{"cell_type":{"a80f5463":"code","76fc55b0":"code","de367bd3":"code","407bc01b":"code","8d3c12db":"code","7a437a80":"code","a57f9ffc":"code","c929763d":"code","95e322f9":"code","8193d68e":"code","1428b6e9":"code","9e2ced77":"code","84341783":"code","54fefdc3":"code","f9a1d830":"code","0e13a4ab":"code","3a1f0ce3":"code","b9a105e6":"code","859b8d3f":"code","28a2e1ff":"code","7b3fadbe":"code","52276828":"code","784dc95e":"code","b7f9bbad":"code","d4b6783e":"code","6a7645e3":"code","5d2f2e81":"code","35f74970":"code","9892fed0":"code","4c428bfc":"code","8e4d504e":"code","d6c60426":"code","bf8a2816":"code","3848cfac":"code","ce37e4a1":"code","60028fe5":"code","430d3477":"code","bffa285d":"code","9238c110":"code","43141930":"code","3ad6bf72":"code","8384b2b4":"code","61e0aebd":"code","e95f4daa":"code","bc877323":"code","933e9014":"code","2c620acb":"code","ed9405f7":"code","d99d043b":"code","fdd8fd2d":"code","220cc3f2":"code","d270709b":"code","229606e3":"code","7b7c27e5":"code","7acf8ba5":"code","46920ab2":"markdown","12fbe289":"markdown","7d837c4b":"markdown","7d9cf731":"markdown","3ecabbb2":"markdown","f1beecf3":"markdown","2f850b7f":"markdown","73dc96f0":"markdown","95f7046e":"markdown"},"source":{"a80f5463":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","76fc55b0":"import numpy as np\nimport pandas as pd\nwater =  pd.read_csv('..\/input\/water-potability\/water_potability.csv')\nwater.head(10)","de367bd3":"water.info()","407bc01b":"water.ph = water.ph.fillna(water.ph.mean())\nwater.Sulfate = water.Sulfate.fillna(water.Sulfate.mean())\nwater.Trihalomethanes = water.Trihalomethanes.fillna(water.Trihalomethanes.mean())","8d3c12db":"water.info()","7a437a80":"water.isnull().sum()\n#to check any null values in dataset","a57f9ffc":"import matplotlib.pyplot as plt\nimport seaborn as sns","c929763d":"sns.heatmap(water.corr(),annot=True)\n#correlation between each and every factor\n","95e322f9":"sns.pairplot(water,hue=\"Potability\")","8193d68e":"sns.jointplot(x=\"ph\",y=\"Hardness\",data=water,kind=\"reg\")","1428b6e9":"print(water.Potability.value_counts())\nsns.countplot(water.Potability)\nplt.grid()\nplt.text(0,2000,\"1998\")\nplt.text(1,1300,\"1278\")\n","9e2ced77":"sns.histplot(water.ph)\n","84341783":"sns.histplot(water.Hardness)\n","54fefdc3":"sns.histplot(water.Solids)\n","f9a1d830":"sns.histplot(water.Chloramines)\n","0e13a4ab":"sns.histplot(water.Sulfate)\n","3a1f0ce3":"sns.histplot(water.Conductivity)\n","b9a105e6":"sns.histplot(water.Organic_carbon)\n","859b8d3f":"sns.histplot(water.Trihalomethanes)\n","28a2e1ff":"sns.histplot(water.Turbidity)\n","7b3fadbe":"sns.histplot(water.Potability)","52276828":"sns.stripplot(x=\"Potability\",y=\"Hardness\",data=water)","784dc95e":"sns.stripplot(x=\"Potability\",y=\"ph\",data=water)","b7f9bbad":"sns.stripplot(x=\"Potability\",y=\"Solids\",data=water)","d4b6783e":"sns.stripplot(x=\"Potability\",y=\"Conductivity\",data=water)","6a7645e3":"sns.boxplot(x=\"Potability\",y=\"ph\",data=water)","5d2f2e81":"sns.boxplot(x=\"Potability\",y=\"Hardness\",data=water)","35f74970":"sns.boxplot(x=\"Potability\",y=\"Turbidity\",data=water)","9892fed0":"from sklearn.model_selection import train_test_split","4c428bfc":"X = water.drop(columns=[\"Potability\"])\ny = water[\"Potability\"]\n","8e4d504e":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.4)","d6c60426":"from sklearn.tree import DecisionTreeClassifier","bf8a2816":"model = DecisionTreeClassifier()","3848cfac":"model.fit(X_train,y_train)","ce37e4a1":"print(model.score(X_test,y_test))","60028fe5":"from sklearn.linear_model import LinearRegression ","430d3477":"lr = LinearRegression()\nlr.fit(X_train,y_train)\nprint(lr.score(X_test,y_test))","bffa285d":"from sklearn.linear_model import LogisticRegression","9238c110":"lre = LogisticRegression()\nlre.fit(X_train,y_train)","43141930":"from sklearn.metrics import confusion_matrix","3ad6bf72":"y_pred = lre.predict(X_test)\ncm = confusion_matrix(y_test,y_pred)\nprint('confusion matrix:\\n',cm)","8384b2b4":"from sklearn.metrics import accuracy_score\n","61e0aebd":"ac = accuracy_score(y_test,y_pred)\nprint(\"accuracy score is \" ,ac)","e95f4daa":"from sklearn.ensemble import RandomForestClassifier","bc877323":"rfc = RandomForestClassifier()","933e9014":"rfc.fit(X_train,y_train)","2c620acb":"from sklearn.metrics import confusion_matrix","ed9405f7":"y_pred = rfc.predict(X_test)\ncm = confusion_matrix(y_test,y_pred)\nprint(\"Confusion matrix is \\n\",cm)","d99d043b":"from sklearn.metrics import accuracy_score","fdd8fd2d":"ac =accuracy_score(y_test,y_pred)\nprint(\"Accuracy score is \",ac)","220cc3f2":"from sklearn.neighbors import KNeighborsClassifier\nknc = KNeighborsClassifier()\nknc.fit(X_train,y_train)\n\nfrom sklearn.metrics import confusion_matrix\ny_pred = knc.predict(X_test)\ncm = confusion_matrix(y_test,y_pred)\nprint(\"Confusion matrix \\n \",cm)\n\n\nfrom sklearn.metrics import accuracy_score\nac = accuracy_score(y_test,y_pred)\nprint(\"Accuracy score is \",ac)","d270709b":"from sklearn.svm import SVC\nsvc = SVC()\nsvc.fit(X_train,y_train)\n\nfrom sklearn.metrics import confusion_matrix\ny_pred = svc.predict(X_test)\ncm = confusion_matrix(y_test,y_pred)\nprint(\"Confusion matrix \\n \",cm)\n\n\nfrom sklearn.metrics import accuracy_score\nac = accuracy_score(y_test,y_pred)\nprint(\"Accuracy score is \",ac)","229606e3":"from sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ngnb.fit(X_train,y_train)\n\nfrom sklearn.metrics import confusion_matrix\ny_pred = gnb.predict(X_test)\ncm = confusion_matrix(y_test,y_pred)\nprint(\"Confusion matrix \\n \",cm)\n\n\nfrom sklearn.metrics import accuracy_score\nac = accuracy_score(y_test,y_pred)\nprint(\"Accuracy score is \",ac)","7b7c27e5":"score = {\n    \"Algorithm\":[\"DTree\",\"LinearR\",\"LogisticR\",\"RandomForest\",\"KNeighbors\",\"SVC\",\"GaussianNB\"],\n    \"Score\":[0.5690312738367659,0.004601688471403742,0.6247139588100686,0.6529366895499619,0.562929061784897,0.6224256292906178,0.6117467581998475]\n}","7acf8ba5":"plt.barh(score[\"Algorithm\"],score[\"Score\"])\nplt.figure(figsize = (20, 18))\n\nplt.show()","46920ab2":"We will try next algorithm - **Linear Regression**","12fbe289":"Score is very low the Decision tree Classifier = **0.5690312738367659**","7d837c4b":"We will try next algorithm - **Logistic Regression**","7d9cf731":"**For Visualization**","3ecabbb2":"Score is vey poor in Linear Regression model = **-0.004601688471403742**","f1beecf3":"# From the algorithm we can conclude that RandomForestClassifier is having the highest score of 0.653","2f850b7f":"**Train the Model with various algorithms**","73dc96f0":"We will try next algorithm - **RandomForestClassifier**","95f7046e":"We will try next algorithm - **KNeighborsClassifier**"}}