{"cell_type":{"404bb8dc":"code","5f7356e5":"code","8ba2971d":"code","a7831d5d":"code","1647b00b":"code","69813fa9":"code","7d3476b9":"code","0b175efa":"code","adcc3a42":"code","8e3a5836":"code","5cfb8dca":"code","d6c23205":"code","f6bbe10f":"code","af93182e":"code","b30fa172":"code","2eaf6eb9":"code","c2353404":"code","07eb62f2":"code","14dd4a9d":"code","caabdb32":"code","e59acdf8":"code","984562c1":"code","78ddd4a7":"code","0b331670":"code","57861d4b":"code","9ed65c7a":"code","5bb89bba":"code","54c1a188":"code","29cd996a":"markdown","89cc3259":"markdown","47ff29e1":"markdown","283df0e7":"markdown"},"source":{"404bb8dc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5f7356e5":"import numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns","8ba2971d":"df=pd.read_csv('..\/input\/financial-data-in-2018-500-companies\/2018_Financial_Data_Updated.csv')","a7831d5d":"df.head()","1647b00b":"df.shape","69813fa9":"df.describe()","7d3476b9":"df.info()","0b175efa":"df.isnull().sum()","adcc3a42":"df.dropna(inplace=True)\ndf.isnull().sum()","8e3a5836":"df.columns","5cfb8dca":"df_numb=['Revenue', 'Gross Profit', 'Operating Expenses', 'Earnings before Tax', 'Net Income', 'EPS', 'EBIT','Consolidated Income', 'Earnings Before Tax Margin','Net Profit Margin', 'Total assets', 'Total debt', 'Total liabilities','returnOnEquity', 'ROE', 'Gross Profit Growth', 'EBIT Growth','Operating Income Growth']","d6c23205":"def function(df,df_numb):\n    min_threshold,max_threshold= df[df_numb].quantile([0.01,0.99])\n    print('Min_threshold is', min_threshold)\n    print('Max_threshold is', max_threshold)\n    a=df[df[df_numb]>max_threshold]\n    b=df[df[df_numb]<min_threshold]\n    print('Total outlier is ', len(a)+len(b))","f6bbe10f":"function(df,'Revenue')","af93182e":"def function(df,df_numb):\n    min_threshold,max_threshold= df[df_numb].quantile([0.01,0.99])\n    new_df=df[(df[df_numb]<max_threshold) & (df[df_numb]>min_threshold)]\n    display(new_df.head())\n    print('The old shape is',df.shape)\n    print('The new shape is',new_df.shape)","b30fa172":"function(df,'Revenue')","2eaf6eb9":"def function(df, df_numb):\n    min_threshold,max_threshold= df[df_numb].quantile([0.01,0.99])\n    plt.figure(figsize=(10,6))\n    sns.distplot(df[df_numb],kde=True)\n    plt.axvspan(xmin = df[df_numb].min(),xmax= min_threshold,alpha=0.5, facecolor='g')\n    plt.axvspan(xmin = max_threshold,xmax= df[df_numb].max(),alpha=0.5, facecolor='g')\n    plt.title('histogram before removing outlier')\n    plt.show()\n    plt.figure(figsize=(10,6))\n    sns.boxplot(df[df_numb])\n    plt.title('boxplot before removing outlier')\n    plt.show()\n    new_df=df[(df[df_numb]<max_threshold) & (df[df_numb]>min_threshold)]\n    plt.figure(figsize=(10,6))\n    sns.boxplot(new_df[df_numb])","c2353404":"df_numb","07eb62f2":"function(df,'Net Income')","14dd4a9d":"def fun(df, df_numb):\n    plt.figure(figsize=(8,6))\n    plt.hist(df[df_numb],bins=40,rwidth=1.0)\n    plt.xlabel(df_numb)\n    plt.ylabel('Count')\n    plt.show()","caabdb32":"fun(df,'EPS')","e59acdf8":"def fun(df,df_numb):\n    upper_limit= df[df_numb].mean() + 3*df[df_numb].std()\n    lower_limit= df[df_numb].mean() - 3*df[df_numb].std()\n    c=df[df[df_numb]>upper_limit]\n    d=df[df[df_numb]<lower_limit]\n    print('upper limit is',upper_limit)\n    print('lower limit is',lower_limit)\n    print('Total outlier is ', len(c)+len(d))\n    ###\n    new_df=df[(df[df_numb]<upper_limit) & (df[df_numb]>lower_limit)]\n    display(new_df.head())\n    print('the old data shape is', df.shape)\n    print('the new data shape is', new_df.shape)\n    ###\n\n    plt.figure(figsize=(10,6))\n    plt.hist(df[df_numb],bins= 40, width= 2.0)\n    plt.xlabel(df_numb)\n    plt.ylabel('Count')\n    plt.axvspan(xmin=df[df_numb].min(),xmax=lower_limit, alpha=0.5, facecolor='g')\n    plt.axvspan(xmin= upper_limit, xmax= df[df_numb].max(),alpha=0.5, facecolor='g')\n    plt.show()\n    ###\n    plt.figure(figsize=(10,6))\n    sns.boxplot(df[df_numb])\n    plt.title('boxplot before')\n    plt.show()\n    ###\n    \n    plt.figure(figsize=(10,6))\n    sns.boxplot(new_df[df_numb])\n    plt.title('boxplot after')\n    plt.show()","984562c1":"fun(df,'EPS')","78ddd4a7":"df","0b331670":"df_new=df.drop(columns=['Sector','Company_code','Class'])\ndf_new.info()","57861d4b":"\ndef Zscore_outlier(df_new):\n    out=[]\n    remain=[]\n    m = np.mean(df_new)\n    sd = np.std(df_new)\n    for i in df_new: \n        z_score = (i-m)\/sd\n        if (np.abs(z_score) > 3) |(np.abs(z_score)<-3): \n            out.append(i)\n        else:\n            remain.append(i)\n            df_outlier=pd.DataFrame(out,columns=['Outlier'])\n            df_no_outlier= pd.DataFrame(remain,columns=['Remain'])\n    ##\n            \n    print('Number of Outlier is', len(Out))\n    display(df_outlier)\n    display(df_no_outlier)\n    \n    ###\n    plt.figure(figsize=(10,6))\n    sns.boxplot(df_new)\n    plt.title('boxplot before')\n    plt.show()\n    \n    ###\n    plt.figure(figsize=(10,6))\n    sns.boxplot(df_no_outlier['Remain'])\n    plt.title('boxplot after')\n    plt.show()\n    ","9ed65c7a":" Zscore_outlier(df_new['Total debt'])","5bb89bba":"def iqr(df,df_numb):\n    IQR= df[df_numb].quantile(0.75)-df[df_numb].quantile(0.25)\n    lower_limit= df[df_numb].quantile(0.25) - 1.5*IQR\n    upper_limit=df[df_numb].quantile(0.75) + 1.5*IQR\n    print('lower limit:',lower_limit)\n    print('upper limit:',upper_limit)\n    k=df[df[df_numb]>upper_limit]\n    m=df[df[df_numb]<lower_limit]\n    df_iqr=df[(df[df_numb]<upper_limit) & (df[df_numb]>lower_limit)]\n    print('old data shape',df.shape)\n    print('data after removing shape',df_iqr.shape)\n    print('total number of outlier:',len(k)+len(m))\n    display('new dataframe after removing outlier:',df_iqr)\n###\n    plt.figure(figsize=(10,6))\n    plt.hist(df[df_numb],bins= 40, width= 2.0)\n    plt.xlabel(df_numb)\n    plt.ylabel('Count')\n    plt.axvspan(xmin=df[df_numb].min(),xmax=lower_limit, alpha=0.5, facecolor='g')\n    plt.axvspan(xmin= upper_limit, xmax= df[df_numb].max(),alpha=0.5, facecolor='g')\n    plt.show()\n###\n    plt.figure(figsize=(10,6))\n    sns.boxplot(df[df_numb])\n    plt.title('boxplot before')\n    plt.show()\n###\n    \n    plt.figure(figsize=(10,6))\n    sns.boxplot(df_iqr[df_numb])\n    plt.title('boxplot after')\n    plt.show()\n    \n    ","54c1a188":"iqr(df,'EPS')","29cd996a":"# IQR Method","89cc3259":"# Standard Deviation","47ff29e1":"# Percentile Method:","283df0e7":"# Z-Score"}}