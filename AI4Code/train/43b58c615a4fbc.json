{"cell_type":{"09224652":"code","88157fd3":"code","143f8944":"code","3bf7183a":"code","139bb462":"code","2284b274":"markdown","b92d8490":"markdown","1f778f14":"markdown","0dd5f441":"markdown","c05971e0":"markdown","8770a31b":"markdown","393e828d":"markdown"},"source":{"09224652":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport sqlite3 as sql\n#import numpy as np\n","88157fd3":"print(os.listdir('..\/input'))\ndb = sql.connect('..\/input\/database.sqlite')\nscores = pd.read_sql('SELECT reviewid, score FROM reviews', db)\nartists = pd.read_sql('SELECT * FROM artists', db)\nyears = pd.read_sql('SELECT * FROM years', db)\ngenres2 = pd.read_sql('SELECT distinct genre FROM genres', db)\nscores2 = pd.read_sql('SELECT reviewid, score, title FROM reviews', db)\nprint(genres2.genre)\n\n#con.close()\n#sqlpath = os.listdir('..\/input')\nprint(set(years))\n#print(scores2.info())\n\ncursor = db.cursor()\ngenres = {}\ngenre_lookup = {}\nscores = {}\ncursor.execute('select distinct genre from genres')\nfor row in cursor:\n    genre_lookup[len(genre_lookup)] = row[0] \n    genres[row[0]] = []\n    \nprint(genres, len(genres)) \nscores2['years'] = years.year\nprint(scores2.info())\n\n# using List comprehension + isdigit() +split() \n# getting numbers from string to check artist name with numbers in it  \nres = [int(i) for i in str(artists.artist.str.split()) if i.isdigit()] ","143f8944":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n    \nplotPerColumnDistribution(scores2, 2, 2)\n","3bf7183a":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = 'df.name'\n    #df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n    \n#scores2.drop('reviewid', axis=1, inplace=True)\n#scores2.drop('title', axis=1, inplace=True)\n#scores2.name= scores2\nplotCorrelationMatrix(scores2, 6)\nprint(scores2.info())\nprint(scores2.corr())","139bb462":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n    \nplotScatterMatrix(scores2, 10, 12)\n","2284b274":"The next hidden code cells define functions for plotting data. Click on the \"Code\" button in the published kernel to reveal the hidden code.","b92d8490":"There is 0 csv file in the current version of the dataset:\n","1f778f14":"Autoencoders are an unsupervised learning technique in which we leverage neural networks for the task of representation learning. Specifically, we'll design a neural network architecture such that we impose a bottleneck in the network which forces a compressed knowledge representation of the original input. If the input features were each independent of one another, this compression and subsequent reconstruction would be a very difficult task. However, if some sort of structure exists in the data (ie. correlations between input features), this structure can be learned and consequently leveraged when forcing the input through the network's bottleneck.","0dd5f441":"## Exploratory Analysis\nTo begin this exploratory analysis, first use `matplotlib` to import libraries and define functions for plotting the data. Depending on the data, not all plots will be made. (Hey, I'm just a kerneling bot, not a Kaggle Competitions Grandmaster!)","c05971e0":"Oh, no! There are no automatic insights available for the file types used in this dataset. As your Kaggle kerneler bot, I'll keep working to fine-tune my hyper-parameters. In the meantime, please feel free to try a different dataset.","8770a31b":"## Conclusion\nThis concludes your starter analysis! To go forward from here, click the blue \"Edit Notebook\" button at the top of the kernel. This will create a copy of the code and environment for you to edit. Delete, modify, and add code as you please. Happy Kaggling!","393e828d":"## Introduction\nGreetings from the Kaggle maXbox bot! This is an automatically-generated kernel with starter code demonstrating how to read in the data and begin exploring. Click the blue \"Edit Notebook\" or \"Fork Notebook\" button at the top of this kernel to begin editing.\nWhat I want to show in the end is a correlation between genres and score with an autoencoder (target-context pairings based on genre and mean review score):\n\n\n[[scores over genre---------------genre - score - reviews count\n    \n    genre - score - #reviews\n    electronic [6.8] 3874\n    metal [6.2,] 862\n    rock [6.7] 9438\n    None [6.5] 2371\n    rap [6.5,] 1559\n    experimental [8.1,] 1815\n    pop\/r&b [7.1] 1432\n    folk\/country [7.3] 685\n    jazz [7.1,] 435\n    global [7.0] 219\n\n\nFor example we tend to give experimental or folk\/country more bonus than metal or rap, lets have a look at brian eno formal member of roxy music or pink floyd:\n\n* > brian eno {'experimental'} review id - score - title\n* > [22714, 22061, 21743, 20032, 17303, 14828, 2808, 11732, 11731]\n* > [7.7, 10.0, 8.0, 7.7, 8.0, 7.4, 6.1, 7.8, 8.8]\n* > ['reflection', 'another green world', 'the ship', 'nerve net', 'lux', 'small craft on a milk sea', 'another day on earth', 'music for films','discreet music']\n* according to score: another green world\n\n* > pink floyd {'rock'}\n* > [22663, 20006, 10968, 10643, 6307]\n* > [8.8, 5.7, 4.0, 9.4, 10.0]\n* > ['the early years 1965-1972', 'the endless river', 'oh, by the way', 'the piper at the gates of dawn  [40th anniversary edition]', 'animals']\n* according to score: animals\n"}}