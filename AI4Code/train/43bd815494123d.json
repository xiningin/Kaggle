{"cell_type":{"5a76a1e9":"code","daa61ffa":"code","c26f48ad":"code","051b9912":"code","19ff30f1":"code","95a47460":"code","10b6cd13":"code","6e4f0ef6":"code","7e744326":"code","220e6373":"code","da686010":"code","40b2149c":"code","84248d5d":"markdown"},"source":{"5a76a1e9":"import numpy as np\nimport matplotlib.pyplot as plt\nimport tensorflow as tf","daa61ffa":"size = 250\nshape = (size,size,3)","c26f48ad":"from tensorflow.keras.layers import Input, Dense, Activation\nfrom tensorflow.keras.layers import Flatten\nfrom tensorflow.keras.models import Model ,load_model\nfrom tensorflow.keras.layers import Conv2D\nfrom tensorflow.keras.optimizers import Adam, SGD\nfrom tensorflow.keras.layers import add\nimport tensorflow_hub as hub","051b9912":"lyer = hub.KerasLayer('https:\/\/tfhub.dev\/tensorflow\/efficientnet\/b4\/classification\/1',trainable = True)","19ff30f1":"def create_model(hublayer):\n    inputs = Input(shape)\n    outputs = hublayer(inputs)\n    x = Flatten()(outputs)\n    \n    x = Dense(1024,activation='relu')(x)\n    x = Dense(512,activation = 'relu')(x)\n    output = Dense(3,activation = 'softmax')(x)\n    \n    model = Model(inputs,output)\n    print(model.summary())\n    return model","95a47460":"mod = create_model(lyer)\nmod.compile(loss=\"categorical_crossentropy\", optimizer= Adam(0.0001), metrics=[\"accuracy\"])","10b6cd13":"from tensorflow.keras.preprocessing.image import ImageDataGenerator \ndatagen = ImageDataGenerator( featurewise_center=False, samplewise_center=False, \n                             featurewise_std_normalization=False,samplewise_std_normalization=False, \n                             zca_whitening=False, rotation_range=5, width_shift_range=0.2,\n                             height_shift_range= 0.2, brightness_range= (0,0.2), \n                             shear_range=0.2, zoom_range= 0.1)","6e4f0ef6":"train_generator = datagen.flow_from_directory(\n        '..\/input\/train-valid-test\/Bike side classifier data (complete)\/train',\n        target_size=(size,size),\n        batch_size=32,\n        class_mode='categorical')\nvalidation_generator = datagen.flow_from_directory(\n        '..\/input\/train-valid-test\/Bike side classifier data (complete)\/validation',\n        target_size=(size, size),\n        batch_size=32,\n        class_mode='categorical')","7e744326":"from tensorflow.keras.callbacks import EarlyStopping\nerly = EarlyStopping(monitor = 'val_accuracy',patience = 6)\nmod.fit(\n        train_generator,\n        epochs=50,\n        validation_data=validation_generator,\n        verbose = 2,callbacks = [erly])","220e6373":"keyss = mod.history.history\nnn = len(keyss['loss'])\nplt.plot(np.arange(nn),keyss['loss'],color='green',label='loss')\nplt.legend()\nplt.plot(np.arange(nn),keyss['val_loss'],color='black',label = 'val_loss')\nplt.legend()\nplt.plot(np.arange(nn),keyss['accuracy'],color='red',label = 'accurcy')\nplt.legend()\nplt.plot(np.arange(nn),keyss['val_accuracy'],color='purple',label = 'val_accu')\nplt.legend()\nplt.xlim(0,nn)\nplt.ylim(0,2)\nplt.show()\n","da686010":"testgen = ImageDataGenerator(rotation_range = 5, brightness_range= (0,0.2))\ntestdata = testgen.flow_from_directory(  \n                             '..\/input\/train-valid-test\/Bike side classifier data (complete)\/test',\n                               target_size = (size,size))\nmod.evaluate_generator(testdata )  ","40b2149c":"tf.keras.models.save_model(\n    mod,'.\/efficientnetB4_bike_sides_dataAugmentation')","84248d5d":"# 93% accuracy"}}