{"cell_type":{"34e28536":"code","1fc017cf":"code","337fe626":"code","11a77371":"code","7cf259a8":"code","3a27374a":"code","f824f53f":"code","0fa7d4e2":"code","0b24157a":"code","48720dd3":"code","5a6a4c84":"code","0d7718f7":"code","c30d1f23":"code","99744157":"code","a8cd892c":"code","d4dfe85a":"code","78a709f7":"code","48b7ab58":"code","ef4565b7":"code","3dd756bd":"code","eeaa0222":"code","9bc454d4":"code","039f6e74":"code","0cb21965":"code","2032b646":"code","5286e594":"code","25e59b08":"code","26385865":"code","171cf64d":"code","1992a619":"code","874f00d8":"code","f9b03243":"code","5b24f99d":"code","e6d00daf":"code","a74558d8":"code","11583f84":"code","cbff82f4":"code","19f0920c":"code","5071a56d":"code","a5499134":"code","b022f8a8":"code","115eb594":"code","7f337278":"code","12c22836":"code","d8e38bf3":"code","0df1c425":"code","42346d2d":"code","a00cec83":"code","ef9346a6":"code","2739967b":"markdown","81f39c4b":"markdown","a35e6aad":"markdown","f2d17d22":"markdown","596bfc91":"markdown","3fece84c":"markdown","cb14a5a7":"markdown","b9d4c0c9":"markdown","00ab5855":"markdown","647f80bc":"markdown","ce846295":"markdown","0c4e838d":"markdown","28305eea":"markdown","e6c22bf0":"markdown","9b69c83b":"markdown","b6036885":"markdown","10a4d034":"markdown","1650209f":"markdown","d630f270":"markdown","633c9dbb":"markdown","ff10f7b8":"markdown","a4493b94":"markdown","ec60bab7":"markdown","645004cb":"markdown","a3dfc980":"markdown","c888be3b":"markdown","3bf7d9f5":"markdown","a5576d94":"markdown","811b8fa1":"markdown","7295ad1b":"markdown","2f789d70":"markdown","13ec4f43":"markdown","947f6e18":"markdown","384f068c":"markdown"},"source":{"34e28536":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\n\n%matplotlib inline","1fc017cf":"!pip install sklearn-evaluation","337fe626":"!pip install duckdb\n\nimport duckdb","11a77371":"from IPython.core.magic import register_line_cell_magic\n\n@register_line_cell_magic\ndef q(line, cell=None):\n    \n    user_text = None\n    \n    if cell is None:\n        user_text = line\n    else:\n        tmp = cell.replace('\\n', ' ')\n        user_text = f\"{line} {tmp}\".strip()\n    \n    variable_name = None\n    query_string = None\n    \n    index_of_variable_name = user_text.find('>')\n    if index_of_variable_name > -1:\n        variable_name = user_text[index_of_variable_name + 1:].strip()\n        query_string = user_text[:index_of_variable_name].strip()\n    else:\n        query_string = user_text\n        \n    ans = duckdb.query(query_string).to_df()\n        \n    if variable_name is not None:\n        globals()[variable_name] = ans\n    else:\n        return ans","7cf259a8":"titanic = pd.read_csv('..\/input\/titanic\/train.csv')","3a27374a":"titanic.info()","f824f53f":"%q select * from titanic limit 5","0fa7d4e2":"titanic.describe()","0b24157a":"%q select * from titanic where age is null","48720dd3":"%%q \n    select (count(*) * 100.0) \/ (select count(*) from titanic) as '% Of Missing Age' \n    from titanic \n    where age is null","5a6a4c84":"%q select * from titanic where embarked is null","0d7718f7":"%q select * from titanic where cabin is null","c30d1f23":"%%q \n    select (count(*) * 100.0) \/ (select count(*) from titanic) as '% Of Missing Cabin' \n    from titanic \n    where cabin is null","99744157":"sns.pairplot(titanic, hue='Survived')","a8cd892c":"sns.heatmap(titanic.corr(), annot=True)","d4dfe85a":"sns.scatterplot(data=titanic, x='Survived', y='Pclass')","78a709f7":"sns.scatterplot(data=titanic, x='Survived', y='Age')\nplt.axhline(y=74,color='r')","48b7ab58":"sns.scatterplot(data=titanic, x='Survived', y='SibSp')\nplt.axhline(y=5,color='r')","ef4565b7":"sns.scatterplot(data=titanic, x='Survived', y='Parch')","3dd756bd":"sns.scatterplot(data=titanic, x='Survived', y='Fare')\nplt.axhline(y=270,color='r')","eeaa0222":"%q select pclass, avg(age) as 'Age Mean' from titanic group by pclass","9bc454d4":"titanic['Age']=titanic.groupby('Pclass')['Age'].transform(lambda v: v.fillna(v.mean()))","039f6e74":"%q select * from titanic where age is null","0cb21965":"%%q\nselect PassengerId, survived, pclass, name, sex, age, sibsp, parch, ticket, fare, embarked\nfrom titanic\nwhere embarked is not null > titanic","2032b646":"titanic.info()","5286e594":"%q select PassengerId, sex from titanic > titanic_sex\n%q select PassengerId, embarked from titanic > titanic_embarked","25e59b08":"titanic_sex = pd.get_dummies(titanic_sex, prefix='sex')\ntitanic_embarked = pd.get_dummies(titanic_embarked, prefix='embarked')","26385865":"%q select * from titanic_sex limit 5","171cf64d":"%q select * from titanic_embarked limit 5","1992a619":"%q select e.*, s.sex_female, s.sex_male from titanic_embarked e join titanic_sex s on (e.PassengerId = s.PassengerId) > titanic_cat","874f00d8":"titanic_cat.info()","f9b03243":"%%q \n    select t.survived, t.pclass , t.age, t.sibsp, t.parch, t.fare,\n    c.embarked_C, c.embarked_Q, c.embarked_S, c.sex_female, c.sex_male\n    from titanic t join titanic_cat c on (t.PassengerId = c.PassengerId)\n    > titanic ","5b24f99d":"titanic.info()","e6d00daf":"%q select * from titanic limit 5","a74558d8":"%q select pclass , age, sibsp, parch, fare, embarked_C, embarked_Q, embarked_S, sex_female, sex_male from titanic > X\n\nY = titanic['Survived']","11583f84":"from sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.1, random_state=101)","cbff82f4":"n_estimators = [2**i for i in range(1, 8)]\nmax_features = [2**i for i in range(1, 4)]\nbootstrap = [False, True]\n\n\nparams_grid= {'n_estimators':n_estimators,\n            'max_features':max_features,\n            'bootstrap':bootstrap}","19f0920c":"random_forest_model = RandomForestClassifier()\ngrid_search = GridSearchCV(random_forest_model, params_grid, cv=5, scoring='accuracy', verbose=1, n_jobs=2)\ngrid_search.fit(X_train, Y_train)","5071a56d":"grid_search.best_params_","a5499134":"results = grid_search.cv_results_","b022f8a8":"from sklearn_evaluation import plot","115eb594":"plot.grid_search(results, change='n_estimators', kind='bar')","7f337278":"from sklearn.metrics import accuracy_score, classification_report","12c22836":"Y_test_pred = grid_search.predict(X_test)\n\naccuracy_score(Y_test, Y_test_pred)","d8e38bf3":"print(classification_report(Y_test, Y_test_pred))","0df1c425":"plot.confusion_matrix(Y_test, Y_test_pred)","42346d2d":"# 'bootstrap': True, 'max_features': 8, 'n_estimators': 128\nrandom_forest_model_oob= RandomForestClassifier(bootstrap=True, max_features=8, n_estimators=128, oob_score=True)\nrandom_forest_model_oob.fit(X_train, Y_train)","a00cec83":"random_forest_model_oob.oob_score_","ef9346a6":"titanic_test = pd.read_csv('..\/input\/titanic\/test.csv')\nID = titanic_test[\"PassengerId\"]\n\ntitanic_test['Age']=titanic_test.groupby('Pclass')['Age'].transform(lambda v: v.fillna(v.mean()))\ntitanic_test['Fare']=titanic_test.groupby('Pclass')['Fare'].transform(lambda v: v.fillna(v.mean()))\n\n\n%q select PassengerId, sex from titanic_test > titanic_test_sex\n%q select PassengerId, embarked from titanic_test > titanic_test_embarked\n\n\ntitanic_test_sex = pd.get_dummies(titanic_test_sex, prefix='sex')\ntitanic_test_embarked = pd.get_dummies(titanic_test_embarked, prefix='embarked')\n\n\n%q select e.*, s.sex_female, s.sex_male from titanic_test_embarked e join titanic_test_sex s on (e.PassengerId = s.PassengerId) > titanic_test_cat\n%q select t.pclass , t.age, t.sibsp, t.parch, t.fare, c.embarked_C, c.embarked_Q, c.embarked_S, c.sex_female, c.sex_male from titanic_test t join titanic_test_cat c on (t.PassengerId = c.PassengerId) > titanic_test \n%q select pclass , age, sibsp, parch, fare, embarked_C, embarked_Q, embarked_S, sex_female, sex_male from titanic_test > X\n\n\n\nY_pred = random_forest_model_oob.predict(X)\n\nsubmission = pd.DataFrame({\n        \"PassengerId\": ID,\n        \"Survived\": Y_pred\n    })\nsubmission.to_csv('submission.csv', index=False)","2739967b":"## Evaluation","81f39c4b":"Here, the scatter pairplot with the hue is set to `Survived`.","a35e6aad":"Accuracy score.","f2d17d22":"## Submission","596bfc91":"We observe that there exist some entries with missing age values.","3fece84c":"## Step 1: Setup the environnement","cb14a5a7":"## Data preparation","b9d4c0c9":"Join titanic one-hot columns. ","00ab5855":"## Exploratory Data Analysis","647f80bc":"The precent of missing `Age` values.","ce846295":"# Sklearn Random Forest applied to Titanic - Machine learning from Disaster  ","0c4e838d":"We transform categorical values `Sex` and `Embarked` to one-hot encoding.","28305eea":"## Load Titanic dataset","e6c22bf0":"We remove null values.","9b69c83b":"## Split titanic dataset to train and test","b6036885":"We check `Age` in titanic dataset.","10a4d034":"We use randam forest classifier for model training.","1650209f":"We set missing values of age.","d630f270":"In this notebook, we use `sklearn Random Forest` to predict which passengers survived the Titanic shipwreck.","633c9dbb":"To simplify plotting we use sklearn-evaluation.","ff10f7b8":"Fit random forest classifier.","a4493b94":"Here, the list of embarked missing values.","ec60bab7":"## Model training","645004cb":"Here, we create a simple Jupyter Notebook help to query dataframes easily.","a3dfc980":"The confusion matrix of the model.","c888be3b":"The precent of missing `Cabin` values.","3bf7d9f5":"Classification report.","a5576d94":"We join one-hot to titanic dataset.","811b8fa1":"Also, there are some missing values of cabin.","7295ad1b":"Here, the correlation heatmap of titanic dataset.","2f789d70":"## Titanic dataset overview","13ec4f43":"To simplify queries we use DuckDB library.","947f6e18":"The best parameters.","384f068c":"## Features and Lables"}}