{"cell_type":{"4a822898":"code","9cc728cf":"code","11ea888b":"code","5f78ab38":"code","8e43b9e4":"code","828ed242":"code","cf34e119":"code","2522f273":"code","cd6e355b":"code","c86a747b":"code","979c06bc":"code","e27f3b60":"code","ffabf972":"code","ed188d99":"code","ba361402":"code","f3998b98":"code","52cdcb92":"code","c1952144":"code","9ff65f8e":"code","8b979d5c":"code","75917f5c":"code","8abc61f7":"code","e6371f3b":"code","473a074f":"code","f7928521":"code","46d0764b":"code","56638fec":"code","07867bf2":"markdown","56fc5080":"markdown","a98e7493":"markdown","c208fb00":"markdown","4d3e4d5a":"markdown","1592c02b":"markdown","c986a1e8":"markdown","2555e8d4":"markdown","59f65b32":"markdown","7fe171e2":"markdown","b8379c1f":"markdown","2850806c":"markdown","335fad93":"markdown","b469b321":"markdown","d4988118":"markdown"},"source":{"4a822898":"import os\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.impute import SimpleImputer\n\nimport tensorflow as tf\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, BatchNormalization, Activation\nfrom keras.losses import mean_squared_error\nfrom keras import backend as K","9cc728cf":"np.random.seed(9)\ntf.random.set_seed(9)\nNUM_EPOCHS = 813","11ea888b":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","5f78ab38":"train_df = pd.read_csv(\"\/kaggle\/input\/house-price-prediction-with-boston-housing-dataset\/train1.csv\")\ntrain_df","8e43b9e4":"#Dropping unnecessary (Id) columns.\ntrain_df.drop('Id', axis=1, inplace=True)\ntrain_df","828ed242":"traindf_column_names = train_df.columns\ntraindf_column_names","cf34e119":"train_df.describe()","2522f273":"train_df.info()","cd6e355b":"train_df_MEDV_plot = sns.distplot(train_df['MEDV'])","c86a747b":"#skewness \nprint(\"Skewness: %f\" % train_df['MEDV'].skew())","979c06bc":"train_df.isnull().sum()","e27f3b60":"mean_imputer = SimpleImputer(missing_values=np.NaN, strategy='mean')\nmean_imputer.fit(train_df)","ffabf972":"imputed_train_arr = mean_imputer.transform(train_df)\nimputed_train_df = pd.DataFrame(imputed_train_arr, columns=traindf_column_names)\nimputed_train_df","ed188d99":"#recheck missing values\nimputed_train_df.isnull().sum()","ba361402":"imputed_train_df.describe()","f3998b98":"#correlation matrix\ncorrmat = imputed_train_df .corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corrmat, vmax=.8, square=True)","52cdcb92":"x_train = imputed_train_df.iloc[:,0:13]\ny_train = imputed_train_df.iloc[:,13:14]","c1952144":"model = Sequential()\n#input layer\nmodel.add(Dense(13, input_shape=(13,)))\nmodel.add(BatchNormalization())\nmodel.add(Activation(\"relu\"))\n\n# hidden layers\nmodel.add(Dense(26))\nmodel.add(BatchNormalization())\nmodel.add(Activation(\"relu\"))\nmodel.add(Dropout(0.25))\n    \nmodel.add(Dense(13, activation=\"relu\"))\n    \n# output layer\nmodel.add(Dense(1, activation='relu'))","9ff65f8e":"def root_mean_squared_error(y_true, y_pred):\n    return K.sqrt(mean_squared_error(y_true, y_pred))\n\nmodel.compile(optimizer='adam', loss=root_mean_squared_error)","8b979d5c":"model.summary()","75917f5c":"history = model.fit(x=x_train, y=y_train, batch_size=39, epochs=NUM_EPOCHS) ","8abc61f7":"loss = history.history['loss']\nepochs   = range(NUM_EPOCHS)\nplt.plot(epochs, loss, label=\"Training loss\")\nplt.title('Training loss')\nplt.legend()\nplt.show()","e6371f3b":"test_df = pd.read_csv(\"\/kaggle\/input\/house-price-prediction-with-boston-housing-dataset\/test1.csv\")\ntest_df","473a074f":"imputed_test_arr = mean_imputer.transform(test_df)\nimputed_test_df = pd.DataFrame(imputed_test_arr, columns=test_df.columns)\nimputed_test_df.drop('Id', axis=1, inplace=True)\nimputed_test_df","f7928521":"pred_MEDV = np.round(model.predict(imputed_test_df), decimals=1)\npred_MEDV = pd.DataFrame(pred_MEDV, columns=['MEDV'])","46d0764b":"submission_df = pd.DataFrame({'Id': test_df['Id'], 'MEDV': pred_MEDV['MEDV']})\nsubmission_df","56638fec":"submission_df.to_csv(\"boston_pred.csv\", index=False)","07867bf2":"# 5. Correlation Matrix\n It tells us how closely the different features are related to one another. This matrix is extremely useful for feature selection. The correlation coefficient values range from -1 to 1. <br>\nIf value is close to 1 => features have a strong positive correlation<br>\nIf value is close to -1 => features have a strong negative correlation<br>\n","56fc5080":"# 9. Predictions and Submission File","a98e7493":"# 6. Building Model","c208fb00":"# 6.2 Model Summary","4d3e4d5a":"# 6.1 Model Compilation","1592c02b":"# 7. Training Loss Curve","c986a1e8":"CRIM: Per capita crime rate by town\n\nZN: Proportion of residential land zoned for lots over 25,000 sq. ft\n\nINDUS: Proportion of non-retail business acres per town\n\nCHAS: Charles River dummy variable (= 1 if tract bounds river; 0 otherwise)\n\nNOX: Nitric oxide concentration (parts per 10 million)\n\nRM: Average number of rooms per dwelling\n\nAGE: Proportion of owner-occupied units built prior to 1940\n\nDIS: Weighted distances to five Boston employment centers\n\nRAD: Index of accessibility to radial highways\n\nTAX: Full-value property tax rate per $10,000\n\nPTRATIO: Pupil-teacher ratio by town\n\nB: 1000(Bk \u2014 0.63)\u00b2, where Bk is the proportion of [people of African American descent] by town\n\nLSTAT: Percentage of lower status of the population\n\nMEDV: Median value of owner-occupied homes in $1000s","2555e8d4":"# 4.1 Mean Imputation","59f65b32":"Our objective is to predict the value of prices of the house using the given features.\n\n# 1. Importing Packages","7fe171e2":"# 8. Loading Test Data And Preprocessing","b8379c1f":"# 3. EDA (Exploratory Data Analysis)","2850806c":"# 4. Dealing With Misssing Data","335fad93":"# 2. Loading Training Data","b469b321":"MEDV is our target variable as it contains the price of the house and others are the features on the basis of which we will predict the price of the house.","d4988118":"# 6.3 Model Fitting"}}