{"cell_type":{"f6ed87b2":"code","f2369d11":"code","6dd30bea":"code","5acfe601":"code","0498daca":"code","65c86b06":"code","fa01cbcb":"code","33485ab2":"code","22e1d89d":"code","e58cb4b7":"code","c8c42470":"code","7a6b7773":"code","b64e6e1f":"code","3b60c81a":"code","b24df947":"code","4309283c":"code","9868e50b":"code","9e7638b9":"code","ea685e74":"code","a7183f14":"markdown","34efcb4c":"markdown","28bf14f4":"markdown","c9827589":"markdown","7f9f1df9":"markdown","7dd8969d":"markdown","30a084b9":"markdown","53be40a5":"markdown","4fb450e4":"markdown","fe332c21":"markdown","08b57d3d":"markdown","9f5fbe47":"markdown","dff6f04d":"markdown","bfd694ff":"markdown","84691144":"markdown","6f04a4ce":"markdown","4e32eb34":"markdown","7dc05d6a":"markdown","b9b81ef8":"markdown","61b56266":"markdown","5bc642d8":"markdown"},"source":{"f6ed87b2":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics.pairwise import cosine_similarity\nimport os\nos.listdir('..\/input\/')","f2369d11":"prop = pd.read_json('..\/input\/property-data\/Property.json')\nuser = pd.read_json('..\/input\/property-data\/User.json')\nprop.shape, user.shape","6dd30bea":"user.head()","5acfe601":"prop.head()","0498daca":"prop['price'].head()","65c86b06":"def removo_punc(row):\n    return float(''.join(str(row).split(','))[1:])\n\nprop['price'] = prop['price'].astype(str).map(removo_punc)\nprop['price']","fa01cbcb":"sns.countplot(prop['bedroom'])","33485ab2":"sns.countplot(prop['bathroom'])","22e1d89d":"sns.scatterplot(prop['latitude'], prop['longitude'], alpha=0.7)","e58cb4b7":"prop['tags'].head()","c8c42470":"def remove_space(row):\n    return ['_'.join(i.split(' ')) for i in row]\n\nprop['tags'] = prop['tags'].map(remove_space)\n\nset1 = set()\nfor i in prop['tags']:\n    for j in i:\n        set1.add(j)\nprint(len(set1))\nprint(set1)","7a6b7773":"def tag_one_hot(row):\n    dict1 = {'Bathrooms':0, 'Bedrooms':0,'Living_rooms':0, 'Location':0, 'Picture':0, 'Price':0, 'Schools':0, 'Size_of_home':0}\n    for i in row:\n        dict1[i] = 1\n    return [i for i in dict1.values()]\ntags = prop['tags'].map(tag_one_hot)\n\ntag_cols = ['Bathrooms', 'Bedrooms','Living_rooms', 'Location', 'Picture', 'Price', 'Schools','Size_of_home']\ntag_data = pd.DataFrame(tags.tolist(), columns=tag_cols)\ntag_data.head()","b64e6e1f":"prop = prop.drop(['tags','_id','picture','address'],axis=1)\n\nfinal_prop = pd.concat((prop, tag_data),axis=1)\nfinal_prop.head()","3b60c81a":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nfinal_prop = scaler.fit_transform(final_prop)","b24df947":"from sklearn.metrics.pairwise import cosine_similarity\n\ncosine_simi = cosine_similarity(final_prop)\nplt.figure(figsize=(20,20))\nsns.heatmap(cosine_simi)","4309283c":"cosine_simi = pd.DataFrame(cosine_simi, columns = [i for i in range(100)], index = [i for i in range(100)])\ncosine_simi.head()","9868e50b":"user.head()","9e7638b9":"def recommendations(row):\n    props = {}\n    for i in row:\n        props[cosine_simi[i].sort_values(ascending=False).index[1]] = cosine_simi[i].sort_values(ascending=False)[1]\n    return [i for i,j in props.items() if (j>0.5) & (i not in row)]","ea685e74":"user['Recommendation'] = user.userSaveHomes.map(recommendations)\nuser.head()","a7183f14":"values are in **list** form.  \n**Task** : encoding to **One Hot** form","34efcb4c":"we have to scale the data before appling cosine_similarity.","28bf14f4":"### Using Cosine Similarity ([formulla](http:\/\/https:\/\/www.google.com\/imgres?imgurl=https%3A%2F%2Fneo4j.com%2Fdocs%2Fgraph-algorithms%2Fcurrent%2Fimages%2Fcosine-similarity.png&imgrefurl=https%3A%2F%2Fneo4j.com%2Fdocs%2Fgraph-algorithms%2Fcurrent%2Fexperimental-algorithms%2Fcosine%2F&docid=AAABX5A8IsaypM&tbnid=0E6-Qrb_6Rcw5M%3A&vet=10ahUKEwjavcPdv_jkAhWKqI8KHb-6DY8QMwhNKAIwAg..i&w=800&h=208&bih=625&biw=1366&q=cosine%20similarity%20formula&ved=0ahUKEwjavcPdv_jkAhWKqI8KHb-6DY8QMwhNKAIwAg&iact=mrc&uact=8))","c9827589":"You can see that the price column in **string** datatype, also contains ( $ ) and ( , ) punctualtions. \n\n**Task** : Normalizing **$308,711.19** to **308711.19** and **str** to **float**","7f9f1df9":"Removing **'picture'** and **'address'** because its not useful much for this case.","7dd8969d":"**8** unique tags.","30a084b9":"Mapping **tag** name to **0-1** form","53be40a5":"We got clean dataset,lets build model","4fb450e4":"**'bathroom'** and **'badroom'** does not require any changes. ","fe332c21":"saving Recommended properties to **'Recommendation'** column.","08b57d3d":"we need only **userSaveHomes** to find most similar property","9f5fbe47":"storing all cosine similaries values to dataframe","dff6f04d":"Let's Explore **'tags'** feature","bfd694ff":"# Recommendation System","84691144":"### Prediction(recommendations)","6f04a4ce":"* 1.0 = more Similar\n* 0.0 = no similar","4e32eb34":"## EDA","7dc05d6a":" Imports","b9b81ef8":"below function calculates the similarity between userSaveHome and all Properties,and returning the property which has high similar value.","61b56266":"Reading datasets","5bc642d8":"## Modeling"}}