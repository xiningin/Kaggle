{"cell_type":{"6c31f0c2":"code","ec3926eb":"code","3e5b7fd6":"code","f7825eb6":"code","65895f70":"code","7d6fb9d4":"code","7ef07aaa":"code","6c8faaec":"code","0ef72d6f":"code","e0c6f23d":"code","70f4921f":"code","82dc4194":"code","ba0762ea":"code","396a1ba2":"code","ca9e999a":"code","7ab8913e":"code","0563b92f":"code","566246ce":"markdown","42a05a9b":"markdown","10bb1eda":"markdown","27ccbe7f":"markdown","b7e56d51":"markdown","8136434e":"markdown","a8c9b691":"markdown","79933077":"markdown","c9f32397":"markdown","f8f1dabf":"markdown","39f1dab5":"markdown","67eaf4df":"markdown","fef0e886":"markdown","dd38f147":"markdown"},"source":{"6c31f0c2":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ec3926eb":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\n\n# We will use the sklearn preprocessing library, as it will be easier to standardize the data.\nfrom sklearn import preprocessing\n\n# Load the data\nraw_csv_data = pd.read_csv('\/kaggle\/input\/audiobook-app-data\/audiobook_data_2.csv')\nraw_csv_data.head()","3e5b7fd6":"# The inputs are all columns in the csv, except for the first one [:,0]\n# (which is just the arbitrary customer IDs that bear no useful information),\n# and the last one [:,-1] (which is our targets)\n\nunscaled_inputs_all = raw_csv_data.iloc[:,1:-1]\n\n# The targets are in the last column. That's how datasets are conventionally organized.\ntargets_all = raw_csv_data.iloc[:,-1]","f7825eb6":"print(type(unscaled_inputs_all))\nunscaled_inputs_all.head()","65895f70":"print(type(targets_all))\ntargets_all.head()","7d6fb9d4":"unscaled_inputs_all = unscaled_inputs_all.to_numpy()\ntargets_all = targets_all.to_numpy()","7ef07aaa":"print(type(unscaled_inputs_all))\nprint(type(targets_all))","6c8faaec":"# Count how many targets are 1 (meaning that the customer did convert)\nnum_one_targets = int(np.sum(targets_all))\n\n# Set a counter for targets that are 0 (meaning that the customer did not convert)\nzero_targets_counter = 0\n\n# We want to create a \"balanced\" dataset, so we will have to remove some input\/target pairs.\n# Declare a variable that will do that:\nindices_to_remove = []\n\n# Count the number of targets that are 0. \n# Once there are as many 0s as 1s, mark entries where the target is 0.\nfor i in range(targets_all.shape[0]):\n    if targets_all[i] == 0:\n        zero_targets_counter += 1\n        if zero_targets_counter > num_one_targets:\n            indices_to_remove.append(i)","0ef72d6f":"# Create two new variables, one that will contain the inputs, and one that will contain the targets.\n# We delete all indices that we marked \"to remove\" in the loop above.\nunscaled_inputs_equal_priors = np.delete(unscaled_inputs_all, indices_to_remove, axis=0)\ntargets_equal_priors = np.delete(targets_all, indices_to_remove, axis=0)","e0c6f23d":"# That's the only place we use sklearn functionality. We will take advantage of its preprocessing capabilities\n# It's a simple line of code, which standardizes the inputs, as we explained in one of the lectures.\n# At the end of the business case, you can try to run the algorithm WITHOUT this line of code. \n# The result will be interesting.\nscaled_inputs = preprocessing.scale(unscaled_inputs_equal_priors)","70f4921f":"# When the data was collected it was actually arranged by date\n# Shuffle the indices of the data, so the data is not arranged in any way when we feed it.\n# Since we will be batching, we want the data to be as randomly spread out as possible\nshuffled_indices = np.arange(scaled_inputs.shape[0])\nnp.random.shuffle(shuffled_indices)\n\n# Use the shuffled indices to shuffle the inputs and targets.\nshuffled_inputs = scaled_inputs[shuffled_indices]\nshuffled_targets = targets_equal_priors[shuffled_indices]","82dc4194":"# Count the total number of samples\nsamples_count = shuffled_inputs.shape[0]\n\n# Count the samples in each subset, assuming we want 80-10-10 distribution of training, validation, and test.\n# Naturally, the numbers are integers.\ntrain_samples_count = int(0.8 * samples_count)\nvalidation_samples_count = int(0.1 * samples_count)\n\n# The 'test' dataset contains all remaining data.\ntest_samples_count = samples_count - train_samples_count - validation_samples_count\n\n# Create variables that record the inputs and targets for training\n# In our shuffled dataset, they are the first \"train_samples_count\" observations\ntrain_inputs = shuffled_inputs[:train_samples_count]\ntrain_targets = shuffled_targets[:train_samples_count]\n\n# Create variables that record the inputs and targets for validation.\n# They are the next \"validation_samples_count\" observations, folllowing the \"train_samples_count\" we already assigned\nvalidation_inputs = shuffled_inputs[train_samples_count:train_samples_count+validation_samples_count]\nvalidation_targets = shuffled_targets[train_samples_count:train_samples_count+validation_samples_count]\n\n# Create variables that record the inputs and targets for test.\n# They are everything that is remaining.\ntest_inputs = shuffled_inputs[train_samples_count+validation_samples_count:]\ntest_targets = shuffled_targets[train_samples_count+validation_samples_count:]\n\n# We balanced our dataset to be 50-50 (for targets 0 and 1), but the training, validation, and test were \n# taken from a shuffled dataset. Check if they are balanced, too. Note that each time you rerun this code, \n# you will get different values, as each time they are shuffled randomly.\n# Normally you preprocess ONCE, so you need not rerun this code once it is done.\n# If you rerun this whole sheet, the npzs will be overwritten with your newly preprocessed data.\n\n# Print the number of targets that are 1s, the total number of samples, and the proportion for training, validation, and test.\nprint(np.sum(train_targets), train_samples_count, np.sum(train_targets) \/ train_samples_count)\nprint(np.sum(validation_targets), validation_samples_count, np.sum(validation_targets) \/ validation_samples_count)\nprint(np.sum(test_targets), test_samples_count, np.sum(test_targets) \/ test_samples_count)","ba0762ea":"# Save the three datasets in *.npz.\n# In the next lesson, you will see that it is extremely valuable to name them in such a coherent way!\n\nnp.savez('Audiobooks_data_train', inputs=train_inputs, targets=train_targets)\nnp.savez('Audiobooks_data_validation', inputs=validation_inputs, targets=validation_targets)\nnp.savez('Audiobooks_data_test', inputs=test_inputs, targets=test_targets)","396a1ba2":"# let's create a temporary variable npz, where we will store each of the three Audiobooks datasets\nnpz = np.load('Audiobooks_data_train.npz')\n\n# we extract the inputs using the keyword under which we saved them\n# to ensure that they are all floats, let's also take care of that\ntrain_inputs = npz['inputs'].astype(np.float)\n# targets must be int because of sparse_categorical_crossentropy (we want to be able to smoothly one-hot encode them)\ntrain_targets = npz['targets'].astype(np.int)\n\n# we load the validation data in the temporary variable\nnpz = np.load('Audiobooks_data_validation.npz')\n# we can load the inputs and the targets in the same line\nvalidation_inputs, validation_targets = npz['inputs'].astype(np.float), npz['targets'].astype(np.int)\n\n# we load the test data in the temporary variable\nnpz = np.load('Audiobooks_data_test.npz')\n# we create 2 variables that will contain the test inputs and the test targets\ntest_inputs, test_targets = npz['inputs'].astype(np.float), npz['targets'].astype(np.int)","ca9e999a":"# Set the input and output sizes\ninput_size = 10\noutput_size = 2\n# Use same hidden layer size for both hidden layers. Not a necessity.\nhidden_layer_size = 50\n    \n# define how the model will look like\nmodel = tf.keras.Sequential([\n    # tf.keras.layers.Dense is basically implementing: output = activation(dot(input, weight) + bias)\n    # it takes several arguments, but the most important ones for us are the hidden_layer_size and the activation function\n    tf.keras.layers.Dense(hidden_layer_size, activation='relu'), # 1st hidden layer\n    tf.keras.layers.Dense(hidden_layer_size, activation='relu'), # 2nd hidden layer\n    # the final layer is no different, we just make sure to activate it with softmax\n    tf.keras.layers.Dense(output_size, activation='softmax') # output layer\n])\n\n\n### Choose the optimizer and the loss function\n\n# we define the optimizer we'd like to use, \n# the loss function, \n# and the metrics we are interested in obtaining at each iteration\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n\n### Training\n# That's where we train the model we have built.\n\n# set the batch size\nbatch_size = 100\n\n# set a maximum number of training epochs\nmax_epochs = 100\n\n# set an early stopping mechanism\n# let's set patience=2, to be a bit tolerant against random validation loss increases\nearly_stopping = tf.keras.callbacks.EarlyStopping(patience=2)\n\n# fit the model\n# note that this time the train, validation and test data are not iterable\nmodel.fit(train_inputs, # train inputs\n          train_targets, # train targets\n          batch_size=batch_size, # batch size\n          epochs=max_epochs, # epochs that we will train for (assuming early stopping doesn't kick in)\n          # callbacks are functions called by a task when a task is completed\n          # task here is to check if val_loss is increasing\n          callbacks=[early_stopping], # early stopping\n          validation_data=(validation_inputs, validation_targets), # validation data\n          verbose = 2 # making sure we get enough information about the training process\n          )  ","7ab8913e":"test_loss, test_accuracy = model.evaluate(test_inputs, test_targets)","0563b92f":"print('\\nTest loss: {0:.2f}. Test accuracy: {1:.2f}%'.format(test_loss, test_accuracy*100.))","566246ce":"### Standardize the inputs","42a05a9b":"Using the initial model and hyperparameters given in this notebook, the final test accuracy should be roughly around 91%.\n\nNote that each time the code is rerun, we get a different accuracy because each training is different. \n\nWe have intentionally reached a suboptimal solution, so you can have space to build on it!","10bb1eda":"## Create the machine learning algorithm","27ccbe7f":"### Save the three datasets in *.npz","b7e56d51":"### Problem\n\nWe are given data from an Audiobook App. Logically, it relates to the audio versions of books ONLY. Each customer in the database has made a purchase at least once, that's why he\/she is in the database. We want to create a machine learning algorithm based on our available data that can predict if a customer will buy again from the Audiobook company.\n\nThe main idea is that if a customer has a low probability of coming back, there is no reason to spend any money on advertising to him\/her. If we can focus our efforts SOLELY on customers that are likely to convert again, we can make great savings. Moreover, this model can identify the most important metrics for a customer to come back again. Identifying new customers creates value and growth opportunities.\n\nWe have a .csv summarizing the data. There are several variables: Customer ID, ), Book length overall (sum of the minute length of all purchases), Book length avg (average length in minutes of all purchases), Price paid_overall (sum of all purchases) ,Price Paid avg (average of all purchases), Review (a Boolean variable whether the customer left a review), Review out of 10 (if the customer left a review, his\/her review out of 10, Total minutes listened, Completion (from 0 to 1), Support requests (number of support requests; everything from forgotten password to assistance for using the App), and Last visited minus purchase date (in days).\n\nThese are the inputs (excluding customer ID, as it is completely arbitrary. It's more like a name, than a number).\n\nThe targets are a Boolean variable (0 or 1). We are taking a period of 2 years in our inputs, and the next 6 months as targets. So, in fact, we are predicting if: based on the last 2 years of activity and engagement, a customer will convert in the next 6 months. 6 months sounds like a reasonable time. If they don't convert after 6 months, chances are they've gone to a competitor or didn't like the Audiobook way of digesting information. \n\nThe task is simple: create a machine learning algorithm, which is able to predict if a customer will buy again. \n\nThis is a classification problem with two classes: won't buy and will buy, represented by 0s and 1s. \n\nLet's start!!!","8136434e":"### Balance the dataset","a8c9b691":"## Test the model\n\nAs we discussed in the lectures, after training on the training data and validating on the validation data, we test the final prediction power of our model by running it on the test dataset that the algorithm has NEVER seen before.\n\nIt is very important to realize that fiddling with the hyperparameters overfits the validation dataset. \n\nThe test is the absolute final instance. You should not test before you are completely done with adjusting your model.\n\nIf you adjust your model after testing, you will start overfitting the test dataset, which will defeat its purpose.","79933077":"### Shuffle the data","c9f32397":"### Model\nOutline, optimizers, loss, early stopping and training","f8f1dabf":"### Data","39f1dab5":"### Extract the data from the csv","67eaf4df":"### Loading the Data","fef0e886":"### Split the dataset into train, validation, and test","dd38f147":"## Preprocess the data. Balance the dataset. Create 3 datasets: training, validation, and test. Save the newly created sets in a tensor friendly format (e.g. *.npz)\n\nSince we are dealing with real life data, we will need to preprocess it a bit. This is the relevant code, which is not that hard, but is crucial to creating a good model.\n\nIf we want to know how to do that, go through the code with comments. In any case, this should do the trick for most datasets organized in the way: many inputs, and then 1 cell containing the targets (supersized learning datasets). Keep in mind that a specific problem may require additional preprocessing.\n\nNote that we have removed the header row, which contains the names of the categories. We simply want the data."}}