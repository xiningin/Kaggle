{"cell_type":{"fa701cd0":"code","601b97c0":"code","7677d623":"code","c4452eec":"code","95179fbb":"code","911f1121":"code","c81e0642":"code","2d8d89da":"code","2deed101":"code","8b02a900":"code","ba590d22":"code","c59c8c76":"code","7c23b394":"code","538b94f0":"code","ae42a385":"code","4aeb5744":"code","1efa1b1c":"code","b8e33e05":"code","200c1644":"code","da08acff":"code","d5beff0a":"code","7b5ac75f":"code","347a0093":"code","3461dfd2":"code","2924a587":"code","1d12c8cc":"code","08ba4537":"code","1bc82037":"code","c6b56f9e":"code","b5a4223e":"code","be39b613":"code","bc7048df":"code","804f53ca":"code","58ae2654":"code","7d58ef92":"code","81c3c217":"code","af3d48b3":"code","e78ad90f":"code","d81d4b75":"code","d5b4af1b":"code","f457ecdf":"code","e125a80a":"markdown","f06ef7b5":"markdown","d57cc195":"markdown","5887cdd2":"markdown","be713c06":"markdown","45aef550":"markdown","604698c4":"markdown","20c2c0d2":"markdown","36e9c725":"markdown"},"source":{"fa701cd0":"import pandas as pd\nimport numpy as np\nimport math\nfrom pathlib import Path\nimport plotly.graph_objs as go\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\n\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import OneHotEncoder\n\nfrom sklearn.model_selection import StratifiedShuffleSplit\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import metrics\nfrom sklearn.inspection import plot_partial_dependence\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_score\n\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import plot_confusion_matrix","601b97c0":"df = pd.read_csv('\/kaggle\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv')\ndf.head()","7677d623":"age = df.groupby('age').count()['id'].reset_index()\nage['count'] = age['id']\n\nfig = px.scatter(age, x=\"age\", y=\"count\", title = 'age distribution')\nfig.show()","c4452eec":"fig = px.scatter(df, x=\"age\", y=\"avg_glucose_level\", color=\"gender\")\nfig.show()","95179fbb":"sm_st = df.groupby('smoking_status').agg('sum')['stroke'].reset_index()\nsm_st['total'] = df.groupby('smoking_status').agg('count')['id'].reset_index()['id']\nsm_st['% of strokes'] = round(sm_st['stroke']\/ sm_st['total']*100,1)\n\nfig = go.Figure(data=[\n    go.Bar(name='no stroke', x=sm_st.smoking_status, y=sm_st.total.tolist()),\n    go.Bar(name='stroke', x=sm_st.smoking_status, y=sm_st.stroke.tolist(),\n           text=sm_st['% of strokes'], texttemplate='%{text}%', textposition='outside')\n])\nfig.update_layout(barmode='stack', title = 'Stroke ratio relative to smoking status')\nfig.show()","911f1121":"df['ever_married'] = df['ever_married'].apply(lambda x: 1 if x == 'Yes' else 0)\n\nfig = make_subplots(rows=1, cols=3, specs=[[{\"type\": \"pie\"},{\"type\": \"pie\"},{\"type\": \"pie\"}]], \n                    shared_xaxes=True, shared_yaxes=False, vertical_spacing=0.01)\n\n\ntrace1 = go.Pie(labels=df.hypertension.value_counts().index, values=df.hypertension.value_counts().values, title = 'hypertension')\ntrace2 = go.Pie(labels=df.heart_disease.value_counts().index, values=df.heart_disease.value_counts().values, title = 'heart_disease')\ntrace3 = go.Pie(labels=df.ever_married.value_counts().index, values=df.ever_married.value_counts().values, title = 'ever_married' )\n\nfig.add_trace(trace1, 1, 1)\nfig.add_trace(trace2, 1, 2)\nfig.add_trace(trace3, 1, 3)\nfig.update_traces(hole=.5)\n\nfig.show()","c81e0642":"fig = go.Figure([go.Bar(\n    x=df.work_type.value_counts().index, \n    y=df.work_type.value_counts().values , \n    text=df.work_type.value_counts().values)])\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(title = 'work type')\nfig.show()","2d8d89da":"def pie_plot(col):\n    \n    labels = df[col].value_counts().index\n    values= df[col].value_counts().values\n    title = col\n    fig = go.Figure(data=[go.Pie(labels=labels, values=values, title = title)])\n    fig.update_layout(\n        autosize=False,\n        width=500,\n        height=500)\n    return fig","2deed101":"pie_plot('gender')","8b02a900":"df = df[df['gender']!='Other'].reset_index(drop=True)","ba590d22":"pie_plot('Residence_type')","c59c8c76":"pie_plot('stroke')","7c23b394":"def box_plot(x,y):\n    return px.box(df, \n                  x=x, \n                  y=y, \n                  points='all',\n                  title= x + ' & ' + y,\n                  width=800,\n                  height=500)","538b94f0":"box_plot('stroke','bmi')","ae42a385":"box_plot('stroke','age')","4aeb5744":"px.box(df[df['stroke']==1]['age'])","1efa1b1c":"idx_to_drop = df[df['stroke']==1][df[df['stroke']==1]['age']<15].index\ndf.drop(idx_to_drop,inplace=True)\ndf = df.reset_index(drop=True)","b8e33e05":"box_plot('stroke','avg_glucose_level')","200c1644":"fig = px.scatter(df, x=\"bmi\", y=\"avg_glucose_level\")\nfig.show()","da08acff":"corr = df.drop('id',axis=1).corr()\ndata = go.Heatmap(z=corr.values,\n                  y=corr.index.values,\n                  x=corr.columns.values,\n                 colorscale='RdBu')\nfig = go.Figure(data=data)\nfig.show()","d5beff0a":"df.corr().stroke.sort_values()[1:-1].plot(kind='barh')","7b5ac75f":"df = df.drop('id',axis=1)","347a0093":"split = StratifiedShuffleSplit(n_splits=1, test_size=0.33, random_state=666)\nfor train_index, test_index in split.split(df, df['stroke']):\n    train = df.loc[train_index]\n    test = df.loc[test_index]","3461dfd2":"X_train = train.drop('stroke',axis=1)\ny_train = train['stroke']\n\nX_test = test.drop('stroke',axis=1)\ny_test = test['stroke']","2924a587":"cols_to_encode = []\nfor col in X_train.columns:\n    if X_train[col].dtype == 'O':\n        cols_to_encode.append(col)\nnum_col = list(X_train.drop(cols_to_encode,axis=1).columns)\n\nprint (f'categorical cols: {cols_to_encode}',\"\\n\"\n       f'numerical cols: {num_col}')","1d12c8cc":"from sklearn.base import BaseEstimator, TransformerMixin\nclass Encoder(BaseEstimator, TransformerMixin):\n    def __init__(self):\n        self.num_col = num_col\n        self.cat_col = cols_to_encode\n    \n    def fit(self, X, y=None):\n        return self\n    \n    def transform(self,X):\n        \n        X['bmi'] = X['bmi'].fillna(X['bmi'].median())\n        num = X[self.num_col].copy()\n        cat = X[self.cat_col].copy()\n        \n        for column in self.cat_col:\n            s = pd.get_dummies(cat[column], prefix = column)\n            cat = pd.concat([cat, s], axis=1).drop([column], axis=1)\n        \n        X = pd.concat([num, cat], axis = 1)\n\n        return X","08ba4537":"encoder = Encoder()\nX_train = encoder.transform(X_train)","1bc82037":"rfc = RandomForestClassifier(n_estimators = 40, min_samples_leaf = 3, max_features=0.5, n_jobs=-1, oob_score=True)\nrfc.fit(X_train, y_train)","c6b56f9e":"feature_importance = pd.DataFrame({'Feature' : X_train.columns, 'Importance' : rfc.feature_importances_})\nfeature_importance.sort_values('Importance', ascending=False, inplace=True)","b5a4223e":"fig = go.Figure([go.Bar(\nx=feature_importance.Feature, \ny=feature_importance.Importance, \ntext=feature_importance.Importance)])\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(title = 'Feature importance')\nfig.show()","be39b613":"to_keep = feature_importance[feature_importance['Importance'] > 0.02].Feature.values","bc7048df":"X_train = X_train[to_keep]","804f53ca":"rfc = RandomForestClassifier(n_estimators=40, min_samples_leaf = 3, max_features = 0.4, n_jobs=-1, oob_score=True)\nrfc.fit(X_train, y_train)","58ae2654":"param_grid = [\n    {'n_estimators': [40, 60, 90, 120], 'max_features': [0.4, 0.5, 0.7], 'min_samples_leaf': [2, 3, 4, 5]},\n  ]\n\ngrid_search = GridSearchCV(rfc, param_grid, cv = 3,\n                           scoring='neg_mean_squared_error',\n                           return_train_score=True)\n\ngrid_search.fit(X_train, y_train)","7d58ef92":"rfc = RandomForestClassifier(n_estimators = grid_search.best_params_['n_estimators'], \n                              min_samples_leaf = grid_search.best_params_['min_samples_leaf'], \n                              max_features = grid_search.best_params_['max_features'],  \n                              n_jobs=-1, \n                              oob_score=True)\nrfc.fit(X_train, y_train)","81c3c217":"X_test = encoder.transform(X_test)\nX_test = X_test[to_keep]","af3d48b3":"plot_confusion_matrix(rfc, X_test, y_test)","e78ad90f":"from sklearn.metrics import accuracy_score, confusion_matrix, roc_auc_score, ConfusionMatrixDisplay, precision_score, recall_score, f1_score, classification_report, roc_curve, plot_roc_curve, auc, precision_recall_curve, plot_precision_recall_curve, average_precision_score","d81d4b75":"preds = rfc.predict(X_test)\nprob = rfc.predict_proba(X_test)[:,1]","d5b4af1b":"print(classification_report(y_test, preds))\nprint(f'ROC AUC score: {roc_auc_score(y_test, prob)}')\nprint('Accuracy Score: ',accuracy_score(y_test, preds))\nprint('F1 Score: ',f1_score(y_test, preds))\nprint('Recall: ', recall_score(y_test, preds))","f457ecdf":"false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, prob)\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(x=false_positive_rate, y=true_positive_rate, name=\"auc\"))\nfig.add_trace(go.Scatter(x=np.arange(0,1,0.01), y=np.arange(0,1,0.01)))\n\nfig.update_layout(\n        title = 'ROC curve',\n        autosize=False,\n        width=600,\n        height=600)\nfig.show()","e125a80a":"> # Predictions","f06ef7b5":"Removing outlier from gender column","d57cc195":"> # Data Preparation","5887cdd2":"The model fails to predict stroke cases and needs improvement","be713c06":"There are stroke cases for ages 1.3 and 14 which are outliers","45aef550":"> # Training","604698c4":"---------","20c2c0d2":"\nLet's remove those outliers\n","36e9c725":"> # Data Visualization"}}