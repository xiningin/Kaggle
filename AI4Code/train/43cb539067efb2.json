{"cell_type":{"bf066bf6":"code","207407a3":"code","4850a392":"code","3ba46fde":"code","7fc808a5":"code","834e8410":"code","74008f3d":"code","0b084fc4":"code","9e08e8b5":"code","0c4f9643":"code","60466546":"code","da69896f":"code","f882d839":"code","1f60c124":"code","d44462ec":"code","0ec2c1df":"code","4099e002":"code","39295e67":"markdown","e4f198f4":"markdown","815f19a3":"markdown","c653c8f5":"markdown","62c53b53":"markdown","f6f22a65":"markdown","a950c184":"markdown","21a48f33":"markdown","3309c331":"markdown","b9811682":"markdown","9e19bc24":"markdown","474d41ca":"markdown","a53c52f8":"markdown"},"source":{"bf066bf6":"import os\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\nfrom PIL import Image\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import load_img, img_to_array\nfrom tensorflow.keras.applications.vgg16 import preprocess_input\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, BatchNormalization, Conv2D, MaxPool2D, Flatten\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n\n#filtering warnings\nimport warnings\nwarnings.filterwarnings('ignore')","207407a3":"'''\n# Load the Drive helper and mount\nfrom google.colab import drive\n\n# This will prompt for authorization.\ndrive.mount('\/content\/drive')\n'''","4850a392":"#path to data\npath = '..\/input\/covid19-xray-dataset-train-test-sets\/xray_dataset_covid19\/'\n\n#Training Images\ntrain_norm = os.listdir(path + \"train\/NORMAL\")\ntrain_covid = os.listdir(path + \"train\/PNEUMONIA\")\n\n#Testing Images\ntest_norm = os.listdir(path + \"test\/NORMAL\")\ntest_covid = os.listdir(path + \"test\/PNEUMONIA\")","3ba46fde":"#Dataframe function\ndef dataframe(filenames, classes):\n    return pd.DataFrame({'Filename':filenames, 'Class':[classes]*len(filenames)})\n\n#Forming Train and Test Dataframe\ntrain_norm_df = dataframe(train_norm, 'Normal')\ntrain_covid_df = dataframe(train_covid, 'Covid')\n\ntest_norm_df = dataframe(test_norm, 'Normal')\ntest_covid_df = dataframe(test_covid, 'Covid')\n\n#Concating both classes into single datarame\ntrain_df = pd.concat([train_norm_df, train_covid_df], axis=0)\ntest_df = pd.concat([test_norm_df, test_covid_df], axis=0)","7fc808a5":"#Path maker function\ndef pathmaker(df_name, df, empty_list):\n    for i in df_name.values:\n        if i[1] == 'Normal':\n            empty_list.append(str(path + df + '\/NORMAL\/'+i[0]))\n        else:\n            empty_list.append(str(path + df + '\/PNEUMONIA\/'+i[0]))\n\n\n#Empty list to be passed in path maker\ntrain_path = []\ntest_path = []\n\n#Assigning Path maker\npathmaker(train_df, 'train', train_path)\npathmaker(test_df, 'test', test_path)\n\ntrain_df['Path'] = train_path\ntest_df['Path'] = test_path\n\n#Shuffling \/ Re-arranging rows\ntrain_df = train_df.sample(frac=1).reset_index(drop=True).iloc[:, 1:]\ntest_df = test_df.sample(frac=1).reset_index(drop=True).iloc[:, 1:]\n\ntrain_df.head()","834e8410":"# Plotting Normal VS Covid in Grid\n\nsns.set_context('talk')\nplt.figure(figsize=(25,12))\nplt.subplots_adjust(hspace=0.3)\n\nplt.subplot(2, 2, 1)\nplt.imshow(mpimg.imread(train_df[train_df['Class'] == 'Normal']['Path'].values[0]))\nplt.title('Normal')\n\nplt.subplot(2, 2, 2)\nplt.imshow(mpimg.imread(train_df[train_df['Class'] == 'Normal']['Path'].values[6]))\nplt.title('Normal')\n\nplt.subplot(2, 2, 3)\nplt.imshow(mpimg.imread(train_df[train_df['Class'] == 'Covid']['Path'].values[28]))\nplt.title('COVID-19')\n\nplt.subplot(2, 2, 4)\nplt.imshow(mpimg.imread(train_df[train_df['Class'] == 'Covid']['Path'].values[26]))\nplt.title('COVID-19')","74008f3d":"#Category count Plot\nsns.countplot(train_df['Class'], palette='BrBG')\nplt.title('Category Count')","0b084fc4":"# Image to matrix function\n\ndef img_to_mtx(data, empty_array):\n    for i in data:\n        temp_img = image.load_img(i, target_size=(150,150))\n        temp_img = img_to_array(temp_img)\n        empty_array.append(temp_img)\n\n#empty list\ntrain_imgs = []\ntest_imgs = []\n\n#Applying Image to Matrix\nimg_to_mtx(train_df['Path'], train_imgs)\nimg_to_mtx(test_df['Path'], test_imgs)\n\n#keras preprocessing\ntrain_imgs = preprocess_input(np.array(train_imgs))\ntest_imgs = preprocess_input(np.array(test_imgs))","9e08e8b5":"#String to Numeric Label\ntrain_df['Class'] = train_df['Class'].replace(['Covid','Normal'], [1,0])\ntest_df['Class'] = test_df['Class'].replace(['Covid','Normal'], [1,0])\n\n#defining output layer's output\nytrain = to_categorical(train_df['Class'], num_classes=2)","0c4f9643":"#Saving best model while monitoring accuracy\nmodel_chkpt = ModelCheckpoint('best_mod.h5', save_best_only=True, monitor='accuracy')\n\n#early stopping for preventing overfitting\nearly_stopping = EarlyStopping(monitor='loss', restore_best_weights=False, patience=10)","60466546":"model = Sequential()\n\n#Normalization & Input\nmodel.add(BatchNormalization(input_shape=(150, 150, 3)))\n\n#CNN\nmodel.add(Conv2D(32, kernel_size=(3,3), padding='same', activation='relu'))\n\n#Max Pooling\nmodel.add(MaxPool2D(pool_size=(2,2)))\n\n#Dropout\nmodel.add(Dropout(0.25))\n\n#Flattening I\/P\nmodel.add(Flatten())\n\n#Dense layer\nmodel.add(Dense(128, activation='relu'))\n\n#Dropout\nmodel.add(Dropout(0.1))\n\n#Output Layer with sigmoid\nmodel.add(Dense(2, activation='sigmoid'))\n\n#Adam as optimizer, Accuracy as evaluation metrics\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])","da69896f":"#overview of deep neural network\nmodel.summary()","f882d839":"#Model fitting and tracking historical accuracy \/ error score\nhistory = model.fit(train_imgs, ytrain, \n          validation_split=0.10, \n          epochs=20, batch_size=32, shuffle=True, \n          callbacks=[model_chkpt, early_stopping]\n         )","1f60c124":"#plotting Learning curve over No. of Iterations\nsns.set_context('talk')\nplt.figure(figsize=(10,7))\nplt.plot(history.history['loss'], 'b', label='Training', marker='x')\nplt.plot(history.history['val_loss'], 'r', label='Validation', marker='o')\nplt.legend()\nplt.title('Learning Curve')\nplt.xlabel('Iterations')\nplt.ylabel('Error')","d44462ec":"#prediction on test set\npred = model.predict(test_imgs, batch_size=32)\n#pred\n\n#converting Probabilities to labels\nlabel = np.argmax(pred, axis=1)\n#label","0ec2c1df":"#Accuracy Score\nprint ('Accuracy Score : ', accuracy_score(label, test_df['Class'].values), '\\n')\n\n#precision, recall report\nprint ('Classification Report :\\n\\n' ,classification_report(label, test_df['Class'].values))","4099e002":"#plotting confusion matrix\nsns.heatmap(confusion_matrix(label, test_df['Class'].values), annot=True, cmap='inferno_r', square=True)\nplt.xlabel('Actual Values')\nplt.ylabel('Predicted Values')\nplt.title('Confusion Matrix')","39295e67":"### Mounting Google drive","e4f198f4":"# COVID-19 Xray Dataset (Train & Test Sets)\n\n\n### Description :\n\n- The 2019 novel coronavirus (COVID-19) presents several unique features. While the diagnosis is confirmed using polymerase chain reaction (PCR), infected patients with pneumonia may present on chest X-ray and computed tomography (CT) images with a pattern that is only moderately characteristic for the human eye Ng, 2020. COVID-19\u2019s rate of transmission depends on our capacity to reliably identify infected patients with a low rate of false negatives. In addition, a low rate of false positives is required to avoid further increasing the burden on the healthcare system by unnecessarily exposing patients to quarantine if that is not required. Along with proper infection control, it is evident that timely detection of the disease would enable the implementation of all the supportive care required by patients affected by COVID-19.\n\n- In late January, a Chinese team published a paper detailing the clinical and paraclinical features of COVID-19. They reported that patients present abnormalities in chest CT images with most having bilateral involvement Huang 2020. Bilateral multiple lobular and subsegmental areas of consolidation constitute the typical findings in chest CT images of intensive care unit (ICU) patients on admission Huang 2020. In comparison, non-ICU patients show bilateral ground-glass opacity and subsegmental areas of consolidation in their chest CT images Huang 2020. In these patients, later chest CT images display bilateral ground-glass opacity with resolved consolidation Huang 2020.\n\n- COVID is possibly better diagnosed using radiological imaging Fang, 2020 and Ai 2020.","815f19a3":"### Deep Neural Network - Implementing CNN","c653c8f5":"### Prediction","62c53b53":"### Learning curve over Number of Iterations","f6f22a65":"### Listing data and Dataframe creation","a950c184":"### Label Encoding","21a48f33":"### Execution","3309c331":"### Exploratory Data Analysis","b9811682":"### Implementation of Early Stopping module & Saving Best Model Architecture","9e19bc24":"### Importing required Utilities","474d41ca":"### Performance Evaluation - Accuracy, Classification Report & Confusion Matrix","a53c52f8":"### Image Processing"}}