{"cell_type":{"c707adb4":"code","eca00dd8":"code","eff98735":"code","2b74be76":"code","83c9e258":"code","57bfc8b5":"code","500311f5":"code","93940603":"code","f0998eed":"code","6c4c9e34":"code","5210f5be":"code","28c5f3de":"code","8c6cd80f":"code","84ed9a6f":"code","12a12829":"code","340a070c":"code","f729f47d":"markdown","45a2abc6":"markdown","488f4ef2":"markdown","daf570d5":"markdown","d971ee1e":"markdown","2bc50ff3":"markdown","69a7ac98":"markdown","7a7e799c":"markdown","14d8804f":"markdown","d8d5c14a":"markdown","a81bb004":"markdown","378a7c5a":"markdown","9b13a5b8":"markdown","bd53fcc7":"markdown","7dfe6005":"markdown","b7cc0ab9":"markdown"},"source":{"c707adb4":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport random\nfrom tqdm import tqdm\nfrom gensim.models import Word2Vec \nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings;\nwarnings.filterwarnings('ignore')","eca00dd8":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","eff98735":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","2b74be76":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n","83c9e258":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n","57bfc8b5":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# Online Sensors.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf1 = pd.read_csv('\/kaggle\/input\/Online Sensors.csv', delimiter=',', nrows = nRowsRead)\ndf1.dataframeName = 'Online Sensors.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","500311f5":"df1.head(5)","93940603":"df1.shape","f0998eed":"plotPerColumnDistribution(df1, 10, 5)","6c4c9e34":"plotCorrelationMatrix(df1, 8)","5210f5be":"plotScatterMatrix(df1, 12, 10)","28c5f3de":"# check for missing values\ndf1.isnull().sum()","8c6cd80f":"homes = df1[\"HomeId\"].unique().tolist()\nlen(homes)","84ed9a6f":"# shuffle Home ID's\nrandom.shuffle(homes)\n\n# extract 90% of Home ID's\nhome_train = [homes[i] for i in range(round(0.9*len(homes)))]\n\n# split data into train and validation set\ntrain_df = df1[df1['HomeId'].isin(home_train)]\nvalidation_df = df1[~df1['HomeId'].isin(home_train)]","12a12829":"# list to capture purchase history of the homes\npurchases_train = []\n\n# populate the list with the sensortype codes\nfor i in tqdm(home_train):\n    temp = train_df[train_df[\"HomeId\"] == i][\"sensortype\"].tolist()\n    purchases_train.append(temp)","340a070c":"# list to capture purchase history of the homes\npurchases_val = []\n\n# populate the list with the sensortype codes\nfor i in tqdm(validation_df['HomeId'].unique()):\n    temp = validation_df[validation_df[\"HomeId\"] == i][\"sensortype\"].tolist()\n    purchases_val.append(temp)","f729f47d":"## Import Libraries and Load Data","45a2abc6":"## Build word2vec Embeddings for Homes","488f4ef2":"The next hidden code cells define functions for plotting data. Click on the \"Code\" button in the published kernel to reveal the hidden code.","daf570d5":"Now you're ready to read in the data and use the plotting functions to visualize the data.","d971ee1e":"## Work in Process\nHappy Kaggling!","2bc50ff3":"The dataset contains 15 transactions and 9 attributes.","69a7ac98":"We do not have any missing values.\n","7a7e799c":"Let's check out the number of unique customers in our dataset.","14d8804f":"## Exploratory Analysis","d8d5c14a":"Let's take a quick look at what the data looks like:","a81bb004":"Scatter and density plots:","378a7c5a":"Correlation matrix:","9b13a5b8":"## Treat Missing Data","bd53fcc7":"### Let's check 1st file: \/kaggle\/input\/Online Sensors.csv","7dfe6005":"Distribution graphs (histogram\/bar graph) of sampled columns:","b7cc0ab9":"There is 1 csv file in the current version of the dataset:\n"}}