{"cell_type":{"8a45710f":"code","36a89aab":"code","d26bea7e":"code","a37a1e6d":"code","38ba78a1":"code","49966361":"code","c8aca6b2":"code","eece96f6":"code","92eae7ab":"code","38091b90":"code","203fb581":"code","89ba63c7":"code","9528621c":"code","054aa0af":"code","a0f8b313":"code","600a62bd":"markdown"},"source":{"8a45710f":"import pandas as pd\nimport numpy as np\n\nfrom sklearn.svm import LinearSVC\nfrom sklearn.feature_extraction.text import HashingVectorizer\nfrom sklearn.model_selection import train_test_split\nimport time\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder\nsns.set()\n%matplotlib inline\n","36a89aab":"df = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\ndf.head()","d26bea7e":"plt.hist(df['Target'].astype(str))\nplt.title('Target histogram')\nplt.ylabel('Count')\nplt.xlabel('Class')\nplt.show()","a37a1e6d":"for feature in df.columns:\n    print (feature)","38ba78a1":"train_null = df.isnull().sum()\ntrain_null_non_zero = train_null[train_null>0] \/ df.shape[0]\ntrain_null_non_zero","49966361":"df = df.fillna(df.mean())\ntest = test.fillna(test.mean())","c8aca6b2":"y = df['Target']\nX = df.drop(['Target', 'Id'], axis=1)\ntest_id = test['Id']\ntest.drop('Id', axis=1, inplace=True)","eece96f6":"train_test_df = pd.concat([X, test], axis=0)\ncols = [col for col in train_test_df.columns if train_test_df[col].dtype == 'object']\n\nle = LabelEncoder()\nfor col in cols:\n    le.fit(train_test_df[col])\n    X[col] = le.transform(X[col])\n    test[col] = le.transform(test[col])","92eae7ab":"from xgboost import XGBClassifier\nfrom xgboost import plot_importance","38091b90":"# fit model no training data\nmodel = XGBClassifier()\nmodel.fit(X, y)","203fb581":"plt.rcParams[\"figure.figsize\"] = (15,20)\nplot_importance(model)\nplt.show()","89ba63c7":"X_train,X_test,Y_train,Y_test = train_test_split(X,y,test_size=0.1)","9528621c":"from sklearn.svm import SVC\n\nstart = time.time()\n\nrbf_svm = SVC(kernel='rbf', gamma=0.8, C=12)\nrbf_svm.fit(X_train, Y_train)\n\n\nprint(\"Time: \" , time.time() - start )\nprint(\"Accuracy: \",rbf_svm.score(X_test, Y_test))","054aa0af":"y_predict = model.predict(test)","a0f8b313":"pred = pd.DataFrame({\"Id\": test_id, \"Target\": y_predict})\npred.to_csv('submission.csv', index=False)\npred.head()","600a62bd":"## Feature importance"}}