{"cell_type":{"3772600e":"code","4bcbf564":"code","7a106bd0":"code","8efd69fd":"code","abf3e0ce":"code","3871befd":"code","226e68a0":"code","34c2d974":"code","23d42387":"code","e5d0f8a4":"code","23425ac8":"code","8d1ddfdf":"markdown","66d68020":"markdown"},"source":{"3772600e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4bcbf564":"input_mushroom='..\/input\/mushroom-classification\/mushrooms.csv'\ndf_Mushroom = pd.read_csv(input_mushroom)","7a106bd0":"df_Mushroom.info()","8efd69fd":"#check null\ndf_Mushroom.isnull().sum()","abf3e0ce":"#Count number of distinct elements in specified axis.\ndf_Mushroom.nunique()","3871befd":"df_Mushroom.drop(columns = ['veil-type'], inplace = True)","226e68a0":"#create ordinal values for all categorical features\nfrom sklearn.preprocessing import LabelEncoder\nlabel_encoder = LabelEncoder()\ndf_Mushroom = df_Mushroom.apply(label_encoder.fit_transform)","34c2d974":"df_Mushroom.head()","23d42387":"from sklearn.model_selection import train_test_split\n\ny = df_Mushroom['class']\nX = df_Mushroom.drop(['class'], axis = 1)\n\nX_train_full, X_valid_full, y_train, y_valid = train_test_split(X, y, train_size=0.8, test_size=0.2, random_state = 0)\nX_train = X_train_full.copy()\nX_valid = X_valid_full.copy()","e5d0f8a4":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import accuracy_score\nmodel = RandomForestClassifier(max_depth=5, random_state=0)\nmodel.fit(X_train, y_train)\npreds = model.predict(X_valid)\nscore = mean_absolute_error(y_valid, preds)\nprint('MAE:', score)","23425ac8":"print(\"accuracy_score Test:\", \n      round(accuracy_score(y_valid,preds)*100,2))","8d1ddfdf":"`veil-type` just have a value\n=> Drop","66d68020":"- classes: edible=e, poisonous=p\n- cap-shape: bell=b,conical=c, convex=x, flat=f, knobbed=k,sunken=s\n- cap-surface: fibrous=f, grooves=g, scaly=y, smooth=s\n- cap-color: brown=n, buff=b, cinnamon=c, gray=g, green=r, pink=p, purple=u, red=e, white=w, yellow=y\n- bruises: bruises=t, no=f\n- odor: almond=a, anise=l, creosote=c, fishy=y, foul=f, musty=m, none=n, pungent=p, spicy=s\n- gill-attachment: attached=a, descending=d, free=f, notched=n\n- gill-spacing: close=c, crowded=w, distant=d\n- gill-size: broad=b, narrow=n\n- gill-color: black=k, brown=n, buff=b, chocolate=h, gray=g, green=r, orange=o, pink=p, purple=u, red=e, white=w, yellow=y\n- stalk-shape: enlarging=e, tapering=t\n- stalk-root: bulbous=b, club=c, cup=u, equal=e, rhizomorphs=z, rooted=r, missing=?\n- stalk-surface-above-ring: fibrous=f, scaly=y, silky=k, smooth=s\n- stalk-surface-below-ring: fibrous=f, scaly=y, silky=k, smooth=s\n- stalk-color-above-ring: brown=n, buff=b, cinnamon=c, gray=g, orange=o, pink=p, red=e, white=w, yellow=y\n- stalk-color-below-ring: brown=n, buff=b, cinnamon=c, gray=g, orange=o, pink=p, red=e, white=w, yellow=y\n- veil-type: partial=p, universal=u\n- veil-color: brown=n, orange=o, white=w, yellow=y\n- ring-number: none=n, one=o, two=t\n- ring-type: cobwebby=c, evanescent=e, flaring=f, large=l, none=n, pendant=p, sheathing=s, zone=z\n- spore-print-color: black=k, brown=n, buff=b, chocolate=h, green=r, orange=o, purple=u, white=w, yellow=y\n- population: abundant=a, clustered=c, numerous=n, scattered=s, several=v, solitary=y\n- habitat: grasses=g, leaves=l, meadows=m, paths=p, urban=u, waste=w, woods=d"}}