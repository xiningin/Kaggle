{"cell_type":{"932a39c5":"code","cdfd8dac":"code","cc37ba48":"code","085fdf7f":"code","1011652a":"code","4ec2bfcd":"code","932cc85d":"code","9395cfa1":"code","6f71cfed":"code","b30fb5c0":"code","3fca2d48":"code","cd20aa17":"code","232ab1f1":"code","9d465ee0":"code","8d565ce7":"code","5131d3dd":"code","95276d44":"code","f463b448":"code","4b884f69":"code","3b3dab33":"code","bcb992bf":"code","11095721":"code","d71c5636":"code","27837ab6":"code","7b00edd8":"code","db9de67c":"code","c537db45":"code","9d0fe441":"code","16cd033e":"code","1589ea87":"code","7320d13b":"code","8ec85811":"code","6ab4d4bb":"code","2e47ea5e":"code","8860a064":"code","babd91d1":"code","23b66c5a":"code","a5f23dd3":"code","e9b3278a":"code","82adab90":"code","3956d1d2":"code","8daf2138":"code","31393c0d":"code","78cbb9b7":"code","2535402a":"code","378f86bf":"code","aed59836":"code","60efa713":"code","303d62df":"code","baed6055":"code","3461aac3":"code","d83e5747":"code","5941e771":"code","537b23ce":"code","012a7e51":"code","0f04c03b":"code","fb4398c2":"code","00f190c5":"code","a3b83377":"code","ba0b7c7b":"code","233c5769":"code","78e1c63f":"code","89e2cd16":"code","83241e97":"code","6142bcb4":"code","ca306176":"code","3bc61736":"code","2a4cc6eb":"code","d97221cd":"code","9e6bb20a":"code","34edaa2c":"code","3e14d640":"code","d3a33526":"code","a861e452":"code","627b451d":"code","0f136580":"code","c716d23c":"code","a0cb31f5":"code","7684df87":"code","1625d82f":"code","4ac283cc":"code","91ba93b3":"code","9df791da":"code","48de221a":"code","352b761b":"code","9cdaf62d":"code","a31e2fb3":"code","d62565eb":"code","1894fec1":"code","f292ef10":"code","8e08b101":"code","5f388fc6":"code","f146d9db":"code","bc490f7d":"code","6c8256c0":"code","12d87f88":"code","55c5ac6e":"code","8eb57539":"code","713da020":"code","4b49922b":"code","658d8288":"code","305511df":"code","af7c632b":"code","c0090804":"code","5ef9c6d5":"code","71b3555e":"code","38a7c713":"code","06fb70f3":"code","8d839a84":"code","224bbabf":"code","96ee2d8a":"code","a12d8dfe":"code","69a401d6":"code","a7803114":"code","0ba93263":"code","1069f707":"code","5211a4a5":"code","0025d745":"code","ede18b72":"code","0016edd7":"code","7c224dfd":"code","e4f642e6":"code","bbfd82c5":"code","e4fa63fc":"code","fd3499cb":"code","d367ad86":"code","c3a91063":"code","1ca945fd":"code","cac0791b":"code","d1cd7107":"code","90a8f51f":"code","80715eeb":"code","55375a28":"code","dd4a3ca4":"code","f29546f2":"code","ccf97f91":"code","b3a8c227":"code","8e204aa4":"code","2df85e18":"code","8db7c56b":"code","de5528f4":"code","5418e963":"code","3439c29d":"code","0c093fe3":"code","01ed0cfe":"code","4144f503":"code","278492ff":"code","4101a548":"code","e10e04e9":"code","f8e51e8e":"code","8a1e55ad":"code","cdfa876c":"code","640c496e":"code","c6b68a5a":"code","c9866963":"code","b0ce7661":"code","1132dc44":"code","d7b2bce4":"code","1cb0f9d9":"code","3874b773":"code","79e7ed55":"code","78fb0277":"code","d8bba309":"code","c5307b7e":"code","6c029607":"code","8c22522d":"code","5638ed6d":"code","b4977624":"code","c78156d8":"code","a96fab62":"code","625c0187":"code","7ec9f36d":"code","dfaa7c60":"code","8fff9205":"code","29086fc4":"code","082f072c":"code","534ec7cc":"code","02e5a47b":"code","0ea0adf6":"code","7e803d34":"code","dfbd8051":"code","8cc59b4d":"code","2d40ba02":"code","179eae1f":"code","a6bcbbd4":"code","baea5c80":"code","bd9289ce":"code","43998949":"markdown","124fdb03":"markdown","ab459798":"markdown","07f0418d":"markdown","aed12cc0":"markdown","a9afa2fd":"markdown","243fc449":"markdown","f57e002a":"markdown","aa3551b1":"markdown","22f8c0bf":"markdown","486c575d":"markdown","afe7ffd5":"markdown","b709a11a":"markdown","84c1d46d":"markdown","1b120b06":"markdown","a2be1c85":"markdown","87a38dc1":"markdown","d2546216":"markdown","61bf6cce":"markdown","9dd651ba":"markdown","f8b316f6":"markdown","7c140d73":"markdown","fcb14748":"markdown","7cd9f93e":"markdown","cddd5ce8":"markdown","0fc9ac20":"markdown","110d688a":"markdown","63ef5d03":"markdown","b05e35e0":"markdown","766f74d3":"markdown","39fd6ee8":"markdown","3bfdede7":"markdown","5e9c4a26":"markdown","d999ba60":"markdown","3f7884ef":"markdown","5cf0a7ff":"markdown","90f88459":"markdown","b29fd551":"markdown","004d66c0":"markdown","685883fb":"markdown","3c7dae30":"markdown","4a3f299d":"markdown","51cc2dbe":"markdown","003e7830":"markdown","496bad2a":"markdown","7e80965b":"markdown","079cb274":"markdown","0e5bdf9e":"markdown","b557dc30":"markdown","c257aa33":"markdown","5ced6ae7":"markdown","08132c5b":"markdown","08dfcc5d":"markdown","136937d8":"markdown","ae3323d9":"markdown","cac74c42":"markdown","afd39444":"markdown","0bfe089e":"markdown","6dcd855c":"markdown","7d65d6b2":"markdown","a891b676":"markdown","a4ef9336":"markdown","6e9fb35f":"markdown","3d82e58c":"markdown","524386c0":"markdown","dfb9c0ce":"markdown","63dd76e4":"markdown","a9e6d61c":"markdown","e39879f9":"markdown","0205cf26":"markdown","d66346eb":"markdown","57a5dc37":"markdown","48fb3a4a":"markdown","0f79613b":"markdown","f49dd8e1":"markdown","4487c508":"markdown","bb1d20c3":"markdown","d36981d3":"markdown","da3dd58c":"markdown","c23fc316":"markdown","b359709c":"markdown","5a80a857":"markdown","80fd102f":"markdown","06864080":"markdown","dbd04cd0":"markdown","c2621acd":"markdown","57ca59fc":"markdown","ec11c0a8":"markdown","7d659252":"markdown","11cd1544":"markdown","1287f6c4":"markdown","8d9ca0ce":"markdown","9d609021":"markdown","5e2354da":"markdown","b2fadace":"markdown","7386155a":"markdown","b56e2a96":"markdown","55ee54e5":"markdown","3951a3a0":"markdown","947cd095":"markdown","7cb72458":"markdown","6dcf056c":"markdown","449163c2":"markdown","1e7e1313":"markdown","19efb337":"markdown","484c29bc":"markdown","878fc12a":"markdown","c78296ed":"markdown","45b83a36":"markdown","5cdec2d0":"markdown","d3c3b87a":"markdown","25eb01db":"markdown","cd709788":"markdown","752daecb":"markdown","2756d8c3":"markdown","b7c49f50":"markdown","19db2121":"markdown","f7d96890":"markdown","92e3c429":"markdown","81cea3e6":"markdown","35a9df26":"markdown","6dfea31f":"markdown","1ba84503":"markdown","f8871bc2":"markdown","93e94412":"markdown","2e484e92":"markdown","91320ce3":"markdown","ceb25b34":"markdown","94c61daa":"markdown","74b90644":"markdown","7d91f681":"markdown","55012674":"markdown","80152ae4":"markdown","f2b53371":"markdown","c42b7e10":"markdown","fc14d3bd":"markdown","a7d79c7a":"markdown","f3b575b5":"markdown","4376912c":"markdown","7fd8a0a8":"markdown","754a89fd":"markdown","00014e73":"markdown","e850e2d1":"markdown","e8ce9ca1":"markdown","1cbbefd9":"markdown","b2896f58":"markdown","3fd31517":"markdown","bdb15ce8":"markdown","0cc7935b":"markdown","6f225b2e":"markdown","a2d0e423":"markdown","1418640f":"markdown","9871ef63":"markdown","c5383905":"markdown","57fae40c":"markdown","2b77b544":"markdown","89471c11":"markdown"},"source":{"932a39c5":"import numpy as np ","cdfd8dac":"Data = [[1,2,3],[4,5,6],[7,8,9]]","cc37ba48":"Array = np.array(Data)\nArray","085fdf7f":"np.array(Data)[0]","1011652a":"np.array(Data)[2,2]","4ec2bfcd":"np.arange(0,100) #this function stores 0 to 100 values as arrays","932cc85d":"np.arange(0,100,5)","9395cfa1":"np.zeros(100) #Create array of 100's of 0","6f71cfed":"np.ones(100) #Create an array of 100 1's","b30fb5c0":"np.zeros((25,4)) #the first number tells the number of columns. the second number indicates the number of lines","3fca2d48":"np.eye(10)","cd20aa17":"np.linspace(0,100,5) # Divide between 0 and 100 into 5 equal parts and show","232ab1f1":"np.random.randint(0,100) #Generate a random number between 0 and 100 . Also the two are equal np.random.randint (0,100) = np.random.randint (100)","9d465ee0":"np.random.randint(0,100,5) #Generate 5 random numbers between 0 and 100","8d565ce7":"np.random.rand(5)","5131d3dd":"np.random.randn(5)#Generate 5 values \u200b\u200bbetween -1 and 1 with 'gauss distribution'","95276d44":"Data1 = np.arange(225)","f463b448":"Data1.reshape(15,15)#RESHAPE method allows us to give the data the shape we want and converts it into a matrix","4b884f69":"Data1.cumsum() #Sum up the numbers cumulatively\n","3b3dab33":"Data1.min() # min value","bcb992bf":"Data1.max()# max value","11095721":"Data1.sum() # sum up all the data","d71c5636":"Data1.argmax() #this function will give the index of the largest number","27837ab6":"Data1.argmin() #this function will give the index of the smallest number","7b00edd8":"Data2 = np.array([[1,2],[3,4]])\nnp.linalg.det(Data2)","db9de67c":"stddev = np.std(Data1)# this function finds Standard deviation.\nstddev","c537db45":"variance = np.var(Data1) #this function finds Standard variance\nvariance","9d0fe441":"Data1 = np.arange(0,100)","16cd033e":"Data1[:6]#Show from 0 to 6th index is also equivalent to this code = Data1[0,6]","1589ea87":"Data1[::3]#Skip 3 jump from start to finish","7320d13b":"Data1[:1] = 10 #Save the numbers from the beginning to the 2nd index as 10","8ec85811":"Data1 > 40 ","6ab4d4bb":"NewArray = np.array([5,10,15,20,25])\nNewArray1 = np.array([1,2,3,4,5])","2e47ea5e":"NewArray + NewArray1","8860a064":"NewArray - NewArray1","babd91d1":"NewArray \/ NewArray1","23b66c5a":"NewArray * NewArray1","a5f23dd3":"NewArray ** NewArray1","e9b3278a":"np.sqrt(NewArray)","82adab90":"a = [3,6,9]\nb = np.array(a)\nb.T","3956d1d2":"b = np.array([a])\nb.T","8daf2138":"import pandas as pd","31393c0d":"Label_list = ['I','am','Learning','Data','Science']\nData_List = [1,2,3,4,5]\nPd_Series1 = pd.Series(Data_List,Label_list)\nPd_Series1","78cbb9b7":"data = np.array(['a','b','c','d'])\nSeries = pd.Series(data,[100,101,102,103])\nSeries","2535402a":"DataDict = {'Michael_s exam result': 35, 'Olivia_s exam result': 85}\nA = pd.Series(DataDict)\nDataDict2 = {'Michael_s exam result': 44}\nB = pd.Series(DataDict2)\nDataDict3 = {'Darth_Vader_s exam result' :99}\nC = pd.Series(DataDict3)","378f86bf":"A","aed59836":"B","60efa713":"C","303d62df":"A + B","baed6055":"DataDict4 = C.append(A)\nDataDict4","3461aac3":"A['Michael_s exam result']","d83e5747":"C['Darth_Vader_s exam result']","5941e771":"from numpy.random import randn\ndf = pd.DataFrame(data = randn(5,5), index = ['A','B','C','D','E'], columns = ['Columns1','Columns2','Columns3','Columns4','Columns5'])\ndf","537b23ce":"df[['Columns1','Columns5']]","012a7e51":"df['Columns6'] = pd.Series(randn(5),['A','B','C','D','E'])\ndf","0f04c03b":"df['Columns7'] = (df['Columns6'] + df['Columns4'] - df['Columns1'] ) \/ df['Columns2'] * df['Columns3']\ndf","fb4398c2":"df.drop('Columns2', axis = 1, inplace = True)\ndf","00f190c5":"df.index.names","a3b83377":"df.columns.names","ba0b7c7b":"df.loc['C']","233c5769":"df.loc['A']","78e1c63f":"df.iloc[0]","89e2cd16":"df.loc['A','Columns5']","83241e97":"df.loc[['A','Columns5'] and ['B','Columns4']]","6142bcb4":"df.loc[['A','D'],['Columns4','Columns2']]","ca306176":"df","3bc61736":"df > 0.2","2a4cc6eb":"booleanDF = df > 0\nbooleanDF","d97221cd":"df[booleanDF]","9e6bb20a":"df[df > 0.5]","34edaa2c":"df['Columns1'] > 0","3e14d640":"df[df['Columns3']> 0]","d3a33526":"df[df['Columns4']> 0]","a861e452":"df[df['Columns5']> 0]","627b451d":"df[df['Columns1']> 0]","0f136580":"df[(df['Columns1']> 0) & (df['Columns3']> 0)]","c716d23c":"df[(df['Columns1']> 0) & (df['Columns3']> 0)]","a0cb31f5":"df","7684df87":"df['Columns6'] = ['NewValue1','NewValue2','NewValue3','NewValue4','NewValue5']\ndf","1625d82f":"df.set_index('Columns6' , inplace = True)\ndf","4ac283cc":"df.index.names","91ba93b3":"df.columns.names","9df791da":"OuterIndex = ['Group1','Group1','Group1','Group2','Group2','Group2','Group3','Group3','Group3']\nInnerIndex = ['Index1','Index2','Index3','Index1','Index2','Index3','Index1','Index2','Index3']\nlist(zip(OuterIndex,InnerIndex))","48de221a":"hierarchy = list(zip(OuterIndex,InnerIndex))\nhierarchy = pd.MultiIndex.from_tuples(hierarchy)\nhierarchy","352b761b":"df = pd.DataFrame(randn(9,3),hierarchy,columns = ['Column1','Colum2','Column3'])\ndf","9cdaf62d":"df['Column1']","a31e2fb3":"df.loc['Group1']","d62565eb":"df.loc[['Group1','Group2']]","1894fec1":"df.loc['Group1']","f292ef10":"df.loc[['Group1','Group2']]","8e08b101":"df.loc['Group1'].loc['Index1']","5f388fc6":"df.loc['Group1'].loc['Index1']['Column1']","f146d9db":"df.index.names = ['Groups','Indexes']\ndf","bc490f7d":"df.xs('Group1') # df.xs('Group1') = df.loc['Group1']","6c8256c0":"df.xs('Group1').xs('Index1')","12d87f88":"df.xs('Group1').xs('Index1').xs('Column1')","55c5ac6e":"df.xs('Index1', level = 'Indexes')","8eb57539":"df.xs('Index1', level = 'Indexes')['Column1']","713da020":"arr = np.array([[10,20,np.nan],[3,np.nan,np.nan],[13,np.nan,4]])\narr","4b49922b":"df = pd.DataFrame(arr, index = ['Index1','Index2','Index3'],columns = ['Column1','Column2','Column3'] )\ndf","658d8288":"df.dropna()","305511df":"df.dropna(axis = 1)","af7c632b":"df.dropna(thresh = 2)","c0090804":"df.fillna(value = 0)","5ef9c6d5":"df.sum()","71b3555e":"df.sum().sum()","38a7c713":"df.fillna(value = (df.sum().sum())\/ 5)","06fb70f3":"df.size","8d839a84":"df.isnull()","224bbabf":"df.isnull().sum()","96ee2d8a":"df.isnull().sum().sum()","a12d8dfe":"df.size - df.isnull().sum()","69a401d6":"data = {'Job': ['Data Mining','CEO','Lawyer','Lawyer','Data Mining','CEO'],'Labouring': ['Immanuel','Jeff','Olivia','Maria','Walker','Obi-Wan'], 'Salary': [4500,30000,6000,5250,5000,35000]}\ndata","a7803114":"df = pd.DataFrame(data)\ndf","0ba93263":"SalaryGroupBy = df.groupby('Salary')\nSalaryGroupBy","1069f707":"SalaryGroupBy.sum()","5211a4a5":"SalaryGroupBy.min()","0025d745":"SalaryGroupBy.max()","ede18b72":"df.groupby('Salary').sum()","0016edd7":"df.groupby('Job').sum().loc['CEO'] #Total of salaries of CEOs.","7c224dfd":"df.groupby('Job').count()","e4f642e6":"df.groupby('Job').min()","bbfd82c5":"df.groupby('Job').min()['Salary']","e4fa63fc":"df.groupby('Job').min()['Salary']['Lawyer']","fd3499cb":"df.groupby('Job').mean()['Salary']['CEO']","d367ad86":"data = {'A': ['A1','A2','A3','A4'],'B': ['B1','B2','B3','B4'],'C': ['C1','C2','C3','C4']}\ndata1 = {'A': ['A5','A6','A7','A8'],'B': ['B5','B6','B7','B8'],'C': ['C5','C6','C7','C8']}\ndf1 = pd.DataFrame(data, index = [1,2,3,4])\ndf2 = pd.DataFrame(data1, index = [5,6,7,8])\ndf1","c3a91063":"df2","1ca945fd":"pd.concat([df1,df2])","cac0791b":"pd.concat([df1,df2], axis = 1)","d1cd7107":"data1 = {\n        'id': ['1', '2', '3', '4', '5'],\n        'Feature1': ['A', 'C', 'E', 'G', 'I'],\n        'Feature2': ['B', 'D', 'F', 'H', 'J']}","90a8f51f":"df1 = pd.DataFrame(data1, columns = ['id', 'Feature1', 'Feature2'])\ndf1","80715eeb":"data2 = {\n        'id': ['1', '2', '6', '7', '8'],\n        'Feature1': ['K', 'M', 'O', 'Q', 'S'],\n        'Feature2': ['L', 'N', 'P', 'R', 'T']}","55375a28":"data = {'A': ['A1','A2','A3','A4'],'B': ['B1','B2','B3','B4'],'C': ['C1','C2','C3','C4']}\ndata1 = {'A': ['A5','A6','A7','A8'],'B': ['B5','B6','B7','B8'],'C': ['C5','C6','C7','C8']}\ndf1 = pd.DataFrame(data, index = [1,2,3,4])\ndf2 = pd.DataFrame(data1, index = [5,6,7,8])\ndf1","dd4a3ca4":"df2 = pd.DataFrame(data2, columns = ['id', 'Feature1', 'Feature2'])\ndf2","f29546f2":"df1.join(df2)","ccf97f91":"df2.join(df1)","b3a8c227":"df1.join(df2, how = 'right')","8e204aa4":"df1.join(df2, how ='outer')","2df85e18":"df1.join(df2, how = 'inner')","8db7c56b":"df1.join(df2, sort = 'True')","de5528f4":"df1.join(df2, sort = 'False')","5418e963":"frames = [df1,df2]\ndf_keys = pd.concat(frames, keys=['x', 'y'])\ndf_keys","3439c29d":"dataset1 = {'A':['A1','A2','A3'], 'B': ['B1','B2','B3'], 'Key': ['K1','K2','K3']}\ndataset2 = {'X':['X1','X2','X3','X4'], 'Y': ['Y1','Y2','Y3','Y4'], 'Key': ['K1','K2','K3','K4']}\ndf1 = pd.DataFrame(dataset1,index = [1,2,3])\ndf2 = pd.DataFrame(dataset2,index = [1,2,3,4])\ndf1","0c093fe3":"df2","01ed0cfe":"pd.merge(df1,df2, on = 'Key')","4144f503":"pd.merge(df1,df2, on = 'Key', how = 'left')","278492ff":"pd.merge(df1,df2, on = 'Key', how = 'right')","4101a548":"pd.merge(df1,df2, on = 'Key', how = 'outer')","e10e04e9":"pd.merge(df1,df2, on = 'Key', how = 'inner')","f8e51e8e":"pd.merge(df1,df2, on = 'Key', how = 'right',right_index=True)","8a1e55ad":"pd.merge(df1,df2, left_index=True, right_index=True, how='outer')","cdfa876c":"pd.merge(df1,df2, left_index=True, right_index=True, how='inner')","640c496e":"data = {'Column1': [1,2,3,4,5,6], 'Column2': [1000,1000,2000,3000,3000,1000],'Column3': ['Mace Windu','Darth Vader','Palpatine','Kylo Ren','Rey','Obi-Wan']}\ndf = pd.DataFrame(data)\ndf","c6b68a5a":"df.head()","c9866963":"df.head(n = 2) # df.head(2) = df.head(n = 2)","b0ce7661":"df.describe()","1132dc44":"df.describe().T","d7b2bce4":"df.info","1cb0f9d9":"df['Column2'].unique()","3874b773":"df['Column2'].nunique()","79e7ed55":"df['Column2'].value_counts()","78fb0277":"df[df['Column1'] >= 2]","d8bba309":"df[(df['Column1'] >= 1) & (df['Column2'] == 1000) ]","c5307b7e":"def square(x): \n    return x ** 2\nsquare(2)","6c029607":"df['Column2'].apply(square)","8c22522d":"lambda x : x **2","5638ed6d":"df['Column2'].apply(lambda x : x **2 )","b4977624":"# df['Column2'] = df['Column2'].apply(square) for code's update","c78156d8":"df['Column3']","a96fab62":"df['Column3'].apply(len) \n# Get the length of the string","625c0187":"df.drop('Column3', axis = 1 )","7ec9f36d":"df.index","dfaa7c60":"df.index.names","8fff9205":"df","29086fc4":"df.sort_values(by=['Column1', 'Column3'])# More than one value can be 'Sort'.","082f072c":"df.sort_values('Column2', ascending = True) #from small to large","534ec7cc":"df.sort_values('Column2', ascending = False) # from large to small","02e5a47b":"df.sort_values('Column1', kind = 'heapsort')","0ea0adf6":"df.sort_values('Column1', kind = 'mergesort')","7e803d34":"df.sort_values('Column1', kind = 'quicksort')","dfbd8051":"df.sort_values('Column1', na_position = 'first')","8cc59b4d":"df.sort_values('Column1', na_position = 'last')","2d40ba02":"df = pd.DataFrame({'Month': ['January','February','March','January','February','March','January','February','March'],'State':['New York','New York','New York','Texas','Texas','Texas','Washington','Washington','Washington'],\n'moisture': [20,25,65,34,56,85,21,56,79]})\ndf","179eae1f":"df.corr()","a6bcbbd4":"df.pivot_table(index = 'Month', columns = 'State', values = 'moisture')","baea5c80":"df.pivot_table(index = 'State', columns = 'Month', values = 'moisture')","bd9289ce":"print('Have a Nice Day')","43998949":"\nWhen we put this function into our data with 'apply ()', it gave us the squares.\nYou can use this special case in your projects. For example, you are examining the data of the engine part of the vehicle and your team requested a finding from the engine. You can take the necessary mathematical formula from them and use it just like this example, and you can easily do your job.\nBut there is a shorter way.\n\n\nThese roads can work for you in areas such as ML, NLP.","124fdb03":"This function generally takes 3 values. Distributes the numbers between the first 2 values \u200b\u200bequally to the 3rd number. You may not have understood, but I think you can easily understand the following code snippet","ab459798":"\nAs seen above, we created a value called \"DataDict4\", added the value \"A\" to the \"C\" value, and we were able to see the exam results of all three people. If 'Darth Vader' has received such a high score, it is probably an exam related to the 'dark side of power'. :)","07f0418d":"\nFor example, we created the 'Column7' value above and synchronized it to a value created by various columns, and such a table was created.\nCan we add \"Column\" or not?\n","aed12cc0":"<a id=\"14\"><\/a> <br>\n# DataFrame Filtering Operations:","a9afa2fd":"\nHere is the distribution of the amount of smooth data we mentioned in this code according to the 'columns'.","243fc449":"<a id=\"19\"><\/a> <br>\n# DataFrame Operations And Pivot Table:","f57e002a":"\nfocus on the difference between these 2 codes. Did you find it?\n\n\nThe 'iloc' function extracts the 'Column' values \u200b\u200baccording to the index of the line, and the indices of the lines proceed from 0 as you know. The index of \"A\" is 0, and \"0\" is given to the \"iloc\" function. So these two functions actually represent the same thing. While you need to specify a name in the \"loc\" function, you need to specify an index in \"iloc\".","aa3551b1":"\nPandas series has 4 parameters.\nThese are data, index, dtype, copy\nyou may not know dtype and copy of these\ndtype is for data type. if None, data type will be inferred\nCopy is Cpoy data :D\nCopy is important. If you are going to make changes to the data, make a copy. You don't want to change the actual data\n\n\n\nHere, too, you see the answer to the question \"How to create a series?\"","22f8c0bf":"\nThe functions in the Numpy script can also be used here.","486c575d":"\nAbove you see the filtering of a certain 'Column' value. Below you can see it applied to every 'Column' value. In some, the result is different. Some have 4 lines, some have 2 lines, why do you think it might be?","afe7ffd5":"\nGroupBy Operations are exactly the same as in Sql tables. Be comfortable even if you don't know sql. It is not a difficult issue, but an important one. It shows the desired situation to my groups.","b709a11a":"\nWe will do many operations with dataframes. Here, the columns are called 'Column' or 'Feature' and the rows are called 'row' or 'index'.\nFirst of all, we have to create a data for ourselves. Isn't it easy?","84c1d46d":"Let's produce our first data and learn how to choose columns","1b120b06":"\nAs you can see above, you can call a certain part like this.","a2be1c85":"We will examine the 3 functions together because they are very close to each other.\nThe Zeros Function will create an Array of 0's as much as you specify.","87a38dc1":"<a id=\"1\"><\/a> <br>\n# What is the NumPy?:","d2546216":"It also has the following feature, just like any other.","61bf6cce":"\nHere we created a Function and let it give the square of the value it contains.","9dd651ba":"Not only that, it can go by jumping as much as the value you give. For example, in the example below, we skipped 5 by 5.","f8b316f6":"<a id=\"13\"><\/a> <br>\n# DataFrame creation and functions:","7c140d73":"\nThere are many more functions(Like Pandas_Profiling) but you need to know these to enter this magical world.","fcb14748":"Now we will see shaping Array. This function is separate functional since we perform our operations with the matrix. It allows us to give the data the shape we want.","7cd9f93e":"\nQuestions how many data there are.","cddd5ce8":"This function, which is similar but not the same, suppresses the numbers from -1 to 1. It is made with Gauss distribution method.","0fc9ac20":"\nIt is important what we want to do next. Let's say we are curious about the data in the '0.' index. so we have to do it like this.","110d688a":"\nThe 'left_index' and 'right_index' parameters are simple enough to be understood from the codes. Other parameters are almost not used.but if you want you can[ search](https:\/\/pandas.pydata.org\/)","63ef5d03":"\nNow let's learn the status of 'loc' and 'iloc'.\n\n\nWhen we use this code, it gives us the 'Column' values \u200b\u200bin the 'C' line.","b05e35e0":"As shown in the figure, 4 transactions and more can be done between 2 data. You can search for much more detailed [information here.](http:\/\/https:\/\/www.scipy.org)","766f74d3":"\nAs it turns out, we can also use 'DataFrame Filtering' operations here.","39fd6ee8":"\nAnd let's come to our small but functional functions.","3bfdede7":"You can do this shorter like this","5e9c4a26":"\nBefore the first code, 'Group' and then 'Index' value are given. Because the 'xs' function 'Group', 'Index' works respectively. This explains it in second code\n\n\nThe advantage of the 'xs' function is as follows","d999ba60":"\nAs you can see, we created 3 series. In some transactions we can use queue.","3f7884ef":"<a id=\"16\"><\/a> <br>\n# Dealing with Corrupt and Missing Data:","5cf0a7ff":"\nTo summarize, values \u200b\u200bthat values are 'True' are shown. For example, there are 4 lines in 'Column4' which means that line 5 is 'True'.","90f88459":"The Ones Function will create an Array of 1s as much as you specify.","b29fd551":"\nWhat do you think is the 'thresh' parameter? Let's say now. It means \"delete if there is at least two smooth data\". Of course, you determine this number.","004d66c0":"\nWe are already familiar with the 'How' parameter from Join. The values \u200b\u200bof 'inner', 'outer', 'right' that you see there are also valid here.","685883fb":"\nYou can see Arrays as a kind of data storage. In order for Numpy to use the data, we must make the data 'Array'. We didn't mention what Array is, right? Arrays are actually matrices. Let's first create a data to see it.","3c7dae30":"As you may have noticed, these arrays are not as matrices as we would like. But we can change its shape. this method is as follows.","4a3f299d":"The topic of numpy is over. if you are ready let's move on to pandas","51cc2dbe":"\nFor special data, you can handle your work with codes similar to the above.","003e7830":"\nAs it turns out, it can be used in expressions like \u2018or, 'and' above.\n\n\nwe can call and look at multiple columns and rows. Our topic here is over, next is 'DataFrame Filtering operations'.","496bad2a":"\nAnd let's move on to simple operations.","7e80965b":"New = pd.read_html ('Datasets URL.html') # To read data on the Internet","079cb274":"For example, here we have generated up to 225 values \u200b\u200bwith the 'Arange' function. But it is shapeless and not as we wanted.","0e5bdf9e":"\nThe above process is a process that may be necessary sometimes. Sometimes, data is missing when analyzing the data. Sometimes we may need to assign 0 or 1. So its importance is a great feature.","b557dc30":"\nYou may have noticed that the first code gives the sum of each 'Column' value as seen, and the Next code sums it all.\n","c257aa33":"\nWe can explain 'Boolean' as follows. Returns the value of 'False' if the desired value (if it is bigger than '0') satisfies the condition if it is not 'True'.","5ced6ae7":"Our function now is 'argmax ()'. To mention it briefly, it will give the index of the value with the greatest value (224 in this data) (unfortunately it is also 224).","08132c5b":"excelset.to_excel ('excelnewfile.xlsx') # Convert to Excel file","08dfcc5d":"\nYou can see various filtering exercises above. '&' Sign means 'and' and '|' sign means 'or'. If you use 'and' or 'or' instead of these signs, you will get an error. '&' Sign is made with 'SHIFT' and '6' keys and '|' sign is made with 'ALT GR' and '-'.","136937d8":"<a id=\"11\"><\/a> <br>\n# What is the Pandas?:","ae3323d9":"\nThe merge process is quite similar to the join process, but has some different features. We will explain in more detail below.\n\n\nAbove, you can see all the parameters of the Merge process. But we will not use many of them.","cac74c42":"\nLet me explain the code above immediately. 'Michael' and 'Olivia' people with 'A' value had exam results. Let's say we want to learn the exam result of 'Michael'. In this case, we need to write the first code. The same is true for the 'Darth Vader' character. This does not necessarily have to be a numerical value (int or float). It could also be a string of words, that is, words.\nThe \"Series\" issue is so short and concise now let's move on to the \"DataFrame\" topic.","afd39444":"\nif you want to communicate, you can click on the links below\nLinkedln: https:\/\/www.linkedin.com\/in\/batuhan-bayraktar-a212b418a\/\nMedium : https:\/\/medium.com\/@Batuhan35","0bfe089e":"<a id=\"7\"><\/a> <br>\n# Random Functions:","6dcd855c":"\nThe above two codes are done by the above code alone.","7d65d6b2":"\nThis code gives the total number of 'NaN' values.\nIf we know how many data there are and how many 'NaN' values \u200b\u200bare there with the above code, we can also find out how many smooth data is in each 'Column'.","a891b676":"As you understand, the ':' sign covers every data on that index. The first ':' means 'from the beginning', while the last ':' means 'from the end'.","a4ef9336":"\n'Lambda' is generally preferred because it is shorter","6e9fb35f":"\nAs you can see, whatever function you use, it will come in a table.","3d82e58c":"\nIn the 1st code, we created 2 indexes and combined them with the 'zip' function. We used the list to do this, but you can use 'Tuple' and 'Dict'. In the 2nd code, we synchronized this to 'hierarchy'. Then, we created Multi index with 'pd.MultiIndex.from_tuples ()' feature. In the last code, we assigned random values \u200b\u200bwith the 'rand ()' function and provided the column information. And as we have seen, we obtained Multi Index DataFrame with 'Group', 'Index' and 'Column' values.","524386c0":"\nAs you can see, you can give 'string' value","dfb9c0ce":"In 'argmin ()' it will only give the lowest value based on the same logic.","63dd76e4":"This function allows us to sort by a certain value. Here, we have provided the ranking according to \"Column2\". Above, we have listed 'Column1' and 'Column3' so that you can see the difference.","a9e6d61c":"\nThe above process finds the standard deviation. Standard deviation is a measure used in probability theory and statistical disciplines to summarize the spread of data values \u200b\u200bwith a sample, a sample, a probability distribution or a random variable. And it is widely used in data analysis.\n\n\nNow we will learn the variance. In probability theory and statistical disciplines, variance is a measure of a random variable, a probability distribution, or a sample of the statistical propagation for the sample, the average of the squares of all possible values \u200b\u200bor their distance from the mean. It is basically the square of the standard deviation. And it is a more accurate measure of data with many variables.\n\n\nYou should know basic statistics for data science. If you don't know, don't worry. I am thinking of publishing a tutorial about statistics recently\n\nIN fact, you don'thave to wait for me. You can learn a lot with a short research","e39879f9":"You will see many functions in this section. They all have a separate function. And they are very important. Because they are among the most used functions. Especially,You will use these functions more as your statistics knowledge increases.","0205cf26":"\nValues \u200b\u200bsuch as 'Group', 'Column' and 'Index' can be called this way, and you can also call multiple and different types.","d66346eb":"\nThe first of these situations: four operations and more can be done between the two series. However, there is one thing you should be aware of: While the values \u200b\u200bof 'Michael' and 'Olivia' are included in the 'A' value, only 'Michael' has the examination result of 'B' value. When we process the two values, only matching values \u200b\u200bare processed. If there is a value that does not match (the 'Olivia' person in this example), that value will appear as 'NaN'.\nAnd 'NaN'means 'Not a Number'","57a5dc37":"# Data Science For Everyone\n*Hello.Firstly, I hope you learn something from this tutorial. If you know this platform,Probably you interested in DS. So I wrote this kernel to help you too*\n\n\n\n**I made this tutorial. Because I realized that there are many who want to use and learn data science**\n\n**The things you will learn in this tutorial are listed below**\n\n*you will learn numpy and pandas*\n\n*In this tutorial, you will learn data preprocessing, working with difficult data, and dealing with lost data and more.*\n\n*you will learn many more and you will understand why you need to learn*\n\n\n\n**Content:**\n1. [What is the NumPy?:](#1)\n    1. [First step to NumPy,Arrays:](#2)\n    1. [The important functions of NumPy:](#3)\n        1. [Arange Function:](#4)\n        1. [Zeros, Ones and Eye Functions:](#5)\n        1. [Linspace function:](#6)\n        1. [Random Functions:](#7)\n    1. [Indexing Array Structures:](#8)\n    1. [Numpy Basic Operations:](#9)\n    1. [Using Numpy Transpose:](#10)\n1. [What is the Pandas?:](#11)\n      1. [Pandas Series:](#12)\n      1. [DataFrame creation and functions:](#13)\n      1. [DataFrame Filtering Operations:](#14)\n      1. [Defining DataFrames as Multi Index:](#15)\n1. [Dealing with Corrupt and Missing Data:](#16)\n1. [GroupBy Operations:](#17)\n1. [Concatenate Merge And Join Functions:](#18)\n1. [DataFrame Operations And Pivot Table:](#19)\n1. [Methods of Reading the Data Set:](#20)","48fb3a4a":"\nBlack text is a warning message, not an error. Don't take it too seriously. Sometimes it can give a warning about the version.","0f79613b":"\nWhat do you think would happen if we do the opposite?","f49dd8e1":"With these methods, you can get the data you want very easily. Now let's move on to the functions of Numpy.","4487c508":"\nThis code assigns the 'value' value it contains to blank data. In the example, '0' is given and assigned to 'NaN' values. 'String' can be valued as well as quite functional.\nLet us assume that the structure of the data is appropriate and that the data we are looking for is independent of the mean, and we assign the mean to the 'NaN' values.","bb1d20c3":"<a id=\"15\"><\/a> <br>\n# Defining DataFrames as Multi Index:","d36981d3":"\nLearning index names can also query columns.","da3dd58c":"\nFor example, the code above deletes if there is at least one 'NaN' in the 'Index' line.","c23fc316":"\nLet's start with 'Left Join'.\n\n\n\nLeft Join is exactly the same as 'Left Join' in Sql. Its function is given above. Here you should consider \u2018df1 as table1 and, df2 as table2.","b359709c":"\nMore complexly, we can also give","5a80a857":"\nIn the first, we grouped according to 'Salary' and showed the lowest salaries. Then we showed the salary of the lowest salary lawyer.","80fd102f":"\nHere, we sorted the profession and found the average salary of the CEOs. GroupBy Operations is not a difficult issue as seen. It is a very concise subject.","06864080":"<a id=\"20\"><\/a> <br>\n# Methods of Reading the Data Set:","dbd04cd0":"<a id=\"6\"><\/a> <br>\n# Linspace function:","c2621acd":"\nThe same logic can be executed with Right Join. Its function and code are given below.","57ca59fc":"The series are very similar to them since they are created based on the Numpy sequences. The series is a one-dimensional data structure consisting of tagged data. Label values \u200b\u200bare called index. The data itself can consist of numbers, strings, or other Python objects. Lists, sequences or dictionaries can be used to create the series. Pandas Series take the following variables.","ec11c0a8":"Indexing Array structures and Indexing are the same. if you know you can pass.Now let's create a new data and start","7d659252":"\nWe do the process of adding a new column as follows.","11cd1544":"NumPy is a library for the Python programming language; It adds support for large, multidimensional arrays and matrices and offers a large collection of high-end mathematical functions to work in these arrays. It is indispensable for data science. You also cannot switch to Machine and Deep learning algorithms without knowing Numpy. A lot of processing can be done with Numpy. We will address almost all of them. If you're ready, let's start.\n\nFirst, it should be imported.","1287f6c4":"\nAnd we were grouped according to the 'Salary' feature.","8d9ca0ce":"But with this special method, we can handle our transactions much better. But there is something we need to pay attention to. 225 is the square of 15. You don't necessarily have to use square numbers, you give 20 values, but you can also create a matrix (5.4). Now, we will do short and necessary actions. For example, it will give the smallest value on the name 'min ()'.\n\nImage processing, GANs algorithm, real-time object and face recognition and more. You must know this function well to learn and do all these","9d609021":"\nLet's create two data sets. And let's combine it as follows.","5e2354da":"\nif you are looking for very special data, you can do it this way","b2fadace":"<a id=\"18\"><\/a> <br>\n# Concatenate Merge And Join Functions:","7386155a":"\nAs it is understood, the 'np.nan' code creates a 'Not a Number' in the data.","b56e2a96":"\nThis code is the answer to the question 'How many' NaN 'do you have in' Column '?","55ee54e5":"\nValues \u200b\u200bthat are 'True' represent 'NaN'.","3951a3a0":"And this is how we synced this data to a DataFrame.\nI am not saying that you should use the steps you will see after that. However, the steps you may review may vary depending on the desired or searched data. Sometimes, parameters such as average, 0, 1 and standard deviation can be placed in places where data is missing. Sometimes it is deleted directly. This is entirely up to what you want to do.","947cd095":"You can obtain more statistical values \u200b\u200bby using '.T'","7cb72458":"\nYou can also apply any operation to the column or row you want.","6dcf056c":"\nIt could also be combined.","449163c2":"In the process you see here, the data in Data1 will return 'False' if it is less than 40 and 'True' if it is bigger.","1e7e1313":"<a id=\"12\"><\/a> <br>\n# Pandas Series:","19efb337":"df = pd.read_csv (\"..\/ input \/ Data_Name.csv\") # Kaggle to write a kernel (but the update is sometimes not working)","484c29bc":"<a id=\"2\"><\/a> <br>\n# First step to NumPy,Arrays:","878fc12a":"\nHere, 'NaN' values \u200b\u200brepresent 'False' values \u200b\u200bin the above Boolean value.","c78296ed":"Let's say we have 3 percent humidity in 3 different cities in 3 different months.","45b83a36":"\nAnd we even met our first parameter. You need to write the key to the 'On' parameter. The key should have an important place in your data so that it can be a 'key' in the real sense.","5cdec2d0":"<a id=\"5\"><\/a> <br>\n# Zeros, Ones and Eye Functions:","d3c3b87a":"\nThis issue can actually be explained by the following.","25eb01db":"<a id=\"17\"><\/a> <br>\n# GroupBy Operations:","cd709788":"Now we will see the Arrays being indexed and a few small operations.","752daecb":"\nLet's create our data and start.","2756d8c3":"\nSometimes, when we use it, it may not come out properly. Sometimes the loss is lost and it can take us away from our goal. Unfortunately we will explain on this page. But first, a missing data should be attempted.","b7c49f50":"\nOur data is not very suitable for some parameters (kind and na_position). Some gave the same result. But we also wanted to show how it's done. As we said, it is not used much, you can search if you want.\nLet's come to the 'Pivot Table' topic. There is nothing to be afraid of if you know Excel. Because it's exactly the same. If you don't know, don't worry. Because it has a very simple usage.","19db2121":"\nMulti index, as the name implies, is used in cases where there is a large number of indexes and is grouped as a basis.","f7d96890":"Pandas is an open source library for Python programming language that provides high-performance, easy-to-use data structures and data analysis tools. It is used to open '.csv' and '.txt' files and to easily reach the desired result by reading the data contained in it. In other words, thanks to Pandas, we can open an excel file and select a column or row in it and process it. The process of shaping the data made in the Numpy library can be used in more detail.\nWith Pandas, you can do many things you can think of successfully and with a few lines of code. For example, the data of the image of the first black hole is arranged with pandas. Pandas is also optimized for speed and can operate very quickly.\n\n\nLet's start with import first","92e3c429":"\nwe use it when we want to find or get the value of our data at certain intervals. If you wish, let's remember our data and start with simple operations.","81cea3e6":"dataset = pd.read_csv ('File_Path \\ Data_Name.csv') # You can read this on your IDE on PC.","35a9df26":"\nWe have done some of the above functions before. The 'df.index' function is probably not the only thing I describe. He also started from '0' to '6', '1' and '1' each. Its meaning under it is that simple. Now let's move on to sort_values \u200b\u200b().\nYou see the parameters it receives below. \"By\" specifies what to get, while \"ascending\" specifies what to rank. You can sort from small to large or large to small. You already know the 'Axis' and 'Inplace' parameters. You can edit your data according to the 3 types of \"kind\" parameter below. It is not used much, but if you want, you can search. 'Na_postion' allows you to specify the position of 'NaN' values.","6dfea31f":"\nThe data that is not here is of course assigned as 'NaN'. This process can be used not only in 2 cases but also in larger numbers.\n\n\n\n\nLet's continue with Join. The 'Join' functions can be thought of as joining transactions under the name. And it can also be thought of as 'clusters' in high school. So let's create two data and start doing these things.","1ba84503":"\nWe want to learn another data in the matrix, and let's say we need to learn the 2nd data of the 2nd index.","f8871bc2":"\n I hope you have learned something and thank you for coming to this tutorial. You can like the tutorial to motivate me. I will soon post an article about statistics.\ntake good care of yourself","93e94412":"\n'The default value of axis is 0. and '0' rows represent '1' columns. The 'inplace' parameter here is important. It determines whether this operation is permanent and when we say 'True' it permanently assigns.\n\n\n\nWe can assign a 'Column' value as index title as follows.\n\n\ndf.set_index('Columns name', inplace = True)","2e484e92":"<a id=\"4\"><\/a> <br>\n# Arange Function:","91320ce3":"\nHowever, your data is not updated automatically when you do these things. You need to update it, we do it as above.","ceb25b34":"\nNext are the 'inner' and 'outer' join functions.","94c61daa":"excelset = pd.read_excel ('Excels_Name.xlsx') # To read the Excel File","74b90644":"<a id=\"9\"><\/a> <br>\n# Numpy Basic Operations:","7d91f681":"<a id=\"10\"><\/a> <br>\n# Using Numpy Transpose:","55012674":"'Value_counts ()' is a function that returns how many of which value.\n","80152ae4":"Now our function will yield random numbers between 0 and 1.","f2b53371":"you can even select more than one column, not just 1 column.","c42b7e10":"Let's create 3 Series and apply some processing on these series.","fc14d3bd":"\nAfter creating our data, we throw it into the DataFrame.","a7d79c7a":"\nThe process of making rows of columns and rows of the matrix is \u200b\u200bdone with \".T\" with Numpy. The situation below is at a level that can explain everything.","f3b575b5":"\nYou can create a pivot table as above. It's that simple.","4376912c":"\nIn the first line above, we have permanently assigned the index name 'Column6'. In the 2nd line, we inquired about the title of the index. In the last code, it queries the column name with the same logic and returns 'None' because we cannot assign it.","7fd8a0a8":"\nBefore we started, we said we'd talk about corr (). Let's explain it here (although the data is not suitable). As we mentioned before, it tells about the correlation.","754a89fd":"And let's come to Eye function, the last function of this section. It is a little difficult to describe him. But its function is quite simple.","00014e73":"\nWhile 'describe ()' gives some statistical information, 'corr ()' gives correlation information. But as it is not compatible with this data, we will explain below. \"Info ()\", as the name suggests, provides basic information. We recommend using these functions as this will be your first look at the data.","e850e2d1":"\nLet's start with Concatenate first. Basically, we do the joining process with this function. It is like the 'zip' function in the same lists.","e8ce9ca1":"\nHere it shows the ones larger than '0.5' in 'df'. Those who are 'False' are again shown as 'NaN'. We will explain this later with better examples.","1cbbefd9":"\nNow that we have created our data, we can create the first Array.","b2896f58":"Now our function is to get a determinant.","3fd31517":"We can start according to the fact that we have created our data.","bdb15ce8":"We made the process of importing our library under the name \"np\". You don't have to. But the literature is also called \"np\". After doing this simplest operation, we will create Data and step into this magical world.","0cc7935b":"If we set this logic to 'value' and divide it by 5 (to get an average), it will assign '10' instead of 'NaN' values.\nWith the same logic, we can also make values \u200b\u200bsuch as standard deviation and variance. But we explained this in our previous article and you can easily apply the code there.\nSometimes it is quite functional in simpler queries.","6f225b2e":"\nLet's talk a little about the 'xs' function. You see that it is equal to a code we know above. The 'xs' function can perform functional functions such as 'loc', 'iloc', and it also provides us good advantages.","a2d0e423":"\nIt generally covers basic mathematical operations and other fields. You will understand as you progress. But first, let's create a new data","1418640f":"The Arange function converts the 2 numbers you give to Array.","9871ef63":"dataset.to_csv ('Data_Name') # To convert the data back to csv","c5383905":"<a id=\"8\"><\/a> <br>\n# Indexing Array Structures:","57fae40c":"\nWhen we set the 'Axis' parameter according to 'Column', it returns 'Column1' to us with no 'NaN' value and deletes the others. At the same time, it is not permanent unless you give the 'inplace' value 'True'.","2b77b544":"\n'Unique ()' tells us how many 'unique' data the data is given. The code below gives the number of 'unique' values.","89471c11":"\n'Head ()' shows the top 5 values, but it can show as much as the value it includes. In the example 2 is given. Likewise, \"tail ()\" shows the last 5 values. It can also take a value like 'head ()'."}}