{"cell_type":{"cc4fec3f":"code","904619cf":"code","39efda03":"code","8341c20d":"code","35e32a73":"code","c33f2ae9":"code","2d879550":"code","b6e4941e":"code","f24e19eb":"code","f8ac2c1e":"code","3b193326":"code","3174be99":"code","9edffbaa":"code","2d9ace7b":"code","bc8a096b":"code","6e4bc642":"code","18cf8dd5":"markdown","3203c4e5":"markdown","36031d8f":"markdown","546647cf":"markdown","8d9f9cbc":"markdown","f3432c0e":"markdown","d6e1631f":"markdown","b11e23e1":"markdown","80ed3bd5":"markdown","b9e7cd09":"markdown","8a900491":"markdown","5d947918":"markdown","08829e1c":"markdown","caa0a0c8":"markdown"},"source":{"cc4fec3f":"import numpy as np\nimport pandas as pd\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","904619cf":"df = pd.read_csv('..\/input\/home-data-for-ml-course\/train.csv')\ndf.head()","39efda03":"df.info()","8341c20d":"df.describe()","35e32a73":"df.shape","c33f2ae9":"# Importing Decision Tree Model\nfrom sklearn.tree import DecisionTreeRegressor\n\n# Importing Random Forest Model\nfrom sklearn.ensemble import RandomForestRegressor\n\n# Importing train_test_split to split our data\nfrom sklearn.model_selection import train_test_split\n\n# Importing mean_absolute_error to find Mean absolute error of each model\nfrom sklearn.metrics import mean_absolute_error","2d879550":"# Create target object and call it y\ny = df['SalePrice']\n\n# Create X\nfeatures = ['LotArea', 'YearBuilt', '1stFlrSF', '2ndFlrSF', 'FullBath', 'BedroomAbvGr', 'TotRmsAbvGrd']\nX = df[features]\n\n# Split into validation and training data\ntrain_X, val_X, train_y, val_y = train_test_split(X, y, random_state=1)","b6e4941e":"# Specify Model\ndecision_tree_model = DecisionTreeRegressor(random_state=1)\n\n# Fit Model\ndecision_tree_model.fit(train_X, train_y)\n\n# Make validation predictions and calculate mean absolute error\nval_predictions = decision_tree_model.predict(val_X)\nval_mae_1 = mean_absolute_error(val_predictions, val_y)\nprint(\"Validation MAE when not specifying max_leaf_nodes: {:,.0f}\".format(val_mae_1))","f24e19eb":"# Function to return Mean absolute error\ndef get_mae(max_leaf_nodes, train_X, val_X, train_y, val_y):\n    model = DecisionTreeRegressor(max_leaf_nodes=max_leaf_nodes, random_state=0)\n    model.fit(train_X, train_y)\n    preds_val = model.predict(val_X)\n    mae = mean_absolute_error(val_y, preds_val)\n    return(mae)","f8ac2c1e":"# Function to return best tree size (Best max_leaf_nodes value)\ndef get_best_tree_size():\n    candidate_max_leaf_nodes = [5, 25, 50, 100, 250, 500]\n    mae_array = []\n    \n    # Write loop to find the ideal tree size from candidate_max_leaf_nodes\n    for x in candidate_max_leaf_nodes:\n        mae = get_mae(x, train_X, val_X, train_y, val_y)\n        mae_array.append(mae)\n        \n    # Find minimum MAE and return best tree size\n    min_mae = min(mae_array)\n    min_mae_index = mae_array.index(min_mae)\n    return candidate_max_leaf_nodes[min_mae_index]","3b193326":"# Store the best value of max_leaf_nodes (it will be either 5, 25, 50, 100, 250 or 500)\nbest_tree_size = get_best_tree_size()\n\n# Specify Model\ndecision_tree_with_max_leaf_nodes_model = DecisionTreeRegressor(max_leaf_nodes=best_tree_size, random_state=1)\n\n# Fit Model\ndecision_tree_with_max_leaf_nodes_model.fit(train_X, train_y)\n\n# Make validation predictions and calculate mean absolute error\nval_predictions = decision_tree_with_max_leaf_nodes_model.predict(val_X)\nval_mae_2 = mean_absolute_error(val_predictions, val_y)\nprint(\"Validation MAE when specifying max_leaf_nodes: {:,.0f}\".format(val_mae_2))","3174be99":"# Define the model. Set random_state to 1\nrf_model = RandomForestRegressor(random_state=1)\n\n# fit your model\nrf_model.fit(train_X, train_y)\n\n# Calculate the mean absolute error of your Random Forest model on the validation data\nrf_val_predictions = rf_model.predict(val_X)\nrf_val_mae = mean_absolute_error(rf_val_predictions, val_y)\n\nprint(\"Validation MAE for Random Forest Model: {:,.0f}\".format(rf_val_mae))","9edffbaa":"print(\"Validation MAE when not specifying max_leaf_nodes: {:,.0f}\".format(val_mae_1))\nprint(\"Validation MAE when specifying max_leaf_nodes: {:,.0f}\".format(val_mae_2))\nprint(\"Validation MAE for Random Forest Model: {:,.0f}\".format(rf_val_mae))","2d9ace7b":"# Create target object and call it y\ny = df['SalePrice']\n\n# Create X\nfeatures = ['LotArea', 'YearBuilt', '1stFlrSF', '2ndFlrSF', 'FullBath', 'BedroomAbvGr', 'TotRmsAbvGrd']\nX = df[features]\n\n# Define the model. Set random_state to 1\nrf_model = RandomForestRegressor(random_state=1)\n\n# fit your model\nrf_model.fit(X, y)","bc8a096b":"df_test = pd.read_csv('..\/input\/home-data-for-ml-course\/test.csv')\ndf_test.head()","6e4bc642":"# Create val_X\nfeatures = ['LotArea', 'YearBuilt', '1stFlrSF', '2ndFlrSF', 'FullBath', 'BedroomAbvGr', 'TotRmsAbvGrd']\nval_X = df_test[features]\n\n# Predict SalePrice with Random Forest model\nrf_val_predictions = rf_model.predict(val_X)\n\n# Create output dataframe\noutput = pd.DataFrame({'Id': df_test['Id'], 'SalePrice': rf_val_predictions})\noutput.to_csv('submission.csv', index=False)\noutput","18cf8dd5":"# 3. Reading Train CSV Data to build models \ud83d\udcdd","3203c4e5":"# 5.3. Random Forest Model \ud83c\udf32\ud83c\udf33\ud83c\udf32","36031d8f":"# 8. Reading Test CSV Data to Predict values \ud83d\udcdd","546647cf":"# 5.1. Decision Tree Model \ud83c\udf33","8d9f9cbc":"# 5. Building models \ud83e\udd16\n**Our aim is to find the best model to predict the SalePrice (Target Variable) from the values of features like LotArea, YearBuilt, 1stFlrSF, 2ndFlrSF, FullBath, BedroomAbvGr, TotRmsAbvGrd.**","f3432c0e":"# 9. Predict using our final model \ud83d\udcca","d6e1631f":"# 2. Importing required libraries \ud83d\udcda","b11e23e1":"# 6. Comparing MAE values of all models \ud83d\udcca","80ed3bd5":"# 1. Introduction \u2b07\n**This notebook is our attempt to build various Decision trees and Random forest models and to find the best model out among them.**\n\n**Please Dont forget to UpVote this notebook if you like this, so that it will motivate me to do more such notebooks**\n\n\n# Now, Lets dive into this Notebook. \ud83d\ude03","b9e7cd09":"# A Complete Guide For Decision Trees and Random Forest Models with Home Dataset \ud83c\udfe0\n![home.jpg](attachment:home.jpg)","8a900491":"# 10. Conclusion\n**Finally we found the best model with least MAE value, build the final model and predicted the SalePrice values with our final model.**\n\n**Please Dont forget to UpVote this notebook if you like this, so that it will motivate me to do more such notebooks**\n\n\n# **Thank You \ud83d\ude03**","5d947918":"# 5.2. Decision Tree Model with max_leaf_nodes specified \ud83c\udf33","08829e1c":"# 7. Building the best final model \ud83e\udd16\n**By comparing the MAE values of all models, it is clear that Random forest is the best model among all. So we choose Random forest approach to create our final model.**","caa0a0c8":"# 4. Importing models and other required libraries \ud83d\udcda"}}