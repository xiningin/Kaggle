{"cell_type":{"c0fef9c5":"code","f788e46f":"code","61203963":"code","90bcf0f2":"code","7cd91d40":"code","5f0551a4":"code","88a18eb7":"code","3355e0f2":"code","ff0f6ac7":"code","bc154286":"code","c0131b39":"code","d227ccde":"code","26159926":"code","e7c99203":"code","c629a84e":"code","144293b0":"code","c00cf0b5":"code","1575cb74":"code","61d3ab2f":"markdown","5fd097a1":"markdown","98a8a651":"markdown","6edec2e6":"markdown","19c6af5f":"markdown","8fa248a3":"markdown"},"source":{"c0fef9c5":"!ls '\/kaggle\/input\/google-smartphone-decimeter-challenge'","f788e46f":"!ls \/kaggle\/input\/google-smartphone-decimeter-challenge\/train\/2020-05-14-US-MTV-1\/Pixel4\/","61203963":"import os\nfrom os.path import join\nimport pandas as pd\n\nclass DataReader:\n    def __init__(self):\n        self.input_path='\/kaggle\/input\/google-smartphone-decimeter-challenge'\n        self.train_df = self.read_train_csv()\n        \n    def read_train_csv(self):\n        return pd.read_csv(join(self.input_path, 'baseline_locations_train.csv'))\n        \n    def read_supplemental_gnss_logs(self, phone_path):\n        \"\"\" Read supplemental gnss logs from these file formats .20o\/.21o\/.nmea\"\"\"\n        # TODO convert it to CSV using this script\n        # https:\/\/stackoverflow.com\/questions\/65394166\/how-to-read-an-nmea-file-with-python\n        curr_path = join(self.input_path, phone_path, 'supplemental')\n        for dirname, _, filenames in os.walk(curr_path):\n            for filename in filenames:\n#                 print(os.path.join(dirname, filename))\n                with open(join(curr_path, filename)) as f:\n                    file_content = f.read()\n                    print(file_content)\n                    \n        \n    def read_gnss_logs(self, path, phone_name):\n        with open(join(path, phone_name + '_GnssLog.txt')) as f:\n            file_content = f.read()\n            return file_content\n    \n    def read_one_phone_data(self, phone_path):\n        curr_path = join(self.input_path, phone_path)\n        phone_name = curr_path.split('\/')[-1]\n        ground_truth_df = pd.read_csv(join(curr_path, 'ground_truth.csv'))\n        derived_df = pd.read_csv(join(curr_path, phone_name + '_derived.csv'))\n        gnss_logs = self.read_gnss_logs(curr_path, phone_name)\n        # supp_logs = self.read_supplemental_gnss_logs(curr_path)\n        \n        return ground_truth_df, derived_df, gnss_logs\n    \n    def read_all_phone_data(self, phone_path):\n        pass\n#         curr_path = join(self.input_path, phone_path)\n#         ground_truth = pd.read_csv(join(curr_path, 'ground_truth.csv'))\n#         return ground_truth\n\n    def create_submission_file(self):\n        pass\n    ","90bcf0f2":"data = DataReader()","7cd91d40":"print(\"Shape of train_df :\", data.train_df.shape)\ndata.train_df.head(3)","5f0551a4":"data.train_df.describe()","88a18eb7":"import pandas_profiling as pp\npp.ProfileReport(data.train_df)","3355e0f2":"ground_truth_df, derived_df, gnss_logs = data.read_one_phone_data('train\/2020-05-14-US-MTV-1\/Pixel4')\nground_truth_df.head(2)","ff0f6ac7":"ground_truth_df.describe()","bc154286":"derived_df.describe()","c0131b39":"!ls \/kaggle\/input\/google-smartphone-decimeter-challenge\/test\/2020-05-15-US-MTV-1\/Pixel4","d227ccde":"derived_test = pd.read_csv('\/kaggle\/input\/google-smartphone-decimeter-challenge\/test\/2020-05-15-US-MTV-1\/Pixel4\/Pixel4_derived.csv')","26159926":"derived_test.columns","e7c99203":"# correctedPrM = rawPrM + satClkBiasM - isrbM - ionoDelayM - tropoDelayM.","c629a84e":"output_df = pd.merge(data.train_df, ground_truth_df, on=['collectionName', 'phoneName', 'millisSinceGpsEpoch'])","144293b0":"from mpl_toolkits.basemap import Basemap\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(10,10))\ndelta = 0\nm = Basemap(projection = 'merc', llcrnrlat=output_df.latDeg_x.min() - delta,\\\n    urcrnrlat=output_df.latDeg_x.max() + delta, llcrnrlon=output_df.lngDeg_x.min() - delta,\\\n    urcrnrlon=output_df.lngDeg_x.max() + delta,lat_ts=40,resolution='l')\n\nlat = output_df.latDeg_x.tolist()\nlon = output_df.lngDeg_x.tolist()\n\nx, y = m(lon, lat)\nm.plot(x, y, 'o-', markersize=1, linewidth=1) \nlat2 = [x+0.005 for x in output_df.latDeg_y]\nlon2 = [x+0.005 for x in output_df.lngDeg_y]\nx2, y2 = m(lon2, lat2)\nm.plot(x2, y2, 'o-', markersize=1, linewidth=1) \n\nm.drawcoastlines()\nm.fillcontinents(color='yellow')\nm.drawmapboundary(fill_color='white')\nm.drawstates(color='black')\nm.drawcountries(color='black')\nplt.title(\"Route of a single phone\")\nplt.show() ","c00cf0b5":"# TODO build a model","1575cb74":"submission_file = pd.read_csv(join(data.input_path, 'sample_submission.csv'))\nsubmission_file.to_csv('submission.csv', index= False)","61d3ab2f":"## Input data","5fd097a1":"## Plot ground truth and Approximated ground truth together","98a8a651":"# Model","6edec2e6":"# Submission","19c6af5f":"### Contents of a single phone directory","8fa248a3":"## Reader class for easy data reading"}}