{"cell_type":{"4e789f50":"code","25bffda3":"code","146c9ec1":"code","a2c20da6":"code","30a78836":"code","b44d07f1":"code","446e99cd":"code","4abae6a9":"code","3e051626":"code","c5dbd601":"code","225a1696":"code","f30d87f8":"code","22405d83":"code","ca7fdbbd":"code","6aeedf63":"markdown","88d22da2":"markdown","9ccbc9eb":"markdown","90b0e374":"markdown","a056a5b4":"markdown","cad7f2a6":"markdown","49657ecf":"markdown","c4718495":"markdown","d6c51e5b":"markdown","d34ffff6":"markdown"},"source":{"4e789f50":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","25bffda3":"X_full = pd.read_csv('..\/input\/titanic\/train.csv')\nX_test_full = pd.read_csv('..\/input\/titanic\/test.csv')\n\nX_full.head()","146c9ec1":"print(\"The mean age for class 3 passengers is:\\t\", X_full.Age.loc[X_full.Pclass == 3].median())\nprint(\"The mean age for class 2 passengers is:\\t\", X_full.Age.loc[X_full.Pclass == 2].median())\nprint(\"The mean age for class 1 passengers is:\\t\", X_full.Age.loc[X_full.Pclass == 1].median())","a2c20da6":"print(\"The mean fare for class 3 passengers is:\\t\", X_full.Fare.loc[X_full.Pclass == 3].median())\nprint(\"The mean fare for class 2 passengers is:\\t\", X_full.Fare.loc[X_full.Pclass == 2].median())\nprint(\"The mean fare for class 1 passengers is:\\t\", X_full.Fare.loc[X_full.Pclass == 1].median())","30a78836":"def get_age(data, i):\n    if data['Age'][i] == 0:\n        if data['Pclass'][i] == 3:\n            data['Age'][i] = 24.0\n        elif data['Pclass'][i] == 2:\n            data['Age'][i] = 29.0\n        else:\n            data['Age'][i] = 37.0\n    return","b44d07f1":"def get_fare(data, i):\n    if data['Age'][i] == 0:\n        if data['Pclass'][i] == 3:\n            data['Fare'][i] = 8.05\n        elif data['Pclass'][i] == 2:\n            data['Fare'][i] = 14.25\n        else:\n            data['Fare'][i] = 60.287499999999994\n    return","446e99cd":"# Fill in NaN values with 0\nX_full['Age'].fillna(0, inplace=True)\nX_test_full['Age'].fillna(0, inplace=True)\n\n# Fill in 0 values with mean ages based on Pclass in train_data\nfor i in range(len(X_full.Age)):\n    get_age(X_full, i)\n\nfor i in range(len(X_test_full.Age)):\n    get_age(X_test_full, i)","4abae6a9":"# Fill in NaN values with 0\nX_full['Fare'].fillna(0, inplace=True)\nX_test_full['Fare'].fillna(0, inplace=True)\n\n# Fill in 0 values with mean ages based on Pclass in train_data\nfor i in range(len(X_full.Fare)):\n    get_age(X_full, i)\n\nfor i in range(len(X_test_full.Fare)):\n    get_age(X_test_full, i)","3e051626":"from sklearn.model_selection import train_test_split\n\ny = X_full.Survived\nX_full.drop(['Survived'], axis=1, inplace=True)\n\nX_train_full, X_valid_full, y_train, y_valid = train_test_split(X_full, y, \n                                                                train_size=0.8, test_size=0.2,\n                                                                random_state=0)\n\n# \"Cardinality\" means the number of unique values in a column\n# Select categorical columns with relatively low cardinality (convenient but arbitrary)\ncategorical_cols = [cname for cname in X_train_full.columns if\n                    X_train_full[cname].nunique() < 10 and \n                    X_train_full[cname].dtype == \"object\"]\n\n# Select numerical columns\nnumerical_cols = [cname for cname in X_train_full.columns if \n                X_train_full[cname].dtype in ['int64', 'float64']]\n\n# Keep selected columns only\n# my_cols = categorical_cols + numerical_cols\n# X_train = X_train_full[my_cols].copy()\n# X_valid = X_valid_full[my_cols].copy()\n# X_test = X_test_full[my_cols].copy()","c5dbd601":"from sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\n\n# Preprocessing for numerical data\nnumerical_transformer = SimpleImputer(strategy='constant')\n\n# Preprocessing for categorical data\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n\n# Bundle preprocessing for numerical and categorical data\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_cols),\n        ('cat', categorical_transformer, categorical_cols)\n    ])","225a1696":"from sklearn.ensemble import RandomForestClassifier\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\n\n# Bundle preprocessing and modeling code in a pipeline\nmy_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n                              ('model', model)\n                             ])\n\n# # Preprocessing of training data, fit model \nmy_pipeline.fit(X_full, y)\n\n# # Preprocessing of validation data, get predictions\n# preds = my_pipeline.predict(X_valid)\n\n","f30d87f8":"from sklearn.model_selection import cross_val_score\n\n# Multiply by -1 since sklearn calculates *negative* MAE\nscores = -1 * cross_val_score(my_pipeline, X_full, y,\n                              cv=5,\n                              scoring='average_precision')\n\nprint(\"MAE scores:\\n\", scores)","22405d83":"test_preds = my_pipeline.predict(X_test_full)\n\nprint(test_preds)","ca7fdbbd":"output = pd.DataFrame({'PassengerId': X_test_full.PassengerId, 'Survived': test_preds})\noutput.to_csv('my_submission.csv', index=False)\n\nprint(\"your submission was successfully saved!\")","6aeedf63":"# Titanic Survival Predictions","88d22da2":"We select the data we want to test and put them into easy-to-use variables.","9ccbc9eb":"### Import the Data","90b0e374":"### Models & Training","a056a5b4":"### Submission","cad7f2a6":"### Describe the Data","49657ecf":"We will fill in the missing data in the Age column with this information.","c4718495":"We will fill in the missing data in the Fare column with this information.","d6c51e5b":"### Functions","d34ffff6":"### Features"}}