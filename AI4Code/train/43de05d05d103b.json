{"cell_type":{"fba597bb":"code","2d90fde9":"code","b9548d8e":"code","65a1d83f":"code","940f6825":"code","17503497":"code","027f9be9":"code","59cbd9ab":"code","1d726f63":"code","bbdf34ef":"code","95f79b28":"code","7e6f7b4e":"code","d92a70c0":"code","6aa2b62c":"code","675aaa1f":"code","fd89d0f5":"code","5a5a6cae":"code","4f211f12":"code","c9e318d6":"code","01856aff":"code","b85b283b":"code","df07da90":"code","6c4bcaed":"code","e6404ac2":"code","338cffe2":"code","fa50bcdf":"code","d1bf4372":"code","0c8e2f62":"code","0ba12ef4":"code","9b1de112":"code","a8a2ef9e":"code","768198dc":"code","f147f8c2":"code","304fbfaf":"code","cae5ab57":"code","970cd555":"code","7f4944d1":"code","cbe5ab75":"code","cc3f0f29":"code","01758d82":"code","3c875d60":"markdown","3c8da575":"markdown","68fbea28":"markdown","cae25241":"markdown","c3a690e1":"markdown","6f7b0d64":"markdown","d8ee1dd9":"markdown","9f4ab084":"markdown","e1ed7950":"markdown","abe32eb9":"markdown","3fedc4d0":"markdown","91f64f2f":"markdown","e57eb734":"markdown","20eae33f":"markdown","a7dd17cf":"markdown"},"source":{"fba597bb":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno\n\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","2d90fde9":"data= pd.read_csv(\"\/kaggle\/input\/customer-segmentation\/Train.csv\")\ndata_test=pd.read_csv(\"\/kaggle\/input\/customer-segmentation\/Test.csv\")\ndf= data.copy()\ndf_test=data_test.copy()\n\ndfmaster=pd.concat([df,df_test], axis=0)\ndfmaster.head()","b9548d8e":"dfmaster.info()","65a1d83f":"dfmaster.shape","940f6825":"#Missing values?\ndfmaster.isnull().sum()","17503497":"msno.matrix(dfmaster)","027f9be9":"#Hay duplicados?\ndfmaster.duplicated().sum()","59cbd9ab":"sns.catplot(x=\"Family_Size\",kind=\"count\",data=dfmaster)\nsns.catplot(x=\"Work_Experience\",kind=\"count\",data=dfmaster)\nsns.catplot(x=\"Graduated\",kind=\"count\",data=dfmaster)\nsns.catplot(x=\"Ever_Married\",kind=\"count\",data=dfmaster)\nsns.catplot(x=\"Profession\",kind=\"count\",data=dfmaster)\nsns.catplot(x=\"Var_1\",kind=\"count\",data=dfmaster)\nsns.catplot(x=\"Spending_Score\",kind=\"count\",data=dfmaster)","1d726f63":"dfmaster.drop_duplicates()","bbdf34ef":"dfmaster.drop([\"Work_Experience\"],axis=1, inplace=True)\ndfmaster[\"Ever_Married\"].fillna(\"No\", inplace=True)\ndfmaster[\"Graduated\"].fillna(\"No\", inplace=True)\ndfmaster.dropna(subset=[\"Profession\"], inplace=True)\ndfmaster.dropna(subset=[\"Var_1\"], inplace=True)\ndfmaster[\"Family_Size\"].fillna(dfmaster[\"Family_Size\"].mean(), inplace=True)","95f79b28":"dfmaster.isnull().sum()","7e6f7b4e":"dfclean= dfmaster.copy()","d92a70c0":"#Gender\ngendummy=pd.get_dummies(dfclean.Gender)\ndfclean = pd.concat([dfclean, gendummy], axis=1)\ndfclean.drop([\"Gender\"],axis=1, inplace=True)","6aa2b62c":"#Ever_Married\nmardummy=pd.get_dummies(dfclean.Ever_Married,prefix=\"Married\")\ndfclean = pd.concat([dfclean, mardummy], axis=1)\ndfclean.drop([\"Ever_Married\"],axis=1, inplace=True)","675aaa1f":"#Graduated\ngradummy=pd.get_dummies(dfclean.Graduated,prefix=\"Graduated\")\ndfclean = pd.concat([dfclean, gradummy], axis=1)\ndfclean.drop([\"Graduated\"],axis=1, inplace=True)","fd89d0f5":"#Spending Score\nspedummy=pd.get_dummies(dfclean.Spending_Score,prefix=\"Spending_Score\")\ndfclean = pd.concat([dfclean, spedummy], axis=1)\ndfclean.drop([\"Spending_Score\"],axis=1, inplace=True)","5a5a6cae":"C=[\"Female\",\"Married_No\",\"Graduated_No\",\"Spending_Score_Average\"]\ndfclean=dfclean.drop(C,axis=1)","4f211f12":"#Profession, Var_1 and Segmentation\nfrom sklearn.preprocessing import LabelEncoder\nlabelencoder=LabelEncoder()\ndfclean['Profession'] = labelencoder.fit_transform(dfclean['Profession'])\ndfclean['Var_1'] = labelencoder.fit_transform(dfclean['Var_1'])\ndfclean['Segmentation'] = labelencoder.fit_transform(dfclean['Segmentation'])","c9e318d6":"dfclean.head()","01856aff":"'''def decodificar(datos):\n  gendummy=pd.get_dummies(datos.Gender)\n  datos = pd.concat([datos, gendummy], axis=1)\n  datos.drop([\"Gender\"],axis=1, inplace=True)\n\n  mardummy=pd.get_dummies(datos.Ever_Married,prefix=\"Married\").astype(int)\n  datos = pd.concat([datos, mardummy], axis=1)\n  datos.drop([\"Ever_Married\"],axis=1, inplace=True)\n\n  gradummy=pd.get_dummies(datos.Graduated,prefix=\"Graduated\").astype(int)\n  datos = pd.concat([datos, gradummy], axis=1)\n  datos.drop([\"Graduated\"],axis=1, inplace=True)\n\n  from sklearn.preprocessing import LabelEncoder\n  labelencoder=LabelEncoder()\n  datos['Profession'] = labelencoder.fit_transform(datos['Profession']).astype(int)\n  datos['Var_1'] = labelencoder.fit_transform(datos['Var_1']).astype(int)\n  datos['Segmentation'] = labelencoder.fit_transform(datos['Segmentation']).astype(int)\n  datos['Spending_Score'] = labelencoder.fit_transform(datos['Spending_Score']).astype(int)\n\n\n  return datos'''","b85b283b":"dfclean.describe().T","df07da90":"dfclean.corr()[\"Segmentation\"]","6c4bcaed":"sns.set(rc={'figure.figsize':(15,12)})\nsns.heatmap(dfclean.corr(),annot=True)","e6404ac2":"dfclean.drop([\"ID\"],axis=1,inplace=True)\ndfclean.drop([\"Var_1\"],axis=1,inplace=True)","338cffe2":"#sns.set(rc={'figure.figsize':(15,12)})\n#sns.pairplot(dfmaster, hue=\"Segmentation\", height=3,aspect=2)","fa50bcdf":"sns.displot(data=dfmaster.Age.values)","d1bf4372":"sns.catplot(x=\"Segmentation\",data=dfmaster,kind=\"count\",height=7).set(title='Customers')","0c8e2f62":"sns.catplot(x=\"Gender\",hue=\"Segmentation\",data=dfmaster,kind=\"count\",height=7).set(title='Segmention\/Gender')","0ba12ef4":"sns.catplot(x=\"Ever_Married\",hue=\"Segmentation\",data=dfmaster,kind=\"count\",height=7).set(title='Segmentaci\u00f3n\/Married')","9b1de112":"sns.catplot(x=\"Profession\",hue=\"Segmentation\",data=dfmaster,kind=\"count\",height=7,aspect=2).set(title='Segmentation\/Profession')","a8a2ef9e":"sns.catplot(x=\"Spending_Score\",hue=\"Segmentation\",data=dfmaster,kind=\"count\",height=7).set(title='Segmentation\/Spending_Score')","768198dc":"sns.catplot(x=\"Var_1\",hue=\"Segmentation\",data=dfmaster,kind=\"count\",height=7).set(title='Segmentation\/Var1')","f147f8c2":"\nfrom sklearn.model_selection import train_test_split\n\nseed=777\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier,AdaBoostClassifier\nfrom xgboost import XGBClassifier\n\n\nlr = LogisticRegression(n_jobs = -1)\nsvc = SVC() \nknn = KNeighborsClassifier(n_jobs= -1)\nrf = RandomForestClassifier(n_jobs = -1)\nxgb = XGBClassifier(n_jobs = -1)\ngb=GradientBoostingClassifier()\nabc=AdaBoostClassifier()\n","304fbfaf":"X= dfclean.drop([\"Segmentation\"],axis=1)\nY= dfclean.Segmentation\nX.head()","cae5ab57":"X_train,X_test,y_train,y_test=train_test_split(X,Y,test_size=0.2)","970cd555":"#Por defecto el metodo score retorna el coeficiente de determinacion R^2\ndef entrenar(model):\n    model.fit(X_train, y_train)\n    return (model.score(X_train, y_train),model.score(X_test, y_test))\n    #return model.score(X_test, y_test)\n\n#Entrenamos\nmodelos = {'LogisticRegression': lr,\n          'KNeighborsClassifier': knn,\n          'SVC': svc,\n          'RandomForestClassifier': rf,\n          'XGBClassifier': xgb,\n          'GradientBoostingClassifier': gb,\n          'AdaBoostClassifier': abc}\nscores={}\ntrain_scores={}\nfor nombre, modelo in modelos.items():\n    scores[nombre]=entrenar(modelo)[1]\n    train_scores[nombre]=entrenar(modelo)[0]\n\nscores.items()","7f4944d1":"scores = pd.DataFrame(scores,index=['Score']).transpose()\nscores = scores.sort_values('Score')\n\ntrain_scores = pd.DataFrame(train_scores,index=['Train Score']).transpose()\ntrain_scores = train_scores.sort_values('Train Score')","cbe5ab75":"cm = sns.color_palette('flare',as_cmap=True)\nscores = scores.style.background_gradient(cmap=cm)\nscores","cc3f0f29":"train_scores.style.background_gradient(cmap=cm)","01758d82":"#Be careful with overfitting!","3c875d60":"**Treat missing values:**\n*   We will eliminate the Work_Experience column, because if we look for its correlation with Segmentation later, it does not have much relevance for a potential prediction.\n*   We'll fill the Ever_Married and Graduated missing values with \"No\"\n*   For Var_1 and Profession remove rows with missing values\n*   Family_Size impute with mean\n","3c8da575":"# Conclusion","68fbea28":" **We have 10,695 total rows and 10 columns**\n \n7 categorical:\n*   Gender of the customer\n*   Marital status of the customer\n*   Is the customer a graduate?\n*   Profession of the customer\n*   Spending score of the customer\n*   Var_1: Anonymised Category for the customer\n*   **Segmentation (target)**\n\n4 numerical:\n\n*   ID\n*   Age of customer\n*   Work Experience in years\n*   Number of family members for the customer (including the customer)\n\n\n\n  \n\n\n\n\n\n","cae25241":"# Missing and duplicated values","c3a690e1":"\n1.  The age is between 18 and 89 years old, with an average of 43 and 75% of the clients do not exceed 53\n2.   Half of clients have 1 year of work experience\n3. Average family size is 2 people\n\n\n","6f7b0d64":"# Encoding","d8ee1dd9":"To help the business adopt the best marketing strategies for each of its clients applying segmentation, we approach the process from the definition of the business objective, data collection, exploration, understanding of correlations, processing and selection of relevant features, the modeling and implementation of machine learning algorithms.\n\n\n---\n\n\nThe chosen model was GradienteBoostingClassifier for being the most precise, although it does not present a great precision like the rest.\nWe could come up with a more robust model if we get more data about the customers, it's something to consider in the organization with the business team and the data engineer to explore if there are more relevant features available.","9f4ab084":"**Observations:**\n*   There does not seem to be a strong relationship between the variables and our target\n*   Even so, ***Age***, ***marital status*** and ***profession*** affect segmentation slightly\n*  Age and being married have a notorious relationship, as well as being married with the spending socre\n* Var_1 and ID do not seem to add value to the prediction \n\n\n\n\n","e1ed7950":"# Model","abe32eb9":"**Remove duplicated rows**\n","3fedc4d0":"One Hot Encoding for Gender, Ever_Married, Graduated and Spending_Score. Label Encoding for the rest.","91f64f2f":"# EDA","e57eb734":"**There is missing data on the marital status of the clients, if they are graduates, what is their profession, their work experience (too many), the size of their family and the anonymous variable. These values must be treated next and in turn, eliminate duplicates**","20eae33f":"# **Context**\nAn automobile company has plans to enter new markets with their existing products. After intensive market research, they\u2019ve deduced that the behavior of the new market is similar to their existing market.\n\nIn their existing market, the sales team has classified all customers into 4 segments (A, B, C, D ). Then, they performed segmented outreach and communication for a different segment of customers. This strategy has work e exceptionally well for them. They plan to use the same strategy for the new markets and have identified 2627 new potential customers.\n\nYou are required to help the manager to predict the right group of the new customers.\n\n\n","a7dd17cf":"# Describe and Correlation"}}