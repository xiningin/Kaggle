{"cell_type":{"e19da1d0":"code","142b036d":"code","25e83419":"code","d2798143":"code","950be142":"code","98bcbe38":"code","1ca9ef94":"code","d72a98e8":"code","8204b388":"code","99e6cb61":"code","f807d800":"code","db05c6a4":"code","3eca2ee9":"code","326af2a1":"code","682731b3":"code","05c12f75":"code","a5b911c6":"code","170d9d23":"code","4e135188":"code","5b8a26d9":"code","0f3d3ed3":"code","97685ce6":"code","2cc0384d":"code","1041ea64":"code","5e463f74":"code","f6a7beab":"code","98820735":"code","714dd4e9":"code","12c4f8e2":"code","4674f6d5":"code","2c60116b":"code","424026c1":"code","433d6e9f":"markdown","eb28fa55":"markdown","3837a3d3":"markdown"},"source":{"e19da1d0":"!wget https:\/\/raw.githubusercontent.com\/snrazavi\/Deep_Learning_in_Python_2018\/master\/Week01\/train.py\n!wget https:\/\/raw.githubusercontent.com\/snrazavi\/Deep_Learning_in_Python_2018\/master\/Week01\/utils.py\n!wget https:\/\/raw.githubusercontent.com\/snrazavi\/Deep_Learning_in_Python_2018\/master\/Week01\/data_utils.py\n!wget https:\/\/raw.githubusercontent.com\/snrazavi\/Deep_Learning_in_Python_2018\/master\/Week01\/model_utils.py\n!wget https:\/\/raw.githubusercontent.com\/snrazavi\/Deep_Learning_in_Python_2018\/master\/Week01\/predict_utils.py\n!wget https:\/\/raw.githubusercontent.com\/snrazavi\/Deep_Learning_in_Python_2018\/master\/Week01\/vis_utils.py","142b036d":"%reload_ext autoreload\n%autoreload 2\n%matplotlib inline\n\nimport math\nimport time\nimport os\nimport glob\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm\nfrom PIL import Image\nfrom sklearn.metrics import confusion_matrix\n\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.autograd import Variable\n\nimport torchvision\nimport torchvision.datasets as datasets\nimport torchvision.models as models\nimport torchvision.transforms as transforms\n\n# Our libraries\nfrom train import train_model\nfrom model_utils import *\nfrom predict_utils import *\nfrom vis_utils import *\n\n# some initial setup\nnp.set_printoptions(precision=2)\nuse_gpu = torch.cuda.is_available()\nnp.random.seed(1234)\n","25e83419":"use_gpu","d2798143":"DATA_DIR = '..\/input\/dogs-vs-cats-train-validadion-and-evaluation\/data'\nsz = 224\nbatch_size = 16","950be142":"os.listdir(DATA_DIR)","98bcbe38":"trn_dir = f'{DATA_DIR}\/train'\nval_dir = f'{DATA_DIR}\/validation'","1ca9ef94":"os.listdir(trn_dir)","d72a98e8":"trn_fnames = glob.glob(f'{trn_dir}\/*\/*.jpg')\ntrn_fnames[:5]","8204b388":"img = plt.imread(trn_fnames[3])\nplt.imshow(img);","99e6cb61":"train_ds = datasets.ImageFolder(trn_dir)","f807d800":"train_ds.classes","db05c6a4":"train_ds.class_to_idx","3eca2ee9":"train_ds.root","326af2a1":"train_ds.imgs","682731b3":"type(train_ds.transform)","05c12f75":"tfms = transforms.Compose([\n    transforms.Resize((sz, sz)),  # PIL Image\n    transforms.ToTensor(),        # Tensor\n    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n])\n\ntrain_ds = datasets.ImageFolder(trn_dir, transform=tfms)\nvalid_ds = datasets.ImageFolder(val_dir, transform=tfms)","a5b911c6":"len(train_ds), len(valid_ds)","170d9d23":"train_dl = torch.utils.data.DataLoader(train_ds, batch_size=batch_size, \n                                       shuffle=True, num_workers=8)\nvalid_dl = torch.utils.data.DataLoader(valid_ds, batch_size=batch_size, \n                                       shuffle=True, num_workers=8)\n","4e135188":"inputs, targets = next(iter(train_dl))\nout = torchvision.utils.make_grid(inputs, padding=3)\nplt.figure(figsize=(16, 12))\nimshow(out, title='Random images from training data')","5b8a26d9":"class SimpleCNN(nn.Module):\n    \n    def __init__(self):\n        super(SimpleCNN, self).__init__()\n        \n        self.conv1 = nn.Sequential(\n            nn.Conv2d(3, 16, kernel_size=5, padding=2),\n            nn.BatchNorm2d(16),\n            nn.ReLU(),\n            nn.MaxPool2d(2)\n        )\n        \n        self.conv2 = nn.Sequential(\n            nn.Conv2d(16, 32, kernel_size=5, padding=2),\n            nn.BatchNorm2d(32),\n            nn.ReLU(),\n            nn.MaxPool2d(2)\n        )\n        \n        self.fc = nn.Linear(56 * 56 * 32, 2)\n        \n    def forward(self, x):\n        out = self.conv1(x)\n        out = self.conv2(out)            # (bs, C, H,  W)\n        out = out.view(out.size(0), -1)  # (bs, C * H, W)\n        out = self.fc(out)\n        return out","0f3d3ed3":"model = SimpleCNN()\n\n# transfer model to GPU\nif use_gpu:\n    model = model.cuda()","97685ce6":"model","2cc0384d":"criterion = nn.CrossEntropyLoss()\noptimizer = optim.SGD(model.parameters(), lr=0.002, momentum=0.9)","1041ea64":"num_epochs = 10\nlosses = []\nfor epoch in range(num_epochs):\n    for i, (inputs, targets) in enumerate(train_dl):\n        inputs = to_var(inputs)\n        targets = to_var(targets)\n        \n        # forwad pass\n        optimizer.zero_grad()\n        outputs = model(inputs)\n        \n        # loss\n        loss = criterion(outputs, targets)\n        losses += [loss.data]\n        # backward pass\n        loss.backward()\n        \n        # update parameters\n        optimizer.step()\n        \n        # report\n        if (i + 1) % 50 == 0:\n            print('Epoch [%2d\/%2d], Step [%3d\/%3d], Loss: %.4f'\n                  % (epoch + 1, num_epochs, i + 1, len(train_ds) \/\/ batch_size, loss.data))","5e463f74":"plt.figure(figsize=(12, 4))\nplt.plot(losses)\nplt.xlabel('Iteration')\nplt.ylabel('loss')\nplt.title('Cross Entropy Loss');","f6a7beab":"def evaluate_model(model, dataloader):\n    model.eval()  # for batch normalization layers\n    corrects = 0\n    for inputs, targets in dataloader:\n        inputs, targets = to_var(inputs, True), to_var(targets, True)\n        outputs = model(inputs)\n        _, preds = torch.max(outputs.data, 1)\n        corrects += (preds == targets.data).sum()\n    \n    print('accuracy: {:.2f}'.format(100. * corrects \/ len(dataloader.dataset)))","98820735":"evaluate_model(model, valid_dl)","714dd4e9":"evaluate_model(model, train_dl)","12c4f8e2":"visualize_model(model, train_dl)","4674f6d5":"visualize_model(model, valid_dl)","2c60116b":"plot_errors(model, valid_dl)","424026c1":"y_pred, y_true = predict_class(model, valid_dl)\ncm = confusion_matrix(y_true, y_pred)\nplot_confusion_matrix(cm, train_ds.classes, normalize=True, figsize=(4, 4))","433d6e9f":"### Confusion matrix","eb28fa55":"\n## Transformations\n\nDataloader object uses these tranformations when loading data.\n","3837a3d3":"###  Dataloaders"}}