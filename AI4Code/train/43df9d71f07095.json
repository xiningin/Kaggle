{"cell_type":{"2a2cbf88":"code","50c54749":"code","924373b2":"code","24a4396d":"code","d040bab6":"code","ff144212":"code","dfe5865c":"code","13b3dfa7":"code","94d4a8e4":"code","a41a8a1e":"code","7ba4dc7a":"code","6def221f":"code","bc457398":"code","89e3b68b":"code","b51305ca":"code","a9503b62":"code","5be891eb":"code","70f77be5":"code","ff5f7e09":"code","974dc2ac":"code","3820a514":"code","6e8ab578":"code","19c9ca65":"code","2f632462":"code","21b2b673":"code","740e2f23":"code","3056d3f7":"code","98a16b74":"code","8db4baeb":"code","e72939f3":"code","f143ec48":"code","bd10024e":"code","44eebd56":"code","3d87abc9":"code","9a1f8738":"code","e7f84add":"code","0fbe4141":"code","91c479f9":"code","5d15e953":"code","2a8a4bdb":"code","289b3fac":"code","1cc87915":"code","c0af0d80":"code","4e904d67":"code","3d609be4":"code","e874cbd3":"code","6d7cf146":"code","5df4b516":"code","463943c0":"code","68d17f5b":"code","c6c10958":"code","3236602a":"code","2600a384":"code","147adf69":"code","929602be":"code","fa984318":"code","d9165bcb":"code","3d4e3ff7":"code","f73c5eff":"code","df1bf364":"code","703dc8b9":"code","02984f2b":"code","28281314":"code","3c84ad4c":"markdown","7c82e153":"markdown","7f2b3668":"markdown","5151bb26":"markdown","e34666ae":"markdown","cadc7e56":"markdown","48c7afaa":"markdown","1a2e9797":"markdown","dddb722d":"markdown","051cb3f0":"markdown","47a62189":"markdown"},"source":{"2a2cbf88":"# Python 3 environment  withanalytics libraries installed\n# as defined by the kaggle\/python Docker \n\nimport numpy as np \nimport pandas as pd \n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","50c54749":"#more libraries\n\n#visualization\nimport matplotlib.pyplot as plt \n%matplotlib inline\nimport seaborn as sns \n\n# ignore error messages\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n","924373b2":"train = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/sales_train.csv')\ntest = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/test.csv')\n\nsubmission = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/sample_submission.csv')\n\nitems = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/items.csv')\nitem_cats = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/item_categories.csv')\nshops = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/shops.csv')","24a4396d":"##Find if dataset has NaNs\n# Total missing values\ntrain.isnull().sum().sum()","d040bab6":"#fix dates\ntrain.date=pd.to_datetime(train.date)","ff144212":"# Get ordinal day of the year \ntrain['dayofyear']=train.date.dt.dayofyear\n\n#get year\ntrain['year'] = pd.DatetimeIndex(train['date']).year\n#get month\ntrain['month'] = pd.DatetimeIndex(train['date']).month","dfe5865c":"#find possible outliers\n\nboxplot =train.boxplot( rot=45)","13b3dfa7":"#remove outliers\n\n#drop rows with items over 40000\ndf1=train[train['item_price'] < 40000]\n#verify\ndf1.shape","94d4a8e4":"df1.corr().style.background_gradient(cmap='mako')","a41a8a1e":"#df1\n#grouped by months\ncolors='steelblue', 'pink', 'lightseagreen', 'darkorange','gray','purple', 'peru','crimson','navy','forestgreen','tan','yellow'\ndf1.groupby('month')['month'].agg('count').plot(kind='pie',title='Group-By Month', colors=colors, figsize=(7,7), autopct='%0.1f')","7ba4dc7a":"df2=df1[['date_block_num', 'shop_id', 'item_id', 'item_price',\n       'item_cnt_day', 'dayofyear', 'year', 'month']]","6def221f":"df2.year.value_counts()","bc457398":"#find possible outliers in single column\n\nboxplot4 =df2.boxplot(column=['item_cnt_day'])","89e3b68b":"#drop rows with items day count over 1000\ndf2=df2[df2['item_cnt_day'] < 1000]\n#verify\ndf2.shape","b51305ca":"#separate by year\ndf2013=df2[df2.year == 2013]\ndf2014=df2[df2.year == 2014]\ndf2015=df2[df2.year == 2015]","a9503b62":"df2013.corr().style.background_gradient(cmap='GnBu')","5be891eb":"df2013.groupby(df2013.month)['item_cnt_day'].sum().plot(figsize=(12, 5), color='peru')\nplt.ylabel('Item count')\nplt.title(\" 2013 Item count per day, per Month\", fontsize=18)","70f77be5":"df2014.corr().style.background_gradient(cmap='Spectral')","ff5f7e09":"df2014.groupby(df2014.month)['item_cnt_day'].sum().plot(figsize=(12, 5), color='darkgreen')\nplt.ylabel('Item count')\nplt.title(\"2014 Item count per day, per Month\", fontsize=18)","974dc2ac":"df2015.corr().style.background_gradient(cmap='cool')","3820a514":"df2015.groupby(df2015.month)['item_cnt_day'].sum().plot(figsize=(12, 5), color='darkorange')\nplt.ylabel('Item count')\nplt.title(\"2015 Item count per day, per Month\", fontsize=18)","6e8ab578":"#separate by month\ndfjan=df2[df2.month == 1]\ndffeb=df2[df2.month == 2]\ndfmar=df2[df2.month == 3]\ndfapl=df2[df2.month == 4]\ndfmay=df2[df2.month == 5]\ndfjun=df2[df2.month == 6]\ndfjul=df2[df2.month == 7]\ndfaug=df2[df2.month == 8]\ndfsep=df2[df2.month == 9]\ndfoct=df2[df2.month == 10]\ndfnov=df2[df2.month == 11]\ndfdec=df2[df2.month == 12]","19c9ca65":"sns.catplot(x='year', y='item_cnt_day', data=dfjan)","2f632462":"#separate Jan numbers by year\ndfjan2013=dfjan[dfjan.year == 2013]\ndfjan2014=dfjan[dfjan.year == 2014]\ndfjan2015=dfjan[dfjan.year == 2015]","21b2b673":"dfjan2013","740e2f23":"itemPerDayJan2013=dfjan2013.dayofyear.value_counts()","3056d3f7":"item_cnt_monthjan2013 = dfjan2013.item_cnt_day.sum()\nitem_cnt_monthjan2013","98a16b74":"item_cnt_month_jan2014 = dfjan2014.item_cnt_day.sum()\nitem_cnt_month_jan2014","8db4baeb":"item_cnt_month_jan2015 = dfjan2015.item_cnt_day.sum()\nitem_cnt_month_jan2015","e72939f3":"#create ID column\ndf2['index1'] = df2.index","f143ec48":"df2.rename(columns = {\"index1\": \"ID\"},  \n          inplace = True) ","bd10024e":"MyTrainDF=df2[['ID','shop_id', 'item_id','item_price', 'item_cnt_day', 'date_block_num', \n       'dayofyear', 'year', 'month']]","44eebd56":"MyTrainDF","3d87abc9":"#repeat for remaining months\ndfdec2013=dfdec[dfdec.year == 2013]\ndfdec2014=dfdec[dfdec.year == 2014]\ndfdec2015=dfdec[dfdec.year == 2015]\n\ndffeb2013=dffeb[dffeb.year == 2013]\ndffeb2014=dffeb[dffeb.year == 2014]\ndffeb2015=dffeb[dffeb.year == 2015]\n\ndfmar2013=dfmar[dfmar.year == 2013]\ndfmar2014=dfmar[dfmar.year == 2014]\ndfmar2015=dfmar[dfmar.year == 2015]\n\ndfapl2013=dfapl[dfapl.year == 2013]\ndfapl2014=dfapl[dfapl.year == 2014]\ndfapl2015=dfapl[dfapl.year == 2015]\n\ndfmay2013=dfmay[dfmay.year == 2013]\ndfmay2014=dfmay[dfmay.year == 2014]\ndfmay2015=dfmay[dfmay.year == 2015]\n\ndfjun2013=dfjun[dfjun.year == 2013]\ndfjun2014=dfjun[dfjun.year == 2014]\ndfjun2015=dfjun[dfjun.year == 2015]\n\ndfjul2013=dfjul[dfjul.year == 2013]\ndfjul2014=dfjul[dfjul.year == 2014]\ndfjul2015=dfjul[dfjul.year == 2015]\n\ndfaug2013=dfaug[dfaug.year == 2013]\ndfaug2014=dfaug[dfaug.year == 2014]\ndfaug2015=dfaug[dfaug.year == 2015]\n\ndfsep2013=dfsep[dfsep.year == 2013]\ndfsep2014=dfsep[dfsep.year == 2014]\ndfsep2015=dfsep[dfsep.year == 2015]\n\ndfoct2013=dfoct[dfoct.year == 2013]\ndfoct2014=dfoct[dfoct.year == 2014]\ndfoct2015=dfoct[dfoct.year == 2015]\n\ndfnov2013=dfnov[dfnov.year == 2013]\ndfnov2014=dfnov[dfnov.year == 2014]\ndfnov2015=dfnov[dfnov.year == 2015]","9a1f8738":"def f(row):\n    if (row['month'] == 1) and (row['year']==2013) :\n        val = row['item_cnt_day']\/dfjan2013.item_cnt_day.sum()\n    elif (row['month'] == 1) and (row['year']==2014) :\n        val = row['item_cnt_day']\/dfjan2014.item_cnt_day.sum()\n    elif  (row['month'] == 1) and (row['year']==2015) :\n        val = row['item_cnt_day']\/dfjan2015.item_cnt_day.sum()\n        \n    elif (row['month'] == 2) and (row['year']==2013) :\n        val = row['item_cnt_day']\/dffeb2013.item_cnt_day.sum()\n    elif (row['month'] == 2) and (row['year']==2014) :\n        val = row['item_cnt_day']\/dffeb2014.item_cnt_day.sum()\n    elif  (row['month'] == 2) and (row['year']==2015) :\n        val = row['item_cnt_day']\/dffeb2015.item_cnt_day.sum()\n        \n    elif (row['month'] == 3) and (row['year']==2013) :\n        val = row['item_cnt_day']\/dfmar2013.item_cnt_day.sum()\n    elif (row['month'] == 3) and (row['year']==2014) :\n        val = row['item_cnt_day']\/dfmar2014.item_cnt_day.sum()\n    elif  (row['month'] == 3) and (row['year']==2015) :\n        val = row['item_cnt_day']\/dfmar2015.item_cnt_day.sum()\n        \n    elif (row['month'] == 4) and (row['year']==2013) :\n        val = row['item_cnt_day']\/dfapl2013.item_cnt_day.sum()\n    elif (row['month'] == 4) and (row['year']==2014) :\n        val = row['item_cnt_day']\/dfapl2014.item_cnt_day.sum()\n    elif  (row['month'] == 4) and (row['year']==2015) :\n        val = row['item_cnt_day']\/dfapl2015.item_cnt_day.sum()\n        \n    elif (row['month'] == 5) and (row['year']==2013) :\n        val = row['item_cnt_day']\/dfmay2013.item_cnt_day.sum()\n    elif (row['month'] == 5) and (row['year']==2014) :\n        val = row['item_cnt_day']\/dfmay2014.item_cnt_day.sum()\n    elif  (row['month'] == 5) and (row['year']==2015) :\n        val = row['item_cnt_day']\/dfmay2015.item_cnt_day.sum()\n        \n    elif (row['month'] == 6) and (row['year']==2013) :\n        val = row['item_cnt_day']\/dfjun2013.item_cnt_day.sum()\n    elif (row['month'] == 6) and (row['year']==2014) :\n        val = row['item_cnt_day']\/dfjun2014.item_cnt_day.sum()\n    elif  (row['month'] == 6) and (row['year']==2015) :\n        val = row['item_cnt_day']\/dfjun2015.item_cnt_day.sum()\n        \n    elif (row['month'] == 7) and (row['year']==2013) :\n        val = row['item_cnt_day']\/dfjul2013.item_cnt_day.sum()\n    elif (row['month'] == 7) and (row['year']==2014) :\n        val = row['item_cnt_day']\/dfjul2014.item_cnt_day.sum()\n    elif  (row['month'] == 7) and (row['year']==2015) :\n        val = row['item_cnt_day']\/dfjul2015.item_cnt_day.sum()\n        \n    elif (row['month'] == 8) and (row['year']==2013) :\n        val = row['item_cnt_day']\/dfaug2013.item_cnt_day.sum()\n    elif (row['month'] == 8) and (row['year']==2014) :\n        val = row['item_cnt_day']\/dfaug2014.item_cnt_day.sum()\n    elif  (row['month'] == 8) and (row['year']==2015) :\n        val = row['item_cnt_day']\/dfaug2015.item_cnt_day.sum()\n        \n    elif (row['month'] == 9) and (row['year']==2013) :\n        val = row['item_cnt_day']\/dfsep2013.item_cnt_day.sum()\n    elif (row['month'] == 9) and (row['year']==2014) :\n        val = row['item_cnt_day']\/dfsep2014.item_cnt_day.sum()\n    elif  (row['month'] == 9) and (row['year']==2015) :\n        val = row['item_cnt_day']\/dfsep2015.item_cnt_day.sum()\n        \n    elif (row['month'] == 10) and (row['year']==2013) :\n        val = row['item_cnt_day']\/dfoct2013.item_cnt_day.sum()\n    elif (row['month'] == 10) and (row['year']==2014) :\n        val = row['item_cnt_day']\/dfoct2014.item_cnt_day.sum()\n    elif  (row['month'] == 10) and (row['year']==2015) :\n        val = row['item_cnt_day']\/dfoct2015.item_cnt_day.sum()\n        \n    elif (row['month'] == 11) and (row['year']==2013) :\n        val = row['item_cnt_day']\/dfnov2013.item_cnt_day.sum()\n    elif (row['month'] == 11) and (row['year']==2014) :\n        val = row['item_cnt_day']\/dfnov2014.item_cnt_day.sum()\n    elif  (row['month'] == 11) and (row['year']==2015) :\n        val = row['item_cnt_day']\/dfnov2015.item_cnt_day.sum()\n        \n    elif (row['month'] == 12) and (row['year']==2013) :\n        val = row['item_cnt_day']\/dfdec2013.item_cnt_day.sum()\n    elif (row['month'] == 12) and (row['year']==2014) :\n        val = row['item_cnt_day']\/dfdec2014.item_cnt_day.sum()\n    elif  (row['month'] == 12) and (row['year']==2015) :\n        val = row['item_cnt_day']\/dfdec2015.item_cnt_day.sum()\n        \n    else:\n        val = 0\n    return val","e7f84add":"MyTrainDF['item_cnt_month']= MyTrainDF.apply(f, axis=1)","0fbe4141":"MyTrainDF.corr().style.background_gradient(cmap='gist_yarg')","91c479f9":"#year plot\n\nx = MyTrainDF['year']\ny= MyTrainDF['item_cnt_month']\ncolors = ('darkorange')\n \n# Plot\nplt.scatter(x, y, c=colors, alpha=0.2)\nplt.title('Item count by month per year')\nplt.xlabel('year')\nplt.ylabel('item count per mo')\nplt.show()","5d15e953":"MyTrainDF.plot(kind='scatter', x='month',y='item_cnt_day', color='red')","2a8a4bdb":"#ML models\nfrom sklearn import metrics\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split \n\nfrom sklearn.linear_model import LinearRegression\n\n\nfrom sklearn.preprocessing import LabelEncoder\n\nfrom sklearn.model_selection import cross_val_score","289b3fac":"#Linear regression\nX = MyTrainDF['item_cnt_day'].values.reshape(-1,1)\ny = MyTrainDF['item_cnt_month'].values.reshape(-1,1)","1cc87915":"#split the data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=0)\n\nregressor = LinearRegression()  \nregressor.fit(X_train, y_train) #train the model","c0af0d80":"#Intercept\nprint(regressor.intercept_)\n#Slope\nprint(regressor.coef_)","4e904d67":"#Predict\npred1 = regressor.predict(X_test)","3d609be4":"#actual value and predicted value\ndfLinReg = pd.DataFrame({'Actual': y_test.flatten(), 'Predicted': pred1.flatten()})\ndfLinReg","e874cbd3":"plt.scatter(X_test, y_test,  color='blue')\nplt.plot(X_test, pred1, color='gray', linewidth=2)\nplt.show()","6d7cf146":"first10preds=dfLinReg.head(10)\nc='darkgreen', 'blueviolet'\nfirst10preds.plot(kind='bar',figsize=(9,6), color=c)\nplt.grid(which='major', linestyle='-', linewidth='0.3', color='green')\nplt.grid(which='minor', linestyle=':', linewidth='0.5', color='black')\nplt.show()","5df4b516":"print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, pred1)))","463943c0":"MyTrainDF","68d17f5b":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\n\nMyTrainDF[['shop_id','item_id',\n           'item_price', 'item_cnt_day',\n           'date_block_num','dayofyear', \n           'year','month','item_cnt_month']] = scaler.fit_transform(MyTrainDF[['shop_id','item_id',\n                                                                               'item_price', 'item_cnt_day',\n                                                                               'date_block_num','dayofyear', \n                                                                               'year','month','item_cnt_month']])\n\nX= MyTrainDF[['shop_id','item_id', 'item_cnt_day','dayofyear', 'month']].values\ny = MyTrainDF['item_cnt_month'].values\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3,\n                                                   random_state = 5) ","c6c10958":"from sklearn.metrics import mean_squared_error\nfrom sklearn.linear_model import Ridge\n\n#automated model using SCALED data\n\ndef plot_results(name, y_train, y_pred, num_to_plot=1000000, lims=(0.001,0.2), figsize=(6,5)):\n    plt.figure(figsize=figsize)\n    score = mean_squared_error(y_train, y_pred, squared=False)\n    plt.scatter(y_train[:num_to_plot] , y_pred[:num_to_plot], color=\"goldenrod\")\n    plt.plot(lims, lims)\n    plt.ylim(lims)\n    plt.xlim(lims)\n    plt.title(f'{name}: {score:0.5f}', fontsize=16)\n    plt.show()\n\nmodelName = [\"Ridge Regression\"]\n\nmodel = [Ridge(alpha = 0.01)]    \n\nfor name, model in zip(modelName, model):\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    plot_results(name, y_test, y_pred)\n","3236602a":"#actual value and predicted value\nridge = pd.DataFrame({'Actual': y_test.flatten(), 'Predicted': y_pred.flatten()})\nridge","2600a384":"first10preds=ridge.head(10)\nc='salmon', 'dimgray'\nfirst10preds.plot(kind='bar',figsize=(9,6), color=c)\nplt.grid(which='major', linestyle='-', linewidth='0.3', color='green')\nplt.grid(which='minor', linestyle=':', linewidth='0.5', color='black')\nplt.show()","147adf69":"from sklearn.tree import DecisionTreeRegressor\n\nregressor = DecisionTreeRegressor(random_state=2, max_depth=5)\nregressor.fit(X_train, y_train)","929602be":"pred2= regressor.predict(X_test)","fa984318":"#actual value and predicted value\ntree = pd.DataFrame({'Actual': y_test, 'Predicted': pred2.flatten()})\ntree","d9165bcb":"first10preds=tree.head(10)\nc='peru', 'rosybrown'\nfirst10preds.plot(kind='line',figsize=(10,8), color=c)\nplt.grid(which='major', linestyle='-', linewidth='0.3', color='green')\nplt.grid(which='minor', linestyle=':', linewidth='0.5', color='black')\nplt.show()","3d4e3ff7":"print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, pred2)))","f73c5eff":"prediction= pd.DataFrame(y_pred)\nprediction","df1bf364":"prediction.rename(columns = {0:'item_cnt_month'}, inplace=True)","703dc8b9":"#create ID column\nprediction['ID'] = prediction.index","02984f2b":"prd2=prediction[['ID','item_cnt_month']].head(214200)\nprd2","28281314":"#must have 214200 rows\n\n#ensure INDEX is false\n\n#df of results to csv\nprd2.to_csv('predictionDF.csv',index=False)","3c84ad4c":"### Results:   \nThe Ridge Regression performed best.   ","7c82e153":"**Goal**:   \nPredict total sales for every product and store in the next month.   \n**Data**:   \nTime-series dataset consisting of daily sales data by Russian software firm, 1C Company.    \n   \n   **Model**:   \n   Ridge Regression for future monthly item count.   \n","7f2b3668":"## 1. linear regression","5151bb26":"### scale the data","e34666ae":"## 2. Ridge Regression ","cadc7e56":"### Other types of regressions tried:  \n\n    Lasso Regression   \n    ElasticNet Regression    \n    \nThe results with these models were not better than the other ones displayed here.","48c7afaa":"### 3. Decision Tree Regression ","1a2e9797":"## Regressions   \nRegression is where a supervised model learns mapping from the data to then output results, like \u201c0.1\u201d, \u201c6.2\u201d, etc.\n","dddb722d":"Regression decision tree under-performed.","051cb3f0":"## finding: item_count_month","47a62189":"**December** seems to be the most active month for sales.   "}}