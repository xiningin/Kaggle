{"cell_type":{"1681bd7c":"code","2272a046":"code","14c6bca1":"code","11afa892":"code","f2257af8":"code","99e2613b":"code","aae1109a":"code","e22859a7":"code","ee1725dd":"code","31cfd315":"code","f65f0f56":"code","a544d630":"code","2c530808":"code","b80ab91b":"code","cdf89098":"code","e015bed7":"code","fc3fac06":"code","5631ff7c":"code","002d27b3":"code","f6961fe0":"code","d9dd58d0":"code","5f3a84f4":"code","9806d16e":"code","6cddb548":"code","3e916e22":"code","70b11c94":"markdown","0e09fb0b":"markdown","19c4ed2f":"markdown","452507a6":"markdown","802b0d3f":"markdown","78e6c22a":"markdown","2934e4f1":"markdown","e902d6a9":"markdown","cd5e548f":"markdown","c06ee642":"markdown","c7f55bba":"markdown","34d92f96":"markdown","61ada921":"markdown","29dafb86":"markdown","2c5e3570":"markdown","95c7c5fe":"markdown","2b1e6bb8":"markdown","e38cb60f":"markdown"},"source":{"1681bd7c":"import os\nimport numpy as np\n\nimport spacy \nfrom spacy import displacy\n\nimport gensim\nfrom gensim.corpora import Dictionary\nfrom gensim.models import LdaModel, CoherenceModel, LsiModel, HdpModel\nfrom gensim.models.wrappers import LdaMallet\n\nimport matplotlib.pyplot as plt\nimport sklearn\nimport keras\n\nimport warnings\n\nwarnings.filterwarnings('ignore', category=DeprecationWarning)\n# warnings.simplefilter('once')","2272a046":"test_data_dir = '{}'.format(os.sep).join([gensim.__path__[0], 'test', 'test_data'])\nprint(test_data_dir)\nlee_train_file = test_data_dir + os.sep + 'lee_background.cor'\nprint(lee_train_file)\ntext = open(lee_train_file).read()","14c6bca1":"nlp = spacy.load('en')","11afa892":"my_stop_words = ['say', '\\s', 'mr', 'Mr', 'said', 'says', 'saying', 'today', 'be']\nfor stopword in my_stop_words:\n    lexeme = nlp.vocab[stopword]\n    lexeme.is_stop = True","f2257af8":"doc = nlp(text)","99e2613b":"# doc","aae1109a":"sent = nlp('Last Thursday, Manchester United defeated AC Milan at San Siro.')","e22859a7":"for token in sent:\n    print(token.text, token.pos_, token.tag_)","ee1725dd":"for token in sent:\n    print(token.text, token.ent_type_)","31cfd315":"for ent in sent.ents:\n    print(ent.text, ent.label_)","f65f0f56":"displacy.render(sent, style='ent', jupyter=True)","a544d630":"for chunk in sent.noun_chunks:\n    print(chunk.text, chunk.root.text, chunk.root.dep_, chunk.root.head.text)","2c530808":"for token in sent:\n    print(token.text, token.dep_, token.head.text, token.head.pos_,\n         [child for child in token.children])","b80ab91b":"displacy.render(sent, style='dep', jupyter=True, options={'distance':90})","cdf89098":"# We add some words to the stop word list\ntexts, article = [], []\n\nfor word in doc:\n    \n    if word.text != '\\n' and not word.is_stop and not word.is_punct and not word.like_num and word.text != 'I':\n        article.append(word.lemma_)\n        \n    if word.text == '\\n':\n        texts.append(article)\n        article = []","e015bed7":"print(texts[0])","fc3fac06":"bigram = gensim.models.phrases.Phrases(texts)\ntexts = [bigram[line] for line in texts]\ntexts = [bigram[line] for line in texts]","5631ff7c":"print(texts[0])","002d27b3":"dictionary = Dictionary(texts)\ncorpus = [dictionary.doc2bow(text) for text in texts]","f6961fe0":"print(corpus[1])","d9dd58d0":"lsi_model = LsiModel(corpus=corpus, num_topics=10, id2word=dictionary)\nlsi_model.show_topics(num_topics=5)","5f3a84f4":"hdp_model = HdpModel(corpus=corpus, id2word=dictionary)\nhdp_model.show_topics()","9806d16e":"lda_model = LdaModel(corpus=corpus, num_topics=10, id2word=dictionary)\nlda_model.show_topics()","6cddb548":"import pyLDAvis.gensim","3e916e22":"pyLDAvis.enable_notebook()\npyLDAvis.gensim.prepare(lda_model, corpus, dictionary)","70b11c94":"> This is a great way to get a view of what words end up appearing in our documents, and what kind of document topics might be present.","0e09fb0b":"---\n# \ud83d\udcca pyLDAvis","19c4ed2f":"> Now we are done with a very important part of text analysis - the data cleaning and setting up of corpus. It must kept in mind that we created the corpus the way we did because that's how gensim requires it - most algorithms still require one to clean the data set the way we did, by removing stop words and numbers, adding the lemmatized form of the word, and using bigrams.","452507a6":"# \ud83e\uddf9 Continuing Cleaning\n\n> Have a quick look at the output of the doc object. It seems like nothing, right? But spaCy's internal data structure has done all the work for us. Let's see how we can create our corpus.","802b0d3f":"---\n# \ud83e\uddf9 Cleaning Data\n\n> We can't have state-of-the-art results without data which is as good. Let's spend this section working on cleaning and understanding our data set. We will be checking out `spaCy`, an industry grade text-processing package.","78e6c22a":"---\n# \ud83d\udcc2 Gathering Data\n\n> The dataset we will be working with will be the Lee corpus which is a shortened of the Lee Background Corpus, and the 20NG dataset. ","2934e4f1":"# \ud83d\udcb9 Computational Linguistics\n\nNow that we have our doc object. We can see that the doc object now contains the entire corpus. This is important because we will be using the doc object to create our corpus for the machine learning algorithms. When creating a corpus for `gensim\/scikit-learn`, we sometimes forget the incredible power which `spaCy` packs in its pipeline, so we will briefly demonstrate the same in this section with a smaller example sentence.\n","e902d6a9":"> - And this is the magic of spaCy - just like that, we've managed to get rid of stopwords, puctuation markers, and added lemmatized word.\n> - Sometimes topic modeling make more sense when `New` and `York` are treated as `New York` - we can do this by creating a bigram model and modifying our corpus accordingly.","cd5e548f":"---\n# \ud83d\udcda Topic Modeling\n\n> Topic Modeling refers to the probabilistic modeling of text document as topics. Gensim remains the most popular library to perform such modelling, and we will be using it to perform our topic modelling.","c06ee642":"## \ud83d\udd16 POS-Tagging","c7f55bba":"> For safe measure, let's add some stopwords. It's a newspaper corpus, so it is likely we will be coming across variations of 'said', 'Mister', and 'Mr'... which will not really add any value to the topic models.","34d92f96":"# \u2714\ufe0f Import Libraries","61ada921":"## \ud83d\udd16 NER-Tagging","29dafb86":"## \u2714\ufe0f LSI - Latent Semantic Indexing\n\n> LSI stands for Latent Semantic Indexing - It is a popular information retreival method which works by decomposing the original matrix of words to maintain key topics. ","2c5e3570":"## \u2714\ufe0f HDP - Hierarchical Drichlet Process\n\n> HDP, the Hierarchical Drichlet Process is an unsupervised topic model which figures out the number of topics on it's own.","95c7c5fe":"# \ud83d\udccc Notebook Goals\n> - Learn how to use the power of `spaCy` to clean textual data.\n> - Use different Topic Modelling techniques like `LDA (Latent Dirichlet Allocation)`, `LSI (Latent Semantic Indexing)`, and `HDP (Hierarchical Drichlet Process)`\n---\n\n# \ud83d\udcda Topic Modelling Overview\nLet's understand the general concept of Topic Modelling and why it's important! \n> - Topic Modeling allows for us to efficiently analyze large volumes of text by clustering documents into topics.\n> - A large amount of text data is unlabeled meaning we can't apply supervised learning approaches to create machine learning models for the data! In this case of text data, this means attempting to discover clusters of documents, grouped together by topic.\n> - A very important idea to keep in mind here is that we don't know the correct topic or right answer! All we know is that the documents clustered together share similar topic ideas. It is up to us to identify what these topics represent.\n\n---\n# \ud83d\udcd1 Text Analysis Tutorial\n\n> Our steps, naturally, is setting up ouy imports. We will be using spaCy for data pre-processing and computational linguistics, gensim for topic modelling, scikit-learn for classification, and Keras for text generation. ","2b1e6bb8":"## \u2714\ufe0f LDA - Latent Dirchlet Allocation\n\n> LDA, or Latent Dirchlet Allocation is arguably the most famous topic modeling algorithm out there. Out here we create a simple topic model with 10 topics.","e38cb60f":"## \ud83e\uddee Dependency Parsing"}}