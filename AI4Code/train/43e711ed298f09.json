{"cell_type":{"60cc8538":"code","753399bb":"code","226fa370":"code","f7d44eb3":"code","86cedffb":"code","ad94ffc9":"code","c85128b7":"code","15c295b4":"code","5fa13174":"code","c6665208":"code","7af2e1e0":"code","dda7b667":"code","db2fedd5":"code","c91d4eb9":"code","9802112d":"code","372a215d":"code","514271b6":"code","8a169ae5":"code","2620eeae":"code","733aeccf":"code","da3cad53":"code","2411a89e":"code","1b9e1f3e":"code","fee2dbe6":"code","32fa4021":"code","f1630249":"code","0f417a50":"code","6a28e43c":"code","c2d22ddd":"code","78114c3b":"code","afeb0ba5":"code","ea50112f":"code","98156768":"code","bdd7b430":"code","96ab7f81":"markdown","0afa3d77":"markdown","03674f4e":"markdown","834e59db":"markdown","c6ac9b3b":"markdown","27388ef5":"markdown","8433a2dc":"markdown","b684964e":"markdown","02712829":"markdown","ceb673a8":"markdown","014f207a":"markdown","1047903a":"markdown"},"source":{"60cc8538":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n\nimport seaborn as sns\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","753399bb":"plt.style.available","226fa370":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]","f7d44eb3":"train_df.head()","86cedffb":"train_df.describe().T","ad94ffc9":"# for ease to write \"Variable Descriptions\", \n#firstly copied this index and after that edited properly\ntrain_df.columns","c85128b7":"train_df.info()","15c295b4":"def bar_plot(variable):\n    \"\"\"\n    \n    input: variable ex: \"Sex\"\n    output: bar plot & value count\n    \"\"\"\n    # get feature\n    var = train_df[variable]\n    # count number of categorical variable(value\/sample)\n    varValue= var.value_counts()\n    \n    #visualize\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values )\n    plt.ylabel(\"Frequency\")\n    plt.title(\"Variable\")\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))","5fa13174":"category1 = [\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\",\"Parch\"]\nfor i in category1:\n    bar_plot(i)","c6665208":"category2 = [\"Cabin\", \"Name\",\"Ticket\"]\nfor i in category2:\n    print(\"{} \\n\".format(train_df[i].value_counts()))","7af2e1e0":"def plot_hist(variable):\n    plt.figure(figsize =(9,3))\n    plt.hist(train_df[variable], bins =50)\n    plt.xlabel(\"variable\")\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distrubition with hist\".format(variable))\n    plt.show()","dda7b667":"numericVar = [\"Fare\",\"Age\",\"PassengerId\"]\n\nfor i in numericVar:\n    plot_hist(i)\n","db2fedd5":"# Pclass vs Survived\n# Firstly will determine what you needed variable.\ntrain_df[[\"Pclass\",\"Survived\"]]","c91d4eb9":"#After that apply groupby command. For example if I choose \"Pclass\", Python sorts this \"Pclass\" column\n# OK. We did it. We use the \"Groupby\" command but \"What do you want\", tell the computer.\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False)","9802112d":"# \"I want to see \"This relation's mean.\"\n# In addition, how nice it would be if you sort the data...\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by=\"Survived\", ascending= False)","372a215d":"# Sex vs Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by=\"Survived\", ascending= False)","514271b6":"# SibSp vs Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by=\"Survived\", ascending= False)","8a169ae5":"# Parch vs Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by=\"Survived\", ascending= False)","2620eeae":"#Counter is a container that will hold the count of each of the elements present in the container.\na= [\"a\",\"a\",\"a\",\"a\",\"b\",\"b\"]\nCounter(a)","733aeccf":"def detect_outliers(df,features):\n    outlier_indices = []\n        \n    for i in features:\n        #1st quartile\n        Q1 = np.percentile(df[i],25)\n        #3rd quartile\n        Q3 = np.percentile(df[i],75)\n        #IQR\n        IQR = Q3-Q1\n        #Outlier step\n        outlier_step = IQR* 1.5\n        #Detect outlier and  their indices\n        outlier_list_col = df[(df[i] < Q1- outlier_step)  | (df[i] > Q3 + outlier_step)].index\n        #store indices\n        outlier_indices.extend(outlier_list_col)\n        \n    outlier_indices= Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n        \n    return multiple_outliers","da3cad53":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","2411a89e":"#drop outliers","1b9e1f3e":"train_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Fare\"]),axis =0 ).reset_index(drop = True)","fee2dbe6":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df],axis=0).reset_index(drop=True)","32fa4021":"train_df.head()","f1630249":"train_df.columns[train_df.isnull().any()]","0f417a50":"train_df.isnull().sum()","6a28e43c":"train_df[train_df[\"Embarked\"].isnull()]","c2d22ddd":"train_df.boxplot(column= \"Fare\", by = \"Embarked\")\nplt.show()","78114c3b":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","afeb0ba5":"train_df[train_df[\"Fare\"].isnull()]","ea50112f":"np.mean(train_df[train_df[\"Pclass\"] ==3][\"Fare\"])","98156768":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] ==3][\"Fare\"]))","bdd7b430":"train_df[train_df[\"Fare\"].isnull()]","96ab7f81":"<a id = \"1\"><\/a><br>\n# Load and Check Data\n","0afa3d77":"<a id = \"4\"><\/a><br>\n## Categorical Variable ","03674f4e":"# Introduction\nThe sinking of Titanic is one of the most notorious shipwrecks in the history. \nIn 1912, during her voyage, the Titanic sank after colliding with an iceberg, killing 1502 out of 2224 passengers and crew.\n\n<font color =\"red\">   \nContent:\n \n* 1.[Load and Check Data:](#1)\n* 2.[Variable Description:](#2) \n    * [Univariate Variable Analysis:](#3) \n        * [Categorical Variable Analysis:](#4) \n        * [Numerical Variable Analysis:](#5) \n* 3 .[Basic Data Analysis:](#6)\n* 4 .[Outlier Detection:](#7)\n* 5 .[Missing Value:](#8)\n    * [Find Missing Value:](#9)\n    * [Fill Missing Value:](#10)\n\n\n","834e59db":"<a id = \"9\"><\/a><br>\n## Find Missing Value","c6ac9b3b":"* float64(2) : Fare and Age\n* int64(5) : Pclass, Survived, PassengerId, SibSp, Parch\n* object(5) : Cabin, Embarked ,Ticket, Sex, Name","27388ef5":"<a id = \"8\"><\/a><br>\n# Missing Value\n* Find Missing Value\n* Fill Missing Value","8433a2dc":"<a id = \"10\"><\/a><br>\n## Fill Missing Value\n* Embarked has 2 missing value\n* Fare has only 1","b684964e":"<a id = \"7\"><\/a><br>\n# Outlier Detection:","02712829":"<a id = \"5\"><\/a><br>\n## Numerical Variable ","ceb673a8":"<a id = \"3\"><\/a><br>\n# Univariate Variable Analysis:\n* Categorical Variable: Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, SibSp, ParCh\n* Numerical Variable: Age,Fare, PassengerId","014f207a":"<a id = \"2\"><\/a><br>\n# Variable Description\n1. PassengerId :unique id number for each passenger\n1. Survived : passenger survive(1) or died(0)\n1. Pclass : passenger class\n1. Name : name\n1. Sex : gender of passengers\n1. Age : age of passengers\n1. SibSp : number of siblings spouses\n1. Parch : number of parents\/children\n1. Ticket : ticket number\n1. Fare : amount of money spent on ticket\n1. Cabin : cabin category\n1. Embarked : port where passenger embarked (C = Cherbourg, Q = Queenstone, S = Southampton\n     ","1047903a":"<a id = \"6\"><\/a><br>\n# Basic Data Analysis\n* Pclass- Survived\n* Sex- Survived\n* SibSp- Survived\n* Parch- Survived"}}