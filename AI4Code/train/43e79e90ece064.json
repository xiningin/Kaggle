{"cell_type":{"f4adb4e8":"code","fcf08566":"code","d7c5db3b":"code","251eaa76":"code","4eaa06aa":"code","fec0d8f5":"code","ecaf4ea8":"code","b0d89530":"code","5434dbca":"code","60d5e703":"code","dc7b1a5b":"code","96569b35":"code","230b2479":"code","510ad22c":"code","98697ed8":"code","d468e3c5":"code","84666ed2":"code","760da4c3":"code","0a6832ec":"code","cb216e49":"code","b6930017":"markdown","0e962644":"markdown","635a8460":"markdown","7a2d1fbf":"markdown","d5f21a99":"markdown","f45ed654":"markdown","1dd0f2c7":"markdown","1d488245":"markdown","36e7174f":"markdown","802ccd76":"markdown"},"source":{"f4adb4e8":"# \ub370\uc774\ud130 \uc804\ucc98\ub9ac\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn.datasets import make_regression\n#\ub370\uc774\ud130 \uc804\ucc98\ub9ac, \ud3c9\uade0\uacfc \ud45c\uc900\ud3b8\ucc28\uac00 \uac01\uac01 0,1\uc774 \ub418\ub3c4\ub85d \ubcc0\ud658\ud574\uc8fc\ub294 \ubaa8\ub4c8\nfrom sklearn.preprocessing import StandardScaler\n\n# \uae30\uacc4\ud559\uc2b5 \ubaa8\ub378 \uc0dd\uc131, \ud559\uc2b5, \ud3c9\uac00\nfrom sklearn.tree import DecisionTreeRegressor\n\n# \uc2dc\uac01\ud654\nimport matplotlib.pyplot as plt","fcf08566":"random_state = 2020\nn_samples = 50","d7c5db3b":"np.random.seed(random_state)\n\nX = np.random.rand(n_samples, 1) * 10\nprint(X)","251eaa76":"X = np.sort(X, axis=0)\nprint(X)","4eaa06aa":"y = np.sin(X).reshape(-1, )\ny[::5] = y[::5] + np.random.randn(int(np.ceil(n_samples\/5)))","fec0d8f5":"X_test = np.arange(0, 10, 0.01)\nX_test.shape","ecaf4ea8":"X_test = np.arange(0, 10, 0.01).reshape(-1, 1)\nX_test.shape","b0d89530":"# Scaling\nplt.figure(figsize=(8, 5))\nplt.scatter(X, y, s=20, edgecolor='black', c='lightblue', label='data')\nplt.legend(loc='lower right')\nplt.show()","5434dbca":"model = DecisionTreeRegressor(max_depth=None)\nmodel.fit(X, y)","60d5e703":"y_pred = model.predict(X_test)\ny_pred","dc7b1a5b":"# \uc6d0\ubcf8 \ub370\uc774\ud130 \ubc0f \uacb0\uacfc \uc2dc\uac01\ud654\nplt.figure(figsize=(8, 5))\n\nplt.plot(X_test, y_pred, label='max_depth=None', linewidth=2)\nplt.scatter(X, y, s=20, edgecolor='black', c='lightblue', label='data')\n\nplt.xlabel('data')\nplt.ylabel('target')\nplt.legend(loc='lower right')\nplt.show()","96569b35":"max_depths = [3, 5, None]\n#max_depths = [3]\n#max_depths = [None]","230b2479":"plt.figure(figsize=(12, 6))\nplt.scatter(X, y, s=20, edgecolor='black', c='lightblue', label='data')\nfor i, max_depth in enumerate(max_depths):\n    \n    # \ubaa8\ub378 \ud559\uc2b5\n    model = DecisionTreeRegressor(max_depth=max_depth)\n    model.fit(X, y)\n    \n    # \uc608\uce21\n    y_pred = model.predict(X_test)\n    \n    # plot\n    plt.plot(X_test, y_pred, label='max_depth={}'.format(max_depth), linewidth=1.5, alpha=0.7)\n    \nplt.legend(loc='lower right')\nplt.show()","510ad22c":"dataset = make_regression(n_samples=n_samples, n_features=2,\n                          n_informative=2, n_targets=1, random_state=random_state)\nX, y = dataset\nX","98697ed8":"y","d468e3c5":"scaler = StandardScaler()\nX = scaler.fit_transform(X)","84666ed2":"# \uc2dc\uac01\ud654\ub97c \uc704\ud55c \uaca9\uc790 \uc0dd\uc131\nx_min, x_max = X[:, 0].min() - .5, X[:, 0].max() + .5\ny_min, y_max = X[:, 1].min() - .5, X[:, 1].max() + .5\nxx, yy = np.meshgrid(np.arange(x_min, x_max, 0.02), np.arange(y_min, y_max, 0.02))\n\ngrid = np.hstack([xx.reshape(-1, 1), yy.reshape(-1, 1)])","760da4c3":"model = DecisionTreeRegressor(max_depth=None)\nmodel.fit(X, y)","0a6832ec":"# \uaca9\uc790 \uacf5\uac04\uc5d0 \ub300\ud55c \uc608\uce21 \ud655\ub960\uac12\ny_pred = model.predict(grid)\n\n# Contour\nZ = y_pred.reshape(xx.shape)","cb216e49":"# \uc2dc\uac01\ud654\nplt.figure(figsize=(5, 5))\n#\uacb0\uacfc\ub9cc\nplt.contourf(xx, yy, Z, alpha=0.5, cmap='Blues')\n#\ub370\uc774\ud130\ub9cc\nplt.scatter(X[:, 0], X[:, 1], c=y, edgecolors='k', cmap='Blues')\nplt.show()","b6930017":"## 1. \ubaa8\ub4c8 \ubd88\ub7ec\uc624\uae30","0e962644":"##  3. 2\ucc28\uc6d0 \ub370\uc774\ud130\uc14b","635a8460":"### depth\ub97c \ubc14\uafb8\uba74\uc11c \ubcc0\ud654\ub97c \uc54c\uc544\ubcf4\uae30","7a2d1fbf":"#### seed\ub85c \uace0\uc815\ud558\uc5ec \uac19\uc740 \ub370\uc774\ud130\ub97c \ub9cc\ub4e4 \uc218 \uc788\ub3c4\ub85d \uc124\uc815","d5f21a99":"import \ubd88\ub7ec\uc62c \ud328\ud0a4\uc9c0\uba85 as \uadf8 \ud328\ud0a4\uc9c0\ub97c \ud30c\uc774\uc36c\uc5d0\uc11c \uc0ac\uc6a9\ud560 \uc774\ub984","f45ed654":"# [\uc758\uc0ac\uacb0\uc815\ub098\ubb34 \uc2e4\uc2b5 1: Regression Tree - Toy Example]","1dd0f2c7":"###  Decision Tree Regressor","1d488245":"##### jupyter notebook \ub2e8\ucd95\ud0a4\n\n- ctrl+enter: \uc140 \uc2e4\ud589   \n- shift+enter: \uc140 \uc2e4\ud589 \ubc0f \ub2e4\uc74c \uc140 \uc774\ub3d9   \n- alt+enter: \uc140 \uc2e4\ud589, \ub2e4\uc74c \uc140 \uc774\ub3d9, \uc0c8\ub85c\uc6b4 \uc140 \uc0dd\uc131\n- a: \uc0c1\ub2e8\uc5d0 \uc0c8\ub85c\uc6b4 \uc140 \ub9cc\ub4e4\uae30\n- b: \ud558\ub2e8\uc5d0 \uc0c8\ub85c\uc6b4 \uc140 \ub9cc\ub4e4\uae30\n- dd: \uc140 \uc0ad\uc81c(x: \uc140 \uc0ad\uc81c)\n- \ud568\uc218 ( ) \uc548\uc5d0\uc11c shift+tab: arguments description. shift+tab+tab\uc740 \uae38\uac8c \ubcfc \uc218 \uc788\ub3c4\ub85d","36e7174f":"#### \ub370\uc774\ud130\uc14b \uc2dc\uac01\ud654","802ccd76":"##  2. $y=sin(x)+\\epsilon$"}}