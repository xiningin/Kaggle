{"cell_type":{"38d68749":"code","e641566a":"code","97603680":"code","1b30d14d":"code","5cba3156":"code","6f7c48f2":"code","8db3464b":"code","959bb0df":"code","66ee1b1b":"code","217cce21":"code","d6648314":"code","23b1142a":"code","9ae40168":"code","d5852a85":"code","503407dc":"code","10932ac9":"markdown","7be1f8ce":"markdown","85a1847e":"markdown"},"source":{"38d68749":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e641566a":"# Importing the data\ndf = pd.read_csv(\"..\/input\/gufhtugu-publications-dataset-challenge\/GP Orders - 4.csv\")","97603680":"#To know toal number of rows and column\ndf.shape","1b30d14d":"# to know missing values\ndf.isnull().sum()","5cba3156":"#Dropping Null values\ndf_1 =df.dropna()\ndf_1.shape","6f7c48f2":"df_1.info()","8db3464b":"#First five rows of the data\ndf_1.head()","959bb0df":"# to covert data to 1 from zero-indexing\ndf_1.index = df_1.index + 1","66ee1b1b":"df_1.head()","217cce21":"#Shout out affanamin for this function\n\nfrom itertools import chain\n\n# return list from series of comma-separated strings\ndef chainer(s):\n    return list(chain.from_iterable(s.str.split('\/')))\n\n# calculate lengths of splits\ndf_2 = df_1.copy()\nlens = df_2['Book Name'].str.split('\/').map(len)\n\n# create new dataframe, repeating or chaining as appropriate\ndf_2 = pd.DataFrame({'Order Number': np.repeat(df2['Order Number'], lens),\n                    'Order Status': np.repeat(df2['Order Status'], lens),\n                    'Book Name': chainer(df2['Book Name']),\n                    'Order Date': np.repeat(df2['Order Date'], lens),\n                    'City (Billig)': np.repeat(df2['City (Billing)'], lens)})","d6648314":"df_2.shape","23b1142a":"tpbks = df_2['Book Name'].value_counts().rename_axis('Book Name').reset_index(name='counts')\ntpbks = tpbks.head(20)\ntpbks","9ae40168":"Order_status_freq = df_2['Order Status'].value_counts().rename_axis('Order Status').reset_index(name='counts')\nOrder_status_freq= Order_status_freq.head(3)\nOrder_status_freq","d5852a85":"df_3 = Order_status_freq\nprint(df_3)","503407dc":"# importing libraries for data visualisation\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set()\n\ng=sns.catplot(x=\"Order Status\",y=\"counts\",data=df_3,kind=\"bar\")\ng.fig.suptitle(\"Order_Status_Freq\", y=1.0)\ng.set(xlabel=\"Order Status\",ylabel=\"No of Order\")\nplt.show()","10932ac9":"# # # Taking baby steps. WIP","7be1f8ce":"A number of orders had more than one item. Any such order is to be divided in respects of the books ordered. Hence, the number of rows increased.","85a1847e":" ### Which is the best-selling book?\n '\u0627\u0646\u0679\u0631\u0646\u06cc\u0679 \u0633\u06d2 \u067e\u06cc\u0633\u06c1 \u06a9\u0645\u0627\u0626\u06cc\u06ba' with a total of 3,497 sales."}}