{"cell_type":{"63a17292":"code","f2cd2eda":"code","c3f12792":"code","ae9569c5":"code","4e599550":"code","c604ffdb":"code","286902eb":"code","c81d4c8d":"code","89429d31":"code","6db4978c":"code","33bdf451":"code","7ad7b2fb":"code","973225ea":"code","3c180a17":"code","efe2c710":"code","5402bf3f":"code","17a0fa37":"code","0d017cb8":"code","5d51a56a":"code","b0b96f46":"code","acf8d8a3":"code","5cf3a6c2":"code","a3124325":"code","57bc377c":"code","555bffd1":"code","372b0100":"code","7961c6ef":"code","358da556":"code","bf28a5d7":"code","e4fdb97a":"markdown","24a5e4af":"markdown"},"source":{"63a17292":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f2cd2eda":"## Load the liberaries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport sqlite3","c3f12792":"## connect to dataset\npwd = '..\/input\/ipldatabase\/'\ndb = pwd + 'database.sqlite'","ae9569c5":"## Read Master File\nconn = sqlite3.connect(db)\nmaster_table = pd.read_sql(\"\"\"SELECT * \n                    FROM sqlite_master\n                    WHERE type='table';\"\"\", conn)\nprint(master_table.tbl_name.to_list())","4e599550":"## Read all tables and print table colummns, this reference will help us understanding common columns amongst the tables\nPlayer_table= pd.read_sql(\"\"\"SELECT *\n                        FROM Player;\"\"\", conn)\nExtra_Runs_table= pd.read_sql(\"\"\"SELECT *\n                        FROM extra_runs;\"\"\", conn)\nBatsman_Scored_table= pd.read_sql(\"\"\"SELECT *\n                        FROM Batsman_Scored;\"\"\", conn)\nBatting_Style_table= pd.read_sql(\"\"\"SELECT *\n                        FROM Batting_Style;\"\"\", conn)\nBowling_Style_table= pd.read_sql(\"\"\"SELECT *\n                        FROM Bowling_Style;\"\"\", conn)\nBowling_Style_table= pd.read_sql(\"\"\"SELECT *\n                        FROM Bowling_Style;\"\"\", conn)\nCountry_table= pd.read_sql(\"\"\"SELECT *\n                        FROM Country;\"\"\", conn)\nSeason_table= pd.read_sql(\"\"\"SELECT *\n                        FROM Season;\"\"\", conn)\nCity_table= pd.read_sql(\"\"\"SELECT *\n                        FROM City;\"\"\", conn)\nOutcome_table= pd.read_sql(\"\"\"SELECT *\n                        FROM Outcome;\"\"\", conn)\nWin_By_table= pd.read_sql(\"\"\"SELECT *\n                        FROM Win_By;\"\"\", conn)\nWicket_Taken_table= pd.read_sql(\"\"\"SELECT *\n                        FROM Wicket_Taken;\"\"\", conn)\nVenue_table= pd.read_sql(\"\"\"SELECT *\n                        FROM Venue;\"\"\", conn)\nExtra_Type_table= pd.read_sql(\"\"\"SELECT *\n                        FROM Extra_Type;\"\"\", conn)\nOut_Type_table= pd.read_sql(\"\"\"SELECT *\n                        FROM Out_Type;\"\"\", conn)\nToss_Decision_table= pd.read_sql(\"\"\"SELECT *\n                        FROM Toss_Decision;\"\"\", conn)\nUmpire_table= pd.read_sql(\"\"\"SELECT *\n                        FROM Umpire;\"\"\", conn)\nTeam_table= pd.read_sql(\"\"\"SELECT *\n                        FROM Team;\"\"\", conn)\nBall_by_Ball_table= pd.read_sql(\"\"\"SELECT *\n                        FROM Ball_by_Ball;\"\"\", conn)\nSysdiagrams_table= pd.read_sql(\"\"\"SELECT *\n                        FROM sysdiagrams;\"\"\", conn)\nSqlite_Sequence_table= pd.read_sql(\"\"\"SELECT *\n                        FROM sqlite_sequence;\"\"\", conn)\nMatch_table= pd.read_sql(\"\"\"SELECT *\n                        FROM Match;\"\"\", conn)\nRolee_table= pd.read_sql(\"\"\"SELECT *\n                        FROM Rolee;\"\"\", conn)\nPlayer_Match_table= pd.read_sql(\"\"\"SELECT *\n                        FROM Player_Match;\"\"\", conn)\n\nprint('The colums for Player_table are:',Player_table.columns.to_list())\nprint('The colums for Extra_Runs_table are:',Extra_Runs_table.columns.to_list())\nprint('The colums for Batsman_Scored_table are:',Batsman_Scored_table.columns.to_list())\nprint('The colums for Batting_Style_table are:',Batting_Style_table.columns.to_list())\nprint('The colums for Bowling_Style_table are:',Bowling_Style_table.columns.to_list())\nprint('The colums for Country_table are:',Country_table.columns.to_list())\nprint('The colums for Season_table:',Season_table.columns.to_list())\nprint('The colums for City_table:',City_table.columns.to_list())\nprint('The colums for Outcome_table:',Outcome_table.columns.to_list())\nprint('The colums for Win_By_table:',Win_By_table.columns.to_list())\nprint('The colums for Wicket_Taken_table:',Wicket_Taken_table.columns.to_list())\nprint('The colums for Venue_table:',Venue_table.columns.to_list())\nprint('The colums for Extra_Type_table:',Extra_Type_table.columns.to_list())\nprint('The colums for Out_Type_table:',Out_Type_table.columns.to_list())\nprint('The colums for Toss_Decision_table:',Toss_Decision_table.columns.to_list())\nprint('The colums for Umpire_table:',Umpire_table.columns.to_list())\nprint('The colums for Team_table:',Team_table.columns.to_list())\nprint('The colums for Ball_by_Ball_table:',Ball_by_Ball_table.columns.to_list())\nprint('The colums for Sysdiagrams_table:',Sysdiagrams_table.columns.to_list())\nprint('The colums for Sqlite_Sequence_table:',Sqlite_Sequence_table.columns.to_list())\nprint('The colums for Match_table:',Match_table.columns.to_list())\nprint('The colums for Rolee_table:',Rolee_table.columns.to_list())\nprint('The colums for Player_Match_table:',Player_Match_table.columns.to_list())","c604ffdb":"##Query 1:- Select all columns from player's table\n\nsql = pd.read_sql(\"\"\"SELECT * \n                    FROM Player_Match;\"\"\", conn)\nsql.head()","286902eb":"##Query 2:- Select distinct of Role_id column from player's table\n\nsql = pd.read_sql(\"\"\"SELECT distinct(role_id) \n                    FROM Player_Match;\"\"\", conn)\nsql.head()","c81d4c8d":"##Query 3:- Select all the team_id greater than 1\n\nsql = pd.read_sql(\"\"\"SELECT *\n                    FROM Player_Match\n                    where team_id > 1 ;\"\"\", conn)\nsql.head()","89429d31":"##Query 4:- Select distinct of team_id where the team id is between 1 and 5\n\nsql = pd.read_sql(\"\"\"SELECT distinct(team_id)\n                    FROM Player_Match\n                    where team_id > 1 and team_id < 5 ;\"\"\", conn)\nsql.head()","6db4978c":"##Query 5:- Select distinct of team_id where the team id is equal to 1 or 5\n\nsql = pd.read_sql(\"\"\"SELECT distinct(team_id)\n                    FROM Player_Match\n                    where team_id = 1 or team_id = 5 ;\"\"\", conn)\nsql.head()","33bdf451":"##Query 6:- Select distinct of team_id where the team id is equal to 0\n\nsql = pd.read_sql(\"\"\"SELECT distinct(team_id)\n                    FROM Player_Match\n                    where team_id is null ;\"\"\", conn)\nsql.head()","7ad7b2fb":"##Query 7:- Select 1st record from player's table\n\nsql = pd.read_sql(\"\"\"SELECT *\n                    FROM Player_Match\n                    limit 1 ;\"\"\", conn)\nsql.head()","973225ea":"##Query 8:- Select max run per ball\n\nsql = pd.read_sql(\"\"\"SELECT *, max(runs_scored) as Max_Runs,min(runs_scored) as Min_Runs\n                    FROM Batsman_Scored\n                     ;\"\"\", conn)\nsql.head()","3c180a17":"##Query 9:- Select total,average run per ball for all innings of all matches\n\nsql = pd.read_sql(\"\"\"SELECT match_id,innings_no,sum(runs_scored) as Total,round(avg(runs_scored),2) as Average_per_ball\n                    FROM Batsman_Scored\n                    group by match_id,innings_no\n                     ;\"\"\", conn)\nsql.head()","efe2c710":"##Query 10:- Select cound of 6s for each match in ascending order\n\nsql = pd.read_sql(\"\"\"\nSELECT match_id, count(runs_scored) as six from batsman_scored \nwhere runs_scored= 6\ngroup by match_id;\"\"\", conn)\nsql.head()","5402bf3f":"##Query 11:- Select cities with letter a\n\nsql = pd.read_sql(\"\"\"\nSELECT * from city\nwhere city_name LIKE 'a%';\"\"\", conn)\nsql.head()","17a0fa37":"##Query 12:- Select cities with letter che\n\nsql = pd.read_sql(\"\"\"\nSELECT * from city\nwhere city_name LIKE 'ch%';\"\"\", conn)\nsql.head()","0d017cb8":"##Query 13:- Find total runs scored in match where the total is between 349 and 449\n\nsql = pd.read_sql(\"\"\"\nselect a.match_id,a.total\nfrom(SELECT match_id, sum(runs_scored)\nas total from batsman_scored\ngroup by match_id) as a\nwhere a.total between 349 and 449;\"\"\", conn)\nsql.head()","5d51a56a":"##Query 14:- Display Player name, id and batting style\n\nsql = pd.read_sql(\"\"\"\nselect t_one.player_name,\nt_two.player_id,\nt_three.batting_hand\nfrom player t_one\njoin player_match t_two on t_one.player_id = t_two.player_id\njoin batting_style t_three on t_one.batting_hand = t_three.batting_id\n\n\"\"\", conn)\n#sql.head()\n\nsql_1 = pd.read_sql(\"\"\"\nselect * from batting_style\n\"\"\", conn)\n\nsql.head()","b0b96f46":"##Query 15:- Display Player name, id and batting style\n\nsql = pd.read_sql(\"\"\"\nselect * from (\nselect pm.player_id,\npl.player_name,\ncount(distinct pm.match_id) as Count_of_Matches,\nro.role_desc as Role_description,\nbs.batting_hand as Batting_Style\nfrom player_match pm\n\njoin player pl on pm.player_id=pl.player_id\njoin rolee ro on pm.role_id=ro.role_id\njoin batting_style bs on pl.batting_hand=bs.batting_id\ngroup by pm.player_id) a\norder by a.count_of_matches desc\n\n\n\"\"\", conn)\n#sql.head()\n\n\nsql.head()","acf8d8a3":"##Query 16 5os and 100s\nsql = pd.read_sql(\"\"\"\n\nselect \nb.striker,\nb.player_name,\nsum(b.fifties) as fifties,\nsum(b.hundreds) as hundreds from (\nselect *, \n(case when a.runs >= 50 then 1 else 0 end) as fifties,\n(case when a.runs >= 100 then 1 else 0 end) as hundreds from (\nselect striker,\nbs.match_id,\nplayer_name,\nbyb.innings_no, \nsum(runs_scored) as runs \nfrom ball_by_ball byb\njoin batsman_scored bs on byb.match_id=bs.match_id and byb.over_id=bs.over_id and byb.ball_id=bs.ball_id and byb.innings_no= bs.innings_no\njoin player pl on byb.striker=pl.player_id\ngroup by bs.match_id,\nplayer_name\norder by byb.innings_no\n) a\norder by a.runs desc\n)b\ngroup by b.player_name\norder by b.striker\n\n\"\"\", conn) \n\n\nsql.head()","5cf3a6c2":"## Query 17 Runs vs Match phases (powerplay,middle over, death)\n\nsql = pd.read_sql(\"\"\"\n\nselect\ndistinct(t.over_id),\n(case when t.over_id between 0 and 6 then 'Power Play'\n     when t.over_id between 7 and 15 then 'Middle Overs'\n     when t.over_id between 16 and 20 then 'Death Overs' else 0 end) as Overs\n\nfrom (\nselect\nbyb.match_id,\nbyb.over_id,\nbyb.ball_id,\nbyb.innings_no,\nt.team_name as Team_batting_name\nfrom ball_by_ball byb join\nteam t on byb.team_batting=t.team_id\ngroup by byb.match_id,\nbyb.over_id,\nbyb.ball_id,\nbyb.innings_no\norder by byb.innings_no asc ) t\n\n\"\"\", conn) \n\n\nsql.head(20)","a3124325":"##Query 18 balls faced by strikers per match\n\nsql = pd.read_sql(\"\"\"\nselect match_id,striker,count(ball_id) as ball_face_by_batsman_per_match from ball_by_ball\ngroup by striker,match_id\n\"\"\", conn) \n\n\nsql.head()","57bc377c":"## Query 19 Bowler vs highest wickets\n\nsql = pd.read_sql(\"\"\"\nselect\na.match_id,\na.bowler,\nmax(a.wickets),\na.runs_given,\nmax(a.wickets) ||'-'|| a.runs_given AS Best_Bowling_figure\n\nfrom (\nselect\nwt.match_id,\nwt.bowler,\nwt.wickets,\nrt.runs_given\n\nfrom\n(\nselect byb.match_id,bowler, count(byb.ball_id) as wickets from \nball_by_ball byb\njoin wicket_taken wkt on byb.match_id=wkt.match_id and byb.over_id=wkt.over_id and byb.ball_id=wkt.ball_id and byb.innings_no=wkt.innings_no\ngroup by byb.match_id,bowler\n) wt\n\njoin \n(select byb.match_id,bowler, sum(runs_scored) as runs_given from \nball_by_ball byb\njoin batsman_scored bs on byb.match_id=bs.match_id and byb.over_id=bs.over_id and byb.ball_id=bs.ball_id and byb.innings_no=bs.innings_no\ngroup by bs.match_id,bowler\n) rt on rt.match_id=wt.match_id ) a\ngroup by a.bowler\norder by a.wickets desc\n\"\"\", conn) \n\nsql_1 = pd.read_sql(\"\"\"\nselect byb.match_id,bowler, sum(runs_scored) as runs_given from \nball_by_ball byb\njoin batsman_scored bs on byb.match_id=bs.match_id and byb.over_id=bs.over_id and byb.ball_id=bs.ball_id and byb.innings_no=bs.innings_no\ngroup by bs.match_id,bowler\n\"\"\", conn) \n\n\nsql.head()","555bffd1":"## Query 20 Bowler Stats\n\nsql = pd.read_sql(\"\"\"\n\nselect\nc.bowler,\nc.player_name,\nc.wickets,\nc.economy_rate,\nc.bowler_strike_rate,\nbest_bowling_table.best_bowling_figure\nfrom (\nselect \na.bowler,\na.player_name,\na.wickets,\nballs_table.balls_bowled as Balls_bowled,\neconomy_table.runs_given as runs_given,\n6*(round(round(economy_table.runs_given,2)\/round(balls_table.balls_bowled,2),2)) as economy_rate,\nround(round(balls_table.balls_bowled,2)\/round(a.wickets,2),2) as bowler_strike_rate\nfrom (\nselect bowler,pl.player_name as player_name,count(out_name) as wickets from wicket_taken wkt\njoin out_type ot on wkt.kind_out=ot.out_id\njoin ball_by_ball byb on byb.match_id=wkt.match_id and byb.over_id=wkt.over_id and byb.ball_id=wkt.ball_id and byb.innings_no=wkt.innings_no\njoin player pl on byb.bowler=pl.player_id\ngroup by player_name\n) a join (select bowler,count(ball_id) as Balls_Bowled from ball_by_ball\ngroup by bowler) balls_table on a.bowler=balls_table.bowler join (select * from (\nselect\na.bowler,\ncount(distinct a.match_id) as Innings_Bowled,\na.bowler_name,\na.role_desc,\nsum(a.runs) as runs_given\nfrom\n(\nselect\nbyb.match_id as match_id,\nbyb.over_id as over_id,\nbyb.ball_id as ball_id,\nbyb.innings_no as innings_no,\nbyb.team_batting as team_batting,\nstriker,\nnon_striker,\nbowler,\nrole_desc,\nbs.batting_hand as batting_hand,\npl.player_name as bowler_name,\nruns_scored as Runs from ball_by_ball byb\njoin batsman_scored bsco on byb.ball_id= bsco.ball_id and byb.match_id= bsco.match_id and byb.over_id= bsco.over_id and byb.innings_no= bsco.innings_no\njoin player_match pm on bsco.match_id = pm.match_id\njoin player pl on byb.bowler= pl.player_id\njoin rolee re on pm.role_id=re.role_id\njoin batting_Style bs on pl.batting_hand=bs.batting_id\ngroup by\nstriker,\nbyb.match_id,\nbyb.over_id,\nbyb.ball_id,\nbsco.innings_no\norder by bsco.innings_no asc\n)a\ngroup by a.bowler_name\norder by a.bowler\n) b\norder by b.runs_given desc) economy_table on a.bowler=economy_table.bowler\norder by a.wickets desc) c join (select\na.match_id,\na.bowler,\nmax(a.wickets),\na.runs_given,\nmax(a.wickets) ||'-'|| a.runs_given AS Best_Bowling_figure\n\nfrom (\nselect\nwt.match_id,\nwt.bowler,\nwt.wickets,\nrt.runs_given\n\nfrom\n(\nselect byb.match_id,bowler, count(byb.ball_id) as wickets from \nball_by_ball byb\njoin wicket_taken wkt on byb.match_id=wkt.match_id and byb.over_id=wkt.over_id and byb.ball_id=wkt.ball_id and byb.innings_no=wkt.innings_no\ngroup by byb.match_id,bowler\n) wt\n\njoin \n(select byb.match_id,bowler, sum(runs_scored) as runs_given from \nball_by_ball byb\njoin batsman_scored bs on byb.match_id=bs.match_id and byb.over_id=bs.over_id and byb.ball_id=bs.ball_id and byb.innings_no=bs.innings_no\ngroup by bs.match_id,bowler\n) rt on rt.match_id=wt.match_id ) a\ngroup by a.bowler\norder by a.wickets desc) best_bowling_table on c.bowler=best_bowling_table.bowler\n\"\"\", conn) \n\n\nsql.head()","372b0100":"## Query 21 Batsman vs runs\n\nsql = pd.read_sql(\"\"\"\nselect * from (\nselect\na.striker,\ncount(distinct a.match_id) as Batting_innings,\na.striker_name,\na.role_desc,\na.batting_hand,\nsum(a.runs) as runs\nfrom\n(\nselect\nbyb.match_id as match_id,\nbyb.over_id as over_id,\nbyb.ball_id as ball_id,\nbyb.innings_no as innings_no,\nbyb.team_batting as team_batting,\nstriker,\nnon_striker,\nbowler,\nrole_desc,\nbs.batting_hand as batting_hand,\npl.player_name as striker_name,\nruns_scored as Runs from ball_by_ball byb\njoin batsman_scored bsco on byb.ball_id= bsco.ball_id and byb.match_id= bsco.match_id and byb.over_id= bsco.over_id and byb.innings_no= bsco.innings_no\njoin player_match pm on bsco.match_id = pm.match_id\njoin player pl on byb.striker= pl.player_id\njoin rolee re on pm.role_id=re.role_id\njoin batting_Style bs on pl.batting_hand=bs.batting_id\ngroup by\nstriker,\nbyb.match_id,\nbyb.over_id,\nbyb.ball_id\norder by bsco.innings_no asc\n)a\ngroup by a.striker_name\norder by a.striker\n) b\norder by b.runs desc\n\"\"\", conn) \n\n\nsql.head()","7961c6ef":"## Query 22 Runs vs Match phases (powerplay,middle over, death)\n\nsql = pd.read_sql(\"\"\"\n\nselect \nb.team_batting_name,\nb.Matches_played,\nmax(b.power_play) as runs_power_play,\nmax(b.middle_overs) as runs_middle_overs,\nmax(b.death_overs) as runs_death_overs\nfrom\n(\nselect\nt.Team_batting_name,\ncount(distinct t.match_id) as Matches_played,\ncase when t.Match_Phase='Power Play' then round(round(sum(t.runs_scored),2)\/round(count(distinct t.match_id),2),2) else 0 end as Power_Play,\ncase when t.Match_Phase='Middle Overs' then round(round(sum(t.runs_scored),2)\/round(count(distinct t.match_id),2),2) else 0 end as Middle_Overs,\ncase when t.Match_Phase='Death Overs' then round(round(sum(t.runs_scored),2)\/round(count(distinct t.match_id),2),2) else 0 end as Death_Overs\nfrom (\nselect\nbyb.match_id,\nbyb.over_id,\n(case when byb.over_id between 0 and 6 then 'Power Play'\n     when byb.over_id between 7 and 15 then 'Middle Overs'\n     when byb.over_id between 16 and 20 then 'Death Overs' else 0 end) as Match_Phase,\nbyb.ball_id,\nbyb.innings_no,\nt.team_name as Team_batting_name,\nbs.runs_scored as runs_scored\nfrom ball_by_ball byb join\nteam t on byb.team_batting=t.team_id\njoin batsman_scored bs on bs.match_id=byb.match_id and bs.over_id=byb.over_id and bs.ball_id=byb.ball_id and bs.innings_no=byb.innings_no\ngroup by byb.match_id,\nbyb.over_id,\nbyb.ball_id,\nbyb.innings_no\norder by byb.innings_no asc ) t\n\ngroup by t.team_batting_name,t.match_phase ) b\ngroup by b.team_batting_name\n\"\"\", conn) \n\n\nsql.head(8)","358da556":"## Query 23 Most Successful Teams\n\nsql = pd.read_sql(\"\"\"\n\nselect \nt.team_name,\nw.match_won,\np.match_played,\n100*(round(round(w.match_won,2)\/round(p.match_played,2),4)) as Win_percent\n\nfrom (\nselect team_1,count(match_winner) as match_won from match\ngroup by team_1) w join (select team.team_id,count(distinct match_id) as match_played from team join\nplayer_match on player_match.team_id=team.team_id\ngroup by team.team_id) p on w.team_1=p.team_id join team t on p.team_id=t.team_id\n\"\"\", conn) \n\nsql_1 = pd.read_sql(\"\"\"\nselect team.team_id,count(distinct match_id) as match_played from team join\nplayer_match on player_match.team_id=team.team_id\ngroup by team.team_id\n\"\"\", conn) \n\nsql.head(10)","bf28a5d7":"##Query 24 Master Player Query\n\nsql = pd.read_sql(\"\"\"\n\nselect \ns.striker,\ns.striker_name,\ns.role_desc,\ns.batting_hand\n,bowling_style_table.bowling_skill,\ns.runs,\ns.matches,\ns.dismissals,\nround(round(s.runs,2)\/round(s.dismissals,2),2) as batt_avg,\ns.Highest_score,\ns.thirties, \ns.fifties,\ns.hundreds,\ns.balls_faced_career,\ns.strike_rate,\ns.wickets_taken,\ns.economy_rate,\ns.strike_rate,\ns.best_bowling_figure\n from (\nselect\nf.striker,\nf.striker_name,\nf.role_desc,\nf.batting_hand,\nf.runs,\nf.matches,\nf.dismissals,\nround(round(f.runs,2)\/round(f.dismissals,2),2) as batt_avg,\nf.Highest_score,\nf.thirties, \nf.fifties,\nf.hundreds,\nf.balls_faced_career,\nf.strike_rate,\nf.wickets_taken,\nbowler_table.economy_rate as economy_rate,\nbowler_table.bowler_strike_rate as strike_rate,\nbowler_table.best_bowling_figure as best_bowling_figure\n\nfrom (\nselect \ng.striker,\ng.striker_name,\ng.role_desc,\ng.batting_hand,\ng.runs,\ng.matches,\ng.dismissals,\nround(round(g.runs,2)\/round(g.dismissals,2),2) as batt_avg,\ng.Highest_score,\ng.thirties, \ng.fifties,\ng.hundreds,\ng.balls_faced_career,\ng.strike_rate,\nbowlers_table.wickets as wickets_taken\n\nfrom (\nselect\nf.striker,\nf.striker_name,\nf.role_desc,\nf.batting_hand,\nf.runs,\nf.matches,\ndissmissals_table.dismissals as dismissals,\nround(round(f.runs,2)\/round(dissmissals_table.dismissals,2),2) as batt_avg,\nf.Highest_score,\nf.thirties, \nf.fifties,\nf.hundreds,\nf.balls_faced_career,\nf.strike_rate\nfrom (\nselect \ne.striker,\ne.striker_name,\ne.role_desc,\ne.batting_hand,\ne.runs,\ne.matches,\nround(round(e.runs,2)\/round(e.matches,2),2) as batt_avg,\ne.Highest_score,\ne.thirties, \ne.fifties,\ne.hundreds,\nsum(ball_face_by_batsman_per_match) as balls_faced_career,\n100*(round(round(e.runs,4)\/round(sum(ball_face_by_batsman_per_match),4),4)) as strike_rate\nfrom (\nselect\nd.striker,\nd.striker_name,\nd.role_desc,\nd.batting_hand,\nd.runs,\nd.matches,\n100*round(round(d.runs,2)\/round(d.matches,2),2) as batt_avg,\nmax(d.max_individual_score_per_match) as Highest_score,\nd.thirties, \nd.fifties,\nd.hundreds\n\nfrom\n(select c.striker,\nc.striker_name,\nc.role_desc,\nc.batting_hand,\nc.runs,\nc.matches,\nc.max_individual_score_per_match,\nfifties_hundreds_table.thirties, \nfifties_hundreds_table.fifties,\nfifties_hundreds_table.hundreds\nfrom (\nselect \nruns_table.striker,\nruns_table.striker_name,\nruns_table.matches,\nruns_table.role_desc,\nruns_table.batting_hand,\nruns_table.runs,\nhighest_score.runs as max_individual_score_per_match from\n(\nselect * from \n(\nselect\na.striker,\ncount(distinct a.match_id) as Matches,\na.striker_name,\na.role_desc,\na.batting_hand,\nsum(a.runs) as runs\nfrom\n(\nselect\nbyb.match_id as match_id,\nbyb.over_id as over_id,\nbyb.ball_id as ball_id,\nbyb.innings_no as innings_no,\nbyb.team_batting as team_batting,\nstriker,\nnon_striker,\nbowler,\nrole_desc,\nbs.batting_hand as batting_hand,\npl.player_name as striker_name,\nruns_scored as Runs from ball_by_ball byb\njoin batsman_scored bsco on byb.ball_id= bsco.ball_id and byb.match_id= bsco.match_id and byb.over_id= bsco.over_id and byb.innings_no= bsco.innings_no\njoin player_match pm on bsco.match_id = pm.match_id\njoin player pl on byb.striker= pl.player_id\njoin rolee re on pm.role_id=re.role_id\njoin batting_Style bs on pl.batting_hand=bs.batting_id\ngroup by\nstriker,\nbyb.match_id,\nbyb.over_id,\nbyb.ball_id\norder by bsco.innings_no asc\n)a\ngroup by a.striker_name\norder by a.striker\n)b\ngroup by b.striker_name,b.striker,b.matches\norder by b.runs desc ) runs_table join (select * from (\nselect striker,\nbs.match_id,\nplayer_name,\nbyb.innings_no, \nsum(runs_scored) as runs \nfrom ball_by_ball byb\njoin batsman_scored bs on byb.match_id=bs.match_id and byb.over_id=bs.over_id and byb.ball_id=bs.ball_id and byb.innings_no= bs.innings_no\njoin player pl on byb.striker=pl.player_id\ngroup by bs.match_id,\nplayer_name\norder by byb.innings_no\n) a\norder by a.runs desc) highest_score on runs_table.striker=highest_score.striker and runs_table.striker=highest_score.striker\n)c\njoin (select \nb.striker,\nb.player_name,\nsum(b.thirties) as thirties,\nsum(b.fifties) as fifties,\nsum(b.hundreds) as hundreds from (\nselect *,\n(case when a.runs >= 30 then 1 else 0 end) as thirties,\n(case when a.runs >= 50 then 1 else 0 end) as fifties,\n(case when a.runs >= 100 then 1 else 0 end) as hundreds from (\nselect striker,\nbs.match_id,\nplayer_name,\nbyb.innings_no, \nsum(runs_scored) as runs \nfrom ball_by_ball byb\njoin batsman_scored bs on byb.match_id=bs.match_id and byb.over_id=bs.over_id and byb.ball_id=bs.ball_id and byb.innings_no= bs.innings_no\njoin player pl on byb.striker=pl.player_id\ngroup by bs.match_id,\nplayer_name\norder by byb.innings_no\n) a\norder by a.runs desc\n)b\ngroup by b.player_name\norder by b.striker) fifties_hundreds_table on c.striker=fifties_hundreds_table.striker\n)d\ngroup by d.striker_name\norder by d.matches desc\n)e join (select match_id,striker,count(ball_id) as ball_face_by_batsman_per_match from ball_by_ball\ngroup by striker,match_id) ball_faced_table on e.striker=ball_faced_table.striker\ngroup by e.striker ) f join (select * from (\nselect player_out,count(out_name) as dismissals from wicket_taken wkt\njoin out_type ot on wkt.kind_out=ot.out_id\ngroup by player_out\n) a) dissmissals_table on f.striker=dissmissals_table.player_out\ngroup by f.striker\n) g join (select * from (\nselect bowler,pl.player_name as player_name,count(out_name) as wickets from wicket_taken wkt\njoin out_type ot on wkt.kind_out=ot.out_id\njoin ball_by_ball byb on byb.match_id=wkt.match_id and byb.over_id=wkt.over_id and byb.ball_id=wkt.ball_id and byb.innings_no=wkt.innings_no\njoin player pl on byb.bowler=pl.player_id\ngroup by player_name\n) a\norder by a.wickets desc) bowlers_table on g.striker=bowlers_table.bowler\norder by g.striker) f \njoin (select\nc.bowler,\nc.player_name,\nc.wickets,\nc.economy_rate,\nc.bowler_strike_rate,\nbest_bowling_table.best_bowling_figure\nfrom (\nselect \na.bowler,\na.player_name,\na.wickets,\nballs_table.balls_bowled as Balls_bowled,\neconomy_table.runs_given as runs_given,\n6*(round(round(economy_table.runs_given,2)\/round(balls_table.balls_bowled,2),2)) as economy_rate,\nround(round(balls_table.balls_bowled,2)\/round(a.wickets,2),2) as bowler_strike_rate\nfrom (\nselect bowler,pl.player_name as player_name,count(out_name) as wickets from wicket_taken wkt\njoin out_type ot on wkt.kind_out=ot.out_id\njoin ball_by_ball byb on byb.match_id=wkt.match_id and byb.over_id=wkt.over_id and byb.ball_id=wkt.ball_id and byb.innings_no=wkt.innings_no\njoin player pl on byb.bowler=pl.player_id\ngroup by player_name\n) a join (select bowler,count(ball_id) as Balls_Bowled from ball_by_ball\ngroup by bowler) balls_table on a.bowler=balls_table.bowler join (select * from (\nselect\na.bowler,\ncount(distinct a.match_id) as Innings_Bowled,\na.bowler_name,\na.role_desc,\nsum(a.runs) as runs_given\nfrom\n(\nselect\nbyb.match_id as match_id,\nbyb.over_id as over_id,\nbyb.ball_id as ball_id,\nbyb.innings_no as innings_no,\nbyb.team_batting as team_batting,\nstriker,\nnon_striker,\nbowler,\nrole_desc,\nbs.batting_hand as batting_hand,\npl.player_name as bowler_name,\nruns_scored as Runs from ball_by_ball byb\njoin batsman_scored bsco on byb.ball_id= bsco.ball_id and byb.match_id= bsco.match_id and byb.over_id= bsco.over_id and byb.innings_no= bsco.innings_no\njoin player_match pm on bsco.match_id = pm.match_id\njoin player pl on byb.bowler= pl.player_id\njoin rolee re on pm.role_id=re.role_id\njoin batting_Style bs on pl.batting_hand=bs.batting_id\ngroup by\nstriker,\nbyb.match_id,\nbyb.over_id,\nbyb.ball_id,\nbsco.innings_no\norder by bsco.innings_no asc\n)a\ngroup by a.bowler_name\norder by a.bowler\n) b\norder by b.runs_given desc) economy_table on a.bowler=economy_table.bowler\norder by a.wickets desc) c join (select\na.match_id,\na.bowler,\nmax(a.wickets),\na.runs_given,\nmax(a.wickets) ||'-'|| a.runs_given AS Best_Bowling_figure\n\nfrom (\nselect\nwt.match_id,\nwt.bowler,\nwt.wickets,\nrt.runs_given\n\nfrom\n(\nselect byb.match_id,bowler, count(byb.ball_id) as wickets from \nball_by_ball byb\njoin wicket_taken wkt on byb.match_id=wkt.match_id and byb.over_id=wkt.over_id and byb.ball_id=wkt.ball_id and byb.innings_no=wkt.innings_no\ngroup by byb.match_id,bowler\n) wt\n\njoin \n(select byb.match_id,bowler, sum(runs_scored) as runs_given from \nball_by_ball byb\njoin batsman_scored bs on byb.match_id=bs.match_id and byb.over_id=bs.over_id and byb.ball_id=bs.ball_id and byb.innings_no=bs.innings_no\ngroup by bs.match_id,bowler\n) rt on rt.match_id=wt.match_id ) a\ngroup by a.bowler\norder by a.wickets desc) best_bowling_table on c.bowler=best_bowling_table.bowler) bowler_table on f.striker_name=bowler_table.player_name\n) s join (select player_name,bl.bowling_skill from player p\njoin bowling_style bl on p.bowling_skill=bl.bowling_id) bowling_style_table on s.striker_name=bowling_style_table.player_name\n\"\"\", conn) \n\n\nsql.head()","e4fdb97a":"## **DataBase Schema**\n![DataBase_Schema.png](attachment:74828848-8442-4152-8e7a-da165f7a8c15.png)\n","24a5e4af":"# Hey Kaggle Fam :)! The below is an exhaustive SQL EDA of the Indian Premier League,\n\n# Please Upvote if you liked the notebook, feel free ping on feedback\/query upgrades, if any\n\n# If you'd like a buddy mentor for SQL and Data Analytics i'm just a ping away :)!"}}