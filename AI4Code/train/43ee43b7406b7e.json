{"cell_type":{"b5857b67":"code","d2508e38":"code","5074bb41":"code","a6b75bfa":"code","1afbf23a":"code","2e7f9386":"code","97b33fcd":"code","54aa8d05":"code","be6d07f0":"code","a91e493c":"code","cab1d780":"code","d0040bfb":"code","61d29db9":"code","0e8fdb3c":"code","f06f98b1":"code","a803fa6d":"code","b7a8d598":"code","d2441e58":"code","3d0d2a8a":"code","8a9f1c9f":"code","6af3fc9a":"code","49ac61f2":"code","a80afdf0":"code","31bf4d53":"code","06fa26e6":"code","31608707":"code","6375dfec":"code","d9674a3a":"code","765f2315":"code","030ece7a":"code","d50e874f":"code","fe3692fd":"code","4a94623b":"markdown"},"source":{"b5857b67":"import numpy as np\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n% matplotlib inline\n\nfrom sklearn import preprocessing\nfrom sklearn.tree import DecisionTreeClassifier","d2508e38":"train_D=pd.read_csv(\"..\/input\/train.csv\")\ntest_D=pd.read_csv(\"..\/input\/test.csv\")\nprint(train_D.head())\nprint(test_D.head())","5074bb41":"train_D.isnull().sum()","a6b75bfa":"train_D = train_D.drop(['Cabin'], axis = 1)\n#train_df.columns","1afbf23a":"train_D= train_D.drop(['PassengerId','Name','Ticket'], axis=1)\n#train_df.columns","2e7f9386":"max_age=train_D['Age'].max()\n#print(min_age)\nmin_age=train_D['Age'].min()\nnull_values_count=177\nage_fill_values=np.random.randint(min_age,max_age,size=null_values_count)\n#print(age_fill_values)\ntrain_D['Age'][np.isnan(train_D['Age'])]= age_fill_values","97b33fcd":"train_D.isnull().sum()","54aa8d05":"train_D['Embarked'].unique()","be6d07f0":"print(train_D['Embarked'][train_D['Embarked']=='S'].count())\nprint(train_D['Embarked'][train_D['Embarked']=='C'].count())\nprint(train_D['Embarked'][train_D['Embarked']=='Q'].count())","a91e493c":"train_D['Embarked']=train_D['Embarked'].fillna('S')","cab1d780":"pclass_df= train_D[['Survived','Pclass']]\nfig= plt.figure(figsize=(10,5))\naxes0= plt.subplot(1,2,1)\naxes0= sns.countplot(x='Pclass',hue='Survived',data=pclass_df)\naxes0.set_title('Number of Survival,Class based')\naxes0.set_ylabel('Count')\naxes0.legend(['No','Yes'])\nsurvival_pclass=pclass_df.groupby(['Pclass'],as_index=False).mean()\naxes1= plt.subplot(1,2,2)\naxes1= sns.barplot(x='Pclass',y='Survived',data=survival_pclass)\naxes1.set_title('Survival Rate Based on Class')\naxes1.set_ylabel('Survival Rate')\nplt.tight_layout()","d0040bfb":"train_D['High Class']=np.where(train_D['Pclass']==1,1,0)\ntrain_D['Median Class']=np.where(train_D['Pclass']==2,1,0)\ntrain_D.head()","61d29db9":"sex_df=train_D[['Survived','Sex']]\nfig=plt.figure(figsize=(10,5))\naxes0= plt.subplot(1,2,1)\naxes0= sns.countplot(x='Sex',hue='Survived',data=sex_df)\naxes0.set_title('Number of Survival,Sex based')\naxes0.set_ylabel('Count')\naxes0.legend(['No','Yes'])\nsurvival_sex=sex_df.groupby(['Sex'],as_index=False).mean()\naxes1= plt.subplot(1,2,2)\naxes1= sns.barplot(x='Sex',y='Survived',data=survival_sex,palette='Set1')\naxes1.set_title('Survival Rate Based on Sex')\naxes1.set_ylabel('Survival Rate')\n#plt.tight_layout()","0e8fdb3c":"train_D = train_D.replace({'Sex':{'male':0,'female':1}})\ntrain_D.head()","f06f98b1":"age_df = train_D[['Survived', 'Age']]\nage_df['Age'] = pd.cut(age_df['Age'], bins = 5, labels = [1, 2, 3, 4, 5])\nfig = plt.figure(figsize = (10,5))\naxes0 = plt.subplot(1,2,1)\naxes0 = sns.countplot(x = 'Age', hue = 'Survived', data = age_df)\naxes0.set_title('The Number of Survival Based on Age')\naxes0.set_ylabel('Count')\naxes0.legend(['No', 'Yes'])\n\nsurvival_age = age_df.groupby(['Age'], as_index = False).mean()\naxes1 = plt.subplot(1,2,2)\naxes1 = sns.barplot(x = 'Age', y = 'Survived', data = survival_age, palette = 'Set1') \naxes1.set_title('The Survival Rate Based on Age')\naxes1.set_ylabel('Survival Rate')","a803fa6d":"age = train_D[['Age']].values.astype(float)\nmin_max_scaler = preprocessing.MinMaxScaler()\nage_scaled = min_max_scaler.fit_transform(age)\ntrain_D['Age'] = pd.DataFrame(age_scaled)\ntrain_D.head()","b7a8d598":"sibsp_df = train_D[['Survived', 'SibSp']]\nsurvival_sibsp = sibsp_df.groupby(['SibSp'], as_index = False).mean()\nsns.barplot(x = 'SibSp', y = 'Survived', data = survival_sibsp)","d2441e58":"sibsp_df['SibSp'] = np.where(sibsp_df['SibSp'] > 0, 1, 0)\nfig = plt.figure(figsize = (10,5))\naxes0 = plt.subplot(1,2,1)\naxes0 = sns.countplot(x = 'SibSp', hue = 'Survived', data = sibsp_df)\naxes0.set_title('The Number of Survival Based on SibSp')\naxes0.set_ylabel('Count')\naxes0.legend(['No', 'Yes'])\n\nsurvival_sibsp = sibsp_df.groupby(['SibSp'], as_index = False).mean()\naxes1 = plt.subplot(1,2,2)\naxes1 = sns.barplot(x = 'SibSp', y = 'Survived', data = survival_sibsp, palette = 'Set1') \naxes1.set_title('The Survival Rate Based on SibSp')\naxes1.set_ylabel('Survival Rate')","3d0d2a8a":"train_D['SibSp'] = np.where(train_D['SibSp'] > 0, 1, 0)\ntrain_D.head()","8a9f1c9f":"fare_df = train_D[['Survived', 'Fare']]\nfare_df['Fare'] = pd.cut(fare_df['Fare'], bins = 5, labels = [1, 2, 3, 4, 5])\nfig = plt.figure(figsize = (10,5))\naxes0 = plt.subplot(1,2,1)\naxes0 = sns.countplot(x = 'Fare', hue = 'Survived', data = fare_df)\naxes0.set_title('The Number of Survival Based on Fare')\naxes0.set_ylabel('Count')\naxes0.legend(['No', 'Yes'])\n\nsurvival_fare = fare_df.groupby(['Fare'], as_index = False).mean()\naxes1 = plt.subplot(1,2,2)\naxes1 = sns.barplot(x = 'Fare', y = 'Survived', data = survival_fare, palette = 'Set1') \naxes1.set_title('The Survival Rate Based on Fare')\naxes1.set_ylabel('Survival Rate')","6af3fc9a":"fare = train_D[['Fare']].values.astype(float)\nmin_max_scaler = preprocessing.MinMaxScaler()\nfare_scaled = min_max_scaler.fit_transform(fare)\ntrain_D['Fare'] = pd.DataFrame(fare_scaled)\ntrain_D.head()","49ac61f2":"embarked_df = train_D[['Survived', 'Embarked']]\nfig = plt.figure(figsize = (10,5))\naxes0 = plt.subplot(1,2,1)\naxes0 = sns.countplot(x = 'Embarked', hue = 'Survived', data = embarked_df)\naxes0.set_title('The Number of Survival Based on Embark')\naxes0.set_ylabel('Count')\naxes0.legend(['No', 'Yes'])\n\nsurvival_embarked = embarked_df.groupby(['Embarked'], as_index = False).mean()\naxes1 = plt.subplot(1,2,2)\naxes1 = sns.barplot(x = 'Embarked', y = 'Survived', data = survival_embarked, palette = 'Set1') \naxes1.set_title('The Survival Rate Based on Embark')\naxes1.set_ylabel('Survival Rate')","a80afdf0":"train_D['Embarked C'] = np.where(train_D['Embarked'] == 'C', 1, 0)\ntrain_D['Embarked Q'] = np.where(train_D['Embarked'] == 'Q', 1, 0)\ntrain_D.head()","31bf4d53":"final = train_D[['Survived', 'High Class', 'Median Class', 'Sex', 'Age', 'SibSp', \n                           'Parch', 'Fare', 'Embarked C', 'Embarked Q']]\nfinal.head()","06fa26e6":"independent_v_train = final[['High Class', 'Median Class', 'Sex', 'Age', 'SibSp', \n                                      'Parch', 'Fare', 'Embarked C', 'Embarked Q']]\ndependent_v_train = final['Survived']","31608707":"independent_v_train.isnull().sum()","6375dfec":"dt = DecisionTreeClassifier()\ndt.fit(independent_v_train, dependent_v_train)\ndt.score(independent_v_train, dependent_v_train)","d9674a3a":"# Transform Pclass and Sex variable\ntest_D['High Class'] = np.where(test_D['Pclass'] == 1, 1, 0)\ntest_D['Median Class'] = np.where(test_D['Pclass'] == 2, 1, 0)\ntest_D = test_D.replace({'Sex': {'male':0, 'female':1}})\n# Fill NAs in Age and normalizing values\nmin_age = test_D['Age'].min()\nmax_age = test_D['Age'].max()\nnull_values_count = test_D['Age'].isnull().sum()\nage_fill_values = np.random.randint(min_age, max_age, size = null_values_count)\ntest_D['Age'][np.isnan(test_D['Age'])] = age_fill_values\nage = test_D[['Age']].values.astype(float)\nmin_max_scaler = preprocessing.MinMaxScaler()\nage_scaled = min_max_scaler.fit_transform(age)\ntest_D['Age'] = pd.DataFrame(age_scaled)","765f2315":"# Fill NA in Fare and Normalizing values\ntest_D['Fare'] = test_D['Fare'].fillna(test_D['Fare'].mean())\nfare = train_D[['Fare']].values.astype(float)\nmin_max_scaler = preprocessing.MinMaxScaler()\nfare_scaled = min_max_scaler.fit_transform(fare)\ntest_D['Fare'] = pd.DataFrame(fare_scaled)\n# Fill NA in Embarked and transform values\nprint(test_D['Embarked'][test_D['Embarked'] == 'S'].count()) # 270\nprint(test_D['Embarked'][test_D['Embarked'] == 'C'].count()) # 102\nprint(test_D['Embarked'][test_D['Embarked'] == 'Q'].count()) # 46\ntest_D['Embarked'] = test_D['Embarked'].fillna('S')\ntest_D['Embarked C'] = np.where(test_D['Embarked'] == 'C', 1, 0)\ntest_D['Embarked Q'] = np.where(test_D['Embarked'] == 'Q', 1, 0)\ntest_D.count()","030ece7a":"final_test = test_D[['High Class', 'Median Class', 'Sex', 'Age', 'SibSp', \n                           'Parch', 'Fare', 'Embarked C', 'Embarked Q']]\nfinal_test.head()","d50e874f":"independent_v_test = final_test\ndependent_v_test_predict = dt.predict(independent_v_test)\nsurvival_df = pd.DataFrame(dependent_v_test_predict)\ntest_get_id = pd.read_csv('..\/input\/test.csv')\nprediction_df = pd.DataFrame(test_get_id['PassengerId'])\nprediction_df['Survived'] = survival_df","fe3692fd":"prediction_df.to_csv('Prediction of Titanic.csv', index=False)","4a94623b":"> **<font size=\"3\">Importing Libraries at once<\/font>**"}}