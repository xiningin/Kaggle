{"cell_type":{"413d6550":"code","813a3789":"code","a22b64de":"code","b17ebcca":"code","084c1a68":"code","f02f7af0":"code","31db39da":"code","21e53069":"code","cbc32a58":"code","c4a80516":"code","d2603843":"code","e9c5dce0":"markdown"},"source":{"413d6550":"#importing all the necessary libraries\n\nfrom __future__ import absolute_import, print_function,division, unicode_literals\n\nimport os.path\nimport glob\nimport shutil\n\nimport tensorflow as tf\nassert tf.__version__.startswith('2')\n\nfrom tensorflow import keras\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.layers import Conv2D,Flatten,MaxPooling2D,Dropout,Dense,Activation\nfrom keras import regularizers\nimport keras\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pathlib\n\nprint ('import successful')","813a3789":"BATCH_SIZE = 32\nIMG_HEIGHT = 224\nIMG_WIDTH = 224","a22b64de":"data_dir =\"..\/input\/brain-tumor-classification-mri\"\ndata_dir = pathlib.Path(data_dir)\n\nCLASS_NAMES = np.array(['glioma','meningioma','No_tumor', 'pituitary'])\n\nprint('Class Names: ', CLASS_NAMES)","b17ebcca":"train_path = '..\/input\/brain-tumor-classification-mri\/Training'\ntest_path = '..\/input\/brain-tumor-classification-mri\/Testing'","084c1a68":"image_train_gen = ImageDataGenerator(rescale=1.\/255,\n                                     zoom_range=0.50,\n                                     rotation_range=45,\n                                     horizontal_flip=True,\n                                     width_shift_range=0.15,\n                                     height_shift_range=0.15)\n\ntrain_data_gen = image_train_gen.flow_from_directory(train_path,\n                                                     shuffle=True,\n                                                     batch_size=BATCH_SIZE,\n                                                     target_size=(IMG_HEIGHT,IMG_WIDTH),\n                                                     class_mode='sparse')\n\nimg_val_gen = ImageDataGenerator(rescale=1.\/255)\nval_data_gen = img_val_gen.flow_from_directory(test_path,\n                                               batch_size=BATCH_SIZE,\n                                               target_size=(IMG_HEIGHT,IMG_WIDTH),\n                                               class_mode='sparse')","f02f7af0":"def plotImages(image_arr):\n    fig,axes = plt.subplots(1, 5, figsize=(20,20))\n    axes = axes.flatten()\n    for img,ax in zip(image_arr,axes):\n        ax.imshow(img)\n    plt.tight_layout()\n    plt.show()","31db39da":"# Plot a few training images\nimg_array = [train_data_gen[0][0][0] for i in range(5)]\nplotImages(img_array)","21e53069":"# plot a few val images\nimg_array  = [val_data_gen[0][0][0] for i in range(5)]\nplotImages(img_array)","cbc32a58":"# Model building\n#Instatiating A convnet\n\nmodel = Sequential()\nmodel.add(Conv2D(16, (4,4), input_shape=(224,224,3), activation=\"relu\"))\nmodel.add(MaxPooling2D(pool_size = (2,2)))\nmodel.add(Conv2D(32, (4,4), activation=\"relu\"))\nmodel.add(MaxPooling2D(pool_size = (2,2)))\nmodel.add(Conv2D(64, (4,4), activation=\"relu\"))\nmodel.add(MaxPooling2D(pool_size = (2,2)))\nmodel.add(Flatten())\nmodel.add(Dropout(0.2))\nmodel.add(Dense(128,activation=\"relu\"))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(4, activation=\"softmax\"))\n\nmodel.compile(\n    optimizer = \"adam\",\n    loss = \"sparse_categorical_crossentropy\",\n    metrics = ['accuracy']\n)\n\nmodel.summary()","c4a80516":"EPOCHS=20\nhistory = model.fit(train_data_gen, epochs=EPOCHS, validation_data=val_data_gen)","d2603843":"# Plot training and validation graphs\nacc = history.history['accuracy']\nval_accuracy = history.history['val_accuracy']\n\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs_range = range(EPOCHS)\n\nplt.figure(figsize=(12,12))\nplt.subplot(1,2,1)\nplt.plot(epochs_range,acc,label='Training Accuracy')\nplt.plot(epochs_range,val_accuracy,label='Validation Accuracy')\nplt.legend(loc='lower right')\nplt.title('Training and Validation Accuracy')\n\nplt.subplot(1,2,2)\nplt.plot(epochs_range,loss,label='Training Loss')\nplt.plot(epochs_range,val_loss,label='Validation Loss')\nplt.legend(loc='upper right')\nplt.title('Training and Validation Loss')\nplt.show()","e9c5dce0":"# BRAIN TUMOR CLASSIFICATION\n\nA model to classify the various types of brain tumor"}}