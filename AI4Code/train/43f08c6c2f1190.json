{"cell_type":{"109c9c9c":"code","5d160056":"code","e6fcf8e9":"code","6a863437":"code","d2be4358":"code","dc08acd1":"code","79d3c637":"code","a005429d":"code","444bafb6":"code","374612ca":"code","7b311409":"code","9337ebac":"code","3d7487bc":"code","15f76ade":"code","de235f31":"code","d6e37a98":"code","fe9c16b1":"code","74d01fca":"code","58b3fd2f":"code","c92ffde0":"code","1dda4563":"code","ca36fff6":"code","9bbeb0e6":"code","18f85824":"code","66a6fbde":"code","759d8fdc":"code","db4108df":"code","9009afcf":"code","64e51e6c":"code","7f58733d":"code","ad481200":"code","75c516b6":"code","8d02e790":"code","e0c5b0c2":"code","0434d08a":"code","8cbb5298":"code","62622d88":"code","1ab69871":"code","b36a68ab":"code","adda6d86":"code","28c2d328":"code","30f71e4c":"code","b7d9e40f":"code","2e31873a":"code","b8c7e8ae":"code","7f74f936":"code","bfcb1e52":"code","2143e50c":"markdown","8e062036":"markdown","e64ace63":"markdown","39a7e9ee":"markdown","8feb7e1d":"markdown","df503d16":"markdown","d6de344c":"markdown","0921b307":"markdown","8f717f56":"markdown","7bbad226":"markdown","666d6409":"markdown","281b03d9":"markdown","e8bf51a4":"markdown","7e5b7c45":"markdown","25b94fbd":"markdown","a91a16a1":"markdown","20617fdd":"markdown","b9bd96b0":"markdown","d5dffcf8":"markdown","4243be90":"markdown","5124901e":"markdown","e84bc15f":"markdown","1d2827a4":"markdown","a722575c":"markdown","854579bb":"markdown","aa3af981":"markdown"},"source":{"109c9c9c":"!pip install py7zr","5d160056":"#\u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\nimport pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport re\nimport string\nfrom nltk.corpus import stopwords\nimport nltk\nfrom collections import Counter\nimport sklearn\nfrom nltk.stem.porter import PorterStemmer\nfrom nltk.corpus import wordnet\nfrom nltk.stem import WordNetLemmatizer\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\nfrom sklearn.decomposition import TruncatedSVD\nfrom sklearn.model_selection import GridSearchCV, train_test_split, ShuffleSplit, KFold\nimport xgboost as xgb\nfrom sklearn.metrics import classification_report, confusion_matrix, log_loss\nimport pickle\nimport py7zr","e6fcf8e9":"training_variants = pd.read_csv('\/kaggle\/input\/msk-redefining-cancer-treatment\/training_variants.zip')\ntraining_text =pd.read_csv(\"\/kaggle\/input\/msk-redefining-cancer-treatment\/training_text.zip\",sep=\"\\|\\|\",engine=\"python\",names=[\"ID\",\"TEXT\"],skiprows=1)","6a863437":"training_variants.head()","d2be4358":"training_text.head()","dc08acd1":"train = pd.merge(training_variants, training_text, how = 'left', on = 'ID').fillna('')\ntrain.head()","79d3c637":"train.shape","a005429d":"\"\"\"test_var = pd.read_csv('\/kaggle\/input\/msk-redefining-cancer-treatment\/test_variants.zip')\ntest_text =pd.read_csv(\"\/kaggle\/input\/msk-redefining-cancer-treatment\/test_text.zip\",sep=\"\\|\\|\",engine=\"python\",names=[\"ID\",\"TEXT\"],skiprows=1)\ntest = pd.merge(test_var, test_text, how = 'left', on = 'ID').fillna('')\ntest.head()\"\"\";","444bafb6":"with py7zr.SevenZipFile('..\/input\/msk-redefining-cancer-treatment\/stage2_test_text.csv.7z', mode='r') as z:\n    z.extractall()\nwith py7zr.SevenZipFile('..\/input\/msk-redefining-cancer-treatment\/stage2_test_variants.csv.7z', mode='r') as z:\n    z.extractall()\n\ntest_variants = pd.read_csv(\".\/stage2_test_variants.csv\")\ntest_text =pd.read_csv(\".\/stage2_test_text.csv\",sep=\"\\|\\|\",engine=\"python\",names=[\"ID\",\"TEXT\"],skiprows=1)\ntest = pd.merge(test_variants, test_text, how = 'left', on = 'ID').fillna('')","374612ca":"test.head()","7b311409":"test.shape","9337ebac":"df_all = pd.concat([train, test]).reset_index(drop=True)","3d7487bc":"df_all","15f76ade":"#\u0413\u0440\u0430\u0444\u0438\u043a \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u043e\u0432\nmy_colors = list('rgbkymc')\ndf_all.Class.value_counts(sort=False).plot(kind='bar', color=my_colors);","de235f31":"df_all.Class.value_counts(sort=False) \/ df_all.shape[0]*100","d6e37a98":" def preprocessing_text(text):\n    PUNCT_TO_REMOVE = string.punctuation\n    STOPWORDS = set(stopwords.words('english'))\n    \n    #\u041f\u0440\u0438\u0432\u043e\u0434\u0438\u043c \u0442\u0435\u043a\u0441\u0442 \u043a \u043d\u0438\u0436\u043d\u0435\u043c\u0443 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0443\n    text = text.lower()\n    \n    #\u0423\u0434\u0430\u043b\u044f\u0435\u043c \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u043f\u0443\u043d\u043a\u0442\u0443\u0430\u0446\u0438\u0438, \u043e\u043d\u0438 \u043d\u0430\u043c \u043d\u0435 \u043d\u0443\u0436\u043d\u044b\n    text = text.translate(str.maketrans('', '', PUNCT_TO_REMOVE))\n    \n    #\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u043e\u043f\u0441\u043b\u043e\u0432\n    text = \" \".join([word for word in str(text).split() if word not in STOPWORDS])\n    \n    #\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0434\u043a\u0438\u0445 \u0441\u043b\u043e\u0432\n    cnt = Counter()\n    n_rare_words = 10\n    RAREWORDS = set([w for (w, wc) in cnt.most_common()[:-n_rare_words-1:-1]])\n    text = \" \".join([word for word in str(text).split() if word not in RAREWORDS])\n    \n    #Stemming - \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u043c \u0441\u043b\u043e\u0432\u0430 \u043a \u0431\u0430\u0437\u043e\u0432\u043e\u0439 \u0444\u043e\u0440\u043c\u0435\n    #stemmer = PorterStemmer()\n    #text = \" \".join([stemmer.stem(word) for word in text.split()])\n    \n    #Lemmatization - \u043f\u043e\u0434\u043e\u0431\u043d\u043e \u0441\u0442\u0435\u043c\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u0438, \u043d\u043e \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0441\u043b\u043e\u0432\u043e \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u044d\u0442\u043e\u043c\u0443 \u044f\u0437\u044b\u043a\u0443, \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u0435\u0435\n    #lemmatizer = WordNetLemmatizer()\n    #wordnet_map = {\"N\":wordnet.NOUN, \"V\":wordnet.VERB, \"J\":wordnet.ADJ, \"R\":wordnet.ADV}\n    #pos_tagged_text = nltk.pos_tag(text.split())    \n    #text = \" \".join([lemmatizer.lemmatize(word, wordnet_map.get(pos[0], wordnet.NOUN)) for word, pos in pos_tagged_text])\n    return text","fe9c16b1":"df_all.loc[0]","74d01fca":"preprocessing_text(df_all.TEXT[0])[:120]","58b3fd2f":"%%time\ndf_all['clean_text'] = df_all.TEXT.apply(lambda x: preprocessing_text(x))","c92ffde0":"def count_words(TEXT, Gene_Var):\n    wordlist = TEXT.split(' ')\n    cnt = 0\n    for s in wordlist:\n        if (Gene_Var==s):\n            cnt+=1\n    return cnt","1dda4563":"#\u0427\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0435\u0449\u0435 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c? \u043a\u0430\u043a \u043f\u0440\u0438\u043c\u0435\u0440\n\n#df_all['Gene_cnt'] = df_all.apply(lambda x: count_words(x['TEXT'], x['Gene']), axis=1)\n#df_all['Variation_cnt'] = df_all.apply(lambda x: count_words(x['TEXT'], x['Variation']), axis=1)","ca36fff6":"df_all","9bbeb0e6":"def Vectorize_text(text, max_features=250, ngram_range=(1, 2), min_df=1):\n    X_vect = list(text)\n    tfidf = TfidfVectorizer(min_df=min_df, ngram_range=ngram_range, max_features=max_features)\n    #X_vect = tfidf.fit_transform(text).toarray() \n    X_vect = pd.DataFrame(tfidf.fit_transform(X_vect).toarray(), index=text.index)      \n    return X_vect","18f85824":"with open('df_all.pickle', 'wb') as handle:\n    pickle.dump(df_all, handle, protocol=pickle.HIGHEST_PROTOCOL)","66a6fbde":"tfidf_features = Vectorize_text(df_all['clean_text'])","759d8fdc":"tfidf_features","db4108df":"svd = TruncatedSVD(n_components=50, n_iter=5, random_state=0)\ntruncated_tfidf = svd.fit_transform(tfidf_features)\ndf_tfidf_col_name = [\"tfidf_\"+str(i) for i in range(50)]\ndf_tfidf = pd.DataFrame(truncated_tfidf)\ndf_tfidf.columns = df_tfidf_col_name","9009afcf":"df_tfidf[:4]","64e51e6c":"count_vectorizer = CountVectorizer(min_df=1, ngram_range=(1,1))\ncount_features = count_vectorizer.fit_transform(df_all['clean_text'])\ncount_svd = TruncatedSVD(n_components=50, n_iter=5, random_state=10)\ncount_bow = count_svd.fit_transform(count_features)\ndf_bow_col_name = [\"bow_\"+str(i) for i in range(50)]\ndf_bow = pd.DataFrame(count_bow)\ndf_bow.columns = df_bow_col_name","7f58733d":"df_bow[:4]","ad481200":"df_all = pd.get_dummies(df_all, columns=['Gene', 'Variation'], drop_first=True)","75c516b6":"df_all = df_all.join(df_tfidf)\ndf_all = df_all.join(df_bow)","8d02e790":"df_all[:5]","e0c5b0c2":"df_all.shape","0434d08a":"df_train = df_all.iloc[:train.shape[0]]\nX = df_train.iloc[:,4:]\ny = df_train['Class']","8cbb5298":"df_test = df_all.iloc[train.shape[0]:]\nX_test = df_test.iloc[:,4:]","62622d88":"#X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=10)\nX_train = X.copy()\ny_train = y.copy()","1ab69871":"\"\"\"\ndef score_func(estimator, X, y):\n    score1 = log_loss(y,estimator.predict(X,\n                           ntree_limit=estimator.best_ntree_limit),\n                          labels=list(range(1,10)))\n    return -score1\n\nxgb = XGBClassifier(\n    objective = 'multi:softprob',\n    eval_metric = 'mlogloss',\n    num_class = 9,\n    nthread=4,\n    seed=10\n)\n\nparameters = {\n    'max_depth': range (4, 7, 1),\n    'learning_rate': [0.1, 0.01, 0.05]\n}\n\ngrid_search = GridSearchCV(\n    estimator=xgb,\n    param_grid=parameters,\n    scoring = score_func,\n    n_jobs = 10,\n    cv = 3,\n    verbose=True\n)\n\ngrid_search.fit(X_train, y_train)\"\"\";","b36a68ab":"y_train = y_train-1","adda6d86":"xgb_param = {'objective': 'multi:softprob',\n          'eval_metric' : 'mlogloss',\n          'learning_rate' : 0.05,\n          'max_depth' : 5,\n          'num_class' : 9,\n          'nthread': 4,\n          'seed': 10}\n\ndtrain_xgb = xgb.DMatrix(X_train, label=y_train)\n\nxbg_result = xgb.cv(xgb_param, \n                    dtrain_xgb, \n                    num_boost_round=300, \n                    nfold=3,\n                    stratified=True, \n                    early_stopping_rounds=50, \n                    verbose_eval=100, \n                    show_stdv=True)","28c2d328":"num_round_xgb = len(xbg_result['test-mlogloss-mean'])\nprint('num boost rounds xgb=' + str(num_round_xgb))","30f71e4c":"xgb_cl = xgb.train(xgb_param, dtrain_xgb, num_boost_round=num_round_xgb)","b7d9e40f":"xgtest = xgb.DMatrix(X_test)","2e31873a":"y_pred = xgb_cl.predict(xgtest)","b8c7e8ae":"classes = ['class1', 'class2', 'class3', 'class4','class5', 'class6', 'class7', 'class8','class9']\nsubmit = pd.DataFrame(y_pred, columns=classes)\nsubmit['ID'] = test['ID'].values","7f74f936":"submit = submit[['ID', 'class1', 'class2', 'class3', 'class4','class5', 'class6', 'class7', 'class8','class9']]","bfcb1e52":"submit.to_csv('submission.csv', index=False)","2143e50c":"# \u0417\u0430\u0434\u0430\u0447\u0430:\n\n\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0433\u0435\u043d\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043c\u0443\u0442\u0430\u0446\u0438\u0439 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043a\u043b\u0438\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 (\u0442\u0435\u043a\u0441\u0442\u0430). \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c \u043a\u043b\u0430\u0441\u0441, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0431\u044b\u043b\u0430 \u0433\u0435\u043d\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043c\u0443\u0442\u0430\u0446\u0438\u044f.","8e062036":"\u0417\u0430\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c Gene \u0438 Variation, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0432 \u0434\u0432\u043e\u0438\u0447\u043d\u044b\u0439 \u0432\u0438\u0434","e64ace63":"## \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","39a7e9ee":"\u0414\u0435\u043b\u0430\u0435\u043c \u043f\u043e\u0438\u0441\u043a \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0445 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432","8feb7e1d":"\u0421\u043e\u0431\u0438\u0440\u0430\u0435\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043c\u0443\u0442\u0430\u0446\u0438\u044f\u0445 \u0432 \u0433\u0435\u043d\u0430\u0445 \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u043d\u0438\u0445 \u0432 \u043d\u0430\u0443\u0447\u043d\u044b\u0445 \u0441\u0442\u0430\u0442\u044c\u044f\u0445","df503d16":"\u0422\u0440\u0435\u043d\u0438\u0440\u0443\u0435\u043c \u043d\u0430\u0448\u0443 \u0438\u0442\u043e\u0433\u043e\u0432\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c","d6de344c":"\u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u0430\u0448 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0438\u0442\u043e\u0433\u043e\u0432\u044b\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b","0921b307":"\u0420\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u043c\u043e\u0434\u0435\u043b\u0438","8f717f56":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u043e\u0432:\n\n- **training_variants** - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0433\u0435\u043d\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043c\u0443\u0442\u0430\u0446\u0438\u0439, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f. \n\u041f\u043e\u043b\u044f: \nID - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u0442\u0440\u043e\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0441\u0432\u044f\u0437\u0438 \u043c\u0443\u0442\u0430\u0446\u0438\u0438 \u0441 \u043a\u043b\u0438\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438, Gene - \u0433\u0435\u043d, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u044d\u0442\u0430 \u0433\u0435\u043d\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043c\u0443\u0442\u0430\u0446\u0438\u044f, Variation - \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442 \u0434\u043b\u044f \u044d\u0442\u043e\u0439 \u043c\u0443\u0442\u0430\u0446\u0438\u0438, Class - 1-9 \u043a\u043b\u0430\u0441\u0441, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u044d\u0442\u0430 \u0433\u0435\u043d\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043c\u0443\u0442\u0430\u0446\u0438\u044f \u0431\u044b\u043b\u0430 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0430\n- **training_text** - \u0444\u0430\u0439\u043b \u0441 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044f\u043c\u0438 \u0432 \u0432\u0438\u0434\u0435 \u0434\u0432\u043e\u0439\u043d\u043e\u0439 \u0442\u0440\u0443\u0431\u044b (||), \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u043a\u043b\u0438\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 (\u0442\u0435\u043a\u0441\u0442), \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u0434\u043b\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0433\u0435\u043d\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043c\u0443\u0442\u0430\u0446\u0438\u0439. \n\u041f\u043e\u043b\u044f: \nID - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u0442\u0440\u043e\u043a\u0438, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u043e\u0439 \u0434\u043b\u044f \u0441\u0432\u044f\u0437\u0438 \u043a\u043b\u0438\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0433\u0435\u043d\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043c\u0443\u0442\u0430\u0446\u0438\u0435\u0439, Text - \u043a\u043b\u0438\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u0434\u043b\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0433\u0435\u043d\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043c\u0443\u0442\u0430\u0446\u0438\u0438)\n- **test_variants** - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0433\u0435\u043d\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043c\u0443\u0442\u0430\u0446\u0438\u0439, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f. \nID - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u0442\u0440\u043e\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0441\u0432\u044f\u0437\u0438 \u043c\u0443\u0442\u0430\u0446\u0438\u0438 \u0441 \u043a\u043b\u0438\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438, Gene - \u0433\u0435\u043d, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u044d\u0442\u0430 \u0433\u0435\u043d\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043c\u0443\u0442\u0430\u0446\u0438\u044f, Variation - \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442 \u0434\u043b\u044f \u044d\u0442\u043e\u0439 \u043c\u0443\u0442\u0430\u0446\u0438\u0438\n- **test_text** - \u0444\u0430\u0439\u043b \u0441 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044f\u043c\u0438 \u0432 \u0432\u0438\u0434\u0435 \u0434\u0432\u043e\u0439\u043d\u043e\u0439 \u0442\u0440\u0443\u0431\u044b (||), \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u043a\u043b\u0438\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 (\u0442\u0435\u043a\u0441\u0442), \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u0434\u043b\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0433\u0435\u043d\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043c\u0443\u0442\u0430\u0446\u0438\u0439.  \n\u041f\u043e\u043b\u044f: \nID - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u0442\u0440\u043e\u043a\u0438, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u043e\u0439 \u0434\u043b\u044f \u0441\u0432\u044f\u0437\u0438 \u043a\u043b\u0438\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0433\u0435\u043d\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043c\u0443\u0442\u0430\u0446\u0438\u0435\u0439, Text - \u043a\u043b\u0438\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u0434\u043b\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0433\u0435\u043d\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043c\u0443\u0442\u0430\u0446\u0438\u0438)\n- **submissionSample** - \u043f\u0440\u0438\u043c\u0435\u0440 \u0444\u0430\u0439\u043b\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0432 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u043c \u0444\u043e\u0440\u043c\u0430\u0442\u0435 (\u0438\u0442\u043e\u0433\u043e\u0432\u044b\u0439 \u0444\u0430\u0439\u043b, \u043a\u0443\u0434\u0430 \u0437\u0430\u043b\u0438\u0432\u0430\u0435\u043c \u043d\u0430\u0448\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b)","7bbad226":"\u041a\u043b\u0430\u0441\u0441\u044b \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u044e\u0442\u0441\u044f \u0441 0, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0432\u044b\u0447\u0438\u0442\u0430\u0435\u043c 1, \u0447\u0442\u043e\u0431\u044b \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u043b\u0441\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c, \u043f\u043e\u0441\u043b\u0435, \u043c\u044b \u0435\u0435 \u043f\u0440\u0438\u0431\u0430\u0432\u0438\u043c \u043a \u043d\u0430\u0448\u0435\u043c\u0443 \u043f\u0440\u0435\u0434\u0438\u043a\u0442\u0443","666d6409":"\u041f\u0440\u0435\u0434\u0438\u043a\u0442 \u043d\u0430\u0448\u0438\u0445 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445","281b03d9":"\u0421\u043e\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0442\u0430\u0431\u043b\u0438\u0446\u044b","e8bf51a4":"# 3. \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435","7e5b7c45":"\u041c\u0435\u0448\u043e\u043a \u0441\u043b\u043e\u0432","25b94fbd":"\u0412\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043d\u043e\u043c\u0435\u0440 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0435\u0433\u043e \u0440\u0430\u0443\u043d\u0434\u0430","a91a16a1":"https:\/\/www.kaggle.com\/sudalairajkumar\/getting-started-with-text-preprocessing","20617fdd":"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430 \u0441\u043b\u043e\u0432\u0430 \u0432 \u0442\u0435\u043a\u0441\u0442\u0435, \u043c\u043e\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0444\u0438\u0447\u0435\u0439","b9bd96b0":"\u0422\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435","d5dffcf8":"\u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435","4243be90":"\u0414\u0435\u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044f","5124901e":"\u041f\u043e\u0434\u0433\u043e\u0442\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u0447\u0442\u043e\u0431\u044b \u043c\u043e\u0434\u0435\u043b\u044c \u0432\u043e\u0441\u043f\u0440\u0438\u043d\u0438\u043c\u0430\u043b\u0430 \u0444\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043a\u0430\u043a \u0438 \u0443 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0445","e84bc15f":"## XGBClassifier","1d2827a4":"# 1. Exploratory Data Analysis","a722575c":"\u0412\u0435\u043a\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0442\u0435\u043a\u0441\u0442\u0430","854579bb":"\u0418\u0438\u0438\u0438\u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0432 \u043d\u0430\u0448 \u0444\u0430\u0439\u043b! :)","aa3af981":"# 2. \u041f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445"}}