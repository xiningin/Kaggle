{"cell_type":{"508e9c58":"code","dc42b3af":"code","2acaa45b":"code","acb84d85":"code","e3a7b181":"code","027e1838":"code","e379f6f6":"code","662ce8d3":"code","9f92af45":"code","b98e7b46":"code","3a2c4b7e":"code","ff6955f8":"code","7c1c9052":"code","74ea66e6":"code","58899d4f":"code","a85cf168":"code","325db601":"code","52768874":"code","61fc0859":"code","a33cbdfb":"code","e6cde429":"code","4c2a5f5c":"code","9df07dd7":"code","cd4572e9":"code","3b496568":"code","1bd6f1d4":"code","a081f098":"code","6997ce96":"code","ad35bd6d":"code","1f79b4aa":"code","e0c932e5":"code","1c6f1927":"code","1e1cd6d3":"code","7701bf9a":"code","85319d1b":"code","d047d4c6":"code","3052674d":"code","49afe705":"code","a615b605":"code","e0ea31e4":"code","7268b4e2":"markdown","cfbd54e4":"markdown","1cb455fa":"markdown","b9e7f8e0":"markdown","8d093551":"markdown","860a45ee":"markdown","2545df92":"markdown","99b25ee5":"markdown","e97ae607":"markdown","53cdee14":"markdown","a50b706c":"markdown","978eec86":"markdown","992cc082":"markdown","1edcd103":"markdown","c68e3316":"markdown","3a0ec597":"markdown","d231bdd7":"markdown","b71160ca":"markdown","dee913fa":"markdown","7171d252":"markdown"},"source":{"508e9c58":"# Directive pour afficher les graphiques dans Jupyter\n%matplotlib inline\n\n# Pandas : librairie de manipulation de donn\u00e9es\n# NumPy : librairie de calcul scientifique\n# MatPlotLib : librairie de visualisation et graphiques\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\nfrom sklearn import model_selection\n\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_curve, roc_auc_score,auc, accuracy_score\n\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\n\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn import datasets","dc42b3af":"from keras.models import Sequential, load_model\n\nfrom keras.layers import Dense, Dropout, Flatten\n\nfrom keras.layers.convolutional import Conv2D, MaxPooling2D\n\nfrom keras.utils.np_utils import to_categorical","2acaa45b":"import cv2\nimport os\nimport glob\nimport gc\n\ndef lire_images(img_dir, xdim, ydim, nmax=5000) :\n    \"\"\" \n    Lit les images dans les sous r\u00e9pertoires de img_dir\n    nmax images lues dans chaque r\u00e9pertoire au maximum\n    Renvoie :\n    X : liste des images lues, matrices xdim*ydim\n    y : liste des labels num\u00e9riques\n    label : nombre de labels\n    label_names : liste des noms des r\u00e9pertoires lus\n    \"\"\"\n    label = 0\n    label_names = []\n    X = []\n    y=[]\n    for dirname in os.listdir(img_dir):\n        print(dirname)\n        label_names.append(dirname)\n        data_path = os.path.join(img_dir + \"\/\" + dirname,'*g')\n        files = glob.glob(data_path)\n        n=0\n        for f1 in files:\n            if n>nmax : break\n            img = cv2.imread(f1)\n            img = cv2.resize(img, (xdim,ydim))\n            X.append(np.array(img))\n            y.append(label)\n            n=n+1\n        print(n,' images lues')\n        label = label+1\n    X = np.array(X)\n    y = np.array(y)\n    gc.collect() # R\u00e9cup\u00e9ration de m\u00e9moire\n    return X,y, label, label_names","acb84d85":"X,y,nlabels,names = lire_images('..\/input\/chest-xray-pneumonia\/chest_xray\/test', 224, 224, 2000)","e3a7b181":"names","027e1838":"import random\nplt.figure(figsize=(10,20))\nfor i in range(0,49) :\n    plt.subplot(10,5,i+1)\n    j = random.randint(0,len(X))\n    plt.axis('off')\n    plt.imshow(X[j])\n    plt.title(names[y[j]])","e379f6f6":"y = to_categorical(y)","662ce8d3":"X.shape","9f92af45":"# Normalisation entre 0 et 1\nX = X \/ 255\nprint(X[0][0])","b98e7b46":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=1)","3a2c4b7e":"del X,y","ff6955f8":"# R\u00e9seau convolutionnel simple\nmodel = Sequential()\nmodel.add(Conv2D(32, (5, 5), input_shape=(224, 224, 3), activation='relu'))\n#model.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Flatten())\n#model.add(Dense(128, activation='relu'))\nmodel.add(Dense(2, activation='softmax'))\n\n# Compilation du mod\u00e8le\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","7c1c9052":"model.summary()","74ea66e6":"# Apprentissage\ntrain = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=20, batch_size=200, verbose=1)","58899d4f":"# Test\nscores = model.evaluate(X_test, y_test, verbose=0)\nprint(\"Score : %.2f%%\" % (scores[1]*100))","a85cf168":"def plot_scores(train) :\n    accuracy = train.history['accuracy']\n    val_accuracy = train.history['val_accuracy']\n    epochs = range(len(accuracy))\n    plt.plot(epochs, accuracy, 'b', label='Score apprentissage')\n    plt.plot(epochs, val_accuracy, 'r', label='Score validation')\n    plt.title('Scores')\n    plt.legend()\n    plt.show()","325db601":"plot_scores(train)","52768874":"# Prediction\ny_cnn = model.predict_classes(X_test)","61fc0859":"plt.figure(figsize=(15,25))\nn_test = X_test.shape[0]\ni=1\nfor j in range(len(X_test)) :\n    if (y_cnn[j] != y_test[j].argmax(axis=-1)) & (i<50):\n        plt.subplot(10,5,i)\n        plt.axis('off')\n        plt.imshow(X_test[j])\n        plt.title('%s \/ %s' % (names[y_cnn[j]], names[y_test[j].argmax(axis=-1)]))\n        i+=1","a33cbdfb":"# Mod\u00e8le CNN plus profond\nmodel = Sequential()\nmodel.add(Conv2D(32, (3, 3), input_shape=(224, 224, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\nmodel.add(Conv2D(20, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\nmodel.add(Conv2D(20, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\nmodel.add(Flatten())\nmodel.add(Dense(2, activation='softmax'))\n\n# Compilation du mod\u00e8le\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","e6cde429":"model.summary()","4c2a5f5c":"# Apprentissage\ntrain = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=50, batch_size=200, verbose=1)\n\n# Test\nscores = model.evaluate(X_test, y_test, verbose=0)\nprint(\"Score : %.2f%%\" % (scores[1]*100))","9df07dd7":"plot_scores(train)","cd4572e9":"model.save('mnist_cnn2.h5')","3b496568":"new_model = load_model('mnist_cnn2.h5')\nnew_model.summary()","1bd6f1d4":"scores = new_model.evaluate(X_test, y_test, verbose=0)\nprint(\"Score : %.2f%%\" % (scores[1]*100))","a081f098":"from keras.applications import VGG16","6997ce96":"vgg16 = VGG16(weights='imagenet', include_top=False, input_shape=(224,224,3))\nvgg16.trainable = False","ad35bd6d":"vgg16.summary()","1f79b4aa":"model = Sequential()\nmodel.add(vgg16)\nmodel.add(Flatten())\nmodel.add(Dense(49, activation='relu'))\nmodel.add(Dense(20, activation='relu'))\nmodel.add(Dense(2, activation='softmax'))\n\n# Compilation du mod\u00e8le\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","e0c932e5":"model.summary()","1c6f1927":"train = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=20, batch_size=200, verbose=1)","1e1cd6d3":"# Test\nscores = model.evaluate(X_test, y_test, verbose=0)\nprint(\"Score : %.2f%%\" % (scores[1]*100))","7701bf9a":"for i in range (len(vgg16.layers)):\n    print (i,vgg16.layers[i])","85319d1b":"for layer in vgg16.layers[15:]:\n    layer.trainable=True\nfor layer in vgg16.layers[0:15]:\n    layer.trainable=False","d047d4c6":"model = Sequential()\nmodel.add(vgg16)\nmodel.add(Flatten())\nmodel.add(Dense(49, activation='relu'))\nmodel.add(Dense(20, activation='relu'))\nmodel.add(Dense(2, activation='softmax'))\n\n# Compilation du mod\u00e8le\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","3052674d":"train = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=20, batch_size=200, verbose=1)","49afe705":"plot_scores(train)","a615b605":"y_cnn = model.predict_classes(X_test)","e0ea31e4":"plt.figure(figsize=(15,25))\nn_test = X_test.shape[0]\ni=1\nfor j in range(len(X_test)) :\n    if (y_cnn[j] != y_test[j].argmax(axis=-1)) & (i<50):\n        plt.subplot(10,5,i)\n        plt.axis('off')\n        plt.imshow(X_test[j])\n        plt.title('%s \/ %s' % (names[y_cnn[j]], names[y_test[j].argmax(axis=-1)]))\n        i+=1","7268b4e2":"On affiche la structure du mod\u00e8le","cfbd54e4":"On utilise une couche convolutionnelle pour l'extraction des caract\u00e9ristiques, et une couche dense pour la classification ","1cb455fa":"## Transfer learning","b9e7f8e0":"## Initialisations","8d093551":"## Mod\u00e8le CNN plus profond","860a45ee":"On utilise un mod\u00e8le pr\u00e9d\u00e9fini dans Keras (VGG16)","2545df92":"Fonction permettant de lire des images dans des sous-r\u00e9pertoires ","99b25ee5":"On binarise la cible ","e97ae607":"## Lecture des images","53cdee14":"On affiche des images al\u00e9atoirement ","a50b706c":"## Une couche convolutionnelle","978eec86":"On peut ensuite utiliser le mod\u00e8le sans recommencer l'entra\u00eenement","992cc082":"On d\u00e9gele les derni\u00e8res couches","1edcd103":"On d\u00e9compose en ensemble d'apprentissage et de validation","c68e3316":"On affiche les images o\u00f9 l'algorithme s'est tromp\u00e9","3a0ec597":"On utilise les poids pr\u00e9-entra\u00een\u00e9s sur ImageNet (un million d'images) On \"fige\" le r\u00e9seau VGG16, de mani\u00e8re \u00e0 ne pas refaire l'entra\u00eenement sur le dataset particulier","d231bdd7":"On teste un mod\u00e8le avec deux couches convolutionnelles","b71160ca":"On ajoute des couches pour entra\u00eener le mod\u00e8le \u00e0 partir du dataset, sans modifier les poids existants du VGG16","dee913fa":"Le mod\u00e8le entrain\u00e9 peut \u00eatre sauvegard\u00e9","7171d252":"On d\u00e9finit une fonction pour afficher un graphique des scores"}}