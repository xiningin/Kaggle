{"cell_type":{"f2a0ef3c":"code","b2de0a83":"code","f0d27b55":"code","002f7ec8":"code","078c05f4":"code","97c5ae31":"code","7eb83946":"code","b65be311":"code","4f269352":"code","659e51cb":"code","3d190114":"code","01c27593":"code","e203520e":"code","9c743e02":"code","851b5880":"code","dade68a6":"code","66988ea3":"code","8083ca26":"code","d2a8cde7":"code","0371afe8":"code","088ef588":"code","a4d9b872":"code","18fe2897":"code","b5efd0f5":"code","b87636d1":"code","363ad07c":"code","f68017c7":"code","6987dc2e":"code","852ebfa7":"code","414c4be2":"code","81109028":"code","bcccdacb":"code","870f898e":"code","7e5e44fb":"code","203bd129":"code","ae907a5d":"code","00032a15":"code","11d30b8f":"code","7f40d582":"code","ee71d0ec":"code","4d3a28b9":"code","c0f44fc8":"code","bba95b9f":"code","a2fead02":"code","7e782f25":"code","8737155f":"code","ba3848a9":"code","0e1ddd24":"code","10aebd9d":"code","f3e73bbb":"code","3e78c4b8":"code","fd165993":"code","92c2adfd":"code","c5aa90f5":"markdown","3c882cff":"markdown"},"source":{"f2a0ef3c":"import sys\npackage_dir = '..\/input\/autokeras-april-2021'\nsys.path.insert(0, package_dir)","b2de0a83":"from scipy.stats import rankdata","f0d27b55":"import os\n\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\n\nimport autokeras as ak","002f7ec8":"df = pd.read_csv(\"..\/input\/jigsaw-score-augumentation\/jigsaw_train_hate_annotationprob.csv\",index_col=0)\n#df=df.sample(1000)","078c05f4":"df.head()","97c5ae31":"class_1,class_2 = df.toxic.value_counts()\nprint(class_1,class_2)\n#class_4,class_3,class_2,class_1 = df.label.value_counts()\n#c2 = df[(df.toxic ==1 ) | (df.severe_toxic== 1) | (df.obscene ==1) | (df.insult == 1) | (df.identity_hate == 1)]\n#c2 = df[(df.toxic > 0 )]\nc2 = df[df[\"toxic\"] >0]\nc1 = df[df.toxic == 0]\nprint(len(c1),len(c2))\ndf_2 = c1.sample(class_2)\nprint(len(df_2))\nundersampled_df = pd.concat([df_2,c2],axis=0)\nundersampled_df.drop_duplicates(subset =\"text\",keep = False, inplace = True)\ndf=undersampled_df\ndel undersampled_df\ndel c1\ndel c2","7eb83946":"#df.sample(frac=0.5)","b65be311":"#df.head()","4f269352":"#scores_df=pd.read_csv(\"..\/input\/jigsaw-score-augumentation\/jigsaw_train_hate_annotationprob.csv\",index_col=0)\n#scores_df=scores_df.sample(1000)","659e51cb":"df['score1']=10*df['jigsaw_df_severity']*df['offensive_agreement_rating']\ndf['score2']=0.16*df['obscene']+0.32*df['toxic']+1.5*df['threat']+0.64*df['insult']+1.5*df['severe_toxic']+1.5*df['identity_hate']\ndf['score3']=1*df['obscene']+1*df['toxic']+1*df['threat']+1*df['insult']+2*df['severe_toxic']+1.5*df['identity_hate']\ndf['score4']=1*df['obscene']+1*df['toxic']+1*df['threat']+1*df['insult']+2*df['severe_toxic']+1*df['identity_hate']\ndf['score5']=10*df['jigsaw_df_severity']*df['offensive_agreement_rating']+10*df['jigsaw_df_severity']*df['hate_speech_agreement']\ndf['score6']=1*df['obscene']+1*df['toxic']+1*df['insult']+5*df['jigsaw_df_severity']*df['offensive_agreement_rating']+5*df['jigsaw_df_severity']*df['hate_speech_agreement']\ndf['score7']=1*df['obscene']+1*df['toxic']+1*df['threat']+1*df['insult']+1.5*df['severe_toxic']+1*df['identity_hate']\ndf['score8']=10*df['offensive_agreement_rating']+10*df['hate_speech_agreement']\ndf['score9']=0.2*df['obscene']+0.4*df['toxic']+0.6*df['threat']+0.2*df['insult']+0.9*df['severe_toxic']+0.9*df['identity_hate']","3d190114":"#df.columns","01c27593":"scores_df= df[['score1','score2', 'score3', 'score4', 'score5', 'score6', 'score7', 'score8','score9']]","e203520e":"column_names=['score1','score2', 'score3', 'score4', 'score5', 'score6', 'score7', 'score8','score9']","9c743e02":"#scores_df.describe()","851b5880":"#df.tail(25)","dade68a6":"#df.describe()","66988ea3":"#df['target']=df['proposed_score3']+0.1*df['offensive_agreement_rating']","8083ca26":"#df= df[['text', 'target']]","d2a8cde7":"from sklearn.model_selection import train_test_split\n\ntrain, valid = train_test_split(df, test_size=0.10)\n#valid, test = train_test_split(valid, test_size=0.3)","0371afe8":"\n#valid.loc[:,['score1','score2', 'score3', 'score4', 'score5', 'score6', 'score7']]","088ef588":"df_test=pd.read_csv(\"\/kaggle\/input\/jigsaw-toxic-severity-rating\/validation_data.csv\",index_col=0)","a4d9b872":"comments_to_score=pd.read_csv(\"\/kaggle\/input\/jigsaw-toxic-severity-rating\/comments_to_score.csv\",index_col=0)","18fe2897":"X_less_toxic =df_test.less_toxic.values\nX_more_toxic =df_test.more_toxic.values\nX_comments_to_score =comments_to_score.text.values","b5efd0f5":"train_data = train['text'].values\ntrain_target = train.loc[:,column_names].values\n\nvalid_data = valid['text'].values\nvalid_target = valid.loc[:,column_names].values\n\nprint(train_data.shape, train_target.shape)\nprint(valid_data.shape, valid_target.shape)","b87636d1":"input_node = ak.TextInput()\noutput_node = ak.TextToIntSequence()(input_node)\noutput_node = ak.Embedding()(output_node)\n# Use separable Conv layers in Keras.\noutput_node = ak.ConvBlock(separable=True)(output_node)\n#output_node = ak.ConvBlock(separable=True)(output_node)\noutput_node = ak.RegressionHead()(output_node)\nreg = ak.AutoModel(\n    inputs=input_node, outputs=output_node, overwrite=True, max_trials=5\n)\nreg.fit(train_data, train_target, epochs=5,validation_split=0.15)","363ad07c":"p1 = reg.predict(X_less_toxic).squeeze().tolist()","f68017c7":"p2 = reg.predict(X_more_toxic).squeeze().tolist()","6987dc2e":"p1[100][8]","852ebfa7":"# #preds = reg.predict(X_less_toxic).squeeze().tolist()\n# #p1 = predictor.predict(X_less_toxic)\n# p1 = reg.predict(X_less_toxic).squeeze().tolist()\n# #p2 = predictor.predict(X_more_toxic)\n# p2 = reg.predict(X_more_toxic).squeeze().tolist()\n# #\\","414c4be2":"def compare(p1,p2):\n    z=0\n    k=0\n    n=len(p1)\n    for i in range(len(p1)):\n        if p1[i]< p2[i]:\n            z=z+1\n        else:\n            k=k+1\n            #print('nu')\n    print(z\/n)\n\n    return z\/n","81109028":"def compare_list(p1,p2):\n\n    for j in range(9):\n            z=0\n            k=0\n            n=len(p1)\n            print(\"score\",j+1,\"score\",j+1,)\n            for i in range(len(p1)):\n                if p1[i][j]< p2[i][j]:\n                    z=z+1\n                else:\n                    k=k+1\n                #print('nu')\n            print(z\/n)\n            #print(\"p1 score\",j,\"p2 score\",j,z\/n)\n    return z\/n","bcccdacb":"compare_list(p1,p2)","870f898e":"# # Validation Accuracy\n# compare(p1,p2)","7e5e44fb":"# p1 = predictor.predict(X_less_toxic)\n# p2 = predictor.predict(X_more_toxic)\n# # Validation Accuracy\n# (p1 < p2).mean()","203bd129":"# Get the predictions \nscored_sub=reg.predict(X_comments_to_score).squeeze().tolist()","ae907a5d":"len(scored_sub)","00032a15":"len(comments_to_score)","11d30b8f":"comments_to_score['scores']=scored_sub","7f40d582":"scores=pd.DataFrame(comments_to_score['scores'].to_list(), columns=['score1','score2', 'score3', 'score4', 'score5', 'score6', 'score7', 'score8', 'score9'])","ee71d0ec":"scores.head()","4d3a28b9":"colnames=scores.columns","c0f44fc8":"for col in colnames:\n    rank=\"rank\"+col\n    comments_to_score[rank]=rankdata(scores[col], method='ordinal')\n    #print(rank)","bba95b9f":"comments_to_score.head()","a2fead02":"# #comments_to_score['score']=scored_sub\n# comments_to_score['rank']=rankdata(scored_sub, method='ordinal')","7e782f25":"comments_to_score.columns","8737155f":"#comments_to_score.columns\ncols=['rankscore1', 'rankscore2', 'rankscore3',\n       'rankscore4', 'rankscore5', 'rankscore6', 'rankscore7', 'rankscore8',\n       'rankscore9']","ba3848a9":"comments_to_score['score'] = comments_to_score[cols].sum(axis=1)","0e1ddd24":"comments_to_score['grand_slam_ranks']=rankdata( comments_to_score['score'], method='ordinal')","10aebd9d":"submission=comments_to_score.loc[:,['grand_slam_ranks']]","f3e73bbb":"submission.rename(columns={\"grand_slam_ranks\": 'score'}, inplace = True)","3e78c4b8":"submission.to_csv('submission.csv')","fd165993":"submission.head()","92c2adfd":" #scores.corr()","c5aa90f5":"Simple model 0.6745383286834064 \n\n* validation score with second conv block and 3 epoch:\n0.6651720472963997\n","3c882cff":"# Basic Text Regressor using Auto-Keras\ntest for proposed scores: the best for the validation data is :\n\ndf['score2']=0.16*df['obscene']+0.32*df['toxic']+1.5*df['threat']+0.64*df['insult']+1.5*df['severe_toxic']+1.5*df['identity_hate']\n\nnotes:\nsince bert fast text are not working for autokeras in this environment: this is not a competitive kernel :)\n"}}