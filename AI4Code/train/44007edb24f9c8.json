{"cell_type":{"a480594c":"code","f663e540":"code","779476e0":"code","7b543ebd":"code","b2609e5b":"code","a91d03ee":"code","84924811":"code","f470a550":"code","24efe453":"code","d92ecfe7":"code","c9d09498":"code","f6b8e69e":"code","7e15ce46":"code","b6364eaf":"code","731e7935":"code","1246fa14":"code","573ab29a":"code","d9a13a9b":"markdown","28dc9ccf":"markdown","ede3eeb6":"markdown","d88716b1":"markdown","ef017210":"markdown","aed9472b":"markdown","5692ac80":"markdown","2942b99a":"markdown"},"source":{"a480594c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f663e540":"from PIL import Image\nimport random\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.metrics.pairwise import cosine_similarity","779476e0":"image_dir = '..\/input\/shopee-product-matching'\ntrain_images = '..\/input\/shopee-product-matching\/train_images'\ntest_images = '..\/input\/shopee-product-matching\/test_images'\ntrain_csv = '..\/input\/shopee-product-matching\/train.csv'\ntest_csv = '..\/input\/shopee-product-matching\/test.csv'","7b543ebd":"train = pd.read_csv(train_csv)\ntrain.head()","b2609e5b":"test = pd.read_csv(test_csv)\ntest.head()","a91d03ee":"images = os.listdir(train_images)\nimages[:2]","84924811":"def show_image(class_num, examples = 2, train_df = train, train_images_path = train_images):\n    image_list = train[train['label_group'] == class_num]['image'].sample(frac=1)[:examples].to_list()\n    plt.figure(figsize=(20,10))\n    for i, img in enumerate(image_list):\n        full_path = os.path.join(train_images_path, img)\n        img = Image.open(full_path)\n        plt.subplot(1 ,examples, i%examples +1)\n        plt.axis('off')\n        plt.imshow(img)\n        plt.title(f'Class: {class_num}')","f470a550":"nums = random.sample(list(train.label_group.unique()), 2)\nfor num in nums:\n    show_image(num)","24efe453":"train.nunique()","d92ecfe7":"imageSample = random.sample(list(train.posting_id.unique()), 2)\nsampleDf = pd.DataFrame(columns = train.columns)\nfor im in imageSample:\n    sampleDf = pd.concat([sampleDf, train[train.posting_id == im]])","c9d09498":"sampleDf","f6b8e69e":"identicalDf = pd.DataFrame(columns = train.columns)\nfor imageId in imageSample:\n    label = train[train.posting_id == imageId]['label_group'].iloc[0] \n    phash = train[train.posting_id == imageId]['image_phash'].iloc[0]\n    identicalDf = pd.concat([identicalDf, train[(train['label_group'] == label)]])\n","7e15ce46":"identicalDf","b6364eaf":"imagePosting = test.groupby(['posting_id']).count().reset_index()['posting_id'].tolist()\n\npostings = []\nmatches = []\n\nfor imagePost in imagePosting:\n    checkPhash = test[test['posting_id'] == imagePost]['image_phash'].iloc[0]\n    postings.append(imagePost)\n    matches.append(test[test['image_phash'] == checkPhash]['posting_id'].iloc[0])\n    ","731e7935":"submission = pd.DataFrame(columns = ['posting_id','matches'])\nsubmission.posting_id = postings\nsubmission.matches = matches","1246fa14":"matches","573ab29a":"submission.to_csv('submission.csv', index=False)","d9a13a9b":"### Now let's analyse the data a little bit..","28dc9ccf":"### Loading all the required Libraries","ede3eeb6":"Now, let's compare the two images and see what the title of other images in the same label group of the sample image we have selected above.","d88716b1":"Selecting two random images from the train csv","ef017210":"### Now let's try to see the relationship between image label group and phash.. ","aed9472b":"### So what is a phash?\n\nA perceptual hash is a fingerprint of a multimedia file derived from various features from its content. Unlike cryptographic hash functions which rely on the avalanche effect of small changes in input leading to drastic changes in the output, perceptual hashes are \"close\" to one another if the features are similar.\n\nPerceptual hashes are robust enough to take into account transformations or \"attacks\" on a given input and yet be flexible enough to distinguish between dissimilar files. Such attacks can include rotation, skew, contrast adjustment and different compression\/formats. All of these challenges make perceptual hashing an interesting one.","5692ac80":"If the image phash and label group matches for 2 images, then it can be said to be similar.. \nThis can be our naive approach","2942b99a":"### Naive Model "}}