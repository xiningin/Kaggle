{"cell_type":{"0f5e290e":"code","9b1c6be7":"code","a3978809":"code","749908d2":"code","b7060646":"code","4a90426b":"code","dca7ee14":"code","e30e76eb":"code","6f495e26":"code","7ae4217d":"code","c622409f":"code","6bccc142":"code","db545e13":"code","d8e1a535":"code","c8678836":"code","3c9831e2":"code","53dc3bcb":"code","84559c9c":"code","83dc5629":"code","b63fe1a4":"code","e4f902d2":"code","586d5d77":"code","87f69192":"code","83cd5176":"code","c2336bd2":"code","c1e0d7ac":"code","028c634a":"code","3e65cb29":"code","95a4f604":"code","e490ebd5":"code","522e235b":"code","212941c9":"code","2d31a509":"markdown","2f9716cb":"markdown","dd37147d":"markdown","bc7f2bae":"markdown","387610a2":"markdown","94668fab":"markdown","0a87cdf1":"markdown","58b9059f":"markdown","d69e0c87":"markdown","d7f9a01a":"markdown","875bc517":"markdown","8e37a48a":"markdown","25e976f5":"markdown","07ecd052":"markdown","684ec1b6":"markdown","7bd301f6":"markdown","4aa08782":"markdown"},"source":{"0f5e290e":"import pandas as pd\nimport numpy as np\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","9b1c6be7":"autos=pd.read_csv('\/kaggle\/input\/used-cars-database-50000-data-points\/autos.csv',encoding='Latin-1')","a3978809":"autos.head(5)","749908d2":"autos.info()","b7060646":"columns_names = autos.columns","4a90426b":"columns_names","dca7ee14":"columns_names = autos.columns\ncolumns_names_converted=[]\n\n## helper function to conver columns names\n\nimport re\ndef convert_2_snakecase (name):\n    s1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', name)\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', s1).lower()\n\n## applyting the function\nfor i in columns_names:\n    columns_names_converted.append(convert_2_snakecase(i))\n\n## applyting transformation\nautos.columns=columns_names_converted","e30e76eb":"autos","6f495e26":"autos.describe(include='all')","7ae4217d":"autos[\"nr_of_pictures\"].value_counts()","c622409f":"autos = autos.drop([\"nr_of_pictures\", \"seller\", \"offer_type\"], axis=1)","6bccc142":"autos['price'].unique()","db545e13":"autos['price']=autos['price'].str.replace(\"$\",\"\").str.replace(\",\",\"\").astype(int)","d8e1a535":"autos['price'].head(10)","c8678836":"autos['odometer'].unique()","3c9831e2":"autos['odometer']=autos['odometer'].str.replace(\"km\",\"\").str.replace(\",\",\"\").astype(int)","53dc3bcb":"autos['odometer'].unique()","84559c9c":"autos.rename(columns={'odometer':'odometer_km'},inplace=True)","83dc5629":"autos","b63fe1a4":"print(autos['price'].describe())\nautos['price'].value_counts().sort_index(ascending=True)","e4f902d2":"autos = autos[autos[\"price\"].between(1,351000)]\nautos['price'].describe()\n","586d5d77":"autos['odometer_km'].describe()\nautos['odometer_km'].value_counts().sort_index(ascending=False)","87f69192":"autos[['date_crawled','date_created','last_seen']][0:5]","83cd5176":"autos['date_crawled'].value_counts(normalize=True, dropna=False).head(10)","c2336bd2":"autos['year_of_registration'].describe()","c1e0d7ac":"print(\"year_of_registration BEFORE cleanup:\")\nprint(autos['year_of_registration'].describe())\nautos = autos[autos[\"year_of_registration\"].between(1900,2016)]\nprint(\"year_of_registration AFTER cleanup:\")\nprint(autos['year_of_registration'].describe())","028c634a":"autos['year_of_registration'].value_counts(normalize=True).head(10)","3e65cb29":"autos['brand'].unique()","95a4f604":"autos['brand'].value_counts().index","e490ebd5":"brands_list=autos['brand'].value_counts().index\nbrands_mean_price={}\n\nfor i in brands_list:\n    mean_price = autos['price'][autos['brand']==i].mean()\n    brands_mean_price[i]=int(mean_price)\n    \n    \n\nimport operator\nbrands_mean_price_sorted = sorted(brands_mean_price.items(), key=operator.itemgetter(1),reverse=True)\n    \nbrands_mean_price_sorted[:15]","522e235b":"brands_list=autos['brand'].value_counts().index\nbrands_mean_mileage={}\n\n\nfor i in brands_list:\n    mean_mileage = autos['odometer_km'][autos['brand']==i].mean()\n    brands_mean_mileage[i]=int(mean_mileage)\n    \nbrands_mean_mileage    ","212941c9":"bmp_series = pd.Series(brands_mean_price)\n\nb_mileage_series = pd.Series(brands_mean_mileage)\n\n#print(bmp_series)\n\ndf = pd.DataFrame(bmp_series, columns=['mean_price'])\ndf['mean_mileage']=b_mileage_series\n\ndf\n","2d31a509":"As we see we significantly improved general stat for the Price column, dropping it down just from mean 9,800 to mean 5,900","2f9716cb":"### Cleaning text=> numeric outliers","dd37147d":"### Cleaning text=> numeric transformation","bc7f2bae":"### Most expensive cars by brands in the listings","387610a2":"There're some obvious outliers and should be removed. Zero-dollars cars are definitely a mistake, while 1$ could be some starting price taking into an account the data was taken from eBay.","94668fab":"### Exploring Brand column","0a87cdf1":"Dataset of used cars from eBay Kleinanzeigen, a classifieds section of the German eBay website. Original source: https:\/\/www.kaggle.com\/orgesleka\/used-cars-database\/data","58b9059f":"As we see now stat is quite meaningful, it's changed significantly from unrealistic min-max vals.","d69e0c87":"### Cleaning data text => date values","d7f9a01a":"The range of car mileages does not vary as much as the prices do by brand, instead all falling within 10% for the top brands. There is a slight trend to the more expensive vehicles having higher mileage, with the less expensive vehicles having lower mileage.\n","875bc517":"There're some wrong values for 'year_of_registration' that need to be dropped off.","8e37a48a":"Price column research","25e976f5":"Columns like \"offer_type\",\"seller\",\"abtest\",\"gearbox\",\"not_repaired_damage\" can be dropped, they have only 2-3 unique values each. \"Price\",\"odometr,\" should be stripped and converted to numeric values.\n\nIt looks like the num_photos column has 0 for every column. We'll drop this column, plus the other two we noted as mostly one value.\n","07ecd052":"It appears that most of the vehicles were first registered in the past 20 years.\n","684ec1b6":"Cols with nulls values to be treated: vehicleType,gearbox,model,fuelType,notRepairedDamage","7bd301f6":"## German eBay cars sales data exploration","4aa08782":"### Mean mileage calculation by brand "}}