{"cell_type":{"1dc54d80":"code","f2ff3d71":"code","ec3cfdf9":"code","674c9a2f":"code","95926979":"code","8129f89c":"code","fa85db8b":"code","c417a25f":"code","a63628fb":"code","d9979f68":"code","6c945a59":"code","802bbad4":"code","55a6bd66":"code","5f0d394a":"code","33e31d94":"code","2813233b":"code","a57775a9":"code","2a6ee72b":"code","eb85ace0":"code","ae5ba4d2":"code","5d7483ed":"code","db2b4852":"code","8ce67a46":"code","50fcc009":"code","3e799aef":"code","853e8ff2":"code","15c895bb":"code","8f9f6ef6":"code","af1ce51b":"code","eb889fb2":"code","4e440f82":"code","93fb1ecb":"markdown","3223b71e":"markdown","3d15bb3a":"markdown","c37678a3":"markdown","17e4b26f":"markdown","14f0c42f":"markdown","b1ab9a4b":"markdown","48c83063":"markdown","afbaf4e9":"markdown","230b960c":"markdown","1fb53a04":"markdown","a3a0634b":"markdown","6f7144ec":"markdown","4a908516":"markdown","60af1434":"markdown"},"source":{"1dc54d80":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","f2ff3d71":"data = pd.read_csv('..\/input\/data.csv')","ec3cfdf9":"data.head()","674c9a2f":"data_radius_mean = data.radius_mean.describe()","95926979":"data.corr()","8129f89c":"x = data.radius_mean\ny = data.texture_mean\nnp.cov(x, y)","fa85db8b":"x.cov(y) # cov(x,y) sadece","c417a25f":"np.std(x)","a63628fb":"np.std(y)","d9979f68":"x.head(10)","6c945a59":"x.head(10).rank(ascending=1)","802bbad4":"data.rank(ascending=1)","55a6bd66":"from scipy.special import comb\nC_52_2 = comb(52, 2, exact=False)\nC_13_2 = comb(13, 2, exact=False)\nprobability = C_13_2 \/ C_52_2\nprobability","5f0d394a":"distribution = np.random.randint(1,7,600000)\nsample_space = np.unique(distribution)\nprint('sample spase is: ', sample_space)","33e31d94":"import matplotlib.pyplot as plt\nplt.hist(distribution, bins=12)\nplt.show()","2813233b":"import seaborn as sns\nsns.countplot(distribution)\nplt.show()","a57775a9":"print('5 defada 1 kez basarili olma ihtimali: ',comb(5, 1, exact=False)*((1\/6)**1)*((5\/6)**4))","2a6ee72b":"print('5 defada 0 kez basarili olma ihtimali: ',comb(5, 0, exact=False)*((1\/6)**0)*((5\/6)**5))\nprint('5 defada 1 kez basarili olma ihtimali: ',comb(5, 1, exact=False)*((1\/6)**1)*((5\/6)**4))\nprint('5 defada 2 kez basarili olma ihtimali: ',comb(5, 2, exact=False)*((1\/6)**2)*((5\/6)**3))\nprint('5 defada 3 kez basarili olma ihtimali: ',comb(5, 3, exact=False)*((1\/6)**3)*((5\/6)**2))\nprint('5 defada 4 kez basarili olma ihtimali: ',comb(5, 4, exact=False)*((1\/6)**4)*((5\/6)**1))\nprint('5 defada 5 kez basarili olma ihtimali: ',comb(5, 5, exact=False)*((1\/6)**5)*((5\/6)**0))","eb85ace0":"# ya da\ntotal_prob = 0\nfor i in range(0,6):\n    succes = comb(5, i, exact=False)*((1\/6)**i)*((5\/6)**(5-i))\n    print('5 defada {0} kez basarili olma ihtimali: {1}'.format(i, succes))\n    total_prob+=succes\nprint('total probability: ', total_prob)","ae5ba4d2":"# OR\nfrom scipy.stats import binom\nprint(binom.pmf(4,10,1\/6)) # pmf(r,n,p) yada C(10,4) * (1\/6)^4 * (5\/6)^6","5d7483ed":"import math\nimport scipy.special\nP_1 = (np.power(3,1) * np.exp(-3)) \/ math.factorial(1)","db2b4852":"lambda_ = 3\nprob = []\nfor x in range(0, 20):\n    probability = (np.power(lambda_,x) * np.exp(-lambda_)) \/ math.factorial(x)\n    prob.append(probability)","8ce67a46":"import matplotlib.pyplot as plt\nx = np.arange(0,20,1)\nplt.scatter(x, prob)\nplt.xlabel('number of occurances')\nplt.ylabel('probability')\nplt.title('poisson distribution')\nplt.grid(color='gray', linestyle='-', linewidth=0.5)\nplt.show()","50fcc009":"# OR\nlambda_ = 3\ns1 = np.random.poisson(lambda_, 100000)\nweights_ = np.ones_like(s1) \/ float(len(s1))\nplt.hist(s1, weights = weights_, bins=100)\nplt.xlabel('number of occurances')\nplt.ylabel('probability')\nplt.title('poisson distribution')\nplt.grid(color='gray', linestyle='-', linewidth=0.5)\nplt.show()","3e799aef":"mu, sigma = 110, 20 # parameters of normal distribution mean and std\ns = np.random.normal(mu,sigma, 100000) # 100.000 tane insan\nprint('mean: ', np.mean(s))\nprint('standart deviation: ', np.std(s))\nplt.figure(figsize=(10,7))\nplt.hist(s, bins=100)\nplt.xlabel('IQ')\nplt.ylabel('frequency')\nplt.show()","853e8ff2":"import numpy as np\n10 * np.random.random_sample((3,2))","15c895bb":"from scipy import stats\nstatistics, p_value = stats.ttest_rel(data.radius_mean, data.area_mean)\nprint('H0: there is no relation between radius_mean and area_mean')\nprint('H1: there is relation')\nprint('let a=0.001 namely %99.9 accuracy')\nprint('p value: ', p_value)\nprint('as p<a, we say H1 is accepted with %99.9 accuracy')","8f9f6ef6":"import numpy as sp\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ns1 = np.random.normal(48,15, 20) # 20 tane primary \ns2 = np.random.normal(52,10, 20) # 20 tane secondary\ns3 = np.random.normal(55,5, 20) # 20 tane undergraduate\n\n# plot pdf\nsns.kdeplot(s1)\nsns.kdeplot(s2)\nsns.kdeplot(s3)\nplt.show()","af1ce51b":"from scipy import stats\nstats.f_oneway(s1, s2, s3) # statistics = a (here a is f value)","eb889fb2":"# another example\n# H0: observation values are normal\nobservation = np.array([5,7,9,4,1,10,6]) # frequencies\nexpected = np.sum(observation) \/ len(observation) # it is assumed\nchi_value = np.sum((observation-expected)**2\/expected)\nprint('expected value: ', expected)\nprint('chi value: ', chi_value)","4e440f82":"# from table find critical value of chi square\nfrom scipy.stats import chi2\ncrit_val = chi2.isf(0.05, 6) # d = 0.05, degree of freedom = 6 (number of element -1)\nprint('critical value: ', crit_val)","93fb1ecb":"## ANOVA","3223b71e":"covariance: np.cov()\n* matrix:\n        [cov(x,x)    cov(x,y)\n         cov(y,x)     cov(y,y)]","3d15bb3a":"**Conditional Probability**\n\nQuestion:\n\n52'lik bir oyun kart\u0131 destesini kar\u0131\u015ft\u0131r\u0131yoruz. Kar\u0131\u015ft\u0131rd\u0131ktan sonra kapal\u0131 bir \u015fekilde masaya koyuyoruz. Sonra en \u00fcstten iki tane kart \u00e7ekiyoruz ikisininde sinek gelme olas\u0131l\u0131\u011f\u0131 nedir? (Not: 52 lik bir kart i\u00e7erisinde 13 tane sinek bulunur)","c37678a3":"**F distribution**","17e4b26f":"## Uniform Distribution ","14f0c42f":"**Soru**:\n\ndeney: zar atma \n\np: Basari: zarin 6 gelmesi\n\nn: Deneme sayisi: 5\n\nr: basari sayisi = 1 olsun\n\nBu 5 atistan sadece r = 1 kez basarili olma olasiligi nedir?\n\nC(5,1) * (1\/6)^1 * (5\/6)^9","b1ab9a4b":"## **Hypothesis Testing**","48c83063":"## Poisson Distribution\n\n* number of succes per unit time (or interval)\n* lambda = number of occurances \/ interval\n* P(X) =\n ![image.png](attachment:image.png)","afbaf4e9":"**soru: **\n\nBir zar 10 kez at\u0131l\u0131yor. 4 kere 6 say\u0131s\u0131 gelme olas\u0131l\u0131\u011f\u0131 nedir?","230b960c":"## Chi - Square\n* it is utilized to oberve whether the difference between observed frequency and expected frequency is logical\n* for example: 10 coin toss\n* we expect 5 head and 5 tail\n* we observe 9 head and 1 tail\n* Question: Is this result expected or the coin is biased \n\n![image.png](attachment:image.png)","1fb53a04":"## Normal Distribution","a3a0634b":"Question\n\nlambda = 3 (lets say 3 trucks are reaching to the factory in each hour)","6f7144ec":"- chi value < critical value\n- so fail to reject H0","4a908516":"## Binomial Distribution","60af1434":"* **if f_value > f_critical_value(from table)**\n* **it is in rejection region**\n* **reject null hypothesis**\n* **accept H1**"}}