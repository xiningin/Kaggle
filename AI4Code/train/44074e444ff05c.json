{"cell_type":{"a8d1849b":"code","7e1fc5b7":"code","57122376":"code","6e0cff3a":"code","6f1dfdfe":"code","9f37a9c6":"code","1949298f":"code","c3c55d1a":"code","cec44e8e":"code","663c430b":"code","198aaa0d":"code","5479f31b":"code","0065f5c6":"code","5ddd4df9":"code","c71a1c77":"code","7980982e":"code","b6bb196e":"code","2079b056":"code","62f7d327":"code","4e072f79":"code","153c7a29":"code","fc0f6a6f":"code","1b49958d":"code","e16de98f":"code","63bf5775":"code","bb133dd7":"code","d027231e":"code","e4e39fbc":"code","288ba1f9":"code","c2df9fcd":"code","262f4bce":"code","30fa2d9e":"code","947bbf56":"code","931b5de0":"code","c7aff968":"code","ed4095d1":"code","7e98141f":"code","c4a5f1e3":"code","09a00b12":"code","d5ec8cdd":"code","75c91d49":"code","b0246499":"code","5caa249a":"code","b90fcbf6":"code","d2dd3d55":"code","63d6fc5f":"code","b14b09d2":"code","04db2dce":"code","b8c5ce62":"code","ab43621c":"code","209fd189":"code","17a1e594":"code","6953557e":"code","18cf704c":"code","7c7c80de":"markdown"},"source":{"a8d1849b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7e1fc5b7":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\nfrom scipy import stats\nfrom scipy.stats import norm, skew\nfrom sklearn.preprocessing import LabelEncoder","57122376":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","6e0cff3a":"train_ID = train['Id']\ntest_ID = test['Id']\n\ntrain.drop(\"Id\", axis = 1, inplace = True)\ntest.drop(\"Id\", axis = 1, inplace = True)","6f1dfdfe":"train = train.drop(train[(train['GrLivArea']>4000) & (train['SalePrice']<300000)].index)","9f37a9c6":"fig, ax = plt.subplots()\nax.scatter(x = train['GrLivArea'], y = train['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('GrLivArea', fontsize=13)\nplt.show()","1949298f":"sns.distplot(train['SalePrice'],fit=norm)","c3c55d1a":"fig = plt.subplots()\nres = stats.probplot(train['SalePrice'],plot = plt,dist='norm')\nplt.show()","cec44e8e":"# We use the numpy fuction log1p which  applies log(1+x) to all elements of the column\ntrain[\"SalePrice\"] = np.log1p(train[\"SalePrice\"])\n\n#Check the new distribution \nsns.distplot(train['SalePrice'] , fit=norm)","663c430b":"fig = plt.figure()\nres = stats.probplot(train['SalePrice'], plot=plt)\nplt.show()","198aaa0d":"y_train = train.SalePrice.values\nall_data = pd.concat((train, test)).reset_index(drop=True)\nall_data.drop(['SalePrice'], axis=1, inplace=True)","5479f31b":"ntrain = train.shape[0]\nntest = test.shape[0]","0065f5c6":"all_data_na = (all_data.isnull().sum() \/ len(all_data)) * 100\nall_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)","5ddd4df9":"f, ax = plt.subplots(figsize=(15, 12))\nplt.xticks(rotation='90')\nsns.barplot(x=all_data_na.index, y=all_data_na)\nplt.xlabel('Features', fontsize=15)\nplt.ylabel('Percent of missing values', fontsize=15)\nplt.title('Percent missing data by feature', fontsize=15)","c71a1c77":"for col in ('PoolQC','FireplaceQu','GarageType','MSSubClass', 'GarageFinish', 'GarageQual', 'GarageCond','Alley','Fence','MiscFeature','BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2','MasVnrType'):\n    all_data[col] = all_data[col].fillna('None')\n","7980982e":"len(all_data['Neighborhood'].unique())","b6bb196e":"# Since the area of each street connected to the house property most likely have a similar area to other houses in its neighborhood , we can fill in missing values by the median LotFrontage of the neighborhood.\nall_data[\"LotFrontage\"] = all_data.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(lambda x: x.fillna(x.median()))","2079b056":"for col in ('GarageYrBlt', 'GarageArea', 'GarageCars','BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath','MasVnrArea'):\n    all_data[col] = all_data[col].fillna(0)","62f7d327":"all_data['MSZoning'].value_counts()","4e072f79":"all_data['MSZoning'] = all_data['MSZoning'].fillna(all_data['MSZoning'].mode()[0])","153c7a29":"all_data[\"Functional\"] = all_data[\"Functional\"].fillna(\"Typ\")\n","fc0f6a6f":"# if it has less na values, fill it with the mode of that column \nall_data['Electrical'] = all_data['Electrical'].fillna(all_data['Electrical'].mode()[0])\nall_data['KitchenQual'] = all_data['KitchenQual'].fillna(all_data['KitchenQual'].mode()[0])\nall_data['Exterior1st'] = all_data['Exterior1st'].fillna(all_data['Exterior1st'].mode()[0])\nall_data['Exterior2nd'] = all_data['Exterior2nd'].fillna(all_data['Exterior2nd'].mode()[0])\nall_data['SaleType'] = all_data['SaleType'].fillna(all_data['SaleType'].mode()[0])","1b49958d":"all_data = all_data.drop(['Utilities'], axis=1)","e16de98f":"all_data_na = (all_data.isnull().sum() \/ len(all_data)) * 100\nall_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)\nmissing_data = pd.DataFrame({'Missing Ratio' :all_data_na})\nmissing_data.head()","63bf5775":"all_data['MSSubClass'] = all_data['MSSubClass'].apply(str)\n\n\n#Changing OverallCond into a categorical variable\nall_data['OverallCond'] = all_data['OverallCond'].astype(str)\n\n\n#Year and month sold are transformed into categorical features.\nall_data['YrSold'] = all_data['YrSold'].astype(str)\nall_data['MoSold'] = all_data['MoSold'].astype(str)","bb133dd7":"cols = ('FireplaceQu', 'BsmtQual', 'BsmtCond', 'GarageQual', 'GarageCond', \n        'ExterQual', 'ExterCond','HeatingQC', 'PoolQC', 'KitchenQual', 'BsmtFinType1', \n        'BsmtFinType2', 'Functional', 'Fence', 'BsmtExposure', 'GarageFinish', 'LandSlope',\n        'LotShape', 'PavedDrive', 'Street', 'Alley', 'CentralAir', 'MSSubClass', 'OverallCond', \n        'YrSold', 'MoSold')\nfor c in cols: \n    lb = LabelEncoder() \n    lb.fit(list(all_data[c].values))\n    all_data[c] = lb.transform(list(all_data[c].values))","d027231e":"# Since area related features are very important to determine house prices, we add one more feature which is the total area of basement, first and second floor areas of each house\nall_data['TotalSF'] = all_data['TotalBsmtSF'] + all_data['1stFlrSF'] + all_data['2ndFlrSF']","e4e39fbc":"numeric_feats = all_data.dtypes[all_data.dtypes != \"object\"].index","288ba1f9":"skewed_feats = all_data[numeric_feats].apply(lambda x: skew(x.dropna())).sort_values(ascending=False)\nprint(\"\\nSkew in numerical features: \\n\")\nskewness = pd.DataFrame({'Skew' :skewed_feats})\nskewness.head(10)","c2df9fcd":"skewness = skewness[abs(skewness) > 0.75]\nprint(\"There are {} skewed numerical features to Box Cox transform\".format(skewness.shape[0]))\n\nfrom scipy.special import boxcox1p\nskewed_features = skewness.index\nlam = 0.15\nfor feat in skewed_features:\n    all_data[feat] = boxcox1p(all_data[feat], lam)","262f4bce":"# for categorical variables\nall_data = pd.get_dummies(all_data)\nprint(all_data.shape)","30fa2d9e":"train = all_data[:ntrain]\ntrain.shape\ntest = all_data[ntrain:]","947bbf56":"train.shape","931b5de0":"from sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport xgboost as xgb\nimport lightgbm as lgb","c7aff968":"# to understand\nn_folds = 5\n\ndef rmsle_cv(model):\n    kf = KFold(n_folds, shuffle=True, random_state=42).get_n_splits(train.values)\n    rmse= np.sqrt(-cross_val_score(model, train.values, y_train, scoring=\"neg_mean_squared_error\", cv = kf))\n    return(rmse)","ed4095d1":"ENet = make_pipeline(RobustScaler(), ElasticNet(alpha=0.0005, l1_ratio=.9, random_state=3))","7e98141f":"score = rmsle_cv(ENet)\nprint(\"ElasticNet score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","c4a5f1e3":"KRR = KernelRidge(alpha=0.6, kernel='polynomial', degree=2, coef0=2.5)","09a00b12":"score = rmsle_cv(KRR)\nprint(\"Kernel Ridge score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","d5ec8cdd":"model_xgb = xgb.XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.05, max_depth=3, \n                             min_child_weight=1.7817, n_estimators=2200,\n                             reg_alpha=0.4640, reg_lambda=0.8571,\n                             subsample=0.5213, silent=1,\n                             random_state =7, nthread = -1)","75c91d49":"score = rmsle_cv(model_xgb)\nprint(\"Xgboost score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","b0246499":"model_lgb = lgb.LGBMRegressor(objective='regression',num_leaves=5,\n                              learning_rate=0.05, n_estimators=720,\n                              max_bin = 55, bagging_fraction = 0.8,\n                              bagging_freq = 5, feature_fraction = 0.2319,\n                              feature_fraction_seed=9, bagging_seed=9,\n                              min_data_in_leaf =6, min_sum_hessian_in_leaf = 11)","5caa249a":"score = rmsle_cv(model_lgb)\nprint(\"LGBM score: {:.4f} ({:.4f})\\n\" .format(score.mean(), score.std()))","b90fcbf6":"GBoost = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05,\n                                   max_depth=4, max_features='sqrt',\n                                   min_samples_leaf=15, min_samples_split=10, \n                                   loss='huber', random_state =5)","d2dd3d55":"score = rmsle_cv(GBoost)\nprint(\"Gradient Boosting score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","63d6fc5f":"class AveragingModels(BaseEstimator, RegressorMixin, TransformerMixin):\n    def __init__(self, models):\n        self.models = models\n        \n    # we define clones of the original models to fit the data in\n    def fit(self, X, y):\n        self.models_ = [clone(x) for x in self.models]\n        \n        # Train cloned base models\n        for model in self.models_:\n            model.fit(X, y)\n\n        return self\n    \n    #Now we do the predictions for cloned models and average them\n    def predict(self, X):\n        predictions = np.column_stack([\n            model.predict(X) for model in self.models_\n        ])\n        return np.mean(predictions, axis=1)  ","b14b09d2":"averaged_models = AveragingModels(models = (ENet, GBoost, model_lgb, model_xgb,KRR))\n\nscore = rmsle_cv(averaged_models)\nprint(\" Averaged base models score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","04db2dce":"def rmsle(y, y_pred):\n    return np.sqrt(mean_squared_error(y, y_pred))","b8c5ce62":"averaged_models.fit(train.values, y_train)\nstacked_train_pred = averaged_models.predict(train.values)\nstacked_pred = np.expm1(averaged_models.predict(test.values))\nprint(rmsle(y_train, stacked_train_pred))","ab43621c":"model_xgb.fit(train, y_train)\nxgb_train_pred = model_xgb.predict(train)\nxgb_pred = np.expm1(model_xgb.predict(test))\nprint(rmsle(y_train, xgb_train_pred))","209fd189":"model_lgb.fit(train, y_train)\nlgb_train_pred = model_lgb.predict(train)\nlgb_pred = np.expm1(model_lgb.predict(test.values))\nprint(rmsle(y_train, lgb_train_pred))","17a1e594":"print('RMSLE score on train data:')\nprint(rmsle(y_train,stacked_train_pred*0.70 +\n               xgb_train_pred*0.15 + lgb_train_pred*0.15 ))","6953557e":"ensemble = stacked_pred*0.70 + xgb_pred*0.15 + lgb_pred*0.15","18cf704c":"df = pd.DataFrame()\ndf['Id'] = test_ID\ndf['SalePrice'] = ensemble\ndf.to_csv('submission.csv',index=False)","7c7c80de":"The target variable is right skewed. As (linear) models love normally distributed data , we need to transform this variable and make it more normally distributed."}}