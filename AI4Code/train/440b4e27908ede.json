{"cell_type":{"390ce140":"code","af58a3a9":"code","6680dd77":"code","53cadebe":"code","a0de5b3c":"code","8ac96481":"code","c3b1a4ba":"markdown","3929e5ec":"markdown","fea72efb":"markdown","a309742d":"markdown","b0f664cf":"markdown"},"source":{"390ce140":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n#import os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#    for filename in filenames:\n#        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","af58a3a9":"import glob\nfrom tensorflow.keras.preprocessing.image import load_img, img_to_array\n\nimg_size = (224, 224)\nimg_array_list = []\ncls_list = []\n\nimg_list1 = glob.glob('\/kaggle\/input\/1056lab-defect-detection\/train\/Class1\/*.png')\nfor i in img_list1:\n    img = load_img(i, color_mode='grayscale', target_size=(img_size))\n    img_array = img_to_array(img) \/ 255\n    img_array_list.append(img_array)\n    cls_list.append(0)\n\nimg_list1 = glob.glob('\/kaggle\/input\/1056lab-defect-detection\/train\/Class1_def\/*.png')\nfor i in img_list1:\n    img = load_img(i, color_mode='grayscale', target_size=(img_size))\n    img_array = img_to_array(img) \/ 255\n    img_array_list.append(img_array)\n    cls_list.append(1)\n\nX_train = np.array(img_array_list)\ny_train = np.array(cls_list)","6680dd77":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Dropout, Flatten, Dense\n\nmodel = Sequential()\nmodel.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu', input_shape=(img_size[0], img_size[1], 1)))\nmodel.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(3, 3)))\nmodel.add(Dropout(rate=0.25))\n\nmodel.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu'))\nmodel.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(3, 3)))\nmodel.add(Dropout(rate=0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(units=128, activation='relu'))\nmodel.add(Dropout(rate=0.25))\n\nmodel.add(Dense(units=2, activation='softmax'))\n\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\nmodel.summary()","53cadebe":"from keras.utils.np_utils import to_categorical\n\ny_train = to_categorical(y_train)\nmodel.fit(X_train, y_train)","a0de5b3c":"import glob\nfrom keras.preprocessing.image import load_img, img_to_array\n\nimg_array_list = []\n\nimg_list = glob.glob('\/kaggle\/input\/1056lab-defect-detection\/test\/*.png')\nimg_list.sort()\nfor i in img_list:\n    img = load_img(i, color_mode='grayscale', target_size=(img_size))\n    img_array = img_to_array(img) \/ 255\n    img_array_list.append(img_array)\n\nX_test = np.array(img_array_list)","8ac96481":"predict = model.predict(X_test)[:, 1]\n\nsubmit = pd.read_csv('\/kaggle\/input\/1056lab-defect-detection\/sampleSubmission.csv')\nsubmit['defect'] = predict\nsubmit.to_csv('submission.csv', index=False)","c3b1a4ba":"# \u8a13\u7df4\u30c7\u30fc\u30bf (Training data)","3929e5ec":"# \u4e88\u6e2c (Predicting)","fea72efb":"# \u5b66\u7fd2 (Training)","a309742d":"# \u30e2\u30c7\u30eb (Model)","b0f664cf":"# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf (Test data)"}}