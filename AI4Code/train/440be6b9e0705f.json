{"cell_type":{"c64c5ce7":"code","dc0dddf6":"code","d953a409":"code","103d881b":"code","dc1e0dc5":"code","c2c40ad2":"code","ad9807d2":"code","7c8e8841":"code","e2357d70":"code","1c3c0e6e":"code","79143a71":"code","ae3a8355":"code","bd10c4ac":"code","1ed28645":"code","60acf720":"code","579b19e9":"markdown","0878c0d0":"markdown","504489dd":"markdown","8f197905":"markdown","6cd755e9":"markdown","97cc604c":"markdown","8b7a0d95":"markdown","82111b9d":"markdown","735ba62c":"markdown","cd944a94":"markdown","7e69170c":"markdown","11089574":"markdown","618f9f5c":"markdown","9fcfb91d":"markdown","c82f272c":"markdown","67a05c51":"markdown"},"source":{"c64c5ce7":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import ensemble\nfrom sklearn.tree import DecisionTreeClassifier\nimport gc\nfrom imblearn.under_sampling import TomekLinks\nfrom sklearn.metrics import classification_report, accuracy_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.utils import resample\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nimport numpy as np\n# import pickle\nimport matplotlib.cm as cm\nimport seaborn as sn\nfrom collections import Counter\nimport lightgbm as lgb\n# from kmodes.kprototypes import KPrototypes\nimport gc\n# %reload_ext autotime","dc0dddf6":"dataset = pd.read_csv('..\/input\/customer-churn-dataset\/Churn_Modelling.csv')\nX = dataset.iloc[:, 3:-1].values\ny = dataset.iloc[:, -1].values","d953a409":"print(X)","103d881b":"print(y)","dc1e0dc5":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nX[:, 2] = le.fit_transform(X[:, 2])","c2c40ad2":"print(X)","ad9807d2":"from sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\nct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [1])], remainder='passthrough')\nX = np.array(ct.fit_transform(X))","7c8e8841":"print(X)","e2357d70":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)","1c3c0e6e":"from xgboost import XGBClassifier\nclassifier = XGBClassifier()\nclassifier.fit(X_train, y_train)","79143a71":"y_pred = classifier.predict(X_test)","ae3a8355":"print(classification_report(y_test, y_pred))\ncnf_matrix = confusion_matrix(y_test, y_pred)\n#print(cnf_matrix)\naccuracy_score(y_test, y_pred)","bd10c4ac":"def plot_confusion_matrix(cm, target_names, title='Confusion matrix', cmap=plt.cm.summer):\n    plt.clf\n    plt.imshow(cm, interpolation='nearest')\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(target_names))\n    plt.xticks(tick_marks, target_names, rotation=45)\n    plt.yticks(tick_marks, target_names)\n    plt.tight_layout()\n \n    width, height = cm.shape\n \n    for x in range(width):\n        for y in range(height):\n            plt.annotate(str(cm[x][y]), xy=(y, x), \n                        horizontalalignment='center',\n                        verticalalignment='center',color='black',fontsize=22)\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')","1ed28645":"plot_confusion_matrix(cnf_matrix, np.unique(y_pred))","60acf720":"from sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(estimator = classifier, X = X_train, y = y_train, cv = 10)\nprint(\"Accuracy: {:.2f} %\".format(accuracies.mean()*100))\nprint(\"Standard Deviation: {:.2f} %\".format(accuracies.std()*100))","579b19e9":"So thats conclude the **Customer Churn Model with XGBoost**. Please add if i missed something and correct me if there is any mistake.","0878c0d0":"**One Hot Encoding the \"Geography\" column**","504489dd":"There are 2 column that would have no impact in traing data and these column are **RowNumber** and **CustomerId**. As **RowNumber** is used to assign incremental number to the customer and **CustomerId** used to uniquely identify the customer. Both these column have been dropped from dataset.","8f197905":"# Encoding categorical data","6cd755e9":"# Customer Churn Model using XGBoost","97cc604c":"# Making the Confusion Matrix","8b7a0d95":"In **Geography column** we have multiple values appearing like **Spain**, **France** and **Germany**. We have to apply **OneHotEncoding** on this column. It will split **Geogrpahy Column** into 3 column with 0,1 representation for all categories appearing in **Geography Column**.","82111b9d":"# Importing the Dataset","735ba62c":"**Label Encoding the \"Gender\" column**","cd944a94":"# Training XGBoost on the Training set","7e69170c":"# Predicting the Test set results","11089574":"# Importing the Libraries","618f9f5c":"# Splitting the dataset into the Training set and Test set","9fcfb91d":"As you can see that in **Gender** column we have representation as **Male** and **Female**. We have to deal with this categorical column by applying label encodingthat will assign 0,1 value to **Female**, **Male** categories.","c82f272c":"# Dataset Details\n\nThe Data set we have here belongs to a Bank that wants to predict that which of their customer is going to **Churn**. Dataset have following columns.\n\n* **RowNumber:** Incremental Row Number for each Customer\n* **CustomerId:** Unique Customer id for each Customer\n* **Surname:** Customer Name\n* **Credit Score:** Each Customer Credit Score\n* **Geography:** Location\n* **Gender:** Customer Gender\n* **Age:** Customer Age\n* **Tenure:** Customer Tenure\n* **Balance:** Customer balance\n* **NumofProducts:** No of products previosly Purchased by Customer\n* **HasCrCard:** Credit Card indicator. 1 Means has Credit Card 0 Means does not have any Credit Card\n* **IsActiveMember:** Active Member Indicator. 1 Means Active 0 Means InActive\n* **EstimatedSalary:** Customer Estimated Salary. \n* **Exited:** Target Variable, that represents either customer exit or not. 1 Means Leave the Bank and 0 Means will remain the customer.\n\nThats a **Classification** problem and we are going to use **XGBoost** for this model.","67a05c51":"# Applying k-Fold Cross Validation"}}