{"cell_type":{"f4d28f0a":"code","0eb530b8":"code","3c6a32b5":"code","62d3d45d":"code","7c4ec149":"code","35a85012":"code","23e86bb6":"code","bd23ce41":"code","bb398ba1":"code","4f8ffb6b":"code","07d4a787":"code","ab751f49":"code","5cb39301":"code","5f7dab3e":"code","cf3a2ff9":"code","f8c3cea8":"code","594f103e":"code","fdb27e35":"code","341fdcc9":"code","46cbd619":"code","cee2c279":"code","1ad04a43":"code","4cd4b19f":"code","7cdd7d9a":"code","bbd00e94":"code","18d366ff":"code","10b24620":"code","f3131c74":"code","8954f97b":"code","dcd4f12c":"code","f52cfa5b":"code","ab809722":"code","dbd0d48a":"code","341998d3":"code","b5b3c285":"code","874f0e9a":"code","adedd5ba":"code","060537c9":"code","587278bf":"code","aac8ee61":"code","823c7b1a":"code","021457a8":"code","87ffb2d4":"code","1778af89":"code","02db3b92":"code","2c67a8d5":"code","b454171c":"code","44f2353b":"code","9e47fbff":"code","6d6e3548":"code","612ed395":"code","aa134910":"code","444388ee":"code","0b57994a":"code","839e1a96":"code","92f9cdc7":"code","6724015f":"code","94134fe2":"code","0f80700e":"code","896c8600":"code","ffa6eabf":"code","0cdbb733":"code","b346c81a":"code","eaebad0b":"code","a902763b":"code","4a4ad714":"code","84498be4":"code","ea10a961":"code","f5e2d105":"code","285abe61":"code","c5d80ea4":"code","144b9e1b":"code","90af1e86":"code","ece3dd66":"code","4f32e33d":"code","38042099":"code","55a7ff25":"code","69ff22d8":"code","e4b25837":"code","bdbe826a":"code","846e9ca0":"code","f3038b4e":"code","bc52997f":"code","61bafb18":"code","68aa92b8":"code","c170df25":"code","4401ea66":"code","01ecf71c":"code","35638f5a":"code","6a06ead0":"code","75a7b03c":"code","12c4a6ee":"code","9b23c017":"code","3701ac85":"code","637ca516":"code","eaffc1cb":"code","d8fd63cc":"code","e367dd28":"code","67ba31ce":"code","801ea695":"code","d543a13e":"code","882d10ef":"code","e57e0b43":"code","9286a20c":"code","9b3bfe04":"code","06658c91":"code","eab85daf":"code","7ff1514e":"code","a7a364a0":"code","3eeb27b9":"code","1532a9f6":"code","99204174":"code","b7cd3dc3":"code","946d9c6c":"code","b31d8b2e":"code","4029604e":"code","7cf65d2a":"markdown","144b9015":"markdown","bf456fe0":"markdown","8f509e91":"markdown","6145eaf9":"markdown","c7472777":"markdown","bb0566df":"markdown","e165eed5":"markdown","d23c4d9b":"markdown","c07b5017":"markdown","44fbe6cd":"markdown","af6813ea":"markdown","d9d4c949":"markdown","0f0a08b9":"markdown","44c4e9f3":"markdown","0c42fc98":"markdown","a91d543c":"markdown","0544a2f4":"markdown","df48e15a":"markdown","95c4cc77":"markdown","b0f5c06e":"markdown","28990653":"markdown","b955ffec":"markdown","2dee725e":"markdown","baab4e42":"markdown","a3e4e15e":"markdown","dcb1a78c":"markdown","1e53415b":"markdown","aac880f3":"markdown","7db3be9c":"markdown","b4c1c108":"markdown","c5953e1b":"markdown","8a1d7209":"markdown","41c1aaef":"markdown","ee7a2ed0":"markdown","80b71726":"markdown","e14b1c89":"markdown","3bf04f2f":"markdown","954352cb":"markdown","b8ca327d":"markdown","c05c61c6":"markdown","b57a8ee9":"markdown","3171c6d4":"markdown","06ac11cf":"markdown","fa8e7fa6":"markdown","6a2c2e28":"markdown","9902ea68":"markdown","16662712":"markdown","a6197198":"markdown","ba7047d5":"markdown","5e27d07a":"markdown","c897e9dd":"markdown","3437bdc4":"markdown","fa9a8684":"markdown","d8eccfa9":"markdown","0a284a5c":"markdown","c844b7d4":"markdown","d1c7587a":"markdown","35178e85":"markdown","97c578ce":"markdown","858f2b99":"markdown","2e8fd1b8":"markdown","79c9c517":"markdown","d0391526":"markdown","83a60ca8":"markdown","e867f412":"markdown","9b006cb5":"markdown","6ee4456f":"markdown","8837a87f":"markdown","98f20940":"markdown"},"source":{"f4d28f0a":"%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport scipy as sp\nfrom scipy import stats\nfrom matplotlib import pyplot as plt\nimport seaborn as sns","0eb530b8":"# \u6ce8\u610f\u672c\u673a\u7ec3\u4e60\u65f6\u6700\u597d\u4e0ekaggle\u4fdd\u6301\u7248\u672c\u4e00\u81f4\uff0c\u4ee5\u9632\u6c34\u571f\u4e0d\u670d\u3002\nimport sys\nprint(sys.version)\nprint(np.__version__)\nprint(pd.__version__)\nprint(sp.__version__)","3c6a32b5":"df_train = pd.read_csv(\"..\/input\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/test.csv\")\ndf_allX = pd.concat([df_train.loc[:,'MSSubClass':'SaleCondition'],\n                   df_test.loc[:,'MSSubClass':'SaleCondition']])\ndf_allX = df_allX.reset_index(drop=True)","62d3d45d":"print(df_train.shape,df_test.shape,df_allX.shape) # df_allX \u5c11\u4e86 Id \u548c SalePrice \u4e24\u5217","7c4ec149":"df_train.describe()","35a85012":"# \u6570\u503c\u91cf\u7279\u5f81\nfeats_numeric  = df_allX.dtypes[df_allX.dtypes != \"object\"].index.values\n#feats_numeric = [attr for attr in df_allX.columns if df_allX.dtypes[attr] != 'object']\n\n# \u5b57\u7b26\u91cf\u7279\u5f81\nfeats_object = df_allX.dtypes[df_allX.dtypes == \"object\"].index.values\n#feats_object = [attr for attr in df_allX.columns if df_allX.dtypes[attr] == 'object']\n#feats_object = df_train.select_dtypes(include = [\"object\"]).columns\n\nprint(feats_numeric.shape,feats_object.shape)","23e86bb6":"# \u79bb\u6563\u7684\u6570\u503c\u91cf\uff0c\u9700\u8981\u4eba\u5de5\u7504\u522b\nfeats_numeric_discrete  = ['MSSubClass','OverallQual','OverallCond'] # \u6237\u578b\u3001\u6574\u4f53\u8d28\u91cf\u6253\u5206\u3001\u6574\u4f53\u6761\u4ef6\u6253\u5206 \u2014\u2014 \u6587\u6863\u4e2d\u660e\u786e\u5b9a\u4e49\u7684\u7c7b\u578b\u91cf\nfeats_numeric_discrete += ['TotRmsAbvGrd','KitchenAbvGr','BedroomAbvGr','GarageCars','Fireplaces'] # \u623f\u95f4\u6570\u91cf\nfeats_numeric_discrete += ['FullBath','HalfBath','BsmtHalfBath','BsmtFullBath'] # \u5916\u56fd\u4eba\u8fd9\u4e48\u7231\u6d17\u6fa1\uff1f\u641e\u8fd9\u4e48\u591a\u6d74\u5ba4\nfeats_numeric_discrete += ['MoSold','YrSold'] # \u5e74\u3001\u6708\uff0c\u8fd9\u4e9b\u4e0d\u770b\u6210\u79bb\u6563\u7684\u5e94\u8be5\u4e5f\u884c\n\n# \u8fde\u7eed\u578b\u7279\u5f81\nfeats_continu = feats_numeric.copy()\n# \u79bb\u6563\u578b\u7279\u5f81\nfeats_discrete = feats_object.copy()\n\nfor f in feats_numeric_discrete:\n    feats_continu = np.delete(feats_continu,np.where(feats_continu == f))\n    feats_discrete = np.append(feats_discrete,f)\n\nprint(feats_continu.shape,feats_discrete.shape)","bd23ce41":"def plotfeats(frame,feats,kind,cols=4):\n    \"\"\"\u6279\u91cf\u7ed8\u56fe\u51fd\u6570\u3002\n    \n    Parameters\n    ----------\n    frame : pandas.DataFrame\n        \u5f85\u7ed8\u56fe\u7684\u6570\u636e\n    \n    feats : list \u6216 numpy.array\n        \u5f85\u7ed8\u56fe\u7684\u5217\u540d\u79f0\n        \n    kind : str\n        \u7ed8\u56fe\u683c\u5f0f\uff1a'hist'-\u76f4\u65b9\u56fe\uff1b'scatter'-\u6563\u70b9\u56fe\uff1b'hs'-\u76f4\u65b9\u56fe\u548c\u6563\u70b9\u56fe\u9694\u884c\u4ea4\u66ff\uff1b'box'-\u7bb1\u7ebf\u56fe\uff0c\u6bcf\u4e2afeat\u4e00\u5e45\u56fe\uff1b'boxp'-Price\u505a\u7eb5\u8f74\uff0cfeat\u505a\u6a2a\u8f74\u7684\u7bb1\u7ebf\u56fe\u3002\n        \n    cols : int\n        \u6bcf\u884c\u7ed8\u5236\u51e0\u5e45\u56fe\n    \n    Returns\n    -------\n    None\n    \"\"\"\n    rows = int(np.ceil((len(feats))\/cols))\n    if rows==1 and len(feats)<cols:\n        cols = len(feats)\n    #print(\"\u8f93\u5165%d\u4e2a\u7279\u5f81\uff0c\u5206%d\u884c\u3001%d\u5217\u7ed8\u56fe\" % (len(feats), rows, cols))\n    if kind == 'hs': #hs:hist and scatter\n        fig, axes = plt.subplots(nrows=rows*2,ncols=cols,figsize=(cols*5,rows*10))\n    else:\n        fig, axes = plt.subplots(nrows=rows,ncols=cols,figsize=(cols*5,rows*5))\n        if rows==1 and cols==1:\n            axes = np.array([axes])\n        axes = axes.reshape(rows,cols) # \u5f53 rows=1 \u65f6\uff0caxes.shape:(cols,)\uff0c\u9700\u8981reshape\u4e00\u4e0b\n    i=0\n    for f in feats:\n        #print(int(i\/cols),i%cols)\n        if kind == 'hist':\n            #frame.hist(f,bins=100,ax=axes[int(i\/cols),i%cols])\n            frame.plot.hist(y=f,bins=100,ax=axes[int(i\/cols),i%cols])\n        elif kind == 'scatter':\n            frame.plot.scatter(x=f,y='SalePrice',ylim=(0,800000), ax=axes[int(i\/cols),i%cols])\n        elif kind == 'hs':\n            frame.plot.hist(y=f,bins=100,ax=axes[int(i\/cols)*2,i%cols])\n            frame.plot.scatter(x=f,y='SalePrice',ylim=(0,800000), ax=axes[int(i\/cols)*2+1,i%cols])\n        elif kind == 'box':\n            frame.plot.box(y=f,ax=axes[int(i\/cols),i%cols])\n        elif kind == 'boxp':\n            sns.boxplot(x=f,y='SalePrice', data=frame, ax=axes[int(i\/cols),i%cols])\n        i += 1\n    plt.show()","bb398ba1":"plotfeats(df_train,feats_continu,kind='scatter',cols=6)","4f8ffb6b":"plotfeats(df_train,feats_numeric_discrete,kind='scatter',cols=6)","07d4a787":"# SalePrice \u7684\u504f\u79bb\u5ea6\ndf_train.skew()['SalePrice']","ab751f49":"#df_train.plot(kind='hist',y='SalePrice',bins=100)\ndf_train['SalePrice'].plot(kind='hist',y='SalePrice',bins=100) # \u4e3a\u4e86\u548c\u4e0b\u9762\u7684\u56fe\u505a\u5bf9\u6bd4\u624d\u4f7f\u7528\u8fd9\u884c\u7684\n#sns.distplot(df_train['SalePrice'], fit='norm');\n#plt.hist(df_train['SalePrice'],bins=100)","5cb39301":"stats.probplot(df_train['SalePrice'], plot=plt)","5f7dab3e":"df_train['SalePrice'].apply(lambda x: np.log1p(x)).plot(kind='hist',y='SalePrice',bins=100)","cf3a2ff9":"# \u8ba1\u7b97\u5404\u5217\u81ea\u5df1\u7684\u504f\u79bb\u5ea6\nskewed = df_allX[feats_numeric].apply(lambda x: stats.skew(x.dropna())).sort_values(ascending=False)\n#skewed = df_allX[feats_numeric].skew().sort_values(ascending=False)\nskewed[:10]","f8c3cea8":"# \u7528\u76f4\u65b9\u56fe\u548c\u6563\u70b9\u56fe\uff08SalePrice\u4e4b\u95f4\uff09\u5bf9\u6bd4\u5c55\u793a\u504f\u79bb\u5ea6\nplotfeats(df_train,skewed[:6].index,kind='hs',cols=6)","594f103e":"df_train.kurt()['SalePrice']","fdb27e35":"# \u8ba1\u7b97\u5404\u5217\u81ea\u5df1\u7684\u5cf0\u5ea6\nkurted = df_allX[feats_numeric].kurt().sort_values(ascending=False)\nkurted[:10]","341fdcc9":"# \u7528\u76f4\u65b9\u56fe\u548c\u6563\u70b9\u56fe\uff08SalePrice\u4e4b\u95f4\uff09\u5bf9\u6bd4\u5c55\u793a\u5cf0\u5ea6\nplotfeats(df_train,kurted[:6].index,kind='hs',cols=6)","46cbd619":"plotfeats(df_train,feats_numeric,kind='box',cols=6)","cee2c279":"# \u7531\u4e8e\u6ca1\u6709\u6807\u51c6\u5316\uff0c\u6bd4\u4f8b\u5c3a\u5dee\u5f02\u5de8\u5927\uff0c\u6b64\u5904\u7684\u7ed8\u56fe\u4e0d\u5177\u53c2\u8003\u610f\u4e49\uff0c\u5f85\u6807\u51c6\u5316\u540e\u7684\u6570\u636e\u624d\u53ef\u4ee5\n\nplt.figure(figsize=(16,10))\n\nplt.subplot(121)\nsns.boxplot(data=df_allX[feats_continu],orient=\"h\")\n\nplt.subplot(122)\nsns.boxplot(data=df_allX[feats_discrete],orient=\"h\")","1ad04a43":"plotfeats(df_train, ['OverallQual'], kind='boxp', cols=6)","4cd4b19f":"plotfeats(df_train, feats_numeric_discrete, kind='boxp', cols=6)","7cdd7d9a":"plotfeats(df_train, feats_object, kind='boxp', cols=6)","bbd00e94":"a = np.random.random(size=(1000,))\nb = np.random.random(size=1000,)\nf,p = stats.f_oneway(a, b)\nprint(f,p)","18d366ff":"a = np.random.randn(1000,)\nb = np.random.randn(1000,)\nf,p = stats.f_oneway(a, b)\nprint(f,p)","10b24620":"a = np.random.randint(1,10,size=1000,)\nb = np.random.randint(1,10,size=1000,)\nf,p = stats.f_oneway(a, b)\nprint(f,p)","f3131c74":"a = np.random.randint(1,10,size=1000,)\nb = np.random.randint(5,15,size=1000,)\nf,p = stats.f_oneway(a, b)\nprint(f,p)","8954f97b":"a = np.random.binomial(5,0.2,size=1000)\nb = np.random.randn(1000,)\nf,p = stats.f_oneway(a, b)\nprint(f,p)","dcd4f12c":"# stats.f_oneway() \u7684\u5165\u53c2\u662f\u5206\u597d\u7ec4\u7684\u591a\u4e2aarray \n# \u672c\u4f8b\u5c062\u5217\u6570\u636e(\u81ea\u53d8\u91cfX\u3001\u56e0\u53d8\u91cfY)\u7684dataframe\u8f6c\u6362\u4e3a\u5206\u7ec4\u6570\u636e\ndef anovaXY(data):\n    samples = []\n    X = data.columns[0]\n    Y = data.columns[1]\n    for level in data[X].unique():\n        if (type(level) == float): # np.NaN \u7684\u7279\u6b8a\u5904\u7406\n            s = data[data[X].isnull()][Y].values\n        else:\n            s = data[data[X] == level][Y].values\n        samples.append(s)\n    f,p = stats.f_oneway(*samples) # \u4e5f\u80fd\u7528\u6307\u9488\uff1f\n    return (f,p)","f52cfa5b":"df = pd.DataFrame(columns=('feature','f','p','logp'))\ndf['feature'] = feats_discrete\nfor fe in feats_discrete:\n    data = pd.concat([df_train[fe],df_train['SalePrice']],axis=1)\n    f,p = anovaXY(data)\n    df.loc[df[df.feature==fe].index,'f'] = f\n    df.loc[df[df.feature==fe].index,'p'] = p\n    df.loc[df[df.feature==fe].index,'logp'] = 1000 if (p==0) else np.log(1.\/p)\n\n# OverallQual \u7684 p=0\uff0c\u8bf4\u660e\u623f\u4ef7\u548c\u6574\u4f53\u8bc4\u4ef7\u7d27\u5bc6\u76f8\u5173","ab809722":"plt.figure(figsize=(10,4))\nsns.barplot(data=df.sort_values('p'), x='feature', y='logp')\nplt.xticks(rotation=90)","dbd0d48a":"def spearman(frame, features):\n    '''\n    \u91c7\u7528\u201c\u65af\u76ae\u5c14\u66fc\u7b49\u7ea7\u76f8\u5173\u201d\u6765\u8ba1\u7b97\u53d8\u91cf\u4e0e\u623f\u4ef7\u7684\u76f8\u5173\u6027(\u53ef\u67e5\u9605\u767e\u79d1)\n    '''\n    spr = pd.DataFrame()\n    spr['feature'] = features\n    spr['corr'] = [frame[f].corr(frame['SalePrice'], 'spearman') for f in features] # \u6b64\u5904\u7528\u7684\u662f Series.corr() \n    spr = spr.sort_values('corr')\n    plt.figure(figsize=(6, 0.2*len(features)))\n    sns.barplot(data=spr, y='feature', x='corr', orient='h')    \n    plt.show()","341998d3":"spearman(df_train, np.delete(df_train.columns.values,-1))","b5b3c285":"corr_pearson = df_train.corr(method='pearson')\ncorr_spearman = df_train.corr(method='spearman')","874f0e9a":"# corrmat \u662f 38*38\u7684\u77e9\u9635\uff1a\u6240\u4ee5\u53ea\u662f numeric \u7684 feature \u624d\u4f1a\u53c2\u4e0e\u8ba1\u7b97\ncorr_pearson.shape","adedd5ba":"corr_spearman.shape","060537c9":"# \u5982\u679c\u4e0d\u8bbe\u7f6efigsize\uff0c\u4f1a\u51fa\u73b0\u90e8\u5206\u6570\u636e\u4e0d\u663e\u793a\u7684\u60c5\u51b5\n# \u5c31\u662f\u8bf4\u8981\u624b\u5de5\u8ba1\u7b97\u5145\u5206\u7684\u7a7a\u95f4\u7ed9sns.heatmap() \u2014\u2014 \u8fd9\u90fd\u662f\u5565bug\u554a\nplt.figure(figsize=(20, 20))\nplt.subplot(211)\nsns.heatmap(corr_pearson, vmax=.8, square=True);\nplt.subplot(212)\nsns.heatmap(corr_spearman, vmax=.8, square=True);","587278bf":"feats_d = corr_pearson.nlargest(8,'SalePrice').index\nfeats_d","aac8ee61":"sns.pairplot(df_train[feats_d],size=2.5)","823c7b1a":"feats_del = ['YrSold','MoSold']","021457a8":"df_allX.shape","87ffb2d4":"df_allX.drop(feats_del, axis=1, inplace=True)  # \u5feb\u610f\u6cef\u6069\u4ec7 \uff1a\uff09","1778af89":"# \u540c\u6b65\u4fee\u6b63\u4e00\u4e0b4\u4e2a\u7279\u5f81\u540d\u79f0\u96c6\nfor f in feats_del:\n    feats_numeric  = np.delete(feats_numeric,  np.where(feats_numeric  == f))\n    feats_object   = np.delete(feats_object,   np.where(feats_object   == f))\n    feats_continu  = np.delete(feats_continu,  np.where(feats_continu  == f))\n    feats_discrete = np.delete(feats_discrete, np.where(feats_discrete == f))","02db3b92":"df_allX.shape","2c67a8d5":"# \u7ecf\u8fc7\u524d\u9762\u504f\u79bb\u5ea6\u5206\u6790\uff0c\u53ef\u4ee5\u89c2\u5bdf\u5f97\u51fa\u4e0b\u9762\u51e0\u4e2afeature\u5b58\u5728\u79bb\u7fa4\u70b9\nfeats_away = ['LotFrontage','LotArea','BsmtFinSF1','BsmtFinSF2','1stFlrSF','GrLivArea','TotalBsmtSF']\nplotfeats(df_train,feats_away,kind='scatter')","b454171c":"ids = []","44f2353b":"df_train.sort_values(by = 'GrLivArea', ascending = False)[:2][['Id','GrLivArea','SalePrice']]\n# 1299 \u662f df_train \u4e2d\u7684 Id \u5217\uff0c 1298 \u5bf9\u5e94 df_allX \u4e2d\u7684 index","9e47fbff":"ids.append(1299)\nids.append(524)","6d6e3548":"df_train.sort_values(by = 'TotalBsmtSF', ascending = False)[:2][['Id','TotalBsmtSF','SalePrice']]\n# 1299 \u53c8\u51fa\u73b0\u4e86\uff0c\u770b\u6765\u63d0\u4f9b\u8fd9\u4e2a\u6570\u636e\u7684\u540c\u5b66\u662f\u4e0d\u662f\u6076\u4f5c\u5267\u554a\uff1f","612ed395":"df_train.sort_values(by = '1stFlrSF', ascending = False)[:2][['Id','1stFlrSF','SalePrice']]","aa134910":"df_train.sort_values(by = 'BsmtFinSF1', ascending = False)[:2][['Id','BsmtFinSF1','SalePrice']]\n# \u5168\u90e8\u6307\u5411 1299\uff0c\u6b64\u884c\u6570\u636e\u5fc5\u987b\u9664\u4e4b","444388ee":"df_train.sort_values(by = 'LotArea', ascending = False)[:3][['Id','LotArea','SalePrice']]","0b57994a":"ids.append(314)\nids.append(335)\nids.append(250)","839e1a96":"df_train.sort_values(by = 'LotFrontage', ascending = False)[:3][['Id','LotFrontage','SalePrice']]","92f9cdc7":"ids.append(1299)\nids.append(935)","6724015f":"np.unique(ids)","94134fe2":"print(df_train.shape,df_test.shape,df_allX.shape)","0f80700e":"for id in np.unique(ids):\n    df_train = df_train.drop(df_train[df_train.Id==id].index)\n    df_allX = df_allX.drop(df_allX[df_allX.index==(id-1)].index)","896c8600":"print(df_train.shape,df_test.shape,df_allX.shape)","ffa6eabf":"# Python \u4e2d NaN \u7684\u7c7b\u578b\uff1a\nprint(type(None),type(np.NaN))","0cdbb733":"def NaNRatio(frame,feats):    \n    \"\"\"\n    \u67e5\u627e\u5e76\u7edf\u8ba1 numpy.NaN \u7684\u503c, feats \u53ef\u4ee5\u662f\u6570\u503c\u578b or \u5b57\u7b26\u578b\u7279\u5f81\n    \"\"\"\n    na_count = frame[feats].isnull().sum().sort_values(ascending=False)\n    na_rate = na_count \/ len(frame)\n    na_data = pd.concat([na_count,na_rate],axis=1,keys=['count','ratio'])\n    return na_data[na_data['count']>0]","b346c81a":"def NARatio(frame,feats):\n    \"\"\"\n    \u67e5\u627e\u5e76\u7edf\u8ba1\u5b57\u7b26\u4e32 NA \u7684\u503c\n    \"\"\"\n    nadict={}\n    for c in feats:        \n        # \u65b9\u6cd51\uff1a\n        # frame[f][frame[f]=='NA'] \u2014\u2014 \u95ee\u9898\u662f\u8fd9\u79cd\u65b9\u6cd5\u53ea\u80fd\u6bd4\u8f83 object \u5217\uff0cnumeric\u5217\u4f1a\u62a5\u9519        \n        # \u65b9\u6cd52\uff1a\n        for r in frame.index:\n            if 'NA'==frame.loc[r,c]:\n                if 0==nadict.get(c,0):\n                    nadict[c]=[]\n                nadict[c].append(r)\n    return nadict","eaebad0b":"def transNaNtoNumber(frame, column, method, val=0):\n    \"\"\"\n    \u5c06 numpy.NaN \u8f6c\u4e3a\u6307\u5b9a\u7684\u6570\u5b57\n    \"\"\"\n    if method == 'mean':\n        frame[column] = frame[column].fillna(round(frame[column].mean()))\n    elif method == 'min':\n        frame[column] = frame[column].fillna(round(frame[column].min()))\n    elif method == 'max':\n        frame[column] = frame[column].fillna(round(frame[column].max()))\n    elif method == 'special':\n        frame[column] = frame[column].fillna(val).round()\n    else:\n        return\n    return frame","a902763b":"def transNaNtoNA(frame, feature):\n    \"\"\"\n    \u5c06 numpy.NaN \u8f6c\u4e3a\u5b57\u7b26\u4e32 NA\n    \"\"\"\n    # frame[feature][df[feature].isnull()] = 'NA' # \u8fd9\u4e48\u5199\u6709warnning\n    frame.loc[frame[feature].isnull(),feature] = 'NA'","4a4ad714":"def transNAtoNumber(frame,feat,val=0):\n    \"\"\"\n    \u5c06\u5b57\u7b26\u4e32 NA \u66ff\u6362\u4e3a\u6307\u5b9a\u6570\u503c\uff08\u9ed8\u8ba40\uff09\n    \"\"\"\n    for r in frame[frame[feat]=='NA'].index:\n        frame.loc[r,feat] = val\n    return frame","84498be4":"# \u67e5\u770b\u6570\u503c\u578b\u7279\u5f81\u7684 NA \u503c\u7684\u6570\u91cf\u548c\u6bd4\u4f8b\npd.concat([NaNRatio(df_train,feats_numeric),NaNRatio(df_test,feats_numeric)],axis=1,sort=True)","ea10a961":"#LotFrontage\uff1a\u5230\u8857\u9053\u7684\u8ddd\u79bb\uff1a\u53d6\u5e73\u5747\u503c\ndf_allX = transNaNtoNumber(df_allX,'LotFrontage','mean') \n\n#GarageYrBlt\uff1a\u8f66\u5e93\u7684\u5efa\u9020\u5e74\u4efd\uff1a\u56e0\u4e3a\u6ca1\u6709\u8f66\u5e93\u624d\u6ca1\u6709\u5e74\u4efd\uff0c\u6240\u4ee5\u4e0d\u80fd\u53d6\u5e73\u5747\u503c\uff0c\u6682\u53d6\u6700\u5c0f\u503c\ndf_allX = transNaNtoNumber(df_allX,'GarageYrBlt','min')\n\n#MasVnrArea\uff1a\u780c\u5899\u9762\u7684\u9762\u79ef\uff0c\u56e0\u4e3a\u6ca1\u6709\u780c\u5899\u624d\u5bfc\u81f4\u4e3a0\uff0c\u53d6\u6700\u5c0f\u503c\u66ff\u4ee3\ndf_allX = transNaNtoNumber(df_allX,'MasVnrArea','special',0)\n\n#\u5176\u4ed6\uff1a\u6bd4\u4f8b\u8f83\u5c0f\uff0c\u7edf\u4e00\u7528mean\u66ff\u4ee3\ndf_allX = df_allX.fillna(df_allX.mean())","f5e2d105":"# df_allX \u4e2d\u7684\u6570\u503c\u578b\u7279\u5f81\u4e2d\u5df2\u6ca1\u6709 np.NaN\npd.concat([NaNRatio(df_allX,feats_numeric)],axis=1)","285abe61":"pd.concat([NaNRatio(df_train,feats_object),NaNRatio(df_test,feats_object)],axis=1,sort=True)","c5d80ea4":"for c in feats_object:\n    transNaNtoNA(df_allX,c)","144b9e1b":"# df_allX \u4e2d\u7684\u5b57\u7b26\u578b\u7279\u5f81\u4e2d\u5df2\u6ca1\u6709 np.NaN\nNaNRatio(df_allX,feats_object)","90af1e86":"df_allX[feats_numeric] = df_allX[feats_numeric].apply(lambda x:(x-x.mean())\/(x.std()))","ece3dd66":"plt.figure(figsize=(16,10))\n\nplt.subplot(121)\nsns.boxplot(data=df_allX[feats_continu],orient=\"h\")\n\nplt.subplot(122)\nsns.boxplot(data=df_allX[feats_discrete],orient=\"h\")","4f32e33d":"df_allX.shape","38042099":"#df_allX = pd.get_dummies(df_allX[feats_object], dummy_na=True)","55a7ff25":"df_allX.shape","69ff22d8":"def encode(frame, feature, targetfeature='SalePrice'):\n    ordering = pd.DataFrame()\n    # \u627e\u51fa\u6307\u5b9a\u7279\u5f81\u7684\u6c34\u5e73\u503c\uff0c\u5e76\u505a\u4e34\u65f6df\u7684\u7d22\u5f15\n    ordering['val'] = frame[feature].unique()\n    ordering.index = ordering.val\n    # \u6309\u5404\u6c34\u5e73\u5206\u7ec4\uff0c\u5e76\u6c42\u6bcf\u7ec4\u623f\u4ef7\u7684\u5747\u503c\n    ordering['price_mean'] = frame[[feature, targetfeature]].groupby(feature).mean()[targetfeature]\n    # \u6392\u5e8f\u5e76\u4e3aorder\u5217\u8d4b\u503c1\u30012\u30013\u3001\u2026\u2026\n    ordering = ordering.sort_values('price_mean')\n    ordering['order'] = range(1, ordering.shape[0]+1)\n    ordering = ordering['order'].to_dict()\n    return ordering","e4b25837":"encode(df_train,'BsmtCond') # numpy.NaN \u7684\u5904\u7406\u4e0d\u662f\u6240\u5e0c\u671b\u7684","bdbe826a":"dfc = df_train.copy()\ntransNaNtoNA(dfc,'BsmtCond') # \u628a NaN \u8f6c\u4e3a 'NA'\nencode(dfc,'BsmtCond') # \u5b57\u7b26\u4e32 NA \u80fd\u591f\u6b63\u786e\u5904\u7406","846e9ca0":"# \u8f6c\u524d\u7559\u8bc1\ndf_allX.loc[20:30,'Alley'] ","f3038b4e":"dfc = df_train.copy()\n\nfor fb in feats_object:\n    print(\"\\r\\n-----\\r\\n\",fb,end=':')\n    transNaNtoNA(dfc,fb)\n    for attr_v, score in encode(dfc,fb).items():\n        print(attr_v,score,end='\\t')\n        df_allX.loc[df_allX[fb] == attr_v, fb] = score        ","bc52997f":"# \u8f6c\u540e\u9a8c\u8bc1\ndf_allX.loc[20:30,'Alley'] ","61bafb18":"# \u68c0\u67e5\u4e00\u904d\u662f\u5426\u8fd8\u6709 numpy.NaN\nNaNRatio(df_allX,df_allX.columns.values)","68aa92b8":"# \u68c0\u67e5\u4e00\u904d\u662f\u5426\u8fd8\u6709 'NA'\nstillNA = NARatio(df_allX,df_allX.columns.values)\nstillNA","c170df25":"df_allX.loc[1914:1916,'MSZoning'] #\u679c\u7136\u6709","4401ea66":"df_allX[['MSZoning','OverallQual']][df_allX['MSZoning']=='NA']","01ecf71c":"dftemp = df_allX.copy()\nfor sn in stillNA.keys():\n    dftemp  = transNAtoNumber(dftemp,sn)\n    df_allX = transNAtoNumber(df_allX,sn,dftemp[sn].mean())","35638f5a":"df_allX.loc[1914:1916,'MSZoning']","6a06ead0":"NARatio(df_allX,df_allX.columns.values)","75a7b03c":"def get_rmse_log(net, X_train, y_train):\n    num_train = X_train.shape[0]\n    clipped_preds = nd.clip(net(X_train),1,float('inf'))\n    return np.sqrt( 2 * nd.sum(square_loss(nd.log(clipped_preds), nd.log(y_train))).asscalar()\/num_train)","12c4a6ee":"import mxnet\nprint(mxnet.__version__)","9b23c017":"from mxnet import nd, autograd, gluon","3701ac85":"num_train = df_train.shape[0]\nX_train = nd.array(df_allX[:num_train])\nX_test  = nd.array(df_allX[num_train:].values)\ny_train = nd.array(df_train.SalePrice.values)","637ca516":"square_loss = gluon.loss.L2Loss()","eaffc1cb":"def get_net(units=128, dropout=0.1):\n    net = gluon.nn.Sequential()\n    with net.name_scope():  \n        if units != 0:\n            net.add(gluon.nn.Dense(units, activation='relu'))\n        if dropout != 0:\n            net.add(gluon.nn.Dropout(dropout))\n        net.add(gluon.nn.Dense(1))\n    net.initialize()\n    return net","d8fd63cc":"def train(net, X_train, y_train, X_test, y_test, epochs, learning_rate, weight_decay):\n    train_loss = []\n    if X_test is not None:\n        test_loss = []\n    batch_size = 100\n    dataset_train = gluon.data.ArrayDataset(X_train, y_train)\n    data_iter_train = gluon.data.DataLoader(dataset_train, batch_size,shuffle=True)\n    trainer = gluon.Trainer(net.collect_params(), 'adam',\n                            {'learning_rate': learning_rate,\n                             'wd': weight_decay})\n    net.collect_params().initialize(force_reinit=True)\n    for epoch in range(epochs):\n        for data, label in data_iter_train:\n            with autograd.record():\n                output = net(data)\n                loss = square_loss(output, label) \n            loss.backward()\n            trainer.step(batch_size)\n\n        # \u8bad\u7ec3\u7528 L2Loss\uff0c\u753b\u56fe\u548c\u8fd4\u56de\u7528 RMSE Loss\n        train_loss.append(get_rmse_log(net, X_train, y_train))\n        if X_test is not None:\n            test_loss.append(get_rmse_log(net, X_test, y_test))\n\n        \n    # \u8fd4\u56de\u7684\u662f epochs \u4e2a\u8fc7\u7a0b loss\n    if X_test is not None:\n        return train_loss, test_loss\n    else:\n        return train_loss","e367dd28":"import torch\nprint(torch.__version__)","67ba31ce":"from torch import nn, autograd as ag, optim","801ea695":"# \u5f85\u8865\u5145","d543a13e":"import tensorflow as tf\nprint(tf.__version__)","882d10ef":"# \u5f85\u8865\u5145","e57e0b43":"# \u5f85\u8865\u5145","9286a20c":"def k_fold_cross_valid(k, epochs, X_train, y_train, learning_rate, weight_decay, units=128, dropout=0.1, savejpg=False):\n    assert k > 1\n    fold_size = X_train.shape[0] \/\/ k\n    train_loss_sum = 0.0\n    test_loss_sum = 0.0\n    train_loss_std_sum = 0.0\n    test_loss_std_sum = 0.0\n\n    cols = k\n    rows = int(np.ceil(k\/cols))\n    fig, axes = plt.subplots(nrows=rows,ncols=cols,figsize=(cols*5,rows*5))\n        \n    for test_i in range(k):\n        X_val_test = X_train[test_i * fold_size: (test_i + 1) * fold_size, :]\n        y_val_test = y_train[test_i * fold_size: (test_i + 1) * fold_size]\n\n        val_train_defined = False\n        for i in range(k):\n            if i != test_i:\n                X_cur_fold = X_train[i * fold_size: (i + 1) * fold_size, :]\n                y_cur_fold = y_train[i * fold_size: (i + 1) * fold_size]\n                if not val_train_defined:\n                    X_val_train = X_cur_fold\n                    y_val_train = y_cur_fold\n                    val_train_defined = True\n                else:\n                    X_val_train = nd.concat(X_val_train, X_cur_fold, dim=0)\n                    y_val_train = nd.concat(y_val_train, y_cur_fold, dim=0)\n        \n        net = get_net(units=units, dropout=dropout)\n        train_loss, test_loss = train(\n            net, X_val_train, y_val_train, X_val_test, y_val_test, \n            epochs, learning_rate, weight_decay)        \n        print(\"%d-fold \\tTrain loss:%f \\tTest loss: %f\" % (test_i+1, train_loss[-1], test_loss[-1]))\n        \n        axes[test_i%cols].plot(train_loss, label='train')\n        axes[test_i%cols].plot(test_loss, label='test')\n        \n        train_loss_sum += np.mean(train_loss[-10:])\n        test_loss_sum += np.mean(test_loss[-10:])\n        \n        train_loss_std_sum += np.std(train_loss[10:])\n        test_loss_std_sum  += np.std(test_loss[10:])\n    \n    print(\"%d-fold Avg: train loss: %f, Avg test loss: %f, Avg train lost std: %f, Avg test lost std: %f\" % \n          (k, train_loss_sum\/k, test_loss_sum\/k, train_loss_std_sum\/k, test_loss_std_sum\/k))\n\n    if savejpg:\n        #plt.savefig(\"~\/house-prices\/%d-%d-%.3f-%d-%d-%.3f.jpg\" %(k,epochs,learning_rate,weight_decay,units,dropout))\n        plt.close()\n    else:\n        plt.show()\n        \n    return train_loss_sum \/ k, test_loss_sum \/ k, train_loss_std_sum \/ k, test_loss_std_sum \/k","9b3bfe04":"# \u4e0b\u9762\u5148\u6839\u636e\u7ecf\u9a8c\u8d4b\u503c\u4e00\u7ec4\u6570\u636e\uff0c\u9a8c\u8bc1\u4e0a\u9762\u6a21\u578b\u548c\u7b97\u6cd5\u7684\u53ef\u884c\u6027\n\nk=5\nepochs=50\nlearning_rate=5\nweight_decay=0\nunits=0\ndropout=0\n\ntrain_avg_loss, test_avg_loss, train_avg_loss_std, test_avg_loss_std = k_fold_cross_valid(\n    k, epochs, X_train, y_train, learning_rate, weight_decay, units, dropout, savejpg=False)","06658c91":"# \u6392\u5217\u7ec4\u5408\ndef expand(mulcoldf, sigcoldf):\n    r = pd.DataFrame(columns=np.append(mulcoldf.columns.values, sigcoldf.columns.values))\n    for x in sigcoldf.values:\n        s = mulcoldf.copy()\n        s[sigcoldf.columns[0]] = x[0]\n        r = pd.concat([r,s])\n    return r\n\n# k,epochs,learning_rate,weight_decay,units,dropout\ndef get_params(k=[5],epochs=[50],learning_rate=[5,0.5],weight_decay=[0],units=[0,128],dropout=[0,0.01]):\n    p = pd.DataFrame()\n    p = expand(pd.DataFrame({'k':k}), pd.DataFrame({'epochs':epochs}))\n    p = expand(p, pd.DataFrame({'learning_rate':learning_rate}))\n    p = expand(p, pd.DataFrame({'weight_decay':weight_decay}))\n    p = expand(p, pd.DataFrame({'units':units}))\n    p = expand(p, pd.DataFrame({'dropout':dropout}))\n    return p.reset_index(drop=True)","eab85daf":"params = get_params(learning_rate=[0.1,0.5,1,2,3,4,5], weight_decay=[1,10,100,130,150,500], units=[64,128,256])\nparams[-5:]","7ff1514e":"# \u81ea\u5df1\u70bc\u4e39\u65f6\u6ce8\u610f\u5220\u9664\uff0c\u6211\u8fd9\u91cc\u4e3b\u8981\u4e3a\u4e86\u63d0\u4ea4 kaggle \u65b9\u4fbf\nparams = params[:8]","a7a364a0":"dfrult = pd.DataFrame(columns=('k','epochs','learning_rate','weight_decay','units','dropout','train_avg_loss','test_avg_loss','train_avg_loss_std','test_avg_loss_std'))\ni = 0\nfor param in params.values:\n    print(\"%s %d\" % (\"=\"*80,i))\n    i += 1\n    k,epochs,learning_rate,weight_decay,units,dropout = param.tolist()    \n    print(\"k-fold=%d,epochs=%d,learning_rate=%f,weight_decay=%f,units=%d,dropout=%d\" % (k,epochs,learning_rate,weight_decay,units,dropout))\n    \n    train_avg_loss, test_avg_loss, train_avg_loss_std, test_avg_loss_std = k_fold_cross_valid(k, epochs, X_train, y_train, learning_rate, weight_decay, units, dropout, savejpg=True)\n    \n    temp = pd.DataFrame([[k,epochs,learning_rate,weight_decay,units,dropout,train_avg_loss,test_avg_loss,train_avg_loss_std,test_avg_loss_std]],\n                columns=['k','epochs','learning_rate','weight_decay','units','dropout','train_avg_loss','test_avg_loss','train_avg_loss_std','test_avg_loss_std'])\n    dfrult = pd.concat([dfrult, temp])","3eeb27b9":"df = dfrult.copy()","1532a9f6":"df[:5]","99204174":"df['diff'] = df['test_avg_loss'] - df['train_avg_loss']\ndf['sum'] = df['test_avg_loss'] + df['train_avg_loss']\ndf = df.sort_values('sum').reset_index(drop=True)\ndf[:5]","b7cd3dc3":"# \u6807\u6746\ndf.loc[df['learning_rate']==0.1].loc[df['weight_decay']==130].loc[df['units']==128].loc[df['dropout']==0.01]","946d9c6c":"df[df['diff']<0.03][:5]","b31d8b2e":"def learn(epochs, X_train, y_train, test, learning_rate, weight_decay, units, dropout):\n    net = get_net(units=units, dropout=dropout)\n    train_loss = train(net, X_train, y_train, None, None, epochs, learning_rate, weight_decay)\n    plt.plot(train_loss)\n    plt.show()\n    print(\"train loss last 10 data avg: %f\" % np.mean(train_loss[-10:]))\n    preds = net(X_test).asnumpy()\n    test['SalePrice'] = pd.Series(preds.reshape(1, -1)[0])\n    submission = pd.concat([test['Id'], test['SalePrice']], axis=1)\n    submission.to_csv('submission.csv', index=False)","4029604e":"# \u9009\u51fa\u90a3\u7c92\u4e39\u836f\n#k,epochs,learning_rate,weight_decay,units,dropout = (5,50,0.1,130,128,0.01)\nk,epochs,learning_rate,weight_decay,units,dropout = df.iloc[0][0:6]\nprint(\"k-fold=%d,epochs=%d,learning_rate=%f,weight_decay=%f,units=%d,dropout=%d\" % (k,epochs,learning_rate,weight_decay,units,dropout))\n\nlearn(epochs, X_train, y_train, df_test, learning_rate, weight_decay, units, dropout)","7cf65d2a":"#### \u4ee5SalePrice\u4e3a\u53c2\u8003\u7684\u6570\u636e","144b9015":"### \u5206\u7ec4-\u5747\u503c-\u6392\u5e8f\u6570\u503c\u5316\n\n* **\u4ee5SalePrice\u4e3a\u53c2\u8003\uff0c\u5c06\u67d0\u4e2a\u7279\u5f81\u6309\u6bcf\u4e2a\u79bb\u6563\u503c\u8ba1\u7b97SalePrice\u5bf9\u5e94\u7684\u5747\u503c\uff0c\u6392\u5e8f\u540e\u7ed9\u51fa1\u3001 2\u3001 3\u2026\u2026\u7b49\u6570\u503c**\n* **\u56e0\u4e3a\u9700\u8981SalePrice\u53c2\u4e0e\u8ba1\u7b97\uff0c\u6240\u4ee5\u9700\u8981 df_train \u8ba1\u7b97\uff0c\u7136\u540e\u5e94\u7528\u5230 df_allX \u4e0a**\n* **\u65f6\u523b\u8bb0\u4f4f\uff1a np.NaN \u548c 'NA' \u5b57\u7b26\u4e32\u7684\u533a\u522b**\n* **\u95ee\u9898\uff1a\u5982\u679c\u67d0\u4e2a\u7279\u5f81\u5728 df_train \u4e2d\u6ca1\u6709NA\uff0c\u4ec5\u5728 df_test \u4e2d\u6709NA\uff0c\u5219\u65e0\u6cd5\u5904\u7406**","bf456fe0":"**========= Test Over =========**","8f509e91":"\u597d\u5427\uff0c\u8be5\u5904\u7406\u4ed6\u4eec\u4e86\uff1a\n\nMSZoning: \u533a\u57df\u5212\u5206\uff1a\u519c\u4e1a\u3001\u5de5\u4e1a\u3001\u5546\u4e1a\u3001\u4f4f\u5b85\u9ad8\u3001\u4e2d\u3001\u4f4e\u3001\u82b1\u56ed\u5bc6\u5ea6\u533a  \n\u67e5\u770b\u4e86\u4e00\u4e0b\u5bf9\u5e94\u7684 OverallQual\uff08\u4e0e\u623f\u4ef7\u65b9\u5dee\u5206\u6790\u6700\u7d27\u5bc6\u5173\u8054\u7684\u7279\u5f81\uff09\u4e3a\uff1a  \n2\u3001 1\u3001 5\u3001 1 \u2014\u2014 \u5404\u79cd\u90fd\u6709  \n\n**\u6240\u4ee5\u8fd9\u91cc\u90fd\u53d6\u5e73\u5747\u503c\u5427**","6145eaf9":"### SalePrice \u7684\u5206\u6563\u5ea6","c7472777":"### TensorFlow","bb0566df":"\u6807\u51c6\u5316\u540e\u7684\u5206\u6563\u5ea6","e165eed5":"#### \u6ca1\u6709\u623f\u4ef7\u53ef\u505a\u57fa\u51c6\u7684\u6570\u636e\u5904\u7406\n\n\u4e2a\u522b\u7279\u5f81 train \u4e2d\u6ca1\u6709 NA\uff0ctest \u4e2d\u6709 NA\uff0c\u9700\u8981\u5355\u72ec\u5904\u7406","d23c4d9b":"## \u65b9\u5dee\u5206\u6790(bar)\n\nAnalysis of Variance\uff0c\u7b80\u79f0ANOVA,\u53c8\u79f0\u201c\u53d8\u5f02\u6570\u5206\u6790\u201d\u6216\u201cF\u68c0\u9a8c\u201d.\n\n**\u5b66\u4e60\u7b14\u8bb0\uff1a**\n\n* \u5206\u7c7b\n    * \u6309\u81ea\u53d8\u91cf\uff08\u5f71\u54cd\u5206\u6790\u6307\u6807\u7684\u56e0\u7d20\uff09\u7684\u4e2a\u6570\n        * \u5355\u56e0\u7d20\u65b9\u5dee\u5206\u6790\n        * \u53cc\u56e0\u7d20\u65b9\u5dee\u5206\u6790\n        * \u4e09\u56e0\u7d20\u65b9\u5dee\u5206\u6790\n    * \u6309\u56e0\u53d8\u91cf\uff08\u5206\u6790\u6307\u6807\u3001\u53c8\u79f0F\u7edf\u8ba1\u91cf\uff09\u7684\u4e2a\u6570\n        * \u4e00\u5143\u65b9\u5dee\u5206\u6790\uff08ANOVA - Analysis Of Variance\uff09\n        * \u534f\u65b9\u5dee\u5206\u6790\uff08ANCOVA - Analysis of Covariance\uff09\n        * \u591a\u5143\u65b9\u5dee\u5206\u6790\uff08MANOVA - Multivariate Analysis Of Variance\uff09\n    * \u4e3e\u4f8b\n        * ANOVA\uff1a\n            * \u5355\u56e0\uff1a\n                * \u4e0d\u540c\u65bd\u80a5\u91cf\u662f\u5426\u7ed9\u519c\u4f5c\u7269\u4ea7\u91cf\u5e26\u6765\u663e\u8457\u5f71\u54cd\n                * \u5730\u533a\u5dee\u5f02\u662f\u5426\u5f71\u54cd\u5987\u5973\u7684\u751f\u80b2\u7387\n                * \u5b66\u5386\u5bf9\u5de5\u8d44\u6536\u5165\u7684\u5f71\u54cd\n                * \u623f\u5b50\u7684\u6237\u578b\u662f\u5426\u5bf9\u623f\u4ef7\u6709\u5f71\u54cd \u2014\u2014 \u672c\u4f8b\n                    * \u5355\u56e0\uff1a\u6307\u623f\u578b\n                    * \u591a\u6c34\u5e73\uff1a\u6307\u623f\u578b\u6709\uff1a1\u5ba42\u5385\u30012\u5ba44\u53852\u536b\u2026\u2026\n                    * \u4e00\u5143\uff1a\u503c\u623f\u4ef7\n                    * \u6700\u521d\u6211\u4eec\u62ff\u5230\u7684\u662f\u623f\u578b-\u623f\u4ef7\u7684\u5bf9\u5e94\u6570\u636e\uff0c\u4f46\u9700\u8981\u6211\u4eec\u6839\u636e\u6839\u636e\u591a\u6c34\u5e73\u5c06\u56e0\u53d8\u91cf\uff08\u623f\u4ef7\uff09\u5206\u89e3\u4e3a\u591a\u7ec4\u6570\u636e\uff0c\u7136\u540e\u5bf9\u8fd9\u591a\u7ec4\u7684\u623f\u4ef7\u8fdb\u884c\u65b9\u5dee\u5206\u6790\uff0c\u6700\u7ec8\u83b7\u5f97\u201c\u7ec4\u5185\u201d\u3001\u201c\u7ec4\u95f4\u201d\u2026\u2026\u7684\u7279\u5f81\n                * \u623f\u5b50\u662f\u5426\u6709\u780c\u5899\u662f\u5426\u5bf9\u623f\u4ef7\u6709\u5f71\u54cd \u2014\u2014 \u672c\u9886\n            * \u591a\u56e0A\uff1a\n                * \u4e0d\u540c\u54c1\u79cd\u3001\u4e0d\u540c\u65bd\u80a5\u91cf\u5bf9\u519c\u4f5c\u7269\u4ea7\u91cf\u7684\u5f71\u54cd\n* \u6307\u6807\n    * SS\uff08Sum of Squares\uff0c\u5e73\u65b9\u548c\uff0c=\u2211(Yi-Ymean)^2 \uff09\u79bb\u6563\u7a0b\u5ea6\n        * SSE: \u7ec4\u5185\u6837\u672c\u4e0e\u5e73\u5747\u503c\u7684\u79bb\u6563\u7a0b\u5ea6\n        * SSF\uff1a\u5404\u7ec4\u5e73\u5747\u503c\u4e0e\u603b\u5e73\u5747\u503c\u7684\u79bb\u6563\u7a0b\u5ea6\n        * SST = SSE + SSF\n    * df\uff1a\u81ea\u7531\u5ea6\n        * dfE\uff1a\u7ec4\u5185 n - m  \/\/ m\u7ec4\uff0c\u6bcf\u7ec4n\u4e2a\u6837\u672c\n        * dfF\uff1a\u7ec4\u95f4 m - 1\n        * dfT\uff1a\u5408\u8ba1 n - 1\n    * Mean Square\uff1a\u5747\u65b9\u5dee = \u53d8\u52a8\/\u81ea\u7531\u5ea6\n        * \u7ec4\u5185\u5747\u65b9\u5dee: MSE = SSE\/dfE = SSE\/(n-m)\n        * \u7ec4\u95f4\u5747\u65b9\u5dee\uff1aMSF = SSF\/dfF = SSF\/(m-1)\n        * \u603b\u4f53\u5747\u65b9\u5dee\uff1aMST = SST\/dfT = SST\/(n-1)\n    * F\uff1a= MSF\/MSE\uff0c\u7ec4\u95f4\u5dee\u5f02\u663e\u8457\u6027\u6c34\u5e73\n        * \u8d8a\u5927\uff0c\u8bf4\u660e\u7ec4\u95f4\u53d8\u5f02\u76f8\u5bf9\u7ec4\u5185\u53d8\u5f02\u8d8a\u5927\n        * \u5230\u5e95\u591a\u5927\u624d\u6709\u610f\u4e49\uff0c\u770b P \u503c\n    * P(Sig) = F\/F\u8868\u67e5\u8be2\u503c\uff1a\u663e\u8457\u6027\u6c34\u5e73\u3001\u68c0\u9a8c\u6c34\u5e73\n        * **P < 0.05 :\uff08\u7ec4\u95f4\u5dee\u5f02\uff09\u663e\u8457**\n        * **P = 0 : \u7ec4\u95f4\u6ca1\u6709\u53ef\u6bd4\u6027**\n* \u5b9e\u73b0:\n    * Matlab\uff1a`anova1(x)` \n    * Scipy\uff1a `f,p = scipy.stats.f_oneway(sample1, sample2, ...)`","c07b5017":"\u4e0b\u9762\u53c8\u662f\u4e2a\u4f53\u529b\u6d3b\uff0c\u53ef\u4ee5\u50cf\u6211\u8fd9\u6837\u9010\u4e2a\u7279\u5f81\u5206\u6790\uff0c\u7136\u540e\u4f7f\u7528\u4e0d\u540c\u7684\u65b9\u5f0f\u586b\u8865\u7f3a\u5931\u503c\uff0c\u4e5f\u53ef\u4ee5\u4e00\u5200\u5207\u53d6\u4e2amean\uff0c\u4e0d\u89c1\u5f97\u4e0d\u597d\uff0c\u6211\u53ea\u662f\u5f3a\u8feb\u75c7\uff0c\u60f3\u770b\u770b\u6709\u5565\u5f71\u54cd\u3002","44fbe6cd":"\u5206\u6790\u4e0a\u56fe\uff1a\n\n- MSSubClass\uff1a\u6237\u578b\uff0c\u5178\u578b\u7684\u79bb\u6563\u578b\u7279\u5f81\uff0c\u53ea\u4e0d\u8fc7\u6570\u636e\u63d0\u4f9b\u8005\u5df2\u7ecf\u5e2e\u6211\u4eec\u6570\u503c\u5316\u4e86\uff0c\u8bf4\u660e\u6587\u4ef6\u4e2d\u7684\u6709\u8be6\u7ec6\u89e3\u91ca\n    - 20\/30\/40: \u5355\u5c42\uff081-STORY\uff09\u5efa\u7b51\uff0c\u82f1\u8bed\u91cc\u697c\u5c42\u662f storey\uff0c\u7f8e\u56fd\u7b80\u5316\u4e3a story\n    - 45\/50:1-1\/2 story\uff0c\u5e94\u8be5\u662f\u5e26\u9601\u697c\u5427\uff0c\u6211\u731c\n    - \u2026\u2026\n- OverallQual\u3001OverallCond\uff1a\u623f\u5c4b\u6750\u6599\u3001\u65b0\u65e7\u5ea6\u3001condition\u7b49\u7684\u6574\u4f53\u6253\u5206 \u2014\u2014 \u8fd9\u4e2a\u56e0\u4e3a\u662f\u4eba\u4e3a\u6253\u5206\uff0c\u6709\u53ef\u80fd\u5b58\u5728\u7ed9\u552e\u4ef7\u9ad8\u7684\u6253\u9ad8\u5206\uff0c\u6240\u4ee5\u9700\u8981\u6301\u6000\u7591\u6001\u5ea6\n- TotRmsAbvGrd\u3001GarageCars\uff1a\u623f\u95f4\u6570\u91cf\u3001\u8f66\u5e93\u5bb9\u91cf\uff0c\u53ef\u4ee5\u770b\u51fa\u548c\u552e\u4ef7\u6b63\u76f8\u5173\n- YrSold\u3001MoSold\uff1a\u5356\u51fa\u7684\u5e74\u3001\u6708\uff0c\u90fd\u662f06\u5e74\uff5e10\u5e74\u7684\u6570\u636e\uff0c\u53ea\u6709\u5356\u51fa\u624d\u6709\u771f\u5b9e\u552e\u4ef7\u561b\uff0c\u8fd9\u4e24\u4e2a\u7279\u5f81\u548c\u552e\u4ef7\u6211\u89c9\u5f97\u662f\u6ca1\u6709\u5173\u8054\u7684\uff0c\u53ef\u4ee5\u8003\u8651\u5220\u9664\u3002\n- \u5176\u4ed6\u7684\u7279\u5f81\u770b\u4e0d\u51fa\u5565\u660e\u663e\u8d8b\u52bf","af6813ea":"**\u9700\u8981\u8f6c\u4e3a\u5b57\u7b26'NA'\u624d\u80fd\u505a encode()\uff0c\u5426\u5219\u5728\u8ba1\u7b97 groupby() \u65f6\u4f1a\u6f0f\u6389 NaN \u578b **\n\n\u6d4b\u8bd5\uff1a","d9d4c949":"\u901a\u8fc7\u53d6 log \u53ef\u4ee5\u7ea0\u504f\uff0c\u4f46\u5bf9\u4e8e\u672c\u9884\u6d4b\u4efb\u52a1\u4f3c\u4e4e\u6ca1\u4ec0\u4e48\u5e2e\u52a9\uff0c\u96be\u9053\u8981\u6539\u4e3a\u9884\u6d4b log \u503c\uff1f\u6700\u540e\u518d\u53cd\u8ba1\u7b97\u4e00\u4e0b\uff1f\u6ca1\u5fc5\u8981\u5427\u3002","0f0a08b9":"### NaN\u548cNA\u7684\u5904\u7406\u51fd\u6570","44c4e9f3":"**RMSE**: Root-Mean-Squared-Error\uff0c\u6839\u5e73\u5747\u5e73\u65b9\u5dee\uff0c[wikipedia](https:\/\/en.wikipedia.org\/wiki\/Root-mean-square_deviation) \uff0c\u8fd9\u662f\u672c\u573a\u6bd4\u8d5b\u8981\u6c42\u7684\u8bc4\u6d4b\u6807\u51c6\u3002\n","0c42fc98":"**========= Test =========**","a91d543c":"### \u534f\u65b9\u6700\u5927\u5173\u8054\u56fe(pairplot)","0544a2f4":"# **\u6570\u636e\u52a0\u8f7d**","df48e15a":"# **\u673a\u5668\u5b66\u4e60**","95c4cc77":"### \u5b57\u7b26\u91cf -- \u4ec5\u505a\u7c7b\u578b\u8f6c\u6362\n\n\u5c06\u5176\u4ecefloat\u7c7b\u578b\u7684NaN\u8f6c\u53d8\u4e3achar\u7684\"NA\"\uff0c\u56e0\u4e3a\u8fd9\u4e9b'NA'\u90fd\u662f\u6709\u610f\u4e49\u7684\uff0c\u4e0d\u662f\u7f3a\u5931\uff0c\u800c\u662f\u67d0\u4e2a\u7279\u5b9a\u542b\u4e49\u503c\u3002","b0f5c06e":"\u70bc\u4e39\u5f00\u59cb  \n\u5600\u55d2\u5600\u55d2\u5600\u55d2\u5600\u55d2  \n\u65f6\u9488\u5b83\u4e0d\u505c\u5728\u8f6c\u52a8  \n\u5600\u55d2\u5600\u55d2\u5600\u55d2\u5600\u55d2  \n\u5c0f\u96e8\u5979\u62cd\u6253\u7740\u6c34\u82b1  ","28990653":"\u56fe\u753b\u7684\u8d8a\u6765\u8d8a\u82b1\u54e8\uff0c\u6211\u5df2\u65e0\u529b\u5206\u6790\uff0c\u8fd8\u662f\u5f00\u59cb\u6570\u636e\u5904\u7406\u5427\u3002","b955ffec":"## \u57fa\u7840\u7edf\u8ba1","2dee725e":"## \u534f\u65b9\u5dee\u5206\u6790(-1~+1)\n\n**\u4e0a\u9762\u7684\u65b9\u5dee\u5206\u6790\uff0c\u5176\u5b9e\u4e0d\u8fc7\u662f\u4e0b\u9762\u534f\u65b9\u5dee\u7ed3\u679c\u4e2d\u7684\u4e00\u5217\u800c\u5df2\u3002**\n\n\u4f7f\u7528 DataFrame.corr(method='pearson', min_periods=1) \u51fd\u6570\u8ba1\u7b97\u534f\u65b9\u5dee\uff0c\u6b64\u51fd\u6570\u8fd4\u56de\u503c\u4e5f\u662f\u4e2a DataFrame\uff0c\u975e\u5e38\u9002\u5408 heatmap \u6765\u7ed8\u56fe\u5c55\u793a\u3002\n\nmethod \u67093\u79cd\uff1a  \n* pearson : standard correlation coefficient \u2014\u2014 \u6807\u51c6\u76f8\u5173\u7cfb\u6570\n* kendall : Kendall Tau correlation coefficient \u2014\u2014 KT\u76f8\u5173\u7cfb\u7edf\n* spearman : Spearman rank correlation \u2014\u2014 \u65af\u76ae\u5c14\u66fc\u76f8\u5173\u7cfb\u6570\n\n\u8fd4\u56de\u503c\uff1a \u8ba1\u7b97\u4e86\u4efb\u610f\u4e24\u4e2afeature\u4e4b\u95f4\u7684\u5173\u8054\u7a0b\u5ea6\n\n* \u5f53 cov(X, Y)>0\u65f6\uff0c\u8868\u660e X\u4e0eY \u6b63\u76f8\u5173\uff1b\n* \u5f53 cov(X, Y)<0\u65f6\uff0c\u8868\u660eX\u4e0eY\u8d1f\u76f8\u5173\uff1b\n* \u5f53 cov(X, Y)=0\u65f6\uff0c\u8868\u660eX\u4e0eY\u4e0d\u76f8\u5173\u3002","baab4e42":"### scipy.stats.f_oneway()","a3e4e15e":"## \u7279\u5f81\u5206\u7c7b","dcb1a78c":"\u5206\u6790\u4e0a\u56fe\uff1a\n\n- LotFrontage\u3001LotArea\u3001GrLivArea\u30011stFlrSF\u30012stFlrSF\u3001GarageArea\u3001BsmtFinSF1\u3001TotalBsmtSF\uff1a \u8fd9\u51e0\u4e2a\u9762\u79ef\u548c\u8ddd\u79bb\u548c\u552e\u4ef7\u5448\u660e\u663e\u6b63\u76f8\u5173\u8d8b\u52bf\n    - LotFrontage\uff1a\u623f\u5b50\u5230\u8857\u9053\u7684\u8ddd\u79bb\uff0c\u5927\u591a\u572850-100\u82f1\u5c3a\uff0815-30\u7c73\uff09\uff0c\u8ddd\u79bb\u8fdc\u7684\u662f\u4e0d\u662f\u5927\u591a\u662f\u8c6a\u5b85\uff1f\u8eb2\u5728\u5c71\u6797\u6df1\u5904\u2026\u2026\n    - LotArea\uff1a\u5360\u5730\u9762\u79ef\uff08\u5305\u62ec\u623f\u5c4b\u3001\u82b1\u56ed\u3001\u524d\u540e\u9662\u2026\u2026\uff09\uff0c\u5747\u503c\u662f10516\u5e73\u65b9\u82f1\u5c3a\uff08900+\u5e73\u65b9\u7c73\uff09\uff0c\u5411\u5f80\u554a\u2026\u2026\n    - GrLivArea\uff1a\u5730\u9762\u4ee5\u4e0a\u6574\u4f53\u9762\u79ef\n    - 1stFlrSF\u30012stFlrSF\uff1a \u7b2c1\u3001 2\u5c42\u5efa\u7b51\u9762\u79ef\n    - GarageArea\uff1a\u8f66\u5e93\u9762\u79ef\n    - BsmtFinSF1\u3001BsmtFinSF2\u3001TotalBsmtSF\uff1a\u5730\u4e0b\u5ba4\u9762\u79ef\uff0c\u5f88\u591a\u623f\u5b50\u8fd8\u6709\u7b2c2\u4e2a\u5730\u4e0b\u5ba4\n- YearBuilt\u3001YearRemodAdd\u3001GarageYrBlt\uff1a\u4ece\u56fe\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u5efa\u9020\u5e74\u9650\u5bf9\u552e\u4ef7\u867d\u6b63\u76f8\u5173\uff0c\u4f46\u5761\u5ea6\u8f83\u5c0f\uff0c\u5173\u8054\u5ea6\u6ca1\u6709\u4e0a\u9762\u51e0\u4e2a\u56e0\u7d20\u5927\uff0c\u65e9\u70b9\u3001\u665a\u70b9\u552e\u4ef7\u5dee\u4e0d\u591a","1e53415b":"### pandas.Series.corr()","aac880f3":"### MXNet","7db3be9c":"## \u57fa\u672c\u5206\u5e03(scatter)","b4c1c108":"\u628a\u6570\u636e\u7528 mxnet \u63d0\u4f9b\u7684 array \u521d\u59cb\u5316\u4e00\u4e0b\uff0c\u4ee5\u4fbf\u7528 GPU \u7b49\u5927\u62db\u3002","c5953e1b":"## \u65e0\u6548\u6570\u636e\u5904\u7406","8a1d7209":"### PaddlePaddle","41c1aaef":"\u53c2\u8003\u5404\u8def\u82f1\u8c6a\u7684\u7ecf\u9a8c\uff0c\u80fd\u505a\u7684\u6570\u636e\u5206\u6790\u548c\u9884\u5904\u7406\u90fd\u5dee\u4e0d\u591a\u4e86\uff0c\u8be5\u4e0a\u673a\u5668\u5b66\u4e60\u4e86\u3002   \n\n\u4e0a\u9762\u8fd9\u4e9b\u6570\u636e\u5904\u7406\uff0c\u8ba9\u6211\u611f\u89c9\u5927\u5b66\u5b66\u7684\u6982\u7387\u7edf\u8ba1\u90fd\u8fd8\u7ed9\u8001\u5e08\u4e86\uff0c\u6211\u90a3\u65f6\u5019\u6982\u7387\u548c\u7edf\u8ba1\u8fd8\u662f\u4e00\u95e8\u8bfe\uff0c\u542c\u8bf4\u73b0\u5728\u5df2\u7ecf\u5206\u5f002\u95e8\u8bfe\u4e86\uff0c\u6982\u7387\u662f\u4ece\u7406\u8bba\u6307\u5bfc\u5b9e\u8df5\u7684\u79d1\u5b66\uff0c\u7edf\u8ba1\u662f\u5b9e\u8df5\u53d1\u73b0\u89c4\u5f8b\u7684\u79d1\u5b66\uff0c\u6bd5\u7adf\u8fd8\u662f\u6709\u533a\u522b\u7684\uff0c\u5206\u5f00\u7684\u597d\u3002  \n\n\u590d\u4e60\u4e86\u8bfe\u672c\uff0c\u518d\u52a0\u4ee5\u300aPython \u79d1\u5b66\u8ba1\u7b97\u300b\u4e4b\u7c7b\u7684\u4e66\uff0c\u7ec8\u4e8e\u62ff\u4e0b\u4e0a\u9762\u7684\u6570\u636e\u5904\u7406\u4e4b\u540e\uff0c\u6211\u53d1\u73b0\uff1a\u4e0b\u9762\u7684\u673a\u5668\u5b66\u4e60\u624d\u66f4\u91cd\u8981\u3002\n\n\u5f53\u71362\u9879\u5de5\u4f5c\u90fd\u91cd\u8981\uff0c\u8fd9\u91cc\u7684\u91cd\u8981\u662f\u6307\uff1a\u8f9b\u82e6\u641e\u6570\u636e\u5904\u7406RMSE\u53ea\u80fd\u4f18\u53160.02\u4e0a\u4e0b\u6d6e\u52a8\uff0c\u4f18\u5316ML\u6a21\u578b\uff0c\u80fd\u57280.05~0.1\u4e4b\u95f4\uff0c\u4e24\u8005\u5bf9\u6700\u7ec8\u7ed3\u679c\u7684\u5f71\u54cd\u5ea6\u4e0aML\u4f3c\u4e4e\u66f4\u91cd\u8981\u4e00\u70b9\u3002\n\n\u6570\u636e\u5904\u7406\u662f\u79d1\u5b66\uff0c\u673a\u5668\u5b66\u4e60\u662f\u7384\u5b66 -- \u6211\u4f3c\u4e4e\u6709\u70b9\u4fe1\u4e86\u3002","ee7a2ed0":"## \u6b63\u6001\u6027\u68c0\u9a8c\n\n\u5e38\u7528\u7684\u6b63\u6001\u6027\u68c0\u9a8c\u65b9\u6cd5\u6709\uff1a\n\n* \u6b63\u6001\u6982\u7387\u7eb8\u6cd5\n* \u590f\u76ae\u7f57\u7ef4\u5c14\u514b\u68c0\u9a8c\u6cd5(Shapiro-Wilktest)\n* \u79d1\u5c14\u83ab\u6208\u7f57\u592b\u68c0\u9a8c\u6cd5\n* \u504f\u5ea6-\u5cf0\u5ea6\u68c0\u9a8c\u6cd5\u7b49 \u2014\u2014 \u4e0b\u6587\u4f7f\u7528","80b71726":"\u5148\u6765\u5b9e\u73b0\u51e0\u4e2a\u51fd\u6570\uff0c\u4ee5\u4fbf\u540e\u9762\u5904\u7406 np.NaN \u548c 'NA'","e14b1c89":"## **\u6a21\u578b**","3bf04f2f":"## **\u70bc\u4e39**\n\n\u4e0b\u9762\u5f00\u59cb\u70bc\u4e39\uff1a\u76ee\u524d\u76846\u4e2a\u53c2\u6570\uff0c\u53ef\u4ee5\u6709\u65e0\u6570\u79cd\u7ec4\u5408\uff0c\u5982\u4f55\u627e\u5230\u6700\u4f73\u7684\u90a3\u4e2a\uff0c\u5f00\u542f\u683c\u683c\u5deb\u6a21\u5f0f\u3002","954352cb":"**\u7279\u5f81\u4ece2\u4e2a\u7ef4\u5ea6\u8fdb\u884c\u5206\u7c7b\uff1a**\n\n| |**\u6570\u503c\u91cf\uff08numeric\uff09**|**\u5b57\u7b26\u91cf\uff08object\uff09**|\n|:---|:---|:---|\n|**\u8fde\u7eed\u578b(Continuous)**|\u8ddd\u79bb\u3001\u9762\u79ef\u2026\u2026| \u65e0 |\n|**\u79bb\u6563\u578b(discrete)<br>\u7c7b\u578b\u91cf(categorical)**|\u697c\u5c42\u3001\u5e74\u4efd\u3001<br>\u6570\u503c\u5316\u540e\u7684\u5b57\u7b26\u91cf\u2026\u2026|\u623f\u578b\u3001\u6750\u6599\u79cd\u7c7b\u2026\u2026|\n\n\n* \u901a\u5e38\u9700\u8981\u5c06\u79bb\u6563\u7684\u5b57\u7b26\u91cf --(\u8f6c\u53d8\u4e3a)--> \u79bb\u6563\u7684\u6570\u503c\u91cf\n* pandas.read_csv() \u5f97\u5230\u7684 dataframe \u7684column\u7c7b\u578b\uff08df.dtypes\uff09\u4e0e\u7279\u5f81\u7684\u5bf9\u5e94\u5173\u7cfb\uff1a\n    * int,float \u2014\u2014 \u6570\u503c\u91cf\uff08\u8fde\u7eed\u548c\u79bb\u6563\uff09\n    * object    \u2014\u2014 \u5b57\u7b26\u91cf\uff08\u79bb\u6563\uff09\n        * \u867d\u7136 column \u662f object\u7684\uff0c\u4f46\u5177\u4f53\u91cc\u9762\u7684\u503c\u662f 'str'\u3001'float'(NA\u503c\u662ffloat\uff09\n","b8ca327d":"### \u65e0\u6548\u7279\u5f81\u5904\u7406\n\n\u6839\u636e\u903b\u8f91\u548c\u7406\u8bba\uff0c\u5220\u9664\u4e00\u4e9b\u8fdd\u53cd\u539f\u5219\u7684\u7279\u5f81\uff1a\n\n* YrSold\u3001MoSold\uff1a\u6211\u89c9\u5f97\u548c\u9884\u6d4b\u623f\u4ef7\u4e0d\u76f8\u5173\n\n\u8fd8\u6709\u4e00\u4e9b\u6839\u636e\u4e2a\u4eba\u89c2\u70b9\u968f\u559c\u53d6\u820d\uff1a\n\n* OverallQual: \u592a\u4eba\u4e3a\u5316\u4e86\uff0c\u5b8c\u5168\u4e0d\u7406\u6027\uff0c\u751a\u81f3\u8bf4\u53ef\u80fd\u662f\u552e\u4ef7\u7684\u56e0\u53d8\u91cf\uff08\u552e\u4ef7\u662f\u81ea\u53d8\u91cf\uff09\n* YearBuild: \u623f\u5730\u4ea7\u7684\u53e3\u5934\u7985\uff1a\u5730\u6bb5\u3001\u5730\u6bb5\u3001\u5730\u6bb5\uff0c\u623f\u9f84\u51e0\u4e4e\u65e0\u5173","c05c61c6":"**\u624b\u5de5\u5220\u9664\u79bb\u7fa4\u70b9** \u2014\u2014 \u8fd9\u662f\u4e2a\u4f53\u529b\u6d3b\u554a\uff01  \n\u5e76\u4e14\u79bb\u7fa4\u70b9\u662f\u4ee5 SalePrice \u4e3a\u53c2\u7167\u7684\uff0c\u800c df_allX \u4e2d\u6ca1\u6709 SalePrice\uff0c\u53ea\u6709 df_train \u4e2d\u6709\u3002  \ndf_allX \u524d\u9762\u5df2\u7ecf\u91cd\u65b0\u6392\u5e8f\u4e86Id\uff0c\u4f46\u524d\u534a\u90e8\u5206\u7684\u7684 Id \u5e94\u8be5\u662f\u548c df_train \u76f8\u540c\u7684\uff0c\u53ef\u4ee5\u4f7f\u7528\u3002","b57a8ee9":"## \u5206\u6563\u5ea6\u5206\u6790(box)","3171c6d4":"\u6d4b\u8bd5\u5b8c\u6bd5","06ac11cf":"**Tips:**  \nread_csv() \u4e2d\u5982\u4f55\u5904\u7406 NA\uff1a\n\n- `pd.read_csv(file,... na_values=None, keep_default_na=True, ...)`\n- na_values: \u9047\u5230\u8be5\u53c2\u6570\u6307\u5b9a\u7684\u5b57\u7b26\u65f6\uff0c\u5373\u89e3\u6790\u4e3a np.NaN(float\u578b)\uff0c\u65e0\u8bba\u6b64\u5217\u662f\u6570\u503c\u578borobject\u578b\u3002\n    - \u9ed8\u8ba4\u503c\uff1a`'', '#N\/A', '#N\/A N\/A', '#NA', '-1.#IND', '-1.#QNAN', '-NaN', '-nan','1.#IND', '1.#QNAN', 'N\/A', 'NA', 'NULL', 'NaN', 'nan'`.\n- keep_default_na\n    - True\uff1a\u5c06csv \u6587\u4ef6\u4e2d\u7684\u6570\u5b57or\u5b57\u7b26\u4e32\u4e0e na_values \u7684 default \u503c\u8fdb\u884c\u5339\u914d\uff0c\u547d\u4e2d\u5373\u89e3\u6790\u4e3a np.NaN\n    - False\uff1a\n        - na_values=[...] \uff1a\u4e0e\u81ea\u5b9a\u4e49\u7684 na_values \u5339\u914d\uff0c\u547d\u4e2d\u5373\u89e3\u6790\u4e3a np.NaN\n        - na_values\u4e0d\u8d4b\u503c\uff1a\u4e0d\u89e3\u6790\u76f8\u5173\u5b57\u7b26\u4e32\uff0c\u4fdd\u7559\u4e3a\u539f\u5b57\u7b26\u4e32\uff0c\u526f\u4f5c\u7528\uff1a\u4f1a\u628a\u6570\u503c\u578b\u7684feature\u9519\u8bef\u7684\u8ba4\u6210 object \u578b \u2014\u2014 so\uff0c\u4e0d\u53ef\u53d6","fa8e7fa6":"\u4e0b\u9762\u8fd9\u4e2a\u51fd\u6570\u6539\u7f16\u81ea MXNet Demo \u4e2d\uff0c\u5b9e\u73b0\u4e86 K-\u6298\u4ea4\u53c9\u9a8c\u8bc1\uff0c\u662f\u8fd9\u4e48\u4e2a\u610f\u601d\uff1a\n\n- Andrew Ng \u8bf4\u6570\u636e\u8981\u52063\u4efd\uff1a\u8bad\u7ec3\u3001\u9a8c\u8bc1\u3001\u6d4b\u8bd5\u3002\u9a8c\u8bc1\u6570\u636e\u7528\u6765\u5bf9\u8bad\u7ec3\u6570\u636e\u5f97\u5230\u7684\u6a21\u578b\u8fdb\u884c\u9a8c\u8bc1\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u4e0a\u6d4b\u8bd5\u96c6\uff0c\u6bd5\u7adf\u6311\u6218\u8d5b\u4e2d\u6211\u4eec\u624b\u4e0a\u4e5f\u6ca1\u6709\u6d4b\u8bd5\u96c6\u7684SalePrice\uff0c\u65e0\u6cd5\u505a\u8bc4\u5224\n- K-\u6298\u4ea4\u53c9\u9a8c\u8bc1\uff1a\u628a \u8bad\u7ec3\u96c6 \u5206k\u4efd\uff0c\u53d6\u5176\u4e2d1\u4efd\u4f5c\u4e3a\u9a8c\u8bc1\u96c6\uff0c\u53e6\u5916 (k-1) \u4efd\u505a\u8bad\u7ec3\u96c6\n\n\u5176\u4e2d\u6211\u6ce8\u91ca\u6389\u4e86 savejpg \u4e00\u884c\uff0c\u662f\u4e3a\u4e86\u51cf\u5c11kaggle\u7684\u8d1f\u62c5\uff0c\u672c\u673a\u6267\u884c\u662f\u6211\u89c9\u5f97\u633a\u6709\u7528\u7684\u3002","6a2c2e28":"\u5206\u6790\u4e0a\u56fe\uff1a\n\n\u76f4\u65b9\u56fe\u4e0a\u770b\u975e\u6b63\u6001\uff0c\u6709\u53ef\u80fd\u662f\u6570\u636e\u6536\u96c6\u7684\u4e0d\u5b8c\u6574\uff0c\u4e5f\u6709\u53ef\u80fd\u672c\u8eab\u5c31\u4e0d\u662f\u6b63\u6001\u5206\u5e03\u7684\uff0c\u6536\u96c6\u518d\u591a\u7684\u6570\u636e\u4e5f\u662f\u975e\u6b63\u6001\u7684\uff0c\u8bf4\u4e0d\u5b9a\u5b83\u539f\u672c\u5c31\u662f\u5361\u65b9\u5206\u5e03\u5462\uff1f\n\u2014\u2014 \u81f3\u4e8e\u662f\u54ea\u79cd\uff0c\u4e0d\u77e5\u9053\uff0c\u7559\u7ed9\u79d1\u5b66\u5bb6\u5427\u3002","9902ea68":"## **\u8bad\u7ec3**","16662712":"## \u79bb\u6563\u91cf\u7f16\u7801\n\n* **\u79bb\u6563\/\u7c7b\u578b\u91cf\u90fd\u53ef\u4ee5\u8fdb\u884c\u91cd\u65b0\u7f16\u7801\uff08encoding\uff09\uff1a**\n    * **\u5b57\u7b26\u578b-\u79bb\u6563\u91cf\u7684\u7f16\u7801\uff1a\u5373\u5b57\u7b26\u91cf\u7684\u6570\u503c\u5316\u3002**\n    * **\u6570\u503c\u578b-\u79bb\u6563\u91cf\u7684\u7f16\u7801\uff1a\u672c\u4f8b\u9700\u6c42\u4e0d\u5f3a\u70c8**\uff0c\u56e0\u4e3a\u6570\u636e\u63d0\u4f9b\u8005\u5df2\u7ecf\u505a\u4e86\u5f88\u597d\u7684\u6392\u5e8f\uff0c\u5982OverallQual\uff0c10\uff5e1\u5206\u522b\u4ee3\u8868\u4eceVeryExcellent\uff5eVeryPoor\n\n\u79bb\u6563\u91cf\u7f16\u7801\u7684\u5e38\u7528\u65b9\u6cd5\u6709\uff1a\n\n1. One-Hot Encoding: \u5c06\u79bb\u6563\u91cf\u53d8\u4e3a\u591a\u4e2a\u7279\u5f81 \u2014\u2014 \u56e0\u4e3a\u53ea\u8003\u8651\u7279\u5f81\u672c\u8eab\uff0cso\uff0c\u53ef\u4ee5\u7528 df_allX \u6765\u8ba1\u7b97\n2. \u5206\u7ec4-\u5747\u503c-\u6392\u5e8f\u6cd5\uff1a\u5bf9\u7279\u5f81\u7684\u4e0d\u540c\u53d6\u503c\u5206\u7ec4\uff0c\u5e76\u8ba1\u7b97\u6bcf\u7ec4y\u7684\u5747\u503c\uff0c\u7136\u540e\u6392\u5e8f\uff0c\u6700\u540e\u5206\u522b\u5c06\u5206\u7ec4\u6570\u503c\u5316\u4e3a1,2,3... \n\n\u5177\u4f53\u5b9e\u65bd2\u90091\uff0c\u4e0b\u6587\u6211\u6ce8\u91ca\u6389\u4e861\uff0c\u9009\u7528\u76842\uff0c\u5e76\u4e0d\u662f1\u4e0d\u597d\uff0c\u800c\u662f1\u53ea\u9700\u89811\u884c\u8bed\u53e5\uff0c2\u6211\u5199\u4e86\u8fd8\u591a\u884c\uff0c\u4e0d\u7528\u89c9\u5f97\u53ef\u60dc\u4e86\u6211\u7684\u5de5\u4f5c\u91cf\uff0c\u54c8\u54c8\u3002\n\n\u5176\u5b9e\u4ece\u7ed3\u679c\u5bf9\u6bd4\u6765\u770b\uff0c\u5dee\u522b\u4e0d\u660e\u663e\uff0c1\u5360\u4f18\u7684\u6bd4\u4f8b\u8fd8\u9ad8\u4e9b\uff0c\u6211\u662f\u4e3a\u4e86\u5b66\u4e60\uff0c\u62ff2\u7ec3\u7ec3\u624b\u3002","a6197198":"**\u4f7f\u7528\u65b9\u5dee\u5206\u6790\u67d0\u4e9bfeature\u548cSalePrice\u4e4b\u95f4\u5173\u8054\u7684\u663e\u8457\u7a0b\u5ea6\u5982\u4f55\uff1a**","ba7047d5":"### One-Hot Encoding\n\n\u53c8\u79f0\uff1a\u72ec\u70ed\u7f16\u7801\uff08\u8fd9\u4e2d\u6587\u540d\u4e5f\u592alow\u4e86\uff09\uff0c\u672c\u8d28\u662f\u6309\u4f4d\u7f16\u7801\uff0c\u5373\u4f7f\u75281bit\u8868\u793a\u4e00\u4e2a\u72b6\u6001\u3002\n\n\u76ee\u7684\uff1a\n\n* \u89e3\u51b3\u4e86\u5206\u7c7b\u5668\u4e0d\u597d\u5904\u7406\u5c5e\u6027\u6570\u636e\u7684\u95ee\u9898\uff0c\u5c5e\u6027\u901a\u5e38\u4e3a\u5e8f\u5217\u503c\uff0c\u800c\u4e0d\u662f\u8fde\u7eed\u503c\uff0c\u5e8f\u5217\u503c\u6ca1\u6709\u8fde\u7eed\u503c\u7684\u5927\u5c0f\u3001\u4f18\u52a3\u2026\u2026\u4e4b\u5206\n* \u5c06\u5e8f\u5217\u578b\u7684\u5c5e\u6027\u5bf9\u5e94\u5230\u6b27\u5f0f\u7a7a\u95f4\n* \u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u4e5f\u8d77\u5230\u4e86\u6269\u5145\u7279\u5f81\u7684\u4f5c\u7528\n\n\u5b9e\u73b0\uff1a\n\n1. \n```\nfrom sklearn import preprocessing\npreprocessing.OneHotEncoder(sparse=False).fit_transform()\n```\n2. \n```\npandas.get_dummies() \/\/dummy variables(\u865a\u62df\u53d8\u91cf\u3001\u54d1\u53d8\u91cf\u3001\u79bb\u6563\u7279\u5f81\u7f16\u7801)\n```","5e27d07a":"# **\u6570\u636e\u5206\u6790**\n\n**knowing your data is the most difficult thing in data science**\n\n\u4e0b\u9762\u5f00\u59cb\u5206\u6790\u6570\u636e\uff0c\u4e89\u53d6\u7528\u4e00\u4e9b\u56fe\u6765\u6316\u6398\u6570\u636e\u4e2d\u9690\u85cf\u7684\u4fe1\u606f\uff0c\u4e3a\u6570\u636e\u5904\u7406\u63d0\u4f9b\u4f9d\u636e\u3002\n\n\u4e3b\u8981\u5185\u5bb9\u5305\u62ec\uff1a\n\n- \u6b63\u6001\u6027\u5206\u6790\uff1a\u4f7f\u7528 hist\uff08\u76f4\u65b9\u56fe\uff09\u548c scatter\uff08\u6563\u70b9\u56fe\uff09\u5c55\u793a\n- \u5206\u6563\u5ea6\u5206\u6790\uff1a\u4f7f\u7528 box\uff08\u7bb1\u7ebf\u56fe\uff09\u5c55\u793a\n- \u65b9\u5dee\u9f50\u6b21\u5206\u6790\uff1a\n- \u65b9\u5dee\u5206\u6790\uff1a \u4f7f\u7528 bar\uff08\u67f1\u72b6\u56fe\uff09\u5c55\u793a\n- \u534f\u65b9\u5dee\u5206\u6790\uff1a\u4f7f\u7528 heatmap\uff08\u70ed\u56fe\uff09\u5c55\u793a\n\n\u975e\u5e38\u611f\u8c22 matplotlib \u548c seaborn\uff0c\u63d0\u4f9b\u4e86\u7b80\u5355\u3001\u9ad8\u6548\u7684\u7ed8\u56fe\u3002","c897e9dd":"### \u6570\u503c\u91cf:min,max,mean","3437bdc4":"### \u5cf0\u5ea6\u5206\u6790(hist|scatter)\n\n* kurtosis,peakedness \u2014\u2014 \u5cf0\u5ea6\u3001\u5cf0\u6001\u7cfb\u6570\u3002\n* \u8868\u5f81\u6982\u7387\u5bc6\u5ea6\u5206\u5e03\u66f2\u7ebf\u5728\u5e73\u5747\u503c\u5904\u5cf0\u503c\u9ad8\u4f4e\u7684\u7279\u5f81\u6570\u3002\n* \u5cf0\u5ea6\u662f\u548c\u6b63\u6001\u5206\u5e03\u76f8\u6bd4\u8f83\u800c\u8a00\u7edf\u8ba1\u91cf\uff0c\u53cd\u6620\u4e86\u5cf0\u90e8\u7684\u5c16\u5ea6\u3002\n* \u5cf0\u5ea6\u5927\u4e8e\u4e09\uff0c\u5cf0\u7684\u5f62\u72b6\u6bd4\u8f83\u5c16\uff0c\u6bd4\u6b63\u6001\u5206\u5e03\u5cf0\u8981\u9661\u5ced\u3002\n* \u53ef\u7528\u5cf0\u5ea6\u6765\u68c0\u9a8c\u5206\u5e03\u7684\u6b63\u6001\u6027\u3002\n* \u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u901a\u5e38\u5c06\u5cf0\u5ea6\u503c\u505a\u51cf3\u5904\u7406\uff0c\u4f7f\u5f97\u6b63\u6001\u5206\u5e03\u7684\u5cf0\u5ea60\u3002","fa9a8684":"### pytorch","d8eccfa9":"### \u534f\u65b9\u5dee\u70ed\u56fe(heatmap)\n\n* heatmap: \n    * matplotlib \u753bheatmap\u6bd4\u8f83\u9ebb\u70e6\uff0c\u6ca1\u6709\u7b80\u5355\u63a5\u53e3\n    * sns.heatmap() \u662f\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\n* \u989c\u8272\u8d8a\u6d45\uff0c\u534f\u65b9\u5dee\u8d8a\u5927\uff0c\u4e24\u4e2a\u53d8\u91cf\u5173\u8054\u6027\u8d8a\u5927\uff1b\n* \u989c\u8272\u8d8a\u6df1\uff0c\u9006\u76f8\u5173;","0a284a5c":"## \u7f3a\u5931\u503c\u5904\u7406\n\n* **\u7f3a\u5931\u503c\u4e0d\u7b49\u4e8eNA**\n    - \u5b57\u7b26\u578b\u7279\u5f81\u4e2d\u7684 'NA' \u52062\u7c7b\uff1a\n        1. NA \u4ee3\u8868\u67d0\u4e2a\u542b\u4e49\uff0c\u662f\u79bb\u6563\u91cf\/\u7c7b\u578b\u91cf\u7684\u4e00\u4e2a\u6709\u610f\u4e49\u7684\u503c\uff0c\u9700\u8981\u8bf7\u53c2\u8003\u8bf4\u660e\u6587\u4ef6\n        2. NA \u4ee3\u8868\u7f3a\u5931\n    - \u6570\u503c\u91cf\u7279\u5f81\u4e2d\u7684 np.NaN \u4e00\u822c\u90fd\u662f\u7f3a\u5931\u503c\u4e86\n* \u7f3a\u5931\u6bd4\u4f8b\u592a\u5927\uff0c\u6216\u7279\u5f81\u5bf9\u4efb\u52a1\u6709\u6ca1\u6709\u7528 \u2014\u2014 \u76f4\u63a5\u5220\u9664\n* \u7f3a\u5931\u6bd4\u4f8b\u4e0d\u5927\uff0c\u9700\u8981\u8865\u5168\n    - \u6570\u503c\u578b\u7279\u5f81\uff1a\u7528min,max,mean,median\u6216mod\u8865\u5168\n    - \u5b57\u7b26\u578b\u7279\u522b\uff1a\u2014\u2014\u6682\u4e0d\u5904\u7406","c844b7d4":"\u7ecf\u8fc7\u5904\u7406\uff0c\u5f97\u5230\u8868\u4e2d\u7b2c2\u4e2a\u7ef4\u5ea6\uff1a  22\u4e2a\u8fde\u7eed\u578b\u7279\u5f81\uff0c57\u4e2a\u79bb\u6563\u578b\u7279\u5f81","d1c7587a":"# **\u6570\u636e\u5904\u7406**","35178e85":"\u5206\u6790\u4e0a\u56fe\uff1a  \n\n* \u4e2d\u95f42\u4e2a\u6bd4\u8f83\u5927\u7684\u767d\u8272\u5757\uff1a\n    * TotalBsmtSF--1stFlrSF\uff1a\u5730\u4e0b\u5ba4\u9762\u79ef\u548c1\u697c\u9762\u79ef\u6b63\u76f8\u5173 \u2014\u2014 \u597d\u50cf\u5f88\u5e9f\u8bdd\u54e6\uff0c\u5475\u5475\n    * GarageCars--GarageArea\uff1a\u8f66\u5e93\u9762\u79ef\u548c\u505c\u8f66\u5bb9\u91cf\u6b63\u76f8\u5173 \u2014\u2014 \u4e5f\u5f88\u5e9f\u8bdd\n    * \u4e0a\u97624\u4e2a\u5728\u5efa\u6a21\u65f6\u53ef\u4ee5\u53bb\u96642\u4e2a\uff0c\u53e6\u59162\u4e2a\u662f\u65e0\u6548feature\n    * \u8fd9\u53eb\uff1a**\u591a\u91cd\u5171\u7ebf\u6027**\n","97c578ce":"\u603b\u517179\u4e2a\u7279\u5f81\uff0cpandas\u81ea\u52a8\u8bc6\u522b\u7684 36\u4e2a\u6570\u503c\u91cf\uff0c43\u4e2a\u5b57\u7b26\u91cf\u3002 \u2014\u2014 \u8fd9\u662f\u4e0a\u8868\u4e2d\u7b2c\u4e00\u4e2a\u7ef4\u5ea6","858f2b99":"## \u65b9\u5dee\u9f50\u6b21\u68c0\u9a8c\n\nHomoscedasticity\uff0c\u65b9\u5dee\u9f50\u6027\uff0c\u4e5f\u5c31\u662f\u65b9\u5dee\u76f8\u7b49\n\n\u5e38\u7528\u65b9\u6cd5\u6709\uff1a\n\n* Hartley\u68c0\u9a8c\n* Bartlett\u68c0\u9a8c\n* \u4fee\u6b63\u7684Bartlett\u68c0\u9a8c\n\n[\u5982\u4f55\u7406\u89e3\u7ebf\u6027\u56de\u5f52\u4e2d\u7684\u65b9\u5dee\u9f50\u6027](https:\/\/www.sohu.com\/a\/197715883_655370)","2e8fd1b8":"## \u6807\u51c6\u5316(Normalization)\u5904\u7406\n\n\u6807\u51c6\u5316 (normalization)  \n\u5c06\u5b9e\u9645\u7684\u503c\u533a\u95f4\u8f6c\u6362\u4e3a\u6807\u51c6\u7684\u503c\u533a\u95f4(\u901a\u5e38\u4e3a -1 \u5230 +1 \u6216 0 \u5230 1)\u7684\u8fc7\u7a0b\u3002\u4f8b\u5982,\u5047\u8bbe\u67d0\u4e2a\u7279\u5f81\u7684\u81ea\u7136\u533a\u95f4\u662f 800 \u5230 6000\u3002\u901a\u8fc7\u51cf\u6cd5\u548c\u9664\n\u6cd5\u8fd0\u7b97,\u60a8\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u503c\u6807\u51c6\u5316\u4e3a\u4f4d\u4e8e -1 \u5230 +1 \u533a\u95f4\u5185\u3002  \n\u2014\u2014 Google \u673a\u5668\u5b66\u4e60\u672f\u8bed-\u4e2d\u6587\u7248(Machine Learning Glossary_Google Developers)\n\n\u5e38\u7528\u6807\u51c6\u5316\u65b9\u6cd5\uff1a\n\n1. z-score\n$$x_i = \\frac{x_i - \\mathbb{E} x_i}{\\text{std}(x_i)}\u3002$$\n2. Min-Max Scaling\n$$x_i = \\frac{x_i - min}{max - min}$$\n3. Decimal scaling\u5c0f\u6570\u5b9a\u6807\u6807\u51c6\u5316","79c9c517":"### \u79bb\u7fa4\u70b9\u5904\u7406\n\n\u79bb\u7fa4\u70b9\u4e0d\u540c\u4e8e\u5206\u6563\u5ea6\uff0c\u79bb\u7fa4\u70b9\u6307\u504f\u79bb\u8d8b\u52bf\u7684\u70b9\uff0c\u6bd4\u5982\u67d0\u7279\u5f81\u548c\u623f\u4ef7\u662f\u6b63\u76f8\u5173\u7684\uff0c\u5728\u8d8b\u52bf\u8f74\u4e0a\u5373\u65f6\u5f88\u5206\u6563\uff0c\u4f46\u662f\u4e0d\u53ef\u4ee5\u5220\u9664\u7684\uff0c\u800c\u4e0d\u5728\u8d8b\u52bf\u8f74\u4e0a\u7684\u201c\u79bb\u7fa4\u70b9\u201d\u662f\u9700\u8981\u5220\u9664\u7684\u3002","d0391526":"\u5206\u6790\u4e0a\u56fe\uff1a\n\n\u7bb1\u7ebf\u56fe\u6211\u57fa\u672c\u770b\u505a\u6563\u70b9\u56fe\u7684\u52a0\u5f3a\u7248\uff0c\u6700\u4e0a\u9762\u7684\u6563\u70b9\u56fe\u53ef\u4ee5\u770b\u51fa\u57fa\u672c\u8d8b\u52bf\uff0c\u4f46\u7bb1\u7ebf\u56fe\u53ef\u4ee5\u4e00\u773c\u770b\u51fa\uff1a\u5747\u503c\u3001\u4e3b\u8303\u56f4\u4e4b\u5185\u503c\u7684\u8d8b\u52bf\uff0c\u53ef\u4ee5\u770b\u51fa\u5f02\u5e38\u503c\u7684\u591a\u5c11\u3002\n\n\u6709\u4e2a\u6709\u8da3\u7684\u73b0\u8c61\uff1a\u51e0\u4e4e\u6240\u6709\u5f02\u5e38\u503c\u90fd\u662f\u5411\u4e0a\u5f02\u5e38\uff0c\u5373\u8d85\u51fa\u4e0a\u754c\uff08\u4e0a\u9762\u7684\u90a3\u6839\u6a2a\u7ebf\uff09\uff0c\u8bf4\u660e\u4e86\u6240\u6709\u4e0d\u5728\u968f\u5927\u6d41\u7684\u552e\u4ef7\u90fd\u662f\u9ad8\u4ef7\uff0c\u6ca1\u6709\u5730\u677f\u4ef7\u3001\u5410\u8840\u4ef7\u3001\u5927\u7529\u5356\u4ef7\u7684\u5927\u91cf\u51fa\u73b0\uff0c\u535a\u5f08\u4e2d\u660e\u663e\u5356\u65b9\u5360\u4f18\u3002","83a60ca8":"savejpg=True \u4f1a\u4fdd\u5b58\u56fe\u7247\u5230\u6307\u5b9a\u4f4d\u7f6e\uff0c\u6ce8\u610f\u4fee\u6539\u4e00\u4e0b\u8fd9\u4e2a\u4fdd\u5b58\u8def\u5f84\u3002\u5982\u679c\u6b63\u5e38\u7684\u8bdd\uff0c\u51e0\u767e\u5f20\u56fe\u7247\u5df2\u7ecf\u5728\u54ea\u91cc\u7b49\u7740\u4e86\uff0c\u6bcf\u7ec4\u8d85\u53c2\u4e00\u5f20\u56fe\u7247\uff0c\u6bcf\u5f20\u56fe\u7247\u4e2dk\u5f20\u56fe\uff08k-\u6298\u7684k\uff09\u3002\n\n\u5206\u6790\u4e00\u4e0b\u70bc\u4e39\u7089\u51fa\u6765\u7684\u4e39\u836f\uff1a","e867f412":"## **\u9884\u6d4b**\n\n\u4f7f\u7528 test \u6570\u636e\u96c6\u751f\u6210\u9884\u6d4b\u623f\u4ef7\u7684\u65f6\u523b\u5230\u4e86\u3002","9b006cb5":"### \u504f\u79bb\u5ea6\u5206\u6790(hist|scatter)\n\n**skewness:\u504f\u5ea6\u3001\u504f\u6001\u3001\u504f\u6001\u7cfb\u6570**\n\n* \u7edf\u8ba1\u6570\u636e\u5206\u5e03\u504f\u659c\u65b9\u5411\u548c\u7a0b\u5ea6\u7684\u5ea6\u91cf\uff0c\u662f\u7edf\u8ba1\u6570\u636e\u5206\u5e03\u975e\u5bf9\u79f0\u7a0b\u5ea6\u7684\u6570\u5b57\u7279\u5f81\u3002\n* \u8868\u5f81\u6982\u7387\u5206\u5e03\u5bc6\u5ea6\u66f2\u7ebf\u76f8\u5bf9\u4e8e\u5e73\u5747\u503c\u4e0d\u5bf9\u79f0\u7a0b\u5ea6\u7684\u7279\u5f81\u6570\n* \u504f\u79bb\u5ea6\u662f\u67d0\u4e00\u7279\u5f81\uff08\u5373\uff1a\u67d0\u4e00\u5217\uff09\u81ea\u5df1\u7684\u7279\u6027\uff0c\u4e0d\u540c\u4e8e\u76f8\u5173\u6027\uff08\u67d0\u4e24\u5217\u4e4b\u95f4\uff09\u7279\u6027","6ee4456f":"**\u89c2\u5bdf\u548c\u5206\u6790**\n\n* GarageCars \u548c GarageArea\uff1a\u56e0\u4e3a GarageCars \u4e0e SalePrice \u76f8\u5173\u7cfb\u6570\u66f4\u5927\uff0c\u53ef\u4ee5\u4fdd\u7559\u8fd9\u4e2a\uff0c\u5220\u9664 GarageArea\n* \u540c\u7406\uff0cTotalBsmtSF \u5220\u9664\uff0c\u4fdd\u7559 1stFlrSF","8837a87f":"\u987a\u5229\u7684\u8bdd\uff0c\u5f85\u63d0\u4ea4 kaggle \u7684\u6587\u4ef6\u5df2\u7ecf\u751f\u6210\uff1a submission.csv\n\n\u4f7f\u7528\u547d\u4ee4\u884c\u63d0\u4ea4\uff1a `kaggle c submit -c house-prices-advanced-regression-techniques -f submission.csv -m \"I love kaggle\"` \n\n\u795d\u4f60\u548c\u6211\u4e00\u6837\uff0c\u4e5f\u80fd\u8fdb\u5165\u524d100\u540d\u3002\n\nGood luck\uff01","98f20940":"### \u7279\u5f81\u672c\u8eab\u5206\u6563\u5ea6"}}