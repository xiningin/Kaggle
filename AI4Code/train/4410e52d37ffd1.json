{"cell_type":{"bfa6e846":"code","c459ae5c":"code","69e9fdea":"code","f03c4e46":"code","f45707e8":"code","b2db09bf":"code","9c581e7f":"code","2f078836":"code","43661a67":"code","efe7899c":"code","3e6c512a":"code","9c30e7e9":"code","02b6a14b":"code","34b6e832":"code","7894388c":"code","98be3c1e":"code","3ae93ecf":"code","dec49ec6":"code","b0190ec1":"code","25d8fbf0":"code","1099b461":"code","5a012b91":"code","e5e760c9":"code","79023e7f":"code","cbd25f12":"code","1f46b5d5":"code","76160519":"code","9207d3e3":"code","756d1e6a":"code","a2812163":"code","d4a827c9":"code","2e22cb36":"code","f69dcd59":"code","e820877a":"code","b27106ba":"code","af142453":"code","b9cb0b4e":"code","311deb00":"code","558f70d8":"code","2684752a":"code","3d997b82":"code","3f15491e":"code","7607c742":"code","ff1c2484":"code","4f9ff69d":"code","38626195":"code","6c02fc47":"code","a88bdeb8":"markdown","b54d55ef":"markdown","fac04bf9":"markdown","61cde6a6":"markdown","412db6f3":"markdown","148421cd":"markdown","aa0393d7":"markdown","8b055ce4":"markdown","ded5d1f6":"markdown","82851ed5":"markdown","51f0db90":"markdown","4eb8e6ab":"markdown","32d2ac8c":"markdown","3cb241db":"markdown","3de60a1e":"markdown","ec2f915b":"markdown","957e3f5f":"markdown"},"source":{"bfa6e846":"import numpy as np \nimport pandas as pd\nimport matplotlib\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline \nfrom wordcloud import WordCloud, STOPWORDS","c459ae5c":"tweets_df = pd.read_csv(\"\/kaggle\/input\/covid19-tweets\/covid19_tweets.csv\")","69e9fdea":"print(f\"data shape: {tweets_df.shape}\")","f03c4e46":"tweets_df.info()","f45707e8":"tweets_df.describe()","b2db09bf":"tweets_df.head()","9c581e7f":"def missing_data(data):\n    total = data.isnull().sum()\n    percent = (data.isnull().sum()\/data.isnull().count()*100)\n    tt = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n    types = []\n    for col in data.columns:\n        dtype = str(data[col].dtype)\n        types.append(dtype)\n    tt['Types'] = types\n    return(np.transpose(tt))","2f078836":"missing_data(tweets_df)","43661a67":"def unique_values(data):\n    total = data.count()\n    tt = pd.DataFrame(total)\n    tt.columns = ['Total']\n    uniques = []\n    for col in data.columns:\n        unique = data[col].nunique()\n        uniques.append(unique)\n    tt['Uniques'] = uniques\n    return(np.transpose(tt))","efe7899c":"unique_values(tweets_df)","3e6c512a":"def most_frequent_values(data):\n    total = data.count()\n    tt = pd.DataFrame(total)\n    tt.columns = ['Total']\n    items = []\n    vals = []\n    for col in data.columns:\n        itm = data[col].value_counts().index[0]\n        val = data[col].value_counts().values[0]\n        items.append(itm)\n        vals.append(val)\n    tt['Most frequent item'] = items\n    tt['Frequence'] = vals\n    tt['Percent from total'] = np.round(vals \/ total * 100, 3)\n    return(np.transpose(tt))","9c30e7e9":"most_frequent_values(tweets_df)","02b6a14b":"def plot_count(feature, title, df, size=1, ordered=True):\n    f, ax = plt.subplots(1,1, figsize=(4*size,4))\n    total = float(len(df))\n    if ordered:\n        g = sns.countplot(df[feature], order = df[feature].value_counts().index[:20], palette='Set3')\n    else:\n        g = sns.countplot(df[feature], palette='Set3')\n    g.set_title(\"Number and percentage of {}\".format(title))\n    if(size > 2):\n        plt.xticks(rotation=90, size=8)\n    for p in ax.patches:\n        height = p.get_height()\n        ax.text(p.get_x()+p.get_width()\/2.,\n                height + 3,\n                '{:1.2f}%'.format(100*height\/total),\n                ha=\"center\") \n    plt.show()    ","34b6e832":"plot_count(\"user_name\", \"User name\", tweets_df,4)","7894388c":"plot_count(\"user_location\", \"User location\", tweets_df,4)","98be3c1e":"plot_count(\"source\", \"Source\", tweets_df,4)","3ae93ecf":"stopwords = set(STOPWORDS)\n\ndef show_wordcloud(data, title = None):\n    wordcloud = WordCloud(\n        background_color='white',\n        stopwords=stopwords,\n        max_words=50,\n        max_font_size=40, \n        scale=5,\n        random_state=1\n    ).generate(str(data))\n\n    fig = plt.figure(1, figsize=(10,10))\n    plt.axis('off')\n    if title: \n        fig.suptitle(title, fontsize=20)\n        fig.subplots_adjust(top=2.3)\n\n    plt.imshow(wordcloud)\n    plt.show()","dec49ec6":"show_wordcloud(tweets_df['text'], title = 'Prevalent words in tweets')","b0190ec1":"india_df = tweets_df.loc[tweets_df.user_location==\"India\"]\nshow_wordcloud(india_df['text'], title = 'Prevalent words in tweets from India')","25d8fbf0":"us_df = tweets_df.loc[tweets_df.user_location==\"United States\"]\nshow_wordcloud(us_df['text'], title = 'Prevalent words in tweets from US')","1099b461":"us_df = tweets_df.loc[tweets_df.user_location==\"United Kingdom\"]\nshow_wordcloud(us_df['text'], title = 'Prevalent words in tweets from UK')","5a012b91":"us_df = tweets_df.loc[tweets_df.user_location==\"Canada\"]\nshow_wordcloud(us_df['text'], title = 'Prevalent words in tweets from Canada')","e5e760c9":"india_df = tweets_df.loc[tweets_df.user_location==\"South Africa\"]\nshow_wordcloud(india_df['text'], title = 'Prevalent words in tweets from South Africa')","79023e7f":"india_df = tweets_df.loc[tweets_df.user_location==\"Switzerland\"]\nshow_wordcloud(india_df['text'], title = 'Prevalent words in tweets from Switzerland')","cbd25f12":"us_df = tweets_df.loc[tweets_df.user_location==\"London\"]\nshow_wordcloud(us_df['text'], title = 'Prevalent words in tweets from London')","1f46b5d5":"def plot_features_distribution(features, title, df, isLog=False):\n    plt.figure(figsize=(12,6))\n    plt.title(title)\n    for feature in features:\n        if(isLog):\n            sns.distplot(np.log1p(df[feature]),kde=True,hist=False, bins=120, label=feature)\n        else:\n            sns.distplot(df[feature],kde=True,hist=False, bins=120, label=feature)\n    plt.xlabel('')\n    plt.legend()\n    plt.show()\n","76160519":"tweets_df['hashtags'] = tweets_df['hashtags'].replace(np.nan, \"['None']\", regex=True)\ntweets_df['hashtags'] = tweets_df['hashtags'].apply(lambda x: x.replace('\\\\N',''))\ntweets_df['hashtags_count'] = tweets_df['hashtags'].apply(lambda x: len(x.split(',')))\nplot_features_distribution(['hashtags_count'], 'Hashtags per tweet (all data)', tweets_df)","9207d3e3":"tweets_df['hashtags_individual'] = tweets_df['hashtags'].apply(lambda x: x.split(','))\nfrom itertools import chain\nall_hashtags = set(chain.from_iterable(list(tweets_df['hashtags_individual'])))\nprint(f\"There are totally: {len(all_hashtags)}\")","756d1e6a":"show_wordcloud(tweets_df['hashtags_individual'], title = 'Prevalent words in hashtags')","a2812163":"country_df = pd.read_csv(\"..\/input\/iso-country-codes-global\/wikipedia-iso-country-codes.csv\")","d4a827c9":"country_df.columns = [\"country\", \"alpha2\", \"alpha3\", \"numeric\", \"iso\"]\ncountry_df.head()","2e22cb36":"tweets_df['country'] = tweets_df['user_location']","f69dcd59":"tweets_df = tweets_df.merge(country_df, on=\"country\")","e820877a":"tweets_df.head(10)","b27106ba":"tw_add_df = tweets_df.groupby([\"country\", \"iso\", \"alpha3\"])['text'].count().reset_index()\ntw_add_df.columns = [\"country\", \"iso\", \"alpha3\", \"tweets\"]","af142453":"import plotly.express as px\n\ndef plot_map(dd_df, title):\n    hover_text = []\n    for index, row in dd_df.iterrows():\n        hover_text.append((f\"country: {row['country']}<br>tweets: {row['tweets']}\\\n                          <br>country code: {row['iso']}<br>country alpha3: {row['alpha3']}\"))\n    dd_df['hover_text'] = hover_text\n\n    fig = px.choropleth(dd_df, \n                        locations=\"alpha3\",\n                        hover_name='hover_text',\n                        color=\"tweets\",\n                        projection=\"natural earth\",\n                        color_continuous_scale=px.colors.sequential.Plasma,\n                        width=900, height=700)\n    fig.update_geos(   \n        showcoastlines=True, coastlinecolor=\"DarkBlue\",\n        showland=True, landcolor=\"LightGrey\",\n        showocean=True, oceancolor=\"LightBlue\",\n        showlakes=True, lakecolor=\"Blue\",\n        showrivers=True, rivercolor=\"Blue\",\n        showcountries=True, countrycolor=\"DarkBlue\"\n    )\n    fig.update_layout(title = title, geo_scope=\"world\")\n    fig.show()    ","b9cb0b4e":"plot_map(tw_add_df, \"Tweets per country (where country is specified)\")","311deb00":"tweets_df['datedt'] = pd.to_datetime(tweets_df['date'])","558f70d8":"tweets_df['year'] = tweets_df['datedt'].dt.year\ntweets_df['month'] = tweets_df['datedt'].dt.month\ntweets_df['day'] = tweets_df['datedt'].dt.day\ntweets_df['dayofweek'] = tweets_df['datedt'].dt.dayofweek\ntweets_df['hour'] = tweets_df['datedt'].dt.hour\ntweets_df['minute'] = tweets_df['datedt'].dt.minute\ntweets_df['dayofyear'] = tweets_df['datedt'].dt.dayofyear\ntweets_df['date_only'] = tweets_df['datedt'].dt.date","2684752a":"tweets_agg_df = tweets_df.groupby([\"date_only\"])[\"text\"].count().reset_index()\ntweets_agg_df.columns = [\"date_only\", \"count\"]","3d997b82":"def plot_time_variation(df, x='date_only', y='count', hue=None, size=1, title=\"\", is_log=False):\n    f, ax = plt.subplots(1,1, figsize=(4*size,3*size))\n    g = sns.lineplot(x=x, y=y, hue=hue, data=df)\n    plt.xticks(rotation=90)\n    if hue:\n        plt.title(f'{y} grouped by {hue} | {title}')\n    else:\n        plt.title(f'{y} | {title}')\n    if(is_log):\n        ax.set(yscale=\"log\")\n    ax.grid(color='black', linestyle='dotted', linewidth=0.75)\n    plt.show() ","3f15491e":"plot_time_variation(tweets_agg_df, title=\"Number of tweets \/ day of year\",size=3)","7607c742":"plot_count(\"dayofweek\", \"tweets \/ day of week\", tweets_df, size=3, ordered=False)","ff1c2484":"plot_count(\"dayofyear\", \"tweets \/ day of year\", tweets_df, size=3, ordered=False)","4f9ff69d":"plot_count(\"date_only\", \"tweets \/ date\", tweets_df,size=4, ordered=False)","38626195":"plot_count(\"hour\", \"tweets \/ hour\", tweets_df,size=4, ordered=False)","6c02fc47":"plot_count(\"minute\", \"tweets \/ minute\", tweets_df,size=5, ordered=False)","a88bdeb8":"### Most frequent values","b54d55ef":"### Tweet source","fac04bf9":"### Extract country from location\n\nWe load the country list from the additional database we added to this Notebook. We also create a `country` column in the original dataset.","61cde6a6":"### Text wordcloauds","412db6f3":"# Data exploration\n\n\n## Glimpse the data","148421cd":"### User name","aa0393d7":"<h1>Coronavirus COVID-19 Tweets<\/h1>\n\n\n<img src=\"https:\/\/www.googleapis.com\/download\/storage\/v1\/b\/kaggle-user-content\/o\/inbox%2F769452%2F35db2dd68238bfd958efdabebc9fef8f%2Fcovid-19-4961257_1280-e1586986896105.jpg?generation=1595760042647275&alt=media\" width=\"600\"><\/img>\n\n\n# Introduction\n\n\nThe Dataset we are using here is collected using Twitter API, **tweepy** and Python package.\n","8b055ce4":"### Extract date and time features","ded5d1f6":"# Data preparation\n\n## Load packages","82851ed5":"### Missing data","51f0db90":"### User location","4eb8e6ab":"## Visualize the data distribution","32d2ac8c":"### Time variation","3cb241db":"### Hashtags analysis","3de60a1e":"## Load data","ec2f915b":"### Unique values","957e3f5f":"We merge the countries dataset with the tweets dataset."}}