{"cell_type":{"dd14f8d4":"code","03cd2f23":"code","2255d937":"code","db909093":"code","888217b7":"code","84095bf5":"code","a69dd44c":"code","07ad1a29":"code","5bc9da0a":"code","915fcb99":"code","10cac885":"code","d295e26b":"code","82c72d81":"code","55575e08":"code","41c04857":"code","c2be9af8":"markdown","8a9e46b0":"markdown","e84fdeb9":"markdown"},"source":{"dd14f8d4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","03cd2f23":"import matplotlib.pyplot as plt\nimport PIL\nfrom PIL import Image","2255d937":"import os\nos.listdir(\"..\/input\/chest-xray-covid19-pneumonia\/Data\/train\/COVID19\/\")","db909093":"image1=\"..\/input\/chest-xray-covid19-pneumonia\/Data\/train\/COVID19\/COVID19(205).jpg\"\nPIL.Image.open(image1)","888217b7":"image2=\"..\/input\/chest-xray-covid19-pneumonia\/Data\/train\/NORMAL\/NORMAL(1000).jpg\"\nPIL.Image.open(image2)","84095bf5":"from scipy import ndimage, misc\nimport matplotlib.pyplot as plt\nimport os\n\nfor dirname, _, filenames in os.walk('.\/output'):\n    for filename in filenames:\n        #\n        #print(dirname[43::])\n        img=dirname+\"\/\"+filename\n        #print(img)\n        \n        fig = plt.figure()\n        plt.gray()  # show the filtered result in grayscale\n        ax1 = fig.add_subplot(121)  # left side\n        ax2 = fig.add_subplot(122)  # right side\n        img = PIL.Image.open(img)\n        result = ndimage.median_filter(img, size=20)\n        #ax1.imshow(img)\n        #ax2.imshow(result)\n        #plt.show()\n        ax2.figure.savefig('.\/output\/preprocessed\/'+dirname[43::]+\"\/\"+filename)\n        print(1)\n","a69dd44c":"import os\nimport numpy as np\nimport pandas as pd \nimport random\nimport cv2\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport keras.backend as K\nfrom keras.models import Model, Sequential\nfrom keras.layers import Input, Dense, Flatten, Dropout, BatchNormalization\nfrom keras.layers import Conv2D, SeparableConv2D, MaxPool2D, LeakyReLU, Activation\nfrom keras.optimizers import Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ModelCheckpoint, ReduceLROnPlateau, EarlyStopping\nimport tensorflow as tf\n\nseed = 232\nnp.random.seed(seed)\ntf.random.set_seed(seed)","07ad1a29":"input_path = '..\/input\/chest-xray-covid19-pneumonia\/Data\/'\n\nfig, ax = plt.subplots(2, 4, figsize=(15, 7))\nax = ax.ravel()\nplt.tight_layout()\n\nfor i, _set in enumerate(['train', 'test']):\n    set_path = input_path+_set\n    ax[i].imshow(plt.imread(set_path+'\/NORMAL\/'+os.listdir(set_path+'\/NORMAL')[0]), cmap='gray')\n    ax[i].set_title('Set: {}, Condition: Normal'.format(_set))\n    ax[i+3].imshow(plt.imread(set_path+'\/PNEUMONIA\/'+os.listdir(set_path+'\/PNEUMONIA')[0]), cmap='gray')\n    ax[i+3].set_title('Set: {}, Condition: Pneumonia'.format(_set))\n    ax[i+6].imshow(plt.imread(set_path+'\/COVID19\/'+os.listdir(set_path+'\/COVID19')[0]), cmap='gray')\n    ax[i+6].set_title('Set: {}, Condition: Covid_19'.format(_set))","5bc9da0a":"for _set in ['train', 'test']:\n    n_normal = len(os.listdir(input_path + _set + '\/NORMAL'))\n    n_infect_pneumonia = len(os.listdir(input_path + _set + '\/PNEUMONIA'))\n    n_infect_covid = len(os.listdir(input_path + _set + '\/COVID19'))\n    print('Set: {}, normal images: {}, pneumonia images: {}, covid images: {}'.format(_set, n_normal, n_infect_pneumonia, n_infect_covid))","915fcb99":"def process_data(img_dims, batch_size):\n    # Data generation objects\n    train_datagen = ImageDataGenerator(rescale=1.\/255, zoom_range=0.3, vertical_flip=True)\n    test_val_datagen = ImageDataGenerator(rescale=1.\/255)\n    \n    # This is fed to the network in the specified batch sizes and image dimensions\n    train_gen = train_datagen.flow_from_directory(\n    directory=input_path+'train', \n    target_size=(img_dims, img_dims), \n    batch_size=batch_size, \n    class_mode='binary', \n    shuffle=True)\n\n    test_gen = test_val_datagen.flow_from_directory(\n    directory=input_path+'test', \n    target_size=(img_dims, img_dims), \n    batch_size=batch_size, \n    class_mode='binary', \n    shuffle=True)\n    \n    # I will be making predictions off of the test set in one batch size\n    # This is useful to be able to get the confusion matrix\n    test_data = []\n    test_labels = []\n\n    for cond in ['\/NORMAL\/', '\/PNEUMONIA\/', '\/COVID19\/']:\n        for img in (os.listdir(input_path + 'test' + cond)):\n            img = plt.imread(input_path+'test'+cond+img)\n            img = cv2.resize(img, (img_dims, img_dims))\n            img = np.dstack([img, img, img])\n            img = img.astype('float32') \/ 255\n            #print(img.shape)\n            \n            if img.shape!=(150,150,9):\n                break\n                print(\"Not in proper dimension\")\n            \n            if cond=='\/NORMAL\/':\n                label = 0\n            elif cond=='\/PNEUMONIA\/':\n                label = 1\n            elif cond=='\/COVID19\/':\n                label = 2\n            test_data.append(img)\n            #print(test_data)\n            test_labels.append(label)\n    #print(test_data,test_labels)\n    \n    test_data = np.array(test_data)\n    test_labels = np.array(test_labels)\n    print(test_data)\n    return train_gen, test_gen, test_data, test_labels","10cac885":"img_dims = 150\nepochs = 10\nbatch_size = 32\n\ntrain_gen, test_gen, test_data, test_labels = process_data(img_dims, batch_size)\n","d295e26b":"inputs = Input(shape=(img_dims, img_dims, 3))\n\n# First conv block\nx = Conv2D(filters=16, kernel_size=(3, 3), activation='relu', padding='same')(inputs)\nx = Conv2D(filters=16, kernel_size=(3, 3), activation='relu', padding='same')(x)\nx = MaxPool2D(pool_size=(2, 2))(x)\n\n# Second conv block\nx = SeparableConv2D(filters=32, kernel_size=(3, 3), activation='relu', padding='same')(x)\nx = SeparableConv2D(filters=32, kernel_size=(3, 3), activation='relu', padding='same')(x)\nx = BatchNormalization()(x)\nx = MaxPool2D(pool_size=(2, 2))(x)\n\n# Third conv block\nx = SeparableConv2D(filters=64, kernel_size=(3, 3), activation='relu', padding='same')(x)\nx = SeparableConv2D(filters=64, kernel_size=(3, 3), activation='relu', padding='same')(x)\nx = BatchNormalization()(x)\nx = MaxPool2D(pool_size=(2, 2))(x)\n\n# Fourth conv block\nx = SeparableConv2D(filters=128, kernel_size=(3, 3), activation='relu', padding='same')(x)\nx = SeparableConv2D(filters=128, kernel_size=(3, 3), activation='relu', padding='same')(x)\nx = BatchNormalization()(x)\nx = MaxPool2D(pool_size=(2, 2))(x)\nx = Dropout(rate=0.2)(x)\n\n# Fifth conv block\nx = SeparableConv2D(filters=256, kernel_size=(3, 3), activation='relu', padding='same')(x)\nx = SeparableConv2D(filters=256, kernel_size=(3, 3), activation='relu', padding='same')(x)\nx = BatchNormalization()(x)\nx = MaxPool2D(pool_size=(2, 2))(x)\nx = Dropout(rate=0.2)(x)\n\n# FC layer\nx = Flatten()(x)\nx = Dense(units=512, activation='relu')(x)\nx = Dropout(rate=0.7)(x)\nx = Dense(units=128, activation='relu')(x)\nx = Dropout(rate=0.5)(x)\nx = Dense(units=64, activation='relu')(x)\nx = Dropout(rate=0.3)(x)\n\n# Output layer\noutput = Dense(units=1, activation='sigmoid')(x)\n\n# Creating model and compiling\nmodel = Model(inputs=inputs, outputs=output)\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n\n# Callbacks\ncheckpoint = ModelCheckpoint(filepath='best_weights.hdf5', save_best_only=True, save_weights_only=True)\nlr_reduce = ReduceLROnPlateau(monitor='val_loss', factor=0.3, patience=2, verbose=2, mode='max')\nearly_stop = EarlyStopping(monitor='val_loss', min_delta=0.1, patience=1, mode='min')","82c72d81":"hist = model.fit_generator(\n           train_gen, steps_per_epoch=train_gen.samples \/\/ batch_size, \n           epochs=epochs, validation_data=test_gen, \n           validation_steps=test_gen.samples \/\/ batch_size, callbacks=[checkpoint, lr_reduce])","55575e08":"fig, ax = plt.subplots(1, 2, figsize=(10, 3))\nax = ax.ravel()\n#print(hist.history)\n\nfor i, met in enumerate(['accuracy', 'loss']):\n    ax[i].plot(hist.history[met])\n    ax[i].plot(hist.history['val_' + met])\n    ax[i].set_title('Model {}'.format(met))\n    ax[i].set_xlabel('epochs')\n    ax[i].set_ylabel(met)\n    ax[i].legend(['train', 'val'])","41c04857":"from sklearn.metrics import accuracy_score, confusion_matrix\ndata=test_data\n\n\npreds = model.predict(test_data)\n\nacc = accuracy_score(test_labels, np.round(preds))*100\ncm = confusion_matrix(test_labels, np.round(preds))\ntn, fp, fn, tp = cm.ravel()\n\nprint('CONFUSION MATRIX ------------------')\nprint(cm)\n\nprint('\\nTEST METRICS ----------------------')\nprecision = tp\/(tp+fp)*100\nrecall = tp\/(tp+fn)*100\nprint('Accuracy: {}%'.format(acc))\nprint('Precision: {}%'.format(precision))\nprint('Recall: {}%'.format(recall))\nprint('F1-score: {}'.format(2*precision*recall\/(precision+recall)))\n\nprint('\\nTRAIN METRIC ----------------------')\nprint('Train acc: {}'.format(np.round((hist.history['acc'][-1])*100, 2)))\n","c2be9af8":"# Below is the X-ray image of a person in normal","8a9e46b0":"**Train model\n******","e84fdeb9":"# Below is the X-ray image of a person suffering with pneumonia"}}