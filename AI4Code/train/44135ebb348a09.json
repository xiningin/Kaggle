{"cell_type":{"6e7bb1f6":"code","89e22f8e":"code","20bfb871":"code","b1e386c2":"code","62e937aa":"code","a8b10d72":"code","60294614":"code","8cf47749":"code","f9da2652":"code","71db50f7":"code","f2676526":"code","a5523b72":"code","ca0e45f7":"code","27b7bdd3":"code","2c50b600":"code","ef8df5a9":"code","6f4fa172":"code","38dd4c57":"code","b07f33d2":"code","ea013ad0":"code","cde6309a":"code","63c36117":"code","53aece26":"code","cd90d7f8":"code","63ad020b":"code","898e64d1":"code","b4009ef1":"markdown","f06da640":"markdown","78b41f73":"markdown","678f0050":"markdown","f6be4e49":"markdown","fff5e4a6":"markdown","e40793b7":"markdown","8335ce35":"markdown","739eea1c":"markdown","aa7f8973":"markdown"},"source":{"6e7bb1f6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","89e22f8e":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style(\"darkgrid\")\n","20bfb871":"\n%%HTML\n<style type=\"text\/css\">\ntable.dataframe td, table.dataframe th {\n    border: 1px  black solid !important;\n  color: black !important;\n}\n<\/style>\n","b1e386c2":"#READING THE DATA\ndata = pd.read_csv('\/kaggle\/input\/indian-food-101\/indian_food.csv')","62e937aa":"#Glimpse of the data\ndata.head()","a8b10d72":"#Checking for any missing\/null values \ndata.isnull().sum()","60294614":"bool = pd.isnull(data['region'])\ndata[bool]","8cf47749":"data['region'] = data.region.replace(np.NaN, 'North')","f9da2652":"#Checking for null values again.\ndata.isnull().sum()","71db50f7":"da = data['state'].value_counts()\nda","f2676526":"data.drop(data[data['state']==\"-1\"].index, inplace = True) \ndata.drop(data[data['flavor_profile']==\"-1\"].index, inplace = True) ","a5523b72":"da = data['state'].value_counts()\nda","ca0e45f7":"#Checking the number of unique dishes.\ncount = data['name'].value_counts().count()\ncount","27b7bdd3":"#Now, let's check make a countplot w.r.t Veg\/Non veg\nsns.countplot(x='diet',data=data)","2c50b600":"#checking which course has the most number of dishes.\nsns.countplot(x='course',data=data)","ef8df5a9":"#Checking which state has most number of dishes.\nsns.countplot(y='state',hue='diet',data=data,order = data['state'].value_counts().index)","6f4fa172":"#dist plot on cooking time\nsns.distplot(data['cook_time'],bins = 30,kde = False)","38dd4c57":"#Dist plot on prep time\nsns.distplot(data['prep_time'],bins=30,color='red',kde=False)","b07f33d2":"from matplotlib import rcParams\n\n# figure size in inches\nrcParams['figure.figsize'] = 11.7,8.27","ea013ad0":"#Analysing the flavor type\nsns.countplot(x='flavor_profile',data=data,order = data['flavor_profile'].value_counts().index)","cde6309a":"#highest prep time dishes. \ng1 = data.loc[data.prep_time > 1,['name', 'prep_time']].sort_values(by='prep_time',ascending=False)['name'].head(10)\ng1","63c36117":"#TOP 10 DISHES WHICH TAKE THE LONGEST PREPARATION TIME\nsns.barplot(y=data[data.prep_time > 1].sort_values(by='prep_time',ascending=False)['name'].head(10),x='prep_time',data=data)","53aece26":"#TOP 10 DISHES WHICH TAKE THE LONGEST COOKING TIME\nsns.barplot(y=data[data.prep_time > 1].sort_values(by='cook_time',ascending=False)['name'].head(10),x='cook_time',data=data)","cd90d7f8":"#Count based on region.\nsns.countplot(x='region',data=data,order = data['region'].value_counts().index)","63ad020b":"from wordcloud import WordCloud, STOPWORDS\nimport pandas as pd\nimport matplotlib.pyplot as plt","898e64d1":"comment_words = '' \nfor i in data.ingredients: \n    i = str(i) \n    separate = i.split() \n    for j in range(len(separate)): \n        separate[j] = separate[j].lower() \n      \n    comment_words += \" \".join(separate)+\" \"\nwordcloud_spam = WordCloud(background_color=\"white\").generate(comment_words)\n    # Displaying the WordCloud                    \nplt.figure(figsize = (10, 10), facecolor = None) \nplt.imshow(wordcloud_spam) \nplt.axis(\"off\") \nplt.tight_layout(pad = 0) \n  \nplt.show()","b4009ef1":"* More number of vegetarian dishes compared to non veg.","f06da640":"* The most used ingredient seems to be Sugar, followed by milk and garam masala ","78b41f73":"* There is 1 missing value in the region column. Let's fetch the row and make necessary changes.","678f0050":"* But we have an unecessary state name called -1 which we would remove now. ","f6be4e49":"* Now, the data is perfect for analysis.","fff5e4a6":"* Gujarat has the most numbre of dishes followed by Punjab and Maharashtra","e40793b7":"# **# FORMING WORCLOUD FOR THE MOST USED INGREDIENT**","8335ce35":"*Filling in the missing region ","739eea1c":"**Now, the data is perfect.**","aa7f8973":"* Most of the dishes are spicy, followed by sweet and bitter"}}