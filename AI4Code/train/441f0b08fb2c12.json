{"cell_type":{"33246381":"code","11e68a18":"code","59288c68":"code","9094140f":"code","00884b30":"code","b85ce68a":"code","21b9f554":"code","64b7f60f":"code","91ca9435":"code","535f314d":"code","0722d463":"code","1f16b1eb":"code","f78140b1":"code","27b15e2a":"code","44d0e9b3":"code","17ef2389":"code","de356bcf":"code","835c20be":"code","07a2c23f":"code","5a143ab0":"code","7bfc0b84":"code","e822e1ba":"code","9ea09924":"code","346b5418":"code","fdf43467":"code","5c32050a":"code","19d8ba6a":"code","8be0816a":"code","9dc9afb1":"code","71832f9f":"code","ea90b0b3":"code","c10f095f":"code","0d520655":"code","1d590ed6":"code","913b948d":"code","fce331f2":"code","7422c50e":"code","96666295":"markdown","571d61b1":"markdown","9e610fbc":"markdown","13961498":"markdown","57829c42":"markdown","6e2599e2":"markdown","d739d09d":"markdown","4de56448":"markdown","6785b2ad":"markdown","3af0d975":"markdown"},"source":{"33246381":"# General Imports\nimport numpy as np \nimport pandas as pd \nimport os        \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport math\nfrom datetime import date, timedelta\nfrom requests import get","11e68a18":"# Data structure to request from https:\/\/coronavirus.data.gov.uk\/\n\nUK_structure = ('structure={\"date\":\"date\",'\n             '\"areaName\":\"areaName\",'\n             '\"newCasesByPublishDate\":\"newCasesByPublishDate\",'\n             '\"cumCasesByPublishDate\":\"cumCasesByPublishDate\",'\n             '\"newAdmissions\":\"newAdmissions\",'\n             '\"cumAdmissions\":\"cumAdmissions\",'\n             '\"hospitalCases\":\"hospitalCases\",'\n             '\"covidOccupiedMVBeds\":\"covidOccupiedMVBeds\",'\n             '\"newTestsByPublishDate\":\"newTestsByPublishDate\",'\n             '\"cumTestsByPublishDate\":\"cumTestsByPublishDate\",'\n             '\"newDeaths28DaysByPublishDate\":\"newDeaths28DaysByPublishDate\",'\n             '\"cumDeaths28DaysByPublishDate\":\"cumDeaths28DaysByPublishDate\",'\n             '\"cumDeaths28DaysByPublishDateRate\":\"cumDeaths28DaysByPublishDateRate\",'\n             '\"newDeaths28DaysByDeathDate\":\"newDeaths28DaysByDeathDate\",'\n             '\"cumDeaths28DaysByDeathDate\":\"cumDeaths28DaysByDeathDate\",'\n             '\"cumDeaths28DaysByDeathDateRate\":\"cumDeaths28DaysByDeathDateRate\",'\n                '\"cumPeopleVaccinatedFirstDoseByPublishDate\":\"cumPeopleVaccinatedFirstDoseByPublishDate\",'\n                '\"cumPeopleVaccinatedSecondDoseByPublishDate\":\"cumPeopleVaccinatedSecondDoseByPublishDate\"}'\n            )","59288c68":"# 'get_data' function lifted directly from https:\/\/coronavirus.data.gov.uk\/details\/developers-guide \n# Had to increase timeout from 10 to 20 to prevent issues with UTLA scape loop (19\/01\/2021)\n\nfrom requests import get\n\ndef get_data(url):\n    response = get(endpoint, timeout=20)\n    \n    if response.status_code >= 400:\n        raise RuntimeError(f'Request failed: { response.text }')\n        \n    return response.json()","9094140f":"# Scrape overall UK national data using areaType='overview' filter\n\nif __name__ == '__main__':\n    endpoint = (\n        'https:\/\/api.coronavirus.data.gov.uk\/v1\/data?'\n        'filters=areaType=overview&'\n        '%s' % (UK_structure)\n    )\n    \n    UK_DATA = get_data(endpoint)\n    #print(UK_DATA)","00884b30":"# Unpack json derived dictionary and create Pandas dataframe\n\ndf_UK_ALL = pd.DataFrame(UK_DATA['data'])\n\ndf_UK_ALL = df_UK_ALL.iloc[::-1].reset_index(drop=True).set_index('date')\n\ndf_UK_ALL['cumPeopleVaccinatedFirstDoseByPublishDate'] = df_UK_ALL['cumPeopleVaccinatedFirstDoseByPublishDate'].fillna(method='ffill')\ndf_UK_ALL['cumPeopleVaccinatedSecondDoseByPublishDate'] = df_UK_ALL['cumPeopleVaccinatedSecondDoseByPublishDate'].fillna(method='ffill')\n\ndf_UK_ALL.index = pd.to_datetime(df_UK_ALL.index, format=\"%Y-%m-%d\")","b85ce68a":"# Write UK National Overiew Data to CSV\n\ndf_UK_ALL.to_csv('.\/UK_National_Total_COVID_Dataset.csv')","21b9f554":"df_UK_ALL['cumPeopleVaccinatedFirstDoseByPublishDate'][-20:]","64b7f60f":"# Data to request from https:\/\/coronavirus.data.gov.uk\/\n\nNATIONS_structure = ('structure={\"date\":\"date\",'\n             '\"areaName\":\"areaName\",'\n             '\"newCasesByPublishDate\":\"newCasesByPublishDate\",'\n             '\"cumCasesByPublishDate\":\"cumCasesByPublishDate\",'\n             '\"newAdmissions\":\"newAdmissions\",'\n             '\"cumAdmissions\":\"cumAdmissions\",'\n             '\"hospitalCases\":\"hospitalCases\",'\n             '\"covidOccupiedMVBeds\":\"covidOccupiedMVBeds\",'\n             '\"newTestsByPublishDate\":\"newTestsByPublishDate\",'\n             '\"cumTestsByPublishDate\":\"cumTestsByPublishDate\",'\n             '\"newDeaths28DaysByPublishDate\":\"newDeaths28DaysByPublishDate\",'\n             '\"cumDeaths28DaysByPublishDate\":\"cumDeaths28DaysByPublishDate\",'\n             '\"cumDeaths28DaysByPublishDateRate\":\"cumDeaths28DaysByPublishDateRate\",'\n             '\"newDeaths28DaysByDeathDate\":\"newDeaths28DaysByDeathDate\",'\n             '\"cumDeaths28DaysByDeathDate\":\"cumDeaths28DaysByDeathDate\",'\n             '\"cumDeaths28DaysByDeathDateRate\":\"cumDeaths28DaysByDeathDateRate\",'\n                     '\"cumPeopleVaccinatedFirstDoseByPublishDate\":\"cumPeopleVaccinatedFirstDoseByPublishDate\",'\n                '\"cumPeopleVaccinatedSecondDoseByPublishDate\":\"cumPeopleVaccinatedSecondDoseByPublishDate\"}'\n            )","91ca9435":"# Scrape overall UK national data using areaType='nation' filter\n\nif __name__ == '__main__':\n    endpoint = (\n        'https:\/\/api.coronavirus.data.gov.uk\/v1\/data?'\n        'filters=areaType=nation&'\n        '%s' % (NATIONS_structure)\n    )\n    \n    NATIONS_DATA = get_data(endpoint)\n    #print(NATIONS_DATA)","535f314d":"#Unpack json derived dictionary and create Pandas dataframe\ndf_NATIONS = pd.DataFrame(NATIONS_DATA['data'])\n\n\n##reverse order, set index to date and change index to datetime format\n\ndf_NATIONS = df_NATIONS.iloc[::-1].reset_index(drop=True).set_index('date')\n\ndf_NATIONS.index = pd.to_datetime(df_NATIONS.index, format=\"%Y-%m-%d\")\n\n# Forward fill the cumulative first dose vaccinations\n# df_NATIONS['cumPeopleVaccinatedFirstDoseByPublishDate'] = df_NATIONS['cumPeopleVaccinatedFirstDoseByPublishDate'].fillna(method='ffill')\n# df_NATIONS['cumPeopleVaccinatedSecondDoseByPublishDate'] = df_NATIONS['cumPeopleVaccinatedSecondDoseByPublishDate'].fillna(method='ffill')","0722d463":"# Write devolved nations data to CSV files for Dataset Creation\n\ndf_NATIONS.to_csv('.\/UK_Devolved_Nations_COVID_Dataset.csv')","1f16b1eb":"# Create UK_Total Dataframe (with datetime index as nations data frame)\n\ndf_UK_TOTAL = pd.DataFrame(index=df_NATIONS[df_NATIONS['areaName'] == 'Wales'].index, columns=df_NATIONS.columns)","f78140b1":"# Area name = United Kingdom \n\ndf_UK_TOTAL['areaName'] = 'United Kingdom'","27b15e2a":"# Back calculate region populations from death rates\n\n# The population values seem to vary slightly each day, therefore have taken median value for simplicity\n\n\nENG_POP, WAL_POP, SCOT_POP, NI_POP = [(df_NATIONS[df_NATIONS['areaName'] == nation]['cumDeaths28DaysByDeathDate']*100000\/\n                                       df_NATIONS[df_NATIONS['areaName'] == nation]['cumDeaths28DaysByDeathDateRate']).median()\n                                      for nation in ['England', 'Wales', 'Scotland', 'Northern Ireland']]\n\nUK_POP = ENG_POP + WAL_POP + SCOT_POP + NI_POP","44d0e9b3":"# Create UK & Devolved Nations Population dataframe\n\nPOPS = {'Nation': ['UK_Total','England', 'Wales', 'Scotland', 'Northern Ireland'],\n     'Population': [UK_POP, ENG_POP, WAL_POP, SCOT_POP, NI_POP]}\n\nUK_POPULATIONS = pd.DataFrame(POPS)\n\n# Write populations data to CSV - NOTE: new comprehensive population dataset for All UK regions has been added at the bottom of the notebook\nUK_POPULATIONS.to_csv('.\/Populations_for_UK_and_Devolved_Nations.csv')\n","17ef2389":"# Fill UK_TOTAL Dataframe by combining the nations data\n\n# for col in df_NATIONS.columns[1:]:\n#     if 'Rate' in col:\n#         for i in range(0,len(df_UK_TOTAL.iloc[:])):\n#             df_UK_TOTAL[col].iloc[i] = (df_NATIONS[df_NATIONS['areaName'] == 'England'][col].iloc[i]*(ENG_POP\/UK_POP) +\n#                                         df_NATIONS[df_NATIONS['areaName'] == 'Scotland'][col].iloc[i]*(SCOT_POP\/UK_POP) +\n#                                         df_NATIONS[df_NATIONS['areaName'] == 'Wales'][col].iloc[i]*(WAL_POP\/UK_POP) +\n#                                         df_NATIONS[df_NATIONS['areaName'] == 'Northern Ireland'][col].iloc[i]*(NI_POP\/UK_POP))\n    \n#     else:\n#         for i in range(0,len(df_UK_TOTAL.iloc[:])):\n#             df_UK_TOTAL[col].iloc[i] = (df_NATIONS[df_NATIONS['areaName'] == 'England'][col].iloc[i] +\n#                                         df_NATIONS[df_NATIONS['areaName'] == 'Scotland'][col].iloc[i] +\n#                                         df_NATIONS[df_NATIONS['areaName'] == 'Wales'][col].iloc[i] +\n#                                         df_NATIONS[df_NATIONS['areaName'] == 'Northern Ireland'][col].iloc[i])","de356bcf":"# Plot cumulative deaths per 100,000 population over time for UK devolved nations\n\nplt.figure(figsize=(15,6))\nsns.lineplot(data=df_NATIONS, x=df_NATIONS.index, y=\"cumDeaths28DaysByDeathDateRate\", hue=\"areaName\")\n","835c20be":"# Data to request from https:\/\/coronavirus.data.gov.uk\/\n\nREGIONS_STRUCTURE = ('structure={\"date\":\"date\",'\n             '\"areaName\":\"areaName\",'\n             '\"newCasesByPublishDate\":\"newCasesByPublishDate\",'\n             '\"cumCasesByPublishDate\":\"cumCasesByPublishDate\",'\n             '\"newDeaths28DaysByPublishDate\":\"newDeaths28DaysByPublishDate\",'\n             '\"cumDeaths28DaysByPublishDate\":\"cumDeaths28DaysByPublishDate\",'\n             '\"cumDeaths28DaysByPublishDateRate\":\"cumDeaths28DaysByPublishDateRate\",'\n             '\"newDeaths28DaysByDeathDate\":\"newDeaths28DaysByDeathDate\",'\n             '\"cumDeaths28DaysByDeathDate\":\"cumDeaths28DaysByDeathDate\",'\n             '\"cumDeaths28DaysByDeathDateRate\":\"cumDeaths28DaysByDeathDateRate\"}'\n            )","07a2c23f":"# Scrape overall English regions data using areaType='region' filter\n\nif __name__ == '__main__':\n    endpoint = (\n        'https:\/\/api.coronavirus.data.gov.uk\/v1\/data?'\n        'filters=areaType=region&'\n        '%s' % (REGIONS_STRUCTURE)\n    )\n    \n    REGIONS_DATA = get_data(endpoint)\n    #print(REGIONS_DATA)","5a143ab0":"# Create dataframe reverse date order, reset index to date in datetime format\n\ndf_ENGLAND_REGIONS = pd.DataFrame(REGIONS_DATA['data'])\n\ndf_ENGLAND_REGIONS = df_ENGLAND_REGIONS.iloc[::-1].reset_index(drop=True).set_index('date')  #need more care for fillna\n\ndf_ENGLAND_REGIONS.index = pd.to_datetime(df_ENGLAND_REGIONS.index, format=\"%Y-%m-%d\")","7bfc0b84":"# Write to CSV files for Dataset Creation\n\ndf_ENGLAND_REGIONS.to_csv('.\/England_Regions_COVID_Dataset.csv')\n","e822e1ba":"# Plot cumulative deaths per 100,000 population over time for English Regions\nplt.figure(figsize=(15,6))\nsns.lineplot(data=df_ENGLAND_REGIONS, x=df_ENGLAND_REGIONS.index, y=\"cumDeaths28DaysByDeathDateRate\", hue=\"areaName\")","9ea09924":"# Upper Tier Local Authorities (Boroughs) - Copy & Pasted from UK Government COVID website\n\nUK_UTLAS_RAW = '''Aberdeen City\t92\t40.2\nAberdeenshire\t64\t24.5\nAngus\t54\t46.5\nArgyll and Bute\t43\t50.1\nBarking and Dagenham\t152\t71.4\nBarnet\t345\t87.2\nBarnsley\t354\t143.4\nBath and North East Somerset\t50\t25.9\nBedford\t181\t104.4\nBexley\t213\t85.8\nBirmingham\t1,218\t106.7\nBlackburn with Darwen\t150\t100.2\nBlackpool\t196\t140.6\nBolton\t398\t138.4\nBournemouth, Christchurch and Poole\t178\t45\nBracknell Forest\t66\t53.9\nBradford\t582\t107.8\nBrent\t390\t118.3\nBrighton and Hove\t121\t41.6\nBristol, City of\t179\t38.6\nBromley\t268\t80.6\nBuckinghamshire\t287\t52.8\nBury\t297\t155.5\nCalderdale\t149\t70.5\nCambridgeshire\t315\t48.2\nCamden\t128\t47.4\nCentral Bedfordshire\t246\t85.2\nCheshire East\t406\t105.7\nCheshire West and Chester\t368\t107.3\nCity of Edinburgh\t294\t56\nClackmannanshire\t34\t66\nCornwall and Isles of Scilly\t157\t27.5\nCounty Durham\t668\t126\nCoventry\t247\t66.5\nCroydon\t375\t97\nCumbria\t503\t100.6\nDarlington\t121\t113.3\nDerby\t284\t110.4\nDerbyshire\t773\t96.3\nDevon\t177\t22.1\nDoncaster\t415\t133.1\nDorset\t128\t33.8\nDudley\t317\t98.6\nDumfries and Galloway\t61\t41\nDundee City\t130\t87.1\nEaling\t287\t84\nEast Ayrshire\t86\t70.5\nEast Dunbartonshire\t100\t92\nEast Lothian\t64\t59.8\nEast Renfrewshire\t81\t84.8\nEast Riding of Yorkshire\t317\t92.9\nEast Sussex\t266\t47.7\nEnfield\t249\t74.6\nEssex\t1,338\t89.8\nFalkirk\t100\t62.2\nFife\t144\t38.5\nGateshead\t276\t136.6\nGlasgow City\t567\t89.6\nGloucestershire\t400\t62.8\nGreenwich\t185\t64.2\nHackney and City of London\t184\t63.3\nHalton\t142\t109.7\nHammersmith and Fulham\t116\t62.7\nHampshire\t815\t58.9\nHaringey\t191\t71.1\nHarrow\t310\t123.4\nHartlepool\t111\t118.5\nHavering\t290\t111.7\nHerefordshire, County of\t108\t56\nHertfordshire\t923\t77.6\nHighland\t32\t13.6\nHillingdon\t231\t75.3\nHounslow\t218\t80.3\nInverclyde\t66\t84.8\nIsle of Wight\t78\t55\nIslington\t107\t44.1\nKensington and Chelsea\t97\t62.1\nKent\t1,241\t78.5\nKingston upon Hull, City of\t254\t97.8\nKingston upon Thames\t118\t66.5\nKirklees\t377\t85.7\nKnowsley\t213\t141.2\nLambeth\t251\t77\nLancashire\t1,296\t106.2\nLeeds\t663\t83.6\nLeicester\t314\t88.6\nLeicestershire\t492\t69.7\nLewisham\t235\t76.8\nLincolnshire\t413\t54.3\nLiverpool\t671\t134.7\nLuton\t207\t97.2\nManchester\t511\t92.4\nMedway\t194\t69.6\nMerton\t170\t82.3\nMiddlesbrough\t184\t130.5\nMidlothian\t94\t101.7\nMilton Keynes\t123\t45.6\nMoray\t14\t14.6\nNewcastle upon Tyne\t236\t77.9\nNewham\t240\t68\nNorfolk\t453\t49.9\nNorth Ayrshire\t91\t67.5\nNorth East Lincolnshire\t104\t65.2\nNorth Lanarkshire\t273\t80\nNorth Lincolnshire\t116\t67.3\nNorth Somerset\t132\t61.4\nNorth Tyneside\t143\t68.8\nNorth Yorkshire\t427\t69.1\nNorthamptonshire\t645\t85.6\nNorthumberland\t308\t95.5\nNottingham\t282\t84.7\nNottinghamshire\t667\t80.5\nOldham\t345\t145.5\nOrkney Islands\t2\t9\nOxfordshire\t304\t44\nPerth and Kinross\t58\t38.2\nPeterborough\t106\t52.4\nPlymouth\t94\t35.9\nPortsmouth\t93\t43.3\nReading\t134\t82.8\nRedbridge\t302\t98.9\nRedcar and Cleveland\t159\t115.9\nRenfrewshire\t126\t70.4\nRichmond upon Thames\t117\t59.1\nRochdale\t362\t162.8\nRotherham\t361\t136\nRutland\t21\t52.6\nSalford\t366\t141.4\nSandwell\t410\t124.8\nScottish Borders\t42\t36.4\nSefton\t392\t141.8\nSheffield\t591\t101.1\nShetland Islands\t6\t26.2\nShropshire\t235\t72.7\nSlough\t105\t70.2\nSolihull\t249\t115.1\nSomerset\t159\t28.3\nSouth Ayrshire\t83\t73.7\nSouth Gloucestershire\t142\t49.8\nSouth Lanarkshire\t271\t84.5\nSouth Tyneside\t190\t125.8\nSouthampton\t133\t52.7\nSouthend-on-Sea\t169\t92.3\nSouthwark\t169\t53\nSt. Helens\t207\t114.6\nStaffordshire\t897\t102\nStirling\t34\t36.1\nStockport\t358\t122\nStockton-on-Tees\t183\t92.7\nStoke-on-Trent\t229\t89.3\nSuffolk\t494\t64.9\nSunderland\t421\t151.6\nSurrey\t876\t73.2\nSutton\t147\t71.2\nSwindon\t117\t52.7\nTameside\t443\t195.6\nTelford and Wrekin\t93\t51.7\nThurrock\t187\t107.3\nTorbay\t80\t58.7\nTower Hamlets\t136\t41.9\nTrafford\t280\t118\nWakefield\t328\t94.2\nWalsall\t376\t131.7\nWaltham Forest\t205\t74\nWandsworth\t185\t56.1\nWarrington\t234\t111.4\nWarwickshire\t480\t83.1\nWest Berkshire\t80\t50.5\nWest Dunbartonshire\t85\t95.6\nWest Lothian\t124\t67.7\nWest Sussex\t448\t51.9\nWestminster\t139\t53.2\nWigan\t543\t165.2\nWiltshire\t222\t44.4\nWindsor and Maidenhead\t91\t60.1\nWirral\t409\t126.2\nWokingham\t111\t64.9\nWolverhampton\t285\t108.2\nWorcestershire\t462\t77.5\nYork\t119\t56.5\n'''","346b5418":"# Strip out Local Authority Names from the spaces, new lines and numbers\n\nUK_UTLAS = [i.strip(\"0123456789'\\n'.\") for i in UK_UTLAS_RAW.split(\"\\t\")][::2][0:-1]","fdf43467":"# Data to request from https:\/\/coronavirus.data.gov.uk\/\n\nUTLA_STRUCTURE = ('structure={\"date\":\"date\",'\n             '\"areaName\":\"areaName\",'\n             '\"areaCode\":\"areaCode\",'\n            '\"newCasesByPublishDate\":\"newCasesByPublishDate\",'\n             '\"cumCasesByPublishDate\":\"cumCasesByPublishDate\",'\n             '\"newDeaths28DaysByPublishDate\":\"newDeaths28DaysByPublishDate\",'\n             '\"cumDeaths28DaysByPublishDate\":\"cumDeaths28DaysByPublishDate\",'\n             '\"cumDeaths28DaysByPublishDateRate\":\"cumDeaths28DaysByPublishDateRate\",'\n             '\"newDeaths28DaysByDeathDate\":\"newDeaths28DaysByDeathDate\",'\n             '\"cumDeaths28DaysByDeathDate\":\"cumDeaths28DaysByDeathDate\",'\n             '\"cumDeaths28DaysByDeathDateRate\":\"cumDeaths28DaysByDeathDateRate\"}'\n            )","5c32050a":"pip install -U pyopenssl","19d8ba6a":"# Define empty dataframe\n\ndf_UTLA = pd.DataFrame()\n\n# Create for loop to pull in data one UTLA at a time (found issues bringing all in at once)\n\nfor UTLA in UK_UTLAS:\n    \n    if __name__ == '__main__':\n        endpoint = (\n            'https:\/\/api.coronavirus.data.gov.uk\/v1\/data?'\n            'filters=areaType=utla;areaName=%s&'\n            '%s' % (UTLA,UTLA_STRUCTURE)\n        )\n\n        UTLA_DATA = get_data(endpoint)\n        df_UTLA_temp = pd.DataFrame(UTLA_DATA['data']).iloc[::-1].reset_index(drop=True).set_index('date')\n        df_UTLA_temp.index = pd.to_datetime(df_UTLA_temp.index, format=\"%Y-%m-%d\")\n        df_UTLA = df_UTLA.append(df_UTLA_temp,ignore_index=False)","8be0816a":"# Write to CSV files for Dataset Creation\n\ndf_UTLA.to_csv('.\/UK_Local_Authority_UTLA_COVID_Dataset.csv')","9dc9afb1":"df_UTLA","71832f9f":"DEATH_RATES = [df_UTLA[df_UTLA['areaName']==i].iloc[-2][\"cumDeaths28DaysByDeathDateRate\"] for i in df_UTLA['areaName'].unique()]\nTOP_5_DR = sorted(range(len(DEATH_RATES)), key = lambda sub: DEATH_RATES[sub])[-5:]\nWORST_UTLAS = [df_UTLA['areaName'].unique()[i] for i in TOP_5_DR]","ea90b0b3":"#Plot Top 5 UK Boroughs with highest death rates per 100,000 population\nplt.figure(figsize=(15,6))\nsns.lineplot(data=df_UTLA[df_UTLA[\"areaName\"].isin(WORST_UTLAS)],\n             x=df_UTLA[df_UTLA[\"areaName\"].isin(WORST_UTLAS)].index,\n             y=\"cumDeaths28DaysByDeathDateRate\", hue=\"areaName\")","c10f095f":"plt.figure(figsize=(15,6))\nsns.lineplot(data=df_UTLA[df_UTLA[\"areaName\"].isin(['Wigan', 'Hackney and City of London','Brent'])],\n             x=df_UTLA[df_UTLA[\"areaName\"].isin(['Wigan', 'Hackney and City of London','Brent'])].index,\n             y=\"cumDeaths28DaysByDeathDateRate\", hue=\"areaName\")\n\n","0d520655":"from urllib.request import Request, urlopen\n\n# Scrape Populations data\nUTLA_POPS_URL = ('https:\/\/www.ons.gov.uk\/file?uri=%2fpeoplepopulationandcommunity%2fpopulationandmigration'\n                 '%2fpopulationestimates%2fdatasets%2fpopulationestimatesforukenglandandwalesscotlandandnor'\n                 'thernireland%2fmid2019april2020localauthoritydistrictcodes\/ukmidyearestimates20192020ladcodes.xls'\n                )\n\nreq = Request(UTLA_POPS_URL, headers={'User-Agent': 'Mozilla\/5.0'})\nwebpage = urlopen(req)\n\nwith open('UK_POP.xls', 'b+w') as f:\n    f.write(webpage.read())\n    ","1d590ed6":"# Official mid2019 ONS UK national and local population data\nPOPS = pd.read_excel('.\/UK_POP.xls', 'MYE 5',4, index_col=None).iloc[:-2,:6]\nPOPS = POPS.rename(columns={\"Code\": \"areaCode\",\"Name\":\"areaName\",\"Geography1\":\"areaType\",\n                                      \"Estimated Population mid-2019\": \"Population\",\n                                      \"2019 people per sq. km\":\"Population Density (per sq. km)\"})","913b948d":"POPS.head(15)","fce331f2":"# Write population data to CSV\nPOPS.to_csv('.\/NEW_Official_Population_Data_ONS_mid-2019.csv')","7422c50e":"#remove the ONS xls doc\nos.remove(\"\/kaggle\/working\/UK_POP.xls\")","96666295":"# UK National COVID Data","571d61b1":"# UK Total Statistics Dataframe constructed from combining Devolved Nations Data\nI did this before realising I could scrape the UK total data under the filter 'overview'. Reassuringly the methods produce the same data, but I have used the directly scraped data in the dataframe 'UK_ALL' for the official dataset. I've left this section in for interest and also because here I back calculated the devolved nation populations used by the UK Government to calculate the death rates per 100,000 population.","9e610fbc":"# Other data to scrape\n\n[income](https:\/\/www.ons.gov.uk\/employmentandlabourmarket\/peopleinwork\/earningsandworkinghours\/datasets\/smallareaincomeestimatesformiddlelayersuperoutputareasenglandandwales)\n\n[life expectancy](https:\/\/www.ons.gov.uk\/peoplepopulationandcommunity\/birthsdeathsandmarriages\/lifeexpectancies\/datasets\/lifeexpectancyatbirthandatage65bylocalareasinenglandandwalesreferencetable1)\n\n[indices of deprivation:](https:\/\/www.gov.uk\/government\/statistics\/english-indices-of-deprivation-2019)\nhttps:\/\/assets.publishing.service.gov.uk\/government\/uploads\/system\/uploads\/attachment_data\/file\/834001\/File_11_-_IoD2019_Local_Authority_District_Summaries__upper-tier__.xlsx","13961498":"# Devolved Nations Data","57829c42":"# [UK COVID-19 National Statistics](https:\/\/coronavirus.data.gov.uk\/) Data Scrape","6e2599e2":"# Top 5 Worst Upper Local Authorities (Boroughs) in UK for Death Rates","d739d09d":"Any feedback or questions are most welcome!\n\n**20th November 2020:**\n\nWith European governments struggling with a 'second-wave' of rising cases, hospitalisations and deaths resulting from the [SARS-CoV-2](https:\/\/www.bmj.com\/content\/371\/bmj.m3862) virus (COVID-19), I wanted to make a comparative analysis between the data coming out of major European nations since the start of the pandemic.\n\nI started by creating a [Sweden COVID-19 dataset](https:\/\/www.kaggle.com\/vascodegama\/sweden-covid19-data) and now I'm looking at my own country, the United Kingdom.  \n\nThe data comes from https:\/\/coronavirus.data.gov.uk\/ and I used the [Developer's Guide](https:\/\/coronavirus.data.gov.uk\/details\/developers-guide) to scrape the data, so it was a fairly simple process.\n\nThe data includes the overall numbers for the UK as a whole, the numbers for each of the devolved UK nations (Eng, Sco, Wal & NI), English Regions and Upper Tier Local Authorities (UTLA) for all of the UK (what we call Boroughs). I have also included a small table with the populations of the 4 devolved UK nations, used to calculate the death rates per 100,000 population.\n\nAs I've said for [before](https:\/\/www.kaggle.com\/vascodegama\/sweden-covid19-data) - I am not an Epidemiologist, Sociologist or even a Data Scientist. I am actually a Mechanical Engineer! The objective here is to improve my data science skills and maybe provide some useful data to the wider community.\n\nAny questions, comments or suggestions are most welcome! I am open to requests and collaborations! Stay Safe!","4de56448":"# ENGLAND REGIONS DATA SCRAPE","6785b2ad":"# UK Local Authority COVID Data","3af0d975":"# UK Local Authority Populations, Areas & Poulation Densities\nObtained from [Office for National Statistics](https:\/\/www.ons.gov.uk\/peoplepopulationandcommunity\/populationandmigration\/populationestimates\/datasets\/populationestimatesforukenglandandwalesscotlandandnorthernireland) (2019 mid-year estimates)"}}