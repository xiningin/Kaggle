{"cell_type":{"8a2dae47":"code","419fb0c7":"code","bfb34ed5":"code","2e99af67":"code","c29f9413":"code","1f14b7c5":"code","52786793":"code","15ccfa05":"code","9a7da443":"code","27550462":"code","4a2a41c2":"code","2f718515":"code","ca597c71":"code","452f1f1b":"code","ba5037d7":"code","16b7541b":"code","3ac4217c":"code","61a292be":"code","2e9a0f3f":"code","0bdc7f93":"code","47eee4a9":"code","65fcb86c":"code","e49fac0e":"code","71bee9f0":"code","ea012e54":"code","4bf9f8f8":"code","51819d71":"code","89899eb2":"code","2691dd4a":"code","3f47d72b":"code","0ad27a06":"code","df2da714":"code","a54edaf8":"code","37196000":"code","84456618":"code","05997896":"code","3a8582a3":"code","2a50ba4b":"code","345a31f0":"code","749136f8":"code","e2018730":"code","b442b554":"markdown","ec3ad7fb":"markdown","88217ea5":"markdown","ad16a6f1":"markdown","08447cd4":"markdown","b0823ed8":"markdown","eddac0e4":"markdown","1eb9c7b8":"markdown","3386b0d7":"markdown","d1d58175":"markdown","f74e0810":"markdown","639e1487":"markdown","36976060":"markdown","dd45c032":"markdown"},"source":{"8a2dae47":"import pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt \nimport plotly.express as px\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import preprocessing\nfrom sklearn.datasets import make_classification\nfrom sklearn.metrics import classification_report,confusion_matrix\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\n","419fb0c7":"df=pd.read_csv('..\/input\/microsoft-stock-data\/MSFT.csv')","bfb34ed5":"df.head(10)","2e99af67":"df.shape","c29f9413":"df.info()","1f14b7c5":"df.describe().style.background_gradient(cmap = 'copper')","52786793":"df.describe(include=object).style.background_gradient(cmap = 'copper')","15ccfa05":"df[\"High\"].value_counts()","9a7da443":"df[\"Low\"].value_counts()","27550462":"df[\"Close\"].value_counts()","4a2a41c2":"df[\"Volume\"].value_counts()","2f718515":"current_decade =df[df[\"Low\"] > 0.091146]\ncurrent_decade","ca597c71":"current_decade =df[df[\"High\"] > 0.098090]\ncurrent_decade","452f1f1b":"print('Max is:',df.max())\nprint('Sum is:',df.sum())\nprint('Mean is:',df.mean())","ba5037d7":"games_with_notes = df[df[\"Low\"].notnull()]\ngames_with_notes.shape\n","16b7541b":"df.isnull().count().plot.bar()","3ac4217c":"ax=sns.regplot(x='High',y='Low',data=df)\n","61a292be":"p = df['High'].value_counts()\nprint(p)\np.value_counts().plot.bar()","2e9a0f3f":"p = df['Low'].value_counts()\nprint(p)\np.value_counts().plot.bar()","0bdc7f93":"px.parallel_coordinates(df, color=\"High\",) ","47eee4a9":"#Distributiong of Age variable\nsns.distplot(df['High'])","65fcb86c":"p = df['Volume'].value_counts()\nprint(p)\np.value_counts().plot.bar()","e49fac0e":"sns.jointplot(x = 'High', y = 'Volume',\n              data = df, kind = 'kde', color = \"red\", alpha = 0.65)","71bee9f0":"sns.jointplot(x = 'Low', y = 'Volume',\n              data = df, kind = 'kde', color = \"red\", alpha = 0.65)","ea012e54":"sns.jointplot(x = 'Close', y = 'Volume',\n              data = df, kind = 'kde', color = \"red\", alpha = 0.65)","4bf9f8f8":"plt.figure(figsize=(10,10)) \nsns.heatmap(df.corr(),annot=True,cmap='cubehelix_r') #draws  heatmap with input as the correlation matrix calculted by(iris.corr())\nplt.show()","51819d71":"df.hist(edgecolor='black', linewidth=1.2)\nfig=plt.gcf()\nfig.set_size_inches(15,15)\nplt.show()","89899eb2":"plt.figure(figsize=(15,10))\nplt.subplot(2,2,1)\nsns.violinplot(x='High',y='Volume',data=df)\n","2691dd4a":"df.drop(['Date'],axis=1,inplace=True)","3f47d72b":"X = df.iloc[:, :-1]\ny = df.iloc[:, -1]\n","0ad27a06":"# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX = sc.fit_transform(X)","df2da714":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1)","a54edaf8":"X, y = make_classification(random_state=42)\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)\npipe = make_pipeline(StandardScaler(), LogisticRegression())\npipe.fit(X_train, y_train)  # apply scaling on training data","37196000":"lr = LogisticRegression()\nlr.fit(X_train,y_train)\npredictions1 = lr.predict(X_test)\nprint(list(predictions1))","84456618":"print(classification_report(y_test,predictions1))\nprint('\\n')\nprint(confusion_matrix(y_test,predictions1))","05997896":"# Fitting Logistic Regression to the Training set\nfrom sklearn.linear_model import LogisticRegression\nclss = LogisticRegression(random_state = 0)\nclss.fit(X_train, y_train)","3a8582a3":"# Predicting the Test set results\ny_pred = clss.predict(X_test)\nprint(list(y_pred ))","2a50ba4b":"#probability of all values\npr = clss.predict_proba(X_test)[0:10,:]\npr\n","345a31f0":"#  Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\n\ncm","749136f8":"sns.heatmap(cm)","e2018730":"from sklearn.metrics import accuracy_score\nacclr = accuracy_score(y_test,predictions1)*100\nacclr","b442b554":"# Read Data\n","ec3ad7fb":"#### Make a data splitting","88217ea5":"<h1><center>If you find this helpful, don't forget to vote\ud83d\ude4c\ud83d\ude04\u2600\ufe0f<\/center><\/h1>","ad16a6f1":"####  Confusion Matrix","08447cd4":"![micro](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAoHCBUWFRgWFRYZGRgZGhwaGhocGBocHBocGRwZGRwcGhocIS4lHB8rHxwYJjgmKy8xNTU1GiQ7QDs0Py40NTEBDAwMEA8QHhISHzQrJSs0NDQ2NDQ0NDQ0NDY0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NP\/AABEIAKgBLAMBIgACEQEDEQH\/xAAbAAABBQEBAAAAAAAAAAAAAAADAAECBAUGB\/\/EAD8QAAECAwUFBQUHAwUAAwAAAAECEQADIQQSMUFRBWFxgZEGIjKhsRNCwdHwBxRSYoKS4SNy8RVTorLCFjND\/8QAGgEAAwEBAQEAAAAAAAAAAAAAAAECAwQFBv\/EACYRAAICAgIDAAICAwEAAAAAAAABAhEDIRIxBEFRBWEikRMUgQb\/2gAMAwEAAhEDEQA\/AOUbeG1Hy13QGYgkuCxGHD6eNm07LmyyEpF4hAUsJF64DksYH\/MZs26BeFNRl+kmvI+cehGals4JRcdIAq1rKPZkjFwCzPmquBbrBEpCBdcka0cPiW1f6EBEgkkrBBOX4WyiC1lAY1ySd\/yh8a2hXemOpLlvdzOROITxzI4RJCVJLDDHhBbKgsEo717I4KJz3F+kGlSwKnhVqZV4lw8K70x1W0JCL6CQR3eL3dTqH5jhFWWi87uleIfTIfHnErTKZTJBIPeWkaA5aE184abMExQF0JBoGPhANRXceu6kJJp0+hNpq0TskzFRIcMA5PhqQOBOcTmK95PjSWbV9PrKCTpTkXfEBT4A8\/SIWFr4UpI7j3tSTg+ufWHW6Fd7CIu3BLfGp1DOw4vXkRFOenAH\/L1fpBFTO8pfurJfhr5PBZqSoFQxT3Q2b4\/DgYF2JnX9gtqX0Ks6zVHel70HEcj5HdHVLTHk1htSpK0TEYoN4bxgUniHHOPWbPOTMQhaKpWkKB3H4xSNE7QBSYGRFlaYCpMMYEiIkQYiBkQxAyIiRBCIYiGANoiRBCIYiGIG0M0EaE0MGQAgdrtKZaCtVdAMVHJIiwSACSWADknAAZxxm2NoqmqIHhHhyYakfiI8hCboRnWq1qmzL5L3mJ0pkPygFvPOBzUhPIkcQc\/+piVwJG8HqPkxiypAS4VW8li3Rh1HSJE2ZSnvca8x9CJzk1fEqx3HP584ZQLUqRnwoYIhDpLcQcyc21p6CGxoryU1Y8CdzUiNUumum9QOA4bt1YmskkMAGpuD4FRxNTjvg86zFCb4LrGJ3ZsPPlC7FdDmWFMV0IAcO9MirXOBW5iARQjw6qG4ZDeeTxCSsJL+ImiiTRs2\/Ed+HrEJiWUW72Y3jUmEtaH3sgtZIGScQBhxOp3mApGQoDgfgIMlDHvYHDQHFvrfDzVghh1+UWotoTlQ6CEEEY+sWfYiZ3gWfEUxzzjPFccRjD3ITS+0CbX7Oi2b2gnSTWrm8SQ5JyKjiesNPnC0rCrgRdHuii1v4lOaAc68IxJ+0ZagAk47i6RmYlKnpHgUOBp64xjwgncSrlVSNRYFX9ahs9CIqJlv3yO6aJ0b4E4scmh5VrQpSUqSFJcFaSpiUg1SlQwvYYYO0aVqkIUpRs19SLl9QUA6AMQpqKA13w+dOg4aMr2bGhpiRFtE5CkKUQQtLAN4Upw7wOIP1pA8KpZ8Sndkx+ucCXLExQCaEB1H0H1pDceW0K3HTCyCR3mLqqU6DK7qAMoD7O9eWhsfDqBnxOPSIzSoMhTgvStK4kaGnpBUJBOhzZgkhvI4dep62Jr2g1lWS+bJKlagD5CGnSu4CPGo13vVuQHlCtEl1C4141OhAbHmwhrNP73ewSCA+ROL\/WcJJ+wbT2iSQlQdmAFRwx4FgIjKN26Hp4hv3evTdEp8ssCMVeIajHywiUsJUk5OoNubMc36wITBzpddxb9xxjsuwm0XC7Oo4f1JfAnvp5Eg\/qOkcgioKTvPM+Ejc1YLs+1KlzEzU+JCnbXIjgpLj9UMadM9VWmAqTFlExK0JWgulQCknUEOIGtMUaFVSYioQZSYgRAIERECIMRECmHYAyIYiCXYZooRC7DhMTuxR2vbfZIp41OE7t\/wG+C6Aye0O0cZSMmvaE\/h4DPew1jnJaLuOJccx9GLF1yVHNxniagDXExFco+I\/lVuANOuMQS2V7ta5gg8sh5xBSyoNoMeFKecEml\/7QX64\/GsJQCHcNm3kfhTfB6H7AoQz6Ygati9XAwgCSSaYDA7sgN2UXJMkFlLPddmOeTn6yh9oSwkjmlsOB4A+sPsTdaRFBQEMaJL5O\/8xSVaCRdJYCm88eTRNayreR0AwblEDLukE1eh+H1vhrYNJAEIemAHVoshrrDFNeWYiM8Om8MjXgfrygSFMQfow2qEnYNdcYdCKOWxbf0gykOXSKGohlyrveNdeGvKC72hVWmBUg4gYecERLSQ7xZyckAdSeCR8WEVJiC\/cw3sS+fDhCcf+hb96MGWlu8YdE0nLpjXdBLSkuxGEViC9I4Xo7VT2wyBmDXURubJ2quXLmBTXFqSFkOFLYvccYDMxiS1KWoJNSSz+9zOeta74t21QolJBQmhIPve8SMq8usS6a2VtHWGbZlWb2syekTlqUohOCRW6i5QkAABxrnhGZs3aSFDvOFkuXr57g0c2kkFks2YOH8RIpfwuFfhOPI5xWOUoe7REoRkjrEITMvKxTgngM+Z+EAQgBQSo9wqAKtA7VbLGMKwzlBQS5AzOBSAHPlBZdvJW7ukm6EuHS+7MDdpGzyp1ZisUlbR0CZ6AtZBJS5CFGpupdn+tIiuz0SffNToc2O7ARWXcpcLg4oOIAxMWLPNGLlg7btXEaWqoy92Ss07F3dIYDecudIUxARhgQAeOvo8MuUaUZR7xfr8oPZ1hRBVvJfOme+o4tCD9kpifeTVnpqlNOrmkDu55Bg+7L0PWCoTcVdOFPLvFMKWmjEULluA7w81HrpAI7bsVbL0tUlRqgun+xRw5Kf9wjoFojz3s5avZT0KJp4Ff2qYP6H9MejrRDRrF2iopMDUIsLTA1JihgCIYiClMRUmAQK7CCYI0OExVgAmrCUlSqABzHG22eZiytVBluAb5nz1ja25abyvZp8KfFvODRjXHO4Ybz3gDwFPpom9ksrBJBCtKgaMSkk74CoXqe7UU97Tk0WlpvkgYEkE6kgFuDwFarvhDqooY0DMeGHygEV1kBqOSGbf9PweACWaFWILNkPdz3tWLfsWdRxBBJ3HFhzVSITjVSEjGrcQzqOXDfxhoTAKWAXJ5+VM9N8WLZY1TJaZ1Ak9xTF1BaRiv8L0IA65RWTKoFKqc92RAH1hF\/Z20fZrKVC9LXRaNQHqNFB3f8sFMdoyEEMA3HdEFpd3i5tGyhExSEH2iT3kKGBBqxOSg4cY1gKJFe\/\/ABSHyXoTX0ryVE4B3odISJABIVlUcPr4RZmKShVVJSFDMgVAxbFmzwoIr2q3y2BSoEg5VpgcKb+IEFrtsEpdVoOUEDTR8emLb4GVtgG3mp5acopHaaHpeJ3D5wRdqSwUxDlq5HQxPOKfZfCVaREBjd6cNOXyid4QebKWoOWphSn+IlKlghwDFpsjRzRnEUe8NFYjgrEQkpRkbp\/CrDkr5w8mReq7E5EZZVHyETRZipQSRieTDEvHnWno7Xa7LdmQQkqYJV4U6h8VfKMyfZVoLjLAjKLU20G93CLqRdAIow8w8P8AeUrIC+61WyOlcofqhJu7RTRMGdC9VZV1T8m4RNSHLnDAHItixi1b5abt4CpwbOKciUpwE5kCoBFaVBh9DT5b6LSVMglVSvug53QzvrVhyMCnS0gukkpoxIYksCXGRygluUARdwSLo4DPnU84roWQN\/x3jOBK9iCImKUXdlDDJ200MaSbYxY1AN18y3ifXPrFCzgPeZrtWyfBLc2iRVgFv3QwIqQTWuowGNIabQpRTOjs1oSsFi\/uivh15V8otLk4qTiCEtkQK\/OOWkKUjvDEM2YL15ihEdDYbaFhsFAGmhUcRqPnG0ZWc0410XQoLQXzx1cnEbwBCQCUscQxw1q7fqPpD2iWxvINcG1AAS4315+lgocJUmp9U5gdUtFEAkJz33SNDh6t9GPStj2j2khCjiBdVxTR+dDzjz2WkUOIVjxq3y6R13Y6aWXLO5XRgfVJgZUezbWmBKTF1aIAtENM0KxTDXYOUxEpigBBMVdpWm4hx4jRI3nPgMYvkZnKOat88rUVZMyBoBmfU8hCbEzNWg1xxF4+bcT9ZQOYlzdGGfK7QecXZqCxQnEhyf7qdTFebkEY5nJIUFCuruKQIllRRY3U404JAJD9OvnETZ0pYPjeSo5nThQGLK0JQATm4c4kqAL7y4itOllfeUGS6TdpUHukq5PTroGIrLBW12gIYqbyTria+uUZaGSkjHBXHMnWoi5aVpQkqUQkJVnv\/wA+UcttPagV\/wDVeooqBe6HpinOta64QSko7BJyNW1TEIe+QAcN74+YMZFo2mgCpJIYsnOj1VvGmsYc2atZvKU5zJwESmKF1KgHI7pJFBdqKHFwRjphGMszb0bRwpLZsTe0cwyky0JQhCCVpcOQ7ghJzBrRsYz5NvUtV1SibzgKOR91kigrxxinLlFTknAZ+kJN0fmI0oBzzjNyk\/ZooxXSIokEljjnuaCyyEuCXf3R8ThBrSpwFE0UHIwF4UVxrFcpumtHyONN2I5thC6H2OmZkO6N2PWLNhILoPhVnkFZV3\/KKswum8B186YaQFJKiHPCuHCGFXtnUbMtIKShT3kUIFOBc\/KFPkkqJSbo0r84zpM2qZv6F8fxeka5bUdRHVikmtnLkVPRmy5CgGCS50qPKkBULiCc1UGYYY7qw1gUsKF1bA0KkqamYJGsbS5Upk+2QCkBgUrKTq7ihNc3jy3\/AB2ztWzllLxo3CteBPxhITTIvWleLjERat1lQVkSFLKQK3wlJBOQUksqmbJ4RSmJUg1BByy6RrGXwTQ6FkE3Sw0xB5RakLSHWae6Kum8oYjRg\/WM8TMiH4UPXPm8WbTS6gEd0Vct3ixONDkORg5WPix\/ZOoDLF8m3GKqyAaHAwpcwpqC27LmIkEhWTE0DVBJ3YiHyEo7LKSLgf3i\/JLged7pDpcsDXPf\/MAtPip4aJByZNMvqsHsk3vEtiwA3\/5aKUkyZJraDYJAyJcj+SKUHnB5Ju95JZQLpOjUw6wKctJLpLEDrkONBBZZIDEYltxaKRi3Zv7J2lfIQoMoV3FgTTeVFNI1kouE\/hOP5SXD8CQOfGOOQjeWeh0+qVjqdjWorSULPebEkd5Phz0YV3xpGX0ycfhoS5OCT7w\/5Fn+J67o6DYCrs1B1N1XNx8jyjzrbPaoB0SKgN\/Uz7ppdfQ+9m3OAbP2mpCULvMpRKiq8Qp3I8TufDrBzT0jRY2lbPfFIgK0R5ns\/wC0xaGE0pWPzBlfvQG190x1GzftBsM0spZlK\/OCE\/vFB+poSlRXE3yiIlEWpakLSFIUlaTgpJBB4EUhloYE6RamhUYe1ptLg4q4ZJ5+nGMlcs\/qUFMNA+fx\/wARozkuSo6n9Sv4+G6AqQQaVWX4AfL1OlWV3sTKC0sWT4iASTlj3jv0HyissBCAMTSmZKSkk+RrhGiZd26lIvKKTzJu95RyFPgIy9qW2VZkKM1TrXfAYd5VVUSMEpF5OeesVZNCnyQlPtFkApIOPdQL11WONCanywjltr9qUVRJF4VSVlwGf3RiaPUxj7X21NtCnWWQDRA8KX\/7GmJ8ozZgABBxcNqcuWcZyyekXGC9hZ8xa1ErUVEvUlz\/AANwh0rF0Ggb40PmBFZcwuCKBgeD0Lni8RlqF5nclxurUebRm5GnFvsR7z1oHAfAZ8qxKQzKTjS8NHS\/M0KoAFOz4NQmg5fxEpE8JUOL1wbRhWJ5I0pkiCSHr6DTcIgSkVd8Qw8q4dHiNrJCinIGmQbKg3Q6JBIcV+s9IdphVFiRMK0rQKEC8lnq3iBc1cekDNiWE3iGHnE7Mi6QoVIyFfPCLs1SsAQE5HEkGGv0TKVFKRKN3cYimWkYl\/7a+ZpDzEsplEnMP8BDlFHcBvpoKfsV\/C1ZpgBAwCqFySQcjo3zi3Ktwl92Yl1A4sMMoyvaozc82G6NGz2iWpIKwm8KF92kWnXRLTfZUWLiAkUUrvKajDIfWkC+8KSPE40V8xUwNdqUSSW4MKbhoIh7QEhxhprzjM0plyROTgp0O5cC9U7nEPa7NVIQVKGLkJAYtUAKLxWVMS1D5EH5ecHsM4S03y4vXgGCXODveyfTfEtIE37BSJaQq+RRHeO8jwht5aKq0El3Bc1ObmpLRcmzVBKQWJV3iCHDYJG7WKt5J90pbNNR0MQ0WmCVMNRloRh8oPZlCqsLozwvGia835RFUsqPiCvJXQ1g8uylQCAKl1HVh3U4\/qPOF1sqMXJqKVlUEpdsOoPwMHs8wVLMwfc+A3ipEH\/0qYMAa41FeNYaZYlgMUteKRlU1AGOZPlCU4\/V\/ZpPBkirlF0U5hU75U4Fq84vy7UUhiHF2r4uRrzMEGw7RlLU2YpXzgc3Ys+pKFh6mnOBZoXqS\/s5XKDVWiyjaCEGjlJGBFQ+UVbdtMqBQmiR1JwPBNTSKapdXfSnCG9lv8o1bbCMYp2RJ+HnWNG1rUkIDUCEYjMgqPrFAy98WrRaCpTpcYU3BISPSGi2CuhXutw4P6P0iF1sD8IIVagekQKX\/mukMks7P2rPs6r0mYuWcXSopB\/uGCubx2ezPtVtKRdtCETk\/iHcXxdIKT+0cY4C4rWImSo6QrY6TPTp32lyq3bOulBeWkAUbJ616RRV9pKg5TZkuS7mYS5a7gECkcGqUSX+soQkn6MPlIXGJ2Ce388eFEsFwokhZJpn3hr5Rztv2kucsrWolR6DcBkKYRS9kry1iaUFsBnDUm9MlxiFVNbB3ofrk0BnrALs7\/GsFCToMPOI2iWo4D6w9IUkwjVgFOpIJLeL4GgHE9IGJrF0iup11Ay84OmzKIIIaoOOjj0PlDCzKGCX4kN0eM3FmtojOlkqJFcxnQsR5GHkskgqIo9BU\/IRKeFBIKhkx0zag3N0iqlULoOy7aJrgKCRXul6tdw3YN0iEhV571W6dMIikOlad18fpx8iekVkrIwMFg1apGtIUA4NMxBFTk3bwrdoeBw83EZAd6mLdmYKY4KF088PON4y0YvGr2xrTOvYCJSE0Y4Kw4xH7urTnlEpcn8wppX0gt3Y6VUgYlh2MWZcmW1TXjDmSDViaPUsGzweEJf5R0J83ihNr6RtMhKQkAG83fJfxElgARRg3OATrMpBZQZTAkUpeAUMNxB5wRagovfTrUkV\/VDLQtRKj3ySSSCC5MZJl06K4QVKCRiS0HmALmBI8Kack1UYnKSUJUsghWApmcSOAidj9mlCjMcFQISyXKjQsahhk+\/OJkykU5k9SlKLOOGAwFRXSITFNTPPiawcy5YQlQWSsqZSMmFXfTw+ekDXblKACglQDYpDsC7XsQOcZ2yqT7IITeoGJJ514x0Gx0VUrJ7qQdA1edIyZS5ZdQSUkPUKJFaBgrOpOOUa1htcpCEpvig8zjGWblxpI9H8dGCzcptJI1TAJaL8+UnIErVwSKf8iICdoSvxp6xLYtsl+1mLUsCiUpdQFMSz72ji4yipOvR6H5fyof6rWNpt60degCKO1Zt2Us\/lI60+MJO05OUxH70\/OMbtNtBBlXUqSSTkQaDhvaPOw4ZvIk0+z4eGOTklRzOzrGu0TkypbFa1EJcsMzU5BhGtt3snabIlK5yUXVG66VXmO+gaLf2XWa\/bkq\/20LXzICB\/2Mdz2kmi17PnkVMuZMA4ypikj\/ixj6eLrR6taPHb0dDM7H2xMn26pYEsIvklabwSz1S7gtlC7CbE+9WlN8f0pbLmPgQD3Un+4joFR6N2p2wJmy581PhXeQg6pEy4lQ3KCb36odhR5ins9aPu33u4PY63u8167eu\/hvUf4RkvHV2nZ9ql7LRMNp\/oLun2F38asL+Le82ED7N9h7RaUe1KkyZRwWoElQGaU07u8kc4af0Tic0TDPHSdpOyZsqETE2hE5C5glukMyiCclKDd05xpp+zG1GYlAXLulJUpfeuoYgAMzkmrD8prg75IOLOJeHBjobP2MtK7RNs6AlXsVXVTC6UCgIahJJGQjStn2a2tCCpC5cwjFCSpKjuF4MTxIgtCo44KiSVRY2bsmdOnewloJmOQUnu3btFFb+EDN439q9gbXIlLmqVKUlCStYStTgJDlnQHpBYUc1ehwqLexNh2i1KKZCL13xKJupS+qjnuDmNm29gLfLSV3ELapCFur9qgl+VYdhRi2CxzJywiUgrWcAPUk0A3mLu19hWizXTOQEhb3SFJVUYihpHW\/Zbs+YgrWpDJWVByQ4oggEYjA9YHaezNumW5Sp6VTbKZxUAZoa5eLMi86WScmwiXLYcdHn9o8JfKvSMpKCTQEx6n2z7HTPbFdlkD2Psw4SUJCVJvXu6SCXASaR5WpZOJJ5xMney4qizJTdKSWDYgmrGhpwiC5SQSCSSMgPiYVnLc4la\/dVqGPFNPRomtAnugiGIokcyT6NEkqJHibgG9IBZ14iJnxY4xrFozd3RoJALHUeYpDTk3SFJpkeBgNlVinHMcR\/HpFxRdLa\/GNVTRjK4ysrIVedLl8q9YACQ436wkrIIL1Br9cIsrkBRd8Ynsb0VQob\/APj8oiq6SAxc6BL9WhymCWeUQb10k+7TM4fExibinLAISCoXaBjnm+tfSGmTw7YgUqAX3wRNkW73FvwiaLAWqgvvLeohgiopaDijo4gKgjIKHMH4Rp\/cFZIH7xEzs9TeFI31PpCaHyK+yrMFrSli168XaoGv1nHXGyI\/An9ojK2DZrpUosWASDXiceUbke74GCKxcmuzxvOzN5OKfRQtFllpSVFCGAJ8IyjS7NbCkqs6FTJSFKWL5JSCWUSUjgzRk7XdSQhOMxSUD9RYx3tmlhICRgkADgAwj5v\/ANP5H+Ljjx6fej2\/weJzi5z36M1XZ6y\/7Ev9ojiO29kkylpTLQlJZywbEn5ecemrjyftnab9pXoksOQA9QY8P8ZkyZMv8pNpL6et5cYQhpI6r7JpNxNqnnBKUpB4BS1f+Ys\/ZravaotkhXvKK\/3gpV5pT1jnOzvaiVZrJNs5SsrmFRvAC73khIxL4DSKPYzbybJaDNWFFCkLSoJqasoFiW8QHWPojyaOr2iU7N2Z7JJafaSSo5hKhX9qWTxUTBe1JubFs6MLyZPmm+fOOK7YbcNrtCpgcIACZaTiEjUakuecbfbTtNItNmkyZJU8spcFJAZKLo84Vio6DtbKu7LsMklr6rOgnTuOTEftdtCpcuzWdHdlEKJSKA+zuJSmmIF524Rjdvu01ntNns8qzrUoyy6nSpLXUBIZxXONeT2qsFus6JVvdExPvMoAqAa8haQbrjEGnGkFjo8zsqjeQlyxWks9HBZ21qesep\/bNtGYlNnlJUUoXfUsAkXim4Eu2IF40jlNvp2ZLRJTZFqWsTEqmLVeLJANHICcSKAZRc+0\/btntSpBs8y+EJXe7qg14pbxAaGB0Bv2S0qk7BVMlqPtFpJUtzedc32alXsXCKA5MI4fsRtSZJtskpUplzEoWlyygs3TeGZDu+6NzsL2pkJkqsVspJXeuqIJSAvFKmqA9QrJzGrszZOyLNNFo++pXcN5KCtCmLULJF5RGVMYANXau1JNh2qJi2Si0yAFqA8K0rICi2RCUgxl9oexs6YqZa7DaTNTNvKUgLqoKe8lKwbqxVgktSkYG0Nr2faG0L1oUZdnuGWhRVdKbrqSomoBKicaVEdX2Tstk2cZs1VvQuWpIZN5NcwQlKiVqoRQZwWFD9n5ypGxlrld2YEzFEtVKgWJ4gekcJ2W7R2iTaUKM2YpKlMtKlqUFA4uFHHMHGN7sr20kpnWiXPS1ntExakk4S\/aFThYHukEO2B3EtbsvYuyCemai2IMkOtKSpBLDK+FMRXFngtNhWjV7QLVZ9pWWala0y5xIWgKISpYIQVFLs5SsftjF+0622iTbEeznzUImISWTMUkXgShTAFhS6ecUO3\/AGkRPtElMhQUmS5vjwqWq7gcwLorvjR+1K0S50izTkLSpQJBAUCQFpCqgHIpbnD0Bsdt9oTzYLPaZMxcsum\/dUQ4Wli7YssDqY8fnIq7iseodmdpSLbYV2GYsJWxuvj4r6VJfxXVCo0aOT212XVImJllaVlSCsEBhRV0hnO7rA9gjm7lMR5\/LhE0odJS4xCh6HybpGidkLGAT1MN\/pqxknk8FCsyRKOo6wVCG\/yPnFxdkmDIeUR9hM56Bn8vqkLoHsaSopY3XP8AcPnGhKmIAYocgu70I0NYz0Sl5326\/GLH3YG6DeIzLMa8d8aKTM5QTQVc1KVXghLEYEjHLGCWTaAQm7dQWJbvJw6xTnWdISLt69m+A5NFUI4wcn6J4JrZ1oQBmr9xirZRfWpZwBupfzP1qYDbbcgJZKgSaUOu+Cy7TLQkIK00xqMcSTzgtF7LoQnQRIARnnaskB746EnoBAVbclDAKVwHzhWh0zXeAz5nQRjr7QfhQeam9BFKftiYoFLJAIaju3F4XJdDUWWJG31IDBKSCSau9S\/1wg\/\/AMnV\/tjqflGDCaOiPk5oqovRlLx8Unbjs2k9oP6suYZbiWSq7exJDCrZYx0CPtBTnIVyWD\/5jhWhNHD5Pjw8mXLKrZ1Ycjwx4w0jvj2\/ln\/8l\/uTHEWy0+0mKUfeL9a+sAaEIjD4mPC24KrKyZ5ZFUmO0O0KFHTRkM0NdiUKHRJFoRTEoaCgGCYcCFDvCooYphrsShQUA12EEQ8PC4gMURH2YicKDiA1yEECHhQ+IDezEW9nzAhaVEsMCdzZxVBh3goDqhaUHwrSeChBQQc44ciHBIwcQuQqO2NC\/WCBMcSLUse+r9xiyjas5Pv9QD8IOSDidYUwjLByjmkbdmjJJ5H5wZPaE5oHI\/xD5IXFm6qUNPKI+zGkZie0CM0qHBj8YJ\/rkv8AN+3+YLQUznIZ4kqIkGMyhnhPDlMK7AMZ4kiG9mYkExS7ExQocphou0SKFCaFDAUPEYUAEnhPDQngAd4Tw0KAB3hoUNABJ4TwzwngAk8KIPDvCAlCeIvCeACUKIvCeACUJ4i8IGACUJ4i8J4AIqxhodUQjOS2UicJoG8OFGEMm0NEXh3MADsIdoa9D3oBDph3MKFAAlDlDD6MKFCAeE5hQoAEDCTChQwHJhjwhQoLYEmhFoUKC2BEw6qQoUADCFChQWAwMOIUKKUmA0IwoUNyYCaFChQnJgImEoZQoUTbAi8OxhQoLAcCEBChQWwE0OIUKABKERKYUKEAwRErkKFAMYoiSkQoUAEUpid0aQoUAj\/\/2Q==)","b0823ed8":"### Fitting Logistic Regression to the Training set","eddac0e4":"**.describe() won\u2019t try to calculate a mean or a standard deviation for the object columns, since they mostly include text strings. However, it will still display some descriptive statistics**","1eb9c7b8":"#### probability of all values","3386b0d7":"##### it is amazing there are no errors","d1d58175":"### test Accuracy","f74e0810":"# Showing Basics Statistics\n**Now that you\u2019ve seen what data types are in your dataset, it\u2019s time to get an overview of the values each column contains. You can do this with .describe():**\n","639e1487":"### Feature Scaling","36976060":"### Make a pred by using ml algo","dd45c032":"# Getting to Know The Data"}}