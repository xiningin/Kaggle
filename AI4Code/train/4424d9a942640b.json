{"cell_type":{"167938d8":"code","07683076":"code","25846488":"code","b9af58b7":"code","d1cc1e9c":"code","827f1a72":"code","0d216525":"code","750cf05b":"code","0d1434ef":"code","e4d15c18":"code","2e161c7f":"code","f332435b":"code","3e3de3a8":"code","6d6fceae":"code","9038305a":"code","5d512865":"code","b0e897f7":"code","c34fad47":"code","e49dde48":"code","9bccbe8a":"code","4c578b99":"code","77e30036":"code","d37de972":"code","f33e4438":"code","58780bee":"code","9648000a":"code","759794f5":"code","8f392dc0":"code","6f4bebbf":"code","ee763c51":"code","a7bc698a":"code","1b97a3fa":"code","ce45fab5":"code","82d4f922":"code","5a061411":"code","c5a8e951":"code","d65ef481":"code","4e71bc57":"code","4970dc80":"code","fc3cedd6":"code","5eedb92f":"code","700e681b":"code","d09260db":"code","548e1496":"code","8896d8ae":"code","4b291734":"markdown","aa77079f":"markdown","f6d7d5bd":"markdown","aadda803":"markdown","9fb7cd12":"markdown","9a757e50":"markdown","93572db7":"markdown","92bd6bc8":"markdown","7366d416":"markdown","346ed5f5":"markdown","9a39555c":"markdown","769bb4e2":"markdown","cc2323fd":"markdown","a2bb0977":"markdown","cff4076a":"markdown","fa8bc7cb":"markdown"},"source":{"167938d8":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\n","07683076":"traindata=pd.read_csv('..\/input\/titanic\/train.csv')\ntestdata=pd.read_csv('..\/input\/titanic\/test.csv')","25846488":"traindata.head()","b9af58b7":"traindata.columns","d1cc1e9c":"#rearranging the columns\ntraindata=traindata[['PassengerId', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp',\n       'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked', 'Survived']]","827f1a72":"traindata.describe(include='all')","0d216525":"traindata.info()","750cf05b":"traindata.isnull().sum()","0d1434ef":"#filling null values with median in varibale Age of train data\ntraindata['Age']=traindata['Age'].fillna(traindata['Age'].median())","e4d15c18":"#removing the 2 null embarked values from train data\ntraindata=traindata[traindata['Embarked'].notna()]","2e161c7f":"traindata.isnull().sum()","f332435b":"testdata.head()","3e3de3a8":"testdata.describe(include='all')","6d6fceae":"testdata.info()","9038305a":"testdata.isnull().sum()","5d512865":"#filling null values with median in varibale Age of test data\ntestdata['Age']=testdata['Age'].fillna(testdata['Age'].median())","b0e897f7":"#dropping the 1 null Fare value\ntestdata['Fare']=testdata['Fare'].fillna(testdata['Fare'].median())","c34fad47":"testdata.isnull().sum()","e49dde48":"sns.histplot(traindata['Age'],kde=True)","9bccbe8a":"#checking for outliers\ncol=['Age','Fare','Parch','SibSp','Pclass','Survived']\ntraindata[col].boxplot(figsize=(7,7))\n#outliers in Fare","4c578b99":"print('Percent Of Survived :')\n# Showing  Percentage of survivors of Both gender Male\/Female\nprint(traindata[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False))\nprint('\\n')\n\n#making crosstab and plotting it\na=pd.crosstab(traindata['Survived'],traindata['Sex'])\nprint(a)\na.plot.bar()","77e30036":"print('Percent Of Survived :')\n# Showing  Percentage of survivors of Both gender Male\/Female\na=traindata[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)\nprint(a)\nprint('\\n')\nplt.pie(a['Survived'],autopct='%1.2f%%')\nsns.catplot(x = 'Sex', y = 'Survived', data = traindata, kind = 'bar', col = 'Pclass')","d37de972":"print('Percent Of Survived :')\n# Showing  Percentage of survivors of Both gender Male\/Female\nprint(traindata[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean().sort_values(by='Survived', ascending=False))\nprint('\\n')\n\nsns.catplot(x = 'Sex', y = 'Survived', data = traindata, kind = 'bar', col = 'Embarked')","f33e4438":"plt.figure(figsize=(7,7))\ncorr=traindata.corr()\nsns.heatmap(corr,annot=True)","58780bee":"#making copy of train and test data\ntrain_data_copy=traindata.copy()\ntest_data_copy=testdata.copy()","9648000a":"#fill empty cabin data with U (unknown) in test and train \ntrain_data_copy.Cabin=train_data_copy.Cabin.fillna('U')\ntest_data_copy.Cabin=test_data_copy.Cabin.fillna('U')","759794f5":"#arraning the cabin values according to alphabets\nimport re\ntrain_data_copy.Cabin = train_data_copy.Cabin.map(lambda x:re.compile(\"([a-zA-Z])\").search(x).group())\ntest_data_copy.Cabin = test_data_copy.Cabin.map(lambda x:re.compile(\"([a-zA-Z])\").search(x).group())","8f392dc0":"print('Train data cabin values:\\n',train_data_copy['Cabin'].value_counts())\nprint ('\\nTest data cabin values:\\n',test_data_copy['Cabin'].value_counts())","6f4bebbf":"#Now mapping these alpabetic cabin values into numeric values\ntrain_data_copy.Cabin = train_data_copy.Cabin.map({'A':1,'B':2,'C':3,'D':4,'E':5,'F':6,'G':7,'U':8,'T':9})","ee763c51":"#Now mapping these alpabetic cabin values into numeric values\ntest_data_copy.Cabin = test_data_copy.Cabin.map({'A':1,'B':2,'C':3,'D':4,'E':5,'F':6,'G':7,'U':8})","a7bc698a":"#Mapping of Gender\ntrain_data_copy.Sex = train_data_copy.Sex.map({'male':0,'female':1})","1b97a3fa":"#Mapping of Gender\ntest_data_copy.Sex = test_data_copy.Sex.map({'male':0,'female':1})","ce45fab5":"#dropping unwanted variables\ntrain_data_copy=train_data_copy.drop(['Name','Ticket'],axis=1)\ntest_data_copy=test_data_copy.drop(['Name','Ticket'],axis=1)","82d4f922":"#Getting dummies for Embarked \ntrain_dummy=pd.get_dummies(train_data_copy,drop_first=True)  #to avoid multicollinearity\ntest_dummy=pd.get_dummies(test_data_copy,drop_first=True)","5a061411":"target=train_dummy.Survived\nvariables=train_dummy.drop(['Survived'],axis=1)","c5a8e951":"X_train, X_test, Y_train, Y_test = train_test_split(variables, target, test_size=0.2, random_state=1)","d65ef481":"lr=LogisticRegression(max_iter=1000)\nlr=lr.fit(X_train,Y_train)\ny_pred_logit=rfc.predict(X_test)\ny_pred_logit","4e71bc57":"print('Accuracy of Logistic Regression:',metrics.accuracy_score(Y_test,y_pred_logit))","4970dc80":"dtc=DecisionTreeClassifier()\ndtc=dtc.fit(X_train,Y_train)\ny_pred=dtc.predict(X_test)\ny_pred","fc3cedd6":"print('Accuracy of Decision Tree:',metrics.accuracy_score(Y_test,y_pred))","5eedb92f":"rfc=RandomForestClassifier()\nrfc=rfc.fit(X_train,Y_train)\ny_pred_forest=rfc.predict(X_test)\ny_pred_forest","700e681b":"print('Accuracy of Random Forest:',metrics.accuracy_score(Y_test,y_pred_forest))","d09260db":"prediction=rfc.predict(test_dummy)\nprediction","548e1496":"output = pd.DataFrame({'PassengerId':test_dummy['PassengerId'], 'Survived': prediction.astype(int)})\noutput","8896d8ae":"output.to_csv('submission1.csv', index=False)\nprint(\"Your submission was successfully saved!\")","4b291734":"### Model Building","aa77079f":"We can see Random Forest gives the best accuracy amongst the three models of 83%","f6d7d5bd":"### Understanding Test Data","aadda803":"### Decision Tree Classifier ","9fb7cd12":"### Random Forest Classifier","9a757e50":"### Visualization of Train Data","93572db7":"### Import Libraries","92bd6bc8":"Only cabin data has missing values left now","7366d416":"### Understanding Train Data","346ed5f5":"Only cabin has missing values, same as train data","9a39555c":"### Cleaning Train and Test Data","769bb4e2":"No variable has high correlation with other variable","cc2323fd":"### Logistic Regression","a2bb0977":"### Import Data","cff4076a":"### Predicting on Output using Random Forest","fa8bc7cb":"### Dependent and Indepentent variable"}}