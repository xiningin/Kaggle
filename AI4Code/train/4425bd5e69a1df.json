{"cell_type":{"9621f8fd":"code","0dae02b1":"code","f7ad3a90":"code","0fc9d8e9":"code","03e52c3d":"code","f86a60f3":"code","622165d7":"code","68553367":"markdown","84942f3c":"markdown","f37e0fe4":"markdown","00ba9289":"markdown","bdd69f0d":"markdown"},"source":{"9621f8fd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# visualize\nimport matplotlib.pyplot as plt\nimport matplotlib.style as style\nimport seaborn as sns\nfrom matplotlib import pyplot\nfrom matplotlib.ticker import ScalarFormatter\nsns.set_context(\"talk\")\nstyle.use('fivethirtyeight')\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nfrom scipy import stats\nfrom tqdm import tqdm_notebook as tqdm\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","0dae02b1":"# load submission files\nsubmit = pd.read_csv(\"\/kaggle\/input\/liverpool-ion-switching\/sample_submission.csv\")\n\n# high scoring public kernels\npaths = {\n    \"wavenet\": \"\/kaggle\/input\/wavenet-keras\/submission.csv\",\n    \"kalman\": \"\/kaggle\/input\/single-model-lgbm-kalman-filter\/submission.csv\",\n    \"rnn\": \"\/kaggle\/input\/seq2seq-rnn-with-gru\/gru_preds.csv\",\n    \"lgb-fe\": \"\/kaggle\/input\/lgb-featureengineering-lb-0-940\/submission.csv\",\n    \"lstm\": \"\/kaggle\/input\/simple-two-layer-bidirectional-lstm-with-pytorch\/submission_bilstm.csv\",\n}\nweights = np.array([0.941, 0.94, 0.94, 0.94, 0.94]) # LB score as a weight\nsubs = submit.copy()\nfor i, p in enumerate(paths.keys()):\n    tmp = pd.read_csv(paths[p])\n    subs[f\"{p}\"] = tmp[\"open_channels\"]\n\nsubs.drop(columns=[\"time\", \"open_channels\"], inplace=True)","f7ad3a90":"# Compute the correlation matrix\ncorr = subs.corr()\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(15, 12))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, cmap=cmap, annot=True, fmt=\"g\",\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5}, ax=ax)\nax.set_ylim(corr.shape[0], 0)\nplt.yticks(rotation=0)","0fc9d8e9":"# pandas weighted voting implementation\ndef weighted_voting(row):\n    h = np.histogram(row.values, weights=weights)\n    return np.round(h[1][np.argmax(h[0])])","03e52c3d":"submit[\"open_channels\"] = subs.apply(weighted_voting, axis=1)","f86a60f3":"submit[\"open_channels\"] = submit[\"open_channels\"].astype(int)\nsubmit.to_csv('submission_voting.csv', index=False, float_format='%.4f')","622165d7":"submit[\"open_channels\"].hist(alpha=0.5)","68553367":"# Submit","84942f3c":"# Voting","f37e0fe4":"# Load all ","00ba9289":"For those who are frustrated by their scores and need a quick reward...\n\nI am using the following high-scoring kernels. If you like this notebook, please upvote them too!\n\n- [WaveNet-Keras](https:\/\/www.kaggle.com\/siavrez\/wavenet-keras)\n- [Single Model lgbm - Kalman Filter](https:\/\/www.kaggle.com\/teejmahal20\/single-model-lgbm-kalman-filter)\n- [Seq2Seq RNN with GRU](https:\/\/www.kaggle.com\/brandenkmurray\/seq2seq-rnn-with-gru)\n- [LGB + FeatureEngineering - LB 0.940](https:\/\/www.kaggle.com\/rohitsingh9990\/lgb-featureengineering-lb-0-940)\n- [Simple two-layer bidirectional LSTM with Pytorch](https:\/\/www.kaggle.com\/khalildmk\/simple-two-layer-bidirectional-lstm-with-pytorch\/output)","bdd69f0d":"# Similarity analysis"}}