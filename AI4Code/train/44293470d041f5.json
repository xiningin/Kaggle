{"cell_type":{"a0f2a23a":"code","a07dc779":"code","ab62b09e":"code","76c40f2e":"code","633cc955":"code","8902e02a":"code","82e414cd":"code","44448d25":"code","81d14f62":"code","d237c39e":"code","4e35ffd5":"code","9fefecc8":"code","2680f7e2":"code","3ef6b809":"code","26263b70":"code","db70eb5a":"code","8f525646":"code","5bb3c22e":"code","c52d60a8":"code","5adba1be":"code","3a5fba34":"code","a6d126c1":"code","820c8a21":"code","26b2d6f3":"code","e37d7b20":"code","e76bdacb":"code","72a38bd2":"code","824cb92c":"code","3bf37cb8":"code","1f7eeefb":"markdown"},"source":{"a0f2a23a":"import os\nimport sys\nimport warnings\n\nif not sys.warnoptions:\n    warnings.simplefilter(\"ignore\")\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import AdaBoostClassifier, RandomForestClassifier","a07dc779":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ab62b09e":"Train_df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\nTest_df = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ngender_df = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')","76c40f2e":"Train_df.head()","633cc955":"Test_df.head()","8902e02a":"gender_df","82e414cd":"# Select the parameters that will only get in the way\nnot_need_columns = [\n    'PassengerId', 'Name', 'Cabin'\n]","44448d25":"train_df = Train_df.drop(axis=1, columns=not_need_columns)\ntest_df = Test_df.drop(axis=1, columns=not_need_columns)","81d14f62":"train_df.head()","d237c39e":"test_df.head()","4e35ffd5":"train_df.info()","9fefecc8":"# Changing the categorical features into numerical features\nle = LabelEncoder()\n\ntrain_df['Sex'] = le.fit_transform(train_df['Sex'])\ntrain_df['Embarked'] = le.fit_transform(train_df['Embarked'])\ntrain_df['Age'] = train_df['Age'].fillna(value=train_df['Age'].mean())\n\ntest_df['Sex'] = le.fit_transform(test_df['Sex'])\ntest_df['Embarked'] = le.fit_transform(test_df['Embarked'])\ntest_df['Age'] = test_df['Age'].fillna(value=test_df['Age'].mean())","2680f7e2":"tickets = train_df['Ticket'].str.split()\ntickets = [ticket[-1] if len(ticket) > 1 else ticket[0] for ticket in tickets]\ntickets = [int(elem) if elem.isdigit() else 9999999 for elem in tickets]","3ef6b809":"train_df['Ticket'] = tickets","26263b70":"tickets = test_df['Ticket'].str.split()\ntickets = [ticket[-1] if len(ticket) > 1 else ticket[0] for ticket in tickets]\ntickets = [int(elem) if elem.isdigit() else 9999999 for elem in tickets]\ntest_df['Ticket'] = tickets","db70eb5a":"train_df.info()","8f525646":"test_df.info()","5bb3c22e":"test_df['Fare'] = test_df['Fare'].fillna(value=test_df['Fare'].mean())","c52d60a8":"test_df.info()","5adba1be":"Y_train = train_df.loc[:, ['Survived']]\nX_train = train_df.drop(axis=1, columns=['Survived'])","3a5fba34":"x_train, x_test, y_train, y_test = train_test_split(X_train, Y_train,\n                                                    random_state=42)","a6d126c1":"adc = AdaBoostClassifier()\nadc.fit(x_train, y_train)\nY_pred = adc.predict(x_test)\naccuracy_score(Y_pred, y_test)","820c8a21":"rfc = RandomForestClassifier()\nrfc.fit(x_train, y_train)\nY_pred = rfc.predict(x_test)\naccuracy_score(Y_pred, y_test)","26b2d6f3":"tree = DecisionTreeClassifier()\ntree.fit(x_train, y_train)\nY_pred = tree.predict(x_test)\naccuracy_score(Y_pred, y_test)","e37d7b20":"rfc = RandomForestClassifier(n_estimators=25, max_depth=7, random_state=42)\nrfc.fit(X_train, Y_train)\nY_pred = rfc.predict(test_df)","e76bdacb":"accuracy_score(Y_pred, gender_df.loc[:, ['Survived']])","72a38bd2":"submission = pd.DataFrame({\n        \"PassengerId\": Test_df[\"PassengerId\"],\n        \"Survived\": Y_pred\n    })","824cb92c":"submission.to_csv('submission.csv', index=False)","3bf37cb8":"pd.read_csv('submission.csv')","1f7eeefb":"# Thanks for reading. Don't forget to upvote the work. Good luck kaggling!"}}