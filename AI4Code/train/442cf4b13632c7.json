{"cell_type":{"6e03cab7":"code","d8396567":"code","7430bfeb":"code","500a5e5e":"code","ed2a614c":"markdown","b95a7b77":"markdown","83c12de4":"markdown","40f319ae":"markdown"},"source":{"6e03cab7":"!pip install backtesting\n!pip install yfinance\n!curl -L http:\/\/prdownloads.sourceforge.net\/ta-lib\/ta-lib-0.4.0-src.tar.gz -O && tar xzvf ta-lib-0.4.0-src.tar.gz\n!cd ta-lib && .\/configure --prefix=\/usr && make && make install && cd - && pip install ta-lib ","d8396567":"import pandas_datareader.data as web\nimport datetime\n\nstart = datetime.date(2018,1,1)\nend = datetime.date(2021,5,1)\ndata = web.DataReader('SONY', 'yahoo', start, end)\n\nfrom backtesting import Backtest, Strategy # \u30d0\u30c3\u30af\u30c6\u30b9\u30c8\u3001\u30b9\u30c8\u30e9\u30c6\u30b8\u30fc\nfrom backtesting.lib import crossover\n\nimport talib as ta\n\ndef MACD(close, n1, n2, ns):\n    #n1-n2\n    macd, macdsignal, macdhist = ta.MACD(close, fastperiod=n1, slowperiod=n2, signalperiod=ns)\n    return macd, macdsignal\n\nclass MACDCross(Strategy):\n    n1 = 12 #\u77ed\u671fEMA\u306e\u671f\u9593\n    n2 = 26 #\u9577\u671fEMA\u306e\u671f\u9593\n    ns = 9 #\u30b7\u30b0\u30ca\u30eb\uff08MACD\u306eSMA\uff09\u306e\u671f\u9593\n\n    def init(self):\n        self.macd, self.macdsignal = self.I(MACD, self.data.Close, self.n1, self.n2, self.ns)\n\n    def next(self): # \u30c1\u30e3\u30fc\u30c8\u30c7\u30fc\u30bf\u306e\u884c\u3054\u3068\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\n        if crossover(self.macd, self.macdsignal): #macd\u304csignal\u3092\u4e0a\u56de\u3063\u305f\u6642\n            self.buy() # \u8cb7\u3044\n        elif crossover(self.macdsignal, self.macd): #signal\u304cmacd\u3092\u4e0a\u56de\u3063\u305f\u6642\n            self.position.close() # \u58f2\u308a\n\n","7430bfeb":"data","500a5e5e":"# \u30d0\u30c3\u30af\u30c6\u30b9\u30c8\u3092\u8a2d\u5b9a\nbt = Backtest(\n    data, # \u30c1\u30e3\u30fc\u30c8\u30c7\u30fc\u30bf\n    MACDCross, # \u58f2\u8cb7\u6226\u7565\n    cash=1000, # \u6700\u521d\u306e\u6240\u6301\u91d1\n    commission=0.00495, # \u53d6\u5f15\u624b\u6570\u6599\n    margin=1.0, # \u30ec\u30d0\u30ec\u30c3\u30b8\u500d\u7387\u306e\u9006\u6570\uff080.5\u30672\u500d\u30ec\u30d0\u30ec\u30c3\u30b8\uff09\n    trade_on_close=True, # True\uff1a\u73fe\u5728\u306e\u7d42\u5024\u3067\u53d6\u5f15\uff0cFalse\uff1a\u6b21\u306e\u6642\u9593\u306e\u59cb\u5024\u3067\u53d6\u5f15\n    exclusive_orders=True #\u81ea\u52d5\u3067\u30dd\u30b8\u30b7\u30e7\u30f3\u3092\u30af\u30ed\u30fc\u30ba(\u30aa\u30fc\u30d7\u30f3)\n)\n\noutput = bt.run() # \u30d0\u30c3\u30af\u30c6\u30b9\u30c8\u5b9f\u884c\nprint(output) # \u5b9f\u884c\u7d50\u679c(\u30c7\u30fc\u30bf)\nbt.plot() # \u5b9f\u884c\u7d50\u679c\uff08\u30b0\u30e9\u30d5\uff09\n\n#\u6700\u9069\u5316\noutput2=bt.optimize(n1=range(10, 100, 10),n2=range(10, 300, 10),ns=range(10, 50, 5), maximize='Equity Final [$]', method='grid')\nprint(output2)\nbt.plot()","ed2a614c":"# **Define function**","b95a7b77":"# **Check data**","83c12de4":"# **Install**","40f319ae":"# **Main**\nMACD is optimized to maximize profit"}}