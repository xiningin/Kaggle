{"cell_type":{"dfdfe1b8":"code","bcc7501c":"code","1050558c":"code","3cee9acb":"code","41aa6ea3":"code","daa39863":"code","9dbe6754":"code","d22a43f0":"code","ad776f0c":"code","0639a2e6":"code","1b54907d":"code","2ba0d5bf":"code","bedac67f":"code","0d97aff0":"code","3549033c":"code","701184fc":"code","7503c6cc":"code","1aed49e0":"code","b6f41a04":"markdown","b7f16c35":"markdown","ef3a23b2":"markdown","62113fdd":"markdown","236030cd":"markdown","7812fd27":"markdown","1512e7a9":"markdown"},"source":{"dfdfe1b8":"%matplotlib inline\nimport pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LogisticRegression\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")","bcc7501c":"df = pd.read_csv('..\/input\/default-of-credit-card-clients-dataset\/UCI_Credit_Card.csv')\ndf=df.drop('ID', axis=1)\ndf.head()","1050558c":"df.columns = df.columns.str.lower().str.replace(' ', '_')\ndf.columns = df.columns.str.replace('.','_')\ncategorical_columns = list(df.dtypes[df.dtypes == 'object'].index)\n\nfor c in categorical_columns:\n    df[c] = df[c].str.lower().str.replace(' ', '_')","3cee9acb":"df.columns","41aa6ea3":"df.isnull().sum()","daa39863":"df.default_payment_next_month.value_counts(normalize=True)","9dbe6754":"from sklearn.model_selection import train_test_split\ndf_full_train, df_test = train_test_split(df, test_size=0.2, random_state=40)\ndf_train, df_val = train_test_split(df_full_train, test_size=0.25, random_state=40)\nlen(df_train), len(df_val), len(df_test), len(df_full_train)","d22a43f0":"df_train = df_train.reset_index(drop=True)\ndf_val = df_val.reset_index(drop=True)\ndf_test = df_test.reset_index(drop=True)","ad776f0c":"y_train = df_train.default_payment_next_month.values\ny_val = df_val.default_payment_next_month.values\ny_test = df_test.default_payment_next_month.values\n\n#del df_train['default_payment_next_month'] if you want to make sure that you exclude the output from the training set.\n#del df_val['default_payment_next_month']\n#del df_test['default_payment_next_month']","0639a2e6":"from sklearn.metrics import mutual_info_score\ndef mutual_info_payment_score(series):\n    return mutual_info_score(series, df_full_train.default_payment_next_month)","1b54907d":"categorical=['sex', 'education', 'marriage', 'pay_0', 'pay_2','pay_3', 'pay_4', 'pay_5', 'pay_6']\nnumerical=['limit_bal','age', 'bill_amt1', 'bill_amt2', 'bill_amt3', 'bill_amt4', 'bill_amt5', 'bill_amt6', 'pay_amt1',\n       'pay_amt2', 'pay_amt3', 'pay_amt4', 'pay_amt5', 'pay_amt6']","2ba0d5bf":"mi = df_full_train[categorical].apply(mutual_info_payment_score)\nmi.sort_values(ascending=False)","bedac67f":"df_full_train[numerical+categorical].corrwith(df_full_train.default_payment_next_month).abs().sort_values(ascending=False)","0d97aff0":"X_train=df_train.values\nmodel = LogisticRegression(solver='liblinear')\nmodel.fit(X_train, y_train)","3549033c":"X_val=df_val.values\ny_pred = model.predict_proba(X_val)[:, 1]\npayment_decision = (y_pred >= 0.5)\n(y_val == payment_decision).mean()","701184fc":"y_full_train=np.concatenate((y_train, y_val), axis=0)","7503c6cc":"X_full_train=df_full_train.values\nmodel2 = LogisticRegression(solver='liblinear')\nmodel2.fit(X_full_train,y_full_train)","1aed49e0":"X_test=df_test.values\ny_pred = model2.predict_proba(X_test)[:, 1]\npayment_decision = (y_pred >= 0.5)\n(y_test == payment_decision).mean()","b6f41a04":"# Training Full model","b7f16c35":"# 3.Splitting The Data","ef3a23b2":"# 4.Feature Importance: Mutual Information & Correlation","62113fdd":"# 2.EDA","236030cd":"# 1.Data Preperation","7812fd27":"# 6.Training Logistic Regression With Scikit-Learn","1512e7a9":"#### In our case there is no caterogical variables (strings).<br>So we should only use Correlation,so it's just for me"}}