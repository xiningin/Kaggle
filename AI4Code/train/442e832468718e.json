{"cell_type":{"0565c9d4":"code","a4f781de":"code","54ba12bc":"code","3b504908":"code","7d7ab907":"code","cf01988e":"code","e677c064":"code","8106dc07":"code","3b1b7f3b":"code","4c1cf7cb":"code","bbfebba9":"code","9866a857":"code","f5c6d96b":"code","aa0c15ae":"code","0b6da436":"markdown","c04661fc":"markdown","eb00837c":"markdown","b3f24f11":"markdown","ff5fd7c3":"markdown","be83bfbf":"markdown","ad2d3c9c":"markdown","12d18288":"markdown","26072508":"markdown","3a619e9d":"markdown"},"source":{"0565c9d4":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\n\nimport optuna\n\nfrom catboost import CatBoostClassifier\n\nimport sklearn.datasets\nimport sklearn.metrics\n\nimport os\nimport random\nDEFAULT_RANDOM_SEED = 2021\ndef seedBasic(seed=DEFAULT_RANDOM_SEED):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    \nseedBasic()","a4f781de":"TRAIN_PATH = \"..\/input\/tabular-playground-series-dec-2021\/train.csv\"\nTEST_PATH = \"..\/input\/tabular-playground-series-dec-2021\/test.csv\"\nSAMPLE_SUBMISSION_PATH = \"..\/input\/tabular-playground-series-dec-2021\/sample_submission.csv\"\nSUBMISSION_PATH = \"submission.csv\"\n\nID = \"Id\"\nTARGET = \"Cover_Type\"\n\nN_TRIALS = 1\nDIRECTIONS = \"maximize\"\nTEST_SIZE = 0.25","54ba12bc":"train = pd.read_csv(TRAIN_PATH)\ntest = pd.read_csv(TEST_PATH)","3b504908":"def reduce_memory_usage(df, verbose=True):\n    numerics = [\"int8\", \"int16\", \"int32\", \"int64\", \"float16\", \"float32\", \"float64\"]\n    start_mem = df.memory_usage().sum() \/ 1024 ** 2\n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == \"int\":\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)\n            else:\n                if (\n                    c_min > np.finfo(np.float16).min\n                    and c_max < np.finfo(np.float16).max\n                ):\n                    df[col] = df[col].astype(np.float16)\n                elif (\n                    c_min > np.finfo(np.float32).min\n                    and c_max < np.finfo(np.float32).max\n                ):\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n    end_mem = df.memory_usage().sum() \/ 1024 ** 2\n    if verbose:\n        print(\n            \"Mem. usage decreased to {:.2f} Mb ({:.1f}% reduction)\".format(\n                end_mem, 100 * (start_mem - end_mem) \/ start_mem\n            )\n        )\n    return df\n\ntrain = reduce_memory_usage(train)\ntest = reduce_memory_usage(test)","7d7ab907":"y = train[TARGET]\nX = train.drop([TARGET],axis=1)\nX_test = test","cf01988e":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=TEST_SIZE)","e677c064":"def objective(trial):\n   \n    # 1.train\n    param = {\n        \"iterations\":trial.suggest_int(\"iterations\", 500, 1000),\n        \"max_depth\": trial.suggest_int(\"max_depth\", 2, 7),\n    }\n\n    optunaModel = CatBoostClassifier(**param)\n    optunaModel.fit(X_train,y_train,eval_set=[(X_val,y_val)],early_stopping_rounds=20,verbose=True)\n    \n    # 2.predict\n    preds = optunaModel.predict(X_val)\n    \n    # 3.evaluate\n    pred_labels = np.rint(preds)\n    accuracy = sklearn.metrics.accuracy_score(y_val, pred_labels)\n    \n    return accuracy\n\nstudy = optuna.create_study(direction=DIRECTIONS)\nstudy.optimize(objective, n_trials=N_TRIALS)","8106dc07":"study.best_trial","3b1b7f3b":"study.best_trial.value","4c1cf7cb":"study.best_trial.params","bbfebba9":"model = CatBoostClassifier(**study.best_trial.params)","9866a857":"model.fit(X_train,y_train)","f5c6d96b":"pred_test = model.predict(X_test)","aa0c15ae":"sub = pd.read_csv(SAMPLE_SUBMISSION_PATH)\nsub[TARGET] = pred_test\nsub.to_csv(SUBMISSION_PATH,index=False)\nsub.head()","0b6da436":"# make study and search best parameters","c04661fc":"# split data (input data and target data)","eb00837c":"# split data (train data and validataion data)","b3f24f11":"# predict test data target ","ff5fd7c3":"# study result ","be83bfbf":"# build model using optuna best model","ad2d3c9c":"# best params","12d18288":"# global variabels","26072508":"# submission ","3a619e9d":"# load data "}}