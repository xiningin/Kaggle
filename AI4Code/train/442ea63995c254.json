{"cell_type":{"8b86c265":"code","cd6e6486":"code","06c90a3e":"code","e3c8c9f8":"code","3a69e05c":"code","181d4a05":"code","3bd8645a":"code","8a02c845":"code","c7781111":"code","5a9b3595":"code","7a2a13aa":"code","5ac10536":"code","cde56c70":"code","e73e1526":"code","9ca32b29":"code","f4c2fcf9":"code","38f4a186":"code","bed82d9f":"code","262c4503":"code","df42842d":"code","04a4edb0":"code","6f183d53":"code","8564ab13":"code","c8caae6d":"code","0475618c":"code","33d3e17a":"code","28a42e33":"code","80f00bb8":"code","a8129f00":"code","e685b34c":"code","97f3b17f":"code","a0f6a6eb":"markdown"},"source":{"8b86c265":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cd6e6486":"# Importing  libraries to be used for dealing with arrays, plotting graphs and displaying images\nimport tensorflow as tf\nimport tensorflow.keras as keras\nimport os\nimport cv2\nimport random\nimport numpy  as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n","06c90a3e":"# Listing out the categories of the images present in the dataset \ndata_path =  \"..\/input\/garbage-classification\/garbage classification\/Garbage classification\"\nprint(\"The categories of garbage in the dataset\")\nprint(os.listdir(data_path))","e3c8c9f8":"data_path2 = \"..\/input\/garbage-detection-dataset\/dataset-resized\"\nprint(os.listdir(data_path2))","3a69e05c":"def plot_images(item_dir):\n    all_item_dirs = os.listdir(item_dir)\n    item_files = [os.path.join(item_dir, file) for file in all_item_dirs][:20]\n    \"\"\"\n    all_images = os.listdir(images_dir)\n    images = [os.path.join(images_dir, image) for image in all_images][:5]\n    \"\"\"\n    plt.figure(figsize=(20,20))\n    for image_id, image_path in enumerate(item_files):\n        plt.subplot(5, 5, image_id+1)\n        img = plt.imread(image_path)\n        #plt.tight_layout()        \n        plt.imshow(img, cmap='inferno') ","181d4a05":"plot_images(data_path+\"\/cardboard\")","3bd8645a":"plot_images(data_path2+\"\/plastic\")","8a02c845":"plot_images(data_path2+\"\/trash\")","c7781111":"plot_images(data_path2+\"\/metal\")","5a9b3595":"def freq_plot(items):\n    ans = []\n    for item_dir in items:\n        all_item_dirs = os.listdir(item_dir)\n        item_files = [os.path.join(item_dir, file) for file in all_item_dirs]\n        ans.append(len(item_files))\n    return ans    ","7a2a13aa":"# Plot of number of samples under each category \n# dataset 2\nitems = [data_path2+\"\/cardboard\",data_path2+\"\/glass\",data_path2+\"\/metal\",data_path2+\"\/paper\",data_path2+\"\/plastic\",data_path2+\"\/trash\"]\ncategories = [\"cardboard\",\"glass\",\"metal\",\"paper\",\"plastic\",\"trash\"]\nitems2 = [data_path+\"\/cardboard\",data_path+\"\/glass\",data_path+\"\/metal\",data_path+\"\/paper\",data_path+\"\/plastic\",data_path+\"\/trash\"]\ncategories2 = [\"cardboard\",\"glass\",\"metal\",\"paper\",\"plastic\",\"trash\"]\n","5ac10536":"ans = freq_plot(items)\nitem_names = [\"cardboard\",\"glass\",\"metal\",\"paper\",\"plastic\",\"trash\"]\n#plot\nplt.figure(figsize=(10,6))\nplt.title(\"Frequency of images under each category in garbage detection dataset\")\nsns.barplot(x=item_names,y=ans)\nplt.xlabel(\"Categories\")\nplt.ylabel(\"Frequency of images\")","cde56c70":"# Making the data ready to load it into the model \ndataX ,dataY = [],[]\ndata = []\nIMG_SIZE = 224 \ncategories = ['metal', 'glass', 'paper', 'trash', 'cardboard', 'plastic']\nfor category in categories:\n    path_l = os.path.join(data_path2,category)\n    class_num = categories.index(category)\n    \n    for image in os.listdir(path_l):\n        img_array = cv2.imread(os.path.join(path_l,image))\n        new_array =  cv2.resize(img_array,(IMG_SIZE,IMG_SIZE))\n        dataX.append(new_array)\n        dataY.append(class_num)\n        ","e73e1526":"# printing the size of dataX and dataY in the image \nprint(\"No of records in dataX and dataY respectively: \")\nprint(len(dataX))\nprint(len(dataY))","9ca32b29":"temp = list(zip(dataX,dataY)) \nrandom.shuffle(temp) \nX,Y = zip(*temp)\n\nX = np.asarray(X,dtype = None)\nY = np.asarray(Y,dtype = None)\nprint(\"Structure of X - \" ,X.shape)\nprint(\"Structure of Y - \" ,Y.shape)","f4c2fcf9":"input_train,input_test,output_train,output_test = train_test_split(X,Y,test_size = 0.4,random_state=42)\n\nprint(\"Splitting of data into training and testing data done.\")\nprint(\"Length of input_train  - \",len(input_train))\nprint(\"Length of input_test   - \",len(input_test))\nprint(\"Shape of input_train   - \",input_train[0].shape)\nprint(\"Shape of input_test    - \",input_test[1].shape)","38f4a186":"input_train = input_train.astype('float32')\ninput_test  = input_test.astype('float32')\n\nprint(input_train[0])","bed82d9f":"# Normalizing the data \ninput_train , input_test = input_train\/255 , input_test\/255","262c4503":"print(\"Viewing the first 25 outputs for the correspoding inputs in training dataset\")\noutput_train[0:25]","df42842d":"total_categories = 6\noutput_train = keras.utils.to_categorical(output_train,total_categories)\noutput_test  = keras.utils.to_categorical(output_test ,total_categories)\nprint(\"Viewing the first 10 categorical outputs for the corresponding inputs in training dataset \")\noutput_train[0:10]","04a4edb0":"input_train.shape","6f183d53":"# Creating a simple classification model\nimport tensorflow as tf\nnew_model = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(64,kernel_size=(3,3),activation=\"relu\",input_shape = (224,224,3)),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Conv2D(64,kernel_size=(3,3),activation=\"relu\"),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Dropout(0.1),\n    tf.keras.layers.Conv2D(64,kernel_size=(3,3),activation=\"relu\"),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(512,activation=\"relu\"),\n    tf.keras.layers.Dense(512,activation=\"relu\"),\n    tf.keras.layers.Dense(6,activation=\"softmax\")\n])\n# Gives an overview of how the hidden layer looks like and the parameters \nnew_model.summary()\n# Optimizer : Adam\n# loss : categorical crossentropy\n# metrics  accuracy\nnew_model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.0005),loss=\"categorical_crossentropy\",metrics=['accuracy'])","8564ab13":"history = new_model.fit(input_train,output_train,batch_size=32,epochs=40,shuffle=True)","c8caae6d":"# Plot of loss and accuracy on training set \nplt.figure(figsize = (10,10))\nacc = history.history['accuracy']\nloss = history.history['loss']\n\nplt.plot(acc)\nplt.plot(loss)\nplt.legend(loc = 'upper right', handles = ['accuracy','loss'],labels= ['Blue','Yellow'])","0475618c":"new_model.evaluate(input_test,output_test)","33d3e17a":"categories = ['metal', 'glass', 'paper', 'trash', 'cardboard', 'plastic']\ndef convert_to_category(arr,categories):\n    ans = []\n    for k in arr:\n        ans.append(categories[k])\n    return ans ","28a42e33":"predicted_categories = new_model.predict_classes(input_test)\npredicted_categories","80f00bb8":"# Wherever the val in the array is 1 return its index accordingly\noriginal_test = output_test.argmax(1)\noriginal_test","a8129f00":"new_pred     = convert_to_category(predicted_categories,categories)\nnew_original = convert_to_category(original_test,categories)","e685b34c":"# Checking wether the predicted value is matching the true value or not \nL=8\nW=8\nfig,axes=plt.subplots(L,W,figsize=(17,17))\naxes=axes.ravel()\n\nfor i in np.arange(0,L*W):\n    axes[i].imshow(input_test[i])\n    axes[i].set_title('Predicted = {}\\n True ={}'.format(new_pred[i],new_original[i]))\n    axes[i].axis('off')\n\nplt.subplots_adjust(wspace=2,hspace=2)","97f3b17f":"# Make changes in architecture of the model \n","a0f6a6eb":"# Preprocessing the data\n# Data augmentation if necessary\n# Creating the classification model\n# Testing the model\n# Plot of training and testing accuracy"}}