{"cell_type":{"f19200ea":"code","94b08ff6":"code","be93d409":"code","84c2c4e9":"code","831b4e18":"code","97d547a9":"code","511b01bf":"code","054c30eb":"code","1c72136c":"code","2a51906a":"markdown","e7464fd7":"markdown","0582e49b":"markdown","9dd5fafa":"markdown","6d716b63":"markdown","605893c5":"markdown","9e5fdbd7":"markdown"},"source":{"f19200ea":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, accuracy_score\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","94b08ff6":"data = pd.read_csv('..\/input\/early-diabetes-classification\/diabetes_data.csv', delimiter = ';')\ndata.head()","be93d409":"enc = OrdinalEncoder()\ndata.gender = enc.fit_transform(data.gender.array.reshape(-1, 1))","84c2c4e9":"data.info()","831b4e18":"g = sns.FacetGrid(data, col = \"class\", hue = \"gender\", height = 5, aspect = 1)\ng.map(sns.histplot, \"age\", alpha = 0.5, bins = 20, kde = True)\ng.add_legend()","97d547a9":"plt.figure(figsize = (12, 12))\nsns.heatmap(data.corr(), annot = True, square = True, linewidths = 0.2, cmap = 'viridis', cbar = False)","511b01bf":"X = data.drop('class', axis = 1)\ny = data['class']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.30, random_state = 101)","054c30eb":"print(X_train.shape)\nprint(X_test.shape)","1c72136c":"rfc = RandomForestClassifier(n_estimators = 1000)\nrfc.fit(X_train, y_train)\npred = rfc.predict(X_test)\n\nprint('Random Forest : \\n', classification_report(y_test, pred))\nprint('Random Forest Accuracy: ', accuracy_score(y_test, pred))","2a51906a":"# Exploratory Data Analysis","e7464fd7":"## 1. Distribution of Age | Class & Gender","0582e49b":"## 1. Random Forest Classifier","9dd5fafa":"# Ordinal Encoding For Gender","6d716b63":"This section will include the modelling and success assessments of different machine learning models!","605893c5":"## 2. Correlation of Parameters","9e5fdbd7":"# Modelling"}}