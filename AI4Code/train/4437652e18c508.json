{"cell_type":{"82544d1d":"code","250bd3cc":"code","cb023c45":"code","892984db":"code","76527391":"code","965d7daa":"code","710feb3e":"code","cec86d39":"code","906c2b48":"code","14919047":"code","03a96aa6":"code","4b15696c":"code","074f5c3d":"code","a9f8baec":"code","1afcec88":"code","1b0ce6dd":"code","92fc8bc2":"code","cd6dd9db":"code","1b114af0":"code","40bf873a":"code","d1f7325c":"code","b7d5979b":"code","28a1bdfe":"code","7fe27cb9":"code","0dfde2aa":"code","32ed6189":"code","4bd9bcbd":"code","b06d401a":"code","ca1dc580":"code","cf1ad267":"code","e2f44a64":"code","83d34ede":"code","d6a15fe0":"code","9c3175bb":"code","20547d64":"code","59b46dec":"code","6730b401":"code","a17ec6be":"code","418f1f46":"code","ddb0cc3f":"code","86045012":"code","1f225093":"code","bb624e01":"code","d3575073":"code","3aba382b":"code","21a3bf4f":"code","1675a1eb":"code","f8b9969a":"code","c8f8beaa":"code","969e4f8d":"markdown","4b44e622":"markdown","9a55d223":"markdown","4ac8dde7":"markdown","e1b1a124":"markdown","9bfa5314":"markdown","5dbae96f":"markdown"},"source":{"82544d1d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","250bd3cc":"import warnings \nwarnings.filterwarnings('ignore')\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport math","cb023c45":"##reading the data set\nstroke_df = pd.read_csv(\"..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv\")","892984db":"stroke_df.head()","76527391":"##getting the rough idea about the null values\nplt.subplots(figsize = (25,10))\nsns.heatmap(stroke_df.isna(),yticklabels=False)\nplt.show()","965d7daa":"stroke_df.info()","710feb3e":"stroke_df.isna().sum()","cec86d39":"##getting the shape of data frame\nprint('The shape of the data is {}'.format(stroke_df.shape))","906c2b48":"stroke_df.dtypes","14919047":"#Analysin 'gender' column\nstroke_df.gender.value_counts()","03a96aa6":"##since only one count is for other category, lets drop it \nother = stroke_df.loc[stroke_df.gender=='Other'].index\nstroke_df.drop(other,axis = 0,inplace =True)","4b15696c":"stroke_df.age.describe()","074f5c3d":"stroke_df[stroke_df.age ==.08]","a9f8baec":"#analysis of 'work_type' variable\nstroke_df.work_type.value_counts()","1afcec88":"stroke_df[stroke_df.work_type == 'children'].age.describe()","1b0ce6dd":"stroke_df[stroke_df.work_type == 'Never_worked'].age.describe()","92fc8bc2":" #creating conditions\ncondition = [\n    (stroke_df['age'] <=14),\n    (stroke_df['age'] > 14) & (stroke_df['age'] <=25),\n    (stroke_df['age'] > 25) & (stroke_df['age'] <=60),\n    (stroke_df['age'] > 60)\n    ]\n#creating list of values\nvalues = ['child','youth','adult','senior']\n\n#creating a new column\nstroke_df['Age_category'] = np.select(condition,values)\n\n#getting the head of df\nstroke_df.head()","cd6dd9db":"#changing the value of data in work_type col\nstroke_df.work_type = np.where(stroke_df['work_type'] == 'children','Never_worked',stroke_df.work_type)\nstroke_df.work_type.value_counts()","1b114af0":"##treating the null values of bmi column\nstroke_df[stroke_df.bmi.isnull()]","40bf873a":"##creating the function which will give the bmi according to category in variable\ndef bmi_finder(variable):\n    for category in stroke_df[variable].unique():\n        print('bmi for category = ' + str(category))\n        print(stroke_df[stroke_df[variable] == str(category)].bmi.describe())\n        print('*'*20)\n    ","d1f7325c":"##getting the bmi for every each category in Age_category variable\nbmi_finder('Age_category')","b7d5979b":"##getting bmi according to gender\nbmi_finder('gender')","28a1bdfe":"stroke_df.bmi.describe()","7fe27cb9":"##filling out the null values with mean bmi of each category\nstroke_df['bmi'] = np.where((stroke_df.bmi.isnull())&(stroke_df.Age_category == 'child'),20,stroke_df.bmi)\nstroke_df['bmi'] = np.where((stroke_df.bmi.isnull())&(stroke_df.Age_category == 'youth'),27,stroke_df.bmi)\nstroke_df['bmi'] = np.where((stroke_df.bmi.isnull())&(stroke_df.Age_category == 'adult'),31,stroke_df.bmi)\nstroke_df['bmi'] = np.where((stroke_df.bmi.isnull())&(stroke_df.Age_category == 'senior'),30,stroke_df.bmi)\n","0dfde2aa":"##univariant analysis of categorical column:\ndef count_plot(column_name):\n    plt.figure(figsize=(8,8))\n    #sns.set_theme(style ='darkgrid')\n    splot = sns.countplot(data = stroke_df,x = column_name)\n    for p in splot.patches:\n        splot.annotate(format(p.get_height(), '.1f'), \n                   (p.get_x() + p.get_width() \/ 2., p.get_height()), \n                   ha = 'center', va = 'center', \n                   xytext = (0, 9), \n                   textcoords = 'offset points')\n    plt.xlabel(column_name,fontsize = 15)\n    plt.ylabel('count',fontsize=15)\n    plt.title('count plot of '+column_name+'\\n',fontsize = 15)","32ed6189":"def variable_classifier(df):\n    cat =  [var for var in df.columns if df[var].dtypes == 'object']\n    numerical = [var for var in df.columns if df[var].dtypes != 'object']\n    return [cat,numerical]","4bd9bcbd":"for var in variable_classifier(stroke_df)[0]:\n    count_plot(var)","b06d401a":"#changing data types of hypertention,heart_disease,stroke\nlst = ['hypertension','heart_disease','stroke']\nfor i in lst:\n    stroke_df[i] = stroke_df[i].astype('category')","ca1dc580":"##lets observe number of smokers according to gender:\nstroke_df.groupby('gender')['stroke'].value_counts()","cf1ad267":"plt.figure(figsize=(8,10))\nplot =  sns.countplot(data = stroke_df,x = 'gender',hue = 'stroke')\nfor p in plot.patches:\n        plot.annotate(format(p.get_height(), '.1f'), \n                   (p.get_x() + p.get_width() \/ 2., p.get_height()), \n                   ha = 'center', va = 'center', \n                   xytext = (0, 9), \n                   textcoords = 'offset points') ","e2f44a64":"##analysing gender,age_group,work_type,and smoking_status w.r.t stroke\ncol_name = ['gender','Age_category','work_type','smoking_status']\nfor column in col_name:\n    plt.figure(figsize=(8,8))\n    plot = sns.countplot(data = stroke_df,x = column,hue = 'stroke')\n    for p in plot.patches:\n        plot.annotate(format(p.get_height(),'.1f'),\n                     (p.get_x()+p.get_width()\/2.,p.get_height()),\n                     ha = 'center',va = 'center',\n                     xytext = (0,9),\n                     textcoords = 'offset points')\n        plt.xlabel(column,fontsize = 15)\n        plt.ylabel('count',fontsize=15)\n        plt.title('stroke and '+column+' plot'+'\\n',fontsize = 15)","83d34ede":"##analysing numerical col \nnumerical = ['age','avg_glucose_level','bmi']\nfor i in numerical:\n    plt.figure(figsize=(8,5))\n    sns.histplot(data = stroke_df,x = i,kde = True)\n    plt.xlabel(i,fontsize = 15)","d6a15fe0":"stroke_df.groupby('Age_category').boxplot(column= 'avg_glucose_level',layout = (1,4),fontsize = 10,rot=30)\nplt.show()","9c3175bb":"stroke_df.groupby('Age_category').boxplot(column= 'bmi',layout = (1,4),fontsize = 10,rot=30)\nplt.show()","20547d64":"##importing libraries\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import plot_confusion_matrix","59b46dec":"##encoding -> label encoding for gender, Residence_type,ever_married\n#dropping id\nstroke_df.drop(columns='id',inplace=True)","6730b401":"label_lst = ['gender', 'Residence_type','ever_married']\nle = LabelEncoder()\nfor i in label_lst:\n    stroke_df[i] = le.fit_transform(stroke_df[i])","a17ec6be":"stroke_df.head()","418f1f46":"##one hot encoding for work_type,smoking_status,Age_category\nstroke_df = pd.get_dummies(stroke_df,columns=['work_type','smoking_status','Age_category'],\n                           prefix=['work_type','smoking_status','Age_cat'])\n\n##dropping last variable of each category\nstroke_df.drop(columns=['smoking_status_smokes','Age_cat_youth','work_type_Self-employed'],inplace=True)","ddb0cc3f":"stroke_df.head()","86045012":"X = stroke_df.loc[:,stroke_df.columns != 'stroke']\ny = stroke_df['stroke']\n","1f225093":"#without validation and hyperparameter tuning \nX_train,X_test,y_train,y_test =train_test_split(X,y,test_size= 0.3,random_state=0)","bb624e01":"print(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","d3575073":"parameters = {\n    'Decision_Tree':{\n        'model': DecisionTreeClassifier(),\n        'param':{\n            'criterion':['gini','entropy'],\n            'max_depth':[1,2,3,4,5,6,7,None],\n            'min_samples_leaf':[1,2,3,4,5,10,20,30]\n        }\n    },\n    'Random_Forest':{\n        'model': RandomForestClassifier(),\n        'param':{\n            'n_estimators' : [int(x) for x in np.linspace(start = 10,stop = 100,num= 10)],\n            'bootstrap': [True,False],\n            'max_depth':[80,90,100,110],\n            'max_features':['auto','sqrt'],\n            'min_samples_leaf':[3,4,5],\n            'min_samples_split':[8,10,12]\n            \n        }\n    },\n    'Logistic_Regression':{\n        'model': LogisticRegression(),\n        'param':{\n            'C':[1,5,10]\n        }\n    },\n    'SVM':{\n        'model':SVC(gamma='auto'),\n        'param':{\n            'C':[1,10,20,30],\n            'kernel':['rbf']\n        }\n    }\n    \n}","3aba382b":"lst = []\nfor key,value in parameters.items():\n    clf = GridSearchCV(estimator=value['model'], param_grid=value['param'], cv = 5)\n    clf.fit(X_train,y_train)\n    y_pred = clf.predict(X_test)\n    accuracy = accuracy_score(y_test,y_pred)\n    lst.append({\n        'model':key,\n        'BestScore':clf.best_score_,\n        'BestParameters':clf.best_params_,\n        'ModelAccuracy':accuracy\n    })","21a3bf4f":"lst","1675a1eb":"##working with logistic reg.\nmodel_lr = SVC(C = 1,kernel = 'rbf')\nmodel_lr.fit(X_train,y_train)\ny_pred = model_lr.predict(X_test)\nconfusion_matrix(y_test,y_pred)","f8b9969a":"#classification report\nprint(classification_report(y_test,y_pred))","c8f8beaa":"#confusion matrix\nplot_confusion_matrix(model_lr,X_test,y_test)\nplt.title('confusion matrix\\n')\nplt.xlabel('Predicted Label')\nplt.ylabel('True Label')\nplt.show()","969e4f8d":"#### <b>Conclusion drawn form analysis of 'bmi', 'Age_category' and 'Gender' variables<\/b>\n\n*  Mean of the bmi variable is 28\n\n*  Mean of categories age column that is male and female is similar\n\n* Mean of bmi of child category is way less then other categories in Age_category variable,\n\n  for that filling out the null values in bim column as 20 for child, 27 of youth, 30 for adult and 31 for senior","4b44e622":"#### <b>Conclusions that can be drawan from bivariant analysis:<\/b>\n\n->people working in private sector are more prone to stroke\n\n-> More number of females got stroke than males\n\n-> Seniors i.e. people above the age of 60 have got stroke more number of times than any other category","9a55d223":"Gender male = 1, female = 0\n\nResidence_Type = Urban = 1, rural = 0\n\never_married yes = 1, no = 0","4ac8dde7":"### Accuracy of Different model:\n\n<b>Decision_Tree : 95.04%<\/b>\n\n<b>Random_Forest : 94.97%<\/b>\n\n<b>SVM           : 95.04%<\/b>\n\n<b>Logistic_Reg  : 95.107%<\/b>\n","e1b1a124":"\n* 687 are children and never worked is 22,\n\n* since children is not a suitable entry for work_type so making a column which will be holding the values for the age caregory\n\n* editing the value of children as Never_worked in work_type variable","9bfa5314":"Creating a variable that will store the value of age category for example child, youth, adult, senior","5dbae96f":"Minimum age is 0.08, having a look at it"}}