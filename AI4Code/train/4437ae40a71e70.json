{"cell_type":{"8674cf05":"code","7dd4f03f":"code","3e9ad6ba":"code","9e29a99e":"code","9080cd35":"code","67b84e6c":"code","256a9caa":"code","1dc20155":"code","f261bb25":"code","a267ef4a":"code","004c1177":"code","d72ef0a3":"code","bcdb30b1":"code","86c1c90a":"code","0ba8e543":"code","38930d91":"code","f7264d10":"code","8e93efac":"code","5339dbbb":"code","8ef36ac4":"code","6f22d205":"markdown","052ffa5a":"markdown","331c2c3d":"markdown","1923ac00":"markdown","5e649b25":"markdown","5620c6d3":"markdown","08dbcd49":"markdown","efbc07d5":"markdown","20eb8fb2":"markdown","37a621e4":"markdown","4abc9e46":"markdown"},"source":{"8674cf05":"import os\nimport glob\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nplt.style.use('seaborn-notebook')\n\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\nimport plotly.plotly as py\nfrom plotly import tools\n\ninit_notebook_mode(connected=True)\n\nimport lightgbm as lgb\n\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import mean_absolute_error","7dd4f03f":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","3e9ad6ba":"train.head()","9e29a99e":"import cufflinks as cf\ncf.go_offline()","9080cd35":"print('Max damage:', train['damageDealt'].max())\nprint('95% percentile:', np.percentile(train['damageDealt'], 95))\nprint('99% percentile:', np.percentile(train['damageDealt'], 99))\nprint('{0:.4f}% players dealt zero damage'.format((train['damageDealt'] == 0).sum()\/ train.shape[0]))","67b84e6c":"plt.figure(figsize=(12, 8))\nplt.hist(train.loc[train['damageDealt'] <= 800, 'damageDealt'], bins=40);\nplt.title('Distribution of damage dealt without outliers.');","256a9caa":"train.damageDealt.value_counts().head().iplot(kind='bar', title='Top 5 most common values of dealt damage')","1dc20155":"print('Distribution of number of kills')\nprint('Max number of kills:', train['DBNOs'].max())\nprint('95% percentile:', np.percentile(train['DBNOs'], 95))\nprint('99% percentile:', np.percentile(train['DBNOs'], 99))\nprint('{0:.4f}% players killed noone'.format((train['DBNOs'] == 0).sum()\/ train.shape[0]))\nplt.hist(train['DBNOs'], bins=40);","f261bb25":"train.DBNOs.value_counts().head().iplot(kind='bar', title='Top 5 most common values of number of kills')","a267ef4a":"plt.scatter(x=train['rideDistance'], y=train['roadKills']);","004c1177":"plt.scatter(x=train.loc[train['rideDistance'] <= 20000, 'rideDistance'], y=train.loc[train['rideDistance'] <= 20000, 'roadKills']);","d72ef0a3":"train['winPlacePerc'].plot(kind='hist');\nplt.title('Distibution of target.');","bcdb30b1":"plt.hist(train['killPlace'], bins=20);\nplt.title('Distribution of kill place.')","86c1c90a":"X = train[['assists', 'boosts', 'damageDealt', 'DBNOs',\n       'headshotKills', 'heals', 'killPlace', 'killPoints', 'kills',\n       'killStreaks', 'longestKill', 'maxPlace', 'numGroups', 'revives',\n       'rideDistance', 'roadKills', 'swimDistance', 'teamKills',\n       'vehicleDestroys', 'walkDistance', 'weaponsAcquired', 'winPoints']]\nX['walkDistance_to_mean'] = X['walkDistance'] \/ X['walkDistance'].mean()\nX['walkDistance_to_\u043b\u0448\u0434\u0434\u044b'] = X['walkDistance'] \/ X['kills']\ny = train['winPlacePerc']\nX_test = test[['assists', 'boosts', 'damageDealt', 'DBNOs',\n       'headshotKills', 'heals', 'killPlace', 'killPoints', 'kills',\n       'killStreaks', 'longestKill', 'maxPlace', 'numGroups', 'revives',\n       'rideDistance', 'roadKills', 'swimDistance', 'teamKills',\n       'vehicleDestroys', 'walkDistance', 'weaponsAcquired', 'winPoints']]\nX_test['walkDistance_to_mean'] = X_test['walkDistance'] \/ X_test['walkDistance'].mean()\nX_test['walkDistance_to_\u043b\u0448\u0434\u0434\u044b'] = X_test['walkDistance'] \/ X_test['kills']","0ba8e543":"params = {\"objective\" : \"regression\", \"metric\" : \"mae\", \"max_depth\": 5, \"min_child_samples\": 20, \"reg_alpha\": 0.2, \"reg_lambda\": 0.2,\n        \"num_leaves\" : 33, \"learning_rate\" : 0.2, \"subsample\" : 0.9, \"colsample_bytree\" : 0.9, \"subsample_freq \": 6}\nn_fold = 10\nfolds = KFold(n_splits=n_fold, shuffle=False, random_state=42)\n# Cleaning and defining parameters for LGBM\nmodel = lgb.LGBMRegressor(**params, n_estimators = 5000, nthread = 4, n_jobs = -1)","38930d91":"prediction = np.zeros(test.shape[0])\nscores = []\nfor fold_n, (train_index, test_index) in enumerate(folds.split(X)):\n    print('Fold:', fold_n)\n    X_train, X_valid = X.iloc[train_index], X.iloc[test_index]\n    y_train, y_valid = y.iloc[train_index], y.iloc[test_index]\n    \n    model.fit(X_train, y_train, \n            eval_set=[(X_train, y_train), (X_valid, y_valid)], eval_metric='mae',\n            verbose=500, early_stopping_rounds=100)\n    \n    y_pred = model.predict(X_test, num_iteration=model.best_iteration_)\n    prediction += y_pred\n    \n    scores.append(mean_absolute_error(y_valid, model.predict(X_valid)))\nprediction \/= n_fold","f7264d10":"print(f'Mean CV: {np.mean(scores):.4f}. Std: {np.std(scores):.4f}')","8e93efac":"lgb.plot_importance(model, max_num_features=30, figsize=(12, 8));\nplt.title('Feature importance');","5339dbbb":"submission = pd.read_csv('..\/input\/sample_submission.csv')\nsubmission['winPlacePerc'] = np.clip(prediction, 0, 1)","8ef36ac4":"submission.to_csv('sub.csv', index=False)","6f22d205":"Well, most of players kill little enemies. ","052ffa5a":"### damageDealt","331c2c3d":"It seems that distance travelled isn't really correlated with number of road kills.","1923ac00":"Hm. I suppose 100th place is the best.","5e649b25":"### Target","5620c6d3":"## General information\n\nThis kernel will be dedicated to EDA and other things.\n\nWork is in progress.","08dbcd49":"### killPlace","efbc07d5":"### Number of kills","20eb8fb2":"Most of the players dealt zero or little damage. But it is interesting that a lot of players dealt 100 or 200 damage. I suppose that this is some default damage from a single attack.","37a621e4":"### Distance travelled and road kills","4abc9e46":"## Modelling"}}