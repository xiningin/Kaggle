{"cell_type":{"c5013b6b":"code","fc2e7d5d":"code","622a2c3b":"code","44d79b65":"code","64dab6af":"code","144c13cc":"markdown"},"source":{"c5013b6b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns # plotting\nimport matplotlib.pyplot as plt # plotting\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fc2e7d5d":"train = pd.read_csv('..\/input\/widsdatathon2021\/TrainingWiDS2021.csv', index_col=0)\ntest  = pd.read_csv('..\/input\/widsdatathon2021\/UnlabeledWiDS2021.csv', index_col=0)","622a2c3b":"TARGET = 'diabetes_mellitus'","44d79b65":"from scipy.stats import shapiro\n\nSPACE      = 30\nWIDTH      = 20\nHEIGHT     = 5\nMAX_ORD    = 7\nMAX_SAMPLE = 5000\n\ndef analyze(frame, column):\n    # Title\n    print(f\"{'Column'.rjust(SPACE)} : {column}\")\n    \n    # Missing values\n    print(f\"{'Missing values'.rjust(SPACE)} : {frame[column].isna().sum()}\")\n    \n    # Numerical variables\n    if frame[column].dtypes != 'O' and len(frame[column].unique()) > MAX_ORD:\n        # Descriptive stats\n        print(f\"{'Correlation(target)'.rjust(SPACE)} : {frame[column].corr(frame[TARGET])}\")\n        print(f\"{'Mean'.rjust(SPACE)} : {frame[column].mean()}\")\n        print(f\"{'Min'.rjust(SPACE)} : {frame[column].min()}\")\n        print(f\"{'Q1'.rjust(SPACE)} : {frame[column].quantile(0.25)}\")\n        print(f\"{'Median'.rjust(SPACE)} : {frame[column].median()}\")\n        print(f\"{'Q3'.rjust(SPACE)} : {frame[column].quantile(0.75)}\")\n        print(f\"{'Max'.rjust(SPACE)} : {frame[column].max()}\")\n        print(f\"{'Var'.rjust(SPACE)} : {frame[column].var()}\")\n        print(f\"{'Std'.rjust(SPACE)} : {frame[column].std()}\")\n        \n        stats, p_value = shapiro(frame[column].sample(n=MAX_SAMPLE))\n        print(f\"{'Normal distrib.'.rjust(SPACE)} : {round(stats, 3), round(p_value, 3)}\")\n        \n        # Distribution\n        plt.figure(figsize=(WIDTH, HEIGHT))\n        sns.histplot(data=frame, x=column, hue=TARGET)\n        plt.title(f\"Distribution of {column}\")\n        plt.show()\n        \n        # Plot one against the other\n        plt.figure(figsize=(WIDTH, HEIGHT))\n        sns.boxenplot(data=train, x=TARGET, y=column)\n        plt.title(f\"{TARGET} vs {column}\")\n        plt.show()\n    \n    # Categorical variables\n    else:\n        # Count plot\n        plt.figure(figsize=(WIDTH, HEIGHT))\n        sns.countplot(data=train, x=column, hue=TARGET)\n        plt.title(f\"{TARGET} vs {column}\")\n        plt.show()","64dab6af":"for col in train.columns:\n    if col == TARGET:\n        continue\n    \n    analyze(train, col)\n    print()\n    print()","144c13cc":"# EDA - WiDS Datathon 2021"}}