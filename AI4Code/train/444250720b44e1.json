{"cell_type":{"3cc96268":"code","b130106d":"code","4f21db7d":"code","9f410dc4":"code","38ee6195":"code","97cc40a7":"code","43e95a69":"code","e7c0d946":"code","89d1c766":"code","6d86a8c4":"code","844067d5":"code","ff81951e":"code","f1cbe11d":"code","2c6dd87a":"code","014b1aba":"code","c7a9beec":"code","b95a62f3":"code","0db292c4":"code","2e3328e8":"code","60102962":"code","ffeed25f":"code","1e17b4e7":"code","2417b261":"code","c0152b53":"code","d75d9d7c":"code","fe44e7a5":"code","7009241a":"code","6351b522":"code","d80a770d":"code","1553c81c":"code","69e1751f":"code","9b6d5b44":"code","0bd94653":"code","bcc6fdd5":"code","fc733e35":"code","990837ac":"code","c1f9df8d":"code","1a9316dc":"code","c2a9a3ef":"code","6500364d":"code","e37d127d":"code","dc2aa1a5":"code","a19d1fe4":"code","c991a620":"code","73d64146":"markdown","53cfd199":"markdown","9d5bc442":"markdown","f7f4e43f":"markdown","ae8ff55d":"markdown","bee17a5b":"markdown","03bc45c4":"markdown","1e912817":"markdown","248b126f":"markdown","3d8b5928":"markdown","60345025":"markdown","c0319424":"markdown","a5e82b9e":"markdown","37627f10":"markdown"},"source":{"3cc96268":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nfrom termcolor import colored\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import precision_recall_fscore_support\nfrom sklearn.metrics import precision_recall_curve\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import auc\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import zero_one_loss","b130106d":"train_df=pd.read_csv('..\/input\/ventilator-pressure-prediction\/train.csv')\ntest_df=pd.read_csv('..\/input\/ventilator-pressure-prediction\/test.csv')\nsample=pd.read_csv('..\/input\/ventilator-pressure-prediction\/sample_submission.csv')","4f21db7d":"train_df.head()","9f410dc4":"print(f\"Training Dataset Shape: {colored(train_df.shape, 'red')}\")\nprint(f\"Test Dataset Shape: {colored(test_df.shape, 'red')}\")","38ee6195":"train_df.info()","97cc40a7":"train_df.isna().sum()","43e95a69":"for col in train_df.columns:\n    print(col + \":\" + colored(str(len(train_df[col].unique())), 'red'))","e7c0d946":"def plot_distribution(x, title):\n    \n    \"\"\"\n    Function to obtain the distribution plot of given data.\n    \n    params: x(string)     : Name of the Column for the Plot.\n            title(string) : Title of the Plot\n    \"\"\"\n    sns.displot(train_df, x = x, kind=\"kde\", bw_adjust=2)\n\n    plt.title(title, fontsize = 15)\n    plt.show()\nplot_list = [(\"R\", \"Lung Airway Restricted\"),\n             (\"C\", \"Lung Compliance\"),\n             (\"u_in\", \"Control input for the inspiratory solenoid\"),\n             (\"u_out\", \"Control input for the exploratory solenoid valve\"),\n             (\"pressure\", \"Airway pressure\")\n            ]\n","89d1c766":"for column, title in plot_list:\n    plot_distribution(x = column, title = title)   ","6d86a8c4":"fig, ax = plt.subplots(figsize = (12, 8))\nplt.subplot(2, 2, 1)\nsns.countplot(x='R', data=train_df)\nplt.title('Counts of R in train');\nplt.subplot(2, 2, 2)\nsns.countplot(x='R', data=test_df)\nplt.title('Counts of R in test');\nplt.subplot(2, 2, 3)\nsns.countplot(x='C', data=train_df)\nplt.title('Counts of C in train');\nplt.subplot(2, 2, 4)\nsns.countplot(x='C', data=test_df)\nplt.title('Counts of C in test');","844067d5":"corr = train_df.corr().abs()\nmask = np.triu(np.ones_like(corr, dtype=np.bool))\n\nfig, ax = plt.subplots(figsize=(14, 14))\n\n# plot heatmap\nsns.heatmap(corr, mask=mask, annot=True, fmt=\".2f\", cmap=None,\n            cbar_kws={\"shrink\": .8}, vmin=0, vmax=1)\n# yticks\nplt.yticks(rotation=0)\nplt.show()","ff81951e":"train_df.describe().style.background_gradient(cmap = 'copper')","f1cbe11d":"#grouping by pressur\ntrain_df.groupby(train_df['pressure'].head(10)).agg('mean').style.background_gradient(cmap = 'copper')","2c6dd87a":"train_df[['u_in','u_out']].groupby(train_df['pressure']).agg('mean').head(20).plot(kind = 'bar')","014b1aba":"train_df[['breath_id','u_out']].groupby(train_df['pressure']).agg('mean').head(20).plot(kind ='hist')","c7a9beec":"tech_list = train_df['pressure'].unique()\ntech_list[:5]","b95a62f3":"plt.figure(figsize=(10,6))\ntrain_df['pressure'].plot()","0db292c4":"plt.figure(figsize=(10,6))\ntrain_df['u_out'].plot()","2e3328e8":"sns.pairplot(data=train_df.head(10))","60102962":"sns.heatmap(train_df.corr(),annot=True)","ffeed25f":"X = train_df.iloc[:,:-1] \ny = train_df.iloc[:, -1]\n","1e17b4e7":"X","2417b261":"y","c0152b53":"from sklearn.impute import SimpleImputer\nImputedModule = SimpleImputer(missing_values = np.nan, strategy ='mean' or 'median')\nImputedX = ImputedModule.fit(X)\nX = ImputedX.transform(X)\n","d75d9d7c":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(train_df)\nprint(scaler.mean_)\nX = scaler.transform(train_df)\nprint(\"*********************************\")\nprint(X)","fe44e7a5":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\n","7009241a":"LinearRegressionModel = LinearRegression()\nLinearRegressionModel.fit(X_train, y_train)\n","6351b522":"#Calculating Details\nprint('LinearRegressionModel Train Score is : ' , LinearRegressionModel.score(X_train, y_train))\nprint('LinearRegressionModel Test Score is : ' , LinearRegressionModel.score(X_test, y_test))\n","d80a770d":"#Calculating Prediction\ny_pred = LinearRegressionModel.predict(X_test)\ny_pred","1553c81c":"#Calculating Prediction\ny_pred = LinearRegressionModel.predict(X_train)\ny_pred","69e1751f":"from sklearn.neighbors import KNeighborsRegressor\nKNeighborsRegressorModel = KNeighborsRegressor(n_neighbors = 3, weights='uniform')\nKNeighborsRegressorModel.fit(X_train, y_train)","9b6d5b44":"#Calculating Details\nprint('KNeighborsRegressorModel Train Score is : ' , KNeighborsRegressorModel.score(X_train, y_train))\nprint('KNeighborsRegressorModel Test Score is : ' , KNeighborsRegressorModel.score(X_test, y_test))","0bd94653":"#Calculating Prediction\ny_pred = KNeighborsRegressorModel.predict(X_test)\nprint('Predicted Value for KNeighborsRegressorModel is : ' , y_pred[:10])","bcc6fdd5":"df = train_df[train_df['breath_id'] < 5].reset_index(drop=True)","fc733e35":"def plot_sample(sample_id, df):\n    df_breath = df[df['breath_id'] == sample_id]\n    r, c  = df_breath[['R', 'C']].values[0]\n\n    cols = ['u_in', 'u_out', 'pressure'] if 'pressure' in df.columns else ['u_in', 'u_out']\n    \n    plt.figure(figsize=(12, 4))\n    for col in ['u_in', 'u_out', 'pressure']:\n        plt.plot(df_breath['time_step'], df_breath[col], label=col)\n        \n    plt.legend()\n    plt.title(f'Sample {sample_id} - R={r}, C={c}')","990837ac":"for i in df['breath_id'].unique():\n    plot_sample(i, train_df)","c1f9df8d":"import tensorflow as tf\nfrom tensorflow import keras\n\nfrom sklearn.model_selection import KFold\nfrom sklearn.preprocessing import StandardScaler, RobustScaler","1a9316dc":"train = pd.read_csv('..\/input\/ventilator-pressure-prediction\/train.csv')\ntest = pd.read_csv('..\/input\/ventilator-pressure-prediction\/test.csv')\n\ntrain.drop('id', axis=1, inplace=True)\ntest.drop('id', axis=1, inplace=True)\n\nX = train.drop(['pressure', 'breath_id'], axis=1)\ny = train.pressure.values\ntest = test.drop('breath_id', axis=1)\n\n\nscaler = StandardScaler()\n\nX = scaler.fit_transform(X)\nX_test = scaler.transform(test)\n\nX = X.reshape(75450, 80, 5)\ny = y.reshape(75450, 80)\n\nX_test = X_test.reshape(50300, 80, 5)","c2a9a3ef":"def model():\n   \n    input_ = keras.layers.Input(shape=(80, 5))\n    x = keras.layers.Bidirectional(keras.layers.GRU(1024, return_sequences=True))(input_)\n    x = keras.layers.Bidirectional(keras.layers.GRU(512, return_sequences=True))(x)\n    x = keras.layers.Bidirectional(keras.layers.GRU(256, return_sequences=True))(x)\n    x = keras.layers.Bidirectional(keras.layers.GRU(256, return_sequences=True))(x)\n    x = keras.layers.Bidirectional(keras.layers.GRU(128, return_sequences=True))(x)\n\n    x = keras.layers.Dense(1000, activation='relu')(x)\n    output_ = keras.layers.Dense(1)(x)\n\n    model = keras.models.Model(inputs=input_, outputs=output_)\n    \n    return model","6500364d":"dnn_model = model()\n\ndnn_model.compile(optimizer=keras.optimizers.Nadam(), loss='mae')","e37d127d":"es = keras.callbacks.EarlyStopping(patience=30)\nls = keras.callbacks.ReduceLROnPlateau(patience=15, factor=0.7)\n\nhistory_1 = dnn_model.fit(X[:2000], y[:2000], validation_split=0.3, batch_size=64, epochs=50, callbacks=[es, ls])","dc2aa1a5":"def get_split_data(X):\n    data_A = np.zeros(X.shape)\n    data_B = np.zeros(X.shape)\n    \n    data_A[:, :36, :] = X[:, :36, :]\n    data_B[:, 36:, :] = X[:, 36:, :]\n    \n    return data_A, data_B\ninput_A = keras.layers.Input(shape=(80, 5))\ninput_B = keras.layers.Input(shape=(80, 5))\ninput_C = keras.layers.Input(shape=(80, 5))\n\ninput_A_masked = keras.layers.Masking(mask_value=0., input_shape=(80, 5))(input_A)\nx_A = keras.layers.Bidirectional(keras.layers.GRU(512, return_sequences=True))(input_A_masked)\nx_A = keras.layers.Bidirectional(keras.layers.GRU(256, return_sequences=True))(x_A)\nx_A = keras.layers.Bidirectional(keras.layers.GRU(256, return_sequences=True))(x_A)\nx_A = keras.layers.Bidirectional(keras.layers.GRU(128, return_sequences=True))(x_A)\nx_A = keras.layers.Bidirectional(keras.layers.GRU(128, return_sequences=True))(x_A)\nx_A = keras.layers.Bidirectional(keras.layers.GRU(128, return_sequences=True))(x_A)\n\ninput_B_masked = keras.layers.Masking(mask_value=0., input_shape=(80, 5))(input_B)\nx_B = keras.layers.Bidirectional(keras.layers.GRU(512, return_sequences=True))(input_B_masked)\nx_B = keras.layers.Bidirectional(keras.layers.GRU(256, return_sequences=True))(x_B)\nx_B = keras.layers.Bidirectional(keras.layers.GRU(256, return_sequences=True))(x_B)\nx_B = keras.layers.Bidirectional(keras.layers.GRU(128, return_sequences=True))(x_B)\nx_B = keras.layers.Bidirectional(keras.layers.GRU(128, return_sequences=True))(x_B)\nx_B = keras.layers.Bidirectional(keras.layers.GRU(128, return_sequences=True))(x_B)\n\nx = keras.layers.Dense(1000, activation='relu')(tf.concat([x_A, x_B], axis=-1))\n\ny_hat = keras.layers.Dense(1)(x)\n\nmodel = keras.models.Model(inputs=[input_A, input_B], outputs=y_hat)\n\nmodel.compile(optimizer=keras.optimizers.Nadam(), loss='mae')\n\ndata_A, data_B = get_split_data(X[:2000])\nes = keras.callbacks.EarlyStopping(patience=30)\nls = keras.callbacks.ReduceLROnPlateau(patience=15, factor=0.7)\n\nhistory_2 = model.fit(x=[data_A, data_B], y=y[:2000], validation_split=0.3, batch_size=64, epochs=50, callbacks=[es, ls])","a19d1fe4":"input_A = keras.layers.Input(shape=(80, 5))\ninput_B = keras.layers.Input(shape=(80, 5))\ninput_C = keras.layers.Input(shape=(80, 5))\n\ninput_A_masked = keras.layers.Masking(mask_value=0., input_shape=(80, 5))(input_A)\nx_A = keras.layers.Bidirectional(keras.layers.GRU(512, return_sequences=True))(input_A_masked)\nx_A = keras.layers.Bidirectional(keras.layers.GRU(256, return_sequences=True))(x_A)\nx_A = keras.layers.Bidirectional(keras.layers.GRU(256, return_sequences=True))(x_A)\nx_A = keras.layers.Bidirectional(keras.layers.GRU(128, return_sequences=True))(x_A)\nx_A = keras.layers.Bidirectional(keras.layers.GRU(128, return_sequences=True))(x_A)\nx_A = keras.layers.Bidirectional(keras.layers.GRU(128, return_sequences=True))(x_A)\n\ninput_B_masked = keras.layers.Masking(mask_value=0., input_shape=(80, 5))(input_B)\nx_B = keras.layers.Bidirectional(keras.layers.GRU(512, return_sequences=True))(input_B_masked)\nx_B = keras.layers.Bidirectional(keras.layers.GRU(256, return_sequences=True))(x_B)\nx_B = keras.layers.Bidirectional(keras.layers.GRU(256, return_sequences=True))(x_B)\nx_B = keras.layers.Bidirectional(keras.layers.GRU(128, return_sequences=True))(x_B)\nx_B = keras.layers.Bidirectional(keras.layers.GRU(128, return_sequences=True))(x_B)\nx_B = keras.layers.Bidirectional(keras.layers.GRU(128, return_sequences=True))(x_B)\n\nx_C = keras.layers.Bidirectional(keras.layers.GRU(1024, return_sequences=True))(input_C)\nx_C = keras.layers.Bidirectional(keras.layers.GRU(512, return_sequences=True))(x_C)\nx_C = keras.layers.Bidirectional(keras.layers.GRU(256, return_sequences=True))(x_C)\nx_C = keras.layers.Bidirectional(keras.layers.GRU(256, return_sequences=True))(x_C)\nx_C = keras.layers.Bidirectional(keras.layers.GRU(128, return_sequences=True))(x_C)\n\nx = keras.layers.Dense(1000, activation='relu')(tf.concat([x_A, x_B, x_C], axis=-1))\n\ny_hat = keras.layers.Dense(1)(x)\n\nmodel = keras.models.Model(inputs=[input_A, input_B, input_C], outputs=y_hat)\n\nmodel.compile(optimizer=keras.optimizers.Nadam(), loss='mae')\n\ndata_A, data_B = get_split_data(X[:2000])\nes = keras.callbacks.EarlyStopping(patience=30)\nls = keras.callbacks.ReduceLROnPlateau(patience=15, factor=0.7)\n\n\nhistory_3 = model.fit(x=[data_A, data_B, X[:2000]], y=y[:2000], validation_split=0.3, batch_size=64, epochs=10, callbacks=[es, ls])","c991a620":"dictionary_1 = history_1.history\ndictionary_2 = history_2.history\ndictionary_3 = history_3.history\nmodel_names = ['standard model', '2 Branch', '3 Branch']\n\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 8))\nax = ax.reshape(-1,)\nfor i, loss in enumerate([dictionary_1, dictionary_2, dictionary_3]):\n    ax[0].plot(loss['val_loss'], label=f'Val Loss {model_names[i]}')\n    ax[0].set_title('Validation Loss', fontsize=20)\n    ax[0].set_xlabel('Epochs', fontsize=18)\n    ax[0].set_ylabel('Mean Absolute Error', fontsize=18)\n    ax[0].legend()\n    ax[0].grid(alpha=0.4)\n    \nfor i, loss in enumerate([dictionary_1, dictionary_2, dictionary_3]):\n    ax[1].plot(loss['loss'], label=f'Training Loss {model_names[i]}')\n    ax[1].set_title('Training Loss', fontsize=20)\n    ax[1].set_xlabel('Epochs', fontsize=18)\n    ax[1].set_ylabel('Mean Absolute Error', fontsize=18)\n    ax[1].legend()\n    ax[1].grid(alpha=0.4)","73d64146":"<a id=\"Feature corr\"><\/a>\n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<h2 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" style='background:red; border:2; color:white' role=\"tab\" aria-controls=\"home\"><center>Feature corr<\/center><\/h2>","53cfd199":"# Branch Bidirectional GRU neural net architecture(model 2)","9d5bc442":"# Using Deep Learnung","f7f4e43f":" <a id=\"1\"><\/a>\n# <p style=\"background-color:#627D78;font-family:newtimeroman;color:#D5CABD;font-size:150%;text-align:center;border-radius:20px 60px;\">Importing Libraries<\/p>","ae8ff55d":"# Using Bidirectional GRUs","bee17a5b":"<a id=\"dataset-distribution\"><\/a>\n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<h2 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" style='background:red; border:0; color:white' role=\"tab\" aria-controls=\"home\"><center>Dataset Distribution<\/center><\/h2>","03bc45c4":"### Using LinearRegression.","1e912817":"# Branch Bidirectional GRU neural net architecture(model 3)","248b126f":"<a id=\"tabular-exploration\"><\/a>\n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<h2 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" style='background:tOMATO; border:0; color:white' role=\"tab\" aria-controls=\"home\"><center>Tabular Exploration<\/center><\/h2>","3d8b5928":"# Make a Compar\n\n`CALCULATE THE VALIDATION`","60345025":"\n# <p style=\"background-color:#627D78;font-family:newtimeroman;color:#D5CABD;font-size:150%;text-align:center;border-radius:20px 60px;\">Google Brain - Ventilator Pressure Prediction<\/p>\n\n![HO](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAoHCBQVFBcUFRUYGBcaGhsbGxsYGxoaGxoaFxoaGBoaHRsdIiwkGx0pHhgXJTYlKS4wMzMzGiI5PjkyPSwyMzABCwsLEA4QHhISHjIpJCk0MjI0MjIyMjI0MjQyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMv\/AABEIAK4BIgMBIgACEQEDEQH\/xAAcAAABBQEBAQAAAAAAAAAAAAADAQIEBQYABwj\/xABAEAABAgMGAwYEBAQFBAMAAAABAhEAAyEEBRIxQVFhcYEGEyIykaFCscHwUnLR4QcjYpIUM3OCshUkQ\/EWs8L\/xAAaAQACAwEBAAAAAAAAAAAAAAACAwEEBQAG\/8QAKhEAAgICAgIABgICAwAAAAAAAAECEQMhBBIxQRMiMlFhkXGBQqEFFMH\/2gAMAwEAAhEDEQA\/APJYV6U+94EoV6GHSm3LfSLPbdAUPSz15+0M7rInRgYNIDmhORrlRjDFVBIbLPWj0Ec1as4EWrvBCKVgMs577vlm8GCnSA1WJffJvSsBBktCqS4AGbNDJKXem3WCd38RL09CCKP7xIwOljSlHLtSmXSkMUHJgt0gRRQ8WfoNN6CHyFpLMP2rlD8HvSnIiIYWSSEgB9B668oNtwaIqw6y4BGVaQuMEMRQMTxFCRBVS1lgkFVA4FS7UdubRMlXPaFhTSlAMycWEFi5Lmj6QatshtLyVLpdgGZ9Xjhkrkf+MXEnstasRJSkBizrT6ZwaX2UtBBH8sO+a9w2ggPhya8HOcfuZkSlOA1SH0yZ\/kIm4WR65c4upPYq0gv3koH8ytafhiX\/APC7Rgw45RP5lb\/ljsWKSu0RPJH7mUnJYKG36piKNfvWNkrsRa1O\/dl9QsE\/Du20Vdp7I22W72dak7oZfXwkwrJjkttBxyRekymSpk6u9dtGb3gkyWlRGEtkFO9C1TyeGTZK0EpWlSTsoFJz2MGwMXcFw7A1DEiuxp6NAxV6Cb9jZzYQzgMmmbqBILnTUwFB8KuQ+cSJ2IhKakZgern0HtB7OkpSVPUsaAUBSRXhWC6Ns69FfIHiT+YfOJkkkgB\/iI6Co945MoghJIACgoOD4nAyLcGiXJlJc4S4Kn5cC9X5bwzFjd0DKQn+FSoHOpGVT8T+HXIQkmij+ZLc2DMcn50g02WWLZhL05YjlyzgE5OIEUFQHoMw7k9c4fKCjbFp2cg6fNnJoWHSGKfNsi\/QUrtEc4fDUhTCugAdxxOXvBVlLM5xNXZqNWFqbaoKqGzEAgN+EgniVP8AIwGZKCaGjGvOJ1o8qQ7lSciRQBRDcP3ivtgZTUbNk5ByaCFZElsOOxyaktl6PtCoFS+ohJcwBTt4WPhd92rHBJNHanUlnam8RF6OaBTBwcHKCFGcElprR3YPwy0hykVPFomMPZDkAJANRUwqiIScW+\/veEQ9TEdmnRI3CYWOY7R0CEEmHKmT13pDLPWjfu+kGAcDqfZoG2EUyPQuQ45jjlEy07B9BFsnE1W9Ax99oHOl\/EKg+xOdNoTEzNVmzGtDlqHhQotQtl7tEPZ3gCBXL7aDIAYF65YW0zd\/pEsyFsQSFFQYGnQVyiOl8KKUBOmtHD9BEqFPZ3awgQ4PI+zH5PEhawlJKWbINlWn1jpQJThAcqD5Vqlw3pEq77sWoCWRiUahCdKv4jFhPr+gKsjyZRxZagkvs46ZCJ9iuwOGBJ0bk2nCLyzXKE1mEqV+CWKcsWvQRa2SykqwiWEp2oPV6nrExlC9kuEq0QrDdq2oAkenyifLsodsRPIBvcxMt9lwy0S0rEsahIckqLl9Bm3SHXdcMxAmLJxy8BUlQ1P4SNFCH\/GvwyrODXki2q7lpA7taZhOYJwlPTI+sRbYm0SQkrThCsiGIJGjjXhD7vmqJINNnjT2KyGdLXLnJIQwWCCM0mmFXt1guzrswNJ0QLBZ1KliZMYJIo4GJXEbDjGhsdikKAKUAlsiS\/MbxQX9eAVMwoDJSAABkAKARddkJoUWVkDThyhOScmr\/wBBwim6LGbdkpgSnC5YYaHKpgiLnR8K1eof5Q7tNbEJASD4h9axSWS81wnE5zVpjcmOMa0Xdo7PpmJZRRMG0xAVGWvT+GlkmOUoMpW8pXh\/sVT0aNKm2LCCpyCGPvE6x3qFUVnAy7rzsiKXrR4ze\/8AD61SkKMtpyUpPkos7Ay1Z9CTWMkhCwlQUk4hRlBiGDlxwNWMfTy7OldQf2+9oz9\/9lpNpQUzkMohhMl0Wn\/dqOBpExyq7JbkvP7Pnycpwg6hSR8iPrBkMCcKqY9cz4Q49flF72u7E2mxqSv\/ADLPiDTEhil2DLT8OWeUZ2yzanFUlZY7EAV9AR1gseT5g2rjonlJZWKjoUz6jCWZjArOsJUolOOqQBnUgARyVY0gVBCmcVPhLkjppDJCjjQQxxMoP4R4VECpp8NecPnIXFFXjwlBYFnp1MTihPdhZDF2fcMCzZUYnqIauzZN5gAUuPCcS8LE5JHiBclqRHXMBUSp8QATRikl2NXybWKn0yaY\/wCpWFWArEjysxS+ZdNXOxzbjEBSDUEM3t+0SEzDlSjkFq1bM65RIkImLCmUCBTCdcjnAuPYlOiFKS5Ylg1TmwfNtYNLToDwf6wWYlQWFsKggMAQ4ozQyz6cK+4H1iYRp0yJOx6EgF9S3yIp6QOYp34HfrDbWshQVwf3IMNRNzPEPrmGOcE5rcTkvYQoB51+\/lAkl09IIshyNnz9YHKNOkQ6sleDsQjoZHQNnBwWSPc7AsBXm8dMlp8JJJJAodQwb2gkpSaVG3XOHrNCwBhnS15IvYBSvArJnSwOYd1OG5N1gafh6fMQZLBlAOQoKDFss6Nu3pBJBSpCQosQqjJDkEFRc8CB6wHV2TYxK1KKkZs+Hdywb2DQ2ypmKUUI8SlFy9W3LnLiYfZ5RUshNVKLJA9ovO5TIR3afEtTYlCpUdEjgPeDjByf7Bckg132JSlJkSgFLJJKmZhRy+iQB9vG8sVzyrOlKM1LIBJ8yy7dA+kd2HuFQkpWpJRMWSVhQZZCVEISAahLV6xPtF0TjOxkgYSGJoEtkBvC8nIV9V5G48Llt+CcpEsJwAPuBQe0CNkUzIS3ACLqzWGWDickkvTKLRNkGGgYRlZc2Ts0i6ukUedW+7ZnAcyIvuxyJmBcuaKGqTmKcYPe8jOM5Z7eZa6KaLPFzPJHqDmgku1BO01mlyZgKFivw\/rtE+65xmylS0mpDp3xDJ+ByjLdu5CmTaZblCmC2+FY32Ch7gxUdn+0SkLANDvGvgwtY6btmRyJqUrSLK0ThKRXxTZlVE\/CPwj6xc9kr8QhWBYzNFDTpFR2ikiYP8QgfnA0JPnHAk1484orLNL00h\/ROOxSZvu0V5L76qQkgBjniTUpUDs31iRYL2UoZxW2V7VIwEjvJYKkK3SKqQeGo4w2UtEpWBNSM1cdWGkJSUVTGK5GoRbF9IsrLNx0IB5iKpCcUrGDkR7wqbUmUMa1hA3JaK+ScV5HRg6svu7UlXgLjYmo4RJlWmuFQLxWCYc4mhWNP9QFP0hMlYfVoNPkhTpIBcVBDpUDoRHj3bj+H\/cK\/wATZEkysRUuWKmW4YqTujhpyy9lsdoCxxEOnS9QOfGBjJxYMlq4ny\/Kmpw4QT8R8tStZbCCKszZ8YBYEd3OHeeUbgKoDUYTTekb7+IvYxVnWbbZgO5JBWjLu1OGUnTAacutMMi0JKjiWCTkSK+KhIpTnFuElOm9UDdLQ2XKxKWleJOFLKTlQEM\/tTdoiS0gME5uGXRmLJy1zMWyloIcEGrOwziBaGKyFJYO4D6cDygp463ds6MiLPU8xflFSPC7FqOH3Z+sImcpCcSc8XQ0FCNYPKnYVoThZAUosWUGWw1FSB8tIZaUJIASpwVKLkAUBIBA5AdYRTpjPYO04hhU5CdM2Khm2j5Q6zzyFBZCc8mozcIbNQVKSNNuLwhSwKnFKDgC7Ftcojak2cvFC2qWnMEqZRDsySkHMPV4ZgDLCS4BBD7B4koUij+EEVDmpfjkdab8IQKWMQBLoZm0bP5CJ6JuzrGTpZqrT9R9+sR5flPKJ7iv3UiIs1JQH9IKcK2QnegEdHPHQkMWz0J300iTiAD65Hd2cHjEeUsu+pz6u8GlAmjsDUu7eEE1g4eNAyFScz9+0PltjKfCz51ITXMH9jSGrl0Y0Bq\/B9ubxY3JYBNmpljyeZZ\/oTVXrl1hnVtoG0kWNz2XuZPeqH8xfkGqUOa81P6c41NlsSrEBNWgd4Q6lqYkE1EuWnMaOqIN2TETrws8tTYMYYaeBJUkcnSBG1vScjGpQIISVDFnVJZTdQfSLGlUEV5yfkylh7Rz5feTlEjQPmScgHhtmnzrWrHMK1ucyThHAaRAvg94ZYUfCVFauQq3yEEReRcDICgAyAGQAgeVhUHUFT9sscfLbXba9GrkXLNQMUqYuWsBwyiUlg9Q5ETrg7VWhU4yZxHhQQRhAOLEKuM6fOKGwX+UMMUEVOSFptamcgoCdDhPmPAGkZb79ZRkrtaftGhLFGUlJfo0t63gHd4wt82kYipORJI9YsJ\/aYg5AjZhGavm8pcwujw7j4X4cI7iYljXzDMylKNJfg1PZa2JnY5EwBUtaSFJPJ\/WMpaESZS0y5aaAAqUaqUSHz0A2hezdsMm0SyvykiuhBpEC8UKVaTLlgrViCUhIcqOTARtY5Qa7p6MTLhnCbjJNP7G\/wCzARMPdqDpUCkjgqhjL27u5QCUVzLnXiY0XY1AlzCJq0405oQcZSdiRR+RMQe1VzCXgmJLoOR0ivLm4nmUE\/JMONJRcmWXYYvOSNMjy1gtiuw95MxuEpWpIUcixIodYB2VtKJKFzFEBklubUgJv9K14jiwDJtBu3vDc0ZKXyoLjU3s3tkkJMsy0kVbfSPM+1lhVItCpRUpQPdqBUcRAWrLEakODG3s19ykmSlBxKmKY5hhhUo9fDlxjM\/xFL21P+nJ\/wCaowuZ2UkpKnaG8zr0TjvaPRpEkCWkHMgQSWpiI5ZaWk8BGbX2nllShLlrm4CylIwBL7AqUMR5PDseVN0y58GU42jVybOErJxZ1A2eJK1qBFKRm7n7RybS5lqIWlgpChhUlqZfXhGhs9oBhr2rWyrOEscuslTG2qSlaSlSQpCgUqSQ4IIYgjYiPnf+IvZI2G0AorImF5ZqcLM6Cdw9NxH0curp4OIpO0txottlXZ1sCoOhWqFiqVDrnwJiF4FX1l\/J86IKSQl\/A7VJZycIOdCHzypApy3ozMeJqHq\/H0h9ulrlzFS5gZaFFChtgUzcuML3aiyj4yoFaqlwBifEdKB+oi6t6RzA2hQw6O4q5eoyAyOWfGFWl8ChhFD4Q9D1+84REpOLE7q22hS6nZqBR5hIJPygGvLZP4Q+XJesRlSMLqUrFyfPasTbMRhorEHNWZ+hhCWSaA8hvz1rD3ii4pr7WApNNoirkpYKUToKZVDgNnCLNC23tBZxYZVCQeoBGXWAE4SrIuWplVvaETXV0hq2GkOqpqCzDgCRDJ5cMRpm1HP1pHSjiSEgVZ394SctmPGJb+U5eQfecY6BV4wkL7EioZ6ZPTk5gkp3I0o52z++kNlHwjYF+r1+kElsyg\/4dS+Z0156PxgYLwSws6oJDkNtkNvb3jU3FJMqymaUsuayU\/kDZc1f8YzliwEpStKlJUUpIQWUXOQehLkZx6BJsQEyWhP+XZwh+JQXA6qBJ4PFyEfmv8FfI9USZFwJsoTMWyrSpJKX8kotmNyNVcC0RbNaDMlqTLJUlBwA6lxiKzzJMT7ytv8Ai0z+6PjSEpc5MpQCi+gz6CMrbLUJCDIkqKsTGYv8ahRgNEisHH\/YnbC3qXloWNPqIpu\/YxcWLEZQRNBwqS7sfCHLP6AxUTrvWlYKRjSC7irjaLeTrkfZb+\/4JjcNMkWS1+JiB1evB3ixv28ChEtCRRiA5dgSSw6kmKmbd5RMqQmW4OJRYtmzZvw3gd929MwpCAWTrvA9YqDTq\/QanJyTTDomlUtatWZ+cRl3VMwYwMSdx9YLdsheBXhJQcyA7cY9E7OLsq5AmKWErDImIYqJUaBQSHJSc30q+UZODJCHInGfuq\/g2+dGU+HiniV1p\/h\/c84kBXdKCnBTURs+wV0Ll2e02xaWmGWRLJzCSDiUNiTR+ERb9sshVqEuXMR3YA7xYPhd3KU7nIesbmXeEpHdykpxSTKwKWlSSApyfIDiGZrGfy+6x5Fium0\/69kcnIskcSl9SVP\/AMs8euS9pklWIO5qesei3LPVa7FaUzUswK0E8sx1gMvsnLBUrGjC9CVAAjMEGEvq0qs0uclJdc1KJctKahMtIfEdiSomLHMjhzYYSxfU2vHlGdDJOMnGXjZkrFbe8lqlv4sJHXWJlwKBdKti\/ChinsF2KBrRTeF6V\/8AUaW4rAEK\/nHENQxL82zjfnjlKMW14+xVhkUG69hLiWlVpBJcISADsdWgnbe0Y7UFbIley1RBsIVLUxDGI192gKWTiBICBn+EkmPPf8nCTn8SSq2tD8zgsEUn7Rv+1d9NY8KT4l4UPqAfN7AjrGU7N21aJbJlpVVVSvD8RemExIv22yl2dKJasaxhViBoCM0jcs4ipuO3pllQORcg\/hUdCOcJjHplXbSa8nosSjl4TWJJyTtr3VeSfZJU421M5KUIdYKmUSMJASoeWrs\/OPVJE2XLIBV4ttY8xsF4vMSlHiLjEcgkaud9hG\/tN3Ey0TPiAz3Gj8ouKMIaT8mRyZZcsk5pJpUv4RoVEed6QGSt4j3cp5bKL0PtHWZcSo+TOyy2jyP+NFziXPl2pCWTOSUr\/wBRDMeZS39sYVCj4nLKVRmNAPhO37R7l\/FW7xNuyarWUUTB\/tOFXLwqVHhSi8w13qCVD+41VnnrDsDt0M8xsYgKxKGHIAnQgOB9REeZLUuiQ5pFhMnyHSQheOoXiU4zGAoOYLBi75wxCChZJq9Qa1FGNa7jpB9Ozom62JY0EJAOYf5w1cwlKjxpXJmAr0EGQzUgMzDhKQQSxJAeh2L6xZkusUvxQCdtsHMU4r+CI8xZVU5lQNAAMthlEpSRhzbwipBaI6VAuaJ4AFsshFPItjYjZaypkuAAKU6l946dzB5ZQFUvwu+oprXhBUyj5TQ58CDq+ohKbfyh17FTkI6F7mOgyBj\/AHxjpCCVH0hzV3aOE51eEVd3gVV7JL7snZgq0ywpjgClkbd2PC\/+7DF5el4qTIUEvimTFV4BKR8yYgdkkn\/uZhqQhKXYCq1EnKnwQO2BcwJlpBKnLAev2YvQ+krTVyJhtxs07uyT3QBlrG4IZSm3cvEK1SykkZscxFva7GF2p1pdOIFQ31blEy8rvxLKgGxVplWK+TPGI\/Fx3Mndkb1l4cUxGJSQErBq4FEq9KH94ou1tqlGYTJThB2i2u25lpGNJwnN9ANXGo4axAvWwy5mIy0lK0hyM0qAzI1B1aK8Oiy90\/PouZIPp1rwZqTZu8TQuoaHjlEGakpLEM0SlPLU45HiIlCYieGmEJXkF77BY3\/qHXeNSLT2jLlFxezT9iL\/AJEpJExILjWKvtLeMubMJlISkbpSATzOsUFpu2ZLLEcQ1QRuCMxFndFyzJocJLxVfEgpvJ5LkeTJxUVr8g7JZioxe2a7lZh+kWd29nJoICkEdI2t3XAcNRFDkchx1FF7Higo9pMxNh72Up8RKdlVi9xyxL73EB+JC0haST+F\/LFzbLnYZRk71sqwkoALO8J43Ji5U1TIy8aE43Eqr5vVK\/CiWgVBISGKg9WOmmUU\/wD1FDtgWORX8iYh3vIWnMNtFHMtMwUxq9THoIZU0vP7MieHq6PROz0jvrTLQ5wpc+LOreHpX2i17e2CVZU+BIxKzNHbYfrHmd0X1NkKC0EvGntF\/ItgT3xKVigVn0UnXnFfLjnlyW\/AxOEIU\/JVWRJNTQbRY2azIUsYkuCa0i0stygscaCDkzlxyAi5sVlkSw4WlahoKgHi0WXix9aqyuuROLuLok3VcaZawwyZuRrGwVOUpIljICp4xhZt+2hBBRMy0KUkHnSLmx9pVzAApGFf9HlPFjl7xXy8eTp0iVnl9y9tE3u0hAzL123gllVFCbZjUA+XzOcW9kXAyxdY7K059pEntBZ+9sdol\/jkzE9ShTR80SUFkrJADa7gZcy0fUMw\/wAuZ+RX\/Ex8uypiyjCWCMwlg+rVzGZhGDUn9y5DcDleYeB+NYkSDjJc4cJwh3PIDi7+sFkzglIemJQSTQgAKSpy4LihiPI866uDMSQQGBGIsQGDZ7RYcnGeiauJzNlWpFNnLmAYkBwMRUSX0Ge\/KJluGEJXnjUUkOwZISKDMGpd89IiSZeIuGTiOZLD1MdklbSXomKpWNmHTRgH4uIapQdLAgu2dGApRtmgE5b+o+sEmHxj830EIlK2\/wChiVCLIBdq1zYjhT70hJSfFkwIpV6c4dMZTsaadWjpc3Eou5O5OnKAS+ZBeh+AR0OaFix1QsYpBJGxz+9oepR2ozktXV2jnqmrfXhCYXaj+bUDJJY122gJKraCWzT9mz\/2c5W60joEP\/8AqJwOABQ80wJrsgAU6l\/QRAuSlhXxmn2log9staU90TUYJYpthEMbqCFpXMuJc3+YFKTiBAerHpG1s1ilqCSQqoBajh94yEmWCqWQXSpgDwMby7inFHnOdnlF0jdxQioJofa7EFIACWG3KMfediMtWMCo9DuDwMeoTMOGMXfyHBYPyiqss45E7uycMu6aaPM78sgfGjyn2OqTxjMLJSXFI1N6rKFFqfXmNYz0yUVEkDoI9RxMjaMvlxUZBVXsvCE7V6xeWDtHOwhCSEDdI8XrFDLuiaf\/ABq9DFtZLnm08Bi3ktxdFXG4qSs2lyXmtx\/MWealH6x6FdFrcVUeseY3PYJgIxDCNyQBGns9qKA4II3SQR7R5nlQywl2js3V0yQpG0ts9AToYyN6W+Wl\/AD\/ALv2gFrvdxnGVvOcVOYDjfFlktoj4UccdsFfk6XM8SwJafKkio4u1Yy5umWtXhnSm4qA9jDb7tSlYUg0SD6k5\/KKaXaFpUNY9Nik1ox8sbdpmwsnZ9CgUyv5y9SPInr8Rilt12zJczCsYeApGy7M3+izJxsGUA\/Noq76vMWibjAGcJwzzvO4yXy+g8kcSxJrySLikLXZpst1aEMTWrEciD7Qsi65iC6QofWDXvO7qxDuyUKWpAxJLZEkgNwTGRN4TjnNm\/3q\/WNGORxtJGesbls3iZYQHmqSgf1KA9szEWbfqPJJFMis0J\/KNB78oxAWSXJJO5qYn2RdYmMuz2c8dI310z8o1FntAAjA3ZaMIclhD7Z2plgMlYJ4F4HN19sRHHJvR6XNtwEiav8ADLWr0QTHzeFElKTQkAltAaUj02VfhNgtSyc0YBzmEI+seXLGEAgMcD5gucRrTLLI1pGdKPRuvDLuJaplhdy3RUHw1LDIYgRyyg1oAUSUByVhRYKxNiKnVpltRhFSlClBkkA6klugg0sFCWJrQkvtDIT+6\/sNxCXjMxISASSFFw1RlXFqKZNRogJnEYQVEJDtU0L1I2dhBnKj4UlRdmFanIcztDJUtwApmcukli4JDUqM\/aFTblK0MiqWwKpZYHShdsndoctJxDn9BE1csA5MlsiDRhk+vJ4jTzhKeo5jX5x0odU2\/wAEKV+Bq1Uy2L65N6QOXMdR0G3EAB\/aCTEEAUP\/AK+xDcKQS1GoYGvmQXoI8dDcYjof2QumKrNPP6Q1aSRQPUmmwzPtHBTsWauXBjD5tWAFXoaht\/V4U9psL2aS5z\/2Kv8AVP8A9aIiLmd5LAHnl0b+l6Ho7RNupxYloIbDMf8AuSx\/4xnJk5SF4kliPv0hk3UERD6ma66b37ohBGJILsc33TtG5sl5DClYdlBw+ceWghYStGuY1B1EXiL0OWgAAHAUEY\/K4qyo1cHIikkz0Rd+eFnilva+BLSWP8wj+0frGblW1dVJBLZbDiYqbWtalHEoDckxW4\/BcJWPnyIJaEtt9qxeMJmD+oV\/uFYrLTfMw0Rhlj+gMf7i594fNsqH8Uwe8IiXZ9STyb6xu4odEY+bIpyuglx3ROtS2BUTxJMTL87O2izmoXh5mLvspflmsqnC6\/1MIuL+7RotNUgHmR+ohXbM8tf4jO2NY7rZ53Z50waRcWK8pkuqSRy+u8HC5ZLGWnoP3iRaES5ciZMwpdKThqfOWCQz7mHTwJ7F4+XKOkDn3\/Mzwj+0RVz7\/nVdlA5pKQB0ZiImXdO7xKCUgYncMxDajhFTeU6UmYuWV+Us7FnYah8sukD8GGOm\/YUuTKeqIs61ImfCpJ2dx0MGsl1LWQWYHU0+cLZ+7dxMR1IHziZaEhRxKmSwPzBhyrFnHOP3Ks7ZKtd3KwCWHblEq7br\/EoJAzJOQ3MUMy0yxQLUvgl0p9T9BDVWxSgE0Sj8KaDruecPU09JgdGW1\/W9MxSZcskypYIST8RPmU3QAcoqu7gkuJUqW8NjBUdfUiokExaWCwkkUiXYrIDGru67AUuM4PqoKxGTL6JfZ+6JSWVMSFnQEOAeWpjzb+IFmRLvOcJaSkKKFFJGHCpSQSA2aTQ9Y9VsCFSyCS4djwOnrGN7e2ITLwKx+CWDzAP0IjPzwc8ioPj5Ot2V95SVS7rl0889L8koWoe4jDCWqoYjEHD0cEgPyoa8I9hlWRFpsirIohK6KQo5JWnLoXIPAmPMJNkmSp6guWUlClJKDXDwq7hnL6isDOHzKI7FkTTYGSlkMaYsQqPxJIEAQwKQKJD55EhTExMtK3IzooCpKj4aZnThplEGZMBpWgW7lxUk+EfCK+sRkio0Mg7sk2NSRjqKqBTTUVDbZiGpScWIsAAp6DPERkefvEaTMADEOosxegoHcawa0T1HCp2KixZqgkOPDSIi41\/BLTsNPVoCxY8m0frEOefF0+kHWtlk1okZUNDodDEeZU9Nc65Pxjsrts6KoWecsnw8Xy9PswCSMTudQYfPXVtg336wkmWBWrUalOLxXe5DFpBMB2joI320dDeqBtjcJxBIdi5Az5e8Gs0sau5Ci3Vj9IjJmeNNcgajPWJVnUWCtGPNzX5AxOKSsiV0X92KeXPG+FfGhUD\/AMhGXtmZjRXXNwTDLw0WFIbNqYhnXMCvGKG8EsowzO04gw8kaTaVI8pb5HpEj\/qsz8Q9B+kQDDXigywjVW68Fd2lKVFsIqMzTM83+UUc2ed4dJnYkYTmn5Zj5RGmGpixGqF206EUuGYo6FEF2JEETLLNKCKtwBr6REeCyweUHCdESVo1V3zCpnOe8Mvu1KfuvhSx5nToIqbNaSipNBvDJ1rMxSphPhDCuewEFLJ7ELHss5Nv7pClkupmSDqdOgjLzFkkklySSTuTnD588rLnoNAIDFLJkc2WIR6ipMFTAYIkxCYTJKFRKlLiAgxIlqi3imLki1krixsyoppK4nyJkaOKdlecTS2BcbS4ZwyMefWOdGoum1MRDcke0aKU1TNxLsrLxCoOY0gd93GiYMYSAcIHpBLttYUBF4khQaMec5Y5pjccVJNHkFvxSl0o0GvCyJt8nEmloQHDf+QJBZB4hyx6Rc9sbuYlQEZK57UqVNBB1jS1lgpLyBG0Y22I\/mKADALNHBbrziApHiZlYi7pIapyA1LhvWNn\/EOwJlzk2hA8E\/x5OywwWOD0PUxjkSaE1JzYZkGgFRsHilk3Rexu1YyXIUVkNhbN3pSg+9oL3IZKXy\/F4a56Pr9IY6MLjTPC+oBGY3f3h1lnBawFJeocghL8qMIXBxWvuMdsVYGN1A4WGJtnLjm0CWz0yo3LT2gQnuojErApQJG9dUu0OM8FZUaMksGdyBhHygJZE3f5CUWEnyQC9cxyqR70Mcsuxf72aCIGJJVvXTEDoeVIFM8gLfs7wVJWyPwcxjoHjH4o6A7omgMvzHkflEmz6fkPzgKElzqA4fmPWJSG9XDvpi215xGJbJkSkrKEgpJC0pBaowqdwPQD1aEvkAqxpyWAocjWBWeeCopUpTOcWuIpSoJOdaneJUxIXKp8BPoqvzf1hz+ZaAWmUCoYYLMECMVGNQ5KiC4gneAwGOiFJo5oMCOEKCN4jx0T3ZFEoNDjMAG8Q4edIJTbOoLMmEiu7\/pDFLLYeLnnCA6wOIm\/RKOjo6OhZwsOTDRCpiUcFSYMhUATBEmGwdAsmS1xMkritQqJMpcXcWShcol3ZpsX932nKMlImRb2KfGhjnaKmSB6RdFqyjYWGc7R5pdFqyjb3VaHaKfLxWrEY31kH7S2YKlkx5Ta5WFfWPXr8mAWeYs5JQSegjxtFtE1ZbeO4MvlpjJx22i\/tdjNssMyQP8AMQy0cVIrh\/3Bx6R51aRgKBkXQr+WGUAyT8Tsrjk+kelXRNMtQMUPby4MM1Frlf5az4w5ICw3gb4UkAkczHZ4NStLyHgyf4s8\/nyVKURhwMC+6mJU6tCpjowpD5SAlBASSfCoqS4UAPMnMhhnib2hJs7G6yrCQaJ8ReoSwOQYVrHKSWU39OXE5RQUVei82\/ZDl+fwuzhtSz06tCTZZxGh1OWmb8mibYpNQolsJDAVdx7Go5c46Ykvicj4VfEQGwtxGWUB8N1ZPbYGUS6fyH2eHzKpRy+hgksI8LEuAWLM441La7w5aAwcZGnpD4xfVgt7KvCYWDmzL+yP1joq9WMslqSAaBqp46fdIRQUE0LMSCVAYSyQtsX4tMOsdNmO52IHplHd0Ckku9DQ6lj9YtSVqkLX5BWYklRSGHmch2IrmBrlWlYl2CYorCR5S4UOD8sxn0gcvD3dHBcpozECtfvQQGUo+IgsQCQeOIQKXWlZL2Nt0kpUQdDEExbT5neoC2AVlR24ZknSKpUJmt2EhISFEJAEnR0dHRBwsKTWGwsSmcKow2Ojo5nHR0dHRBx0PSIaIemCRw9Ih4EIgQVIhsYgsQQRBhrQ5IhsU0CyVKXFlZlxVy4sbMIu4WxM0ae6p1RG7ueflHnl2ZiNxdByixlVxKM9SLjtksm7bW2fcrPoHPs8eAXHeCkTBWPpBMlMyUtCw6VpUlQ3SoMR6GPnm+bnTY56kqJmJBOFjhJ2xH9IyY3Cdrwi7ialFxZrrRf6UpGTwaT2kRNs1olLyMtTPVlgeAjjiaPMppUokvvqYky5mE4MwQC9XyyzZq+0PfL76a0d\/wBaMd+weFSUqSUsQrxOKpIOT6cuETLOoMf6qa6FnfrED\/EkEk+J2DHKgDegAETbG6kTAAPCAty7slioDni9or42kx8kclfjUxID5El\/KABVnOWkIpRBUk8eQo45fvAUec\/mhlqcE5VpqcxxgnKo\/sirY+URhQavWujV94eD4QdGFX4bRFlq8nAE\/OJDAgHI+33WIhPRLRXmOiZ\/gQavn97R0VtjD\/\/Z)\n\n","c0319424":"### Using  KNN","a5e82b9e":"<a id=\"2\"><\/a>\n# <p style=\"background-color:#627D78;font-family:newtimeroman;color:#D5CABD;font-size:150%;text-align:center;border-radius:20px 60px;\">Loading Data<\/p>\n\n\n## About the Dataset\n\n### Files\n\n- **train.csv** - the training set\n- **test.csv** - the test set\n- **sample_submission.csv** - a sample submission file in the correct format\n\n### Columns\n- `id` - globally-unique time step identifier across an entire file\n- `breath_id` - globally-unique time step for breaths\n- `R` - lung attribute indicating how restricted the airway is (in cmH2O\/L\/S). Physically, this is the change in pressure per change in flow (air volume per time). Intuitively, one can imagine blowing up a balloon through a straw. We can change R by changing the diameter of the straw, with higher R being harder to blow.\n- `C` - lung attribute indicating how compliant the lung is (in mL\/cmH2O). Physically, this is the change in volume per change in pressure. Intuitively, one can imagine the same balloon example. We can change C by changing the thickness of the balloon\u2019s latex, with higher C having thinner latex and easier to blow.\n- `time_step` - the actual time stamp.\n- `u_in` - the control input for the inspiratory solenoid valve. Ranges from 0 to 100.\n- `u_out` - the control input for the exploratory solenoid valve. Either 0 or 1.\n- `pressure` - the airway pressure measured in the respiratory circuit, measured in cmH2O.","37627f10":"###  Split Data"}}