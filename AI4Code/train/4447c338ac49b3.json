{"cell_type":{"4b90c0cd":"code","1c6b0740":"code","295eaa9e":"code","56e0e576":"code","d9f8f518":"code","9798c6b6":"code","e9765f2c":"code","a4e14263":"code","482abf8b":"code","0fbd41f9":"code","5be76c87":"code","a9dbcc00":"code","e34713fa":"code","ffa49a75":"code","7b2da3d7":"code","078130d1":"code","17033e1f":"code","b4c5b936":"code","829c3f71":"code","825afa2f":"code","30dd8728":"code","e50d5037":"code","b6d8687d":"code","999f4a11":"code","04c9472d":"code","38d43cc3":"code","22e8a21d":"code","293b4423":"code","1bd16c2f":"code","14cd1dcb":"code","778a31c8":"code","a703c752":"code","15c42f77":"code","0b1c8eca":"code","16b8dad7":"code","5abf9906":"code","d26e66af":"code","ead42a03":"markdown","0d6354ac":"markdown","e5529120":"markdown","3998b548":"markdown"},"source":{"4b90c0cd":"#https:\/\/www.kaggle.com\/carlolepelaars\/efficientnetb5-with-keras-aptos-2019","1c6b0740":"!pip install -q efficientnet\n!pip install tensorflow-addons","295eaa9e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport tensorflow as tf\nimport keras\n# from keras import backend as K\n# from tensorflow.keras import initializers\n# from tensorflow.keras import regularizers\n# from tensorflow.keras import constraints\n# from keras.engine import Layer, InputSpec\nimport random\nimport tensorflow_addons as tfa\nimport matplotlib.pyplot as plt\nfrom kaggle_datasets import KaggleDatasets\nimport efficientnet.tfkeras as efn\nimport albumentations\nfrom sklearn.metrics import f1_score,confusion_matrix,precision_score,recall_score\nprint(f'Tensorflow version {tf.__version__}')\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport math,re,os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n\n\nrandom.seed(101)\ntf.random.set_seed(101)","56e0e576":"AUTO = tf.data.experimental.AUTOTUNE\n## Check if tpu is available:\ntry:\n    tpu=tf.distribute.cluster_resolver.TPUClusterResolver()\n    print(\"Running on TPU\",tpu.master())\nexcept ValueError:\n    tpu=None\n    \nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    strategy = tf.distribute.get_strategy() # default distribution strategy in Tensorflow. Works on CPU and single GPU.\n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)","d9f8f518":"## Check the files stored:\n!ls \/kaggle\/input\/flower-classification-with-tpus","9798c6b6":"#!gsutil ls $GCS_DS_PATH","e9765f2c":"GCS_DS_PATH = KaggleDatasets().get_gcs_path() # you can list the bucket with \"!gsutil ls $GCS_DS_PATH\"\nprint(GCS_DS_PATH)","a4e14263":"## For Inception V3 :\n# IMAGE_SIZE=[512,512]\n# EPOCHS=30\n# BATCH_SIZE=8*strategy.num_replicas_in_sync\n\n## For efficientnet:\n\nIMAGE_SIZE=[331,331]\nEPOCHS=30\nBATCH_SIZE=8*strategy.num_replicas_in_sync\n","482abf8b":"GCS_PATH_SELECT = { # available image sizes\n    192: GCS_DS_PATH + '\/tfrecords-jpeg-192x192',\n    224: GCS_DS_PATH + '\/tfrecords-jpeg-224x224',\n    331: GCS_DS_PATH + '\/tfrecords-jpeg-331x331',\n    512: GCS_DS_PATH + '\/tfrecords-jpeg-512x512'\n}\nGCS_PATH=GCS_PATH_SELECT[IMAGE_SIZE[0]]\nGCS_PATH","0fbd41f9":"!gsutil ls $GCS_PATH","5be76c87":"TRAINING_FILENAMES=tf.io.gfile.glob(GCS_PATH+\"\/train\/*.tfrec\")\nVALIDATION_FILENAMES=tf.io.gfile.glob(GCS_PATH+\"\/val\/*.tfrec\")\nTEST_FILENAMES=tf.io.gfile.glob(GCS_PATH+\"\/test\/*.tfrec\")","a9dbcc00":"TRAINING_FILENAMES","e34713fa":"for f in TRAINING_FILENAMES:\n    print(f)","ffa49a75":"CLASSES = ['pink primrose',    'hard-leaved pocket orchid', 'canterbury bells', 'sweet pea',     'wild geranium',     'tiger lily',           'moon orchid',              'bird of paradise', 'monkshood',        'globe thistle',         # 00 - 09\n           'snapdragon',       \"colt's foot\",               'king protea',      'spear thistle', 'yellow iris',       'globe-flower',         'purple coneflower',        'peruvian lily',    'balloon flower',   'giant white arum lily', # 10 - 19\n           'fire lily',        'pincushion flower',         'fritillary',       'red ginger',    'grape hyacinth',    'corn poppy',           'prince of wales feathers', 'stemless gentian', 'artichoke',        'sweet william',         # 20 - 29\n           'carnation',        'garden phlox',              'love in the mist', 'cosmos',        'alpine sea holly',  'ruby-lipped cattleya', 'cape flower',              'great masterwort', 'siam tulip',       'lenten rose',           # 30 - 39\n           'barberton daisy',  'daffodil',                  'sword lily',       'poinsettia',    'bolero deep blue',  'wallflower',           'marigold',                 'buttercup',        'daisy',            'common dandelion',      # 40 - 49\n           'petunia',          'wild pansy',                'primula',          'sunflower',     'lilac hibiscus',    'bishop of llandaff',   'gaura',                    'geranium',         'orange dahlia',    'pink-yellow dahlia',    # 50 - 59\n           'cautleya spicata', 'japanese anemone',          'black-eyed susan', 'silverbush',    'californian poppy', 'osteospermum',         'spring crocus',            'iris',             'windflower',       'tree poppy',            # 60 - 69\n           'gazania',          'azalea',                    'water lily',       'rose',          'thorn apple',       'morning glory',        'passion flower',           'lotus',            'toad lily',        'anthurium',             # 70 - 79\n           'frangipani',       'clematis',                  'hibiscus',         'columbine',     'desert-rose',       'tree mallow',          'magnolia',                 'cyclamen ',        'watercress',       'canna lily',            # 80 - 89\n           'hippeastrum ',     'bee balm',                  'pink quill',       'foxglove',      'bougainvillea',     'camellia',             'mallow',                   'mexican petunia',  'bromelia',         'blanket flower',        # 90 - 99\n           'trumpet creeper',  'blackberry lily',           'common tulip',     'wild rose']                                                                                                                                               # 100 - 102","7b2da3d7":"len(CLASSES)","078130d1":"print(f'Length of training files:{len(TRAINING_FILENAMES)} testing files:{len(TEST_FILENAMES)} validation files:{len(VALIDATION_FILENAMES)}')","17033e1f":"np.set_printoptions(threshold=15, linewidth=80)\n\ndef batch_to_numpy_images_and_labels(data):\n    images,labels=data\n    numpy_images = images.numpy()\n    numpy_labels = labels.numpy()\n    if numpy_labels.dtype == object: # binary string in this case, these are image ID strings\n        numpy_labels = [None for _ in enumerate(numpy_images)]\n    # If no labels, only image IDs, return None for labels (this is the case for test data)\n    return numpy_images, numpy_labels\n\ndef title_from_label_and_target(label, correct_label):\n    if correct_label is None:\n        return CLASSES[label], True\n    correct = (label == correct_label)\n    return \"{} [{}{}{}]\".format(CLASSES[label], 'OK' if correct else 'NO', u\"\\u2192\" if not correct else '',\n                                CLASSES[correct_label] if not correct else ''), correct\n\ndef display_one_flower(image, title, subplot, red=False, titlesize=16):\n    plt.subplot(*subplot)\n    plt.axis('off')\n    plt.imshow(image)\n    if len(title) > 0:\n        plt.title(title, fontsize=int(titlesize) if not red else int(titlesize\/1.2), color='red' if red else 'black', fontdict={'verticalalignment':'center'}, pad=int(titlesize\/1.5))\n    return (subplot[0], subplot[1], subplot[2]+1)\n    \ndef display_batch_of_images(databatch, predictions=None):\n    \"\"\"This will work with:\n    display_batch_of_images(images)\n    display_batch_of_images(images, predictions)\n    display_batch_of_images((images, labels))\n    display_batch_of_images((images, labels), predictions)\n    \"\"\"\n    # data\n    images, labels = batch_to_numpy_images_and_labels(databatch)\n    if labels is None:\n        labels = [None for _ in enumerate(images)]\n        \n    # auto-squaring: this will drop data that does not fit into square or square-ish rectangle\n    rows = int(math.sqrt(len(images)))\n    cols = len(images)\/\/rows\n        \n    # size and spacing\n    FIGSIZE = 13.0\n    SPACING = 0.1\n    subplot=(rows,cols,1)\n    if rows < cols:\n        plt.figure(figsize=(FIGSIZE,FIGSIZE\/cols*rows))\n    else:\n        plt.figure(figsize=(FIGSIZE\/rows*cols,FIGSIZE))\n    \n    # display\n    for i, (image, label) in enumerate(zip(images[:rows*cols], labels[:rows*cols])):\n        title = '' if label is None else CLASSES[label]\n        correct = True\n        if predictions is not None:\n            title, correct = title_from_label_and_target(predictions[i], label)\n        dynamic_titlesize = FIGSIZE*SPACING\/max(rows,cols)*40+3 # magic formula tested to work from 1x1 to 10x10 images\n        subplot = display_one_flower(image, title, subplot, not correct, titlesize=dynamic_titlesize)\n    \n    #layout\n    plt.tight_layout()\n    if label is None and predictions is None:\n        plt.subplots_adjust(wspace=0, hspace=0)\n    else:\n        plt.subplots_adjust(wspace=SPACING, hspace=SPACING)\n    plt.show()\n    \ndef display_confusion_matrix(cmat, score, precision, recall):\n    plt.figure(figsize=(15,15))\n    ax = plt.gca()\n    ax.matshow(cmat, cmap='Reds')\n    ax.set_xticks(range(len(CLASSES)))\n    ax.set_xticklabels(CLASSES, fontdict={'fontsize': 7})\n    plt.setp(ax.get_xticklabels(), rotation=45, ha=\"left\", rotation_mode=\"anchor\")\n    ax.set_yticks(range(len(CLASSES)))\n    ax.set_yticklabels(CLASSES, fontdict={'fontsize': 7})\n    plt.setp(ax.get_yticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n    titlestring = \"\"\n    if score is not None:\n        titlestring += 'f1 = {:.3f} '.format(score)\n    if precision is not None:\n        titlestring += '\\nprecision = {:.3f} '.format(precision)\n    if recall is not None:\n        titlestring += '\\nrecall = {:.3f} '.format(recall)\n    if len(titlestring) > 0:\n        ax.text(101, 1, titlestring, fontdict={'fontsize': 18, 'horizontalalignment':'right', 'verticalalignment':'top', 'color':'#804040'})\n    plt.show()\n    \ndef display_training_curves(training, validation, title, subplot):\n    if subplot%10==1: # set up the subplots on the first call\n        plt.subplots(figsize=(10,10), facecolor='#F0F0F0')\n        plt.tight_layout()\n    ax = plt.subplot(subplot)\n    ax.set_facecolor('#F8F8F8')\n    ax.plot(training)\n    ax.plot(validation)\n    ax.set_title('model '+ title)\n    ax.set_ylabel(title)\n    #ax.set_ylim(0.28,1.05)\n    ax.set_xlabel('epoch')\n    ax.legend(['train', 'valid.'])\n","b4c5b936":"def decode_image(image_data):\n    image = tf.image.decode_jpeg(image_data, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0  # convert image to floats in [0, 1] range\n    image = tf.reshape(image, [*IMAGE_SIZE, 3]) # explicit size needed for TPU\n    return image\n\ndef read_labeled_tfrecord(example):\n    LABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"class\": tf.io.FixedLenFeature([], tf.int64),  # shape [] means single element\n    }\n    example = tf.io.parse_single_example(example, LABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    label = tf.cast(example['class'], tf.int32)\n    return image, label # returns a dataset of (image, label) pairs\n\ndef read_unlabeled_tfrecord(example):\n    UNLABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"id\": tf.io.FixedLenFeature([], tf.string),  # shape [] means single element\n        # class is missing, this competitions's challenge is to predict flower classes for the test dataset\n    }\n    example = tf.io.parse_single_example(example, UNLABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    idnum = example['id']\n    return image, idnum # returns a dataset of image(s)\n\ndef load_dataset(filenames, labeled=True, ordered=False):\n    # Read from TFRecords. For optimal performance, reading from multiple files at once and\n    # disregarding data order. Order does not matter since we will be shuffling the data anyway.\n\n    ignore_order = tf.data.Options()\n    if not ordered:\n        ignore_order.experimental_deterministic = False # disable order, increase speed\n\n    dataset = tf.data.TFRecordDataset(filenames, num_parallel_reads=AUTO) # automatically interleaves reads from multiple files\n    dataset = dataset.with_options(ignore_order) # uses data as soon as it streams in, rather than in its original order\n    dataset = dataset.map(read_labeled_tfrecord if labeled else read_unlabeled_tfrecord, num_parallel_calls=AUTO)\n    # returns a dataset of (image, label) pairs if labeled=True or (image, id) pairs if labeled=False\n    return dataset\n\n\n\ndef data_augment(image, label):\n    # data augmentation. Thanks to the dataset.prefetch(AUTO) statement in the next function (below),\n    # this happens essentially for free on TPU. Data pipeline code is executed on the \"CPU\" part\n    # of the TPU while the TPU itself is computing gradients.\n    image = tf.image.random_contrast(image,lower=0.3,upper=0.5,seed=101)\n    image = tf.image.random_brightness(image, 0.1, seed=101)\n    image = tf.image.resize(image, [300,300])\n    #image = tf.image.random_saturation(image, 0, 2)\n    return image, label   \n\ndef data_augment_valid(image, label):\n    image = tf.image.resize(image, [300, 300])\n    return image, label   \ndef data_augment_test(image, idnum):\n    image = tf.image.resize(image, [300, 300])\n    return image,idnum\n\ndef get_training_dataset():\n    dataset = load_dataset(TRAINING_FILENAMES, labeled=True)\n    #dataset=dataset.map()\n    dataset = dataset.map(data_augment, num_parallel_calls=AUTO)\n    dataset = dataset.repeat() # the training dataset must repeat for several epochs\n    dataset = dataset.shuffle(2048)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef get_validation_dataset(ordered=False):\n    dataset = load_dataset(VALIDATION_FILENAMES, labeled=True, ordered=ordered)\n    dataset=dataset.map(data_augment,num_parallel_calls=AUTO)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.cache()\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef get_test_dataset(ordered=False):\n    dataset = load_dataset(TEST_FILENAMES, labeled=False, ordered=ordered)\n    dataset=dataset.map(data_augment,num_parallel_calls=AUTO)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef count_data_items(filenames):\n    # the number of data items is written in the name of the .tfrec files, i.e. flowers00-230.tfrec = 230 data items\n    n = [int(re.compile(r\"-([0-9]*)\\.\").search(filename).group(1)) for filename in filenames]\n    return np.sum(n)\n\n","829c3f71":"NUM_TRAINING_IMAGES = count_data_items(TRAINING_FILENAMES)\nNUM_VALIDATION_IMAGES = count_data_items(VALIDATION_FILENAMES)\nNUM_TEST_IMAGES = count_data_items(TEST_FILENAMES)\nSTEPS_PER_EPOCH = NUM_TRAINING_IMAGES \/\/ BATCH_SIZE\nprint('Dataset: {} training images, {} validation images, {} unlabeled test images'.format(NUM_TRAINING_IMAGES, NUM_VALIDATION_IMAGES, NUM_TEST_IMAGES))\n","825afa2f":"#data dump\nprint(\"Training data shapes:\")\nfor image, label in get_training_dataset().take(3):\n    print(image.numpy().shape, label.numpy().shape)\nprint(\"Training data label examples:\", label.numpy())","30dd8728":"print(\"Validation data shapes:\")\nfor image, label in get_validation_dataset().take(3):\n    print(image.numpy().shape, label.numpy().shape)\nprint(\"Validation data label examples:\", label.numpy())","e50d5037":"print(\"Test data shapes:\")\nfor image, idnum in get_test_dataset().take(3):\n    print(image.numpy().shape, idnum.numpy().shape)\nprint(\"Test data IDs:\", idnum.numpy().astype('U')) ","b6d8687d":"training_dataset = get_training_dataset()\ntraining_dataset = training_dataset.unbatch().batch(20)\ntrain_batch = iter(training_dataset)\n","999f4a11":"display_batch_of_images(next(train_batch))","04c9472d":"# peer at test data\ntest_dataset = get_test_dataset()\ntest_dataset = test_dataset.unbatch().batch(20)\ntest_batch = iter(test_dataset)\ndisplay_batch_of_images(next(test_batch))","38d43cc3":"# NUM_TRAINING_IMAGES = count_data_items(TRAINING_FILENAMES)\n# NUM_VALIDATION_IMAGES = count_data_items(VALIDATION_FILENAMES)\n# NUM_TEST_IMAGES = count_data_items(TEST_FILENAMES)","22e8a21d":"#https:\/\/www.kaggle.com\/xhlulu\/aptos-2019-densenet-keras-starter - Added dropout\n# with strategy.scope():\n#     pretrained_model=tf.keras.applications.InceptionV3(weights='imagenet',include_top=False,input_shape=[299,299,3])\n#     #pretrained_model.trainable = False # Removing the pretrained weights since pretrained weights give an categorical accuracy of max 0.34 . \n    \n#     model = tf.keras.Sequential([\n#         pretrained_model,\n#         tf.keras.layers.GlobalAveragePooling2D(),\n#         tf.keras.layers.Dense(1024,activation='relu'),\n#         tf.keras.layers.Dense(len(CLASSES), activation='softmax')\n#     ])\n\n\n#https:\/\/www.kaggle.com\/cdeotte\/without-ensemble-lb-0-665\n    \nwith strategy.scope():\n    pretrained_model=efn.EfficientNetB3(input_shape=(300,300,3),include_top=False,weights=\"imagenet\")\n    #pretrained_model.trainable = False # Removing the pretrained weights since pretrained weights give an categorical accuracy of max 0.34 . \n    model=tf.keras.Sequential([pretrained_model,\n                               #tf.keras.layers.GlobalAveragePooling2D(),\n                               tf.keras.layers.GlobalMaxPool2D(),\n                               tf.keras.layers.Dropout(0.3),\n                               tf.keras.layers.Dense(1024,activation='relu'),\n                               #tf.keras.layers.Dropout(0.4),\n                              tf.keras.layers.Dense(len(CLASSES),activation=\"softmax\")])\n    es=tf.keras.callbacks.EarlyStopping(monitor='val_loss',mode='auto',patience=5,verbose=1)\n    rlr = tf.keras.callbacks.ReduceLROnPlateau(monitor='val_loss',factor=0.5,patience=5,verbose=1,mode='min',epsilon=0.0001)\n# lr_scheduler=tfa.optimizers.CyclicalLearningRate(initial_learning_rate=5e-5,\n#                                                 maximal_learning_rate=6e-3,\n#                                                 step_size=200,\n#                                                 scale_fn=lambda x:1.,\n#                                                 scale_mode=\"cycle\",\n#                                                 name=\"cyclic_learning_rate\")\n\nmodel.compile(\n    optimizer=tf.keras.optimizers.Adam(learning_rate=6e-5),\n    loss = 'sparse_categorical_crossentropy',\n    metrics=['sparse_categorical_accuracy']\n)\n","293b4423":"# pretrained_model.summary()","1bd16c2f":"#https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/optimizers\/schedules\/ExponentialDecay\n\n#https:\/\/stackoverflow.com\/questions\/46036522\/defining-model-in-keras-include-top-true\n\n# Use efficientnetB7 to check the accuracy.https:\/\/www.kaggle.com\/carlolepelaars\/efficientnetb5-with-keras-aptos-2019\n\nmodel.summary()","14cd1dcb":"#https:\/\/www.researchgate.net\/post\/When_can_Validation_Accuracy_be_greater_than_Training_Accuracy_for_Deep_Learning_Models\n\nhistory = model.fit(get_training_dataset(), steps_per_epoch=STEPS_PER_EPOCH, epochs=EPOCHS, validation_data=get_validation_dataset(),callbacks=[es,rlr])","778a31c8":"display_training_curves(history.history['loss'], history.history['val_loss'], 'loss', 211)\n#display_training_curves(history.history['sparse_categorical_accuracy'], history.history['val_sparse_categorical_accuracy'], 'accuracy', 212)\ndisplay_training_curves(history.history['sparse_categorical_accuracy'], history.history['val_sparse_categorical_accuracy'], 'accuracy', 212)","a703c752":"##Confusion Matrix code:\ncmdataset = get_validation_dataset(ordered=True)\nimages_ds = cmdataset.map(lambda image, label: image)\nlabels_ds = cmdataset.map(lambda image, label: label).unbatch()\ncm_correct_labels = next(iter(labels_ds.batch(NUM_VALIDATION_IMAGES))).numpy() # get everything as one batch\ncm_probabilities = model.predict(images_ds)\ncm_predictions = np.argmax(cm_probabilities, axis=-1)\n\ncmat = confusion_matrix(cm_correct_labels, cm_predictions, labels=range(len(CLASSES)))\nscore = f1_score(cm_correct_labels, cm_predictions, labels=range(len(CLASSES)), average='macro')\nprint(\"Macro F1 Score:\",score)","15c42f77":"## Visual Validation:\ndataset = get_validation_dataset()\ndataset = dataset.unbatch().batch(20)\nbatch = iter(dataset)\n\n\nimages, labels = next(batch)\nprobabilities = model.predict(images)\npredictions = np.argmax(probabilities, axis=-1)\ndisplay_batch_of_images((images, labels), predictions)\n","0b1c8eca":"test_ds = get_test_dataset(ordered=True) # since we are splitting the dataset and iterating separately on images and ids, order matters.","16b8dad7":"type(test_ds)","5abf9906":"test_images_ds = test_ds.map(lambda image, idnum: image)\nprobabilities = model.predict(test_images_ds)\npredictions = np.argmax(probabilities, axis=-1)\nprint(predictions)","d26e66af":"\ntest_ids_ds = test_ds.map(lambda image, idnum: idnum).unbatch()\ntest_ids = next(iter(test_ids_ds.batch(NUM_TEST_IMAGES))).numpy().astype('U') # all in one batch\nnp.savetxt('submission.csv', np.rec.fromarrays([test_ids, predictions]), fmt=['%s', '%d'], delimiter=',', header='id,label', comments='')\n!head submission.csv","ead42a03":"# Flower Type Classification using Inception V3 Model ","0d6354ac":"In this kernel , I have made attempt to understand how the TPU accleration works and also check how Inception V3 works on this dataset . This is pretty much a fork of [Starter Kernel](https:\/\/www.kaggle.com\/mgornergoogle\/getting-started-with-100-flowers-on-tpu).Pls upvote Martin Gornen's kernel if you find the approach useful.\n\nChanges Made :\n\n* Used Inception V3 instead of VGG16\n* resized the images for Inception V3 input\n* Using the flower images to train the model providing validation categorical accuracy of 0.8815\n* v6:Used efficientnet bo model with dropout layer after dense layer and checked the accuracy .Gave a macro f1 score of 0.86 for validation.\n* v7:Used efficientnet b1 instead of b0 with the early stopping patience changed to 8 from 5.Gave a macro f1 score of 0.82 for validation ","e5529120":"## Reading competition dataset","3998b548":"## Model Loss :"}}