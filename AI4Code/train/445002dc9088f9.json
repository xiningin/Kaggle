{"cell_type":{"fb2dff73":"code","e05169e1":"code","99ee12b0":"code","f0dc25b5":"code","ba827db7":"code","c41c77a7":"code","e8d18557":"code","9b3b76b5":"code","6555d648":"code","b53ac6be":"code","ddf15328":"code","0c0190f4":"code","d643b146":"code","9b0a8d29":"code","fa20e45d":"code","f464f005":"code","e774df1f":"code","53f7ba83":"code","2f3c0fe8":"code","0ac6c198":"code","8a4473c2":"code","fd89227b":"code","e90960be":"code","7c9ef61e":"code","b9ab02a2":"code","3c0e9fb6":"code","72d71500":"code","d7599cdd":"code","9a5ae781":"code","06befab1":"code","d0d2b537":"code","67510fe2":"code","92b8b1dc":"code","02ee442f":"code","18e0a35e":"code","79a65d23":"code","94d323ff":"code","e8887f17":"code","fe2ccc15":"markdown","922e6e2d":"markdown","aa3e2fca":"markdown","614f34ac":"markdown","463c4e61":"markdown","6d45cccb":"markdown","b0c850c6":"markdown","cb2f7cc0":"markdown","8892f2c0":"markdown","bbc95960":"markdown","b5003eb6":"markdown","d7a17d35":"markdown","765c48ea":"markdown","b6efe7cd":"markdown","ec80e929":"markdown","dd31f6bb":"markdown","4c5b52ca":"markdown"},"source":{"fb2dff73":"# data scraping\nimport requests\nimport urllib.request\nfrom bs4 import BeautifulSoup\n\n# plotting\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\n# operations\nimport numpy as np","e05169e1":"# List of Roman Emperors from Wikipedia\nwebsite_url = requests.get(\n    'https:\/\/en.wikipedia.org\/wiki\/List_of_Roman_emperors').text\nsoup = BeautifulSoup(website_url, \"html\")","99ee12b0":"# finding the table I want\nmy_tables = soup.findAll('table', {\"class\": 'wikitable'})","f0dc25b5":"# Scraping Wikipedia Page and saving each column in a different variable\n\nA = []\nB = []\nC = []\nD = []\nE = []\nF = []\nG = []\nH = []\nfor table in my_tables:\n    for row in table.findAll('tr'):\n        cells = row.findAll('td')\n        if len(cells) == 7:\n            death = cells[6].findAll(text=True)\n            death_text = \"\"\n            for i in death:\n                death_text = death_text + \" \" + i\n            A.append(cells[0].find(text=True))\n            B.append(cells[1].find(text=True))\n            C.append(cells[2].find(text=True))\n            D.append(cells[3].find(text=True))\n            F.append(cells[5].find(text=True))\n            reign = cells[4].findAll(text=True)\n            reign_text = \"\"\n            for i in reign:\n                reign_text = reign_text + \" \" + i\n            E.append(reign_text)\n\n            G.append(death_text)","ba827db7":"#Creating DataFrame\n\ndf = pd.DataFrame(B, columns=['Name'])\ndf['Birth'] = C\ndf['Succession'] = D\ndf['Reign'] = E\ndf['Time'] = F\ndf[\"Deaths\"] = G\ndf.head()\ndf.to_csv(\"romans.csv\", index=False)","c41c77a7":"#make all strings lowercase except the names for easier data extraction\nfor i in df.columns.values:\n    if i != \"Name\":\n        df[i] = df[i].str.lower()\n        \n#drop Succession column\ndf = df.drop(df.columns[[2]], axis=1)\ndf.to_csv(index=False)\ndf.head()","e8d18557":"## Parsing through the Death column to find out cause of death\n# Disclaimer: some rows contain more than one cause of death,\n# which means that some information might be lost or misinterpreted\n\n\ndeaths = []\nfor i in df.Deaths:\n    if \"assassin\" in i or \"murdered\" in i or (\"killed\" in i and not \"battle\" in i):\n        deaths.append(\"Assassinated\")\n    elif \"natural\" in i:\n        deaths.append(\"Natural Causes\")\n    elif \"suicide\" in i:\n        deaths.append(\"Suicide\")\n    elif \"executed\" in i or \"beheaded\" in i:\n        deaths.append(\"Executed\")\n    elif \"battle\" in i:\n        deaths.append(\"Killed in Battle\")\n    elif \"poison\" in i:\n        deaths.append(\"Poisoned\")\n\n    elif \"unknown\" in i or i[-2] == \")\" or \"constantinople\" in i:\n        deaths.append(\"Other\/Unknown\")\n    elif \"illness\" in i:\n        deaths.append(\"Illness\")\n    elif any(disease in i for disease in [\"tuberculosis\", \"edema\", \"gout\", 'carbuncle', 'dysentery', \"epilepsy\" ]):\n        deaths.append(\"Illness\")\n    else:\n        deaths.append(\"Other\/Unknown\")\n\ndf[\"Cause\"] = deaths","9b3b76b5":"# Parsing through the Age column and getting only the age at death\n\nages = []\nfor i in df.Deaths:\n    if \"age\" in i:\n        a = i.split(\"age\", 1)\n        b = a[-1].split(\")\")\n        c = b[0].split(\" \")\n        d = c[-1].split(\"-\")\n        e = d[0].split(\"~\")\n        f = e[-1].split(\"\/\")\n        try:\n            age = int(f[-1])\n            ages.append(age)\n        except:\n            ages.append(\"Unknown\")\n            pass\n    else:\n        ages.append(\"Unknown\")\n\ndf[\"Age\"] = ages","6555d648":"# Parsing through the Reign column and getting only the year when reign ended\n\nreign_end = []\nfor i in df.Reign:\n    end = \"Unknown\"\n    if \"ad\" not in i:\n        a = i.split()\n        b = a[-1].split(\"?\")\n        c = b[-1].split(\"\u2013\")\n        try:\n            end = int(c[-1])\n        except:\n            try:\n                a = i.split(\"(\")\n                b = a[-2].split()\n                end = int(b[-1])\n            except:\n                print(a,b)\n                print(\"\")\n                pass\n            pass\n    else:\n        a = i.split()\n        end = int(a[-2])\n    reign_end.append(end)   \n\ndf[\"End of Reign\"] = reign_end","b53ac6be":"# Parsing through the Reign column and getting only the year of birth\nbirths = []\nfor i in df.Birth:\n    if \"?\" in i:\n        year = \"Unknown\"\n    elif \"ad,\" in i:\n        a = i.split(\" ad\", 1)\n        b = a[0].split()\n        year = int(b[-1])\n    elif \"bc,\" in i:\n        a = i.split(\" bc\", 1)\n        b = a[0].split()\n        year = -int(b[-1])\n    elif \",\" in i:\n        a = i.split(\",\")\n        b = a[-2].split()\n        c = b[-1].split(\".\")\n        d = c[-1].split(\"\/\")\n        year = int(d[-1]) \n    elif \"c.\" in i:\n        a = i.split(\".\")\n        b = a[-1].split()\n        try:\n            year = int(b[0])\n        except:\n            year = \"Unknown\"\n            pass\n    else:\n        a = i.split()\n        try:\n            year = int(a[-1])\n        except:\n            year = \"Unknown\"\n            pass\n    births.append(year)\n\n#fixing wrong entry    \nbirths[71] = 384    \ndf[\"Births\"] = births","ddf15328":"# Parsing through the Time in Office column to get only numeric value\nlengths = []\n\nfor i in df.Time:\n    year = 0\n    month = 0\n    if \"year\" in i:\n        a = i.split()\n        b = a[0].split(\"\/\")\n        year = int(b[0])\n        if \"month\" in i:\n            d = i.split(\"month\")\n            e = d[0].split()\n            month = int(e[-1])\n        length = year\n        lengths.append(length)\n    elif \"month\" in i:\n        a = i.split()\n        b = a[0].split(\"\u2013\")\n        month = int(b[0])\n        length = year\n        lengths.append(length)\n    elif \"day\" in i:\n        length = year\n        lengths.append(length)\n    else:\n        lengths.append(\"Unknown\")\ndf[\"Length\"] = lengths","0c0190f4":"df.head()","d643b146":"# palette\ngreen = '#35d0ba'\nblue = \"#00b8a9\"\nred = '#d92027'\norange = '#ff9234'\nyellow = '#ffcd3c'\nyellow2 = \"#ffde7d\"\nbeige = \"#f8f3d4\"\nred2 = \"#f6416c\"\nblack = \"#222831\"","9b0a8d29":"#plotting histogram of age at time of death\nsns.set_style(\"white\")\nnum_ages = []\nfor i in ages:\n    if type(i) == int:\n        num_ages.append(i)\n\nfig, ax  = plt.subplots(figsize = (10,10))\nplt.hist(num_ages, bins = 20, color = black)\nax.set(title = \"Age at Death\", ylabel = \"Count\", xlabel = \"Time (years)\")\nplt.show()","fa20e45d":"#plotting time in ofice histogram\n\nnum_lenghts = []\nfor i in lengths:\n    if type(i) == int:\n        num_lenghts.append(i)\n\nfig, ax = plt.subplots(figsize=(8, 8))\nplt.hist(num_lenghts, bins=20, color = black)\nax.set(title = \"Time in power\", ylabel = \"Count\", xlabel = \"Time (years)\")\n\nplt.show()","f464f005":"#plotting histogram of causes of death\nsns.set(palette = \"YlOrRd\")\nsns.countplot(y = 'Cause',\n              data = df,\n              order = df['Cause'].value_counts().index, palette = \"YlOrRd_r\")","e774df1f":"#getting only rows where we have all of the numerical information\ndf0 = df.drop(df.columns[[1,2,3,4,5]], axis=1)\ndf1 = df0.iloc[:,1:].apply(pd.to_numeric, errors='coerce')\ndf1 = df1.dropna()\n\ndf1 = pd.concat([df.Name,df1], join = \"inner\", axis = 1)\ndf1 = pd.concat([df.Cause,df1], join = \"inner\", axis = 1)\ndf1.head()","53f7ba83":"#Fixing wrong entry\ndf1[\"End of Reign\"][df1[\"Name\"] == \"Alexios I Komnenos\"] = 1118","2f3c0fe8":"before = df1[\"End of Reign\"] - df1.Births - df1.Length #time lived before becoming an emperor\nmiddle = before + df1.Length + 0.5 #length of the reign\nafter = df1.Age + 0.5 #time lived after the reign ended (if any) \n\ndf1[\"before\"] = before\ndf1[\"middle\"] = middle\ndf1[\"after\"] = after\n\n#percentage of emperors that lived after their reign\nprint(len(df1[\"after\"][(df1[\"after\"] - df1[\"middle\"]) > 0]) \/ 131 * 100, \"%\")","0ac6c198":"sns.set_style(\"whitegrid\")\nsns.set()\nfig, ax = plt.subplots(figsize=(6, 40))\n\nsns.barplot(x=\"after\", y=\"Name\", data=df1, color=green, ci=None, label=\"After mandate\")\nsns.barplot(x=\"middle\", y='Name', data=df1, color=red, ci=None, label = \"During mandate\")\nsns.barplot(x=\"before\", y='Name', data=df1, color=yellow, ci=None, label=\"Before mandate\")\n\nax.set(xlabel=\"Age (years)\")\nax.legend(ncol=3, bbox_to_anchor=(0, 1),\n              loc='lower left', fontsize='small')\nax.set_title(\"Which Emperors lived the most after their mandate?\", pad=40, fontsize = \"x-large\")\nplt.show()","8a4473c2":"%matplotlib inline\n\n# sorting dataframe by age at the time of death (looks pretty)\ndf3 = df1.sort_values(['Age'], ascending=False).reset_index(drop=True)\n\n\nfor i in set(deaths):\n    fig, ax = plt.subplots(figsize=(5,\n                                    max(len(df3[df3[\"Cause\"] == i]) \/\/ 4, 2)))\n    sns.barplot(x=\"after\",\n                y=\"Name\",\n                data=df3[df3[\"Cause\"] == i],\n                color=green,\n                ci=None,\n                label=\"After mandate\")\n    sns.barplot(x=\"middle\",\n                y='Name',\n                data=df3[df3[\"Cause\"] == i],\n                color=red,\n                ci=None,\n                label=\"During mandate\")\n    sns.barplot(x=\"before\",\n                y='Name',\n                data=df3[df3[\"Cause\"] == i],\n                color=yellow,\n                ci=None,\n                label=\"Before mandate\")\n    ax.set_title(i, pad=30)\n    ax.set(xlabel=\"Time\")\n    ax.legend(ncol=3, bbox_to_anchor=(0, 1),\n              loc='lower left', fontsize='small')\n    plt.show()","fd89227b":"#making dataframe with only numeric values in Age column\n\nhey = df[\"Age\"]\nage = hey.apply(pd.to_numeric, errors='coerce')\nage = age.dropna()\nage = age.to_frame()","e90960be":"# Appending column with age range\nr_age = []\nfor i in age[\"Age\"]:\n    if i < 20:\n        r_age.append(\"0-20\")\n    elif i < 30:\n        r_age.append(\"20-30\")\n    elif i < 40:\n        r_age.append(\"30-40\")\n    elif i < 50:\n        r_age.append(\"40-50\")\n    elif i < 60:\n        r_age.append(\"50-60\")\n    elif i < 70:\n        r_age.append(\"60-70\")\n    else:\n        r_age.append(\"70+\")\n        \nage[\"Range\"] = r_age","7c9ef61e":"age = pd.concat([df.Cause,age], join = \"inner\", axis = 1)\nage.head(10)","b9ab02a2":"#How many people dies from each cause for each age range\nyoung = []\nfor i in set(deaths):\n    first = age[age.Range == \"0-20\"]\n    first.head()\n    young.append(len(first[\"Cause\"][first[\"Cause\"] == i]))\n    \ntwenties = []\nfor i in set(deaths):\n    first = age[age.Range == \"20-30\"]\n    twenties.append(len(first[\"Cause\"][first[\"Cause\"] == i]))\n    \ntirties = []\nfor i in set(deaths):\n    first = age[age.Range == \"30-40\"]\n    tirties.append(len(first[\"Cause\"][first[\"Cause\"] == i]))\n    \nforties = []\nfor i in set(deaths):\n    first = age[age.Range == \"40-50\"]\n    forties.append(len(first[\"Cause\"][first[\"Cause\"] == i]))\n    \nfifties = []\nfor i in set(deaths):\n    first = age[age.Range == \"50-60\"]\n    fifties.append(len(first[\"Cause\"][first[\"Cause\"] == i]))\n    \nsixties = []\nfor i in set(deaths):\n    first = age[age.Range == \"60-70\"]\n    sixties.append(len(first[\"Cause\"][first[\"Cause\"] == i]))\n    \nold = []\nfor i in set(deaths):\n    first = age[age.Range == \"70+\"]\n    old.append(len(first[\"Cause\"][first[\"Cause\"] == i]))","3c0e9fb6":"#Creating dataframe out of the lists\n\nlst = [young, twenties, tirties, forties, fifties, sixties, old]\npercentages = pd.DataFrame(lst, columns=[i for i in set(deaths)], dtype=float)","72d71500":"percentages.head(10)","d7599cdd":"# Lists of normalized values for each type of death\n\ntotals = [\n    i + j + k + l + m + n for i, j, k, l, m, n in zip(\n        percentages[\"Assassinated\"] +\n        percentages[\"Poisoned\"], percentages['Natural Causes'],\n        percentages[\"Executed\"], percentages[\"Killed in Battle\"],\n        percentages[\"Illness\"], percentages[\"Suicide\"])\n]\nassassinated = [\n    i \/ j * 100\n    for i, j in zip(percentages['Assassinated'] +\n                    percentages[\"Poisoned\"], totals)\n]\nnatural = [i \/ j * 100 for i, j in zip(percentages['Natural Causes'], totals)]\nexecuted = [i \/ j * 100 for i, j in zip(percentages['Executed'], totals)]\nbattle = [i \/ j * 100 for i, j in zip(percentages['Killed in Battle'], totals)]\nillness = [i \/ j * 100 for i, j in zip(percentages['Illness'], totals)]\nsuicide = [i \/ j * 100 for i, j in zip(percentages['Suicide'], totals)]","9a5ae781":"# plot most common causes of death for each age range\n\nfig, ax = plt.subplots(figsize=(9, 9))\nbarWidth = 0.85\nnames = [\"0-20\", \"20-30\", \"30-40\", \"40-50\", \"50-60\", \"60-70\", \"70+\"]\nr = [1, 2, 3, 4, 5, 6, 7]\n\nplt.bar(r,\n        assassinated,\n        color=red,\n        edgecolor='white',\n        width=barWidth,\n        label=\"Assassinated\")\nplt.bar(r,\n        executed,\n        bottom=assassinated,\n        color=\"#fe346e\",\n        edgecolor='white',\n        width=barWidth,\n        label=\"Executed\")\nplt.bar(r,\n        battle,\n        bottom=[i + j for i, j in zip(assassinated, executed)],\n        color=orange,\n        edgecolor='white',\n        width=barWidth,\n        label=\"Killed in Battle\")\nplt.bar(r,\n        suicide,\n        bottom=[i + j + k for i, j, k in zip(assassinated, executed, battle)],\n        color=yellow,\n        edgecolor='white',\n        width=barWidth,\n        label=\"Suicide\")\nplt.bar(r,\n        illness,\n        bottom=[i + j + k + l for i, j, k, l in zip(assassinated, battle, suicide, executed)],\n        color= green,\n        edgecolor='white',\n        width=barWidth,\n        label=\"Illness\")\nplt.bar(r,\n        natural,\n        bottom=[i + j + k + l + m for i, j, k, l , m in zip(assassinated, suicide, battle, executed, illness)],\n        color=\"#16817a\",\n        edgecolor='white',\n        width=barWidth,\n        label=\"Natural Causes\")\n\nax.set_title(\"Most common cause of death by age\", pad=40, fontsize = \"x-large\")\nplt.xticks(r, names)\nplt.xlabel(\"Age\", fontsize = \"x-large\")\nplt.ylabel(\"Cause of death (%)\", fontsize = \"x-large\")\nhandles, labels = ax.get_legend_handles_labels()\nax.legend(reversed(handles), reversed(labels), ncol=1, bbox_to_anchor=(1, 0.6), loc='lower left', fontsize='x-large')","06befab1":"palette = [red, \"gray\",\"blue\",\"#fe346e\", orange, yellow, green, \"#16817a\" ]\npalette = [\"gray\", yellow, red,\"#16817a\", green, orange, \"#fe346e\", \"#562349\"]\npalette = [\"#16817a\", red, yellow, \"#fe346e\", orange, \"gray\", green, \"purple\"]\nsns.set(font_scale=1.3)\ng = sns.relplot(x=\"End of Reign\",\n            y=\"Length\",\n            data=df1,\n            s=300,\n            height=10,\n            hue=\"Cause\",\n            palette=palette,\n            alpha=0.8)\ng.set(ylabel = \"Length of mandate\", xlabel = \"End of Reign (years ac.)\", title = \"Roman Emperors Scatterplot\")","d0d2b537":"df1[\"Size\"] = [i * 0.4 for i in df1[\"Age\"]]\ndf1 = pd.concat([df.Reign,df1], join = \"inner\", axis = 1)\n\ndf1.head()","67510fe2":"from bokeh.plotting import figure, output_file, show, ColumnDataSource\nfrom bokeh.transform import factor_cmap\nfrom bokeh.models import LabelSet\nfrom bokeh.io import output_notebook\nfrom bokeh.embed import file_html\nfrom bokeh.resources import CDN\n\nTOOLS = \"hover,crosshair,pan,wheel_zoom,zoom_in,zoom_out,box_zoom,undo,redo,reset,tap,save,box_select\"\n\ncategories = [\n    'Assassinated', 'Other\/Unknown', 'Poisoned', 'Killed in Battle',\n    'Natural Causes', 'Executed', 'Illness', 'Suicide'\n]\n\nTOOLTIPS = [(\"Emperor\", \"@Name\"), (\"Reign\", \"@Reign\"),(\"Age at death\", \"@Age\"), (\"Cause of death\", \"@Cause\")]\n\nsource = ColumnDataSource(data=df1)\np = figure(title = \"Roman Emperors - Life and Death\", tools=TOOLS, tooltips=TOOLTIPS)\n\np.scatter(x=\"End of Reign\",\n          y=\"Length\",\n          source=source,\n          line_color=\"black\",\n          color=factor_cmap('Cause', palette='Set1_8', factors=categories),\n          fill_alpha=0.8,\n          size=\"Size\",\n          legend_group=\"Cause\")\n\noutput_file(\"roman_emperors.html\", title=\"Roman Emperors\")\noutput_notebook()\n\np.xaxis[0].axis_label = 'End of Reign (years ac.)'\np.yaxis[0].axis_label = 'Time in Power'\n\nshow(p)  # open a browser\n","92b8b1dc":"#getting only rows where we have all of the information\n\ntrend_df = df[[\"Cause\",\"End of Reign\"]]\ntrend_df = trend_df.iloc[:,1:].apply(pd.to_numeric, errors='coerce')\ntrend_df = trend_df.dropna()\n\n\n\ntrend_df = pd.concat([df.Cause,trend_df], join = \"inner\", axis = 1)\ntrend_df = trend_df[trend_df[\"Cause\"] != \"Other\/Unknown\"]\ntrend_df = trend_df[trend_df[\"End of Reign\"] < 500]\ntrend_df[80:150]","02ee442f":"counts = [[], [], [], [], [], [], []]\ndeaths_lst = [\n    \"Assassinated\", \"Suicide\", \"Killed in Battle\", \"Executed\", \"Illness\",\n    \"Poisoned\", \"Natural Causes\"\n]\nfor i in range(len(deaths_lst)):\n    for b in range(0, 500, 50):\n        counts[i].append(\n            len(trend_df[\"Cause\"][(trend_df[\"Cause\"] == deaths_lst[i])\n                                  & (b < trend_df[\"End of Reign\"]) &\n                                  (trend_df[\"End of Reign\"] < b + 100)]))\nassassinated, suicide, battle, executed, illness, poisoned, natural = counts","18e0a35e":"sns.set(palette = \"Paired\")\nsns.set_style(\"white\")\n\nfig, ax = plt.subplots(figsize = (10,10))\n\nfor i in range(len(counts)):\n    plt.plot(range(0, 500, 50), counts[i], label = deaths_lst[i], linewidth = 3)\n    \nax.legend()\nplt.xticks(range(0, 500, 50), [str(i) + \" - \" + str(i + 150) for i in range(0, 1500, 150)], fontsize = 12, rotation = 90)\nplt.yticks(fontsize = 12)\nax.set_title(\"Cause of death trends until the end of the Western Empire\", pad=40, fontsize = \"large\")\nplt.xlabel(\"Time (years AD)\", fontsize = \"large\")\nplt.ylabel(\"Count\", fontsize = \"large\")\nplt.show()","79a65d23":"# summing up violent deaths\nviolent = [a+b+c+d for a,b,c,d in zip(assassinated,battle,executed,poisoned)]\nv_df = []\nfor i in range(10):\n    v_df.append(violent)","94d323ff":"# Creating DataFrame\nheat = pd.DataFrame(v_df)","e8887f17":"# Plotting heatmap\nfig, ax  = plt.subplots(figsize = (15,1))\nsns.heatmap(heat, robust=True, cmap='OrRd', yticklabels=False, cbar=False, xticklabels = False)\nplt.xticks(range(11), range(0, 501, 50),fontsize = 13)\nplt.xlabel(\"Time (years AC)\",fontsize = 13)\nplt.show()","fe2ccc15":"Let's try to see how the reign lengths varied with time.","922e6e2d":"Yep, most of them died during their time in office, which makes sense since the title was lifelong...\n\nLet's see how these compare in terms of death cause. Also, let's organize their age in ascending order (looks pretty)","aa3e2fca":"Because the data is messy, we need to go through the columns and extract the necessary information for each.","614f34ac":"Now, let's put all the data together in a nice interactive plot using Bokeh","463c4e61":"It looks like the period from year 200 until 250 was BLOODY. 17 emperors were murdered during these 50 years...","6d45cccb":"Finally, let's try to analyze which periods were the most chaotic. To do that, let's make a heatmap of violent deaths by emperors.","b0c850c6":"> **Importing necessary libraries**","cb2f7cc0":"Hmm, my suspitions had some truth in them. Besides unknown causes, assassination is the most common way that an emperor died. Yikes. ","8892f2c0":"Scraping the data from Wikipedia","bbc95960":"Let's see the time that each emperor lived before getting into power, and the time (if any) they lived after renouncing.","b5003eb6":"# Life and Death of Roman Emperors in 6 Visualizations\n\nAfter the assassination of Julius Caesar, a political crisis fell upon the extensive lands of the Roman Republic. After much conflict, Caesar's adopted son Octavian seized power and in 27 BC the Roman Senate formally granted him overarching power and the new title Augustus, effectively making him the first Roman emperor.\n\nFrom then, 191 men have shared the title until the end of the Byzantine Empire in 1453. This notebook is an attempt to gather some insight into the conflictuous Rome of ancient time.","d7a17d35":"Let's try to analyze the most common cause of death per age.","765c48ea":"Plotting initial visualizations to understand the data.","b6efe7cd":"It seems like the emperors lived a relatively long life, considering the normal distribution around 50. These people came from the elite of society, so a higher life expectance is understandable.\n\nHowever, I was surprised to see that the time in power of these emperors is actually quite small. The mean of the distribution is 10 and the median is 6, which reflects the strong skew to the right.\n\nI started to realize that becoming an emperor could be a sort of death sentence, so I decided to investigate the causes of death.","ec80e929":"Was there a \"death\" style for each period of time? Let's see.","dd31f6bb":"<img src=\"https:\/\/www.imperiumromanum.edu.pl\/wp-content\/uploads\/2014\/09\/img5_2048.jpg\" length=\"100px\" width=\"1000px\">","4c5b52ca":"It's easy to notice that the assassinated ones didn't stay long in power...\n"}}