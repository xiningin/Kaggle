{"cell_type":{"11feeff4":"code","187cbff5":"code","572fd150":"code","a1a2eb93":"code","6e0f7a4f":"code","4d97abee":"code","d2d5c824":"code","f231dd7f":"code","c43ca1ae":"code","4611e48a":"code","cc20a069":"code","c099e358":"code","59c68a97":"code","70c022e9":"code","3e48a642":"code","0e7ceac5":"code","01f3b21f":"code","6cb19c0d":"code","050caf4e":"code","5d55778b":"code","af9e9606":"code","aa5efa67":"code","fff39056":"code","50addc6d":"code","99cb004e":"code","f23bb746":"code","4a455725":"code","929cf9cf":"code","e92e4394":"code","5f9db188":"code","fc88dc0b":"code","a9c6504a":"code","3424e32c":"code","0e71f588":"code","fb330ffa":"code","8643f184":"markdown","8e813963":"markdown","9d77446e":"markdown","82f2421f":"markdown","dcf4c686":"markdown","44f2c302":"markdown","ae7a2a52":"markdown","4a181a4e":"markdown","c504b4d0":"markdown","10d5982a":"markdown","c19f34fa":"markdown","91569a3b":"markdown"},"source":{"11feeff4":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport os\nimport seaborn as sns\nfrom sklearn import model_selection, preprocessing\nimport xgboost as xgb\ncolor = sns.color_palette()\n\n%matplotlib inline\n\npd.options.mode.chained_assignment = None  # default='warn'\npd.set_option('display.max_columns', 500)\nfrom zipfile import ZipFile ","187cbff5":"os.listdir('..\/input\/sberbank-russian-housing-market')","572fd150":"train_df = pd.read_csv(ZipFile(\"..\/input\/sberbank-russian-housing-market\/train.csv.zip\").open('train.csv'), parse_dates=['timestamp'])\ntest_df = pd.read_csv(ZipFile(\"..\/input\/sberbank-russian-housing-market\/test.csv.zip\").open('test.csv'), parse_dates=['timestamp'])\nmacro_df = pd.read_csv(ZipFile(\"..\/input\/sberbank-russian-housing-market\/macro.csv.zip\").open('macro.csv'), parse_dates=['timestamp'])","a1a2eb93":"train_df.head()","6e0f7a4f":"macro_df.head()","4d97abee":"train_df = pd.merge(train_df, macro_df, how=\"left\", on=\"timestamp\")\ntest_df = pd.merge(test_df, macro_df, how=\"left\", on=\"timestamp\")","d2d5c824":"train_df.shape, test_df.shape","f231dd7f":"train_df['price_doc'].dtype","c43ca1ae":"plt.figure(figsize=(8,6))\nplt.scatter(range(train_df.shape[0]), np.sort(train_df.price_doc.values))\nplt.xlabel('index', fontsize=12)\nplt.ylabel('price', fontsize=12)\nplt.show()","4611e48a":"plt.figure(figsize=(12,8))\nsns.distplot(train_df.price_doc.values, bins=50, kde=True)\nplt.xlabel('price')\nplt.show()","cc20a069":"plt.figure(figsize=(12,8))\nsns.distplot(np.log(train_df.price_doc.values), bins=50, kde=True)\nplt.xlabel('price')\nplt.show()","c099e358":"upper_limit = np.percentile(train_df['price_doc'], 99)\nlower_limit = np.percentile(train_df['price_doc'], 1)\n\ntrain_df.loc[(train_df['price_doc'] > upper_limit), 'price_doc'] = upper_limit\ntrain_df.loc[(train_df['price_doc'] < lower_limit), 'price_doc'] = lower_limit","59c68a97":"missing_df = train_df.isnull().sum(axis=0).reset_index()\nmissing_df.columns = ['column_name', 'missing_count']\nmissing_df = missing_df.loc[(missing_df['missing_count'] > 0), :]\nmissing_df = missing_df.sort_values(by='missing_count')\nind = range(missing_df.shape[0])\n\nfig, ax = plt.subplots(figsize=(12,18))\nrects = ax.barh(ind, missing_df['missing_count'], color=\"purple\")\nax.set_yticks(ind)\nax.set_yticklabels(missing_df.column_name.values, rotation='horizontal')\nax.set_xlabel(\"Count of missing values\")\nax.set_title(\"Number of missing values in each column\")\nplt.show()","70c022e9":"cat_cols = [col for col in train_df.columns if train_df[col].dtype == 'object']\n\nle = preprocessing.LabelEncoder()\n\nfor col in cat_cols:\n    train_df[col] = le.fit_transform(train_df[col].astype('str'))\n    test_df[col] = le.fit_transform(test_df[col].astype('str'))","3e48a642":"plt.figure(figsize=(12,8))\nsns.countplot(x='floor', data=train_df)\nplt.ylabel('Count', fontsize=12)\nplt.xlabel('floor number', fontsize=12)\nplt.xticks(rotation='vertical')\nplt.show()","0e7ceac5":"temp_df = train_df.groupby(['floor'])['price_doc'].aggregate(np.median).reset_index()\nplt.figure(figsize=(12,8))\nsns.pointplot(x='floor', y='price_doc', data=temp_df)\nplt.ylabel('Median Price', fontsize=12)\nplt.xlabel('Floor number', fontsize=12)\nplt.xticks(rotation='vertical')\nplt.show()","01f3b21f":"plt.figure(figsize=(12,8))\nsns.countplot(x=\"max_floor\", data=train_df)\nplt.ylabel('Count', fontsize=12)\nplt.xlabel('Max floor number', fontsize=12)\nplt.xticks(rotation='vertical')\nplt.show()","6cb19c0d":"plt.figure(figsize=(12,8))\nsns.boxplot(x=\"max_floor\", y=\"price_doc\", data=train_df)\nplt.ylabel('Median Price', fontsize=12)\nplt.xlabel('Max Floor number', fontsize=12)\nplt.xticks(rotation='vertical')\nplt.show()","050caf4e":"# count null values of each row\ntrain_df['null_count'] = train_df.isnull().sum(axis=1)\ntest_df['null_count'] = test_df.isnull().sum(axis=1)\n\n# plot to check affect of null values on the pric_doc col, point plot shows only the mean (or other estimator) value,\nplt.figure(figsize=(20, 8))\nsns.pointplot(x='null_count', y='price_doc', data=train_df)\nplt.ylabel('price_doc', fontsize=12)\nplt.xlabel('null_count', fontsize=12)\nplt.xticks(rotation='vertical')\nplt.show()","5d55778b":"train_df.fillna(-99, inplace=True)\ntest_df.fillna(-99, inplace=True)","af9e9606":"# year and month\ntrain_df['yearmonth'] = train_df['timestamp'].dt.year*100 + train_df['timestamp'].dt.month\ntest_df['yearmonth'] = test_df['timestamp'].dt.year*100 + test_df['timestamp'].dt.month\n\n# year and week\ntrain_df['yearweek'] = train_df['timestamp'].dt.year*100 + train_df['timestamp'].dt.weekofyear\ntest_df['yearweek'] = test_df['timestamp'].dt.year*100 + test_df['timestamp'].dt.weekofyear\n\n# year\ntrain_df['year'] = train_df['timestamp'].dt.year\ntest_df['year'] = test_df['timestamp'].dt.year\n\n# month of year\ntrain_df['month_of_year'] = train_df['timestamp'].dt.month\ntest_df['month_of_year'] = test_df['timestamp'].dt.month\n\n# week of year \ntrain_df[\"week_of_year\"] = train_df[\"timestamp\"].dt.weekofyear\ntest_df[\"week_of_year\"] = test_df[\"timestamp\"].dt.weekofyear\n\n# day of week \ntrain_df[\"day_of_week\"] = train_df[\"timestamp\"].dt.weekday\ntest_df[\"day_of_week\"] = test_df[\"timestamp\"].dt.weekday","aa5efa67":"plt.figure(figsize=(12,8))\nsns.pointplot(x='yearweek', y='price_doc', data=train_df)\nplt.ylabel('price_doc', fontsize=12)\nplt.xlabel('yearweek', fontsize=12)\nplt.title('Median Price distribution by year and week_num')\nplt.xticks(rotation='vertical')\nplt.show()","fff39056":"plt.figure(figsize=(12,8))\nsns.pointplot(x='week_of_year', y='price_doc', data=train_df)\nplt.ylabel('price_doc', fontsize=12)\nplt.xlabel('week_of_year', fontsize=12)\nplt.title('Median Price distribution by week of year')\nplt.xticks(rotation='vertical')\nplt.show()","50addc6d":"plt.figure(figsize=(12,8))\nsns.boxplot(x='month_of_year', y='price_doc', data=train_df)\nplt.ylabel('price_doc', fontsize=12)\nplt.xlabel('month_of_year', fontsize=12)\nplt.title('Median Price distribution by month_of_year')\nplt.xticks(rotation='vertical')\nplt.show()","99cb004e":"plt.figure(figsize=(12,8))\nsns.boxplot(x='day_of_week', y='price_doc', data=train_df)\nplt.ylabel('price_doc', fontsize=12)\nplt.xlabel('day_of_week', fontsize=12)\nplt.title('Median Price distribution by day of week')\nplt.xticks(rotation='vertical')\nplt.show()","f23bb746":"# ratio of living area to full area\ntrain_df[\"ratio_life_sq_full_sq\"] = train_df[\"life_sq\"] \/ np.maximum(train_df[\"full_sq\"].astype(\"float\"), 1)\ntest_df[\"ratio_life_sq_full_sq\"] = test_df[\"life_sq\"] \/ np.maximum(test_df[\"full_sq\"].astype(\"float\"),1)\n\ntrain_df.loc[(train_df[\"ratio_life_sq_full_sq\"] < 0), \"ratio_life_sq_full_sq\"] = 0\ntrain_df.loc[(train_df[\"ratio_life_sq_full_sq\"] > 1), \"ratio_life_sq_full_sq\"] = 1\n\ntest_df.loc[(test_df[\"ratio_life_sq_full_sq\"] < 0), \"ratio_life_sq_full_sq\"] = 0\ntest_df.loc[(test_df[\"ratio_life_sq_full_sq\"] > 1), \"ratio_life_sq_full_sq\"] = 1\n\n# ratio of kitchen area to living area \ntrain_df[\"ratio_kitch_sq_life_sq\"] = train_df[\"kitch_sq\"] \/ np.maximum(train_df[\"life_sq\"].astype(\"float\"),1)\ntest_df[\"ratio_kitch_sq_life_sq\"] = test_df[\"kitch_sq\"] \/ np.maximum(test_df[\"life_sq\"].astype(\"float\"),1)\n\ntrain_df.loc[(train_df[\"ratio_kitch_sq_life_sq\"] < 0), \"ratio_kitch_sq_life_sq\"] = 0\ntrain_df.loc[(train_df[\"ratio_kitch_sq_life_sq\"] > 1), \"ratio_kitch_sq_life_sq\"] = 1\n\ntest_df.loc[(test_df[\"ratio_kitch_sq_life_sq\"] < 0), \"ratio_kitch_sq_life_sq\"] = 0\ntest_df.loc[(test_df[\"ratio_kitch_sq_life_sq\"] > 1), \"ratio_kitch_sq_life_sq\"] = 1\n\n# ratio of kitchen area to full area #\ntrain_df[\"ratio_kitch_sq_full_sq\"] = train_df[\"kitch_sq\"] \/ np.maximum(train_df[\"full_sq\"].astype(\"float\"),1)\ntest_df[\"ratio_kitch_sq_full_sq\"] = test_df[\"kitch_sq\"] \/ np.maximum(test_df[\"full_sq\"].astype(\"float\"),1)\n\ntrain_df.loc[(train_df[\"ratio_kitch_sq_full_sq\"] < 0), \"ratio_kitch_sq_full_sq\"] = 0\ntrain_df.loc[(train_df[\"ratio_kitch_sq_full_sq\"] > 1), \"ratio_kitch_sq_full_sq\"] = 1\n\ntest_df.loc[(test_df[\"ratio_kitch_sq_full_sq\"] < 0), \"ratio_kitch_sq_full_sq\"] = 0\ntest_df.loc[(test_df[\"ratio_kitch_sq_full_sq\"] > 1), \"ratio_kitch_sq_full_sq\"] = 1","4a455725":"plt.figure(figsize=(12,12))\nsns.jointplot(x=train_df[\"ratio_life_sq_full_sq\"], y=np.log1p(train_df[\"price_doc\"]), size=10)\nplt.ylabel('Log of Price', fontsize=12)\nplt.xlabel('Ratio of living area to full area', fontsize=12)\nplt.title(\"Joint plot on log of living price to ratio_life_sq_full_sq\")\nplt.show()","929cf9cf":"plt.figure(figsize=(12,12))\nsns.jointplot(x=train_df[\"ratio_life_sq_full_sq\"], y=np.log1p(train_df[\"price_doc\"]), kind='kde',size=10)\nplt.ylabel('Log of Price', fontsize=12)\nplt.xlabel('Ratio of kitchen area to living area', fontsize=12)\nplt.title(\"Joint plot on log of living price to ratio_kitch_sq_life_sq\")\nplt.show()","e92e4394":"# floor of the house to the total number of floors in the house \ntrain_df[\"ratio_floor_max_floor\"] = train_df[\"floor\"] \/ train_df[\"max_floor\"].astype(\"float\")\ntest_df[\"ratio_floor_max_floor\"] = test_df[\"floor\"] \/ test_df[\"max_floor\"].astype(\"float\")\n\n# num of floor from top\ntrain_df[\"floor_from_top\"] = train_df[\"max_floor\"] - train_df[\"floor\"]\ntest_df[\"floor_from_top\"] = test_df[\"max_floor\"] - test_df[\"floor\"]\n\n# difference between full area and living area\ntrain_df[\"extra_sq\"] = train_df[\"full_sq\"] - train_df[\"life_sq\"]\ntest_df[\"extra_sq\"] = test_df[\"full_sq\"] - test_df[\"life_sq\"]\n\n# age of the building\ntrain_df[\"age_of_building\"] = train_df[\"build_year\"] - train_df[\"year\"]\ntest_df[\"age_of_building\"] = test_df[\"build_year\"] - test_df[\"year\"]\n\n# effect of school\ntrain_df[\"ratio_preschool\"] = train_df[\"children_preschool\"] \/ train_df[\"preschool_quota\"].astype(\"float\")\ntest_df[\"ratio_preschool\"] = test_df[\"children_preschool\"] \/ test_df[\"preschool_quota\"].astype(\"float\")\n\ntrain_df[\"ratio_school\"] = train_df[\"children_school\"] \/ train_df[\"school_quota\"].astype(\"float\")\ntest_df[\"ratio_school\"] = test_df[\"children_school\"] \/ test_df[\"school_quota\"].astype(\"float\")","5f9db188":"def count_by_dates(df, col):\n    temp_df = df.groupby(col)[\"id\"].aggregate(\"count\").reset_index()\n    temp_df.columns = [col, \"count_\" + col]\n    df = pd.merge(df, temp_df, on=col, how=\"left\")\n    return df\n\ntrain_df = count_by_dates(train_df, \"yearmonth\")\ntest_df = count_by_dates(test_df, \"yearmonth\")\n\ntrain_df = count_by_dates(train_df, \"yearweek\")\ntest_df = count_by_dates(test_df, \"yearweek\")","fc88dc0b":"train_X = train_df.drop([\"id\", \"timestamp\", \"price_doc\"], axis=1)\ntrain_y = np.log1p(train_df[\"price_doc\"])\n\ntest_X = test_df.drop([\"id\", \"timestamp\"] , axis=1)","a9c6504a":"val_time = 201407\n\ndev_X = train_X[(train_X[\"yearmonth\"] < val_time)]\ndev_y = train_y[(train_X[\"yearmonth\"] < val_time)]\n\nval_X = train_X[(train_X[\"yearmonth\"] >= val_time)]\nval_y = train_y[(train_X[\"yearmonth\"] >= val_time)]","3424e32c":"print(dev_X.shape, dev_y.shape)\nprint(val_X.shape, val_y.shape)","0e71f588":"xgb_params = {\n    'eta': 0.05,\n    'max_depth': 4,\n    'subsample': 0.7,\n    'colsample_bytree': 0.7,\n    'objective': 'reg:linear',\n    'eval_metric': 'rmse',\n    'min_child_weight':1,\n    'silent': 1,\n    'seed':0\n}\nnum_rounds = 100\n\nxgtrain = xgb.DMatrix(dev_X, dev_y, feature_names = dev_X.columns)\nxgtest = xgb.DMatrix(val_X, val_y, feature_names = val_X.columns)\nwatchlist = [(xgtrain, 'train'), (xgtest, 'test')]\nmodel = xgb.train(xgb_params, xgtrain, num_rounds, watchlist, early_stopping_rounds=50, verbose_eval=5)","fb330ffa":"fig, ax = plt.subplots(figsize=(12, 18))\nxgb.plot_importance(model, max_num_features=50, height=0.8, ax=ax)\nplt.show()","8643f184":"This shows an overall increasing trend (individual houses seems to be costlier as well - check price of 0 floor houses). A sudden increase in the house price is also observed at floor 18.","8e813963":"Price of the house could also be affected by the availability of other houses at the same time period. So creating a count variable on the number of houses at the given time period might help.\n","9d77446e":"Missing data","82f2421f":"In this competition, the train and test set are from different time periods and so let us use the last 1 year as validation set for building our models and rest as model development set.","dcf4c686":"Now let us impute the missing values with some value which is outside the range of values of the column, say -99.","44f2c302":"Floor:\n\nWe will see the count plot of floor variable.","ae7a2a52":"We also have some null values in the dataset. So one feature idea could be to use the count of nulls in the row.","4a181a4e":"Max floor:\n\nTotal number of floors in the building is one another important variable. So let us plot that one and see.\n","c504b4d0":"A very long right tail. Since our metric is Root Mean Square Logarithmic error, let us plot the log of price_doc variable.","10d5982a":"Coverting the categorical variables","c19f34fa":"The distribution is right skewed. There are some good drops in between (5 to 6, 9 to 10, 12 to 13, 17 to 18). Now let us see how the price changes with respect to floors.","91569a3b":"Let's see how the median prices vary with the max floors."}}