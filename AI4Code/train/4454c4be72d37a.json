{"cell_type":{"46abe7c9":"code","5be1b8ad":"code","41872332":"code","26588382":"code","31c485c0":"code","5ee20856":"code","a5eb1b98":"code","3f517e4e":"code","1e60f5b4":"code","bb90c07b":"code","d7ed954f":"code","21c0e21a":"code","29c9f525":"code","ce280b13":"markdown","6950c214":"markdown","3d349553":"markdown","edbdc025":"markdown","207767c2":"markdown","59987c8f":"markdown","6c51ef43":"markdown"},"source":{"46abe7c9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport folium\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nimport matplotlib.pyplot as plt\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5be1b8ad":"df = pd.read_csv(\"..\/input\/covid-19-casos-pa\/Covid-19_PA - Pgina2.csv\")","41872332":"df_daily = pd.read_csv('..\/input\/covid-19-casos-pa\/Covid-19_PA - Pgina1.csv')\ndf_daily = pd.DataFrame(data = df_daily).dropna()","26588382":"import plotly.express as px\nimport plotly.graph_objects as go\nimport math as m","31c485c0":"i = len(df_daily) -1\npd.DataFrame([int(df_daily.iloc[i, 1]), int(df_daily.iloc[i, 1] - (df_daily.iloc[i, 3] + df_daily.iloc[i, 4])),\n                int(df_daily.iloc[i, 4]), int(df_daily.iloc[i, 3]), \n                '{:.2f}'.format((df_daily.iloc[i, 1] \/ 117782)*100) + '%', \n                '{:.2f}'.format((df_daily.iloc[i, 3]\/df_daily.iloc[i, 1])*100) + '%'], \n                index =['Total de casos', 'Casos ativos', 'Recuperados', '\u00d3bitos', \n                'Porcentagem da popula\u00e7\u00e3o contaminada', 'Porcentagem de \u00f3bitos'], columns = ['N\u00fameros'])   ","5ee20856":"rol_mean = df_daily['Novos casos'].rolling(14, win_type='triang', min_periods=1, center = True).mean()\nrol_mean = pd.Series(rol_mean)\nlista =[]\nfor k in range(0,len(rol_mean)):\n       lista.append(round(rol_mean.iloc[k], 2))\nlista = pd.Series(lista)\n#rol_mean = round(rol_mean)\npd.DataFrame(lista.tail().values, index = df_daily['Data'].tail(), columns = ['Casos novos (m\u00e9dia m\u00f3vel)'])","a5eb1b98":"#df.drop([ 'Lat', 'Long'], axis = 1)\npd.DataFrame(df.Casos.values, index = df.Bairro, columns = ['Casos'])","3f517e4e":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=df_daily['Data'], y=df_daily['Casos (total)'], mode='lines+markers', name='Casos',\n                        line = dict(color='rgb(228,26,28)')))\nfig.add_trace(go.Scatter(x=df_daily['Data'], y=df_daily['Recuperados (total)'], mode='lines+markers', name='Recuperados',\n                        line = dict(color='#2CA02C')))\nfig.add_trace(go.Scatter(x=df_daily['Data'], y=df_daily['\u00d3bitos (total)'], mode='lines+markers', name='\u00d3bitos',\n                        line = dict(color='black')))\nfig.update_layout(legend=dict(x=0,y=1.0))\nfig.show()","1e60f5b4":"fig = go.Figure(data = [go.Bar(x =df_daily['Data'], y = df_daily['Novos casos'], name = 'Novos casos')], layout_title_text = 'Novos casos (por dia)')\nfig.update_traces(marker_color = 'rgb(228,26,28)')\nfig.add_trace(go.Scatter(x=df_daily['Data'],y =  rol_mean,name= 'M\u00e9dia M\u00f3vel', mode='lines',line = dict(color='blue')))\nfig.update_layout(legend=dict(x=0,y=1.0), bargap = .0)\nfig.show()","bb90c07b":"fig = px.pie(df, values = 'Casos', names = 'Bairro', color_discrete_sequence=px.colors.sequential.RdBu)\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.update(layout_showlegend = False)\nfig.show()","d7ed954f":"mapa = folium.Map(location = [-9.412239,-38.231131], tiles = 'Carto DB positron', zoom_start = 12.4)","21c0e21a":"for i in range(0, len(df)):\n    folium.Circle(\n    location = [df.iloc[i]['Lat'], df.iloc[i]['Long']], stroke = False ,color ='#F80000', fill = '#F80000', fill_opacity = .6,\n    tooltip = str(df.iloc[i]['Bairro']) + ': ' + str(df.iloc[i]['Casos']) + ' casos', radius = m.sqrt(int(df.iloc[i]['Casos'])\/m.pi)*110).add_to(mapa)    \n    ","29c9f525":"mapa","ce280b13":"# N\u00fameros da doen\u00e7a","6950c214":"# Gr\u00e1fico com novos casos confirmados por dia e m\u00e9dia m\u00f3vel\n","3d349553":"# Propor\u00e7\u00e3o de casos por bairros (em pizza)\n","edbdc025":"### N\u00fameros de casos por bairro","207767c2":"# Gr\u00e1fico de evolu\u00e7\u00e3o dos n\u00fameros da covid-19 em Paulo Afonso\n","59987c8f":"# Mapa de casos de Covid-19 em Paulo Afonso (por bairro)\n","6c51ef43":" Este notebook foi criado com o objetivo de permitir monitoramento visual da evolu\u00e7\u00e3o de casos da Covid-19 no munic\u00edpio de Paulo Afonso, Bahia. Entre os recursos, temos gr\u00e1ficos com crescimentos e propor\u00e7\u00f5es e mapa de evolu\u00e7\u00e3o por bairro.\n Os dados s\u00e3o manualmente organizados com as informa\u00e7\u00f5es publicadas pela prefeitura municipal, em arquivo csv.\n Melhor visualiza\u00e7\u00e3o na vers\u00e3o desktop.\n\nFonte:  [Prefeitura de Paulo Afonso](https:\/\/www.instagram.com\/prefpauloafonso\/),\n[IBGE](https:\/\/cidades.ibge.gov.br\/brasil\/ba\/paulo-afonso\/panorama)            "}}