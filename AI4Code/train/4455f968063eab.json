{"cell_type":{"7097d9bd":"code","03f68701":"code","344e47c9":"code","6e4e6330":"code","f7ac8f7c":"code","aa1ef2b2":"code","0a9676db":"code","ee640ca1":"code","4a2cb90b":"code","815555b9":"code","b18b2421":"markdown","d7d30ac4":"markdown","48017af0":"markdown","20e0507f":"markdown"},"source":{"7097d9bd":"import os\nimport numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nfrom skimage.util.montage import montage2d as montage\nmontage_rgb = lambda x: np.stack([montage(x[:, :, :, i]) for i in range(x.shape[3])], -1)\ntest_image_dir = '..\/input\/datadfy'\nfrom keras.models import load_model #to load pretrained model\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.applications.densenet import DenseNet169 as PTModel, preprocess_input","03f68701":"IMG_SIZE = (299, 299) # [(224, 224), (384, 384), (512, 512), (640, 640)]\nBATCH_SIZE = 1\nRGB_FLIP = 1 # should rgb be flipped when rendering images","344e47c9":"masks = pd.read_csv('..\/input\/datadfy\/mysubmission.csv')\nprint(masks.shape[0], 'masks found')\nprint(masks['ImageId'].value_counts().shape[0])\nmasks.head()","6e4e6330":"valid_args = dict(fill_mode = 'reflect',\n                   data_format = 'channels_last',\n                  preprocessing_function = preprocess_input)\n\nvalid_idg = ImageDataGenerator(**valid_args)","f7ac8f7c":"def flow_from_dataframe(img_data_gen, in_df, path_col, y_col, **dflow_args):\n    base_dir = os.path.dirname(in_df[path_col].values[0])\n    print('## Ignore next message from keras, values are replaced anyways')\n    df_gen = img_data_gen.flow_from_directory(base_dir, \n                                     class_mode = 'sparse',\n                                    **dflow_args)\n    df_gen.filenames = in_df[path_col].values\n    df_gen.classes = np.stack(in_df[y_col].values)\n    df_gen.samples = in_df.shape[0]\n    df_gen.n = in_df.shape[0]\n    df_gen._set_index_array()\n    df_gen.directory = '' # since we have the full path\n    print('Reinserting dataframe: {} images'.format(in_df.shape[0]))\n    return df_gen","aa1ef2b2":"model = load_model('..\/input\/transfer-learning-for-boat-or-no-boat\/full_ship_model.h5')","0a9676db":"model.summary()","ee640ca1":"submission_df = pd.read_csv('..\/input\/datadfy\/mysubmission.csv')\nsubmission_df['path'] = submission_df['ImageId'].map(lambda x: os.path.join(test_image_dir, x))\nsubmission_df","4a2cb90b":"test_gen = flow_from_dataframe(valid_idg, \n                               submission_df, \n                             path_col = 'path',\n                            y_col = 'ImageId', \n                            target_size = IMG_SIZE,\n                             color_mode = 'rgb',\n                            batch_size = BATCH_SIZE, \n                              shuffle = False)","815555b9":"fig, m_axs = plt.subplots(1, 2, figsize = (20, 30))\nax1 = m_axs[0]\nax2 = m_axs[1]\nt_x = test_gen[0][0]\nt_y = test_gen[0][1]\nprint(t_y)\nt_y = model.predict(t_x)\nprint(\"Prediction Score is : \",t_y)\nt_stack = ((t_x-t_x.min())\/(t_x.max()-t_x.min()))[:, :, :, ::RGB_FLIP]\nax1.imshow(montage_rgb(t_stack))\nax1.set_title('images')\nalpha_stack = np.tile(np.expand_dims(np.expand_dims(t_y, -1), -1), [1, t_stack.shape[1], t_stack.shape[2], 1])\nrgba_stack = np.concatenate([t_stack, alpha_stack], -1)\nax2.imshow(montage_rgb(rgba_stack))\nax2.set_title('boats')","b18b2421":"Solution for the problem statement.","d7d30ac4":"Loading pretrained model\n","48017af0":"\n#We use the mysubmission file as the basis for loading and running the image.","20e0507f":"We will use the same generator as before to read and preprocess images"}}