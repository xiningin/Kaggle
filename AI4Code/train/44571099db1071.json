{"cell_type":{"8bc4a106":"code","e697022a":"code","115469bd":"code","ef79684b":"code","4b79675a":"code","d5ed83c9":"code","c88bfd23":"code","74bf34d4":"code","564d9b4a":"code","d904fc71":"code","0877bc83":"code","f4f1a3e0":"code","7e1d5c2c":"code","34eda76a":"code","652d6901":"code","2b80a762":"code","4e66f66a":"code","39035edf":"code","d9bf2c72":"code","0abf9bcf":"code","30bbff0d":"code","26dcebbe":"code","3dbe7e57":"code","08131f94":"code","1e069d27":"code","b0b7ff7a":"code","54657f3b":"code","ede119f1":"code","a9e13e2f":"code","2a8ab690":"code","336a331a":"code","41eef6b0":"code","e247feec":"code","df6b45d9":"code","458dcfe1":"code","65b7b7b9":"code","4cbcbd81":"code","b996051a":"code","b15aa486":"code","5ff7a3de":"code","6ea93aea":"code","572be5c6":"code","21ee68c2":"code","60b0076b":"code","cba384ea":"code","58e60d04":"code","396ffd60":"code","752a00b4":"code","17ef0520":"code","be733f7c":"markdown","72f4089e":"markdown","047c3e82":"markdown","0ae6d36f":"markdown"},"source":{"8bc4a106":"import numpy as np\nimport pandas as pd\nimport warnings\nwarnings.filterwarnings(action='ignore')\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler\nfrom sklearn.metrics import f1_score\n\nimport os","e697022a":"sns.__version__","115469bd":"# \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30\ndf = pd.read_csv('\/kaggle\/input\/kakr-4th-competition\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/kakr-4th-competition\/test.csv')\nsample_submission = pd.read_csv('\/kaggle\/input\/kakr-4th-competition\/sample_submission.csv')","ef79684b":"print(df.shape)\nprint(test.shape)\nprint(sample_submission.shape)","4b79675a":"# .info: \uacb0\uce21\uce58,\ndf.info()","d5ed83c9":"# sample \ubf51\uae30\ndf.sample(10)","c88bfd23":"# .describe: \ubd84\ud3ec\ndf.describe(percentiles=[.9])","74bf34d4":"# \ub300\ub7b5\uc801\uc73c\ub85c \uc5b4\ub5a4 \uac12\ub4e4\uc774 \uc788\ub294\uc9c0 \ud655\uc778\ncolumns = df.columns\nfor i in range(1,len(columns)):\n    print(columns[i],':',df[columns[i]].unique(),'\\n')","564d9b4a":"lst = ['workclass', 'education','marital_status', 'occupation', 'relationship',\n       'race', 'sex', 'native_country','income']","d904fc71":"# categorical: value_counts\nfor unit in lst:\n    print('<',unit,'>')\n    print(df[unit].value_counts()) # value\uac00 \uba87 \uac1c\uc529 \uc788\ub294\uc9c0 \uc0b4\ud3b4\ubcfc \uc218 \uc788\ub2e4.\n    print()","0877bc83":"# \uc2dc\uac01\ud6541 - workclass \uc22b\uc790\nfig, ax = plt.subplots(1, 1, figsize=(12, 5)) # plot\uc744 1 by 1\uc73c\ub85c, \ud06c\uae30\ub294 12*5\nsns.countplot(data=df, x='workclass', ax=ax)\nplt.show()","f4f1a3e0":"# \uc2dc\uac01\ud6542 - race \uc22b\uc790 + \uc131\ubcc4 \uad6c\ubd84\nfig, ax = plt.subplots(1, 1, figsize=(12, 5)) # plot\uc744 1 by 1\uc73c\ub85c, \ud06c\uae30\ub294 12*5\nsns.countplot(data=df, x='race', ax=ax, hue='sex') # hue: \uc0c9\uc0c1\uc758 \uae30\uc900\nplt.show()","7e1d5c2c":"# \uc2dc\uac01\ud6543 - y\uac12, \uc131\ubcc4\nfig, ax = plt.subplots(figsize=(12, 5)) # plot\uc744 1 by 1\uc73c\ub85c, \ud06c\uae30\ub294 12*5\nsns.countplot(data=df, x='income', ax=ax, hue='sex') # hue: \uc0c9\uc0c1\uc758 \uae30\uc900\nplt.show()","34eda76a":"# \uc2dc\uac01\ud6544 - \ub098\uc774 histogram\nfig, ax = plt.subplots(1, 1, figsize=(12, 5))\nax.hist(df['age'], width=3, edgecolor='black')\n\nax.set_title('Age Distribution', fontweight='bold')\nplt.show()","652d6901":"# \uc2dc\uac01\ud6545 - \ub098\uc774 \ubd84\ud3ec -> kdeplot\nfig,ax = plt.subplots(figsize=(12, 5))\nsns.kdeplot(data=df, x='age')\nplt.show()","2b80a762":"# \uc2dc\uac01\ud6546 - \uc778\uc885 + \uc131\ubcc4 -> boxplot\nig = plt.subplots(figsize = (12, 5))\nsns.boxplot(data=df, x='race', y='age', hue='sex') # \uc778\uc885\uc5d0 \ub530\ub978 \ub098\uc774\nplt.show()","4e66f66a":"# income: 1 or 0\uc73c\ub85c\ndf['income'] = (df['income'] == '>50K').astype(int)\n# \uc774\ub807\uac8c\ub3c4 \uac00\ub2a5\n# df.income = df.income.map(lambda x: int(x=='>50K'))\n## .map: Series(\ud558\ub098\uc758 feature\uc5d0 \ub300\ud574\uc11c\ub9cc)\uc5d0 \uc4f8 \uc218 \uc788\ub294 \ud568\uc218, \uc774 \uc548\uc758 \ub370\uc774\ud130\ub97c \ubcc0\ud615 (for\ubb38\uc774 \uc880 \ub290\ub824\uc11c \ucd94\ucc9c)","39035edf":"# pivot table: groupby\n\ndf.groupby(['marital_status'])[['income']].mean().style.background_gradient(cmap='Purples')\n# \ubc31\uc778 \ub0a8\uc131, Asian-Pac-Islander \ub0a8\uc131 \/ \ub300\uccb4\ub85c \ub0a8\uc131\uc774 \ub9ce\uc774 \ubc84\ub294 \ub290\ub08c","d9bf2c72":"# pivot table: \uba54\uc18c\ub4dc\n\npd.pivot_table(df, columns='sex', index='race', values='income', aggfunc='mean')","0abf9bcf":"# \uc0c1\uad00\uacc4\uc218\ndf.corr().style.background_gradient()","30bbff0d":"# \uc0c1\uad00\uacc4\uc218 - heatmap\ncorr = df.corr() # \uc0c1\uad00\uacc4\uc218\n\nfig = plt.subplots(figsize=(10, 10))\nsns.heatmap(corr, square=True, linecolor='white', linewidth=1, cmap='coolwarm',\n            vmax=1.0, vmin=-1.0)\nplt.show()\n\n# \ub0a8\ub4e4\ub3c4 \uac00\ub3c5\uc131 \ub192\uac8c \ubcfc \uc218 \uc788\ub3c4\ub85d!","26dcebbe":"# loc(column\uba85), iloc(\uc22b\uc790): \ub370\uc774\ud130\ub97c \ucc3e\uc544\uac00\ub294 \uac83\ndf.capital_gain == 99999\n# \uc870\uac74\ubb38 -> \uacb0\uacfc: \ub9de\ub294\uc9c0 \ud2c0\ub9b0\uc9c0 -> \uace8\ub77c\ub77c\ndf.loc[df.capital_gain < 99999, :] ","3dbe7e57":"df.loc[df.race == 'White', :]","08131f94":"# .apply: \uc5ec\ub7ec \ucd95\uc5d0 \ub300\ud574\uc11c \uac00\ub2a5\ndf.apply(lambda x: x['age'] + x['hours_per_week'], axis = 1)\n# axis: \ucd95","1e069d27":"# \uac04\ub2e8\ud55c boxplot\ndf.age.plot(kind='box') # \uac04\ub2e8\ud558\uac8c \uac00\ub2a5\ud568","b0b7ff7a":"# \uacb0\uce21\uce58? - '?'\uc744 \uc5b4\ub5bb\uac8c \ud574\uc57c\ud558\ub098\ndf.apply(lambda x: '?' in list(x), axis=1)\n# \ubb3c\uc74c\ud45c\uac00 \ub4e4\uc5b4\uc788\uc5b4?","54657f3b":"# \uacb0\uce21\uce58 \ud655\uc778\ndf[df.apply(lambda x: '?' in list(x), axis=1)]\n# \uc5ec\ub7ec\uc904 \ud655\uc778\uc774\ub2c8\uae4c","ede119f1":"df.workclass.value_counts()","a9e13e2f":"df.occupation.value_counts()","2a8ab690":"df.loc[(df.workclass == '?') & (df.occupation == '?')]","336a331a":"df.native_country.value_counts()","41eef6b0":"# capital_gain \uc21c\uc11c\ub85c \uc815\ub82c\ndf.loc[df.capital_gain < 99999].sort_values('capital_gain',ascending=False)","e247feec":"# log \ud45c\ud604\n# df['log_capital_gain'] = df.capital_gain.map(lambda x: np.log(x, where=(x!=0)))","df6b45d9":"df.drop(['id'], axis=1, inplace=True)\ntest.drop(['id'], axis=1, inplace=True)","458dcfe1":"# df -> X, y\nX = df.drop(['income'], axis=1, inplace=False)\ny = df['income']","65b7b7b9":"print(X.shape)\nprint(y.shape)","4cbcbd81":"# X, y -> X_train, X_val, y_train, y_val\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)","b996051a":"X_test = test","b15aa486":"print(X_train.shape)\nprint(X_val.shape)\nprint(y_train.shape)\nprint(y_val.shape)\nprint(X_test.shape)","5ff7a3de":"# 1) education, relationship, native_country \uc81c\uac70\nX_train.drop(['education','relationship','native_country','workclass'], axis=1, inplace=True)\nX_val.drop(['education','relationship','native_country','workclass'], axis=1, inplace=True)\nX_test.drop(['education','relationship','native_country','workclass'], axis=1, inplace=True)","6ea93aea":"print(X_train.shape)\nprint(X_val.shape)\nprint(y_train.shape)\nprint(y_val.shape)\nprint(X_test.shape)","572be5c6":"# 2) marital_status \uc870\uc815\nX_train['marital_status'] = (X_train['marital_status'] == 'Married-civ-spouse').astype(int)\nX_val['marital_status'] = (X_val['marital_status'] == 'Married-civ-spouse').astype(int)\nX_test['marital_status'] = (X_test['marital_status'] == 'Married-civ-spouse').astype(int)","21ee68c2":"# 3) Onehot encoding\nX_train = pd.get_dummies(X_train)\nX_val = pd.get_dummies(X_val)\nX_test = pd.get_dummies(X_test)","60b0076b":"# 4) MinMax Scaler? Standard Scaler\n'''\nmm_scaler = MinMaxScaler()\nst_scaler = StandardScaler()\n'''","cba384ea":"# Scaling\ud560 \uac83\ub4e4: age, fnlwgt, education_num, hours_per_week, capital_gain, capital_loss\n'''\ns_columns = ['age','fnlwgt','education_num','capital_gain','capital_loss','hours_per_week']\n\nfor column in s_columns:\n    X_train[column] = st_scaler.fit_transform(X_train['fnlwgt'].values.reshape(-1,1))\n    X_test[column] = st_scaler.transform(X_test['fnlwgt'].values.reshape(-1,1))\n    '''","58e60d04":"dt_clf = DecisionTreeClassifier()\ndt_clf.fit(X_train, y_train)","396ffd60":"y_val_predict = dt_clf.predict(X_val).astype(int)","752a00b4":"f1_score(y_val, y_val_predict, average='micro')","17ef0520":"sample_submission['prediction'] = dt_clf.predict(X_test).astype(int)\nsample_submission.to_csv('submission2.csv', index=False)","be733f7c":"## 2. \ub370\uc774\ud130 \ubcc0\ud615","72f4089e":"## 1. EDA: \ub370\uc774\ud130 \ud0d0\uc0c9","047c3e82":"## 4. \uacb0\uacfc\n1. \uae30\ubcf8 line + DT : 0.79765\n2. \uae30\ubcf8 line + MinMax Scaling + DT : 0.74661\n\n## 5. \ud574\uc57c\ud560 \uac83\n1. Validation (\uadf8\ub0e5, Cross, K-Fold)\n2. Feature Engineering\n    - Encoding \ubc29\ubc95\n    - Feature \uc904\uc774\uae30 (Selection, PCA)\n    - Feature \ub9cc\ub4e4\uae30: \uc5b4\ub5a4 insight\ub85c?\n3. Modeling\n    - DT\uc758 \uacbd\uc6b0 Scaler \uc5b4\ub5a4 \uac78 \uc368\ub3c4 \uadf8\ub2e5, \ubcc4\ub85c \uc548 \uc88b\uc544\ubcf4\uc784\n    \n    \n4. log(Capital_gain - Capital_loss) = capital_net, workclass \uc81c\uac70","0ae6d36f":"## 3. \ubaa8\ub378\ub9c1"}}