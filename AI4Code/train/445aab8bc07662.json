{"cell_type":{"a6f97233":"code","b4b76a0f":"code","a67d792c":"code","1b0c4640":"code","701e664c":"code","96ef0c72":"code","5c4e5148":"code","6c3e145f":"code","c4f45746":"code","6dc29b4f":"code","28533051":"code","f4632451":"code","3dff79ef":"code","b5cc1a5c":"code","a857db4c":"code","2bb87387":"code","924e0f8f":"markdown","7ad85598":"markdown","d1d7c9e1":"markdown","023c39dd":"markdown","0eaff54a":"markdown"},"source":{"a6f97233":"import os\n%matplotlib inline\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport pathlib\nimport pandas as pd\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\n\nvalidation_labels = pd.read_csv('\/kaggle\/input\/handwriting-recognition\/written_name_validation_v2.csv',\n                        index_col='FILENAME')\nvalidation_labels.head()","b4b76a0f":"\nfrom keras.preprocessing.image import load_img\nimg = load_img('\/kaggle\/input\/handwriting-recognition\/validation_v2\/validation\/VALIDATION_0005.jpg')\nimg","a67d792c":"\ndata_dir = pathlib.Path('\/kaggle\/input\/handwriting-recognition\/validation_v2\/validation\/')\nimage_count = len(list(data_dir.glob('*.jpg')))\nimage_count","1b0c4640":"list_ds = tf.data.Dataset.list_files(str(data_dir\/'*'), shuffle=False)\nlist_ds = list_ds.shuffle(image_count, reshuffle_each_iteration=False)","701e664c":"for f in list_ds.take(5):\n    print(f.numpy())","96ef0c72":"def get_label(file_path):\n  # convert the path to a list of path components\n  parts = tf.strings.split(file_path, os.path.sep)\n  # The second to last is the class-directory\n  return parts[-1]","5c4e5148":"def decode_img(img):\n  # convert the compressed string to a 3D uint8 tensor\n  img = tf.image.decode_jpeg(img, channels=3)\n  # resize the image to the desired size\n  return tf.image.resize(img, [img_height, img_width])","6c3e145f":"def decode_img(img):\n  # convert the compressed string to a 3D uint8 tensor\n  img = tf.image.decode_jpeg(img, channels=3)\n  # resize the image to the desired size\n  return tf.image.resize(img, [img_height, img_width])","c4f45746":"def process_path(file_path):\n  #file_path='\/kaggle\/input\/handwriting-recognition\/validation_v2\/validation\/VALIDATION_0001'\n  label = get_label(file_path)\n  print(label)\n  # load the raw data from the file as a string\n  img = tf.io.read_file(file_path)\n  img = decode_img(img)\n  return img, label","6dc29b4f":"batch_size = 32\nimg_height = 50\nimg_width = 300","28533051":"AUTOTUNE = tf.data.experimental.AUTOTUNE\n\ntrain_ds = list_ds.map(process_path, num_parallel_calls=AUTOTUNE)","f4632451":"def get_label(data):\n    return validation_labels.loc[data.numpy().decode('utf-8')].values[0]","3dff79ef":"for image, label in train_ds.take(2):\n  print(\"Image shape: \", image.numpy().shape)\n  print(\"Label: \", get_label(label))","b5cc1a5c":"def configure_for_performance(ds):\n  ds = ds.cache()\n  ds = ds.shuffle(buffer_size=1000)\n  ds = ds.batch(batch_size)\n  ds = ds.prefetch(buffer_size=AUTOTUNE)\n  return ds","a857db4c":"train_ds = configure_for_performance(train_ds)\n","2bb87387":"image_batch, label_batch = next(iter(train_ds))\n\nplt.figure(figsize=(10, 10))\nfor i in range(9):\n  ax = plt.subplot(3, 3, i + 1)\n  plt.imshow(image_batch[i].numpy().astype(\"uint8\"))\n  label = label_batch[i]\n  plt.title(get_label(label))\n  plt.axis(\"off\")","924e0f8f":"the method below is usful for loading a few images but is inufitiant when it comes to loading large amounts of images","7ad85598":"will be only loading the validation data because the training data would take a while to load, but you can switch in the training dataset if you want to train your model on that ","d1d7c9e1":"### Preprocess data","023c39dd":"### Load the Data","0eaff54a":"## Summary: Load and preprocess the Handwriting data so it will be easier to build models for the harder task of recognizing what the word is"}}