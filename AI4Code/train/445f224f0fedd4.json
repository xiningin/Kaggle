{"cell_type":{"a50a32ab":"code","3e631c09":"code","a867c438":"code","1efdb486":"code","05dcedd8":"code","a7e0972d":"code","1dc9e210":"code","6359aa0b":"code","470ec40d":"code","8c7104f0":"markdown","b869b16c":"markdown"},"source":{"a50a32ab":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3e631c09":"import json\nfrom tqdm import tqdm, tqdm_notebook\n\nfrom pandas import option_context","a867c438":"def get_v1_date(versions):\n    # Use this function if you plan to use the first submitted date to filter the data instead of update date\n    return versions[0]['created'].split(\",\")[1][1:11]","1efdb486":"data = []\nwith open(\"..\/input\/arxiv\/arxiv-metadata-oai-snapshot.json\", \"r\") as i:\n    for line in tqdm(i):\n        data.append(json.loads(line))\n        \ndata = pd.DataFrame(data)\ndata.head()","05dcedd8":"data['update_date'] = pd.to_datetime(data['update_date'])\ndata['update_date'].dt.year.value_counts()","a7e0972d":"data_cy = data.loc[data['update_date'].dt.year == 2021,:].reset_index(drop=True)\ndata_cy.shape","1dc9e210":"# data['first_submitted_date'] = data_cy['versions'].apply(lambda x: get_v1_date(x)).apply(lambda p: pd.to_datetime(p, \"coerce\"))","6359aa0b":"data_cy_phish = data_cy.loc[data_cy['abstract'].str.contains(\"phish|Phish|social engineering\"), :].reset_index(drop=True)\nprint(data_cy_phish.shape)\ndata_cy_phish.head()","470ec40d":"data_cy_phish_out = (data_cy_phish\n                     .pipe(lambda x: x[['id', 'title', 'update_date']]\n                     .assign(url = lambda df: \"https:\/\/arxiv.org\/pdf\/\" + df['id']))\n                     .pipe(lambda x: x[['update_date', 'url', 'title']])\n                     .sort_values(\"update_date\", ascending=False)\n                     .reset_index(drop=True)\n                    )\n\n\nwith option_context('display.max_colwidth', 400):\n    display(data_cy_phish_out)","8c7104f0":"# Imports","b869b16c":"# Utility functions"}}