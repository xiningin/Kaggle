{"cell_type":{"0e8a9b56":"code","30fcc439":"code","d911b42b":"code","da9c3f59":"code","c11212e6":"code","6360a951":"code","0219462c":"code","8ee89d7d":"code","a833d6f2":"code","354a2bea":"code","64b88ea9":"code","c5061f94":"code","c0fe328c":"code","5ea0bdfa":"code","0cdf2208":"code","8a26b3ae":"code","83071109":"code","3c205411":"code","15cdc3a1":"code","37b3125a":"code","43dc5a58":"code","521111b4":"code","4e3b3e24":"code","4a6807ed":"code","850d51fe":"code","69e17dfb":"code","a9867cd8":"code","de172b10":"code","28bd1026":"code","3a8d6dfa":"code","5c4a53fe":"code","1128623b":"code","5dde0a12":"code","ed2de0c1":"code","355a9949":"code","7b4f6901":"code","2d408844":"code","1c6e9294":"code","7461a768":"code","5f322f52":"code","4d8d21fc":"code","e2ff78b0":"code","cb5d24ff":"code","fce87990":"code","9827a72d":"code","ac953aff":"code","fa3f515b":"code","00b11d6c":"code","e29e72ee":"code","988e40a2":"code","8f51ee06":"code","079ced5f":"code","dd8c95aa":"markdown","18f177e6":"markdown","d5a32c99":"markdown","4b3da143":"markdown","e183b0be":"markdown","27a67fe5":"markdown","088444e5":"markdown","9675729b":"markdown","97bad431":"markdown","fab495a1":"markdown","b2c8cf6a":"markdown","6862b057":"markdown"},"source":{"0e8a9b56":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","30fcc439":"x_train=pd.read_csv('\/kaggle\/input\/used-car-price-dataset-competition-format\/X_train.csv')\nx_test=pd.read_csv('\/kaggle\/input\/used-car-price-dataset-competition-format\/X_test.csv')\ny_train=pd.read_csv('\/kaggle\/input\/used-car-price-dataset-competition-format\/y_train.csv')\ny_test=pd.read_csv('\/kaggle\/input\/used-car-price-dataset-competition-format\/test_label\/y_test.csv')\n","d911b42b":"x_train.head(3)","da9c3f59":"x_test.head(3)","c11212e6":"y_train.head(3)","6360a951":"y_test.head(3)","0219462c":"x_train.info()","8ee89d7d":"x_train.describe()","a833d6f2":"## we are making copy of data so that the changes made on copied data set doest effect the original data \ndf=x_train.copy()","354a2bea":"df.columns","64b88ea9":"plt.figure(figsize=(10,6))\nsns.set_style('whitegrid')\nsns.countplot(x=df.brand)","c5061f94":"df.model.nunique()","c0fe328c":"plt.figure(figsize=(10,6))\nsns.set_style('darkgrid')\nsns.distplot(x=df.year,bins=24)","5ea0bdfa":"plt.figure(figsize=(10,6))\nsns.countplot(x=df.transmission)","0cdf2208":"plt.figure(figsize=(10,6))\nsns.histplot(x=df.mileage,bins=30)","8a26b3ae":"plt.figure(figsize=(10,6))\nsns.countplot(x=df.fuelType)","83071109":"plt.figure(figsize=(10,6))\nsns.distplot(x=df.tax)","3c205411":"plt.figure(figsize=(10,6))\nsns.boxplot(x=df.mpg)","15cdc3a1":"plt.figure(figsize=(10,6))\nsns.boxplot(x=df.engineSize)","37b3125a":"plt.figure(figsize=(10,6))\nsns.set_style('darkgrid')\nsns.barplot(x=df.brand,y=y_train.price)","43dc5a58":"plt.figure(figsize=(10,6))\nsns.set_style('whitegrid')\nsns.scatterplot(x=df.year,y=y_train.price)","521111b4":"plt.figure(figsize=(10,6))\nsns.set_style('darkgrid')\nsns.barplot(y=y_train.price,x=df.transmission)","4e3b3e24":"plt.figure(figsize=(10,6))\nsns.set_style('whitegrid')\nsns.scatterplot(y=df.mileage,x=y_train.price)","4a6807ed":"plt.figure(figsize=(10,6))\nsns.set_style('darkgrid')\nsns.barplot(x=df.fuelType,y=y_train.price)","850d51fe":"plt.figure(figsize=(10,6))\nsns.set_style('darkgrid')\nsns.boxplot(x=df.fuelType,y=y_train.price)","69e17dfb":"plt.figure(figsize=(10,6))\nsns.set_style('whitegrid')\nsns.scatterplot(y=df.mpg,x=y_train.price)","a9867cd8":"plt.figure(figsize=(10,6))\nsns.set_style('whitegrid')\nsns.scatterplot(y=df.tax,x=y_train.price)","de172b10":"plt.figure(figsize=(10,6))\nsns.set_style('whitegrid')\nsns.scatterplot(y=df.engineSize,x=y_train.price)","28bd1026":"## Checking for null values:\n\ndf.isna().sum()","3a8d6dfa":"## checking if any nuerical columns has 0 as as input\nl=[]\nfor col in df.columns:\n    if df[col].dtype != 'O':\n             l.append(col)\n    pass\n\nfor col in l:\n    if df[df[col]==0].value_counts().sum()>=1:\n        print(f'{col} : yes')","5c4a53fe":"## in test data \nfor col in l:\n    if x_test[x_test[col]==0].value_counts().sum()>=1:\n        print(f'{col} : yes')","1128623b":"for col in l:\n    if x_test[x_test[col]==0].value_counts().sum()>=1:\n        print(f'{col} : yes')","5dde0a12":"df['tax'].replace(0,df['tax'].median(),inplace=True)\ndf['engineSize'].replace(0,df['engineSize'].median(),inplace=True)","ed2de0c1":"df['tax'].replace(0,df['tax'].median(),inplace=True)\ndf['engineSize'].replace(0,df['engineSize'].median(),inplace=True)","355a9949":"df.groupby('brand').apply(lambda x: x['model'].value_counts().index[0])","7b4f6901":"## Converting skewed data into Normal distribution\ndf.skew()","2d408844":"df.drop(labels=['carID','model'],axis=1,inplace=True)\nx_test.drop(labels=['carID','model'],axis=1,inplace=True)","1c6e9294":"df.head()","7461a768":"df=pd.get_dummies(data=df,columns=['brand','transmission','fuelType'],drop_first=True)\nx_test=pd.get_dummies(data=x_test,columns=['brand','transmission','fuelType'],drop_first=True)","5f322f52":"df.head()","4d8d21fc":"x_test.head()","e2ff78b0":"## Importing Machine Learning Model\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import AdaBoostRegressor\nfrom xgboost import XGBRegressor","cb5d24ff":"## Linear Regression\n\nclf=LinearRegression()\nclf.fit(df,y_train['price'])\ny_pred_lr=clf.predict(x_test)","fce87990":"## Random Forest \n\n\nclf=RandomForestRegressor()\nclf.fit(df,y_train['price'])\ny_pred_rfc=clf.predict(x_test)","9827a72d":"## Ada Boost\n\nclf=AdaBoostRegressor()\nclf.fit(df,y_train['price'])\ny_pred_ada=clf.predict(x_test)","ac953aff":"## Xgboost\n\n\nclf=XGBRegressor()\nclf.fit(df,y_train['price'])\ny_pred_xgb=clf.predict(x_test)","fa3f515b":"from sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score","00b11d6c":"## Linear Regression\n\nprint(mean_squared_error(y_test['price'],y_pred_lr))\nprint(r2_score(y_test['price'],y_pred_lr))","e29e72ee":"## Random Forest \n\nprint(mean_squared_error(y_test['price'],y_pred_rfc))\nprint(r2_score(y_test['price'],y_pred_rfc))","988e40a2":"## Ada Boost\n\nprint(mean_squared_error(y_test['price'],y_pred_ada))\nprint(r2_score(y_test['price'],y_pred_ada))","8f51ee06":"## XGBoost\n\nprint(mean_squared_error(y_test['price'],y_pred_xgb))\nprint(r2_score(y_test['price'],y_pred_xgb))","079ced5f":"from sklearn.model_selection import GridSearchCV\n\nparam_grid = {\n    'bootstrap': [True],\n    'max_depth': [80, 90, 100, 110],\n    'max_features': [2, 3],\n    'min_samples_leaf': [3, 4, 5],\n    'min_samples_split': [8, 10, 12],\n    'n_estimators': [100, 200, 300, 1000]\n}\n\nrfc=RandomForestRegressor()\n\ngcv=GridSearchCV(estimator=rfc,param_grid=param_grid,cv=3)\ngcv.fit(df,y_train['price'])\ngcv.best_params_","dd8c95aa":"## <u><strong>Feature Engineering<\/strong><\/u>:","18f177e6":"#### Both tax and engineSize can't be zero so we have missing values in these columns ","d5a32c99":"### our dataset has no null values","4b3da143":"### <strong><u> Evaluating the model <\/strong><\/u>","e183b0be":"## <u>Data vizualization<\/u>:","27a67fe5":"#### Look like `Xgboost` gave the highest frequency but let's see after hyper tunning the random forest whether we can get more accurate model or not ","088444e5":"### <strong>Dealing with Categorical Data<\/strong>","9675729b":"## <u>Summarising the Vizualization<\/u>:\n\n#### => <strong><em>Volkswagen , Mercedes and BMW<\/em><\/strong> are the Top three most bought brands \n\n#### => Sales of Cars increased after year 2012\n\n#### => People preferred <strong><em> Manual Transmission <\/em><\/strong> over Automatic and Semi automatic\n\n#### => <Strong> Diesel <\/strong> type cars were the most bought cars followed by <em> Petrol<\/em> and <em> Hybrid<\/em>\n\n#### => <strong><em> Audi <\/em><\/strong> has the most expensive cars followed by <strong>BMW<\/strong > and <strong> Mercedes <\/strong>\n\n#### => Cars with <strong> Semi Automatic Transmission <\/strong> are most expensive while <strong> Mannual transmission<\/strong> cars were least expensive \n \n#### => With increase in Price <em>Mileage<\/em> of car decreases\n\n#### => <strong><em>Petrol Cars<\/em><\/strong> has most expensive cars and <strong><em>Electric Cars<\/em><\/strong> were the least Expensive\n\n#### => <strong>Engine Size<\/strong> with increase in price ","97bad431":"x_train.shape","fab495a1":"## <u>Exploratory Data Analysis<\/u>","b2c8cf6a":"### Hypertunnig of Random Forest","6862b057":"## <strong><u>Machine Learning Model<\/strong><\/u>"}}