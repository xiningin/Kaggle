{"cell_type":{"b06835e2":"code","6ac62b39":"code","9aed61ba":"code","779753fd":"code","21e87ad5":"code","ac0e81e7":"code","8340b181":"code","ad3e6a32":"code","5920e06b":"code","eec829cd":"code","9637db81":"code","2973450f":"code","1f61e373":"code","7e6a1eff":"code","88b77a47":"code","e3e8d9fd":"code","5033e073":"markdown","43736a7e":"markdown","517bef03":"markdown","1b1e2c0d":"markdown","f23abf70":"markdown","ec620599":"markdown","3e60c5ef":"markdown","c295dc70":"markdown","533734ae":"markdown","0fed48d6":"markdown"},"source":{"b06835e2":"# modify as needed\nUSR_IMG_SIZE = 32 # random sample images will be saved as 32x32","6ac62b39":"import cv2\nimport numpy as np \nimport pandas as pd\nimport json\nfrom sklearn.model_selection import StratifiedShuffleSplit","9aed61ba":"test_df = pd.read_csv('\/kaggle\/input\/sample_submission.csv')\ntest_df['file_path'] = test_df['Id'].apply(lambda x: f'\/kaggle\/input\/test_images\/{x}.jpg')\ntest_df.drop(columns=['Predicted','Id'],inplace=True)\ntest_df.head()","779753fd":"train_df = pd.read_csv('\/kaggle\/input\/train.csv')\ntrain_df['file_path'] = train_df['id'].apply(lambda x: f'\/kaggle\/input\/train_images\/{x}.jpg')\ntrain_df = train_df[['file_path','category_id']]\ntrain_df['is_supp'] = False\ntrain_df.head()","21e87ad5":"%%time\n!wget https:\/\/wildcamdrop.blob.core.windows.net\/wildcamdropcontainer\/iWildCam_2019_iNat_Idaho.tar.gz -P \/kaggle\/supplemental","ac0e81e7":"%%time\n!tar xvf \/kaggle\/supplemental\/iWildCam_2019_iNat_Idaho.tar.gz -C \/kaggle\/supplemental\/ >> \/kaggle\/working\/log.txt\n\n# images now in \/kaggle\/supplemental\/iWildCam_2019_iNat_Idaho\/train_val2017\/ and \/kaggle\/supplemental\/iWildCam_2019_iNat_Idaho\/train_val2018\/\n\n!rm \/kaggle\/supplemental\/iWildCam_2019_iNat_Idaho.tar.gz\n!rm \/kaggle\/working\/log.txt","8340b181":"with open('\/kaggle\/supplemental\/iWildCam_2019_iNat_Idaho\/iWildCam_2019_iNat_Idaho.json') as json_data:\n    supp_data = json.load(json_data)","ad3e6a32":"image_df = pd.DataFrame.from_dict(supp_data['images'])\nimage_df = image_df[['file_name','id']]\nimage_df.rename(columns={'id':'image_id'}, inplace=True)\nimage_df.head()","5920e06b":"annotation_df = pd.DataFrame.from_dict(supp_data['annotations'])\nannotation_df = annotation_df[['category_id','image_id']]\nannotation_df.head()","eec829cd":"supp_df = pd.merge(image_df, annotation_df, on='image_id', how='inner')\n\nsupp_df['is_supp'] = True\nsupp_df['file_path'] = supp_df['file_name'].apply(lambda x: f'\/kaggle\/supplemental\/iWildCam_2019_iNat_Idaho\/{x}')\nsupp_df.drop(columns=['image_id','file_name'],inplace=True)\n\nsupp_df.head()","9637db81":"complete_df = pd.concat([train_df,supp_df], ignore_index = True)\ncomplete_df.head()","2973450f":"# Image transformations and more data prep can be done in a child kernel\ndef resize(image_path, desired_size):\n    img = cv2.imread(image_path)\n    return cv2.resize(img, (desired_size,)*2).astype('uint8')","1f61e373":"%%time\ntrain_resized_imgs = [resize(file_path,USR_IMG_SIZE) for file_path in complete_df['file_path']]","7e6a1eff":"%%time\ntest_resized_imgs = [resize(file_path,USR_IMG_SIZE) for file_path in test_df['file_path']]","88b77a47":"X_train = np.stack(train_resized_imgs)\nX_test = np.stack(test_resized_imgs)\ny_train = pd.get_dummies(complete_df['category_id']).values\n\nprint(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)","e3e8d9fd":"# No need to save the IDs of X_test, since they are in the same order as the ID column in sample_submission.csv\nnp.save('X_train.npy', X_train)\nnp.save('X_test.npy', X_test)\nnp.save('y_train.npy', y_train)\n\n# save the complete_df for future reference\ncomplete_df.to_pickle(\"\/kaggle\/working\/complete_df.pkl\")","5033e073":"Extract","43736a7e":"** Combine kaggle data with supplemental **","517bef03":"Get a dataframe","1b1e2c0d":"**iWildCam 2019 (Kaggle input data)**","f23abf70":"### Resize iWildCam 2019 and iNat Idaho data\n\nTrain models on complete image data (iWildCam 2019 + supplemental iNat Idaho)\n\n* iWildCam2019: https:\/\/www.kaggle.com\/c\/iwildcam-2019-fgvc6\/data\n* Supplemental iNat Idaho data: https:\/\/github.com\/visipedia\/iwildcam_comp\n* Original idea of resizing imgs from https:\/\/www.kaggle.com\/xhlulu\/reducing-image-sizes-to-32x32\n","ec620599":"### Implementation\n\nBelow implementation can remain untouched unless you want to add extra preprocessing to images.\n\n*USR_IMG_SIZE* is the only main user modifications","3e60c5ef":"**Resize all images**","c295dc70":"**Saving**","533734ae":"**How to use this kernel**\n* Fork kernel\n* Modify *USR_IMG_SIZE* to the desired image dimensions \n* Commit kernel\n* In a new kernel, click *+ add dataset* -> *Kernel output files* -> *Your Work* -> *iWildCam 2019 + iNat Idaho*\n\nYou will now have access to x_train, y_train and y_test in \/kaggle\/input to start building models!","0fed48d6":"**Supplemental iNat Idaho**"}}