{"cell_type":{"63325681":"code","c67fe664":"code","15e14fdd":"code","4e6b4980":"code","1a75d1d7":"code","04f5e778":"code","be4057c5":"code","b8a2e36b":"code","71bf844e":"code","a42d69e1":"code","4da7e0b5":"code","037da7e0":"code","3776528e":"code","9194c1a8":"code","8b841502":"code","55a3dfc5":"code","d9fbe28a":"code","6c819817":"code","a873a291":"code","a6f264cb":"code","ae37dff9":"code","36562ca9":"code","04537736":"code","12515830":"code","fca64bee":"code","747c2f74":"code","c13fe87d":"code","06910ff0":"code","7b7677db":"code","1664e857":"markdown","bda6bfb4":"markdown","b68b5df9":"markdown","68c167eb":"markdown","99889768":"markdown","701287dd":"markdown","e6625443":"markdown","d8ff639b":"markdown","bbc302f3":"markdown"},"source":{"63325681":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","c67fe664":"#Import the necessary libraries \nimport numpy as np\nimport pandas as pd\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.io as pio\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport ipywidgets as widgets\nfrom IPython import display\n\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"","15e14fdd":"# Data importing from Kaggle COVID19 week 1\ndf1=pd.read_csv(\"\/kaggle\/input\/covid19dataa\/covid_19_clean_complete.csv\",parse_dates=['Date'])","4e6b4980":"# Data importing from Kaggle COVID19 week 3\ndf2=pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-3\/train.csv\")","1a75d1d7":"# Examining the week 1 dataset\ndf1.info()","04f5e778":"# Examining the week 3 dataset\ndf2.info()","be4057c5":"#Examining the period of which the data (week 1) is collected\na = df1.Date.value_counts().sort_index()\nprint('The first date recorded in the 1st week dataset is:',a.index[0])\nprint('The last date recorded in the 1st week dataset is:',a.index[-1])","b8a2e36b":"#Data Cleaning\n\n#Renaming the column to simpler for easy usage\ndf1.rename(columns={'Date': 'date', \n                     'Province\/State':'state',\n                     'Country\/Region':'country',\n                     'Lat':'lat', 'Long':'long',\n                     'Confirmed': 'confirmed',\n                     'Deaths':'deaths',\n                     'Recovered':'recovered'\n                    }, inplace=True)\n\n# Active Case = confirmed - deaths - recovered\ndf1['active'] = df1['confirmed'] - df1['deaths'] - df1['recovered']","71bf844e":"#Data Cleaning\n\n#Renaming the column to simpler for easy usage\ndf2.rename(columns={'Date': 'date', \n                     'Province_State':'state',\n                     'Country_Region':'country',\n                     'ConfirmedCases': 'confirmed',\n                     'Fatalities':'deaths',\n                  }, inplace=True)\n","a42d69e1":"#create whole figure\ndef create_figure(width,height,Title, Title_font, Title_bold, \n                  left_adjust,bottom_adjust, right_adjust,top_adjust,wspace_adjust,hspace_adjust):\n    fig = plt.figure(figsize=(width,height))\n    plt.title(Title, fontsize=Title_font, fontweight=Title_bold)            \n    plt.subplots_adjust(left=left_adjust, bottom=bottom_adjust, right=right_adjust, top=top_adjust, \n                        wspace=wspace_adjust, hspace=hspace_adjust)    \n    return fig,plt\n\n#set the fig x and y label\ndef set_fig_xy_label(plt, xlabel, ylabel, x_font, y_font):\n    plt.xlabel(xlabel, fontsize = x_font)\n    plt.ylabel(ylabel, fontsize = y_font)    \n    \n    return plt\n\n#creating scatter plot\ndef display_scatter_geo(data, location_label, locmode_label,color_label, hover_label,size_label,proj_label,title_caption):\n    return px.scatter_geo(data, locations=location_label,\n                        locationmode=locmode_label, color=color_label,\n                        hover_name=hover_label, size=size_label,\n                        projection=proj_label,title=title_caption)  \n\n#creating choropleth\n\ndef display_choropleth(data,location_label,locmode_label,color_label,hover_label,range_color, scale_color, title_caption):\n    return px.choropleth(data, locations=location_label,locationmode=locmode_label, color=color_label,\n                        hover_name=hover_label, range_color=range_color,\n                    color_continuous_scale=scale_color,title=title_caption) \n\n# draw barplot\ndef display_barplot(ax, y_data, x_data, ax_title, xlabel, ylabel, title_font, \n                    xlabel_font, ylabel_font,xtick_font, ytick_font, val_font):\n    sns.barplot(y=y_data, x=x_data)\n    ax.set_title(ax_title,fontsize=title_font)\n    ax.set_xlabel(xlabel, fontsize=xlabel_font)\n    ax.set_ylabel(ylabel, fontsize=ylabel_font)     \n    \n    ax.tick_params(axis=\"x\", labelsize=xtick_font)\n    ax.tick_params(axis=\"y\", labelsize=ytick_font)\n    \n    for i, (value, name) in enumerate(zip(x_data,y_data)):\n        ax.text(value, i-.05, f'{value:,.0f}', size=val_font, ha='left', va='center')    \n    \n    return ax\n\n# create widget\ndef create_widget_Text_w_df(label,data):\n    widget1 = widgets.Output()\n\n    # render in output widgets\n    with widget1:        \n        display.display(label)\n        display.display(data)\n    \n    return widget1","4da7e0b5":"#Examining the inital worldwide spread of COVID-19 (22-01-2020 to 29-03-2020)\n\ndf1['date'] = pd.to_datetime(df1['date'])\ndf1['date'] = df1['date'].dt.strftime('%m\/%d\/%Y')\ndf1 = df1.fillna('-')\n\nfig1 = px.density_mapbox(df1, lat='lat', lon='long', z='confirmed', radius=20,zoom=1, hover_data=[\"country\",'state',\"confirmed\"],\n                        mapbox_style=\"carto-positron\", animation_frame = 'date', range_color= [0, 1000],title='Spread of COVID-19(22-01-2020 to 29-03-2020)')\nfig1.update_layout(margin={\"r\":0,\"t\":30,\"l\":0,\"b\":0})\n","037da7e0":"#Confired cases around the word (22-01-2020 to 29-03-2020)\ntop = df1[df1['date'] == df1['date'].max()]\nworld1 = top.groupby('country')['confirmed','deaths','date','recovered'].sum().reset_index()\nworld1.head()","3776528e":"#Confired cases around the word (22-01-2020 to 05-04-2020)\ntop2 = df2[df2['date'] == df2['date'].max()]\nworld2 = top2.groupby('country')['confirmed','deaths','date'].sum().reset_index()\nworld2.head()","9194c1a8":"fig2 = display_choropleth(world1, \"country\", \"country names\", \"confirmed\",\"country\",[1,10000],\"Peach\", 'Countries with Confirmed Cases(22-01-2020 to 29-03-2020)')\nfig2","8b841502":"fig3 = display_choropleth(world2, \"country\", \"country names\", \"confirmed\",\"country\",[1,10000],\"Peach\", 'Countries with Confirmed Cases(22-01-2020 to 05-04-2020)')\nfig3","55a3dfc5":"## Set the data\nFig4 = df1[['country', 'date', 'confirmed', 'deaths', 'recovered']]\nFig4 = Fig4.groupby(['country', 'date']).sum().reset_index()\nFig4.sort_values('date', ascending=True, inplace=True)\n\n## Visualize the data\npx.scatter(Fig4, \n           x=\"confirmed\", \n           y=\"recovered\", \n           animation_frame=\"date\", \n           animation_group=\"country\", \n           height = 800,\n           size=\"confirmed\", \n           color=\"recovered\", \n           hover_name=\"country\", \n           color_continuous_scale='Reds',\n           title = 'Correlation between confirmed cases and recovery cases from COVID-19 (22-01-2020 to 29-03-2020 )',\n           range_color=[0,5000],\n           log_x=True,\n           text ='country',\n           size_max=100, \n           range_x=[100,300000], \n           range_y=[-9000,100000])","d9fbe28a":"## Set the data\nFig5 = df1[['country', 'date', 'confirmed', 'deaths', 'recovered']]\nFig5 = Fig5.groupby(['country', 'date']).sum().reset_index()\nFig5.sort_values('date', ascending=True, inplace=True)\n\n## Visualize the data\npx.scatter(Fig4, \n           x=\"confirmed\", \n           y=\"deaths\", \n           animation_frame=\"date\", \n           animation_group=\"country\", \n           height = 800,\n           size=\"confirmed\", \n           color=\"deaths\", \n           hover_name=\"country\", \n           color_continuous_scale='Reds',\n           title = 'Correlation between confirmed cases and death cases from COVID-19 (22-01-2020 to 29-03-2020 )',\n           range_color=[0,5000],\n           log_x=True,\n           text ='country',\n           size_max=100, \n           range_x=[100,300000], \n           range_y=[-9000,100000])","6c819817":"#Confirmed COVID-19 count around the world\nworld1['size'] = world1['confirmed'].pow(0.2)\nfig6 = display_scatter_geo(world1, \"country\",'country names', \"confirmed\",\n                                 \"country\", \"size\",\n                                 \"natural earth\",'Confirmed COVID-19 cases of each country(22-01-2020 to 29-03-2020)')\nfig6","a873a291":"#Recovery count around the world\nworld1['size'] = world1['recovered'].pow(0.2)\nfig7 = display_scatter_geo(world1, \"country\",'country names', \"recovered\",\n                                 \"country\", \"size\",\n                                 \"natural earth\",'COVID-19 Recovery count of each country(22-01-2020 to 29-03-2020)')\nfig7","a6f264cb":"#Death count around the world\nworld1['size'] = world1['deaths'].pow(0.2)\nfig5 = display_scatter_geo(world1, \"country\",'country names', \"deaths\",\n                                 \"country\", \"size\",\n                                 \"natural earth\",'Fatalities count of each country(22-01-2020 to 29-03-2020)')\nfig5","ae37dff9":"#Confirmed Cases Over Time\ntotal_cases = df2.groupby('date')['date', 'confirmed'].sum().reset_index()\ntotal_cases['date'] = pd.to_datetime(total_cases['date'])\n\nfig6, plt = create_figure(16,10,\"Worldwide Confirmed Cases Over Time\", 20, True,None,None, None,None,None,None)\nsns.pointplot(x=total_cases.date.dt.date, y=total_cases.confirmed, color = 'r')\nplt = set_fig_xy_label(plt, 'Dates', 'Total Cases', 15, 15)\nplt.xticks(rotation = 90 ,fontsize = 10)\nplt.yticks(fontsize = 15)","36562ca9":"# displaying data frame of the top 10 countries for confirmed, active and death cases\ntop = df2[df2['date'] == df2['date'].max()]\n\n# Top 10 countries having the most number of confirmed cases\ntop_confirmed = top.groupby(by = 'country')['confirmed'].sum().sort_values(ascending = False).head(10).reset_index()\n\n# Top 10 countries having the most number of death cases\ntop_deaths = top.groupby(by = 'country')['deaths'].sum().sort_values(ascending = False).head(10).reset_index()\n\n# call widget to display data frame \nwidget1 = create_widget_Text_w_df(\"Top 10 confirmed cases\", top_confirmed)\nwidget2 = create_widget_Text_w_df(\"Top 10 death cases\", top_deaths)\n    \n# create HBox\nhbox = widgets.HBox([widget1, widget2])\n\n# render hbox\nhbox","04537736":"fig7, plt = create_figure(28,28,\"\", 14, True,None,None, None,None,0.5,0.25)\n\n# set the value for each variable\nfig_font = 20\nxlabel_font = 18\nylabel_font = 18\nxtick_font = 16 \nytick_font = 16 \nval_font = 16\n\n# confirmed Cases\nax1 = plt.subplot2grid((2,1),(0,0)) #1st diagram \nax1_1 = display_barplot(ax1, top_confirmed.country, top_confirmed.confirmed, \"Top 10 countries with the most confirmed cases\", \n                'Total Cases', 'Country', fig_font, xlabel_font, ylabel_font, xtick_font, ytick_font, val_font)\n\n# death cases\nax3 = plt.subplot2grid((2,1),(1,0)) #3rd diagram \nax3_1 = display_barplot(ax3, top_deaths.country, top_deaths.deaths, \"Top 10 countries having most deaths cases\", \n                'Total Cases', 'Country', fig_font, xlabel_font, ylabel_font, xtick_font, ytick_font, val_font)","12515830":"rate = top.groupby(by = 'country')['confirmed','deaths'].sum().reset_index()\nrate['death percentage'] =  round(((rate['deaths']) \/ (rate['confirmed'])) * 100 , 2)\nrate.head()","fca64bee":"# displaying data frame of the top 10 mortality Rate\n\n# mortality\nmortality = rate.groupby(by = 'country')['death percentage'].sum().sort_values(ascending = False).head(10).reset_index()\n","747c2f74":"fig8, plt = create_figure(30,12,\"\", 14, True,None,None, None,None,0.65,None)\n\n# set the value for each variable\nfig_font = 20\nxlabel_font = 18\nylabel_font = 18\nxtick_font = 17 \nytick_font = 17 \nval_font = 17\n\n# mortality Cases\nax1 = plt.subplot2grid((1,2),(0,0)) #1st diagram \nax1_1 = display_barplot(ax1, mortality.country, mortality['death percentage'], \"Top 10 countries having highest mortality rate\", \n                'Total Cases', 'Country', fig_font, xlabel_font, ylabel_font, xtick_font, ytick_font, val_font)","c13fe87d":"# displaying data frame of the 4 countries in comparison\nlst_arr = ['Singapore','US','China','Italy','Spain','France']\n\n# initialisation of variable\ni_index = 0\nselect_ctry_df = []\n\nwidget_arr = [None] * len(lst_arr) # initialise the widget array to empty to size 4\n\n# loop through the dataframe to filter the required country and display the widget \nfor str1 in lst_arr:\n    var = df2[df2.country == str1]\n    var = var.groupby(by = 'date')['deaths', 'confirmed'].sum().reset_index()    \n    widget_arr[i_index] = create_widget_Text_w_df(str1, var.head()) # set to widget based on filter group by data\n    var['id'] = var.index # assign the index to a column call id    \n    var['country'] = str1\n    select_ctry_df.append(var)\n    i_index = i_index + 1\n\nselect_ctry_df = pd.concat(select_ctry_df) # merge the list of df into one single df\n\nprint(select_ctry_df.confirmed.max())\n\n# create Virtual box\nleft_box = widgets.VBox([widget_arr[0], widget_arr[2]])\nright_box = widgets.VBox([widget_arr[1], widget_arr[3]])\n    \n# create HBox\nhbox = widgets.HBox([left_box, right_box])\n\n# render hbox\nhbox\n","06910ff0":"fig9, plt = create_figure(16,10,\"Comparision of Confirmed Cases Over Time\", 20, True,None,None, None,None,None,None)\nsns.pointplot(select_ctry_df.id, select_ctry_df.confirmed, hue=select_ctry_df.country, data=select_ctry_df)\nplt = set_fig_xy_label(plt, 'No of Days', 'Total Confirmed Cases', 15, 15)","7b7677db":"fig10, plt = create_figure(16,10,\"Comparision of Fatality Cases Over Time\", 20, True,None,None, None,None,None,None)\nsns.pointplot(select_ctry_df.id, select_ctry_df.deaths, hue=select_ctry_df.country, data=select_ctry_df)\nplt = set_fig_xy_label(plt, 'No of Days', 'Total Fatality Cases', 15, 15)","1664e857":"# Figures","bda6bfb4":"**Objective: **To perform a basic data visualisation of the parameters which might have important impact on the spread of the COVID-19 virus (World view)","b68b5df9":"A very good reference material on data visualization:https:\/\/www.kaggle.com\/rpsuraj\/covid-19-comprehensive-data-visualization","68c167eb":"**Observation:** The China's decision to swiftly lockdown Wuhan has effectively delayed the COVID-19 epidemic growth. On 30th March 2020, the number of confirmed cases of COVID-19 is zero. This results in a subsequent plateau on the increase of number of deaths caused by COVID-19.US has higher number of confirmed cases than Italy and Spain, yet the fatality counts of Italy and Spain is significantly higher than US. We could look into detail on why US could maintain such a lower death rate despite having more than twice number of confirmed COVID-19 cases than Italy and Spain.","99889768":"**Background: **\nThe coronavirus disease 2019 (COVID-19) pandemic is caused by the severe acute respiratory syndrome coronavirus 2 (SARS-CoV-2). The disease was first identified in Wuhan, Hubei, China in December 2019.","701287dd":"# Functions for data visualisation","e6625443":"# **> Acknowledgements**","d8ff639b":"# COVID19 WEEK 3: Exploratory Data Analysis and Data Visualization","bbc302f3":"Many thanks to Sandy, my friend, for helping me to vet through and improve the analysis."}}