{"cell_type":{"306ce639":"code","9cdab81f":"code","e3f34674":"code","d1ee6a2a":"code","00664b8a":"code","28c77fa0":"code","da5ba847":"code","744c8e24":"code","552b25de":"code","0a62d628":"code","0ca332c4":"code","21db9e67":"code","9e0f11b8":"code","a7c0851c":"code","7ab174e1":"code","8c63a989":"code","0c6df00b":"code","ddb12535":"code","d53a5cef":"code","1c3271cd":"code","ac4cea7a":"code","8da2b39b":"code","4ae86276":"code","73b2d691":"code","d00d6d02":"code","f7590312":"code","2d91d64c":"code","01ac53a4":"code","3a398a04":"code","d07bb109":"code","6f821fde":"code","61b00e1a":"markdown","103b45b4":"markdown","87bc80b7":"markdown","046f3c23":"markdown","ecfd060a":"markdown","8b3a4402":"markdown","b2f15ec9":"markdown","dde93648":"markdown","4d5f01e5":"markdown","724ae361":"markdown","8a96d8c9":"markdown","bab88f83":"markdown","44a7bd35":"markdown","ffdf8b54":"markdown","8d75175f":"markdown","37fbcde2":"markdown","28a593d3":"markdown","4de20ec9":"markdown","2d6b882c":"markdown","4635b119":"markdown","b2efa20a":"markdown","e7d1291c":"markdown","366cd8c0":"markdown","70077394":"markdown","f3ccd07d":"markdown","8c3c9250":"markdown","9bffe96b":"markdown","74d56624":"markdown","a6632316":"markdown","631cdbe2":"markdown","d1d76dc8":"markdown","b75e7185":"markdown","861a70de":"markdown","7c01cca8":"markdown"},"source":{"306ce639":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns # beautiful graphs\nimport matplotlib.pyplot as plt #math stuf\nimport datetime as dt #for date math\n\nfrom kaggle_secrets import UserSecretsClient # to hide my API key\nuser_secrets = UserSecretsClient() # to hide my API key\n\n#Let's import the dataset\ndf = pd.read_csv('\/kaggle\/input\/quack-club-score-original\/quack_club_score.csv')\nprint(df.describe)\nprint('\\n**************************************************************************\\n')\nprint(df.describe(include='all'))","9cdab81f":"# Lowercase content\ndf = df.applymap(lambda s:s.lower() if isinstance(s, str) else s)\n\n# Lowercase columns\ndf.columns = map(str.lower, df.columns)\n\n# Remove arara zero\ndf = df.replace(0,np.NaN)\n\n# Remove '?' char\ndf = df.replace('?',np.NaN)\n\n# Add picks\ndf.loc[df['ep']==209,'pick'] = 'madz'\ndf.loc[df['ep']==210,'pick'] = 'storm'\ndf.loc[df['ep']==211,'pick'] = 'cosmos'","e3f34674":"# Fix Cosmos scores\nfor ep in range(189,198):\n    df.loc[df['ep']==ep,'cosmos'] = df.loc[df['ep']==ep,'partner']\n    df.loc[df['ep']==ep,'partner'] = np.nan\n    df.loc[df['ep']==ep,'partner'] = df.loc[df['ep']==ep,'partner 2']\n    df.loc[df['ep']==ep,'partner 2'] = np.nan\n    \nfor ep in range(198,212):\n    df.loc[df['ep']==ep,'cosmos'] = df.loc[df['ep']==ep,'rune']\n    df.loc[df['ep']==ep,'rune'] = np.nan","d1ee6a2a":"dates = {\n    198:'03\/01\/20',\n    199:'10\/01\/20',\n    200:'17\/01\/20',\n    201:'24\/01\/20',\n    202:'31\/01\/20',\n    203:'07\/02\/20',\n    204:'14\/02\/20',\n    205:'21\/02\/20',\n    206:'28\/02\/20',\n    207:'06\/03\/20',\n    208:'13\/03\/20',\n    209:'20\/03\/20',\n    210:'27\/03\/20',\n    211:'03\/04\/20'\n}\n\nfor ep in dates:\n    df.loc[df['ep']==ep,'date'] = dates[ep]","00664b8a":"df = df[:-1]","28c77fa0":"import requests\n\ndef get_metacrit(series):\n    parameters = {\n    'platform': 'pc'\n    }\n    \n    #my_key = user_secrets.get_secret(\"rapidapi_key\")\n    \n    headers = {\n    'x-rapidapi-host': 'chicken-coop.p.rapidapi.com',\n    'x-rapidapi-key': '5fc0af0c7amsh9ceb6a2d4914fabp15856fjsn75748452ca35'\n    }\n\n    path = 'https:\/\/chicken-coop.p.rapidapi.com\/games\/'\n    \n    name = str(series['title'])\n    response = requests.get(path + name,headers=headers, params=parameters)\n    game_info = response.json()\n    \n    if (game_info['result'] == 'No result'):\n        series['error'] = 1\n    else:\n        game_info = game_info['result']\n        series['error'] = 0\n        series['title'] = game_info['title']\n        series['mc'] = game_info['score']\n        series['release_date'] = game_info['releaseDate']\n        series['developer'] = game_info['developer']\n        series['rating'] = game_info['rating']\n        series['genre'] = game_info['genre']\n        series['publisher'] = game_info['publisher']\n        series['also_available'] = game_info['alsoAvailableOn']\n    return series\n            \ndf = df.apply(get_metacrit, axis=1)","da5ba847":"print(df['error'].sum())","744c8e24":"print(df[df['error']==1][['ep','title']])","552b25de":"correct_title={\n    45:'odallus the dark call',\n    53:np.nan,\n    66:'abzu',\n    71:'valkyrie drive bhikkhuni',\n    107:np.nan,\n    115:np.nan,\n    154:'ace combat 7 skies unknown',\n    157:'toejam earl back in the groove',\n    163:'peggle deluxe',\n    177:'outer wilds',\n    189:'underrail',\n    192:'yooka laylee and the impossible lair',\n    198:'team fortress 2',\n    199:'jamestown legend of the lost colony',\n    202:'halo reach remastered',\n    204:'nioh complete edition'\n}\n\nfor ep in correct_title:\n    df.loc[df['ep']==ep,'title'] = correct_title[ep]\ndf = df.dropna(subset=['title'], axis='index')\n\ndf[df['error']==1] = df[df['error']==1].apply(get_metacrit, axis=1)","0a62d628":"print('date column')\nprint(type(df['date'][1]))\nprint(df['date'][1])\n\nprint('\\nrelease date column')\nprint(type(df['release_date'][1]))\nprint(df['release_date'][1])","0ca332c4":"df['date'] = pd.to_datetime(df['date'],dayfirst=True,format='%d\/%m\/%y')","21db9e67":"correct_release_date = {\n    80:'Aug 24, 2017',\n    162:'Feb 25, 2016',\n    205:'Dec 13, 2019',\n    209:'Feb 26, 2020'\n}\n\nfor ep in correct_release_date:\n    df.loc[df['ep']==ep,'release_date'] = correct_release_date[ep]\n\ndf['release_date'] = pd.to_datetime(df['release_date'],format='%b %d, %Y')","9e0f11b8":"df['mc'] = df['mc'].astype(float)\/10.0","a7c0851c":"df_score = pd.melt(df, value_vars=['mc', 'arara', 'madz','storm','rune','cosmos','partner'])\n\nsns.set_style('darkgrid')\nsns.set(font_scale=2)\nplt.figure(figsize=(20, 8))\n\nax = sns.boxplot(x='variable',y='value',orient='v',data=df_score,fliersize=8)\n#ax = sns.swarmplot(x='variable', y='value', orient='v',data=df_score, size=3, color=\".3\", linewidth=0)\n\nax.set(xlabel='', ylabel='score')","7ab174e1":"df[['mc', 'arara', 'madz','storm','rune','cosmos','partner']].describe()","8c63a989":"df['quack_mean'] = df[['arara', 'madz','storm','rune','cosmos','partner','partner 2']].mean(skipna=True, axis='columns')\n\ndf_nozero = df[df['mc'] != 0]\n\nprint('Pearson correlation coefficient: ')\nprint(df_nozero['quack_mean'].corr(df_nozero['mc']))\n\nsns.set_style('darkgrid')\nsns.set(font_scale=2)\nplt.figure(figsize=(10, 10))\nax = sns.scatterplot(x='quack_mean', y='mc', data=df_nozero, s=150)\n\nplt.plot([0, 10], [0, 10], linewidth=2, alpha=.5, color='green')\n\nm, b = np.polyfit(df_nozero['quack_mean'], df_nozero['mc'], 1)\nplt.plot(df_nozero['quack_mean'],b+m*df_nozero['quack_mean'], linewidth=2, alpha=.5, color='red')\n\nax.set(xlabel='Quack', ylabel='Metacritic',xlim=(-0.5,10.5),ylim=(-0.5,10.5))","0c6df00b":"df_nozero[df_nozero['quack_mean'] < 4][['title','mc','quack_mean']].sort_values(by=['mc'],ascending=False)","ddb12535":"df[df['release_date'] == df['release_date'].min()][['title','release_date','quack_mean','mc']]","d53a5cef":"df[df['release_date'] == df['release_date'].max()][['title','release_date','quack_mean','mc']]","1c3271cd":"#We removed some rows while cleaning, so lets reset the index\ndf.reset_index(inplace=True)\n\nprint('Delta: ' + str((df['date'] - df['release_date']).max().days) + ' days\\n')\n\ndate_max = (df['date'] - df['release_date']).idxmax()\nprint(df.iloc[[date_max]][['title','release_date','date','quack_mean','mc']])","ac4cea7a":"print('Delta: ' + str((df['date'] - df['release_date']).min().days) + ' days\\n')\n\ndate_min = (df['date'] - df['release_date']).idxmin()\nprint(df.iloc[[date_min]][['title','release_date','date','quack_mean','mc']])","8da2b39b":"df['delta_date'] = (df['date'] - df['release_date']).dt.days\n\nplt.figure(figsize=(10, 10))\nax = sns.distplot(df['delta_date'], bins=20, kde=False, norm_hist=False)\nax.set(xlabel='Days', ylabel='Frequency')","4ae86276":"plt.figure(figsize=(10, 10))\nax = sns.distplot(df[df['delta_date']<=1000.0]['delta_date'], bins=20, kde=False, norm_hist=False)\nax.set(xlabel='Days', ylabel='Frequency')","73b2d691":"print('Games reviewed before one year delta: ' + str(df[df['delta_date']<=365.0]['delta_date'].count()))\nprint('Games reviewed after one year delta: ' + str(df[df['delta_date']>365.0]['delta_date'].count()))","d00d6d02":"import operator \nfrom functools import reduce\n\n\ngenre_list = [item for sublist in df['genre'].dropna() for item in sublist]\npd.Series(genre_list).value_counts(normalize=False).head(10)","f7590312":"from scipy import stats\n\nhost_list=['arara', 'madz','storm','rune','cosmos']\n\nzs = pd.DataFrame(stats.zscore(df[host_list], nan_policy='omit', axis=0), columns=host_list)\nzs['genre'] = df['genre']\nzs","2d91d64c":"for host in host_list:\n    print(host+' z-score mean: '+'%.4f' % (zs[host].abs().sum()\/len(zs[host].dropna())))","01ac53a4":"zs_genre = pd.DataFrame(columns=host_list, index=set(genre_list))\n\nzs_explode = zs.explode(column='genre')\nfor genre in set(genre_list):\n    for host in host_list:\n        #zs_genre[host][genre]=zs_explode[zs_explode['genre']==genre][host].dropna().abs().sum()\n        zs_genre[host][genre]=zs_explode[zs_explode['genre']==genre][host].dropna().sum()\n        if len(zs_explode[zs_explode['genre']==genre][host].dropna()) != 0:\n            zs_genre[host][genre]=zs_genre[host][genre]\/len(zs_explode[zs_explode['genre']==genre][host].dropna())\nzs_genre","3a398a04":"for host in host_list:\n    g_idxmax = zs_genre[host].astype(float).idxmax(skipna=True)\n    g_max = zs_genre[host].astype(float).max()\n    g_idxmin = zs_genre[host].astype(float).idxmin(skipna=True)\n    g_min = zs_genre[host].astype(float).min()\n    print(host+' z-score result:')\n    print('MAX:  '+'%.4f' % g_max+' '+g_idxmax)\n    print('MIN: '+'%.4f' % g_min+' '+g_idxmin+'\\n')\n    \ndf_explode = df.explode(column='genre')\n\ndf_explode[df_explode['genre']=='Golf'][['title','arara', 'madz','storm','rune','cosmos']]","d07bb109":"top_genre_list = df_explode['genre'].value_counts()[df_explode['genre'].value_counts() > len(df['ep'])*0.1]\ntop_zs_genre = zs_genre.loc[top_genre_list.index].astype(float)\n\ntop_zs_genre\n\nf, ax = plt.subplots(figsize=(8, 8))\n\n#sns.heatmap(top_zs_genre, linewidths=4, cmap=\"YlGnBu\", vmin=-0.5, vmax=0.5, annot=True, fmt='.2f')\nsns.heatmap(top_zs_genre, linewidths=4, cmap=\"YlGnBu\", vmin=-0.5, vmax=0.5)","6f821fde":"df.to_csv('\/kaggle\/working\/quack_club_score_v2.csv',index = False)","61b00e1a":"Now let's see the if we have any significant variation per genre.","103b45b4":"#### 3.2.4. Min Delta Game\n\nLet's check the game with the least time between launch and review by Quack.","87bc80b7":"### 1.2. Data cleaning\n\nOk, we are going to do a lot of cleaning here, let's go by parts:\n\n- The columns don't follow the standard python names (all lowercases)\n- Arara is the only one who gave a zero score, since it is only in one datapoint, I went and confirmed the value on the podcast. He gave a zero because he had could not play the game, so we are gonna turn that to a null value (NaN) to not change his mean value.\n- Some Metacritic ratings are missing and marked with '?', let's just remove the '?' characters.\n- Some picks (who picked the game that week) are empty, since there are only 3 unmarked, I checked on the podcast manualy.","046f3c23":"As we can see, Quack plays games mostly in the five year span, but has no problem playing some games 20 years older.\nLets zoom in and see if we have any details on a three year span.","ecfd060a":"As we can see, the correlation between the Metacritic and Quack is weak (r=0.44).  \nIn the graph we can see that as the score diminishes, Metacritic gives higher scores compared to Quack.  \nQuack seems to be more rigorous for 'bad' games.\n\nJust out of curiosity, let's see what are these games that have a Quack Score of less than 4 but have a high score on Metacritic.","8b3a4402":"### 4.3. Objective & Final Considerations\n\nThe initial objective was accomplished, since we trained some analysis tools (Cool graphs on seaborn, use of APIs, some simple statistics analysis), but well, this notebook is still a work in progress.\n\nI will probably think about some cool question to ask our data in the future, and probably receive some feedback and questions from the host and public of the podcast.\n\n**Finally, I would like to thank the guys from the podcast for all the good times listening to their rambles**","b2f15ec9":"## Table of Contents\n- 1. Importing and preprocessing\n    - 1.1. Importing data\n    - 1.2. Data cleaning\n- 2. Web Scraping\n    - 2.1. API\n    - 2.2. More data cleaning\n- 3. Data Analysis\n    - 3.1. Quack VS Metacritic\n    - 3.2. Quack VS DateTime\n        - 3.2.1. Oldest Game\n        - 3.2.2. Newest Game\n        - 3.2.3. Max Delta Game\n        - 3.2.4. Min Delta Game\n        - 3.2.5. Histogram\n    - 3.3. Quack VS Genre\n        - 3.3.1. Quack Most Reviewed Genre\n        - 3.3.2. Quack and Hosts Favorite Genre\n- 4. Conclusion\n    - 4.1. Export\n    - 4.2. TL;DR\n    - 4.3. Objective & Final Considerations","dde93648":"- From episode 189, Cosmos entered the podcast, but he seen's to be marked as a Partner, and from episode 198 he is marked as Rune.","4d5f01e5":"Ok, now we have a *database* **zs** with the z-scores of the hosts and the genre of the games.  \nAs we can see on the number below, the z-score for each host does not vary much.","724ae361":"## 4. Conclusion\n\n### 4.1. Export\n\nWe added a lot of data, with the help of the API.\nLet's do some final export of the data and update the dataset on Kaggle.","8a96d8c9":"#### 3.2.3. Max Delta Game\n\nLet's check the game with the biggest time between launch and review by Quack.","bab88f83":"### 3.2. Quack VS DateTime\n\nWe have the release date of the game and the release date of the episode, let's see how far apart those two are, more recent game, oldest game, etc.\n\n#### 3.2.1. Oldest Game","44a7bd35":"# [Quack Clube de Jogos](https:\/\/quack.com.br\/)\n\nI have a group of friends who make a [podcast\/youtube channel](https:\/\/quack.com.br\/) about PC games, they have been making it since 2016 and have more than 200 episodes.\n\nIn one of the courses of [Dataquest](https:\/\/www.dataquest.io\/), we do some analisys on [Metacritic](https:\/\/www.metacritic.com\/), [Imdb](https:\/\/www.imdb.com\/) and some others 'movie reviews' site, and that got me thinking about them, do they give a similar score then Metacritic? Can I find what every host favorite genre is? Do one of the host always give a lower or higher score than the rest of the guys?\n\nLet's find out.","ffdf8b54":"Done. I think this is it for data cleaning...\n\n## 3. Data Analysis\n\n### 3.1. Quack VS Metacritic\n\nOk, so....what do we want to know?\nLet's start with the basics and do a simple analysis on the score.\n\n**Quack** uses a 10 points score (with no half-point). Metacritic uses a 100 points score.\nSince we have 5-7 columns of folks from quack and only one from metacritic, let's just divide the metacritic score by 10.\n\nThen, let's just do a boxplot to see how each person score is distributed.","8d75175f":"## 1. Importing and preprocessing\n\nEvery week, one of the hosts picks a game to review. \nThey dont have rules for picking a game, normaly is a PC game, but there where instances of mobile games and other plataforms.\nThey have played new and old games alike.\n\n### 1.1. Importing data\n\nMy friends have a google shet with the number of the episode, data, title of the game, who picked, Metacritic ratings, and each host ratings.\nSince they do it manualy, just on the initial lookup, I can see that a lot of the Metacritic ratings are not present, some scores are missing, we don't have all the episodes, etc.\n\nLet's import the dataset and then we can run some cleaning.","37fbcde2":"Ok, the date is now on datetime type. Moving on.\n\nThe release date has some datapoints with a 'TBA - Early Access' mark. Since it's just four datapoints, again I just resolved by hand.\nAnother option would be to find another API, maybe [**Steam Web API**](https:\/\/developer.valvesoftware.com\/wiki\/Steam_Web_API). But let's leave that to another day and just move on.","28a593d3":"### God dammit! We did it guys! **We invented time travel!**\n\nNahh.\n*'One Hour One Life'* is a game lauched first on a website (on 27 February 2018), then the publisher lauched on Steam (on 8 November 2018).\nMetacritic apparently considers the launch date on Steam, and Quack played on the website version.\n\n#### 3.2.5. Histogram","4de20ec9":"#### 3.3.2. Quack and Hosts Favorite Genre\nNow lets find out if the host have a favorite genre. \n\nThis one is more complitaced then the last one.\nHow can we define a favorite genre for the hosts? The most reviewed genre for quack was simpler, we just wanted to find the genre that appeared the most.\n\nBut what about the *favorite* genre?\n\nWe could sum the rating giving by the host for every game of the genre and then calculate the mean and compare for genres. But what if they reviewed a realyyyyyy bad game of that genre? That would smear the results for the genre. If a host gave a bad rating to a bad game, does it mean that the host do not like that genre? Probably not.\n\nBut if a host gave a better rating than their peers constantly for a genre, than that host probably like that genre more then the other host, right?\n\nWe could use a [z-score](https:\/\/en.wikipedia.org\/wiki\/Standard_score) for that.","2d6b882c":"### 3.3. Quack VS Genre\n\nWe got a list of genres on the metacritic site, let's see what are the prefered genres for each host,etc\n\n#### 3.3.1. Quack Most Reviewed Genre\n\nWhat is the most reviewed genre of game on Quack?\n\nThis one is complicated to get. We have a series of lists with the genres of the games, since every game can have multiple genres.\nSince lists are not hashable, we cant just do a *value_counts* and be happy. \n\nFirst we flatten the list, then we change it to a Series and use *value_counts*.","4635b119":"Ok, it's not datetime, we could go back and import the .csv better, but since we will have to change the relase date anyway, let's do it all here.","b2efa20a":"## 2. Web Scraping\n### 2.1. API\n\n**Chicken Coop API Documentation**","e7d1291c":"Ok, so we missed info on 16 datapoints, a litle less than 10%.\n\nIf we had a big dataset, we would probably have to think of a better way to check the missing ones. Probably use the api to run a search on the error games or something.\n\nSince it's only 16 datapoints, let's do it by hand and save some time. ","366cd8c0":"So, Quack reviews mainly Action, 2D, RPG and Plataformers.","70077394":"- Some dates are missing, since we are only missing 15 datapoints, we are going to fill this one by hand.","f3ccd07d":"We can see that Quack does a good mix of recent and old games. While we have 107 datapoints on the one year mark, we have 48 datapoints that are evenly distributed on a 20 year span.","8c3c9250":"Ok, first some disclaimers...  \nWe don't have not nearly enough datapoints to do an analysis of this type. And Cosmos has even less datapoints.\nThis analysis is done more to show a cool heatmap and probably does not reflect the taste of the hosts.\n\nBut anyway...Cool insights:\n- Arara\n    - Like: 2D & Plataformers\n    - Dislike: Action RPG\n- Madz\n    - Like: Shooter\n    - Dislike: Adventure & Action RPG\n- Storm\n    - Like: 2D, Plataformers & Shooters\n    - Dislike: Strategy & Adventure\n- Rune\n    - Like: Action Adventure\n    - Dislike: Action RPG\n- Cosmos\n    - Like: Adventure & Shooters\n    - Dislike: Action Adventure & Action RPG","9bffe96b":"What the hell is going on with golf?  \nWell, Quack only played one golf game, with a big spread of the ratings. This show us that the analysis we did suffer a lot from just one value being too diferent.\nOne way to fix that would be to get more data. Then, even if we had one Golf game with a big variance, the other games would hopefully clean the noise.\n\nSince we dont have that possibility, let's say that we want only to analyse the top genres.\nFor that, let's define that the top genres appear on at least 10% of the games.\n\nThen, we will run the analysis again, but only considering the top genres.\n\nThis time, instead of just given a list, let's do a heatmap of the z-scores of the hosts.","74d56624":"### 4.2. TL;DR\n\nI have a group of friends who make a podcast\/youtube channel about PC games, they have been making it since 2016 and have more than 200 episodes.\n\nThey:\n- Have a week (r=0.44) ratings correlation with Metacritic\n- Are more rigorous with 'bad' games\n- Played a game that was 21 years old\n- Played a game that was -90 days old\n- Play more games that are a couple months old\n\nThe hosts:\n- Cosmos and Arara seen to give bigger scores\n- Give on average a similar score among themselves\n- Have the following genre preferences:\n    - Arara\n        - Like: 2D & Plataformers\n        - Dislike: Action RPG\n    - Madz\n        - Like: Shooter\n        - Dislike: Adventure & Action RPG\n    - Storm\n        - Like: 2D, Plataformers & Shooters\n        - Dislike: Strategy & Adventure\n    - Rune\n        - Like: Action Adventure\n        - Dislike: Action RPG\n    - Cosmos\n        - Like: Adventure & Shooters\n        - Dislike: Action Adventure & Action RPG","a6632316":"Ok, so this graphic and the shows us some interesting things:\n- Metacritic has a bigger standard deviation, this is beacause a lot of the games have a 0 (Non-existing) score. *How the hell 'Cave Story' doesn't have a Metacritic score???*\n- Without all the zeros, metacritic has a smaller standard deviation, wich is not something I want on a reviewer.\n- The guys from Quack give on average a similar score among themselves, with approximately the same mean, standard deviation, and so on. Except Cosmos, but that is probably beacause he is the newest member, with only 22 datapoints.\n- Cosmos and Arara seen to give bigger scores.\n\nNow let's check metacritic against Quack mean scores.","631cdbe2":"So we have some common cases:\n- special characters\n- incomplete names\n- game dosent exist on metacritic\n- the game is mobile (We are only doing the PC games)\n\nLet's change the names, drop the ones without Metacritic score, and then try again.","d1d76dc8":"#### 3.2.2. Newest Game","b75e7185":"**Whouuuuu, that took a while.**\n\nLet's see how many games we didn't get info on metacrit:","861a70de":"Ok, that should be it for cleaning.\nLet's ditch the last row, since it's not complete.","7c01cca8":"Nice!\n\nUnfortunately the realase date and the date of the podcast are not on datetime standart. Let's fix that.\n\n### 2.2 More data cleaning\n\nLet's first check if the date of the podcast is not up to standard."}}