{"cell_type":{"7c288476":"code","acafe477":"code","fb71d561":"code","cb47adbe":"code","a5951c9a":"code","298e1645":"code","d2a20519":"code","822f71ca":"code","eb1e427c":"code","e8f440c6":"code","0ea6c943":"code","b5d3ad6a":"code","ffb9991d":"code","2b774f27":"code","f0dc5274":"code","9757819b":"code","589e8dd5":"code","eaffc430":"code","fd9f2e2d":"code","a81ade4d":"code","34e04f87":"code","2b056ab8":"code","f8fc531c":"code","79b03711":"code","e63cb4e2":"code","b86a07d9":"code","0bc8c7d2":"code","616af72e":"code","7301dd57":"code","81884fef":"code","aa3e7e7a":"code","c515bbda":"code","ad65f662":"code","84cdae3c":"code","3c73b816":"code","4ac47c1b":"code","ae38f5ef":"code","4cc395b2":"code","506062f4":"code","564efc34":"code","fbfd7f96":"code","df9f23ce":"code","f6f743fd":"code","9fdb130e":"code","5ba6ee58":"code","96a97f8d":"code","24c22362":"code","d5d6393d":"code","d460376f":"code","880f5c0c":"code","34c502c7":"code","283e435d":"code","693ce348":"code","53674e85":"code","d9194e63":"code","4fec9d25":"code","d0ae1260":"code","df2235bb":"code","4bf7bb2b":"code","d5d84bc9":"code","71705fcb":"code","eb60968c":"code","bb8d31d9":"code","220500ec":"code","d4b58b72":"code","d851f762":"code","1754e029":"code","7e8425a1":"code","68f98392":"code","2584b635":"code","e2460b34":"code","afaf499f":"code","3fa1d3e8":"code","56a1d557":"code","d281a003":"code","e112511b":"code","a0e492eb":"code","75ec166c":"code","967715e3":"code","153cf60f":"code","16c23b42":"code","4c4ccf2a":"code","51f026c1":"code","30d73356":"code","7de42427":"code","75f34f8b":"code","be1059f6":"code","4d2e6850":"code","c29fe306":"code","945896aa":"markdown","507c0511":"markdown","af919fa4":"markdown","2a46ef0a":"markdown","5014ae28":"markdown","31d92c37":"markdown","e74e1f44":"markdown","87fb7532":"markdown","d4942066":"markdown","49f1adf3":"markdown","a1d8aeaf":"markdown","0d8a42f5":"markdown","4524dbd7":"markdown","880a49f8":"markdown","65bc82db":"markdown","e826bcee":"markdown","887a2354":"markdown","5f1e5b4e":"markdown","dc6daf4a":"markdown","60030290":"markdown","28673636":"markdown","8a52482c":"markdown","4190958f":"markdown","6d179267":"markdown","07ff6d38":"markdown","38405a5a":"markdown","f65233d7":"markdown","bbc39f63":"markdown","f5f16ccd":"markdown","cbae0423":"markdown","6dc324ec":"markdown","ac5e9007":"markdown","3094c2c8":"markdown"},"source":{"7c288476":"import gc\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport numpy as np\nimport scipy as sp\nimport pandas as pd\nfrom pandas import DataFrame, Series\n\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\n%matplotlib inline\nimport seaborn as sns\n\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom category_encoders import OrdinalEncoder, OneHotEncoder, TargetEncoder\nfrom tqdm import tqdm_notebook as tqdm\n\nfrom sklearn.ensemble import GradientBoostingClassifier\n\nimport lightgbm as lgb\nfrom lightgbm import LGBMClassifier\n\nfrom catboost import CatBoostClassifier\nfrom catboost import Pool\n\npd.set_option('display.max_columns', 100)","acafe477":"df_train = pd.read_csv(\"..\/input\/homework-for-students2\/train.csv\", index_col=0, parse_dates=['issue_d', 'earliest_cr_line'])\ndf_test = pd.read_csv(\"..\/input\/homework-for-students2\/test.csv\", index_col=0, parse_dates=['issue_d', 'earliest_cr_line'])","fb71d561":"# df_train.drop(['application_type', 'collections_12_mths_ex_med', 'acc_now_delinq'], axis=1, inplace=True)\n# df_test.drop(['application_type', 'collections_12_mths_ex_med', 'acc_now_delinq'], axis=1, inplace=True)","cb47adbe":"# df_train.drop(['initial_list_status', 'delinq_2yrs', 'pub_rec'], axis=1, inplace=True)\n# df_test.drop(['initial_list_status', 'delinq_2yrs', 'pub_rec'], axis=1, inplace=True)","a5951c9a":"grade_rank = pd.DataFrame({'grade':['A', 'B', 'C', 'D', 'E', 'F', 'G'],\n                           'grade_rank': [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0]})","298e1645":"df_train = df_train.merge(grade_rank, on=['grade'], how='left')\ndf_train.drop('grade', axis=1, inplace=True)\n\ndf_test = df_test.merge(grade_rank, on=['grade'], how='left')\ndf_test.drop('grade', axis=1, inplace=True)","d2a20519":"sub_grade_rank = pd.DataFrame({'sub_grade':['A1', 'A2', 'A3', 'A4', 'A5', 'B1', 'B2', 'B3', 'B4', 'B5', 'C1', 'C2', 'C3', 'C4', 'C5', 'D1', 'D2', 'D3', 'D4', 'D5', 'E1', 'E2', 'E3', 'E4', 'E5', 'F1', 'F2', 'F3', 'F4', 'F5', 'G1', 'G2', 'G3', 'G4', 'G5'],\n                               'sub_grade_rank': [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0]})","822f71ca":"df_train = df_train.merge(sub_grade_rank, on=['sub_grade'], how='left')\ndf_train.drop('sub_grade', axis=1, inplace=True)\n\ndf_test = df_test.merge(sub_grade_rank, on=['sub_grade'], how='left')\ndf_test.drop('sub_grade', axis=1, inplace=True)","eb1e427c":"# grade_rank\u3068sub_grade_rank\u3067\u30a6\u30a7\u30a4\u30c8\u3068\u308b\ndf_train['grade_weight'] = df_train['grade_rank']\/7 * df_train['sub_grade_rank']\/35\ndf_test['grade_weight'] = df_test['grade_rank']\/7 * df_test['sub_grade_rank']\/35\n\n# df_train['grade_weight'] = df_train['grade_rank']\/7 + df_train['sub_grade_rank']\/35\n# df_test['grade_weight'] = df_test['grade_rank']\/7 + df_test['sub_grade_rank']\/35","e8f440c6":"df_train['passed_days'] = (df_train['issue_d'] - df_train['earliest_cr_line']).dt.days\ndf_test['passed_days'] = (df_test['issue_d'] - df_test['earliest_cr_line']).dt.days","0ea6c943":"df_train['loan_ratio'] = df_train['loan_amnt'] \/ df_train['annual_inc']\ndf_test['loan_ratio'] = df_test['loan_amnt'] \/ df_test['annual_inc']","b5d3ad6a":"df_train['installment_ratio'] = df_train['installment'] * 12 \/ df_train['annual_inc']\ndf_test['installment_ratio'] = df_test['installment'] * 12 \/ df_test['annual_inc']","ffb9991d":"df_train['revol_ratio'] = df_train['revol_bal'] \/ df_train['tot_cur_bal']\ndf_test['revol_ratio'] = df_test['revol_bal'] \/ df_test['tot_cur_bal']","2b774f27":"# Inf\u3092Nan\u306b\u7f6e\u304d\u63db\u3048\u308b\ndf_train.replace([np.inf, -np.inf], np.nan, inplace=True)\ndf_test.replace([np.inf, -np.inf], np.nan, inplace=True)","f0dc5274":"df_spi = pd.read_csv('..\/input\/homework-for-students2\/spi.csv', parse_dates=['date'])","9757819b":"df_spi['year'] = df_spi.date.dt.year\ndf_spi['month'] = df_spi.date.dt.month","589e8dd5":"df_spi_tmp = df_spi.groupby(['year', 'month'])['close'].mean()","eaffc430":"# df_train, df_test\u306b\u5e74\u6708\u306e\u30ab\u30e9\u30e0\u3092\u4f5c\u6210\ndf_train['issue_year'] = df_train.issue_d.dt.year\ndf_train['issue_month'] = df_train.issue_d.dt.month\ndf_train['cr_line_year'] = df_train.earliest_cr_line.dt.year\ndf_train['cr_line_month'] = df_train.earliest_cr_line.dt.month\n\ndf_test['issue_year'] = df_test.issue_d.dt.year\ndf_test['issue_month'] = df_test.issue_d.dt.month\ndf_test['cr_line_year'] = df_test.earliest_cr_line.dt.year\ndf_test['cr_line_month'] = df_test.earliest_cr_line.dt.month","fd9f2e2d":"df_train = df_train.merge(df_spi_tmp, left_on=['issue_year', 'issue_month'], right_on=['year', 'month'], how='left').drop(['issue_year', 'issue_month'], axis=1)\ndf_train.rename(columns={'close': 'issue_close'}, inplace=True)\ndf_train = df_train.merge(df_spi_tmp, left_on=['cr_line_year', 'cr_line_month'], right_on=['year', 'month'], how='left').drop(['cr_line_year', 'cr_line_month'], axis=1)\ndf_train.rename(columns={'close': 'earliest_cr_line_close'}, inplace=True)\n\ndf_test = df_test.merge(df_spi_tmp, left_on=['issue_year', 'issue_month'], right_on=['year', 'month'], how='left').drop(['issue_year', 'issue_month'], axis=1)\ndf_test.rename(columns={'close': 'issue_close'}, inplace=True)\ndf_test = df_test.merge(df_spi_tmp, left_on=['cr_line_year', 'cr_line_month'], right_on=['year', 'month'], how='left').drop(['cr_line_year', 'cr_line_month'], axis=1)\ndf_test.rename(columns={'close': 'earliest_cr_line_close'}, inplace=True)","a81ade4d":"# issue_close\u3068earliest_cr_line_close\u306e\u5dee\u3092\u53d6\u308b\ndf_train['diff_close'] = df_train['issue_close'] - df_train['earliest_cr_line_close']\ndf_test['diff_close'] = df_test['issue_close'] - df_test['earliest_cr_line_close'] ","34e04f87":"# \u4e0d\u8981\u306a\u30ab\u30e9\u30e0\u3092\u524a\u9664\ndf_train.drop(['issue_d', 'earliest_cr_line'], axis=1, inplace=True)\ndf_test.drop(['issue_d', 'earliest_cr_line'], axis=1, inplace=True)","2b056ab8":"\"\"\"\n# \u65e5\u4ed8\u30c7\u30fc\u30bf\u3092\u6708\u3067\u30ab\u30a6\u30f3\u30c8\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\ndf_train['issue_d'] = df_train['issue_d'].dt.month\ndf_test['issue_d'] = df_test['issue_d'].dt.month\ndf_train['earliest_cr_line'] = df_train['earliest_cr_line'].dt.month\ndf_test['earliest_cr_line'] = df_test['earliest_cr_line'].dt.month\n\nf_cnt = ['issue_d', 'earliest_cr_line']\n\nfor i in f_cnt:\n    summary_train = df_train[i].value_counts() \/ len(df_train)\n    df_train[i] = df_train[i].map(summary_train)\n    df_test[i] = df_test[i].map(summary_train)\n    # X_test\u306fX_train\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\n\"\"\"","f8fc531c":"df_gdp = pd.read_csv('..\/input\/homework-for-students2\/US_GDP_by_State.csv')","79b03711":"# \u30a4\u30f3\u30d1\u30af\u30c8\u304c\u5c0f\u3055\u3044\u306e\u3067Gross State Product\u306f\u52a0\u3048\u306a\u3044\ndf_gdp_tmp = df_gdp.groupby(['State'], as_index=False)['State & Local Spending', 'Real State Growth %', 'Population (million)'].mean()","e63cb4e2":"df_gdp_tmp = df_gdp_tmp[df_gdp_tmp['State'] !=  'All states combined']","b86a07d9":"df_states = pd.DataFrame({'addr_state': ['AK', 'AL', 'AR', 'AZ', 'CA', 'CO', 'CT', 'DC', 'DE', 'FL', 'GA', 'HI', 'IA', 'ID', 'IL', 'IN', 'KS', 'KY', 'LA', 'MA', 'MD', 'ME', 'MI', 'MN', 'MO', 'MS', 'MT', 'NC', 'ND', 'NE', 'NH', 'NJ', 'NM', 'NV', 'NY', 'OH', 'OK', 'OR', 'PA', 'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VA', 'VT', 'WA', 'WI', 'WV', 'WY'],\n                         'State': ['Alaska', 'Alabama', 'Arkansas', 'Arizona', 'California', 'Colorado', 'Connecticut', 'District of Columbia', 'Delaware', 'Florida', 'Georgia', 'Hawaii', 'Iowa', 'Idaho', 'Illinois', 'Indiana', 'Kansas', 'Kentucky', 'Louisiana', 'Massachusetts', 'Maryland', 'Maine', 'Michigan', 'Minnesota', 'Missouri', 'Mississippi', 'Montana', 'North Carolina', 'North Dakota', 'Nebraska', 'New Hampshire', 'New Jersey', 'New Mexico', 'Nevada', 'New York', 'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania', 'Rhode Island', 'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Virginia', 'Vermont', 'Washington', 'Wisconsin', 'West Virginia', 'Wyoming']})","0bc8c7d2":"df_gdp_tmp = df_gdp_tmp.merge(df_states, on='State', how='left')","616af72e":"df_train = df_train.merge(df_gdp_tmp, on='addr_state', how='left')\ndf_test = df_test.merge(df_gdp_tmp, on='addr_state', how='left')","7301dd57":"df_train.drop(['State'], axis=1, inplace=True)\ndf_test.drop(['State'], axis=1, inplace=True)","81884fef":"df_latlong = pd.read_csv('..\/input\/homework-for-students2\/statelatlong.csv')\n\ndf_latlong.rename(columns={'State': 'addr_state'}, inplace=True)","aa3e7e7a":"df_train = df_train.merge(df_latlong, on='addr_state', how='left')\ndf_test = df_test.merge(df_latlong, on='addr_state', how='left')","c515bbda":"# df_zip = pd.read_csv('..\/input\/homework-for-students2\/free-zipcode-database.csv')","ad65f662":"# df_zip_tmp = df_zip.groupby(['Zipcode'], as_index=False)['Lat', 'Long', 'Xaxis', 'Yaxis', 'Zaxis'].mean().dropna()","84cdae3c":"# int\u304b\u3089str\u306b\u5909\u63db\n# df_zip_tmp['Zipcode'] = df_zip_tmp['Zipcode'].astype(str)","3c73b816":"# df_train\/df_test\u306ezip-code\u306e\u4e0b\u4e8c\u6841\u3092\u524a\u9664\n# df_train['zip_code'] = df_train['zip_code'].str.replace('xx', '')\n# df_test['zip_code'] = df_test['zip_code'].str.replace('xx', '')","4ac47c1b":"# df_train = df_train.merge(df_zip_tmp, left_on='zip_code', right_on='Zipcode', how='left').drop('Zipcode', axis=1)\n# df_test = df_test.merge(df_zip_tmp, left_on='zip_code', right_on='Zipcode', how='left').drop('Zipcode', axis=1)","ae38f5ef":"# df_train.info()","4cc395b2":"df_train['open_acc*loan_amnt'] = df_train['open_acc'] * df_train['loan_amnt']\ndf_test['open_acc*loan_amnt'] = df_test['open_acc'] * df_test['loan_amnt']","506062f4":"df_train['inq_last_6mths*grade_rank'] = df_train['inq_last_6mths'] * df_train['grade_rank']\ndf_test['inq_last_6mths*grade_rank'] = df_test['inq_last_6mths'] * df_test['grade_rank']","564efc34":"df_train['inq_last_6mths*sub_grade_rank'] = df_train['inq_last_6mths'] * df_train['sub_grade_rank']\ndf_test['inq_last_6mths*sub_grade_rank'] = df_test['inq_last_6mths'] * df_test['sub_grade_rank']","fbfd7f96":"df_train['annual_inc\/grade_rank'] = df_train['annual_inc'] \/ df_train['grade_rank']\ndf_test['annual_inc\/grade_rank'] = df_test['annual_inc'] \/ df_test['grade_rank']","df9f23ce":"df_train['annual_inc\/sub_grade_rank'] = df_train['annual_inc'] \/ df_train['sub_grade_rank']\ndf_test['annual_inc\/sub_grade_rank'] = df_test['annual_inc'] \/ df_test['sub_grade_rank']","f6f743fd":"df_train['dti*grade_rank'] = df_train['dti'] * df_train['grade_rank']\ndf_test['dti*grade_rank'] = df_test['dti'] * df_test['grade_rank']","9fdb130e":"df_train['dti*sub_grade_rank'] = df_train['dti'] * df_train['sub_grade_rank']\ndf_test['dti*sub_grade_rank'] = df_test['dti'] * df_test['sub_grade_rank']","5ba6ee58":"# title\u4e2d\u306b\u3042\u308b\u5927\u6587\u5b57\u3092\u3059\u3079\u3066\u5c0f\u6587\u5b57\u306b\u5909\u63db\ndf_train['title'] = df_train['title'].str.lower()\ndf_test['title'] = df_test['title'].str.lower()","96a97f8d":"\"\"\"\n# \u95a2\u6570\u3092\u5b9a\u7fa9\ndef fnc_title_flg(x):\n    if 'debt' in x:\n        return 1\n    elif 'refinancing' in x:\n        return 2\n    elif 'credit' in x:\n        return 3\n    elif 'home' in x:\n        return 4\n    elif 'medical' in x:\n        return 5\n    else:\n        return 6\n\"\"\"","24c22362":"# df_train['debt_flg'] = df_train['title'].str.contains('debt') * 1\n# df_train['refinancing_flg'] = df_train['title'].str.contains('refinancing') * 1\n# df_train['credit_flg'] = df_train['title'].str.contains('credit') * 1\n# df_train['home_flg'] = df_train['title'].str.contains('home') * 1\n# df_train['medical_flg'] = df_train['title'].str.contains('medical') * 1\n# df_train['consolidation_flg'] = df_train['title'].str.contains('consolidation') * 1","d5d6393d":"# df_test['debt_flg'] = df_test['title'].str.contains('debt') * 1\n# df_test['refinancing_flg'] = df_test['title'].str.contains('refinancing') * 1\n# df_test['credit_flg'] = df_test['title'].str.contains('credit') * 1\n# df_test['home_flg'] = df_test['title'].str.contains('home') * 1\n# df_test['medical_flg'] = df_test['title'].str.contains('medical') * 1\n# df_test['consolidation_flg'] = df_test['title'].str.contains('consolidation') * 1","d460376f":"\"\"\"\n# \u95a2\u6570\u3092\u9069\u7528\ndf_train['title'].apply(fnc_title_flg)\n\"\"\"","880f5c0c":"df_train['missing_amnt'] = df_train.isnull().sum(axis=1)\ndf_test['missing_amnt'] = df_test.isnull().sum(axis=1)","34c502c7":"\"\"\"\n# \u95a2\u6570\u3092\u5b9a\u7fa9\ndef func_emp_length(x):\n    if x == '< 1 year':\n        return 0.5\n    elif x == '1 year':\n        return 1.0\n    elif x == '2 years':\n        return 2.0\n    elif x == '3 years':\n        return 3.0\n    elif x == '4 years':\n        return 4.0\n    elif x == '5 years':\n        return 5.0\n    elif x == '6 years':\n        return 6.0\n    elif x == '7 years':\n        return 7.0\n    elif x == '8 years':\n        return 8.0\n    elif x == '9 years':\n        return 9.0\n    elif x == '10+ years':\n        return 10.0\n\"\"\"","283e435d":"\"\"\"\n# \u95a2\u6570\u3092\u9069\u7528\ndf_train['emp_length'] = df_train['emp_length'].apply(func_emp_length)\ndf_test['emp_length'] = df_test['emp_length'].apply(func_emp_length)\n\"\"\"","693ce348":"y_train = df_train.loan_condition\nX_train = df_train.drop(['loan_condition'], axis=1)\n\nX_test = df_test","53674e85":"# emp_title\u3092\u5206\u96e2\n# TXT_train = X_train.emp_title.copy()\n# TXT_test = X_test.emp_title.copy()","d9194e63":"# 2\u5024\u30c7\u30fc\u30bf\u306e\u305f\u3081\u30ef\u30f3\u30db\u30c3\u30c8\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\n# f_oh = ['initial_list_status', 'application_type']\n\n# encoder = OneHotEncoder(cols=f_oh)\n\n# X_train = encoder.fit_transform(X_train)\n# X_test = encoder.transform(X_test)","4fec9d25":"# \u3068\u308a\u3042\u3048\u305a\u30aa\u30fc\u30c7\u30a3\u30ca\u30eb\u30a8\u30f3\u30b3\u30fc\u30c7\u30a4\u30f3\u30b0\n# f_oe = ['initial_list_status']\n\n# encoder = OrdinalEncoder(cols=f_oe)\n\n# X_train = encoder.fit_transform(X_train)\n# X_test = encoder.transform(X_test)","d0ae1260":"# \u6975\u7aef\u306a\u5c0f\u6570\u30af\u30e9\u30b9\u3092\u542b\u3080\u305f\u3081\u30ab\u30a6\u30f3\u30c8\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\n\n# f_cnt = ['delinq_2yrs', 'inq_last_6mths', 'zip_code', 'title']\n\n# f_cnt = ['inq_last_6mths', 'zip_code', 'title']\n\n# for i in f_cnt:\n#    summary = X_train[i].value_counts() \/ len(X_train)\n#    X_train[i] = X_train[i].map(summary)\n#    X_test[i] = X_test[i].map(summary)","df2235bb":"\"\"\"\n# Other\u30af\u30e9\u30b9\u306e\u30b5\u30a4\u30ba\u304c\uff11\u3060\u304c\u30fb\u30fb\u30fb\n\ncol = 'home_ownership'\ntarget = 'loan_condition'\nX_temp = pd.concat([X_train, y_train], axis=1)\n\n# X_test\u306fX_train\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\nsummary = X_temp.groupby([col])[target].mean()\nenc_test = X_test[col].map(summary) \n\n    \n# X_train\u306e\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092oof\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\nskf = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)\n\n\nenc_train = Series(np.zeros(len(X_train)), index=X_train.index)\n\nfor i, (train_ix, val_ix) in enumerate((skf.split(X_train, y_train))):\n    X_train_, _ = X_temp.iloc[train_ix], y_train.iloc[train_ix]\n    X_val, _ = X_temp.iloc[val_ix], y_train.iloc[val_ix]\n\n    summary = X_train_.groupby([col])[target].mean()\n    enc_train.iloc[val_ix] = X_val[col].map(summary)\n\n\nX_train['home_ownership_2'] = enc_train\nX_train.drop('home_ownership', axis=1, inplace=True)\n\nX_test['home_ownership_2'] = enc_test\nX_test.drop('home_ownership', axis=1, inplace=True)\n\"\"\"","4bf7bb2b":"cols = ['mths_since_last_major_derog','mths_since_last_record', 'mths_since_last_delinq']","d5d84bc9":"X_train[cols] = X_train[cols].fillna(999)\nX_test[cols] = X_test[cols].fillna(999)","71705fcb":"X_train['emp_length'].fillna('0', inplace=True) \nX_test['emp_length'].fillna('0', inplace=True)","eb60968c":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()","bb8d31d9":"f_std = ['loan_amnt', 'installment', 'annual_inc', 'mths_since_last_delinq', 'mths_since_last_record', 'revol_bal', 'mths_since_last_major_derog', 'tot_coll_amt', 'tot_cur_bal', 'State & Local Spending', 'issue_close', 'earliest_cr_line_close', 'passed_days', 'open_acc*loan_amnt', 'inq_last_6mths*grade_rank', 'inq_last_6mths*sub_grade_rank', 'open_acc*loan_amnt', 'inq_last_6mths*grade_rank', 'inq_last_6mths*sub_grade_rank', 'annual_inc\/grade_rank', 'annual_inc\/sub_grade_rank' ,'dti*grade_rank', 'dti*sub_grade_rank', 'Latitude', 'Longitude', 'diff_close']","220500ec":"X_train[f_std] = scaler.fit_transform(X_train[f_std])\nX_test[f_std] = scaler.transform(X_test[f_std])","d4b58b72":"# emp_title\u3092\u9664\u53bb\nX_train.drop(['emp_title'], axis=1, inplace=True)\nX_test.drop(['emp_title'], axis=1, inplace=True)","d851f762":"X_train.drop('City', axis=1, inplace=True)\nX_test.drop('City', axis=1, inplace=True)","1754e029":"X_train_2 = X_train.fillna(X_train.median())\nX_test_2 = X_test.fillna(X_test.median())","7e8425a1":"X_train_2['title'].fillna(X_train_2['purpose'], inplace=True)\nX_test_2['title'].fillna(X_test_2['purpose'], inplace=True)","68f98392":"# \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\nfrom sklearn.model_selection import train_test_split\n\nX_train_, X_val, y_train_, y_val = train_test_split(X_train_2, y_train, test_size=0.2, random_state=0)","2584b635":"# \u30ab\u30c6\u30b4\u30ea\u306e\u30ab\u30e9\u30e0\u3092\u62bd\u51fa\ncols = ['emp_length', 'home_ownership', 'purpose', 'title', 'zip_code', 'addr_state', 'initial_list_status', 'application_type']\n\ntrain_pool = Pool(X_train_, y_train_, cat_features=cols)\nvalidate_pool = Pool(X_val, y_val, cat_features=cols)","e2460b34":"# \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u4f5c\u6210\nmodel = CatBoostClassifier(iterations=5000, random_seed=71, learning_rate=0.05, eval_metric='AUC')","afaf499f":"# \u5b66\u7fd2\nmodel.fit(train_pool, eval_set=validate_pool, early_stopping_rounds=20, use_best_model=True, plot=True)","3fa1d3e8":"y_pred = model.predict_proba(X_val)[:,1]\nscore = roc_auc_score(y_val, y_pred)\nprint(score)","56a1d557":"# \u6b20\u640d\u5024\u306e\u7a74\u57cb\u3081\n# TXT_train.fillna('Unemployed', inplace=True)\n# TXT_test.fillna('Unemployed', inplace=True)","d281a003":"# tfidf = TfidfVectorizer(max_features=1000, use_idf=True)","e112511b":"# TXT_train = tfidf.fit_transform(TXT_train)\n# TXT_test = tfidf.transform(TXT_test)","a0e492eb":"# X_train_2 = sp.sparse.hstack([X_train.values, TXT_train])\n# X_test_2 = sp.sparse.hstack([X_test.values, TXT_test])","75ec166c":"# X_train_3 = X_train_2.tocsr()\n# X_test_3 = X_test_2.tocsr()","967715e3":"\"\"\"\n# GBDT\nscores = []\n\nskf = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)\n\nfor i, train_ix, test_ix in tqdm(skf.split(X_train_3, y_train)):\n    X_train_, y_train_ = X_train_3[train_ix], y_train[train_ix]\n    X_val, y_val = X_train_3[test_ix], y_train[test_ix]\n    \n        \n    clf = GradientBoostingClassifier()\n    \n    clf.fit(X_train_, y_train_)\n    y_pred = clf.predict_proba(X_test_)[:,1]\n    score = roc_auc_score(y_val, y_pred)\n    scores.append(score)\n\n    print('CV Score of Fold_%d is %f' % (i, score))\n\"\"\"","153cf60f":"\"\"\"\n# LGBM\n# TF-IDF\u629c\u304d\nscores = []\n\nskf = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)\n\nfor i, (train_ix, test_ix) in tqdm(enumerate(skf.split(X_train, y_train))):\n    X_train_, y_train_ = X_train.values[train_ix], y_train.values[train_ix]\n    X_val, y_val = X_train.values[test_ix], y_train.values[test_ix]\n    \n        \n    clf = LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=0.9,\n                                importance_type='split', learning_rate=0.05, max_depth=-1,\n                                min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,\n                                n_estimators=9999, n_jobs=-1, num_leaves=15, objective=None,\n                                random_state=71, reg_alpha=0.0, reg_lambda=0.0, silent=True,\n                                subsample=1.0, subsample_for_bin=200000, subsample_freq=0)\n    \n    clf.fit(X_train_, y_train_, early_stopping_rounds=20, eval_metric='auc', eval_set=[(X_val, y_val)])\n    y_pred = clf.predict_proba(X_val)[:,1]\n    score = roc_auc_score(y_val, y_pred)\n    scores.append(score)\n\n    print('CV Score of Fold_%d is %f' % (i, score))\n\"\"\"","16c23b42":"\"\"\"\n# LGBM\n# TF-IDF\u3042\u308a\n\nscores = []\n\nskf = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)\n\nfor i, (train_ix, test_ix) in tqdm(enumerate(skf.split(X_train_3, y_train))):\n    X_train_, y_train_ = X_train_3[train_ix], y_train.values[train_ix]\n    X_val, y_val = X_train_3[test_ix], y_train.values[test_ix]\n    \n        \n    clf = LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=0.9,\n                                importance_type='split', learning_rate=0.05, max_depth=-1,\n                                min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,\n                                n_estimators=9999, n_jobs=-1, num_leaves=15, objective=None,\n                                random_state=71, reg_alpha=0.0, reg_lambda=0.0, silent=True,\n                                subsample=1.0, subsample_for_bin=200000, subsample_freq=0)\n    \n    clf.fit(X_train_, y_train_, early_stopping_rounds=20, eval_metric='auc', eval_set=[(X_val, y_val)])\n    y_pred = clf.predict_proba(X_val)[:,1]\n    score = roc_auc_score(y_val, y_pred)\n    scores.append(score)\n\n    print('CV Score of Fold_%d is %f' % (i, score))\n\"\"\"","4c4ccf2a":"\"\"\"\n# TF-IDF\u629c\u304d\nprint(np.mean(scores))\nprint(scores)\n\"\"\"","51f026c1":"\"\"\"\n# TF-IDF\u3042\u308a\nprint(np.mean(scores))\nprint(scores)\n\"\"\"","30d73356":"#\u91cd\u8981\u6027\n# DataFrame(clf.booster_.feature_importance(importance_type='gain'), index = X_train.columns, columns=['importance']).sort_values('importance', ascending=False)","7de42427":"# fig, ax = plt.subplots(figsize=(5, 8))\n# lgb.plot_importance(clf, max_num_features=50, ax=ax, importance_type='gain')","75f34f8b":"# \u5168\u30c7\u30fc\u30bf\u3067\u518d\u5b66\u7fd2\u3057\u3001test\u306b\u5bfe\u3057\u3066\u4e88\u6e2c\u3059\u308b\n#clf = GradientBoostingClassifier()\n\n#clf.fit(X_train_3, y_train)\n\n#y_pred = clf.predict_proba(X_test_3)[:,1]","be1059f6":"\"\"\"\n# \u5168\u30c7\u30fc\u30bf\u3067\u518d\u5b66\u7fd2\u3057\u3001test\u306b\u5bfe\u3057\u3066\u4e88\u6e2c\u3059\u308b\nclf = LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=0.9,\n                                importance_type='split', learning_rate=0.05, max_depth=-1,\n                                min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,\n                                n_estimators=9999, n_jobs=-1, num_leaves=15, objective=None,\n                                random_state=71, reg_alpha=0.0, reg_lambda=0.0, silent=True,\n                                subsample=1.0, subsample_for_bin=200000, subsample_freq=0)\n\nclf.fit(X_train_3, y_train, early_stopping_rounds=20, eval_metric='auc', eval_set=[(X_val, y_val)])\ny_pred = clf.predict_proba(X_test_3)[:,1]\n\"\"\"","4d2e6850":"# sample submission\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001\u4e88\u6e2c\u5024\u3092\u4ee3\u5165\u306e\u5f8c\u3001\u4fdd\u5b58\u3059\u308b\nsubmission = pd.read_csv('..\/input\/homework-for-students2\/sample_submission.csv', index_col=0)\n\ny_pred_2 = model.predict_proba(X_test_2)[:,1]\nsubmission.loan_condition = y_pred_2\nsubmission.to_csv('submission.csv')\n","c29fe306":"submission.head()","945896aa":"### \u30c6\u30ad\u30b9\u30c8\u7279\u5fb4\u91cf\u3092TF-IDF\u3067\u5909\u63db","507c0511":"### mths_since_last_\u7cfb\u7d71\u306e\u7279\u5fb4\u91cf\u306e\u6b20\u640d\u5024\u3092\u88dc\u5b8c","af919fa4":"### title\u306e\u3046\u3061debt, refinancing, credit, home, medical \u3092\u542b\u3080\u3082\u306e\u306b\u30d5\u30e9\u30b0\u3092\u7acb\u3066\u308b","2a46ef0a":"### \u5e74\u53ce\u306b\u5bfe\u3059\u308b\u30ed\u30fc\u30f3\u91d1\u984d\u306e\u5272\u5408\u3092\u53d6\u308b","5014ae28":"### emp_length\u3092\u6570\u5024\u306b\u5909\u63db","31d92c37":"### home_ownership, purpose, addr_state\u3092\u30bf\u30fc\u30b2\u30c3\u30c8\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","e74e1f44":"### \u30b9\u30b3\u30a2\u30ea\u30f3\u30b0","87fb7532":"### X\u3068y\u306b\u5206\u5272","d4942066":"### \u7167\u4f1a\u6570\u3068\u30b5\u30d6\u30b0\u30ec\u30fc\u30c9\u306e\u7d44\u307f\u5408\u308f\u305b","49f1adf3":"### \u65e5\u4ed8\u30c7\u30fc\u30bf\u3092S&P500\u306e\u7d42\u5024\u3067\u7f6e\u63db","a1d8aeaf":"### dti\u3068\u30b0\u30ec\u30fc\u30c9\u306e\u7d44\u307f\u5408\u308f\u305b","0d8a42f5":"### \u5e74\u53ce\u3068\u30b5\u30d6\u30b0\u30ec\u30fc\u30c9\u30e9\u30f3\u30af\u306e\u9006\u6570\u306e\u7d44\u307f\u5408\u308f\u305b","4524dbd7":"### grade\u3092\u4fe1\u7528\u306e\u826f\u3044\u9806\u306b\u30e9\u30f3\u30af\u4ed8\u3051","880a49f8":"### dti\u3068\u30b5\u30d6\u30b0\u30ec\u30fc\u30c9\u30e9\u30f3\u30af\u306e\u7d44\u307f\u5408\u308f\u305b","65bc82db":"### earliest_cr_linet\u3068issue_d\u306e\u65e5\u6570\u306e\u5dee\u3092\u53d6\u308b","e826bcee":"### initial_list_status, application_type\u3092\u30ef\u30f3\u30db\u30c3\u30c8\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","887a2354":"### zip-code\u306e\u60c5\u5831\u3092\u8ffd\u52a0\u2192\u7d041\/4\u3057\u304b\u7d10\u3065\u304b\u306a\u304b\u3063\u305f\u306e\u3067\u3084\u3081\u308b","5f1e5b4e":"### \u958b\u3044\u3066\u3044\u308b\u30a2\u30ab\u30a6\u30f3\u30c8\u6570\u3068\u30ed\u30fc\u30f3\u984d\u306e\u7d44\u307f\u5408\u308f\u305b","dc6daf4a":"### delinq_2yrs, inq_last_6mths, zip-code, title\u3092\u30ab\u30a6\u30f3\u30c8\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","60030290":"### \u4f4f\u6240\u3092\u305d\u306e\u5dde\u306e\u7d4c\u6e08\u6307\u6a19\u3067\u7f6e\u63db","28673636":"### \u6570\u5024\u7279\u5fb4\u91cf\u3092\u6a19\u6e96\u5316","8a52482c":"### \u7dcf\u6b8b\u9ad8\u306b\u5bfe\u3059\u308b\u30ea\u30dc\u6255\u3044\u6b8b\u9ad8\u306e\u5272\u5408\u3092\u53d6\u308b","4190958f":"### 0\u3058\u3083\u306a\u3044\u304c\u5c0f\u3055\u306a\u30a4\u30f3\u30d1\u30af\u30c8\u306e\u7279\u5fb4\u91cf\u3082\u524a\u9664","6d179267":"### \u6b20\u640d\u5024\u306e\u500b\u6570\u306e\u5408\u8a08\u6570\u3092\u7279\u5fb4\u91cf\u3068\u3057\u3066\u8ffd\u52a0","07ff6d38":"### CatBoost","38405a5a":"### \u30a4\u30f3\u30d1\u30af\u30c80\u306e\u7279\u5fb4\u91cf\u3092\u524a\u9664","f65233d7":"### sub_grade\u3092\u4fe1\u7528\u306e\u826f\u3044\u9806\u306b\u30e9\u30f3\u30af\u4ed8\u3051","bbc39f63":"### \u6b20\u640d\u5024\u3092\u4e2d\u592e\u5024\u3067\u57cb\u3081\u308b","f5f16ccd":"### \u7167\u4f1a\u6570\u3068\u30b0\u30ec\u30fc\u30c9\u306e\u7d44\u307f\u5408\u308f\u305b","cbae0423":"### \u7def\u5ea6\u7d4c\u5ea6\u306e\u60c5\u5831\u3092\u8ffd\u52a0","6dc324ec":"### \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u3068\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f","ac5e9007":"\n### \u5e74\u53ce\u306b\u5bfe\u3059\u308b\u8fd4\u6e08\u984d\u306e\u5272\u5408\u3092\u53d6\u308b","3094c2c8":"### \u5e74\u53ce\u3068\u30b0\u30ec\u30fc\u30c9\u30e9\u30f3\u30af\u306e\u9006\u6570\u306e\u7d44\u307f\u5408\u308f\u305b"}}