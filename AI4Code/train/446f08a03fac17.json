{"cell_type":{"42fc5c58":"code","df9e5a54":"code","7cb3d76f":"code","b098c32b":"code","7974f560":"code","fc1a5852":"code","947fee9a":"code","35a7bef2":"code","0800a4be":"code","a281e37d":"code","e51cf4db":"code","0996ed1e":"code","4be91500":"code","964b61c2":"code","defeb034":"code","e70fcf47":"markdown","514d2c85":"markdown","69484da7":"markdown","22062cf8":"markdown","cb2b2241":"markdown","1d8dd105":"markdown","0b5bc6ea":"markdown","c37db40b":"markdown","d9af13af":"markdown","f23df962":"markdown","a3894c14":"markdown","a192bf73":"markdown","d97da87e":"markdown","16363bf9":"markdown","fc1bbb12":"markdown","5d74e325":"markdown","6a8f7b55":"markdown"},"source":{"42fc5c58":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n","df9e5a54":"# Suppress warnings \nimport warnings\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning)\nwarnings.filterwarnings(\"ignore\", category=UserWarning)\nwarnings.filterwarnings(\"ignore\", category=FutureWarning)\n\nfrom IPython.display import HTML","7cb3d76f":"HTML('<iframe width=\"880\" height=\"520\" src=\"https:\/\/www.youtube.com\/embed\/as5_mTfDEw8\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>')","b098c32b":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","7974f560":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","fc1a5852":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n","947fee9a":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n","35a7bef2":"nRowsRead = 1000 # specify 'None' if want to read whole file\nmColsRead = 100 # specify 'None' if want to read whole file\n\n# 2019_OrcamentoDespesa.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf1 = pd.read_csv('\/kaggle\/input\/2019_OrcamentoDespesa.csv', delimiter=\";\", encoding=\"ISO-8859-9\")\ndf1.dataframeName = '2019_OrcamentoDespesa.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","0800a4be":"df1.head(5)","a281e37d":"df1.dtypes","e51cf4db":"df1.dtypes.value_counts()","0996ed1e":"total = df1.isnull().sum().sort_values(ascending = False)\npercent = (df1.isnull().sum()\/df1.isnull().count()*100).sort_values(ascending = False)\nmissing__train_data  = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing__train_data.head(10)","4be91500":"plotPerColumnDistribution(df1, 10, 5)","964b61c2":"plotCorrelationMatrix(df1, 8)","defeb034":"\nplotScatterMatrix(df1, 20, 10)","e70fcf47":"# Thinking Brazil - Public Spending","514d2c85":"\n<html>\n<body>\n\n<p><font size=\"5\" color=\"Purple\">If you find this kernel useful or interesting, please don't forget to upvote the kernel =)\n\n<\/body>\n<\/html>\n\n","69484da7":"\n<p><font size=\"3\" color=\"Blue\">    \n Correlation matrix:\n\n<\/font><\/p>","22062cf8":"\n<p><font size=\"3\" color=\"Blue\">    \nLet's take a quick look at what the data looks like:\n\n\n<\/font><\/p>","cb2b2241":"# Column Types","1d8dd105":"Now that we have dealt with the categorical variables and the outliers, let's continue with the EDA. One way to try and understand the data is by looking for correlations between the features and the target. We can calculate the Pearson correlation coefficient between every variable and the target using the .corr dataframe method.\n\nThe correlation coefficient is not the greatest method to represent \"relevance\" of a feature, but it does give us an idea of possible relationships within the data. Some general interpretations of the absolute value of the correlation coefficent are:\n\n> .00-.19 \u201cvery weak\u201d\n\n> .20-.39 \u201cweak\u201d\n\n> .40-.59 \u201cmoderate\u201d\n\n> .60-.79 \u201cstrong\u201d\n\n> .80-1.0 \u201cvery strong","0b5bc6ea":"# Final","c37db40b":"### Let's check 1st file: \/kaggle\/input\/2019_OrcamentoDespesa.csv","d9af13af":"\n<p><font size=\"3\" color=\"Blue\">    \nDistribution graphs (histogram\/bar graph) of sampled columns:\n\n<\/font><\/p>","f23df962":"<p><font size=\"3\" color=\"Blue\">    \nThere is 1 csv file in the current version of the dataset:\n    \n<\/font><\/p>","a3894c14":"\n<p><font size=\"3\" color=\"Blue\">    \nNow you're ready to read in the data and use the plotting functions to visualize the data.\n\n<\/font><\/p>","a192bf73":"# Examine Missing Values\n> Next we can look at the number and percentage of missing values in each column.\n","d97da87e":"\n<p><font size=\"3\" color=\"Blue\">    \nThe next hidden code cells define functions for plotting data. Click on the \"Code\" button in the published kernel to reveal the hidden code.    \n<\/font><\/p>","16363bf9":"## Exploratory Analysis","fc1bbb12":"\n<p><font size=\"3\" color=\"Blue\">    \nScatter and density plots:\n\n<\/font><\/p>","5d74e325":"### Imports\n\n<p><font size=\"3\" color=\"Blue\">    \n\n> We are using a typical data science stack: `numpy`, `pandas`, `sklearn`, `matplotlib`. \n    \n<\/font><\/p>","6a8f7b55":"## Introduction\n![](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/6\/66\/Chamber_of_Deputies_of_Brazil_2.jpg\/272px-Chamber_of_Deputies_of_Brazil_2.jpg)\n"}}