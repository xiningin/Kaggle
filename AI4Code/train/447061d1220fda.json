{"cell_type":{"78872dde":"code","468c996e":"code","39da0234":"code","db0177db":"code","7296df16":"code","bbb5c14a":"code","cef1927f":"code","2e86c7df":"code","6780c074":"code","ac664770":"code","e23c10c0":"code","f0598571":"code","deb89da5":"code","6b1d03d4":"code","a81a5a81":"code","58da4a98":"code","da1469d4":"code","dfb8209f":"code","df29fd5a":"code","502ae70c":"code","695161e9":"code","4433623c":"code","c482fade":"code","7d825441":"code","de29a565":"code","f3efa2d1":"code","66839a75":"code","574cf495":"code","1c253cae":"code","f40cec77":"code","36d38bc3":"code","5ffd6e4b":"code","ea4b1297":"code","5335ce1c":"code","992b2bfa":"code","0216f59b":"code","df393b54":"code","50b907c5":"code","368b459b":"code","f32f4df6":"code","f2ea7ee4":"code","051251bd":"code","b889c599":"code","591fcee4":"code","835f7421":"markdown","79f7ed8b":"markdown","f4f43e23":"markdown","b3123cbc":"markdown","9ff9b012":"markdown","255a30db":"markdown","a50f422c":"markdown","5a6b57bf":"markdown","9099f3a9":"markdown","79403df7":"markdown"},"source":{"78872dde":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","468c996e":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split,GridSearchCV\nfrom sklearn.linear_model import LinearRegression,LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import r2_score,classification_report,f1_score,accuracy_score,confusion_matrix","39da0234":"%matplotlib inline","db0177db":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntrain.head()","7296df16":"test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest.head()","bbb5c14a":"train.info()","cef1927f":"train.describe()","2e86c7df":"sns.countplot(x='Survived',data=train)","6780c074":"sns.countplot(x='Survived',data=train,hue='Sex')","ac664770":"sns.countplot(x='Survived',data=train,hue='Pclass')","e23c10c0":"sns.countplot(x='Survived',data=train,hue='Embarked')","f0598571":"sns.countplot(x='Survived',data=train,hue='Parch')","deb89da5":"sns.distplot(train['Age'].dropna(),bins=30)","6b1d03d4":"sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis')","a81a5a81":"train['Age'] = train['Age'].replace(np.NaN,train['Age'].mean())\nsex = pd.get_dummies(train['Sex'],drop_first=True)\nembark = pd.get_dummies(train['Embarked'],drop_first=True)\ntrain = pd.concat([train,sex,embark],axis=1)","58da4a98":"train.drop(['Cabin','PassengerId','Name','Sex','Ticket','Embarked'],axis=1,inplace=True)","da1469d4":"test['Age'] = test['Age'].replace(np.NaN,test['Age'].mean())\ntest['Fare'] = test['Fare'].replace(np.NaN,test['Fare'].mean())\nsex = pd.get_dummies(test['Sex'],drop_first=True)\nembark = pd.get_dummies(test['Embarked'],drop_first=True)\ntest = pd.concat([test,sex,embark],axis=1)","dfb8209f":"test.drop(['Cabin','Name','Sex','Ticket','Embarked'],axis=1,inplace=True)","df29fd5a":"sns.heatmap(test.isnull(),yticklabels=False,cbar=False,cmap='viridis')","502ae70c":"train.columns","695161e9":"X = train[['Pclass', 'Age', 'SibSp', 'Parch', 'Fare', 'male', 'Q','S']]\ny = train['Survived']\ntitanic_X = test[['Pclass', 'Age', 'SibSp', 'Parch', 'Fare', 'male', 'Q','S']]","4433623c":"X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3,random_state=101)","c482fade":"lr = LinearRegression()\nlr.fit(X_train,y_train)\npredict_lr = lr.predict(X_test)","7d825441":"print('r2_score:',r2_score(y_test,predict_lr))","de29a565":"logr = LogisticRegression()\nlogr.fit(X_train,y_train)\npredict_logr = logr.predict(X_test)","f3efa2d1":"print('Classification Report:')\nprint(classification_report(y_test,predict_logr))","66839a75":"dt = DecisionTreeClassifier()\ndt.fit(X_train,y_train)\npredict_dr = dt.predict(X_test)","574cf495":"print('Classification Report:')\nprint(classification_report(y_test,predict_dr))","1c253cae":"rfc = RandomForestClassifier(n_estimators=200)\nrfc.fit(X_train,y_train)\npredict_rfc = rfc.predict(X_test)","f40cec77":"print('Classification Report:')\nprint(classification_report(y_test,predict_rfc))","36d38bc3":"# K Nearest Neighbors","5ffd6e4b":"k = KNeighborsClassifier(n_neighbors=1)\nk.fit(X_train,y_train)\npred_k = k.predict(X_test)\n\nprint(classification_report(y_test,pred_k))\nprint(\"f1_score:\",f1_score(y_test,pred_k))","ea4b1297":"error_rate = []\nfor i in range(1,40):\n    kn = KNeighborsClassifier(n_neighbors=i)\n    kn.fit(X_train,y_train)\n    pred_i = kn.predict(X_test)\n    error_rate.append(np.mean(pred_i != y_test))","5335ce1c":"plt.figure(figsize=(12,7))\nplt.plot(range(1,40),error_rate,color='blue',markerfacecolor='red',linestyle='dashed',marker='o',markersize=10)\nplt.title('Error Rate vs K Value')\nplt.xlabel('K value')\nplt.ylabel('Error rate')","992b2bfa":"knn = KNeighborsClassifier(n_neighbors=7)\nknn.fit(X_train,y_train)\npredict_knn = knn.predict(X_test)\n\nprint(classification_report(y_test,predict_knn))\nprint(\"f1_score:\",f1_score(y_test,predict_knn))","0216f59b":"svm = SVC()\nsvm.fit(X_train,y_train)\npredict_svm = svm.predict(X_test)\n\nprint(confusion_matrix(y_test,predict_svm))\nprint(classification_report(y_test,predict_svm))","df393b54":"# Grid Search","50b907c5":"param_grid = {'C':[0.1,1,10,100,1000],'gamma':[1,0.1,0.01,0.001,0.0001],'kernel':['linear']}","368b459b":"grid = GridSearchCV(SVC(),param_grid,verbose=3)","f32f4df6":"grid.fit(X_train,y_train)","f2ea7ee4":"grid.best_params_","051251bd":"grid_prediction = grid.predict(X_test)","b889c599":"print(confusion_matrix(y_test,grid_prediction))\nprint(classification_report(y_test,grid_prediction))","591fcee4":"# submission1\n# predictions_final = rfc.predict(titanic_X)\n# submission = pd.DataFrame({'PassengerId':test.PassengerId,'Survived':predictions_final})\n# submission.to_csv('Submission.csv',index=False)","835f7421":"# Data Cleaning","79f7ed8b":"# Decision Tree & Random Forest\n","f4f43e23":"# Submission","b3123cbc":"# Features and Target","9ff9b012":"# Data Visualization","255a30db":"# Support Vector Machine","a50f422c":"# K Nearest Neighbors","5a6b57bf":"# Logistic Regression","9099f3a9":"# Linear Regression","79403df7":"# Support Vector Machine"}}