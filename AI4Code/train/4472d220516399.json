{"cell_type":{"cf259ed0":"code","f51a48e7":"code","835cc747":"code","e3c81b36":"code","a52caa75":"code","956edde5":"code","3f723f13":"code","35812000":"code","9112ba6c":"code","593699b6":"code","2abfb914":"code","667b67e4":"code","4c588d95":"code","a84c4bed":"code","59683f96":"markdown","0388ba84":"markdown","807a412b":"markdown","725f6581":"markdown","a0dd8fa2":"markdown","eea6a93b":"markdown","464c2daf":"markdown"},"source":{"cf259ed0":"# Constants \nINPUT_PATH = '\/kaggle\/input\/netflix-shows\/netflix_titles.csv'\n\n# Libraries \nimport pandas as pd \nimport matplotlib.pyplot as plt\n\n# Set default properties for plotting \nplt.rcParams['figure.figsize'] = [11, 4]\nplt.rcParams['figure.dpi'] = 100 ","f51a48e7":"# Read data and display 5 random entries \nraw_df = pd.read_csv(INPUT_PATH)","835cc747":"df = raw_df.copy()","e3c81b36":"df[\"date_added\"] = pd.to_datetime(df[\"date_added\"])","a52caa75":"df.dtypes","956edde5":"show_count = df.groupby(\"date_added\")[[\"show_id\"]].count() # with bractice [[]] the output if dataFrame","3f723f13":"show_count.head()","35812000":"show_count.index","9112ba6c":"show_count['days'] = show_count.index.day_name()","593699b6":"show_count.head()","2abfb914":"show_count.groupby(\"days\").sum()","667b67e4":"show_count[\"show_id\"].plot()","4c588d95":"show_count = show_count[show_count.index > \"2016\" ]","a84c4bed":"show_count[\"show_id\"].resample(\"1w\").count()","59683f96":"______\n\n## Task 2: Extract the day name and sum-up the shows added \n<a id='task3'><\/a>\n\nIn the last step, we have used the `date_added` column to count the number of shows.    \nSince we've used the `groupby` functionality to count the number of shows,     \nthe column is set as our index. \n\nWe could now use our new index directly to extract the Attributes of the timestamp.    \nOne example of those Attributes is the `day_name`.    \nCheck out the [full list of the attributes here](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DatetimeIndex.html).","0388ba84":"### Count shows added  per date <a id='task2'><\/a>\nAll the shows have been listed in the original dataframe.     \nNow let's count the total number of shows added per day","807a412b":"_____\n\n## Task 1: Countthe number of shows added per day     \n\nIn the following section, we will parse the raw date format into      \npandas datetime and summarize the daily shows added to the total number \n\n### Parse timestamp into datetime column <a id='task1'><\/a>\n\nChange the raw format to a pandas datetime format.    \nOnce we have changed the format as such, we will be able to    \napply more functionalities illustrated below \n","725f6581":"______\n\n## Task 4: Sum up weekly data \n<a id='task5'><\/a>\n\nIt is possible to change the granularity of your timeseries directly using Pandas datetie module.        \n       \n       \nTo do that, you need to specify two things: \n- Your new granularity passed as an argument to the `resample` function. [Read more details](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/user_guide\/timeseries.html#dateoffset-objects)\n- The function that will be used to generate the new granularity","a0dd8fa2":"# Getting started with Pandas TimeSeries\n\nThis notebook is intended to introduce you to the basic Pandas DateTime    \nThe following five points will be covered:\n\n1. [Parsing DateTime](#task1)\n2. [Aggregating columns](#task2)\n3. [Extracting DateTime properties](#task3)\n4. [Fitering and Selecting specific durations](#task4)\n5. [Changing the granularity of the Timeseries](#task5)\n","eea6a93b":"______\n\n## Task 3: Select data from 2016 onwards \n<a id='task4'><\/a>\n\nYou can also use the regular masking way to select and filter entries.      \nThe syntax is even simpler than one could expect. You don't even need to parse    \nyour filtering criteria to `datetime`. A simple string with `%YYYY-%MM-%DD` format     \nwill do the job  \n","464c2daf":"### Prepare environment and read data "}}