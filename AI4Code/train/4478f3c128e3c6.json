{"cell_type":{"1c7aff1c":"code","de5a3814":"code","fa702bd8":"code","8faa314f":"code","d3910353":"code","8b3acbd2":"code","af32cd7f":"code","3a8b0c2e":"code","1d14405c":"code","a550fd3d":"code","217e62d0":"code","3565f14d":"code","07a8036c":"code","3aed70da":"code","79c32f43":"code","23500498":"code","e5da8cf3":"code","8fcb138c":"code","70ae4632":"code","1490fab1":"code","97f03d58":"code","4e4db9a1":"code","43e972a8":"code","149f3c4c":"code","2d5c7b17":"code","42bcbd07":"code","9326dc87":"code","7e511e83":"code","973db059":"code","653dca13":"code","fba0dbcc":"code","82391a6d":"code","c5560a76":"code","413f911e":"code","ffb41bb4":"code","6b27249b":"code","59850a61":"code","23915352":"code","4cb1dfd5":"code","a3daf438":"code","cac88e81":"code","f3526345":"code","87c64192":"code","2bb3f5e3":"code","4517987e":"code","ebfd224f":"code","f03543bd":"code","a2aa8506":"code","100dad9e":"code","9d827113":"code","ba731245":"code","266ebcda":"code","9e9e43e2":"code","8c4038a0":"code","42ce6d9f":"code","a4c01a03":"code","1fddb614":"code","a89ef00d":"code","c2e41ea1":"code","d3f53d35":"code","17b342fd":"code","6440a159":"code","472cde92":"markdown","25e5187e":"markdown","3b8ef78f":"markdown","28b7c79f":"markdown","ad0801a1":"markdown","e6f4a0e0":"markdown","b112c48c":"markdown","e0a411e2":"markdown","e0a74abd":"markdown","3f6f6059":"markdown","01340743":"markdown","d0ac0ce1":"markdown","9b9e98eb":"markdown","695cc64e":"markdown","2556f4cd":"markdown","157cbebd":"markdown","7747bd10":"markdown","c0989914":"markdown","77023910":"markdown","18d8afb9":"markdown"},"source":{"1c7aff1c":"import pandas as pd\npd.set_option('display.max_rows', None)\npd.set_option('display.max_columns', None)\npd.set_option('display.width', None)\npd.set_option('display.max_colwidth', None)\n\ndata1 = pd.read_csv('..\/input\/videogamesales\/vgsales.csv')","de5a3814":"data1.head()","fa702bd8":"data1.info()","8faa314f":"data1.shape","d3910353":"data1.describe()","8b3acbd2":"data1.describe(include=['object'])","af32cd7f":"'''Missing Value Chart'''\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(10, 5))\ndata1.isnull().mean(axis=0).plot.barh()\nplt.title(\"Ratio of missing values per columns\")","3a8b0c2e":"data1.isnull().values.sum() #total missing values","1d14405c":"data1.isnull().sum().sort_values(ascending=False) #missing values kolom","a550fd3d":"data1[data1.isnull().T.any().T].head()","217e62d0":"'''Checking Duplicate'''\n\nprint('Dupplicate entries: {}'.format(data1.duplicated().sum()))\n# data.drop_duplicates(inplace = True)","3565f14d":"obj = data1.dtypes[data1.dtypes == \"object\"].index.tolist()\nprint(obj)","07a8036c":"'''Nunique Columns'''\n\ndef nunique_counts(data):\n   for i in data.columns:\n       count = data[i].nunique()\n       print(i, \": \", count)\n    \nnunique_counts(data1)","3aed70da":"'''Unique Columns'''\n\ndef unique_counts(data):\n    for i in obj:\n        count = data[i].unique()[:5]\n        print(i, \": \", count)\n    \nunique_counts(data1)","79c32f43":"data1.dropna(inplace=True) #removing all missing values","23500498":"import numpy as np\n\ndata1['Year'] = data1['Year'].astype(np.int64)","e5da8cf3":"data1['Year'] = pd.to_datetime(data1['Year'].astype(np.int64), format= '%Y' )","8fcb138c":"data1['Year'] = data1['Year'].dt.year # getting year","70ae4632":"data1.head()","1490fab1":"import plotly.express as px\nimport plotly.offline as py \npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go \nimport plotly.tools as tools\nimport warnings\nfrom collections import Counter \n\ncustom_aggregation = {}\ncustom_aggregation[\"NA_Sales\"] = \"mean\"\ncustom_aggregation[\"EU_Sales\"] = \"mean\"\ncustom_aggregation[\"JP_Sales\"] = \"mean\"\ncustom_aggregation[\"Other_Sales\"] = \"mean\"\ncustom_aggregation[\"Global_Sales\"] = \"mean\"\n\ndata0 = data1.groupby(\"Genre\").agg(custom_aggregation)\ndata0.columns = [\"North America\",'Europe','Japan','Other','Global']\ndata0['Genre'] = data0.index\n\nna = go.Bar(\n    x = data0.Genre.value_counts().index.sort_values(),\n    y = data0[\"North America\"],\n    name='North America')\n\neu = go.Bar(\n    x = data0.Genre.value_counts().index.sort_values(),\n    y = data0[\"Europe\"],\n    name='Europe')\n\njp = go.Bar(\n    x = data0.Genre.value_counts().index.sort_values(),\n    y = data0[\"Japan\"],\n    name='Japan')\n\noth = go.Bar(\n    x = data0.Genre.value_counts().index.sort_values(),\n    y = data0[\"Other\"],\n    name='Other')\n\nglo = go.Bar(\n    x = data0.Genre.value_counts().index.sort_values(),\n    y = data0[\"Global\"],\n    name='Global')\n\n\ndata = [na, eu, jp, oth, glo]\n\nfig = tools.make_subplots(rows=1, \n                          cols=1)\n\nfig.append_trace(na, 1, 1)\nfig.append_trace(eu, 1, 1)\nfig.append_trace(jp, 1, 1)\nfig.append_trace(oth, 1, 1)\nfig.append_trace(glo, 1, 1)\n\n\nfig['layout'].update(height=500, \n                     width=900, \n                     title='Region Sales Based on Genre', \n                    xaxis_title=\"Genre\",\n                    yaxis_title=\"Mean Sales (in Million)\",\n                    legend_title=\"Region\")\n\npy.iplot(fig, filename='combined-savings')","97f03d58":"custom_aggregation = {}\ncustom_aggregation[\"Rank\"] = lambda x: len(x)\ndata2 = data1.groupby(\"Year\").agg(custom_aggregation)\ndata2.columns = [\"Game Count\"]\ndata2['Year'] = data2.index\n\nlabels = data2['Year'].tolist()\nvalues = data2['Game Count'].tolist()\n\nfig = px.pie(data2, values=values, names=labels)\nfig.update_traces(textposition='inside')\nfig.update_layout(uniformtext_minsize=12, uniformtext_mode='hide')\nfig['layout'].update(height=500, width=700, title='Game Count by Year', legend_title=\"Year\")\nfig.show()","4e4db9a1":"from plotly.subplots import make_subplots\n\nfig = make_subplots(rows=1, \n                    cols=2, \n                    specs=[[{'type':'domain'}, {'type':'domain'}]],\n                    subplot_titles=('Platfrom',\n                                    'Genre'))\n\n\ncustom_aggregation = {}\ncustom_aggregation[\"Global_Sales\"] = \"mean\"\ndata2 = data1.groupby(\"Platform\").agg(custom_aggregation)\ndata2.columns = [\"Global Sales\"]\ndata2[\"Global Sales\"] = data2[\"Global Sales\"]*1000 \ndata2['Platform'] = data2.index\n\nlabels = data2['Platform'].tolist()\nvalues = data2['Global Sales'].tolist()\n\nfig.add_trace(go.Pie(\n                    labels=labels,\n                    values=values, \n                    name=''),\n                    1,1)\n\n#-------------------------------------------------------------\n\ncustom_aggregation = {}\ncustom_aggregation[\"Global_Sales\"] = \"mean\"\ndata2 = data1.groupby(\"Genre\").agg(custom_aggregation)\ndata2.columns = [\"Global Sales\"]\ndata2[\"Global Sales\"] = data2[\"Global Sales\"]*1000 \ndata2['Genre'] = data2.index\n\nlabels = data2['Genre'].tolist()\nvalues = data2['Global Sales'].tolist()\n\nfig.add_trace(go.Pie(\n                    labels=labels,\n                    values=values, \n                    name= ''),\n                    1,2)\n\nfig.update_traces(textposition='inside')\nfig.update_layout(uniformtext_minsize=12, uniformtext_mode='hide')\nfig['layout'].update(height=500, \n                     width=800, \n                     title='Global Sales Contribution by:',\n                    legend_title=\"Platfrom\")\nfig.show()\n\n","43e972a8":"from plotly.subplots import make_subplots\n\nfig = make_subplots(rows=1, \n                    cols=2, \n                    specs=[[{'type':'domain'}, {'type':'domain'}]],\n                    subplot_titles=('Platfrom',\n                                    'Genre'))\n\n\ncustom_aggregation = {}\ncustom_aggregation[\"NA_Sales\"] = \"mean\"\ndata2 = data1.groupby(\"Platform\").agg(custom_aggregation)\ndata2.columns = [\"North America Sales\"]\ndata2[\"North America Sales\"] = data2[\"North America Sales\"]*1000 \ndata2['Platform'] = data2.index\n\nlabels = data2['Platform'].tolist()\nvalues = data2['North America Sales'].tolist()\n\nfig.add_trace(go.Pie(\n                    labels=labels,\n                    values=values, \n                    name=''),\n                    1,1)\n\n#-------------------------------------------------------------\n\ncustom_aggregation = {}\ncustom_aggregation[\"NA_Sales\"] = \"mean\"\ndata2 = data1.groupby(\"Genre\").agg(custom_aggregation)\ndata2.columns = [\"North America Sales\"]\ndata2[\"North America Sales\"] = data2[\"North America Sales\"]*1000 \ndata2['Genre'] = data2.index\n\nlabels = data2['Genre'].tolist()\nvalues = data2['North America Sales'].tolist()\n\nfig.add_trace(go.Pie(\n                    labels=labels,\n                    values=values, \n                    name= ''),\n                    1,2)\n\nfig.update_traces(textposition='inside')\nfig.update_layout(uniformtext_minsize=12, uniformtext_mode='hide')\nfig['layout'].update(height=500, \n                     width=800, \n                     title='North America Sales Contribution by:',\n                    legend_title=\"Platfrom\")\nfig.show()","149f3c4c":"fig = make_subplots(rows=1, \n                    cols=2, \n                    specs=[[{'type':'domain'}, {'type':'domain'}]],\n                    subplot_titles=('Platfrom',\n                                    'Genre'))\n\n\ncustom_aggregation = {}\ncustom_aggregation[\"EU_Sales\"] = \"mean\"\ndata2 = data1.groupby(\"Platform\").agg(custom_aggregation)\ndata2.columns = [\"Europe Sales\"]\ndata2[\"Europe Sales\"] = data2[\"Europe Sales\"]*1000 \ndata2['Platform'] = data2.index\n\nlabels = data2['Platform'].tolist()\nvalues = data2['Europe Sales'].tolist()\n\nfig.add_trace(go.Pie(\n                    labels=labels,\n                    values=values, \n                    name=''),\n                    1,1)\n\n#-------------------------------------------------------------\n\ncustom_aggregation = {}\ncustom_aggregation[\"EU_Sales\"] = \"mean\"\ndata2 = data1.groupby(\"Genre\").agg(custom_aggregation)\ndata2.columns = [\"Europe Sales\"]\ndata2[\"Europe Sales\"] = data2[\"Europe Sales\"]*1000 \ndata2['Genre'] = data2.index\n\nlabels = data2['Genre'].tolist()\nvalues = data2['Europe Sales'].tolist()\n\nfig.add_trace(go.Pie(\n                    labels=labels,\n                    values=values, \n                    name= ''),\n                    1,2)\n\nfig.update_traces(textposition='inside')\nfig.update_layout(uniformtext_minsize=12, uniformtext_mode='hide')\nfig['layout'].update(height=500, \n                     width=800, \n                     title='Europe Sales Contribution by:',\n                    legend_title=\"Platfrom\")\nfig.show()","2d5c7b17":"fig = make_subplots(rows=1, \n                    cols=2, \n                    specs=[[{'type':'domain'}, {'type':'domain'}]],\n                    subplot_titles=('Platfrom',\n                                    'Genre'))\n\n\ncustom_aggregation = {}\ncustom_aggregation[\"JP_Sales\"] = \"mean\"\ndata2 = data1.groupby(\"Platform\").agg(custom_aggregation)\ndata2.columns = [\"Japan Sales\"]\ndata2[\"Japan Sales\"] = data2[\"Japan Sales\"]*1000 \ndata2['Platform'] = data2.index\n\nlabels = data2['Platform'].tolist()\nvalues = data2['Japan Sales'].tolist()\n\nfig.add_trace(go.Pie(\n                    labels=labels,\n                    values=values, \n                    name=''),\n                    1,1)\n\n#-------------------------------------------------------------\n\ncustom_aggregation = {}\ncustom_aggregation[\"JP_Sales\"] = \"mean\"\ndata2 = data1.groupby(\"Genre\").agg(custom_aggregation)\ndata2.columns = [\"Japan Sales\"]\ndata2[\"Japan Sales\"] = data2[\"Japan Sales\"]*1000 \ndata2['Genre'] = data2.index\n\nlabels = data2['Genre'].tolist()\nvalues = data2['Japan Sales'].tolist()\n\nfig.add_trace(go.Pie(\n                    labels=labels,\n                    values=values, \n                    name= ''),\n                    1,2)\n\nfig.update_traces(textposition='inside')\nfig.update_layout(uniformtext_minsize=12, uniformtext_mode='hide')\nfig['layout'].update(height=500, \n                     width=800, \n                     title='Japan Sales Contribution by:',\n                    legend_title=\"Platfrom\")\nfig.show()","42bcbd07":"fig = make_subplots(rows=1, \n                    cols=2, \n                    specs=[[{'type':'domain'}, {'type':'domain'}]],\n                    subplot_titles=('Platfrom',\n                                    'Genre'))\n\n\ncustom_aggregation = {}\ncustom_aggregation[\"Other_Sales\"] = \"mean\"\ndata2 = data1.groupby(\"Platform\").agg(custom_aggregation)\ndata2.columns = [\"Other Sales\"]\ndata2[\"Other Sales\"] = data2[\"Other Sales\"]*1000 \ndata2['Platform'] = data2.index\n\nlabels = data2['Platform'].tolist()\nvalues = data2['Other Sales'].tolist()\n\nfig.add_trace(go.Pie(\n                    labels=labels,\n                    values=values, \n                    name=''),\n                    1,1)\n\n#-------------------------------------------------------------\n\ncustom_aggregation = {}\ncustom_aggregation[\"Other_Sales\"] = \"mean\"\ndata2 = data1.groupby(\"Genre\").agg(custom_aggregation)\ndata2.columns = [\"Other Sales\"]\ndata2[\"Other Sales\"] = data2[\"Other Sales\"]*1000 \ndata2['Genre'] = data2.index\n\nlabels = data2['Genre'].tolist()\nvalues = data2['Other Sales'].tolist()\n\nfig.add_trace(go.Pie(\n                    labels=labels,\n                    values=values, \n                    name= ''),\n                    1,2)\n\nfig.update_traces(textposition='inside')\nfig.update_layout(uniformtext_minsize=12, uniformtext_mode='hide')\nfig['layout'].update(height=500, \n                     width=800, \n                     title='Other Sales Contribution by:',\n                    legend_title=\"Platfrom\")\nfig.show()","9326dc87":"custom_aggregation = {}\ncustom_aggregation[\"Rank\"] = lambda x: len(x)\ndata0 = data1.groupby(\"Genre\").agg(custom_aggregation)\n\ncustom_aggregation = {}\ncustom_aggregation[\"Rank\"] = ['min', 'median', 'max']\ndata0_ = data1.groupby(\"Genre\").agg(custom_aggregation)\n\ndata0 = pd.concat([data0,data0_], axis=1)\ndata0.columns = [\"Count\",'Min Rank','Median Rank','Max Rank']\ndata0['Genre'] = data0.index\n\nfig = px.bar(data0, x='Genre', y=\"Count\", color=\"Genre\")\nfig['layout'].update(height=400, width=700, title='Genre Countplot')\nfig.show()","7e511e83":"data0 = data0.sort_values(by='Min Rank')\nx = data0['Genre'].tolist()\ny = data0['Min Rank'].tolist()\n\ndata = dict(\n            number=y,\n            stage=x)\n\nfig = px.funnel(data, x='number', y='stage', color='number')\nfig['layout'].update(height=500, \n                     width=600, \n                     title='Top Ranking Based on Genre', \n                    xaxis_title=\"Rank\",\n                    yaxis_title=\"Genre\",\n                    legend_title=\"Rank\")\nfig.show()","973db059":"custom_aggregation = {}\ncustom_aggregation[\"Rank\"] = lambda x: len(x)\ndata0 = data1.groupby(\"Platform\").agg(custom_aggregation)\n\ncustom_aggregation = {}\ncustom_aggregation[\"Rank\"] = ['min', 'median', 'max']\ndata0_ = data1.groupby(\"Platform\").agg(custom_aggregation)\n\ndata0 = pd.concat([data0,data0_], axis=1)\ndata0.columns = [\"Count\",'Min Rank','Median Rank','Max Rank']\ndata0['Platform'] = data0.index\ndata0 = data0.sort_values(by='Min Rank')\n\nfig = px.bar(data0, x='Platform', y=\"Count\", color=\"Platform\")\nfig['layout'].update(height=400, width=700, title='Platform Countplot')\nfig.show()","653dca13":"x = data0['Platform'].tolist()[:10]\ny = data0['Min Rank'].tolist()[:10]\n\ndata = dict(\n            number=y,\n            stage=x)\n\nfig = px.funnel(data, x='number', y='stage', color='number')\nfig['layout'].update(height=500, \n                     width=600, \n                     title='Top Ranking Based on Platform', \n                    xaxis_title=\"Rank\",\n                    yaxis_title=\"Platform\",\n                    legend_title=\"Rank\")\nfig.show()","fba0dbcc":"custom_aggregation = {}\ncustom_aggregation[\"Rank\"] = lambda x: len(x)\ndata0 = data1.groupby(\"Publisher\").agg(custom_aggregation)\n\ncustom_aggregation = {}\ncustom_aggregation[\"Rank\"] = ['min', 'median', 'max']\ndata0_ = data1.groupby(\"Publisher\").agg(custom_aggregation)\n\ndata0 = pd.concat([data0,data0_], axis=1)\ndata0.columns = [\"Count\",'Min Rank','Median Rank','Max Rank']\ndata0['Publisher'] = data0.index\ndata0 = data0.sort_values(by='Count', ascending=False)[:20]\n\n\nfig = px.bar(data0, x='Publisher', y=\"Count\", color=\"Publisher\")\nfig['layout'].update(height=700, width=900, title='Top 10 Publisher by Size')\nfig.show()","82391a6d":"custom_aggregation = {}\ncustom_aggregation[\"Rank\"] = lambda x: len(x)\ndata0 = data1.groupby(\"Publisher\").agg(custom_aggregation)\n\ncustom_aggregation = {}\ncustom_aggregation[\"Rank\"] = ['min', 'median', 'max']\ndata0_ = data1.groupby(\"Publisher\").agg(custom_aggregation)\n\ndata0 = pd.concat([data0,data0_], axis=1)\ndata0.columns = [\"Count\",'Min Rank','Median Rank','Max Rank']\ndata0['Publisher'] = data0.index\ndata0 = data0.sort_values(by='Min Rank', ascending=True)[:20]\n\nx = data0['Publisher'].tolist()[:10]\ny = data0['Min Rank'].tolist()[:10]\n\ndata = dict(\n            number=y,\n            stage=x)\n\nfig = px.funnel(data, x='number', y='stage', color='number')\nfig['layout'].update(height=500, \n                     width=600, \n                     title='Top Ranking Based on Publisher', \n                    xaxis_title=\"Rank\",\n                    yaxis_title=\"Platform\",\n                    legend_title=\"Rank\")\nfig.show()","c5560a76":"'''Equidistance Checking'''\n\ndata1 = data1.sort_values(by='Year')\ndata1['Time_Interval'] = data1.Year - data1.Year.shift(1)\ndata1[['Year', 'Time_Interval']].head()\n\nprint(f\"{data1['Time_Interval'].value_counts()}\")\ndata1 = data1.drop('Time_Interval', axis=1)","413f911e":"data1['Year'].min(), data1['Year'].max()","ffb41bb4":"from plotly.subplots import make_subplots\n\nfig = make_subplots(rows=1, \n                    cols=1)\n\ncustom_aggregation = {}\ncustom_aggregation[\"Global_Sales\"] = \"mean\"\ncustom_aggregation[\"NA_Sales\"] = \"mean\"\ncustom_aggregation[\"EU_Sales\"] = \"mean\"\ncustom_aggregation[\"JP_Sales\"] = \"mean\"\ncustom_aggregation[\"Other_Sales\"] = \"mean\"\ndata2 = data1.groupby(\"Year\").agg(custom_aggregation)\n\ndata2.columns = [\"Global Sales\", 'North America Sales','Europe Sales','Japan Sales','Other Sales']\n\ndata2[\"Global Sales\"] = data2[\"Global Sales\"]*1000000\ndata2[\"North America Sales\"] = data2[\"North America Sales\"]*1000000\ndata2[\"Europe Sales\"] = data2[\"Europe Sales\"]*1000000\ndata2[\"Japan Sales\"] = data2[\"Japan Sales\"]*1000000\ndata2[\"Other Sales\"] = data2[\"Other Sales\"]*1000000\n\ndata2['Year'] = data2.index\n\n\nx = data2['Year'].tolist()\ny = data2['Global Sales'].tolist()\ny_na = data2['North America Sales'].tolist()\ny_eu = data2['Europe Sales'].tolist()\ny_jp = data2['Japan Sales'].tolist()\ny_oth = data2['Other Sales'].tolist()\n\n\nfig.add_trace(go.Scatter(x=x, y=y,name='Global'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_na,name='North America'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_eu,name='Europe Sales'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_jp,name='Japan Sales'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_oth,name='Other Sales'), 1, 1)\n\nfig['layout'].update(height=500, \n                     width=900, \n                     title='Overall YoY Sales',\n                    xaxis_title=\"Year\",\n                    yaxis_title=\"Sales\",\n                    legend_title=\"Region\")\nfig.show()","6b27249b":"# Genre: Shooter\n\nfig = make_subplots(rows=1, \n                    cols=1)\n\ndata_ = data1.loc[data1['Genre'] == 'Shooter']\n\ncustom_aggregation = {}\ncustom_aggregation[\"Global_Sales\"] = \"mean\"\ncustom_aggregation[\"NA_Sales\"] = \"mean\"\ncustom_aggregation[\"EU_Sales\"] = \"mean\"\ncustom_aggregation[\"JP_Sales\"] = \"mean\"\ncustom_aggregation[\"Other_Sales\"] = \"mean\"\ndata2 = data_.groupby(\"Year\").agg(custom_aggregation)\n\ndata2.columns = [\"Global Sales\", 'North America Sales','Europe Sales','Japan Sales','Other Sales']\n\ndata2[\"Global Sales\"] = data2[\"Global Sales\"]*1000000\ndata2[\"North America Sales\"] = data2[\"North America Sales\"]*1000000\ndata2[\"Europe Sales\"] = data2[\"Europe Sales\"]*1000000\ndata2[\"Japan Sales\"] = data2[\"Japan Sales\"]*1000000\ndata2[\"Other Sales\"] = data2[\"Other Sales\"]*1000000\n\ndata2['Year'] = data2.index\n\n\nx = data2['Year'].tolist()\ny = data2['Global Sales'].tolist()\ny_na = data2['North America Sales'].tolist()\ny_eu = data2['Europe Sales'].tolist()\ny_jp = data2['Japan Sales'].tolist()\ny_oth = data2['Other Sales'].tolist()\n\n\nfig.add_trace(go.Scatter(x=x, y=y,name='Global'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_na,name='North America'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_eu,name='Europe Sales'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_jp,name='Japan Sales'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_oth,name='Other Sales'), 1, 1)\n\nfig['layout'].update(height=500, \n                     width=900, \n                     title='YoY Sales based on Genre: Shooter',\n                    xaxis_title=\"Year\",\n                    yaxis_title=\"Sales\",\n                    legend_title=\"Region\")\nfig.show()","59850a61":"# Genre: Misc\n\nfig = make_subplots(rows=1, \n                    cols=1)\n\ndata_ = data1.loc[data1['Genre'] == 'Misc']\n\ncustom_aggregation = {}\ncustom_aggregation[\"Global_Sales\"] = \"mean\"\ncustom_aggregation[\"NA_Sales\"] = \"mean\"\ncustom_aggregation[\"EU_Sales\"] = \"mean\"\ncustom_aggregation[\"JP_Sales\"] = \"mean\"\ncustom_aggregation[\"Other_Sales\"] = \"mean\"\ndata2 = data_.groupby(\"Year\").agg(custom_aggregation)\n\ndata2.columns = [\"Global Sales\", 'North America Sales','Europe Sales','Japan Sales','Other Sales']\n\ndata2[\"Global Sales\"] = data2[\"Global Sales\"]*1000000\ndata2[\"North America Sales\"] = data2[\"North America Sales\"]*1000000\ndata2[\"Europe Sales\"] = data2[\"Europe Sales\"]*1000000\ndata2[\"Japan Sales\"] = data2[\"Japan Sales\"]*1000000\ndata2[\"Other Sales\"] = data2[\"Other Sales\"]*1000000\n\ndata2['Year'] = data2.index\n\n\nx = data2['Year'].tolist()\ny = data2['Global Sales'].tolist()\ny_na = data2['North America Sales'].tolist()\ny_eu = data2['Europe Sales'].tolist()\ny_jp = data2['Japan Sales'].tolist()\ny_oth = data2['Other Sales'].tolist()\n\n\nfig.add_trace(go.Scatter(x=x, y=y,name='Global'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_na,name='North America'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_eu,name='Europe Sales'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_jp,name='Japan Sales'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_oth,name='Other Sales'), 1, 1)\n\nfig['layout'].update(height=500, \n                     width=900, \n                     title='YoY Sales based on Genre: Misc',\n                    xaxis_title=\"Year\",\n                    yaxis_title=\"Sales\",\n                    legend_title=\"Region\")\nfig.show()","23915352":"# Genre: Action\n\nfig = make_subplots(rows=1, \n                    cols=1)\n\ndata_ = data1.loc[data1['Genre'] == 'Action']\n\ncustom_aggregation = {}\ncustom_aggregation[\"Global_Sales\"] = \"mean\"\ncustom_aggregation[\"NA_Sales\"] = \"mean\"\ncustom_aggregation[\"EU_Sales\"] = \"mean\"\ncustom_aggregation[\"JP_Sales\"] = \"mean\"\ncustom_aggregation[\"Other_Sales\"] = \"mean\"\ndata2 = data_.groupby(\"Year\").agg(custom_aggregation)\n\ndata2.columns = [\"Global Sales\", 'North America Sales','Europe Sales','Japan Sales','Other Sales']\n\ndata2[\"Global Sales\"] = data2[\"Global Sales\"]*1000000\ndata2[\"North America Sales\"] = data2[\"North America Sales\"]*1000000\ndata2[\"Europe Sales\"] = data2[\"Europe Sales\"]*1000000\ndata2[\"Japan Sales\"] = data2[\"Japan Sales\"]*1000000\ndata2[\"Other Sales\"] = data2[\"Other Sales\"]*1000000\n\ndata2['Year'] = data2.index\n\n\nx = data2['Year'].tolist()\ny = data2['Global Sales'].tolist()\ny_na = data2['North America Sales'].tolist()\ny_eu = data2['Europe Sales'].tolist()\ny_jp = data2['Japan Sales'].tolist()\ny_oth = data2['Other Sales'].tolist()\n\n\nfig.add_trace(go.Scatter(x=x, y=y,name='Global'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_na,name='North America'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_eu,name='Europe Sales'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_jp,name='Japan Sales'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_oth,name='Other Sales'), 1, 1)\n\nfig['layout'].update(height=500, \n                     width=900, \n                     title='YoY Sales based on Genre: Action',\n                    xaxis_title=\"Year\",\n                    yaxis_title=\"Sales\",\n                    legend_title=\"Region\")\nfig.show()","4cb1dfd5":"# Genre: Sports\n\nfig = make_subplots(rows=1, \n                    cols=1)\n\ndata_ = data1.loc[data1['Genre'] == 'Sports']\n\ncustom_aggregation = {}\ncustom_aggregation[\"Global_Sales\"] = \"mean\"\ncustom_aggregation[\"NA_Sales\"] = \"mean\"\ncustom_aggregation[\"EU_Sales\"] = \"mean\"\ncustom_aggregation[\"JP_Sales\"] = \"mean\"\ncustom_aggregation[\"Other_Sales\"] = \"mean\"\ndata2 = data_.groupby(\"Year\").agg(custom_aggregation)\n\ndata2.columns = [\"Global Sales\", 'North America Sales','Europe Sales','Japan Sales','Other Sales']\n\ndata2[\"Global Sales\"] = data2[\"Global Sales\"]*1000000\ndata2[\"North America Sales\"] = data2[\"North America Sales\"]*1000000\ndata2[\"Europe Sales\"] = data2[\"Europe Sales\"]*1000000\ndata2[\"Japan Sales\"] = data2[\"Japan Sales\"]*1000000\ndata2[\"Other Sales\"] = data2[\"Other Sales\"]*1000000\n\ndata2['Year'] = data2.index\n\n\nx = data2['Year'].tolist()\ny = data2['Global Sales'].tolist()\ny_na = data2['North America Sales'].tolist()\ny_eu = data2['Europe Sales'].tolist()\ny_jp = data2['Japan Sales'].tolist()\ny_oth = data2['Other Sales'].tolist()\n\n\nfig.add_trace(go.Scatter(x=x, y=y,name='Global'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_na,name='North America'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_eu,name='Europe Sales'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_jp,name='Japan Sales'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_oth,name='Other Sales'), 1, 1)\n\nfig['layout'].update(height=500, \n                     width=900, \n                     title='YoY Sales based on Genre: Sports',\n                    xaxis_title=\"Year\",\n                    yaxis_title=\"Sales\",\n                    legend_title=\"Region\")\nfig.show()","a3daf438":"# Genre: Fighting\n\nfig = make_subplots(rows=1, \n                    cols=1)\n\ndata_ = data1.loc[data1['Genre'] == 'Fighting']\n\ncustom_aggregation = {}\ncustom_aggregation[\"Global_Sales\"] = \"mean\"\ncustom_aggregation[\"NA_Sales\"] = \"mean\"\ncustom_aggregation[\"EU_Sales\"] = \"mean\"\ncustom_aggregation[\"JP_Sales\"] = \"mean\"\ncustom_aggregation[\"Other_Sales\"] = \"mean\"\ndata2 = data_.groupby(\"Year\").agg(custom_aggregation)\n\ndata2.columns = [\"Global Sales\", 'North America Sales','Europe Sales','Japan Sales','Other Sales']\n\ndata2[\"Global Sales\"] = data2[\"Global Sales\"]*1000000\ndata2[\"North America Sales\"] = data2[\"North America Sales\"]*1000000\ndata2[\"Europe Sales\"] = data2[\"Europe Sales\"]*1000000\ndata2[\"Japan Sales\"] = data2[\"Japan Sales\"]*1000000\ndata2[\"Other Sales\"] = data2[\"Other Sales\"]*1000000\n\ndata2['Year'] = data2.index\n\n\nx = data2['Year'].tolist()\ny = data2['Global Sales'].tolist()\ny_na = data2['North America Sales'].tolist()\ny_eu = data2['Europe Sales'].tolist()\ny_jp = data2['Japan Sales'].tolist()\ny_oth = data2['Other Sales'].tolist()\n\n\nfig.add_trace(go.Scatter(x=x, y=y,name='Global'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_na,name='North America'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_eu,name='Europe Sales'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_jp,name='Japan Sales'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_oth,name='Other Sales'), 1, 1)\n\nfig['layout'].update(height=500, \n                     width=900, \n                     title='YoY Sales based on Genre: Fighting',\n                    xaxis_title=\"Year\",\n                    yaxis_title=\"Sales\",\n                    legend_title=\"Region\")\nfig.show()","cac88e81":"# Genre: Racing\n\nfig = make_subplots(rows=1, \n                    cols=1)\n\ndata_ = data1.loc[data1['Genre'] == 'Racing']\n\ncustom_aggregation = {}\ncustom_aggregation[\"Global_Sales\"] = \"mean\"\ncustom_aggregation[\"NA_Sales\"] = \"mean\"\ncustom_aggregation[\"EU_Sales\"] = \"mean\"\ncustom_aggregation[\"JP_Sales\"] = \"mean\"\ncustom_aggregation[\"Other_Sales\"] = \"mean\"\ndata2 = data_.groupby(\"Year\").agg(custom_aggregation)\n\ndata2.columns = [\"Global Sales\", 'North America Sales','Europe Sales','Japan Sales','Other Sales']\n\ndata2[\"Global Sales\"] = data2[\"Global Sales\"]*1000000\ndata2[\"North America Sales\"] = data2[\"North America Sales\"]*1000000\ndata2[\"Europe Sales\"] = data2[\"Europe Sales\"]*1000000\ndata2[\"Japan Sales\"] = data2[\"Japan Sales\"]*1000000\ndata2[\"Other Sales\"] = data2[\"Other Sales\"]*1000000\n\ndata2['Year'] = data2.index\n\n\nx = data2['Year'].tolist()\ny = data2['Global Sales'].tolist()\ny_na = data2['North America Sales'].tolist()\ny_eu = data2['Europe Sales'].tolist()\ny_jp = data2['Japan Sales'].tolist()\ny_oth = data2['Other Sales'].tolist()\n\n\nfig.add_trace(go.Scatter(x=x, y=y,name='Global'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_na,name='North America'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_eu,name='Europe Sales'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_jp,name='Japan Sales'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_oth,name='Other Sales'), 1, 1)\n\nfig['layout'].update(height=500, \n                     width=900, \n                     title='YoY Sales based on Genre: Racing',\n                    xaxis_title=\"Year\",\n                    yaxis_title=\"Sales\",\n                    legend_title=\"Region\")\nfig.show()","f3526345":"# Genre: Platform\n\nfig = make_subplots(rows=1, \n                    cols=1)\n\ndata_ = data1.loc[data1['Genre'] == 'Platform']\n\ncustom_aggregation = {}\ncustom_aggregation[\"Global_Sales\"] = \"mean\"\ncustom_aggregation[\"NA_Sales\"] = \"mean\"\ncustom_aggregation[\"EU_Sales\"] = \"mean\"\ncustom_aggregation[\"JP_Sales\"] = \"mean\"\ncustom_aggregation[\"Other_Sales\"] = \"mean\"\ndata2 = data_.groupby(\"Year\").agg(custom_aggregation)\n\ndata2.columns = [\"Global Sales\", 'North America Sales','Europe Sales','Japan Sales','Other Sales']\n\ndata2[\"Global Sales\"] = data2[\"Global Sales\"]*1000000\ndata2[\"North America Sales\"] = data2[\"North America Sales\"]*1000000\ndata2[\"Europe Sales\"] = data2[\"Europe Sales\"]*1000000\ndata2[\"Japan Sales\"] = data2[\"Japan Sales\"]*1000000\ndata2[\"Other Sales\"] = data2[\"Other Sales\"]*1000000\n\ndata2['Year'] = data2.index\n\n\nx = data2['Year'].tolist()\ny = data2['Global Sales'].tolist()\ny_na = data2['North America Sales'].tolist()\ny_eu = data2['Europe Sales'].tolist()\ny_jp = data2['Japan Sales'].tolist()\ny_oth = data2['Other Sales'].tolist()\n\n\nfig.add_trace(go.Scatter(x=x, y=y,name='Global'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_na,name='North America'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_eu,name='Europe Sales'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_jp,name='Japan Sales'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_oth,name='Other Sales'), 1, 1)\n\nfig['layout'].update(height=500, \n                     width=900, \n                     title='YoY Sales based on Genre: Platform',\n                    xaxis_title=\"Year\",\n                    yaxis_title=\"Sales\",\n                    legend_title=\"Region\")\nfig.show()","87c64192":"# Genre: Puzzle\n\nfig = make_subplots(rows=1, \n                    cols=1)\n\ndata_ = data1.loc[data1['Genre'] == 'Puzzle']\n\ncustom_aggregation = {}\ncustom_aggregation[\"Global_Sales\"] = \"mean\"\ncustom_aggregation[\"NA_Sales\"] = \"mean\"\ncustom_aggregation[\"EU_Sales\"] = \"mean\"\ncustom_aggregation[\"JP_Sales\"] = \"mean\"\ncustom_aggregation[\"Other_Sales\"] = \"mean\"\ndata2 = data_.groupby(\"Year\").agg(custom_aggregation)\n\ndata2.columns = [\"Global Sales\", 'North America Sales','Europe Sales','Japan Sales','Other Sales']\n\ndata2[\"Global Sales\"] = data2[\"Global Sales\"]*1000000\ndata2[\"North America Sales\"] = data2[\"North America Sales\"]*1000000\ndata2[\"Europe Sales\"] = data2[\"Europe Sales\"]*1000000\ndata2[\"Japan Sales\"] = data2[\"Japan Sales\"]*1000000\ndata2[\"Other Sales\"] = data2[\"Other Sales\"]*1000000\n\ndata2['Year'] = data2.index\n\n\nx = data2['Year'].tolist()\ny = data2['Global Sales'].tolist()\ny_na = data2['North America Sales'].tolist()\ny_eu = data2['Europe Sales'].tolist()\ny_jp = data2['Japan Sales'].tolist()\ny_oth = data2['Other Sales'].tolist()\n\n\nfig.add_trace(go.Scatter(x=x, y=y,name='Global'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_na,name='North America'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_eu,name='Europe Sales'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_jp,name='Japan Sales'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_oth,name='Other Sales'), 1, 1)\n\nfig['layout'].update(height=500, \n                     width=900, \n                     title='YoY Sales based on Genre: Puzzle',\n                    xaxis_title=\"Year\",\n                    yaxis_title=\"Sales\",\n                    legend_title=\"Region\")\nfig.show()","2bb3f5e3":"# Genre: Simulation\n\nfig = make_subplots(rows=1, \n                    cols=1)\n\ndata_ = data1.loc[data1['Genre'] == 'Simulation']\n\ncustom_aggregation = {}\ncustom_aggregation[\"Global_Sales\"] = \"mean\"\ncustom_aggregation[\"NA_Sales\"] = \"mean\"\ncustom_aggregation[\"EU_Sales\"] = \"mean\"\ncustom_aggregation[\"JP_Sales\"] = \"mean\"\ncustom_aggregation[\"Other_Sales\"] = \"mean\"\ndata2 = data_.groupby(\"Year\").agg(custom_aggregation)\n\ndata2.columns = [\"Global Sales\", 'North America Sales','Europe Sales','Japan Sales','Other Sales']\n\ndata2[\"Global Sales\"] = data2[\"Global Sales\"]*1000000\ndata2[\"North America Sales\"] = data2[\"North America Sales\"]*1000000\ndata2[\"Europe Sales\"] = data2[\"Europe Sales\"]*1000000\ndata2[\"Japan Sales\"] = data2[\"Japan Sales\"]*1000000\ndata2[\"Other Sales\"] = data2[\"Other Sales\"]*1000000\n\ndata2['Year'] = data2.index\n\n\nx = data2['Year'].tolist()\ny = data2['Global Sales'].tolist()\ny_na = data2['North America Sales'].tolist()\ny_eu = data2['Europe Sales'].tolist()\ny_jp = data2['Japan Sales'].tolist()\ny_oth = data2['Other Sales'].tolist()\n\n\nfig.add_trace(go.Scatter(x=x, y=y,name='Global'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_na,name='North America'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_eu,name='Europe Sales'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_jp,name='Japan Sales'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_oth,name='Other Sales'), 1, 1)\n\nfig['layout'].update(height=500, \n                     width=900, \n                     title='YoY Sales based on Genre: Simulation',\n                    xaxis_title=\"Year\",\n                    yaxis_title=\"Sales\",\n                    legend_title=\"Region\")\nfig.show()","4517987e":"# Genre: Adventure\n\nfig = make_subplots(rows=1, \n                    cols=1)\n\ndata_ = data1.loc[data1['Genre'] == 'Adventure']\n\ncustom_aggregation = {}\ncustom_aggregation[\"Global_Sales\"] = \"mean\"\ncustom_aggregation[\"NA_Sales\"] = \"mean\"\ncustom_aggregation[\"EU_Sales\"] = \"mean\"\ncustom_aggregation[\"JP_Sales\"] = \"mean\"\ncustom_aggregation[\"Other_Sales\"] = \"mean\"\ndata2 = data_.groupby(\"Year\").agg(custom_aggregation)\n\ndata2.columns = [\"Global Sales\", 'North America Sales','Europe Sales','Japan Sales','Other Sales']\n\ndata2[\"Global Sales\"] = data2[\"Global Sales\"]*1000000\ndata2[\"North America Sales\"] = data2[\"North America Sales\"]*1000000\ndata2[\"Europe Sales\"] = data2[\"Europe Sales\"]*1000000\ndata2[\"Japan Sales\"] = data2[\"Japan Sales\"]*1000000\ndata2[\"Other Sales\"] = data2[\"Other Sales\"]*1000000\n\ndata2['Year'] = data2.index\n\n\nx = data2['Year'].tolist()\ny = data2['Global Sales'].tolist()\ny_na = data2['North America Sales'].tolist()\ny_eu = data2['Europe Sales'].tolist()\ny_jp = data2['Japan Sales'].tolist()\ny_oth = data2['Other Sales'].tolist()\n\n\nfig.add_trace(go.Scatter(x=x, y=y,name='Global'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_na,name='North America'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_eu,name='Europe Sales'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_jp,name='Japan Sales'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_oth,name='Other Sales'), 1, 1)\n\nfig['layout'].update(height=500, \n                     width=900, \n                     title='YoY Sales based on Genre: Adventure',\n                    xaxis_title=\"Year\",\n                    yaxis_title=\"Sales\",\n                    legend_title=\"Region\")\nfig.show()","ebfd224f":"# Genre: Role-Playing\n\nfig = make_subplots(rows=1, \n                    cols=1)\n\ndata_ = data1.loc[data1['Genre'] == 'Role-Playing']\n\ncustom_aggregation = {}\ncustom_aggregation[\"Global_Sales\"] = \"mean\"\ncustom_aggregation[\"NA_Sales\"] = \"mean\"\ncustom_aggregation[\"EU_Sales\"] = \"mean\"\ncustom_aggregation[\"JP_Sales\"] = \"mean\"\ncustom_aggregation[\"Other_Sales\"] = \"mean\"\ndata2 = data_.groupby(\"Year\").agg(custom_aggregation)\n\ndata2.columns = [\"Global Sales\", 'North America Sales','Europe Sales','Japan Sales','Other Sales']\n\ndata2[\"Global Sales\"] = data2[\"Global Sales\"]*1000000\ndata2[\"North America Sales\"] = data2[\"North America Sales\"]*1000000\ndata2[\"Europe Sales\"] = data2[\"Europe Sales\"]*1000000\ndata2[\"Japan Sales\"] = data2[\"Japan Sales\"]*1000000\ndata2[\"Other Sales\"] = data2[\"Other Sales\"]*1000000\n\ndata2['Year'] = data2.index\n\n\nx = data2['Year'].tolist()\ny = data2['Global Sales'].tolist()\ny_na = data2['North America Sales'].tolist()\ny_eu = data2['Europe Sales'].tolist()\ny_jp = data2['Japan Sales'].tolist()\ny_oth = data2['Other Sales'].tolist()\n\n\nfig.add_trace(go.Scatter(x=x, y=y,name='Global'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_na,name='North America'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_eu,name='Europe Sales'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_jp,name='Japan Sales'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_oth,name='Other Sales'), 1, 1)\n\nfig['layout'].update(height=500, \n                     width=900, \n                     title='YoY Sales based on Genre: Role-Playing',\n                    xaxis_title=\"Year\",\n                    yaxis_title=\"Sales\",\n                    legend_title=\"Region\")\nfig.show()","f03543bd":"# Genre: Strategy\n\nfig = make_subplots(rows=1, \n                    cols=1)\n\ndata_ = data1.loc[data1['Genre'] == 'Strategy']\n\ncustom_aggregation = {}\ncustom_aggregation[\"Global_Sales\"] = \"mean\"\ncustom_aggregation[\"NA_Sales\"] = \"mean\"\ncustom_aggregation[\"EU_Sales\"] = \"mean\"\ncustom_aggregation[\"JP_Sales\"] = \"mean\"\ncustom_aggregation[\"Other_Sales\"] = \"mean\"\ndata2 = data_.groupby(\"Year\").agg(custom_aggregation)\n\ndata2.columns = [\"Global Sales\", 'North America Sales','Europe Sales','Japan Sales','Other Sales']\n\ndata2[\"Global Sales\"] = data2[\"Global Sales\"]*1000000\ndata2[\"North America Sales\"] = data2[\"North America Sales\"]*1000000\ndata2[\"Europe Sales\"] = data2[\"Europe Sales\"]*1000000\ndata2[\"Japan Sales\"] = data2[\"Japan Sales\"]*1000000\ndata2[\"Other Sales\"] = data2[\"Other Sales\"]*1000000\n\ndata2['Year'] = data2.index\n\n\nx = data2['Year'].tolist()\ny = data2['Global Sales'].tolist()\ny_na = data2['North America Sales'].tolist()\ny_eu = data2['Europe Sales'].tolist()\ny_jp = data2['Japan Sales'].tolist()\ny_oth = data2['Other Sales'].tolist()\n\n\nfig.add_trace(go.Scatter(x=x, y=y,name='Global'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_na,name='North America'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_eu,name='Europe Sales'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_jp,name='Japan Sales'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=y_oth,name='Other Sales'), 1, 1)\n\nfig['layout'].update(height=500, \n                     width=900, \n                     title='YoY Sales based on Genre: Strategy',\n                    xaxis_title=\"Year\",\n                    yaxis_title=\"Sales\",\n                    legend_title=\"Region\")\nfig.show()","a2aa8506":"# Shooter on 1984\nimport seaborn as sns\n\ncm = sns.light_palette(\"green\", as_cmap=True)\ndata_1 = data1[(data1['Year'] == 1984) & (data1['Genre'] == 'Shooter')].sort_values(by='Global_Sales', ascending=False)\ndata_1.style.background_gradient(cmap = cm)","100dad9e":"# Misc on 1992\n\ncm = sns.light_palette(\"green\", as_cmap=True)\ndata_2 = data1[(data1['Year'] == 1992) & (data1['Genre'] == 'Misc')].sort_values(by='Global_Sales', ascending=False)\ndata_2.style.background_gradient(cmap = cm)","9d827113":"# Action on 1992\n\ncm = sns.light_palette(\"green\", as_cmap=True)\ndata_3 = data1[(data1['Year'] == 1992) & (data1['Genre'] == 'Action')].sort_values(by='Global_Sales', ascending=False)\ndata_3.style.background_gradient(cmap = cm)","ba731245":"# Sports on 1983\n\ncm = sns.light_palette(\"green\", as_cmap=True)\ndata_4 = data1[(data1['Year'] == 1983) & (data1['Genre'] == 'Sports')].sort_values(by='Global_Sales', ascending=False)\ndata_4.style.background_gradient(cmap = cm)","266ebcda":"# Fighting on 1987\n\ncm = sns.light_palette(\"green\", as_cmap=True)\ndata_5 = data1[(data1['Year'] == 1987) & (data1['Genre'] == 'Fighting')].sort_values(by='Global_Sales', ascending=False)\ndata_5.style.background_gradient(cmap = cm)","9e9e43e2":"# Racing on 1992\n\ncm = sns.light_palette(\"green\", as_cmap=True)\ndata_6 = data1[(data1['Year'] == 1992) & (data1['Genre'] == 'Racing')].sort_values(by='Global_Sales', ascending=False)\ndata_6.style.background_gradient(cmap = cm)","8c4038a0":"# Platform on 1992\n\ncm = sns.light_palette(\"green\", as_cmap=True)\ndata_ = data1[(data1['Year'] == 1992) & (data1['Genre'] == 'Platform')].sort_values(by='Global_Sales', ascending=False)[:3]\ndata_.style.background_gradient(cmap = cm)","42ce6d9f":"# Adventure on 1987\n\ncm = sns.light_palette(\"green\", as_cmap=True)\ndata_ = data1[(data1['Year'] == 1987) & (data1['Genre'] == 'Adventure')].sort_values(by='Global_Sales', ascending=False)\ndata_.style.background_gradient(cmap = cm)","a4c01a03":"# Role-Playing on 1990\n\ncm = sns.light_palette(\"green\", as_cmap=True)\ndata_ = data1[(data1['Year'] == 1990) & (data1['Genre'] == 'Role-Playing')].sort_values(by='Global_Sales', ascending=False)\ndata_.style.background_gradient(cmap = cm)","1fddb614":"# Strategy on 1999\n\ncm = sns.light_palette(\"green\", as_cmap=True)\ndata_ = data1[(data1['Year'] == 1999) & (data1['Genre'] == 'Strategy')].sort_values(by='Global_Sales', ascending=False)[:3]\ndata_.style.background_gradient(cmap = cm)","a89ef00d":"data_rank = data1.sort_values(by='Global_Sales', ascending=False)[:100]\ndata_rank.head()","c2e41ea1":"fig = make_subplots(rows=1, \n                    cols=2, \n                    specs=[[{'type':'pie','colspan':2},None]])\n\n# specs=[[{\"type\": \"pie\"},{\"type\": \"pie\"},{\"type\": \"pie\"}],\n#        [{\"type\": \"pie\"},{\"type\": \"pie\"},{\"type\": \"pie\"}],\n#        [{\"type\": \"pie\"},{\"type\": \"bar\",'colspan':2},None]]\n\n\ncustom_aggregation = {}\ncustom_aggregation[\"Global_Sales\"] = \"mean\"\ndata2 = data_rank.groupby(\"Publisher\").agg(custom_aggregation)\ndata2.columns = [\"Global Sales\"]\ndata2[\"Global Sales\"] = data2[\"Global Sales\"]*1000000\ndata2['Publisher'] = data2.index\n\nlabels = data2['Publisher'].tolist()\nvalues = data2['Global Sales'].tolist()\n\nfig.add_trace(go.Pie(\n                    labels=labels,\n                    values=values, \n                    name=''),\n                    1,1)\n\nfig.update_traces(textposition='inside')\nfig.update_layout(uniformtext_minsize=12, uniformtext_mode='hide')\nfig['layout'].update(height=500, \n                     width=800, \n                     title='All Time Top 100 Publisher',\n                    legend_title=\"Publisher\")\nfig.show()","d3f53d35":"fig = make_subplots(rows=1, \n                    cols=2, \n                    specs=[[{'type':'pie','colspan':2},None]])\n\ncustom_aggregation = {}\ncustom_aggregation[\"Global_Sales\"] = \"mean\"\ndata2 = data_rank.groupby(\"Genre\").agg(custom_aggregation)\ndata2.columns = [\"Global Sales\"]\ndata2[\"Global Sales\"] = data2[\"Global Sales\"]*1000000\ndata2['Genre'] = data2.index\n\nlabels = data2['Genre'].tolist()\nvalues = data2['Global Sales'].tolist()\n\nfig.add_trace(go.Pie(\n                    labels=labels,\n                    values=values, \n                    name=''),\n                    1,1)\n\nfig.update_traces(textposition='inside')\nfig.update_layout(uniformtext_minsize=12, uniformtext_mode='hide')\nfig['layout'].update(height=500, \n                     width=800, \n                     title='All Time Top 100 Genre',\n                    legend_title=\"Genre\")\nfig.show()","17b342fd":"fig = make_subplots(rows=1, \n                    cols=2, \n                    specs=[[{'type':'pie','colspan':2},None]])\n\ncustom_aggregation = {}\ncustom_aggregation[\"Global_Sales\"] = \"mean\"\ndata2 = data_rank.groupby(\"Platform\").agg(custom_aggregation)\ndata2.columns = [\"Global Sales\"]\ndata2[\"Global Sales\"] = data2[\"Global Sales\"]*1000000\ndata2['Platform'] = data2.index\n\nlabels = data2['Platform'].tolist()\nvalues = data2['Global Sales'].tolist()\n\nfig.add_trace(go.Pie(\n                    labels=labels,\n                    values=values, \n                    name=''),\n                    1,1)\n\nfig.update_traces(textposition='inside')\nfig.update_layout(uniformtext_minsize=12, uniformtext_mode='hide')\nfig['layout'].update(height=500, \n                     width=800, \n                     title='All Time Top 100 Platform',\n                    legend_title=\"Platform\")\nfig.show()","6440a159":"data_rank = data_rank.sort_values(by='Global_Sales', ascending=False)[:10]\n\nfig = px.bar(data_rank, x='Name', y=\"Global_Sales\", color=\"Name\")\nfig['layout'].update(height=500, \n                     width=800, \n                     title='All Time Top 10 Games',\n                     xaxis_title=\"Game\",\n                    yaxis_title=\"Sales\",\n                    legend_title=\"Game\")\nfig.show()","472cde92":"Hello \ud83d\ude4c, welcome to my notebook. In this notebook we will try to learn Complete Exploratory Data Analysis (EDA) on Video Game Sales. Also making time series visualization. Feel free if you have any question or suggestion! Thank you!","25e5187e":"Conclusion:\n- Every year have its 'booming' genre, which we already find out\n- For all time best Publisher are:\n\n    1. Nintendo: 15,2%\n    2. Take-Two Interactive: 12,3%\n    3. Microsoft Game Studio: 10,2%\n    \n    \n- For all time best Genre are:\n\n    1. Sports: 17,8%\n    2. Puzzle: 10,8%\n    3. Platform: 9,53%\n    \n    \n- For all time best Platform are:\n\n    1. NES: 10,7%\n    2. Wii: 10,1%\n    3. GB: 9,84%\n    \n\n- For all time best Games are:\n\n    1. Wii Sports: 82,74 Million in Sales\n    2. Super Mario Bros.: 40,24 Million in Sales\n    3. Mario Kart Wii: 35,82 Million in Sales","3b8ef78f":"# Who's All Time Best?","28b7c79f":"# Year on Year Sales","ad0801a1":"- For answering the qustion, Does Nintendo is All Time Best VG Publisher? Yes, it does\n\nFinish, dont forget to upvote! Thank you:)","e6f4a0e0":"- For region sales, we can see that Platfrom Genre was the best in sales, followed by Shooter and Role Playing","b112c48c":"# Genre Countplot and Top Ranking","e0a411e2":"# Platform & Genre Sales Contribution in Each Region","e0a74abd":"- We can see that Nintendo was in first place in top ranking, but 4th place by size. Can we assume that Nintendo offering Quality over Quantity?","3f6f6059":"# Game Count by Year","01340743":"# Data Importing & Preview","d0ac0ce1":"Feature Defenition\n\n- Rank - Ranking of overall sales\n- Name - The games name\n- Platform - Platform of the games release (i.e. PC,PS4, etc.)\n- Year - Year of the game's release\n- Genre - Genre of the game\n- Publisher - Publisher of the game\n- NA_Sales - Sales in North America (in millions)\n- EU_Sales - Sales in Europe (in millions)\n- JP_Sales - Sales in Japan (in millions)\n- Other_Sales - Sales in the rest of the world (in millions)\n- Global_Sales - Total worldwide sales.\n\nTask: Exploraroty Data Analysis (EDA)","9b9e98eb":"Duck Hunt Preview:\n- Duck Hunt is responsible for a lot of the early success of the NES, but then Mario took over and they ran with that. It\u2019s interesting to think how, despite its success, Duck Hunt never got a sequel.\n- It seems weird they would never put out another version since there were limited options for games you could use with the Zapper.\n- All in all, Duck Hunt remains one of the best-selling video games of all time, coming in at number three with 28.31 million units sold. And this is just one game that was released in 1984.\n\n(https:\/\/medium.com\/everything-80s\/the-story-of-duck-hunt-the-original-backbone-of-the-nes-6d4b18c0ff89)","695cc64e":"- Shape of the data is 16598 rows, and 11 features (before dropping missing values)\n- Year and Publisher are feature which have missing values. I simply dropped all missing values because later we will make time series which need Year and Publisher\n- Then convert Year to Int (it was a float before which have .0 at end of the item). And also convert it again to date time format (year)","2556f4cd":"- We can see that every game gender have specific peak, in it was interseting to find out whic game was populer in that particular year!","157cbebd":"# Platform Countplot and Top Ranking","7747bd10":"- 2009 was the year which have most game count, followed by 2008 and 2010","c0989914":"# Region Sales Based on Genre","77023910":"# Task & Feature Defenition","18d8afb9":"# Publisher Countplot and Top Ranking"}}