{"cell_type":{"e55bfd8f":"code","c009bc26":"code","4525a9af":"code","58328df2":"code","01d07a9e":"code","029bc9a8":"code","6d2f11a7":"code","bc748171":"code","0b088577":"code","60459c5c":"code","6b90dd99":"code","933150b0":"code","fc13039a":"code","fdbe6196":"code","cd3501e3":"code","e07ef84e":"code","2197449e":"code","dcc194cd":"code","a4d0dd50":"code","8ef0dc8f":"code","9afefda2":"markdown","80297555":"markdown","935f63e4":"markdown","427130e6":"markdown","969845fe":"markdown","2a9e862b":"markdown","fa11003d":"markdown","6da08ca6":"markdown","9c241137":"markdown","84e8960a":"markdown","51d31464":"markdown","828e9e36":"markdown","a37cb844":"markdown","1bb6be23":"markdown","1d2106a8":"markdown"},"source":{"e55bfd8f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt \n\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LinearRegression\n\nfrom sklearn import preprocessing\nfrom sklearn import metrics\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\ntrain_df = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('..\/input\/titanic\/test.csv')","c009bc26":"train_df.info()","4525a9af":"test_df.info()","58328df2":"train_df['Embarked'].unique()","01d07a9e":"test_df['Embarked'].unique()","029bc9a8":"#--------Training--------\ncut_value = 5\n\n#Entire size of the family per person\ntrain_df['FamilySize'] = train_df['SibSp'] + train_df['Parch']\n#If person is traveling alone or not\ntrain_df['HasCompany'] = train_df['FamilySize']\nfor i in range(0, len(train_df['FamilySize'])):\n    if(train_df['FamilySize'].iloc[i] == 0):\n        train_df['HasCompany'].loc[i] = 0\n    else:\n        train_df['HasCompany'].loc[i] = 1\n        \n#Filling out the missing age values\ntrain_df['Age'] = train_df['Age'].fillna(train_df['Age'].median())\n#Creating ranges for age and fare\ntrain_df['AgeRange'] = pd.cut(train_df['Age'], cut_value)\ntrain_df['FareRange'] = pd.cut(train_df['Fare'], cut_value)\n\n#Extracting titles from Names(train)\ntittleList = []\n\nfor name in train_df['Name']:\n    check = 0\n    if(name.find('.') >= 0):\n        nameList = []\n        for word in name.split():\n            nameList.append(word)\n        for title in nameList:\n            if(title.find('.') >= 0 and check == 0):\n                tittleList.append(title)\n                check = 1\n    else:  \n        tittleList.append(\"No Title\")\n\nfor x in range(0, len(tittleList)):\n    if(tittleList[x] == 'Miss.' or tittleList[x] == 'mlle.'):\n        tittleList[x] = 'Ms.'\n    if(tittleList[x] == 'Mme.'):\n        tittleList[x] = 'Mrs.'\ntrain_df['Title'] = tittleList\n","6d2f11a7":"train_df.head()","bc748171":"#--------Testing--------\n#Entire size of the family per person\ntest_df['FamilySize'] = test_df['SibSp'] + test_df['Parch']\n#If person is traveling alone or not\ntest_df['HasCompany'] = test_df['FamilySize']\nfor i in range(0, len(test_df['FamilySize'])):\n    if(test_df['FamilySize'].iloc[i] == 0):\n        test_df['HasCompany'].loc[i] = 0\n    else:\n        test_df['HasCompany'].loc[i] = 1\n        \n#Filling out the missing age values\ntest_df['Age'] = test_df['Age'].fillna(test_df['Age'].median())\ntest_df['Fare'] = test_df['Fare'].fillna(test_df['Fare'].median())\n#Creating ranges for age and fare\ntest_df['AgeRange'] = pd.cut(test_df['Age'], cut_value)\ntest_df['FareRange'] = pd.cut(test_df['Fare'], cut_value)\n\n#Extracting titles from Names(train)\ntittleList = []\n\nfor name in test_df['Name']:\n    check = 0\n    if(name.find('.') >= 0):\n        nameList = []\n        for word in name.split():\n            nameList.append(word)\n        for title in nameList:\n            if(title.find('.') >= 0 and check == 0):\n                tittleList.append(title)\n                check = 1\n    else:  \n        tittleList.append(\"No Title\")\n\nfor x in range(0, len(tittleList)):\n    if(tittleList[x] == 'Miss.' or tittleList[x] == 'mlle.'):\n        tittleList[x] = 'Ms.'\n    if(tittleList[x] == 'Mme.'):\n        tittleList[x] = 'Mrs.'\ntest_df['Title'] = tittleList\n","0b088577":"train_PassengerId = train_df['PassengerId']\n\ntrain_df = train_df.drop(['Name', 'Ticket', 'Cabin', \n                          'SibSp', 'Parch'], axis = 1)\ntrain_df = train_df.dropna()","60459c5c":"X = train_df.drop(['Survived', 'PassengerId', 'Age', \n                   'Fare', 'FamilySize'], axis = 1).copy()\ny = train_df['Survived']\n\nle = preprocessing.LabelEncoder()\n\nle.fit(X['Sex'])\nX['Sex'] = le.transform(X['Sex'])\n\nle.fit(X['Embarked'])\nX['Embarked'] = le.transform(X['Embarked'])\n\nle.fit(X['Title'])\nX['Title'] = le.transform(X['Title'])\n\nle.fit(X['AgeRange'])\nX['AgeRange'] = le.transform(X['AgeRange'])\n\nle.fit(X['FareRange'])\nX['FareRange'] = le.transform(X['FareRange'])\nX\n","6b90dd99":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=101)\nknn = KNeighborsClassifier(n_neighbors = 16)\nknn.fit(X_train, y_train)\npred_train_knn = knn.predict(X_test)\n\nscore_knn = metrics.accuracy_score(y_test, pred_train_knn)","933150b0":"success_rate = []\n\nfor i in range(1, 60):\n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train, y_train)\n    pred_i = knn.predict(X_test)\n    \n    success_rate.append(1 - np.mean(pred_i != y_test))\n    \n   \nplt.figure(figsize=(10, 6))\n\nplt.plot(range(1, 60), success_rate, color='blue', linestyle='--',\n         markersize=10, markerfacecolor='red', marker='o')\nplt.title('K versus Error rate')\nplt.xlabel('K')\nplt.ylabel('Error rate')\n\nprint(max(success_rate))","fc13039a":"#-----knn testing------\ntest_df_PassengerId = test_df['PassengerId']\ntest_df_knn = test_df.drop(['Name', 'Ticket', 'Cabin', \n                            'SibSp', 'Parch', 'PassengerId', \n                            'Age', 'Fare', 'FamilySize'], axis = 1).copy()\n\nle.fit(test_df_knn['Sex'])\ntest_df_knn['Sex'] = le.transform(test_df_knn['Sex'])\n\nle.fit(test_df_knn['Embarked'])\ntest_df_knn['Embarked'] = le.transform(test_df_knn['Embarked'])\n\nle.fit(test_df_knn['Title'])\ntest_df_knn['Title'] = le.transform(test_df_knn['Title'])\n\nle.fit(test_df_knn['AgeRange'])\ntest_df_knn['AgeRange'] = le.transform(test_df_knn['AgeRange'])\n\nle.fit(test_df_knn['FareRange'])\ntest_df_knn['FareRange'] = le.transform(test_df_knn['FareRange'])\n\npred_test_knn = knn.predict(test_df_knn).copy()\n\nsubmission_knn = pd.DataFrame({\n        'PassengerId': test_df_PassengerId,\n        'Survived': pred_test_knn\n    })\n","fdbe6196":"#train lin\nX = train_df.drop(['PassengerId', 'Survived', 'FareRange', \n                   'AgeRange', 'Pclass', 'HasCompany', \n                   'Embarked', 'Title'], axis = 1)\n\nle = preprocessing.LabelEncoder()\n\nle.fit(X['Sex'])\nX['Sex'] = le.transform(X['Sex'])\n\nX","cd3501e3":"\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=101)\n\nlin_regressor = LinearRegression()  # create object for the class\nlin_regressor.fit(X_train, y_train)  # perform linear regression\npred_train_lin = np.round(lin_regressor.predict(X_test))\n\nscore_lin = metrics.accuracy_score(y_test, pred_train_lin)\n\n#X\n","e07ef84e":"#test lin\ntest_df_lin = test_df.drop(['Name', 'Ticket', 'Cabin', \n                            'SibSp', 'Parch', 'PassengerId', \n                            'FareRange', 'AgeRange', \n                            'Pclass', 'HasCompany', \n                            'Embarked', 'Title'], axis = 1).copy()\n\nle = preprocessing.LabelEncoder()\n\nle.fit(test_df_lin['Sex'])\ntest_df_lin['Sex'] = le.transform(test_df_lin['Sex'])\n\npred_test_lin = np.round(lin_regressor.predict(test_df_lin)).astype(int)\n\n\nsubmission_lin = pd.DataFrame({\n        'PassengerId': test_df_PassengerId,\n        'Survived': pred_test_lin\n    })\n","2197449e":"submission_lin.info()","dcc194cd":"submission_knn.info()","a4d0dd50":"print('Training: ')\nprint('Knn: ' + str(score_knn))\nprint('Lin: ' + str(score_lin))\nprint('Similar: ' + str(metrics.accuracy_score(pred_train_knn, pred_train_lin)))\nprint('--------------------------------')\nprint('Testing: ')\nprint('Knn: ' + str(0.63397)) # Obtained from submission\nprint('Lin: ' + str(0.76794)) # Obtained from submission\nprint('Similar: ' + str(metrics.accuracy_score(pred_test_knn, pred_test_lin)))\n","8ef0dc8f":"#submission_knn.to_csv('.\/submission.csv', index=False)\n#submission_lin.to_csv('.\/submission.csv', index=False)","9afefda2":"Using preprocessing.LabelEncoder() to automatically assign int values to strings. ","80297555":"# Observing the accuracy and similarity","935f63e4":"Finishing the linear regression submission data and saving it.","427130e6":"Finishing the knn submission data and saving it.","969845fe":"# Cleaning up the data\nThings that were done:\n* Combined train_df['SibSp'] and train_df['Parch'] to create train_df['FamilySize']\n* Used train_df['FamilySize'] to determine if a person was traveling alone or not\n* Filled empty age values\n* Cut age and fare into seperate ranges using pd.cut()\n* Extracted titles from names","2a9e862b":"Creating a graph of the accuracy using 1 to 60 neighbors.","fa11003d":"Verifying that dataframes were created properly.","6da08ca6":"I thought this was interesting data:\n* The training prediction seem to be quite accurate and match each other quite a lot.\n* But the testing data has a significantly lower accuracy and the results are too different from each other.\nNeed to keep in mind that training accuracy might need to be much higher for continuous success.","9c241137":"Training data for Linear regression slightly differs from the data for knn.","84e8960a":"# Quick look at the data\nI've checked other things while preparing the data, but this seemed like the minimum that I should show","51d31464":"Good to point out that there is a difference between train and test data:\n* train_df['Embarked'] does have nan values while test_df['Embarked'] does not\n* test_df['Fare'] does have a nan value while train_df['Fare'] does not","828e9e36":"Will be dropping unnecesary columns(for knn):\n* Name\n* Ticket\n* Cabin\n* SibSp\n* Parch\n* Survived\n* PassengerId\n* Age\n* Fare\n* FamilySize","a37cb844":"# Finishing touches on the data + training and testing","1bb6be23":"This is for testing data, almost all of it is the same","1d2106a8":"# Loading in libraries and dataframes"}}