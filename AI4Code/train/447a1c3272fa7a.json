{"cell_type":{"4600741b":"code","a45a519f":"code","12fe36f8":"code","aa3a9231":"code","61e10e40":"code","106185f8":"code","7ecf6a13":"code","d4cdf8cc":"code","56521dac":"code","b58f967f":"code","5b95d257":"code","779563b1":"code","280980f7":"code","90cada39":"code","71c3e632":"code","14f5255e":"code","4681132a":"code","0e3eb61e":"code","89a60394":"code","0d229ff5":"code","15db9b4c":"code","1abab13e":"code","7c0edc49":"code","4f79f77f":"code","abe74368":"code","caa23735":"code","169495f7":"code","7bd2b660":"code","2ed487f8":"code","ec0e49de":"code","db7081c5":"code","33ec5ad7":"code","687ab938":"code","7cfc9be3":"code","ec5fff5f":"code","74b6325b":"code","5756950a":"code","355b760e":"code","54453d10":"code","0fd9acbb":"code","3ae4c997":"code","d6a57488":"code","03ee2496":"code","21e1aa1f":"code","2cabc5b4":"code","3106dc2f":"code","68d806dc":"code","8df4cac6":"code","d59d0c2d":"code","f4f0d4b5":"code","c25c509d":"code","fe4f7f98":"code","4d2ebee0":"code","e84a1e6e":"code","b34d26df":"code","65bbda9b":"code","57520f20":"code","2efc96c0":"code","8a967f6d":"code","7b98dcbc":"code","37265891":"code","52219f96":"code","a3a72124":"code","b2e1c0e5":"code","96888dce":"code","7c2ba2e4":"code","0332db70":"code","eb6efd13":"code","c16fcfef":"code","82926a1b":"code","d82f67c9":"code","e165397e":"code","69ac282a":"code","f933a61a":"code","509c021e":"code","7cbda5cd":"code","3f709a28":"code","20b85d45":"code","9d983bd3":"code","96f693da":"code","3e442d02":"code","36d6701c":"code","2b8ddfef":"code","d1b3f686":"code","dc2e0920":"code","349988ac":"code","96397286":"code","63b82cbe":"code","3260ff50":"code","2b0e5333":"code","5896d9e0":"code","958b88fc":"code","2af17cbd":"code","0917c36b":"code","ec4a0829":"code","927e6c37":"code","9cce5d8e":"code","8a296480":"code","64b935ce":"code","d2283cde":"code","2075e89d":"code","80f3a08a":"code","67a64222":"code","c0a91a06":"code","aba23cef":"code","b8a22baa":"code","d374ab32":"code","4e1c1c92":"code","9e985471":"code","2551eab7":"code","079aa9f6":"code","9d908d61":"code","11374c54":"code","88843439":"markdown","ecd4cf28":"markdown","e9baaa17":"markdown","aeb40b15":"markdown","c95f0b67":"markdown","8d4ee67a":"markdown","91785489":"markdown","afe9c001":"markdown","a6150ef0":"markdown","a7ba320b":"markdown","60bf1ebc":"markdown","d0fd1651":"markdown","d5557a89":"markdown","d7b20423":"markdown","1b0459d9":"markdown","50149ba1":"markdown","811a68c4":"markdown","01996286":"markdown","14548ccb":"markdown","d5029cf9":"markdown","5996cece":"markdown","4ee68b4e":"markdown","70e9f8f2":"markdown","f4db620d":"markdown","d2d19535":"markdown","d7ddf27f":"markdown","276cff06":"markdown","47d40a27":"markdown","a191b52c":"markdown","4fef98d2":"markdown","10d9fdb0":"markdown","db510e9c":"markdown","78351842":"markdown","da961532":"markdown","9987b31c":"markdown","ae4cb691":"markdown","afe174b2":"markdown","c40ce864":"markdown","2942a320":"markdown","5c9dff2f":"markdown","9ca07ec5":"markdown","a1626246":"markdown","d18dd111":"markdown","3e70faec":"markdown","3067ac7e":"markdown","12eb0f66":"markdown","98ec2557":"markdown","eab93b57":"markdown","75628c27":"markdown","5a6dc7c1":"markdown"},"source":{"4600741b":"# imports\n! pip install bar_chart_race\n! pip install chart_studio\nimport pandas as pd\nimport numpy as np\nimport os\nimport time\nimport matplotlib.pyplot as plt\nimport matplotlib.style as style\nfrom matplotlib.colors import ListedColormap\nfrom matplotlib import cm\nimport seaborn as sns\nfrom plotly.offline import init_notebook_mode, iplot\nfrom wordcloud import WordCloud,STOPWORDS\nfrom PIL import Image\nimport bar_chart_race as bcr\ninit_notebook_mode(connected=True)\n%matplotlib inline\n\n#Plotly Libraris\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.colors import n_colors\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import init_notebook_mode, iplot\nfrom plotly import tools\nimport chart_studio\nimport chart_studio.plotly as py\nimport chart_studio.tools as tls\n\nfrom sklearn.preprocessing import StandardScaler , LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom  sklearn import linear_model , metrics\nfrom  sklearn.metrics import accuracy_score, confusion_matrix , recall_score , precision_score , f1_score ,classification_report,plot_confusion_matrix\n\n\n\n#options\nsns.set(style='darkgrid')\n#pd.set_option('display.max_rows', None)\n#pd.set_option('display.max_colwidth', None)\n# Notbook option\nfrom IPython.core.display import display, HTML\ndisplay(HTML(\"<style>.container { width:100% !important; }<\/style>\"))\n\n# chart_studio options\nusername =\"hanyelshafey\"\napi_key = \"\"\ntls.set_credentials_file(username,api_key)\n","a45a519f":"df_vg=pd.read_csv('\/kaggle\/input\/videogamesales\/vgsales.csv')","12fe36f8":"df_vg.head(30)","aa3a9231":"df_vg.shape","61e10e40":"df_vg.sample(25)","106185f8":"df_vg['id']=df_vg.index","7ecf6a13":"df_vg.info()","d4cdf8cc":"df_vg.shape","56521dac":"df_vg.describe()","b58f967f":"df_vg['Global_Sales'].describe()","5b95d257":"df_vg.loc[df_vg['Year']==2020.0]","779563b1":"df_vg.loc[df_vg['Rank']==14779]","280980f7":"for ind in df_vg.index :    \n    if df_vg.NA_Sales[ind] + df_vg.EU_Sales[ind] + df_vg.JP_Sales[ind] + df_vg.Other_Sales[ind] != df_vg.Global_Sales[ind] :\n        print (ind,df_vg.NA_Sales[ind] + df_vg.EU_Sales[ind] + df_vg.JP_Sales[ind] + df_vg.Other_Sales[ind],df_vg.Global_Sales[ind])","90cada39":"df_vg.loc[df_vg['id']==37]","71c3e632":"df_vg.isna().sum()","14f5255e":"df_vg.loc[df_vg['Year'].isna() ]","4681132a":"df_vg.loc[df_vg['Publisher'].isna() ]","0e3eb61e":"df_vg.Name.value_counts()","89a60394":"df_vg.Platform.value_counts()","0d229ff5":"df_vg.Genre.value_counts()","15db9b4c":"df_vg.Publisher.value_counts()","1abab13e":"df_vg.Year.min() ,df_vg.Year.max()","7c0edc49":"df_vg.duplicated().sum()","4f79f77f":"df_vg=df_vg.dropna(axis=0)","abe74368":"df_vg.isna().sum()","caa23735":"df_vg.Year.dtype","169495f7":"df_vg['Year']=pd.to_datetime(df_vg['Year'],format='%Y%m%d',  errors='ignore')","7bd2b660":"df_vg.Year","2ed487f8":"df_vg['Global_Sales']=df_vg.NA_Sales+ df_vg.EU_Sales + df_vg.JP_Sales + df_vg.Other_Sales","ec0e49de":"for ind in df_vg.index :    \n    if df_vg.NA_Sales[ind] + df_vg.EU_Sales[ind] + df_vg.JP_Sales[ind] + df_vg.Other_Sales[ind] != df_vg.Global_Sales[ind] :\n        print (ind,df_vg.NA_Sales[ind] + df_vg.EU_Sales[ind] + df_vg.JP_Sales[ind] + df_vg.Other_Sales[ind],df_vg.Global_Sales[ind])","db7081c5":"df_vg.loc[df_vg['id']==37 ]","33ec5ad7":"df_vg.columns","687ab938":"df_vg.rename(columns = {'NA_Sales':'NorthAmerica_Sales','EU_Sales':'Europe_Sales','JP_Sales':'Japan_Sales'}, inplace = True)","7cfc9be3":"d=df_vg.head(10)\ntable = ff.create_table(d)\nfor i in range(len(table.layout.annotations)):\n    table.layout.annotations[i].font.size = 9\niplot(table)\npy.plot(table,filename='Data Frame after cleaning',auto_open=True)","ec5fff5f":"df_vg.shape","74b6325b":"df_vg.to_csv('Videogame_sales.csv',encoding='utf-8',index=False)","5756950a":"df_Video_Games=pd.read_csv('Videogame_sales.csv')","355b760e":"Video_Games=df_Video_Games.copy()\nVideo_Games.columns","54453d10":"Video_Games.head()","0fd9acbb":"interest_V_G=pd.read_csv('\/kaggle\/input\/video-games\/multiTimeline.csv')\nfig = go.Figure((go.Scatter(x=interest_V_G['Year'],y=interest_V_G['Interest'], name ='The world interest level in video games over time')))\n#py.plot(fig,filename='The world interest level in video games over time',auto_open=True)\nfig.write_html(r\"G:\\python\\data science\\doaa\\New folder\\Video_Games\\world interest.html\")\nfig","3ae4c997":"data = {'Region': ['NorthAmerica_Sales', 'Europe_Sales', 'Japan_Sales'], 'Total_sales': [Video_Games['NorthAmerica_Sales'].sum(axis = 0, skipna = True), Video_Games['Europe_Sales'].sum(axis = 0, skipna = True),\n                                                                                Video_Games['Japan_Sales'].sum(axis = 0, skipna = True)]}\nRegion_sales_sum= pd.DataFrame(data)\nRegion_sales_sum","d6a57488":"plt.figure(figsize=(10,5))\nsns.barplot( x=\"Region\",y=\"Total_sales\",data=Region_sales_sum, palette='viridis')\n","03ee2496":"Video_Games.Name.value_counts","21e1aa1f":"rank_500=Video_Games.head(500)","2cabc5b4":"rank_500.columns","3106dc2f":"sns.catplot(x='Platform',y='NorthAmerica_Sales',kind='boxen',data=rank_500.sort_values('Global_Sales'))","68d806dc":"G_S_Year=Video_Games.groupby(['Year'])[['NorthAmerica_Sales', 'Europe_Sales', 'Japan_Sales','Other_Sales',\n       'Global_Sales']].sum()\nG_S_Year['Year']=G_S_Year.index\nG_S_Year.head()","8df4cac6":"region=['NorthAmerica_Sales', 'Europe_Sales', 'Japan_Sales', 'Other_Sales']\nfor i in region :\n    fig = px.funnel(G_S_Year, y=i,x='Year', color='Global_Sales',title=f'{i} as part of Global Sales by Year')\n    #py.plot(fig,filename=f'{i} as part of Global Sales by Year',auto_open=True,)\n    fig.show()\n","d59d0c2d":"G_S_Genre=Video_Games.groupby(['Genre'])[['NorthAmerica_Sales', 'Europe_Sales', 'Japan_Sales','Other_Sales',\n       'Global_Sales']].apply(sum)\nG_S_Genre['Genre']=G_S_Genre.index\nG_S_Genre","f4f0d4b5":"region=['NorthAmerica_Sales', 'Europe_Sales', 'Japan_Sales', 'Other_Sales']\nfor i in region :\n    fig = px.funnel(G_S_Genre, x=i, y='Genre', color='Global_Sales',title=f'{i} as part of Global Sales by Genre' )\n    #py.plot(fig,filename=f'{i} as part of Global Sales by Genre',auto_open=True,)\n    fig.show()","c25c509d":"Video_Games","fe4f7f98":"Video_Games.head()","4d2ebee0":"df = px.data.iris()\nfig = px.scatter_3d(Video_Games, x='Platform', y='Year', z='Global_Sales',\n             color='Year' )\n\nfig.show()","e84a1e6e":"df_genre=Video_Games.groupby(by=['Genre'])[['NorthAmerica_Sales', 'Europe_Sales', 'Japan_Sales', 'Other_Sales',\n       'Global_Sales']].sum()\ndf_genre=df_genre.reset_index()\ndf_genre_sales=df_genre.sort_values(by=['Global_Sales'],ascending=False)\ngenre_NA=df_genre.sort_values(by=['NorthAmerica_Sales'],ascending=False)\ngenre_EU=df_genre.sort_values(by=['Europe_Sales'],ascending=False)\ngenre_JP=df_genre.sort_values(by=['Japan_Sales'],ascending=False)\ngenre_Other=df_genre.sort_values(by=['Other_Sales'],ascending=False)\ndf_genre","b34d26df":"fig = go.Figure()\n\nfig.add_trace(go.Bar(x=df_genre_sales['Genre'],y=genre_NA['NorthAmerica_Sales'],name ='The most common Genre in NorthAmerica'))\nfig.add_trace(go.Bar(x=df_genre_sales['Genre'],y=genre_EU['Europe_Sales'],name ='The most common Genre in Europe'))\nfig.add_trace(go.Bar(x=df_genre_sales['Genre'],y=genre_JP['Japan_Sales'],name ='The most common Genre in japan'))\nfig.add_trace(go.Bar(x=df_genre_sales['Genre'],y=genre_Other['Other_Sales'],name ='The most common Genre in resst of world'))\nfig.add_trace(go.Bar(x=df_genre_sales['Genre'],y=df_genre_sales['Global_Sales'],name ='The most common Genre globally'))\n\nfig.update_layout(updatemenus= [dict(type = 'buttons',direction = 'right',active = 0,x = 1,y = 1.2,\n                                     \n                     buttons = list([\n                         dict(label = 'North America sales',method = 'update',args = [{'visible': [True,False,False,False,False,False,False,False]}]),\n                         dict(label = 'Europe sales',method = 'update',args = [{'visible': [False,True,False,False,False,False,False,False]}]),\n                         dict(label = 'Japan  sales',method = 'update',args = [{'visible': [False,False,True,False,False,False,False,False]}]),\n                         dict(label = 'Other sales',method = 'update',args = [{'visible': [False,False,False,True,False,False,False,False]}]),\n                         dict(label = 'Global Sales',method = 'update',args = [{'visible': [True,True,True,True,True,True,True,True]}])\n                                   ])\n                                    )\n                                 ])\nfig.update_layout(title_text = 'Most common Genre by Sales22',barmode = 'stack')\n","65bbda9b":"df_genre=Video_Games.groupby(by=['Genre'])['Global_Sales'].sum()\ndf_genre=df_genre.reset_index()\ndf_genre=df_genre.sort_values(by=['Global_Sales'],ascending=False)","57520f20":"fig1,axes1=plt.subplots(figsize=(15,8))\nsns.barplot(x='Genre',y='Global_Sales',data=df_genre,ax=axes1,estimator=np.sum,errcolor='r',capsize=0.2,errwidth=0.75,palette='Spectral')\naxes1.set_xlabel('Genre')\naxes1.set_ylabel('Global_Sales')\naxes1.set_title('Global_Sales VS Genre')\nplt.show()\n","2efc96c0":"Platforms_value=Video_Games.Platform.value_counts()\nother=pd.Series({'Others':Platforms_value[12:].sum()})\nPlatforms_value1=Platforms_value[:12].append(other)","8a967f6d":"Platforms_value1.index","7b98dcbc":"plt.pie(Platforms_value1,shadow=True\n       ,labels=Platforms_value1.index,\n        explode=(.1,0,0,0,0,0,0,0,0,0,0,0,0),\n       autopct='%.2f%%' , startangle = 0)\nplt.title('Percentage ofPlatforms')\nplt.style.use('ggplot')\nplt.axis('equal')\nplt.title('share of companies')\nplt.legend(loc=3,bbox_to_anchor=(1,0.4))\n\n","37265891":"Video_Games.head()","52219f96":"Video_Games.head()","a3a72124":"sns.set_style('whitegrid')\nsns.relplot(y='Genre',x='Year',data=Video_Games,aspect=2.5)","b2e1c0e5":"plt.figure(figsize=(15, 12))\nplt.yticks(rotation=45)\nsns.countplot(y=\"Genre\", data=Video_Games , order = Video_Games['Genre'].value_counts().index, palette=\"rocket\")","96888dce":"Video_Games['Platform'].value_counts()","7c2ba2e4":"\"\"\"strip\", \"swarm\", \"box\", \"violin\",\n    \"boxen\", \"point\", \"bar\", or \"count\"\"\"","0332db70":"for i in range (1000,290,100):\n    print (i)\n    x=0\nsns.catplot(x='Platform', y='Global_Sales',kind='bar',data=Video_Games,estimator=np.sum,palette='Spectral',aspect =3.5,height=20)\n","eb6efd13":"sns.relplot(x='Platform',y='Global_Sales',data = Video_Games ,aspect=3.5)","c16fcfef":"sns.relplot(x='Platform',y='Global_Sales',data= Video_Games,kind='line',hue=\"Genre\",estimator=None,aspect=3.5,height=8)","82926a1b":"Video_Games.columns","d82f67c9":"G_S_Year=Video_Games.groupby(by=['Year'])[['NorthAmerica_Sales', 'Europe_Sales', 'Japan_Sales', 'Other_Sales','Global_Sales']].sum()\nG_S_Year=G_S_Year.reset_index()\nS_Gl_Year=G_S_Year.sort_values(by=['Global_Sales'],ascending=False)\nS_NA_Y=G_S_Year.sort_values(by=['NorthAmerica_Sales'],ascending=False)\nS_EU_Y=G_S_Year.sort_values(by=['Europe_Sales'],ascending=False)\nS_JP_Y=G_S_Year.sort_values(by=['Japan_Sales'],ascending=False)\nS_other_Y=G_S_Year.sort_values(by=['Other_Sales'],ascending=False)\nG_S_Year","e165397e":"f = go.FigureWidget()\nf.add_scatter(x=G_S_Year['Year'],y=G_S_Year['NorthAmerica_Sales'],name='NorthAmerica_Sales')\nf.add_scatter(x=G_S_Year['Year'],y=G_S_Year['Europe_Sales'],name='Europe_Sales')\nf.add_scatter(x=G_S_Year['Year'],y=G_S_Year['Japan_Sales'],name='Japan_Sales')\nf.add_scatter(x=G_S_Year['Year'],y=G_S_Year['Other_Sales'],name='Other_Sales')\nf.layout.title = 'Regions sales as part of Global Sales by Year'\nf","69ac282a":"f.add_scatter(x=G_S_Year['Year'],y=G_S_Year['Global_Sales'],name='Global_Sales')\nf","f933a61a":"Video_Games.head()","509c021e":"Genre_Sales = Video_Games[['Genre', 'NorthAmerica_Sales', 'Europe_Sales', 'Japan_Sales', 'Other_Sales',]]\n# comp_genre\nhex_map = Genre_Sales.groupby(by=['Genre']).sum()\n# comp_map\nhex_map","7cbda5cd":"sns.color_palette(\"Set2\")\nfig1,axes1=plt.subplots(figsize=(20,8),)\nsns.heatmap(data=hex_map,vmin=100,vmax=630,annot=True,linewidth=0.3,cbar=True, fmt = '.1f', cmap=\"bone_r\")","3f709a28":"Video_Games.columns","20b85d45":"df1000=Video_Games.head(1000)","9d983bd3":"df1000.head()","96f693da":"df1000[\"normsales\"] = (df1000[\"Global_Sales\"] - np.min(df1000[\"Global_Sales\"]))\/(np.max(df1000[\"Global_Sales\"])-np.min(df1000[\"Global_Sales\"]))","3e442d02":"df1000.Rank=df1000.Rank.astype(\"str\")\ndf1000.Global_Sales=df1000.Global_Sales.astype(\"str\")\ntrace1 = go.Scatter3d(\n    y=df1000[\"Publisher\"],\n    x=df1000[\"Year\"],\n    z=df1000[\"normsales\"],\n    text=\"Name:\"+ df1000.Name +\",\"+\" Rank:\" + df1000.Rank + \" Global Sales: \" + df1000[\"Global_Sales\"] +\" millions\",\n    mode='markers',\n    marker=dict(\n        size=df1000['NorthAmerica_Sales'],\n        color = df1000['normsales'],\n        colorscale = \"Rainbow\",\n        colorbar = dict(title = 'Global Sales'),\n        line=dict(color='rgb(140, 140, 170)'),\n       \n    )\n)\n\ndata=[trace1]\n\nlayout=go.Layout(height=800, width=800, title='Top 1000 Video Games, Release Years, Publishers and Sales',\n            titlefont=dict(color='rgb(20, 24, 54)'),\n            scene = dict(xaxis=dict(title='Year',\n                                    titlefont=dict(color='rgb(20, 24, 54)')),\n                            yaxis=dict(title='Publisher',\n                                       titlefont=dict(color='rgb(20, 24, 54)')),\n                            zaxis=dict(title='Global Sales',\n                                       titlefont=dict(color='rgb(20, 24, 54)')),\n                            bgcolor = 'whitesmoke'\n                           ))\n \nfig=go.Figure(data=data, layout=layout)\npy.plot(fig,filename='Years,Global Sales and Publishers of Top 1000 Games',auto_open=True)\niplot(fig)","36d6701c":"wave_mask= np.array(Image.open(\"\/kaggle\/input\/controller\/controller1.png\"))\nstopwords = set(STOPWORDS)\nstopwords.update([\"II\", \"III\"])\nplt.subplots(figsize=(15,15))\nwordcloud = WordCloud(mask=wave_mask,background_color=\"lavenderblush\",colormap=\"hsv\" ,contour_width=2, contour_color=\"black\",\n                      width=950,stopwords=stopwords,\n                          height=950\n                         ).generate(\" \".join(Video_Games.Name))\n\nplt.imshow(wordcloud ,interpolation='bilinear')\nplt.axis('off')\nplt.savefig('graph.png')\n\nplt.show()","2b8ddfef":"Video_Games.drop(['id'], axis=1)","d1b3f686":"plt.figure(figsize=(13,10))\nsns.heatmap(Video_Games.drop(['id'], axis=1).corr(), cmap = \"bone_r\", annot=True, linewidth=3)","dc2e0920":"Video_Games.columns","349988ac":"# Using labelEncoder convert categorical data into numerical data\ncolumns=[ 'Platform',  'Genre', 'Publisher']\nnumber=LabelEncoder()\nfor i in columns:\n    Video_Games[f'{i}']=number.fit_transform(Video_Games[f'{i}'].astype('str'))","96397286":"Video_Games1=Video_Games.drop(['Rank',\"Name\", 'Year','id'],axis=1)\nVideo_Games3=Video_Games.drop(['NorthAmerica_Sales','Europe_Sales', 'Japan_Sales', 'Other_Sales','id'],axis=1)","63b82cbe":"Video_Games1","3260ff50":"columns=['Platform', 'Genre', 'Publisher', 'NorthAmerica_Sales','Europe_Sales']","2b0e5333":"labels=Video_Games3['Global_Sales'].values\nfeatures=Video_Games1[list(columns)].values\nx=features\ny=labels","5896d9e0":"y","958b88fc":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.30)","2af17cbd":"print(x_train.size,x_test.size,y_train.size,y_test.size)","0917c36b":"scaler=StandardScaler()","ec4a0829":"# Fit only on training data \nscaler.fit(x_train)\nx_train=scaler.transform(x_train)","927e6c37":"# apply same transformation to test data\nx_test = scaler.transform(x_test)","9cce5d8e":"x_test.size,","8a296480":"y_test.size","64b935ce":"#training model\nregr = linear_model.LinearRegression()\nregr.fit(x_train,y_train)\naccuracy=regr.score(x_train,y_train)\ny_pred=regr.predict(x_test)\nprint('Linear Regression Accuracy in the training data :' , accuracy*100 , \"%\")\nTest_accuracy=regr.score(x_test,y_test)\nprint('Linear Regression Accuracy in the test data :' , Test_accuracy*100 , \"%\")","d2283cde":"cutoff = 0.7                              # decide on a cutoff limit\ny_pred_classes = np.zeros_like(y_pred)    # initialise a matrix full with zeros\ny_pred_classes[y_pred > cutoff] = 1            # add a 1 if the cutoff was breached                   \ny_test_classes = np.zeros_like(y_pred)\ny_test_classes[y_test > cutoff] = 1\naccuracy_score(y_test_classes,y_pred_classes)","2075e89d":"confusion_matrix(y_test_classes,y_pred_classes)","80f3a08a":"recall_score(y_test_classes,y_pred_classes)\nprecision_score(y_test_classes,y_pred_classes,average=None)\nf1_score(y_test_classes,y_pred_classes,average=None)\nprint(classification_report(y_test_classes,y_pred_classes))","67a64222":"from sklearn.ensemble import GradientBoostingRegressor\nGBR=GradientBoostingRegressor()\nGBR.fit(x_train,y_train)\nGBR_accuracy=GBR.score(x_train,y_train)\ny_pred=GBR.predict(x_test)\nprint('GradientBoostingRegressor Accuracy in the training data :' , GBR_accuracy*100 , \"%%!!\")\nGBR_Test_accuracy=GBR.score(x_test,y_test)\nprint('GradientBoostingRegressor Accuracy in the test data :' , GBR_Test_accuracy*100 , \"%\")","c0a91a06":"from sklearn.tree import DecisionTreeRegressor\nDT=DecisionTreeRegressor()\nDT.fit(x_train,y_train)\nDT_accuracy=DT.score(x_train,y_train)\ny_pred=DT.predict(x_test)\nprint('DecisionTree Accuracy in the training data :' , DT_accuracy*100 , \"%\")\nDT_Test_accuracy=DT.score(x_test,y_test)\nprint('DecisionTree Accuracy in the test data :' , DT_Test_accuracy*100 , \"%\")","aba23cef":"cutoff = 0.7                              # decide on a cutoff limit\ny_pred_classes = np.zeros_like(y_pred)    # initialise a matrix full with zeros\ny_pred_classes[y_pred > cutoff] = 1            # add a 1 if the cutoff was breached                   \ny_test_classes = np.zeros_like(y_pred)\ny_test_classes[y_test > cutoff] = 1\naccuracy_score(y_test_classes,y_pred_classes)","b8a22baa":"confusion_matrix(y_test_classes,y_pred_classes)","d374ab32":"recall_score(y_test_classes,y_pred_classes)\nprecision_score(y_test_classes,y_pred_classes,average=None)\nf1_score(y_test_classes,y_pred_classes,average=None)\nprint(classification_report(y_test_classes,y_pred_classes))","4e1c1c92":"from sklearn.ensemble import RandomForestRegressor\nRF=RandomForestRegressor()\nRF.fit(x_train,y_train)\nRF_accuracy=RF.score(x_train,y_train)\nprint('RandomForest Accuracy in the training data :' , RF_accuracy*100 , \"%\")\nRF_Test_accuracy=RF.score(x_test,y_test)\nprint('RandomForest Accuracy in the test data :' , RF_Test_accuracy*100 , \"%\")","9e985471":"from sklearn.svm import SVR\nSVR=SVR()\nSVR.fit(x_train,y_train)\ny_pred=SVR.predict(x_test)\nSVR_accuracy=SVR.score(x_train,y_train)\nprint('SVR Accuracy in the training data :' , SVR_accuracy*100 , \"%\")\nSVR_Test_accuracy=SVR.score(x_test,y_test)\nprint('SVR Accuracy in the test data :' , SVR_Test_accuracy*100 , \"%\")","2551eab7":"data = {'Model Name':['Linear Regression','GradientBoosting', 'DecisionTree', 'RandomForest', 'SVR'], \n        'training data Accuracy':[accuracy,GBR_accuracy, DT_accuracy, RF_accuracy, SVR_accuracy], \n        'testing data Accuracy':[Test_accuracy,GBR_Test_accuracy, DT_Test_accuracy, RF_Test_accuracy, SVR_Test_accuracy]}\nMs=pd.DataFrame(data)\nMs","079aa9f6":"table = ff.create_table(Ms)\nfor i in range(len(table.layout.annotations)):\n    table.layout.annotations[i].font.size = 9\niplot(table)\npy.plot(table,filename='Models Accuracy',auto_open=True)","9d908d61":"fig = px.bar(Ms, x='Model Name', y='training data Accuracy',color='testing data Accuracy',color_continuous_scale='blues')\n\nfig.show()\npy.plot(fig,filename='Models accuracy',auto_open=True)","11374c54":"sns.palplot(sns.color_palette('hls',8))","88843439":"### Define\n####  1-Drope Nan Values  \n### Code","ecd4cf28":"## <span style=\"color:#b5515b\">What year did the games start and when did they stop, depending on the genre?<\/span>","e9baaa17":"### The Platforms percentage","aeb40b15":"> ### The results \n>- <span style=\"color:red\">North America is The biggest influencer in the world price without a competitor  .<\/span>.","c95f0b67":"## Test","8d4ee67a":"## Test","91785489":"##  <span style=\"color:#b5515b\">Which platform with the highest price individual game globally?<\/span>","afe9c001":"<a id='3'><\/a>","a6150ef0":"## <span style=\"color:#b5515b\">Which genre game has sold the most in a single year?<\/span>","a7ba320b":"##  <span style=\"color:#b5515b\">Linear Regression Model<\/span>","60bf1ebc":"## Test","d0fd1651":"### Define\n##### 2-Change year column to Date type\n### Code","d5557a89":"# <span style=\"color:#4d7799\"> STORING DATA <\/span>","d7b20423":"## <span style=\"color:#b5515b\">What is the most popular game ?<\/span>","1b0459d9":"> ### The results \n>- <span style=\"color:red\">North America is the most popular region for video games without a competitor  .<\/span>.","50149ba1":"## Define\n### 3-change global sales column to the summation of (NA_Sales,EU_Sales,JP_Sales)\n### Code","811a68c4":"##### [ReadData](#1)\n##### [Clean Data](#2)\n##### [DATA ANALYSIS](#3)\n##### [Machine Learning](#4)","01996286":"##  <span style=\"color:#4d7799\"> Programmatically assess<\/span>","14548ccb":"> ### The results \n>- #### <span style=\"color:red\"> ***Action*** , Sports and Shooter are always The Global's best-selling. <\/span>.\n>","d5029cf9":"##  <span style=\"color:#b5515b\">Machine Learning Models<\/span>","5996cece":"##  <span style=\"color:#4d7799\"> Read Data<\/span>","4ee68b4e":"<a id='1'><\/a>","70e9f8f2":"##  <span style=\"color:#b5515b\">Scaling<\/span>","f4db620d":"##  <span style=\"color:#4d7799\"> Importing libraries and Set Options <\/span>","d2d19535":"##  <span style=\"color:#4d7799\"> Video Game Sales <\/span>\n<span style=\"color:#7fa4c4\">This dataset contains a list of video games with sales greater than 100,000 copies. It was generated by a scrape of vgchartz.com.<\/span>\n- <span style=\"color:#b5515b\">Fields include<\/span>\n- <span style=\"color:#b5515b\">Rank - Ranking of overall sales<\/span>\n- <span style=\"color:#b5515b\">Name - The games name <\/span>\n- <span style=\"color:#b5515b\">Platform - Platform of the games release (i.e. PC,PS4, etc.)<\/span>\n- <span style=\"color:#b5515b\">Year - Year of the game's release<\/span>\n- <span style=\"color:#b5515b\">Genre - Genre of the game<\/span>\n- <span style=\"color:#b5515b\">Publisher - Publisher of the game<\/span>\n- <span style=\"color:#b5515b\">NA_Sales - Sales in North America (in millions)<\/span>\n- <span style=\"color:#b5515b\">EU_Sales - Sales in Europe (in millions)<\/span>\n- <span style=\"color:#b5515b\">JP_Sales - Sales in Japan (in millions)<\/span>\n- <span style=\"color:#b5515b\">Other_Sales - Sales in the rest of the world (in millions)<\/span>\n- <span style=\"color:#b5515b\">Global_Sales - Total worldwide sales.\n\nThere are 16,598 records. 2 records were dropped due to incomplete information.\n","d7ddf27f":"## <span style=\"color:#4d7799\"> Assess Data<\/span>","276cff06":"##  <span style=\"color:#b5515b\">Years,Global Sales and Publishers of Top 1000 Games<\/span>","47d40a27":"# <span style=\"color:#4d7799\"> Cleaning <\/span>","a191b52c":"##  <span style=\"color:#b5515b\">DecisionTreeRegressor Model<\/span>","4fef98d2":"#  <span style=\"color:#4d7799\"> DATA ANALYSIS  <\/span>","10d9fdb0":"## <span style=\"color:#4d7799\"> Issues<\/span>\n### <span style=\"color:#d48e95\">Quality<\/span>\n\n###### 1-271 value in year  column is Nan and 58 value in Publisher column is Nan \n###### 2-year Dtype shoud be Date type\n###### 3-global sales column is not equal to the summation of (NA_Sales\tEU_Sales\tJP_Sales\tOther_Sales)\n\n### <span style=\"color:#d48e95\">Tidiness<\/span>\n##### Columns NA_Sales\tEU_Sales\tJP_Sales\tOther_Sales\t was named in a confusing way. names should be clear <\/span>","db510e9c":"## Test","78351842":"##  <span style=\"color:#b5515b\">Machine learning methods visualization<\/span>","da961532":"<a id='4'><\/a>","9987b31c":"##  <span style=\"color:#b5515b\">Which platform with the highest price individual game globally?<\/span>","ae4cb691":"> ### The results \n>- <span style=\"color:red\">Action and Sports Games are the most popular than others .<\/span>.\n\n","afe174b2":"### <span style=\"color:#b5515b\"> The world  interest level in video games over time<\/span>","c40ce864":"##  <span style=\"color:#b5515b\">SVR Model<\/span>","2942a320":"## <span style=\"color:#b5515b\"> Regions sales as part of Global Sales by Year <\/span>","5c9dff2f":"> ### The results \n>- <span style=\"color:red\">WII Sports get the highest price individual game globally with sports genre  .<\/span>.","9ca07ec5":"> ### The results \n>- <span style=\"color:red\">Sports Games started from 1980 to 2016 then stoped. <\/span>.\n>- <span style=\"color:red\">Simulation games stoped with Sports games and appear again in 2020. <\/span>.\n>- <span style=\"color:red\">strategy games started from 1991 to 2016 . <\/span>.\n","a1626246":"# 1.Numerical Data Ploting","d18dd111":"##  <span style=\"color:#4d7799\"> Visual assess<\/span>","3e70faec":"<a id='2'><\/a>","3067ac7e":"##  <span style=\"color:#b5515b\">RandomForestRegressor Model<\/span>","12eb0f66":"## Define\n### Tidiness\n ### Change NA_Sales ,EU_Sales,JP_SalesColumns names\n### Code","98ec2557":"## <span style=\"color:#b5515b\"> Regions sales as part of Global Sales by Genre<\/span>","eab93b57":"> ### The results \n>- <span style=\"color:red\">WII Sports get the highest price individual game globally  .<\/span>.","75628c27":"# <span style=\"color:#AE5FE8\">Thank You<\/span>","5a6dc7c1":"##  <span style=\"color:#b5515b\">GradientBoostingRegressor Model<\/span>"}}