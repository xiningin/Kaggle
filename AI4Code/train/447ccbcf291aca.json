{"cell_type":{"aec1521a":"code","e62e3622":"code","6743f9f3":"code","df039e9b":"code","0eff83af":"code","bd96b3d6":"code","0b08b2c9":"code","cdc7fd88":"code","f129c038":"code","8d482ab6":"code","07e74212":"code","df032a53":"code","b7a78654":"code","9f9cfabb":"code","7e4abbaa":"code","842600ff":"code","755c0890":"code","0a446e96":"code","35ae2c37":"code","9b72849b":"code","5d4f0450":"code","7ed4d728":"code","b6a675d3":"code","0e8405fe":"code","3c4d8f5b":"code","6303ad50":"code","78faf827":"code","1e2de5c0":"code","b89616e6":"code","23aba59b":"code","0b53edd2":"code","be89947d":"code","f549f482":"code","750e4230":"code","c58f89f3":"code","77a6b8a1":"code","84adada7":"code","e4ac2b24":"code","8e333ce9":"markdown","391da57a":"markdown","ca231770":"markdown","b1058ef8":"markdown","015e305e":"markdown","9a10daca":"markdown","8c214f8a":"markdown","22604c6f":"markdown","1c2e71a4":"markdown","93bc115b":"markdown","bc470a56":"markdown","7e01caca":"markdown","fbf0f87d":"markdown","bbb931f3":"markdown","64b05f19":"markdown","b6e9145f":"markdown","7b37b578":"markdown","e1b289f1":"markdown","21300c5e":"markdown","06a0ef30":"markdown","6282cdbb":"markdown"},"source":{"aec1521a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom collections import Counter\n%matplotlib inline\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\n# Any results you write to the current directory are saved as output.","e62e3622":"# Read tables\nmedian_house_hold_in_come = pd.read_csv('..\/input\/MedianHouseholdIncome2015.csv', encoding=\"windows-1252\")\npercentage_people_below_poverty_level = pd.read_csv('..\/input\/PercentagePeopleBelowPovertyLevel.csv', encoding=\"windows-1252\")\npercent_over_25_completed_highSchool = pd.read_csv('..\/input\/PercentOver25CompletedHighSchool.csv', encoding=\"windows-1252\")\nshare_race_city = pd.read_csv('..\/input\/ShareRaceByCity.csv', encoding=\"windows-1252\")\nkill = pd.read_csv('..\/input\/PoliceKillingsUS.csv', encoding=\"windows-1252\")","6743f9f3":"percentage_people_below_poverty_level.head()","df039e9b":"percentage_people_below_poverty_level.poverty_rate.value_counts()","0eff83af":"#list of states\npercentage_people_below_poverty_level['Geographic Area'].unique()","bd96b3d6":"#Poverty Rate of Each State\npercentage_people_below_poverty_level.poverty_rate.replace([0],np.nan,inplace = True)\npercentage_people_below_poverty_level.poverty_rate.replace(['-'],np.nan,inplace = True)\npercentage_people_below_poverty_level.dropna(inplace = True)\npercentage_people_below_poverty_level.tail()\npercentage_people_below_poverty_level.poverty_rate = percentage_people_below_poverty_level.poverty_rate.astype(float)","0b08b2c9":"area_list = list(percentage_people_below_poverty_level['Geographic Area'].unique())\narea_poverty_ratio = []\nfor i in area_list:\n    x = percentage_people_below_poverty_level[percentage_people_below_poverty_level['Geographic Area'] == i]\n    area_poverty_rate = sum(x.poverty_rate)\/len(x) #her state i\u00e7in ortalama poverty rate hesaplad\u0131k\n    area_poverty_ratio.append(area_poverty_rate)#her state i de\u011ferleriyle beraber ekledik.\nnew_data = pd.DataFrame({'area_list' : area_list , 'area_poverty_ratio' : area_poverty_ratio})\nnew_index = (new_data['area_poverty_ratio'].sort_values(ascending = False).index.values)\nsorted_data = new_data.reindex(new_index)\n\n#visualization\nplt.figure(figsize=(15,10))\nsns.barplot(x=sorted_data['area_list'], y=sorted_data['area_poverty_ratio'])\nplt.xticks(rotation=50)\nplt.xlabel('States')\nplt.ylabel('Poverty Rate')\nplt.title('Area Poverty Ratio')","cdc7fd88":"#another bar plot\nkill.head()","f129c038":"kill.name.value_counts()","8d482ab6":"seperate = kill.name[kill.name != 'TK TK'].str.split()\na,b=zip(*seperate) #istenmeyen de\u011ferlerden ayr\u0131lm\u0131s listeyi zip metoduyla isim = a, soyisim = b \u015feklinde ay\u0131rd\u0131k. \nname_list = a+b\nname_count = Counter(name_list)\nmost_common_names = name_count.most_common(15)\nx,y = zip(*most_common_names)\nx,y = list(x),list(y)\n\n#Visualization\n\nplt.figure(figsize=(15,10))\nax = sns.barplot(x=x , y=y, palette = sns.cubehelix_palette(len(x)))\nplt.xlabel('Names')\nplt.ylabel('Frequency')\nplt.title('Most Common 15 Names Of Killed People')","07e74212":"percent_over_25_completed_highSchool.head()","df032a53":"percent_over_25_completed_highSchool.percent_completed_hs.value_counts()","b7a78654":"percent_over_25_completed_highSchool.percent_completed_hs.replace(['-'],0.0, inplace = True)\npercent_over_25_completed_highSchool.percent_completed_hs = percent_over_25_completed_highSchool.percent_completed_hs.astype(float)\narea_list = list(percent_over_25_completed_highSchool['Geographic Area'].unique())\narea_highschool = []\nfor i in area_list:\n    x = percent_over_25_completed_highSchool[percent_over_25_completed_highSchool['Geographic Area'] == i]\n    area_highschool_rate = sum(x.percent_completed_hs)\/len(x)\n    area_highschool.append(area_highschool_rate)\ndata = pd.DataFrame({'area_list' : area_list , 'area_highschool_ratio' : area_highschool})\nindex_new = (data['area_highschool_ratio'].sort_values(ascending = False)).index.values\nsorted_data2 = data.reindex(index_new)\n\n#visualization\n\nplt.figure(figsize = (15,10))\nax = sns.barplot(x = sorted_data2['area_list'], y = sorted_data2['area_highschool_ratio'])\nplt.xticks(rotation = 90)\nplt.xlabel = 'States'\nplt.ylabel = 'High School Graduate Rating'\nplt.title = \"Percentage of Given State's Population Above 25 that Has Graduated High School\"","9f9cfabb":"share_race_city.info()","7e4abbaa":"share_race_city.replace(['-'],np.NaN, inplace = True)\nshare_race_city.replace(['(X)'], np.NaN, inplace = True)\nshare_race_city.dropna()\nshare_race_city.loc[:,['share_white','share_black','share_native_american','share_asian','share_hispanic']] = share_race_city.loc[:,['share_white','share_black','share_native_american','share_asian','share_hispanic']].astype(float)\narea_list = list(share_race_city['Geographic area'].unique())\nshare_white = []\nshare_black = []\nshare_native_american = []\nshare_asian = []\nshare_hispanic = []\nfor i in area_list:\n    x = share_race_city[share_race_city['Geographic area'] == i]\n    share_white.append(sum(x.share_white)\/len(x))\n    share_black.append(sum(x.share_black)\/len(x))\n    share_native_american.append(sum(x.share_native_american)\/len(x))\n    share_asian.append(sum(x.share_asian)\/len(x))\n    share_hispanic.append(sum(x.share_hispanic)\/len(x))\n    \n#Visualization\n\nf, ax = plt.subplots(figsize = (10,15))\nsns.barplot(x = share_white , y = area_list , color = 'green', alpha = 0.6, label = 'White')\nsns.barplot(x = share_black , y = area_list , color = 'red', alpha = 0.5, label = 'African American')\nsns.barplot(x = share_native_american, y = area_list, color = 'blue', alpha = 0.4, label = 'Native American')\nsns.barplot(x = share_asian, y = area_list, color = 'pink',alpha = 0.7 , label = 'Asian' )\nsns.barplot(x = share_hispanic, y = area_list, color = 'cyan', alpha = 0.4, label = 'Hispanic')\n\nax.legend(loc = 'lower right', frameon = True)\nax.set(xlabel = 'Races percent', ylabel = 'States', title = \"Percentage of State's Population According to Races \")","842600ff":"sorted_data['area_poverty_ratio'] = sorted_data['area_poverty_ratio']\/max(sorted_data['area_poverty_ratio'])\nsorted_data2['area_highschool_ratio'] = sorted_data2['area_highschool_ratio']\/max(sorted_data2['area_highschool_ratio'])\ndata = pd.concat([sorted_data,sorted_data2['area_highschool_ratio']],axis = 1)\ndata.sort_values('area_poverty_ratio', inplace = True)\n\n#Visualization\n\nf,ax1 = plt.subplots(figsize = (20,10))\nsns.pointplot(x='area_list',y='area_poverty_ratio', data=data, color = 'lime', alpha=0.5)\nsns.pointplot(x='area_list',y='area_highschool_ratio', data=data, color = 'cyan', alpha=0.5)\nplt.text(40,0.6,'area_poverty_ratio', color = 'lime', style = 'italic', fontsize = 18 )\nplt.text(40,0.55, 'area_highschool_ratio', color = 'cyan', style = 'italic', fontsize = 18)\nplt.grid()","755c0890":"data.head()","0a446e96":"ax = sns.jointplot(x='area_poverty_ratio', y='area_highschool_ratio', data = data, kind='kde', size=7)\nplt.savefig('graph.png')\nplt.show()","35ae2c37":"g = sns.jointplot(x='area_poverty_ratio', y='area_highschool_ratio', data = data, ratio=5, color = 'y')\nplt.show()","9b72849b":"kill.race.dropna(inplace=True)\nlabels = kill.race.value_counts().index\ncolors = ['red','green','cyan','grey','yellow','orange']\nexplode = [0,0.2,0,0,0,0]\nsizes = kill.race.value_counts().values\n\n#visualization\n\nplt.figure(figsize = (10,10))\nplt.pie(sizes, explode=explode, labels = labels, colors = colors, autopct = '%1.1f%%')","5d4f0450":"data.head()\nsns.lmplot(x='area_poverty_ratio',y='area_highschool_ratio', data = data)\nplt.show()","7ed4d728":"sns.kdeplot(data.area_poverty_ratio,data.area_highschool_ratio, shade = True, cut = 5)\n#cut parameter means, increase of scale at the axis. \nplt.show()","b6a675d3":"pal = sns.cubehelix_palette(2,rot=-.5, dark=.3)\nsns.violinplot(data=data, palette=pal, inner='points')\nplt.show()","0e8405fe":"f,ax = plt.subplots(figsize = (6,6))\nsns.heatmap(data.corr(), annot=True, linewidths = .5, fmt = '.1f', ax=ax)\n#ax = ax means, fill the figure with heatmap.\nplt.show()","3c4d8f5b":"sns.boxplot(x='gender', y='age', hue='manner_of_death', data=kill, palette = 'PRGn')\nplt.show()","6303ad50":"sns.swarmplot(x='gender', y='age', hue='manner_of_death', data = kill)\nplt.show()","78faf827":"sns.pairplot(data)\nplt.show()","1e2de5c0":"kill.gender.value_counts()","b89616e6":"sns.countplot(kill.gender)\nplt.show()","23aba59b":"armed = kill.armed.value_counts()\nplt.figure(figsize = (10,7))\nsns.barplot(x = armed[:7].index, y = armed[:7].values)\nplt.show()","0b53edd2":"above25 = ['above25' if i>= 25 else 'below25' for i in kill.age]\ndf = pd.DataFrame({'age':above25})\nsns.countplot(x=df.age)","be89947d":"plt.figure(figsize = (10,7))\nsns.countplot(data = kill, x='race')\nplt.show()","f549f482":"cities = kill.city.value_counts()\nplt.figure(figsize=(10,7))\nsns.barplot(x = cities[:7].index, y = cities[:7].values)\nplt.show()","750e4230":"states = kill.state.value_counts()\nplt.figure(figsize=(10,7))\nsns.barplot(x = states[:7].index, y = states[:7].values)\nplt.show()","c58f89f3":"sns.countplot(kill.signs_of_mental_illness)\nplt.show()","77a6b8a1":"sns.countplot(kill.threat_level)\nplt.show()","84adada7":"sns.countplot(kill.flee)\nplt.show()","e4ac2b24":"sns.countplot(kill.body_camera)\nplt.show()","8e333ce9":"### Swarm Plot","391da57a":"### Horizontal Bar Plot with Subplots\nWhat did I do at up there \n1. I dropped out '-' and (x) values. \n2. Calculated percentage values for each race.\n3. Drew graph.","ca231770":"### LM Plot","b1058ef8":"What we did at up there ?\n1. At first, I cleared data. Dropped ' - ' values from the table.\n2. At second step, I needed to find mean value of poverty level of each state.\n3. After this, I created a new dataframe with ' state names ' and ' mean values poverty levels of each state '.\n4. I created an index from mean values.\n5. At last, drawed bar plot using Seaborn library.","015e305e":"#### What did I do up here ?\n* Made a simply normalization to dataframes which I will use.\n* I made it because of I needed to show two different dataframes. And dataframes had \n different value scales.\n* Drew graph.","9a10daca":"What did I do up there ?\n1. I created a list with races of people had killed.\n2. I created another list with indexes of races.\n3. I created a figure with labels, size, explode parameters.\n4. Explode parameter means, how far between of each piece of pie.\n\nPie chart calculates percentage of value to all value automatically.","8c214f8a":"### Violin Plot","22604c6f":"### Joint Plot\n","1c2e71a4":"### Point Plot","93bc115b":"What I did up there ? \n1. I dropped useless valus from main dataframe, crated a new dataframe name is ' seperate '.\n2. I focused on both of ' name ' and ' surname ' attributes. \n3. So, I unzipped the ' seperate ' dataframe.\n4. There are two variable. I saved names and surnames with them.\n5. I combined these variables. The new list is my new names and surnames's list.\n6. I counted each name and surname. And I found the most common ones.\n7. At last, in the 'x' variable, I saved the most common name list, in the 'y' variable I saved count value.\n","bc470a56":"### KDE Plot","7e01caca":"### Count Plot","fbf0f87d":"### Pie Chart","bbb931f3":"### Heat Map","64b05f19":"Violin Plot;\n* gives us to frequency of data samples.\n* works with numeric datas.","b6e9145f":"### Pair Plot","7b37b578":"### Conclusion\n\nI am waiting your comments and ratings. Thank you !","e1b289f1":"### Introduction\nHello.\n\nI am going to use Seaborn Library of Python for creating graphs about \n'Fatal Police Shooting' dataset. ","21300c5e":"### Box Plot","06a0ef30":"I need to drop the ' TK TK ' values from the dataframe.","6282cdbb":"### Bar Plot "}}