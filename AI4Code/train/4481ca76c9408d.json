{"cell_type":{"557b60a6":"code","69a2b7de":"code","e9373afe":"code","f8377db4":"code","ef1a6117":"code","9e5c5401":"code","2cef18b4":"code","7dbc6584":"code","f7e4ed11":"code","6f4b75f8":"code","a700b16a":"code","2142be1b":"code","6c6c496e":"code","15ca5675":"code","78c0ba23":"code","2a018ac7":"code","90202ce2":"code","ca4b428d":"code","c228194d":"code","b84109d4":"code","1408e21d":"code","8218a072":"code","5b4dfb8f":"markdown"},"source":{"557b60a6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n#plotly library\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode ,iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n#word cloud\nfrom wordcloud import WordCloud\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","69a2b7de":"winemag130_data = pd.read_csv(\"..\/input\/winemag-data-130k-v2.csv\")\nwinemag130_data.rename( columns={'Unnamed: 0':'ID'}, inplace=True )\n\nwinemag150_data = pd.read_csv(\"..\/input\/winemag-data_first150k.csv\")\nwinemag150_data.rename( columns={'Unnamed: 0':'ID'}, inplace=True )","e9373afe":"winemag130_data.info()","f8377db4":"winemag130_data.head(10)","ef1a6117":"#Plotly line Plot\n\ndf = winemag130_data.iloc[:100,:]\n\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n\n# Creating trace1\ntrace1 = go.Scatter(\n                    x = df.ID,\n                    y = df.points,\n                    mode = \"lines\",\n                    name = \"points\",\n                    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n                    text= df.variety)\n# Creating trace2\ntrace2 = go.Scatter(\n                    x = df.ID,\n                    y = df.price,\n                    mode = \"lines+markers\",\n                    name = \"price\",\n                    marker = dict(color = 'rgba(80, 26, 80, 0.8)'),\n                    text= df.variety)\ndata = [trace1, trace2]\nlayout = dict(title = 'Points and Price vs ID of Top 100 Variety',\n              xaxis= dict(title= 'ID',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)\n","9e5c5401":"#unique columns list\nwinemag130_data[\"points\"].unique()","2cef18b4":"#Plotly scatter plot\n\ndf87 = winemag130_data[winemag130_data.points == 87].iloc[:50,:]\ndf90 = winemag130_data[winemag130_data.points == 90].iloc[:50,:]\ndf93 = winemag130_data[winemag130_data.points == 93].iloc[:50,:]\ndf96 = winemag130_data[winemag130_data.points == 96].iloc[:50,:]\ndf99 = winemag130_data[winemag130_data.points == 99].iloc[:50,:]\n\ndf = winemag130_data.iloc[:100,:]\n\nimport plotly.graph_objs as go\n# creating trace1\ntrace1 =go.Scatter(\n                    x = df87.points,\n                    y = df.price,\n                    mode = \"markers\",\n                    name = \"87\",\n                    marker = dict(color = 'rgba(255, 128, 255, 0.8)'),\n                    text= df87.variety)\n# creating trace2\ntrace2 =go.Scatter(\n                    x = df90.points,\n                    y = df.price,\n                    mode = \"markers\",\n                    name = \"90\",\n                    marker = dict(color = 'rgba(240, 128, 255, 0.8)'),\n                    text= df90.variety)\n# creating trace3\ntrace3 =go.Scatter(\n                    x = df93.points,\n                    y = df.price,\n                    mode = \"markers\",\n                    name = \"93\",\n                    marker = dict(color = 'rgba(255, 128, 2, 0.8)'),\n                    text= df90.variety)\n# creating trace4\ntrace4 =go.Scatter(\n                    x = df96.points,\n                    y = df.price,\n                    mode = \"markers\",\n                    name = \"96\",\n                    marker = dict(color = 'rgba(255, 128, 2, 0.8)'),\n                    text= df96.variety)\n# creating trace5\ntrace5 =go.Scatter(\n                    x = df99.points,\n                    y = df.price,\n                    mode = \"markers\",\n                    name = \"99\",\n                    marker = dict(color = 'rgba(0, 255, 200, 0.8)'),\n                    text= df99.variety)\ndata = [trace1, trace2, trace3,trace4,trace5]\nlayout = dict(title = 'Points vs world rank of top 50 points with 87, 90,93,96 and 99 points',\n              xaxis= dict(title= 'ID',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Price',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","7dbc6584":"#plotly bar plot\n\ndf99 = winemag130_data[winemag130_data.points == 99].iloc[:50,:]\n\nimport plotly.graph_objs as go\n# create trace1 \ntrace1 = go.Bar(\n                x = df99.variety,\n                y = df99.price,\n                name = \"price\",\n                marker = dict(color = 'rgba(255, 174, 255, 0.5)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = df99.region_1)\n# create trace2 \ntrace2 = go.Bar(\n                x = df99.variety,\n                y = df99.points,\n                name = \"points\",\n                marker = dict(color = 'rgba(255, 255, 128, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = df99.region_1)\ndata = [trace1, trace2]\nlayout = go.Layout(barmode = \"group\")\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","f7e4ed11":"#Plotly bar plot\n\ndf87 = winemag130_data[winemag130_data.points == 87].iloc[:10,:]\n\nimport plotly.graph_objs as go\n\nx = df87.variety\n\ntrace1 = {\n  'x': x,\n  'y': df87.price,\n  'name': 'price',\n  'type': 'bar'\n};\ntrace2 = {\n  'x': x,\n  'y': df87.points,\n  'name': 'points',\n  'type': 'bar'\n};\ndata = [trace1, trace2];\nlayout = {\n  'xaxis': {'title': 'Top 3 universities'},\n  'barmode': 'relative',\n  'title': 'price and points of top 10 variety in 87'\n};\nfig = go.Figure(data = data, layout = layout)\niplot(fig)\n","6f4b75f8":"#plotly pie plot\n\ndf87 = winemag130_data[winemag130_data.points == 87].iloc[1:8,:]\n\nvalue=df87.price\nlabels=df87.title\n\nfig = {\n  \"data\": [\n    {\n      \"values\": value,\n      \"labels\": labels,\n      \"domain\": {\"x\": [0, .5]},\n      \"name\": \"Wine names by price\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .3,\n      \"type\": \"pie\"\n    },],\n  \"layout\": {\n        \"title\":\"Wine names by price\",\n        \"annotations\": [\n            { \"font\": { \"size\": 20},\n              \"showarrow\": False,\n              \"text\": \"Wine Reviews Title\",\n                \"x\": 0.20,\n                \"y\": 1\n            },\n        ]\n    }\n}\niplot(fig)","a700b16a":"df87 = winemag130_data[winemag130_data.points == 87].iloc[1:21,:]\ndf87.info()","2142be1b":"#plotly bubble plot\n\ndf87 = winemag130_data[winemag130_data.points == 87].iloc[1:21,:]\n\ndf=df87.fillna(0)\n\ncolor=df.price\n\ndata = [\n    {\n        'y': df.price,\n        'x': df.ID,\n        'mode': 'markers',\n        'marker': {\n            'color': color,\n            'size': color,\n            'showscale': True\n        },\n        \"text\" :  df.variety    \n    }\n]\niplot(data)","6c6c496e":"winemag150_data.info()","15ca5675":"winemag150_data.head()","78c0ba23":"winemag150_data[\"points\"].unique()","2a018ac7":"#plotly histograms plot\n\ndf96 = winemag130_data[winemag130_data.points == 96].iloc[:50,:]\ndf100 = winemag130_data[winemag130_data.points == 100].iloc[:50,:]\n\nimport plotly.graph_objs as go\n\ntrace1 = go.Histogram(\n    x=df96.price,\n    opacity=0.75,\n    name = \"96 points\",\n    marker=dict(color='rgba(171, 50, 96, 0.6)'))\ntrace2 = go.Histogram(\n    x=df100.price,\n    opacity=0.75,\n    name = \"100 points\",\n    marker=dict(color='rgba(12, 50, 196, 0.6)'))\n\ndata = [trace1, trace2]\nlayout = go.Layout(barmode='overlay',\n                   title=' Wine Reviews price in 96 and 100 points',\n                   xaxis=dict(title='price'),\n                   yaxis=dict( title='Count'),\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)\n","90202ce2":"#plotly cumulative histograms plot\n\ndf87 = winemag130_data[winemag130_data.points == 87].iloc[:100,:]\n\nimport plotly.graph_objs as go\n\n\n\ntrace2 = go.Histogram(\n    x=df87.price,\n    cumulative=dict(enabled=True))\n\ndata = [trace2]\nlayout = go.Layout(barmode='overlay',\n                   title=' Wine Reviews price in 87 points',\n                   xaxis=dict(title='price'),\n                   yaxis=dict( title='Count'),\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)\n","ca4b428d":"#WorldCloud\n\ndf87 = winemag130_data[winemag130_data.points == 87].iloc[:160,:]\ndf87_new=df87.country[df87.points==87]\n\nplt.subplots(figsize=(10,10))\nwordcloud = WordCloud(\n                          background_color='white',\n                          width=512,\n                          height=384\n                         ).generate(\" \".join(df87_new))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('graph.png')\n\nplt.show()","c228194d":"#plotly box plot\n\ndf99 = winemag130_data[winemag130_data.points == 99].iloc[:100,:]\n\ndf100 = winemag130_data[winemag130_data.points == 100].iloc[:100,:]\n\ntrace0 = go.Box(\n    y=df99.price,\n    name = 'total score of price in 99',\n    marker = dict(\n        color = 'rgb(12, 12, 140)',\n    )\n)\ntrace1 = go.Box(\n    y=df100.price,\n    name = 'research of price in 100',\n    marker = dict(\n        color = 'rgb(12, 128, 128)',\n    )\n)\n\ndata = [trace0, trace1]\niplot(data)\n","b84109d4":"#Scatter plot matrix\n\ndf100=winemag150_data[winemag150_data.points == 100].iloc[:100,:]\n\nimport plotly.figure_factory as ff\n# prepare data\n\ndf100 = df100.loc[:,[\"points\",\"price\", \"ID\"]]\ndf100[\"index\"] = np.arange(1,len(df100)+1)\n# scatter matrix\nfig = ff.create_scatterplotmatrix(df100, diag='box', index='index',colormap='Portland',\n                                  colormap_type='cat',\n                                  height=700, width=700)\niplot(fig)","1408e21d":"#Plotly inset plot\n\ndf100=winemag150_data[winemag150_data.points == 100]\n\ntrace1 = go.Scatter(\n    x=df100.ID,\n    y=df100.price,\n    name = \"price\",\n    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n)\n# second line plot\ntrace2 = go.Scatter(\n    x=df100.ID,\n    y=df100.points,\n    xaxis='x2',\n    yaxis='y2',\n    name = \"points\",\n    marker = dict(color = 'rgba(160, 112, 20, 0.8)'),\n)\ndata = [trace1, trace2]\nlayout = go.Layout(\n    xaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='y2',        \n    ),\n    yaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='x2',\n    ),\n    title = 'Points and Price vs ID of Wine Reviews'\n\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","8218a072":"#plotly 3D scatter plot\n\ndf99=winemag150_data[winemag150_data.points == 99]\ndf100=winemag150_data[winemag150_data.points == 100]\n\ntrace1 = go.Scatter3d(\n    x=df99.ID,\n    y=df99.price,\n    z=df99.points,\n    mode='markers',\n    marker=dict(\n        size=10,\n        color='rgb(255, 0, 0)',                # set color to an array\/list of desired values      \n    )\n)\ntrace2 = go.Scatter3d(\n    x=df100.ID,\n    y=df100.price,\n    z=df100.points,\n    mode='markers',\n    marker=dict(\n        size=10,\n        color='rgb(127, 127, 127)',                # set color to an array\/list of desired values      \n    )\n)\n\ndata = [trace1,trace2]\nlayout = go.Layout(\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0  \n    )\n    \n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","5b4dfb8f":"**INTRODUCTION**\n\n\n    * Plotly is a dynamic data visualization library that can be used with python. \n    * I'll do data analysis using the plots below\n\nPlotly plots\n   \n    *Line Plot\n    *Scatter Plot\n    *Bar Plot\n    *Pie Plot\n    *Bubble Plot\n    *Histograms Plot\n    *Cumulative Histograms Plot\n    *WorldCloud\n    *Box Plot\n    *Scatter Plot Matrix\n    *Inset Plot\n    *3D Scatter Plot\n    \n DATA INFORMATION\n    \n    *country\n    *description\n    *designation\n    *points\n    *price\n    *province\n    *region_1\n    *region_2\n    *taster_name\n    *taster_twitter_handle\n    *title\n    *variety\n    *winery\n    "}}