{"cell_type":{"d31a1c0f":"code","45bb09f5":"code","357c7819":"code","0db2f18a":"code","976bf295":"code","f8adcbcc":"code","91aa556e":"code","467febe6":"code","09dfa3f0":"code","1d7493b6":"code","da417941":"code","5c920013":"code","dcb32310":"code","d887ac53":"code","cbff083c":"code","867ed948":"code","ae547fe8":"code","fba6beb1":"code","e72cd532":"code","69be7b01":"code","97199eab":"code","9ecdc61c":"code","e0b62a13":"code","33e97c1d":"code","199aca2e":"code","748bd107":"code","4feadadd":"code","2adc4773":"code","0c587555":"code","10a1210f":"code","5ce0bb3d":"code","1fecd08c":"code","d4e67b7f":"code","88ec2db2":"code","7b96243c":"markdown","4b676fc2":"markdown","34a58d55":"markdown","ac7afabd":"markdown","61d692fb":"markdown","c8d3731e":"markdown"},"source":{"d31a1c0f":"# Importando as Bibliotecas\nimport numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import f1_score\n\nimport itertools\n\nfrom sklearn.metrics import balanced_accuracy_score\nfrom imblearn.datasets import fetch_datasets\nfrom imblearn.ensemble import BalancedRandomForestClassifier\n\nfrom imblearn.metrics import geometric_mean_score\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","45bb09f5":"# Importando os dados para um dataframe\ndf = pd.read_csv('\/kaggle\/input\/hmeq-data\/hmeq.csv')","357c7819":"# Visualizando quantidade de colunas e linhas\nprint('df:', df.shape)","0db2f18a":"# Visualizando os tipos das vari\u00e1veis\ndf.info()","976bf295":"# Visualizando os 5 priemiros registros\ndf.sample(5).T","f8adcbcc":"# Analisando os dados - Coluna \"BAD\"\ndf['BAD'].value_counts()","91aa556e":"# Gr\u00e1fico de barras - Coluna \"BAD\"\n# Valores: 1 = cliente inadimplente no empr\u00e9stimo 0 = empr\u00e9stimo recebido\ndf['BAD'].value_counts().plot.bar()","467febe6":"# Analisando os dados - Coluna \"JOB\"\n# Valores JOB:\n#     Mgr -> trabalho de gerente\n#     Office -> trabalho de escrit\u00f3rio\n#     ProfExe -> trabalho profissional e\/ou executivo\n#     Sales -> trabalho com vendas\n#     Self -> trabalho por conta pr\u00f3pria\n#     Other -> outros trabalhos\ndf['JOB'].value_counts()","09dfa3f0":"# Gr\u00e1fico de barras - Coluna \"BAD\"\ndf['JOB'].value_counts().plot.bar()","1d7493b6":"# Gr\u00e1fico de barras - Colunas \"JOB\" x \"BAD\"\nSitEmpre_Trabalho = pd.crosstab(df['JOB'],df['BAD'])\nSitEmpre_Trabalho.div(SitEmpre_Trabalho.sum(1).astype(float), axis=0).plot(kind=\"bar\", stacked=True, title='Situa\u00e7\u00e3o Emprestimo x Trabalho', figsize=(8,8))","da417941":"# Analisando os dados - Coluna \"REASON\"\ndf['REASON'].value_counts()","5c920013":"# Gr\u00e1fico de barras - Colunas \"REASON\"\n# Valores de REASON: \n#      DebtCon = consolida\u00e7\u00e3o da d\u00edvida \n#      HomeImp = melhoria da casa\ndf['REASON'].value_counts().plot.bar()","dcb32310":"# Gr\u00e1fico de barras - Colunas \"BAD\" x \"REASON\"\nSitEmpre_Razao = pd.crosstab(df['REASON'],df['BAD'])\nSitEmpre_Razao.div(SitEmpre_Razao.sum(1).astype(float), axis=0).plot(kind=\"bar\", stacked=True, title='Situa\u00e7\u00e3o Empr\u00e9stimo x Motivo do Empr\u00e9stimo', figsize=(8,8))","d887ac53":"# Visualizando dados estat\u00edticos b\u00e1sicos apenas de BAD = 1 Inadimpl\u00eancia\ndf[df['BAD']==1].drop('BAD', axis=1).describe().style.format(\"{:.2f}\")","cbff083c":"# Visualizando dados estat\u00edsticos b\u00e1sicos apenas de BAD = 0 Normalidade\ndf[df['BAD']==0].drop('BAD', axis=1).describe().style.format(\"{:.2f}\")","867ed948":"# Preenchendo os valores nulos com:\n# M\u00e9dia: VALUE, YOJ E DEBTINC\n# Valores Fixos: REASON e JOB\n# Zero: para os demais campos\ndf = df.fillna({\"VALUE\": df['VALUE'].mean()\/\/1, \n                            \"MORTDUE\": 0,  \n                            \"DEROG\": 0, \n                            \"DELINQ\": 0, \n                            \"CLAGE\": 0, \n                            \"NINQ\": 0, \n                            \"CLNO\": 0, \n                            \"YOJ\": df['YOJ'].mean()\/\/1, \n                            \"DEBTINC\": df['DEBTINC'].mean()\/\/1,\n                            \"REASON\": 'Debtcon', \n                            \"JOB\": 'Other'})","ae547fe8":"# Reexibindo os dados ap\u00f3s o preebchimento dos nulos\ndf.info()","fba6beb1":"# Transformando os tipos object em categoricos\nfor col in df.columns:\n    if df[col].dtype == 'object':\n        df[col]= df[col].astype('category').cat.codes","e72cd532":"# Reexibindo os dados ap\u00f3s a trabsforma\u00e7\u00e3o\ndf.info()","69be7b01":"# Visualizando dados estat\u00edsticos de todas vari\u00e1veis\ndf.describe().style.format(\"{:.2f}\")","97199eab":"# Exibindo primeiros registros de forma transposta\n# Visualizando os primeiros apresentados de forma TRANSPOSTA .T\ndf.head().T","9ecdc61c":"# Criando matriz de correla\u00e7\u00e3o\ndf_matriz = df.corr()","e0b62a13":"# Exibindo correla\u00e7\u00e3o das colunas com coluna JOB\ndf_matriz[\"JOB\"].sort_values(ascending=False)","33e97c1d":"# Criando nova coluna \n# Raz\u00e3o entre montante do pedido de empr\u00e9stimo e o valor da propriedade atual\n# LOAN - Montante do pedido de empr\u00e9stimo\n# VALUE - Valor da propriedade atual\ndf[\"RAZAO_LOAN_VALUE\"] = df[\"LOAN\"]\/df[\"VALUE\"]\n","199aca2e":"# Visualizando alguns dados da nova coluna\ndf['RAZAO_LOAN_VALUE'].sample(5)","748bd107":"# Com a cria\u00e7\u00e3o do novo (\"RAZAO_LOAN_VALUE\") \u00e9 necess\u00e1rio recriar matriz de correla\u00e7\u00e3o\nd_matriz = df.corr()","4feadadd":"# Visualizando a correla\u00e7\u00e3o com a coluna \"JOB\"\ndf_matriz[\"JOB\"].sort_values(ascending=True)","2adc4773":"# Criando uma c\u00f3pia do dataframe \"df\"\ndf2 = df.copy()","0c587555":"# Selecionando as colunas para uso no modelo (exceto \"BAD\")\nfeats = [c for c in df2.columns if c not in ['BAD']]\n\n# Exibindo as colunas selecionadas\nfeats","10a1210f":"# Criando as bases de TEST e TRAIN\ntrain, test = df2[feats], df2['BAD']\nx_train, x_test, y_train, y_test = train_test_split(train, test, stratify=test, random_state=0)\n","5ce0bb3d":"# Treinando os modelos para predi\u00e7\u00e3o: trabalhando com XGBoost\nfrom xgboost import XGBClassifier\nxgb = XGBClassifier(n_estimators=200, learning_rate=0.4, random_state=42)\nxgb.fit(x_train, y_train)\ny_pred_xgb = xgb.predict(x_test)\nprint('XGB performance:')\nprint('Accuracy: {:.4f}'\n      .format(accuracy_score(y_test, y_pred_xgb)))\nprint('Balanced accuracy: {:.4f}'\n      .format(balanced_accuracy_score(y_test, y_pred_xgb)))\nprint('F1 Score: {:.4f}'\n      .format(f1_score(y_test, y_pred_xgb)))\n","1fecd08c":"# Visualizando as colunas em ordem decrescente em grau de import\u00e2ncia - XGB\npd.Series(xgb.feature_importances_, index=feats).sort_values().plot.barh()","d4e67b7f":"# Treinando os modelos para predi\u00e7\u00e3o: trabalhando com BalancedRandomForestClassifier\nbrf = BalancedRandomForestClassifier(n_estimators=50, random_state=0,\n                                     n_jobs=-1)\nbrf.fit(x_train, y_train)\ny_pred_brf = brf.predict(x_test)\nprint('BalancedRandomForestClassifier:')\nprint('Accuracy: {:.4f}'\n      .format(accuracy_score(y_test, y_pred_brf)))\nprint('Balanced accuracy: {:.4f}'\n      .format(balanced_accuracy_score(y_test, y_pred_brf)))\nprint('F1 Score: {:.4f}'\n      .format(f1_score(y_test, y_pred_brf)))\n            ","88ec2db2":"# Treinando os modelos para predi\u00e7\u00e3o: trabalhando com RandomForestClassifier\nrf = RandomForestClassifier(n_estimators=50, random_state=0, n_jobs=-1)\nrf.fit(x_train, y_train)\ny_pred_rf = rf.predict(x_test)\nprint('RandomForestClassifier:')\nprint('Accuracy: {:.4f}'\n      .format(accuracy_score(y_test, y_pred_rf)))\nprint('Balanced accuracy: {:.4f}'\n      .format(balanced_accuracy_score(y_test, y_pred_rf)))\nprint('F1 Score: {:.4f}'\n      .format(f1_score(y_test, y_pred_rf)))\n","7b96243c":"## Descri\u00e7\u00e3o do Trabalho\n### Aluno: Ivan Ferreira Mar\u00e7al\n### Matr\u00edcula: 1931133067\n### Campus: Asa Sul","4b676fc2":"# Correla\u00e7\u00e3o","34a58d55":"Contexto\n \nO departamento de cr\u00e9dito ao consumidor de um banco deseja automatizar o processo de tomada de decis\u00e3o para aprova\u00e7\u00e3o das linhas de cr\u00e9dito Home Equity (Cr\u00e9dito com Garantia em Im\u00f3vel) do patrim\u00f4nio l\u00edquido. Para fazer isso, eles seguir\u00e3o as recomenda\u00e7\u00f5es da Lei da Igualdade de Oportunidades de Cr\u00e9dito para criar um modelo de pontua\u00e7\u00e3o de cr\u00e9dito derivado empiricamente e estatisticamente s\u00f3lido. O modelo ser\u00e1 baseado em dados coletados de solicitantes recentes concedidos cr\u00e9dito atrav\u00e9s do processo atual de concess\u00e3o de empr\u00e9stimos. O modelo ser\u00e1 constru\u00eddo a partir de ferramentas de modelagem preditiva, mas o modelo criado deve ser suficientemente interpret\u00e1vel para fornecer um motivo para qualquer a\u00e7\u00e3o adversa (rejei\u00e7\u00e3o).\n\nConte\u00fado\n\nO conjunto de dados de Home Equity (HMEQ) (Cr\u00e9dito com Garantia em Im\u00f3vel) cont\u00e9m informa\u00e7\u00f5es de linha de base e de desempenho de empr\u00e9stimos para 5.960 empr\u00e9stimos recentes de home equity. O alvo (BAD) \u00e9 uma vari\u00e1vel bin\u00e1ria que indica se um requerente acabou de tornar inadimplente ou \u00e9 um inadimplente conntumaz. Esse desfecho adverso ocorreu em 1.189 casos (20%). Para cada candidato, foram registradas 12 vari\u00e1veis de entrada.\n\n\nMotiva\u00e7\u00e3o\n\nE se voc\u00ea puder prever clientes que n\u00e3o pagam seus empr\u00e9stimos.\n\nBAD - 1 = cliente inadimplente no empr\u00e9stimo 0 = empr\u00e9stimo recebido\nLOAN - Montante do pedido de empr\u00e9stimo\nMORTDUE - Valor devido da hipoteca existente\nVALUE - Valor da propriedade atual\nREASON - DebtCon = consolida\u00e7\u00e3o da d\u00edvida HomeImp = melhoria da casa\nJOB - Seis categorias ocupacionais\nYOJ - Anos no emprego atual\nDEROG - N\u00famero de principais relat\u00f3rios depreciativos\nDELINQ - N\u00famero de linhas de cr\u00e9dito inadimplentes\nCLAGE - Idade da linha comercial mais antiga em meses\nNINQ - N\u00famero de linhas de cr\u00e9dito recentes\nCLNO - N\u00famero de linhas de cr\u00e9dito\nDEBTINC - Raz\u00e3o d\u00edvida \/ rendimento\n\n\nMgr-Manager -> trabalho de gerente\nOffice -> trabalho de escrit\u00f3rio\nOther -> outros trabalhos\nProfExe -> trabalho profissional e\/ou executivo\nSales -> trabalho com vendas\nSelf -> trabalho por conta pr\u00f3pria","ac7afabd":"# Conclus\u00e3o - Resultado","61d692fb":"\nDe acordo com os resultados executados nesse notebook o modelo preditivo **XGBoost** apresentou os melhores valores comparado aos outros modelos preditivos, RandomForest (com e sem balanceamento).\nResultado>>>\n\n    Accuracy: 0.9309\n    \n    Balanced accuracy: 0.8607\n    \n    F1 Score: 0.8110","c8d3731e":"# An\u00e1lise Explorat\u00f3ria"}}