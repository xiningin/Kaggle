{"cell_type":{"92493a40":"code","58f17d35":"code","2c08f8e1":"code","e6064f15":"code","38d323a1":"code","61740a36":"code","126a1f10":"code","f24fbafe":"code","1c9643d2":"code","982066c4":"code","b4840679":"code","c7ae44a6":"code","d9c870ad":"code","c778d06c":"code","3082f481":"code","45c2fbd2":"code","807d3781":"code","1e9dd194":"code","1ed71096":"markdown","d010f53d":"markdown"},"source":{"92493a40":"import os, cv2, json\nimport pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\nfrom PIL import Image\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nimport tensorflow as tf\nfrom tensorflow.keras import models, layers\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping, ReduceLROnPlateau\nfrom tensorflow.keras.applications import InceptionV3\nfrom tensorflow.keras.optimizers import Adam\n\nfrom PIL import Image\n\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Activation, Input, BatchNormalization, GlobalAveragePooling2D","58f17d35":"train= pd.read_csv(\"..\/input\/tomato-diseases-dataset-csvimages\/train.csv\")","2c08f8e1":"from sklearn.model_selection import train_test_split\ndf_train, df_validate, y_train, y_test = train_test_split(train, train.label, \n                                                    train_size=0.8, \n                                                    random_state=42,\n                                                    stratify=train.label)","e6064f15":"df_train = df_train.reset_index(drop=True)\ndf_validate = df_validate.reset_index(drop=True)","38d323a1":"sample = df_train[df_train.label == 3].sample(3)\nplt.figure(figsize=(15, 5))\nfor ind, (img, label) in enumerate(zip(sample.img, sample.label)):\n    plt.subplot(1, 3, ind + 1)\n    img = cv2.imread(os.path.join(\"..\/input\/tomato-diseases-dataset-csvimages\/Tomato_images\/Tomato_images\", img))\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    plt.imshow(img)\n    plt.axis(\"off\")\n    \nplt.show()","61740a36":"# Main parameters\nBATCH_SIZE = 16\nSTEPS_PER_EPOCH = len(train)*0.8 \/ BATCH_SIZE\nVALIDATION_STEPS = len(train)*0.2 \/ BATCH_SIZE\nEPOCHS =60 #\nIMG_WIDTH= 256\nIMG_HEIGHT= 256\ntrain_dir = \"..\/input\/tomato-diseases-dataset-csvimages\/Tomato_images\/Tomato_images\"","126a1f10":"df_train.label = df_train.label.astype('str')\ndf_validate.label = df_validate.label.astype('str')","f24fbafe":"train_datagen = ImageDataGenerator(rescale=1.\/255,\n                               shear_range = 0.2,\n                               zoom_range = 0.2,\n                               rotation_range = 180,\n                               vertical_flip = True,\n                               horizontal_flip = True)\n# our train_datagen generator will use the following transformations on the images\nvalidation_datagen = ImageDataGenerator(rescale=1.\/255)\n\n\n\n\n\ntrain_generator = train_datagen.flow_from_dataframe(df_train, \n                                                    train_dir,\n                                                    target_size=(IMG_WIDTH, IMG_HEIGHT),\n                                                    batch_size=BATCH_SIZE,\n                                                    x_col='img',\n                                                    y_col='label',\n                                                    class_mode = 'categorical')\n\n# generator = ImageDataGenerator(*args).flow_from_dataframe(dataframe, directory, target_size,\n# batch_size, x_col, y_col, class_mode)\n# your dataframe shoudl be in the format such that x_col = features, y_col = class\/label\n# binary class mode since output is either 0(dog) or 1(cat)\n\nvalidation_generator = validation_datagen.flow_from_dataframe(df_validate, \n                                                   train_dir,\n                                                    target_size=(IMG_WIDTH, IMG_HEIGHT),\n                                                    x_col='img',\n                                                    y_col='label',\n                                                    class_mode='categorical', \n                                                  batch_size=BATCH_SIZE)","1c9643d2":"def create_model():\n    efficientnet_layers = InceptionV3(weights='imagenet', \n                                         include_top=False, \n                                         input_shape = (IMG_WIDTH, IMG_HEIGHT, 3),\n                                         pooling='avg')\n\n    model = Sequential()\n    model.add(efficientnet_layers)\n    model.add(Dense(10, activation=\"softmax\"))\n    model.compile(optimizer = Adam(lr = 0.001),\n                  loss = \"categorical_crossentropy\",\n                  metrics = [\"acc\"])\n\n    return model\n","982066c4":"model = create_model()\nmodel.summary()","b4840679":"model.load_weights('..\/input\/tomatoleafdiseasedetection-weights\/InceptionV3_256.h5')","c7ae44a6":"#ss=df_validate.sample(n=20)\nss=df_validate\nss=ss[['img', 'label']]\n\npreds = []\n\nfor image_id in ss.img:\n    image = Image.open(os.path.join(\"..\/input\/tomato-diseases-dataset-csvimages\/Tomato_images\/Tomato_images\/\", image_id))\n    array = tf.keras.preprocessing.image.img_to_array(image)\n    array=array\/255\n    image = np.expand_dims(array, axis = 0)\n    preds.append(np.argmax(model.predict(image)))\n\nss['labelP'] = preds\nss\n","d9c870ad":"score = model.evaluate_generator(validation_generator)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","c778d06c":"confusion_matrix = pd.crosstab(ss.label, ss.labelP, rownames=['Actual'], colnames=['Predicted'])\nprint (confusion_matrix)","3082f481":"\nplt.figure(figsize=(10,8))\n\n#use seaborn to draw the headmap\nsns.heatmap(confusion_matrix, \n            xticklabels=confusion_matrix.columns.values, #x label\n            yticklabels=confusion_matrix.columns.values,cmap=\"YlGnBu\" ,annot=True, fmt=\"d\")\nplt.show()","45c2fbd2":"from imblearn.metrics import sensitivity_score, specificity_score\n\n\nfrom sklearn.metrics import f1_score, precision_score, recall_score,accuracy_score, confusion_matrix\ny_test=ss.label.values.astype(int)\ny_pred=ss.labelP.values.astype(int)\n\ntype(y_test)\n# Print f1, precision, and recall scores\nprint(\"specificity:\",specificity_score(y_test, y_pred , average=\"macro\"))\nprint(\"sensitivity:\",sensitivity_score(y_test, y_pred , average=\"macro\"))\nprint(\"recall:\",recall_score(y_test, y_pred , average=\"macro\"))\nprint(\"precision::\",precision_score(y_test, y_pred , average=\"macro\"))\nprint(\"f1_score:\",f1_score(y_test, y_pred , average=\"macro\"))\nprint(\"accuracy_score:\",accuracy_score(y_test, y_pred))","807d3781":"from sklearn.metrics import classification_report\nimport numpy as np\n\n\nprint(classification_report(y_test, y_pred))","1e9dd194":"y_true = y_test\ny_prediction = y_pred\ncnf_matrix = confusion_matrix(y_true, y_prediction)\nprint(cnf_matrix)\n#[[1 1 3]\n# [3 2 2]\n# [1 3 1]]\n\nFP = cnf_matrix.sum(axis=0) - np.diag(cnf_matrix)  \nFN = cnf_matrix.sum(axis=1) - np.diag(cnf_matrix)\nTP = np.diag(cnf_matrix)\nTN = cnf_matrix.sum() - (FP + FN + TP)\n\nFP = FP.astype(float)\nFN = FN.astype(float)\nTP = TP.astype(float)\nTN = TN.astype(float)\n\n# Sensitivity, hit rate, recall, or true positive rate\nTPR = TP\/(TP+FN)\n# Specificity or true negative rate\nTNR = TN\/(TN+FP) \n# Precision or positive predictive value\nPPV = TP\/(TP+FP)\n# Negative predictive value\nNPV = TN\/(TN+FN)\n# Fall out or false positive rate\nFPR = FP\/(FP+TN)\n# False negative rate\nFNR = FN\/(TP+FN)\n# False discovery rate\nFDR = FP\/(TP+FP)\n# Overall accuracy\nACC = (TP+TN)\/(TP+FP+FN+TN)\n\nprint(\"Sensitivity OR recall\")\nprint(TPR)\nprint(\"-------------------\")\nprint(\"Specificity\")\nprint(TNR)\nprint(\"-------------------\")\nprint(\"Precision\")\nprint(PPV)\nprint(\"-------------------\")\nprint(\"accuracy\")\nprint(ACC)\n","1ed71096":"# Tomato Leaf Disease Detection 0.998 [inference]","d010f53d":"### Hi kagglers, This is `inference` notebook using `Keras`.\n\n> \n>  [Tomato Leaf Disease Detection 0.998 [Training]](https:\/\/www.kaggle.com\/ammarnassanalhajali\/tomato-leaf-disease-detection-0-998-training)\n\n\n\n### Please if this kernel is useful, <font color='red'>please upvote !!<\/font>"}}