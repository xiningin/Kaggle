{"cell_type":{"6bfea2e9":"code","104977cf":"code","77ccd09c":"code","b1c183a2":"code","5c2da81d":"code","f3e57689":"code","9325ffad":"code","dd12f500":"code","04e44c54":"code","5ce32d12":"code","88d2dada":"code","cb2fbe6f":"code","ded1c63e":"code","f25d5868":"code","fb121ef6":"code","7829250c":"code","7a2427c2":"code","f843f128":"code","31e92fcf":"code","ab97915f":"code","910747ba":"code","48ebf412":"code","da4a95dc":"code","bc5679b3":"code","2632c247":"code","9b683b1b":"code","e898c0af":"code","4cb3706b":"code","3c4c34ea":"code","45519f48":"code","d0ac7efd":"code","82d3d42f":"code","ca534193":"code","0d029321":"code","93ea2a16":"code","84722cd5":"code","f33b1410":"code","a4a51259":"code","0f2b1305":"code","9eb33bcf":"code","da3c3cb6":"code","3442e351":"code","c3db0516":"code","ebaf5d35":"code","7cf1dcb4":"code","bc4acbc3":"code","75495f6a":"code","34eeb9a5":"code","332276c4":"code","c9aaa3e4":"code","28e6836f":"code","88bc7ef8":"code","ba47bc68":"code","b3fc8316":"code","916b2bac":"code","a290c04e":"code","62f1cdd4":"code","a7eb3c49":"code","77586a33":"code","51817ae2":"code","3b842d15":"code","d832df8d":"code","71a484b5":"code","886aead2":"code","ac4c213b":"code","fb2d9932":"code","f1127c50":"code","e6d9ff33":"code","c355696b":"code","5028ae42":"code","f527798d":"code","00526a18":"code","17846267":"code","298685fe":"code","16fc5eed":"code","7c733946":"code","f8764995":"code","0879c627":"code","d715cc91":"code","e10d174f":"code","78821228":"code","b3eb5af1":"code","49dfee42":"code","f7242e1b":"code","c249403c":"code","d4b8eb5c":"code","c0d0edd6":"code","3fe259aa":"code","09f0c32d":"code","b3c40c28":"code","9f4c5249":"code","f7b9d3b3":"code","1eb5fd00":"code","7c6e0104":"code","da5bc986":"code","a44052ab":"code","d3822235":"code","9add95ac":"code","76eb971e":"code","46a11493":"code","c9717917":"code","10d5b043":"code","31e33aad":"code","7d175ba7":"code","5b6e174a":"code","f38a53af":"code","78e9f94a":"code","20a90039":"code","a6ed0517":"code","676b88a4":"code","b2d9e130":"code","4450f2e8":"code","0c4f7b5d":"code","3b275383":"code","526cfcc2":"code","77583b10":"code","df1d1a49":"code","476b6327":"code","b1e34efe":"code","2cba0658":"code","215f837b":"code","88d7b968":"code","cf444749":"code","181d32fd":"code","a0560432":"code","287ced1d":"code","d533cc83":"code","fae4bbbd":"code","13e50907":"code","903bc8e8":"code","cb63b481":"code","c2e4fcf1":"code","ea64c05a":"code","73d9590c":"code","858eb12a":"code","330213d1":"code","dd8b2ea4":"code","79e6367c":"code","fd4d528f":"code","349b1c81":"code","3a267d34":"code","f15da330":"code","90967a8d":"code","f4120ddc":"code","a13fcda2":"code","ba86eedd":"code","d4a1a5d7":"markdown","8dc1e450":"markdown","94a4dff4":"markdown","e5df6abd":"markdown","f371bd40":"markdown","d4d90156":"markdown","aa9d5818":"markdown","48d4f652":"markdown","823afe85":"markdown","c2dfd008":"markdown","8d64213f":"markdown","7635a38b":"markdown"},"source":{"6bfea2e9":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')","104977cf":"df= pd.read_csv('..\/input\/hepatitis-morality-prediction\/hepatitis.data')","77ccd09c":"df.head()","b1c183a2":"col_names = [\"CLASS\",\"AGE\",\"SEX\",\"STEROID\",\"ANTIVIRALS\",\"FATIGUE\",\"MALAISE\",\"ANOREXIA\",\"LIVER BIG\",\"LIVER FIRM\",\"SPLEEN PALPABLE\",\n\"SPIDERS\",\"ASCITES\",\"VARICES\",\"BILIRUBIN\",\"ALK PHOSPHATE\",\"SGOT\",\"ALBUMIN\", \"PROTIME\",\"HISTOLOGY\"]","5c2da81d":"df = pd.read_csv('..\/input\/hepatitis-morality-prediction\/hepatitis.data',names=col_names)","f3e57689":"df.head()","9325ffad":"# Clean colum names\ndf.columns","dd12f500":"#Converting upper case to lower case\ndf.columns.str.lower().str.replace(' ','_')","04e44c54":"df.columns = df.columns.str.lower().str.replace(' ','_')","5ce32d12":"df.head()","88d2dada":"df.dtypes","cb2fbe6f":"# Replace ? with 0\ndf = df.replace('?',0)\ndf.head()","ded1c63e":"sum(df.dtypes == 'object')","f25d5868":"df.columns[df.dtypes == 'object']","fb121ef6":"# converting datatypes\n\ndf[['steroid', 'fatigue', 'malaise', 'anorexia', 'liver_big', 'liver_firm','spleen_palpable', 'spiders', 'ascites', 'varices','alk_phosphate', 'sgot', 'protime']] = df[['steroid', 'fatigue', 'malaise', 'anorexia', 'liver_big', 'liver_firm','spleen_palpable', 'spiders', 'ascites', 'varices','alk_phosphate', 'sgot', 'protime']].astype(int)","7829250c":"df.dtypes","7a2427c2":"df[['bilirubin','albumin']] = df[['bilirubin','albumin']].astype(float)","f843f128":"df.dtypes","31e92fcf":"df.shape","ab97915f":"df.isnull().sum()","910747ba":"df.describe()","48ebf412":"df['class'].value_counts()","da4a95dc":"df['class'].value_counts().plot(kind='bar')","bc5679b3":"# How many males and females\ndf['sex'].value_counts()","2632c247":"df['sex'].value_counts().plot(kind='bar')","9b683b1b":"# Age range\ndf.groupby(['age','sex']).size()","e898c0af":"#frquency distribution\ndf['age'].max()","4cb3706b":"df['age'].min()","3c4c34ea":"labels = [\"Less than 10\",\"10-20\",\"20-30\",\"30-40\",\"40-50\",\"50-60\",\"60-70\",\"70 and more\"]\nbins = [0,10,20,30,40,50,60,70,80]\nfrq_df = df.groupby(pd.cut(df['age'],bins=bins,labels=labels)).size()","45519f48":"frq_df","d0ac7efd":"freq_df = frq_df.reset_index(name='count')","82d3d42f":"freq_df","ca534193":"freq_df.plot(kind='bar')","0d029321":"freq_df.plot(kind='line')","93ea2a16":"# Plot \nplt.bar(freq_df['age'],freq_df['count'])\nplt.ylabel('counts')\nplt.title('Frequency Count of Age')\nplt.show()","84722cd5":"# plot Pie chart\nlabels = [\"lt-10\",\"10-20\",\"20-30\",\"30-40\",\"40-50\",\"50-60\",\"60-70\",\"ge-70\"]\nfig1,ax1 = plt.subplots()\nax1.pie(freq_df['count'],labels=labels,autopct='1%.lf%%')\nax1.axis('equal')\nplt.show()","f33b1410":"# Using Boxplot for Univariate Outlier Detection\nsns.boxplot(df['age'])","a4a51259":"df[df['age'] ==78 ]","0f2b1305":"sns.boxplot(df['steroid'])","9eb33bcf":"sns.boxplot(df['sgot'])","da3c3cb6":"sns.boxplot(df['alk_phosphate'])","3442e351":"#Detect outliers using Scatterplot\nsns.scatterplot(df['age'],df['albumin'])","c3db0516":"# Scatterplot\nsns.scatterplot(x=df['albumin'],y=df['age'],hue=df['sex'], palette=['green','red'],data=df)","ebaf5d35":"q1 = df.quantile(0.25)\nq3 = df.quantile(0.75)","7cf1dcb4":"IQR = q3-q1","bc4acbc3":"IQR","75495f6a":"# Get the actual datapoints that is an outlier\n(df < (q1 - 1.5 * IQR)) | (df > (q3 + 1.5 * IQR))","34eeb9a5":"df_no_outlier = df[~((df < (q1 - 1.5 * IQR)) | (df > (q3 + 1.5 * IQR))).any(axis=1)]","332276c4":"df_no_outlier","c9aaa3e4":"print(df_no_outlier.shape)\ndf.shape","28e6836f":"# plot Distribution of data\ndf.hist(bins=50,figsize=(20,15))\nplt.show()","88bc7ef8":"# plot Distribution of data\ndf_no_outlier.hist(bins=50,figsize=(20,15))\nplt.show()","ba47bc68":"# Feature Selection & importance\nfrom sklearn.feature_selection import SelectKBest, chi2, f_regression","b3fc8316":"#features and labes\ndf.head()","916b2bac":"df.columns","a290c04e":"xfeatures = df[['age', 'sex', 'steroid', 'antivirals', 'fatigue', 'malaise',\n       'anorexia', 'liver_big', 'liver_firm', 'spleen_palpable', 'spiders',\n       'ascites', 'varices', 'bilirubin', 'alk_phosphate', 'sgot', 'albumin',\n       'protime', 'histology']]\nylabels = df['class']","62f1cdd4":"skb = SelectKBest(score_func=chi2,k=10)\nbest_feature_fit = skb.fit(xfeatures,ylabels)","a7eb3c49":"# Highesh score shows the best fit \nprint(\"Scores\",best_feature_fit.scores_)","77586a33":"#Transform(optional)\nbf_02 = best_feature_fit.transform(xfeatures)\nbf_02","51817ae2":"# Mapping to feature name\nfeature_scores = pd.DataFrame(best_feature_fit.scores_,columns=['Feature_scores'])","3b842d15":"feature_scores","d832df8d":"feature_column_names = pd.DataFrame(xfeatures.columns,columns=['Feature_name'])\nbest_featu_df = pd.concat([feature_scores,feature_column_names],axis=1)","71a484b5":"best_featu_df","886aead2":"# get the best the more important features\nbest_featu_df.nlargest(10,'Feature_scores')","ac4c213b":"# Recursive Feature elemination\nfrom sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LogisticRegression","fb2d9932":"logit = LogisticRegression()","f1127c50":"rf = RFE(logit,6)","e6d9ff33":"rf_fit = rf.fit(xfeatures,ylabels)","c355696b":"selected_features = pd.DataFrame(rf_fit.support_,columns=['Selected_Features'])\nranking_features = pd.DataFrame(rf_fit.ranking_,columns=['Selected_Features'])","5028ae42":"rf_feature_df = pd.concat([feature_column_names,selected_features,ranking_features],axis=1)","f527798d":"rf_feature_df","00526a18":"from sklearn.ensemble import ExtraTreesClassifier","17846267":"\net_clf = ExtraTreesClassifier()\net_clf.fit(xfeatures,ylabels)","298685fe":" print(et_clf.feature_importances_)","16fc5eed":"# feature importance \nfeature_importance_df = pd.Series(et_clf.feature_importances_,index=xfeatures.columns)","7c733946":"feature_importance_df","f8764995":"feature_importance_df.nlargest(10).plot(kind='barh')","0879c627":"df.corr()","d715cc91":"# Heatmap for Correlation\nsns.heatmap(xfeatures.corr())","e10d174f":"sns.heatmap(xfeatures.corr(),annot=True)\nplt.figure(figsize=(20,10))\nplt.show()","78821228":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split","b3eb5af1":"xfeatures","49dfee42":"ylabels = df['class']","f7242e1b":"df.columns","c249403c":"best_featu_df.nlargest(10,'Feature_scores')['Feature_name'].unique()","d4b8eb5c":"['protime', 'sgot', 'bilirubin', 'age', 'alk_phosphate', 'albumin',\n       'spiders', 'histology', 'malaise', 'fatigue']","c0d0edd6":"xfeatures_best = df[['age', 'sex', 'steroid', 'antivirals', 'fatigue',\n       'spiders','ascites', 'varices', 'bilirubin', 'alk_phosphate', 'sgot', 'albumin',\n       'protime', 'histology']]","3fe259aa":"# Train \/ test split\nx_train,x_test,y_train,y_test = train_test_split(xfeatures,ylabels,test_size=0.30,random_state=6)","09f0c32d":"x_train_b,x_test_b,y_train_b,y_test_b = train_test_split(xfeatures_best,ylabels,test_size=0.30,random_state=6)","b3c40c28":"lg  = LogisticRegression()\nlg.fit(x_train,y_train)","9f4c5249":"# Print Model accuracy and score\nlg.score(x_test,y_test)","f7b9d3b3":"lg.predict(x_test)","1eb5fd00":"print(list(y_test))","7c6e0104":"accuracy_score(y_test,lg.predict(x_test))","da5bc986":"# If we use best features how model perfomance\nmodel_lg  = LogisticRegression()\nmodel_lg.fit(x_train_b,y_train_b)","a44052ab":"# Print Model accuracy and score\nmodel_lg.score(x_test_b,y_test_b)","d3822235":"model_lg.predict(x_test_b)","9add95ac":"print(list(y_test_b))","76eb971e":"x_test.iloc[0]","46a11493":"res_dic = {\"Die\":1,\"Live\":2}\nx1 = x_test.iloc[2]","c9717917":"lg.predict(np.array(x1).reshape(1,-1))","10d5b043":"# Model2\ndt = DecisionTreeClassifier()\ndt.fit(x_train_b,y_train_b)","31e33aad":"dt.score(x_test_b,y_test_b)","7d175ba7":"# Model3 KNN\n\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=3)","5b6e174a":"knn.fit(x_train_b,y_train_b)","f38a53af":"knn.score(x_test_b,y_test_b)","78e9f94a":"import joblib","20a90039":"model_file = open(\"logistic_regression_hepB_model.pkl\",\"wb\")\njoblib.dump(model_lg,model_file)\nmodel_file.close()","a6ed0517":"model_file_dt = open(\"Decision_tree_hepB_model.pkl\",\"wb\")\njoblib.dump(dt,model_file_dt)\nmodel_file_dt.close()","676b88a4":"model_file_knn = open(\"KNearestneighbor_hepB_model.pkl\",\"wb\")\njoblib.dump(knn,model_file_knn)\nmodel_file_knn.close()","b2d9e130":"pip install pydotplus","4450f2e8":"# Create Decision Tree Plot\nfrom IPython.display import Image\nfrom sklearn import tree\nimport pydotplus","0c4f7b5d":"feature_names_best = xfeatures_best.columns","3b275383":"tar_names = ['Die','Live']","526cfcc2":"# Create Dot plot\ndot_data = tree.export_graphviz(dt,out_file=None,feature_names=feature_names_best,class_names=tar_names)","77583b10":"graph = pydotplus.graph_from_dot_data(dot_data)","df1d1a49":"Image(graph.create_png())","476b6327":"# Save the plot\ngraph.write_png(\"hep_decision_tree_plot.png\")","b1e34efe":"import lime\nimport lime.lime_tabular","2cba0658":"# Methods and Attributes\ndir(lime)","215f837b":"feature_names_best","88d7b968":"tar_names","cf444749":"class_names = [\"Die(1)\",\"Live(2)\"]","181d32fd":"# Create Explainer\nexplainer = lime.lime_tabular.LimeTabularExplainer(x_train_b.values,\n                                                  feature_names=feature_names_best,\n                                                  class_names=class_names,discretize_continuous=True)","a0560432":"model_lg.predict(np.array(x_test_b.iloc[1]).reshape(1,-1))","287ced1d":"exp = explainer.explain_instance(x_test_b.iloc[1],model_lg.predict_proba, num_features=14,top_labels=1)","d533cc83":"exp.show_in_notebook(show_table=True,show_all=False)","fae4bbbd":"# Explaintion as list\nexp.as_list()","13e50907":"# Using Eli5\nimport eli5","903bc8e8":" # Show how each feature Contributes model\neli5.show_weights(model_lg,top=10)","cb63b481":"feature_names_best = ['age', 'sex', 'steroid', 'antivirals', 'fatigue', 'spiders', 'ascites',\n       'varices', 'bilirubin', 'alk_phosphate', 'sgot', 'albumin', 'protime',\n       'histology'] ","c2e4fcf1":"eli5.show_weights(model_lg,feature_names=feature_names_best,target_names=class_names)","ea64c05a":"eli5.show_prediction(model_lg,x_test_b.iloc[1],feature_names=feature_names_best,target_names=class_names)","73d9590c":"#![](confusionmatrix_image.jpg)","858eb12a":"from sklearn.metrics import confusion_matrix","330213d1":"y_pred = model_lg.predict(x_test_b)","dd8b2ea4":"accuracy_score(y_test_b,y_pred)","79e6367c":"confusion_matrix(y_test,y_pred)","fd4d528f":"# Plot \nfrom sklearn.metrics import plot_confusion_matrix\n","349b1c81":"plot_confusion_matrix(model_lg,x_test_b,y_test_b)","3a267d34":"tp,tf,fn,tn = confusion_matrix(y_test_b,y_pred).ravel()","f15da330":"tp","90967a8d":"tf","f4120ddc":"## Classification Report\nfrom sklearn.metrics import classification_report","a13fcda2":"print(classification_report(y_test,y_pred))","ba86eedd":"print(classification_report(y_test,y_pred,target_names=class_names))","d4a1a5d7":"+  All the methods gave us almost the same features to use\n","8dc1e450":"### Checking Outliers\n\n+ Univariate analysis\n+ multi variate analysis\n\n### By using\n\n+ Boxplot(Uni)\n+ Scatterplot(multi)\n+ Z-score\n+ IQR-interquartile range","94a4dff4":"## Evaluation of Model\n\n+ Confusion Matrix\n+ Classification Report\n+ Accuracy score","e5df6abd":"### Detect outliers using IQR-interquartile range\n* H-Spread \/ Mid_Spread\n* Measures the statistical dispersion\/spread\n* IQR = Quantile 3(75) - Quantile 1(25)","f371bd40":"### Checking Feature importance\n+ ExtraTreeClassifier","d4d90156":"## Build Models\n","aa9d5818":"## Save Model\n+ Serialization\n+ Pickle\n+ Joblib\n+ numpy\/json\/ray","48d4f652":"## Create Lime Explainer\n\n* LimeTabularExplainer = Tables\n* LimeTextExplainer  = Text\n* LimeImageExplainer = Images\n","823afe85":"## Interpret model and Evaluate\n\n* Eil5\n* Lime\n* SHAP\n* Skater","c2dfd008":"* The data points with **TRUE** are the Outlier\n*  we can remove \/ change \/ Ignore","8d64213f":"* Highest Prevalence of Hepatitis is from 30-40 followed by 40 -50\n* The least is individual under 10, and elderly above 70","7635a38b":"#from pandas-ml import ConfusionMatrix\ncm = ConfusionMatrix(y_test_b,y_pred)\ncm.print_stats()\ncm.plot(normalized=True)\nplt.show()"}}