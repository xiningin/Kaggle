{"cell_type":{"2f85e852":"code","678d6f19":"code","9adb2c75":"code","31f62fc1":"code","ed765101":"code","3318bed3":"code","7660109a":"code","d9d5be60":"code","bb6e5cfe":"code","e6487878":"code","0ddd9333":"code","411a6c01":"code","63cbd4cd":"code","ad003b15":"code","5f724e9e":"code","1457abe8":"code","3d91fbb5":"code","abab586e":"code","46331385":"code","b156fb15":"code","257d8aee":"code","780b1219":"code","9bc0f774":"code","17de17ac":"markdown","53dd1457":"markdown","2fba8e76":"markdown","36a5755a":"markdown","11979ce0":"markdown","3e1e88ad":"markdown","12cb04fa":"markdown","c79a829f":"markdown","51a9c38c":"markdown","f722276a":"markdown","7c39651c":"markdown","e4a06097":"markdown","9abb232b":"markdown","19e539eb":"markdown","a2e65f42":"markdown","cb884840":"markdown","99b70fe5":"markdown","29b14bfe":"markdown"},"source":{"2f85e852":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport re\nimport folium\nfrom folium import plugins","678d6f19":"data = pd.read_csv(\"..\/input\/list-faskes-bpjs-indonesia\/Data Faskes BPJS 2019.csv\", header=0)","9adb2c75":"data.head()","31f62fc1":"data.info()","ed765101":"#Cleaning function\n#source: https:\/\/www.kaggle.com\/anggriyulio\/cleaning-data\n\ndef cleanNama(row):\n    str = row.replace('Kode Faskes dan Alamat Rumah Sakit BPJS di','')\n    return str\n\ndef removeSpace(row):\n    str = \" \".join(row.split())\n    return str","3318bed3":"data['KotaKab'] = data['KotaKab'].apply(removeSpace).apply(cleanNama)\ndata['NamaFaskes'] = data['NamaFaskes'].apply(removeSpace)\ndata['TelpFaskes'] = data['TelpFaskes'].apply(removeSpace)\ndata.drop(['Link', 'NoLink'], axis=1, inplace=True)\n\ndata.head()","7660109a":"data['NamaFaskes'] = data['NamaFaskes'].apply(removeSpace)\ndata['TelpFaskes'] = data['TelpFaskes'].apply(removeSpace)","d9d5be60":"data.head()","bb6e5cfe":"def searchLatLong(row):\n    str = re.search('(-?([0-9]{1}|[0-9]0|[1-8]{1,2}).[0-9]{1,6},(-?(1[0-8]{1,2}|9[1-9]{1}).[1-9]{1,6}))', row)\n    if str:\n        return str.group()\n    return np.NaN\n\ndata['LatLongFaskes'] = data['LatLongFaskes'].apply(searchLatLong)\n\nlat = []\nlon = []\n\nfor row in data['LatLongFaskes']:\n    try:\n        latitude = float(row.split(',')[0])\n        longitude = float(row.split(',')[1])\n        if (-90.0 <= latitude <= 90.0):\n            lat.append(latitude)\n        else:\n            lat.append(np.NaN)\n            \n        if (-180 <= longitude <= 180):\n            lon.append(longitude)\n        else:\n            lon.append(np.NaN)      \n    except:\n        lat.append(np.NaN)\n        lon.append(np.NaN)\n        \ndata['Latitude'] = lat\ndata['Longitude'] = lon\n\ndata.drop(['LatLongFaskes'], axis=1, inplace=True)\ndata.head()","e6487878":"provinsi = data['Provinsi'].unique().tolist()\nprint(provinsi)\nprint('\\nTotal provinsi: ', len(provinsi))","0ddd9333":"kabkota = data['KotaKab'].unique().tolist()\nprint(kabkota)\nprint('\\Total kota: ', len(kabkota))","411a6c01":"total_data_count = data.shape[0]\ngeographically_available_data_count = data.dropna().shape[0]\ngeographically_unavailable_data_count = data[data['Latitude'].isnull() | data['Longitude'].isnull()].shape[0]\n\nprint('\\nTotal data fasilitas: ', total_data_count)\nprint('\\nTotal fasilitas yang dapat ditampilkan di map: ', geographically_available_data_count)\nprint('\\nTotal fasilitas yang tidak dapat ditampilkan di map: ', geographically_unavailable_data_count)\n","63cbd4cd":"data_map = data.dropna()\ndata_map.info()","ad003b15":"data_map = data.dropna()\nrome_lat, rome_lng = -6.200000, 106.816666       \n# init the folium map object\nmy_map = folium.Map(location=[rome_lat, rome_lng], zoom_start=5)\n# add all the point from the file to the map object using FastMarkerCluster\nmy_map.add_child(plugins.FastMarkerCluster(data_map[['Latitude', 'Longitude']].values.tolist()))\n\nmy_map","5f724e9e":"data_kotakab = data['KotaKab'].value_counts().rename_axis('KotaKab').reset_index(name='Jumlah')\ndata_kotakab.head()","1457abe8":"# Mengambil latitude dan longitude data per kota\/kabupaten\nkabkota = []\nprov = []\nlatk = []\nlonk = []\n\ndata_n = data.dropna() #hapus kota\/kab tanpa latitude\/longitude agar data dapat dibuat map\n\nfor prv, kk, ltk, lnk in zip(data_n['Provinsi'], data_n['KotaKab'], data_n['Latitude'], data_n['Longitude']):\n    if (not(kk in kabkota) and not(ltk == np.NaN) and not(lnk == np.NaN)):\n        prov.append(prv)\n        kabkota.append(kk)\n        latk.append(ltk)\n        lonk.append(lnk)\n\nprint(len(kabkota))\n\ndata_map = pd.DataFrame(list(zip(prov, kabkota, latk, lonk)), columns=['Provinsi', 'KotaKab', 'Latitude', 'Langitude'])\ndata_map.head()\n                          ","3d91fbb5":"merged = pd.merge(data_map, data_kotakab, on='KotaKab')\nmerged.count()","abab586e":"# Create map\nbpjs_map = folium.Map(location=[10, -20], zoom_start=2.3,tiles='Stamen Toner')\n\nfor lat, lon, prov, kotakab, jml in zip(merged['Latitude'], merged['Langitude'], merged['Provinsi'], merged['KotaKab'], merged['Jumlah']):\n    folium.CircleMarker([lat, lon],\n                        radius=10,\n                        popup = ('<strong>Provinsi<\/strong>: ' + str(prov) + '<br>'\n                                '<strong>Kota\/Kab<\/strong>: ' + str(kotakab) + '<br>'\n                                '<strong>Jumlah<\/strong>: ' + str(jml)),\n                        color='red',\n                        \n                        fill_color='red',\n                        fill_opacity=0.3 ).add_to(bpjs_map)\nbpjs_map\n","46331385":"data_sorted = pd.DataFrame({'Provinsi':merged['KotaKab'], 'Jumlah':merged['Jumlah']})\ndata_sorted = data_sorted.sort_values(by=['Jumlah'], ascending=False)\n\ndata_sorted.head()","b156fb15":"temp_data = pd.DataFrame({'KotaKab':data_kotakab['KotaKab'], 'Jumlah':data_kotakab['Jumlah']})\n#data_sorted = temp_data.sort_values(by=['Jumlah'], ascending=False)[:30]\n\nf, ax = plt.subplots(figsize=(12, 8))\n\nsns.set_color_codes(\"muted\")\nsns.barplot(x=\"Jumlah\", y=\"KotaKab\", data=data_kotakab[:30],\n           label=\"Jumlah\", color=\"g\")\n\ndata_kotakab['Jumlah'].sum()","257d8aee":"temp_data = pd.DataFrame({'KotaKab':data_kotakab['KotaKab'], 'Jumlah':data_kotakab['Jumlah']})\ndata_sorted_asc = temp_data.sort_values(by=['Jumlah'], ascending=True)\n\nf, ax = plt.subplots(figsize=(12, 8))\n\nsns.set_color_codes(\"muted\")\nsns.barplot(x=\"Jumlah\", y=\"KotaKab\", data=data_kotakab.tail(30),\n           label=\"Jumlah\", color=\"g\")\n","780b1219":"data_provinsi = data['Provinsi'].value_counts().rename_axis('Provinsi').reset_index(name='Jumlah')\ndata_provinsi.head()","9bc0f774":"temp_data = pd.DataFrame({'Provinsi':data_provinsi['Provinsi'], 'Jumlah':data_provinsi['Jumlah']})\ndata_sorted = temp_data.sort_values(by=['Jumlah'], ascending=False)\n\nf, ax = plt.subplots(figsize=(12, 8))\n\nsns.set_color_codes(\"muted\")\nsns.barplot(x=\"Jumlah\", y=\"Provinsi\", data=data_provinsi,\n           label=\"Jumlah\", color=\"g\")","17de17ac":"#### Visualisasi jumlah fasilitas kesehatan ber-BPJS pada berdasarkan provinsi","53dd1457":"#### Bersihkan nama dan spasi","2fba8e76":"#### Kota\/Kabupaten dengan Fasilitas Kesehatan ber-BPJS","36a5755a":"#### Data berdasarkan provinsi","11979ce0":"#### Kota\/Kabupaten dengan jumlah fasilitas kesehatan ber-BPJS terendah","3e1e88ad":"#### Visualisasi jumlah per kota\/kabupaten dengan latitude dan longitude yang tersedia","12cb04fa":"#### 1. Provinsi dengan Fasilitas Kesehatan ber-BPJS","c79a829f":"# 3. Data Analysis","51a9c38c":"#### Bersihkan latitude dan longitude","f722276a":"# 2. Data Cleaning","7c39651c":"## Visualisasi geografis 16499 fasilitas kesehatan ber-BPJS","e4a06097":"## Visualisasi barplot  29157 data","9abb232b":"# 1. Data Ingestion","19e539eb":"## Import Libraries","a2e65f42":"#### Geographically available and unavailable data","cb884840":"#### Kota\/Kabupaten dengan jumlah fasilitas kesehatan ber-BPJS tertinggi","99b70fe5":"# 4. Data Visualization","29b14bfe":"#### Visualisasi data dengan data geografis dengan folium FastMarkCluster"}}