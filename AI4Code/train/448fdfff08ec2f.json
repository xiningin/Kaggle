{"cell_type":{"8a902be4":"code","d2f02997":"code","26ec175d":"code","f9f42a06":"code","aeac87c8":"code","7ff612e3":"code","66f1ddbe":"code","ad949d4e":"code","28224364":"code","4b4883cb":"code","5c8d5764":"code","050dfea1":"code","7f50f28a":"code","71584d85":"code","c6d89779":"markdown","eb98cde7":"markdown","c9cbbff2":"markdown","717bfd55":"markdown","ae6b145b":"markdown","004520e1":"markdown","34b070db":"markdown","0d5281de":"markdown","e216797f":"markdown"},"source":{"8a902be4":"!pip -qq install mmcv-full","d2f02997":"!git clone https:\/\/github.com\/open-mmlab\/mmdetection.git\n%cd mmdetection\n\n!pip -qq install -e .","26ec175d":"# # Pretrain Model Download\n# # Cascade\n# !mkdir checkpoints\n# !wget -c http:\/\/download.openmmlab.com\/mmdetection\/v2.0\/cascade_rcnn\/cascade_rcnn_r50_caffe_fpn_1x_coco\/cascade_rcnn_r50_caffe_fpn_1x_coco_bbox_mAP-0.404_20200504_174853-b857be87.pth -O checkpoints\/cascade_rcnn_r50_caffe_fpn_1x_coco_bbox_mAP-0.404_20200504_174853-b857be87.pth\n\n# # RegNet\n# !mkdir checkpoints\n# !wget -c http:\/\/download.openmmlab.com\/mmdetection\/v2.0\/regnet\/faster_rcnn_regnetx-3.2GF_fpn_mstrain_3x_coco\/faster_rcnn_regnetx-3.2GF_fpn_mstrain_3x_coco_20200520_224253-bf85ae3e.pth\n\n# # VFNet\n!mkdir checkpoints\n!wget -c https:\/\/openmmlab.oss-cn-hangzhou.aliyuncs.com\/mmdetection\/v2.0\/vfnet\/vfnet_r50_fpn_mdconv_c3-c5_mstrain_2x_coco\/vfnet_r50_fpn_mdconv_c3-c5_mstrain_2x_coco_20201027pth-6879c318.pth\n","f9f42a06":"from mmcv import Config\nfrom mmdet.apis import set_random_seed\nfrom mmdet.datasets import build_dataset\nfrom mmdet.models import build_detector\nfrom mmdet.apis import train_detector, init_detector, inference_detector\n\nfrom IPython.display import clear_output","aeac87c8":"# ## Configuration Setting for Cascade RCNN\n# cfg = Config.fromfile('.\/configs\/cascade_rcnn\/cascade_rcnn_r50_fpn_1x_coco.py')\n# DATASET_TYPE = 'CocoDataset'\n# PREFIX = '..\/..\/input\/vinbigdata-coco-dataset-with-wbf-3x-downscaled\/vinbigdata-coco-dataset-with-wbf-3x-downscaled\/'\n# cfg.dataset_type = DATASET_TYPE\n# cfg.classes = (\"Aortic_enlargement\", \"Atelectasis\", \n#                \"Calcification\", \"Cardiomegaly\", \n#                \"Consolidation\", \"ILD\", \"Infiltration\", \n#                \"Lung_Opacity\", \"Nodule\/Mass\", \"Other_lesion\", \n#                \"Pleural_effusion\", \"Pleural_thickening\", \n#                \"Pneumothorax\", \"Pulmonary_fibrosis\")\n\n# for i in cfg.model.roi_head.bbox_head:\n#     i.num_classes = 14","7ff612e3":"# ## Configuration Setting\n# cfg = Config.fromfile('.\/configs\/regnet\/faster_rcnn_regnetx-3.2GF_fpn_mstrain_3x_coco.py')\n# DATASET_TYPE = 'CocoDataset'\n# PREFIX = '..\/..\/input\/vinbigdata-coco-dataset-with-wbf-3x-downscaled\/vinbigdata-coco-dataset-with-wbf-3x-downscaled\/'\n# cfg.dataset_type = DATASET_TYPE\n# cfg.classes = (\"Aortic_enlargement\", \"Atelectasis\", \n#                \"Calcification\", \"Cardiomegaly\", \n#                \"Consolidation\", \"ILD\", \"Infiltration\", \n#                \"Lung_Opacity\", \"Nodule\/Mass\", \"Other_lesion\", \n#                \"Pleural_effusion\", \"Pleural_thickening\", \n#                \"Pneumothorax\", \"Pulmonary_fibrosis\")\n\n# cfg.model.roi_head.bbox_head.num_classes = 14","66f1ddbe":"## Configuration Setting\ncfg = Config.fromfile('.\/configs\/vfnet\/vfnet_r50_fpn_mstrain_2x_coco.py')\nDATASET_TYPE = 'CocoDataset'\nPREFIX = '..\/..\/input\/vinbigdata-coco-dataset-with-wbf-3x-downscaled\/vinbigdata-coco-dataset-with-wbf-3x-downscaled\/'\ncfg.dataset_type = DATASET_TYPE\ncfg.classes = (\"Aortic_enlargement\", \"Atelectasis\", \n               \"Calcification\", \"Cardiomegaly\", \n               \"Consolidation\", \"ILD\", \"Infiltration\", \n               \"Lung_Opacity\", \"Nodule\/Mass\", \"Other_lesion\", \n               \"Pleural_effusion\", \"Pleural_thickening\", \n               \"Pneumothorax\", \"Pulmonary_fibrosis\")\n\ncfg.model.bbox_head.num_classes = 14","ad949d4e":"cfg.data.train.img_prefix = PREFIX\ncfg.data.train.classes = cfg.classes\ncfg.data.train.ann_file = PREFIX + 'train_annotations.json'\ncfg.data.train.type = DATASET_TYPE\n\n\ncfg.data.val.img_prefix = PREFIX\ncfg.data.val.classes = cfg.classes\ncfg.data.val.ann_file = PREFIX + 'val_annotations.json'\ncfg.data.val.type = DATASET_TYPE\n\n\n\ncfg.data.test.img_prefix = PREFIX\ncfg.data.test.classes = cfg.classes\ncfg.data.test.ann_file = PREFIX + 'val_annotations.json'\ncfg.data.test.type = DATASET_TYPE","28224364":"cfg.optimizer.lr = 0.02 \/ 8\ncfg.lr_config.warmup = None\ncfg.log_config.interval = 100\n\n# Change the evaluation metric since we use customized dataset.\ncfg.evaluation.metric = 'bbox'\n# We can set the evaluation interval to reduce the evaluation times\ncfg.evaluation.interval = 5\n# We can set the checkpoint saving interval to reduce the storage cost\ncfg.checkpoint_config.interval = 5\n\n# Set seed thus the results are more reproducible\ncfg.seed = 0\nset_random_seed(0, deterministic=False)\ncfg.gpu_ids = range(1)\n\n# we can use here mask_rcnn.\n# cfg.load_from = '.\/checkpoints\/cascade_rcnn_r50_caffe_fpn_1x_coco_bbox_mAP-0.404_20200504_174853-b857be87.pth'\n# cfg.load_from ='faster_rcnn_regnetx-3.2GF_fpn_mstrain_3x_coco_20200520_224253-bf85ae3e.pth'\ncfg.load_from = 'vfnet_r50_fpn_mdconv_c3-c5_mstrain_2x_coco_20201027pth-6879c318.pth'\ncfg.work_dir = \"..\/vinbig_output\"\n\ncfg.runner.max_epochs = 12\ncfg.total_epochs = 12","4b4883cb":"clear_output()\nmodel = build_detector(cfg.model)\ndatasets = [build_dataset(cfg.data.train)]","5c8d5764":"import torch \n","050dfea1":"train_detector(model, datasets[0], cfg, distributed=False, validate=True)","7f50f28a":"import os\nos.chdir('..\/')","71584d85":"!python .\/mmdetection\/tools\/analysis_tools\/analyze_logs.py plot_curve .\/vinbig_output\/None.log.json --keys s2.loss_cls --legend s2.loss_cls --out \"loss_cls.jpg\"\n!rm -rf \".\/mmdetection\"","c6d89779":"# Download Pretrain Model","eb98cde7":"# Install MMDetection","c9cbbff2":"# Let's use Different Models!\n\n## Object\n\nThis notebook is for kagglers who wants to use more models after simple Faste RCNN codes or EfficientDet.  \nI will show the another models in this notebook (Cascade Models, Different Backbones, and etc ...) \n\nI hope you enjoy and don't forget to upvote :D\n\n# Code History\n* Ver1, 2 - Start (3\/1)  \n\n\n# Results\n\nCascade RCNN - Using valdiation dataset\nCOCO Eval mAP(IoU 0.5)\n\n| Model | 5 epoch  | 10 epoch |\n|---:|---:|---:|\n|ResNet50| 0.182 | 0.239 |\n","717bfd55":"# Cascade RCNN Setting","ae6b145b":"# VFNet","004520e1":"\n# Simple Kernel Survey\nI tried to catch up previous kernels and summarized like this.  \nThe whole pipeline for this competetion can be divided into 3 parts.   \nIf you interested below topics, check the number and references\n![image.png](attachment:image.png)\n\n\n1. Dataset\n    * Some kernels tried to use VinbigData to COCO Format - 2)\n    * One useful kernel did comparision between Box Fusion techniques and made Dataset - 2)\n    * Some kernels tried to use Image Processing techniques and get better results - 3)\n    * Some kernels tried to find proper Image Resolution - 12)\n2. Train\n    * Some kernels use TF EfficientDet modules - 6)\n    * YoloV5 - 8)\n    * Faster RCNN - 1)\n    * Detectron2 - 7)\n3. Inference\n    * After Inference to reduce the fp, one useful kernel use 2 class filter - 5)\n    * Good EDA using YoloV5 - 10, 11)","34b070db":"# Reference\nI heavily borrowed the installation and config codes from 1) and used the dataset from 2)  \n\nplease upvote below references.\n\n1) [MMDET(pytorch) Framework Training: FasterRCNN Base](https:\/\/www.kaggle.com\/gauravsingh1\/mmdet-pytorch-framework-training-fasterrcnn-base)\n\n2) [VinBigData - Fusing Bboxes + Coco Dataset](https:\/\/www.kaggle.com\/sreevishnudamodaran\/vinbigdata-fusing-bboxes-coco-dataset\/#data)\n\n3) [Which X-ray preprocessing performs well?](https:\/\/www.kaggle.com\/kuuuuub\/which-x-ray-preprocessing-performs-well)\n\n4) [x-ray image Enhancement test](https:\/\/www.kaggle.com\/kuuuuub\/x-ray-image-enhancement-test\/data)\n\n5) [VinBigData-CXR-AD YOLOv5 14 Class [train]](https:\/\/www.kaggle.com\/awsaf49\/vinbigdata-cxr-ad-yolov5-14-class-train)\n\n6) [\u26a1VBD EfficientDET TF2 Object Detection API\u26a1\ud83d\udcc8](https:\/\/www.kaggle.com\/sreevishnudamodaran\/vbd-efficientdet-tf2-object-detection-api)\n\n7) [\ud83d\udcf8VinBigData detectron2 train](https:\/\/www.kaggle.com\/corochann\/vinbigdata-detectron2-train)\n\n8) [VinBigData-CXR-AD YOLOv5 14 Class [train]](https:\/\/www.kaggle.com\/awsaf49\/vinbigdata-cxr-ad-yolov5-14-class-train)\n\n9) [VinBigData \ud83c\udf1f2 Class Filter\ud83c\udf1f](https:\/\/www.kaggle.com\/awsaf49\/vinbigdata-2-class-filter)\n\n10) [Quick data analysis with YOLOv5 at a glance](https:\/\/www.kaggle.com\/jamsilkaggle\/quick-data-analysis-with-yolov5-at-a-glance)\n\n11) [VinBigData EDA+Infer Analysis with YOLOv5](https:\/\/www.kaggle.com\/kimse0ha\/vinbigdata-eda-infer-analysis-with-yolov5)\n\n12) [256 vs 512 vs 1024? Which dataset is useful?](https:\/\/www.kaggle.com\/seokhyunseo\/256-vs-512-vs-1024-which-dataset-is-useful)","0d5281de":"# Inference Validation ","e216797f":"# RegNet (Best) Setting"}}