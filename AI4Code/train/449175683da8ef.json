{"cell_type":{"7a9d6efb":"code","bde13ba1":"code","0820a9fd":"code","b7620423":"code","84120cf2":"code","31db750b":"code","3b9cfcba":"code","f08638b2":"code","783b3dd5":"code","0c443255":"code","857eae33":"code","7fcdb62f":"code","fb166612":"code","155d81a3":"code","63e7881b":"code","fedb55f9":"code","2c974505":"code","b8401590":"code","8d2beb02":"code","b83a0c03":"code","e59089e1":"code","3debaedc":"code","765e28a4":"code","2e5b7d82":"markdown","b740e19b":"markdown","f3378ab6":"markdown"},"source":{"7a9d6efb":"!pip install rasterio\n!pip install geopandas\n!pip install sentinelsat\nimport os, sys\nimport numpy as np\nimport rasterio\nfrom sentinelsat.sentinel import SentinelAPI, read_geojson, geojson_to_wkt\nfrom datetime import date\nimport getpass\n\nimport pandas as pd\nimport geopandas as gpd\nfrom matplotlib import pyplot as plt\n\n%matplotlib inline","bde13ba1":"# connect to the API\nuser = 'Username' # enter the username\n# user = input('Sentinel Hub Username: ')\npw = getpass.getpass('Sentinel Hub Password: ')\napi = SentinelAPI(user, pw, 'https:\/\/scihub.copernicus.eu\/dhus')\n\n# download single scene by known product id\n#api.download(<product_id>)","0820a9fd":"api","b7620423":"gj_geom = {\n\"type\": \"FeatureCollection\",\n\"name\": \"SELECT\",\n\"crs\": { \"type\": \"name\", \"properties\": { \"name\": \"urn:ogc:def:crs:OGC:1.3:CRS84\" } },\n\"features\": [\n{ \"type\": \"Feature\", \"properties\": { }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 78.790282313505003, 14.722851905653091, 0.0 ], [ 78.78944315111346, 14.723002082692179, 0.0 ], [ 78.789509498945648, 14.724354341456941, 0.0 ], [ 78.790479227929708, 14.724338990131089, 0.0 ], [ 78.790282313505003, 14.722851905653091, 0.0 ] ] ] } }\n]\n}\n","84120cf2":"# search by polygon, time, and Hub query keywords... \n# 7\/24\/2016 is date of DG strip which was used for impervious surface mapping\n# 6\/1\/2018 - 7\/31\/2019 are containement dates for durango 416 fire\n# 12\/4\/2017 - 1\/12\/2018 are containment dates for Thomas fire\n\nfootprint = geojson_to_wkt(gj_geom)\nproducts_S2 = api.query(footprint,\n                     date = ('20191201', date(2019, 12, 15)),\n                     platformname = 'Sentinel-2',\n                     cloudcoverpercentage = (0, 30))\n \n# products_S1 = api.query(footprint,\n#                      date = ('20191201', date(2019, 12, 15)),\n#                      platformname = 'Sentinel-1', \n#                      polarizationmode = 'VV')","31db750b":"products_S1 = api.query(footprint,\n                         date = ('20191201', date(2019, 12, 15)), \n                        producttype='SLC')","3b9cfcba":"products_S1","f08638b2":"s1_items = list(products_S1.items())\ns1_items[0]\n\n# should also be able to convert to pandas\ns1_res_df = api.to_geodataframe(products_S1)\ns2_res_df = api.to_geodataframe(products_S2)","783b3dd5":"# s1_res_df.plot()\n# plt.show()\ns1_res_df.shape, s2_res_df.shape\n","0c443255":"print('Sentinel-1 results')\ns1_res_df.head()","857eae33":"print('Sentinel-2 results')\ns2_res_df.head()","7fcdb62f":"s2_res_df.describe()['cloudcoverpercentage']","fb166612":"s1_res_df.describe()","155d81a3":"## subset Sentinel-1 results by 'producttype'\nprod_groups_list = list(s1_res_df.groupby('producttype'))\nfor i, item in enumerate(prod_groups_list):\n    print(i, 'producttype: ', item[0])\n    \n# GRD_df = prod_groups_list[0][1]\n# RAW_df = prod_groups_list[1][1]\nSLC_df = prod_groups_list[0][1]","63e7881b":"# print('Sentinel-1 GRD products')\n# GRD_df.head()","fedb55f9":"# print('Sentinel-1 RAW products')\n# RAW_df.head()","2c974505":"print('Sentinel-1 SLC products')\nSLC_df.head()","b8401590":"# download a couple scenes by uuid\n# help(api.download)\nSLC_uuid = SLC_df['uuid'][1]\nSLC_title = SLC_df['title'][1]\nif not os.path.exists(SLC_title + '.zip'):\n    print('Downloading SLC product')\n    SLC_dl = api.download(SLC_uuid)\n\n# same for GRD product\nGRD_uuid = GRD_df['uuid'][1]\nGRD_title = GRD_df['title'][1]\nif not os.path.exists(GRD_title + '.zip'):\n    print('Downloading GRD product')\n    GRD_dl = api.download(GRD_uuid)","8d2beb02":"## you can get the path by assigning the download call to a variable \nimport zipfile\nfor zippath in (SLC_dl['path'], GRD_dl['path']):\n    zip_ref = zipfile.ZipFile(zippath, 'r')\n    zip_ref.extractall(os.path.join('.', 's1_files'))\n    zip_ref.close()","b83a0c03":"SLC_dl","e59089e1":"## open the file with rasterio\n# SLC_fi = os.path.join('s1_files', SLC_dl['title'] + '.SAFE', 'manifest.safe')\nSLC_fi = '\/content\/s1_files\/S1A_IW_SLC__1SDV_20191209T003127_20191209T003155_030264_0375D2_F3F2.SAFE\/manifest.safe'\n# s1_filepath = r\"C:\\Projects\\sentinel_api\\s1_files\\S1A_IW_RAW__0SSV_20161216T130058_20161216T130130_014405_0175A1_975B.SAFE\\s1a-iw-raw-s-vv-20161216t130058-20161216t130130-014405-0175a1.dat\"\n# s1_filepath = r\"C:\/Projects\/sentinel_api\/s1_files\/S1A_IW_GRDH_1SDV_20160830T010152_20160830T010217_012823_01439D_86AC.SAFE\/manifest.safe\"\n\nfor prd in (SLC_title, GRD_title):\n    SLC_fi = os.path.join('s1_files', prd + '.SAFE', 'manifest.safe')\n    with rasterio.open(SLC_fi, 'r') as src:\n        print(src.profile)\n        #arr = src.read() # careful... this could kill the kernel\n        #print(arr.shape)\n\n    with rasterio.open(SLC_fi, 'r') as src:    \n        for ji, window in src.block_windows(1):\n            r = src.read(1, window=window)\n            print(r.shape)\n            break\n\n    with rasterio.open(SLC_fi, 'r') as src:\n        r = src.read(1, window=((7000,12500), (7500,12500)))\n        print(r.shape)\n\n    if 'SLC' in prd:\n        arr = np.abs(r)\n        print(arr.min(), arr.max(), arr.mean())\n        plt.imshow(arr, cmap='plasma_r', vmin=arr.min(), vmax=arr.mean() + 100)\n        plt.colorbar()\n        plt.show()\n    else:\n        print(r.min(), r.max(), r.mean())\n        print('clipping to mean + 100')\n        plt.imshow(r, cmap='plasma_r', vmin=r.min(), vmax=r.mean() + 100)\n        plt.colorbar()\n        plt.show()\n        \n    \n\n# !gdalinfo $SLC_fi","3debaedc":"sub_arr = arr[:, 100:200, 100:200]\nplt.imshow(sub_arr[0])\nplt.show()\nplt.imshow(sub_arr[1])\nplt.show()\nplt.imshow(sub_arr[0] - sub_arr[1])","765e28a4":"help(api.query)","2e5b7d82":"# Autodownload sentinel-1 data from [sentinel browser](https:\/\/apps.sentinel-hub.com\/eo-browser\/) with this notebook\n\n![image.png](attachment:image.png)\n\n\n","b740e19b":"## Execute a search query. for all keyword options, see lower section of https:\/\/scihub.copernicus.eu\/twiki\/do\/view\/SciHubUserGuide\/3FullTextSearch ","f3378ab6":"## specify a geometry from http:\/\/geojson.io ... this is near Denver "}}