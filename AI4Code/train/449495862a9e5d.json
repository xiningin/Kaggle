{"cell_type":{"fd11ed0c":"code","f1e34bad":"code","a8076c84":"code","ec753d40":"code","e8a7178a":"code","c40f4376":"code","75144632":"code","d2efde03":"code","64514e2b":"code","fc9d3564":"code","bdcbe535":"code","bb9f0698":"code","e1f96abf":"markdown","0a3165aa":"markdown","cbe2ca64":"markdown","d515e35e":"markdown","746d0622":"markdown","f5a32054":"markdown"},"source":{"fd11ed0c":"import numpy as np\nimport pandas as pd\nimport math\nimport matplotlib.pyplot as plt\nfrom scipy import stats","f1e34bad":"df = pd.read_excel('..\/input\/covid19\/dataset.xlsx')\npositive = df.loc[df['SARS-Cov-2 exam result'] == 'positive']\nnegative = df.loc[df['SARS-Cov-2 exam result'] == 'negative']","a8076c84":"negative_99_missing_fields = set([col for col in negative.columns if negative[col].isnull().mean() >= 0.99])\npositive_99_missing_fields = set([col for col in positive.columns if positive[col].isnull().mean() >= 0.99])\nassuming_not_important = list(negative_99_missing_fields.intersection(positive_99_missing_fields))\nassuming_not_important","ec753d40":"exclude_col = ['Patient ID', 'SARS-Cov-2 exam result', 'Phosphor', 'Albumin', 'Patient age quantile', \n               'Ionized calcium', 'Urine - Density', 'Urine - Red blood cells', 'Ferritin', 'Ionized calcium\\xa0']\ncategorical_field = [col for col in df.columns if df[col].dtype == 'object' and col not in assuming_not_important+exclude_col]\nnumerical_fields = [col for col in df.columns if col not in categorical_field+exclude_col]\ncontinuous_fields = [col for col in numerical_fields if len(df[col].unique()) > 10]","e8a7178a":"fig, ax = plt.subplots(len(continuous_fields), 3, figsize=(13,200))\nrow = 0\nfor item in range(0, len(continuous_fields)):\n    ax[row, 0].scatter(negative[continuous_fields[item]],negative[continuous_fields[item]], c='yellow')\n    ax[row, 0].scatter(positive[continuous_fields[item]],positive[continuous_fields[item]], c='red')\n    ax[row, 0].set_title(continuous_fields[item])\n    ax[row, 0].grid(True)\n\n    ax[row, 1].hist(negative[continuous_fields[item]].dropna(), color='yellow')\n    ax[row, 1].hist(positive[continuous_fields[item]].dropna(), color='red')\n    ax[row, 1].set_title(continuous_fields[item])\n    ax[row, 1].grid(True)\n\n    ax[row, 2].boxplot(positive[continuous_fields[item]].dropna())\n    ax[row, 2].set_title(continuous_fields[item])\n    ax[row, 2].grid(True)\n    \n    row = row + 1\n\nplt.tight_layout()\nplt.show()","c40f4376":"clinical_test_confidence = {}\nfor col in continuous_fields:\n    confidence_high = stats.norm.interval(0.68, loc=positive[col].dropna().mean(), scale=positive[col].dropna().std())\n    confidence_medium = stats.norm.interval(0.95, loc=positive[col].dropna().mean(), scale=positive[col].dropna().std())\n    confidence_low = stats.norm.interval(0.99, loc=positive[col].dropna().mean(), scale=positive[col].dropna().std())\n    clinical_test_confidence[col + '_high'] = list(confidence_high)\n    clinical_test_confidence[col + '_medium'] = list(confidence_medium)\n    clinical_test_confidence[col + '_low'] = list(confidence_low)\nclinical_test_confidence_df = pd.DataFrame(clinical_test_confidence)\nclinical_test_confidence_df","75144632":"def transform_data(data, column):\n    row = ''\n    low1, low2 = clinical_test_confidence_df[column + '_low']\n    med1, med2 = clinical_test_confidence_df[column + '_medium']\n    high1, high2 = clinical_test_confidence_df[column + '_high']\n    \n    if data and data < low1 and data > low2:\n        row = 0\n    \n    elif data and (data > low1 and data < med1) or (data > med2 and data < low2):\n        row = 1\n    \n    elif data and (data > med1 and data < high1) or (data > high2 and data < med2):\n        row = 2\n    \n    elif data and data > high1 and data < high2:\n        row = 3\n    \n    return row","d2efde03":"df_new = pd.DataFrame()\nfor col in continuous_fields:\n    df_new[col] = df[col].apply(lambda row: transform_data(row, col))","64514e2b":"fig, ax = plt.subplots(math.ceil(len(categorical_field)\/3), 3, figsize=(15,60))\nrow = 0\nfor item in range(0, len(categorical_field), 3):\n    for col in range(0, 3):\n        try:\n            positive.fillna('NULL').groupby([categorical_field[item+col]])[categorical_field[item+col]].count().plot.bar(ax=ax[row, col])\n            ax[row, col].set_title(categorical_field[item+col])\n            ax[row, col].set_xlabel('')\n            ax[row, col].grid(True)\n        except Exception:\n            ax[row, col].axis('off')\n    \n    row = row + 1\n\nplt.tight_layout()\nplt.show()","fc9d3564":"def simple_score(data):\n    score = 1\n    for col in data.items():\n        if col[1]:\n            score = score + col[1]\n    \n    return score","bdcbe535":"df['score'] = df_new.apply(lambda row: simple_score(row), axis=1)","bb9f0698":"fig, ax = plt.subplots(1, 2, figsize=(20,5))\nax[0].hist(df['score'].loc[(df['SARS-Cov-2 exam result'] == 'positive') & (df['score'] != 1)])\nax[0].set_title('Score frequency for positive cases')\nax[0].grid(True)\nax[1].hist(df['score'].loc[(df['SARS-Cov-2 exam result'] == 'negative') & (df['score'] != 1)])\nax[1].set_title('Score frequency for negative cases')\nax[1].grid(True)\nplt.show()","e1f96abf":"![image.png](attachment:image.png)","0a3165aa":"![image.png](attachment:image.png)\n1. May be this tests are not so important and due to this doctors are not recomending to do this.\n2. Data collections error.\n3. Allah knows what is the inline truth here for this much missing ness.","cbe2ca64":"![image.png](attachment:image.png)","d515e35e":"![image.png](attachment:image.png)\nThis study is to explore ground truth to predict COVID-19 from clinical test result.\n\nThis study contains:\n1. Feature Engineering and EDA\n2. Prediction","746d0622":"![image.png](attachment:image.png)","f5a32054":"![image.png](attachment:image.png)"}}