{"cell_type":{"13703e83":"code","a2c78967":"code","3b06e360":"code","81601ec6":"code","3c8ad122":"code","94b66774":"code","e6379032":"code","cde8df1d":"code","3ed2e2b9":"code","d076168e":"code","5b1fdbd9":"code","13a9d881":"code","dc8b17d7":"code","ff1a8261":"code","3e88a682":"code","99871db9":"code","6fa8bc9e":"code","d7eed2c6":"code","d02c08ec":"code","934be13a":"code","462e9bfe":"code","72cf32c0":"code","7217c1d1":"code","7e03b61f":"code","bf159f01":"code","8510fc14":"code","73101dda":"code","88a12f06":"code","bd6410d0":"code","6490f4b5":"code","7d7362e3":"code","7912422e":"markdown","bfff7220":"markdown","da6c0ab6":"markdown","cfa1c3c3":"markdown","d4a5ea27":"markdown","daaec439":"markdown","ca3b85e3":"markdown","354502c3":"markdown","b12212b4":"markdown","7f2e8283":"markdown","be58c08b":"markdown","c41da15b":"markdown","914ab318":"markdown"},"source":{"13703e83":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mplimg\nimport seaborn as sns\nfrom matplotlib.pyplot import imshow\nfrom matplotlib import pyplot\nfrom keras.backend import clear_session\nimport keras\n\nfrom keras import applications\nfrom keras import layers\nfrom keras.layers import Flatten, Input, Add, Dense, Activation, ZeroPadding2D, BatchNormalization, Flatten, Conv2D, AveragePooling2D, MaxPooling2D, GlobalMaxPooling2D, Dropout  \nfrom keras.models import Sequential, Model, load_model  \nfrom keras.preprocessing import image\nfrom keras.applications.imagenet_utils import preprocess_input\nimport keras.backend as K  \nfrom keras.callbacks import ModelCheckpoint  \nfrom keras.callbacks import EarlyStopping\n\nfrom sklearn.preprocessing import LabelEncoder,OneHotEncoder\nfrom sklearn.model_selection import train_test_split\n\nfrom keras.preprocessing.image import ImageDataGenerator\n\nclear_session()\n\n# Any results you write to the current directory are saved as output.\n\n## funtions\n   \ndef graph_acc_loss(model):\n    \n    sns.set(style = 'darkgrid')\n    plt.figure(figsize = (24, 8))\n    plt.subplot(2, 2, 1)\n    #plt.plot(range(100), model.history['acc'])\n    plt.plot(model.history['acc'],'r')  \n    #plt.plot(model.history['val_acc'],'g')  \n    plt.ylabel('TRAINING ACCURACY')\n    plt.title('TRAINING ACCURACY vs EPOCHS')\n    plt.legend(['train','validation'])\n    \n    plt.subplot(2, 2, 2)\n    plt.plot(model.history['loss'],'r')  \n    #plt.plot(model.history['val_loss'],'g')  \n    plt.ylabel('TRAINING LOSS')\n    plt.title('TRAINING LOSS vs EPOCHS')\n    plt.legend(['train','validation'])\n    \n    plt.subplot(2, 2, 3)\n    plt.plot(model.history['categorical_accuracy'],'b')  \n    plt.xlabel('EPOCHS')\n    plt.ylabel('TRAINING CATEGORICAL ACCURACY')\n    plt.title('TRAINING CATEGORICAL ACCURACY vs EPOCHS')\n    plt.legend(['categorical_accuracy'])\n    \n    plt.subplot(2, 2, 4)\n    plt.plot(model.history['categorical_crossentropy'],'b')  \n    plt.xlabel('EPOCHS')\n    plt.ylabel('TRAINING CATEGORICAL CROSSENTROPY')\n    plt.title('TRAINING CATEGORICAL CROSSENTROPY vs EPOCHS')\n    plt.legend(['categorical_crossentropy'])\n    \n    \ndef prepare_data(df,width,heigth, channel):\n    n_of_images = df.shape[0]\n    channel = 3\n    # preparing X numpy array with the images content\n    #X = np.zeros((15697,48,48,3))\n    X = np.zeros((n_of_images,width,heigth, channel))\n    count = 0\n    \n    for file in df['Image']:\n        img = image.load_img('..\/input\/humpback-whale-identification\/train\/%s' % file,target_size=(width,heigth, channel))\n        x = image.img_to_array(img)\n        x = preprocess_input(x)\n        \n        X[count] = x\n        \n        if(count%4000==0):\n            print(\"ProcessingImage : \" , count+1,\", \",file)\n        count += 1\n    print (\"Total %s load ok\" % count)\n    # preparing Y numpy with de name of files , labelencoded and onehot encoded apply\n    y_encoded = df['Id'].values\n    values = np.array(y_encoded)\n    label_encoder = LabelEncoder()\n    integer_encoded = label_encoder.fit_transform(values)\n    #print(integer_encoded)\n\n    onehot_encoder = OneHotEncoder(sparse=False)\n    integer_encoded = integer_encoded.reshape(len(integer_encoded),1)\n    onehot_encoded = onehot_encoder.fit_transform(integer_encoded)\n    #print(onehot_encoded)\n    y = onehot_encoded\n   \n    # split dataset in 20% validate and rest to train\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)\n    \n    return X_train, X_test, y_train, y_test, integer_encoded\n\ndef prepare_labels(y):\n    values = np.array(y)\n    label_encoder = LabelEncoder()\n    integer_encoded = label_encoder.fit_transform(values)\n    # print(integer_encoded)\n\n    onehot_encoder = OneHotEncoder(sparse=False)\n    integer_encoded = integer_encoded.reshape(len(integer_encoded), 1)\n    onehot_encoded = onehot_encoder.fit_transform(integer_encoded)\n    # print(onehot_encoded)\n\n    y = onehot_encoded\n    # print(y.shape)\n    return y, label_encoder\n\ndef prepareImages(data, m, dataset):\n    print(\"Preparing images\")\n    X_train = np.zeros((m, 96, 96, 3))\n    count = 0\n    \n    for fig in data['Image']:\n        #load images into images of size 100x100x3\n        img = image.load_img(\"..\/input\/humpback-whale-identification\/\"+dataset+\"\/\"+fig, target_size=(96, 96, 3))\n        x = image.img_to_array(img)\n        x = preprocess_input(x)\n\n        X_train[count] = x\n        if (count%500 == 0):\n            print(\"Processing image: \", count+1, \", \", fig)\n        count += 1\n    \n    return X_train","a2c78967":"df_ = pd.read_csv('..\/input\/humpback-whale-identification\/train.csv', encoding='utf8')\nprint(df_['Id'].describe())","3b06e360":"#df = df_.loc[df_['Id'] != 'new_whale']\ndf = df_\nnumber_of_clases = len(df[\"Id\"].value_counts())\nprint (\"Number of Classes: %s\" % number_of_clases)","81601ec6":"df.head()","3c8ad122":"train = df\ncounted = train.groupby(\"Id\").count().rename(columns={\"Image\":\"image_count\"})\ncounted.loc[counted[\"image_count\"] > 60,'image_count'] = 60\nplt.figure(figsize=(25,4))\nsns.countplot(data=counted, x=\"image_count\")\nplt.show()","94b66774":"#X_train, X_test, y_train, y_test, integer_encoded = prepare_data(df,96,96,3)","e6379032":"train_df = pd.read_csv(\"..\/input\/humpback-whale-identification\/train.csv\")\nX = prepareImages(train_df, train_df.shape[0], \"train\")\nX \/= 255","cde8df1d":"y, label_encoder = prepare_labels(train_df['Id'])","3ed2e2b9":"from keras.metrics import categorical_accuracy, top_k_categorical_accuracy, categorical_crossentropy\nfrom keras.optimizers import Adam\nfrom keras.applications import MobileNet\nfrom keras.applications.mobilenet import preprocess_input\nimport keras\n\n#model = MobileNet(input_shape=(96, 96, 3), alpha=1., weights=None, classes=5004)\n\nmodel = MobileNet(input_shape=(96, 96, 3), alpha=1., weights=None, classes=5005)\nmodel.compile(optimizer=Adam(lr=0.002), loss='categorical_crossentropy',\n              metrics=['acc','mse',categorical_crossentropy, categorical_accuracy])\n#model.summary()","d076168e":"\n#mobilenet = model.fit(x=X_train\/255, y=y_train, epochs=600, batch_size=100, verbose=1, validation_data=(X_test\/255, y_test), shuffle=True)\nmc = keras.callbacks.ModelCheckpoint('weights{epoch:08d}.h5', \n                                     save_weights_only=True, period=5)\nmobilenet = model.fit(X, y, epochs=100\n                       , batch_size=100, verbose=1, callbacks=[mc], shuffle=True)","5b1fdbd9":"graph_acc_loss(mobilenet)","13a9d881":"##Save partly trained model \nmodel.save('00_mobilenet_trained.h5')","dc8b17d7":"# Feature Standardization\ndef augmentation_feature_standardization(X_train):\n    X_train_clone = X_train\n    datagen = ImageDataGenerator(featurewise_center=True, featurewise_std_normalization=True)\n    datagen.fit(X_train_clone)\n    return datagen\n\n# Random Flips\ndef augmentation_random_flips(X_train):\n    X_train_clone = X_train\n    datagen = ImageDataGenerator(horizontal_flip=True, vertical_flip=True)\n    datagen.fit(X_train_clone)\n    return datagen\n\n# Random Rotations\ndef augmentation_random_rotations(X_train):\n    X_train_clone = X_train\n    datagen = ImageDataGenerator(rotation_range=90)    \n    datagen.fit(X_train_clone)\n    return datagen\n\n# Random shifts\ndef augmentation_random_shifts(X_train):\n    X_train_clone = X_train\n    datagen = ImageDataGenerator(width_shift_range=shift, height_shift_range=shift)    \n    datagen.fit(X_train_clone)\n    return datagen\n\n# ZCA whitening\ndef augmentation_random_zca(X_train):\n    X_train_clone = X_train\n    datagen = ImageDataGenerator(zca_whitening=True)   \n    datagen.fit(X_train_clone)\n    return datagen","ff1a8261":"#X_train_featureStandarization = augmentation_feature_standardization(X)\nX_train_randomFlips = augmentation_random_flips(X)\n#X_train_randomShifts = augmentation_random_shifts(X)\nX_train_randomRotations = augmentation_random_rotations(X)\n#X_train_randomZca = augmentation_random_zca(X)","3e88a682":"for X_batch, y_batch in X_train_randomFlips.flow(X,y, batch_size=9):\n    # create a grid of 3x3 images\n    for i in range(0, 9):\n        pyplot.subplot(330 + 1 + i)\n        pyplot.imshow(X_batch[i], cmap=pyplot.get_cmap('gray'))\n    # show the plot\n    pyplot.show()\n    break","99871db9":"batch_size=100\nmc = keras.callbacks.ModelCheckpoint('weights_Flips{epoch:08d}.h5', \n                                     save_weights_only=True, period=5)\n\nmobilenet1 = model.fit_generator(X_train_randomFlips.flow(X, y, batch_size=batch_size),\n                        verbose=1,\n                        callbacks=[mc],\n                        epochs=20,\n                        steps_per_epoch=X.shape[0] \/\/ batch_size)\n                        #use_multiprocessing=True,workers=6)","6fa8bc9e":"graph_acc_loss(mobilenet1)","d7eed2c6":"for X_batch, y_batch in X_train_randomShifts.flow(X,y, batch_size=9):\n    # create a grid of 3x3 images\n    for i in range(0, 9):\n        pyplot.subplot(330 + 1 + i)\n        pyplot.imshow(X_batch[i], cmap=pyplot.get_cmap('gray'))\n    # show the plot\n    pyplot.show()\n    break","d02c08ec":"batch_size=100\nmc = keras.callbacks.ModelCheckpoint('weights_Shifts{epoch:08d}.h5', \n                                     save_weights_only=True, period=5)\n\nmobilenet2 = model.fit_generator(X_train_randomShifts.flow(X, y, batch_size=batch_size),\n                        verbose=1,\n                        callbacks=[mc],\n                        epochs=20,\n                        steps_per_epoch=X.shape[0] \/\/ batch_size)\n                        #use_multiprocessing=True,workers=6)","934be13a":"graph_acc_loss(mobilenet2)","462e9bfe":"for X_batch, y_batch in X_train_randomRotations.flow(X,y, batch_size=9):\n    # create a grid of 3x3 images\n    for i in range(0, 9):\n        pyplot.subplot(330 + 1 + i)\n        pyplot.imshow(X_batch[i], cmap=pyplot.get_cmap('gray'))\n    # show the plot\n    pyplot.show()\n    break","72cf32c0":"batch_size=100\nmc = keras.callbacks.ModelCheckpoint('weights_Rotations{epoch:08d}.h5', \n                                     save_weights_only=True, period=5)\n\nmobilenet3 = model.fit_generator(X_train_randomRotations.flow(X, y, batch_size=batch_size),\n                        verbose=1,\n                        callbacks=[mc],\n                        epochs=20,\n                        steps_per_epoch=X.shape[0] \/\/ batch_size)\n                        #use_multiprocessing=True,workers=6)","7217c1d1":"graph_acc_loss(mobilenet3)","7e03b61f":"#X_train_randomZca = augmentation_random_zca(X_train)\n#mobilenet5 = model.fit(x=X_train_randomZca\/255, y=y_train, epochs=50, batch_size=100, verbose=1, validation_data=(X_test\/255, y_test), shuffle=True)\n#graph_acc_loss(mobilenet)","bf159f01":"##Save partly trained model \n#model.save('augmentation_mobilenet_trained.h5') \n#del model \n##Reload model \n#model = load_model('..\/input\/trained-v1\/00_mobilenet_trained.h5') ","8510fc14":"test = os.listdir(\"..\/input\/humpback-whale-identification\/test\/\")\nprint(len(test))\ncol = ['Image']\ntest_df = pd.DataFrame(test, columns=col)\ntest_df['Id'] = ''\n\nXs = prepareImages(test_df, test_df.shape[0], \"test\")\nXs \/= 255\nys, label_encoder_s = prepare_labels(df['Id'])","73101dda":"prediction = model.predict(np.array(Xs), verbose=1)","88a12f06":"for i, pred in enumerate(prediction):\n    test_df.loc[i, 'Id'] = ' '.join(label_encoder_s.inverse_transform(pred.argsort()[-5:][::-1]))","bd6410d0":"test_df.to_csv('submission_v13.csv', index=False)","6490f4b5":"test_df.head(10)","7d7362e3":"# import the modules we'll need\n# https:\/\/www.kaggle.com\/rtatman\/download-a-csv-file-from-a-kernel\nfrom IPython.display import HTML\nimport pandas as pd\nimport numpy as np\nimport base64\n\n# function that takes in a dataframe and creates a text link to  \n# download it (will only work for files < 2MB or so)\ndef create_download_link(df, title = \"Download CSV file\", filename = \"submission_v10.csv\"):  \n    csv = df.to_csv(index=False)\n    b64 = base64.b64encode(csv.encode())\n    payload = b64.decode()\n    html = '<a download=\"{filename}\" href=\"data:text\/csv;base64,{payload}\" target=\"_blank\">{title}<\/a>'\n    html = html.format(payload=payload,title=title,filename=filename)\n    return HTML(html)\n\n# create a random sample dataframe\ndf = pd.DataFrame(np.random.randn(50, 8), columns=list('Image,Id'))\n\n# create a link to download the dataframe\ncreate_download_link(test_df)\n\n# \u2193 \u2193 \u2193  Yay, download link! \u2193 \u2193 \u2193 ","7912422e":"first we read the csv file, then using describe(), we can see how many unique types there are.","bfff7220":"## Read the train.csv and explore ","da6c0ab6":"## ** AUGMENTATION**\nhttps:\/\/machinelearningmastery.com\/image-augmentation-deep-learning-keras\/","cfa1c3c3":"## **MobileNet**","d4a5ea27":"To start we will train using MobileNet (https:\/\/arxiv.org\/abs\/1704.04861) we will train and see what results it gives us with the data we have, then we will continue training the network but expanding the dataset with the various methods of augmentation discussed above. ","daaec439":"okay, we have a total of 25361, of which there are 5005 different types, but one of them is \"new_whale\", or what is the same, without cataloguing, so we will create a new dataframe with the unique ids removing it. We are also going to count them and save them in our variable \"number_of_clases\"","ca3b85e3":"We created a graph to have a vision of the distribution of the labels.","354502c3":"## **SUBMISSION**","b12212b4":"with the function \"prepare_data\" we create arrays of numpy with the content of the images, also we prepare the and with the name of the files (we make the labelencoder and the onehot encoded to be able to pass numerical values to the neural network). Finally the same function already separates the values for test and for validation.","7f2e8283":"**Random Rotations**","be58c08b":"**Random Flips**","c41da15b":"**Random Shifts**","914ab318":"## References\n\n    1.https:\/\/www.kaggle.com\/youhanlee\/small-data-many-class-data-augmentation \n    2.https:\/\/www.kaggle.com\/satian\/keras-mobilenet-starter\n    3.https:\/\/medium.com\/ymedialabs-innovation\/data-augmentation-techniques-in-cnn-using-tensorflow-371ae43d5be9\n\n## Overview\n\nWe are going to try to get a good percentage of our predictions using the mobilenet pretrained network, but we will focus our efforts on improving the input data.\nThe goal of this competition is identifying individual whales in images. The train dataset includes 25k images and 5k unique whale ids. In addition, ~10k of images show unique whales ('new_whale' label).\n\nTo improve the dataset we are going to carry out different data augmentation techniques:\n\n- Feature Standardization\n- ZCA Whitening\n- Random Rotations\n- Random Shifts\n- Random Flips"}}