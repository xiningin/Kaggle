{"cell_type":{"2101853a":"code","157359b4":"code","0b36bdcf":"code","4b0609af":"code","b62609ff":"code","e6da86f5":"code","44d34c68":"code","fa811d23":"code","0beb36f8":"code","f4372492":"code","f345b56f":"code","971628c6":"code","7712c48f":"code","26736c19":"code","a37cca14":"code","338078a7":"code","9efd9f09":"code","60c7c8b3":"code","b4f2c2fd":"code","c91825b8":"code","e29147e3":"code","fd9a8bb8":"code","57a6b8c8":"code","aab8332a":"code","26af325b":"code","06f159a5":"code","fb849a5f":"code","39804a13":"code","406013a8":"code","637bce08":"code","1a16d669":"code","03d7ca24":"markdown","0c1cc920":"markdown","c7ba01b0":"markdown","86fe2c8d":"markdown","52748a27":"markdown","ff156752":"markdown","d35f06b1":"markdown","9ebb1110":"markdown","92e9e01a":"markdown","41a66785":"markdown","81aa90b7":"markdown","bd43fbca":"markdown","8380cd36":"markdown","417c5d37":"markdown","20785278":"markdown","38b6d713":"markdown","9675864b":"markdown","26cae9b9":"markdown"},"source":{"2101853a":"!pip install seaborn==0.11.0","157359b4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix, roc_curve, auc, precision_score, recall_score, f1_score\n\n%matplotlib  inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0b36bdcf":"titanic = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')","4b0609af":"titanic.head()","b62609ff":"sns.catplot(data=titanic, x=\"Sex\", hue=\"Survived\", kind=\"count\")","e6da86f5":"plt.figure(figsize=(10,5))\nsns.histplot(data=titanic, x=\"Age\", hue=\"Survived\", multiple=\"stack\", palette=\"husl\")","44d34c68":"class_cat = sns.catplot(data=titanic, x=\"Pclass\", hue=\"Survived\", kind=\"count\")","fa811d23":"plt.figure(figsize=(10,5))\nsns.histplot(data=titanic, x=\"SibSp\", hue=\"Survived\", multiple=\"stack\", palette=\"husl\", discrete=True)","0beb36f8":"titanic.isnull().sum()","f4372492":"titanic = titanic.drop({'Name', 'Ticket', 'Cabin'}, axis=1)","f345b56f":"titanic['Embarked']= titanic['Embarked'].fillna(titanic['Embarked'].value_counts().index[0])","971628c6":"pd.pivot_table(titanic, values='Age', index=['Sex'], columns=['Pclass'], aggfunc=np.mean)","7712c48f":"for Pclass in titanic.Pclass.unique():\n    for Sex in titanic.Sex.unique():\n        titanic[(titanic['Pclass'] == Pclass) & (titanic['Sex'] == Sex)] = \\\n            titanic[(titanic['Pclass'] == Pclass) & (titanic['Sex'] == Sex)] \\\n            .fillna(np.rint(titanic[(titanic['Pclass'] == Pclass) & (titanic['Sex'] == Sex)].Age.mean()))","26736c19":"titanic.isnull().sum()","a37cca14":"titanic['Sex'] = pd.get_dummies(titanic['Sex'], drop_first=True)\ntitanic.rename({'Sex': 'Male'}, axis=1, inplace=True)","338078a7":"titanic['Embarked_fz'] = pd.factorize(titanic['Embarked'], sort=True)[0]","9efd9f09":"titanic.head()","60c7c8b3":"X = titanic.drop({'PassengerId', 'Survived', 'SibSp', 'Parch', 'Embarked'}, axis=1)\ny = titanic['Survived']","b4f2c2fd":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","c91825b8":"clf = RandomForestClassifier()","e29147e3":"parametrs = { 'n_estimators': range (10, 51, 10),\n              'max_depth': range (1,13, 2),\n              'min_samples_leaf': range (1,8),\n              'min_samples_split': range (2,10,2) }","fd9a8bb8":"grid = GridSearchCV(clf, parametrs, cv=5)\ngrid.fit(X_train, y_train)","57a6b8c8":"grid.best_estimator_","aab8332a":"y_pred = grid.predict(X_test)\ny_proba = grid.predict_proba(X_test)\ny_proba = y_proba[:, 1]","26af325b":"confusion_matrix(y_test, y_pred)","06f159a5":"fpr, tpr, thresholds = roc_curve(y_test, y_proba)\nroc_auc = auc(fpr, tpr)\nplt.figure(figsize=(7,5))\nplt.plot(fpr, tpr, color='darkorange', lw=2, label='ROC curve (area = %0.2f) '% roc_auc)\nplt.plot([0, 1], [0, 1], linestyle='--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.legend(loc=\"lower right\")","fb849a5f":"precision_score(y_test, y_pred)","39804a13":"recall_score(y_test, y_pred)","406013a8":"f1_score(y_test, y_pred)","637bce08":"titanic_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntitanic_test['Embarked']= titanic_test['Embarked'].fillna(titanic_test['Embarked'].value_counts().index[0])\nfor Pclass in titanic_test.Pclass.unique():\n    for Sex in titanic_test.Sex.unique():\n        titanic_test[(titanic_test['Pclass'] == Pclass) & (titanic_test['Sex'] == Sex)] = \\\n            titanic_test[(titanic_test['Pclass'] == Pclass) & (titanic_test['Sex'] == Sex)] \\\n            .fillna(np.rint(titanic_test[(titanic_test['Pclass'] == Pclass) & (titanic_test['Sex'] == Sex)].Age.mean()))\ntitanic_test['Sex'] = pd.get_dummies(titanic_test['Sex'], drop_first=True)\ntitanic_test.rename({'Sex': 'Male'}, axis=1, inplace=True)\ntitanic_test['Embarked_fz'] = pd.factorize(titanic_test['Embarked'], sort=True)[0]\nPassengerId = titanic_test.PassengerId\ntitanic_test = titanic_test.drop({'PassengerId', 'SibSp', 'Parch', 'Embarked', 'Name', 'Ticket', 'Cabin'}, axis=1)\ny_test2 = grid.predict(titanic_test)","1a16d669":"submission = pd.DataFrame({'PassengerId':PassengerId,'Survived':y_test2})\nsubmission.to_csv('submission.csv',index=False)","03d7ca24":"**Split X data into random train and test subsets**","0c1cc920":"As expected, class 3 passengers have the lowest chance of survival","c7ba01b0":"**Changing categorical featuries into dummy values**","86fe2c8d":"ROC curves typically feature true positive rate on the Y axis, and false positive rate on the X axis. This means that the top left corner of the plot is the \u201cideal\u201d point - a false positive rate of zero, and a true positive rate of one. This is not very realistic, but it does mean that a larger area under the curve (AUC) is usually better.","52748a27":"**\u0421heck if there are NaN in the data**","ff156752":"\"Embarked\" column fill with the most common value","d35f06b1":"These quantities are also related to the **F1 score**, which is defined as the harmonic mean of precision and recall.","9ebb1110":"# **Viewing and visualizing data**","92e9e01a":"# Metrics","41a66785":"**Recall** is defined as the number of true positives over the number of true positives plus the number of false negatives.","81aa90b7":"# **Data pre-processing**","bd43fbca":"**Search over specified parameter values for an estimator**","8380cd36":"Look at the average age values depending on the Pclass and sex to fill \"Age\" column","417c5d37":"There are almost twice as many men on the Titanic, but women are more likely to survive","20785278":"# Repeat actions for test data","38b6d713":"**Precision** is defined as the number of true positives over the number of true positives plus the number of false positives**.","9675864b":"Drop \"Name\", \"Ticket\", \"Cabin\" columns","26cae9b9":"# **Model**"}}