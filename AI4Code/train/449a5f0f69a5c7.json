{"cell_type":{"2bb7fa22":"code","613ad06d":"code","c3b79933":"code","13695ffc":"code","b423bb37":"code","76a665ae":"code","e04b7129":"code","de538901":"code","2b32dd08":"code","4516dbe7":"code","f7debacd":"code","c1130c16":"code","18627552":"code","51055619":"code","3535fc22":"code","857824c5":"code","bf3bd1ab":"code","62e8c98a":"code","60c0343f":"code","108be4fc":"code","03f1cd9c":"code","0d2d67aa":"code","5fe918f1":"code","f4836338":"code","de322184":"code","58cb517e":"code","c33fe3b3":"code","32be03fe":"code","773abaf5":"code","6e217b43":"code","936c76ff":"code","4eb84de7":"code","bdceabeb":"code","7c4af6ac":"code","67d7da2a":"code","d0cbb2e8":"code","4d2645f9":"code","81e71994":"code","95da6800":"code","3b62eb85":"code","959eafc8":"markdown","87500cac":"markdown","12a379f3":"markdown","1869e4fc":"markdown","d4148631":"markdown"},"source":{"2bb7fa22":"#import library\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, log_loss\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC, LinearSVC, NuSVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis, QuadraticDiscriminantAnalysis\nfrom xgboost import XGBClassifier\nimport xgboost\nimport math\nfrom sklearn import metrics","613ad06d":"disease = pd.read_csv('..\/input\/heart-disease-classification-dataset\/heart disease classification dataset.csv')","c3b79933":"disease.shape","13695ffc":"disease.head()","b423bb37":"#drop unnamed: 0\ndisease = disease.drop('Unnamed: 0', 1)\ndisease.head()","76a665ae":"disease.describe()","e04b7129":"disease.info()","de538901":"#handling missing value\ndisease.dropna(inplace = True)","2b32dd08":"#heatmap correlation\nplt.figure(figsize = (10,6))\nsns.heatmap(disease.corr(), vmax = 0.9, square = True)\nplt.title(\"Pearson Correlation\")\nplt.show()","4516dbe7":"#transform categorical variable\ndisease['sex'] = disease['sex'].astype('category')\ndisease['target'] = disease['target'].astype('category')\nprint(disease.dtypes)","f7debacd":"#handling categorical data\ndf = pd.DataFrame(disease)\ndf['sex'] = df['sex'].cat.codes\ndf['target'] = df['target'].cat.codes\ndf.head()","c1130c16":"#split data\nX = df.drop('target', axis = 1)\ny = df['target']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","18627552":"#prepare models\nclassifiers = [\n    KNeighborsClassifier(n_neighbors = 5),\n    SVC(kernel = 'linear', gamma = 'auto', C = 5, probability = True),\n    NuSVC(probability = True),\n    DecisionTreeClassifier(max_depth = 3),\n    RandomForestClassifier(random_state = 1, max_features = 'sqrt', n_jobs = 1, verbose = 1),\n    XGBClassifier(),\n    AdaBoostClassifier(),\n    GradientBoostingClassifier(),\n    GaussianNB(),\n    LinearDiscriminantAnalysis(),\n    QuadraticDiscriminantAnalysis()]","51055619":"#report models\nlog_cols=[\"Classifier\", \"Accuracy\", \"Log Loss\"]\nlog = pd.DataFrame(columns = log_cols)\n\nfor clf in classifiers:\n    clf.fit(X_train, y_train)\n    name = clf.__class__.__name__\n    print(\"=\" * 30)\n    print(name)\n    print('****Results****')\n    \n    train_predictions = clf.predict(X_test)\n    acc = accuracy_score(y_test, train_predictions)\n    print(\"Accuracy: {:.4%}\".format(acc))\n    \n    train_predictions = clf.predict_proba(X_test)\n    ll = log_loss(y_test, train_predictions)\n    print(\"Log Loss: {}\".format(ll))\n    print(\"\\n\")\n    \n    log_entry = pd.DataFrame([[name, acc * 100, ll]], columns = log_cols)\n    log = log.append(log_entry)\n    \nprint(\"=\" * 30)","3535fc22":"#visualize accuracy models\nplt.figure(figsize = (10,6))\nsns.set_color_codes(\"muted\")\nsns.barplot(x = 'Accuracy', y = 'Classifier', data = log, color = \"blue\")\nplt.xlabel('Accuracy %')\nplt.title('Accuracy of Classification Model')\nplt.show()\nsns.set_color_codes(\"muted\")\nplt.show()","857824c5":"#visualize log loss models\nplt.figure(figsize = (10,6))\nsns.barplot(x = 'Log Loss', y = 'Classifier', data = log, color = \"red\")\nplt.xlabel('Log Loss')\nplt.title('Log Loss of Classification Model')\nplt.show()","bf3bd1ab":"#build model\nlda = LinearDiscriminantAnalysis()\n%time lda.fit(X_train, y_train)","62e8c98a":"#prediction\ny_pred = lda.predict(X_test)\nprint(y_pred)","60c0343f":"#accuracy score\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy Score : ', accuracy)","108be4fc":"#check MSE & RMSE\nmse = metrics.mean_squared_error(y_test, y_pred)\nprint('Mean Squared Error : '+ str(mse))\nrmse = math.sqrt(metrics.mean_squared_error(y_test, y_pred))\nprint('Root Mean Squared Error : '+ str(rmse))","03f1cd9c":"#confusion matrix\nmatrix = metrics.confusion_matrix(y_test, y_pred)\nprint(matrix)\n\n#heatmap matrix\nplt.figure(figsize = (10,6))\nsns.heatmap(matrix, annot = True, cmap = 'OrRd')\nplt.title(\"Confusion Matrix\")\nplt.xlabel(\"Prediction\")\nplt.ylabel(\"Actual\")\nplt.show()","0d2d67aa":"#classification report\nreport = metrics.classification_report(y_test, y_pred)\nprint(report)","5fe918f1":"#transform gender\ndf.sex[df['sex'] == 0] = 'Female'\ndf.sex[df['sex'] == 1] = 'Male'\n\n#transform target\ndf.target[df['target'] == 0] = 'No'\ndf.target[df['target'] == 1] = 'Yes'\n\n#transcform cp\ndf.cp[df['cp'] == 0] = 'Typical Angina'\ndf.cp[df['cp'] == 1] = 'Astypical Angina'\ndf.cp[df['cp'] == 2] = 'Non \u2014 Anginal'\ndf.cp[df['cp'] == 3] = 'Asymptotic'\n\n#transform restecg\ndf.restecg[df['restecg'] == 0] = 'Normal'\ndf.restecg[df['restecg'] == 1] = 'Having ST-T Wave Abnormality'\ndf.restecg[df['restecg'] == 2] = 'Left Ventricular Hyperthrophy'\n\n#transform exang\ndf.exang[df['exang'] == 0] = 'No'\ndf.exang[df['exang'] == 1] = 'Yes'\n\n#transform slope\ndf.slope[df['slope'] == 0] = 'Upsloping'\ndf.slope[df['slope'] == 1] = 'Flat'\ndf.slope[df['slope'] == 2] = 'Downsloping'\n\n#transform trestbps\ndf['trestbps'] = df['trestbps'].astype('int')\n\n#transform chol\ndf['chol'] = df['chol'].astype('int')\n\n#transform thalach\ndf['thalach'] = df['thalach'].astype('int')\ndf.head()","f4836338":"#group gender & target\ngender_target = df.groupby(['sex', 'target']).size().reset_index(name = 'Count')\nprint(gender_target)","de322184":"#visualize gender ~ target\nplt.figure(figsize = (8,6))\nsns.barplot(x = 'sex', y = 'Count', hue = 'target', data = gender_target, palette = 'Set1')\nplt.title(\"Gender ~ Target\")\nplt.show()","58cb517e":"#group cp & target\ncp_target = df.groupby(['cp', 'target']).size().reset_index(name = 'Count')\nprint(cp_target)","c33fe3b3":"#visualize cp ~ target\nplt.figure(figsize = (10,6))\nsns.barplot(x = 'cp', y = 'Count', hue = 'target', data = cp_target)\nplt.title(\"Chest Pain Type ~ Target\")\nplt.show()","32be03fe":"#group restecg & target\nrestecg_target = df.groupby(['restecg', 'target']).size().reset_index(name = 'Count')\nprint(restecg_target)","773abaf5":"#visualize restecg ~ target\nplt.figure(figsize = (10,6))\nsns.barplot(x = 'restecg', y = 'Count', hue = 'target', data = restecg_target, palette = 'Set1')\nplt.title(\"Resting ECG ~ Target\")\nplt.show()","6e217b43":"#group exang & target\nexang_target = df.groupby(['exang', 'target']).size().reset_index(name = 'Count')\nprint(exang_target)","936c76ff":"#visualize exang ~ target\nplt.figure(figsize = (8,6))\nsns.barplot(x = 'exang', y = 'Count', hue = 'target', data = exang_target)\nplt.title(\"Exercise Induced Angina ~ Target\")\nplt.show()","4eb84de7":"#group slope & target\nslope_target = df.groupby(['slope', 'target']).size().reset_index(name = 'Count')\nprint(slope_target)","bdceabeb":"#visualize slope ~ target\nplt.figure(figsize = (10,6))\nsns.barplot(x = 'slope', y = 'Count', hue = 'target', data = slope_target, palette = 'Set1')\nplt.title(\"Slope of The Peak Exercise ST Segment ~ Target\")\nplt.show()","7c4af6ac":"#visualize target ~ age\nplt.figure(figsize = (10,6))\nsns.boxplot(data = df, x = 'target', y = 'age', palette = 'Set1')\nplt.title(\"Target ~ Age\")\nplt.show()","67d7da2a":"#visualize target ~ trestbps\nplt.figure(figsize = (10,6))\nsns.boxplot(data = df, x = 'target', y = 'trestbps')\nplt.title(\"Target ~ Resting Blood Pressure\")\nplt.show()","d0cbb2e8":"#visualize target ~ chol\nplt.figure(figsize = (10,6))\nsns.boxplot(data = df, x = 'target', y = 'chol', palette = 'Set1')\nplt.title(\"Target ~ Serum Cholestrol\")\nplt.show()","4d2645f9":"#visualize target ~ thalach\nplt.figure(figsize = (10,6))\nsns.boxplot(data = df, x = 'target', y = 'thalach')\nplt.title(\"Target ~ Max Heart Rate Achieved\")\nplt.show()","81e71994":"#visualize thalach ~ trestbps\nsns.lmplot(data = df, x = 'thalach', y = 'trestbps', hue = 'target', palette = 'Set1')\nplt.title(\"Max Heart Rate Achieved ~ Resting Blood Pressure\")\nplt.show()","95da6800":"#visualize thalach ~ chol\nsns.lmplot(data = df, x = 'thalach', y = 'chol', hue = 'target')\nplt.title(\"Max Heart Rate Achieved ~ Serum Cholestrol\")\nplt.show()","3b62eb85":"#visualize target\nplt.figure(figsize = (5,6))\nx = [np.count_nonzero(df['target'] == 'No'),\n    np.count_nonzero(df['target'] == 'Yes')]\nactivities = ['No', 'Yes']\nplt.pie(x, labels = activities, startangle = 50, radius = 1.2, autopct = '%.1f%%', shadow = True)\nplt.title(\"Target\")\nplt.show()","959eafc8":"# Predicting probability of heart disease in patients","87500cac":"## Classification Model","12a379f3":"### Linear Discriminant Analysis model is the best score result","1869e4fc":"## Data Extraction","d4148631":"## Visualization"}}