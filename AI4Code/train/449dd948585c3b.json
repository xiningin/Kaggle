{"cell_type":{"f7b4b1fe":"code","b0b88418":"code","286a0a34":"code","cf63162a":"code","8f79cf38":"code","39bfb347":"code","01c6cbd0":"code","d2a1fadd":"code","3b895f4b":"code","2406c741":"code","0add30af":"code","b89e60db":"code","22e5610d":"code","83b4d073":"code","a0870632":"code","2f7c2a78":"markdown","f891b2e7":"markdown","e773632c":"markdown","a49bc54e":"markdown","37ca8d0c":"markdown","9d8f9001":"markdown","edfa13fd":"markdown","d4904305":"markdown","a171a455":"markdown","fb899e4f":"markdown","cb140b48":"markdown","ed712fb3":"markdown","2541db84":"markdown","8621eadf":"markdown"},"source":{"f7b4b1fe":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# visualization tools\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud\nfrom PIL import Image\nimport seaborn as sns\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b0b88418":"df=pd.read_csv(\"..\/input\/fifa19\/data.csv\")","286a0a34":"df.sample(5)","cf63162a":"df.info()","8f79cf38":"df.isnull().sum()","39bfb347":"import missingno as msno\nmsno.matrix(df)\nplt.show()","01c6cbd0":"df.columns","d2a1fadd":"df.drop(columns=['Unnamed: 0','Photo','Flag','Club Logo'],inplace=True)","3b895f4b":"f,ax = plt.subplots(figsize=(25, 15))\nsns.heatmap(df.corr(), annot=True, linewidths=0.5,linecolor=\"red\", fmt= '.1f',ax=ax)\nplt.show()","2406c741":"nationalityDf = pd.DataFrame(columns = ['Nationality'])\nnationalityDf[\"Nationality\"]=[each for each in df.Nationality.unique()]\nnationalityDf[\"maxOverall\"]=[df.Overall[df.Nationality==each].max() for each in nationalityDf.Nationality]\nnationalityDf[\"meanOverall\"]=[df.Overall[df.Nationality==each].mean() for each in nationalityDf.Nationality]\nnationalityDf[\"minOverall\"]=[df.Overall[df.Nationality==each].min() for each in nationalityDf.Nationality]\nnationalityDf.sort_values(by=['maxOverall','meanOverall','minOverall'],ascending=False)\nnationalityDf=nationalityDf.head(25)\n\n# visualization\nf,ax = plt.subplots(figsize = (25,15))\nsns.barplot(x=nationalityDf.maxOverall,y=nationalityDf.Nationality,color='green',alpha = 0.5,label='max Overall' )\nsns.barplot(x=nationalityDf.meanOverall,y=nationalityDf.Nationality,color='blue',alpha = 0.7,label='mean Overall')\nsns.barplot(x=nationalityDf.minOverall,y=nationalityDf.Nationality,color='cyan',alpha = 0.6,label='min Overall')\n\nax.legend(loc='lower right',frameon = True)\nax.set(xlabel='Value', ylabel='Nationality',title = \"Nationality Player Max - Mean - Min Value\")\nplt.show()","0add30af":"ClubDf = pd.DataFrame(columns = ['Club'])\nClubDf[\"Club\"]=[each for each in df.Club.unique()]\nClubDf[\"maxOverall\"]=[df.Overall[df.Club==each].max() for each in ClubDf.Club]\nClubDf[\"meanOverall\"]=[df.Overall[df.Club==each].mean() for each in ClubDf.Club]\nClubDf[\"minOverall\"]=[df.Overall[df.Club==each].min() for each in ClubDf.Club]\nClubDf.sort_values(by=['maxOverall','meanOverall','minOverall'],ascending=False)\nClubDf=ClubDf.head(25)\n# create trace1 \ntrace1 = go.Bar(\n                x = ClubDf.Club,\n                y = ClubDf.maxOverall,\n                name = \"Max Overall Value\",\n                marker = dict(color = 'rgba(55, 114, 55, 1)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = ClubDf.Club)\n# create trace2 \ntrace2 = go.Bar(\n                x = ClubDf.Club,\n                y = ClubDf.meanOverall,\n                name = \"Mean Overall Value\",\n                marker = dict(color = 'rgba(235, 155, 12, 1)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = ClubDf.Club)\n# create trace3 \ntrace3 = go.Bar(\n                x = ClubDf.Club,\n                y = ClubDf.minOverall,\n                name = \"Min Overall Value\",\n                marker = dict(color = 'rgba(235, 155, 162, 1)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = ClubDf.Club)\ndata = [trace1, trace2, trace3]\nlayout = go.Layout(barmode = \"group\")\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","b89e60db":"wave_mask= np.array(Image.open(\"..\/input\/soccer\/soccer.png\"))\nplt.subplots(figsize=(15,15))\nwordcloud = WordCloud(    mask=wave_mask,\n                          background_color=\"lavenderblush\",\n                          colormap=\"hsv\",\n                          contour_width=2,\n                          contour_color=\"black\",\n                          width=1920,\n                          height=1080\n                         ).generate(\" \".join(df.Nationality))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('graph.png')\nplt.show()","22e5610d":"LeftLabels = df[df[\"Preferred Foot\"]==\"Left\"].Position.value_counts().head(10).index\nLeftValues = df[df[\"Preferred Foot\"]==\"Left\"].Position.value_counts().head(10).values\nRightLabels = df[df[\"Preferred Foot\"]==\"Right\"].Position.value_counts().head(10).index\nRightValues = df[df[\"Preferred Foot\"]==\"Right\"].Position.value_counts().head(10).values\n\nfrom plotly.subplots import make_subplots\n\n# Create subplots: use 'domain' type for Pie subplot\nfig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]])\nfig.add_trace(go.Pie(labels=LeftLabels, values=LeftValues, name=\"Left Foot Preferred\"),\n              1, 1)\nfig.add_trace(go.Pie(labels=RightLabels, values=RightValues, name=\"Right Foot Preferred\"),\n              1, 2)\n\n# Use `hole` to create a donut-like pie chart\nfig.update_traces(hole=.4, hoverinfo=\"label+percent+name\")\n\nfig.update_layout(\n    # Add annotations in the center of the donut pies.\n    annotations=[dict(text='LEFT', x=0.18, y=0.5, font_size=20, showarrow=False),\n                 dict(text='R\u0130GHT', x=0.82, y=0.5, font_size=20, showarrow=False)])\nfig.show()","83b4d073":"team1 = df[df.Club==\"FC Barcelona\"].Overall\nteam2 = df[df.Club==\"Real Madrid\"].Overall\n\nfig = go.Figure()\n# Use x instead of y argument for horizontal plot\nfig.add_trace(go.Box(x=team1, name='FC Barcelona'))\nfig.add_trace(go.Box(x=team2, name='Real Madrid'))\n\nfig.show()","a0870632":"GalatasarayTeam = df[df.Club == \"Galatasaray SK\"].iloc[:,[50,51,53]]\nFenerbahceTeam = df[df.Club == \"Fenerbah\u00e7e SK\"].iloc[:,[50,51,53]]\n\n# trace1 =  Galatasarayy SK\ntrace1 = go.Scatter3d(\n    x=GalatasarayTeam.Crossing,\n    y=GalatasarayTeam.Finishing,\n    z=GalatasarayTeam.ShortPassing,\n    mode='markers',\n    name = \"Galatasaray SK\",\n    marker=dict(\n        color='rgb(200, 0, 0)',\n        size=12,\n        line=dict(\n            color='rgb(255, 255, 255)',\n            width=0.1\n        )\n    )\n)\n# trace2 = Fenerbah\u00e7e SK\ntrace2 = go.Scatter3d(\n    x=FenerbahceTeam.Crossing,\n    y=FenerbahceTeam.Finishing,\n    z=FenerbahceTeam.ShortPassing,\n    mode='markers',\n    name = \"Fenerbah\u00e7e SK\",\n    marker=dict(\n        color='rgb(0, 0, 200)',\n        size=12,\n        line=dict(\n            color='rgb(204, 204, 204)',\n            width=0.1\n        )\n    )\n)\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title = ' 3D Galatasaray and Fenerba\u00e7e',\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0\n    )\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","2f7c2a78":"# Missingno - Missing Data","f891b2e7":"### Content:\n1. Missingo - Missing Data\n2. Data Cleaning\n3. Seaborn - Heatmap\n4. Seaborn - Bar Plot\n5. Plotly - Bar Plot\n6. Word Cloud\n7. Plotly - Donut Chart\n8. Plotly - Box Plot\n9. Plotly - 3D Scatter Plot","e773632c":"# Word Cloud\n### Nationality Text Size = Nationality Player Count","a49bc54e":"### Reading Data","37ca8d0c":"# Seaborn - Heatmap\n### Relationship between columns\n* 01 --> Direct proportion\n* 00 --> No relationship\n* -1 --> \u0130nverse proportion","9d8f9001":"### Used Libraries\n1. NumPy (Numerical Python)\n2. Pandas\n3. Matplotlib\n4. Seaborn\n5. Plotly\n6. Missingno","edfa13fd":"# Plotly - 3D Scatter Plot ( Interactive )\n* X = Crossing\n* Y = Finishing\n* Z = Short Passing","d4904305":"# Plotly - Box Plot ( Interactive )\n### Barcelona vs Real Madrid (min,q1,median,q3,max value)","a171a455":"# FIFA 19 Player Data Analysis and Visualization EDA\nFIFA 19 is a football simulation video game developed by EA Vancouver as part of Electronic Arts' FIFA series. Announced on 6 June 2018 for its E3 2018 press conference, it was released on 28 September 2018 for PlayStation 3, PlayStation 4, Xbox 360, Xbox One, Nintendo Switch, and Microsoft Windows.It is the 26th installment in the FIFA series. As with FIFA 18, Cristiano Ronaldo initially as the cover athlete of the regular edition: however, following his unanticipated transfer from Spanish club Real Madrid to Italian side Juventus, new cover art was released, featuring Neymar, Kevin De Bruyne and Paulo Dybala.\n\nThe game features the UEFA club competitions for the first time, including the UEFA Champions League and UEFA Europa League.Martin Tyler and Alan Smith return as regular commentators, while the new commentary team of Derek Rae and Lee Dixon feature in the UEFA competitions mode.Composer Hans Zimmer and rapper Vince Staples recorded a new remix of the UEFA Champions League anthem specifically for the game. The character Alex Hunter, who first appeared in FIFA 17 returns for the third and final installment of \"The Journey\", entitled, \"The Journey: Champions\".In June 2019, a free update added the FIFA Women's World Cup as a separate game mode.\n\nThis is the last game in the FIFA series to be available on a seventh-generation console, and the last known game to be available for the PlayStation 3 worldwide.","fb899e4f":"# Thank You\n\nIf you have any suggestion or advice or feedback, I will be very appreciated to hear them.\n### Also there are other kernels\n* [FIFA 19 Player Data Analysis and Visualization EDA](https:\/\/www.kaggle.com\/ismailsefa\/f-fa-19-player-data-analysis-and-visualization-eda)\n* [Crimes Data Analysis and Visualzation (EDA)](https:\/\/www.kaggle.com\/ismailsefa\/crimes-data-analysis-and-visualzation-eda)\n* [Google Play Store Apps Data Analysis (EDA)](https:\/\/www.kaggle.com\/ismailsefa\/google-play-store-apps-data-analysis-eda)\n* [World Happiness Data Analysis and Visualization](https:\/\/www.kaggle.com\/ismailsefa\/world-happiness-data-analysis-and-visualization)\n* [Used Cars Data Analysis and Visualization (EDA)](https:\/\/www.kaggle.com\/ismailsefa\/used-cars-data-analysis-and-visualization-eda)\n* [Gender Recognition by Voice Machine Learning SVM](https:\/\/www.kaggle.com\/ismailsefa\/gender-recognition-by-voice-machine-learning-svm)\n* [Iris Species Classify Machine Learning KNN](https:\/\/www.kaggle.com\/ismailsefa\/iris-species-classify-machine-learning-knn)\n* [Breast Cancer Diagnostic Machine Learning R-Forest](https:\/\/www.kaggle.com\/ismailsefa\/breast-cancer-diagnostic-machine-learning-r-forest)\n* [Heart Disease Predic Machine Learning Naive Bayes](https:\/\/www.kaggle.com\/ismailsefa\/heart-disease-predic-machine-learning-naive-bayes)\n* [Mushroom Classify Machine Learning Decision Tree](https:\/\/www.kaggle.com\/ismailsefa\/mushroom-classify-machine-learning-decision-tree)","cb140b48":"# Plotly - Donut Chart ( Interactive )\n### Effect of preferred foot on position\n* GK (Goalkeeper)\n* RB (Right Back)\n* RWB (Right Wing Back)\n* LB (Lef Back)\n* LWB (Lef Wing Back)\n* CB (Center Back)\n* RCB (Right Center Back)\n* LCB (Left Center Back)\n* CM (Center Midfielder)\n* RCM (Right Center Midfielder)\n* LCM (Left Center Midfielder)\n* CDM (Center Defensive Midfielder)\n* RCDM (Right Center Defensive Midfielder)\n* LCDM (Left Center Defensive Midfielder\n* CAM (Center Attacking Midfielder)\n* RM (Right Midfielder)\n* RWM (Right Wing Midfielder)\n* LM (Left Midfielder)\n* LWM (Left Wing Midfielder)\n* ST (Striker)\n* CF (Center Forward)\n* RF (Right Forward)\n* LF (Left Forward)\n* SF (Secret Forward)","ed712fb3":"# Data Cleaning\n### Removed unnecessary","2541db84":"# Plotly - Bar Plot ( Interactive )\n### It takes RGB \"0-255\" for all values for opacity \"0-1\"","8621eadf":"# Seaborn - Bar Plot"}}