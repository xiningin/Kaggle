{"cell_type":{"4b05003c":"code","b56ad120":"code","a87fc5d8":"code","00f59ffe":"code","53f66e92":"code","856a3d72":"code","cd977f44":"code","13e3e51d":"code","30244aee":"code","b19c4c5d":"code","9c2450a6":"code","5deeaf04":"code","dddd539f":"code","37a450e3":"code","10365430":"code","376de06c":"code","61683a3c":"markdown","64f3b17e":"markdown","90414c5a":"markdown"},"source":{"4b05003c":"import numpy as np\nimport pandas as pd\nimport torch\nimport torch.nn as nn\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler","b56ad120":"torch.manual_seed(1)\n\nif torch.cuda.is_available():\n    device = 'cuda'\n    torch.cuda.manual_seed_all(1)\nelse:\n    device = 'cpu'","a87fc5d8":"train = pd.read_csv('..\/input\/nba-prediction\/train.csv')\ntest = pd.read_csv('..\/input\/nba-prediction\/test.csv')","00f59ffe":"train.shape, test.shape","53f66e92":"train.head()","856a3d72":"# Null \uac12 \ud655\uc778\ntrain.isnull().sum()","cd977f44":"# \uacb0\uce21\ud589\uc744 0 \uc73c\ub85c \ucc44\uc6c0\ntrain.fillna(0, inplace=True)\ntest.fillna(0, inplace=True)","13e3e51d":"# \uc0c8\ub85c\uc6b4 feature \ucd94\uac00\ntrain['PTS_home'] = 3.5*train['FG_PCT_home'] + 1*train['FT_PCT_home'] + 3*train['FG3_PCT_home']\ntrain['PTS_away'] = 3.5*train['FG_PCT_away'] + 1*train['FT_PCT_away'] + 3*train['FG3_PCT_away']\n\ntest['PTS_home'] = 3.5*test['FG_PCT_home'] + 1*test['FT_PCT_home'] + 3*test['FG3_PCT_home']\ntest['PTS_away'] = 3.5*test['FG_PCT_away'] + 1*test['FT_PCT_away'] + 3*test['FG3_PCT_away']","30244aee":"# \ud559\uc2b5\uc744 \uc704\ud55c \ub370\uc774\ud130 \uc900\ube44\nX_train = train.drop(['ID', 'Win'], axis=1)\nX_test = test.drop('ID', axis=1)\ny_train = train['Win']\n\n\n# Scaling\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\n\n\n# Tensor\ub85c \ubcc0\ud658\nX_train = torch.FloatTensor(X_train).to(device)\nX_test = torch.FloatTensor(X_test).to(device)\n\ny_train = torch.LongTensor(y_train.values).to(device)","b19c4c5d":"# Hyperparameter  \uc124\uc815\nlearning_rate = 1e-1\nn_epochs = 500\ndrop_prob = 0.3\n\n\n# Model\nclass Net(nn.Module):\n    def __init__(self):\n        super(Net, self).__init__()\n        \n        self.fc1 = nn.Linear(X_train.shape[1], 256)\n        self.fc2 = nn.Linear(256, 256)\n        self.fc3 = nn.Linear(256, 256)\n        self.fc4 = nn.Linear(256, 256)\n        self.fc5 = nn.Linear(256, 256)\n        self.fc6 = nn.Linear(256, 2)\n        \n        self.relu = nn.ReLU()\n        self.dropout = nn.Dropout(p=drop_prob)\n        \n        for m in self.modules():\n            if isinstance(m, nn.Linear):\n                nn.init.xavier_normal_(m.weight.data)\n    \n    def forward(self, x):\n        out = self.fc1(x)\n        out = self.relu(out)\n        out = self.dropout(out)\n        \n        out = self.fc2(out)\n        out = self.relu(out)\n        out = self.dropout(out)\n        \n        out = self.fc3(out)\n        out = self.relu(out)\n        out = self.dropout(out)\n        \n        out = self.fc4(out)\n        out = self.relu(out)\n        out = self.dropout(out)\n        \n        out = self.fc5(out)\n        out = self.relu(out)\n        out = self.dropout(out)\n        \n        out = self.fc6(out)\n        return out","9c2450a6":"model = Net().to(device)\n\n\n# optimizer\uc640 Loss Function \uc124\uc815\noptimizer = torch.optim.SGD(model.parameters(), lr=learning_rate, momentum=0.9)\nloss_fn = nn.CrossEntropyLoss()\n\n\n# \uc131\ub2a5 \ud5a5\uc0c1\uc744 \uc704\ud574 Learning rate Scheduler \uc0ac\uc6a9\nscheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=200, gamma=0.5)","5deeaf04":"## \ud559\uc2b5 ##\n\nfor epoch in range(1, n_epochs+1):\n    model.train()\n    H = model(X_train)\n    loss = loss_fn(H, y_train)\n    \n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()\n    scheduler.step()\n    \n    accuracy = (torch.argmax(H, dim=1) == y_train).float().mean()\n    \n    if epoch % 20 == 0:\n        print('Epoch {:4d} \/ {}, Loss : {:.4f}, Accuracy : {:.2f} %'.format(\n            epoch, n_epochs, loss.item(), accuracy*100))","dddd539f":"with torch.no_grad():\n    model.eval()\n    pred = model(X_test)","37a450e3":"submit = pd.read_csv('..\/input\/nba-prediction\/sample_submit.csv')","10365430":"submit['Win'] = torch.argmax(pred, dim=1).cpu()\nsubmit.head()","376de06c":"submit.to_csv('submission.csv', index=False)","61683a3c":"## Data Preparation","64f3b17e":"## Model","90414c5a":"## Train"}}