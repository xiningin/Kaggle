{"cell_type":{"db03b296":"code","246cfa53":"code","cdc8338b":"code","365cac4e":"code","06fb84dc":"code","300d2c1d":"code","6235b85d":"code","7213bb86":"code","f7a99193":"code","3b95d235":"code","f1f82f36":"code","defc0241":"code","f7e1c247":"code","80db74bc":"code","a1b87df2":"code","b679bfd6":"code","d5c7224f":"code","9be8712d":"code","2b0172ec":"code","777b2e0c":"code","f4edb910":"code","8b45d9bb":"code","20030199":"code","b2f3d95e":"code","73387700":"code","c933d53e":"code","246dcfbc":"code","36dcddb0":"code","e754708a":"code","9af070b8":"code","0f350c56":"code","de63a843":"code","15735dc5":"code","0d465f3a":"code","e7fddb9a":"code","c8613927":"code","486a1011":"code","50efa90f":"code","00753a5b":"code","ac69d8a4":"markdown","d60458b2":"markdown","7e4ac120":"markdown","c901197e":"markdown","fb40222b":"markdown","40f3b2e0":"markdown","3908a97d":"markdown","8dc32fa4":"markdown","edaff076":"markdown","08aa5704":"markdown","aab512da":"markdown","51b2748f":"markdown","5adb77d7":"markdown"},"source":{"db03b296":"# importing the library\nimport pandas as pd   \n# importing as 'pd' makes it easier to refer as we can use 'pd' instead of whole 'pandas' ","246cfa53":"# Pandas read_csv(filepath) function is used to read the csv file\n# Excel files can be read using read_excel() function.\n# I have already added the data to this notebook (See top right corner)\n\n# Titanic dataset contains two data files, train.csv, test.csv. We shall import them seperately.\ntrain = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\nprint(\"Pandas - We have read the whole data hooman, within fraction of seconds, you slow snail. Haha..\")","cdc8338b":"# We can print the first few and last few rows of the dataset using pandas head(number_of_rows), tail(number_of_rows) function.\n# By default, number_of_rows = 5\n# Lets print first 3 rows of train and last 5 rows of test dataset ","365cac4e":"print(\"Me - I'll go for you head Pandas\")\ntrain.head(3)","06fb84dc":"print(\"Me - ...and then for you tail... , I am the mighty Hooman\")\ntest.tail()","300d2c1d":"# We can get the shape of each dataset as follows:\nprint(\"Shape of training data\",train.shape)\nprint(\"Shape of test data\", test.shape)","6235b85d":"# Its clear from above that test data has one column less which is the ground truth column.\n# To get a list of column names, we do as follows:\nprint(\"Train set columns:\", train.columns)\nprint(\"Test set columns:\", test.columns)","7213bb86":"# selecting a particular column by its name\ntrain['Name']","f7a99193":"# Due to space limitations, only a few columns are shown\n# This can also be done in a different way as given below:\ntrain.Name","3b95d235":"# Slicing is one of the most important concept\n# To select rows from 5-10, we need to do the following:\nprint(\"Me - I summon the rows from 5 to 10, bring them to me.\")\nprint(\"Pandas - At your service, Hooman\")\ntrain[5:11]\n# Pandas uses last index as exclusive index so if we want rows till 10, we need to write 10+1 i.e. 11.","f1f82f36":"# This printed all the columns, but if we want a specific column, we can do the following:\ntrain['Name'][0:5]","defc0241":"# To select multiple columns:\ntrain[['Name', 'Age', 'Sex']]","f7e1c247":"# Illustration\nprint(type(train[['Name']]))\nprint(type(train['Name']))","80db74bc":"# Pandas provides different ways to deal with columns and rows. loc, iloc are two such very powerful ways.\n# loc - used with index names\n# iloc - used with index numbers\n\nprint(\"Me - Pandas, show me the magic...\")\nprint(\"Le Pandas...\")\nprint()\nprint(train.iloc[5]) # Returns specific row\nprint(type(train.iloc[5]))","a1b87df2":"# To get multiple rows\nprint(\"Type: \",type(train.iloc[1:5])) # 5 is exclusive i.e. rows from 1-4 will be displayed\ntrain.iloc[1:5]","b679bfd6":"# if we want a specific row and a specific column\ntrain.iloc[2,1]","d5c7224f":"# Although most of the time we don't need an iterartor, pandas provides a method, df.iterrow()\n# This can be used to iterate the dataframe","9be8712d":"# Counterpart of iloc is loc, which allows using index names\ntrain.loc[2]\n# Note that 2 is being interpreted as the index name not as index number","2b0172ec":"# There is a pandas method which provides deatiled analysis of DataFrame.\nprint(\"Me - Pandas...Is it everything?\")\nprint(\"Pandas - Don't under estimate the power of Pandas, you hooman...\")\ntrain.describe()","777b2e0c":"# We can sort the values using df.sort_values() method\ntrain.sort_values('Age')\n# We can provide extra arguement ascending = False if we want to sort in descending order. By default ascending =True","f4edb910":"# Or if we want to sort using multiple columns, we can do as follows:\ntrain.sort_values(['Age', 'Name'], ascending=[1,0])\n# 1- ascending for Age, 0 - Descending for Name","8b45d9bb":"# Let's say we want to select Pclass = 1 passengers...We wanna see how many rich kids\n# But before that, let's combine the test and train data into one...\ntotal = train.append(test) # There are other ways too, nbut I find it simple","20030199":"# Let's see the shape of total\nprint(total.shape)\nprint(\"Yes! We have appended the data successfully\")","b2f3d95e":"# Now let' find out the rich kids...:)\ntotal[total['Pclass']==1]","73387700":"# Ye! We have all the rich kids!!!\n# Pandas - But wait, kids?, 58 years old kid? On what planet Hooman?\n# So let's find out real kids, lets say of age less than 16","c933d53e":"print(\"Rich kids:\")\nprint()\ntotal[(total['Pclass']==1) & (total['Age']<16)]  # Don't miss the paranthesis, mighty Pandas warns you Hooman","246dcfbc":"# Before we move further, I, as a responsible creater of this notebook, wanna give you a bonus...:)\nprint(\"Finding count of null values in all columns....\")\ntotal.isnull().sum()","36dcddb0":"# One more bonus - We can find unique values and count of each for each column...\ntotal['Pclass'].value_counts()","e754708a":"# Now that we have got a lot of things... I wanna put these rich kids to a seprate class of Pclass=0\n# Note that no such class actually exists... We shall make a new class for these rich kids..:(\n# To do this, we will summon the mighty loc method...I told you its powerful...\nprint(type(total))\ntotal.loc[(total['Pclass']==1) & (total['Age']<16), 'Pclass']=0\nprint(\"I hope it does the task :(\")","9af070b8":"# Let's check if we did what we wanted...\nprint(\"New Pclass should be zero\")\ntotal[(total['Pclass']==0) & (total['Age']<16)]","0f350c56":"print(\"See we added the new Pclass that was not before\")\nprint(\"To confirm: I summon the bonus I gave to you:::)))\")\ntotal['Pclass'].value_counts()","de63a843":"# At last, I wanna combine Parch and SibSp to Family columns as Siblings and Parent\/Children are a part of family\n# Creaters of Dataset - Yes, we know but we want you to work more :(((\ntotal['Family'] = total['Parch']+total['SibSp']\ntotal.head()","15735dc5":"# As you can see at the end there is a column named 'Family'...Hurray.. We united the family...","0d465f3a":"# Let's find the mean and median of Age\nprint(\"Mean of Age:\", total['Age'].mean())\nprint(\"Median of Age:\",total['Age'].median())","e7fddb9a":"# Let's find out max, min of age -- :p...I wanna know the oldest grandpa out there in titanic and youngest seet child\nprint(\"Minimum Age:\",total['Age'].min())\nprint(\"Maximum Age:\",total['Age'].max())","c8613927":"# At last, a few more...\nprint(\"Sum of all age (IDK why I am finding it): \", total['Age'].sum())","486a1011":"# Aggregation is yet another powerful weapon of Pandas...\nprint(\"It gives mean of ages grouped by Pclass:\")\ntotal.groupby(['Pclass']).mean()","50efa90f":"# Now at last, we want to save the data... But wait another bonus... We want to drop some columns first\n# Lets drop SibSp and Parch as they are combined into family already...\ntotal.drop(['Parch','SibSp'],inplace = True, axis=1)\n# inplace = True modofies the 'total' inplace. axis = 1 specifies the operation is column-wise\ntotal.head()","00753a5b":"# As you can see there is no SibSp and Parch...\n# Now let's save this to a new file...\ntotal.to_csv('modified.csv')","ac69d8a4":"## Pandas with jokes\n## Content\n\n* **Reading the data - *First thing first***\n* **Selecting specific columns and slicing - *getting hands on the beast***\n* **loc, iloc - *My Favourite***\n* **Conditioning - *The coolest feature***\n* **Statistics - *The Queen***\n* **Saving the data - *Final Task***","d60458b2":"### Before Getting Started\n#### If you are running on local machine and doesn't have Pandas installed, it can be installed with the command:\n* Enter following command in terminal:\n* *pip install pandas*\n* It should install the required pandas library.\n* Note - If pip is by default pointed to python2, use pip3 instead.\n\nDo as I say, I promise the fun ahead! :)","7e4ac120":"### loc, iloc\n#### Most powerful pandas features\n#### They say - With great power comes great responsibility (They = Spiderman....Surprised? Haha..)","c901197e":"#### For the purpose of illustration we will use the most basic Titanic dataset on kaggle.\n#### We shall see almost all basic functions of pandas on the dataset. However, Since Pandas is large, not everything is covered in the notebook.\n#### You are encouraged to visit the documentation, it has everything about pandas.\n#### Pandas documentation : [Pandas Documentation](https:\/\/pandas.pydata.org\/docs\/)\n\n#### Titanic - 'Even Dead I Am The Hero' :) :(","fb40222b":"### Reading the data\n##### As they say - reading is key to success. (They = Me in here xD)","40f3b2e0":"##### There is a subtle difference in operations involving a single column and the last operation involving multiple columns. Last operation returns a DataFrame while other operations return a Series. If you want the single column operation to return DataFrame, you can do like as follows:\n* train[['Name']]\n\n##### Series and DataFrame are pandas specific Data Structures. For more details refer to documentation. \n##### Oh Pandas, you neccessary evil!!!","3908a97d":"### Conditioning - The Coolest Feature\n#### They say - ....... (They=Me....I am not a chatterbox man, xD!!!)","8dc32fa4":"# Easy Peasy Pandas","edaff076":"### If you find it useful please hit the upvote button and comment if you want to suggest anything\n### For Numpy Tutorial Notebook follow the link: [Numpy with jokes](https:\/\/www.kaggle.com\/mohtashimnawaz\/numpy-with-jokes-and-funs\/comments)","08aa5704":"### Saving the data - *The final task*","aab512da":"#### We have seen a lot about Pandas and it is enough to get started and start working with pandas...\n#### However, as alrady said pandas is huge, so refer to the documentation if you want to explore more\n#### I hope you enjoyed learning pandas. Please Hit the upvote button and share and comment.\n# Thank you","51b2748f":"### Statictics - Helping hands for a Data Scientist\n#### They say - Mathemetics is queen of all sciences (They = A famous mathemetician...)","5adb77d7":"### Selecting specific columns and slicing\n#### They say, Playing with data makes you expert in data exploration... (As usual, They=Me xD)"}}