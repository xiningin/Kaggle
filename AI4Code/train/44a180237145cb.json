{"cell_type":{"1581cde8":"code","e256636e":"code","9bea92c5":"code","39664669":"code","8b89be33":"code","1e95990c":"code","0c3ff837":"code","7143543d":"code","ba1b95c2":"code","47cacbae":"code","705a1461":"code","a9a62b3b":"code","6387cf34":"code","84f90d4f":"code","a0943d62":"code","3f2b577b":"code","d1007f48":"code","a3312b5d":"code","f7a302a0":"code","df295f1d":"code","7c7dbb91":"code","4510995b":"code","5bfe05a4":"code","b8ca21dc":"code","c8b4f1bf":"code","72cf2046":"code","dc7e57b2":"code","dd18e949":"code","e5cf899d":"code","63e5efb2":"code","db3c0eff":"code","c3bcb5b6":"code","0e7ac91c":"code","e039dff0":"code","63cd7c40":"code","d849c4c9":"code","b76dc078":"code","b9ba901a":"code","6c29c247":"code","7b9b3460":"code","58aeb0c7":"code","54db202c":"code","8464a7ba":"code","e42c0fbd":"code","4828f6ff":"code","1b3bf7c3":"code","62ce8faf":"code","42422062":"code","d621643b":"code","f6edb6b8":"markdown","460652ae":"markdown","d547042c":"markdown","2e5329a0":"markdown","6f85423d":"markdown","f20b8f62":"markdown","b5c8d70d":"markdown","a86331d8":"markdown","9ba89775":"markdown","f8c09fe1":"markdown","b9ad0efe":"markdown","f9c4a144":"markdown","390290c1":"markdown","5ccf5f75":"markdown","37854c8a":"markdown","4c788295":"markdown","be061cfc":"markdown"},"source":{"1581cde8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e256636e":"df = pd.read_csv(\"\/kaggle\/input\/netflix-shows\/netflix_titles.csv\")\ndf.head()","9bea92c5":"#to see high level details\ndf.info()","39664669":"df.describe(include=\"all\")","8b89be33":"#let's check the missing data\ndf.isna().sum().sort_values(ascending=False)","1e95990c":"missing_percentages = df.isna().sum().sort_values(ascending=False) \/ len(df) * 100\nmissing_percentages = missing_percentages[missing_percentages!=0]\ndf_missing_percentages = pd.DataFrame(missing_percentages).round(2)\ndf_missing_percentages = df_missing_percentages.reset_index().rename(columns = {\"index\":\"Column\", 0:\"missing_percentage\"})\ndf_missing_percentages","0c3ff837":"import seaborn as sns\nimport matplotlib.pyplot as plt","7143543d":"sns.set_theme(style=\"whitegrid\")\nax = sns.barplot(x=\"Column\", y=\"missing_percentage\", data = df_missing_percentages)","ba1b95c2":"df['rating'].value_counts()","47cacbae":"df['rating'] = df['rating'].replace({'74 min': 'TV-MA', '84 min': 'TV-MA', '66 min': 'TV-MA'})\ndf['rating'] = df['rating'].replace({'TV-Y7-FV': 'TV-Y7'})\ndf['rating'].unique()","705a1461":"# Renaming vaules for Rating for better understanding\n# Source : https:\/\/www.kaggle.com\/sukhdeepk\/netflix-dataset-eda\/notebook\ndf['rating'] = df['rating'].replace({\n                'PG-13': 'Teens - Age above 12',\n                'TV-MA': 'Adults',\n                'PG': 'Kids - with parental guidence',\n                'TV-14': 'Teens - Age above 14',\n                'TV-PG': 'Kids - with parental guidence',\n                'TV-Y': 'Kids',\n                'TV-Y7': 'Kids - Age above 7',\n                'R': 'Adults',\n                'TV-G': 'Kids',\n                 'G': 'Kids',\n                'NC-17': 'Adults',\n                'NR': 'NR',\n                'UR' : 'UR'\n                \n})","a9a62b3b":"df.rating.unique()","6387cf34":"df.country = df.country.fillna(df.country.mode()[0])","84f90d4f":"df.country.isna().sum()","a0943d62":"df.cast.replace(np.nan, 'None', inplace = True)\ndf.director.replace(np.nan, 'None', inplace = True)\ndf.dropna(inplace = True)\ndf.drop_duplicates(inplace = True)\ndf.head()","3f2b577b":"missing_percentages2 = df.isna().sum().sort_values(ascending=False) \/ len(df) * 100\nmissing_percentages2.round(0)","d1007f48":"#Let's drop the column that we don't need like show_id and etc\ndf_clean = df.drop(['show_id','cast','description'], axis = 1)\ndf_clean.head()","a3312b5d":"#Let's start with the type of content netflix have\ndf_clean.type.value_counts()","f7a302a0":"#Count plot of type of movies\nax = sns.countplot(x=\"type\", data=df_clean, palette=\"tab10\", hue = \"type\")\nax.set(xlabel=\"Type of Content\", ylabel=\"Count of Type\")\n\n#Pie Chart of type of movies\nsns.color_palette(\"hls\", 8)\ntype_counts = df_clean.type.value_counts()\npie, ax = plt.subplots(figsize=[10,6])\nplt.pie(type_counts, labels = type_counts.index, autopct=\"%1.1f%%\",startangle=150, shadow=True, explode=None, colors = ['Grey','Yellow'])\nplt.title(\"Pie Chart for type of movies\", fontsize=14);\n","df295f1d":"df_clean.country.value_counts()","7c7dbb91":"# splitting the countries in different rows \ncountry_df = df_clean[['title','type', 'country' ]]\ncountry_df = (country_df.drop('country', axis=1)\n              .join(country_df.country.str.split(', ',expand=True).stack().reset_index(drop=True, level=1).rename('country')))\ncountry_df.head()","4510995b":"country_df.country.nunique()","5bfe05a4":"#as we can see we have records from 127 different countries, we'll only work with top 10 highest contributing countries\ntop_ten_countries = country_df.country.value_counts().sort_values(ascending=False)[:10]\ntop_ten_countries","b8ca21dc":"x_countries = top_ten_countries.index\ny_countries = top_ten_countries.values\nplt.figure(figsize=(15,8))\nplt.title(\"Top 10 Countries Producing Shows\")\nplt.xlabel(\"Countries\")\nplt.ylabel(\"Number of shows\")\nplt.xticks(rotation = 45)\nsns.barplot(x= x_countries, y = y_countries, palette = 'rocket')\nplt.show()","c8b4f1bf":"temp_df = country_df.loc[country_df['country'].isin(top_ten_countries.index)]\ntemp_df.head()","72cf2046":"#let's see side by side comparision\nplt.figure(figsize=(17,6))\nplot = sns.countplot(x='type',data=temp_df,hue='country',palette='husl')\nplot.set_ylabel(\"Count of Content\",fontsize=10, weight='bold')\nplot.set_xlabel(\"Countries\",fontsize=10,weight='bold')\nplt.legend(title='country', loc='upper right')\ntheme = [\"#DEF5E5\", \"#459E97\", \"#4B9ABB\",\"#0A4361\",\"#E68193\",]\nplot.figure.suptitle(' Comparision of TV Show\/ Movies of top 10 content producing countries',y=1, size = 20, color = theme[3], weight='bold');","dc7e57b2":"#now checking type of content based on country\nmovie_countries = country_df[country_df['type']=='Movie']\ntv_show_countries = country_df[country_df['type']=='TV Show']","dd18e949":"top_ten_movie_countries = movie_countries.country.value_counts().sort_values(ascending=False)[:10]\ntop_ten_tv_show_countries = tv_show_countries.country.value_counts().sort_values(ascending=False)[:10]","e5cf899d":"plt.subplots(figsize=(12,6))\nsns.barplot(top_ten_movie_countries.index, top_ten_movie_countries.values,palette=\"cubehelix\")\nplt.title(\"Top 10 countries producing movies in Netflix\")\nplt.xlabel(\"Countries\",fontsize=10,weight='bold')\nplt.ylabel(\"Count Of Movies\",fontsize=10, weight='bold')\nplt.xticks(rotation = 45)\nplt.show()\n\nplt.subplots(figsize=(12,6))\nsns.barplot(top_ten_tv_show_countries.index, top_ten_tv_show_countries.values,palette=\"flare\")\nplt.title(\"Top 10 countries producing TV Shows in Netflix\")\nplt.xlabel(\"Countries\",fontsize=10,weight='bold')\nplt.ylabel(\"Count Of Movies\",fontsize=10, weight='bold')\nplt.xticks(rotation = 45)\nplt.show()\n","63e5efb2":"#Let's check categories for which the maximum movie content is uploaded\n\nmovie_ratings = df_clean[df_clean.type == 'Movie']\nmovie_ratings_df = pd.DataFrame(movie_ratings.rating.value_counts()).reset_index().rename(columns = {\"index\": \"Ratings\", \"rating\": \"Number_of_Movies\"})\nmovie_ratings_df.head()","db3c0eff":"plt.subplots(figsize=(12,6))\nsns.barplot(movie_ratings_df.Ratings, movie_ratings_df.Number_of_Movies,palette=\"rocket_r\")\nplt.title(\"Number of contents produced for Movie Category\",fontsize=15)\nplt.ylabel(\"Number of contents\")\nplt.xlabel('Category Ratings')\nplt.xticks(rotation = 45)\nplt.show()","c3bcb5b6":"tv_show_ratings = df_clean[df_clean.type == 'TV Show']\ntv_show_ratings = pd.DataFrame(tv_show_ratings.rating.value_counts()).reset_index().rename(columns = {\"index\": \"Ratings\", \"rating\": \"Number_of_Movies\"})\ntv_show_ratings.head()","0e7ac91c":"plt.subplots(figsize=(12,6))\nsns.barplot(tv_show_ratings.Ratings, tv_show_ratings.Number_of_Movies,palette=\"crest\")\nplt.title(\"Number of contents produced for TV Show Category\",fontsize=15)\nplt.ylabel(\"Number of contents\")\nplt.xlabel('Category Ratings')\nplt.xticks(rotation = 45)\nplt.show()","e039dff0":"#Let's check which top 10 years have the most released content\nyear_df = pd.DataFrame(df_clean.release_year.value_counts()).reset_index().rename(columns= {\"index\":\"release_year\", \"release_year\":\"total_content_released\"})\nyear_df","63cd7c40":"plt.figure(figsize=(6,5))\nsns.lineplot(x=year_df['release_year'], y=year_df[\"total_content_released\"])\nplt.title(\"Trend of released movies\")\nplt.xlabel(\"Years\")\nplt.ylabel(\"Content Released\")","d849c4c9":"earliest_year = year_df.sort_values(\"release_year\").reset_index().drop(\"index\", axis=1).release_year[0]\nlatest_year = year_df.sort_values(\"release_year\", ascending=False).reset_index().drop(\"index\", axis=1).release_year[0]\n\nbins = latest_year- earliest_year\nbins","b76dc078":"sns.histplot(data = year_df, x=\"release_year\", y=\"total_content_released\", bins = bins, kde= True)\nplt.title(\"Trend of released movies\")\nplt.xlabel(\"Years\")\nplt.ylabel(\"Content Released\")","b9ba901a":"#Let's check which top 10 years have the most released content\nmovie_content = df_clean[df_clean.type == 'Movie']\ntv_show_content = df_clean[df_clean.type == 'TV Show']\n\nmovie_year_df = pd.DataFrame(movie_content.release_year.value_counts()).reset_index().rename(columns= {\"index\":\"release_year\", \"release_year\":\"total_content_released\"})\ntv_show_year_df = pd.DataFrame(tv_show_content.release_year.value_counts()).reset_index().rename(columns= {\"index\":\"release_year\", \"release_year\":\"total_content_released\"})","6c29c247":"plt.figure(figsize=(6,5))\nsns.lineplot(x=movie_year_df['release_year'], y=movie_year_df[\"total_content_released\"])\nsns.lineplot(x=tv_show_year_df['release_year'], y=tv_show_year_df[\"total_content_released\"])\nplt.title(\"Trend of released movies comparision\")\nplt.xlabel(\"Years\")\nplt.ylabel(\"Content Released\")","7b9b3460":"df_temp = df_clean.query(\"type == 'Movie'\")\n# splitting the Genre in different rows to visualize it\ndf_temp = df_temp[['title','type', 'country', 'listed_in']]\ndf_temp = (df_temp.drop('listed_in', axis=1)\n              .join(df_temp.listed_in.str.split(', ',expand=True).stack().reset_index(drop=True, level=1).rename('Genre')))\ndf_temp.head()","58aeb0c7":"df_temp.Genre.unique()","54db202c":"Genre_df = pd.DataFrame(df_temp.Genre.value_counts().sort_values(ascending=False)).reset_index().rename(columns = {\"index\":\"Genre\", \"Genre\":\"Count\"})\nGenre_df.head()","8464a7ba":"#Plotting wordcloud to see the most common genre\nfrom wordcloud import WordCloud\nfrom scipy import signal\nGenres = Genre_df.Genre.dropna(False)\nplt.subplots(figsize=(10,10))\nwordcloud= WordCloud(background_color='white', width=500, height = 250).generate(' '.join(Genres))\nplt.axis('off')\nplt.imshow(wordcloud)\nplt.show()","e42c0fbd":"## Countries affected by terrorism\nplt.subplots(figsize=(20,6))\nsns.barplot(Genre_df.Genre,Genre_df.Count,palette='Blues_d')\nplt.title('Movie Content in Netflix')\nplt.xlabel('Genres')\nplt.ylabel('Count of content')\nplt.xticks(rotation= 45)\nplt.show()","4828f6ff":"tv_show_temp = df_clean.query(\"type == 'TV Show'\")\n# splitting the Genre in different rows to visualize it\ntv_show_temp = tv_show_temp[['title','type', 'country', 'listed_in']]\ntv_show_temp = (tv_show_temp.drop('listed_in', axis=1)\n              .join(tv_show_temp.listed_in.str.split(', ',expand=True).stack().reset_index(drop=True, level=1).rename('Genre')))\ntv_show_temp.head()","1b3bf7c3":"tv_show_temp.Genre.unique()","62ce8faf":"Tv_show_Genre_df = pd.DataFrame(tv_show_temp.Genre.value_counts().sort_values(ascending=False)).reset_index().rename(columns = {\"index\":\"Genre\", \"Genre\":\"Count\"})\nTv_show_Genre_df.head()","42422062":"#Plotting wordcloud to see the most common genre\nfrom wordcloud import WordCloud\nfrom scipy import signal\nGenres = Tv_show_Genre_df.Genre.dropna(False)\nplt.subplots(figsize=(10,10))\nwordcloud= WordCloud(background_color='white', width=500, height = 250).generate(' '.join(Genres))\nplt.axis('off')\nplt.imshow(wordcloud)\nplt.show()","d621643b":"## Countries affected by terrorism\nplt.subplots(figsize=(20,6))\nsns.barplot(Tv_show_Genre_df.Genre,Genre_df.Count,palette='mako')\nplt.title('TV Show Content in Netflix')\nplt.xlabel('Genres')\nplt.ylabel('Count of content')\nplt.xticks(rotation= 45)\nplt.show()","f6edb6b8":"Results: The blue line is the increasing trend line for movie content and the read line is for tv show content. Both seem to follow increasing pattern after 2015 to 2020","460652ae":"The ratings data has some some incorrect entries that we need to set","d547042c":"##### Results: As we can see that the united states is the highest tv show and movie both producing countries.","2e5329a0":"We'll try to answer some of the questions from the data","6f85423d":"#### First, we've to seperate the countries before making any visualization on country","f20b8f62":"#### The director column has the most missing data so we now need to deal with the missing data first before proceding ","b5c8d70d":"## Visualization","a86331d8":"#### It also shows that the df has only one numeric column and the rest of the columns are string or object based","9ba89775":"Result: International Movies have been the most popular genre for Movie category followed by Dramas and Comedies","f8c09fe1":"dealt with the missing data of country, let's deal with another columns now","b9ad0efe":"Results: International TV Shows have been the most popular TV Show content on netflix followed by TV Dramas and TV Comedies","f9c4a144":"#### As we can see from the graph that from 2017-2020 has been the most released content years in NETFLIX","390290c1":"## Data Cleaning","5ccf5f75":"### Let's plot and see the missing data","37854c8a":"### MOVIE based Genre","4c788295":"### TV Show based genre","be061cfc":"#### Results : As we can see that the United States, India, and United Kingtom are the top contributing countries."}}