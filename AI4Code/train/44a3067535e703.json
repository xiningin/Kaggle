{"cell_type":{"8885ca11":"code","2c417e80":"code","3789638b":"code","e4c0b137":"code","d876d985":"code","5db01960":"code","41a91684":"code","1c3a528e":"code","ff1a3515":"code","ee006018":"markdown","d5118801":"markdown"},"source":{"8885ca11":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2c417e80":"from sklearn.neighbors import kneighbors_graph\nimport time\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ntry:\n    import cudf\n    from cuml.neighbors import NearestNeighbors\n    #from cuml.datasets import make_blobs    \nexcept:\n    print('GPU library cannot be imported. Turn ON GPU')\n    ","3789638b":"pip install openml\n","e4c0b137":"import openml\n\nt0 = time.time()\nopenml_df = openml.datasets.list_datasets(output_format=\"dataframe\")\nprint(time.time()-t0,'seconds passed ')\n\nif 0: ## The same can be done with BIGGER lines of code\n    openml_list = openml.datasets.list_datasets()  # returns a dict\n    # Show a nice table with some key data properties\n    openml_df = pd.DataFrame.from_dict(openml_list, orient=\"index\")\n    openml_df = datalist[[\"did\", \"name\", \"NumberOfInstances\", \"NumberOfFeatures\", \"NumberOfClasses\"]]\n\n    print(f\"First 10 of {len(datalist)} datasets...\")\n    openml_df.head(n=10)\n\n\nopenml_df\n\n# Among all datasets there is subset of 45 datasets with  mircoarray Gene Expressions (mainly cancer) \n# can be selected by number of features == 10937\ndf_gemler = openml_df[ ( openml_df.NumberOfFeatures == 10937)    ].sort_values([\"NumberOfInstances\"], ascending=False)#.head(n=20)\nprint(df_gemler.shape)\ndf_gemler","d876d985":"\ndef get_Golub_1999_gen_expressions_for_leukemias():\n    '''\n    Load dataset by Golub et.al. 1999 - see info:  https:\/\/www.kaggle.com\/crawford\/gene-expression\n    This dataset comes from a proof-of-concept study published in 1999 by Golub et al. \n    It showed how new cases of cancer could be classified by gene expression monitoring (via DNA microarray) \n    and thereby provided a general approach for identifying new cancer classes and assigning tumors to known classes. \n    These data were used to classify patients with acute myeloid leukemia (AML) and acute lymphoblastic leukemia (ALL).\n    \n    We join train and test, and throw out some \"Gene Description\", \"Gene Accession Number\"\n    to get standard form of datasets. \n    \n    There are two datasets containing the initial (training, 38 samples) and independent (test, 34 samples) datasets used in the paper. These datasets contain measurements corresponding to ALL and AML samples from Bone Marrow and Peripheral Blood. Intensity values have been re-scaled such that overall intensities for each chip are equivalent.\n    '''\n    \n    f_test = '\/kaggle\/input\/gene-expression\/data_set_ALL_AML_independent.csv'\n    f_train = '\/kaggle\/input\/gene-expression\/data_set_ALL_AML_train.csv'\n    f_y = '\/kaggle\/input\/gene-expression\/actual.csv'    \n    \n    y = pd.read_csv(f_y)# '..\/input\/actual.csv') \n    y = y.replace({'ALL':0,'AML':1})\n    y = y.set_index('patient')\n    y = y['cancer']\n\n    \n    # Import training data\n    df_train = pd.read_csv(f_train)#'..\/input\/data_set_ALL_AML_train.csv')\n    #print(df_train.shape)\n\n    # Import testing data\n    df_test = pd.read_csv(f_test)# '..\/input\/data_set_ALL_AML_independent.csv')\n    #print(df_test.shape)\n\n    train_to_keep = [col for col in df_train.columns if \"call\" not in col]\n    test_to_keep = [col for col in df_test.columns if \"call\" not in col]\n\n    X_train_tr = df_train[train_to_keep]\n    X_test_tr = df_test[test_to_keep]\n\n    train_columns_titles = ['Gene Description', 'Gene Accession Number', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10',\n           '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', \n           '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38']\n\n    X_train_tr = X_train_tr.reindex(columns=train_columns_titles)\n\n    test_columns_titles = ['Gene Description', 'Gene Accession Number','39', '40', '41', '42', '43', '44', '45', '46',\n           '47', '48', '49', '50', '51', '52', '53',  '54', '55', '56', '57', '58', '59',\n           '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72']\n\n    X_test_tr = X_test_tr.reindex(columns=test_columns_titles)\n\n    X_train = X_train_tr.T\n    X_test = X_test_tr.T\n\n    X = pd.concat( [X_train, X_test], axis = 0 )\n    X\n    X.columns = X.iloc[1]\n    X = X.drop([\"Gene Description\", \"Gene Accession Number\"]).apply(pd.to_numeric)\n    X    \n\n    return X,y\n","5db01960":"dataset = 'human_liver_ARCHS4' # '' \ndataset = 'Golub_1999_gen_expressions_for_leukemias'\ndataset = 'Leukemia GSE9476 microarray CuMiDa'\ndataset = 'Breast cancer GSE45827 microarray CuMiDa'\ndataset = 'Brain cancer GSE50161 microarray CuMiDa'\ndataset = 'Breast Cancer Proteomes'\ndataset = 'Melanoma RNAseq'\n\ndataset = 'Mice Protein Expression'\n\n\nif dataset == 'Mice Protein Expression':\n    fn = '\/kaggle\/input\/mice-protein-expression\/Data_Cortex_Nuclear.csv'\n    df = pd.read_csv(fn, index_col = 0)\n    y = df['class']\n    X = df.iloc[:,:-4]\n    \nif dataset == 'Melanoma RNAseq':\n    fn = '\/kaggle\/input\/melanoma-gene-expressions\/MDB_SKCM_RNASeq to joma.csv'\n    df = pd.read_csv(fn, index_col = 0)\n    X = df.T\n\nif dataset == 'Breast Cancer Proteomes':\n    fn = '\/kaggle\/input\/breastcancerproteomes\/77_cancer_proteomes_CPTAC_itraq.csv'\n    df = pd.read_csv(fn)# , index_col = 0)\n    t = df['RefSeq_accession_number'] + df['gene_symbol'].apply(lambda x: ' ' + str (x) + ' ' ) + df['gene_name']\n    df.index = t \n    df = df.iloc[:,3:]\n    df.index.name = 'Genes Info'\n    X = df.T\n    y = pd.Series(index = X.index, data = np.zeros(len(X)))\n    y.iloc[-3:] = 1 # 3 healthy \n\nif dataset == 'Brain cancer GSE50161 microarray CuMiDa':\n    fn = '\/kaggle\/input\/brain-cancer-gene-expression-cumida\/Brain_GSE50161.csv'\n    df = pd.read_csv(fn, index_col = 0)\n    y = df['type']\n    X = df.iloc[:,1:]\n\n\nif dataset == 'Breast cancer GSE45827 microarray CuMiDa':\n    fn = '\/kaggle\/input\/breast-cancer-gene-expression-cumida\/Breast_GSE45827.csv'\n    df = pd.read_csv(fn, index_col = 0)\n    y = df['type']\n    X = df.iloc[:,1:]\n\nif dataset == 'Leukemia GSE9476 microarray CuMiDa':\n    fn = '\/kaggle\/input\/leukemia-gene-expression-cumida\/Leukemia_GSE9476.csv'\n    df = pd.read_csv(fn, index_col = 0)\n    y = df['type']\n    X = df.iloc[:,1:]\n\n\nif dataset == 'Golub_1999_gen_expressions_for_leukemias':\n    X,y = get_Golub_1999_gen_expressions_for_leukemias()\n\nif dataset == 'GSE90047_Mouse_Liver_Hepatoblast_invivo':\n    f = '\/kaggle\/input\/trajectory-inference-single-cell-rna-seq\/GSE90047_Mouse_Liver_Hepatoblast_invivo.csv'\n    X = pd.read_csv(f ,  index_col= 0  )\n\nif dataset == 'human_liver_ARCHS4':\n    f = '\/kaggle\/input\/human-liver-rnaseq-gene-expression-903-samples\/human_liver.tsv'\n    X = pd.read_csv(f ,  index_col= 0 , sep = '\\t' )\n    X = X.transpose()\n\nif dataset == 'GSE67123_v6_scrna_10x_143_23548_Mouse_Embryo_HSCs_invivo_fromCytotrace':\n    f = '\/kaggle\/input\/genes-expressions-datasets-collection\/GSE67123_v6_scrna_10x_143_23548_Mouse_Embryo_HSCs_invivo_fromCytotrace.csv'\n    X = pd.read_csv(f ,  index_col= 0 )#  , sep = '\\t' )\n    \nif dataset == 'single-cell-rna-seq-from-stoeckius-et-al-2017\/GSE100866_CD8_merged-RNA_umi':\n    f = '\/kaggle\/input\/single-cell-rna-seq-from-stoeckius-et-al-2017\/GSE100866_CD8_merged-RNA_umi.csv'\n    X = pd.read_csv(f ,  index_col= 0 )#  , sep = '\\t' )\n    X = X.transpose()\n\nif dataset == 'openml1146OVA_Prostate':\n    dataset = openml.datasets.get_dataset(1146)\n    X, y, categorical_indicator, attribute_names = dataset.get_data(\n        dataset_format=\"dataframe\", target=dataset.default_target_attribute )\n\nif dataset == 'Dexter300from_scikit_hubness':\n    f = '\/kaggle\/input\/hubness-for-high-dimensional-datasets\/y_Dexter300from_scikit_hubness.csv'\n    y = pd.read_csv(f ,  index_col= 0  )\n    y\n    f = '\/kaggle\/input\/hubness-for-high-dimensional-datasets\/X_Dexter300from_scikit_hubness.csv'\n    X = pd.read_csv(f ,  index_col= 0  )\n    \n    \nX","41a91684":"try:\n    print(pd.Series(y).value_counts())\nexcept:\n    print('Seems y is not defined. There is no natural classes for the dataset')","1c3a528e":"from sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\n\nimport time\n\nt0=time.time()\nfig = plt.figure(figsize = (20,4) )\n\nX = X.fillna(0)\nX2 = PCA().fit_transform(X)\nplt.scatter(X2[:,0],X2[:,1] ) #  , c = y  )\nplt.title('PCA')\nplt.grid()\nplt.show()\n\nprint(time.time()-t0,'seconds passed')","ff1a3515":"\ntry:\n    from sklearn.decomposition import PCA\n    import matplotlib.pyplot as plt\n    import seaborn as sns\n    \n    pca = PCA(n_components=2)\n    X = pca.fit_transform(X)\n\n    plt.figure(figsize = (20,5))\n    sns.scatterplot(X[:,0],X[:,1], hue = y) \n    \n    plt.title('PCA')\n    plt.grid()\n    \nexcept:\n    print('Something goes wrong. Probably y is not defined')","ee006018":"# Load Data","d5118801":"# What is about \n\nThat script gives example how to load multiple genes expression datasets on kaggle.\n(Some other datasets like Dexter included for comparaison). \nThere are several of them available on kaggle, we collect them.  \n\nHorizontal axis - genes, Vertical axis - cells\/samples. \n\n\nV6 - added:\n    1) Melanoma Gene expressions https:\/\/www.kaggle.com\/jomaminoza\/melanoma-gene-expressions\n    473 rows \u00d7 20530 columns. \n    Seems to be scRNA seq data, refrences are absent. \n    2) Mice Protein Expression  https:\/\/www.kaggle.com\/ruslankl\/mice-protein-expression\n    Classical dataset even mentioned in sklearn as example for access to openml datasets.\n    Expression level of 77 proteins are measured after for 72 mices (and many measurements for each) - in total 1080 measurements. The data set consists of the expression levels of 77 proteins\/protein modifications that produced detectable signals in the nuclear fraction of cortex. There are 38 control mice and 34 trisomic mice (Down syndrome), for a total of 72 mice. In the experiments, 15 measurements were registered of each protein per sample\/mouse. Therefore, for control mice, there are 38x15, or 570 measurements, and for trisomic mice, there are 34x15, or 510 measurements. The dataset contains a total of 1080 measurements per protein.\n    Dataset at UC Irvine: https:\/\/archive.ics.uci.edu\/ml\/datasets\/Mice+Protein+Expression\n    There is nice notebook for the dataset: https:\/\/www.kaggle.com\/ruslankl\/protein-expression-analysis\n    \nV5 - added:\n    Breast Cancer Proteomes - https:\/\/www.kaggle.com\/piotrgrabo\/breastcancerproteomes\nhttps:\/\/www.ncbi.nlm.nih.gov\/pmc\/articles\/PMC6547580\/ https:\/\/www.nature.com\/articles\/s41598-019-44339-4.pdf?origin=ppub\nData - log2 iTRAQ ratios for each sample (protein expression data, most important), three last are from healthy individuals. RefSeq_accession_number: RefSeq protein ID (each protein has a unique ID in a RefSeq database) gene_symbol: a symbol unique to each gene (every protein is encoded by some gene) gene_name: a full name of that gene Remaining columns.\n83 rows \u00d7 12553 columns \n\n\nV4 - added:\n    1) Brain cancer microarray GSE50161 from CuMiDa: https:\/\/www.kaggle.com\/brunogrisci\/brain-cancer-gene-expression-cumida\n        5 classes 54676 genes 130 samples .  4 different types of brain cancer (plus healthy tissue)\n    2) Breast cancer GSE45827 microarray from CuMiDa https:\/\/www.kaggle.com\/brunogrisci\/breast-cancer-gene-expression-cumida\n        6 classes, 54676 genes, 151 samples\n\nV3 - added:\n    Leukemia microarray gene expression GSE9476 from CuMiDa:  https:\/\/www.kaggle.com\/brunogrisci\/leukemia-gene-expression-cumida\n    5 classes, 22284 genes, 64 samples\n\n\nV2 - added:\n    Dataset by Golub et.al. 1999 - see info:  https:\/\/www.kaggle.com\/crawford\/gene-expression\n    It showed how new cases of cancer could be classified by gene expression monitoring (via DNA microarray) \n    These data were used to classify patients with acute myeloid leukemia (AML) and acute lymphoblastic leukemia (ALL).\n    shape: 72 x 7219 \n\nV1 - 6 datasets: \n\nOVA_Prostate dataset from openml \n\nsingle-cell-rna-seq-from-stoeckius-et-al-2017\/GSE100866_CD8_merged-RNA_umi\n\nGSE67123_v6_scrna_10x_143_23548_Mouse_Embryo_HSCs_invivo_fromCytotrace.csv\n\nhuman_liver from ARCHS4\n\nGSE90047_Mouse_Liver_Hepatoblast_invivo\n\nDexter300 dataset \n"}}