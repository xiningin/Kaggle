{"cell_type":{"370a8bdb":"code","b440c1c7":"code","c91e8ed3":"code","4e4b1b2a":"code","1af39565":"code","a98d099a":"code","fc101247":"code","455cd171":"code","72b2ea9d":"code","1819181c":"code","f57b9098":"code","6ddc9ae4":"code","00f04f7a":"code","8ff19a4a":"code","c1685f25":"code","fc174cab":"code","b8b19b7e":"code","6eb864a0":"code","a87458fd":"code","1059c6a2":"code","a6798bee":"code","b7c3ecdc":"code","4e5c9c75":"code","e26aaf2a":"code","33ed8a53":"code","8b846756":"code","db83912d":"code","15bbb49c":"code","f0d7823e":"code","89fc7716":"code","8052ed6a":"code","d6384066":"code","1f5ea31d":"code","07cd2681":"code","3bc5b9e2":"markdown","5c3c135f":"markdown","0190c6a0":"markdown","9d0efeaf":"markdown","724d7d1b":"markdown","33cda39d":"markdown","3d958fa0":"markdown","6dab78b1":"markdown","5b631c8c":"markdown","17d17f7c":"markdown","94c0e689":"markdown","6597a3a9":"markdown","6f7b2bde":"markdown","4e0f10ba":"markdown","bfb547d7":"markdown","0fd12f4c":"markdown","979802f7":"markdown","bf5bf193":"markdown","a7828c77":"markdown","a4ac982e":"markdown","e515ed30":"markdown","2127d0ce":"markdown"},"source":{"370a8bdb":"# Importando as bibliotecas necess\u00e1rias para a cria\u00e7\u00e3o e organiza\u00e7\u00e3o do df\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","b440c1c7":"train = pd.read_csv(\"..\/input\/ta192\/train.csv\")\ntrain = train.set_index(\"ID\") # ID n\u00e3o ser\u00e1 considerado na an\u00e1lise, usado somente para identifica\u00e7\u00e3o\ntrain.head()","c91e8ed3":"def variaveis(df, coluna):\n    '''\n    Fun\u00e7\u00e3o que cria dicion\u00e1rios com as vari\u00e1veis existentes em cada coluna,\n    facilitando a an\u00e1lise de quais vari\u00e1veis devem ser alteradas\n    '''\n    dicionario = {}\n    for i in df[coluna]:\n        if i in dicionario:\n            dicionario[i] += 1\n        else:\n            dicionario[i] = 1\n    return dicionario","4e4b1b2a":"sex_variaveis = variaveis(train, 'SEX')\nprint(sex_variaveis)","1af39565":"# transformando todas os sin\u00f5nimos em um s\u00f3\ntrain['SEX'] = train['SEX'].str.replace('male','m')\ntrain['SEX'] = train['SEX'].str.replace('female','f')\ntrain['SEX'] = train['SEX'].str.replace('fem','f')\ntrain['SEX'] = train['SEX'].fillna(0.5) #substituindo NaN por um valor intermedi\u00e1rio entre 0 e 1\nsex_variaveis = variaveis(train, 'SEX')\nprint(sex_variaveis)","a98d099a":"train = train.replace(['m', 'f'], [0 ,1]) #masc = 0 e fem = 1, dados num\u00e9ricos s\u00e3o necess\u00e1rios para o algoritmo\nsex_variaveis = variaveis(train, 'SEX') \nprint(sex_variaveis)","fc101247":"education_variaveis = variaveis(train, 'EDUCATION')\nprint(education_variaveis)","455cd171":"train[\"EDUCATION\"].fillna('others', inplace = True)\ntrain = train.replace(['high school', 'university', 'graduate school', 'others'], [0, 1, 2, 3])\neducation_variaveis = variaveis(train, 'EDUCATION')\nprint(education_variaveis)","72b2ea9d":"marriage_variaveis = variaveis(train, 'MARRIAGE')\nprint(marriage_variaveis)","1819181c":"train['MARRIAGE'] = train['MARRIAGE'].str.replace('MARRIED', 'married')\ntrain['MARRIAGE'] = train['MARRIAGE'].str.replace('SINGLE', 'single')\ntrain[\"MARRIAGE\"] = train['MARRIAGE'].str.replace('OTHERS', 'others')\ntrain['MARRIAGE'].fillna('others', inplace = True)\ntrain = train.replace(['married', 'single', 'others'], [0, 1, 2])\nmarriage_variaveis = variaveis(train, 'MARRIAGE')\nprint(marriage_variaveis)","f57b9098":"train[\"AGE\"].describe()","6ddc9ae4":"train['AGE'].loc[train[\"AGE\"] > 100]","00f04f7a":"train['AGE'].loc[train[\"AGE\"] < 0]","8ff19a4a":"train[\"AGE\"].fillna(train[\"AGE\"].median(), inplace = True)\ntrain[\"AGE\"].replace(to_replace = -10000000, value = train[\"AGE\"].median(), inplace = True)\ntrain[\"AGE\"].replace(to_replace = 180, value = train[\"AGE\"].median(), inplace = True)","c1685f25":"train[\"AGE\"].describe() #Agora sim uma m\u00e9dia normal","fc174cab":"colunas = list(train.columns.values)\nfor col in colunas[5:23]:\n    train[col].fillna(0, inplace  = True)\n","b8b19b7e":"train[\"LIMIT_BAL\"].fillna(0, inplace = True)","6eb864a0":"train.head(10)","a87458fd":"train.isnull().any() #Verificando se algum NaN foi esquecido em alguma coluna","1059c6a2":"#Importa\u00e7\u00e3o das bibliotecas necess\u00e1rias do sklearn\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingRegressor\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import RandomizedSearchCV","a6798bee":"# Separa\u00e7\u00e3o do dataframe\nX_train = train.drop(\"default.payment.next.month\", axis=1)\ny_train = train[\"default.payment.next.month\"]","b7c3ecdc":"clf = RandomForestClassifier(n_estimators = 100, random_state=0)","4e5c9c75":"\n# Number of trees\nn_estimators = [int(x) for x in np.linspace(start = 400, stop = 2000, num = 10)]\n\nmax_features = ['auto', 'sqrt']\n\n# Maximum number of levels in tree\nmax_depth = [int(x) for x in np.linspace(10, 110, num = 11)]\n\nmax_depth.append(None)\n\n# Minimum number of samples required to split a node\nmin_samples_split = [2, 5, 10]\n\n# Minimum number of samples required at each leaf node\nmin_samples_leaf = [1, 2, 4]\n# Method of selecting samples for training each tree\nbootstrap = [True, False]\n\n\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf,\n               'bootstrap': bootstrap}","e26aaf2a":"grid = RandomizedSearchCV(clf, param_distributions = random_grid, n_iter = 20, cv = 3, verbose=2, random_state=42, n_jobs = -1 )","33ed8a53":"#grid.fit(X_train, y_train) \n#N\u00e3o vou executar esta parte do c\u00f3digo por demorar muito tempo para rodar, mas os par\u00e2metros j\u00e1 est\u00e3o no modelo","8b846756":"#grid.best_params_","db83912d":"#Modelo com os par\u00e2metros encontrados\nclf = RandomForestClassifier(n_estimators= 400,\n min_samples_split= 5,\n min_samples_leaf= 4,\n max_features= 'auto',\n max_depth= 10,\n bootstrap=True)","15bbb49c":"tree = clf.fit(X_train, y_train)","f0d7823e":"test = pd.read_csv(\"..\/input\/ta192\/test.csv\")\ntest = test.set_index(\"ID\")\ntest.head()","89fc7716":"#LIMIT_BAL\ntest[\"LIMIT_BAL\"].fillna(0, inplace = True)\n\n#SEX\ntest['SEX'].fillna(0.5, inplace = True)\ntest = test.replace(['m', 'male', 'female', 'fem', 'f'], [0 ,0, 1, 1, 1])\n\n#EDUCATION\ntest[\"EDUCATION\"].fillna('others', inplace = True)\ntest = test.replace(['high school', 'university', 'graduate school', 'others'], [0, 1, 2, 3])\n\n#MARRIAGE\ntest['MARRIAGE'].fillna('others', inplace = True)\ntest = test.replace(['married', 'single', 'others', 'MARRIED', 'SINGLE', 'OTHERS'], [0, 1, 2, 0, 1, 2])\n\n#Outras colunas:\ncolunas = list(test.columns.values)\nfor col in colunas[4:23]:\n     test[col].fillna(0, inplace  = True)","8052ed6a":"test.head()","d6384066":"train.isnull().any()","1f5ea31d":"y_pred = tree.predict(test)","07cd2681":"df_com_id = pd.read_csv(\"..\/input\/ta192\/test.csv\") #dataframe cujo papel \u00e9 fornecer o \"ID\" para o CSV\n\noutput = pd.DataFrame({'ID': df_com_id[\"ID\"], 'default.payment.next.month': y_pred})\n\noutput.to_csv(\"tentativa4.csv\", index=False)","3bc5b9e2":"Ap\u00f3s a busca, os melhores par\u00e2metros encontrados est\u00e3o acima. Estes par\u00e2metros ent\u00e3o foram utilizados para criar um novo modelo de Random Forest 'tree', treinado com os dados do dataset 'train'","5c3c135f":"### Previs\u00e3o e cria\u00e7\u00e3o do CSV","0190c6a0":"### LIMIT_BAL\n","9d0efeaf":"### MARRIAGE","724d7d1b":"### SEX","33cda39d":"Para otimiza\u00e7\u00e3o do modelo, criou-se um modelo inicial, utilizando dos hiperpar\u00e2metros padr\u00e3o, mas criou-se um dicion\u00e1rio 'random_grid' com diversos valores poss\u00edveis para cada um dos par\u00e2metros. Com este dicion\u00e1rio, utilizou-se do RandomizedSearch com cross validation para o teste de algum dos valores, visto que um Grid Search tradicional demoraria muito para executar todas as possibilidades.\nComo refer\u00eancia, utilizou-se o texto dispon\u00edvel [neste link](https:\/\/towardsdatascience.com\/hyperparameter-tuning-the-random-forest-in-python-using-scikit-learn-28d2aa77dd74)","3d958fa0":"Para todas as colunas de pay e bill, somente substitui-se os NaN por 0, assim como foi feito em \"LIMIT_BAL\" ","6dab78b1":"## Dataset ap\u00f3s a limpeza","5b631c8c":"# Cria\u00e7\u00e3o e Limpeza do Dataframe\n\n","17d17f7c":"## Previs\u00e3o do 'test'\n","94c0e689":"Ap\u00f3s organiza\u00e7\u00e3o e mudan\u00e7a de string para float:\n- sexo masculino = 0\n- sexo feminino = 1\n- NaN: 0,5","6597a3a9":"## Aplica\u00e7\u00e3o do Algoritmo\nPara este dataset, foi escolhida a aplica\u00e7\u00e3o de uma Random Forest para classifica\u00e7\u00e3o","6f7b2bde":"N\u00e3o havia problemas de sin\u00f4nimos para esta coluna, ent\u00e3o somente agrupou-se os NaN junto dos 'others' e transformou-se as strings em n\u00fameros, com a seguinte correspond\u00eancia:\n- high school: 0\n- university: 1\n- graduate school: 2\n- others: 3","4e0f10ba":"## Modifica\u00e7\u00e3o de cada uma das colunas","bfb547d7":"As mesmas modifica\u00e7\u00f5es realizadas no 'train' foram feitas no dataframe 'test' para a aplica\u00e7\u00e3o do algoritmo ser poss\u00edvel. Os valores num\u00e9ricos de correspond\u00eancia com os dados categ\u00f3ricos foram utilizados aqui","0fd12f4c":"### PAY e BILL","979802f7":"### EDUCATION","bf5bf193":"### AGE","a7828c77":"Uma m\u00e9dia de idade negativa \u00e9 um pouco estranha. Investigando os valores menos plaus\u00edveis:\n","a4ac982e":"Foram encontrados 2 valores extremamente improvav\u00e9is que, junto dos NaN, ser\u00e3o substitu\u00eddos pela mediana, j\u00e1 que \u00e9 um valor que \u00e9 menos afetado por estes valores errados","e515ed30":"Para a modfica\u00e7\u00e3o desta coluna, transformou-se os nomes escritos em ma\u00edscula para os equivalentes em letras min\u00fasculas, agrupou-se os NaN na coluna de 'others' e transformou os nomes em vari\u00e1veis num\u00e9ricas, com a seguinte correspond\u00eancia:\n- married: 0\n- single: 1\n- others: 2","2127d0ce":"### Cria\u00e7\u00e3o e manipula\u00e7\u00e3o do Test \n"}}