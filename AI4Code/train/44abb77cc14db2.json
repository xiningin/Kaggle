{"cell_type":{"f2d4c01f":"code","6762f588":"code","1444b167":"code","13c0a147":"code","319f5431":"code","48a08b49":"code","1eb6012c":"code","817f0725":"code","9caa2b37":"code","ef8d7bf6":"code","31c13e36":"code","40f25ef5":"code","869a54c9":"code","e5855210":"code","73229423":"code","2086dff0":"markdown","be0ca44a":"markdown","fac2fc57":"markdown","ce73cc7b":"markdown","3b05d657":"markdown","dc21c2c9":"markdown","a0d4fdb6":"markdown","dcc97abe":"markdown","a7dc911e":"markdown","dc1b0b7a":"markdown"},"source":{"f2d4c01f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom math import floor # round down integer using math library\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6762f588":"assoc_df = pd.read_csv('..\/input\/market-basket-id-ndsc-2020\/association_order.csv')\nrules_df = pd.read_csv('..\/input\/market-basket-id-ndsc-2020\/rules.csv')","1444b167":"assoc_df.head()","13c0a147":"rules_df.head()","319f5431":"assoc_df.info()","48a08b49":"rules_df.info()","1eb6012c":"# get number buying itemid in assoc_df\ndef get_assoc(*args):\n    # let's convert all itemid to integer\n    orderid = [int(id) for id in args]\n    \n    # get orderid that associate with each itemid\n    assoc_conds = [assoc_df.loc[(assoc_df['itemid'] == cond)]['orderid'] for cond in orderid]\n    \n    # change to set, so we can find the intersection\n    assoc_conds = [set(assoc_cond.values.tolist()) for assoc_cond in assoc_conds]\n    \n    # find the intersection value\n    intersection_val = assoc_conds[0].intersection(*assoc_conds[1:])\n    \n    # return total value that has same orderid\n    return len(intersection_val)\n","817f0725":"def split_rule(x):\n    return x.split(\">\")\n\ndef calculate_rule(rules):\n    \"\"\"\n    args:\n        rules: value that we want to calculate\n    condA : denumerator\n    condB : numerator\n    \"\"\"\n    # split itemid\n    condA, condB = split_rule(rules)\n    \n    # in rule, for numerator is order that containing in numerator and denumerator\n    condB += \"&\" + condA\n    \n    # spli val if have more than one itemid\n    condA = condA.split(\"&\")\n    condB = condB.split(\"&\")\n    \n    # get no order from each product\n    totalA = get_assoc(*condA)\n    totalB = get_assoc(*condB)\n    \n    #  return final value\n    return totalB \/ totalA","9caa2b37":"rules = \"7917849>18642183\"\ncalculate_rule(rules)","ef8d7bf6":"rules = \"2363580843&2002243261>1993068031\"\ncalculate_rule(rules)","31c13e36":"rules = \"1089203645>431391770&1216842899\"\ncalculate_rule(rules)","40f25ef5":"confidences = []\nfor rule in rules_df['rule'].values:\n    confidence = calculate_rule(rule)\n    confidences.append(confidence)","869a54c9":"rules_df['confidence'] = [floor(confidence * 1000) for confidence in confidences]","e5855210":"submission = rules_df[['rule', 'confidence']]\nsubmission","73229423":"submission.to_csv(\"submission.csv\", index= False)","2086dff0":"### Example 2\n\n![image.png](attachment:image.png)","be0ca44a":"## Exploratory Data Analysis","fac2fc57":"## Calculate confidence\n\nlet's calculate our confidence rule\n","ce73cc7b":"## Import dataset","3b05d657":"Submission Format\n\nPlease calculate the confidence values for all the association rules provided in the rules.csv file.\n\nTwo columns required:\n\n    rule (provided in rules.csv file)\n\n    confidence: Please times the confidence by 1000 and round down to integer. e.g.\n\n    (1) If a case has confidence = 5\/16 = 0.3125, then 0.3125*1000 = 312.5 and round down to integer 312, please submit 312\n\n    (2) When you find confidence = 1, please submit 1000\n\n    (3) If a case has confidence = 1\/16 = 0.0625, then 0.0625*1000 = 62.5 and round down to integer 62, please submit 62. (No need to add 0 prior to 6 to make it 062)\n\n","dc21c2c9":"### Example 1\n![image.png](attachment:image.png)","a0d4fdb6":"### Example 3\n![image.png](attachment:image.png)","dcc97abe":"## Let's try with the example","a7dc911e":"## Calculate Confidence\nso we got rule like this:\n\n![image.png](attachment:image.png)","dc1b0b7a":"## Define our function"}}