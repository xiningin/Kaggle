{"cell_type":{"12390cb4":"code","97bf43c6":"code","01077983":"code","6b820123":"code","0b0b0f80":"code","957acbd4":"code","bbbbd1c8":"code","a76a4c5a":"code","adb7d1cb":"code","a2a18493":"code","8a1c8fa0":"code","7d66ccf2":"code","e012244c":"code","73edc3ef":"code","d5359af4":"code","49c4bd67":"code","0d277725":"code","0a32ea61":"code","4a143871":"code","8c5d1767":"code","45aebe95":"code","f0d4dfb0":"code","f7e95935":"code","6b405183":"markdown","bb5d01fc":"markdown","bd37dd69":"markdown","fecfbf2b":"markdown","3b06ea80":"markdown","0b886ba4":"markdown","84cb815d":"markdown","f875693a":"markdown","03dfda81":"markdown","b4afc98b":"markdown","598e2a79":"markdown","c0b91078":"markdown","834fc7e7":"markdown","423531c5":"markdown"},"source":{"12390cb4":"from sklearn.datasets import load_digits\ndigits = load_digits()","97bf43c6":"print(digits)","01077983":"print(digits.DESCR)","6b820123":"X = digits.data\/16.\nY = digits.target\nprint(X)\nprint(X.shape)\nprint(Y)\nprint(Y.shape)\n\nprint(X.min(), X.max())","0b0b0f80":"from sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.1, random_state=4)\n","957acbd4":"print(X_train.shape)\nprint(Y_train.shape)\n\nprint(X_test.shape)\nprint(Y_test.shape)\n#input the Y_train.shape, X_test.shape, Y_test.shape here\n\n","bbbbd1c8":"%matplotlib inline\n\nfrom skimage.io import imread\nfrom skimage.transform import resize\nimport matplotlib.pyplot as plt\n\ndef loadImg(fpath, size=[8, 8]):\n    img = imread(fpath, as_gray=True)\n    img = resize(img, size)\n    return img\n\ndef showImg(img):\n    plt.imshow(img, cmap='gray')\n    plt.show()","a76a4c5a":"# get the 0th training data\nimgtrain = X[2]\n# reshape the 64 dimenstion into 8*8\nimg = imgtrain.reshape(8,8)\n# show it\nshowImg(img)\n#shows the label of the 0th training data\nprint(Y[3])\n","adb7d1cb":"for i in range(10):\n    # get the 0th training data\n    imgtrain = X[i]\n    # reshape the 64 dimenstion into 8*8\n    img = imgtrain.reshape(8,8)\n    # show it\n    showImg(img)\n    #shows the label of the 0th training data\n    print(Y[i])","a2a18493":"#input your codes here\n#1 import nearest neighbor\nfrom sklearn.neighbors import KNeighborsClassifier\n#2 declare a NN model\nmodel = KNeighborsClassifier(n_neighbors = 3)\n#3 model.fit\nmodel.fit(X_train, Y_train)\n\n#4. model.predict\nY_prediction = model.predict(X_test)\n#5 compute accuracy\nfrom sklearn.metrics import accuracy_score\nacc = accuracy_score(Y_test, Y_prediction)\nprint(acc)","8a1c8fa0":"imgdemo = loadImg('..\/input\/digittest\/digit\/0.jpg') # input the image file path here.\nprint(imgdemo.shape)\nprint(imgdemo)\nprint(imgdemo.max())\nshowImg(imgdemo)","7d66ccf2":"print(imgdemo.shape)\nimgf = imgdemo.flatten()\nprint(imgf.shape)","e012244c":"result = model.predict([imgf])\nprint(result)","73edc3ef":"imgdemo = loadImg('..\/input\/digittest\/digit\/9.jpg') # input the image file path here.\nshowImg(imgdemo)\nimgf = imgdemo.flatten()\nresult = model.predict([imgf])\nprint(result)","d5359af4":"from sklearn.datasets import fetch_openml\nX, Y = fetch_openml('mnist_784', return_X_y=True)","49c4bd67":"print(X.shape)\nprint(Y.shape)\nimport numpy as np\nnp.save('mnistX', X)\nnp.save('mnistY', Y)","0d277725":"import numpy as np\nX = np.load('mnistX.npy')\nY = np.load('mnistY.npy', allow_pickle=True)\nprint(X.shape)\nprint(Y.shape)\n","0a32ea61":"imgtrain = X[0]\nimg = imgtrain.reshape((28, 28))\nshowImg(img)\nprint(Y[0])","4a143871":"from sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.1, random_state=4)\n\nprint(X_train.shape)\nprint(X_test.shape)\n","8c5d1767":"#input your codes here\n#1 import nearest neighbor\nfrom sklearn.neighbors import KNeighborsClassifier\n#2 declare a NN model\nmodel = KNeighborsClassifier(n_neighbors = 1)\n#3 model.fit\nmodel.fit(X_train, Y_train)\n\n#4. model.predict\nY_prediction = model.predict(X_test)\n#5 compute accuracy\nfrom sklearn.metrics import accuracy_score\nacc = accuracy_score(Y_test, Y_prediction)\nprint(acc)","45aebe95":"from sklearn.neighbors import KNeighborsClassifier\n#2 declare a NN model\nmodel = KNeighborsClassifier(n_neighbors = 1)\n#3 model.fit\nmodel.fit(X_train, Y_train)","f0d4dfb0":"print(X_train.max())","f7e95935":"imgdemo = loadImg('..\/input\/digittest\/digit\/9.jpg', [28, 28]) # input the image file path here.\nshowImg(imgdemo)\nimgf = imgdemo.flatten()*255.0\nprint(imgf.max())\nresult = model.predict([imgf])\nprint(result)","6b405183":"the following define two utility function which load a image and show a image seperately.","bb5d01fc":"First make at least ten images of digit. Using the classifier you have trained to classify each image you have created. The background of the image is black, and the stroke of the digit is white. load an image first and show the image.","bd37dd69":"## 4.Load personal data and classify it.\n\nThe following show how to load a image and classify it.","fecfbf2b":"You can try X_train.shape, Y_train.shape, X_test.shape, Y_test.shape","3b06ea80":"# Recognizing hand-written digits","0b886ba4":"To make prediction, you have to transform the 8x8 matrix into the 64 dimension. you can use flatten function.","84cb815d":"Is the result right? predict all the images you have created, and compute the accuracy of the classification.","f875693a":"lets print a image. The data dimension is 64, which is the flatten of the 8x8 matrix. If we want to show the image, we first reshape the data into 8x8 dimension, and show it. The following shows the 0th image of the X_train","03dfda81":"## 1.build MNIST dataset\n\nmore descriptions are from here. http:\/\/yann.lecun.com\/exdb\/mnist\/\n\nhttps:\/\/www.openml.org\/d\/554","b4afc98b":"## 3.try different classifers(using cross validation and grid search) to get the highest prediction accuracy.","598e2a79":"try to show more images.","c0b91078":"## 2. train a Nearest Neighbor classifier using X_train and Y_train, and use the classifier to predict the X_test, and evaluate the accuracy.\n","834fc7e7":"##  1. build NIST dataset\nThe following codes get the NIST dataset(a digital image dataset), and split the dataset into training and testing data. Denoted as the X_train, Y_train, X_test, Y_test.\n\n","423531c5":"# digit recognition using MNIST dataset"}}