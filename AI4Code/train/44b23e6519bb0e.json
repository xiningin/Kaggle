{"cell_type":{"8de37c84":"code","58674a9d":"code","728b2a08":"code","fae736d1":"code","6eb0e6ae":"code","c86f7a08":"code","02b9352f":"code","432f2447":"code","5360b5ba":"code","34e8ee1a":"code","1ff4530b":"code","30d4da62":"code","0d735f9d":"code","0c648eb1":"code","8e405ff7":"code","adaff184":"code","115f389b":"code","58ac3a91":"code","6a4ad549":"code","f5ba5c19":"code","308f7df4":"code","f99631bf":"code","77b82ae6":"code","57d2fec9":"code","7a721ade":"code","345955b8":"code","dd642c91":"code","93041586":"code","dae62e43":"code","09fa3cde":"code","48182061":"code","74eed4e7":"code","cc050018":"code","9a5474a5":"code","7bdd9858":"code","498b4ddc":"code","f457878c":"markdown","bed59d52":"markdown","4bf21c15":"markdown","0a6527cc":"markdown","2480c379":"markdown","e0eedb28":"markdown","b2e29f8f":"markdown","fad7305b":"markdown","ba977175":"markdown","d5895185":"markdown","87fe903c":"markdown","4d4b665f":"markdown","07355bd7":"markdown","bc640395":"markdown","e687cb7b":"markdown","0f574067":"markdown","f171aa0d":"markdown","56fae369":"markdown","c1f0861d":"markdown","ce2d5000":"markdown","cb5016ed":"markdown","cee1dff8":"markdown","7d46e6fd":"markdown","a92048d2":"markdown","2ffbd827":"markdown","6f24cb53":"markdown","16f9e4a2":"markdown","49766be1":"markdown","37ba1f7d":"markdown","868aba3b":"markdown","2c3ea907":"markdown","a84f18f4":"markdown","1bf7439b":"markdown","1ff6749a":"markdown","5ad7dd00":"markdown"},"source":{"8de37c84":"import pandas as pd\nimport numpy as np\n\n# This is to modify pandas to show more columns.\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 1000)\n\n\ndata=pd.read_csv('..\/input\/ChurnData.csv')\n","58674a9d":"data.head(5)","728b2a08":"data.info()","fae736d1":"data.shape[0]","6eb0e6ae":"data.shape[1]","c86f7a08":"data.shape","02b9352f":"data.dtypes","432f2447":"data.isnull().sum()","5360b5ba":"data=data.dropna(thresh=100)","34e8ee1a":"data.shape","1ff4530b":"\n\nremove = ['date_of_last_rech_data_6',\n          'last_date_of_month_7',\n          'last_date_of_month_8',\n          'last_date_of_month_9',\n          'last_date_of_month_6',\n          'date_of_last_rech_6',\n          'date_of_last_rech_7',\n          'date_of_last_rech_8',\n          'date_of_last_rech_9',\n          'date_of_last_rech_data_7', \n          'date_of_last_rech_data_8', \n          'date_of_last_rech_data_9', \n          'total_rech_data_6', \n          'total_rech_data_7', \n          'total_rech_data_8', \n          'total_rech_data_9', \n          'max_rech_data_6',\n          'max_rech_data_7',\n          'max_rech_data_8',\n          'max_rech_data_9',\n          'count_rech_2g_6',\n          'count_rech_2g_7',\n          'count_rech_2g_8',\n          'count_rech_2g_9',\n          'count_rech_3g_6',\n          'count_rech_3g_7',\n          'count_rech_3g_8',\n          'count_rech_3g_9',\n          'av_rech_amt_data_6',\n          'av_rech_amt_data_7',\n          'av_rech_amt_data_8',\n          'av_rech_amt_data_9',\n          'arpu_3g_6',\n          'arpu_3g_7',\n          'arpu_3g_8',\n          'arpu_3g_9',\n          'arpu_2g_6',\n          'arpu_2g_7',\n          'arpu_2g_8',\n          'arpu_2g_9',\n          'night_pck_user_6',\n          'night_pck_user_7',\n          'night_pck_user_8',\n          'night_pck_user_9',\n          'fb_user_6',\n          'fb_user_7',\n          'fb_user_8',\n          'fb_user_9']\n# Total 40\n          \n\ndata = data.drop(remove, axis=1)","30d4da62":"data.shape","0d735f9d":"data.isnull().sum()","0c648eb1":"''' { dtype - float64} '''\n\n\ndata['onnet_mou_6'].fillna(data['onnet_mou_6'].mean(), inplace=True)\ndata['onnet_mou_7'].fillna(data['onnet_mou_7'].mean(), inplace=True)\ndata['onnet_mou_8'].fillna(data['onnet_mou_8'].mean(), inplace=True)\ndata['onnet_mou_9'].fillna(data['onnet_mou_9'].mean(), inplace=True)\n","8e405ff7":"''' { dtype - float64} '''\n\ndata['offnet_mou_6'].fillna(data['offnet_mou_6'].mean(), inplace=True)\ndata['offnet_mou_7'].fillna(data['offnet_mou_7'].mean(), inplace=True)\ndata['offnet_mou_8'].fillna(data['offnet_mou_8'].mean(), inplace=True)\ndata['offnet_mou_9'].fillna(data['offnet_mou_9'].mean(), inplace=True)","adaff184":"# roam_ic_mou\n\n\n''' { dtype - float64} '''\n\ndata['roam_ic_mou_6'].fillna(data['roam_ic_mou_6'].mean(), inplace=True)\ndata['roam_ic_mou_7'].fillna(data['roam_ic_mou_7'].mean(), inplace=True)\ndata['roam_ic_mou_8'].fillna(data['roam_ic_mou_8'].mean(), inplace=True)\ndata['roam_ic_mou_9'].fillna(data['roam_ic_mou_9'].mean(), inplace=True)\n''' { dtype - float64} '''\n\ndata['roam_ic_mou_6'].fillna(data['roam_ic_mou_6'].mean(), inplace=True)\ndata['roam_ic_mou_7'].fillna(data['roam_ic_mou_7'].mean(), inplace=True)\ndata['roam_ic_mou_8'].fillna(data['roam_ic_mou_8'].mean(), inplace=True)\ndata['roam_ic_mou_9'].fillna(data['roam_ic_mou_9'].mean(), inplace=True)\n\n#roam_og_mou\n\n\n''' { dtype - float64} '''\n\ndata['roam_og_mou_6'].fillna(data['roam_og_mou_6'].mean(), inplace=True)\ndata['roam_og_mou_7'].fillna(data['roam_og_mou_7'].mean(), inplace=True)\ndata['roam_og_mou_8'].fillna(data['roam_og_mou_8'].mean(), inplace=True)\ndata['roam_og_mou_9'].fillna(data['roam_og_mou_9'].mean(), inplace=True)\n\n\n#loc_og_t2t_mou\n\n\n''' { dtype - float64} '''\n\ndata['loc_og_t2t_mou_6'].fillna(data['loc_og_t2t_mou_6'].mean(), inplace=True)\ndata['loc_og_t2t_mou_7'].fillna(data['loc_og_t2t_mou_7'].mean(), inplace=True)\ndata['loc_og_t2t_mou_8'].fillna(data['loc_og_t2t_mou_8'].mean(), inplace=True)\ndata['loc_og_t2t_mou_9'].fillna(data['loc_og_t2t_mou_9'].mean(), inplace=True)\n\n\n# loc_og_t2m_mou\n\n\n''' { dtype - float64} '''\n\ndata['loc_og_t2m_mou_6'].fillna(data['loc_og_t2m_mou_6'].mean(), inplace=True)\ndata['loc_og_t2m_mou_7'].fillna(data['loc_og_t2m_mou_7'].mean(), inplace=True)\ndata['loc_og_t2m_mou_8'].fillna(data['loc_og_t2m_mou_8'].mean(), inplace=True)\ndata['loc_og_t2m_mou_9'].fillna(data['loc_og_t2m_mou_9'].mean(), inplace=True)\n# loc_og_t2f_mou\n\n\n''' { dtype - float64} '''\n\ndata['loc_og_t2f_mou_6'].fillna(data['loc_og_t2f_mou_6'].mean(), inplace=True)\ndata['loc_og_t2f_mou_7'].fillna(data['loc_og_t2f_mou_7'].mean(), inplace=True)\ndata['loc_og_t2f_mou_8'].fillna(data['loc_og_t2f_mou_8'].mean(), inplace=True)\ndata['loc_og_t2f_mou_9'].fillna(data['loc_og_t2f_mou_9'].mean(), inplace=True)\n\n#loc_og_t2c_mou\n\n\n''' { dtype - float64} '''\n\ndata['loc_og_t2c_mou_6'].fillna(data['loc_og_t2c_mou_6'].mean(), inplace=True)\ndata['loc_og_t2c_mou_7'].fillna(data['loc_og_t2c_mou_7'].mean(), inplace=True)\ndata['loc_og_t2c_mou_8'].fillna(data['loc_og_t2c_mou_8'].mean(), inplace=True)\ndata['loc_og_t2c_mou_9'].fillna(data['loc_og_t2c_mou_9'].mean(), inplace=True)\n\n#loc_og_mou\n\n\n''' { dtype - float64} '''\n\ndata['loc_og_mou_6'].fillna(data['loc_og_mou_6'].mean(), inplace=True)\ndata['loc_og_mou_7'].fillna(data['loc_og_mou_7'].mean(), inplace=True)\ndata['loc_og_mou_8'].fillna(data['loc_og_mou_8'].mean(), inplace=True)\ndata['loc_og_mou_9'].fillna(data['loc_og_mou_9'].mean(), inplace=True)\n\n#std_og_t2t_mou\n\n\n''' { dtype - float64} '''\n\ndata['std_og_t2t_mou_6'].fillna(data['std_og_t2t_mou_6'].mean(), inplace=True)\ndata['std_og_t2t_mou_7'].fillna(data['std_og_t2t_mou_7'].mean(), inplace=True)\ndata['std_og_t2t_mou_8'].fillna(data['std_og_t2t_mou_8'].mean(), inplace=True)\ndata['std_og_t2t_mou_9'].fillna(data['std_og_t2t_mou_9'].mean(), inplace=True)\n\n#std_og_t2m_mou\n\n\n''' { dtype - float64} '''\n\ndata['std_og_t2m_mou_6'].fillna(data['std_og_t2m_mou_6'].mean(), inplace=True)\ndata['std_og_t2m_mou_7'].fillna(data['std_og_t2m_mou_7'].mean(), inplace=True)\ndata['std_og_t2m_mou_8'].fillna(data['std_og_t2m_mou_8'].mean(), inplace=True)\ndata['std_og_t2m_mou_9'].fillna(data['std_og_t2m_mou_9'].mean(), inplace=True)\n\n# std_og_t2f_mou\n\n\n''' { dtype - float64} '''\n\ndata['std_og_t2f_mou_6'].fillna(data['std_og_t2f_mou_6'].mean(), inplace=True)\ndata['std_og_t2f_mou_7'].fillna(data['std_og_t2f_mou_7'].mean(), inplace=True)\ndata['std_og_t2f_mou_8'].fillna(data['std_og_t2f_mou_8'].mean(), inplace=True)\ndata['std_og_t2f_mou_9'].fillna(data['std_og_t2f_mou_9'].mean(), inplace=True)\n# std_og_t2c_mou\n\n\n''' { dtype - float64} '''\n\ndata['std_og_t2c_mou_6'].fillna(data['std_og_t2c_mou_6'].mean(), inplace=True)\ndata['std_og_t2c_mou_7'].fillna(data['std_og_t2c_mou_7'].mean(), inplace=True)\ndata['std_og_t2c_mou_8'].fillna(data['std_og_t2c_mou_8'].mean(), inplace=True)\ndata['std_og_t2c_mou_9'].fillna(data['std_og_t2c_mou_9'].mean(), inplace=True)\n# std_og_mou\n\n\n''' { dtype - float64} '''\n\ndata['std_og_mou_6'].fillna(data['std_og_mou_6'].mean(), inplace=True)\ndata['std_og_mou_7'].fillna(data['std_og_mou_7'].mean(), inplace=True)\ndata['std_og_mou_8'].fillna(data['std_og_mou_8'].mean(), inplace=True)\ndata['std_og_mou_9'].fillna(data['std_og_mou_9'].mean(), inplace=True)\n\n# isd_og_mou\n\n\n''' { dtype - float64} '''\n\ndata['isd_og_mou_6'].fillna(data['isd_og_mou_6'].mean(), inplace=True)\ndata['isd_og_mou_7'].fillna(data['isd_og_mou_7'].mean(), inplace=True)\ndata['isd_og_mou_8'].fillna(data['isd_og_mou_8'].mean(), inplace=True)\ndata['isd_og_mou_9'].fillna(data['isd_og_mou_9'].mean(), inplace=True)\n# spl_og_mou\n\n\n''' { dtype - float64} '''\n\ndata['spl_og_mou_6'].fillna(data['spl_og_mou_6'].mean(), inplace=True)\ndata['spl_og_mou_7'].fillna(data['spl_og_mou_7'].mean(), inplace=True)\ndata['spl_og_mou_8'].fillna(data['spl_og_mou_8'].mean(), inplace=True)\ndata['spl_og_mou_9'].fillna(data['spl_og_mou_9'].mean(), inplace=True)\n# og_others\n\n\n''' { dtype - float64} '''\n\ndata['og_others_6'].fillna(data['og_others_6'].mean(), inplace=True)\ndata['og_others_7'].fillna(data['og_others_7'].mean(), inplace=True)\ndata['og_others_8'].fillna(data['og_others_8'].mean(), inplace=True)\ndata['og_others_9'].fillna(data['og_others_9'].mean(), inplace=True)\n# loc_ic_t2t_mou\n\n\n''' { dtype - float64} '''\n\ndata['loc_ic_t2t_mou_6'].fillna(data['loc_ic_t2t_mou_6'].mean(), inplace=True)\ndata['loc_ic_t2t_mou_7'].fillna(data['loc_ic_t2t_mou_7'].mean(), inplace=True)\ndata['loc_ic_t2t_mou_8'].fillna(data['loc_ic_t2t_mou_8'].mean(), inplace=True)\ndata['loc_ic_t2t_mou_9'].fillna(data['loc_ic_t2t_mou_9'].mean(), inplace=True)\n\n# loc_ic_t2m_mou\n\n[ ]\n''' { dtype - float64} '''\n\ndata['loc_ic_t2m_mou_6'].fillna(data['loc_ic_t2m_mou_6'].mean(), inplace=True)\ndata['loc_ic_t2m_mou_7'].fillna(data['loc_ic_t2m_mou_7'].mean(), inplace=True)\ndata['loc_ic_t2m_mou_8'].fillna(data['loc_ic_t2m_mou_8'].mean(), inplace=True)\ndata['loc_ic_t2m_mou_9'].fillna(data['loc_ic_t2m_mou_9'].mean(), inplace=True)\n\n# loc_ic_t2f_mou\n\n\n''' { dtype - float64} '''\n\ndata['loc_ic_t2f_mou_6'].fillna(data['loc_ic_t2f_mou_6'].mean(), inplace=True)\ndata['loc_ic_t2f_mou_7'].fillna(data['loc_ic_t2f_mou_7'].mean(), inplace=True)\ndata['loc_ic_t2f_mou_8'].fillna(data['loc_ic_t2f_mou_8'].mean(), inplace=True)\ndata['loc_ic_t2f_mou_9'].fillna(data['loc_ic_t2f_mou_9'].mean(), inplace=True)\n\n# loc_ic_mou\n\n\n''' { dtype - float64} '''\n\ndata['loc_ic_mou_6'].fillna(data['loc_ic_mou_6'].mean(), inplace=True)\ndata['loc_ic_mou_7'].fillna(data['loc_ic_mou_7'].mean(), inplace=True)\ndata['loc_ic_mou_8'].fillna(data['loc_ic_mou_8'].mean(), inplace=True)\ndata['loc_ic_mou_9'].fillna(data['loc_ic_mou_9'].mean(), inplace=True)\n# std_ic_t2t_mou\n\n\n''' { dtype - float64} '''\n\ndata['std_ic_t2t_mou_6'].fillna(data['std_ic_t2t_mou_6'].mean(), inplace=True)\ndata['std_ic_t2t_mou_7'].fillna(data['std_ic_t2t_mou_7'].mean(), inplace=True)\ndata['std_ic_t2t_mou_8'].fillna(data['std_ic_t2t_mou_8'].mean(), inplace=True)\ndata['std_ic_t2t_mou_9'].fillna(data['std_ic_t2t_mou_9'].mean(), inplace=True)\n# std_ic_t2m_mou\n\n\n''' { dtype - float64} '''\n\ndata['std_ic_t2m_mou_6'].fillna(data['std_ic_t2m_mou_6'].mean(), inplace=True)\ndata['std_ic_t2m_mou_7'].fillna(data['std_ic_t2m_mou_7'].mean(), inplace=True)\ndata['std_ic_t2m_mou_8'].fillna(data['std_ic_t2m_mou_8'].mean(), inplace=True)\ndata['std_ic_t2m_mou_9'].fillna(data['std_ic_t2m_mou_9'].mean(), inplace=True)\n# std_ic_t2f_mou\n\n\n''' { dtype - float64} '''\n\ndata['std_ic_t2f_mou_6'].fillna(data['std_ic_t2f_mou_6'].mean(), inplace=True)\ndata['std_ic_t2f_mou_7'].fillna(data['std_ic_t2f_mou_7'].mean(), inplace=True)\ndata['std_ic_t2f_mou_8'].fillna(data['std_ic_t2f_mou_8'].mean(), inplace=True)\ndata['std_ic_t2f_mou_9'].fillna(data['std_ic_t2f_mou_9'].mean(), inplace=True)\n# std_ic_t2o_mou\n\n\n''' { dtype - float64} '''\n\ndata['std_ic_t2o_mou_6'].fillna(data['std_ic_t2o_mou_6'].mean(), inplace=True)\ndata['std_ic_t2o_mou_7'].fillna(data['std_ic_t2o_mou_7'].mean(), inplace=True)\ndata['std_ic_t2o_mou_8'].fillna(data['std_ic_t2o_mou_8'].mean(), inplace=True)\ndata['std_ic_t2o_mou_9'].fillna(data['std_ic_t2o_mou_9'].mean(), inplace=True)\n\n# std_ic_mou\n\n\n''' { dtype - float64} '''\n\ndata['std_ic_mou_6'].fillna(data['std_ic_mou_6'].mean(), inplace=True)\ndata['std_ic_mou_7'].fillna(data['std_ic_mou_7'].mean(), inplace=True)\ndata['std_ic_mou_8'].fillna(data['std_ic_mou_8'].mean(), inplace=True)\ndata['std_ic_mou_9'].fillna(data['std_ic_mou_9'].mean(), inplace=True)\n\n# spl_ic_mou\n\n\n''' { dtype - float64} '''\n\ndata['spl_ic_mou_6'].fillna(data['spl_ic_mou_6'].mean(), inplace=True)\ndata['spl_ic_mou_7'].fillna(data['spl_ic_mou_7'].mean(), inplace=True)\ndata['spl_ic_mou_8'].fillna(data['spl_ic_mou_8'].mean(), inplace=True)\ndata['spl_ic_mou_9'].fillna(data['spl_ic_mou_9'].mean(), inplace=True)\n# isd_ic_mou\n\n\n''' { dtype - float64} '''\n\ndata['isd_ic_mou_6'].fillna(data['isd_ic_mou_6'].mean(), inplace=True)\ndata['isd_ic_mou_7'].fillna(data['isd_ic_mou_7'].mean(), inplace=True)\ndata['isd_ic_mou_8'].fillna(data['isd_ic_mou_8'].mean(), inplace=True)\ndata['isd_ic_mou_9'].fillna(data['isd_ic_mou_9'].mean(), inplace=True)\n# ic_others\n\n\n''' { dtype - float64} '''\n\ndata['ic_others_6'].fillna(data['ic_others_6'].mean(), inplace=True)\ndata['ic_others_7'].fillna(data['ic_others_7'].mean(), inplace=True)\ndata['ic_others_8'].fillna(data['ic_others_8'].mean(), inplace=True)\ndata['ic_others_9'].fillna(data['ic_others_9'].mean(), inplace=True)\n\ndata['loc_og_t2o_mou'].fillna(data['loc_og_t2o_mou'].mean(), inplace=True)\ndata['std_og_t2o_mou'].fillna(data['std_og_t2o_mou'].mean(), inplace=True)\ndata['loc_ic_t2o_mou'].fillna(data['loc_ic_t2o_mou'].mean(), inplace=True)\n\n","115f389b":"data.isnull().sum()","58ac3a91":"data['Churn1'] = (data['Churn1'] == True ).astype(int)\ndata['Churn1'] = (data['Churn1'] == False ).astype(int)\ndata['Churn2'] = (data['Churn2'] == True ).astype(int)\ndata['Churn2'] = (data['Churn2'] == False ).astype(int)\ndata['Final churn'] = (data['Final churn'] == True ).astype(int)\ndata['Final churn'] = (data['Final churn'] == False ).astype(int)","6a4ad549":"data.head(5)","f5ba5c19":"data.describe()","308f7df4":"perc=[.20,.40,.70,.80]\ndata[['total_rech_amt_6','total_rech_amt_7']].describe(percentiles=perc)","f99631bf":"data=data[data['total_rech_amt_6']>400 &(data['total_rech_amt_7']>400)]","77b82ae6":"\nimport seaborn as sns\nimport matplotlib.pyplot as plot\n\n\n\ncol_names = ['aon', 'aug_vbc_3g', 'jul_vbc_3g','jun_vbc_3g',]\nfig, ax = plot.subplots(len(col_names), figsize=(10,10))\n\nfor i, col_val in enumerate(col_names):\n\n    sns.boxplot(x=data[col_val], ax=ax[i])","57d2fec9":"from scipy import stats\nimport numpy as np\nz=np.abs(stats.zscore(data))\nprint(z)\n","7a721ade":"threshold=3  # threshold limit genearlly taken as 3 or -3\nprint(np.where(z>3))\nprint(z[0][178])","345955b8":"import seaborn as sns\ncorre=data.corr()\nsns.heatmap(corre,annot=True,cmap='viridis',linewidth=7)","dd642c91":"#standardalization\n\ny=data['Final churn']\nX=data.drop(columns=['Final churn'],axis=1)\nfrom sklearn.preprocessing import MinMaxScaler\nfeature=X.columns.values\nscaler=MinMaxScaler(feature_range=(0,1))\nscaler.fit(X)\nX=pd.DataFrame(scaler.transform(X))\nX.columns=feature\nX.head()","93041586":"from sklearn.decomposition import PCA\npca =PCA(n_components=2)\n\npc=pca.fit_transform(X)\nprincipaldf= pd.DataFrame(data=pc ,columns=['Principal Component 1','Principal Component 2'])\nprincipaldf.head()\nfinaldf = pd.concat([principaldf, y], axis = 1)\nfinaldf.head()","dae62e43":"from sklearn.model_selection import train_test_split\nprincipaldf_train,principaldf_test,y_train,y_test= train_test_split(principaldf,y,test_size=0.33 ,random_state=42)\n\nprint(principaldf_train.shape)\nprint(principaldf_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)\n","09fa3cde":"print(sum(y_train==0))\nprint(sum(y_train==1))","48182061":"from imblearn.under_sampling  import NearMiss\nnr=NearMiss()\nprincipaldf_train,y_train=nr.fit_sample(principaldf_train, y_train)\n\n","74eed4e7":"print(sum(y_train==0))\nprint(sum(y_train==1))","cc050018":"from sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import roc_auc_score\n\n\nmodel=LogisticRegression()\noutput=model.fit(principaldf_train ,y_train)\n\nPredict=model.predict(principaldf_test)\nprint(\"Logistc Regression Accuracy\")\nprint(metrics.accuracy_score(y_test,Predict)*100)\nprint(\"Area under curve\", )\nprint(roc_auc_score(y_test,Predict))\n\nfrom sklearn.metrics import confusion_matrix\n\nprint(\"Classification report\")\nprint(classification_report(y_test,Predict))\nprint(output)\nprint(\"Confusion matrix\")\nprint(confusion_matrix(y_test,Predict))","9a5474a5":"\n\nfrom sklearn.tree import DecisionTreeClassifier\nmodel=DecisionTreeClassifier()\noutput=model.fit(principaldf_train,y_train)\nprediction=model.predict(principaldf_test)\nprint(\"model accuracy\")\nprint(metrics.accuracy_score(y_test,prediction)*100)\nprint(\"Area under curve\", )\nprint(roc_auc_score(y_test,prediction))\nprint(\"Classification report\")\nprint(classification_report(y_test,prediction))","7bdd9858":"from sklearn.ensemble import RandomForestClassifier\n\nprincipaldf_train,principaldf_test,y_train,y_test= train_test_split(principaldf,y,test_size=0.33 ,random_state=42)\n\nrf =RandomForestClassifier(n_estimators=70,max_depth=2,random_state=10,criterion='gini')\noutput1=rf.fit(principaldf_train,y_train)\nPredict_out=model.predict(principaldf_test)\nprint(\"Random forest Accuracy\")\nprint(metrics.accuracy_score(y_test,Predict_out)*100)\nprint(\"Area under curve\", )\nprint(roc_auc_score(y_test,Predict_out))\nprint (\"\\n Classification report : \\n\",classification_report(y_test,Predict_out))","498b4ddc":"from sklearn.ensemble import RandomForestClassifier\n\nprincipaldf_train,principaldf_test,y_train,y_test= train_test_split(principaldf,y,test_size=0.33 ,random_state=42)\n\nfor i in range(50,60):\n    rf =RandomForestClassifier(n_estimators=i,max_depth=2,random_state=10,criterion='gini')\n    output1=rf.fit(principaldf_train,y_train)\n    Predict_out=model.predict(principaldf_test)\n    print(\"Random forest Accuracy\")\n    print(metrics.accuracy_score(y_test,Predict_out)*100)\n    print(\"Area under curve\", )\n    print(roc_auc_score(y_test,Predict_out))\n    print (\"\\n Classification report : \\n\",classification_report(y_test,Predict_out))\n    \n    \n","f457878c":"#  Removing the columns with most of the null values.","bed59d52":"# standarlization using Min max scaler","4bf21c15":"# Train-Test split data","0a6527cc":"# Logistics Regression","2480c379":"> # Visulization using heatmap","e0eedb28":"# Applying Near for removing class imbalance problem","b2e29f8f":"## 2) Column count","fad7305b":"# Applying filter to get high value customer & 70%ile  value","ba977175":"# Number of row n column in our data set","d5895185":"## 1) Row count","87fe903c":"# Random Forest","4d4b665f":"# We can see count is balance now","07355bd7":"### Data types","bc640395":"# Loading the data using pandas","e687cb7b":"# Decision tree","0f574067":"# In parameter tuning we change the value of parameter n_estimators=80,max_depth=2,random_state=10,criterion='gini' to choose one giving best accuracy","f171aa0d":"### Shape of the Data","56fae369":"# Top 5 row","c1f0861d":"# Calculating Z score","ce2d5000":"# Visualization using BOX PLOT","cb5016ed":"# Now we will check noise in data outlier detection","cee1dff8":"# All null valued is removed now","7d46e6fd":"# Applying PCA for dimentionality Reduction","a92048d2":"# checking count of class 0 and class 1","2ffbd827":"# I have applied for loop for n_estimators range (50,60) to check which one giving highest accuracy","6f24cb53":"# offnet_mou_","16f9e4a2":"# Applying different classification model","49766be1":"# We can see above  class is  imbalalnce","37ba1f7d":"# Converting Target Categorical variable  in numeric","868aba3b":" # First array showing list of row num , second list of column num of data which are outlier","2c3ea907":"# Describe : statistics info","a84f18f4":"# Replacing null values with the mean of the corresponding column","1bf7439b":"# Checking for null values","1ff6749a":"# Paramete Tuning in Random Forest","5ad7dd00":"# Dropping rows having atleast 100 NAN value"}}