{"cell_type":{"6fab4af9":"code","127cc10b":"code","f27de767":"code","171668bb":"code","98d92f35":"code","13a1e08a":"code","476c2167":"code","e7d325ba":"code","decf1529":"code","9e3f0426":"code","e66b0abf":"code","6a5727d7":"code","79f1e808":"code","e8e6f7d9":"code","f4332635":"code","6f7b6c9c":"code","5736b799":"code","0c3a4456":"code","d275e7b5":"code","a5574c81":"code","1975a36c":"code","2379cd7c":"code","d085321a":"code","7243d359":"code","67d581b4":"code","5eb5a70d":"code","fe9b2a6f":"code","939a85d5":"code","c9dd4380":"code","ab99f0f2":"code","3627cd68":"code","222e724f":"code","80381e65":"code","9950a9ed":"code","64f6255f":"code","010b224a":"code","ab1e68d9":"code","5dc3d436":"code","44eb44fd":"code","9b4f57bd":"code","7b612e33":"code","3dfea771":"code","17cd2dd6":"code","fac631b6":"code","b8706f3d":"code","4dc560d5":"code","448d2a13":"code","7f3afcd1":"code","e5319fa6":"code","3a4bc8fb":"code","ed0fc933":"code","9bd8cf9b":"code","97ff84a6":"code","f2ecb9c9":"code","dfa905d4":"code","3970b77a":"code","e6e74d90":"code","36c4f6b2":"code","1abae719":"code","e233ff67":"code","da7857fd":"code","61bf3b70":"code","59590eb5":"code","bbfd4db5":"code","2f7ec4d2":"code","9790e376":"code","8b971bdb":"code","8f8daca1":"code","059c5db7":"code","86fe6c8c":"code","3a6be2d0":"code","7eb7a105":"code","f373f9a2":"code","c8d93472":"code","c015fb0a":"code","a47a2214":"code","9c776738":"code","f2fa03c6":"code","7cace494":"code","126be242":"code","669f90f8":"code","2a89b60b":"code","98da72ae":"code","22146786":"code","beefd72a":"code","9090e348":"code","adcea9e4":"code","64d2576e":"code","4c44d28f":"code","13ad51a4":"code","3a11b310":"code","acb76265":"code","d9e96039":"code","24680a67":"code","3007ccfb":"code","17c9fd66":"code","916f20c0":"code","5ac6d529":"code","23dfd67a":"code","a09db05b":"code","453e014a":"code","2950c46b":"code","0b99ba66":"code","d0b7ecfd":"code","5fd45fe1":"code","8d4fda5c":"code","92e8c3b8":"code","415bc432":"code","e1d92068":"code","0d7a3551":"code","8e467dbf":"code","bdfa5c50":"code","c01e553f":"code","714264be":"code","0ee596ef":"code","268100d4":"code","2ffbaa59":"code","3594f9f1":"code","2c6748c8":"code","761664f5":"code","4b02f17f":"code","3509237e":"code","e3e776b0":"code","daab2beb":"code","0d5dbc7d":"code","4e29d6d9":"code","43691154":"markdown","f4bd525f":"markdown","2fd1e800":"markdown","223e9878":"markdown","c6d89ef3":"markdown","d03bf96f":"markdown","06d5f8b6":"markdown","c2a88275":"markdown","12a676a1":"markdown","fe38f699":"markdown","429b400c":"markdown","8d0622a0":"markdown","cb287933":"markdown","a6d80df0":"markdown","43621a2c":"markdown","9a6ee410":"markdown","13e74bc6":"markdown","88215da4":"markdown","681905ae":"markdown","43af6b12":"markdown","a47bd54c":"markdown","c3a5884e":"markdown","7221c5ce":"markdown","9f770192":"markdown","b7bec377":"markdown","e25a8957":"markdown","33864c76":"markdown","9d20ca9d":"markdown","52a7c66b":"markdown","5d0093a1":"markdown","dce2c1c6":"markdown","06f1d02a":"markdown","f5c38a98":"markdown","70e24f53":"markdown","5318b22b":"markdown"},"source":{"6fab4af9":"import pandas as pd\nimport numpy as np","127cc10b":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","f27de767":"test_key = test.PassengerId","171668bb":"train.head()","98d92f35":"train.shape, test.shape","13a1e08a":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()","476c2167":"train_test_data = [train, test]\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)","e7d325ba":"nan = dataset.isnull().sum()\nplt.figure(figsize=(20,5))\nidx_nan = nan.mask(nan==0).dropna().index\nsns.heatmap(dataset[idx_nan].transpose().isnull(), cmap = 'binary')","decf1529":"def get_categorical_feature_info(data, column='', y_column='', positive_state='', negative_state='',\\\n                                  save_fig=False, path='', figsize=(10,10)):\n    if column != y_column:\n        total_positive = data[y_column].sum()\n        total_negative = len(data)-total_positive\n        positive = data[data[y_column]==1][column].value_counts()\/total_positive\n        negative = data[data[y_column]==0][column].value_counts()\/total_negative\n        df = pd.DataFrame([positive, negative])\n        ind = (0,1)\n        ax = df.plot(kind='bar',stacked=True, figsize=figsize)\n        plt.xticks(ind, (positive_state, negative_state), fontsize=15)\n        plt.yticks(np.arange(0, 1.1, step=0.1), fontsize=14)\n        plt.ylim((0, 1.2))\n        plt.ylabel('Value Count %', fontsize=15)\n        vals = ax.get_yticks()\n        ax.set_yticklabels(['{:.0%}'.format(x) for x in vals])\n        plt.xlabel('Y value', fontsize=20)\n        positive_missing_value = data[column][data[y_column]==1].isna().sum()\/len(data[column][data[y_column]==1])\n        negative_missing_value = data[column][data[y_column]==0].isna().sum()\/len(data[column][data[y_column]==0])\n        plt.title('Feature: '+str(column.upper())\\\n                  +'\\nMissing values: '+str('{:,.2%}'.format(positive_missing_value))\\\n                  +positive_state+' and '+ str('{:,.2%}'.format(negative_missing_value)\\\n                                                  +negative_state), fontsize=15)\n        if save_fig:\n            file_name = path+str(column)+'.png'\n            plt.savefig(file_name)","9e3f0426":"for dataset in train_test_data:\n    dataset['Family_size'] = dataset[\"SibSp\"] + dataset[\"Parch\"] + 1","e66b0abf":"title_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \n                 \"Master\": 5, \"Dr\": 4, \"Rev\": 4, \"Col\": 4, \"Major\": 4, \"Mlle\": 4,\"Countess\": 4,\n                 \"Ms\": 4, \"Lady\": 4, \"Jonkheer\": 4, \"Don\": 4, \"Dona\" : 4, \"Mme\": 4,\"Capt\": 4,\"Sir\": 4 }\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Title'].map(title_mapping)","6a5727d7":"for dataset in train_test_data:\n    dataset['Last_Name'] = dataset['Name'].apply(lambda x: str.split(x, \",\")[0])","79f1e808":"total_data = train.append(test, sort=False)","e8e6f7d9":"def fill_missing_cabin(data, match_data):\n    cabin_list = []\n    for i in range(len(data)):\n        if data.Cabin[i] is np.nan:\n            cabin_mode = match_data[(match_data['Last_Name'] == data['Last_Name'][i])\\\n                               & (data['Family_size'][i] == match_data['Family_size'])\\\n                               & (data['Pclass'][i] == match_data['Pclass'])].Cabin.mode()\n            if len(cabin_mode) > 0:\n                cabin_list.append(cabin_mode[0])\n            else:\n                cabin_list.append(np.nan)\n        else:\n            cabin_list.append(data.Cabin[i])\n    return cabin_list","f4332635":"train['Cabin'] = fill_missing_cabin(train, total_data)\ntest['Cabin'] = fill_missing_cabin(test, total_data)","6f7b6c9c":"for dataset in train_test_data:\n    dataset['Cabin_letter'] = dataset['Cabin'].str[:1].fillna('Missing_cabin_info')","5736b799":"def get_cabin_count(data, column=''):\n    cabin_count_list=[]\n    for i in range(len(data)):\n        if data[column][i] is np.nan:\n            cabin_count_list.append(0)\n        else:\n            cabin_count_list.append(data[column][i].strip().count(' ')+1)\n    return cabin_count_list","0c3a4456":"for dataset in train_test_data:\n    dataset['Cabin_count'] = get_cabin_count(dataset, column='Cabin')","d275e7b5":"sex_mapping = {\"male\": 0, \"female\": 1}\nfor dataset in train_test_data:\n    dataset['Sex'] = dataset['Sex'].map(sex_mapping)","a5574c81":"categorical_features = ['Pclass', 'Sex', 'Cabin_letter', 'Embarked', 'Title', 'Family_size', 'Parch', 'SibSp']","1975a36c":"for column in categorical_features:\n    get_categorical_feature_info(train, column=column, y_column='Survived', positive_state='Survived',\\\n                                negative_state='Dead')","2379cd7c":"train[\"Age\"].fillna(train.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)\ntest[\"Age\"].fillna(test.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)","d085321a":"test[\"Fare\"].fillna(test.groupby(\"Pclass\")[\"Fare\"].transform(\"median\"), inplace=True)","7243d359":"def get_continuous_feature_info(data, column='', y_column='', xlim=None):\n    facet = sns.FacetGrid(data, hue=y_column, aspect=4)\n    facet.map(sns.kdeplot,column,shade= True)\n    if xlim is None:\n        facet.set(xlim=(0, data[column].max()))\n    else:\n        facet.set(xlim=xlim)\n    facet.add_legend()\n    plt.show()","67d581b4":"continuous_features = [ 'Pclass', 'Age', 'SibSp', 'Parch', 'Fare', 'Family_size']","5eb5a70d":"for column in continuous_features:\n    get_continuous_feature_info(train, column=column, y_column='Survived')","fe9b2a6f":"for dataset in train_test_data:\n    dataset['Cabin_letter'] = dataset['Cabin_letter'].fillna('Missing_cabin_info')","939a85d5":"for dataset in train_test_data:\n    dataset['Cabin_count'] = dataset['Cabin_count'].fillna(0)","c9dd4380":"for column in ['Cabin_letter', 'Cabin_count']:\n    get_categorical_feature_info(train, column=column, y_column='Survived')","ab99f0f2":"for dataset in train_test_data:\n    dataset['Has_a_Cabin'] = dataset[\"Cabin_letter\"].apply(lambda x: 0 if x == 'Missing_cabin_info' else 1)\n    dataset.drop(columns='Cabin_letter', inplace=True)","3627cd68":"get_categorical_feature_info(train, column='Has_a_Cabin', y_column='Survived')","222e724f":"nan = dataset.isnull().sum()\nplt.figure(figsize=(20,5))\nidx_nan = nan.mask(nan==0).dropna().index\nsns.heatmap(dataset[idx_nan].transpose().isnull(), cmap = 'binary')","80381e65":"def get_outliers_info(data, column, figsize=(20,8)):\n    plt.figure(figsize=figsize)\n    Q1 = data[column].quantile(0.25)\n    Q3 = data[column].quantile(0.75)\n    IQR = Q3 - Q1\n    lower_bound = Q1 - (IQR * 1.5)\n    upper_bound = Q3 + (IQR * 1.5)\n    bounds_list = [lower_bound, upper_bound]\n    feature_bounds = bounds_list\n    sns.boxplot(x=data[column])\n    plt.title('IQR: '+str(IQR)+', Lower bound: '+str(lower_bound)+', Upper bound: '+str(upper_bound)+\\\n              '\\nMedian: '+str(data[column].median()), fontsize=15)\n    plt.show()\n    return feature_bounds","9950a9ed":"outliers_bounds = {}\nfor column in continuous_features:\n    outliers_bounds[column] = get_outliers_info(total_data, column=column)","64f6255f":"outliers_bounds","010b224a":"for dataset in train_test_data:\n    dataset.drop('Parch', axis='columns', inplace=True)","ab1e68d9":"del outliers_bounds['Parch']\ndel outliers_bounds['Pclass']","5dc3d436":"outliers_bounds","44eb44fd":"def normalize_outliers(data, outliers_bounds={}):\n    for key in outliers_bounds.keys():\n        median = data[key].median()\n        new_values = []\n        for i in range(len(data)):\n            value = data[key][i]\n            if value < outliers_bounds[key][0] or value > outliers_bounds[key][1]:\n                new_values.append(outliers_bounds[key][1])\n            else:\n                new_values.append(value)\n        data[key] = new_values\n    return data","9b4f57bd":"train = normalize_outliers(train, outliers_bounds=outliers_bounds)\ntest = normalize_outliers(test, outliers_bounds=outliers_bounds)","7b612e33":"total_data = train.append(test, sort=False)","3dfea771":"del outliers_bounds['SibSp']","17cd2dd6":"for column in outliers_bounds.keys():\n    get_continuous_feature_info(train, column=column, y_column='Survived')","fac631b6":"for dataset in train_test_data:\n    dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] = 0\n    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 16), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 16) & (dataset['Fare'] <= 31), 'Fare']   = 2\n    dataset.loc[(dataset['Fare'] > 31) & (dataset['Fare'] <= 50), 'Fare']   = 3\n    dataset.loc[ dataset['Fare'] > 50, 'Fare'] = 4\n    dataset['Fare'] = dataset['Fare'].astype(int)","b8706f3d":"def is_youngest_girl(data, match_data):\n    match_list = []\n    for i in range(len(data)):\n        if  (data.Sex[i] == 1):\n            match = (data.loc[i].Age <= min(match_data[(match_data['Last_Name'] == data['Last_Name'][i])\\\n                                                   & (data['Family_size'][i] == match_data['Family_size']) \\\n                                                   & (data['Pclass'][i] == match_data['Pclass'])].Age))*1\n\n            match_list.append(match)\n        else:\n            match_list.append(0)\n    return match_list","4dc560d5":"train['Is_Youngest_lady'] = is_youngest_girl(train, total_data)\ntest['Is_Youngest_lady'] = is_youngest_girl(test, total_data)","448d2a13":"for dataset in train_test_data:\n    dataset['Is_WifeandRich'] = ((dataset['Name'].str.find('(') > -1) & (dataset['Sex'] == 1) & (dataset['Pclass'] <3))*1","7f3afcd1":"for column in ['Is_WifeandRich', 'Is_Youngest_lady']:\n    get_categorical_feature_info(train, column=column, y_column='Survived', positive_state='Survived', negative_state='Dead')","e5319fa6":"def is_a_rich_Mother(data, match_data):\n    match_list = []\n    for i in range(len(data)):\n        if (data.Pclass[i] < 3) & (data.Sex[i] == 1):\n            match = (14 >= min(match_data[(match_data['Last_Name'] == data['Last_Name'][i])\\\n                                                   & (data['Family_size'][i] == match_data['Family_size']) \\\n                                                   & (data['Pclass'][i] == match_data['Pclass'])].Age))*1\n\n            match_list.append(match)\n        else:\n            match_list.append(0)\n    return match_list","3a4bc8fb":"train['Is_a_rich_Mother'] = is_a_rich_Mother(train, total_data)\ntest['Is_a_rich_Mother'] = is_a_rich_Mother(test, total_data)","ed0fc933":"def is_the_only_woman(data, match_data):\n    match_list = []\n    for i in range(len(data)):\n        if data.Sex[i] == 1:\n            match = (match_data[(match_data['Last_Name'] == data['Last_Name'][i])\\\n                                                   & (data['Family_size'][i] == match_data['Family_size']) \\\n                                                   & (data['Pclass'][i] == match_data['Pclass'])].Sex.sum())\n            if match == 1:\n                match_list.append(match)\n            else:\n                 match_list.append(0)\n        else:\n            match_list.append(0)\n    return match_list","9bd8cf9b":"train['Is_the_only_woman'] = is_a_rich_Mother(train, total_data)\ntest['Is_the_only_woman'] = is_a_rich_Mother(test, total_data)","97ff84a6":"for column in ['Is_a_rich_Mother', 'Is_the_only_woman']:\n    get_categorical_feature_info(train, column=column, y_column='Survived', positive_state='Survived', negative_state='Dead')","f2ecb9c9":"def other_women_in_family(data, match_data):\n    match_list = []\n    for i in range(len(data)):\n        if data.Sex[i] == 1:\n            match = (match_data[(match_data['Last_Name'] == data['Last_Name'][i])\\\n                                                   & (data['Family_size'][i] == match_data['Family_size']) \\\n                                                   & (data['Pclass'][i] == match_data['Pclass'])].Sex.sum())\n            if match > 1:\n                match_list.append(1)\n            else:\n                 match_list.append(0)\n        else:\n            match_list.append(0)\n    return match_list","dfa905d4":"train['Other_women_in_family'] = other_women_in_family(train, total_data)\ntest['Other_women_in_family'] = other_women_in_family(test, total_data)","3970b77a":"def is_oldest_woman(data, match_data):\n    match_list = []\n    for i in range(len(data)):\n        if  (data.Sex[i] == 1):\n            match = (data.loc[i].Age == max(match_data[(match_data['Last_Name'] == data['Last_Name'][i])\\\n                                                   & (data['Family_size'][i] == match_data['Family_size']) \\\n                                                   & (data['Pclass'][i] == match_data['Pclass'])].Age))*1\n\n            match_list.append(match)\n        else:\n            match_list.append(0)\n    return match_list","e6e74d90":"train['Is_oldest_woman'] = is_oldest_woman(train, total_data)\ntest['Is_oldest_woman'] = is_oldest_woman(test, total_data)","36c4f6b2":"for column in ['Is_oldest_woman', 'Other_women_in_family']:\n    get_categorical_feature_info(train, column=column, y_column='Survived', positive_state='Survived', negative_state='Dead')","1abae719":"def is_youngest_boy(data, match_data):\n    match_list = []\n    for i in range(len(data)):\n        if  (data.Sex[i] == 0):\n            match = (data.loc[i].Age <= min(match_data[(match_data['Last_Name'] == data['Last_Name'][i])\\\n                                                   & (data['Family_size'][i] == match_data['Family_size']) \\\n                                                   & (data['Pclass'][i] == match_data['Pclass'])].Age))*1\n\n            match_list.append(match)\n        else:\n            match_list.append(0)\n    return match_list","e233ff67":"def is_oldest_man(data, match_data):\n    match_list = []\n    for i in range(len(data)):\n        if  (data.Sex[i] == 0):\n            match = (data.loc[i].Age == max(match_data[(match_data['Last_Name'] == data['Last_Name'][i])\\\n                                                   & (data['Family_size'][i] == match_data['Family_size']) \\\n                                                   & (data['Pclass'][i] == match_data['Pclass'])].Age))*1\n\n            match_list.append(match)\n        else:\n            match_list.append(0)\n    return match_list","da7857fd":"def man_with_woman(data, match_data):\n    match_list = []\n    for i in range(len(data)):\n        if (data.Sex[i] == 0) & (data.Title[i] != 5):\n            match = (match_data[(match_data['Last_Name'] == data['Last_Name'][i])\\\n                                                   & (data['Family_size'][i] == match_data['Family_size']) \\\n                                                   & (data['Pclass'][i] == match_data['Pclass'])].Sex.sum())\n            if match > 1:\n                match_list.append(1)\n            else:\n                 match_list.append(0)\n        else:\n            match_list.append(0)\n    return match_list","61bf3b70":"def man_with_other_men(data, match_data):\n    match_list = []\n    for i in range(len(data)):\n        if data.Sex[i] == 0:\n            match = len(match_data[(match_data['Last_Name'] == data['Last_Name'][i])\\\n                                                   & (data['Family_size'][i] == match_data['Family_size']) \\\n                                                   & (data['Pclass'][i] == match_data['Pclass'])\\\n                                                   & (match_data['Sex'] == 0)].Sex)\n            if match > 1:\n                match_list.append(1)\n            else:\n                 match_list.append(0)\n        else:\n            match_list.append(0)\n    return match_list","59590eb5":"train['Is_youngest_man'] = is_youngest_boy(train, total_data)\ntest['Is_youngest_man'] = is_youngest_boy(test, total_data)","bbfd4db5":"train['Is_oldest_man'] = is_oldest_man(train, total_data)\ntest['Is_oldest_man'] = is_oldest_man(test, total_data)","2f7ec4d2":"train['Man_with_woman'] = man_with_woman(train, total_data)\ntest['Man_with_woman'] = man_with_woman(test, total_data)","9790e376":"train['Man_with_other_men'] = man_with_woman(train, total_data)\ntest['Man_with_other_men'] = man_with_woman(test, total_data)","8b971bdb":"for column in ['Is_youngest_man', 'Is_oldest_man', 'Man_with_woman', 'Man_with_other_men']:\n    get_categorical_feature_info(train, column=column, y_column='Survived', positive_state='Survived', negative_state='Dead')","8f8daca1":"def is_youngest_children(data, match_data):\n    match_list = []\n    for i in range(len(data)):\n        if  (data.Title[i] == 5):\n            match = (data.loc[i].Age <= min(match_data[(match_data['Last_Name'] == data['Last_Name'][i])\\\n                                                   & (data['Family_size'][i] == match_data['Family_size']) \\\n                                                   & (data['Pclass'][i] == match_data['Pclass'])\\\n                                                   & (match_data['Title'] == 5)].Age))*1\n\n            match_list.append(match)\n        else:\n            match_list.append(0)\n    return match_list","059c5db7":"def is_oldest_children(data, match_data):\n    match_list = []\n    for i in range(len(data)):\n        if  (data.Title[i] == 5):\n            match = (data.loc[i].Age >= max(match_data[(match_data['Last_Name'] == data['Last_Name'][i])\\\n                                                   & (data['Family_size'][i] == match_data['Family_size']) \\\n                                                   & (data['Pclass'][i] == match_data['Pclass'])\\\n                                                   & (match_data['Title'] == 5)].Age))*1\n\n            match_list.append(match)\n        else:\n            match_list.append(0)\n    return match_list","86fe6c8c":"def is_the_only_child(data, match_data):\n    match_list = []\n    for i in range(len(data)):\n        if  (data.Title[i] == 5):\n            match = len(match_data[(match_data['Last_Name'] == data['Last_Name'][i])\\\n                                                   & (data['Family_size'][i] == match_data['Family_size']) \\\n                                                   & (data['Pclass'][i] == match_data['Pclass'])\\\n                                                   & (match_data['Title'] == 5)])\n            if match == 1:\n                match_list.append(1)\n            else:\n                match_list.append(0)\n        else:\n            match_list.append(0)\n    return match_list","3a6be2d0":"train['Is_youngest_children'] = is_youngest_children(train, total_data)\ntest['Is_youngest_children'] = is_youngest_children(test, total_data)","7eb7a105":"train['Is_oldest_children'] = is_oldest_children(train, total_data)\ntest['Is_oldest_children'] = is_oldest_children(test, total_data)","f373f9a2":"train['Is_the_only_child'] = is_the_only_child(train, total_data)\ntest['Is_the_only_child'] = is_the_only_child(test, total_data)","c8d93472":"for column in ['Is_youngest_children', 'Is_oldest_children', 'Is_the_only_child']:\n    get_categorical_feature_info(train, column=column, y_column='Survived', positive_state='Survived', negative_state='Dead')","c015fb0a":"def family_survived(data, match_data):\n    match_list = []\n    for i in range(len(data)):\n        if data.Family_size[i] > 1:\n            survived = (match_data[(match_data['Last_Name'] == data['Last_Name'][i])\\\n                                                   & (data['Family_size'][i] == match_data['Family_size']) \\\n                                                   & (data['Pclass'][i] == match_data['Pclass'])\\\n                                                & (data['PassengerId'][i] != match_data['PassengerId'])].Survived).sum()\n            if survived > 0:\n                match_list.append(1)\n            else:\n                match_list.append(0)\n        else:\n            match_list.append(0)\n    return match_list","a47a2214":"def is_a_wife_with_survived_children(data, match_data):\n    match_list = []\n    for i in range(len(data)):\n        if (data.Name[i].find('(') > -1) & (data.Sex[i] == 1):\n            survived = (match_data[(match_data['Last_Name'] == data['Last_Name'][i])\\\n                                                   & (data['Family_size'][i] == match_data['Family_size']) \\\n                                                   & (data['Pclass'][i] == match_data['Pclass'])\\\n                                                & (data['PassengerId'][i] != match_data['PassengerId'])\\\n                                                & (match_data['Title'] == 5)].Survived).sum()\n            if survived > 0:\n                match_list.append(1)\n            else:\n                match_list.append(0)\n        else:\n            match_list.append(0)\n    return match_list","9c776738":"def is_a_child_with_other_candw_survived(data, match_data):\n    match_list = []\n    for i in range(len(data)):\n        if (data.Title[i] == 5):\n            survived = (match_data[(match_data['Last_Name'] == data['Last_Name'][i])\\\n                                                   & (data['Family_size'][i] == match_data['Family_size']) \\\n                                                   & (data['Pclass'][i] == match_data['Pclass'])\\\n                                                & (data['PassengerId'][i] != match_data['PassengerId'])\\\n                                                & ((match_data['Title'] == 5) | (match_data['Sex'] == 0))].Survived).sum()\n            if survived > 0:\n                match_list.append(1)\n            else:\n                match_list.append(0)\n        else:\n            match_list.append(0)\n    return match_list","f2fa03c6":"train['Family_survived'] = family_survived(train, total_data)\ntest['Family_survived'] = family_survived(test, total_data)","7cace494":"train['Is_a_wife_with_sc'] = is_a_wife_with_survived_children(train, total_data)\ntest['Is_a_wife_with_sc'] = is_a_wife_with_survived_children(test, total_data)","126be242":"train['Is_a_child_with_wandc_survived'] = is_a_child_with_other_candw_survived(train, total_data)\ntest['Is_a_child_with_wandc_survived'] = is_a_child_with_other_candw_survived(test, total_data)","669f90f8":"for column in ['Family_survived', 'Is_a_wife_with_sc', 'Is_a_child_with_wandc_survived']:\n    get_categorical_feature_info(train, column=column, y_column='Survived', positive_state='Survived', negative_state='Dead')","2a89b60b":"for value in [(0,15), (15,35), (35,50), (50,65), (65,100)]:\n    get_continuous_feature_info(train, column='Age', y_column='Survived', xlim=value)","98da72ae":"for dataset in train_test_data:    \n    dataset.loc[ dataset['Age'] <= 14, 'Age'] = 0\n    dataset.loc[(dataset['Age'] > 14) & (dataset['Age'] <= 32), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n    dataset.loc[ dataset['Age'] > 64, 'Age'] = 4","22146786":"test.isna().sum(), train.isna().sum()","beefd72a":"Pclass1 = train[train['Pclass']==1]['Embarked'].value_counts()\nPclass2 = train[train['Pclass']==2]['Embarked'].value_counts()\nPclass3 = train[train['Pclass']==3]['Embarked'].value_counts()\ndf = pd.DataFrame([Pclass1, Pclass2, Pclass3])\ndf.index = ['1st class','2nd class', '3rd class']\ndf.plot(kind='bar',stacked=True, figsize=(10,5))","9090e348":"for dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].fillna('S')","adcea9e4":"embarked_mapping = {\"C\": \"Cherbourg\", \"S\": \"Southampton\", \"Q\": \"Queenstown\"}\nfor dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].map(embarked_mapping)","64d2576e":"for dataset in train_test_data:\n    dataset['Is_AloneandPoor'] = 0\n    dataset.loc[(dataset['Family_size'] == 1) & (dataset['Pclass'] == 3 ),'Is_AloneandPoor'] = 1","4c44d28f":"get_categorical_feature_info(train, column='Is_AloneandPoor', y_column='Survived', positive_state='Survived', negative_state='Dead')","13ad51a4":"for dataset in train_test_data:\n    dataset['IsChildandRich'] = 0\n    dataset.loc[(dataset['Title'] == 5) & (dataset['Pclass'] < 3 ),'IsChildandRich'] = 1  ","3a11b310":"get_categorical_feature_info(train, column='IsChildandRich', y_column='Survived', positive_state='Survived', negative_state='Dead')","acb76265":"for data in train_test_data:\n    data['Cabin'] = data['Cabin'].fillna('X')\n    data['Cabin'] = data['Cabin'].apply(lambda x: str(x)[0])\n    data['Cabin'] = data['Cabin'].replace(['A', 'D', 'E', 'T'], 'M')\n    data['Cabin'] = data['Cabin'].replace(['B', 'C'], 'H')\n    data['Cabin'] = data['Cabin'].replace(['F', 'G'], 'L')","d9e96039":"get_categorical_feature_info(train, column='Cabin', y_column='Survived', positive_state='Survived', negative_state='Dead')","24680a67":"for dataset in train_test_data:\n    dataset['Family_size_group'] = 'Small'\n    dataset.loc[dataset['Family_size'] == 1, 'Family_size_group'] = 'Alone'\n    dataset.loc[dataset['Family_size'] > 2, 'Family_size_group'] = 'Big'","3007ccfb":"train['IsMaleandPoor'] = 0\ntrain.loc[(train['Sex'] == 0) & (train['Pclass'] == 3 ),'IsMaleandPoor'] = 1\ntest['IsMaleandPoor'] = 0\ntest.loc[(test['Sex'] == 0) & (test['Pclass'] == 3 ),'IsMaleandPoor'] = 1 ","17c9fd66":"for column in ['Family_size_group', 'IsMaleandPoor']:\n    get_categorical_feature_info(train, column=column, y_column='Survived', positive_state='Survived', negative_state='Dead')","916f20c0":"train.columns","5ac6d529":"for dataset in train_test_data:\n    dataset.drop(['PassengerId', 'Name', 'Ticket', 'Last_Name', 'SibSp', 'Ticket'\\\n                 , 'Family_size'], axis=1, inplace=True)","23dfd67a":"len(train.columns), len(test.columns)","a09db05b":"train.dtypes","453e014a":"def get_dummies_from_list(categorical_list):\n    dummies = pd.get_dummies(pd.Categorical(categorical_list), sparse=True)\n    return dummies","2950c46b":"def transform_dummies(data, column_list=[]):\n    for column in column_list:\n        dummy_df = get_dummies_from_list(data[column])\n        data = data.merge(dummy_df, how='left', left_index=True, right_index=True)\n    data.drop(labels=column_list, axis='columns', inplace=True)\n    return data","0b99ba66":"train = transform_dummies(train, column_list=['Embarked', 'Family_size_group', 'Cabin'])\ntest = transform_dummies(test, column_list=['Embarked', 'Family_size_group', 'Cabin'])","d0b7ecfd":"len(train.columns), len(test.columns)","5fd45fe1":"def get_indipendent_variables_mix_info(data, x_column='', y_column='', dependent_variable=''):\n    if (x_column != y_column) & (x_column != dependent_variable):\n        fig, (axis1,axis2) = plt.subplots(1,2,figsize=(14,14))\n        sns.boxplot(x = x_column, y = y_column, hue = dependent_variable, data = data, ax = axis1)\n        axis1.set_title(str(x_column)+' vs '+str(y_column))\n        sns.violinplot(x = x_column, y = y_column, hue = dependent_variable, data = data, ax = axis2, split = True)\n        axis2.set_title(str(x_column)+' vs '+str(y_column))\n    plt.show()","8d4fda5c":"for column in train.columns:\n    get_indipendent_variables_mix_info(train, x_column=column, y_column='Age', dependent_variable='Survived')","92e8c3b8":"corr = train.corr()\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\nf, ax = plt.subplots(figsize=(11, 9))\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","415bc432":"abs(corr.Survived).sort_values(ascending=False)","e1d92068":"from sklearn.decomposition import PCA\nfrom mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.pyplot as plt, mpl_toolkits.mplot3d\nfrom mpl_toolkits.mplot3d import axes3d\n\nplt.figure(figsize=(10,10))\ntrain2D = PCA(n_components=2).fit_transform(train.drop('Survived', axis='columns'))\nplt.scatter(train2D[train[train.Survived==0].reset_index(drop=True).index, 0], train2D[train[train.Survived==0].reset_index(drop=True).index, 1], c='red', marker='.', alpha=.6, )\nplt.scatter(train2D[train[train.Survived==1].reset_index(drop=True).index, 0], train2D[train[train.Survived==1].reset_index(drop=True).index, 1], c='green', marker='.', alpha=.2)\n\nplt.show()","0d7a3551":"ax = Axes3D(plt.figure(figsize=(10,10)))\ntrain3D = PCA(n_components=3).fit_transform(train.drop('Survived', axis='columns'))\nax.scatter3D(train3D[train[train.Survived==0].reset_index(drop=True).index, 0], train3D[train[train.Survived==0].reset_index(drop=True).index, 1], train3D[train[train.Survived==0].reset_index(drop=True).index, 2], color='red', marker='.', alpha=.25, s=450)\nax.scatter3D(train3D[train[train.Survived==1].reset_index(drop=True).index, 0], train3D[train[train.Survived==1].reset_index(drop=True).index, 1], train3D[train[train.Survived==1].reset_index(drop=True).index, 2], color='green', marker='.', alpha=.9, s=300)\nax.view_init(elev=25, azim=45)\n\nplt.show()","8e467dbf":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nimport numpy as np","bdfa5c50":"train_data = train.drop(columns='Survived')\ntarget = train['Survived']\n\ntrain_data.shape, target.shape","c01e553f":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import precision_recall_curve, make_scorer, recall_score, precision_score, average_precision_score, confusion_matrix, accuracy_score\nfrom sklearn.model_selection import GridSearchCV","714264be":"X_train, X_test, y_train, y_test = train_test_split(train_data, train.Survived, test_size=0.10, stratify=train['Survived'].values, random_state=42)","0ee596ef":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nk_fold = KFold(n_splits=10, shuffle=True, random_state=0)","268100d4":"clf = SVC(C=1.0, kernel='rbf', degree=3, gamma='auto', probability=True)\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)\nprint('The total score is: '+str(score.mean()))","2ffbaa59":"clf.fit(train_data, target)","3594f9f1":"predictions = clf.predict(X_test)","2c6748c8":"y_score = clf.predict_proba(X_test)","761664f5":"average_precision = average_precision_score(y_test, y_score[:, 0])\naverage_precision","4b02f17f":"import scikitplot as skplt","3509237e":"skplt.metrics.plot_precision_recall(y_test, y_score, figsize=(15,10))\nplt.show()","e3e776b0":"skplt.metrics.plot_roc(y_test, y_score, figsize=(15,10))\nplt.show()","daab2beb":"test_prediction = clf.predict(test)","0d5dbc7d":"prediction = clf.predict(test)","4e29d6d9":"submission = pd.DataFrame({\n        \"PassengerId\": test_key,\n        \"Survived\": prediction\n    })\n\nsubmission.to_csv('submission.csv', index=False)","43691154":"6) What if she is the oldest woman in her family?","f4bd525f":"2) is he\/she the oldest one?","2fd1e800":"# Analyze Missing values with sns heatmap","223e9878":"# Custom binning for Fare\nHaving info from the plot, I create custom bins for \"Fare\" variable.","c6d89ef3":"# Normalizing outliers\nWith this funciton I normalized upper outliers (because in the plot there are not lower outliers) with upper bound value","d03bf96f":"5) What if she has other women in her family?","06d5f8b6":"# Children featuren engineering\nNow It's children turn.\n1) is he\/she the youngest one?","c2a88275":"# Creationg dummy columns for categorical variables","12a676a1":"# Filling missing Cabin info\nAfter first function to fill missing value in Cabin column, I saw that don't have a cabin info, is a \"feature\" to pass to\ntrain in the model because is distribution is different on the two classes of dependent variable","fe38f699":"2) What if the passengers is a rich wife?","429b400c":"# Creating new features\nAfter analyzed \"Missing cabin info\", I decided to see if do not have a cabin is an important feature","8d0622a0":"# Survived Family featuren engineering\nNow we have to analyze info about survived family, but we don't have to take passenger surviving info to do not have <br>\noverfitting result. <br>\nSo, data['PassengerId'][i] != match_data['PassengerId']), exclude this case. <br>\n1) Has survived family?","cb287933":"# Filling missing values\nFill nan Age with the median of same Title\nFill nan Fare with media of same Pclass","a6d80df0":"Is He\/She a child with other children or women survived?","43621a2c":"# Dropping useless columns","9a6ee410":"Now, with Age plot, I can bin Age column","13e74bc6":"# Custom function to plot and extract outliers info\nWith this function I can plot (with sns box plot) and extract outliers info with interquertile, lower boun and upper bound info","88215da4":"# PCA Analysis on 3 dimensions","681905ae":"2) What if he has women in his family?","43af6b12":"# Male features engineering\nNow it's Male turn.\n1) What if he is the youngest man in his family?","a47bd54c":"4) What if she is the only woman in the family?","c3a5884e":"2) Is she a wife with survived children in her family?","7221c5ce":"2) What if he has other men in his family?","9f770192":"# Class and status features engineering","b7bec377":"# Categorical features plot info\nWhit this custom funcion I can plot toghere more than 1 categorical feature with this informations:\n% of missing values for classes: (Survived, Dead)\nSee % distribution of the categorial feature on dependent variable","e25a8957":"# Continuous features custom function\nWith this function I can plot more the one continuous features using sns FacetGrid","33864c76":"# Missing cabin custom function\nWith thi function I take cabin info for family and fill nan values","9d20ca9d":"# Custom function to plot info about 2 indipendent variables on dependent variable","52a7c66b":"# CrossValidation on 10 splits to test my model","5d0093a1":"2) What if he is the oldest man in his family?","dce2c1c6":"# PCA Analysis on 2 dimensions","06f1d02a":"3) is he\/she the only one?","f5c38a98":"3) What is she is a rich mother? (or a woman with children in her family?)","70e24f53":"# Female features engineering\n\nNow it's time to make questions.\nIn first plots we saw that a woman has more probability to survive, but... <br>\n1) What if she's the youngest woman in the family? <br>\nTo answer to this and other questions, we have to match individual info with family info, so we have to have a DataFrame\nwith all train and test info.","5318b22b":"# Filling Embarked missing values with the most frequent info"}}