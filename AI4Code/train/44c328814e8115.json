{"cell_type":{"d820f2a4":"code","3bb660a3":"code","3933f70c":"code","0e65ce03":"code","9a90b3c4":"code","5a5caa3d":"code","bc3b48d6":"code","4848c4d9":"code","a7bdb4cb":"code","80e86241":"code","d80a0c50":"code","96caf90f":"code","4974b6c4":"code","ccb857f5":"code","f029ff5a":"code","2f0db62b":"code","2fdbaea8":"code","bcd1cda6":"code","c75ad339":"code","d3c79bb7":"code","1e884899":"code","ae6840ae":"code","09518928":"code","25e19be9":"code","1a0278c1":"code","fa7f11b5":"code","c85b6a63":"code","6c03db48":"code","b7353ef4":"markdown","e1e6c2e5":"markdown","88661752":"markdown","92c25465":"markdown","862badf7":"markdown","a4117baf":"markdown","ad9f8c03":"markdown","692540ad":"markdown","1f627c3b":"markdown","211dcf77":"markdown","7c3c38af":"markdown","11f45127":"markdown","a9befa2a":"markdown","847c29b8":"markdown","f3792cf7":"markdown","5dc4d309":"markdown","07a872b1":"markdown","ecfa25f1":"markdown","c0534b5a":"markdown","f1afdb7a":"markdown","45a330df":"markdown","86da4c4b":"markdown","5ed5a31e":"markdown","467bbefe":"markdown","2cabe485":"markdown","24afe29e":"markdown","63c15f45":"markdown"},"source":{"d820f2a4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn import model_selection, naive_bayes, svm\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import mean_squared_error\nimport seaborn as sns\nimport re\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3bb660a3":"#carrega a base de treino\ncorpus_treino=pd.read_csv(r\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\",encoding='latin-1')","3933f70c":"#train.sample(n=5)","0e65ce03":"#em primeiro momento essa fun\u00e7\u00e3o transforma todas string para um valor inteiro\ndef label_encoding(base):   \n    #replace transforma todos os elementos vazios contidos no \n    #corpus para o valor 0\n    #base.replace(np.nan, 0, inplace=True)\n    \n    base.loc[base.MSZoning=='A','MSZoning']=1\n    base.loc[base.MSZoning=='C (all)','MSZoning']=2\n    base.loc[base.MSZoning=='C','MSZoning']=2\n    base.loc[base.MSZoning=='FV','MSZoning']=3\n    base.loc[base.MSZoning=='I','MSZoning']=4\n    base.loc[base.MSZoning=='RH','MSZoning']=5\n    base.loc[base.MSZoning=='RL','MSZoning']=6\n    base.loc[base.MSZoning=='RP','MSZoning']=7\n    base.loc[base.MSZoning=='RM','MSZoning']=8\n #   base['MSZoning']=base['MSZoning'].astype(str).astype(int)\n    \n    base.loc[base.LotFrontage=='NA','LotFrontage']=0\n    #base['LotFrontage']=base['LotFrontage'].astype(str).astype(int)\n        \n    base.loc[base.Street=='NA','Street']=0\n    base.loc[base.Street=='Grvl','Street']=1\n    base.loc[base.Street=='Pave','Street']=2\n    base['Street']=base['Street'].astype(str).astype(int)\n\n    base.loc[base.Alley== \"NA\",'Alley']=0\n    base.loc[base.Alley=='Grvl','Alley']=1\n    base.loc[base.Alley=='Pave','Alley']=2\n    #base['Alley']=base['Alley'].astype(str).astype(int)\n\n    base.loc[base.LotShape=='Reg','LotShape']=4\n    base.loc[base.LotShape=='IR1','LotShape']=1\n    base.loc[base.LotShape=='IR2','LotShape']=2\n    base.loc[base.LotShape=='IR3','LotShape']=3\n   # base['LotShape']=base['LotShape'].astype(str).astype(int)\n\n    base.loc[base.LandContour=='Lvl','LandContour']=4\n    base.loc[base.LandContour=='Bnk','LandContour']=1\n    base.loc[base.LandContour=='HLS','LandContour']=2\n    base.loc[base.LandContour=='Low','LandContour']=3\n   # base['LandContour']=base['LandContour'].astype(str).astype(int)\n\n    base.loc[base.Utilities=='AllPub','Utilities']=4\n    base.loc[base.Utilities=='NoSewr','Utilities']=1\n    base.loc[base.Utilities=='NoSeWa','Utilities']=2\n    base.loc[base.Utilities=='ELO','Utilities']=3\n   # base['Utilities']=base['Utilities'].astype(str).astype(int)\n\n    base.loc[base.LotConfig=='Inside','LotConfig']=5\n    base.loc[base.LotConfig=='Corner','LotConfig']=1\n    base.loc[base.LotConfig=='CulDSac','LotConfig']=2\n    base.loc[base.LotConfig=='FR2','LotConfig']=3\n    base.loc[base.LotConfig=='FR3','LotConfig']=4\n    #base['LotConfig']=base['LotConfig'].astype(str).astype(int)\n\n    base.loc[base.LandSlope=='Gtl','LandSlope']=3\n    base.loc[base.LandSlope=='Mod','LandSlope']=1\n    base.loc[base.LandSlope=='Sev','LandSlope']=2\n   # base['LandSlope']=base['LandSlope'].astype(str).astype(int)\n\n    base.loc[base.Neighborhood=='Blmngtn','Neighborhood']=25\n    base.loc[base.Neighborhood=='Blueste','Neighborhood']=1\n    base.loc[base.Neighborhood=='BrDale','Neighborhood']=2\n    base.loc[base.Neighborhood=='BrkSide','Neighborhood']=3\n    base.loc[base.Neighborhood=='ClearCr','Neighborhood']=4\n    base.loc[base.Neighborhood=='CollgCr','Neighborhood']=5\n    base.loc[base.Neighborhood=='Crawfor','Neighborhood']=6\n    base.loc[base.Neighborhood=='Edwards','Neighborhood']=7\n    base.loc[base.Neighborhood=='Gilbert','Neighborhood']=8\n    base.loc[base.Neighborhood=='IDOTRR','Neighborhood']=9\n    base.loc[base.Neighborhood=='MeadowV','Neighborhood']=10\n    base.loc[base.Neighborhood=='Mitchel','Neighborhood']=11\n    base.loc[base.Neighborhood=='NAmes','Neighborhood']=12\n    base.loc[base.Neighborhood=='NoRidge','Neighborhood']=13\n    base.loc[base.Neighborhood=='NPkVill','Neighborhood']=14\n    base.loc[base.Neighborhood=='NridgHt','Neighborhood']=15\n    base.loc[base.Neighborhood=='NWAmes','Neighborhood']=16\n    base.loc[base.Neighborhood=='OldTown','Neighborhood']=17\n    base.loc[base.Neighborhood=='SWISU','Neighborhood']=18\n    base.loc[base.Neighborhood=='Sawyer','Neighborhood']=19\n    base.loc[base.Neighborhood=='SawyerW','Neighborhood']=20\n    base.loc[base.Neighborhood=='Somerst','Neighborhood']=21\n    base.loc[base.Neighborhood=='StoneBr','Neighborhood']=22\n    base.loc[base.Neighborhood=='Timber','Neighborhood']=23\n    base.loc[base.Neighborhood=='Veenker','Neighborhood']=24\n    #base['Neighborhood']=base['Neighborhood'].astype(str).astype(int)\n\n    base.loc[base.Condition1=='Artery','Condition1']=9\n    base.loc[base.Condition1=='Feedr','Condition1']=1\n    base.loc[base.Condition1=='Norm','Condition1']=2\n    base.loc[base.Condition1=='RRNn','Condition1']=3\n    base.loc[base.Condition1=='RRAn','Condition1']=4\n    base.loc[base.Condition1=='PosN','Condition1']=5\n    base.loc[base.Condition1=='PosA','Condition1']=6\n    base.loc[base.Condition1=='RRNe','Condition1']=7\n    base.loc[base.Condition1=='RRAe','Condition1']=8\n   # base['Condition1']=base['Condition1'].astype(str).astype(int)\n\n    base.loc[base.Condition2=='Artery','Condition2']=9\n    base.loc[base.Condition2=='Feedr','Condition2']=1\n    base.loc[base.Condition2=='Norm','Condition2']=2\n    base.loc[base.Condition2=='RRNn','Condition2']=3\n    base.loc[base.Condition2=='RRAn','Condition2']=4\n    base.loc[base.Condition2=='PosN','Condition2']=5\n    base.loc[base.Condition2=='PosA','Condition2']=6\n    base.loc[base.Condition2=='RRNe','Condition2']=7\n    base.loc[base.Condition2=='RRAe','Condition2']=8\n   # base['Condition2']=base['Condition2'].astype(str).astype(int)\n\n    #dar uma olhada no tipo TWNHS\n    base.loc[base.BldgType=='1Fam','BldgType']=5\n    base.loc[base.BldgType=='2fmCon','BldgType']=1\n    base.loc[base.BldgType=='Duplex','BldgType']=2\n    base.loc[base.BldgType=='TwnhsE','BldgType']=3\n    base.loc[base.BldgType=='TwnhsI','BldgType']=4\n    base.loc[base.BldgType=='Twnhs','BldgType']=4\n  #  base['BldgType']=base['BldgType'].astype(str).astype(int)\n\n    base.loc[base.HouseStyle=='1Story','HouseStyle']=8\n    base.loc[base.HouseStyle=='1.5Fin','HouseStyle']=1\n    base.loc[base.HouseStyle=='1.5Unf','HouseStyle']=2\n    base.loc[base.HouseStyle=='2Story','HouseStyle']=3\n    base.loc[base.HouseStyle=='2.5Fin','HouseStyle']=4\n    base.loc[base.HouseStyle=='2.5Unf','HouseStyle']=5\n    base.loc[base.HouseStyle=='SFoyer','HouseStyle']=6\n    base.loc[base.HouseStyle=='SLvl','HouseStyle']=7\n  #  base['HouseStyle']=base['HouseStyle'].astype(str).astype(int)\n\n    base.loc[base.RoofStyle=='Flat','RoofStyle']=6\n    base.loc[base.RoofStyle=='Gable','RoofStyle']=1\n    base.loc[base.RoofStyle=='Gambrel','RoofStyle']=2\n    base.loc[base.RoofStyle=='Hip','RoofStyle']=3\n    base.loc[base.RoofStyle=='Mansard','RoofStyle']=4\n    base.loc[base.RoofStyle=='Shed','RoofStyle']=5\n   # base['RoofStyle']=base['RoofStyle'].astype(str).astype(int)\n\n    base.loc[base.RoofMatl=='ClyTile','RoofMatl']=8\n    base.loc[base.RoofMatl=='CompShg','RoofMatl']=1\n    base.loc[base.RoofMatl=='Membran','RoofMatl']=2\n    base.loc[base.RoofMatl=='Metal','RoofMatl']=3\n    base.loc[base.RoofMatl=='Roll','RoofMatl']=4\n    base.loc[base.RoofMatl=='Tar&Grv','RoofMatl']=5\n    base.loc[base.RoofMatl=='WdShake','RoofMatl']=6\n    base.loc[base.RoofMatl=='WdShngl','RoofMatl']=7\n  #  base['RoofMatl']=base['RoofMatl'].astype(str).astype(int)\n\n    #aqui tamb\u00e9m ocorrem bizarrises como Cemnt e cment\n    base.loc[base.Exterior1st=='AsbShng','Exterior1st']=17\n    base.loc[base.Exterior1st=='AsphShn','Exterior1st']=1\n    base.loc[base.Exterior1st=='BrkComm','Exterior1st']=2\n    base.loc[base.Exterior1st=='Brk Cmn','Exterior1st']=2\n    base.loc[base.Exterior1st=='BrkFace','Exterior1st']=3\n    base.loc[base.Exterior1st=='CBlock','Exterior1st']=4\n    base.loc[base.Exterior1st=='CemntBd','Exterior1st']=5\n    base.loc[base.Exterior1st=='CmentBd','Exterior1st']=5\n    base.loc[base.Exterior1st=='HdBoard','Exterior1st']=6\n    base.loc[base.Exterior1st=='ImStucc','Exterior1st']=7\n    base.loc[base.Exterior1st=='MetalSd','Exterior1st']=8\n    base.loc[base.Exterior1st=='Other','Exterior1st']=9\n    base.loc[base.Exterior1st=='Plywood','Exterior1st']=10\n    base.loc[base.Exterior1st=='PreCast','Exterior1st']=11\n    base.loc[base.Exterior1st=='Stone','Exterior1st']=12\n    base.loc[base.Exterior1st=='Stucco','Exterior1st']=13\n    base.loc[base.Exterior1st=='VinylSd','Exterior1st']=14\n    base.loc[base.Exterior1st=='Wd Sdng','Exterior1st']=15\n    base.loc[base.Exterior1st=='WdShing','Exterior1st']=16\n #   base['Exterior1st']=base['Exterior1st'].astype(str).astype(int)\n\n    base.loc[base.Exterior2nd=='AsbShng','Exterior2nd']=17\n    base.loc[base.Exterior2nd=='AsphShn','Exterior2nd']=1\n    base.loc[base.Exterior2nd=='BrkComm','Exterior2nd']=2\n    base.loc[base.Exterior2nd=='Brk Cmn','Exterior2nd']=2\n    base.loc[base.Exterior2nd=='BrkFace','Exterior2nd']=3\n    base.loc[base.Exterior2nd=='CBlock','Exterior2nd']=4\n    base.loc[base.Exterior2nd=='CemntBd','Exterior2nd']=5\n    base.loc[base.Exterior2nd=='CmentBd','Exterior2nd']=5\n    base.loc[base.Exterior2nd=='HdBoard','Exterior2nd']=6\n    base.loc[base.Exterior2nd=='ImStucc','Exterior2nd']=7\n    base.loc[base.Exterior2nd=='MetalSd','Exterior2nd']=8\n    base.loc[base.Exterior2nd=='Other','Exterior2nd']=9\n    base.loc[base.Exterior2nd=='Plywood','Exterior2nd']=10\n    base.loc[base.Exterior2nd=='PreCast','Exterior2nd']=11\n    base.loc[base.Exterior2nd=='Stone','Exterior2nd']=12\n    base.loc[base.Exterior2nd=='Stucco','Exterior2nd']=13\n    base.loc[base.Exterior2nd=='VinylSd','Exterior2nd']=14\n    base.loc[base.Exterior2nd=='Wd Sdng','Exterior2nd']=15\n    base.loc[base.Exterior2nd=='Wd Shng','Exterior2nd']=15\n    base.loc[base.Exterior2nd=='WdShing','Exterior2nd']=16\n  #  base['Exterior2nd']=base['Exterior2nd'].astype(str).astype(int)\n\n    base.loc[base.MasVnrType=='BrkCmn','MasVnrType']=5\n    base.loc[base.MasVnrType=='BrkFace','MasVnrType']=1\n    base.loc[base.MasVnrType=='CBlock','MasVnrType']=2\n    base.loc[base.MasVnrType=='None','MasVnrType']=3\n    base.loc[base.MasVnrType=='Stone','MasVnrType']=4\n   # base['MasVnrType']=base['MasVnrType'].astype(str).astype(int)\n\n    base.loc[base.ExterQual=='Ex','ExterQual']=5\n    base.loc[base.ExterQual=='Gd','ExterQual']=1\n    base.loc[base.ExterQual=='TA','ExterQual']=2\n    base.loc[base.ExterQual=='Fa','ExterQual']=3\n    base.loc[base.ExterQual=='Po','ExterQual']=4\n  #  base['ExterQual']=base['ExterQual'].astype(str).astype(int)\n\n    base.loc[base.ExterCond=='Ex','ExterCond']=5\n    base.loc[base.ExterCond=='Gd','ExterCond']=1\n    base.loc[base.ExterCond=='TA','ExterCond']=2\n    base.loc[base.ExterCond=='Fa','ExterCond']=3\n    base.loc[base.ExterCond=='Po','ExterCond']=4\n  #  base['ExterCond']=base['ExterCond'].astype(str).astype(int)\n\n    base.loc[base.Foundation=='BrkTil','Foundation']=6\n    base.loc[base.Foundation=='CBlock','Foundation']=1\n    base.loc[base.Foundation=='PConc','Foundation']=2\n    base.loc[base.Foundation=='Slab','Foundation']=3\n    base.loc[base.Foundation=='Stone','Foundation']=4\n    base.loc[base.Foundation=='Wood','Foundation']=5\n #   base['Foundation']=base['Foundation'].astype(str).astype(int)\n\n    base.loc[base.BsmtQual=='Gd','BsmtQual']=1\n    base.loc[base.BsmtQual=='TA','BsmtQual']=2\n    base.loc[base.BsmtQual=='Fa','BsmtQual']=3\n    base.loc[base.BsmtQual=='Po','BsmtQual']=4\n    base.loc[base.BsmtQual=='Ex','BsmtQual']=5\n  #  base['BsmtQual']=base['BsmtQual'].astype(str).astype(int)\n\n    base.loc[base.BsmtCond=='Gd','BsmtCond']=1\n    base.loc[base.BsmtCond=='TA','BsmtCond']=2\n    base.loc[base.BsmtCond=='Fa','BsmtCond']=3\n    base.loc[base.BsmtCond=='Po','BsmtCond']=4\n    base.loc[base.BsmtCond=='Ex','BsmtCond']=5\n #   base['BsmtCond']=base['BsmtCond'].astype(str).astype(int)\n\n    base.loc[base.BsmtExposure=='Av','BsmtExposure']=1\n    base.loc[base.BsmtExposure=='Mn','BsmtExposure']=2\n    base.loc[base.BsmtExposure=='No','BsmtExposure']=3\n    base.loc[base.BsmtExposure=='Gd','BsmtExposure']=4\n  #  base['BsmtExposure']=base['BsmtExposure'].astype(str).astype(int)\n\n    base.loc[base.BsmtFinType1=='GLQ','BsmtFinType1']=6\n    base.loc[base.BsmtFinType1=='ALQ','BsmtFinType1']=1\n    base.loc[base.BsmtFinType1=='BLQ','BsmtFinType1']=2\n    base.loc[base.BsmtFinType1=='Rec','BsmtFinType1']=3\n    base.loc[base.BsmtFinType1=='LwQ','BsmtFinType1']=4\n    base.loc[base.BsmtFinType1=='Unf','BsmtFinType1']=5\n  #  base['BsmtFinType1']=base['BsmtFinType1'].astype(str).astype(int)\n\n    base.loc[base.BsmtFinType2=='GLQ','BsmtFinType2']=6\n    base.loc[base.BsmtFinType2=='ALQ','BsmtFinType2']=1\n    base.loc[base.BsmtFinType2=='BLQ','BsmtFinType2']=2\n    base.loc[base.BsmtFinType2=='Rec','BsmtFinType2']=3\n    base.loc[base.BsmtFinType2=='LwQ','BsmtFinType2']=4\n    base.loc[base.BsmtFinType2=='Unf','BsmtFinType2']=5\n #   base['BsmtFinType2']=base['BsmtFinType2'].astype(str).astype(int)\n\n    base.loc[base.Heating=='Floor','Heating']=6\n    base.loc[base.Heating=='GasA','Heating']=1\n    base.loc[base.Heating=='GasW','Heating']=2\n    base.loc[base.Heating=='Grav','Heating']=3\n    base.loc[base.Heating=='OthW','Heating']=4\n    base.loc[base.Heating=='Wall','Heating']=5\n #   base['Heating']=base['Heating'].astype(str).astype(int)\n\n    base.loc[base.HeatingQC=='Ex','HeatingQC']=5\n    base.loc[base.HeatingQC=='Gd','HeatingQC']=1\n    base.loc[base.HeatingQC=='TA','HeatingQC']=2\n    base.loc[base.HeatingQC=='Fa','HeatingQC']=3\n    base.loc[base.HeatingQC=='Po','HeatingQC']=4\n  #  base['HeatingQC']=base['HeatingQC'].astype(str).astype(int)\n\n    base.loc[base.CentralAir=='N','CentralAir']=2\n    base.loc[base.CentralAir=='Y','CentralAir']=1\n   # base['CentralAir']=base['CentralAir'].astype(str).astype(int)\n\n    base.loc[base.Electrical=='SBrkr','Electrical']=5\n    base.loc[base.Electrical=='FuseA','Electrical']=1\n    base.loc[base.Electrical=='FuseF','Electrical']=2\n    base.loc[base.Electrical=='FuseP','Electrical']=3\n    base.loc[base.Electrical=='Mix','Electrical']=4\n  #  base['Electrical']=base['Electrical'].astype(str).astype(int)\n\n    base.loc[base.KitchenQual=='Ex','KitchenQual']=5\n    base.loc[base.KitchenQual=='Gd','KitchenQual']=1\n    base.loc[base.KitchenQual=='TA','KitchenQual']=2\n    base.loc[base.KitchenQual=='Fa','KitchenQual']=3\n    base.loc[base.KitchenQual=='Po','KitchenQual']=4\n   # base['KitchenQual']=base['KitchenQual'].astype(str).astype(int)\n\n    base.loc[base.Functional=='Typ','Functional']=8\n    base.loc[base.Functional=='Min1','Functional']=1\n    base.loc[base.Functional=='Min2','Functional']=2\n    base.loc[base.Functional=='Mod','Functional']=3\n    base.loc[base.Functional=='Maj1','Functional']=4\n    base.loc[base.Functional=='Maj2','Functional']=5\n    base.loc[base.Functional=='Sev','Functional']=6\n    base.loc[base.Functional=='Sal','Functional']=7\n  #  base['Functional']=base['Functional'].astype(str).astype(int)\n\n\n    base.loc[base.FireplaceQu=='Ex','FireplaceQu']=6\n    base.loc[base.FireplaceQu=='Gd','FireplaceQu']=1\n    base.loc[base.FireplaceQu=='TA','FireplaceQu']=2\n    base.loc[base.FireplaceQu=='Fa','FireplaceQu']=3\n    base.loc[base.FireplaceQu=='Po','FireplaceQu']=4\n    base.loc[base.FireplaceQu=='NA','FireplaceQu']=5\n  #  base['FireplaceQu']=base['FireplaceQu'].astype(str).astype(int)\n\n    base.loc[base.GarageType=='2Types','GarageType']=6\n    base.loc[base.GarageType=='Attchd','GarageType']=1\n    base.loc[base.GarageType=='Basment','GarageType']=2\n    base.loc[base.GarageType=='BuiltIn','GarageType']=3\n    base.loc[base.GarageType=='CarPort','GarageType']=4\n    base.loc[base.GarageType=='Detchd','GarageType']=5\n  #  base['GarageType']=base['GarageType'].astype(str).astype(int)\n    \n    base.loc[base.GarageFinish=='Fin','GarageFinish']=3\n    base.loc[base.GarageFinish=='RFn','GarageFinish']=1\n    base.loc[base.GarageFinish=='Unf','GarageFinish']=2\n   # base['GarageFinish']=base['GarageFinish'].astype(str).astype(int)\n\n    base.loc[base.GarageQual=='Ex','GarageQual']=5\n    base.loc[base.GarageQual=='Gd','GarageQual']=1\n    base.loc[base.GarageQual=='TA','GarageQual']=2\n    base.loc[base.GarageQual=='Fa','GarageQual']=3\n    base.loc[base.GarageQual=='Po','GarageQual']=4\n  #  base['GarageQual']=base['GarageQual'].astype(str).astype(int)\n\n    base.loc[base.GarageCond=='Ex','GarageCond']=5\n    base.loc[base.GarageCond=='Gd','GarageCond']=1\n    base.loc[base.GarageCond=='TA','GarageCond']=2\n    base.loc[base.GarageCond=='Fa','GarageCond']=3\n    base.loc[base.GarageCond=='Po','GarageCond']=4\n  #  base['GarageCond']=base['GarageCond'].astype(str).astype(int)\n\n    base.loc[base.PavedDrive=='Y','PavedDrive']=3\n    base.loc[base.PavedDrive=='P','PavedDrive']=1\n    base.loc[base.PavedDrive=='N','PavedDrive']=2\n  #  base['PavedDrive']=base['PavedDrive'].astype(str).astype(int)\n#\n    base.loc[base.PoolQC=='Ex','PoolQC']=5\n    base.loc[base.PoolQC=='Gd','PoolQC']=1\n    base.loc[base.PoolQC=='TA','PoolQC']=2\n    base.loc[base.PoolQC=='Fa','PoolQC']=3\n    base.loc[base.PoolQC=='Po','PoolQC']=4\n  #  base['PoolQC']=base['PoolQC'].astype(str).astype(int)\n\n    base.loc[base.Fence=='GdPrv','Fence']=4\n    base.loc[base.Fence=='MnPrv','Fence']=1\n    base.loc[base.Fence=='GdWo','Fence']=2\n    base.loc[base.Fence=='MnWw','Fence']=3\n  #  base['Fence']=base['Fence'].astype(str).astype(int)\n\n    base.loc[base.MiscFeature=='Elev','MiscFeature']=5\n    base.loc[base.MiscFeature=='Gar2','MiscFeature']=1\n    base.loc[base.MiscFeature=='Gar2','MiscFeature']=2\n    base.loc[base.MiscFeature=='Shed','MiscFeature']=3\n    base.loc[base.MiscFeature=='TenC','MiscFeature']=4\n    base.loc[base.MiscFeature=='Othr','MiscFeature']=6\n  #  base['MiscFeature']=base['MiscFeature'].astype(str).astype(int)\n\n    base.loc[base.SaleType=='WD','SaleType']=10\n    base.loc[base.SaleType=='CWD','SaleType']=1\n    base.loc[base.SaleType=='VWD','SaleType']=2\n    base.loc[base.SaleType=='New','SaleType']=3\n    base.loc[base.SaleType=='COD','SaleType']=4\n    base.loc[base.SaleType=='Con','SaleType']=5\n    base.loc[base.SaleType=='ConLw','SaleType']=6\n    base.loc[base.SaleType=='ConLI','SaleType']=7\n    base.loc[base.SaleType=='ConLD','SaleType']=8\n    base.loc[base.SaleType=='Oth','SaleType']=9\n  #  base['SaleType']=base['SaleType'].astype(str).astype(int)\n\n    base.loc[base.SaleCondition=='Normal','SaleCondition']=6\n    base.loc[base.SaleCondition=='Abnorml','SaleCondition']=1\n    base.loc[base.SaleCondition=='AdjLand','SaleCondition']=2\n    base.loc[base.SaleCondition=='Alloca','SaleCondition']=3\n    base.loc[base.SaleCondition=='Family','SaleCondition']=4\n    base.loc[base.SaleCondition=='Partial','SaleCondition']=5\n   # base['SaleCondition']=base['SaleCondition'].astype(str).astype(int)\n    \n    return base","9a90b3c4":"#em primeiro momento essa fun\u00e7\u00e3o transforma todas string para um valor inteiro\ndef one_hot_encoding(df):   \n    #valores categoricos faltantes foram convertidos em MISS\n    #valores numericos faltantes foram convertidos em 0\n    df.MSZoning.fillna('Miss',inplace=True)\n    df.LotFrontage.fillna(0,inplace=True)\n    df.Alley.fillna('Miss',inplace=True)\n    df.MasVnrType.fillna('Miss',inplace=True)\n    df.MasVnrArea.fillna(0,inplace=True)\n    df.BsmtQual.fillna('Miss',inplace=True)\n    df.BsmtCond.fillna('Miss',inplace=True)\n    df.BsmtExposure.fillna('Miss',inplace=True)\n    df.BsmtFinType1.fillna('Miss',inplace=True)\n    df.BsmtFinType2.fillna('Miss',inplace=True)\n    df.Electrical.fillna('Miss',inplace=True)\n    df.FireplaceQu.fillna('Miss',inplace=True)\n    df.GarageType.fillna('Miss',inplace=True)\n    df.GarageYrBlt.fillna(0,inplace=True)\n    df.GarageFinish.fillna('Miss',inplace=True)\n    df.PoolQC.fillna('Miss',inplace=True)\n    df.Fence.fillna('Miss',inplace=True)\n    df.MiscFeature.fillna('Miss',inplace=True) \n    \n    \n    df.SaleType.fillna('WD',inplace=True)  \n    df.GarageCars.fillna(0,inplace=True)  \n    df.GarageArea.fillna(0,inplace=True)  \n    df.KitchenQual.fillna('TA',inplace=True)  ##\n    df.Functional.fillna('Typ',inplace=True) \n    df.BsmtFullBath.fillna(0,inplace=True)  \n    df.BsmtHalfBath.fillna(0,inplace=True) \n    \n    df_ohe = pd.concat([df[['MSSubClass','LotFrontage','LotArea','OverallQual',\n                           'OverallCond','YearBuilt','YearRemodAdd','MasVnrArea',\n                          'BsmtFinSF1','BsmtFinSF2','BsmtUnfSF','TotalBsmtSF',\n                          '1stFlrSF','2ndFlrSF','LowQualFinSF','GrLivArea','BsmtFullBath',\n                          'BsmtHalfBath','FullBath','HalfBath','BedroomAbvGr','KitchenAbvGr',\n                           'TotRmsAbvGrd','Fireplaces','GarageYrBlt','GarageCars','GarageArea',\n                          'WoodDeckSF','OpenPorchSF','EnclosedPorch','3SsnPorch','ScreenPorch',\n                          'PoolArea','MiscVal','MoSold','YrSold']],\n                       pd.get_dummies(df[['MSZoning','Street','Alley','LandSlope',\n                                        'LotShape','LandContour','Utilities','LotConfig',\n                                         'Neighborhood','Condition1','Condition2','BldgType',\n                                         'HouseStyle','RoofStyle','RoofMatl','Exterior1st',\n                                         'Exterior2nd','MasVnrType','ExterQual','ExterCond',\n                                         'Foundation','BsmtQual','BsmtCond','BsmtExposure',\n                                         'BsmtFinType1','BsmtFinType2','Heating', 'HeatingQC',\n                                         'CentralAir', 'Electrical', 'KitchenQual', 'Functional',\n                                         'FireplaceQu', 'GarageType', 'GarageFinish','GarageQual',\n                                         'GarageCond','PavedDrive','PoolQC','Fence','MiscFeature',\n                                         'SaleType','SaleCondition']],drop_first=True)],axis=1)\n    \n    \n    return df_ohe","5a5caa3d":"def encoding_hybrid(base):   \n    #replace transforma todos os elementos vazios contidos no \n    #corpus para o valor 0\n    base.replace(np.nan, 0, inplace=True)\n    \n    base.loc[base.MSZoning=='A','MSZoning']=1\n    base.loc[base.MSZoning=='C (all)','MSZoning']=2\n    base.loc[base.MSZoning=='C','MSZoning']=2\n    base.loc[base.MSZoning=='FV','MSZoning']=3\n    base.loc[base.MSZoning=='I','MSZoning']=4\n    base.loc[base.MSZoning=='RH','MSZoning']=5\n    base.loc[base.MSZoning=='RL','MSZoning']=6\n    base.loc[base.MSZoning=='RP','MSZoning']=7\n    base.loc[base.MSZoning=='RM','MSZoning']=8\n    base['MSZoning']=base['MSZoning'].astype(str).astype(int)\n    \n    base.loc[base.LotFrontage=='NA','LotFrontage']=0\n    #base['LotFrontage']=base['LotFrontage'].astype(str).astype(int)\n        \n    #base.loc[base.Street=='NA','Street']=0\n   # base.loc[base.Street=='Grvl','Street']=1\n   # base.loc[base.Street=='Pave','Street']=2\n   # base['Street']=base['Street'].astype(str).astype(int)\n\n   # base.loc[base.Alley== \"NA\",'Alley']=0\n   # base.loc[base.Alley=='Grvl','Alley']=1\n   # base.loc[base.Alley=='Pave','Alley']=2\n   # base['Alley']=base['Alley'].astype(str).astype(int)\n\n   # base.loc[base.LotShape=='Reg','LotShape']=4\n  #  base.loc[base.LotShape=='IR1','LotShape']=1\n   # base.loc[base.LotShape=='IR2','LotShape']=2\n   # base.loc[base.LotShape=='IR3','LotShape']=3\n    #base['LotShape']=base['LotShape'].astype(str).astype(int)\n\n  #  base.loc[base.LandContour=='Lvl','LandContour']=4\n  #  base.loc[base.LandContour=='Bnk','LandContour']=1\n  #  base.loc[base.LandContour=='HLS','LandContour']=2\n  #  base.loc[base.LandContour=='Low','LandContour']=3\n  #  base['LandContour']=base['LandContour'].astype(str).astype(int)\n\n  #  base.loc[base.Utilities=='AllPub','Utilities']=4\n  #  base.loc[base.Utilities=='NoSewr','Utilities']=1\n  #  base.loc[base.Utilities=='NoSeWa','Utilities']=2\n  #  base.loc[base.Utilities=='ELO','Utilities']=3\n  #  base['Utilities']=base['Utilities'].astype(str).astype(int)\n\n    base.loc[base.LotConfig=='Inside','LotConfig']=5\n    base.loc[base.LotConfig=='Corner','LotConfig']=1\n    base.loc[base.LotConfig=='CulDSac','LotConfig']=2\n    base.loc[base.LotConfig=='FR2','LotConfig']=3\n    base.loc[base.LotConfig=='FR3','LotConfig']=4\n    base['LotConfig']=base['LotConfig'].astype(str).astype(int)\n\n  #  base.loc[base.LandSlope=='Gtl','LandSlope']=3\n  #  base.loc[base.LandSlope=='Mod','LandSlope']=1\n  #  base.loc[base.LandSlope=='Sev','LandSlope']=2\n  #  base['LandSlope']=base['LandSlope'].astype(str).astype(int)\n\n    base.loc[base.Neighborhood=='Blmngtn','Neighborhood']=25\n    base.loc[base.Neighborhood=='Blueste','Neighborhood']=1\n    base.loc[base.Neighborhood=='BrDale','Neighborhood']=2\n    base.loc[base.Neighborhood=='BrkSide','Neighborhood']=3\n    base.loc[base.Neighborhood=='ClearCr','Neighborhood']=4\n    base.loc[base.Neighborhood=='CollgCr','Neighborhood']=5\n    base.loc[base.Neighborhood=='Crawfor','Neighborhood']=6\n    base.loc[base.Neighborhood=='Edwards','Neighborhood']=7\n    base.loc[base.Neighborhood=='Gilbert','Neighborhood']=8\n    base.loc[base.Neighborhood=='IDOTRR','Neighborhood']=9\n    base.loc[base.Neighborhood=='MeadowV','Neighborhood']=10\n    base.loc[base.Neighborhood=='Mitchel','Neighborhood']=11\n    base.loc[base.Neighborhood=='NAmes','Neighborhood']=12\n    base.loc[base.Neighborhood=='NoRidge','Neighborhood']=13\n    base.loc[base.Neighborhood=='NPkVill','Neighborhood']=14\n    base.loc[base.Neighborhood=='NridgHt','Neighborhood']=15\n    base.loc[base.Neighborhood=='NWAmes','Neighborhood']=16\n    base.loc[base.Neighborhood=='OldTown','Neighborhood']=17\n    base.loc[base.Neighborhood=='SWISU','Neighborhood']=18\n    base.loc[base.Neighborhood=='Sawyer','Neighborhood']=19\n    base.loc[base.Neighborhood=='SawyerW','Neighborhood']=20\n    base.loc[base.Neighborhood=='Somerst','Neighborhood']=21\n    base.loc[base.Neighborhood=='StoneBr','Neighborhood']=22\n    base.loc[base.Neighborhood=='Timber','Neighborhood']=23\n    base.loc[base.Neighborhood=='Veenker','Neighborhood']=24\n    base['Neighborhood']=base['Neighborhood'].astype(str).astype(int)\n\n    base.loc[base.Condition1=='Artery','Condition1']=9\n    base.loc[base.Condition1=='Feedr','Condition1']=1\n    base.loc[base.Condition1=='Norm','Condition1']=2\n    base.loc[base.Condition1=='RRNn','Condition1']=3\n    base.loc[base.Condition1=='RRAn','Condition1']=4\n    base.loc[base.Condition1=='PosN','Condition1']=5\n    base.loc[base.Condition1=='PosA','Condition1']=6\n    base.loc[base.Condition1=='RRNe','Condition1']=7\n    base.loc[base.Condition1=='RRAe','Condition1']=8\n    base['Condition1']=base['Condition1'].astype(str).astype(int)\n\n    base.loc[base.Condition2=='Artery','Condition2']=9\n    base.loc[base.Condition2=='Feedr','Condition2']=1\n    base.loc[base.Condition2=='Norm','Condition2']=2\n    base.loc[base.Condition2=='RRNn','Condition2']=3\n    base.loc[base.Condition2=='RRAn','Condition2']=4\n    base.loc[base.Condition2=='PosN','Condition2']=5\n    base.loc[base.Condition2=='PosA','Condition2']=6\n    base.loc[base.Condition2=='RRNe','Condition2']=7\n    base.loc[base.Condition2=='RRAe','Condition2']=8\n    base['Condition2']=base['Condition2'].astype(str).astype(int)\n\n    #dar uma olhada no tipo TWNHS\n    base.loc[base.BldgType=='1Fam','BldgType']=5\n    base.loc[base.BldgType=='2fmCon','BldgType']=1\n    base.loc[base.BldgType=='Duplex','BldgType']=2\n    base.loc[base.BldgType=='TwnhsE','BldgType']=3\n    base.loc[base.BldgType=='TwnhsI','BldgType']=4\n    base.loc[base.BldgType=='Twnhs','BldgType']=4\n    base['BldgType']=base['BldgType'].astype(str).astype(int)\n\n    base.loc[base.HouseStyle=='1Story','HouseStyle']=8\n    base.loc[base.HouseStyle=='1.5Fin','HouseStyle']=1\n    base.loc[base.HouseStyle=='1.5Unf','HouseStyle']=2\n    base.loc[base.HouseStyle=='2Story','HouseStyle']=3\n    base.loc[base.HouseStyle=='2.5Fin','HouseStyle']=4\n    base.loc[base.HouseStyle=='2.5Unf','HouseStyle']=5\n    base.loc[base.HouseStyle=='SFoyer','HouseStyle']=6\n    base.loc[base.HouseStyle=='SLvl','HouseStyle']=7\n    base['HouseStyle']=base['HouseStyle'].astype(str).astype(int)\n\n    base.loc[base.RoofStyle=='Flat','RoofStyle']=6\n    base.loc[base.RoofStyle=='Gable','RoofStyle']=1\n    base.loc[base.RoofStyle=='Gambrel','RoofStyle']=2\n    base.loc[base.RoofStyle=='Hip','RoofStyle']=3\n    base.loc[base.RoofStyle=='Mansard','RoofStyle']=4\n    base.loc[base.RoofStyle=='Shed','RoofStyle']=5\n    base['RoofStyle']=base['RoofStyle'].astype(str).astype(int)\n\n    base.loc[base.RoofMatl=='ClyTile','RoofMatl']=8\n    base.loc[base.RoofMatl=='CompShg','RoofMatl']=1\n    base.loc[base.RoofMatl=='Membran','RoofMatl']=2\n    base.loc[base.RoofMatl=='Metal','RoofMatl']=3\n    base.loc[base.RoofMatl=='Roll','RoofMatl']=4\n    base.loc[base.RoofMatl=='Tar&Grv','RoofMatl']=5\n    base.loc[base.RoofMatl=='WdShake','RoofMatl']=6\n    base.loc[base.RoofMatl=='WdShngl','RoofMatl']=7\n    base['RoofMatl']=base['RoofMatl'].astype(str).astype(int)\n\n    #aqui tamb\u00e9m ocorrem bizarrises como Cemnt e cment\n    base.loc[base.Exterior1st=='AsbShng','Exterior1st']=17\n    base.loc[base.Exterior1st=='AsphShn','Exterior1st']=1\n    base.loc[base.Exterior1st=='BrkComm','Exterior1st']=2\n    base.loc[base.Exterior1st=='Brk Cmn','Exterior1st']=2\n    base.loc[base.Exterior1st=='BrkFace','Exterior1st']=3\n    base.loc[base.Exterior1st=='CBlock','Exterior1st']=4\n    base.loc[base.Exterior1st=='CemntBd','Exterior1st']=5\n    base.loc[base.Exterior1st=='CmentBd','Exterior1st']=5\n    base.loc[base.Exterior1st=='HdBoard','Exterior1st']=6\n    base.loc[base.Exterior1st=='ImStucc','Exterior1st']=7\n    base.loc[base.Exterior1st=='MetalSd','Exterior1st']=8\n    base.loc[base.Exterior1st=='Other','Exterior1st']=9\n    base.loc[base.Exterior1st=='Plywood','Exterior1st']=10\n    base.loc[base.Exterior1st=='PreCast','Exterior1st']=11\n    base.loc[base.Exterior1st=='Stone','Exterior1st']=12\n    base.loc[base.Exterior1st=='Stucco','Exterior1st']=13\n    base.loc[base.Exterior1st=='VinylSd','Exterior1st']=14\n    base.loc[base.Exterior1st=='Wd Sdng','Exterior1st']=15\n    base.loc[base.Exterior1st=='WdShing','Exterior1st']=16\n    base['Exterior1st']=base['Exterior1st'].astype(str).astype(int)\n\n    base.loc[base.Exterior2nd=='AsbShng','Exterior2nd']=17\n    base.loc[base.Exterior2nd=='AsphShn','Exterior2nd']=1\n    base.loc[base.Exterior2nd=='BrkComm','Exterior2nd']=2\n    base.loc[base.Exterior2nd=='Brk Cmn','Exterior2nd']=2\n    base.loc[base.Exterior2nd=='BrkFace','Exterior2nd']=3\n    base.loc[base.Exterior2nd=='CBlock','Exterior2nd']=4\n    base.loc[base.Exterior2nd=='CemntBd','Exterior2nd']=5\n    base.loc[base.Exterior2nd=='CmentBd','Exterior2nd']=5\n    base.loc[base.Exterior2nd=='HdBoard','Exterior2nd']=6\n    base.loc[base.Exterior2nd=='ImStucc','Exterior2nd']=7\n    base.loc[base.Exterior2nd=='MetalSd','Exterior2nd']=8\n    base.loc[base.Exterior2nd=='Other','Exterior2nd']=9\n    base.loc[base.Exterior2nd=='Plywood','Exterior2nd']=10\n    base.loc[base.Exterior2nd=='PreCast','Exterior2nd']=11\n    base.loc[base.Exterior2nd=='Stone','Exterior2nd']=12\n    base.loc[base.Exterior2nd=='Stucco','Exterior2nd']=13\n    base.loc[base.Exterior2nd=='VinylSd','Exterior2nd']=14\n    base.loc[base.Exterior2nd=='Wd Sdng','Exterior2nd']=15\n    base.loc[base.Exterior2nd=='Wd Shng','Exterior2nd']=15\n    base.loc[base.Exterior2nd=='WdShing','Exterior2nd']=16\n    base['Exterior2nd']=base['Exterior2nd'].astype(str).astype(int)\n\n    base.loc[base.MasVnrType=='BrkCmn','MasVnrType']=5\n    base.loc[base.MasVnrType=='BrkFace','MasVnrType']=1\n    base.loc[base.MasVnrType=='CBlock','MasVnrType']=2\n    base.loc[base.MasVnrType=='None','MasVnrType']=3\n    base.loc[base.MasVnrType=='Stone','MasVnrType']=4\n    base['MasVnrType']=base['MasVnrType'].astype(str).astype(int)\n\n    base.loc[base.ExterQual=='Ex','ExterQual']=5\n    base.loc[base.ExterQual=='Gd','ExterQual']=1\n    base.loc[base.ExterQual=='TA','ExterQual']=2\n    base.loc[base.ExterQual=='Fa','ExterQual']=3\n    base.loc[base.ExterQual=='Po','ExterQual']=4\n    base['ExterQual']=base['ExterQual'].astype(str).astype(int)\n\n    base.loc[base.ExterCond=='Ex','ExterCond']=5\n    base.loc[base.ExterCond=='Gd','ExterCond']=1\n    base.loc[base.ExterCond=='TA','ExterCond']=2\n    base.loc[base.ExterCond=='Fa','ExterCond']=3\n    base.loc[base.ExterCond=='Po','ExterCond']=4\n    base['ExterCond']=base['ExterCond'].astype(str).astype(int)\n\n    base.loc[base.Foundation=='BrkTil','Foundation']=6\n    base.loc[base.Foundation=='CBlock','Foundation']=1\n    base.loc[base.Foundation=='PConc','Foundation']=2\n    base.loc[base.Foundation=='Slab','Foundation']=3\n    base.loc[base.Foundation=='Stone','Foundation']=4\n    base.loc[base.Foundation=='Wood','Foundation']=5\n    base['Foundation']=base['Foundation'].astype(str).astype(int)\n\n    base.loc[base.BsmtQual=='Gd','BsmtQual']=1\n    base.loc[base.BsmtQual=='TA','BsmtQual']=2\n    base.loc[base.BsmtQual=='Fa','BsmtQual']=3\n    base.loc[base.BsmtQual=='Po','BsmtQual']=4\n    base.loc[base.BsmtQual=='Ex','BsmtQual']=5\n    base['BsmtQual']=base['BsmtQual'].astype(str).astype(int)\n\n    base.loc[base.BsmtCond=='Gd','BsmtCond']=1\n    base.loc[base.BsmtCond=='TA','BsmtCond']=2\n    base.loc[base.BsmtCond=='Fa','BsmtCond']=3\n    base.loc[base.BsmtCond=='Po','BsmtCond']=4\n    base.loc[base.BsmtCond=='Ex','BsmtCond']=5\n    base['BsmtCond']=base['BsmtCond'].astype(str).astype(int)\n\n    base.loc[base.BsmtExposure=='Av','BsmtExposure']=1\n    base.loc[base.BsmtExposure=='Mn','BsmtExposure']=2\n    base.loc[base.BsmtExposure=='No','BsmtExposure']=3\n    base.loc[base.BsmtExposure=='Gd','BsmtExposure']=4\n    base['BsmtExposure']=base['BsmtExposure'].astype(str).astype(int)\n\n    base.loc[base.BsmtFinType1=='GLQ','BsmtFinType1']=6\n    base.loc[base.BsmtFinType1=='ALQ','BsmtFinType1']=1\n    base.loc[base.BsmtFinType1=='BLQ','BsmtFinType1']=2\n    base.loc[base.BsmtFinType1=='Rec','BsmtFinType1']=3\n    base.loc[base.BsmtFinType1=='LwQ','BsmtFinType1']=4\n    base.loc[base.BsmtFinType1=='Unf','BsmtFinType1']=5\n    base['BsmtFinType1']=base['BsmtFinType1'].astype(str).astype(int)\n\n    base.loc[base.BsmtFinType2=='GLQ','BsmtFinType2']=6\n    base.loc[base.BsmtFinType2=='ALQ','BsmtFinType2']=1\n    base.loc[base.BsmtFinType2=='BLQ','BsmtFinType2']=2\n    base.loc[base.BsmtFinType2=='Rec','BsmtFinType2']=3\n    base.loc[base.BsmtFinType2=='LwQ','BsmtFinType2']=4\n    base.loc[base.BsmtFinType2=='Unf','BsmtFinType2']=5\n    base['BsmtFinType2']=base['BsmtFinType2'].astype(str).astype(int)\n\n    base.loc[base.Heating=='Floor','Heating']=6\n    base.loc[base.Heating=='GasA','Heating']=1\n    base.loc[base.Heating=='GasW','Heating']=2\n    base.loc[base.Heating=='Grav','Heating']=3\n    base.loc[base.Heating=='OthW','Heating']=4\n    base.loc[base.Heating=='Wall','Heating']=5\n    base['Heating']=base['Heating'].astype(str).astype(int)\n\n    base.loc[base.HeatingQC=='Ex','HeatingQC']=5\n    base.loc[base.HeatingQC=='Gd','HeatingQC']=1\n    base.loc[base.HeatingQC=='TA','HeatingQC']=2\n    base.loc[base.HeatingQC=='Fa','HeatingQC']=3\n    base.loc[base.HeatingQC=='Po','HeatingQC']=4\n    base['HeatingQC']=base['HeatingQC'].astype(str).astype(int)\n\n   # base.loc[base.CentralAir=='N','CentralAir']=2\n   # base.loc[base.CentralAir=='Y','CentralAir']=1\n   # base['CentralAir']=base['CentralAir'].astype(str).astype(int)\n\n    base.loc[base.Electrical=='SBrkr','Electrical']=5\n    base.loc[base.Electrical=='FuseA','Electrical']=1\n    base.loc[base.Electrical=='FuseF','Electrical']=2\n    base.loc[base.Electrical=='FuseP','Electrical']=3\n    base.loc[base.Electrical=='Mix','Electrical']=4\n    base['Electrical']=base['Electrical'].astype(str).astype(int)\n\n    base.loc[base.KitchenQual=='Ex','KitchenQual']=5\n    base.loc[base.KitchenQual=='Gd','KitchenQual']=1\n    base.loc[base.KitchenQual=='TA','KitchenQual']=2\n    base.loc[base.KitchenQual=='Fa','KitchenQual']=3\n    base.loc[base.KitchenQual=='Po','KitchenQual']=4\n    base['KitchenQual']=base['KitchenQual'].astype(str).astype(int)\n\n    base.loc[base.Functional=='Typ','Functional']=8\n    base.loc[base.Functional=='Min1','Functional']=1\n    base.loc[base.Functional=='Min2','Functional']=2\n    base.loc[base.Functional=='Mod','Functional']=3\n    base.loc[base.Functional=='Maj1','Functional']=4\n    base.loc[base.Functional=='Maj2','Functional']=5\n    base.loc[base.Functional=='Sev','Functional']=6\n    base.loc[base.Functional=='Sal','Functional']=7\n    base['Functional']=base['Functional'].astype(str).astype(int)\n\n\n    base.loc[base.FireplaceQu=='Ex','FireplaceQu']=6\n    base.loc[base.FireplaceQu=='Gd','FireplaceQu']=1\n    base.loc[base.FireplaceQu=='TA','FireplaceQu']=2\n    base.loc[base.FireplaceQu=='Fa','FireplaceQu']=3\n    base.loc[base.FireplaceQu=='Po','FireplaceQu']=4\n    base.loc[base.FireplaceQu=='NA','FireplaceQu']=5\n    base['FireplaceQu']=base['FireplaceQu'].astype(str).astype(int)\n\n    base.loc[base.GarageType=='2Types','GarageType']=6\n    base.loc[base.GarageType=='Attchd','GarageType']=1\n    base.loc[base.GarageType=='Basment','GarageType']=2\n    base.loc[base.GarageType=='BuiltIn','GarageType']=3\n    base.loc[base.GarageType=='CarPort','GarageType']=4\n    base.loc[base.GarageType=='Detchd','GarageType']=5\n    base['GarageType']=base['GarageType'].astype(str).astype(int)\n    \n  #  base.loc[base.GarageFinish=='Fin','GarageFinish']=3\n  #  base.loc[base.GarageFinish=='RFn','GarageFinish']=1\n  #  base.loc[base.GarageFinish=='Unf','GarageFinish']=2\n  #  base['GarageFinish']=base['GarageFinish'].astype(str).astype(int)\n\n    base.loc[base.GarageQual=='Ex','GarageQual']=5\n    base.loc[base.GarageQual=='Gd','GarageQual']=1\n    base.loc[base.GarageQual=='TA','GarageQual']=2\n    base.loc[base.GarageQual=='Fa','GarageQual']=3\n    base.loc[base.GarageQual=='Po','GarageQual']=4\n    base['GarageQual']=base['GarageQual'].astype(str).astype(int)\n\n    base.loc[base.GarageCond=='Ex','GarageCond']=5\n    base.loc[base.GarageCond=='Gd','GarageCond']=1\n    base.loc[base.GarageCond=='TA','GarageCond']=2\n    base.loc[base.GarageCond=='Fa','GarageCond']=3\n    base.loc[base.GarageCond=='Po','GarageCond']=4\n    base['GarageCond']=base['GarageCond'].astype(str).astype(int)\n\n #   base.loc[base.PavedDrive=='Y','PavedDrive']=3\n #   base.loc[base.PavedDrive=='P','PavedDrive']=1\n #   base.loc[base.PavedDrive=='N','PavedDrive']=2\n #   base['PavedDrive']=base['PavedDrive'].astype(str).astype(int)\n\n    base.loc[base.PoolQC=='Ex','PoolQC']=5\n    base.loc[base.PoolQC=='Gd','PoolQC']=1\n    base.loc[base.PoolQC=='TA','PoolQC']=2\n    base.loc[base.PoolQC=='Fa','PoolQC']=3\n    base.loc[base.PoolQC=='Po','PoolQC']=4\n    base['PoolQC']=base['PoolQC'].astype(str).astype(int)\n\n  #  base.loc[base.Fence=='GdPrv','Fence']=4\n   # base.loc[base.Fence=='MnPrv','Fence']=1\n  #  base.loc[base.Fence=='GdWo','Fence']=2\n  #  base.loc[base.Fence=='MnWw','Fence']=3\n   # base['Fence']=base['Fence'].astype(str).astype(int)\n\n    base.loc[base.MiscFeature=='Elev','MiscFeature']=5\n    base.loc[base.MiscFeature=='Gar2','MiscFeature']=1\n    base.loc[base.MiscFeature=='Gar2','MiscFeature']=2\n    base.loc[base.MiscFeature=='Shed','MiscFeature']=3\n    base.loc[base.MiscFeature=='TenC','MiscFeature']=4\n    base.loc[base.MiscFeature=='Othr','MiscFeature']=6\n    base['MiscFeature']=base['MiscFeature'].astype(str).astype(int)\n\n    base.loc[base.SaleType=='WD','SaleType']=10\n    base.loc[base.SaleType=='CWD','SaleType']=1\n    base.loc[base.SaleType=='VWD','SaleType']=2\n    base.loc[base.SaleType=='New','SaleType']=3\n    base.loc[base.SaleType=='COD','SaleType']=4\n    base.loc[base.SaleType=='Con','SaleType']=5\n    base.loc[base.SaleType=='ConLw','SaleType']=6\n    base.loc[base.SaleType=='ConLI','SaleType']=7\n    base.loc[base.SaleType=='ConLD','SaleType']=8\n    base.loc[base.SaleType=='Oth','SaleType']=9\n    base['SaleType']=base['SaleType'].astype(str).astype(int)\n\n    base.loc[base.SaleCondition=='Normal','SaleCondition']=6\n    base.loc[base.SaleCondition=='Abnorml','SaleCondition']=1\n    base.loc[base.SaleCondition=='AdjLand','SaleCondition']=2\n    base.loc[base.SaleCondition=='Alloca','SaleCondition']=3\n    base.loc[base.SaleCondition=='Family','SaleCondition']=4\n    base.loc[base.SaleCondition=='Partial','SaleCondition']=5\n    base['SaleCondition']=base['SaleCondition'].astype(str).astype(int)\n    \n    df=base\n    df_ohe = pd.concat([df[['Id','MSZoning','MSSubClass','LotFrontage','LotArea','OverallQual',\n                           'OverallCond','YearBuilt','YearRemodAdd','MasVnrArea',\n                          'BsmtFinSF1','BsmtFinSF2','BsmtUnfSF','TotalBsmtSF',\n                          '1stFlrSF','2ndFlrSF','LowQualFinSF','GrLivArea','BsmtFullBath',\n                          'BsmtHalfBath','FullBath','HalfBath','BedroomAbvGr','KitchenAbvGr',\n                           'TotRmsAbvGrd','Fireplaces','GarageYrBlt','GarageCars','GarageArea',\n                          'WoodDeckSF','OpenPorchSF','EnclosedPorch','3SsnPorch','ScreenPorch',\n                          'PoolArea','MiscVal','MoSold','YrSold','SalePrice',\n                                        'LotConfig',\n                                         'Neighborhood','Condition1','Condition2','BldgType',\n                                         'HouseStyle','RoofStyle','RoofMatl','Exterior1st',\n                                         'Exterior2nd','MasVnrType','ExterQual','ExterCond',\n                                         'Foundation','BsmtQual','BsmtCond','BsmtExposure',\n                                         'BsmtFinType1','BsmtFinType2','Heating', 'HeatingQC',\n                                         'Electrical', 'KitchenQual', 'Functional',\n                                         'FireplaceQu', 'GarageType', 'GarageQual',\n                                         'GarageCond','PoolQC','MiscFeature',\n                                         'SaleType','SaleCondition']],\n                       pd.get_dummies(df[['Street','Alley','LotShape','LandSlope','Fence',\n                                         'LandContour','Utilities','CentralAir','GarageFinish',\n                                         'PavedDrive',]],drop_first=True)],axis=1)\n    \n    \n    return df_ohe","bc3b48d6":"x=corpus_treino\ny=corpus_treino['SalePrice']\ny=pd.DataFrame(y)","4848c4d9":"from sklearn.impute import KNNImputer\n\ndef inputdata(x):\n    #x.replace(np.nan, 0, inplace=True)\n    imputer = KNNImputer(n_neighbors = 5)\n    test = imputer.fit_transform(x) \n    x = pd.DataFrame(test,columns=x.columns)\n    return x","a7bdb4cb":"x=label_encoding(x)\nx = x.drop(['SalePrice','Id'],axis='columns')\nx = inputdata(x)","80e86241":"#esta fun\u00e7\u00e3o encontra os limites superiores e inferiores\n# e retorna o dataframe dentro dos limites\ndef boxplott(df,df_test,text):\n    #df=df.sort_values(text)\n    Q1=df[text].quantile(q=0.25)\n    Q3=df[text].quantile(q=0.75)\n    FIQ = Q3-Q1\n\n    LF = Q1 - 1.5 * FIQ\n    LS = Q3 + 1.5 * FIQ\n    \n    #print('LS : ', LS)\n    #print('LF : ', LF)\n    df_test.loc[df[text] > LS , text] = LS\n    df_test.loc[df[text] < LF , text] = LF\n    return df_test","d80a0c50":"def minimizarOutliders(df,df_test):\n    df_test = boxplott(df,df_test,'GarageYrBlt')\n    #df_test = boxplott(df,df_test,'YearBuilt')\n    df_test = boxplott(df,df_test,'YrSold')\n    df_test = boxplott(df,df_test,'YearRemodAdd')\n    df_test = boxplott(df,df_test,'WoodDeckSF')\n    df_test = boxplott(df,df_test,'LotArea')\n    df_test = boxplott(df,df_test,'GarageCars')\n    df_test = boxplott(df,df_test,'TotalBsmtSF')\n    #df = boxplott(df,'BsmtFinSF1')\n    #df = boxplott(df,'GrLivArea')\n    df_test = boxplott(df,df_test,'2ndFlrSF')\n    df_test = boxplott(df,df_test,'1stFlrSF')\n    df_test = boxplott(df,df_test,'LotFrontage')\n    df_test = boxplott(df,df_test,'MedNeighLotArea')\n    df_test = boxplott(df,df_test,'MedQualLivArea')\n    #df_test = boxplott(df,df_test,'lotarea_1stFlrSF')\n    #df = boxplott(df,'OpenPorchSF')\n    return df_test","96caf90f":"def values_log(x):\n    \n    x[\"MedNeighLotArea\"]=np.log(x['MedNeighLotArea']+1)\n    x['LotArea']=np.log(x['LotArea'])\n    x.LotFrontage = np.log(x['LotFrontage']+1)\n    x.TotalBsmtSF = np.log(x['TotalBsmtSF']+1)\n    x.TotalBsmtSF = np.log(x['2ndFlrSF']+1)\n    x.TotalBsmtSF = np.log(x['1stFlrSF']+1)\n    x.TotalBsmtSF = np.log(x['GarageArea']+1)\n    x.TotalBsmtSF = np.log(x['WoodDeckSF']+1)\n    #x['lotarea_1stFlrSF']=np.log(x['lotarea_1stFlrSF'])\n    #x.TotalBsmtSF = np.log(x['PoolArea']+1)\n    #x.TotalBsmtSF = np.log(x['GrLivArea']+1)\n    #x.TotalBsmtSF = np.log(x['BsmtFinSF1']+1)\n    #x.TotalBsmtSF = np.log(x['TotalBsmtSF']+1)\n    return x","4974b6c4":"def matematicsx(x):\n    \n    x[\"MedNeighLotArea\"] = x.groupby(\"Neighborhood\")[\"LotArea\"].transform(\"median\")\n    x[\"MedQualLivArea\"] = x.groupby(\"OverallQual\")[\"GrLivArea\"].transform(\"median\")\n    x[\"MedNeighLivArea\"] = x.groupby(\"Neighborhood\")[\"GrLivArea\"].transform(\"median\")\n    x['lotarea_area'] = x['EnclosedPorch'] + (x['3SsnPorch'])+ (x['ScreenPorch'])\n    x.loc[x['lotarea_area'] > 0 , 'lotarea_area'] = 1\n    \n    x['Bsm_Bath_bin'] = x['BsmtFullBath'] + (x['BsmtHalfBath'])\n    x.loc[x['Bsm_Bath_bin'] > 0 , 'Bsm_Bath_bin'] = 1\n\n    x['Bath_bin'] = x['HalfBath'] + (x['FullBath'])\n    x.loc[x['Bath_bin'] > 0 , 'Bath_bin'] = 1\n    \n    \n    x.loc[x['GarageCond'] != 2 , 'GarageCond'] = 1\n    \n    x.loc[x['MasVnrArea'] > 0 , 'MasVnrArea_bin'] = 1\n    x.loc[x['MiscVal'] > 0 , 'MiscVal_bin'] = 1\n    \n    x['Full_Bath_bin'] = x['Bsm_Bath_bin'] + (x['Bath_bin'])\n    x.loc[x['Full_Bath_bin'] > 0 , 'Full_Bath_bin'] = 1\n    \n    x.loc[x['HouseStyle'] == 2 , 'HouseStyle'] = 1\n    x.loc[x['HouseStyle'] == 3 , 'HouseStyle'] = 1\n    x.loc[x['HouseStyle'] == 4, 'HouseStyle'] = 2\n    x.loc[x['HouseStyle'] == 5 , 'HouseStyle'] = 2\n    x.loc[x['HouseStyle'] == 6 , 'HouseStyle'] = 2\n    x.loc[x['HouseStyle'] == 7 , 'HouseStyle'] = 3\n    x.loc[x['HouseStyle'] == 8 , 'HouseStyle'] = 3\n    \n    \n    #x['lotarea_1stFlrSF'] = x['LotArea'] - (x['1stFlrSF'])\n    #x['lotarea_area'] = x['LotArea'] - (x['TotalBsmtSF'])\n    #x['garage'] = x['GarageArea']\/x['GarageCars']\n    #x['total_bath'] = (x['TotalBsmtSF'])\/(x['TotRmsAbvGrd'])# + x['KitchenAbvGr'])\n    #x['total_TotalBsmtSF_Area'] = x['TotalBsmtSF']\/x['LotArea']\n    #x[\"GrLivAreaLotArea\"] = x.GrLivArea \/ x.LotArea\n    #x[\"MaXNeighCondition\"] = x.groupby(\"Neighborhood\")[\"SaleCondition\"].transform(\"median\")\n    #x[\"MaXCentralAirNeighborhood\"] = x.groupby(\"Neighborhood\")[\"CentralAir\"].transform(\"max\")\n    #x[\"MaXSaleTypeCentralAir\"] = x.groupby(\"SaleType\")[\"CentralAir\"].transform(\"max\")\n    #x[\"MaXCondition2\"] = x.groupby(\"Neighborhood\")[\"Condition2\"].transform(\"min\")\n    #x[\"MaXNeighCentralAirs\"] = x.groupby(\"MSSubClass\")[\"SaleCondition\"].transform(\"max\")\n    #x[\"MaXNeighAlley\"] = x.groupby(\"SaleCondition\")[\"CentralAir\"].transform(\"max\")\n    #x[\"MaXNeighAlleys\"] = x.groupby(\"CentralAir\")[\"MSSubClass\"].transform(\"max\")\n    #x[\"MaXNeighPool\"] = x.groupby(\"PoolQC\")[\"SaleType\"].transform(\"max\")\n    return x","ccb857f5":"def gerarCategoricos(df):\n    df = pd.get_dummies(df, columns=['HouseStyle'\n                             ])\n    return df","f029ff5a":"def removerColunas(df):\n    df = df.drop(['3SsnPorch',\n                  'YearBuilt',\n                  'PoolArea','ScreenPorch',\n                  'MiscFeature',\n                  'Heating',\n                  'Street',\n                  #'Utilities',\n                  'LowQualFinSF',\n                  #'Condition2',\n                  #'WoodDeckSF',\n                  'RoofMatl',\n                  \n                  'BsmtFinType1',\n                  'Electrical',\n                  'BsmtFinType2','OverallQual','LandSlope','Alley',\n                  'GarageQual','FireplaceQu','BldgType','Functional','KitchenQual','BsmtHalfBath'\n               ],axis='columns')\n    return df","2f0db62b":"x = matematicsx(x)\nx = minimizarOutliders(x,x)\nx = values_log(x)\nx = minimizarOutliders(x,x)\nx = gerarCategoricos(x)\nx =removerColunas(x)","2fdbaea8":"sns.histplot((y['SalePrice']), kde=True)\nprint(\"Log(SalePrice) skew: \", (y['SalePrice']).skew())","bcd1cda6":"\nboxplot = y.boxplot(column=['SalePrice'])","c75ad339":"\n#Separa\u00e7\u00e3o entre treino e teste\nnp.random.seed(50)\nx_treino, x_teste, y_treino, y_teste = train_test_split (x, y, test_size = 0.20, random_state = 42)","d3c79bb7":"from sklearn.neural_network import MLPRegressor\nimport xgboost as xgb\n\n#modelo = DecisionTreeRegressor()\n#modelo = naive_bayes.MultinomialNB(alpha=2,fit_prior=False)\n#modelo = svm.SVR(C=2, kernel='linear', degree=3, gamma='auto')\n#modelo=RandomForestRegressor(max_depth=6, random_state=0)\n#modelo = MLPRegressor(random_state=1, max_iter=1000)\n#modelo=LinearRegression()\nmodelo = xgb.XGBRegressor()\n\nmodelo_treinado=modelo.fit(x_treino, y_treino)\n\n# Passamos os exemplos sem classe pelo modelo treinado, que retorna a predicao em um vetor\npredicoes = modelo_treinado.predict(x_teste)\n\n# Com as predicoes, podemos calcular as m\u00e9tricas. Abaixo, a acur\u00e1cia.\n# Observe que sempre passamos os valores verdadeiros (y_teste) e depois as predicoes\n#acuracia = accuracy_score(y_teste, predicoes)\n#print(\"Acur\u00e1cia do modelo: \", acuracia)\n\nscore=modelo_treinado.score(x_teste,y_teste)\nprint(score)\nfrom sklearn.metrics import explained_variance_score\nprint(explained_variance_score((y_teste), (predicoes)))\nmean_squared_error ((y_teste), (predicoes))","1e884899":"#vamos remover as colunas uma a uma e verificar qual impacta no desempenho\ndef teste_columns(ac,treino_x, treino_y,teste_x,teste_y):\n    aux_collumns=[]\n    aux_treino = treino_x\n    aux_teste = teste_x\n    for coluna in list(treino_x.columns):\n        aux_treino = aux_treino.drop(coluna, axis='columns')\n        aux_teste = aux_teste.drop(coluna, axis='columns')\n        XGB = xgb.XGBRegressor()\n        modelo_treinado=XGB.fit(aux_treino,y_treino)\n        score=modelo_treinado.score(aux_teste,y_teste)\n        \n        aux_treino = treino_x\n        aux_teste = teste_x\n        if score>=ac:\n            aux_collumns.append([score,coluna])\n    return aux_collumns\n\n#teste_columns(score,x_treino,y_treino,x_teste,y_teste)","ae6840ae":"xgb_reg = xgb.XGBRegressor()\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\nparam_grid = {\n    'objective': ['reg:squarederror', 'reg:squaredlogerror'],\n    #'reg_lambda': [0,0.01, 0.1, 0.5, 1],\n    #'reg_alpha': [0,0.01, 0.1, 0.5, 1],\n    'colsample_bytree': [.3, .5],\n    'learning_rate': [.07, .1, .3, ],\n    'max_depth': [5, 6, 7],\n    'n_estimators': [500, 5000],\n    'subsample': [ 0.6, 0.7, 0.8],\n}\nmodel = GridSearchCV(estimator=xgb_reg,\n                        param_grid=param_grid,\n                        scoring='neg_mean_squared_log_error',\n                        cv=10)\n\nmodel.fit(x_treino, y_treino)\ncv_score = np.sqrt(-model.best_score_)\n\nprint('XGBoost RMSLE:', cv_score)","09518928":"from sklearn.metrics import mean_squared_log_error\n\n\npreds = model.predict(x_teste)\nreal_msle = mean_squared_log_error(y_teste, preds)\n\nfinal_score = np.sqrt(real_msle)\n\nprint(f' CV Score: {round(cv_score, 4)} '\n    f' - Final Score: {round(final_score, 4)}')","25e19be9":"\n\ndf_train=pd.read_csv(r\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\",encoding='latin-1')\ndf_test=pd.read_csv(r\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\",encoding='latin-1')\n\nY = df_train['SalePrice']\n\nX = df_train.drop(['SalePrice','Id'],axis='columns')\nX = label_encoding(X)\n\ntest = df_test.drop('Id',axis='columns')\n\ntest = label_encoding(test)\n\n\nX = inputdata(X)\ntest = inputdata(test)\n\n\n\nX = matematicsx(X)\ntest = matematicsx(test)\n\ntest=minimizarOutliders(X,test)\nX = minimizarOutliders(X,X)\n\n\nX = values_log(X)\ntest = values_log(test)\n\nX = minimizarOutliders(X,X)\ntest = minimizarOutliders(X,test)\n\n\nX = gerarCategoricos(X)\ntest = gerarCategoricos(test)\n\nX =removerColunas(X)\ntest =removerColunas(test)\n\n","1a0278c1":"import xgboost as xgb\n\nxgb_best_params = model.best_params_\n\nxgbr = xgb.XGBRegressor(**xgb_best_params)\nxgbr = xgbr.fit(X, Y)","fa7f11b5":"\n\npredictions = xgbr.predict(test)\n","c85b6a63":"Id = df_test['Id'] \nsubmit_df_1 = pd.DataFrame ({ \n                   \"Id\": Id, \n                  \"SalePrice\": predictions})","6c03db48":"submit_df_1.to_csv('submission_1_.csv', index = False)","b7353ef4":"# Imputando dados faltantes\n\nDas diversas abordagens existentes para tratar dados faltantes, n\u00f3s utilizamos algumas delas, inserir a m\u00e9dia, uma contante (0) e imputar dados com o KNN. Nossos resultados foram melhores com o KNN utilizando n_neighbors=5 .\n\nUma t\u00e9cnica popular de imputa\u00e7\u00e3o \u00e9 um modelo K-vizinho mais pr\u00f3ximo. Uma nova amostra \u00e9 imputada ao encontrar as amostras no conjunto de treinamento \u201cmais pr\u00f3ximo\u201d a ele e fazer a m\u00e9dia desses pontos pr\u00f3ximos para preencher o valor. - Applied Predictive Modeling, 2013 ","e1e6c2e5":"# Encoder hibrido\n\nSimplismente transforma dados categ\u00f3ricos contendo at\u00e9 4 tipos em one_hot_encoding e o restante para label_encoder. O seu uso foi mais eficas que a abordagem one_hot_encoding, embora n\u00e3o t\u00e3o boa quanto o label_encoder.","88661752":"**LotArea**\n\n![7110ee87dd34f23d09149bc8fbe4f1e1.png](attachment:b2515b3f-bc61-4efd-a132-62c282e7715d.png)","92c25465":"# Label encoder\nA fun\u00e7\u00e3o label_encoding transforma todos dados categoricos em inteiros (mais conhecido como label encoding ou integer encoding). Para o primeiro casos de teste, transformamos os dados NaN em 0. \n\nTodos os dados categ\u00f3ricos s\u00e3o convertidos para numeros inteiros, em primeiro momento, fizemos manualmente para nos aproximarmos dos dados e tentar compreendelos. No inicio pensamos que ela n\u00e3o seria mais eficaz que a distribui\u00e7\u00e3o one hot encoding, por isso, ao perceber sua eficacia, tentamos criar um hibrido entre as duas fun\u00e7\u00f5es em diversos momentos da implementa\u00e7\u00e3o.","862badf7":"# Impacto das t\u00e9cnicas de pr\u00e9-processamento nos dados\n\nAntes de prosseguir com a compara\u00e7\u00e3o gr\u00e1fica devemos mencionar que tentamos aplicar o pr\u00e9 processamento aos dados de saida ('SalePrice') e observamos que as tecnicas n\u00e3o eram \u00fateis para esta coluna. 'SalePrice' possui um histograma 'cauda de sereia' com valores elevados, calcular seu logaritmo reduz a exatid\u00e3o para a nossa abordagem especifica. Vale mencionar que n\u00e3o removemos linhas que contiam outliers, pois talvez pudesse impactar negativamente em novas amostras especificas.\n\nAtrav\u00e9s da compara\u00e7\u00e3o gr\u00e1fica, vamos apresentar o histograma e o gr\u00e1fico boxplot de cada coluna modificada.\n\nOs gr\u00e1ficos da esquerda (dado cru), fazem referencia a coluna antes de aplicar as t\u00e9cnicas de pr\u00e9-processamento e os da esquerda fazem referencia a dados j\u00e1 pr\u00e9-processados","a4117baf":"**2ndFlrSF**\n\n![ed7588cf57facea609c52c7b2711f35f.png](attachment:15d415cb-b286-4d93-a166-577fce16ecd4.png)","ad9f8c03":"# Modelo final \nAs celulas a baixo s\u00e3o responsaveis pelo modelo final e gerar a submiss\u00e3o\n\nAqui, passamos por cada faze de pr\u00e9-processamento para gera\u00e7\u00e3o do modelo final com o melhor parametro encontrado.","692540ad":"**TotalBsmtSF**\n\n![dfe90f05405720136316f72494d181d7.png](attachment:82882cd4-c990-422f-be70-26b67899dea3.png)","1f627c3b":"Remove-se o target e id antes de imputar dados..","211dcf77":"**1stFlrSF**\n\n![590f4cb064fbb34e73870dbc3a5cabbb.png](attachment:257526ba-7a42-4ba2-8e48-26a15b4b092d.png)","7c3c38af":"**LotFrontage**\n\n![67786e3b87baafb252f4db64c3f4535b.png](attachment:7a03e629-13c6-4dee-bfbb-ce80ffeeb41f.png)","11f45127":"# Fun\u00e7\u00e3o gerarCategoricos\n \nTransformamos colunas em outras colunas binarias (one hot encoder). Infelizmente s\u00f3 identificamos uma coluna que nos beneficiou na abordagem.","a9befa2a":"**GarageCars**\n\n![ed44bf3953515faa7900cc2bb552c24c.png](attachment:c9f95a4f-5c06-4267-9e97-7d43aa072fbc.png)","847c29b8":"# Fun\u00e7\u00e3o teste_columns\n\nA fun\u00e7\u00e3o teste_columns remove coluna a coluna verificando o impacto dela no desempenho do modelo. Seguimos o passo: \n\nRemove coluna **->** verifica score **->** adiciona novamente **->** prossegue para proxima coluna","f3792cf7":"# Fun\u00e7\u00e3o values_log\n\nSimplesmente calcula o logaritmo de cada valor da coluna. Percebemos ser muito eficiente, pois utilizando o calculo de logaritmo podemos obter a distribui\u00e7\u00e3o normal dos dados.\n\nInfelizmente n\u00e3o funciona para todas colunas num\u00e9ricas, mas em algumas obtemos resultados promissores. Vale mencionar que adicionamos 1 em cada fun\u00e7\u00e3o de log para evitar o log 0 ( que n\u00e3o existe).","5dc4d309":"# Fun\u00e7\u00e3o boxplot: \n\nO boxplot nos fornece uma an\u00e1lise visual da posi\u00e7\u00e3o, dispers\u00e3o, simetria, caudas e valores discrepantes (outliers) do conjunto de dados. Outliers \u2013 J\u00e1 os outliers indicam poss\u00edveis valores discrepantes. No boxplot, as observa\u00e7\u00f5es s\u00e3o consideradas outliers quando est\u00e3o abaixo ou acima do limite de detec\u00e7\u00e3o de outliers.","07a872b1":"# One Hot Encoder\n\nSimplismente tranforma os dados categ\u00f3ricos em 0's e 1's, criando novas colunas para alocar os dados. vale mencionar que o uso dele n\u00e3o foi muito promissor para os nossos testes.","ecfa25f1":"# Resumo dos passos percorridos e conclus\u00e3o\nNeste t\u00f3pico, iremos descrever de forma breve todos os testes desenvolvidos e a metodologia de trabalho. A cima de cada fun\u00e7\u00e3o, \u00e9 possivel encontrar sua descri\u00e7\u00e3o e como as implementamos.\n\n* Iniciamos nosso trabalho sumerizando os dados categoricos. Implementamos uma vers\u00e3o manual do label_encoder, uma para o one_hot_encoder e uma hibrida convertendo apenas categoricos com 4 ou menos campos.\n\n* Nosso primeiro desafio foi \"tapar\" os buracos deixados pela falta de dados (objetos .nan). Tentamos diversas metodologias, por exemplo, inserir a m\u00e9dia dos dados, maximos, minimos, constante 0 e por fim a utiliza\u00e7\u00e3o do algoritmos KNN como auxilio.\n\n* Logo partimos para a compreen\u00e7\u00e3o dos dados, onde plotamos dois tipos de gr\u00e1ficos, o histograma e o gr\u00e1fico boxplot. Eles foram extremamente uteis para a compreen\u00e7\u00e3o dos dados num\u00e9ricos.\n\n* Mesmo sem remover colunas ou adicionar novas features, fomos direto a implementa\u00e7\u00e3o dos preditores, onde testamos diversos modelos. Percebemos que ao utilizar o label_encoder a precis\u00e3o era em torno de 90% para o xgboost. \n\n* Nosso pr\u00f3ximo desafio foi tentar detectar outliers, esta tarefa foi a mais dificil e de fato n\u00f3s n\u00e3o conseguimos no sair bem nela. Identificamos diversos outliers e tentamos diversas abordagens como a remo\u00e7\u00e3o de linhas, colunas e etc. Mas todas causavam impacto negativo no nosso modelo. Foi ent\u00e3o que resolvemos buscar um recurso da estatistica chamado boxplot, com ele conseguimos \"remodelar\" os dados de forma que ficassem dentro dos limites. Outra abordagem foi a transforma\u00e7\u00e3o dos dados num\u00e9ricos para log. A mistura dos dois recursos foi bastante benefica para algumas colunas e nos trouxe aproximadamente cerca de + 2% na precis\u00e3o.\n\n* Em seguida adicionamos uma fun\u00e7\u00e3o que remove uma coluna e verifica a precis\u00e3o do modelo. Ela foi extremamente util para sabermos qual coluna n\u00e3o alterava os dados ou causava impacto negativo ao resultado final.\n\n* Tentamos de diversas formas adicionar novas features relacionando colunas, inclusive isto foi bastante promissor, conseguimos adicionar varias colunas que trouxeram um impacto positivo.\n\n* Ap\u00f3s diversas falhas e exitos passamos a constru\u00e7\u00e3o do algoritmo para encontrar o melhor modelo, onde percorremos diversos parametros e verificamos qual era mais benefico para nosso modelo final. \n\n* O score final foi de 93.35%, embora nos acreditemos que ainda seja possivel melhorar, estamos satisfeitos, pois conseguimos trabalhar com diversos recursos e t\u00e9cnicas de engenharia de atributos. Percebemos que \u00e9 bastante desafiador encontrar novos dados atraves dos j\u00e1 existentes e principalmente detectar outliers, o que de fato nos deu muita dor de cabe\u00e7a.\n\n* Resultado final: \n\n![83e0307aa5ad89464142d7091dafd009.png](attachment:42f37999-ac56-4f3d-b2dc-c15c4699f859.png)","c0534b5a":"**WoodDeckSF**\n\n![53e34352c05b452ff9cb52c1a357ad3e.png](attachment:260dc77b-92b6-46ad-b13e-46a95048f8f1.png)","f1afdb7a":"# Testes em diferentes modelos\nNa se\u00e7\u00e3o a seguir, fizemos diversos testes em diversos tipos de modelos. Inicialmente n\u00f3s alteramos os parametros manualmente a cada execu\u00e7\u00e3o e comparamos os resultados. Nesse momento, anotando resultados, percebemos que o Xgboost era extremamente melhor que o restante.","45a330df":"# Escolha de parametros\nA c\u00e9lula a seguir busca dentro de algumas op\u00e7\u00f5es, os melhores parametros para o nosso modelo","86da4c4b":"# Separa\u00e7\u00e3o treino e teste","5ed5a31e":"# Fun\u00e7\u00e3o removerColunas\n\nRemovemos colunas que n\u00e3o trazem beneficio a nossa regress\u00e3o. Identificamos estas colunas utilizando a fun\u00e7\u00e3o teste_columns","467bbefe":"# Fun\u00e7\u00e3o matematicsx\n\nFazemos alguns calculos em grupo, soma de colunas, transforma\u00e7\u00f5es para bin\u00e1rio para tentar identificar novas colunas que tenham um bom impacto no resultado final. Fizemos muitos experimentos (inclusive alguns que n\u00e3o est\u00e3o em 'comentario') at\u00e9 chegar em alguns ideais.","2cabe485":"chamada de fun\u00e7\u00f5es ( a ordem \u00e9 extremamente importante), devemos mencionar que chamamos a fun\u00e7\u00e3o minimizar outliers 2 vezes para fazer a corre\u00e7\u00e3o ap\u00f3s a convers\u00e3o logaritmica ","24afe29e":"# Engenharia de atributos","63c15f45":"# Fun\u00e7\u00e3o minimizarOutliders\nA fun\u00e7\u00e3o minimizarOutliders(df,df_test) recebe como argumento dois corpus, o primeiro refere-se ao corpus de treinamento e o segundo pode se referir novamente ao de treinamento ou ao de teste. \n\nVamos tentar explicar nossa l\u00f3gica: Basicamente identificamos os outliers atrav\u00e9z de uma ilustra\u00e7\u00e3o do boxplot, calculamos os limites superiores e inferior e alteramos os valores discrepantes para exatamente o valor do limite, ou seja, valores acima do limite superior agora possuem exatamente o valor do limite superior. Obviamente isso pode trazer problemas em novas amostras, pois estamos puxando dados atipicos para a proximidade de dados tipicos. Embora saibamos o problema que isto pode causar, percebemos exatamente nestas colunas num\u00e9ricas a abordagem trazia beneficio significativo, enquanto para outras colunas o ganho era negativo. "}}