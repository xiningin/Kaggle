{"cell_type":{"c3ca13a5":"code","90952a44":"code","5f149536":"code","d0e7539e":"code","8123f6cc":"code","66c0dca8":"code","8cb430f3":"code","be85c7f2":"code","98f2a3f7":"code","6a891f71":"code","0c1d61e9":"code","37083dd4":"code","e9cd3224":"code","6c264116":"code","4454104b":"code","4c0a8334":"markdown","07caa706":"markdown","291f7556":"markdown","f56f7321":"markdown","eab7a6e7":"markdown","b1336b95":"markdown","54a6e179":"markdown","fae18df1":"markdown","15fbda15":"markdown","9a0f433b":"markdown"},"source":{"c3ca13a5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","90952a44":"df=pd.read_csv(\"..\/input\/tabular-playground-series-dec-2021\/train.csv\")","5f149536":"df.head()","d0e7539e":"df.isnull().sum()","8123f6cc":"df.info()","66c0dca8":"# As we can see the data has imbalance\ndf.Cover_Type.value_counts()","8cb430f3":"df.describe()","be85c7f2":"import matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('ggplot')","98f2a3f7":"sns.countplot(df.Cover_Type)\nplt.plot()","6a891f71":"try:\n    fig, axes=plt.subplots(2,5,figsize=(30,15))\n    j=0\n    i=0\n    for k in range(1,11):\n        if j==5:\n            i+=1\n            j=0\n        sns.kdeplot(df.loc[:,df.columns[k]],ax=axes[i,j])\n        plt.gca().set_title(f\"{df.columns[k]}\")\n        j+=1\nexcept:\n    print(\"Got all the columns\")","0c1d61e9":"fig.savefig('myimage.pdf', format='pdf', dpi=1200)","37083dd4":"def outlier_function(df, col_name):\n    first_quartile = np.percentile(np.array(df[col_name].tolist()), 25)\n    third_quartile = np.percentile(np.array(df[col_name].tolist()), 75)\n    IQR = third_quartile - first_quartile\n    \n    upper_limit = third_quartile+(3*IQR)\n    lower_limit = first_quartile-(3*IQR)\n    outlier_count = 0\n    \n    for value in df[col_name].tolist():\n        if (value < lower_limit) | (value > upper_limit):\n            outlier_count += 1\n    return lower_limit, upper_limit, outlier_count","e9cd3224":"for col in  df.columns[:10]:\n    out=outlier_function(df,col)\n    if out[2]>0:\n        print(f\"There are {out[2]} outliers in {col}\")","6c264116":"try:\n    fig_out, axes_out=plt.subplots(2,5,figsize=(30,15))\n    j=0\n    i=0\n    for k in range(1,11):\n        if j==5:\n            i+=1\n            j=0\n        sns.boxplot(y=df.columns[k],x=df.columns[-1],data=df,ax=axes_out[i,j])\n        plt.gca().set_title(f\"{df.columns[k]}\")\n        j+=1\nexcept:\n    print(\"Got all the columns\")","4454104b":"fig_out.savefig('myimage.pdf', format='pdf', dpi=1200)","4c0a8334":"# Data Descirption","07caa706":"# Checking for NULLs in the data ","291f7556":"# EDA","f56f7321":"## Checking for Type of data in the data frame","eab7a6e7":"# Please Upvote\n<img src=\"https:\/\/media.giphy.com\/media\/iCS5WBHrudbqQMp6Fx\/giphy.gif\">","b1336b95":"# Checking for Skeqness in Data","54a6e179":"# Getting Outliers","fae18df1":"<img src=\"https:\/\/media.giphy.com\/media\/xT9C25UNTwfZuk85WP\/giphy.gif\" width=100%>","15fbda15":"- Elevation - Elevation in meters\n- Aspect - Aspect in degrees azimuth\n- Slope - Slope in degrees\n- Horizontal_Distance_To_Hydrology - Horz Dist to nearest surface water features\n- Vertical_Distance_To_Hydrology - Vert Dist to nearest surface water features\n- Horizontal_Distance_To_Roadways - Horz Dist to nearest roadway\n- Hillshade_9am (0 to 255 index) - Hillshade index at 9am, summer solstice\n- Hillshade_Noon (0 to 255 index) - Hillshade index at noon, summer solstice\n- Hillshade_3pm (0 to 255 index) - Hillshade index at 3pm, summer solstice\n- Horizontal_Distance_To_Fire_Points - Horz Dist to nearest wildfire ignition points\n- Wilderness_Area (4 binary columns, 0 = absence or 1 = presence) - Wilderness area designation\n- Soil_Type (40 binary columns, 0 = absence or 1 = presence) - Soil Type designation\n- Cover_Type (7 types, integers 1 to 7) - Forest Cover Type designation","9a0f433b":"Hence we can see the data requires Upscalling for balancing the class distribution"}}