{"cell_type":{"94efd783":"code","77951985":"code","8f85e699":"code","489c27a9":"code","c93026a4":"code","7a7b88c3":"code","ba8cc703":"code","86ea5ddc":"code","d8a3f90f":"code","8cd5dbd1":"code","db31dc5e":"code","7b20fb4c":"code","98005204":"code","96f6fbc6":"code","0e905c22":"code","70859a69":"code","cce2deab":"code","2af92fdf":"code","d0715264":"code","5969782d":"code","8a023112":"code","3180d0e4":"code","3d438c45":"code","241e2526":"code","762d6c29":"code","230628c7":"code","b67541c7":"code","14c190ac":"code","40af6a93":"code","ba04c958":"code","ae0285e3":"code","4ad6007f":"code","fe97fde3":"code","902e1bd3":"code","2ad9485c":"code","47597f66":"code","bf01fdae":"code","73765ee8":"code","1a7313fe":"code","50de43ca":"code","b3480e13":"code","36440150":"code","6fd7ac28":"code","03b579ff":"code","f1481e6a":"code","e07abe66":"code","d4a7447e":"code","a9c6f56b":"code","57a8699d":"code","5d6124a5":"code","5b0bd037":"code","861ee660":"code","a6175a36":"code","11d8a8e4":"code","1d01a1c5":"code","4c12b4d9":"code","988546ef":"code","bcd97639":"code","708a2d22":"code","50aa3bfd":"code","23da2f96":"code","3bb371a4":"code","d048e663":"code","e6b5acbc":"code","eb00d67a":"code","bdc123f0":"code","232a8566":"code","901fdf42":"code","354d46f5":"code","fabe06c2":"code","582bde6d":"code","233f6614":"code","c281a3da":"code","10be4d8e":"code","9e273388":"code","6d09da79":"code","ac904713":"code","c0acec99":"code","a93fb7ca":"code","bb0d172e":"code","79d9e723":"code","9311c783":"code","c4d89a8e":"code","882d6da3":"code","a0afd158":"code","1c6aca62":"code","e6d92982":"code","363ad58c":"code","00770378":"markdown","07b7442e":"markdown","c02dde5f":"markdown","60fd252b":"markdown","4f2f275d":"markdown","17dcefae":"markdown","6a8e3a00":"markdown","9c447f97":"markdown","b740ad5e":"markdown","7b0b5d1f":"markdown","18dc0432":"markdown","ab17942e":"markdown","1d8a598c":"markdown","cc68cdf3":"markdown","792dd843":"markdown","53799cd5":"markdown","77614aea":"markdown","53fcd94a":"markdown","3c79ba83":"markdown","9dc78275":"markdown","c76c0137":"markdown","330055ae":"markdown","e35b5e77":"markdown","e9a5ba6e":"markdown","71503f73":"markdown","8b9e6e2f":"markdown","3c30c561":"markdown","500cdb31":"markdown","c95f81bd":"markdown","c0ecf30d":"markdown","2e3aff2d":"markdown","04cdaa25":"markdown","e6283d02":"markdown","619693ee":"markdown","af3c1d71":"markdown","2ed3534c":"markdown","d2000fb3":"markdown"},"source":{"94efd783":"#First of all we're importing libraries.\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","77951985":"data=pd.read_csv('\/kaggle\/input\/fifa19\/data.csv')","8f85e699":"#We can see column's name.\ndata.columns","489c27a9":"data.head()","c93026a4":"data.info()","7a7b88c3":"data.describe()","ba8cc703":"data.corr()","86ea5ddc":"f,ax=plt.subplots(figsize=(18,18))\nsns.heatmap(data.corr(),annot=True,linewidth=0.5,fmt='.2f',ax=ax)\nplt.show()","d8a3f90f":"# Line Plot\n# color=color,label=label,linewidth=width of line,alpha=apacity,grid=grid,linestyle=style\ndata.Overall.plot(kind='line',color='r',label='Overall',linewidth=1,alpha=0.5,grid=True,linestyle='-.')\ndata.Age.plot(kind='line',color='g',label='Age',linewidth=1,alpha=0.5,grid=True,linestyle='--')\nplt.legend(loc='upper right')\nplt.xlabel('X Axis')\nplt.ylabel('Y Axis')\nplt.show()","8cd5dbd1":"#Scatter plot\n#As we saw in the correlation table, the number of between Overall and Potential was too close to 1. \n#So the scatter better when there is correlation between two variables because of that we choose x='Overall' and y='Potential'.\ndata.plot(kind='scatter',x='Overall',y='Potential',color='b',figsize=(13,13))\nplt.xlabel('Overall')\nplt.ylabel('Potential')\nplt.title('Colleration between Overall and Potential')\nplt.show()","db31dc5e":"#Histogram\n#Bins:Number of bar in figure\n#data.plot(kind='hist',bins=50,figsize=(13,13))\ndata.Overall.plot(kind='hist',bins=50,figsize=(13,13))\nplt.show()","7b20fb4c":"dictionary={'spain':'madrid','usa':'vegas'}\nprint(dictionary.keys())\nprint(type(dictionary))","98005204":"print(dictionary.values())","96f6fbc6":"# Add new key and value.\ndictionary['france']='paris'\ndictionary","0e905c22":"dictionary['spain']='barcelona' # Update new existing.\ndictionary","70859a69":"print('france' in dictionary) #For check include","cce2deab":"del dictionary['spain'] #For remove entry \ndictionary","2af92fdf":"tr_players=data[data['Nationality']=='Turkey']\ntr_players.head()","d0715264":"lis=[1,2,3,4,5]\nfor i in lis:\n    print(i)","5969782d":"#Enumerate index and value of list\nfor index,value in enumerate(lis):\n    print(index,'',value)","8a023112":"#For pandas we can achieve index and value\nfor index,value in data[['Overall']][0:10].iterrows(): #iterrows() is method.\n    print(index,'',value)","3180d0e4":"# Lambda Function: Faster way of writing function. For example:\nsquare = lambda x:x**2\nprint(square(2))","3d438c45":"#If we apply lambda function to our data for select turkish players as we did above\ntr = lambda x:data[data['Nationality']==x][['Name','Club','Position','Overall','Potential','Age','Value']]\ntr('Turkey')","241e2526":"num1=[5,10,15]\nnum2=[i**2 if i==10 else i-5 for i in num1]\nprint(num2)","762d6c29":"#For Our Data\nthreshold=sum(data.Age)\/len(data.Age)\ndata['Age_Level']=['Middle Age' if i>threshold else 'Young' for i in data.Age]\ndata.loc[:10,['Age_Level','Age','Overall','Name']]","230628c7":"#For example lets look frequency of club \nprint((data['Club']).value_counts(dropna=False)) #if there are nan values that also be counted","b67541c7":"data.describe()#ignore null entries","14c190ac":"data.boxplot(column='Overall',by = 'Age')","40af6a93":"df=data.head(2)\nmelted=pd.melt(frame=df,id_vars='Name',value_vars=['Club','Position'])\nmelted.head()","ba04c958":"melted.pivot(index='Name',columns='variable',values='value')","ae0285e3":"data1=data.head()\ndata2=data.tail()\nconc_data=pd.concat([data1,data2],axis=0,ignore_index=True) #axis=0, adds dataframe in row\nconc_data","4ad6007f":"conc_data_col=pd.concat([data1,data2],axis=1,ignore_index=True)\nconc_data_col","fe97fde3":"# Lets look at does pokemon data have nan value\n# As you can see there are 18207 entries. However Club has 17966 non-null object so it has 241 null object.\ndata.info()","902e1bd3":"data['Club'].value_counts(dropna=False) #As you can see NaN Values equal 241.","2ad9485c":"#Let's drop non values\ndata['Club'].dropna(inplace=True)#inplace=True means we do not assign it to new variable","47597f66":"#Let's check with assert statement\nassert data['Club'].notnull().all() #Returns nothing because we drop nan values","bf01fdae":"data['Club'].fillna('empty',inplace=True)","73765ee8":"assert data['Club'].notnull().all()","1a7313fe":"print(data.index.name)\ndata.index.name='index_name'\ndata.head()","50de43ca":"data['Name'][1]","b3480e13":"data.Name[1]","36440150":"data.loc[0:10,['Name']]","6fd7ac28":"data[['Name','Club']]","03b579ff":"# Difference between selecting columns: series and dataframes\nprint(type(data[\"Name\"]))     # series\nprint(type(data[[\"Name\"]]))   # data frames","f1481e6a":"# Slicing and indexing series\ndata.loc[1:10,\"Name\":\"Club\"]   # 10 and \"Club\" are inclusive","e07abe66":"# Reverse slicing \ndata.loc[10:1:-1,\"Name\":\"Club\"] ","d4a7447e":"# From something to end\ndata.loc[1:10,\"Age\":] ","a9c6f56b":"# Creating boolean series\nboolean = data.Overall > 85\ndata[boolean]","57a8699d":"# Combining filters\nfirst_filter = data.Overall > 85\nsecond_filter = data.Age < data.Age.mean()\ndata[first_filter & second_filter]","5d6124a5":"def div(n):\n    return n\/2\ndata.Overall.apply(div)","5b0bd037":"# Or we can use lambda function\ndata.Overall.apply(lambda n : n\/2 )","861ee660":"data.head()","a6175a36":"print(data.index.name)\n# lets change it\ndata.index.name = \"index\"\ndata.head()","11d8a8e4":"# Overwrite index\n# if we want to modify index we need to change all of them.\ndata.head()\n# first copy of our data to data3 then change index \ndata3 = data.copy()\n# lets make index start from 1. It is not remarkable change but it is just example\ndata3.index = range(1,18208,1)\ndata3.head()","1d01a1c5":"# lets read data frame one more time to start from beginning\ndata = pd.read_csv('\/kaggle\/input\/fifa19\/data.csv')\ndata.head()\n# As you can see there is index. However we want to set one or more column to be index","4c12b4d9":"# Setting index : Nationality is outer Club is inner index\ndata1 = data.set_index([\"Nationality\",\"Club\"]) \ndata1.head(100)","988546ef":"dic = {\"treatment\":[\"A\",\"A\",\"B\",\"B\"],\"gender\":[\"F\",\"M\",\"F\",\"M\"],\"response\":[10,45,5,9],\"age\":[15,4,72,65]}\ndf = pd.DataFrame(dic)\ndf","bcd97639":"# pivoting\ndf.pivot(index=\"treatment\",columns = \"gender\",values=\"response\")\ndf","708a2d22":"df1 = df.set_index([\"treatment\",\"gender\"])\ndf1\n# lets unstack it","50aa3bfd":"# level determines indexes\ndf1.unstack(level=0)","23da2f96":"df1.unstack(level=1)","3bb371a4":"# change inner and outer level index position\ndf2 = df1.swaplevel(0,1)\ndf2","d048e663":"df","e6b5acbc":"# df.pivot(index=\"treatment\",columns = \"gender\",values=\"response\")\npd.melt(df,id_vars=\"treatment\",value_vars=[\"age\",\"response\"])","eb00d67a":"# We will use df\ndf","bdc123f0":"# according to treatment take means of other features\ndf.groupby(\"treatment\").mean()   # mean is aggregation \/ reduction method\n# there are other methods like sum, std,max or min","232a8566":"# we can only choose one of the feature\ndf.groupby(\"treatment\").age.max()","901fdf42":"# Or we can choose multiple features\ndf.groupby(\"treatment\")[[\"age\",\"response\"]].min() ","354d46f5":"data=pd.read_csv('\/kaggle\/input\/fifa19\/data.csv')\ntr_players.describe()","fabe06c2":"tr_players.shape","582bde6d":"#Also we can filter with functions.\ndef country(x):\n    return data[data['Nationality']==x][['Name','Club','Position','Overall','Potential','Age','Value']]\ntr=country('Turkey')\ntr.head()","233f6614":"#As you can see tr and tr_players are same data.\ntr.shape","c281a3da":"#Now we need turkish superleague teams for filtering.Because of that I'am using set.\nclub=set(tr.Club)\ntype(club)\nclub\n#In this set, you can see all teams.","10be4d8e":"superleague_teams=['Kasimpa\u015fa SK','BB Erzurumspor','Be\u015fikta\u015f JK','G\u00f6ztepe SK','Trabzonspor','Galatasaray SK','Medipol Ba\u015fak\u015fehir FK','Alanyaspor','Yeni Malatyaspor','\u00c7aykur Rizespor','Sivasspor','MKE Ankarag\u00fcc\u00fc','Atiker Konyaspor','Bursaspor','Antalyaspor']","9e273388":"#We take all players in the Super League\ntr_league=data[data['Club'].isin(superleague_teams)]\ntr_league","6d09da79":"tr_league.corr()","ac904713":"#We can see all club age's mean.\nclub_ages=tr_league.groupby('Club').Age.mean()\nclub_ages","c0acec99":"club_overall=tr_league.groupby('Club').Overall.mean()\nclub_overall","a93fb7ca":"#Now Let's look foreign players in Turkish Superleague\nforeign_players=tr_league[tr_league['Nationality']!='Turkey'][['Name','Club','Position','Overall','Potential','Age','Value']]\nforeign_players","bb0d172e":"foreign_players.Age.mean()","79d9e723":"#Analyzing Club Data(Galatasaray SK )\ndef club(c):\n    return data[data['Club']==c][['Name','Position','Nationality','Overall','Potential','Age','Value']]\nGS=club('Galatasaray SK')\nGS","9311c783":"GS.Age.mean()","c4d89a8e":"GS[(GS['Nationality']!='Turkey')]","882d6da3":"# Correlation heatmap\nf,ax=plt.subplots(figsize=(18,18))\nsns.heatmap(tr_league.corr(),annot=True,linewidth=0.5,fmt='.2f',ax=ax)\nplt.show()","a0afd158":"#Line Plot\ntr_league.Potential.plot(kind = 'line', color = 'g', label = 'Potential', linewidth = 1, alpha = 0.5,grid = True,linestyle = ':')\ndata.Overall.plot(color = 'r',label = 'Overall', linewidth = 1, alpha = 0.5, grid = True, linestyle = '--')\nplt.legend(loc='upper right')\nplt.xlabel('x axis')\nplt.ylabel('y axis')\nplt.title('Analysing of Potential and Overall')\nplt.show()","1c6aca62":"# Histogram Plot\ntr_league.Age.plot(kind='hist',bins = 30, figsize=(15,15))\nplt.show()","e6d92982":"club_ages.plot(kind=\"bar\",figsize=(18,18))","363ad58c":"club_overall.plot(kind=\"bar\",figsize=(18,18))","00770378":"### 7. Visualization","07b7442e":"### Content:\n\n1. Load and Check Data\n2. Introduction to Python\n3. Python Data Sc\u0131ence Toolbox\n4. Cleaning Data\n5. Manipulating Data Frames With Pandas\n6. Analyze Turkish Superleague\n7. Visualization","c02dde5f":"#### SLICING DATA FRAME\n* Difference between selecting columns\n* Series and data frames\n* Slicing and indexing series\n* Reverse slicing\n* From something to end","60fd252b":"While we were in Filtering Chapter,we had looked turkish players but our purpose is analyze turkish superleague so because of that we've to filter again.","4f2f275d":"#### Exploratory Data Analysis\nvalue.counts():Frequency counts\n\noutliers: the value that is considerably higher or lower from rest of the data\n\n* Lets say value at 75% is Q3 and value at 25% is Q1.\n* Outlier are smaller than Q1 - 1.5(Q3-Q1) and bigger than Q3 + 1.5(Q3-Q1). (Q3-Q1) = IQR\n* We will use describe() method. Describe method includes:\n* count: number of entries\n* mean: average of entries\n* std: standart deviation\n* min: minimum entry\n* 25%: first quantile\n* 50%: median or second quantile\n* 75%: third quantile\n* max: maximum entry\n","17dcefae":"#### MELTING DATA FRAMES\n* Reverse of pivoting","6a8e3a00":"#### INDEXING DATA FRAMES\n* Indexing using square brackets\n* Using column attribute and row label\n* Using loc accessor\n* Selecting only some columns","9c447f97":"#### DICTIONARY\n\nWhy we need dictionary?\n* It has 'key' and 'value'\n* Faster than list.","b740ad5e":"* Matplotlib\n* Dictionaries\n* Pandas\n* Logic,control flow and filtering\n* Loop Data Structures","7b0b5d1f":"### 3. PYTHON DATA SCIENCE TOOLBOX\n\n* Lambda Function\n* List Comprehension","18dc0432":"#### MISSING DATA and TESTING WITH ASSERT\nIf we encounter with missing data, what we can do:\n\n* leave as is\n* drop them with dropna()\n* fill missing value with fillna()\n* fill missing values with test statistics like mean\n* Assert statement: check that you can turn on or turn off when you are done with your testing of the program","ab17942e":"#### CATEGORICALS AND GROUPBY","1d8a598c":"### 1. Load and Check Data","cc68cdf3":"### 5. Manipulating Data Frames With Pandas","792dd843":"#### INDEX OBJECTS AND LABELED DATA\n* index: sequence of label","53799cd5":"What is quantile?\n\n* 1,4,5,6,8,9,11,12,13,14,15,16,17\n* The median is the number that is in middle of the sequence. In this case it would be 11.\n\n* The lower quartile is the median in between the smallest number and the median i.e. in between 1 and 11, which is 6.\n\n* The upper quartile, you find the median between the median and the largest number i.e. between 11 and 17, which will be 14 according to the question above.","77614aea":"#### STACKING and UNSTACKING DATAFRAME\n* deal with multi label indexes\n* level: position of unstacked index\n* swaplevel: change inner and outer level index position","53fcd94a":"#### D\u0131agnose Data For Cleaning\nWe need to diagnose and clean data before exploring.Unclean data:\n   * column name inconsistency like upper-lower case letter or space between words\n   * missing data\n   * difference language\n","3c79ba83":"#### P\u0131vot\u0131ng Data\nReverse of melting","9dc78275":"#### TRANSFORMING DATA\n* Plain python functions\n* Lambda function: to apply arbitrary python function to every element\n* Defining column using other columns","c76c0137":"#### Matplotlib\nMatplot is a python library that help us to plot data. The easiest and basic plots are line, scatter and histogram plots.\n\n* Line plot is better when x axis is time.\n* Scatter is better when there is correlation between two variables\n* Histogram is better when we need to see distribution of numerical data.\n* Customization: Colors,labels,thickness of line, title, opacity, grid, figsize, ticks of axis and linestyle","330055ae":"* #### We use this code (data.corr()) for see correlation between two variables.In this table,you sees numbers, if number of between two variables is equal to 1 or too close to 1,this variables have perfect correlation between each other. If number of between two variables is negative or too far away from 1, this variables don't have correlation. other.","e35b5e77":"### 2. Introduction to Python\n\n","e9a5ba6e":"#### Tidy Data\n* We tidy data with melt(). Describing melt is confusing. Therefore lets make example to understand it.\n    * id_vars= What we do not wish to melt\n    * value_vars= What we want to melt","71503f73":"### 6.Analyze Turkish Superleague","8b9e6e2f":"#### FILTERING DATA FRAMES\n* Creating boolean series Combining filters Filtering column based others","3c30c561":"#### Concatenating Data\n\nWe can concatenate two dataframe.","500cdb31":"#### List Comprehension\nOne of the most important topic of  this kernel. We use list comprehension for data analysis often.","c95f81bd":"#### VISUAL EXPLORATORY DATA ANALYSIS\n* Box plots: visualize basic statistics like outliers, min\/max or quantiles","c0ecf30d":"# Introduction\nFIFA 19 is a football simulation video game developed by EA Vancouver as part of Electronic Arts' FIFA series. It is the 26th installment in the FIFA series, and was released on 28 September 2018 for PlayStation 3, PlayStation 4, Xbox 360, Xbox One, Nintendo Switch, and Microsoft Windows.This In this kernel, we're going to analyze players who plays in Turkish Superleague.While doing this,we'll learn about Data Scientist and Python Basic's.","2e3aff2d":"#### HIERARCHICAL INDEXING\n* Setting indexing","04cdaa25":"### 4.Cleaning Data","e6283d02":"#### PIVOTING DATA FRAMES\n* pivoting: reshape tool","619693ee":"#### PANDAS\n\nWe have two types in pandas, these are Series and DataFrame.In basicly differences between Series and DataFrame is, DataFrames are two-dimensional but Series are one dimensional array.\nComparison operators: ==,<,>,<=\nBoolean operators: and,or,not\nFiltering Pandas: I think it's very important.","af3c1d71":"##### Filtering\nAs I told, filtering is important. Now we use filtering for separate turkish players.","2ed3534c":"#### WHILE AND FOR LOOPS\nWe will learn most basic while and for loops","d2000fb3":"* #### We're using heatmap from seaborn library for see correlation better. "}}