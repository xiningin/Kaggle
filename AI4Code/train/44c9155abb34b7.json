{"cell_type":{"2c9afd90":"code","395d9805":"code","c4c2250f":"code","65840ea0":"code","df19ecbc":"code","e5883631":"code","9b6af9ce":"code","4ad983e9":"code","6b2a9344":"code","d02cab6d":"code","3b4c2ca5":"code","b2f893f8":"code","1089d282":"code","081b58cf":"code","7fcb8e9d":"code","0b6a2c4d":"code","dd2d2526":"code","cdbe76fd":"code","b832d970":"code","6fb1adf7":"code","bd5fc576":"code","7726cfad":"code","5e0bf3a8":"code","5610f362":"code","4890722a":"code","158c2e21":"code","03a7fdc9":"code","53200e16":"code","2c89fc4b":"code","dc0fc3a2":"code","b5f9fc8b":"code","fcf8599b":"code","4735ceb0":"code","9fa63357":"code","9ee409ee":"code","1df9a3b0":"code","65c0900d":"code","5de2cd9d":"markdown","7e08c7f0":"markdown","837ea9f6":"markdown","ed131432":"markdown","9d948535":"markdown","7a0d2b7f":"markdown","0f6e7340":"markdown","a82f2ff1":"markdown","852c1daa":"markdown","afaf2d72":"markdown","4f1f6607":"markdown"},"source":{"2c9afd90":"# import necessary modules\nimport numpy as np \nimport pandas as pd \nimport seaborn as sns \nimport matplotlib.pyplot as plt\nimport os\nimport warnings\nfrom datetime import datetime\nfrom scipy import stats\nfrom scipy.stats import norm, skew, probplot \n\nwarnings.filterwarnings('ignore')","395d9805":"dftrain = pd.read_csv('..\/input\/covid19-global-forecasting-week-3\/train.csv', parse_dates=['Date']).sort_values(by=['Country_Region', 'Date']).fillna('None')\ndftest = pd.read_csv('..\/input\/covid19-global-forecasting-week-3\/test.csv', parse_dates=['Date']).sort_values(by=['Country_Region', 'Date']).fillna('None')\ndfsubm = pd.read_csv('..\/input\/covid19-global-forecasting-week-3\/submission.csv')#, parse_dates=['Date']).sort_values(by=['Country_Region', 'Date'])","c4c2250f":"dftrain.head(2)","65840ea0":"dftrain.tail(2)","df19ecbc":"dftest.head(2)","e5883631":"dftest.tail(2)","9b6af9ce":"dfsubm.head(2)","4ad983e9":"starttest = dftest['Date'].min() ; endtest = dftest['Date'].max() ; datetest = dftest['Date'].unique()","6b2a9344":"confirmed = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv').sort_values(by='Country\/Region')#.set_index('Country\/Region')\ndeaths = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv')#.set_index('Country\/Region')\nrecovered = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv')#.set_index('Country\/Region')","d02cab6d":"def change_countryprovince(df):\n    df['Country_Region'] = df['Country\/Region']\n    df['Province_State'] = df['Province\/State']\n    df = df.drop(['Country\/Region', 'Province\/State'], axis=1)\n    return df","3b4c2ca5":"confirmed = change_countryprovince(confirmed)\ndeaths = change_countryprovince(deaths)\nrecovered = change_countryprovince(recovered)\n#\ncsse_data = pd.DataFrame(confirmed.set_index(['Province_State','Country_Region']).drop(['Lat','Long'],axis=1).stack()).reset_index()\ncsse_data.columns = ['Province_State', 'Country_Region', 'Date', 'ConfirmedCases']\n#\ncsse_data['Fatalities'] = deaths.set_index(['Province_State','Country_Region']).drop(['Lat','Long'],axis=1).stack().tolist()\ncsse_data['Date'] = pd.to_datetime(csse_data['Date'])\ncsse_data.head()\n#confirmed.head()","b2f893f8":"len(csse_data['Province_State'].unique())","1089d282":"len(dftrain['Province_State'].unique())","081b58cf":"dftrain = dftrain.join(confirmed[['Country_Region', 'Province_State', 'Lat', 'Long']].set_index(['Province_State', 'Country_Region']), on=['Province_State', 'Country_Region'])#, how='outer')#.set_index(['Province_State', 'Country_Region']))","7fcb8e9d":"dftrain['Dayofyear'] = dftrain['Date'].dt.dayofyear\ndftest['Dayofyear'] = dftest['Date'].dt.dayofyear","0b6a2c4d":"def transpose_df(df):\n    df = df.drop(['Lat','Long'],axis=1).groupby('Country_Region').sum().T\n    df.index = pd.to_datetime(df.index)#.date\n    return df","dd2d2526":"confirmedT = transpose_df(confirmed)\ndeathsT = transpose_df(deaths)\nrecoveredT = transpose_df(recovered)\nmortalityT = deathsT\/confirmedT","cdbe76fd":"def add_day(df):\n    df['Date'] = df.index\n    df['Dayofyear'] = df['Date'].dt.dayofyear\n    return df","b832d970":"confirmedT, deathsT, recoveredT, mortalityT = add_day(confirmedT), add_day(deathsT), add_day(recoveredT), add_day(mortalityT)","6fb1adf7":"allcountries_ordered = confirmed.set_index(['Country_Region']).iloc[:,-2].sort_values(ascending=False).index.tolist()","bd5fc576":"confirmed.set_index(['Country_Region']).iloc[:,-2].sort_values(ascending=False).to_csv('confirmed_countries.csv')","7726cfad":"#\ndef df_day1(df, confirmed):\n    df_day1 = pd.DataFrame({'Days since 100 cases' : np.arange(1000)}).set_index('Days since 100 cases')\n    countries_df = df.columns.tolist()[:-2]\n    countries_conf = confirmed.columns.tolist()[:-2]\n    #print(len(countries_df), len(confirmed.columns.tolist()[:-2]))\n    for ic, country in enumerate(countries_df):\n        for ic2, country2 in enumerate(countries_conf):\n            if country == country2:\n                dfsub = df[confirmed[country] > 100.][country]\n                df_day1[country] = np.nan\n                df_day1.loc[:len(dfsub)-1,country] = (dfsub).tolist()\n        #try:\n        #except:\n        #    pass\n    df_day1 = df_day1.dropna(how='all')\n    #df_day1 = df_day1.fillna(0.)\n    return df_day1","5e0bf3a8":"confirmed_day1 = df_day1(confirmedT, confirmedT)\ndeaths_day1 = df_day1(deathsT, confirmedT)\nrecovered_day1 = df_day1(recoveredT, confirmedT)\nmortality_day1 = df_day1(mortalityT, confirmedT)\nconfirmednorm_day1 = confirmed_day1\/confirmed_day1.loc[0,:]\nmaxday = confirmed_day1.shape[0]","5610f362":"date_day1 = confirmedT.copy()\nfor column in date_day1:\n    date_day1[column] = confirmedT.index.tolist()\ndate_day1 = df_day1(date_day1, confirmedT)","4890722a":"date_day1.T.sort_values(by=0).head()","158c2e21":"allcountries = dftrain['Country_Region'].unique().tolist()\n#allcountries_confirmed = confirmed['Country\/Region'].unique().tolist()\n#allcountries_deaths = deaths['Country\/Region'].unique().tolist()\n#allcountries_recovered = confirmed['Country\/Region'].unique().tolist()\n#countries = ['France', 'Italy', 'Spain', 'US', 'Germany', 'United Kingdom', 'China']","03a7fdc9":"def logistic_curve(x, k, x_0, ymax):\n    return ymax \/ (1 + np.exp(-k*(x-x_0)))","53200e16":"def logistic_curve2(x, k1, k2, x_0, ymax):\n    return ymax \/ (1 + np.exp(-k1*(x-x_0)) + np.exp(-k2*(x-x_0)))","2c89fc4b":"#\nlist_countries = dftrain[dftrain['Date'] == '2020-01-22']['Country_Region'].tolist()\nlist_states = dftrain[dftrain['Date'] == '2020-01-22']['Province_State'].tolist()\ndatenow = datetime.now()","dc0fc3a2":"list_date_pand = [] ; list_maxcases = []; list_maxfat = []\nfor country, state in list(zip(list_countries, list_states)):\n    df2 = dftrain.loc[(dftrain['Country_Region'] == country) & (dftrain['Province_State'] == state)].fillna('None')\n    maxcases, maxfat = df2['ConfirmedCases'].max(), df2['Fatalities'].max()\n    date_pand2 = []\n    date_pand = df2[df2['ConfirmedCases'] > 100.]['Date'].tolist()#[0]\n    try:\n        list_date_pand.append(pd.to_datetime(date_pand[0]))\n    except:\n        list_date_pand.append(pd.to_datetime(datenow))\n    list_maxcases.append(maxcases) ; list_maxfat.append(maxfat)\n#\ndfstartpand = pd.DataFrame(np.array([list_countries, list_states, list_date_pand, list_maxcases, list_maxfat]).T, \n                           columns=['Country_Region', 'Province_State', 'Start_Pandemic', 'ConfirmedCases', 'Fatalities'])\ndfstartpand['Start_Pandemic'] = dfstartpand['Start_Pandemic'].dt.date","b5f9fc8b":"#\ndfstartpand_ordered = dfstartpand.sort_values(by=['Start_Pandemic', 'ConfirmedCases', 'Fatalities'], ascending=[True, False, False])#.head(5)\ncountry_state_ordered = list(zip(dfstartpand_ordered['Country_Region'].tolist(), dfstartpand_ordered['Province_State']))\n#country_state_ordered = list(zip(dfstartpand_ordered[['Country_Region', 'Province_State']]))\n#\ndatetrain = dftrain['Date'].unique()#.dt.date\ndatetest = dftest['Date'].unique()#.dt.date","fcf8599b":"starttest","4735ceb0":"from scipy.optimize import curve_fit\nimport math\n#\ndftest['ConfirmedCases_logreg'] = 0.0 ; dftrain['ConfirmedCases_logreg'] = 0.0\ndftest['Fatalities_logreg'] = 0.0 ; dftrain['Fatalities_logreg'] = 0.0\np0 = 1\n#\nfor country, state in country_state_ordered:\n    #print(country+' '+state)\n    #country2plot = 'Italy' ; state2plot = 'None'\n    masktrain = (dftrain['Country_Region'] == country) & (dftrain['Province_State'] == state)\n    masktrain2 = (dftrain['Country_Region'] == country) & (dftrain['Province_State'] == state) & \\\n                 (dftrain['Date'] <= '2020-04-07') & (dftrain['Date'] >= starttest) \n    masktest = (dftest['Country_Region'] == country) & (dftest['Province_State'] == state)\n    masktest2 = (dftest['Country_Region'] == country) & (dftest['Province_State'] == state) & \\\n                (dftest['Date'] <= '2020-04-07')\n    df2plot = dftrain[masktrain].set_index('Date')\n    #print(len(dftrain[masktrain2]))\n    #\n    X = np.arange(len(df2plot))\n    X_test = (np.timedelta64(datetest[0]-datetrain[0], 'D')).astype(float)+np.arange(0,len(datetest))\n    #\n    try:\n        y = df2plot['ConfirmedCases']\n        p0_cases = [1\/(len(X)\/2.), X[-1], y.max()]\n        popt, pcov = curve_fit(logistic_curve, X, y, p0=p0_cases,bounds=([0,0,0],np.inf), maxfev=1000)\n        k_cases, x_0_cases, ymax_cases = popt\n        cases_train_fc = pd.Series(logistic_curve(X, k_cases, x_0_cases, ymax_cases),index=df2plot.index)\n        cases_test_fc = pd.Series(logistic_curve(X_test, k_cases, x_0_cases, ymax_cases),index=datetest)\n        #\n        dftest.loc[masktest,'ConfirmedCases_logreg'] = cases_test_fc.tolist()\n        dftrain.loc[masktrain,'ConfirmedCases_logreg'] = cases_train_fc.tolist()\n    except:\n        print(country+' '+state+' Unable to fit the confirmed cases')\n        dftest.loc[masktest,'ConfirmedCases_logreg'] = dftrain.loc[masktrain,'ConfirmedCases'].iloc[-1]#cases_test_fc.tolist()\n        dftrain.loc[masktrain,'ConfirmedCases_logreg'] = dftrain.loc[masktrain,'ConfirmedCases']\n    try:\n        y = df2plot['Fatalities']#.rolling(3).mean()\n        p0_deaths = [1\/(len(X)\/2.), X[-1], y.max()]\n        popt, pcov = curve_fit(logistic_curve, X, y, p0=p0_deaths,bounds=([0,0,0],np.inf), maxfev=1000)\n        k_deaths, x_0_deaths, ymax_deaths = popt\n        deaths_train_fc = pd.Series(logistic_curve(X, k_deaths, x_0_deaths, ymax_deaths),index=datetrain)\n        deaths_test_fc = pd.Series(logistic_curve(X_test, k_deaths, x_0_deaths, ymax_deaths),index=datetest)\n        #\n        dftest.loc[masktest,'Fatalities_logreg'] = deaths_test_fc.tolist()\n        dftrain.loc[masktrain,'Fatalities_logreg'] = deaths_train_fc.tolist()\n    except:\n        print(country+' '+state+' Unable to fit the fatalities')\n        dftest.loc[masktest,'Fatalities_logreg'] = dftrain.loc[masktrain,'Fatalities'].iloc[-1] #deaths_test_fc.tolist()\n        dftrain.loc[masktrain,'Fatalities_logreg'] = dftrain.loc[masktrain,'Fatalities']\n    dftest.loc[masktest2,'ConfirmedCases_logreg'] = dftrain.loc[masktrain2,'ConfirmedCases'].tolist()\n    dftest.loc[masktest2,'Fatalities_logreg'] = dftrain.loc[masktrain2,'Fatalities'].tolist()","9fa63357":"country2plot = 'Japan' ; state2plot = 'None'\nmasktrain = (dftrain['Country_Region'] == country2plot) & (dftrain['Province_State'] == state2plot)\nmasktest = (dftest['Country_Region'] == country2plot) & (dftest['Province_State'] == state2plot)\ntrain2plot = dftrain[masktrain].set_index('Date')\ntest2plot = dftest[masktest].set_index('Date')\n#\nfig = plt.figure(0,figsize=[20,5])\nfig.subplots_adjust(wspace=0.25, hspace=0.45)\nax = fig.add_subplot(1,4,1)\nax.set_ylabel('Total number of confirmed cases')\nax = train2plot['ConfirmedCases'].rolling(1).mean().plot()\nax = train2plot['ConfirmedCases_logreg'].plot()\nax = test2plot['ConfirmedCases_logreg'].plot()\n#\nax = fig.add_subplot(1,4,2)\nax.set_ylabel('Total number of fatalities')\nax = train2plot['Fatalities'].rolling(1).mean().plot()\nax = train2plot['Fatalities_logreg'].plot()\nax = test2plot['Fatalities_logreg'].plot()\n#\nax = fig.add_subplot(1,4,3)\nax.set_ylabel('Confirmed cases per day')\nax = train2plot['ConfirmedCases'].diff().rolling(3).mean().plot()\nax = train2plot['ConfirmedCases_logreg'].diff().plot()\nax = test2plot['ConfirmedCases_logreg'].diff().plot()\n#\nax = fig.add_subplot(1,4,4)\nax.set_ylabel('Fatalities per day')\nax = train2plot['Fatalities'].diff().rolling(3).mean().plot()\nax = train2plot['Fatalities_logreg'].diff().plot()\nax = test2plot['Fatalities_logreg'].diff().plot()","9ee409ee":"dfsubm['ConfirmedCases'] = dftest['ConfirmedCases_logreg']#.tol\ndfsubm['Fatalities'] = dftest['Fatalities_logreg']#.tolist()","1df9a3b0":"dfsubm.head(5)","65c0900d":"dfsubm.to_csv('submission.csv', index=False)","5de2cd9d":"## 1.1. Read csv files","7e08c7f0":"#### Compute the distance between all countries from the Haversine formula using their latitude and longitude.","837ea9f6":"# 1. Data Importation and cleaning","ed131432":"#### Read the csv files from kaggle.","9d948535":"#### Create dataframes as function of days from \"Day 1\" of the epidemic, defined here as day when 100 cases have been confirmed in each country","7a0d2b7f":"#### Transpose the CSSE dataframes ","0f6e7340":"#### Sort the summary table as function of pandemic start\n","a82f2ff1":"## 2. Logistic Regression","852c1daa":"## 1.3 Read other useful dataframes","afaf2d72":"#### Read the csv files on the Johns Hopkins CSSE database on github.","4f1f6607":"#### Create dataframe listing the distance between all countries and regions using the haversine function."}}