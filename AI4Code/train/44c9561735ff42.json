{"cell_type":{"1321a2c9":"code","b777c0d5":"code","846e6486":"code","01026e6e":"code","5b3ca666":"code","5495a323":"code","6307efee":"code","a1f76aaf":"code","59eb5403":"code","c68c9244":"code","c316c07d":"code","101c0300":"code","a96b8499":"code","4f845bf9":"code","52d0b758":"markdown","530176f7":"markdown","db0483b5":"markdown","6716e4dc":"markdown","91b73a4d":"markdown","cc11412e":"markdown","7ef32a44":"markdown","dde28da3":"markdown","5f9338f6":"markdown","d08f01ef":"markdown","09d04916":"markdown","66bf3c6e":"markdown","fe048816":"markdown","a940b4b6":"markdown","53efb189":"markdown","51726dfd":"markdown","329b56a9":"markdown","1d88a7d2":"markdown","90743e5e":"markdown","03a0b9b9":"markdown"},"source":{"1321a2c9":"import geojson #used to handle geojson files\nimport matplotlib.pyplot as plt #used to plot the final graphs\nfrom shapely.geometry import LineString #used to handle shape and path objects\nimport pandas as pd \nimport seaborn as sns\nimport numpy as np\n\nfrom datashader.utils import lnglat_to_meters as webm","b777c0d5":"with open(\"..\/input\/osm-overpass-tutorial-dataset\/pubs.geojson\") as file:\n    data = geojson.load(file)","846e6486":"data.keys()","01026e6e":"data.features[0].keys()","5b3ca666":"nodes = []\nfor node in data.features:\n    nodes.append(node.geometry.coordinates)","5495a323":"from matplotlib.colors import LogNorm\n\ndf = pd.DataFrame(nodes)\ndf.columns = [\"Longitude\", \"Latitude\"]\ndf.Longitude, df.Latitude = webm(df.Longitude, df.Latitude)\ndf[\"Lat_binned\"] = pd.cut(df.Latitude, 150)\ndf[\"Lon_binned\"] = pd.cut(df.Longitude, 150)\n\ndf = df.pivot_table(\n        values='Latitude', \n        index='Lat_binned', \n        columns='Lon_binned', \n        aggfunc=np.size)\ndf = df[::-1] #reverse latitude values\ndf = df.fillna(1) #pivoting produces nans that needs to be converted to values to be displayed (I cannot fill with zero because the color scale is logarithmic)\n\nfig, ax = plt.subplots(figsize=(9, 12.24))\nlog_norm = LogNorm(vmin=df.min().min(), vmax=df.max().max())\nsns.heatmap(df, norm = log_norm, ax = ax)\nplt.axis(\"off\");","6307efee":"with open(\"..\/input\/osm-overpass-tutorial-dataset\/roads.geojson\") as file:\n    data = geojson.load(file)\n\ndata.keys()","a1f76aaf":"data.features[0].properties.keys()","59eb5403":"roads = {}\nrails = {}\nfor path in data.features:\n        # street data\n    if \"highway\" in path.properties.keys():\n        if path[\"properties\"][\"highway\"] not in roads.keys():\n            roads[path[\"properties\"][\"highway\"]] = []\n        \n        '''\n        if path[\"geometry\"][\"type\"]==\"Polygon\":\n            cart = [[x, y] for x, y in path[\"geometry\"][\"coordinates\"][0]]\n            roads[path[\"properties\"][\"highway\"]].append(Polygon(cart))\n                     \n        '''    \n        if path[\"geometry\"][\"type\"]==\"LineString\":\n            cart = [[x, y] for x, y in path[\"geometry\"][\"coordinates\"]]\n            roads[path[\"properties\"][\"highway\"]].append(LineString(cart))\n                      \n    # railway data\n    elif \"railway\" in path[\"properties\"].keys():\n        if path[\"properties\"][\"railway\"] not in rails.keys():\n            rails[path[\"properties\"][\"railway\"]] = []\n         \n        '''\n        if path[\"geometry\"][\"type\"]==\"Polygon\":\n            cart = [[x, y] for x, y in path[\"geometry\"][\"coordinates\"][0]]\n            rails[path[\"properties\"][\"railway\"]].append(Polygon(cart))\n        '''\n        \n        if path[\"geometry\"][\"type\"]==\"LineString\":\n            cart = [[x, y] for x, y in path[\"geometry\"][\"coordinates\"]]\n            rails[path[\"properties\"][\"railway\"]].append(LineString(cart))","c68c9244":"str(roads[\"primary\"][0])","c316c07d":"def plot_paths(ax, paths, color, width, linestyle):\n    for path in paths:\n        '''\n        if isinstance(path, Polygon):\n            x, y = path.exterior.xy   \n        '''\n        \n        if isinstance(path, LineString):\n            x, y = path.xy\n        else:\n            continue\n        \n        mercator = webm(list(x), list(y))\n        \n        \n        ax.plot(mercator[0], mercator[1], color=color, linewidth=width, linestyle=linestyle, solid_capstyle='round')","101c0300":"roads.keys()","a96b8499":"rails.keys()","4f845bf9":"fig, ax = plt.subplots(figsize=(10, 10))\n\nbg = '#011654'\nrail_color = '#CF142B'\nstreet_color = '#FFFFFF'\n\nplot_paths(ax, roads[\"motorway\"], street_color, 0.8, \"-\")\nplot_paths(ax, roads[\"motorway_link\"], street_color, 0.8, \"-\")\nplot_paths(ax, roads[\"trunk\"], street_color, 0.8, \"-\")\nplot_paths(ax, roads[\"trunk_link\"], street_color, 0.8, \"-\")\n\nplot_paths(ax, roads[\"primary\"], street_color, 0.6, \"-\")\nplot_paths(ax, roads[\"primary_link\"], street_color, 0.6, \"-\")\n\nplot_paths(ax, roads[\"secondary\"], street_color, 0.4, \"-\")\nplot_paths(ax, roads[\"secondary_link\"], street_color, 0.4, \"-\")\n\nplot_paths(ax, rails[\"rail\"], rail_color, 0.6, '-.')\n\nax.set_facecolor(bg)\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['bottom'].set_visible(False)\nax.spines['left'].set_visible(False)\nax.get_xaxis().set_ticks([])\nax.get_yaxis().set_ticks([])\n\nplt.show()","52d0b758":"We can then plot each LineString, extracting the coordinates.<br>\nWhite lines represents streets while red lines represents railways<br>\nAs before, the case of Polygons is left commented.","530176f7":"# London streets\n\nThe data extraction procedure is exactly the same, the only thing that changes is the query (you don't say) <br>\nIn  this case I will use a bbox to select the region I need.<br>\nThe larger the area, the longer it takes to return the results, so be careful. For this reason, in the query I omitted some streets types.<br>\nAll the info about diffentent type of highways and railways can be found on the official OpenStreetMap Wiki [Highway section](https:\/\/wiki.openstreetmap.org\/wiki\/Key:highway) and [Railway section](https:\/\/wiki.openstreetmap.org\/wiki\/Railways)","db0483b5":"If we zoom in we can select a node to see all the data:<br> \n![](https:\/\/imgur.com\/J4ZxWUd.png)<br>\nFor our analisys, the coordinates of the points are enough.","6716e4dc":"Now we can plot the points to see the results.","91b73a4d":"Let's see how data is saved inside the file.","cc11412e":"I made another [kernel](https:\/\/www.kaggle.com\/lorenzodenisi\/street-map-visualization-from-open-street-map-data) where I show how to plot the highways of the city of Turin.<br>\nIn that case, considering all type of highways, there are some polygons although its difficult to notice them with a low scale.","7ef32a44":"In this case there are only LineStrings and not Polygons because we are not selecting *pedestrians* or other type of highway that can be represented by areas, but in general they can be saved in the same manner, importing Polygons (the needed cose is left commented)<br>","dde28da3":"When dealing with highways there are two types of object, LineString that represents a line and Polygon that represent a shape.<br>\nShapes are useful when you are trying to plot squares or buildings.<br>\n![](https:\/\/imgur.com\/6Aa23fz.png)<br>\nAs you can see, the map is pretty messed up:\n![](https:\/\/imgur.com\/VMhKJ3v.png)","5f9338f6":"So we can export the data as a GEOJSON file by clicking on **Export** in the upper bar and **download as GeoJSON** on the pop-up window that appears.\n![](https:\/\/imgur.com\/Ggeswzf.png)","d08f01ef":"Loading file with geojson library","09d04916":"We are interested in ***features***.<br>\nEvery feature is composed by:\n* a **type** (in this case, always \"feature\"), \n* a unique **id**,\n* a **geometry** that specify if the object is a point, a shape or a path with the related coordinates,\n* the **properties** that are all the informations we have seen clicking on a node on the map","66bf3c6e":"LineString are composed by two couples of coordinates indicating starting and ending point.","fe048816":"# How to get data from OpenStreetMap\n\nIn this notebook I'd like to show how to query data from OpenStreetMap from the browser with [Overpass Turbo](https:\/\/overpass-turbo.eu\/) <br>\nA bunch of different data can be queried, from highways to districts boundaries or amenities like pubs, benches, restaurants. <br>\nIn this example I'll use data of pubs in the Great Britain to show how to deal with Points, and then, data about streets of London to show how to deal with LineStrings.","a940b4b6":"![](https:\/\/imgur.com\/dWexWAt.png)\n<br>\n<br>\nIn the query we can see the country specification **area[\"ISO3166-1\"=\"GB\"]** that stands for Great Britain<br>\nAlternatively we can manually select a rectangular region (bbox), in this case the query changes a bit.<br>\n*The region can be selected clicking the fifth small button on the upper-left of the map.*\n![](https:\/\/imgur.com\/xJ0AsxS.png)","53efb189":"As said before we only need the coordinates, so we can collect all of them.<br>\nWe cast all geometry coordinates to Point, this is not strictly necessary but is consistent with the method used later to plot paths and shapes.","51726dfd":"# Great Britain pubs\nFirst of all we need to build the query processed by Overpass Turbo.<br>\nOn the site we can see that there is an editor on the left that allows you to write your query or generate it with the wizard.<br>\n\n","329b56a9":"We can see from the map all the nodes selected by the query.<br>\n![](https:\/\/imgur.com\/TcDoRfS.png)","1d88a7d2":"In the document properties there is also \"highway\" or \"railway\" that indicates the type (that can be motorway, trunk, primary etc. for highways)","90743e5e":"Now we have tha GeoJSON file so we can start coding.","03a0b9b9":"Now we can go back to the code"}}