{"cell_type":{"11a70b52":"code","b2246550":"code","c1440083":"code","5feaa05f":"code","a6314e91":"code","e971df6c":"code","4cc5cbae":"code","186588cf":"markdown","d78c7768":"markdown","1b0eb203":"markdown","ba0e2893":"markdown","b34a5f8a":"markdown","549f061b":"markdown"},"source":{"11a70b52":"import os\n\nimport cv2\nimport numpy as np\nimport pandas as pd\nimport skimage.io\nfrom tqdm.notebook import tqdm","b2246550":"data_dir = '\/kaggle\/input\/hubmap-kidney-segmentation'\nsplit = 'train' # Change this to use test\ntile_size = 512\next = 'png' # Change to jpg for smaller files","c1440083":"# https:\/\/www.kaggle.com\/paulorzp\/rle-functions-run-lenght-encode-decode\ndef mask2rle(img):\n    '''\n    img: numpy array, 1 - mask, 0 - background\n    Returns run length as string formated\n    '''\n    pixels= img.T.flatten()\n    pixels = np.concatenate([[0], pixels, [0]])\n    runs = np.where(pixels[1:] != pixels[:-1])[0] + 1\n    runs[1::2] -= runs[::2]\n    return ' '.join(str(x) for x in runs)\n \ndef rle2mask(mask_rle, shape=(1600,256)):\n    '''\n    mask_rle: run-length as string formated (start length)\n    shape: (width,height) of array to return \n    Returns numpy array, 1 - mask, 0 - background\n\n    '''\n    s = mask_rle.split()\n    starts, lengths = [np.asarray(x, dtype=int) for x in (s[0:][::2], s[1:][::2])]\n    starts -= 1\n    ends = starts + lengths\n    img = np.zeros(shape[0]*shape[1], dtype=np.uint8)\n    for lo, hi in zip(starts, ends):\n        img[lo:hi] = 1\n    return img.reshape(shape).T","5feaa05f":"train_df = pd.read_csv(f'{data_dir}\/train.csv')\nsub_df = pd.read_csv(f'{data_dir}\/sample_submission.csv')","a6314e91":"# Those folders will store our images\nos.makedirs(f'{split}_tiles\/images', exist_ok=True)\nos.makedirs(f'{split}_tiles\/masks', exist_ok=True)\n\n# This list will contain information about all our images\nmeta_ls = []\n\n# Choose a dataframe based on the split\nif split == 'train':\n    df = train_df\nelse:\n    df = sub_df\n\n# The break down starts here\nfor ix in range(df.shape[0]):\n    img_id = df.id[ix]\n    path = f\"{data_dir}\/{split}\/{img_id}.tiff\"\n    img = skimage.io.imread(path).squeeze()\n    mask = rle2mask(df.encoding[ix], shape=img.shape[1::-1])\n\n    x_max, y_max = img.shape[:2]\n\n    for x0 in tqdm(range(0, x_max, tile_size)):\n        x1 = min(x_max, x0 + tile_size)\n        for y0 in range(0, y_max, tile_size):\n            y1 = min(y_max, y0 + tile_size)\n\n            img_tile = img[x0:x1, y0:y1]\n            mask_tile = mask[x0:x1, y0:y1]\n\n            img_tile_path = f\"{split}_tiles\/images\/{img_id}_{x0}-{x1}x_{y0}-{y1}y.{ext}\"\n            mask_tile_path = f\"{split}_tiles\/masks\/{img_id}_{x0}-{x1}x_{y0}-{y1}y.png\"\n\n            cv2.imwrite(img_tile_path, cv2.cvtColor(img_tile, cv2.COLOR_RGB2BGR))\n            cv2.imwrite(mask_tile_path, mask_tile)\n\n            meta_ls.append([\n                img_id, x0, x1, y0, y1, img_tile.min(), img_tile.max(), \n                mask_tile.max(), img_tile_path, mask_tile_path\n            ])","e971df6c":"meta_df = pd.DataFrame(meta_ls, columns=['image_id', 'x0', 'x1', 'y0', 'y1', 'min_pixel_value', 'max_pixel_value', 'max_mask_value', 'image_tile_path', 'mask_tile_path'])\nmeta_df.to_csv(f'{split}_metadata.csv', index=False)\nmeta_df.head()","4cc5cbae":"%%time\n# c: create, q: quiet, f: file\n!tar -cf train_tiles.tar train_tiles --remove-files","186588cf":"## Helper function","d78c7768":"## Convert to tar","1b0eb203":"## Variables","ba0e2893":"## Break down all images","b34a5f8a":"## Load the CSVs","549f061b":"## References\n\n* This [notebook](https:\/\/www.kaggle.com\/pestipeti\/decoding-rle-masks) by Peter shows how to load the images using `skimage.io`"}}