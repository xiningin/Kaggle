{"cell_type":{"3c5e3afe":"code","c1a573bc":"code","cee469e0":"code","0826f48e":"code","5f9779f8":"code","a3ed209b":"code","61815cf3":"code","a7df3269":"code","ed341850":"code","39bc0e51":"code","9709875b":"code","00898a9b":"code","bd4771b8":"code","ae01e17d":"code","ce37a75f":"code","dd7b74e0":"code","b28cd82e":"code","c5410698":"code","3db037ae":"markdown","2cbbd4b9":"markdown","6f534d3e":"markdown","3417d6e2":"markdown","27a83aea":"markdown","84016afa":"markdown","dd2e7c75":"markdown","db2177cb":"markdown","11870662":"markdown","69a06bde":"markdown","ee3aa55c":"markdown","fc1f5b27":"markdown","ac1d7365":"markdown","7901129c":"markdown","1627e99e":"markdown","c7d4694c":"markdown","0434c2f7":"markdown","2b9fe5e5":"markdown","4e1d0734":"markdown"},"source":{"3c5e3afe":"import pandas as pd # for data reading and manipulation\nimport matplotlib.pyplot as plt # for visualization\nimport seaborn as sns # for visualization\nimport numpy as np # for numerical computation\n\n%matplotlib inline\n\n# load the groceries-dataset\ngroceries = pd.read_csv('..\/input\/groceries-dataset\/Groceries_dataset.csv', parse_dates=['Date'])\ngroceries.shape","c1a573bc":"# let's take a peek of dataset\ngroceries.head()","cee469e0":"print(\"We have the data from\",groceries.Date.min(),\"to\", groceries.Date.max())","0826f48e":"# For extracting year,month and day to new column,follow the code:\ngroceries['year'] = groceries['Date'].dt.year\ngroceries['month'] = groceries['Date'].dt.month\ngroceries['day'] = groceries['Date'].dt.day\ngroceries['day_of_week'] = groceries['Date'].dt.day_name()\ngroceries.head()","5f9779f8":"plt.rcParams[\"figure.figsize\"] = [13, 7]\n\ncolor = plt.cm.spring(np.linspace(0, 1, 5))\n\nfig, (ax, ax2) = plt.subplots(ncols=2)\n\ngroceries['Member_number'].value_counts().head().plot(kind='bar', color = color, ax=ax, title='Customers who visited the store more often');\nax.set_xlabel(\"Customer ID\")\nax.set_ylabel(\"Count\")\ngroceries['Member_number'].value_counts(ascending=True).head().plot(kind='bar', color = color, ax=ax2, title='Customers who visited the store less often');\nax2.set_xlabel(\"Customer ID\")\nax2.set_ylabel(\"Count\");","a3ed209b":"plt.rcParams[\"figure.figsize\"] = [13, 7]\n\ncolor = plt.cm.winter(np.linspace(0, 1, 10))\n\nfig, (ax, ax2) = plt.subplots(ncols=2)\n\ngroceries['Date'].value_counts().head().plot(kind='bar', color = color, ax=ax, title='Date at which the store got the highest number of visits');\nax.set_xlabel(\"Date\")\nax.set_ylabel(\"Count\")\ngroceries['Date'].value_counts(ascending=True).head().plot(kind='bar', color = color, ax=ax2, title='Date at which the store got the lowest number of visits');\nax2.set_xlabel(\"Date\")\nax2.set_ylabel(\"Count\");","61815cf3":"plt.rcParams[\"figure.figsize\"] = [13, 7]\ncolor = plt.cm.twilight(np.linspace(0, 1, 10))\n\nfig, (ax, ax2) = plt.subplots(ncols=2)\n\ngroceries['itemDescription'].value_counts().head().plot(kind='bar', color = color, ax=ax, title='Most often bought Groceries');\nax.set_xlabel(\"Grocery items\")\nax.set_ylabel(\"Count\")\ngroceries['itemDescription'].value_counts(ascending=True).head().plot(kind='bar', color = color, ax=ax2, title='Least bought Groceries');\nax2.set_xlabel(\"Grocery items\")\nax2.set_ylabel(\"Count\");","a7df3269":"plt.style.use('fivethirtyeight')\nplt.rcParams[\"figure.figsize\"] = [12, 6]\ncolor = plt.cm.ocean(np.linspace(0, 1, 31))\n\ngroceries['day'].value_counts().plot(kind='bar', color=color, title='Groceries bought in each day of the month').set(xlabel='Day of the month', ylabel='Count');","ed341850":"plt.rcdefaults()\nplt.rcParams[\"figure.figsize\"] = [13, 7]\ncolor = plt.cm.autumn(np.linspace(0, 1, 12))\n\ngroceries['month'].value_counts().plot(kind='bar', color=color, title='Groceries bought in each month').set(xlabel='Month', ylabel='Count');","39bc0e51":"plt.rcdefaults()\nplt.rcParams[\"figure.figsize\"] = [13, 7]\n\ngroceries['year'].value_counts().plot(kind='bar', title='Groceries bought in each year').set(xlabel='Year', ylabel='Count');","9709875b":"groceries['day_of_week'].value_counts().head(15).plot.pie(figsize = (15, 8), explode = (0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1))\n\nplt.title('Groceries count on each day',fontsize = 20)\nplt.xlabel('')\nplt.ylabel('')\nplt.xticks(rotation = 90)\nplt.show()","00898a9b":"# let's aggregate the data with date to see more clearly which items are bought on which date\n# create a new dataframe and store unique visitors and unique bought items\ngroceries_time = pd.DataFrame(groceries.groupby('Date')['itemDescription'].nunique().index)\ngroceries_time['members_count'] = groceries.groupby('Date')['Member_number'].nunique().values\ngroceries_time['items_count'] = groceries.groupby('Date')['itemDescription'].nunique().values\ngroceries_time['items'] = groceries.groupby('Date')['itemDescription'].unique().values\ngroceries_time.set_index('Date',inplace=True)\ngroceries_time.head()","bd4771b8":"plt.rcParams[\"figure.figsize\"] = [10, 5]\n\nsns.kdeplot(data = groceries_time['members_count'],shade=True);","ae01e17d":"groceries_time['members_count'].plot(figsize=(10, 5),title='Number of member visited with time');","ce37a75f":"# importing the library\ntry:\n    import apyori\nexcept:\n    !pip install apyori\n\nfrom apyori import apriori # for association rule learning models","dd7b74e0":"transactions = groceries_time['items'].tolist()","b28cd82e":"rules = apriori(transactions = transactions, min_support=0.00030, min_confidance=0.01, min_lift=3, min_length=2, max_length=2)\n#let's transform them into a list\nresults = list(rules)\n\ndef inspect(results):\n    '''\n    function to put the result in well organised pandas dataframe\n    '''\n    lhs         = [tuple(result[2][0][0])[0] for result in results]\n    rhs         = [tuple(result[2][0][1])[0] for result in results]\n    supports    = [result[1] for result in results]\n    confidences = [result[2][0][2] for result in results]\n    lifts       = [result[2][0][3] for result in results]\n    return list(zip(lhs, rhs, supports, confidences, lifts))\n\nresultsinDataFrame = pd.DataFrame(inspect(results), columns = ['Item #1', 'Item #2', 'Support', 'Confidence', 'Lift'])\nresultsinDataFrame.head()","c5410698":"resultsinDataFrame.nlargest(n=10, columns='Lift')","3db037ae":"We found that:\n* 28th is the day of the month where highest amount of items are bought\n* 31st is the day of the month where lowest amount of items are bought (maybe because at the end of the month people were short on budget.)\n\nLet's look at the groceries bought in each month.","2cbbd4b9":"**Dataset Description**\n* Member_number: A unique id of each customer who bought groceries\n* Date: The date at which the customer bought the groceries\n* itemDescription: Description of the item that customer bought\n\n# Exploratory Data Analysis\n\nIn EDA, we will first start with individual feature analysis then we will explore multiple feature interactions.\n\n**Let's look at the time duration of the data we have given.**","6f534d3e":"It appears that store had a more or less steady increase in its stock price over the from January 2014 to the January 2016 window. Therefore, we will now use association rules to find pairs of items that are associated to each other.\n\n\n# Associate Rule Learning\n\nAssociation rule learning is a technique to discover how items are associated to each other. Association can be measured in three common ways.\n\n## Support\n\nIt tell us about how popular an itemset is, as measured by the proportion of transactions in which an itemset appears. It is measured as follows:\n\nFor Movie Recommendation, we calculate it as:\n$$\n\\begin{equation*}\nsupport(M) = \\frac{\\text{number of user watchlists containing M}}{\\text{total number of user watchlists}}\n\\end{equation*}\n$$\n\nwheras for Market Basket Optimization, we calculate it as:\n$$\n\\begin{equation*}\nsupport(I) = \\frac{\\text{number of transactions containing I}}{\\text{total number of transactions}}\n\\end{equation*}\n$$\n\n## Confidence\n\nIt tell us about how likely item B is purchased when item A is purchased, expressed as {A -> B}. It is measured as follows:\n\nFor Movie Recommendation, we calculate it as:\n$$\n\\begin{equation*}\nconfidence(M_1\\rightarrow{M_2}) = \\frac{\\text{number of user watchlists containing $M_1$ and $M_2$}}{\\text{number of user watchlists containing $M_1$}}\n\\end{equation*}\n$$\n\nwheras for Market Basket Optimization, we calculate it as:\n$$\n\\begin{equation*}\nconfidence(I_1\\rightarrow{I_2}) = \\frac{\\text{number of transactions containing $I_1$ and $I_2$}}{\\text{number of transactions containing $I_1$}}\n\\end{equation*}\n$$\n\n## Lift\n\nIt tell us about how likely the item B is purchased when the item A is purchased while controlling for how popular item B is. It is measured as follows:\n\nFor Movie Recommendation, we calculate it as:\n$$\n\\begin{equation*}\nlift(M_1\\rightarrow{M_2}) = \\frac{Confidence(M_1\\rightarrow{M_2})}{Support(M_2)}\n\\end{equation*}\n$$\n\nwheras for Market Basket Optimization, we calculate it as:\n$$\n\\begin{equation*}\nlift(I_1\\rightarrow{I_2}) = \\frac{Confidence(I_1\\rightarrow{I_2})}{Support(I_2)}\n\\end{equation*}\n$$\n\n## Apriori\n\nApriori algorithm consist of:\n\n1. Step 1: Set a minimum support and confidence.\n2. Step 2: Take all the subsets in transactions having higher support than minimum support.\n3. Step 3: Take all the rules of these subsets having higher confidence than minimum confidence.\n4. Step 4: Sort the rules by decreasing lift.\n\nWe will be using `apriori` function from `apyori` package to implement the apriori algorithm. It return all the different association measures (or the rules) such support, confidence and lift.","3417d6e2":"We found that:\n* The Customer Visiting Rate is equally distributed across all the days of week.\n\n## Multiple Feature Interactions Visualisation\n\nWe started with looking at each individual feature, let's start looking at feature relations, we will first go through time series analysis to manipulate and visualize time series data. To make it easier, we will aggregate customer's data and items data into single dataframe with respect to time.","27a83aea":"We found that:\n* In 2015, highest number of customers visited the store.\n* Both 2015 and 2014 are really close in terms of customer visiting rate.\n\nLet's look at groceries bought in each day of the week.","84016afa":"We found that:\n* In August, the highest amount of items are purchased.\n* In September, the lowest amount of items are purchased.\n\nLet's look at the groceries bought in each Year.","dd2e7c75":"Let's run the algorithm and transform the result into well organised pandas dataframe to see which item pairs are associated more or less.","db2177cb":"It's seems like data is uniformly distributed without any trend. Let's verify that using lineplots.","11870662":"**Table of Contents:**\n\n1. [Introduction](#Introduction)\n2. [Overview: Dataset Description](#Overview)\n2. [Exploratory Data Analysis](#Exploratory-Data-Analysis)\n    * [Individual Feature Visualisation](#Individual-Feature-Visualisation)\n    * [Multiple Feature Interaction Visualisation](#Multiple-Feature-Interactions-Visualisation)\n3. [Associate Rule Learning](#Associate-Rule-Learning)\n    * [Support](#Support)\n    * [Confidence](#Confidence)\n    * [Lift](#Lift)\n    * [Apriori](#Apriori)","69a06bde":"# Overview","ee3aa55c":"## Individual Feature Visualisation\n\nWe start by simply plotting the distributions of the each feature individually, before moving on to multi-feature visuals and correlations. Here, we\u2019re dealing with the features one by one.\n\nLet's look at the customers' visiting rate.","fc1f5b27":"# Introduction\n\nThis notebook is an introduction in Association Rule Mining for the [Groceries dataset](https:\/\/www.kaggle.com\/heeraldedhia\/groceries-dataset) in python. We will first go through a brief Exploratory Data Analysis and then implement one of most popular Association Rule Learning Model. The aim of this dataset is to identify the association rules for the Market Basket Analysis. \n\nAssociation Rule Learning (or Associate Rule Mining) is a rule-based machine learning method to discover how items are associated to each other. Stores use them to figure out products that are bought together, this way they can provide different offers to the different customers e.g, buy one get one free. Earlier, recommendation systems like Amazon, Netflix used them.  In this notebook, we will go through Apriori type of Association Rule Learning model\n\n*We will be using `apyori` package from python to implement the apriori model.*\n\nLet\u2019s get started!\n\n**Importing libraries and reading the dataset**","ac1d7365":"We found:\n* Whole milk is the highest bought item followed by other vegetables and rolls\/buns\n* Preservation products and kitchen utensils are the least bought. \n\nLet's look at the day of the month at which customers visited the store.","7901129c":"Let's sort all the rules by decreasing lift.","1627e99e":"<img src=\"https:\/\/annalyzin.files.wordpress.com\/2016\/04\/association-rules-network-graph2.png\">\n\n<h6><center><a href=\"https:\/\/annalyzin.files.wordpress.com\/2016\/04\/association-rules-network-graph2.png\">Source<\/a><\/center><\/h6>\n<h1><center>Associate Rule Mining<\/center><\/h1>","c7d4694c":"Summarizing the data with Density plots to see where the mass of the data is located","0434c2f7":"We found that:\n* A large number of customers visited the store on 21st January 2015 followed by 21st July 2015\n* Few customers visited the store on 9th January 2015 followed by 16th March 2015 \n* Both the highest most visitors and least visitors are recorded in 2015\n\nLet's look at the total count of items bought","2b9fe5e5":"**In the store, people bought liquer with preservation products, kitchen utensil with prosecco and preservation products with spices. The store should add deals with preservation products, kitchen utensil and frozen chicken to increase it sales. Thanks and I hope you enjoyed while reading it. Happy coding!**","4e1d0734":"We found that:\n* Member number 3180 bought the highest number of groceries, followed by Member number 3050, 2051 and 3737.\n* A lot of customers visited the store twice (seem to be tourists).\n\nLet's look at the date at which customers visited the store."}}