{"cell_type":{"fce49762":"code","cda0fc11":"code","791948fa":"code","b7dcaeda":"code","e1c51cfd":"code","79164ccd":"code","57dbdbb2":"code","3eda6869":"code","2fc4ea16":"code","7a654717":"code","9d1bd9bb":"code","efd1705b":"code","05f66f98":"code","86b2313a":"code","1275a2ee":"code","75a17da8":"code","f6777a26":"code","47627eda":"code","5ac72a53":"code","2813e376":"code","bd3d5c49":"code","86ff05c1":"code","0e0ee636":"code","870662d2":"code","9adadd06":"code","9b257ee3":"code","9b39c6ae":"code","0f2bbe3e":"code","2ce99bf0":"code","7608e27d":"code","feff81d0":"code","09d6bf62":"code","a64008ed":"code","7157c622":"code","16828115":"code","dc2222fb":"code","ad67f49a":"code","027d04a0":"code","886e56df":"code","b73610f1":"code","823fc3c6":"code","871f2724":"code","950cacd9":"code","384fff76":"code","0f7fdd55":"code","bc7a6f8e":"code","57b10ce2":"code","2a716259":"code","0f92418c":"code","0c4f1219":"code","986f4ad7":"code","43ede765":"code","c901708a":"code","abcb1a32":"code","89532166":"code","dbd3abb2":"code","f653e3ac":"code","46b4dc62":"code","fb00884a":"code","9e6c0c61":"code","8cf0cb61":"code","ce71e376":"code","2a0a9bc4":"code","ebfb873c":"code","ec2fc5fe":"code","8a4c7f76":"code","3424e9eb":"code","da482971":"code","f1862be7":"code","e1c269f4":"code","7b433745":"code","713e1dd9":"markdown","98b872fe":"markdown","2bbd23d0":"markdown","11572e61":"markdown","890a466a":"markdown","4957638d":"markdown","54e3459d":"markdown","cb2978bf":"markdown","f69afd97":"markdown","e3e03ad3":"markdown","211cc4e1":"markdown","51e5eb94":"markdown","425ebde8":"markdown","f0ffe78d":"markdown","3339d6ef":"markdown","6f9aab35":"markdown","f1cfa6a0":"markdown","8fce4a7f":"markdown","b136c78d":"markdown","2c11db87":"markdown","3450b03e":"markdown","2e2f32ec":"markdown","8f4e3072":"markdown","e31a9a8c":"markdown","a56a86fb":"markdown","0ecc46c4":"markdown","fc8ce0d1":"markdown","d268f85e":"markdown","f107d10a":"markdown","d8772f1d":"markdown","f9b94bf0":"markdown","62942ed0":"markdown","6bcdb12b":"markdown","b2d41df6":"markdown","6a98a197":"markdown","2d6f7b2e":"markdown","102b9077":"markdown","374d2ad5":"markdown","5a4b08da":"markdown","c33634a9":"markdown","6b34e551":"markdown","465a5dd0":"markdown","c357c95f":"markdown","8f7bf0bc":"markdown","03ad95ed":"markdown","aa54da72":"markdown","0919f50f":"markdown","1afafce5":"markdown","2a0e72f8":"markdown","a37d539b":"markdown","7ba81bf3":"markdown","7a75ed9f":"markdown","3d9a1574":"markdown","2e4bab81":"markdown","f408b1f4":"markdown","95173768":"markdown","7a15f723":"markdown","317394a2":"markdown","1dd51217":"markdown","3b8eade2":"markdown","95d043ac":"markdown","9912a3f3":"markdown","840372c2":"markdown","1b174a11":"markdown","77f47b78":"markdown"},"source":{"fce49762":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cda0fc11":"import numpy as np \nimport pandas as pd\nimport pandas\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n%matplotlib inline\nimport seaborn as sns; sns.set()\n\nfrom sklearn import tree\nimport graphviz \nimport os\nimport preprocessing \n\nimport numpy as np \nimport pandas as pd \nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\n\nfrom pandas_profiling import ProfileReport\n\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2, f_classif\nfrom sklearn.model_selection import KFold\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.svm import LinearSVC\n\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import cross_val_predict\n\nfrom sklearn.preprocessing import normalize\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.pipeline import Pipeline, make_pipeline\nfrom sklearn.decomposition import PCA\n\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.naive_bayes import CategoricalNB\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.cluster import KMeans\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom xgboost import XGBClassifier\n\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom sklearn.metrics import precision_score, recall_score, f1_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nfrom sklearn.model_selection import GridSearchCV\n\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import SGDClassifier, LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neural_network import MLPClassifier\nfrom xgboost import XGBClassifier, XGBRFClassifier\nfrom xgboost import plot_tree, plot_importance\n\nfrom sklearn.metrics import confusion_matrix, accuracy_score, roc_auc_score, roc_curve\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_selection import RFE\n\nfrom sklearn.decomposition import PCA\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","791948fa":"dataset = pandas.read_csv('\/kaggle\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv')\ndataset.sample(10)","b7dcaeda":"dataset.drop(\"id\", axis=1, inplace=True)","e1c51cfd":"dataset.info()","79164ccd":"def bar_plot(variable):\n    # get feature\n    var = dataset[variable]\n    # count number of categorical variable(value\/sample)\n    varValue = var.value_counts()\n    \n    # visualize\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}:\\n{}\".format(variable,varValue))","57dbdbb2":"categorical = (dataset.dtypes == \"object\")\ncategorical_list = list(categorical[categorical].index)\n\nprint(\"Categorical variables:\")\nprint(categorical_list)","3eda6869":"sns.set_style('darkgrid')\ncategorical_variables = ['gender', 'ever_married', 'work_type', 'Residence_type', 'smoking_status']\nfor c in categorical_variables:\n    bar_plot(c)","2fc4ea16":"plt.figure(figsize=(20,15))\nsns.set_theme(style=\"darkgrid\")\nplt.subplot(2,3,1)\nsns.violinplot(x = 'ever_married', y = 'stroke', data = dataset)\nplt.subplot(2,3,2)\nsns.violinplot(x = 'ever_married', y = 'stroke', data = dataset)\nplt.subplot(2,3,3)\nsns.violinplot(x = 'ever_married', y = 'stroke', data = dataset)","7a654717":"numerical_int64 = (dataset.dtypes == \"int64\")\nnumerical_int64_list = list(numerical_int64[numerical_int64].index)\n\nprint(\"Categorical variables:\")\nprint(numerical_int64_list)","9d1bd9bb":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(dataset[variable], bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","efd1705b":"numerical_variables = ['hypertension', 'heart_disease', 'stroke']\nfor n in numerical_variables:\n    plot_hist(n)","05f66f98":"numerical_float64 = (dataset.dtypes == \"float64\")\nnumerical_float64_list = list(numerical_float64[numerical_float64].index)\n\nprint(\"Numerical variables:\")\nprint(numerical_float64_list)","86b2313a":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(dataset[variable], bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} Distribution with Histogram\".format(variable))\n    plt.show()","1275a2ee":"numerical_variables = ['age', 'avg_glucose_level', 'bmi']\nfor n in numerical_variables:\n    plot_hist(n)","75a17da8":"plt.figure(figsize=(25,15))\n\nplt.subplot(2,3,1)\nsns.histplot(dataset['age'], color = 'red', kde = True).set_title('Age Interval and Counts')\n\nplt.subplot(2,3,2)\nsns.histplot(dataset['bmi'], color = 'green', kde = True).set_title('BMI Interval and Counts')\n\nplt.subplot(2,3,3)\nsns.histplot(dataset['avg_glucose_level'], kde = True, color = 'blue').set_title('avg_glucose_level Interval and Counts')","f6777a26":"plt.figure(figsize=(25,15))\n\nplt.subplot(2,3,1)\nsns.histplot(dataset['hypertension'], color = 'red', kde = True).set_title('hypertension Interval and Counts')\n\nplt.subplot(2,3,2)\nsns.histplot(dataset['heart_disease'], color = 'green', kde = True).set_title('heart_disease Interval and Counts')\n\nplt.subplot(2,3,3)\nsns.histplot(dataset['stroke'], kde = True, color = 'blue').set_title('Stroke Interval and Counts')","47627eda":"import seaborn as sns\nsns.set_theme(style=\"darkgrid\")\n\n\nplt.figure(figsize=(20,15))\n\nplt.subplot(2,3,1)\nsns.boxenplot(x=dataset['stroke'], y=dataset['age'],\n              color=\"b\", \n              scale=\"linear\", data=dataset)\n\nplt.subplot(2,3,2)\nsns.boxenplot(x=dataset['stroke'], y=dataset['bmi'],\n              color=\"b\", \n              scale=\"linear\", data=dataset)\n\nplt.subplot(2,3,3)\nsns.boxenplot(x=dataset['stroke'], y=dataset['avg_glucose_level'],\n              color=\"b\", \n              scale=\"linear\", data=dataset)","5ac72a53":"import seaborn as sns\nsns.set_theme(style=\"darkgrid\")\n\nplt.figure(figsize=(20,15))\n\nplt.subplot(2,2,1)\nsns.swarmplot(x=\"stroke\", y=\"age\",hue=\"gender\", data=dataset, palette=\"PRGn\")\n\nplt.subplot(2,2,2)\nsns.swarmplot(x=\"stroke\", y=\"age\",hue=\"ever_married\", data=dataset, palette=\"PRGn\")\n\nplt.subplot(2,2,3)\nsns.swarmplot(x=\"stroke\", y=\"age\",hue=\"smoking_status\", data=dataset, palette=\"PRGn\")\n\nplt.subplot(2,2,4)\nsns.swarmplot(x=\"stroke\", y=\"age\",hue=\"work_type\", data=dataset, palette=\"PRGn\")\n\nplt.show()","2813e376":"dataset[[\"gender\",\"stroke\"]].groupby([\"gender\"], as_index = False).mean().sort_values(by=\"stroke\",ascending = False)","bd3d5c49":"df = dataset\n\nlabels = dataset['gender'].value_counts().index\npie1 = dataset['gender'].value_counts().values\n# figure\nfig = {\n  \"data\": [\n    {\n      \"values\": pie1,\n      \"labels\": labels,\n      \"domain\": {\"x\": [0, .5]},\n      \"name\": \"\",\n      \"hoverinfo\":\"label+percent+name+value\",\n      \"hole\": .2,\n      \"type\": \"pie\"\n    },],\n  \"layout\": {\n        \"title\":\"Distribution of Genders\",\n        \"annotations\": [\n            { \"font\": { \"size\": 25},\n              \"showarrow\": True,\n              \"text\": \"Genders\",\n                \"x\": 1,\n                \"y\": 1,\n            },\n        ]\n    }\n}\niplot(fig)","86ff05c1":"dataset[[\"ever_married\",\"stroke\"]].groupby([\"ever_married\"], as_index = False).mean().sort_values(by=\"stroke\",ascending = False)","0e0ee636":"labels = dataset['ever_married'].value_counts().index\nsizes = dataset['ever_married'].value_counts().values\n\nplt.figure(figsize = (8,8))\nplt.pie(sizes, labels=labels, autopct='%1.1f%%')\nplt.title(\"Distribution of Samples by 'ever_married'\",color = 'black',fontsize = 15)","870662d2":"dataset[[\"work_type\",\"stroke\"]].groupby([\"work_type\"], as_index = False).mean().sort_values(by=\"stroke\",ascending = False)","9adadd06":"dataset[[\"work_type\",\"stroke\"]].groupby([\"work_type\"], as_index = False).count().sort_values(by=\"stroke\",ascending = False)","9b257ee3":"df = dataset\n\nlabels = dataset['work_type'].value_counts().index\npie1 = dataset['work_type'].value_counts().values\n# figure\nfig = {\n  \"data\": [\n    {\n      \"values\": pie1,\n      \"labels\": labels,\n      \"domain\": {\"x\": [0, .5]},\n      \"name\": \"\",\n      \"hoverinfo\":\"label+percent+name+value\",\n      \"hole\": .2,\n      \"type\": \"pie\",\n    },],\n  \"layout\": {\n        \"title\":\"Distribution of Work Type\",\n        \"annotations\": [\n            { \"font\": { \"size\": 25},\n              \"showarrow\": True,\n              \"text\": \"Work Type\",\n                \"x\": 1,\n                \"y\": 1,\n             \n            },\n        ]\n    }\n}\niplot(fig)","9b39c6ae":"dataset[[\"Residence_type\",\"stroke\"]].groupby([\"Residence_type\"], as_index = False).mean().sort_values(by=\"stroke\",ascending = False)","0f2bbe3e":"counts = dataset['Residence_type'].value_counts()\n\nplt.figure(figsize=(10,7))\nsns.barplot(x=counts.index, y=counts.values, palette=\"Set3\")\n\nplt.ylabel('Count')\nplt.xlabel('Residence_type', style = 'normal', size = 24)\n\nplt.xticks(rotation = 45, size = 12)\nplt.yticks(rotation = 45, size = 12)\n\nplt.title('Distribution of Residence_type',color = 'black',fontsize=15)\nplt.show()","2ce99bf0":"dataset[[\"smoking_status\",\"stroke\"]].groupby([\"smoking_status\"], as_index = False).mean().sort_values(by=\"stroke\",ascending = False)","7608e27d":"df = dataset\n\nlabels = dataset['smoking_status'].value_counts().index\npie1 = dataset['smoking_status'].value_counts().values\n# figure\nfig = {\n  \"data\": [\n    {\n      \"values\": pie1,\n      \"labels\": labels,\n      \"domain\": {\"x\": [0, .5]},\n      \"name\": \"\",\n      \"hoverinfo\":\"label+percent+name+value\",\n      \"hole\": .2,\n      \"type\": \"pie\",\n    },],\n  \"layout\": {\n        \"title\":\"Distribution of Smoking Status\",\n        \"annotations\": [\n            { \"font\": { \"size\": 25},\n              \"showarrow\": True,\n              \"text\": \"Smoking Status\",\n                \"x\": 1,\n                \"y\": 1,\n             \n            },\n        ]\n    }\n}\niplot(fig)","feff81d0":"import pandas_profiling as pp\npp.ProfileReport(dataset)","09d6bf62":"plt.figure(figsize=(12,8)) \nsns.heatmap(dataset.corr(), annot=True, cmap='Dark2_r', linewidths = 2)\nplt.show()","a64008ed":"sns.pairplot(dataset, hue = 'stroke')","7157c622":"#This code is retrieved from here: https:\/\/www.kaggle.com\/kanncaa1\/dataiteam-titanic-eda#Introduction\n\ndef detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","16828115":"dataset.loc[detect_outliers(dataset,['age', 'avg_glucose_level', 'bmi', 'hypertension', 'heart_disease', 'stroke'])]","dc2222fb":"# drop outliers\ndataset = dataset.drop(detect_outliers(dataset,['age', 'avg_glucose_level', 'bmi', 'hypertension', 'heart_disease', 'stroke']),axis = 0).reset_index(drop = True)","ad67f49a":"dataset","027d04a0":"dataset[dataset['bmi'].isnull()]","886e56df":"dataset.boxplot(column=\"bmi\",by = \"gender\")\nplt.show()","b73610f1":"print(\"Mean of BMI value for Females: \", np.mean(dataset[dataset['gender'] == 'Female']['bmi']))\nprint(\"Mean of BMI value for Males: \", np.mean(dataset[dataset['gender'] == 'Male']['bmi']))\nprint(\"Mean of BMI value: \", np.mean(dataset['bmi']))","823fc3c6":"dataset['bmi'] = dataset['bmi'].fillna(0)","871f2724":"for i in range(0,5035):\n    if(dataset['bmi'][i] == 0):\n        if(dataset['gender'][i] == 'Male'):\n            dataset['bmi'][i] = 28.594683544303823\n        elif(dataset['gender'][i] == 'Female'):\n            dataset['bmi'][i] = 29.035926055109936\n        else:\n            dataset['bmi'][i] = 28.854652338161664\n        ","950cacd9":"dataset[dataset['bmi'].isnull()]","384fff76":"print(\"Unique Values for Gender\", dataset['gender'].unique())\nprint(\"Unique Values for ever_married\", dataset['ever_married'].unique())\nprint(\"Unique Values for work_type\", dataset['work_type'].unique())\nprint(\"Unique Values for Residence_type\", dataset['Residence_type'].unique())\nprint(\"Unique Values for smoking_status\", dataset['smoking_status'].unique())","0f7fdd55":"ever_married_mapping = {'No': 0, 'Yes': 1}\ndataset['ever_married'] = dataset['ever_married'].map(ever_married_mapping)","bc7a6f8e":"Residence_type_mapping = {'Rural': 0, 'Urban': 1}\ndataset['Residence_type'] = dataset['Residence_type'].map(Residence_type_mapping)","57b10ce2":"onehotencoder = OneHotEncoder()","2a716259":"dataset['gender'] = pd.Categorical(dataset['gender'])\ndatasetDummies_gender = pd.get_dummies(dataset['gender'], prefix = 'gender_encoded')\ndatasetDummies_gender","0f92418c":"dataset['work_type'] = pd.Categorical(dataset['work_type'])\ndatasetDummies_work_type = pd.get_dummies(dataset['work_type'], prefix = 'work_type_encoded')\ndatasetDummies_work_type","0c4f1219":"dataset['smoking_status'] = pd.Categorical(dataset['smoking_status'])\ndatasetDummies_smoking_status = pd.get_dummies(dataset['smoking_status'], prefix = 'smoking_status_encoded')\ndatasetDummies_smoking_status","986f4ad7":"dataset.drop(\"gender\", axis=1, inplace=True)\ndataset.drop(\"work_type\", axis=1, inplace=True)\ndataset.drop(\"smoking_status\", axis=1, inplace=True)","43ede765":"dataset = pd.concat([dataset, datasetDummies_gender], axis=1)\ndataset = pd.concat([dataset, datasetDummies_work_type], axis=1)\ndataset = pd.concat([dataset, datasetDummies_smoking_status], axis=1)\ndataset","c901708a":"features = ['age',\n 'hypertension',\n 'heart_disease',\n 'ever_married',\n 'Residence_type',\n 'avg_glucose_level',\n 'bmi',\n 'gender_encoded_Female',\n 'gender_encoded_Male',\n 'gender_encoded_Other',\n 'work_type_encoded_Govt_job',\n 'work_type_encoded_Never_worked',\n 'work_type_encoded_Private',\n 'work_type_encoded_Self-employed',\n 'work_type_encoded_children',\n 'smoking_status_encoded_Unknown',\n 'smoking_status_encoded_formerly smoked',\n 'smoking_status_encoded_never smoked',\n 'smoking_status_encoded_smokes']\n\nlabel = ['stroke']\n\nX = dataset[features]\ny = dataset[label]","abcb1a32":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=101) \nX_valid, X_test, y_valid, y_test = train_test_split(X_test, y_test, test_size=0.5, random_state=42)\n\nprint(f'Total # of sample in whole dataset: {len(X)}')\nprint(f'Total # of sample in train dataset: {len(X_train)}')\nprint(f'Total # of sample in validation dataset: {len(X_valid)}')\nprint(f'Total # of sample in test dataset: {len(X_test)}')","89532166":"sc=StandardScaler()\n\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","dbd3abb2":"models = {\n    'GaussianNB': GaussianNB(),\n    'BernoulliNB': BernoulliNB(),\n    'LogisticRegression': LogisticRegression(),\n    'RandomForestClassifier': RandomForestClassifier(),\n    'SupportVectorMachine': SVC(),\n    'DecisionTreeClassifier': DecisionTreeClassifier(),\n    'KNeighborsClassifier': KNeighborsClassifier(),\n    'GradientBoostingClassifier': GradientBoostingClassifier(),\n    'Stochastic Gradient Descent':  SGDClassifier(max_iter=5000, random_state=0),\n    'Neural Nets': MLPClassifier(solver='lbfgs', alpha=1e-5, hidden_layer_sizes=(5000, 10), random_state=1),\n}\n\nmodelNames = [\"GaussianNB\", 'BernoulliNB','LogisticRegression','RandomForestClassifier','SupportVectorMachine',\n             'DecisionTreeClassifier', 'KNeighborsClassifier','GradientBoostingClassifier',\n             'Stochastic Gradient Descent', 'Neural Nets']\n\ntrainScores = []\nvalidationScores = []\ntestScores = []\n\nfor m in models:\n  model = models[m]\n  model.fit(X_train, y_train)\n  score = model.score(X_valid, y_valid)\n  #print(f'{m} validation score => {score*100}')\n    \n  print(f'{m}') \n  train_score = model.score(X_train, y_train)\n  print(f'Train score of trained model: {train_score*100}')\n  trainScores.append(train_score*100)\n\n  validation_score = model.score(X_valid, y_valid)\n  print(f'Validation score of trained model: {validation_score*100}')\n  validationScores.append(validation_score*100)\n\n  test_score = model.score(X_test, y_test)\n  print(f'Test score of trained model: {test_score*100}')\n  testScores.append(test_score*100)\n  print(\" \")\n    \n  y_predictions = model.predict(X_test)\n  conf_matrix = confusion_matrix(y_predictions, y_test)\n\n  print(f'Confussion Matrix: \\n{conf_matrix}\\n')\n\n  predictions = model.predict(X_test)\n  cm = confusion_matrix(predictions, y_test)\n\n  tn = conf_matrix[0,0]\n  fp = conf_matrix[0,1]\n  tp = conf_matrix[1,1]\n  fn = conf_matrix[1,0]\n  accuracy  = (tp + tn) \/ (tp + fp + tn + fn)\n  precision = tp \/ (tp + fp)\n  recall    = tp \/ (tp + fn)\n  f1score  = 2 * precision * recall \/ (precision + recall)\n  specificity = tn \/ (tn + fp)\n  print(f'Accuracy : {accuracy}')\n  print(f'Precision: {precision}')\n  print(f'Recall   : {recall}')\n  print(f'F1 score : {f1score}')\n  print(f'Specificity : {specificity}')\n  print(\"\") \n  print(f'Classification Report: \\n{classification_report(predictions, y_test)}\\n')\n  print(\"\")\n   \n  for m in range (1):\n    current = modelNames[m]\n    modelNames.remove(modelNames[m])\n\n  preds = model.predict(X_test)\n  confusion_matr = confusion_matrix(y_test, preds) #normalize = 'true'\n  print(\"############################################################################\")\n  print(\"\")\n  print(\"\")\n  print(\"\")","f653e3ac":"plt.figure(figsize=(20,10))\nsns.set_style('darkgrid')\nplt.title('Train - Validation - Test Scores of Models', fontweight='bold', size = 24)\n\nbarWidth = 0.25\n \nbars1 = trainScores\nbars2 = validationScores\nbars3 = testScores\n \nr1 = np.arange(len(bars1))\nr2 = [x + barWidth for x in r1]\nr3 = [x + barWidth for x in r2]\n \nplt.bar(r1, bars1, color='blue', width=barWidth, edgecolor='white', label='train', yerr=0.5,ecolor=\"black\",capsize=10)\nplt.bar(r2, bars2, color='#557f2d', width=barWidth, edgecolor='white', label='validation', yerr=0.5,ecolor=\"black\",capsize=10, alpha = .50)\nplt.bar(r3, bars3, color='red', width=barWidth, edgecolor='white', label='test', yerr=0.5,ecolor=\"black\",capsize=10, hatch = '-')\n \nmodelNames = [\"GaussianNB\", 'BernoulliNB','LogisticRegression','RandomForestClassifier','SupportVectorMachine',\n             'DecisionTreeClassifier', 'KNeighborsClassifier','GradientBoostingClassifier',\n             'Stochastic Gradient Descent', 'Neural Nets']\n    \nplt.xlabel('Algorithms', fontweight='bold', size = 24)\nplt.ylabel('Scores', fontweight='bold', size = 24)\nplt.xticks([r + barWidth for r in range(len(bars1))], modelNames, rotation = 75)\n \nplt.legend()\nplt.show()","46b4dc62":"for i in range(10):\n    print(f'Accuracy of {modelNames[i]} -----> {testScores[i]}')","fb00884a":"knn_model = KNeighborsClassifier()\nknn_model.fit(X_train, y_train)\n\ntrain_score = knn_model.score(X_train, y_train)\nprint(f'Train score of trained model: {train_score}')\n\nvalidation_score = knn_model.score(X_valid, y_valid)\nprint(f'Validation score of trained model: {validation_score}')\n\ntest_score = knn_model.score(X_test, y_test)\nprint(f'Test score of trained model: {test_score}')\n\ny_predictions = knn_model.predict(X_test)\n\nconf_matrix = confusion_matrix(y_predictions, y_test)\n\n\nprint(f'Accuracy: {accuracy_score(y_predictions, y_test)*100}')\nprint()\nprint(f'Confussion matrix: \\n{conf_matrix}\\n')","9e6c0c61":"import plotly.graph_objects as go\nimport numpy as np\nfrom sklearn.datasets import make_moons\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\n\nmesh_size = .02\nmargin = 0.25\n\n# Load and split data\nX, y = make_moons(noise=0.3, random_state=0)\nX_train, X_test, y_train, y_test = train_test_split(X, y.astype(str), test_size=0.33, random_state=101) \nX_valid, X_test, y_valid, y_test = train_test_split(X_test, y_test, test_size=0.5, random_state=42)\n\n# Create a mesh grid on which we will run our model\nx_min, x_max = X[:, 0].min() - margin, X[:, 0].max() + margin\ny_min, y_max = X[:, 1].min() - margin, X[:, 1].max() + margin\nxrange = np.arange(x_min, x_max, mesh_size)\nyrange = np.arange(y_min, y_max, mesh_size)\nxx, yy = np.meshgrid(xrange, yrange)\n\n# Create classifier, run predictions on grid\nclf = knn_model\nclf.fit(X, y)\nZ = clf.predict_proba(np.c_[xx.ravel(), yy.ravel()])[:, 1]\nZ = Z.reshape(xx.shape)\n\n\n# Plot the figure\nfig = go.Figure(data=[\n    go.Contour(\n        x=xrange,\n        y=yrange,\n        z=Z,\n        colorscale='purp'\n    )\n])\nfig.show()","8cf0cb61":"print(cross_val_score(knn_model, X = X_train, y = y_train, cv = 10))","ce71e376":"g = cross_val_score(knn_model, X = X_train, y = y_train, cv = 10)\nplt.title(\"Cross Validation Scores\")\nplt.xlabel(\"cv \")\nplt.ylabel(\"Scores\")\nplt.plot(g)","2a0a9bc4":"accuracies = cross_val_score(estimator = knn_model, X = X_train, y = y_train, cv = 10)\nprint(\"Accuracy (mean):\", accuracies.mean()*100, \"%\")\nprint(\"std: \", accuracies.std()*100)","ebfb873c":"scores = cross_val_score(knn_model, X_train, y_train, scoring = 'neg_mean_absolute_error', cv = 10)\nprint (\"MAE:\", scores.mean())","ec2fc5fe":"parameters = {'n_neighbors': [2,3,5,7,9,11,15,20],\n              'algorithm': ['auto', 'ball_tree', 'kd_tree', 'brute'],\n             'weights': ['uniform', 'distance'],\n             'metric': ['manhattan', 'euclidean', 'minkowski', 'cosine', 'jaccard', 'hamming']\n             }\n\ngcv = GridSearchCV(knn_model, parameters, cv=5, verbose = 1, n_jobs = -1).fit(X_train, y_train)","8a4c7f76":"print(f'GridSearchView Best Score: {gcv.best_score_*100}')\nprint(f'GridSearchView Best Estimator: {gcv.best_estimator_}')\nprint(f'GridSearchView Best Params: {gcv.best_params_}')","3424e9eb":"from sklearn.model_selection import GridSearchCV, RandomizedSearchCV\nparams = {'n_neighbors': [2,3,5,7,9,11,15,20],\n              'algorithm': ['auto', 'ball_tree', 'kd_tree', 'brute'],\n             'weights': ['uniform', 'distance'],\n             'metric': ['manhattan', 'euclidean', 'minkowski', 'cosine', 'jaccard', 'hamming']\n             }\n\nrandomizedcv = RandomizedSearchCV(knn_model, params, n_iter=200, cv=5, scoring='accuracy', n_jobs=-1, verbose=2).fit(X_train,y_train)","da482971":"print(f'RandomizedSearchCV Best Score: {randomizedcv.best_score_*100}')\nprint(f'RandomizedSearchCV Best Estimator: {randomizedcv.best_estimator_}')\nprint(f'RandomizedSearchCV Best Params: {randomizedcv.best_params_}')","f1862be7":"# I wrote this part again because X y changed above, in the k-nn visualization. \nfeatures = ['age',\n 'hypertension',\n 'heart_disease',\n 'ever_married',\n 'Residence_type',\n 'avg_glucose_level',\n 'bmi',\n 'gender_encoded_Female',\n 'gender_encoded_Male',\n 'gender_encoded_Other',\n 'work_type_encoded_Govt_job',\n 'work_type_encoded_Never_worked',\n 'work_type_encoded_Private',\n 'work_type_encoded_Self-employed',\n 'work_type_encoded_children',\n 'smoking_status_encoded_Unknown',\n 'smoking_status_encoded_formerly smoked',\n 'smoking_status_encoded_never smoked',\n 'smoking_status_encoded_smokes']\n\nlabel = ['stroke']\n\nX = dataset[features]\ny = dataset[label]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=101) \nX_valid, X_test, y_valid, y_test = train_test_split(X_test, y_test, test_size=0.5, random_state=42)\n\nprint(f'Total # of sample in whole dataset: {len(X)}')\nprint(f'Total # of sample in train dataset: {len(X_train)}')\nprint(f'Total # of sample in validation dataset: {len(X_valid)}')\nprint(f'Total # of sample in test dataset: {len(X_test)}')\n\nsc=StandardScaler()\n\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","e1c269f4":"models = {\n    'RandomForestClassifier': RandomForestClassifier(),\n    'DecisionTreeClassifier': DecisionTreeClassifier(),\n    'GradientBoostingClassifier': GradientBoostingClassifier(),\n}\n\nfor m in models:\n  model = models[m]\n  model.fit(X_train, y_train)\n  \n  print(f'{m}') \n  best_features = SelectFromModel(model)\n  best_features.fit(X, y)\n\n  transformedX = best_features.transform(X)\n  print(f\"Old Shape: {X.shape} New shape: {transformedX.shape}\")\n  print(\"\\n\")\n\n  imp_feature = pd.DataFrame({'Feature': features, 'Importance': model.feature_importances_})\n  plt.figure(figsize=(10,4))\n  plt.title(\"Feature Importance Graphic\")\n  plt.xlabel(\"importance \")\n  plt.ylabel(\"features\")\n  plt.barh(imp_feature['Feature'],imp_feature['Importance'],color = 'rgbkymc')\n  plt.show()","7b433745":"models = {\n    'BernoulliNB': BernoulliNB(),\n    'LogisticRegression': LogisticRegression(),\n    'Stochastic Gradient Descent':  SGDClassifier(max_iter=5000, random_state=0),\n}\n\nfor m in models:\n  model = models[m]\n  model.fit(X_train, y_train)\n  \n  print(f'{m}') \n  best_features = SelectFromModel(model)\n  best_features.fit(X, y)\n\n  transformedX = best_features.transform(X)\n  print(f\"Old Shape: {X.shape} New shape: {transformedX.shape}\")\n  print(\"\\n\")","713e1dd9":"<a id=\"3\"><\/a> \n## Variable Descriptions","98b872fe":"<a id=\"27\"><\/a> \n### RandomizedSearchCV","2bbd23d0":"In this notebook, I examined Stroke Prediction Dataset. Firstly, I made Exploratory Data Analysis, Visualization, then I applied Machine Learning algorithms to this dataset. \n\n* If you have questions, please comment them. I will try to explain if you don't understand.\n* If you liked this notebook, I will be glad to be informed :)\n\n* ***Thank you for your time.***","11572e61":"<a id=\"5\"><\/a> \n### Categorical Variables","890a466a":"<a id=\"1\"><\/a> \n# Importing the Necessary Libraries","4957638d":"<a id=\"18\"><\/a> \n# Encoding","54e3459d":"<a id=\"12\"><\/a> \n## smoking_status - Stroke","cb2978bf":"We have null variables in 'bmi' column. We will handle them after.","f69afd97":"***How can we handle null values?***\n\n* I think the most obvious differences for BMI will be between gender.","e3e03ad3":"<a id=\"29\"><\/a> \n# Conclusion","211cc4e1":"I filled null values with 0.","51e5eb94":"<a id=\"7\"><\/a> \n# Basic Data Analysis","425ebde8":"We have 201 null values in total. bmi includes all. (After Anomaly Detection, it decreases to 192)","f0ffe78d":"<a id=\"13\"><\/a> \n# Pandas Profiling","3339d6ef":"<a id=\"9\"><\/a> \n## Ever Married - Stroke","6f9aab35":"Average stroke rate by gender. Male's stroke rate is higher.","f1cfa6a0":"<a id=\"6\"><\/a> \n### Numerical Variables","8fce4a7f":"Anomaly is one that differs \/ deviates significantly from other observations in the same sample. An anomaly detection pattern produces two different results. The first is a categorical tag for whether the observation is abnormal or not; the second is a score or trust value. Score carries more information than the label. Because it also tells us how abnormal the observation is. The tag just tells you if it's abnormal. While labeling is more common in supervised methods, the score is more common in unsupervised and semisupervised methods.","b136c78d":"* id: unique identifier\n* gender: \"Male\", \"Female\" or \"Other\"\n* age: age of the patient\n* hypertension: 0 if the patient doesn't have hypertension, 1 if the patient has hypertension\n* heart_disease: 0 if the patient doesn't have any heart diseases, 1 if the patient has a heart disease\n* ever_married: \"No\" or \"Yes\"\n* work_type: \"children\", \"Govt_jov\", \"Never_worked\", \"Private\" or \"Self-employed\"\n* Residence_type: \"Rural\" or \"Urban\"\n* avg_glucose_level: average glucose level in blood\n* bmi: body mass index\n* smoking_status: \"formerly smoked\", \"never smoked\", \"smokes\" or \"Unknown\"*\n* stroke: 1 if the patient had a stroke or 0 if not\n\n*Note: \"Unknown\" in smoking_status means that the information is unavailable for this patient\n\nSource: https:\/\/www.kaggle.com\/fedesoriano\/stroke-prediction-dataset","2c11db87":"***cv = 10 means k = 10 for KNN.***","3450b03e":"I evaluated these models according to their accuracies. Best algorithm is KNN with 96.02%. So, I will make k-Fold Cross Validation and Hyper-Parameter Optimization for KNN algorithm.","2e2f32ec":"stroke rate based on work_type","8f4e3072":"I dropped 'id' column because it can cause unwanted correlation.","e31a9a8c":"<a id=\"24\"><\/a> \n## k-Fold Cross Validation","a56a86fb":"<a id=\"11\"><\/a> \n## Residence_type - Stroke","0ecc46c4":"<a id=\"23\"><\/a> \n# Evaluation of Models","fc8ce0d1":"<a id=\"26\"><\/a> \n### GridSearchCV","d268f85e":"*Source for Feature Importance Code:* https:\/\/www.kaggle.com\/umutalpaydn\/heart-disease-analysis-classification#Feature-Importance","f107d10a":"Pandas profiling is a useful library that generates interactive reports about the data. With using this library, we can see types of data, distribution of data and various statistical information. This tool has many features for data preparing. Pandas Profiling includes graphics about specific feature and correlation maps too. You can see more details about this tool in the following url: https:\/\/pandas-profiling.github.io\/pandas-profiling\/docs\/master\/rtd\/","d8772f1d":"<a id=\"2\"><\/a> \n# Read Datas & Explanation of Features & Information About Datasets","f9b94bf0":"This loop assign these values to zero values accoring to the gender.","62942ed0":"*** Categorical Variables:** 'gender', 'ever_married', 'work_type', 'Residence_type', 'smoking_status'\n\n*** Numerical Variables:** 'id', 'hypertension', 'heart_disease', 'stroke'","6bcdb12b":"<a id=\"15\"><\/a> \n# Anomaly Detection","b2d41df6":"<a id=\"17\"><\/a> \n## bmi","6a98a197":"\nIn this notebook, I performed an EDA on the 'Stroke Prediction Dataset'. I visualized the data using the Seaborn and Plotly libraries. My comments on the graphics and results are below the code snippet.\nI applied Machine Learning algorithms to this dataset. I evaluated models based on their accuracy. In addition, I applied k-Fold Cross Validation and HyperParameter Optimization. Lastly, I determined best features for some algorithms. I hope this notebook will be useful to you.","2d6f7b2e":"stroke rate based on married or not","102b9077":"We get different BMI averages for women and men, although not very large. I will assign the total BMI mean as there are very few examples for the Others gender.","374d2ad5":"A set of hyperparameters is randomly selected and tested by cross-validation and the model set up. These steps continue until the specified calculation time limit or the number of iterations is reached.","5a4b08da":"<a id=\"22\"><\/a> \n# Scores of Models","c33634a9":"In statistics, mean absolute error (MAE) is a measure of errors between paired observations expressing the same phenomenon. Examples of Y versus X include comparisons of predicted versus observed, subsequent time versus initial time, and one technique of measurement versus an alternative technique of measurement. MAE is calculated as: \n\nSource: https:\/\/en.wikipedia.org\/wiki\/Mean_absolute_error","6b34e551":"stroke rate based on residence type.","465a5dd0":"<a id=\"25\"><\/a> \n## Hyper-Parameter Optimization","c357c95f":"Cross Validation will enable us to see whether we are facing an overfitting problem and also to see the quality of our model. Thus, it will enable us to test the performance of our model before encountering high error rates in the test data set that we have not seen yet. It is a method that is frequently used because it is easy to apply.","8f7bf0bc":"Feature Importance and Best Features","03ad95ed":"One Hot Encoding is the binary representation of categorical variables. This process requires categorical values to be mapped to integer values first. Next, each integer value is represented as a binary vector with all values zero except the integer index marked with 1.\n\nOne Hot Encoding makes the representation of categorical data more expressive and easy. Many machine learning algorithms cannot work directly with categorical data, so categories must be converted to numbers. This operation is required for input and output variables that are categorical.\n\nIn this part, I converted categorical datas to the binary values. This operation increases the accuracy.\n","aa54da72":"<a id=\"8\"><\/a> \n## Gender - Stroke","0919f50f":"<a id=\"4\"><\/a> \n## Univariate Variable Analysis","1afafce5":"### If you have questions please ask them on the comment section.\n\n### I will be glad if you can give feedback.","2a0e72f8":"Now, we don't have categorical variables. Dataset is ready for Machine Leraning algorithms.","a37d539b":"<a id=\"16\"><\/a> \n# Missing Values","7ba81bf3":"Label Encoding is an encoding technique for handling categorical variables. In this technique, each data is assigned a unique integer.","7a75ed9f":"## **I have been denied access to my account. That's why I'm sharing it again.**","3d9a1574":"I will handle Categorical Values.","2e4bab81":"Content:\n\n1. [Importing the Necessary Libraries](#1)\n1. [Read Datas & Explanation of Features & Information About Datasets](#2)\n   1. [Variable Descriptions](#3)\n   1. [Univariate Variable Analysis](#4)\n      1. [Categorical Variables](#5)\n      1. [Numerical Variables](#6)\n1. [Basic Data Analysis](#7)\n   1. [Gender](#8)\n   1. [Ever Married](#9)\n   1. [Work Type](#10)\n   1. [Residence Type](#11)\n   1. [Smoking Status](#12)\n1. [Pandas Profiling](#13)\n1. [Correlation](#14)\n1. [Anomaly Detection](#15)\n1. [Missing Values](#16)\n   1. [bmi](#17)\n1. [Encoding](#18)\n   1. [Label Encoding](#19)\n   1. [One-Hot Encoding](#20)\n1. [Train-Test Split](#21)\n1. [Scores of Models](#22)\n1. [Evaluation of Models](#23)\n   1. [k-Fold Cross Validation](#24)\n   1. [Hyper-Parameter Optimization](#25)\n      1. [GridSearchCV](#26)\n      1. [RandomizedSearchCV](#27)\n   1. [Best Features Selection](#28)\n1. [Conclusion](#29)      ","f408b1f4":"<a id=\"14\"><\/a> \n# Correlation","95173768":"Standardization is a method in which the mean value is 0 and the standard deviation is 1, and the distribution approaches the normal. The formula is as follows, we subtract the average value from the value we have, then divide it by the variance value.","7a15f723":"<a id=\"19\"><\/a> \n## Label Encoding","317394a2":"<a id=\"10\"><\/a> \n## Work Type - Stroke","1dd51217":"<a id=\"20\"><\/a> \n## One-Hot Encoding","3b8eade2":"# Exploratory Data Analysis and Machine Learning Classification on Stroke Prediction","95d043ac":"Unlike parameters, hyperparameters are not learned during training the model. They are determined by the data scientist before the modeling phase. For example, KNN algorithm, which is one of the non-parametric classification algorithms, makes classification by looking at the nearest k neighbors to the desired value. Here, the k number (n_neighbors:) and the distance metric (metric:) to be used are the hyperparameters that should be specified by the data scientist before the modeling, which increases the performance of the model.\n\n**Hyperparameter optimization** is the process of finding the most suitable hyperparameter combination according to the success metric specified for a machine learning algorithm.\n\nGiven that there are dozens of hyperparameters for a machine learning algorithm and dozens of values these hyperparameters can take, it's clear how difficult it will be to try all combinations one by one and pick the best combination. For this reason, different methods have been developed for hyperparameter optimization. GridSearcCV and RandomizedSearchCV are among these methods.","9912a3f3":"<a id=\"28\"><\/a> \n## Best Features Selection","840372c2":"For the hyperparameters and their values that are desired to be tested in the model, a separate model is established with all combinations and the most successful hyperparameter set is determined according to the specified metric.","1b174a11":"These are the ML algorithms that will apply to dataset. Results will contain train-validation-test scores, confusion matrix, statistical information and classification reports for each algorithm.","77f47b78":"<a id=\"21\"><\/a> \n# Train - Test Split"}}