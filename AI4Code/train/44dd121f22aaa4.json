{"cell_type":{"ae21ded8":"code","a8679a75":"code","c8d1362d":"code","6c83c270":"code","2a05c308":"code","2843d4da":"code","4455a38e":"code","10a3d0d0":"code","17d77b4a":"code","d93dd86f":"code","449bc26f":"code","6ed70e82":"code","ae5d6777":"code","1e997481":"code","2f6f469b":"code","0b42cd7c":"code","ae0b852e":"code","7de5a945":"code","f86f058b":"code","2503a0f7":"code","a7859639":"code","8cc037cc":"code","5ef10daf":"code","bd299bb2":"code","21e9b146":"code","693b1c60":"code","71766add":"code","59f2704c":"code","67302952":"code","e55672c9":"code","95b3d537":"code","95d55172":"code","e144b22c":"code","61b24670":"code","c3a35a67":"code","d2178d1a":"code","5a83acbc":"code","fdc285bd":"code","56fc67c2":"code","2ad9686f":"code","f41ee0d9":"code","cb23a484":"code","01d17ada":"code","86f086a2":"code","018786d0":"code","df6107d4":"code","8d49595c":"code","a140a5c2":"code","383f1bdc":"code","de0820d3":"code","cdefb563":"code","1b8332bc":"code","bd07528f":"code","b0a64092":"code","9ecd0c4e":"code","4c97d0c1":"code","7b2a32a2":"code","0a7f0ad3":"code","31c2eb5f":"code","9c67bac6":"code","c91726e5":"code","16d3e40d":"code","15fe9a28":"code","a30d47af":"code","8cdbe2aa":"code","ecec9d60":"code","ce345ea6":"code","f91fded1":"code","ae47d6a1":"code","c4c3a0cc":"code","2c174557":"code","59f40f5d":"code","b5be464e":"markdown","78bf9b65":"markdown","c0438fd0":"markdown","bf02fe77":"markdown","6578f35b":"markdown","d164e29d":"markdown","30bfe723":"markdown","0d135c3b":"markdown","cb55619f":"markdown","a108e2ac":"markdown","b78bfba8":"markdown","ed9e6d39":"markdown","bf7ce019":"markdown","d89dcbb7":"markdown","e3f720f9":"markdown","34eafb3d":"markdown","8aad6aa9":"markdown","df4f9767":"markdown","680a3b07":"markdown","73a59e32":"markdown","1b456b8d":"markdown","5856c34e":"markdown","b225c2de":"markdown","d7daec79":"markdown","f9d2ef72":"markdown","48294d75":"markdown","77fb33dc":"markdown","bc125e4a":"markdown","d34b3f00":"markdown","5988a967":"markdown","7daecc8b":"markdown","96612a5c":"markdown","8aa33f03":"markdown","89b1fae8":"markdown","b95c9ccc":"markdown"},"source":{"ae21ded8":"import numpy as np\nimport pandas as pd\nimport sqlite3\nimport datetime\nimport matplotlib.pyplot as plt\n% matplotlib inline","a8679a75":"con = sqlite3.connect(\"..\/input\/soccer\/database.sqlite\")\n\nplayers_query = \"\"\"\nselect pl.player_api_id player_id, pl.player_name player, pl.birthday, pl.height, pl.weight, pla.date, pla.overall_rating, \n       pla.potential, pla.preferred_foot, pla.attacking_work_rate, pla.defensive_work_rate, pla.crossing, pla.finishing,\n       pla.heading_accuracy, pla.short_passing, pla.volleys, pla.dribbling, pla.curve, pla.free_kick_accuracy,\n       pla.long_passing, pla.ball_control, pla.acceleration, pla.sprint_speed, pla.agility, pla.reactions, pla.balance,\n       pla.shot_power, pla.jumping, pla.stamina, pla.strength, pla.long_shots, pla.aggression, pla.interceptions,\n       pla.positioning, pla.vision, pla.penalties, pla.marking, pla.standing_tackle, pla.sliding_tackle, pla.gk_diving,\n       pla.gk_handling, pla.gk_kicking, pla.gk_positioning, pla.gk_reflexes\nfrom player pl join player_attributes pla on pl.player_api_id = pla.player_api_id\n\"\"\"\n\nplayers = pd.read_sql_query(players_query, con)\ncon.close()","c8d1362d":"con = sqlite3.connect(\"..\/input\/soccer\/database.sqlite\")\n\nteams_query = \"\"\"\nselect t.team_api_id team_id, t.team_long_name team, atr.date, atr.buildUpPlaySpeed, atr.buildUpPlaySpeedClass,\n       atr.buildUpPlayDribbling, atr.buildUpPlayDribblingClass, atr.buildUpPlayPassing, atr.buildUpPlayPassingClass,\n       atr.buildUpPlayPositioningClass, atr.chanceCreationPassing, atr.chanceCreationPassingClass, atr.chanceCreationCrossing,\n       atr.chanceCreationCrossingClass, atr.chanceCreationShooting, atr.chanceCreationShootingClass,\n       atr.chanceCreationPositioningClass, atr.defencePressure, atr.defencePressureClass, atr.defenceAggression,\n       atr.defenceAggressionClass, atr.defenceTeamWidth, atr.defenceTeamWidthClass, atr.defenceDefenderLineClass\nfrom team t join team_attributes atr on t.team_api_id = atr.team_api_id\n\"\"\"\n\nteams = pd.read_sql_query(teams_query, con)\ncon.close()","6c83c270":"con = sqlite3.connect(\"..\/input\/soccer\/database.sqlite\")\n\nmatch_query = \"\"\"\nselect m.match_api_id match_id, c.name country, l.name league, m.season, m.stage, m.date, home.team_long_name home_team,\n       away.team_long_name away_team, m.home_team_goal home_goal, m.away_team_goal away_goal\nfrom match m, country c, league l, team home, team away\nwhere m.country_id = c.id and m.league_id = l.id and\n      home.team_api_id = m.home_team_api_id and away.team_api_id = m.away_team_api_id\n\"\"\"\n\nmatch = pd.read_sql_query(match_query, con)\ncon.close()","2a05c308":"players.head()","2843d4da":"players.info()","4455a38e":"players.duplicated().sum()","10a3d0d0":"players[players.duplicated()]","17d77b4a":"players.isnull().sum()","d93dd86f":"teams.head()","449bc26f":"teams.info()","6ed70e82":"teams.duplicated().sum()","ae5d6777":"teams[teams.duplicated()]","1e997481":"teams.isnull().sum()","2f6f469b":"match.head()","0b42cd7c":"match.info()","ae0b852e":"match.duplicated().sum()","7de5a945":"match.isnull().sum()","f86f058b":"players_clean = players.copy()\nteams_clean = teams.copy()\nmatch_clean = match.copy()","2503a0f7":"players_clean.player_id = players_clean.player_id.astype('str')\n\nteams_clean.team_id = teams_clean.team_id.astype('str')\n\nmatch_clean.match_id = match_clean.match_id.astype('str')","a7859639":"match_clean.info()","8cc037cc":"players_clean.date = pd.to_datetime(players_clean.date)\nplayers_clean.birthday = pd.to_datetime(players_clean.birthday)\n\nteams_clean.date = pd.to_datetime(teams_clean.date)\n\nmatch_clean.date = pd.to_datetime(match_clean.date)","5ef10daf":"match_clean.info()","bd299bb2":"# Calculate ages in days\nplayers_clean['ages'] = players_clean.date - players_clean.birthday\n# Convert days into years\nages = []\nfor i in players_clean.ages:\n    g = round(int(str(i)[:-13])\/365.2422, 1)\n    ages.append(g)\n\nplayers_clean.insert(loc=2, column='age', value= ages)\n# Drop unnecessary columns\nplayers_clean.drop(columns=['birthday', 'ages'], inplace=True)","21e9b146":"players_clean.head(2)","693b1c60":"teams_clean.groupby('buildUpPlayDribblingClass')['buildUpPlayDribbling'].mean()","71766add":"little_mean = round(teams_clean.groupby('buildUpPlayDribblingClass')['buildUpPlayDribbling'].mean()[0], 1)\nlots_mean = round(teams_clean.groupby('buildUpPlayDribblingClass')['buildUpPlayDribbling'].mean()[1], 1)\nnormal_mean = round(teams_clean.groupby('buildUpPlayDribblingClass')['buildUpPlayDribbling'].mean()[2], 1)\nlittle_mean, lots_mean, normal_mean","59f2704c":"buildUpPlayDribbling_list = []\n\nfor i, _class in enumerate(teams_clean.buildUpPlayDribblingClass):\n    try:\n        if not np.isnan(teams_clean.buildUpPlayDribbling[i]):\n            buildUpPlayDribbling_list.append(teams_clean.buildUpPlayDribbling[i])\n        elif _class == 'Little' and np.isnan(teams_clean.buildUpPlayDribbling[i]):\n            buildUpPlayDribbling_list.append(little_mean)\n        elif _class == 'Lots' and np.isnan(teams_clean.buildUpPlayDribbling[i]):\n            buildUpPlayDribbling_list.append(little_mean)\n        elif _class == 'Normal' and np.isnan(teams_clean.buildUpPlayDribbling[i]):\n            buildUpPlayDribbling_list.append(normal_mean)\n    except:\n        continue\n\nteams_clean['buildUpPlayDribbling'] = buildUpPlayDribbling_list","67302952":"teams_clean.head()","e55672c9":"players_clean.isna().sum()","95b3d537":"players_clean.isna().any(axis=1).sum()","95d55172":"players_clean.shape","e144b22c":"# Ratio of null values\nnull_values_ratio = str(round(players_clean.isna().any(axis=1).sum() \/ players_clean.shape[0] * 100, 2)) + '%'\nnull_values_ratio","61b24670":"players_clean.dropna(inplace=True)","c3a35a67":"players_clean.shape","d2178d1a":"players_clean.drop_duplicates(inplace=True)\n\nteams_clean.drop_duplicates(inplace=True)","5a83acbc":"players_clean.duplicated().sum(), teams_clean.duplicated().sum()","fdc285bd":"players_df = players_clean","56fc67c2":"teams_df = teams_clean","2ad9686f":"match_df = match_clean","f41ee0d9":"# Defining a plotting function to ease plotting quickly\ndef plotting_bar(dataframe, title: str, xlabel=None, ylabel=None, colormap='coolwarm',\n                 figsize: tuple =(20,13), horizontal=False):\n    \"\"\"\n    Input: dataframe, plot title, horizantal axis label, vertical axis label, bars colormap,\n           figure size\n    Output: If horizontal = True, a horizontal bar plot\n            else, a vertical bar plot\n    \"\"\"\n    if horizontal:\n        dataframe.plot(kind='barh', figsize=figsize, colormap=colormap, width = 0.5)\n        plt.xlabel(ylabel)\n        plt.ylabel(xlabel)\n    else:\n        dataframe.plot(kind='bar', figsize=figsize, colormap=colormap)\n        plt.xlabel(xlabel)\n        plt.ylabel(ylabel)\n    plt.title(title)\n    plt.legend()\n    plt.show();","cb23a484":"players_df.describe()","01d17ada":"players_df.iloc[:, :15].hist(figsize=(20,10))","86f086a2":"players_df.iloc[:, 15:24].hist(figsize=(20,10))","018786d0":"players_df.iloc[:, 24:33].hist(figsize=(20,10))","df6107d4":"players_df.iloc[:, 33:].hist(figsize=(20,10))","8d49595c":"players.iloc[:, 5:20].boxplot(figsize=(20,10))","a140a5c2":"players.iloc[:, 20:32].boxplot(figsize=(20,10))","383f1bdc":"players.iloc[:, 32:].boxplot(figsize=(20,10))","de0820d3":"players_df.groupby('player').mean().sort_values('potential', ascending=False)[:10]","cdefb563":"top_potential = (players_df.groupby('player')['potential']\n                            .mean()\n                            .sort_values(ascending=False)[:10])\nplotting_bar(top_potential,\n             \"Top Potential Players\",\n             'Player', 'Potenial Percent',\n             'autumn', horizontal= True)\ntop_potential","1b8332bc":"top_rating = (players_df.groupby('player')['overall_rating']\n                        .mean()\n                        .sort_values(ascending=False)[:10])\nplotting_bar(top_rating,\n             \"Top Overall Ratings Players\", 'Player',\n             'Rating Percent', 'autumn', horizontal=True)\ntop_rating","bd07528f":"average_pl = players_df.mean(numeric_only=True)\naverage_pl","b0a64092":"av_best5_potential = (players_df.groupby('player')\n                                .mean()\n                                .sort_values('potential', ascending=False)[:5]\n                                .mean())\nav_best5_rating = (players_df.groupby('player')\n                             .mean()\n                             .sort_values('overall_rating', ascending=False)[:5]\n                             .mean())","9ecd0c4e":"fig0 = plt.figure(figsize = (20, 30)) \nax0 = fig0.add_subplot()\nind0 = np.arange(len(average_pl))\n\nplt.barh(ind0+0.25, av_best5_potential, color ='red', height = 0.25, label='Top 5 Potenial Players')\nplt.barh(ind0, av_best5_rating, color ='blue', height = 0.25, label='Top 5 Overall Rating Players')\nplt.barh(ind0-0.25, average_pl, color ='orange', height = 0.25, label='Average Attributes')\n\nax0.set_yticks(ind0)\nax0.set_yticklabels(average_pl.index.tolist())\nplt.yticks(fontsize=15)\nplt.ylabel(\"Player Attributes\", fontsize=18)\nplt.xlim(0,100)\nplt.xlabel(\"Percent\", fontsize=18)\nplt.title(\"Comparing Player Attributes of The Top Rated Players to Attributes of Other Players\", fontsize=23)\nplt.legend()\nplt.show();","4c97d0c1":"points_df = match_df.loc[:, ['league', 'season', 'home_team', 'away_team',\n                                    'home_goal', 'away_goal']]\n    # Creating Masks\nhome_team_wins = points_df.home_goal > points_df.away_goal\naway_team_wins = points_df.away_goal > points_df.home_goal\ndraw = points_df.home_goal == points_df.away_goal\n    # Set Points Conditions & Choices\nhome_points_conditions = [home_team_wins, draw]\naway_points_conditions = [away_team_wins, draw]\npoints_choices = [3, 1]\n\npoints_df['home_point'] = np.select(home_points_conditions, points_choices, 0)\npoints_df['away_point'] = np.select(away_points_conditions, points_choices, 0)\npoints_df['home_win'] = np.select([home_team_wins], [1], 0)\npoints_df['away_win'] = np.select([away_team_wins], [1], 0)\npoints_df['home_draw'] = np.select([draw], [1], 0)\npoints_df['away_draw'] = np.select([draw], [1], 0)\npoints_df['home_loss'] = np.select([away_team_wins], [1], 0)\npoints_df['away_loss'] = np.select([home_team_wins], [1], 0)\n\npoints_df.head(2)","7b2a32a2":"home_points = points_df.loc[:, ['league', 'season', 'home_team', 'home_point', 'home_win',\n                                'home_draw', 'home_loss', 'home_goal', 'away_goal']]\nhome_points.rename(columns={'home_goal':'h_goals', 'away_goal':'h_goal_conceded'}, inplace=True)\n\nhome_table = home_points.groupby(['home_team', 'league', 'season']).sum()\n\naway_points = points_df.loc[:, ['league', 'season', 'away_team', 'away_point', 'away_win',\n                                'away_draw', 'away_loss', 'away_goal', 'home_goal']]\naway_points.rename(columns={'away_goal':'a_goals', 'home_goal':'a_goal_conceded'}, inplace=True)\n\naway_table = away_points.groupby(['away_team', 'league', 'season']).sum()","0a7f0ad3":"home_table","31c2eb5f":"away_table","9c67bac6":"total = pd.concat([home_table, away_table], axis=1)\n\ntotal['points'] = total.home_point + total.away_point\ntotal['win'] = total.home_win + total.away_win\ntotal['draw'] = total.home_draw + total.away_draw\ntotal['loss'] = total.home_loss + total.away_loss\ntotal['goals'] = total.h_goals + total.a_goals\ntotal['goals_conceded'] = total.h_goal_conceded + total.a_goal_conceded\ntotal['match_played'] = total.win + total.draw + total.loss\n\ntotal.drop(columns=['home_point', 'home_win', 'home_draw', 'home_loss', 'h_goals', 'h_goal_conceded',\n                    'away_point', 'away_win', 'away_draw', 'away_loss', 'a_goals', 'a_goal_conceded'], inplace=True)\ntotal.to_csv('points.csv')\npoints_temp = pd.read_csv('points.csv')\npoints_temp.rename(columns={'home_team':'team'}, inplace=True)\npoints_temp.to_csv('points.csv', index=False)\npoints = pd.read_csv('points.csv')","c91726e5":"points","16d3e40d":"most_scoring = (points.groupby(['team'])['goals']\n                      .sum()\n                      .sort_values(ascending=False).iloc[:15])\nplotting_bar(most_scoring,\n             \"Top Goals scoring Teams\",\n             'Teams', 'Goals', horizontal=True)\nmost_scoring","15fe9a28":"most_scoring_per_season = (points.groupby(['team', 'season'])['goals']\n                                  .sum()\n                                  .sort_values(ascending=False)[:15])\nplotting_bar(most_scoring_per_season,\n             \"Top Goals scoring Teams per season\",\n             'Teams, Season', 'Goals', horizontal=True)\nmost_scoring_per_season","a30d47af":"average_atr = teams_df.mean(numeric_only=True)\naverage_atr","8cdbe2aa":"barca_atr = (teams_df.groupby('team').get_group('FC Barcelona')\n                                     .mean(numeric_only=True))\nbarca_atr","ecec9d60":"real_atr = (teams_df.groupby('team').get_group('Real Madrid CF')\n                                    .mean(numeric_only=True))\nreal_atr","ce345ea6":"fig1 = plt.figure(figsize = (20, 15)) \nax1 = fig1.add_subplot()\nind1 = np.arange(len(average_atr))\n\nplt.barh(ind1+0.25, real_atr, color ='red', height = 0.25, label='Real Madrid CF')\nplt.barh(ind1, barca_atr, color ='blue', height = 0.25, label='FC Barcelona')\nplt.barh(ind1-0.25, average_atr, color ='orange', height = 0.25, label='Average Attributes')\n\nax1.set_yticks(ind1)\nax1.set_yticklabels(average_atr.index.tolist())\nplt.yticks(fontsize=15)\nplt.ylabel(\"Team Attributes\", fontsize=18)\nplt.xlim(0,75)\nplt.xlabel(\"Percent\", fontsize=18)\nplt.title(\"Comparing Team Attributes of The Most Goals Scoring Teams to Attributes of Other Teams\", fontsize=23)\nplt.legend()\nplt.show();","f91fded1":"most_defeated = (points.groupby(['team'])['loss']\n                       .sum()\n                       .sort_values(ascending=False)[:15])\nplotting_bar(most_defeated,\n             \"Most Defeated Teams\",\n             'Teams', 'Losses', horizontal=True)\nmost_defeated","ae47d6a1":"kilm_atr = (teams_df.groupby('team')\n                    .get_group('Kilmarnock')\n                    .mean(numeric_only=True))\nkilm_atr","c4c3a0cc":"geta_atr = (teams_df.groupby('team')\n                    .get_group('Getafe CF')\n                    .mean(numeric_only=True))\ngeta_atr","2c174557":"sund_atr = (teams_df.groupby('team')\n                    .get_group('Sunderland')\n                    .mean(numeric_only=True))\nsund_atr","59f40f5d":"fig2 = plt.figure(figsize = (20, 15)) \nax2 = fig2.add_subplot()\nind2 = np.arange(len(average_atr))\n\nplt.barh(ind1+0.3, kilm_atr, color ='red', height = 0.2, label='Kilmarnock')\nplt.barh(ind1+0.1, geta_atr, color ='blue', height = 0.2, label='Getafe CF')\nplt.barh(ind1-0.1, sund_atr, color ='orange', height = 0.2, label='Sunderland')\nplt.barh(ind1-0.3, average_atr, color ='green', height = 0.2, label='Average Attributes')\n\nax2.set_yticks(ind2)\nax2.set_yticklabels(average_atr.index.tolist())\nplt.yticks(fontsize=15)\nplt.ylabel(\"Team Attributes\", fontsize=18)\nplt.xlim(0,75)\nplt.xlabel(\"Percent\", fontsize=18)\nplt.title(\"Comparing Team Attributes of The Most Defeated Teams to Attributes of Other Teams\", fontsize=23)\nplt.legend()\nplt.show();","b5be464e":"<a id='wrangling'><\/a>\n## Data Wrangling","78bf9b65":"### 4) The most goals scoring teams:\n* \"FC Barcelona\" & \"Real Madrid CF\" are in the top as in the below figurer from other teams: *__Mixed__* **Build Up Play Passing** & *__almost Wide__* **high Defence Team Width**.\n* But \"Real Madrid CF\" differs from all teams in that it has *__Rsiky__* **Chance Creation passing** & *__Lots__* **Chance Creation Shooting** which of course lead to scoring more goals.","c0438fd0":"### Research Question 2: What teams attributes lead to most goals scoring & most defeated teams?\n\n#### 1) First, we will modify 'match_df' dataframe to obtain points, goals, victories and losses for each team\n#### 2) Then, we will find the teams matching our criteria\n#### 3) Finally, we will find the attributes of those teams from 'teams_df' dataframe","bf02fe77":"* It looks like Real Madrid & Barcelona has two common attributes that differ from other teams: *__Mixed__* **Build Up Play Passing** & *__almost Wide__* **high Defence Team Width**\n* But Real Madrid differs from all teams in that it has *__Rsiky__* **Chance Creation passing** & *__Lots__* **Chance Creation Shooting** which of course lead to scoring more goals.","6578f35b":"### 2) Limitations in teams & players data:\n* Not knowing whom player belongs to which team is another big limitation in this dataset.\n* Even though, if we tried to get players\u2019 teams from \u201cmatch\u201d data starting players, it will take forever and it will not be accurate.\n* Imagine a team with three high potential players compared to another team with 7 high potential players compared to a team with no high potential players, would these conditions affect team results, wins and goals scored through the season?\n* I think it will have a big influence, but unfortunately, we cannot make sure of it because lack of data.","d164e29d":"* It looks like \"FC Barcelona\" & \"Real Madrid CF\" have beated all teams in scoring goals especially in season 2011\/2012\n* So, let's compare their attributes with the mean attributes of all teams","30bfe723":"#### 1) Quality\n\n1. 'player_id', 'team_id' & 'match_id' dtypes are inconsistent\n2. 'birthday' & 'date' (in the three datasets) dtypes are inconsistent\n3. 'birthday' is less meaningful than age\n4. Missing data of 'buildUpPlayDribbling' in teams\n5. Missing data in players\n6. Duplicate data in players and teams","0d135c3b":"* #### Creating another copy of the data in order to start explosring them","cb55619f":"* ##### Let's compare the attributes of the top 3 defeated teams with the mean attributes of all teams","a108e2ac":"### 3) The top potential & overall rating players:\n* \"Lionel Messi\" & \"Cristiano Ronaldo\" are sitting on top of both lists.\n* Top rated players are higher than other players in almost all attributes except the gool keeping ones.\n* But the most unique attributes are **Dribbling**, **Ball Control**, **Agility**, **Reactions** & **Short Passing**.","b78bfba8":"* #### Creating copies of the data in order to start cleaning them","ed9e6d39":"##### a) Finding the most goals scoring teams","bf7ce019":"#### 1) Quality","d89dcbb7":"### Research Question 1: What player attributes is linked with the high potential & overall rating?\n\n* #### 1) First, we will explore all player attributes to see patterns\n* #### 2) Then, we will find the top rating players\n* #### 3) Finally, we will compare the average attributes of the top 5 rating players & the top 5 potential players to the average attributes of other players","e3f720f9":"<a id='conclusions'><\/a>\n## Conclusions","34eafb3d":"##### 5. Missing data in players\n* Remove rows containing null values from 'players' data","8aad6aa9":"##### 1. player_id, team_id & match_id dtypes are inconsistent\n* Convert all 'ids' dtypes to strings","df4f9767":"### Data Loading","680a3b07":"### Data Cleaning","73a59e32":"* It looks like Kilmarnock & Sunderland attributes do not differ much from other teams attributes.\n* But Getafe CF does differ in that it has *__Very slow__* **Build Up Play Speed** *__little__* **Chance Creation Crossing** & *__little__* **Defence Aggression** which of course lead to receiving more goals resulting in more defeats.","1b456b8d":"#### 2. birthday & date (in the three datasets) dtypes are inconsistent\n* Convert all dates dtypes to datetime","5856c34e":"##### 6. Duplicate data in players & teams\n* Remove duplicates from both datsets","b225c2de":"### 1) Limitations in player attributes data:\n* It seems to be there are a lot of outliers in almost all attributes, but actually, they are no outliers.\n* The thing is that there is a very important missing factor in these comparisons which is the position of the players or in other way the role of its player in the game.\n* As the attributes of defenders will not be like the forwards, and attributes of gool keepers will differ from those of midfielders. Of course, they might share some like (\u2018agility', 'reactions', 'balance', 'jumping', 'stamina', 'strength', 'aggression') but still there are big gaps between them.\n* The funny thing is that the outliers in all gool keeping attributes (gk_diving to gk_reflexes) are the data of the actual gool keepers which we should explore and study, not get rid of. Also, they are shown as  outliers because the ratio of goal keepers is about (3\/23) of each team.\n* So, this is a big limitation in this dataset, not mentioning the player role in the field beside his attributes to enable us to filter by roles and get accurate and efficient analysis.","d7daec79":"### Importing Libraries","f9d2ef72":"# Investigating European Soccer Database\n\n## Table of Contents\n<ul>\n<li><a href=\"#intro\">Introduction<\/a><\/li>\n<li><a href=\"#wrangling\">Data Wrangling<\/a><\/li>\n<li><a href=\"#eda\">Exploratory Data Analysis<\/a><\/li>\n<li><a href=\"#conclusions\">Conclusions<\/a><\/li>\n<\/ul>","48294d75":"##### After exploring patterns of player attributes:\n* It seems to be there are a lot of outliers in almost all attributes, but actually, they are no outliers.\n* The thing is that there is a very important missing factor in these comparisons which is the position of the players or in other way the role of its player in the game.\n* As the attributes of defenders will not be like the forwards, and attributes of gool keepers will differ from those of midfielders. Of course, they might share some like (\u2018agility', 'reactions', 'balance', 'jumping', 'stamina', 'strength', 'aggression') but still there are big gaps between them.\n* The funny thing is that the outliers in all gool keeping attributes (gk_diving to gk_reflexes) are the data of the actual gool keepers which we should explore and study, not get rid of. Also, they are shown as  outliers because the ratio of goal keepers is about (3\/23) of each team.\n* So, this is a big limitation in this dataset, not mentioning the player role in the field beside his attributes to enable us to filter by roles and get accurate and efficient analysis.","77fb33dc":"### 5) The most defeated teams:\n* \"Kilmarnock\", \"Getafe CF\" & \"Sunderland\" are the top three defeated teams.\n* \"Kilmarnock\" & \"Sunderland\" attributes do not differ much from other teams attributes.\n* But \"Getafe CF\" does differ in that it has *__Very slow__* **Build Up Play Speed** *__little__* **Chance Creation Crossing** & *__little__* **Defence Aggression** which of course lead to receiving more goals resulting in more defeats.","bc125e4a":"##### 3. 'birthday' is less meaningful than age\n* Replace 'birthday' column with 'age' column after calculating it using 'date'","d34b3f00":"### Data Assessing","5988a967":"<a id='intro'><\/a>\n## Introduction\n\n* This soccer database comes from  [Kaggle](https:\/\/www.kaggle.com\/hugomathien\/soccer). It contains data for soccer matches, players, and teams from several European countries from 2008 to 2016.\n* The database is stored in a SQLite database. You can access database files using software like [DB Browser](https:\/\/sqlitebrowser.org\/).\n* After exploring the data in [DB Browser](https:\/\/sqlitebrowser.org\/), we are going to assess and clean the data so that we can answer these research questions:\n1. **What player attributes is linked with the high potential & overall rating?**\n2. **What teams attributes lead to most goals scoring & most defeated teams?**","7daecc8b":"##### b) Finding the most defeated teams","96612a5c":"<a id='eda'><\/a>\n## Exploratory Data Analysis","8aa33f03":"* It looks like \"Lionel Messi\" & \"Cristiano Ronaldo\" are sitting on top of both lists\n* But there are so many attributes to check, so let's compare the average attributes of the top 5 rating players & the top 5 potential players to the average attributes of other players","89b1fae8":"* It looks like that top rated players are higher than other players in almost all attributes except the gool keeping ones.\n* But the most unique attributes are **Dribbling**, **Ball Control**, **Agility**, **Reactions** & **Short Passing**.","b95c9ccc":"##### 4. Missing data of 'buildUpPlayDribbling' in teams\n1. Group data by 'buildUpPlayDribblingClass' to find the mean of each class\n2. Fill null values with the mean of each class"}}