{"cell_type":{"1158be5a":"code","e5c2a4fb":"code","0866a0dd":"code","ce580175":"code","9be7743a":"code","2d0e5776":"code","d8faa035":"code","94ed4ac9":"code","70e28fdf":"code","23a7bbf6":"code","3f3bde90":"code","fffb0431":"code","1b0cec4d":"code","8ca89ec9":"code","ac92f90d":"code","45586efd":"code","8f717c50":"markdown","3b13762d":"markdown","a735e510":"markdown","a890d81d":"markdown","7c0072ed":"markdown"},"source":{"1158be5a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport json\nfrom ast import literal_eval\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e5c2a4fb":"meta = pd.read_csv('\/kaggle\/input\/the-movies-dataset\/movies_metadata.csv')","0866a0dd":"meta.head() # \ud655\uc778","ce580175":"meta = meta[['id', 'original_title', 'original_language', 'genres']]\nmeta = meta.rename(columns = {'id':'movieId'}) # \ub4a4\uc5d0\uc11c merge\ud558\uae30 \uc704\ud574 \uc774\ub984\uc744 \ud1b5\uc77c\nmeta = meta[meta['original_language'] == 'en']","9be7743a":"meta.head() # \ud655\uc778","2d0e5776":"ratings = pd.read_csv('\/kaggle\/input\/the-movies-dataset\/ratings_small.csv')","d8faa035":"# \uba3c\uc800 \uac04\ub2e8\ud558\uac8c \uc0ac\uc6a9\uc790ID\uc640 \uc601\ud654ID, \ubcc4\uc810\ub9cc \ubcf4\uc790\nratings = ratings[['userId', 'movieId', 'rating']]\nratings.head()\nratings.describe()","94ed4ac9":"# merge\ud558\uae30 \uc704\ud574 \uc22b\uc790\ub85c \ubc14\uafb8\uc5b4\uc900\ub2e4.\nmeta.movieId = pd.to_numeric(meta.movieId, errors = 'coerce')\nratings.movieId = pd.to_numeric(ratings.movieId, errors = 'coerce')","70e28fdf":"# json\ud615\uc2dd\uc73c\ub85c \ub418\uc5b4\uc788\ub294 \uc601\ud654 \uc7a5\ub974\ub97c list\ub85c \ubc14\uafd4\uc900\ub2e4.\nmeta['genres'] = meta['genres'].fillna('[]').apply(literal_eval).apply(\n    lambda x: [i['name'] for i in x] if isinstance(x, list) else [])","23a7bbf6":"meta.head() # \uc7a5\ub974\uc774\ub984\ub4e4\uc774 \uae54\ub054\ud574\uc9c4 \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\ub2e4.","3f3bde90":"data = pd.merge(ratings, meta, on='movieId', how='inner')","fffb0431":"data.head()","1b0cec4d":"matrix = data.pivot_table(index='userId', columns='original_title', values='rating')","8ca89ec9":"matrix.head(20)\n# \uce7c\ub7fc\uc5d0\ub294 \uc601\ud654\uc81c\ubaa9, \ub85c\uc6b0\uc5d0\ub294 \uad00\ub78c\uac1d\uc774 \ub098\uc628\ub2e4.","ac92f90d":"GENRE_WEIGHT = 0.1\n\ndef pearsonR(s1, s2):\n    s1_c = s1 - s1.mean()\n    s2_c = s2 - s2.mean()\n    return np.sum(s1_c * s2_c) \/ np.sqrt(np.sum(s1_c ** 2) * np.sum(s2_c ** 2))\n\ndef recommend(input_movie, matrix, n, similar_genre=True):# \uc601\ud654\uc758 \ud0c0\uc774\ud2c0, \ud53c\ubc97\ud14c\uc774\ube14, \uba87\uac1c\uc758 \uc601\ud654\ub97c \ucd94\ucc9c\ubc1b\uc744\uc9c0, \uc720\uc0ac\uc7a5\ub974\ub97c \uace0\ub824\ud560\uc9c0\n    \n    input_genres = meta[meta['original_title'] == input_movie]['genres'].iloc(0)[0]\n\n    result = []\n    for title in matrix.columns:\n        if title == input_movie: # \ub611\uac19\uc740 \uc601\ud654 \ucd94\ucc9c \ubc29\uc9c0\n            continue\n\n        # \uc0c1\uad00\uacc4\uc218 \uacc4\uc0b0\n        cor = pearsonR(matrix[input_movie], matrix[title])\n        \n        # \uc7a5\ub974 \ube44\uad50\n        if similar_genre and len(input_genres) > 0:\n            temp_genres = meta[meta['original_title'] == title]['genres'].iloc(0)[0]\n\n            '''\uac19\uc740 \uc7a5\ub974\uac00 \ub9ce\uc774 \ud3ec\ud568\ub420 \uc218\ub85d \uc0c1\uad00\uacc4\uc218\ub97c \ub354 \uc900\ub2e4.'''\n            '''---------------------------------------------------'''\n            same_count = np.sum(np.isin(input_genres, temp_genres))\n            cor += (GENRE_WEIGHT * same_count)\n            '''---------------------------------------------------'''\n        \n        if np.isnan(cor):\n            continue\n        else:\n            result.append((title, '{:.2f}'.format(cor), temp_genres))\n            \n    result.sort(key=lambda r: r[1], reverse=True) # rating\uc774 \ub192\uc740 \uc21c\uc11c\ub300\ub85c \uc815\ub82c\ud55c\ub2e4.\n\n    return result[:n]","45586efd":"recommend_result = recommend('The Dark Knight', matrix, 10, similar_genre=True)\n\npd.DataFrame(recommend_result, columns = ['Title', 'Correlation', 'Genre'])","8f717c50":"## \uc7a5\ub974\uc640 \uc601\ud654\uc774\ub984\uc744 \uc911\uc2ec\uc73c\ub85c \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","3b13762d":"## \ubcc4\uc810\ub370\uc774\ud130 \ub610\ud55c \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n### - \ubcc4\uc810\ub370\uc774\ud130\ub294 \uc774\ud6c4\uc5d0 meta\ub370\uc774\ud130\uc640 \ud569\uccd0\uc11c \ub2e8\uc21c \ucd94\ucc9c\uc2dc\uc2a4\ud15c\uc744 \ub9cc\ub4e4\uc5b4 \ubcfc \uac83\uc785\ub2c8\ub2e4.","a735e510":"## \uac04\ub2e8\ud55c \uc0c1\uad00\ubd84\uc11d \uc9c4\ud589\n### - \ud53c\uc5b4\uc2a8 \uc0c1\uad00\uacc4\uc218","a890d81d":"## \ud53c\ubc97 \ud14c\uc774\ube14 \ub9cc\ub4e4\uae30","7c0072ed":"## merge\ub97c \ud1b5\ud574 \ub450 \ub370\uc774\ud130\ub97c \ud569\uce68"}}