{"cell_type":{"c1107361":"code","778cc993":"code","981a46e2":"code","8d275e61":"code","3ffd0b09":"code","9765cf99":"code","3354467d":"code","15e784ca":"code","4ca9126e":"code","3157c2a8":"code","d45f1b6a":"code","c0b36283":"code","d6a17257":"code","de42ccb3":"code","f5f5987b":"code","7300967f":"code","5540b622":"code","9b2632a2":"code","e381daf2":"code","ec7fa0db":"code","a654a548":"code","3da0b7f1":"code","19ac25b2":"code","f2a93ede":"code","fcc00fcd":"code","04887df6":"code","1bfaec0a":"code","a785f568":"code","db2096eb":"code","6cd618a3":"code","f27fac98":"code","9b43039b":"markdown","0e1dba07":"markdown","ff1bf0e9":"markdown"},"source":{"c1107361":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","778cc993":"sample = pd.read_csv(\"..\/input\/optiver-realized-volatility-prediction\/sample_submission.csv\")\nsample","981a46e2":"test = pd.read_csv(\"..\/input\/optiver-realized-volatility-prediction\/test.csv\")\ntest","8d275e61":"book_testparquet = pd.read_parquet(\"..\/input\/optiver-realized-volatility-prediction\/book_test.parquet\/stock_id=0\")\nbook_testparquet","3ffd0b09":"trade_testparquet = pd.read_parquet(\"..\/input\/optiver-realized-volatility-prediction\/trade_test.parquet\/stock_id=0\")\ntrade_testparquet","9765cf99":"train = pd.read_csv(\"..\/input\/optiver-realized-volatility-prediction\/train.csv\")\ntrain","3354467d":"book_example = pd.read_parquet('..\/input\/optiver-realized-volatility-prediction\/book_train.parquet\/stock_id=0')\nbook_example\n","15e784ca":"\ntrade_example = pd.read_parquet(\"..\/input\/optiver-realized-volatility-prediction\/trade_train.parquet\/stock_id=0\")\ntrade_example","4ca9126e":"train","3157c2a8":"for col in train.columns:\n    print(col,':',len(train[col].unique()))\n    \n","d45f1b6a":"stock = train.groupby('stock_id')['target'].agg(['median','mean','std','count','sum']).reset_index()\nstock\n","c0b36283":"print('mean_value=',stock['mean'].mean())\nplt.hist(stock['mean'])","d6a17257":"print('stock_sum=',stock['sum'].mean())\nplt.hist(stock['sum'])","de42ccb3":"book_example","f5f5987b":"book_test = book_example.query('time_id ==5',engine='python')\nbook_test","7300967f":"samples = ['bid_price1','bid_price2','ask_price1','ask_price2']\nfor num,a in enumerate(samples):\n    plt.figure(figsize=(20,5))#\u30a6\u30a4\u30f3\u30c9\u30a6\n    plt.subplot(4,1,num+1)#\uff11\u884c\uff14\u5217\u5206\u5272\u3067\u30b0\u30e9\u30d5\u3092\u4f5c\u6210\u3001\uff13\u3064\u76ee\u306e\u5f15\u6570\u306f\u30b5\u30d6\u9818\u57df\u306e\u756a\u53f7\n    plt.plot(book_test['seconds_in_bucket'],book_test[a])\n    plt.title(a)\nplt.show()\nplt.figure(figsize = (20,5)) \n\nfor num,a in enumerate(samples):\n    plt.plot(book_test['seconds_in_bucket'],book_test[a],label=a,)\n    plt.legend(fontsize=12)","5540b622":"trade_test = trade_example.query('time_id==5',engine='python')\n\nplt.figure(figsize=(20,5))\n\nfor num,a in enumerate(samples):\n    plt.plot(book_test['seconds_in_bucket'],book_test[a],label=a)\n\nplt.plot(trade_test['seconds_in_bucket'],trade_test['price'],label='trade_parquet',lw=10)\nplt.legend(fontsize=12)","9b2632a2":"trade_test","e381daf2":"stock0 = train.query('stock_id==0',engine='python')\nmin_index = stock0['target'].idxmin()#\u6700\u5c0f\u5024\u306e\u5217\u540d\u3092\u53d6\u5f97\nmin_time_id = stock0.iloc[min_index]['time_id']#iloc\u306f\u8981\u7d20\u306e\u62bd\u51fa\nprint('min_time_id is',min_time_id,'target is',stock0.iloc[min_index]['target'])","ec7fa0db":"book_test_min = book_example.query('time_id == @min_time_id',engine = 'python')#\u5909\u6570\u306b\u306f@\u3092\u3064\u3051\u308b\ntrade_test_min = trade_example.query('time_id== @min_time_id',engine = 'python')\n\nplt.figure(figsize =(20,5))\n\nfor num,a in enumerate(samples):\n    \n    plt.plot(book_test_min['seconds_in_bucket'],book_test_min[a],label=a)\n\nplt.plot(trade_test_min['seconds_in_bucket'],trade_test_min['price'],label='trade_min_parquet',lw=12)\nplt.legend(fontsize=12)","a654a548":"max_index = stock0['target'].idxmax()\nmax_time_id = stock0.iloc[max_index]['time_id']\nprint('max_time_id is',max_time_id,'target is',max_index)\n\n","3da0b7f1":"book_test_max =  book_example.query('time_id == @max_time_id',engine = 'python')\ntrade_test_max = trade_example.query('time_id == @max_time_id',engine = 'python')\n\nplt.figure(figsize=(20,5))\n\nfor num,a in enumerate(samples):\n    plt.plot(book_test_max['seconds_in_bucket'],book_test_max[a],label=a)\n\nplt.plot(trade_test_max['seconds_in_bucket'],trade_test_max['price'],label = 'trade_max_parquet',lw=12)\nplt.legend(fontsize=12)\n\n","19ac25b2":"plt.figure(figsize=(20,5))\nplt.plot(trade_test_min['seconds_in_bucket'],trade_test_min['price'],label = 'trade_min_valatility',lw=12)\nplt.plot(trade_test_max['seconds_in_bucket'],trade_test_max['price'],label = 'trade_max_volatility', lw=12)\nplt.legend(fontsize=12)","f2a93ede":"stock","fcc00fcd":"#submit\nstock2=stock[['stock_id','median']]\nstock2=stock2.set_index('stock_id')\nstock2","04887df6":"#\u8f9e\u66f8\u578b\u306b\u3059\u308b\nstock_dict = stock2.to_dict()\n#example\nstock_dict","1bfaec0a":"sample","a785f568":"sample['stock_id'] = [s.split(\"-\")[0] for s in sample['row_id']]\nsample","db2096eb":"sample['target'] = [stock_dict['median'][int(s)] for s in sample['stock_id']]#target\u306b\u4e2d\u592e\u5024\u3092\u5165\u308c\u308b\nsample","6cd618a3":"submission = sample.drop('stock_id',axis=1)\nsubmission","f27fac98":"submission.to_csv(\"submission.csv\",index=False)","9b43039b":"<iframe src=\"https:\/\/www.kaggle.com\/embed\/jiashenliu\/introduction-to-financial-concepts-and-data?cellIds=18&kernelSessionId=67183666\" height=\"300\" style=\"margin: 0 auto; width: 100%; max-width: 950px;\" frameborder=\"0\" scrolling=\"auto\" title=\"Introduction to financial concepts and data\"><\/iframe>","0e1dba07":"\u30dc\u30e9\u30c6\u30a3\u30ea\u30c6\u30a3\u304c\u9ad8\u3044\u3068\u304d\u306f\u4fa1\u683c\u5909\u52d5\u304c\u8d77\u304d\u3084\u3059\u3044","ff1bf0e9":"<iframe src=\"https:\/\/www.kaggle.com\/embed\/jiashenliu\/introduction-to-financial-concepts-and-data?cellIds=18&kernelSessionId=67183666\" height=\"300\" style=\"margin: 0 auto; width: 100%; max-width: 950px;\" frameborder=\"0\" scrolling=\"auto\" title=\"Introduction to financial concepts and data\"><\/iframe>"}}