{"cell_type":{"18c09659":"code","4bd7179e":"code","c8530c3e":"code","dacd0975":"code","08d12b46":"code","7f3696de":"code","b64bad9e":"code","57ee4582":"code","74f066e3":"code","c0779a66":"code","835b2889":"code","c92067bb":"code","e3c518f2":"code","c18d48de":"code","67daad04":"code","dd61651e":"code","9fa4db9c":"code","c787cc1d":"code","0c7b204f":"code","10a416bc":"code","dab4e439":"code","7aa18198":"code","a2a7f7db":"code","f88cbb02":"code","81c67bd5":"code","b15d9dc9":"code","47a2ca2b":"markdown","4b337544":"markdown","6fccdad3":"markdown","decf61a1":"markdown","eebf11d5":"markdown","c4e64c5d":"markdown","32ab514f":"markdown","00291015":"markdown","9c88d3cf":"markdown","2b03c876":"markdown","fcc87f37":"markdown","0efd702e":"markdown","8d02082a":"markdown","9f5f01bf":"markdown","e7b78851":"markdown","0d7923a9":"markdown","45bfc06e":"markdown","6fe8a598":"markdown","71b50152":"markdown"},"source":{"18c09659":"%matplotlib inline\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport fbprophet\nimport plotly.graph_objs as go\nimport plotly.offline as py\nfrom plotly.offline import init_notebook_mode\ninit_notebook_mode(connected=True)\n\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n","4bd7179e":"estimated_days=91","c8530c3e":"names = ['Date','Price(USD)']\ndf = pd.read_csv('..\/input\/btcusd.csv',names=names)\ndf = df[1:]     # remove the first row","dacd0975":"df.head()","08d12b46":"df = df[['Date','Price(USD)']]\n","7f3696de":"\ndf = df.rename(columns={'Date': 'ds', 'Price(USD)': 'y'})\n","b64bad9e":"df.head()","57ee4582":"df.info()","74f066e3":"df['ds'] = pd.to_datetime(df['ds'], format='%Y-%m-%d')","c0779a66":"df['y'] = pd.to_numeric(df['y'],errors='ignore')","835b2889":"df = df[df['ds']>='2014-01-01']\ndf0=df.copy()\ndf = df[:-estimated_days]","c92067bb":"# Sort records by ds if not sorted\n# df = df.sort_values(by=['ds'],ascending=True)","e3c518f2":"df_prophet = fbprophet.Prophet(changepoint_prior_scale=0.15,yearly_seasonality=True,daily_seasonality=True)\ndf_prophet.fit(df)","c18d48de":"df_forecast = df_prophet.make_future_dataframe(periods= estimated_days*2, freq='D')","67daad04":"df_forecast = df_prophet.predict(df_forecast)","dd61651e":"# plot_components() draws 4 graps showing:\n#     - trend line\n#     - yearly seasonality\n#     - weekly seasonality\n#     - daily seasonality\ndf_prophet.plot_components(df_forecast)\n\n# Draw forecast results\ndf_prophet.plot(df_forecast, xlabel = 'Date', ylabel = 'Bitcoin Price (USD)')\n\n# Combine all graps in the same page\nplt.title(f'{estimated_days} daily BTC\/USD Estimation')\nplt.title('BTC\/USD Price')\nplt.ylabel('BTC (USD)')\nplt.show()","9fa4db9c":"\ntrace = go.Scatter(\n    name = 'Actual price',\n    mode = 'markers',\n    x = list(df_forecast['ds']),\n    y = list(df['y']),\n    marker=dict(\n        color='#FFBAD2',\n        line=dict(width=1)\n    )\n)\n","c787cc1d":"trace1 = go.Scatter(\n    name = 'trend',\n    mode = 'lines',\n    x = list(df_forecast['ds']),\n    y = list(df_forecast['yhat']),\n    marker=dict(\n        color='red',\n        line=dict(width=3)\n    )\n)\n","0c7b204f":"upper_band = go.Scatter(\n    name = 'upper band',\n    mode = 'lines',\n    x = list(df_forecast['ds']),\n    y = list(df_forecast['yhat_upper']),\n    line= dict(color='#57b88f'),\n    fill = 'tonexty'\n)\n","10a416bc":"lower_band = go.Scatter(\n    name= 'lower band',\n    mode = 'lines',\n    x = list(df_forecast['ds']),\n    y = list(df_forecast['yhat_lower']),\n    line= dict(color='#1705ff')\n)\n","dab4e439":"tracex = go.Scatter(\n    name = 'Actual price',\n   mode = 'markers',\n   x = list(df0['ds']),\n   y = list(df0['y']),\n   marker=dict(\n      color='black',\n      line=dict(width=2)\n   )\n)\n","7aa18198":"data = [tracex, trace1, lower_band, upper_band, trace]\n\nlayout = dict(title='Bitcoin Price Estimation Using FbProphet',\n             xaxis=dict(title = 'Dates', ticklen=2, zeroline=True))\n\nfigure=dict(data=data,layout=layout)\n","a2a7f7db":"plt.savefig('btc02.png')\n","f88cbb02":"\npy.offline.iplot(figure)\n# plt.show()","81c67bd5":"df = df0.copy()\ndf = df[df['ds']>='2016-01-01']\ndf1=df.copy()\ndf = df[:-estimated_days]\ndf_prophet = fbprophet.Prophet(changepoint_prior_scale=0.15,yearly_seasonality=True,daily_seasonality=True)\ndf_prophet.fit(df)\ndf_forecast = df_prophet.make_future_dataframe(periods= estimated_days*2, freq='D')\ndf_forecast = df_prophet.predict(df_forecast)\ntrace = go.Scatter(\n    name = 'Actual price',\n    mode = 'markers',\n    x = list(df_forecast['ds']),\n    y = list(df['y']),\n    marker=dict(\n        color='#FFBAD2',\n        line=dict(width=1)\n    )\n)\ntrace1 = go.Scatter(\n    name = 'trend',\n    mode = 'lines',\n    x = list(df_forecast['ds']),\n    y = list(df_forecast['yhat']),\n    marker=dict(\n        color='red',\n        line=dict(width=3)\n    )\n)\nupper_band = go.Scatter(\n    name = 'upper band',\n    mode = 'lines',\n    x = list(df_forecast['ds']),\n    y = list(df_forecast['yhat_upper']),\n    line= dict(color='#57b88f'),\n    fill = 'tonexty'\n)\nlower_band = go.Scatter(\n    name= 'lower band',\n    mode = 'lines',\n    x = list(df_forecast['ds']),\n    y = list(df_forecast['yhat_lower']),\n    line= dict(color='#1705ff')\n)\ntracex = go.Scatter(\n    name = 'Actual price',\n   mode = 'markers',\n   x = list(df1['ds']),\n   y = list(df1['y']),\n   marker=dict(\n      color='black',\n      line=dict(width=2)\n   )\n)\ndata = [tracex, trace1, lower_band, upper_band, trace]\n\nlayout = dict(title='Bitcoin Price Estimation Using FbProphet',\n             xaxis=dict(title = 'Dates', ticklen=2, zeroline=True))\n\nfigure=dict(data=data,layout=layout)\nplt.savefig('btc03.png')\npy.offline.iplot(figure)\n","b15d9dc9":"df = df1.copy()\ndf = df[df['ds']>='2017-01-01']\ndf2=df.copy()\ndf = df[:-estimated_days]\ndf_prophet = fbprophet.Prophet(changepoint_prior_scale=0.15,yearly_seasonality=True,daily_seasonality=True)\ndf_prophet.fit(df)\ndf_forecast = df_prophet.make_future_dataframe(periods= estimated_days*2, freq='D')\ndf_forecast = df_prophet.predict(df_forecast)\ntrace = go.Scatter(\n    name = 'Actual price',\n    mode = 'markers',\n    x = list(df_forecast['ds']),\n    y = list(df['y']),\n    marker=dict(\n        color='#FFBAD2',\n        line=dict(width=1)\n    )\n)\ntrace1 = go.Scatter(\n    name = 'trend',\n    mode = 'lines',\n    x = list(df_forecast['ds']),\n    y = list(df_forecast['yhat']),\n    marker=dict(\n        color='red',\n        line=dict(width=3)\n    )\n)\nupper_band = go.Scatter(\n    name = 'upper band',\n    mode = 'lines',\n    x = list(df_forecast['ds']),\n    y = list(df_forecast['yhat_upper']),\n    line= dict(color='#57b88f'),\n    fill = 'tonexty'\n)\nlower_band = go.Scatter(\n    name= 'lower band',\n    mode = 'lines',\n    x = list(df_forecast['ds']),\n    y = list(df_forecast['yhat_lower']),\n    line= dict(color='#1705ff')\n)\ntracex = go.Scatter(\n    name = 'Actual price',\n   mode = 'markers',\n   x = list(df2['ds']),\n   y = list(df2['y']),\n   marker=dict(\n      color='black',\n      line=dict(width=2)\n   )\n)\ndata = [tracex, trace1, lower_band, upper_band, trace]\n\nlayout = dict(title='Bitcoin Price Estimation Using FbProphet',\n             xaxis=dict(title = 'Dates', ticklen=2, zeroline=True))\n\nfigure=dict(data=data,layout=layout)\nplt.savefig('btc04.png')\npy.offline.iplot(figure)\n","47a2ca2b":"**Forecast future prices**","4b337544":"# <b>Bitcoin Price Estimation and Usage of FbProphet Library with Plotly<\/b>","6fccdad3":"**Visualize the results using fbprophet's plot_components() and plot() methods**","decf61a1":"In this project we will learn some basic properties of fbprophet library and we will make some estimations using bitcoin data.","eebf11d5":"Select the required columns. Actual column names might be different. We need only dates and prices columns.","c4e64c5d":"**Prepare Prophet() model and apply fit() method to that dataframe**","32ab514f":"- Daily bitcoin prices in a period of 2*91 days will be estimated. \n- In the first 91 days period actually there are prices. We will use the graphs to see the correctness of the estimations.\n- The second half will contain estimated future prices.","00291015":"**Draw plotly interactive graph.**","9c88d3cf":"**Change date format to datetime (if not).**","2b03c876":"**Now prepare for plotly graph.**","fcc87f37":"**Now, lets change the start date of the time series to 2016 an redraw the graph.**","0efd702e":"**Change price values to numeric if it is not.**","8d02082a":"**Append traces into data list. Prepare the layout and figure.**","9f5f01bf":"**Select the starting date and make a copy of df as df0, then remove last \"estimated_days\" from df (we will estimate these values).**","e7b78851":"**And now lets change the starting date to 2017, and redraw the same graph:**","0d7923a9":"**Check column types**","45bfc06e":"**I am using here 2 * estimated_days: half of it has actual prices to compare with trend values. The second half are new estimated future values.**","6fe8a598":"In FbProphet library we must use 'ds'  and 'y'  as column names. So we rename the existing columns.","71b50152":"**CONCLUSION**\n\n* FbProphet library makes the time series predictions very easily. \n* However, the selected portion of the time series, directly affects the results.\n* In the above examples, the second and the third graphs look better than the first one.\n* So, having more data does not mean getting better results everytime.\n* In order to get meaningful results, we should check different date scopes.\n\n"}}