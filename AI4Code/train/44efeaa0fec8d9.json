{"cell_type":{"c29ee4fe":"code","9f26abd7":"code","a5b9dfff":"code","5fa4aa30":"code","8ae8e027":"code","f9c661d0":"code","a9aafad0":"code","24a1f7e3":"code","1d54eebd":"code","352eb15c":"code","04011c9a":"code","2c38bb9c":"code","d30bc39b":"code","cfc848dc":"code","a31e21d4":"markdown"},"source":{"c29ee4fe":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9f26abd7":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()","a5b9dfff":"df = pd.read_csv('..\/input\/students-performance-in-exams\/StudentsPerformance.csv')\ndf.describe(include = 'all').round(2)","5fa4aa30":"df.head(5)","8ae8e027":"df.shape","f9c661d0":"df.info()","a9aafad0":"df.isna().sum()","24a1f7e3":"print(df['gender'].unique())\nh = sns.countplot(x = 'gender', data = df)\nplt.title('Gender',fontsize = 20)","1d54eebd":"sns.pairplot(df, hue = 'gender',kind = \"scatter\",corner = True, markers = ['o','D'])\nplt.show()\n","352eb15c":"pgrid = sns.PairGrid(df, hue = 'gender', corner = True)\npgrid = pgrid.map_offdiag(sns.scatterplot)\n\n(plt.figtext(0.12,0.75, \ndf['math score'].describe().round(2).loc[['mean','std','min','50%','max']].to_string()))\n\n(plt.figtext(0.4,0.45,\ndf['reading score'].describe().round(2).loc[['mean','std','min','50%','max']].to_string()))\n\n(plt.figtext(0.7,0.12,\ndf['writing score'].describe().round(2).loc[['mean','std','min','50%','max']].to_string()))\n\npgrid = pgrid.add_legend()","04011c9a":"print(df['race\/ethnicity'].unique())\nsns.countplot(x = 'race\/ethnicity', data = df)\nplt.title('Ethnicity',fontsize = 20)\nplt.xticks(rotation = 10)","2c38bb9c":"print(df['parental level of education'].unique())\nsns.countplot(x = 'parental level of education', data = df)\nplt.title('Parental Education',fontsize = 20)\nplt.xticks(rotation = 20)","d30bc39b":"print(df['test preparation course'].unique())\nsns.countplot(x = 'test preparation course', data = df)\nplt.title('Test Preparation',fontsize = 20)","cfc848dc":"correlation = df.corr()#Compute pairwise correlation of columns\nmask = np.triu(np.ones_like(correlation,dtype = bool))\nsns.set_style(style = 'white')\n\nplt.figure(edgecolor = 'black',dpi = 100) #figure resolution\nsns.heatmap(correlation, mask = mask, vmin = 0,vmax = 1,annot = True,lw = 1, linecolor = 'white',cmap = 'Blues')\nplt.title('Marks Correlation',fontsize = 20)\nplt.xticks(rotation = 0)\nplt.yticks(rotation = 0)","a31e21d4":"# Categorical Data"}}