{"cell_type":{"3a9fa6d1":"code","e386c963":"code","50f2f27d":"code","854c0a61":"code","f4380efe":"code","66583cd3":"code","65250d23":"code","938b1789":"code","4fc0131e":"code","8b195c9b":"code","0397fee6":"code","a5227be9":"code","811c95bd":"code","68906891":"code","ad09fc10":"code","a84507c7":"markdown","4861c8d3":"markdown"},"source":{"3a9fa6d1":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.plotly as py\nimport datetime\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\ninit_notebook_mode(connected=True)","e386c963":"print(os.listdir(\"..\/input\"))","50f2f27d":"# Histogram of column data\ndef plotHistogram(df, nHistogramShown, nHistogramPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nHistRow = (nCol + nHistogramPerRow - 1) \/ nHistogramPerRow\n    plt.figure(num=None, figsize=(6*nHistogramPerRow, 8*nHistRow), dpi=80, facecolor='w', edgecolor='k')\n    for i in range(min(nCol, nHistogramShown)):\n        plt.subplot(nHistRow, nHistogramPerRow, i+1)\n        df.iloc[:,i].hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation=90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad=1.0, w_pad=1.0, h_pad=1.0)\n    plt.show()","854c0a61":"\n# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n\n","f4380efe":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()","66583cd3":"\nproc_data = pd.read_csv('..\/input\/procurement-notices.csv')","65250d23":"proc_data.head()","938b1789":"proc_data.tail()","4fc0131e":"proc_data.info()","8b195c9b":"# datetiming deadline date\nproc_data['Deadline Date'] = pd.to_datetime(proc_data['Deadline Date'])\nproc_data.head(10)","0397fee6":"#how many null values are there in each column?\nprint(\"dataframe shape:\",proc_data.shape)\nprint(\"nulls on each column:\\n\",proc_data.iloc[:,:].isnull().sum()) ","a5227be9":"#deadlines after today, the ones with NaT do not have a deadline\n#so they are included\nproc_data[(proc_data['Deadline Date'] > pd.Timestamp.today()) | \n    (proc_data['Deadline Date'].isnull())].count().ID","811c95bd":"# distribution by country\ncurrent_calls = proc_data[(proc_data['Deadline Date'] > pd.Timestamp.today())]\ncalls_by_country = current_calls.groupby('Country Name').size()\nprint(\"calls_by_country:\\n\",calls_by_country)","68906891":"iplot([go.Choropleth(\n    locationmode='country names',\n    locations=calls_by_country.index.values,\n    text=calls_by_country.index,\n    z=calls_by_country.values\n)])","ad09fc10":"# distribution of due dates\nax = current_calls.groupby('Deadline Date').size().plot.line(figsize = (12,6))\nax.set_title('Deadline Dates Distribution')","a84507c7":"## Import Library","4861c8d3":"### Distribution by country"}}