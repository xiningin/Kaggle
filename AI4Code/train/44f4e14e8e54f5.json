{"cell_type":{"884957d4":"code","f4939678":"code","3b13fa1b":"code","77f7ebc1":"code","84e86d9c":"code","8df626f9":"code","acd7c5ef":"code","a1ac3125":"code","a97d7b9a":"code","97ee3146":"code","a6d2b2f3":"code","dd592a4c":"code","8d70c17f":"code","a7d29e14":"code","9a48e0f3":"code","121953a0":"code","0e217be3":"code","681c333e":"code","a6b505f7":"code","7ed5fd46":"code","949506b5":"code","4afbad23":"code","74729c4f":"code","40c331cf":"code","f6c33086":"code","23697604":"code","e5c41de5":"code","75fb4552":"code","f6bc880a":"code","903ae833":"code","dbb4ea56":"code","0a850e12":"code","7fd6a1b7":"code","5d47965e":"code","5acddb10":"code","52e6ac89":"code","f669b690":"code","94984ba5":"code","b65277a2":"code","70a12ddf":"code","7cb6a0fd":"markdown"},"source":{"884957d4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport pandas as pd\nimport sqlite3\nfrom datetime import datetime\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport timeit\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f4939678":"con=sqlite3.connect('..\/input\/california-traffic-collision-data-from-switrs\/switrs.sqlite')\ncur = con.cursor()","3b13fa1b":"query_collisions = \"SELECT * FROM collisions LIMIT 1000\"\nquery_parties = \"SELECT * FROM parties LIMIT 1000\"\nvictims = \"SELECT * FROM victims LIMIT 1000\"","77f7ebc1":"dataset_collisions = pd.read_sql_query(query_collisions, con)\ndataset_parties = pd.read_sql_query(query_parties, con)","84e86d9c":"dataset_parties.info()","8df626f9":"dataset_collisions.info()","acd7c5ef":"new_query_collisions = \"\"\"SELECT case_id, population, special_condition,weather_1, location_type, collision_severity,\n                        killed_victims, injured_victims, party_count, primary_collision_factor, type_of_collision,\n                        road_condition_1, severe_injury_count,pedestrian_killed_count, pedestrian_injured_count,bicyclist_killed_count,\n                        bicyclist_injured_count, motorcyclist_killed_count, motorcyclist_injured_count, collision_date, collision_time,\n                        alcohol_involved, motor_vehicle_involved_with \n                        FROM collisions \n                        WHERE (collision_time IS NOT NULL) and (collision_date IS NOT NULL)\"\"\"","a1ac3125":"starttime = timeit.default_timer()\ndf_query_collisions = pd.read_sql_query(new_query_collisions, con)\nendtime = timeit.default_timer()\ntempototal = round((endtime - starttime),2)\nprint(f\"Tempo total de processamento: {tempototal}s\")","a97d7b9a":"df_col = df_query_collisions.copy()","97ee3146":"def retorna_dia_da_semana(x):\n    dias_da_semana = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\n    dia = x.weekday()\n    return dias_da_semana[dia]\n\ndef get_morte(x):\n    if x > 0:\n        return \"Acidente com morte\"\n    elif x == 0:\n        return \"Acidente sem morte\"\n    else:\n        return \"Indefinido\"","a6d2b2f3":"df_col[\"collision_date_strp\"] = df_col[\"collision_date\"].apply(lambda x: datetime.strptime(x, \"%Y-%m-%d\"))\ndf_col[\"ano\"] = df_col[\"collision_date\"].apply(lambda x: x.split(\"-\")[0])\ndf_col[\"dia_da_semana\"] = df_col[\"collision_date_strp\"].apply(lambda x: retorna_dia_da_semana(x))\ndf_col[\"morte_envolvida\"] = df_col[\"killed_victims\"].apply(lambda x: get_morte(x))\ndf_col[\"hora_colisao_int\"] = df_col[\"collision_time\"].apply(lambda x: x.split(\":\")[0])","dd592a4c":"df_col[\"hora_colisao_int\"] = df_col[\"hora_colisao_int\"].astype(int)","8d70c17f":"df_col[\"mes\"] = df_col[\"collision_date_strp\"].apply(lambda x: x.month)","a7d29e14":"mes_acidentes = df_col[\"mes\"].value_counts().sort_values(ascending=False).reset_index()\nmes_acidentes.columns = [\"mes\", \"quantidade\"]\nmes_acidentes[\"mes\"] = mes_acidentes[\"mes\"].astype(str)\n\nmeses = {\"1\":\"Jan\", \"2\":\"Fev\", \"3\":\"Mar\", \"4\":\"Abr\", \"5\":\"Mai\", \n         \"6\":\"Jun\", \"7\":\"Jul\", \"8\":\"Ago\", \"9\":\"Set\",\"10\":\"Out\",\"11\":\"Nov\",\"12\":\"Dez\"}\n\nmes_acidentes[\"mes\"] = mes_acidentes[\"mes\"].apply(lambda x: meses[x])","9a48e0f3":"plt.figure(figsize=(10,10))\nsns.barplot(y=\"mes\", x=\"quantidade\", data=mes_acidentes, palette=\"Blues_r\")\nplt.title(\"Meses com mais acidentes\")\nplt.ylabel(None)\nplt.xlabel(\"Acidentes\");","121953a0":"data_minima = min(df_col[\"collision_date_strp\"]).date()\ndata_maxima = max(df_col[\"collision_date_strp\"]).date()\nmax_vitimas_mortas = max(df_col[\"killed_victims\"])\nmax_vitimas_feridas = max(df_col[\"injured_victims\"])\ndia_max_vitimas = df_col[df_col[\"killed_victims\"]==max_vitimas_mortas]","0e217be3":"print(f\"Total de colis\u00f5es: {df_col['case_id'].nunique()}\")\nprint(f\"Intervalo de datas: De {data_minima} at\u00e9 {data_maxima}\")\nprint(f\"M\u00e1ximo de v\u00edtimas mortas em um \u00fanico acidente: {max_vitimas_mortas}\")\nprint(f\"M\u00e1ximo de v\u00edtimas feridas em um \u00fanico acidente: {max_vitimas_feridas}\")","681c333e":"dia_max_vitimas","a6b505f7":"plt.figure(figsize=(6,6))\nsns.countplot(x=\"morte_envolvida\", data=df_col)\nplt.title(\"Tipos de acidentes\")\nplt.xlabel(None);\nplt.ylabel(\"Acidentes\")","7ed5fd46":"plt.figure(figsize=(5,5))\nsns.displot(df_col, x=\"hora_colisao_int\", bins=20)\nplt.title(\"Hor\u00e1rio com mais acidentes\")\nplt.ylabel(\"Acidentes\")\nplt.xlabel(\"Hora\");","949506b5":"df_mortes = df_col[df_col[\"killed_victims\"]>0]\ndf_sem_mortes = df_col[df_col[\"killed_victims\"]==0]","4afbad23":"plt.figure(figsize=(5,5));\nsns.displot(df_mortes, x=\"hora_colisao_int\", bins=20);\nplt.title(\"Hor\u00e1rio de acidentes com mortes\")\nplt.ylabel(\"Acidentes\")\nplt.xlabel(\"Hora\");","74729c4f":"plt.figure(figsize=(5,5))\nsns.displot(df_sem_mortes, x=\"hora_colisao_int\", bins=20);\nplt.title(\"Hor\u00e1rio de acidentes sem mortes\")\nplt.xlabel(\"Hora\")\nplt.ylabel(\"Acidentes\");","40c331cf":"df_kill = df_col[[\"killed_victims\", \"injured_victims\", \"ano\"]].groupby(\"ano\").count().reset_index()","f6c33086":"plt.figure(figsize=(12,5))\nsns.lineplot(data=df_kill, x=\"ano\", y=\"killed_victims\")\nplt.title(\"Acidentes no decorrer dos anos\")\nplt.ylabel(\"Acidentes\")\nplt.xlabel(\"Ano\")\nplt.ylim(0)","23697604":"fig, ax = plt.subplots(3,2, figsize=(18,20))\npalette = \"Blues_r\"\ny_label = \"Acidentes\"\nx_label = None\nlabelrotation = 15\n\nax[0,0] = sns.countplot(x='location_type',data=df_col, ax=ax[0,0],palette=palette,\n                        order=df_col[\"location_type\"].value_counts().index)\nax[0,0].set_title(\"Localiza\u00e7\u00e3o\")\nax[0,0].set_ylabel(y_label)\nax[0,0].set_xlabel(x_label)\n\n\nax[0,1] = sns.countplot(x='type_of_collision',data=df_col, ax=ax[0,1],palette=palette,\n                        order=df_col[\"type_of_collision\"].value_counts().index)\nax[0,1].set_title(\"Tipo de Colis\u00e3o\")\nax[0,1].set_ylabel(y_label)\nax[0,1].set_xlabel(x_label)\nax[0,1].tick_params(axis=\"x\", labelrotation=labelrotation )\n\n\nax[1,0] = sns.countplot(x='weather_1',data=df_col, ax=ax[1,0],palette=palette,\n                        order=df_col[\"weather_1\"].value_counts().index)\nax[1,0].set_title(\"Clima\/Tempo\")\nax[1,0].set_ylabel(y_label)\nax[1,0].set_xlabel(x_label)\n\n\nax[1,1] = sns.countplot(x='primary_collision_factor',data=df_col, ax=ax[1,1],palette=palette,\n                        order=df_col[\"primary_collision_factor\"].value_counts().index,)\nax[1,1].set_title(\"Primeiro Fator de Colis\u00e3o\")\nax[1,1].set_ylabel(y_label)\nax[1,1].set_xlabel(x_label)\nax[1,1].tick_params(axis=\"x\", labelrotation=labelrotation )\n\n\nax[2,0] = sns.countplot(x='collision_severity',data=df_col, ax=ax[2,0],palette=palette,\n                        order=df_col[\"collision_severity\"].value_counts().index,)\nax[2,0].set_title(\"Severidade da Colis\u00e3o\")\nax[2,0].set_ylabel(y_label)\nax[2,0].set_xlabel(x_label)\nax[2,0].tick_params(axis=\"x\", labelrotation=labelrotation )\n\n\nax[2,1] = sns.countplot(x='type_of_collision',data=df_col, ax=ax[2,1],palette=palette,\n                        order=df_col[\"type_of_collision\"].value_counts().index,)\nax[2,1].set_title(\"Tipo da Colis\u00e3o\")\nax[2,1].set_ylabel(y_label)\nax[2,1].set_xlabel(x_label)\nax[2,1].tick_params(axis=\"x\", labelrotation=labelrotation );","e5c41de5":"dia_semana = df_col[\"dia_da_semana\"].value_counts().reset_index()\ndia_semana.columns = [\"dia_da_semana\", \"acidentes\"]","75fb4552":"plt.figure(figsize=(10,10))\nsns.barplot(y=\"dia_da_semana\", x=\"acidentes\", data=dia_semana, palette=\"Blues_r\")\nplt.title(\"Dias da semana com mais acidentes\")\nplt.ylabel(None)\nplt.xlabel(\"Acidentes\");","f6bc880a":"df_kill1 = df_col[[\"killed_victims\", \"injured_victims\",\n                  \"dia_da_semana\",]].groupby(by=[\"dia_da_semana\"]).agg({\"killed_victims\":\"sum\",\n                    \"injured_victims\":\"sum\"}).reset_index()\ndf_killk = df_kill1.sort_values(by=\"killed_victims\", ascending=False)\ndf_killi = df_kill1.sort_values(by=\"injured_victims\", ascending=False)","903ae833":"plt.figure(figsize=(10,10))\nsns.barplot(y=\"dia_da_semana\", x=\"killed_victims\", data=df_killk, palette=\"Blues_r\")\nplt.title(\"Dias com acidentes com mortes envolvidas\")\nplt.ylabel(None)\nplt.xlabel(\"Acidentes com v\u00edtimas fatais\");","dbb4ea56":"plt.figure(figsize=(10,10))\nsns.barplot(y=\"dia_da_semana\", x=\"injured_victims\", data=df_killi, palette=\"Blues_r\")\nplt.title(\"Dias com acidentes sem mortes envolvidas\")\nplt.ylabel(None)\nplt.xlabel(\"Acidentes sem v\u00edtimas fatais\");","0a850e12":"plt.figure(figsize=(10,10))\nsns.countplot(y=df_col[\"motor_vehicle_involved_with\"], data=df_col,\n              order=df_col[\"motor_vehicle_involved_with\"].value_counts().index, palette=\"Blues_r\")\nplt.title(\"Maiores envolvimentos em acidentes\")\nplt.ylabel(\"Envolvimento com\")\nplt.xlabel(\"Quantidade de Acidentes\");","7fd6a1b7":"query_coli_part1 = \"\"\"SELECT c.case_id, c.motor_vehicle_involved_with, c.killed_victims, \n                   p.party_type, p.vehicle_year, p.vehicle_make \n                   FROM collisions as c INNER JOIN parties as p ON c.case_id = p.case_id\n                   WHERE (c.killed_victims > 0) and (c.motor_vehicle_involved_with='other motor vehicle')\n\"\"\"","5d47965e":"def gerar_join(query):\n    starttime = timeit.default_timer()\n    df_join = pd.read_sql_query(query, con)\n    endtime = timeit.default_timer()\n    tempo_total = round((endtime - starttime),2)\n\n    print(f\"Tempo total de execu\u00e7\u00e3o foi de: {tempo_total}s\")\n    return df_join","5acddb10":"df_join_col_part = gerar_join(query_coli_part1)","52e6ac89":"df_join_col_part.head()","f669b690":"plt.figure(figsize=(10,10));\nsns.displot(df_join_col_part, x=\"vehicle_year\", bins=40);\nplt.title(\"M\u00e9dia do ano dos carros\");","94984ba5":"marcas = df_join_col_part[[\"vehicle_make\", \"vehicle_year\",\n                  \"killed_victims\"]].groupby(\"vehicle_make\").agg({'killed_victims':\"sum\",\n                                                                  'vehicle_year':\"mean\"}).reset_index()\nmarcas.columns = [\"vehicle_make\",\"sum_victms\", \"mean_car_year\"]\nmarcas = marcas.sort_values(by=\"sum_victms\", ascending=False)\nmarcas = marcas.head(10)","b65277a2":"marcas","70a12ddf":"plt.figure(figsize=(10,10))\nsns.barplot(y=\"vehicle_make\", x='sum_victms', data=marcas, palette=\"Blues_r\")\nplt.title(\"V\u00edtimas fatais acumulado por marca\")\nplt.ylabel(\"Marca\")\nplt.xlabel(\"V\u00edtimas\")","7cb6a0fd":"<b>Tamanho dataset<\/b>: 6Gb\n<br>\n<b>Conte\u00fado:<\/b> Colis\u00f5es de Janeiro de 2001 at\u00e9 outubro de 2020 da California Highway Patrol \n<br>\n\n\n<b>Objetivo do notebook:<\/b>\n<br>-Realizar conex\u00e3o com banco de dados\n<br>-Treinamento de queries SQL\n<br>-Treinamento de ETL\n<br>-Aplicar os conhecimentos sobre dados obtidos nos \u00faltimos meses\n\n\n<b>Perguntas para serem respondidas:<\/b>\n<br>\n-Quais s\u00e3o os meses com mais acidentes?\n<br>\n-Quais s\u00e3o as horas com mais acidentes?\n<br>\n-Hor\u00e1rio de acidentes com v\u00edtimas e sem v\u00edtimas varia?\n<br>\n-Quais s\u00e3o os principais motivos dos acidentes?\n<br>\n-Quais s\u00e3o as marcas de carros envolvidas em mais acidentes?\n<br>\n-Qual \u00e9 a m\u00e9dia do ano dos carros envolvidos em acidentes?\n\n\n<b>Composi\u00e7\u00e3o do dataset:<\/b>\n<br>----------------------------<br>\n<b>Collisions:<\/b> Cont\u00e9m informa\u00e7\u00f5es sobre as colis\u00f5es, onde aconteceram, quais ve\u00edculos estavam envolvidos.\n<br><b>Total de Linhas:<\/b> Aprox. 9M\n<br>----------------------------<br>\n<b>parties:<\/b> Cont\u00e9m informa\u00e7\u00f5es sobre os grupos de pessoas envolvidas na colis\u00e3o, incluindo idade, sexo e sobriedade.\n<br><b>Total de Linhas:<\/b> Aprox. 18M\n<br>----------------------------<br>\n<b>victims:<\/b> cont\u00e9m informa\u00e7\u00f5es sobre os ferimentos de pessoas espec\u00edficas envolvidas na colis\u00e3o.\n<br><b>Total de Linhas:<\/b> Aprox. 9M\n\n<br><a href=\"https:\/\/www.kaggle.com\/alexgude\/california-traffic-collision-data-from-switrs\">Dataset Dispon\u00edvel Aqui<\/a>"}}