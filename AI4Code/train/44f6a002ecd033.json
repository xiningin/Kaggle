{"cell_type":{"c76f1529":"code","97b9137b":"code","0b5d07b8":"code","34e7acdd":"code","47055ca7":"code","3e47696f":"code","28e43906":"code","f5260a01":"code","12cdc9ac":"code","d8dead40":"code","44ae5144":"code","8350c47b":"code","e4a9ffeb":"code","c00c324d":"code","40d71287":"code","4f924ef2":"code","04cc97fa":"code","e456aff5":"code","70a327de":"code","41c9a4b4":"code","c16cce75":"code","e0d553ec":"code","8e60e690":"code","fdb2492e":"code","c29d23cb":"code","4ef1832c":"code","42f02357":"code","fac86d4b":"code","1e1e374e":"code","22101dfa":"code","10750192":"code","4101e573":"code","e016cc44":"code","635f95cd":"code","4f4961d7":"code","65d4b1f5":"code","e1f989a8":"code","389248be":"code","539a2611":"code","68096932":"code","d95631f7":"code","f6928006":"code","5f7bda4d":"code","663d9874":"code","5d53b0e1":"code","6ddb65ce":"code","6f701ae6":"code","1a2b4389":"code","ecb40db1":"code","50368994":"code","9ea572f4":"code","fe661f97":"code","69aa627f":"code","ada3d5c2":"code","27b8464c":"code","44c904b5":"code","838c7435":"code","d66fce8e":"code","be87473a":"code","c30d30af":"markdown","e71d8306":"markdown","fa13a779":"markdown","40c8e8db":"markdown","b5e53b00":"markdown","b2e6332d":"markdown","2920050e":"markdown","c2528838":"markdown","114bf3e4":"markdown","ec2bd2b0":"markdown","85504702":"markdown","fc9cec93":"markdown","da1cfd70":"markdown","25b3504b":"markdown","a8232014":"markdown","39476037":"markdown","d53205e3":"markdown","46fc2430":"markdown","de10393a":"markdown","67b1f319":"markdown","83fcd6b2":"markdown","c72f4b46":"markdown","a65d1c3d":"markdown","9e23c0ee":"markdown","1ba0bee8":"markdown","04bcbbdd":"markdown","1c505700":"markdown","e1b0d45e":"markdown","a2ef39ec":"markdown","84880076":"markdown","66798e03":"markdown","22dd3950":"markdown","1e6ea98b":"markdown","6deb70b5":"markdown","96f7d7d1":"markdown","f452adef":"markdown","76383654":"markdown","b08bddbb":"markdown","c64b845a":"markdown","4e7edc0d":"markdown","cd3711e3":"markdown","9fa0d76e":"markdown","3d9c400b":"markdown","a13bf0df":"markdown","7f5bf9a1":"markdown"},"source":{"c76f1529":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","97b9137b":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\ntest = pd.read_csv('\/kaggle\/input\/loan-prediction-problem-dataset\/test_Y3wMUE5_7gLdaTN.csv')\ntrain = pd.read_csv('\/kaggle\/input\/loan-prediction-problem-dataset\/train_u6lujuX_CVtuZ9i.csv')\ntrain_original = train.copy()\ntest_original = test.copy()","0b5d07b8":"train.info()","34e7acdd":"#plt.hist(train['ApplicantIncome']) #Will need to do a log transformation on this column\n#plt.hist(train['CoapplicantIncome']) #Will need to do a log transformation on this column\n#plt.hist(train['LoanAmount']) #Will need to do a log transformation on this column\n#plt.hist(train['Loan_Amount_Term'])\n#plt.hist(train['Credit_History'])","47055ca7":"train.describe()","3e47696f":"plt.title('Genders')\ntrain['Gender'].value_counts().plot.bar()","28e43906":"plt.title('Marital Status')\ntrain['Married'].value_counts().plot.bar()","f5260a01":"plt.title('Dependents')\ntrain['Dependents'].value_counts().plot.bar()","12cdc9ac":"plt.title('Education')\ntrain['Education'].value_counts().plot.bar()","d8dead40":"plt.title('Self-Employed')\ntrain['Self_Employed'].value_counts().plot.bar()","44ae5144":"plt.title('Property Area')\ntrain['Property_Area'].value_counts().plot.bar()","8350c47b":"train['Loan_Status'].value_counts()","e4a9ffeb":"ntrain = train.shape[0]\nntest = test.shape[0]\ny = train.Loan_Status.values\nall_data = pd.concat((train, test)).reset_index(drop=True)\nall_data.drop(['Loan_Status'], axis=1, inplace=True)\nprint(\"all_data size is : {}\".format(all_data.shape))\n\n\n#Credit to: https:\/\/stackoverflow.com\/questions\/18172851\/deleting-dataframe-row-in-pandas-based-on-column-value for helping me understand the correct way to drop my columns","c00c324d":"#Checking percentage of data that is na\nall_data_na = (all_data.isnull().sum() \/ len(all_data)) * 100\nall_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)[:30]\nmissing_data = pd.DataFrame({'Missing Ratio' :all_data_na})\nmissing_data.head(7)","40d71287":"all_data.head()","4f924ef2":"all_data.LoanAmount.describe()","04cc97fa":"Numeric_Columns = all_data.select_dtypes(include=np.number) #Creating dataset for just the numeric columns\nNumeric_Columns.head()","e456aff5":"from sklearn.impute import SimpleImputer\n\nmy_imputer = SimpleImputer()\nimputed_num = pd.DataFrame(my_imputer.fit_transform(Numeric_Columns)) #Using simple imputer to fill in missing values\n\nimputed_num.columns = Numeric_Columns.columns #Making column headings the same for imputed_num as Numeric_Columns\nidentification = all_data['Loan_ID'] #Making a column for Loan_ID to merge numerical and categorical data\nimputed_num = imputed_num.join(identification)\nimputed_num.head()","70a327de":"Categorical_Columns = all_data.select_dtypes(exclude=np.number)\nCategorical_Columns.drop(['Loan_ID'], axis=1, inplace=True)\nCategorical_Columns.head()","41c9a4b4":"imputed_categorical = pd.get_dummies(data=Categorical_Columns) #Using get_dummies to clean up categorical data\nimputed_categorical.head()","c16cce75":"imputed_categorical = imputed_categorical.join(identification)\nimputed_categorical.head()","e0d553ec":"merged_data = imputed_num.merge(imputed_categorical, on='Loan_ID') #Using similar id columns to merge data\nmerged_data.drop(['Loan_ID'], axis=1, inplace=True) #Need to drop Loan_ID now that we have successfully merged our data together\nmerged_data.head()","8e60e690":"all_data_nan = (merged_data.isnull().sum() \/ len(merged_data)) * 100\nall_data_nan = all_data_nan.drop(all_data_nan[all_data_nan == 0].index).sort_values(ascending=False)[:30]\nmissing_data = pd.DataFrame({'Missing Ratio' :all_data_nan})\nmissing_data.head(10)","fdb2492e":"X_tra = merged_data[:ntrain]\nX_test = merged_data[ntrain:]\nX_tra.info()","c29d23cb":"log_train = train_original\nlog_test = test_original\nlog_train.head()","4ef1832c":"log_train.drop(log_train.loc[log_train['ApplicantIncome']==0].index, inplace=True)\nlog_train.drop(log_train.loc[log_train['CoapplicantIncome']==0].index, inplace=True)\nlog_train.drop(log_train.loc[log_train['LoanAmount']==0].index, inplace=True)\n\nlog_test.drop(log_test.loc[log_test['ApplicantIncome']==0].index, inplace=True)\nlog_test.drop(log_test.loc[log_test['CoapplicantIncome']==0].index, inplace=True)\nlog_test.drop(log_test.loc[log_test['LoanAmount']==0].index, inplace=True)","42f02357":"nlogtrain = log_train.shape[0]\nnlogtest = log_test.shape[0]\ny_log = log_train.Loan_Status.values\nall_data_log = pd.concat((log_train, log_test)).reset_index(drop=True)\nall_data_log.drop(['Loan_Status'], axis=1, inplace=True)\nprint(\"all_data size is : {}\".format(all_data_log.shape))","fac86d4b":"#Perform log transformations\nall_data_log['ApplicantIncome_log'] = np.log(all_data_log['ApplicantIncome'])\nall_data_log['CoapplicantIncome_log'] = np.log(all_data_log['CoapplicantIncome'])\nall_data_log['LoanAmount_log'] = np.log(all_data_log['LoanAmount'])\nall_data_log.head()","1e1e374e":"all_data_log.info()","22101dfa":"plt.hist(all_data_log['ApplicantIncome_log']) ","10750192":"plt.hist(all_data_log['CoapplicantIncome_log']) ","4101e573":"plt.hist(all_data_log['LoanAmount_log'])","e016cc44":"all_data_log.drop(['ApplicantIncome'], axis=1, inplace=True)\nall_data_log.drop(['CoapplicantIncome'], axis=1, inplace=True)\nall_data_log.drop(['LoanAmount'], axis=1, inplace=True)","635f95cd":"all_data_log.head()","4f4961d7":"Numeric_Columns_log = all_data_log.select_dtypes(include=np.number) #Creating dataset for just the numeric columns\nNumeric_Columns_log.head()","65d4b1f5":"imputed_num_log = pd.DataFrame(my_imputer.fit_transform(Numeric_Columns_log)) #Using simple imputer to fill in missing values\n\nimputed_num_log.columns = Numeric_Columns_log.columns #Making column headings the same for imputed_num as Numeric_Columns\nidentification_log = all_data_log['Loan_ID'] #Making a column for Loan_ID to merge numerical and categorical data\nimputed_num_log = imputed_num_log.join(identification_log)\nimputed_num_log.head()","e1f989a8":"Categorical_Columns_log = all_data_log.select_dtypes(exclude=np.number)\nCategorical_Columns_log.drop(['Loan_ID'], axis=1, inplace=True)\nCategorical_Columns_log.head()","389248be":"imputed_categorical_log = pd.get_dummies(data=Categorical_Columns_log) #Using get_dummies to clean up categorical data\nimputed_categorical_log.head()","539a2611":"imputed_categorical_log = imputed_categorical_log.join(identification_log)\nimputed_categorical_log.head()","68096932":"merged_data_log = imputed_num_log.merge(imputed_categorical_log, on='Loan_ID') #Using similar id columns to merge data\nmerged_data_log.drop(['Loan_ID'], axis=1, inplace=True) #Need to drop Loan_ID now that we have successfully merged our data together\nmerged_data_log.head()","d95631f7":"all_data_log_nan = (merged_data_log.isnull().sum() \/ len(merged_data_log)) * 100\nall_data_log_nan = all_data_log_nan.drop(all_data_log_nan[all_data_log_nan == 0].index).sort_values(ascending=False)[:30]\nmissing_data_log = pd.DataFrame({'Missing Ratio' :all_data_log_nan})\nmissing_data_log.head(10)","f6928006":"X_tra_log = merged_data[:nlogtrain]\nX_test_log = merged_data[nlogtrain:]\nX_tra_log.info()","5f7bda4d":"from sklearn.model_selection import train_test_split\nX_train, X_cv, y_train, y_cv = train_test_split(X_tra, y, test_size =.3)","663d9874":"from sklearn.linear_model import LogisticRegression\n\nlog_model = LogisticRegression()\nlog_model.fit(X_train, y_train)\nLogisticRegression()","5d53b0e1":"from sklearn.metrics import accuracy_score\nlog_pred_cv = log_model.predict(X_cv)\naccuracy_score(y_cv, log_pred_cv)","6ddb65ce":"from sklearn import tree\n\ntree_model = tree.DecisionTreeClassifier()\ntree_model.fit(X_train, y_train)\ntree.DecisionTreeClassifier()","6f701ae6":"tree_pred_cv = tree_model.predict(X_cv)\naccuracy_score(y_cv, tree_pred_cv)","1a2b4389":"from sklearn.ensemble import RandomForestClassifier\n\nforest_model = RandomForestClassifier()\nforest_model.fit(X_train, y_train)\nRandomForestClassifier()","ecb40db1":"forest_pred_cv = forest_model.predict(X_cv)\naccuracy_score(y_cv, forest_pred_cv)","50368994":"from xgboost import XGBClassifier\n\nxgb_model = XGBClassifier(n_estimators=50, max_depth=4)\nxgb_model.fit(X_train, y_train)\nXGBClassifier()","9ea572f4":"xgb_pred_cv = xgb_model.predict(X_cv)\naccuracy_score(y_cv, xgb_pred_cv)","fe661f97":"X_train_log, X_cv_log, y_train_log, y_cv_log = train_test_split(X_tra_log, y_log, test_size =.3)","69aa627f":"log_model.fit(X_train_log, y_train_log)\nLogisticRegression()","ada3d5c2":"log_pred_cv_log = log_model.predict(X_cv_log)\naccuracy_score(y_cv_log, log_pred_cv_log)","27b8464c":"#Credit for ideas on improvement: https:\/\/stackoverflow.com\/questions\/38077190\/how-to-increase-the-model-accuracy-of-logistic-regression-in-scikit-python\n#Credit for ideas on improvement: https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.LogisticRegression.html\n\n#log_model = LogisticRegression()\n#log_model.fit(X_train, y_train)\n#LogisticRegression()\n\n#log_pred_cv = log_model.predict(X_cv)\n#accuracy_score(y_cv, log_pred_cv)","44c904b5":"log_model1 = LogisticRegression(random_state=42)\nlog_model1.fit(X_train, y_train)\n\nlog_pred_cv1 = log_model1.predict(X_cv)\naccuracy_score(y_cv, log_pred_cv1)\n#We get about the same results","838c7435":"log_model2 = LogisticRegression(random_state=42, solver='lbfgs')\nlog_model2.fit(X_train, y_train)\n\nlog_pred_cv2 = log_model2.predict(X_cv)\naccuracy_score(y_cv, log_pred_cv2)","d66fce8e":"#Our final model will be our log_model2 and we want to now use it to predict based on the information in our test dataset\nfinal_model = log_model2\npred_test = final_model.predict(X_test)","be87473a":"#Make new dataframe for our identification and loan_status predictions\nsubmission = pd.DataFrame()\n\n#Putting data into submission dataframe\nsubmission['Loan_Status'] = pred_test\nsubmission['Loan_ID'] = test_original['Loan_ID']\n\n#Makes more sense to put in terms of 'Y' and 'N' instead of 1 and 0 when talking about a loan being approved\nsubmission['Loan_Status'].replace(0, 'N', inplace=True)\nsubmission['Loan_Status'].replace(1, 'Y', inplace=True)\n\nsubmission.Loan_Status.value_counts()","c30d30af":"### Cleaning Missing Values","e71d8306":"We have some missing data in LoanAmount, Loan_Amount_Term and Credit_History that will have to get cleaned up. ","fa13a779":"This column is straight forward and it looks like most loan applicants are not self-employed.","40c8e8db":"#### Merging Numerical Dataset and Categorical Dataset Together","b5e53b00":"For the education column what we see is a little vague. No data description is given of this column. We see that there are more graduates than not, but we are not sure if this means people that graduate high school or university. The assumption would be that a graduate would mean from university, but we cannot be certain.","b2e6332d":"For cleaning the categorical variables I am going to use get_dummies to effectively clean. This will also prove effective for my model.","2920050e":"### Base Modeling with train_test_split","c2528838":"Will need to apply log transformations on the test columns ApplicantIncome, CoapplicantIncome and LoanAmount.","114bf3e4":"## Analyzing the Data","ec2bd2b0":"## Table of Contents\n\n* **[Analyzing the Data](#Analyzing-the-Data)**\n* **[Cleaning the Data](#Cleaning-the-Data)**\n* **[Modeling the Data](#Modeling-the-Data)**","85504702":"From what is seen above it might be helpful to convert some of these columns to boolean. However we will do some categorical encoding, so it might be better to just leave as is.","fc9cec93":"This model did better than the decision tree, but still not as good as the logistic regression. We will try one more method which is XGBoost.","da1cfd70":"Now we have a dataset with the combination of rows for train and test and the loan_status column dropped.","25b3504b":"Working with what looks like about three times as many Males than Females in the train dataset.","a8232014":"We can verify that these are now approximately normally distributed. From here we will go ahead and drop the original columns associated with the log transformations and then follow the same steps as with the all_data dataset with how we will clean.","39476037":"Because we have such a low percentage of missing values in each row it can be seen that none of these rows will need to be dropped, just cleaned up.","d53205e3":"It looks like our first model is about 80-85% accurate which is not bad at all, but we will work to do see if a better model can be achieved starting with a DecisionTreeClassifier.","46fc2430":"#### Cleaning Categorical Variables","de10393a":"From this we are predicting that the test dataset will have 305 accepted loans and 62 denied loans. Thinking back to the amount of loans that were approved and denied in the train dataset there were about 68% of applications that were accepted. With our model there are about 83% of applications that are accepted. This could be in part to either the fact that we are 80% accurate or the fact that there are simply more applicants in the test dataset that would qualify for a loan than in the train dataset.","67b1f319":"Now that we are setup to start cleaning the missing data we will split up the data into numeric and categorical variables.","83fcd6b2":"So the process does not have to be done twice for train and test, the datasets will be merged while it is cleaned and then split back up after the data is put together like wanted.","c72f4b46":"For this part of the process I am going to use simple imputer to quickly and effectively deal with my numeric missing data","a65d1c3d":"The columns that we are replacing with logarithm values are:\n* ApplicantIncome\n* CoapplicantIncome\n* LoanAmount\n\nFirst we will start again by merging the log_train and log_test and then perform the transformations.","9e23c0ee":"# Loan Approval Model","1ba0bee8":"## Cleaning the Data","04bcbbdd":"For cleaning the data there are a couple of tasks that will need to be done in order to make sure that the model is running the best it can.\n* Clean up the missing values\n* Check for any duplicates\n* Make a separate train dataset where the columns that needed a logistic regression earlier are modified.","1c505700":"Now we have a lot less rows to work with, but we are able to get log transformations that will be useful. Let's verify that we have a approximately normal distribution now by taking a look at the plots.","e1b0d45e":"Married is essentially a boolean column split up into yes and no answers. Looks like more of the train dataset includes people who are married.","a2ef39ec":"The log transformation will not be insightful if we have values equal to zero, so if that is the case we will need to drop them.","84880076":"## Logarithmic Cleaning","66798e03":"It seems like our basic logistic regression model actually appeared to do the best for this dataset. Before calling it quits a few things will be checked out to see if any slight improvements can be made to our Logistic Regression model.","22dd3950":"Now we are into the fun part working with building the best model we can for this data. A couple methods will be done. We are going to be using train_test_split and trying a couple different models like LogisticRegression, DecisionTreeClassifier, RandomForest and XGBoost. We will start with our original dataset and then like with the cleaning do the same methods with our log transformation dataset to see if that improved our model at all.","1e6ea98b":"#### Final Model","6deb70b5":"We seem to have a pretty equal distribution of property area, semiurban being the most popular area.","96f7d7d1":"Not as accurate as the logistic regression model, but we will see how a random forest classifier handles the dataset.","f452adef":"#### Cleaning Numeric Variables","76383654":"As can be seen above we no longer have any missing values. We are going to go ahead and split our data back up into our train and test datasets and then do the same process and make a separate dataset that contains our logarithmic columns.","b08bddbb":"The dependents column looks to be a column illustrating the amount of people that an independent claims. Most of the independents applying for loans look to have 0 dependents.","c64b845a":"Our last and most important column for our machine learning is the loan status column. This is the column that we are looking too predict. From here it looks like a good majority of applicants in the train dataset got there loan application approved.","4e7edc0d":"Our xgb did not do as well as the logistic regression model, so we will go ahead and just try to beef up the logistic regression model the best it can be. This starts with seeing if our log transformations helped the model.","cd3711e3":"## Modeling the Data","9fa0d76e":"### Log Dataset Modeling","3d9c400b":"Above I just wanted to quickly confirm that zero was not being counted as an NaN value or that No's were considered NaN's. As seen with the describe for Loan Amount column the lowest amount that there is, is nine which means that zeros are not apart of our range of values.","a13bf0df":"**Purpose:** The purpose of this notebook is to work with machine learning techniques to make the best model for approving or denying loan applications.\n\n**Result:** Able to produce a model with approximately 80% accuracy.","7f5bf9a1":"As it appears the making of new columns for log transformations was not very influential for finding a good model."}}