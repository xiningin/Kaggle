{"cell_type":{"f86417cd":"code","cda97ac7":"code","2e115ce0":"code","111991c8":"code","b302d7e2":"code","0ea108bc":"code","f2bcf647":"code","e8667680":"code","50afd19e":"code","ebfe3e4e":"code","5ddaead2":"code","01686516":"code","f3d607b5":"code","8a98bd31":"code","5b288d02":"code","9695c2f2":"code","3cb555da":"code","0fe88e5f":"code","f06c5c30":"code","5834af4c":"code","447173b1":"code","a563da5e":"code","efdec901":"code","161af627":"markdown","6d4e7213":"markdown","53e978d2":"markdown","bd333358":"markdown","cd5f90da":"markdown","92c3c45b":"markdown","9236ba77":"markdown","17ef259f":"markdown","769b0355":"markdown","089af92f":"markdown","e76465d9":"markdown","5b21e739":"markdown","51ebd611":"markdown","a0253864":"markdown"},"source":{"f86417cd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport io\nimport plotly.offline as py#visualization\npy.init_notebook_mode(connected=True)#visualization\nimport plotly.graph_objs as go#visualization\nimport plotly.tools as tls#visualization\nimport plotly.figure_factory as ff#visualization\n\n\nfrom sklearn import metrics\nfrom sklearn.model_selection import GridSearchCV,KFold,train_test_split, StratifiedKFold\nfrom sklearn.preprocessing import LabelEncoder\nfrom category_encoders import CatBoostEncoder, TargetEncoder\n\nfrom sklearn.naive_bayes import GaussianNB, BernoulliNB\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import SGDClassifier\nimport lightgbm as lgb\nfrom lightgbm import LGBMClassifier\nfrom xgboost import XGBClassifier, XGBRFClassifier\nfrom catboost import CatBoostClassifier\n\nfrom sklearn.metrics import accuracy_score,confusion_matrix,roc_auc_score,roc_curve,classification_report\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","cda97ac7":"churn_data = pd.read_csv(r\"\/kaggle\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv\")\nprint('''\n        Details of the dataset\n----------------------------------------\n\n''')\nprint(churn_data.info(verbose=True, null_counts=True, memory_usage='deep'))","2e115ce0":"pd.set_option('display.max_colwidth',500)\npd.set_option('display.max_columns',100)\nchurn_data.head(10)","111991c8":"churn_data.describe(include='all')","b302d7e2":"label=churn_data['Churn'].value_counts().keys().tolist()\nvalue=churn_data['Churn'].value_counts().tolist()\n\ndata = go.Pie(labels = label ,\n               values = value ,\n               marker = dict(colors =  [ 'lime','red'],\n                             line = dict(color = \"white\",\n                                         width =  2.5)\n                            ),\n               rotation = 90,\n               hoverinfo = \"label+value+text\",\n               hole = .5\n              )\nlayout = go.Layout(dict(title = \"Customer Churn Proportion\",\n                        plot_bgcolor  = \"rgb(243,243,243)\",\n                        paper_bgcolor = \"rgb(243,243,243)\",\n                       )\n                  )\nfig=go.Figure(data=data,layout=layout)\npy.iplot(fig)","0ea108bc":"churn_data['Churn']=np.where(churn_data.Churn =='Yes',1,0)\nchurn_data.TotalCharges=churn_data.TotalCharges.replace(' ',np.nan)\nchurn_data.dropna(inplace=True)\nchurn_data.TotalCharges=churn_data.TotalCharges.astype(float)","f2bcf647":"#replace 'No internet service' to No for the following columns\nreplace_cols = [ 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection',\n                'TechSupport','StreamingTV', 'StreamingMovies']\nfor i in replace_cols : \n    churn_data[i]  = churn_data[i].replace({'No internet service' : 'No'})","e8667680":"%matplotlib notebook\n%matplotlib inline\ndef cor_heat(df):\n    cor=df.corr()\n    plt.figure(figsize=(20,7),dpi=100)\n    sns.heatmap(data=cor,annot=True,square=True,linewidths=0.1,cmap='YlGnBu')\n    plt.title(\"Pearson Co-relation for numerical features: Heat Map\")\ncor_heat(churn_data.filter(regex='Senior|tenure|Charges|Churn'))","50afd19e":"def cor_categorical(col):\n    return churn_data.groupby(col)['Churn'].value_counts(normalize=True).unstack()[1].sort_values(ascending=False)    ","ebfe3e4e":"print('''\nCategorical features correlation with predictor\n-----------------------------------------------''')\nprint(cor_categorical('gender'))\nprint('-'*47)\nprint(cor_categorical('Partner'))\nprint('-'*47)\nprint(cor_categorical('Dependents'))\nprint('-'*47)\nprint(cor_categorical('PhoneService'))\nprint('-'*47)\nprint(cor_categorical('MultipleLines'))\nprint('-'*47)\nprint(cor_categorical('InternetService'))\nprint('-'*47)\nprint(cor_categorical('OnlineSecurity'))\nprint('-'*47)\nprint(cor_categorical('OnlineBackup'))\nprint('-'*47)\nprint(cor_categorical('DeviceProtection'))\nprint('-'*47)\nprint(cor_categorical('TechSupport'))\nprint('-'*47)\nprint(cor_categorical('StreamingTV'))\nprint('-'*47)\nprint(cor_categorical('StreamingMovies'))\nprint('-'*47)\nprint(cor_categorical('Contract'))\nprint('-'*47)\nprint(cor_categorical('PaperlessBilling'))\nprint('-'*47)\nprint(cor_categorical('PaymentMethod'))","5ddaead2":"def label_encoder(col):\n    churn_data[col]=LabelEncoder().fit_transform(churn_data[col])\n\nfor cols in churn_data.columns.drop(['customerID','TotalCharges','tenure','MonthlyCharges','Churn']).tolist():\n    label_encoder(cols)","01686516":"X=churn_data.drop(['Churn'],axis=1).set_index('customerID')\ny=churn_data[['Churn']]\nX_train, X_test, y_train, y_test = train_test_split(X,y, \n                                                    test_size=0.2, \n                                                    random_state=0,\n                                                    stratify=y)","f3d607b5":"def model_building(model):\n    your_model=model\n    your_model.fit(X_train,y_train)\n    pred=your_model.predict(X_test)\n    print(\"Accuracy of {0} : {1}\".format(str(model)[:],accuracy_score(y_test,pred)))\n    print(\"AUC :\",roc_auc_score(y_test,pred))","8a98bd31":"model_building(LogisticRegression(solver='newton-cg'))","5b288d02":"model_building(LogisticRegression(solver='liblinear'))","9695c2f2":"model_building(GaussianNB())","3cb555da":"model_building(BernoulliNB())","0fe88e5f":"model_building(SVC(kernel='rbf'))","f06c5c30":"model_building(SVC(kernel='linear'))","5834af4c":"model_building(CatBoostClassifier(eval_metric='AUC'))","447173b1":"model_building(XGBClassifier())","a563da5e":"model_building(SGDClassifier())","efdec901":"model_building(LGBMClassifier())","161af627":"Imputations or handling missing values isn't a headache in this dataset. So, we worry about...\n\na. whether balanced\/imbalanced problem?\n\nb. which features have high +\/- ve correlations? \n\nc. what manipulations will we do to the dataset?\n\nd. how is the distribution of each feature?\n\ne. how to build initial model?","6d4e7213":"# Exploratory Data Analysis (EDA)","53e978d2":"## Manipulation","bd333358":"1. customerID Customer ID\n2. gender Whether the customer is a male or a female\n3. SeniorCitizen Whether the customer is a senior citizen or not (1, 0)\n4. Partner Whether the customer has a partner or not (Yes, No)\n5. Dependents Whether the customer has dependents or not (Yes, No)\n6. tenure Number of months the customer has stayed with the company\n7. PhoneService Whether the customer has a phone service or not (Yes, No)\n8. MultipleLines Whether the customer has multiple lines or not (Yes, No, No phone service)\n9. InternetService Customer\u2019s internet service provider (DSL, Fiber optic, No)\n10. OnlineSecurity Whether the customer has online security or not (Yes, No, No internet service)\n11. OnlineBackup Whether the customer has online backup or not (Yes, No, No internet service)\n12. DeviceProtection Whether the customer has device protection or not (Yes, No, No internet service)\n13. TechSupport Whether the customer has tech support or not (Yes, No, No internet service)\n14. StreamingTV Whether the customer has streaming TV or not (Yes, No, No internet service)\n15. StreamingMovies Whether the customer has streaming movies or not (Yes, No, No internet service)\n16. Contract The contract term of the customer (Month-to-month, One year, Two year)\n17. PaperlessBilling Whether the customer has paperless billing or not (Yes, No)\n18. PaymentMethod The customer\u2019s payment method (Electronic check, Mailed check, Bank transfer (automatic), Credit card (automatic))\n19. MonthlyCharges The amount charged to the customer monthly\n20. TotalCharges The total amount charged to the customer\n21. Churn Whether the customer churned or not (Yes or No)","cd5f90da":"# Model Building","92c3c45b":"# Read me please","9236ba77":"## Dataset Description","17ef259f":"## Co-relation with Numerical features","769b0355":"From my experience in Telecom data so far, this dataset we are using here is not the typical telco data. So the model derived from it will not obviously be a Telco model... So I generalized this model as a typical Churn Model. \n\nIf you need to have some ideas on the data set of a Telco Churn model, here is a reference for you :)\n\n1. Customer Relatioship Data (CRM) data -- all customer GSMs, Type of subscription, birthday, gender, the location of living and more \n2. Location data -- the location of the transactions, giving the longitude and latitude, sub-area, area, city, and state, serving cell name etc.\n3. complaints data -- all complaints submitted and statistics inquiries related to coverage, problems in offers and packages, and any problem related to the telecom business\n4. Network logs data -- the internal sessions related to internet, calls, and SMS for each transaction in Telecom operator\n5. Call details records (CDR) data -- all charging information about calls, SMS, MMS, and internet transaction made by customers\n6. Handset information -- contains the brand, model, type of the mobile phone and if it\u2019s dual or mono SIM device\n\nHope, it helps you!\n\nhttps:\/\/journalofbigdata.springeropen.com\/articles\/10.1186\/s40537-019-0191-6","089af92f":"This kernel is from the help of below kernel which gives a good read on customer attrition\n\nhttps:\/\/www.kaggle.com\/pavanraj159\/telecom-customer-churn-prediction","e76465d9":"# Data Overview","5b21e739":"### Label encoding categorical features","51ebd611":"### Is it a Telco Churn prediction model?","a0253864":"## Co-relation with Categorical featues"}}