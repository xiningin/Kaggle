{"cell_type":{"f7857202":"code","d3dfd2c7":"code","78f04a59":"code","35fbe8bd":"code","73d2e387":"code","89f9e3dc":"code","0db14376":"code","54ffde23":"code","feed30b1":"code","b2b65b13":"code","a54da2a2":"code","514f9091":"code","1976e4cd":"code","33e3484d":"code","158c9a68":"code","03fc4902":"code","9302e0c5":"code","a2047ba2":"code","0fe35610":"code","0d952132":"code","2883ce7a":"code","b1aa07f6":"code","5e20acc4":"code","e299bce9":"code","4e04c912":"code","4fcc5ef6":"code","1905ef08":"code","75a3676d":"code","a4c0650f":"code","2816e6a9":"code","37a90f3a":"code","876add75":"code","d57d8738":"code","27e8a21d":"code","1bc2bc34":"code","9342b785":"code","98142749":"code","283bc568":"code","fb6e6764":"code","72d5ba39":"code","bfeb32aa":"code","3ccb2021":"markdown","33c552ff":"markdown","b16dd07e":"markdown","debcbb4c":"markdown","3303f5ed":"markdown","0220502f":"markdown","1ed8b172":"markdown","846b46cc":"markdown","f844685d":"markdown","365c25de":"markdown","6f3b4044":"markdown","c08f46f1":"markdown","f8ccc762":"markdown","3b21623e":"markdown","d4ea4fa2":"markdown","6d65188c":"markdown","96529f3b":"markdown","ae8176fd":"markdown","bb044909":"markdown","f8b4dbc4":"markdown","bec74da0":"markdown","ee8944de":"markdown","08ad4ad6":"markdown","5f220f9a":"markdown","f978d11e":"markdown","c7647d31":"markdown","da80e78d":"markdown","ae96f18e":"markdown","dfb02033":"markdown","4501ad00":"markdown","3158ec3a":"markdown","79a563de":"markdown","7e866d24":"markdown","9cbd55b9":"markdown","3d1312d6":"markdown","b3684a23":"markdown","25bc3f98":"markdown","3d970bdf":"markdown","ccdf46b4":"markdown","31eee64c":"markdown","310684a1":"markdown","0766b2a0":"markdown","b2df09cf":"markdown","bdcc3f91":"markdown","0c34c5e6":"markdown","d1768bf4":"markdown","b7991106":"markdown"},"source":{"f7857202":"import numpy as np\nimport pandas as pd\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","d3dfd2c7":"import matplotlib.pyplot as plt\nplt.style.use('dark_background')\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')","78f04a59":"import tensorflow as tf","35fbe8bd":"train_data = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')","73d2e387":"train_data.head()","89f9e3dc":"test_data.head()","0db14376":"target = train_data['label']\ntrain_data.drop(['label'], axis = 1, inplace = True)","54ffde23":"print(train_data.shape)\nprint(test_data.shape)","feed30b1":"target.head()","b2b65b13":"plt.figure(figsize = (15,6))\nfor i in range(5):\n    plt.subplot(1,5,i+1)\n    plt.imshow(np.array(train_data.iloc[i]).reshape(28,28), cmap = 'gray')\nplt.tight_layout()","a54da2a2":"plt.figure(figsize = (15,6))\nfor i in range(5):\n    plt.subplot(1,5,i+1)\n    plt.imshow(np.array(train_data.iloc[-i]).reshape(28,28), cmap = 'gray')\nplt.tight_layout()","514f9091":"train_data.info()","1976e4cd":"test_data.info()","33e3484d":"train_data = np.array(train_data).reshape(len(train_data),28,28,1)\ntrain_data = train_data\/255\ntest_data = np.array(test_data).reshape(len(test_data),28,28,1)\ntest_data = test_data\/255","158c9a68":"print(train_data.shape)\nprint(test_data.shape)","03fc4902":"model_1 = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(16, (3,3), input_shape = (28,28,1), activation = 'relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(256, activation = 'relu'),\n    tf.keras.layers.Dense(10, activation = 'softmax')\n])","9302e0c5":"model_1.compile(optimizer='sgd', loss='sparse_categorical_crossentropy', metrics=['accuracy'])","a2047ba2":"history_1 = model_1.fit(train_data, target, epochs=10, validation_split = 0.2)","0fe35610":"plt.plot(history_1.history['accuracy'])\nplt.plot(history_1.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'validation'], loc='best')\nplt.show()","0d952132":"model_2 = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(32, (3,3), input_shape = (28,28,1), activation = 'relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Conv2D(16, (3,3), activation = 'relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(256, activation = 'relu'),\n    tf.keras.layers.Dense(10, activation = 'softmax')\n])","2883ce7a":"model_2.compile(optimizer='sgd', loss='sparse_categorical_crossentropy', metrics=['accuracy'])","b1aa07f6":"history_2 = model_2.fit(train_data, target, epochs=10, validation_split = 0.2)","5e20acc4":"plt.plot(history_2.history['accuracy'])\nplt.plot(history_2.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'validation'], loc='best')\nplt.show()","e299bce9":"model_3 = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(32, (3,3), input_shape = (28,28,1), activation = 'relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Conv2D(16, (3,3), activation = 'relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(256, activation = 'relu'),\n    tf.keras.layers.Dense(10, activation = 'softmax')\n])","4e04c912":"model_3.compile(optimizer ='sgd', loss ='sparse_categorical_crossentropy', metrics =['accuracy'])","4fcc5ef6":"history_3 = model_3.fit(train_data, target, epochs = 10, validation_split = 0.2)","1905ef08":"plt.plot(history_3.history['accuracy'])\nplt.plot(history_3.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'validation'], loc='best')\nplt.show()","75a3676d":"model_4 = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(16, (3,3), input_shape = (28,28,1), activation = 'relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(256, activation = 'relu'),\n    tf.keras.layers.Dense(10, activation = 'softmax')\n])","a4c0650f":"model_4.compile(optimizer = 'rmsprop', loss = 'sparse_categorical_crossentropy', metrics = ['accuracy'])","2816e6a9":"history_4 = model_4.fit(train_data, target, epochs = 10, validation_split = 0.2)","37a90f3a":"plt.plot(history_4.history['accuracy'])\nplt.plot(history_4.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='best')\nplt.show()","876add75":"results = model_4.predict(test_data)","d57d8738":"results","27e8a21d":"results = np.argmax(results, axis = 1)","1bc2bc34":"results","9342b785":"submission = pd.read_csv('\/kaggle\/input\/digit-recognizer\/sample_submission.csv')","98142749":"submission.shape","283bc568":"submission.head()","fb6e6764":"submission['Label'] = results","72d5ba39":"submission.head()","bfeb32aa":"submission.to_csv('my_submission.csv', index = False)","3ccb2021":"Now, lets visualize last few targets with the help of their pixels after reshaping a row into *28X28*.","33c552ff":"Ok, so for now, we have a very decent dataset to work on. But, in order to apply CNN we have to make our data in to 4D as CNN takes only 4D as input.","b16dd07e":"This is the prefect shape for our convolution model.","debcbb4c":"And, again plotting.","3303f5ed":"Lets try with Dropout now.","0220502f":"## Prediction","1ed8b172":"We got the results as we wanted.","846b46cc":"I think the accuracies on both training and validation set are very nice and decent.\n> But I am not stopping here and going to try few more.","f844685d":"## Importing Important Libraries","365c25de":"Now, lets try to optimize the above model with 'rmsprop'.","6f3b4044":"Only the First column is label which is our target and all other columns are the pixels of *28X28* images.","c08f46f1":"This Notebook is basically for beginners who just want to get started with CNN.\n> If you find this Notebook Helpful then please upvote...","f8ccc762":"Optimizing with 'sgd'","3b21623e":"I am using model_4 as my predictor.","d4ea4fa2":"Predict function gives output as the probability of all 10 digits.","6d65188c":"Plotting also remains the same.","96529f3b":"## Kind of Preprocessing and Visualizing Images","ae8176fd":"Using Dropout, our results didn't changed much.","bb044909":"## Submission","f8b4dbc4":"Well, I don't think there will be any null values in the data but still, lets confirm it with their info().","bec74da0":"As obvious test data does not have labels and these are to be predicted.","ee8944de":"Well, using another Convolution layer improved our result a bit.","08ad4ad6":"## Wrap Up\n\nSo, as we have come to the end of this notebook, I want you to notice that I have just give you the glimse of what and how are things get done with CNN in a very simple lines of code. Although there are so many possibilities of making your model and try it out with different optimizers and loss. I have just applied very simple code above to make things clear on how to make a start.\n\nAlso note that I have trained my model only with 10 epochs. So, that can also be tune by you according to the loss and optimizer you use.\n\nThanks for making till the end...","5f220f9a":"Lets visualize first few targets with the help of their pixels after reshaping a row into *28X28*.","f978d11e":"In the next cell, I have removed the label column from training data and take it in a target variable.","c7647d31":"Here, I have tried different models with some changes.","da80e78d":"With all the things remain same.","ae96f18e":"Again, making a validation set of 20% from training set.","dfb02033":"Lets try looking at the training data.","4501ad00":"Before that, lets look at the growth of accuracy with epoch on a plot.","3158ec3a":"In the next cell, I am training the complete trainable data with 20% as validation data.","79a563de":"#### Upvote if u like","7e866d24":"So now, we have both training and testing dataset in same shape.","9cbd55b9":"Lets reshape our data with the simplest command possible.","3d1312d6":"Optimizing with 'sgd' again.","b3684a23":"##### What could be the reason for this curve according to you?","25bc3f98":"Reading data from the dataset.","3d970bdf":"Here is the change, note that I have changed the optimizer as 'rmsprop'.","ccdf46b4":"Now, lets see the shape of our data.","31eee64c":"Now from these probabilities, we will select the digit with highest probability store in the same variable.","310684a1":"Plotting the Graph again.","0766b2a0":"## CNN Models","b2df09cf":"Same code in the following cell as well.","bdcc3f91":"Wow, 'rmsprop' and the simplest model does the trick.","0c34c5e6":"Again fitting","d1768bf4":"Lets try the first model as the simplest one (I think so).","b7991106":"Now, lets add another Convolution layer in our model.\n> But this time with 32 filters."}}