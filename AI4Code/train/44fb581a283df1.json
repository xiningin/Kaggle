{"cell_type":{"db695442":"code","c2a0d749":"code","ddbd41bb":"code","92657c96":"code","2b368348":"code","24223c38":"code","778aa79a":"code","a28b6d2a":"code","7841a9f9":"code","bf3b270d":"code","7c2ba7cc":"code","11e90b75":"markdown","aa974449":"markdown","e6dd5b77":"markdown","7923bbb2":"markdown","0ca34833":"markdown","2e15f36b":"markdown","8da15b02":"markdown","0fd76936":"markdown","35cc9b33":"markdown","0fabe433":"markdown","43173b3a":"markdown"},"source":{"db695442":"%matplotlib inline\nimport matplotlib.pylab as plt\n\nimport pandas as pd\nimport numpy as np\nfrom scipy import sparse\n\nfrom copy import deepcopy\nfrom functools import partial, reduce\nfrom collections import namedtuple","c2a0d749":"plt.rcParams.update({\"font.size\": 13, \"figure.figsize\": (12, 4)})","ddbd41bb":"df = pd.read_csv(\"..\/input\/santa-workshop-tour-2019\/family_data.csv\", index_col=\"family_id\")\n\nchoices = df.loc[:, \"choice_0\":\"choice_9\"].values\nfam_sizes = df[\"n_people\"].values\nn_fams = fam_sizes.shape[0]\nn_days = 100","92657c96":"MIN_OCCUPANCY, MAX_OCCUPANCY = 125, 300\nOCCUPANCY_PENALTY = 1e4\n\nGIFT_CARD = [0, 50, 50, 100, 200, 200, 300, 300, 400, 500, 500]\nBUFFET_OFF = [0, 0, .25, .25, .25, .5, .5, 1., 1., 1., 1.]\nBUFFET = 36\nRIDE = 398\n\ngift_cost = lambda x: GIFT_CARD[x]\nbuffet_cost = lambda x: int(BUFFET_OFF[x] * BUFFET)\nride_cost = lambda x: int(max(0, .5 * (x % 11 - 8)) * RIDE)\n\ndef preference_cost(choice, n_people):\n    \"\"\" Function to compute preference cost provided by Santa \"\"\"\n    return gift_cost(choice) + \\\n        (buffet_cost(choice) + ride_cost(choice)) * n_people\n\ndef make_penalties_matrix(min_fam_size, max_fam_size, n_choices=11):\n    \"\"\" Create matrix of all possible penalties \"\"\"\n    return np.asarray([[preference_cost(i, n) for i in range(n_choices)]\n                        for n in range(min_fam_size, max_fam_size + 1)])\n\ndef make_choice_matrix(choices, n_days):\n    \"\"\" Create auxiliary matrix (n_families, n_days+1)\n        with choice numbers as values \"\"\"\n    n_families = choices.shape[0]\n    choice_matrix = sparse.lil_matrix((n_families, n_days+1), dtype=np.int8)\n    for i, row in enumerate(choices):\n        for j in range(len(row)):\n            choice_matrix[i, row[j]] = j + 1\n    return choice_matrix\n\ndef costs_and_occupancy(submissions, fam_sizes, n_days, choice_matrix,\n        penalties_matrix, min_fam_size):\n    \"\"\" Compute array of actual penalties \"\"\"\n    l = submissions.shape[0]\n    costs = np.zeros(shape=(l,), dtype=np.float64)\n    occupancy = np.zeros(shape=(n_days+1, ), dtype=np.float64)\n    for i in range(l):\n        day = submissions[i]\n        choice = choice_matrix[i, day] - 1\n        fam_size = fam_sizes[i]\n\n        costs[i] = penalties_matrix[fam_size - min_fam_size, choice]\n        occupancy[day] += fam_size\n    return costs, occupancy\n\ndef accounting_penalty(n_cur, n_prev):\n    \"\"\" Function to calculate one day accounting penalty \"\"\"\n    pow = .5 + np.abs(n_cur - n_prev) \/ 50.\n    pow = np.power(n_cur, pow)\n    res = (n_cur - 125) \/ 400\n    return res * pow\n\n\nclass SantasAccountant(object):\n\n    \"\"\" Accountant, who fairly calculates preference costs for each family\n        and provides up-to-date each day accountant penalties \"\"\"\n\n    def __init__(self, choices, fam_sizes, days=None, n_days=100, n_fams=None,\n            min_occupancy=MIN_OCCUPANCY, max_occupancy=MAX_OCCUPANCY,\n            feasible=False):\n\n        # Trigger\n        self.feasible = feasible\n\n        # Static\n        self.choices, self.fam_sizes = choices, fam_sizes\n        self.n_choices, self.n_days = self.choices.shape[1], n_days\n        self.n_fams = n_fams or len(fam_sizes)\n        self.min_occupancy, self.max_occupancy = min_occupancy, max_occupancy\n        self.min_fam_size, self.max_fam_size = tuple(map(int,\n            (self.fam_sizes.min(), self.fam_sizes.max())))\n\n        # Solution array\n        self.days = self.init_days() if isinstance(days, type(None)) else days\n        self.make_choice_nums()\n\n        # Costs calculation\n        self.choice_matrix = make_choice_matrix(choices, n_days)\n        self.penalties_matrix = make_penalties_matrix(\n            self.min_fam_size, self.max_fam_size)\n        self.costs_and_occupancy = partial(\n            costs_and_occupancy,\n            n_days=self.n_days,\n            choice_matrix=self.choice_matrix,\n            penalties_matrix=self.penalties_matrix,\n            min_fam_size=self.min_fam_size)\n        self.reset_occupancy()\n\n    def init_days(self):\n        \"\"\" Random days initialization \"\"\"\n        return np.random.randint(1, self.n_days+1, size=(self.n_fams, ))\n\n    def get_choice_num(self, fam_id):\n        \"\"\" Get choice number for one family \"\"\"\n        choice_num = np.argwhere(self.choices[fam_id]==self.days[fam_id])\n        if len(choice_num):\n            return choice_num.flatten()[0]\n        return 10\n\n    def get_worst_choice_num(self):\n        \"\"\" Get current worst choice number  \"\"\"\n        return int(np.max(self.choice_nums))\n\n    def get_day_priciest_fams(self, day, choice_num=None):\n        \"\"\" Get list of priciest families in selected day \"\"\"\n        mask = np.argwhere(self.days == day).flatten()\n        day_choice_nums = self.choice_nums[mask]\n        choice_num = choice_num or np.max(day_choice_nums)\n        return np.argwhere(day_choice_nums == choice_num).flatten()\n\n    def make_choice_nums(self):\n        \"\"\" Make array of choice numbers for each family \"\"\"\n        self.choice_nums = -np.ones(shape=(self.n_fams, ))\n        for fam_id in range(self.n_fams):\n            self.choice_nums[fam_id] = self.get_choice_num(fam_id)\n\n    def reset_occupancy(self):\n        \"\"\" Calculate preference cost, occupancy and accounting\n            penalties based on self.days \"\"\"\n        self.preference_costs, self.occupancy = \\\n            self.costs_and_occupancy(self.days, self.fam_sizes)\n        self.make_acc_penalties()\n        self.calculate_cost()\n\n    def make_acc_penalties(self):\n        \"\"\" Calculate accounting penalties for all days \"\"\"\n        self.acc_penalties = \\\n            np.zeros(shape=(self.n_days+1,), dtype=np.float64)\n\n        for i in range(1, self.n_days):\n            self.acc_penalties[i] = self.day_acc_penalty(i)\n\n    def day_acc_penalty(self, day):\n        \"\"\" Calculate accounting penalties for one day \"\"\"\n        # Following line requires 2 excessive zero columns in acc_penalty\n        # matrix, but makes life easier\n        if day in (0, 100): return 0\n\n        occ = self.occupancy[day]\n\n        if occ > self.max_occupancy:\n            # I believe that helps to maintain occupancy constraint\n            return (occ - self.max_occupancy) * OCCUPANCY_PENALTY \\\n                if not self.feasible else 9e9\n        elif occ < self.min_occupancy:\n            return (self.min_occupancy - occ) * OCCUPANCY_PENALTY \\\n                if not self.feasible else 9e9\n\n        return accounting_penalty(occ, self.occupancy[day+1])\n\n    def update_acc_penalty(self, day):\n        \"\"\" Update account penalties for selected day \"\"\"\n        imp = 0\n        for d in range(day-1, day+1):\n            acc_penalty = self.day_acc_penalty(d)\n            imp += acc_penalty - self.acc_penalties[d]\n            self.acc_penalties[d] = acc_penalty\n        return imp\n\n    def get_preference_cost(self, fam_id, day):\n        \"\"\" Get preference cost for family in selected day \"\"\"\n        choice = self.choice_matrix[fam_id, day] - 1\n        fam_size = self.fam_sizes[fam_id] -  self.min_fam_size\n        return self.penalties_matrix[fam_size, choice]\n\n    def calculate_cost(self):\n        \"\"\" Calculate cost from prepared arrays \"\"\"\n        self.cost = np.sum(self.preference_costs) + np.sum(self.acc_penalties)\n\n    def update_cost(self, imp):\n        \"\"\" Update cost with imp \"\"\"\n        self.cost += imp\n\n\nclass Sleigh (SantasAccountant):\n\n    \"\"\" Sleight can move family from one day to another day throught schedules\n        and forecast any move's cost improvement \"\"\"\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    Move = namedtuple(\"Move\", (\"fam_id\", \"fam_size\", \"dec_day\", \"inc_day\"))\n\n    def copy(self):\n        \"\"\" Copy sleigh as a separate instance \"\"\"\n        return deepcopy(self)\n\n    def select_fams(self, constraints, sample=True):\n        \"\"\" Select families \"\"\"\n        ix = reduce(lambda x, y: x & y, constraints)\n        candidate_fams = np.argwhere(ix).flatten()\n        if sample and len(candidate_fams) > self.fam_batch_size:\n            candidate_fams = np.random.choice(candidate_fams,\n                size=self.fam_batch_size, replace=False)\n        return candidate_fams\n\n    def get_acc_penalty(self, day):\n        \"\"\" Get acc penalty between day - 1 and day + 1 \"\"\"\n        acc_penalty = [self.acc_penalties[day + i - 1] for i in range(2)]\n        return acc_penalty\n\n    def try_acc_penalty(self, inc_day, fam_size, dec_day=None):\n        \"\"\" Calculate acc penalty between day - 1 and day + 1 if\n            day occupancy is increased by fam_size \"\"\"\n        day_occs = list()\n        for i in range(3):\n            d = inc_day + i - 1\n            if d in (0, 101): continue\n\n            day_occs.append(self.occupancy[d])\n            if i == 1:\n                day_occs[-1] += fam_size\n\n        dec_day = dec_day or 0\n        if isinstance(dec_day, type(None)):\n            pass\n        elif dec_day == inc_day - 1 or dec_day == inc_day + 1:\n            add_if_not_day_1 = 1 * (min(dec_day, inc_day) > 1)\n            dec_day_id = dec_day - inc_day + add_if_not_day_1\n            day_occs[dec_day_id] -= fam_size\n\n        acc_penalty = [accounting_penalty(i, j)\n            for i, j in zip(day_occs[:-1], day_occs[1:])]\n        return acc_penalty\n\n    def acc_penalty_imp(self, fam_size, dec_day, inc_day):\n        \"\"\" Calculate change in accounting penalty\n            if family moved from dec_day to inc_day \"\"\"\n        # Sort days\n        day_0, day_1 = sorted([dec_day, inc_day])\n        decrease_0 = np.power(-1, int(day_0==dec_day))\n\n        penalties_0 = self.get_acc_penalty(day_0)\n        penalties_1 = self.try_acc_penalty(day_0, decrease_0*fam_size, day_1)\n\n        if day_1 == day_0 + 1:\n            penalties_0.pop()\n            penalties_1.pop()\n\n        penalties_0 += self.get_acc_penalty(day_1)\n        penalties_1 += self.try_acc_penalty(day_1,-decrease_0*fam_size, day_0)\n\n        imp = sum(penalties_1) - sum(penalties_0)\n        return imp\n\n    def pref_cost_imp(self, fam_id, dec_day, inc_day):\n        \"\"\" Calculate change in accounting penalty\n            if family moved from dec_day to inc_day \"\"\"\n        pref_cost_1 = self.get_preference_cost(fam_id, inc_day)\n        pref_cost_0 = self.preference_costs[fam_id]\n        imp = pref_cost_1 - pref_cost_0\n        return imp\n\n    def improvement(self, mv):\n        \"\"\" Get improvement if move mv is made \"\"\"\n        if mv.dec_day == mv.inc_day: return 6e6\n        return self.acc_penalty_imp(mv.fam_size, mv.dec_day, mv.inc_day) + \\\n            self.pref_cost_imp(mv.fam_id, mv.dec_day, mv.inc_day)\n\n    def move(self, mv):\n        \"\"\" Make move mv \"\"\"\n        if mv.dec_day == mv.inc_day:\n            return\n        self.days[mv.fam_id] = mv.inc_day\n        self.choice_nums[mv.fam_id] = self.get_choice_num(mv.fam_id)\n\n        # Update reference cost\n        imp = self.pref_cost_imp(mv.fam_id, mv.dec_day, mv.inc_day)\n        self.preference_costs[mv.fam_id] += imp\n\n        # Update occupations\n        self.occupancy[mv.dec_day] -= mv.fam_size\n        self.occupancy[mv.inc_day] += mv.fam_size\n\n        # Update acc_penalties and cost\n        imp += self.update_acc_penalty(mv.inc_day)\n        imp += self.update_acc_penalty(mv.dec_day)\n        self.update_cost(imp)\n","2b368348":"def proba(imp, fun):\n    \"\"\" Probability of not being greedy \"\"\"\n    return np.exp(imp \/ fun)\n\ndef get_fun(x, max_fun, fun_mult, n_reset=None):\n    \"\"\" At every step fun decreases with fun_mult rate,\n        starting with max_fun \"\"\"\n    return max_fun * np.power(fun_mult, x % n_reset if n_reset else x)\n    \ndef generate_and_plot_fun(max_imp, max_fun, fun_mult, n, n_reset):\n    \"\"\" Generate and plot fun \"\"\"\n    x = np.linspace(0, n)\n    fig, axs = plt.subplots(ncols=2, sharey=True)\n    \n    fun = get_fun(x, max_fun, fun_mult)\n    xx, yy = np.meshgrid(fun, np.arange(0, max_imp))\n    z = proba(-yy.ravel(), xx.ravel()).reshape(xx.shape)\n    axs[0].contourf(xx, yy, z, 50, alpha=.8, cmap=\"RdYlGn\")\n    axs[0].set_ylabel(\"Bad improvement\")\n    axs[0].set_xlabel(\"Fun\")\n    axs[0].grid(axis=\"y\")\n    \n    fun = get_fun(x, max_fun, fun_mult, n_reset)\n    ff, yy = np.meshgrid(fun, np.arange(0, max_imp))\n    xx, _  = np.meshgrid(x, np.arange(0, max_imp))\n    z = proba(-yy.ravel(), ff.ravel()).reshape(xx.shape)\n    cntf = axs[1].contourf(xx, yy, z, 50, alpha=.8, cmap=\"RdYlGn\")\n    plt.colorbar(cntf, ax=axs[1])\n    axs[1].grid(axis=\"y\")\n    axs[1].set_xlabel(\"Step\")\n    \n    plt.suptitle(\"Probability of maybe\")\n    plt.show()","24223c38":"feed_dict = dict(\n    max_imp  = int(4e2),\n    max_fun  = 100,\n    fun_mult = .98,\n    n_reset  = 300,\n    n        = 1000,\n)\ngenerate_and_plot_fun(**feed_dict)","778aa79a":"def maybe(p):\n    \"\"\" True with probability p \"\"\"\n    return np.random.rand() < p\n\n\nclass Reindeer (Sleigh):\n\n    \"\"\" Reindeer drives search. It finds moves and rides with Sleight \"\"\"\n\n    def __init__(self, min_fun, max_fun, fun_mult, patience=30,\n            days_batch_size=None, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n        # Parameters, that control Reindeer fun. It works the same\n        # as temperature annealing.\n        self.min_fun, self.max_fun = min_fun, max_fun\n        self.fun_mult = fun_mult\n        self.fun = self.max_fun\n\n        self.check_imp = False\n        self.patience = patience # set best_days as days after that\n                                 # number of fun resets without improvement\n        self.got_best = False\n        self.no_best_resets = 0\n\n        # Number of days, sampled for candidates\n        self.days_batch_size = days_batch_size or 6\n\n        self.step = 0\n\n        self.reset_reindeer()\n        self.best_cost = 9e9\n        self.best_days = self.days.copy()\n\n    def is_feasible(self, days=None):\n        \"\"\" Check if solution satisfies occupancy constraint \"\"\"\n        if not isinstance(days, type(None)):\n            _, occupancy = self.costs_and_occupancy(days, self.fam_sizes)\n        else:\n            occupancy = self.occupancy\n        return np.all([\n            np.all(occupancy[1:] <= self.max_occupancy),\n            np.all(occupancy[1:] >= self.min_occupancy),])\n\n    def reset_reindeer(self):\n        \"\"\" Reset costs list (e.g. to remove early enormous costs) \"\"\"\n        self.costs = list()\n\n    def maybe(self, imp):\n        \"\"\" Probability, based on fun.\n            Bad improvement values are positive. We need maybe\n            parameter between 0 and 1, thus -imp \"\"\"\n        return maybe(np.exp(-imp \/ self.fun))\n\n    def update_fun(self, reset=False):\n        \"\"\" Update fun \"\"\"\n        if reset or self.fun < self.min_fun:\n            self.fun = self.max_fun\n            if not self.got_best:\n                self.no_best_resets += 1\n            else:\n                self.no_best_resets = 0\n                self.got_best = False\n            if self.no_best_resets > self.patience and self.best_cost < 6e5:\n                self.days = self.best_days.copy()\n                self.reset_occupancy()\n        else:\n            self.fun *= self.fun_mult\n\n    def imps_and_moves(self, candidate_fams, candidate_days=None):\n        \"\"\" Collect imps and moves for selected\n            candidate families between candidate days \"\"\"\n        imps_cnt, imps, candidate_moves = 0, list(), list()\n        for i, fam_id in enumerate(candidate_fams):\n            fam_choices = self.choices[fam_id]\n            feed_dict = dict(\n                fam_id=fam_id,\n                fam_size=self.fam_sizes[fam_id],\n                dec_day=self.days[fam_id]\n            )\n            if isinstance(candidate_days, type(None)):\n                candidate_days = fam_choices\n            for day in candidate_days:\n                feed_dict[\"inc_day\"] = day\n                mv = self.Move(**feed_dict)\n                imp = self.improvement(mv)\n                imps_cnt -=- 1\n                imps.append(imp)\n                candidate_moves.append(mv)\n                if imps_cnt > self.max_imps:\n                    break\n            if imps_cnt > self.max_imps:\n                break\n        return imps, candidate_moves\n\n    def select(self, imps, random=False):\n        \"\"\" Select moves by imps \"\"\"\n        if random:\n            ix = np.random.randint(len(imps))\n            imp = imps[ix]\n            if imp < 0 or self.maybe(imp):\n                return ix\n        ix = np.argmin(imps)\n        return ix\n\n    def select_fam(self, candidate_fams, candidate_days=None):\n        \"\"\" Select family to move \"\"\"\n        imps, candidate_moves = \\\n            self.imps_and_moves(candidate_fams, candidate_days)\n        ix = self.select(imps)\n        mv = candidate_moves[ix]\n        return mv\n\n    def select_from_candidate_days(self, day, candidate_days, increase):\n        \"\"\" Select family with provided assigned day\n            and candidate days \"\"\"\n        if increase:\n            constraints = (\n                np.isin(self.days, candidate_days),\n                np.any(self.choices == day, axis=1),\n            )\n        else:\n            constraints = (\n                self.days == day,\n                np.any(np.isin(self.choices, candidate_days), axis=1),\n            )\n        candidate_fams = self.select_fams(constraints)\n        if not len(candidate_fams):\n            return None\n\n        if increase:\n            mv = self.select_fam(candidate_fams, [day, ])\n        else:\n            mv = self.select_fam(candidate_fams, candidate_days)\n        return mv\n\n    def select_inc_day(self, day):\n        \"\"\" Select family at assigned `day`,\n            that will be moved to other day \"\"\"\n        constraints = [self.days == day, ]\n        candidate_fams = self.select_fams(constraints)\n        mv = self.select_fam(candidate_fams)\n        return mv\n\n    def select_dec_day(self, day):\n        \"\"\" Select family, that can be moved to `day` \"\"\"\n        constraints = [np.any(self.choices == day, axis=1), ]\n        candidate_fams = self.select_fams(constraints)\n        mv = self.select_fam(candidate_fams, [day,])\n        return mv\n\n    def find_moves(self):\n        \"\"\" Find next moves and output it in same format as\n            self.ride input parameters \"\"\"\n        pass\n\n    def ride(self, moves):\n        \"\"\" Move family to selected day, check if it improves cost function\n            and save if best \"\"\"\n        for mv in moves:\n            if self.check_imp:\n                imp = self.improvement(mv)\n                if imp >= 0 and not self.maybe(imp): return\n\n            self.move(mv)\n            if self.is_feasible() and self.cost < self.best_cost:\n                self.got_best = True\n                self.best_cost = self.cost\n                self.best_days = self.days.copy()\n        self.costs.append(self.cost)\n\n    def search(self, n_iter=100):\n        \"\"\" Random (with little priorities) local search \"\"\"\n        for _ in range(n_iter):\n            self.step += 1\n            self.update_fun()\n            moves = self.find_moves()\n            if not moves: continue\n            self.ride(moves)","a28b6d2a":"class RandomInfeasibleReindeer(Reindeer):\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n        self.feasible = False\n        self.check_imp = True\n\n    def select_dec_day(self, thresh_occ=None):\n        \"\"\" Select any day with occupancy above threshold \"\"\"\n        thresh_occ = thresh_occ or self.min_occupancy\n\n        possible_days = np.argwhere(np.where(self.occupancy > thresh_occ,\n                                     self.acc_penalties, 0)).flatten()\n        if len(possible_days) == 0: return 0\n\n        dec_day = np.random.choice(possible_days)\n        return dec_day\n\n    def select_fam(self, dec_day):\n        \"\"\" Select random family among families with assigned day \"\"\"\n        fam_id = np.random.choice(np.argwhere(self.days == dec_day).flatten())\n        return fam_id, self.fam_sizes[fam_id]\n\n    def select_inc_day(self, fam_id, fam_size, dec_day):\n        \"\"\" Find the day that minimizes cost function\n            for the selected family \"\"\"\n        # Filter days with low occupancy in separate list\n        feed_dict = dict(\n            fam_id=fam_id,\n            fam_size=fam_size,\n            dec_day=dec_day,\n        )\n        little_occ_days, big_occ_days = list(), list()\n\n        imps = np.zeros(shape=(self.n_choices, ))\n        for c, inc_day in enumerate(self.choices[fam_id]):\n            feed_dict[\"inc_day\"] = inc_day\n            imps[c] = self.improvement(self.Move(**feed_dict))\n            if self.occupancy[inc_day] < self.min_occupancy:\n                little_occ_days.append(c)\n            else:\n                big_occ_days.append(c)\n\n        # Select day among days with low occupancy first\n        got_solution = False\n        if len(little_occ_days):\n            ix_min_little = np.argmin(imps[little_occ_days])\n            if not imps[ix_min_little] == 6e6:\n                got_solution = True\n                ix_min = little_occ_days[ix_min_little]\n\n        # Select day among others if choice from previous block is bad\n        if (not got_solution or imps[ix_min_little] > 0) and len(big_occ_days):\n            ix_min_big = np.argmin(imps[big_occ_days])\n            ix_min_big = big_occ_days[ix_min_big]\n            if imps[ix_min_big] == 6e6:\n                return None\n            if not got_solution or ix_min_big < ix_min:\n                ix_min = ix_min_big\n            got_solution = True\n\n        if not got_solution:\n            return None\n\n        return self.choices[fam_id, ix_min]\n\n    def find_moves(self):\n        \"\"\" Find next family to move and its destination day \"\"\"\n        dec_day = self.select_dec_day(self.max_occupancy)\n        if dec_day == 0:\n            dec_day = self.select_dec_day(self.min_occupancy)\n        fam_id, fam_size = self.select_fam(dec_day)\n        inc_day = self.select_inc_day(fam_id, fam_size, dec_day)\n        if inc_day:\n            mv = self.Move(fam_id, fam_size, dec_day, inc_day)\n            return mv,\n        else:\n            return None","7841a9f9":"%%time\nparams = dict(\n    choices   = choices,\n    fam_sizes = fam_sizes,\n    \n    min_fun   = 2e4,\n    max_fun   = 5e5,\n    fun_mult  = .98,\n    patience  = 30,\n)\n\n# Run Prancer 3 times and get any feasible solution\n# lower than $600k, if all costs are higher, the take the last solution\nfor i in range(3):\n    Prancer = RandomInfeasibleReindeer(**params)\n    Prancer.search(n_iter=int(1e5))\n    if Prancer.best_cost < 6e5:\n        best_prancer_place = Prancer.best_days\n        break\n\nif Prancer.best_cost >= 6e5:\n    best_prancer_place = Prancer.best_days\n    \nassert Prancer.is_feasible(best_prancer_place), \"Not feasible solution\"\nprint(f\"Cost at solution, found by Prancer: {Prancer.best_cost:.0f}\")\n\nplt.plot(range(len(Prancer.costs)), Prancer.costs)\nplt.show()","bf3b270d":"def feasible_tunnel(reindeer, mv):\n    \"\"\" Move family from dec_day to inc_day. If not feasible,\n        continue moving until solution gets feasible \"\"\"\n    low_occ, high_occ = list(), list()\n\n    cost = reindeer.cost\n    moves = list()\n    while True:\n        reindeer.move(mv)\n        moves.append(mv)\n\n        if reindeer.occupancy[mv.dec_day] < reindeer.min_occupancy:\n            low_occ.append(mv.dec_day)\n        if reindeer.occupancy[mv.inc_day] > reindeer.max_occupancy:\n            high_occ.append(mv.inc_day)\n\n        mv =  None\n        low_cnt, high_cnt = len(low_occ), len(high_occ)\n        if low_cnt > high_cnt:\n            day = np.random.choice(low_occ)\n            increase = True\n            if len(high_occ):\n                mv = reindeer.select_from_candidate_days(\n                    day, high_occ, increase=increase)\n        elif high_occ and low_cnt <= high_cnt:\n            day = np.random.choice(high_occ)\n            increase = False\n            if len(low_occ):\n                mv = reindeer.select_from_candidate_days(\n                    day, low_occ, increase=increase)\n        elif not low_cnt and not high_cnt:\n            # feasible output\n            imp = reindeer.cost - cost\n            return imp, moves\n        else:\n            print(\"WRONG logic in feasible_tunnel\")\n\n        if isinstance(mv, type(None)):\n            mv = reindeer.select_dec_day(day) if increase \\\n                else reindeer.select_inc_day(day)\n\n        if mv.dec_day in high_occ:\n            high_occ.remove(mv.dec_day)\n        if mv.inc_day in low_occ:\n            low_occ.remove(mv.inc_day)\n\n\nclass FeasibleReindeer (Reindeer):\n\n    def __init__(self, fam_batch_size, max_imps, drop_prob, *args, **kwargs):\n        super().__init__(feasible=True, *args, **kwargs)\n\n        self.fam_batch_size = fam_batch_size\n        self.max_imps = max_imps\n        self.drop_prob = drop_prob\n\n    def families_batch(self):\n        \"\"\" Select batch of families \"\"\"\n        return np.random.choice(self.n_fams,\n            size=self.fam_batch_size, replace=False)\n\n    def worst_days_list(self):\n        \"\"\" Select list of days \"\"\"\n        acc_penalties = \\\n            np.where(np.random.rand(self.n_days+1) < self.drop_prob,\n                     self.acc_penalties, 0)\n\n        return np.argsort(-acc_penalties)[:self.days_batch_size]\n\n    def find_moves(self):\n        \"\"\" Find moves only in feasible space\n            1. Get random batch of families\n            2. Find their best moves, that doesn't break feasibility\n            3. Output the best one \"\"\"\n        cost = self.cost\n        candidate_fams = self.families_batch()\n\n        imps, batch_moves = list(), list()\n        for fam_id in candidate_fams:\n            feed_dict = dict(\n                fam_id=fam_id,\n                fam_size=self.fam_sizes[fam_id],\n                dec_day=self.days[fam_id],\n            )\n            fam_imps = np.zeros(shape=(self.n_choices, ))\n            fam_moves = list()\n            for i, inc_day in enumerate(self.choices[fam_id]):\n                feed_dict[\"inc_day\"] = inc_day\n                reindeer = self.copy() # sorry for that\n                imp, moves = feasible_tunnel(reindeer, self.Move(**feed_dict))\n                fam_imps[i] = imp\n                fam_moves.append(moves)\n            ix = self.select(fam_imps)\n            imps.append(fam_imps[ix])\n            batch_moves.append(fam_moves[ix])\n\n        ix = self.select(imps)\n        return batch_moves[ix]","7c2ba7cc":"%%time\ndonner_params = dict(\n        choices=choices,\n        fam_sizes=fam_sizes,\n        days = best_prancer_place,\n\n        min_fun=.005,\n        max_fun=1,\n        fun_mult=.98,\n\n        drop_prob=.5,\n        fam_batch_size=5,\n        days_batch_size=3,\n        max_imps = 10,\n        patience = 30,\n    )\nDonner = FeasibleReindeer(**donner_params)\nprint(f\"Initial Donner cost: {Donner.cost:.0f}\")\n\n# That's truly slow\nDonner.search(20)\nprint(f\"Current best cost: {Donner.best_cost:.0f}\")\nassert Donner.is_feasible(), \"Not feasible\"\n\nplt.plot(range(len(Donner.costs)), Donner.costs)\nplt.show()","11e90b75":"# Solution space\n\nFirst, let me describe you, how Reindeers see the solutions space. They see the solution space as a valley with the best precious solution hidden deep down between the hills (or even inside a cave). We enter the valley from any side in the hills and then we descend.\n\nWe're looking only for feasible solutions and those are connected with feasible tunnels. Each tunnel leads from one feasible place to another. Most of them are dark caves, thus it's hard to see where they lead. \n\nAll Reindeers can see if the place is inside any feasible tunnel, but few can see where those tunnels lead. For example, Prancer the Reindeer can only examine feasibility on the spot.\n\n<img src=\"https:\/\/i.ibb.co\/Lg68w77\/2019-12-11-00-05-11.jpg\" alt=\"drawing\" width=\"600\"\/>","aa974449":"Once we have any feasible place, it is given to FeasibleReindeer as a feasible starting point. The problem with FeasibleReindeers is that they can only explore feasible places, but it's not always obvious, how to reach the next feasible place. Most of the caves are shattered and it's hard to see where they lead.\n\nAs I wrote earlier, Sleigh is good at predicting moves, but right now the feasible slide module is broken. Good news is that Santa's Helpers are already fixing that.\n\nFortunately, we've found Donner the Reindeer, who can explore feasible places on it's own. However, it consumes a lot of energy, thus it's slow. At every feasible location it creates multiple copies of itself and observes, which feasible places copies find. Then, it greedily selects the best move or sometimes for Fun. Maximum number of such copies can be set with `fam_batch_size` and `days_batch_size` hyperparameters.\n\nFeasibleReindeer description is in the following block.","e6dd5b77":"# Fun annealing \n\nIt was noticed, that every Reindeer needs to have fun sometimes, otherwise they get bored fast. I understand that. Everybody needs to have a rest, but the job should be done.\n\nI've found out, that it's possible to control Reindeer's Fun level. I've studied physics and the mechanism of Reindeer Fun reminds me of temperature annealing. You can have a closer look at it in the following block. ","7923bbb2":"---","0ca34833":"I've let Donner to jump all over the valley during my workday, and Donner has found the cost of about $130k. It could go deeper, but gosh it's slow. I don't want to exploit it like that, I'd better wait for the fixed Sleigh's feasible slide module.","2e15f36b":"# Reindeers\n\nAll Reindeers have lots in common. Their usual behavior is described in Reindeer class.","8da15b02":"Sometimes Reindeers get stuck in a hole. In case they don't feel Fun, they dig deeper without realizing they're stuck. On the contrary, when they feel Fun, they may follow any random squirrel and get unstack easily (but often I want them to go deeper).","0fd76936":"Since Donner is truly heavy, I want it to find places not worse than the current one. That's why I don't let it having Fun during the search and set max Fun level to 1.","35cc9b33":"I've observed Prancer the Reindeer's search and realized, that it's a RandomInfeasibleReindeer. Mostly, it goes where it pleases and it doesn't really care about feasibility. It can only distinguish between feasible and infeasible places. Once it loses feasibility, it rides in any abyss of infeasible solutions and explores thousands of irrelevant places.\n\nRandomInfeasibleReindeer's code is below.","0fabe433":"Luckily, there are FeasibleReindeers, who can ride only through feasible tunnels, and explore only feasible places. \n\nHere's the plan: \n 1. I let random Prancer jump for a while and find decent place (I think $600k is good enough for feasible starting point).\n 2. Ask Donner to continue search from that place.\n\nIn the beginning we can appear anywhere in the valley. We don't know where feasible tunnels are, so I'll let Prancer to have lots of Fun and let it jump everywhere it wishes.\n\n100k steps with 3 restarts and Fun level between 20k-500k will likely find any decent feasible place.","43173b3a":"[Part I](https:\/\/www.kaggle.com\/kopytok\/santa-2019-the-local-search-journey)\n\n---\n\nI've searched with Local Search team for a while and noticed several findings in Reindeers behaviour I want to tell you about.\n\nYou've already met SantasAccountant and Sleigh in the following code block."}}