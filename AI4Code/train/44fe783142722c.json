{"cell_type":{"a6eabb23":"code","730110e6":"code","d3b5082b":"code","2924d3be":"code","dba589c0":"code","ac259d80":"code","9673f5b3":"code","2a54dc1f":"code","aafcb91e":"code","79e382ae":"code","c227c880":"code","dcd27d75":"code","ef704289":"code","941cc86e":"code","2d9b13d7":"code","4c7c52b1":"code","7b327a64":"code","8969df06":"code","cba1302b":"code","93a983ba":"code","7a6c37fe":"code","25678065":"code","b504e151":"code","667c0999":"code","fde9b124":"code","c0be3305":"code","341c1aec":"code","68237cdb":"code","395a79f1":"code","7e486f39":"code","ce4e665a":"code","74fecaa3":"code","bb7bce1c":"code","40f40533":"code","107d0f83":"code","6247e954":"code","d2bfec4f":"code","07fac78e":"code","859fcd02":"code","902f8f71":"code","f7094411":"code","89f3766d":"code","872ad096":"code","aee9584c":"code","55dc6a7f":"code","c740541d":"code","176ea91a":"code","8128e672":"code","b266be78":"code","572ade0e":"code","d54fc1ae":"code","c478ef77":"code","8160a975":"code","68e8d02e":"code","1334323d":"code","063e4486":"code","06f50e47":"code","dc7f2a79":"code","f89b1b1a":"code","1d140739":"code","b8436b8c":"code","cb024810":"code","97fe064f":"code","7dc97b41":"code","ac9430da":"code","4438aaca":"markdown","3424c03a":"markdown","a3764a88":"markdown","a253124f":"markdown","8de2ccdc":"markdown","c6975dc3":"markdown","9db9942c":"markdown","bf92cc8e":"markdown","db706099":"markdown","5eea19ad":"markdown","0268900e":"markdown","68dda62b":"markdown","bf03ea5d":"markdown","1f06fa89":"markdown","98a68dba":"markdown","d008d5a5":"markdown","82ba91e6":"markdown","9403d458":"markdown","c2a634c3":"markdown","75416772":"markdown","b0cc51a0":"markdown","72cfe90c":"markdown","dad4c212":"markdown","c8cb085f":"markdown","4899227e":"markdown","5fbe571c":"markdown","fe254326":"markdown","e535c3fe":"markdown","a40f890f":"markdown","eb2b5e0d":"markdown"},"source":{"a6eabb23":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","730110e6":"import pandas as pd\nimport numpy as np\nimport seaborn as sb","d3b5082b":"df = pd.read_csv(\"..\/input\/iris\/Iris.csv\")","2924d3be":"df.head()","dba589c0":"df.shape","ac259d80":"df.columns","9673f5b3":"df.describe()","2a54dc1f":"df.isnull().sum()","aafcb91e":"sb.scatterplot(data = df, x = \"SepalLengthCm\", y = \"SepalWidthCm\", hue = \"Species\", style = \"Species\")","79e382ae":"sb.jointplot(data = df, x = \"SepalLengthCm\", y = \"SepalWidthCm\", hue = \"Species\")","c227c880":"sb.histplot(data = df, x = \"SepalLengthCm\", kde = True)","dcd27d75":"sb.histplot(data = df, x = \"SepalWidthCm\", kde = True)","ef704289":"sb.kdeplot(data = df, x = \"SepalLengthCm\", y = \"SepalWidthCm\", fill = True)","941cc86e":"sb.boxplot(x = \"Species\", y = \"PetalLengthCm\", data = df)","2d9b13d7":"sb.boxplot(x = \"Species\", y = \"PetalWidthCm\", data = df)","4c7c52b1":"import matplotlib.pyplot as plt","7b327a64":"fig_dims = (15,10)\nfig, ax = plt.subplots(figsize = fig_dims)\nsb.scatterplot(data = df, x = \"PetalLengthCm\", y = \"PetalWidthCm\", hue = \"Species\", ax=ax)","8969df06":"sb.displot(x = \"PetalLengthCm\", data = df, kde = True)","cba1302b":"sb.displot(x = \"PetalWidthCm\", data = df, kde = True)","93a983ba":"plt.figure(figsize = (15,10)) #Specifying the size of the plot\n\n#Specifying the number of rows and columns in the data\nplt.subplot(2,2,1) #'1' specifies the index of the violin plot\nsb.violinplot(x = \"Species\", y = \"PetalLengthCm\", data = df)\nplt.subplot(2,2,2)\nsb.violinplot(x = \"Species\", y = \"PetalWidthCm\", data = df)\nplt.subplot(2,2,3)\nsb.violinplot(x = \"Species\", y = \"SepalLengthCm\", data = df)\nplt.subplot(2,2,4)\nsb.violinplot(x = \"Species\", y = \"SepalWidthCm\", data = df)","7a6c37fe":"plt.figure(figsize = (15,10))\nsb.heatmap(df.corr(), annot = True, cmap = \"cubehelix_r\")\nplt.show()","25678065":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import svm\nfrom sklearn import metrics\nfrom sklearn.tree import DecisionTreeClassifier","b504e151":"df_train, df_test = train_test_split(df, test_size = 0.3)","667c0999":"df_train.shape","fde9b124":"df_test.shape","c0be3305":"train_X = df_train[[\"SepalLengthCm\", \"SepalWidthCm\", \"PetalLengthCm\", \"PetalWidthCm\",]]\ntrain_y = df_train.Species\n\ntest_X = df_test[[\"SepalLengthCm\", \"SepalWidthCm\", \"PetalLengthCm\", \"PetalWidthCm\",]]\ntest_y = df_test.Species","341c1aec":"train_X.head()","68237cdb":"test_X.head()","395a79f1":"model = svm.SVC()\nmodel.fit(train_X, train_y)\nprediction = model.predict(test_X)","7e486f39":"svm_accuracy = metrics.accuracy_score(prediction, test_y)","ce4e665a":"svm_accuracy","74fecaa3":"model = LogisticRegression()\nmodel.fit(train_X, train_y)\nprediction = model.predict(test_X)\nlr_acc = metrics.accuracy_score(prediction, test_y)","bb7bce1c":"print(lr_acc)","40f40533":"model = DecisionTreeClassifier()\nmodel.fit(train_X, train_y)\nprediction = model.predict (test_X)\ndt_acc = metrics.accuracy_score(prediction, test_y)","107d0f83":"dt_acc","6247e954":"model = KNeighborsClassifier(n_neighbors=3)\nmodel.fit(train_X, train_y)\nprediction = model.predict(test_X)\nknn_acc = metrics.accuracy_score(prediction, test_y)","d2bfec4f":"knn_acc","07fac78e":"a_index = list(range(1,11))\na = pd.Series()\nx = [1,2,3,4,5,6,7,8,9,10]\nfor i in list(range(1,11)):\n    model = KNeighborsClassifier(n_neighbors = i)\n    model.fit(train_X, train_y)\n    prediction = model.predict(test_X)\n    a = a.append(pd.Series(metrics.accuracy_score(prediction, test_y)))\nplt.plot(a_index, a)\nplt.xticks(x)","859fcd02":"petal = df[[\"PetalLengthCm\", \"PetalWidthCm\", \"Species\"]]\nsepal = df[[\"SepalLengthCm\", \"SepalWidthCm\", \"Species\"]]","902f8f71":"petal","f7094411":"sepal.head()","89f3766d":"train_p, test_p = train_test_split(petal, test_size = 0.3)\n\ntrain_x_p = train_p[[\"PetalWidthCm\", \"PetalLengthCm\"]]\ntrain_y_p = train_p.Species\n\ntest_x_p = test_p[[\"PetalWidthCm\", \"PetalLengthCm\"]]\ntest_y_p = test_p.Species\n\ntrain_s, test_s = train_test_split(sepal, test_size = 0.3)\n\ntrain_x_s = train_s[[\"SepalWidthCm\", \"SepalLengthCm\"]]\ntrain_y_s = train_s.Species\n\ntest_x_s = test_s[[\"SepalWidthCm\", \"SepalLengthCm\"]]\ntest_y_s = test_s.Species","872ad096":"#For Petals\nmodel = svm.SVC()\nmodel.fit(train_x_p, train_y_p)\nprediction = model.predict(test_x_p)\nsvm_p_acc = metrics.accuracy_score(prediction, test_y_p)","aee9584c":"svm_p_acc","55dc6a7f":"#For Sepals\nmodel = svm.SVC()\nmodel.fit(train_x_s, train_y_s)\nprediction = model.predict(test_x_s)\nsvm_s_acc = metrics.accuracy_score(prediction, test_y_s)","c740541d":"svm_s_acc","176ea91a":"#For Petals\nmodel = LogisticRegression()\nmodel.fit(train_x_p, train_y_p)\nprediction = model.predict(test_x_p)\nlr_p_acc = metrics.accuracy_score(prediction, test_y_p)","8128e672":"lr_p_acc","b266be78":"#For Sepals\nmodel = LogisticRegression()\nmodel.fit(train_x_s, train_y_s)\nprediction = model.predict(test_x_s)\nlr_s_acc = metrics.accuracy_score(prediction, test_y_s)","572ade0e":"lr_s_acc","d54fc1ae":"#For Petals\nmodel = DecisionTreeClassifier()\nmodel.fit(train_x_p, train_y_p)\nprediction = model.predict (test_x_p)\ndt_p_acc = metrics.accuracy_score(prediction, test_y_p)","c478ef77":"dt_p_acc","8160a975":"#For Sepals\nmodel = DecisionTreeClassifier()\nmodel.fit(train_x_s, train_y_s)\nprediction = model.predict (test_x_s)\ndt_s_acc = metrics.accuracy_score(prediction, test_y_s)","68e8d02e":"dt_s_acc","1334323d":"#For Petals\nmodel = KNeighborsClassifier(n_neighbors=3)\nmodel.fit(train_x_p, train_y_p)\nprediction = model.predict(test_x_p)\nknn_p_acc = metrics.accuracy_score(prediction, test_y_p)","063e4486":"knn_p_acc","06f50e47":"#For Sepals\nmodel = KNeighborsClassifier(n_neighbors=3)\nmodel.fit(train_x_s, train_y_s)\nprediction = model.predict(test_x_s)\nknn_s_acc = metrics.accuracy_score(prediction, test_y_s)","dc7f2a79":"knn_s_acc","f89b1b1a":"accuracy_petals = [svm_p_acc, lr_p_acc, dt_p_acc, knn_p_acc]\naccuracy_sepals = [svm_s_acc, lr_s_acc, dt_s_acc, knn_s_acc]","1d140739":"accuracy_petals","b8436b8c":"data = {\"accuracy_petals\": [svm_p_acc, lr_p_acc, dt_p_acc, knn_p_acc], \"accuracy_sepals\": [svm_s_acc, lr_s_acc, dt_s_acc, knn_s_acc]}","cb024810":"data","97fe064f":"models_df = pd.DataFrame(data, index = [\"SVM\", \"Logistic Regression\", \"Decision Tree\", \"KNN\"])","7dc97b41":"models_df","ac9430da":"sb.scatterplot(data = models_df)","4438aaca":"# Logistic Regression","3424c03a":"> Here, the data has been splitted for training and testing for both petal characteristics and sepal characteristics.","a3764a88":"# Decision Tree","a253124f":"# Distribution of Petal Length and Width","8de2ccdc":"# Comparing Accuracy of Models with Petal Data vs Sepal Data","c6975dc3":"# Importing Libraries","9db9942c":"# Decision Tree","bf92cc8e":"# Logistic Regression","db706099":"> The above graph shows the accuracy of KNN Classification using different values of \"n\". \n> \n> The values of accuracy will be different every run due to the randomness of the data that is split between the testing and the training set.","5eea19ad":"# A jointplot of Histogram and Scatterplot to ease the interpretation of the dataset.","0268900e":"# Test and Training Splitting","68dda62b":"# K-Nearest Neighbors","bf03ea5d":"# What do we see from the Scatterplot?","1f06fa89":"# Splitting the Data into for Training and Testing","98a68dba":"# Using 1 Petal and 1 Sepal Feature","d008d5a5":"We can see that Sepal Length and Sepal Width are not correlated beacause tehy have a correlation value of -0.11. \n\nWhereas, Petal Width and Petal Length are highly correlated, having a correlation value of 0.96.\n\nWe'll use all the features for training the model and then we'll check the accuracy. Then we'll train another model if one feature each from Petal and Sepal, and then check the accuracy.","82ba91e6":"***This means no missing values.***","9403d458":"# Scatter Plot (Sepal Length vs Sepal Width)","c2a634c3":"# How length and width vary according to the species","75416772":"# Kernel Density Estimate Plot (Sepal Length vs Sepal Width)","b0cc51a0":"# Loading the Dataset","72cfe90c":"# K-Nearest Neighbors","dad4c212":"# EDA","c8cb085f":"# KNN Classifier with other values of \"n\"","4899227e":"# Observation from the Heatmap","5fbe571c":"# Support Vector Machine","fe254326":"As was earlier hypothesized, that petals would be a more accurate classification feature for species, the same can be seen in the scatter plot above. The petals have an higher accuracy score of predicting the species of the flower than the sepals for every model. ","e535c3fe":"# Support Vector Machine","a40f890f":"***We can see here that the petal characteristics have a beter cluster than the sepal characteristics. This means that petals will be more helpful in the species identification than the sepals.***","eb2b5e0d":"***From the plot we can see that most of the Sepal Lengths lie between 6 and 7 centimeters. Whereas, majority of the width values lie between 2.5 to 3 centimeters.***"}}