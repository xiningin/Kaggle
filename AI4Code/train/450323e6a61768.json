{"cell_type":{"ccb7d4eb":"code","75db7be6":"code","f2b88470":"code","69d7f24e":"code","5bb4d6b9":"code","65eb1a0a":"code","8fc0198e":"code","aa7a592c":"code","e9ef1511":"code","f0e8ba56":"code","cf4121b7":"code","f66d1945":"code","06893de0":"code","0eb4c73a":"code","8a6750d4":"code","99562b4c":"code","6708b47e":"code","98822ffa":"code","47784ee7":"code","7e111899":"code","b4a4af4a":"code","d4ee45ee":"code","feed4898":"code","7e63c992":"code","96013db7":"code","5a3e8ea0":"code","741e10cf":"code","3b6ea7ca":"code","1db2025c":"code","93634a99":"code","a2e925bf":"code","5376d756":"code","6f5134d5":"code","aad06d8e":"code","dc77dd01":"code","7999a83c":"code","09fb8ab9":"code","1ff049c2":"code","f5f320c2":"code","9d8c301f":"code","2682fae8":"code","807483a2":"code","33d80b1d":"code","449f6284":"markdown"},"source":{"ccb7d4eb":"import torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport torch.nn.functional as F\n\nfrom torchtext.data import TabularDataset\nfrom torchtext.vocab import Vectors\nfrom torchtext.data import Field, BucketIterator, Iterator\n\nimport spacy\nimport numpy as np\nfrom nltk.corpus import stopwords\nimport string\n\nimport random\nimport math\nimport time\nimport pandas as pd\nimport os","75db7be6":"spacy_en = spacy.load('en')","f2b88470":"stopwords = set(stopwords.words('english'))","69d7f24e":"SEED = 1234\n\nrandom.seed(SEED)\nnp.random.seed(SEED)\ntorch.manual_seed(SEED)\ntorch.cuda.manual_seed(SEED)\ntorch.backends.cudnn.deterministic = True","5bb4d6b9":"def tokenize_en(text):\n    \"\"\"\n    Tokenizes English text from a string into a list of strings (tokens)\n    \"\"\"\n    return [tok.text for tok in spacy_en.tokenizer(text)]","65eb1a0a":"def remove_punctuation(text):\n    words = [wrd for wrd in text if wrd not in string.punctuation]\n    return [word for word in words if not word.startswith('http')]","8fc0198e":"SRC = Field(tokenize = tokenize_en,\n            preprocessing=remove_punctuation,\n            init_token = '<sos>', \n            eos_token = '<eos>', \n            lower = True)\n\nTRG = Field(tokenize = tokenize_en,\n            preprocessing=remove_punctuation,\n            init_token = '<sos>', \n            eos_token = '<eos>', \n            lower = True)","aa7a592c":"fields = {'text': ('text', SRC),'selected_text': ('label', TRG)}","e9ef1511":"dataset = TabularDataset(path='\/kaggle\/input\/tweet-sentiment-extraction\/train.csv',\n                        format='csv',\n                        fields=fields)","f0e8ba56":"train, valid = dataset.split(split_ratio=0.75)","cf4121b7":"# SRC.build_vocab(train, min_freq = 2)\n# TRG.build_vocab(train, min_freq = 2)\n\ncache = '\/kaggle\/working\/vector_cache'\nif not os.path.exists(cache):\n    os.mkdir(cache)\nvector = Vectors(name='\/kaggle\/input\/glove6b\/glove.6B.100d.txt', cache=cache)\nSRC.build_vocab(train,\n                 vectors = vector, \n                 unk_init = torch.Tensor.normal_)\n\nTRG.build_vocab(train,\n                 vectors = vector, \n                 unk_init = torch.Tensor.normal_)","f66d1945":"print(vars(train.examples[0]))","06893de0":"device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')","0eb4c73a":"ID = Field()","8a6750d4":"fields = {'textID': ('ID', ID), 'text':('text', SRC)}","99562b4c":"test = TabularDataset(path='\/kaggle\/input\/tweet-sentiment-extraction\/test.csv',\n                        format='csv',\n                        fields=fields)","6708b47e":"ID.build_vocab(test)","98822ffa":"ID.vocab.itos[2877]","47784ee7":"test.examples[1].text","7e111899":"train_iterator, valid_iterator, _ = BucketIterator.splits((train, valid, None),batch_sizes=(128, 128, 0),\n                                                            sort_key=lambda x: len(x.text), device=device)","b4a4af4a":"test_iterator = Iterator(dataset=test,device='cpu', batch_size=1, sort=False)","d4ee45ee":"class Encoder(nn.Module):\n    def __init__(self, input_dim, emb_dim, enc_hid_dim, dec_hid_dim, dropout):\n        super().__init__()\n        \n        self.embedding = nn.Embedding(input_dim, emb_dim)\n        \n        self.rnn = nn.GRU(emb_dim, enc_hid_dim, bidirectional = True)\n        \n        self.fc = nn.Linear(enc_hid_dim * 2, dec_hid_dim)\n        \n        self.dropout = nn.Dropout(dropout)\n        \n    def forward(self, src):\n        \n        #src = [src len, batch size]\n        \n        embedded = self.dropout(self.embedding(src))\n        \n        #embedded = [src len, batch size, emb dim]\n        \n        outputs, hidden = self.rnn(embedded)\n                \n        #outputs = [src len, batch size, hid dim * num directions]\n        #hidden = [n layers * num directions, batch size, hid dim]\n        \n        #hidden is stacked [forward_1, backward_1, forward_2, backward_2, ...]\n        #outputs are always from the last layer\n        \n        #hidden [-2, :, : ] is the last of the forwards RNN \n        #hidden [-1, :, : ] is the last of the backwards RNN\n        \n        #initial decoder hidden is final hidden state of the forwards and backwards \n        #  encoder RNNs fed through a linear layer\n        hidden = torch.tanh(self.fc(torch.cat((hidden[-2,:,:], hidden[-1,:,:]), dim = 1)))\n        \n        #outputs = [src len, batch size, enc hid dim * 2]\n        #hidden = [batch size, dec hid dim]\n        \n        return outputs, hidden","feed4898":"class Attention(nn.Module):\n    def __init__(self, enc_hid_dim, dec_hid_dim):\n        super().__init__()\n        \n        self.attn = nn.Linear((enc_hid_dim * 2) + dec_hid_dim, dec_hid_dim)\n        self.v = nn.Linear(dec_hid_dim, 1, bias = False)\n        \n    def forward(self, hidden, encoder_outputs):\n        \n        #hidden = [batch size, dec hid dim]\n        #encoder_outputs = [src len, batch size, enc hid dim * 2]\n        \n        batch_size = encoder_outputs.shape[1]\n        src_len = encoder_outputs.shape[0]\n        \n        #repeat decoder hidden state src_len times\n        hidden = hidden.unsqueeze(1).repeat(1, src_len, 1)\n        \n        encoder_outputs = encoder_outputs.permute(1, 0, 2)\n        \n        #hidden = [batch size, src len, dec hid dim]\n        #encoder_outputs = [batch size, src len, enc hid dim * 2]\n        \n        energy = torch.tanh(self.attn(torch.cat((hidden, encoder_outputs), dim = 2))) \n        \n        #energy = [batch size, src len, dec hid dim]\n\n        attention = self.v(energy).squeeze(2)\n        \n        #attention= [batch size, src len]\n        \n        return F.softmax(attention, dim=1)","7e63c992":"class Decoder(nn.Module):\n    def __init__(self, output_dim, emb_dim, enc_hid_dim, dec_hid_dim, dropout, attention):\n        super().__init__()\n\n        self.output_dim = output_dim\n        self.attention = attention\n        \n        self.embedding = nn.Embedding(output_dim, emb_dim)\n        \n        self.rnn = nn.GRU((enc_hid_dim * 2) + emb_dim, dec_hid_dim)\n        \n        self.fc_out = nn.Linear((enc_hid_dim * 2) + dec_hid_dim + emb_dim, output_dim)\n        \n        self.dropout = nn.Dropout(dropout)\n        \n    def forward(self, input, hidden, encoder_outputs):\n             \n        #input = [batch size]\n        #hidden = [batch size, dec hid dim]\n        #encoder_outputs = [src len, batch size, enc hid dim * 2]\n        \n        input = input.unsqueeze(0)\n        \n        #input = [1, batch size]\n        \n        embedded = self.dropout(self.embedding(input))\n        \n        #embedded = [1, batch size, emb dim]\n        \n        a = self.attention(hidden, encoder_outputs)\n                \n        #a = [batch size, src len]\n        \n        a = a.unsqueeze(1)\n        \n        #a = [batch size, 1, src len]\n        \n        encoder_outputs = encoder_outputs.permute(1, 0, 2)\n        \n        #encoder_outputs = [batch size, src len, enc hid dim * 2]\n        \n        weighted = torch.bmm(a, encoder_outputs)\n        \n        #weighted = [batch size, 1, enc hid dim * 2]\n        \n        weighted = weighted.permute(1, 0, 2)\n        \n        #weighted = [1, batch size, enc hid dim * 2]\n        \n        rnn_input = torch.cat((embedded, weighted), dim = 2)\n        \n        #rnn_input = [1, batch size, (enc hid dim * 2) + emb dim]\n            \n        output, hidden = self.rnn(rnn_input, hidden.unsqueeze(0))\n        \n        #output = [seq len, batch size, dec hid dim * n directions]\n        #hidden = [n layers * n directions, batch size, dec hid dim]\n        \n        #seq len, n layers and n directions will always be 1 in this decoder, therefore:\n        #output = [1, batch size, dec hid dim]\n        #hidden = [1, batch size, dec hid dim]\n        #this also means that output == hidden\n        assert (output == hidden).all()\n        \n        embedded = embedded.squeeze(0)\n        output = output.squeeze(0)\n        weighted = weighted.squeeze(0)\n        \n        prediction = self.fc_out(torch.cat((output, weighted, embedded), dim = 1))\n        \n        #prediction = [batch size, output dim]\n        \n        return prediction, hidden.squeeze(0)","96013db7":"class Seq2Seq(nn.Module):\n    def __init__(self, encoder, decoder, device):\n        super().__init__()\n        \n        self.encoder = encoder\n        self.decoder = decoder\n        self.device = device\n        \n    def forward(self, src, trg, teacher_forcing_ratio = 0.5):\n        \n        if trg is None:\n            trg = torch.zeros((25, src.shape[1])).fill_(2).long().to(src.device)\n            assert teacher_forcing_ratio == 0, \"Must be zero during inference\"\n        \n        #src = [src len, batch size]\n        #trg = [trg len, batch size]\n        #teacher_forcing_ratio is probability to use teacher forcing\n        #e.g. if teacher_forcing_ratio is 0.75 we use teacher forcing 75% of the time\n        \n        batch_size = src.shape[1]\n        trg_len = trg.shape[0]\n        trg_vocab_size = self.decoder.output_dim\n        \n        #tensor to store decoder outputs\n        outputs = torch.zeros(trg_len, batch_size, trg_vocab_size).to(self.device)\n        \n        #encoder_outputs is all hidden states of the input sequence, back and forwards\n        #hidden is the final forward and backward hidden states, passed through a linear layer\n        encoder_outputs, hidden = self.encoder(src)\n                \n        #first input to the decoder is the <sos> tokens\n        input = trg[0,:]\n        \n        for t in range(1, trg_len):\n            \n            #insert input token embedding, previous hidden state and all encoder hidden states\n            #receive output tensor (predictions) and new hidden state\n            output, hidden = self.decoder(input, hidden, encoder_outputs)\n            \n            #place predictions in a tensor holding predictions for each token\n            outputs[t] = output\n            \n            #decide if we are going to use teacher forcing or not\n            teacher_force = random.random() < teacher_forcing_ratio\n            \n            #get the highest predicted token from our predictions\n            top1 = output.argmax(1) \n            \n            #if teacher forcing, use actual next token as next input\n            #if not, use predicted token\n            input = trg[t] if teacher_force else top1\n\n        return outputs","5a3e8ea0":"INPUT_DIM = len(SRC.vocab)\nOUTPUT_DIM = len(TRG.vocab)\nENC_EMB_DIM = 100\nDEC_EMB_DIM = 100\nENC_HID_DIM = 512\nDEC_HID_DIM = 512\nENC_DROPOUT = 0.5\nDEC_DROPOUT = 0.5\n\nattn = Attention(ENC_HID_DIM, DEC_HID_DIM)\nenc = Encoder(INPUT_DIM, ENC_EMB_DIM, ENC_HID_DIM, DEC_HID_DIM, ENC_DROPOUT)\ndec = Decoder(OUTPUT_DIM, DEC_EMB_DIM, ENC_HID_DIM, DEC_HID_DIM, DEC_DROPOUT, attn)\n\nmodel = Seq2Seq(enc, dec, device).to(device)","741e10cf":"def init_weights(m):\n    for name, param in m.named_parameters():\n        if 'weight' in name:\n            nn.init.normal_(param.data, mean=0, std=0.01)\n        else:\n            nn.init.constant_(param.data, 0)\n            \nmodel.apply(init_weights)","3b6ea7ca":"def count_parameters(model):\n    return sum(p.numel() for p in model.parameters() if p.requires_grad)\n\nprint(f'The model has {count_parameters(model):,} trainable parameters')\n","1db2025c":"pretrained_embeddings = SRC.vocab.vectors\n\nprint(pretrained_embeddings)","93634a99":"model.encoder.embedding.weight.data.copy_(pretrained_embeddings)","a2e925bf":"UNK_IDX = SRC.vocab.stoi[SRC.unk_token]\nPAD_IDX = SRC.vocab.stoi[SRC.pad_token]\n\n\nmodel.encoder.embedding.weight.data[UNK_IDX] = torch.zeros(ENC_EMB_DIM)\nmodel.encoder.embedding.weight.data[PAD_IDX] = torch.zeros(ENC_EMB_DIM)\n\nprint(model.encoder.embedding.weight.data)","5376d756":"optimizer = optim.Adam(model.parameters())","6f5134d5":"TRG_PAD_IDX = TRG.vocab.stoi[TRG.pad_token]\n\ncriterion = nn.CrossEntropyLoss(ignore_index = TRG_PAD_IDX)","aad06d8e":"def train(model, iterator, optimizer, criterion, clip):\n    \n    model.train()\n    \n    epoch_loss = 0\n    \n    for i, batch in enumerate(iterator):\n        \n        src = batch.text\n        trg = batch.label\n        \n        optimizer.zero_grad()\n        \n        output = model(src, trg)\n        \n        #trg = [trg len, batch size]\n        #output = [trg len, batch size, output dim]\n        \n        output_dim = output.shape[-1]\n        \n        output = output[1:].view(-1, output_dim)\n        trg = trg[1:].view(-1)\n        \n        #trg = [(trg len - 1) * batch size]\n        #output = [(trg len - 1) * batch size, output dim]\n        \n        loss = criterion(output, trg)\n        \n        loss.backward()\n        \n        torch.nn.utils.clip_grad_norm_(model.parameters(), clip)\n        \n        optimizer.step()\n        \n        epoch_loss += loss.item()\n        \n    return epoch_loss \/ len(iterator)","dc77dd01":"def evaluate(model, iterator, criterion):\n    \n    model.eval()\n    \n    epoch_loss = 0\n    \n    with torch.no_grad():\n    \n        for i, batch in enumerate(iterator):\n\n            src = batch.text\n            trg = batch.label\n\n            output = model(src, trg, 0) #turn off teacher forcing\n\n            #trg = [trg len, batch size]\n            #output = [trg len, batch size, output dim]\n\n            output_dim = output.shape[-1]\n            \n            output = output[1:].view(-1, output_dim)\n            trg = trg[1:].view(-1)\n\n            #trg = [(trg len - 1) * batch size]\n            #output = [(trg len - 1) * batch size, output dim]\n\n            loss = criterion(output, trg)\n\n            epoch_loss += loss.item()\n        \n    return epoch_loss \/ len(iterator)","7999a83c":"def epoch_time(start_time, end_time):\n    elapsed_time = end_time - start_time\n    elapsed_mins = int(elapsed_time \/ 60)\n    elapsed_secs = int(elapsed_time - (elapsed_mins * 60))\n    return elapsed_mins, elapsed_secs","09fb8ab9":"N_EPOCHS = 10 #25\nCLIP = 1\n\nbest_valid_loss = float('inf')\n\nfor epoch in range(N_EPOCHS):\n    \n    start_time = time.time()\n    \n    train_loss = train(model, train_iterator, optimizer, criterion, CLIP)\n    valid_loss = evaluate(model, valid_iterator, criterion)\n    \n    end_time = time.time()\n    \n    epoch_mins, epoch_secs = epoch_time(start_time, end_time)\n    \n    if valid_loss < best_valid_loss:\n        best_valid_loss = valid_loss\n        torch.save(model.state_dict(), 'tut3-model.pt')\n    \n    print(f'Epoch: {epoch+1:02} | Time: {epoch_mins}m {epoch_secs}s')\n    print(f'\\tTrain Loss: {train_loss:.3f} | Train PPL: {math.exp(train_loss):7.3f}')\n    print(f'\\t Val. Loss: {valid_loss:.3f} |  Val. PPL: {math.exp(valid_loss):7.3f}')","1ff049c2":"def translate_sentence(idx, numericalized):\n    \n    tensor = torch.LongTensor(numericalized) #convert to tensor and add batch dimension\n    translation_tensor_probs = model(tensor, None, 0).squeeze(1) #pass through model to get translation probabilities\n    translation_tensor = torch.argmax(translation_tensor_probs, 1) #get translation from highest probabilities\n    translation = [TRG.vocab.itos[t] for t in translation_tensor if TRG.vocab.itos[t] not in ['<eos>','<unk>']][1:] #we ignore the first token, just like we do in the training loop\n    output_seq = \" \"\n    for trans in translation:\n        if trans not in output_seq:\n            output_seq += trans+\" \"\n    return (ID.vocab.itos[idx.item()], output_seq.strip())","f5f320c2":"model.load_state_dict(torch.load('\/kaggle\/working\/tut3-model.pt'))\nmodel.to('cpu')","9d8c301f":"textID = []\nselected_text = []\nfor i, batch in enumerate(test_iterator):\n    src = batch.text\n    idx = batch.ID\n    output = translate_sentence(idx,src)\n    textID.append(output[0])\n    selected_text.append(output[1])","2682fae8":"submission_file = pd.DataFrame({\"textID\": textID, \"selected_text\": selected_text})","807483a2":"submission_file.head()","33d80b1d":"submission_file.to_csv(\"submission.csv\",index=False)","449f6284":"### Model Building"}}