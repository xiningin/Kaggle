{"cell_type":{"eba99258":"code","c6b2d1f2":"code","0c2470a0":"code","30ffec06":"code","b69554eb":"code","6990190c":"code","b34783cc":"code","9279572a":"code","e15abec1":"code","ab2eabbb":"code","28798138":"code","11cfe093":"code","fd83295a":"code","825f2dc6":"code","92a4b3c8":"code","0f04f543":"code","c328f6b4":"code","d3144284":"code","be91809b":"code","9c07da28":"code","47cbcfaf":"code","41e6dd9c":"code","412114c5":"code","4488790d":"code","08cf08e8":"code","8054a01e":"code","dba75065":"code","1888a5dd":"code","4389ecb3":"code","ba1487e1":"code","e52b085e":"code","d30af042":"code","8d93142a":"code","b65ca78d":"code","06c1e835":"code","37f0b8a6":"code","20f7aaa4":"code","63effb69":"code","751bd171":"code","d359d3ef":"code","b72ec760":"code","ce1953c9":"code","27d1d542":"code","3bc950fc":"code","87d49cbc":"code","885fc834":"code","c89b1eb4":"code","0c0eee88":"code","4beae869":"code","a852ba45":"code","d7dc34c2":"code","d11bb204":"code","ea2cea60":"code","0a983a63":"code","cf803d28":"code","e2e04d56":"code","974f83bb":"code","9b14384c":"code","468e481c":"code","d61ccd1e":"code","8d41ef30":"code","201d86d8":"code","2b18a3c6":"code","7796fa2e":"markdown","7c022ab1":"markdown","5dd6e6db":"markdown","0075b61c":"markdown","7649d97b":"markdown"},"source":{"eba99258":"# storing and anaysis\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# interactive plots\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\n# geographical ploting\n# import folium\n# import geopandas as gpd","c6b2d1f2":"# offline plotly\nfrom plotly.offline import plot, iplot, init_notebook_mode\ninit_notebook_mode(connected=True)","0c2470a0":"# color pallette\ncnf = '#393e46' # confirmed - grey\ndth = '#ff2e63' # death - red\nrec = '#21bf73' # recovered - cyan\nact = '#fe9801' # active case - yellow","30ffec06":"! ls ..\/input\/covid19-corona-virus-india-dataset","b69554eb":"# daily\n# =====\n\n# read data\ndaily = pd.read_csv('..\/input\/covid19-corona-virus-india-dataset\/nation_level_daily.csv')\n\n# convert datetime datatype\ndaily['Date'] = pd.to_datetime(daily['Date'] + ' 2020')\n\n# get no. of active cases\ndaily['Total Active'] = daily['Total Confirmed'] - daily['Total Deceased'] - daily['Total Recovered']\n\n# Deaths \/ 100 cases\ndaily['Deaths \/ 100 Cases'] = round((daily['Total Deceased'] \/ daily['Total Confirmed'])*100, 2)\n# Recovered \/ 100 cases\ndaily['Recovered \/ 100 Cases'] = round((daily['Total Recovered'] \/ daily['Total Confirmed'])*100, 2)\n# Deaths \/ 100 recovered\ndaily['Deaths \/ 100 Recovered'] = round((daily['Total Deceased'] \/ daily['Total Recovered'])*100, 2)\n\n# first few rows\ndaily.head()","6990190c":"def plot_daily(col, hue):\n    fig = px.bar(daily, x=\"Date\", y=col, title=col, \n                 color_discrete_sequence=[hue])\n    fig.update_layout(title=col, xaxis_title=\"\", yaxis_title=\"\")\n    fig.show()","b34783cc":"plot_daily('Total Confirmed', '#000000')","9279572a":"plot_daily('Daily Confirmed', '#000000')","e15abec1":"plot_daily('Total Active', '#000000')","ab2eabbb":"plot_daily('Total Deceased', dth)","28798138":"plot_daily('Daily Deceased', dth)","11cfe093":"plot_daily('Total Recovered', rec)","fd83295a":"plot_daily('Daily Recovered', rec)","825f2dc6":"def plot_daily(col, hue):\n    temp = tests_dbd.copy()\n    # temp = temp[~temp[col].isna()]\n    fig = px.scatter(temp, x=\"Update Time Stamp\", \n                 y=col, title=col, \n                 color_discrete_sequence=[hue])\n    fig.update_layout(title=col, xaxis_title=\"\", yaxis_title=\"\")\n    fig.show()","92a4b3c8":"# stacked bar chart\n\n# subset columns\ntemp = daily[['Date', 'Total Active', 'Total Deceased', 'Total Recovered']]\n\n# melt data\ntemp = temp.melt(value_vars=['Total Recovered', 'Total Deceased', 'Total Active'],\n                 id_vars=\"Date\", var_name='Case', value_name='Count')\ntemp.head()\n\n# plot\nfig_2 = px.bar(temp, x=\"Date\", y=\"Count\", color='Case', \n               title='Cases over time', color_discrete_sequence = [rec, dth, act])\nfig_2.show()","0f04f543":"# stacked bar chart\n\n# subset columns\ntemp = daily[['Date', 'Daily Confirmed', 'Daily Deceased', 'Daily Recovered']]\n\n# melt data\ntemp = temp.melt(value_vars=['Daily Recovered', 'Daily Deceased', 'Daily Confirmed'],\n                 id_vars=\"Date\", var_name='Case', value_name='Count')\ntemp.head()\n\n# plot\nfig_2 = px.bar(temp, x=\"Date\", y=\"Count\", color='Case', \n               title='Daily cases over time', color_discrete_sequence = [rec, dth, act])\nfig_2.show()","c328f6b4":"# Daily statistics\n# ================\n\ntemp = daily[daily['Total Confirmed'] > 100]\n\nfig_c = px.line(temp, x=\"Date\", y=\"Deaths \/ 100 Cases\", color_discrete_sequence=['#000000'])\nfig_d = px.line(temp, x=\"Date\", y=\"Recovered \/ 100 Cases\", color_discrete_sequence=['#649d66'])\nfig_r = px.line(temp, x=\"Date\", y=\"Deaths \/ 100 Recovered\", color_discrete_sequence=['#ff677d'])\n\nfig = make_subplots(rows=1, cols=3, shared_xaxes=False, \n                    subplot_titles=('No. of Deaths to 100 Cases', \n                                    'No. of Recovered to 100 Cases', \n                                    'No. of Deaths to 100 Recovered'))\n\nfig.add_trace(fig_c['data'][0], row=1, col=1)\nfig.add_trace(fig_d['data'][0], row=1, col=2)\nfig.add_trace(fig_r['data'][0], row=1, col=3)","d3144284":"temp = daily.loc[:, ['Date', 'Total Active', 'Total Recovered']]\ntemp = temp.melt(id_vars='Date', value_vars=['Total Active', 'Total Recovered'])\ntemp.head()\n\nfig_c = px.line(temp, x=\"Date\", y=\"value\", color='variable', line_dash='variable', \n                color_discrete_sequence=[dth, rec])\nfig_c.update_layout(title='Active vs Recovered cases', \n                  xaxis_title='', yaxis_title='')\nfig_c.show()","be91809b":"from fbprophet import Prophet\nconfirmed = daily.groupby('Date').sum()['Total Confirmed'].reset_index()\ndeaths = daily.groupby('Date').sum()['Total Deceased'].reset_index()\nrecovered = daily.groupby('Date').sum()['Total Recovered'].reset_index()","9c07da28":"confirmed.columns = ['ds','y']\nconfirmed.tail()","47cbcfaf":"plt.figure(figsize = (20,10))\nplt.bar(daily['Date'],daily['Total Deceased'])\nplt.xlabel('Date')\nplt.ylabel('Total Deaths')\nplt.title('Death Rate')","41e6dd9c":"from sklearn.model_selection import train_test_split","412114c5":"X = daily.iloc[:,:-1].values\nY = daily.iloc[:,-1].values","4488790d":"X","08cf08e8":"Y","8054a01e":"X.shape","dba75065":"Y.shape","1888a5dd":"X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size = 0.5,random_state = 0)","4389ecb3":"X_train.shape","ba1487e1":"X_test.shape","e52b085e":"Y_train.shape","d30af042":"Y_test.shape","8d93142a":"train_df = daily","b65ca78d":"from fbprophet import Prophet\nmodel = Prophet()","06c1e835":"train_df = pd.DataFrame(train_df) \n   \n# Before renaming the columns \nprint(train_df.columns) \n   \ntrain_df.rename(columns = {\"Date\":'ds', \"Total Deceased\":'y'}, inplace = True) \n   \n# After renaming the columns \nprint(train_df.columns)","37f0b8a6":"train_df","20f7aaa4":"train_df.describe()","63effb69":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,Y,test_size = 0.2,random_state=123)","751bd171":"from sklearn.linear_model import LinearRegression","d359d3ef":"linear_regression_model = LinearRegression()","b72ec760":"X_train","ce1953c9":"X","27d1d542":"import time\nfrom datetime import datetime","3bc950fc":"A = train_df.astype(int,copy = True, errors = 'ignore')","87d49cbc":"import numpy as np\nimport matplotlib.pyplot as plt\n\ndef f(X_train):\n    return np.int(X_train)\nf2 = np.vectorize(f)\nX_train = np.arange(1, 15.1, 0.1)","885fc834":"train_df = train_df.dropna()","c89b1eb4":"A","0c0eee88":"X_train","4beae869":"Y_train","a852ba45":"df = pd.DataFrame(X_train) \n  \n# Number of rows to drop \nn = 3\n  \n# Using head() to  \n# drop last n rows \ndf1 = df.head(-n) \n  \n# Printing dataframe \nprint(df1) ","d7dc34c2":"df = pd.DataFrame(Y_train) \n  \n# Number of rows to drop \nn = 3\n  \n# Using head() to  \n# drop last n rows \ndf2 = df.head(-n) \n  \n# Printing dataframe \nprint(df2)","d11bb204":"df1.shape","ea2cea60":"df2.shape","0a983a63":"df1","cf803d28":"df2","e2e04d56":"from sklearn.impute import SimpleImputer\nmy_imputer = SimpleImputer()\ndata_with_imputed_values1 = my_imputer.fit_transform(df1)","974f83bb":"from sklearn.impute import SimpleImputer\nmy_imputer = SimpleImputer()\ndata_with_imputed_values = my_imputer.fit_transform(df2)","9b14384c":"display(data_with_imputed_values1,data_with_imputed_values)","468e481c":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.datasets import make_blobs\nfrom sklearn.metrics import accuracy_score\n# create the inputs and outputs\nX, y = make_blobs(n_samples=1000, centers=2, n_features=2, random_state=2)\n# define model\nmodel = LogisticRegression(solver='lbfgs')\n# fit model\nmodel.fit(X, y)\n# make predictions\nyhat = model.predict(X)\n# evaluate predictions\nacc = accuracy_score(y, yhat)\nprint(acc)","d61ccd1e":"# define input\nnew_input = [[2.12309797, -1.41131072]]","8d41ef30":"# get prediction for new input\nnew_output = model.predict(new_input)","201d86d8":"# make a single prediction with the model\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.datasets import make_blobs\n# create the inputs and outputs\nX, y = make_blobs(n_samples=1000, centers=2, n_features=2, random_state=2)\n# define model\nmodel = LogisticRegression(solver='lbfgs')\n# fit model\nmodel.fit(X, y)\n# define input\nnew_input = [[2.12309797, -1.41131072]]\n# get prediction for new input\nnew_output = model.predict(new_input)\n# summarize input and output\nprint(new_input, new_output)","2b18a3c6":"# make a single prediction with the model\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.datasets import make_blobs\n# create the inputs and outputs\nX, y = make_blobs(n_samples=1000, centers=2, n_features=2, random_state=2)\n# define model\nmodel = LogisticRegression(solver='lbfgs')\n# fit model\nmodel.fit(X, y)\n# make predictions on the entire training dataset\nyhat = model.predict(X)\n# connect predictions with outputs\nfor i in range(10):\n\tprint(X[i], yhat[i])","7796fa2e":"# Step 2 : Reading Data","7c022ab1":"# Step 3 : Data Visualisation","5dd6e6db":"# Step 3 : Training the Data","0075b61c":"# Step 4 : Prediction Model","7649d97b":"# **Step 1 : Importing Packages**"}}