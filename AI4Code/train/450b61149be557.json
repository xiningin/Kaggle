{"cell_type":{"72cc76fc":"code","a4ffa839":"code","6447b393":"code","3aa59615":"code","90fd2a87":"code","a86690f4":"code","dc71e599":"code","813d77b8":"code","47513799":"code","92f298f6":"code","77e124cb":"markdown","4b39371d":"markdown","c463434c":"markdown","ced51f21":"markdown","0b203fcc":"markdown","899941ad":"markdown","031ebf75":"markdown","c79c649b":"markdown"},"source":{"72cc76fc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a4ffa839":"train_data = pd.read_csv(\"\/kaggle\/input\/Kannada-MNIST\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/Kannada-MNIST\/test.csv\")","6447b393":"from tensorflow import keras\nfrom PIL import Image\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\n\nnum_classes = 10\nimg_rows = 28\nimg_cols = 28\n\ndef raw_to_img_array(raw_data):\n    y = np.array(raw_data.iloc[:, 0])\n    out_y = keras.utils.to_categorical(y, num_classes)\n    \n    x = np.array(raw_data.iloc[:,1:])\n    num_images = raw_data.shape[0]\n    out_x = x.reshape(num_images, img_rows, img_cols, 1)\n    out_x = out_x \/ 255\n    return out_x, out_y\n","3aa59615":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\n\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  \n        samplewise_center=False,  \n        featurewise_std_normalization=False,  \n        samplewise_std_normalization=False,  \n        zca_whitening=False,  \n        rotation_range=10,  \n        zoom_range = 0.2, \n        shear_range=20, \n        width_shift_range=0.2,  \n        height_shift_range=0.2,  \n        horizontal_flip=False, \n        vertical_flip=False,\n        )","90fd2a87":"from sklearn.model_selection import train_test_split\n\ntrain_x, train_y = raw_to_img_array(train_data)\ntrain_x,val_x,train_y,val_y=train_test_split(train_x, train_y, test_size=0.2)\n","a86690f4":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Flatten, Conv2D, Dropout, MaxPool2D, BatchNormalization\nfrom keras.callbacks import ModelCheckpoint, EarlyStopping, ReduceLROnPlateau\nkannada_model = Sequential()\nkannada_model.add(Conv2D(128, kernel_size=(4, 4),\n                 activation='relu',padding=\"same\",\n                 input_shape=(img_rows, img_cols, 1)))\nkannada_model.add(BatchNormalization())\nkannada_model.add(MaxPool2D(pool_size=2,padding=\"valid\"))\nkannada_model.add(Dropout(0.25))\nkannada_model.add(Conv2D(256,kernel_size=(4, 4),padding=\"same\", activation='relu'))\nkannada_model.add(BatchNormalization())\nkannada_model.add(MaxPool2D(pool_size=2,padding=\"valid\"))\nkannada_model.add(Dropout(0.25))\nkannada_model.add(Conv2D(512,kernel_size=(4, 4),padding=\"same\", activation='relu'))\nkannada_model.add(BatchNormalization())\nkannada_model.add(MaxPool2D(pool_size=2,padding=\"valid\"))\nkannada_model.add(Dropout(0.25))\nkannada_model.add(Flatten())\nkannada_model.add(Dense(1024, activation='relu'))\nkannada_model.add(BatchNormalization())\nkannada_model.add(Dropout(0.4))\nkannada_model.add(Dense(256, activation='relu'))\nkannada_model.add(BatchNormalization())\nkannada_model.add(Dropout(0.4))\nkannada_model.add(Dense(num_classes, activation='softmax'))\n\nkannada_model.compile(loss=keras.losses.categorical_crossentropy,\n              optimizer=\"adam\",\n              metrics=['accuracy'])\n\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', patience=5, verbose=1, factor=0.5, min_lr=0.00001)\ncheckpoint = ModelCheckpoint(\"bestmodel.model\", monitor='val_acc', verbose=1, save_best_only=True)\n","dc71e599":"batch_size=64\nkannada_model.fit_generator(datagen.flow(train_x,train_y, batch_size=batch_size),\n          steps_per_epoch=train_x.shape[0]\/\/batch_size,\n          epochs=50,callbacks= [checkpoint,learning_rate_reduction],\n          validation_data=datagen.flow(val_x,val_y,batch_size=batch_size),\n                           validation_steps = val_x.shape[0]\/\/batch_size)","813d77b8":"test_x = np.array(test_data.iloc[:,1:])\ntest_index = np.array(test_data.iloc[:,0])\nnum_images = test_data.shape[0]\ntest_x = test_x.reshape(num_images, img_rows, img_cols, 1)\ntest_x = test_x \/ 255\nkannada_model.load_weights('bestmodel.model')\npreds = kannada_model.predict(test_x)","47513799":"submissions = np.zeros((len(preds),2),dtype=int)\nfor ix in range(preds.shape[0]):\n    submissions[ix][0] = test_index[ix]\n    submissions[ix][1] = np.argmax(preds[ix])\nprint(submissions)","92f298f6":"submissions_pd = pd.DataFrame(data=submissions,columns=[\"id\",\"label\"])\nsubmissions_pd.head()\nsubmissions_pd.to_csv(\"submissions.csv\",index=False)","77e124cb":"Obtain predictions","4b39371d":"Create a CNN model","c463434c":"Run intial setup","ced51f21":"fit the model with the data","0b203fcc":"Play around with data obtained","899941ad":"Convert to csv","031ebf75":"convert pixel data from the columns to np array","c79c649b":"format submissions"}}