{"cell_type":{"605eaa55":"code","8104ba3f":"code","47ec7806":"code","a45c03a5":"code","93857d00":"code","fe07b98e":"code","ffe866f0":"code","d37f997d":"code","a7bcd8d7":"code","566c70e0":"code","ddaff1de":"code","676ea1b8":"code","f030f338":"code","c9ce2300":"code","4715cb79":"code","22787e27":"code","73a2b40a":"code","547f6d8b":"code","d48aa4da":"code","b8fe9087":"code","a667a5ab":"code","71386b8e":"code","705ad5f8":"code","b9038c34":"markdown","fb221d3d":"markdown","05f3e2f3":"markdown","a627eab1":"markdown","0483330b":"markdown","321c3679":"markdown","4bd22e9f":"markdown"},"source":{"605eaa55":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","8104ba3f":"train_data_df = pd.read_csv('..\/input\/training_set.csv')\ntrain_metadata_df = pd.read_csv('..\/input\/training_set_metadata.csv')","47ec7806":"train_data_df['flux_ratio_sq'] = np.power(train_data_df['flux'] \/ train_data_df['flux_err'], 2.0)\ntrain_data_df['flux_by_flux_ratio_sq'] = train_data_df['flux'] * train_data_df['flux_ratio_sq']","a45c03a5":"data_features = train_data_df.columns[1:]\nmetadata_features = train_metadata_df.columns[1:]","93857d00":"groupObjects = train_data_df.groupby('object_id')[data_features]\n\nprint(\"Add constant object features\")\nfeatures = train_metadata_df.drop(['target'], axis=1)\n\nprint(\"Add sum of mutable object features\")\nfeatures = pd.merge(features, groupObjects.agg('sum'), how='right', on='object_id', suffixes=['', '_sum'])\n\nprint(\"Add mean of mutable object features\")\nfeatures = pd.merge(features, groupObjects.agg('mean'), how='right', on='object_id', suffixes=['', '_mean'])\n\nprint(\"Add median of mutable features\")\nfeatures = pd.merge(features, groupObjects.agg('median'), how='right', on='object_id', suffixes=['', '_median'])\n\nprint(\"Add minimum of mutable features\")\nfeatures = pd.merge(features, groupObjects.agg('min'), how='right', on='object_id', suffixes=['', '_min'])\n\nprint(\"Add maximum of mutable features\")\nfeatures = pd.merge(features, groupObjects.agg('max'), how='right', on='object_id', suffixes=['', '_max'])\n\nprint(\"Add range of mutable features\")\nfeatures = pd.merge(features, groupObjects.agg(lambda x: max(x) - min(x)), how='right', on='object_id', suffixes=['', '_range'])\n\nprint(\"Add standard deviation of mutable features\")\nfeatures = pd.merge(features, groupObjects.agg('std'), how='right', on='object_id', suffixes=['', '_stddev'])\n\nprint(\"Add skew of mutable features\")\nfeatures = pd.merge(features, groupObjects.agg('skew'), how='right', on='object_id', suffixes=['', '_skew'])","fe07b98e":"features = features.fillna(features.mean())","ffe866f0":"features","d37f997d":"features = features.drop('object_id', axis=1)","a7bcd8d7":"targets = train_metadata_df.target.map({6:0, 15:1, 16:2, 42:3, 52:4, 53:5, 62:6, 64:7, 65:8, 67:9, 88:10, 90:11, 92:12, 95:13})","566c70e0":"targets","ddaff1de":"features['target'] = targets","676ea1b8":"import gplearn\nfrom gplearn.genetic import SymbolicTransformer","f030f338":"import keras \nfrom keras.utils import to_categorical","c9ce2300":"function_set = ['add', 'sub', 'mul', 'div',\n                'sqrt', 'log', 'abs', 'neg', 'inv',\n                'max', 'min']\n\ngp = SymbolicTransformer(generations=100, population_size=2000,\n                         hall_of_fame=100, n_components=10,\n                         function_set=function_set,\n                         parsimony_coefficient=0.0005,\n                         max_samples=0.9, verbose=1,\n                         random_state=0, n_jobs=3)\n\ngp.fit(features.drop('target', axis=1).values, targets.values)","4715cb79":"engineered_features = gp._programs\n\nfor i in range(len(engineered_features)):\n    for engineered_feature in engineered_features[i]:\n        if engineered_feature != None:\n            print(engineered_feature)","22787e27":"new_features = pd.DataFrame(gp.transform(features.drop('target', axis=1).values))","73a2b40a":"features = pd.concat([features, new_features], axis=1, join_axes=[features.index])","547f6d8b":"import warnings\nwarnings.filterwarnings('ignore')","d48aa4da":"import seaborn as sns","b8fe9087":"sns.set(style=\"darkgrid\")","a667a5ab":"columns = features.columns\n\nfor column in columns[:-10]:\n    sns.pairplot(x_vars=column, y_vars=column, hue='target', diag_kind='kde', data=features)","71386b8e":"for column in columns[-10:]:\n    sns.pairplot(x_vars=column, y_vars=column, hue='target', diag_kind='kde', data=features)","705ad5f8":"# sns_plot = sns.pairplot(data=features, hue='target', diag_kind='kde')\n# sns_plot.savefig('plasticc_visualizations.png')","b9038c34":"**Original features**","fb221d3d":"**Visualize the probability distributions of each feature for different astronomical source types using seaborn**","05f3e2f3":"**Simple Feature Engineering**","a627eab1":"**Engineer new features using Genetic Programming with the gplearn library.**","0483330b":"**Engineered features**","321c3679":"**Extracting all features from the train meta data and features like minimum, maximum, mean, median, skew etc from the time-series data (train data)**","4bd22e9f":"**The features for which the data distributions for different classes are very different from each other are most likely the more \"important\" features. This \"difference\" between distribution can be measured using Kullback-Leibler Divergence (a distribution similarity metric)**"}}