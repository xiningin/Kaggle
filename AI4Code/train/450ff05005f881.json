{"cell_type":{"fe3b5904":"code","28faf7fe":"code","8e5b008e":"code","1b87c054":"code","b4f2d4a9":"code","8764165a":"code","538b7b28":"code","f1c0793e":"code","f5dfbad9":"code","9219cdd7":"code","4e810d76":"code","00cf5006":"code","17b11707":"code","f47c7b0b":"code","71f25aa3":"code","2d74949c":"code","f5cba347":"code","75f3a29c":"code","8eeb1456":"code","53bf36e7":"code","659382c6":"code","f5e766ad":"code","8494d84d":"code","4151010e":"code","03f8bafb":"code","13433a92":"code","ae595da0":"code","02bce5f4":"code","c79abfd2":"code","e1529b80":"code","9bc91d17":"markdown","b1c4bbe8":"markdown","97e67f6c":"markdown","8ce2ad21":"markdown","3120df64":"markdown","29037858":"markdown","2d44fa2a":"markdown","937b841c":"markdown","01cc1323":"markdown","ad00de34":"markdown","4df09460":"markdown","7fa1f4a6":"markdown","ef94b40b":"markdown","8492da3c":"markdown","1cabb5f3":"markdown","b5593c9a":"markdown","3eff559d":"markdown","b18cccc0":"markdown","1530dce4":"markdown","55103e30":"markdown","29465dba":"markdown","f839e737":"markdown","f1f9b7d7":"markdown","8c342ca8":"markdown","273fe2f2":"markdown","af45b589":"markdown","b094a7ed":"markdown"},"source":{"fe3b5904":"s1 = \"Today is wintry day\"\ns2 = 'Today is wintry day'\ns1\n","28faf7fe":"s2","8e5b008e":"str = ''' This statement will span multiple \nlines, for that we are using \ntriple quotes'''\nstr","1b87c054":"str = \"\"\" This statement will span multiple \nlines, for that we are using \ntriple quotes\"\"\"\nstr","b4f2d4a9":"# We can use one type of quotes inside other type of quotes to mark substring within a string","8764165a":"s1 = \"Welcome to 'Core Python' Learning\"\ns1","538b7b28":"s2 = 'Welcome to \"Core Python\" Learning'\ns2","f1c0793e":"# We can use escape chracters\ns1 = \" Welcome to \\t Core Python \\n Learning\"\ns1","f5dfbad9":"# To nullify the effect of escape charaters make the string raw using 'r' before the string\ns1 = r\"Welcome to \\t Core Python\\t Learning\"\ns1","9219cdd7":"# Length of a string\nstr = \"Today sunshine is available\"\nn = len(str)\nprint(n)","4e810d76":"str = \"Hello World\"\n\n# Forward printing\ni = 0\nn = len(str)\n\nwhile (i<n):\n    print(str[i], end='')\n    i += 1\nprint(\"-----------\") # print cursor into new line\n\n# Reverse printing\ni = -1\nn = - (len(str))\n       \n\nwhile (i>=n):\n    print(str[i], end='')\n    i -= 1","00cf5006":"for i in str:\n    print(i)\n","17b11707":"for i in str[: :]:\n    print(i)","f47c7b0b":"for i in str[::-1]:\n    print(i)","71f25aa3":"str = \"Hello winters\"\n\n# Forward printing\nfor i in str:\n    print(i, end='')\n    \nprint(\"-------\")\n\n# Reverse Printing\nfor i in str[::-1]:\n    print(i, end='')\n    ","2d74949c":"str = \"Hello World\"\nstr[0:11:1] # access string from 0th to 11th character with stepsize = 1","f5cba347":"str[0:11:2] # access string from 0th to 11th character with stepsize = 2 (0th, 2nd, 4th, 6th)","75f3a29c":"str[::2] # access entire string in steps of 2 - same as above","8eeb1456":"str[2:4:1] # access from str[2] to str[3] in steps of 1","53bf36e7":"str[2::] # access string from str[2] to ending","659382c6":"str[:5:] # access string from str[0] to str[3] in steps of 1","f5e766ad":"str = \"Hello World\"\nstr[-5:-1] # access string from str[-5] to str[-2] from left to right in str","8494d84d":"str[-1:-4:-1] # access from str[-1] to str[3] from right to left","4151010e":"str[-1::-1] # retrieve from str[-1] till first element from right to left","03f8bafb":"str = 'Hello World'\nprint(str*2)","13433a92":"s = str[0:2]\ns","ae595da0":"s = str[0:2]*3\ns","02bce5f4":"s1 = \"Hello\"\ns2 = \"World\"\ns3 = s1+ s2\nprint(s3)","c79abfd2":"#str = input(\"Enter main string\")\n#sub = input(\"Enter sub string\")\nstr = \"Hello\"\nsub = \"ell\"\nif sub in str:\n    print(sub + \" is found in main string\")\nelse:\n    print(sub + \" is NOT found in main string\")","e1529b80":"s1 = 'fox'\ns2 = 'for'\nif(s1 == s2):\n    print(\"Both are same\")\nelse:\n    print(\"Both are different\")","9bc91d17":"To get elements in reverse order, use stepsize = -1.","b1c4bbe8":" 0   1   2  3  4  5  6  7  8  9  10\n \n H   e   l  l  o     W  o  r  l  d\n\n-11 -10 -9 -8 -7 -6 -5 -4 -3 -2 -1 \n\nPositive indexing starts with 0 for from first character and index increases towards right.\nNegative indexing starts with -1 from last character and index decreases towards left.\n","97e67f6c":"# Python string Repetition","8ce2ad21":"We can use for loop to access each element of string. Following code takes each element or character in variable i and prints it.","3120df64":"We use relational operators like >, >=, <, <=, == or != operators to compare two strings. They return boolean value either True or False.","29037858":"# Python program to access characters of string using for loop","2d44fa2a":"# Python program to know whether a sub-string exists in main string","937b841c":"# Python Program to access each element of string in forward and reverse order","01cc1323":"Index represents the position number and is written using square brackets. We can refer to individual characters of string by specifying its position with index.For example str[0] refers to first character of string and str[1] refers to 2nd character of string.Thus str[i] refers to ith character of string.Here 'i' is called index because it specifies position number of element in string.\n\n 0   1   2  3  4  5  6  7  8  9  10\n \n H   e   l  l  0     W  o  r  l  d\n\n-11 -10 -9 -8 -7 -6 -5 -4 -3 -2 -1 \n\nPositive indexing starts with 0 for from first character and index increases towards right.\nNegative indexing starts with -1 from last character and index decreases towards left.\n","ad00de34":"It is possible to repeat a part of string obtained by slicing","4df09460":"# Python String Slicing","7fa1f4a6":"# Python string Checking Membership","ef94b40b":" 0   1   2  3  4  5  6  7  8  9  10\n \n H   e   l  l  o     W  o  r  l  d\n\n-11 -10 -9 -8 -7 -6 -5 -4 -3 -2 -1 \n\nPositive indexing starts with 0 for from first character and index increases towards right.\nNegative indexing starts with -1 from last character and index decreases towards left.\n","8492da3c":"# Forward Slicing","1cabb5f3":"A string represents a group of characters. They are needed as most of data in real life is in form of string. For example, the names of people, their addresses, vehicle numbers, house addresses, mobile numbers, bank card numbers etc","b5593c9a":"Repetition operator is denoted by \\'*\\'. \nIt repeats string several times.For  eg, str * n repeats the string n times.","3eff559d":"# Python string Concatenation","b18cccc0":"A slice means a part of string. \nFormat for slicing is stringname[start : stop : stepsize]\nIf start and stop not given it is taken from 0 to n-1 where n = len(string).\nIf stepsize is not given it is taken to be 1.","1530dce4":"To display elements in reverse order, use Slicing operation.\nFormat for slicing is stringname[start : stop : stepsize]\nIf start and stop not given it is taken from 0 to n-1 where n = len(string).\nIf stepsize is not given it is taken to be 1.\nSo following loop is same as previous loop.","55103e30":"# Reverse Slicing","29465dba":"# Creating Python Strings\n\nWe create strings by assigning a group of characters to a variable. The group of characters is enclosed in Single or Double quotes. There is no difference in Single or Double quotes.\n","f839e737":"We can do reverse slicing to retrieve elements from string in reverse order.The 'start' and 'stop' can  be specified as negative numbers.","f1f9b7d7":"We can check if a string or character is member of another string or not using 'in' or 'not in'","8c342ca8":"# Python string comparison","273fe2f2":"# Python string for loop","af45b589":"# Python String Indexing ","b094a7ed":"# Introduction"}}