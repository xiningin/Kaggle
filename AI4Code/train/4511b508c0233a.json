{"cell_type":{"9e4b7fc8":"code","68947bf5":"code","5a0f8259":"code","f41e7150":"code","a9c1e18b":"code","ea4dd137":"code","2b451c05":"code","f88b22f0":"code","be3ebdb0":"code","8ae7a1d6":"code","b4c94ab5":"code","7ac49bca":"markdown"},"source":{"9e4b7fc8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","68947bf5":"heart_data = pd.read_csv(\"\/kaggle\/input\/heart-attack-analysis-prediction-dataset\/heart.csv\")\nheart_data.head()","5a0f8259":"print(\"Dataset has {} rows and {} columns\".format(heart_data.shape[0], heart_data.shape[1]))","f41e7150":"heart_data.isnull().sum()","a9c1e18b":"heart_data.describe()","ea4dd137":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n\nsns.set_style(\"darkgrid\")\nplt.rcParams[\"figure.figsize\"] = (12,5)\nfont = {\"size\"   : 11}\n\nplt.rc('font', **font)\n\nsns.countplot(x=heart_data[\"output\"], data=heart_data);","2b451c05":"fig, axes = plt.subplots(2, 2, figsize=(25, 10))\n\n\nsns.swarmplot(x=\"sex\", y=\"chol\", hue=\"output\", data=heart_data, ax=axes[0][0])\naxes[0][0].set_title(\"Chances of having a heart attack and by cholestorol degree and by sex\");\n\nsns.swarmplot(x=\"cp\", y=\"chol\", hue=\"output\", data=heart_data, ax=axes[0][1])\naxes[0][1].set_title(\"Chances of having a heart attack and by cholestorol degree, and by Chest pain\");\n\nsns.swarmplot(x=\"restecg\", y=\"chol\", hue=\"output\", data=heart_data, ax=axes[1][0])\naxes[1][0].set_title(\"Chances of having a heart attack and by cholestorol degree, and by resting electrocardiographic results\");\n\nsns.swarmplot(x=\"caa\", y=\"chol\", hue=\"output\", data=heart_data, ax=axes[1][1])\naxes[1][1].set_title(\"Chances of having a heart attack and by cholestorol degree, and by number of major vessels\");","f88b22f0":"fig, axes = plt.subplots(2, 2, figsize=(25, 10))\n\n\nsns.swarmplot(x=\"sex\", y=\"trtbps\", hue=\"output\", data=heart_data, ax=axes[0][0])\naxes[0][0].set_title(\"Chances of having a heart attack and by resting blood pressure degree and by sex\");\n\nsns.swarmplot(x=\"cp\", y=\"trtbps\", hue=\"output\", data=heart_data, ax=axes[0][1])\naxes[0][1].set_title(\"Chances of having a heart attack and by resting blood pressure degree, and by Chest pain\");\n\nsns.swarmplot(x=\"restecg\", y=\"trtbps\", hue=\"output\", data=heart_data, ax=axes[1][0])\naxes[1][0].set_title(\"Chances of having a heart attack and by resting blood pressure degree, and by resting electrocardiographic results\");\n\nsns.swarmplot(x=\"caa\", y=\"trtbps\", hue=\"output\", data=heart_data, ax=axes[1][1])\naxes[1][1].set_title(\"Chances of having a heart attack and by cholestorol degree, and by number of major vessels\");","be3ebdb0":"# Most important columns regarding the heart attack\n\nfrom sklearn.feature_selection import f_classif\n\nX = heart_data.drop(\"output\", axis=1)\ny = heart_data[\"output\"]\nanova_f_classif = f_classif(X, y)\n\nanova_f_classif = pd.Series(anova_f_classif[1])\nanova_f_classif.index = X.columns\nanova_f_classif.sort_values(ascending=False).plot.bar(figsize=(20, 6))\nplt.xticks(rotation=45);","8ae7a1d6":"from sklearn.linear_model import LogisticRegression\n\n\nlr = LogisticRegression()\nlr.fit(X_train,  y_train)\ny_lr_pred = lr.predict(X_test)\n\nprint(\"Evaluation of Logistic regression model is {}\".format(f1_score(y_test, y_lr_pred)))","b4c94ab5":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import f1_score\n\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=.8, stratify=y, shuffle=True)\nrf_clf_z = RandomForestClassifier()\n\nrf_clf_z.fit(X_train, y_train)\ny_hat = rf_clf_z.predict(X_test)\n\nprint(\"Evaluation of Random Forest model is {}\".format(f1_score(y_test, y_hat)))","7ac49bca":"#### Might consider Scaling the `chol`, `trtbps` and`thalachh` columns since their standard deviation is a bit high"}}