{"cell_type":{"497fc4bb":"code","06d0109e":"code","3f83d98e":"code","e1d22531":"code","618c6ea3":"code","7ff60610":"code","f90a42c9":"code","f1964db2":"code","1e015dca":"code","ed7263f9":"code","c8476877":"markdown"},"source":{"497fc4bb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","06d0109e":"df = pd.read_csv('\/kaggle\/input\/omicron-covid19-variant-daily-cases\/covid-variants.csv')","3f83d98e":"# looking at the dataset\ndf","e1d22531":"df.info() # no missing values, checking the datatype","618c6ea3":"# changing datatype date rom object into date\ndf['date'] = pd.to_datetime(df['date']).dt.normalize()","7ff60610":"df.info()","f90a42c9":"df.variant.value_counts()","f1964db2":"# extracting only omicron variant\ndf = df[df['variant'] == 'Omicron']\ndf","1e015dca":"# plotting the cases line\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.figure(figsize=(15,10))\nsns.lineplot(data=df, x='date', y='num_sequences_total')\nplt.title('Number of cases per day', fontsize = 20)\nplt.xlabel('Date', fontsize = 15)\nplt.ylabel('Number', fontsize = 15)","ed7263f9":"# countries with the highest infection rate\nrank = df[['location','num_sequences_total']]\nrank = rank.groupby(['location']).aggregate({'num_sequences_total':'sum'}, inplace=True)\nrank = rank.sort_values(by='num_sequences_total', ascending = False)\nrank","c8476877":"### Importing dataset"}}