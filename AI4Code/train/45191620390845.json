{"cell_type":{"af2d7931":"code","593d2b06":"code","cfc3eefc":"code","c49cb355":"code","5f0895e7":"code","fd4f0fd8":"code","e9aa6e03":"code","df1d2a5d":"code","98f733a8":"code","ef857377":"code","8d8785f8":"code","22650e38":"code","515a4d4f":"code","b9ed6f4d":"code","0ddeebe1":"code","6932123f":"code","e164557d":"markdown","8febaf86":"markdown","2fc21ba4":"markdown","98ab5494":"markdown","b1dd4b1c":"markdown","50506943":"markdown","d5ac1eb5":"markdown","534b62b5":"markdown","4357d946":"markdown","16a59fa2":"markdown","f197f484":"markdown","0567f405":"markdown","aa890fac":"markdown","a73e60f2":"markdown","bbec1b89":"markdown","1971c680":"markdown","776267d5":"markdown","7cac3307":"markdown","1f483c6c":"markdown"},"source":{"af2d7931":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport time\n\ndf = pd.read_csv(\"\/kaggle\/input\/515k-hotel-reviews-data-in-europe\/Hotel_Reviews.csv\")\n\ndf.head(5)","593d2b06":"df.describe()","cfc3eefc":"plt.figure(figsize=(15,10))\nsns.heatmap(df.isnull())\nplt.title(\"Missing values?\", fontsize = 15)\nplt.show()","c49cb355":"nb_missing = df[df[\"lat\"].isnull() & df[\"lng\"].isnull()].shape[0]\nprint(f\"Number of reviews with no latitude or longitude: {nb_missing}\\nTotal number of reviews: {df.shape[0]}\")","5f0895e7":"print(\"Number of hotels:\",df['Hotel_Name'].nunique())","fd4f0fd8":"# Create a column with the rounded reviews\ndf[\"Reviewer_Score_Round\"] = df[\"Reviewer_Score\"].apply(lambda x: int(round(x)))\n\n# Get the number of reviews with which scores\nreviews_dist = df[\"Reviewer_Score_Round\"].value_counts().sort_index()\nbar = reviews_dist.plot.bar(figsize =(10,7))\nplt.title(\"Distribution of reviews\", fontsize = 18)\nplt.axvline(df[\"Reviewer_Score\"].mean()-2, 0 ,1, color = \"grey\", lw = 3)\nplt.text(6, -15000, \"average\", fontsize = 14, color = \"grey\")\nplt.ylabel(\"Count\", fontsize = 18)\nbar.tick_params(labelsize=16)\n\n# Remove the column \"Reviewer_Score_Round\"\ndf.drop(\"Reviewer_Score_Round\", axis = 1, inplace = True)","e9aa6e03":"df_corr = df.corr()\nplt.figure(figsize=(15,10))\nsns.heatmap(df_corr, annot = True)\nplt.title(\"Correlation between the variables\", fontsize = 22)\nplt.show()","df1d2a5d":"# Get the colors for the graphic\ncolors = []\ndim = df_corr.shape[0]\nfor i in range(dim):\n    r = i * 1\/dim\n    colors.append((0.3,r,0.3))\n\n# Transform each value in a positive value, because what interesses us\n# isn't the direction of the correlation but the absolute correlation\ndf_corr[\"Reviewer_Score\"].apply(lambda x: abs(x)).sort_values().plot.barh(color = colors)\nplt.title(\"Correlation with Reviewer_Score\", fontsize = 16)\nplt.show()","98f733a8":"# Group the data by nationality\ngroup_nationality = df.pivot_table(values = \"Reviewer_Score\", \n                                   index = \"Reviewer_Nationality\", \n                                   aggfunc=[\"mean\",\"count\"])\ngroup_nationality.columns = [\"mean_review\",\"review_count\"]","ef857377":"# Keep only the nationalities with at least 3000 reviews given\nreviews_count=group_nationality[group_nationality[\"review_count\"]>3000][\"review_count\"].sort_values(ascending = False)\n\n# Get the colors for the graphic\ncolors = []\ndim = reviews_count.shape[0]\nfor i in range(dim):\n    r = i * 1\/dim\n    colors.append((0.3,1-r,0.3))\n\n# Display the result\nreviews_count.plot.barh(figsize=(10,10), color = colors)\nplt.title(\"Number of reviews given by nationality\", fontsize = 18)\nplt.ylabel(\"\")\nplt.show()","8d8785f8":"# Keep only the nationalities with at least 1000 reviews\ngroup_nationality = group_nationality[group_nationality[\"review_count\"] > 1000].sort_values(by = \"mean_review\", ascending = False)\n\n# Get the colors for the graphic\ncolors = []\ndim = group_nationality.shape[0]\nfor i in range(dim):\n    r = i * 1\/dim\n    colors.append((0.3,1-r,0.3))\n\n# Display the result\ngroup_nationality[\"mean_review\"].plot.barh(figsize = (10,20), color = colors)\nplt.title(\"Who gives the worst review scores to hotels?\", fontsize = 17)\nplt.axvline(df[\"Reviewer_Score\"].mean(), 0 ,1, color = \"grey\", lw = 3)\nplt.text(8, 55, \"average\", fontsize = 14, c = \"grey\")\nplt.text(8, -2, \"average\", fontsize = 14, c = \"grey\")\nplt.xlabel(\"Average review score given\", fontsize = 18)\nplt.ylabel(\"\")\nplt.show()","22650e38":"# Convert the reviews to lower and delete leading\/trailing space\ndf[\"Negative_Review\"] = df[\"Negative_Review\"].str.lower().str.strip()\ndf[\"Positive_Review\"] = df[\"Positive_Review\"].str.lower().str.strip()","515a4d4f":"from nltk.sentiment.vader import SentimentIntensityAnalyzer\nsent_analyzer = SentimentIntensityAnalyzer()\n\nrev1 = \"The hotel was very good, I love it!\"\nrev2 = \"It was just horrible, the worst ever.\"\n\nprint(f\"review 1:\\n{rev1}\\nScore: {sent_analyzer.polarity_scores(rev1)}\")\n\nprint(f\"\\nreview 2:\\n{rev2}\\nScore: {sent_analyzer.polarity_scores(rev2)}\")","b9ed6f4d":"# Take only a part of the data to speed up\n# df = df[:50000].copy()\n\nstart_time = time.time()\npos = df[\"Positive_Review\"].apply(lambda x: abs(sent_analyzer.polarity_scores(x)[\"compound\"]))\nneg = df[\"Negative_Review\"].apply(lambda x: -abs(sent_analyzer.polarity_scores(x)[\"compound\"]))\n\ndf[\"sentiment_score\"] = pos + neg\ndf[\"polarity_pos\"] = pos\ndf[\"polarity_neg\"] = neg\n\ntime_model = time.time() - start_time\nprint(f\"Execution time: {int(time_model)} seconds\")","0ddeebe1":"df_corr = df.corr()\n\n# Get the colors for the graphic\ncolors = []\ndim = df_corr.shape[0]\nfor i in range(dim):\n    r = i * 1\/dim\n    colors.append((0.3,r,0.3))\n\n# Transform each value in a positive value, because what interesses us\n# isn't the direction of the correlation but the absolute correlation\ndf_corr[\"Reviewer_Score\"].apply(lambda x: abs(x)).sort_values().plot.barh(color = colors)\nplt.title(\"Correlation with Reviewer_Score\", fontsize = 16)\nplt.show()","6932123f":"# Columns to use to train the models\n# Only the columns with the highest correlation were chosen\ncols = ['Review_Total_Negative_Word_Counts',\n        'polarity_pos',\n        'Average_Score',\n        'Review_Total_Positive_Word_Counts']\n        \nX = df[cols].values\ny = df[\"Reviewer_Score\"].values\n\n# Use StandardScaler to scale the data\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX = scaler.fit_transform(X)\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\nfrom sklearn.metrics import mean_squared_error\n\ndef plot_res(y_test,pred, model = \"LinearRegression\"):\n# Violinplots with the distribution of real scores and predicted scores\n\n    MSRE = round((mean_squared_error(y_test,pred))**0.5,3)\n    fig, axes = plt.subplots(nrows=1, ncols=2, figsize = (12,6))\n    \n    sns.violinplot(y_test, ax = axes[0])\n    axes[0].set_title(\"Distribution of\\n scores\")\n    axes[0].set_xlim(0,11)\n    \n    sns.violinplot(pred, ax = axes[1])\n    title = f\"Predictions of scores with {model}\\nMSRE:{MSRE}\"\n    axes[1].set_title(title)\n    axes[1].set_xlim(0,11)\n    plt.show()\n    \n# LinearRegression\nfrom sklearn.linear_model import LinearRegression\n\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\npred = model.predict(X_test)\nplot_res(y_test,pred, model = \"LinearRegression\")\n\n# GradientBoostingRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nmodel = GradientBoostingRegressor()\nmodel.fit(X_train, y_train)\npred = model.predict(X_test)\nplot_res(y_test,pred, model = \"GradientBoostingRegressor\")\n\n# RandomForestRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nmodel = RandomForestRegressor()\nmodel.fit(X_train, y_train)\npred = model.predict(X_test)\nplot_res(y_test,pred, model = \"RandomForestRegressor\")","e164557d":"# 3. Prediction of the review score with supervised learning<a class=\"anchor\" id=\"3\"><\/a>\nIn this part we will train different models to predict the scores of the reviews based on the others variables.\nBefore we can build a model, some transformation is needed:\n","8febaf86":"Beside of a small quantity of missing values for the latitude and longitude, the dataset doesn't have missing values.","2fc21ba4":"Considering the number of variables in the representation of the correlation, we will only represent the correlation with reviewer_score.","98ab5494":"<strong> Location of the hotels:<\/strong>\n<img src=\"https:\/\/i.imgur.com\/DWAh8Om.png\">","b1dd4b1c":"# 2. Explorative analysis<a class=\"anchor\" id=\"2\"><\/a>","50506943":"Most of the reviews are positives, therefore the average review score is 8.4\/10. It is not similar to a normal distribution like we might expect. ","d5ac1eb5":"**Thank you and good night!**\n\n<img src=\"https:\/\/i.imgur.com\/r1y0aA3.png\">","534b62b5":"In average, the English speaking countries give the best reviews scores with USA as number 1.","4357d946":"The GradientBoostingRegressor gives the best result for the prediction\n","16a59fa2":"The compound is the general positivity of a text. Above 0, it is positive and under 0, it is negative. This can be used to determine if a text is positive or negative.\n\nCreate two columns, one column for the polarity_scores of the positive reviews and one column for the negative ones. It might happen that the polarity_scores isn't accurate and to avoid issues in the model, the polarity_score will be only >= 0 for the positive reviews and <= 0 for the negative reviews.","f197f484":"Most of the reviews were made by a few countries.","0567f405":"# Table of contents\n\n[<h3>1. Presentation of the data<\/h3>](#1)\n\n[<h3>2. Explorative analysis<\/h3>](#2)\n\n[<h3>3. Prediction of the review score with supervised learning<\/h3>](#3)\n\n","aa890fac":"Each reviews text will be analysed with nltk. SentimentIntensityAnalyzer makes it possible to see if a text is positive or negative. For example:","a73e60f2":"## Mean review score depending on the reviewer nationality","bbec1b89":"# Gradient Boosting to predict hotel's reviews","1971c680":"# 1. Presentation of the data<a class=\"anchor\" id=\"1\"><\/a>\n\n<strong><u>Data Context:<\/u><\/strong><br>\nThis dataset contains 515,000 customer reviews and scoring of 1493 luxury hotels across Europe. Meanwhile, the geographical location of hotels are also provided for further analysis.\n\n<strong><u>Data Content:<\/u><\/strong>\nThe csv file contains 17 fields. The description of each field is as below:\n<br>- <strong>Hotel_Address:<\/strong>  Address of hotel.\n<br><br>- <strong>Review_Date:<\/strong>  Date when reviewer posted the corresponding review.\n<br><br>- <strong>Average_Score:<\/strong>  Average Score of the hotel, calculated based on the latest comment in the last year.\n<br><br>- <strong>Hotel_Name:<\/strong>  Name of Hotel\n<br><br>- <strong>Reviewer_Nationality:<\/strong>  Nationality of Reviewer\n<br><br>- <strong>Negative_Review:<\/strong>  Negative Review the reviewer gave to the hotel. If the reviewer does not give the negative review, then it should be: 'No Negative'\n<br><br>- <strong>Review_Total_Negative_Word_Counts:<\/strong>  Total number of words in the negative review.\n<br><br>- <strong>Positive_Review:<\/strong>  Positive Review the reviewer gave to the hotel. If the reviewer does not give the negative review, then it should be: 'No Positive'\n<br><br>- <strong>Review_Total_Positive_Word_Counts:<\/strong>  Total number of words in the positive review.\n<br><br>- <strong>Reviewer_Score:<\/strong>  Score the reviewer has given to the hotel, based on his\/her experience\n<br><br>- <strong>Total_Number_of_Reviews_Reviewer_Has_Given:<\/strong>  Number of Reviews the reviewers has given in the past.\n<br><br>- <strong>Total_Number_of_Reviews:<\/strong>  Total number of valid reviews the hotel has.\n<br><br>- <strong>Tags:<\/strong>  Tags reviewer gave the hotel.\n<br><br>- <strong>days_since_review:<\/strong>  Duration between the review date and scrape date.\n<br><br>- <strong>Additional_Number_of_Scoring:<\/strong>  There are also some guests who just made a scoring on the service rather than a review. This number indicates how many valid scores without review in there.\n<br><br>- <strong>lat:<\/strong>  Latitude of the hotel\n<br><br>- <strong>lng:<\/strong>  longitude of the hotel","776267d5":"The variable which influences the most the reviewer score is the length of the negative review. It is logical, because if someone really didn't like a hotel, he might write a lot about it.","7cac3307":"<img src=\"https:\/\/i.imgur.com\/gK2gwpD.jpg\">","1f483c6c":"## Correlation:\nLet's see the correlation between the variables."}}