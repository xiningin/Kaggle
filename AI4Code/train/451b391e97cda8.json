{"cell_type":{"b744c70f":"code","66204e33":"code","fc304f0e":"code","e8144cdf":"code","33d94298":"code","35ebb1dc":"code","a5848cb9":"code","60e76d4e":"code","ab35ff97":"code","e092379d":"code","c25e60d7":"code","61f46f2e":"code","5e8414bf":"code","a4b47b14":"code","52373ab7":"code","4232063b":"code","af54f769":"code","8848ab8c":"markdown","761cef3b":"markdown","29c91b9d":"markdown","f93686c0":"markdown","c707946f":"markdown","f2afe666":"markdown","79232d88":"markdown"},"source":{"b744c70f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","66204e33":"df_train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","fc304f0e":"df_train.drop(['Name','Ticket'], axis = 1,inplace=True)\ndf_test.drop(['Name','Ticket'], axis = 1,inplace=True)\n\ndf_train['Age'].fillna(value=29,inplace=True)\ndf_test['Age'].fillna(value=29,inplace=True)\n\ndf_train['Embarked'].fillna(value='S',inplace=True)\t\ndf_test['Embarked'].fillna(value='S',inplace=True)\n\ndf_train.Cabin.fillna(value='N',inplace=True)\ndf_train.Cabin = df_train.Cabin.str[:1]\n\ndf_test.Cabin.fillna(value='N',inplace=True)\ndf_test.Cabin = df_train.Cabin.str[:1]\n\ndf_test.Fare.fillna(value=32.2,inplace=True)\n\ndf_train['Pclass'] = df_train['Pclass'].astype(str)\t\ndf_test['Pclass'] = df_test['Pclass'].astype(str)\n\nint_col = ['Age', 'SibSp', 'Parch','Fare']\n\ndf_mean = df_train[int_col].mean(axis=0)\ndf_std = df_train[int_col].std(axis=0)\n\ndf_test[int_col] = (df_test[int_col] - df_mean) \/ df_std\ndf_train[int_col] = (df_train[int_col] - df_mean) \/ df_std\n\ndf_train = pd.get_dummies(df_train)\ndf_test = pd.get_dummies(df_test)","e8144cdf":"col_X = ['Age', 'SibSp', 'Parch', 'Fare', 'Pclass_1',\n       'Pclass_2', 'Pclass_3', 'Sex_female', 'Sex_male', 'Cabin_A', 'Cabin_B',\n       'Cabin_C', 'Cabin_D', 'Cabin_E', 'Cabin_F', 'Cabin_G', 'Cabin_N',\n       'Cabin_T', 'Embarked_C', 'Embarked_Q', 'Embarked_S']\ncol_y = ['Survived']","33d94298":"from sklearn.model_selection import train_test_split\nfrom tensorflow.keras import models\nfrom tensorflow.keras import layers","35ebb1dc":"mo_1 = models.Sequential()\nmo_1.add(layers.Dense(16, activation='relu', input_shape=(21,)))\nmo_1.add(layers.Dense(4, activation='relu'))\nmo_1.add(layers.Dense(1, activation='sigmoid'))\n\nmo_1.compile(optimizer='rmsprop',          # \u4f18\u5316\u5668\n              loss='binary_crossentropy',   # \u635f\u5931\u51fd\u6570\n              metrics=['binary_accuracy'])         # \u8bc4\u4f30\u51fd\u6570   binary_accuracy\n\nhistory_1 = mo_1.fit(df_train[col_X],    # \u8bad\u7ec3\u96c6X\n                    df_train[col_y],    # \u8bad\u7ec3\u6807\u7b7e\n                    epochs=60,          # \u8fed\u4ee3\u6b21\u6570\n                    batch_size=32,     # \u68af\u5ea6\u4e0b\u964d\u7ec4\n                    verbose=0) # \u9a8c\u8bc1\u96c6","a5848cb9":"df_test['kr']  = mo_1.predict( df_test[col_X])\ndf_test.loc[df_test['kr']>=0.5,'kr'] = 1\ndf_test.loc[df_test['kr']< 0.5,'kr'] = 0\ndf_test['kr'] = df_test['kr'].astype('int')","60e76d4e":"from sklearn.svm import NuSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.gaussian_process import GaussianProcessClassifier\nfrom sklearn.naive_bayes import BernoulliNB","ab35ff97":"mode = RandomForestClassifier(criterion='entropy',n_estimators=256,max_depth=10,min_samples_split=32,min_samples_leaf=1) # v3\nmode.fit( df_train[col_X],df_train[col_y].values.ravel() )\ndf_test['RFC'] = mode.predict( df_test[col_X] )","e092379d":"mode = NuSVC(kernel='poly',degree=3,nu=0.6)\nmode.fit( df_train[col_X],df_train[col_y].values.ravel() )\ndf_test['NuSVC'] = mode.predict( df_test[col_X] )","c25e60d7":"mode = BernoulliNB()\nmode.fit( df_train[col_X],df_train[col_y].values.ravel() )\ndf_test['BNB'] = mode.predict( df_test[col_X] )","61f46f2e":"mode = GaussianProcessClassifier()\nmode.fit( df_train[col_X],df_train[col_y].values.ravel() )\ndf_test['GPC'] = mode.predict( df_test[col_X] )","5e8414bf":"df_test.columns","a4b47b14":"df_test['ss'] = df_test['kr'] +df_test['RFC'] +df_test['NuSVC'] +df_test['BNB'] +df_test['GPC']","52373ab7":"df_test['Survived'] = 0\ndf_test.loc[df_test['ss']>=3 ,'Survived'] = 1","4232063b":"df_test.ss.value_counts()","af54f769":"df_test[ ['PassengerId','Survived'] ].to_csv('submission.csv',index=False)","8848ab8c":"# \u968f\u673a\u68ee\u6797","761cef3b":"# \u6570\u636e\u9884\u5904\u7406","29c91b9d":"# BernoulliNB","f93686c0":"# GaussianProcessClassifier","c707946f":"# kears","f2afe666":"# NuSVC","79232d88":"# \u7efc\u5408\u6295\u7968"}}