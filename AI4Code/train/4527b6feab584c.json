{"cell_type":{"96b9e126":"code","8dab6498":"code","88866dd1":"code","430f00ad":"code","0326f17c":"code","c5a79d07":"code","811d7f41":"code","376d74a1":"code","3d524cdc":"code","094104b8":"code","483bce42":"code","46188476":"code","4bd7aa9e":"code","7288df36":"code","002abdbe":"code","3cfa6631":"code","1dc0eca2":"code","2aa80e24":"code","cf0df23e":"code","bcaceeec":"code","b3fceda0":"code","cac785b1":"code","ea43de68":"code","75951b4b":"code","6cab0437":"code","2f04668d":"code","5d14683f":"code","b8970c09":"code","67abd54d":"code","62af7ded":"code","56007732":"code","6772bd85":"code","3a3d3154":"code","fb0c2a6f":"code","44b20732":"code","494b99ab":"code","881f0484":"code","4d594ba8":"code","b983c687":"code","dbf4fa97":"code","e15e4de5":"code","135f0b96":"code","7ec85270":"code","58f54ac1":"code","67cb7102":"code","640733ef":"code","8418e01f":"code","f5465a09":"code","a8a8d1a8":"code","d82736d6":"code","d4b3b65d":"code","03a46926":"code","31a2d68d":"code","480f76d3":"code","54397f18":"code","757a3be3":"code","df4b0b2b":"code","909f46d2":"code","4ad59504":"code","cd63d165":"code","8e1903a2":"code","a59f91ce":"code","e585e7ef":"code","ea5be56d":"code","c6b7994a":"code","a4502bd1":"code","3d6eb5f2":"code","8fdf31cc":"code","e0b0aa83":"code","2b720d76":"code","71f90e99":"code","f3ee1a8f":"code","488b3fa7":"code","36742d9d":"code","1fd0a8c9":"code","6ab13c11":"code","50345550":"code","900ff9c8":"code","e0178005":"code","e26db32b":"code","ad1a7cc7":"code","e9a6f34e":"code","72d53fdd":"code","0a9e7f22":"code","52e298b7":"code","2426bbe2":"code","70ae4979":"code","f9215bc5":"code","e3227857":"code","0411192e":"code","563b5feb":"code","627649c6":"code","add77609":"code","db193f77":"code","0a8bc2dd":"code","b83eb3e5":"code","118810cc":"code","e887c593":"code","51c4e6b0":"code","b5f2b5c2":"code","85b65097":"code","b477b257":"code","929d4b04":"code","2e8f3371":"code","cc65727a":"code","8499a7e9":"markdown","87ffaf1a":"markdown","9c256398":"markdown","a4fe97cc":"markdown","3a1ce011":"markdown","101ec58b":"markdown","4cb4bacc":"markdown","a45949ad":"markdown","28ab4a55":"markdown","2dad55b2":"markdown","dc27bcdd":"markdown","96f385c6":"markdown","2ea61c80":"markdown","fba63661":"markdown","e2433a96":"markdown","2984e3a4":"markdown","eaf9f5f1":"markdown","61f104cb":"markdown","44b420b0":"markdown","dc2edb96":"markdown","a32eceae":"markdown","d2d4d164":"markdown","910362c2":"markdown","13152032":"markdown","8dcaf3b6":"markdown","ddfa2395":"markdown","0fb2e7db":"markdown","71f21ea0":"markdown","5b736329":"markdown","f79c4d3a":"markdown","715298bf":"markdown","d336ae30":"markdown","7a250c04":"markdown","a8926986":"markdown","d9a9d978":"markdown","bf60a480":"markdown","afce2741":"markdown","f4eb0f0d":"markdown","4f437e39":"markdown","8e13b6ff":"markdown","79fa56f4":"markdown","9e5831a8":"markdown","e8056ffd":"markdown","a29a930f":"markdown","a3a928ae":"markdown","3b188121":"markdown","0652b94d":"markdown","c4684792":"markdown","a1560d38":"markdown","2cd785a3":"markdown","10f99192":"markdown","58588a86":"markdown","8f948031":"markdown","e96081b7":"markdown","76fd33b9":"markdown","fe6c46f7":"markdown","b7d95142":"markdown","b63c24eb":"markdown","0b4c5587":"markdown","1206cd37":"markdown","a995cb37":"markdown","8058cca5":"markdown","d2f9cc26":"markdown","f05f9b30":"markdown","4765da09":"markdown","267d35bc":"markdown","8652552c":"markdown","42e7b8fb":"markdown","b7b996af":"markdown","3fe31f71":"markdown","ecf62a82":"markdown","c48cfeb2":"markdown","2eb2ae73":"markdown","d4040d3a":"markdown","95fe6608":"markdown","c4e08d1b":"markdown","62c2a434":"markdown","07e57f50":"markdown","21c9ea35":"markdown","c41c4268":"markdown","9212edb7":"markdown","cfb7b524":"markdown","40050f6d":"markdown","517057c6":"markdown","84c8c3d0":"markdown","5f117238":"markdown","b7d0b8ef":"markdown","7468f4aa":"markdown","ea25f4c1":"markdown","96b516a4":"markdown","4ccff2fc":"markdown","a0ceb0a1":"markdown","99ab9dfb":"markdown","7d925fcf":"markdown","7913193c":"markdown","a5d1943e":"markdown","cc20da2d":"markdown","d1c74f30":"markdown","2a37a0c2":"markdown","65463d60":"markdown","94abf09b":"markdown","ce3e24c0":"markdown","e5acee60":"markdown","77861c06":"markdown","6cd6ad61":"markdown","ad48b122":"markdown"},"source":{"96b9e126":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.style.use(\"seaborn\")\nsns.set(font_scale=1.5)\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n%matplotlib inline","8dab6498":"# \uceec\ub7fc\ub9f5\ncmaps = ['Accent', 'Accent_r', 'Blues', 'Blues_r', 'BrBG', 'BrBG_r', 'BuGn', 'BuGn_r', 'BuPu', 'BuPu_r', 'CMRmap', 'CMRmap_r', 'Dark2', 'Dark2_r', 'GnBu', 'GnBu_r', 'Greens', 'Greens_r', 'Greys', 'Greys_r', 'OrRd', 'OrRd_r', 'Oranges', 'Oranges_r', 'PRGn', 'PRGn_r', 'Paired', 'Paired_r', 'Pastel1', 'Pastel1_r', 'Pastel2', 'Pastel2_r', 'PiYG', 'PiYG_r', 'PuBu', 'PuBuGn', 'PuBuGn_r', 'PuBu_r', 'PuOr', 'PuOr_r', 'PuRd', 'PuRd_r', 'Purples', 'Purples_r', 'RdBu', 'RdBu_r', 'RdGy', 'RdGy_r', 'RdPu', 'RdPu_r', 'RdYlBu', 'RdYlBu_r', 'RdYlGn', 'RdYlGn_r', 'Reds', 'Reds_r', 'Set1', 'Set1_r', 'Set2', 'Set2_r', 'Set3', 'Set3_r', 'Spectral', 'Spectral_r', 'Wistia', 'Wistia_r', 'YlGn', 'YlGnBu', 'YlGnBu_r', 'YlGn_r', 'YlOrBr', 'YlOrBr_r', 'YlOrRd', 'YlOrRd_r', 'afmhot', 'afmhot_r', 'autumn', 'autumn_r', 'binary', 'binary_r', 'bone', 'bone_r', 'brg', 'brg_r', 'bwr', 'bwr_r', 'cividis', 'cividis_r', 'cool', 'cool_r', 'coolwarm', 'coolwarm_r', 'copper', 'copper_r', 'crest', 'crest_r', 'cubehelix', 'cubehelix_r', 'flag', 'flag_r', 'flare', 'flare_r', 'gist_earth', 'gist_earth_r', 'gist_gray', 'gist_gray_r', 'gist_heat', 'gist_heat_r', 'gist_ncar', 'gist_ncar_r', 'gist_rainbow', 'gist_rainbow_r', 'gist_stern', 'gist_stern_r', 'gist_yarg', 'gist_yarg_r', 'gnuplot', 'gnuplot2', 'gnuplot2_r', 'gnuplot_r', 'gray', 'gray_r', 'hot', 'hot_r', 'hsv', 'hsv_r', 'icefire', 'icefire_r', 'inferno', 'inferno_r', 'jet', 'jet_r', 'magma', 'magma_r', 'mako', 'mako_r', 'nipy_spectral', 'nipy_spectral_r', 'ocean', 'ocean_r', 'pink', 'pink_r', 'plasma', 'plasma_r', 'prism', 'prism_r', 'rainbow', 'rainbow_r', 'rocket', 'rocket_r', 'seismic', 'seismic_r', 'spring', 'spring_r', 'summer', 'summer_r', 'tab10', 'tab10_r', 'tab20', 'tab20_r', 'tab20b', 'tab20b_r', 'tab20c', 'tab20c_r', 'terrain', 'terrain_r', 'turbo', 'turbo_r', 'twilight', 'twilight_r', 'twilight_shifted', 'twilight_shifted_r', 'viridis', 'viridis_r', 'vlag', 'vlag_r', 'winter', 'winter_r']","88866dd1":"def dataset_info():\n    \"\"\"\n    \ub370\uc774\ud130\uc14b \ub85c\ub4dc\n    \ub110 \ub370\uc774\ud130 \ud655\uc778    \n    \"\"\"\n    path = \"..\/input\/titanic\/\"\n    data = pd.read_csv(path+\"train.csv\")\n    \n    print(\"Descriptive Statistics : \\n\")\n    display(data.info())\n    print(\"\\n\")\n    display(data.head(n=3))    \n    \n    print(\"Null Data confirmation : \\n\")\n    display(data.isnull().sum())  # \ub110 \ub370\uc774\ud130 \ud655\uc778\n    return data\n\ndf_train = dataset_info()","430f00ad":"fig, ax = plt.subplots(nrows=1, ncols=3, figsize=(20, 8))\nsurvivor_cnt = df_train[\"Survived\"].value_counts()\n\nsurvivor_cnt.plot.pie(explode = [0, 0.1], autopct= '%1.1f%%', ax=ax[0], shadow=True)\nax[0].set_title(\"Survived\")\nax[0].set_ylabel(\"\")\n\nsns.countplot(x=\"Survived\", data = df_train, hue=\"Sex\", ax = ax[1])\nax[1].set_title(\"Survived depending on Sex\")\n\nsns.countplot(x=\"Survived\", data = df_train, ax=ax[2])\nax[2].set_title(\"Total nbr of Survivor or Deceased\")\n\nplt.subplots_adjust(hspace=0.5, wspace=0.25)\nplt.show()","0326f17c":"def visualize_survivor(df_train):\n    \"\"\"\n    \uc0dd\uc874\uc790 \ud655\uc778\n    1)bar chart\n    2)countplot\n    \ub450\uac1c\uc758 \ubc29\ubc95\uc73c\ub85c \uc2dc\uac01\ud654\n    \"\"\"\n    fig, ax = plt.subplots(nrows=1, ncols=3, figsize=(25, 8))\n    survivor_cnt = df_train['Survived'].value_counts()\n    \n    survivor_cnt.plot.pie(explode=[0, 0.1], autopct='%1.1f%%', ax=ax[0], shadow=True)\n    ax[0].set_title(\"Survived\")\n    ax[0].set_ylabel('')\n    \n    sns.countplot(x=\"Survived\", data = df_train, hue=\"Sex\", ax = ax[1])\n    ax[1].set_title(\"Survived depending on Sex\")\n    \n    sns.countplot(x=\"Survived\", data = df_train, ax=ax[2])\n    ax[2].set_title(\"Total nbr of Survivor or Deceased\")\n    \n    plt.subplots_adjust(hspace=0.5, wspace=0.25)\n    plt.show()\n\n# \uc218\ud589\nvisualize_survivor(df_train)","c5a79d07":"# \ub0a8\uc5ec\uc758 \uc0dd\uc874\uc790 \npd.DataFrame(df_train.groupby(['Sex','Survived'])['Survived'].count())","811d7f41":"fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(18, 8))\n\ndf_train[[\"Sex\", \"Survived\"]].groupby(\"Sex\").mean().plot.bar(ax= ax[0])\nax[0].set_title(\"Sex Survival Ratio\")\nax[0].set_ylabel(\"Survival Ratio\")\n\nsns.countplot(x = \"Sex\", hue=\"Survived\", data = df_train, ax = ax[1])\nax[1].set_title(\"{0} : {1} v.s Dead\".format(\"Sex\", \"Survived\"))\nplt.show()","376d74a1":"def visualize_survivor_ratio(tCols, gCols,df):\n    \"\"\"\n    tCols - \ubcf4\uace0\uc790 \ud558\ub294 \ud53c\ucc98\n    gCols - Groupby \ud53c\ucc98\n    df - \ub300\uc0c1\uc774 \ub418\ub294 \ub370\uc774\ud130\uc14b\n    \uae30\ub2a5 : \ubc14\ucc28\ud2b8\uc640 countplot\ucc28\ub85c \ubcf4\uc5ec\uc90c\n    \"\"\"\n    fig, ax = plt.subplots(1, 2, figsize=(18, 8))\n    df[tCols].groupby(gCols).mean().plot.bar(ax = ax[0])\n    \n    sns.countplot(x= tCols[0], hue=tCols[1], data = df, ax=ax[1])\n    ax[1].set_title('{0} : {1} v.s Dead'.format(tCols[0], tCols[1]))\n    plt.show()   \n\n# \uc131\ubcc4 \uc0dd\uc874\uc790 \uc218     \nvisualize_survivor_ratio(['Sex','Survived'], ['Sex'],df_train)    ","3d524cdc":"#transpose\npd.crosstab(index = df_train[\"Pclass\"], columns=df_train[\"Survived\"], margins=True).T.style.background_gradient(cmap=\"winter_r\")","094104b8":"pd.crosstab(index = df_train[\"Pclass\"], columns=df_train[\"Survived\"]).style.background_gradient(cmap=\"summer_r\")","483bce42":"def visualize_crosstab(index_col: list, col_name = list, transPose=False):\n    \"\"\"\n    index_col : \uc778\ub371\uc2a4\uc758 \uceec\ub7fc\uc744 \ub9ac\uc2a4\ud2b8 \ud3ec\ub9f7\uc73c\ub85c \ubc1b\uc74c\n    col_name  : \uceec\ub7fc\uc774 \ub420 \ub300\uc0c1\uc744 \ub9ac\uc2a4\ud2b8 \ud3ec\ub9f7\uc73c\ub85c \ubc1b\uc74c\n    \uae30\ub2a5       : \ub450\uac1c \uc774\uc0c1\uc758 \uc778\uc790\ub97c \ubc1b\uc544\uc11c \ube48\ub3c4\uc218\ub97c \ud06c\ub85c\uc2a4\ud0ed\uc73c\ub85c \ubcf4\uc5ec\uc900\ub2e4(crosstab\uc758 return type\uc740 dataFrame\uc784\uc744 \uc720\uc758)\n    \"\"\"\n    crosstab_df = pd.DataFrame()\n    \n    if transPose:\n        crosstab_df = pd.crosstab(index = index_col, columns = col_name, margins=True).T.style.background_gradient(cmap=\"summer_r\")\n    else:\n        crosstab_df = pd.crosstab(index = index_col, columns =col_name, margins=True).style.background_gradient(cmap=\"summer_r\")\n    return crosstab_df\n\n# \uac1d\uc2e4\ub4f1\uae09\uc5d0 \ub530\ub978 \uc0dd\uc874\uc790 \uc218 \ube44\uad50\npclass_survived = visualize_crosstab([df_train['Pclass']], [df_train['Survived']])\npclass_survived","46188476":"pclass_survived = visualize_crosstab([df_train['Pclass']], [df_train['Survived']], True)\npclass_survived","4bd7aa9e":"fig, ax = plt.subplots(nrows = 1, ncols=2, figsize=(18, 8))\n# \uac1d\uc2e4\ub4f1\uae09\ubcc4 \uc2b9\uac1d\uc218\ndf_train[\"Pclass\"].value_counts().plot.bar(color = ['#CD7F32','#FFDF00','#D3D3D3'], ax = ax[0])\nax[0].set_title(\"nbr of Passenger by Pclass\")\nax[0].set_xlabel(\"Pclass\")\nax[0].set_ylabel(\"Count\")\n\n# \uac1d\uc2e4\ub4f1\uae09\ubcc4 \uc0dd\uc874\uc790 \uc0ac\ub9dd\uc790 \uc218 \ubd84\ud3ec\nsns.countplot(x=\"Pclass\", hue=\"Survived\", data=df_train, ax=ax[1])\nax[1].set_title(\"Survived Ratio depending on Pclass\")\n\nplt.subplots_adjust(wspace=0.2, hspace=0.5)\nplt.show()","7288df36":"index_col = [df_train['Sex'], df_train['Survived']]\ncol_name = [df_train['Pclass']]\n\n# \uc131\ubcc4_\uac1d\uc2e4\ub4f1\uae09\uc5d0 \ub530\ub978 \uc0dd\uc874\uc790 \ube44\uad50\nsex_pclass_survived = visualize_crosstab(index_col, col_name)\ndisplay(sex_pclass_survived)","002abdbe":"plt.figure(figsize=(18, 8))\nsns.factorplot(x=\"Pclass\", y=\"Survived\", hue=\"Sex\", data = df_train)\nplt.show()","3cfa6631":"display(\"The elderest's age : {}\".format(df_train[\"Age\"].max()))\ndisplay(\"The youngest's age : {}\".format(df_train[\"Age\"].min()))\ndisplay(\"The Passenger's average age : {}\".format(df_train[\"Age\"].mean()))\ndisplay(\"Null Count  : \\n\", df_train.isnull().sum())\n\nprint(\"Descritive statistics\\n\")\ndisplay(df_train.describe())","1dc0eca2":"def show_age_information():\n    \"\"\"\n    Age\ud53c\ucc98\uc758 \ud1b5\uacc4 \uc815\ubcf4 \n    \"\"\"\n    display(\"\uac00\uc7a5 \uc5f0\uc7a5\uc790 : {} \uc138.\".format(df_train['Age'].max()))\n    display(\"\uac00\uc7a5 \uc5b4\ub9b0 \uc2b9\uc120\uc790\uc758 \ub098\uc774 : {} \uc138.\".format(df_train['Age'].min()))\n    display(\"\uc2b9\uc120\uac1d\uc758 \ud3c9\uade0 \ub098\uc774 : {} \uc138.\".format(df_train['Age'].mean()))\n    \n    print(\"\\n \ud559\uc2b5\ub370\uc774\ud130 \ub110 \uac2f\uc218 \")\n    display(df_train.isnull().sum())\n    \n    print(\"\\n \uae30\uc220\ud1b5\uacc4\ub7c9\")\n    display(df_train.describe())\n# \uc218\ud589\nshow_age_information()","2aa80e24":"fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(18, 8))\n\nfor i in range(2):\n    sns.violinplot(x=\"{}\".format(\"Pclass\" if i ==0 else \"Sex\") , y=\"Age\",  hue=\"Survived\", data =df_train, split=\"{}\".format(True if i ==0 else False), ax=ax[i])\n    ax[i].set_title(\"Survivor ratio depending on Pclass and Sex\")\n    ax[i].set_yticks(range(0, 110, 10))\n    \nplt.show()    ","cf0df23e":"def visualize_violin(df, x: list, y: str):\n    \"\"\"\n    x\ud53c\ucc98\uc640 y\ud53c\ucc98\uac04\uc758 \uc0dd\uc874\uc790\uc758 \ubd84\ud3ec \ube44\uad50\n    \"\"\"\n    fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(18, 8))\n    \n    for i in range(2):\n        sns.violinplot(x=\"{}\".format(x[0] if i==0 else x[1]), y=y, hue='Survived', data = df, split=True, ax=ax[i])\n        ax[i].set_title(\"{0} and {1} v.s Survived\".format(x[0] if i==0 else x[1], y))\n        ax[i].set_yticks(range(0, 110, 10))\n    plt.show()\n    \n# \uac1d\uc2e4\ub4f1\uae09, \uc131\ubcc4\uc744 \uc5f0\ub839\uacfc \ube44\uad50\ud574 \uc0dd\uc874\uc790 \ubd84\ud3ec \ube44\uad50\nvisualize_violin(df_train, ['Pclass','Sex'], 'Age')    ","bcaceeec":"df_train['Initial'] = None\nfor i in df_train:\n    df_train['Initial'] = df_train['Name'].str.extract('([A-Za-z]+)\\.')  # Name\ud53c\ucc98\uc5d0\uc11c \ub300\uc18c\ubb38\uc790\ub97c \uac00\uc9c0\uc9c0 \uc54a\uace0 .(dot)\uc73c\ub85c \ub05d\ub098\ub294 \ubd80\ubd84\ub9cc \ucd94\ucd9c","b3fceda0":"# \uc131\ubcc4\uc5d0 \ub530\ub978 \ud638\uce6d \ube44\uad50\nsex_initial = visualize_crosstab([df_train[\"Initial\"]], [df_train[\"Sex\"]], True)\ndisplay(sex_initial)\n\ndisplay(sex_initial.columns)","cac785b1":"sex_initial = visualize_crosstab([df_train['Initial']], [df_train['Sex']], True)\ndisplay(sex_initial)","ea43de68":"def feature_engineering(df, dropCols = None, InitialOpt=False, EmbarkedOpt=False, FamilyOpt=False, StringOpt=False, FeatureDrop=False):\n    \"\"\"\n    \ud53c\ucc98\uc5d4\uc9c0\ub2c8\uc5b4\ub9c1 \ubc0f \ub370\uc774\ud130 \uc815\uc81c\n    1.\ucd94\uac00\ub41c \ud638\uce6d\uc758 \uc624\uae30\ub41c \ud638\uce6d \uc815\ub9ac\n    2.Embarked\ud53c\ucc98 \ub110 \uac12 \ucc98\ub9ac \n    3.\ubb38\uc790\ud615\ud53c\ucc98\uc758 \uc22b\uc790\uac12 \ucc98\ub9ac \n    \"\"\" \n    if InitialOpt:\n        df[\"Initial\"] = df['Initial'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don'],['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr'])\n        df[\"Initial\"] = df[\"Initial\"].replace([\"Mlle\", \"Mme\", \"Ms\", \"Dr\", \"Major\", \"Lady\", \"Countess\", \"Jonkheer\",\"Col\", \"Rev\", \"Capt\", \"Sir\", \"Don\"],\n                             [\"Miss\", \"Miss\", \"Miss\", \"Mr\", \"Mr\", \"Mrs\", \"Mrs\", \"Other\", \"Other\", \"Other\", \"Mr\", \"Mr\", \"Mr\"])\n    \n    # 2.Embarked\n    if EmbarkedOpt:\n        df[\"Embarked\"] = df[\"Embarked\"].fillna('S')\n        \n    if FamilyOpt:\n        df['Family_Size'] = df['SibSp'] + df['Parch']\n        df['Alone'] = df['Family_Size'].apply(lambda x: 1 if x == 0 else 0)\n    \n    # 3.\ubb38\uc790\ud615 \ud53c\ucc98\uc758 \uac12\uc744 \uc22b\uc790\ud615\uc73c\ub85c \ubcc0\ud658 \n    if StringOpt:\n        df[\"Sex\"] = df[\"Sex\"].replace([\"male\", \"female\"], [0, 1], inplace=False)\n        df[\"Embarked\"] = df[\"Embarked\"].replace([\"S\", \"C\", \"Q\"], [0, 1, 2], inplace=False)\n        df[\"Initial\"] = df[\"Initial\"].replace([\"Mr\", \"Mrs\", \"Miss\", \"Master\", \"Other\"], [0, 1, 2, 3, 4], inplace=False)\n        \n    if FeatureDrop:\n        df.drop(labels = dropCols, axis = 1, inplace = True, errors='ignore')\n    \n    display(df.head(n=3))   \n    return df  ","75951b4b":"# \ucca0\uc790\uac00 \ud2c0\ub9b0\uac83 - Mlle, Mme\ub97c Miss\ub85c \ub300\uce58\ud558\ub3c4\ub85d \uad00\ub828 \ud568\uc218 \ub85c\uc9c1 \ucd94\uac00\ndf_train = feature_engineering(df_train, InitialOpt=True)","6cab0437":"df_age_mean = df_train.groupby(\"Initial\")[\"Age\"].mean().reset_index()\ndisplay(df_age_mean)\n\nmaster_age_mean = df_age_mean.loc[df_age_mean[\"Initial\"]==\"Master\", \"Age\"]\nmr_age_mean = df_age_mean.loc[df_age_mean[\"Initial\"]==\"Mr\", \"Age\"]\nmrs_age_mean = df_age_mean.loc[df_age_mean[\"Initial\"]==\"Mrs\", \"Age\"]\nmiss_age_mean = df_age_mean.loc[df_age_mean[\"Initial\"]==\"Miss\", \"Age\"]\nother_age_mean = df_age_mean.loc[df_age_mean[\"Initial\"]==\"Other\", \"Age\"]\n\ndisplay(\"Master age mean - {}\".format(np.round(master_age_mean)))\ndisplay(\"Mr age mean - {}\".format(np.round(mr_age_mean)))\ndisplay(\"Mrs mean - {}\".format(np.round(mrs_age_mean)))\ndisplay(\"Miss age mean - {}\".format(np.round(miss_age_mean)))\ndisplay(\"Other age mean - {}\".format(np.round(other_age_mean)))","2f04668d":"df_train[\"Age\"].isnull().any()\ndf_train[\"Age\"].isnull().sum()","5d14683f":"def check_null_feature(col: str):\n    \"\"\"\n    \uc778\uc790\ub85c \ubc1b\uc740 \ud53c\ucc98\uc5d0 \ub300\ud55c \ub110\uccb4\ud06c \n    \"\"\"\n    display(df_train[col].isnull().any())\n    display(df_train[col].isnull().sum())","b8970c09":"def get_Initial_age_mean(df):\n    \"\"\"\n    \ud638\uce6d\ubcc4 \ud3c9\uade0 \ub098\uc774 \uad6c\ud558\uae30\n    \"\"\"    \n    df_age_mean = df.groupby('Initial')['Age'].mean().reset_index()\n    ## Assigning the NaN Values with the Ceil values of the mean ages\n    master_age_mean = df_age_mean.loc[df_age_mean['Initial']=='Master', 'Age']\n    mr_age_mean = df_age_mean.loc[df_age_mean['Initial']=='Mr', 'Age']\n    mrs_age_mean = df_age_mean.loc[df_age_mean['Initial']=='Mrs', 'Age']\n    miss_age_mean = df_age_mean.loc[df_age_mean['Initial']=='Miss', 'Age']\n    other_age_mean = df_age_mean.loc[df_age_mean['Initial']=='Other', 'Age']\n    display(df_age_mean)\n    return master_age_mean, mr_age_mean, mrs_age_mean, miss_age_mean, other_age_mean\n\n# \ud638\uce6d\ubcc4 \ud3c9\uade0 \ub098\uc774 \uad6c\ud558\uae30 \nmaster_age_mean, mr_age_mean, mrs_age_mean, miss_age_mean, other_age_mean = get_Initial_age_mean(df_train)","67abd54d":"display(mr_age_mean)\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Mr'),'Age']=33\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Mrs'),'Age']=36\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Master'),'Age']=5\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Miss'),'Age']=22\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Other'),'Age']=46","62af7ded":"#Age\ud53c\ucc98\uac00 \ub110\uc778\uac83 \ud655\uc778 \n# \ubcc0\uc218\uc5d0 \ub2f4\uc740\uba74 \uc774\uc0c1\ud558\uac8c \uac12\uc774 \uc5c5\ub370\uc774\ud2b8\uac00 \uc548\ub428.\ncheck_null_feature(\"Age\")","56007732":"fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(20, 10))\nalive = df_train.loc[df_train[\"Survived\"]== 1][\"Age\"]\ndeceased = df_train.loc[df_train[\"Survived\"]==0][\"Age\"]\n\nalive.plot.hist(ax = ax[0], edgecolor='black', color=\"red\", bins=20)\nax[0].set_title(\"Age Frequency based on the survived\")\nax[0].set_xlabel(\"Age\")\nax[0].set_xticks(range(0, 85, 5))\n\ndeceased.plot.hist(ax = ax[1], edgecolor='black', color=\"green\", bins=20)\nax[1].set_title(\"Age Frequency based on the deceased\")\nax[1].set_xlabel(\"Age\")\nax[1].set_xticks(range(0, 85, 5))\n\nplt.show()","6772bd85":"def plot_histogram_alive_deceased(alive, deceased):\n    \"\"\"\n    \uc5f0\ub839\ub300\ubcc4 \uc0dd\uc874\uc790\uc640 \uc0ac\ub9dd\uc790 \ud788\uc2a4\ud1a0\uadf8\ub7a8 \ube44\uad50\n    \"\"\"\n    fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(20, 10))\n    alive['Age'].plot.hist(ax=ax[0], edgecolor='black', color='red', bins=20)\n    ax[0].set_title(\"Survived = 0\")\n    ax[0].set_xticks(list(range(0, 85, 5)))  \n    \n    deceased['Age'].plot.hist(ax=ax[1], edgecolor='black', color='green', bins=20)\n    ax[1].set_title(\"Survived = 1\")\n    ax[1].set_xticks(list(range(0, 85, 5)))  \n    plt.show()\n\n# \uc5f0\ub839\ub300\ubcc4\ub85c \ubcf4\ub294 \uc0ac\ub9dd\uc790, \uc0dd\uc874\uc790 \ube44\uad50 \nalive= df_train[df_train['Survived']== 0]\ndisplay(type(alive), alive.head(n=2))\ndeceased = df_train[df_train['Survived']== 1]\ndisplay(type(deceased), deceased.head(n=2))    \nplot_histogram_alive_deceased(alive, deceased)","3a3d3154":"sns.factorplot(x=\"Pclass\", y=\"Survived\", col=\"Initial\", data=df_train)\nplt.show()","fb0c2a6f":"sns.factorplot(x=\"Pclass\", y=\"Survived\", col=\"Sex\", data=df_train)\nplt.show()","44b20732":"index_col = [df_train.Embarked,df_train.Pclass]\ncol_name = [df_train.Sex,df_train.Survived]\nvisualize_crosstab(index_col, col_name)","494b99ab":"sns.factorplot(x=\"Embarked\", y=\"Survived\", data=df_train)\nfig = plt.gcf()  # \ud604\uc7ac \uadf8\ub824\uc9c4 \ub3c4\ud615\uc744 \uac00\uc838\uc634\n# width, height\nfig.set_size_inches(5, 3)\nplt.show()","881f0484":"fig, ax = plt.subplots(nrows=2, ncols=2, figsize=(20, 10))\nhue_cols = [None, \"Sex\", \"Survived\", \"Pclass\"]\n\nfor i in range(2):\n    for j in range(2):\n        hue = None\n        if (i == 0) & (j ==0):\n            hue = hue_cols[0]\n        elif (i==0) & (j ==1):\n            hue = hue_cols[1]\n        elif (i ==1) & (j ==0):\n            hue = hue_cols[2]\n        else:\n            hue = hue_cols[3]\n\n        sns.countplot(x=\"Embarked\", data=df_train, hue = hue , ax=ax[i][j])        \n        title = None\n        if (i ==0) & (j ==0):\n            title=\"Nbr of Passengers on board\"\n        elif (i ==0) & (j ==1):\n            title=\"Male-Female Split for Embarked\"\n        elif (i == 1) & (j ==0):\n            title = \"Survived for Embarked\"\n        else:\n            title = \"Pclass for Embarked\"\n        ax[i][j].set_title(\"{0}\".format(title))\n        \nplt.subplots_adjust(wspace=0.25, hspace=0.5)   \nplt.show()    ","4d594ba8":"def show_survivor_on_embarked(df, hue_cols: list):\n    \"\"\"\n    \uacbd\uc720\ud56d\uad6c(Embarked)\uc5d0 \ub300\ud558\uc5ec \uce74\ud14c\uace0\ub9ac\uac12(hue\uc635\uc158)\uc744 \ub2ec\ub9ac\ud574\uc11c \uac00\uba70\n    \uc2dc\uac01\ud654 \n    \"\"\"\n    df_train = df.copy()\n    fig, ax = plt.subplots(nrows=2, ncols=2, figsize=(20, 8))\n    for i in range(2):\n        for j in range(2):\n            hue = None\n            if (i == 0) & (j ==0):\n                hue = hue_cols[0]\n            elif (i==0) & (j ==1):\n                hue = hue_cols[1]\n            elif (i ==1) & (j ==0):\n                hue = hue_cols[2]\n            else:\n                hue = hue_cols[3]\n\n            sns.countplot(x=\"Embarked\", data=df_train, hue = hue , ax=ax[i][j])        \n            title = None\n            if (i ==0) & (j ==0):\n                title=\"Nbr of Passengers on board\"\n            elif (i ==0) & (j ==1):\n                title=\"Male-Female Split for Embarked\"\n            elif (i == 1) & (j ==0):\n                title = \"Survived for Embarked\"\n            else:\n                title = \"Pclass for Embarked\"\n            ax[i][j].set_title(\"{0}\".format(title))\n\n    plt.subplots_adjust(wspace=0.25, hspace=0.5)   \n    plt.show()    \n    \n# \uc218\ud589 \nhue_cols = [None, \"Sex\", \"Survived\", \"Pclass\"]\nshow_survivor_on_embarked(df_train, hue_cols)","b983c687":"#\uc704\uc758  Pclass for Embarked\uadf8\ub798\ud504\ub791 \ub3d9\uc77c\ud568\uc744 \uc54c \uc218 \uc788\ub2e4.\nsns.factorplot(x=\"Pclass\", y=\"Survived\", data = df_train, col=\"Embarked\", hue=\"Sex\")\nplt.show()","dbf4fa97":"# 2\uac1c\uc758 \ub110\uac12\uc744 'S'\ub85c \ub300\uce58 \ndf_train = feature_engineering(df_train, EmbarkedOpt=True)","e15e4de5":"# \ub110\uac12\uc774 \uc5c6\uc74c\ncheck_null_feature(\"Embarked\")","135f0b96":"# Read Evlaulate Print Loop\npd.crosstab(index=df_train[\"SibSp\"], columns=df_train[\"Survived\"], margins=True).style.background_gradient(cmap=\"summer_r\")","7ec85270":"index_col = df_train['SibSp']\ncol_name = df_train['Survived']\n# \ud568\uc218 \ud638\ucd9c\nvisualize_crosstab(index_col, col_name,True)","58f54ac1":"fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(15,4))\ndisplay(ax)\nsns.barplot(x=\"SibSp\", y=\"Survived\", data = df_train, ax = ax[0])\nax[0].set_title(\"SibSp v.s Survived\")\n\nsns.factorplot(x=\"SibSp\", y=\"Survived\", data=df_train, ax=ax[1])\nax[1].set_title(\"SibSp v.s Survived\")\nplt.close(2)\nplt.show()","67cb7102":"visualize_crosstab([df_train['SibSp']], [df_train['Pclass']])","640733ef":"# \uac1d\uc2e4\ub9c8\ub2e4 \uc5bc\ub9c8\ub2e4 \ubd80\ubaa8 \ubc0f \uc544\uc774\uac00 \uc788\ub294\uc9c0 \ud655\uc778\npd.crosstab(index=df_train[\"Parch\"], columns = df_train[\"Pclass\"], margins=False).style.background_gradient(cmap=\"summer_r\")","8418e01f":"visualize_crosstab([df_train['Parch']], [df_train['Pclass']], True)","f5465a09":"fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(14, 6))\n\nsns.barplot(x=\"Parch\", y=\"Survived\", data = df_train, ax = ax[0])\nax[0].set_title(\"Survivor depends on Parch\")\n\nsns.factorplot(x=\"Parch\", y=\"Survived\", data = df_train, ax= ax[1])\nax[1].set_title(\"Survivor depends on Parch\")\n\nplt.tight_layout()\nplt.close(2)\nplt.show()","a8a8d1a8":"print('Highest Fare was:',df_train['Fare'].max())\nprint('Lowest Fare was:',df_train['Fare'].min())\nprint('Average Fare was:',df_train['Fare'].mean())","d82736d6":"fig, ax = plt.subplots(nrows=1, ncols = 3, figsize=(14, 6))\n\ncond_pclass1= df_train[df_train[\"Pclass\"]==1][\"Fare\"]\ncond_pclass2= df_train[df_train[\"Pclass\"]==2][\"Fare\"]\ncond_pclass3= df_train[df_train[\"Pclass\"]==3][\"Fare\"]\n\n\nsns.distplot(a= cond_pclass1, ax = ax[0])\nax[0].set_title(\"Fare in Pclass 1\")\n\nsns.distplot(a =cond_pclass2, ax = ax[1])\nax[1].set_title(\"Fare in Pclass 2\")\n\nsns.distplot(a =cond_pclass3, ax = ax[2])\nax[2].set_title(\"Fare in Pclass 3\")\n\nplt.show()","d4b3b65d":"heatmap = df_train.corr()\n\nsns.heatmap(data = heatmap, cmap = \"YlOrBr\", annot=True, linewidths=0.2)\nfig = plt.gcf()\nfig.set_size_inches(10, 8)\nplt.show()","03a46926":"def get_age_band(age):\n    \"\"\"\n    \ub098\uc774\ub97c \uc5f0\ub839\ub300\ub97c \uc22b\uc790\ud615\uc73c\ub85c \uad6c\ubd84\ud558\uae30\ud558\uae30 \uc704\ud574 \n    \ubc94\uc8fc\ud615 \uc22b\uc790 \ud0c0\uc785\uc73c\ub85c \ubcc0\uacbd\n    \"\"\"\n    age_band = 0\n    if age <= float(16):\n        age_band = 0\n    elif (age > float(16)) & (age <= float(32)):\n        age_band = 1\n    elif (age > float(32)) & (age <= float(48)):\n        age_band = 2\n    elif (age > float(48)) & (age <= float(64)):\n        age_band = 3\n    else:\n        age_band = 4\n    return age_band\n\n# \uc5f0\ub839\ub300\ub97c \ub9ac\ud134\ndf_train[\"age_band\"] = df_train[\"Age\"].apply(lambda x: get_age_band(x))\ndisplay(df_train.tail(2))","31a2d68d":"# age_band\uc758 \ube48\ub3c4\ud45c\ub97c DataFrame\uc73c\ub85c \ubcc0\ud658\ud574 \ubcf4\uc5ec\uc8fc\uae30\ndf_train['age_band'].value_counts().to_frame()","480f76d3":"# \ub370\uc774\ud130\ud504\ub808\uc784\uc5d0 \uc2a4\ud0c0\uc77c\ndf_train[\"age_band\"].value_counts().to_frame().style.background_gradient(cmap=\"summer_r\")","54397f18":"sns.factorplot(x=\"age_band\", y=\"Survived\", col=\"Pclass\", data = df_train)\nplt.show()","757a3be3":"# Family_Size\uc640 Alone\ud53c\ucc98 \ucd94\uac00 \ndf_train = feature_engineering(df_train, FamilyOpt=True)","df4b0b2b":"fig, ax = plt.subplots(nrows = 1, ncols = 2, figsize=(14, 4))\n\nsns.factorplot(x=\"Family_Size\", y=\"Survived\", data = df_train, ax = ax[0])\nax[0].set_title(\"Family Size v.s Survived\")\n\nsns.factorplot(x=\"Alone\", y=\"Survived\", data=df_train, ax=ax[1])\nax[1].set_title(\"Alone v.s Survived\")\nplt.close(2)\nplt.close(3)\nplt.show()","909f46d2":"sns.factorplot(x=\"Alone\", y=\"Survived\", data = df_train, col=\"Pclass\", hue=\"Sex\")\nplt.show()","4ad59504":"qcut = pd.qcut(range(5), 4)\ndisplay(len(qcut), qcut)\n\npd.qcut(range(5), 3, labels=[\"good\", \"medium\", \"bad\"])","cd63d165":"# \uc694\uae08\ub300\uc758 4\uac1c\uc758 \ube48\uc73c\ub85c \uade0\ub4f1\ud558\uac8c \ub098\ub208\ub2e4\ndf_train[\"Fare_Range\"] = pd.qcut(df_train[\"Fare\"], 4)\ndf_train[\"Fare_Range\"].value_counts()","8e1903a2":"# \uc694\uae08\uc774 \uace0\uc561\uc73c\ub85c \uc62c\ub77c\uac08\uc218\ub85d \uc0dd\uc874\uc728\uc774 \ub192\uc544\uc9d0\uc744 \ubcf4\uc784\n# \uc911\uc694\ud53c\ucc98\ub85c \ucd94\uac00\ud558\ub294\uac83\uc774 \uc911\uc694\n\n\ndisplay(df_train.groupby([\"Fare_Range\"])[\"Survived\"].mean())\n\n# Descending order\ndisplay(df_train.groupby([\"Fare_Range\"])[\"Survived\"].mean().sort_values(ascending=False).to_frame())\ndisplay(df_train.groupby(\"Fare_Range\")[\"Survived\"].mean().to_frame())\ndisplay(df_train.groupby(\"Fare_Range\")[\"Survived\"].mean().to_frame().style.background_gradient(cmap=\"summer_r\"))","a59f91ce":"def get_fare_cat(fare):\n    \"\"\"\n    Categorized Fare feature into Fare band\n    \"\"\"\n    fare_cat = 0\n    if fare <= 7.91:\n        fare_cat = 0\n    elif (fare > 7.91) & (fare <= 14.454):\n        fare_cat = 1\n    elif (fare > 14.454 ) & (fare <= 31.0):\n        fare_cat = 2\n    elif (fare > 31) & (fare <= 513):\n        fare_cat = 3\n    return fare_cat      ","e585e7ef":"def get_fare_cate(fare):\n    \"\"\"\n    categorized Fare feature into Fare band\n    \"\"\"\n    fare_cat = 0\n    if fare <= 7.91:\n        fare_cat = 0\n    elif (fare > 7.91) & (fare <= 14.454):\n        fare_cat = 1\n    elif (fare > 14.454) & (fare <= 31.0):\n        fare_cat = 2\n    elif (fare > 31) & (fare <= 513):\n        fare_cat = 3\n    return fare_cat\n\n# \uc694\uae08\ub300 \ud53c\ucc98 \ucd94\uac00 \ndf_train['fare_cat'] = df_train['Fare'].apply(lambda x: get_fare_cate(x))","ea5be56d":"sns.factorplot(x=\"fare_cat\", y=\"Survived\", hue=\"Sex\", data = df_train)\nplt.show()","c6b7994a":"sns.factorplot(x=\"fare_cat\", y=\"Survived\", hue=\"Sex\", col=\"Pclass\", data=df_train)\nplt.show()","a4502bd1":"df_train = feature_engineering(df_train, StringOpt=True)","3d6eb5f2":"dropCols = ['Name','Age','Ticket','Fare','Cabin','Fare_Range','PassengerId']\ndf_train = feature_engineering(df_train, dropCols, FeatureDrop=True)","8fdf31cc":"sns.heatmap(df_train.corr(), annot=True, cmap='RdYlGn', linewidths=0.2, annot_kws={'size':20})\nfig = plt.gcf()\nfig.set_size_inches(14, 10)\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\nplt.show()","e0b0aa83":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB #Naive bayes\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\n\n#\uc815\ud655\ub3c4 \ud3c9\uac00 \ubc0f \uc624\ucc28\ud589\ub82c\nfrom sklearn.metrics import accuracy_score, confusion_matrix","2b720d76":"X = df_train.iloc[:, 1:]  # feature\ny = df_train.iloc[:, 0]   # label\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.3, random_state=0, stratify=df_train[\"Survived\"])\ndisplay(X_train.shape, X_test.shape, y_train.shape, y_test.shape)","71f90e99":"def split_train_test_dataset(df):\n    \"\"\"\n    \ub370\uc774\ud130\ud504\ub808\uc784\uc744 \ud53c\ucc98, \ub808\uc774\ube14, \ud559\uc2b5, \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc14b\uc73c\ub85c \ubd84\ub9ac\n    \"\"\"\n    X = df.iloc[:, 1:]  # feature\n    y = df.iloc[:, 0]   # label\n\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.3, random_state=0, stratify=df[\"Survived\"])\n    display(X_train.shape, X_test.shape, y_train.shape, y_test.shape, X.shape, y.shape)\n    \n    return X_train, X_test, y_train, y_test, X, y\n\n# \ud559\uc2b5 \ubc0f \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc14b \ubd84\ub9ac \nX_train, X_test, y_train, y_test, X, y = split_train_test_dataset(df_train)","f3ee1a8f":"models = []\ndef fit_predict_model(models: list):\n    \"\"\"\n    \ubaa8\ub378\uc744 \uc785\ub825\ubc1b\uc544 \ud559\uc2b4 \ubc0f \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc14b\uc744 \uc778\uc790\ub97c \ud559\uc2b5, \uc608\uce21 , \ud3c9\uac00\n    \"\"\"\n    accuracy_scores = dict()\n    for model in models:\n        model.fit(X_train, y_train)\n        prediction = model.predict(X_test)\n        accuracy_point = accuracy_score(y_test, prediction)\n        \n        display(\"Accuracy for {} is {}\".format(model.__class__.__name__, accuracy_point))\n        accuracy_scores[model] = accuracy_point\n    return accuracy_scores","488b3fa7":"# Radial Support Vector Machines(rbf-SVM)\nSVM = SVC(C = 1.0, kernel=\"rbf\", gamma=0.1 ,probability=True)\n\n### Linear Support Vector Machine(linear-SVM)\nlinearSVM = SVC(kernel=\"linear\", C=0.1, gamma=0.1)\n\n#Logistic Regression - \ub85c\uc9c0\uc2a4\ud2f1\ud68c\uadc0\u00b6\nlr = LogisticRegression()\n\n# DecisonTree\ndt_clf = DecisionTreeClassifier()\n\n# K-Nearest Neighbours(KNN) - K\ucd5c\uadfc\uc811\uc774\uc6c3 \uae30\ubc95\nKNN = KNeighborsClassifier(n_neighbors=10)","36742d9d":"# \uac01 ML\ubaa8\ub378 \ud559\uc2b5 , \uc608\uce21 \ubc0f \ud3c9\uac00 \uc218\ud589 \n# \ucd5c\uadfc\uc811\uc774\uc6c3\uae30\ubc95\uc774 \uac00\uc7a5 \uc815\ud655\ub3c4\uac00 \uc88b\uc74c\nmodels = [KNN, dt_clf, lr, linearSVM, SVM]\naccuracy_socres = fit_predict_model(models)","1fd0a8c9":"step_idx = list(range(1, 11))  # 10\ud68c \ud14c\uc2a4\ud2b8\nscores = pd.Series()\n\nx = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nfor i in step_idx:\n    model = KNeighborsClassifier(n_neighbors=i, n_jobs = -1)\n    model.fit(X_train, y_train)\n    prediction = model.predict(X_test)\n    \n    scores = scores.append(pd.Series(accuracy_score(y_test, prediction)))\n    \nplt.plot(step_idx, scores)\nplt.xlabel(\"n_neighbors\")\nplt.ylabel(\"Model Accuracy\")\nplt.xticks(x)\n\nfig = plt.gcf()\nfig.set_size_inches(12, 6)\nplt.show()\n\nprint(\"Accuracies for different vlaues of n are: {}, withe the max values as {}\".format(scores.values, scores.values.max()))","6ab13c11":"models = []\n\ngbn = GaussianNB()\nrf = RandomForestClassifier(n_estimators=500,min_samples_split=3)\n\nmodels = [gbn, rf]\n\n# \ud559\uc2b5 \ubc0f \uc218\ud589\naccuracy_scores = fit_predict_model(models)","50345550":"from sklearn.model_selection import (KFold, cross_val_score, cross_val_predict)\nfrom sklearn.linear_model import Lasso\nfrom sklearn.datasets import load_diabetes\nfrom sklearn.metrics import (accuracy_score, precision_score, recall_score, confusion_matrix)  # evaluation\nimport numpy as np","900ff9c8":"diabetes = load_diabetes()\ndiabetes.data.shape, diabetes.target.shape\n\nX_data = diabetes.data\ny_data = diabetes.target\n\nlasso = Lasso(alpha=0.05)\ncross_val_score(lasso, X_data, y_data)","e0178005":"def get_validation_score(models, X, y, n_splits=None):\n    \"\"\"\n    models - estimator\n    n_splits - \ud3f4\ub4dc\ub97c \ub098\ub260 \uac2f\uc218 \n    X - \ud53c\ucc98 \n    y - \ub808\uc774\ube14\n    \uae30\ub2a5 : \n    \uc815\ud655\ub3c4 \ud3c9\uade0 \ubc0f \ud45c\uc900\ud3b8\ucc28\uc815\ubcf4\ub97c \ub370\uc774\ud130\ud504\ub808\uc784\uc73c\ub85c \ubcf4\uc5ec\uc8fc\uace0, \ubd84\ub958\uae30\ubcc4 \uc815\ud655\ub3c4\ub97c \uc2dc\uac01\ud654\n    \"\"\"\n    kfold = KFold(n_splits = n_splits, shuffle=False, random_state=22)\n    means = []\n    accuracies = []\n    stds = []\n    classifiers = ['Linear SVM', 'Radial SVM', 'Logistic Regression', 'KNeighborsClassifier', 'DecisionTreeClassifier', 'GaussianNB', 'RandomForest']\n    for model in models:\n        cv_result = cross_val_score(model, X, y, scoring='accuracy', cv = kfold, n_jobs=-1, verbose=True)\n        means.append(cv_result.mean())\n        stds.append(cv_result.std())\n        accuracies.append(cv_result)\n    \n    model_df = pd.DataFrame(data = {\"CV mean\":means, \"Stds\": stds}, index = classifiers)\n    \n    # \ub370\uc774\ud130 \ud504\ub808\uc784 \ubcf4\uc5ec\uc8fc\uae30\n    display(model_df)\n    \n    # \uc815\ud655\ub3c4 \uc2dc\uac01\ud654\n    visualize_accuracy_byClf(classifiers, accuracies)    \n    \n    return model_df","e26db32b":"def visualize_accuracy_byClf(classifiers, accuracies):\n    \"\"\"\n    \ubd84\ub958\uae30\ubcc4 \uc815\ud655\ub3c4\ub97c \ubc15\uc2a4\ud50c\ub86f\uc73c\ub85c \uc2dc\uac01\ud654\n    \"\"\"\n    plt.subplots(figsize=(12, 6))\n    box = pd.DataFrame(data = accuracies, index = classifiers)\n    display(box)\n    display(box.T)\n    box.T.boxplot(rot=90)","ad1a7cc7":"# \uc218\ud589\nLinear_SVM = SVC(kernel='linear')\nRadial_SVM = SVC(kernel='rbf')\nlr_clf = LogisticRegression()\nknn_clf = KNeighborsClassifier(n_neighbors=9)\ndt_clf = DecisionTreeClassifier()\ngaussianNB = GaussianNB()\nrf_clf = RandomForestClassifier(n_estimators = 100)   \nmodels = [Linear_SVM, Radial_SVM, lr_clf, knn_clf, dt_clf, gaussianNB, rf_clf]\n\nmodel_df = get_validation_score(models, X, y, 10)","e9a6f34e":"model_df[\"CV mean\"].plot.barh()\nplt.title(\"Average Cross validation Accuracy on models\")\nfig = plt.gcf()\nfig.set_size_inches(8, 5)\nplt.xlabel(\"Accuracy\")\nplt.ylabel(\"Classifiers\")\nplt.show()","72d53fdd":"from sklearn.datasets import load_diabetes\nfrom sklearn.linear_model import Lasso\nfrom sklearn.model_selection import cross_val_predict\n\ndiabetes = load_diabetes()\nX_data = diabetes.data\ny_data = diabetes.target\n\nlasso = Lasso(alpha=0.05, random_state=156,fit_intercept=True)\n\n# \uac80\uc99d \uc608\uce21\uac12\uc740 ndarray\nprediction  = cross_val_predict(lasso, X_data, y_data, cv = 3, n_jobs=-1, verbose=1)\ndisplay(prediction, prediction.shape)","0a9e7f22":"def get_clf_eval(clf, y, y_pred):\n    \"\"\"\n    \uac01 \ubaa8\ub378\uc758 \ud3c9\uac00\uc9c0\ud45c(accuracy, precision, recall) \uacc4\uc0b0\n    \"\"\"\n    accuracy = np.round(accuracy_score(y, y_pred), 3)\n    precision = np.round(precision_score(y, y_pred),3)\n    recall    = np.round(recall_score(y, y_pred), 3)\n    \n    return accuracy, precision, recall","52e298b7":"def visualize_confusion_matrix(models, classifiers):\n    \"\"\"\n    \ubaa8\ub378\uc5d0 \ub300\ud55c \uad50\ucc28\uac80\uc99d\uc744 \ud1b5\ud574 \uc608\uce21\uce58\uc5d0 \ub300\ud55c \uc624\ucc28\ud589\ub82c\ud45c \ub514\uc2a4\ud50c\ub808\uc774\ud558\uace0 , \n    \ud3c9\uac00\uc9c0\ud45c\ub97c \ub9ac\ud134\ud568\n    \"\"\"\n    fig, ax = plt.subplots(nrows=3, ncols=3, figsize=(14, 6))\n    evaluation_result = dict()\n    \n    for i in list(range(3)):\n        for j in list(range(3)):\n            title = None\n            if (i ==0) & (j ==0):\n                y_pred = cross_val_predict(models[0], X, y, cv=10) #\uad50\ucc28\uac80\uc99d \uc608\uce21\uac12\n                sns.heatmap(confusion_matrix(y, y_pred), ax = ax[i, j], annot=True, fmt=\"2.0f\")\n                title = \"Matrix for {}\".format(classifiers[0])\n                ax[i,j].set_title(title)\n                \n                # \uc2e4\uc81c\uac12\uacfc \uc608\uce21\uac12\uc744 \uae30\ubc18\uc73c\ub85c \ubaa8\ub378 \ud3c9\uac00\n                accuracy, precision, recall = get_clf_eval(models[0], y, y_pred)\n                evaluation_result[classifiers[0]] = [accuracy, precision, recall]\n            elif (i==0) & (j == 1):\n                y_pred = cross_val_predict(models[1], X, y, cv=10) #\uad50\ucc28\uac80\uc99d \uc608\uce21\uac12\n                sns.heatmap(confusion_matrix(y, y_pred), ax = ax[i, j], annot=True, fmt=\"2.0f\")\n                title = \"Matrix for {}\".format(classifiers[1])\n                ax[i,j].set_title(title)\n                \n                # \uc2e4\uc81c\uac12\uacfc \uc608\uce21\uac12\uc744 \uae30\ubc18\uc73c\ub85c \ubaa8\ub378 \ud3c9\uac00\n                accuracy, precision, recall = get_clf_eval(models[1], y, y_pred)\n                evaluation_result[classifiers[1]] = [accuracy, precision, recall]\n            elif (i==0) & (j == 2):\n                y_pred = cross_val_predict(models[2], X, y, cv=10) #\uad50\ucc28\uac80\uc99d \uc608\uce21\uac12\n                sns.heatmap(confusion_matrix(y, y_pred), ax = ax[i, j], annot=True, fmt=\"2.0f\")\n                title = \"Matrix for {}\".format(classifiers[2])\n                ax[i,j].set_title(title)\n                \n                # \uc2e4\uc81c\uac12\uacfc \uc608\uce21\uac12\uc744 \uae30\ubc18\uc73c\ub85c \ubaa8\ub378 \ud3c9\uac00\n                accuracy, precision, recall = get_clf_eval(models[2], y, y_pred)\n                evaluation_result[classifiers[2]] = [accuracy, precision, recall]\n            elif (i == 1) & (j==0):\n                y_pred = cross_val_predict(models[3], X, y, cv=10)\n                sns.heatmap(confusion_matrix(y, y_pred), ax = ax[i,j], annot=True, fmt='2.0f')\n                title = 'Matrix for {}'.format(classifiers[3])\n                ax[i,j].set_title(title)\n                accuracy, precision, recall = get_clf_eval(models[3], y, y_pred)\n                evaluation_result[classifiers[3]] = [accuracy, precision, recall]\n            elif (i == 1) & (j==1):\n                y_pred = cross_val_predict(models[4], X, y, cv=10)\n                sns.heatmap(confusion_matrix(y, y_pred), ax = ax[i,j], annot=True, fmt='2.0f')\n                title = 'Matrix for {}'.format(classifiers[4])\n                accuracy, precision, recall = get_clf_eval(models[4], y, y_pred)\n                evaluation_result[classifiers[4]] = [accuracy, precision, recall]\n                ax[i,j].set_title(title)\n            elif (i == 1) & (j==2):\n                y_pred = cross_val_predict(models[5], X, y, cv=10)\n                sns.heatmap(confusion_matrix(y, y_pred), ax = ax[i][j], annot=True, fmt='2.0f')\n                title = 'Matrix for {}'.format(classifiers[5])\n                accuracy, precision, recall = get_clf_eval(models[5], y, y_pred)\n                evaluation_result[classifiers[5]] = [accuracy, precision, recall]\n                ax[i,j].set_title(title)\n            elif (i == 2) & (j==0):\n                y_pred = cross_val_predict(models[6], X, y, cv=10)\n                sns.heatmap(confusion_matrix(y, y_pred), ax = ax[i,j], annot=True, fmt='2.0f')\n                title = 'Matrix for {}'.format(classifiers[6])\n                accuracy, precision, recall = get_clf_eval(models[6], y, y_pred)\n                evaluation_result[classifiers[6]] = [accuracy, precision, recall]\n                ax[i,j].set_title(title)\n            else:\n                pass\n    plt.tight_layout()\n    plt.subplots_adjust(hspace=0.4, wspace=0.4)\n    plt.close(7)\n    plt.close(8)\n    plt.show()         \n    return evaluation_result             ","2426bbe2":"# \uc624\ucc28\ud589\ub82c\nrbf_SVM = SVC(kernel='rbf')\nlinear_SVM  = SVC(kernel='linear')\nknn_clf = KNeighborsClassifier(n_neighbors = 9)\nrf_clf  = RandomForestClassifier(n_estimators=100)\nlr_clf =  LogisticRegression()\ndt_clf = DecisionTreeClassifier()\ngaussianNB = GaussianNB()\n\nmodels = [rbf_SVM, linear_SVM, knn_clf, rf_clf, lr_clf, dt_clf, gaussianNB]\n\nclassifiers = ['Radius SVM', 'Linear-SVM', 'KNN', 'Random-Forests', 'Logistic Regression', 'Decision Tree', 'Naive Bayes']\nevaluation_result = visualize_confusion_matrix(models, classifiers)","70ae4979":"for k, v in evaluation_result.items():\n    print(\"{0} model's accuracy score {1:.3f} , precision score {2:.3f}, recall socre {3:.3f}\".format(k, v[0], v[1], v[2]))\nprint(\"\\n\")","f9215bc5":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\n\nC = [0.05,0.1,0.2,0.3,0.25,0.4,0.5,0.6,0.7,0.8,0.9,1]\ngamma = [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0]\n\nhyper = {\"kernel\":[\"rbf\", \"linear\"], \"C\": C, \"gamma\": gamma}\n\nsvm = SVC()\n\ngd = GridSearchCV(svm, param_grid=hyper, scoring='accuracy', verbose=True, cv = 3)\ngd.fit(X, y)\n\nprint(\"Best Parameter : \", gd.best_params_)\nprint(\"Best score : \", gd.best_score_)\nprint(\"Best estimator : \", gd.best_estimator_)","e3227857":"C = [0.05,0.1,0.2,0.3,0.25,0.4,0.5,0.6,0.7,0.8,0.9,1]\ngamma = [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0]\nhyper = {'kernel': ['rbf', 'linear'], 'C': C, 'gamma': gamma}\nsvm = SVC()\nmodels = [svm]\ndef hyper_parameter_tuning(models, hyper: dict):\n    \"\"\"\n    GridSearchCV\ub97c \uc774\uc6a9\ud55c \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd\n    \"\"\"\n    from sklearn.model_selection import GridSearchCV\n    from sklearn.svm import SVC\n    \n    for model in models:\n        gd = GridSearchCV(model, param_grid=hyper, verbose = True, scoring='accuracy',cv = 3)\n        gd.fit(X, y)\n        \n        print(\"\\n\")\n        display(\"Best parameter :\", gd.best_params_) \n        display(\"Best Score : \", gd.best_score_)\n        display(\"Best Estimator \", gd.best_estimator_)\n        \n# hyper parameter tuning\nhyper_parameter_tuning(models, hyper)","0411192e":"n_estimators = list(range(100, 1000, 100))\nhyper = {'n_estimators': n_estimators,\n        \"criterion\": ['gini', 'entropy'],\n         \"max_depth\": [3, 4, 5, 7, 10],\n         \"min_samples_split\": [2, 3]         \n        }\n\nrt_clf = RandomForestClassifier()\n\nmodels = [rf_clf]\nhyper_parameter_tuning(models, hyper)","563b5feb":"# 1. VotingClassifier\nfrom sklearn.ensemble import VotingClassifier\n\nknn = KNeighborsClassifier(n_neighbors=10)\n\nen_clf = VotingClassifier([('KNeighborsClassifier', knn)], voting= \"soft\")\n\nen_clf.fit(X_train, y_train)\n\n# Return the mean accuracy on the given test data and labels.\n# 0.832089552238806\nen_clf.score(X_test, y_test)   ","627649c6":"# 2. BaggingClassifier\nfrom sklearn.ensemble import BaggingClassifier\n\nknn = KNeighborsClassifier(n_neighbors=10)\n\nen_clf = BaggingClassifier(base_estimator = knn, random_state = 0, n_estimators = 900)\n\nen_clf.fit(X_train, y_train)\n\nprediction = en_clf.predict(X_test)\ndisplay(prediction, prediction.shape)\n\n# \uc815\ud655\ub3c4\nprint(\"The accuracy for {0} is {1:.3f}\".format(knn.__class__.__name__, accuracy_score(y_test, prediction)))\n\n# \uad50\ucc28\uac80\uc99d \uc2a4\ucf54\uc5b4\ncross_val_scores = cross_val_score(en_clf, X, y, scoring='accuracy', cv = 10, n_jobs=-1, verbose=True)\nprint(\"{}\ubaa8\ub378\uc758 \uad50\ucc28\uac80\uc99d \uc810\uc218 : {} \uc774\uace0 \ud3c9\uade0\uac12\uc740 {}\uacfc \uac19\ub2e4.\".format(knn.__class__.__name__, cross_val_scores, np.mean(cross_val_scores)))","add77609":"def get_ensemble_score(estimator):\n    \"\"\"\n    \uc559\uc0c1\ube14\ub85c \uacb0\uc815\ub41c \ubd84\ub958\uae30\ub97c \uc778\uc790\ub85c \ubc1b\uc544 \ud559\uc2b5\ub370\uc774\ud130\uc640 \ub808\uc774\ube14 \ub370\uc774\ud130\ub85c \ud559\uc2b5 \ud6c4 \n    \uc8fc\uc5b4\uc9c4 \ud14c\uc2a4\ud2b8\ub370\uc774\ud130\uc5d0 \ub300\ud55c \ud3c9\uade0 \uc815\ud655\ub3c4\ub97c \ub9ac\ud134\n    \ud53c\ucc98\ub370\uc774\ud130\uc640 \ub808\uc774\ube14 \uae30\ubc18\uc73c\ub85c \uad50\ucc28\uac80\uc99d \uc810\uc218 \uacc4\uc0b0    \n    \"\"\"\n    name = estimator.__class__.__name__\n    estimator.fit(X_train, y_train)\n    \n    if name ==\"VotingClassifier\": # VotingClassifier\n        display(\"Voting Score : \", estimator.score(X_test, y_test))\n        display(\"ClassifierName\", estimator.estimators)\n    elif name==\"BaggingClassifier\":   # BaggingClassifier\n        display(\"ClassifierName\", estimator.base_estimator.__class__.__name__)\n        prediction = estimator.predict(X_test)\n        print(\"The accuracy for {0} is {1:.3f}\".format(name, accuracy_score(y_test, prediction)))\n    else:  #Boosting\uacc4\uc5f4\n        display(\"ClassifierName\", estimator.__class__.__name__)\n    cross_score= cross_val_score(estimator, X, y, scoring='accuracy', cv = 10, n_jobs=-1, verbose=True)    \n    display(\"Cross Validated Score for {0} : {1:.3f}\".format(name, cross_score.mean()))","db193f77":"from sklearn.ensemble import VotingClassifier\nfrom sklearn.svm import SVC\n\nknn  = KNeighborsClassifier(n_neighbors=10)\n\n# probabily=True\uc608\uce21\uce58\ub97c \ud655\ub960\uac12\uc73c\ub85c \ub9ac\ud134\nrbf = SVC(probability=True, C=0.5, gamma=0.1, kernel='rbf')\n\nlr = LogisticRegression(C=0.05)\nrf = RandomForestClassifier(n_estimators=500, random_state=0)\ndt = DecisionTreeClassifier(random_state = 0)\nnb = GaussianNB()\n#svm = SVC(kernel='linear', probability=True)\n\nclassifiers = [knn,rbf, lr, rf, dt, nb]\n\n# \ub9ac\uc2a4\ud2b8\uc548\uc5d0 \ud29c\ud50c\ub85c \uad6c\uc131\ud574\uc57c \ud558\ubbc0\ub85c \uc911\ubcf5\ub41c \uac12\uc774 \uc788\uc73c\uba74 \uc548\ub428.\n# [('DecisionTreeClassifier', dt), ()...('SVC', svm)] \nestimators = [(cls.__class__.__name__, cls) for cls in classifiers]\n\ndisplay(estimators)\n\nensemble_clf = VotingClassifier(estimators, voting=\"soft\", n_jobs=-1)\nget_ensemble_score(ensemble_clf)","0a8bc2dd":"from sklearn.ensemble import BaggingClassifier\n\n# base_estimator\uc758 \uae30\ubcf8\uac12\uc740 DecisionTree\n# n_neighbors\uc758 \uac2f\uc218\uac00 \ub9ce\ub2e4\uace0 \ud574\uc11c \uad50\ucc28\uac80\uc99d \uc810\uc218\uac00 \uc88b\uc544\uc9c0\uc9c4 \uc54a\uc74c\nmodel = BaggingClassifier(KNeighborsClassifier(n_neighbors=3), random_state=0,n_estimators=700)\nget_ensemble_score(model)","b83eb3e5":"model = BaggingClassifier(base_estimator=DecisionTreeClassifier(), random_state=0, n_estimators=100)\nget_ensemble_score(model)","118810cc":"from sklearn.ensemble import AdaBoostClassifier\nada = AdaBoostClassifier(n_estimators=200, random_state=0, learning_rate=0.1)\nget_ensemble_score(ada)","e887c593":"from sklearn.ensemble import GradientBoostingClassifier\ngrad = GradientBoostingClassifier(n_estimators=500, random_state=0, learning_rate=0.1)\n\n#\uc218\ud589\nget_ensemble_score(grad)","51c4e6b0":"import xgboost as xgb\nxgboost = xgb.XGBClassifier(n_estimators=900, learning_rate=0.1)\nget_ensemble_score(xgboost)","b5f2b5c2":"n_estimators = list(range(100, 1100, 100))\nlearning_rate = [0.05, 0.1, 0.2, 0.3, 0.25, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1]\nhyper ={\"n_estimators\": n_estimators, \"learning_rate\": learning_rate}\n\nmodels = [AdaBoostClassifier()]\nhyper_parameter_tuning(models, hyper)","85b65097":"def show_heatmapAdaBoost(estimator, X, y):\n    \"\"\"\n    \uc2e4\uc81c \ud0c0\uac9f\uac12\uacfc \uc608\uce21\uac12\uc744 \uc624\ucc28\ud589\ub82c\ub85c \ud45c\uc2dc\n    \"\"\"\n    # \uad50\ucc28\uac80\uc99d\uc744 \ud1b5\ud55c \ud53c\ucc98\uac12\uacfc \ub808\uc774\ube14 \uac12\uc744 \ud1b5\ud55c \uc608\uce21\uce58 \uacc4\uc0b0\n    result = cross_val_predict(estimator, X, y, cv = 10)  \n    \n    # \uc2e4\uc81c \ub808\uc774\ube14\uac12\uacfc \uc608\uce21\uac12\uc744 \uc774\uc6a9\ud574 \uc624\ucc28\ud589\ub82c \uc0dd\uc131\n    sns.heatmap(confusion_matrix(y, result), cmap=\"winter_r\", annot=True, fmt='2.0f')\n    return result\ndef main(estimator, X, y):\n    \"\"\"\n    \ub808\uc774\ube14 \ub370\uc774\ud130\uc14b\uacfc \ud0c0\uac9f \ub370\uc774\ud130\uc14b\uc744 \ubc1b\uc544 \ud788\ud2b8\ub9f5\uacfc \ud3c9\uac00\uc9c0\ud45c\ub97c \ub9ac\ud134\n    \"\"\"    \n    result = show_heatmapAdaBoost(ada, X, y)\n    evaluation_result = dict()\n    accuracy, precision, recall = get_clf_eval(ada, y, result)\n    evaluation_result['AdaBoost'] = [accuracy, precision, recall]\n    \n    for k, v in evaluation_result.items():\n        print(\"Evaluation result for {0}, Accuracy : {1:.3f}, Precision : {2:.3f}, Recall : {3:.3f}\".format(k, v[0], v[1], v[2]))","b477b257":"ada = AdaBoostClassifier(n_estimators = 200, learning_rate=0.05, random_state=0)\nmain(ada, X, y)","929d4b04":"rf_clf = RandomForestClassifier(n_estimators=500, random_state=0)\n\n# \ud53c\ucc98\uc640 \ub808\uc774\ube14 \ub370\uc774\ud130 \nrf_clf.fit(X, y)\n\nfig, ax = plt.subplots(nrows=1, ncols=1, figsize=(15, 12))\nfeature_importances = pd.Series(rf_clf.feature_importances_, index = X.columns)\nfeature_importances = feature_importances.sort_values(ascending=True)\nfeature_importances.plot.barh(width=0.8, cmap=cmaps[np.random.randint(1, 178)])\nax.set_title(\"Feature Importance in {}\".format(rf_clf.__class__.__name__))\n\nplt.show()","2e8f3371":"def plot_feature_importance(estimators, X, y):\n    \"\"\"\n    \ubd84\ub958\uae30\ub97c \ud559\uc2b5 \ubc0f \ub808\uc774\ube14 \ub370\uc774\ud130 \ud559\uc2b5 \ud6c4 Feature Importance \uc2dc\uac01\ud654 \n    \"\"\"\n    fig, ax = plt.subplots(nrows=2, ncols=2, figsize=(15, 12))\n    for i in range(2):\n        for j in range(2):\n            if (i == 0) & (j ==0):\n                estimators[0].fit(X, y)\n                feature_importance = pd.Series(estimators[0].feature_importances_, X.columns)\n                feature_importance = feature_importance.sort_values(ascending=True)\n                feature_importance.plot.barh(width=0.8, ax=ax[i, j], cmap=cmaps[np.random.randint(1, 178)])\n                ax[i, j].set_title(\"Feature Importance in {}\".format(estimators[0].__class__.__name__))\n            elif (i==0) & (j ==1):\n                estimators[1].fit(X, y)\n                feature_importance = pd.Series(estimators[1].feature_importances_, X.columns)\n                feature_importance = feature_importance.sort_values(ascending=True)\n                feature_importance.plot.barh(width=0.8, ax=ax[i, j], cmap=cmaps[np.random.randint(1, 178)])\n                ax[i, j].set_title(\"Feature Importance in {}\".format(estimators[1].__class__.__name__))\n            elif (i==1) & (j ==0):\n                estimators[2].fit(X, y)\n                feature_importance = pd.Series(estimators[2].feature_importances_, X.columns)\n                feature_importance = feature_importance.sort_values(ascending=True)\n                feature_importance.plot.barh(width=0.8, ax=ax[i, j], cmap=cmaps[np.random.randint(1, 178)])\n                ax[i, j].set_title(\"Feature Importance in {}\".format(estimators[2].__class__.__name__))\n            elif (i==1) & (j ==1):\n                estimators[3].fit(X, y)\n                feature_importance = pd.Series(estimators[3].feature_importances_, X.columns)\n                feature_importance = feature_importance.sort_values(ascending=True)\n                feature_importance.plot.barh(width=0.8, ax=ax[i, j], cmap=cmaps[np.random.randint(1, 178)])\n                ax[i, j].set_title(\"Feature Importance in {}\".format(estimators[3].__class__.__name__))\n    plt.show()        ","cc65727a":"classfiers = ['RandomForest', 'AdaBoost', 'GradientBoost', 'XGB']\nrf_clf = RandomForestClassifier(n_estimators=500, random_state=0)\nada_clf = AdaBoostClassifier(n_estimators=200, learning_rate=0.05, random_state=0)\ngd_clf = GradientBoostingClassifier(n_estimators=500, learning_rate=0.1, random_state=0)\nxgb_clf = xgb.XGBClassifier(n_estimators=900, learning_rate=0.1, random_state=0)\nestimators = [rf_clf, ada_clf, gd_clf, xgb_clf]\n\nplot_feature_importance(estimators, X, y)","8499a7e9":"<span style=\"color:red\">\uac1d\uc2e4\ub4f1\uae09\uc5d0 \uc0c1\uad00\uc5c6\uc774 \uc5f0\ub839\uc774 \ub192\uc544\uc9c8\uc218\ub85d \uc0dd\uc874\uc728\uc740 \uac10\uc18c<\/span>\n\n## Family_Size and Alone\nFamily_Size : \ub3d9\ubc18 \uac00\uc871\uc218(SibSp + Parch)\n\nAlone : \ud63c\uc790\uc5ec\ubd80(1 - \ud63c\uc790, 0 - \ub3d9\ubc18\uac00\uc871\uc788\uc74c)","87ffaf1a":"* Age \ud53c\ucc98 \ub110\uac12 \ub300\uce58\ub97c \uc704\ud55c \uc791\uc5c5","9c256398":"\uc6b0\ub9ac\ub294 \ub79c\ub364\ud3ec\ub808\uc2a4\ud2b8,AdaBoost\uc640 \uac19\uc740 \ub2e4\uc591\ud55c \ubd84\ub958\uae30\uc5d0 \ub300\ud55c \uc911\uc694 \ud53c\ucc98\ub4e4\uc744 \uc54c \uc218 \uc788\ub2e4.\n\n#### Observations:\n\n1)\uac00\uc7a5 \uc911\uc694\ud55c \ud53c\ucc98 -  Initial,Fare_cat,Pclass,Family_Size\uc21c.\n\n2)\uc131\ubcc4 \ud53c\ucc98\ub294 \ub354 \uc774\uc0c1 \uc911\uc694\ud574\ubcf4\uc774\uc9c0\uac00 \uc54a\uc2b5\ub2c8\ub2e4. Sex\uc640 Pclass\uc870\ud569\ud574\ubcf8 \uac83\uc744 \ubcf4\uba74 \ud655\uc2e4\ud788 \uad6c\ubcc4\ub418\ub294 \ud53c\ucc98\uc758 \uc870\ud569\uc73c\ub85c \ubcf4\uc785\ub2c8\ub2e4.\n\n\uc131\ubcc4\uc740 RandomForest\uc5d0\uc11c\ub294 \uc911\uc694\ud55c \ud53c\ucc98\ub85c \uac04\uc8fc\ub429\ub2c8\ub2e4.\n\n\ud558\uc9c0\ub9cc, Initial\ud53c\ucc98\uac00 \ub9ce\uc740 \ubd84\ub958\uae30\uc5d0\uc11c \ub9e8 \uc0c1\ub2e8\uc5d0 \uc704\uce58\ud568\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\ud788\ud2b8\ub9f5\uc5d0\uc11c \ubcf8\uac83 \ucc98\ub7fc Sex\uc640 Initial\uc740 \uc591\uc758 \uc0c1\uad00\uad00\uacc4\ub97c \uac16\uace0\uc788\uc2b5\ub2c8\ub2e4. \n\n\uadf8\ub798\uc11c \uc6b0\ub9ac\ub294 \uc774 \ub450 \ud53c\ucc98\ub97c Sex\ub85c \uac04\uc8fc\ud574\ub3c4 \ubb34\ubc29\ud558\uc9c0 \uc54a\uc744\uae4c\uc694?\n\n3)\uc720\uc0ac\ud558\uac8c Pclass\uc640 Fare_cat\ub3c4 \uc2b9\uac1d\uc758 \uc0c1\ud0dc\uc640 \uad00\ub828\ub418\uc5b4 \uc788\uace0, Alone, Parch \uadf8\ub9ac\uace0 SibSp\ub294 Family_Size\uc640 \uc5f0\uad00\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.","a4fe97cc":"## Embarked(\uacbd\uc720 \ud56d\uad6c)--> \ubc94\uc8fc\ud615 \uac12","3a1ce011":"* crosss vlaidation example","101ec58b":"* **\uc131\ubcc4(Sex)\uc640 \uac1d\uc2e4\ub4f1\uae09(Pclass)\uc744 \uc870\ud569\ud558\uc5ec \uc0dd\uc874\ub960**","4cb4bacc":"### How many Survived??","a45949ad":"### Gaussian Naive Bayes  v.s Random Forests","28ab4a55":"### **\ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd**\n\n\uba38\uc2e0\uba38\ub2dd \ubaa8\ub378\uc740 \ube14\ub799\ubc15\uc2a4\uc640 \uc720\uc0ac\ud569\ub2c8\ub2e4. \uc774 \ube14\ub799\ubc15\uc2a4\ub97c \uc704\ud55c \uae30\ubcf8\uac12 \ud30c\ub77c\ubbf8\ud130\uac00 \uc788\ub294\ub370, \uc774 \ud30c\ub77c\ubbf8\ud130\ub97c \ubcc0\uacbd\uc744 \ud1b5\ud574 \uc880 \ub354 \uc131\ub2a5\uc774 \uc88b\uc740 \ubaa8\ub378\uc744 \ub3c4\ucd9c\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\nSVM\ubaa8\ub378\uc5d0\uc11c C \ud30c\ub77c\ubbf8\ud130, gamma\ud30c\ub77c\ubbf8\ud130\uac00 \ub300\ud45c\uc801\uc774\uba70, \ubd84\ub958\uae30\uc5d0 \ub530\ub77c\uc11c \uc800\ub9c8\ub2e4\uc758 \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130\uac00 \uc874\uc7ac\ud569\ub2c8\ub2e4.\n\n\uc774\ubc88\uc5d4 \uc774\ub7ec\ud55c \uac12\ub4e4\uc744 \ubcc0\uacbd\ud574\ubd04\uc73c\ub85c\uc368 \ubaa8\ub378 \uc131\ub2a5\uc744 \ud5a5\uc0c1\uc2dc\ud0a4\ub294 \ubc29\ubc95\uc744 \uace0\ucc30\ud574\ubcf4\uace0\uc790 \ud569\ub2c8\ub2e4.\n\n#### SVM","2dad55b2":"* **\uc88c\uc11d\ub4f1\uae09\uc73c\ub85c \ubcf8 \uc131\ubcc4 \uc0dd\uc874\ub960**","dc27bcdd":"## Fare--> \uc5f0\uc18d\ud615 \ud53c\ucc98\n* \uac1d\uc2e4\ub4f1\uae09\ubcc4 \uc694\uae08\uc758 \ud788\uc2a4\ud1a0\uadf8\ub7a8\uacfc Kde Plot\uc744 \ud568\uaed8 \uc2dc\uac01\ud654\n* Fare\uc758 \ucd5c\ub300\uac12, \ucd5c\uc18c\uac12, \ud3c9\uade0\uac12","96f385c6":"\uba4b\uc9c4 \ub9d0\uc785\ub2c8\ub2e4.\n\n\"\ub54c\ub54c\ub85c \uc778\uc0dd\uc740 \uc794\uc778\ud55c \uc720\uba38\uac10\uac01\uc774 \uc788\uc5b4, \uac00\ub2a5\ud558\ub2e4\uba74 \ucd5c\uc545\uc758 \uc21c\uac04\uc5d0\ub3c4 \uc5ec\ub7ec\ubd84\uc774 \uc5bb\uace0\uc790 \ud558\ub294\uac83\uc744 \uc90d\ub2c8\ub2e4.\" \n\nOn the verge of COVID-19 pandemic, keep your chin up!!","2ea61c80":"#### Random Forests","fba63661":"\"\ub3c8\uc774 \ubaa8\ub4e0\uac83\uc744 \ub9d0\ud574\uc900\ub2e4. Money talks.\"\n\n\uc2b9\uc120\ud55c \uc2b9\uac1d\uc218\ub3c4 \uac00\uc7a5 \ub9ce\uace0,\uc0dd\uc874\ub960\ub3c4 \uac00\uc7a5 \ub0ae\uc740 \uac1d\uc2e4\uc740 3\ub4f1\uae09 \uac1d\uc2e4,\uc0dd\uc874\ub960\uc774 \uac00\uc7a5 \uc88b\uc740 \uac1d\uc2e4\uc740 1\ub4f1\uae09 \uac1d\uc2e4\uc774\ub2e4. \n\n\uc804\uccb4 \uc0ac\ub9dd\uc790\uc758 70%\uc774\uc0c1\uc774 3\ub4f1 \uac1d\uc2e4\uc5d0\uc11c \ubc1c\uc0dd\ud588\uc73c\uba70, \ubc30\uc758 \uad6c\uc870\uc0c1 \uac1d\uc2e4\ub4f1\uae09\uc774 \uc88b\uc740 \uacf3\uc740 \uad6c\uc870\ub418\uae30\uac00 \uc6a9\uc774\ud55c \uc0c1\uce35\uc5d0 \uc874\uc7ac\ud558\ub294 \ubc30\uc758 \ud2b9\uc131\uc744 \ubcfc\ub54c \n\n\uad6c\uc870\uac00 \uc6a9\uc774\ud558\uc9c0 \uc54a\uc558\uc73c\ub9ac\ub77c\ub294 \uac83\uc744 \ucd94\uce21\ud574\ubcfc \uc218 \uc788\ub2e4.","e2433a96":"## Part2: \ud53c\ucc98\uc5d4\uc9c0\ub2c8\uc5b4\ub9c1 \ubc0f \ub370\uc774\ud130 \uc815\uc81c\n* \ud53c\ucc98\uc758 \ucd94\uac00 \ubc0f \uc0ad\uc81c\n* \uc911\ubcf5\ub41c \ud53c\ucc98 \ud639\uc740 \ubd88\ud544\uc694\ud55c \ud53c\ucc98 \uc0ad\uc81c","2984e3a4":"**\ubaa8\ub4c8\ud654**","eaf9f5f1":"* **Importing all the required packages**","61f104cb":"\ubc94\uc8fc\ud615\ud53c\ucc98\ub4e4\uac04\uc758 \uad6c\ubd84\uc744 \uc27d\uac8c \ud558\uae30 \uc704\ud574\uc11c **FactorPlot**\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \n\n**CrossTab** \ubc0f **FactorPlot**\uc744 \ud1b5\ud574 \ud55c \ub208\uc5d0 \uac70\uc758 \ub300\ubd80\ubd84\uc758 \uc5ec\uc131\uc774 \uad6c\uc870\ub418\uc5c8\uc74c\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. (\uac1d\uc2e4\ub4f1\uae09\uc774 1\ub4f1\uae09\uc778 \uacbd\uc6b0\uc5d4 3\uba85\uc758 \uc5ec\uc131\ubd84\ub9cc \uc0dd\uc874\ud558\uc9c0 \ubabb\ud568)\n\n\ubcf4\uc2dc\ub294 \ubc14\uc640 \uac19\uc774 \uac1d\uc2e4\ub4f1\uae09(Pclass)\uc640 \uc131\ubcc4\uc740 \uc911\uc694\ud55c \ud53c\ucc98\ub85c \ubcf4\uc785\ub2c8\ub2e4.\ub2e4\ub978 \ud53c\ucc98\ub3c4 \uac19\uc774 \ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.","44b420b0":"**Family_Size=0  - \ub3d9\ubc18\uac00\uc871\uc5c6\uc774 \ud63c\uc790\uc778 \uc2b9\uc120\uac1d** \n* \uac00\uc871\uc5c6\uc774 \ud63c\uc790 \uc2b9\uc120\ud55c \ud0d1\uc2b9\uac1d\uc758 \uacbd\uc6b0\ub294 \uc0dd\uc874\ub960\uc774 \ud604\uc800\ud558\uac8c \ub5a8\uc5b4\uc9d0(Alone\uac12\uc774 1)\n* Family_Size\uac00 4\uc778 \uc774\uc0c1\uc778 \uacbd\uc6b0\ub3c4 \uc0dd\uc874\ub960\uc774 \uac10\uc18c\ud568(\uc608\uce21\ubaa8\ub378\uc744 \uc0dd\uc131\uc2dc\uc5d0 \uc911\uc694\ud55c \ud53c\ucc98\ub85c \uc791\uc6a9\ud560 \uac83\uc73c\ub85c \ud310\ub2e8\ub428)","dc2edb96":"## \ud53c\ucc98 \ubd84\uc11d","a32eceae":"* **\ud568\uc218\ud654**","d2d4d164":"\uc704\uc5d0\uc11c\ub3c4 \ubcf4\ub4ef\uc774, Age\uc758 \uacbd\uc6b0 177\uac1c\uc758 \ub110\uac12\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \ub110\uac12\uc744 \ud3c9\uade0\uac12\uc73c\ub85c \ub300\uce58\ud558\uae30 \uc704\ud574\uc120 \uba87\uac00\uc9c0 \ubb38\uc81c\uc810\uc774 \uc788\uc2b5\ub2c8\ub2e4.\n\n\uc5f0\ub839\ub300\uac00 \ub2e4\uc591\ud55c \uc2b9\uac1d\ub4e4\uc774 \uc788\uae30\ub54c\ubb38\uc5d0 \uc544\uc774\ub4e4\uc758 \uacbd\uc6b0\uc5d0\ub3c4 \ud3c9\uade0\uac12\uc73c\ub85c \ub300\uce58\ub420 \uc218 \uc788\ub294 \uac00\ub2a5\uc131\uc774 \uc788\uc2b5\ub2c8\ub2e4. \n\n\uc774\ub7ec\ud55c \uac00\ub2a5\uc131\uc744 \uc870\uae08\uc740 \ub354 \uc5c6\uc560\uae30 \uc704\ud574, **\uc774\ub984**\uc5d0 \ub098\uc624\ub294 \uc874\uce6d\uc744 \uac00\uc9c0\uace0 \uc5f0\ub839\ub300\ub97c \ucd94\ub860\ud574\ubcf4\uace0\uc790 \ud569\ub2c8\ub2e4.","910362c2":"3\ub4f1\uae09 \uac1d\uc2e4\uc5d0 3\uc778 \uc774\uc0c1\uc758 \ub3d9\ubc18\uac00\uc871\uc774 \uc9d1\uc911\ub418\uc5b4 \uc788\uc74c\uc744 \ubcf4\uc5ec\uc900\ub2e4. \n\n1\ub4f1\uae09 \uac1d\uc2e4 \ud639\uc740 2\ub4f1\uae09 \uac1d\uc2e4\uc5d0 3\uc778 \uc774\uc0c1\uc758 \ub3d9\ubc18\uac00\uc871\uc744 \uc704\ud55c \uac1d\uc2e4\uc774 \uc900\ube44\ub418\uc9c0 \uc54a\uc558\uc74c\uc744 \ucd94\ub860\uc774 \uac00\ub2a5\ud558\ub2e4. \uc65c?\n\nBusiness is business. business is first before human life.","13152032":"* \uc5f0\ub839\ub300\ub85c \ubcf4\ub294 \uc0dd\uc874\uc790 \ud788\uc2a4\ud1a0\uadf8\ub7a8 ","8dcaf3b6":"**True Negative\uc640 True Positive\uac12\uc774 \uc99d\uac00\ud588\uc73c\uba70,\uc0c1\ub300\uc801\uc73c\ub85c False Negative, False Positive\uac00 \uc904\uc5c8\ub2e4.**\n\n1.\uc0dd\uc874\uc790\uc640 \uc0ac\ub9dd\uc790\ub97c \uc815\ud655\ud558\uac8c \ucc3e\uc544\ub0b4\ub294\uac83\uc774 \uc815\ud655\ub3c4 , \uc815\ubc00\ub3c4\uac00 \ub192\uc544\uc9d0.\n\n2.\uc0dd\uc874\ud588\ub294\ub370 \uc0ac\ub9dd\ud588\ub2e4\uace0 \uc608\uce21\ud558\ub294 \uac83(False negative)\uac00 SVM\ubaa8\ub378\ubcf4\ub2e4 \uc904\uc5c8\uace0, \uc0ac\ub9dd\ud588\ub294\ub370 \uc0dd\uc874\ud588\ub2e4\uace0 \uc608\uce21\ud55c \uac83(Falise Positive)\ub3c4 \uc904\uc5c8\uc74c\n\n3.\uacb0\uacfc\uc801\uc73c\ub85c \uc815\ud655\ub3c4\uc640 \uc815\ubc00\ub3c4\uac00 \ub192\uc544\uc9d0.","ddfa2395":"\uc0ac\uc6b0\uc2a4 \ud584\ud2bc(S)\uc5d0 \ud0c4 \uc2b9\uac1d\uc758 \uc0dd\uc874\ub960\uc740 \ud604\uc800\ud788 \ub0ae\uc740 \ubc18\uba74, \uc170\ub974\ubd80\ub974\uc625\ud2b8\ube4c(C - \ud504\ub791\uc2a4 \ud56d\uad6c\ub3c4\uc2dc)\uc5d0\uc11c \ud0d1\uc2b9\ud55c \uc2b9\uac1d\uc758 \uc0dd\uc874\ub960\uc740 \ub192\ub2e4.","0fb2e7db":"38.4\ud37c\uc13c\ud2b8\uc758 \uc2b9\uc120\ud55c \uc778\uc6d0\ub9cc \uc0b4\uc544\ub0a8\uc558\uc73c\uba70,\uc0dd\uc874\ub960 \uc608\uce21\uc5d0 \uc601\ud5a5\uc744 \uc8fc\ub294 \ud53c\ucc98\ub97c \ucd94\uac00\uc801\uc73c\ub85c \ud30c\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \n* Age, Sex , Embarked(\uc2b9\uc120\ud55c \ud56d\uad6c) , Pclass(\uac1d\uc2e4\ub4f1\uae09)","71f21ea0":"## Part1: Exploratory Data Analysis(EDA)","5b736329":"### Age\ud53c\ucc98 \ub110\uac12 \ucc98\ub9ac ","f79c4d3a":"### \uba38\uc2e0\ub7ec\ub2dd \ubaa8\ub378 \uc120\uc5b8","715298bf":"* **Modulization**","d336ae30":"#### Observations:\n\n1)\uac1d\uc2e4\ub4f1\uae09 \ubc0f \uc131\ubcc4\uc5d0 \uc0c1\uad00\uc5c6\uc774 10\uc0b4 \uc774\ud558\uc758 \uc544\uc774\uc758 \uacbd\uc6b0\uc5d4, \uc0dd\uc874\ub960\uc774 \uc0ac\ub9dd\ub960\uc744 \uc55e\uc9c0\ub978\ub2e4. (\uc5b4\ub9b0 \uc544\uc774\ub4e4\uc744 \uba3c\uc800 \ub300\ud53c\uc2dc\ud0a8\uac83\uc744 \uc54c \uc218 \uc788\ub2e4)\n\n2)1\ub4f1\uae09 \uac1d\uc2e4\uc5d0 \uc788\ub294 \uc5f0\ub839\ub300\uac00 20\ub300 ~ 50\ub300 \uc2b9\uac1d\uc758 \uc0dd\uc874\ub960\uc774 \uc5ec\uc131\uc5d0 \ube44\ud574 \ub192\uc740 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4\n\n3)\ub0a8\uc790\uc758 \uacbd\uc6b0\uc5d4, \ub192\uc740 \uc5f0\ub839\ub300 \uc77c\uc218\ub85d \uc0dd\uc874\ub960\uc774 \uac10\uc18c\ud568\uc744 \uc54c \uc218 \uc788\ub2e4","7a250c04":"* **Read Evaluate Print Loop**","a8926986":"\ud0c0\uc774\ud0c0\ub2c9\ud638 \uce68\ubab0\uc740 \ud574\uc591 \uc7ac\ub09c \uc5ed\uc0ac\uc0c1 \uac00\uc7a5 \uc5c4\uccad\ub09c \uc7ac\uc559\uc911\uc758 \ud558\ub098\uc785\ub2c8\ub2e4. 1912\ub144 4\uc6d4 15\uc77c, \uccab \ucd9c\ud56d\ud55c \ud0c0\uc774\ud0c0\ub2c9\ud638\ub294 \ube59\uc0b0\uacfc \ucda9\ub3cc \ud6c4 2224\uba85\uc758 \uc2b9\uac1d\uacfc \uc2b9\ubb34\uc6d0 \uc911\uc5d0 1502\uba85\uc774 \uc0ac\ub9dd\ud558\uc5ec, \ub9d0 \uadf8\ub300\ub85c \"\uc8fd\uc74c\uc758 \ud0c0\uc774\ud0c0\ub2c9\ud638\" \ub77c\uace0 \ubd88\ub9bd\ub2c8\ub2e4. \n90\ub144\ub300 \ub9d0\uc5d0\uc11c 2000\ub144\ub300 \ucd08\ubc18, \uc6b0\ub9ac\uc5d0\uac8c \ub808\uc624\ub098\ub974\ub3c4 \ub514\uce74\ud504\ub9ac\uc624\ub85c \uc798 \uc54c\ub824\uc9c4 \uc601\ud654 \ud0c0\uc774\ud0c0\ub2c9\uc774 \uc774 \ud574\uc591 \uc7ac\ub09c\uc744 \ud14c\ub9c8\ub85c \ud55c \uc601\ud654\uc774\uae30\ub3c4 \ud569\ub2c8\ub2e4.\n\n\ubc30 \uac74\uc870\uc5d0\ub9cc 7\ucc9c5\ubc31\ub9cc\ub2ec\ub7ec\uac00 \ub4e4\uc5c8\uace0, \ucda9\ub3cc\ub85c \uc778\ud55c \uce68\ubab0\ub85c \ubc14\ub2f7\uc18d\uc73c\ub85c \uac00\ub77c\uc549\uc558\uace0, \ud604\uc7ac\ub3c4 \ub300\uc11c\uc591 4000\ubbf8\ud130 \ubc14\ub2e4\uc18d\uc5d0 \uac00\ub77c\uc549\uc544 \uc788\uc2b5\ub2c8\ub2e4.\n\uc0ac\uace0\uc6d0\uc778\uc740 \ud45c\uba74\uc801\uc73c\ub85c \ube59\uc0b0\uacfc\uc758 \ucda9\ub3cc\ub85c \uc54c\ub824\uc838\uc788\uc9c0\ub9cc , \ucd5c\uadfc\uc758 \uc5f0\uad6c\uc5d0 \uc758\ud558\uba74 \ubd88\ub7c9\uc790\uc7ac\ub97c \uc0ac\uc6a9\ud55c \uac83\uc73c\ub85c \uacb0\uacfc\uac00 \ubc1c\ud45c\ub41c \uc790\ub8cc\ub3c4 \uc788\uc74c\uc744 \uc544\uc168\uc73c\uba74 \ud569\ub2c8\ub2e4. \n\n[\uad00\ub828 \uae30\uc0ac](https:\/\/news.joins.com\/article\/3112549)\n\n2014\ub144 4\uc6d416\uc77c \uc6b0\ub9ac\ub098\ub77c \uc9c4\ub3c4\ud574\uc5ed\uc5d0\uc11c \uce68\ubab0\ud55c \uc138\uc6d4\ud638( Sinking of MV Sewol)\uc758 \uc7ac\ub09c\uc0ac\uace0\uac00 \ub300\ucda9\uc8fc\uc758\uc640 \uc778\uc7ac\uc600\ub2e4\ub294 \uc0ac\uc2e4\uc740 \ub2e4 \uc544\uc2e4\uac81\ub2c8\ub2e4. \n\n\uc774 \ucee4\ub110\uc758 \ubaa9\uc801\uc740 \ub2e8\uc21c\ud569\ub2c8\ub2e4. \uc0dd\uc874\uc790 \uc608\uce21 \ubaa8\ub378\uc744 \uc0dd\uc131\ud558\ub294 \uc808\ucc28 \ubc0f \uc774\uc5d0 \ud544\uc694\ud55c \ud53c\ucc98\ub97c \ucd94\uac00 \ubc0f \ud655\uc778\ud558\ub294 \ubc29\ubc95\uc744 \uc775\ud788\ub294\ub370 \uc788\uc2b5\ub2c8\ub2e4.","d9a9d978":"**Best parameter :{'learning_rate': 0.05, 'n_estimators': 200}**\n\n**Best Score : 0.83164983164983164**\n\n**Best Estimator : AdaBoostClassifier(algorithm='SAMME.R', base_estimator=None,learning_rate=0.05, n_estimators=200, random_state=None)**","bf60a480":"# Part3: \uc608\uce21 \ubaa8\ub378\ub9c1\n\n\uc608\uce21\ud574\ubcf4\uace0\uc790 \ud558\ub294 ML\ubaa8\ub378:\n\n1)Logistic Regression\n\n2)Support Vector Machines(Linear and radial)\n\n3)Random Forest\n\n4)K-Nearest Neighbours\n\n5)Naive Bayes\n\n6)Decision Tree\n\n7)Logistic Regression","afce2741":"## Boosting\n\n\ubd80\uc2a4\ud305 \uc54c\uace0\ub9ac\uc998\uc740 \uc5ec\ub7ec \uac1c\uc758 \uc57d\ud55c \ud559\uc2b5\uae30(weak learner)\ub97c \uc21c\ucc28\uc801\uc73c\ub85c \ud559\uc2b5-\uc608\uce21\ud558\uba74\uc11c \uc798\ubabb \uc608\uce21\ud55c \ub370\uc774\ud130\uc5d0 \uac00\uc911\uce58 \ubd80\uc5ec\ub97c \ud1b5\ud574 \uc624\ub958\ub97c \uac1c\uc120\ud574 \ub098\uac00\uba74\uc11c \ud559\uc2b5\ud558\ub294 \ubc29\uc2dd\n\n\uc131\ub2a5\uc740 \uc88b\uc9c0\ub9cc, \uc218\ud589\uc2dc\uac04\uc774 \uc624\ub798\uac78\ub9b0\ub2e4. \uc65c\ub0d0\ud558\uba74 \uc57d\ud55c \ud559\uc2b5\uae30\ub97c \uc21c\ucc28\uc801\uc73c\ub85c \ud559\uc2b5\ud558\ub294\ub370 ,\ub370\uc774\ud130\ub97c \uc77d\uace0 \ub370\uc774\ud130\uc5d0 \ub300\ud574\uc11c \uc798\ubabb \uc608\uce21\ud55c \ub370\uc774\ud130\uc5d0 \ub300\ud574\uc11c \uac00\uc911\uce58\ub97c \ubd80\uc5ec\ud558\uace0 \uadf8 \ub2e4\uc74c\uc5d0 \ub2e4\ub978 \ud559\uc2b5\uae30\uac00 \ub610 \uadf8 \ub370\uc774\ud130\ub97c \ud559\uc2b5\uc744 \uc9c4\ud589\ud55c\ub2e4. \n\n1. **AdaBoost(Adaptive Boosting)**\n* AdaBoost\uc758 Default estimator\ub294 DecisionTree\uc774\uc9c0\ub9cc, \ubcc0\uacbd\uc774 \uac00\ub2a5\n2. **Stochastic Gradient Boosting**\n* \uc57d\ud55c \ud559\uc2b5\uae30\ub85c\uc11c DecisionTree\uc774\ub2e4.\n3. **XGBoost**","f4eb0f0d":"## \uc0dd\uc874\ub960\uc5d0 \uc601\ud5a5\uc744 \uc904\uc218 \uc788\ub294 \ud53c\ucc98 :\n* **Sex:** \ub0a8\uc790\uc5d0 \ube44\ud574 \uc5ec\uc131\uc758 \uc0dd\uc874\ube44\uc728\uc774 \ud6e8\uc52c \ub192\ub2e4.\n* **Pclass:**1\ub4f1\uae09 \uac1d\uc2e4\uc758 \uc2b9\uac1d\uc758 \uc0dd\uc874\ub960\uc774 \ub192\ub2e4\n* **3\ub4f1\uae09 \uac1d\uc2e4\uc758 \uacbd\uc6b0\ub294 \uc0dd\uc874\ub960\uc774 \ub0ae\uc74c**. \n* **Age:** 5\uc138 \uc774\ud558\uc758 \uc544\uc774\uc758 \uacbd\uc6b0\ub294 \uc0dd\uc874 \ud560 \uac00\ub2a5\uc131\uc774 \ub192\uc558\uc74c. 15 ~ 35\uc138\uc758 \uc5f0\ub839\ub300\uc758 \uc0dd\uc874\ub960\uc774 \ub0ae\uc558\uc74c\n* **Embarked:** \uc0ac\uc6b0\uc2a4\ud584\ud2bc(S)\uc5d0 \uc2b9\uc120\ud55c \uc2b9\uac1d\uc758 \ub300\ubd80\ubd84\uc740 3\ub4f1\uae09 \uac1d\uc2e4\uc5d0 \ubb35\uc5c8\uc73c\uba70, \ub9ce\uc740 \uc0ac\ub9dd\uc790\uac00 \ub098\uc654\uc74c. \ubc18\uba74\uc5d0 \ud504\ub791\uc2a4 \uc170\ub974\ubd80\ub974\uc625\ud2b8\ube4c(C)\uc758 \uc2b9\uac1d\ub4e4\ub3c4 3\ub4f1\uae09 \uac1d\uc2e4\uc5d0 \ub9ce\uc558\uc73c\ub098 \uc0ac\uc6b0\uc2a4\ud584\ud2bc\ubcf4\ub2e4\ub294 \uc0dd\uc874\ub960\uc774 \ub354 \ub098\uc558\uc74c.\n* **Parch+SibSp:** \ub3d9\ubc18 \uac00\uc871\uc758 \uc218\uac00 \uc0dd\uc874\ub960\uc5d0 \uc601\ud5a5\uc744 \uc8fc\ub294\uac83\uc73c\ub85c \ud655\uc778\uc774 \ub428(3\uba85 \uc774\uc0c1\uc758 \ub3d9\ubc18 \uac00\uc871\uc774 \uc788\uc744 \uacbd\uc6b0\uc5d4 \uc0dd\uc874 \ud560 \uac00\ub2a5\uc131\uc774 \ub0ae\uc544\uc9d0), \n3\uba85 \uc774\ud558\uc778 \uacbd\uc6b0\ub294 \uc624\ud788\ub824 \uc0dd\uc874 \uac00\ub2a5\uc131\uc774 \uc88b\uc740 \uac83\uc73c\ub85c \ud655\uc778\ub428.","4f437e39":"### Observations:\n1)\uc804\uccb4 \uc2b9\uac1d\uc758 60\ud37c\uc13c\ud2b8\uac00 \ub118\ub294 \uc2b9\uac1d\uc774 \uc0ac\uc6b0\uc2a4\ud584\ud2bc(S)\uc5d0\uc11c \uc2b9\uc120\ud55c \uc2b9\uac1d\uc774\uba70, 50% \uc774\uc0c1\uc758 \uc2b9\uac1d\uc774 3\ub4f1\uae09 \uac1d\uc2e4\uc5d0 \ud22c\uc219\ud588\uc73c\uba70, 60\ud37c\uc13c\ud2b8 \uac00\uae4c\uc6b4 \uc2b9\uac1d\uc774 \uc0ac\ub9dd\ud55c \uac83\uc73c\ub85c \ud30c\uc545\ub428\n\n2)\uac1d\uc2e4\ub4f1\uae09 1\ub4f1\uae09, 2\ub4f1\uae09\uc5d0 \ubb35\uc740 \uc2b9\uac1d\uc758 \uc0dd\uc874\ub960\uc774 \ub192\ub2e4. \uc0ac\ub9dd\uc790\uac00 3\ub4f1\uae09 \uac1d\uc2e4\uc5d0 \uc9d1\uc911\ub418\uc5b4 \uc788\uace0, \uac1d\uc2e4\uc758 \uad6c\uc870\uc0c1 \uc544\ub798\uce35\uc5d0 \uc704\uce58\ud560\uc218 \ubc16\uc5d0 \uc5c6\uc5b4 \uad6c\uc870\uc758 \uc190\uae38\uc774 \ubbf8\uce58\uc9c0 \ubabb\ud588\uc74c\uc744 \uc54c \uc218 \uc788\ub2e4.\n\n3)\uc0ac\uc6b0\uc2a4\ud584\ud2bc\uc5d0\uc11c \uc2b9\uc120\ud55c \uc2b9\uac1d\uc758 60% \uc774\uc0c1\uc740 3\ub4f1\uae09 \uac1d\uc2e4\uc5d0 \ud22c\uc219\ud588\uc73c\uba70, \ub300\ubd80\ubd84\uc774 \uac00\ub09c\ud55c \uc774\uc8fc\ubbfc\uc774\uc9c0 \uc54a\uc558\uc744\uae4c \ud558\ub294 \ucd94\uce21\uc774\ub2e4. \n\n4)\ud038\uc2a4\ud0c0\uc6b4(Q)\uc5d0\uc11c \uc2b9\uc120\ud55c \uc2b9\uac1d\uc758 90%\uc774\uc0c1\uc740 3\ub4f1\uae09 \uac1d\uc2e4\uc5d0 \ud22c\uc219\ud588\uc73c\uba70,50%\uc774\uc0c1\uc774 \uc0ac\ub9dd.","8e13b6ff":"## Bagging\n\n\uc720\uc0ac\ud55c \uc5ec\ub7ec\uac1c\uc758 \ubd84\ub958\uae30\uac00 \ud55c \ub370\uc774\ud130\uc14b\uc744 \ubc14\ud0d5\uc73c\ub85c \ud559\uc2b5\ud558\uace0\ud558\ub294 \ub370\uc774\ud130\uc14b\uc744 \uac01\uac01 \uc0d8\ud50c\ub9c1 \ube44\uc728\uc744 \ub2ec\ub9ac\ud558\uc5ec \uc0d8\ud50c\ub9c1\ud55c \ub370\uc774\ud130\uc14b\uc744 \uac00\uc9c0\uace0 \ud559\uc2b5 \ubc0f \uc608\uce21\ud558\uc5ec \uc608\uce21 \uacb0\uacfc\uac12\uc758 \ud3c9\uade0\uac12\uc73c\ub85c \ucd5c\uc885 \uc608\uce21 \uacb0\uacfc\uac12\uc744 \ucde8\ud558\ub294 \ubc29\ubc95\n\n#### Bagged KNN\n\n\ubaa8\ub378\uac04\uc758 \uc608\uce21 \uacb0\uacfc\uac12\uc758 \ubcc0\ub3d9\uc131\uc774 \ud070 \uacbd\uc6b0,\ubc30\uae45\uc774 \uac00\uc7a5 \uc798 \ub3d9\uc791\ud569\ub2c8\ub2e4.(\uacb0\uc815\ud2b8\ub9ac \ud639\uc740 RandomForest\uae30\ubc95\uc774 \ud55c \uc608\uc784\n\nDecision Tree \ud639\uc740 Random Forests\uac00 \ubc30\uae45\uc758 \uc608\uc774\uba70, KNN\ucd5c\uadfc\uc811 \uc774\uc6c3\uae30\ubc95\uc5d0 **n_neighbors**\ub97c \uac00\ub2a5\ud558\ub2e4\uba74 \uc791\uc740 \uac12\uc73c\ub85c \uc801\uc6a9","79fa56f4":"## Age_band(\uc5f0\ub839\ub300)\n\n#### \ub098\uc774 \ud53c\ucc98 \uace0\ub824\uc0ac\ud56d:\n\n**\uc5f0\uc18d\ud615 \uac12\uc744 \ubc94\uc8fc\ud615 \uac12\uc73c\ub85c \ubcc0\ud658\uc744 \uace0\ub824(\uad6c\uac04\ubd84\ud560 \ud639\uc740 \uc774\uc0b0\ud654, binning)**\n\n\ub098\uc774\uc758 \ucd5c\ub300\uac12\uc774 80\uc774\uace0, 0\uc138\ubd80\ud130 80\uc138\uae4c\uc9c0 \uc7a1\uc544\uc11c 5\uac1c\uc758 \ube48\uc73c\ub85c \ub098\ub204\uba74 80\/ 5 = 16\uac1c\uc758 \ube48\uc73c\ub85c \ub098\ub260\uc218 \uc788\ub2e4","9e5831a8":"\uc694\uae08\ub300(Fare-Range)\uac00 \uace0\uc561\uc73c\ub85c \uc62c\ub77c\uac08\uc218\ub85d \uc0dd\uc874\ub960\ub3c4 \ub192\uc544\uc9d0\uc744 \uc54c\uc218\uc788\ub2e4. \uc608\uce21 \ubaa8\ub378\uc5d0 \uc911\uc694 \ud53c\ucc98\ub85c \ub123\uc5b4\uc57c \ud568\uc744 \uc54c\uc218\uc788\ub2e4.\n\nAge_band \ud53c\ucc98\uc640 \ub9c8\ucc2c\uac00\uc9c0\ub85c \ud53c\ucc98\uc5d4\uc9c0\ub2c8\uc5b4\ub9c1 \ud544\uc694","e8056ffd":"### \uc624\ucc28\ud589\ub82c \ud574\uc11d\n\n\uccab\ubc88\uc9f8 rbf-SVM\uc744 \uac00\uc9c0\uace0 \uacc4\uc0b0:\n\n1)Accuracy :  **(491(for dead) + 247(for survived))  \/ 891 = 82.8%**\n\n2) Precision : **247(for Survived) \/ (58 : \uc0ac\ub9dd\uc790\ub97c \uc0dd\uc874\uc790\ub85c \uc608\uce21  + 247 : \uc0dd\uc874\uc790\ub97c \uc0dd\uc874\uc790\ub85c \uc608\uce21) = 81%**\n\n2)**Errors**-->  58\uba85(\uc0ac\ub9dd\uc790\ub97c \uc0dd\uc874\uc790\ub85c \uc608\uce21), 95\uba85(\uc0dd\uc874\uc790\ub97c \uc0ac\ub9dd\uc790\ub85c \uc608\uce21)\n\n\uac00\uc7a5 \ub192\uc740 \uc608\uce21 \uc131\ub2a5\uc744 \ubcf4\uc774\ub294 \uac83\uc740 rbf-SVM\uc774\ub2e4. \ub098\uc774\ube0c\ubca0\uc774\uc988 \ubc29\ubc95\uc740 \uc7ac\ud604\ub960\uc774 rbf-SVM\uc5d0 \ube44\ud574 \uc88b\ub2e4.(\uc0dd\uc874\uc790\ub97c \uc815\ud655\ud558\uac8c \uc608\uce21\ud558\ub294 \ud655\ub960)","a29a930f":"* **\ubaa8\ub4c8\ud654**","a3a928ae":"## Age--> \uc5f0\uc18d\ud615 \ud53c\ucc98\n","3b188121":"Accuracy for GaussianNB is **0.8134328358208955**\n\nAccuracy for RandomForestClassifier is **0.8208955223880597**","0652b94d":"**\ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd \uacb0\uacfc**\n\n'Best parameter :'\n{'criterion': 'gini',\n\n 'max_depth': 4,\n\n'min_samples_split': 2,\n\n'n_estimators': 200\n}\n\n**Best Score : 0.8338945005611672**\n\n**Best Estimator : RandomForestClassifier(max_depth=4, n_estimators=200)**\n\n\n **2nd test**\n \n'Best parameter :'{'criterion': 'entropy', 'max_depth': 4, 'min_samples_split': 3, 'n_estimators': 100}\n\n Best Score : 0.83501683501683499\n \n Best Estimator : \n \nRandomForestClassifier(bootstrap=True, class_weight=None, criterion='entropy',\n\n            max_depth=4, max_features='auto', max_leaf_nodes=None,\n            \n            min_impurity_decrease=0.0, min_impurity_split=None,\n            \n            min_samples_leaf=1, min_samples_split=3,\n            \n            min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=1,\n            \n            oob_score=False, random_state=None, verbose=0,\n            \n            warm_start=False)","c4684792":"\ubcf4\ub294\ubc14\uc640 \uac19\uc774 \ub3d9\ubc18 \uac00\uc871\uc774 \uc5c6\ub294 \ub098\ud640\ub85c \uc2b9\uac1d\uc758 \uc0dd\uc874\ub960\uc740 \uac1d\uc2e4\ub4f1\uae09\uacfc\ub294 \uc0c1\uad00\uc5c6\uc774 \ub0ae\uc740\uac83\uc744 \uc54c\uc218 \uc788\ub2e4.\ubc18\uba74\uc5d0 \uac1d\uc2e4\ub4f1\uae09\uc774 3\ub4f1\uae09\uc758 \uacbd\uc6b0\ub294 , \ub098\ud640\ub85c \ud0d1\uc2b9\uac1d\uc77c\uc9c0\ub77c\ub3c4 \uc5ec\uc790\uc758 \uacbd\uc6b0\ub294 \uc0dd\uc874\uc728\uc774 \ub192\ub2e4.\n\n## Fare_Range(\uc694\uae08 \uc601\uc5ed\ub300 \ubd84\ub958)\n\n\uc694\uae08 \ud53c\ucc98\ub294 \uc5f0\uc18d\ud615 \ud53c\ucc98\uc774\ubbc0\ub85c , ML\uc5d0\uc11c \uc0ac\uc6a9\ud558\uae30 \uc704\ud574\uc11c\ub294 \uc21c\uc11c\ud615 \ub370\uc774\ud130\ub85c \ubcc0\ud658\ud574\uc57c \ud55c\ub2e4(\uc774\uc0b0\ud654\ub97c \uc704\ud55c \ubd84\uc704\uc218)\n\n\uc774\ub97c \uc704\ud574\uc11c\ub294 \uc6b0\ub9ac\ub294 \ud310\ub2e4\uc2a4\uc5d0\uc11c \uc81c\uacf5\ud558\ub294 **pandas.qcut**\uc744 \uc0ac\uc6a9\ud558\ub824\uace0 \ud55c\ub2e4.\n\n[pandas.qcut \ucc38\uc870](https:\/\/pandas.pydata.org\/docs\/reference\/api\/pandas.qcut.html?highlight=qcut#pandas.qcut)","a1560d38":"### Observations:\n\n1)\uac1d\uc2e4\ub4f1\uae09\uc5d0 \uad00\uacc4\uc5c6\uc774 \uc5ec\uc131\uc778 \uacbd\uc6b0\uc758 \uc0dd\uc874\ub960\uc740 1\uc5d0 \uac00\uae4c\uc6b8 \uc218\ub85d \ub192\ub2e4\uace0 \ud560\uc218\uc788\ub2e4.\n\n2)\"Money talks\"\ub9cc \ub9d0\uc740 \uc9c0\uae08\uacfc \uacfc\uac70\ub294 \ub2e4\ub984\uc774 \uc5c6\ub2e4.\n\n\uadf8\ub798\uc11c \uc0ac\ub78c\ub4e4\uc758 \uc2dc\uc120\uc774 \ub3c8\uc5d0 \uba38\ubb3c\ub7ec \uc788\uc744 \uc218 \ubc16\uc5d0 \uc5c6\ub2e4.\n\n**<span style=\"color:red\">\ub370\uc774\ud130 \uc18d\uc5d0 \ubcf4\uc774\uc9c0 \uc54a\ub294 \uc218\ub9ce\uc740 \ud76c\uc0dd\ub4e4\uc5d0 \ub300\ud55c \uc774\uc57c\uae30\ub4e4\uc744 \ub044\uc9d1\uc5b4 \ub0b4\ub294\uac83\uc774 \ud544\uc694\ud558\ub2e4.(Story telling behind data)<\/span>**","2cd785a3":"**Read Evaluate Print Loop**\n1. VotingClassifier\n2. BaggingClassifier","10f99192":"* **Read Evaluate Print Loop**","58588a86":"### \ud788\ud2b8\ub9f5 \ud574\uc11d\n\n**\uc591\uc758 \uc0c1\uad00\uad00\uacc4(POSITIVE CORRELATION) :** **B\ud53c\ucc98\uac00 \uc99d\uac00\ud568\uc5d0 \ub530\ub77c A\ud53c\ucc98\ub3c4 \uc99d\uac00\ud558\uba74 , \uc6b0\ub9ac\ub294 \uc774\uac83\uc744 \uc591\uc758 \uc0c1\uad00\uad00\uacc4\ub77c\uace0 \ud55c\ub2e4.**. \n\n**1 - \uac15\ud55c \uc591\uc758 \uc0c1\uad00\uad00\uacc4\ub97c \uc758\ubbf8**.\n\n**\uc74c\uc758 \uc0c1\uad00\uad00\uacc4(NEGATIVE CORRELATION):** If an **B\ud53c\ucc98\uac00 \uac10\uc18c\ud568\uc5d0 \ub530\ub77c A\ud53c\ucc98\ub3c4 \uac10\uc18c\ud560\ub54c \uc6b0\ub9ac\ub97c \uc774\uac83\uc744 \uc74c\uc758 \uc0c1\uad00\uad00\uacc4\ub77c \ud55c\ub2e4**. \n\n**-1 - \uac15\ud55c \uc74c\uc758 \uc0c1\uad00\uad00\uacc4**.\n\n\ub450 \ud53c\ucc98\uac00 \ub192\uc740 \uc0c1\uad00\uad00\uacc4\ub97c \uac16\uc73c\uba74, \ub450 \ud53c\ucc98\ub294 \uc0c1\ub2f9\ud55c \uc815\ub3c4\ub85c \uc720\uc0ac\ud55c \uc815\ubcf4\ub97c \uac16\uace0\uc788\ub2e4\uace0 \ubcfc\uc218 \uc788\uc73c\uba70 \ud1b5\uacc4\ud559\uc5d0\uc11c\ub294 \uc774\ub7ec\ud55c \uac83\ub4e4 \ub2e4\uc911\uacf5\uc120\uc131(multicolinearity)\ub77c \ubd80\ub978\ub2e4.\n\uadf8\ub798\uc11c \uc774\ub7ec\ud55c \ub2e4\uc911 \uacf5\uc120\uc131\uc744 \uac16\ub294 \ud53c\ucc98\ub4e4\uc740 \uc608\uce21 \ubaa8\ub378\uc744 \uc0dd\uc131\ud558\ub294 \ub2e8\uacc4\uc5d0\uc11c\ub294 \uc0ad\uc81c\ud558\ub294 \uac83\uc744 \uace0\ub824\ud574\ubcf4\uc544\uc57c \ud55c\ub2e4.\n\n\ud558\uc9c0\ub9cc, \uc704\uc758 \ud788\ud2b8\ub9f5\uc5d0\uc11c\ub294 \uadf8\ub7ec\ud55c\uac83\ub4e4\uc774 \ud2b9\ubcc4\ud558\uac8c \ubcf4\uc774\uc9c0\ub294 \uc54a\uc544\uc11c \ubaa8\ub4e0 \ud53c\ucc98\ub4e4\uc744 \uace0\ub824\ud558\uae30\ub85c \ud55c\ub2e4.","8f948031":"**Stochastic Gradient Boosting**","e96081b7":"* **\uc624\ucc28\ud589\ub82c \uc2dc\uac01\ud654**","76fd33b9":"\uc5ec\uc790 \ubc0f \uc544\uc774\uba3c\uc800 \uad6c\uc870\ud55c\ub2e4\ub294 \uc815\ucc45\uc740 \uac1d\uc2e4\ub4f1\uae09\uc5d0 \uc0c1\uad00\uc5c6\uc774 \uc77c\uad00\ub418\uac8c \uc720\uc9c0\ub418\uace0\uc788\ub2e4.","fe6c46f7":"**\uacb0\uacfc**\n\nBest parameter : {'C': 0.5, 'gamma': 0.1, 'kernel': 'rbf'}\n\nBest Score :  0.828282828283\n\nBest Estimator  SVC(C=0.5, cache_size=200, class_weight=None, coef0=0.0,\n  decision_function_shape='ovr', degree=3, gamma=0.1, kernel='rbf',\n  max_iter=-1, probability=False, random_state=None, shrinking=True,\n  tol=0.001, verbose=False)","b7d95142":"# \uad50\ucc28\uac80\uc99d(Cross Validation)\n* Use Pima North america indian diabetes datasets","b63c24eb":"## SibSip--> \ube44\uc5f0\uc18d\uc801\uc778 \ud53c\ucc98\n* Sibsling + Spouse : \uc190\uc790, \uc190\ub140 ,\uc790\uc190 \ubc0f \ubc30\uc6b0\uc790 \ud3ec\ud568 \n* \ud63c\uc790\uc778\uc9c0 \ub3d9\ubc18\ud55c \ud615\uc81c , \uc790\ub9e4\uac00 \uc788\ub294\uc9c0 \uc54c\ub824\uc8fc\ub294 \ud53c\ucc98\ub85c \ud63c\uc790\uc774\uba74 0\uc774\uace0, 0\ubcf4\ub2e4 \ud06c\uba74 1\uba85\uc774\uc0c1\uc778 \uacbd\uc6b0\uc774\ub2e4.\n\n* \uc790\ub140 = \ud615\uc81c, \uc790\ub9e4, \ubc30\ub2e4\ub978 \ud615\uc81c, \uc790\ub9e4\n\n* \ubc30\uc6b0\uc790 = \ub0a8\ud3b8 \ud639\uc740 \uc544\ub0b4","0b4c5587":"### \ubd88\ud544\uc694\ud55c \ud53c\ucc98 \uc0ad\uc81c \n\n**Name**--> Name\ud53c\ucc98\ub97c \ud1b5\ud574 Initial\ud53c\ucc98 \ub3c4\ucd9c\ud588\uc73c\ubbc0\ub85c Name\ud53c\ucc98\uc758 \uc5ed\ud560\uc740 \ub2e4\ud588\ub2e4.\n\n**Age**--> Age_band\ud53c\ucc98\ub97c \ub3c4\ucd9c\ud588\uc73c\ubbc0\ub85c \uc5ed\ud560\uc740 \ub2e4\ud588\uc74c\n\n**Ticket**--> \ubd88\ud544\uc694\ud568\n\n**Fare**--> Fare_cat\ud53c\ucc98\ub97c \ub3c4\ucd9c\ud588\uc73c\ubbc0\ub85c \uc5ed\ud560\uc744 \ub2e4 \ud588\uc74c\n\n**Cabin**--> \ub110\uac12\uc774 \ub9ce\uc73c\ubbc0\ub85c \ubb34\uc758\ubbf8\ud55c \ud53c\ucc98\ub85c \uc0ad\uc81c\n\n**Fare_Range**--> Fare_cate\ud53c\ucc98\uac00 \uc788\uc73c\ubbc0\ub85c \ubd88\ud544\uc694\n\n**PassengerId**--> \uc758\ubbf8\uc5c6\ub294 \uc77c\ub828\ubc88\ud638\uc758 \uc131\uaca9\uc774\ubbc0\ub85c \uc0ad\uc81c","1206cd37":"**XGBoost**","a995cb37":"### Observations:\n1)5\uc0b4 \uc774\ud558\uc758 \uc720\uc544\uac00 \ub300\ub2e4\uc218\uac00 \uc0dd\uc874\ud568(\uc5ec\uc131 \ubc0f \uc544\uc774\uba3c\uc800 \uad6c\uc870)\n\n2)\ucd5c\uace0\ub839 \uc0dd\uc874\uc790\ub294 80\uc138\n\n3)\uac00\uc7a5 \ub9ce\uc740 \uc0ac\ub9dd\uc790\ub294 \uc5f0\ub839\ub300\uac00 30\ub300\uc5d0\uc11c 40\ub300\uc5d0 \ubd84\ud3ec\ud568","8058cca5":"### *Sometimes life has a cruel sense of humor, giving you the thing you always wanted at the worst time possible.*\n                                                                                       -Lisa Kleypas\n\n                                                                                                                                     ","d2f9cc26":"## Sex--> \ubc94\uc8fc\ud615 \ud53c\ucc98","f05f9b30":"* **\uac1d\uc2e4\ub4f1\uae09 \ubcc4 \uc2b9\uac1d\uc218  \ubc0f \uc0dd\uc874\uc790 \ubc0f \uc0ac\ub9dd\uc790 \ubd84\ud3ec**","4765da09":"## \ubd84\uc11d \uc808\ucc28 :\n\n#### Part1: \ud0d0\uc0c9\uc801 \ub370\uc774\ud130 \ubd84\uc11d(EDA):\n1)\ud53c\ucc98 \ubd84\uc11d\n\n2)\ub2e4\uc911 \ud53c\ucc98\ub97c \uace0\ub824\ud558\uae30 \uc704\ud55c \ucd94\uc138 \ubc0f \uc5f0\uad00\uad00\uacc4 \ud30c\uc545\n#### Part2: \ud53c\ucc98 \uc5d4\uc9c0\ub2c8\uc5b4\ub9c1 \ubc0f \ub370\uc774\ud130 \uc815\uc81c:\n1)\uc2e0\uaddc \ud53c\ucc98\uc758 \ucd94\uac00 \n\n2)\uc911\ubcf5 \ud53c\ucc98 \uc81c\uac70\n\n3)\ubb38\uc790\ud615 \ud53c\ucc98\uc758 \ubcc0\ud658\n#### Part3: \uc608\uce21 \ubaa8\ub378\ub9c1\n1)ML\uae30\ubcf8 \ubaa8\ub378 \uc775\ud788\uae30\n\n2)\uad50\ucc28\uac80\uc99d(Cross Validation)\n\n3)\uc559\uc0c1\ube14 \uae30\ubc95(Ensemble)\n\n4)\uc911\uc694 \ud53c\ucc98 \ucd94\ucd9c(Feature Extraction)","267d35bc":"## \ud53c\ucc98 \uc720\ud615\n\n### \ubc94\uc8fc\ud615 \ud53c\ucc98:\n\ubc94\uc8fc\ud615 \ud53c\ucc98\ub294 \ud53c\ucc98\uc758 \uac12\ub4e4\uc774 \uad6c\ubd84\ub420 \uc218 \uc788\ub294 \uac12\ub4e4\ub85c \uc774\ub8e8\uc5b4\uc9c4 \ud53c\ucc98\ub4e4\uc744 \uc758\ubbf8\ud558\uba70 \ub2e4\uc74c\uacfc \uac19\uc774 \uc608\ub97c \ub4e4 \uc218 \uc788\ub2e4.\n\uc608) Sex(\ub0a8\uc790 \ud639\uc740 \uc5ec\uc790), \ud56d\uad6c(Embarked)\n\n### \uc21c\uc11c\uac00 \uc788\ub294 \ubc94\uc8fc\ud615 \ud53c\ucc98(Ordinal Features):\n\uc608) **Height** ( Tall, Medium, Short), **Pclass**\n\n### \uc5f0\uc18d\ud615 \ud53c\ucc98:\n\uc608) **Age**","8652552c":"### Reference\n\n1) For R:[Divide and Conquer by Oscar Takeshita](https:\/\/www.kaggle.com\/pliptor\/divide-and-conquer-0-82297\/notebook)\n\n2)For Python:[Pytanic by Heads and Tails](https:\/\/www.kaggle.com\/headsortails\/pytanic)\n\n3)For Python:[Introduction to Ensembling\/Stacking by Anisotropic](https:\/\/www.kaggle.com\/arthurtok\/introduction-to-ensembling-stacking-in-python)","42e7b8fb":"## Feature Importance","b7b996af":"### Confusion Matrix for the Best Model","3fe31f71":"* **\ubaa8\ub378\uc758 \ud3c9\uac00\uc9c0\ud45c**","ecf62a82":"* **Read Evaluate Print Loop**","c48cfeb2":"### Observations:\n\n\ud0c0\uc774\ud0c0\ub2c9 \uce68\ubab0\uc2dc\uac04 : on 14, April, 1914 at 11:40 P.M\n\n\uc7a0\uc744 \uc798 \uc218 \uc788\ub294 \uc2dc\uac04\uc77c\uc218\ub3c4\uc788\uace0 \uc544\ub2d0\uc218\ub3c4 \uc788\uc9c0\ub9cc \ub3d9\ubc18 \uac00\uc871\uc774 \uc5c6\ub294 \uacbd\uc6b0\uc758 \uc0dd\uc874\ub960\uc774 \ub3d9\ubc18\uac00\uc871\uc774 1~2\uba85 \uc788\ub294 \uacbd\uc6b0\ubcf4\ub2e4 \uc0dd\uc874\ub960\uc774 \ub5a8\uc5b4\uc9d0\uc744 \uc54c \uc218 \uc788\ub2e4. \n\n3\uba85\uc774\ud558\uc778 \uacbd\uc6b0\ub77c\uba74, \ub300\uc751\ud560 \uc218 \uc788\ub294 \uc218\uc900\uc774\ub77c\uace0 \ubcfc \uc218 \uc788\uc9c0\ub9cc, **\ub3d9\ubc18\uac00\uc871\uc774 3\uba85\uc774\uc0c1\uc73c\ub85c \ub298\uc5b4\ub098\uac8c \ub418\uba74 \uc0dd\uc874\uc774 \uc27d\uc9c0 \uc54a\uc74c**\uc744 \ubcf4\uc5ec\uc900\ub2e4.(3\uba85\uc774\uc0c1\uc744 \uae30\uc810\uc73c\ub85c \uc0dd\uc874\ub960\uc774 \ud558\ub77d)\n\n\ub3d9\ubc18\uac00\uc871\uc774 5\uc778 ~ 8\uc778\uc740 \uc0dd\uc874\uc728\uc774 0% \ube44\uc728\ub85c \ub5a8\uc5b4\uc9c4\ub2e4.","2eb2ae73":"## \ud53c\ucc98\uac04\uc758 \uc0c1\uad00\uad00\uacc4\n* \ud788\ud2b8\ub9f5\uc73c\ub85c \ud53c\ucc98\uac04\uc758 \uc0c1\uad00\uad00\uacc4\ub97c \ubcf4\uae30","d4040d3a":"**\uc131\ubcc4(Sex)\ud53c\ucc98\uc640 \ud568\uaed8 \uc694\uae08\ub300(Fare band)\ud53c\ucc98\ub3c4 \uc0dd\uc874\ub960\uc744 \uc608\uce21\ud558\ub294\ub370 \uc911\uc694\ud53c\ucc98\ub85c \uace0\ub824\ud574\uc57c \ud568\uc744 \ubcf4\uc5ec\uc90c**\n* <span style=\"color:red\">**\uc694\uae08\ub300\uac00 \ube44\uc2f8\uba74 \uadf8\uc5d0 \uc5b4\ub290\uc815\ub3c4 \ube44\ub840\ud574 \uc0dd\uc874\ub960\ub3c4 \ub192\ub2e4**<\/span>\n\n## \ubb38\uc790\uc5f4 \ud53c\ucc98\ub97c \uc22b\uc790\ud615\uc73c\ub85c \ubcc0\ud658\n\n* ML\ubaa8\ub378\uc5d0 \ubb38\uc790\ud615\uc744 \ud559\uc2b5\uc2dc\ud0ac\uc218 \uc5c6\uae30 \ub54c\ubb38\uc5d0 \ubb38\uc790\ud615 \ub370\uc774\ud130\ud0c0\uc785\uc744 \uc22b\uc790\ud615\uc73c\ub85c \ubc14\uafb8\uc5b4\uc57c \ud55c\ub2e4.\n* \ud310\ub2e4\uc2a4\uc5d0\uc11c \uc81c\uacf5\ud558\ub294 pandas.get_dummies API\ub3c4 \uc788\uc73c\ub098 \ud53c\ucc98\ub298\uc5b4\ub098\uae30 \ub54c\ubb38\uc5d0 \uc5ec\uae30\uc11c\ub294 \uac12\uc744 \ub300\uce58\ud558\ub294\ubc29\ubc95 \uc0ac\uc6a9\n","95fe6608":"### Random Forests","c4e08d1b":"* **K\ucd5c\uadfc\uc811\uc774\uc6c3\uae30\ubc95 : n_neighbors\uac2f\uc218\ub97c \ub298\ub9ac\uba74\uc11c \uc218\ud589**","62c2a434":"\uac00\uc7a5 \ub192\uc740 \uc815\ud655\ub3c4\ub97c \uac16\ub294 AdaBoost\ub97c \uac00\uc9c0\uace0,\ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd\uc744 \uc9c4\ud589\n\n#### Hyper-Parameter Tuning for AdaBoost","07e57f50":"## Parch\n- \ubd80\ubaa8 \ub3d9\ubc18(Parent  + Children)","21c9ea35":"75\ud37c\uc13c\ud2b8 \uc774\uc0c1\uc758 \uc5ec\uc131\uc774 \uc0dd\uc874\ud588\uace0, \uc624\uc9c1 18% ~ 19%\uc758 \ub0a8\uc131\ub9cc\uc774 \uc0dd\uc874\ud558\uc600\uc74c\uc744 \uc54c \uc218 \uc788\uc74c\n\n300\uba85\uc774 \ub118\ub294 \uc0dd\uc874\uc790 \uc911\uc5d0\uc11c 70% \uac00\uae4c\uc774 \ub418\ub294 \uc0dd\uc874\uc790\uac00 \ubaa8\ub450 \uc5ec\uc131\uc784\uc744 \uc54c \uc218 \uc788\ub2e4.\n\n\uc774\ub85c\uc368 **\uc131\ubcc4** \uc774 \uc911\uc694\ud53c\ucc98\uc784\uc744 \uc54c \uc218 \uc788\ub2e4. \n\n\ub2e4\ub978 \ud53c\ucc98\ub4e4\ub3c4 \uc54c\uc544\ubcf4\uaca0\ub2e4.","c41c4268":"### **\uc2b9\uc120\ud55c \uacbd\uc720 \ud56d\uad6c\ubcc4\ub85c \ubcf8 \uc0dd\uc874\ub960 \ube44\uad50**","9212edb7":"* Read Evaluate Print Loop","cfb7b524":"* **Read Evaluate Print Loop**","40050f6d":"## Pclass(\uac1d\uc2e4\ub4f1\uae09) --> \uc21c\uc11c\uac00 \uc788\ub294 \ud53c\ucc98\n* Pivot table\uacfc \uc720\uc0ac\ud558\ub2e4\uace0 \ubcfc \uc218 \uc788\ub2e4.(\ud53c\ucc98\uc640 \ud53c\ucc98\uac04\uc758 \uad00\uacc4 \ud30c\uc545)","517057c6":"**Read Evaluate Print Loop**","84c8c3d0":"### Observations:\n\n\ubd80\ubaa8 \ub3d9\ubc18\uc790\uac00 \uc788\ub294 \uacbd\uc6b0\ub294 \uc0dd\uc874\ud560 \ud655\ub960\uc774 \uc0c1\ub2f9\ud788 \ub192\uc9c0\ub9cc , \uc774 \uc218\uce58\ub3c4 \ub3d9\ubc18 \uc22b\uc790\uac00 \ub298\uc5b4\ub098\uba74 \uae09\uaca9\ud558\uac8c \uc0dd\uc874 \uac00\ub2a5\uc131\uc774 \uac10\uc18c\ud568\uc744 \ubcf4\uc778\ub2e4.\n\n\ub610\ud55c \ub3d9\ubc18 \uac00\uc871\uc774 \uc5c6\ub294 \uacbd\uc6b0\ub294 \uc0dd\uc874 \ud655\ub960\uc774 \uc0c1\ub2f9\ud788 \ub0ae\uc74c\uc744 \uc54c \uc218 \uc788\ub2e4. \ube44\uc0c1\uc2dc\uc5d0\ub294 \ub3c4\uc6c0\uc744 \ubc1b\uc744 \uc218 \uc788\ub294 \uc874\uc7ac\uac00 \uc788\ub290\ub0d0 \uc5c6\ub290\ub0d0\uc758 \ucc28\uc774\ub294 \uc5ec\uae30\uc11c \ub098\ud0c0\ub09c\ub2e4\uace0 \ud560 \uc218 \uc788\uaca0\ub2e4.\n\n<span style=\"color:red\">**When you travel or go abroad, you shoud need somebody to go with you**<\/span>","5f117238":"\ubaa8\ub378\uc758 \uc815\ud655\ub3c4\uac00 Classifier\uc758 \uc548\uc815\uc131\uc744 \uacb0\uc815\ud558\ub294 \uc720\uc77c\ud55c \uacb0\uc815\uc694\uc778\uc740 \uc544\ub2d9\ub2c8\ub2e4. \n\ubd84\ub958\uae30\uac00 \ud559\uc2b5\ub370\uc774\ud130\ub85c \ud559\uc2b5\ub418\uace0 , \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ub85c \uac80\uc99d\ub41c \uacb0\uacfc, \uc815\ud655\ub3c4\uac00 90%\ub41c\ub2e4\uace0 \ud558\uace0 \uac00\uc815\ud574\ubd05\uc2dc\ub2e4.\n\n\n\ubd84\ub958\uae30\uc5d0\uac8c\ub294 \uc544\uc8fc \uc88b\uc740 \uc815\ud655\ub3c4\ucc98\ub7fc \ubcf4\uc774\uc9c0\ub9cc, \uc774 \ubaa8\ub378\uc758 \uc815\ud655\ub3c4\uac00 \ubaa8\ub4e0 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc14b\uc5d0\uc11c\ub3c4 \uadf8\ub7ec\ud55c \uacb0\uacfc\ub97c \ub098\uc628\ub2e4\ub294 \uac83\uc740 \ubcf4\uc7a5\ud560 \uc218 \uc788\uc744\uae4c\uc694?\n\n\ub300\ub2f5\uc740 \"\uc544\ub2d9\ub2c8\ub2e4.\" \uc785\ub2c8\ub2e4. \n\n\uc65c\ub0d0\ud558\uba74, \ud559\uc2b5 \ubc0f \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc14b\uc774 \ubcc0\uacbd\ub418\uba74 \ud574\ub2f9 \ubaa8\ub378\uc758 \uc815\ud655\ub3c4 \ub610\ud55c \ubcc0\uacbd\ub418\uae30 \ub9c8\ub828\uc774\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.\n\n\uc815\ud655\ub3c4\ub294 \uc99d\uac00\ud560\uc218 \ub3c4\uc788\uace0, \ud639\uc740 \uac10\uc18c\ud560 \uc218 \ub3c4 \uc788\uc2b5\ub2c8\ub2e4.\n\n\uc774\ub7f0 \uc815\ud655\ub3c4\uc758 \ubcc0\ub3d9\uc744 **\ubaa8\ub378 \ubcc0\ub3d9\uc131(model variance)**\uc774\ub77c\uace0 \ud569\ub2c8\ub2e4.\n\n\uc774\ub7ec\ud55c model variance\ub97c \uadf9\ubcf5\ud558\uae30 \uc704\ud574 \uc774\uc81c\ub294 **\uad50\ucc28\uac80\uc99d(cross validation)**\uc744 \ud574\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.","b7d0b8ef":"* **\ubaa8\ub4c8\ud654**","7468f4aa":"## Voting Classifier\n\n\uc5ec\ub7ec\uac1c\uc758 \uacb0\uc815\ubd84\ub958\uae30(\uc11c\ub85c \ub2e4\ub978 \uc54c\uace0\ub9ac\uc998\uc744 \uac00\uc9c4 \ubaa8\ub378)\uac00 \uc608\uce21\ud55c \uacb0\uacfc\uce58\ub97c \ubc14\ud0d5\uc73c\ub85c \ud3c9\uade0\uac12\uc744 \ub3c4\ucd9c\ud558\ub294 \ubc29\ubc95","ea25f4c1":"* **\ubaa8\ub4c8\ud654**","96b516a4":"* **Read Evaluate Print Loop**","4ccff2fc":"**AdaBoost**","a0ceb0a1":"# Ensembling\n\n\uc559\uc0c1\ube14\uc774 ML\ubaa8\ub378\uc758 \uc131\ub2a5 \ud639\uc740 \uc815\ud655\ub3c4\ub97c \ub192\uc774\uae30 \uc704\ud55c \uc88b\uc740 \ubc29\ubc95\uc774\ub2e4. \n\n\ub2e8\uc21c\ud788 \ud45c\ud604\ud558\uba74, \ud558\ub098\uc758 \uc608\uce21 \uc131\ub2a5\uc774 \uc88b\uc740 \ubaa8\ub378\uc744 \ub9cc\ub4e4\uae30 \uc704\ud574 \ub2e4\uc591\ud55c \ubd84\ub958\uae30\uc758 \uc870\ud569\uc744 \uc774\uc6a9\ud558\ub294 \uac83\uc774\ub2e4.\n\n\uc608\ub97c \ub4e0\ub2e4\uba74, \ud558\ub098\uc758 \uc81c\ud488\uc744 \ucd9c\uc2dc\ud558\uae30\uc5d0 \uc55e\uc11c \ud574\ub2f9 \uc81c\ud488\uc744 \uad6c\ub9e4\ud560 \uc758\ud5a5\uc774 \uc788\ub294 \ub2e4\uc591\ud55c \ubd84\uc57c\uc758 \uc0ac\ub78c\ub4e4\uc5d0\uac8c \ubbf8\ub9ac \uc900\ube44\ub41c \ub2e4\uc591\ud55c \uc778\uc790\ub4e4\uc744 \ubc14\ud0d5\uc73c\ub85c \uc758\uacac\uc744 \uad6c\ud558\uace0 , \uc774 \uc758\uacac\uc744 \ucde8\ud569\uc5d0 \uc81c\ud488 \ucd9c\uc2dc\uc2dc \ubc18\uc601\ud55c\ub2e4. \n\n\uadf8\ub807\ub2e4\uba74 \ud574\ub2f9 \uc81c\ud488\uc740 \ub354\uc6b1 \uc548\uc815\uc131, \ud488\uc9c8\uc744 \ubcf4\uc7a5\ud558\ub294 \ub418\ub294 \uac83\uc774\ub2e4. \n\n\uc774\ub7f0 \uce21\uba74\uc5d0\uc11c \ubcf4\uba74,\uc559\uc0c1\ube14 \uae30\ubc95\ub3c4 \uc774\uc640 \uc720\uc0ac\ud55c \uacfc\uc815\uc744 \uac70\uce5c\ub2e4.\n\n1)Voting Classifier\n\n2)Bagging\n\n3)Boosting.","99ab9dfb":"# \uc608\uce21\uc744 \uc704\ud55c \ud0d0\uc0c9\uc801 \ub370\uc774\ud130 \ubd84\uc11d (\uc8fd\uc74c\uc758 \ud0c0\uc774\ud0c0\ub2c9\ud638)\n","7d925fcf":"#### Bagged DecisionTree\n","7913193c":"* Age\ud53c\ucc98\ub294 177\uac1c\uc758 \ub110\uac12\uc744 \uac00\uc9c0\uba70, Cabin\uc740 687\uac1c\uc758 \ub110\uac12 \uadf8\ub9ac\uace0 Embarked\ud53c\ucc98\ub294 2\uac1c\uc758 \ud53c\ucc98\uac00 \ub110\uac12\uc744 \uac00\uc9d0.\n* Age, Cabin \ud53c\ucc98\ub294 \ub110\uac12\uc774 \uc788\uc73c\uba70 \ud53c\ucc98 \uc5d4\uc9c0\ub2c8\uc5b4\ub9c1 \ub2e8\uacc4\uc5d0\uc11c \ub110\uac12\uc744 \ub300\uccb4\ud560\uc218 \uc788\ub3c4\ub85d \ubaa8\uc0c9","a5d1943e":"\uc704\uc758 \uc0c1\uad00\uad00\uacc4\ub97c \ubcf4\uba74 **SibSp\uc640 Family_Size** \uadf8\ub9ac\uace0 **Parch\uc640 Family_Size**\ub294 \uac15\ub825\ud55c \uc591\uc758 \uc0c1\uad00\uacc4\ub97c \uac16\uace0 **Alone\uacfc Family_Size**\uc74c\uc758 \uc0c1\uad00\uad00\uacc4\ub97c \uac16\ub294\ub2e4.","cc20da2d":"* **Read Evaluate Print Loop**","d1c74f30":"#### Read Evaluate Print Loop","2a37a0c2":"* **Read Evalulate Print Loop**","65463d60":"* **Read Evaluate Print Loop**","94abf09b":"* Read Evaludate Print Loop","ce3e24c0":"### Embarked(\uacbd\uc720 \ud56d\uad6c)\n* \uac00\uc7a5 \ub9ce\uc740 \uc2b9\uac1d\uc774 \ud0c4 \uc0ac\uc6b0\uc2a4\ud584\ud2bc(S)\ub85c \ub110 \uac12\uc744 \ub300\uce58\ud558\uae30\ub85c \ud558\uc790(2\uac1c\uc758 \ub110\uac12\uc774 \uc874\uc7ac\ud558\uc600\uc74c)","e5acee60":"* **\ubaa8\ub4c8\ud654**","77861c06":"\uacb0\uc815\ubd84\ub958\uae30\uc758 \uc815\ud655\ub3c4\ub294 \ub370\uc774\ud130\uc758 \ubd88\uade0\ud615\ub54c\ubb38\uc5d0 \uc798\ubabb\ub41c \ud574\uc11d\uc774 \ub420\uc218\ub3c4\uc788\ub2e4. \n\n\uc815\ud655\ub3c4\uac00 \uac00\uc9c0\ub294 \uc774\ub7ec\ud55c \ud55c\uacc4\uc810\uc744 \uadf9\ubcf5\ud558\uae30 \uc704\ud574 \uc5ec\ub7ec\uac00\uc9c4 \ubd84\ub958\uc9c0\ud45c\uac00 \uc788\ub294\ub370 ,\uc624\ucc28\ud589\ub82c\uc744 \uc774\uc6a9\ud574 \uc5b4\ub290 \ubaa8\ub378\uc774 \uc798\ubabb \uc608\uce21\ud558\uace0 \uc788\ub294\uc9c0 \ud655\uc778\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n## \uc624\ucc28\ud589\ub82c(Confusion Matrix)","6cd6ad61":"* \ubaa8\ub378\ubcc4 \uc815\ud655\ub3c4\uc758 \ud3c9\uade0\uc810\uc218  \uc2dc\uac01\ud654","ad48b122":"**n_neighbors**\uac12\uc744 \ubcc0\uacbd\ud574\ubcf4\uba74\uc11c \uc815\ud655\ub3c4\ub97c \ud3c9\uac00\ud574\ubcf4\uc790.KNN\uc758 n_neighbors\uc758 \ub514\ud3f4\ud2b8\uac12\uc740 5"}}