{"cell_type":{"7bbfac47":"code","5d532070":"code","15200a36":"code","bbfa0be9":"code","9a5c3ab3":"code","e02f474d":"code","240976d7":"code","d2d0486e":"code","7161e754":"code","1a5fe512":"code","fc96642f":"code","d3a90797":"code","80bc6ed6":"code","69253862":"code","f2350b42":"markdown","71d047db":"markdown","4c764af2":"markdown","9e868edf":"markdown","2a8dae1c":"markdown","74ba4206":"markdown","e6240718":"markdown","6553962a":"markdown","a585228a":"markdown"},"source":{"7bbfac47":"# Importing the libraries\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","5d532070":"dataset = pd.read_csv('..\/input\/IRIS.csv')\nprint(dataset.columns)\ndataset.head(3)","15200a36":"dataset.describe()","bbfa0be9":"dataset.info()","9a5c3ab3":"dataset.species.value_counts()\n#it is a balanced dataset","e02f474d":"sns.set_style(\"whitegrid\");\nsns.FacetGrid(dataset, hue=\"species\", size=4) \\\n   .map(plt.scatter, \"sepal_length\", \"sepal_width\") \\\n   .add_legend();\n","240976d7":"# we notice that the blue points are easily seperated but the green and orange are not easily seperated","d2d0486e":"#pairplot\nsns.set_style(\"whitegrid\");\nsns.pairplot(dataset, hue=\"species\", size=3);\n","7161e754":"# Importing metrics for evaluation\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\n","1a5fe512":"from sklearn.model_selection import train_test_split\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state =452 )","fc96642f":"#importing libraries\nfrom sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression()\nclassifier.fit(X_train, y_train)\n\ny_pred = classifier.predict(X_test)\n\n# Summary of the predictions made by the classifier\nprint(classification_report(y_test, y_pred))\nprint(confusion_matrix(y_test, y_pred))\n# Accuracy score\nfrom sklearn.metrics import accuracy_score\nprint('accuracy is',accuracy_score(y_pred,y_test))","d3a90797":"from sklearn.svm import SVC\n\nclassifier = SVC()\nclassifier.fit(X_train, y_train)\n\ny_pred = classifier.predict(X_test)\n\n# Summary of the predictions made by the classifier\nprint(classification_report(y_test, y_pred))\nprint(confusion_matrix(y_test, y_pred))\n# Accuracy score\nfrom sklearn.metrics import accuracy_score\nprint('accuracy is',accuracy_score(y_pred,y_test))","80bc6ed6":"from sklearn.naive_bayes import GaussianNB\nclassifier = GaussianNB()\nclassifier.fit(X_train, y_train)\n\ny_pred = classifier.predict(X_test)\n\n# Summary of the predictions made by the classifier\nprint(classification_report(y_test, y_pred))\nprint(confusion_matrix(y_test, y_pred))\n# Accuracy score\nfrom sklearn.metrics import accuracy_score\nprint('accuracy is',accuracy_score(y_pred,y_test))","69253862":"from sklearn.tree import DecisionTreeClassifier\n\nclassifier = DecisionTreeClassifier()\n\nclassifier.fit(X_train, y_train)\n\ny_pred = classifier.predict(X_test)\n\n# Summary of the predictions made by the classifier\nprint(classification_report(y_test, y_pred))\nprint(confusion_matrix(y_test, y_pred))\n# Accuracy score\nfrom sklearn.metrics import accuracy_score\nprint('accuracy is',accuracy_score(y_pred,y_test))","f2350b42":"# Discription of the data","71d047db":"## Applying Naive Bayes","4c764af2":"## Applying Decision Tree","9e868edf":"# Visualizations","2a8dae1c":"## Splitting the data into test and train","74ba4206":"## Applying logistic Regression","e6240718":"# Applying the ML Algorithms","6553962a":"**Importing dataset**","a585228a":"## Applying support vector machine"}}