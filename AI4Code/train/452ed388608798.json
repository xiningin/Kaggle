{"cell_type":{"7a8ae8c4":"code","3a8b2692":"code","c653bdc3":"code","d0a8bc8e":"code","9326cbbd":"code","5fbe5869":"code","6abc8b5f":"code","199c3a4c":"code","2420ac89":"code","b8298164":"code","357114a4":"code","062dc57b":"code","472c829b":"code","fd47d03f":"code","eddd6b01":"code","5ebd2299":"code","2c097a75":"code","d3a48c96":"code","05b801fc":"code","b346c2d2":"markdown","c20958c7":"markdown","e7e7f5a9":"markdown","7450de13":"markdown","8b6917b2":"markdown","644bdfad":"markdown","ff7d21fa":"markdown","a8dc0473":"markdown","36915416":"markdown","c729555f":"markdown","b1a91257":"markdown"},"source":{"7a8ae8c4":"# modules we'll use\nimport pandas as pd\nimport numpy as np\n\n# read in all our data\nnfl_data = pd.read_csv(\"..\/input\/nflplaybyplay2009to2016\/NFL Play by Play 2009-2017 (v4).csv\")\nsf_permits = pd.read_csv(\"..\/input\/building-permit-applications-data\/Building_Permits.csv\")\n\n# set seed for reproducibility\nnp.random.seed(0) ","3a8b2692":"# look at a few rows of the nfl_data file. I can see a handful of missing data already!\nnfl_data.sample(5)","c653bdc3":"# your turn! Look at a couple of rows from the sf_permits dataset. Do you notice any missing data?\nsf_permits.sample(10)","d0a8bc8e":"# get the number of missing data points per column\nmissing_values_count = nfl_data.isnull().sum()\n\n# look at the # of missing points in the first ten columns\nmissing_values_count[0:10]","9326cbbd":"# how many total missing values do we have?\ntotal_cells = np.product(nfl_data.shape)\n# The shape attribute for numpy arrays returns the dimensions of the array. If Y has  n rows and m columns, then Y.shape is (n,m). So Y.shape[0] is n.\ntotal_missing = missing_values_count.sum()\n\n# percent of data that is missing\n(total_missing\/total_cells) * 100","5fbe5869":"# your turn! Find out what percent of the sf_permits dataset is missing\nmissing_value_count1 = sf_permits.isnull().sum()\nmissing_value_count1[0:10]\n\n\n","6abc8b5f":"total_cells = np.product(sf_permits.shape)\ntotal_missing = missing_value_count.sum()\n(total_missing\/total_cells)*100","199c3a4c":"# look at the # of missing points in the first ten columns\nmissing_values_count[0:10]","2420ac89":"# remove all the rows that contain a missing value\nnfl_data.dropna()","b8298164":"# remove all columns with at least one missing value\ncolumns_with_na_dropped = nfl_data.dropna(axis=1)\n# axis : {0 or \u2018index\u2019, 1 or \u2018columns\u2019}, default 0. Determine if rows or columns which contain missing values are removed. 0, or \u2018index\u2019 : Drop rows which contain missing values. 1, or \u2018columns\u2019 : Drop columns which contain missing value.\n# how : {\u2018any\u2019, \u2018all\u2019}, default \u2018any\u2019, Determine if row or column is removed from DataFrame, when we have at least one NA or all NA. \u2018any\u2019 : If any NA values are present, drop that row or column. \u2018all\u2019 : If all values are NA, drop that row or column.\ncolumns_with_na_dropped.head()\n# Dataframe.head() Return the first n rows. It is useful for quickly testing if your object has the right type of data in it.\n# Parameters: n : int, default 5. Number of rows to select.","357114a4":"# just how much data did we lose?\nprint(\"Columns in original dataset: %d \\n\" % nfl_data.shape[1])\nprint(\"Columns with na's dropped: %d\" % columns_with_na_dropped.shape[1])","062dc57b":"# Your turn! Try removing all the rows from the sf_permits dataset that contain missing values. How many are left?\nsf_permits.dropna()\n","472c829b":"# Now try removing all the columns with empty values. Now how much of your data is left?\ndropped = sf_permits.dropna(axis = 1)\ndropped.head()\nprint (\"Columns in sf_permits %s \\n\" %sf_permits.shape[1])\nprint (\"Colmuns in the dropped dataset %s \\n\" %dropped.shape[1])","fd47d03f":"# get a small subset of the NFL dataset\nsubset_nfl_data = nfl_data.loc[:, 'EPA':'Season'].head()\nsubset_nfl_data","eddd6b01":"# replace all NA's with 0\nsubset_nfl_data.fillna(0)","5ebd2299":"# replace all NA's the value that comes directly after it in the same column, \n# then replace all the reamining na's with 0\nsubset_nfl_data.fillna(method = 'bfill', axis=0).fillna(0)","2c097a75":"sf_permits.head()","d3a48c96":"# Your turn! Try replacing all the NaN's in the sf_permits data with the one that\n# comes directly after it and then replacing any remaining NaN's with 0\nfilled_with_0=sf_permits.fillna(0)\nfilled_with_0.head()","05b801fc":"filled_with_before=sf_permits.fillna(method = 'bfill', axis=0)\nfilled_with_before.head()","b346c2d2":"# Step 3: See how many missing values: *.isnull().sum()","c20958c7":"By looking at [the documentation](https:\/\/www.kaggle.com\/maxhorowitz\/nflplaybyplay2009to2016), I can see that this column has information on the number of seconds left in the game when the play was made. This means that these values are probably missing because they were not recorded, rather than because they don't exist. So, it would make sense for us to try and guess what they should be rather than just leaving them as NA's.\n\nOn the other hand, there are other fields, like `PenalizedTeam` that also have lot of missing fields. In this case, though, the field is missing because if there was no penalty then it doesn't make sense to say *which* team was penalized. For this column, it would make more sense to either leave it empty or to add a third value like \"neither\" and use that to replace the NA's.","e7e7f5a9":"# Step 1 Load in the libraries and datasets\n","7450de13":"# Step 4: Figure out why the data is missing\n\n> **Is this value missing becuase it wasn't recorded or becuase it dosen't exist?**\n\nIf a value is missing becuase it doens't exist (like the height of the oldest child of someone who doesn't have any children) then it doesn't make sense to try and guess what it might be. These values you probalby do want to keep as NaN. On the other hand, if a value is missing becuase it wasn't recorded, then you can try to guess what it might have been based on the other values in that column and row. (This is called \"imputation\" and we'll learn how to do it next! \n\nLet's work through an example. Looking at the number of missing values in the nfl_data dataframe, I notice that the column `TimesSec` has a lot of missing values in it: ","8b6917b2":"# Step 5 (1): Drop missing values: *.dropna()\n___\n(not generally recommended)\nSenario: If you're in a hurry or don't have a reason to figure out why your values are missing, \nAction: remove any rows or columns that contain missing values by `dropna()` ","644bdfad":"Option 1:  specify what we want the `NaN` values to be replaced with. Here, I'm saying that I would like to replace all the `NaN` values with 0.","ff7d21fa":"We've lost quite a bit of data, but at this point we have successfully removed all the `NaN`'s from our data. ","a8dc0473":"And that's it for today! If you have any questions, be sure to post them in the comments below or [on the forums](https:\/\/www.kaggle.com\/questions-and-answers). \n\nRemember that your notebook is private by default, and in order to share it with other people or ask for help with it, you'll need to make it public. First, you'll need to save a version of your notebook that shows your current work by hitting the \"Commit & Run\" button. (Your work is saved automatically, but versioning your work lets you go back and look at what it was like at the point you saved it. It also let's you share a nice compiled notebook instead of just the raw code.) Then, once your notebook is finished running, you can go to the Settings tab in the panel to the left (you may have to expand it by hitting the [<] button next to the \"Commit & Run\" button) and setting the \"Visibility\" dropdown to \"Public\".\n\n# More practice!\n___\n\nIf you're looking for more practice handling missing values, check out these extra-credit\\* exercises:\n\n* [Handling Missing Values](https:\/\/www.kaggle.com\/dansbecker\/handling-missing-values): In this notebook Dan shows you several approaches to imputing missing data using scikit-learn's imputer. \n* Look back at the `Zipcode` column in the `sf_permits` dataset, which has some missing values. How would you go about figuring out what the actual zipcode of each address should be? (You might try using another dataset. You can search for datasets about San Fransisco on the [Datasets listing](https:\/\/www.kaggle.com\/datasets).) \n\n\\* no actual credit is given for completing the challenge, you just learn how to clean data real good :P","36915416":"Option 2: replace missing values with whatever value comes directly after it in the same column. (This makes a lot of sense for datasets where the observations have some sort of logical order to them.)","c729555f":"# Step 2: Take look at some data: *.sample()","b1a91257":"# Step 5(2): Filling in missing values automatically: *.fillna()"}}