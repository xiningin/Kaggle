{"cell_type":{"61a13502":"code","5b777b85":"code","7c6efd90":"code","889b9fc7":"code","01784658":"code","8a0d82e7":"code","5437e7f4":"code","5be30d33":"code","81cc5abd":"code","20111510":"code","bacb9a7e":"code","c0f12f3a":"code","3d14d247":"code","477b2094":"markdown","f5f33c4e":"markdown"},"source":{"61a13502":"import os\nfrom functools import reduce\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport skimage.io","5b777b85":"!ls -lh ..\/input\/prostate-cancer-grade-assessment","7c6efd90":"INPUT_DIR = \"..\/input\/prostate-cancer-grade-assessment\"\nTRAIN_DIR = \"train_images\"\nMASK_DIR = \"train_label_masks\"","889b9fc7":"train = pd.read_csv(f\"{INPUT_DIR}\/train.csv\")\ntest = pd.read_csv(f\"{INPUT_DIR}\/test.csv\")\nsbm = pd.read_csv(f\"{INPUT_DIR}\/sample_submission.csv\")","01784658":"# See: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/user_guide\/style.html#Subclassing\n\nfrom IPython.display import HTML\nfrom pandas.io.formats.style import Styler\n\n\nTEMPLATE = \"\"\"\n{% extends \"html.tpl\" %}\n{% block table %}\n{{ super() }}\n<span>Shape: {{ shape|default(\"\") }}<\/span>\n{% endblock table %}\n\"\"\"\n\nwith open(\"with_shape.tpl\", \"w\") as f:\n    f.write(TEMPLATE)\n\nWithShape = Styler.from_custom_template(\".\", \"with_shape.tpl\")\n\ndef profile(df):\n    return HTML(WithShape(df.head()).render(shape=str(df.shape)))\n","8a0d82e7":"profile(train)","5437e7f4":"profile(test)","5be30d33":"profile(sbm)","81cc5abd":"train[\"gleason_score\"].value_counts().sort_index().to_frame()","20111510":"import base64\nfrom io import BytesIO\n\n\ndef encode_image(fig):\n    \"\"\"\n    See: https:\/\/stackoverflow.com\/questions\/48717794\/matplotlib-embed-figures-in-auto-generated-html\n    \"\"\"\n    b = BytesIO()\n    fig.savefig(b, format=\"png\", bbox_inches=\"tight\", pad_inches=0.05)\n    return base64.b64encode(b.getvalue()).decode(\"utf-8\")\n\n    \ndef draw_image(img_path):\n    img = skimage.io.MultiImage(img_path)[-1]\n\n    fig, ax = plt.subplots()\n    ax.imshow(img)\n    ax.grid(False)\n    ax.set_xticks([])\n    ax.set_yticks([])\n    \n    for pos in [\"top\",\"bottom\", \"left\", \"right\"]:\n        ax.spines[pos].set_linewidth(0.5)\n    \n    return fig\n\n\ndef draw_mask(mask_path):\n    mask = skimage.io.MultiImage(mask_path)[-1]\n\n    colors = [\"black\", \"gray\", \"green\", \"yellow\", \"orange\", \"red\"]\n    cmap = matplotlib.colors.ListedColormap(colors)\n\n    fig, ax = plt.subplots()\n    ax.imshow(mask[:, :, 0], cmap=cmap, interpolation=\"nearest\", vmin=0, vmax=5)\n    ax.set_xticks([])\n    ax.set_yticks([])\n    \n    for pos in [\"top\",\"bottom\", \"left\", \"right\"]:\n        ax.spines[pos].set_linewidth(0.5)\n    \n    return fig\n\n\ndef merge_cols(df, cols):\n    return reduce(\n        lambda x, y: x + \"<br>\" + y,\n        [f\"{col}: \" + df[col].astype(str) for col in cols]\n    )\n\n\ndef show_images(df):\n    img_tag_tpl = '<img src=\"data:image\/png;base64,{}\" style=\"dispaly: block; margin: 0 auto\">'\n\n    imgs = []\n    masks = []\n    for idx, row in df.iloc[:9].reset_index(drop=False).iterrows():\n        # Process image\n        img_path = os.path.join(INPUT_DIR, TRAIN_DIR, row[\"image_id\"] + \".tiff\")\n        img_fig = draw_image(img_path)\n        imgs.append(img_tag_tpl.format(encode_image(img_fig)))\n        plt.close(img_fig)\n\n        # Process mask\n        mask_path = os.path.join(INPUT_DIR, MASK_DIR, row[\"image_id\"] + \"_mask.tiff\")\n        \n        if os.path.exists(mask_path):\n            mask_fig = draw_mask(mask_path)\n            masks.append(img_tag_tpl.format(encode_image(mask_fig)))\n            plt.close(mask_fig)\n        else:\n            masks.append(\"\")\n\n    cols = [\"image_id\", \"data_provider\", \"isup_grade\", \"gleason_score\"]\n\n    return HTML(\n        df\n        .assign(\n            info=merge_cols(df, cols),\n            image=imgs,\n            mask=masks,\n        )\n        .drop(cols, axis=1)\n        .style\n        .set_properties(**{\n            \"background-color\": \"white\",\n            \"border\": \"1px solid black\",\n            \"text-align\": \"center\",\n        })\n        .hide_index()\n        .render()\n    )","bacb9a7e":"show_images(train[train[\"gleason_score\"] == \"5+5\"].sample(9, random_state=42))","c0f12f3a":"show_images(train[train[\"gleason_score\"] == \"5+4\"].sample(9, random_state=42))","3d14d247":"show_images(train[train[\"gleason_score\"] == \"5+3\"].sample(9, random_state=42))","477b2094":"# How to embed images in dataframe","f5f33c4e":"# Display images"}}