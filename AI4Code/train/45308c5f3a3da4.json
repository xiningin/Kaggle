{"cell_type":{"98b37bb1":"code","a5660acc":"code","e948e2d0":"code","d62b96e8":"code","fbf68b22":"code","fd13c599":"code","c3fd59b1":"code","98b70015":"code","01f3f13d":"code","b4471110":"code","0d2b00c5":"code","e1a33d9c":"code","3712348c":"code","768bd87f":"code","8ea56384":"markdown","89fbcc78":"markdown","bba1ce85":"markdown","c62235f7":"markdown","401dc5da":"markdown","07659208":"markdown","ee5cdf21":"markdown","4ad83846":"markdown","117262ee":"markdown","7204f6e7":"markdown"},"source":{"98b37bb1":"import numpy as np\nimport tensorflow as tf\nfrom tensorflow.keras import datasets, utils\nfrom tensorflow.keras import models, layers, losses","a5660acc":"(x_train, y_train), (x_test, y_test) = datasets.mnist.load_data()","e948e2d0":"# data normalized\nx_train = x_train\/255.\nx_test  = x_test\/255.\n\n# reshape for model input\nx_train = x_train.reshape(-1,28,28,1)\nx_test = x_test.reshape(-1,28,28,1)\n\nprint(x_train.shape)\nprint(x_test.shape)","d62b96e8":"# encoding y data\ny_train = utils.to_categorical(y_train)\ny_test  = utils.to_categorical(y_test)\n\nprint(y_train.shape)\nprint(y_test.shape)","fbf68b22":"input_shape = (28,28,1) # img_rows, img_colums, color_channels\nnum_classes = 10","fd13c599":"## Build Model\ninputs = layers.Input(shape=input_shape)\nx = layers.Conv2D(16, kernel_size = (3, 3), activation = 'relu', padding = 'same')(inputs)\nx = layers.MaxPool2D(pool_size = (2, 2))(x)\n# 2nd Conv layer        \nx = layers.Conv2D(16, kernel_size = (3, 3), activation = 'relu', padding = 'same')(x)\nx = layers.MaxPool2D(pool_size = (2, 2))(x)\n# Fully Connected layer        \nx = layers.Flatten()(x)\nx = layers.Dense(64)(x)\noutputs = layers.Dense(num_classes, activation=\"softmax\")(x)\n\nmodel = models.Model(inputs=inputs, outputs=outputs)\n\nmodel.summary()","c3fd59b1":"# Compile Model\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","98b70015":"# Train Model\nhistory = model.fit(x_train, y_train, batch_size=128, epochs=20, validation_data=(x_test, y_test))","01f3f13d":"# Evaluate Model\nscore = model.evaluate(x_test, y_test)\nprint('Test loss: ', score[0])\nprint('Test accuracy: ', score[1])","b4471110":"y_pred = model.predict(x_test[0].reshape(-1,28,28,1)).argmax(axis=1)\nprint(y_pred)","0d2b00c5":"!pip install tinymlgen","e1a33d9c":"from tinymlgen import port\nc_code = port(model, variable_name='mnist_cnn', pretty_print=True, optimize=False) \n\nwith open('mnist_cnn.h', 'w') as f:\n    print(c_code, file=f)","3712348c":"# load raw x_test\n(x_train, y_train), (x_test, y_test) = datasets.mnist.load_data()\n    \nwith open('x_test.h', 'w') as f:\n    print(\"unsigned char x_test_dat[784] = {\", file=f)    \n    for i in range(28):\n        s = \"       \"\n        for j in range(28):\n            s+=str(x_test[0][i][j])+', ' # select x_test[0]\n        print(s, file=f)\n    print(\"};\", file=f)\nf.close()","768bd87f":"!cat x_test.h","8ea56384":"## Prepare Dataset","89fbcc78":"## Train Model","bba1ce85":"# TinyML Handwritten Digit Recognizer\n\n##  Dataset: MNIST (handwritten single digit 28x28)","c62235f7":"## Output: mnist_cnn.h & x_test.h are used in [TinyML_MNIST](https:\/\/github.com\/rkuo2000\/arduino\/tree\/master\/examples\/TinyML_MNIST)\n### x_test.h: x_test_dat (uint8) will be normalized (divided by 255) into x_test (float)","401dc5da":"### export a test data (uint8)","07659208":"## TinyML","ee5cdf21":"### export model\n    converter = tf.lite.TFLiteConverter.from_keras_model(model)\n    tflite_model = converter.convert()\n\n    # Save the model to disk\n    open(\"mnist_cnn_quantized.tflite\", \"wb\").write(tflite_model)\n\n    !xxd -i mnist_cnn_quantized.tflite > mnist_cnn_quantized.cc","4ad83846":"## Build Model","117262ee":"## Test Model","7204f6e7":"## Evaluate Model"}}