{"cell_type":{"1c736785":"code","709132ef":"code","9bdbd053":"code","13539b26":"code","00ff2d66":"code","7883ac77":"code","c8dfbcf0":"code","bfaa2221":"code","9132be6b":"code","5e125ea5":"code","b1448ebb":"code","d8f699d7":"code","331857ae":"code","6ab672eb":"code","c2dd4a59":"code","07806341":"code","714c1039":"code","cd11b844":"code","6295f4c4":"code","fbfd7b76":"code","b1731691":"code","d4adfdd0":"code","8be503af":"code","65fc2332":"code","0b8d0dbf":"code","e69de6f7":"markdown","7afca371":"markdown","4e61faed":"markdown","ed8a26ca":"markdown","b3c5b12f":"markdown","06994373":"markdown","2eddc328":"markdown","d83dd57a":"markdown","08c085f1":"markdown","723432a6":"markdown","e368dcbb":"markdown"},"source":{"1c736785":"import pandas as pd   \nimport numpy as np    \nimport matplotlib.pyplot as plt \n%matplotlib inline\nimport seaborn as sns\n\nimport time\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import metrics\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, log_loss, fbeta_score\nfrom sklearn.metrics import auc, roc_curve, roc_auc_score, precision_recall_curve\nfrom sklearn import tree","709132ef":"df = pd.read_csv(\"\/kaggle\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv\")\ndf.head()","9bdbd053":"df = df.dropna(how='all') \ndf = df[~df.duplicated()] \ntmp = df[df.TotalCharges == ' ']\ntmp","13539b26":"# REMOVE\ndf['TotalCharges'] = df['TotalCharges'].replace(' ',np.nan)  \ndf = df.dropna(how = 'any')  \ndf['TotalCharges'] = df['TotalCharges'].astype(float) ","00ff2d66":"print(df.Churn.value_counts())\ndf['Churn'].value_counts().plot(kind = 'bar').set_title('Churn')","7883ac77":"# Ta chuy\u1ec3n SeniorCitizen v\u1ec1 categorical features (Yes\/No) b\u1edfi v\u00ec \u0111\u00e2y kh\u00f4ng ph\u1ea3i l\u00e0 1 bi\u1ebfn li\u00ean t\u1ee5c\ndf['SeniorCitizen'] = df['SeniorCitizen'].replace({1:'Yes',0:'No'})\nnum_cols = ['tenure', 'MonthlyCharges', 'TotalCharges'] ","c8dfbcf0":"categorical_features = [\n 'gender',\n 'SeniorCitizen',\n 'Partner',\n 'Dependents',\n 'PhoneService',\n 'MultipleLines',\n 'InternetService',\n 'OnlineSecurity',\n 'OnlineBackup',\n 'DeviceProtection',\n 'TechSupport',\n 'StreamingTV',\n 'StreamingMovies',\n 'PaymentMethod',\n 'PaperlessBilling',\n 'Contract' ]\n\nROWS, COLS = 4, 4\nfig, ax = plt.subplots(ROWS, COLS, figsize=(18, 20) )\nrow, col = 0, 0\nfor i, categorical_feature in enumerate(categorical_features):\n    if col == COLS - 1:\n        row += 1\n    col = i % COLS\n    df[df.Churn=='No'][categorical_feature].value_counts().plot(kind='bar', \n                width=.5, ax=ax[row, col], color='blue', alpha=0.5).set_title(categorical_feature)\n    df[df.Churn=='Yes'][categorical_feature].value_counts().plot(kind='bar', \n                width=.3, ax=ax[row, col], color='orange', alpha=0.7).set_title(categorical_feature)\n    plt.legend(['No Churn', 'Churn'])\n    fig.subplots_adjust(hspace=0.7)","bfaa2221":"fig, ax = plt.subplots(1, 3, figsize=(15, 3))\ndf[df.Churn == \"No\"][num_cols].hist(bins=35, color=\"blue\", alpha=0.5, ax=ax)\ndf[df.Churn == \"Yes\"][num_cols].hist(bins=35, color=\"orange\", alpha=0.7, ax=ax)\nplt.legend(['No Churn', 'Churn'], shadow=True, loc=9)","9132be6b":"# Chuy\u1ec3n MonthlyCharges sang categorical \ndef monthlycharges_split(df) :   \n    if df['MonthlyCharges'] <= 30 :\n        return '0-30'\n    elif (df['MonthlyCharges'] > 30) & (df['MonthlyCharges'] <= 70 ):\n        return '30-70'\n    elif (df['MonthlyCharges'] > 70) & (df['MonthlyCharges'] <= 99 ):\n        return '70-99'\n    elif df['MonthlyCharges'] > 99 :\n        return '99plus'\ndf['monthlycharges_group'] = df.apply(lambda df:monthlycharges_split(df), axis = 1)\n\n# Chuy\u1ec3n TotalCharges sang categorical\ndef totalcharges_split(df) :   \n    if df['TotalCharges'] <= 2000 :\n        return '0-2k'\n    elif (df['TotalCharges'] > 2000) & (df['TotalCharges'] <= 4000 ):\n        return '2k-4k'\n    elif (df['TotalCharges'] > 4000) & (df['TotalCharges'] <= 6000) :\n        return '4k-6k'\n    elif df['TotalCharges'] > 6000 :\n        return '6kplus'\ndf['totalcharges_group'] = df.apply(lambda df:totalcharges_split(df), axis = 1)\n\n# Chuy\u1ec3n Tenure sang categorical \ndef tenure_split(df) :   \n    if df['tenure'] <= 20 :\n        return '0-20'\n    elif (df['tenure'] > 20) & (df['tenure'] <= 40 ):\n        return '20-40'\n    elif (df['tenure'] > 40) & (df['tenure'] <= 60) :\n        return '40-60'\n    elif df['tenure'] > 60 :\n        return '60plus'\ndf['tenure_group'] = df.apply(lambda df:tenure_split(df), axis = 1)","5e125ea5":"plt.figure(figsize = [10,5])\ndf[df.Churn == \"No\"]['monthlycharges_group'].value_counts().plot(kind = 'bar', color=\"blue\", alpha=0.5).set_title('monthlycharges_group')\ndf[df.Churn == \"Yes\"]['monthlycharges_group'].value_counts().plot(kind = 'bar', color=\"orange\", alpha=0.7, width=0.3)\nplt.legend(['No Churn', 'Churn'], shadow=True, loc=1)","b1448ebb":"plt.figure(figsize = [10,5])\ndf[df.Churn == \"No\"]['totalcharges_group'].value_counts().plot(kind = 'bar', color=\"blue\", alpha=0.5).set_title('totalcharges_group')\ndf[df.Churn == \"Yes\"]['totalcharges_group'].value_counts().plot(kind = 'bar', color=\"orange\", alpha=0.7, width=0.3)\nplt.legend(['No Churn', 'Churn'], shadow=True, loc=1)","d8f699d7":"plt.figure(figsize = [10,5])\ndf[df.Churn == \"No\"]['tenure_group'].value_counts().plot(kind = 'bar', color=\"blue\", alpha=0.5).set_title('tenure_group')\ndf[df.Churn == \"Yes\"]['tenure_group'].value_counts().plot(kind = 'bar', color=\"orange\", alpha=0.7, width=0.3)\nplt.legend(['No Churn', 'Churn'], shadow=True, loc=1)","331857ae":"df.to_csv('df.csv', index=False)","6ab672eb":"df = pd.read_csv('df.csv')","c2dd4a59":"# X\u1eed l\u00fd d\u1eef li\u1ec7u\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\n\nId_col     = ['customerID']\ntarget_col = ['Churn']\n# Bi\u1ebfn s\u1ed1\ncat_cols   = df.nunique()[df.nunique() < 6].keys().tolist()\ncat_cols   = [x for x in cat_cols if x not in target_col]\n# Bi\u1ebfn ph\u00e2n lo\u1ea1i\nnum_cols   = [x for x in df.columns if x not in cat_cols + target_col + Id_col]\n# Bi\u1ebfn nh\u1ecb ph\u00e2n\nbin_cols   = df.nunique()[df.nunique() == 2].keys().tolist()\n# C\u00e1c bi\u1ebfn > 2 gi\u00e1 tr\u1ecb\nmulti_cols = [i for i in cat_cols if i not in bin_cols]\n\n# Label encoding Binary\nle = LabelEncoder()\nfor i in bin_cols :\n    df[i] = le.fit_transform(df[i])\n    \ndf = pd.get_dummies(data = df, columns = multi_cols)\n\n#Scaling bi\u00ean s\u1ed1\nstd = StandardScaler()\nscaled = std.fit_transform(df[num_cols])\nscaled = pd.DataFrame(scaled,columns=num_cols)\ndf1 = df.drop(columns = num_cols, axis = 1)\ndf1 = df1.merge(scaled, left_index=True, right_index=True, how = \"left\")","07806341":"# Lo\u1ea1i b\u1ecf c\u1ed9t customerID\ndf1 = df1.drop('customerID', axis=1)\n\n# Nhi\u1ec1u c\u1ed9t \u0111\u1ec1u c\u00f3 (no internet service). Ch\u1ec9 gi\u1eef l\u1ea1i 1\ndf1 = df1.drop(columns=['OnlineSecurity_No internet service', 'OnlineBackup_No internet service', \n                        'DeviceProtection_No internet service', 'TechSupport_No internet service', \n                        'StreamingTV_No internet service', 'StreamingMovies_No internet service'], axis=1)\n","714c1039":"df1.to_csv('df1.csv', index=False)","cd11b844":"df1 = pd.read_csv('df1.csv')\ndf1","6295f4c4":"X, y = df1.drop('Churn',axis=1), df1[['Churn']]","fbfd7b76":"from sklearn import tree\n\ndef model_report(model_name, model):\n    print('\\nSearch for OPTIMAL THRESHOLD, vary from 0.0001 to 0.9999, fit\/predict on train\/test data')\n    model.fit(X_train, y_train)\n    optimal_th = 0.5   \n    \n    for i in range(0,3):\n        score_list = []\n        print('\\nLooping decimal place', i+1) \n        th_list = [np.linspace(optimal_th-0.4999, optimal_th+0.4999, 11), \n                 \n                 np.linspace(optimal_th-0.1, optimal_th+0.1, 21), \n                 np.linspace(optimal_th-0.01, optimal_th+0.01, 21)]\n        for th in th_list[i]:\n            y_pred = (model.predict_proba(X_test)[:,1] >= th)\n            f1scor = f1_score(y_test, y_pred)\n            score_list.append(f1scor)\n            print('{:.3f}->{:.4f}'.format(th, f1scor), end=',  ')  \n        optimal_th = float(th_list[i][score_list.index(max(score_list))])\n\n    print('optimal F1 score = {:.4f}'.format(max(score_list)))\n    print('optimal threshold = {:.3f}'.format(optimal_th))\n\n    print(model_name, 'accuracy score is')\n    print('Training: {:.2f}%'.format(100*model.score(X_train, y_train))) \n    print('Test set: {:.2f}%'.format(100*model.score(X_test, y_test)))   \n\n    y_pred = (model.predict_proba(X_test)[:,1] >= 0.25)\n    print('\\nAdjust threshold to 0.25:')\n    print('Precision: {:.4f},   Recall: {:.4f},   F1 Score: {:.4f}'.format(\n        precision_score(y_test, y_pred), recall_score(y_test, y_pred), f1_score(y_test, y_pred)))\n    print(model_name, 'confusion matrix: \\n', confusion_matrix(y_test, y_pred))\n\n    y_pred = model.predict(X_test)\n    print('\\nDefault threshold of 0.50:')\n    print('Precision: {:.4f},   Recall: {:.4f},   F1 Score: {:.4f}'.format(\n        precision_score(y_test, y_pred), recall_score(y_test, y_pred), f1_score(y_test, y_pred)))\n    print(model_name, 'confusion matrix: \\n', confusion_matrix(y_test, y_pred))\n\n    y_pred = (model.predict_proba(X_test)[:,1] >= 0.75)\n    print('\\nAdjust threshold to 0.75:')\n    print('Precision: {:.4f},   Recall: {:.4f},   F1 Score: {:.4f}'.format(\n        precision_score(y_test, y_pred), recall_score(y_test, y_pred), f1_score(y_test, y_pred)))\n    print(model_name, 'confusion matrix: \\n', confusion_matrix(y_test, y_pred))\n\n    y_pred = (model.predict_proba(X_test)[:,1] >= optimal_th)\n    print('\\nOptimal threshold {:.3f}'.format(optimal_th))\n    print('Precision: {:.4f},   Recall: {:.4f},   F1 Score: {:.4f}'.format(\n        precision_score(y_test, y_pred), recall_score(y_test, y_pred), f1_score(y_test, y_pred)))\n    print(model_name, 'confusion matrix: \\n', confusion_matrix(y_test, y_pred))\n    \n    global model_f1, model_auc, model_ll, model_roc_auc\n    model_f1 = f1_score(y_test, y_pred)\n\n    y_pred = model.predict_proba(X_test)\n    model_ll = log_loss(y_test, y_pred)\n    print(model_name, 'Log-loss: {:.4f}'.format(model_ll))\n    y_pred = model.predict(X_test)\n    model_roc_auc = roc_auc_score(y_test, y_pred)\n    print(model_name, 'roc_auc_score: {:.4f}'.format(model_roc_auc)) \n    y_pred = model.predict_proba(X_test)[:,1]\n    fpr, tpr, thresholds = roc_curve(y_test, y_pred)\n    model_auc = auc(fpr, tpr)\n    print(model_name, 'AUC: {:.4f}'.format(model_auc))\n\n    plt.figure(figsize = [6,6])\n    plt.plot(fpr, tpr, label='ROC curve (area = %0.2f)' % model_auc)\n    plt.plot([0, 1], [0, 1],'r--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.0])\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver Operating Characteristic')\n    plt.legend(loc=\"lower right\")\n    plt.savefig('roc_auc_score')\n    #tree.plot_tree(model)\n    plt.show()\n  \n    return","b1731691":"# chia 80:20\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.2, random_state=71)\nprint('X_train', X_train.shape)\nprint('y_train', y_train.shape)\nprint('X_test', X_test.shape)\nprint('y_test', y_test.shape)","d4adfdd0":"from xgboost import plot_tree","8be503af":"print('\\n\"\"\"\"\"\" C\u00e2y Ph\u00e2n lo\u1ea1i \"\"\"\"\"\"')\n\nprint('\\nT\u00ecm t\u1ed1i \u01b0u `, thay \u0111\u1ed5i t\u1eeb 3 -> 20, using KFold(5) Cross Validation tr\u00ean t\u1eadp train')\nkf = KFold(n_splits=5, random_state=21, shuffle=True) \nd_scores = []\nfor d in range(3, 20):\n    decisiontree = DecisionTreeClassifier(max_depth=d)\n    cvs = cross_val_score(decisiontree, X_train, y_train, cv=kf, scoring='f1').mean()\n    d_scores.append(cvs)\n    print('{:.4f}'.format(cvs), end=\", \")\nprint('F1 scpre \u0111\u01b0\u1ee3c ch\u1ecdn = {:.4f}'.format(max(d_scores))) \noptimal_d = d_scores.index(max(d_scores)) + 2   # Ch\u1ec9 s\u1ed1 = 0 t\u1ee9c l\u00e0 dept  = 3\nprint('\u0110\u1ed9 s\u00e2u t\u1ed1i \u01b0u =', optimal_d)\n\ntime1 = time.time()\ndecisiontree = DecisionTreeClassifier(max_depth=optimal_d, criterion = \"entropy\")\nmodel_report('DecisionTreeClassifier', decisiontree)\n","65fc2332":"df1.head","0b8d0dbf":"X_train.columns\n","e69de6f7":"# L\u00c0M S\u1ea0CH D\u1eee LI\u1ec6U","7afca371":"**K-FOLD Cross Validation**\n\nKFold(n_splits=5, random_state=21, shuffle=True)\n> n_splits=5: Number of fold\n\n> shuffle: Whether shuffle data before split into each fold\n \n> random_state: Have effect when set shuffle = True, m\u1ed7i l\u1ea7n random cho m\u1ed7i fold s\u1ebd l\u1ea5y c\u00e1ch nhau ch\u1ec9 s\u1ed1 l\u00e0 21 nh\u1eb1m \u0111\u1ea3m b\u1ea3o t\u00ednh ng\u1eabu nhi\u00ean\n \n\n","4e61faed":"> Ng\u01b0\u1eddi cao tu\u1ed5i v\u00e0 KH kh\u00f4ng c\u00f3 d\u1ecbch v\u1ee5 \u0111i\u1ec7n tho\u1ea1i l\u00e0 thi\u1ec3u s\u1ed1 trong d\u1eef li\u1ec7u \n\n> \"Kh\u00f4ng c\u00f3 d\u1ecbch v\u1ee5 Internet\" l\u00e0 1 t\u00ednh n\u0103ng l\u1eb7p l\u1ea1i trong 6 bi\u00eau \u0111\u1ed3 kh\u00e1c.","ed8a26ca":"# Model Selection","b3c5b12f":"=> Ta th\u1ea5y r\u1eb1ng t\u1ef7 l\u1ec7 KH t\u1eeb b\u1ecf s\u1ebd r\u01a1i v\u00e0o KH c\u00f3 h\u1ee3p \u0111\u1ed3ng h\u00e0ng th\u00e1ng v\u00e0 thanh to\u00e1n b\u1eb1ng S\u00e9c \u0111i\u1ec7n t\u1eed","06994373":"Kh\u1ea3 n\u0103ng t\u1eeb b\u1ecf r\u01a1i v\u00e0o nh\u1eefng TH sau:\n> \u0110a s\u1ed1 \u1edf nh\u1eefng kh\u00e1ch h\u00e0ng m\u1edbi s\u1eed d\u1ee5ng d\u1ecbch v\u1ee5, c\u00e0ng v\u1ec1 sau th\u00ec kh\u1ea3 n\u0103ng c\u00e0ng th\u1ea5p\n\n> Chi ph\u00ed h\u00e0ng th\u00e1ng c\u00e0ng cao th\u00ec kh\u1ea3 n\u0103ng t\u1eeb b\u1ecf c\u00e0ng l\u1edbn \n","2eddc328":"# DECISION TREE CLASSIFIER","d83dd57a":"# Feature Engineering","08c085f1":"# CH\u00da TH\u00cdCH DATA\n* customerID: ID c\u1ee7a kh\u00e1ch h\u00e0ng\n* gender: Gi\u1edbi t\u00ednh\n* SeniorCitizen: C\u00f3 ph\u1ea3i l\u00e0 ng\u01b0\u1eddi cao tu\u1ed5i hay kh\u00f4ng ?\n* Partner: Kh\u00e1ch h\u00e0ng \u0111ang c\u00f3 \u0111\u00f4i t\u00e1c hay kh\u00f4ng ? (\u0111\u1ed1i t\u00e1c)\n* Dependents: Kh\u00e1ch h\u00e0ng c\u00f3 ng\u01b0\u1eddi b\u1ea3o h\u1ed9 hay kh\u00f4ng ? (b\u1ea3o h\u1ed9)\n* tenure: S\u1ed1 th\u00e1ng kh\u00e1ch h\u00e0ng s\u1eed d\u1ee5ng d\u1ecbch v\u1ee5 c\u00f4ng ty (nhi\u1ec7m k\u1ef3)\n* PhoneService: KH c\u00f3 s\u1eed d\u1ee5ng d\u1ecbch v\u1ee5 \u0111i\u1ec7n tho\u1ea1i hay kh\u00f4ng ?\n* MultipleLines: KH c\u00f3 nhi\u1ec1u \u0111\u01b0\u1eddng d\u00e2y hay kh\u00f4ng ? (Yes\/No\/Not Service)\n* InternetService: Nh\u00e0 cung c\u1ea5p d\u1ecbch v\u1ee5 Internet c\u1ee7a KH (DSL, C\u00e1p quang, Kh\u00f4ng)\n* OnlineSecurity: KH c\u00f3 b\u1ea3o m\u1eadt tr\u1ef1c tuy\u1ebfn hay kh\u00f4ng ? (C\u00f3, Kh\u00f4ng, Kh\u00f4ng d\u1ecbch v\u1ee5 Internet)\n* OnlineBackup: KH c\u00f3 sao l\u01b0u tr\u1ef1c tuy\u1ebfn hay kh\u00f4ng (C\u00f3, Kh\u00f4ng, Kh\u00f4ng d\u1ecbch v\u1ee5 Internet)\n* DeviceProtection: KH c\u00f3 b\u1ea3o v\u1ec7 thi\u1ebft b\u1ecb Internet hay kh\u00f4ng ? (C\u00f3, Kh\u00f4ng, Kh\u00f4ng d\u1ecbch v\u1ee5 Internet)\n* TechSupport: KH c\u00f3 c\u1ea7n h\u1ed7 tr\u1ee3 k\u1ef9 thu\u1eadt hay kh\u00f4ng (C\u00f3, Kh\u00f4ng, Kh\u00f4ng d\u1ecbch v\u1ee5 Internet)\n* StreamingTV: KH c\u00f3 truy\u1ec1n h\u00ecnh tr\u1ef1c tuy\u1ebfn hay kh\u00f4ng ? (C\u00f3, Kh\u00f4ng, Kh\u00f4ng d\u1ecbch v\u1ee5 Internet)\n* StreamingMovies: KH c\u00f3 xem phim tr\u1ef1c tuy\u1ebfn hay kh\u00f4ng ? (C\u00f3, Kh\u00f4ng, Kh\u00f4ng d\u1ecbch v\u1ee5 Internet)\n* Contract: Th\u1eddi h\u1ea1n h\u1ee3p \u0111\u1ed3ng c\u1ee7a kh\u00e1ch h\u00e0ng (H\u00e0ng th\u00e1ng, 1 n\u0103m, 2 n\u0103m)\n* PaperlessBilling: KH thanh to\u00e1n m\u00e0 kh\u00f4ng c\u1ea7n gi\u1ea5y t\u1edd hhay kh\u00f4ng ? \n* PaymentMethod: Ph\u01b0\u01a1ng th\u1ee9c thanh to\u00e1n c\u1ee7a KH (Giao d\u1ecbch \u0111i\u1ec7n t\u1eed, G\u1eedi qua b\u01b0u \u0111i\u1ec7n, Chuy\u1ec3n kho\u1ea3n, Th\u1ebb t\u00edn d\u1ee5ng)\n* MonthlyCharges: Ti\u1ec1n ph\u00ed c\u1ee7a KH h\u00e0ng th\u00e1ng\n* TotalCharges: T\u1ed5ng ph\u00ed\n* Churn: KH c\u00f3 t\u1eeb b\u1ecf hay kh\u00f4ng ? ","723432a6":"=> Ch\u1ec9 c\u00f3 t\u1ed5ng c\u1ed9ng 4\/20 bi\u1ebfn l\u00e0 numerical","e368dcbb":"# Feature Selection"}}