{"cell_type":{"4de2dd7b":"code","8a829c3f":"code","183e5749":"code","ad0fbaee":"code","657ba77f":"code","33180d90":"code","5ceb0d8b":"code","4cc5a46e":"code","9280c40f":"code","b1d7dbc8":"code","ca9bfc56":"code","b0ac2671":"code","81020a8e":"code","6092a734":"code","fbb3eec3":"code","2790f42d":"code","a399b804":"code","a539f376":"code","cae6180d":"code","b46bc227":"code","21c3680d":"code","20e0e10d":"code","cd9be789":"code","19d39615":"code","f80e1992":"markdown","33b16c73":"markdown","de313d15":"markdown","d2db951c":"markdown","0541c5da":"markdown","93061f63":"markdown","e225f309":"markdown","ce3c4367":"markdown","a98b0153":"markdown","efa5fa8e":"markdown","017afd34":"markdown","e7ee21d0":"markdown","b6001565":"markdown","ce8db20c":"markdown","99710ef8":"markdown","aa692a36":"markdown","5827d9c7":"markdown"},"source":{"4de2dd7b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","8a829c3f":"import numpy as np\nimport matplotlib.pyplot as plt\nimport h5py\nimport scipy\nfrom PIL import Image\nfrom scipy import ndimage\n\n%matplotlib inline","183e5749":"import numpy as np\nimport h5py\n    \n    \ndef load_dataset():\n    train_dataset = h5py.File('\/kaggle\/input\/aulas-keras\/train_catvnoncat.h5', \"r\")\n    train_set_x_orig = np.array(train_dataset[\"train_set_x\"][:]) # your train set features\n    train_set_y_orig = np.array(train_dataset[\"train_set_y\"][:]) # your train set labels\n\n    test_dataset = h5py.File('\/kaggle\/input\/aulas-keras\/test_catvnoncat.h5', \"r\")\n    test_set_x_orig = np.array(test_dataset[\"test_set_x\"][:]) # your test set features\n    test_set_y_orig = np.array(test_dataset[\"test_set_y\"][:]) # your test set labels\n\n    classes = np.array(test_dataset[\"list_classes\"][:]) # the list of classes\n    \n    train_set_y_orig = train_set_y_orig.reshape((1, train_set_y_orig.shape[0]))\n    test_set_y_orig = test_set_y_orig.reshape((1, test_set_y_orig.shape[0]))\n    \n    return train_set_x_orig, train_set_y_orig, test_set_x_orig, test_set_y_orig, classes\n\n# Loading the data (cat\/non-cat)\ntrain_set_x_orig, train_set_y, test_set_x_orig, test_set_y, classes = load_dataset()","ad0fbaee":"m_train = train_set_x_orig.shape[0]\nm_test = test_set_x_orig.shape[0]\nnum_px = train_set_x_orig.shape[1]\n\nprint (\"Number of training examples: m_train = \" + str(m_train))\nprint (\"Number of testing examples: m_test = \" + str(m_test))\nprint (\"Height\/Width of each image: num_px = \" + str(num_px))\nprint (\"Each image is of size: (\" + str(num_px) + \", \" + str(num_px) + \", 3)\")\nprint (\"train_set_x shape: \" + str(train_set_x_orig.shape))\nprint (\"train_set_y shape: \" + str(train_set_y.shape))\nprint (\"test_set_x shape: \" + str(test_set_x_orig.shape))\nprint (\"test_set_y shape: \" + str(test_set_y.shape))","657ba77f":"# Example of a cat\nindex = 24\nplt.imshow(train_set_x_orig[index])\nprint (\"y = \" + str(train_set_y[:, index]) + \", it's a '\" + classes[np.squeeze(train_set_y[:, index])].decode(\"utf-8\") +  \"' picture.\")","33180d90":"# Example of a not-cat\nindex = 100\nplt.imshow(train_set_x_orig[index])\nprint (\"y = \" + str(train_set_y[:, index]) + \", it's a '\" + classes[np.squeeze(train_set_y[:, index])].decode(\"utf-8\") +  \"' picture.\")","5ceb0d8b":"# Reshape the training and test examples\n\ntrain_set_x_flatten = train_set_x_orig.reshape(train_set_x_orig.shape[0], -1).T\ntest_set_x_flatten = test_set_x_orig.reshape(test_set_x_orig.shape[0], -1).T\n\nprint (\"train_set_x_flatten shape: \" + str(train_set_x_flatten.shape))\nprint (\"train_set_y shape: \" + str(train_set_y.shape))\nprint (\"test_set_x_flatten shape: \" + str(test_set_x_flatten.shape))\nprint (\"test_set_y shape: \" + str(test_set_y.shape))","4cc5a46e":"# Let's standardize our dataset.\n\ntrain_set_x = train_set_x_flatten\/255.\ntest_set_x = test_set_x_flatten\/255.","9280c40f":"print('% of Non-cat in the training data: ', 100*np.sum(train_set_y == 0)\/len(train_set_y[0]))\nprint('% of Cat in the training data: ', 100*np.sum(train_set_y == 1)\/len(train_set_y[0]))","b1d7dbc8":"def sigmoid(z):\n    \"\"\"\n    Compute the sigmoid of z\n\n    Arguments:\n    z -- A scalar or numpy array of any size.\n\n    Return:\n    s -- sigmoid(z)\n    \"\"\"\n    s = 1 \/ (1 + np.exp(-z))\n    \n    return s","ca9bfc56":"def initialize_with_zeros(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n    \n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n    \n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n    \n    w = np.zeros((dim, 1))\n    b = 0\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n    \n    return w, b","b0ac2671":"def propagate(w, b, X, Y):\n    \"\"\"\n    Implement the cost function and its gradient for the propagation explained above\n    Arguments:\n    w -- weights, a numpy array of size (num_px * num_px * 3, 1)\n    b -- bias, a scalar\n    X -- data of size (num_px * num_px * 3, number of examples)\n    Y -- true \"label\" vector (containing 0 if non-cat, 1 if cat) of size (1, number of examples)\n    Return:\n    cost -- negative log-likelihood cost for logistic regression\n    dw -- gradient of the loss with respect to w, thus same shape as w\n    db -- gradient of the loss with respect to b, thus same shape as b\n    Tips:\n    - Write your code step by step for the propagation. np.log(), np.dot()\n    \"\"\"\n    \n    m = X.shape[1]\n    \n    # FORWARD PROPAGATION (FROM X TO COST)\n    A = sigmoid(np.dot(w.T, X) + b)       # compute activation\n    cost = -1\/m * np.sum(Y*np.log(A) + (1 - Y)*np.log(1 - A))  # compute cost\n    \n    # BACKWARD PROPAGATION (TO FIND GRAD)\n    dw = 1\/m * np.dot(X, (A - Y).T)\n    db = 1\/m * np.sum(A - Y)\n\n    assert(dw.shape == w.shape)\n    assert(db.dtype == float)\n    cost = np.squeeze(cost)\n    assert(cost.shape == ())\n    \n    grads = {\"dw\": dw,\n             \"db\": db}\n    \n    return grads, cost","81020a8e":"def optimize(w, b, X, Y, num_iterations, learning_rate, print_cost = False):\n    \"\"\"\n    This function optimizes w and b by running a gradient descent algorithm\n    \n    Arguments:\n    w -- weights, a numpy array of size (num_px * num_px * 3, 1)\n    b -- bias, a scalar\n    X -- data of shape (num_px * num_px * 3, number of examples)\n    Y -- true \"label\" vector (containing 0 if non-cat, 1 if cat), of shape (1, number of examples)\n    num_iterations -- number of iterations of the optimization loop\n    learning_rate -- learning rate of the gradient descent update rule\n    print_cost -- True to print the loss every 100 steps\n    \n    Returns:\n    params -- dictionary containing the weights w and bias b\n    grads -- dictionary containing the gradients of the weights and bias with respect to the cost function\n    costs -- list of all the costs computed during the optimization, this will be used to plot the learning curve.\n    \n    Tips:\n    You basically need to write down two steps and iterate through them:\n        1) Calculate the cost and the gradient for the current parameters. Use propagate().\n        2) Update the parameters using gradient descent rule for w and b.\n    \"\"\"\n    \n    costs = []\n    \n    for i in range(num_iterations):\n        \n        \n        # Cost and gradient calculation \n        grads, cost = propagate(w, b, X, Y)\n        \n        # Retrieve derivatives from grads\n        dw = grads[\"dw\"]\n        db = grads[\"db\"]\n        \n        # update rule\n        w = w - learning_rate*dw\n        b = b - learning_rate*db\n        \n        # Record the costs\n        if i % 100 == 0:\n            costs.append(cost)\n        \n        # Print the cost every 100 training iterations\n        if print_cost and i % 100 == 0:\n            print (\"Cost after iteration %i: %f\" %(i, cost))\n    \n    params = {\"w\": w,\n              \"b\": b}\n    \n    grads = {\"dw\": dw,\n             \"db\": db}\n    \n    return params, grads, costs","6092a734":"def predict(w, b, X):\n    '''\n    Predict whether the label is 0 or 1 using learned logistic regression parameters (w, b)\n    \n    Arguments:\n    w -- weights, a numpy array of size (num_px * num_px * 3, 1)\n    b -- bias, a scalar\n    X -- data of size (num_px * num_px * 3, number of examples)\n    \n    Returns:\n    Y_prediction -- a numpy array (vector) containing all predictions (0\/1) for the examples in X\n    '''\n    \n    m = X.shape[1]\n    Y_prediction = np.zeros((1,m))\n    w = w.reshape(X.shape[0], 1)\n    \n    # Compute vector \"A\" predicting the probabilities of a cat being present in the picture\n    A = sigmoid(np.dot(w.T, X) + b)\n    \n    for i in range(A.shape[1]):\n        \n        # Convert probabilities A[0,i] to actual predictions p[0,i]\n        if A[:, i] <= 0.5:\n            Y_prediction[:, i] = 0\n        else:\n            Y_prediction[:, i] = 1\n    \n    assert(Y_prediction.shape == (1, m))\n    \n    return Y_prediction","fbb3eec3":"def model(X_train, Y_train, X_test, Y_test, num_iterations = 2000, learning_rate = 0.5, print_cost = False):\n    \"\"\"\n    Builds the logistic regression model by calling the function you've implemented previously\n    \n    Arguments:\n    X_train -- training set represented by a numpy array of shape (num_px * num_px * 3, m_train)\n    Y_train -- training labels represented by a numpy array (vector) of shape (1, m_train)\n    X_test -- test set represented by a numpy array of shape (num_px * num_px * 3, m_test)\n    Y_test -- test labels represented by a numpy array (vector) of shape (1, m_test)\n    num_iterations -- hyperparameter representing the number of iterations to optimize the parameters\n    learning_rate -- hyperparameter representing the learning rate used in the update rule of optimize()\n    print_cost -- Set to true to print the cost every 100 iterations\n    \n    Returns:\n    d -- dictionary containing information about the model.\n    \"\"\"\n    \n    # initialize parameters with zeros\n    dim = X_train.shape[0]\n    w, b = initialize_with_zeros(dim)\n\n    # Gradient descent\n    parameters, grads, costs = optimize(w, b, X_train, Y_train, num_iterations= num_iterations, learning_rate = learning_rate, print_cost = print_cost)\n    \n    # Retrieve parameters w and b from dictionary \"parameters\"\n    w = parameters[\"w\"]\n    b = parameters[\"b\"]\n    \n    # Predict test\/train set examples\n    Y_prediction_test = predict(w, b, X_test)\n    Y_prediction_train = predict(w, b, X_train)\n\n    # Print train\/test Errors\n    print(\"train accuracy: {} %\".format(100 - np.mean(np.abs(Y_prediction_train - Y_train)) * 100))\n    print(\"test accuracy: {} %\".format(100 - np.mean(np.abs(Y_prediction_test - Y_test)) * 100))\n\n    \n    d = {\"costs\": costs,\n         \"Y_prediction_test\": Y_prediction_test, \n         \"Y_prediction_train\" : Y_prediction_train, \n         \"w\" : w, \n         \"b\" : b,\n         \"learning_rate\" : learning_rate,\n         \"num_iterations\": num_iterations}\n    \n    return d\n\nd = model(train_set_x, train_set_y, test_set_x, test_set_y, num_iterations = 2000, learning_rate = 0.005, print_cost = True)","2790f42d":"d","a399b804":"d['w'] # optimal value of d. It is a vector of size (12288, 1)","a539f376":"d['b'] # optimal value of d. It is a real number.","cae6180d":"# Plot learning curve (with costs)\ncosts = np.squeeze(d['costs'])\nplt.plot(costs)\nplt.ylabel('cost')\nplt.xlabel('iterations (per hundreds)')\nplt.title(\"Learning rate =\" + str(d[\"learning_rate\"]))\nplt.show()","b46bc227":"learning_rates = [0.01, 0.001, 0.0001]\nmodels = {}\nfor i in learning_rates:\n    print (\"learning rate is: \" + str(i))\n    models[str(i)] = model(train_set_x, train_set_y, test_set_x, test_set_y, num_iterations = 2000, learning_rate = i, print_cost = False)\n    print ('\\n' + \"-------------------------------------------------------\" + '\\n')\n\nfor i in learning_rates:\n    plt.plot(np.squeeze(models[str(i)][\"costs\"]), label= str(models[str(i)][\"learning_rate\"]))\n\nplt.ylabel('cost')\nplt.xlabel('iterations (hundreds)')\n\nlegend = plt.legend(loc='upper center', shadow=True)\nframe = legend.get_frame()\nframe.set_facecolor('0.90')\nplt.show()","21c3680d":"def own_Image(my_image):\n    # We preprocess the image to fit your algorithm.\n    fname = my_image\n    image = np.array(ndimage.imread(fname, flatten=False))\n    my_image = scipy.misc.imresize(image, size=(num_px,num_px)).reshape((1, num_px*num_px*3)).T\n    my_predicted_image = predict(d[\"w\"], d[\"b\"], my_image)\n\n    plt.imshow(image)\n    print(\"y = \" + str(np.squeeze(my_predicted_image)) + \", your algorithm predicts a \\\"\" + classes[int(np.squeeze(my_predicted_image)),].decode(\"utf-8\") +  \"\\\" picture.\")","20e0e10d":"own_Image('\/kaggle\/input\/cat-not-cat\/apu.jpeg')","cd9be789":"own_Image('\/kaggle\/input\/cat-not-cat\/dog.jpg')","19d39615":"own_Image('\/kaggle\/input\/cat-not-cat\/eiffel_tower.jpg')","f80e1992":"#### Building the Helper function","33b16c73":"#### Training the Model : merge all functions into a model","de313d15":"#### Predict : Convert the entries of a into 0 (if activation <= 0.5) or 1 (if activation > 0.5)","d2db951c":"We could clearly see that this Cat Classifer is still very naive predicting the unseen images and need lot of modifications to make it more accurate. We will achieve that it subsequent solution. Thank you.","0541c5da":"#### Interpreting the Output -\n\nTraining accuracy is close to 100%. This is a good, our model is working and has high enough capacity to fit the training data.\u00a0\nTest error is 70 %. It is actually not bad for this simple model, given the small dataset we used and that logistic regression is a linear classifier. But as we keep extending this classifier with more sophisticated algorithms, we will see that we do lot better in predicting the unseen data.\nAlso, you see that the model is clearly overfitting the training data. Later we will see how to reduce overfitting, for example by using regularization and other important techniques.","93061f63":"#### Forward and Backward propagation","e225f309":"For convenience, you should now reshape images of shape (num_px, num_px, 3) in a numpy-array of shape (num_px  \u2217  num_px  \u2217  3, 1). After this, our training (and test) dataset is a numpy-array where each column represents a flattened image. There should be m_train (respectively m_test) columns.","ce3c4367":"#### Initializing parameters","a98b0153":"To represent color images, the red, green and blue channels (RGB) must be specified for each pixel, and so the pixel value is actually a vector of these numbers ranging from 0 to 255. They are basically the pixel values.\n\nOne common preprocessing step in machine learning is to center and standardize your dataset, meaning that you substract the mean of the whole numpy array from each example, and then divide each example by the standard deviation of the whole numpy array. But for picture datasets, it is simpler and more convenient and works almost as well to just divide every row of the dataset by 255 (the maximum value of a pixel channel).","efa5fa8e":"#### Try your own images -","017afd34":"#### Loading & Exploring Datasets","e7ee21d0":"#### Choice of Learning Rate -\nIn order for Gradient Descent to work you must choose the learning rate wisely. The learning rate  \u03b1  determines how rapidly we update the parameters. If the learning rate is too large we may \"overshoot\" the optimal value. Similarly, if it is too small we will need too many iterations to converge to the best values. That's why it is crucial to use a well-tuned learning rate.Let's compare the learning curve of our model with several choices of learning rates","b6001565":"#### Kaggle code to locate the input file \nHere we will be only working with \n* \/kaggle\/input\/aulas-keras\/train_catvnoncat.h5\n* \/kaggle\/input\/aulas-keras\/test_catvnoncat.h5\n","ce8db20c":"#### Optimization : Updating the parameters using Gradient Descent","99710ef8":"#### Plot learning curve (with costs)","aa692a36":"#### Importing Modules","5827d9c7":"## Problem Statement\nYou are given a dataset with the following information -\n\n1. A training set of m_train images labeled as cat (y = 1) or non-cat (y = 0)\n2. A test set of m_test images labeled as cat or non-cat\n\nEach image is of shape (num_px, num_px, 3) where height and width of the image is denoted by num_px, hence it is a square and also 3 denotes the three channels (Red, Green & Blue) or RGB in short.\n\nYou will build a simple image-recognition algorithm that can correctly classify pictures as cat or\u00a0non-cat."}}