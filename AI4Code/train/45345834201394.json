{"cell_type":{"548af219":"code","6fb16c96":"code","538a379c":"code","127b0414":"code","93ca5348":"code","2521f073":"code","10df5c07":"code","99e28373":"code","bee6c6b6":"code","40f1aa08":"code","d07e6b0c":"code","3b54cac1":"code","59228b30":"code","4991afa1":"code","3cdafcaa":"code","e3eea1af":"code","673bc41a":"code","f540f50f":"code","c9ef0d98":"code","083341cb":"code","87e28b82":"code","3b3f0a13":"code","56b64d07":"code","a5467f8a":"code","e54fe7b8":"code","1c8511ea":"code","2ccb41a8":"code","c648d0a2":"code","9761d3de":"code","824fa191":"code","c075610a":"code","e769a520":"code","dada4ffd":"code","cf0532b3":"code","1395f3fa":"code","c8c8781f":"code","e68e1f8a":"code","ab22c427":"code","189ecdc1":"code","80d5ced1":"code","30b5dca1":"code","833f096e":"code","44198980":"code","1e14b8f3":"code","e3da3b91":"code","c7c018ce":"code","b6732663":"code","92fc85f1":"code","546aea65":"code","761a214f":"code","be828ac1":"code","b391c952":"code","9cb9c8f4":"code","fe46f0fd":"code","b6fb30bf":"code","6957108d":"markdown","de693cad":"markdown","4ab1ce04":"markdown","259f63c4":"markdown","11788435":"markdown","d3ac1751":"markdown","33a76e7b":"markdown","2ea9eb60":"markdown","224b34cd":"markdown","425d0af1":"markdown","f844673f":"markdown","b604be42":"markdown","e401420e":"markdown","2680ed7e":"markdown","9a236f9b":"markdown","b1f2bb57":"markdown","43b561ab":"markdown","b2348b81":"markdown"},"source":{"548af219":"import os\nos.listdir(\"..\/input\")","6fb16c96":"import numpy as np\nimport pandas as pd \n\ngeo = pd.read_csv(\"..\/input\/olist_geolocation_dataset.csv\")\ngeo.head(10)","538a379c":"geolocation_state = geo['geolocation_state']\nuniqueGs, countsGs = np.unique(geolocation_state, return_counts=True)\ngeolocation_state_index = np.asarray((uniqueGs, countsGs)).T\n\ngeolocation_state_index_sorted = geolocation_state_index[geolocation_state_index[:,1].argsort()[::-1]]\n\nprint (\"Sorted Geolocation State Index\")\nprint(geolocation_state_index_sorted)","127b0414":"print(geolocation_state_index_sorted[:, [0]])","93ca5348":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.set(style=\"whitegrid\")\nsns.set(style=\"ticks\")\n#pd.DataFrame(clean_data, columns=['x', 'y'])\nplt.figure(figsize=(10,10))\n\ngeolocation_state_index_sortedPD = pd.DataFrame(geolocation_state_index_sorted, columns=['x','y'])\n\nax = sns.barplot('y', 'x', data=geolocation_state_index_sortedPD)\n","2521f073":"sns.lmplot('x', 'y', data=geolocation_state_index_sortedPD, fit_reg=False, size=4, aspect=3)","10df5c07":"sns.kdeplot(df.y)","99e28373":"plt.hist(df.x, alpha=.3)\nsns.rugplot(df.x);","bee6c6b6":"\n# Initialize the matplotlib figure\nf, ax = plt.subplots(figsize=(6, 15))\n\n#sns.barplot(x=Data.Year,y=Data.Salary) \/\/year and salary attributes were present in my dataset.\n\n# Load the example car crash dataset\nxs = geolocation_state_index_sorted[1]\nys = geolocation_state_index_sorted[0]\n# Plot the total crashes\nsns.set_color_codes(\"pastel\")\nsns.barplot(ys, xs, label=\"Total sales per city\", color=\"b\")\n\n\n# Add a legend and informative axis label\nax.legend(ncol=2, loc=\"lower right\", frameon=True)\nax.set(xlim=(0, 24), ylabel=\"\",\n       xlabel=\"Sales Analysis\")\nsns.despine(left=True, bottom=True)","40f1aa08":"geolocation_city = geo['geolocation_city']\nuniqueGc, countGc = np.unique(geolocation_city, return_counts=True)\ngeolocation_city_index = np.array((uniqueGc, countGc)).T\n\n# Sorting\ngeolocation_city_index_sorted = geolocation_city_index[geolocation_city_index[:,1].argsort()[::-1]]\n# Top 100 cities\n\nprint (\"#100 cities sorted by sales per city\")\nprint(geolocation_city_index_sorted[0:100,:])\n","d07e6b0c":"# Removing some outliers\n#Brazils most Northern spot is at 5 deg 16\u2032 27.8\u2033 N latitude.;\ngeo = geo[geo.lat <= 5.27438888]\n#it\u2019s most Western spot is at 73 deg, 58\u2032 58.19\u2033W Long.\ngeo = geo[geo.lng >= -73.98283055]\n#It\u2019s most southern spot is at 33 deg, 45\u2032 04.21\u2033 S Latitude.\ngeo = geo[geo.lat >= -33.75116944]\n#It\u2019s most Eastern spot is 34 deg, 47\u2032 35.33\u2033 W Long.\ngeo = geo[geo.lng <=  -34.79314722]","3b54cac1":"from datashader.utils import lnglat_to_meters as webm\nx, y = webm(geo['lng'], geo['lat'])\ngeo['x'] = pd.Series(x)\ngeo['y'] = pd.Series(y)","59228b30":"geo.head(3)","4991afa1":"brazil = geo\nagg_name = 'zip_code_prefix'\nbrazil[agg_name].describe().to_frame()","3cdafcaa":"# plot wtih holoviews + datashader - bokeh with map background\nimport holoviews as hv\nimport geoviews as gv\nimport datashader as ds\nfrom colorcet import fire, rainbow, bgy, bjy, bkr, kb, kr\nfrom holoviews.streams import RangeXY\nfrom holoviews.operation.datashader import datashade, dynspread, rasterize\nfrom bokeh.io import push_notebook, show, output_notebook\noutput_notebook()\nhv.extension('bokeh')","e3eea1af":"%opts Overlay [width=800 height=600 toolbar='above' xaxis=None yaxis=None]\n%opts QuadMesh [tools=['hover'] colorbar=True] (alpha=0 hover_alpha=0.2)\n\nT = 0.05\nPX = 1\n\ndef plot_map(data, label, agg_data, agg_name, cmap):\n    url=\"http:\/\/server.arcgisonline.com\/ArcGIS\/rest\/services\/Canvas\/World_Dark_Gray_Base\/MapServer\/tile\/{Z}\/{Y}\/{X}.png\"\n    geomap = gv.WMTS(url)\n    points = hv.Points(gv.Dataset(data, kdims=['x', 'y'], vdims=[agg_name]))\n    agg = datashade(points, element_type=gv.Image, aggregator=agg_data, cmap=cmap)\n    zip_codes = dynspread(agg, threshold=T, max_px=PX)\n    hover = hv.util.Dynamic(rasterize(points, aggregator=agg_data, width=50, height=25, streams=[RangeXY]), operation=hv.QuadMesh)\n    hover = hover.options(cmap=cmap)\n    img = geomap * zip_codes * hover\n    img = img.relabel(label)\n    return img","673bc41a":"plot_map(brazil, 'Zip Codes in Brazil', ds.min(agg_name), agg_name, cmap=rainbow)","f540f50f":"# plot wtih datashader - image with black background\nimport datashader as ds\nfrom datashader import transfer_functions as tf\nfrom functools import partial\nfrom datashader.utils import export_image\nfrom IPython.core.display import HTML, display\nfrom colorcet import fire, rainbow, bgy, bjy, bkr, kb, kr\n\nbackground = \"black\"\nexport = partial(export_image, background = background, export_path=\"export\")\ndisplay(HTML(\"<style>.container { width:100% !important; }<\/style>\"))\nW = 700 \n\ndef create_map(data, cmap, data_agg):\n    pad = (data.x.max() - data.x.min())\/50\n    x_range, y_range = ((data.x.min() - pad, data.x.max() + pad), \n                             (data.y.min() - pad, data.y.max() + pad))\n\n    ratio = (y_range[1] - y_range[0]) \/ (x_range[1] - x_range[0])\n\n    plot_width  = int(W)\n    plot_height = int(plot_width * ratio)\n    if ratio > 1.5:\n        plot_height = 550\n        plot_width = int(plot_height \/ ratio)\n        \n    cvs = ds.Canvas(plot_width=plot_width, plot_height=plot_height, x_range=x_range, y_range=y_range)\n\n    agg = cvs.points(data, 'x', 'y', data_agg)\n    img = tf.shade(agg, cmap=cmap, how='eq_hist')\n    return export(img,'img')","c9ef0d98":"create_map(brazil, rainbow, ds.mean(agg_name))","083341cb":"def filter_data(level, name):\n    df = geo[geo[level] == name]\n    #remove outliers\n    df = df[(df.x <= df.x.quantile(0.999)) & (df.x >= df.x.quantile(0.001))]\n    df = df[(df.y <= df.y.quantile(0.999)) & (df.y >= df.y.quantile(0.001))]\n    return df","87e28b82":"sp = filter_data('state', 'sp')\nagg_name = 'zip_code_prefix'\nsp[agg_name].describe().to_frame()","3b3f0a13":"agg_name = 'zip_code_prefix'\nplot_map(sp, 'Zip Codes in Sao Paulo State', ds.min(agg_name), agg_name, cmap=rainbow)","56b64d07":"create_map(sp, rainbow, ds.mean(agg_name))","a5467f8a":"saopaulo = filter_data('city', 'sao paulo')\nagg_name = 'zip_code_prefix'\nsaopaulo[agg_name].describe().to_frame()","e54fe7b8":"plot_map(saopaulo, 'Zip Codes in Sao Paulo City', ds.min(agg_name), agg_name, cmap=rainbow)","1c8511ea":"create_map(saopaulo, rainbow, ds.mean(agg_name))","2ccb41a8":"df = geo[geo['city'] == 'atibaia']\nagg_name = 'zip_code_prefix'\ndf[agg_name].describe().to_frame()","c648d0a2":"zip129 = geo[geo[agg_name] == 129]\nzip129[[agg_name, 'city', 'state']].drop_duplicates()","9761d3de":"def plot_map2(data, label, agg_data, agg_name, cmap):\n    url=\"http:\/\/server.arcgisonline.com\/ArcGIS\/rest\/services\/Canvas\/World_Dark_Gray_Base\/MapServer\/tile\/{Z}\/{Y}\/{X}.png\"\n    geomap = gv.WMTS(url)\n    points = hv.Points(gv.Dataset(data, kdims=['x', 'y'], vdims=[agg_name]))\n    agg = datashade(points, element_type=gv.Image, aggregator=agg_data, cmap=cmap)\n    zip_codes = dynspread(agg, threshold=T, max_px=PX)\n    img = geomap * zip_codes\n    img = img.relabel(label)\n    return img\nplot_map2(zip129, 'Zip Codes Prefix 129', ds.min(agg_name), agg_name, cmap=rainbow)","824fa191":"orders = pd.read_csv('..\/input\/olist_public_dataset_v2.csv')\nbrazil_geo = geo.set_index('zip_code_prefix').copy()","c075610a":"gp = orders.groupby('customer_zip_code_prefix')['order_products_value'].sum().to_frame()\nrevenue = brazil_geo.join(gp)\nagg_name = 'revenue'\nrevenue[agg_name] = revenue.order_products_value \/ 1000","e769a520":"plot_map(revenue, 'Orders Revenue (thousands R$)', ds.mean(agg_name), agg_name, cmap=fire)","dada4ffd":"create_map(revenue, fire, ds.mean(agg_name))","cf0532b3":"gp = orders.groupby('order_id').agg({'order_products_value': 'sum', 'customer_zip_code_prefix': 'max'})\ngp = gp.groupby('customer_zip_code_prefix')['order_products_value'].mean().to_frame()\navg_ticket = brazil_geo.join(gp)\nagg_name = 'avg_ticket'\navg_ticket[agg_name] = avg_ticket.order_products_value","1395f3fa":"plot_map(avg_ticket, 'Orders Average Ticket (R$)', ds.mean(agg_name), agg_name, cmap=bgy)","c8c8781f":"create_map(avg_ticket, bgy, ds.mean('avg_ticket'))","e68e1f8a":"gp = orders.groupby('order_id').agg({'order_products_value': 'sum', 'order_freight_value': 'sum', 'customer_zip_code_prefix': 'max'})\nagg_name = 'freight_ratio'\ngp[agg_name] = gp.order_freight_value \/ gp.order_products_value\ngp = gp.groupby('customer_zip_code_prefix')[agg_name].mean().to_frame()\nfreight_ratio = brazil_geo.join(gp)","ab22c427":"plot_map(freight_ratio, 'Orders Average Freight Ratio', ds.mean(agg_name), agg_name, cmap=bgy)","189ecdc1":"create_map(freight_ratio, bgy, ds.mean('freight_ratio'))","80d5ced1":"orders['order_delivered_customer_date'] = pd.to_datetime(orders.order_delivered_customer_date)\norders['order_aproved_at'] = pd.to_datetime(orders.order_aproved_at)\norders['actual_delivery_time'] = orders.order_delivered_customer_date - orders.order_aproved_at\norders['actual_delivery_time'] = orders['actual_delivery_time'].dt.days","30b5dca1":"gp = orders.groupby('customer_zip_code_prefix')['actual_delivery_time'].mean().to_frame()\ndelivery_time = brazil_geo.join(gp)\nagg_name = 'avg_delivery_time'\ndelivery_time[agg_name] = delivery_time['actual_delivery_time']","833f096e":"plot_map(delivery_time, 'Orders Average Delivery Time (days)', ds.mean(agg_name), agg_name, cmap=bjy)","44198980":"create_map(delivery_time, bjy, ds.mean(agg_name))","1e14b8f3":"pr = filter_data('state', 'pr').set_index('zip_code_prefix')\ngp = orders.groupby('customer_zip_code_prefix')['actual_delivery_time'].mean().to_frame()\npr_delivery_time = pr.join(gp)\npr_delivery_time[agg_name] = pr_delivery_time['actual_delivery_time']","e3da3b91":"plot_map(pr_delivery_time, 'Orders Average Delivery Time in Parana State (days)', ds.mean(agg_name), agg_name, cmap=bjy)","c7c018ce":"create_map(pr_delivery_time, bjy, ds.mean(agg_name))","b6732663":"riodejaneiro = filter_data('city', 'rio de janeiro').set_index('zip_code_prefix')\ngp = orders.groupby('customer_zip_code_prefix')['actual_delivery_time'].mean().to_frame()\nrj_delivery_time = riodejaneiro.join(gp)\nrj_delivery_time[agg_name] = rj_delivery_time['actual_delivery_time']","92fc85f1":"plot_map(rj_delivery_time, 'Orders Average Delivery Time in Rio de Janeiro (days)', ds.mean(agg_name), agg_name, cmap=bjy)","546aea65":"create_map(rj_delivery_time, bjy, ds.mean(agg_name))","761a214f":"saopaulo = filter_data('city', 'sao paulo').set_index('zip_code_prefix')\ngp = orders.groupby('customer_zip_code_prefix')['actual_delivery_time'].mean().to_frame()\nsp_delivery_time = saopaulo.join(gp)\nsp_delivery_time[agg_name] = sp_delivery_time['actual_delivery_time']","be828ac1":"plot_map(sp_delivery_time, 'Orders Average Delivery Time in Sao Paulo (days)', ds.mean(agg_name), agg_name, cmap=bjy)","b391c952":"create_map(sp_delivery_time, bjy, ds.mean(agg_name))","9cb9c8f4":"poa = filter_data('city', 'porto alegre').set_index('zip_code_prefix')\ngp = orders.groupby('customer_zip_code_prefix')['actual_delivery_time'].mean().to_frame()\npoa_delivery_time = poa.join(gp)\npoa_delivery_time[agg_name] = poa_delivery_time['actual_delivery_time']","fe46f0fd":"plot_map(poa_delivery_time, 'Orders Average Delivery Time in Porto Alegre (days)', ds.mean(agg_name), agg_name, cmap=bjy)","b6fb30bf":"create_map(poa_delivery_time, bjy, ds.mean(agg_name))","6957108d":"## Zip Codes in Large Cities \nLets look at the city of Sao Paulo to see how zip code prefixes works in a city level. We see that:\n* zip code prefixes in Sao Paulo city ranges from 010 to 095\n* zip code prefixes are somehow related to neighborhoods or city districts","de693cad":"### Index of sales per city","4ab1ce04":"## Interesting Point About Brazilian Suburbs\nUnlike other countries, in Brazil the richest areas usualy are near downtow and suburbs are know for poverty and high violence rates. Lets explore that in Rio the Janeiro.","259f63c4":"## Zip Codes in States\nLets look at the state of Sao Paulo (SP) to see how zip code prefixes works in a regional level. We see that:\n* zip code prefixes in Sao Paulo state ranges from 010 to 199\n* zip codes starting with 0 are in the Sao Paulo metro region\n* zip codes starting with 1 are in the interior of the state","11788435":"There are 851 different zip_code_prefix. They are all limited to 500 samples per zip_code_prefix. On average there are 380 coordinates for each prefix.","d3ac1751":"It turns out that if you live in rich neighborhoods such as Downtown, Botafogo, Copacabana and Flamengo you are likey to receive your order five days earlier than someone who lives in a poor neighborhood such as Cidade de Deus or Bangu. We see the same pattern in Sao Paulo and Porto Alegre, customers near downtown receive their orders faster than those who lives on suburbs.","33a76e7b":"# Average Delivery Time\nUnfortunately, who lives in the north and northeast of Brazil has to bear with higher freight costs and has to wait longer to receive their purchase.","2ea9eb60":"## Zip Codes in Brazil\nFinally plotting the coordinates on a map. We see there is a relationship between the zip code prefix and the location of that zip code. They start in Sao Paulo, with prefix 010, and then increase counterclockwise finishing in Rio Grande do Sul (south of Brazil), with prefix 999.","224b34cd":"Lets look to delivery times at a state level. We filtered only orders from Parana state (PR). It is possible to see that larger cities have lower average delivery times than the smaller ones.","425d0af1":"# What is the Average Ticket?\nHere we see something somehow unexpected. Customers of the south and southeast regions of Brazil have lower average ticket, than their peers on north and norteast. This might happen because they have to pay more for freight (let's check that in a moment)","f844673f":"# Who pays more for transportation?\nWe might find a freight ratio by dividing the freight value by the order value. This ratio indicates the percentage of the product price that a person had to pay just to get their order delivered. For example, if a product costs R\\$50.00 and the freight value was R\\$10.00, then the freight ratio is 0.2 or 20%. Higher freight ratios are very likely to discourage customers to complete a purchase. Due to logistics costs, we expect to see lower freight ratios in densely populated areas and are higher freight ratios on sparsely poulated regions.","b604be42":"## Zip Codes in Small Cities\nLets look at the city of Atibaia to see how zip code prefixes works in a city level. We see that:\n* zip code prefix of Atibaia city is 129\n* but there are other neighbor cities with the same zip code prefix\n* to have more detail and go down to a city level we would probably need more zip code digits (the 4th and 5th digit)","e401420e":"# Work in progress...\n\n## To do:\n1. Which categories are most sold.\n2. Wich payment method was chosen. \n3. How many installments.\n4. Analysis on specific cities, such as  Sao Paulo, Porto Alegre, Curitiba, Fortaleza, Bahia, Brasilia. \n5. Any sugestion?","2680ed7e":"# Geospatial and Statistical Analysis of Brazilian E-Commerce v1\n\nThis is modification of kernel\nhttps:\/\/www.kaggle.com\/andresionek\/geospatial-analysis-of-brazilian-e-commerce\nby Andre Sionek\n\n### Added Statistical Analysis\n\n* Sorted index of sales per states\n* Sorted index of sales per cities\n\n#### Various modifications of Geospatial Analysis\n\n----\n\nOlist has released a dataset with 100k orders made between 2016 and 2018. Each order has some information about the customer and contains the first three digits of the customer zip code. Olist has also released a geolocation database that has 323k lat\/lng coordinates related to the first three digits of each zip code.\n\n## CEP: the Brazilian Zip Code\nA brazilian zip code, also know as CEP, stands for Postal Adressing Code (*C\u00f3digo de Endere\u00e7amento Postal*) and contains 8 digits. Introduced in 1972 as a sequence of five digits, it was expanded to eight digits in 1992 to allow for more precise localization. The standard format is \"nnnnn-nnn\" (the original five digits, an hyphen, and the new three digits).\n\n**CEP:** 12.345-678\n\nMost cities with population around 100,000 and above have a CEP assigned to every public place and to some high-occupancy private spaces, like major commercial buildings and large residential condos. Small towns are assigned a general 5-digit code followed by the suffix -000. \n\n* the first part is composed by 5 digits that represent Region, Subregion, Sector, Subsector and Subsector Splitter.\n* the second part contain 3 digits, separated by an hyphen from the first, and it represents the Distribution Identifiers.\n\nMore info about how CEP works may be found at the [Correios website](https:\/\/www.correios.com.br\/a-a-z\/cep-codigo-de-enderecamento-postal).\n\nLets look at the geolocation dataset provided by Olist and try to understand how CEP works geographically.","9a236f9b":"### Index of sales per state","b1f2bb57":"Then we treat the latitute and longitude coordinates and transform then to Mercator x\/y Coordinates.","43b561ab":"# Where does most revenue comes from?\nPlotting the sum of products value grouped by zip code prefix we see that most of the revenue came from the Southeast and South regions of Brazil. It is also possible to see that large cities and capitals, where population is bigger, have larger participation on revenue. ","b2348b81":"There are some outliers coordinates in the dataset that are outside of brazilian territory. Lets guarantee that all coordinates are within a rectangle delimited by the limits of Brazil."}}