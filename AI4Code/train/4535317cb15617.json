{"cell_type":{"3d8f0c4f":"code","dd011f6b":"code","be7a5f9e":"code","9a029870":"code","664b524f":"code","461f4d1c":"code","a629c701":"code","ea328d2c":"code","d4daaca5":"code","4ab7408f":"code","6a81b704":"code","fee4f13e":"code","f140d8ce":"code","06529497":"code","56c12589":"code","5beba51a":"code","80e6258a":"code","8ff04791":"code","d35f0e41":"code","5b67304d":"code","2e887ede":"code","c448ba5b":"code","e742b199":"code","85797775":"code","db06e679":"code","b529d10f":"code","fa03a6f0":"code","b8b56252":"code","ab3bf859":"code","1081d820":"code","40260945":"code","a33c3bd6":"code","f782655d":"code","cc19e1fc":"code","83190867":"code","ce150b6c":"code","cce445b0":"code","9a5b96c5":"code","f0720f70":"markdown","ca55805d":"markdown"},"source":{"3d8f0c4f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","dd011f6b":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport nltk\nfrom sklearn.preprocessing import LabelBinarizer\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\nfrom wordcloud import WordCloud,STOPWORDS\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.tokenize import word_tokenize,sent_tokenize\nfrom bs4 import BeautifulSoup\nimport re,string,unicodedata\nfrom keras.preprocessing import text, sequence\nfrom sklearn.metrics import classification_report,confusion_matrix,accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom string import punctuation\nfrom nltk import pos_tag\nfrom nltk.corpus import wordnet\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense,Embedding,LSTM,Dropout\nfrom keras.callbacks import ReduceLROnPlateau\nimport tensorflow as tf","be7a5f9e":"true = pd.read_csv(\"..\/input\/fake-and-real-news-dataset\/True.csv\")\nfalse = pd.read_csv(\"..\/input\/fake-and-real-news-dataset\/Fake.csv\")","9a029870":"true.head()","664b524f":"false.head()","461f4d1c":"true['category'] = 1\nfalse['category'] = 0","a629c701":"News = pd.concat([true,false]) ","ea328d2c":"sns.set_style(\"darkgrid\")\nsns.countplot(df.category)","d4daaca5":"News.head()","4ab7408f":"News.isna().sum() # Checking for nan Values","6a81b704":"News.title.count()","fee4f13e":"News.subject.value_counts()","f140d8ce":"plt.figure(figsize = (12,8))\nsns.set(style = \"whitegrid\",font_scale = 1.2)\nchart = sns.countplot(x = \"subject\", hue = \"category\" , data = df)\nchart.set_xticklabels(chart.get_xticklabels(),rotation=90)","06529497":"stop = set(stopwords.words('english'))\npunctuation = list(string.punctuation)\nstop.update(punctuation)","56c12589":"def strip_html(text):\n    soup = BeautifulSoup(text, \"html.parser\")\n    return soup.get_text()\n\n\ndef square_brackets(text):\n    return re.sub('\\[[^]]*\\]', '', text)\n\ndef url(text):\n    return re.sub(r'http\\S+', '', text)\n\ndef stopwords(text):\n    final_text = []\n    for i in text.split():\n        if i.strip().lower() not in stop:\n            final_text.append(i.strip())\n    return \" \".join(final_text)\n\ndef preprocess(text):\n    text = strip_html(text)\n    text = square_brackets(text)\n    text = url(text)\n    text = stopwords(text)\n    return text\n\nNews['text']=News['text'].apply(preprocess)","5beba51a":"plt.figure(figsize = (20,20)) \nwc = WordCloud(max_words = 2000 , width = 1600 , height = 800 , stopwords = STOPWORDS).generate(\" \".join(News[News.category == 1].text))\nplt.imshow(wc , interpolation = 'bilinear')\nplt.axis('off')","80e6258a":"plt.figure(figsize = (20,20)) # Text that is Fake\nwc = WordCloud(max_words = 2000 , width = 1600 , height = 800 , stopwords = STOPWORDS).generate(\" \".join(News[News.category == 0].text))\nplt.imshow(wc , interpolation = 'bilinear')\nplt.axis('off')","8ff04791":"def get_corpus(text):\n    words = []\n    for i in text:\n        for j in i.split():\n            words.append(j.strip())\n    return words\ncorpus = get_corpus(News.text)\ncorpus[:5]","d35f0e41":"from collections import Counter\ncounter = Counter(corpus)\nmost_common = counter.most_common(10)\nmost_common = dict(most_common)\nmost_common","5b67304d":"x_train,x_test,y_train,y_test = train_test_split(News.text,News.category,random_state = 0)","2e887ede":"max_features = 10000\nmaxlen = 300","c448ba5b":"tokenizer = text.Tokenizer(num_words=max_features)\ntokenizer.fit_on_texts(x_train)\ntokenized_train = tokenizer.texts_to_sequences(x_train)\nx_train = sequence.pad_sequences(tokenized_train, maxlen=maxlen)","e742b199":"tokenized_test = tokenizer.texts_to_sequences(x_test)\nX_test = sequence.pad_sequences(tokenized_test, maxlen=maxlen)","85797775":"EMBEDDING_FILE = '..\/input\/glove-twitter\/glove.twitter.27B.100d.txt'","db06e679":"def get_coefs(word, *arr): \n    return word, np.asarray(arr, dtype='float32')\nembeddings_index = dict(get_coefs(*o.rstrip().rsplit(' ')) for o in open(EMBEDDING_FILE))","b529d10f":"all_embs = np.stack(embeddings_index.values())\nemb_mean,emb_std = all_embs.mean(), all_embs.std()\nembed_size = all_embs.shape[1]\n\nword_index = tokenizer.word_index\nnb_words = min(max_features, len(word_index))\n\nembedding_matrix = embedding_matrix = np.random.normal(emb_mean, emb_std, (nb_words, embed_size))\nfor word, i in word_index.items():\n    if i >= max_features: continue\n    embedding_vector = embeddings_index.get(word)\n    if embedding_vector is not None: embedding_matrix[i] = embedding_vector","fa03a6f0":"batch_size = 256\nepochs = 10\nembed_size = 100","b8b56252":"learning_rate_reduction = ReduceLROnPlateau(monitor='val_accuracy', patience = 2, verbose=1,factor=0.5, min_lr=0.00001)","ab3bf859":"model = Sequential()\n\nmodel.add(Embedding(max_features, output_dim=embed_size, weights=[embedding_matrix], input_length=maxlen, trainable=False))\n \nmodel.add(LSTM(units=128 , return_sequences = True , recurrent_dropout = 0.25 , dropout = 0.25))\nmodel.add(LSTM(units=64 , recurrent_dropout = 0.1 , dropout = 0.1))\nmodel.add(Dense(units = 32 , activation = 'relu'))\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.compile(optimizer=keras.optimizers.Adam(lr = 0.01), loss='binary_crossentropy', metrics=['accuracy'])","1081d820":"model.summary()","40260945":"history = model.fit(x_train, y_train, batch_size = batch_size , validation_data = (X_test,y_test) , epochs = epochs , callbacks = [learning_rate_reduction])","a33c3bd6":"print(\"Accuracy of the model on Training Data is - \" , model.evaluate(x_train,y_train)[1]*100 , \"%\")\nprint(\"Accuracy of the model on Testing Data is - \" , model.evaluate(X_test,y_test)[1]*100 , \"%\")","f782655d":"epochs = [i for i in range(10)]\nfig , ax = plt.subplots(1,2)\ntrain_acc = history.history['accuracy']\ntrain_loss = history.history['loss']\nval_acc = history.history['val_accuracy']\nval_loss = history.history['val_loss']\nfig.set_size_inches(20,10)\n\nax[0].plot(epochs , train_acc , 'go-' , label = 'Training Accuracy')\nax[0].plot(epochs , val_acc , 'ro-' , label = 'Testing Accuracy')\nax[0].set_title('Training & Testing Accuracy')\nax[0].legend()\nax[0].set_xlabel(\"Epochs\")\nax[0].set_ylabel(\"Accuracy\")\n\nax[1].plot(epochs , train_loss , 'go-' , label = 'Training Loss')\nax[1].plot(epochs , val_loss , 'ro-' , label = 'Testing Loss')\nax[1].set_title('Training & Testing Loss')\nax[1].legend()\nax[1].set_xlabel(\"Epochs\")\nax[1].set_ylabel(\"Loss\")\nplt.show()","cc19e1fc":"pred = model.predict_classes(X_test)\npred[:5]","83190867":"print(classification_report(y_test, pred, target_names = ['Fake','Not Fake']))","ce150b6c":"cm = confusion_matrix(y_test,pred)\ncm","cce445b0":"cm = pd.DataFrame(cm , index = ['Fake','Original'] , columns = ['Fake','Original'])","9a5b96c5":"plt.figure(figsize = (10,10))\nsns.heatmap(cm,cmap= \"Blues\", linecolor = 'black' , linewidth = 1 , annot = True, fmt='' , xticklabels = ['Fake','Original'] , yticklabels = ['Fake','Original'])\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"Actual\")","f0720f70":"# LOADING THE NECESSARY LIBRARIES","ca55805d":"**DATA CLEANING**"}}