{"cell_type":{"73a3a7c8":"code","a581f152":"code","97f48798":"code","e74992e5":"code","7b853b92":"code","138ea3ba":"code","1b0f6822":"code","2cbdbddd":"code","c29f6a66":"code","a6c79fc8":"code","b08d0bd5":"code","1a16b45c":"code","874827f3":"code","222816e4":"code","8def5f0b":"markdown","948dec31":"markdown","7e745e04":"markdown","ca288311":"markdown","14abde20":"markdown","01b4d002":"markdown","65440091":"markdown","f144cdd2":"markdown","9da4c2ba":"markdown","22fc5193":"markdown"},"source":{"73a3a7c8":"# ConnectX environment was defined in v0.1.6\n!pip install 'kaggle-environments>=0.1.6'","a581f152":"from kaggle_environments import evaluate, make, utils\n\nenv = make(\"connectx\", debug=True)\nenv.render()","97f48798":"env.agents","e74992e5":"# with this comand you can check values of enviroment\nenv.configuration","7b853b92":"env.specification","138ea3ba":"# This agent random chooses a non-empty column.\ndef my_agent(observation, configuration):\n    from random import choice\n    return choice([c for c in range(configuration.columns) if observation.board[c] == 0])","1b0f6822":"env.reset()\n# Play as the first agent against default \"random\" agent.\nenv.run([my_agent, \"random\"])\nenv.render(mode=\"ipython\", width=500, height=450)","2cbdbddd":"# Play as first position against random agent.\ntrainer = env.train([None, \"random\"])\n\nobservation = trainer.reset()\n\nwhile not env.done:\n    my_action = my_agent(observation, env.configuration)\n    print(\"My Action\", my_action)\n    observation, reward, done, info = trainer.step(my_action)\n    env.render()\n    # env.render(mode=\"ipython\", width=100, height=90, header=False, controls=False)","c29f6a66":"def mean_reward(rewards):\n    return sum(r[0] for r in rewards) \/ float(len(rewards))\n\n# Run multiple episodes to estimate its performance.\nprint(\"My Agent vs Random Agent:\", mean_reward(evaluate(\"connectx\", [my_agent, \"random\"], num_episodes=10)))\nprint(\"My Agent vs Negamax Agent:\", mean_reward(evaluate(\"connectx\", [my_agent, \"negamax\"], num_episodes=10)))","a6c79fc8":"# Negamax algorithm\nimport inspect\nprint(inspect.getsource(env.agents['negamax']))","b08d0bd5":"# random agent algorithm\nprint(inspect.getsource(env.agents['random']))","1a16b45c":"# \"None\" represents which agent you'll manually play as (first or second player).\nenv.play([None, \"negamax\"], width=500, height=450)","874827f3":"import inspect\nimport os\n\ndef write_agent_to_file(function, file):\n    with open(file, \"a\" if os.path.exists(file) else \"w\") as f:\n        f.write(inspect.getsource(function))\n        print(function, \"written to\", file)\n\nwrite_agent_to_file(my_agent, \"submission.py\")","222816e4":"# Note: Stdout replacement is a temporary workaround.\nimport sys\nout = sys.stdout\nsubmission = utils.read_file(\"\/kaggle\/working\/submission.py\")\nagent = utils.get_last_callable(submission)\nsys.stdout = out\n\nenv = make(\"connectx\", debug=True)\nenv.run([agent, agent])\nprint(\"Success!\" if env.state[0].status == env.state[1].status == \"DONE\" else \"Failed...\")","8def5f0b":"# Submit to Competition\n\n1. Commit this kernel.\n2. View the commited version.\n3. Go to \"Data\" section and find submission.py file.\n4. Click \"Submit to Competition\"\n5. Go to [My Submissions](https:\/\/kaggle.com\/c\/connectx\/submissions) to view your score and episodes being played.","948dec31":"# Write Submission File\n\n","7e745e04":"# Create ConnectX Environment","ca288311":"# Test your Agent","14abde20":"# Debug\/Train your Agent","01b4d002":"# Install kaggle-environments","65440091":"# Play your Agent\nClick on any column to place a checker there (\"manually select action\").","f144cdd2":"# Validate Submission\nPlay your submission against itself.  This is the first episode the competition will run to weed out erroneous agents.\n\nWhy validate? This roughly verifies that your submission is fully encapsulated and can be run remotely.","9da4c2ba":"# Evaluate your Agent","22fc5193":"# Create an Agent\n\nTo create the submission, an agent function should be fully encapsulated (no external dependencies).  \n\nWhen your agent is being evaluated against others, it will not have access to the Kaggle docker image.  Only the following can be imported: Python Standard Library Modules, gym, numpy, scipy, pytorch (1.3.1, cpu only), and more may be added later.\n\n"}}