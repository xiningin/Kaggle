{"cell_type":{"2eaf38e8":"code","06cbda6d":"code","ceacddb9":"code","bbebedfc":"code","3b5be62a":"code","c2c267eb":"code","0c2274e9":"code","6537d27f":"code","430de136":"code","b8740033":"code","92096e6f":"code","785fee76":"code","7c387288":"code","997bcd97":"code","7a506630":"code","db31cd4a":"code","b1ebda39":"code","11ff5fdb":"code","936febcf":"code","0bb5bbf7":"code","7fb33ba5":"code","02b2ce00":"code","a9002d05":"code","df58aa6e":"code","909b19a0":"code","ff02714a":"code","b374c35f":"code","1a0799f2":"code","214a3782":"code","f81b060f":"code","06e101a8":"code","d8a1ec35":"code","1b90d096":"code","54cccfee":"code","9898d1af":"code","80fd1f6b":"code","8d036b7f":"code","ae4ebe8d":"code","906c5515":"code","21ac8162":"code","a7385ac8":"code","5af7d248":"code","61ba50c1":"code","e32584ad":"code","0a13c6e3":"code","9e968e39":"code","5d4dcb92":"code","6480df22":"code","1467a256":"code","0ffc0f91":"code","c16402b3":"code","91ccb666":"code","018f79be":"code","c82f7d25":"code","24125439":"code","3b4b36e6":"code","6a9f4a37":"code","56e8aac9":"code","b9279d58":"code","42fcc314":"code","f10ea706":"code","ed6f4234":"code","60136a93":"code","7d6fecf5":"code","ee4cb5cc":"code","af4ec3ee":"code","e0b5b3f9":"code","0f7522ec":"code","b180c83a":"code","fcc2fb70":"code","9ea4ae89":"code","dca9419e":"code","a1d21afd":"code","8bdae831":"code","05783eee":"code","731a3bee":"code","263ec61e":"code","c7919e06":"code","f523a8bf":"code","8fe6c69b":"code","05f4bf30":"code","82be96cb":"code","4b805f58":"code","dc84ae27":"code","e1cd888c":"code","3059a3bc":"code","27ee286c":"code","b8c838cd":"code","8ca3a693":"code","13d273c1":"code","8e021bb9":"code","ed2aad76":"code","5f795d68":"code","29d928a0":"code","43429ef4":"code","e3b911bf":"code","54bdb362":"code","3f3836c1":"code","57c5e33f":"code","c63b82f5":"code","2f45b34b":"code","f4a9268a":"code","37d6d103":"code","9008ab47":"code","2db33b22":"code","3c71de82":"code","ec98700d":"code","4f470fd1":"code","94e36a33":"code","cb710a14":"code","3bb403c3":"code","21566f6b":"code","6e570e7d":"markdown","fe22a5b4":"markdown","6c40f4fe":"markdown","e1180ea4":"markdown","4419a3ac":"markdown","500189f7":"markdown","ea41a459":"markdown","9b2bae9c":"markdown","c41b35d2":"markdown","774cc5eb":"markdown","44b73f6d":"markdown","fe7ca98e":"markdown","ead4d976":"markdown","6b47138a":"markdown","4f9707e8":"markdown","3a260a6d":"markdown","753949bf":"markdown","2bcafc55":"markdown","36b393a8":"markdown","15055220":"markdown","c04a7977":"markdown","6a9244c9":"markdown","bc8d27e5":"markdown","68150e48":"markdown","5e56d146":"markdown","437ffa3b":"markdown","03f493b5":"markdown","79d6fc7e":"markdown","2598bab2":"markdown","caf8e6d7":"markdown","883e15da":"markdown","a66a71c9":"markdown","adc6272b":"markdown","896791e5":"markdown","8a2efb8d":"markdown","dd4bd953":"markdown","59aba3d3":"markdown","8eef7619":"markdown","6a646dd8":"markdown","7936c57f":"markdown","d280bf50":"markdown","c036d441":"markdown","11a2ea90":"markdown","9dd74586":"markdown","d12fb4a6":"markdown","80016d48":"markdown","1a7ca318":"markdown","55030c15":"markdown","bf4dad2f":"markdown","79672825":"markdown","a3c4ac81":"markdown","72da76b0":"markdown","17f4e6c7":"markdown","3d8395ce":"markdown","7c273eb4":"markdown","39d1b959":"markdown","6ff34bfb":"markdown","c51ffc89":"markdown","8870f0a2":"markdown","627d6792":"markdown","334599f7":"markdown","33cb8561":"markdown","692ccbfa":"markdown","5be5c7ba":"markdown","5dd31689":"markdown","38e924ea":"markdown","9dad6dc2":"markdown","1454ad34":"markdown","3df2d89d":"markdown","8f954ee4":"markdown","6cd1dcbe":"markdown","6adc5526":"markdown","dc224cbc":"markdown","71b94c38":"markdown","5d079b3c":"markdown","c5fa4377":"markdown","4e480c94":"markdown","fc63bd9b":"markdown","e6c90041":"markdown","54b30cb5":"markdown","e0c20601":"markdown","e496b1f0":"markdown","a6c85866":"markdown","ec99695a":"markdown","49ac71df":"markdown","2a2d68dd":"markdown","fce5939f":"markdown","3049e34d":"markdown","5d0959af":"markdown","e3254e96":"markdown","81ab94e0":"markdown","84f49a89":"markdown","1f1765ea":"markdown","02d81e11":"markdown","e7c847bb":"markdown","5454aa08":"markdown","a733cb61":"markdown","80d03804":"markdown","3591c3c1":"markdown","839b9943":"markdown","e98adfa2":"markdown","dc20c475":"markdown","f92c34f1":"markdown","d6ed943c":"markdown","23ed0c7b":"markdown","2f4cacc9":"markdown","1a23069e":"markdown","d36c096c":"markdown","f778cd9a":"markdown","c10667bd":"markdown","d123a9bf":"markdown","4a330021":"markdown"},"source":{"2eaf38e8":"import numpy as np \nimport pandas as pd \n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# plotly\nimport plotly.graph_objs as go\nfrom plotly import tools\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\n\n\nfrom google.cloud import bigquery\nfrom bq_helper import BigQueryHelper\n\nbqh_openaq = BigQueryHelper(active_project=\"bigquery-public-data\", dataset_name=\"openaq\")\n\nimport pycountry\n\nimport folium\n\n\nimport os\nprint(os.listdir(\"..\/input\"))\n","06cbda6d":"pollutants = ['o3','co','no2','so2','pm25_frm']","ceacddb9":"bqh_openaq.list_tables()","bbebedfc":"bqh_openaq.table_schema(\"global_air_quality\")","3b5be62a":"bqh_openaq.head(\"global_air_quality\", num_rows=10)","c2c267eb":"QUERY_aq_countries = \"\"\"\n                     SELECT DISTINCT country\n                     FROM `bigquery-public-data.openaq.global_air_quality`\n                     \"\"\"","0c2274e9":"df_aq_countries = bqh_openaq.query_to_pandas(QUERY_aq_countries)\ndf_aq_countries.info()","6537d27f":"df_aq_countries.head()","430de136":"QUERY_aq_cities_us = \"\"\"\n                     SELECT DISTINCT city\n                     FROM `bigquery-public-data.openaq.global_air_quality`\n                     WHERE country = 'US'\n                     \"\"\"","b8740033":"df_aq_cities_us = bqh_openaq.query_to_pandas(QUERY_aq_cities_us)\ndf_aq_cities_us.info()","92096e6f":"df_aq_cities_us.sample(5)","785fee76":"QUERY_openaq_all = \"\"\"\n                   SELECT *\n                   FROM `bigquery-public-data.openaq.global_air_quality`                \n                   \"\"\"","7c387288":"bqh_openaq.estimate_query_size(QUERY_openaq_all)","997bcd97":"df_openaq_all = bqh_openaq.query_to_pandas(QUERY_openaq_all)","7a506630":"df_openaq_all.shape","db31cd4a":"df_openaq_all.info()","b1ebda39":"df_openaq_all.sample(20)","11ff5fdb":"df_openaq_all['timestamp'].min()","936febcf":"df_openaq_all['timestamp'].max()","0bb5bbf7":"df_openaq_all.set_index('timestamp', inplace=True)\ndf_openaq_all.sort_index(inplace=True)","7fb33ba5":"df_openaq_all.head()","02b2ce00":"df_openaq_all.tail()","a9002d05":"df_openaq_all.describe()","df58aa6e":"df_openaq_all[['value','pollutant']].groupby('pollutant').describe()","909b19a0":"df_openaq_all = df_openaq_all[df_openaq_all['value'] > 0]  ","ff02714a":"df_openaq_all[['value','pollutant']].groupby('pollutant').describe()","b374c35f":"df_openaq_all[['value','pollutant', 'unit']].groupby(['pollutant', 'unit']).describe()","1a0799f2":"pycountry.countries.get(alpha_2='DE')","214a3782":"c = pycountry.countries.get(alpha_2='DE')\nc.name","f81b060f":"def get_country_name(alph2):\n    \n    #temporary country code for Kosovo\n    if alph2 == \"XK\":\n        return \"Kosovo\"\n    if alph2 == \"CE\":\n        return \"tbd\"\n    \n    c = pycountry.countries.get(alpha_2=alph2)\n    return c.name","06e101a8":"df_openaq_all['country_name'] = df_openaq_all['country'].apply(get_country_name)","d8a1ec35":"df_openaq_all['country_name'].value_counts().head(20)","1b90d096":"df_openaq_all['pollutant'].value_counts()","54cccfee":"df_openaq_all['unit'].value_counts()","9898d1af":"cm = sns.light_palette(\"green\", as_cmap=True)\npd.crosstab(df_openaq_all.pollutant, df_openaq_all.unit, margins=True).style.background_gradient(cmap=cm)","80fd1f6b":"cm = sns.light_palette(\"green\", as_cmap=True)\npd.crosstab(df_openaq_all.country_name, df_openaq_all.pollutant, margins=True).style.background_gradient(cmap=cm)","8d036b7f":"country_meas_count = pd.crosstab(df_openaq_all.country_name, df_openaq_all.pollutant)","ae4ebe8d":"country_meas_count.sort_values(by=['pm25'], ascending=False).head(10)","906c5515":"country_meas_count.sort_values(by=['pm10'], ascending=False).head(10)","21ac8162":"country_meas_count.sort_values(by=['so2'], ascending=False).head(10)","a7385ac8":"country_meas_count.sort_values(by=['no2'], ascending=False).head(10)","5af7d248":"country_meas_count.sort_values(by=['o3'], ascending=False).head(10)","61ba50c1":"df_2018 = df_openaq_all[df_openaq_all.index.year == 2018].copy()\ndf_2019 = df_openaq_all[df_openaq_all.index.year == 2019].copy()","e32584ad":"def convert_pm10_to_AQI(val):\n    \n    C = round(val,1)\n    \n    I_breakpoints = [(0, 50) , (51, 100) , (101, 150), \n                     (151, 200) , (201, 300) , (301, 500) ]\n    \n    C_intervalls = [(0.0, 54.9) , (55.0, 154.9) , (155.0, 254.9), \n                    (255.0, 354.9) , (355.0, 424.9) , (425.0, 6000.0) ]\n    \n    for k in range(0,6):\n    \n        if C <= C_intervalls[k][1] and C >= C_intervalls[k][0] :\n            I_low  = I_breakpoints[k][0]        \n            I_high = I_breakpoints[k][1]\n            C_low  = C_intervalls[k][0]        \n            C_high = C_intervalls[k][1]        \n           \n   \n    I = (I_high-I_low) \/ (C_high-C_low) * (C-C_low) + I_low\n    I = round(I,1)\n    \n    return I","0a13c6e3":"def query_avg_1pollutant_1_year_all_countries_counts(pollutant, year) :\n    \n    s = \"SELECT COUNT(value) as Count, country, AVG(value) as Concentration\"\n    f = \" FROM `bigquery-public-data.openaq.global_air_quality` as globalAQ\"\n    w = \" WHERE EXTRACT(YEAR FROM globalAQ.timestamp) = \" + str(year) + \\\n        \" AND unit = '\u00b5g\/m\u00b3'\" + \"AND pollutant = '\" + pollutant + \"'\" + \"AND value > 0\"\n    g = \" GROUP BY country\"\n    q = s+f+w+g\n    return q","9e968e39":"q1 = query_avg_1pollutant_1_year_all_countries_counts(\"pm25\", 2019) \nprint(q1)","5d4dcb92":"df_2019_pm25_mean = bqh_openaq.query_to_pandas(q1)\ndf_2019_pm25_mean.sort_values(by='Concentration', inplace=True)\ndf_2019_pm25_mean['country_name'] = df_2019_pm25_mean['country'].apply(get_country_name)\ndf_2019_pm25_mean = df_2019_pm25_mean[df_2019_pm25_mean['Count'] > 20]  ","6480df22":"f,ax = plt.subplots(figsize=(14,6))\nsns.barplot(df_2019_pm25_mean['country_name'],df_2019_pm25_mean['Concentration'])\nplt.xticks(rotation=90)\nplt.title('Mean concentration of PM2.5 in 2019');","1467a256":"df_2019_pm25 = df_2019[df_2019['pollutant'] == 'pm25'].copy()\ndf_2019_pm25['count'] = df_2019_pm25.groupby('country_name')['country_name'].transform('count')\ndf_2019_pm25.shape","0ffc0f91":"df_2019_pm10 = df_2019[df_2019['pollutant'] == 'pm10'].copy()\ndf_2019_pm10['count'] = df_2019_pm10.groupby('country_name')['country_name'].transform('count')\ndf_2019_pm10.shape","c16402b3":"df_2019_no2 = df_2019[df_2019['pollutant'] == 'no2'].copy()\ndf_2019_no2['count'] = df_2019_no2.groupby('country_name')['country_name'].transform('count')\ndf_2019_no2.shape","91ccb666":"df_2019_o3 = df_2019[df_2019['pollutant'] == 'o3'].copy()\ndf_2019_o3['count'] = df_2019_o3.groupby('country_name')['country_name'].transform('count')\ndf_2019_o3.shape","018f79be":"def plotly_boxplots_sorted_by_yvals(df, catg_feature, sort_by_yvals, str_title, min_nr_meas=20):\n    \n    df = df[df['count'] > min_nr_meas]\n    df_by_catg   = df.groupby([catg_feature])\n    sortedlist_catg_str = df_by_catg[sort_by_yvals].median().sort_values().keys().tolist()\n    \n    sortedlist_catg_str = sortedlist_catg_str[-20:]\n    \n    data = []\n    for i in sortedlist_catg_str :\n        data.append(go.Box(y = df[df[catg_feature]==i][sort_by_yvals], name = i))\n\n    layout = go.Layout(title = dict(text=str_title, xref=\"paper\", x=0.5), \n                       yaxis = dict(title = sort_by_yvals + \" (\u00b5g\/m\u00b3)\"),\n                       showlegend=False)\n\n    fig = dict(data = data, layout = layout)\n    return fig","c82f7d25":"fig = plotly_boxplots_sorted_by_yvals(df_2019_pm25, 'country_name', 'value', \n                                      \"PM 2.5 vs. country\", min_nr_meas=20)\niplot(fig)","24125439":"fig = plotly_boxplots_sorted_by_yvals(df_2019_pm10, 'country_name', 'value', \n                                      \"PM 10 vs. country\", min_nr_meas=20)\niplot(fig)","3b4b36e6":"fig = plotly_boxplots_sorted_by_yvals(df_2019_no2, 'country_name', 'value', \n                                      \"NO2 vs. country\", min_nr_meas=20)\niplot(fig)","6a9f4a37":"fig = plotly_boxplots_sorted_by_yvals(df_2019_o3, 'country_name', 'value', \n                                      \"O3 vs. country\", min_nr_meas=20)\niplot(fig)","56e8aac9":"def query_all_1pollutant_1country(pollutant, country) :\n    \n    s = \"SELECT *\"\n    f = \" FROM `bigquery-public-data.openaq.global_air_quality` as globalAQ\"\n    w = \" WHERE unit = '\u00b5g\/m\u00b3'\" + \" AND pollutant = '\" + pollutant + \"'\" + \\\n        \" AND value > 0\" + \" AND country = '\" + country + \"'\" + \\\n        \" AND EXTRACT(YEAR FROM globalAQ.timestamp) > 2016\"        \n    q = s+f+w\n    return q","b9279d58":"q_m1 = query_all_1pollutant_1country(\"pm25\", \"CN\")\nq_m1","42fcc314":"df_china_pm25 = bqh_openaq.query_to_pandas(q_m1)\ndf_china_pm25.sort_values(by=['timestamp'], inplace=True) ","f10ea706":"df = df_china_pm25\n\nmg_map = folium.Map(location=[35.0,115.0], tiles= \"Stamen Terrain\", zoom_start = 4.2)\n\nfor i in range(1,50):   \n    lon = df.loc[df.index ==i]['longitude'].values[0]\n    lat = df.loc[df.index ==i]['latitude'].values[0]\n    folium.Marker([lat, lon]).add_to(mg_map)\n\nmg_map","ed6f4234":"def convert_pm25_to_AQI(val):\n    \n    C = round(val,1)\n    \n    I_breakpoints = [(0, 50) , (51, 100) , (101, 150), \n                     (151, 200) , (201, 300) , (301, 500) ]\n    \n    C_intervalls = [(0.0, 12.0) , (12.1, 35.4) , (35.5, 55.4), \n                    (55.5,150.4) , (150.5, 250.4) , (250.5, 2000.0) ]\n    \n    for k in range(0,6):\n    \n        if C <= C_intervalls[k][1] and C >= C_intervalls[k][0] :\n            I_low  = I_breakpoints[k][0]        \n            I_high = I_breakpoints[k][1]\n            C_low  = C_intervalls[k][0]        \n            C_high = C_intervalls[k][1]        \n           \n   \n    I = (I_high-I_low) \/ (C_high-C_low) * (C-C_low) + I_low\n    I = round(I,1)\n    \n    return I","60136a93":"convert_pm25_to_AQI(12.04)","7d6fecf5":"df_china_pm25['AQI'] = df_china_pm25['value'].apply(convert_pm25_to_AQI)","ee4cb5cc":"AQI_categories = ['Good', 'Moderate', 'Unhealthy for sensitive groups', \n                  'Unhealthy', 'Very Unhealthy', 'Hazardous']\n\nAQI_breakpoints = [50, 100, 150, 200, 300]","af4ec3ee":"def apply_AQI_category(df) :\n    \n    df['AQI_category'] = \"Good\"\n    df.loc[(df['AQI'] > 50) , 'AQI_category'] = 'Moderate'    \n    df.loc[(df['AQI'] > 100), 'AQI_category'] = 'Unhealthy for sensitive groups'\n    df.loc[(df['AQI'] > 150), 'AQI_category'] = 'Unhealthy'    \n    df.loc[(df['AQI'] > 200), 'AQI_category'] = 'Very Unhealthy'\n    df.loc[(df['AQI'] > 300), 'AQI_category'] = 'Hazardous'\n    \n    return df","e0b5b3f9":"df_china_pm25 = apply_AQI_category(df_china_pm25)","0f7522ec":"df_china_pm25[['value', 'AQI', 'AQI_category']].sample(10)","b180c83a":"EPA_AQI_PM25_step_colormap = \\\n    folium.StepColormap( ['green','yellow','orange','red','purple','brown'], \n                         vmin=0., vmax=300. ,\n                         index=[0, 12, 35.4, 55.4, 150.4, 250.4] ,\n                         caption='PM 2.5'\n                        )\n\nEPA_AQI_PM25_step_colormap","fcc2fb70":"EPA_AQI_step_colormap = \\\n    folium.StepColormap( ['green','yellow','orange','red','purple','brown'], \n                         vmin=0., vmax=400. ,\n                         index=[0, 51, 101, 151, 201, 301],\n                         caption='AQI'\n                        )\nEPA_AQI_step_colormap","9ea4ae89":"m = folium.Map(location=[36.0,108.0], tiles= \"Stamen Toner\", zoom_start = 3.7)\n\nfor index, row in df.iterrows():\n    folium.CircleMarker( [row['latitude'], row['longitude']] , radius=3, \n                         color=EPA_AQI_PM25_step_colormap(row['value']), fill=True, fill_opacity=1.0,            \n                         fill_color=EPA_AQI_PM25_step_colormap(row['value']), popup=row['city'] ).add_to(m)\nEPA_AQI_PM25_step_colormap.caption = 'PM 2.5'\nEPA_AQI_PM25_step_colormap.add_to(m)    \nm","dca9419e":"def folium_AQI_map(df, center_lat, center_lon, zoom) :\n    \n    m = folium.Map(location=[center_lat, center_lon],\n                   tiles= \"cartodbpositron\",\n                   zoom_start = zoom)\n\n    for index, row in df.iterrows():\n        folium.CircleMarker( [row['latitude'], row['longitude']] , radius=3, \n                             color=EPA_AQI_step_colormap(row['AQI']), \n                             fill=True, fill_opacity=1.0,            \n                             fill_color=EPA_AQI_step_colormap(row['AQI']), \n                             popup=row['city'] ).add_to(m)\n\n    EPA_AQI_step_colormap.add_to(m)\n\n    \n    folium.TileLayer(tiles='Stamen Toner',name=\"Stamen Toner\").add_to(m)\n    folium.TileLayer(tiles='Stamen Terrain',name=\"Stamen Terrain\").add_to(m)\n    folium.LayerControl().add_to(m)    \n    \n    return m\n    ","a1d21afd":"map_china_pm25 = folium_AQI_map(df_china_pm25, 36.0, 108.0, 3.9)\nmap_china_pm25","8bdae831":"df_china_pm25.sort_values(by=\"AQI\", ascending=False).head(10)","05783eee":"q_m2 = query_all_1pollutant_1country(\"pm25\", \"US\")\nq_m2","731a3bee":"df_usa_pm25 = bqh_openaq.query_to_pandas(q_m2)\ndf_usa_pm25.sort_values(by=['timestamp'], inplace=True) \ndf_usa_pm25['AQI'] = df_usa_pm25['value'].apply(convert_pm25_to_AQI)\ndf_usa_pm25 = apply_AQI_category(df_usa_pm25)","263ec61e":"map_usa_pm25 = folium_AQI_map(df_usa_pm25, 38.0,-101.0, 4.0)\nmap_usa_pm25","c7919e06":"df_usa_pm25.sort_values(by=\"AQI\", ascending=False).head(10)","f523a8bf":"q_m3 = query_all_1pollutant_1country(\"pm25\", \"IN\")\nq_m3","8fe6c69b":"df_india_pm25 = bqh_openaq.query_to_pandas(q_m3)\ndf_india_pm25.sort_values(by=['timestamp'], inplace=True) \ndf_india_pm25['AQI'] = df_india_pm25['value'].apply(convert_pm25_to_AQI)\ndf_india_pm25 = apply_AQI_category(df_india_pm25)","05f4bf30":"map_india_pm25 = folium_AQI_map(df_india_pm25, 21.0,77.0, 4.0)\nmap_india_pm25","82be96cb":"df_india_pm25.sort_values(by=\"AQI\", ascending=False).head(10)","4b805f58":"def query_all_1pollutant_geobox(pollutant, arr) :\n    \n    lat_min, lat_max = arr[0], arr[1]\n    lon_min, lon_max = arr[2], arr[3]   \n    \n    print(\"lat_min, lat_max : \", lat_min, lat_max)\n    print(\"lon_min, lon_max : \", lon_min, lon_max)\n    \n    s = \"SELECT *\"\n    f = \" FROM `bigquery-public-data.openaq.global_air_quality` as globalAQ\"\n    w = \" WHERE unit = '\u00b5g\/m\u00b3'\" + \" AND value > 0\" + \\\n        \" AND pollutant = '\" + pollutant + \"'\" + \\\n        \" AND latitude > \" + str(lat_min) + \\\n        \" AND latitude < \" + str(lat_max) + \\\n        \" AND longitude > \" + str(lon_min) + \\\n        \" AND longitude < \" + str(lon_max) + \\\n        \" AND EXTRACT(YEAR FROM globalAQ.timestamp) > 2016\"        \n    q = s+f+w\n    return q","dc84ae27":"q_m4 = query_all_1pollutant_geobox(\"pm25\", [10.0, 75.0, -20.0, 40.0])\nq_m4","e1cd888c":"df_europe_pm25 = bqh_openaq.query_to_pandas(q_m4)\ndf_europe_pm25.sort_values(by=['timestamp'], inplace=True) \ndf_europe_pm25['AQI'] = df_europe_pm25['value'].apply(convert_pm25_to_AQI)\ndf_europe_pm25 = apply_AQI_category(df_europe_pm25)","3059a3bc":"map_europe_pm25 = folium_AQI_map(df_europe_pm25, 56.0,10.0, 3.4)\nmap_europe_pm25","27ee286c":"df_europe_pm25.sort_values(by=\"AQI\", ascending=False).head(10)","b8c838cd":"df_openaq_all.tail()","8ca3a693":"latest_year  = df_openaq_all.iloc[-1:].index.year.values[0]\nlatest_month = df_openaq_all.iloc[-1:].index.month.values[0]\nlatest_day   = df_openaq_all.iloc[-1:].index.day.values[0]","13d273c1":"print(latest_year, latest_month, latest_day)","8e021bb9":"import datetime\nnow = datetime.datetime.now()\nprint(now.year)","ed2aad76":"if latest_year > 2019:\n    latest_year   = now.year\n    latest_month  = now.month\n    ","5f795d68":"def query_all_1pollutant_prevmonth(pollutant, y, m) :\n    \n    s = \"SELECT *\"\n    f = \" FROM `bigquery-public-data.openaq.global_air_quality` as globalAQ\"\n    w = \" WHERE unit = '\u00b5g\/m\u00b3'\" + \" AND pollutant = '\" + pollutant + \"'\" + \\\n        \" AND value > 0\"  + \\\n        \" AND EXTRACT(YEAR FROM globalAQ.timestamp) = \" + str(y)  + \\\n        \" AND EXTRACT(MONTH FROM globalAQ.timestamp) > \" + str(m-2)   \n    \n    q = s+f+w\n    return q","29d928a0":"q_w1 = query_all_1pollutant_prevmonth(\"pm25\", latest_year, latest_month)\nq_w1","43429ef4":"df_world_pm25_prevmonth = bqh_openaq.query_to_pandas(q_w1)\ndf_world_pm25_prevmonth.sort_values(by=['timestamp'], inplace=True) \ndf_world_pm25_prevmonth['AQI'] = df_world_pm25_prevmonth['value'].apply(convert_pm25_to_AQI)","e3b911bf":"df_world_pm25_prevmonth = df_world_pm25_prevmonth.sample(1500)","54bdb362":"map_world_pm25 = folium_AQI_map(df_world_pm25_prevmonth, 0.0,0.0, 1.5)\nmap_world_pm25","3f3836c1":"q_pm10_cn = query_all_1pollutant_1country(\"pm10\", \"CN\")\nq_pm10_cn","57c5e33f":"df_china_pm10 = bqh_openaq.query_to_pandas(q_pm10_cn)\ndf_china_pm10.sort_values(by=['timestamp'], inplace=True) \ndf_china_pm10['AQI'] = df_china_pm10['value'].apply(convert_pm10_to_AQI)\ndf_china_pm10 = apply_AQI_category(df_china_pm10)","c63b82f5":"map_china_pm10 = folium_AQI_map(df_china_pm10, 36.0, 108.0, 3.9)\nmap_china_pm10","2f45b34b":"df_china_pm10.sort_values(by=\"AQI\", ascending=False).head(10)","f4a9268a":"q_pm10_usa = query_all_1pollutant_1country(\"pm10\", \"US\")\nq_pm10_usa","37d6d103":"df_usa_pm10 = bqh_openaq.query_to_pandas(q_pm10_usa)\ndf_usa_pm10.sort_values(by=['timestamp'], inplace=True) \ndf_usa_pm10['AQI'] = df_usa_pm10['value'].apply(convert_pm10_to_AQI)\ndf_usa_pm10 = apply_AQI_category(df_usa_pm10)","9008ab47":"map_usa_pm10 = folium_AQI_map(df_usa_pm10, 38.0,-101.0, 4.0)\nmap_usa_pm10","2db33b22":"df_usa_pm10.sort_values(by=\"AQI\", ascending=False).head(10)","3c71de82":"q_pm10_in = query_all_1pollutant_1country(\"pm10\", \"IN\")\nq_pm10_in","ec98700d":"df_india_pm10 = bqh_openaq.query_to_pandas(q_pm10_in)\ndf_india_pm10.sort_values(by=['timestamp'], inplace=True) \ndf_india_pm10['AQI'] = df_india_pm10['value'].apply(convert_pm10_to_AQI)\ndf_india_pm10 = apply_AQI_category(df_india_pm10)","4f470fd1":"map_india_pm10 = folium_AQI_map(df_india_pm10, 21.0,77.0, 4.0)\nmap_india_pm10","94e36a33":"df_india_pm10.sort_values(by=\"AQI\", ascending=False).head(10)","cb710a14":"q_pm10_eu = query_all_1pollutant_geobox(\"pm10\", [10.0, 75.0, -20.0, 40.0])\nq_pm10_eu","3bb403c3":"df_europe_pm10 = bqh_openaq.query_to_pandas(q_pm10_eu)\ndf_europe_pm10.sort_values(by=['timestamp'], inplace=True) \ndf_europe_pm10['AQI'] = df_europe_pm10['value'].apply(convert_pm10_to_AQI)\ndf_europe_pm10 = apply_AQI_category(df_europe_pm10)","21566f6b":"df_europe_pm10.sort_values(by=\"AQI\", ascending=False).head(10)","6e570e7d":"### Europe PM 10","fe22a5b4":"### Most measurements of pm25 by country","6c40f4fe":"### Boxplots by pollutant and country","e1180ea4":"### Map: China PM 2.5","4419a3ac":"### **First 10 rows of the table**","500189f7":"### describe","ea41a459":"NO2 - Nitrogen dioxide","9b2bae9c":"### 2.1 Add Country names","c41b35d2":"** The U.S. EPA definitions of AQI** (see page 13 of this document):  \n \nThe U.S. EPA has an AQI scale from 0 to 500.  The goal is to convert the pollution concentration into a number between 0 and 500.  The AQIs of 0, 50, 100, 150,\u2026500 are referred to as \u201cbreakpoints.\u201d  Each AQI breakpoint corresponds to a defined pollution concentration.  The pollution concentration between the breakpoints is linearly interpolated using this equation:\n\nIp =  [(Ihi-Ilow)\/(BPhi-BPlow)] (Cp-BPlow)+Ilow,\n\nwhere Ip is the index of the pollutant; Cp is the rounded concentration of pollutant p; BPhi is the breakpoint greater or equal to Cp; BPlow is the breakpoint less than or equal to Cp; Ihi is the AQI corresponding to BPhi; Ilow is the AQI corresponding to BPlow.  For better formatting, context, and the actual concentration definitions of the AQI, see page 13 of this document.  \nThe index Ip has a linear relationship with the concentration Cp, with [(Ihi-Ilow)\/(BPhi-BPlow)] as the slope. \n\nfrom https:\/\/stimulatedemissions.wordpress.com\/2013\/04\/10\/how-is-the-air-quality-index-aqi-calculated\/","774cc5eb":"### Most measurements of pm10 by country","44b73f6d":"Ok, looks like all measurements with null values are filtered.  \nNow lets look at the quartiles, mean and std for the different pollutants and units:","fe7ca98e":"SO2 - Sulfur dioxide","ead4d976":"**Part 2: Preprocessing, EDA with Pandas**  \n2.1 Add Country names  \n[Country names](#Country-names)  \n[value_counts for country name](#value_counts-for-country-name)  \n2.2 Value counts and crosstabs  \n[value_counts for pollutant and unit](#value_counts-for-pollutant-and-unit)  \n[crosstab for pollutant and unit](#crosstab-for-pollutant-and-unit)  \n[crosstab for country name and pollutant](#crosstab-for-country-name-and-pollutant)  \nMost measurements by country:  \n[pm2.5](#Most-measurements-of-pm25-by-country)  \n\n[Datasets by YEAR](#Datasets-by-YEAR)  \n\n2.3 Air Quality Index  \n[Air Quality index](#Air-Quality-index)  \n[Convert PM 2.5 to AQI](#Convert-PM-2.5-to-AQI)  \n[AQI Category](#AQI-Category)\n\n\n\n**Part 3: Queries and Plots**  \n  \n*Building queries*  \n[AVG value, 1 pollutant, 1 year, each country](#AVG-value,-1-pollutant,-1-year,-each-country)  \n[AVG pm2.5, 2019, each country](#AVG-pm2.5,-2019,-each-country)  \nall values,1 pollutant,1 country  \nall values,1 pollutant,geobox\n\n\n*Pandas*  \n10 highest measurements for   \nPM 2.5 in: [China](#10-highest-PM-2.5-values-for-China) +++ [USA](#10-highest-PM-2.5-values-for-USA) +++ [India](#10-highest-PM-2.5-values-for-India) +++ [Europe](#10-highest-PM-2.5-values-for-Europe)    \nPM 10 in: [China](#10-highest-PM-10-values-for-China) +++ [USA](#10-highest-PM-10-values-for-USA) +++ [India](#10-highest-PM-10-values-for-India) +++ [Europe](#10-highest-PM-10-values-for-Europe)  \n\n*Plots*  \nBarplot: AVG pm2.5, 2019, each country  \nBoxplots by pollutant and country:    \n[PM 2.5](#Boxplots:-PM-2.5-by-country) +++ [PM 10](#Boxplots:-PM-10-by-country) +++ [NO2](#Boxplots:-NO2-by-country)  \n  \n**Part 4: Queries and Folium maps**  \n\n\n*Maps*  \nPM 2.5:   [China](#Map:-China-PM-2.5)  +++  [USA](#Map:-USA-PM-2.5)  +++  [India](#Map:-India-PM-2.5)  +++  [Europe](#Map:-Europe-PM-2.5)  +++  [Global](#Map:-World-PM-2.5)  \nPM 10 :    [China](#Map:-China-PM-10)  +++  [USA](#Map:-USA-PM-10)  +++  [India](#Map:-India-PM-10)  \n","6b47138a":"# Part 4: Queries and Folium maps","4f9707e8":"### Value, AQI, and AQI category: Sample for 10 measurements","3a260a6d":"### Map: China PM 10","753949bf":"# Part 1: Overview on dataset  ","2bcafc55":"## query_to_pandas","36b393a8":"**Goals and Motivation:**  \nIn this kernel I explore the OpenAQ dataset of measurements regarding Air quality.  \nIt contains measurements of the pollutants O3, CO, NO2, SO2, PM2.5 and PM10 for diffferent stations around the world.   \nThe dataset comes as a BigQuery table and the data is accesed using the google.cloud bigquery api  \nand the BigQuery client library for Python, BigQueryHelper.\n\n\n**NOTE** : The OpenAQ dataset is updated weekly, and for every station only the latest measurements are included. So, when running on the newest data, the results of this kernel change and the newest results might not match with the conclusions given in the text. In fact, I noticed that the maps for some of the pollutants change significantly already after one or two weeks.\n","15055220":"# Part 3: Queries and Plots","c04a7977":"### Convert PM 2.5 to AQI","6a9244c9":"### Map: Europe PM 2.5","bc8d27e5":"**Kernel Outline and list of links**\n\n**Part 0: Imports, Functions**  \n**Part 1: Overview on dataset, starter queries**  \n*BigQuery*  \n[list_tables](#list_tables) +++ [table_schema](#table_schema)  \n[First 10 rows of the table](#First-10-rows-of-the-table)  \n[query_to_pandas: ](#query_to_pandas)  DISTINCT countries +++ DISTINCT cities in US  \n[estimate_query_size](#estimate_query_size)  \n*Pandas*  \n[20 data samples](#20-data-samples)  \n[Timestamp: min and max](#Timestamp:-min-and-max)   \n[Setting timestamp as index](#Setting-timestamp-as-index)  \n[describe ](#describe)   \n[groupby('pollutant').describe](#groupby-pollutant.describe)  ","68150e48":"The Country column contains the two-letter country codes defined in ISO 3166-1 (alpha-2 codes):  \nhttps:\/\/en.wikipedia.org\/wiki\/ISO_3166-1_alpha-2   \nFor convenience and to avoid errors we add the full country name by calling  \npycountry.countries.get(alpha_2)","5e56d146":"Real-time Global Map of Air Quality Index:  \nhttps:\/\/waqi.info\/  \n\nOpenAQ Data:  \nhttps:\/\/openaq.org\/#\/locations?_k=lqspp4","437ffa3b":"### Boxplots: NO2 by country","03f493b5":"### 10 highest PM 2.5 values for China","79d6fc7e":"We can use a similar function like for PM 2.5  \nThe values for the AQI breakpoints are the same.  \nWe only need to update the values for the concentration intervalls.","2598bab2":"### Timestamp: min and max","caf8e6d7":"**colormaps**","883e15da":"Global data for previous month","a66a71c9":"TEST: Plot map with locations for first 50 observations","adc6272b":"### Map: USA PM 10","896791e5":"### Map: USA PM 2.5","8a2efb8d":"### Convert PM 10 to AQI","dd4bd953":"O3 - Ozone","59aba3d3":"**BigQuery**  \nhttps:\/\/en.wikipedia.org\/wiki\/BigQuery  \nhttps:\/\/cloud.google.com\/bigquery\/  \nhttps:\/\/www.kaggle.com\/dansbecker\/getting-started-with-sql-and-bigquery  \n**SQL**  \nhttps:\/\/www.kaggle.com\/learn\/intro-to-sql","8eef7619":"![](https:\/\/ksr-ugc.imgix.net\/assets\/018\/744\/103\/1e64329876efe7ee43972164bbe53ad8_original.png?ixlib=rb-1.1.0&w=680&fit=max&v=1507935422&auto=format&gif-q=50&lossless=true&s=fa55f2037079379e4c1aa286bf556489)","6a646dd8":"### China","7936c57f":"### 10 highest PM 10 values for India","d280bf50":"For many pollutants, minimum value of measurements is -9999, an indicator for NaN.  \nLets drop all measurements below or equal to 0.","c036d441":"## World: most recent data","11a2ea90":"### 10 highest PM 10 values for China","9dd74586":"Folium produces a nice map of China and the locations (latitude and longitude) for the measurements can be used directly for plotting (no transformations necessary).","d12fb4a6":"### Datasets by YEAR","80016d48":"**REFERENCES**","1a7ca318":"### **Query: DISTINCT cities for country = US**","55030c15":"Query: global data, 1 pollutant, 1 month","bf4dad2f":"### Map with values of PM 2.5 measurements\ncolorbar like AQI","79672825":"There is only one table, named 'global_air_quality'","a3c4ac81":"### Map: World PM 2.5","72da76b0":"One can check that the AQI agrees with the table above and also with:  \nhttps:\/\/airnow.gov\/index.cfm?action=airnow.calculator","17f4e6c7":"## PM 10","3d8395ce":"### Country names","7c273eb4":"### Air Quality index","39d1b959":"For all pollutants, most of the data are from China, US, Europe and India.  \nIn part 3 we plot maps and timeseries for these  countries\/regions.","6ff34bfb":"### Map: India PM 2.5","c51ffc89":"## 2.3 Air Quality Index","8870f0a2":"The measured pollutant concentrations are not very meaningful for most of the people.  \nTherefore there exists the Air Quality index (AQI).  \n\nhttps:\/\/en.wikipedia.org\/wiki\/Air_quality_index  \nhttps:\/\/archive.epa.gov\/ttn\/ozone\/web\/pdf\/rg701.pdf  \nhttps:\/\/stimulatedemissions.wordpress.com\/2013\/04\/10\/how-is-the-air-quality-index-aqi-calculated\/  \nhttps:\/\/github.com\/openaq\/project-ideas\/issues\/6  \n","627d6792":"### value_counts for country name","334599f7":"### 10 highest PM 10 values for USA","33cb8561":"Although this is a nice plot, there is one disadvantage:  \nThe mean concentraion is a single value that depends strongly on outliers, especially for countries that have only a few measurement stations.  \nIn the follwing we use boxplots, that give more info on the disribution of the measured values.  \nAlso, we can choose to plot values only for those countries that have a minimum number of measurements.  \nFor that we calculate a new column: count","692ccbfa":"# Part 0: Imports, Functions","5be5c7ba":"<img src=\"https:\/\/greennews.ie\/wp3\/wp-content\/uploads\/2017\/08\/1024px-Shanghaiairpollutionsunset-793x595.jpg\" width=\"520\">","5dd31689":"### Barplot PM 2.5 mean for 2019","38e924ea":"### groupby pollutant.describe","9dad6dc2":"### crosstab for pollutant and unit","1454ad34":"### **Query: DISTINCT countries**","3df2d89d":"### AQI Category","8f954ee4":"PANDAS","6cd1dcbe":"### **Query: all columns, all data**","6adc5526":"### AVG value, 1 pollutant, 1 year, each country","dc224cbc":"For Europe there are many countries, but our query only works for one country.  \nSo, we could either run that query in a loop for all countries of Europe.   \nOr we make a new query for all values inside a latitude\/longitude box :","71b94c38":"### **table_schema**  \nincludes a description of the columns and their name, type and mode","5d079b3c":"### value_counts for pollutant and unit","c5fa4377":"### Map: India PM 10","4e480c94":"**From the references above we see that we can convert the measurements for each pollutant to AQI by applying a simple formula. We put this formula inside a function and then apply the function on the DataFrame: **","fc63bd9b":"### Boxplots: O3 by country","e6c90041":"### AVG pm2.5, 2019, each country","54b30cb5":"### First map: plot locations","e0c20601":"### Building queries","e496b1f0":"### Boxplots: PM 10 by country","a6c85866":"### crosstab for country name and pollutant","ec99695a":"### **estimate_query_size**","49ac71df":"#### Open AQ\n**Description**  \nDataset Source: openaq.org  \nOpenAQ is an open-source project to surface live, real-time air quality data from around the world. Their \u201cmission is to enable previously impossible science, impact policy and empower the public to fight air pollution.\u201d The data includes air quality measurements from 5490 locations in 47 countries.  \nScientists, researchers, developers, and citizens can use this data to understand the quality of air near them currently. The dataset only includes the most current measurement available for the location (no historical data).  \nUpdate Frequency: Weekly","2a2d68dd":"## 2.2 Value counts and crosstabs","fce5939f":"### Europe","3049e34d":"# Part 2: Preprocessing and EDA with Pandas","5d0959af":"Most of the measurements are from China, US, India and European countries.  \nLets look how many measurements there are for each pollutant and measurement unit.","e3254e96":"### 10 highest PM 2.5 values for Europe","81ab94e0":"#### query_all_1pollutant_geobox","84f49a89":"![](https:\/\/cleanairfairbanks.files.wordpress.com\/2013\/01\/aqi-chart-for-pm-2-5-pollution-2013.jpg)","1f1765ea":"**Folium**  \nhttps:\/\/python-visualization.github.io\/folium\/  \nhttps:\/\/python-visualization.github.io\/folium\/quickstart.html","02d81e11":"### Map of AQI values for PM 2.5\nAQI colorbar.   \nAlso, we change the background map and we add further Folium TileLayers to choose from:","e7c847bb":"### 10 highest PM 2.5 values for India","5454aa08":"### 10 highest PM 10 values for Europe","a733cb61":"**Colormap for the AQI**","80d03804":"### **list_tables**  \nlist all tables of the BigQueryHelper","3591c3c1":"Measured PM 2.5 concentration in the colors of the AQI","839b9943":"**The result is in GB, so querying the whole table is around 23 MB**  \n**Open AQ dataset is not big, we can load the whole data in one dataframe**  \n**using query_to_pandas**","e98adfa2":"* taking 1500 random samples of the most recent measurements\n* more data points results in a browser related error, not showing the map","dc20c475":"**most of the measurements are in ug\/m3**  \n**pm10, pm25 and bc are always measured in ug\/m3**","f92c34f1":"### all values, 1 country, 1 pollutant","d6ed943c":"**Latitude Longitude box for Europe**","23ed0c7b":"In case there is a wrong entry for the timestamp:","2f4cacc9":"### Boxplots: PM 2.5 by country","1a23069e":"Apply to DataFrame","d36c096c":"# **OpenAQ: From Queries to World maps** ","f778cd9a":"### Setting timestamp as index","c10667bd":"### 10 highest PM 2.5 values for USA","d123a9bf":"### **20 data samples**","4a330021":"Example"}}