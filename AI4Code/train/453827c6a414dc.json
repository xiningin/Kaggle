{"cell_type":{"fd80fe23":"code","2480f459":"code","eebb6877":"code","49c06ea8":"code","2ca2a473":"code","9cac775a":"code","c39ced02":"code","606882c2":"code","f2bb8373":"code","6c7bdc27":"code","d196e9e0":"code","7b580786":"code","059e582b":"code","be4c5c87":"code","ca3b8890":"code","81eecd65":"code","ef42c53e":"code","415c36a5":"code","3a002346":"code","f7b1b86f":"code","a2487cdd":"code","d8140f7e":"code","87a5fd48":"code","0422363d":"code","b68279a4":"code","f27903d5":"code","5e4b2cb8":"code","78df419f":"code","68bb8db8":"code","8fc26e03":"code","694603eb":"markdown","38e6ff39":"markdown","0eae0a3d":"markdown","c91bae3e":"markdown","0f913863":"markdown","cc553d90":"markdown","113a714a":"markdown","422a126a":"markdown","f269c261":"markdown","f95505a4":"markdown","ce23c6dd":"markdown","0a2f886e":"markdown"},"source":{"fd80fe23":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sn # data visualization\nfrom matplotlib import pyplot as plt\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import KMeans\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom sklearn.model_selection import GridSearchCV\n\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import roc_curve\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2480f459":"df_raw = pd.read_csv(\"..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv\")","eebb6877":"df_raw.columns","49c06ea8":"df_raw.head()","2ca2a473":"df_raw.info() # This dataset is very nice and doesnt need any manipulation liked vectorization, but it does require rescaling because some of the values are way too big","9cac775a":"df_raw.hist(figsize=(15,15))","c39ced02":"print('Number of positive samples:',sum(df_raw['DEATH_EVENT'] == 1))\nprint('Number of negative samples:',sum(df_raw['DEATH_EVENT'] == 0))","606882c2":"# We can choose to either remove or replace the NaN values and in this case there are so few that I can just remove them\ndf_raw.dropna(inplace = True)\n# Divide the raw data into two dataframes based on the categorical heart failure variable\ndf_raw_neg,df_raw_pos = df_raw.groupby(['DEATH_EVENT'])\n# We are taking an even sample of data from people who have had a heart failure and those who have not in order to reduce the bias of the model we will construct\ndf_filtered = pd.concat([df_raw_neg[1].sample(96),df_raw_pos[1].sample(96)]) \n# We want as much data as we can get while maintaining an similar number of positive and negative samples","f2bb8373":"df_filtered.hist(figsize=(15,15)) # We can visualize the new sample balanced around the categorical label we want to fit on","6c7bdc27":"sn.boxplot(data=df_filtered,x='DEATH_EVENT',y='age') # Subtle spatial differences with age increasing the likelihood of heart disease","d196e9e0":"sn.boxplot(data=df_filtered,x='DEATH_EVENT',y='serum_sodium') # More visualizations to justify a descision tree or a support vector machine","7b580786":"sn.boxplot(data=df_filtered,x='DEATH_EVENT',y='platelets') # Platelets dont seem to really help distinguish the categorical label","059e582b":"df_filtered.corr() # We can find better features by seeing what correlates well with the categorical label","be4c5c87":"# After visualizing the data and looking at each features correlation with the label we can choose features which are likely to help our model\nFEATURES = ['age','creatinine_phosphokinase','ejection_fraction','platelets','serum_creatinine','serum_sodium']\n# FEATURES = ['age', 'anaemia', 'creatinine_phosphokinase', 'diabetes',\n#        'ejection_fraction', 'high_blood_pressure', 'platelets',\n#        'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time']\n# I tested adding a few features to improve model performance and it seems that my Random Forest Model did better with more labels, so I used them all\n# I think the model was able to pick up on the subtle differences that we saw in the Boxplots better than I could.\n# The difference in model performance is about -10% when you use the first feature set detailed above with a limited set.\n# I think with more time I could pick better features that are more accessable to people who cannot collect all of the data perhaps in a developing country with limited infrastructure\nLABELS = ['DEATH_EVENT']","ca3b8890":"X = df_filtered[FEATURES].values\ny = df_filtered[LABELS].values.reshape(1,-1)[0]\nX_train, X_test, y_train, y_test = train_test_split(X, y,train_size=0.7,shuffle=True)\n# We want to split our data in order to cross-validate our models later and ensure that they are properly generalizing","81eecd65":"scalar = StandardScaler() # not really necessary for k-means, but it will be useful when we boost later with Ada\nkmeans = KMeans(n_clusters=2)\n# The point of trying k-means is to understand whether the data is spatially separable and whether the separation is relevant to the label class\npipe = Pipeline([('scalar',scalar),('kmeans',kmeans)]).fit(X_train) # The pipe is a sklean object that allows us to create more complex models that feed into each other seamlessly\n# While we dont need a scalar for kmeans it will be usefull later when we use Adaboost","ef42c53e":"df_filtered['kMeansPrediction'] = pipe.predict(X)\nsn.scatterplot(data=df_filtered,x='age', y='serum_sodium',hue='kMeansPrediction')\nprint(classification_report(y_test,(pipe.predict(X_test))))\n# After playing around with different features that were highly correlated to the label I came across a good set of features that gave the model a pretty good f1-score\n# Enough to justify moving forward with these variables","415c36a5":"params_clf = [{'criterion' : [\"gini\", \"entropy\"],\n                'max_depth': [4,6,8,10,12],\n                'max_features' : [\"auto\", \"sqrt\", \"log2\"],\n                'n_estimators': [100,200,400,600,800],\n          }]\nclf = RandomForestClassifier()\n# We want to find the best hyper parameters and for that we will use the GridSearchCV function provided by sklearn\ngrid_search_clf = GridSearchCV(clf,params_clf,cv=3,n_jobs=25,scoring='f1',verbose=True)\ngrid_search_clf.fit(X,y)\nprint(grid_search_clf.best_estimator_)\n# We want to perform a grid search to fine tune the hyperparameters","3a002346":"clf = grid_search_clf.best_estimator_.fit(X_train,y_train)\ndf_filtered['RandomForestPrediction'] = clf.predict(X)\nsn.scatterplot(data=df_filtered,x='age', y='serum_sodium',hue='RandomForestPrediction')\nprint(classification_report(y_test,clf.predict(X_test))) # sklearns classification report will give us a bunch of metrics to evaluate our model","f7b1b86f":"params_ada = [{'n_estimators': [50,150,250,350]}]\nada = AdaBoostClassifier(clf)\n# We want to find the best hyper parameters so we will use the sklearn function again\ngrid_search_ada = GridSearchCV(ada,params_ada,cv=3,n_jobs=25,scoring='f1',verbose=True)\ngrid_search_ada.fit(X,y)\nprint(grid_search_ada.best_params_) ","a2487cdd":"ada = grid_search_ada.best_estimator_\nboost_pipe = Pipeline([('scalar',scalar),('adaboost',ada)]).fit(X_train,y_train) # Using those parameters we will train the model using our train sample\ndf_filtered['AdaBoostPrediction'] = boost_pipe.predict(X) # Then we will predict for the whole dataset for visualization later\nsn.scatterplot(data=df_filtered,x='age', y='serum_sodium',hue='AdaBoostPrediction') # Graph our prediction\nprint(confusion_matrix(y_test,boost_pipe.predict(X_test))) # print the confusion matrix and classification report\nprint(classification_report(y_test,boost_pipe.predict(X_test)))","d8140f7e":"# fpr, tpr, thresholds = roc_curve(df_filtered['DEATH_EVENT'],df_filtered['AdaBoostPrediction'])\nfpr, tpr, thresholds = roc_curve(y_test,boost_pipe.predict(X_test))","87a5fd48":"sn.lineplot(fpr,tpr)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.legend(['ROC'])","0422363d":"print(\"Metrics on entire dataset: \")\nprint(confusion_matrix(df_raw[LABELS[0]],boost_pipe.predict(df_raw[FEATURES])))\nprint(classification_report(boost_pipe.predict(df_raw[FEATURES]),df_raw[LABELS[0]])) \n# Score on the entire dataset including the other ~180 samples\n# slightly higher than it should be because its already trained on the ~125 training samples and will have a high accuracy on them, but it hasnt seen ~180 samples + test size ~60\n# so the overall score is still really good with that in consideration","b68279a4":"# We want to see where our model makes mistakes and visualizing that can help us make a better model\nsn.scatterplot(x=df_filtered['age'], y=df_filtered['serum_sodium'],hue=df_filtered['AdaBoostPrediction']==df_filtered['DEATH_EVENT'])\nplt.legend(['Correct','Not Correct'])","f27903d5":"sn.scatterplot(x=df_filtered['ejection_fraction'], y=df_filtered['creatinine_phosphokinase'],hue=df_filtered['AdaBoostPrediction']==df_filtered['DEATH_EVENT'])\nplt.legend(['Correct','Not Correct']) # We just want to choose a few graphs to visualize where the error is made","5e4b2cb8":"df_filtered['Risk Assessment'] = boost_pipe.predict_proba(df_filtered[FEATURES])[:,1]\n# With the probability we can assign a risk to a patient based on their data and help the patient understand the severity of their case","78df419f":"df_filtered[FEATURES+LABELS+['AdaBoostPrediction','Risk Assessment']].head(10)","68bb8db8":"ada.feature_importances_","8fc26e03":"for x in range(len(ada.feature_importances_)):\n    if ada.feature_importances_[x] > 0.04:\n        print(FEATURES[x])","694603eb":"# Boosting Random Forest with AdaBoost\n","38e6ff39":"# Predicting Probability of Development \/ Risk Assessment","0eae0a3d":"# Conclusion","c91bae3e":"# Error Visualization","0f913863":"# Data Exploration","cc553d90":"# Motivation\n#### Cardiovascular diseases (CVDs) are the number 1 cause of death globally, taking an estimated 17.9 million lives each year, which accounts for 31% of all deaths worlwide.\n#### Heart failure is a common event caused by CVDs and this dataset contains 12 features that can be used to predict mortality by heart failure.\n\n#### Most cardiovascular diseases can be prevented by addressing behavioural risk factors such as tobacco use, unhealthy diet and obesity, physical inactivity and harmful use of alcohol using population-wide strategies.\n\n#### People with cardiovascular disease or who are at high cardiovascular risk (due to the presence of one or more risk factors such as hypertension, diabetes, hyperlipidaemia or already established disease) need early detection and management wherein a machine learning model can be of great help.","113a714a":"#### I think the use of Random Forest and AdaBoost was fairly straight-forward considering the distribution of the label classes were very well spatially separated and the correlation of the features was fairly good for many of the features, however; I think that I would have wanted to spend more time removing unnecessary features to improve the accessability of the model for, as discussed earlier, places with limited infrastructure and healthcare where getting those measurements would prove difficult.\n#### We can see that a majority of the incorrect guesses are spatially relevant, so I think if I had more time I would have liked to play more with the features and try to engineer features that would help spatially separate the data for the model to leverage\n#### I think in the future when I have taken more statistics I would like to offer a more robust analysis of the features and perhaps a hypothesis test for each feature to ensure that it is relevant to the model. That would be in order to understand exactly which features I dont need to reduce the requirements to make the model more accessable.","422a126a":"# ROC Metrics","f269c261":"## Random Forest","f95505a4":"## AdaBoost","ce23c6dd":"# K-Means","0a2f886e":"# Import Data"}}