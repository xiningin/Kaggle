{"cell_type":{"7ded3f03":"code","e2bd5023":"code","41cc1557":"code","fccc674d":"code","673970e3":"code","0aef3c7a":"code","03dc46aa":"code","61f9f9de":"code","90029108":"code","89802e74":"code","914bcbe1":"code","0a6fcd42":"code","f8f9bd5b":"code","d86f1562":"code","9f55b023":"code","ec001aaf":"code","62d0d316":"code","5979f3cc":"code","dd1c28f3":"code","b954d599":"code","ac8df1d3":"code","ccf4bc95":"code","6ca3f10b":"code","6ac693ff":"markdown","13ef6a57":"markdown"},"source":{"7ded3f03":"import re\nimport os\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom kaggle_datasets import KaggleDatasets\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom keras.layers import Dense,GlobalAveragePooling2D\nfrom keras.applications import MobileNet\nfrom keras.preprocessing import image\nfrom keras.applications.mobilenet import preprocess_input\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Model\nfrom keras.optimizers import Adam\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import make_blobs\n\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print('Device:', tpu.master())\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nexcept:\n    strategy = tf.distribute.get_strategy()\nprint('Number of replicas:', strategy.num_replicas_in_sync)\n    \nprint(tf.__version__)","e2bd5023":"AUTOTUNE = tf.data.experimental.AUTOTUNE\n#GCS_PATH = KaggleDatasets().get_gcs_path()\nBATCH_SIZE = 16 * strategy.num_replicas_in_sync\nIMAGE_SIZE = [180, 180]\nEPOCHS = 25","41cc1557":"pip install split-folders\n","fccc674d":"import splitfolders  # or import split_folders\n\n# Split with a ratio.\n# To only split into training and validation set, set a tuple to `ratio`, i.e, `(.7, .2)`.\nsplitfolders.ratio('..\/input\/plantvillage-dataset\/segmented', output=\"output\", seed=1337, ratio=(.7, .2,.1), group_prefix=None) # default values","673970e3":"CLASS_NAMES = np.array([str(tf.strings.split(item, os.path.sep)[-1].numpy())[2:-1]\n                        for item in tf.io.gfile.glob(str(\".\/output\/train\/*\"))])\nCLASS_NAMES","0aef3c7a":"fn","03dc46aa":"fp","61f9f9de":"tp","90029108":"len(cnf_matrix)","89802e74":"for i in range(38):\n    print(\"Recall of {} = {}\".format(i,cnf_matrix[i][i]\/np.sum(cnf_matrix[i]*100)))","914bcbe1":"d={}\nfor i in range(38):\n    l=[]\n    l.append(cnf_matrix[i])\n    d[i]=l","0a6fcd42":"l2=[]\nsum=0\nfor i in range(38):\n    for j in range(38):\n        l1=[]\n        l1=d[j]\n        sum+=l1[i]\n    l2.append(sum)","f8f9bd5b":"l2","d86f1562":"len(l2[0])","9f55b023":"l2[0]","ec001aaf":"for i in range(38):\n    print(\"Precision {} = {} \".format(i,cnf_matrix[i][i]*100\/l2[0][i]))","62d0d316":"from sklearn import metrics\n\nprint(metrics.classification_report(y_t, y_pred, digits=38))","5979f3cc":"print(\"Calculating Model Accuracy....\")\naccuracy_score = model.evaluate(val_generator)\nprint(f\"Accuracy: {accuracy_score[1]*100}\")","dd1c28f3":"from skimage.color import rgb2gray\nimport numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom scipy import ndimage\nimport pickle\n","b954d599":"Img_size = 256\n","ac8df1d3":"def cal_per(pth):\n    if type(pth)== str:\n        img_array = cv2.imread(pth, cv2.IMREAD_COLOR)\n        new_img = cv2.resize(img_array, (Img_size,Img_size))\n        gray = rgb2gray(new_img)\n    else: \n        gray = rgb2gray(pth)\n    gray_r = gray.reshape(gray.shape[0]*gray.shape[1])\n    for i in range(gray_r.shape[0]):\n        if gray_r[i] > gray_r.mean():\n            gray_r[i] = 255\n        elif gray_r[i] > 0.5:\n            gray_r[i] = 255\n        elif gray_r[i] > 0.25:\n            gray_r[i] = 0\n        else:\n            gray_r[i] = 0\n    gray = gray_r.reshape(gray.shape[0],gray.shape[1])\n    plt.imshow(gray, cmap='gray')\n    x1 = 0\n    gr = gray.reshape(-1)\n    for i in range(gray.shape[0]*gray.shape[1]):\n        if gr[i] != 0:\n            x1+= 1\n    y1=gray.shape[0]*gray.shape[1]  \n    z = (y1-x1)\/y1\n    print(\"percent of infected part is \", z*100, \"%\")\n    if z <0.3:\n        print(\"Severity stage is 1 and yeild is\" , 95 - z*100, \"%\")\n    elif z<0.6 and z >= 0.3:\n        print(\"Severity stage is 2 and yeild is\" , 95 - z*100, \"%\")\n    else:\n        print(\"Severity stage is 3 and yeild is\" , 95 - z*100, \"%\")","ccf4bc95":"cal_per('..\/input\/plantvillage-dataset-labeled\/PlantVillage Dataset (Labeled)\/Segmented Images\/Potato___Early_blight\/001187a0-57ab-4329-baff-e7246a9edeb0___RS_Early.B 8178_final_masked.jpg')","6ca3f10b":"cal_per('..\/input\/plantvillage-dataset-labeled\/PlantVillage Dataset (Labeled)\/Segmented Images\/Corn_(maize)___healthy\/00031d74-076e-4aef-b040-e068cd3576eb___R.S_HL 8315 copy 2_final_masked.jpg')","6ac693ff":"Recall","13ef6a57":"Precision"}}