{"cell_type":{"34021148":"code","d202229e":"code","acf36c0c":"code","95762d5c":"code","8c85abb5":"code","c549868e":"code","ccbccb10":"code","a30c0ac6":"code","f347fe00":"code","b214bcc5":"code","8c6fdd73":"code","961bf2ab":"code","cbeb8cc1":"code","64bf0c14":"code","fa20472b":"code","561fb9d4":"code","43be8d62":"code","c5ade847":"code","85d9ad68":"code","a407fb19":"code","ade816c7":"code","754f516f":"code","27e07d48":"code","d3b0680c":"code","8d8345b9":"code","0d2bd0f5":"code","b750d469":"code","87370a5e":"code","5204ab44":"code","27e85289":"code","008b0bca":"code","e696119f":"code","52baa601":"code","bb584a70":"code","eb48fb71":"code","2ec346da":"code","73634ae9":"code","88f8aa1c":"code","dcb7ead1":"code","c7f2a5fb":"code","4d1d5287":"code","675d9695":"code","1040db94":"code","13018437":"code","620d8e1d":"code","1522e9ab":"code","d2dc8d61":"code","fc239c05":"markdown","48f625b4":"markdown","ffda95a0":"markdown","dc8085a6":"markdown","c0f29161":"markdown","84570443":"markdown","01099a9e":"markdown","8d45e0ce":"markdown"},"source":{"34021148":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d202229e":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(color_codes = True)\n%matplotlib inline","acf36c0c":"power = pd.read_csv('\/kaggle\/input\/experimental-power-and-thrust-coefficients\/power.csv')\n\npower.head()","95762d5c":"# Check NAN Values\nfor i in power.columns:\n    print (i+\": \"+str(power[i].isna().sum()))","8c85abb5":"power.describe()","c549868e":"power.info()","ccbccb10":"power.Type.value_counts()","a30c0ac6":"sns.countplot('Type',data = power,palette = 'gist_gray')","f347fe00":"sns.catplot('Type','TSR',data = power)\nsns.violinplot('Type','TSR',data = power,palette = 'rocket')","b214bcc5":"sns.swarmplot(x = 'Gamma',y = 'Cp',data = power,palette = 'seismic')","8c6fdd73":"sns.catplot('Type','Cp',data = power,kind = 'bar',palette = 'ocean')\n","961bf2ab":"Type_count = power.Type.value_counts().reset_index()\nType_count","cbeb8cc1":"explode = [0,0,0.1]\ncolor = ['red','yellow','green']\nplt.figure(figsize = (20,8))\nplt.pie(Type_count.Type,labels = Type_count.index,wedgeprops = {'edgecolor':'black'},explode = explode,shadow = True,startangle = 150,autopct = '%1.1f%%',colors = color)\nplt.title('pie-chart of count of all locations')","64bf0c14":"sns.catplot('V','TSR',data = power,hue = 'Type',col = 'Type')","fa20472b":"power.head()","561fb9d4":"sns.catplot('V','Cp',data = power,hue = 'Type',col = 'Type')","43be8d62":"sns.catplot('Gamma','Cp',data = power,hue = 'Type',col = 'Type')","c5ade847":"sns.catplot('Gamma','TSR',data = power,hue = 'Type',col = 'Type')","85d9ad68":"sns.catplot('Gamma','TSR',data = power,hue = 'V',col = 'V',kind = 'violin')","a407fb19":"from sklearn.preprocessing import LabelEncoder,MinMaxScaler , StandardScaler\n\n# Some of values are present in categorical form that we have convert into numerical form.\nlabel = LabelEncoder()\n\npower['Type'] = label.fit_transform(power['Type'])","ade816c7":"correlation = power.corr()\n\nplt.figure(figsize = (20,8))\nsns.heatmap(correlation,annot = True, cmap = 'rocket')","754f516f":"power = power.drop(['Gamma','V'],axis = 1)\npower.head()","27e07d48":"x = power.iloc[:,:-1]\ny = power.iloc[:,-1]","d3b0680c":"# Normalize values.\nstandard = StandardScaler()\n\nstd_x = standard.fit_transform(x)\nstd_x","8d8345b9":"from sklearn.model_selection import train_test_split\n\n\n#Split data into Train and test format\nx_train,x_test,y_train,y_test = train_test_split(std_x,y,test_size = 0.25,random_state =45)\n\nprint('Shape of Training Xs:{}'.format(x_train.shape))\nprint('shape of Test:{}'.format(x_test.shape))","0d2bd0f5":"from sklearn.tree import DecisionTreeClassifier\n\nclf = DecisionTreeClassifier()\n\nclf.fit(x_train,y_train)\ny_predicted = clf.predict(x_test)\n\nscore = clf.score(x_test,y_test)\nprint(score)","b750d469":"from sklearn.metrics import confusion_matrix\ncnf_matrix = confusion_matrix(y_test, y_predicted)\nnp.set_printoptions(precision=2)\ncnf_matrix","87370a5e":"from sklearn.svm import SVC,NuSVC\nclf = SVC(kernel ='rbf',gamma = 'auto' )\nclf.fit(x_train,y_train)\ny_predicted = clf.predict(x_test)\nscore = clf.score(x_test,y_test)\nprint(score)","5204ab44":"from sklearn.metrics import confusion_matrix\ncnf_matrix = confusion_matrix(y_test, y_predicted)\nnp.set_printoptions(precision=2)\ncnf_matrix","27e85289":"from sklearn.linear_model import LogisticRegression\n\nclf = LogisticRegression()\n\nclf.fit(x_train,y_train)\ny_predicted = clf.predict(x_test)\nscore = clf.score(x_test,y_test)\nprint(score)","008b0bca":"from sklearn.metrics import confusion_matrix\ncnf_matrix = confusion_matrix(y_test, y_predicted)\nnp.set_printoptions(precision=2)\ncnf_matrix","e696119f":"from sklearn.ensemble import RandomForestClassifier\n\nclf = RandomForestClassifier()\n\n\nclf.fit(x_train,y_train)\ny_predicted = clf.predict(x_test)\nscore = clf.score(x_test,y_test)\nprint(score)","52baa601":"from sklearn.metrics import confusion_matrix\ncnf_matrix = confusion_matrix(y_test, y_predicted)\nnp.set_printoptions(precision=2)\ncnf_matrix","bb584a70":"from sklearn.ensemble import GradientBoostingClassifier\n\nclf = GradientBoostingClassifier()\n\nclf.fit(x_train,y_train)\ny_predicted = clf.predict(x_test)\nscore = clf.score(x_test,y_test)\nprint(score)","eb48fb71":"clf = DecisionTreeClassifier()\n\nfrom sklearn.model_selection import RandomizedSearchCV\n#Randomized Search CV\n\n\n# Number of features to consider at every split\nmax_features = ['auto', 'sqrt']\nsplitter = [\"best\", \"random\"]\n# Maximum number of levels in tree\nmax_depth = [int(x) for x in np.linspace(4, 80, num = 20)]\n# max_depth.append(None)\n# Minimum number of samples required to split a node\nmin_samples_split = [2, 5, 10, 15,20,13,18,23,33,45,37,60]\n# Minimum number of samples required at each leaf node\nmin_samples_leaf = [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]","2ec346da":"\n# Create the random grid\nrandom_grid = {'max_features': max_features,\n               'splitter':splitter,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf}\n\nprint(random_grid)","73634ae9":"# Random search of parameters, using 10 fold cross validation, \n# search across 1000 different combinations\nrf_random = RandomizedSearchCV(estimator = clf, param_distributions = random_grid,scoring='accuracy', n_iter = 1000, cv = 10, verbose=2, random_state=0, n_jobs = 1)","88f8aa1c":"rf_random.fit(x_train,y_train)","dcb7ead1":"rf_random.best_estimator_","c7f2a5fb":"clf = DecisionTreeClassifier(max_depth=32, max_features='sqrt', min_samples_leaf=3,\n                       min_samples_split=5)\n\nclf.fit(x_train,y_train)\n\nscore = clf.score(x_test,y_test)\ny_predicted = clf.predict(x_test)\n\nprint(score)","4d1d5287":"from sklearn.metrics import confusion_matrix, accuracy_score\ncnf_matrix = confusion_matrix(y_test, y_predicted)\nnp.set_printoptions(precision=2)\ncnf_matrix","675d9695":"clf =  GradientBoostingClassifier()\n\nfrom sklearn.model_selection import RandomizedSearchCV\n#Randomized Search CV\n\n\nloss = ['deviance', 'exponential']\nlearning_rate = [0.01,0.001,0.02,0.002,0.003,0.03,0.04,0.004]\n# Maximum number of levels in tree\nmax_depth = [int(x) for x in np.linspace(4, 80, num = 20)]\n# max_depth.append(None)\n# Minimum number of samples required to split a node\nmin_samples_split = [2, 5, 10, 15,20,13,18,23,33,45,37,60]\n# Minimum number of samples required at each leaf node\nmin_samples_leaf = [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]","1040db94":"# Create the random grid\nrandom_grid = {'loss': loss,\n               'learning_rate':learning_rate,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf}\n\nprint(random_grid)","13018437":"# Random search of parameters, using 10 fold cross validation, \n# search across 1000 different combinations\nrf_random = RandomizedSearchCV(estimator = clf, param_distributions = random_grid,scoring='accuracy', n_iter = 1000, cv = 10, verbose=2, random_state=0, n_jobs = 1)","620d8e1d":"rf_random.fit(x_train,y_train)","1522e9ab":"rf_random.best_estimator_","d2dc8d61":"clf = GradientBoostingClassifier(learning_rate=0.04, max_depth=68, min_samples_leaf=6,\n                           min_samples_split=5)\n\n\nclf.fit(x_train,y_train)\n\nscore = clf.score(x_test,y_test)\ny_predicted = clf.predict(x_test)\n\nprint(score)","fc239c05":"<a id=\"4\"><\/a>\n<h1 style='background:#a9a799; border:0; color:black'><center>DATA_VISUALIZATION<\/center><\/h1>","48f625b4":"<a id=\"5\"><\/a>\n<h1 style='background:#a9a799; border:0; color:black'><center>VALIDATION_METHOD<\/center><\/h1>","ffda95a0":"<a id=\"7\"><\/a>\n<h1 style='background:#a9a799; border:0; color:black'><center>CONFUSION_MATRIX<\/center><\/h1>","dc8085a6":"<a id=\"1\"><\/a>\n<h1 style='background:#a9a799; border:0; color:black'><center>INTRODUCTION<\/center><\/h1>\n\n\n- Dataset includes power and thrust coefficients of a 19.8 cm diameter horizontal axis hydrokinetic model turbine in yaw operation. Tests were done at 0.7, 0.9, and 1.1 m\/s water speeds for three turbine configurations: the unshrouded turbine and the turbine with two different shrouds.\n- Experiments were done for yaw angles from 0\u00b0 to 25\u00b0 in 5\u00b0 intervals. Output power of the turbine and its thrust force are measured experimentally in a water tunnel. Results are corrected using a theoretical model that accounts for free surface proximity and blockage effects of the water tunnel.\n\n\n### Features\n\n- V: Freestream Velocity.\n- Gamma: Yaw Angle.\n- TSR: Tip-speed ratio.\n- Cp: Power Coefficient.\n- Ct: Thrust Coefficient.\n- Type: Component type","c0f29161":"<a id=\"4\"><\/a>\n<h1 style='background:#a9a799; border:0; color:black'><center>DATA_PREPROCESSING<\/center><\/h1>","84570443":"<a id=\"3\"><\/a>\n<h1 style='background:#a9a799; border:0; color:black'><center>IMPORT_DATA<\/center><\/h1>","01099a9e":"<a id=\"6\"><\/a>\n<h1 style='background:#a9a799; border:0; color:black'><center>MODEL_BUILDING<\/center><\/h1>","8d45e0ce":"<a id=\"2\"><\/a>\n<h1 style='background:#a9a799; border:0; color:black'><center>IMPORT_LIBRARIES<\/center><\/h1>"}}