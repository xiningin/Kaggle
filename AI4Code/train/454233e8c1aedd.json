{"cell_type":{"356e5fc2":"code","87e65a54":"code","f6d4c0f5":"code","76fbc1a1":"code","4cd5b0ce":"code","f95c5f48":"code","11b8fa1e":"code","31b4d3bb":"code","79d55d5d":"code","54c74225":"code","fdd6d142":"code","c4bb5ef3":"code","f541dd81":"code","3abec29e":"markdown","0a8899d6":"markdown","a4df63af":"markdown","1c655f1d":"markdown","47aea3f1":"markdown","6af37fc2":"markdown"},"source":{"356e5fc2":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom textblob import TextBlob\n\nsns.set()\n%matplotlib inline \n\nimport warnings\nwarnings.filterwarnings(action='ignore')","87e65a54":"df = pd.read_csv('..\/input\/reviews_by_course.csv')\ndf = df.fillna('')\ndisplay(df.info())\ndisplay(df.head(10))","f6d4c0f5":"%%time\n# Number of Words \ndf['word_count'] = df['Review'].apply(lambda x: len(str(x).split(\" \")))\n\n# Number of characters\ndf['char_count'] = df['Review'].str.len() ## this also includes spaces\n\n# Number of stopwords\nfrom nltk.corpus import stopwords\nstop = stopwords.words('english')\ndf['stopwords'] = df['Review'].apply(lambda x: len([x for x in x.split() if x in stop]))\n\n# Number of numerics\ndf['numerics'] = df['Review'].apply(lambda x: len([x for x in x.split() if x.isdigit()]))\n\n# lower-case\ndf['DETAIL'] = df['Review'].apply(lambda x: \" \".join(x.lower() for x in x.split()))\n\n# Removing Punctuation\ndf['DETAIL'] = df['DETAIL'].str.replace('[^\\w\\s]','')\n\n#  Spelling correction\n#from textblob import TextBlob\n#df['DETAIL']= df['DETAIL'].apply(lambda x: str(TextBlob(x).correct()))\n\n# remove stop words\nfrom nltk.corpus import stopwords\nstop = stopwords.words('english')\ndf['DETAIL'] = df['DETAIL'].apply(lambda x: \" \".join(x for x in x.split() if x not in stop))\n\n# sentiment\ndf['sentiment'] = df['DETAIL'].apply(lambda x: TextBlob(x).sentiment[0] )\ndf['sentiment'] = np.round(df.sentiment, 1)\n\ndel df['Review']\ndf.rename(columns = {'Label':'rating'}, inplace = True)","76fbc1a1":"# 1000 Common word removal\nfreq = pd.Series(' '.join(df['DETAIL']).split()).value_counts()[:1000]\nfreq = pd.DataFrame(freq)\nfreq.reset_index(inplace=True)\nfreq.columns = ['word', 'count']\n#display(freq.shape[0])\ndisplay(freq.head())\n#display(freq.tail())","4cd5b0ce":"tuples = [tuple(x) for x in freq.values]\nb = {tuples[i]: tuples[i+1] for i in range(0, len(tuples), 2)}\n\nfrom wordcloud import WordCloud\nfrom PIL import Image\nfrom matplotlib.pyplot import figure\nimport random\n\nfigure(num=None, figsize=(15, 12), dpi=80, facecolor='w', edgecolor='k')\n\ndef grey_color_func(word, font_size, position, orientation, random_state=None,\n                    **kwargs):\n    return \"hsl(206, 60%%, %d%%)\" % random.randint(50, 70)\n\nwc = WordCloud(background_color=\"#292929\", max_words=1000, margin=0) \nwc.generate_from_frequencies(dict(tuples))\n\nplt.imshow(wc.recolor(color_func=grey_color_func, random_state=3), interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()\n\ncommon_words = list(freq.word)","f95c5f48":"# 1000 rarw word removal\n# 1000 Common word removal\nfreq = pd.Series(' '.join(df['DETAIL']).split()).value_counts()[-1000:]\nfreq = pd.DataFrame(freq)\nfreq.reset_index(inplace=True)\nfreq.columns = ['word', 'count']\n#display(freq.shape[0])\ndisplay(freq.head())\n#display(freq.tail())","11b8fa1e":"tuples = [tuple(x) for x in freq.values]\nb = {tuples[i]: tuples[i+1] for i in range(0, len(tuples), 2)}\n\nfrom wordcloud import WordCloud\nfrom PIL import Image\nfrom matplotlib.pyplot import figure\nimport random\n\nfigure(num=None, figsize=(15, 12), dpi=80, facecolor='w', edgecolor='k')\n\ndef grey_color_func(word, font_size, position, orientation, random_state=None,\n                    **kwargs):\n    return \"hsl(0, 60%%, %d%%)\" % random.randint(50, 70)\n\nwc = WordCloud(background_color=\"#292929\", max_words=1000, margin=0) \nwc.generate_from_frequencies(dict(tuples))\n\nplt.imshow(wc.recolor(color_func=grey_color_func, random_state=3), interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()\n\nrare_words = list(freq.word)","31b4d3bb":"# Remove 1000 common and 1000 rare words \n# let\u2019s remove these words as their presence will not of any use in classification of our text data\ndf['DETAIL'] = df['DETAIL'].apply(lambda x: \" \".join(x for x in x.split() \n                                                     if x not in common_words))\ndf['DETAIL'] = df['DETAIL'].apply(lambda x: \" \".join(x for x in x.split() \n                                                     if x not in rare_words))","79d55d5d":"df.head()","54c74225":"ratings = pd.DataFrame(df.groupby('rating').size()).reset_index()\nratings.columns = ['rating', 'count']\nratings","fdd6d142":"from matplotlib.pyplot import figure\n#figure(num=None, figsize=(6, 8), dpi=80, facecolor='w', edgecolor='k')\n\nsns.set(context='poster', style='ticks', font_scale=0.6)\n\nsns.catplot(x=\"rating\", y=\"count\", kind='bar', palette=\"ch:.25\", data=ratings)\nplt.title('How are the rating?')\nplt.xlabel('Rating')\nplt.ylabel('Number of reviews')\nsns.despine()\nplt.tight_layout();","c4bb5ef3":"sentiment = pd.DataFrame(df.groupby(['sentiment'])['DETAIL'].count())\nsentiment = sentiment.sort_values('sentiment', ascending=False)\nsentiment.reset_index(inplace=True)\n\nsentiment.columns = ['SENTIMENT', 'NUMBER_OF_REVIEWS']\n#sentiment.tail()","f541dd81":"from matplotlib.pyplot import figure\nfigure(num=None, figsize=(6, 8), dpi=80, facecolor='w', edgecolor='k')\n\nsns.set(context='poster', style='ticks', font_scale=0.6)\n# Reorder it following the values:\nmy_range=range(1,len(sentiment.index)+1)\n\n# Create a color if the group is \"B\"\nmy_color=np.where(sentiment['SENTIMENT'] >= 0, '#5ab4ac', '#d8b365')\nmy_size=np.where(sentiment['SENTIMENT'] >= 0, 70, 30)\n\n# The vertival plot is made using the hline function\n# I load the seaborn library only to benefit the nice looking feature\nplt.hlines(y=my_range, xmin=0, xmax=sentiment['NUMBER_OF_REVIEWS'], color=my_color, alpha=1)\nplt.scatter(sentiment['NUMBER_OF_REVIEWS'], my_range, color=my_color, s=my_size, alpha=1)\n\n# Add title and exis names\n\nplt.yticks(my_range, sentiment['SENTIMENT'])\nplt.title(\"What are the reviews saying?\", loc='left')\nplt.xlabel('Number of reviews')\nplt.ylabel('Sentiment')\nsns.despine();","3abec29e":"# User Ratings","0a8899d6":"# Rare words","a4df63af":"# Read data ","1c655f1d":"# Preprocessing","47aea3f1":"# Common words","6af37fc2":"# Sentiment analysis of reviews"}}