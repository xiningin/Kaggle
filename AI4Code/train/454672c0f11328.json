{"cell_type":{"607ce6c0":"code","d912eada":"code","d6dafbf7":"code","47c5b3e5":"code","9cbf9dde":"code","1753c639":"code","a388d188":"code","3fed0f07":"code","cc2ddff2":"code","1341dd75":"code","f449d25a":"code","19392a8b":"code","3e82b950":"code","3d94c003":"code","8b454900":"code","8e1f5053":"code","40aa5651":"code","390e3ba3":"code","81de9958":"code","b27fd768":"code","21eac6d4":"code","7427609d":"code","cc035156":"code","5c8b121e":"code","a36f45eb":"code","7d165eef":"code","53ad3516":"code","dc2d225f":"code","3efa44ad":"code","33b5846e":"code","50358131":"code","d0aefcb5":"code","e4834588":"code","34ffbd8f":"markdown","c014c935":"markdown","b80f1bb7":"markdown"},"source":{"607ce6c0":"# General imports\nimport os\nimport cv2\nimport glob\nimport time\nimport json\nimport random\nimport warnings\n\nimport numpy as np\nimport pandas as pd\n\nimport seaborn as sns\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n\nfrom sklearn import svm\nfrom sklearn import tree\nfrom sklearn import impute\nfrom sklearn import metrics\nfrom sklearn import ensemble\nfrom sklearn import linear_model\nfrom sklearn import decomposition\nfrom sklearn import preprocessing\nfrom sklearn import model_selection\n\n\nwarnings.filterwarnings('ignore')\n\nSEED = 42\nnp.random.seed(SEED)\n\npd.set_option('display.max_rows', None)\npd.set_option('display.max_columns', None)\npd.set_option('float_format', '{:f}'.format)\n\nsns.set_style(\"white\")\nmpl.rcParams['figure.dpi'] = 600\n%matplotlib inline","d912eada":"train_data = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/train.csv\").drop(columns=['id'])\n\ntrain_data.head()","d6dafbf7":"N_FOLDS = 5\nTARGET = 'claim'","47c5b3e5":"test_data = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/test.csv\").drop(columns=['id'])\n\ntest_data.head()","9cbf9dde":"features = [col for col in train_data.columns if col != TARGET]\n\nlen(features)","1753c639":"train_data['n_missing'] = train_data[features].isna().sum(axis=1)\ntest_data['n_missing'] = test_data[features].isna().sum(axis=1)\n\nfeatures.append('n_missing')","a388d188":"modes = train_data[features].mode().iloc[0]\n\ntrain_data[features] = train_data[features].fillna(modes)\ntest_data[features] = test_data[features].fillna(modes)","3fed0f07":"scaler = preprocessing.StandardScaler()\n\ntrain_data[features] = scaler.fit_transform(train_data[features])\ntest_data[features] = scaler.transform(test_data[features])","cc2ddff2":"train_data['min_row'] = train_data[features].min(axis=1)\ntrain_data['max_row'] = train_data[features].max(axis=1)\ntrain_data['mean_row'] = train_data[features].mean(axis=1)\ntrain_data['std_row'] = train_data[features].std(axis=1)\n\ntest_data['min_row'] = test_data[features].min(axis=1)\ntest_data['max_row'] = test_data[features].max(axis=1)\ntest_data['mean_row'] = test_data[features].mean(axis=1)\ntest_data['std_row'] = test_data[features].std(axis=1)\n\nfeatures += ['min_row', 'max_row', 'mean_row', 'std_row']","1341dd75":"def cross_validate_model(class_name, class_params, train_data, test_data, n_splits=5):\n    \n    X = train_data[features].to_numpy()\n    Y = train_data[TARGET]\n    X_test = test_data[features].to_numpy()\n    \n    skfolds = model_selection.StratifiedKFold(n_splits=n_splits, shuffle=False)\n    \n    oof_preds, oof_y = [], []\n    \n    test_preds = np.zeros((X_test.shape[0]))\n    \n    for i, (train_index, val_index) in enumerate(skfolds.split(X, Y)):\n        x_train, x_val = X[train_index], X[val_index]\n        y_train, y_val = Y[train_index], Y[val_index]\n        \n        print(f\"{'-'*10} Fold {i+1} Started {'-'*10}\")\n        clf = class_name(**class_params)\n    \n        clf = clf.fit(x_train, y_train)\n        preds = clf.predict_proba(x_val)\n        \n        oof_preds.extend(preds[:, 1])\n        oof_y.extend(y_val)\n        \n        test_preds += clf.predict_proba(X_test)[:, 1]\n        \n        ra_score = metrics.roc_auc_score(y_val, preds[:, 1])\n    \n        print(f\"ROC AUC of current fold is {ra_score}\")\n        \n    ra_score = metrics.roc_auc_score(oof_y, oof_preds)\n    \n    print(f\"\\nOverall ROC AUC is {ra_score}\")\n    \n    return oof_preds, test_preds \/ n_splits","f449d25a":"xgb_params = {\n    'n_estimators' : 3600,\n    'reg_lambda' : 3,\n    'reg_alpha' : 26,\n    'subsample' : 0.6000000000000001,\n    'colsample_bytree' : 0.6000000000000001,\n    'max_depth' : 9,\n    'min_child_weight' : 5,\n    'gamma' : 13.054739572819486,\n    'learning_rate': 0.01,\n    'tree_method': 'gpu_hist',\n    'booster': 'gbtree'\n}\n\nlgbm_params = {\n    \"objective\": \"binary\",\n    \"learning_rate\": 0.008,\n    'device': 'gpu',\n    'n_estimators': 3205,\n    'num_leaves': 184,\n    'min_child_samples': 63,\n    'feature_fraction': 0.6864594334728974,\n    'bagging_fraction': 0.9497327922401265,\n    'bagging_freq': 1,\n    'reg_alpha': 19,\n    'reg_lambda': 19,\n    'gpu_platform_id': 0,\n    'gpu_device_id': 0\n}\n\ncatb_params = {\n    'iterations': 15585, \n    'objective': 'CrossEntropy', \n    'bootstrap_type': 'Bernoulli', \n    'od_wait': 1144, \n    'learning_rate': 0.023575206684596582, \n    'reg_lambda': 36.30433203563295, \n    'random_strength': 43.75597655616195, \n    'depth': 7, \n    'min_data_in_leaf': 11, \n    'leaf_estimation_iterations': 1, \n    'subsample': 0.8227911142845009,\n    'task_type' : 'GPU',\n    'devices' : '0',\n    'verbose' : 0\n}","19392a8b":"from xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier","3e82b950":"lv1_oof = pd.DataFrame()\nlv1_test = pd.DataFrame()","3d94c003":"oof_preds, test_preds = cross_validate_model(XGBClassifier, \n                                             xgb_params, \n                                             train_data, \n                                             test_data,\n                                             N_FOLDS)\n\nlv1_oof['xgb'] = oof_preds\nlv1_test['xgb'] = test_preds","8b454900":"catb_params['random_state'] = 42\noof_preds, test_preds = cross_validate_model(CatBoostClassifier, \n                                             catb_params, \n                                             train_data, \n                                             test_data,\n                                             N_FOLDS)\n\nlv1_oof['catb_1'] = oof_preds\nlv1_test['catb_1'] = test_preds\n\ncatb_params['random_state'] = 2021\noof_preds, test_preds = cross_validate_model(CatBoostClassifier, \n                                             catb_params, \n                                             train_data, \n                                             test_data,\n                                             N_FOLDS)\n\nlv1_oof['catb_2'] = oof_preds\nlv1_test['catb_2'] = test_preds","8e1f5053":"lgbm_params['random_state'] = 42\noof_preds, test_preds = cross_validate_model(LGBMClassifier, \n                                             lgbm_params, \n                                             train_data, \n                                             test_data,\n                                             N_FOLDS)\n\nlv1_oof['lgbm_1'] = oof_preds\nlv1_test['lgbm_1'] = test_preds\n\nlgbm_params['random_state'] = 2021\noof_preds, test_preds = cross_validate_model(LGBMClassifier, \n                                             lgbm_params, \n                                             train_data, \n                                             test_data,\n                                             N_FOLDS)\n\nlv1_oof['lgbm_2'] = oof_preds\nlv1_test['lgbm_2'] = test_preds","40aa5651":"lv1_oof[TARGET] = train_data[TARGET]","390e3ba3":"df1 = pd.read_csv('..\/input\/manav-l1\/L1_train_pred_1.csv').sort_values('id')\ndf2 = pd.read_csv('..\/input\/manav-l1\/L1_train_pred_2.csv').sort_values('id')\ndf3 = pd.read_csv('..\/input\/manav-l1\/L1_train_pred_3.csv').sort_values('id')\ndf4 = pd.read_csv('..\/input\/manav-l1\/L1_train_pred_4.csv').sort_values('id')\ndf5 = pd.read_csv('..\/input\/manav-l1\/L1_train_pred_5.csv').sort_values('id')\ndf6 = pd.read_csv('..\/input\/manav-l1\/L1_train_pred_6.csv').sort_values('id')\ndf7 = pd.read_csv('..\/input\/manav-l1\/L1_train_pred_7.csv').sort_values('id')\n\nlv1_oof['l1_m0'] = df1.iloc[:, -1].to_numpy()\nlv1_oof['l1_m1'] = df2.iloc[:, -1].to_numpy()\nlv1_oof['l1_m2'] = df3.iloc[:, -1].to_numpy()\nlv1_oof['l1_m3'] = df4.iloc[:, -1].to_numpy()\nlv1_oof['l1_m4'] = df5.iloc[:, -1].to_numpy()\nlv1_oof['l1_m5'] = df6.iloc[:, -1].to_numpy()\nlv1_oof['l1_m6'] = df7.iloc[:, -1].to_numpy()","81de9958":"lv1_oof.head()","b27fd768":"df1 = pd.read_csv('..\/input\/manav-l1\/L1_test_pred_1.csv').sort_values('id')\ndf2 = pd.read_csv('..\/input\/manav-l1\/L1_test_pred_2.csv').sort_values('id')\ndf3 = pd.read_csv('..\/input\/manav-l1\/L1_test_pred_3.csv').sort_values('id')\ndf4 = pd.read_csv('..\/input\/manav-l1\/L1_test_pred_4.csv').sort_values('id')\ndf5 = pd.read_csv('..\/input\/manav-l1\/L1_test_pred_5.csv').sort_values('id')\ndf6 = pd.read_csv('..\/input\/manav-l1\/L1_test_pred_6.csv').sort_values('id')\ndf7 = pd.read_csv('..\/input\/manav-l1\/L1_test_pred_7.csv').sort_values('id')\n\nlv1_test['l1_m0'] = df1.iloc[:, -1].to_numpy()\nlv1_test['l1_m1'] = df2.iloc[:, -1].to_numpy()\nlv1_test['l1_m2'] = df3.iloc[:, -1].to_numpy()\nlv1_test['l1_m3'] = df4.iloc[:, -1].to_numpy()\nlv1_test['l1_m4'] = df5.iloc[:, -1].to_numpy()\nlv1_test['l1_m5'] = df6.iloc[:, -1].to_numpy()\nlv1_test['l1_m6'] = df7.iloc[:, -1].to_numpy()","21eac6d4":"lv1_test.head()","7427609d":"lv1_oof.to_csv('lv1_oof.csv', index=False)\nlv1_test.to_csv('lv1_test.csv', index=False)","cc035156":"features = [col for col in lv1_oof.columns if col != TARGET]\n\nlen(features)","5c8b121e":"lv2_oof = pd.DataFrame()\nlv2_test = pd.DataFrame()","a36f45eb":"oof_preds, test_preds = cross_validate_model(XGBClassifier, \n                                             xgb_params, \n                                             lv1_oof, \n                                             lv1_test,\n                                             N_FOLDS)\n\nlv2_oof['xgb'] = oof_preds\nlv2_test['xgb'] = test_preds","7d165eef":"catb_params['random_state'] = 42\noof_preds, test_preds = cross_validate_model(CatBoostClassifier, \n                                             catb_params, \n                                             lv1_oof, \n                                             lv1_test,\n                                             N_FOLDS)\n\nlv2_oof['catb'] = oof_preds\nlv2_test['catb'] = test_preds","53ad3516":"lgbm_params['random_state'] = 2021\noof_preds, test_preds = cross_validate_model(LGBMClassifier, \n                                             lgbm_params, \n                                             lv1_oof, \n                                             lv1_test,\n                                             N_FOLDS)\n\nlv2_oof['lgbm'] = oof_preds\nlv2_test['lgbm'] = test_preds","dc2d225f":"lv2_oof.to_csv('lv2_oof.csv', index=False)\nlv2_test.to_csv('lv2_test.csv', index=False)","3efa44ad":"lv2_oof['xgb_l2'] = lv2_oof['xgb']\nlv2_test['xgb_l2'] = lv2_test['xgb']\n\nfor col in lv1_oof.columns:\n    lv2_oof[col] = lv1_oof[col]\n\nfor col in lv1_test.columns:\n    lv2_test[col] = lv1_test[col]\n\nlv2_oof.head()","33b5846e":"features = [col for col in lv2_oof.columns if col != TARGET]\n\nlen(features)","50358131":"X = lv2_oof[features].to_numpy()\nY = lv2_oof[TARGET]\nX_test = lv2_test[features].to_numpy()\n\nskfolds = model_selection.StratifiedKFold(n_splits=N_FOLDS, shuffle=False)\n\noof_preds, oof_y = [], []\n\ntest_preds = np.zeros((X_test.shape[0]))\n\nfor i, (train_index, val_index) in enumerate(skfolds.split(X, Y)):\n    x_train, x_val = X[train_index], X[val_index]\n    y_train, y_val = Y[train_index], Y[val_index]\n\n    print(f\"{'-'*10} Fold {i+1} Started {'-'*10}\")\n    clf = linear_model.LogisticRegression(max_iter=1000)\n\n    clf = clf.fit(x_train, y_train)\n    preds = clf.predict_proba(x_val)\n\n    oof_preds.extend(preds[:, 1])\n    oof_y.extend(y_val)\n\n    test_preds += clf.predict_proba(X_test)[:, 1]\n\n    ra_score = metrics.roc_auc_score(y_val, preds[:, 1])\n\n    print(f\"ROC AUC of current fold is {ra_score}\")\n\nra_score = metrics.roc_auc_score(oof_y, oof_preds)\n\nprint(f\"\\nOverall ROC AUC is {ra_score}\")\n\ntest_preds \/= N_FOLDS","d0aefcb5":"sub = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/sample_solution.csv')\n\nsub['claim'] = test_preds\n\nsub.to_csv('submission.csv', index=False)","e4834588":"sub.head()","34ffbd8f":"### Lv3\n**Input**: Predictions from previous two levels.\n\n**Models**: [LogisticRegressor]","c014c935":"### Lv2\n**Input**: Predictions from previous level along with lv1 predictions from this [notebook](https:\/\/www.kaggle.com\/manabendrarout\/custom-stacking-of-classifiers-gpu-tps-sep2021\/).\n\n**Models**: [XGB, CATB, LGBM]","b80f1bb7":"### Lv1\n**Input**: 118 Features\n\n**Models**: [XGB, CATB1, CATB2, LGBM1, LGBM2]"}}