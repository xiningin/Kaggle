{"cell_type":{"911a35f6":"code","a7717396":"code","b7e24d4e":"code","73a9e1d4":"code","f086a7d5":"code","e9bdf42e":"code","c8e57fb2":"code","6a152dc5":"markdown","fb550381":"markdown","e6c0007f":"markdown"},"source":{"911a35f6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a7717396":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head(10)\n\nfeatures=[\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\nX_train=pd.get_dummies(train_data[features])\ny_train=train_data[\"Survived\"]","b7e24d4e":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head(10)\n\nX_test=pd.get_dummies(test_data[features])","73a9e1d4":"from xgboost import XGBClassifier\n\nmodel=XGBClassifier(n_estimators=1000,learning_rate=0.05)\nmodel.fit(X_train,y_train)\n\npredictions = model.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission xgboost.csv', index=False)\nprint(\"Your submission was successfully saved!\")","f086a7d5":"# women = train_data.loc[train_data.Sex == 'female'][\"Survived\"]\n# rate_women = sum(women)\/len(women)\n\n# print(\"% of women who survived:\", rate_women)","e9bdf42e":"# men = train_data.loc[train_data.Sex == 'female'][\"Survived\"]\n# rate_men = sum(men)\/len(men)\n\n# print(\"% of men who survived:\", rate_men)","c8e57fb2":"# from sklearn.ensemble import RandomForestClassifier\n\n# y = train_data[\"Survived\"]\n\n# features = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\n\n# X = pd.get_dummies(train_data[features])\n# X_test = pd.get_dummies(test_data[features])\n\n# model = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\n# model.fit(X, y)\n# predictions = model.predict(X_test)\n\n# output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\n# output.to_csv('my_submission.csv', index=False)\n# print(\"Your submission was successfully saved!\")","6a152dc5":"# XGBoost Classifier","fb550381":"**This notebook is still work in progress. I am learning about different machine learning models and techniques. I will keep updating my code as I learn more. My XGBoost still can't outperform Random Forest Classifier for some reason. Any helpful insight will be appreciated.**","e6c0007f":"# Random Forest Classifier\nThis model outperforms XGBoost classifier in my case."}}