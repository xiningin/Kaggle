{"cell_type":{"210a731c":"code","c12bc4e8":"code","94ecdc97":"code","f646bcf8":"code","456631b3":"code","ff5c093f":"code","fedc3784":"code","ea25dc6e":"code","36e4550b":"code","b680a7d4":"code","8c9f132f":"code","7e216767":"code","2a3017f5":"code","32687d6a":"code","8e06a676":"code","8bd1f123":"code","d998586f":"code","757e4d29":"code","55e7d088":"code","d00f14b3":"code","14be2ada":"code","9114371b":"code","e9012fd4":"code","9d701596":"code","ac9c687d":"code","7b088f41":"code","d5c6bfcc":"code","73be9ed6":"code","847f8521":"code","b18abeee":"code","bcc70103":"code","47606a89":"code","84a5e9aa":"code","e905807f":"code","6a36157a":"code","9eb2f2da":"code","66074441":"code","ddace03e":"code","4a982502":"code","2c84b4f2":"code","23ba74a2":"code","e2811d2d":"code","02657c61":"code","f659e293":"code","207e8032":"code","490fe3e6":"code","18049310":"code","253a91eb":"code","245fce93":"code","e78c53f1":"code","d7511186":"markdown","91eba0de":"markdown"},"source":{"210a731c":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","c12bc4e8":"train=pd.read_csv('..\/input\/covidata\/train.csv')\ntest=pd.read_csv('..\/input\/covidata\/test.csv')\ng=train","94ecdc97":"train","f646bcf8":"test","456631b3":"train.head()","ff5c093f":"train.shape","fedc3784":"test.shape","ea25dc6e":"train.info()","36e4550b":"test.info()","b680a7d4":"train.isnull().any()","8c9f132f":"test.isnull().any()","7e216767":"train['Province_State'].isnull().value_counts()","2a3017f5":"train.drop(columns=['Province_State','Id'],axis=1,inplace=True)\ntest.drop(columns=['Province_State','ForecastId'],axis=1,inplace=True)","32687d6a":"train.head()","8e06a676":"test.head()","8bd1f123":"train_data_by_country = train.groupby(['Date','Country_Region'],as_index=False).agg({'ConfirmedCases': 'sum', 'Fatalities': 'sum'})","d998586f":"train_data_by_country","757e4d29":"topc=[\"US\",\"China\",\"Spain\",'France','United Kingdom','Italy','Brazil','Belgium','Germany','Iran','Canada']\nimport plotly.express as px\nimport plotly\nplotly.offline.init_notebook_mode(connected = True)\nfor i in topc:\n    df=train_data_by_country[train_data_by_country['Country_Region']==i]\n    fig=px.line(df,x=\"Date\",y=\"ConfirmedCases\",title='Daily Analysis of Confirmed Cases in' + \" \" +i)\n    fig.show()","55e7d088":"for i in topc:\n    df=train_data_by_country[train_data_by_country['Country_Region']==i]\n    fig=px.line(df,x='Date',y='Fatalities',title='Daily Analysis of Fatalities for' + \" \" +i,color_discrete_map={'Fatalities':'Red'})\n    fig.show()","d00f14b3":"#setting DatetimeIndex for train\ntrain=train.set_index(['Date'])","14be2ada":"train.head()","9114371b":"s=train_data_by_country['Country_Region'].tolist()","e9012fd4":"train_data_by_country","9d701596":"#adding the date column\ntrain['Date']=train.index","ac9c687d":"#removing the Datetime Index of train\ntrain.index=g.index","7b088f41":"#separating train date into day,month and year values and adding it to the train\ntrain['Date'] = pd.to_datetime(train['Date'], errors='coerce')\ntrain['Day'] = train['Date'].dt.strftime('%d')\ntrain['Month'] = train['Date'].dt.strftime('%m')","d5c6bfcc":"train","73be9ed6":"test['Date'] = pd.to_datetime(test['Date'], errors='coerce')\ntest['Day'] = test['Date'].dt.strftime('%d')\ntest['Month'] = test['Date'].dt.strftime('%m')","847f8521":"test","b18abeee":"test.head()","bcc70103":"train.head()","47606a89":"del train['Date']\ndel test['Date']","84a5e9aa":"#converting the independent variables into int datatype\ntrain['ConfirmedCases'] = train['ConfirmedCases'].apply(int)\ntrain['Fatalities'] = train['Fatalities'].apply(int)","e905807f":"cases = train.ConfirmedCases\nfatalities = train.Fatalities\ndel train['ConfirmedCases']\ndel train['Fatalities']","6a36157a":"#Handling Categorical data\nfrom sklearn.preprocessing import LabelEncoder,StandardScaler\nlb = LabelEncoder()\ntrain['Country_Region'] = lb.fit_transform(train['Country_Region'])\ntest['Country_Region'] = lb.transform(test['Country_Region'])","9eb2f2da":"scaler = StandardScaler()\nx_train = scaler.fit_transform(train.values)\nx_test = scaler.transform(test.values)","66074441":"#using xgboost for prediction \nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.ensemble import VotingRegressor","ddace03e":"dt=DecisionTreeRegressor(random_state=0)\nlg=GradientBoostingRegressor()\nlr=LinearRegression()\nclassifier=[('Linear Regression',lr),('DecisionTreeRegressor',dt),('GradientBoosting',lg)]","4a982502":"vc=VotingRegressor(estimators=classifier)\nvc.fit(x_train,cases)","2c84b4f2":"cases_pred = vc.predict(x_test)\ncases_pred","23ba74a2":"#rounding off the cases to nearest number\ncases_pred = np.around(cases_pred,decimals = 0)\ncases_pred","e2811d2d":"#fitting the model\nvc=VotingRegressor(estimators=classifier)\nvc.fit(x_train,fatalities)","02657c61":"#predicting the fatalities\nfatalities_pred = vc.predict(x_test)\nfatalities_pred","f659e293":"#rounding off the Fatalities to nearest number\nfatalities_pred = np.around(fatalities_pred,decimals = 0)\nfatalities_pred","207e8032":"result1 = pd.DataFrame(data=cases_pred).round(2)\nresult1.head()","490fe3e6":"result2 = pd.DataFrame(data=fatalities_pred).round(2)\nresult2.head()","18049310":"df_col = pd.concat([result1,result2], axis=1)\ndf_col","253a91eb":"submission=df_col","245fce93":"submission.head(10)","e78c53f1":"submission.to_csv(r\"C:\\Users\\SAYAN\\Desktop\\submissionn.csv\" , index = False)","d7511186":"# Result of Prediction","91eba0de":"# In this Analysis, you will be predicting the cumulative number of confirmed COVID19 cases in various locations across the world, as well as the number of resulting fatalities, for future dates."}}