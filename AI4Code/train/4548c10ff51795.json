{"cell_type":{"1a9debaa":"code","299fd98f":"code","e3c0c9d0":"code","97c75229":"code","5e92ab14":"code","7d1edddc":"code","1ba1a0a0":"code","9bd1fbb9":"code","13c5652c":"code","6303e29f":"code","2a5ce55a":"code","9c8275ee":"code","aa794466":"code","451d1e95":"code","48cf03c0":"code","5cec8434":"code","f64c4d93":"code","94af1938":"code","ecef6e74":"code","7c385682":"code","79642dd8":"code","01972690":"code","cab70b53":"code","c78f2070":"code","97d0e829":"code","38cbe3ba":"code","5efeab49":"code","1047202f":"markdown","69094475":"markdown","a5364ea0":"markdown","eb11ed63":"markdown","09412017":"markdown","c446ac8a":"markdown"},"source":{"1a9debaa":"# import libraries\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n#machine learning models \nfrom sklearn.ensemble import RandomForestClassifier\n","299fd98f":"# obtain data\ntrain = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")\ncompare = pd.read_csv(\"..\/input\/gender_submission.csv\")","e3c0c9d0":"#to display all columns\npd.set_option('display.max_columns', None)\ntrain.head()","97c75229":"#summarize data \ntrain.info()\nprint(\"-----------\")\ntest.info()\nprint(\"-----------\")\ntrain.describe()","5e92ab14":"#PassengerId, Name, Ticket are not likely affect the survival rate, therefore, drop\n# Cabin has too many missing values (204 out of 891) has value, drop \ntrain = train.drop([\"PassengerId\",\"Name\",\"Ticket\",\"Cabin\"], axis=1)\ntest_id = test['PassengerId']\ntest = test.drop([\"PassengerId\",\"Name\",\"Ticket\",\"Cabin\"], axis=1)\n\ntrain.head()\n","7d1edddc":"#Embarked Analysis \nfig, (axis1,axis2,axis3) = plt.subplots(1,3,figsize=(16,5)) #set grid for sns plot\nsns.barplot('Embarked','Survived', data=train, ax=axis1).set_title('Embarked Distribute') #number of passengers from different Embarkment\nsns.countplot(x='Survived', hue=\"Embarked\", data=train, order=[1,0], ax=axis2).set_title('Survival Count-Embarked') #survival count by Embarkment\n\nsurvival_rate_embarked = train[[\"Embarked\", \"Survived\"]].groupby([\"Embarked\"],as_index=False).mean() #get survival rate\nsns.barplot(x='Embarked', y='Survived', data=survival_rate_embarked, order=['S','C','Q'], ax=axis3).set_title('Survival Rate-Embarked')\n#Here we can clearly see Embarked is a factor that affects the survival rate and passengers from Cherbourg has higher survival rate\n\n# further dev: create two dummy variables for each port since there are 3 levels","1ba1a0a0":"#Embarked - Adjust for ML\n#The port in which a passenger has embarked. C - Cherbourg, S - Southampton, Q = Queenstown\n#revalue embarked into 1 - Cherbourg, 2 - Southampton, 3 = Queenstown\ntrain[\"Embarked\"] = train[\"Embarked\"].replace([\"C\",\"S\",\"Q\"], [1,2,3])\ntrain[\"Embarked\"].head()\n\n#make sdjustment to test data too \ntest[\"Embarked\"] = test[\"Embarked\"].replace([\"C\",\"S\",\"Q\"], [1,2,3])\n","9bd1fbb9":"# Display the box plots on 3 separate rows and 1 column\nfig, axes = plt.subplots(nrows=1, ncols=4)\n\n# Generate a box plot of the fare prices for the First passenger class\ntrain.loc[train['Pclass'] == 1].plot(ax=axes[0], y='Fare', kind='box', title = \"Fare in Pclass1\")\n# Generate a box plot of the fare prices for the Second passenger class\ntrain.loc[train['Pclass'] == 2].plot(ax=axes[1], y='Fare', kind='box', title = \"Fare in Pclass2\")\n\n# Generate a box plot of the fare prices for the Third passenger class\ntrain.loc[train['Pclass'] == 3].plot(ax=axes[2], y='Fare', kind='box', title = \"Fare in Pclass3\")\n\n#overall Fare\ntrain[\"Fare\"].plot(ax=axes[3], y='Fare', kind='box', title = \"Fare in Pclass3\")\n\n# Display the plot\nplt.show()\n\n# There are anormaly, remove them Upper+3std","13c5652c":"#Remove Anormaly data to be continued\n","6303e29f":"#Fare \nfig, (axis1,axis2) = plt.subplots(1,2,figsize=(16,10)) #set grid for sns plot\nsns.distplot(train[\"Fare\"], ax=axis1) #distribution of fares\nsns.boxplot(x=train[\"Survived\"], y=train[\"Fare\"], data=train, ax=axis2)\n#from the plots we can infer the fare price has influence in survival rate, survivers are who paid higher fare in general","2a5ce55a":"#Age\nfig, (axis1,axis2) = plt.subplots(1,2,figsize=(15,5))\nsns.distplot(train[\"Age\"].dropna(), ax=axis1).set_title(\"Age Distribution\")\n\n#seperate kids from adults (Age<18) and elder (Age>60)\ndf_age = pd.DataFrame(index=range(len(train)), columns=[\"Survived\",\"Age\",\"Adulthood\"])\ndf_age[[\"Survived\",\"Age\"]] = train[[\"Survived\",\"Age\"]]\ndf_age.loc[df_age['Age'] <18, 'Adulthood'] = 'Child'\ndf_age.loc[ (df_age['Age'] >= 18) & (df_age['Age'] < 60), 'Adulthood'] = 'Adult'\ndf_age.loc[ df_age['Age'] >= 60, 'Adulthood'] = 'Elder'\n#aggregate\nAdulthood = df_age[[\"Adulthood\", \"Survived\"]].groupby([\"Adulthood\"],as_index=False).mean() #get survival rate\nsns.barplot(x=Adulthood[\"Adulthood\"], y=Adulthood[\"Survived\"], data=Adulthood, ax=axis2).set_title(\"Survival Rate By Adulthood\")\n#Cleary, Children has higher survival rate then adult than elders","9c8275ee":"#Sex Analysis\nfig, (axis1,axis2) = plt.subplots(1,2,figsize=(15,5))\nsns.countplot(x='Survived', hue=\"Sex\", data=train, order=[1,0], ax=axis1).set_title('Survival Count-Sex')\nsex = train[[\"Survived\",\"Sex\"]].groupby(train[\"Sex\"], as_index=False).mean()\nsns.barplot(x=[\"Female\", \"Male\"], y=sex[\"Survived\"], data= sex).set_title('Survival Rate-Sex')\n\n#Female has higher survival rate","aa794466":"# Sex adjust for Machine Learning\n#convert male to 0 and female to 1\ntrain[\"Sex\"] = train[\"Sex\"].replace([\"male\", \"female\"], [0,1])\ntest[\"Sex\"] = test[\"Sex\"].replace([\"male\", \"female\"], [0,1])","451d1e95":"#Parch and SibSp Analysis\n#My hypothesis is passengers with parents or child will have low survival rate because they tend to save the child(s) and parents\n#While male passengers with spouse or siblings might have lower survival rate. Lets see\n\n#convert data. Has parent(s) or child(s) = 1, has no parent(s) or child(s) = 0\nfig, (axis1,axis2,axis3) = plt.subplots(1,3,figsize=(15,5))\ntrain['Parch'].loc[(train['Parch']>0)] = 1\nparch = train[[\"Survived\",\"Parch\"]].groupby(train[\"Parch\"], as_index=False).mean()\nsns.barplot(x=parch[\"Parch\"], y=parch[\"Survived\"], data=parch, ax=axis1).set_title(\"Survival Rate By Parch\")\n\n#convert data. Has spouse or siblings = 1, has no spouse or siblings = 0\ntrain['SibSp'].loc[(train['SibSp']>0)] = 1\nsibsp = train[[\"Survived\",\"SibSp\"]].groupby(train[\"SibSp\"], as_index=False).mean()\nsns.barplot(x=sibsp[\"SibSp\"], y=sibsp[\"Survived\"], data=sibsp, ax=axis2).set_title(\"Survival Rate By SibSp\")\n\n# the SibSo and Parch behaved very similarly\n# now lets take a look at male vs Female in SibSp \nsibspsex = pd.DataFrame(train.groupby([\"Sex\", \"SibSp\"], as_index=False)[\"Survived\"].agg(\"mean\"))\n#convert int to string to concat\nsibspsex[\"Sex\"] = sibspsex[\"Sex\"].astype(str)\nsibspsex[\"SibSp\"] = sibspsex[\"SibSp\"].astype(str)\nsibspsex[\"Sibspsex\"] = sibspsex[[\"Sex\", \"SibSp\"]].apply(lambda x: \"\".join(x), axis=1)\nsns.barplot(x=sibspsex[\"Sibspsex\"], y=sibspsex[\"Survived\"], data=sibspsex, ax=axis3).set_title(\"Survival Rate - Sex and SibSp\")\n#Female's survival rate is the still higher than male's \n#For males: those who has sibling(s) or spouse have higher survival rate\n#For Female: those who has sibling(s) or spouse have lowe survival rate\n# with above conclusion, I want to infer females had sacrificed their life to save spouse's life given the sociaety at that time is male dominant","48cf03c0":"sibspsex = pd.DataFrame(train.groupby([\"Sex\", \"SibSp\"], as_index=False)[\"Survived\"].agg(\"mean\"))\n#convert int to string to concat\nsibspsex[\"Sex\"] = sibspsex[\"Sex\"].astype(str)\nsibspsex[\"SibSp\"] = sibspsex[\"SibSp\"].astype(str)\nsibspsex[\"sibspsex\"] = sibspsex[[\"Sex\", \"SibSp\"]].apply(lambda x: \"\".join(x), axis=1)\nsibspsex","5cec8434":"train.head()","f64c4d93":"test.head()","94af1938":"#Fill NaNs in Embarked column with random port\nports = list(train[\"Embarked\"].drop_duplicates().dropna())\nprint(ports)\ntrain[\"Embarked\"] = train[\"Embarked\"].fillna(ports[random.randint(0,2)])\n#Fill NaNs in Age column with random number from 1 to 80\ntrain[\"Age\"] = train[\"Age\"].fillna(random.randint(1,80))\ntrain[\"Age\"].isnull().values.any()\n\n#verify there is no na in the train df\nprint(f\"Is there any missing value in train data frame? {train.isnull().values.any()}\")\n\n#fill na in test data as well\ntest[\"Embarked\"] = test[\"Embarked\"].fillna(ports[random.randint(0,2)])\ntest[\"Age\"] = test[\"Age\"].fillna(test[\"Age\"].fillna(random.randint(1,80)))\ntest[\"Fare\"] = test[\"Fare\"].fillna(test[\"Fare\"].median())\nprint(f\"Is there any missing value in test data frame? {test.isnull().values.any()}\")\n","ecef6e74":"# define training and testing data sets\nY_train = train[\"Survived\"]\nX_train = train.drop(\"Survived\",axis=1)\nX_test  = test","7c385682":"# Random Forests\n\nrandom_forest = RandomForestClassifier(n_estimators=100)\n\nrandom_forest.fit(X_train, Y_train)\n\nY_pred = random_forest.predict(X_test)\n\nrandom_forest.score(X_train, Y_train)","79642dd8":"Y_pred","01972690":"submission = pd.DataFrame({\n        \"PassengerId\": test_id,\n        \"Survived\": Y_pred\n    })\nsubmission.to_csv('titanic_prediction_submission.csv', index=False)","cab70b53":"from sklearn.metrics import accuracy_score\naccuracy_score(compare[\"Survived\"], Y_pred)","c78f2070":"submission.head()","97d0e829":"#combine predicted result to actual result for benchmarking \nsubmission = submission.rename(columns={\"Survived\": \"Survived_pred\"})\nresult = pd.concat([compare, submission[\"Survived_pred\"]], axis=1)\nresult.head()","38cbe3ba":"result.loc[(result[\"Survived\"] == result[\"Survived_pred\"]), \"Benchmark\"] = 1\nresult.loc[(result[\"Survived\"] != result[\"Survived_pred\"]), \"Benchmark\"] = 0","5efeab49":"accuracy = (result['Benchmark'].sum())\/len(result)\naccuracy","1047202f":"**Understanding Dataset**","69094475":"**Machine Learning **","a5364ea0":"**Analyzing  and modifying dataset**","eb11ed63":"**Or**","09412017":"**Bench Marking**","c446ac8a":"**Remove NA and prep for ML**"}}