{"cell_type":{"fd928b44":"code","4fd2374a":"code","438afd24":"code","057dc15d":"code","153df301":"code","822e7160":"code","ea55820a":"code","864df93d":"code","1a2422e9":"code","4d374969":"code","840c8f69":"code","8d046473":"code","1a0bdd64":"code","921e3d5e":"code","f7b310c4":"code","1dde8f42":"markdown","1f352085":"markdown","f04c66d7":"markdown","7578f657":"markdown","e54c105c":"markdown","9601ad48":"markdown","613a567d":"markdown","cabe5291":"markdown","0b4bb74a":"markdown","6345d540":"markdown"},"source":{"fd928b44":"import seaborn as sns\n%matplotlib inline","4fd2374a":"tips = sns.load_dataset('tips')","438afd24":"tips.head()","057dc15d":"sns.distplot(tips['total_bill'])\n# Safe to ignore warnings","153df301":"sns.distplot(tips['total_bill'],kde=False,bins=30)","822e7160":"sns.jointplot(x='total_bill',y='tip',data=tips,kind='scatter')","ea55820a":"sns.jointplot(x='total_bill',y='tip',data=tips,kind='hex')","864df93d":"sns.jointplot(x='total_bill',y='tip',data=tips,kind='reg')","1a2422e9":"sns.pairplot(tips)","4d374969":"sns.pairplot(tips,hue='sex',palette='coolwarm')","840c8f69":"sns.rugplot(tips['total_bill'])","8d046473":"# Don't worry about understanding this code!\n# It's just for the diagram below\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n#Create dataset\ndataset = np.random.randn(25)\n\n# Create another rugplot\nsns.rugplot(dataset);\n\n# Set up the x-axis for the plot\nx_min = dataset.min() - 2\nx_max = dataset.max() + 2\n\n# 100 equally spaced points from x_min to x_max\nx_axis = np.linspace(x_min,x_max,100)\n\n# Set up the bandwidth, for info on this:\nurl = 'http:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation#Practical_estimation_of_the_bandwidth'\n\nbandwidth = ((4*dataset.std()**5)\/(3*len(dataset)))**.2\n\n\n# Create an empty kernel list\nkernel_list = []\n\n# Plot each basis function\nfor data_point in dataset:\n    \n    # Create a kernel for each point and append to list\n    kernel = stats.norm(data_point,bandwidth).pdf(x_axis)\n    kernel_list.append(kernel)\n    \n    #Scale for plotting\n    kernel = kernel \/ kernel.max()\n    kernel = kernel * .4\n    plt.plot(x_axis,kernel,color = 'grey',alpha=0.5)\n\nplt.ylim(0,1)","1a0bdd64":"# To get the kde plot we can sum these basis functions.\n\n# Plot the sum of the basis function\nsum_of_kde = np.sum(kernel_list,axis=0)\n\n# Plot figure\nfig = plt.plot(x_axis,sum_of_kde,color='indianred')\n\n# Add the initial rugplot\nsns.rugplot(dataset,c = 'indianred')\n\n# Get rid of y-tick marks\nplt.yticks([])\n\n# Set title\nplt.suptitle(\"Sum of the Basis Functions\")","921e3d5e":"sns.kdeplot(tips['total_bill'])\nsns.rugplot(tips['total_bill'])","f7b310c4":"sns.kdeplot(tips['tip'])\nsns.rugplot(tips['tip'])","1dde8f42":"## distplot\n\nThe distplot shows the distribution of a univariate set of observations.","1f352085":"## Data\nSeaborn comes with built-in data sets!","f04c66d7":"## pairplot\n\npairplot will plot pairwise relationships across an entire dataframe (for the numerical columns) and supports a color hue argument (for categorical columns). ","7578f657":"So with our tips dataset:","e54c105c":"___\n## Imports","9601ad48":"To remove the kde layer and just have the histogram use:","613a567d":"# Distribution Plots\n\nLet's discuss some plots that allow us to visualize the distribution of a data set. These plots are:\n\n* distplot\n* jointplot\n* pairplot\n* rugplot\n* kdeplot","cabe5291":"## jointplot\n\njointplot() allows you to basically match up two distplots for bivariate data. With your choice of what **kind** parameter to compare with: \n* \u201cscatter\u201d \n* \u201creg\u201d \n* \u201cresid\u201d \n* \u201ckde\u201d \n* \u201chex\u201d","0b4bb74a":"## rugplot\n\nrugplots are actually a very simple concept, they just draw a dash mark for every point on a univariate distribution. They are the building block of a KDE plot:","6345d540":"## kdeplot\n\nkdeplots are [Kernel Density Estimation plots](http:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation#Practical_estimation_of_the_bandwidth). These KDE plots replace every single observation with a Gaussian (Normal) distribution centered around that value. For example:"}}