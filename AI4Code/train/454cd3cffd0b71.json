{"cell_type":{"67c14999":"code","094dce7a":"code","cd642770":"code","927c6f40":"code","54e4723e":"code","801592c8":"code","b38f9d5e":"code","f8057426":"code","6e64d541":"code","f17fe0a6":"code","516f67df":"code","6f7d3003":"code","0981ffb4":"code","0342ab68":"code","d16db63d":"code","e0e9a9b4":"code","476175bf":"code","dfa7bb22":"code","789fa2fd":"code","2936cdb8":"markdown","254561ba":"markdown","2d04a97c":"markdown","e77457f1":"markdown","43df31ea":"markdown"},"source":{"67c14999":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","094dce7a":"full_table = pd.read_csv('..\/input\/corona-virus-report\/covid_19_clean_complete.csv', \n                         parse_dates=['Date'])\nfull_table.head()","cd642770":"full_table.describe().T","927c6f40":"# Defining COVID-19 cases as per classifications \ncases = ['Confirmed', 'Deaths', 'Recovered', 'Active']\n\n# Defining Active Case: Active Case = confirmed - deaths - recovered\nfull_table['Active'] = full_table['Confirmed'] - full_table['Deaths'] - full_table['Recovered']\n\n# Renaming Mainland china as China in the data table\nfull_table['Country\/Region'] = full_table['Country\/Region'].replace('Mainland China', 'China')\n\n# filling missing values \nfull_table[['Province\/State']] = full_table[['Province\/State']].fillna('')\nfull_table[cases] = full_table[cases].fillna(0)\n\n# cases in the ships\nship = full_table[full_table['Province\/State'].str.contains('Grand Princess')|full_table['Country\/Region'].str.contains('Cruise Ship')]\n\n# china and the row\nchina = full_table[full_table['Country\/Region']=='China']\nrow = full_table[full_table['Country\/Region']!='China']\n\n# latest\nfull_latest = full_table[full_table['Date'] == max(full_table['Date'])].reset_index()\nchina_latest = full_latest[full_latest['Country\/Region']=='China']\nrow_latest = full_latest[full_latest['Country\/Region']!='China']\n\n# latest condensed\nfull_latest_grouped = full_latest.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\nchina_latest_grouped = china_latest.groupby('Province\/State')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\nrow_latest_grouped = row_latest.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()","54e4723e":"temp = full_table.groupby(['Country\/Region', 'Province\/State'])['Confirmed', 'Deaths', 'Recovered', 'Active'].max()\n","801592c8":"temp = full_table.groupby('Date')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\ntemp = temp[temp['Date']==max(temp['Date'])].reset_index(drop=True)\ntemp.style.background_gradient(cmap='Pastel1')","b38f9d5e":"temp_f = full_latest_grouped.sort_values(by='Confirmed', ascending=False)\ntemp_f = temp_f.reset_index(drop=True)\ntemp_f.style.background_gradient(cmap='Reds')","f8057426":"temp_f.head(10)","6e64d541":"import plotly as py\nimport plotly.graph_objects as go\nimport pandas as pd\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)    #THIS LINE IS MOST IMPORTANT AS THIS WILL DISPLAY PLOT ON \n#NOTEBOOK WHILE KERNEL IS RUNNING\n\n#Time Series plot for knwoing the spread\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(\n                x=full_table.Date,\n                y=full_table['Confirmed'],\n                name=\"Confirmed\",\n                line_color='deepskyblue',\n                opacity=0.8))\n\nfig.add_trace(go.Scatter(\n                x=full_table.Date,\n                y=full_table['Recovered'],\n                name=\"Recovered\",\n                line_color='dimgray',\n                opacity=0.8))\nfig.update_layout(title_text='Time Series with Rangeslider',\n                  xaxis_rangeslider_visible=True)\npy.offline.iplot(fig)","f17fe0a6":"import plotly.offline as py\npy.init_notebook_mode(connected=True)\n\n# Calculating the count of confirmed cases by country\n\ncountries = np.unique(temp_f['Country\/Region'])\nmean_conf = []\nfor country in countries:\n    mean_conf.append(temp_f[temp_f['Country\/Region'] == country]['Confirmed'].sum())\n    \n# Building the dataframe\n\n    data = [ dict(\n        type = 'choropleth',\n        locations = countries,\n        z = mean_conf,\n        locationmode = 'country names',\n        text = countries,\n        marker = dict(\n            line = dict(color = 'rgb(0,0,0)', width = 1)),\n            colorbar = dict(autotick = True, tickprefix = '', \n            title = 'Count')\n            )\n       ]\n    \n# Building the visual\n\n    layout = dict(\n    title = 'COVID-19 Confirmed Cases',\n    geo = dict(\n        showframe = False,\n        showocean = True,\n        oceancolor = 'rgb(0,255,255)',\n        projection = dict(\n        type = 'orthographic',\n            rotation = dict(\n                    lon = 60,\n                    lat = 10),\n        ),\n        lonaxis =  dict(\n                showgrid = True,\n                gridcolor = 'rgb(102, 102, 102)'\n            ),\n        lataxis = dict(\n                showgrid = True,\n                gridcolor = 'rgb(102, 102, 102)'\n                )\n            ),\n        )\n\nfig = dict(data=data, layout=layout)\npy.iplot(fig, validate=False, filename='worldmap')","516f67df":"import pandas as pd\nglobal_temp_country = pd.read_csv(\"..\/input\/climate-change-earth-surface-temperature-data\/GlobalLandTemperaturesByCountry.csv\")","6f7d3003":"global_temp_country.head()","0981ffb4":"import plotly.offline as py\npy.init_notebook_mode(connected=True)\n\n## Removing the duplicates\n\nglobal_temp_country_clear = global_temp_country[~global_temp_country['Country'].isin(\n    ['Denmark', 'Antarctica', 'France', 'Europe', 'Netherlands',\n     'United Kingdom', 'Africa', 'South America'])]\n\nglobal_temp_country_clear = global_temp_country_clear.replace(\n   ['Denmark (Europe)', 'France (Europe)', 'Netherlands (Europe)', 'United Kingdom (Europe)'],\n   ['Denmark', 'France', 'Netherlands', 'United Kingdom'])\n\n#Calculating average temperature by country\n\ncountries = np.unique(global_temp_country_clear['Country'])\nmean_temp = []\nfor country in countries:\n    mean_temp.append(global_temp_country_clear[global_temp_country_clear['Country'] == \n                                               country]['AverageTemperature'].mean())\n\n# Building the data frame\n    \ndata = [ dict(\n        type = 'choropleth',\n        locations = countries,\n        z = mean_temp,\n        locationmode = 'country names',\n        text = countries,\n        marker = dict(\n            line = dict(color = 'rgb(0,0,0)', width = 1)),\n            colorbar = dict(autotick = True, tickprefix = '', \n            title = '# Average\\nTemperature,\\n\u00b0C')\n            )\n       ]\n\n# Building the visual\n\nlayout = dict(\n    title = 'GLOBAL AVERAGE LAND TEMPERATURES',\n    geo = dict(\n        showframe = False,\n        showocean = True,\n        oceancolor = 'rgb(0,255,255)',\n        projection = dict(\n        type = 'orthographic',\n            rotation = dict(\n                    lon = 60,\n                    lat = 10),\n        ),\n        lonaxis =  dict(\n                showgrid = True,\n                gridcolor = 'rgb(102, 102, 102)'\n            ),\n        lataxis = dict(\n                showgrid = True,\n                gridcolor = 'rgb(102, 102, 102)'\n                )\n            ),\n        )\n\nfig = dict(data=data, layout=layout)\npy.iplot(fig, validate=False, filename='worldmap')","0342ab68":"import plotly.express as px\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nformated_gdf = full_table.groupby(['Date', 'Country\/Region'])['Confirmed', 'Deaths', 'Recovered'].max()\nformated_gdf = formated_gdf.reset_index()\nformated_gdf['Date'] = pd.to_datetime(formated_gdf['Date'])\nformated_gdf['Date'] = formated_gdf['Date'].dt.strftime('%m\/%d\/%Y')\nformated_gdf['size'] = formated_gdf['Confirmed'].pow(0.3)\n\nfig = px.scatter_geo(formated_gdf, locations=\"Country\/Region\", locationmode='country names', \n                     color=\"Confirmed\", size='size', hover_name=\"Country\/Region\", \n                     range_color= [0, max(formated_gdf['Confirmed'])+2], \n                     projection=\"natural earth\", animation_frame=\"Date\", \n                     title='Progression of spread of COVID-19')\nfig.update(layout_coloraxis_showscale=False)\npy.offline.iplot(fig)","d16db63d":"full_table = pd.read_csv('..\/input\/corona-virus-report\/covid_19_clean_complete.csv', \n                         parse_dates=['Date'])\nfull_table.head()","e0e9a9b4":"# Defining COVID-19 cases as per classifications \ncases = ['Confirmed', 'Deaths', 'Recovered', 'Active']\n\n# Defining Active Case: Active Case = confirmed - deaths - recovered\nfull_table['Active'] = full_table['Confirmed'] - full_table['Deaths'] - full_table['Recovered']\n\n# Renaming Mainland china as China in the data table\nfull_table['Country\/Region'] = full_table['Country\/Region'].replace('Mainland China', 'China')\n\n# filling missing values \nfull_table[['Province\/State']] = full_table[['Province\/State']].fillna('')\nfull_table[cases] = full_table[cases].fillna(0)\n\n# cases in the ships\nship = full_table[full_table['Province\/State'].str.contains('Grand Princess')|full_table['Country\/Region'].str.contains('Cruise Ship')]\n\n# china and the row\nchina = full_table[full_table['Country\/Region']=='China']\nrow = full_table[full_table['Country\/Region']!='China']\n\n# latest\nfull_latest = full_table[full_table['Date'] == max(full_table['Date'])].reset_index()\nchina_latest = full_latest[full_latest['Country\/Region']=='China']\nrow_latest = full_latest[full_latest['Country\/Region']!='China']\n\n# latest condensed\nfull_latest_grouped = full_latest.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\nchina_latest_grouped = china_latest.groupby('Province\/State')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\nrow_latest_grouped = row_latest.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()","476175bf":"temp = full_table.groupby(['Country\/Region', 'Province\/State'])['Confirmed', 'Deaths', 'Recovered', 'Active'].max()\ntemp = full_table.groupby('Date')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\ntemp = temp[temp['Date']==max(temp['Date'])].reset_index(drop=True)\ntemp.style.background_gradient(cmap='Pastel1')","dfa7bb22":"temp_f = full_latest_grouped.sort_values(by='Confirmed', ascending=False)\ntemp_f = temp_f.reset_index(drop=True)\ntemp_f.head(11).style.background_gradient(cmap='Reds')","789fa2fd":"df.head(10)","2936cdb8":"### Createing Dataset and Simplified analysis: ","254561ba":"### Covid cases values in world map ","2d04a97c":"### Progression of spread of COVID-19","e77457f1":"*** Grouped accoring to 5 Columns**","43df31ea":"### Temprature values in World Map"}}