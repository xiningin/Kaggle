{"cell_type":{"2da5a460":"code","1b7ff4d0":"code","64f231f0":"code","47a41bc6":"code","cc3741d2":"code","f44293f8":"code","94664597":"code","f7a32217":"code","bf9a4613":"code","3b91ce58":"code","08afbc3e":"code","01467641":"code","c9824679":"code","b785089d":"code","75c68ce0":"code","3c98245e":"code","7bf0beb0":"code","4bc66144":"code","37376ee7":"code","2d4fbe06":"code","ab71cfbb":"code","c0fa32b5":"code","1a63afc4":"code","c8993b13":"code","02af22ac":"code","03fc5f1e":"code","85130375":"code","5292bbb4":"code","b384c561":"code","283c4c72":"code","603f4f9c":"code","2e47513a":"code","b387066d":"code","ed7562a3":"code","14bf5637":"code","f3272111":"code","b2840189":"code","bce84980":"code","95abba9b":"code","9aac860c":"code","e7f3d1b3":"code","53964a4d":"code","86afb16c":"code","8cd27238":"code","4b0c419c":"code","9d4e25c8":"code","8125956d":"code","a75c0feb":"code","d0a567db":"code","6f393f67":"code","cc26f6cb":"code","30aa7b30":"code","cc626da1":"code","0ec9e668":"code","3e02af85":"code","e22c079d":"code","65d30081":"code","72f190ff":"markdown","c4e603f3":"markdown","002238b0":"markdown","afe3b3ea":"markdown","1190d0d4":"markdown","bf4f6883":"markdown","a91e1df9":"markdown"},"source":{"2da5a460":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1b7ff4d0":"import numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\n\n# Display\nfrom IPython.display import Image, display\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\n\nimport numpy as np\nimport os\nimport time\nimport pickle\nimport cv2\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nfrom keras import backend as K\nfrom keras import applications\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras import optimizers\nfrom keras.models import Sequential, Model, load_model \nfrom keras.layers import Dropout, Flatten, Dense, GlobalAveragePooling2D, Input\nfrom keras import backend as k \nfrom keras.callbacks import ModelCheckpoint, LearningRateScheduler, TensorBoard, EarlyStopping\nfrom keras.optimizers import Adam, RMSprop, SGD\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.svm import SVC\nfrom sklearn.preprocessing import LabelEncoder\nfrom skimage.transform import resize\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score, confusion_matrix,classification_report\nfrom keras.applications.resnet50 import ResNet50\nfrom keras.preprocessing import image\nfrom keras.applications.resnet50 import *\nfrom keras.models import Model\nfrom keras.applications.vgg19 import VGG19\nimport os\nfrom xgboost import XGBClassifier\n#os.environ['CUDA_VISIBLE_DEVICES'] = '0,1,2,3'\nimport pickle\nfrom datetime import datetime\nimport cv2\nimport math\nimport numpy as np\nimport os\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import train_test_split\nimport seaborn as sns\nimport PIL\nimport torch\nimport torch.utils.data as data\nfrom torch.utils.data import Dataset, DataLoader, Subset\nfrom torch.utils.tensorboard import SummaryWriter\nfrom torch.optim import lr_scheduler\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.nn import functional as F\nfrom torch.nn import init\nfrom torch.autograd import Variable\nimport torchvision\nfrom torchvision import datasets, models, transforms\nfrom torch import nn\nimport time, copy, argparse\nimport multiprocessing\nfrom matplotlib import pyplot as plt\nfrom sklearn.metrics import f1_score, accuracy_score\nfrom torch import FloatTensor\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import f1_score,recall_score,precision_score\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn import svm\nimport random\nimport functools\nimport joblib\nimport pickle\nimport os\nimport cv2\nfrom glob import glob\nfrom random import shuffle\n","64f231f0":"def data_prep_x_ray():\n  root_folder = '\/kaggle\/input\/covid-xray-dataset'\n  diction = {}\n\n  \n\n  dir_images = []\n  dir_label = []\n  \n  count_covid = 0\n  count_non_covid = 0\n    \n  for subdir in os.listdir(root_folder):\n          print('subdir',os.path.join(root_folder, subdir))\n          for file_count, file_name in enumerate( sorted(glob(os.path.join(root_folder, subdir)+ '\/*'),key=len) ):\n              \n              img = cv2.imread(file_name)\n              img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n              dir_images.append(img)\n              dir_label.append(subdir)\n              if subdir =='NonCOVID':\n                  count_non_covid +=1\n                  if count_non_covid ==1500:\n                    break\n              elif subdir == 'COVID':\n                  count_covid +=1\n                  if count_covid == 1500:\n                    break\n              \n\n  diction_train = {}\n  diction_test = {}\n  dir_label_shuf_train = []\n  dir_images_shuf_train = []\n  index_shuf = list(range(len(dir_label)))\n  shuffle(index_shuf)\n\n  train_shuf = index_shuf[0:int(len(index_shuf))]\n\n\n  for i in train_shuf:\n      dir_label_shuf_train.append(dir_label[i])\n      dir_images_shuf_train.append(dir_images[i])    \n          \n  diction_train['X_tr'] = dir_images_shuf_train\n  diction_train['y_tr'] = dir_label_shuf_train\n\n\n        \n        \n  print(len(diction_train['X_tr']))\n  ##print(diction_train['y_tr'])\n  print(diction_train['X_tr'][0].shape)\n\n\n \n\n\n  with open('training.pickle', 'wb') as handle:\n      pickle.dump(diction_train, handle, protocol=pickle.HIGHEST_PROTOCOL)\n\n  \n\n  nrows=224 #nrows = 299 \n  ncolumns=224 #ncolumns = 299 #Inception\n  channels=1\n\n  batch_size=16\n  epochs=1\n  # Number of classes\n  num_cpu = multiprocessing.cpu_count()\n  num_classes = 2\n  torch.manual_seed(8)\n  torch.cuda.manual_seed(8)\n  np.random.seed(8)\n  random.seed(8)\n\n\n\n\n  device = torch.device(\"cpu\")\n\n  dbfile = open('training.pickle', 'rb')      \n  db = pickle.load(dbfile) \n  X_train,y_train = db['X_tr'],db['y_tr']\n\n  X = []\n  #X_train=np.reshape(np.array(X_train),[len(X_train),])\n  for img in list(range(0,len(X_train))):\n    if X_train[img].ndim>=3:\n        X.append(np.moveaxis(cv2.resize(X_train[img][:,:,:3], (nrows,ncolumns),interpolation=cv2.INTER_CUBIC), -1, 0))\n    else:\n        smimg= cv2.cvtColor(X_train[img],cv2.COLOR_GRAY2RGB)\n        X.append(np.moveaxis(cv2.resize(smimg, (nrows,ncolumns),interpolation=cv2.INTER_CUBIC), -1, 0))\n    \n    if y_train[img]=='COVID':\n        y_train[img]=1\n    elif y_train[img]=='NonCOVID' :\n        y_train[img]=0\n    else:\n        continue\n\n  x = np.array(X)\n  y_train = np.array(y_train)\n\n\n  outputs_all = []\n  labels_all = []\n\n  X_train, X_val, y_train, y_val = train_test_split(x, y_train, test_size=0.2, random_state=2)\n\n  #base_model = tf.keras.applications.VGG19(weights = 'imagenet')\n  #model = Model(inputs=base_model.input,outputs = base_model.get_layer('block5_pool').output)\n  base_model = tf.keras.applications.ResNet50(weights = 'imagenet')\n  model = Model(inputs=base_model.input,outputs = base_model.get_layer('avg_pool').output)\n  #base_model = tf.keras.applications.DenseNet121(weights='imagenet')\n  #model = Model(inputs=base_model.input,outputs = base_model.get_layer('avg_pool').output)\n  #base_model = tf.keras.applications.InceptionResNetV2(weights='imagenet')\n  #model = Model(inputs=base_model.input,outputs = base_model.get_layer('avg_pool').output)\n\n  feature_dict={0:[],1:[]}\n  feature_dict_val={0:[],1:[]}\n  classes=['0','1']\n  for j in range(len(X_train)):\n    xx = X_train[j].transpose(2,1,0)\n    xx = np.expand_dims(xx,axis=0)\n  \n    feature_dict[y_train[j]].append(model.predict(xx))\n\n\n  for j in range(len(X_val)):\n    xx = X_val[j].transpose(2,1,0)\n    xx = np.expand_dims(xx,axis=0)\n  \n    feature_dict_val[y_val[j]].append(model.predict(xx))\n\n\n  pickle.dump(feature_dict, open('features_till_flatten.pkl', \"wb\" ))\n  pickle.dump(feature_dict_val, open('features_till_flatten_val.pkl', \"wb\" ))\n\n\n\n  labels = []\n  feature_list = []\n  feature_dict=pickle.load(open('features_till_flatten.pkl','rb'))\n  names = [0,1]\n  for cat,features  in feature_dict.items():\n      labels.extend([int(cat)] * len(features))\n      feature_list.append(features)\n  feature_list = np.concatenate(feature_list)\n  feature_list1=[]\n  for i in range(0,len(feature_list)):\n      feature_list1.append(feature_list[i].ravel())\n\n\n  labels2 = []\n  feature_list_val = []\n  feature_dict_val=pickle.load(open('features_till_flatten_val.pkl','rb'))\n  names = [0,1]\n  for cat,features  in feature_dict_val.items():\n      labels2.extend([int(cat)] * len(features))\n      feature_list_val.append(features)\n  feature_list_val = np.concatenate(feature_list_val)\n  feature_list2=[]\n  for i in range(0,len(feature_list_val)):\n      feature_list2.append(feature_list_val[i].ravel())\n\n  scaler = StandardScaler().fit(feature_list1)\n  rescaledX = scaler.transform(feature_list1)\n  rescaledX_validation = scaler.transform(feature_list2)\n  \n  return rescaledX, rescaledX_validation, labels, labels2\n","47a41bc6":"rescaledX_xray, rescaledX_validation_xray, labels_xray,labels2_xray = data_prep_x_ray()","cc3741d2":"!pip install FuzzyClassificator","f44293f8":"import numpy as np\nfrom numpy import linalg\nimport cvxopt\nimport cvxopt.solvers\nimport pandas as pd\n\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import accuracy_score\nfrom cvxopt import matrix as cvxopt_matrix\nfrom cvxopt import solvers as cvxopt_solvers\nfrom sklearn import svm\nimport math","94664597":"def linear_kernel(x1, x2):\n    return np.dot(x1, x2)\n\ndef polynomial_kernel(x, y, p=3):\n    return (1 + np.dot(x, y)) ** p\n\ndef gaussian_kernel(x, y, sigma=10.0):\n   # print(-linalg.norm(x-y)**2)\n    x=np.asarray(x)\n    y=np.asarray(y)\n    return np.exp((-linalg.norm(x-y)**2) \/ (2 * (sigma ** 2)))\n\ndef gm(y_predict,y_test):\n    test_min=0\n    test_max=0\n    pred_min=0\n    pred_max=0\n    y_test=np.asarray(y_test)\n    for i in range(0,836):\n        if(y_test[i]==1):\n             test_min=test_min+1\n        else:\n             test_max=test_max+1\n    print(\"y_test min\",test_min)       \n    print(\"y_test max\",test_max)\n    for i in range(0,836):\n        if(y_predict[i]==1 and y_predict[i]==y_test[i]):\n             pred_min=pred_min+1\n        elif(y_predict[i]==-1 and y_predict[i]==y_test[i]):\n             pred_max=pred_max+1\n    print(\"y_pred min\",pred_min)       \n    print(\"y_pred max\",pred_max)\n    se=pred_min\/test_min\n    sp=pred_max\/test_max\n    print(se,sp)\n    gm=math.sqrt(se*sp)\n    print(\"GM\",gm)","f7a32217":"!pip install cvxopt","bf9a4613":"from cvxopt import matrix\nclass HYP_SVM(object):\n\n    def __init__(self, kernel=gaussian_kernel, C=None):\n        self.kernel = kernel\n        self.C = C\n        if self.C is not None: self.C = float(self.C)\n    def m_func(self, X_train,X_test, y):\n        n_samples, n_features = X_train.shape \n        nt_samples, nt_features= X_test.shape\n        self.K = np.zeros((n_samples, n_samples))\n        for i in range(n_samples):\n            for j in range(n_samples):\n                self.K[i,j] = gaussian_kernel(X_train[i], X_train[j])\n               # print(K[i,j])\n        X_train=np.asarray(X_train)\n        X_test=np.asarray(X_test)\n        K1 = np.zeros((n_samples, n_samples))\n        for i in range(n_samples):\n            for j in range(n_samples):\n                K1[i,j] = gaussian_kernel(X_train[i], X_train[j])\n               # print(K[i,j])\n        print(K1.shape)\n        P = cvxopt.matrix(np.outer(y,y) * self.K)\n        q = cvxopt.matrix(np.ones(n_samples) * -1)\n        A = cvxopt.matrix(y, (1,n_samples))\n        A = matrix(A, (1,n_samples), 'd') #changes done\n        b = cvxopt.matrix(0.0)\n        #print(P,q,A,b)\n        if self.C is None:\n            G = cvxopt.matrix(np.diag(np.ones(n_samples) * -1))\n            h = cvxopt.matrix(np.zeros(n_samples))\n            \n        else:\n            tmp1 = np.diag(np.ones(n_samples) * -1)\n            tmp2 = np.identity(n_samples)\n            G = cvxopt.matrix(np.vstack((tmp1, tmp2)))\n            tmp1 = np.zeros(n_samples)\n            tmp2 = np.ones(n_samples) * self.C\n            h = cvxopt.matrix(np.hstack((tmp1, tmp2)))\n        # solve QP problem\n        solution = cvxopt.solvers.qp(P, q, G, h, A, b)\n        print(solution['status'])\n        # Lagrange multipliers\n        a = np.ravel(solution['x'])\n        a_org = np.ravel(solution['x'])\n        # Support vectors have non zero lagrange multipliers\n        sv = a > 1e-5\n        #print(sv.shape)\n        ind = np.arange(len(a))[sv]\n        self.a_org=a\n        self.a = a[sv]\n        self.sv = X_train[sv]\n        self.sv_y = y[sv]\n        self.sv_yorg=y\n        self.kernel = gaussian_kernel\n        X_train=np.asarray(X_train)\n        b = 0\n        for n in range(len(self.a)):\n            b += self.sv_y[n]\n            b -= np.sum(self.a * self.sv_y * self.K[ind[n],sv])\n        b \/= len(self.a)\n       # print(self.a_org[1])\n        #print(self.a_org.shape,self.sv_yorg.shape,K.shape)\n        w_phi=0\n        total=0\n        for n in range(len(self.a_org)):\n            w_phi = self.a_org[n] * self.sv_yorg[n] * K1[n] \n        self.d_hyp=np.zeros(n_samples)\n        for n in range(len(self.a_org)):\n            self.d_hyp += self.sv_yorg[n]*(w_phi+b)\n        func=np.zeros((n_samples))\n        func=np.asarray(func)\n        typ=1\n        if(typ==1):\n            for i in range(n_samples):\n                func[i]=1-(self.d_hyp[i]\/(np.amax(self.d_hyp[i])+0.000001))\n        beta=0.2\n        if(typ==2):\n            for i in range(n_samples):\n                func[i]=2\/(1+beta*self.d_hyp[i])\n        r_max=103\/4074\n        r_min=1\n        self.m=func[0:103]*r_min\n        print(self.m.shape)\n        self.m=np.append(self.m,func[103:4177]*r_max)\n        print(self.m.shape)\n        \n ##############################################################################\n\n\n    def fit(self, X_train,X_test, y):\n        self.kernel = gaussian_kernel\n        n_samples, n_features = X_train.shape \n        nt_samples, nt_features = X_test.shape\n        # Gram matrix\n\n        print(self.K.shape)\n\n        P = cvxopt.matrix(np.outer(y,y) * self.K)\n        q = cvxopt.matrix(np.ones(n_samples) * -1)\n        A = cvxopt.matrix(y, (1,n_samples))\n        A = matrix(A, (1,n_samples), 'd') #changes done\n        b = cvxopt.matrix(0.0)\n        #print(P,q,A,b)\n        if self.C is None:\n            G = cvxopt.matrix(np.diag(np.ones(n_samples) * -1))\n            h = cvxopt.matrix(np.zeros(n_samples))\n            \n        else:\n            tmp1 = np.diag(np.ones(n_samples) * -1)\n            tmp2 = np.identity(n_samples)\n            G = cvxopt.matrix(np.vstack((tmp1, tmp2)))\n            tmp1 = np.zeros(n_samples)\n            tmp2 = np.ones(n_samples) * self.C\n            h = cvxopt.matrix(np.hstack((tmp1, tmp2)))\n        # solve QP problem\n        solution = cvxopt.solvers.qp(P, q, G, h, A, b)\n        print(solution['status'])\n        # Lagrange multipliers\n        a = np.ravel(solution['x'])\n        a_org = np.ravel(solution['x'])\n        # Support vectors have non zero lagrange multipliers\n        for i in range(n_samples):\n            sv=np.logical_or(self.a_org <self.m, self.a_org > 1e-5)\n        #print(sv.shape)\n        ind = np.arange(len(a))[sv]\n        self.a = a[sv]\n        self.sv = X_train[sv]\n        self.sv_y = y[sv]\n        #print(\"%d support vectors out of %d points\" % (len(self.a), n_samples))\n\n        # Intercept\n        self.b = 0\n        for n in range(len(self.a)):\n            self.b += self.sv_y[n]\n            self.b -= np.sum(self.a * self.sv_y * self.K[ind[n],sv])\n        self.b \/= len(self.a)\n        print(self.b)\n\n        # Weight vector\n        if self.kernel == gaussian_kernel:\n            self.w = np.zeros(n_features)\n            for n in range(len(self.a)):\n                self.w += self.a[n] * self.sv_y[n] * self.sv[n]\n        else :\n            self.w = None        \n        \n    def project(self, X):\n        if self.w is None:\n            return np.dot(X, self.w) + self.b\n        else:\n            y_predict = np.zeros(len(X))\n            X=np.asarray(X)\n            for i in range(len(X)):\n                s = 0\n                for a, sv_y, sv in zip(self.a, self.sv_y, self.sv):\n                    s += a * sv_y * gaussian_kernel(X[i], sv)\n                y_predict[i] = s\n              #  print(y_predict[i])\n            return y_predict + self.b\n\n    def predict(self, X):\n        return np.sign(self.project(X))","3b91ce58":"\n\nif __name__ == \"__main__\":\n    import pylab as pl           \n    def hyp_svm():\n        \n        clf = HYP_SVM(C=100.0)\n        typ=2\n        clf.m_func(X_train,X_test,labels_xray)\n        clf.fit(X_train,X_test, labels_xray)\n        y_predict = clf.predict(X_test)\n        gm(y_predict,labels2_xray)\n        correct = np.sum(y_predict == y_test)\n        print(\"%d out of %d predictions correct\" % (correct, len(y_predict)))\n        print(\"Accuracy\",correct\/len(y_predict))\n\n    hyp_svm()\n\n","08afbc3e":"# import convex optimization package\nfrom cvxopt import matrix as c_matrix\nfrom cvxopt import solvers as c_solvers\n\n# define guassian kernel (depends on distance)\n# K(X1,X2) = exponent(-sigma||X1-X1||^2)\n\ndef gaussian_kernel(xg, yg, sigma=100.0):\n    x=np.asarray(xg)\n    y=np.asarray(yg)\n    return np.exp((-np.linalg.norm(x-y)**2) \/ (2 * (sigma ** 2)))\n\n# define FSVM object\n\nclass FSVM(object):\n    \n    #object initialisation\n    def __init__(self, kernel = gaussian_kernel, C=None):\n        self.kernel = kernel\n        self.C = C\n        if self.C is not None: \n            self.C = float(self.C)\n    \n    #Fuzzy membership function\n    \n    def m_func(self, X, y, type = 1):\n        n_samples, n_featuers = X.shape\n        \n        # calculate gaussian kernels\n        \n        self.K = np.zeros((n_samples, n_samples))\n        for i in range(n_samples):\n            for j in range(n_samples):\n                self.K[i,j] = self.kernel(X[i], X[j])\n        \n        # defining variables for Quadratic problem\n        P = c_matrix(np.outer(y,y) *self.K)\n        q = c_matrix(np.ones(n_samples)*-1)\n        A = c_matrix(y, (1, n_samples))\n        A = c_matrix(A, (1, n_samples), 'd')\n        b = c_matrix(0.0)\n        \n        if self.C is None:\n            G = c_matrix(np.diag(np.ones(n_samples) * -1))\n            h = c_matrix(np.zeros(n_samples))\n        else:\n            tmp1 = np.diag(np.ones(n_samples) * -1)\n            tmp2 = np.identity(n_samples)\n            G = c_matrix(np.vstack((tmp1, tmp2)))\n            tmp1 = np.zeros(n_samples)\n            tmp2 = np.ones(n_samples) * self.C\n            h = c_matrix(np.hstack((tmp1, tmp2)))  \n        \n        # Solve the QP\n        \n        self.solution = c_solvers.qp(P,q,G,h,A,b)\n        print(self.solution['status'])                # check solution has been dfound\n        \n        #find Lagrange multipliers\n        lm = np.ravel(self.solution['x'])\n        lm_org = np.ravel(self.solution['x'])\n        # Since svm have non legrange multipliers, assign non zero values\n        supvec = lm > 1e-5\n        index = np.arange(len(lm))[supvec]\n        self.lm_org = lm\n        self.lm = lm[supvec]         # number of support vectors\n        self.supvec = X[supvec]\n        self.supvec_y = y[supvec]\n        self.supvec_yorg = y\n        print(\"%d support vectors out of %d points\" % (len(self.lm), n_samples))\n        \n        X = np.asarray(X)\n        \n        #calculate intercept \n        \n        self.ic = 0\n        for i in range(len(self.lm)):\n            self.ic += self.supvec_y[i]\n            self.ic -= np.sum(self.lm * self.supvec_y * self.K[index[i],supvec])\n        self.ic \/= len(self.lm)\n        \n        # calculate weight vector\n        w_phi = 0\n        total = 0\n        for i in range(len(self.lm_org)):\n            w_phi = self.lm_org[i] * self.supvec_yorg[i] * self.K[i]\n        \n        #hyperplane (to calculate value)\n        self.hyp = np.zeros(n_samples)\n        for i in range (len(self.lm_org)):\n            self.hyp += self.supvec_yorg[i] * (w_phi+self.ic)\n        \n        # fuzzy membership functions - linear and exponential\n        f_func = np.zeros((n_samples))\n        f_func = np.asarray(f_func)\n        beta = 0.8\n        if type ==1:\n            for i in range(n_samples):\n                f_func[i] = 1 - self.hyp[i]\/(self.hyp.max() + 0.00001)\n        else:\n            for i in range(n_samples):\n                f_func[i] = 2\/(1+beta*self.hyp[i])\n        \n        min_count =0\n        maj_count = 0\n        for i in range (len(y)):\n            if y[i] == 0:\n                min_count += 1;\n            else:\n                maj_count+=1;\n        r_pos = 1\n        r_neg = min_count\/maj_count #minority-to-majority class ratio\n        self.m = f_func[0:maj_count]*r_pos\n        self.m = np.append(self.m, f_func[maj_count:]*r_neg)\n        \n    # FIT FUNCTION\n        \n    def fit(self, X, y, kernel = gaussian_kernel):\n        self.m_func(X, y)\n        self.kernel = kernel\n        n_samples, n_features = X.shape\n        \n        # Gram matrix\n        Kfsvm = np.zeros((n_samples, n_samples))\n        for i in range(n_samples):\n            for j in range(n_samples):\n                Kfsvm[i,j] = gaussian_kernel(self.m[i], self.m[j])\n        \n        P = c_matrix(np.outer(y,y) * Kfsvm)\n        q = c_matrix(np.ones(n_samples) * -1)\n        A = c_matrix(y, (1,n_samples))\n        A = c_matrix(A, (1,n_samples), 'd') #changes done\n        b = c_matrix(0.0)\n        \n        if self.C is None:\n            G = c_matrix(np.diag(np.ones(n_samples) * -1))\n            h = c_matrix(np.zeros(n_samples))\n            \n        else:\n            tmp1 = np.diag(np.ones(n_samples) * -1)\n            tmp2 = np.identity(n_samples)\n            G = c_matrix(np.vstack((tmp1, tmp2)))\n            tmp1 = np.zeros(n_samples)\n            tmp2 = np.ones(n_samples) * self.C\n            h = c_matrix(np.hstack((tmp1, tmp2)))\n        \n        fsolution = c_solvers.qp(P, q, G, h, A, b)\n        print(fsolution['status'])\n        lm = np.ravel(fsolution['x'])\n        lm_org = np.ravel(fsolution['x'])\n        # Support vectors have non zero lagrange multipliers\n        #  Use m matrix calculated in m_func\n        for i in range(n_samples):\n            supvec=np.logical_or(lm_org <self.m, lm_org > 1e-5)\n        \n        index = np.arange(len(lm))[supvec]\n        self.lm = lm[supvec]\n        self.supvec = self.m[supvec]\n        self.supvec_y = y[supvec]\n\n        # Intercept\n        self.ic = 0\n        for i in range(len(self.lm)):\n            self.ic += self.supvec_y[i]\n            self.ic -= np.sum(self.lm * self.supvec_y * Kfsvm[index[i],supvec])\n        self.ic \/= len(self.lm)\n\n        # Weight vector\n        self.w = None        \n        \n    def project(self, X):\n        y_predict = np.zeros(len(X))\n        X=np.asarray(X)\n        for i in range(len(X)):\n            s = 0\n            for lm, supvec_y, supvec in zip(self.lm, self.supvec_y, self.supvec):\n                s += lm * supvec_y * gaussian_kernel(X[i], supvec)\n            y_predict[i] = s\n        return y_predict + self.ic\n\n    def predict(self, X):\n        return np.sign(self.project(X))","01467641":"labels_xray = np.array(labels_xray)","c9824679":"type(rescaledX_xray)","b785089d":"clf = FSVM(C = 1)\nclf.fit(rescaledX_xray, labels_xray)\ny_predfsvm = clf.predict(rescaledX_validation_xray)","75c68ce0":"labels2_xray = np.array(labels2_xray)","3c98245e":"tp = np.sum(y_predfsvm == labels2_xray)\nfp = 0\nfor i in range(len(labels2_xray)):\n    if y_predfsvm[i] == 1 and labels2_xray[i] != 1:\n        fp += 1\nprint(\"%d out of %d predictions correct\" % (tp, len(labels2_xray)))\nprint(\"Accuracy\",tp\/len(labels2_xray))\nprint(\"Precision\", tp\/(tp+fp))","7bf0beb0":"X_train.shape","4bc66144":"X_train = np.array(rescaledX_xray.astype(int))","37376ee7":"X_test = np.array(rescaledX_validation_xray.astype(int))","2d4fbe06":"import FuzzyClassificator","ab71cfbb":"mod = FuzzyClassificator()","c0fa32b5":"from sklearn import svm\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.datasets import make_classification\nfrom sklearn.naive_bayes import GaussianNB\n\nclf = [svm.SVC(probability=True),svm.SVC(kernel=\"rbf\",probability=True),RandomForestClassifier(),KNeighborsClassifier(),AdaBoostClassifier(),GaussianNB(),XGBClassifier()]\n\ndic_xray={}\nfor i in clf:\n    dic_xray[i]={}\nfor i in clf:\n    dic_xray[i]['Accuracy']=[]\n    dic_xray[i]['f1_score']=[]\n    dic_xray[i]['Recall']=[]\n    \n    dic_xray[i]['Precision']=[]\n    dic_xray[i]['Sensitivity']=[]\n    dic_xray[i]['Specificity']=[]\n\nfor i in clf:\n  model_clf = i\n  pred_prob_train = []\n  pred_prob_test = []\n  model_clf.fit(rescaledX_xray,labels_xray)\n\n  pred = model_clf.predict(rescaledX_xray)\n  pred_proba_train = model_clf.predict_proba(rescaledX_xray)\n  pred_prob_train.append(pred_proba_train)\n  pred_proba_test = model_clf.predict_proba(rescaledX_validation_xray)\n  pred_prob_test.append(pred_proba_test)\n  pred_val =  model_clf.predict(rescaledX_validation_xray)\n  #print(classification_report(labels2,pred_val))\n  cc = confusion_matrix(labels2_xray,pred_val)\n  print(i)\n  print('\\n')\n  print('Accuracy :  ',  accuracy_score(labels2_xray, pred_val)*100)\n  print('f1_score :  ', f1_score(labels2_xray, pred_val)*100)\n  print('Recall :   ', recall_score(labels2_xray, pred_val)*100)\n  print('Precission :  ', precision_score(labels2_xray, pred_val)*100)\n  print('Sensiticity : ',(cc[1][1]\/(cc[1][1]+cc[1][0]))*100 )\n  print('Specificity : ',(cc[0][0]\/(cc[0][0]+cc[0][1]))*100 )\n  dic_xray[i]['Accuracy'].append(accuracy_score(labels2_xray, pred_val)*100)\n  dic_xray[i]['f1_score'].append(f1_score(labels2_xray, pred_val)*100)\n  dic_xray[i]['Recall'].append(recall_score(labels2_xray,pred_val)*100)\n  dic_xray[i]['Precision'].append(precision_score(labels2_xray,pred_val)*100)\n  dic_xray[i]['Sensitivity'].append((cc[1][1]\/(cc[1][1]+cc[1][0]))*100) \n  dic_xray[i]['Specificity'].append((cc[0][0]\/(cc[0][0]+cc[0][1]))*100)\n  print('*'*20)\n  print('\\n')","1a63afc4":"dic_xray","c8993b13":"from numpy import loadtxt\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n# load the dataset\nrescaledX_xray = np.array(rescaledX_xray)\nlabels_xray = np.array(labels_xray)\n# define the keras model\nmodel = Sequential()\nmodel.add(Dense(16, input_dim=(1536), activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n# compile the keras model\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n# fit the keras model on the dataset\nmodel.fit(rescaledX_xray, labels_xray, epochs=150, batch_size=10)\n# evaluate the keras model\n_, accuracy = model.evaluate(rescaledX_xray, labels_xray)\nprint('Accuracy: %.2f' % (accuracy*100))\n\npred_nerual = model.predict_classes(rescaledX_validation_xray)\npred_nerual = pred_nerual[:,0]\ncc = confusion_matrix(labels2_xray,pred_nerual)\nprint('Accuracy :  ',  accuracy_score(labels2_xray, pred_nerual)*100)\nprint('f1_score :  ', f1_score(labels2_xray, pred_nerual)*100)\nprint('Recall :   ', recall_score(labels2_xray, pred_nerual)*100)\nprint('Precission :  ', precision_score(labels2_xray, pred_nerual)*100)\nprint('Sensiticity : ',(cc[1][1]\/(cc[1][1]+cc[1][0]))*100 )\nprint('Specificity : ',(cc[0][0]\/(cc[0][0]+cc[0][1]))*100 )\n#dic['neural']={}\n#dic['neural']['Accuracy']=accuracy_score(labels2, pred_val)*100\n#dic['neural']['f1_score']=f1_score(labels2, pred_val)*100\n#dic['neural']['Recall']=recall_score(labels2,pred_val)*100\n#dic['neural']['Precision']=precision_score(labels2,pred_val)*100\n#dic['neural']['Sensitivity']=(cc[1][1]\/(cc[1][1]+cc[1][0]))*100 \n#dic['neural']['Specificity']=(cc[0][0]\/(cc[0][0]+cc[0][1]))*100 ","02af22ac":"model_clf = clf[6]\npred_prob_train = []\npred_prob_test = []\nmodel_clf.fit(rescaledX_xray,labels_xray)\nfor _ in range(10):\n  pred = model_clf.predict(rescaledX_xray)\n  pred_proba_train = model_clf.predict_proba(rescaledX_xray)\n  pred_prob_train.append(pred_proba_train)\n  pred_proba_test = model_clf.predict_proba(rescaledX_validation_xray)\n  pred_prob_test.append(pred_proba_test)\n  pred_val =  model_clf.predict(rescaledX_validation_xray)\n  #print(classification_report(labels2,pred_val))\n  #cc = confusion_matrix(labels2,pred_val)\npred_prob_zero= 0 \npred_prob_one= 0 \nfor i in range(10):\n  pred_prob_zero += pred_prob_train[i][:,0]\n  pred_prob_one += pred_prob_train[i][:,1]\npred_prob_zero \/= 10\npred_prob_one \/=10\n\nlog_value = []\nfor i,j in zip(pred_prob_zero, pred_prob_one):\n  if i == 0 :\n    log = -j*math.log(j,2)\n  elif j==0:\n    log = -i*math.log(i,2)\n  elif i!=0 and j!=0:\n    \n      log = -(i * math.log(i,2) + j * math.log(j,2))\n  log_value.append(log)\n\nprint(np.mean(log_value))","03fc5f1e":"pred_prob_zero","85130375":"base_model = tf.keras.applications.DenseNet121(weights = 'imagenet')","5292bbb4":"model_builder = tf.keras.applications.DenseNet121\nimg_size = (224, 224) #(299,299) Inception (224,224) ResNet50\npreprocess_input = keras.applications.xception.preprocess_input\ndecode_predictions = keras.applications.xception.decode_predictions\n\nlast_conv_layer_name = 'relu'#'block5_conv4'#\"conv_7b_ac\"\n\n# The local path to our target image\nimg_path = \"\/kaggle\/input\/covid-xray-dataset\/COVID\/COVID-1018.png\"\n\ndisplay(Image(img_path))\n\n","b384c561":"def get_img_array(img_path, size):\n    # `img` is a PIL image of size 299x299\n    img = keras.preprocessing.image.load_img(img_path, target_size=size)\n    # `array` is a float32 Numpy array of shape (299, 299, 3)\n    array = keras.preprocessing.image.img_to_array(img)\n    # We add a dimension to transform our array into a \"batch\"\n    # of size (1, 299, 299, 3)\n    array = np.expand_dims(array, axis=0)\n    return array\n\n\ndef make_gradcam_heatmap(img_array, model, last_conv_layer_name, pred_index=None):\n    # First, we create a model that maps the input image to the activations\n    # of the last conv layer as well as the output predictions\n    grad_model = tf.keras.models.Model(\n        [model.inputs], [model.get_layer(last_conv_layer_name).output, model.output]\n    )\n\n    # Then, we compute the gradient of the top predicted class for our input image\n    # with respect to the activations of the last conv layer\n    with tf.GradientTape() as tape:\n        last_conv_layer_output, preds = grad_model(img_array)\n        if pred_index is None:\n            pred_index = tf.argmax(preds[0])\n        class_channel = preds[:, pred_index]\n\n    # This is the gradient of the output neuron (top predicted or chosen)\n    # with regard to the output feature map of the last conv layer\n    grads = tape.gradient(class_channel, last_conv_layer_output)\n\n    # This is a vector where each entry is the mean intensity of the gradient\n    # over a specific feature map channel\n    pooled_grads = tf.reduce_mean(grads, axis=(0, 1, 2))\n\n    # We multiply each channel in the feature map array\n    # by \"how important this channel is\" with regard to the top predicted class\n    # then sum all the channels to obtain the heatmap class activation\n    last_conv_layer_output = last_conv_layer_output[0]\n    heatmap = last_conv_layer_output @ pooled_grads[..., tf.newaxis]\n    heatmap = tf.squeeze(heatmap)\n\n    # For visualization purpose, we will also normalize the heatmap between 0 & 1\n    heatmap = tf.maximum(heatmap, 0) \/ tf.math.reduce_max(heatmap)\n    return heatmap.numpy()\n","283c4c72":"img_array = preprocess_input(get_img_array(img_path, size=img_size))\n\n# Make model\nmodel = model_builder(weights=\"imagenet\")\n\n# Remove last layer's softmax\n#model.layers[-1].activation = None\n\n# Print what the top predicted class is\npreds = model.predict(img_array)\nprint(\"Predicted:\", decode_predictions(preds, top=1)[0])\n\n# Generate class activation heatmap\n","603f4f9c":"def save_and_display_gradcam(img_path, heatmap, cam_path=\"imagenet_xray.jpg\", alpha=0.4):\n    # Load the original image\n    img = keras.preprocessing.image.load_img(img_path)\n    img = keras.preprocessing.image.img_to_array(img)\n\n    # Rescale heatmap to a range 0-255\n    heatmap = np.uint8(255 * heatmap)\n\n    # Use jet colormap to colorize heatmap\n    jet = cm.get_cmap(\"jet\")\n\n    # Use RGB values of the colormap\n    jet_colors = jet(np.arange(256))[:, :3]\n    jet_heatmap = jet_colors[heatmap]\n\n    # Create an image with RGB colorized heatmap\n    jet_heatmap = keras.preprocessing.image.array_to_img(jet_heatmap)\n    jet_heatmap = jet_heatmap.resize((img.shape[1], img.shape[0]))\n    jet_heatmap = keras.preprocessing.image.img_to_array(jet_heatmap)\n\n    # Superimpose the heatmap on original image\n    superimposed_img = jet_heatmap * alpha + img\n    superimposed_img = keras.preprocessing.image.array_to_img(superimposed_img)\n\n    # Save the superimposed image\n    superimposed_img.save(cam_path)\n\n    # Display Grad CAM\n    display(Image(cam_path))\n\n\n\n","2e47513a":"heatmap = make_gradcam_heatmap(img_array, model, last_conv_layer_name)\n\n# Display heatmap\nplt.matshow(heatmap)\nplt.colorbar()\nplt.savefig('heatmap_imagenet_xray.png')\nplt.show()\nsave_and_display_gradcam(img_path, heatmap)","b387066d":"alpha=0.4\ncam_path=\"resnet_xray.jpg\"\nimg = keras.preprocessing.image.load_img(img_path)\nimg = keras.preprocessing.image.img_to_array(img)\n\n# Rescale heatmap to a range 0-255\nheatmap = np.uint8(255 * heatmap)\n\n# Use jet colormap to colorize heatmap\njet = cm.get_cmap(\"jet\")\n\n# Use RGB values of the colormap\njet_colors = jet(np.arange(256))[:, :3]\njet_heatmap = jet_colors[heatmap]\n\n# Create an image with RGB colorized heatmap\njet_heatmap = keras.preprocessing.image.array_to_img(jet_heatmap)\njet_heatmap = jet_heatmap.resize((img.shape[1], img.shape[0]))\njet_heatmap = keras.preprocessing.image.img_to_array(jet_heatmap)\n\n# Superimpose the heatmap on original image\nsuperimposed_img = jet_heatmap * alpha + img\nsuperimposed_img = keras.preprocessing.image.array_to_img(superimposed_img)\n\n# Save the superimposed image\nsuperimposed_img.save(cam_path)\n\n# Display Grad CAM\ndisplay(Image(cam_path))","ed7562a3":"plt.imshow(jet_heatmap)","14bf5637":"plt.imshow(superimposed_img,cmap='RdBu')\nplt.colorbar()","f3272111":"model_builder = tf.keras.applications.ResNet50(weights='imagenet')\nimg_size = (224, 224) #(299,299) Inception\npreprocess_input = keras.applications.xception.preprocess_input\ndecode_predictions = keras.applications.xception.decode_predictions\n\nlast_conv_layer_name = \"conv5_block3_out\"\n\n# The local path to our target image\nimg_path = \"\/kaggle\/input\/covid-xray-dataset\/COVID\/COVID-1018.png\"","b2840189":"import csv\nwith open('Results_resnet_xray.csv', 'w') as csv_file:  \n    writer = csv.writer(csv_file)\n    for key, value in dic_xray.items():\n       writer.writerow([key, value])","bce84980":"probs=[]\n","95abba9b":"from numpy import loadtxt\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# load the dataset\nrescaledX = np.array(rescaledX_xray)\nlabels = np.array(labels_xray)\n# define the keras model\nmodel = Sequential()\nmodel.add(Dense(16, input_dim=(2048), activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='softmax'))\nrescaledX_xray = np.array(rescaledX_xray)\nlabels = np.array(labels)\n# compile the keras model\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n# fit the keras model on the dataset\nmodel.fit(rescaledX, labels, epochs=10, batch_size=10)\n# evaluate the keras model\nprobs, accuracy = model.evaluate(rescaledX_xray, labels_xray)\nprint('Accuracy: %.2f' % (accuracy*100))\n\npred_nerual = model.predict(rescaledX_validation_xray)\n#pred_nerual = pred_nerual[:,0]\ncc = confusion_matrix(labels2_xray,pred_nerual)\nprint('Accuracy :  ',  accuracy_score(labels2_xray, pred_nerual)*100)\nprint('f1_score :  ', f1_score(labels2_xray, pred_nerual)*100)\nprint('Recall :   ', recall_score(labels2_xray, pred_nerual)*100)\nprint('Precission :  ', precision_score(labels2_xray, pred_nerual)*100)\nprint('Sensiticity : ',(cc[1][1]\/(cc[1][1]+cc[1][0]))*100 )\nprint('Specificity : ',(cc[0][0]\/(cc[0][0]+cc[0][1]))*100 )\n#dic['neural']={}\n#dic['neural']['Accuracy']=accuracy_score(labels2, pred_val)*100\n#dic['neural']['f1_score']=f1_score(labels2, pred_val)*100\n#dic['neural']['Recall']=recall_score(labels2,pred_val)*100\n#dic['neural']['Precision']=precision_score(labels2,pred_val)*100\n#dic['neural']['Sensitivity']=(cc[1][1]\/(cc[1][1]+cc[1][0]))*100 \n#dic['neural']['Specificity']=(cc[0][0]\/(cc[0][0]+cc[0][1]))*100 ","9aac860c":"model.metrics_names","e7f3d1b3":"for dire ,_,filename in os.walk('\/kaggle\/input\/'):\n    print(dire)","53964a4d":"root_folder='\/kaggle\/input\/covid-xray-dataset'\nfor subdir in os.listdir(root_folder)[1:]:\n    print('subdir',os.path.join(root_folder, subdir))\n    ","86afb16c":"count_covid = 0\ncount_non_covid = 0\nfor subdir in os.listdir(root_folder)[1:]:\n          print(subdir)\n          print('subdir',os.path.join(root_folder, subdir))\n          for file_count, file_name in enumerate( sorted(glob(os.path.join(root_folder, subdir)+ '\/*'),key=len) ):\n              if subdir =='1NonCOVID':\n                  count_non_covid +=1\n                  if count_non_covid ==2500:\n                        break\n              elif subdir == '2COVID':\n                  count_covid +=1\n                  if count_covid == 2500:\n                    break\n              \n          \nprint(count_non_covid)\nprint(count_covid)\nprint(count_non_covid+count_covid)","8cd27238":"def data_prep():\n  root_folder = '\/kaggle\/input\/large-covid19-ct-slice-dataset\/curated_data\/curated_data'\n  diction = {}\n\n  \n\n  dir_images = []\n  dir_label = []\n  \n  count_covid = 0\n  count_non_covid = 0\n    \n  for subdir in os.listdir(root_folder)[1:]:\n          print('subdir',os.path.join(root_folder, subdir))\n          for file_count, file_name in enumerate( sorted(glob(os.path.join(root_folder, subdir)+ '\/*'),key=len) ):\n              \n              img = cv2.imread(file_name)\n              img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n              dir_images.append(img)\n              dir_label.append(subdir)\n              if subdir =='1NonCOVID':\n                  count_non_covid +=1\n                  if count_non_covid ==1500:\n                    break\n              elif subdir == '2COVID':\n                  count_covid +=1\n                  if count_covid == 1500:\n                    break\n              \n\n  diction_train = {}\n  diction_test = {}\n  dir_label_shuf_train = []\n  dir_images_shuf_train = []\n  index_shuf = list(range(len(dir_label)))\n  shuffle(index_shuf)\n\n  train_shuf = index_shuf[0:int(len(index_shuf))]\n  \n\n  for i in train_shuf:\n      dir_label_shuf_train.append(dir_label[i])\n      dir_images_shuf_train.append(dir_images[i])    \n          \n  diction_train['X_tr'] = dir_images_shuf_train\n  diction_train['y_tr'] = dir_label_shuf_train\n\n\n\n        \n        \n  print(len(diction_train['X_tr']))\n  ##print(diction_train['y_tr'])\n  print(diction_train['X_tr'][0].shape)\n\n\n  \n\n  with open('training.pickle', 'wb') as handle:\n      pickle.dump(diction_train, handle, protocol=pickle.HIGHEST_PROTOCOL)\n\n  \n\n  nrows=224\n  ncolumns=224\n  channels=1\n\n  batch_size=16\n  epochs=1\n  # Number of classes\n  num_cpu = multiprocessing.cpu_count()\n  num_classes = 2\n  torch.manual_seed(8)\n  torch.cuda.manual_seed(8)\n  np.random.seed(8)\n  random.seed(8)\n\n\n\n\n  device = torch.device(\"cpu\")\n\n  dbfile = open('training.pickle', 'rb')      \n  db = pickle.load(dbfile) \n  X_train,y_train = db['X_tr'],db['y_tr']\n\n  X = []\n  #X_train=np.reshape(np.array(X_train),[len(X_train),])\n  for img in list(range(0,len(X_train))):\n    if X_train[img].ndim>=3:\n        X.append(np.moveaxis(cv2.resize(X_train[img][:,:,:3], (nrows,ncolumns),interpolation=cv2.INTER_CUBIC), -1, 0))\n    else:\n        smimg= cv2.cvtColor(X_train[img],cv2.COLOR_GRAY2RGB)\n        X.append(np.moveaxis(cv2.resize(smimg, (nrows,ncolumns),interpolation=cv2.INTER_CUBIC), -1, 0))\n    \n    if y_train[img]=='2COVID':\n        y_train[img]=1\n    elif y_train[img]=='1NonCOVID' :\n        y_train[img]=0\n    else:\n        continue\n\n  x = np.array(X)\n  y_train = np.array(y_train)\n\n\n  outputs_all = []\n  labels_all = []\n\n  X_train, X_val, y_train, y_val = train_test_split(x, y_train, test_size=0.2, random_state=2)\n\n  #base_model = tf.keras.applications.VGG19(weights = 'imagenet')\n  #model = Model(inputs=base_model.input,outputs = base_model.get_layer('block5_pool').output)\n  base_model = tf.keras.applications.ResNet50(weights = 'imagenet')\n  model = Model(inputs=base_model.input,outputs = base_model.get_layer('avg_pool').output)\n  #base_model = tf.keras.applications.DenseNet121(weights='imagenet')\n  #model = Model(inputs=base_model.input,outputs = base_model.get_layer('avg_pool').output)\n  #base_model = tf.keras.applications.InceptionResNetV2(weights='imagenet')\n  #model = Model(inputs=base_model.input,outputs = base_model.get_layer('avg_pool').output)\n\n  feature_dict={0:[],1:[]}\n  feature_dict_val={0:[],1:[]}\n  classes=['0','1']\n  for j in range(len(X_train)):\n    xx = X_train[j].transpose(2,1,0)\n    xx = np.expand_dims(xx,axis=0)\n  \n    feature_dict[y_train[j]].append(model.predict(xx))\n\n\n  for j in range(len(X_val)):\n    xx = X_val[j].transpose(2,1,0)\n    xx = np.expand_dims(xx,axis=0)\n  \n    feature_dict_val[y_val[j]].append(model.predict(xx))\n\n\n  pickle.dump(feature_dict, open('features_till_flatten.pkl', \"wb\" ))\n  pickle.dump(feature_dict_val, open('features_till_flatten_val.pkl', \"wb\" ))\n\n\n\n  labels = []\n  feature_list = []\n  feature_dict=pickle.load(open('features_till_flatten.pkl','rb'))\n  names = [0,1]\n  for cat,features  in feature_dict.items():\n      labels.extend([int(cat)] * len(features))\n      feature_list.append(features)\n  feature_list = np.concatenate(feature_list)\n  feature_list1=[]\n  for i in range(0,len(feature_list)):\n      feature_list1.append(feature_list[i].ravel())\n  \n\n  labels2 = []\n  feature_list_val = []\n  feature_dict_val=pickle.load(open('features_till_flatten_val.pkl','rb'))\n  names = [0,1]\n  for cat,features  in feature_dict_val.items():\n      labels2.extend([int(cat)] * len(features))\n      feature_list_val.append(features)\n  feature_list_val = np.concatenate(feature_list_val)\n  feature_list2=[]\n  for i in range(0,len(feature_list_val)):\n      feature_list2.append(feature_list_val[i].ravel())\n\n  scaler = StandardScaler().fit(feature_list1)\n  rescaledX = scaler.transform(feature_list1)\n  rescaledX_validation = scaler.transform(feature_list2)\n  \n  return rescaledX, rescaledX_validation, labels, labels2 \n","4b0c419c":"rescaledX, rescaledX_validation, labels,labels2 = data_prep()\n","9d4e25c8":"from sklearn import svm\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.datasets import make_classification\nfrom sklearn.naive_bayes import GaussianNB\nfrom xgboost import XGBClassifier","8125956d":"clf = [svm.SVC(probability=True),svm.SVC(kernel=\"rbf\",probability=True),RandomForestClassifier(),KNeighborsClassifier(),AdaBoostClassifier(),GaussianNB(),XGBClassifier()]","a75c0feb":"dic={}","d0a567db":"for i in clf:\n  model_clf = i\n  dic[i]={}\n  pred_prob_train = []\n  pred_prob_test = []\n  model_clf.fit(rescaledX,labels)\n\n  pred = model_clf.predict(rescaledX)\n  pred_proba_train = model_clf.predict_proba(rescaledX)\n  pred_prob_train.append(pred_proba_train)\n  pred_proba_test = model_clf.predict_proba(rescaledX_validation)\n  pred_prob_test.append(pred_proba_test)\n  pred_val =  model_clf.predict(rescaledX_validation)\n  #print(classification_report(labels2,pred_val))\n  cc = confusion_matrix(labels2,pred_val)\n  print(i)\n  print('\\n')\n  print('Accuracy :  ',  accuracy_score(labels2, pred_val)*100)\n  print('f1_score :  ', f1_score(labels2, pred_val)*100)\n  print('Recall :   ', recall_score(labels2, pred_val)*100)\n  print('Precission :  ', precision_score(labels2, pred_val)*100)\n  print('Sensiticity : ',(cc[1][1]\/(cc[1][1]+cc[1][0]))*100 )\n  print('Specificity : ',(cc[0][0]\/(cc[0][0]+cc[0][1]))*100 )\n  dic[i]['Accuracy']=accuracy_score(labels2, pred_val)*100\n  dic[i]['f1_score']=f1_score(labels2, pred_val)*100\n  dic[i]['Recall']=recall_score(labels2,pred_val)*100\n  dic[i]['Precision']=precision_score(labels2,pred_val)*100\n  dic[i]['Sensitivity']=(cc[1][1]\/(cc[1][1]+cc[1][0]))*100 \n  dic[i]['Specificity']=(cc[0][0]\/(cc[0][0]+cc[0][1]))*100 \n  print('*'*20)\n  print('\\n')","6f393f67":"from numpy import loadtxt\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n# load the dataset\nrescaledX = np.array(rescaledX)\nlabels = np.array(labels)\n# define the keras model\nmodel = Sequential()\nmodel.add(Dense(16, input_dim=(2048), activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n# compile the keras model\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n# fit the keras model on the dataset\nmodel.fit(rescaledX, labels, epochs=150, batch_size=10)\n# evaluate the keras model\n_, accuracy = model.evaluate(rescaledX, labels)\nprint('Accuracy: %.2f' % (accuracy*100))\n\npred_nerual = model.predict_classes(rescaledX_validation)\npred_nerual = pred_nerual[:,0]\ncc = confusion_matrix(labels2,pred_nerual)\nprint('Accuracy :  ',  accuracy_score(labels2, pred_nerual)*100)\nprint('f1_score :  ', f1_score(labels2, pred_nerual)*100)\nprint('Recall :   ', recall_score(labels2, pred_nerual)*100)\nprint('Precission :  ', precision_score(labels2, pred_nerual)*100)\nprint('Sensiticity : ',(cc[1][1]\/(cc[1][1]+cc[1][0]))*100 )\nprint('Specificity : ',(cc[0][0]\/(cc[0][0]+cc[0][1]))*100 )\n#dic['neural']={}\n#dic['neural']['Accuracy']=accuracy_score(labels2, pred_val)*100\n#dic['neural']['f1_score']=f1_score(labels2, pred_val)*100\n#dic['neural']['Recall']=recall_score(labels2,pred_val)*100\n#dic['neural']['Precision']=precision_score(labels2,pred_val)*100\n#dic['neural']['Sensitivity']=(cc[1][1]\/(cc[1][1]+cc[1][0]))*100 \n#dic['neural']['Specificity']=(cc[0][0]\/(cc[0][0]+cc[0][1]))*100 ","cc26f6cb":"model_clf = clf[2]\npred_prob_train = []\npred_prob_test = []\nmodel_clf.fit(rescaledX,labels)\nfor _ in range(10):\n  pred = model_clf.predict(rescaledX)\n  pred_proba_train = model_clf.predict_proba(rescaledX)\n  pred_prob_train.append(pred_proba_train)\n  pred_proba_test = model_clf.predict_proba(rescaledX_validation)\n  pred_prob_test.append(pred_proba_test)\n  pred_val =  model_clf.predict(rescaledX_validation)\n  #print(classification_report(labels2,pred_val))\n  #cc = confusion_matrix(labels2,pred_val)\npred_prob_zero= 0 \npred_prob_one= 0 \nfor i in range(10):\n  pred_prob_zero += pred_prob_train[i][:,0]\n  pred_prob_one += pred_prob_train[i][:,1]\npred_prob_zero \/= 10\npred_prob_one \/=10\n\nlog_value = []\nfor i,j in zip(pred_prob_zero, pred_prob_one):\n  log = i * np.log(i) + j * np.log(j)\n  log_value.append(log)\nprint(np.mean(log_value))","30aa7b30":"#base_model = tf.keras.applications.VGG19(weights = 'imagenet')\n#model = Model(inputs=base_model.input,outputs = base_model.get_layer('block5_pool').output)\n#base_model = tf.keras.applications.ResNet50(weights = 'imagenet')\n#model = Model(inputs=base_model.input,outputs = base_model.get_layer('avg_pool').output)\n#base_model = tf.keras.applications.DenseNet121(weights='imagenet')\n#model = Model(inputs=base_model.input,outputs = base_model.get_layer('avg_pool').output)\nbase_model = tf.keras.applications.InceptionResNetV2(weights='imagenet')\n#model = Model(inputs=base_model.input,outputs = base_model.get_layer('avg_pool').output)\nbase_model.summary()","cc626da1":"model_builder = tf.keras.applications.InceptionResNetV2\nimg_size = (299, 299)\npreprocess_input = keras.applications.xception.preprocess_input\ndecode_predictions = keras.applications.xception.decode_predictions\n\nlast_conv_layer_name = \"conv_7b_ac\"#'block5_conv4'#'relu'##\"conv_7b_ac\"#'conv5_block3_out'#\"conv_7b_ac\"\n\n# The local path to our target image\nimg_path = \"\/kaggle\/input\/large-covid19-ct-slice-dataset\/curated_data\/curated_data\/2COVID\/13_Bjorke_100.png\"\n\n\nplt.savefig('normal.png')\ndisplay(Image(img_path))","0ec9e668":"def get_img_array(img_path, size):\n    # `img` is a PIL image of size 299x299\n    img = keras.preprocessing.image.load_img(img_path, target_size=size)\n    # `array` is a float32 Numpy array of shape (299, 299, 3)\n    array = keras.preprocessing.image.img_to_array(img)\n    # We add a dimension to transform our array into a \"batch\"\n    # of size (1, 299, 299, 3)\n    array = np.expand_dims(array, axis=0)\n    return array\n\n\ndef make_gradcam_heatmap(img_array, model, last_conv_layer_name, pred_index=None):\n    # First, we create a model that maps the input image to the activations\n    # of the last conv layer as well as the output predictions\n    grad_model = tf.keras.models.Model(\n        [model.inputs], [model.get_layer(last_conv_layer_name).output, model.output]\n    )\n\n    # Then, we compute the gradient of the top predicted class for our input image\n    # with respect to the activations of the last conv layer\n    with tf.GradientTape() as tape:\n        last_conv_layer_output, preds = grad_model(img_array)\n        if pred_index is None:\n            pred_index = tf.argmax(preds[0])\n        class_channel = preds[:, pred_index]\n\n    # This is the gradient of the output neuron (top predicted or chosen)\n    # with regard to the output feature map of the last conv layer\n    grads = tape.gradient(class_channel, last_conv_layer_output)\n\n    # This is a vector where each entry is the mean intensity of the gradient\n    # over a specific feature map channel\n    pooled_grads = tf.reduce_mean(grads, axis=(0, 1, 2))\n\n    # We multiply each channel in the feature map array\n    # by \"how important this channel is\" with regard to the top predicted class\n    # then sum all the channels to obtain the heatmap class activation\n    last_conv_layer_output = last_conv_layer_output[0]\n    heatmap = last_conv_layer_output @ pooled_grads[..., tf.newaxis]\n    heatmap = tf.squeeze(heatmap)\n\n    # For visualization purpose, we will also normalize the heatmap between 0 & 1\n    heatmap = tf.maximum(heatmap, 0) \/ tf.math.reduce_max(heatmap)\n    return heatmap.numpy()\n","3e02af85":"img_array = preprocess_input(get_img_array(img_path, size=img_size))\n\n# Make model\nmodel = model_builder(weights=\"imagenet\")\n\n# Remove last layer's softmax\n#model.layers[-1].activation = None\n\n# Print what the top predicted class is\npreds = model.predict(img_array)\nprint(\"Predicted:\", decode_predictions(preds, top=1)[0])\n\n# Generate class activation heatmap\n","e22c079d":"def save_and_display_gradcam(img_path, heatmap, cam_path=\"imagenet.jpg\", alpha=0.4):\n    # Load the original image\n    img = keras.preprocessing.image.load_img(img_path)\n    img = keras.preprocessing.image.img_to_array(img)\n\n    # Rescale heatmap to a range 0-255\n    heatmap = np.uint8(255 * heatmap)\n\n    # Use jet colormap to colorize heatmap\n    jet = cm.get_cmap(\"jet\")\n\n    # Use RGB values of the colormap\n    jet_colors = jet(np.arange(256))[:, :3]\n    jet_heatmap = jet_colors[heatmap]\n\n    # Create an image with RGB colorized heatmap\n    jet_heatmap = keras.preprocessing.image.array_to_img(jet_heatmap)\n    jet_heatmap = jet_heatmap.resize((img.shape[1], img.shape[0]))\n    jet_heatmap = keras.preprocessing.image.img_to_array(jet_heatmap)\n\n    # Superimpose the heatmap on original image\n    superimposed_img = jet_heatmap * alpha + img\n    superimposed_img = keras.preprocessing.image.array_to_img(superimposed_img)\n\n    # Save the superimposed image\n    superimposed_img.save(cam_path)\n\n    # Display Grad CAM\n    display(Image(cam_path))\n\n\n\n","65d30081":"heatmap = make_gradcam_heatmap(img_array, model, last_conv_layer_name)\n\n# Display heatmap\nplt.matshow(heatmap)\nplt.colorbar()\nplt.savefig('heatmap_imagenet.png')\nplt.show()\nsave_and_display_gradcam(img_path, heatmap)","72f190ff":"# 10 epochs\n# learning rate = 0.0001\n# dimension reduction algo","c4e603f3":"# CT Scan","002238b0":"# GradCAM generation","afe3b3ea":"# FSVM","1190d0d4":"# Nueral Network","bf4f6883":"# Various Classifiers","a91e1df9":"### X_RAY"}}