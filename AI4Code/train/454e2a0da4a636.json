{"cell_type":{"471b411d":"code","40f2d499":"code","4cc885dd":"code","c66a1e40":"code","836f0864":"code","1ee7de0d":"code","96c50cf8":"code","d9134dae":"code","73ce44c2":"code","d67c528e":"code","64be8376":"code","30721e62":"code","563a4396":"code","7c99b201":"code","6083b1fe":"code","d12e366f":"code","2fc00f9d":"code","fe883ea2":"code","d55da82a":"code","499faf55":"code","85df347a":"markdown","4cd979d6":"markdown","ae052295":"markdown","f486fbe1":"markdown","71a14ca7":"markdown","948f45df":"markdown","080659a0":"markdown","caa85907":"markdown","98a78044":"markdown","d8293912":"markdown","23c9ed5d":"markdown","a765b67f":"markdown","e491442e":"markdown"},"source":{"471b411d":"# Importing the libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\nplt.style.use('fivethirtyeight')\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.models import Sequential\nfrom keras.layers import Dense, LSTM, Dropout, GRU, Bidirectional\nimport math\nfrom sklearn.metrics import mean_squared_error","40f2d499":"# First, we get the data\ndataset = pd.read_csv('..\/input\/IBM_2006-01-01_to_2018-01-01.csv', index_col='Date', parse_dates=['Date'])\ndataset.head()","4cc885dd":"# Checking for missing values\ntraining_set = dataset[:'2016'].iloc[:,1:2].values\ntest_set = dataset['2017':].iloc[:,1:2].values\n","c66a1e40":"# We have chosen 'High' attribute for prices. Let's see what it looks like\ndataset[\"High\"][:'2016'].plot(figsize=(16,4),legend=True)\ndataset[\"High\"]['2017':].plot(figsize=(16,4),legend=True)\nplt.legend(['Training set (Before 2017)','Test set (2017 and beyond)'])\nplt.title('IBM stock price')\nplt.show()","836f0864":"# Scaling the training set\nsc = MinMaxScaler(feature_range=(0,1))\ntraining_set_scaled = sc.fit_transform(training_set)","1ee7de0d":"# Since LSTMs store long term memory state, we create a data structure with 60 timesteps and 1 output\n# So for each element of training set, we have 60 previous training set elements \nX_train = []\ny_train = []\nfor i in range(60,2769):\n    X_train.append(training_set_scaled[i-60:i,0])\n    y_train.append(training_set_scaled[i,0])\nX_train, y_train = np.array(X_train), np.array(y_train)","96c50cf8":"# Reshaping X_train for efficient modelling\nX_train = np.reshape(X_train, (X_train.shape[0],X_train.shape[1],1))\nX_train.shape","d9134dae":"# The LSTM architecture\nregressor = Sequential()\n# First LSTM layer with Dropout regularisation\nregressor.add(LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1],1)))\nregressor.add(Dropout(0.2))\n# Second LSTM layer\nregressor.add(LSTM(units=50, return_sequences=True))\nregressor.add(Dropout(0.2))\n# Third LSTM layer\nregressor.add(LSTM(units=50, return_sequences=True))\nregressor.add(Dropout(0.2))\n# Fourth LSTM layer\nregressor.add(LSTM(units=50))\nregressor.add(Dropout(0.2))\n# The output layer\nregressor.add(Dense(units=1))\n\n# Compiling the RNN\nregressor.compile(optimizer='rmsprop',loss='mean_squared_error')\n# Fitting to the training set\nregressor.fit(X_train,y_train,epochs=50,batch_size=32)","73ce44c2":"# Now to get the test set ready in a similar way as the training set.\n# The following has been done so forst 60 entires of test set have 60 previous values which is impossible to get unless we take the whole \n# 'High' attribute data for processing\ndataset_total = pd.concat((dataset[\"High\"][:'2016'],dataset[\"High\"]['2017':]),axis=0)\ninputs = dataset_total[len(dataset_total)-len(test_set) - 60:].values\ninputs = inputs.reshape(-1,1)\ninputs  = sc.transform(inputs)\ninputs.shape","d67c528e":"# Preparing X_test and predicting the prices\nX_test = []\nfor i in range(60,311):\n    X_test.append(inputs[i-60:i,0])\nX_test = np.array(X_test)\nX_test = np.reshape(X_test, (X_test.shape[0],X_test.shape[1],1))\npredicted_stock_price = regressor.predict(X_test)\npredicted_stock_price = sc.inverse_transform(predicted_stock_price)","64be8376":"# Visualizing the results\nplt.plot(test_set, color='red',label='Real IBM Stock Price')\nplt.plot(predicted_stock_price, color='blue',label='Predicted IBM Stock Price')\nplt.title('IBM Stock Price Prediction(LSTM)')\nplt.xlabel('Time')\nplt.ylabel('IBM Stock Price')\nplt.legend()\nplt.show()","30721e62":"# Evaluating our model\nimport math\nfrom sklearn.metrics import mean_squared_error\nrmse = math.sqrt(mean_squared_error(test_set, predicted_stock_price))\nprint(\"The root mean squared error is {}.\".format(rmse))","563a4396":"# The GRU architecture\nregressorGRU = Sequential()\n# First GRU layer with Dropout regularisation\nregressorGRU.add(GRU(units=50, return_sequences=True, input_shape=(X_train.shape[1],1)))\nregressorGRU.add(Dropout(0.2))\n# Second GRU layer\nregressorGRU.add(GRU(units=50, return_sequences=True))\nregressorGRU.add(Dropout(0.2))\n# Third GRU layer\nregressorGRU.add(GRU(units=50, return_sequences=True))\nregressorGRU.add(Dropout(0.2))\n# Fourth GRU layer\nregressorGRU.add(GRU(units=50))\nregressorGRU.add(Dropout(0.2))\n# The output layer\nregressorGRU.add(Dense(units=1))\n\n# Compiling the RNN\nregressorGRU.compile(optimizer='adam',loss='mean_squared_error')\n# Fitting to the training set\nregressorGRU.fit(X_train,y_train,epochs=50,batch_size=32)","7c99b201":"# Preparing X_test and predicting the prices\nX_test = []\nfor i in range(60,311):\n    X_test.append(inputs[i-60:i,0])\nX_test = np.array(X_test)\nX_test = np.reshape(X_test, (X_test.shape[0],X_test.shape[1],1))\nGRU_predicted_stock_price = regressorGRU.predict(X_test)\nGRU_predicted_stock_price = sc.inverse_transform(GRU_predicted_stock_price)","6083b1fe":"# Visualizing the results\nplt.plot(test_set, color='red',label='Real IBM Stock Price')\nplt.plot(GRU_predicted_stock_price, color='blue',label='Predicted IBM Stock Price')\nplt.title('IBM Stock Price Prediction(GRU)')\nplt.xlabel('Time')\nplt.ylabel('IBM Stock Price')\nplt.legend()\nplt.show()","d12e366f":"# Evaluating GRU\nrmse = math.sqrt(mean_squared_error(test_set, GRU_predicted_stock_price))\nprint(\"The root mean squared error is {}.\".format(rmse))","2fc00f9d":"# The LSTM architecture\nregressorBi = Sequential()\n# First LSTM layer with Dropout regularisation\nregressorBi.add(Bidirectional(LSTM(units=50, return_sequences=True), input_shape=(X_train.shape[1],1), merge_mode='concat'))\nregressorBi.add(Dropout(0.2))\n# Second LSTM layer\nregressorBi.add(Bidirectional(LSTM(units=50, return_sequences=True)))\nregressorBi.add(Dropout(0.2))\n# Third LSTM layer\nregressorBi.add(Bidirectional(LSTM(units=50, return_sequences=True)))\nregressorBi.add(Dropout(0.2))\n# Fourth LSTM layer\nregressorBi.add(Bidirectional(LSTM(units=50)))\nregressorBi.add(Dropout(0.2))\n# The output layer\nregressorBi.add(Dense(units=1))\n\n# Compiling the RNN\nregressorBi.compile(optimizer='rmsprop',loss='mean_squared_error')\n# Fitting to the training set\nregressorBi.fit(X_train,y_train,epochs=50,batch_size=32)","fe883ea2":"# Preparing X_test and predicting the prices\nX_test = []\nfor i in range(60,311):\n    X_test.append(inputs[i-60:i,0])\nX_test = np.array(X_test)\nX_test = np.reshape(X_test, (X_test.shape[0],X_test.shape[1],1))\nBi_predicted_stock_price = regressor# Preparing X_test and predicting the prices\nX_test = []\nfor i in range(60,311):\n    X_test.append(inputs[i-60:i,0])\nX_test = np.array(X_test)\nX_test = np.reshape(X_test, (X_test.shape[0],X_test.shape[1],1))\nBi_predicted_stock_price = regressorBi.predict(X_test)\nBi_predicted_stock_price = sc.inverse_transform(Bi_predicted_stock_price)","d55da82a":"# Visualizing the results\nplt.plot(test_set, color='red',label='Real IBM Stock Price')\nplt.plot(Bi_predicted_stock_price, color='blue',label='Predicted IBM Stock Price')\nplt.title('IBM Stock Price Prediction(Bi-LSTM)')\nplt.xlabel('Time')\nplt.ylabel('IBM Stock Price')\nplt.legend()\nplt.show()","499faf55":"# Evaluating BiLSTM\nrmse = math.sqrt(mean_squared_error(test_set, Bi_predicted_stock_price))\nprint(\"The root mean squared error is {}.\".format(rmse))","85df347a":"#### This is certainly not the end. Stay tuned for more stuff!","4cd979d6":"## Components of LSTMs\nSo the LSTM cell contains the following components\n* Forget Gate \u201cf\u201d ( a neural network with sigmoid)\n* Candidate layer \u201cC\"(a NN with Tanh)\n* Input Gate \u201cI\u201d ( a NN with sigmoid )\n* Output Gate \u201cO\u201d( a NN with sigmoid)\n* Hidden state \u201cH\u201d ( a vector )\n* Memory state \u201cC\u201d ( a vector)\n\n* Inputs to the LSTM cell at any step are X<sub>t<\/sub> (current input) , H<sub>t-1<\/sub> (previous hidden state ) and C<sub>t-1<\/sub> (previous memory state).  \n* Outputs from the LSTM cell are H<sub>t<\/sub> (current hidden state ) and C<sub>t<\/sub> (current memory state)","ae052295":"So, GRU works better than LSTM in this case. Bidirectional LSTM is also a good way so make the model stronger. But this may vary for different data sets. **Applying both LSTM and GRU together gave even better results.** ","f486fbe1":"## Working of gates in LSTMs\nFirst, LSTM cell takes the previous memory state C<sub>t-1<\/sub> and does element wise multiplication with forget gate (f) to decide if  present memory state C<sub>t<\/sub>. If forget gate value is 0 then previous memory state is completely forgotten else f forget gate value is 1 then previous memory state is completely passed to the cell ( Remember f gate gives values between 0 and 1 ).\n\n**C<sub>t<\/sub> = C<sub>t-1<\/sub> * f<sub>t<\/sub>**\n\nCalculating the new memory state: \n\n**C<sub>t<\/sub> = C<sub>t<\/sub> + (I<sub>t<\/sub> * C\\`<sub>t<\/sub>)**\n\nNow, we calculate the output:\n\n**H<sub>t<\/sub> = tanh(C<sub>t<\/sub>)**","71a14ca7":"Now, even though RNNs are quite powerful, they suffer from  **Vanishing gradient problem ** which hinders them from using long term information, like they are good for storing memory 3-4 instances of past iterations but larger number of instances don't provide good results so we don't just use regular RNNs. Instead, we use a better variation of RNNs: **Long Short Term Networks(LSTM).**\n\n### What is Vanishing Gradient problem?\nVanishing gradient problem is a difficulty found in training artificial neural networks with gradient-based learning methods and backpropagation. In such methods, each of the neural network's weights receives an update proportional to the partial derivative of the error function with respect to the current weight in each iteration of training. The problem is that in some cases, the gradient will be vanishingly small, effectively preventing the weight from changing its value. In the worst case, this may completely stop the neural network from further training. As one example of the problem cause, traditional activation functions such as the hyperbolic tangent function have gradients in the range (0, 1), and backpropagation computes gradients by the chain rule. This has the effect of multiplying n of these small numbers to compute gradients of the \"front\" layers in an n-layer network, meaning that the gradient (error signal) decreases exponentially with n while the front layers train very slowly.\n\nSource: [Wikipedia](https:\/\/en.wikipedia.org\/wiki\/Vanishing_gradient_problem)\n\n<img src=\"https:\/\/cdn-images-1.medium.com\/max\/1460\/1*FWy4STsp8k0M5Yd8LifG_Q.png\">\n\nSource: [Medium](https:\/\/medium.com\/@anishsingh20\/the-vanishing-gradient-problem-48ae7f501257)","948f45df":"Truth be told. That's one awesome score. \n\nLSTM is not the only kind of unit that has taken the world of Deep Learning by a storm. We have **Gated Recurrent Units(GRU)**. It's not known, which is better: GRU or LSTM becuase they have comparable performances. GRUs are easier to train than LSTMs.\n\n## Gated Recurrent Units\nIn simple words, the GRU unit does not have to use a memory unit to control the flow of information like the LSTM unit. It can directly makes use of the all hidden states without any control. GRUs have fewer parameters and thus may train a bit faster or need less data to generalize. But, with large data, the LSTMs with higher expressiveness may lead to better results.\n\nThey are almost similar to LSTMs except that they have two gates: reset gate and update gate. Reset gate determines how to combine new input to previous memory and update gate determines how much of the previous state to keep. Update gate in GRU is what input gate and forget gate were in LSTM. We don't have the second non linearity in GRU before calculating the outpu, .neither they have the output gate.\n\nSource: [Quora](https:\/\/www.quora.com\/Whats-the-difference-between-LSTM-and-GRU-Why-are-GRU-efficient-to-train)\n\n<img src=\"https:\/\/cdnpythonmachinelearning.azureedge.net\/wp-content\/uploads\/2017\/11\/GRU.png?x31195\">","080659a0":"## Things to remember\n* Please upvote(like button) and share this kernel if you like it. This would increase its visibility and more people will be able to learn about the awesomeness of RNNs.\n* I will use keras for this kernel. If you are not familiar with keras or neural networks, refer to this kernel\/tutorial of mine:  https:\/\/www.kaggle.com\/thebrownviking20\/intro-to-keras-with-breast-cancer-data-ann\n* Your doubts and curiousity about time series can be taken care of here: https:\/\/www.kaggle.com\/thebrownviking20\/everything-you-can-do-with-a-time-series\n* Don't let the explanations intimidate you. It's simpler than you think.\n* Eventually, I will add more applications of LSTMs. So stay tuned for more!\n* The code is inspired from Kirill Eremenko's Deep Learning Course: https:\/\/www.udemy.com\/deeplearning\/","caa85907":"# Aim and motivation\nThe primary reason I have chosen to create this kernel is to practice and use RNNs for various tasks and applications. First of which is time series data. RNNs have truly changed the way sequential data is forecasted. My goal here is to create the ultimate reference for RNNs here on kaggle.","98a78044":"# Bi-directional LSTM\nBi-directional RNNs use a finite sequence to predict or label each element of the sequence based on the element's past and future contexts. This is done by concatenating the outputs of two RNNs, one processing the sequence from left to right, the other one from right to left. The combined outputs are the predictions of the teacher-given target signals. This technique proved to be especially useful when combined with LSTM RNNs.","d8293912":"## Long Short Term Memory(LSTM)\nLong short-term memory (LSTM) units (or blocks) are a building unit for layers of a recurrent neural network (RNN). A RNN composed of LSTM units is often called an LSTM network. A common LSTM unit is composed of a cell, an input gate, an output gate and a forget gate. The cell is responsible for \"remembering\" values over arbitrary time intervals; hence the word \"memory\" in LSTM. Each of the three gates can be thought of as a \"conventional\" artificial neuron, as in a multi-layer (or feedforward) neural network: that is, they compute an activation (using an activation function) of a weighted sum. Intuitively, they can be thought as regulators of the flow of values that goes through the connections of the LSTM; hence the denotation \"gate\". There are connections between these gates and the cell.\n\nThe expression long short-term refers to the fact that LSTM is a model for the short-term memory which can last for a long period of time. An LSTM is well-suited to classify, process and predict time series given time lags of unknown size and duration between important events. LSTMs were developed to deal with the exploding and vanishing gradient problem when training traditional RNNs.\n\nSource: [Wikipedia](https:\/\/en.wikipedia.org\/wiki\/Long_short-term_memory)\n\n<img src=\"https:\/\/cdn-images-1.medium.com\/max\/1600\/0*LyfY3Mow9eCYlj7o.\">\n\nSource: [Medium](https:\/\/codeburst.io\/generating-text-using-an-lstm-network-no-libraries-2dff88a3968)\n\nThe best LSTM explanation on internet: https:\/\/medium.com\/deep-math-machine-learning-ai\/chapter-10-1-deepnlp-lstm-long-short-term-memory-networks-with-math-21477f8e4235\n\nRefer above link for deeper insights.","23c9ed5d":"### And now we get to the code...\nI will use LSTMs for predicting the price of stocks of IBM for the year 2017","a765b67f":"## Recurrent Neural Networks\nIn a recurrent neural network we store the output activations from one or more of the layers of the network. Often these are hidden later activations. Then, the next time we feed an input example to the network, we include the previously-stored outputs as additional inputs. You can think of the additional inputs as being concatenated to the end of the \u201cnormal\u201d inputs to the previous layer. For example, if a hidden layer had 10 regular input nodes and 128 hidden nodes in the layer, then it would actually have 138 total inputs (assuming you are feeding the layer\u2019s outputs into itself \u00e0 la Elman) rather than into another layer). Of course, the very first time you try to compute the output of the network you\u2019ll need to fill in those extra 128 inputs with 0s or something.\n\nSource: [Quora](https:\/\/www.quora.com\/What-is-a-simple-explanation-of-a-recurrent-neural-network)\n<img src=\"https:\/\/cdn-images-1.medium.com\/max\/1600\/1*NKhwsOYNUT5xU7Pyf6Znhg.png\">\n\nSource: [Medium](https:\/\/medium.com\/ai-journal\/lstm-gru-recurrent-neural-networks-81fe2bcdf1f9)\n\nLet me give you the best explanation of Recurrent Neural Networks that I found on internet: https:\/\/www.youtube.com\/watch?v=UNmqTiOnRfg&t=3s","e491442e":"#### I was going to cover text generation using LSTM but already an excellent kernel by [sban](https:\/\/www.kaggle.com\/shivamb) on the mentioned topic exists. Link for that kernel here: https:\/\/www.kaggle.com\/shivamb\/beginners-guide-to-text-generation-using-lstms"}}