{"cell_type":{"93444e77":"code","99a3790b":"code","a8a3c8e0":"code","c10ae5a1":"code","04ce5251":"code","fb832408":"code","190c8a67":"code","370d1f7a":"code","c2de58d2":"code","f72690bf":"code","e8551505":"code","6b7a53f2":"code","36b231c8":"code","f9f7aadf":"code","b6521fb1":"code","05889863":"code","d3ae63a8":"code","c3f0b4bf":"code","e93b7ee8":"code","24781dd9":"code","fbe73cde":"code","eb96f1fd":"code","f82f24a9":"code","87d441e0":"code","8bc96d57":"code","0b48ed56":"code","e2d76c9f":"code","41479300":"code","9e826e0f":"code","0b1a6754":"code","cd9aa346":"code","cd72abfa":"code","d64e14ae":"code","ed2d619e":"code","5ab20fa7":"code","f77fec67":"code","4b7e1d3a":"code","c102f204":"code","28b3cc63":"code","821073f9":"code","c42cf48a":"code","426b6392":"code","e4ded821":"code","683772dc":"code","156c0394":"code","5672c3c3":"code","77498f9e":"code","7e071096":"code","8c8cddf1":"code","7bcf5c1d":"code","a3ac138f":"code","ed3bc908":"code","c1c182c6":"code","9acf2b97":"code","744e1087":"code","6bb49121":"code","9848962e":"code","a953d697":"code","0677b8ed":"code","94130eb0":"code","475ab0f0":"code","f0f29f6c":"code","3dc76c2f":"code","7258540e":"code","e64518c4":"code","8e2f9299":"code","d2cb1aba":"code","414654d3":"code","c14a5887":"code","d4d7ca79":"markdown","cd609fde":"markdown","79182cbe":"markdown","cf696085":"markdown","f73d8802":"markdown","4daae261":"markdown","3853b0c9":"markdown","479fe006":"markdown","5a16d161":"markdown","49993a3d":"markdown","6491c6ec":"markdown","34905130":"markdown","d6bcc151":"markdown","95b80edf":"markdown","44751694":"markdown","485655ca":"markdown","7a648059":"markdown","0971e7aa":"markdown","09be5432":"markdown","5a77f02b":"markdown","c3f4f0a3":"markdown","c2198228":"markdown","b37c411c":"markdown"},"source":{"93444e77":"#For data processing\nimport pandas as pd\nimport numpy as np\n\n#For visualizations\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n#For ignoring warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")","99a3790b":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")\nresult = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")","a8a3c8e0":"train.tail()","c10ae5a1":"test.head()","04ce5251":"train_copy = train.copy()\ntrain_copy.describe()","fb832408":"test_copy = test.copy()\ntest_copy.describe()","190c8a67":"print('train Shape : ',train_copy.shape,'\\ntest shape : ',test_copy.shape)","370d1f7a":"train_copy.dtypes","c2de58d2":"test_copy.dtypes","f72690bf":"from IPython.display import Markdown, display\ndef printmd(a,b,c,d):\n    display(Markdown(a))\n    display(b)\n    display(Markdown(c))\n    display(d)\nprintmd ( '**sum of null data in train set :**\\n',train_copy.isnull().sum(),'\\n**sum of null data in test set :**\\n',test_copy.isnull().sum())","e8551505":"print('Number of Survived[0] and unsurvived[1] passengers : \\n',train_copy['Survived'].value_counts())","6b7a53f2":"final = pd.concat([train_copy,test_copy],axis = 0)\nfinal.drop(['Survived'],axis = 1,inplace = True)","36b231c8":"final.tail()","f9f7aadf":"final.shape","b6521fb1":"final['Age'].fillna(final['Age'].mean(), inplace=True)\nfinal['Age'].isnull().sum()","05889863":"final[\"Fare\"] = final[\"Fare\"].fillna(final[\"Fare\"].median())\nfinal['Fare'].isnull().sum()","d3ae63a8":"final['Fare'].dtypes","c3f0b4bf":"final[\"Fare\"] = final[\"Fare\"].map(lambda n: np.log(n) if n > 0 else 0)\nfinal['Fare'].head()","e93b7ee8":"new = final['Name'].str.split('.', n=1, expand = True)\nfinal['First'] = new[0]\nfinal['Last'] = new[1]\nnew1 = final['First'].str.split(',', n=1, expand = True)\nfinal['Last Name'] = new1[0]\nfinal['Title'] = new1[1]\nnew2 = final['Title'].str.split('', n=1, expand = True)","24781dd9":"final['Title'].value_counts()","fbe73cde":"final.drop(['First','Last','Name','Last Name'],axis = 1,inplace = True)","eb96f1fd":"final.replace(to_replace = [ ' Don', ' Rev', ' Dr', ' Mme',\n        ' Major', ' Sir', ' Col', ' Capt',' Jonkheer'], value = ' Honorary(M)', inplace = True)\nfinal.replace(to_replace = [ ' Ms', ' Lady', ' Mlle',' the Countess', ' Dona'], value = ' Honorary(F)', inplace = True)","f82f24a9":"final['Title'].value_counts()","87d441e0":"final = pd.get_dummies(final, columns = [\"Title\"])\n","8bc96d57":"final.head()","0b48ed56":"final[\"Family\"] = final[\"SibSp\"] + final[\"Parch\"] + 1","e2d76c9f":"final['Single'] = final['Family'].map(lambda s: 1 if s == 1 else 0)\nfinal['SmallF'] = final['Family'].map(lambda s: 1 if  s == 2  else 0)\nfinal['MedF'] = final['Family'].map(lambda s: 1 if 3 <= s <= 4 else 0)\nfinal['LargeF'] = final['Family'].map(lambda s: 1 if s >= 5 else 0)","41479300":"final['Embarked'].fillna(\"S\",inplace = True)","9e826e0f":"final = pd.get_dummies(final, columns = [\"Embarked\"], prefix=\"Embarked_from_\")\n","0b1a6754":"final.head()","cd9aa346":"final.Cabin.isnull().sum()","cd72abfa":"final.Cabin.value_counts()","d64e14ae":"final['Cabin_final'] = final['Cabin'].str[0]","ed2d619e":"final['Cabin_final'].fillna('Unknown',inplace = True)","5ab20fa7":"final['Cabin_final'].value_counts()","f77fec67":"final.drop(['Cabin'],axis = 1,inplace = True)","4b7e1d3a":"final = pd.get_dummies(final, columns = [\"Cabin_final\"],prefix=\"Cabin_\")","c102f204":"final.head()","28b3cc63":"final.drop(['Ticket'],axis = 1,inplace = True)","821073f9":"final.head()","c42cf48a":"final = pd.get_dummies(final, columns = [\"Sex\"],prefix=\"Gender_\")","426b6392":"final.head()","e4ded821":"final.drop(['PassengerId'],axis = 1,inplace = True)\nfinal.drop(['SibSp','Parch','Family'],axis = 1,inplace = True)","683772dc":"final.dtypes","156c0394":"final.isnull().sum()","5672c3c3":"final_train = final.copy()\nfinal_train =  final_train[:891]\nfinal_train = pd.concat([final_train,train_copy['Survived']],axis = 1)\nfinal_train.head()","77498f9e":"sns.countplot(x = 'Survived', data = final_train)","7e071096":"sns.countplot(x = 'Pclass', data = final_train)","8c8cddf1":"sns.countplot(x = 'Sex', data = train_copy)","7bcf5c1d":"plt.figure(figsize=(30,10))\nsns.countplot(x = 'Age', data = train_copy)","a3ac138f":"plt.figure(figsize=(15,8))\nsns.distplot(train_copy['Fare'], hist=True, rug=True)","ed3bc908":"sns.distplot(final['Fare'], hist=True, rug=True)","c1c182c6":"sns.catplot(x ='Survived', y ='SibSp', data = train_copy)","9acf2b97":"sns.catplot(x ='Survived', y ='Parch', data = train_copy)","744e1087":"sns.catplot(x = 'Sex',y='Survived',hue = 'Pclass', kind = 'bar', data = train_copy, col = 'Pclass', color = 'red')","6bb49121":"sns.catplot(x ='Survived', y ='Age', hue = 'Pclass',kind='violin',data = train_copy)","9848962e":"sns.catplot(x = 'SibSp',y='Survived',hue = 'Pclass',kind = 'violin', data = train_copy, palette = 'BuGn_r', col = 'Pclass')","a953d697":"sns.catplot(x = 'Parch',y='Survived',hue = 'Pclass',kind = 'violin', data = train_copy, palette = 'cubehelix', col = 'Pclass')","0677b8ed":"sns.catplot(x = 'Embarked',y='Survived',kind = 'point', data = train_copy, hue = 'Pclass', col = 'Pclass')","94130eb0":"correlation = final.copy()\nsur = pd.concat([train['Survived'],result['Survived']],axis = 0)\ncorrelation = pd.concat([correlation,sur],axis = 1)","475ab0f0":"plt.figure(figsize=(30,30))\nsns.heatmap(correlation.corr(), annot=True, linewidth=0.6, cmap='coolwarm')","f0f29f6c":"#The models trained\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import LinearSVC\nfrom sklearn import svm\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.naive_bayes import BernoulliNB\n\n#For Scaling and Hyperparameter Tuning\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import accuracy_score,confusion_matrix\nfrom sklearn import metrics\n\n#Voting Classifier\nfrom sklearn.ensemble import VotingClassifier ","3dc76c2f":"x_train = final[:891]\nfeature_scaler = MinMaxScaler()\nx_train = feature_scaler.fit_transform(x_train)\nx_train","7258540e":"x_test = final[891:]\nfeature_scaler = MinMaxScaler()\nx_test = feature_scaler.fit_transform(x_test)\nx_test","e64518c4":"y_train = train['Survived']","8e2f9299":"y_test = result['Survived']","d2cb1aba":"Log=LogisticRegression()\nLog.fit(x_train,y_train.values.ravel())\nmodel1pred = Log.predict(x_test)","414654d3":"accuracy=Log.score(x_test,y_test)\naccuracy","c14a5887":"output = pd.DataFrame({'PassengerId': test.PassengerId, 'Survived': model1pred})\noutput.to_csv('submission.csv', index=False)","d4d7ca79":"# Visualizations","cd609fde":"<h2> Bivariate Data Analysis <\/h2>","79182cbe":"This shows that fare is very unevenly distributed(Skewness is high) with the maximum value present in the first quantile (0-100). Therefore, I split them into groups.","cf696085":"**handle missing values**","f73d8802":"Shows the count of survived people. Less number of people survived as compared to people who didn't survive.","4daae261":"The order of passengers are highest for 3rd class, then 1st class and then came 2nd class at the lowest.","3853b0c9":"Concatenating the Training and Testing dataset for feature reengineering.","479fe006":"<h3> Logistic Regression<\/h3>","5a16d161":"The number of passengers survived on the basis of the siblings the passengers had on Titanic.","49993a3d":"<h3> Family Size=SibSp + Parch  <\/h3>\n","6491c6ec":"<h3> Name <\/h3>","34905130":"The line at the top shows the mean of the values and their standard deviation around the part.\nThis shows how many passengers survived according to the class they belonged to and their gender.\nFemales and Males of class 1 survived more.\nFemales of all classes survived more.","d6bcc151":"<h3>handle missing Cabin type <\/h3>\n","95b80edf":"<h2> Categorical Variables <\/h2>","44751694":"<h2>Explanation of Violin Plot<\/h2>\n\n![Violin Plot](https:\/\/images.ctfassets.net\/fi0zmnwlsnja\/sdfgtcRp16wTNOcRceGQm\/5bfcb73d2261d49ff20dd7857e0152b1\/Screen_Shot_2019-03-01_at_11.36.10_AM.png)\n\nViolin plots have many of the same summary statistics as box plots:\n\n* the white dot represents the median\n* the thick gray bar in the center represents the interquartile range\n* the thin gray line represents the rest of the distribution, except for points that are determined to be \u201coutliers\u201d using a method that is a function of the interquartile range.\n* the skinnier the plots, the lower the probability of values lying there.\n\n[For more info, Check -->](https:\/\/mode.com\/blog\/violin-plot-examples\/)","485655ca":"<h3> Handle missing Embarked values <\/h3>","7a648059":"This shows that more number of young people survived the crash of Titanic.","0971e7aa":"The distribution of age among the passengers and their count for particular number of age.","09be5432":"As you can see in the last row, the chances for Survival are highest for higher positive correlation value(Shown in descending order) :\n1. Gender - Female (.69)\n1. Title - Mrs (.43)\n1. Title - Miss (.42)\n1. Fare (.3)\n1. Medium Family (.19)\n\nAs you can see in the last row, the chances for Survival are lowest for lower negative correlation value(Shown in Ascending order) :\n1. Gender - Male (-.69)\n1. Title - Mr(-.65)\n1. Pclass (-.26)\n1. Single (Solo traveller) (-.22)\n1. Embarked from S (-.13)","5a77f02b":"# Feature Scaling\n","c3f4f0a3":"Data still evenly distributed.","c2198228":"The siblings of class 1 survived more than Class 2 and Class 1","b37c411c":"Count of males and females aboard the titanic."}}