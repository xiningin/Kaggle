{"cell_type":{"e42eb7c8":"code","78d9dc15":"code","60958402":"code","a827ed85":"code","ebc2cfe6":"code","fedd1464":"code","48ad048e":"code","17b8b65c":"code","3cbf8544":"code","4fd964bf":"code","ccb0cdb7":"code","604d62bc":"code","3b7f3143":"markdown","5bc88e75":"markdown","deab6224":"markdown","d8a359d2":"markdown","653c2975":"markdown","b3b11095":"markdown"},"source":{"e42eb7c8":"!pip install kaggle-environments -U > \/dev\/null 2>&1\n!cp -r ..\/input\/lux-ai-2021\/* .","78d9dc15":"import numpy as np\nimport json\nfrom pathlib import Path\nimport os\nimport random\nfrom tqdm.notebook import tqdm\nimport torch\nfrom torch import nn\nimport torch.nn.functional as F\nfrom torch.utils.data import Dataset, DataLoader\nimport torch.optim as optim\nfrom sklearn.model_selection import train_test_split","60958402":"def seed_everything(seed_value):\n    #random will be the same if getting the same seed_value \n    random.seed(seed_value)\n    np.random.seed(seed_value)\n    #Sets the seed for generating random numbers for the current GPU\n    torch.manual_seed(seed_value)\n    #set Python Hash Seed to a specific number,making it able to appear again\n    os.environ['PYTHONHASHSEED'] = str(seed_value)\n    \n    #indicate if cuda is available \n    if torch.cuda.is_available(): \n        #Sets the seed for generating random numbers for the current GPU\n        torch.cuda.manual_seed(seed_value)\n        #Sets the seed for generating random numbers on all GPUs.\n        torch.cuda.manual_seed_all(seed_value)\n        #if True, causes cuDNN to only use deterministic convolution algorithms\n        torch.backends.cudnn.deterministic = True\n        # if True, causes cuDNN to benchmark multiple convolution algorithms and select the fastest.\n        torch.backends.cudnn.benchmark = True\n\nseed = 42\nseed_everything(seed)","a827ed85":"def to_label(action):\n    #\u5c06action\u6309\u7167\u7a7a\u683c\u5206\u6210\u4e00\u4e2a\u957f\u4e3a3\u7684\u5b57\u7b26\u4e32\u5217\u8868\n    strs = action.split(' ')\n    unit_id = strs[1]\n    \n    if strs[0]==\"r\":\n        return 0,0,1,0,int(strs[1]),int(strs[2])\n    if strs[0]==\"bw\":\n        return 0,0,1,1,int(strs[1]),int(strs[2])\n    \n    #m\u4ee3\u8868move\uff0c\u8bf4\u660e\u662f\u4e00\u4e2a\u53ef\u52a8\u5355\u4f4d\n    if strs[0] == 'm':\n        #north\u3001south\u3001west\u3001east\n        label = {'c': None, 'n': 0, 's': 1, 'w': 2, 'e': 3}[strs[2]]\n    elif strs[0] == 'bcity':\n        label = 4\n    else:\n        label = None\n    #return unit_id, label, is_citytile, buildworker, x, y\n    return unit_id, label, 0, 0, 0, 0\n\n#\u5224\u65ad\u8d44\u6e90\u662f\u5426\u6240\u6709\u5355\u4f4d\u5168\u90e8\u8017\u5c3d\u7684\u51fd\u6570\uff08\u5373\u4e00\u65b9\u5168\u90e8\u6d88\u5931\u5728\u9ed1\u6697\u4e2d\uff0c\u6e38\u620f\u7ed3\u675f\uff09\ndef depleted_resources(obs):\n    for u in obs['updates']:\n        if u.split(' ')[0] == 'r':\n            return False\n    return True\n\n\ndef create_dataset_from_json(episode_dir, team_name='Toad Brigade'): \n    obses = {}\n    samples = []\n    append = samples.append\n    #\u4ece..\/input\/lux-ai-episodes\u5bfb\u627e\u8bad\u7ec3\u6a21\u578b\uff0c\u5e76\u52a0\u5165episodes\u4e2d\n    episodes = [path for path in Path(episode_dir).glob('*.json') if 'output' not in path.name]\n    #tqdm\u4e3a\u4e00\u4e2a\u663e\u793a\u8fdb\u5ea6\u6761\u7684\u5e93\uff0c\u4f7f\u5f97\u5904\u7406\u8fdb\u5ea6GUI\u5316\n    for filepath in tqdm(episodes): \n        with open(filepath) as f:\n            #json_load\u8868\u793a\u4ecejson\u6587\u4ef6\u4e2d\u8bfb\u53d6\u7684\u6570\u636e\u5f62\u6210\u7684\u5bf9\u8c61\n            json_load = json.load(f)\n\n        ep_id = json_load['info']['EpisodeId']\n        #\u8fd4\u56derewards\u6570\u7ec4\u6700\u5927\u503c\u7684\u7d22\u5f15\uff08\u672c\u8d28\u4e0a\u662f\u9009\u62e9\u6700\u540e\u5f97\u5206\u66f4\u9ad8\u7684player\u8fdb\u884c\u5b66\u4e60\uff09\n        index = np.argmax([r or 0 for r in json_load['rewards']])\n        #\u4ec5\u4f7f\u7528\u81ea\u5df1team\u5b9a\u4e49\u7684json\u6587\u4ef6\n        if json_load['info']['TeamNames'][index] != team_name:\n            continue\n        #\u5bf9\u4e00\u4e2ajson\u6587\u4ef6\u7684\u6bcf\u4e00\u6b65\u8fdb\u884c\u64cd\u4f5c\n        for i in range(len(json_load['steps'])-1):\n            #\u5982\u679c\u5728\u8be5\u6b65\u6267\u884c\u540e\u5b58\u5728\u8be5\"Active\"\u72b6\u6001\u8bf4\u660e\u6211\u65b9\u5b58\u6d3b\n            if json_load['steps'][i][index]['status'] == 'ACTIVE':\n                #\u5982\u679c\u8be5\u6b65\u72b6\u6001\u540e\u4f9d\u7136\u6211\u65b9active\uff0cload\u4e0b\u4e00\u6b65\u72b6\u6001\u7684\u6240\u6709\u52a8\u4f5c\uff0c\u653e\u5165actions\u4e2d\n                actions = json_load['steps'][i+1][index]['action']\n                #load\u5f53\u524d\u6b65\u9aa4\u540e\u7684\u5168\u5730\u56fe\u8d44\u6e90\u72b6\u6001\n                obs = json_load['steps'][i][0]['observation']\n                \n                if depleted_resources(obs):\n                    break\n                \n                obs['player'] = index\n                #\u5c06obs\u91cd\u65b0\u6574\u5408\u4e3a\u4e00\u4e2a\u5b57\u5178\n                obs = dict([\n                    (k,v) for k,v in obs.items() \n                    if k in ['step', 'updates', 'player', 'width', 'height']\n                ])\n                obs_id = f'{ep_id}_{i}'\n                #obses\u4e3a\u6240\u6709obs\u5b57\u5178\u7684\u5217\u8868\u96c6\u5408\n                obses[obs_id] = obs\n                                \n                for action in actions:\n                    #label\u4e3a\u5f53\u524d\u6267\u884c\u52a8\u4f5c\u5bf9\u5e94\u7684\u4e0b\u6807\n                    unit_id, label, is_citytile, buildworker, x, y = to_label(action)\n                    if label is not None:\n                        if (not is_citytile):\n                            #\u5982\u679c\u52a8\u4f5c\u6709\u65b9\u5411\u6216\u8005\u5f85\u5728city\u4e2d\uff0c\u90a3\u4e48\u6dfb\u52a0\u5230\u5217\u8868samples\u4e2d\uff0c\u5b9a\u4e49\u7684append\u7c7b\u4f3c\u4e8eC\u7684\u5b8f\u5b9a\u4e49\n                            append((0,0,0,obs_id, unit_id, label))\n                            #LuxDataset\u91cc\u9762\u8c03\u7528is_citytile, x, y, obs_id, unit_id, action = self.samples[idx]\n                        else:\n                            append((1,x,y,obs_id, 0, 5+buildworker))\n                        \n#\u6700\u7ec8\u5f97\u5230\u5168\u5730\u56fe\u6bcf\u4e00\u6b65\u6267\u884c\u540e\u7684\u5305\u62ec\u8d44\u6e90\u3001\u5404player\u5355\u4f4d\u7684\u5b57\u5178\u96c6\u5408obses,\u6240\u6709\u5b58\u6d3b\u5355\u4f4d\u6bcf\u4e00\u56de\u5408\u7684\u79fb\u52a8samples\n    return obses, samples","ebc2cfe6":"episode_dir = '..\/input\/lux-ai-episodes'\nobses, samples = create_dataset_from_json(episode_dir)\nprint('obses:', len(obses), 'samples:', len(samples))","fedd1464":"#\u5c06\u6240\u6709sample\u7684\u6700\u540e\u4e00\u4e2alabel\uff0c\u5373\u79fb\u52a8\u65b9\u5411\u5236\u4f5c\u6210list\nlabels = [sample[-1] for sample in samples]\nactions = ['north', 'south', 'west', 'east', 'bcity','research','buildworker']\n#\u6253\u5370\u5404\u4e2a\u65b9\u5411\u52a8\u4f5c\u7684\u603b\u6b21\u6570\nfor value, count in zip(*np.unique(labels, return_counts=True)):\n    print(f'{actions[value]:^7}: {count:>3}')","48ad048e":"# Input for Neural Network\ndef make_input(is_citytile, obs, unit_id, x, y):\n    #x,y coordiantes\n    width, height = obs['width'], obs['height']\n    #\/\/\u4e3a\u6574\u6570\u9664\u6cd5\uff0c\u76f8\u5f53\u4e8e\u903b\u8f91\u53f3\u79fb\u4e00\u4f4d\n    x_shift = (32 - width) \/\/ 2\n    y_shift = (32 - height) \/\/ 2\n    cities = {}\n    #\u5236\u4f5c\u4e00\u4e2a\u4e09\u7ef4\u5168\u4e3a\u6d6e\u70b9\u65700\u7684\u5217\u8868\n    b = np.zeros((19, 32, 32), dtype=np.float32)\n    \n    for update in obs['updates']:\n        #split\u65b9\u6cd5\u901a\u8fc7\u6307\u5b9a\u5206\u9694\u7b26\u5206\u9694\u5b57\u7b26\u4e32\n        strs = update.split(' ')\n        input_identifier = strs[0]\n        #a player unit which contains all information\n        #str[1]\u4e3a0\u65f6\u8868\u793aworker\uff0c\u4e3a1\u65f6\u8868\u793acart\n        if input_identifier == 'u':\n            x = int(strs[4]) + x_shift\n            y = int(strs[5]) + y_shift\n            wood = int(strs[7])\n            coal = int(strs[8])\n            uranium = int(strs[9])\n            if (unit_id == strs[3] and not is_citytile):\n                # Position and Cargo\n                b[:2, x, y] = (\n                    1,#\u5728\u7b2c0\u5c42\u6709unit\u7684\u4f4d\u7f6e\u6807\u4e0a1\n                    (wood + coal + uranium) \/ 100#\u5728\u7b2c1\u5c42\u5bf9\u5e94\u6709unit\u7684\u4f4d\u7f6e\uff0c\u6807\u8bb0\u5176\u88c5\u8f7d\u6750\u6599\u7684\u6bd4\u4f8b\n                )\n            else:\n                # Units\n                team = int(strs[2])\n                cooldown = float(strs[6])\n                idx = 2 + (team - obs['player']) % 2 * 3#\u7ed3\u679c\u4e3a2\u6216\u80055\n                #\u5728\u7b2c2\u5c42\u6807\u8bb0\u975eunit_id\u7684\u672c\u65b9\u5355\u4f4d\u4f4d\u7f6e\n                #\u5728\u7b2c5\u5c42\u6807\u8bb0\u975eunit_id\u7684\u654c\u65b9\u5355\u4f4d\u4f4d\u7f6e\n                #\u5728\u7b2c3\u5c42\u6807\u8bb0\u654c\u6211\u7684cooldown \/ 6\uff0c\u7b2c4\u5c42\u6807\u8bb0\u5176\u88c5\u8f7d\u6750\u6599\u7684\u6bd4\u4f8b\n                b[idx, x, y] = 1\n                b[3:5,x,y]=(\n                    cooldown \/ 6,\n                    (wood + coal + uranium) \/ 100\n                )\n                \n        elif input_identifier == 'ct':\n            # CityTiles\n            team = int(strs[1])\n            city_id = strs[2]\n            idx=0\n            x = int(strs[3]) + x_shift\n            y = int(strs[4]) + y_shift\n            if (is_citytile and x == int(strs[3]) and y == int(strs[4])):\n                b[6:8,x,y]=(\n                    1,\n                    cities[city_id]\n                )\n            else:\n                idx = 8 + (team - obs['player']) % 2 * 2\n            #\u7b2c8\u5c42\u6807\u8bb0\u672c\u65b9citytile\u4f4d\u7f6e\n            #\u7b2c10\u5c42\u6807\u8bb0\u654c\u65b9citytile\u4f4d\u7f6e\n            #\u7b2c9\u5c42\u6807\u8bb0\u8be5city\u5728\u9ed1\u591c\u80fd\u6301\u7eed\u51e0\u5929\n            #\u5982\u679c\u6070\u597d\u662fxy\u5904\u7684citytile\uff0c\u5c31\u653e\u57286\u548c7\u5c42\n            b[idx, x, y] = 1\n            b[9,x,y]=cities[city_id]\n        elif input_identifier == 'r':\n            # Resources\n            r_type = strs[1]\n            x = int(strs[2]) + x_shift\n            y = int(strs[3]) + y_shift\n            amt = int(float(strs[4]))\n            #\u7b2c12\u300113\u300114\u5c42\u5206\u522b\u653ewood\u3001coal\u3001uranium\u7684\u4f4d\u7f6e\u6781\u5176\u88c5\u8f7d\u6bd4\u4f8b\n            b[{'wood': 12, 'coal': 13, 'uranium': 14}[r_type], x, y] = amt \/ 800\n        elif input_identifier == 'rp':\n            # Research Points\n            team = int(strs[1])\n            rp = int(strs[2])\n            #\u7b2c15\u5c42\u653e\u6211\u65b9\u7814\u7a76\u70b9\u6570\n            #\u7b2c16\u5c42\u653e\u654c\u65b9\u7814\u7a76\u70b9\u6570\n            b[15 + (team - obs['player']) % 2, :] = min(rp, 200) \/ 200\n        elif input_identifier == 'c':\n            # Cities\u53c2\u6570\u8ba1\u7b97\n            city_id = strs[2]\n            fuel = float(strs[3])\n            lightupkeep = float(strs[4])\n            cities[city_id] = min(fuel \/ lightupkeep, 10) \/ 10\n    \n    # Day\/Night Cycle\n    b[11, :] = obs['step'] % 40 \/ 40\n    # Turns\n    b[17, :] = obs['step'] \/ 360\n    # Map Size\n    b[18, x_shift:32 - x_shift, y_shift:32 - y_shift] = 1\n\n    return b\n\n\nclass LuxDataset(Dataset):\n    def __init__(self, obses, samples):\n        self.obses = obses\n        self.samples = samples\n        \n    def __len__(self):\n        return len(self.samples)\n\n    def __getitem__(self, idx):\n        is_citytile, x, y, obs_id, unit_id, action = self.samples[idx]\n        obs = self.obses[obs_id]\n        state = make_input(is_citytile, obs, unit_id, x, y)\n        \n        return state, action","17b8b65c":"# Neural Network for Lux AI\n#class torch.nn.Module\u662f\u6240\u6709\u7f51\u7edc\u7684\u57fa\u7c7b\uff0c\u6240\u6709\u6a21\u578b\u4e5f\u5e94\u8be5\u7ee7\u627f\u8fd9\u4e2a\u7c7b\u3002\n#\u6b64\u4e3a\u57fa\u7840\u7684\u5377\u79ef\u5c42\u6a21\u578b\nclass BasicConv2d(nn.Module):\n    def __init__(self, input_dim, output_dim, kernel_size, bn):\n        super().__init__()\n        #padding(int or tuple, optional) - \u8f93\u5165\u7684\u6bcf\u4e00\u6761\u8fb9\u8865\u51450\u7684\u5c42\u6570,\u8fd9\u662f\u4e3a\u4e86\u9632\u6b62\u5377\u79ef\u6838\u7684\u5927\u5c0f\u4e0e\u6b65\u957f\u4f7f\u5f97\u4e00\u4e9b\u8fb9\u7f18\u6570\u636e\u65e0\u6cd5\u88ab\u904d\u5386\uff0c\u6240\u4ee5\u9700\u8981\u8fdb\u884c\u586b\u5145\n        #kerner_size(int or tuple) - \u5377\u79ef\u6838\u7684\u5c3a\u5bf8\n        #\u8f93\u5165\u7684\u5c3a\u5ea6\u662f(N, C_in,H,W)\uff0c\u8f93\u51fa\u5c3a\u5ea6\uff08N,C_out,H_out,W_out\uff09\n        #\u8fd9\u91ccpadding\u586b\u5145\u8fd9\u4e2a\u6570\u91cf\u7684\u76ee\u7684\u662f\u4fdd\u8bc1\u5728\u4e00\u6b21\u5377\u79ef\u64cd\u4f5c\u540e\u5176\u5c3a\u5bf8\u4e0e\u539f\u5c3a\u5bf8\u4fdd\u6301\u76f8\u540c\n        self.conv = nn.Conv2d(\n            input_dim, output_dim, \n            kernel_size=kernel_size, \n            padding=(kernel_size[0] \/\/ 2, kernel_size[1] \/\/ 2)\n        )\n        \n        #\u5bf9\u5c0f\u6279\u91cf(mini-batch)3d\u6570\u636e\u7ec4\u6210\u76844d\u8f93\u5165\u8fdb\u884c\u6279\u6807\u51c6\u5316(Batch Normalization)\u64cd\u4f5c\n        #\u5728\u6bcf\u4e00\u4e2a\u5c0f\u6279\u91cf\uff08mini-batch\uff09\u6570\u636e\u4e2d\uff0c\u8ba1\u7b97\u8f93\u5165\u5404\u4e2a\u7ef4\u5ea6\u7684\u5747\u503c\u548c\u6807\u51c6\u5dee\n        #\u5728\u8bad\u7ec3\u65f6\uff0c\u8be5\u5c42\u8ba1\u7b97\u6bcf\u6b21\u8f93\u5165\u7684\u5747\u503c\u4e0e\u65b9\u5dee\uff0c\u5e76\u8fdb\u884c\u79fb\u52a8\u5e73\u5747\u3002\u79fb\u52a8\u5e73\u5747\u9ed8\u8ba4\u7684\u52a8\u91cf\u503c\u4e3a0.1\u3002\n        #\u8f93\u5165\u8f93\u51fa\u76f8\u540c\n        #BatchNorm2d\u51fd\u6570\u662f\u5728\u4f7f\u7528\u5377\u79ef\u8ba1\u7b97\u540e\u8fdb\u884c\u5f52\u4e00\u5316\uff0c\u9632\u6b62relu\u524d\u7684\u6570\u636e\u8fc7\u5927\u5bfc\u81f4\u7f51\u7edc\u4e0d\u7a33\u5b9a\n        self.bn = nn.BatchNorm2d(output_dim) if bn else None\n\n    def forward(self, x):\n        h = self.conv(x)\n        h = self.bn(h) if self.bn is not None else h\n        return h\n\n\nclass LuxNet(nn.Module):\n    def __init__(self):\n        super().__init__()\n        layers, filters = 12, 32\n        #model initialization\n        self.conv0 = BasicConv2d(19, filters, (3, 3), True)\n        #\u5c06submodules\u4fdd\u5b58\u5728\u4e00\u4e2alist\u4e2d\u3002ModuleList\u53ef\u4ee5\u50cf\u4e00\u822c\u7684Python list\u4e00\u6837\u88ab\u7d22\u5f15\uff0c\u5373\u6bcf\u4e00\u4e2a\u90fd\u662f\u7528\u4e8e\u5b58\u50a8\u4e00\u4e2alayer\u7684\n        self.blocks = nn.ModuleList([BasicConv2d(filters, filters, (3, 3), True) for _ in range(layers)])\n        #nn.Linear\uff08\uff09\u662f\u7528\u4e8e\u8bbe\u7f6e\u7f51\u7edc\u4e2d\u7684\u5168\u8fde\u63a5\u5c42\u7684\uff0c\u9700\u8981\u6ce8\u610f\u5728\u4e8c\u7ef4\u56fe\u50cf\u5904\u7406\u7684\u4efb\u52a1\u4e2d\n        #\u5168\u8fde\u63a5\u5c42\u7684\u8f93\u5165\u4e0e\u8f93\u51fa\u4e00\u822c\u90fd\u8bbe\u7f6e\u4e3a\u4e8c\u7ef4\u5f20\u91cf\uff0c\u5f62\u72b6\u901a\u5e38\u4e3a[batch_size, size]\n        #\u5176\u4e2d\u524d\u4e24\u4e2a\u53c2\u6570\u5206\u522b\u4e3ain\u7684size\uff0c7\u4e3a\u8f93\u51fa\u7684size\n        self.head_p = nn.Linear(filters, 7, bias=False)\n\n    #\u795e\u7ecf\u7f51\u7edc\u7684\u524d\u5411\u4f20\u64ad\n    def forward(self, x):\n        #\u6b64\u4e3a\u6fc0\u52b1\u5c42\u7684\u5185\u5bb9\uff0crelu_\u662f\u4e00\u79cd\u975e\u7ebf\u6027\u6fc0\u6d3b\u51fd\u6570\uff0c\u672c\u8d28\u4e0a\u5728\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc\u4e0a\u53ef\u4ee5\u903c\u8fd1\u4efb\u4f55\u7c7b\u578b\u7684\u51fd\u6570\n        #relu\u51fd\u6570\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570inplace\u9ed8\u8ba4\u503c\u4e3afalse\uff0c\u8868\u793a\u4e0d\u6539\u53d8\u8f93\u5165\u7684\u6570\u636e\n        h = F.relu_(self.conv0(x))\n        for block in self.blocks:\n            h = F.relu_(h + block(h))\n        #view\u51fd\u6570\u76f8\u5f53\u4e8eresize\u7684\u529f\u80fd\uff0c\u5c06\u539f\u6765\u7684tensor\u53d8\u6362\u6210\u6307\u5b9a\u7684\u7ef4\u5ea6\n        #\u8fd9\u91cc\u662f\u5c06\u6fc0\u52b1\u503c\u4e58\u5165\u8f93\u5165x\uff0c\u518d\u5c06\u5176\u91cd\u65b0\u5f20\u6210h.size(0)*h.size(1)*\u5269\u4f59\u7684\u5f62\u5f0f\u5e76\u6c42\u548c\n        h_head = (h * x[:,:1]).view(h.size(0), h.size(1), -1).sum(-1)\n        #\u8c03\u7528head_p\u51fd\u6570\u5f20\u6210\u4e8c\u7ef4\u5411\u91cf\n        #\u4e0a\u9762\u8bf4\u7684\u4e0d\u592a\u5bf9\uff0cview\u6210\u4e8c\u7ef4(h.size(0),filters)\uff0c\u518d\u901a\u8fc7\u5168\u8fde\u63a5\u5c42head_p\uff0c\u89c4\u6a21\u53d8\u4e3a(h.size(0),7)\n        p = self.head_p(h_head)\n        return p","3cbf8544":"def train_model(model, dataloaders_dict, criterion, optimizer, num_epochs):\n    best_acc = 0.0\n    #\u52a8\u6001\u6539\u53d8\u5b66\u4e60\u7387\u7684sheduler\n    scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size = 5, gamma = 0.1)\n    \n    for epoch in range(num_epochs):\n        #\u663e\u5f0f\u5730\u6307\u5b9amodel\u4f7f\u7528gpu\n        model.cuda()\n        #\u5728Pytorch\u8bad\u7ec3\u4e2d\u6709\u4e24\u79cd\u6a21\u5f0f\uff0ctrain\u4e3a\u8bad\u7ec3\u6a21\u5f0f\uff0ceval\u4e3a\u8bc4\u4f30\u6a21\u5f0f\n        for phase in ['train', 'val']:\n            if phase == 'train':\n                #\u5728\u4f7f\u7528pytorch\u6784\u5efa\u795e\u7ecf\u7f51\u7edc\u7684\u65f6\u5019\uff0c\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u4f1a\u5728\u7a0b\u5e8f\u4e0a\u65b9\u6dfb\u52a0\u4e00\u53e5model.train()\uff0c\u4f5c\u7528\u662f\u542f\u7528batch normalization\u548cdropout\n                model.train()\n            else:\n                #\u6d4b\u8bd5\u8fc7\u7a0b\u4e2d\u4f1a\u4f7f\u7528model.eval()\uff0c\u8fd9\u65f6\u795e\u7ecf\u7f51\u7edc\u4f1a\u6cbf\u7528batch normalization\u7684\u503c\uff0c\u5e76\u4e0d\u4f7f\u7528dropout\uff0c\u5373\u6211\u4eec\u8fd9\u91cc\u4e0d\u662f\u5728\u8bad\u7ec3\u6a21\u578b\n                #\u90a3\u4e48\u5c31\u4e0d\u9700\u8981\u8fdb\u884cdropout\u6539\u53d8\u6a21\u578b\uff0c\u6545\u8c03\u7528\u8be5\u51fd\u6570\u4fdd\u8bc1dropout\u4e0d\u53d8\n                model.eval()\n                \n            epoch_loss = 0.0\n            epoch_acc = 0\n            \n            dataloader = dataloaders_dict[phase]\n            #\u5bf9\u6a21\u578b\u8fdb\u884c\u591a\u6b21\u8bad\u7ec3\n            for item in tqdm(dataloader, leave=False):\n                states = item[0].cuda().float()\n                actions = item[1].cuda().long()\n                #\u5c06\u6a21\u578b\u7684\u53c2\u6570\u68af\u5ea6\u521d\u59cb\u5316\u4e3a0\n                optimizer.zero_grad()\n                #\u5728\u6211\u4eec\u5904\u4e8e\u8bad\u7ec3\u6a21\u5f0f\u4e0b\u65f6\uff0c\u5141\u8bb8\u8ba1\u7b97\u5c40\u90e8\u68af\u5ea6\n                with torch.set_grad_enabled(phase == 'train'):\n                    policy = model.forward(states)\n                    #criterion\u4e3a\u635f\u5931\u51fd\u6570\uff0c\u8ba1\u7b97\u635f\u5931\n                    loss = criterion(policy, actions)\n                    #\u8fd4\u56de\u6240\u6709\u5f20\u91cf\u6700\u5927\u503c\n                    _, preds = torch.max(policy, 1)\n\n                    #\u5982\u679c\u5904\u4e8e\u8bad\u7ec3\u6a21\u5f0f\u4e0b\uff0c\u635f\u5931\u51fd\u6570backward\u8fdb\u884c\u53cd\u5411\u4f20\u64ad\u68af\u5ea6\u7684\u8ba1\u7b97\uff0c\u5e76\u4f7f\u7528\u4f18\u5316\u5668\u7684step\u51fd\u6570\u6765\u66f4\u65b0\u53c2\u6570\n                    if phase == 'train':\n                        #\u5f53\u524dVariable\u5bf9leaf variable\u6c42\u504f\u5bfc\uff0c\u8ba1\u7b97\u597d\u68af\u5ea6\n                        loss.backward()\n                        #\u6839\u636e\u524d\u9762\u6c42\u51fa\u7684\u68af\u5ea6\u66f4\u65b0\u53c2\u6570\n                        optimizer.step()\n\n                    epoch_loss += loss.item() * len(policy)\n                    epoch_acc += torch.sum(preds == actions.data)\n            #\u5f52\u4e00\u5316\n            data_size = len(dataloader.dataset)\n            epoch_loss = epoch_loss \/ data_size\n            epoch_acc = epoch_acc.double() \/ data_size\n            if phase == 'train':\n                scheduler.step()\n            print(f'Epoch {epoch + 1}\/{num_epochs} | {phase:^5} | Loss: {epoch_loss:.4f} | Acc: {epoch_acc:.4f}')\n        #\u4ea7\u751f\u4e86\u66f4\u597d\u7ed3\u679c\u7684\u60c5\u51b5\n        if epoch_acc > best_acc:\n            traced = torch.jit.trace(model.cpu(), torch.rand(1, 19, 32, 32))\n            traced.save('model.pth')\n            best_acc = epoch_acc","4fd964bf":"model = LuxNet()\n#train_test_split\u5c06\u539f\u59cb\u6570\u636e\u6309\u7167\u6bd4\u4f8b\u5212\u5206\u4e3a\u201c\u6d4b\u8bd5\u96c6\u201d\u201c\u8bad\u7ec3\u96c6\u201d\n# test_size\uff1a\u6837\u672c\u5360\u6bd4\uff0c\u5982\u679c\u662f\u6574\u6570\u7684\u8bdd\u5c31\u662f\u6837\u672c\u7684\u6570\u91cf\n\n# random_state\uff1a\u662f\u968f\u673a\u6570\u7684\u79cd\u5b50\u3002\n# \u968f\u673a\u6570\u79cd\u5b50\uff1a\u5176\u5b9e\u5c31\u662f\u8be5\u7ec4\u968f\u673a\u6570\u7684\u7f16\u53f7\uff0c\u5728\u9700\u8981\u91cd\u590d\u8bd5\u9a8c\u7684\u65f6\u5019\uff0c\u4fdd\u8bc1\u5f97\u5230\u4e00\u7ec4\u4e00\u6837\u7684\u968f\u673a\u6570\u3002\n#stratify\u662f\u4e3a\u4e86\u4fdd\u6301split\u524d\u7c7b\u7684\u5206\u5e03\uff0c\u4fdd\u8bc1\u5176\u5728\u8bad\u7ec3\u96c6\u4e2d\u7684\u5206\u5e03\u6bd4\u4f8b\u4e0d\u53d8\ntrain, val = train_test_split(samples, test_size=0.15, random_state=42, stratify=labels)\nbatch_size = 64\n#shuffle\u4e3afalse\u8868\u793a\u4e0d\u6253\u4e71\u4f20\u5165\u7684\u6570\u636e\n#num_workers\u8868\u793a\u4e86\u4f1a\u6709\u591a\u5c11\u8fdb\u7a0b\u5171\u540c\u6267\u884c\ntrain_loader = DataLoader(\n    LuxDataset(obses, train), \n    batch_size=batch_size, \n    shuffle=True, \n    num_workers=2\n)\nval_loader = DataLoader(\n    LuxDataset(obses, val), \n    batch_size=batch_size, \n    shuffle=False, \n    num_workers=2\n)\ndataloaders_dict = {\"train\": train_loader, \"val\": val_loader}\n#\u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570\uff0c\u4e00\u79cd\u4f7f\u7528\u5bf9\u6570\u7684\u635f\u5931\u51fd\u6570\ncriterion = nn.CrossEntropyLoss()\n#\u5229\u7528Adam(Adaptive Moment Estimation)\u8fdb\u884c\u4f18\u5316\n#\u5b83\u7684\u4f18\u70b9\u4e3b\u8981\u5728\u4e8e\u7ecf\u8fc7\u504f\u7f6e\u6821\u6b63\u540e\uff0c\u6bcf\u4e00\u6b21\u8fed\u4ee3\u5b66\u4e60\u7387\u90fd\u6709\u4e2a\u786e\u5b9a\u8303\u56f4\uff0c\u4f7f\u5f97\u53c2\u6570\u6bd4\u8f83\u5e73\u7a33\n#lr\u4e3a\u5b66\u4e60\u7387\uff0c\u8fc7\u9ad8\u4f1a\u5bfc\u81f4\u4e0d\u7a33\u5b9a\u4e0e\u8fc7\u62df\u5408\noptimizer = torch.optim.AdamW(model.parameters(), lr=1e-3)\ntrain_model(model, dataloaders_dict, criterion, optimizer, num_epochs=25)","ccb0cdb7":"from kaggle_environments import make\n\nenv = make(\"lux_ai_2021\", configuration={\"width\": 24, \"height\": 24, \"loglevel\": 2, \"annotations\": True}, debug=True)\nsteps = env.run(['agent.py', 'agent.py'])\nenv.render(mode=\"ipython\", width=1200, height=800)","604d62bc":"!tar -czf submission.tar.gz *","3b7f3143":"# Submission","5bc88e75":"# Train","deab6224":"# Preprocessing","d8a359d2":"# Input For Training","653c2975":"# Model for Training","b3b11095":"todo\uff1a\u9700\u8981\u628a\u6240\u6709\u7684dest\u5224\u65ad\u90fd\u4e0ein\u2014\u2014city\u7ed3\u5408\u3002\u5141\u8bb8\u5728\u57ce\u5e02\u4e0a\u5806\u53e0\n\n==============================================================================\n\u7f51\u7edc\u8f93\u5165\u4fee\u6539\u4e3a19\u5c42\n=========================================================\n2021.12.03 18:00\n\u6700\u65b0\u60c5\u51b5\n\n\u8ba9\u7f51\u7edc\u652f\u6301\u4e86citytile\u7684\u9009\u62e9\n\n\u591c\u95f4\u51fa\u57ce\u903b\u8f91\u6539\u56de\u4e86yzy\u5199\u7684\n\ncart\u5f7b\u5e95\u6ca1\u4e86\uff0c\u9664\u975e\u7f51\u7edc\u8f93\u51fa\u518d\u52a0\u4e00\u7ef4\u3002\u800c\u4e14\u5176\u884c\u4e3a\u903b\u8f91\u4e5f\u4e0d\u592a\u597d\u60f3\n\n\u6b64\u7248\u672c\u662f\u8bad\u7ec3\u4e00\u904d\u7684\u60c5\u51b5\u3002\u6211\u6b63\u5728\u8dd125\u904d\u7684\u3002\n=============================================================================================================================\n\u589e\u52a0\u4e86unit\u627e\u57ce\u5e02\u907f\u96be\u7684\u529f\u80fd\uff0c\u628a\u76f8\u5173\u7684\u8d85\u53c2\u6570\u6539\u6210\u4e8620\u523040\u5929\uff08\u5373\uff1a\u5141\u8bb8\u8003\u8651\u6551\u63f4\u548c\u907f\u96be\u7684\u65f6\u95f4\u6bb5\uff09\n\n\n\u6551\u63f4\u6539\u6210\u4e86\u591aunit\u65511\u4e2acity\u3002\u4f46\u6551\u63f4\u4f1a\u51fa\u73b0city\u4e4b\u95f4\u5171\u7528unit\u7684\u60c5\u51b5,\u6211\u5c31\u5148\u6309\u57ce\u5e02\u89c4\u6a21\u5927\u5c0f\u6392\u5e8f\uff0c\u5148\u6551\u5927\u57ce\u5e02\n\n\n\u5173\u4e8ecart\u4ec5\u4ec5\u52a0\u4e86 build\u65f60.1\u7684\u6982\u7387\u4e3acart\uff0c0.9\u4e3aworker\u3002\u6240\u4ee5cart\u73b0\u5728\u662f\u4e0d\u4f1a\u52a8\u7684\n\n\n\u6000\u7591\u6709\u4e2abug\uff08step out city\u5e94\u8be5\u662f\u767d\u5929\u5427\uff09\uff0c\u6211\u81ea\u884c\u6539\u4e86\uff0c\u5e76\u6253\u4e0a\u4e86\uff1f\uff1f\uff1f\u7684\u6ce8\u91ca\n\n\n\u73b0\u5728\u7684\u95ee\u9898\u4e3b\u8981\u662f\u4e0d\u7528\u5176\u4ed6\u6570\u636e\u96c6\u7684\u8bdd\uff0c\u6ca1\u6cd5\u6539\u53d8\u7f51\u7edc\u7684\u529f\u80fd\uff0c\u4f7f\u5f97cart\u53ea\u80fd\u7eaf\u89c4\u5219\u5b9e\u73b0\uff0c\u4e5f\u5b8c\u5168\u6ca1\u8003\u8651\u9053\u8def\u7b49\u7ea7\u95ee\u9898\n\n\n\u6b64notebook\u662f\u628a\u8bad\u7ec3\u6b21\u6570\u6539\u4e3a1\u7684\u7ed3\u679c\uff0c\u6682\u65f6\u8fd8\u6ca1\u8bad25\u6b21\uff0c\u90a3\u6837\u5927\u7ea6\u9700\u89811\u5c0f\u65f6\u3002\n\n\ncart\u4e00\u4e2a\u53ef\u80fd\u7684\u903b\u8f91\uff1a\u8f66\u4e3a\u7a7a\u65f6\u51fa\u53bb\u627eworker\uff0c\u627e\u5230\u4e86\u5c31\u5f3a\u5236\u8981\u6c42worker transfer \u5c24\u5176\u662f\u628a\u4e0d\u662f\u6728\u5934\u7684\u8d44\u6e90\u7ed9cart\uff08\u56e0\u4e3a\u8fd9\u4e9b\u5982\u679c\u88ab\u7528\u6765build city\u5c31\u6d6a\u8d39\u4e86\uff09\n\u8f66\u57fa\u672c\u6ee1\u4e86\uff0c\u5c31\u627e\u57ce\u5e02\u56de\u53bb\u3002\u5982\u679ccart\u80fd\u7528\u522b\u7684\u65b9\u6cd5\u5b9e\u73b0\u90a3\u66f4\u597d\uff0c\u4e0d\u884c\u5c31\u628a\u8fd9\u4e2a\u5b9e\u73b0\u7b97\u4e86\u3002\u6bd5\u7adf\u5206\u6570\u662f\u4e00\u65b9\u9762\uff0c\u54b1\u4eec\u7684\u5de5\u4f5c\u5982\u679c\u6ca1\u6d89\u53cacart\uff0c\u6700\u540e\u7ed9\u5206\u6015\u662f\u8981\u5403\u4e8f\u3002\n\n\u8fd8\u6709\u4e00\u4e2a\u89c2\u5bdf\u5230\u7684\u95ee\u9898\uff0c\u6709\u7684city\u6700\u540e\u4f1a\u5269\u4f59\u5927\u91cf\u8d44\u6e90\u3002\u8fd9\u672c\u6765\u662f\u7f51\u7edc\u5e94\u8be5\u8003\u8651\u5230\u7684\u56e0\u7d20\uff0c\u4e5f\u8bb8\u5e94\u8be5\u7528\u89c4\u5219\u5f3a\u5236\u4e00\u4e0b\u3002\u4f46\u4e0d\u77e5\u9053\u600e\u4e48\u6539\u3002"}}