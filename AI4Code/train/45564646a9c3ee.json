{"cell_type":{"ab4f2d9c":"code","d5febda2":"code","c5bc6229":"code","0c996a67":"code","2f7b1b75":"code","0bd49e5f":"code","0cb91809":"code","a52c41a1":"code","65442a56":"code","807a6cba":"code","68a6ae5e":"code","ca5d011a":"code","c73dc916":"code","17246f5b":"code","2fa309da":"code","4ea0e797":"code","5c0d8cff":"code","53f18cac":"code","9530bb60":"code","7b81cc12":"code","4ec37120":"code","09b5f719":"code","0d122ecc":"code","1173009d":"code","819a372a":"code","a8ae9b73":"code","f7e824af":"code","32b48c14":"code","3b2956d8":"code","94aea37d":"code","2c0d54d3":"code","c3df4199":"code","e37b2064":"code","739546a4":"code","65b3b54d":"code","54489e97":"markdown","565d9991":"markdown","3e12895e":"markdown","a6cd1b18":"markdown","9f776dca":"markdown","ab18f8d7":"markdown","0a9ef126":"markdown","819401dd":"markdown","a5b8d56e":"markdown","57ec7be4":"markdown","89c30ce7":"markdown","6d55e801":"markdown","42b5b7ab":"markdown","ec070664":"markdown","26fa83f8":"markdown"},"source":{"ab4f2d9c":"\n#import libraries\nimport sys\nprint('Python: {}'.format(sys.version))\nimport scipy\nprint('scipy: {}'.format(scipy.__version__))\nimport numpy as np\nprint('numpy: {}'.format(np.__version__))\nimport matplotlib\nimport matplotlib.pyplot as plt\nprint('matplotlib: {}'.format(matplotlib.__version__))\nimport pandas as pd\nprint('pandas: {}'.format(pd.__version__))\nimport sklearn \nprint('sklearn: {}'.format(sklearn.__version__))\nimport seaborn as sns\nprint('seaborn: {}'.format(sns.__version__))","d5febda2":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","c5bc6229":"#Load datasets\ndf_train=pd.read_csv(\"https:\/\/raw.githubusercontent.com\/TracyRenee61\/House-Prices\/master\/train.csv\")\ndf_train","0c996a67":"\n#Load datasets\ndf_test=pd.read_csv(\"https:\/\/raw.githubusercontent.com\/TracyRenee61\/House-Prices\/master\/test.csv\")\ndf_test\n","2f7b1b75":"sns.distplot(df_train['SalePrice']);","0bd49e5f":"var = 'OverallQual'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\nf, ax = plt.subplots(figsize=(14, 8))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);","0cb91809":"total = df_train.isnull().sum().sort_values(ascending=False)\npercent = (df_train.isnull().sum()\/df_train.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(20)","a52c41a1":"total = df_test.isnull().sum().sort_values(ascending=False)\npercent = (df_test.isnull().sum()\/df_train.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(20)","65442a56":"obj_df_train = df_train.select_dtypes(include=['object']).copy().reset_index()\nobj_df_train","807a6cba":"obj_df_train = obj_df_train.fillna(\"Not Listed\")\nobj_df_train","68a6ae5e":"from sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\n\nobj_df_train = obj_df_train.apply(le.fit_transform)\nobj_df_train","ca5d011a":"int_df_train = df_train.select_dtypes(include=['int64']).copy().reset_index()\nint_df_train","c73dc916":"int_df_train = int_df_train.fillna(0)\nint_df_train","17246f5b":"float_df_train = df_train.select_dtypes(include=['float64']).copy().reset_index()\nfloat_df_train","2fa309da":"float_df_train = float_df_train.fillna(0)\nfloat_df_train","4ea0e797":"train = obj_df_train.merge(int_df_train, on=\"index\").merge(float_df_train, on=\"index\")\ntrain","5c0d8cff":"obj_df_test = df_test.select_dtypes(include=['object']).copy().reset_index()\nobj_df_test","53f18cac":"obj_df_test = obj_df_test.fillna(\"Not Listed\")\nobj_df_test","9530bb60":"from sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\n\nobj_df_test = obj_df_test.apply(le.fit_transform)\nobj_df_test","7b81cc12":"int_df_test = df_test.select_dtypes(include=['int64']).copy().reset_index()\nint_df_test","4ec37120":"int_df_test = int_df_test.fillna(0)\nint_df_test","09b5f719":"float_df_test = df_test.select_dtypes(include=['float64']).copy().reset_index()\nfloat_df_test","0d122ecc":"float_df_test = float_df_test.fillna(0)\nfloat_df_test","1173009d":"test = obj_df_test.merge(int_df_test, on=\"index\").merge(float_df_test, on=\"index\")\ntest","819a372a":"# checking for any null value left\ntrain.isnull().sum().sum(), test.isnull().sum().sum()","a8ae9b73":"id = test.Id\n\ny = train.SalePrice.values\nX = train.drop(['Id','index',  'SalePrice'], axis = 1)\nX_test = test.drop(['Id', 'index'], axis = 1)","f7e824af":"from sklearn.model_selection import train_test_split\n\n# Split into validation and training data\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.1, random_state=1)\nX_train.shape, X_val.shape, y_train.shape,y_val.shape, X_test.shape","32b48c14":"# Import `StandardScaler` from `sklearn.preprocessing`\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\n\n# Define the scaler \nscaler = StandardScaler().fit(X_train)\n# Scale the train set\nX_train = scaler.transform(X_train)\n# Scale the validation set\nX_val = scaler.transform(X_val)\n# Scale the test set\nX_test = scaler.transform(X_test)","3b2956d8":"from sklearn.ensemble import AdaBoostRegressor\nfrom sklearn.tree import DecisionTreeRegressor\n\nmodel = AdaBoostRegressor(base_estimator=DecisionTreeRegressor(max_depth=15),random_state=1,n_estimators=1000, loss='exponential').fit(X_train, y_train)\nprint(model.score(X_train, y_train))","94aea37d":"y_pred = model.predict(X_val)\ny_pred = y_pred.astype(int)\nprint(model.score(X_val, y_val))","2c0d54d3":"from sklearn.metrics import mean_squared_error\n\nrmse = mean_squared_error(y_val, y_pred, squared=False)\nrmse","c3df4199":"final_labels = model.predict(X_test)\nfinal_labels[final_labels < 0] = 0\nfinal_labels = final_labels.astype(int)\nfinal_labels","e37b2064":"final_result = pd.DataFrame({'Id': id, 'SalePrice': final_labels})","739546a4":"final_result.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","65b3b54d":"#upload submission\nsubmission = pd.read_csv(\"submission.csv\")\nsubmission","54489e97":"Define X, y and X_test","565d9991":"Define model","3e12895e":"Load and read csv files","a6cd1b18":"Ask a home buyer to describe their dream house, and they probably won't begin with the height of the basement ceiling or the proximity to an east-west railroad. But this playground competition's dataset proves that much more influences price negotiations than the number of bedrooms or a white-picket fence.\n\nWith 79 explanatory variables describing (almost) every aspect of residential homes in Ames, Iowa, this competition challenges you to predict the final price of each home.\n\nAcknowledgments\n\nThe Ames Housing dataset was compiled by Dean De Cock for use in data science education. It's an incredible alternative for data scientists looking for a modernized and expanded version of the often cited Boston Housing dataset.","9f776dca":"Import libraries","ab18f8d7":"Impute missing","0a9ef126":"Predict on validation set","819401dd":"Check for null values","a5b8d56e":"Split X for training and validation","57ec7be4":"Predict on test set","89c30ce7":"Prepare submission","6d55e801":"Graph of SalePrice","42b5b7ab":"Submit predictions","ec070664":"Problem statement","26fa83f8":"Scaler"}}