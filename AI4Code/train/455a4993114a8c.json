{"cell_type":{"cac67398":"code","ee47ddec":"code","0aad1d36":"code","42e2a76f":"code","6ce76b7a":"code","b63ff669":"code","b6f2ee00":"code","b51d9ad1":"code","2fc9ec02":"code","8d884506":"code","c710eeec":"code","7735b2ff":"code","c63562c7":"code","c7890b15":"code","4473d5ae":"code","ec9a9eef":"code","8a7c8d72":"code","6f8ee81d":"code","29a95037":"code","1116fd45":"code","73ce8cd5":"code","db4f47c2":"code","76dc2018":"code","1739b6c2":"code","ea5707ff":"code","f800b9e1":"code","3ffa148c":"code","bc52b4d2":"code","49b5e1f1":"code","3a9120c9":"code","0f0f1eb1":"code","850719df":"code","d6e066e1":"code","90fad4e7":"code","99f4dd7a":"code","0711bcc2":"code","bb530eb8":"code","eecde0a7":"code","ff66552c":"code","c4c47253":"code","79b721cc":"code","950ab645":"code","808e5086":"code","abebc527":"code","f686d399":"code","e88d3a94":"code","5619201b":"code","8e39d6c8":"code","8d62239e":"code","e9dcf8f4":"code","87971f2a":"code","56ee517f":"code","da7516d2":"code","464d2dca":"code","9549bcd0":"code","e8beab60":"code","b928145b":"code","ffd3b124":"code","3581e97a":"code","0fa39ba2":"code","86368744":"code","8211c95e":"code","03749dd8":"code","09a5e51d":"code","c1b8e352":"code","025eca12":"code","d0776c87":"code","57ad3bdb":"code","f1f60af1":"code","76211898":"code","2b6ef827":"code","2ea089bf":"code","78bb1aa2":"code","dd9df940":"code","6c53b73f":"code","32078123":"code","a9182cdb":"code","4aead2a8":"code","c98b8326":"markdown","4b50e407":"markdown","172e4f85":"markdown","d32e9964":"markdown","a75fd6e5":"markdown","b1124bf8":"markdown","01ccbc16":"markdown","e6e6b6d3":"markdown","1f1f7e25":"markdown","d271f0a9":"markdown","04f05084":"markdown","8118e99b":"markdown","59fca9de":"markdown","40a03364":"markdown","bda5cfce":"markdown","fb2b7732":"markdown","3c996809":"markdown","5e6435f0":"markdown","4c432678":"markdown","dcf8fc62":"markdown","6dbcbc8f":"markdown","4c626824":"markdown","0ef0027c":"markdown","f9ecef43":"markdown","79f9bf67":"markdown","ecb7f703":"markdown","4b087d5a":"markdown","4b283d20":"markdown","cac24cd5":"markdown","2715c643":"markdown"},"source":{"cac67398":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ee47ddec":"# This is to supress the warning messages (if any) generated in our code\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Import of fundamental libraries \nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport statistics as sts\n%matplotlib inline","0aad1d36":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv',index_col=0)\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv',index_col=0)\nprint(f'Train dataset: {train.shape[0]} rows and {train.shape[1]} columns')\nprint(f'Test dataset:  {test.shape[0]} rows and {test.shape[1]} columns')","42e2a76f":"train.info()","6ce76b7a":"# A huge mix of categorical (nominal and ordinal) with numerical (discrete and continuos) features.\n# We will split them and apply some EDA seperately\nfrom sklearn.compose import make_column_selector as selector\n\n#####################\n# All numerical features\n####################\nnum_cols = selector(dtype_exclude=['object','category'])\nnum_cols = num_cols(train)\nnum_cols.remove('MSSubClass')\nnum_cols.remove('SalePrice')\n\n####################################\n# Numerical features: Discrete (disc)\n####################################\ndisc = ['OverallQual','OverallCond','BsmtFullBath','BsmtHalfBath','FullBath','HalfBath',\n        'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces', 'GarageCars', 'MoSold', 'YrSold']\n\n################################\n# Numerical features: Continuous\n###############################\ncont = []\nfor i in num_cols:\n    if i not in disc:\n        cont.append(i)\n\n######################\n# All categorical features\n#####################\ncat_cols = selector(dtype_include=['object','category'])\ncat_cols = cat_cols(train)\ncat_cols = cat_cols + ['MSSubClass']\n\n#################\n# Ordinal \n#################\nordi = ['ExterQual', 'ExterCond', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1',\n       'BsmtFinType2', 'HeatingQC', 'KitchenQual', 'FireplaceQu', 'GarageQual', 'GarageCond','PoolQC', 'Fence']\n\n# Nominal\nnomi = []\nfor i in cat_cols:\n    if i not in ordi:\n        nomi.append(i)","b63ff669":"sns.set_style('darkgrid')\nfig = plt.figure(figsize=(24,20))\nfor index, col in enumerate(cont):\n    plt.subplot(6,4,index+1)\n    sns.distplot(train.loc[:,col].dropna(),kde=False)\nfig.tight_layout(pad=1.0)\nsns.set_context('paper',font_scale=1.5)","b6f2ee00":"sns.set_context('paper',font_scale=1.5)\nfig = plt.figure(figsize=(24,20))\nfor index,col in enumerate(disc):\n    plt.subplot(5,3,index+1)\n    sns.countplot(x=col, data=train)\nfig.tight_layout(pad=1.0)","b51d9ad1":"sns.set_context('paper',font_scale=1)\nfig = plt.figure(figsize=(24,30))\nfor index,col in enumerate(nomi):\n    plt.subplot(9,5,index+1)\n    sns.countplot(x=col, data=train[nomi])\n    plt.xticks(rotation=90)\nfig.tight_layout(pad=1.0)","2fc9ec02":"sns.set_context('paper',font_scale=1.5)\nfig = plt.figure(figsize=(24,20))\nfor index,col in enumerate(ordi):\n    plt.subplot(5,3,index+1)\n    sns.countplot(x=col, data=train[ordi])\n    plt.xticks(rotation=90)\nfig.tight_layout(pad=1.0)","8d884506":"# Numerical continuious columns vs the SalePrice\nsns.set_context('paper',font_scale=1.5)\nfig = plt.figure(figsize=(24,20))\nfor index in range(len(cont)):\n    plt.subplot(5,5,index+1)\n    sns.scatterplot(x=train[cont].iloc[:,index],\n                    y=train['SalePrice'],\n                    data=train)\nfig.tight_layout(pad=1.0)","c710eeec":"disc_S = disc + ['SalePrice']","7735b2ff":"sns.set_context('paper',font_scale=1.5)\nfig = plt.figure(figsize=(24,20))\nfor index,col in enumerate(disc):\n    plt.subplot(5,3,index+1)\n    sns.boxplot(x=col,y='SalePrice',data=train[disc_S])\n    #plt.xticks(rotation=90)\nfig.tight_layout(pad=1.0)","c63562c7":"nomi_S = nomi + ['SalePrice']","c7890b15":"sns.set_context('paper',font_scale=1.5)\nfig = plt.figure(figsize=(24,20))\nfor index,col in enumerate(nomi):\n    plt.subplot(6,5,index+1)\n    sns.boxplot(x=col,y='SalePrice',data=train[nomi_S])\n    plt.xticks(rotation=90)\nfig.tight_layout(pad=1.0)","4473d5ae":"ordi_S = ordi + ['SalePrice']","ec9a9eef":"sns.set_context('paper',font_scale=1.5)\nfig = plt.figure(figsize=(24,20))\nfor index,col in enumerate(ordi):\n    plt.subplot(6,5,index+1)\n    sns.boxplot(x=col,y='SalePrice',data=train[ordi_S])\n    plt.xticks(rotation=90)\nfig.tight_layout(pad=1.0)","8a7c8d72":"# Checking for multicollinearity within numerical columns\n# (keep in mind correlation and causation are different things)\n\nplt.figure(figsize=(14,12))\nnum_correlation = train[num_cols].corr()\nsns.set_style('darkgrid')\nsns.heatmap(num_correlation, \n            #mask = num_correlation < 0.8,\n            linewidth=0.5,\n            cmap='Blues');","6f8ee81d":"t1 = num_correlation.abs().unstack().drop_duplicates().sort_values(ascending=False)\nt1[(t1< 1) & (t1 > 0.8)]","29a95037":"# Investigating correlation between numerical features and the target (SalePrice)\nnum_cols_S = num_cols + ['SalePrice']\ncorrelation = train[num_cols_S].corr()\nc1 = correlation[['SalePrice']].sort_values(['SalePrice'],ascending=False)\nc1[0:10]","1116fd45":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv',index_col=0)\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv',index_col=0)\n\n# Concatenating train and test datasets.\n# They can be split again later on using the id columns as reference\nfull_data = pd.concat([train,test],axis=0)","73ce8cd5":"print(f'Train dataset: {train.shape[0]} rows and {train.shape[1]} columns')\nprint(f'Test dataset:  {test.shape[0]} rows and {test.shape[1]} columns')\nprint(f'full_data dataset:  {full_data.shape[0]} rows and {full_data.shape[1]} columns')","db4f47c2":"plt.figure(figsize=(24,6))\nsns.heatmap(full_data.isnull(),\n            yticklabels=False,\n            cbar=False,\n            cmap='viridis');","76dc2018":"def missing_value(df):\n    number = df.isnull().sum().sort_values(ascending=False)\n    number = number[number > 0]\n    percentage = df.isnull().sum() *100 \/ df.shape[0]\n    percentage = percentage[percentage > 0].sort_values(ascending=False)\n    return  pd.concat([number,percentage],keys=[\"Total\",\"Percentage\"],axis=1)","1739b6c2":"missing_value(full_data)","ea5707ff":"## Features with more than 90% of values missing:\n## PoolQC, MiscFeature, Alley\n### Droping PoolQC, MiscFeature and Alley\nfull_data.drop(['PoolQC','MiscFeature','Alley'],axis=1,inplace=True)","f800b9e1":"full_data.shape","3ffa148c":"ordi.remove('PoolQC')","bc52b4d2":"nomi.remove('MiscFeature')\nnomi.remove('Alley')","49b5e1f1":"full_data.drop(['GarageCars','GarageYrBlt','TotRmsAbvGrd','1stFlrSF'],axis=1,inplace=True)","3a9120c9":"disc.remove('TotRmsAbvGrd')\ndisc.remove('GarageCars')","0f0f1eb1":"cont.remove('1stFlrSF')\ncont.remove('GarageYrBlt')","850719df":"full_data.shape","d6e066e1":"missing_value(full_data[cont])","90fad4e7":"# LotFrontage - missing values imputed using median of Neighborhood\nfull_data['LotFrontage'] = full_data.groupby('Neighborhood')['LotFrontage'].transform(lambda x: x.fillna(x.median()))\n# MasVnrArea - missing values imputed using mode\nfull_data['MasVnrArea'] = full_data['MasVnrArea'].fillna(sts.mode(full_data['MasVnrArea']))\n# GarageArea - missing values imputed using mean value\nfull_data['GarageArea'] = full_data['GarageArea'].fillna(full_data['GarageArea'].mean())\n# BsmtFinSF1 - missing values imputed using mode value\nfull_data['BsmtFinSF1'] = full_data['BsmtFinSF1'].fillna(sts.mode(full_data['BsmtFinSF1']))\n# BsmtFinSF2 - missing values imputed using mode value\nfull_data['BsmtFinSF2'] = full_data['BsmtFinSF2'].fillna(sts.mode(full_data['BsmtFinSF2']))\n# BsmtUnfSF - missing values imputed using median value\nfull_data['BsmtUnfSF'] = full_data['BsmtUnfSF'].fillna(full_data['BsmtUnfSF'].median())\n# TotalBsmtSF - missing values imputed using mean value\nfull_data['TotalBsmtSF'] = full_data['TotalBsmtSF'].fillna(full_data['TotalBsmtSF'].mean())","99f4dd7a":"missing_value(full_data[disc])","0711bcc2":"# BsmtFullBath - missing values imputed using mode value\nfull_data['BsmtFullBath'] = full_data['BsmtFullBath'].fillna(sts.mode(full_data['BsmtFullBath']))\n# BsmtFullBath - missing values imputed using mode value\nfull_data['BsmtHalfBath'] = full_data['BsmtHalfBath'].fillna(sts.mode(full_data['BsmtHalfBath']))\n","bb530eb8":"missing_value(full_data[nomi])","eecde0a7":"lst = list(missing_value(full_data[nomi]).index)\nfull_data[lst] = full_data[lst].transform(lambda x : x.fillna(x.mode()[0]))","ff66552c":"missing_value(full_data[ordi])","c4c47253":"lst2 = list(missing_value(full_data[ordi]).index)\nfull_data[lst2] = full_data[lst2].fillna(\"NA\")","79b721cc":"singlers_ordi = []\nfor i in ordi:\n    counts = train[i].value_counts()\n    zeros = counts.iloc[0]\n    if zeros \/ len(train) * 100 > 90:\n        singlers_ordi.append(i)\n\nsinglers_ordi = list(singlers_ordi)","950ab645":"singlers_ordi","808e5086":"pd.DataFrame({'count': train['GarageCond'].dropna().value_counts(), \n                  '%': train['GarageCond'].dropna().value_counts()\/len(train)*100})","abebc527":"train['GarageCond'].isnull().sum()","f686d399":"# Dropping GarageCond as 90% of its non NA values are in a single class\nfull_data.drop('GarageCond', axis=1, inplace=True)","e88d3a94":"full_data.shape","5619201b":"ordi.remove('GarageCond')","8e39d6c8":"singlers_nomi = []\nfor i in nomi:\n    counts = train[i].value_counts()\n    zeros = counts.iloc[0]\n    if zeros \/ len(train) * 100 > 95:\n        singlers_nomi.append(i)\n\nsinglers_nomi = list(singlers_nomi)","8d62239e":"singlers_nomi","e9dcf8f4":"pd.DataFrame({'count': train['Street'].value_counts(), \n                  '%': train['Street'].value_counts()\/len(train)*100})","87971f2a":"pd.DataFrame({'count': train['Utilities'].value_counts(), \n                  '%': train['Utilities'].value_counts()\/len(train)*100})","56ee517f":"pd.DataFrame({'count': train['LandSlope'].value_counts(), \n                  '%': train['LandSlope'].value_counts()\/len(train)*100})","da7516d2":"pd.DataFrame({'count': train['Condition2'].value_counts(), \n                  '%': train['Condition2'].value_counts()\/len(train)*100})","464d2dca":"pd.DataFrame({'count': train['RoofMatl'].value_counts(), \n                  '%': train['RoofMatl'].value_counts()\/len(train)*100})","9549bcd0":"pd.DataFrame({'count': train['Heating'].value_counts(), \n                  '%': train['Heating'].value_counts()\/len(train)*100})","e8beab60":"full_data.drop(singlers_nomi,axis=1,inplace=True)","b928145b":"full_data.shape","ffd3b124":"nomi.remove('Street')\nnomi.remove('Utilities')\nnomi.remove('Condition2')\nnomi.remove('RoofMatl')\nnomi.remove('Heating')","3581e97a":"ordinal_map = {'Ex': 5,'Gd': 4, 'TA': 3, 'Fa': 2, 'Po': 1, 'NA':0}\nordmap = ['GarageQual', 'FireplaceQu', 'KitchenQual', 'HeatingQC', 'BsmtCond', \n          'BsmtQual', 'ExterCond', 'ExterQual']\n\nfor i in ordmap:\n    full_data[i] = full_data[i].map(ordinal_map)","0fa39ba2":"Bsmt_map = {'GLQ': 6,'ALQ': 5,'BLQ': 4,'Rec': 3,'LwQ': 2,'Unf': 1, 'NA': 0}\nbsmtmap = ['BsmtFinType2', 'BsmtFinType1']\n\nfor i in bsmtmap:\n    full_data[i] = full_data[i].map(Bsmt_map)","86368744":"expose_map = {'Gd': 4, 'Av': 3, 'Mn': 2, 'No': 1, 'NA': 0}\nfull_data['BsmtExposure'] = full_data['BsmtExposure'].map(expose_map)","8211c95e":"fence_map = {'GdPrv': 4,'MnPrv': 3,'GdWo': 2, 'MnWw': 1,'NA': 0}\nfull_data['Fence'] = full_data['Fence'].map(fence_map) ","03749dd8":"sns.set_context('paper',font_scale=1.2)\nsns.set_style('darkgrid')\nsns.histplot(x='SalePrice',data=full_data,bins=30,kde=True)\nplt.show()","09a5e51d":"full_data['SalePrice'].describe()","c1b8e352":"full_data[full_data['SalePrice'] > 500000]","025eca12":"full_data = full_data.drop(full_data[full_data['SalePrice']>500000].index)","d0776c87":"full_data[\"SalePrice\"] = np.log(full_data['SalePrice'])","57ad3bdb":"sns.set_context('paper',font_scale=1.2)\nsns.set_style('darkgrid')\nsns.histplot(x='SalePrice',data=full_data,bins=30,kde=True)\nplt.show()","f1f60af1":"full_data = pd.get_dummies(full_data)\nprint(f'full_data dataset: {full_data.shape[0]} rows and {full_data.shape[1]} columns')","76211898":"# spliting train and test datasets \nX = full_data.iloc[:1451,]\ny = X['SalePrice']\ntest = full_data.iloc[1451:,]\n\nX.drop('SalePrice',axis=1,inplace=True)\ntest.drop('SalePrice',axis=1,inplace=True)","2b6ef827":"from sklearn.preprocessing import RobustScaler\n\ncols = X.select_dtypes(np.number).columns\ntransformer = RobustScaler().fit(X[cols])\nX[cols] = transformer.transform(X[cols])\ntest[cols] = transformer.transform(test[cols])","2ea089bf":"from sklearn.model_selection import train_test_split\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=21)","78bb1aa2":"import time","dd9df940":"from xgboost import XGBRegressor\nfrom sklearn.model_selection import RandomizedSearchCV\n\n# Instance of the model\nxgb = XGBRegressor()\n\n#list of parameters to optimize\nparam_lst = {\n    'learning_rate' : [0.01, 0.1, 0.15, 0.3, 0.5],\n    'n_estimators' : [100, 500, 1000, 2000, 3000],\n    'max_depth' : [3, 6, 9],\n    'min_child_weight' : [1, 5, 10, 20],\n    'reg_alpha' : [0.001, 0.01, 0.1],\n    'reg_lambda' : [0.001, 0.01, 0.1]\n}\n\n# Randomizedd search instance\nxgb_reg = RandomizedSearchCV(estimator = xgb, \n                             param_distributions = param_lst,\n                             n_iter = 100,\n                             scoring = 'neg_root_mean_squared_error',\n                             cv = 5)\n\n# Looking for the best parametes and timing the search\nstart = time.time()\nxgb_search = xgb_reg.fit(X_train, y_train)\nstop = time.time()\nprint(f'Tuning XGBoost hyperparameters:{stop-start:.2f} seconds')\n\nbest_param = xgb_search.best_params_\nxgb = XGBRegressor(**best_param)","6c53b73f":"#####################################\n## function to calculate the mean score of cross_val\n#####################################\ndef mean_cross_val(model, X, y):\n    score = cross_val_score(model, X, y, cv=5)\n    mean = score.mean()\n    return mean\n\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nfrom sklearn.model_selection import cross_val_score\n\nxgb.fit(X_train, y_train)   \npreds = xgb.predict(X_val) \npreds_test_xgb = xgb.predict(test)\n\nmae_xgb = mean_absolute_error(y_val, preds)\nrmse_xgb = np.sqrt(mean_squared_error(y_val, preds))\nscore_xgb = xgb.score(X_val, y_val)\ncv_xgb = mean_cross_val(xgb, X, y)\n\nprint(f'Mean Absolute Error: {mae_xgb:.4f}')\nprint(f'Root of Mean Squared Error: {rmse_xgb:.4f}')\nprint(f'Score (R^2): {score_xgb:.4f}')\nprint(f'Mean of cross_val score: {cv_xgb:.4f}')","32078123":"subm = np.exp(preds_test_xgb)\nsubmission = pd.DataFrame({'Id': test.index,\n                           'SalePrice': subm})\n\nsubmission.to_csv(\"submission_xgb.csv\", index=False)","a9182cdb":"ls .\/kaggle\/working\/","4aead2a8":"subm = np.exp(preds_test_xgb)\noutput = pd.DataFrame({'Id': test.index,\n                       'SalePrice': subm})\noutput.to_csv('submission.csv',index=False)\nprint('Ready!!')","c98b8326":"### Numeric features: discrete features","4b50e407":"### XGBoost","172e4f85":"### Categorical features with single classes","d32e9964":"### Numeric features: continuous variables","a75fd6e5":"### Multicolinearity - numerical features","b1124bf8":"### Target feature - SalePrice","01ccbc16":"## Correlation matrix","e6e6b6d3":"### Categorical features: nominal variables","1f1f7e25":"## Bi-variate EDA: features vs target","d271f0a9":"### Numeric features: continuous variables","04f05084":"### Categorical features: ordinal variables","8118e99b":"### Mapping ordinal features","59fca9de":"### Missing Values - ordinal variables","40a03364":"Removing outliers from the target feature","bda5cfce":"Normalizing the distribution ","fb2b7732":"### Submission","3c996809":"### Missing values - nominal features","5e6435f0":"### Missing values - discrete features","4c432678":"### Categorical features: ordinal variables","dcf8fc62":"# Exploratory Data Analysis","6dbcbc8f":"### Correlation with target feature","4c626824":"### Numeric features: discrete variables","0ef0027c":"### Missing values - continuous features","f9ecef43":"## Scaling the data","79f9bf67":"### Categorical features: nominal variables","ecb7f703":"# Preprocessing","4b087d5a":"### Multicollinearity in Nominal variables","4b283d20":"From the results of correlation matrix between numerical features and their correlation with the target features the following ones were removed:","cac24cd5":"# Machine learning","2715c643":"## Univariate EDA"}}