{"cell_type":{"957accf4":"code","a9a4cd55":"code","6dfa98e8":"code","4ecfb4b2":"code","f75b57dd":"code","6e5ac60e":"code","be09187f":"code","e741cd0d":"code","ed1267a4":"code","b03e7365":"code","464c245f":"code","564d972a":"code","76465abd":"code","5451c5b4":"code","7caaa86a":"code","406a5c1d":"code","6b93326e":"code","ec3832b4":"code","a8a1826c":"code","339f53d0":"code","c34b619b":"code","de934fd9":"code","91231152":"code","d8eb4d26":"code","96cf8410":"code","a361009f":"code","2fbff3ba":"code","b88254a8":"code","af967b53":"code","48dd4ef9":"code","b00f3d74":"code","751d7825":"code","79250532":"code","69a9031a":"code","2b860706":"code","0553ff77":"code","15b69822":"code","0b4d7ca5":"code","5bdf96e2":"code","e904c621":"code","ac29a412":"code","83e3c91f":"code","382b706c":"code","12f95b16":"code","c21c8572":"code","6aaef621":"code","d05a8cbf":"code","bf68d7f0":"code","c11254f3":"code","1ad9567f":"code","59d4ad9e":"code","409211ac":"code","96538584":"code","4562f15e":"code","f1e9d47c":"code","7a325615":"code","f5af6f47":"code","77cb4da7":"code","243f3094":"code","d3b9a015":"code","2e7a6398":"code","6fb43b8d":"code","745d0b2d":"code","4a125fd5":"code","e1645157":"code","70dd5b72":"code","e5e3eff1":"code","d736bb1c":"code","c581ae25":"code","8e0b6a0e":"code","26c0f57c":"code","daaf7185":"code","bfb6b712":"code","1cc48745":"code","302e00c0":"code","ade804c1":"code","5f82298f":"code","632032dc":"code","a21d2ec6":"code","d4822c1f":"code","7e4fc5bd":"code","c713c040":"code","c945beaa":"code","21600bdc":"code","0e975e57":"code","4002a616":"code","1eb37a23":"code","f90270e7":"code","d8ed1060":"code","c2283e3f":"code","f94e87d2":"code","c9d58ae6":"code","fda36025":"code","c3d82448":"code","66f5a040":"code","ea40ffa0":"code","66a0c458":"code","c7af4617":"code","0c25f005":"code","3914a11b":"code","3c131def":"code","e1755c45":"code","ae727933":"code","aa89edf2":"code","e2037302":"code","37aa7c41":"code","3b8510ed":"code","de218e30":"code","435852b3":"code","75c0f300":"code","562c0674":"code","80340951":"code","e10cb4a3":"code","a4780921":"code","e1e7ec1d":"code","4d5e054f":"code","b919e8e3":"code","c67e3868":"code","835df6b2":"code","ab65f547":"code","277bcb8f":"code","7b50f81f":"code","5728498c":"code","a7e85fc6":"code","64c489e4":"code","2c7d3189":"code","b5732b9d":"code","dc8353bb":"code","07f4fab0":"code","ffddcfe1":"code","a6326d60":"code","18a3fa28":"code","a708947c":"code","454c4054":"code","7ca8a49a":"code","84e0bf8c":"code","bfc5e282":"code","a38917df":"code","28793eee":"code","c1eaa690":"markdown","fc4f6685":"markdown","d68fa432":"markdown","7dfc42fa":"markdown"},"source":{"957accf4":"NUM_ROWS = None # enter None for full data run \/ or 5000 for test rows","a9a4cd55":"import pandas as pd\nimport datetime as dt\nimport seaborn as sns \nimport matplotlib.pyplot as plt\nfrom nltk.tokenize import sent_tokenize, word_tokenize\nfrom nltk.corpus import stopwords\nimport nltk\nimport re\n%matplotlib inline ","6dfa98e8":"df_answer=pd.read_csv('..\/input\/answers.csv', nrows= NUM_ROWS) \ndf_questions=pd.read_csv('..\/input\/questions.csv', nrows= NUM_ROWS)\ndf_comments=pd.read_csv('..\/input\/comments.csv', nrows= NUM_ROWS)\ndf_emails=pd.read_csv('..\/input\/emails.csv', nrows= NUM_ROWS)\ndf_memberships=pd.read_csv('..\/input\/group_memberships.csv', nrows= NUM_ROWS)\ndf_groups=pd.read_csv('..\/input\/groups.csv', nrows= NUM_ROWS)\ndf_matches=pd.read_csv('..\/input\/matches.csv', nrows= NUM_ROWS)\ndf_professionals=pd.read_csv('..\/input\/professionals.csv', nrows= NUM_ROWS)\ndf_school_mem=pd.read_csv('..\/input\/school_memberships.csv', nrows= NUM_ROWS)\ndf_student=pd.read_csv('..\/input\/students.csv', nrows= NUM_ROWS)\ndf_tag_questions=pd.read_csv('..\/input\/tag_questions.csv', nrows= NUM_ROWS)\ndf_tag_users=pd.read_csv('..\/input\/tag_users.csv', nrows= NUM_ROWS)\ndf_tags=pd.read_csv('..\/input\/tags.csv', nrows= NUM_ROWS)","4ecfb4b2":"df_answer_len    = len(df_answer)\ndf_questions_len = len(df_questions)\ndf_comments_len  = len(df_comments)\ndf_emails_len    = len(df_emails)\ndf_memberships_len = len(df_memberships)\ndf_groups_len      = len(df_groups)\ndf_matches_len     = len(df_matches)\ndf_professionals_len = len(df_professionals)\ndf_school_mem_len    = len(df_school_mem)\ndf_student_len       = len(df_student)\ndf_tag_questions_len = len(df_tag_questions)\ndf_tag_users_len     = len(df_tag_users)\ndf_tags_len          = len(df_tags)","f75b57dd":"df_answer.head(2) ","6e5ac60e":"df_answer.info()","be09187f":"def get_range(rows1=0, rows2=0):\n    if (rows1>0 and rows2>0):\n        return rows1 + rows2\n    elif (rows1>0):\n        return rows1\n    else:\n        return NUM_ROWS + NUM_ROWS","e741cd0d":"#separate the date and time to handle better\ndate=[]\ntime_added=[]   #51123\nrange01 = get_range(df_answer_len, rows2=0)\nfor i in range(range01):\n    date.append(df_answer['answers_date_added'][i].split()[0])\n    time_added.append(df_answer['answers_date_added'][i].split()[1])","ed1267a4":"df_answer['Date']=date\ndf_answer['Time']=time_added\ndf_answer=df_answer.drop(columns='answers_date_added')\n\ndf_answer.head(2)","b03e7365":"# Convertion of datetime \ndf_answer['Date'] = df_answer['Date'].apply(lambda x:  dt.datetime.strptime(x,'%Y-%m-%d'))\ndf_answer['Time'] = df_answer['Time'].apply(lambda x: dt.datetime.strptime(x,'%H:%M:%S'))\n\ndf_answer_merge=df_answer\n# We create the columns Year,Month,Hour of the answers\n\nYear=[]\nMonth=[]\nHour=[]\nfor i in range(range01):\n    Year.append(df_answer['Date'][i].year)\n    Month.append(df_answer['Date'][i].month)\n    Hour.append(df_answer['Time'][i].time)","464c245f":"df_answer['Year']=Year\ndf_answer['Month']=Month\ndf_answer['Hour']=Hour\n\n# New DataFrame\ndf_answer=df_answer.drop(columns=['Date','Time'])","564d972a":"df_answer['Year'].value_counts()","76465abd":"# 1) Answer By Year\nsns.set_style(style='darkgrid')\nplt.title('Answer by Year')\ndf_answer['Year'].value_counts().plot(kind='bar')","5451c5b4":"# Top 10 users with more answers\ndf_answer['answers_author_id'].value_counts().head(10)","7caaa86a":"# How many collaborator we have register ?\ndf_answer['answers_author_id'].nunique()","406a5c1d":"# Analysis amount answers by user\nAnswer_By_User=pd.DataFrame(df_answer['answers_author_id'].value_counts())\ntest=pd.DataFrame(Answer_By_User)\nAnswer_By_User=test.reset_index(inplace=False)\nAnswer_By_User.head(2)","6b93326e":"Answer_By_User=Answer_By_User.rename(columns={'answers_author_id':'Amount_Answer'})\nAnswer_By_User=Answer_By_User.rename(columns={'index':'professionals_id'})","ec3832b4":"# 2) How many collaborator  have more than 100 answer?\nAnswer_By_User[Answer_By_User['Amount_Answer']>100]\nAnswer_By_User.head(2)","a8a1826c":"Answer_ByUser=Answer_By_User[Answer_By_User['Amount_Answer']>100]\nsns.barplot(data=Answer_ByUser,x='Amount_Answer',y='professionals_id')\nplt.title('How many collaborator have more than 100 answer?')","339f53d0":"# Read  \"`Question.csv`\"\ndf_questions.info()","c34b619b":"dateQ=[]\ntime_addedQ=[]\nrange02 = df_questions_len\nfor i in range(range02):\n    dateQ.append(df_questions['questions_date_added'][i].split()[0])\n    time_addedQ.append(df_questions['questions_date_added'][i].split()[1])","de934fd9":"df_questions['Date Question']=dateQ\ndf_questions['Time Question']=time_addedQ\n\ndf_questions.head(2)","91231152":"df_questions['Time Question'] = df_questions['Time Question'].apply(lambda x: dt.datetime.strptime(x,'%H:%M:%S'))\ndf_questions['Date Question'] = df_questions['Date Question'].apply(lambda x:  dt.datetime.strptime(x,'%Y-%m-%d'))\n\ndf_questions=df_questions.drop(columns='questions_date_added')","d8eb4d26":"df_questions.tail(1)","96cf8410":"tiempo=[]\nfor i in range(range02):\n    tiempo.append(df_questions['Time Question'][i].time())","a361009f":"df_questions['Time of day']=tiempo # We create a new column\ndf_questions.head(1)","2fbff3ba":"df_questions_merge=df_questions\n\n# 3) Evaluate  \"Answers\" and \"Questions\"\ndf_answer_merge.tail(1) # 51123 logs ","b88254a8":"tiempoAnswer=[]\nfor i in range(range01):\n    tiempoAnswer.append(df_answer_merge['Time'][i].time())","af967b53":"df_answer_merge['Time of day Answer']=tiempoAnswer\n\n# edit column name to make merge \ndf_answer_merge['questions_id']=df_answer['answers_question_id']","48dd4ef9":"df_answer_merge=df_answer_merge.drop(columns=['Time','Year','Month','Hour'])","b00f3d74":"df_answer_merge.head(2)","751d7825":"# restructure the DataFrame at our convenience\ndf_questions_merge=df_questions_merge[['questions_id','questions_title','questions_body','Date Question','Time of day']]\ndf_questions_merge.head(2)","79250532":"# We merge answer and question \nNew_answ_quest=pd.merge(df_answer_merge,df_questions_merge,how='inner',on='questions_id')\nNew_answ_quest.head(2)","69a9031a":"respon_time=New_answ_quest[['answers_author_id','Date','Date Question','Time of day','Time of day Answer']]","2b860706":"respon_time['time_by_colaborator']=respon_time['Date']-respon_time['Date Question']","0553ff77":"# 4) Time response of our collaborators\n# We restructure the DataFrame at our convenience\nrespon_time=respon_time[['answers_author_id','Date Question','Date','time_by_colaborator','Time of day','Time of day Answer']]\nrespon_time.head(2)","15b69822":"# convert to integer \"time_by_colaborator\"\nc=[]\nfor i in range(51123):\n    c.append(int(str(respon_time['time_by_colaborator'][i]).split()[0]))","0b4d7ca5":"respon_time['TimeAvg_By_colab_Day']=c\nrespon_time=respon_time[['answers_author_id','Date Question','Date','TimeAvg_By_colab_Day','Time of day','Time of day Answer']]\nrespon_time.head(2)","5bdf96e2":"# Users who answer our users quickly  -- In this first instance we will evaluate the users who answer in less than 24 hours to our users, for this we extract the users that have their response time equal to `0 days` , \n#the column \"Speed time\" refers to the response time in hours of users within a period of 1 day\n\ndf=respon_time\ndf=df[df['TimeAvg_By_colab_Day']==0] # Respuestas inmediatas\ndf=df.drop(columns=['Date Question','Date','TimeAvg_By_colab_Day'])\n\ntest=df\ndf=test.reset_index(inplace=False) # Reconfiguramos los ejes ","e904c621":"time_res=[]\ntime_ques=[]\nfor i in range(8429):\n    time_res.append(df['Time of day Answer'][i].hour*60+df['Time of day Answer'][i].minute+df['Time of day Answer'][i].second\/60)\n    time_ques.append(df['Time of day'][i].hour*60+df['Time of day'][i].minute+df['Time of day'][i].second\/60)","ac29a412":"c=[]\nfor i in range(8429):\n    c.append(time_res[i]-time_ques[i])","83e3c91f":"df['Speed_Time_Minute']=c","382b706c":"Speed_time=df","12f95b16":"Speed_time.head(1)","c21c8572":"Speed_time=Speed_time.drop(columns=['Time of day','Time of day Answer'])","6aaef621":"Speed_time.head()","d05a8cbf":"test=Speed_time\nSpeed_time=test.reset_index(inplace=False)","bf68d7f0":"Speed_time=Speed_time.drop(columns='index')","c11254f3":"Speed_time.head()","1ad9567f":"# 5) Users who respond in less than 24 hours  \"*Minutes*\"\nSpeed_time=Speed_time[Speed_time['Speed_Time_Minute']>0]","59d4ad9e":"Speed_time[['answers_author_id','Speed_Time_Minute']].sort_values(by='Speed_Time_Minute',ascending=True)","409211ac":"# calculate the average of users who respond in less than 24 hours\ntest=Speed_time[['answers_author_id','Speed_Time_Minute']].groupby(by='answers_author_id').mean().sort_values(by='Speed_Time_Minute',ascending=True)\navg_speed_time=test.reset_index(inplace=False)","96538584":"# Collaborators who respond in less than 1 hour","4562f15e":"prom_less_60=avg_speed_time[avg_speed_time['Speed_Time_Minute']<=60]","f1e9d47c":"# Collaborators who respond after 1 hour","7a325615":"prom_greater_60=avg_speed_time[avg_speed_time['Speed_Time_Minute']>60]","f5af6f47":"Answer_By_User=Answer_By_User.rename(columns={'professionals_id':'answers_author_id'})","77cb4da7":"# 6) Top 10 users with response time less than 1 hour\npd.merge(Answer_By_User,prom_less_60,how='inner',on='answers_author_id').head(10)","243f3094":"# 7) Top 15 users with response time less than 1 day\npd.merge(Answer_By_User,prom_greater_60,how='inner',on='answers_author_id').head(15)","d3b9a015":"# Average response less than a week","2e7a6398":"respon_time=respon_time[respon_time['TimeAvg_By_colab_Day']>0]","6fb43b8d":"respon_time=respon_time[['answers_author_id','TimeAvg_By_colab_Day']]","745d0b2d":"respon_time[(respon_time['TimeAvg_By_colab_Day']>0)&(respon_time['TimeAvg_By_colab_Day']<=7)].head()","4a125fd5":"# Number of volunteers who respond normally in less than a week","e1645157":"respon_time[(respon_time['TimeAvg_By_colab_Day']>0)&(respon_time['TimeAvg_By_colab_Day']<=7)].count()","70dd5b72":"# Volunteers who respond in less than 1 month","e5e3eff1":"respon_time[(respon_time['TimeAvg_By_colab_Day']>7)&(respon_time['TimeAvg_By_colab_Day']<=30)].count()","d736bb1c":"#  Volunteers who respond in less than 6 months","c581ae25":"respon_time[(respon_time['TimeAvg_By_colab_Day']>30)&(respon_time['TimeAvg_By_colab_Day']<=180)].count()","8e0b6a0e":"#  Volunteers who respond after 6 months","26c0f57c":"respon_time[respon_time['TimeAvg_By_colab_Day']>180].count()","daaf7185":"# 8) How quickly do our volunteers respond?\nNum_dict={'tiempo_respues':[' < 1 week',' < 1 month' , ' < 6 months ', ' > 6 months'],'Num_cola' : [21226,6056,11523,12302] }","bfb6b712":"# Number of volunteers by response times","1cc48745":"Num_by_time_rest=pd.DataFrame(Num_dict)","302e00c0":"Num_by_time_rest","ade804c1":"plt.figure(figsize=(7,8))\nplt.pie(Num_by_time_rest.Num_cola,autopct='%1.1f%%',labels=Num_by_time_rest.tiempo_respues,shadow=True,radius=0.75)\nplt.legend(loc=0)","5f82298f":"df_comments.head(1)","632032dc":"df_emails.nunique()","a21d2ec6":"df_emails['emails_frequency_level'].value_counts()","d4822c1f":"df_emails.head()","7e4fc5bd":"df_emails[['emails_id','emails_recipient_id','emails_frequency_level']].groupby(by=['emails_recipient_id','emails_frequency_level'],group_keys=True,sort=True).count().head(10)","c713c040":"df_emails.head()","c945beaa":"# 9) Memberships\n#   ---- Amount groups ","21600bdc":"df_memberships['group_memberships_group_id'].nunique()","0e975e57":"# Top 10 Amount of user by group\nGroup_mem=pd.DataFrame(df_memberships['group_memberships_group_id'].value_counts())\ntest=pd.DataFrame(Group_mem)\nGroup_mem=test.reset_index(inplace=False)\nGroup_mem=Group_mem.rename(columns={'group_memberships_group_id':'Amount_members'})\nGroup_mem['groups_id']=Group_mem['index']\nGroup_mem=Group_mem[['groups_id','Amount_members']]\nGroup_mem.head(10)","4002a616":"df_groups.head()","1eb37a23":"df_groups['groups_group_type'].value_counts()","f90270e7":"plt.title('Group type')\ndf_groups['groups_group_type'].value_counts().plot(kind='bar')","d8ed1060":"# 10 ) Merge Groups and membership\nNew_Group_member=pd.merge(Group_mem, df_groups, how='inner',on='groups_id')\nNew_Group_member.head(5)","c2283e3f":"# Analyze General groups\nNew_Group_member=New_Group_member.groupby('groups_group_type').sum()\ntest=New_Group_member\nNew_Group_member=test.reset_index(inplace=False)","f94e87d2":"sns.set_style(style='darkgrid')\nplt.title('Amount members by group_type')\ndata=New_Group_member.sort_values(by='Amount_members',ascending=False)\nsns.barplot(x='Amount_members',y='groups_group_type',palette='viridis',data=data)","c9d58ae6":"df_matches.nunique()","fda36025":"df_matches.head(2)","c3d82448":"df_matches[df_matches['matches_email_id']==2337714]","66f5a040":"# 11) analyze Professionals\ndf_professionals.info()","ea40ffa0":"# Missing Data","66a0c458":"sns.heatmap(df_professionals.isnull(),yticklabels=False,cbar=False,cmap='viridis')","c7af4617":"df_professionals[df_professionals['professionals_id']=='36ff3b3666df400f956f8335cf53e09e']","0c25f005":"Answer_By_User.head()","3914a11b":"Answer_By_User['professionals_id']=Answer_By_User['answers_author_id']\nAnswer_By_User=Answer_By_User[['professionals_id','Amount_Answer']]","3c131def":"#  Merge analysis between Answer_By_User and df_professionals","e1755c45":"New_volunteers=pd.merge(Answer_By_User,df_professionals,how='inner',on='professionals_id')","ae727933":"# Number of volunteers who register more than 80 answers in our database\n\nNew_volunteers=New_volunteers[New_volunteers['Amount_Answer']>80] # 38 people\nNew_volunteers.head()","aa89edf2":"a=[]\nfor i in range(38):\n    a.append(New_volunteers['professionals_date_joined'][i].split()[0].split('-')[0])\n\n    # Create new columns \nNew_volunteers['Year']=a","e2037302":"test=New_volunteers[['professionals_id','Amount_Answer','Year']].groupby(by='Year').sum().sort_values(by='Amount_Answer',ascending=False)\nVolu_By_Year=test.reset_index(inplace=False)\nVolu_By_Year","37aa7c41":"# 12) Students\ndf_school_mem.nunique()","3b8510ed":"df_student.info()","de218e30":"# Remove null values\ndf_student=df_student.dropna()\ndf_student=df_student.reset_index()","435852b3":"df_student=df_student.drop(columns='index')","75c0f300":"df_student['students_location'][27].split(',')[-1]","562c0674":"# Cleaning student location \nb=[]\nfor i in range(28938):    \n    b.append(df_student['students_location'][i].split(',')[-1])","80340951":"df_student['students_location']=b","e10cb4a3":"Student_by_loc=pd.DataFrame(df_student['students_location'].value_counts())","a4780921":"# Top 15 origin place of our students  \ntop_Stud=Student_by_loc['students_location'].head(15)\ntop_Stud=pd.DataFrame(top_Stud)\nplt.title('Top 15 origin place of our students')\nsns.barplot(x='students_location',y=top_Stud.index,data=top_Stud)","e1e7ec1d":"# 13) Tag questions analysis\ndf_tag_questions.head(2)","4d5e054f":"df_tag_users=df_tag_users.rename(columns={'tag_users_tag_id':'tag_id'})","b919e8e3":"df_tags=df_tags.rename(columns={'tags_tag_id':'tag_id'})","c67e3868":"# Top 15 - What are interest of our students? \nNew_tags_by_file=pd.merge(df_tag_users,df_tags,how='inner',on='tag_id')\nNew_tags_by_file=New_tags_by_file[['tags_tag_name','tag_id']].groupby(by='tags_tag_name').count()","835df6b2":"test=New_tags_by_file\nNew_tags_by_file=test.reset_index(inplace=False)","ab65f547":"New_tags_by_file.sort_values(by='tag_id',ascending=False).head(15)","277bcb8f":"interest=New_tags_by_file.sort_values(by='tag_id',ascending=False).head(15)\nsns.barplot(data=interest,x='tag_id',y='tags_tag_name')\nplt.title(\"Common tags according to the student's question\")","7b50f81f":"df_tags_q=df_tag_questions.rename(columns={'tag_questions_tag_id':'tag_id'})","5728498c":"merge_users_tag=pd.merge(df_tag_users,df_tags,how='inner',on='tag_id')","a7e85fc6":"merge_users_tag.tail()","64c489e4":"# 14) Text analysis --- `\"Question Title\"`\nrespuestas=df_answer\npreguntas=df_questions","2c7d3189":"respuestas=respuestas[['answers_author_id','answers_question_id','answers_body']]\npreguntas=preguntas[['questions_id','questions_title','questions_body']]","b5732b9d":"#**Tokenize:** We create the data that we are going to tokenize **`\"Questions Title\"`**\ntexto=''\nfor i in range(23931):\n    texto= texto + ' ' + preguntas['questions_title'][i]","dc8353bb":"# Delete repeated words ","07f4fab0":"stopWords = set(stopwords.words('english'))\nwords = word_tokenize(texto)\nwordsFiltered = []\n \nfor w in words:\n    if w not in stopWords:\n        wordsFiltered.append(w)","ffddcfe1":"diccio=nltk.Counter(wordsFiltered)\nhola=dict(diccio) # We convert to dictionary","a6326d60":"valores=hola.values()\nfilas=hola.keys()\nfilas=list(filas) # We convert to list \nvalores=list(valores) # We convert to list","18a3fa28":"# We create to DataFrame common words\ndf_pal = pd.DataFrame([[key, hola[key]] for key in hola.keys()], columns=['Word','Frequency_words'])","a708947c":"df_pal=df_pal[(df_pal['Word'] != 'What') & (df_pal['Word'] != 'I') & (df_pal['Word'] != 'How') & (df_pal['Word'] != ',') & (df_pal['Word'] != 'Is') & (df_pal['Word'] != '.') & (df_pal['Word'] != 'If') & (df_pal['Word'] != \"'s\") & (df_pal['Word'] != '?')]","454c4054":"# Top 20 common words - Question Title\ntop_20_Qword=df_pal.sort_values(by='Frequency_words',ascending=False).head(20)\ntop_20_Qword","7ca8a49a":"plt.title('Common words of our students')\nsns.barplot(data=top_20_Qword,x='Frequency_words',y='Word')","84e0bf8c":"# 15) Top 20 collaborators more actives- Global information\ncol_pro=pd.merge(Answer_ByUser,df_professionals,how='inner',on='professionals_id')","bfc5e282":"d=[]\nfor i in range (20):\n    d.append(col_pro['professionals_date_joined'][i].split()[0].split('-')[0])","a38917df":"col_pro['Year_Joined']=d","28793eee":"col_pro[['professionals_id','Amount_Answer','professionals_industry','professionals_headline','Year_Joined']]","c1eaa690":"# Data Science for Good: **CareerVillage**.org\n","fc4f6685":"Eliminate words that are obvious from a question like:\n\n* What  * I  * How  * ,  * Is  * .  * 's  * If","d68fa432":"**NOTE:** We can clearly observe that our volunteers respond in less than a week, although we must pay special attention to the volunteers who respond to our users in a time exceeding one month","7dfc42fa":"\nSUMMARY - The most active collaborators are those who joined our community in years after 2015. \n\nThank you"}}