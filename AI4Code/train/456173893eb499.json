{"cell_type":{"24dcec98":"code","30e0349d":"code","ee773447":"code","276c621f":"code","2d35d359":"code","c8566fa3":"code","c39293d4":"code","16363244":"code","3b7a21bc":"code","243299d7":"code","412e7433":"code","09624535":"code","fe5d3e8f":"code","a59be43c":"code","451eaaab":"code","dfc099c2":"code","42007828":"code","a05094a6":"code","accc1881":"code","6c6d9820":"code","79aaf800":"code","52b933c4":"code","f2302027":"markdown","cd6623ea":"markdown","ba39ff5d":"markdown","33713feb":"markdown","24109c3f":"markdown"},"source":{"24dcec98":"import pandas as pd\n","30e0349d":"df=pd.read_csv('..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')","ee773447":"df","276c621f":"df.isnull().sum()","2d35d359":"x=df.drop(\"DEATH_EVENT\",axis=1)\nx","c8566fa3":"y=df['DEATH_EVENT']\ny","c39293d4":"import matplotlib.pyplot as plt\nimport seaborn as sns","16363244":"plt.figure(figsize=(25,25))\nsns.heatmap(df.corr(),annot=True,cmap=\"RdYlGn\")\nplt.show()","3b7a21bc":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.5,random_state=2)","243299d7":"from sklearn.preprocessing import StandardScaler\nscale=StandardScaler()\nx_train=scale.fit_transform(x_train)\nx_test=scale.fit_transform(x_test)","412e7433":"#Finding the optimum number of n_estimators\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nlist1 = []\nfor estimators in range(10,30):\n    classifier = RandomForestClassifier(n_estimators = estimators, random_state=0, criterion='entropy')\n    classifier.fit(x_train, y_train)\n    y_pred = classifier.predict(x_test)\n    list1.append(accuracy_score(y_test,y_pred))\n#print(mylist)\nplt.plot(list(range(10,30)), list1)\nplt.show()","09624535":"# Training the RandomForest Classifier on the Training set\n\nfrom sklearn.ensemble import RandomForestClassifier\nclassifier = RandomForestClassifier(n_estimators = 26, criterion='entropy', random_state=2)\nclassifier.fit(x_train,y_train)","fe5d3e8f":"y_pred=classifier.predict(x_test)","a59be43c":"from sklearn import metrics","451eaaab":"print(\"ACCURACY OF THE MODEL: \", metrics.accuracy_score(y_test, y_pred))","dfc099c2":"from sklearn.metrics import confusion_matrix, accuracy_score\nmylist=[]\ncon_mat = confusion_matrix(y_test, y_pred)\naccuracy = accuracy_score(y_test, y_pred)\nmylist.append(accuracy)\nprint(con_mat)\nprint(accuracy)","42007828":"#Finding the optimum number of max leaf nodes\n\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import confusion_matrix,accuracy_score\nlist1=[]\nfor leaves in range(2,10):\n    classifier=DecisionTreeClassifier(max_leaf_nodes=leaves,\n                                      random_state=0,criterion='entropy')\n    classifier.fit(x_train,y_train)\n    y_pred=classifier.predict(x_test)\n    list1.append(accuracy_score(y_test,y_pred))\nplt.plot(list(range(2,10)),list1)\nplt.show()","a05094a6":"# Training the Decision Tree Classifier on the Training set\n\nclassifier = DecisionTreeClassifier(max_leaf_nodes = 3, random_state=0, criterion='entropy')\nclassifier.fit(x_train, y_train)","accc1881":"# Predicting the test set results\n\ny_pred = classifier.predict(x_test)\nprint(y_pred)","6c6d9820":"from sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nac = accuracy_score(y_test, y_pred)\nmylist.append(ac)\nprint(cm)\nprint(ac)","79aaf800":"mylist2 = [\"DecisionTree\",\"RandomForest\"]","52b933c4":"plt.rcParams['figure.figsize']=15,6 \nsns.set_style(\"darkgrid\")\nax = sns.barplot(x=mylist2, y=mylist, palette = \"rocket\", saturation =1.5)\nplt.xlabel(\"Classifier Models\", fontsize = 20 )\nplt.ylabel(\"% of Accuracy\", fontsize = 20)\nplt.title(\"Accuracy of different Classifier Models\", fontsize = 20)\nplt.xticks(fontsize = 12, horizontalalignment = 'center', rotation = 8)\nplt.yticks(fontsize = 13)\nfor p in ax.patches:\n    width, height = p.get_width(), p.get_height()\n    x, y = p.get_xy() \n    ax.annotate(f'{height:.2%}', (x + width\/2, y + height*1.02), ha='center', fontsize = 'x-large')\nplt.show()","f2302027":"# Data visualization","cd6623ea":"Feature scaling","ba39ff5d":"# Accuracy Testing","33713feb":"# Decision Tree Classifier","24109c3f":"# Random Forest Classifier"}}