{"cell_type":{"5fd6dd91":"code","0fbfc1d2":"code","89773bbe":"code","d5041166":"code","130ed6ca":"code","0e0b5eec":"code","221062c6":"code","d763e326":"code","7e604af7":"code","5d7e59d6":"markdown","af93d0b0":"markdown","1d478cc5":"markdown","bde25e1c":"markdown","a3282eb0":"markdown","0e771ddb":"markdown","a8bc3518":"markdown","1d0ae14d":"markdown","ea3506da":"markdown","59a21bd6":"markdown"},"source":{"5fd6dd91":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0fbfc1d2":"import matplotlib.pyplot as plt\nplt.style.use('dark_background')\nimport cv2","89773bbe":"from keras.models import Sequential\nfrom keras.layers import Convolution2D\nfrom keras.layers import MaxPooling2D\nfrom keras.layers import Flatten\nfrom keras.layers import Dense","d5041166":"plt.figure(figsize = (12,6))\nfor i in range(1, 10, 1):\n    img = cv2.imread('..\/input\/cat-and-dog\/training_set\/training_set\/dogs\/dog.'+str(i)+'.jpg')\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB ) \n    plt.subplot(3,3,i)\n    plt.imshow(img)\nplt.show()  ","130ed6ca":"plt.figure(figsize = (12,6))\nfor i in range(1, 10, 1):\n    img = cv2.imread('..\/input\/cat-and-dog\/training_set\/training_set\/cats\/cat.'+str(i)+'.jpg')\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB ) \n    plt.subplot(3,3,i)\n    plt.imshow(img)\nplt.show()  ","0e0b5eec":"model = Sequential()\nmodel.add(Convolution2D(32 , 3, 3,  input_shape = (64, 64, 3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size  = (2,2)))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation = 'relu'))\nmodel.add(Dense(1, activation = 'sigmoid'))","221062c6":"model.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])","d763e326":"from keras.preprocessing.image import ImageDataGenerator\n\ntrain_datagen = ImageDataGenerator(rescale = 1.\/255, \n                               shear_range = 0.2,\n                               zoom_range = 0.2,\n                               horizontal_flip = True)\n\ntest_datagen = ImageDataGenerator(rescale = 1.\/255)\n\ntrain_set = train_datagen.flow_from_directory('..\/input\/cat-and-dog\/training_set', target_size = (64,64), \n                                             batch_size = 32, \n                                             class_mode = 'binary')\n\n\ntest_set = test_datagen.flow_from_directory('..\/input\/cat-and-dog\/test_set', target_size = (64,64), \n                                             batch_size = 32, \n                                             class_mode = 'binary')","7e604af7":"model.fit_generator(train_set, steps_per_epoch = 100, \n                        epochs = 2, \n                        validation_data = test_set, \n                        validation_steps = 50)","5d7e59d6":"# Flattening\nFlatten the matrix into a long vector which will be the input to the artificial neural network","af93d0b0":"# **Convolutional Neural Network**\n**A Convolutional Neural Network (ConvNet\/CNN) is a Deep Learning algorithm which can take in an input image, assign importance (learnable weights and biases) to various aspects\/objects in the image and be able to differentiate one from the other.**","1d478cc5":"# Training and Testing Data Getting Ready","bde25e1c":"# Fitting the Data and Validation","a3282eb0":"# Softmax & Cross entropy\nSoftmax function brings all predicted values to be between 0 and 1, and make them add up to 1. It also comes hand-in-hand with cross-entropy method.\n\nJust seeing how many wrong predictions the classifier made is not enough to evaluate the performance of ANNs. Instead, Cross Entropy should be used to measure how good the model is, as there can be two models that produce same results while one produced better percentages than the other. For classificaion, Cross Entropy should be used, and for regression, Mean Squared Error should be used.","0e771ddb":"# ReLU\nAfter feature detectors are applied upon images, ReLU is used to increase non-linearity within images.","a8bc3518":"# Showing Data ","1d0ae14d":"# Model Building","ea3506da":"# Max Pooling\nTake a 2 x 2 box on the top left corner (starting here), and record the maximum number within the box. Slide it to the right with the stride of 2 (commonly used), and move onto the next row if completed. Repaet this step until all the pixels are evaluated. Aim of max pooling is to keep all the important features even if images have spatial or textual distortions, and also reduce the size which prevents overfitting. So, after applying convolution operation to images, than pooling is applied.\n\nOther pooling techniques are also available such as Mean Pooling, which takes the average of pixels within the box.","59a21bd6":"# Importing Libraries"}}