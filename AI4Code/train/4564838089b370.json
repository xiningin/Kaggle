{"cell_type":{"25216f9b":"code","fd435d8c":"code","22368749":"code","5da22e5f":"code","88f88563":"code","55629733":"code","e4706c6a":"code","08d4ad9d":"code","8d7e984b":"code","03274f93":"code","1a778586":"code","65d642ac":"code","c992fa3c":"code","2ce1e881":"code","534b07cb":"code","26e84d5f":"code","dcd25477":"code","c7a458a9":"code","3421cd89":"code","9d5a5944":"code","a091f61f":"code","af9b00f6":"code","812a7764":"code","ecb0feeb":"code","5cbe1ddf":"code","b6e933ee":"code","28aa4ca8":"code","45f643c4":"code","1271f0c9":"code","37ec7210":"code","03ce6390":"code","283f2c86":"code","c06fccaf":"code","96cbf4a9":"code","3a9d0b37":"code","f249ca61":"code","1a52765f":"code","3dd27f8e":"code","837313ea":"code","dce6a2c4":"code","b80e12e9":"code","73604d18":"code","2383b1bc":"code","a4a92207":"code","0cfc76b3":"code","35b104b8":"code","f3a60bff":"code","462831e0":"code","26d63b69":"code","a1bd2d17":"code","6736eddb":"code","57d75cbb":"code","841274cd":"code","a068eba2":"code","a08b05d2":"code","296506e9":"code","890c3e60":"code","f426d5db":"code","f33194ba":"code","dde56615":"markdown","25d5c791":"markdown","2e924cfc":"markdown","b99aec37":"markdown","760fde87":"markdown","787f2422":"markdown","f27f843d":"markdown","591aa2e4":"markdown","53336036":"markdown","fa4c99ea":"markdown","0c7f61f6":"markdown","44fcde6a":"markdown","53958136":"markdown","f3188ae9":"markdown","89c4c098":"markdown","ec0c9f33":"markdown","12b1fe69":"markdown","a1d7f924":"markdown","dd8d6585":"markdown","580a2903":"markdown","5e5a939e":"markdown","2c9241a9":"markdown","1283e642":"markdown","c64f3ae7":"markdown","34cb36ea":"markdown"},"source":{"25216f9b":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\n\nfrom sklearn.tree import DecisionTreeRegressor, export_graphviz\nimport pydot\nfrom IPython.display import Image\nfrom sklearn.externals.six import StringIO\n\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.metrics import pairwise_distances\n\nfrom sklearn.preprocessing import MinMaxScaler, MaxAbsScaler\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.pipeline import Pipeline\n\n%matplotlib inline","fd435d8c":"def rmse(y_true, y_pred):\n    se = (y_true - y_pred)**2\n    mse = se.mean()\n    return np.sqrt(mse)","22368749":"df = pd.read_csv('..\/input\/kc_house_data.csv', index_col='id', parse_dates=['date'])\npd.set_option(\"display.max_columns\", 30)\ndf.head(3)","5da22e5f":"print(df.shape)\nprint()\ndf.info()","88f88563":"sns.pairplot(df)","55629733":"ax = df.plot.scatter(x='long', y='lat',\n                     c=df.price.sort_values(ascending=True), \n                     colormap='inferno', figsize=(15,7))\nax.xaxis.tick_top()","e4706c6a":"plt.figure(figsize=(16, 6))\nax = sns.distplot(df['price'], bins= 500, rug=True)\nax.set_xlim([0, 7000000])\nax.set_title('Price Distribution')\nax.set_ylabel('Frequency');","08d4ad9d":"corrmat = df.corr()\ncols = corrmat.nlargest(30, 'price')['price'].index\ncm = np.corrcoef(df[cols].values.T)\nsns.set(font_scale=1.5)\nplt.figure(figsize=(15, 10))\n\nhm = sns.heatmap(cm, cbar=False, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.yticks(rotation=0)\nplt.xticks(rotation=90)\nplt.show()","8d7e984b":"df.corr(method='pearson').sort_values(['price'], ascending=False)['price'][1:10]","03274f93":"sns.set(rc={'figure.figsize':(10,5)})\nsns.boxplot(data=df, y='price', x='grade')","1a778586":"sns.relplot(data=df, x='sqft_living', y='price',\n                 legend='full', height=5, aspect=2)","65d642ac":"sns.relplot(data=df, x='sqft_living', y='price',hue='grade',\n                 legend='full', height=5, aspect=2)","c992fa3c":"plt.figure(figsize=(16,7))\nsns.barplot(data = df, x='zipcode', y='price')\nplt.xticks(rotation=55)\nplt.title('Price Per Zipcode')","2ce1e881":"df[df.bedrooms > 30]","534b07cb":"df.bedrooms.replace({33:3}, inplace=True)\nprint(df.shape)","26e84d5f":"df[df.sqft_living > 11500]","dcd25477":"print(df.shape)\ndf = df[df.sqft_living < 11500]\nprint(df.shape)","c7a458a9":"df[df.sqft_lot > 1250000]","3421cd89":"print(df.shape)\ndf = df[df.sqft_lot < 1250000]\nprint(df.shape)","9d5a5944":"df[df.sqft_lot15 > 800000]","a091f61f":"print(df.shape)\ndf = df[df.sqft_lot15 < 800000]\nprint(df.shape)","af9b00f6":"df.bedrooms.sort_values().head()","812a7764":"print(df.shape)\ndf = df[df.bedrooms != 0]\nprint(df.shape)","ecb0feeb":"df.bathrooms.sort_values().head()\n#pay attention - there are houses with no bathroom! drop them?","5cbe1ddf":"print(df.shape)\ndf = df[df.bathrooms != 0.0]\nprint(df.shape)","b6e933ee":"df.price.sort_values(ascending=False).head(10)","28aa4ca8":"(df.price>5000000).sum()","45f643c4":"print(df.shape)\ndf = df[df['price']<5000000]\ndf.shape","1271f0c9":"sns.pairplot(df)","37ec7210":"ax = df.plot.scatter(x='long', y='lat',c=df.price.sort_values(ascending=True),colormap='inferno', figsize=(15,8))\nax.xaxis.tick_top()","03ce6390":"#interaction of correlated features:\ndf['sqft_living*grade'] = df['sqft_living']* df['grade']","283f2c86":"df_knn = df.copy()","c06fccaf":"#New Boolean Feature:\ndef renovate(x):\n    if x>0:\n        return 1\n    else:\n        return 0","96cbf4a9":"df['renovated'] = df['yr_renovated'].apply(renovate)","3a9d0b37":"df['year'] = df.date.dt.year","f249ca61":"def age(x):\n    if x['yr_renovated'] == 0:\n        age = x['year'] - x['yr_built']\n    else:\n        age = x['year'] - x['yr_renovated']\n    return age","1a52765f":"df['age'] = df.apply(age, axis=1)\ndf = df.drop(columns='year')\ndf_tree = df.copy()","3dd27f8e":"X = df_tree.drop(columns=['price', 'date', 'sqft_above', 'sqft_lot', 'sqft_lot15', \n                          'floors', 'condition', 'view', 'sqft_basement', 'sqft_living15'])\ny = df_tree.price\n\nX.head(2)","837313ea":"X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=666, test_size=0.27)\n\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","dce6a2c4":"X_train2 = X_train\nX_test2 = X_test\n\nparameters = {\n    'max_depth': range (5, 20),\n    'min_samples_leaf': [5, 10, 15, 20, 25]}\n\ngrid_search = GridSearchCV(DecisionTreeRegressor(), parameters, cv=10, return_train_score=False, scoring='neg_mean_squared_error', n_jobs=4)\ngrid_search.fit(X_train2, y_train)\n\ngrid_results = pd.DataFrame(grid_search.cv_results_)","b80e12e9":"grid_search.best_estimator_","73604d18":"model = grid_search.best_estimator_\n\ny_train_pred = model.predict(X_train2)\nprint(f'Train rmse: {rmse((y_train_pred), (y_train)):.3f}')\ny_test_pred = model.predict(X_test2)\nprint(f'Test rmse: {rmse((y_test_pred), (y_test)):.3f}')","2383b1bc":"dot_data = StringIO() \nexport_graphviz(model, out_file=dot_data, feature_names=X.columns)  \ngraph = pydot.graph_from_dot_data(dot_data.getvalue())[0] \ngraph.write_png(\"dec_tree.png\")\n# Image(graph.create_png(), width=1600) ","a4a92207":"from IPython.display import Image\nImage(\"dec_tree.png\")\n","0cfc76b3":"print(f'Std: {df.price.std():.3f}')\nprint(f'Mean: {df.price.mean():.3f}')","35b104b8":"grid_results.sort_values(by='rank_test_score').head(5)","f3a60bff":"df_scores = grid_results.sort_values(by='rank_test_score')[['params', 'mean_test_score', 'std_test_score' ]]\ndf_scores[['mean_test_score',  'std_test_score']] = np.sqrt(df_scores[['mean_test_score',  'std_test_score']].abs())\ndf_scores.head()","462831e0":"grid_search.best_params_","26d63b69":"df_scores[['mean_test_score',  'std_test_score']].plot(kind='scatter', x='mean_test_score', y='std_test_score', \n                                                       color='lightblue', figsize=(10,5))\n\nP = [df_scores.iloc[0,1] , df_scores.iloc[0,2]]\nplt.plot(P[0], P[1], marker='o', markersize=5, color=\"darkblue\")\n","a1bd2d17":"X = df_knn.drop(columns=['price','date','sqft_above', 'bedrooms',\n                         'bathrooms','sqft_lot', 'floors','view', 'condition','sqft_basement', \n                         'yr_built', 'yr_renovated' ])\ny=df_knn.price\n\nX.head(2)","6736eddb":"X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=666, test_size=0.27)\n\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","57d75cbb":"steps = [('scaler', MinMaxScaler()), \n         ('model', KNeighborsRegressor())]\npipe = Pipeline(steps)\n\n\nparams = {'model__n_neighbors': range(3, 10),\n          'model__metric': ['minkowski', 'manhattan'], \n         'scaler': [MinMaxScaler(), MaxAbsScaler()]}        \n\ngs = GridSearchCV(pipe, param_grid=params, cv=10, return_train_score=False, n_jobs=4, scoring = 'neg_mean_squared_error')\n\ngs.fit(X_train, y_train)\ngs_results = pd.DataFrame(gs.cv_results_)\n","841274cd":"gs.best_estimator_","a068eba2":"gs.best_params_","a08b05d2":"y_pred_train = gs.predict(X_train)\ny_pred_test = gs.predict(X_test)\n\ntrain_rmse = rmse((y_train), (y_pred_train))\ntest_rmse = rmse((y_test),(y_pred_test))\nprint(f'Train RMSE: {train_rmse:.3f}')\nprint(f'Test RMSE: {test_rmse:.3f}')","296506e9":"gs_results.sort_values(by='rank_test_score').head(5)","890c3e60":"df_scores = gs_results.sort_values(by='rank_test_score')[['params', 'mean_test_score', 'std_test_score' ]]\ndf_scores[['mean_test_score',  'std_test_score']] = np.sqrt(df_scores[['mean_test_score',  'std_test_score']].abs())\ndf_scores.head(5)","f426d5db":"gs.best_params_","f33194ba":"df_scores[['mean_test_score',  'std_test_score']].plot(kind='scatter', x='mean_test_score', y='std_test_score', \n                                                       color='lightblue', figsize=(10,5))\n\nP = [df_scores.iloc[0,1] , df_scores.iloc[0,2]]\nplt.plot(P[0], P[1], marker='o', markersize=5, color=\"darkblue\")\n","dde56615":"* sqft_living*grade (high correlated)\n* renovated houses (boolean)\n* house age (combine features)","25d5c791":"# 4. Adding Features:","2e924cfc":"logically, there are no houses without bedrooms or bathrooms, so I dropped them as well:","b99aec37":"## <font color=inferno> Thank You! <\/font>","760fde87":"sqft_living feature:","787f2422":"# 3. Removing outliers:","f27f843d":"sqft_lot15 feature:","591aa2e4":"_____","53336036":"sqft_lot feature:","fa4c99ea":"<font color = 'green'><b>KNearestNeighbors: 125,111 RMSE","0c7f61f6":"_____","44fcde6a":"<font color = 'green'><b>DecisionTreeRegressor:  147,631  RMSE","53958136":"The project may assist insurance companies to price policies,\nhelp contractors to price new houses and estimate demands, \nor even assess disasters by the government.","f3188ae9":"Since I didn't find a normal distribution or linearity in our data, I chose these models:","89c4c098":"### <b>Outline:<\/b>","ec0c9f33":"# 5. Modeling:","12b1fe69":"-----","a1d7f924":"1. Target Variable - Price\n2. Visualization\n3. Removing Outliers\n4. Adding Interactions\n5. Modeling <\/br>\n<b>A. DecisionTreeRegressor()<\/b><\/br>\n<b>B. KNeighborsRegressor()<\/b>","dd8d6585":"* The model used the features <b>sqft_living*grade, lat, long<\/b> and<b> age<\/b> the most.","580a2903":"* I could improve the model by spliting the data to two parameters - expensive or cheap houses using Classification, and then create two different but more accurate models.","5e5a939e":"##  A. <u>Decision Tree Regressor:<\/u>","2c9241a9":"# 2. Visualization","1283e642":"# 1. Target Variable - Price","c64f3ae7":"# <u>__House Price Prediction - King County, USA__<\/u>","34cb36ea":"## B. <u>K Nearest Neighbors:<\/u>"}}