{"cell_type":{"a0c8e15b":"code","d7bb0f46":"code","dcef231d":"code","548bb9e3":"code","23096d31":"code","c444aba2":"code","374d4399":"code","7469a69b":"code","962328e0":"markdown","bc8946e6":"markdown","aa567c5b":"markdown","d6ecab94":"markdown"},"source":{"a0c8e15b":"import numpy as np \nimport pandas as pd\nimport os\n","d7bb0f46":"class CFG:\n    cutoff_point = 1200","dcef231d":"# ","548bb9e3":"xdat = pd.read_csv('..\/input\/ubiquant-market-prediction\/train.csv', usecols = ['investment_id', 'target'], nrows = 200000)","23096d31":"mapping_avg = xdat.groupby('investment_id')['target'].median()\n\nmapping_avg","c444aba2":"# we skip evaluation for now ;-) \n\nimport ubiquant","374d4399":"env = ubiquant.make_env()  \niter_test = env.iter_test()\nfor (test_df, sample_prediction_df) in iter_test:\n#     sample_prediction_df['target'] = 0  # make your predictions here\n    sample_prediction_df['target'] = test_df['investment_id'].map(mapping_avg)\n    sample_prediction_df['target'].fillna(0, inplace = True)\n    env.predict(sample_prediction_df)  ","7469a69b":"sample_prediction_df","962328e0":"# Eval and submit","bc8946e6":"# Model\n","aa567c5b":"# Data\n\nGetting the info on feature ranges is difficult - the entirety of data won't fit in memory, so the usual tricks like `.describe()` are not going to work. Luckily, we can get an idea by examining the summaries displayed in the data tab of the competition:\n* 3141410 unique values in the `row_id` column - so the time dimension does not seem excessive\n* `time_id` runs from 0 to 1219\n* `investment_id` ranges from 0 to 3773 $\\rightarrow$ this is important, as it tells us how many securities are there \n\n\nLet's test the flow with a super basic model: we will predict the average value for each `investment_id`","d6ecab94":"# Functions"}}