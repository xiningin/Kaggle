{"cell_type":{"045ae0c7":"code","7d05295e":"code","15fea2bb":"code","e18c892a":"code","88b74e14":"code","faee47d7":"code","7d4898ec":"code","4c30f337":"code","2b7f9ba4":"code","08d1e6cc":"code","37056c63":"code","13a8a5d3":"code","5b294dca":"code","d2370486":"code","f6574b43":"code","cf46b88c":"code","e94c2d83":"code","b7d28aab":"code","885e3006":"code","6daf065c":"code","7cab1df2":"code","d1d09900":"code","ed75d47c":"code","e24b74c2":"code","f3567fb0":"code","d7d1c22e":"code","be61b56d":"code","53a75966":"code","d87dfe60":"code","090cfb49":"code","b6dcc754":"code","ea0ce0b0":"code","26d2483c":"code","79b05527":"code","6550c199":"code","d787d4b3":"code","2ccd5735":"code","ff10f929":"code","9ff51bc5":"code","c40823d6":"code","e1c81a29":"code","b34bbd37":"code","08ad6c60":"code","bbbea07d":"code","db1dd1db":"code","b66c000a":"code","e5bd642b":"code","a9781fd3":"code","fee968a1":"code","4d2159c0":"code","ac382eb8":"markdown","c5b8243a":"markdown","b5c22984":"markdown","0edad344":"markdown","becd5e5c":"markdown","9080a88d":"markdown","86bc2027":"markdown","2a3bdfb9":"markdown","1522096d":"markdown","da3dd7cd":"markdown","dd594e12":"markdown","672068a1":"markdown","5e9d5aa2":"markdown","79f51196":"markdown","08533c90":"markdown","1d6175ee":"markdown","f70b94ef":"markdown","de119f06":"markdown","4a997819":"markdown","23cd4625":"markdown","9721cc7e":"markdown","48d92327":"markdown","6af8b3eb":"markdown","baa8d8bd":"markdown","71472565":"markdown","d983e94c":"markdown","c96123ae":"markdown","4bde95d1":"markdown","85397a49":"markdown","2a73453a":"markdown","18d0ce59":"markdown"},"source":{"045ae0c7":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport itertools as itt\nimport networkx as nx\nfrom sklearn.preprocessing import MinMaxScaler","7d05295e":"import sys\nfor name, module in sorted(sys.modules.items()):\n    if name in ['numpy', 'pandas', 'seaborn', 'matplotlib', 'networkx', 'sklearn']:\n        if hasattr(module, '__version__'): \n            print(name, module.__version__)","15fea2bb":"train_labels = pd.read_csv(\"..\/input\/train.csv\")\ntrain_labels.head()","e18c892a":"train_labels.shape[0]","88b74e14":"label_names = {\n    0:  \"Nucleoplasm\",  \n    1:  \"Nuclear membrane\",   \n    2:  \"Nucleoli\",   \n    3:  \"Nucleoli fibrillar center\",   \n    4:  \"Nuclear speckles\",\n    5:  \"Nuclear bodies\",   \n    6:  \"Endoplasmic reticulum\",   \n    7:  \"Golgi apparatus\",   \n    8:  \"Peroxisomes\",   \n    9:  \"Endosomes\",   \n    10:  \"Lysosomes\",   \n    11:  \"Intermediate filaments\",   \n    12:  \"Actin filaments\",   \n    13:  \"Focal adhesion sites\",   \n    14:  \"Microtubules\",   \n    15:  \"Microtubule ends\",   \n    16:  \"Cytokinetic bridge\",   \n    17:  \"Mitotic spindle\",   \n    18:  \"Microtubule organizing center\",   \n    19:  \"Centrosome\",   \n    20:  \"Lipid droplets\",   \n    21:  \"Plasma membrane\",   \n    22:  \"Cell junctions\",   \n    23:  \"Mitochondria\",   \n    24:  \"Aggresome\",   \n    25:  \"Cytosol\",   \n    26:  \"Cytoplasmic bodies\",   \n    27:  \"Rods & rings\"\n}\n\nreverse_train_labels = dict((v,k) for k,v in label_names.items())\n\ndef fill_targets(row):\n    row.Target = np.array(row.Target.split(\" \")).astype(np.int)\n    for num in row.Target:\n        name = label_names[int(num)]\n        row.loc[name] = 1\n    return row","faee47d7":"for key in label_names.keys():\n    train_labels[label_names[key]] = 0","7d4898ec":"train_labels = train_labels.apply(fill_targets, axis=1)\ntrain_labels.head()","4c30f337":"target_counts = train_labels.drop([\"Id\", \"Target\"],axis=1).sum(axis=0).sort_values(ascending=False)\nplt.figure(figsize=(15,15))\nsns.barplot(y=target_counts.index.values, x=target_counts.values, order=target_counts.index)","2b7f9ba4":"target_counts.tail()","08d1e6cc":"train_labels[\"number_of_targets\"] = train_labels.drop([\"Id\", \"Target\"],axis=1).sum(axis=1)","37056c63":"count_perc = train_labels.groupby(\"number_of_targets\").count()['Id']\ncount_perc","13a8a5d3":"plt.figure(figsize=(5,5))\nplt.pie(count_perc,\n        labels=[\"%d targets\" % x for x in count_perc.index],\n        autopct='%1.1f%%')\nplt.ylabel('');","5b294dca":"def heatmap(C):\n    mask = np.zeros_like(C)\n    mask[np.triu_indices_from(mask)] = True\n    f, ax = plt.subplots(figsize=(11, 9))\n    hm = sns.heatmap(C,\n                mask=mask, cmap=sns.diverging_palette(220, 10, as_cmap=True),\n                vmax=.3,\n                center=0,\n                square=True,\n                linewidths=1,\n                cbar_kws={\"shrink\": .5})\n    hm.set_facecolor('w')\n    return hm","d2370486":"C = train_labels[train_labels.number_of_targets>1].drop(\n    [\"Id\", \"Target\", \"number_of_targets\"],axis=1\n).corr()\nheatmap(C);","f6574b43":"heatmap(C[abs(C)> 0.1]);","cf46b88c":"import itertools as itt\n\ndef get_correlation_graph(C, threashold = 0.1):\n    return [(i, j, {'weight': abs(C.iloc[i, j])})\n             for i, j in itt.combinations(range(C.shape[0]), 2)\n            if abs(C.iloc[i, j]) >= threashold]\n\nimport networkx as nx","e94c2d83":"G = nx.Graph()\n\nedges = get_correlation_graph(C)\nG.add_edges_from(edges)\ngraph_pos = nx.spring_layout(G)\n\nplt.figure(figsize=(15,15))\nnx.draw(G, graph_pos, alpha=.4)\nlabels = {i : '\\n'.join(C.columns[i].split(' '))\n          for i in set([i for (i, j, k) in edges] + [j for (i, j, k) in edges])}\nnx.draw_networkx_labels(G, graph_pos, labels, font_size=16);","b7d28aab":"def find_counts(special_target, labels):\n    counts = labels[labels[special_target] == 1].drop(\n        [\"Id\", \"Target\", \"number_of_targets\"],axis=1\n    ).sum(axis=0)\n    counts = counts[counts > 0]\n    counts = counts.sort_values()\n    return counts","885e3006":"lyso_endo_counts = find_counts(\"Lysosomes\", train_labels)\n\nplt.figure(figsize=(10,3))\nsns.barplot(x=lyso_endo_counts.index.values, y=lyso_endo_counts.values, palette=\"Blues\");","6daf065c":"rod_rings_counts = find_counts(\"Rods & rings\", train_labels)\nplt.figure(figsize=(15,3))\nsns.barplot(x=rod_rings_counts.index.values, y=rod_rings_counts.values, palette=\"Greens\");","7cab1df2":"peroxi_counts = find_counts(\"Peroxisomes\", train_labels)\n\nplt.figure(figsize=(15,3))\nsns.barplot(x=peroxi_counts.index.values, y=peroxi_counts.values, palette=\"Reds\");","d1d09900":"tubeends_counts = find_counts(\"Microtubule ends\", train_labels)\n\nplt.figure(figsize=(15,3))\nsns.barplot(x=tubeends_counts.index.values, y=tubeends_counts.values, palette=\"Purples\");","ed75d47c":"nuclear_speckles_counts = find_counts(\"Nuclear speckles\", train_labels)\n\nplt.figure(figsize=(15,3))\nsns.barplot(x=nuclear_speckles_counts.index.values, y=nuclear_speckles_counts.values, palette=\"Oranges\")\nplt.xticks(rotation=\"70\");","e24b74c2":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\n\ndef find_counts_normalized(special_target, labels):\n    counts = labels[labels[special_target] == 1].drop(\n        [\"Id\", \"Target\", \"number_of_targets\"],axis=1\n    ).sum(axis=0)\n    counts = pd.DataFrame(scaler.fit_transform(counts.astype(float).values.reshape(-1,1)).reshape(-1),\n                          index=counts.index, columns=[special_target])\n    return counts","f3567fb0":"normed = pd.concat([find_counts_normalized(col, train_labels)\n           for col in sorted(train_labels.drop([\"Id\", \"Target\", \"number_of_targets\"], axis=1).columns)],\n          axis='columns',\n         sort=True)\nheatmap(normed.corr());","d7d1c22e":"img = normed.corr()\nheatmap(img[abs(img) > 0.1]);","be61b56d":"C = img[abs(img) > 0.1]\nG = nx.Graph()\n\nedges = get_correlation_graph(C)\nG.add_edges_from(edges)\ngraph_pos = nx.spring_layout(G)\n\nplt.figure(figsize=(15,15))\nnx.draw(G, graph_pos, alpha=.4)\nlabels = {i : '\\n'.join(C.columns[i].split(' '))\n          for i in set([i for (i, j, k) in edges] + [j for (i, j, k) in edges])}\nnx.draw_networkx_labels(G, graph_pos, labels, font_size=16);","53a75966":"C = img\n\nheatmap(C[abs(img) > 0.15])\nplt.show()\n\nG = nx.Graph()\n\nedges = get_correlation_graph(C, 0.15)\nG.add_edges_from(edges)\ngraph_pos = nx.spring_layout(G)\n\nplt.figure(figsize=(15,15))\nnx.draw(G, graph_pos, alpha=.4)\nlabels = {i : '\\n'.join(C.columns[i].split(' '))\n          for i in set([i for (i, j, k) in edges] + [j for (i, j, k) in edges])}\nnx.draw_networkx_labels(G, graph_pos, labels, font_size=16)\nplt.show();","d87dfe60":"D = C.drop(['Cytosol', 'Nucleoplasm'], axis=0).drop(['Cytosol', 'Nucleoplasm'], axis=1)","090cfb49":"heatmap(D[D > .15])","b6dcc754":"G = nx.Graph()\n\nedges = get_correlation_graph(D, 0.15)\nG.add_edges_from(edges)\ngraph_pos = nx.spring_layout(G)\n\nplt.figure(figsize=(15,15))\nnx.draw(G, graph_pos, alpha=.4)\nlabels = {i : '\\n'.join(D.columns[i].split(' '))\n          for i in set([i for (i, j, k) in edges] + [j for (i, j, k) in edges])}\nnx.draw_networkx_labels(G, graph_pos, labels, font_size=16)\nplt.show();","ea0ce0b0":"plt.figure(figsize=(15,3))\nsns.barplot(x=tubeends_counts.index.values, y=tubeends_counts.values, palette=\"Purples\");\n\nplt.figure(figsize=(15,3))\nsns.barplot(x=rod_rings_counts.index.values, y=rod_rings_counts.values, palette=\"Greens\");","26d2483c":"train_labels[train_labels.number_of_targets == 1].drop(\n    ['Id', 'Target', 'number_of_targets'],\n    axis='columns'\n).sum(axis='rows')","79b05527":"train_labels[(train_labels.number_of_targets == 1) & (train_labels['Rods & rings'] == 1) ]","6550c199":"from os import listdir\n\nfiles = listdir(\"..\/input\/train\")\nfor n in range(10):\n    print(files[n])","d787d4b3":"len(files) \/ 4 == train_labels.shape[0]","2ccd5735":"train_path = \"..\/input\/train\/\"","ff10f929":"def load_image(basepath, image_id):\n    images = np.zeros(shape=(4,512,512))\n    images[0,:,:] = plt.imread(basepath + image_id + \"_green\" + \".png\")\n    images[1,:,:] = plt.imread(basepath + image_id + \"_red\" + \".png\")\n    images[2,:,:] = plt.imread(basepath + image_id + \"_blue\" + \".png\")\n    images[3,:,:] = plt.imread(basepath + image_id + \"_yellow\" + \".png\")\n    return images\n\ndef make_image_row(image, subax, title):\n    subax[0].imshow(image[0], cmap=\"Greens\")\n    subax[1].imshow(image[1], cmap=\"Reds\")\n    subax[1].set_title(\"stained microtubules\")\n    subax[2].imshow(image[2], cmap=\"Blues\")\n    subax[2].set_title(\"stained nucleus\")\n    subax[3].imshow(image[3], cmap=\"Oranges\")\n    subax[3].set_title(\"stained endoplasmatic reticulum\")\n    subax[0].set_title(title)\n    return subax\n\ndef make_title(file_id):\n    file_targets = train_labels.loc[train_labels.Id==file_id, \"Target\"].values[0]\n    title = \" - \"\n    for n in file_targets:\n        title += label_names[n] + \" - \"\n    return title","9ff51bc5":"a = load_image('..\/input\/train\/', 'e403806e-bbbf-11e8-b2bb-ac1f6b6435d0')\nnp.shape(a)","c40823d6":"plt.figure(figsize=(15,15))\nfor i in range(4):\n    plt.subplot(2,2,i+1)\n    plt.imshow(a[i], cmap='gray')","e1c81a29":"plt.figure(figsize=(15,15))\nplt.imshow(a[0], cmap='gray')","b34bbd37":"a = []\na.append(plt.imread('..\/input\/train\/039085dc-bbaa-11e8-b2ba-ac1f6b6435d0_red.png'))\na.append(plt.imread('..\/input\/train\/039085dc-bbaa-11e8-b2ba-ac1f6b6435d0_green.png'))\na.append(plt.imread('..\/input\/train\/039085dc-bbaa-11e8-b2ba-ac1f6b6435d0_blue.png'))\na.append(plt.imread('..\/input\/train\/039085dc-bbaa-11e8-b2ba-ac1f6b6435d0_yellow.png'))","08ad6c60":"plt.figure(figsize=(15,15))\ncmaps = [sns.dark_palette(\"red\", as_cmap=True),\n         sns.dark_palette(\"green\", as_cmap=True),\n         sns.dark_palette(\"blue\", as_cmap=True),\n         sns.dark_palette(\"yellow\", as_cmap=True)]\nfor i in range(4):\n    plt.subplot(2,2,i+1)\n    plt.imshow(a[i], cmap=cmaps[i])","bbbea07d":"def to_rgba2(img):\n    r = np.transpose(np.vectorize(lambda x: (1,0,0,x))(img[0]))\n    g = np.transpose(np.vectorize(lambda x: (0,1,0,x))(img[1]))\n    b = np.transpose(np.vectorize(lambda x: (0,0,1,x))(img[2]))\n    y = np.transpose(np.vectorize(lambda x: (1,1,0,x))(img[3]))\n    return np.array([r,g,b,y])","db1dd1db":"%time r = to_rgba2(a)","b66c000a":"plt.figure(figsize=(15,15))\nfor i in range(4):\n    plt.imshow(r[i])","e5bd642b":"class TargetGroupIterator:\n    \n    def __init__(self, target_names, batch_size, basepath):\n        self.target_names = target_names\n        self.target_list = [reverse_train_labels[key] for key in target_names]\n        self.batch_shape = (batch_size, 4, 512, 512)\n        self.basepath = basepath\n    \n    def find_matching_data_entries(self):\n        train_labels[\"check_col\"] = train_labels.Target.apply(\n            lambda l: self.check_subset(l)\n        )\n        self.images_identifier = train_labels[train_labels.check_col==1].Id.values\n        train_labels.drop(\"check_col\", axis=1, inplace=True)\n    \n    def check_subset(self, targets):\n        return np.where(set(self.target_list).issuperset(set(targets)), 1, 0)\n    \n    def get_loader(self):\n        filenames = []\n        idx = 0\n        images = np.zeros(self.batch_shape)\n        for image_id in self.images_identifier:\n            images[idx,:,:,:] = load_image(self.basepath, image_id)\n            filenames.append(image_id)\n            idx += 1\n            if idx == self.batch_shape[0]:\n                yield filenames, images\n                filenames = []\n                images = np.zeros(self.batch_shape)\n                idx = 0\n        if idx > 0:\n            yield filenames, images\n            ","a9781fd3":"your_choice = [\"Lysosomes\", \"Endosomes\"]\nyour_batch_size = 3","fee968a1":"imageloader = TargetGroupIterator(your_choice, your_batch_size, train_path)\nimageloader.find_matching_data_entries()\niterator = imageloader.get_loader()","4d2159c0":"file_ids, images = next(iterator)\n\nfig, ax = plt.subplots(len(file_ids),4,figsize=(20,5*len(file_ids)))\nif ax.shape == (4,):\n    ax = ax.reshape(1,-1)\nfor n in range(len(file_ids)):\n    make_image_row(images[n], ax[n], make_title(file_ids[n]))","ac382eb8":"### Microtubule ends","c5b8243a":"How many samples do we have?","b5c22984":"## Helper code","0edad344":"### Take-away\n\n* We can see that many targets only have very slight correlations. \n* In contrast, endosomes and lysosomes often occur together and sometimes seem to be located at the endoplasmatic reticulum. \n* In addition we find that the mitotic spindle often comes together with the cytokinetic bridge. This makes sense as both are participants for cellular division. And in this process microtubules and thier ends are active and participate as well. Consequently we find a positive correlation between these targets.","becd5e5c":"## Which targets are correlated?\n\nLet's see if we find some correlations between our targets. This way we may already see that some proteins often come together.","9080a88d":"### Take-away\n\n* We can see that even with very seldom targets we find some kind of grouping with other targets that reveal where the protein structure seems to be located. \n* For example, we can see that rods and rings have something to do with the nucleus whereas peroxisomes may be located in the nucleus as well as in the cytosol.\n* Perhaps this patterns might help to build a more robust model!  ","86bc2027":"## How many targets are most common?","2a3bdfb9":"### Take-Away\n\n* We can see that most common protein structures belong to coarse grained cellular components like the plasma membrane, the cytosol and the nucleus. \n* In contrast small components like the lipid droplets, peroxisomes, endosomes, lysosomes, microtubule ends, rods and rings are very seldom in our train data. For these classes the prediction will be very difficult as we have only a few examples that may not cover all variabilities and as our model probably will be confused during ins learning process by the major classes. Due to this confusion we will make less accurate predictions on the minor classes.\n* Consequently accuracy is not the right score here to measure your performance and validation strategy should be very fine. ","1522096d":"### Take-away\n\n* Most train images only have 1 or two target labels.\n* More than 3 targets are very seldom!","da3dd7cd":"## How do the images look like?\n\n","dd594e12":"Taking back to the analysis of the correlation made above, let's construct a correlation based on the scaled value counts:","672068a1":"Let's try to visualize specific target groups. **In this example we will see images that contain the protein structures lysosomes or endosomes**. Set target values of your choice and the target group iterator will collect all images that are subset of your choice:","5e9d5aa2":"## How do images of specific targets look like?\n\nWhile looking at examples, we can build an batch loader:","79f51196":"Ah, ok, great! It seems that for one image id, there are different color channels present. Looking into the data description of this competition we can find that:\n\n* Each image is actually splitted into 4 different image files. \n* These 4 files correspond to 4 different filter:\n    * a **green** filter for the **target protein structure** of interest\n    * **blue** landmark filter for the **nucleus**\n    * **red** landmark filter for **microtubules**\n    * **yellow** landmark filter for the **endoplasmatic reticulum**\n* Each image is of size 512 x 512","08533c90":"Then, we create the graph:","1d6175ee":"### Rods and rings","f70b94ef":"## How are special and seldom targets grouped?","de119f06":"### Peek into the directory\n\nBefore we start loading images, let's have a look into the train directory to get an impression of what we can find there:","4a997819":"Let's check if the number of files divided by 4 yields the number of target samples:","23cd4625":"### Peroxisomes","9721cc7e":"To spot the correlations, let's select those with absolute value greater than 0.1","48d92327":"It looks like we have got a [hair ball problem!](https:\/\/image.slidesharecdn.com\/bokehdatashader-odscboston2016-160523145441\/95\/visualizing-a-billion-points-w-bokeh-datashader-16-638.jpg?cb=1464015395)\n\nThe graph made with a 0.15 threashold is more easy to understand and get some insight:","6af8b3eb":"That it! Look, the patterns are coherent with the simple correlation based graph and with the counting plots.","baa8d8bd":"There is something wrong here: 'Rods & Rings' should not be associated with 'Microtubule ends'\n","71472565":"Using the same threashold of 0.1.","d983e94c":"## Our goal\n\n* Understand the dataset","c96123ae":"Hey! Isn't it obvious that the most common places in the cell will spot Cytosol and Nucleoplasm? What happens if we drop them?","4bde95d1":"### Nuclear speckles","85397a49":"### Lysosomes and endosomes\n\nLet's start with these high correlated features!","2a73453a":"Now we create a function to get the edges weighted the correlations above 0.1","18d0ce59":"## Which protein organelle localizations occur most often in images?"}}