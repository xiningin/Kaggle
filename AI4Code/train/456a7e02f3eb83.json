{"cell_type":{"fece19af":"code","61bfa021":"code","531beb90":"code","643dd863":"code","c36b442e":"code","e1221fb1":"code","1f17f8ba":"code","0a14232f":"code","6efff9cb":"code","1e4b8aff":"code","227abafc":"code","74276db2":"code","731a717b":"code","8a1640d6":"code","445b1e2e":"code","15235d7d":"code","3daa2e04":"code","ccca1e89":"code","77c0e77a":"code","30e68125":"code","9b995132":"code","b241d888":"code","7aa5b6cd":"code","ef31fa37":"code","059e9965":"code","36c9d29e":"code","04e475a0":"code","ae861c3c":"code","6345cf56":"code","6b320ef3":"code","060edcc1":"code","6f67a945":"code","47629211":"code","0f815e9a":"code","ec8a6bd1":"code","23fb83ab":"code","90f3e733":"code","3eaa2765":"code","f6ad0921":"code","ddb8d34b":"code","f0acfd57":"code","3f0dbe8a":"code","7e6efce8":"code","f59dcc96":"code","f94faef8":"code","b815d14d":"markdown","d3e95d2b":"markdown","2245e9b9":"markdown","b2667c4c":"markdown","40e7455b":"markdown","8b39ebdf":"markdown","dcff8d42":"markdown","e88f6ea3":"markdown","55a0567c":"markdown","8c72a5db":"markdown","26255f87":"markdown","a34eb902":"markdown","08aff1af":"markdown","d9077142":"markdown","c1e9e683":"markdown","0a316d92":"markdown","e6f1781f":"markdown","4dcb425a":"markdown","2389f7e1":"markdown"},"source":{"fece19af":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nplt.style.use(\"dark_background\")\nimport seaborn as sns\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)","61bfa021":"df=pd.read_csv(\"..\/input\/car-price-prediction\/CarPrice_Assignment.csv\")","531beb90":"df","643dd863":"df.head()","c36b442e":"df.tail()","e1221fb1":"df.dtypes","1f17f8ba":"df.columns","0a14232f":"df.shape","6efff9cb":"df.size","1e4b8aff":"df.info()","227abafc":"df.describe(include='all')","74276db2":"df.isnull().sum()","731a717b":"df.duplicated().sum()","8a1640d6":"df.skew()","445b1e2e":"plt.figure(figsize=(10,100))\nsns.countplot(y=\"CarName\", hue=\"fueltype\",  data=df)\nplt.show()","15235d7d":"plt.figure(figsize=(10,100))\nsns.countplot(y=\"CarName\", hue=\"carbody\", data=df)","3daa2e04":"sns.countplot(x=\"fueltype\", data=df)","ccca1e89":"sns.scatterplot(data=df, x=\"horsepower\", y=\"price\", hue=\"fueltype\")","77c0e77a":"sns.scatterplot(data=df, x=\"citympg\", y=\"price\", hue=\"fueltype\")","30e68125":"sns.scatterplot(data=df, x=\"citympg\", y=\"price\", hue=\"doornumber\")","9b995132":"sns.scatterplot(data=df, x=\"citympg\", y=\"price\", hue=\"aspiration\")","b241d888":"colors = sns.color_palette('pastel')[0:5]\ndf[\"enginelocation\"].value_counts()","7aa5b6cd":"values=[ 202,3]\nlabels=[\"front\",\"rear\"]\ncolors = sns.color_palette('pastel')[1:20]\nplt.pie(values,labels=labels,colors=colors)\nplt.title(\"engine location\")","ef31fa37":"df.corr()","059e9965":"''''d=pd.get_dummies(d,\n                 columns=['','Ever_Renovate','Waterfront_View'],\n                 drop_first=True)'''\nplt.figure(figsize=(20,20))\nsns.heatmap(df.corr(),annot = True)\nplt.show()","36c9d29e":"df","04e475a0":"def LABEL_ENCODING(c1):\n    from sklearn import preprocessing\n    # label_encoder object knows how to understand word labels.\n    label_encoder = preprocessing.LabelEncoder()\n \n    # Encode labels in column 'species'.\n    df[c1]= label_encoder.fit_transform(df[c1])\n \n    df[c1].unique()\n    return df\n","ae861c3c":"LABEL_ENCODING(\"CarName\")","6345cf56":"LABEL_ENCODING(\"fueltype\")\nLABEL_ENCODING(\"aspiration\")\nLABEL_ENCODING(\"doornumber\")\nLABEL_ENCODING(\"carbody\")\nLABEL_ENCODING(\"drivewheel\")\nLABEL_ENCODING(\"enginelocation\")","6b320ef3":"LABEL_ENCODING(\"enginetype\")\nLABEL_ENCODING(\"cylindernumber\")\nLABEL_ENCODING(\"fuelsystem\")","060edcc1":"from sklearn.preprocessing import StandardScaler\nscaler=StandardScaler()\nY= df['price']\nX= scaler.fit_transform(df.drop([\"price\",\"car_ID\"],axis=1))\nX= pd.DataFrame(data=X,columns = df.drop(columns=['price','car_ID']).columns)\nX.head()","6f67a945":"X.corr()","47629211":"## pair of independent ariables with correlation greater than 0.5 \nk=X.corr()\n## syntax\n##Result=[(element of final ist) x (how to take different values) x (condition to store the final element)]\nz=[[str(i),str(j)] for i in k.columns for j in k.columns if(k.loc[i,j]>abs(0.5))&(i!=j)]\nz,len(z)","0f815e9a":"#importing varience inflation factor from the stats model\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\n\nvif_data=X\n\n## calculating VIF for every column\n\nVIF=pd.Series([variance_inflation_factor(vif_data.values,i) for i in range(vif_data.shape[1])],index=vif_data.columns)\nVIF","ec8a6bd1":"def MC_remover(data):\n    vif=pd.Series([variance_inflation_factor(data.values,i)for i in range(data.shape[1])],index=data.columns)\n    if vif.max()>5:\n        print(vif[vif == vif.max()].index[0],'has been removed')\n        data = data.drop(columns=[vif[vif==vif.max()].index[0]])\n        return data\n    else:\n        print(\"No multicollinearity present anymore\")\n        return data","23fb83ab":"for i in range(10):\n    vif_data=MC_remover(vif_data)\nvif_data.head()\n    ","90f3e733":"## calculating VIF for remaining columns\nVIF=pd.Series([variance_inflation_factor(vif_data.values,i) for i in range(vif_data.shape[1])],index=vif_data.columns)\nVIF,len(vif_data.columns)\n","3eaa2765":"x=vif_data\ny=df['price']","f6ad0921":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=101)\n\nx_train.shape,x_test.shape,y_train.shape,y_test.shape","ddb8d34b":"from sklearn.linear_model import LinearRegression\nlr=LinearRegression(normalize =True)\nlr.fit(x_train,y_train)","f0acfd57":"lr.coef_ #output is all the coeffients of the independent variables such as mo,m1,m2,m3,m4....\n#as data is normalized so value of intercept mo=0","3f0dbe8a":"prediction=lr.predict(x_test)\nprediction","7e6efce8":"lr.score(x_test,y_test)","f59dcc96":"coefficients_table=pd.DataFrame({'column':x_train.columns,\n                                'coefficients':lr.coef_})\ncoefficients_table=coefficients_table.sort_values(by=\"coefficients\")","f94faef8":"plt.figure(figsize=(8,6),dpi=120)\nx=coefficients_table['column']\ny=coefficients_table['coefficients']\nplt.barh(x,y)\nplt.xlabel(\"coefficients\")\nplt.ylabel(\"variables\")\nplt.title(\"Normalized coefficients\")","b815d14d":"# Importing libraries","d3e95d2b":"# Loading Dataset","2245e9b9":"# Feature Scaling","b2667c4c":"# Treating Multicollinearity","40e7455b":"#### observatio:\n\n1. Cars with four doors have most sales and best citympg mostly\n\n2. cars with two doors have less citympg","8b39ebdf":"# Model coefficients","dcff8d42":"#### observation:\n\n1.Cost of cars with higher horse power is higher when compared to lower horse power, we can conclude horse power is directly proportional to price to some extent\n\n2.Diesel cars have less horse power when compared to gas cars","e88f6ea3":"# Data Visulization","55a0567c":"#### Observation:\n\n1.Gas cars have more demand then diesel vehicles\n\n2.some cars models only have gas cars (buck electra 225 custom, buck century luxus(sw),buck century,buck skyhawk,nissan gt_r,peugeot 304, puegeot 505 turbo diesel,toyota celica gt,vokswagen type 3,volkswagen rabbit custom,volvo 246)\n\n\n3.peugeot 504,subaru di,toyota corona,toyota corolla have most sales compared to others\n","8c72a5db":"#### obsevation:\n\n1. cars of gas and disel of citympg above 20 are mostly purchased ","26255f87":"#### observations:\n\n1. The variables in the above graph which have positive values are directly proportional to price and which has negative values are indirectly proportional to car price","a34eb902":"# Calculating variance inflation factor","08aff1af":"# Eplanatory Data Analysis","d9077142":"#### observation :\n\n1.most of the engine location are in front","c1e9e683":"####  obsevation:\n\n1. gas cars have much demand compared to diesel cars","0a316d92":"# Feature Selection","e6f1781f":"# Prediction Using Linear Regression","4dcb425a":"#### observation:\n1.hatchback and sedan body types have most of the sales\n\n2.wagon has normal sales and convertable,hardtop has least sales","2389f7e1":"# Data Preprocessing (Encoding)"}}