{"cell_type":{"7461181d":"code","255bd108":"code","bbfb4da8":"code","2f6a5471":"code","905ca3b9":"code","ade10319":"code","0f31b642":"code","505b2f39":"code","63e51834":"markdown","da51a0d3":"markdown","2f270409":"markdown","95030734":"markdown","3a97dc4d":"markdown","12f3eed7":"markdown"},"source":{"7461181d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","255bd108":"df = pd.read_excel(\"\/kaggle\/input\/CustomerData.xlsx\")","bbfb4da8":"print(\"The Shape of our Dataset is\",df.shape)\nprint(df.shape[0], \"Rows\")\nprint(df.shape[1], \"Columns\")","2f6a5471":"df.dtypes","905ca3b9":"df.isnull().sum()","ade10319":"df.describe()","0f31b642":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.figure(figsize= (12, 5))\nsns.countplot(x = \"customer\", data = df)\nplt.title(\"Count of Customer Type\")\nplt.show()\n\nplt.figure(figsize= (12, 5))\nsns.countplot(x = \"SEG\", data = df)\nplt.title(\"Distrbution of Segment\")\nplt.show()\n\nplt.figure(figsize= (12, 5))\nsns.countplot(x = \"public_sector\", data = df)\nplt.title(\"Public Sector (1 - Yes) vs Non-Public Sector (0 - No)\")\nplt.show()\n\nplt.figure(figsize= (12, 5))\nsns.countplot(x = \"us_region\", data = df)\nplt.title(\"Distribution of US Regions\")\nplt.show()\n\nplt.figure(figsize= (18, 5))\nsns.countplot(x = \"STATE\", data = df)\nplt.title(\"Distribution by State\")\nplt.show()","505b2f39":"print('Average Corporate Revenue', round(df['corp_rev'].mean(),2))\nprint('Average Revenue Last Year', round(df['rev_lastyr'].mean(),2))\nprint('Average Revenue This Year', round(df['rev_thisyr'].mean(),2))\nprint('Average Total Revenue', round(df['tot_revenue'].mean(),2))\nprint('Average Years Purchased', round(df['yrs_purchase'].mean(),2))\nprint('Average Estimated Spend', round(df['est_spend'].mean(),2))\n","63e51834":"There are only a few missing values. This is something we would want to validate with the team to see if they would like to remove these variables, or possibly replace them with the average for the column","da51a0d3":"Being that there are large numbers in the dataset for our revenue variables the describe function doesn't do a good job of letting us know a summary of the various numerical variables. Python also differentiate between what is key and what will actually be used in further analysis. Take a look at cust_id. We would never use these for further analysis, but since they are numeric Python provides the descriptive statistics for these variables.","2f270409":"This is a little bit easier to digest and look at versus the describe() table that was produced earlier. This is just the beginning of an exporatory analysis, but it should be enough to bring back to the team to let them know our thoughts on next steps","95030734":"Let's create a few visuals to help understand the breakout of the data","3a97dc4d":"Let's take a look at the name of the columns along with what type of variable they are","12f3eed7":"Let's take a look at the variables to see if any of them have missing values"}}