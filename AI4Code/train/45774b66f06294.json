{"cell_type":{"c93fa35f":"code","9c7a4473":"code","c6489e58":"code","cfd8be8c":"code","ba9aff01":"code","62e4c5d6":"code","89c039c9":"code","da860bc8":"code","d46c421c":"code","6930deba":"code","3c34b82d":"code","9f5eb8a0":"code","cdec60b3":"code","0bc9ef05":"code","78095953":"code","c9badcf8":"code","7268dd74":"code","ed3c370d":"code","6270f760":"code","3818a7f1":"code","27577074":"code","2a394f93":"code","afdfe805":"code","29cc84bb":"code","7983479b":"code","dc09454e":"code","f09396fa":"code","253c6521":"code","944b062a":"code","3872a638":"code","593c73fe":"code","7685b69f":"code","96bb7296":"code","6ad5fa1f":"code","ef39ad3c":"code","f83c970f":"code","d83e0606":"code","7a1ede36":"code","f2eb1914":"code","d30a33fe":"code","567c0d09":"code","5034be23":"code","23ecfdb9":"code","6f90d289":"code","876aa74e":"code","8266cac0":"code","51a9441e":"code","640125f8":"code","48c052a4":"code","44762142":"code","815b7300":"code","e772c2b2":"code","74689e59":"code","9ef2eb8a":"code","96053c6b":"code","fb4b089c":"code","9049e8e0":"code","e483288e":"code","14d6157f":"code","4eb48048":"code","c88552d3":"code","69f5837c":"code","dcc6f3a8":"markdown","cbf6cfae":"markdown","c597dc19":"markdown","830cece0":"markdown","71022bf8":"markdown","61399697":"markdown","ef72009a":"markdown","cfc78371":"markdown"},"source":{"c93fa35f":"import pandas as pd","9c7a4473":"address = '..\/input\/skin-cancer-mnist-ham10000\/HAM10000_metadata.csv'\ndf = pd.read_csv(address)","c6489e58":"df","cfd8be8c":"df.info()","ba9aff01":"df.isna().sum()","62e4c5d6":"df['dx'].value_counts()","89c039c9":"df['dx_type'].value_counts()","da860bc8":"dx_dict = {\n    'nv': 'Melanocytic nevi',\n    'mel': 'Melanoma',\n    'bkl': 'Benign keratosis-like lesions ',\n    'bcc': 'Basal cell carcinoma',\n    'akiec': 'Actinic keratoses',\n    'vasc': 'Vascular lesions',\n    'df': 'Dermatofibroma'\n}\n\ndf['diagnosis'] = df['dx'].map(dx_dict.get) ","d46c421c":"df['diagnosis'].value_counts()","6930deba":"df['sex'].value_counts()","3c34b82d":"df['localization'].value_counts()","9f5eb8a0":"df['age'].value_counts()","cdec60b3":"from sklearn.impute import SimpleImputer","0bc9ef05":"import numpy as np","78095953":"imputer = SimpleImputer(missing_values= np.nan,strategy='mean')  \nCar_impute = imputer.fit(df[['age']])\ndf['age'] = Car_impute.transform(df[['age']]).ravel()","c9badcf8":"df.isna().sum()","7268dd74":"import matplotlib.pyplot as plt","ed3c370d":"import seaborn as sns","6270f760":"df['diagnosis'].value_counts().plot(kind='bar')","3818a7f1":"sns.scatterplot('age','diagnosis',data=df)","27577074":"from sklearn import preprocessing","2a394f93":"label_encoder = preprocessing.LabelEncoder()","afdfe805":"df1 = df.copy()","29cc84bb":"lesion_id_cat = label_encoder.fit_transform(df1['lesion_id'])\nlesion_id_cat = pd.DataFrame({'lesion_id_cat': lesion_id_cat})","7983479b":"image_id_cat = label_encoder.fit_transform(df1['image_id'])\nimage_id_cat = pd.DataFrame({'image_id_cat': image_id_cat})","dc09454e":"dx_cat = label_encoder.fit_transform(df1['dx'])\ndx_cat = pd.DataFrame({'dx_cat': dx_cat})","f09396fa":"dx_type_cat = label_encoder.fit_transform(df1['dx_type'])\ndx_type_cat = pd.DataFrame({'dx_type_cat': dx_type_cat})","253c6521":"sex_cat = label_encoder.fit_transform(df1['sex'])\nsex_cat = pd.DataFrame({'sex_cat': sex_cat})","944b062a":"localization_cat = label_encoder.fit_transform(df1['localization'])\nlocalization_cat = pd.DataFrame({'localization_cat': localization_cat})","3872a638":"diagnosis_cat = label_encoder.fit_transform(df1['diagnosis'])\ndiagnosis_cat = pd.DataFrame({'diagnosis_cat': diagnosis_cat})","593c73fe":"df1.lesion_id = lesion_id_cat\ndf1.image_id = image_id_cat\ndf1.dx = dx_cat\ndf1.dx_type = dx_type_cat\ndf1.sex = sex_cat\ndf1.localization = localization_cat\ndf1.diagnosis = diagnosis_cat","7685b69f":"df1","96bb7296":"from sklearn.preprocessing import StandardScaler","6ad5fa1f":"scaled_features = df1.copy()","ef39ad3c":"col_names = ['lesion_id', 'image_id' , 'dx', 'dx_type', 'age', 'sex', 'localization', 'diagnosis']\nfeatures = scaled_features[col_names]\nscaler = StandardScaler().fit(features.values)\nfeatures = scaler.transform(features.values)","f83c970f":"scaled_features[col_names] = features\nscaled_features","d83e0606":"X = scaled_features.drop(columns=['diagnosis'],axis=1)","7a1ede36":"from sklearn.model_selection import train_test_split","f2eb1914":"y = df.dx","d30a33fe":"y = [1 if each == 'bkl' or each == 'nv' or each == 'df' else 0 for each in df.dx]","567c0d09":"X_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.2, random_state=1)","5034be23":"from sklearn.svm import SVC","23ecfdb9":"model_svc = SVC()","6f90d289":"model_svc.fit(X_train, y_train)","876aa74e":"model_svc.score(X_train,y_train)","8266cac0":"model_svc.score(X_test,y_test)","51a9441e":"y_predict = model_svc.predict(X_test)","640125f8":"from sklearn.metrics import classification_report , confusion_matrix","48c052a4":"import numpy as np","44762142":"cm = np.array(confusion_matrix(y_test, y_predict, labels=[1,0]))\nconfusion = pd.DataFrame(cm, index=['is_cancer', 'is_healthy'],\n                         columns=['predicted_cancer','predicted_healthy'])\nconfusion","815b7300":"sns.heatmap(confusion, annot=True)","e772c2b2":"print(classification_report(y_test, y_predict))","74689e59":"y = df1['diagnosis']","9ef2eb8a":"X_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.2, random_state=1)","96053c6b":"model_svc.fit(X_train, y_train)","fb4b089c":"model_svc.score(X_train,y_train)","9049e8e0":"model_svc.score(X_test,y_test)","e483288e":"y_predict = model_svc.predict(X_test)","14d6157f":"print(classification_report(y_test, y_predict))","4eb48048":"import itertools","c88552d3":"def confusion_mat (cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n   \n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')","69f5837c":"confusion_mat(confusion_matrix(y_test, y_predict), classes = range(7)) ","dcc6f3a8":"### Multi labels classification","cbf6cfae":"'dx' is short for diagnosis (for the patient) and \"dx_type\" is how the diagnosis was made. A bit more about each type of diagnosis and how they were made is available in the original paper https:\/\/arxiv.org\/abs\/1803.10417","c597dc19":"### Data preparation","830cece0":"### Two labels classification (M = 0 , B = 1)","71022bf8":"## Predcition","61399697":"**SVM**","ef72009a":"### Exploratory Data Analysis","cfc78371":"### Normalization"}}