{"cell_type":{"9716bdb4":"code","f9fe5bd8":"code","96acdeb1":"code","20d4d84a":"code","8e005263":"code","d5693655":"code","403d4a6f":"code","380b563a":"markdown"},"source":{"9716bdb4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nfrom scipy.stats import norm\nfrom xgboost.sklearn import XGBRegressor\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import make_scorer, mean_squared_error\nfrom scipy import stats\nimport warnings\nfrom math import sqrt\nwarnings.filterwarnings('ignore')\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\nprint(os.listdir(\".\"))\n\n# Any results you write to the current directory are saved as output.","f9fe5bd8":"random_state = 32\nfolds = 3","96acdeb1":"def rmse(actual, predict):\n    return sqrt(mean_squared_error(actual, predict))\n\nscoring = make_scorer(rmse, greater_is_better = False)","20d4d84a":"train = pd.read_csv('..\/input\/preprocess\/train_pcs.csv')\ntrain.columns","8e005263":"y_train = train['SalePrice']\npredictor_cols = ['pc' + str(i) for i in range(30)]\nx_train = train[predictor_cols]\nmodel = XGBRegressor(n_estimators = 200, learning_rate = 0.1, subsample = 0.75, colsample_bytree = 0.75, gamma = 0.01, reg_alpha = 1, reg_lambda = 0, random_state = random_state)\npipe = Pipeline([('model', model)])\nparam_grid = {\n    'model__max_depth': [3, 6]\n}\ncv = GridSearchCV(pipe, cv=folds, param_grid=param_grid, scoring=scoring)\ncv.fit(x_train, y_train)\nprint('best_params_={}\\nbest_score_={}'.format(repr(cv.best_params_), repr(cv.best_score_)))","d5693655":"# Read the test data\ntest = pd.read_csv('..\/input\/preprocess\/test_pcs.csv')\n# Treat the test data in the same way as training data. In this case, pull same columns.\nx_test = test[predictor_cols]\n# Use the model to make predictions\npreds = cv.predict(x_test)\npreds = [np.exp(y) - 1 for y in preds]\n# We will look at the predicted prices to ensure we have something sensible.\nsubmission = pd.DataFrame({'Id': test['Id'], 'SalePrice': preds})\nsubmission.head()","403d4a6f":"submission.to_csv('submission.csv', index=False)\nprint(os.listdir(\".\"))","380b563a":"best_score_=-0.16842418371673717 (30 pc)"}}