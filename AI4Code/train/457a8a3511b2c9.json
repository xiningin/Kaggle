{"cell_type":{"3e5f0ef3":"code","154f8d62":"code","cf68d91e":"code","d6922ccb":"code","2eb660d6":"code","654c3240":"code","7d5cb0bc":"code","ec856b93":"code","548ff7b4":"code","9f54d6dd":"code","1a71069e":"code","6a347faf":"code","5f0f0cc5":"code","25cc8a41":"code","25f7a27b":"code","0702d543":"code","e3d2b606":"code","d4929d6e":"code","db90e0a2":"code","03ae20e9":"code","d44f7d0f":"code","52212482":"code","8a5613ff":"code","b837af85":"code","214e6eeb":"code","bb479eac":"code","fb6d4cb7":"code","24a76743":"code","ae3533b2":"code","b5a990f1":"code","ee788e52":"code","bccb9163":"code","817e6eed":"code","3505a2bb":"code","3f9080a8":"code","c11ec7c7":"code","6044078f":"code","f9bf0228":"code","11ee6fe2":"code","1e82ebac":"code","98030efa":"code","6bf70edd":"code","a181ac2a":"code","f21edcdc":"code","888fc762":"code","dd572b89":"code","5b4b62bb":"code","d030c6ab":"code","c035f9a9":"code","ca424daf":"code","861e2130":"code","1ce0e0ca":"code","9f743cc0":"code","9bb4b676":"code","27a6b27f":"code","5553ac88":"code","f42fb961":"code","c9b190ec":"code","2ab798d5":"code","05c07a8a":"code","8195987f":"code","6db55e0c":"code","02844993":"code","4e81d2a6":"code","f49ebce1":"code","4ef33dd1":"code","71718fb9":"code","8cb0cc29":"code","f8a20d93":"code","4f68fee5":"code","31e08c6c":"code","59b118a9":"code","dd7952b9":"code","844449e3":"code","07bbf071":"code","762cb56c":"code","e559b09e":"code","b99e721e":"code","76b404e5":"code","3e58c582":"code","ac712b91":"code","814c00e5":"code","73cd471c":"code","d1236c44":"code","77dcb04b":"markdown","8289b2eb":"markdown","8bb10067":"markdown","957b65d3":"markdown","4eb08879":"markdown","019c5d88":"markdown","0c915b98":"markdown","960f04b7":"markdown","c62fb78c":"markdown","7a01e4c4":"markdown","994db296":"markdown","188428e2":"markdown","6476d619":"markdown","91ce625b":"markdown","1d63c76b":"markdown","70a2728b":"markdown","cefbf37a":"markdown","7b982766":"markdown","b9a20d43":"markdown","4f4363fd":"markdown","6b3caf6f":"markdown","76066ad8":"markdown","08b111ba":"markdown","ac49989c":"markdown","c32607c6":"markdown","a2034c2d":"markdown","57a9f5f6":"markdown","79dd3aa9":"markdown","efde78ed":"markdown","680f7f6b":"markdown","b7d727a7":"markdown","b8cbbf0e":"markdown","cb1dd45a":"markdown","50b67d3b":"markdown","e64c4e24":"markdown","5e3cd368":"markdown","063dcb4d":"markdown","3ec1a21a":"markdown","986cbc9f":"markdown","b0a499e9":"markdown","af5f4911":"markdown","a6cf8fcf":"markdown","fd149aaa":"markdown","2d5102e7":"markdown","f1c312a7":"markdown","1721382d":"markdown","24689b65":"markdown","9c6bbc6e":"markdown"},"source":{"3e5f0ef3":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn import datasets, linear_model\nfrom sklearn.linear_model import LogisticRegression, LinearRegression\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score, mean_squared_error, r2_score\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.preprocessing import PolynomialFeatures\n%matplotlib inline \nimport os\nimport plotly.graph_objs as ptly\nfrom plotly.offline import init_notebook_mode, iplot\nimport math\nfrom collections import Counter\nfrom sklearn.model_selection import train_test_split","154f8d62":"data = pd.read_csv('..\/input\/fifa19\/data.csv', header=0)","cf68d91e":"data.head(5)","d6922ccb":"model_data = data.head(10000)","2eb660d6":"model_data.drop(columns=['Unnamed: 0', 'ID', 'Photo', 'Flag', 'Club', 'Club Logo', 'Special', 'Real Face', 'Release Clause',\n                   'Joined', 'Loaned From', 'Contract Valid Until'], inplace=True)","654c3240":"model_data.head(2)","7d5cb0bc":"model_data.isnull().sum()","ec856b93":"model_data.shape","548ff7b4":"def position_conversion(value):\n    \n    if value == 'RF' or value == 'ST' or value == 'LF' or value == 'RS' or value == 'LS' or value == 'CF':\n        return 'F'\n        \n    elif value == 'LW' or value == 'RCM' or value == 'LCM' or value == 'LDM' or value == 'CAM' or value == 'CDM' or value == 'RM' \\\n         or value == 'LAM' or value == 'LM' or value == 'RDM' or value == 'RW' or value == 'CM' or value == 'RAM':\n        return 'M'\n    \n    elif value == 'RCB' or value == 'CB' or value== 'LCB' or value == 'LB' or value == 'RB' or value == 'RWB' or value == 'LWB':\n        return 'D'\n    \n    else:\n        return value\nmodel_data['Position'] = model_data['Position'].apply(position_conversion)","9f54d6dd":"model_data['Position'].unique()","1a71069e":"def position_setting(value):\n  if value == 'GK':\n    return 0\n  elif value == 'D':\n    return 1\n  elif value == 'M':\n    return 2\n  else:\n    return 3\nmodel_data['Position'] = model_data['Position'].apply(position_setting)","6a347faf":"model_data['Position'].unique()","5f0f0cc5":"model_data[['Height', 'Weight']].head(5)","25cc8a41":"# Height conversion to Cms\ndef height_convert(value):\n  get_split_val = value.split(\"'\")\n  update_height = (int(get_split_val[0])*30.48) + (int(get_split_val[1])*2.54)\n  return update_height\nmodel_data['Height'] = model_data['Height'].apply(height_convert)","25f7a27b":"# Weight conversion to pounds\ndef weight_convert(value):\n  update_weight = int(value.split('lbs')[0])\n  return update_weight\nmodel_data['Weight'] = model_data['Weight'].apply(weight_convert)","0702d543":"model_data[['Height', 'Weight']].head(5)","e3d2b606":"def value_wage_conversion(value):\n  if value[-1] == 'M':\n    value = value[1:-1]\n    value = float(value) * 1000000\n    return value\n  elif value[-1] == 'K':\n    value = value[1:-1]\n    value = float(value) * 1000\n    return value\n  else:\n    return 0\nmodel_data['Value'] = model_data['Value'].apply(value_wage_conversion)","d4929d6e":"model_data['Wage'] = model_data['Wage'].apply(value_wage_conversion)","db90e0a2":"model_data[['Value', 'Wage']].head(5)","03ae20e9":"def skill_conversion(value):\n  if type(value) == str:\n    if value == 'NaN':\n      return 0\n    else:\n      return int(value[0:2]) + int(value[-1])\n  elif math.isnan(value):\n    return 0\n  else:\n    return value\nall_skills = ['LS', 'ST', 'RS', 'LW', 'LF', 'CF', 'RF', 'RW', 'LAM', 'CAM',\n       'RAM', 'LM', 'LCM', 'CM', 'RCM', 'RM', 'LWB', 'LDM', 'CDM', 'RDM',\n       'RWB', 'LB', 'LCB', 'CB', 'RCB', 'RB']\nfor i in all_skills:\n  model_data[i] = model_data[i].apply(skill_conversion)","d44f7d0f":"model_data['Preferred Foot'].unique()","52212482":"# setting left foot as 0 and right foot as 1\ndef foot_fix(value):\n  if value == 'Left':\n    return 0\n  else:\n    return 1\nmodel_data['Preferred Foot'] = model_data['Preferred Foot'].apply(foot_fix)","8a5613ff":"model_data.drop(columns=['Jersey Number'], inplace=True)","b837af85":"model_data['Body Type'].unique()","214e6eeb":"def body_type_fix(value):\n  if value == 'Messi':\n    return 'Lean'\n  elif value == 'C. Ronaldo':\n    return 'Normal'\n  elif value == 'Neymar':\n    return 'Lean'\n  elif value == 'Courtois':\n    return 'Normal'\n  elif value == 'PLAYER_BODY_TYPE_25':\n    return 'Normal'\n  elif value == 'Shaqiri':\n    return 'Stocky'\n  elif value == 'Akinfenwa':\n    return 'Normal'\n  else:\n    return value\nmodel_data['Body Type'] = model_data['Body Type'].apply(body_type_fix)","bb479eac":"model_data['Work Rate'].unique()","fb6d4cb7":"def work_rate_conversion(value):\n  if value == 'Medium\/ Medium':\n    return 'Medium'\n  elif value == 'High\/ Low':\n    return 'Medium'\n  elif value == 'High\/ Medium':\n    return 'High'\n  elif value == 'High\/ High':\n    return 'High'\n  elif value == 'Medium\/ High':\n    return 'Medium'\n  elif value == 'Medium\/ Low':\n    return 'Low'\n  elif value == 'Low\/ High':\n    return 'Medium'\n  elif value == 'Low\/ Medium':\n    return 'Low'\n  elif value == 'Low\/ Low':\n    return 'Low'\n  else:\n    return value\nmodel_data['Work Rate'] = model_data['Work Rate'].apply(work_rate_conversion)","24a76743":"model_data.isnull().sum()","ae3533b2":"model_data","b5a990f1":"model_data.info()","ee788e52":"model_data.shape","bccb9163":"model_data.describe","817e6eed":"model_data.head(5)","3505a2bb":"model_data.tail(5)","3f9080a8":"model_data['Potential'].describe()","c11ec7c7":"# Creating a new dataframe for players potential to show in a graph in regarding to player names!!\npotential = pd.DataFrame({\"Name\": model_data.Name, \"Value\": model_data.Potential})\npotential = potential.tail(20)\nplt.figure(figsize=(6,3))\nsns.barplot(x = potential['Name'],y = potential['Value'])\nplt.xticks(rotation = 75)\nplt.xlabel(\"Name\")\nplt.ylabel(\"Potential\")\nplt.show()","6044078f":"total_country = Counter(model_data.Nationality)\nselect_country_list = total_country.most_common(25)\ncountry, tot_num = zip(*select_country_list)\ncountry, tot_num = list(country), list(tot_num)\nplt.figure(figsize=(15,12))\nsns.barplot(x = country,y = tot_num)\nplt.xticks(rotation = 75)\nplt.xlabel(\"Nationality\")\nplt.ylabel(\"Total Number of player\")\nplt.show()","f9bf0228":"# position wise total player count\nplt.figure(figsize=(10,6))\nsns.countplot(model_data.Position,order=model_data.Position.value_counts().index)\nplt.xticks(rotation=90)\nplt.title(\"Position\",fontsize=15)","11ee6fe2":"# plotting against age distribution\nmake_list = [\"Senior (more than 27 years)\" if age > 27 else \"Junior (age below 23)\" if age < 23 else \"Prime Age (age between 23 and 27)\"  for age in model_data.Age]\nmake_df = pd.DataFrame({\"Age\": make_list})\nplt.figure(figsize=(10,6))\nsns.countplot(x = make_df.Age)\nplt.ylabel(\"Number of Players Age\")\nplt.title(\"Players age\",fontsize=15)","1e82ebac":"def configure_plotly_browser_state():\n  import IPython\n  display(IPython.core.display.HTML('''\n        <script src=\"\/static\/components\/requirejs\/require.js\"><\/script>\n        <script>\n          requirejs.config({\n            paths: {\n              base: '\/static\/base',\n              plotly: 'https:\/\/cdn.plot.ly\/plotly-1.5.1.min.js?noext',\n            },\n          });\n        <\/script>\n        '''))","98030efa":"configure_plotly_browser_state()\ninit_notebook_mode(connected=False)\n\n\nplt1 = dict(type='choropleth',\n              locations=country,\n              z=tot_num,\n              locationmode='country names'\n             )\n\nlayout = ptly.Layout(title=' Total Number of Players in each Country',\n                   geo=dict(showocean=True,\n                            projection=dict(type='natural earth'),\n                        )\n                  )\n\nfig = ptly.Figure(data=[plt1], layout=layout)\niplot(fig)","6bf70edd":"configure_plotly_browser_state()\ninit_notebook_mode(connected=False)\n\nx = model_data['Age']\ndata = [ptly.Histogram(x=x)]\n\niplot(data, filename='age distribution')","a181ac2a":"configure_plotly_browser_state()\ninit_notebook_mode(connected=False)\nx0 = model_data.Height\nx1 = model_data.Weight\n\ntrace0 = ptly.Histogram(\n    x=x0\n)\ntrace1 = ptly.Histogram(\n    x=x1\n)\ndata = [trace0, trace1]\nlayout = ptly.Layout(barmode='stack')\nfig = ptly.Figure(data=data, layout=layout)\n\niplot(fig, filename='stacked histogram')","f21edcdc":"configure_plotly_browser_state()\ninit_notebook_mode(connected=False)\ntrace1 = ptly.Scatter(\n    y = model_data['Acceleration'].head(500),\n    mode='markers',\n    marker=dict(\n        size=16,\n        color = np.random.randn(500), \n        colorscale='Viridis',\n        showscale=True\n    )\n)\ndata = [trace1]\n\niplot(data, filename='Acceleration')","888fc762":"new_data1 = model_data.head(5)\nconfigure_plotly_browser_state()\ninit_notebook_mode(connected=False)\ntrace1 = ptly.Barpolar(\n    r = new_data1['Age'],\n    text=new_data1['Name'],\n    name='Players age',\n    marker=dict(\n        color='rgb(106,81,163)'\n    )\n)\ntrace2 = ptly.Barpolar(\n    r = new_data1['Potential'],\n    text=new_data1['Name'],\n    name='Players Potential',\n    marker=dict(\n        color='rgb(158,154,200)'\n    )\n)\ntrace3 = ptly.Barpolar(\n    r = new_data1['Stamina'],\n    text=new_data1['Name'],\n    name='Players Stamina',\n    marker=dict(\n        color='rgb(203,201,226)'\n    )\n)\ntrace4 = ptly.Barpolar(\n    r = new_data1['Strength'],\n    text=new_data1['Name'],\n    name='Players Strength',\n    marker=dict(\n        color='rgb(242,240,247)'\n    )\n)\ndata = [trace1, trace2, trace3, trace4]\nlayout = ptly.Layout(\n    title='Players statistics',\n    font=dict(\n        size=16\n    ),\n    legend=dict(\n        font=dict(\n            size=16\n        )\n    ),\n    radialaxis=dict(\n        ticksuffix='%'\n    ),\n    orientation=270\n)\nfig = ptly.Figure(data=data, layout=layout)\niplot(fig, filename='Players statistics distribution')","dd572b89":"configure_plotly_browser_state()\ninit_notebook_mode(connected=False)\n\ntrace1 = {\n  'x': new_data1['Name'],\n  'y': new_data1['Potential'],\n  'name': 'Potential',\n  'type': 'bar'\n};\ntrace2 = {\n  'x': new_data1['Name'],\n  'y': new_data1['Overall'],\n  'name': 'Overall',\n  'type': 'bar'\n};\ntrace3 = {\n  'x': new_data1['Name'],\n  'y': new_data1['Acceleration'],\n  'name': 'Acceleration',\n  'type': 'bar'\n }\n \ntrace4 = {\n  'x': new_data1['Name'],\n  'y': new_data1['Aggression'],\n  'name': 'Aggression',\n  'type': 'bar'\n }\n \ndata = [trace1, trace2, trace3, trace4];\nlayout = {\n  'xaxis': {'title': 'Name'},\n  'yaxis': {'title': 'Statistics'},\n  'barmode': 'relative',\n  'title': 'Player statistics'\n};\niplot({'data': data, 'layout': layout}, filename='barmode-relative')","5b4b62bb":"new_data2 = model_data.head(200)\nconfigure_plotly_browser_state()\ninit_notebook_mode(connected=False)\n\npos = ptly.Pie(values=new_data2['Position'].value_counts().values,\n                labels=new_data2['Position'].value_counts().index.values,\n                hole=0.3\n               )\n \n\nlayout = ptly.Layout(title='players position distribution')\n\nfig = ptly.Figure(data=[pos], layout=layout)\niplot(fig)","d030c6ab":"model_data.head(2)","c035f9a9":"model_data.drop(columns=['Name', 'Nationality', 'Value', 'Wage', 'Work Rate', 'Body Type'], inplace=True)","ca424daf":"model_data.head(2)","861e2130":"X = model_data.drop(columns=['Position'], axis=1)\ny = model_data['Position']","1ce0e0ca":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\nprediction = model.predict(X_test)","9f743cc0":"print(classification_report(y_test, prediction), '\\n')\nprint(confusion_matrix(y_test, prediction), '\\n')\nprint('Accuracy Score: ', accuracy_score(y_test, prediction))","9bb4b676":"model_data.corr().abs()['Position'].sort_values(ascending=False)","27a6b27f":"model_data_1 = model_data.head(5000)","5553ac88":"model_data_1.head(2)","f42fb961":"model_data_1['forward'] = (model_data_1['RF'] + model_data_1['ST'] + model_data_1['LF'] + model_data_1['RS'] + model_data_1['LS'] + model_data_1['CF']) \/ 6","c9b190ec":"model_data_1['midfielder'] = (model_data_1['LW'] + model_data_1['RCM'] + model_data_1['LCM'] + model_data_1['LDM'] + model_data_1['CAM'] + model_data_1['CDM'] + \\\n                model_data_1['RM'] + model_data_1['LAM'] + model_data_1['LM'] + model_data_1['RDM'] + model_data_1['RW'] + model_data_1['CM'] + model_data_1['RAM'])\\\n                \/13","2ab798d5":"model_data_1['defender'] = (model_data_1['RCB'] + model_data_1['CB'] + model_data_1['LCB'] + model_data_1['LB'] + model_data_1['RB'] + model_data_1['RWB']\\\n                 + model_data_1['LWB']) \/ 7","05c07a8a":"model_data_1['gk'] = (model_data_1['GKDiving'] + model_data_1['GKHandling'] + model_data_1['GKKicking'] + model_data_1['GKPositioning']\\\n               + model_data_1['GKReflexes']) \/ 5","8195987f":"model_data_1[['forward', 'midfielder', 'defender', 'gk']].head(5)","6db55e0c":"model_data_1.drop(columns=['RF', 'ST', 'LW', 'RCM', 'LF', 'RS', 'RCB', 'LCM', 'CB', 'LDM', 'CAM', 'CDM',\n                     'LS', 'LCB', 'RM', 'LAM', 'LM', 'LB', 'RDM', 'RW', 'CM', 'RB', 'RAM', 'CF', 'RWB', 'LWB',\n                     'GKDiving', 'GKHandling', 'GKKicking', 'GKPositioning', 'GKReflexes'\n                    ], inplace=True)","02844993":"model_data_1.head(2)","4e81d2a6":"model_data_1.shape","f49ebce1":"X = model_data_1.drop(columns=['Position'])\ny = model_data_1['Position']","4ef33dd1":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\nprediction = model.predict(X_test)","71718fb9":"print(classification_report(y_test, prediction), '\\n')\nprint(confusion_matrix(y_test, prediction), '\\n')\nprint('Accuracy Score: ', accuracy_score(y_test, prediction))","8cb0cc29":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\nprediction = model.predict(X_test)","f8a20d93":"print (\"Score:\", model.score(X_test, y_test))","4f68fee5":"plt_data = model_data_1.head(500)\nsns.swarmplot(data=plt_data, x='Age', y='Positioning', hue='Position', palette='viridis')\nplt.figure(figsize=(20, 15))\nplt.show()","31e08c6c":"sns.swarmplot(data=model_data_1, x='Age', y='Positioning', hue='Position', palette='viridis')\nplt.figure(figsize=(20, 15))\nplt.show()","59b118a9":"# However, from the dataset it appears to be an imbalanced dataset! why?\nmodel_data_1['Position'].value_counts()","dd7952b9":"from imblearn.combine import SMOTEENN\nfrom collections import Counter\n\nsmote_enn = SMOTEENN(random_state=0)\nX_resampled, y_resampled = smote_enn.fit_sample(X, y)\nprint(sorted(Counter(y_resampled).items()))","844449e3":"# create training and testing vars\nX_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.33)\nprint (X_train.shape, y_train.shape)\nprint (X_test.shape, y_test.shape)","07bbf071":"# fit a model\nlm = linear_model.LinearRegression()\nmodel = lm.fit(X_train, y_train)\npredictions = lm.predict(X_test)","762cb56c":"plt.scatter(y_test, predictions)\nplt.xlabel(\"True Values\")\nplt.ylabel(\"Predictions\")","e559b09e":"print (\"Score:\", model.score(X_test, y_test))","b99e721e":"# fit a model\nlm = linear_model.LogisticRegression()\nmodel = lm.fit(X_train, y_train)\npredictions = lm.predict(X_test)","76b404e5":"print (\"Score:\", model.score(X_test, y_test))","3e58c582":"# A multilayer perceptron (MLP) is a feedforward artificial neural network model that maps sets of input data onto a set of appropriate outputs.\nfrom sklearn.neural_network import MLPClassifier","ac712b91":"X = model_data.drop('Position', axis=1) #feature\ny = model_data['Position']\n\nsmote_enn = SMOTEENN(random_state=0)\nX_resampled, y_resampled = smote_enn.fit_sample(X, y)\n\nX_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.45)\nmlp = MLPClassifier(hidden_layer_sizes=(30,30,30))\nmlp.fit(X_train,y_train)","814c00e5":"predictions = mlp.predict(X_test)\nprint(classification_report(y_test,predictions))","73cd471c":"print (\"Score:\", mlp.score(X_test, y_test))","d1236c44":"                                                                    #END#","77dcb04b":"I don't need the Jersey number! it's not necessary to achieve my goal.","8289b2eb":"# Let's check about preferred foot!","8bb10067":"# Logistic Regression","957b65d3":"For the purpose of the model, I won't be using Name, Nationality, Work Rate, Body Type, Value, Wage. I will be dropping these features from the dataset. ","4eb08879":"Let's run the same approach again!","019c5d88":"# Histogram of age distribution","0c915b98":"As you can see that, there is only 455 Gk, 742 Strikers where 2233 is Midfielders and 1570 defenders.\n\nOur last model might give us biased result due to imbalanced dataset in each class!","960f04b7":"# Players age distribution","c62fb78c":"# Players position distribution in a pie chart","7a01e4c4":"# Lets check about work rate!","994db296":"# Scatter plot for players acceleration distribution","188428e2":"# Let's start with height and weight","6476d619":"# SMOTEENN is used to balance the dataset!","91ce625b":"# Combination of skills for few players","1d63c76b":"So, after balancing the dataset, we are getting better accuracy than previous. It's 97.20% now whereas it was 90.24% using logistic regression!","70a2728b":"# Scrubbing and Formatting","cefbf37a":"The dataset is fixed with preprocessing.","7b982766":"# Data science is a field where scientific methods,  process, and algorithms are used to extract insights from structured and unstructured data. \nData science basic structure is consist of the following features:\n1. Problem Specification\n2. Obtain Data\n3. Scrub Data\n4. Model Data\n5. Analyzing the Data\n6. Visualizing the Data\n\nIn this article, I will show all the features of data science techniques that have been covered in the course on a proper dataset.\n\nPandas\nMatplotlib\nScipy (Regression)\nMachine Learning Techniques (Supervised and Unsupervised Learning)\nNeural Network\n\nDataset: I have selected FIFA 19 complete player dataset from Kaggle. \n\n**Task 1: First task is to exploratory analysis based on the dataset.**\n\n**Task 2: Use a predictive model on the dataset to make player position prediction**","b9a20d43":"# Height and weight distribution in histogram","4f4363fd":"# Neural Network Model","6b3caf6f":"# Why I chose this dataset?\nI chose FIFA 19 complete player dataset because it has more than 10k data in the dataset. This dataset contains a lot of features with a combination of structured and unstructured data. The dataset contains NaN and unnecessary value which requires a complex pre-processing of the dataset. All these challenges make me chose this dataset over other datasets. ","76066ad8":"# Now let's delete all the field that were merged together!!","08b111ba":"# Let's check about the Body Type!","ac49989c":"# Now, let's work on value and wage!","c32607c6":"So we can see that Logistic Regression gave us better classification result than the Linear Regression.","a2034c2d":"Let's simplify work rate into three category:\n\n1. High\n2. Medium\n3. Low","57a9f5f6":"# Logistic Regression","79dd3aa9":"# After using a neural network, it shows us a slight improvement in accuracy from the dataset which is 98%!","efde78ed":"Now, In the selected dataset, there are many columns that are not needed for further analysis which is not relatable to my goals.","680f7f6b":"Checking how many null values are in the dataset!","b7d727a7":"# Let's make the position in four categories!\n\n1. Goal Keeper (GK)\n2. Midfielder (MD)\n3. Defender (DF)\n4. Forward (FD)\n\n\n\n","b8cbbf0e":"# Combination of players skills in a bar chart","cb1dd45a":"# Linear Regression Model","50b67d3b":"# Obtain the data","e64c4e24":"I will be setting this position into a specific number which is acting as a separate class for the model.","5e3cd368":"So, after merging those skill set together this model is getting the same results. Let's verify that the model is giving us proper accuracy. ","063dcb4d":"However, we can sort the skills into 4 categories also such as:\n1. Forward\n2. Defender\n3. Midfielder\n3. Goal Keeper","3ec1a21a":"So, after balancing the dataset, we are getting better accuracy than previous. It's 95.82% now whereas it was 84.90% using linear regression!","986cbc9f":"The goal of these models is to predict a player position in a footbal field based on the players skills statistics!","b0a499e9":"From the looks of the dataset, I need to fix these following columns:\n1. Value\n2. Wage\n3. Work Rate\n4. Body Type\n5. Height\n6. Weight\n7. All the abilities that contain \"+\" in-between numbers.","af5f4911":"# Exploratory Data Analysis","a6cf8fcf":"# Linear Regression","fd149aaa":"# Relation between players and their potential","2d5102e7":"# Making models","f1c312a7":"# Player statistics in each country","1721382d":"# Number of players in each position","24689b65":"# Let's simplify all the skils!","9c6bbc6e":"# Number of players in each country that is showing in a world map"}}