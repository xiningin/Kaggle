{"cell_type":{"2944a188":"code","86a213e9":"code","70a45595":"code","3cc5eb91":"code","eb63439a":"code","9fe87262":"code","03ff330e":"code","d8330d66":"code","5903b71a":"code","3b0bd1fa":"code","9a5c2796":"code","3f3a3fe6":"code","6d6e5782":"code","ef3eac12":"code","e1e933e3":"code","3a58052d":"code","a9ea80c7":"code","ad85a489":"code","fd4bd226":"code","ca13a80f":"code","476892f5":"code","084a1b2a":"markdown"},"source":{"2944a188":"# https:\/\/github.com\/CamDavidsonPilon\/lifetimes\n!pip install lifetimes","86a213e9":"# Importing the required libraries for the analysis\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly as pp\nimport datetime\nfrom lifetimes.plotting import *\nfrom lifetimes.utils import *\nimport os","70a45595":"file_path = '\/kaggle\/input\/'\n\nfile = os.path.join(file_path,'ecommerce-data\/data.csv')\ndf = pd.read_csv(file,encoding='unicode_escape')","3cc5eb91":"df.head(3)","eb63439a":"# Checking the datatypes \nprint(df.dtypes)\n\nprint('#############')\n# checking if there are any null values\nprint(df.isnull().sum()\/df['CustomerID'].shape[0])","9fe87262":"# converting the invoice date to date datatype","03ff330e":"df['InvoiceDate'] = pd.to_datetime(df['InvoiceDate']).dt.date","d8330d66":"# checking if there are -nev values\nlen(df[df['Quantity'] < 0])","5903b71a":"# remove missing values and take +ve quantily rows","3b0bd1fa":"df = df[df['Quantity'] >0 & df['CustomerID'].notnull()]","9a5c2796":"\ndf['amt'] = df['Quantity'] * df['UnitPrice']","3f3a3fe6":"# Creating Recency, Frequency & Time period\n\n# Using lifetime package","6d6e5782":"dfnew = summary_data_from_transaction_data(df,'CustomerID', 'InvoiceDate', monetary_value_col='amt', observation_period_end='2011-12-9')","ef3eac12":"dfnew['frequency'].plot(kind = 'hist',bins=50)\n","e1e933e3":"from lifetimes import BetaGeoFitter\nbgf = BetaGeoFitter(penalizer_coef=0.0)\nbgf.fit(dfnew['frequency'],dfnew['recency'],dfnew['T'])","3a58052d":"print(bgf)","a9ea80c7":"fig = plt.figure(figsize=(10,8))\nplot_frequency_recency_matrix(bgf)","ad85a489":"fig = plt.figure(figsize=(10,8))\nplot_probability_alive_matrix(bgf)","fd4bd226":"t = 1\ndfnew['predicted_purchases'] = bgf.conditional_expected_number_of_purchases_up_to_time(t, dfnew['frequency'], dfnew['recency'], dfnew['T'])\ndfnew.sort_values(by='predicted_purchases').tail(5)\n\ndfnew.sort_values(by='predicted_purchases').head(5)\n","ca13a80f":"from lifetimes.plotting import plot_period_transactions\nplot_period_transactions(bgf)\n","476892f5":"\nsummary_cal_holdout = calibration_and_holdout_data(df, 'CustomerID', 'InvoiceDate',\n                                        calibration_period_end='2011-06-08',\n                                        observation_period_end='2011-12-9' )   \nprint(summary_cal_holdout.head())\n\nfrom lifetimes.plotting import plot_calibration_purchases_vs_holdout_purchases\nbgf.fit(summary_cal_holdout['frequency_cal'], summary_cal_holdout['recency_cal'], summary_cal_holdout['T_cal'])\nplot_calibration_purchases_vs_holdout_purchases(bgf, summary_cal_holdout)\n\n\n\n\n\nt = 10\nindividual =dfnew.loc[12380]\nbgf.predict(t, individual['frequency'], individual['recency'], individual['T'])\n","084a1b2a":"![](http:\/\/)# Customer Life Time Value in Non Contractual setting Using lifetime library\n"}}