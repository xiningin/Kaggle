{"cell_type":{"357b29e4":"code","ac4e0a9f":"code","acc7184a":"code","a33964b5":"code","176de825":"code","4210f37a":"code","1c4e06bc":"code","98fa17f3":"code","23f4756d":"code","7a7d1ad3":"code","f3cc5d1d":"code","0de6c6c5":"code","58dfe52c":"code","bd61f573":"code","007f0e31":"code","e8cf68f7":"code","fdca0894":"code","8841644c":"code","2b1909d5":"code","265323f0":"code","25a5980e":"code","de076617":"code","0ddc4ce8":"code","ea80c644":"code","850c0675":"code","230bbe19":"code","164e519e":"code","49d1a264":"code","e95dd00b":"code","50f103c6":"code","b9f9c8eb":"code","d5dec87e":"code","7d99339e":"code","71be7d05":"code","86ac95e6":"code","aeaa1736":"markdown"},"source":{"357b29e4":"DEVICE = \"TPU\"\nCFG = dict(\n    batch_size        =  16,\n    \n    read_size         = 256, \n    crop_size         = 250, \n    net_size          = 248,\n    LR_START          =   0.000003,\n    LR_MAX            =   0.000020,\n    LR_MIN            =   0.000001,\n    LR_RAMPUP_EPOCHS  =   5,\n    LR_SUSTAIN_EPOCHS =   0,\n    LR_EXP_DECAY      =   0.8,\n    epochs            =  20,\n    \n    rot               = 180.0,\n    shr               =   1.5,\n    hzoom             =   6.0,\n    wzoom             =   6.0,\n    hshift            =   6.0,\n    wshift            =   6.0,\n\n    optimizer         = 'adam',\n    label_smooth_fac  =   0.05,\n    \n    tta_steps         =  25    \n)","ac4e0a9f":"!pip install -q efficientnet","acc7184a":"import os, random, re, math, time\nrandom.seed(a=42)\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport tensorflow.keras.backend as K\nimport efficientnet.tfkeras as efn\nimport PIL\nfrom kaggle_datasets import KaggleDatasets\nfrom tqdm import tqdm","a33964b5":"BASEPATH = \"..\/input\/siim-isic-melanoma-classification\"\ndf_train = pd.read_csv(os.path.join(BASEPATH, 'train.csv'))\ndf_test  = pd.read_csv(os.path.join(BASEPATH, 'test.csv'))\ndf_sub   = pd.read_csv(os.path.join(BASEPATH, 'sample_submission.csv'))\nGCS_PATH    = KaggleDatasets().get_gcs_path('melanoma-256x256')\nfiles_train = np.sort(np.array(tf.io.gfile.glob(GCS_PATH + '\/train*.tfrec')))\nfiles_test  = np.sort(np.array(tf.io.gfile.glob(GCS_PATH + '\/test*.tfrec')))","176de825":"if DEVICE == \"TPU\":\n    print(\"connecting to TPU...\")\n    try:\n        tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n        print('Running on TPU ', tpu.master())\n    except ValueError:\n        print(\"Could not connect to TPU\")\n        tpu = None\n\n    if tpu:\n        try:\n            print(\"initializing  TPU ...\")\n            tf.config.experimental_connect_to_cluster(tpu)\n            tf.tpu.experimental.initialize_tpu_system(tpu)\n            strategy = tf.distribute.experimental.TPUStrategy(tpu)\n            print(\"TPU initialized\")\n        except _:\n            print(\"failed to initialize TPU\")\n    else:\n        DEVICE = \"GPU\"\n\nif DEVICE != \"TPU\":\n    print(\"Using default strategy for CPU and single GPU\")\n    strategy = tf.distribute.get_strategy()\n\nif DEVICE == \"GPU\":\n    print(\"Num GPUs Available: \", len(tf.config.experimental.list_physical_devices('GPU')))\nAUTO     = tf.data.experimental.AUTOTUNE\nREPLICAS = strategy.num_replicas_in_sync\nprint(f'REPLICAS: {REPLICAS}')","4210f37a":"def get_mat(rotation, shear, height_zoom, width_zoom, height_shift, width_shift):\n    rotation = math.pi * rotation \/ 180.\n    shear    = math.pi * shear    \/ 180.\n\n    def get_3x3_mat(lst):\n        return tf.reshape(tf.concat([lst],axis=0), [3,3])\n    c1   = tf.math.cos(rotation)\n    s1   = tf.math.sin(rotation)\n    one  = tf.constant([1],dtype='float32')\n    zero = tf.constant([0],dtype='float32')\n    \n    rotation_matrix = get_3x3_mat([c1,   s1,   zero, \n                                   -s1,  c1,   zero, \n                                   zero, zero, one])    \n    c2 = tf.math.cos(shear)\n    s2 = tf.math.sin(shear)    \n    \n    shear_matrix = get_3x3_mat([one,  s2,   zero, \n                                zero, c2,   zero, \n                                zero, zero, one])        \n    zoom_matrix = get_3x3_mat([one\/height_zoom, zero,           zero, \n                               zero,            one\/width_zoom, zero, \n                               zero,            zero,           one])    \n    shift_matrix = get_3x3_mat([one,  zero, height_shift, \n                                zero, one,  width_shift, \n                                zero, zero, one])\n    \n    return K.dot(K.dot(rotation_matrix, shear_matrix), \n                 K.dot(zoom_matrix,     shift_matrix))\n\n\ndef transform(image, cfg):    \n    DIM = cfg[\"read_size\"]\n    XDIM = DIM%2\n    \n    rot = cfg['rot'] * tf.random.normal([1], dtype='float32')\n    shr = cfg['shr'] * tf.random.normal([1], dtype='float32') \n    h_zoom = 1.0 + tf.random.normal([1], dtype='float32') \/ cfg['hzoom']\n    w_zoom = 1.0 + tf.random.normal([1], dtype='float32') \/ cfg['wzoom']\n    h_shift = cfg['hshift'] * tf.random.normal([1], dtype='float32') \n    w_shift = cfg['wshift'] * tf.random.normal([1], dtype='float32') \n    m = get_mat(rot,shr,h_zoom,w_zoom,h_shift,w_shift) \n    x   = tf.repeat(tf.range(DIM\/\/2, -DIM\/\/2,-1), DIM)\n    y   = tf.tile(tf.range(-DIM\/\/2, DIM\/\/2), [DIM])\n    z   = tf.ones([DIM*DIM], dtype='int32')\n    idx = tf.stack( [x,y,z] )\n    idx2 = K.dot(m, tf.cast(idx, dtype='float32'))\n    idx2 = K.cast(idx2, dtype='int32')\n    idx2 = K.clip(idx2, -DIM\/\/2+XDIM+1, DIM\/\/2)           \n    idx3 = tf.stack([DIM\/\/2-idx2[0,], DIM\/\/2-1+idx2[1,]])\n    d    = tf.gather_nd(image, tf.transpose(idx3))   \n    return tf.reshape(d,[DIM, DIM,3])","1c4e06bc":"def read_labeled_tfrecord(example):\n    tfrec_format = {\n        'image'                        : tf.io.FixedLenFeature([], tf.string),\n        'image_name'                   : tf.io.FixedLenFeature([], tf.string),\n        'patient_id'                   : tf.io.FixedLenFeature([], tf.int64),\n        'sex'                          : tf.io.FixedLenFeature([], tf.int64),\n        'age_approx'                   : tf.io.FixedLenFeature([], tf.int64),\n        'anatom_site_general_challenge': tf.io.FixedLenFeature([], tf.int64),\n        'diagnosis'                    : tf.io.FixedLenFeature([], tf.int64),\n        'target'                       : tf.io.FixedLenFeature([], tf.int64)\n    }           \n    example = tf.io.parse_single_example(example, tfrec_format)\n    return example['image'], example['target']\n\n\ndef read_unlabeled_tfrecord(example, return_image_name):\n    tfrec_format = {\n        'image'                        : tf.io.FixedLenFeature([], tf.string),\n        'image_name'                   : tf.io.FixedLenFeature([], tf.string),\n    }\n    example = tf.io.parse_single_example(example, tfrec_format)\n    return example['image'], example['image_name'] if return_image_name else 0\n\n \ndef prepare_image(img, cfg=None, augment=True):    \n    img = tf.image.decode_jpeg(img, channels=3)\n    img = tf.image.resize(img, [cfg['read_size'], cfg['read_size']])\n    img = tf.cast(img, tf.float32) \/ 255.0\n    \n    if augment:\n        img = transform(img, cfg)\n        img = tf.image.random_crop(img, [cfg['crop_size'], cfg['crop_size'], 3])\n        img = tf.image.random_flip_left_right(img)\n        img = tf.image.random_hue(img, 0.01)\n        img = tf.image.random_saturation(img, 0.7, 1.3)\n        img = tf.image.random_contrast(img, 0.8, 1.2)\n        img = tf.image.random_brightness(img, 0.1)\n\n    else:\n        img = tf.image.central_crop(img, cfg['crop_size'] \/ cfg['read_size'])\n                                   \n    img = tf.image.resize(img, [cfg['net_size'], cfg['net_size']])\n    img = tf.reshape(img, [cfg['net_size'], cfg['net_size'], 3])\n    return img\n\ndef count_data_items(filenames):\n    n = [int(re.compile(r\"-([0-9]*)\\.\").search(filename).group(1)) \n         for filename in filenames]\n    return np.sum(n)","98fa17f3":"def get_dataset(files, cfg, augment = False, shuffle = False, repeat = False, \n                labeled=True, return_image_names=True):\n    \n    ds = tf.data.TFRecordDataset(files, num_parallel_reads=AUTO)\n    ds = ds.cache()\n    \n    if repeat:\n        ds = ds.repeat()\n    \n    if shuffle: \n        ds = ds.shuffle(1024*8)\n        opt = tf.data.Options()\n        opt.experimental_deterministic = False\n        ds = ds.with_options(opt)\n        \n    if labeled: \n        ds = ds.map(read_labeled_tfrecord, num_parallel_calls=AUTO)\n    else:\n        ds = ds.map(lambda example: read_unlabeled_tfrecord(example, return_image_names), \n                    num_parallel_calls=AUTO)      \n    \n    ds = ds.map(lambda img, imgname_or_label: (prepare_image(img, augment=augment, cfg=cfg), \n                                               imgname_or_label), \n                num_parallel_calls=AUTO)\n    \n    ds = ds.batch(cfg['batch_size'] * REPLICAS)\n    ds = ds.prefetch(AUTO)\n    return ds","23f4756d":"def show_dataset(thumb_size, cols, rows, ds):\n    mosaic = PIL.Image.new(mode='RGB', size=(thumb_size*cols + (cols-1), \n                                             thumb_size*rows + (rows-1)))\n   \n    for idx, data in enumerate(iter(ds)):\n        img, target_or_imgid = data\n        ix  = idx % cols\n        iy  = idx \/\/ cols\n        img = np.clip(img.numpy() * 255, 0, 255).astype(np.uint8)\n        img = PIL.Image.fromarray(img)\n        img = img.resize((thumb_size, thumb_size), resample=PIL.Image.BILINEAR)\n        mosaic.paste(img, (ix*thumb_size + ix, \n                           iy*thumb_size + iy))\n\n    display(mosaic)\nds = get_dataset(files_train, CFG).unbatch().take(12*5)   \nshow_dataset(64, 12, 5, ds)","7a7d1ad3":"ds = tf.data.TFRecordDataset(files_train, num_parallel_reads=AUTO)\nds = ds.take(1).cache().repeat()\nds = ds.map(read_labeled_tfrecord, num_parallel_calls=AUTO)\nds = ds.map(lambda img, target: (prepare_image(img, cfg=CFG, augment=True), target), \n            num_parallel_calls=AUTO)\nds = ds.take(12*5)\nds = ds.prefetch(AUTO)\n\nshow_dataset(64, 12, 5, ds)","f3cc5d1d":"ds = get_dataset(files_test, CFG, labeled=False).unbatch().take(12*5)   \nshow_dataset(64, 12, 5, ds)","0de6c6c5":"def get_lr_callback(cfg):\n    lr_start   = cfg['LR_START']\n    lr_max     = cfg['LR_MAX'] * strategy.num_replicas_in_sync\n    lr_min     = cfg['LR_MIN']\n    lr_ramp_ep = cfg['LR_RAMPUP_EPOCHS']\n    lr_sus_ep  = cfg['LR_SUSTAIN_EPOCHS']\n    lr_decay   = cfg['LR_EXP_DECAY']\n   \n    def lrfn(epoch):\n        if epoch < lr_ramp_ep:\n            lr = (lr_max - lr_start) \/ lr_ramp_ep * epoch + lr_start\n            \n        elif epoch < lr_ramp_ep + lr_sus_ep:\n            lr = lr_max\n            \n        else:\n            lr = (lr_max - lr_min) * lr_decay**(epoch - lr_ramp_ep - lr_sus_ep) + lr_min\n            \n        return lr\n\n    lr_callback = tf.keras.callbacks.LearningRateScheduler(lrfn, verbose=False)\n    return lr_callback","58dfe52c":"def get_model(cfg, model):\n    \n    model_input = tf.keras.Input(shape=(cfg['net_size'], cfg['net_size'], 3), name='imgIn')\n    dummy = tf.keras.layers.Lambda(lambda x:x)(model_input)    \n    outputs = []    \n\n    constructor = getattr(efn, model)\n    x = constructor(include_top=False, weights='noisy-student', \n                    input_shape=(cfg['net_size'], cfg['net_size'], 3), \n                    pooling='avg')(dummy)\n\n    x = tf.keras.layers.Dense(1, activation='sigmoid')(x)\n    outputs.append(x)\n    \n    model = tf.keras.Model(model_input, outputs, name='aNetwork')\n    model.summary()\n    \n    return model\n","bd61f573":"def compile_new_model(cfg, model):    \n    with strategy.scope():\n        model = get_model(cfg, model)\n     \n        losses = tf.keras.losses.BinaryCrossentropy(label_smoothing = cfg['label_smooth_fac'])\n        \n        model.compile(\n            optimizer = cfg['optimizer'],\n            loss      = losses,\n            metrics   = [tf.keras.metrics.AUC(name='auc')])\n        \n    return model","007f0e31":"ds_train     = get_dataset(files_train, CFG, augment=True, shuffle=True, repeat=True)\nds_train     = ds_train.map(lambda img, label: (img, tuple([label])))\n\nsteps_train  = count_data_items(files_train) \/ (CFG['batch_size'] * REPLICAS)\nmodel_B0 = compile_new_model(CFG, 'EfficientNetB0')\n#model_B1 = compile_new_model(CFG, 'EfficientNetB1')\n#model_B2 = compile_new_model(CFG, 'EfficientNetB2')\nmodel_B3 = compile_new_model(CFG, 'EfficientNetB3')\n#model_B4 = compile_new_model(CFG, 'EfficientNetB4')\nmodel_B5 = compile_new_model(CFG, 'EfficientNetB5')\nmodel_B6 = compile_new_model(CFG, 'EfficientNetB6')\n#model_B7 = compile_new_model(CFG, 'EfficientNetB7')\nprint(\"\\n Begin Training Models B0\") \nhistory_B0     = model_B0.fit(ds_train, \n                         verbose          = 1,\n                         steps_per_epoch  = steps_train, \n                         epochs           = CFG['epochs'],\n                         callbacks        = [get_lr_callback(CFG)])\nprint(\"\\n Done Training model_B0 \\n\")\n\n#print(\"\\n Begin Training Models B1\") \n#history_B1     = model_B1.fit(ds_train, \n#                         verbose          = 1,\n#                         steps_per_epoch  = steps_train, \n#                         epochs           = CFG['epochs'],\n#                         callbacks        = [get_lr_callback(CFG)])\n#print(\"\\n Done Training model_B1 \\n\")\n\n#print(\"\\n Begin Training Models B2\") \n#history_B2     = model_B2.fit(ds_train, \n#                         verbose          = 1,\n#                         steps_per_epoch  = steps_train, \n#                         epochs           = CFG['epochs'],\n#                         callbacks        = [get_lr_callback(CFG)])\n#print(\"\\n Done Training model_B2 \\n\")\n\nprint(\"\\n Begin Training Models B3\") \nhistory_B3     = model_B3.fit(ds_train, \n                         verbose          = 1,\n                         steps_per_epoch  = steps_train, \n                         epochs           = CFG['epochs'],\n                         callbacks        = [get_lr_callback(CFG)])\nprint(\"\\n Done Training model_B3 \\n\")\n\n#print(\"\\n Begin Training Models B4\") \n#history_B4     = model_B4.fit(ds_train, \n#                         verbose          = 1,\n#                         steps_per_epoch  = steps_train, \n#                         epochs           = CFG['epochs'],\n#                         callbacks        = [get_lr_callback(CFG)])\n#print(\"\\n Done Training model_B4 \\n\")\n\nprint(\"\\n Begin Training Models B5\") \nhistory_B5     = model_B5.fit(ds_train, \n                         verbose          = 1,\n                         steps_per_epoch  = steps_train, \n                         epochs           = CFG['epochs'],\n                         callbacks        = [get_lr_callback(CFG)])\nprint(\"\\n Done Training model_B5 \\n\")\n\nprint(\"\\n Begin Training Models B6\") \nhistory_B6     = model_B6.fit(ds_train, \n                         verbose          = 1,\n                         steps_per_epoch  = steps_train, \n                         epochs           = CFG['epochs'],\n                         callbacks        = [get_lr_callback(CFG)])\nprint(\"\\n Done Training model_B6 \\n\")\n\n#print(\"\\n Begin Training Models B7\") \n#history_B7     = model_B7.fit(ds_train, \n#                         verbose          = 1,\n#                         steps_per_epoch  = steps_train, \n#                         epochs           = CFG['epochs'],\n#                         callbacks        = [get_lr_callback(CFG)])\n#print(\"\\n Done Training model_B7 \\n\")","e8cf68f7":"CFG['batch_size'] = 256\n\ncnt_test   = count_data_items(files_test)\nsteps      = cnt_test \/ (CFG['batch_size'] * REPLICAS) * CFG['tta_steps']\nds_testAug = get_dataset(files_test, CFG, augment=True, repeat=True, \n                         labeled=False, return_image_names=False)\npreds_B0 = model_B0.predict(ds_testAug, verbose=1, steps=steps)","fdca0894":"#CFG['batch_size'] = 256\n\n#cnt_test   = count_data_items(files_test)\n#steps      = cnt_test \/ (CFG['batch_size'] * REPLICAS) * CFG['tta_steps']\n#ds_testAug = get_dataset(files_test, CFG, augment=True, repeat=True, \n#                         labeled=False, return_image_names=False)\n#preds_B1 = model_B1.predict(ds_testAug, verbose=1, steps=steps)","8841644c":"#CFG['batch_size'] = 256\n\n#cnt_test   = count_data_items(files_test)\n#steps      = cnt_test \/ (CFG['batch_size'] * REPLICAS) * CFG['tta_steps']\n#ds_testAug = get_dataset(files_test, CFG, augment=True, repeat=True, \n#                         labeled=False, return_image_names=False)\n#preds_B2 = model_B2.predict(ds_testAug, verbose=1, steps=steps)","2b1909d5":"CFG['batch_size'] = 256\n\ncnt_test   = count_data_items(files_test)\nsteps      = cnt_test \/ (CFG['batch_size'] * REPLICAS) * CFG['tta_steps']\nds_testAug = get_dataset(files_test, CFG, augment=True, repeat=True, \n                         labeled=False, return_image_names=False)\npreds_B3 = model_B3.predict(ds_testAug, verbose=1, steps=steps)","265323f0":"#CFG['batch_size'] = 256\n\n#cnt_test   = count_data_items(files_test)\n#steps      = cnt_test \/ (CFG['batch_size'] * REPLICAS) * CFG['tta_steps']\n#ds_testAug = get_dataset(files_test, CFG, augment=True, repeat=True, \n #                        labeled=False, return_image_names=False)\n#preds_B4 = model_B4.predict(ds_testAug, verbose=1, steps=steps)","25a5980e":"CFG['batch_size'] = 256\n\ncnt_test   = count_data_items(files_test)\nsteps      = cnt_test \/ (CFG['batch_size'] * REPLICAS) * CFG['tta_steps']\nds_testAug = get_dataset(files_test, CFG, augment=True, repeat=True, \n                         labeled=False, return_image_names=False)\npreds_B5 = model_B5.predict(ds_testAug, verbose=1, steps=steps)","de076617":"CFG['batch_size'] = 256\n\ncnt_test   = count_data_items(files_test)\nsteps      = cnt_test \/ (CFG['batch_size'] * REPLICAS) * CFG['tta_steps']\nds_testAug = get_dataset(files_test, CFG, augment=True, repeat=True, \n                         labeled=False, return_image_names=False)\npreds_B6 = model_B6.predict(ds_testAug, verbose=1, steps=steps)","0ddc4ce8":"#CFG['batch_size'] = 256\n\n#cnt_test   = count_data_items(files_test)\n#steps      = cnt_test \/ (CFG['batch_size'] * REPLICAS) * CFG['tta_steps']\n#ds_testAug = get_dataset(files_test, CFG, augment=True, repeat=True, \n#                         labeled=False, return_image_names=False)\n#preds_B7 = model_B7.predict(ds_testAug, verbose=1, steps=steps)","ea80c644":"print(\"Test shape :\",df_sub.shape)\nprint(\"Preds shape :\",preds_B0.shape)\n#print(\"Preds shape :\",preds_B1.shape)\n#print(\"Preds shape :\",preds_B2.shape)\nprint(\"Preds shape :\",preds_B3.shape)\n#print(\"Preds shape :\",preds_B4.shape)\nprint(\"Preds shape :\",preds_B5.shape)\nprint(\"Preds shape :\",preds_B6.shape)\n#print(\"Preds shape :\",preds_B7.shape)","850c0675":"preds = np.stack(preds_B0)\npreds = preds[:,:cnt_test* CFG['tta_steps']]\npreds = preds[:df_test.shape[0]*CFG['tta_steps']]\npreds = np.stack(np.split(preds, CFG['tta_steps']),axis=1)\npreds = np.mean(preds, axis=1)\npreds_B0 = preds.reshape(-1)","230bbe19":"preds = np.stack(preds_B1)\npreds = preds[:,:cnt_test* CFG['tta_steps']]\npreds = preds[:df_test.shape[0]*CFG['tta_steps']]\npreds = np.stack(np.split(preds, CFG['tta_steps']),axis=1)\npreds = np.mean(preds, axis=1)\npreds_B1 = preds.reshape(-1)","164e519e":"#preds = np.stack(preds_B2)\n#preds = preds[:,:cnt_test* CFG['tta_steps']]\n#preds = preds[:df_test.shape[0]*CFG['tta_steps']]\n#preds = np.stack(np.split(preds, CFG['tta_steps']),axis=1)\n#preds = np.mean(preds, axis=1)\n#preds_B2 = preds.reshape(-1)","49d1a264":"preds = np.stack(preds_B3)\npreds = preds[:,:cnt_test* CFG['tta_steps']]\npreds = preds[:df_test.shape[0]*CFG['tta_steps']]\npreds = np.stack(np.split(preds, CFG['tta_steps']),axis=1)\npreds = np.mean(preds, axis=1)\npreds_B3 = preds.reshape(-1)","e95dd00b":"#preds = np.stack(preds_B4)\n#preds = preds[:,:cnt_test* CFG['tta_steps']]\n#preds = preds[:df_test.shape[0]*CFG['tta_steps']\n#preds = np.stack(np.split(preds, CFG['tta_steps']),axis=1)\n#preds = np.mean(preds, axis=1)\n#preds_B4 = preds.reshape(-1)","50f103c6":"preds = np.stack(preds_B5)\npreds = preds[:,:cnt_test* CFG['tta_steps']]\npreds = preds[:df_test.shape[0]*CFG['tta_steps']]\npreds = np.stack(np.split(preds, CFG['tta_steps']),axis=1)\npreds = np.mean(preds, axis=1)\npreds_B5 = preds.reshape(-1)","b9f9c8eb":"preds = np.stack(preds_B6)\npreds = preds[:,:cnt_test* CFG['tta_steps']]\npreds = preds[:df_test.shape[0]*CFG['tta_steps']]\npreds = np.stack(np.split(preds, CFG['tta_steps']),axis=1)\npreds = np.mean(preds, axis=1)\npreds_B6 = preds.reshape(-1)","d5dec87e":"#preds = np.stack(preds_B7)\n#preds = preds[:,:cnt_test* CFG['tta_steps']]\n#preds = preds[:df_test.shape[0]*CFG['tta_steps']]\n#preds = np.stack(np.split(preds, CFG['tta_steps']),axis=1)\n#preds = np.mean(preds, axis=1)\n#preds_B7 = preds.reshape(-1)","7d99339e":"preds =preds_B0*0.2 + preds_B3*0.3 + preds_B5*0.2 + preds_B6*0.3","71be7d05":"ds = get_dataset(files_test, CFG, augment=False, repeat=False, \n                 labeled=False, return_image_names=True)\n\nimage_names = np.array([img_name.numpy().decode(\"utf-8\") \n                        for img, img_name in iter(ds.unbatch())])","86ac95e6":"submission = pd.DataFrame(dict(\n    image_name = image_names,\n    target     = preds))\n\nsubmission = submission.sort_values('image_name') \nsubmission.to_csv(f'submission.csv', index=False)\n\nsubmission.head()","aeaa1736":"1)Model--EfficientNetB0\n  Epochs--20\n  Image_Size--256x256\n  Accuracy (LB)--92.5\n  https:\/\/www.kaggle.com\/shivam17818\/test-all-efficientnet-model-b0-b7?scriptVersionId=38526372\n\n2)Model--EfficientNetB1\n  Epochs--20\n  Image Size--256x256\n  Accuracy(LB)--91.9\n  https:\/\/www.kaggle.com\/shivam17818\/test-all-efficientnet-model-b0-b7?scriptVersionId=38528351\n \n3)Model--EfficientNetB2\n  Epochs--20\n  Image Size--256x256\n  Accuracy(LB)--91.7\n  https:\/\/www.kaggle.com\/shivam17818\/test-all-efficientnet-model-b0-b7?scriptVersionId=38548933\n  \n 4)Model--EfficientNetB3\n  Epochs--20\n  Image Size--256x256\n  Accuracy(LB)--92.2\n  https:\/\/www.kaggle.com\/shivam17818\/test-all-efficientnet-model-b0-b7?scriptVersionId=38551007\n  \n  5)Model--EfficientNetB4\n  Epochs--20\n  Image Size--256x256\n  Accuracy(LB)--91.3\n  https:\/\/www.kaggle.com\/shivam17818\/test-all-efficientnet-model-b0-b7?scriptVersionId=38567246\n\n6)Model--EfficientNetB5\n  Epochs--20\n  Image Size--256x256\n  Accuracy(LB)--92\n  https:\/\/www.kaggle.com\/shivam17818\/test-all-efficientnet-model-b0-b7?scriptVersionId=38568266\n\n7)Model--EfficientNetB6\n  Epochs--20\n  Image Size--256x256\n  Accuracy(LB)--92.9\n  https:\/\/www.kaggle.com\/shivam17818\/test-all-efficientnet-model-b0-b7?scriptVersionId=38569420\n  \n8)Model--EfficientNetB7\n  Epochs--20\n  Image Size--256x256\n  Accuracy(LB)--91.3\n  https:\/\/www.kaggle.com\/shivam17818\/test-all-efficientnet-model-b0-b7\/output?scriptVersionId=38570773"}}