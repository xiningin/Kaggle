{"cell_type":{"eb3e18b1":"code","eab5fe60":"code","588a94a6":"code","f10002e5":"code","d6f25bb0":"code","070ce277":"code","9ddf5ea9":"code","a9813b1a":"code","149e4085":"code","8bd3753b":"markdown","d6e1cd5b":"markdown","b28e95d9":"markdown","5b85d837":"markdown","f905358b":"markdown","06c6edd1":"markdown","0a66613a":"markdown","ff02b15e":"markdown","62bffa97":"markdown"},"source":{"eb3e18b1":"from keras.layers import Dense, Dropout, ReLU, LeakyReLU, BatchNormalization\nfrom keras.models import Sequential, Model, Input\nfrom keras.optimizers import Adam\nfrom keras.datasets import mnist\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","eab5fe60":"import warnings\nwarnings.filterwarnings(\"ignore\")","588a94a6":"import os\nprint(os.listdir(\"..\/input\"))","f10002e5":"x_train = pd.read_csv(\"..\/input\/fashionmnist\/fashion-mnist_train.csv\")\nx_test = pd.read_csv(\"..\/input\/fashionmnist\/fashion-mnist_test.csv\")\n\nx_train = np.array(x_train)\nx_test = np.array(x_test)\n\nx_train = x_train.astype(\"float32\")\/255.0\nx_test = x_test.astype(\"float32\")\/255.0\n\nx_train = x_train[:,:-1]\nx_test = x_test[:,:-1]\n\nprint(x_train.shape)\nprint(x_test.shape)","d6f25bb0":"def create_generator():\n    generator = Sequential()\n    generator.add(Dense(512, input_dim=100))\n    generator.add(ReLU())\n\n    generator.add(Dense(1024))\n    generator.add(ReLU())\n\n    generator.add(Dense(512))\n    generator.add(ReLU())\n\n    #\u00e7\u0131kt\u0131 boyutlar\u0131n\u0131 verimizle uyumlu olacak \u015fekilde 784 olarak ayarlayal\u0131m\n    generator.add(Dense(784, activation=\"tanh\"))\n\n\n    #sahte ve ger\u00e7ek iki s\u0131n\u0131f olaca\u011f\u0131 i\u00e7in classification yapar gibi modelimizi kuraca\u011f\u0131z.\n    generator.compile(loss=\"binary_crossentropy\", optimizer=Adam(lr=0.001, beta_1 = 0.5))\n    return generator\n\ng = create_generator()\ng.summary()","070ce277":"def create_discriminator():\n    discriminator = Sequential()\n    discriminator.add(Dense(1024, input_dim=784))\n    discriminator.add(ReLU())\n    discriminator.add(Dropout(0.4))\n    \n    discriminator.add(Dense(512))\n    discriminator.add(ReLU())\n    discriminator.add(Dropout(0.4))\n\n    discriminator.add(Dense(512))\n    discriminator.add(ReLU())\n\n    discriminator.add(Dense(1, activation=\"sigmoid\"))\n\n    discriminator.compile(loss=\"binary_crossentropy\", optimizer=Adam(lr=0.001, beta_1=0.5))\n\n    return discriminator\n\nd = create_discriminator()\nd.summary()","9ddf5ea9":"def create_gan(generator, discriminator):\n    discriminator.trainable = False\n\n    #\u015fimdi bir input belirleyip generator'a vermekle ba\u015flayal\u0131m.\n    gan_input = Input(shape=(100,))\n    #generator bu k\u0131sm\u0131 ald\u0131ktan sonra bize bir de\u011fer verecek.\n    x = generator(gan_input)\n    #ald\u0131\u011f\u0131m\u0131z de\u011fer discriminator'a girip denetlenecek ve bize bir GAN outputu d\u00f6nderecek\n    gan_output = discriminator(x)\n\n    #art\u0131k bir gan modeli kurabiliriz.\n    gan = Model(inputs=gan_input, outputs=gan_output)\n    gan.compile(loss=\"binary_crossentropy\", optimizer=\"adam\", metrics=[\"acc\"])\n\n    #sonu\u00e7 olarak gan modelimizi d\u00f6nd\u00fcrelim\n    return gan\n\ngan = create_gan(g, d)\ng.summary()","a9813b1a":"epochs = 50\nbatch_size = 256\nacc_list = []\nhsitory = []\ndef gan_train(g, d, gan):\n    for e in range(epochs):\n        print(\"Devam eden epoch : \", e+1)\n        for _ in range(batch_size):\n            noise = np.random.normal(0,1,[batch_size, 100])\n            generated_img = g.predict(noise)\n            \n            batch_img = x_train[np.random.randint(low=0, high=x_train.shape[0], size=batch_size)]\n            \n            x = np.concatenate([batch_img, generated_img])\n\n\n            y_disc = np.zeros(batch_size*2)\n            y_disc[:batch_size] = 1\n\n            d.trainable = True\n            d.train_on_batch(x, y_disc)\n\n            noise = np.random.normal(0,1,[batch_size, 100])\n            y_gen = np.ones(batch_size)\n\n            d.trainable = False\n\n            history = gan.train_on_batch(noise, y_gen)\n        acc_list.append(history[0])\n        history.append(history)\n \n    print(\"E\u011fitim Tamamland\u0131...\")\n\ngan_train(g,d,gan)","149e4085":"noise = np.random.normal(loc=0, scale=1, size=[100,100])\ngenerated_images = g.predict(noise)\ngenerated_images = generated_images.reshape(100,28,28)\nplt.imshow(generated_images[66], interpolation=\"nearest\")\nplt.title(\"GAN Sonucu\\n\u00c7\u0131kan Resim\")\nplt.show()\ngan","8bd3753b":"**GAN MODEL\u0130N\u0130N OLU\u015eTURULMASI**\n\nGenerator ve Discriminator a\u011flar\u0131m\u0131z\u0131 olu\u015fturduktan sonra art\u0131k tek bir yap\u0131da birle\u015ftirip GAN modelimizi olu\u015fturabiliriz.\n\nBa\u015flamadan \u00f6nce bilmeliyiz ki, generator k\u0131sm\u0131n\u0131n, yani a\u011f\u0131m\u0131z\u0131n \u00fcretici olan k\u0131sm\u0131n\u0131n, kendisini g\u00fcncelleyebilmesi i\u00e7in discriminator k\u0131sm\u0131n\u0131 geli\u015ftirmek istemiyoruz. \u00c7\u00fcnk\u00fc e\u011fer fake\/real ayr\u0131m\u0131n\u0131 yapacak olan discriminator k\u0131sm\u0131n\u0131 da e\u011fitirsek a\u011f\u0131n bu k\u0131sm\u0131 da kendini geli\u015ftirece\u011fi i\u00e7in, olu\u015fturulan sahte veri ne kadar ger\u00e7ek\u00e7i olursa olsun bu verinin sahte oldu\u011funu anlayacak ve generator k\u0131sm\u0131 hep ba\u015far\u0131s\u0131z olacakt\u0131r. Dolay\u0131s\u0131yla \u00fcretici a\u011f her \u00e7\u0131kt\u0131s\u0131n\u0131 ba\u015far\u0131s\u0131z g\u00f6recek ve kendini geli\u015ftirmekte zorlanacakt\u0131r. Oysa ki ger\u00e7e\u011fe yakla\u015ft\u0131\u011f\u0131nda ba\u015far\u0131l\u0131 oldu\u011funu bilmesi ve kendini buna g\u00f6re g\u00fcncellemesi gerekiyor. Bu sebeplerden dolay\u0131 discriminator a\u011f\u0131m\u0131z e\u011fitime kapal\u0131 olacak.","d6e1cd5b":"**GAN Modelinin E\u011fitilmesi**","b28e95d9":"**Model Kurma**\n\nGANs modeli Generator ve Discriminator olmak \u00fczere iki a\u011fdan olu\u015fur. Bu a\u011flar\u0131 ayr\u0131 ayr\u0131 kurup daha sonra genel modelimizi olu\u015fturaca\u011f\u0131z.","5b85d837":"# GAN M\u0130MAR\u0130S\u0130N\u0130N KODLANMASI\nNas\u0131l \u00e7al\u0131\u015ft\u0131\u011f\u0131n\u0131 anlad\u0131ysak \u00f6rnek bir GAN mimarisi kurmaya ba\u015flayabiliriz.\n\nBu \u00e7al\u0131\u015fmada mnist verisetini kullanarak GAN a\u011f\u0131n\u0131n sonu\u00e7lar\u0131n\u0131 g\u00f6zlemlemeye \u00e7al\u0131\u015faca\u011f\u0131z.\n\n**K\u00fct\u00fcphanelerin Y\u00fcklenmesi**","f905358b":"Generator a\u011f olu\u015fturmak i\u00e7in fonksiyonumuzu yazal\u0131m.","06c6edd1":"\u015eimdi de Discriminator a\u011f\u0131m\u0131z\u0131n olaca\u011f\u0131 k\u0131sm\u0131 yazal\u0131m.\n\nFakat burada anla\u015f\u0131lmas\u0131 gereken k\u0131s\u0131m Discriminator a\u011f\u0131n input shape'i alaca\u011f\u0131 resimlere uygun olmal\u0131d\u0131r. \u00c7\u00fcnk\u00fc bu a\u011fa resimleri direkt olarak verece\u011fiz, generator gibi kendisi \u00fcretmeyecek.","0a66613a":"Verinin Y\u00fcklenmesi","ff02b15e":"# GENERATIVE ADVERSERIAL NETWORK (GANs) (T\u00fcrk\u00e7e A\u00e7\u0131klamal\u0131)\n# \u00dcRETKEN \u00c7EK\u0130\u015eMEL\u0130 A\u011eLAR\n\n**GANs NED\u0130R?**\n\nGAN bir yapay sinir a\u011f\u0131 mimarisidir. Asl\u0131nda iki ayr\u0131 a\u011f yap\u0131s\u0131n\u0131n bir araya gelmesiyle olu\u015fur. GAN'lar kendisine verilen veriseti ile ayn\u0131 istatistiklere sahip olan yeni veriler olu\u015fturur. \n\nGAN iki ayr\u0131 a\u011fdan olu\u015fur demi\u015ftik. Bu iki ayr\u0131 a\u011fdan birisi ger\u00e7ek verileri al\u0131r ve bir denetleyici yap\u0131ya g\u00f6nderir. \u0130kinci a\u011f yap\u0131s\u0131 ise orjinal veriyi temsil etmesi gereken ba\u015fka bir veri olu\u015fturur ve bu veriyi yine ayn\u0131 denetleyici yap\u0131ya g\u00f6nderir. Denetleyici a\u011f veya yap\u0131 k\u0131sm\u0131nda ise bu veriler test edilir ve ortaya \u00e7\u0131kan verilerin sonucunda taklit\u00e7i yap\u0131dan gelen verilerin orjinal veriye ne kadar benzedi\u011fi \u00f6l\u00e7\u00fcl\u00fcr. Taklit\u00e7i a\u011f yap\u0131s\u0131 e\u011fer yeterince ba\u015far\u0131l\u0131 olamam\u0131\u015fsa a\u011f\u0131rl\u0131klar\u0131n\u0131 g\u00fcncelleyerek yeni bir veri olu\u015fturmaya \u00e7al\u0131\u015f\u0131r. Sonu\u00e7 olarak taklit eden a\u011f\u0131n a\u011f\u0131rl\u0131klar\u0131 belirli bir yerden sonra g\u00fcncellenmi\u015f olur ve orjinal veriye \u00e7ok benzeyen veya orjinal veriyi iyi temsil eden bir veriseti olu\u015fturmay\u0131 \u00f6\u011frenmi\u015f  olur. \n\nYani a\u011flardan bir tanesi orjinal veriyi kullan\u0131rken di\u011feri de ayn\u0131 veriyi taklit etmeye \u00e7al\u0131\u015f\u0131r. Her iki a\u011f da denetleyici yap\u0131ya kendi verisinin orjinal oldu\u011funu kan\u0131tlamaya \u00e7al\u0131\u015f\u0131rken, taklit\u00e7i a\u011f\u0131m\u0131z orjinal veriyi s\u0131f\u0131rdan kendisi olu\u015fturabilecek hale gelir.\n\nBu durumu bir resimle temsil edersek \u015f\u00f6yle g\u00f6r\u00fcnecektir:\n\n![alt text](https:\/\/miro.medium.com\/max\/958\/1*-gFsbymY9oJUQJ-A3GTfeg.png)\n\nResim Kayna\u011f\u0131: https:\/\/medium.com\/@devnag\/generative-adversarial-networks-gans-in-50-lines-of-code-pytorch-e81b79659e3f\n\n**\u00d6RNEK B\u0130R GAN YAPISI**\n![alt text](https:\/\/miro.medium.com\/max\/1741\/1*t78gwhhw-hn1CgXc1K89wA.png)\n\nResim Kayna\u011f\u0131: https:\/\/medium.com\/datadriveninvestor\/generative-adversarial-network-gan-using-keras-ce1c05cfdfd3\n\n**EPOCH ARTTIK\u00c7A \u00d6\u011eRENMEN\u0130N GEL\u0130\u015e\u0130M\u0130**\n![alt text](https:\/\/miro.medium.com\/max\/1952\/1*xm6_ZfvfKSHe2KS49DT8TQ.png)\n\n\nResim Kayna\u011f\u0131: https:\/\/medium.com\/datadriveninvestor\/generative-adversarial-network-gan-using-keras-ce1c05cfdfd3\n\nB\u00fct\u00fcn bu yap\u0131n\u0131n sonucunda nihai amac\u0131m\u0131z yeni veri \u00fcretmektir. \u00dcretilen yeni veri ger\u00e7e\u011fine ne kadar benziyorsa a\u011f\u0131m\u0131z o kadar ba\u015f\u0131r\u0131l\u0131 olmu\u015f demektir. \u0130yi bir yap\u0131da \u00fcretti\u011fimiz yeni veriler ger\u00e7e\u011finden ay\u0131rt edilemeyecek kadar kalitelidir. \n\n\u00d6rnek olarak GANs ile \u00fcretilmi\u015f asl\u0131nda ger\u00e7ekte hi\u00e7 olmayan insan y\u00fczlerine bakal\u0131m:\n\n![alt text](https:\/\/wp-assets.futurism.com\/2018\/12\/ai1.jpg)\n\nResim Kayna\u011f\u0131: https:\/\/futurism.com\/incredibly-realistic-faces-generated-neural-network","62bffa97":"**GAN Sonu\u00e7lar\u0131n\u0131n G\u00f6rselle\u015ftirilmesi**\n\nSadece 50 epoch yapt\u0131\u011f\u0131m\u0131z i\u00e7in \u00e7ok iyi bir sonu\u00e7 \u00e7\u0131kmas\u0131n\u0131 beklemek mant\u0131ks\u0131z olur. Epoch say\u0131s\u0131 artt\u0131k\u00e7a \u00e7ok daha iyi sonu\u00e7lar alabiliriz."}}