{"cell_type":{"0e67d395":"code","0edec909":"code","25e73fae":"code","806a2130":"code","883c388e":"code","beba357e":"code","175a8ccf":"code","bf9bb63b":"code","bc5812c3":"code","16935b1e":"code","d1ff6522":"code","e5755532":"code","d0f98c85":"code","7f2d3531":"code","fbb58467":"code","7e2b4db0":"code","346ed98c":"code","5886248b":"markdown","43aa9111":"markdown","66891bda":"markdown","b3f93eab":"markdown","3fb3dfa8":"markdown","61ab0072":"markdown","e4b46615":"markdown","8e7376c3":"markdown","abfe1851":"markdown","e7d49f98":"markdown","71ab8b34":"markdown"},"source":{"0e67d395":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","0edec909":"df = pd.read_csv('\/kaggle\/input\/heart-disease-uci\/heart.csv')\ndf","25e73fae":"df.info()","806a2130":"y = df.target.values\ny","883c388e":"x_data = df.drop([\"target\"],axis=1) # axis=1 for Column\nx_data","beba357e":"x = (x_data - np.min(x_data))\/(np.max(x_data)-np.min(x_data)).values\nx","175a8ccf":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2,random_state=42)\n\nx_train = x_train.T\nx_test = x_test.T\ny_train = y_train.T\ny_test = y_test.T\n\nprint(\"x_train\",x_train.shape)\nprint(\"x_test\",x_test.shape)\nprint(\"y_train\",y_train.shape)\nprint(\"y_test\",y_test.shape)","bf9bb63b":"# np.full(shape, fill_value)\n\ndef initialize_weights_and_bias(dimension):\n    w = np.full((dimension,1),0.01)\n    b = 0.0\n    return w,b\n\n# w,b = initialize_weights_and_bias(13)","bc5812c3":"def sigmoid(z):\n    y_head = 1\/(1 + np.exp(-z))\n    return y_head","16935b1e":"sigmoid(0)","d1ff6522":"sigmoid(6)","e5755532":"def forward_backward_propagation(w,b,x_train,y_train):\n    # y_train = finally used for comparison\n    \n    # forward propagation\n    z = np.dot(w.T,x_train) + b # np.dot = (1,13)*(13,242)\n    y_head = sigmoid(z)\n    loss = -y_train*np.log(y_head)-(1-y_train)*np.log(1-y_head) # derivative formula\n    cost = (np.sum(loss))\/x_train.shape[1] # x_train.shape[1] = 455\n    \n    # backward propagation\n    derivative_weight = (np.dot(x_train,((y_head-y_train).T)))\/x_train.shape[1]\n    derivative_bias = np.sum(y_head-y_train)\/x_train.shape[1]\n    gradients = {\"derivative_weight\": derivative_weight, \"derivative_bias\": derivative_bias}\n    return cost,gradients","d0f98c85":"def update(w, b, x_train, y_train, learning_rate,number_of_iterarion):\n    cost_list = []\n    cost_list2 = []\n    index = []\n    \n    # updating(learning) parameters is number_of_iterarion times\n    for i in range(number_of_iterarion):\n        # make forward and backward propagation and find cost and gradients\n        cost,gradients = forward_backward_propagation(w,b,x_train,y_train)\n        cost_list.append(cost)\n        # lets update\n        w = w - learning_rate * gradients[\"derivative_weight\"]\n        b = b - learning_rate * gradients[\"derivative_bias\"]\n        if i % 10 == 0:\n            cost_list2.append(cost)\n            index.append(i)\n            print (\"Cost after iteration %i: %f\" %(i, cost))\n            \n    # we update(learn) parameters weights and bias\n    parameters = {\"weight\": w,\"bias\": b}\n    plt.plot(index,cost_list2)\n    plt.xticks(index,rotation='vertical')\n    plt.xlabel(\"Number of Iterarion\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n    return parameters, gradients, cost_list","7f2d3531":"def predict(w,b,x_test):\n    # x_test is a input for forward propagation\n    z = sigmoid(np.dot(w.T,x_test)+b)\n    Y_prediction = np.zeros((1,x_test.shape[1]))\n    # if z is bigger than 0.5, our prediction is sign one (y_head=1),\n    # if z is smaller than 0.5, our prediction is sign zero (y_head=0),\n    for i in range(z.shape[1]):\n        if z[0,i]<= 0.5:\n            Y_prediction[0,i] = 0\n        else:\n            Y_prediction[0,i] = 1\n\n    return Y_prediction","fbb58467":"def logistic_regression(x_train, y_train, x_test, y_test, learning_rate ,  num_iterations):\n    # initialize\n    dimension =  x_train.shape[0]  # that is 30\n    w,b = initialize_weights_and_bias(dimension)\n    # do not change learning rate\n    parameters, gradients, cost_list = update(w, b, x_train, y_train, learning_rate,num_iterations)\n    \n    y_prediction_test = predict(parameters[\"weight\"],parameters[\"bias\"],x_test)\n\n    # Print test Errors\n    print(\"test accuracy: {} %\".format(100 - np.mean(np.abs(y_prediction_test - y_test)) * 100))","7e2b4db0":"logistic_regression(x_train, y_train, x_test, y_test,learning_rate = 1, num_iterations = 300)","346ed98c":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression(solver=\"lbfgs\")\nlr.fit(x_train.T,y_train.T)\nprint(\"test accuracy {}\".format(lr.score(x_test.T,y_test.T)*100))","5886248b":"## Predict","43aa9111":"---\n# Shortcut","66891bda":"* When he gets the value 0, he must return 0.5. Let's check it out.","b3f93eab":"# Logistic Regression","3fb3dfa8":"## Updating(learning) parameters\n* learning_rate => learning coefficient\n* number_of_iterarion => how many times will I go back and forth","61ab0072":"## Normalaziation\n* It is to convert all data to values \u200b\u200bbetween 0-1.","e4b46615":"## Train Test Split","8e7376c3":"## Parameter initiazlize and sigmoid function\n* It is the process of multiplying the properties with w and adding them with bias.\n* For example: The deimesion value from this data equals 13.","abfe1851":"1 -> life <br>\n0 -> dead","e7d49f98":"## Sigmoid Function\n* Returns a value between 0-1","71ab8b34":"* When it gets the value of 6, it should return a value close to 1. Let's check it out."}}