{"cell_type":{"da29ceb3":"code","35344347":"code","5e51316d":"code","0b30deec":"code","44cefe71":"code","bd6b50c0":"code","b68a251e":"code","ba0c6638":"code","48d68f2b":"code","e627143e":"code","5d2d9f67":"code","dfe5ea37":"code","84e19108":"code","3c35e6df":"code","7dc50374":"code","ead8d76b":"code","8c050320":"code","373c688a":"code","67f98753":"code","7212921c":"code","4beddcc5":"code","93cbacf1":"code","30b839e7":"code","5ed8f2aa":"code","10c8d55d":"code","18f4392c":"code","84b01ff3":"code","3381b45b":"code","85e67547":"code","e2883bd2":"code","97b02242":"code","2177aeae":"code","38bf1f4d":"code","b76c06c6":"code","a4519b02":"code","c9d3697e":"code","8240d705":"code","147bbaae":"code","9f803978":"code","998f95fc":"code","00db4a93":"code","1537599b":"code","d80fdc0f":"code","c69c0832":"code","72bde293":"code","2d1dd3ac":"code","c7ce2279":"code","977bf9f3":"code","80009119":"code","b8528b7e":"code","a147725d":"code","5d61e3cb":"code","2193d509":"code","e3c99741":"code","57e0f0e0":"code","3ae53821":"code","1cea0e3a":"code","4c8cb108":"code","c0b834c9":"code","f7ae9dd8":"code","905359c8":"code","a73fa4db":"code","618a2eda":"code","f626f117":"code","2948bb05":"code","44f74682":"code","a7f9c543":"code","18eb12cc":"code","463f2739":"code","972bfd45":"code","05f7dfc5":"code","b4b2357d":"code","d19dbadd":"code","a2b682ed":"code","968cd75a":"code","462ba3c5":"code","6a8a9fb0":"code","8e73fa07":"code","b299ccf7":"code","bd0579e4":"code","f6d0f822":"code","c3e7a5f8":"code","966898c5":"code","6eff38aa":"code","855055e5":"code","5b5ea14b":"code","03737fc2":"code","77486002":"code","2562dc32":"code","bee469b5":"code","1d444e1a":"code","129f3869":"code","fbaafff2":"code","19ee4bef":"code","609cc01b":"code","f19d137a":"code","ae74c678":"code","70a4fab2":"code","6793dad0":"code","44dacfc8":"code","838f4e3a":"code","8774b195":"code","79b9e6cf":"code","f8e1b280":"code","46202e83":"code","b9b19ce3":"code","44eb80a2":"code","87783722":"code","7517d095":"code","42776b25":"code","a9613c41":"code","24e5014f":"code","e694b0e4":"code","e5ab1b9c":"code","82ddc83d":"code","f855161d":"code","6553c802":"code","0a0961ff":"code","e40b1e18":"code","565eb9df":"code","63295677":"code","99562c4e":"code","46a78e2d":"code","e0ff7c93":"code","da2c167b":"code","5c6fa421":"markdown","0cbee08f":"markdown","b52df9da":"markdown","53ac4229":"markdown","569d814d":"markdown","5c8c500b":"markdown","b7139ba6":"markdown","80aee8bb":"markdown","cfcbb61b":"markdown","f766b508":"markdown","d829343e":"markdown","557afed1":"markdown","2f3580d9":"markdown","44be3db7":"markdown","3e26a865":"markdown","bfb1672f":"markdown","75ed7798":"markdown","b56d7b64":"markdown","fb96bee8":"markdown","041b08be":"markdown","5a589eaf":"markdown","29960019":"markdown","6a28c4c2":"markdown","55aaa8ae":"markdown","faa18b9c":"markdown","38480311":"markdown"},"source":{"da29ceb3":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import stats\n\n#for Spliting Data and Hyperparameter Tuning \nfrom sklearn.model_selection import train_test_split,GridSearchCV\n\n#Importing Machine Learning Model\nfrom catboost import CatBoostRegressor\nfrom sklearn import ensemble\nfrom sklearn.linear_model import LinearRegression\nfrom xgboost import XGBRFRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.svm import SVR\nfrom lightgbm import LGBMRegressor\n\n#statistical Tools\nfrom sklearn import metrics\n\n#To tranform data\nfrom sklearn import preprocessing\n\n#Setting Format\npd.options.display.float_format = '{:.5f}'.format\npd.options.display.max_columns = None\npd.options.display.max_rows = None\nnp.random.seed(100)","35344347":"train = pd.read_csv(\"..\/input\/big-mart-sales-prediction\/Train.csv\")\ntest = pd.read_csv(\"..\/input\/big-mart-sales-prediction\/Test.csv\")","5e51316d":"data = pd.concat([train,test],ignore_index=True)\ndata.shape","0b30deec":"print(train.shape,test.shape)\nprint(train.shape[0]+test.shape[0])","44cefe71":"data.tail(10)","bd6b50c0":"data.info()","b68a251e":"data.describe(include='all').transpose()","ba0c6638":"#Extracting the unique values of each columns\n\nfor i in data.columns:\n    print(i,\" : distinct_value\")\n    print(data[i].nunique(), \":No of unique values\")\n    print(data[i].unique())\n    print(\"-\"*30)\n    print(\"\")","48d68f2b":"sns.boxplot(train.Item_Outlet_Sales)","e627143e":"plt.hist(data.Item_Visibility, bins=10)\nplt.show()","5d2d9f67":"plt.hist(data.Item_MRP, bins=10, rwidth=.8)\nplt.show()","dfe5ea37":"plt.figure(figsize=(10,7))\nfor i, col in enumerate(['Item_Weight', 'Item_Visibility', 'Item_MRP']):\n    plt.subplot(3,1,i+1)\n    sns.boxplot(data[col])\n    plt.xlabel('')\n    plt.ylabel(col)","84e19108":"plt.figure(figsize=(10,7))\nfor i, col in enumerate(['Item_Weight', 'Item_Visibility', 'Item_MRP']):\n    plt.subplot(3,1,i+1)\n    sns.violinplot(data[col])\n    plt.xlabel('')\n    plt.ylabel(col)","3c35e6df":"plt.figure(figsize=(20,6))\nplt.subplot(1,2,1)\nsns.barplot(data=data, y='Item_Outlet_Sales', x='Item_Fat_Content')\nplt.xlabel('Item_Fat_Content', fontsize=14)\n\nplt.subplot(1,2,2)\nsns.boxplot(data=data, y='Item_Outlet_Sales', x='Item_Fat_Content')\nplt.xlabel('Item_Fat_Content', fontsize=14)\nplt.show()","7dc50374":"plt.figure(figsize=(18,8))\nsns.countplot(data.Item_Type)\nplt.xticks(rotation=20)\nplt.show()","ead8d76b":"plt.figure(figsize=(18,8))\nsns.boxplot(data=data, y='Item_Outlet_Sales', x='Item_Type')\nplt.xlabel('Item_Type', fontsize=14)\nplt.xticks(rotation=35)\nplt.show()","8c050320":"plt.figure(figsize=(18,8))\nsns.countplot(data.Outlet_Identifier)\nplt.xticks(rotation=20)\nplt.show()","373c688a":"plt.figure(figsize=(8,5))\nsns.countplot(data.Outlet_Size)\nplt.xticks(rotation=35)\nplt.show()","67f98753":"plt.figure(figsize=(18,8))\nsns.countplot(data.Outlet_Establishment_Year)\nplt.xticks(rotation=30)\nplt.show()","7212921c":"plt.figure(figsize=(12,8))\nsns.countplot(data.Outlet_Type)\nplt.xticks(rotation=45)\nplt.show()","4beddcc5":"plt.figure(figsize=(25,15))\noutlet_col = [ 'Outlet_Size', 'Outlet_Type', 'Outlet_Location_Type','Outlet_Establishment_Year']\nfor i, col in enumerate(outlet_col):\n    plt.subplot(2,2,i+1)\n    sns.boxplot(data=data, y='Item_Outlet_Sales', x=col)\n    plt.xlabel(col, fontsize=14)","93cbacf1":"plt.figure(figsize=(15,10))\nplt.xlabel(\"Item_Weight\")\nplt.ylabel(\"Item_Outlet_Sales\")\nplt.title(\"Item_Weight and Item_Outlet_Sales Analysis\")\nsns.scatterplot(data.Item_Weight, data.Item_Outlet_Sales, hue=data.Item_Type)","30b839e7":"plt.figure(figsize=(15,10))\nplt.xlabel(\"Item_Visibility\")\nplt.ylabel(\"Item_Outlet_Sales\")\nplt.title(\"Item_Visibility and Item_Outlet_Sales Analysis\")\nsns.scatterplot(data.Item_Visibility, data.Item_Outlet_Sales, hue=data.Item_Type)","5ed8f2aa":"plt.figure(figsize=(15,10))\nplt.xlabel(\"Item_Visibility\")\nplt.ylabel(\"Market Retail Price\")\nplt.title(\"Item_Visibility and Market Retail Price Analysis\")\nsns.scatterplot(data.Item_Visibility, data.Item_MRP, alpha=0.3)","10c8d55d":"sns.scatterplot(data.Item_MRP, data.Item_Outlet_Sales)","18f4392c":"plt.figure(figsize=(18,8))\nsns.boxplot(data.Item_Type, data.Item_Outlet_Sales)\nplt.xticks(rotation=90)\nplt.show()","84b01ff3":"plt.figure(figsize=(12,8))\nsns.boxplot(data.Item_Fat_Content, data.Item_Outlet_Sales)\nplt.xticks(rotation=90)\nplt.show()","3381b45b":"plt.figure(figsize=(18,8))\nsns.boxplot(data.Outlet_Identifier, data.Item_Outlet_Sales)\nplt.xticks(rotation=90)\nplt.show()","85e67547":"sns.violinplot(data.Outlet_Location_Type, data.Item_Outlet_Sales)\nplt.xticks(rotation=20)\nplt.show()","e2883bd2":"plt.figure(figsize=(10,4))\nsns.violinplot(data.Outlet_Type, data.Item_Outlet_Sales)\nplt.xticks(rotation=20)\nplt.show()","97b02242":"sns.pairplot(data.drop(columns='Outlet_Establishment_Year'), hue='Outlet_Type')","2177aeae":"#We can see that we have some data missing\n\nround(100*(data.isna().sum())\/len(data), 2)","38bf1f4d":"#Looking for any '0' Values\ndata[data==0].sum()","b76c06c6":"data['Item_Weight'].fillna(data['Item_Weight'].mean(), inplace=True)","a4519b02":"data.head()","c9d3697e":"data.corr()","8240d705":"#Checking the Correlation between data with respect to target\n\ndata.corr()['Item_Outlet_Sales']","147bbaae":"plt.figure(figsize=(25,15))\nsns.heatmap(data.corr(), vmax=1, square=True, annot=True, cmap='viridis')\nplt.title(\"Correlation between different attributes\")","9f803978":"data.head()","998f95fc":"item_visiblity_avg = data.pivot_table( index = 'Item_Identifier', values = 'Item_Visibility')\nitem_visiblity_avg.head()","00db4a93":"data['Item_visiblity_avg'] = data.apply(lambda x: x['Item_Visibility']\/item_visiblity_avg['Item_Visibility'][item_visiblity_avg.index==x['Item_Identifier']][0], axis=1).astype(float)","1537599b":"data.head()","d80fdc0f":"data['Item_Visibility'], _ = stats.boxcox(data['Item_Visibility'] + 1)","c69c0832":"sns.distplot(data['Item_Visibility'])","72bde293":"'''\n\nWe saw that in Item_identifier 1st 2 character's are common and other characters describes about the product\n\nSo we can extract those characters to simplify our dataset\n\n'''\n\ndata['Item_Type_Combined'] = data['Item_Identifier'].apply(lambda x: x[0:2])\ndata['Item_Type_Combined'].value_counts()","2d1dd3ac":"data.head()","c7ce2279":"columns = ['Item_Identifier', 'Item_Type_Combined','Item_Type', 'Item_Fat_Content', 'Item_Weight', 'Item_Visibility',\n        'Item_visiblity_avg', 'Item_MRP', 'Outlet_Identifier',\n       'Outlet_Establishment_Year', 'Outlet_Size', 'Outlet_Location_Type',\n       'Outlet_Type', 'Item_Outlet_Sales']\ndata = data[columns]\ndata.head()","977bf9f3":"data.pivot_table(values=\"Item_Outlet_Sales\",index=['Item_Type_Combined','Item_Type'],aggfunc='sum')","80009119":"data['Item_Type_Combined'] = data['Item_Type_Combined'].map({'FD':'Food','NC':'Non-Consumable','DR':'Drinks'})\ndata['Item_Type_Combined'].value_counts()","b8528b7e":"data.Outlet_Size.value_counts()","a147725d":"data['Outlet_Size'] = data['Outlet_Size'].fillna('Not_specified')\ndata['Outlet_Size'].value_counts()","5d61e3cb":"data['Item_Fat_Content'].value_counts()","2193d509":"data['Item_Fat_Content'] = data['Item_Fat_Content'].replace('LF','Low Fat')\n\ndata['Item_Fat_Content'] = data['Item_Fat_Content'].replace('low fat','Low Fat')\n\ndata['Item_Fat_Content'] = data['Item_Fat_Content'].replace('reg','Regular')\n\ndata['Item_Fat_Content'].value_counts()","e3c99741":"data.pivot_table(values=\"Item_Outlet_Sales\",index=['Outlet_Location_Type','Outlet_Size','Outlet_Type'],aggfunc=np.sum)","57e0f0e0":"plot_outlet = data.pivot_table(values=\"Item_Outlet_Sales\",index=['Outlet_Location_Type','Outlet_Size','Outlet_Type'],aggfunc=np.sum)\nplot_outlet.plot(kind='bar',figsize = (10,6))\nplt.xticks(rotation=75)\nplt.show()","3ae53821":"plot_item = data.pivot_table(values=\"Item_Outlet_Sales\",index=['Item_Fat_Content','Item_Type_Combined'],aggfunc='sum')\nplot_item.plot(kind='bar',figsize = (10,6))\nplt.xticks(rotation=0)\nplt.show()","1cea0e3a":"data.pivot_table(values=\"Item_Outlet_Sales\",index=['Item_Fat_Content','Item_Type_Combined','Item_Type'],aggfunc='sum')","4c8cb108":"data.loc[data['Item_Type_Combined']==\"Non-Consumable\",'Item_Fat_Content'] = \"Household\"","c0b834c9":"plot_identifier = data.pivot_table(index=\"Outlet_Identifier\", values=\"Item_Outlet_Sales\", aggfunc=np.sum)\nplot_identifier","f7ae9dd8":"plot_identifier.plot(kind='bar',figsize = (15,12))\nplt.show()","905359c8":"data.pivot_table(values=['Item_Outlet_Sales'],index=['Outlet_Type','Outlet_Location_Type','Outlet_Size','Outlet_Identifier'],aggfunc=np.sum)","a73fa4db":"data.groupby('Outlet_Identifier')['Item_Outlet_Sales'].sum()","618a2eda":"data.Outlet_Identifier.value_counts()","f626f117":"data.loc[data['Outlet_Identifier']==\"OUT010\",'Outlet_Size'] = \"Small\"\n\ndata.loc[data['Outlet_Identifier']==\"OUT019\",'Outlet_Size'] = \"Small\"\n\ndata.loc[data['Outlet_Identifier']==\"OUT027\",'Outlet_Size'] = \"High\"\n\ndata.loc[data['Outlet_Identifier']==\"OUT017\",'Outlet_Size'] = \"High\"\n\ndata.loc[data['Outlet_Identifier']==\"OUT045\",'Outlet_Size'] = \"High\"\n\ndata.loc[data['Outlet_Identifier']==\"OUT035\",'Outlet_Size'] = \"Medium\"\n\ndata.loc[data['Outlet_Identifier']==\"OUT046\",'Outlet_Size'] = \"Medium\"","2948bb05":"data.pivot_table(values=['Item_Outlet_Sales'],index=['Outlet_Size','Outlet_Identifier'],aggfunc=np.sum)","44f74682":"data.pivot_table(values=['Item_Outlet_Sales'],index=['Outlet_Type','Outlet_Identifier'],aggfunc=np.sum).plot(kind='bar',figsize = (10,6))\nplt.show()","a7f9c543":"perishable = [\"Breads\", \"Breakfast\", \"Dairy\", \"Snack Foods\",\n               \"Fruits and Vegetables\", \"Meat\", \"Seafood\", \"Starchy Foods\"]\n\nnon_perishable = [\"Baking Goods\", \"Canned\", \"Frozen Foods\", \n                   \"Hard Drinks\", \"Health and Hygiene\",\n                   \"Household\", \"Soft Drinks\"]","18eb12cc":"def filter_data(item):\n    if item in perishable:\n        return 'perishable'\n    elif item in non_perishable:\n        return 'non_perishable'\n    else:\n        return'Not_Known'\n    \ndata['Item_Type_New'] = data.Item_Type.apply(filter_data)","463f2739":"data.Item_Type_New.value_counts()","972bfd45":"sns.scatterplot(data.Item_MRP, data.Item_Outlet_Sales)","05f7dfc5":"data['Item_MRP_cat'] = pd.cut(data.Item_MRP, bins=[31,69,137,203,270], labels=['a','b','c','d'])","b4b2357d":"data.groupby(['Item_Type_Combined', 'Item_Type_New', 'Item_Type'])['Item_Outlet_Sales'].sum()","d19dbadd":"data['MRP_per_unit_weight'] = data.Item_MRP\/data.Item_Weight    ","a2b682ed":"data['Outlet_Years'] = 2020 - data['Outlet_Establishment_Year']","968cd75a":"data.Outlet_Establishment_Year = data.Outlet_Establishment_Year.astype('category')","462ba3c5":"data['Item_Identifier'] = data['Item_Identifier'].apply(lambda x: x[3:5])","6a8a9fb0":"data.head()","8e73fa07":"data.corr()","b299ccf7":"data['Item_visiblity_avg'] = np.log(data['Item_visiblity_avg'] + 1)","bd0579e4":"plt.figure(figsize=(25,15))\nsns.heatmap(data.corr(), vmax=1, square=True, annot=True, cmap='viridis')\nplt.title(\"Correlation between different attributes\")","f6d0f822":"df = data.copy()","c3e7a5f8":"df_train = df.iloc[0:train.shape[0]]\ndf_test = df.iloc[train.shape[0]:]","966898c5":"print(df_train.shape,df_test.shape)","6eff38aa":"df.info()","855055e5":"df_train.select_dtypes(include='float').columns","5b5ea14b":"df_train = pd.get_dummies(df_train)","03737fc2":"df_train.corr()['Item_Outlet_Sales']","77486002":"df_train.head()","2562dc32":"df_train.shape","bee469b5":"df_train.info()","1d444e1a":"df_x = df_train.drop(['Item_Outlet_Sales'], axis=1)\ndf_y = df_train['Item_Outlet_Sales']","129f3869":"x_train, x_test, y_train, y_test=train_test_split(df_x,df_y, train_size=0.8, random_state=10)","fbaafff2":"#pip install --upgrade git+https:\/\/github.com\/stanfordmlgroup\/ngboost.git","19ee4bef":"lr = LinearRegression()\n\nrfc = ensemble.RandomForestRegressor(n_estimators=400, bootstrap=True, min_samples_leaf=100, min_samples_split=8, max_depth=6)\nada = ensemble.AdaBoostRegressor(n_estimators=1000, learning_rate=0.01)\ngbr = ensemble.GradientBoostingRegressor(learning_rate=0.01, n_estimators=1000, max_depth=5, min_samples_split=8, min_samples_leaf=100)\nxgb = XGBRFRegressor(n_jobs=-1, n_estimators=1000, max_depth=5)\ncat = CatBoostRegressor(verbose=0)\ndtr = DecisionTreeRegressor(max_depth=15, min_samples_leaf=100)\nlgbr = LGBMRegressor(n_estimators = 440, learning_rate=0.01, max_depth=12, objective='tweedie', num_leaves=15, num_threads = 4)\n\nknn = KNeighborsRegressor()\n\nmlp = MLPRegressor()\n\nsvr = SVR(kernel='linear', C=10, gamma='scale')","609cc01b":"accuracy = {}\nrmse = {}\nexplained_variance = {}\nmax_error = {}\nMAE = {}\n\ndef train_model(model, model_name):\n    print(model_name)\n    model.fit(x_train,y_train)\n    pred = model.predict(x_test)\n\n    acc = metrics.r2_score(y_test, pred)*100\n    accuracy[model_name] = acc\n    print('R2_Score',acc)\n\n    met = np.sqrt(metrics.mean_squared_error(y_test, pred))\n    print('RMSE : ', met)\n    rmse[model_name] = met\n\n    var = (metrics.explained_variance_score(y_test, pred))\n    print('Explained_Variance : ', var)\n    explained_variance[model_name] = var\n\n    error = (metrics.max_error(y_test, pred))\n    print('Max_Error : ', error)\n    max_error[model_name] = error\n    \n    err = metrics.mean_absolute_error(y_test, pred)\n    print(\"Mean Absolute Error\", err)\n    MAE[model_name] = err","f19d137a":"train_model(cat, \"Cat Boost\")","ae74c678":"train_model(svr, \"Support Vector Machine\")","70a4fab2":"train_model(lr, \"Linear Regression\")","6793dad0":"train_model(rfc, \"Random Forest\")","44dacfc8":"train_model(xgb, \"Xtreme Gradient Random Forest\")","838f4e3a":"train_model(ada, \"Ada Boost\")","8774b195":"train_model(gbr, \"Gradient Boost\")","79b9e6cf":"train_model(dtr, \"Decision Tree\")","f8e1b280":"train_model(mlp, \"Multi-layer Perceptron\")","46202e83":"train_model(knn, \"K Nearest Neighbors\")","b9b19ce3":"train_model(lgbr, 'Light Gradient Boost')","44eb80a2":"from ngboost import NGBRegressor\nngb = NGBRegressor(minibatch_frac=0.5, col_sample=0.5, Base=dtr)\ntrain_model(ngb, \"Natural Grading Boost\")","87783722":"sns.set_style(\"whitegrid\")\nplt.figure(figsize=(16,5))\nplt.yticks(np.arange(0,110,5))\nplt.ylabel(\"Accuracy %\")\nplt.xlabel(\"Algorithms\")\nplt.xticks(rotation = 90)\nsns.barplot(x=list(accuracy.keys()), y=list(accuracy.values()), palette=\"cubehelix\")\nplt.show()","7517d095":"sns.set_style(\"whitegrid\")\nplt.figure(figsize=(16,5))\nplt.yticks(np.arange(0,1600,100))\nplt.ylabel(\"MSE\")\nplt.xlabel(\"Algorithms\")\nplt.xticks(rotation = 90)\nsns.barplot(x=list(rmse.keys()), y=list(rmse.values()))\nplt.show()","42776b25":"sns.set_style(\"whitegrid\")\nplt.figure(figsize=(16,5))\nplt.yticks(np.arange(0,1,0.05))\nplt.title(\"Explained Variance Score\")\nplt.xlabel(\"Algorithms\")\nplt.xticks(rotation = 90)\nsns.barplot(x=list(explained_variance.keys()), y=list(explained_variance.values()))\nplt.show()","a9613c41":"sns.set_style(\"whitegrid\")\nplt.figure(figsize=(16,5))\nplt.yticks(np.arange(0,10000,500))\nplt.ylabel(\"Max Error\")\nplt.xlabel(\"Algorithms\")\nplt.xticks(rotation = 90)\nsns.barplot(x=list(max_error.keys()), y=list(max_error.values()))\nplt.show()","24e5014f":"sns.set_style(\"whitegrid\")\nplt.figure(figsize=(16, 5))\nplt.yticks(np.arange(0, 1000, 100))\nplt.ylabel(\"Mean Absolute Error\")\nplt.xlabel(\"Algorithms\")\nplt.xticks(rotation = 90)\nsns.barplot(x = list(MAE.keys()), y = list(MAE.values()))\nplt.show()","e694b0e4":"'''    \nngb = NGBRegressor(minibatch_frac=0.5, col_sample=0.5, Base=dtr)\nparam = dict(n_estimators = [np.linspace(0,2000, 1000)])\n\nrs = GridSearchCV(ngb, param, n_jobs=-1, cv=5, verbose=3)\n\nrs.fit(df_x, df_y)\n\nrs.best_score_*100'''\n\n'''\nbest_estimator = NGBRegressor(minibatch_frac=0.5, col_sample=0.5, Base=dtr, n_estimators=480)'''","e5ab1b9c":"ngb_1 = NGBRegressor(minibatch_frac=0.5, col_sample=0.5, Base=dtr, n_estimators=480)","82ddc83d":"train_model(ngb_1,'extra')","f855161d":"ngb_1.fit(df_x, df_y)","6553c802":"df_test.drop(['Item_Outlet_Sales'], axis=1, inplace=True)\ndf_test.reset_index(drop=True, inplace=True)","0a0961ff":"df_test.shape","e40b1e18":"df_test_ = pd.get_dummies(df_test)\ndf_test_.reset_index(drop=True, inplace=True)","565eb9df":"df_test['Item_Outlet_Sales'] = ngb_1.predict(df_test_)","63295677":"df_test.head()","99562c4e":"df_test.to_csv('Predicted_sales.csv', index=None)","46a78e2d":"submission = ['Item_Type_Combined','Outlet_Identifier','Item_Outlet_Sales']","e0ff7c93":"submission = df_test[submission]\nsubmission.head()","da2c167b":"submission.to_csv('submission.csv', index=None)","5c6fa421":"We will use Gradient Boosting Regressor because we get less error with this method and more accuracy","0cbee08f":"# Importing Libraries","b52df9da":"After we extract 1st 2 characters from Item_identifier we saw that it means to certain item type\nNow, we can rename them accordingly","53ac4229":"After looking closely we get that [\"LF\",\" Low Fat\",\" low fat\"] & [\"Regular\",\"reg\"] are same and just acronyms","569d814d":"# Transform Data","5c8c500b":"# Importing Data","b7139ba6":"# Finding Missing Values","80aee8bb":"1. Filling the mssing data in Item_weight with mean\n2. Because every item should have some weight\n","cfcbb61b":"We saw that Outlet_size have some Nan Values Lets fill them with 'Not_specified' for now. We will work later for it.","f766b508":"> New Accuracy is a little bit higher \"64.89206436566914\"\nLets use it for our New Prediction","d829343e":"1. When we look Closely Grocery Store have the Lowest Sales\n2. Supermarket Type3 have the Highest sale\n\nAfter Carefully analyzing Outlet_size and Outlet_Identifier with Sales and Total Number of each Outlet_Identifier I think some Outlet_Identifier are in wrong Outlet_Size lets fix them","557afed1":"# Lets Do HyperParameter Tuning","2f3580d9":"# Univariate Analysis","44be3db7":"# Correlation","3e26a865":"# Visualising our Output","bfb1672f":"# Now Lets use Machine Learning Model and check which model works","75ed7798":"# Let's Create New Columns","b56d7b64":"# Explorative Data Analysis","fb96bee8":"Now we will do predict our data with get_dummies","041b08be":"Rearranging the Columns To get the better view of data","5a589eaf":"# Multi-variate Analysis","29960019":"From above table we saw that Non_Consumable goods don't fit with Low_Fat.\nSo lets change them accordingly\nProducts looks like Household Items and lets it to Household","6a28c4c2":"Lets Look at all the unique values in Columns","55aaa8ae":"# Bivariate Analysis","faa18b9c":"# Now Let's predict Sales","38480311":"# Seperating Train and test data"}}