{"cell_type":{"692a7c40":"code","bd9946c0":"code","7c465dde":"code","1b4ce27e":"code","550f03bd":"code","a357d64a":"code","2eb8226e":"code","02a28bab":"code","703fc1e8":"code","2dc1e60c":"code","3256b4eb":"code","608ec60e":"code","762b2d06":"code","de8d43ca":"code","bb3b5275":"code","8100a474":"code","f19a42a7":"code","43773ecb":"code","52d157df":"code","9806586e":"code","bc8f763e":"code","5b38ae0d":"code","d73bff21":"code","78637606":"code","f7d3feaa":"code","b22f20d3":"code","e6c1d641":"code","e5fd9c2e":"code","961b0764":"code","6a787fbf":"code","7b6ec72c":"code","9c9e9712":"code","516cb731":"code","aa21b01c":"code","ea86c5d3":"code","1bd68a4a":"code","62119ee6":"code","b9522849":"code","03718e30":"code","399e27ed":"code","b50d62a8":"code","5f2bdbc0":"code","08b63549":"code","af67a671":"code","1772dea4":"code","8e7ea12e":"code","68c41fe0":"code","a130346b":"code","38fe0fcf":"code","0ec7c1ad":"code","ec29ac61":"code","d3a5602c":"code","0f61dfb6":"code","d84eb209":"code","29950be0":"code","03978402":"code","ffaafcbf":"code","647f09d4":"code","3ea7b83a":"code","97e99733":"code","bda8f0f0":"code","5686085f":"code","3676ddbf":"code","72798ec9":"code","8879f3dc":"code","ebeb4cd9":"code","e5a91d94":"code","3738db62":"code","3acaf081":"code","13f8735f":"code","69fc9573":"code","ec910af6":"code","80f7d3be":"code","0189b407":"code","21401e93":"code","8a8e1ba5":"code","94fe941c":"code","4eb11193":"code","d58ab675":"code","5d81748a":"code","fb52e3cd":"code","a02d3667":"code","ebd83a71":"code","d6517a02":"code","263e97e9":"code","17f07c7d":"code","9caf371e":"code","e4795824":"code","11e4f90a":"code","8b156ba6":"code","90302a7d":"code","386c67b9":"code","61fc120f":"code","274b8bee":"code","9613b291":"code","7691b1f0":"code","91321491":"code","128dd8d3":"code","e0a39f6e":"code","29909963":"code","aa5f9db8":"code","68539878":"code","0aff5fef":"code","bba5b0d7":"code","5086d729":"code","02c5f9a3":"code","fe76d99d":"code","e2504fd7":"code","5a849426":"code","06a1419c":"code","86258a65":"code","98c2c35f":"code","0388a628":"code","8f90ebfb":"code","74886f4e":"code","87b6a1a8":"code","931d7dd8":"code","fc1d0c44":"code","37b150aa":"code","3ce419eb":"code","b0d86942":"code","91fb078c":"code","7c1e8e1f":"markdown","c3fda73a":"markdown","790e093d":"markdown","74ee0080":"markdown","8e205898":"markdown","f30b5717":"markdown","50625373":"markdown","f03f9367":"markdown","d5aaaa69":"markdown","5097e592":"markdown","28269378":"markdown","867ebc25":"markdown","36458c1b":"markdown","430d35cb":"markdown","df2ed83e":"markdown","75202d9a":"markdown","e794957d":"markdown","5209449a":"markdown","b153d41b":"markdown","f7ab96c4":"markdown","7ee1707d":"markdown","0f74b197":"markdown","bf5bcbf5":"markdown","be3c1075":"markdown","63aca939":"markdown","9e2db78a":"markdown","ef41b279":"markdown","d8dd7d0b":"markdown","5934bb68":"markdown","d170f2c1":"markdown","a7c59696":"markdown","1875a886":"markdown","0b849512":"markdown","00b7c4be":"markdown","f284ac44":"markdown","93ec6ee8":"markdown","49fb03e8":"markdown","b69e64a6":"markdown","161024e4":"markdown","95b2f605":"markdown","54962f0b":"markdown","559c53bc":"markdown","7c5adf1b":"markdown","9d1dfdd8":"markdown","c0de5b9e":"markdown","a6021370":"markdown","12036e2f":"markdown","6dfb0e93":"markdown","dc84b458":"markdown","70e934d3":"markdown","5545008a":"markdown","2e84b500":"markdown","a14a7866":"markdown","3339062f":"markdown","58784fd3":"markdown","3e844763":"markdown","588b4acd":"markdown","8aa7aefa":"markdown","629453b8":"markdown","008c4b29":"markdown","0349c279":"markdown","5394c67d":"markdown","7519ab05":"markdown","6816070e":"markdown","2a385c4c":"markdown","149e8481":"markdown","51cf2277":"markdown","bc7e6349":"markdown","677b2b98":"markdown","55021618":"markdown","cabd0442":"markdown","fdb4889a":"markdown","63b247de":"markdown","d7a9d5bd":"markdown","8f3fd85e":"markdown","f92fda52":"markdown","3a1e78fe":"markdown","18ca6436":"markdown","812b8b26":"markdown","3582cb78":"markdown","f62633ea":"markdown","fcad332c":"markdown","e3f1b788":"markdown","9105d488":"markdown","2d54996f":"markdown","b7577c1d":"markdown","afa6fc60":"markdown","9a0a9748":"markdown","3dbc8042":"markdown","33086da7":"markdown","704782da":"markdown","9257d2c7":"markdown","1901a6da":"markdown","dde91083":"markdown","5fcf3463":"markdown","da98655d":"markdown","3b387b06":"markdown","25d14213":"markdown","3be26ba2":"markdown","bdfdb92b":"markdown","6a271c03":"markdown","3a67482f":"markdown","5d917b00":"markdown","205a12d7":"markdown","f6387986":"markdown","d6f40933":"markdown","9871858e":"markdown","d85228e7":"markdown","fc65da75":"markdown","b44db273":"markdown","d21ab608":"markdown","a5118d9d":"markdown","0dd0422d":"markdown","5a897f33":"markdown","fd0921dd":"markdown","f2854fb0":"markdown","ba3181ba":"markdown","0bccb641":"markdown","714b5db2":"markdown","2d364d12":"markdown","c5f88fee":"markdown","3936ba90":"markdown","4876e019":"markdown"},"source":{"692a7c40":"import numpy as np\nimport pandas as pd\n\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\ntrain = pd.read_csv('..\/input\/titanic\/train.csv')","bd9946c0":"train.head()","7c465dde":"train.head(10)","1b4ce27e":"train","550f03bd":"train.tail()","a357d64a":"train.tail(10)","2eb8226e":"train[101:111]","02a28bab":"train.describe()","703fc1e8":"train.info()","2dc1e60c":"train.shape","3256b4eb":"train.dtypes","608ec60e":"len(train)","762b2d06":"train.columns","de8d43ca":"train.columns[3]","bb3b5275":"train.columns[3:5]","8100a474":"train['Name']","f19a42a7":"train.isnull().any()","43773ecb":"train.isna().any()","52d157df":"train.isnull().sum()","9806586e":"train.isna().sum()","bc8f763e":"train.loc[9]","5b38ae0d":"train['Name']","d73bff21":"train.loc[train.Age.values < 1]","78637606":"train.loc[9,['Name']]","f7d3feaa":"train.iloc[11:21]","b22f20d3":"train.iloc[21]","e6c1d641":"pd.set_option(\"display.max_columns\", 8)\ntrain.head()","e5fd9c2e":"train.sort_values('Fare', ascending=False)","961b0764":"train.sort_values('Fare', ascending=True)","6a787fbf":"train.sort_values('Fare', ascending=True)[101:105]","7b6ec72c":"train.sort_values(['Fare', 'Survived', 'Pclass'], ascending=[False, False, False])","9c9e9712":"train[train['Fare'] > 80]","516cb731":"train.sort_values(by=['Pclass'], axis=0)\n","aa21b01c":"train.reindex(sorted(train.columns), axis=1)","ea86c5d3":"train.sort_index(axis=1)","1bd68a4a":"train[(train.Age >= 30) & (train.Sex == 'female')]","62119ee6":"train[train.Embarked.isin(['C'])]","b9522849":"train[train.Cabin.isin(['C50', 'C85'])]","03718e30":"train[train.Ticket.isin(['113572']) & train.Parch.isin([0])]","399e27ed":"(train.Fare == 80.0).sum()","b50d62a8":"(train.Fare > 80.0).sum()","5f2bdbc0":"(train.Fare > 80.0).any()","08b63549":"(train.Fare > 80.0).mean()","af67a671":"sample = pd.DataFrame()","1772dea4":"temp = train.copy()\n\ntemp.head()","8e7ea12e":"temp['New']  = 0\n\ntemp.head()","68c41fe0":"temp['New']  = temp['Age']\n\ntemp.head()","a130346b":"y_train = train['Survived'] \n\ny_train.head()","38fe0fcf":"sample1 = train[0:3] \n\nsample1.head()","0ec7c1ad":"sample2 = train[['Pclass', 'Name', 'Sex']]  # Make sure there are two square backets \ub300\uad04\ud638 \ub450 \uac1c \uc784\uc744 \uba85\uc2ec\ud558\uc138\uc694.\n\nsample2.head()","ec29ac61":"sample3 = train[['Pclass', 'Name', 'Sex']] [1:3]\n\nsample3.head()","d3a5602c":"sample4 = train.loc[(train.Survived.values == 1 )]\n\nsample4.head()","0f61dfb6":"sample5 = train.loc[((train.Survived.values == 1 ) & (train.Pclass.values == 3 ) & (train.Sex.values == 'male' ))]\n\nsample5.head()","d84eb209":"data = pd.concat((train, test),sort=True)\n\ndata.head()","29950be0":"for i in data:\n    data['Initial']=data.Name.str.extract('([A-Za-z]+)\\.')\n\ndata.head()","03978402":"for i in data:\n    data['Initial1']=data.Name.str.extract('([A-Za-z])\\.')\n\ndata.head()","ffaafcbf":"for i in data:\n    data['LastName']=data.Name.str.extract('^([A-Za-z]+)')\n\ndata.head()","647f09d4":"for i in data:\n    data['Alphabet1']=data.Name.str.extract('^([A-Za-z])')\n\ndata.head()","3ea7b83a":"data['Initick'] = data.Ticket.str.split()\n\ndata.head()","97e99733":"data['Aiphabets'] = data['Name'].apply(lambda x: [item for elem in [y.split() for y in x] for item in elem])\n\ndata.head()","bda8f0f0":"data['FirstLastName'] = data['Name'].str.split(', ').str[::-1].str.join(' ')\n\ndata.head()","5686085f":"data['Initick'] = 0\nfor s in data:\n    data['Initick']=temp.Ticket.str.extract('^([A-Za-z]+)') # And this will make \"number only\" tickets become null values.\n\ndata = data.reset_index(drop=True) # We neeed this line otherwise we will get \"cannot reindex from a duplicate axis\"error  \n    \nfor s in data:\n    data.loc[(data.Initick.isnull()),'Initick']= data['Ticket']\n\ndata.head()","3676ddbf":"train['Age_Range']=pd.qcut(train['Age'],8)\n\ntrain.head()","72798ec9":"train['Age_Range'].value_counts()","8879f3dc":"train['Age_Cut']=pd.cut(train['Age'],8)\n\ntrain.head()","ebeb4cd9":"train['Age_Cut'].value_counts()","e5a91d94":"train.Parch.value_counts()","3738db62":"top3=train.Parch.value_counts().nlargest(3).index\nprint (top3)","3acaf081":"data['NewParch'] = 3 # let something more than 3 be 3 (others)\n\ndata.loc[(data.Parch.values == 0),'NewParch']= 0\ndata.loc[(data.Parch.values == 1),'NewParch']= 1\ndata.loc[(data.Parch.values == 2),'NewParch']= 2\n\ndata[11:30]","13f8735f":"frequencies = data[\"SibSp\"].value_counts(normalize = True)\nfrequencies","69fc9573":"threshold = 0.015\nsmall_categories = frequencies[frequencies < threshold].index\nsmall_categories","ec910af6":"data['NewSibSp'] = 5 # let something more than 5 be 5 (others)\n\ndata.loc[(data.SibSp.values == 0),'NewSibSp']= 0\ndata.loc[(data.SibSp.values == 1),'NewSibSp']= 1\ndata.loc[(data.SibSp.values == 2),'NewSibSp']= 2\ndata.loc[(data.SibSp.values == 3),'NewSibSp']= 3\ndata.loc[(data.SibSp.values == 4),'NewSibSp']= 4\n\ndata[11:30]","80f7d3be":"train.groupby(['Pclass','Parch'])['Pclass'].count()","0189b407":"train.groupby(['Pclass','Age'])['Survived'].mean()","21401e93":"train.groupby(['Pclass','Survived'])['Pclass'].count().to_frame().style.background_gradient(cmap='summer_r')","8a8e1ba5":"train.groupby(['Pclass'])['Age'].mean().to_frame().style.background_gradient(cmap='summer_r')","94fe941c":"pd.crosstab(train.Survived,train.Pclass,margins=True).style.background_gradient(cmap='summer_r')","4eb11193":"data.Age.value_counts()","d58ab675":"top5 = train.Age.value_counts().nlargest(5).index\ntop5","5d81748a":"data['Agroup'] = 1\n\ndata.loc[(data.Age.values < 24.0),'Agroup']= 0\ndata.loc[(data.Age.values > 30.0),'Agroup']= 2\n\ndata.head()","fb52e3cd":"data['Age_Cuts'] = pd.cut(data.Age, bins=[0, 1, 3, 10, 18, 65, 99], labels=['Baby', 'Todler', 'Kid', 'Teens',  'adult', 'elderly'])\n\ndata.head()","a02d3667":"data.insert(3, 'New1', 0)\n\ndata.head()","ebd83a71":"data.loc[(data['Initial']=='Dona')]","d6517a02":"data.loc[(data['Initial']=='Dona'),'Initial']= 'Mrs'","263e97e9":"data.groupby('Initial')['Age'].mean()","17f07c7d":"data['Age'] = data.groupby('Initial')['Age'].apply(lambda x: x.fillna(x.mean()))\n\ndata[31:50]","9caf371e":"data.Sex.values","e4795824":"data['Gender12'] = data.Sex.map({'male': 1, 'female':2})\n\ndata.head()","11e4f90a":"data['Gender']= data['Sex']\n\nfor n in range(1,4):\n  data.loc[(data['Sex'] == 'male') & (data['Pclass'] == n),'Gender']= 'm'+str(n)\n  data.loc[(data['Sex'] == 'female') & (data['Pclass'] == n),'Gender']= 'w'+str(n)\n\ndata.loc[(data['Gender'] == 'm3'),'Gender']= 'm2'\ndata.loc[(data['Gender'] == 'w3'),'Gender']= 'w2'\ndata.loc[(data['Age'] <= 1.0),'Gender']= 'baby'\ndata.loc[(data['Age'] > 75.0),'Gender']= 'old'\n\ndata.head()","8b156ba6":"data['NumName']= 0\n\nfor i in temp:\n    data['NumName'] = data['LastName'].factorize()[0]\n    \ndata.head()","90302a7d":"temp = pd.DataFrame()\n\ndef change(a):\n    temp[a] = data[a]\n\nchange('Age')\nchange('Gender12')\nchange('Initial')\nchange('Pclass')\n\ntemp.head()","386c67b9":"temp.columns = ['Age', 'Sex', 'Name', 'Pclass']\n\ntemp.head()","61fc120f":"temp.columns = temp.columns.str.lower()\n\ntemp.head()","274b8bee":"temp['longname']=data['Name']\n\ntemp.head()","9613b291":"temp['longname']= temp.longname.str.replace(' ', '_')\n\ntemp.head()","7691b1f0":"data.Ticket.dtype\n\ndata.astype({'Age':'int'})","91321491":"data.Gender.value_counts()","128dd8d3":"data['Gender'].replace(['m2','w2', 'm1', 'w1', 'baby', 'old'],[1, 2, 3, 4, 5, 6 ],inplace=True)\n\ndata.Gender.value_counts()","e0a39f6e":"data.columns","29909963":"data.drop('Gender12' , axis=1)\n\ndata.head() # It will display the dropped columns but they have been dropped \/ \uc2e4\uc81c\ub85c drop\ub418\uc5b4\ub3c4 \ubcf4\uc784","aa5f9db8":"a = data.groupby('Age_Cuts')\n\na.get_group('adult')","68539878":"import pandas as pd\nimport numpy as np\n\n# For Visualization \/ \uc2dc\uac01\ud654\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nplt.style.use('seaborn-whitegrid')\nimport missingno\n\nimport missingno\nmissingno.matrix(data, figsize = (15,8))","0aff5fef":"corr = data.corr()\n# \ub9c8\uc2a4\ud06c \uc14b\uc5c5\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n# \uadf8\ub798\ud504 \uc14b\uc5c5\nplt.figure(figsize=(14, 8))\n# \uadf8\ub798\ud504 \ud0c0\uc774\ud2c0\nplt.title('Overall Correlation of Titanic Features', fontsize=18)\n#  Co-relation \ub9e4\ud2b8\ub9ad\uc2a4 \ub7f0\uce6d\nsns.heatmap(corr, mask=mask, annot=False,cmap='RdYlGn', linewidths=0.2, annot_kws={'size':20})\nplt.show()","bba5b0d7":"f,ax=plt.subplots(1,2,figsize=(15,6))\ntrain['Survived'].value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%',ax=ax[0],shadow=True)\nax[0].set_title('Survived')\nax[0].set_ylabel('')\nsns.countplot('Survived',data=train,ax=ax[1])\nax[1].set_title('Survived')\nplt.show()","5086d729":"def bag(a,b,c,d):\n  f,ax=plt.subplots(1,2,figsize=(20,8))\n  train[[a,b]].groupby([a]).mean().plot.bar(ax=ax[0])\n  ax[0].set_title(c)\n  sns.countplot(a,hue=b,data=train,ax=ax[1])\n  ax[1].set_title(d)\n  plt.show()\n\nbag('Sex','Survived','Survived per Sex','Sex Survived vs Not Survived')  ","02c5f9a3":"def survpct(a):\n  return data.groupby(a).Survived.mean()\n\nsurvpct('Initial')","fe76d99d":"print('Oldest Passenger was ',data['Age'].max(),'Years')\nprint('Youngest Passenger was ',data['Age'].min(),'Years')\nprint('Average Age on the ship was ',int(data['Age'].mean()),'Years')","e2504fd7":"f,ax=plt.subplots(1,2,figsize=(18,8))\nsns.violinplot(\"Pclass\",\"Age\", hue=\"Survived\", data=train,split=True,ax=ax[0])\nax[0].set_title('Pclass and Age vs Survived')\nax[0].set_yticks(range(0,110,10))\nsns.violinplot(\"Sex\",\"Age\", hue=\"Survived\", data=train,split=True,ax=ax[1])\nax[1].set_title('Sex and Age vs Survived')\nax[1].set_yticks(range(0,110,10))\nplt.show()","5a849426":"data.columns","06a1419c":"data['Age_Range']=pd.qcut(data['Age'],10)\ndef groupmean(a,b):\n  return data.groupby([a])[b].mean().to_frame().style.background_gradient(cmap='summer_r')\n\ngroupmean('Age_Range', 'Age')","86258a65":"f,ax=plt.subplots(1,3,figsize=(20,8))\nsns.distplot(train[train['Pclass']==1].Fare,ax=ax[0])\nax[0].set_title('Fares in Pclass 1')\nsns.distplot(train[train['Pclass']==2].Fare,ax=ax[1])\nax[1].set_title('Fares in Pclass 2')\nsns.distplot(train[train['Pclass']==3].Fare,ax=ax[2])\nax[2].set_title('Fares in Pclass 3')\nplt.show()","98c2c35f":"sns.factorplot('Embarked','Survived',data=data)\nfig=plt.gcf()\nfig.set_size_inches(5,3)\nplt.show()","0388a628":"f,ax=plt.subplots(2,2,figsize=(20,15))\nsns.countplot('Embarked',data=data,ax=ax[0,0])\nax[0,0].set_title('No. Of Passengers Boarded')\nsns.countplot('Embarked',hue='Sex',data=data,ax=ax[0,1])\nax[0,1].set_title('Male-Female Split for Embarked')\nsns.countplot('Embarked',hue='Survived',data=data,ax=ax[1,0])\nax[1,0].set_title('Embarked vs Survived')\nsns.countplot('Embarked',hue='Pclass',data=data,ax=ax[1,1])\nax[1,1].set_title('Embarked vs Pclass')\nplt.subplots_adjust(wspace=0.2,hspace=0.5)\nplt.show()","8f90ebfb":"data.reset_index().rename(columns={\"Initial\": \"Salutation\"})\n","74886f4e":"X_test = test\nX_train = train","87b6a1a8":"ntrain = train.shape[0]\nntest = test.shape[0]","931d7dd8":"temp.head()","fc1d0c44":"df = pd.DataFrame()\ndf['Age'] = temp['age']\ndf['Sex'] =  temp['sex']\ndf['Pclass'] = temp['pclass']","37b150aa":"from sklearn.preprocessing import LabelEncoder\n\ndf_enc = df.apply(LabelEncoder().fit_transform)\n                          \ndf_enc.head()","3ce419eb":"from sklearn.preprocessing import OneHotEncoder\n\none_hot_cols = df.columns.tolist()\ndf_enc = pd.get_dummies(df, columns=one_hot_cols)\n\ndf_enc.head()","b0d86942":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nX_train = scaler.fit_transform(df_enc)\nX_test = scaler.transform(df_enc)","91fb078c":"# This one make an error but when you are all done using the following format to make a final submission form\n\n# predictions = grid_soft.predict(X_test)","7c1e8e1f":"<a id = \"tips63\"><\/a>\n## No. 63 -  Narrowing down (filtering small categories using threshold)\n[Go to the Table of Contents](#table_of_contents)","c3fda73a":"<a id = \"tips67\"><\/a>\n## No. 67 -  Groupby - mean - cmap\n[Go to the Table of Contents](#table_of_contents)","790e093d":"-------","74ee0080":"<a id = \"tips96\"><\/a>\n## No. 96 -  Separate key colums only for machine learning\n[Go to the Table of Contents](#table_of_contents)","8e205898":"<a id = \"tips44\"><\/a>\n## No. 44 -  Creating a new column by copying an existing column\n[Go to the Table of Contents](#table_of_contents)\n","f30b5717":"<a id = \"tips31\"><\/a>\n## No. 31 - Sort by a certain column's order(Ascending)\n[Go to the Table of Contents](#table_of_contents)\n","50625373":"<a id = \"tips79\"><\/a>\n## No. 79 -  Replace spaces with underbar\n[Go to the Table of Contents](#table_of_contents)","f03f9367":"<a id = \"tips68\"><\/a>\n## No. 68 -  Groupby - Crosstab\n[Go to the Table of Contents](#table_of_contents)","d5aaaa69":"<a id = \"tips8\"><\/a>\n## No. 8 describe() - to see the data details such as , counts, means and so on.\n[Go to the Table of Contents](#table_of_contents)","5097e592":"<a id = \"tips82\"><\/a>\n## No. 82 -  Drop columns by label names\n[Go to the Table of Contents](#table_of_contents)","28269378":"<a id = \"tips80\"><\/a>\n## No. 80 -  Change floats to integer to save resources\n[Go to the Table of Contents](#table_of_contents)","867ebc25":"<a id = \"tips88\"><\/a>\n## No. 88 -  Making a function for displaying groupby mean result\n[Go to the Table of Contents](#table_of_contents)","36458c1b":"* '([A-Za-z]+)\\.' --> a word from A to Z and from a-z ending with a stop.\n* A-Za-z --> from A to Z and from a-z  \n* + --> \ubd99\uc5b4 \uc788\ub294 \ub2e8\uc5b4, a word, so without + it will display a single alphabet only\n* \\. --> something ending with a stop(.) \/ \ub9c8\uce68\ud45c\ub85c \ub05d\ub098\ub294 \uac83","430d35cb":"__________\n","df2ed83e":"# part 5 Extracting","75202d9a":"<a id = \"tips86\"><\/a>\n## No. 86 -  Dispalying pie chart and countplot together using matplotlib \n[Go to the Table of Contents](#table_of_contents)","e794957d":"<a id = \"tips70\"><\/a>\n## No. 70 -  Grouping with bins\n[Go to the Table of Contents](#table_of_contents)","5209449a":"<a id = \"tips14\"><\/a>\n## No. 14 - To see a certain column head\n[Go to the Table of Contents](#table_of_contents)","b153d41b":"<a id = \"tips39\"><\/a>\n## No. 39 - Sorting with conditions and if there are any that matches\n[Go to the Table of Contents](#table_of_contents)\n","f7ab96c4":"<a id = \"tips66\"><\/a>\n## No. 66 -  Groupby - count - cmap\n[Go to the Table of Contents](#table_of_contents)","7ee1707d":"<a id = \"tips69\"><\/a>\n## No. 69 -  where\n[Go to the Table of Contents](#table_of_contents)","0f74b197":"<a id = \"tips55\"><\/a>\n## No. 55 -  Extracting the first alphabet of the first word \n[Go to the Table of Contents](#table_of_contents)","bf5bcbf5":"<a id = \"table_of_contents\"><\/a>\n## Table of contents\n\n### Part 1 - Exploring Data\n\n[Tips 1: To read a CSV and turn them into a dataframe.CSV\ud30c\uc77c\uc77d\uace0 \ub370\uc774\ud130\ud504\ub808\uc784\uc73c\ub85c \ubc14\uafb8\uae30](#tips1)\t\t\t\n[Tips 2: To read the first 5 lines \uccab 5\ud589 \uc77d\uae30](#tips2)\t\t\t\n[Tips 3: To read the first 10 lines \uccab 10\ud589 \uc77d\uae30](#tips3)\t\t\t\n[Tips 4: To read all \uc804\uccb4 \ud589 \ub2e4 \ubcf4\uae30](#tips4)\t\t\t\n[Tips 5: To read bottom 5 lines \uc81c\uc77c \uc544\ub798 5\ud589 \uc77d\uae30](#tips5)\t\n\n[Tips 6: To read bottom 10 lines \uc81c\uc77c \uc544\ub798 10\ud589 \uc77d\uae30](#tips6)\t\t\t\n[Tips 7: To read lines 101 to 110 101\ud589\ubd80\ud130 110\ud589 \uc77d\uae30](#tips7)\t\t\t\n[Tips 8: describe() - To see the data details such as , counts, means and so on \ub514\uc2a4\ud06c\ub77c\uc774\ube0c\ub97c \ud1b5\ud574 \ub370\uc774\ud130\ud504\ub808\uc784\uc758 \uc815\ubcf4 \uc77d\uae30](#tips8)\t\t\t\n[Tips 9: info() -  To see the types of data for each column \uc778\ud3ec\ub97c \ud1b5\ud574 \ub370\uc774\ud130 \ud504\ub808\uc784\uc758 \uc815\ubcf4 \uc77d\uae30](#tips9)\t\t\t\n[Tips 10:  shape -  to check the shape of the data \ub370\uc774\ud130\uac00 \uac00\ub85c \uc5bc\ub9c8 \uc138\ub85c \uc5bc\ub9c8\uc778\uc9c0 \uae38\uc774 \ubaa8\uc591 \ubcf4\uae30](#tips10)\t\t\t\n\n[Tips 11: dtypes - to check the types of data \uac01 \uc5f4\uc758 \ub370\uc774\ud130\ud0c0\uc785 \ubcf4\uae30](#tips11)\t\n[Tips 12: len -  to check the length of the dataframe \ub370\uc774\ud130 \ud504\ub808\uc784\uc758 \ud589 \uac2f\uc218 \uccb4\ud06c](#tips12)\n[Tips 13: To check the column heads \uac01 \uc5f4\uc758 \uc81c\ubaa9 \ubcf4\uae30](#tips13)\t\n\n### Part 2 - Indexing\n\n[Tips 14: To see a certain column head \ud2b9\uc815 \uceec\ub7fc \uc81c\ubaa9 \ubcf4\uae30 ](#tips14)\t\t\t\n[Tips 15: To see multiple column heads \uc5ec\ub7ec\uac1c \uceec\ub7fc \uc81c\ubaa9 \ubcf4\uae30](#tips15)\t\n\n[Tips 16: To see the values of a certain column \ud2b9\uc815 \uceec\ub7fc\uc758 \uac12\ub4e4 \ubcf4\uae30](#tips16)\t\t\t\n[Tips 17: isnull().any()\/ isna().any() - To check if there are any null values (empty or NaN (Not a Number))\ube48\uce78\uc774 \uc788\ub294 \uacbd\uc6b0 \uccb4\ud06c\ud558\uae30](#tips17)\t\t\t\n[Tips 18:  isnull().sum()\/isna().sum() To check the sum counts of null values \ube48\uce78\uc758 \ud569\uc744 \uad6c\ud558\uae30](#tips18)\t\t\t\n[Tips 19: Locating - loc - To read a certain row \ud2b9\uc815 \ud589 \uc77d\uae30](#tips19)\t\t\t\n[Tips 20: To read a cerain column \ud2b9\uc815 \uceec\ub7fc \uc77d\uae30](#tips20)\t\n\n[Tips 21: Locating - loc - To read items with a certain condition \ud2b9\uc815 \uc870\uac74\uc5d0 \ubd80\ud569\ud558\ub294 \ud56d\ubaa9 \ubcf4\uae30](#tips21)\t\t\t\n[Tips 22: Locating - loc - To read the item in a certain row and certain column \ud2b9\uc815 \ud589, \ud2b9\uc815 \uc5f4\uc758 \ud56d\ubaa9 \ubcf4\uae30](#tips22)\t\t\t\n[Tips 23: iloc -  To read certain rows \ud2b9\uc815 \ud589\ub4e4 \ubcf4\uae30](#tips23)\t\t\t\n[Tips 24: iloc - To read a single row \ub4dd\uc815 \ud589 \ubcf4\uae30](#tips24)\t\t\t\n[Tips 25: If there are too many columns, you can reduce the number of columns it displays \uceec\ub7fc\uc774 \ub108\ubb34 \ub9ce\uc544\uc11c \uae38\uba74 \uc77c\ubd80\ub9cc \ubcf4\uae30](#tips25)\t\n\n### Part 3 - Sorting\n\n[Tips 26: Sorting columns w\/ descending order \ub0b4\ub9bc\ucc28\uc21c\uc73c\ub85c \ud2b9\uc815 \uc5f4 \uc18c\ud305](#tips26)  \n[Tips 27: Sorting columns w\/ ascending order \uc624\ub984\ucc28\uc21c\uc73c\ub85c \ud2b9\uc815 \uc5f4 \uc18c\ud305](#tips27)  \n[Tips 28: Sorting columns - looking at certain rows \ud2b9\uc815 \ud589\ub4e4 \uc18c\ud305\ud558\uae30](#tips28)  \t\n[Tips 29: Sorting columns - multi columns in ascending order \uba40\ud2f0 \uceec\ub7fc \uc624\ub984\ucc28\uc21c \uc18c\ud305\ud558\uae30](#tips29)  \n[Tips 30: Sorting a certain column with a certain condition \ub4dd\uc815 \uc607\uc5d0\uc11c \ud2b9\uc815 \uc870\uac74\uc73c\ub85c \uc18c\ud305\ud558\uae30](#tips30)  \n\n[Tips 31: Sort by a certain column's order(Ascending) \ud2b9\uc815 \uceec\ub7fc\uc758 \uc624\ub984\ucc28\uc21c\uc73c\ub85c \uc815\ub82c](#tips31)  \n[Tips 32: Sort Columns by alphabetical order \uc5f4\uc744 \uc54c\ud30c\ubcb3 \uc21c\uc11c\ub85c \uc815\ub82c\ud558\uae30](#tips32)  \n[Tips 33:  Multi Column filtering, \uba40\ud2f0 \uceec\ub7fc \ud544\ud130\ub9c1\uc73c\ub85c \uc18c\ud305\ud558\uae30](#tips33)  \n[Tips 34: isin - filtering by conditions  \/ isin\uc744 \ud65c\uc6a9\ud55c \ud544\ud130\ub9c1](#tips34)   \n[Tips 35: isin - filtering by multi conditions in a column  \/ isin\uc744 \ud65c\uc6a9\ud55c \uba40\ud2f0 \uc870\uac74 \ud544\ud130\ub9c1)](#tips35)  \n\n[Tips 36 isin - filtering by conditions multi conditions in multi columns \/ isin\uc744 \ud65c\uc6a9\ud55c \uba40\ud2f0 \uceec\ub7fc \uc870\uac74 \ud544\ud130\ub9c1](#tips36)\t\t\t\n[Tips 37: Sorting and Counting sorted values \uc18c\ud305\ud558\uace0 \uc18c\ud305\ub41c \ud569 \uc138\uae30](#tips37)\t\t\t\n[Tips 38: Sorting with conditions and counting the sorted values \uc870\uac74\uc73c\ub85c \uc18c\ud305\ud558\uace0 \uadf8 \uc870\uac74\uc5d0 \ub9de\ub294 \uac83\uc758 \uac2f\uc218 \uc138\uae30](#tips38)\t\t\t\n[Tips 39: Sorting with conditions and if there are any that matches \uc870\uac74\uc73c\ub85c \uc18c\ud305\ud558\uace0 \uadf8 \uc870\uac74\uc5d0 \ub9de\ub294 \uac83\uc774 \uc788\ub294\uc9c0 \uccb4\ud06c - True\/False)](#tips39)  \t\t\t\n[Tips 40: Sorting with conditions and get the percentage \uc18c\ud305\ud558\uace0 \uadf8 \uac83\uc774 \ucc28\uc9c0\ud558\ub294 \ubc31\ubd84\uc728 \uad6c\ud558\uae30](#tips40)  \n\n### Part 4 - Creating\n\n[Tips 41: Making a new empty DataFrame \uc0c8\ub85c\uc6b4 \ube48 \ub370\uc774\ud130 \ud504\ub808\uc784 \ub9cc\ub4e4\uae30)](#tips41)\t\t\t\n[Tips 42: Copying and creating a new DataFrame \ubcf5\uc0ac\ud574\uc11c \uc0c8\ub85c\uc6b4 \ub370\uc774\ud130 \ud504\ub808\uc784 \ub9cc\ub4e4\uae30](#tips42)\t\t\t\n[Tips 43: Creating a new column \uc0c8\ub85c\uc6b4 \uc5f4 \ub9cc\ub4e4\uae30](#tips43)\t\t\t\n[Tips 44: Creating a new column by copying an existing column \uae30\uc874 \uc5f4\uc744 \uce74\ud53c\ud574\uc11c \uc0c8\uc5f4\uc744 \ub9cc\ub4e4\uae30](#tips44)  \n[Tips 45: Creating a new Dataframe with a certain column) \uc0c8 \ub370\uc774\ud130\ud504\ub808\uc784\uc744 \uae30\uc874 \uc5f4 \ud558\ub098\ub85c \ub9cc\ub4e4\uae30](#tips45)  \t\n\t\t\n[Tips 46: Creating a new Dataframe with certain rows) \uc0c8 \ub370\uc774\ud130\ud504\ub808\uc784\uc744 \uae30\uc874 \ud589 \uc77c\ubd80\ub85c \ub9cc\ub4e4\uae30](#tips46)\t  \t\t\n[Tips 47: Creating a new Dataframe with certain columns) \uc0c8 \ub370\uc774\ud130 \ud504\ub808\uc784\uc744 \uae30\uc874 \uc5f4 \uba87 \uac1c\ub85c \ub9cc\ub4e4\uae30](#tips47)  \t\t\t\n[Tips 48: Creating a new Dataframe with certain columns and certain rows) \uc0c8 \ub370\uc774\ud130 \ud504\ub808\uc784\uc744 \uae30\uc874 \uc5f4 \uba87\uac1c\uacfc \ud589 \uba87\uac1c\ub85c \ub9cc\ub4e4\uae30](#tips48)  \t \t\t\n[Tips 49: Creating a new Dataframe with exisiting rows that matches a certain condition \uc0c8 \ub370\uc774\ud130 \ud504\ub808\uc784\uc744 \uae30\uc874 \ud589\uc5d0\uc11c \ud2b9\uc815 \uc870\uac74\uc5d0 \uc77c\uce58\ud558\ub294 \uac83\ub9cc \uac00\uc9c0\uace0 \ub9cc\ub4e4\uae30]](#tips49)\t  \t\n[Tips 50: Creating a new Dataframe with exisiting rows that matches multiple conditions \uc0c8 \ub370\uc774\ud130 \ud504\ub808\uc784\uc744 \uba40\ud2f0 \uc870\uac74\uc5d0 \ubd80\ud569\ud558\ub294 \uae30\uc874 \ud589\uc73c\ub85c \ub9cc\ub4e4\uae30)](#tips50)\t\n\n[Tips 51: Concat - Merging and creating a new data frame\/ concat\uc73c\ub85c \ub370\uc774\ud130 \ud504\ub808\uc784 \ub450 \uac1c \uc5f0\uacb0\ud574 \ud569\uce58\uae30](#tips51)\n\n\n### Part 5 - Extracting\n\n\t\t\t\n[Tips 52: Extracting a word ending with a stop \ub9c8\uce68\ud45c\ub85c \ub05d\ub098\ub294 \ubd80\ubd84 \ub2e8\uc5b4\ub9cc \ucd94\ucd9c\ud558\uae30](#tips52)\t\t\t\n[Tips 53:  Extracting the first alphabet of a word ending with a stop\/ \ub9c8\uce68\ud45c\ub85c \ub05d\ub098\ub294 \ubd80\ubd84\uc758 \ub2e8\uc5b4\uc758 \uccab \uc54c\ud30c\ubcb3\ub9cc \ucd94\ucd9c\ud558\uae30](#tips53)\t\t\t\n[Tips 54: Extracting the first word\/ \uccab \ubc88\uc9f8 \ub098\uc624\ub294 \ub2e8\uc5b4 (\uc2a4\ud398\uc774\uc2a4 \uc9c1\uc804\uae4c\uc9c0) \ucd94\ucd9c\ud558\uae30](#tips54)\t\t\t\n[Tips 55: Extracting the first alphabet of the first word \/ \uc81c\uc77c \ucc98\uc74c \ub098\uc624\ub294 \uc54c\ud30c\ubcb3 \ud558\ub098\ub9cc \ucd94\ucd9c\ud558\uae30](#tips55)\n\n[Tips 56: Split strings into numbers and words \uc601\uc5b4 \uc54c\ud30c\ubcb3\uacfc \uc22b\uc790\ub85c \uc870\ud569\ub41c \uac83\uc744 \ub530\ub85c \ubd84\ub9ac )](#tips56)\t\t\t\n[Tips 57: Spliting the strings per alphabet \ubb38\uc790\ub4e4\uc744 \uc54c\ud30c\ubcb3 \ub2e8\uc704\ub85c \ubd84\ub9ac\ud558\uae30](#tips57)\t\t\t\n[Tips 58: Split and join to have a new str order \ub2e8\uc5b4\ub4e4\uc744 \ub744\uc6cc\uc4f0\uae30\ub85c \uad6c\ubd84\ud55c \ud6c4 \uc21c\uc11c\ub97c \ubc14\uafb8\uae30 \uc608\ub97c \ub4e4\uc5b4 \uc81c\uc784\uc2a4 \uc874\uc2a4 -> \uc874\uc2a4 \uc81c\uc784\uc2a4](#tips58)\t\t\t\n[Tips 59: Getting str only for ones with str+number and number only for ones with only numbers \uc601\uc5b4 \uc54c\ud30c\ubcb3\uacfc \uc22b\uc790\ub85c \uc870\ud569\ub41c \uac83\uc744 \uc54c\ud30c\ubcb3 \uc788\ub294 \uac83\uc740 \uc54c\ud30c\ubcb3\ub9cc \uc22b\uc790\ub85c\ub9cc \ub41c \uac83\uc740 \uadf8\ub300\ub85c \ucd94\ucd9c\ud558\uae30 ](#tips59)\t\t\t\n\n\n### Part 6 - Grouping\n\n[Tips 60: qcut - to change continous values to ordinal groups based on quantiles (Try to be the same number per range) qcut\uc744 \ud65c\uc6a9\ud558\uc5ec \uace0\ub8e8\uace0\ub8e8 \uc22b\uc790\uac00 \ubd84\uc0b0\ub41c \uadf8\ub8f9\uc73c\ub85c \ub098\ub204\uae30 ](#tips60)\n\n[Tips 61: cut - to change continous values to ordinal groups based on physical numbers. \uc22b\uc790\ub97c \ubb3c\ub9ac\uc801 \ubc94\uc704\ub85c \uadf8\ub0e5 \ubd84\uc0b0\ud558\uae30](#tips61)\t\t\t\n[Tips 62: filtering small categories using nlargest()\/ nlargest\ub97c \ud65c\uc6a9\ud574 \uc2a4\ubab0 \uce74\ud14c\uace0\ub9ac\ub97c \ud544\ud130](#tips62)\t\t\t\n[Tips 63: Narrowing down (filtering small categories using threshold) \ucd5c\uc18c \ub2e8\uc704\ub97c \uc0ac\uc6a9\ud558\uc5ec \uadf8 \uc774\ud558\uc758 \uc791\uc740 \uce74\ud14c\uace0\ub9ac\ub4e4 \ubb36\uae30](#tips63)\t\t\t\n[Tips 64: Groupby - count \uc870\uac74\ubcc4\ub85c \ubb36\uc5b4\uc11c \uadf8 \uc218\ub97c \uc138\uc5b4\ubd04](#tips64)\t\t\t\n[Tips 65: Groupby - Mean) \uc870\uac74\ubcc4\ub85c \ubb36\uc5b4\uc11c \uadf8 \ud655\ub960 \uac12\uc744 \uacc4\uc0b0\ud568](#tips65)\t\t\n\n[Tips 66: Groupby - count - cmap 64\ubc88\uc744 \uc2dc\uac01\ud654](#tips66)\t  \t\t\n[Tips 67: Groupby - mean - cmap 65\ubc88\uc744 \uc2dc\uac01\ud654](#tips67)\t\t\t\n[Tips 68: Groupby - Crosstab \ud06c\ub85c\uc2a4\ud0ed \ud65c\uc6a9](#tips68)\t\t\t\n[Tips 69: where, where\uba54\uc18c\ub4dc\ub85c \uadf8\ub8f9 \uc9d3\uae30](#tips69)\n[Tips 70: Groupingwith bin\/ bin\uc73c\ub85c \uadf8\ub8f9 \uc9d3\uae30](#tips70)\n\n\n### Part 7 - Appending\/Inserting\n\n[Tips 71: Insert new column at a specific location \uc0c8\ub85c\uc6b4 \uceec\ub7fc\uc744 \ud2b9\uc815 \uc704\uce58\uc5d0 \ub123\uae30](#tips71)\t\t\t\n[Tips 72: Insert a value for NaN \ube48 \uac12\uc5d0 \uac12 \uc9d1\uc5b4 \ub123\uae30)](#tips72)\t\t\t\n[Tips 73: Inserting the average age per Initial for NaN values of Age \uadf8\ub8f9 \ud3c9\uade0 \ub098\uc774\ub97c \ube48 \ub098\uc774 \uac12\uc5d0 \ub123\uae30](#tips73)\t\t\t\t\n\n\n### Part 8 - Replacing\n\n[Tips 74: Replace object column to integer column \ubb38\uc790 \uceec\ub7fc\uc744 \uc815\uc218 \uceec\ub7fc\uc73c\ub85c \ubc14\uafb8\uae30](#tips74)\t\t\t\n[Tips 75:Divide categories more specifically \uce74\ud14c\uace0\ub9ac \ub354 \uc798\uac8c \ub098\ub204\uae30](#tips75)\t\t\t\n\n[Tips 76: factorize \ubb38\uc790\ub97c \ud558\ub098\uc529 \ubc88\ud638 \ubd99\uc774\uace0 \uac19\uc740 \ub2e8\uc5b4\ub294 \uac19\uc740 \ubc88\ud638 \ubd99\uac8c \ud558\uae30.](#tips76)\t\t\t\n[Tips 77: Replacing column heads \uc5f4 \uc81c\ubaa9 \ubc14\uafb8\uae30](#tips77)\t\t\t\n[Tips 78: Lower case the column head \uc5f4\uc81c\ubaa9 \uc18c\ubb38\uc790\ub85c \ubc14\uafb8\uae30](#tips78)\t\t\t\n[Tips 79: Replace spaces with underbar \ube48\uce78 \uc5b8\ub354\ubc14\ub85c \ubc14\uafb8\uae30](#tips79)\t\t\t\n[Tips 80: Change floats to integer to save resources \uc2e4\uc218\ub97c \uc815\uc218\ub85c \ubc14\uafb8\uc5b4 \ub9ac\uc18c\uc2a4 \uc904\uc774\uae30](#tips80)  \n\n[Tips 81: Change string to numbers by replacing values \ubc38\ub958 \uce74\uc6b4\ud2b8\ub85c \ubcf4\uace0 replac\u3137\ub97c \uc0ac\uc6a9\ud558\uc5ec \ubb38\uc790\ub97c \uc22b\uc790\ub85c \ubc14\uafb8\uae30 ](#tips81)  \n\n### Part 9 Others\n\n[Tips 82: Drop columns by label names \uc5f4 \uc774\ub984 \ubcc4\ub85c \uc5f4 \uc5c6\uc560\uae30](#tips82)  \n[Tips 83: get group \uac9f \uadf8\ub8f9\uc744 \uc0ac\uc6a9\ud558\uc5ec \ud2b9\uc815 \uce74\ud14c\uace0\ub9ac \ubcf4\uae30](#tips83)  \n[Tips 84: Using missingno from matplotlib to see missing values \ub9f7\ud50c\ub86f\ub9bd\uc758 \ubbf8\uc2f1\ub178\ub97c \uc0ac\uc6a9\ud558\uc5ec \ube48\uac12 \ud55c \ub208\uc5d0 \ubcf4\uae30](#tips84)  \n[Tips 85: Co-relation matrix \ucf54\ub9b4\ub808\uc774\uc158 \ub9e4\ud2b8\ub9ad\uc2a4\ub97c \ub9cc\ub4e4\uc5b4 \uad00\uacc4 \ud55c \ub208\uc5d0 \ubcf4\uae30](#tips85)  \n\n[Tips 86: Dispalying pie chart and countplot together using matplotlib \ub9f7\ud50c\ub86f\ub9ac\ube0c\ub97c \uc0ac\uc6a9\ud558\uc5ec \ud30c\uc774\ucc28\ud2b8\uc640 \ub9c9\ub300\uadf8\ub798\ud504 \uac19\uc774 \ubcf4\uae30](#tips86)  \n[Tips 87: Making a function for drawing graphs \ud568\uc218\ub85c \ub9cc\ub4e4\uc5b4 \uadf8\ub798\ud504 \ub9cc\ub4dc\ub294 \uac83 \uc5ec\ub7ec\ubc88 \uc368\uba39\uae30](#tips87)  \n[Tips 88: Making a function for displaying groupby mean result \ud568\uc218\ub85c \ub9cc\ub4e4\uc5b4 \uadf8\ub8f9\ubc14\uc774 \ud3c9\uade0\uac12 \uc5ec\ub7ec\uad70\ub370\uc11c \uc368\uba39\uae30](#tips88)  \n[Tips 89: Using python and math to display max, min, mean \ud30c\uc774\uc36c  math\ubaa8\ub4c8\ub85c \ud070\uac12, \uc791\uc740 \uac12 \ud3c9\uade0\uac12 \ubcf4\uae30](#tips89)  \n[Tips 90: Using seaborn to display violin plot \uc528\ubcf8\uc744 \uc0ac\uc6a9\ud558\uc5ec \ubc14\uc774\uc62c\ub9b0 \ud50c\ub86f \ubcf4\uae30](#tips90)  \n\n[Tips 91: Making a function to see group mean \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uc5ec \uadf8\ub8f9 \ud3c9\uade0\uac12 \uac8c\uc18d \uc368\uba39\uae30](#tips91)  \n[Tips 92: Using seaborn to display displot \uc528\ubcf8\uc744 \uc0ac\uc6a9\ud558\uc5ec \ub514\uc2a4\ud50c\ub86f \ub9cc\ub4e4\uc5b4 \ubcf4\uae30](#tips92)  \n[Tips 93: Using seaborn to make a factoplot\uc528\ubcf8\uc744 \uc0ac\uc6a9\ud558\uc5ec \ud329\ud1a0 \ud50c\ub86f \ub9cc\ub4e4\uc5b4 \ubcf4\uae30](#tips93)  \n[Tips 94: Using seaborn to make 2 D subplots \uc528\ubcf8\uc744 \uc0ac\uc6a9\ud558\uc5ec 2X2 \uc11c\ube0c\ud50c\ub86f \ub9cc\ub4e4\uae30](#tips94)  \n[Tips 95: Renaming Columns \uceec\ub7fc\uc774\ub984 \ubc14\uafb8\uae30](#tips95)  \n\n[Tips 96: Separate key colums only for machine learning \uba38\uc2e0\ub7ec\ub2dd\uc744 \uc704\ud574 \uc8fc\uc694 \uc5f4\ub9cc \ubd84\ub9ac\ud558\uae30](#tips96)  \n[Tips 97: Separating the length of the data to use it later \ucd94\ud6c4 \uc0ac\uc6a9\uc744 \uc704\ud574 \ub370\uc774\ud130\uc758 \uae38\uc774\ub9cc \ub530\ub85c \uc800\uc7a5\ud558\uae30](#tips97)  \n[Tips 98: Using sklearn lable encoder for pre-processing \ud504\ub9ac\ud504\ub85c\uc138\uc2f1\uc744 \uc704\ud55c \ub808\uc774\ube14 \uc778\ucf54\ub529 \ud55c\ubc88 \ud574\ubcf4\uae30](#tips98)  \n[Tips 99: Using sklearn OneHot encoder for pre-processing \ud504\ub9ac \ud504\ub85c\uc138\uc2f1\uc744 \uc704\ud574 \uc6d0\ud56b \uc778\ucf54\ub529 \ud55c \ubc88 \ud574\ubcf4\uae30](#tips99)  \n[Tips 100: Using sklearn to try using standrad scaler \uc2f8\uc774\ud0b7\ub7f0 \ud504\ub9ac\ud504\ub85c\uc138\uc2f1 \uc2a4\ud0e0\ub4dc\ub2e4\ub4dc \uc2a4\ucf00\uc77c\ub7ec \ud55c\ubc88 \ud574\ubcf4\uae30](#tips100)  \n\n[Tips 101: Submitting \ub098\uc911\uc5d0 \uc81c\ucd9c\ud560 \ub54c (\uc18c\ud504\ud2b8 \ubcf4\ud305\uc744 \uace8\ub77c \ud55c\ub2e4\ub294 \uac00\uc815\ud558\uc5d0) \uc81c\ucd9c \uc591\uc2dd\uc740 \uc774\ub807\uac8c \ub9cc\ub4ec\/ \uc9c0\uae08\uc740 \uc911\uac04 \uacfc\uc815 \uc0dd\ub7b5\uc774\ub77c \uc5d0\ub7ec\uac00 \ub0a8](#tips101)  \n\n\n","be3c1075":"<a id = \"tips15\"><\/a>\n## No. 15 - To see multiple column heads\n[Go to the Table of Contents](#table_of_contents)","63aca939":"<a id = \"tips95\"><\/a>\n## No. 95 -  Renaming Columns \n[Go to the Table of Contents](#table_of_contents)","9e2db78a":"<a id = \"tips47\"><\/a>\n## No. 47 - Creating a new Dataframe with certain columns\n\n[Go to the Table of Contents](#table_of_contents)\n","ef41b279":"<a id = \"tips23\"><\/a>\n## No. 23 - iloc -  To read certain rows\n[Go to the Table of Contents](#table_of_contents)","d8dd7d0b":"<a id = \"tips73\"><\/a>\n## No. 73 -  Inserting the average age per Initial for NaN values of Age \n[Go to the Table of Contents](#table_of_contents)","5934bb68":"<a id = \"tips76\"><\/a>\n## No. 76 -  factorize\n[Go to the Table of Contents](#table_of_contents)","d170f2c1":"<a id = \"tips100\"><\/a>\n## No. 100 -  Using sklearn to try using standrad scaler\n[Go to the Table of Contents](#table_of_contents)","a7c59696":"<a id = \"tips4\"><\/a>\n## No. 4 - To read all\n[Go to the Table of Contents](#table_of_contents)","1875a886":"<a id = \"tips42\"><\/a>\n## No. 42 -  Copying and creating a new DataFrame\n[Go to the Table of Contents](#table_of_contents)\n","0b849512":"<a id = \"tips72\"><\/a>\n## No. 72 -  Insert a value for NaN \n[Go to the Table of Contents](#table_of_contents)","00b7c4be":"<a id = \"tips58\"><\/a>\n## No. 58 -  Split and join to have a new str order\n[Go to the Table of Contents](#table_of_contents)","f284ac44":"<a id = \"tips16\"><\/a>\n## No. 16 - To see the values of a certain column\n[Go to the Table of Contents](#table_of_contents)","93ec6ee8":"<a id = \"tips19\"><\/a>\n## No. 19 - Locating - loc - To read a certain row\n[Go to the Table of Contents](#table_of_contents)","49fb03e8":"<a id = \"tips94\"><\/a>\n## No. 94 -  Using seaborn to make 2 D subplots\n[Go to the Table of Contents](#table_of_contents)","b69e64a6":"<a id = \"tips57\"><\/a>\n## No. 57 -  Spliting the strings per alphabet\n[Go to the Table of Contents](#table_of_contents)","161024e4":"<a id = \"tips41\"><\/a>\n## No. 41 -  Making a new empty DataFrame\n[Go to the Table of Contents](#table_of_contents)\n","95b2f605":"-------------","54962f0b":"<a id = \"tips38\"><\/a>\n## No. 38 -  Sorting with conditions and counting the sorted values\n[Go to the Table of Contents](#table_of_contents)","559c53bc":"<a id = \"tips89\"><\/a>\n## No. 89 -  Using python and math to display max, min, mean\n[Go to the Table of Contents](#table_of_contents)","7c5adf1b":"<a id = \"tips1\"><\/a>\n## No. 1 - To read a CSV and turn them into a dataframe.\n[Go to the Table of Contents](#table_of_contents)","9d1dfdd8":"<a id = \"tips61\"><\/a>\n## No. 61 -  cut - to change continous values to ordinal groups based on physical numbers.\n[Go to the Table of Contents](#table_of_contents)","c0de5b9e":"<a id = \"tips92\"><\/a>\n## No. 92 -  Using seaborn to display displot\n[Go to the Table of Contents](#table_of_contents)","a6021370":"# Part 7 - Appending\/Inserting","12036e2f":"<a id = \"tips6\"><\/a>\n## No. 6 - To read bottom 10 lines\n[Go to the Table of Contents](#table_of_contents)","6dfb0e93":"# Part 8 - Replacing","dc84b458":"<a id = \"tips18\"><\/a>\n## No. 18 - isnull().sum()\/isna().sum() To check the sum counts of null values\n[Go to the Table of Contents](#table_of_contents)","70e934d3":"<a id = \"tips90\"><\/a>\n## No. 90 -  Using seaborn to display violin plot\n[Go to the Table of Contents](#table_of_contents)","5545008a":"# Part 6 - Grouping","2e84b500":"<a id = \"tips30\"><\/a>\n## No. 30 -  Sorting a certain column with a certain condition\n[Go to the Table of Contents](#table_of_contents)\n","a14a7866":"<a id = \"tips81\"><\/a>\n## No. 81 -  Change string to numbers by replacing values\n[Go to the Table of Contents](#table_of_contents)","3339062f":"<a id = \"tips45\"><\/a>\n## No. 45 -  Creating a new Dataframe with a certain column\n[Go to the Table of Contents](#table_of_contents)\n","58784fd3":"<a id = \"tips48\"><\/a>\n## No. 48 - Creating a new Dataframe with certain columns and certain rows\n[Go to the Table of Contents](#table_of_contents)\n","3e844763":"* As you see above, 'cut' will cut values according to ages disregarding how many are in the range.\n* \uc704\uc5d0 \ubcf4\uc2dc\ub2e4\uc2dc\ud53c cut\uc740 \uadf8\ub0e5 \ub098\uc774 \uae30\uc900\uc73c\ub85c \uade0\ub4f1 \ubd84\ud560\ud574 \ub098\ub215\ub2c8\ub2e4. \uadf8\ub798\uc11c \uac01 \ub808\uc778\uc9c0\ub2f9 \uc22b\uc790\ub294 \uc0c1\uad00 \uc5c6\uc2b5\ub2c8\ub2e4 ","588b4acd":"When using Google Colab\n\n        from google.colab import files\n        uploaded = files.upload()\n\nAnd then\n\n        import io\n        test = pd.read_csv(io.BytesIO(uploaded['test.csv']))\n        train = pd.read_csv(io.BytesIO(uploaded['train.csv']))","8aa7aefa":"<a id = \"tips49\"><\/a>\n## No. 49 -  Creating a new Dataframe with exisiting rows that matches a certain condition\n[Go to the Table of Contents](#table_of_contents)\n","629453b8":"<a id = \"tips21\"><\/a>\n## No. 21 - Locating - loc - To read items with a certain condition\n[Go to the Table of Contents](#table_of_contents)","008c4b29":"<a id = \"tips56\"><\/a>\n## No. 56 -  Split strings into numbers and words\n[Go to the Table of Contents](#table_of_contents)","0349c279":"____________________\n","5394c67d":"<a id = \"tips20\"><\/a>\n## No 20. - To read a cerain column\n[Go to the Table of Contents](#table_of_contents)","7519ab05":"<a id = \"tips59\"><\/a>\n## No. 59 -  Getting str only for ones with str+number and number only for ones with only numbers\n[Go to the Table of Contents](#table_of_contents)","6816070e":"<a id = \"tips50\"><\/a>\n## No. 50 - Creating a new Dataframe with exisiting rows that matches multiple conditions \n[Go to the Table of Contents](#table_of_contents)\n","2a385c4c":"<a id = \"tips53\"><\/a>\n## No. 53 -  Extracting the first alphabet of a word ending with a stop\n[Go to the Table of Contents](#table_of_contents)","149e8481":"# Part 3 Creating","51cf2277":"<a id = \"tips27\"><\/a>\n## No. 27- Sorting columns w\/ ascending order] \n[Go to the Table of Contents](#table_of_contents)\n","bc7e6349":"<a id = \"tips9\"><\/a>\n## No. 9 info() -  to see the types of data for each column\n[Go to the Table of Contents](#table_of_contents)","677b2b98":"<a id = \"tips11\"><\/a>\n## No. 11 - dtypes to check the types of data\n[Go to the Table of Contents](#table_of_contents)","55021618":"* Please make sure that you know [101:110] will only read lines from 101 to 109.\n* [101:110] \uc73c\ub85c \ud558\uc2dc\uba74 101\uc5d0\uc11c 109\uae4c\uc9c0\ub9cc \uc77d\uc2b5\ub2c8\ub2e4.","cabd0442":"<a id = \"tips60\"><\/a>\n## No. 60 -  qcut - to change continous values to ordinal groups based on quantiles (Try to be the same number per range)\n[Go to the Table of Contents](#table_of_contents)","fdb4889a":"# Part 9 Others","63b247de":"<a id = \"tips77\"><\/a>\n## No. 77 -  Replacing column heads\n[Go to the Table of Contents](#table_of_contents)","d7a9d5bd":"For example , PC17599 --> PC and 113803 --> 113083","8f3fd85e":"<a id = \"tips84\"><\/a>\n## No. 84 -  Using missingno from matplotlib to see missing values\n[Go to the Table of Contents](#table_of_contents)","f92fda52":"<a id = \"tips75\"><\/a>\n## No. 75 -  Divide categories more specifically.\n[Go to the Table of Contents](#table_of_contents)","3a1e78fe":"<a id = \"tips12\"><\/a>\n## No. 12 - len to check the length of the dataframe\n[Go to the Table of Contents](#table_of_contents)","18ca6436":"<a id = \"tips28\"><\/a>\n## No. 28 -  Sorting columns - looking at certain rows\n[Go to the Table of Contents](#table_of_contents)\n","812b8b26":"<a id = \"tips52\"><\/a>\n## No. 52 -  Extracting a word ending with a stop\n[Go to the Table of Contents](#table_of_contents)\n","3582cb78":"<a id = \"tips40\"><\/a>\n## No. 40 -  Sorting with conditions and get the percentage \n[Go to the Table of Contents](#table_of_contents)\n","f62633ea":"<a id = \"tips78\"><\/a>\n## No. 78 -  Lower case the column head\n[Go to the Table of Contents](#table_of_contents)","fcad332c":"<a id = \"tips35\"><\/a>\n## No. 35 -  filtering by multi conditions in a column\n[Go to the Table of Contents](#table_of_contents)\n","e3f1b788":"<a id = \"tips25\"><\/a>\n## No. 25 -  If there are too many columns, you can reduce the number of columns it displays\n[Go to the Table of Contents](#table_of_contents)\n\n* \ubcf4\uc774\ub294 \uc5f4\uc758 \uc22b\uc790\ub97c \uc904\uc5ec\uc11c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. ","9105d488":"<a id = \"tips13\"><\/a>\n## No. 13 - To check the column heads\n[Go to the Table of Contents](#table_of_contents)","2d54996f":"<a id = \"tips3\"><\/a>\n## No. 3 _ To read the first 10 lines\n[Go to the Table of Contents](#table_of_contents)","b7577c1d":"<a id = \"tips24\"><\/a>\n## No. 24 - iloc - To read a single row\n[Go to the Table of Contents](#table_of_contents)","afa6fc60":"<a id = \"tips91\"><\/a>\n## No. 91 -  Making a function to see group mean\n[Go to the Table of Contents](#table_of_contents)","9a0a9748":"<a id = \"tips36\"><\/a>\n## No. 36 - isin -  filtering by conditions multi conditions in multi columns \n[Go to the Table of Contents](#table_of_contents)\n","3dbc8042":"<a id = \"tips26\"><\/a>\n## No. 26 -  Sorting columns w\/ descending order\n[Go to the Table of Contents](#table_of_contents)\n","33086da7":"<a id = \"tips93\"><\/a>\n## No. 93 -  Using seaborn to make a facotplot\n[Go to the Table of Contents](#table_of_contents)","704782da":"<a id = \"tips5\"><\/a>\n## No. 5 - To read bottom 5 lines\n[Go to the Table of Contents](#table_of_contents)","9257d2c7":"# This is an easy Pandas guide for absolute beginners who want to work on the Kaggle Titanic Challenge.\n\n# \uc774 \uac83\uc740 Kaggle Titanic Challenge\ub97c \ucc98\uc74c \ud558\uc2dc\ub294\ub370 Pandas\uc5d0 \ub300\ud574\uc11c \uc798 \ubaa8\ub974\ub294 \ubd84\ub4e4\uc744 \uc704\ud55c \uc26c\uc6b4 \ud310\ub2e4\uc2a4 \uac00\uc774\ub4dc\ubd81\uc785\ub2c8\ub2e4.\n\n# Upvote if you found it useful. \n# \uc720\uc6a9\ud558\uc2dc\uba74 Upvote \ub20c\ub7ec \uc8fc\uc138\uc694\n","1901a6da":"* As you see above, qcut will cut values according to quantiles although the above would not break them evenly due to the characteristics of the feature. \n* \uc704\uc5d0 \ubcf4\uc2dc\ub2e4\uc2dc\ud53c quanttile\ub85c qcut\uc740 \ub098\ub215\ub2c8\ub2e4. \uadf8\ub798\uc11c \uc774 \uc704 \uac19\uc740 \uacbd\uc6b0\ub294 \uc815\ud655\ud788 \uac19\uc740 \ube44\uc728\ub85c \ub098\ub20c \uc218 \uc5c6\uc73c\ub098 \uac00\uc7a5 \uac00\uae5d\uac8c \ub098\ub215\ub2c8\ub2e4. ","dde91083":"<a id = \"tips62\"><\/a>\n## No. 62 -  filtering small categories using nlargest()\n[Go to the Table of Contents](#table_of_contents)","5fcf3463":"<a id = \"tips99\"><\/a>\n## No. 99 -  Using sklearn OneHot encoder for pre-processing \n[Go to the Table of Contents](#table_of_contents)","da98655d":"<a id = \"tips34\"><\/a>\n## No. 34 -  isin - filtering by conditions \n[Go to the Table of Contents](#table_of_contents)\n","3b387b06":"<a id = \"tips64\"><\/a>\n## No. 64 -  Groupby - Count\n[Go to the Table of Contents](#table_of_contents)","25d14213":"<a id = \"tips65\"><\/a>\n## No. 65 -  Groupby - Mean\n[Go to the Table of Contents](#table_of_contents)","3be26ba2":"<a id = \"tips46\"><\/a>\n## No. 46 -  Creating a new Dataframe with certain rows\n[Go to the Table of Contents](#table_of_contents)","bdfdb92b":"<a id = \"tips71\"><\/a>\n## No. 71 -  Insert new column at a specific location\n[Go to the Table of Contents](#table_of_contents)","6a271c03":"<a id = \"tips54\"><\/a>\n## No. 54 -  Extracting the first word \n[Go to the Table of Contents](#table_of_contents)\n","3a67482f":"<a id = \"tips2\"><\/a>\n## No. 2 - To read the first 5 lines\n[Go to the Table of Contents](#table_of_contents)","5d917b00":"<a id = \"tips97\"><\/a>\n## No. 97 -  Separating the length of the data to use it later\n[Go to the Table of Contents](#table_of_contents)","205a12d7":"<a id = \"tips87\"><\/a>\n## No. 87 -  Making a function for drawing graphs\n[Go to the Table of Contents](#table_of_contents)\n\n","f6387986":"<a id = \"tips43\"><\/a>\n## No. 43 -  Creating a new column\n[Go to the Table of Contents](#table_of_contents)\n","d6f40933":"\n\n# Part 3 - Sorting","9871858e":"<a id = \"tips10\"><\/a>\n## No. 10 - shape to check the shape of the data\n[Go to the Table of Contents](#table_of_contents)","d85228e7":"<a id = \"tips85\"><\/a>\n## No. 85 -  Co-relation matrix\n[Go to the Table of Contents](#table_of_contents)","fc65da75":"<a id = \"tips83\"><\/a>\n## No. 83 -  get group\n[Go to the Table of Contents](#table_of_contents)","b44db273":"<a id = \"tips22\"><\/a>\n## No. 22 - Locating - loc - To read the item in a certain row and certain column\n[Go to the Table of Contents](#table_of_contents)","d21ab608":"<a id = \"tips98\"><\/a>\n## No. 98 -  Using sklearn lable encoder for pre-processing \n[Go to the Table of Contents](#table_of_contents)","a5118d9d":"# Part 1 - Exploring Data","0dd0422d":"<a id = \"tips32\"><\/a>\n## No. 32 -  Sort Columns by alphabetical order\n[Go to the Table of Contents](#table_of_contents)\n","5a897f33":"<a id = \"tips101\"><\/a>\n## No. 101 -  Submitting\n[Go to the Table of Contents](#table_of_contents)","fd0921dd":"<a id = \"tips74\"><\/a>\n## No. 74 -  Replace object column to integer column\n[Go to the Table of Contents](#table_of_contents)","f2854fb0":"<a id = \"tips37\"><\/a>\n## No. 37 -  Sorting and Counting sorted values \n[Go to the Table of Contents](#table_of_contents)\n","ba3181ba":"---------","0bccb641":"<a id = \"tips51\"><\/a>\n## No. 51 -  Concat - Merging and creating a new data frame \n[Go to the Table of Contents](#table_of_contents)\n","714b5db2":"<a id = \"tips7\"><\/a>\n## No. 7 - To read lines from 101 to 110\n[Go to the Table of Contents](#table_of_contents)","2d364d12":"<a id = \"tips17\"><\/a>\n## No. 17  isnull().any()\/ isna().any() - To check if there are any null values (empty or NaN (Not a Number))\n[Go to the Table of Contents](#table_of_contents)","c5f88fee":"<a id = \"tips29\"><\/a>\n## No. 29 -  Sorting columns - multi columns in ascending order\n[Go to the Table of Contents](#table_of_contents)\n","3936ba90":"<a id = \"tips33\"><\/a>\n## No. 33 -  Multi Column filtering\n[Go to the Table of Contents](#table_of_contents)\n\n\n","4876e019":"\n\n# Part 2 - Indexing"}}