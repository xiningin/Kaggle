{"cell_type":{"340b576c":"code","de4af9d2":"code","d72f24d9":"code","81d92839":"code","a5827d56":"code","e254e55f":"code","ed1f0207":"code","4b294676":"code","c309cf8d":"code","1fd8876c":"code","d0f2d70e":"code","5289b107":"code","83f8efb9":"code","300f193b":"code","b1d8099d":"code","a5a3521a":"code","ae135c58":"code","145b9990":"code","86b81e7a":"code","bed2b5d0":"code","d6c02241":"code","627d9580":"code","107ebd03":"code","711ab560":"code","316b7cff":"code","847b0425":"markdown","06d7b8b3":"markdown","7b6cfde0":"markdown","7d64ab40":"markdown","6384444e":"markdown"},"source":{"340b576c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","de4af9d2":"import matplotlib.pyplot as plt \nimport numpy as np","d72f24d9":"#line plot\n\nx=np.arange(10)\ny1=x**2 \ny2=2*x+3\nprint(x)\nprint(y1)\nprint(y2)","81d92839":"themes=plt.style.available\nprint(themes)","a5827d56":"plt.style.use(\"seaborn-dark-palette\")","e254e55f":"plt.plot(x,y1,color='red',label=\"Apple\",marker=\"o\")    # to plot \n#plt.show()    #  if both has to be printed on different graphs \nplt.plot(x,y2,color='green',label=\"Kiwi\",linestyle=\"dashed\")\n\nplt.xlabel(\"Time\")\nplt.ylabel(\"Price\")\nplt.title(\"Prices of fruit over time \")\nplt.legend()\nplt.show()          # prints on the same graph\n\n","ed1f0207":"# agar x axis k liye data na bhi ho \nprices=np.array([1,2,3,4])**2\nprint(prices)\nplt.plot(prices)","4b294676":"# SCATTER PLOTS \nplt.scatter(x,y1)\nplt.show()","c309cf8d":"# adjust the size of any plot \n#plt.figure(figsize=(5,5))\n\n\nplt.scatter(x,y1,color='red',label=\"Apple\",marker=\"^\")     \n#plt.show()    \nplt.scatter(x,y2,color='green',label=\"Kiwi\",linestyle=\"dashed\")\n\nplt.xlabel(\"Time\")\nplt.ylabel(\"Price\")\nplt.title(\"Prices of fruit over time \")\nplt.legend()\nplt.show()         \n\n","1fd8876c":"plt.bar([0,1,2],[10,20,15]) #current year\nplt.bar([0,1,2],[20,10,12])  #next year \nplt.show()\n\n# this is overlapping , but we want side by side  ","d0f2d70e":"x_coor= np.array([0,1,2])*2\nplt.bar(x_coor-0.25,[10,20,15],width=0.5,label=\"current year\" , tick_label=[\"gold\",\"silver\",\"platinum\"]) #current year\nplt.bar(x_coor+0.25 ,[20,10,12],width=0.5,label=\"next year\")  #next year \nplt.legend()\nplt.ylim(0,40)   # for scaling\nplt.xlim(-2,5)\nplt.xlabel(\"Metal\")\nplt.ylabel(\"Price\")\nplt.title(\"Metal Price comparison\")\nplt.show()\n","5289b107":"#plt.style.use(\"dark_background\")\nx_coor= np.array([0,1,2])*2\nplt.bar(x_coor-0.25,[10,20,15],width=0.5,label=\"current year\" , tick_label=[\"gold\",\"silver\",\"platinum\"]) #current year\nplt.bar(x_coor+0.25 ,[20,10,12],width=0.5,label=\"next year\",color=\"orange\")  #next year \nplt.legend()\nplt.xlabel(\"Metal\")\nplt.ylabel(\"Price\")\nplt.title(\"Metal Price comparison\")\nplt.show()\n","83f8efb9":"subjects=\"ME\",\"ITC\",\"DCCN\",\"DSP\"\nweightage= [10,20,15,5]\nplt.pie(weightage,labels=subjects)","300f193b":"subjects=\"ME\",\"ITC\",\"DCCN\",\"DSP\"\nweightage= [10,20,15,5]\nplt.pie(weightage,labels=subjects,explode=(1,0,0.1,0),autopct='%1.1f%%')\nplt.show()","b1d8099d":"import pandas as pd\n\n","a5a3521a":"pwd             # default directory","ae135c58":"df=pd.read_csv(\"https:\/\/raw.githubusercontent.com\/coding-blocks-archives\/machine-learning-online-2018\/master\/2.%20Working%20with%20Libraries\/movie_metadata.csv\")\nprint(df.head(n=10))","145b9990":"df.columns","86b81e7a":"titles = list(df.get(('movie_title')))","bed2b5d0":"print(titles[:5])\nprint(titles[0][:-1])       #special chars ko hatane k liye","d6c02241":"freq_title={}\nfor x in titles:\n    l=len(x)\n    \n    if freq_title.get(l) is None:\n        freq_title[l]=1\n                                       # if a particular length is coming for first time then we make it as 1\n    else:\n        freq_title[l]+=1\n        ","627d9580":"freq_title          # 138 movies in which the title length is 7 and so on","107ebd03":"print(freq_title)","711ab560":"X=np.array(list(freq_title.keys()))\nY=np.array(list(freq_title.values()))\n#print(X,Y)","316b7cff":"plt.scatter(X,Y)\nplt.xlabel(\"length of movie title\")\nplt.ylabel(\"no. of movies having this much long title \")\nplt.title(\"movie data visualization problem\")\nplt.show()               # ye kuch gaussian sa aa rha hai","847b0425":"# MOVIE DATA VISUALIZATION","06d7b8b3":"# BAR GRAPHS","7b6cfde0":"# SCATTER PLOTS ","7d64ab40":"# PIE CHART","6384444e":"# DATA VISUALIZATION"}}