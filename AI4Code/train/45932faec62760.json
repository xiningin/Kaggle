{"cell_type":{"5ac138ba":"code","46e76a11":"code","ce742d84":"code","b20f85c4":"code","69b6e0db":"code","d6c1a40f":"code","ef5f751f":"code","95a6d7e2":"code","33e1f360":"code","729a94c8":"code","4b096867":"code","f3e54e8d":"code","dff04a5b":"code","f3f0e863":"code","759bea16":"code","76af892e":"code","7724379b":"code","377f3a99":"code","bf9f489b":"code","33b6fd1f":"code","75adcef4":"code","a7bc3fbc":"code","1f26996f":"code","5edabd2f":"markdown","bf740e9a":"markdown","da13606f":"markdown","bbf0032a":"markdown","315690ba":"markdown"},"source":{"5ac138ba":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","46e76a11":"df = pd.read_csv('..\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')","ce742d84":"df.head()","b20f85c4":"df.info()","69b6e0db":"df.describe()","d6c1a40f":"df.isnull().any()","ef5f751f":"df.shape","95a6d7e2":"df['Churn'].value_counts()","33e1f360":"sns.countplot(df['Churn'])","729a94c8":"sns.countplot(x='gender', hue='Churn', data = df)","4b096867":"sns.countplot(x='InternetService', hue = 'Churn', data = df)","f3e54e8d":"numerical_features = ['tenure', 'MonthlyCharges']\nfig, ax = plt.subplots(1, 2, figsize = (28,8))\ndf[df.Churn == 'No'][numerical_features].hist(bins=20, color='blue', alpha=0.5, ax = ax)\ndf[df.Churn == 'Yes'][numerical_features].hist(bins=20, color='orange', alpha=0.5, ax = ax)","dff04a5b":"df2 = df.drop('customerID', axis=1)","f3f0e863":"from sklearn.preprocessing import LabelEncoder\nfor column in df2:\n    if df2[column].dtype == np.number:\n        continue\n    df2[column] = LabelEncoder().fit_transform(df2[column])","759bea16":"df2.dtypes","76af892e":"df2.head()","7724379b":"X = df2.drop('Churn', axis=1)\ny = df2['Churn']","377f3a99":"from sklearn.preprocessing import StandardScaler\nX = StandardScaler().fit_transform(X)","bf9f489b":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)","33b6fd1f":"from sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)","75adcef4":"predictions = model.predict(X_test)","a7bc3fbc":"print(predictions)","1f26996f":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, predictions))","5edabd2f":"# Importing Libraries","bf740e9a":"# EDA","da13606f":"# Logistic Regression","bbf0032a":"# Data","315690ba":"# Feature Engineering"}}