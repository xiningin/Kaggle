{"cell_type":{"7d834f7b":"code","49fa8f58":"code","5b87c6aa":"code","095991de":"code","e404bc0d":"code","d29b3aa1":"code","c7d80986":"code","a3664973":"code","26495c85":"code","3321564b":"code","8ebef572":"code","defc3307":"code","ba03d3db":"code","470abf10":"code","394f96f2":"code","2b206955":"code","ae03dc4d":"code","0f883dad":"code","dd63e6df":"code","0a60dd70":"code","48a73f6f":"code","4714efcf":"code","220ecd48":"code","ec8d9800":"code","7225f2ee":"code","39f06e6a":"code","cc08604d":"code","aeddc205":"markdown","14c784f9":"markdown"},"source":{"7d834f7b":"import pandas as pd\nimport numpy as np\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","49fa8f58":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\ndf = pd.read_csv('..\/input\/musk-dataset\/musk_csv.csv')\n","5b87c6aa":"df.head()","095991de":"df['molecule_name'].value_counts()","e404bc0d":"df.corr().abs() #Columns with high correlation will be dropped because,then we can predict using very few columns","d29b3aa1":"df.isnull().sum() #finding out the number of missing values","c7d80986":"\n#dropping columns with high correlation\ncor_matrix = df.corr().abs()\n#correlation will be mirror image about the diagonal and the diagonals are 1 \n#thus selecting upper triangular matrix\nupper_tri = cor_matrix.where(np.triu(np.ones(cor_matrix.shape),k=1).astype(np.bool))\nto_drop = [column for column in upper_tri.columns if any(upper_tri[column] > 0.95)]\n\ndf = df.drop(columns = to_drop)\ndf","a3664973":"df.shape","26495c85":"#for splitting the data \nfrom sklearn.model_selection import train_test_split","3321564b":"train,test = train_test_split(df, random_state=1, test_size = 0.2)\n","8ebef572":"Xtrain = train.iloc[:,3:-1]\nYtrain = train.iloc[:,-1:]\nXtest = test.iloc[:,3:-1]\nYtest = test.iloc[:,-1:]\nXtrain.shape","defc3307":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D","ba03d3db":"a=[1]*Xtrain.shape[0]\nXtrain[\"hello\"]=a\n\nb=[1]*Xtest.shape[0]\nXtest[\"hello\"]=b\n\n\nXtrain.shape\n\n","470abf10":"x_train=Xtrain.values.reshape(Xtrain.shape[0],27,5,1)\nx_test=Xtest.values.reshape(Xtest.shape[0],27,5,1)","394f96f2":"x_train.shape","2b206955":"x_test.shape","ae03dc4d":"model=Sequential()\nmodel.add(Conv2D(32,kernel_size=(3,3),activation='relu',input_shape=(27,5,1)))\nmodel.add(Conv2D(64,(2,2),activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(128,activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(1,activation='sigmoid'))","0f883dad":"model.summary()","dd63e6df":"model.compile(loss=keras.losses.binary_crossentropy,optimizer=keras.optimizers.Adam(),metrics=['accuracy'])\n","0a60dd70":"result = model.fit(x_train,Ytrain,batch_size=128,epochs=50,validation_data=(x_test,Ytest))","48a73f6f":"score=model.evaluate(x_test,Ytest,verbose=1)\nprint(score)","4714efcf":"plt.plot(result.history['accuracy'])\nplt.plot(result.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epochs')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()\n\n# summarize history for loss\nplt.plot(result.history['loss'])\nplt.plot(result.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epochs')\nplt.legend(['train', 'test'], loc='upper right')\nplt.show()","220ecd48":"from sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import f1_score, precision_score, recall_score","ec8d9800":"\nprint(\"Validation Accuracy is:\",score[1])","7225f2ee":"print(\"Validation Loss is :\",score[0])","39f06e6a":"print(\"Recall score:\",recall_score(Ytest,model.predict_classes(x_test),))","cc08604d":"print(\"F1_score:\",f1_score(Ytest,model.predict_classes(x_test),))","aeddc205":"# CNN Model","14c784f9":"# MODEL"}}