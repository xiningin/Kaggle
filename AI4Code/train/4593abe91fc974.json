{"cell_type":{"109b581d":"code","d431d29d":"code","5e455e15":"code","1926957a":"code","83d68df7":"code","ed37fb3a":"code","27346901":"code","d0294d6a":"code","3be1bc64":"code","09f75eae":"code","8cf72b6a":"code","63a1fd49":"code","0e5c0ceb":"code","a39ab4b0":"code","c6f36dc4":"code","612a2bd4":"code","2fcad802":"code","36aebc8c":"code","13a4cbe7":"code","79a5cefb":"code","707a090c":"code","f29a9ca0":"code","686d1e5d":"code","e3920101":"code","42eadd49":"markdown","7e778b9a":"markdown","df955a8b":"markdown","4ddb9fcd":"markdown","2fcddac5":"markdown","f4ee3953":"markdown","e696b60d":"markdown","b43b1585":"markdown","d028ac9d":"markdown"},"source":{"109b581d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d431d29d":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC","5e455e15":"train = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')","1926957a":"train.head()","83d68df7":"train.shape","ed37fb3a":"test.head()","27346901":"test.shape","d0294d6a":"train.isnull().sum()","3be1bc64":"test.isnull().sum()","09f75eae":"train.label.value_counts().sort_index().plot(kind='bar')","8cf72b6a":"train.label.value_counts().sort_index()","63a1fd49":"X = train.drop('label', axis = 1)\ny = train.label\n\nX.shape , y.shape","0e5c0ceb":"x = X.astype('float32')\/255\nx.shape","a39ab4b0":"X_train, X_test, y_train, y_test = train_test_split(x,y, test_size = 0.2, random_state= 0)\nX_train.shape, y_train.shape, X_test.shape, y_test.shape","c6f36dc4":"svc = SVC()\nsvc.fit(X_train, y_train)","612a2bd4":"y_pred = svc.predict(X_test)","2fcad802":"from sklearn import metrics","36aebc8c":"print(metrics.classification_report(y_test, y_pred))","13a4cbe7":"X = test.astype('float32')\/255","79a5cefb":"predicted = svc.predict(X)","707a090c":"predicted","f29a9ca0":"test['index'] = test.index","686d1e5d":"submmission = pd.DataFrame()\nsubmmission['ImageId'] = test['index']\nsubmmission['Label'] = predicted\nsubmmission.head()","e3920101":"submmission.to_csv('submmission.csv', index='False')","42eadd49":"### General Info","7e778b9a":"### Feature and response","df955a8b":"### Preporcessing","4ddb9fcd":"### Libraries","2fcddac5":"### Split into training and testing","f4ee3953":"### EDA","e696b60d":"### Model  \n\n##### Simple\n","b43b1585":"### Missing Values","d028ac9d":"### Predict"}}