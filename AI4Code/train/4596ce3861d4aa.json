{"cell_type":{"660eb2cb":"code","6dfaef9c":"code","3cec5811":"code","ef44936e":"code","b316af4e":"code","cece48d2":"code","ea8f6d2e":"code","402098a2":"code","20d38331":"code","7ceaa9ed":"code","1dfaae01":"code","563f69a8":"code","1d1ad415":"code","e7b25ebd":"code","5c326290":"code","ecff9945":"code","ed5e90cb":"code","2bdc3b5a":"code","835e7948":"code","8be43bef":"code","560752af":"code","5b63834d":"code","884c4ee0":"code","8bda63c1":"code","94e07261":"code","82474a36":"code","fc910714":"code","454f7b8c":"code","009a0360":"code","0d26ef78":"code","a6b130f0":"code","ade4e8cf":"code","3767036e":"code","818df37a":"code","4e280b04":"code","ee78bbe0":"code","6a6c04ea":"code","d2683499":"code","783e9728":"code","cbf7c5d4":"code","94f19446":"code","48b75efe":"markdown","9bbbfecd":"markdown","013a2511":"markdown","080413ed":"markdown","1c85eb55":"markdown","6cd57e6c":"markdown","91ce8032":"markdown","663029b1":"markdown","ef9f4b8e":"markdown","a65b79b1":"markdown","e728ec5f":"markdown","0753d594":"markdown","501ba154":"markdown","980d9984":"markdown","5e4e4458":"markdown","c48255c0":"markdown","e2e296e2":"markdown","4ce14a6b":"markdown","a86bfab7":"markdown","297ca584":"markdown","8d641c84":"markdown","be806e77":"markdown","435e7eaa":"markdown","8ab7299c":"markdown","694f70a4":"markdown","d0eeea0e":"markdown","9d0c7618":"markdown","b180514c":"markdown","daa92435":"markdown","a610137f":"markdown","bd4e3b7b":"markdown","3f674eff":"markdown","2089537f":"markdown","e6a1d4ad":"markdown","8b6f3d0d":"markdown","cd53d4da":"markdown","c489456a":"markdown","1cebac20":"markdown","8c95d2ce":"markdown","5dedb82d":"markdown"},"source":{"660eb2cb":"import os\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","6dfaef9c":"# assigning path of dirty_data.csv to variable dirty_data_path\ndirty_data_path = '\/kaggle\/input\/transactional-retail-dataset-of-electronics-store\/dirty_data.csv'\n\n# assigning path of missing_data.csv to variable missing_data_path\nmissing_data_path = '\/kaggle\/input\/transactional-retail-dataset-of-electronics-store\/missing_data.csv'\n\n# assigning path of warehouses.csv to variable warehouses_path\nwarehouses_path = '\/kaggle\/input\/transactional-retail-dataset-of-electronics-store\/warehouses.csv'","3cec5811":"dirty_data = pd.read_csv(dirty_data_path)","ef44936e":"# display top 5 rows\ndirty_data.head()  ","b316af4e":"dirty_data.describe() ","cece48d2":"print(f'Shape of dirty_data is: {dirty_data.shape}')","ea8f6d2e":"print(dirty_data.isnull().sum())","402098a2":"print(dirty_data.dtypes)","20d38331":"dirty_data.date = pd.to_datetime(dirty_data['date'])","7ceaa9ed":"print(dirty_data.date.dtypes)      ","1dfaae01":"print(dirty_data.dtypes)  # Now data in date column is in datetime64 form","563f69a8":"if dirty_data.order_id.is_unique:    \n    print(\"Data in order_id is unique\")      # execute when 'if' block will true\nelse:\n    print(\"Data in order_id is not unique\")  # execute when 'else' block will true","1d1ad415":"dirty_data['nearest_warehouse'].unique()","e7b25ebd":"dirty_data.nearest_warehouse = dirty_data.nearest_warehouse.str.title()","5c326290":"dirty_data['nearest_warehouse'].unique()","ecff9945":"warehouses = dirty_data['nearest_warehouse'].value_counts()\nprint(warehouses)","ed5e90cb":"warehouses.plot(kind='bar', rot=1, color=['r','g','b'], figsize=(10,5))\nplt.title(\"Quantity of the warehouses\\n\", size=15)\nplt.ylabel(\"Counts\");","2bdc3b5a":"plt.pie(warehouses,\n        labels=['Thomson',\"Nickolson\",'Bakers'],\n        autopct=\"%0.1f%%\",\n        explode=[0,.01,0.1],\n        startangle=60,radius=1)\nplt.title(\"Quantity of warehouses\", size=15)\nplt.show()","835e7948":"dirty_data[dirty_data.order_price == dirty_data.order_price.max()]","8be43bef":"dirty_data[dirty_data.order_price == dirty_data.order_price.min()]","560752af":"dirty_data.loc[:,['order_price','delivery_charges','coupon_discount','order_total']].head(10)","5b63834d":"for i, index in enumerate(range(0,10)):\n    if (dirty_data['coupon_discount'][i] != 0):\n        dis_price = (dirty_data['order_price'][i]) * (dirty_data['coupon_discount'][i] \/ 100)   # apply coupon to original price\n        price = dis_price + dirty_data['delivery_charges'][i]         # adding delivery charges\n        final_price = np.round(dis_price,2)\n    \n    else:\n        final_price = dirty_data['order_price'][i] + dirty_data['delivery_charges'][i]   # adding order_price and delivery_charges\n        final_price = np.round(final_price,2)    # round off upto 2nd decimal place\n\n    print(f'Order total of record at index {index} is: {final_price} ')","884c4ee0":"lis = list()     # creating an empty list","8bda63c1":"for i in range(0,len(dirty_data['order_price'])):\n    if (dirty_data['coupon_discount'][i] != 0):\n        dis_price = (dirty_data['order_price'][i]) * (dirty_data['coupon_discount'][i] \/ 100)   # apply coupon to original price\n        price = dis_price + dirty_data['delivery_charges'][i]         # adding delivery charges\n        final_price = np.round(dis_price,2)\n        lis.append(final_price)               # appending final_price to lis\n    \n    else:\n        final_price = dirty_data['order_price'][i] + dirty_data['delivery_charges'][i]   # adding order_price and delivery_charges\n        final_price = np.round(final_price,2)    # round off upto 2nd decimal place\n        lis.append(final_price)                  # appending final_price to lis\n","94e07261":"print(f'Items (Price) in list is: {len(lis)}')","82474a36":"dirty_data['order_total'] = pd.Series(lis)","fc910714":"Q1_order_total = dirty_data['order_total'].quantile(0.25)     # Lower Quartile\nQ3_order_total = dirty_data['order_total'].quantile(0.75)     # Upper Quartile","454f7b8c":"print(f'Lower Quartile is: {Q1_order_total}') \nprint(f'Upper Quartile is: {Q3_order_total}')","009a0360":"# upper quartile - lower quartile\n\nIQR_order_total = Q3_order_total - Q1_order_total    ","0d26ef78":"print(f'Value of IQR_order_total is: {IQR_order_total}')","a6b130f0":"lower_limit_order_total = Q1_order_total - 1.5 * IQR_order_total\nupper_limit_order_total = Q3_order_total + 1.5 * IQR_order_total","ade4e8cf":"print(f'Lower limit of order_total is: {lower_limit_order_total}')\nprint(f'Upper limit of order_total is: {upper_limit_order_total}')","3767036e":"outlier_dirty_data = dirty_data[(dirty_data['order_total'] < lower_limit_order_total) | (dirty_data['order_total'] > upper_limit_order_total)]","818df37a":"outlier_dirty_data","4e280b04":"print(f'Total outlier records in dirty_data is: {outlier_dirty_data.shape[0]}')","ee78bbe0":"data_without_outlier = dirty_data[(dirty_data['order_total'] > lower_limit_order_total) & (dirty_data['order_total'] < upper_limit_order_total)]","6a6c04ea":"print(f'Total numbers of records without outliers is: {data_without_outlier.shape[0]}')","d2683499":"data_without_outlier.head()","783e9728":"data_without_outlier['is_happy_customer'].unique()","cbf7c5d4":"satisfaction = data_without_outlier['is_happy_customer'].value_counts()\nprint(satisfaction)","94f19446":"plt.figure(figsize=(15,5))\n\nplt.subplot(121)\nsatisfaction.plot(kind='bar', color=['g','r'], rot=1)\nplt.xticks(range(2), labels=['Satisfy','Not Satifty'])\nplt.ylabel('Counts')\nplt.title(\"Customer satisfaction Vs Not satisfaction\\n\", size=15)\n\n\nplt.subplot(122)\nplt.pie(satisfaction, labels=['Satisfy','Not Satifty'], autopct=\"%.1f%%\",explode=[0,0.1],shadow=True)\nplt.title(\"Percentage of Customer satisfaction Vs Not satisfaction\\n\", size=15)\n\nplt.show()","48b75efe":"## **70.3% customers are satisfy with service**","9bbbfecd":"# <p style=\"background-color:#4d91ff;font-family:newtimeroman;color:#FFF9ED;font-size:140%;text-align:center;border-radius:10px 10px;\">Displaying Record whose order price is maximum<\/p>","013a2511":"# <p style=\"background-color:#4d91ff;font-family:newtimeroman;color:#FFF9ED;font-size:140%;text-align:center;border-radius:10px 10px;\">Displaying statistical info of dirty_data<\/p>","080413ed":"# <p style=\"background-color:#4d91ff;font-family:newtimeroman;color:#FFF9ED;font-size:140%;text-align:center;border-radius:10px 10px;\">Reading csv file<\/p>","1c85eb55":"# <p style=\"background-color:#4d91ff;font-family:newtimeroman;color:#FFF9ED;font-size:140%;text-align:center;border-radius:10px 10px;\">Analyzing order_id<\/p>","6cd57e6c":"## **Now checking whether the order_total(after all discount and delivery charges are applied) is correct or there is some problem in it**","91ce8032":"# <p style=\"background-color:#4d91ff;font-family:newtimeroman;color:#FFF9ED;font-size:130%;text-align:center;border-radius:10px 10px;\">Visualizing data using pie chart<\/p>","663029b1":"## **Above records is outlier, So removing it from original data**","ef9f4b8e":"## **To solve this problem, convert data in nearest_warehouse in title case**","a65b79b1":"**Now this problem is solved**","e728ec5f":"# <p style=\"background-color:#4d91ff;font-family:newtimeroman;color:#FFF9ED;font-size:130%;text-align:center;border-radius:10px 10px;\">Finding lower and upper limit<\/p>","0753d594":"# <p style=\"background-color:#4d91ff;font-family:newtimeroman;color:#FFF9ED;font-size:140%;text-align:center;border-radius:10px 10px;\">Removing outlier<\/p>\n\n### - **Using IQR**","501ba154":"# <p style=\"background-color:#4d91ff;font-family:newtimeroman;color:#FFF9ED;font-size:130%;text-align:center;border-radius:10px 10px;\">Finding IQR<\/p>","980d9984":"**Now the problem with order_total is solved**","5e4e4458":"### **Checking whether order_id is unique or not**","c48255c0":"### **Data type of date column is object instead of datetime, So fixing this problem**","e2e296e2":"# <p style=\"background-color:#4d91ff;font-family:newtimeroman;color:#FFF9ED;font-size:130%;text-align:center;border-radius:10px 10px;\">Displaying all outlier values<\/p>","4ce14a6b":"# <p style=\"background-color:#4d91ff;font-family:newtimeroman;color:#FFF9ED;font-size:140%;text-align:center;border-radius:10px 10px;\">Analyzing datatype of each column<\/p>","a86bfab7":"### **It looks like that there is an error in order_total feature of dirty_data, So fixing this**","297ca584":"**So no column contain null value**","8d641c84":"# <p style=\"background-color:#4d91ff;font-family:newtimeroman;color:#FFF9ED;font-size:140%;text-align:center;border-radius:10px 10px;\">Visualizing Data<\/p>","be806e77":"### **It seems that Thomson is nearest warehouse accessible to mostly customer**","435e7eaa":"# <p style=\"background-color:#4d91ff;font-family:newtimeroman;color:#FFF9ED;font-size:140%;text-align:center;border-radius:10px 10px;\">Analyzing nearest_warehouse<\/p>","8ab7299c":"### **Any data which is greater than lower limit and less than upper limit is Not an Outlier**","694f70a4":"### **Unique item in nearest_warehouse**","d0eeea0e":"# <p style=\"background-color:#4d91ff;font-family:newtimeroman;color:#FFF9ED;font-size:130%;text-align:center;border-radius:10px 10px;\">If you find this Notebook helpful, <font size=\"+3\" color=\"white\"><b>Please Upvote.<\/b><\/font><br> Thank you \ud83d\ude0a\n<\/p>","9d0c7618":"# <p style=\"background-color:#4d91ff;font-family:newtimeroman;color:#FFF9ED;font-size:140%;text-align:center;border-radius:10px 10px;\">Importing required libraries<\/p>","b180514c":"# <p style=\"background-color:#4d91ff;font-family:newtimeroman;color:#FFF9ED;font-size:140%;text-align:center;border-radius:10px 10px;\">Displaying Record whose order price is minimum<\/p>","daa92435":"# <p style=\"background-color:#4d91ff;font-family:newtimeroman;color:#FFF9ED;font-size:130%;text-align:center;border-radius:10px 10px;\">Checking for Outlier in order_total<\/p>","a610137f":"# <p style=\"background-color:#4d91ff;font-family:newtimeroman;color:#FFF9ED;font-size:140%;text-align:center;border-radius:10px 10px;\">Computing and appending order_final in 'lis'<\/p>","bd4e3b7b":"### **Analyzing order_price and order_total**\n- order_price: Price before any discounts and delivery charges\n- order_total: Price after all discounts and\/or delivery charges are applied","3f674eff":"# <p style=\"background-color:#4d91ff;font-family:newtimeroman;color:#FFF9ED;font-size:140%;text-align:center;border-radius:10px 10px;\">Analyzing how many customers are happy with sevice<\/p>","2089537f":"### **Thompson and thompson are same but here they both are different so make it same**\n\n### **Similarly Nickolson and nickolson are same**","e6a1d4ad":"# <p style=\"background-color:#4d91ff;font-family:newtimeroman;color:#FFF9ED;font-size:140%;text-align:center;border-radius:10px 10px;\">Whether any columns contains null value or not<\/p>","8b6f3d0d":"# <p style=\"background-color:#4d91ff;font-family:newtimeroman;color:#FFF9ED;font-size:140%;text-align:center;border-radius:10px 10px;\">Computing and Displaying order_total price of first 10 records<\/p>","cd53d4da":"# <p style=\"background-color:#4d91ff;font-family:newtimeroman;color:#FFF9ED;font-size:130%;text-align:center;border-radius:10px 10px;\">Visualizing data using bar chart<\/p>","c489456a":"# <p style=\"background-color:#4d91ff;font-family:newtimeroman;color:#FFF9ED;font-size:140%;text-align:center;border-radius:10px 10px;\">Converting list to Series and set it in order_total<\/p>","1cebac20":"# <p style=\"background-color:#4d91ff;font-family:newtimeroman;color:#FFF9ED;font-size:140%;text-align:center;border-radius:10px 10px;\">Checking quantities of near_warehouse<\/p>","8c95d2ce":"# <p style=\"background-color:#4d91ff;font-family:newtimeroman;color:#FFF9ED;font-size:140%;text-align:center;border-radius:10px 10px;\">Displaying top 5 records of data without outliers<\/p>","5dedb82d":"### **Any value less then lower limit and greater then upper limit is outlier**"}}