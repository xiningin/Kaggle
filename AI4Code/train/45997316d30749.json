{"cell_type":{"7072eb3e":"code","84448bbf":"code","68284cd1":"code","32d4b16e":"code","b6b1760a":"code","30598355":"code","0e107c55":"code","8d230115":"code","e6dbc80a":"code","d1f58ce4":"code","68da299d":"code","b120c7be":"markdown","eb953bf8":"markdown","467b946b":"markdown","ed5eee2e":"markdown","e8afc4cd":"markdown","aae43846":"markdown","4223cb90":"markdown","26d13604":"markdown","e1ac4a8e":"markdown","d9719d77":"markdown","e5323a8d":"markdown","fdb56233":"markdown","79effbe8":"markdown","869cce4e":"markdown"},"source":{"7072eb3e":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport sklearn as sk\n\n%matplotlib inline\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix","84448bbf":"data = pd.read_csv(\"..\/input\/creditcard.csv\")\ndata.head()","68284cd1":"count_classes = pd.value_counts(data['Class'], sort = True).sort_index()\ncount_classes.plot(kind = 'bar')\nplt.title(\"Fraud class histogram\")\nplt.xlabel(\"Class\")\nplt.ylabel(\"Frequency\")\nplt.yscale(\"log\")","32d4b16e":"from sklearn.model_selection import train_test_split\n\nX = data.iloc[:,1:data.shape[1]-1]\ny = data.iloc[:,data.shape[1]-1]\n\n# Whole dataset\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.3, random_state = 0)\n\nprint(\"Number transactions train dataset: \", len(X_train))\nprint(\"Number transactions test dataset: \", len(X_test))\nprint(\"Total number of transactions: \", len(X_train)+len(X_test))","b6b1760a":"def confusion(classifier, X_test, y_test):\n    y_pred  = classifier.predict(X_test)\n    return confusion_matrix(y_test, y_pred).ravel()","30598355":"def show(tn,fp,fn,tp):\n    print(\"TN:\" + str(tn) + \" FP:\" + str(fp) + \" FN:\" + str(fn) + \" TP:\" + str(tp) + \n          \" FNR=\" + str(fn\/(fn+tp)) + \" FPR=\" + str(fp\/(fp+tn)))","0e107c55":"show(*confusion(RandomForestClassifier(random_state=0, n_jobs=-1, n_estimators=10).fit(X_train,y_train),X_test,y_test))","8d230115":"show(*confusion(RandomForestClassifier(random_state=0, n_jobs=-1, n_estimators=10, class_weight=\"balanced\").fit(X_train,y_train),X_test,y_test))","e6dbc80a":"show(*confusion(RandomForestClassifier(random_state=0, n_jobs=-1, n_estimators=10, class_weight=\"balanced_subsample\").fit(X_train,y_train),X_test,y_test))","d1f58ce4":"w_neg = 10**-4\nw_pos_range = np.exp(np.arange(np.log(1), np.log(10**9)))","68da299d":"for w_pos in w_pos_range:\n    print(\"w_pos: \" + str(w_pos))\n    show(*confusion(RandomForestClassifier(random_state=0, n_jobs=-1, n_estimators=10, class_weight={0: w_neg, 1: w_pos}).fit(X_train,y_train),X_test,y_test))","b120c7be":"#### Conclusion\nIt is feasible to strike a balance between false negatives and false positives using a class weight hyper parameter. The optimal setting of this hyperparameter depends not only on the cost of false negatives and the cost of false positives, but also on the class imbalance. Similarly to the process of finding the expected cost association to class weights, it makes sense to bootstrap the data to estimate the variance around this expectation.","eb953bf8":"### Splitting data into train and test set. \n\nTo keep this simple, we use a traditional training\/test split.","467b946b":"### Load the data","ed5eee2e":"### Clearly the data is totally unbalanced!!  \n\nSince the data is so unbalanced, using a typical accuracy score to evaluate our classification algorithm would be misleading. For example, if we just used a majority class to assign values to all records, we will still be having a high accuracy, but we would be classifying all ones incorrectly. ","e8afc4cd":"# Addressing class imbalance \n\nThis notebook will examine a Random Forest approach on skewed data. The point is to explore how class inbalance leads to indesirable classification perfomance and how we can use non-unit weighting to adress this.\n\n### The fraudulent transaction dataset and costs\n\nThe dataset used here is highly unbalanced dataset where the relevant class is whether the transaction is fraudulent (class 1) or not (class 0). In particular in the setting of fraud, each undetected fraudulent transaction carries an average cost, e.g., due direct monetary loss or an indirect reputation loss. On the other hand, a cost may also be associated a false positives, due to e.g., that a human must manually examine this transaction.\n\nFor this reason, it does not make sense to just accept an arbitrary tradeoff dictated by a classifier. An acceptable tradeoff would balance expectations about costs of both false positives and false negatives.\n\n### String a balance between false negatives and false positives\n\nThis notebook will examine a Random Forest approach on skewed data. The point is to explore how class inbalance leads to indesirable classification perfomance, in particular favouritism of the majority class and whether we (indirectly) can adapt the loss function to create a more appropriate balance between the false positive rate and false negative, rather than just minimizing the total number of misclassifications.\n\nWhile Random Forests do not have explicit loss function, we  implicitly have one due to the way we split nodes in each decision tree.  To simply the argument, let's consider a single decision tree where the Gini impurity is a splitting criterion (this is default is scikit-learn) and that we have only two classes: \n \n $$I_{G} = 1 - (p_0^2  + p_1^2)$$ \n \n With weights, we essentially end up with something like\n\n  $$I_{G} = 1 - (w_0 p_0^2  + w_1 p_1^2)$$ \n  \n (possibly with some some normalization of the weights to make Gini more interpretable)\n\n \n ","aae43846":"### References:\n\n- Good blog article on different methods handling class imbalance:\nhttps:\/\/www.svds.com\/learning-imbalanced-classes\/\n- A Survey of Predictive Modelling under Imbalanced Distributions: https:\/\/arxiv.org\/pdf\/1505.01658.pdf\n- Short blog post about scikit-learn RandomForestClassifier balanced mode: https:\/\/chrisalbon.com\/machine_learning\/trees_and_forests\/handle_imbalanced_classes_in_random_forests\/\n- The mechanism of doing the _weighted_ node-split in the tree in scikit learn: https:\/\/github.com\/scikit-learn\/scikit-learn\/blob\/70f170dedf2927c2d805144425522459d92700a7\/sklearn\/tree\/_criterion.pyx#L635\n- Paper that introduces \"Weighted Random Forests\" as a method to deal with class imbalance: https:\/\/statistics.berkeley.edu\/sites\/default\/files\/tech-reports\/666.pdf\n- This paper frames the concepts around \"cost sensitive learning\" , i.e., minizing cost rather than just misclassification loss: https:\/\/cling.csd.uwo.ca\/papers\/cost_sensitive.pdf","4223cb90":"### Checking the target classes","26d13604":"#### Using balanced RandomForestClassifier in`balanced_subsample` mode.\nThis is the same as \u201cbalanced\u201d except that weights are computed based on the bootstrap sample for every tree grown.","e1ac4a8e":"#### Using ***balanced*** RandomForestClassifier approach:\n\n\nWeights are inversely proportional with the frequency of class observaton: $$w_j = \\frac{n_j}{k n_j}$$\n\nwhere $w_j$ is the weight to class $j$, $n$ is the number of observations, $n_j$  is the number of observations in class $j$, and $k$  is the total number of classes. In our case, that indicates that the minority class label (fraud) should be weighted higher. ","d9719d77":"Note for instance, \n```\nw_pos: 59874.14171519782\nTN:84457 FP:839 FN:29 TP:118 FNR=0.19727891156462585 FPR=0.009836334646407803\n```\n\nHere we have less than 30 false negatives which is about 25% less than for an unweighted or even balanced weighted approach, but at the cost of having 8 times as many false positives. However,  in a setting where false negatives are way more expensive than false positives, this may be a more acceptable balance.","e5323a8d":"This makes only a small difference, and again, the tradeoff between the false positive rate and the false negative rate is an arbitrary one.  We still have quite the  _bias_ toward classification of the majority class.","fdb56233":"### Using ***unbalanced*** RandomForestClassifier approach:\n\nThis is usual Random forest classifier which is the default in scikit-learn. All transactions regardless of label are weighted the same. ","79effbe8":"#### Custom weighting\n\nPositive samples are given exponentially increasingly higher weight $w_{pos}$ relative to negative samples which have constant but very small weights $w_{neg} = 10^{-4}$ . The intention is that we can find a better for the classifier with fewer false negatives at the cost of accepting a large (but not unreasonable) amount of false positives. \n\nThe weights $w_{neg}$ and  $w_{pos}$ become hyperparameters that we can optimize. For the sake of simplicity we evaluate these on the test set here, but we stress that in we should evalaute these hyperparameters using CV in training set alone to avoid leakage to test set.\n\nThe balance tips within a rather small numeric range of $\\frac{w_{pos}}{w_{neg}}$ so we search for $w_{pos}$ in exponential increments. A form of quisence search around the bend, might find a better tradeoff.","869cce4e":"Clearly, the false negative rate is much higher than the false positive rate. \nThis demonstrates the inherent  _bias_ toward classification of the majority class in this unbalanced data set."}}