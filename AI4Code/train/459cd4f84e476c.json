{"cell_type":{"7771485b":"code","65a9a9c7":"code","7dbba87b":"code","e13b7ba4":"code","eca054aa":"code","1a759a59":"code","c329033d":"code","4cdd42ed":"code","6f927a95":"code","3f4d1f0e":"markdown","b1e51834":"markdown","c962c6f0":"markdown","0f705e33":"markdown"},"source":{"7771485b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport tensorflow as tf\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","65a9a9c7":"#Read and present our input and label\ntrain = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")\nx_train = train.drop(\"label\",axis = 1)\ny_train = train.label","7dbba87b":"type(x_train)","e13b7ba4":"y_train[643]","eca054aa":"img = img.reshape(28,28,1)","1a759a59":"import matplotlib.pyplot as plt\nimg = x_train.iloc[642].as_matrix()\nimg = img.reshape((28,28))\nplt.imshow(img,cmap='gray')\nplt.title(\"ONE\")\nplt.axis(\"off\")\nplt.show()","c329033d":"zero = x_train.iloc[1]\none = x_train.iloc[0]\ntwo = x_train.iloc[643]\nplt.scatter(range(0,784),zero,color = \"red\")\nplt.scatter(range(0,784),one,color = \"blue\")\nplt.scatter(range(0,784),two,color = \"green\")","4cdd42ed":"tr_encode =  y_train[5000:10000]\nte_encode = y_train[10000:10200]\nYtr = tf.one_hot(tr_encode,10)\nYte = tf.one_hot(te_encode,10)","6f927a95":"Xtr = x_train.iloc[5000:10000,:]\nXte = x_train.iloc[10000:10200,:]\nXtr = np.array(Xtr)\nXte = np.array(Xte)\nxtr = tf.placeholder(\"float\", [None, 784])\nxte = tf.placeholder(\"float\", [784])\n\n# Nearest Neighbor calculation using L1 Distance\n# Calculate L1 Distance\ndistance = tf.reduce_sum(tf.abs(tf.add(xtr, tf.negative(xte))), reduction_indices=1)\n# Prediction: Get min distance index (Nearest neighbor)\npred = tf.arg_min(distance, 0)\n\naccuracy = 0\n\n# Initialize the variables (i.e. assign their default value)\ninit = tf.global_variables_initializer()\n\n# Start training\nwith tf.Session() as sess:\n\n    # Run the initializer\n    sess.run(init)\n\n    # loop over test data\n    for i in range(len(Xte)):\n        # Get nearest neighbor\n        nn_index = sess.run(pred, feed_dict={xtr: Xtr, xte: Xte[i, :]})\n        # Get nearest neighbor class label and compare it to its true label\n        print(\"Test\", i, \"Prediction:\", np.argmax(sess.run(Ytr[nn_index])),\n            \"True Class:\", np.argmax(sess.run(Yte[i])))\n        # Calculate accuracy\n        if np.argmax(sess.run(Ytr[nn_index])) == np.argmax(sess.run(Yte[i])):\n            accuracy += 100\/len(Xte)\n    print(\"Done!\")\n    print(\"Accuracy:\", accuracy)","3f4d1f0e":"Our model will select the most nearest sample out input example our input is 0 distance to 0 is 4,for 1 is 8,for 2 is 12 it mean our input's label can be 0","b1e51834":"**Simple Visualization**","c962c6f0":"**One Hot Encode**\n\nWe encode our label map for predict.Example we have 3 class it change our label to 0 => [1,0,0] (the zero's place of our array is one)","0f705e33":"**KNN** \n\nI will prepare this model for 5000 train and 200 test. You change this number "}}