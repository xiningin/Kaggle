{"cell_type":{"40499bc4":"code","98ddf79d":"code","6fac743b":"code","e209cea8":"code","6d3e2ebe":"code","82b5ad64":"code","57f6dc93":"code","0a0349a5":"code","8e47946d":"code","82b0a3c6":"code","8ba3f400":"code","f7b90e8f":"code","a229a16b":"code","17de9b6f":"code","bb295829":"code","c6e24dbc":"code","efc66566":"code","e3b1de11":"code","e64538df":"code","5441c997":"code","83eea9d0":"code","da755aee":"code","e3ed3056":"code","e2267618":"code","af2ed553":"code","466ac936":"code","df6fba32":"code","b2d9943f":"code","1fc01f79":"code","c74e4a43":"code","95874be2":"code","26022ade":"code","d3af6e94":"code","e066383a":"code","a04986ef":"code","a77c6eac":"code","8e4d4f6d":"code","d2f0bf40":"code","50b1b449":"code","cf080857":"code","c79dd962":"code","6a82e368":"code","c50148dd":"code","e4f8bc10":"code","f67a3ecc":"code","858761f8":"code","7e85bd99":"code","a75090cb":"code","2eae442a":"code","1ee2bfdd":"code","2701718b":"code","bbc8b6ac":"code","ea8cb5ad":"code","bbee82a5":"code","3775b9e1":"code","3371599f":"code","83fba598":"code","c914b9a8":"code","81e5217c":"code","50850f89":"code","afbc379e":"markdown","288f2405":"markdown","290a6011":"markdown","e0461436":"markdown","f99b40b4":"markdown","72309733":"markdown","7f41ccc5":"markdown","beacb242":"markdown","1e91afdc":"markdown","d7fc500e":"markdown","2462f5c4":"markdown","b7bdd7cf":"markdown","bdb3a36f":"markdown","be73ece1":"markdown","59c8cf08":"markdown","8c6659f1":"markdown","4ef88795":"markdown","d89ddf1a":"markdown","149d9f4a":"markdown","143bd8f6":"markdown","cc03823b":"markdown","30da169b":"markdown","1e53c377":"markdown","aea931ee":"markdown","4d414354":"markdown","5ff25203":"markdown","e3215fc6":"markdown","fd14ebad":"markdown","deca4e0a":"markdown","05d80380":"markdown","bf18e064":"markdown","ee005342":"markdown","a7799fed":"markdown","c4b25ebc":"markdown","eee9807c":"markdown","08d64e58":"markdown","720cf5d0":"markdown","fde943b9":"markdown","088efb04":"markdown","ece17172":"markdown","dfeb323e":"markdown","9759929a":"markdown","ff28d310":"markdown","f7dcfae1":"markdown","cc22a10f":"markdown","26a064b0":"markdown","3414bd52":"markdown","2054861d":"markdown","37b9af34":"markdown","0c16dc22":"markdown","963449ae":"markdown","f3d5b4bf":"markdown","a567a6bf":"markdown","e97aa223":"markdown","01b556ff":"markdown","6c1b1616":"markdown","d5286501":"markdown","9638042e":"markdown","e10869c2":"markdown","8f6ca8ed":"markdown","8445285d":"markdown"},"source":{"40499bc4":"import gc\nimport os\nimport logging\nimport datetime\nimport warnings\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport lightgbm as lgb\nfrom tqdm import tqdm_notebook\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import roc_auc_score, roc_curve\nfrom sklearn.model_selection import StratifiedKFold\nwarnings.filterwarnings('ignore')","98ddf79d":"IS_LOCAL = False\nif(IS_LOCAL):\n    PATH=\"..\/input\/Santander\/\"\nelse:\n    PATH=\"..\/input\/\"\nos.listdir(PATH)","6fac743b":"%%time\ntrain_df = pd.read_csv(PATH+\"train.csv\")\ntest_df = pd.read_csv(PATH+\"test.csv\")","e209cea8":"train_df.shape, test_df.shape","6d3e2ebe":"train_df.head()","82b5ad64":"test_df.head()","57f6dc93":"def missing_data(data):\n    total = data.isnull().sum()\n    percent = (data.isnull().sum()\/data.isnull().count()*100)\n    tt = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n    types = []\n    for col in data.columns:\n        dtype = str(data[col].dtype)\n        types.append(dtype)\n    tt['Types'] = types\n    return(np.transpose(tt))","0a0349a5":"%%time\nmissing_data(train_df)","8e47946d":"%%time\nmissing_data(test_df)","82b0a3c6":"%%time\ntrain_df.describe()","8ba3f400":"%time\ntest_df.describe()","f7b90e8f":"def plot_feature_scatter(df1, df2, features):\n    i = 0\n    sns.set_style('whitegrid')\n    plt.figure()\n    fig, ax = plt.subplots(4,4,figsize=(14,14))\n\n    for feature in features:\n        i += 1\n        plt.subplot(4,4,i)\n        plt.scatter(df1[feature], df2[feature], marker='+')\n        plt.xlabel(feature, fontsize=9)\n    plt.show();","a229a16b":"features = ['var_0', 'var_1','var_2','var_3', 'var_4', 'var_5', 'var_6', 'var_7', \n           'var_8', 'var_9', 'var_10','var_11','var_12', 'var_13', 'var_14', 'var_15', \n           ]\nplot_feature_scatter(train_df[::20],test_df[::20], features)","17de9b6f":"sns.countplot(train_df['target'], palette='Set3')","bb295829":"print(\"There are {}% target values with 1\".format(100 * train_df[\"target\"].value_counts()[1]\/train_df.shape[0]))","c6e24dbc":"def plot_feature_distribution(df1, df2, label1, label2, features):\n    i = 0\n    sns.set_style('whitegrid')\n    plt.figure()\n    fig, ax = plt.subplots(10,10,figsize=(18,22))\n\n    for feature in features:\n        i += 1\n        plt.subplot(10,10,i)\n        sns.distplot(df1[feature], hist=False,label=label1)\n        sns.distplot(df2[feature], hist=False,label=label2)\n        plt.xlabel(feature, fontsize=9)\n        locs, labels = plt.xticks()\n        plt.tick_params(axis='x', which='major', labelsize=6, pad=-6)\n        plt.tick_params(axis='y', which='major', labelsize=6)\n    plt.show();","efc66566":"t0 = train_df.loc[train_df['target'] == 0]\nt1 = train_df.loc[train_df['target'] == 1]\nfeatures = train_df.columns.values[2:102]\nplot_feature_distribution(t0, t1, '0', '1', features)","e3b1de11":"features = train_df.columns.values[102:202]\nplot_feature_distribution(t0, t1, '0', '1', features)","e64538df":"features = train_df.columns.values[2:102]\nplot_feature_distribution(train_df, test_df, 'train', 'test', features)","5441c997":"features = train_df.columns.values[102:202]\nplot_feature_distribution(train_df, test_df, 'train', 'test', features)","83eea9d0":"plt.figure(figsize=(16,6))\nfeatures = train_df.columns.values[2:202]\nplt.title(\"Distribution of mean values per row in the train and test set\")\nsns.distplot(train_df[features].mean(axis=1),color=\"green\", kde=True,bins=120, label='train')\nsns.distplot(test_df[features].mean(axis=1),color=\"blue\", kde=True,bins=120, label='test')\nplt.legend()\nplt.show()","da755aee":"plt.figure(figsize=(16,6))\nplt.title(\"Distribution of mean values per column in the train and test set\")\nsns.distplot(train_df[features].mean(axis=0),color=\"magenta\",kde=True,bins=120, label='train')\nsns.distplot(test_df[features].mean(axis=0),color=\"darkblue\", kde=True,bins=120, label='test')\nplt.legend()\nplt.show()","e3ed3056":"plt.figure(figsize=(16,6))\nplt.title(\"Distribution of std values per row in the train and test set\")\nsns.distplot(train_df[features].std(axis=1),color=\"black\", kde=True,bins=120, label='train')\nsns.distplot(test_df[features].std(axis=1),color=\"red\", kde=True,bins=120, label='test')\nplt.legend();plt.show()","e2267618":"plt.figure(figsize=(16,6))\nplt.title(\"Distribution of std values per column in the train and test set\")\nsns.distplot(train_df[features].std(axis=0),color=\"blue\",kde=True,bins=120, label='train')\nsns.distplot(test_df[features].std(axis=0),color=\"green\", kde=True,bins=120, label='test')\nplt.legend(); plt.show()","af2ed553":"t0 = train_df.loc[train_df['target'] == 0]\nt1 = train_df.loc[train_df['target'] == 1]\nplt.figure(figsize=(16,6))\nplt.title(\"Distribution of mean values per row in the train set\")\nsns.distplot(t0[features].mean(axis=1),color=\"red\", kde=True,bins=120, label='target = 0')\nsns.distplot(t1[features].mean(axis=1),color=\"blue\", kde=True,bins=120, label='target = 1')\nplt.legend(); plt.show()","466ac936":"plt.figure(figsize=(16,6))\nplt.title(\"Distribution of mean values per column in the train set\")\nsns.distplot(t0[features].mean(axis=0),color=\"green\", kde=True,bins=120, label='target = 0')\nsns.distplot(t1[features].mean(axis=0),color=\"darkblue\", kde=True,bins=120, label='target = 1')\nplt.legend(); plt.show()","df6fba32":"plt.figure(figsize=(16,6))\nfeatures = train_df.columns.values[2:202]\nplt.title(\"Distribution of min values per row in the train and test set\")\nsns.distplot(train_df[features].min(axis=1),color=\"red\", kde=True,bins=120, label='train')\nsns.distplot(test_df[features].min(axis=1),color=\"orange\", kde=True,bins=120, label='test')\nplt.legend()\nplt.show()","b2d9943f":"plt.figure(figsize=(16,6))\nfeatures = train_df.columns.values[2:202]\nplt.title(\"Distribution of min values per column in the train and test set\")\nsns.distplot(train_df[features].min(axis=0),color=\"magenta\", kde=True,bins=120, label='train')\nsns.distplot(test_df[features].min(axis=0),color=\"darkblue\", kde=True,bins=120, label='test')\nplt.legend()\nplt.show()","1fc01f79":"plt.figure(figsize=(16,6))\nfeatures = train_df.columns.values[2:202]\nplt.title(\"Distribution of max values per row in the train and test set\")\nsns.distplot(train_df[features].max(axis=1),color=\"brown\", kde=True,bins=120, label='train')\nsns.distplot(test_df[features].max(axis=1),color=\"yellow\", kde=True,bins=120, label='test')\nplt.legend()\nplt.show()","c74e4a43":"plt.figure(figsize=(16,6))\nfeatures = train_df.columns.values[2:202]\nplt.title(\"Distribution of max values per column in the train and test set\")\nsns.distplot(train_df[features].max(axis=0),color=\"blue\", kde=True,bins=120, label='train')\nsns.distplot(test_df[features].max(axis=0),color=\"red\", kde=True,bins=120, label='test')\nplt.legend()\nplt.show()","95874be2":"t0 = train_df.loc[train_df['target'] == 0]\nt1 = train_df.loc[train_df['target'] == 1]\nplt.figure(figsize=(16,6))\nplt.title(\"Distribution of min values per row in the train set\")\nsns.distplot(t0[features].min(axis=1),color=\"orange\", kde=True,bins=120, label='target = 0')\nsns.distplot(t1[features].min(axis=1),color=\"darkblue\", kde=True,bins=120, label='target = 1')\nplt.legend(); plt.show()","26022ade":"plt.figure(figsize=(16,6))\nplt.title(\"Distribution of min values per column in the train set\")\nsns.distplot(t0[features].min(axis=0),color=\"red\", kde=True,bins=120, label='target = 0')\nsns.distplot(t1[features].min(axis=0),color=\"blue\", kde=True,bins=120, label='target = 1')\nplt.legend(); plt.show()","d3af6e94":"plt.figure(figsize=(16,6))\nplt.title(\"Distribution of max values per row in the train set\")\nsns.distplot(t0[features].max(axis=1),color=\"gold\", kde=True,bins=120, label='target = 0')\nsns.distplot(t1[features].max(axis=1),color=\"darkblue\", kde=True,bins=120, label='target = 1')\nplt.legend(); plt.show()","e066383a":"plt.figure(figsize=(16,6))\nplt.title(\"Distribution of max values per column in the train set\")\nsns.distplot(t0[features].max(axis=0),color=\"red\", kde=True,bins=120, label='target = 0')\nsns.distplot(t1[features].max(axis=0),color=\"blue\", kde=True,bins=120, label='target = 1')\nplt.legend(); plt.show()","a04986ef":"plt.figure(figsize=(16,6))\nplt.title(\"Distribution of skew per row in the train and test set\")\nsns.distplot(train_df[features].skew(axis=1),color=\"red\", kde=True,bins=120, label='train')\nsns.distplot(test_df[features].skew(axis=1),color=\"orange\", kde=True,bins=120, label='test')\nplt.legend()\nplt.show()","a77c6eac":"plt.figure(figsize=(16,6))\nplt.title(\"Distribution of skew per column in the train and test set\")\nsns.distplot(train_df[features].skew(axis=0),color=\"magenta\", kde=True,bins=120, label='train')\nsns.distplot(test_df[features].skew(axis=0),color=\"darkblue\", kde=True,bins=120, label='test')\nplt.legend()\nplt.show()","8e4d4f6d":"plt.figure(figsize=(16,6))\nplt.title(\"Distribution of kurtosis per row in the train and test set\")\nsns.distplot(train_df[features].kurtosis(axis=1),color=\"darkblue\", kde=True,bins=120, label='train')\nsns.distplot(test_df[features].kurtosis(axis=1),color=\"yellow\", kde=True,bins=120, label='test')\nplt.legend()\nplt.show()","d2f0bf40":"plt.figure(figsize=(16,6))\nplt.title(\"Distribution of kurtosis per column in the train and test set\")\nsns.distplot(train_df[features].kurtosis(axis=0),color=\"magenta\", kde=True,bins=120, label='train')\nsns.distplot(test_df[features].kurtosis(axis=0),color=\"green\", kde=True,bins=120, label='test')\nplt.legend()\nplt.show()","50b1b449":"t0 = train_df.loc[train_df['target'] == 0]\nt1 = train_df.loc[train_df['target'] == 1]\nplt.figure(figsize=(16,6))\nplt.title(\"Distribution of skew values per row in the train set\")\nsns.distplot(t0[features].skew(axis=1),color=\"red\", kde=True,bins=120, label='target = 0')\nsns.distplot(t1[features].skew(axis=1),color=\"blue\", kde=True,bins=120, label='target = 1')\nplt.legend(); plt.show()","cf080857":"t0 = train_df.loc[train_df['target'] == 0]\nt1 = train_df.loc[train_df['target'] == 1]\nplt.figure(figsize=(16,6))\nplt.title(\"Distribution of skew values per column in the train set\")\nsns.distplot(t0[features].skew(axis=0),color=\"red\", kde=True,bins=120, label='target = 0')\nsns.distplot(t1[features].skew(axis=0),color=\"blue\", kde=True,bins=120, label='target = 1')\nplt.legend(); plt.show()","c79dd962":"t0 = train_df.loc[train_df['target'] == 0]\nt1 = train_df.loc[train_df['target'] == 1]\nplt.figure(figsize=(16,6))\nplt.title(\"Distribution of kurtosis values per row in the train set\")\nsns.distplot(t0[features].kurtosis(axis=1),color=\"red\", kde=True,bins=120, label='target = 0')\nsns.distplot(t1[features].kurtosis(axis=1),color=\"blue\", kde=True,bins=120, label='target = 1')\nplt.legend(); plt.show()","6a82e368":"t0 = train_df.loc[train_df['target'] == 0]\nt1 = train_df.loc[train_df['target'] == 1]\nplt.figure(figsize=(16,6))\nplt.title(\"Distribution of kurtosis values per column in the train set\")\nsns.distplot(t0[features].kurtosis(axis=0),color=\"red\", kde=True,bins=120, label='target = 0')\nsns.distplot(t1[features].kurtosis(axis=0),color=\"blue\", kde=True,bins=120, label='target = 1')\nplt.legend(); plt.show()","c50148dd":"%%time\ncorrelations = train_df[features].corr().abs().unstack().sort_values(kind=\"quicksort\").reset_index()\ncorrelations = correlations[correlations['level_0'] != correlations['level_1']]\ncorrelations.head(10)","e4f8bc10":"correlations.tail(10)","f67a3ecc":"correlations.head(10)","858761f8":"%%time\nfeatures = train_df.columns.values[2:202]\nunique_max_train = []\nunique_max_test = []\nfor feature in features:\n    values = train_df[feature].value_counts()\n    unique_max_train.append([feature, values.max(), values.idxmax()])\n    values = test_df[feature].value_counts()\n    unique_max_test.append([feature, values.max(), values.idxmax()])","7e85bd99":"np.transpose((pd.DataFrame(unique_max_train, columns=['Feature', 'Max duplicates', 'Value'])).\\\n            sort_values(by = 'Max duplicates', ascending=False).head(15))","a75090cb":"np.transpose((pd.DataFrame(unique_max_test, columns=['Feature', 'Max duplicates', 'Value'])).\\\n            sort_values(by = 'Max duplicates', ascending=False).head(15))","2eae442a":"%%time\nidx = features = train_df.columns.values[2:202]\nfor df in [test_df, train_df]:\n    df['sum'] = df[idx].sum(axis=1)  \n    df['min'] = df[idx].min(axis=1)\n    df['max'] = df[idx].max(axis=1)\n    df['mean'] = df[idx].mean(axis=1)\n    df['std'] = df[idx].std(axis=1)\n    df['skew'] = df[idx].skew(axis=1)\n    df['kurt'] = df[idx].kurtosis(axis=1)\n    df['med'] = df[idx].median(axis=1)","1ee2bfdd":"train_df[train_df.columns[202:]].head()","2701718b":"test_df[test_df.columns[201:]].head()","bbc8b6ac":"def plot_new_feature_distribution(df1, df2, label1, label2, features):\n    i = 0\n    sns.set_style('whitegrid')\n    plt.figure()\n    fig, ax = plt.subplots(2,4,figsize=(18,8))\n\n    for feature in features:\n        i += 1\n        plt.subplot(2,4,i)\n        sns.kdeplot(df1[feature], bw=0.5,label=label1)\n        sns.kdeplot(df2[feature], bw=0.5,label=label2)\n        plt.xlabel(feature, fontsize=11)\n        locs, labels = plt.xticks()\n        plt.tick_params(axis='x', which='major', labelsize=8)\n        plt.tick_params(axis='y', which='major', labelsize=8)\n    plt.show();","ea8cb5ad":"t0 = train_df.loc[train_df['target'] == 0]\nt1 = train_df.loc[train_df['target'] == 1]\nfeatures = train_df.columns.values[202:]\nplot_new_feature_distribution(t0, t1, 'target: 0', 'target: 1', features)","bbee82a5":"features = train_df.columns.values[202:]\nplot_new_feature_distribution(train_df, test_df, 'train', 'test', features)","3775b9e1":"print('Train and test columns: {} {}'.format(len(train_df.columns), len(test_df.columns)))","3371599f":"features = [c for c in train_df.columns if c not in ['ID_code', 'target']]\ntarget = train_df['target']","83fba598":"param = {\n    'bagging_freq': 5,\n    'bagging_fraction': 0.4,\n    'boost_from_average':'false',\n    'boost': 'gbdt',\n    'feature_fraction': 0.05,\n    'learning_rate': 0.01,\n    'max_depth': -1,  \n    'metric':'auc',\n    'min_data_in_leaf': 80,\n    'min_sum_hessian_in_leaf': 10.0,\n    'num_leaves': 13,\n    'num_threads': 8,\n    'tree_learner': 'serial',\n    'objective': 'binary', \n    'verbosity': 1\n}","c914b9a8":"folds = StratifiedKFold(n_splits=10, shuffle=False, random_state=44000)\noof = np.zeros(len(train_df))\npredictions = np.zeros(len(test_df))\nfeature_importance_df = pd.DataFrame()\n\nfor fold_, (trn_idx, val_idx) in enumerate(folds.split(train_df.values, target.values)):\n    print(\"Fold {}\".format(fold_))\n    trn_data = lgb.Dataset(train_df.iloc[trn_idx][features], label=target.iloc[trn_idx])\n    val_data = lgb.Dataset(train_df.iloc[val_idx][features], label=target.iloc[val_idx])\n\n    num_round = 1000000\n    clf = lgb.train(param, trn_data, num_round, valid_sets = [trn_data, val_data], verbose_eval=1000, early_stopping_rounds = 3000)\n    oof[val_idx] = clf.predict(train_df.iloc[val_idx][features], num_iteration=clf.best_iteration)\n    \n    fold_importance_df = pd.DataFrame()\n    fold_importance_df[\"Feature\"] = features\n    fold_importance_df[\"importance\"] = clf.feature_importance()\n    fold_importance_df[\"fold\"] = fold_ + 1\n    feature_importance_df = pd.concat([feature_importance_df, fold_importance_df], axis=0)\n    \n    predictions += clf.predict(test_df[features], num_iteration=clf.best_iteration) \/ folds.n_splits\n\nprint(\"CV score: {:<8.5f}\".format(roc_auc_score(target, oof)))","81e5217c":"cols = (feature_importance_df[[\"Feature\", \"importance\"]]\n        .groupby(\"Feature\")\n        .mean()\n        .sort_values(by=\"importance\", ascending=False)[:150].index)\nbest_features = feature_importance_df.loc[feature_importance_df.Feature.isin(cols)]\n\nplt.figure(figsize=(14,28))\nsns.barplot(x=\"importance\", y=\"Feature\", data=best_features.sort_values(by=\"importance\",ascending=False))\nplt.title('Features importance (averaged\/folds)')\nplt.tight_layout()\nplt.savefig('FI.png')","50850f89":"sub_df = pd.DataFrame({\"ID_code\":test_df[\"ID_code\"].values})\nsub_df[\"target\"] = predictions\nsub_df.to_csv(\"submission.csv\", index=False)","afbc379e":"Let's check the distribution of these new, engineered features.  \n\nWe plot first the distribution of new features, grouped by value of corresponding `target` values.","288f2405":"Let's check the distribution of **target** value in train dataset.","290a6011":"Let's show also the distribution of max values per columns in the train set.","e0461436":"Both train and test data have 200,000 entries and 202, respectivelly 201 columns. \n\nLet's glimpse train and test dataset.","f99b40b4":"## <a id='35'>Distribution of skew and kurtosis<\/a>  \n\nLet's see now what is the distribution of skew values per rows and columns.\n\nLet's see first the distribution of skewness calculated per rows in train and test sets.","72309733":"Here we check test dataset.","7f41ccc5":"We run the model.","beacb242":"We can observe that there is a considerable number of features with significant different distribution for the two target values.  \nFor example, **var_0**, **var_1**, **var_2**, **var_5**, **var_9**, **var_13**, **var_106**, **var_109**, **var_139** and many others.\n\nAlso some features, like **var_2**, **var_13**, **var_26**, **var_55**, **var_175**, **var_184**, **var_196** shows a distribution that resambles to a bivariate distribution.\n\nWe will take this into consideration in the future for the selection of the features for our prediction model.  \n\nLe't s now look to the distribution of the same features in parallel in train and test datasets. \n\nThe first 100 values are displayed in the following cell. Press <font color='red'>**Output**<\/font> to display the plots.","1e91afdc":"Let's show the distribution of standard deviation of values per row for train and test datasets.","d7fc500e":"Let's load the train and test data files.","2462f5c4":"Let's check the feature importance.","b7bdd7cf":"Same columns in train and test set have the same or very close number of duplicates of same or very close values. This is an interesting pattern that we might be able to use in the future.","bdb3a36f":"Let's show now the distributions of min values per row in train set, separated on the values of target (0 and 1).","be73ece1":"Let's check the distribution of the mean values per columns in the train and test set.","59c8cf08":"Let's check now the distribution of the mean value per row in the train dataset, grouped by value of target.","8c6659f1":"The data is unbalanced with respect with **target** value.   ","4ef88795":"## <a id='34'>Distribution of min and max<\/a>  \n\nLet's check the distribution of min per row in the train and test set.","d89ddf1a":"The correlation between the features is very small. \n\n## <a id='37'>Duplicate values<\/a>  \n\nLet's now check how many duplicate values exists per columns.","149d9f4a":"The first 100 values are displayed in the following cell. Press <font color='red'>**Output**<\/font> to display the plots.","143bd8f6":"Let's see also the least correlated features.","cc03823b":"Let's see also the top 15 number of duplicates values per test set.","30da169b":"We can make few observations here:   \n\n* standard deviation is relatively large for both train and test variable data;  \n* min, max, mean, sdt values for train and test data looks quite close;  \n* mean values are distributed over a large range.\n\nThe number of values in train and test set is the same. Let's plot the scatter plot for train and test set for few of the features.\n","1e53c377":"Let's check the new created features.","aea931ee":"The next 100 values are displayed in the following cell. Press <font color='red'>**Output**<\/font> to display the plots.","4d414354":"Let's see now the distribution of kurtosis on columns in train separated for values of target 0 and 1.","5ff25203":"We define the hyperparameters for the model.","e3215fc6":"Let's see first the distribution of skewness calculated per columns in train and test set.","fd14ebad":"Let's show now the distribution of max values per rown in the train set.","deca4e0a":"We will show just 5% of the data. On x axis we show train values and on the y axis we show the test values.","05d80380":"\n## <a id='32'>Density plots of features<\/a>  \n\nLet's show now the density plot of variables in train dataset. \n\nWe represent with different colors the distribution for values with **target** value **0** and **1**.","bf18e064":"A long queue to the lower values for both, extended as long as to -80 for test set, is observed.\n\nLet's now show the distribution of min per column in the train and test set.","ee005342":"The next 100 values are displayed in the following cell. Press <font color='red'>**Output**<\/font> to display the plots.","a7799fed":"<h1><center><font size=\"6\">Santander EDA and Prediction<\/font><\/center><\/h1>\n\n<h2><center><font size=\"4\">Dataset used: Santander Customer Transaction Prediction<\/font><\/center><\/h2>\n\n<img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/4\/4a\/Another_new_Santander_bank_-_geograph.org.uk_-_1710962.jpg\/640px-Another_new_Santander_bank_-_geograph.org.uk_-_1710962.jpg\" width=\"500\"><\/img>\n\n<br>\n\n# <a id='0'>Content<\/a>\n\n- <a href='#1'>Introduction<\/a>  \n- <a href='#2'>Prepare the data analysis<\/a>  \n- <a href='#3'>Data exploration<\/a>   \n - <a href='#31'>Check the data<\/a>   \n - <a href='#32'>Density plots of features<\/a>   \n - <a href='#33'>Distribution of mean and std<\/a>   \n - <a href='#34'>Distribution of min and max<\/a>   \n  - <a href='#35'>Distribution of skew and kurtosis<\/a>   \n - <a href='#36'>Features correlations<\/a>   \n - <a href='#37'>Duplicate values<\/a>   \n- <a href='#4'>Feature engineering<\/a>\n- <a href='#5'>Model<\/a>\n- <a href='#6'>Submission<\/a>  \n- <a href='#7'>References<\/a>","c4b25ebc":"<code>\nfeatures = [c for c in train_df.columns if c not in ['ID_code', 'target']]\nfor feature in features:\n    train_df['r2_'+feature] = np.round(train_df[feature], 2)\n    test_df['r2_'+feature] = np.round(test_df[feature], 2)\n    train_df['r1_'+feature] = np.round(train_df[feature], 1)\n    test_df['r1_'+feature] = np.round(test_df[feature], 1)\n<\/code>","eee9807c":"Let's look to the top most correlated features, besides the same feature pairs.","08d64e58":"Let's check now the distribution of max values per rows for train and test set.","720cf5d0":"Let's show the top 15 max of duplicate values per train set.","fde943b9":"Let's see now the distribution of kurtosis on rows in train separated for values of target 0 and 1.","088efb04":"Let's check now the distribution of the mean value per column in the train dataset, grouped by value of target.","ece17172":"Let's show the distribution of new features values for train and test.","dfeb323e":"We show here the distribution of min values per columns in train set.","9759929a":"Let's see first the distribution of kurtosis calculated per columns in train and test sets.","ff28d310":"There are no missing data in train and test datasets. Let's check the numerical values in train and test dataset.","f7dcfae1":"Let's check the distribution of the standard deviation of values per columns in the train and test datasets.","cc22a10f":"# <a id='4'>Feature engineering<\/a>  \n\nThis section is under construction.  \n\nLet's calculate for starting few aggregated values for the existing features.","26a064b0":"Let's check how many features we have now.","3414bd52":"Train contains:  \n\n* **ID_code** (string);  \n* **target**;  \n* **200** numerical variables, named from **var_0** to **var_199**;\n\nTest contains:  \n\n* **ID_code** (string);  \n* **200** numerical variables, named from **var_0** to **var_199**;\n\n\nLet's check if there are any missing data. We will also chech the type of data.\n\nWe check first train.","2054861d":"Let's see now the distribution of skewness on columns in train separated for values of target 0 and 1.","37b9af34":"# <a id='5'>Model<\/a>  \n\nFrom the train columns list, we drop the ID and target to form the features list.","0c16dc22":"## Load data   \n\nLet's check what data files are available.","963449ae":"We add rounded features.  \n**Note**: this is a work in progress, some of the features added here will be later dropped.","f3d5b4bf":"Let's see now the distribution of skewness on rows in train separated for values of target 0 and 1.","a567a6bf":"# <a id='6'>Submission<\/a>  \n\nWe submit the solution.","e97aa223":"## <a id='36'>Features correlation<\/a>  \n\nWe calculate now the correlations between the features in train set.  \nThe following table shows the first 10 the least correlated features.","01b556ff":"# <a id='2'>Prepare for data analysis<\/a>  \n\n\n## Load packages\n","6c1b1616":"# <a id='1'>Introduction<\/a>  \n\nIn this challenge, Santander invites Kagglers to help them identify which customers will make a specific transaction in the future, irrespective of the amount of money transacted. The data provided for this competition has the same structure as the real data they have available to solve this problem.  \n\nThe data is anonimyzed, each row containing 200 numerical values identified just with a number.  \n\nIn the following we will explore the data, prepare it for a model, train a model and predict the target value for the test set, then prepare a submission.\n\nStay tuned, I will frequently update this Kernel in the next days.\n\n","d5286501":"# <a id='7'>References<\/a>    \n\n[1] https:\/\/www.kaggle.com\/gpreda\/elo-world-high-score-without-blending  \n[2] https:\/\/www.kaggle.com\/chocozzz\/santander-lightgbm-baseline-lb-0-897  \n[3] https:\/\/www.kaggle.com\/brandenkmurray\/nothing-works\n\n","9638042e":"Let's show now the max distribution on columns for train and test set.","e10869c2":"# <a id='3'>Data exploration<\/a>  \n\n## <a id='31'>Check the data<\/a>  \n\nLet's check the train and test set.","8f6ca8ed":"Let's see now what is the distribution of kurtosis values per rows and columns.\n\nLet's see first the distribution of kurtosis calculated per rows in train and test sets.","8445285d":"The train and test seems to be well ballanced with respect with distribution of the numeric variables.  \n\n## <a id='33'>Distribution of mean and std<\/a>  \n\nLet's check the distribution of the mean values per row in the train and test set."}}