{"cell_type":{"4094b205":"code","7b3cb819":"code","f2a545dc":"code","75b006c7":"code","8f10b8b9":"code","9b3f004c":"code","be07224b":"code","a6aa0992":"code","e25d7805":"code","1a0d4e61":"code","4aabfdd6":"code","62daf7bd":"code","efd706dc":"code","a5a243eb":"code","f24ae6c9":"code","d5435821":"code","d47e12b3":"code","ac03ea8a":"code","e09063c7":"code","ac1645cb":"code","636fba51":"code","c5a9ded9":"code","9959e7e7":"code","a8601445":"code","ac00dcd6":"code","e5925fd6":"code","b0c8934a":"code","5db40e75":"code","dfd5e531":"code","ea9e5f3e":"code","4e06e539":"code","d4e8de1c":"code","f3c8bb4b":"code","eebbc78f":"code","d2b0e605":"code","1525e31e":"code","6247407e":"code","9ca06306":"code","ea303850":"code","b69066eb":"code","7f41b148":"code","07ff104c":"code","8add6861":"code","7f7140b3":"code","6e58a564":"code","f9d751f3":"code","eaa2e6cd":"code","3e3ad69d":"code","e8d7fb32":"code","264a9ab7":"code","8b469fe9":"code","5cf4ed7e":"code","7dd2cd42":"code","811b8b67":"code","61d04cdd":"code","aedc64a3":"code","c1b16ea2":"code","6dfde5f0":"code","87f67d2b":"code","bb969a13":"code","ca16f40f":"code","ee1cf6dc":"code","fc515092":"code","13c86873":"code","46c7eb3e":"code","0b0f8975":"code","c3c81554":"code","3d047b15":"code","fe6938b5":"code","24b703f9":"code","5aecca07":"code","9bfee6d3":"code","7d56a20d":"code","86a94b3b":"code","94e30b4b":"code","e2f91882":"code","9c2e924a":"code","4905d368":"code","b9cbac09":"code","26dc53d1":"code","328d03fb":"code","1286f0c5":"markdown","3e959321":"markdown","1319f4ab":"markdown","9392fb8c":"markdown","ac7c17ad":"markdown","f7001c6b":"markdown","2749b983":"markdown","ae485e6b":"markdown","2efd6245":"markdown","e501b54e":"markdown","90218d30":"markdown","8ccf98e7":"markdown","9c2a4e3e":"markdown","fd747011":"markdown","9a80322e":"markdown","9d67009a":"markdown","a9ca8359":"markdown"},"source":{"4094b205":"#importing all the required libraries for data manipulation and analysis\n!pip install xlrd\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","7b3cb819":"sales_data = pd.read_excel(\"..\/input\/global-superstore\/Global Superstore.xls\")","f2a545dc":"sales_data.to_csv(\"Global_Superstore.csv\", index = None, header = True) #converting excel to csv\ndf = pd.DataFrame(pd.read_csv(\"Global_Superstore.csv\"))","75b006c7":"df.head()","8f10b8b9":"# df.shape\nprint(\"This dataset has\\nColumns: {}\\nRows: {}\".format(df.shape[0],df.shape[1]))","9b3f004c":"df.columns","be07224b":"df.info()","a6aa0992":"df.describe()","e25d7805":"df.isnull()","1a0d4e61":"print(df.isnull().sum())\nprint(\"------------------------\")\nprint(\"Total             {}\".format(df.isnull().sum().sum()))","4aabfdd6":"sales_data = df.dropna(axis=1)","62daf7bd":"print(sales_data.isnull().sum())\nprint(\"------------------------\")\nprint(\"Total             {}\".format(sales_data.isnull().sum().sum()))","efd706dc":"#checking if dataset has any duplicate rows\nsales_data.duplicated().sum()","a5a243eb":"#converting the Dates in proper datetime format\nsales_data['Order Date'] = pd.to_datetime(sales_data['Order Date'], errors = 'coerce')\nsales_data['Ship Date'] = pd.to_datetime(sales_data['Ship Date'], errors = 'coerce')","f24ae6c9":"sales_data.info()","d5435821":"sales_data['Year'] = sales_data['Order Date'].dt.year #extracting the order year from orderdate column\nsales_data['Month'] = sales_data['Order Date'].dt.month  #extracting the order month from orderdate column\nsales_data['Day'] = sales_data['Order Date'].dt.day   #extracting the order day from orderdate column\nsales_data[\"Month_year\"] = sales_data['Order Date'].apply(lambda x: x.strftime('%Y-%m'))","d47e12b3":"sales_data.info()","ac03ea8a":"#exporting the cleaned data into a csv file so we can perform operations on that\nsales_data.to_csv(\"GlobalSuperstore_Cleaned.csv\")","e09063c7":"sales_data.columns","ac1645cb":"sales_data[\"Country\"].unique()","636fba51":"print(\"Global Supermarket has its reach over {} countries\".format(sales_data[\"Country\"].nunique()))","c5a9ded9":"sales_data[\"Category\"].unique()","9959e7e7":"sales_data[\"Sub-Category\"].unique()","a8601445":"plt.figure(figsize=(16,8))\nplt.bar('Sub-Category','Category',data=sales_data,color='r')\nplt.xticks(rotation=60)\nplt.show()","ac00dcd6":"plt.figure(figsize=(10,15))\nsales_data['Sub-Category'].value_counts().plot.pie(autopct = \"%1.1f%%\")\nplt.show()","e5925fd6":"group_by_sub_category = sales_data.groupby(\"Sub-Category\")\ngroup_by_sub_category.first()","b0c8934a":"profit = sales_data.groupby(\"Sub-Category\")['Profit']\nprofit.first()","5db40e75":"sales = sales_data.groupby(\"Sub-Category\")['Sales']\nsales.first()","dfd5e531":"profit_sales = sales_data.groupby(\"Sub-Category\")['Profit','Sales']\nprofit_sales.first()","ea9e5f3e":"profit_sales = sales_data.groupby(\"Sub-Category\")['Profit','Sales']\nprofit_sales.sum()","4e06e539":"plt.figure(figsize=(10,15))\nprofit_sales.agg(['sum']).plot.bar()\nplt.title('Total Profit and Sales per Sub-Category')\nplt.show()","d4e8de1c":"sales_data.columns","f3c8bb4b":"yearly_sale = sales_data.groupby('Year')['Sales']\nyearly_sale.sum()","eebbc78f":"plt.figure(figsize=(12, 8))\nyearly_sale.agg(['sum']).plot.bar()\nplt.show()","d2b0e605":"sales_data['Product Name'].nunique()","1525e31e":"data = sales_data.copy()","6247407e":"group_by_sub_category = data.groupby(\"Sub-Category\")","9ca06306":"profit = data.groupby(\"Sub-Category\")['Profit']\nprofit.first()","ea303850":"sales = data.groupby(\"Sub-Category\")['Sales']\nsales.first()","b69066eb":"profit_sales = data.groupby(\"Sub-Category\")['Profit','Sales']\nprofit_sales.first()","7f41b148":"profit_sales = data.groupby(\"Sub-Category\")['Profit','Sales']\nprofit_sales.sum()","07ff104c":"plt.figure(figsize=(15,8))\nprofit_sales.agg(['sum']).plot.bar()\nplt.title('Total Profit and Sales per Sub-Category')\nplt.ylabel('Sales\/Profit')\nplt.show()","8add6861":"profit_sales_year = data.groupby([\"Sub-Category\",'Year'])['Profit','Sales']\nprofit_sales_year.sum()","7f7140b3":"popular_subcategory = data[['Sub-Category', 'City', 'Quantity']].groupby(['Sub-Category', 'City', 'Quantity']).sum()\npopular_subcategory","6e58a564":"data.groupby([\"Sub-Category\",\"City\"])['City'].count().sort_values().groupby(level=0).tail(1)","f9d751f3":"highest_category_profit = data.groupby(by=['Category']).sum().sort_values(by=['Profit']).reset_index()\nhighest_category_profit","eaa2e6cd":"plt.figure(figsize=(12,8))\nplt.bar(\"Category\",'Profit',data=highest_category_profit)\nplt.show()","3e3ad69d":"highest_subcategory_profit = data[['Sub-Category', 'Profit']].groupby(['Sub-Category']).sum().reset_index()\nplt.figure(figsize=(16, 8))\nplt.bar('Sub-Category', 'Profit', data = highest_subcategory_profit)\nplt.xticks(rotation='vertical', size=12)\nplt.show()","e8d7fb32":"sub_category_sale_distribution_accross_year = pd.pivot_table(data = data, values = \"Sales\", index = [\"Sub-Category\", \"Year\"], columns = \"Month\")\nsub_category_sale_distribution_accross_year.style.background_gradient(cmap = 'Reds')","264a9ab7":"df = pd.read_csv(\".\/GlobalSuperstore_Cleaned.csv\")","8b469fe9":"df['Order Date'].min()","5cf4ed7e":"df['Order Date'].max()","7dd2cd42":"#grouping the data according to the month and year\ndf_month_year = df.groupby('Month_year').sum()['Sales'].reset_index()\ndf_month_year","811b8b67":"#visualizing the monthly trend\nplt.figure(figsize=(12, 8))\nplt.plot(df_month_year['Month_year'], df_month_year['Sales'])\nplt.xticks(rotation='vertical')\nplt.show()","61d04cdd":"df1 = df.groupby('Order Date').sum()['Sales'].reset_index()\ndf1","aedc64a3":"df1.info()","c1b16ea2":"#converting the date column into standard datetime pattern\nimport datetime as dt\ndf1['Order Date'] = pd.to_datetime(df1['Order Date'], errors = 'coerce')\ndf1 = df1[df1['Order Date'].dt.year == 2011]\ndf1","6dfde5f0":"#sales trend for the year 2011\nplt.figure(figsize=(12, 8))\nplt.plot(df1['Order Date'], df1['Sales'])\nplt.xticks(rotation='vertical')\nplt.show()","87f67d2b":"df_final= df.groupby('Order Date').sum()['Sales'].reset_index()\ndf_final.info()","bb969a13":"#scaling the data to the range of -1 to 1\n#it reduces the errors and fits to the model prefectly\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler(feature_range=(0,1))\ndf_final= scaler.fit_transform(np.array(df_final['Sales']).reshape(-1, 1))","ca16f40f":"df_final","ee1cf6dc":"import matplotlib.pyplot as plt\nplt.plot(df_final)","fc515092":"#splitting the data into training and test data set\ntraining_size = int(len(df_final)*0.75)\ntest_size = len(df_final)-training_size\n\ntrain_data = df_final[0:training_size, :]\ntest_data = df_final[training_size:len(df_final), :1]","13c86873":"training_size, test_size","46c7eb3e":"def create_dataset(dataset, time_step=1):\n    data_x, data_y = [], []\n    for i in range(len(dataset)-time_step-1):\n        a = dataset[i:(i+time_step), 0] #converting the data into a matrix for fast computation\n        data_x.append(a)\n        data_y.append(dataset[i + time_step, 0])\n    return np.array(data_x), np.array(data_y) #numpy array for training and test columns","0b0f8975":"#creating the dataset with timestep of 10\ntime_step = 10\nx_train, y_train = create_dataset(train_data, time_step)\nx_test, y_test = create_dataset(test_data, time_step)","c3c81554":"print(x_train)","3d047b15":"print(x_train.shape)\nprint(y_train.shape)\nprint(x_test.shape)\nprint(y_test.shape)","fe6938b5":"#reshaping the x_train and x_test which is required for our LSTM....samples, timesteps and features\nx_train = x_train.reshape(x_train.shape[0], x_train.shape[1], 1)\nx_test = x_test.reshape(x_test.shape[0], x_test.shape[1], 1)","24b703f9":"#Creating the LSTM model\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import LSTM","5aecca07":"n_steps = 10\nn_features = 1\n#the sequential function processess the data as a stream of sequential integers\nmodel = Sequential()\n#defining the model\nmodel.add(LSTM(50, return_sequences=True, input_shape=(n_steps, n_features)))\nmodel.add(LSTM(50, return_sequences=True))\nmodel.add(LSTM(50))\nmodel.add(Dense(1))\nmodel.compile(optimizer='adam', loss='mse' )","9bfee6d3":"model.summary()","7d56a20d":"model.fit(x_train, y_train, validation_data=(x_test, y_test), epochs=100, batch_size=64, verbose=1)","86a94b3b":"import tensorflow as tf","94e30b4b":"#lets perform the predictions and check performance metrices\ntrain_predict = model.predict(x_train)\ntest_predict = model.predict(x_test)","e2f91882":"#transform them back to theiroriginal form\ntrain_predict = scaler.inverse_transform(train_predict)\ntest_predict = scaler.inverse_transform(test_predict)","9c2e924a":"#calculating RMSE performance metrices\nimport math\nfrom sklearn.metrics import mean_squared_error\nmath.sqrt(mean_squared_error(y_train, train_predict))","4905d368":"#calculating rmse for test data\nmath.sqrt(mean_squared_error(y_test, test_predict))","b9cbac09":"#plotting the prediction\nlook_back = 10\ntrain_plot = np.empty_like(df_final)\ntrain_plot[:, :] = np.nan\n#lookback for better prediction\ntrain_plot[look_back: len(train_predict)+ look_back, :] = train_predict","26dc53d1":"#shifting test predictions for plotting\ntest_plot = np.empty_like(df_final)\ntest_plot[:, :] = np.nan\ntest_plot[len(train_predict)+(look_back*2)+1:len(df_final)-1, :] = test_predict","328d03fb":"#plotting baseline and predictions\nplt.plot(scaler.inverse_transform(df_final))\n#baseline in blue\nplt.plot(train_plot)\nplt.plot(test_plot)\nplt.show()","1286f0c5":"### Which sub-category is most popular in which city?","3e959321":"### Category and sub-category distribution","1319f4ab":"## Sales_Prediction_Machine_Learning","9392fb8c":"## Data Exploring","ac7c17ad":"Here we can see, there is fluctuation of sales trend throughout the year, but overall the sales are increasing","f7001c6b":"From the pie-chart we can infer that, Sales of Binders is the most and Sales of Tables is the least in th Global Superstore.","2749b983":"## Importing Required Libraries","ae485e6b":"### Which Category and Sub-Category gives us the highest profit?","2efd6245":"## Exploring the Dataset","e501b54e":"From the above bar-graph, we can conclude that Sub-Category 'Copiers' gives us the highest profit.","90218d30":"### Plotting sales vs profit graph for each subcategory","8ccf98e7":"## Applying LSTM for Sales Prediction","9c2a4e3e":"## Demonstrating prediction\n\n","fd747011":"## Analysis Based on Category","9a80322e":"## Converting .xls to CSV","9d67009a":"## Data Cleaning","a9ca8359":"### Creating an LSTM Model"}}