{"cell_type":{"3ffd2662":"code","338a07d6":"code","8c9d063b":"code","4037ed32":"code","f6eeebbe":"code","8e375a29":"code","70e9ce21":"code","40843089":"markdown","c876a125":"markdown","77084f8d":"markdown"},"source":{"3ffd2662":"from requests import get\nfrom bs4 import BeautifulSoup\nfrom datetime import datetime","338a07d6":"def getMovieForYear(year = 2019):\n    \"\"\"\n    Scrape movies for a given year\n    Parse the page using beautifulsoup and call getMovieForQuarter() with data for each quarter, \n    Merge the output and returns final whole year data.\n    \"\"\"\n    url = 'https:\/\/en.wikipedia.org\/wiki\/List_of_Bollywood_films_of_{}'.format(year)\n    print(\"parsing {}\".format(url))\n    response = get(url)\n    html_soup = BeautifulSoup(response.text, 'html.parser')\n    movie_containers = html_soup.find_all('tbody')\n    moviesList=[]\n    for movie_container in movie_containers:\n        try:\n            moviesList.append(getMovieForQuarter(movie_container))\n            \n        except:\n            pass\n    if len(moviesList)>0: \n        moviesDF = pd.concat(moviesList)\n        return moviesDF\n    else:\n        return None","8c9d063b":"def getMovieForQuarter(container):\n    \"\"\"\n    Scrape movies information for given data for a quarter and return a pandas dataframe\n    \"\"\"\n    dataList = []\n    for movies in container:\n        if movies.find('td'):\n            #print(\"START\")\n            #print(movies)\n            #print(\"END\")\n\n            try:\n                data = {}\n                counter=0\n                #style=\"text-align:center;background:#f1daf1;\" day\n                #style=\"text-align:center; background:plum; textcolor:#000; month\n                for cols in movies.find_all('td'):\n                    counter+=1\n                    if counter not in data:data[counter]=[]\n                    if cols.find('ul') is not None:\n                        for values in cols.ul:\n                            #print(counter, values.text)\n                            data[counter].append(values.text.strip())\n                    else:\n                        #print(counter, cols.text)\n                        data[counter].append(cols.text.strip())\n                start=1\n                if len(data)==7:\n                    month=data[start]\n                    day=data[start+1]\n                    start+=2\n                elif len(data)==6:\n                    day=data[start]\n                    start+=1\n                #print(start)\n                dataDict  = {'month':month[0],\n                               'date':day[0],\n                                'title':data[start][0],\n                                'director':data[start+1][0],\n                                'cast':';'.join(data[start+2]),\n                                'production':data[start+3][0],\n                                 'len': len(data)\n                                }\n                #print(data)\n                dataList.append(dataDict)\n            except Exception as e: \n                print(\"Err\",e)\n    #del month, day\n    \n    moviesDF = pd.DataFrame(dataList)\n    moviesDF['release_date']= moviesDF.apply(lambda x:datetime.strptime('{} {} {}'.format(x['date'].zfill(2), x['month'],year), '%d %b %Y'),axis=1)\n    moviesDF.drop(columns=['month','date'],inplace=True)\n    #moviesDF.head()\n    return moviesDF","4037ed32":"for year in range(2019,2012,-1):\n    print(year)\n    movies_out = getMovieForYear(year=year)\n    print(movies_out.head())\n    if movies_out is not None: \n        print(movies_out.shape)\n        movies_out['release_date'].hist()","f6eeebbe":"getMovieForYear(year=2020)","8e375a29":"debugging = \"\"\"\n    year = 2012\n    url = 'https:\/\/en.wikipedia.org\/wiki\/List_of_Bollywood_films_of_{}'.format(year)\n    print(\"parsing {}\".format(url))\n    response = get(url)\n    html_soup = BeautifulSoup(response.text, 'html.parser')\n    movie_containers = html_soup.find_all('tbody')\n    print(movie_containers[3])\n    \"\"\"","70e9ce21":"#debugging\nx = \"\"\"\n    container = movie_containers[3]\n    dataList = []\n    for movies in container:\n        if movies.find('td'):\n            #print(\"START\")\n            #print(movies)\n            #print(\"END\")\n\n            try:\n                data = {}\n                counter=0\n                #style=\"text-align:center;background:#f1daf1;\" day\n                #style=\"text-align:center; background:plum; textcolor:#000; month\n                for cols in movies.find_all('td'):\n                    counter+=1\n                    if counter not in data:data[counter]=[]\n                    if cols.find('ul') is not None:\n                        for values in cols.ul:\n                            #print(counter, values.text)\n                            data[counter].append(values.text.strip())\n                    else:\n                        #print(counter, cols.text)\n                        data[counter].append(cols.text.strip())\n                start=1\n                if len(data)==7:\n                    month=data[start]\n                    day=data[start+1]\n                    start+=2\n                elif len(data)==6:\n                    day=data[start]\n                    start+=1\n                #print(start)\n                dataDict  = {'month':month[0],\n                               'date':day[0],\n                                'title':data[start][0],\n                                'director':data[start+1][0],\n                                'cast':';'.join(data[start+2]),\n                                'production':data[start+3][0],\n                                 'len': len(data)\n                                }\n                #print(data)\n                dataList.append(dataDict)\n            except Exception as e: \n                pass #print(\"Err\",e)\n    #del month, day\n    \n    moviesDF = pd.DataFrame(dataList)\n    print(moviesDF.head())\n    moviesDF['release_date']= moviesDF.apply(lambda x:datetime.strptime('{} {} {}'.format(x['date'].zfill(2), x['month'],year), '%d %b %Y'),axis=1)\n    moviesDF.drop(columns=['month','date'],inplace=True)\n    moviesDF.head()\n    print(moviesDF.shape)\n    #return moviesDF\n\"\"\"","40843089":"### Running for various years from 2012 to 2019(in reverse order)","c876a125":"### This notebook tries to scrape data from various years bollywood films using [wikipedia](https:\/\/en.wikipedia.org\/wiki\/List_of_Bollywood_films_of_2019) articles","77084f8d":"In wikipedia, Movies are arranged like this:\n- One page contains movies for a given year, all movies information is provided into a table form\n- In each page, the table is divided into quarters\n- Parsing date is a bit trciky, we need to get the month and then date and combine them to get correct date.\n"}}