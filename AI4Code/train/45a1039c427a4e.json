{"cell_type":{"0f7950c8":"code","18293c3a":"code","f660f704":"code","d01637ed":"markdown","08b7b405":"markdown"},"source":{"0f7950c8":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import accuracy_score,f1_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom statistics import mean, stdev\n\n\n\ndef preprocessData(data,name):\n    # dropping unnecessary columns\n    data=data.drop(columns=['Loan_ID'])\n    # Imputation of missing values for test data\n    data[\"Gender\"].fillna(data[\"Gender\"].mode()[0],inplace=True)\n    data[\"Married\"].fillna(data[\"Married\"].mode()[0],inplace=True)\n    data['Dependents'].fillna(data[\"Dependents\"].mode()[0],inplace=True)\n    data[\"Self_Employed\"].fillna(data[\"Self_Employed\"].mode()[0],inplace=True)\n    data[\"Credit_History\"].fillna(data[\"Credit_History\"].mode()[0],inplace=True)\n    data[\"Loan_Amount_Term\"].fillna(data[\"Loan_Amount_Term\"].mode()[0],inplace=True)\n    data[\"LoanAmount\"].fillna(data[\"LoanAmount\"].median(),inplace=True)\n    #New feature derivation\n    data[\"Total_Income\"]=(data[\"ApplicantIncome\"]+data[\"CoapplicantIncome\"])\n    data[\"Income_Loan_Amount_Ratio\"]=data[\"Total_Income\"]\/data[\"LoanAmount\"]\n#     #Encoding\n#     df_name=name+\"_encoded\"\n#     df_name = pd.get_dummies(data,drop_first=True)\n    return data\n\ndef selectFeatures(df,features):\n    return df[features]\n\ndef encodeFeatures(data):\n    return pd.get_dummies(data,drop_first=True)\n\ndef splitTrainData(df_name):\n    ########## Split Features and Target Varible ############\n    X = df_name.drop(columns='Loan_Status_Y')\n    y = df_name[['Loan_Status_Y']]\n\n    ################# Splitting into Train -Test Data #######\n    X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,stratify =y,random_state =42)\n    return X_train,X_test,y_train,y_test\n\ndef runModel(model,X_train,X_test,y_train,y_test):\n    model.fit(X_train,y_train)\n    prediction_result=model.predict(X_test)\n    score =accuracy_score(prediction_result,y_test)*100 \n    print(str(model)+\" Accuracy: \", score)\n\n# reading data\ntrain = pd.read_csv(\"..\/input\/loan-prediction-data\/train.csv\")\ntest = pd.read_csv(\"..\/input\/loan-prediction-data\/test.csv\")\n\n#Data preprocessing\ntrain_preprocessed=preprocessData(train,\"train\")\ntest_preprocessed=preprocessData(test,\"test\")\n\n#Selecting features\n# features= ['Gender', 'Married', 'Dependents', 'Education', 'Self_Employed',\n#            'ApplicantIncome', 'CoapplicantIncome', 'LoanAmount', 'Loan_Amount_Term',\n#            'Credit_History','Property_Area','Income_Loan_Amount_Ratio','Total_Income']\nfeatures= [ 'Gender', 'Married', 'Dependents', 'Education', 'Self_Employed',\n           'ApplicantIncome', 'CoapplicantIncome', 'LoanAmount', 'Loan_Amount_Term',\n           'Credit_History','Property_Area','Income_Loan_Amount_Ratio','Total_Income']\ntarget_variable=['Loan_Status']\ntarget_variable.extend(features)\ntrain_selected=selectFeatures(train_preprocessed,target_variable)\ntest_selected=selectFeatures(test_preprocessed,features)\n\n#Feature encoding\ntrain_encoded=encodeFeatures(train_selected)\ntest_encoded=encodeFeatures(test_selected)\n","18293c3a":"#running models\n\n#A. Running models without k-fold validation\n#Splitting train data\nX_train,X_test,y_train,y_test=splitTrainData(train_encoded)\n\nLR_model = LogisticRegression(random_state=1)\nDT_model = DecisionTreeClassifier(random_state=1)\nRF_model = RandomForestClassifier(random_state=1,max_depth=10,n_estimators=50)\nknn_model = KNeighborsClassifier(n_neighbors=3)\nNB_model = GaussianNB()\nmodel_list = [LR_model,DT_model,RF_model,knn_model,NB_model]\nfor model in model_list:\n    runModel(model,X_train,X_test,y_train,y_test)","f660f704":"#B. Run models with stratified k-fold validation\n# Create StratifiedKFold object. \nskf = StratifiedKFold(n_splits=10, shuffle=True, random_state=42) \nlst_accu_stratified = []\n\n#Drop target variable\nX = train_encoded.drop(columns='Loan_Status_Y')\ny = train_encoded[['Loan_Status_Y']]\n    \nLR_model = LogisticRegression(random_state=1)\nDT_model = DecisionTreeClassifier(random_state=1)\nRF_model = RandomForestClassifier(random_state=1,max_depth=10,n_estimators=50)\nknn_model = KNeighborsClassifier(n_neighbors=3)\nNB_model = GaussianNB()\nmodel_list = [LR_model,DT_model,RF_model,knn_model,NB_model]\n\nfor model in model_list: \n    for train_index, test_index in skf.split(X, y): \n        X_train_fold, X_test_fold = X.loc[train_index], X.loc[test_index] \n        y_train_fold, y_test_fold = y.loc[train_index], y.loc[test_index] \n        model.fit(X_train_fold, y_train_fold)\n    #     lst_accu_stratified.append(model.score(X_test_fold, y_test_fold)) \n        prediction_result=model.predict(X_test_fold)\n        lst_accu_stratified.append(accuracy_score(prediction_result,y_test_fold)*100)\n    print(str(model)+\" Overall Accuracy:\", mean(lst_accu_stratified), '%')  ","d01637ed":"# Running models without k-fold cross validation","08b7b405":"# Running models with k-fold cross validation"}}