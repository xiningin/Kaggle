{"cell_type":{"28bfaf40":"code","6c4f7aeb":"code","228b6a62":"code","4e0874ed":"code","ed5f12ff":"code","6f2ebb61":"code","a06dee9f":"code","62c744a1":"code","353884a6":"code","8f3f21d8":"code","85083884":"code","e4e58aab":"code","d7501bfc":"code","5e75b913":"code","adb2fc4b":"code","e63ce552":"code","649244b8":"code","cabf0aa2":"code","d56c6b67":"code","45ed020d":"code","58ec7379":"code","04776242":"code","f2538b6c":"code","06fd6775":"code","faf41c34":"code","8ec028df":"code","4079fe61":"code","fc081223":"code","f9af54cd":"code","0460945d":"code","8dbb9f07":"code","9c946c20":"code","589227b2":"code","0eab85e5":"code","75a98fd0":"code","2c22a88e":"code","4eeca09b":"code","831141f4":"code","dec71872":"code","bb873974":"code","553cf9ab":"code","b136c40d":"code","c89213ce":"code","23e3c11a":"code","09ff7ff1":"code","c9cda2d7":"code","2c80ae14":"code","3f973c06":"code","76a9dd53":"code","60c6a8d1":"code","0e21175e":"markdown","00adc20a":"markdown","fca98b7a":"markdown","8ce5ba12":"markdown","65b6b456":"markdown","2e86d151":"markdown","240909ef":"markdown","424381cc":"markdown","86c79e44":"markdown","bb73915b":"markdown","f87ad449":"markdown","2798bf05":"markdown","cd796dc6":"markdown","3e4dfb50":"markdown","e6a7b4c2":"markdown","969802d6":"markdown","8be76794":"markdown","e0f601e9":"markdown","a5f77dd4":"markdown","c47c4700":"markdown","0fd9b5ce":"markdown"},"source":{"28bfaf40":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n!pip install pywaffle --quiet\nfrom pywaffle import Waffle\nfrom wordcloud import WordCloud","6c4f7aeb":"df= pd.read_csv(\"..\/input\/nyc-property-sales\/nyc-rolling-sales.csv\")","228b6a62":"df","4e0874ed":"df.iloc[:8,:10]","ed5f12ff":"df.iloc[:8,10:20]","6f2ebb61":"df.info()","a06dee9f":"#SALE PRICE is object but should be numeric\ndf['SALE PRICE'] = pd.to_numeric(df['SALE PRICE'], errors='coerce')\n\n#LAND and GROSS SQUARE FEET is object but should be numeric\ndf['LAND SQUARE FEET'] = pd.to_numeric(df['LAND SQUARE FEET'], errors='coerce')\ndf['GROSS SQUARE FEET']= pd.to_numeric(df['GROSS SQUARE FEET'], errors='coerce')\n\n#SALE DATE is object but should be datetime\ndf['SALE DATE'] = pd.to_datetime(df['SALE DATE'], errors='coerce')\n\n#Both TAX CLASS attributes should be categorical\ndf['TAX CLASS AT TIME OF SALE'] = df['TAX CLASS AT TIME OF SALE'].astype('category')\ndf['TAX CLASS AT PRESENT'] = df['TAX CLASS AT PRESENT'].astype('category')","62c744a1":"#Set the size of the plot\nplt.figure(figsize=(15,6))\n\n# Plot the data and configure the settings\nsns.boxplot(x='SALE PRICE', data=df)\nplt.ticklabel_format(style='plain', axis='x')\nplt.title('Boxplot of SALE PRICE in USD')\nplt.show()","353884a6":"# Remove observations with missing SALE PRICE\ndf = df[df['SALE PRICE'].notnull()]\nlen(df)","8f3f21d8":"# Removes all NULL values\ndf = df[df['LAND SQUARE FEET'].notnull()] \ndf = df[df['GROSS SQUARE FEET'].notnull()] ","85083884":"#Set the size of the plot\nplt.figure(figsize=(15,6))\n\n#Get the data and format it\nx = df[['SALE PRICE']].sort_values(by='SALE PRICE').reset_index()\nx['PROPERTY PROPORTION'] = 1\nx['PROPERTY PROPORTION'] = x['PROPERTY PROPORTION'].cumsum()\nx['PROPERTY PROPORTION'] = 100* x['PROPERTY PROPORTION'] \/ len(x['PROPERTY PROPORTION'])\n\n# Plot the data and configure the settings\nplt.plot(x['PROPERTY PROPORTION'],x['SALE PRICE'], linestyle='None', marker='o')\nplt.title('Cumulative Distribution of Properties according to Price')\nplt.xlabel('Percentage of Properties in ascending order of Price')\nplt.ylabel('Sale Price')\nplt.ticklabel_format(style='plain', axis='y')\nplt.show()","e4e58aab":"# Remove observations that fall outside those caps\ndf = df[(df['SALE PRICE'] > 100000) & (df['SALE PRICE'] < 5000000)]","d7501bfc":"#Set the size of the plot\nplt.figure(figsize=(15,6))\n\n#Get the data and format it\nx = df[['SALE PRICE']].sort_values(by='SALE PRICE').reset_index()\nx['PROPERTY PROPORTION'] = 1\nx['PROPERTY PROPORTION'] = x['PROPERTY PROPORTION'].cumsum()\nx['PROPERTY PROPORTION'] = 100* x['PROPERTY PROPORTION'] \/ len(x['PROPERTY PROPORTION'])\n\n# Plot the data and configure the settings\nplt.plot(x['PROPERTY PROPORTION'],x['SALE PRICE'], linestyle='None', marker='o')\nplt.title('Cumulative Distribution of Properties according to Price')\nplt.xlabel('Percentage of Properties in ascending order of Price')\nplt.ylabel('Sale Price')\nplt.ticklabel_format(style='plain', axis='y')\nplt.show()","5e75b913":"#Set the size of the plot\nplt.figure(figsize=(15,6))\n\n# Plot the data and configure the settings\nsns.boxplot(x='SALE PRICE', data=df)\nplt.ticklabel_format(style='plain', axis='x')\nplt.title('Boxplot of SALE PRICE in USD')\nplt.show()","adb2fc4b":"#Set the size of the plot\nplt.figure(figsize=(15,6))\n\n# Plot the data and configure the settings\nsns.distplot(df['SALE PRICE'])\nplt.title('Histogram of SALE PRICE in USD')\nplt.ylabel('Normed Frequency')\nplt.show()","e63ce552":"sales=np.log(df['SALE PRICE'])\nprint(sales.skew())\nsns.distplot(sales)","649244b8":"plt.figure(figsize=(10,6))\nsns.regplot(x='GROSS SQUARE FEET', y='SALE PRICE', data=df, fit_reg=False, scatter_kws={'alpha':0.3})\nplt.title('Gross Square Feet vs Sale Price')\nplt.show()","cabf0aa2":"plt.figure(figsize=(10,6))\nsns.regplot(x='LAND SQUARE FEET', y='SALE PRICE', data=df, fit_reg=False, scatter_kws={'alpha':0.3})\nplt.title('Land Square Feet vs Sale Price')\nplt.show()","d56c6b67":"# Keeps properties with fewer than 20,000 Square Feet, which is about 2,000 Square Metres\ndf = df[df['GROSS SQUARE FEET'] < 20000]\ndf = df[df['LAND SQUARE FEET'] < 20000]","45ed020d":"plt.figure(figsize=(10,6))\nsns.regplot(x='GROSS SQUARE FEET', y='SALE PRICE', data=df, fit_reg=False, scatter_kws={'alpha':0.3})\nplt.title('Gross Square Feet vs Sale Price')\nplt.show()","58ec7379":"plt.figure(figsize=(10,6))\nsns.regplot(x='LAND SQUARE FEET', y='SALE PRICE', data=df, fit_reg=False, scatter_kws={'alpha':0.3})\nplt.title('Land Square Feet vs Sale Price')\nplt.show()","04776242":"#Dropping column as it is empty\ndel df['EASE-MENT']\n#Dropping as it looks like an iterator\ndel df['Unnamed: 0']","f2538b6c":"#Checking for duplicated entries\nsum(df.duplicated(df.columns))","06fd6775":"#Delete the duplicates and check that it worked\ndf = df.drop_duplicates(df.columns, keep='last')\nsum(df.duplicated(df.columns))","faf41c34":"# Only a handful of properties with 0 total units are remaining and they will now be deleted\ndf = df[(df['TOTAL UNITS'] > 0) & (df['TOTAL UNITS'] < 50)]","8ec028df":"#Remove data where commercial + residential doesn't equal total units\ndf = df[df['TOTAL UNITS'] == df['COMMERCIAL UNITS'] + df['RESIDENTIAL UNITS']]","4079fe61":"df[[\"TOTAL UNITS\", \"SALE PRICE\"]].groupby(['TOTAL UNITS'], as_index=False).count().sort_values(by='SALE PRICE', ascending=False)\ndf = df[(df['TOTAL UNITS'] > 0) & (df['TOTAL UNITS'] != 2261)] ","fc081223":"plt.figure(figsize=(10,6))\nsns.boxplot(x='COMMERCIAL UNITS', y='SALE PRICE', data=df)\nplt.title('Commercial Units vs Sale Price')\nplt.show()","f9af54cd":"plt.figure(figsize=(10,6))\nsns.boxplot(x='RESIDENTIAL UNITS', y='SALE PRICE', data=df)\nplt.title('Residential Units vs Sale Price')\nplt.show()","0460945d":"plt.figure(figsize=(10,6))\nsns.boxplot(x='TOTAL UNITS', y='SALE PRICE', data=df)\nplt.title('Total Units vs Sale Price')\nplt.show()","8dbb9f07":"df = df[df['YEAR BUILT'] > 0]","9c946c20":"df.columns[df.isnull().any()]","589227b2":"# Compute the correlation matrix\nd= df[['SALE PRICE', 'TOTAL UNITS','GROSS SQUARE FEET',  'LAND SQUARE FEET', 'RESIDENTIAL UNITS', \n         'COMMERCIAL UNITS', 'BOROUGH', 'BLOCK', 'LOT', 'ZIP CODE', 'YEAR BUILT',]]\ncorr = d.corr()\n\n# Generate a mask for the upper triangle\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, \n            square=True, linewidths=.5, annot=True, cmap=cmap)\nplt.yticks(rotation=0)\nplt.title('Correlation Matrix of all Numerical Variables')\nplt.show()","0eab85e5":"plt.figure(figsize=(10,6))\nsns.boxplot(x='GROSS SQUARE FEET', data=df,showfliers=False)","75a98fd0":"plt.figure(figsize=(10,6))\nsns.boxplot(x='LAND SQUARE FEET', data=df,showfliers=False)\n","2c22a88e":"pivot=df.pivot_table(index='TAX CLASS AT TIME OF SALE', values='SALE PRICE', aggfunc=np.median)\npivot","4eeca09b":"cat=df[[\"TAX CLASS AT TIME OF SALE\", \"SALE PRICE\"]].groupby(['TAX CLASS AT TIME OF SALE'], as_index=False).mean().sort_values(by='SALE PRICE', ascending=False)\nplt.figure(figsize=(20,10))\nsns.barplot(x='TAX CLASS AT TIME OF SALE', y='SALE PRICE', data=cat)","831141f4":"cat=df[[\"BUILDING CLASS CATEGORY\", \"SALE PRICE\"]].groupby(['BUILDING CLASS CATEGORY'], as_index=False).mean().sort_values(by='SALE PRICE', ascending=False)\nplt.figure(figsize=(20,10))\n\nsns.barplot(x='SALE PRICE', y='BUILDING CLASS CATEGORY', data=cat, orient = 'h')","dec71872":"df['SALE DATE'] = pd.to_datetime(df['SALE DATE'])\ndf['SALE DATE'].dtype\ndf['SALE DATE'] = pd.to_datetime(df['SALE DATE'])\ndf['YEAR SOLD'] = (df['SALE DATE']).dt.year\ndf['MONTH SOLD']= (df['SALE DATE']).dt.month\n# del(df[\"SALE DATE\"])","bb873974":"plt.subplots(figsize=(20,8))\nsns.barplot(x='YEAR SOLD', y='SALE PRICE', hue='BOROUGH', data=df, palette='rainbow', ci=None)\nplt.title('Sales per Borough from 2016-2017')","553cf9ab":"plt.subplots(figsize=(20,8))\nsns.boxplot(x='BOROUGH', y='SALE PRICE', data=df)\nplt.title('Sale Price Distribution by Borough')\nplt.show()","b136c40d":"plt.subplots(figsize=(20,8))\nsns.countplot('BOROUGH',data=df,palette='Set2')\nplt.title('Sales per Borough')","c89213ce":"plt.subplots(figsize=(20,8))\nsns.barplot(y='RESIDENTIAL UNITS', x='BOROUGH',data=df, palette='coolwarm', ci=None)\nplt.title('Sales per borough_Residential')","23e3c11a":"plt.subplots(figsize=(20,8))\nsns.barplot(y='COMMERCIAL UNITS', x='BOROUGH',data=df, palette='coolwarm', ci=None)\nplt.title('Sales per borough_Commercial')","09ff7ff1":"plt.figure(figsize=(20,8))\nsns.barplot(x='MONTH SOLD', y='SALE PRICE', hue='BOROUGH', data=df, palette='rainbow', ci=None)\nplt.title('Sales per Borough from 2016-2017')\nplt.legend(loc='right')","c9cda2d7":"plt.figure(figsize=(20,5))\nsns.countplot('MONTH SOLD', hue='YEAR SOLD', data=df, palette='Purples_r')","2c80ae14":"df.columns = [c.replace(' ', '_') for c in df.columns]","3f973c06":"from collections import Counter\nNEIGHBORHOOD = list(dict(Counter(df.NEIGHBORHOOD).most_common(20)).keys())\n\navg_sale_prices = []\nfor i in NEIGHBORHOOD:\n    avg_price = np.mean(df.SALE_PRICE[df.NEIGHBORHOOD == i])\n    avg_sale_prices.append(avg_price)","76a9dd53":"plt.figure(figsize=(20,8))\nsns.barplot(x= avg_sale_prices, y= NEIGHBORHOOD , ci=None)\nplt.title('Average House Price in the top 20 neighborhoods')","60c6a8d1":"plt.subplots(figsize=(25,15))\nwordcloud = WordCloud(\n                          background_color='Black',\n                          width=1920,\n                          height=1080\n                         ).generate(\" \".join(df.NEIGHBORHOOD))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('cast.png')\nplt.show()","0e21175e":"# MANHATTAN WAS EXPENSIVE IN 2016 & 2017 IN BOROUGH.\n**HOWEVER, DIP IN SALES IN 2017. {WHY??}**\n# WHEREAS, BRONX & BROOKLYN SHOWED INCREMENT.  ","00adc20a":"# DATA INSPECTION ","fca98b7a":"# DATA VISUALIZATION","8ce5ba12":"# UGH, OUTLIERS","65b6b456":"# PRICEY BUILDING CLASS ==> 08 RENTALS-ELEVATOR APARTMENTS","2e86d151":"# PROPERTY SALES{2017} ==> January-August, PROPERTY SALES{2016} ==> September-December.","240909ef":"# MISSION ACCOMPLISHED == BOXPLOT CHANGED","424381cc":"# ***THINGS YOU HAVE TO FOLLOW WHILE WALKING THROUGH THE WHOLE REPORT***\n\n1. If you are familiar with python then only follow the code. \n2. The simple explanations about any visual or graph will be there.\n3. There will be a brief conclusion of the report.\n4. Every explanation is presented below the line of code's output.\n\n***Enjoy***","86c79e44":"# Context\n**This dataset is a record of every building or building unit (apartment, etc.) sold in the New York City property market over a 12-month period.**\n\n# Content\n**This dataset contains the location, address, type, sale price, and sale date of building units sold. A reference on the trickier fields:**\n\n1. BOROUGH: A digit code for the borough the property is located in; in order these are Manhattan (1), Bronx (2), Brooklyn (3), Queens (4), and Staten Island (5).\n\n2. BLOCK; LOT: The combination of borough, block, and lot forms a unique key for property in New York City. Commonly called a BBL.\n\n3. BUILDING CLASS AT PRESENT and BUILDING CLASS AT TIME OF SALE: The type of building at various points in time. \n\n**Note that because this is a financial transaction dataset, there are some points that need to be kept in mind:**\n\nMany sales occur with a nonsensically small dollar amount: $0 most commonly. These sales are actually transfers of deeds between parties: for example, parents transferring ownership to their home to a child after moving out for retirement.","bb73915b":"# BOROUGH: Manhattan (1), Bronx (2), Brooklyn (3), Queens (4), and Staten Island (5).","f87ad449":"# PROBLEM SOLVED","2798bf05":"# DATA NORMALIZED == BEAUTIFUL","cd796dc6":"# THERE's ONLY ONE THING I HATE IN DATA ==> OUTLIERS","3e4dfb50":"# THE END","e6a7b4c2":"# CORRELATION MATRIX","969802d6":"# BEDFORD WAS WAY TOO EXPENSIVE","8be76794":"# DO UPVOTE AND COMMENT","e0f601e9":"# NO OUTLIERS OBSERVED IN GROSS AND LAND SQUARE FEET","a5f77dd4":"# MISSION ACCOMPLISHED == CURVE CHANGED","c47c4700":"# NO OUTLIERS == DATA BETWEEN 100,000 USD - 5,000,000 USD","0fd9b5ce":"# DATA SKEWNESS == UGLY"}}