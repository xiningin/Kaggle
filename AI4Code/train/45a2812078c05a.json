{"cell_type":{"9fa0fc3d":"code","e58d3e36":"code","ad60de45":"code","e4aec007":"code","7212880c":"code","73526723":"code","2bcbd49a":"code","e9f9ec8d":"code","cbc6d2a0":"code","c89e77b0":"code","73d93c3f":"code","5190477c":"code","d84277f1":"code","8ac7dfb1":"code","31729856":"code","ba738a6a":"code","7e9e2d4b":"code","777fa256":"code","7229b802":"code","fb966d86":"code","6d223ce9":"code","a1f031a9":"code","17157121":"code","b8287ef5":"markdown","263c9034":"markdown","bad45613":"markdown","ac4e3703":"markdown","fb8f75ba":"markdown","de251e86":"markdown","1647ffb5":"markdown"},"source":{"9fa0fc3d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e58d3e36":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import accuracy_score,confusion_matrix, classification_report\n","ad60de45":"data = pd.read_csv('\/kaggle\/input\/weather-dataset-rattle-package\/weatherAUS.csv')","e4aec007":"data.head()","7212880c":"data.info()","73526723":"plt.figure(figsize=(10,6))\nsns.heatmap(data.isnull(), cmap='Blues')","2bcbd49a":"for col in data.columns:\n    if data[col].dtype == object:\n        imputer = SimpleImputer(missing_values = np.nan, strategy='most_frequent')\n    else:\n        imputer = SimpleImputer(missing_values = np.nan, strategy='mean')\n    \n    imputer.fit(data[[col]])\n    data[[col]] = imputer.transform(data[[col]])","e9f9ec8d":"plt.figure(figsize=(10,6))\nsns.heatmap(data.isnull(), cmap='Blues')","cbc6d2a0":"categorical_col = ['WindGustDir', 'WindDir9am', 'WindDir3pm','RainToday']","c89e77b0":"data.drop(['Date','Location'],inplace=True,axis=1)","73d93c3f":"for col in categorical_col:\n    dummy = pd.get_dummies(data[col],drop_first=True)\n    data = pd.concat([data,dummy],axis=1)\n           \n    #remove the original column\n    data.drop(col,axis=1,inplace=True)\n   ","5190477c":"le = LabelEncoder()\ndata['RainTomorrow'] = le.fit_transform(data['RainTomorrow'])","d84277f1":"data.head(3)","8ac7dfb1":"data.info()","31729856":"data.columns","ba738a6a":"X = data[['MinTemp', 'MaxTemp', 'Rainfall', 'Evaporation', 'Sunshine',\n       'WindGustSpeed', 'WindSpeed9am', 'WindSpeed3pm', 'Humidity9am',\n       'Humidity3pm', 'Pressure9am', 'Pressure3pm', 'Cloud9am', 'Cloud3pm',\n       'Temp9am', 'Temp3pm', 'ENE', 'ESE', 'N', 'NE', 'NNE',\n       'NNW', 'NW', 'S', 'SE', 'SSE', 'SSW', 'SW', 'W', 'WNW', 'WSW', 'ENE',\n       'ESE', 'N', 'NE', 'NNE', 'NNW', 'NW', 'S', 'SE', 'SSE', 'SSW', 'SW',\n       'W', 'WNW', 'WSW', 'ENE', 'ESE', 'N', 'NE', 'NNE', 'NNW', 'NW', 'S',\n       'SE', 'SSE', 'SSW', 'SW', 'W', 'WNW', 'WSW', 'Yes']]","7e9e2d4b":"y = data['RainTomorrow']","777fa256":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=100)","7229b802":"print(\"Training Data\\n\")\nprint(X_train.shape)\nprint(Y_train.shape)\nprint(\"\\nTest Data\\n\")\nprint(X_test.shape)\nprint(Y_test.shape)","fb966d86":"scaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.fit_transform(X_test)","6d223ce9":"classifier = SVC(kernel = 'rbf', random_state = 0)\nclassifier.fit(X_train, y_train)","a1f031a9":"y_pred = classifier.predict(X_test)","17157121":"print(\"Accuracy = {:.2f}%\".format(accuracy_score(y_test,y_pred)*100))\nprint('\\nClassification Report')\nprint(classification_report(y_test,y_pred))\nprint('Confusion Matrix')\nprint(confusion_matrix(y_test,y_pred))","b8287ef5":"**Evaluating the Model**","263c9034":"**With Test Data**","bad45613":"**Scaling the Data**","ac4e3703":"**Splitting Data into train and test sets**","fb8f75ba":"**Support Vector Classifier**\n\nTraining the model","de251e86":"**Filling the missing data**","1647ffb5":"**Encoding Categorical Data**"}}