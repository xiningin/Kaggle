{"cell_type":{"2917b8d1":"code","e5b06210":"code","537cba62":"code","65d9aa09":"code","fc5f63e4":"code","d8a6ae3b":"code","f35a0d6f":"code","03758ec6":"code","68e762ce":"code","b548ff66":"code","5ac0926b":"code","9736d051":"code","b12b7306":"code","38f11393":"code","67334073":"code","b84b8b8f":"code","5906521b":"code","2e027c94":"code","8de0bdc4":"code","0a6c2b6e":"code","2711ecaf":"code","d71b107e":"code","c32eebaf":"code","f4e05f40":"code","d8237555":"code","8dbeede3":"code","40e5d973":"code","20f87a30":"code","84159222":"code","bde04643":"code","7b320697":"code","eb91b1e5":"code","13de54a7":"code","e11a568e":"code","1302d761":"code","78400a09":"code","cf2d4b7e":"code","5c7aac63":"code","353fdf1f":"code","8cbdd86f":"code","54322d6a":"code","23dca5a6":"code","d1fac690":"code","339869ac":"code","6eb7ea0a":"code","824e1e49":"code","6b18a2e8":"code","7f1626e8":"code","628803b2":"code","3cb4d877":"code","ff13c86c":"code","1a0297de":"code","040b643c":"code","d3ec20fb":"code","a526eac2":"code","a86339f0":"code","644cff14":"code","d95ad8e2":"code","dc10f7e7":"code","a23a097c":"code","2d0dfb7a":"code","8c415a9a":"code","28e029f7":"code","f01c610e":"code","41c13bef":"code","d14f1f9c":"code","4497172e":"code","e96415c6":"code","8348965c":"code","9d92abea":"code","b730e4d6":"code","6cb71774":"code","e471aa97":"code","494810fc":"code","e77e7099":"code","e6dc8e52":"code","4639b0ee":"code","965ef6d1":"code","d26326a3":"code","b31f0820":"code","1163e02a":"markdown","48547951":"markdown","6cf6f444":"markdown","01e08e29":"markdown","a586dbb3":"markdown","184b660c":"markdown","bd0fcb42":"markdown","c2e6b153":"markdown","af14cb35":"markdown","49945b80":"markdown","cbc9e0c0":"markdown","073d91e2":"markdown","e6389efe":"markdown","ea23b4fe":"markdown","db685215":"markdown","8609dc87":"markdown","886adab9":"markdown","327e43d8":"markdown","b077d617":"markdown"},"source":{"2917b8d1":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport sklearn\n%matplotlib inline","e5b06210":"# Import data\ndf = pd.read_csv(\"..\/input\/bluebook-for-bulldozers\/TrainAndValid.csv\",low_memory=False)","537cba62":"df.head()","65d9aa09":"df.info()","fc5f63e4":"df.isna().sum()","d8a6ae3b":"fig,ax = plt.subplots()\nax.scatter(df[\"saledate\"][:1000],df[\"SalePrice\"][:1000])","f35a0d6f":"df.SalePrice.plot.hist(color=\"green\",title=\"$\");","03758ec6":"# Import data again but this time parse dates\ndf = pd.read_csv(\"..\/input\/bluebook-for-bulldozers\/TrainAndValid.csv\",low_memory=False,parse_dates=[\"saledate\"])","68e762ce":"df.saledate.dtype","b548ff66":"df.saledate[:1000]","5ac0926b":"fig,ax = plt.subplots()\nax.scatter(df[\"saledate\"][:1000],df[\"SalePrice\"][:1000])","9736d051":"df.head()","b12b7306":"df.head().T","38f11393":"# Sort DataFrame in date order\ndf.sort_values(by=[\"saledate\"],inplace=True,ascending=True)","67334073":"df.saledate.head()","b84b8b8f":"# Make copy \ndf_tmp = df.copy()","5906521b":"df_tmp","2e027c94":"## Add datetime paramters for saledate column\ndf_tmp[\"saleYear\"] = df_tmp.saledate.dt.year\ndf_tmp[\"saleMonth\"] = df_tmp.saledate.dt.month\ndf_tmp[\"saleDay\"] = df_tmp.saledate.dt.day\ndf_tmp[\"saleDatOfWeek\"] = df_tmp.saledate.dt.dayofweek\ndf_tmp[\"saleDayOfYear\"] = df_tmp.saledate.dt.dayofyear","8de0bdc4":"df_tmp.head().T","0a6c2b6e":"# Now we've enriched our dataframe with datetime features,we can remove saledate\ndf_tmp.drop(\"saledate\",axis=1,inplace=True)","2711ecaf":"# Check the values of different columns\ndf_tmp.state.value_counts()","d71b107e":"# Let's build a machine learning model \nfrom sklearn.ensemble import RandomForestRegressor\n\nmodel = RandomForestRegressor(n_jobs=-1,\n                              random_state=42)\n\nmodel.fit(df_tmp.drop(\"SalePrice\", axis=1), df_tmp[\"SalePrice\"])","c32eebaf":"df_tmp.info()","f4e05f40":"df_tmp.isna().sum()","d8237555":"pd.api.types.is_string_dtype(df_tmp[\"UsageBand\"])","8dbeede3":"# Find the columns which contain strings\nfor label,content in df_tmp.items():\n    if pd.api.types.is_string_dtype(content):\n        print(label)","40e5d973":"# This will turn all of the string value into category values\nfor label, content in df_tmp.items():\n    if pd.api.types.is_string_dtype(content):\n        df_tmp[label] = content.astype(\"category\").cat.as_ordered()","20f87a30":"df_tmp.info()","84159222":"df_tmp.state.cat.categories","bde04643":"# Check missing data\ndf_tmp.isnull().sum()\/len(df_tmp)","7b320697":"# Export current tmp dataframe\ndf_tmp.to_csv(\".\/\/train_tmp.csv\",\n              index=False)","eb91b1e5":"# Import preprocessed data\ndf_tmp = pd.read_csv(\".\/\/train_tmp.csv\",\n                     low_memory=False)\ndf_tmp.head().T","13de54a7":"for label,content in df_tmp.items():\n    if pd.api.types.is_numeric_dtype(content):\n        print(label)","e11a568e":"df_tmp.ModelID","1302d761":"# Check fo which numeric columns have null values\nfor label,content in df_tmp.items():\n    if pd.api.types.is_numeric_dtype(content):\n        if pd.isnull(content).sum():\n            print(label)\n        ","78400a09":"# Fill numeric rows with the median\nfor label,content in df_tmp.items():\n    if pd.api.types.is_numeric_dtype(content):\n        if pd.isnull(content).sum():\n            # Add a binary column which tell us if the data was missing\n            df_tmp[label+\"_is_missing\"] = pd.isnull(content)\n            # Fill missing numeric values with median\n            df_tmp[label] = content.fillna(content.median())\n        ","cf2d4b7e":"# Demonstarte how median is more robust than mean\nhundreds = np.full((1000),100)\nhundreds_billion = np.append(hundreds,1000000000)\nnp.mean(hundreds),np.mean(hundreds_billion),np.median(hundreds),np.median(hundreds_billion)","5c7aac63":"for label,content in df_tmp.items():\n    if pd.api.types.is_numeric_dtype(content):\n        if pd.isnull(content).sum():\n            \n            print(label)","353fdf1f":"# Check to see how many examples were missing\ndf_tmp[\"auctioneerID_is_missing\"].value_counts()","8cbdd86f":"df_tmp.isna().sum()","54322d6a":"### Filling and turning categorical variables into numbers\nfor label,content in df_tmp.items():\n    if not pd.api.types.is_numeric_dtype(content):\n        print(label)","23dca5a6":"# Turn categorical variables into numbers and fill missing\nfor label,content in df_tmp.items():\n    if not pd.api.types.is_numeric_dtype(content):\n        # Add binary column to indicate whether sample had missing value\n        df_tmp[label+\"is_missing\"]=pd.isnull(content)\n        # Turn categories into numbers and add+1\n        df_tmp[label] = pd.Categorical(content).codes+1","d1fac690":"pd.Categorical(df_tmp.state).codes+1","339869ac":"df_tmp.isna().sum()[:20]","6eb7ea0a":"df_tmp.info()","824e1e49":"df_tmp.head().T","6b18a2e8":"df_tmp.head()","7f1626e8":"%%time\n# Instantiate our model\nmodel = RandomForestRegressor(n_jobs=-1,random_state=42)\nmodel.fit(df_tmp.drop(\"SalePrice\",axis=1),df_tmp[\"SalePrice\"])\n","628803b2":"# Let's score \nmodel.score(df_tmp.drop(\"SalePrice\",axis=1),df_tmp[\"SalePrice\"])","3cb4d877":"df_tmp.saleYear.value_counts()","ff13c86c":"df_val = df_tmp[df_tmp[\"saleYear\"]==2012]\ndf_train = df_tmp[df_tmp[\"saleYear\"]!=2012]\nlen(df_train),len(df_val)","1a0297de":"# Split data into X and y\nX_train,y_train = df_train.drop(\"SalePrice\",axis=1),df_train.SalePrice\nX_valid,y_valid = df_val.drop(\"SalePrice\",axis=1),df_val.SalePrice\nX_train.shape,X_valid.shape,y_train.shape,y_valid.shape","040b643c":"y_train","d3ec20fb":"y_valid","a526eac2":"# Evaluation function\nfrom sklearn.metrics import mean_squared_log_error,mean_absolute_error,r2_score\ndef rmsle(y_test,y_preds):\n    return np.sqrt(mean_squared_log_error(y_test,y_preds))\n# Create function to evaluate model on a few different levels\ndef show_scores(model):\n    train_preds = model.predict(X_train)\n    val_preds = model.predict(X_valid)\n    scores = {\n        \"Training MAE\": mean_absolute_error(y_train,train_preds),\n        \"Valid MAE\":mean_absolute_error(y_valid,val_preds),\n        \"Training RMSLE\": rmsle(y_train,train_preds),\n        \"Valid RMSLE\": rmsle(y_valid,val_preds),\n        \"Training R^2\": r2_score(y_train,train_preds),\n        \"Valid R^2\": r2_score(y_valid,val_preds)\n    }\n    return scores","a86339f0":"# # This takes far too long... for experimenting\n\n# %%time\n# model = RandomForestRegressor(n_jobs=-1, \n#                               random_state=42)\n\n# model.fit(X_train, y_train)","644cff14":"len(X_train)","d95ad8e2":"%%time\nfrom sklearn.model_selection import RandomizedSearchCV\n# Different RandomForestRegressor hyperparameters\nrf_grid = {\n    \"n_estimators\":np.arange(10,100,10),\n    \"max_depth\":[None,3,5,10],\n    \"min_samples_split\":np.arange(1,20,2),\n    \"min_samples_leaf\":np.arange(1,20,2),\n    \"max_features\": [0.5,1,\"sqrt\",\"auto\"],\n    \"max_samples\":[10000]\n}\n# Instanciate RandomizedSearchCV\nrs_model = RandomizedSearchCV(\nRandomForestRegressor(n_jobs=-1,\n                     random_state=42),\n                    param_distributions = rf_grid,\n                     n_iter=2,\n                    cv=5,\n                    verbose=True)\nrs_model.fit(X_train,y_train)","dc10f7e7":"rs_model.best_params_","a23a097c":"# Evaluate the Randomized Search model\nshow_scores(rs_model)","2d0dfb7a":"%%time\n# Most ideal hyperparameters\nideal_model=RandomForestRegressor(n_estimators=40,\n                                 min_samples_leaf=1,\n                                 min_samples_split=14,\n                                 max_features=0.5,\n                                 n_jobs=-1,\n                                 max_samples=None,\n                                 random_state=42)\nideal_model.fit(X_train,y_train)","8c415a9a":"# Score for ideal model\nshow_scores(ideal_model)","28e029f7":"# Score for rs_model\nshow_scores(rs_model)","f01c610e":"# Making predictions on test data\n# Import test data\ndf_test = pd.read_csv(\"..\/input\/bluebook-for-bulldozers\/Test.csv\",low_memory=False,parse_dates=[\"saledate\"])\ndf_test.head()","41c13bef":"# Making predictions\ntest_preds = ideal_model.predict(df_test)","d14f1f9c":"df_test.isna().sum()","4497172e":"df_test.saledate","e96415c6":"def preprocess_data(df):\n    \"\"\"\n    Performs transformations on df and returns transformed df.\n    \"\"\"\n    df[\"saleYear\"] = df.saledate.dt.year\n    df[\"saleMonth\"] = df.saledate.dt.month\n    df[\"saleDay\"] = df.saledate.dt.day\n    df[\"saleDayOfWeek\"] = df.saledate.dt.dayofweek\n    df[\"saleDayOfYear\"] = df.saledate.dt.dayofyear\n    \n    df.drop(\"saledate\", axis=1, inplace=True)\n    \n    # Fill the numeric rows with median\n    for label, content in df.items():\n        if pd.api.types.is_numeric_dtype(content):\n            if pd.isnull(content).sum():\n                # Add a binary column which tells us if the data was missing or not\n                df[label+\"_is_missing\"] = pd.isnull(content)\n                # Fill missing numeric values with median\n                df[label] = content.fillna(content.median())\n    \n        # Filled categorical missing data and turn categories into numbers\n        if not pd.api.types.is_numeric_dtype(content):\n            df[label+\"_is_missing\"] = pd.isnull(content)\n            # We add +1 to the category code because pandas encodes missing categories as -1\n            df[label] = pd.Categorical(content).codes+1\n    \n    return df","8348965c":"# Process test data\ndf_test = preprocess_data(df_test)\ndf_test.head().T","9d92abea":"# Make predictions on updated df\ntest_preds = ideal_model.predict(df_test)","b730e4d6":"X_train.head()","6cb71774":"# We can find how the columns differ using sets\nset(X_train.columns)-set(df_test.columns)","e471aa97":"df_test[\"auctioneerID_is_missing\"] = False\ndf_test.head()","494810fc":"# Make predictions on the test data\ntest_preds = ideal_model.predict(df_test)","e77e7099":"# Format predictions into the same format Kaggle is after\ndf_preds = pd.DataFrame()\ndf_preds[\"SalesID\"] = df_test[\"SalesID\"]\ndf_preds[\"SalesPrice\"] = test_preds\ndf_preds","e6dc8e52":"df_preds.to_csv(\".\/\/test_predictions.csv\")","4639b0ee":"# Find feature importance of our best model\nideal_model.feature_importances_","965ef6d1":"# Helper function for plotting feature importance\ndef plot_features(columns, importances, n=20):\n    df = (pd.DataFrame({\"features\": columns,\n                        \"feature_importances\": importances})\n          .sort_values(\"feature_importances\", ascending=False)\n          .reset_index(drop=True))\n    \n    # Plot the dataframe\n    fig, ax = plt.subplots()\n    ax.barh(df[\"features\"][:n], df[\"feature_importances\"][:20])\n    ax.set_ylabel(\"Features\")\n    ax.set_xlabel(\"Feature importance\")\n    ax.invert_yaxis()","d26326a3":"plot_features(X_train.columns, ideal_model.feature_importances_)","b31f0820":"df[\"Enclosure\"].value_counts()","1163e02a":"### Convert string to categories\n\nOne way we can turn all of our data into numbers is by converting them into pandas catgories.\n\nWe can check the different datatypes compatible with pandas here: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/general_utility_functions.html#data-types-related-functionality","48547951":"### Make a copy of the original DataFrame\n\nWe make a copy of the original dataframe so when we manipulate the copy, we've still got our original data.","6cf6f444":"### Sort DataFrame by saledate\n\nWhen working with time series data, it's a good idea to sort it by date.","01e08e29":"Question: Why doesn't the above metric hold water? (why isn't the metric reliable)","a586dbb3":"Splitting data into train\/validation sets","184b660c":"# \ud83d\ude9c Predicting the Sale Price of Bulldozers using Machine Learning\n\nIn this notebook, we're going to go through an example machine learning project with the goal of predicting the sale price of bulldozers.\n\n## 1. Problem defition\n\n> How well can we predict the future sale price of a bulldozer, given its characteristics and previous examples of how much similar bulldozers have been sold for?\n\n## 2. Data\n\nThe data is downloaded from the Kaggle Bluebook for Bulldozers competition: https:\/\/www.kaggle.com\/c\/bluebook-for-bulldozers\/data\n\nThere are 3 main datasets:\n\n* Train.csv is the training set, which contains data through the end of 2011.\n* Valid.csv is the validation set, which contains data from January 1, 2012 - April 30, 2012 You make predictions on this set throughout the majority of the competition. Your score on this set is used to create the public leaderboard.\n* Test.csv is the test set, which won't be released until the last week of the competition. It contains data from May 1, 2012 - November 2012. Your score on the test set determines your final rank for the competition.\n\n## 3. Evaluation\n\nThe evaluation metric for this competition is the RMSLE (root mean squared log error) between the actual and predicted auction prices.\n\nFor more on the evaluation of this project check: https:\/\/www.kaggle.com\/c\/bluebook-for-bulldozers\/overview\/evaluation\n\n**Note:** The goal for most regression evaluation metrics is to minimize the error. For example, our goal for this project will be to build a machine learning model which minimises RMSLE.\n\n## 4. Features\n\nKaggle provides a data dictionary detailing all of the features of the dataset. You can view this data dictionary on Google Sheets: https:\/\/docs.google.com\/spreadsheets\/d\/18ly-bLR8sbDJLITkWG7ozKm8l3RyieQ2Fpgix-beSYI\/edit?usp=sharing","bd0fcb42":"Thanks to pandas Categories we now have a way to access all of our data in the form of numbers.\n\nBut we still have a bunch of missing data...","c2e6b153":"Now that all of data is numeric as well as our dataframe has no missing values, we should be able to build a machine learning model.","af14cb35":"**Question to finish:** Why might knowing the feature importances of a trained machine learning model be helpful?\n\n**Final challenge\/extension:** What other machine learning models could you try on our dataset? \n**Hint:** https:\/\/scikit-learn.org\/stable\/tutorial\/machine_learning_map\/index.html check out the regression section of this map, or try to look at something like CatBoost.ai or XGBooost.ai.","49945b80":"We've made some predictions but they're not in the same format Kaggle is asking for: https:\/\/www.kaggle.com\/c\/bluebook-for-bulldozers\/overview\/evaluation","cbc9e0c0":"## 5. Modelling \n\nWe've done enough EDA (we could always do more) but let's start to do some model-driven EDA.","073d91e2":"### Parsing dates\n\nWhen we work with time series data, we want to enrich the time & date component as much as possible.\n\nWe can do that by telling pandas which of our columns has dates in it using the `parse_dates` parameter.","e6389efe":"### Preprocessing the data (getting the test dataset in the same format as our training dataset)","ea23b4fe":"## Fill missing values \n\n### Fill numerical missing values first","db685215":"### Train a model with the best hyperparamters\n\n**Note:** These were found after 100 iterations of `RandomizedSearchCV`.","8609dc87":"# Evaluation function\n","886adab9":"## Testing our model on a subset (to tune the hyperparameters)","327e43d8":"### Hyerparameter tuning with RandomizedSearchCV","b077d617":"### Feature Importance\n\nFeature importance seeks to figure out which different attributes of the data were most importance when it comes to predicting the **target variable** (SalePrice)."}}