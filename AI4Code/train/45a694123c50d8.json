{"cell_type":{"a1976402":"code","7d808231":"code","bd90cede":"code","3d840ca1":"code","79ba3e14":"code","2408a399":"code","292c497d":"code","0f8bbb74":"code","7fcc56a8":"code","5f6015f3":"code","0790ccb0":"code","c719da45":"code","b3808dcd":"code","021e0aef":"code","daca0644":"code","13d8949e":"code","33008c98":"code","e6b36418":"code","3e092683":"code","9d07c0d0":"code","87f28382":"code","d0252cee":"code","1cac7479":"code","9686b866":"code","c5b54723":"code","dde2d348":"code","c3b6d397":"code","71f91a24":"code","c2baac9c":"code","e8ef2cb5":"code","77aca543":"code","2bda017f":"code","b6ff21e7":"code","0c0c8890":"code","eb44302d":"code","b3dfb4ad":"code","5aaa073b":"code","535a40ee":"code","ff3cb518":"code","ffc9920a":"code","d951d7b0":"code","619932e0":"code","3ddea93d":"code","e84ca8bd":"code","ea5b30a8":"code","ecf40836":"code","f16c1c20":"code","0722d403":"code","cbc7c09d":"code","5679d2f2":"code","becb36c1":"code","23676543":"code","be6ff59d":"code","b57520a8":"code","c5dc6de2":"code","33149ff9":"code","18691ea2":"markdown","fc96d4a9":"markdown","565e5afd":"markdown","bb78b4ac":"markdown","70e95d3d":"markdown","03c20b43":"markdown","24fc2529":"markdown","048ccf64":"markdown","524cd818":"markdown","df9f8429":"markdown","36733559":"markdown","f47b3541":"markdown"},"source":{"a1976402":"import pandas as pd \n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","7d808231":"df_eco_all = pd.read_csv( \"..\/input\/ecology-related-data-from-openfoodfacts\/openfoodfacts_Eco.csv\")","bd90cede":"df_eco_all =df_eco_all.drop(['Unnamed: 0'], axis=1)\ndf_eco_all = df_eco_all.rename({'pnns_groups_2': 'catPNNS'}, axis=1) #easier name\ndf_eco_all.head()","3d840ca1":"df_eco_all['nutrition_grade_fr'].unique()","79ba3e14":"# plot eventual correlations for the main dataframe containing data relative to quality and environmental impact\nimport seaborn as sns\n#sns.set(color_codes=True)\n#sns.set(style=\"white\", palette=\"muted\")\n\n#sns.pairplot(df_eco_all)","2408a399":"# some correlation can be observed between nutrition score and carbon foodprint\n# no obvious correlations can be observed between the two main ecological parameters: carbon footprint and number of palm oil ingredients\n# moreover, the columns still contain zero and Nan values\n# based on this we split the database and analize the subset after a further cleaning\ncarbon_categories = ['product_name','nutrition_grade_fr_n','nutrition_grade_fr','catPNNS', 'carbon-footprint_100g']\ndf_carbon = df_eco_all[carbon_categories]\ndf_carbon = df_carbon.dropna(subset=['carbon-footprint_100g', 'nutrition_grade_fr']) \ndf_carbon = df_carbon.sort_values(by=['carbon-footprint_100g'], ascending=False)\ndf_carbon['nutrition_grade_fr'].unique()","292c497d":"print(df_carbon.shape)\ndf_carbon[:25]","0f8bbb74":"df_carbon = df_carbon[df_carbon['carbon-footprint_100g'] > 1]  # eliminate unrealistic values\nprint(df_carbon.shape) # overview\n\ndf_carbon['nutrition_grade_fr'].unique()","7fcc56a8":"# as it could also be observed in the matrix above, higher nutrition score have an as an average a higher carbon footprint. We plot again the graph below.\n# and we estimate the visual observation with a simple univariate linear regression\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import rcParams\nfrom sklearn import linear_model\nX0 = np.matrix([np.ones(df_carbon.shape[0]), df_carbon['nutrition_grade_fr_n'] ]).T\ny0 = np.matrix([df_carbon['carbon-footprint_100g']]).T\n\nregr = linear_model.LinearRegression() \nregr.fit(X0, y0)\nestimated_carbon_foodprint = regr.predict(X0)\naccuracy0 = regr.score(X0, y0)\nprint(accuracy0)\n\n\nplt.scatter(df_carbon['nutrition_grade_fr_n'],df_carbon['carbon-footprint_100g'] )\nplt.plot(df_carbon['nutrition_grade_fr_n'],estimated_carbon_foodprint, color = 'tomato' )\nplt.xlabel('French nutritional score', color=\"red\", fontsize = 14)\nplt.ylabel('Carbon footprint', color=\"red\", fontsize = 14)\nplt.savefig(\"Quality carbon0.png\", format=\"PNG\")","5f6015f3":"# Now redo the correlation after grouping by nutritional grade average score\ndf_carbon_impact = df_carbon.drop(columns=['catPNNS','product_name','nutrition_grade_fr'])\ndf_carbon_impact = df_carbon_impact.groupby(['nutrition_grade_fr_n']).mean()\ndf_carbon_impact = df_carbon_impact.sort_values(by=['nutrition_grade_fr_n'], ascending=False)\ndf_carbon_impact.reset_index(inplace=True)\n\ndf_carbon_impact","0790ccb0":"grades =['A','B','C','D']\ndf_carbon_impact['french food grade'] =grades\n\ndf_carbon_impact","c719da45":"# this grouping indicates that the two variables are well correlated\nX1 = np.matrix([np.ones(df_carbon_impact.shape[0]), df_carbon_impact['nutrition_grade_fr_n'] ]).T\ny1 = np.matrix([df_carbon_impact['carbon-footprint_100g']]).T\n\nregr = linear_model.LinearRegression() \nregr.fit(X1, y1)\nestimated_carbon_foodprint_byGrade = regr.predict(X1)\naccuracy12 = regr.score(X1, y1)\nprint(accuracy12)","b3808dcd":"# the evident correlation is shown by the graph below\nplt.figure(figsize=(8,5))\n\nx_coords = df_carbon_impact['nutrition_grade_fr_n']\ny_coords = df_carbon_impact['carbon-footprint_100g']\nfor i,type in enumerate(grades):\n    x = x_coords[i]\n    y = y_coords[i]\n    plt.scatter(x, y, marker='o', color='blue')\n    plt.text(x+0.3, y+0.3, type, fontsize=9)\n\nplt.plot(df_carbon_impact['nutrition_grade_fr_n'],estimated_carbon_foodprint_byGrade, color = 'g' )\nplt.title('Environmental impact by food quality', color=\"red\", fontsize = 14)\nplt.xlabel('French nutrition grade average score', color=\"red\", fontsize = 14)\nplt.ylabel('Carbon footprint (100g)', color=\"red\", fontsize = 14)\n\n\nplt.show()\n\nplt.savefig(\"Quality carbon footprint.png\", format=\"PNG\")\n\n","021e0aef":"palm_categories = ['nutrition_grade_fr_n', 'ingredients_from_palm_oil_n', 'ingredients_that_may_be_from_palm_oil_n']\ndf_palm = df_eco_all[palm_categories]\n\n#df_palm = df_palm[df_palm['ingredients_from_palm_oil_n'] > 0] \n#df_palm = df_palm[df_palm['ingredients_that_may_be_from_palm_oil_n'] > 0] \ndf_palm = df_palm.sort_values(by=['ingredients_from_palm_oil_n'], ascending=False)\n\ndf_palm = df_palm.dropna() \ndf_palm = df_palm.groupby(['nutrition_grade_fr_n']).mean() \n\ndf_palm = df_palm.reset_index(drop=False)\n\nprint(df_palm.shape)\ndf_palm","daca0644":"# prepare data\nX2 = df_palm.iloc[:, 1:3].values\ny2 = df_palm.iloc[:, 0].values\n\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X2, y2, test_size = 0.5, random_state = 42)\n\nregr.fit(X_train, y_train)\ny_pred = regr.predict(X_test) # estimation of nutrition score based on fit\n\naccuracy2 = regr.score(X_test, y_test)\nprint('score = ',accuracy2)\nprint('')\nprint(X2)","13d8949e":"regr = linear_model.LinearRegression() \nregr.fit(X2, y2)\ny_pred = regr.predict(X2)\naccuracy21 = regr.score(X2, y2)\nprint(accuracy21)","33008c98":"numerical_categories = ['nutrition_grade_fr_n','carbon-footprint_100g','ingredients_from_palm_oil_n','ingredients_that_may_be_from_palm_oil_n']\ndf_eco = df_eco_all[numerical_categories]\ndf_eco = df_eco_all.dropna(subset=['carbon-footprint_100g', 'nutrition_grade_fr_n'])\n\ndf_eco = df_eco.fillna(value = 0)\ndf_eco = df_eco.groupby(['nutrition_grade_fr_n']).mean() \ndf_eco = df_eco.sort_values(by=['nutrition_grade_fr_n'], ascending=True)\nprint(df_eco.shape)\ndf_eco = df_eco.reset_index(level=0, inplace=False) # gets grades to the first column\ndf_eco","e6b36418":"#linear fit\nX3 = df_eco.iloc[:, 1:4].values\ny3 = df_eco.iloc[:, 0].values\n\n\nregr.fit(X3, y3)\ny_pred = regr.predict(X3) # estimation of nutrition score based on fit\n\naccuracy3 = regr.score(X3, y3)\nprint(accuracy3)","3e092683":"ax1 = sns.distplot(y3, hist=False, color=\"r\", label=\"Actual Nutritional Grade Value\")\nsns.distplot(y_pred, hist=False, color=\"b\", label=\"Fitted Nutritional Grade Value\" , ax=ax1)","9d07c0d0":"features = ['ingredients_from_palm_oil_n', 'ingredients_that_may_be_from_palm_oil_n', 'carbon-footprint_100g',] # select the features to transform\n\n# Separating out the features\nx = df_eco.loc[:, features].values\nfrom sklearn.preprocessing import StandardScaler\nx = StandardScaler().fit_transform(x) # scale those features\nfrom sklearn.decomposition import PCA\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(x)\n\nprincipal_eco_Df = pd.DataFrame(data = principalComponents , columns = ['environmental impact'])\n\n\nprint('the new component contains',pca.explained_variance_ratio_ * 100, '% of the information from the two variables')\n# ","87f28382":"df_eco['environmental impact'] = principal_eco_Df['environmental impact']\ndf_eco.head()","d0252cee":"X4 = np.matrix([np.ones(df_eco.shape[0]), df_eco['environmental impact'] ]).T\ny4 = np.matrix([df_eco['nutrition_grade_fr_n']]).T\n\nregr = linear_model.LinearRegression() \nregr.fit(X4, y4)\npredicted_quality = regr.predict(X4)\naccuracy4 = regr.score(X4, y4)\nprint(accuracy4)","1cac7479":"plt.figure(figsize=(8,5))\n\nx_coords = df_eco['environmental impact']\ny_coords = df_eco['nutrition_grade_fr_n']\nfor i,type in enumerate(grades):\n    x = x_coords[i]\n    y = y_coords[i]\n    plt.scatter(x, y, marker='o', color='blue')\n    plt.text(x+0.3, y+0.3, type, fontsize=9)\n\nplt.plot(df_eco['environmental impact'],predicted_quality, color = 'g' )\nplt.title('Environmental impact by food quality', color=\"red\", fontsize = 14)\nplt.xlabel('Environmental impact (palm oil content and carbon footprint)', color=\"red\", fontsize = 14)\nplt.ylabel('French nutrition grade average score', color=\"red\", fontsize = 14)\n\n\nplt.show()\n\nplt.savefig(\"Quality all.png\", format=\"PNG\")","9686b866":"# Import the model we are using\nfrom sklearn.ensemble import RandomForestRegressor\n# Instantiate model with few decision trees: too low, underfitting, too high overfiting and heavy processing. Since data are so scarce we keep it low\n\nrf = RandomForestRegressor(n_estimators = 10, random_state = 42) \nrf.fit(X3, y3)\npredicted_quality = rf.predict(X3)\naccuracy5 = rf.score(X3, y3)\nprint(accuracy5)","c5b54723":"plt.figure(figsize=(8,5))\n\nplt.scatter(x_coords, y_coords)\nplt.plot(X3, predicted_quality)\nplt.title('Random Forest', color=\"red\", fontsize = 14)\nplt.xlabel('Environmental impact (palm oil content and carbon footprint)', color=\"red\", fontsize = 14)\nplt.ylabel('French nutrition grade average score', color=\"red\", fontsize = 14)","dde2d348":"df_carbon.head()","c3b6d397":"palm_categories = ['product_name','catPNNS','nutrition_grade_fr_n', 'ingredients_from_palm_oil_n', 'ingredients_that_may_be_from_palm_oil_n']\ndf_palm = df_eco_all[palm_categories]\ndf_palm = df_palm[df_palm['ingredients_from_palm_oil_n'] > 0] \ndf_palm = df_palm[df_palm['ingredients_that_may_be_from_palm_oil_n'] > 0]\n\ndf_palm['palm_oil_tot'] = df_palm['ingredients_from_palm_oil_n'] + df_palm['ingredients_that_may_be_from_palm_oil_n']\ndf_palm = df_palm.dropna() \ndf_palm = df_palm.sort_values(by=['palm_oil_tot'], ascending=False)\ndf_palm[:15]","71f91a24":"df_palm = df_palm.groupby(['catPNNS']).mean()\ndf_palm = df_palm.sort_values(by=['palm_oil_tot'], ascending=False)\ndf_palm[:-10]","c2baac9c":"# here a visualization of average environmental impact (carbon footprint)\n# and quality for each category according to the french national health programme\ndf_carbon_cat = df_carbon[['nutrition_grade_fr_n','catPNNS', 'carbon-footprint_100g']]\ndf_carbon_cat = df_carbon_cat[df_carbon_cat.catPNNS != 'unknown']\n\ndf_carbon_cat = df_carbon_cat.groupby(['catPNNS']).mean()\ndf_carbon_cat = df_carbon_cat.sort_values(by=['carbon-footprint_100g'], ascending=False)\ndf_carbon_cat = df_carbon_cat.reset_index(drop=False)\ndf_carbon_cat[:-10]\nprint(df_carbon_cat.shape)","e8ef2cb5":"df_carbon_cat.describe()","77aca543":"nutritionalcategories = ['catPNNS','nutrition_grade_fr_n']\ndf_nutcat = df_eco_all[nutritionalcategories]\ndf_nutcat[:10]","2bda017f":"df_nutcat.describe()","b6ff21e7":"\ndf_nutcat = df_nutcat.groupby(['catPNNS']).mean()\ndf_nutcat = df_nutcat.sort_values(by=['nutrition_grade_fr_n'], ascending=True)\ndf_nutcat = df_nutcat.reset_index(drop=False)\ndf_nutcat.head()","0c0c8890":"plt.figure(figsize=(8,10))\nplt.barh(df_nutcat['catPNNS'], df_nutcat['nutrition_grade_fr_n'])\nplt.title('Nutritional value by PNNS food category', color=\"red\", fontsize = 14)\nplt.ylabel('Average nutrition score', color=\"red\", fontsize = 14)\nplt.xticks(rotation='vertical')\nplt.rcParams['figure.constrained_layout.use'] = True\nplt.savefig(\"PNNS Category based nutrition.png\", format=\"PNG\", dpi = 100)","eb44302d":"df_e = df_eco_all[df_eco_all['nutrition_grade_fr'] == \"e\"]\ndf_e_reduced = df_e[['nutrition_grade_fr_n','catPNNS']]\ndf_e_reduced = df_e_reduced.groupby(['catPNNS']).count()\ndf_e_reduced = df_e_reduced.sort_values(by=['nutrition_grade_fr_n'], ascending= False)\ndf_e_reduced = df_e_reduced.reset_index(drop=False)\ndf_e_reduced.head()","b3dfb4ad":"df_e_reduced = df_e_reduced[df_e_reduced.catPNNS != 'unknown'] \n","5aaa073b":"df_e_reduced = df_e_reduced[df_e_reduced['nutrition_grade_fr_n'] > 1000] # filter noisy values\n","535a40ee":"total = np.sum(df_e_reduced.loc[:,'nutrition_grade_fr_n':].values)\nprint(\"tot: \",total)\ndf_e_reduced['percentage'] = (df_e_reduced['nutrition_grade_fr_n']\/total)*100\ndf_e_reduced","ff3cb518":"\n# pie chart E grade\nplt.figure(figsize=(10,10))\nlabels = df_e_reduced['catPNNS']\nsizes = df_e_reduced['percentage']\n\n\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, labels=labels, autopct='%1.1f%%', shadow=True, startangle=90)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nplt.savefig(\"Category E.png\", format=\"PNG\", dpi = 100)\nplt.show()","ffc9920a":"df_a = df_eco_all[df_eco_all['nutrition_grade_fr'] == \"a\"]\ndf_a_reduced = df_a[['nutrition_grade_fr_n','catPNNS']]\ndf_a_reduced = df_a_reduced.groupby(['catPNNS']).count()\ndf_a_reduced = df_a_reduced.sort_values(by=['nutrition_grade_fr_n'], ascending= False)\ndf_a_reduced = df_a_reduced.reset_index(drop=False)","d951d7b0":"df_a_reduced = df_a_reduced[df_a_reduced.catPNNS != 'unknown'] \ndf_a_reduced = df_a_reduced[df_a_reduced['nutrition_grade_fr_n'] > 1000]\ntotal = np.sum(df_a_reduced.loc[:,'nutrition_grade_fr_n':].values)\nprint(\"tot: \",total)\ndf_a_reduced['percentage'] = (df_a_reduced['nutrition_grade_fr_n']\/total)*100\ndf_a_reduced","619932e0":"plt.figure(figsize=(10,10)) # pie chart A grade\nlabels = df_a_reduced['catPNNS']\nsizes = df_a_reduced['percentage']\n\n\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, labels=labels, autopct='%1.1f%%', shadow=True, startangle=90)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nplt.savefig(\"Category A.png\", format=\"PNG\", dpi = 100)\nplt.show()","3ddea93d":"\ndf_nutriscore = df_eco_all.groupby(['nutrition_grade_fr']).count()\n\ndf_nutriscore = df_nutriscore.reset_index(drop=False)\ndf_nutriscore.head()","e84ca8bd":"total1 = np.sum(df_nutriscore.loc[:,'product_name':].values)\nprint(\"tot: \",total)\ndf_nutriscore['percentage'] = (df_nutriscore['product_name']\/total)*100","ea5b30a8":"plt.figure(figsize=(10,10)) # pie chart A grade\nlabels = df_nutriscore['nutrition_grade_fr']\nsizes = df_nutriscore['percentage']\n\n\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, labels=labels, autopct='%1.1f%%', shadow=True, startangle=90)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nplt.savefig(\"eco_cat.png\", format=\"PNG\", dpi = 100)\nplt.show()","ecf40836":"df_cat = df_eco_all.groupby(['nutrition_grade_fr']).count()\n\ndf_nutriscore = df_nutriscore.reset_index(drop=False)\ndf_nutriscore.head()","f16c1c20":"df_nutcat1 = df_eco_all.groupby(['catPNNS']).count()\ndf_nutcat1 = df_nutcat1.sort_values(by=['product_name'], ascending=False)\ndf_nutcat1 = df_nutcat1.reset_index(drop=False)\ndf_nutcat1.head()","0722d403":"df_nutcat1.tail()","cbc7c09d":"df_nutcat1 = df_nutcat1[df_nutcat1['product_name'] < 150000] \ndf_nutcat1 = df_nutcat1[df_nutcat1['product_name'] > 5000] \ntotal2 = np.sum(df_nutcat1.loc[:,'product_name':].values)\nprint(\"tot: \",total)\ndf_nutcat1['percentage'] = (df_nutcat1['product_name']\/total)*100\n\nplt.figure(figsize=(10,10)) # pie chart A grade\nlabels = df_nutcat1['catPNNS']\nsizes = df_nutcat1['percentage']\n\n\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, labels=labels, autopct='%1.1f%%', shadow=True, startangle=90)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nplt.savefig(\"Category main.png\", format=\"PNG\", dpi = 100)\nplt.show()","5679d2f2":"df_meat = df_carbon[df_carbon['catPNNS'] == 'meat']\ndf_meat = df_meat.sort_values(by=['carbon-footprint_100g'], ascending=False)\ndf_meat = df_meat[['product_name', 'carbon-footprint_100g','nutrition_grade_fr']]\ndf_meat","becb36c1":"df_carbon_d = df_carbon[df_carbon['nutrition_grade_fr'] == 'd']\ndf_carbon_d = df_carbon_d.sort_values(by=['carbon-footprint_100g'], ascending=False)\ndf_carbon_d[:5]","23676543":"box_d = plt.boxplot(df_carbon_d['carbon-footprint_100g'], showmeans=True)\nplt.ylabel(\"Carbon footprint\", color=\"red\", fontsize = 14)\nplt.xticks([1], ['Nutriscore D'], color=\"red\", fontsize = 14)\nplt.savefig(\"Carbon footprint D.png\", format=\"PNG\", dpi = 100)","be6ff59d":"df_carbon.shape","b57520a8":"#remove outliers in class D\ndf_carbon1 = df_carbon[df_carbon['product_name'] != 'Supr\u00eame Noir Authentique']\ndf_carbon1 = df_carbon1[df_carbon1['product_name'] != 'Viande des grisons']\ndf_carbon1 = df_carbon1[df_carbon1['carbon-footprint_100g'] < 1500] \ndf_carbon1.shape # only three values lost: very few outliers above 1500","c5dc6de2":"df_carbon_impact = df_carbon1.drop(columns=['catPNNS','product_name','nutrition_grade_fr'])\ndf_carbon_impact = df_carbon_impact.groupby(['nutrition_grade_fr_n']).mean()\ndf_carbon_impact = df_carbon_impact.sort_values(by=['nutrition_grade_fr_n'], ascending=False)\ndf_carbon_impact.reset_index(inplace=True)\ngrades =['A','B','C','D']\ndf_carbon_impact['french food grade'] =grades\n\nX1 = np.matrix([np.ones(df_carbon_impact.shape[0]), df_carbon_impact['nutrition_grade_fr_n'] ]).T\ny1 = np.matrix([df_carbon_impact['carbon-footprint_100g']]).T\n\nregr = linear_model.LinearRegression() \nregr.fit(X1, y1)\nestimated_carbon_foodprint_byGrade = regr.predict(X1)\naccuracy13 = regr.score(X1, y1)\nprint(accuracy13)","33149ff9":"plt.figure(figsize=(8,5))\n\nx_coords = df_carbon_impact['nutrition_grade_fr_n']\ny_coords = df_carbon_impact['carbon-footprint_100g']\nfor i,type in enumerate(grades):\n    x = x_coords[i]\n    y = y_coords[i]\n    plt.scatter(x, y, marker='o', color='blue')\n    plt.text(x+0.3, y+0.3, type, fontsize=9)\n\nplt.plot(df_carbon_impact['nutrition_grade_fr_n'],estimated_carbon_foodprint_byGrade, color = 'g' )\nplt.title('Environmental impact by food quality', color=\"red\", fontsize = 14)\nplt.xlabel('French nutrition grade average score', color=\"red\", fontsize = 14)\nplt.ylabel('Carbon footprint (100g)', color=\"red\", fontsize = 14)\n\nplt.savefig(\"Quality carbon footprint improved.png\", format=\"PNG\")\n\nplt.show()\n","18691ea2":"# Which categories of food are best for nutrition and the environment?","fc96d4a9":"# The environmental impact of food quality. Part 2: statistical analysis#\n\nThis notebook illustrates the first part of the project. Univariate and multivariate correlations are calculated to assess relationship between food quality and its environmental impact.","565e5afd":"Since also palm oil is related to the environmental impact, we can include this parameters to the correlation to food quality","bb78b4ac":"The above graphs indicates that the carbon foodprint is better related to an average value for each food nutritional grade (score)","70e95d3d":"#PCA and Multivariate analysis with all parameters \naverage for each French food grade (instead of letters we use the average grade score)","03c20b43":"Principal components analysis","24fc2529":"better prediction by random forest algorithm than multivariate linear regression","048ccf64":"A multivariate linear regression that correlates all ecology variables to food quality produces still a good score","524cd818":"Much better a simple multivariate linear regression","df9f8429":"Change of model for random forest regressor, that takes into account categorical data ","36733559":"Visualize collerations among variables and outliers: scatterplots","f47b3541":"A multivariate regression with test - train set is not helpful in this case, since we grouped data into 5 rows only"}}