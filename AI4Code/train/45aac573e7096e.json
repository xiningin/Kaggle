{"cell_type":{"989d254d":"code","295895db":"code","8caa1131":"code","24919db7":"code","370d1263":"code","43a1d8af":"code","e3403476":"code","b91a1bb2":"code","e36563b7":"code","f10d0990":"code","94071e21":"code","403e5c78":"code","1fd7653f":"code","86ab14fb":"code","8b7ada00":"code","c7941299":"code","7d70e19c":"code","824711b6":"code","9e135dae":"code","45893767":"code","ddc2ad42":"code","ee7f88e2":"code","a7d16cf1":"code","5a09a075":"code","5c63275e":"code","4ed7bde4":"code","59b2ac43":"code","1350cd09":"code","a34de3ea":"code","c1d62baa":"code","e96fa129":"code","2670794b":"code","e1e3fc7a":"code","c183602f":"code","a8e3c296":"code","21dee36c":"code","ccdca2f9":"markdown","d7193213":"markdown","8762953f":"markdown"},"source":{"989d254d":"import pandas as pd\nimport numpy as np\nimport sklearn as sk\nimport matplotlib.pyplot as plt\n%matplotlib inline","295895db":"from sklearn.base import TransformerMixin\n\nclass DataFrameImputer(TransformerMixin):\n\n    def fit(self, X, y=None):\n\n        self.fill = pd.Series([X[c].value_counts().index[0]\n            if X[c].dtype == np.dtype('O') else X[c].mean() for c in X],\n            index=X.columns)\n\n        return self\n\n    def transform(self, X, y=None):\n        return X.fillna(self.fill)\n","8caa1131":"df_treino_original = pd.read_csv(\"train_data.csv\")\n\ndf_treino = df_treino_original[(df_treino_original['default'].notnull())]","24919db7":"df_treino.info()","370d1263":"print(\"credit_limit: \", df_treino['credit_limit'].mean())\nprint(\"ok_since: \", df_treino['ok_since'].mean())\nprint(\"n_bankruptcies: \", df_treino['n_bankruptcies'].mean())\nprint(\"n_defaulted_loans: \", df_treino['n_defaulted_loans'].mean())\nprint(\"n_issues: \", df_treino['n_issues'].mean())\n\nsub_credit_limit = df_treino['credit_limit'].mean()\nsub_ok_since = df_treino['ok_since'].mean()\nsub_n_bankruptcies = df_treino['n_bankruptcies'].mean()\nsub_n_defaulted_loans = df_treino['n_defaulted_loans'].mean()\nsub_n_issues = df_treino['n_issues'].mean()","43a1d8af":"df_treino['credit_limit'].fillna(sub_credit_limit, inplace=True)\ndf_treino['ok_since'].fillna(sub_ok_since, inplace=True)\ndf_treino['n_bankruptcies'].fillna(sub_n_bankruptcies, inplace=True)\ndf_treino['n_defaulted_loans'].fillna(sub_n_defaulted_loans, inplace=True)\ndf_treino['n_issues'].fillna(sub_n_issues, inplace=True)","e3403476":"df_treino.info()","b91a1bb2":"df_treino['reason'].fillna('NA1', inplace=True)\ndf_treino['sign'].fillna('NA2', inplace=True)\ndf_treino['gender'].fillna('NA3', inplace=True)\ndf_treino['facebook_profile'].fillna('NA4', inplace=True)\ndf_treino['job_name'].fillna('NA5', inplace=True)","e36563b7":"df_treino.info()","f10d0990":"df_treino_tratada = DataFrameImputer().fit_transform(df_treino)\n#df_treino_tratada = df_treino\ndf_treino_tratada=df_treino_tratada.reset_index()","94071e21":"import xgboost as xgb\nfrom sklearn.metrics import mean_squared_error\nimport pandas as pd\nimport numpy as np","403e5c78":"print('score_1:' ,len(df_treino_tratada.groupby('score_1').size()))\nprint('score_2:' ,len(df_treino_tratada.groupby('score_2').size()))\nprint('reason:' ,len(df_treino_tratada.groupby('reason').size()))\nprint('sign:' ,len(df_treino_tratada.groupby('sign').size()))\nprint('gender:' ,len(df_treino_tratada.groupby('gender').size()))\nprint('state:' ,len(df_treino_tratada.groupby('state').size()))\nprint('zip:' ,len(df_treino_tratada.groupby('zip').size()))\nprint('channel:' ,len(df_treino_tratada.groupby('channel').size()))\nprint('job_name:' ,len(df_treino_tratada.groupby('job_name').size()))\nprint('real_state:' ,len(df_treino_tratada.groupby('real_state').size()))\nprint('facebook_profile:' ,len(df_treino_tratada.groupby('facebook_profile').size()))","1fd7653f":"df_zip = df_treino_tratada['zip'].value_counts().reset_index(name='count').rename(columns={'index': 'zip'})\ndf_reason = df_treino_tratada['reason'].value_counts().reset_index(name='count').rename(columns={'index': 'reason'})\ndf_job_name = df_treino_tratada['job_name'].value_counts().reset_index(name='count').rename(columns={'index': 'job_name'})\n\ndf_zip_count = pd.merge(df_treino_tratada,df_zip,on=['zip'], how='left' )['count'].rename(\"df_zip_count\")\ndf_reason_count = pd.merge(df_treino_tratada,df_reason,on=['reason'], how='left' )['count'].rename(\"df_reason_count\")\ndf_job_name_count = pd.merge(df_treino_tratada,df_job_name,on=['job_name'], how='left' )['count'].rename(\"df_job_name_count\")","86ab14fb":"df_FINAL = pd.concat([df_treino_tratada[['default','score_3','score_4','score_5','score_6','risk_rate','amount_borrowed', \\\n                                  'borrowed_in_months','credit_limit','income','ok_since','n_bankruptcies', \\\n                                  'n_defaulted_loans','n_accounts','n_issues']], \\\n                     pd.get_dummies(df_treino_tratada.score_1), pd.get_dummies(df_treino_tratada.score_2), \\\n                     pd.get_dummies(df_treino_tratada.sign), pd.get_dummies(df_treino_tratada.gender), \\\n                     pd.get_dummies(df_treino_tratada.real_state), pd.get_dummies(df_treino_tratada.facebook_profile), \\\n                     df_zip_count, df_reason_count, df_job_name_count], axis=1)","8b7ada00":"X, y = df_FINAL.loc[:, df_FINAL.columns != 'default'],df_FINAL['default']\n","c7941299":"from sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(df_FINAL.loc[:, df_FINAL.columns != 'default'],\\\n                                                    df_FINAL['default'], test_size=0.3, random_state=57)","7d70e19c":"print (X_train.shape)\nprint (X_test.shape)\nprint (Y_train.shape)\nprint (Y_test.shape)","824711b6":"from sklearn.ensemble import VotingClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn import model_selection\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB \nfrom sklearn.ensemble import RandomForestClassifier,AdaBoostClassifier,GradientBoostingClassifier\n# Necessario utilizar outro pacote\nfrom mlxtend.classifier import StackingClassifier\nimport numpy as np\nfrom xgboost.sklearn import XGBClassifier\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\nclf1_params = {'max_depth': 3, 'min_samples_leaf': 1, 'min_samples_split': 2, 'n_estimators': 100, 'subsample': 1}\nclf1 = GradientBoostingClassifier(**clf1_params)\n\nclf2_params = {'learning_rate': 0.3, 'n_estimators': 150}\nclf2 = AdaBoostClassifier(**clf2_params)\n\nclf3_params = {'colsample_bytree': 0.9, 'learning_rate': 0.05, 'max_depth': 4, 'min_child_weight': 7, \\\n                      'n_estimators': 200, 'nthread': 4, 'objective': 'binary:logistic', 'seed': 57, 'silent': 1, \\\n                      'subsample': 0.7, 'base_score': 0.8}\nclf3 = XGBClassifier(**clf3_params)\n\neclf = VotingClassifier(estimators=[('gradBos',clf1),  ('adaBoost', clf2),  ('xgboost',clf3)], \n                        voting='soft')\n\n\n\n# Ajustando cada modelo separadamente\nfor clf, label in zip([clf1,clf2,  clf3, eclf], ['gradBos', 'adaBoost', 'xgboost', 'Voting']):\n    scores = cross_val_score(clf, X_train, Y_train, cv=4, scoring='roc_auc')\n    print(\"roc_auc: %0.4f (+\/- %0.2f) [%s]\" % (scores.mean(), scores.std(), label))\n#\n# roc_auc: 0.7711 (+\/- 0.01) [gradBos]\n# roc_auc: 0.7737 (+\/- 0.01) [adaBoost]\n# roc_auc: 0.7724 (+\/- 0.01) [xgboost]\n# roc_auc: 0.7727 (+\/- 0.01) [Voting]","9e135dae":"eclf.fit(X_train, Y_train)\n\neclf_final = eclf.predict_proba(X_test)[:,1]","45893767":"from sklearn.metrics import roc_auc_score\n\n\nprint(\"AUC: \", roc_auc_score(Y_test, eclf_final))\n\n# Melhor XBoost: AUC:  0.7636338573553124","ddc2ad42":"\n\nclf1_params = {'max_depth': 3, 'min_samples_leaf': 1, 'min_samples_split': 2, 'n_estimators': 100, 'subsample': 1}\nclf1 = GradientBoostingClassifier(**clf1_params)\n\nclf2_params = {'learning_rate': 0.3, 'n_estimators': 150}\nclf2 = AdaBoostClassifier(**clf2_params)\n\nclf3_params = {'colsample_bytree': 0.9, 'learning_rate': 0.05, 'max_depth': 4, 'min_child_weight': 7, \\\n                      'n_estimators': 200, 'nthread': 4, 'objective': 'binary:logistic', 'seed': 57, 'silent': 1, \\\n                      'subsample': 0.7, 'base_score': 0.8}\nclf3 = XGBClassifier(**clf3_params)\n\nlr = LogisticRegression()\n\n\n# Define que a regressao logistica utilizara a previsao dos 5 modelos\nsclf = StackingClassifier(classifiers=[ clf1, clf2, clf3] ,meta_classifier=lr)\n\n\nfor clf, label in zip([ clf1, clf2, clf3,sclf], \n                      [\n                       'gradBos', \n                       'adaBoost',\n                       'xgboost',\n                       'StackingClassifier']):\n\n    scores = model_selection.cross_val_score(clf, X_train, Y_train, \n                                              cv=3, scoring='roc_auc')\n    print(\"roc_auc: %0.4f (+\/- %0.2f) [%s]\" \n          % (scores.mean(), scores.std(), label))","ee7f88e2":"from xgboost.sklearn import XGBClassifier\n\n\nclf2_params = {'learning_rate': 0.3, 'n_estimators': 150}\nmodel = AdaBoostClassifier(**clf2_params)\nprint(1)\n\nmodel.fit(X_train, Y_train)\nprint(1)\n\nxgb_proba = model.predict_proba(X_test)[:,1]\nprint(1)\n","a7d16cf1":"print(\"AUC: \", roc_auc_score(Y_test, xgb_proba))","5a09a075":"df_teste = pd.read_csv(\"teste_data.csv\")\n","5c63275e":"df_teste.info()","4ed7bde4":"df_teste['credit_limit'].fillna(sub_credit_limit, inplace=True)\ndf_teste['ok_since'].fillna(sub_ok_since, inplace=True)\ndf_teste['n_bankruptcies'].fillna(sub_n_bankruptcies, inplace=True)\ndf_teste['n_defaulted_loans'].fillna(sub_n_defaulted_loans, inplace=True)\ndf_teste['n_issues'].fillna(sub_n_issues, inplace=True)\n\ndf_teste['reason'].fillna('NA1', inplace=True)\ndf_teste['sign'].fillna('NA2', inplace=True)\ndf_teste['gender'].fillna('NA3', inplace=True)\ndf_teste['facebook_profile'].fillna('NA4', inplace=True)\ndf_teste['job_name'].fillna('NA5', inplace=True)\n\ndf_teste.info()","59b2ac43":"#df_treino_tratada = DataFrameImputer().fit_transform(df_teste)\n#df_treino_tratada=df_treino_tratada.reset_index()\ndf_treino_tratada=df_teste","1350cd09":"#df_zip = df_treino_tratada['zip'].value_counts().reset_index(name='count').rename(columns={'index': 'zip'})\n#df_reason = df_treino_tratada['reason'].value_counts().reset_index(name='count').rename(columns={'index': 'reason'})\n#df_job_name = df_treino_tratada['job_name'].value_counts().reset_index(name='count').rename(columns={'index': 'job_name'})\n\ndf_zip_count = pd.merge(df_treino_tratada,df_zip,on=['zip'], how='left' )['count'].rename(\"df_zip_count\")\ndf_reason_count = pd.merge(df_treino_tratada,df_reason,on=['reason'], how='left' )['count'].rename(\"df_reason_count\")\ndf_job_name_count = pd.merge(df_treino_tratada,df_job_name,on=['job_name'], how='left' )['count'].rename(\"df_job_name_count\")","a34de3ea":"df_FINAL = pd.concat([df_treino_tratada[['score_3','score_4','score_5','score_6','risk_rate','amount_borrowed', \\\n                                  'borrowed_in_months','credit_limit','income','ok_since','n_bankruptcies', \\\n                                  'n_defaulted_loans','n_accounts','n_issues']], \\\n                     pd.get_dummies(df_treino_tratada.score_1), pd.get_dummies(df_treino_tratada.score_2), \\\n                     pd.get_dummies(df_treino_tratada.sign), pd.get_dummies(df_treino_tratada.gender), \\\n                     pd.get_dummies(df_treino_tratada.real_state), pd.get_dummies(df_treino_tratada.facebook_profile), \\\n                     df_zip_count, df_reason_count, df_job_name_count], axis=1)","c1d62baa":"np.where(np.isnan(df_FINAL))","e96fa129":"df_FINAL_2 = np.nan_to_num(df_FINAL)","2670794b":"np.where(np.isnan(df_FINAL_2))","e1e3fc7a":"xgb_classifier_y_prediction = model.predict_proba(df_FINAL_2)","c183602f":"df_probs=pd.DataFrame(xgb_classifier_y_prediction[:,1], columns=['prob'])","a8e3c296":"df_SEND = pd.concat([df_teste[['ids']], df_probs[['prob']]], axis=1)","21dee36c":"df_SEND.to_csv('send_3_1.csv',index=False)","ccdca2f9":"## Stacking","d7193213":"## O melhor foi o Ada separadamento","8762953f":"### Aplicando na base teste"}}