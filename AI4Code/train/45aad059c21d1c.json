{"cell_type":{"53cd4dde":"code","d1ff940e":"code","0496d661":"code","288e338a":"code","c3a4a8a8":"code","44162ad3":"code","158b322b":"code","739ad8c1":"code","4d3b4102":"code","e1923f51":"code","471275c6":"code","795a297c":"code","a451c0ce":"code","c0361227":"code","d0e992bd":"code","e224a45f":"code","93c8be75":"code","a03e42f7":"code","4a6b5644":"code","9b63f70c":"code","b0ce3fb7":"code","6c0f6bdd":"code","23c36c45":"code","7cd38ee9":"code","d61b7581":"code","4b4ce607":"code","1f01b32c":"code","260c6705":"code","051b9d8c":"code","35ada6f3":"markdown","b3d2d180":"markdown","b4686273":"markdown","4e4d4b2c":"markdown","69c4d831":"markdown","0c03af74":"markdown","61de6733":"markdown","31821c57":"markdown","e1ecc481":"markdown"},"source":{"53cd4dde":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport keras\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.utils import to_categorical\nfrom keras.layers import Dense, Input, Flatten, Dropout, Add\nfrom keras.layers import Conv1D, MaxPooling1D, Embedding\nfrom keras.layers import LSTM, Bidirectional\nfrom keras.models import Model\nfrom keras.callbacks import EarlyStopping\nimport gensim\nimport nltk\nfrom nltk.tokenize import RegexpTokenizer\nfrom nltk.corpus import stopwords\nimport re\nimport codecs\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\nstop_words = set(stopwords.words('english'))\n# Any results you write to the current directory are saved as output.","d1ff940e":"EMBEDDING_DIM = 300 # how big is each word vector\nMAX_VOCAB_SIZE = 175303 # how many unique words to use (i.e num rows in embedding vector)\nMAX_SEQUENCE_LENGTH = 200 # max number of words in a comment to use\n\n#training params\nbatch_size = 256 \nnum_epochs = 2 ","0496d661":"train_comments = pd.read_csv(\"..\/input\/manifestos-aus\/train-aus.csv\", sep=',', header=0)\nimport pandas as pd\ndata = pd.DataFrame({'T': ['', 'B', 'C', 'D', 'E']})\nres = pd.get_dummies(data)\nres.to_csv('output.csv')\nprint res\ntrain_comments.columns=['id', 'p401', 'p501', 'severe_toxic', 'obscene', 'threat', 'insult', 'identity_hate']\nprint(\"num train: \", train_comments.shape[0])\ntrain_comments.head()","288e338a":"label_names = [\"toxic\", \"severe_toxic\", \"obscene\", \"threat\", \"insult\", \"identity_hate\"]\ny_train = train_comments[label_names].values","c3a4a8a8":"test_comments = pd.read_csv(\"..\/input\/jigsaw-toxic-comment-classification-challenge\/test.csv\", sep=',', header=0)\ntest_comments.columns=['id', 'comment_text']\nprint(\"num test: \", test_comments.shape[0])\ntest_comments.head()","44162ad3":"def standardize_text(df, text_field):\n    df[text_field] = df[text_field].str.replace(r\"http\\S+\", \"\")\n    df[text_field] = df[text_field].str.replace(r\"http\", \"\")\n    df[text_field] = df[text_field].str.replace(r\"@\\S+\", \"\")\n    df[text_field] = df[text_field].str.replace(r\"[^A-Za-z0-9(),!?@\\'\\`\\\"\\_\\n]\", \" \")\n    df[text_field] = df[text_field].str.replace(r\"@\", \"at\")\n    df[text_field] = df[text_field].str.lower()\n    return df","158b322b":"train_comments.fillna('_NA_')\ntrain_comments = standardize_text(train_comments, \"text\")\ntrain_comments.to_csv(\"train_clean_data.csv\")\ntrain_comments.head()","739ad8c1":"test_comments.fillna('_NA_')\ntest_comments = standardize_text(test_comments, \"comment_text\")\ntest_comments.to_csv(\"test_clean_data.csv\")\ntest_comments.head()","4d3b4102":"tokenizer = RegexpTokenizer(r'\\w+')\nclean_train_comments = pd.read_csv(\"train_clean_data.csv\")\nclean_train_comments['text'] = clean_train_comments['text'].astype('str') \nclean_train_comments.dtypes\nclean_train_comments[\"tokens\"] = clean_train_comments[\"comment_text\"].apply(tokenizer.tokenize)\n# delete Stop Words\nclean_train_comments[\"tokens\"] = clean_train_comments[\"tokens\"].apply(lambda vec: [word for word in vec if word not in stop_words])\n   \nclean_train_comments.head()","e1923f51":"clean_test_comments = pd.read_csv(\"test_clean_data.csv\")\nclean_test_comments['comment_text'] = clean_test_comments['comment_text'].astype('str') \nclean_test_comments.dtypes\nclean_test_comments[\"tokens\"] = clean_test_comments[\"comment_text\"].apply(tokenizer.tokenize)\nclean_test_comments[\"tokens\"] = clean_test_comments[\"tokens\"].apply(lambda vec: [word for word in vec if word not in stop_words])\n\nclean_test_comments.head()","471275c6":"all_training_words = [word for tokens in clean_train_comments[\"tokens\"] for word in tokens]\ntraining_sentence_lengths = [len(tokens) for tokens in clean_train_comments[\"tokens\"]]\nTRAINING_VOCAB = sorted(list(set(all_training_words)))\nprint(\"%s words total, with a vocabulary size of %s\" % (len(all_training_words), len(TRAINING_VOCAB)))\nprint(\"Max sentence length is %s\" % max(training_sentence_lengths))\n#print(clean_train_comments[\"tokens\"])","795a297c":"all_test_words = [word for tokens in clean_test_comments[\"tokens\"] for word in tokens]\ntest_sentence_lengths = [len(tokens) for tokens in clean_test_comments[\"tokens\"]]\nTEST_VOCAB = sorted(list(set(all_test_words)))\nprint(\"%s words total, with a vocabulary size of %s\" % (len(all_test_words), len(TEST_VOCAB)))\nprint(\"Max sentence length is %s\" % max(test_sentence_lengths))\n","a451c0ce":"word2vec_path = \"..\/input\/googles-trained-word2vec-model-in-python\/GoogleNews-vectors-negative300.bin.gz\"\nword2vec = gensim.models.KeyedVectors.load_word2vec_format(word2vec_path, binary=True)\n\ndef get_average_word2vec(tokens_list, vector, generate_missing=False, k=300):\n    if len(tokens_list)<1:\n        return np.zeros(k)\n    if generate_missing:\n        vectorized = [vector[word] if word in vector else np.random.rand(k) for word in tokens_list]\n    else:\n        vectorized = [vector[word] if word in vector else np.zeros(k) for word in tokens_list]\n    length = len(vectorized)\n    summed = np.sum(vectorized, axis=0)\n    averaged = np.divide(summed, length)\n    return averaged\n\ndef get_word2vec_embeddings(vectors, clean_comments, generate_missing=False):\n    embeddings = clean_comments['tokens'].apply(lambda x: get_average_word2vec(x, vectors, \n                                                                                generate_missing=generate_missing))\n    return list(embeddings)","c0361227":"training_embeddings = get_word2vec_embeddings(word2vec, clean_train_comments, generate_missing=True)\n# test_embeddings = get_word2vec_embeddings(word2vec, clean_test_comments, generate_missing=True)","d0e992bd":"tokenizer = Tokenizer(num_words=MAX_VOCAB_SIZE, lower=True, char_level=False)\ntokenizer.fit_on_texts(clean_train_comments[\"comment_text\"].tolist())\ntraining_sequences = tokenizer.texts_to_sequences(clean_train_comments[\"comment_text\"].tolist())\n\ntrain_word_index = tokenizer.word_index\nprint('Found %s unique tokens.' % len(train_word_index))\n\ntrain_cnn_data = pad_sequences(training_sequences, maxlen=MAX_SEQUENCE_LENGTH)\n#print(train_cnn_data[:4])\n\ntrain_embedding_weights = np.zeros((len(train_word_index)+1, EMBEDDING_DIM))\n\nfor word,index in train_word_index.items():\n    train_embedding_weights[index,:] = word2vec[word] if word in word2vec else np.random.rand(EMBEDDING_DIM)\nprint(train_embedding_weights[3:5])\nprint(\"-----------=====-----------\")\nprint(train_embedding_weights.shape)","e224a45f":"test_sequences = tokenizer.texts_to_sequences(clean_test_comments[\"comment_text\"].tolist())\nprint(clean_test_comments[\"comment_text\"][4])\nprint(test_sequences[4])\ntest_cnn_data = pad_sequences(test_sequences, maxlen=MAX_SEQUENCE_LENGTH)\n","93c8be75":"from keras.layers.merge import concatenate, add\n\ndef ConvNet(embeddings, max_sequence_length, num_words, embedding_dim, labels_index, trainable=False, extra_conv=True):\n    #the filter\n    embedding_layer = Embedding(num_words,\n                            embedding_dim,\n                            weights=[embeddings],\n                            input_length=max_sequence_length,\n                            trainable=trainable)\n\n    #the unknown image\n    sequence_input = Input(shape=(max_sequence_length,), dtype='int32')\n    #the merge function of the first convolution \n    embedded_sequences = embedding_layer(sequence_input)\n\n    # Yoon Kim model (https:\/\/arxiv.org\/abs\/1408.5882)\n    convs = []\n    filter_sizes = [3,4,5] # in the loop, first apply 3 as size, then 4 then 5\n\n    for filter_size in filter_sizes:\n        l_conv = Conv1D(filters=128, kernel_size=filter_size, activation='relu')(embedded_sequences)\n        #kernel is the filter\n        l_pool = MaxPooling1D(pool_size=3)(l_conv)\n        convs.append(l_pool)\n\n    l_merge = concatenate(convs, axis=1)\n\n    \n    # activated if extra_convoluted is true at the def\n    # add a 1D convnet with global maxpooling, instead of Yoon Kim model\n    conv = Conv1D(filters=128, kernel_size=3, activation='relu')(embedded_sequences)\n    pool = MaxPooling1D(pool_size=3)(conv)\n\n    if extra_conv==True:\n        x = Dropout(0.5)(l_merge)  \n    else:\n        # Original Yoon Kim model\n        x = Dropout(0.5)(pool)\n    x = Flatten()(x)\n    x = Dense(128, activation='relu')(x)\n    x = Dropout(0.5)(x)\n    # Finally, we feed the output into a Sigmoid layer.\n    # The reason why sigmoid is used is because we are trying to achieve a binary classification(1,0) \n    # for each of the 6 labels, and the sigmoid function will squash the output between the bounds of 0 and 1.\n    preds = Dense(labels_index, activation='sigmoid')(x)\n\n    model = Model(sequence_input, preds)\n    model.compile(loss='binary_crossentropy',\n                  optimizer='adam',\n                  metrics=['acc'])\n    model.summary()\n    return model","a03e42f7":"x_train = train_cnn_data\ny_tr = y_train\nprint(len(list(label_names)))","4a6b5644":"model = ConvNet(train_embedding_weights, MAX_SEQUENCE_LENGTH, len(train_word_index)+1, EMBEDDING_DIM, len(list(label_names)), False)","9b63f70c":"#define callbacks\nearly_stopping = EarlyStopping(monitor='val_loss', min_delta=0.01, patience=4, verbose=1)\ncallbacks_list = [early_stopping]","b0ce3fb7":"hist = model.fit(x_train, y_tr, epochs=num_epochs, callbacks=callbacks_list, validation_split=0.1, shuffle=True, batch_size=batch_size)","6c0f6bdd":"y_test = model.predict(test_cnn_data, batch_size=1024, verbose=1)","23c36c45":"#create a submission\nsubmission_df = pd.DataFrame(columns=['id'] + label_names)\nsubmission_df['id'] = test_comments['id'].values \nsubmission_df[label_names] = y_test \nsubmission_df.to_csv(\".\/cnn_submission.csv\", index=False)","7cd38ee9":"#generate plots\nplt.figure()\nplt.plot(hist.history['loss'], lw=2.0, color='b', label='train')\nplt.plot(hist.history['val_loss'], lw=2.0, color='r', label='val')\nplt.title('CNN sentiment')\nplt.xlabel('Epochs')\nplt.ylabel('Cross-Entropy Loss')\nplt.legend(loc='upper right')\nplt.show()","d61b7581":"plt.figure()\nplt.plot(hist.history['acc'], lw=2.0, color='b', label='train')\nplt.plot(hist.history['val_acc'], lw=2.0, color='r', label='val')\nplt.title('CNN sentiment')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.legend(loc='upper left')\nplt.show()","4b4ce607":"from keras.preprocessing import sequence \nfrom keras.models import Sequential \nfrom keras.layers import Dense, Dropout, Embedding, LSTM \nnum_words = 1000","1f01b32c":"x_train = sequence.pad_sequences(x_train, maxlen=200) \nx_test = sequence.pad_sequences(y_tr, maxlen=200)","260c6705":"#Define network architecture and compile \nmodel = Sequential() \nmodel.add(Embedding(num_words, 50, input_length=200)) \nmodel.add(Dropout(0.2)) \nmodel.add(LSTM(100, dropout=0.2, recurrent_dropout=0.2)) \nmodel.add(Dense(250, activation='relu')) \nmodel.add(Dropout(0.2)) \nmodel.add(Dense(1, activation='sigmoid'))\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy']) ","051b9d8c":"print(\"ok\")\nmodel.fit(x_train, x_test, batch_size=64, epochs=2) \n\nprint('\\nAccuracy: {}'. format(model.evaluate(x_test, x_test)[1]))","35ada6f3":"In this Kernel uses Manifestos Project data [add reference], and presents a pipeline of using Deep Learning Algorithms to classify blog\/forum comments. In the current version the following types of Neural Network Algorithms have been implemented:\n* **Convolutional Neural Networks (CNN)** (Kim, 2014) with **Word2Vec** (Google) \n* **Long Short Term Memory (LSTM)** Recurrent Neural Networks, with **Word2Vec** (Google)\n\n## CNN & Word2Vec Implementation\nThe general logic behind CNNs is presented in Kim (2014).  To use CNNs for sentence classification, imagine sentences and words as image pixels, where the input is sentences are represented as a matrix. \n\nEach row of the matrix is a vector that represents a sentence. \n\nThis vector is the average of  **word2vec** (Google\u2019s Word2Vec pre-trained model) scores of all words in our sentence.\n\nFor 10 sentences using a 300-dimensional embedding we would have a 10\u00d7300 matrix as our input. \nThat\u2019s our \u201cimage\u201d.\n","b3d2d180":"Now let's train our Neural Network","b4686273":"Note that we set the _num_epochs_ is low on purpose, so as not to exceed the 14GB RAM of training of the Word2Vec operation later on. For comparison purposes, it might actually be best to do at least 10, so that the histogram gives some more data points.","4e4d4b2c":"## LSTM (bidirectional RNN) & Word2Vec\nUsing the trained word to vector datasets, this section will classify the test sentences using a type of Recurrent Neural Network (Long Short Term Model) and Word2Vec, using Keras libraries.","69c4d831":"**Cleaning Text**","0c03af74":"Define a Convolutional Neural Network following Yoon Kim model [2]","61de6733":"Word2vec is a model that was pre-trained on a very large corpus, and provides embeddings that map words that are similar close to each other. A quick way to get a sentence embedding for our classifier, is to average word2vec scores of all words in our sentence. In this way we lose the syntax of our sentence, while keeping some semantic information.\n![](https:\/\/cdn-images-1.medium.com\/max\/1400\/1*THo9NKchWkCAOILvs1eHuQ.png)","31821c57":"**References**:   \n* [1] How to solve 90% of NLP problems: a step-by-step guide\n * https:\/\/blog.insightdatascience.com\/how-to-solve-90-of-nlp-problems-a-step-by-step-guide-fda605278e4e\n* [2] Yoon Kim model\n * https:\/\/arxiv.org\/abs\/1408.5882\n* [3] Understanding Convolutional Neural Networks for NLP:\n * http:\/\/www.wildml.com\/2015\/11\/understanding-convolutional-neural-networks-for-nlp\/","e1ecc481":"**Tokenizing Text**"}}