{"cell_type":{"848cc1bb":"code","01ec3da1":"code","c4fff541":"code","cdc63f44":"code","99bd41b3":"code","f2bada76":"code","a3f66133":"code","547c0b98":"code","4d7177bb":"code","3cddae03":"code","a35d6799":"code","e76c164d":"code","dee4c702":"code","6c90579b":"code","eadc056d":"code","4b4a2c9e":"code","5058b3c8":"code","8f01cd2e":"code","895a799e":"code","58f9c9e7":"code","067d48ef":"code","db1f7af9":"code","73ce5119":"code","39aa5867":"code","98933771":"code","fef04504":"code","f536bfe9":"code","e0237da5":"code","acfc573d":"code","45832d3b":"code","383ea1d3":"code","3028b21f":"code","d050d527":"code","90117c9a":"code","e18ccbd2":"markdown","346f43e3":"markdown","7ce224f5":"markdown","e3b124ce":"markdown","4ed4228e":"markdown","8854db4e":"markdown","bab26234":"markdown","a7eab864":"markdown"},"source":{"848cc1bb":"import pandas as pd\nimport numpy as np\nimport math\nimport itertools\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import axes3d\n\nfrom sklearn.model_selection import train_test_split,GridSearchCV\nfrom sklearn.metrics import accuracy_score,f1_score,confusion_matrix\nfrom sklearn import preprocessing\nfrom sklearn.decomposition import PCA \nfrom sklearn.manifold import TSNE\nfrom sklearn.feature_selection import SelectKBest,chi2\nfrom sklearn.ensemble import GradientBoostingClassifier, AdaBoostClassifier\nfrom xgboost import XGBClassifier\n\n%matplotlib inline\n\n# Set Random Seed\n\nnp.random.seed(42)\nnp.random.RandomState(42)","01ec3da1":"from sklearn.model_selection import KFold\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier","c4fff541":"def train(Cancer_models):\n  db = pd.read_csv(\"..\/input\/breast-cancer-wisconsin-data\/data.csv\")\n  df = pd.DataFrame(db)\n  df['Outcome'] = df['Outcome'].apply(lambda x: '1' if x == 'R' else '0')\n  df['Outcome'] = pd.to_numeric(df['Outcome'], downcast = \"integer\")\n  X = db.drop(['Outcome', 'ID'], axis = 1)\n  y = db['Outcome']\n  X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.4, random_state=42)\n  df = pd.DataFrame(X_test)\n \n  kf = KFold(n_splits = 5, shuffle = True, random_state = 2)\n  result = next(kf.split(db), None)\n  sc = preprocessing.StandardScaler()\n  X_train = sc.fit_transform(X_train)\n  X_test = sc.transform(X_test)\n  Cancer_models[0].append(LogisticRegression().fit(X_train,y_train))\n  Cancer_models[1].append(KNeighborsClassifier().fit(X_train,y_train))\n  Cancer_models[2].append(RandomForestClassifier().fit(X_train,y_train))\n  return Cancer_models","cdc63f44":"def predict(Cancer_models):\n  print('Input: radius_mean\ttexture_mean\tperimeter_mean\tarea_mean\tsmoothness_mean\tcompactness_mean\tconcavity_mean\tconcave_points_mean\tsymmetry_mean\tfractal_dimension_mean\tradius_std_dev\ttexture_std_dev\tperimeter_std_dev\tarea_std_dev\tsmoothness_std_dev\tcompactness_std_dev\tconcavity_std_dev\tconcave_points_std_dev\tsymmetry_std_dev\tfractal_dimension_std_dev\tWorst_radius\tWorst_texture\tWorst_perimeter\tWorst_area\tWorst_smoothness\tWorst_compactness\tWorst_concavity\tWorst_concave_points\tWorst_symmetry\tWorst_fractal_dimension\tTumor_Size\tLymph_Node_Status')\n  x_pred = list(map(float, input().split()))\n  x_pred = np.expand_dims(x_pred, axis = 0)\n  predict1 = Cancer_models[0][1].predict(x_pred)\n  predict2 = Cancer_models[1][1].predict(x_pred)\n  predict3 = Cancer_models[2][1].predict(x_pred)\n  print('LR: ', predict1)\n  print('KNN: ', predict2)\n  print('RF: ', predict3)","99bd41b3":"def BreastCancerA(f):\n  print('1: Train Again, 2: Load Trained Model')\n  Cancer_models = [[\"LogisticRegression\"],\n                [\"KNeighborsClassifier\"],\n                [\"RandomForestClassifier\"]]\n  # f = int(input())\n  if(f == 1):\n    Cancer_models = train(Cancer_models)\n  elif(f == 2):\n    model1 = pickle.load(open('BCModel.sav', 'rb'))\n    model2 = pickle.load(open('BCModel.sav', 'rb'))\n    model3 = pickle.load(open('BCModel.sav', 'rb'))\n    Cancer_models[0].append(model1)\n    Cancer_models[1].append(model2)\n    Cancer_models[2].append(model3)\n  else:\n    print('Incorrect input!')\n  predict(Cancer_models)","f2bada76":"# BreastCancerA(1)\n# input: 15.30\t25.27\t102.4\t732.4\t0.10820\t0.1697\t0.16830\t0.08751\t0.1926\t0.06540\t0.4390\t1.0120\t3.498\t43.50\t0.005233\t0.03057\t0.03576\t0.01083\t0.01768\t0.002967\t20.27\t36.71\t149.30\t1269.0\t0.1641\t0.6110\t0.6335\t0.2024\t0.4027\t0.09876\t2.0\t0","a3f66133":"# def BreastCancerMain():\n#   # print('1: Task A, 2: Task B')\n#   # f = int(input())\n#   # if(f == 1):\n#   #   BreastCancerA()\n#   # elif(f == 2):\n#   #   BreastCancerB()\n#   # else:\n#   #   print('Incorrect input!')","547c0b98":"db= pd.read_csv(\"..\/input\/breast-cancer-wisconsin-data\/data.csv\")\ndb.head(6)","4d7177bb":"db.tail()","3cddae03":"db.describe()","a35d6799":"db.isnull().sum()","e76c164d":"df = pd.DataFrame(db)\n# from sklearn.preprocessing import OneHotEncoder\n# # creating instance of one-hot-encoder\n# enc = OneHotEncoder(handle_unknown='ignore')\n\n# enc_df = pd.DataFrame(enc.fit_transform(df[['Outcome']]).toarray())\n\n# df = df.join(enc_df)\n# df","dee4c702":"df['diagnosis'] = df['diagnosis'].apply(lambda x: '1' if x == 'M' else '0')\ndf","6c90579b":"df['diagnosis'] = pd.to_numeric(df['diagnosis'], downcast = \"integer\")","eadc056d":"# db['Outcome'] = db['Outcome'].apply(lambda x:'1' if x == 'R' else '0')\n\n# db.head(20)","4b4a2c9e":"# df = pd.DataFrame(db)\n# df","5058b3c8":"sns.lineplot(x=db[\"radius_mean\"],y=db[\"perimeter_mean\"], hue=db[\"diagnosis\"])","8f01cd2e":"#Countplot\nsns.countplot(db['diagnosis'])","895a799e":"# Barplot: diagnosis vs area_mean.\nsns.barplot(db['diagnosis'],db['area_mean'])","58f9c9e7":"sns.scatterplot(x = db['area_mean'],y= db['smoothness_mean'],hue=db['diagnosis'])","067d48ef":"X = db.drop(['diagnosis','id','Unnamed: 32'], axis = 1)\ny = db['diagnosis']\n\nX_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.4, random_state=42)\n# x_train, _test = train_test_split(a, test_size=0.40, random_state=0)\n","db1f7af9":"X_train.head()","73ce5119":"X_test.head()\n# from sklearn.preprocessing import LabelBinarizer\n\n# encoder = LabelBinarizer()\n# Y = encoder.fit_transform(X_train)","39aa5867":"# Saving test data\ndf = pd.DataFrame(X_test)\ndf.to_excel('testdata.xlsx')\n","98933771":"df.dropna()\ndf","fef04504":"y_test","f536bfe9":"from sklearn.model_selection import KFold\nkf = KFold(n_splits = 5, shuffle = True, random_state = 42)\nresult = next(kf.split(db), None)\nprint (result)","e0237da5":"\n\n\nsc = preprocessing.StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","acfc573d":"Cancer_models = [[\"LogisticRegression\",LogisticRegression()],\n                [\"KNeighborsClassifier\",KNeighborsClassifier()],\n                [\"RandomForestClassifier\",RandomForestClassifier()]]","45832d3b":"acc = []\nfor i in Cancer_models:\n  log = i[1]\n  log.fit(X_train,y_train)\n  predict = log.predict(X_test)\n  acc.append([i[0],accuracy_score(predict,y_test)*100.0])\n   ","383ea1d3":"main_score = pd.DataFrame(acc)\nmain_score.columns = [\"Model\",\"Score\"]","3028b21f":"print(\"Accuracy Scores:\")\nmain_score","d050d527":"conf_mat = confusion_matrix(y_test, predict)\nclass_label = [\"negative\", \"positive\"]\ndf = pd.DataFrame(conf_mat, index = class_label, columns = class_label)\nsns.heatmap(df, annot = True,fmt=\"d\")\nplt.title(\"Confusion Matrix\")\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.show()","90117c9a":"\ndf","e18ccbd2":"___________________\n## Main Task:","346f43e3":"___\nscatterplot: that shows the charactetstic of how much one variable is affected by another, as far as correlation is concerned.","7ce224f5":"Building three types of classifier model:\n* Logistic Regression\n* KNN\n* Random Forest\n","e3b124ce":"# Predictive Model for new patient prediction:","4ed4228e":"### Data-Preprocessing","8854db4e":"Ploting for types of Diagnosis:\n* Cancer M(1)  and B(0) ","bab26234":"________________________________________________________________________________________________________________________________________________\n# Task A\n* Building a classifier to predict the outcome of a new patient.\n","a7eab864":"___________________________________________\n\n##Feature Scalling and Training"}}