{"cell_type":{"e6123351":"code","54b9e41b":"code","7674fbbd":"code","e0f56d48":"code","c588808a":"code","26b3a9a9":"code","06155bc2":"code","f396deec":"code","aa1d287f":"code","c12b60a9":"code","e7474c50":"code","23088114":"code","0109f9fb":"code","4cf0983a":"code","e6c85fcc":"code","cd939811":"code","94476870":"code","e18c3e6b":"code","cb0f1ef0":"code","16383e72":"code","5422c20f":"code","268030b0":"code","5bb84295":"code","e09d4fec":"code","2329dcad":"code","c4eccde8":"code","818b9f4f":"code","ac86f7fa":"code","53867323":"code","40157bf3":"code","d3b15eb7":"markdown","ace84cb4":"markdown","72b7f674":"markdown"},"source":{"e6123351":"!pip install sweetviz","54b9e41b":"#libraries to use\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.preprocessing import minmax_scale\nimport sweetviz as sv\n%matplotlib inline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.feature_selection import RFE\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import Ridge\nfrom sklearn.metrics import mean_squared_error","7674fbbd":"pd.set_option('display.max_columns', None)\neng_grad_train_data  = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/dphi-official\/Datasets\/master\/eng_grad_emp_salary\/training_set_label.csv\" )\nholdout_data = pd.read_csv('https:\/\/raw.githubusercontent.com\/dphi-official\/Datasets\/master\/eng_grad_emp_salary\/testing_set_label.csv')","e0f56d48":"eng_grad_train_data.head()","c588808a":"#to visualize the data\nmy_report = sv.analyze(holdout_data)\nmy_report.show_html()","26b3a9a9":"eng_grad_train_data.shape\nholdout_data.shape","06155bc2":"eng_grad_train_data['birth_year']=eng_grad_train_data['DOB'].str.split('-').str[0]\nholdout_data['birth_year']=holdout_data['DOB'].str.split('-').str[0]","f396deec":"eng_grad_train_data['birth_year']=eng_grad_train_data['birth_year'].astype('category')\nholdout_data['birth_year']=holdout_data['birth_year'].astype('category')\neng_grad_train_data['CollegeTier']=eng_grad_train_data['CollegeTier'].astype('category')\nholdout_data['CollegeTier']=holdout_data['CollegeTier'].astype('category')\neng_grad_train_data['GraduationYear']=eng_grad_train_data['GraduationYear'].astype('category')\nholdout_data['GraduationYear']=holdout_data['GraduationYear'].astype('category')","aa1d287f":"holdout_data.describe(include='all')","c12b60a9":"eng_grad_train_data['10board']=eng_grad_train_data['10board'].astype('category').cat.codes\nholdout_data['10board']=holdout_data['10board'].astype('category').cat.codes","e7474c50":"eng_grad_train_data.drop(columns=['DOB','12board'],inplace=True)\nholdout_data.drop(columns=['DOB','12board'],inplace=True)","23088114":"eng_grad_train_data.info()\nholdout_data.info()","0109f9fb":"eng_grad_train_data['Specialization']=eng_grad_train_data['Specialization'].str.replace('electronics & instrumentation eng',\n                                                                                     'electronics and instrumentation engineering'  )\nholdout_data['Specialization']=holdout_data['Specialization'].str.replace('electronics & instrumentation eng',\n                                                                                     'electronics and instrumentation engineering'  )","4cf0983a":"def create_dummies(df,column_name):\n    dummies=pd.get_dummies(df[column_name],prefix=column_name)\n    df=pd.concat([df,dummies],axis=1)\n    del df[column_name]\n    return df\nfor col in eng_grad_train_data.select_dtypes(include=['object']).columns:\n    eng_grad_train_data[col]=eng_grad_train_data[col].str.lower().str.strip()\n    holdout_data[col]=holdout_data[col].str.lower().str.strip()\n    eng_grad_train_data=create_dummies(eng_grad_train_data,col)\n    holdout_data=create_dummies(holdout_data,col)\nfor col in eng_grad_train_data.select_dtypes(include=['category']).columns:\n    eng_grad_train_data=create_dummies(eng_grad_train_data,col)\n    holdout_data=create_dummies(holdout_data,col)","e6c85fcc":"X=eng_grad_train_data.drop(columns=['Salary'])\nY=eng_grad_train_data.Salary\nprint(X.shape)","cd939811":"X.shape","94476870":"holdout_data.columns","e18c3e6b":"X.columns","cb0f1ef0":"X=X.drop(columns=['CollegeState_assam'\n,'CollegeState_goa',\n'CollegeState_union territory',\n'CollegeState_meghalaya',\n                 'Specialization_aeronautical engineering','Specialization_biomedical engineering','Specialization_ceramic engineering',\n                 'Specialization_computer and communication engineering','Specialization_computer networking','Specialization_control and instrumentation engineering',\n                 'Specialization_embedded systems technology','Specialization_industrial & management engineering','Specialization_industrial engineering',\n                 'Specialization_information science', 'Specialization_mechanical & production engineering',\n       'Specialization_mechanical and automation',\n       'Specialization_mechanical engineering','GraduationYear_0','GraduationYear_2007','birth_year_1981','birth_year_1995',\n'birth_year_1997'])\nholdout_data=holdout_data.drop(columns=['Specialization_polymer technology',\n       'Specialization_power systems and automation','birth_year_1977'])","16383e72":"holdout_data.shape","5422c20f":"X.head()","268030b0":"scaler = StandardScaler()\n\nX=pd.DataFrame(scaler.fit_transform(X),columns=X.columns)\nholdout_data=pd.DataFrame(scaler.fit_transform(holdout_data),columns=holdout_data.columns)\n# from sklearn.preprocessing import minmax_scale\n# for col in eng_grad_train_data.columns:\n#     eng_grad_train_data[col+\"scaled\"]=minmax_scale(eng_grad_train_data[col])\n#     #holdout_data[col+\"scaled\"]=minmax_scale(holdout_data[col])\n# for col in holdout_data.columns:\n#     holdout_data[col+\"scaled\"]=minmax_scale(holdout_data[col])\n    ","5bb84295":"holdout_data.head()","e09d4fec":"X_train, X_test, y_train, y_test = train_test_split(X, Y, \n                                                    test_size=0.11, \n                                                    random_state=11)","2329dcad":"rg=Ridge(max_iter=2000,random_state=21,alpha=0.75,normalize=True,solver='sparse_cg')\nrg.fit(X_train,y_train)\nprediction=rg.predict(X_test)\nrmse=np.sqrt(mean_squared_error(y_test,prediction))\nrmse\n\n","c4eccde8":"rfe = RFE(estimator= rg , step = 1) \n# estimator rg is the baseline model (basic model) that we have created under \"Base line Model\" selection\n# step = 1: removes one feature at a time and then builds a model on the remaining features\n# It uses the model accuracy to identify which features (and combination of features) contribute the most to predicting the target variable.\n# we can even provide no. of features as an argument \n\n# Fit the function for ranking the features\nfit = rfe.fit(X_train, y_train)\n\nprint(\"Num Features: %d\" % fit.n_features_)\nprint(\"Selected Features: %s\" % fit.support_)\nprint(\"Feature Ranking: %s\" % fit.ranking_)","818b9f4f":"pd.set_option('display.max_rows', 500)\nselected_rfe_features = pd.DataFrame({'Feature':list(X_train.columns),\n                                      'Ranking':rfe.ranking_})\nselected_rfe_features.sort_values(by='Ranking')","ac86f7fa":"# Transforming the data\nX_train_rfe = rfe.transform(X_train)\nX_test_rfe = rfe.transform(X_test)\nholdout_rfe = rfe.transform(holdout_data)\n\n# Fitting our baseline model with the transformed data\nlr_rfe_model = rg.fit(X_train_rfe, y_train)","53867323":"# making predictions and evaluating the model\ny_pred_rfe = lr_rfe_model.predict(X_test_rfe)\nrmse=np.sqrt(mean_squared_error(y_test,y_pred_rfe))\nrmse\n","40157bf3":"prediction = lr_rfe_model.predict(holdout_rfe)\nres = pd.DataFrame(prediction) #target is nothing but the final predictions of your model on input features of your new unseen test data\nres.index = holdout_data.index # its important for comparison. Here \"test_new\" is your new test dataset\nres.columns = [\"prediction\"]\nres.to_csv(\"submission.csv\",index=False)","d3b15eb7":"### About the dataset\nThe dataset contains 33 attributes. The target variable refers to the salary of an Engineering Graduate in India. \n\nTo load the training data in your jupyter notebook, use the below command:\n\nimport pandas as pd\n\neng_grad_data  = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/dphi-official\/Datasets\/master\/eng_grad_emp_salary\/training_set_label.csv\" )\n\n#### Data Description\n- ID: A unique ID to identify a candidate\n- Salary: Annual CTC offered to the candidate (in INR)\n- Gender: Candidate's gender\n- DOB: Date of birth of the candidate\n- 10percentage: Overall marks obtained in grade 10 examinations\n- 10board: The school board whose curriculum the candidate followed in grade 10\n- 12graduation: Year of graduation - senior year high school\n- 12percentage: Overall marks obtained in grade 12 examinations\n- 12board: The school board whose curriculum the candidate followed\n- CollegeID: Unique ID identifying the university\/college which the candidate attended for her\/his undergraduate\n- CollegeTier: Each college has been annotated as 1 or 2. The annotations have been computed from the average AMCAT scores obtained by the students in the college\/university. Colleges with an average score above a threshold are tagged as 1 and others as 2.\n- Degree: Degree obtained\/pursued by the candidate\n- Specialization: Specialization pursued by the candidate\n- CollegeGPA: Aggregate GPA at graduation\n- CollegeCityID: A unique ID to identify the city in which the college is located in.\n- CollegeCityTier: The tier of the city in which the college is located in. This is annotated based on the population of the cities.\n-  CollegeState: Name of the state in which the college is located\n- GraduationYear: Year of graduation (Bachelor's degree)\n- English: Scores in AMCAT English section\n- Logical: Score in AMCAT Logical ability section\n- Quant: Score in AMCAT's Quantitative ability section\n- Domain: Scores in AMCAT's domain module\n- ComputerProgramming: Score in AMCAT's Computer programming section\n- ElectronicsAndSemicon: Score in AMCAT's Electronics & Semiconductor Engineering section\n- ComputerScience: Score in AMCAT's Computer Science section\n- MechanicalEngg: Score in AMCAT's Mechanical Engineering section\n- ElectricalEngg: Score in AMCAT's Electrical Engineering section\n- TelecomEngg: Score in AMCAT's Telecommunication Engineering section\n- CivilEngg: Score in AMCAT's Civil Engineering section\n- conscientiousness: Scores in one of the sections of AMCAT's personality test\n- agreeableness: Scores in one of the sections of AMCAT's personality test\n- extraversion: Scores in one of the sections of AMCAT's personality test\n- nueroticism: Scores in one of the sections of AMCAT's personality test\n- openess_to_experience: Scores in one of the sections of AMCAT's personality test\nNote: To give you more context AMCAT is a job portal.\n\nTest Dataset\nLoad the test data (name it as test_data). You can load the data using the below command.\n\ntest_data = pd.read_csv('https:\/\/raw.githubusercontent.com\/dphi-official\/Datasets\/master\/eng_grad_emp_salary\/testing_set_label.csv')\n\nHere the target column is deliberately not there as you need to predict it.\n\n","ace84cb4":"Link for the challenge: https:\/\/dphi.tech\/challenges\/data-sprint-2-engineering-graduates-employment-outcomes\/20\/overview\/about","72b7f674":"### Objective\nA relevant question is what determines the salary and the jobs these engineers are offered right after graduation. Various factors such as college grades, candidate skills, the proximity of the college to industrial hubs, the specialization one have, market conditions for specific industries determine this. On the basis of these various factors, your objective is to determine the salary of an engineering graduate in India.\n\nSubmissions are evaluated using Root-Mean-Squared-Error (RMSE)."}}