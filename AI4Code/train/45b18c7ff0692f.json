{"cell_type":{"e58d6785":"code","e448e1cd":"code","299b5534":"code","ae0c1738":"code","410410d0":"code","04c5f4eb":"code","3c816f32":"code","1fefe690":"code","0064fec7":"code","5b990980":"code","9585a5ec":"code","61287b2a":"code","50060c75":"code","ef2e3a8b":"code","8e2d3c8a":"code","3b07f956":"code","94fb56ac":"code","b2141ab7":"code","7ddf41e7":"code","1513f082":"code","e95d8612":"code","7e6520da":"code","a8aa87cd":"code","51849351":"code","c725ef2a":"code","6fba402b":"code","fb8ec27b":"code","e1a10970":"code","5b3a0380":"code","c5ca1782":"code","b4fe6548":"code","830168df":"markdown","01c6cd0a":"markdown","5ccb4668":"markdown","e3ec933c":"markdown","e81a1b38":"markdown","bc37cd76":"markdown"},"source":{"e58d6785":"# !pip install chart-studio","e448e1cd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt \nimport seaborn as sns \nimport plotly.express as px \nfrom scipy.stats import skew, norm \nfrom warnings import filterwarnings as filt \nimport chart_studio.plotly as py\nimport plotly.graph_objs as go\n\nfilt('ignore') \nplt.style.use('fivethirtyeight')\nplt.rcParams['figure.figsize'] = (12, 6)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","299b5534":"df = pd.read_csv('\/kaggle\/input\/meteorite-landings\/meteorite-landings.csv')\ndf.shape","ae0c1738":"df.head()","410410d0":"df.isnull().sum()","04c5f4eb":"(7315 \/ df.shape[0]) * 100","3c816f32":"df = df.dropna()\ndf.shape","1fefe690":"df.describe()","0064fec7":"df = df[(df.year >= 860) & (df.year <= 2016)]\ndf = df[((df.reclong <= 180) & (df.reclong >= -180)) & ((df.reclat != 0) | (df.reclong != 0))]","5b990980":"sns.distplot(df.year)\nplt.title('year distribution');","9585a5ec":"sns.distplot(df.reclong)\nsns.distplot(df.reclat)\nplt.title('lat and long distribution');\nplt.legend(['longitude', 'latitude'])","61287b2a":"# % of unique meteors \n\n(df.name.unique().shape[0] \/ df.shape[0])","50060c75":"df.describe()","ef2e3a8b":"sns.distplot(df.mass)\nplt.title('mass distribution');","8e2d3c8a":"df.head()","3b07f956":"px.scatter_geo(data_frame = df, lat = 'reclat', lon = 'reclong', color = 'recclass', title = 'metero location and their class')","94fb56ac":"df['fall'] = df.fall.apply(lambda x : 'observed' if x == 'Fell' else 'not-observed')\npx.scatter_geo(data_frame = df, lat = 'reclat', lon = 'reclong', color = 'fall', title = 'metero location and their class')","b2141ab7":"# % of meteor classes \n(df.recclass.unique().shape[0] \/ df.shape[0]) * 100 ","7ddf41e7":"px.pie(data_frame = df, names = df.fall.value_counts().index, values = df.fall.value_counts(), title = 'meteor fall %')","1513f082":"nobs = df.groupby('fall')['recclass'].value_counts()['not-observed']\nobs  = df.groupby('fall')['recclass'].value_counts()['observed']","e95d8612":"# insights for min and max value counts \nprint(f\"{nobs.index[0]} - {nobs.iloc[0]}\")\nprint(f\"{nobs.index[-1]} - {nobs.iloc[-1]}\")","7e6520da":"def get_percentage(x, df):\n    perc = []\n    idx = x.index\n    for i, vc in enumerate(x):\n        val = (vc \/ df[df.recclass == idx[i]].shape[0])\n        p = round(val * 100, 1)\n        perc.append(p)\n        \n    res = pd.DataFrame({\n        'value_counts' : x.values,\n        'percentage'   : perc\n    }, index = idx)\n    return res","a8aa87cd":"pd.options.display.max_columns = None\nget_percentage(nobs, df).T","51849351":"print(f\"About {round((nobs.iloc[0] \/ df[df.recclass == nobs.index[0]].shape[0]) * 100, 2)} % of {nobs.index[0]} meteor's were not observed ...\")\nprint(f\"About {round((nobs.iloc[-1] \/ df[df.recclass == nobs.index[-1]].shape[0]) * 100, 2)} % of {nobs.index[-1]} meteor's were not observed ...\")","c725ef2a":"nobs.describe()","6fba402b":"get_percentage(obs, df).T","fb8ec27b":"print(f\"About {round((obs.iloc[0] \/ df[df.recclass == obs.index[0]].shape[0]) * 100, 2)} % of {obs.index[0]} meteor's were observed ...\")\nprint(f\"About {round((obs.iloc[-1] \/ df[df.recclass == obs.index[-1]].shape[0]) * 100, 2)} % of {obs.index[-1]} meteor's were observed ...\")","e1a10970":"obs.describe()","5b3a0380":"sns.distplot(df.mass[(df.recclass == 'L6') & (df.fall == 'observed')])\nsns.distplot(df.mass[(df.recclass == 'L6') & (df.fall == 'not-observed')])\nplt.title('mass distribution comparision for observed and not observed L6 meteorite')\nplt.legend(['observed', 'not observed']);","c5ca1782":"cls_mass = pd.DataFrame(df.groupby('recclass')['mass'].mean()).sort_values('mass', ascending = False)\ncls_mass.head()","b4fe6548":"cls_mass.tail()","830168df":"#### visualization","01c6cd0a":"L6 meteorites has highest value count and also most observed and non-observed metoers, they must be common","5ccb4668":"* most of the meteors fell in india were mostle observed \n* almost most of the meteros fell in australia were not observed","e3ec933c":"looks like there's no any pattern for meteor class","e81a1b38":"#### data - cleaning ","bc37cd76":"most of the meteor fall's are not being observed (from 860 ~ 2016)"}}