{"cell_type":{"05f419a8":"code","0dffbabb":"code","a2d9fcf7":"code","108a212f":"code","87ceb664":"code","93099e32":"code","47a035d8":"code","d31e5f37":"code","cf87c262":"code","03c8525e":"code","e51cdede":"code","cd82603d":"code","84df5f12":"code","f3c649b2":"markdown"},"source":{"05f419a8":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","0dffbabb":"validation = pd.read_csv('\/kaggle\/input\/Kannada-MNIST\/Dig-MNIST.csv')\nvalidation.head()","a2d9fcf7":"validation.shape","108a212f":"train = pd.read_csv('\/kaggle\/input\/Kannada-MNIST\/train.csv')\ntrain.head()","87ceb664":"train.shape","93099e32":"test = pd.read_csv('\/kaggle\/input\/Kannada-MNIST\/test.csv')\ntest.head()","47a035d8":"test.shape","d31e5f37":"# the data seems sequential, lets do some shuffling\nnp.random.shuffle(train.values)\nnp.random.shuffle(validation.values)\n\ntrain.head()","cf87c262":"# spilt into x_train and y_train\nx_train = train.iloc[:,1:].values\ny_train = train.iloc[:,0].values\n\nx_val = validation.iloc[:,1:].values\ny_val = validation.iloc[:,0].values","03c8525e":"# build some neural network on keras :)\n# do we need convolution???\n# idk man, lets try some dense layers and check the score first\n\nimport tensorflow as tf\nfrom tensorflow.keras.optimizers import RMSprop\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom shutil import copyfile\n\n# class myCallback(tf.keras.callbacks.Callback):\n#       def on_epoch_end(self, epoch, logs={}):\n#         if(logs.get('acc')>0.90):\n#             print(\"\\nReached 90% accuracy so cancelling training!\")\n#             self.model.stop_training = True\n# callbacks = myCallback()\n\nmodel = tf.keras.models.Sequential([\n                        tf.keras.layers.Flatten(input_shape=(784,)), \n                        tf.keras.layers.Dense(256, activation=tf.nn.relu), \n                        tf.keras.layers.Dense(128, activation=tf.nn.relu), \n                        tf.keras.layers.Dense(64, activation=tf.nn.relu), \n                        tf.keras.layers.Dense(32, activation=tf.nn.relu), \n                        tf.keras.layers.Dense(10, activation=tf.nn.softmax)\n                        ])\n\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\nhistory = model.fit(x_train, y_train, epochs =16, validation_data=(x_val, y_val)\n                    #, callbacks=[callbacks]\n                   )","e51cdede":"%matplotlib inline\n\nimport matplotlib.image  as mpimg\nimport matplotlib.pyplot as plt\n\n\nacc=history.history['accuracy']\nval_acc=history.history['val_accuracy']\nloss=history.history['loss']\nval_loss=history.history['val_loss']\n\nepochs=range(len(acc)) \nplt.plot(epochs, acc, 'r', \"Training Accuracy\")\nplt.plot(epochs, val_acc, 'b', \"Validation Accuracy\")\nplt.title('Training and validation accuracy')\nplt.figure()\n\nplt.plot(epochs, loss, 'r', \"Training Loss\")\nplt.plot(epochs, val_loss, 'b', \"Validation Loss\")\nplt.figure()","cd82603d":"# score looks pretty well, but that's probably over-fitting a bit too much\n# shall cross check validation data next time\n# time to do some prediction!\ntest_predict = model.predict(test.iloc[:,1:].values)\n\nprediction = test.iloc[:,:1]\nprediction['label'] = np.argmax(test_predict, axis=1)\nprediction.head()","84df5f12":"prediction.to_csv('submission.csv', index=False)","f3c649b2":"## Models tried\n\n### Simple model\nmodel = tf.keras.models.Sequential([\n                        tf.keras.layers.Flatten(input_shape=(784,)), \n                        tf.keras.layers.Dense(128, activation=tf.nn.relu), \n                        tf.keras.layers.Dense(10, activation=tf.nn.softmax)\n                        ])\n                        \nval_accuracy 0.6455\n\n### Slightly complex model\nmodel = tf.keras.models.Sequential([\n                        tf.keras.layers.Flatten(input_shape=(784,)), \n                        tf.keras.layers.Dense(128, activation=tf.nn.relu), \n                        tf.keras.layers.Dense(64, activation=tf.nn.relu), \n                        tf.keras.layers.Dense(32, activation=tf.nn.relu), \n                        tf.keras.layers.Dense(10, activation=tf.nn.softmax)\n                        ])\n                        \nval_accuracy 0.6590\n\n### More more complex model\nmodel = tf.keras.models.Sequential([\n                        tf.keras.layers.Flatten(input_shape=(784,)), \n                        tf.keras.layers.Dense(256, activation=tf.nn.relu), \n                        tf.keras.layers.Dense(128, activation=tf.nn.relu), \n                        tf.keras.layers.Dense(64, activation=tf.nn.relu), \n                        tf.keras.layers.Dense(32, activation=tf.nn.relu), \n                        tf.keras.layers.Dense(10, activation=tf.nn.softmax)\n                        ])\n                        \nval_accuracy 0.6808****"}}