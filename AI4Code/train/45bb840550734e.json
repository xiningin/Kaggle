{"cell_type":{"266e8f28":"code","68b63b56":"code","ad2a8160":"code","982027ba":"code","a9286b8a":"code","b00cfc2b":"code","1e3de5f7":"code","e81996ac":"code","c2a6c1bf":"code","a8da015b":"code","fc06829b":"code","78147280":"code","e7a942ab":"code","4c5a0f42":"code","40cae5c5":"code","0960d5f4":"code","78581a0f":"code","e682a66f":"code","134971f0":"code","b1035ff9":"code","f41396a7":"code","67097d25":"code","98ffdfc5":"code","4d90d5aa":"code","bebcf89d":"code","9fd81b14":"code","d4616fab":"code","f97f9ad0":"code","d00b5ba9":"code","3061179f":"code","db525ba8":"code","9b891dfc":"code","66491ee3":"code","945afabc":"code","0f9a7c72":"code","7731a6e8":"code","cdbbb4cd":"code","f943183b":"code","f655e52b":"code","04905303":"markdown","2168de11":"markdown","15be8361":"markdown","37df89f0":"markdown","42f774ee":"markdown","aa4e1e85":"markdown","0e85750b":"markdown","b4b809e7":"markdown","7ed88fad":"markdown","0bf90d13":"markdown","83947636":"markdown","0c31af26":"markdown","2193ec3c":"markdown","a6afd085":"markdown","8c4edb26":"markdown","eb8d5b3c":"markdown","16f6e0e8":"markdown","e1b927e5":"markdown","45ce8648":"markdown","6fd6e665":"markdown","5fd7c10f":"markdown","45aa11ec":"markdown","2ebaded3":"markdown","a0852399":"markdown","55b4792d":"markdown","6c5c6653":"markdown","aac554e7":"markdown","f1d569fc":"markdown","8df57577":"markdown","39223abf":"markdown","79830267":"markdown","e8a504ca":"markdown","05f10a65":"markdown","7a66dca8":"markdown","70a518d3":"markdown","b5c5c95c":"markdown"},"source":{"266e8f28":"!pip install --upgrade pip\n!pip install cvlib\n!pip install opencv-python\n!pip install xmltodict\n!pip install mtcnn \n!pip install plot-metric\n#!pip install face_recognition\n!pip install --upgrade imutils","68b63b56":"import cv2\nimport json\nimport os\nimport argparse\nimport xmltodict\nimport plot_metric\nimport pylab as pl\nimport cvlib as cv\nimport numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport sys, cv2, time\nfrom PIL import Image\nimport tensorflow as tf\nfrom tensorflow import keras\nimport scikitplot as skplt\nfrom mtcnn.mtcnn import MTCNN\nfrom matplotlib import pyplot\nimport matplotlib.pyplot as plt\nimport sklearn.metrics as metrics\nfrom keras.utils import plot_model\nfrom scipy.spatial import distance\nfrom keras.models import Sequential\nfrom warnings import filterwarnings\nfrom keras.models import load_model\nfrom tensorflow.keras.layers import *\nfrom matplotlib.patches import Rectangle\nfrom keras.optimizers import Adam, RMSprop\nfrom sklearn.metrics import roc_auc_score\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom plot_metric.functions import BinaryClassification\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom tensorflow.keras.applications.mobilenet_v2 import MobileNetV2\nfrom keras.layers import Conv2D, MaxPool2D, Dropout, Dense, Flatten\nfrom keras.losses import binary_crossentropy, categorical_crossentropy\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom keras.layers import SpatialDropout2D, BatchNormalization, Input, Activation\nfrom keras.callbacks import ReduceLROnPlateau, EarlyStopping, ModelCheckpoint","ad2a8160":"IMG_SIZE = 124 # \u043a\u0430\u043a\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u043f\u043e\u0434\u0430\u0435\u043c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0432 \u0441\u0435\u0442\u044c\nIMG_CHANNELS = 3   # \u0443 RGB 3 \u043a\u0430\u043d\u0430\u043b\u0430\ninput_shape  = (IMG_SIZE, IMG_SIZE, IMG_CHANNELS)\n\nbatch_size = 32 #16 \nMIN_DISTANCE = 80 # \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u043b\u0438\u0446\u0430\u043c\u0438 \u043d\u0430 \u0444\u043e\u0442\u043e\n\nnum_classes = 2\nlabels=[\"No Mask\",\"Mask\"]\nmask_label = {0:\"No Mask\",1:\"Mask\"}\ncolor_label = {0:(0,0,255),1:(0,255,0),2:(255,0,0),3:(0,0,0),4:(255,255,255)}\ndist_label = {0:(0,255,0),1:(255,0,0)}\n\nDATA_PATH = '..\/input\/'\nPATH = \"..\/working\/\" \nface_model = cv2.CascadeClassifier('..\/input\/haar-cascades-for-face-detection\/haarcascade_frontalface_default.xml')\n\nRANDOM_SEED = 42\nnp.random.seed(RANDOM_SEED)\n\nfilterwarnings(\"ignore\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    pass   # print(dirname)\n    #print(os.path.join(dirname, filename))\n    \n#print(os.listdir(DATA_PATH))","982027ba":"!pip freeze > requirements.txt","a9286b8a":"!nvidia-smi","b00cfc2b":"train_dirs = [\"\/kaggle\/input\/withwithout-mask\/maskdata\/maskdata\/train\",\n             \"\/kaggle\/input\/withwithout-mask\/masks2.0\/masks\/train\",\n             \"\/kaggle\/input\/face-mask-12k-images-dataset\/Face Mask Dataset\/Train\",\n             \"\/kaggle\/input\/faces-with-masks\"]\n\ntest_dirs = [\"\/kaggle\/input\/withwithout-mask\/maskdata\/maskdata\/test\",\n            \"\/kaggle\/input\/withwithout-mask\/masks2.0\/masks\/test\",\n            \"\/kaggle\/input\/face-mask-12k-images-dataset\/Face Mask Dataset\/Test\",\n            \"\/kaggle\/input\/face-mask-detection\/dataset\"]\n\nvalidation_dirs = [\"\/kaggle\/input\/face-mask-12k-images-dataset\/Face Mask Dataset\/Validation\"]","1e3de5f7":"fullimg = []\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        fullimg.append(os.path.join(dirname, filename))","e81996ac":"train_data_generator = ImageDataGenerator(rescale=1.\/255, #\u0444\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \n                                          rotation_range=10, #15 \n                                          zoom_range=0.15,\n                                          width_shift_range=0.1,\n                                          height_shift_range=0.1,\n                                          shear_range=0.1, horizontal_flip=True,\n                                          fill_mode=\"nearest\")\n\n#train_data_generator = ImageDataGenerator(rescale=1.\/255, #\u0440\u0430\u0431\u043e\u0447\u0438\u0439\n                              #       zoom_range=0.2,\n                              #       shear_range=0.2,\n                              #       rotation_range=0.2)\n            \ntest_data_generator = ImageDataGenerator(rescale=1.\/255)\n\nvalidation_data_generator = ImageDataGenerator(rescale=1.\/255, #\u0444\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \n                                          rotation_range=10, #15 \n                                          zoom_range=0.15,\n                                          width_shift_range=0.1,\n                                          height_shift_range=0.1,\n                                          shear_range=0.1, horizontal_flip=True,\n                                          fill_mode=\"nearest\")","c2a6c1bf":"#!pip install git+https:\/\/github.com\/mjkvaak\/ImageDataAugmentor","a8da015b":"#from ImageDataAugmentor.image_data_augmentor import *\n#import albumentations","fc06829b":"# \u0410\u0443\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u21162 \u0447\u0435\u0440\u0435\u0437 albumentations. \n\"\"\"\nAUGMENTATIONS = albumentations.Compose([\n    albumentations.HorizontalFlip(p=0.5),\n    albumentations.Rotate(limit=10, interpolation=1, border_mode=4, value=None, mask_value=None, always_apply=False, p=0.5),\n    albumentations.OneOf([\n        albumentations.CenterCrop(height=250, width=200),\n        albumentations.CenterCrop(height=200, width=250),\n    ],p=0.5),\n    albumentations.OneOf([\n        albumentations.RandomBrightnessContrast(brightness_limit=0.3, contrast_limit=0.3),\n        albumentations.RandomBrightnessContrast(brightness_limit=0.1, contrast_limit=0.1)\n    ],p=0.5),\n    albumentations.GaussianBlur(p=0.05),\n    albumentations.HueSaturationValue(p=0.5),\n    albumentations.RGBShift(p=0.5),\n    albumentations.FancyPCA(alpha=0.1, always_apply=False, p=0.5),\n    albumentations.Resize(120, 120)\n    ])\n\ntrain_data_generator = ImageDataAugmentor(\n        rescale=1.\/255,\n        augment = AUGMENTATIONS,\n        #validation_split=VAL_SPLIT,\n        )\n\nvalidation_data_generator = ImageDataAugmentor(\n        rescale=1.\/255,\n        augment = AUGMENTATIONS,\n        #validation_split=VAL_SPLIT,\n        )\n\ntest_data_generator = ImageDataAugmentor(rescale=1.\/255)\n\"\"\"","78147280":"print(\"Data image Train\")\ntrain_generator1 = train_data_generator.flow_from_directory(\n        train_dirs[0],\n        target_size=(IMG_SIZE,IMG_SIZE),\n        batch_size=77,\n        interpolation=\"nearest\",\n        class_mode='binary',\n        classes=[\"without_mask\",\"with_mask\"])\ntrain_generator2 = train_data_generator.flow_from_directory(\n        train_dirs[1],\n        target_size=(IMG_SIZE,IMG_SIZE),\n        batch_size=46,\n        interpolation=\"nearest\",\n        class_mode='binary',\n        classes=[\"0\",\"1\"])\ntrain_generator3 = train_data_generator.flow_from_directory(\n        train_dirs[2],\n        target_size=(IMG_SIZE,IMG_SIZE),\n        batch_size=80,\n        interpolation=\"nearest\",\n        class_mode='binary',\n        classes=[\"WithoutMask\",\"WithMask\"])\ntrain_generator4 = train_data_generator.flow_from_directory(\n        train_dirs[3],\n        target_size=(IMG_SIZE,IMG_SIZE),\n        batch_size=163,\n        interpolation=\"nearest\",\n        class_mode='binary',\n        classes=[\"_\",\"faces_with_mask\"])\n\n\nprint(\"\\nData image Test\")\ntest_generator1 = test_data_generator.flow_from_directory(\n        test_dirs[0],\n        target_size=(IMG_SIZE,IMG_SIZE),\n        batch_size=66,\n        interpolation=\"nearest\",\n        class_mode='binary',\n        classes=[\"without_mask\",\"with_mask\"])\ntest_generator2 = test_data_generator.flow_from_directory(\n        test_dirs[1],\n        target_size=(IMG_SIZE,IMG_SIZE),\n        batch_size=11,\n        interpolation=\"nearest\",\n        class_mode='binary',\n        classes=[\"0\",\"1\"])\ntest_generator3 = test_data_generator.flow_from_directory(\n        test_dirs[2],\n        target_size=(IMG_SIZE,IMG_SIZE),\n        batch_size=62,\n        interpolation=\"nearest\",\n        class_mode='binary',\n        classes=[\"WithoutMask\",\"WithMask\"])\ntest_generator4 = test_data_generator.flow_from_directory(\n        test_dirs[3],\n        target_size=(IMG_SIZE,IMG_SIZE),\n        batch_size=55,\n        interpolation=\"nearest\",\n        class_mode='binary',\n        classes=[\"without_mask\",\"with_mask\"])\n\nprint(\"\\nData image Validation\")\nvalidation_generator1 = validation_data_generator.flow_from_directory(\n        validation_dirs[0],\n        target_size=(IMG_SIZE,IMG_SIZE),\n        batch_size=80,\n        interpolation=\"nearest\",\n        class_mode='binary',\n        classes=[\"WithoutMask\",\"WithMask\"])\nwithWithoutMask = {\"0\":\"Without Mask\",\"1\":\"With Mask\"}","e7a942ab":"def genToTuple(gen):\n    templist = []\n    templist2 = []\n    for i in range(gen.__len__()):\n        tempnext = gen.next()\n        templist.append(tempnext[0])\n        templist2.append(tempnext[1])\n    x=np.concatenate(templist)\n    y=np.concatenate(templist2)\n    return (x,y)\n\ndef combine_tuple(*tuples):\n    x=np.concatenate([tuples[i][0] for i in range(len(tuples))])\n    y=np.concatenate([tuples[i][1] for i in range(len(tuples))])\n    return (x,y.astype(int))   \n\ntrain_generator1_t = genToTuple(train_generator1)\ntrain_generator2_t = genToTuple(train_generator2)\ntrain_generator3_t = genToTuple(train_generator3)\ntrain_generator4_t = genToTuple(train_generator4)\n\ntest_generator1_t = genToTuple(test_generator1)\ntest_generator2_t = genToTuple(test_generator2)\ntest_generator3_t = genToTuple(test_generator3)\ntest_generator4_t = genToTuple(test_generator4)\n\nx_train,y_train = combine_tuple(train_generator1_t,train_generator2_t,train_generator3_t,train_generator4_t)\n\nx_test,y_test = combine_tuple(test_generator1_t,test_generator2_t,test_generator3_t,test_generator4_t)\n\nx_val,y_val = genToTuple(validation_generator1)","4c5a0f42":"print(x_train.shape,y_train.shape)\nprint(x_test.shape,y_test.shape)\nprint(x_val.shape,y_val.shape)","40cae5c5":"# \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u0430\u0440\u0442\u0438\u043d\u043e\u043a \u043f\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043c \u0432 TRAIN:\nsns.countplot(y_train)","0960d5f4":"# \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u043e\u043b-\u0432\u043e \u043a\u0430\u0440\u0442\u0438\u043d\u043e\u043a \u043f\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043c \u0432 TRAIN:\ncategory = pd.DataFrame(y_train)  \ncategory.value_counts()","78581a0f":"# \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u043e\u043b-\u0432\u043e \u043a\u0430\u0440\u0442\u0438\u043d\u043e\u043a \u043f\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043c \u0432 TRAIN \u0432 %:\n#category = pd.DataFrame(y_train)  \ncategory.value_counts(normalize=True)\n","e682a66f":"# \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u0430\u0440\u0442\u0438\u043d\u043e\u043a \u043f\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043c \u0432 VALIDATION:\nsns.countplot(y_val)","134971f0":"# \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u0430\u0440\u0442\u0438\u043d\u043e\u043a \u043f\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043c \u0432 TEST:\nsns.countplot(y_test) ","b1035ff9":"plt.figure(figsize=(100,100))\ntempc = np.random.choice(x_train.shape[0],30,replace=False)\nd = 0\nfor i in tempc:\n    plt.subplot(7, 5, d+1)\n    d += 1\n    tempc = np.random.randint(x_train.shape[0])\n    plt.imshow(x_train[tempc])\n    plt.axis(\"off\")\nplt.subplots_adjust(wspace=-0.1, hspace=0.3)\nplt.show()","f41396a7":"from sklearn.metrics import *","67097d25":"# \u0412\u0430\u0440\u0438\u0430\u043d\u0442 1 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0441\u0435\u0442\u0438: \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 accuracy_test: 0.9524, roc_auc: 0.9918\n\ndef build_model():\n        model = Sequential()\n        \n        model.add(Input(shape=input_shape))\n\n        model.add(Conv2D(filters=16,kernel_size=(2,2),padding=\"same\"))\n        model.add(Activation(\"relu\"))\n        model.add(SpatialDropout2D(0.25)) #0.45\n        \n        model.add(MaxPool2D(pool_size=(4,4)))\n\n        model.add(Conv2D(filters=32,kernel_size=(2,2),padding=\"same\"))\n        model.add(Activation(\"relu\"))\n        model.add(SpatialDropout2D(0.25)) # 0.45\n        \n        model.add(MaxPool2D(pool_size=(4,4),strides=(4,4)))\n        model.add(Dropout(0.2))        \n        model.add(Flatten())\n        \n        model.add(Dense(256)) # 1024\n        model.add(Activation(\"relu\"))\n        model.add(Dropout(0.25)) #0.45\n        \n        model.add(Dense(128)) # 256 1024\n        model.add(Activation(\"relu\"))\n        model.add(Dropout(0.2)) #0.4\n        \n        \n        model.add(Dense(1))\n        model.add(Activation(\"sigmoid\"))\n        \n        optimizer = Adam ()#(lr=0.001)\n        model.compile(optimizer = optimizer ,metrics=[\"accuracy\"], loss = binary_crossentropy) \n        \n        return model\n    \nmodel1 = build_model() \nmodel1.summary()","98ffdfc5":"mobilenet = MobileNetV2(alpha=1.4,weights='imagenet',include_top=False,input_shape=(input_shape))\nfor layer in mobilenet.layers:\n    layer.trainable = True #False\nmodel = Sequential()\nmodel.add(mobilenet)\nmodel.add(GlobalMaxPooling2D(),) # GlobalMaxPooling2D \u0438\u043b\u0438 GlobalAveragePooling2D \u043d\u0435 \u043d\u0430\u0434\u043e: Flatten())\nmodel.add(Dense(256)) #512\nmodel.add(Activation(\"relu\"))\nmodel.add(Dropout(0.45)) #0.25                   \nmodel.add(Dense(1))\nmodel.add(Activation(\"sigmoid\")) \nmodel.compile(optimizer=\"adam\",loss=binary_crossentropy, metrics =[\"accuracy\"]) #binary_accuracy accuracy\nmodel.summary()","4d90d5aa":"# \u043c\u043e\u0436\u043d\u043e \u0442\u0430\u043a\u0436\u0435 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0438\u0442\u043e\u0433\u043e\u0432\u0443\u044e \u0441\u0445\u0435\u043c\u0443 \u043d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u0438 \u0432 \u0432\u0438\u0434\u0435 \u043a\u0440\u0430\u0441\u0438\u0432\u043e\u0439 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0438: \nplot_model(model,show_shapes=True,show_layer_names=True)","bebcf89d":"%%time\n#  \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c ReduceLROnPlateau\n# ReduceLROnPlateau - \u0443\u043c\u0435\u043d\u044c\u0448\u0430\u0435\u043c\u044b\u0439 LR: \u043a\u043e\u0433\u0434\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0443\u0436\u0435 \u043d\u0435 \u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f, LR  \u0443\u043c\u0435\u043d\u044c\u0448\u0430\u0435\u0442\u0441\u044f, \u0438 \u0442\u0430\u043a \u0434\u043e min \u043f\u0440\u0435\u0434\u0435\u043b\u0430 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0433\u043e:\nreducer = ReduceLROnPlateau(monitor='loss',patience=3,factor=0.75,min_lr=0.000000001,verbose=1) #monitor='val_acc' loss\ncheckpoint = ModelCheckpoint(\"facemask.h5\",monitor=\"val_accuracy\",save_best_only=True,verbose=1) #\nstopSign = EarlyStopping(monitor = \"loss\",patience=10,min_delta=0.000000000001,mode=\"min\")\nepochs = 100 #120\nbatch_size = 32 \nsteps_per_epoch = x_train.shape[0] \/\/ batch_size\nhistory = model.fit(x_train, y_train,\n                    epochs = epochs, \n                    validation_data = (x_val,y_val),\n                    verbose = 1,\n                    batch_size=batch_size,\n                    steps_per_epoch = steps_per_epoch,\n                    callbacks=[stopSign,checkpoint\n                               ,reducer\n                              ])","9fd81b14":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n \nepochs = range(len(acc))\n \nplt.plot(epochs, acc, 'b', label='Training acc')\nplt.plot(epochs, val_acc, 'r', label='Validation acc')\nplt.title('Training and validation accuracy')\nplt.legend()\nplt.xlabel('epochs')\nplt.ylabel('accuracy')\n \nplt.figure()\n \nplt.plot(epochs, loss, 'b', label='Training loss')\nplt.plot(epochs, val_loss, 'r', label='Validation loss')\nplt.title('Training and validation loss')\nplt.legend()\nplt.xlabel('epochs')\nplt.ylabel('loss')\n \nplt.show()","d4616fab":"y_pred_classes = model.predict_classes(x_test)\ny_pred = model.predict(x_test)\n\nplt.subplots(figsize=(8,7))\nsns.heatmap(confusion_matrix(y_test,y_pred_classes),xticklabels=labels,\n                                       yticklabels=labels, annot=True,fmt=\"1.0f\",cbar=False,annot_kws={\"size\": 20})\nplt.title(\"Confusion matrix\",fontsize=30)\nplt.xlabel(f\"CNN model Accuracy: {accuracy_score(y_test,y_pred_classes)}\",fontsize=30)\nplt.show()","f97f9ad0":"print(classification_report(y_test, y_pred_classes, target_names = labels)) ","d00b5ba9":"# \u0441\u0447\u0438\u0442\u0430\u0435\u043c Score \u043c\u043e\u0434\u0435\u043b\u0438:\ntest_loss, test_acc = model.evaluate(x_test, y_test, steps=32)\nprint('The final test accuracy: ',test_acc)\nprint('The final test loss: ',test_loss)","3061179f":"y_pred_proba = model.predict_proba(x_test)","db525ba8":"# calculate the fpr and tpr for all thresholds of the classification\nfpr, tpr, threshold = metrics.roc_curve(y_test, y_pred_proba)\nroc_auc = metrics.auc(fpr, tpr)\nroc_auc","9b891dfc":"tpr","66491ee3":"fpr","945afabc":"def plot_roc_cur(fper, tper):  \n    plt.plot(fper, tper, color='orange', label='ROC')\n    plt.plot([0, 1], [0, 1], color='darkblue', linestyle='--')\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver Operating Characteristic (ROC) Curve')\n    plt.legend()\n    plt.show()","0f9a7c72":"plot_roc_cur(fpr, tpr)","7731a6e8":"# \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c plot_metric\nbc = BinaryClassification(y_test,y_pred_proba, [\"No mask\",\"Mask\"]) \n# Figures\nplt.figure(figsize=(15,10))\nplt.subplot2grid(shape=(2,6), loc=(0,0), colspan=2)\nbc.plot_roc_curve()\nplt.subplot2grid((2,6), (0,2), colspan=2)\nbc.plot_precision_recall_curve()\n#plt.subplot2grid((2,6), (0,4), colspan=2)\n#bc.plot_class_distribution()\nplt.subplot2grid((2,6), (1,1), colspan=2)\nbc.plot_confusion_matrix()\nplt.subplot2grid((2,6), (1,3), colspan=2)\nbc.plot_confusion_matrix(normalize=True)\nplt.show()\n#bc.print_report()","cdbbb4cd":"model.save('model_mask.hdf5')","f943183b":"plt.figure(figsize=(100,100))\ntempc = np.random.choice(x_test[y_test == y_pred_classes.ravel()].shape[0],20,replace=False)\nd = 0\nfor i in tempc:\n    plt.subplot(7, 5, d+1)\n    d += 1\n    tempc = np.random.randint(x_test[y_test == y_pred_classes.ravel()].shape[0])\n    plt.imshow(x_test[y_test == y_pred_classes.ravel()][tempc])\n    plt.title(f\"True:{withWithoutMask[str(y_test[y_test == y_pred_classes.ravel()][tempc])]}\\nPredicted:{withWithoutMask[str(y_pred_classes.ravel()[y_test == y_pred_classes.ravel()][tempc])]}\",\n              fontsize=60,color='g')\n    plt.axis(\"off\")\nplt.subplots_adjust(wspace=-0.1, hspace=0.3)\nplt.show()","f655e52b":"plt.figure(figsize=(100,100))\ntempc = np.random.choice(x_test[y_test != y_pred_classes.ravel()].shape[0],20,replace=False)\nd = 0\nfor i in tempc:\n    plt.subplot(7, 5, d+1)\n    d += 1\n    tempc = np.random.randint(x_test[y_test != y_pred_classes.ravel()].shape[0])\n    plt.imshow(x_test[y_test != y_pred_classes.ravel()][tempc])\n    plt.title(f\"True:{withWithoutMask [str(y_test[y_test != y_pred_classes.ravel()][tempc])]}\\nPredicted:{withWithoutMask[str(y_pred_classes.ravel()[y_test != y_pred_classes.ravel()][tempc])]}\", fontsize=60, color='r')\n    plt.axis(\"off\")\nplt.subplots_adjust(wspace=-0.1, hspace=0.3)\nplt.show()","04905303":"### \u0414\u0435\u043b\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445. \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u043e\u0448\u0438\u0431\u043e\u043a.\n\n### \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0438\u0441\u044c \u043e\u0442\u043b\u0438\u0447\u043d\u044b\u0435: \u043a\u0440\u0430\u0439\u043d\u0435 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u043a\u043e\u043b-\u0432\u043e \u043b\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0438 \u043c\u0430\u043b\u043e\u0435 \u043a\u043e\u043b-\u0432\u043e \u043b\u043e\u0436\u043d\u043e \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439.","2168de11":"#### \u0410\u0443\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0441\u0442\u0438 \u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u0430\u043c\u0438,c \u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u043c\u0438, \u043d\u043e \u043f\u043e\u043c\u043d\u0438\u043c, \u0447\u0442\u043e \u0443 \u043d\u0430\u0441 \u043d\u0430 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0430\u0445 \u043b\u0438\u0446\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0435\u0441\u0442\u044c \u0440\u044f\u0434 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0439 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u043d\u0435 \u043f\u0435\u0440\u0435\u0432\u043e\u0440\u0430\u0447\u0438\u0432\u0430\u0442\u044c 180\", \u043d\u0435 \u0438\u0441\u043a\u0430\u0436\u0430\u0442\u044c \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0441\u0438\u043b\u044c\u043d\u043e).","15be8361":"### \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c ImageDataGenerator \u0434\u043b\u044f \u0430\u0443\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445:","37df89f0":"### \u0414\u0435\u043b\u0430\u0435\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u0435\u0440\u0435\u0434 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u0438,  \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c ReduceLROnPlateau \u0434\u043b\u044f \u0433\u0438\u0431\u043a\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f LR,\u0430 \u0442\u0430\u043a\u0436\u0435 EarlyStopping \u0434\u043b\u044f \u044d\u043a\u043e\u043d\u043e\u043c\u0438\u0438 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0438 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f.","42f774ee":"###  \u041f\u0435\u0440\u0435\u0434 \u043d\u0430\u043c\u0438 \u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043c\u0430\u0441\u043a\u0438 \u043d\u0430 \u043b\u0438\u0446\u0435 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430. \u042d\u0442\u043e \u0437\u0430\u0434\u0430\u0447\u0430  \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u043d\u0443\u0436\u043d\u043e \u043d\u0430\u0443\u0447\u0438\u0442\u044c \u043d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u044c \u0434\u0435\u043b\u0438\u0442\u044c \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0438  \u043d\u0430 2 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438: \"\u0421 \u043c\u0430\u0441\u043a\u043e\u0439 \u043d\u0430 \u043b\u0438\u0446\u0435\" \u0438 \"\u0411\u0435\u0437 \u043c\u0430\u0441\u043a\u0438\". \u042d\u0442\u043e \u0437\u0430\u0434\u0430\u0447\u0430 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 \u0432 \u0434\u0432\u0435 \u0433\u0440\u0443\u043f\u043f\u044b (\u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435, \u043a\u0430\u043a\u043e\u0439 \u0438\u0437 \u0433\u0440\u0443\u043f\u043f \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u043a\u0430\u0436\u0434\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430) \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438. \n### \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0431\u0438\u043d\u0430\u0440\u043d\u0443\u044e \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e. \n### \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0438 (\u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u043e\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u043d\u0430 2 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438) \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f (\u0443 \u043d\u0430\u0441 \u0438\u0445 \u0431\u043e\u043b\u0435\u0435 14 \u0442\u044b\u0441.) \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0433\u043b\u0443\u0431\u043e\u043a\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435,    \u0412\u0430\u0440\u0438\u0430\u043d\u0442 1: \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0441\u0432\u0435\u0440\u0442\u043e\u0447\u043d\u0443\u044e \u043d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u044c CNN \u0438 \u0412\u0430\u0440\u0438\u0430\u043d\u0442 2: \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u043d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u044c \u043d\u0430 \u0431\u0430\u0437\u0435 \u043f\u0440\u0435\u0434\u043e\u0431\u0443\u0447\u0435\u043d\u043d\u043e\u0439 \u043d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u0438 MobileNetV2 (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f transfer learning). \u041e\u0431\u0443\u0447\u0438\u043c, \u0441\u0440\u0430\u0432\u043d\u0438\u043c \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438, \u0432\u044b\u0431\u0435\u0440\u0435\u043c \u043b\u0443\u0447\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.","aa4e1e85":"### Printing Classification report\/ \u0432\u044b\u0432\u043e\u0434\u0438\u043c Classification \u043e\u0442\u0447\u0435\u0442:","0e85750b":"### \u0411\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0431\u044b\u043b\u043e \u043c\u043d\u043e\u0433\u043e.\n### \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0438 \u0432 \u0433\u0440\u0443\u043f\u043f\u044b \u043f\u043e \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e: Train, Test, Validation.","b4b809e7":"### \u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043d\u0430 \u0432\u0441\u0435\u0445 \u0441\u043b\u043e\u044f\u0445 MobileNetV2 (\u0441\u0435\u0442\u044c \u043e\u0431\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u0431\u044b\u0441\u0442\u0440\u043e, \u0438 \u0442\u0430\u043a \u0431\u0443\u0434\u0435\u0442 \u0442\u043e\u0447\u043d\u0435\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442).","7ed88fad":"\u0412 \u043d\u0430\u0448\u0435\u0439 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430\u0442\u0438\u043a\u0435 \u0445\u043e\u0442\u0435\u043b\u043e\u0441\u044c \u0431\u044b \u0432 \u043f\u0435\u0440\u0432\u0443\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0441\u043d\u0438\u0437\u0438\u0442\u044c FN (\u043e\u0448\u0438\u0431\u043a\u0443 II \u0440\u043e\u0434\u0430) - \u044d\u0442\u043e \u043a\u043e\u0433\u0434\u0430 \"\u0431\u0435\u0437 \u043c\u0430\u0441\u043a\u0438\", \u043d\u043e \u043c\u043e\u0434\u0435\u043b\u044c \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u0447\u0442\u043e \"\u0432 \u043c\u0430\u0441\u043a\u0435\".","0bf90d13":"## Data importing \/ \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435\n### \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430  \u0438\u043c\u043f\u043e\u0440\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\/\u043c\u043e\u0434\u0443\u043b\u0435\u0439. ","83947636":"## \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445. \u0417\u0430\u0432\u0435\u0440\u043d\u0435\u043c \u043d\u0430\u0448\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440:","0c31af26":"### \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043c\u0435\u0442\u0440\u0438\u043a\u0438 Roc_auc (best = 0.9954) \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0438\u0441\u044c \u043e\u0442\u043b\u0438\u0447\u043d\u044b\u043c\u0438. ","2193ec3c":"### (Diploma project by student @Pawel_MTW \"Skillfactory.ru\")","a6afd085":"### \u0412\u044b\u0432\u0435\u0434\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043a \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0430\u043c  test \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430: \n### 1.\u0412\u044b\u0431\u043e\u0440\u043a\u0430: \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0441\u043b\u0443\u0447\u0430\u0438","8c4edb26":"## Preprocessing \/ \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","eb8d5b3c":"## Image binary classification on DL (MobileNetV2). Face mask detection. Vol.1","16f6e0e8":"## \u0421\u043e\u0445\u0440\u0430\u043d\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u0432 \u0444\u0430\u0439\u043b:","e1b927e5":"###  \u0412\u0433\u043b\u044f\u043d\u0435\u043c \u043d\u0430 \u043e\u0431\u0440\u0430\u0437\u0446\u044b \u043a\u0430\u0440\u0442\u0438\u043d\u043e\u043a \u043b\u0438\u0446 \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u043e\u0431\u0443\u0447\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c:","45ce8648":"## Train Model \/ \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438.","6fd6e665":"### \u0412\u044b\u0432\u043e\u0434: precision \u0438 recall \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043e\u0447\u0435\u043d\u044c \u0432\u044b\u0441\u043e\u043a\u0438\u0435 (\u043f\u043e\u0447\u0442\u0438 \u0438\u0437\u0431\u0435\u0433\u0430\u0435\u043c \u043e\u0448\u0438\u0431\u043e\u043a I \u0438 II \u0440\u043e\u0434\u0430).","5fd7c10f":"### \u0412\u0430\u0440\u0438\u0430\u043d\u0442 #2 TransferLearning. \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u0441\u0435\u0442\u0438 \u043d\u0430 \u0431\u0430\u0437\u0435 \u043f\u0440\u0435\u0434\u043e\u043e\u0431\u0443\u0447\u0435\u043d\u043d\u043e\u0439 \u0441\u0435\u0442\u0438 MobileNet V2 (alpha=1.4)\n\n\u041d\u0430 \u043c\u043e\u043c\u0435\u043d\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u044c \u0441\u0435\u0442\u044c MobileNet V2 (\u0438\u043c\u0435\u0435\u0442\u0441\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0430\u0440\u0438\u0430\u0446\u0438\u0439, \u043c\u044b \u0432\u044b\u0431\u0440\u0430\u043b\u0438 Large) \u0432\u0441\u0435 \u0435\u0449\u0451 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u0432\u044b\u0431\u043e\u0440\u043e\u043c, \u0435\u0441\u043b\u0438 \u0431\u0440\u0430\u0442\u044c \u0432\u043e \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u0440\u0430\u0437\u043c\u0435\u0440 \u0441\u0435\u0442\u0438, \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u0438 \u0432\u0440\u0435\u043c\u044f \u0440\u0430\u0431\u043e\u0442\u044b, \u0445\u043e\u0442\u044f \u0443\u0436\u0435 \u043f\u043e\u044f\u0432\u0438\u043b\u0430\u0441\u044c MobileNet V3. \n\u0418\u0442\u043e\u0433\u043e\u0432\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0430ccuracy: 0.9861%","45aa11ec":"### 2.\u0412\u044b\u0431\u043e\u0440\u043a\u0430: \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u044b\u0435 \u0441\u043b\u0443\u0447\u0430\u0438.","2ebaded3":"### \u0412 Vol.2 \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0435 \u043c\u044b \u0437\u0430\u0439\u043c\u0435\u043c\u0441\u044f \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043d\u0430\u0448\u0435\u0439 \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u0444\u043e\u0442\u043e, \u0432 Vol.3 - \u043c\u044b \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u043d\u0430\u0448\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 \u0432\u0438\u0434\u0435\u043e\u043f\u043e\u0442\u043e\u043a\u0435, \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0440\u043e\u0442\u043e\u0442\u0438\u043f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f Video real-time.","a0852399":"## Training and Validation Visualizations \/ \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f","55b4792d":"### \u041e\u0442\u0447\u0435\u0442 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0430\u043c accuracy  \u0438 loss:","6c5c6653":"### \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438","aac554e7":"### \u0412\u0430\u0440\u0438\u0430\u043d\u0442 #1. \u0421\u0442\u0440\u043e\u0438\u043c \u0441\u0432\u0435\u0440\u0442\u043e\u0447\u043d\u0443\u044e \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u0443\u044e \u0441\u0435\u0442\u044c CNN \u0434\u043b\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043b\u0438\u0446 \u043f\u043e \u0444\u043e\u0442\u043e \u043f\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043c: \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 accuracy: 0.9416, roc_auc: 0.9918","f1d569fc":"#### \u0410\u0443\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u21162 \u0447\u0435\u0440\u0435\u0437 albumentations.","8df57577":"### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0432\u043d\u043e\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043a\u0430\u0440\u0442\u0438\u043d\u043e\u043a \u043f\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043c.\n#### \u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432 \u0446\u0435\u043b\u043e\u043c \u0440\u0430\u0432\u043d\u043e\u043c\u0435\u0440\u043d\u043e\u0435, \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u043f\u0435\u0440\u0435\u0432\u0435\u0441  \u0432 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u0432 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \"With mask\", \u043d\u043e \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u043e\u0431\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u0441\u0435\u0442\u044c MobileNet V2, \u0442\u043e \u044d\u0442\u043e \u043d\u0435 \u043f\u043e\u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.","39223abf":"##  Prediction \/ \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435","79830267":"## \u0418\u0442\u043e\u0433\u0438: \n### \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0435 \u043c\u044b \u0441\u0434\u0435\u043b\u0430\u043b\u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435: \u043c\u044b \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043b\u0438 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435, \u0430 \u0438\u043c\u0435\u043d\u043d\u043e, \u0441\u0432\u0435\u0440\u0442\u043e\u0447\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u044b\u0445 \u0441\u0435\u0442\u0435\u0439,\u0438 \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u0431\u0430\u0437\u0435 \u043f\u0440\u0435\u0434\u043e\u0431\u0443\u0447\u0435\u043d\u043d\u043e\u0439 \u043d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u0438 MobilNetV2 large (\u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0430 \u043b\u0443\u0447\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442). \u041d\u0430\u0448\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044f \u043b\u0438\u0446\u0430 \u043a \u043e\u0434\u043d\u043e\u043c\u0443 \u0438\u0437 2 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 (\"\u0421 \u041c\u0430\u0441\u043a\u043e\u0439\"\/\"\u0411\u0435\u0437 \u043c\u0430\u0441\u043a\u0438\"). \u041e\u0431\u0443\u0447\u0438\u043b\u0438 \u043c\u043e\u0434\u0435\u043b\u044c. \u0422\u0430\u043a\u0436\u0435 \u043c\u044b \u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043b\u0438 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u043e\u0434\u0435\u043b\u0438. \u0421\u043e\u0445\u0440\u0430\u043d\u0438\u043b\u0438 \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f, \u0441\u0434\u0435\u043b\u0430\u043b\u0438 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e. \u0423\u0447\u0438\u0442\u044b\u0432\u0430\u044f \u0432\u0441\u0435 \u0441\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0435 (\u0438\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0435\u0439), \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043e\u0447\u0435\u043d\u044c \u0445\u043e\u0440\u043e\u0448\u043e.\n\n","e8a504ca":"### Roc_curve \u043a\u0440\u0438\u0432\u0443\u044e, \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u043e\u0448\u0438\u0431\u043e\u043a \u0438 \u043e\u0442\u0447\u0435\u0442 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0430\u043c \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u043e\u0442 \u0442\u0430\u043a\u043e\u0439 \u0435\u0434\u0438\u043d\u043e\u0439 \u043a\u0440\u0430\u0441\u043e\u0447\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u0435\u0439:","05f10a65":"#### \u0410\u0443\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u21161","7a66dca8":"### C\u0447\u0438\u0442\u0430\u0435\u043c Auc-ro\u0441, \u0441\u0442\u0440\u043e\u0438\u043c \u043a\u0440\u0438\u0432\u0443\u044e.","70a518d3":"### \u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0431\u0438\u043d\u0430\u0440\u043d\u0443\u044e \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e, \u0442\u043e \u0431\u0435\u0440\u0435\u043c \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0410uc_roc, \u0427\u0443\u0432\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0438 \u0421\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u043d\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u0435\u0442\u0438 (tpr - sensivity, fpr - specifity).","b5c5c95c":"## Build Model \/ \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438."}}