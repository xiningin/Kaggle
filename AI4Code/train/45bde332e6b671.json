{"cell_type":{"b906139c":"code","1faeca9e":"code","1ebd8f64":"code","86603560":"code","a647d014":"code","d7d13996":"code","1a096e31":"code","08c60719":"code","51c32f5a":"code","9b73e7fe":"code","daa6938a":"code","af781355":"code","5944e0c9":"code","a202a272":"code","53cf2d97":"code","0e609e7c":"code","eea4b228":"code","d46f5244":"code","e7fe482e":"code","783ae1ef":"code","7d878aba":"code","09d939f0":"code","7361715c":"code","f40936c4":"code","ffdd5295":"code","b05900ce":"code","c0cf5680":"code","ef7e0d63":"code","8d25c3be":"code","f949a1ba":"code","48c77136":"code","94a5049a":"code","0d5d3301":"code","872ff6f1":"code","2ba6e351":"code","8cd1e0f1":"code","d055d200":"code","7cc90f0b":"code","b25eac00":"code","53e4284c":"code","75135f7e":"code","cc0c763d":"code","8f9b0bce":"code","3b8a9704":"code","f5765038":"markdown","f5c0fbac":"markdown","4f30ab7c":"markdown","3a2f9f7c":"markdown","f2f00a65":"markdown","24199d8b":"markdown","fb266c9c":"markdown","9f4b9138":"markdown","3f2c765d":"markdown","6bb7b725":"markdown","2dcda20f":"markdown","3d26b71b":"markdown","f2dcd882":"markdown","f9ad62cd":"markdown","8f40b0df":"markdown","04c83595":"markdown"},"source":{"b906139c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom itertools import groupby\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1faeca9e":"dtypes = {\n     'sessionTime' : \"float32\",\n     'frameIdentifier' : \"uint32\",\n     'pilot_index' : \"uint8\",\n     'worldPositionX' : \"float32\",\n     'worldPositionY' : \"float32\",\n     'worldPositionZ' : \"float32\",\n     'worldVelocityX' : \"float32\",\n     'worldVelocityY' : \"float32\",\n     'worldVelocityZ' : \"float32\",\n     'worldForwardDirX' : \"int32\",\n     'worldForwardDirY' : \"int32\",\n     'worldForwardDirZ' : \"int32\",\n     'worldRightDirX' : \"int32\",\n     'worldRightDirY' : \"int32\",\n     'worldRightDirZ' : \"int32\",\n     'gForceLateral' : \"float32\",\n     'gForceLongitudinal' : \"float32\",\n     'gForceVertical' : \"float32\",\n     'yaw' : \"float32\",\n     'pitch' : \"float32\",\n     'roll' : \"float32\",\n     'speed' : \"float32\",\n     'throttle' : \"float32\",\n     'steer' : \"float32\",\n     'brake' : \"float32\",\n     'clutch': \"uint8\",\n     'gear': \"uint8\",\n     'engineRPM' : \"uint32\",\n     'drs' : \"bool\",\n     'engineTemperature': \"uint8\",\n     'fuelMix': \"uint8\",\n     'pitLimiterStatus': \"bool\",\n     'fuelInTank' : \"float32\",\n     'fuelRemainingLaps' : \"float32\",\n     'ersStoreEnergy' : \"uint32\",\n     'ersDeployMode' : \"uint32\",\n     'ersHarvestedThisLapMGUK' : \"uint32\",\n     'ersHarvestedThisLapMGUH' : \"uint32\",\n     'ersDeployedThisLap' : \"uint32\",\n     'carPosition' : \"uint8\",\n     'currentLapTime' : \"float32\",\n     'currentLapNum' : \"uint8\",\n     'sector': \"uint8\",\n     'lapDistance' : \"float32\",\n     'totalDistance' : \"float32\",\n}\n\nfillnas = {\n    'clutch' : 0,\n    'gear' : 0,\n    'engineRPM': 0,\n    \"engineTemperature\" : 0,\n    \"fuelMix\": 1,\n    \"pitLimiterStatus\" : False,\n    \"ersStoreEnergy\" : 4e7,\n    \"ersDeployMode\" : 1,\n    \"ersHarvestedThisLapMGUK\" : 0,\n    \"ersHarvestedThisLapMGUH\" : 0,\n    \"ersDeployedThisLap\" : 0,\n    \"sector\" : 0\n}\n\ndf = pd.read_csv(\"\/kaggle\/input\/f1-2020-race-data\/TelemetryData_3335673977098133433.csv\")\n\nfor col, dtype in dtypes.items():\n    if col in fillnas:\n        df[col] = df[col].fillna(fillnas[col])\n    df[col] = df[col].astype(dtype)","1ebd8f64":"pilot = pd.read_csv(\"\/kaggle\/input\/f1-2020-race-data\/ParticipantData_3335673977098133433.csv\")","86603560":"session = pd.read_csv(\"\/kaggle\/input\/f1-2020-race-data\/SessionData_3335673977098133433.csv\").iloc[0].to_dict()\nprint(session)","a647d014":"race = pd.read_csv(\"\/kaggle\/input\/f1-2020-race-data\/RaceTimeData_3335673977098133433.csv\")","d7d13996":"def remove_flashbacks(df, pilot=19):\n    df2 = df[df[\"pilot_index\"] == pilot]\n    frame, X = df2[\"frameIdentifier\"].values, df2[[\"worldPositionX\", \"worldPositionY\", \"worldPositionZ\"]].values\n    dist_sq = ((X[1:, :] - X[:-1, :])**2).sum(axis=1)\n    idx_frame_after_flashback = np.argwhere(dist_sq > 1000).flatten() + 1 # to add the frame 0 shifted for the distance computation\n    \n    number_flashback = idx_frame_after_flashback.shape[0]\n    pos_before_flashback = X[idx_frame_after_flashback-1]\n    pos_after_flashback = X[idx_frame_after_flashback]  # position after validateing the flashback\n    frames_before_flashback = frame[idx_frame_after_flashback-1]\n    frames_after_flashback = frame[idx_frame_after_flashback] # first frame after validating the flashback\n    \n    for i in range(number_flashback):\n        X_start = pos_after_flashback[i, :]\n        frame_start = frames_after_flashback[i]\n        idx_pos = idx_frame_after_flashback[i]\n        d = ((X[idx_pos-500:idx_pos] - X_start)**2).sum(axis=1)\n        start, stop = frame[idx_pos - 500 + np.argmin(d)], frame_start\n        df = df[(df[\"frameIdentifier\"] > stop) | (df[\"frameIdentifier\"] <= start)]\n        \n    return df\n\ndf = remove_flashbacks(df, pilot=19)","1a096e31":"subdf = df[(df[\"pilot_index\"] == 19) & (df[\"currentLapNum\"] == 2)][[\"worldPositionX\", \"worldPositionZ\", \"throttle\", \"brake\", \"lapDistance\"]]","08c60719":"subdf.info()","51c32f5a":"c = [[\"r\", \"b\"][x] for x in subdf[\"throttle\"]>0.95]\n\nplt.figure(figsize=(20, 12))\nplt.scatter(subdf[\"worldPositionZ\"], subdf[\"worldPositionX\"], marker=\"o\", s=1, c=c)\nplt.axis('equal')\n# plt.xlim(-500, -300)\n# plt.ylim(-200, 0)\nplt.show()","9b73e7fe":"c = [[\"r\", \"b\"][x] for x in subdf[\"brake\"]>0.1]\n\nplt.figure(figsize=(20, 12))\nplt.scatter(subdf[\"worldPositionZ\"], subdf[\"worldPositionX\"], marker=\"o\", s=1, c=c)\nplt.axis('equal')\n# plt.xlim(-500, -300)\n# plt.ylim(-200, 0)\nplt.show()","daa6938a":"subdf[\"flat_out\"] = subdf[\"throttle\"]>0.95\nsubdf[\"braking_zone\"] = subdf[\"brake\"]>0.30","af781355":"def get_distance(df, feature):\n    dist = df[\"lapDistance\"].values\n\n    ans = 0\n    for key, seq in groupby( df[feature].values):\n        n = len(list(seq))\n        if key:\n            ans += dist[n-1] - dist[0] \n        dist = dist[n:]\n\n    return ans","5944e0c9":"print(get_distance(subdf, \"flat_out\"))\nprint(get_distance(subdf, \"braking_zone\"))","a202a272":"df[\"flat_out\"] = df[\"throttle\"]>0.95\ndf[\"braking_zone\"] = df[\"brake\"]>0.30","53cf2d97":"flat = df.groupby([\"pilot_index\", \"currentLapNum\"]).apply(get_distance, feature=\"flat_out\").reset_index()\nbrake = df.groupby([\"pilot_index\", \"currentLapNum\"]).apply(get_distance, feature=\"braking_zone\").reset_index()","0e609e7c":"ans = pd.merge(flat, brake, how=\"left\", left_on=[\"pilot_index\", \"currentLapNum\"], right_on = [\"pilot_index\", \"currentLapNum\"])\nans.columns = [\"pilot_index\", \"currentLapNum\", \"flat_out\", \"braking_zone\"]\nans = pd.merge(ans, pilot, how=\"left\", left_on=[\"pilot_index\"], right_on = [\"pilot_index\"])","eea4b228":"ans = ans[ans[\"currentLapNum\"]<28]","d46f5244":"ans.head()","e7fe482e":"ans.quantile(0.5)","783ae1ef":"fig, (ax, ax2) = plt.subplots(1, 2, figsize=(30, 12))\nsns.boxplot(x=\"teamId\", y=\"flat_out\", data=ans, ax=ax)\nsns.boxplot(x=\"teamId\", y=\"braking_zone\", data=ans, ax=ax2)\nplt.show()","7d878aba":"def get_distance(df, feature):\n    dist = df[\"lapDistance\"].values\n\n    ans = 0\n    for key, seq in groupby( df[feature].values):\n        n = len(list(seq))\n        if key:\n            ans += dist[n-1] - dist[0] \n        dist = dist[n:]\n\n    return ans\n\ndf[\"above300\"] = df[\"speed\"]>300\ndf[\"below150\"] = df[\"speed\"]<150\nabove300 = df.groupby([\"pilot_index\", \"currentLapNum\"]).apply(get_distance, \"above300\").rename(\"above300\").reset_index()\nbelow150 = df.groupby([\"pilot_index\", \"currentLapNum\"]).apply(get_distance, \"below150\").rename(\"below150\").reset_index()","09d939f0":"ans = pd.merge(above300, below150, how=\"left\", left_on=[\"pilot_index\", \"currentLapNum\"], right_on = [\"pilot_index\", \"currentLapNum\"])\nans = pd.merge(ans, pilot, how=\"left\", left_on=[\"pilot_index\"], right_on = [\"pilot_index\"])\nans = ans[ans[\"currentLapNum\"]<28]\n\nans[[\"above300\", \"below150\"]].median()","7361715c":"fig, (ax, ax2) = plt.subplots(1, 2, figsize=(30, 12))\nsns.boxplot(x=\"teamId\", y=\"above300\", data=ans, ax=ax)\nsns.boxplot(x=\"teamId\", y=\"below150\", data=ans, ax=ax2)\nplt.show()","f40936c4":"def get_number_gear_change(df):\n    ans = 0\n    for key, seq in groupby(df[\"gear\"]):\n        ans += 1\n    return ans","ffdd5295":"gear = df.groupby([\"pilot_index\", \"currentLapNum\"]).apply(get_number_gear_change).rename(\"gear_change\").reset_index()\ngear = pd.merge(gear, pilot, how=\"left\", left_on=[\"pilot_index\"], right_on = [\"pilot_index\"])\ngear = gear[gear[\"currentLapNum\"]<28]","b05900ce":"gear.head()","c0cf5680":"gear[\"gear_change\"].median()","ef7e0d63":"fig, (ax, ax2) = plt.subplots(1, 2, figsize=(30, 12))\nsns.boxplot(x=\"teamId\", y=\"gear_change\", data=gear, ax=ax)\nsns.boxplot(x=\"currentLapNum\", y=\"gear_change\", data=gear, ax=ax2)\nplt.show()","8d25c3be":"subdf = df[(df[\"pilot_index\"] == 19) & (df[\"currentLapNum\"] == 2)][[\"worldPositionX\", \"worldPositionZ\", \"gear\", \"speed\"]]","f949a1ba":"plt.figure(figsize=(20, 12))\nplt.scatter(subdf[\"worldPositionZ\"], subdf[\"worldPositionX\"], marker=\"o\", s=1, c=subdf[\"speed\"], cmap=\"cool\")\nplt.axis('equal')\n# plt.xlim(-500, -300)\n# plt.ylim(-200, 0)\nplt.title(\"Speed on track\")\nplt.show()","48c77136":"fig, ax = plt.subplots(1, figsize=(30, 12))\nsns.scatterplot(x=\"currentLapNum\", y=\"LapTime\", hue=\"pilot_index\", data=race, ax=ax)\nax.hlines(race[\"LapTime\"].median(), 0, 30)\nplt.show()","94a5049a":"fastest_lap = race[race[\"currentLapNum\"]<28][\"LapTime\"].min()\nfastest_avg_speed = session[\"trackLength\"] \/ fastest_lap * 3.6\nprint(f\"Fastest Average Speed : {fastest_avg_speed:.2f}km\/h\")","0d5d3301":"speed = session[\"trackLength\"] \/ race[\"LapTime\"].median() * 3.6\nprint(f\"Average Speed : {speed:.2f}km\/h\")","872ff6f1":"def get_max_speed(df):\n    idx = df[\"speed\"].argmax()\n    return df.iloc[idx][[\"drs\", \"speed\"]]\n\nspeed = df.groupby([\"pilot_index\", \"currentLapNum\"]).apply(get_max_speed).reset_index()\nspeed = speed[speed[\"currentLapNum\"]<28]\nspeed = pd.merge(speed, pilot, how=\"left\", left_on=[\"pilot_index\"], right_on = [\"pilot_index\"])","2ba6e351":"plt.figure(figsize=(20, 12))\nsns.boxplot(x=\"teamId\", y=\"speed\", hue=\"drs\", data=speed)\nplt.show()","8cd1e0f1":"subdf = df[(df[\"pilot_index\"] == 19) & (df[\"currentLapNum\"] == 2)][[\"worldPositionX\", \"worldPositionZ\", 'gForceLateral', 'gForceLongitudinal', 'gForceVertical', \"lapDistance\"]]","d055d200":"plt.plot(subdf[\"lapDistance\"], subdf[\"gForceLateral\"])\nplt.show()","7cc90f0b":"subdf = df[(df[\"pilot_index\"] == 19)][[\"worldPositionX\", \"worldPositionZ\", 'gForceLateral', 'gForceLongitudinal', 'gForceVertical', \"lapDistance\", \"currentLapNum\"]]\n\nplt.figure(figsize=(20, 12))\nfor i in range(20):\n    plt.plot(subdf[subdf[\"currentLapNum\"] == i][\"lapDistance\"], subdf[subdf[\"currentLapNum\"] == i][\"gForceLateral\"])\nplt.show()","b25eac00":"plt.figure(figsize=(20, 12))\nfor i in range(20):\n    plt.plot(subdf[subdf[\"currentLapNum\"] == i][\"lapDistance\"], subdf[subdf[\"currentLapNum\"] == i][\"gForceLongitudinal\"])\nplt.ylim(-5, 3)\nplt.show()","53e4284c":"def get_max_g_lat(df):\n    return df[\"gForceLateral\"].max()\n\nacc = df.groupby([\"pilot_index\", \"currentLapNum\"]).apply(get_max_g_lat).rename(\"max_lat_acc\").reset_index()","75135f7e":"acc = acc[acc[\"currentLapNum\"]<28]\nacc = pd.merge(acc, pilot, how=\"left\", left_on=[\"pilot_index\"], right_on = [\"pilot_index\"])","cc0c763d":"acc.head()","8f9b0bce":"fig, ax = plt.subplots(figsize=(20, 12))\nsns.boxplot(x=\"driverId\", y=\"max_lat_acc\", data=acc, ax=ax)\nax.set_xticklabels(ax.get_xticklabels(),rotation=30)\nplt.show()","3b8a9704":"fig, ax = plt.subplots(figsize=(20, 12))\nsns.boxplot(x=\"driverId\", y=\"max_lat_acc\", data=acc[acc[\"teamId\"] == \"Mercedes\"], ax=ax)\nax.set_xticklabels(ax.get_xticklabels(),rotation=30)\nplt.show()","f5765038":"# Max Speed\n\nSimilarly, we can have a look at the max speed per lap and keep the information is it has been reach with or without DRS (in principle the DRS should give 15km\/h advantage)","f5c0fbac":"We can see a difference of around 15 km\/h with variation based on the team as they don't have the same engine.","4f30ab7c":"My suprise is that I (Valtteri Bottas) takes a lot less forces than my teammate. If we filter only between us, let's see the result","3a2f9f7c":"We need to remove the last laps in case I have taken 1 last to the lasts cars","f2f00a65":"Ok now we have the code for 1 pilot and 1 lap. L'ets do in for each pilot \/ lap to be able to see the spread and find an average.","24199d8b":"Here it is, we can see that Mercedes is spending a lot more distance at full throttle than Alpha Romeo (around +300m per lap). In the other hand, they are often braking in less distance per lap (probably because they are slower or in traffic).\nNow we can do the similar work for speed","fb266c9c":"Strangely, the distance per lap at more than 300km is not very consistent. The race is Bahrein which contains a lot of straight lines. However, the distance at less than 150 km\/h is quite packed except outliers due to pit stop.","9f4b9138":"The measure will be in percent to be able to compare tracks but in percent of the distance not the time to be more consistent.","3f2c765d":"# Track Stats\n\nOn this Notebook, some part of the code are reused from previous notebook. The objective is to get some statistics about the track such as distance @full speed, number of gear change and so on.","6bb7b725":"# Gs\n\nThis one is a bit more tricky, I wanted to get the max G-force a triver is taking","2dcda20f":"# percent lap over 300 km\/h & below 150","3d26b71b":"# Percent flat out and breaking\n\nLet's look at how often we are at full throttle and braking","f2dcd882":"That means, I'm probably driving in a too smooth way and I should be able to push more the car in curves. This is what I see when I drive vs 100 A.I. I'll maybe record other lap vs better A.I. than me to understand where I'm braking too much in order to improve my lap time. On those data, I'm already faster tahn AI except in Spain so it makes no sense to explore it here.\n\nI hope you enjoyed it ! More to come","f9ad62cd":"# gear change\n\nOn fun metric provided during a real race was the average number of gear change per lap. This is quite simple to do:","8f40b0df":"# Lap Time \/ Fastest Lap average speed\n\nEasy one, let's look at the average speed on the track and also the average speed of the fastest lap. Due to outliers with pit stop and the lap lap, the madin will be used instead of the mean.","04c83595":"We can see 3\/4 laps with more gear change, the first one is due to the start (+8 gears) and the pit stop (+5 gears in average)"}}