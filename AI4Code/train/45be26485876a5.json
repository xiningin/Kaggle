{"cell_type":{"d69ef483":"code","1312c3f1":"code","cb2e6a9f":"code","0158d578":"code","60d23541":"code","39f15c83":"code","fa9e4c38":"code","60c5365d":"code","17aa1e4c":"code","1cdcbf86":"markdown","3ff94e3d":"markdown","24d644e3":"markdown","9e9790b7":"markdown","de6456c9":"markdown","0999403f":"markdown","f6418b3f":"markdown","3f190b58":"markdown","a6d373b5":"markdown","407ec40a":"markdown","0e07b33e":"markdown"},"source":{"d69ef483":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1312c3f1":"horse_data = pd.read_csv(\"\/kaggle\/input\/horse-colic\/horse.csv\")\nhorse_data","cb2e6a9f":"horse_data.dtypes","0158d578":"display(pd.DataFrame(horse_data.isna().sum()))","60d23541":"from sklearn.preprocessing import LabelEncoder\nfrom category_encoders import TargetEncoder\n\nencoder = LabelEncoder()\n\ny = pd.DataFrame({'outcome' : encoder.fit_transform(horse_data['outcome'])})\n\nencoder1 = TargetEncoder(handle_missing='return_nan',return_df=True)\n\nhorse_enc = encoder1.fit_transform(horse_data,y)\n\nhorse_enc","39f15c83":"from sklearn.impute import KNNImputer\n\nimputer = KNNImputer(n_neighbors=5,weights='uniform')\n\nhorse_enc = pd.DataFrame(imputer.fit_transform(horse_enc),columns=horse_data.columns)\n    \nhorse_enc['outcome'] = horse_enc['outcome'].astype(np.uint8)\nhorse_enc.dtypes","fa9e4c38":"display(horse_enc.corr().abs()['outcome'].sort_values())","60c5365d":"from xgboost import XGBClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\ndata = horse_enc.drop(['nasogastric_reflux_ph','outcome','rectal_temp','nasogastric_tube','lesion_3','pain'],axis=1)\ntarget = horse_enc['outcome']\n\nX_train, X_test, y_train, y_test = train_test_split(data,target, random_state=2020)\n\nxgb = XGBClassifier(n_estimators=1000,learning_rate=0.025,random_state=2020)\n\nxgb.fit(X_train,y_train,early_stopping_rounds=10,eval_set=[(X_test,y_test)])","17aa1e4c":"y_pred = xgb.predict(X_test)\n\nprint('Accuracy: ',accuracy_score(y_test, y_pred))","1cdcbf86":"## Encoding the categorics attributes","3ff94e3d":"## The basic import automated by Kaggle","24d644e3":"## Loading the dataset in to Pandas DataFrame","9e9790b7":"## Preparing the model\n\nAfter looking the correlation numbers and some experiments, 6 attributes was ignored due to high correlation or was too low.","de6456c9":"# **Horse Colic XGB Model**\n\nThis notebook intend to predict the status of the horse after some features presents in this data set. \nIn this script i will use some feature engineering and data preprocessing as category transformation\nand imputing through null values.\n\nPS: My english is not good \ud83d\ude01","0999403f":"## The accuracy score","f6418b3f":"Feel free to give a upvote and suggestion are welcome!","3f190b58":"## Checking nulls and empty values","a6d373b5":"## Seeing the correlation between the target and instances","407ec40a":"## Making the imputation","0e07b33e":"# Checking the types presents in dataset"}}