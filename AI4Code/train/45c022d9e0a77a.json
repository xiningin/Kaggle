{"cell_type":{"7ed8e27e":"code","55e24e9d":"code","5733dc40":"code","bccc3c81":"code","aea19767":"code","8de4d1f7":"code","b7c9ec97":"code","c7554a4d":"code","36fe2f26":"code","c3a49dba":"code","59dc17c2":"code","5a4fe7f9":"code","a599231d":"code","254f82eb":"code","e5f198cd":"code","444fb63d":"code","b6f86cb5":"code","3285a366":"code","70855544":"code","d27f062f":"code","fa6f3842":"code","4aeaf191":"code","b0d435a4":"code","6bf5e190":"code","167f5fef":"code","8346798b":"code","4cc2f074":"code","ace31c47":"code","a0fd7a8b":"code","add9ad2e":"code","fc6a2b5a":"code","7ff5c64c":"code","efec34c1":"code","d1ea02a0":"code","11fc1c87":"markdown","27f783b1":"markdown","91604727":"markdown","84446fb7":"markdown","ded7cf9c":"markdown","15538d7b":"markdown","1c9f7465":"markdown","55439a8e":"markdown","3a089c96":"markdown","a566315c":"markdown","b1cee9fb":"markdown","1e74bbe9":"markdown","18e5b130":"markdown","0bf76e77":"markdown","d79f1d5a":"markdown","2e1a15a0":"markdown","d5816720":"markdown","fb88915f":"markdown","78e6cb08":"markdown","68875536":"markdown","4ac12066":"markdown"},"source":{"7ed8e27e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\nimport ast\n\n# Any results you write to the current directory are saved as output.\n\nimport json\nimport ast\nfrom collections import Counter\nimport time\nimport datetime\nimport os","55e24e9d":"df_train = pd.read_csv('..\/input\/train.csv')\ndf_test = pd.read_csv('..\/input\/test.csv')","5733dc40":"# from this kernel: https:\/\/www.kaggle.com\/gravix\/gradient-in-a-box\ndict_columns = ['belongs_to_collection', 'genres', 'production_companies',\n                'production_countries', 'spoken_languages', 'Keywords', 'cast', 'crew']","bccc3c81":"def text_to_dict(df, columns_to_parse):\n    for column in columns_to_parse:\n        df[column] = df[column].apply(lambda x: {} if pd.isna(x) else ast.literal_eval(x) )\n    return df","aea19767":"df_train_clean = text_to_dict(df_train,dict_columns)\ndf_test_clean = text_to_dict(df_test, dict_columns)","8de4d1f7":"df_train_clean['has_collection'] = df_train_clean['belongs_to_collection'].apply(lambda x: len(x) if x != {} else 0)\ndf_test_clean['has_collection'] = df_test_clean['belongs_to_collection'].apply(lambda x: len(x) if x != {} else 0)","b7c9ec97":"columns_to_select = ['genres', 'production_companies',\n                'production_countries', 'spoken_languages', 'Keywords', 'cast', 'crew']","c7554a4d":"def number_of_values(df, columns):\n    for column in columns:\n        new_column_name = 'num_' + column\n        df[new_column_name] = df[column].apply(lambda x: len(x) if x != {} else 0)\n    return df","36fe2f26":"df_train_clean = number_of_values(df_train_clean, columns_to_select)\ndf_test_clean = number_of_values(df_test_clean, columns_to_select)","c3a49dba":"def list_of_values(df, columns, key):\n    for column in columns:\n        new_column_name = 'all_' + column + '_' + key\n        df[new_column_name] = df[column].apply(lambda x: ' '.join(sorted([i[key] for i in x])) if x != {} else '')\n    return df","59dc17c2":"columns_to_select = ['belongs_to_collection', 'genres', 'production_companies',\n                'production_countries', 'spoken_languages', 'Keywords', 'cast', 'crew']","5a4fe7f9":"df_train_clean = list_of_values(df_train_clean, columns_to_select, 'name')\ndf_test_clean = list_of_values(df_test_clean, columns_to_select, 'name')","a599231d":"columns_top_to_select = {'belongs_to_collection':32, 'genres': 10, 'production_companies': 20,\n                'production_countries': 15, 'spoken_languages': 15, 'Keywords':30, 'cast':30, 'crew':20}","254f82eb":"def top_values(df_calculate_top, df_apply_top, columns_to_select, key):\n    for column, top_value in columns_to_select.items():\n        list_of_values = df_calculate_top[column].apply(lambda x: [i[key] for i in x] if x != {} else []).values\n        top_values = [m[0] for m in Counter([i for j in list_of_values for i in j]).most_common(top_value)]\n        for value in top_values:\n            df_apply_top[column+'_'+key+'_'+value] = df_apply_top['all_'+column+'_'+key].apply(lambda x: 1 if value in x else 0)\n    return df_apply_top","e5f198cd":"df_train_clean = top_values(df_train_clean, df_train_clean, columns_top_to_select, 'name')\ndf_test_clean = top_values(df_train_clean, df_test_clean, columns_top_to_select, 'name')","444fb63d":"df_train_clean = list_of_values(df_train_clean, ['cast'], 'character')\ndf_test_clean = list_of_values(df_test_clean, ['cast'], 'character')\n\ncolumns_top_to_select = {'cast': 10}\ndf_train_clean = top_values(df_train_clean, df_train_clean, columns_top_to_select, 'character')\ndf_test_clean = top_values(df_train_clean, df_test_clean, columns_top_to_select, 'character')","b6f86cb5":"#count gender\ndict_gender = {0:'genunk', 1:'female', 2:'male'}","3285a366":"def count_gender(df, dict_gender, column, key):\n    for k, v in dict_gender.items():\n        df['num' + '_' + column + '_' + key + '_' + v] = df[column].apply(lambda x: sum([1 for i in x if i[key] == k]))\n    return df","70855544":"#cast gender\ndf_train_clean = count_gender(df_train_clean, dict_gender, 'cast', 'gender')\ndf_test_clean = count_gender(df_test_clean, dict_gender, 'cast', 'gender')","d27f062f":"#crew gender\ndf_train_clean = count_gender(df_train_clean, dict_gender, 'crew', 'gender')\ndf_test_clean = count_gender(df_test_clean, dict_gender, 'crew', 'gender')","fa6f3842":"def top_jobs(df, all_values, column, new_column_name, top):\n    top = [m[0] for m in Counter([i for j in all_values for i in j]).most_common(top)]\n    for value in top:\n        df[new_column_name+'_'+value] = df[column].apply(lambda x: 1 if value in str(x) else 0)\n    return df","4aeaf191":"list_directors = list(df_train_clean['crew'].apply(lambda x: [i['name'] for i in x if i['job'] == 'Director'] if x != {} else []).values)\ndf_train_clean = top_jobs(df_train_clean, list_directors, 'crew', 'director', 30)\ndf_test_clean = top_jobs(df_test_clean, list_directors, 'crew', 'director', 30)","b0d435a4":"list_producers = list(df_train_clean['crew'].apply(lambda x: [i['name'] for i in x if i['job'] == 'Executive Producer'] if x != {} else []).values)\ndf_train_clean = top_jobs(df_train_clean, list_producers, 'crew', 'producer', 15)\ndf_test_clean = top_jobs(df_test_clean, list_producers, 'crew', 'producer', 15)","6bf5e190":"def fix_date(x):\n    \"\"\"\n    Fixes dates which are in 20xx\n    \"\"\"\n    year = x.split('\/')[2]\n    if int(year) <= 19:\n        return x[:-2] + '20' + year\n    else:\n        return x[:-2] + '19' + year","167f5fef":"df_test_clean.loc[df_test_clean['release_date'].isnull() == True, 'release_date'] = '01\/01\/98' ","8346798b":"df_train_clean['release_date'] = df_train_clean['release_date'].apply(lambda x: fix_date(x))\ndf_test_clean['release_date'] = df_test_clean['release_date'].apply(lambda x: fix_date(x))\ndf_train_clean['release_date'] = pd.to_datetime(df_train_clean['release_date'])\ndf_test_clean['release_date'] = pd.to_datetime(df_test_clean['release_date'])","4cc2f074":"df_train_clean['year']=pd.DatetimeIndex(df_train_clean['release_date']).year\ndf_test_clean['year']=pd.DatetimeIndex(df_test_clean['release_date']).year\ndf_train_clean['month']=pd.DatetimeIndex(df_train_clean['release_date']).month\ndf_test_clean['month']=pd.DatetimeIndex(df_test_clean['release_date']).month\ndf_train_clean['yr_mth']=df_train_clean['year']*100+df_train_clean['month']\ndf_test_clean['yr_mth']=df_test_clean['year']*100+df_test_clean['month']","ace31c47":"def find_features_start_by(df, start):\n    features = list(df)\n    start_by = []\n    for feature in features:\n        if feature.startswith(start):\n            start_by.append(feature)\n    return start_by\n        ","a0fd7a8b":"#drop from train set\nfeatures_to_drop = find_features_start_by(df_train_clean, 'all_')\ndf_train_clean = df_train_clean.drop(features_to_drop, axis=1)\n\n#drop from test set\ndf_test_clean = df_test_clean.drop(features_to_drop, axis=1)\n","add9ad2e":"original_features = ['belongs_to_collection', 'genres', 'production_companies', 'production_countries',\n                     'spoken_languages', 'Keywords', 'cast', 'crew', 'release_date']","fc6a2b5a":"df_train_clean = df_train_clean.drop(original_features, axis=1)\ndf_test_clean = df_test_clean.drop(original_features, axis=1)","7ff5c64c":"print('training set: ' + str(len(list(df_train_clean))) + ' features')\nprint('testing set: ' + str(len(list(df_test_clean))) + ' features')","efec34c1":"i = 1\nfor column in list(df_train_clean.columns):\n    print(str(i) + ' ' + column)\n    i = i + 1","d1ea02a0":"df_train_clean.to_csv('..\/working\/train_prep.csv', index=False)\ndf_test_clean.to_csv('..\/working\/test_prep.csv', index=False)","11fc1c87":"Create features for crew main **directors \/ producers**","27f783b1":"Main **producers**","91604727":"#### We'll use the data prep part from the kernel [https:\/\/www.kaggle.com\/artgor\/eda-feature-engineering-and-model-interpretation](https:\/\/www.kaggle.com\/artgor\/eda-feature-engineering-and-model-interpretation). The main difference is that, when calculating top categories (such as genres, production companies, etc) we are using only the training dataset","84446fb7":"* ## Number of values: `genres, production_companies, production_countries, spoken_languages, Keywords, cast, crew`\nCreate new features counting number of values of the features above","ded7cf9c":"Create features for cast **genders**","15538d7b":"# Create new features","1c9f7465":"Main **directors**","55439a8e":"* ## Feature: `belongs_to_collection`\n Create a binary variable for belonging to a collection","3a089c96":"Create features for crew **genders**","a566315c":"* ## Feature: `cast`","b1cee9fb":"* ## Feature: `crew`","1e74bbe9":"Remove original features: `belongs_to_collection, genres, production_companies, production_countries, spoken_languages, Keywords, cast, crew`","18e5b130":"Create features for **main characters** in cast","0bf76e77":"Number of features","d79f1d5a":"# Final data after preparation","2e1a15a0":"* ## Feature `release_date`\nConvert dates into date time formats","d5816720":"* ## List of values: `belongs_to_collection, genres, production_companies, production_countries, spoken_languages, Keywords, cast, crew`\nCreate new features creating a list with names of the features above","fb88915f":"Remove all features which start by `all_`","78e6cb08":"# Remove unecessary features","68875536":"# Import data","4ac12066":"* ## Top values: `belongs_to_collection, genres, production_companies, production_countries, languages_spoken, Keywords, cast, crew`\nCreate new features for the top of names of the features above"}}