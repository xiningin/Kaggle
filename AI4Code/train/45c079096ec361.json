{"cell_type":{"70ddc45a":"code","4998c6e7":"code","8517dd59":"code","12d1fc40":"code","e2d11238":"code","9f58a86f":"code","7a98cb5e":"code","6f8a0c0e":"code","ab93ea37":"code","7068e8ae":"code","890930a7":"code","f3b29d49":"code","7bb3e814":"code","fddb8439":"code","87df7206":"code","e683c574":"code","8268e658":"code","4d328909":"code","f6726ddb":"code","acbccaea":"code","87bd88f4":"code","1b88abae":"code","f608142d":"markdown","80b2bc0d":"markdown","21ed231b":"markdown","69fa3fc7":"markdown","42aa5200":"markdown","185a946a":"markdown","1d650001":"markdown","b2918e62":"markdown","826c6eb4":"markdown","d7449d29":"markdown","9fb56aa5":"markdown","10c11c13":"markdown","4f02df18":"markdown","24e9f624":"markdown"},"source":{"70ddc45a":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","4998c6e7":"train = pd.read_csv('..\/input\/mobile-price-classification\/train.csv')\ntest = pd.read_csv('..\/input\/mobile-price-classification\/test.csv')\ntrain.head()","8517dd59":"train.info()","12d1fc40":"test.head()","e2d11238":"test.info()","9f58a86f":"# 0 for low cost\n# 1 for medium cost\n# 2 for high cost\n# 3 for very high cost\n\ntrain.price_range.value_counts()","7a98cb5e":"## EDA\n# Distribution\n\ntrain.hist(bins=30, figsize=(15, 15))","6f8a0c0e":"# Most important feature\n\nCorr = train.corr()\n\nIF = Corr['price_range'].sort_values(ascending=False).head(10).to_frame()\nIF.head(5)","ab93ea37":"f = plt.figure(figsize=(15,12))\n\n# corr with ram\nax = f.add_subplot(221)\nax = sns.scatterplot(x=\"price_range\", y=\"ram\", color='b', data=train)\nax.set_title('Corr with RAM')\n\n# corr with Battery\nax = f.add_subplot(222)\nax = sns.scatterplot(x=\"price_range\", y=\"battery_power\", color='c', data=train)\nax.set_title('Corr with battery')\n\n# corr with px_width\nax = f.add_subplot(223)\nax = sns.scatterplot(x=\"price_range\", y=\"px_width\", color='r', data=train)\nax.set_title('Corr with px width')\n\n# corr with height\nax = f.add_subplot(224)\nax = sns.scatterplot(x=\"price_range\", y=\"px_height\", color='g', data=train)\nax.set_title('Corr with px height')","7068e8ae":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score","890930a7":"# Split Data\n\nX = train.drop('price_range', axis=1)\ny = train['price_range']","f3b29d49":"X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, test_size=0.3, random_state=42)","7bb3e814":"print('X_train : ' + str(X_train.shape))\nprint('X_test : ' + str(X_test.shape))\nprint('y_train : ' + str(y_train.shape))\nprint('y_test : ' + str(y_test.shape))","fddb8439":"from sklearn.ensemble import RandomForestClassifier\n\nclassifier = RandomForestClassifier(n_estimators = 200, criterion = 'entropy', random_state = 12)\nclassifier.fit(X_train, y_train)\n\n# predict\ny_pred = classifier.predict(X_test)\naccuracy = accuracy_score(y_test, y_pred)\nprint(accuracy)","87df7206":"import xgboost as xgb\n\n# Instantiate the XGBClassifier: xg_cl\nxg_cl = xgb.XGBClassifier(objective='multi:softmax', num_class=3, n_estimators=150, seed=123)\nxg_cl.fit(X_train, y_train)\npreds = xg_cl.predict(X_test)\n\n# Compute the accuracy: accuracy\naccuracy = float(np.sum(preds==y_test))\/y_test.shape[0]\nprint(\"accuracy: %f\" % (accuracy))","e683c574":"from sklearn.svm import SVC\nfrom sklearn.model_selection import GridSearchCV\n\nsvm = SVC()\n\nparameters = {'C':[0.1, 1, 10], 'gamma':[0.00001, 0.0001, 0.001, 0.01, 0.1]}\nmodel = GridSearchCV(svm, param_grid=parameters)\nmodel.fit(X_train, y_train)\n\n# Best parameters\nprint(\"Best CV params\", model.best_params_)\n\n# accuracy\nprint(\"Test accuracy :\", model.score(X_test, y_test))","8268e658":"## Assign the value\n\npredicted_value = model.predict(X_test)\nactual_value = y","4d328909":"## COmparison distribution in Train data\n\nsns.distplot(actual_value, hist=False, label=\"Actual Values\")\nsns.distplot(predicted_value, hist=False, label=\"Predicted Values\")\nplt.title('Distribution Comaprison with SVM')\nplt.show()","f6726ddb":"test.head()","acbccaea":"X2 = test.drop('id', axis=1)","87bd88f4":"## Perform predictions\n\npredicted_test_value = model.predict(X2)\npd.value_counts(predicted_test_value)","1b88abae":"# Here is how distribution look like in test data price range\n\nsns.distplot(predicted_value, hist=False, label=\"Predicted Values\")\nplt.show()","f608142d":"The most important feature is ram, battery power, width and height. Ram is strongly correlated with price range. Herewe can conclude that the main factor of the price is the ram itself. The other are not to strong and seem almost distributed evenly.","80b2bc0d":"## Quick look\n\nIn this dataset, we got two csv files, train data and test data. both had 21 column each.","21ed231b":"Our target column is price range from train data. this column has 4 unique value, 0 for low cost mobile phone, 1 for medium cost mobile phone. 2 for high cost and 3 for very high cost. Since the data disributed evenly, we are going to use it as it is,","69fa3fc7":"## Modeling","42aa5200":"## Predict\n\nLet's predict the price range in test data","185a946a":"Here we found that SVM perfrom the better than the other algorithm. We are going to use this model to predict the data on train and test data.","1d650001":"### Random Forest Classifier","b2918e62":"Here we have a distribution plot for every columns, a few column is evenly distributed like dual sim, bluetooth, price range, wifi, and touch screen. The others distributed randomly.","826c6eb4":"## End\n\nThat is all for this kernel today, hope you like it.\nThank you.\nHave a good day.","d7449d29":"### SVM","9fb56aa5":"## Import Modules","10c11c13":"## Introduction\n\nhai kagglers, today i'm going to make a predictions on Mobile phone pricing dataset using random forest, XGboost and SVM algorithm, let's see which one perform the best.","4f02df18":"### XGBoost","24e9f624":"Here we have value count on every unique value on predicted test price range. This is almost evenly distributed, but the phone with a very high cost is dominating over the others with 26.5 %. and the lowest is medium cost with 23.2 %."}}