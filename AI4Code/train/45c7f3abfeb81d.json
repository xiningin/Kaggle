{"cell_type":{"6aad629e":"code","233b9b95":"code","c8f5d072":"code","f65f85bc":"code","abcec0ac":"code","56bd1be1":"code","37f8943e":"markdown","4edba6e9":"markdown","6a8b5e73":"markdown","bd5b18bd":"markdown","f696e469":"markdown","a8d4dbe2":"markdown","712b2f70":"markdown","599b2b5a":"markdown","ace851c0":"markdown"},"source":{"6aad629e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","233b9b95":"from google.cloud import bigquery\n\nclient = bigquery.Client()\n\ndataset_ref = client.dataset(\"san_francisco\", project = \"bigquery-public-data\")\n\ndataset = client.get_dataset(dataset_ref)\n\ntable_ref = dataset_ref.table(\"bikeshare_trips\")\n\ntable = client.get_table(table_ref)\n\nclient.list_rows(table, max_results = 5).to_dataframe()","c8f5d072":"# Query to count the (cumulative) number of trips per day\nnum_trips_query = \"\"\"\n                  WITH trips_by_day AS\n                  (\n                  SELECT DATE(start_date) AS trip_date,\n                      COUNT(*) as num_trips\n                  FROM `bigquery-public-data.san_francisco.bikeshare_trips`\n                  WHERE EXTRACT(YEAR FROM start_date) = 2015\n                  GROUP BY trip_date\n                  )\n                  SELECT *,\n                      SUM(num_trips) \n                          OVER (\n                               ORDER BY trip_date\n                               ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n                               ) AS cumulative_trips\n                      FROM trips_by_day\n                  \"\"\"\n\n# Run the query, and return a pandas DataFrame\nnum_trips_result = client.query(num_trips_query).result().to_dataframe()\nnum_trips_result.head()","f65f85bc":"# Query to track beginning and ending stations on October 25, 2015, for each bike\nstart_end_query = \"\"\"\n                  SELECT bike_number,\n                      TIME(start_date) AS trip_time,\n                      FIRST_VALUE(start_station_id)\n                          OVER (\n                               PARTITION BY bike_number\n                               ORDER BY start_date\n                               ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING\n                               ) AS first_station_id,\n                      LAST_VALUE(end_station_id)\n                          OVER (\n                               PARTITION BY bike_number\n                               ORDER BY start_date\n                               ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING\n                               ) AS last_station_id,\n                      start_station_id,\n                      end_station_id\n                  FROM `bigquery-public-data.san_francisco.bikeshare_trips`\n                  WHERE DATE(start_date) = '2015-10-25' \n                  \"\"\"\n\n# Run the query, and return a pandas DataFrame\nstart_end_result = client.query(start_end_query).result().to_dataframe()\nstart_end_result.head()","abcec0ac":"from google.cloud import bigquery\n\n# Create a \"Client\" object\nclient = bigquery.Client()\n\n# Construct a reference to the \"chicago_taxi_trips\" dataset\ndataset_ref = client.dataset(\"chicago_taxi_trips\", project=\"bigquery-public-data\")\n\n# API request - fetch the dataset\ndataset = client.get_dataset(dataset_ref)\n\n# Construct a reference to the \"taxi_trips\" table\ntable_ref = dataset_ref.table(\"taxi_trips\")\n\n# API request - fetch the table\ntable = client.get_table(table_ref)\n\n# Preview the first five lines of the table\nclient.list_rows(table, max_results=5).to_dataframe()","56bd1be1":"avg_trips_taxi_query = \"\"\"\n                      WITH trips_by_day AS\n                      (\n                      SELECT DATE(trip_start_timestamp) AS trip_date,\n                          COUNT(*) as num_trips\n                      FROM `bigquery-public-data.chicago_taxi_trips.taxi_trips`\n                      WHERE trip_start_timestamp >= '2016-01-01' AND trip_start_timestamp < '2018-01-01'\n                      GROUP BY trip_date\n                      ORDER BY trip_date\n                      )\n                      SELECT trip_date,\n                          AVG(num_trips) \n                          OVER (\n                               ORDER BY trip_date\n                               ROWS BETWEEN 15 PRECEDING AND 15 FOLLOWING\n                               ) AS avg_num_trips\n                      FROM trips_by_day\n                      \"\"\"\n\nresult = client.query(avg_trips_taxi_query).result().to_dataframe()\nresult.head()","37f8943e":"The first **common table expression** allows us to to calculate daily trips given from a single year. While the `SUM()` function then allows us to to create a `cumalitive_trips` column that aggregates from the **rows preceeding as well as the current row** (note that since there is no `PARTITION` clause everything is treated as a single grouping). \n\nThe next query tracks the stations where each bike began (in `start_station_id`) and ended (in `end_station_id`) the day on October 25, 2015.","4edba6e9":"### Example\n\nNow let's take a look at [the San Francisco Open Data dataset](https:\/\/www.kaggle.com\/datasf\/san-francisco). We begin by reviewing the first several rows of the `bikeshare_trips` table. Of course as always we need to first set up our client as well as connection to bigquery to actually run them (including running the correct API calls to fetch the data).","6a8b5e73":"## Advanced SQL Practice 2\nJust some code to learn using SQL integrated within the Kaggle environment.\n\nIn this course we will be taking a closer look at **analytics functions** and how to use them in SQL! The syntax of the basic analytic function will always include the `OVER` clause, with three optional componenets within this:\n\n1. The `PARTITION BY` which will seperate rows into groups given a certain criteria.\n\n2. The `ORDER BY` function, which will order the data by the *partition* in a specific sequence (exactly how a `ORDER BY` would work in a regular SQL query.\n\n3. The `(ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)` is a command known as a **window frame** clause that identifies which rows to be used within a calculation.","bd5b18bd":"As you could imagine, there are many different ways to compose a **window frame** clause such as the following:\n\n* `(ROWS BETWEEN 3 PRECEEDING AND 1 FOLLOWING)`, which will include the 3 previous rows, the current row, and one following.\n\n* `(ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)`, which will be all rows in the partition.\n\nAs you can tell the clauses tend to be quite self explanatory but might require some time to get accustomed to the syntax that they operate on.","f696e469":"Let's try to predict the demand for taxis. Towards this goal, you'd like to create a plot that shows a rolling average of the daily number of taxi trips. We will use the following criteria to create this query:\n\n* `trip_date` - contains one entry for each date from January 1, 2016, to December 31, 2017.\n* `avg_num_trips` - shows the average number of daily trips, calculated over a window including the value for the current date, along with the values for the preceding 15 days and the following 15 days, as long as the days fit within the two-year time frame. For instance, when calculating the value in this column for January 5, 2016, the window will include the number of trips for the preceding 4 days, the current date, and the following 15 days.\n\nWe will also have a column that includes and calculates the `avg_num_trips`. We will first create a **common table expression** to sort by `trips_by_day`.","a8d4dbe2":"The `PARTITION BY` clause allows the inputs to be grouped by `bike_number` with the `ORDER BY` clause allowing the inputs to be sorted by the **start dates**.","712b2f70":"Each row of the table corresponds to a different bike trip, and we can use an analytic function to calculate the cumulative number of trips for each date in 2015.","599b2b5a":"### Types of Analytic Functions\n\nOn top of the general syntax for *analytic functions*, there are also differenty general types for them:\n\n#### 1) Aggregate functions\n\nThese will take all the values within a specific window as an input and return a single value. The `OVER` clause is what determines if a function should be treated as an **aggregate**. Some examples of these functions include:\n\n* `MIN()` and `MAX()` functions - return the max or min of input values.\n* `AVG()` or `SUM()` functions - return the average or sum of the input values.\n* `COUNT()` function - returns the number of rows in an input.\n\n#### 2) Navigation functions\n\nThese will assign a value based on the value of row given in the input. Some examples of these functions include:\n\n* `FIRST_VALUE()` and `LAST_VALUE()` functions - return the first or last value from the input values.\n* `LEAD()` and `LAG()` functions - return the value of the subsequent or preceeding row.\n\n#### 3) Numbering Functions\n\nThese will assign integer values to each row based on the ordering applied within the clause. Some examples of these functinos include:\n\n* `ROW_NUMBER()` function - return the order in which rows appear in the input (will start with 1)\n* `RANK()` function - all rows with the same value in the ordering column receive the same rank value, where the next row receives a rank value which increments by the number of rows with the previous rank value.","ace851c0":"Let's work with a different dataset to get a bit more familiarized with some of the **analytic functions**. "}}