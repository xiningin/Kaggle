{"cell_type":{"3f861c65":"code","2bc0b2e7":"code","8877c130":"code","bfd2cc2a":"code","cec74e85":"code","e988df5c":"code","e653613f":"code","2bf9c22d":"code","5b4b71b1":"code","bb90f2c8":"code","145b142c":"code","b4ecc89d":"code","0e7e6f5e":"code","fc971dfa":"code","0c78f78b":"code","d681d767":"code","caafc06d":"code","97989593":"code","203d0313":"code","5372f698":"code","d9bdb32f":"code","705361ea":"code","b5a46204":"code","8649fbd5":"code","2a76193c":"code","1264bbd3":"code","9116bac1":"code","8cdd4be6":"code","1dd1d96c":"code","e3ca9fd0":"code","1fb0b2c7":"code","ee02cc4b":"code","ceb43844":"code","905f5819":"code","4a91641c":"code","77e70e4a":"code","39e3e1d8":"code","b402af98":"code","949087c4":"code","54fcdf5f":"code","29052be4":"code","33a23967":"code","c49b723a":"code","0c991d28":"code","32ad1518":"code","93c5d0c5":"code","b2636c3a":"code","b23fe5ed":"markdown","939329e5":"markdown","acd8db6e":"markdown","6aaee246":"markdown","9c60c293":"markdown","b69ce854":"markdown","afb65c65":"markdown","5d0d0473":"markdown","a84b9f01":"markdown","dd3fcb4f":"markdown","9e9b3245":"markdown","98a5de9f":"markdown"},"source":{"3f861c65":"import pandas as pd\nimport numpy as np\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.corpus import wordnet\nimport nltk\nfrom nltk.corpus import stopwords \nfrom nltk.tokenize import word_tokenize \nimport re\nimport spacy\nfrom nltk.corpus import sentiwordnet as swn\nfrom IPython.display import clear_output\nimport plotly.express as px\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud\nimport plotly\nplotly.offline.init_notebook_mode (connected = True)\nfrom nltk.stem import PorterStemmer\nfrom nltk.stem import LancasterStemmer\nfrom nltk import ngrams\n# The following code creates a word-document matrix.\nfrom sklearn.feature_extraction.text import CountVectorizer\n# Modeling packages\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import classification_report","2bc0b2e7":"data=pd.read_csv('..\/input\/trip-advisor-hotel-reviews\/tripadvisor_hotel_reviews.csv')","8877c130":"data.shape","bfd2cc2a":"data.head(5)","cec74e85":"#Edits After Removing Stopwords\nEdited_Review = data['Review'].copy()","e988df5c":"data.head(10)","e653613f":"# Function to preprocess the Reviews data\ndef preprocess_Reviews_data(data,name):\n    # Proprocessing the data\n    data[name]=data[name].str.lower()\n    # Code to remove the Hashtags from the text\n    data[name]=data[name].apply(lambda x:re.sub(r'\\B#\\S+','',x))\n    # Code to remove the links from the text\n    data[name]=data[name].apply(lambda x:re.sub(r\"http\\S+\", \"\", x))\n    # Code to remove the Special characters from the text \n    data[name]=data[name].apply(lambda x:' '.join(re.findall(r'\\w+', x)))\n    # Code to substitute the multiple spaces with single spaces\n    data[name]=data[name].apply(lambda x:re.sub(r'\\s+', ' ', x, flags=re.I))\n    # Code to remove all the single characters in the text\n    data[name]=data[name].apply(lambda x:re.sub(r'\\s+[a-zA-Z]\\s+', '', x))\n    # Remove the twitter handlers\n    data[name]=data[name].apply(lambda x:re.sub('@[^\\s]+','',x))\n\n# Function to tokenize and remove the stopwords    \ndef rem_stopwords_tokenize(data,name):\n      \n    def getting(sen):\n        example_sent = sen\n        \n        filtered_sentence = [] \n\n        stop_words = set(stopwords.words('english')) \n\n        word_tokens = word_tokenize(example_sent) \n        \n        filtered_sentence = [w for w in word_tokens if not w in stop_words] \n        \n        return filtered_sentence\n    # Using \"getting(sen)\" function to append edited sentence to data\n    x=[]\n    for i in data[name].values:\n        x.append(getting(i))\n    data[name]=x\n","2bf9c22d":"lemmatizer = WordNetLemmatizer()\ndef Lemmatization(data,name):\n    def getting2(sen):\n        \n        example = sen\n        output_sentence =[]\n        word_tokens2 = word_tokenize(example)\n        lemmatized_output = [lemmatizer.lemmatize(w) for w in word_tokens2]\n        \n        # Remove characters which have length less than 2  \n        without_single_chr = [word for word in lemmatized_output if len(word) > 2]\n        # Remove numbers\n        cleaned_data_title = [word for word in without_single_chr if not word.isnumeric()]\n        \n        return cleaned_data_title\n    # Using \"getting2(sen)\" function to append edited sentence to data\n    x=[]\n    for i in data[name].values:\n        x.append(getting2(i))\n    data[name]=x","5b4b71b1":"def make_sentences(data,name):\n    data[name]=data[name].apply(lambda x:' '.join([i+' ' for i in x]))\n    # Removing double spaces if created\n    data[name]=data[name].apply(lambda x:re.sub(r'\\s+', ' ', x, flags=re.I))","bb90f2c8":"# Using the Lemmatization function to lemmatize the Reviews data\ndata['Review_without_stopwords'] = Edited_Review\n\n# Using the preprocessing function to preprocess the hotel data\npreprocess_Reviews_data(data,'Review_without_stopwords')\n# Using tokenizer and removing the stopwords\nrem_stopwords_tokenize(data,'Review_without_stopwords')\n# Converting all the texts back to sentences\nmake_sentences(data,'Review_without_stopwords')\n\n\n#Edits After Lemmatization\nfinal_Edit = data['Review_without_stopwords'].copy()\ndata[\"After_lemmatization\"] = final_Edit\nLemmatization(data,'After_lemmatization')\n\n# Converting all the texts back to sentences\nmake_sentences(data,'After_lemmatization')","145b142c":"data.head(6)","b4ecc89d":"print(\"- Old Review -\")\nprint(data['Review'][3])\nprint(\"\\n- New Review -\")\nprint(data['Review_without_stopwords'][3])\nprint(\"\\n- Last Edit Review -\")\nprint(data['After_lemmatization'][3])","0e7e6f5e":"data['reviews_text_new'] = data['After_lemmatization'].copy()","fc971dfa":"# Mapping the ratings\ndata['Sentiment_rating'] = np.where(data.Rating >= 3,1,0)\n\n# Printing the counts of each class\ndata['Sentiment_rating'].value_counts()","0c78f78b":"data.head(5)","d681d767":"# Replacing Positive -> 1 and Negative -> 0\n\ndata.replace({\"positive\":1,\"negative\":0},inplace=True)","caafc06d":"data[['reviews_text_new','Sentiment_rating']].head(5)","97989593":"bow_counts = CountVectorizer(tokenizer= word_tokenize,\n                             lowercase=True,\n                             ngram_range=(1,1))\n\nbow_data = bow_counts.fit_transform(data.reviews_text_new)","203d0313":"X_train_bow, X_test_bow, y_train_bow, y_test_bow = train_test_split(bow_data,\n                                                                    data['Sentiment_rating'],\n                                                                    test_size = 0.2,\n                                                                    random_state = 0,\n                                                                    shuffle=False,\n                                                                   stratify=None)","5372f698":"# Defining and training the model\nlr_model_all_new = LogisticRegression(max_iter = 200)\nlr_model_all_new.fit(X_train_bow, y_train_bow)\n\n# Predicting the results\ntest_pred_lr_all = lr_model_all_new.predict(X_test_bow)\n\n\n## Calculate key performance metrics\n\n# Print a classification report\nprint(classification_report(y_test_bow,test_pred_lr_all))","d9bdb32f":"X_train_senti, X_test_senti, y_train_senti, y_test_senti = train_test_split(data['reviews_text_new'],\n                                                                            data['Sentiment_rating'],\n                                                                            test_size = 0.2,\n                                                                            random_state = 0,\n                                                                           shuffle=False,\n                                                                           stratify=None)","705361ea":"# Create A New DataFrame For Testing And Analysing \n\ndf_test = pd.DataFrame(columns = ['review_test','actual_score', 'lr_score','swn_score'])\ndf_test['review_test'] = X_test_senti\ndf_test['actual_score'] = y_test_senti\ndf_test['lr_score'] = test_pred_lr_all\ndf_test.head(5)","b5a46204":"import nltk\nimport ssl\nfrom nltk.corpus import wordnet as wn\nfrom nltk.corpus import sentiwordnet as swn\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.corpus import stopwords","8649fbd5":"pos=neg=obj=count=0\n\npostagging = []\n\nfor review in X_test_senti:\n    list = word_tokenize(review)\n    postagging.append(nltk.pos_tag(list))\n\ndf_test['pos_tags'] = postagging\n\ndef penn_to_wn(tag):\n    if tag.startswith('J'):\n        return wn.ADJ\n    elif tag.startswith('N'):\n        return wn.NOUN\n    elif tag.startswith('R'):\n        return wn.ADV\n    elif tag.startswith('V'):\n        return wn.VERB\n    return None\n\n\n# Returns list of pos-neg and objective score. But returns empty list if not present in senti wordnet.\ndef get_sentiment(word,tag):\n    wn_tag = penn_to_wn(tag)\n    \n    if wn_tag not in (wn.NOUN, wn.ADJ, wn.ADV):\n        return []\n\n    #Lemmatization\n    lemma = lemmatizer.lemmatize(word, pos=wn_tag)\n    if not lemma:\n        return []\n\n    #Synset is a special kind of a simple interface that is present in NLTK to look up words in WordNet. \n    #Synset instances are the groupings of synonymous words that express the same concept. \n    #Some of the words have only one Synset and some have several.\n    synsets = wn.synsets(word, pos=wn_tag)\n    if not synsets:\n        return []\n\n    # Take the first sense, the most common\n    synset = synsets[0]\n    swn_synset = swn.senti_synset(synset.name())\n\n    return [synset.name(), swn_synset.pos_score(),swn_synset.neg_score(),swn_synset.obj_score()]\n\n    pos=neg=obj=count=0\n    \n    ###################################################################################\nsenti_score = []\n\nfor pos_val in df_test['pos_tags']:\n    senti_val = [get_sentiment(x,y) for (x,y) in pos_val]\n    for score in senti_val:\n        try:\n            pos = pos + score[1]  #positive score is stored at 2nd position\n            neg = neg + score[2]  #negative score is stored at 3rd position\n        except:\n            continue\n    senti_score.append(pos - neg)\n    pos=neg=0    \n    \ndf_test['senti_score'] = senti_score","2a76193c":"len(df_test)","1264bbd3":"df_test.head(5)","9116bac1":"overall=[]\nfor i in range(16392,20491,1):\n    if df_test['senti_score'][i]>= 0:\n        overall.append(1)\n    elif df_test['senti_score'][i]< 0:\n        overall.append(0)\n    \ndf_test['swn_score']=overall","8cdd4be6":"df_test.head(10)","1dd1d96c":"case1=case2=case3=case4=case5=case6=0\nfor i in range(16392,20491,1):\n    if ((df_test['lr_score'][i] == df_test['swn_score'][i]) and (df_test['swn_score'][i] == df_test['actual_score'][i])):\n        case1 = case1+1\n    if ((df_test['lr_score'][i] == df_test['swn_score'][i]) and (df_test['swn_score'][i] != df_test['actual_score'][i])):\n        case2 = case2+1\n    if ((df_test['lr_score'][i] != df_test['swn_score'][i]) and (df_test['lr_score'][i] == df_test['actual_score'][i])):\n        case3 = case3+1\n    if ((df_test['lr_score'][i] != df_test['swn_score'][i]) and (df_test['swn_score'][i] == df_test['actual_score'][i])):\n        case4 = case4+1\n    if ((df_test['lr_score'][i] != df_test['swn_score'][i]) and (df_test['actual_score'][i]== 0)):\n        case5 = case5+1\n    if ((df_test['lr_score'][i] != df_test['swn_score'][i]) and (df_test['actual_score'][i]==1)):\n        case6 = case6+1\n        \nprint(\"case 1\",case1) # 58%\nprint(\"case 2\",case2) # 5%\nprint(\"case 3\",case3) # 30%\nprint(\"case 4\",case4) # 5%\nprint(\"case 5\",case5) # 25%\nprint(\"case 6\",case6) # 10%\n","e3ca9fd0":"from sklearn.metrics import accuracy_score\nlr = accuracy_score(y_test_bow, test_pred_lr_all)\nswn = accuracy_score(y_test_bow, overall)\nprint(\"lr_accuracy\",lr)\nprint(\"swn_accuracy\",swn)","1fb0b2c7":"final_score =[]\nfor i in range(16392,20491,1):\n    if 0.58*(df_test['lr_score'][i] == df_test['swn_score'][i]) or 0.3*(df_test['lr_score'][i] != df_test['swn_score'][i]):\n        final_score.append(df_test['lr_score'][i])\n    elif 0.05*(df_test['lr_score'][i] != df_test['swn_score'][i]):\n        final_score.append(df_test['swn_score'][i])\n    elif 0.25*(df_test['lr_score'][i] != df_test['swn_score'][i]):\n        final_score.append(0)\n    elif 0.1*(df_test['lr_score'][i] != df_test['swn_score'][i]):\n        final_score.append(1)\n        \ndf_test['final_score_upt']=final_score","ee02cc4b":"final_upt = accuracy_score(y_test_bow, final_score)\nprint(\"final_hyprid_accuracy\",final_upt)","ceb43844":"final_score1 =[]\nfor i in range(16392,20491,1):\n    if (df_test['lr_score'][i]==1) and (df_test['swn_score'][i]==1):\n        final_score1.append(1)\n    elif (df_test['lr_score'][i]==0) and (df_test['swn_score'][i]==0):\n        final_score1.append(0)\n    else :\n        final_score1.append(df_test['lr_score'][i])\ndf_test['final_score_upt']=final_score1","905f5819":"final_upt1 = accuracy_score(y_test_bow, final_score1)\nprint(\"final_hyprid_accuracy\",final_upt1)","4a91641c":"df_train = pd.DataFrame(columns = ['lr_score','swn_score'])\ndf_train['swn_score'] = overall\ndf_train['lr_score'] = test_pred_lr_all\ndf_train.head(4)","77e70e4a":"X_trainf, X_testf, y_trainf, y_testf = train_test_split(df_train,\n                                                                    df_test['actual_score'],\n                                                                    test_size = 0.2,\n                                                                    random_state = 0,\n                                                                    shuffle=False,\n                                                                   stratify=None)\n\n","39e3e1d8":"hyprid = LogisticRegression(max_iter = 200).fit(X_trainf,y_trainf).predict(X_testf)","b402af98":"acc = accuracy_score(y_testf, hyprid)\nprint(\"accuracy\",acc)","949087c4":"#lr_model_all_new.feature_names=bow_counts.get_feature_names()","54fcdf5f":"#from joblib import dump, load \n\n# save model to file \n#dump(lr_model_all_new, filename=\"Sentiment_Analysis_unigram2.joblib\")","29052be4":"# import a saved joblib model \n#loaded_joblib_model = load(filename=\"Sentiment_Analysis_unigram2.joblib\")","33a23967":"#len(loaded_joblib_model.feature_names)","c49b723a":"#import string\n#from nltk import word_tokenize\n#from nltk.corpus import stopwords\n#from nltk.stem import WordNetLemmatizer\n#from nltk.stem import WordNetLemmatizer\n#feats = bow_counts.get_feature_names()\n#feats_len = len(feats)\n#sent ='You have to build a very bad than doing any thing else#'\n#sent =sent.lower()\n#sent = sent.translate(str.maketrans('', '', string.punctuation))\n#filtered_sentence = [] \n#stop_words = set(stopwords.words('english')) \n#word_tokens =word_tokenize(sent)\n#filtered_sentence = [w for w in word_tokens if not w in stop_words ]\n#listToStr = ' '.join(map(str, filtered_sentence))\n#lemmatizer = WordNetLemmatizer()\n#wordnet_map = {\"N\":wordnet.NOUN, \"V\":wordnet.VERB, \"J\":wordnet.ADJ, \"R\":wordnet.ADV}\n#def lemmatize_words(text):\n    #pos_tagged_text = nltk.pos_tag(word_tokenize(text))\n    #return ([lemmatizer.lemmatize(word, wordnet_map.get(pos[0], wordnet.NOUN)) for word, pos in pos_tagged_text])\n#lemmatized_output =[]\n#lemmatized_output = lemmatize_words(listToStr)\n\n#sent_features=[]\n#sent_dict = {}\n#for word in lemmatized_output:\n    #if not word in sent_dict:\n        #sent_dict[word] = 0\n    #sent_dict[word] = sent_dict[word] + 1\n#for i in range(feats_len):\n    #if not feats[i] in sent_dict:\n        #sent_features.append(0)\n    #else:\n        #sent_features.append(sent_dict[feats[i]])","0c991d28":"#len(feats)","32ad1518":"#len(sent_features)","93c5d0c5":"#joblib_y_preds = loaded_joblib_model.predict([sent_features])","b2636c3a":"#print(joblib_y_preds)","b23fe5ed":"# Making two copies of Reviews to edit","939329e5":"# Having a look at 1st ten reviews in the data","acd8db6e":"# Lemmatization Function","6aaee246":"# Building a machine learning model","9c60c293":"#  Importing Important Packages","b69ce854":"# Converting all the texts back to sentences","afb65c65":"# Preprocessing Function","5d0d0473":"# Results of Preprocessing data (Removing stopwords & Lemmatization)","a84b9f01":"# Bag-of-words and n-grams","dd3fcb4f":"# Divide into training and test sets:","9e9b3245":"# Applying logistic regression","98a5de9f":"# Reading Data"}}