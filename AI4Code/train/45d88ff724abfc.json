{"cell_type":{"129bb5e5":"code","17568308":"code","41c1962a":"code","250067e8":"code","df1d7dfb":"code","ef2a5b1f":"code","80c4843f":"code","07075ce5":"code","990769eb":"code","46ec5e74":"markdown","60614c5b":"markdown","a1cbae35":"markdown","e1b8db38":"markdown","15a18dc4":"markdown"},"source":{"129bb5e5":"!pip install scikit-learn-intelex -q --progress-bar off","17568308":"from sklearnex import patch_sklearn\npatch_sklearn()","41c1962a":"import numpy as np\nimport pandas as pd\nfrom sklearn import preprocessing\nfrom sklearn import model_selection\nfrom sklearn.metrics import accuracy_score\nimport gc\nimport optuna\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom scipy import stats","250067e8":"df_train = pd.read_csv('..\/input\/tabular-playground-series-dec-2021\/train.csv')\ndf_test = pd.read_csv('..\/input\/tabular-playground-series-dec-2021\/test.csv')\nsample_submission = pd.read_csv('..\/input\/tabular-playground-series-dec-2021\/sample_submission.csv')","df1d7dfb":"def reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_memory = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_memory = df.memory_usage().sum() \/ 1024**2\n    if verbose: \n        print(f'Memory usage of dataframe after reduction {end_memory} MB')\n        print(f'Reduced by {100 * (start_memory - end_memory) \/ start_memory} % ')\n    return df","ef2a5b1f":"df_train = reduce_mem_usage(df_train)\ndf_test = reduce_mem_usage(df_test)","80c4843f":"df_train = df_train.drop(df_train[df_train['Cover_Type'] == 5].index, axis=0)\n\ncolumns = ['Id', 'Soil_Type7', 'Soil_Type15']\ndf_train = df_train.drop(columns, axis=1)\ndf_test = df_test.drop(columns, axis=1)\n\ndf_train['Aspect'][df_train['Aspect'] < 0] += 360\ndf_train['Aspect'][df_train['Aspect'] > 359] -= 360\n\ndf_test['Aspect'][df_test['Aspect'] < 0] += 360\ndf_test['Aspect'][df_test['Aspect'] > 359] -= 360\n\nnew_names = {\n    'Horizontal_Distance_To_Hydrology': 'x_dist_hydrlgy',\n    'Vertical_Distance_To_Hydrology': 'y_dist_hydrlgy',\n    'Horizontal_Distance_To_Roadways': 'x_dist_rdwys',\n    'Horizontal_Distance_To_Fire_Points': 'x_dist_firepts'\n}\n\ndf_train.rename(new_names, axis=1, inplace=True)\ndf_test.rename(new_names, axis=1, inplace=True)\n\n# Manhhattan distance to Hydrology\ndf_train['Manhattan_Distance_To_Hydrology'] = np.abs(df_train['x_dist_hydrlgy']) + np.abs(df_train['y_dist_hydrlgy'])\ndf_test['Manhattan_Distance_To_Hydrology'] = np.abs(df_test['x_dist_hydrlgy']) + np.abs(df_test['y_dist_hydrlgy'])\n\n# Euclidean distance to Hydrology\n# df_train['Euclidean_Distance_To_Hydrology'] = (df_train['x_dist_hydrlgy']**2 + df_train['y_dist_hydrlgy']**2)**0.5\n# df_test['Euclidean_Distance_To_Hydrology'] = (df_test['x_dist_hydrlgy']**2 + df_test['y_dist_hydrlgy']**2)**0.5\n\nsoil_features = [c for c in df_train.columns if c.startswith('Soil_Type')]\ndf_train['soil_type_count'] = df_train[soil_features].sum(axis=1)\ndf_test['soil_type_count'] = df_test[soil_features].sum(axis=1)\n\nwilderness_features = [c for c in df_train.columns if c.startswith('Wilderness_Area')]\ndf_train['wilderness_area_count'] = df_train[wilderness_features].sum(axis=1)\ndf_test['wilderness_area_count'] = df_test[wilderness_features].sum(axis=1)\n\ndf_train.loc[df_train['Hillshade_9am'] < 0, 'Hillshade_9am'] = 0\ndf_test.loc[df_test['Hillshade_9am'] < 0, 'Hillshade_9am'] = 0\n\ndf_train.loc[df_train['Hillshade_Noon'] < 0, 'Hillshade_Noon'] = 0\ndf_test.loc[df_test['Hillshade_Noon'] < 0, 'Hillshade_Noon'] = 0\n\ndf_train.loc[df_train['Hillshade_3pm'] < 0, 'Hillshade_3pm'] = 0\ndf_test.loc[df_test['Hillshade_3pm'] < 0, 'Hillshade_3pm'] = 0\n\ndf_train.loc[df_train['Hillshade_9am'] > 255, 'Hillshade_9am'] = 255\ndf_test.loc[df_test['Hillshade_9am'] > 255, 'Hillshade_9am'] = 255\n\ndf_train.loc[df_train['Hillshade_Noon'] > 255, 'Hillshade_Noon'] = 255\ndf_test.loc[df_test['Hillshade_Noon'] > 255, 'Hillshade_Noon'] = 255\n\ndf_train.loc[df_train['Hillshade_3pm'] > 255, 'Hillshade_3pm'] = 255\ndf_test.loc[df_test['Hillshade_3pm'] > 255, 'Hillshade_3pm'] = 255\n\nhillshade_features = [c for c in df_train.columns if c.startswith('Hillshade')]\n\ndf_train['hillshade_sum'] = df_train[hillshade_features].sum(axis=1)\ndf_test['hillshade_sum'] = df_test[hillshade_features].sum(axis=1)\n\ndf_train['hillshade_mean'] = df_train[hillshade_features].mean(axis=1)\ndf_test['hillshade_mean'] = df_test[hillshade_features].mean(axis=1)\n\nfeatures = [c for c in df_test]\n\ncols = [\n    \"Elevation\",\n    \"Aspect\",\n    \"Manhattan_Distance_To_Hydrology\",\n    \"soil_type_count\",\n#     \"wilderness_area_count\",\n#     \"Slope\",\n    \"x_dist_hydrlgy\",\n    \"y_dist_hydrlgy\",\n    \"x_dist_rdwys\",\n#     \"Hillshade_9am\",\n#     \"Hillshade_Noon\",\n    \"Hillshade_3pm\",\n    \"x_dist_firepts\",\n    \"hillshade_sum\"]\n#     \"hillshade_mean\"]\n\nscaler = preprocessing.StandardScaler()\ndf_train[features] = scaler.fit_transform(df_train[features])\ndf_test[features] = scaler.transform(df_test[features])","07075ce5":"df_train = reduce_mem_usage(df_train)\ndf_test = reduce_mem_usage(df_test)","990769eb":"%%time\n\ns = 0\n\npreds = [] \nkf = model_selection.StratifiedKFold(n_splits=20,random_state=42,shuffle=True)\nacc=[]  # list contains accuracy for each fold\nn=0\nfor trn_idx, test_idx in kf.split(df_train[cols],df_train['Cover_Type']):\n    X_tr,X_val = df_train[cols].iloc[trn_idx],df_train[cols].iloc[test_idx]\n    y_tr,y_val = df_train['Cover_Type'].iloc[trn_idx],df_train['Cover_Type'].iloc[test_idx]\n\n    model = KNeighborsClassifier(n_neighbors=200,\n                                 n_jobs=-1)\n\n    model.fit(X_tr,\n              y_tr)\n\n#     valid_pred = model.predict(X_valid)\n    test_pred = model.predict(df_test[cols])   \n      \n    preds.append(test_pred)\n    acc.append(accuracy_score(y_val, model.predict(X_val)))\n\n    print(n, acc[n])  \n    n+=1\n    \n    del X_tr,X_val,y_tr,y_val\n    gc.collect()\n    \nprint(np.mean(acc))\n\nsub = pd.read_csv('\/kaggle\/input\/tabular-playground-series-dec-2021\/sample_submission.csv')\nprediction = stats.mode(preds)[0][0]\nsub['Cover_Type'] = prediction\nsub.to_csv('submission.csv', index=False)","46ec5e74":"# Loading the data","60614c5b":"# Importing libraries","a1cbae35":"# Model training","e1b8db38":"\n\nCredits go to the two notebooks mine is based on:\n- [Feature engineering](https:\/\/www.kaggle.com\/gulshanmishra\/tps-dec-21-tensorflow-nn-feature-engineering)\n- [Model training](https:\/\/www.kaggle.com\/hamzaghanmi\/tps-dec-step-by-step)","15a18dc4":"# Preprocessing"}}