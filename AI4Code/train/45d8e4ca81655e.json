{"cell_type":{"31862444":"code","4a7923f8":"code","6d3d2489":"code","455f2dd4":"code","36733f8a":"code","a49182f8":"code","ce14e70d":"code","09e25312":"code","d2523317":"code","5db968be":"code","1c10e132":"code","23bcbd62":"code","1e615449":"code","45a65ed0":"code","860a549f":"code","68f2f37e":"code","bba5d86d":"code","18ac2e51":"code","220c4d15":"code","4ad3b771":"code","ae10ae8c":"code","d985c0f8":"code","6e544bb3":"code","f52a8ed7":"code","860506c5":"markdown","4b63b302":"markdown","8485173b":"markdown","22811cd0":"markdown","0857d490":"markdown"},"source":{"31862444":"%matplotlib inline\nfrom glob import glob\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport json","4a7923f8":"from collections import defaultdict\nbase_json = '..\/input\/Entity Recognition in Resumes.json'\ndef pop_annot(raw_line):\n    in_line = defaultdict(list, **raw_line)\n    if 'annotation' in in_line:\n        labels = in_line['annotation']\n        for c_lab in labels:\n            if len(c_lab['label'])>0:\n                in_line[c_lab['label'][0]] += c_lab['points']\n    return in_line\nwith open(base_json, 'r') as f:\n    # data is jsonl and so we parse it line-by-line\n    resume_data = [json.loads(f_line) for f_line in f.readlines()]\n    resume_df = pd.DataFrame([pop_annot(line) for line in resume_data])\nresume_df['length'] = resume_df['content'].map(len)\nresume_df['length'].hist()\nresume_df.sample(3)","6d3d2489":"def extract_higlights(raw_line):\n    in_line = defaultdict(list, **raw_line)\n    if 'annotation' in in_line:\n        labels = in_line['annotation']\n        for c_lab in labels:\n            if len(c_lab['label'])>0:\n                in_line['highlight'] += [dict(category = c_lab['label'][0], **cpts) for cpts in c_lab['points']]\n    return in_line\nresume_hl_df = pd.DataFrame([extract_higlights(line) for line in resume_data])\nresume_hl_df['length'] = resume_hl_df['content'].map(len)\nresume_hl_df['length'].hist()\nresume_hl_df.sample(3)","455f2dd4":"from string import ascii_lowercase, digits\nvalid_chars = ascii_lowercase+digits+'@., '\nfocus_col = 'highlight'\nfocus_df = resume_hl_df[['content', focus_col, 'length']].copy().dropna()\n# clean up the text but maintain the length\nfocus_df['kosher_content'] = resume_df['content'].str.lower().map(lambda c_text: ''.join([c if c in valid_chars else ' ' for c in c_text]))\nprint(focus_col, 'with', focus_df.shape[0], 'complete results')\nprint('First result')\nfor _, c_row in focus_df.query('length<2000').sample(1, random_state = 20).iterrows():\n    print(len(c_row['content']))\n    for yoe in c_row[focus_col]:\n        s,e = yoe['start'], yoe['end']\n        print(yoe)\n        print(c_row['content'][s:e+1])","36733f8a":"def result_to_vec(in_row, focus_col):\n    let_vec = in_row['kosher_content']\n    attn_vec = np.zeros((len(let_vec)))\n    for yoe in c_row[focus_col]:\n        s,e = yoe['start'], yoe['end']\n        attn_vec[s:e+1] = 1.0\n    return let_vec, attn_vec","a49182f8":"x_vec, y_vec = result_to_vec(c_row, focus_col)\nloc_show = np.where(y_vec)[0][0]\nfig, ax1 = plt.subplots(1, 1, figsize = (30, 2))\nax1.plot(y_vec[loc_show:(loc_show+200)])\nax1.set_xlabel('Letter')\nax1.set_ylabel('Attention')\nax1.set_xticks(range(200))\nax1.set_xticklabels(x_vec[loc_show:(loc_show+200)]);","ce14e70d":"from sklearn.model_selection import train_test_split\ntrain_df, valid_df = train_test_split(focus_df, test_size = 0.2)\nprint(train_df.shape, valid_df.shape)","09e25312":"from sklearn.feature_extraction.text import CountVectorizer\nfeat_cv = CountVectorizer(analyzer='char') # too complicated\nfrom sklearn.preprocessing import LabelEncoder","d2523317":"let_enc = LabelEncoder()\nlet_enc.fit_transform(list(valid_chars))\nprint(let_enc.classes_.shape)","5db968be":"def result_to_fvec(in_row, focus_col):\n    let_vec = in_row['kosher_content']\n    attn_vec = np.zeros((len(let_vec)))\n    flet_vec = let_enc.transform(list(let_vec))\n    for yoe in c_row[focus_col]:\n        s,e = yoe['start'], yoe['end']\n        attn_vec[s:e+1] = 1.0\n    return let_vec, flet_vec, attn_vec","1c10e132":"x_vec, fx_vec, y_vec = result_to_fvec(c_row, focus_col)\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize = (30, 6))\nax1.plot(y_vec[:200])\nax1.set_xlabel('Letter')\nax1.set_ylabel('Attention')\nax1.set_xticks(range(200))\nax1.set_xticklabels(x_vec[:200]);\nfor t_val in [0, 1]:\n    ax2.plot((fx_vec*(y_vec==t_val))[:200], '-', label = 'Attention {}'.format(t_val))","23bcbd62":"from keras.preprocessing.sequence import pad_sequences\nfrom scipy.ndimage import convolve1d \ndef package_df(in_df, minichunk_size = None, minichunk_upsampler = 10):\n    train_x, train_y = [], []\n    for _, c_row in in_df.iterrows():\n        _, fx_vec, y_vec = result_to_fvec(c_row, focus_col)\n        smooth_y_vec = convolve1d(y_vec.astype(np.float32), np.ones((10,))\/5)\n        if minichunk_size is not None:\n            sample_count = fx_vec.shape[0]\/\/minichunk_size*minichunk_upsampler\/\/2\n            # normal samples\n            for s_idx in np.random.choice(range(fx_vec.shape[0]-minichunk_size), sample_count):\n                train_x += [fx_vec[s_idx:(s_idx+minichunk_size)]]\n                train_y += [np.expand_dims(smooth_y_vec[s_idx:(s_idx+minichunk_size)], -1)]\n            # positive samples\n            pos_sample_vec = convolve1d(y_vec.astype(np.float32), np.ones((32,)))\n            pos_idx = np.where(pos_sample_vec>0)[0]\n            if len(pos_idx)>0:\n                for s_idx in np.random.choice(pos_idx, sample_count):\n                    train_x += [fx_vec[s_idx:(s_idx+minichunk_size)]]\n                    train_y += [np.expand_dims(smooth_y_vec[s_idx:(s_idx+minichunk_size)], -1)]\n        else:\n            train_x += [fx_vec]\n            train_y += [np.expand_dims(y_vec, -1)]\n    return pad_sequences(train_x), pad_sequences(train_y)\ntrain_x, train_y = package_df(train_df.query('length>256'), minichunk_size = 256)\nprint(train_x.shape, train_y.shape)\nvalid_x, valid_y = package_df(valid_df)\nprint(valid_x.shape, valid_y.shape)","1e615449":"fig, ax1 = plt.subplots(1, 1, figsize = (8, 15))\nax1.matshow(train_y[:, :, 0])\nax1.set_aspect(.10)","45a65ed0":"from keras.models import Sequential\nfrom keras.layers import Embedding, Bidirectional, LSTM, Conv1D, SpatialDropout1D, ZeroPadding1D\nfrom keras.layers import CuDNNLSTM as LSTM                         \nsimple_model = Sequential()\nsimple_model.add(Embedding(input_dim=let_enc.classes_.shape[0]+1, \n                           output_dim=16))\nsimple_model.add(SpatialDropout1D(0.25, name='DropLetters'))\nsimple_model.add(Conv1D(32, kernel_size=(5,), activation='relu', padding='valid', name = 'BigramCreation'))\nsimple_model.add(Conv1D(32, kernel_size=(3,), activation='relu', padding='valid', name = 'TrigramCreation'))\nsimple_model.add(Conv1D(64, kernel_size=(3,), activation='relu', padding='valid'))\nsimple_model.add(SpatialDropout1D(0.5, name='DropGrams'))\nsimple_model.add(Conv1D(128, kernel_size=(3,), dilation_rate = 2, activation='relu', padding='same'))\nsimple_model.add(Conv1D(128, kernel_size=(3,), dilation_rate = 4, activation='relu', padding='same'))\nsimple_model.add(Conv1D(128, kernel_size=(3,), dilation_rate = 6, activation='relu', padding='same'))\n#simple_model.add(Bidirectional(LSTM(64, return_sequences=True)))\n#simple_model.add(SpatialDropout1D(0.25))\n#simple_model.add(Bidirectional(LSTM(32, return_sequences=True)))\nsimple_model.add(Conv1D(1, kernel_size=(1,), activation='sigmoid'))\nsimple_model.add(ZeroPadding1D((4, 4), name = 'CorrectForConv1Ds'))\nsimple_model.summary()","860a549f":"simple_model.predict(train_x[0:1]).shape","68f2f37e":"import keras.backend as K\nfrom keras.optimizers import Adam\nfrom keras.losses import binary_crossentropy\n\ndef dice_coef_1d(y_true, y_pred, smooth=1):\n    intersection = K.sum(y_true * y_pred, axis=[1,2])\n    union = K.sum(y_true, axis=[1,2]) + K.sum(y_pred, axis=[1,2])\n    return K.mean( (2. * intersection + smooth) \/ (union + smooth), axis=0)\ndef dice_p_bce(in_gt, in_pred):\n    \"\"\"combine DICE and BCE\"\"\"\n    return 0.5*binary_crossentropy(in_gt, in_pred) - dice_coef_1d(in_gt, in_pred)\ndef true_positive_rate(y_true, y_pred):\n    return K.sum(K.flatten(y_true)*K.flatten(K.round(y_pred)))\/K.sum(y_true)\nsimple_model.compile(optimizer=Adam(1e-4, decay=1e-6), loss=dice_p_bce, metrics=[dice_coef_1d, \n                                                                                 'binary_crossentropy', \n                                                                                 'binary_accuracy', \n                                                                                 true_positive_rate])","bba5d86d":"from keras.callbacks import EarlyStopping, ReduceLROnPlateau, ModelCheckpoint\ncallbacks = [\n    EarlyStopping(patience=5, verbose=1),\n    ReduceLROnPlateau(patience=3, verbose=1),\n    ModelCheckpoint('resume_attention.h5', verbose=1, save_best_only=True, save_weights_only=True)\n]","18ac2e51":"batch_size = 512\nresults = simple_model.fit(\n    train_x, train_y,\n    epochs = 20, \n    batch_size = 256,\n    validation_data = (valid_x, valid_y),\n    shuffle = True,\n    callbacks=callbacks)","220c4d15":"for _, c_row in focus_df.query('length<2000').sample(1, random_state = 20).iterrows():\n    x_vec, fx_vec, y_vec = result_to_fvec(c_row, focus_col)\n\nloc_show = np.where(y_vec)[0][0]\nfig, (ax1) = plt.subplots(1, 1, figsize = (30, 3))\np_vec = simple_model.predict(np.expand_dims(fx_vec, 0))[0]\nax1.plot(y_vec[loc_show:(loc_show+200)], label = 'Ground Truth')\nax1.plot(p_vec[loc_show:(loc_show+200)], label = 'Prediction')\nax1.set_xlabel('Letter')\nax1.set_ylabel('Attention')\nax1.set_xticks(range(200))\nax1.set_xticklabels(x_vec[loc_show:(loc_show+200)]);","4ad3b771":"simple_model.load_weights('resume_attention.h5')","ae10ae8c":"train_x, train_y = package_df(train_df.query('length>1024'), minichunk_size = 1024)\nprint(train_x.shape, train_y.shape)\ncallbacks = [\n    EarlyStopping(patience=5, verbose=1),\n    ReduceLROnPlateau(patience=3, verbose=1),\n    ModelCheckpoint('resume_attention.h5', verbose=1, save_best_only=True, save_weights_only=True)\n]\nresults = simple_model.fit(\n    train_x, train_y,\n    epochs = 10, \n    batch_size = 64,\n    validation_data = (valid_x, valid_y),\n    shuffle = True,\n    callbacks=callbacks)","d985c0f8":"simple_model.load_weights('resume_attention.h5')","6e544bb3":"for _, c_row in focus_df.query('length<2000').sample(1, random_state = 20).iterrows():\n    x_vec, fx_vec, y_vec = result_to_fvec(c_row, focus_col)\n\nloc_show = np.where(y_vec)[0][0]\nfig, (ax1) = plt.subplots(1, 1, figsize = (30, 3))\np_vec = simple_model.predict(np.expand_dims(fx_vec, 0))[0]\nax1.plot(y_vec[loc_show:(loc_show+200)], label = 'Ground Truth')\nax1.plot(p_vec[loc_show:(loc_show+200)], label = 'Prediction')\nax1.set_xlabel('Letter')\nax1.set_ylabel('Attention')\nax1.set_xticks(range(200))\nax1.set_xticklabels(x_vec[loc_show:(loc_show+200)]);","f52a8ed7":"fig, (ax1, ax2) = plt.subplots(1, 2)\nax1.plot(p_vec)\nax2.hist(p_vec)","860506c5":"## Use longer sequences","4b63b302":"# Make two groups\nSplit the data up a bit just to keep us honest","8485173b":"# Just focus on any highlighted material\nTry to find all the highlights","22811cd0":"# Overview\nA quick look at resume data and how information can be reliably automatically extracted","0857d490":"# Try an LSTM\nHere we use a simple bidirectional LSTM to try and extract the attention in a very simple manner (a real fit would require significantly more preprocessing)"}}