{"cell_type":{"e5c33a57":"code","d04c20cf":"code","6c7bfd8e":"code","2ecf5c54":"code","1766c3ba":"code","74b63a73":"code","0ad1bba0":"code","c9b9b102":"code","8105a17c":"code","45ddda68":"code","fd7003d0":"code","b58a8efd":"code","365b8b0d":"code","0b6d7fd2":"code","8fe13c36":"code","03504b3e":"code","ef1fb030":"code","8f77b9c0":"code","17341a66":"code","5c7f791f":"code","b1f1b700":"code","c3ebb089":"code","470ec869":"code","0111b1ff":"code","6591ef90":"code","6e1a2b63":"code","ec741b2c":"code","10a9d0d2":"code","50fbe8bf":"code","6616e614":"code","07eb499f":"markdown","75272893":"markdown","cf7c7a04":"markdown","d1941b7d":"markdown","1d0f5e72":"markdown"},"source":{"e5c33a57":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.options.display.float_format = \"{:,.2f}\".format\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nimport datetime as dt\nimport warnings\nwarnings.simplefilter(\"ignore\")\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d04c20cf":"#user defined functions\ndef extract_categorycode(input_text,level=0):\n    '''\n     this function splits category code and returns the first part.\n    '''\n    output_text=input_text.split('.')[level]\n    return output_text\n\ndef create_clusters(input_data_frame,input_columns,n_cluster):\n    '''\n     This function creates clusters and cluster labels.\n    '''\n    from sklearn.cluster import KMeans\n    X=input_data_frame[input_columns].values\n    k_means=KMeans(n_clusters=n_cluster,random_state=15).fit(X)\n    return k_means.labels_","6c7bfd8e":"#reading data\nfile_loc=\"\/kaggle\/input\/ecommerce-behavior-data-from-multi-category-store\/2019-Oct.csv\"\ndataset=pd.read_csv(file_loc)","2ecf5c54":"dataset.drop(columns=['category_id'],inplace=True)\ndataset['event_time']=pd.to_datetime(dataset['event_time']).dt.tz_convert(None)\ndataset['event_type']=dataset['event_type'].astype('category')\ndataset['category_code']=dataset['category_code'].astype('category')","1766c3ba":"#creating a summary table for general overview\ndaily_summary_table=dataset.groupby(by=[dataset['event_time'].dt.normalize()]).agg(Number_of_daily_visits=('user_session',lambda x: x.nunique()),\n                                                                                  Number_of_daily_visitors=('user_id',lambda x: x.nunique())\n                                                                                  )\nsales_filter=dataset['event_type']=='purchase'\nsales=dataset.loc[sales_filter].groupby(by=[dataset['event_time'].dt.normalize()]).agg(number_of_daily_sales=('event_type','count'),\n                                                                                      Total_daily_sales=('price','sum')\n                                                                                      ).reset_index()\ndaily_summary_table=pd.merge(left=daily_summary_table,\n                          right=sales,\n                          left_on=['event_time'],\n                          right_on=['event_time'],\n                          how='left')\ndaily_summary_table['conversion_rate']=daily_summary_table['number_of_daily_sales']\/daily_summary_table['Number_of_daily_visits']","74b63a73":"#Daily Visits\nprint('Daily Visits Statistics')\nprint('-'*50)\nprint(daily_summary_table['Number_of_daily_visits'].describe())\nprint('-'*50)\nprint('Visit Statistics by Dates')\nprint('-'*50)\nprint(daily_summary_table.groupby(by=daily_summary_table['event_time'].dt.day_name())['Number_of_daily_visits'].describe())\n\n#Plotting number of daily visits\nfig=plt.figure(figsize=(18,9))\nax1=fig.add_subplot(2,1,1)\nsns.lineplot(x='event_time',\n              y='Number_of_daily_visits',\n              data=daily_summary_table,\n             ax=ax1)\nplt.title('Daily Visits')\nplt.ylabel('Number of Daily Visits')\nplt.xlabel('Dates')\n\nax2=fig.add_subplot(2,1,2)\n\nsns.boxplot(x=daily_summary_table['event_time'].dt.dayofweek,\n            y='Number_of_daily_visits',\n            data=daily_summary_table,\n           ax=ax2)\nplt.title('Number of Visit by days')\nplt.ylabel('Number of Visits')\nplt.xlabel('Days')\nplt.xticks([0, 1, 2,3,4,5,6], ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'])\nfig.tight_layout(pad=3.0);","0ad1bba0":"#Daily Visitors\nprint('Daily Visitor Statistics')\nprint('-'*50)\nprint(daily_summary_table['Number_of_daily_visitors'].describe())\nprint('-'*50)\nprint('Visitor Statistics by Dates')\nprint('-'*50)\nprint(daily_summary_table.groupby(by=daily_summary_table['event_time'].dt.day_name())['Number_of_daily_visitors'].describe())\n\n#Plotting number of daily visitors\nfig=plt.figure(figsize=(18,9))\nax1=fig.add_subplot(2,1,1)\nsns.lineplot(x='event_time',\n              y='Number_of_daily_visitors',\n              data=daily_summary_table,\n            ax=ax1)\nplt.title('Daily Visitors')\nplt.ylabel('Number of Daily Visitors')\nplt.xlabel('Dates')\n\nax2=fig.add_subplot(2,1,2)\nsns.boxplot(x=daily_summary_table['event_time'].dt.dayofweek,\n            y='Number_of_daily_visitors',\n            data=daily_summary_table,\n           ax=ax2)\nplt.title('Number of Visitors by days')\nplt.ylabel('Number of Visitors')\nplt.xlabel('Days')\nplt.xticks([0, 1, 2,3,4,5,6], ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'])\nfig.tight_layout(pad=3.0);","c9b9b102":"#Conversion rates\nprint('Conversion Rates Statistics')\nprint('-'*50)\nprint(daily_summary_table['conversion_rate'].describe())\nprint('-'*50)\nprint('Conversion Rates Statistics by Dates')\nprint('-'*50)\nprint(daily_summary_table.groupby(by=daily_summary_table['event_time'].dt.day_name())['conversion_rate'].describe())\n\n#Plotting convergance rates\nfig=plt.figure(figsize=(18,9))\nax1=fig.add_subplot(2,1,1)\nsns.lineplot(x='event_time',\n              y='conversion_rate',\n              data=daily_summary_table,\n            ax=ax1)\nplt.title('Daily Conversion Rates')\nplt.ylabel('Conversion Rate')\nplt.xlabel('Dates')\n\nax2=fig.add_subplot(2,1,2)\nsns.boxplot(x=daily_summary_table['event_time'].dt.dayofweek,\n            y='conversion_rate',\n            data=daily_summary_table,\n           ax=ax2)\nplt.title('Conversion Rates by days')\nplt.ylabel('Conversion Rate')\nplt.xlabel('Days')\nplt.xticks([0, 1, 2,3,4,5,6], ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'])\nfig.tight_layout(pad=3.0);","8105a17c":"#creating a customer table\n\n#Filtering sales activities\nsales_filter=dataset['event_type']=='purchase'\nCustomer_table=dataset.loc[sales_filter].groupby(by=['user_id']).agg(number_of_purchases=('user_id','count'),\n                                                                     total_sales=('price','sum')).reset_index()","45ddda68":"#Calculating number of customers who bought something\nNumber_of_customers_who_bought_smt=Customer_table['user_id'].nunique()\nprint('There are {:,.0f} customers, who purchased in October.'.format(Number_of_customers_who_bought_smt))\n\n#Calculating number of purchase activities for each customer\nprint('-'*50)\nprint('Distribution of Customer by Number of Purchases')\nprint(Customer_table['number_of_purchases'].value_counts(normalize=True).head(10))\n#Calculationg repeat customers number\nprint('-'*50)\nmore_than_one_purchase_filter=Customer_table['number_of_purchases']>1\nNumber_of_customers_who_bought_more_than_once=Customer_table.loc[more_than_one_purchase_filter].shape[0]\nprint('There are {:,.0f} repeat customers, who bought more than once.'.format(Number_of_customers_who_bought_more_than_once))","fd7003d0":"#filtering out the extreme values\nsales_threshold=np.percentile(Customer_table['total_sales'],[1,95])\nsales_threshold_filter=np.logical_and(Customer_table['total_sales']>=sales_threshold[0],\n                                      Customer_table['total_sales']<=sales_threshold[1])\nsales_filtered=Customer_table.loc[sales_threshold_filter]\nprint(Customer_table.describe())\nprint(sales_filtered.describe())\n\nfig=plt.figure(figsize=(12,12))\nax1=fig.add_subplot(2,1,1)\nsns.distplot(Customer_table['total_sales'],\n            ax=ax1)\n\nax2=fig.add_subplot(2,1,2)\nsns.distplot(sales_filtered['total_sales'],\n            ax=ax2)\n\nfig.tight_layout(pad=3.0);","b58a8efd":"#Most valuable customers\n\n#filtering customer with top %10 purchase amount\ntop10perc_sales_amount=np.percentile(Customer_table['total_sales'],90)\nfilter_top10perc_sales_amount=Customer_table['total_sales']>=top10perc_sales_amount\ntop10perc_customers_with_hightest_turnover=Customer_table.loc[filter_top10perc_sales_amount]\nregular_customers=Customer_table.loc[~filter_top10perc_sales_amount]\n\n#calculating descriptive statistics\nprint('Top 10% customers Purchase Amount-Descriptive Statistics')\nprint('-'*50)\nprint(top10perc_customers_with_hightest_turnover['total_sales'].describe())\nprint('-'*50)\ntotal_sales_amount=Customer_table['total_sales'].sum()\nprint('Total sales: {:,.0f}'.format(total_sales_amount))\ntotal_sales_amount_top10perc=top10perc_customers_with_hightest_turnover['total_sales'].sum()\nprint('Total sales of top 10% customers: {:,.0f}'.format(total_sales_amount_top10perc))\n\n#calculating descriptive statistics\nprint('Regular customers Purchase Amount-Descriptive Statistics')\nprint('-'*50)\nprint(regular_customers['total_sales'].describe())\nprint('-'*50)\ntotal_sales_amount_regular_customers=regular_customers['total_sales'].sum()\nprint('Total sales of regular customers: {:,.0f}'.format(total_sales_amount_regular_customers))","365b8b0d":"#creating subsegments from regular customers\nfrom sklearn.cluster import KMeans\nX=regular_customers['total_sales'].values.reshape(-1,1)\nregular_customers['cluster']=Clustering_KMeans=KMeans(n_clusters=3,random_state=15).fit_predict(X)\n\n#merging clusters\nCustomer_table=pd.merge(left=Customer_table,\n                        right=regular_customers[['user_id','cluster']],\n                        how='left',\n                        left_on='user_id',\n                        right_on='user_id')\nCustomer_table['cluster'].fillna(3,inplace=True)\n\n#Plotting the clusters\nprint('Cluster Statistics')\nprint('-'*50)\nprint(Customer_table.groupby(by=['cluster'])['total_sales'].describe())\n\nfig=plt.figure(figsize=(12,12))\nax1=fig.add_subplot(2,1,1)\nsns.countplot(x='cluster',data=Customer_table,ax=ax1)\nplt.xlabel('Clusters')\nplt.ylabel('Number of Customers')\nplt.title(\"Clusters' Sizes\")\nax1.set_xticklabels(['Medium','Low','High','Star']);\n\nax2=fig.add_subplot(2,1,2)\nsns.boxplot(x='cluster',y='total_sales',data=Customer_table,ax=ax2,showfliers = False)\nplt.xlabel('Clusters')\nplt.ylabel('Total Sales')\nplt.title(\"Clusters' Total Sales\")\nfig.tight_layout(pad=3.0)\nax2.set_xticklabels(['Medium','Low','High','Star']);","0b6d7fd2":"#creating a filter for shoppers \nshopper_filter=dataset['event_type']=='purchase'\n#using the filter to create shopper user list\nshopper_list=dataset.loc[shopper_filter,['user_id']]\n#distincting shopper customer list\ndistinct_shopper_df=pd.DataFrame(shopper_list['user_id'].unique(),columns=['user_id'])\n#creating shopper dataset\ndataset_shoppers=pd.merge(left=dataset,\n                          right=distinct_shopper_df,\n                          how='inner',\n                          left_on=['user_id'],\n                          right_on=['user_id']\n                          )","8fe13c36":"#Extracting category code level_1 from category code\ndataset_shoppers['category_level_1']=dataset_shoppers['category_code'].apply(extract_categorycode)\n#excluding unknown categories\nfilter_temp=dataset_shoppers['category_level_1']=='Unknown'\ndataset_shoppers=dataset_shoppers.loc[~filter_temp]\n\n#creating shoppers visit table that contains number of visits in each category \nshoppers_visit_table=dataset_shoppers.groupby(by=['user_id','category_level_1']).agg(Number_of_view=('user_id','count'))\nshoppers_visit_table=shoppers_visit_table.reset_index()\n\n#creating shoppers visit frequency table that contains total number of visit overall.\nshoppers_visit_frequency=shoppers_visit_table.groupby(by=['user_id']).agg(n_visits=('Number_of_view','sum')).reset_index()\n\n#creating the ratio column in shopper visit table \nshoppers_visit_table=pd.merge(left=shoppers_visit_table,\n                              right=shoppers_visit_frequency,\n                              left_on='user_id',\n                              right_on='user_id',\n                              how='left')\nshoppers_visit_table['ratio']=shoppers_visit_table['Number_of_view']\/shoppers_visit_table['n_visits']","03504b3e":"'''\nspliting shoppers into 2 different groups to create more homogenious interest groups. \nFirst group contains shoppers interested with only on category and the second group contains shoppers visited multiple categories.\n'''\n#creating first shopper group, focused customers.\nfocused_shoppers_filter=shoppers_visit_table['ratio']==1\nfocused_shoppers=shoppers_visit_table.loc[focused_shoppers_filter]\n#assigning \"focused customers\" to seperate groups by their category interests\nfocused_shoppers['shoppers_interest_groups']=pd.factorize(focused_shoppers['category_level_1'])[0]+1\n\n#creating second customer group, diversified customers.\ndiversified_shoppers=shoppers_visit_table.loc[~focused_shoppers_filter]\ndiversified_shoppers_pivot=pd.pivot_table(data=diversified_shoppers,values='ratio',index='user_id',columns='category_level_1')\ndiversified_shoppers_pivot.fillna(0,inplace=True)\ndiversified_shoppers_pivot.reset_index(inplace=True)\n\n#creating subgroups for \"diversified customers\"\nk_4_clusters=create_clusters(input_data_frame=diversified_shoppers_pivot,\n                             input_columns=['accessories', 'apparel', 'appliances', 'auto','computers', 'construction', 'country_yard', 'electronics', 'furniture','kids', 'medicine', 'sport', 'stationery'],\n                             n_cluster=4)\ndiversified_shoppers_pivot['cluster_k4means']=k_4_clusters\n\n#profiling subgroups of diversified customers\ninput_columns=['cluster_k4means', 'accessories', 'apparel', 'appliances', 'auto','computers', 'construction', 'country_yard', 'electronics', 'furniture','kids', 'medicine', 'sport', 'stationery']                          \nprint(diversified_shoppers_pivot[input_columns].groupby(by='cluster_k4means').mean())\nprint(diversified_shoppers_pivot['cluster_k4means'].value_counts())\n\n'''\ndiversified shoppers subgroups\n0: 70k-appliances and mostly electronics\n1: 30k-electronics and mostly appliances\n2: 30k-Apparel, appliances, construction, electronics, furniture\n3: 11k- Electronics and mostly computers\n'''","ef1fb030":"#making space in the memory for category analysis\ndel focused_shoppers\ndel diversified_shoppers\ndel diversified_shoppers_pivot\ndel distinct_shopper_df\ndel Customer_table\ndel daily_summary_table","8f77b9c0":"#splitting the category text into 2 pieces as category and subcategory\ndataset['category']=dataset['category_code'].apply(extract_categorycode,level=0)\ndataset['subcategory']=dataset['category_code'].apply(extract_categorycode,level=1)","17341a66":"#calculating and printing informative numerical information about the dataset.\ntotal_number_of_activity=dataset.shape[0]\nprint('Total number of activity:{:,.0f}'.format(total_number_of_activity))\nprint('-'*50)\ntotal_number_of_visits=dataset['user_session'].nunique()\nprint('Total number of visits:{:,.0f}'.format(total_number_of_visits))\nprint('-'*50)\ntotal_number_of_visitors=dataset['user_id'].nunique()\nprint('Total number of visitors:{:,.0f}'.format(total_number_of_visitors))\nprint('-'*50)\nnumber_of_categories=dataset['category'].nunique()\nprint('The number of categories:{:,.0f}'.format(number_of_categories))\nprint('-'*50)\nnumber_of_subcategories=dataset['subcategory'].nunique()\nprint('The number of subcategories:{:,.0f}'.format(number_of_subcategories))\nprint('-'*50)\nnumber_of_brands=dataset['brand'].nunique()\nprint('The number of brands:{:,.0f}'.format(number_of_brands))\nprint('-'*50)\nnumber_of_products=dataset['product_id'].nunique()\nprint('The number of products:{:,.0f}'.format(number_of_products))","5c7f791f":"#creating a summary table that contains an outline of categories and activities\ncategory_summary_table=dataset.groupby(by=['category']).agg(Number_of_views=('category','count'),\n                                                              Number_of_users=('user_id',lambda x: x.nunique()),\n                                                              Number_of_sessions=('user_session',pd.Series.nunique)).reset_index()\nsales_filter=dataset['event_type']=='purchase'\ncategory_sales_summary_table=dataset.loc[sales_filter].groupby(by=['category']).agg(Number_of_purchase=('category','count'),\n                                                                                      Amount_of_purchase=('price','sum'),\n                                                                                      Average_purchase_amount=('price','mean'),\n                                                                                      Number_of_sessions_with_purchase=('user_session',pd.Series.nunique),\n                                                                                      Number_of_shoppers=('user_id',lambda x: x.nunique())).reset_index()\ncategory_summary_table=pd.merge(left=category_summary_table,\n                               right=category_sales_summary_table,\n                               left_on='category',\n                               right_on='category',\n                               how='left')\ncategory_summary_table['Conversion_rate']=category_summary_table['Number_of_purchase']\/category_summary_table['Number_of_sessions']","b1f1b700":"#creating a plot that illustrates number of visits in each category during October\nplt.figure(figsize=(18,3))\nplot = sns.barplot(x='category',y='Number_of_views',data=category_summary_table)\nfor p in plot.patches:\n    plot.annotate(format(p.get_height(), ',.0f'),\n                  (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                  ha = 'center',\n                  va = 'center', \n                  xytext = (0, 10), \n                  textcoords = 'offset points')\n\nplt.title('Total number of views by category')\nplt.xlabel('Category')\nplt.ylabel('Number of views')\nplt.ylim(0,category_summary_table['Number_of_views'].max()*1.2);","c3ebb089":"#creating a plot that illustrates number of visitors in each category during October\nplt.figure(figsize=(18,3))\nplot = sns.barplot(x='category',y='Number_of_users',data=category_summary_table)\nfor p in plot.patches:\n    plot.annotate(format(p.get_height(), ',.0f'),\n                  (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                  ha = 'center',\n                  va = 'center', \n                  xytext = (0, 10), \n                  textcoords = 'offset points')\n\nplt.title('Total number of users by category')\nplt.xlabel('Category')\nplt.ylabel('Number of users')\nplt.ylim(0,category_summary_table['Number_of_users'].max()*1.2);","470ec869":"#creating a subcategory summary table\ncategory_subcategory_summary_table=dataset.groupby(by=['category','subcategory']).agg(Number_of_views=('category','count'),\n                                                              Number_of_users=('user_id',lambda x: x.nunique()),\n                                                              Number_of_sessions=('user_session',pd.Series.nunique)).reset_index()\n                                \nsales_filter=dataset['event_type']=='purchase'\ncategory_subcategory_sales_summary_table=dataset.loc[sales_filter].groupby(by=['category','subcategory']).agg(Number_of_purchase=('category','count'),\n                                                                                      Amount_of_purchase=('price','sum'),\n                                                                                      Average_purchase_amount=('price','mean'),\n                                                                                      Number_of_sessions_with_purchase=('user_session',pd.Series.nunique),\n                                                                                      Number_of_shoppers=('user_id',lambda x: x.nunique())).reset_index()\ncategory_subcategory_summary_table=pd.merge(left=category_subcategory_summary_table,\n                               right=category_subcategory_sales_summary_table,\n                               left_on=['category','subcategory'],\n                               right_on=['category','subcategory'],\n                               how='left')\ncategory_subcategory_summary_table['Conversion_rate']=category_subcategory_summary_table['Number_of_purchase']\/category_subcategory_summary_table['Number_of_sessions']\ncategory_subcategory_summary_table['category_subcategory']=category_subcategory_summary_table['category']+'-'+category_subcategory_summary_table['subcategory']\n\ncategory_subcategory_summary_table_sorted=category_subcategory_summary_table.sort_values(by='Number_of_views', ascending=False)","0111b1ff":"#creating a plot that shows most popular subcategories and number of visits and visitors during October\nfig=plt.figure(figsize=(12,12))\nax1=fig.add_subplot(2,1,1)\nplot=sns.barplot(x='Number_of_views',y='category_subcategory',data=category_subcategory_summary_table_sorted.head(10),ax=ax1)\nfor p in plot.patches:\n    plot.annotate(format(p.get_width(), ',.0f'),\n                  (p.get_x()+p.get_width(), p.get_y() + p.get_height() ),\n                  ha = 'center',\n                  va = 'center', \n                  xytext = (0, 10), \n                  textcoords = 'offset points')\nplt.title('Most visited subcategories')\nplt.xlabel('Number of visits')\nplt.ylabel('Category-Subcategory')\n\nax2=fig.add_subplot(2,1,2)\nplot=sns.barplot(x='Number_of_users',y='category_subcategory',data=category_subcategory_summary_table_sorted.head(10),ax=ax2)\nfor p in plot.patches:\n    plot.annotate(format(p.get_width(), ',.0f'),\n                  (p.get_x()+p.get_width(), p.get_y() + p.get_height() ),\n                  ha = 'center',\n                  va = 'center', \n                  xytext = (0, 10), \n                  textcoords = 'offset points')\n\nplt.title('Most visited subcategory')\nplt.xlabel('Number of users')\nplt.ylabel('Category-Subcategory')\nplt.tight_layout()","6591ef90":"#creating a plot that represents conversion rates by categories\nplt.figure(figsize=(18,3))\nplot = sns.barplot(x='category',y='Conversion_rate',data=category_summary_table)\nfor p in plot.patches:\n    plot.annotate(\"{:.1%}\".format(p.get_height()),\n                  (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                  ha = 'center',\n                  va = 'center', \n                  xytext = (0, 10), \n                  textcoords = 'offset points')\n\nplt.title('Conversation rates by category')\nplt.xlabel('Category')\nplt.ylabel('Conversation rates')\nplt.ylim(0,category_summary_table['Conversion_rate'].max()*1.2);","6e1a2b63":"#creating a plot that represents subcategories with highest conversion rates\nplt.figure(figsize=(21,3))\nplot = sns.barplot(x='category_subcategory',y='Conversion_rate',data=category_subcategory_summary_table_sorted.head(10))\nfor p in plot.patches:\n    plot.annotate(\"{:.1%}\".format(p.get_height()),\n                  (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                  ha = 'center',\n                  va = 'center', \n                  xytext = (0, 10), \n                  textcoords = 'offset points')\n\nplt.title('Top 10 Subcategories with highest conversion rates')\nplt.ylabel('Conversation rates')\nplt.ylim(0,category_summary_table['Conversion_rate'].max()*1.3);","ec741b2c":"#creating a plot that represents subcategories with lowest conversion rates\nplt.figure(figsize=(21,3))\nplot = sns.barplot(x='category_subcategory',y='Conversion_rate',data=category_subcategory_summary_table_sorted.tail(10))\nfor p in plot.patches:\n    plot.annotate(\"{:.1%}\".format(p.get_height()),\n                  (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                  ha = 'center',\n                  va = 'center', \n                  xytext = (0, 10), \n                  textcoords = 'offset points')\nplt.title('Bottom 10 Subcategories with lowest conversion rates')\nplt.ylabel('Conversation rates')\nplt.ylim(0,plot.get_ybound()[1]*1.3);","10a9d0d2":"#creating a category turnover table\ncategory_turnover_table=category_summary_table.groupby(by=['category']).agg(total_turnover=('Amount_of_purchase','sum')).reset_index()\ncategory_turnover_table['total_turn_over_mio']=category_turnover_table['total_turnover']\/1000000\n#ploting the category turnover table \nplt.figure(figsize=(18,3))\nplot = sns.barplot(x='category',y='total_turn_over_mio',data=category_turnover_table)\n\nfor p in plot.patches:\n    plot.annotate(format(p.get_height(), ',.1f'),\n                  (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                  ha = 'center',\n                  va = 'center', \n                  xytext = (0, 10), \n                  textcoords = 'offset points')\n\nplt.title('Turnover by category')\nplt.xlabel('Category')\nplt.ylabel('Turnover-Mio')\nplt.ylim(0,plot.get_ybound()[1]*1.3);","50fbe8bf":"#creating a subcategory turnover table\nsubcategory_turnover_table=category_subcategory_summary_table.groupby(by=['category_subcategory']).agg(total_turnover=('Amount_of_purchase','sum')).reset_index()\nsubcategory_turnover_table=subcategory_turnover_table.sort_values(by=['total_turnover'],ascending=False)\nsubcategory_turnover_table['total_turn_over_mio']=subcategory_turnover_table['total_turnover']\/1000000\n\n#ploting top 10 subcategories with the highest turnover \nplt.figure(figsize=(21,3))\nplot = sns.barplot(x='category_subcategory',y='total_turn_over_mio',data=subcategory_turnover_table.head(10))\n\nfor p in plot.patches:\n    plot.annotate(format(p.get_height(), ',.1f'),\n                  (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                  ha = 'center',\n                  va = 'center', \n                  xytext = (0, 10), \n                  textcoords = 'offset points')\n\nplt.title('Top 10 Subcategories with highest turnover')\nplt.xlabel('Subcategory')\nplt.ylabel('Turnover-Mio')\nplt.ylim(0,plot.get_ybound()[1]*1.3);","6616e614":"#ploting top 10 subcategories with the lowest turnover \nplt.figure(figsize=(21,3))\nplot = sns.barplot(x='category_subcategory',y='total_turn_over_mio',data=subcategory_turnover_table.tail(10))\n\nfor p in plot.patches:\n    plot.annotate(format(p.get_height(), ',.3f'),\n                  (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                  ha = 'center',\n                  va = 'center', \n                  xytext = (0, 10), \n                  textcoords = 'offset points')\n\nplt.title('Bottom 10 Subcategories with lowest turnover')\nplt.xlabel('Subcategory')\nplt.ylabel('Turnover-Mio')\nplt.ylim(0,plot.get_ybound()[1]*1.3);","07eb499f":"**Repeat Customer**\n\nCustomer who buys more than once.","75272893":"# Category Analysis","cf7c7a04":"Customer Interest Groups","d1941b7d":"# General Summary","1d0f5e72":"# Customer Analysis"}}