{"cell_type":{"0c3326df":"code","dc1b7fdc":"code","5426366c":"code","3b862d35":"code","2ef6b6d6":"code","cba8bcf1":"code","3ae198e8":"code","86f2bbdb":"code","5f40496a":"code","ecbf2b3a":"code","b22a58eb":"code","d4881535":"code","a9eadfac":"code","e48fd7c0":"code","9896395b":"code","e22665e4":"code","e109e809":"code","1634575c":"code","04afc83e":"code","248cfa26":"code","c63f624a":"code","d127bfc9":"code","e2c1c0a7":"code","52885673":"code","cb8a404d":"code","cebdfdfb":"code","f1849f57":"code","fa8a716c":"code","20260b6d":"code","36ea61ae":"code","96b0450d":"code","62113d3e":"code","9a125665":"code","05b24373":"code","85fbc19e":"code","1c4258e5":"code","78201780":"markdown","5b5ac16c":"markdown","1389eb68":"markdown","c9b8af32":"markdown","bb338225":"markdown","4f3431a2":"markdown","1cc82835":"markdown","2d8831ae":"markdown","9e5bad06":"markdown","c1fdb626":"markdown","19e08004":"markdown","b4f722e8":"markdown","2dcc45c1":"markdown","09b04a10":"markdown","92483942":"markdown","c4d61ba0":"markdown"},"source":{"0c3326df":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dc1b7fdc":"data = pd.read_csv(\"\/kaggle\/input\/imdb-data\/IMDB-Movie-Data.csv\")\ndata.head(5)","5426366c":"# To View the dataset info  \n\n# DType - denots the data type w.r.t to columns\n\ndata.info()","3b862d35":"#To get the Stats of the data \n\ndata.describe()","2ef6b6d6":"#Head -> View Top of the Data\ndata.head(5)","cba8bcf1":"#tail -> To  View Tail of the Data \ndata.tail(5)","3ae198e8":"#To View Randomly  -> Unsorrted order \ndata.sample(5)","86f2bbdb":"# To get the colums\n\ndata_columns_name = data.columns\nprint(\"\\n Columns Name:\", data_columns_name)\nprint(\"\\n Columns Count\", len(data_columns_name))","5f40496a":"# To Find the Shape -> .shape()\n\nprint(\"Data Shape\",data.shape)","ecbf2b3a":"data.columns","b22a58eb":"#Index\n\nrank = data['Rank']\nrank.head(5)\n\n","d4881535":"title = data['Title']\ntitle.head(5)","a9eadfac":"#Mutliple Index\n\nnew_data = data[['Title','Rank']]\nprint(new_data)\nprint(type(new_data))","e48fd7c0":"#Slicing on rank column\nrank[:5]","9896395b":"# Data Reverse using Slicing\ndata[::-1]","e22665e4":"#Rank index from 100 to 105\nrank[100:105]","e109e809":"temp_data = data.copy()","1634575c":"temp_data = temp_data[temp_data['Rating'] > 8]\nprint(\"Movie that have Rating Above 8: \",len(temp_data))\n","04afc83e":"temp_data_2 = data.copy()\ntemp_data_2 = temp_data_2[temp_data_2['Rating'] < 2]\nprint(\"Movie that have Rating Below 2 \",len(temp_data_2))\ntemp_data_2['Title']","248cfa26":"max(temp_data['Rating'])","c63f624a":"temp_data_9 = temp_data.copy()\ntemp_data_9 = temp_data_9[temp_data_9['Rating'] >= 9.0]\ntemp_data_9","d127bfc9":"# Lets group the Movies of Director ","e2c1c0a7":"director = data.groupby('Director').groups\n\n# director_details = pd.DataFrame(director.items(), columns=['Name', 'Movie Count'])\n# director_details\ndirector","52885673":"grouped = data.groupby('Year')\n\nfor name,group in grouped:\n   if name == 2015:\n       print(name)\n       print(group)","cb8a404d":"#Sorting Based on Rating -> # Asecnding\n\ndata.sort_values('Rating').head(5)","cebdfdfb":"#Descending Sort \ndata.sort_values('Rating',ascending=False).head(5)\n","f1849f57":"#Descending Sort \ndata.sort_values(by = ['Rating','Revenue (Millions)'],ascending=False).head(5)","fa8a716c":"#Descending Sort \ndata.sort_values(by = ['Rating','Revenue (Millions)']).head(5)","20260b6d":"data1 = data.copy()","36ea61ae":"#Getting the Null Details\n\ndata1.isnull()","96b0450d":"data1.info()","62113d3e":"# data1 = data1.fillna(0)\n# data1.info()","9a125665":"data1 = data1.fillna(method ='pad')\ndata1.head(1)","05b24373":"# Let's Drop the Metascore from our datafarme\n\ndata2 = data.copy()\nprint(\"Before Deleting\", data2.columns)","85fbc19e":"data2 = data2.drop('Metascore',axis = 1)\nprint(\"After Deleting\",data2.columns)","1c4258e5":"# Adding Sqrt for Rating\ndata3 = data.copy()\ndata3['Rating Square'] = data3['Rating'].apply(np.sqrt)\ndata3\n\n","78201780":"# **9) Dropping columns and null values**","5b5ac16c":"# **3) Understand some basic information about the dataset and Inspect the dataframe Inspect the dataframe's columns, shapes, variable types etc.**","1389eb68":"# 7) Sorting operation","c9b8af32":"# variable types\n\n> Data can be classified into three types:\n\n* Numerical \n* categorical [Objects]\n* Free Type\n","bb338225":"# To Find the Movies released @2015","4f3431a2":"# **1) Load the IMDb Dataset and read**","1cc82835":"# 6)  Groupby operations","2d8831ae":"# **2)View the dataset**","9e5bad06":"# 5) Data Selection \u2013 Based on Conditional filtering","c1fdb626":"# 4) Data Selection \u2013 Indexing and Slicing data","19e08004":"> From the above analysis we found that Disaster Movie is the one the worst movie to watch ","b4f722e8":"# 10)   Apply( ) functions","2dcc45c1":"**Metascore got removed**","09b04a10":"# 8) Dealing with missing values","92483942":"# To Find movie with high rating","c4d61ba0":"# The Dark Knight\t is the highest rated movie ever"}}