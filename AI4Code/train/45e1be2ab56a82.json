{"cell_type":{"848b42ff":"code","4a46d2b3":"code","7b866c42":"code","5542f3dc":"code","80c2935a":"markdown","5c5e0356":"markdown","714b6542":"markdown"},"source":{"848b42ff":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","4a46d2b3":"import csv\nimport re\nimport math\n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import IterativeImputer\nfrom sklearn.linear_model import HuberRegressor\nfrom sklearn.metrics import mean_squared_error, mean_squared_log_error\n\n\nFILE_TRAIN = \"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\"\nFILE_TEST = \"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\"\n\nNAN_STR_REPLACEMENT = '8888.0'\nNAN_INT_REPLACEMENT = 8888\nNAN_FLOAT_REPLACEMENT = 8888.0\n\nSTRING_COLUMNS = [\n'MSZoning',\n#'Street', # - deleted from parsing, : only one value\n'Alley',\n'LotShape',\n'LandContour',\n#'Utilities',  # - deleted from parsing, : only one value\n'LotConfig',\n'LandSlope',\n'Neighborhood',\n'Condition1',\n'Condition2',\n'BldgType',\n'HouseStyle', \n'RoofStyle',\n'RoofMatl',\n'Exterior1st', \n'Exterior2nd',\n'MasVnrType',\n'ExterQual',\n'ExterCond',\n'Foundation', \n'BsmtQual',\n'BsmtCond',\n'BsmtExposure',\n'BsmtFinType1',\n'BsmtFinType2',\n'Heating',\n'HeatingQC',\n'CentralAir',\n'Electrical',\n'KitchenQual',\n'Functional',\n'FireplaceQu',\n'GarageType',\n'GarageFinish', \n'GarageQual',\n'GarageCond',\n'PavedDrive',\n#'PoolQC', # - deleted from parsing : only NA 99.9%\n'Fence',\n'MiscFeature',\n'YrSold',\n'SaleType',\n'SaleCondition'\n]\n\nNUMERIC_COLUMNS = [\n'MSSubClass',\n'LotFrontage',\n'LotArea',\n'OverallQual',\n'OverallCond',\n'YearBuilt',\n'YearRemodAdd',\n'MasVnrArea',\n'BsmtFinSF1',\n'BsmtFinSF2',\n'BsmtUnfSF',\n'TotalBsmtSF',\n'1stFlrSF',\n'2ndFlrSF',\n'LowQualFinSF',\n'GrLivArea',\n'BsmtFullBath',\n'BsmtHalfBath',\n'FullBath',\n'HalfBath',\n'BedroomAbvGr',\n'KitchenAbvGr',\n'TotRmsAbvGrd',\n'Fireplaces',\n'GarageYrBlt',\n'GarageCars',\n'GarageArea',\n'WoodDeckSF',\n'OpenPorchSF',\n'EnclosedPorch',\n'3SsnPorch',\n'ScreenPorch',\n'PoolArea',\n'MiscVal',\n'MoSold',\n'nb_missing_values'\n]\n\nPARAMS_HUBER = dict()\nPARAMS_HUBER['epsilon'] = 1.35 # default 1.35\nPARAMS_HUBER['max_iter'] = 50000 #\u00a0default 100\nPARAMS_HUBER['alpha'] = 0.0001 #\u00a0default 0.0001\n","7b866c42":"\ndef readData(inFile, sep=','):\n    df_op = pd.read_csv(filepath_or_buffer=inFile, low_memory=False, encoding='utf-8', sep=sep)\n    return df_op\n\ndef set_missing_values_column(df):\n    df['nb_missing_values'] = df.shape[1] - df.count(axis=1)\n    return df\n\ndef vectorize_exp(x):\n    r = math.exp(x)\n    return r\n\ndef vectorize_expm1(x):\n    r = math.expm1(x)\n    return r\n\ndef vectorize_log(x):\n    r = math.log(x)\n    return r\n\ndef vectorize_log1p(x):\n    r = math.log1p(x)\n    return r\n\ndef vectorize_int(x):\n    return int(x)\n\ndef convert_data_to_numeric(df, enc_big=None):\n    MSZoning_mapping = {'C (all)':0 , 'FV':1, 'RH':2, 'RL':3, 'RM':4}\n    Street_mapping = {'Grvl':0 , 'Pave':1}\n    Alley_mapping = {'Grvl':0 , 'Pave':1}\n    LotShape_mapping = {'IR1':0 , 'IR2':1, 'IR3':2, 'Reg':3}\n    LandContour_mapping = {'Bnk':0 , 'HLS':1, 'Low':2, 'Lvl':3}\n    Utilities_mapping = {'AllPub':0 , 'NoSeWa':1}\n    LotConfig_mapping = {'Corner':0 , 'CulDSac':1, 'FR2':2, 'FR3':3, 'Inside':4}\n    LandSlope_mapping = {'Gtl':0 , 'Mod':1, 'Sev':2}\n    Condition1_mapping = {'Artery':0 , 'Feedr':1, 'Norm':2, 'PosA':3, 'PosN':4, 'RRAe':5, 'RRAn':6, 'RRNe':7, 'RRNn':8}\n    Condition2_mapping = {'Artery':0 , 'Feedr':1, 'Norm':2, 'PosA':3, 'PosN':4, 'RRAe':5, 'RRAn':6, 'RRNn':7}\n    BldgType_mapping = {'1Fam':0 , '2fmCon':1, 'Duplex':2, 'Twnhs':3, 'TwnhsE':4}\n    HouseStyle_mapping = {'1.5Fin':0, '1.5Unf':1, '1Story':2,  '2.5Fin':3, '2.5Unf':4, '2Story':5, 'SFoyer':6, 'SLvl':7}\n    RoofStyle_mapping = {'Flat':0 , 'Gable':1, 'Gambrel':2, 'Hip':3, 'Mansard':4, 'Shed':5}\n    RoofMatl_mapping = {'ClyTile':0, 'CompShg':1, 'Membran':2, 'Metal':3, 'Roll':4, 'Tar&Grv':5, 'WdShake':6, 'WdShngl':7}\n    MasVnrType_mapping = {'BkrCmn':0, 'BrkFace':1, 'None':2, 'Stone':3} #nan\n    ExterQual_mapping = {'Ex':0, 'Fa':1, 'Gd':2, 'TA':3}\n    ExterCond_mapping = {'Ex':0, 'Fa':1, 'Gd':2, 'Po':3, 'TA':4}\n    Foundation_mapping = {'BrkTill':0, 'CBlock':1, 'PConc':2, 'Slab':3, 'Stone':4, 'Wood':5}\n    BsmtQual_mapping = {'Ex':0, 'Fa':1, 'Gd':2, 'TA':3} #nan\n    BsmtCond_mapping = {'Fa':1, 'Gd':2, 'Po':3, 'TA':4} #nan\n    BsmtExposure_mapping = {'Av':0, 'Gd':1, 'Mn':2, 'No':3} #nan\n    BsmtFinType1_mapping = {'ALQ':0, 'BLQ':1, 'GLQ':2, 'LwQ':3, 'Rec':4, 'Unf':5}  #nan\n    BsmtFinType2_mapping = {'ALQ':0, 'BLQ':1, 'GLQ':2, 'LwQ':3, 'Rec':4, 'Unf':5}  #nan\n    Heating_mapping = {'Floor':0, 'GasA':1, 'GasW':2, 'Grav':3, 'OthW':4, 'Wall':5}\n    HeatingQC_mapping = {'Ex':0, 'Fa':1, 'Gd':2, 'Po':3, 'TA':4}\n    CentralAir_mapping = {'N':0 , 'Y':1}\n    Electrical_mapping = {'FuseA':0, 'FuseF':1, 'FuseP':2, 'Mix':3, 'SBrkr':4} # nan\n    KitchenQual_mapping = {'Ex':0, 'Fa':1, 'Gd':2, 'TA':3}\n    Functional_mapping = {'Maj1':0, 'Maj2':1, 'Min1':2, 'Min2':3, 'Mod':4, 'Sev':5, 'Typ':6}\n    FireplaceQu_mapping = {'Ex':0, 'Fa':1, 'Gd':2, 'Po':3, 'TA':4} #nan\n    GarageType_mapping = {'2Types':0, 'Attchd':1, 'Basement':2, 'BuiltIn':3, 'CatPort':4, 'Detchd':5} #nan\n    GarageFinish_mapping = {'Fin':0, 'RFn':1, 'Unf':2} #nan\n    GarageQual_mapping = {'Ex':0, 'Fa':1, 'Gd':2, 'Po':3, 'TA':4} #nan\n    GarageCond_mapping = {'Ex':0, 'Fa':1, 'Gd':2, 'Po':3, 'TA':4} #nan\n    PavedDrive_mapping = {'N':0, 'P':1, 'Y':2}\n    PoolQC_mapping = {'Ex':0, 'Fa':1, 'Gd':2}\n    Fence_mapping = {'GdPrv':0, 'GdWo':1, 'MnPrv':2, 'MnWw':3} #nan\n    MiscFeature_mapping = {'Gar2':0, 'Othr':1, 'Shed':2, 'TenC':3} #nan\n    SaleType_mapping = {'COD':0, 'Con':1, 'ConLD':2, 'ConLI':3, 'ConLw':4, 'CWD':5, 'New':6, 'Oth':7, 'WD':8}\n    SaleCondition_mapping = {'Abnorml':0, 'AdjLand':1, 'Alloca':2, 'Family':3, 'Normal':4, 'Partial':5}\n    \n    enc_big_new = enc_big\n    if enc_big == None:\n        Neighborhood_mapping = dict(zip((df.Neighborhood.dropna().unique()), range(len((df.Neighborhood.dropna().unique())))))\n        Exterior1st_mapping = dict(zip((df.Exterior1st.dropna().unique()), range(len((df.Exterior1st.dropna().unique())))))\n        Exterior2nd_mapping = dict(zip((df.Exterior2nd.dropna().unique()), range(len((df.Exterior2nd.dropna().unique())))))\n        \n        enc_big_new = {\n                          'Neighborhood': Neighborhood_mapping,\n                          'Exterior1st': Exterior1st_mapping,\n                          'Exterior2nd': Exterior2nd_mapping  \n                      }\n    else:\n       \n        Neighborhood_mapping = enc_big_new['Neighborhood']\n        Exterior1st_mapping = enc_big_new['Exterior1st']\n        Exterior2nd_mapping = enc_big_new['Exterior2nd']\n    \n    df['MSZoning'] = df.loc[df.MSZoning.notnull(), 'MSZoning'].map(MSZoning_mapping)\n    df['Street'] = df.loc[df.Street.notnull(), 'Street'].map(Street_mapping)\n    df['Alley'] = df.loc[df.Alley.notnull(), 'Alley'].map(Alley_mapping)\n    df['LotShape'] = df.loc[df.LotShape.notnull(), 'LotShape'].map(LotShape_mapping)\n    df['LandContour'] = df.loc[df.LandContour.notnull(), 'LandContour'].map(LandContour_mapping)\n    df['Utilities'] = df.loc[df.Utilities.notnull(), 'Utilities'].map(Utilities_mapping)\n    df['LotConfig'] = df.loc[df.LotConfig.notnull(), 'LotConfig'].map(LotConfig_mapping)\n    df['LandSlope'] = df.loc[df.LandSlope.notnull(), 'LandSlope'].map(LandSlope_mapping)  \n    df['Neighborhood'] = df.loc[df.Neighborhood.notnull(), 'Neighborhood'].map(Neighborhood_mapping)\n    df['Condition1'] = df.loc[df.Condition1.notnull(), 'Condition1'].map(Condition1_mapping)    \n    df['Condition2'] = df.loc[df.Condition2.notnull(), 'Condition2'].map(Condition2_mapping)\n    df['BldgType'] = df.loc[df.BldgType.notnull(), 'BldgType'].map(BldgType_mapping)\n    df['HouseStyle'] = df.loc[df.HouseStyle.notnull(), 'HouseStyle'].map(HouseStyle_mapping)\n    df['RoofStyle'] = df.loc[df.RoofStyle.notnull(), 'RoofStyle'].map(RoofStyle_mapping)   \n    df['RoofMatl'] = df.loc[df.RoofMatl.notnull(), 'RoofMatl'].map(RoofMatl_mapping)   \n    df['Exterior1st'] = df.loc[df.Exterior1st.notnull(), 'Exterior1st'].map(Exterior1st_mapping)   \n    df['Exterior2nd'] = df.loc[df.Exterior2nd.notnull(), 'Exterior2nd'].map(Exterior2nd_mapping)   \n    df['MasVnrType'] = df.loc[df.MasVnrType.notnull(), 'MasVnrType'].map(MasVnrType_mapping)   \n    df['ExterQual'] = df.loc[df.ExterQual.notnull(), 'ExterQual'].map(ExterQual_mapping)    \n    df['ExterCond'] = df.loc[df.ExterCond.notnull(), 'ExterCond'].map(ExterCond_mapping)    \n    df['Foundation'] = df.loc[df.Foundation.notnull(), 'Foundation'].map(Foundation_mapping)    \n    df['BsmtQual'] = df.loc[df.BsmtQual.notnull(), 'BsmtQual'].map(BsmtQual_mapping)    \n    df['BsmtCond'] = df.loc[df.BsmtCond.notnull(), 'BsmtCond'].map(BsmtCond_mapping)    \n    df['BsmtExposure'] = df.loc[df.BsmtExposure.notnull(), 'BsmtExposure'].map(BsmtExposure_mapping)    \n    df['BsmtFinType1'] = df.loc[df.BsmtFinType1.notnull(), 'BsmtFinType1'].map(BsmtFinType1_mapping)    \n    df['BsmtFinType2'] = df.loc[df.BsmtFinType2.notnull(), 'BsmtFinType2'].map(BsmtFinType2_mapping)\n    df['Heating'] = df.loc[df.Heating.notnull(), 'Heating'].map(Heating_mapping)\n    df['HeatingQC'] = df.loc[df.HeatingQC.notnull(), 'HeatingQC'].map(HeatingQC_mapping)\n    df['CentralAir'] = df.loc[df.CentralAir.notnull(), 'CentralAir'].map(CentralAir_mapping)  \n    df['Electrical'] = df.loc[df.Electrical.notnull(), 'Electrical'].map(Electrical_mapping)\n    df['KitchenQual'] = df.loc[df.KitchenQual.notnull(), 'KitchenQual'].map(KitchenQual_mapping)\n    df['Functional'] = df.loc[df.Functional.notnull(), 'Functional'].map(Functional_mapping)\n    df['FireplaceQu'] = df.loc[df.FireplaceQu.notnull(), 'FireplaceQu'].map(FireplaceQu_mapping)\n    df['GarageType'] = df.loc[df.GarageType.notnull(), 'GarageType'].map(GarageType_mapping)\n    df['GarageFinish'] = df.loc[df.GarageFinish.notnull(), 'GarageFinish'].map(GarageFinish_mapping)\n    df['GarageQual'] = df.loc[df.GarageQual.notnull(), 'GarageQual'].map(GarageQual_mapping)\n    df['GarageCond'] = df.loc[df.GarageCond.notnull(), 'GarageCond'].map(GarageCond_mapping)\n    df['PavedDrive'] = df.loc[df.PavedDrive.notnull(), 'PavedDrive'].map(PavedDrive_mapping)\n    df['PoolQC'] = df.loc[df.PoolQC.notnull(), 'PoolQC'].map(PoolQC_mapping)\n    df['Fence'] = df.loc[df.Fence.notnull(), 'Fence'].map(Fence_mapping)\n    df['MiscFeature'] = df.loc[df.MiscFeature.notnull(), 'MiscFeature'].map(MiscFeature_mapping)\n    df['SaleType'] = df.loc[df.SaleType.notnull(), 'SaleType'].map(SaleType_mapping)\n    df['SaleCondition'] = df.loc[df.SaleCondition.notnull(), 'SaleCondition'].map(SaleCondition_mapping)\n    \n    return (df, enc_big_new)\n\ndef get_encoded_ii(df, ii=None, Y=None):    \n    df.loc[:,STRING_COLUMNS] = df[STRING_COLUMNS].fillna(NAN_FLOAT_REPLACEMENT).astype('int32').astype('category')\n    df.loc[:,NUMERIC_COLUMNS] = df[NUMERIC_COLUMNS].fillna(NAN_FLOAT_REPLACEMENT).astype('int32')\n    #l =  STRING_COLUMNS + NUMERIC_COLUMNS\n    cols = df.columns\n    if ii is None:\n        ii = IterativeImputer(missing_values=NAN_INT_REPLACEMENT, initial_strategy='most_frequent') \n        ii.fit(df)\n    ar = ii.transform(df)\n    \n    new_df = pd.DataFrame(ar, columns=cols)\n    \n    new_df.loc[:,STRING_COLUMNS] = new_df[STRING_COLUMNS].astype('int32').astype('category')\n    new_df.loc[:,NUMERIC_COLUMNS] = new_df[NUMERIC_COLUMNS].astype('float64')\n    \n    return (new_df, ii)\n\ndef print_submission(y_pred, df_test_id):\n    l = []\n    for myindex in range(y_pred.shape[0]):\n        Y0 = y_pred[myindex]\n        l.insert(myindex, Y0)\n    \n    df_pred = pd.DataFrame(pd.Series(l), columns=[\"SalePrice\"])\n    df_result = pd.concat([df_test_id, df_pred], axis=1, sort=False)\n     \n    f = open('submission.csv', 'w')\n    r = df_result.to_csv(index=False, path_or_buf=f)\n    f.close()","5542f3dc":"# PRE PROCESS : \ndf_train = readData(FILE_TRAIN)\ndf_test = readData(FILE_TEST)\n\n(df_train, enc_big) = convert_data_to_numeric(df_train)\n(df_test, enc_big) = convert_data_to_numeric(df_test, enc_big)\n\ndf_train = set_missing_values_column(df_train)\ndf_test = set_missing_values_column(df_test)\n\n# Drop Id and SalePrice from X dataset : \ndf_train_index = df_train[\"Id\"]\nse_train_target = df_train[\"SalePrice\"]\n\ndf_train.set_index(\"Id\")\ndf_test.set_index(\"Id\")\n\ndf_train = df_train.drop(\"Id\", axis=1)\ndf_train = df_train.drop(\"SalePrice\", axis=1)\n\ndf_train = df_train.drop(\"Street\", axis=1)\ndf_train = df_train.drop(\"Utilities\", axis=1)\ndf_train = df_train.drop(\"PoolQC\", axis=1)\n\ndf_test_index = df_test[\"Id\"]\n\ndf_test = df_test.drop(\"Id\", axis=1)\n\ndf_test = df_test.drop(\"Street\", axis=1)\ndf_test = df_test.drop(\"Utilities\", axis=1)\ndf_test = df_test.drop(\"PoolQC\", axis=1)\n\ndf_train_target = pd.DataFrame(se_train_target, columns=['SalePrice'])\n\n# Encoding Y:\nY = se_train_target\n\nY = se_train_target.apply(lambda x: vectorize_log(x)).to_numpy()\n\nmms_y = MinMaxScaler(feature_range=(10,13))\nmms_y.fit(Y.reshape(-1, 1))\nY_enc = mms_y.transform(Y.reshape(-1, 1))\nY = Y_enc\n\nY_to_encode = pd.DataFrame(Y, columns=[\"SalePrice\"])\n\n\n# Encoding X : \n(X, enc_ii) = get_encoded_ii(df=df_train, ii=None, Y=Y_to_encode)\n(X_testset, enc_ii) = get_encoded_ii(df_test, ii=enc_ii, Y=Y_to_encode)\n\nx_mv = X['nb_missing_values']\nxt_mv = X_testset['nb_missing_values']\n\ncols = X.columns\n\nmms_x = MinMaxScaler(feature_range=(0,1))\nmms_x.fit(X)\nX = mms_x.transform(X)\nX_testset = mms_x.transform(X_testset)\n\nX = pd.DataFrame(X, columns=cols)\nX_testset = pd.DataFrame(X_testset, columns=cols)\n\nX['nb_missing_values'] = x_mv\nX_testset['nb_missing_values'] = xt_mv\n\nY = Y.ravel()\n\n# TRAIN :\nvfunc = np.vectorize(vectorize_exp)\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=.01, random_state=42)\n\nclf = HuberRegressor(**PARAMS_HUBER)\nclf.fit(X_train,y_train)\n\n# PREDICT :\ny_pred = clf.predict(X_testset)\n\ny_pred = y_pred.reshape(-1, 1)\ny_pred_log = y_pred\ny_pred_log = mms_y.inverse_transform(y_pred)\n    \ny_pred = vfunc(y_pred_log)    \ny_pred = y_pred.flatten()\n\ny_predicted = clf.predict(X_test)\nyy = y_predicted\ny_predicted = y_predicted.reshape(-1, 1)\ny_predicted_log = y_predicted\ny_predicted_log = mms_y.inverse_transform(y_predicted)\ny_predicted = vfunc(y_predicted_log) \ny_predicted = y_predicted.flatten()\n\nyt = y_test.reshape(-1, 1)\nyt = mms_y.inverse_transform(yt)\nyt = vfunc(yt) \nyt = yt.flatten()\n\nmse = mean_squared_error(yt, y_predicted)\nmsle = mean_squared_log_error(yt, y_predicted)\n\nrmse = math.sqrt(mse)\nrmsle = math.sqrt(msle)\n\nprint(\"MSE Test: \"+str(rmse))\nprint(\"MSE Log Test: \"+str(rmsle))\n\nprint_submission(y_pred, df_test_index)","80c2935a":"<h1>Import and Constants : <\/h1>","5c5e0356":"<h1>Functions:<\/h1>","714b6542":"<h1>Preprocess, train and predict : <\/h1>"}}