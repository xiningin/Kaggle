{"cell_type":{"8441c376":"code","33e6dcc2":"code","1d5e0e65":"code","5fa3aa30":"code","5e98419e":"code","fa8d21c0":"code","cc4ad8f4":"code","ee7ccf04":"code","a1d80a05":"code","deb8c8eb":"code","ef57798c":"code","4cb29064":"code","4c7a6bc2":"code","8f506171":"code","3d2fa041":"code","cba04138":"code","befcd8ac":"code","af4e393f":"code","91002b11":"code","0c5a97d3":"code","51a0a011":"code","d2231687":"code","641ca08d":"code","88761764":"code","e704682c":"code","091de4bd":"code","110bed54":"code","7a6b863e":"code","7732fecd":"code","40d2010e":"code","89fbf36c":"code","0ba09559":"code","4b7b0a42":"code","074ecbaf":"code","e2b42ef6":"markdown","b1fb7a41":"markdown","5283a9b4":"markdown"},"source":{"8441c376":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","33e6dcc2":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, MaxAbsScaler,RobustScaler, PowerTransformer, QuantileTransformer, Normalizer, FunctionTransformer\nsns.set()\n%matplotlib inline\n\n\ndf = pd.read_csv('..\/input\/creditcardfraud\/creditcard.csv')\nprint(df.shape)\ndf.head()","1d5e0e65":"df.info()","5fa3aa30":"df.describe()","5e98419e":"class_names = {0:'Not Fraud', 1:'Fraud'}\nprint(df.Class.value_counts().rename(index = class_names))","fa8d21c0":"fig = plt.figure(figsize = (15, 12))\n\nplt.subplot(5, 6, 1) ; plt.plot(df.V1) ; plt.subplot(5, 6, 15) ; plt.plot(df.V15)\nplt.subplot(5, 6, 2) ; plt.plot(df.V2) ; plt.subplot(5, 6, 16) ; plt.plot(df.V16)\nplt.subplot(5, 6, 3) ; plt.plot(df.V3) ; plt.subplot(5, 6, 17) ; plt.plot(df.V17)\nplt.subplot(5, 6, 4) ; plt.plot(df.V4) ; plt.subplot(5, 6, 18) ; plt.plot(df.V18)\nplt.subplot(5, 6, 5) ; plt.plot(df.V5) ; plt.subplot(5, 6, 19) ; plt.plot(df.V19)\nplt.subplot(5, 6, 6) ; plt.plot(df.V6) ; plt.subplot(5, 6, 20) ; plt.plot(df.V20)\nplt.subplot(5, 6, 7) ; plt.plot(df.V7) ; plt.subplot(5, 6, 21) ; plt.plot(df.V21)\nplt.subplot(5, 6, 8) ; plt.plot(df.V8) ; plt.subplot(5, 6, 22) ; plt.plot(df.V22)\nplt.subplot(5, 6, 9) ; plt.plot(df.V9) ; plt.subplot(5, 6, 23) ; plt.plot(df.V23)\nplt.subplot(5, 6, 10) ; plt.plot(df.V10) ; plt.subplot(5, 6, 24) ; plt.plot(df.V24)\nplt.subplot(5, 6, 11) ; plt.plot(df.V11) ; plt.subplot(5, 6, 25) ; plt.plot(df.V25)\nplt.subplot(5, 6, 12) ; plt.plot(df.V12) ; plt.subplot(5, 6, 26) ; plt.plot(df.V26)\nplt.subplot(5, 6, 13) ; plt.plot(df.V13) ; plt.subplot(5, 6, 27) ; plt.plot(df.V27)\nplt.subplot(5, 6, 14) ; plt.plot(df.V14) ; plt.subplot(5, 6, 28) ; plt.plot(df.V28)\nplt.subplot(5, 6, 29) ; plt.plot(df.Amount)\nplt.show()","cc4ad8f4":"from sklearn.model_selection import train_test_split","ee7ccf04":"feature_names = df.iloc[:, 1:30].columns\ntarget = df.iloc[:1, 30: ].columns\nprint(feature_names)\nprint(target)","a1d80a05":"data_features = df[feature_names]\ndata_target = df[target]","deb8c8eb":"X_train, X_test, y_train, y_test = train_test_split(data_features, data_target, train_size=0.70, test_size=0.30, random_state=1)\nprint(\"Length of X_train is: {X_train}\".format(X_train = len(X_train)))\nprint(\"Length of X_test is: {X_test}\".format(X_test = len(X_test)))\nprint(\"Length of y_train is: {y_train}\".format(y_train = len(y_train)))\nprint(\"Length of y_test is: {y_test}\".format(y_test = len(y_test)))","ef57798c":"scaler = StandardScaler()\nscaler.fit(X_train)\nX_train_scaled = scaler.transform(X_train)\nX_test_scaled = scaler.transform(X_test)","4cb29064":"from sklearn.svm import SVC\n\nsvm = SVC()\nsvm.fit(X_train_scaled, y_train)\n\nprint(\"Train set score: {:.2f}\".format(svm.score(X_train_scaled, y_train)))\nprint(\"Test set score: {:.2f}\".format(svm.score(X_test_scaled, y_test)))","4c7a6bc2":"df['new_amount'] = StandardScaler().fit_transform(df['Amount'].values.reshape(-1, 1))\ndf.drop(['Time', 'Amount'], axis=1, inplace=True)\ndf.head()","8f506171":"train_set_percentage = 0.5\n###################################################\n# select 30% of the entire class 1 (fraudulent transactions) data in order to train the model \nfraud_series = df[df['Class'] == 1]\nidx = fraud_series.index.values\nnp.random.shuffle(idx)\nfraud_series.drop(idx[:int(idx.shape[0]*train_set_percentage)], inplace=True)\ndf.drop(fraud_series.index.values, inplace=True)\n###################################################","3d2fa041":"###################################################\n# normal dataset with the same size of the fraud_series (training dataset)\nnormal_series = df[df['Class'] == 0] \nidx = normal_series.index.values\nnp.random.shuffle(idx)\nnormal_series.drop(idx[fraud_series.shape[0]:], inplace=True)\ndf.drop(normal_series.index.values, inplace=True)\n###################################################","cba04138":"# build the training dataset\nnew_dataset = pd.concat([normal_series, fraud_series])\nnew_dataset.reset_index(inplace=True, drop=True)\ny = new_dataset['Class'].values.reshape(-1, 1)\nnew_dataset.drop(['Class'], axis=1, inplace=True)","befcd8ac":"X = new_dataset.values","af4e393f":"attr={'C': [0.1, 1, 2, 5, 10, 25, 50, 100],\n      'gamma': [1e-1, 1e-2, 1e-3]\n     }\n\nX_train, X_test, y_train, y_test = train_test_split(X, y.ravel(), test_size=0.3, random_state=10)\n\nmodel = SVC()\nclassif = GridSearchCV(model, attr, cv=5)\nclassif.fit(X_train, y_train)\ny_pred = classif.predict(X_test)\nprint('Accuracy: ',accuracy_score(y_pred, y_test))","91002b11":"#y_all = df['Class'].values.reshape(-1, 1)\n#df.drop(['Class'], axis=1, inplace=True)\n#X_all = df\n#y_pred_all = classif.predict(X_all)","0c5a97d3":"#print(recall_score(y_all, y_pred_all))","51a0a011":"# Fitting K Nearest Neighbor Classification to the Training Set\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import neighbors\nfrom sklearn.impute import SimpleImputer\nimputer = SimpleImputer(missing_values= np.nan, strategy= 'mean')\nclassifier = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)\nclassifier.fit(X_train, y_train)","d2231687":"# Predicting the Test Set results\ny_pred = classifier.predict(X_test)\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)","641ca08d":"X_test","88761764":"y_test","e704682c":"from sklearn.model_selection import cross_val_score","091de4bd":"#create a new KNN model\nknn_cv = KNeighborsClassifier(n_neighbors=3)","110bed54":"#train model with cv of 5 \ncv_scores = cross_val_score(knn_cv, X, y, cv=5)","7a6b863e":"#print each cv score (accuracy) and average them\nprint(cv_scores)","7732fecd":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.2,random_state=42)\nX_train, X_validate, y_train, y_validate = train_test_split(X_train,y_train,test_size=0.25, random_state=42)","40d2010e":"from sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb.fit(X_train,y_train)","89fbf36c":"print(\"X_train: \",X_train.shape)\nprint(\"y_train: \",y_train.shape)\nprint(\"X_test: \",X_test.shape)\nprint(\"y_test: \",y_test.shape)\nprint(\"X_validate: \",X_test.shape)\nprint(\"y_validate: \",y_test.shape)","0ba09559":"from sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb.fit(X_train,y_train)","4b7b0a42":"y_pred = nb.predict(X_test)\nprint(\"Tahmin Edilen Deger: \",y_pred)","074ecbaf":"from sklearn import metrics\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import precision_score\nprint(\"confusion_matrix: \",confusion_matrix(y_test, y_pred))\nprint()\nprint(\"accuracy: \",metrics.accuracy_score(y_test,y_pred))\nprint(\"f1 Score(macro): \",f1_score(y_test, y_pred, average='macro'))\nprint(\"f1 Score(micro): \",f1_score(y_test, y_pred, average='micro'))\nprint(\"f1 Score(weighted): \",f1_score(y_test, y_pred, average='weighted'))\nprint(\"precision(macro): \",precision_score(y_test, y_pred, average='macro'))\nprint(\"precision(micro): \",precision_score(y_test, y_pred, average='micro'))\nprint(\"precision (weighted): \",precision_score(y_test, y_pred, average='weighted'))","e2b42ef6":"**Bayes**","b1fb7a41":"**SVM**","5283a9b4":"**K-NEAREST NEIGHBORS**"}}