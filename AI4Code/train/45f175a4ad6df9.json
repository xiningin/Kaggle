{"cell_type":{"c3ddf505":"code","4fa66bd6":"code","374e5f53":"code","9f6fe7a3":"code","9d314acc":"code","bbbc25c0":"code","4571b6aa":"code","6ca5c578":"code","62578206":"code","ff17e6ee":"code","63ba037d":"code","3d89616f":"code","9e4a9fe4":"code","0d97956c":"code","7d39eaf1":"code","56021fd2":"code","f5dfe542":"code","d9f06e15":"markdown","6fa6ce87":"markdown","aeaeac97":"markdown","22abdd93":"markdown","98ebfd41":"markdown","9f42de07":"markdown","0a536635":"markdown","346a8100":"markdown","158c4949":"markdown","a41bd3b5":"markdown","4550ab3a":"markdown","f7145ac5":"markdown","e0e83cf4":"markdown","d2534f87":"markdown","12250956":"markdown","678bed97":"markdown"},"source":{"c3ddf505":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport networkx as nx # for network analysis\n#visualization\nimport matplotlib.pyplot as plt\nimport folium\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\ndata = pd.read_csv('..\/input\/sample_table.csv')","4fa66bd6":"#first find the number of unique carparks, check that the longs and lats are clean\nprint('Check that data is clean: Lat has', data['latitude'].isna().sum(), 'NAs and Long has', data['longitude'].isna().sum(), 'NAs.')\n#Note: 3113 carparks if round(3), 78 carparks if round(2), 3068 carparks if apply floor\n# data[['long','lat']] = data[['longitude','latitude']].apply(lambda x: x*1000).apply(np.floor).apply(lambda x: x\/1000)\ndata[['long','lat']] = data[['longitude','latitude']].round(3)\ndata['carpark'] = '(' + data['lat'].map(str) + ',' + data['long'].map(str) + ')'\nprint('Number of unique carparks:', data['carpark'].nunique())","374e5f53":"#Just to have a quick look at the data\ndata.head(5)","9f6fe7a3":"data_subset = data[data['total_cars'] > 3].sort_values(['timestamp']).reset_index(drop = True)\n\nbig_carparks = {}\n\nfor row in range(len(data_subset)):\n    carpark = data_subset['carpark'][row]\n    car_count = data_subset['total_cars'][row]\n    if carpark in big_carparks.keys():\n        if car_count > big_carparks[carpark]:\n            big_carparks[carpark] = car_count\n    else:\n        big_carparks[carpark] = car_count\n\ndef color(number):\n    if number == 4:\n        return 'blue'\n    elif number == 5:\n        return 'green'\n    elif number == 6:\n        return 'orange'\n    else:\n        return 'red'\n        \nm = folium.Map([32.089, 34.797], zoom_start = 12, width = '40%')\n\nfor key in big_carparks.keys():\n    key1, key2 = key.lstrip('(').strip(')').split(',')\n    folium.Marker([key1,key2], popup = key, \n                  icon = folium.Icon(color = color(big_carparks[key]), icon = 'car', prefix = 'fa')\n                 ).add_to(m)\n\nm","9d314acc":"trips = {}\n\nfor row in range(len(data)):\n    cars = data['carsList'][row].lstrip('[').strip(']').replace(' ','').split(',')\n    if len(cars) < 1:\n        continue\n    for car in cars:\n        if car in trips.keys():\n            trips[car].append(data['carpark'][row])\n        else:\n            trips[car] = []\n            trips[car].append(data['carpark'][row])","bbbc25c0":"directed_trip = {}\nundirected_trip = {}\n\ncarpark_links = nx.Graph()\ndirected_carpark_links = nx.DiGraph()\n\nfor car in trips.keys():\n    for i in range(1, len(trips[car]), 1):\n        start = trips[car][i-1]\n        end = trips[car][i]\n        if start == end:\n            continue\n        trip = (start, end)\n        if trip in directed_trip.keys():\n            directed_trip[trip] += 1\n        else:\n            directed_trip[trip] = 1\n        if start < end:\n            tripp = (start, end)\n        else:\n            tripp = (end, start)\n        if tripp in undirected_trip.keys():\n            undirected_trip[tripp] += 1\n        else:\n            undirected_trip[tripp] = 1\n        directed_carpark_links.add_edge(start,end, weight = directed_trip[start,end])\n        carpark_links.add_edge(start,end, weight = undirected_trip[tripp])","4571b6aa":"carparks = [key for key in big_carparks.keys()]\n\ncarpark_links_subgraph = nx.subgraph(carpark_links, carparks)\ndirected_carpark_links_subgraph = nx.subgraph(directed_carpark_links, carparks)","6ca5c578":"plt.figure(figsize = (10,12))\npos_kk = nx.kamada_kawai_layout(carpark_links_subgraph)\nnx.draw(carpark_links_subgraph, pos = pos_kk, with_labels = True, label = undirected_trip)","62578206":"m2 = folium.Map([32.089, 34.797], zoom_start = 12, width = '40%')\n\ndef underused_color(key):\n    underused = ['(32.089,34.797)','(32.063,34.796)']\n    if key in underused:\n        return 'red'\n    else:\n        return 'blue'\n\nfor key in big_carparks.keys():\n    key1, key2 = key.lstrip('(').strip(')').split(',')\n    folium.Marker([key1,key2], popup = key, \n                  icon = folium.Icon(color = underused_color(key), icon = 'car', prefix = 'fa')\n                 ).add_to(m2)\n\nm2","ff17e6ee":"betweenness_weighted = nx.betweenness_centrality(carpark_links_subgraph, weight = 'weight')\nmax_betweenness_weighted = 0\nmaxnode_weighted = 'empty'\nmin_betweenness_weighted = 1\nminnode_weighted = 'empty'\nfor node in betweenness_weighted.keys():\n    if betweenness_weighted[node] > max_betweenness_weighted:\n        max_betweenness_weighted = betweenness_weighted[node]\n        maxnode_weighted = node\n    if betweenness_weighted[node] < min_betweenness_weighted:\n        min_betweenness_weighted = betweenness_weighted[node]\n        minnode_weighted = node\n\nprint('Max:', maxnode_weighted , '&', max_betweenness_weighted)\n\nunderused = ['(32.089,34.797)','(32.063,34.796)']\nfor node in underused:\n    print('Betweenness of', node, '=', betweenness_weighted[node])","63ba037d":"#this is without edgeweights\nbetweenness = nx.betweenness_centrality(carpark_links_subgraph)\nmax_betweenness = 0\nmaxnode = 'empty'\nmin_betweenness = 1\nminnode = 'empty'\nfor node in betweenness.keys():\n    if betweenness[node] > max_betweenness:\n        max_betweenness = betweenness[node]\n        maxnode = node\n    if betweenness[node] < min_betweenness:\n        min_betweenness = betweenness[node]\n        minnode = node\n\n\nprint('Max:', maxnode, '&', max_betweenness)\nprint('Min:', minnode, '&', min_betweenness)\n\nfor node in underused:\n    print('Betweenness of', node, '=', betweenness[node])","3d89616f":"pos_map = {}\nfor node in carpark_links_subgraph.nodes:\n    node1, node2 = node.lstrip('(').strip(')').split(',')\n    pos_map[node] = [float(node2), float(node1)]\n    \ncarpark_links_subgraph_edgelabel = []\n\nfor key in carpark_links_subgraph.edges:\n    key1, key2 = key\n    if key1 > key2:\n        key = (key2, key1)\n    carpark_links_subgraph_edgelabel.append(undirected_trip[key]\/500)\n    \nbig_carparks_of_interest = [key for key in big_carparks.keys() if big_carparks[key] > 6]\nnode_color = ['b' if key in big_carparks_of_interest else 'r' for key in carpark_links_subgraph.nodes]\n    \nplt.figure(figsize = (18,18))\nnx.draw(carpark_links_subgraph, pos = pos_map, with_labels = True, node_color = node_color, width = carpark_links_subgraph_edgelabel)","9e4a9fe4":"maxnodes_weighted = sorted(betweenness, key=betweenness.get, reverse=True)[:5]\nmaxnodes_unweighted = sorted(betweenness, key=betweenness.get, reverse=True)[:5]\n\ncarparks_of_interest = []\nfor node in maxnodes_unweighted:\n    if node not in carparks_of_interest:\n        carparks_of_interest.append(node)\nfor node in maxnodes_weighted:\n    if node not in carparks_of_interest:\n        carparks_of_interest.append(node)\n\nall_carparks_of_interest = big_carparks_of_interest + carparks_of_interest\nprint('Key \\t\\t\\t Max. Cars \\t Unweighted \\t\\t Weighted')\nfor key in all_carparks_of_interest:\n    print(key, '  \\t', big_carparks[key], '\\t\\t', betweenness[key], '\\t', betweenness_weighted[key])","0d97956c":"node_color = []\n\nfor key in carpark_links_subgraph.nodes:\n    if key in big_carparks_of_interest:\n        node_color.append('b')\n    elif key in maxnodes_unweighted or key in maxnodes_weighted:\n        node_color.append('g')\n    else:\n        node_color.append('r')\n    \nplt.figure(figsize = (18,18))\nnx.draw(carpark_links_subgraph, pos = pos_map, with_labels = True, node_color = node_color, width = carpark_links_subgraph_edgelabel)","7d39eaf1":"m3 = folium.Map([32.089, 34.797], zoom_start = 12, width = '40%')\n\ndef color_node(position):\n    if position in big_carparks_of_interest:\n        return 'blue'\n    elif position in carparks_of_interest:\n        return 'green'\n    else:\n        return 'red'\n\nfor key in big_carparks.keys():\n    key1, key2 = key.lstrip('(').strip(')').split(',')\n    folium.Marker([key1,key2], popup = key + '\\n Max.:' + str(big_carparks[key]) + ' cars', \n                  icon = folium.Icon(color = color_node(key))\n                 ).add_to(m3)\n\ndef check_keys(key1, key2):\n    if key1 > key2:\n        key = (key2, key1)\n    else:\n        key = (key1, key2)\n    return key\n\nundirected_trip_subset = {}\nfor key in carpark_links_subgraph.edges:\n    key1, key2 = key\n    key = check_keys(key1, key2)\n    undirected_trip_subset[key] = undirected_trip[key]\n\nhigh_volume = sorted(undirected_trip_subset, key = undirected_trip_subset.get, reverse = True)[:10]\n\nfor edge in high_volume:\n    node1, node2 = edge\n    point1, point2 = node1.lstrip('(').strip(')').split(',')\n    point3, point4 = node2.lstrip('(').strip(')').split(',')\n    folium.PolyLine([([float(point1),float(point2)]),([float(point3),float(point4)])],\n                    color=\"black\", \n                    weight= 3).add_to(m3)\n\nprint('Trip \\t\\t\\t\\t\\t Count')\nfor trip in high_volume:\n    print(trip, '\\t', undirected_trip_subset[trip])\n    \nm3","56021fd2":"m4 = folium.Map([32.116, 34.84], zoom_start = 15, width = '50%', height = '50%')\n\nshorttrip = [[32.118,34.839],[32.114,34.842]]\n\nfor location in shorttrip:\n    key1, key2 = location\n    key = '('+str(key1)+','+str(key2)+')'\n    folium.Marker(location, popup = key + '\\n Max.:' + str(big_carparks[key]) + ' cars', \n                  icon = folium.Icon(color = color_node(key))\n                 ).add_to(m4)\n\nfolium.PolyLine(shorttrip, \n                color=\"black\", \n                weight= 3).add_to(m4)\nstring = ('(32.114,34.842)','(32.118,34.839)')\nprint('Trip between', trip, 'was made', undirected_trip_subset[string], 'times.')\nm4","f5dfe542":"plot_highvolume = pd.DataFrame([undirected_trip_subset[key] for key in undirected_trip_subset.keys()])\nplot_highvolume.plot.hist('0')","d9f06e15":"Then using that trip information, it is possible to build directed and undirected graphs. <br>\nThese graphs yield different information of the network. <br>\nWhere an undirected graph would give centrality information of a node, the directed graph adds an extra layer of information, taking into account the the direction and number of trips made between nodes.<br>\nThe number of trips made will be used as the edge weight between nodes during analysis.","6fa6ce87":"Unsurprisingly, the betweeness of these carparks is very low.","aeaeac97":"On a map, the locations are shown in red. <br>\nThe reason for their low connectivity is not yet understood, but perhaps some centrality measures will help.","22abdd93":"Note the effect of edgeweights. If omitted, the expected result will be different as shown by the betweenness scores here. <br>\nThe two outliers identified in the network diagram no longer have the lowest betweenness scores.","98ebfd41":"Finally, the highly connected routes can be shown on a map to help figure out why these locations have such high connectivty.\nThe top 10 routes of high connectivty are shown.","9f42de07":"It might then be interesting to figure out why drivers make such short trips (as shown below) with such high frequency.","0a536635":"Below, a typical networkx type graph is shown. The outlier can quickly be identified and analysed. <br>\nIn this case, we may be interested in looking at (32.089, 34.797) and (32.063, 34.796). <br>\nThe placement suggests that these are under-used parking locations.","346a8100":"As a final point, we can consider the trips made between carparks to see which carparks are more important and perhaps more carspark spaces need to be provided. <p>\nAs shown below, the blue nodes are big carparks which can house 7 or more cars. <br>\nIt is surprising though to learn that the most number of trips, denoted by the thickness of the lines, are made between smaller carparks.\nHere the carparks are mapped roughly according to the real location on the map.","158c4949":"The next step is to collect all the trips that the cars have made.<br>\nWhat this does is that it makes a count of all the trips made by any car between 2 parking locations. <br>\nThis is particularly important because we wish to know which carparks are more important.","a41bd3b5":"In fact, we can check to show that most trips between carpark pairs only occur les than 1000 times and that anything above 200 is rare (and interesting)","4550ab3a":"These high connectivity carparks are colored in green.","f7145ac5":"A subgraph is created using only the large carparks, but all weights were applied according to the actual trips made between carparks.\nNote that this disctinction is important as we do not want to accidentally consider only the paths between big carparks, which would happen if the subset of data was used to build the network graph.","e0e83cf4":"The first thing to do then is to determine all car parking locations. <br>\nUnlike the larger carparks that some people might be used to, some of the carparks here appear to be street parking. <p>\n\nIn the first 2 lines, a sanity check on the location data. <br>\nThen each carpark location is stored as a string in a new column. This is done to make node calling easier during network analysis. <br>\nTo make the analysis more readable, some carparks that are near each other are combined by rounding the long and lat values. <br>\nFor a long and lat with 3 decimal places, each carpark is located to within 50m accuracy which is well within walking distance for the average person. <br>\nFinally, check the number of unique carpark locations.","d2534f87":"In the next step, some locations of interest are determined. <br>\nThis includes locations where 4 or more cars can be parked. <br>\nThe smaller subset is used to make the analysis easier to read, but this could be extended to more carparks in general, at the expense of performance and human readability.","12250956":"The idea behind this kernel is to try the use of network analysis on the locations where cars are parked to identify significant locations and important pairs of locations. <br>\nThis information can then be used in secondary analysis to determine if more parking lots should be made available. <p>\n\nIn the first box, the data is imported along with some modules that will be used.","678bed97":"We can then check the betweenness scores of these carparks. Take the top 5 carparks by betweenness and compare that against the betweenness of the big carparks. <br>\nUnsurprisingly, the betweenness score confirms that these carparks do see more traffic."}}