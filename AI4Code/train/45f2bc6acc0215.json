{"cell_type":{"7f47370c":"code","80401350":"code","45a7f7f0":"code","eb9abbcc":"code","d7ba3fe7":"code","63f90692":"code","21fd6b5b":"code","0bdfa1b6":"code","9a10921d":"code","8fac3a09":"code","68e2a437":"code","6e42523f":"code","17831f81":"code","4215803c":"code","e21050b8":"code","d847f40a":"code","8ab10dae":"code","eaaf5be2":"code","07ccdaad":"code","d120b926":"code","b825ccfc":"code","6ca0b5ce":"code","7d2f47fc":"code","0f4de6c7":"code","ae24d210":"code","95c87742":"code","6fd41c9c":"code","ea69687b":"code","08d77a4e":"markdown","da97c7d1":"markdown","0953848e":"markdown","6e5cd0a4":"markdown","529b5f26":"markdown","af242cce":"markdown"},"source":{"7f47370c":"# data analysis and wrangling\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# machine learning\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import StandardScaler\n\nimport tensorflow as tf\nfrom tensorflow import keras","80401350":"df = pd.read_csv(\"..\/input\/sloan-digital-sky-survey\/Skyserver_SQL2_27_2018 6_51_39 PM.csv\")","45a7f7f0":"df.head()","eb9abbcc":"df.tail()","d7ba3fe7":"df.info()","63f90692":"df.describe().T","21fd6b5b":"df.describe(include=['O'])","0bdfa1b6":"df.drop(['objid', 'specobjid'], axis=1, inplace=True)\ndf.drop(['run','rerun','camcol','field'],axis=1,inplace=True)","9a10921d":"sns.countplot(x=df['class'])","8fac3a09":"sns.pairplot(df[['u','g','r','i']])","68e2a437":"def class_to_number(val):\n    if val =='STAR':\n        return 0\n    elif val =='GALAXY':\n        return 1\n    else:\n        return 2","6e42523f":"df['class'] = df['class'].apply(class_to_number,)","17831f81":"df.head()","4215803c":"df.columns.values","e21050b8":"X = df.drop('class', axis=1)\ny = df['class']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=101)","d847f40a":"tree = DecisionTreeClassifier(max_leaf_nodes=20, random_state=101)\ntree.fit(X_train, y_train)","8ab10dae":"print(f'Train Score: { round(tree.score(X_train,y_train)*100, 2)}')\nprint('-'*20)\nprint(f'Test Score: { round(tree.score(X_test,y_test)*100, 2)}')","eaaf5be2":"y_pred = tree.predict(X_test)","07ccdaad":"print(f'accuracy score : { round(accuracy_score(y_pred, y_test)*100, 2) }')","d120b926":"X_train, X_val, Y_train, Y_val = train_test_split(X_train, y_train, test_size = 0.1, random_state=101)","b825ccfc":"model = keras.models.Sequential([\n    keras.layers.Flatten(),\n    keras.layers.Dense(256, activation='relu'),\n    keras.layers.Dense(128, activation='relu'),\n    keras.layers.Dropout(0.25),\n    keras.layers.Dense(64, activation='relu'),\n    keras.layers.Dropout(0.25),\n    keras.layers.Dense(32, activation='relu'),\n    keras.layers.Dropout(0.5),\n    keras.layers.Dense(3, activation='softmax')\n])","6ca0b5ce":"optimizer = tf.keras.optimizers.RMSprop()","7d2f47fc":"model.compile(optimizer=optimizer , loss='sparse_categorical_crossentropy', metrics=['accuracy'])","0f4de6c7":"learning_rate_reduction = keras.callbacks.ReduceLROnPlateau(\n    monitor='val_acc', \n    patience=3, \n    verbose=1, \n    factor=0.5, \n    min_lr=0.00001)","ae24d210":"history = model.fit(\n    X_train, Y_train, \n    batch_size=86,\n    epochs = 30,\n    validation_data = (X_val,Y_val),\n#     steps_per_epoch=50,\n    callbacks=[learning_rate_reduction]\n)","95c87742":"model.summary()","6fd41c9c":"results = model.predict(X_test)","ea69687b":"model.evaluate(X_test, y_test)","08d77a4e":"## For more accuracy we need more data!","da97c7d1":"# great!","0953848e":"## Neural Network","6e5cd0a4":"## aplly train and test split","529b5f26":"### Decision Tree Classifier","af242cce":"## apply model"}}