{"cell_type":{"ce81d317":"code","8d9eff1b":"code","af775ee8":"code","80b74de1":"code","c8c2618e":"markdown","72a2d848":"markdown","df2248c0":"markdown","edaa21bf":"markdown","b3b963dd":"markdown","6df53858":"markdown","1fe266d9":"markdown","100a0fc7":"markdown","73e1612e":"markdown","87893174":"markdown","fd12aa14":"markdown","7224f909":"markdown","38e24da1":"markdown","1447e724":"markdown","814f0337":"markdown"},"source":{"ce81d317":"!wget \"YOUR_COPIED_LINK_TO_MODEL_STATE_CHECKPOINT_FROM_PART_1\"\n# You will get model.pt as the download result","8d9eff1b":"import torch\nimport torch.nn as nn\nfrom torchvision import models\n\n#Load your model to this variable\nmodel = models.vgg16(pretrained = True) ## Change this if you don't use VGG16\n\n#Add Last Linear Layer, n_inputs -> 102 flower classses\nn_inputs = model.classifier[6].in_features ## ResNet and Inception Code may differ slightly, refer Part 1\n# new layers automatically have requires_grad = True\nlast_layer = nn.Linear(n_inputs, 102)\nmodel.classifier[6] = last_layer\n\n\n#Add Loss Function (Categorical Cross Entropy)\ncriterion = nn.CrossEntropyLoss()\n\n#Specify Optimizer: SGD with LR 0.01\nimport torch.optim as optim\noptimizer = optim.SGD(model.classifier.parameters(), lr = 0.01) ## ResNet, Inception may differ Slightly\n# USE model.parameters() in ResNet or Inception\n\n#Load Model State Dictionary from Downloaded model.pt file\nModel_State_Path = '\/home\/workspace\/model.pt'\n# Convert GPU Model State Dictionary to CPU based\nmodel.load_state_dict(torch.load(Model_State_Path, map_location=lambda storage, loc: storage),strict=False)\nmodel.eval() #Don't Forget to add this Line\n\n#### DEFAULT THINGS FOR UDACITY WORKSPACE #######\n# If you used something other than 224x224 cropped images, set the correct size here\nimage_size = 224 #For Inception v3 it is 299\n# Values you used for normalizing the images. Default here are for \n# pretrained models from torchvision.\nnorm_mean = [0.485, 0.456, 0.406]\nnorm_std = [0.229, 0.224, 0.225]","af775ee8":"!wget \"LINK_TO_CLASSIFIER_PICKLE_PATH\"\n# You will get the whole model path in .pt or .pth format","80b74de1":"#Load your model to this variable\nmodel = torch.load(\"PATH_TO_MODEL_SAVE_FILE\", map_location=lambda storage, loc: storage)\n#Add Loss Function (Categorical Cross Entropy)\ncriterion = nn.CrossEntropyLoss()\n\n#Specify Optimizer: SGD with LR 0.01\nimport torch.optim as optim\noptimizer = optim.SGD(model.classifier.parameters(), lr = 0.01) ## ResNet, Inception may differ Slightly\n# USE model.parameters() in ResNet or Inception\n\nmodel.eval() #Don't Forget to add this Line\n\n#### DEFAULT THINGS FOR UDACITY WORKSPACE #######\n# If you used something other than 224x224 cropped images, set the correct size here\nimage_size = 224 #For Inception v3 it is 299\n# Values you used for normalizing the images. Default here are for \n# pretrained models from torchvision.\nnorm_mean = [0.485, 0.456, 0.406]\nnorm_std = [0.229, 0.224, 0.225]","c8c2618e":"**References:** https:\/\/pytorch.org\/tutorials\/beginner\/saving_loading_models.html","72a2d848":"By [Soumya Ranjan Behera](https:\/\/www.linkedin.com\/in\/soumya044)","df2248c0":"**ADD this Code Snippets in the \"TEST\" Cell located in a BLUE Outlined Cell** (REMOVE ALL PREVIOUS CODE SNIPPETS PRESENT INSIDE THE ' TEST ' CELL)","edaa21bf":"# Thank You  \n\nIf you liked this kernel please **Upvote**. Don't forget to drop a comment or suggestion.  \n\n### *Soumya Ranjan Behera*\nLet's stay Connected! [LinkedIn](https:\/\/www.linkedin.com\/in\/soumya044)  \n\n**Happy Coding !**","b3b963dd":"## **Step 1**  \n**Inside Udacity Workspace, Add a Code Cell Next to the Example Cell and write the following code**","6df53858":"**Don't ADD any other code cell below the above TEST  cell otherwise you may face some error while submitting **  \n\n### **Now Go On and Hit That Blue TEST Button**  \n### ***ALL THE BEST !***","1fe266d9":"# **2. Submit in Udacity's Workspace to Evaluate**","100a0fc7":"## This is the continuation of my previous kernel [Udacity PyTorch Final Lab Guide - Part 1](https:\/\/www.kaggle.com\/soumya044\/udacity-pytorch-final-lab-guide-part-1\/) ","73e1612e":"### **Points To Remember:**  \n* **We trained our model in GPU environment** \n* **But Udacity's Workspace doesn't provide GPU while evaluating**\n* **We'll deal with the conversion of GPU model to CPU model**","87893174":"**This method is not at all recommended and also I have not tried it yet. PyTorch also don't recommend this method. So, you better go with FIRST approach**","fd12aa14":"### In [Part - 1 (Build and Train our Model)](https:\/\/www.kaggle.com\/soumya044\/udacity-pytorch-final-lab-guide-part-1), \n* We imported one pretrained model\n* Added our own Fully-Connected Layer at the end (to get 102 classes)\n* Trained the model\n* Evaluated it's performance\n* Prepared it for Export","7224f909":"**Please Fork and Run this Notebook from Top-to-Bottom after running Part - 1's Notebook**","38e24da1":"# **Udacity PyTorch Final Lab Challenge Guide - Part 2**","1447e724":"## **If you prefer to import the whole model file (NOT Recommended)**","814f0337":"## **Step 2**  \n**Import the Model and add necessary components**"}}