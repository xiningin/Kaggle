{"cell_type":{"f93597fd":"code","0e6ea5c1":"code","0b1cd5f9":"code","8c36e998":"code","45499f66":"code","4dec0f32":"code","6ba80791":"code","4c2dada3":"code","e2f46cab":"code","fe25e6f5":"code","cff46d34":"code","ab8f49a8":"code","7bdcfa74":"code","fc931e4c":"code","fd39d046":"code","b03ec993":"code","c3b4adb4":"code","58b1415c":"code","69867381":"code","6274e59e":"code","cc25a109":"code","cfa08040":"code","3fd576e3":"code","0bf92efc":"code","faecdd43":"code","3475d996":"code","40702a74":"code","6a1ce32b":"code","1f079ea7":"code","b809176a":"code","9539b4ce":"code","10fc678e":"code","51c3ef2f":"code","756bce4a":"code","e0bd80e2":"code","0783ecc6":"code","2e905861":"code","902e05ba":"code","a5edb8b3":"code","3bd1ed46":"code","3a83817f":"code","9cb1553d":"code","bc863fa3":"code","8efc5f9f":"code","520ddd5e":"code","98de85af":"markdown","7f6ba8ee":"markdown","18a3bba9":"markdown","1ed23822":"markdown","17a3ed3f":"markdown","e64b082c":"markdown","c0468d76":"markdown","9f8d5ee2":"markdown","4d932975":"markdown","ea267b07":"markdown","cf74324d":"markdown","87d218e1":"markdown","35501382":"markdown","f4c28f0b":"markdown","7f38af72":"markdown","ba7f3a0e":"markdown","e11d3fb0":"markdown","c1dadbd8":"markdown","f9ddc826":"markdown","3acbe1d2":"markdown","cbf53190":"markdown","b0eab059":"markdown","70ce8480":"markdown","e448a7d6":"markdown","48fc174a":"markdown","5ca728b5":"markdown","3dfdc5e8":"markdown","a4e3d7b4":"markdown","c7704d7a":"markdown","685896b0":"markdown","7ff9c63b":"markdown","a00264bc":"markdown"},"source":{"f93597fd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.graph_objs as go\nimport plotly.express as px\n\n\n\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","0e6ea5c1":"data = pd.read_csv(\"\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv\")","0b1cd5f9":"data.head()","8c36e998":"data.describe()","45499f66":"data.info()","4dec0f32":"var_val = data.Pregnancies.values\nvar_ind = data.Pregnancies.index\n\nvar_data = pd.DataFrame({ \"Index\" : var_ind , \"Values\" : var_val})\nvar_data\n\ntrace1 =go.Scatter(\n    x = var_data[\"Index\"],\n    y = var_data[\"Values\"],\n    name = \"Pregnancies\")\n\n\u0130li\u015fki_data =[trace1]\n\nlayout = go. Layout(\n    dict(title = 'Ki\u015filere G\u00f6re \"Pregnancies\" \u00d6zelli\u011finin De\u011fi\u015fimi',\n              xaxis= dict(title= 'Ki\u015fi Say\u0131s\u0131',ticklen= 5,zeroline= False)) )\n\n\nfig =go.Figure(data=\u0130li\u015fki_data , layout=layout)\nfig","6ba80791":"var_val = data.Glucose.values\nvar_ind = data.Glucose.index\n\nvar_data = pd.DataFrame({ \"Index\" : var_ind , \"Values\" : var_val})\nvar_data\n\ntrace1 =go.Scatter(\n    x = var_data[\"Index\"],\n    y = var_data[\"Values\"],\n    name = \"Glucose\")\n\n\u0130li\u015fki_data =[trace1]\n\nlayout = go. Layout(\n    dict(title = 'Ki\u015filere G\u00f6re \"Glucose\" \u00d6zelli\u011finin De\u011fi\u015fimi',\n              xaxis= dict(title= 'Ki\u015fi Say\u0131s\u0131',ticklen= 5,zeroline= False)) )\n\n\nfig =go.Figure(data=\u0130li\u015fki_data , layout=layout)\nfig","4c2dada3":"var_val = data.BloodPressure.values\nvar_ind = data.BloodPressure.index\n\nvar_data = pd.DataFrame({ \"Index\" : var_ind , \"Values\" : var_val})\nvar_data\n\ntrace1 =go.Scatter(\n    x = var_data[\"Index\"],\n    y = var_data[\"Values\"],\n    name = \"BloodPressure\")\n\n\u0130li\u015fki_data =[trace1]\n\nlayout = go. Layout(\n    dict(title = 'Ki\u015filere G\u00f6re \"BloodPressure\" \u00d6zelli\u011finin De\u011fi\u015fimi',\n              xaxis= dict(title= 'Ki\u015fi Say\u0131s\u0131',ticklen= 5,zeroline= False)) )\n\n\nfig =go.Figure(data=\u0130li\u015fki_data , layout=layout)\nfig","e2f46cab":"var_val = data.SkinThickness.values\nvar_ind = data.SkinThickness.index\n\nvar_data = pd.DataFrame({ \"Index\" : var_ind , \"Values\" : var_val})\nvar_data\n\ntrace1 =go.Scatter(\n    x = var_data[\"Index\"],\n    y = var_data[\"Values\"],\n    name = \"SkinThickness\")\n\n\u0130li\u015fki_data =[trace1]\n\nlayout = go. Layout(\n    dict(title = 'Ki\u015filere G\u00f6re \"SkinThickness\" \u00d6zelli\u011finin De\u011fi\u015fimi',\n              xaxis= dict(title= 'Ki\u015fi Say\u0131s\u0131',ticklen= 5,zeroline= False)) )\n\n\nfig =go.Figure(data=\u0130li\u015fki_data , layout=layout)\nfig","fe25e6f5":"var_val = data.Insulin.values\nvar_ind = data.Insulin.index\n\nvar_data = pd.DataFrame({ \"Index\" : var_ind , \"Values\" : var_val})\nvar_data\n\ntrace1 =go.Scatter(\n    x = var_data[\"Index\"],\n    y = var_data[\"Values\"],\n    name = \"Insulin\")\n\n\u0130li\u015fki_data =[trace1]\n\nlayout = go. Layout(\n    dict(title = 'Ki\u015filere G\u00f6re \"Insulin\" \u00d6zelli\u011finin De\u011fi\u015fimi',\n              xaxis= dict(title= 'Ki\u015fi Say\u0131s\u0131',ticklen= 5,zeroline= False)) )\n\n\nfig =go.Figure(data=\u0130li\u015fki_data , layout=layout)\nfig","cff46d34":"var_val = data.BMI.values\nvar_ind = data.BMI.index\n\nvar_data = pd.DataFrame({ \"Index\" : var_ind , \"Values\" : var_val})\nvar_data\n\ntrace1 =go.Scatter(\n    x = var_data[\"Index\"],\n    y = var_data[\"Values\"],\n    name = \"BMI\")\n\n\u0130li\u015fki_data =[trace1]\n\nlayout = go. Layout(\n    dict(title = 'Ki\u015filere G\u00f6re \"BMI\" \u00d6zelli\u011finin De\u011fi\u015fimi',\n              xaxis= dict(title= 'Ki\u015fi Say\u0131s\u0131',ticklen= 5,zeroline= False)) )\n\n\nfig =go.Figure(data=\u0130li\u015fki_data , layout=layout)\nfig","ab8f49a8":"var_val = data.DiabetesPedigreeFunction.values\nvar_ind = data.DiabetesPedigreeFunction.index\n\nvar_data = pd.DataFrame({ \"Index\" : var_ind , \"Values\" : var_val})\nvar_data\n\ntrace1 =go.Scatter(\n    x = var_data[\"Index\"],\n    y = var_data[\"Values\"],\n    name = \"DiabetesPedigreeFunction\")\n\n\u0130li\u015fki_data =[trace1]\n\nlayout = go. Layout(\n    dict(title = 'Ki\u015filere G\u00f6re \"DiabetesPedigreeFunction\" \u00d6zelli\u011finin De\u011fi\u015fimi',\n              xaxis= dict(title= 'Ki\u015fi Say\u0131s\u0131',ticklen= 5,zeroline= False)) )\n\n\nfig =go.Figure(data=\u0130li\u015fki_data , layout=layout)\nfig","7bdcfa74":"var_val = data.Age.values\nvar_ind = data.Age.index\n\nvar_data = pd.DataFrame({ \"Index\" : var_ind , \"Values\" : var_val})\nvar_data\n\ntrace1 =go.Scatter(\n    x = var_data[\"Index\"],\n    y = var_data[\"Values\"],\n    name = \"Age\")\n\n\u0130li\u015fki_data =[trace1]\n\nlayout = go. Layout(\n    dict(title = 'Ki\u015filere G\u00f6re \"Age\" \u00d6zelli\u011finin De\u011fi\u015fimi',\n              xaxis= dict(title= 'Ki\u015fi Say\u0131s\u0131',ticklen= 5,zeroline= False)) )\n\n\nfig =go.Figure(data=\u0130li\u015fki_data , layout=layout)\nfig","fc931e4c":"a = data[[\"Pregnancies\",\"Outcome\"]].groupby([\"Pregnancies\"], as_index = False).mean().sort_values(by=\"Outcome\",ascending = False)\na","fd39d046":"fig = px.bar(a , x = a.Pregnancies , y = a.Outcome)\nfig.show()","b03ec993":"x = data[[\"Glucose\" , \"Outcome\"]].groupby([\"Glucose\"], as_index = False).mean().sort_values(by = \"Glucose\" , ascending = True)\n\nx","c3b4adb4":"fig = px.bar(x , x = x.Glucose , y = x.Outcome)\nfig.show()","58b1415c":"y = data[[\"BloodPressure\" , \"Outcome\"]].groupby([\"BloodPressure\"] , as_index = False).mean().sort_values(by = \"BloodPressure\" , ascending = True)\n\ny","69867381":"fig = px.bar(y , x = y.BloodPressure , y = y.Outcome)\nfig.show()","6274e59e":"z = data[[\"SkinThickness\" , \"Outcome\"]].groupby([\"SkinThickness\"] , as_index = False).mean().sort_values(by = \"SkinThickness\" , ascending = True)\nz","cc25a109":"fig = px.bar(z , x = z.SkinThickness , y = z.Outcome)\nfig.show()","cfa08040":"f = data[[\"Insulin\" , \"Outcome\"]].groupby([\"Insulin\"] , as_index = False).mean().sort_values(by = \"Insulin\" , ascending = True)\nf","3fd576e3":"fig = px.bar(f , x = f.Insulin , y = f.Outcome)\nfig.show()","0bf92efc":"g = data[[\"BMI\" , \"Outcome\"]].groupby([\"BMI\"] , as_index = False).mean().sort_values(by = \"BMI\" , ascending = True)\ng","faecdd43":"fig = px.bar(g , x = g.BMI , y = g.Outcome)\nfig.show()","3475d996":"c = data[[\"DiabetesPedigreeFunction\" , \"Outcome\"]].groupby([\"DiabetesPedigreeFunction\"] , as_index = False).mean().sort_values(by = \"DiabetesPedigreeFunction\" , ascending = True)\nc","40702a74":"fig = px.bar(c , x = c.DiabetesPedigreeFunction , y = c.Outcome)\nfig.show()","6a1ce32b":"b = data[[\"Age\" , \"Outcome\"]].groupby([\"Age\"] , as_index = False).mean().sort_values(by = \"Age\" , ascending = True)\nb","1f079ea7":"fig = px.bar(b , x = b.Age , y = b.Outcome)\nfig.show()","b809176a":"sns.heatmap(data.corr() , annot = True)\nplt.show()","9539b4ce":"def outlier(df,features):\n    outlier_indices = []\n    \n    for i in features:\n        Q1 = np.percentile(df[i] , 25)\n        Q3 = np.percentile(df[i] , 75)\n        IQR = Q3-Q1\n        outlier_step = IQR*1.5\n        \n        outlier_list_col = df[(df[i] < Q1 - outlier_step) | (df[i] > Q3 + outlier_step)].index\n        outlier_indices.extend(outlier_list_col)\n        \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","10fc678e":"data.loc[outlier(data,[\"Pregnancies\" , \"Glucose\" , \"BloodPressure\" , \"SkinThickness\" , \"Insulin\" , \"BMI\" , \"DiabetesPedigreeFunction\" , \"Age\"])]\n","51c3ef2f":"data.isnull().sum()","756bce4a":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\n","e0bd80e2":"x = data.drop(\"Outcome\" , axis = 1 )\ny = data.Outcome\n\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size = 0.33, random_state = 42)","0783ecc6":"print(\"X_train: {}\".format(X_train.shape))\nprint(\"X_test: {}\".format(X_test.shape))\nprint(\"y_train: {}\".format(y_train.shape))\nprint(\"y_test: {}\".format(y_test.shape))","2e905861":"X_train = (X_train- np.min(X_train))\/ (np.max(X_train)-np.min(X_train)).values\nX_test = (X_test- np.min(X_test))\/ (np.max(X_test)-np.min(X_test)).values\n","902e05ba":"#To run algorithm\n\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\n\n\n#To develop hyperparameter\n\nfrom sklearn.metrics import classification_report,confusion_matrix\nfrom sklearn.metrics import accuracy_score\n\nfrom sklearn.model_selection import RepeatedStratifiedKFold\nfrom sklearn.model_selection import GridSearchCV\n\n#to find the accuracy rate\n\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.model_selection import cross_val_score\n","a5edb8b3":"dc = DecisionTreeClassifier()\ndc.fit(X_train , y_train)\nprint(\"Score:\" , dc.score(X_test , y_test) )","3bd1ed46":"score = []\nfor i in range(1,50):\n    rf = RandomForestClassifier(n_estimators = i , random_state = 42)\n    rf.fit(X_train , y_train)\n    score.append(rf.score(X_test , y_test))\n    \nplt.plot(score)\nplt.show()","3a83817f":"rf = RandomForestClassifier(n_estimators = 33 , random_state = 42)\nrf.fit(X_train , y_train)\nprint(\"Random Forest Score: {}\".format(rf.score(X_test ,y_test)))","9cb1553d":"model = LogisticRegression()\nsolvers = ['newton-cg', 'lbfgs', 'liblinear']\npenalty = ['l1' , 'l2']\nc_values = [100, 10, 1.0, 0.1, 0.01]\n\ngrid = dict(solver=solvers,penalty=penalty,C=c_values)\ncv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\ngrid_search = GridSearchCV(estimator=model, param_grid=grid, n_jobs=-1, cv=cv, scoring='accuracy',error_score=0)\ngrid_result = grid_search.fit(X_train, y_train)\n\nprint(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\nmeans = grid_result.cv_results_['mean_test_score']\nstds = grid_result.cv_results_['std_test_score']\nparams = grid_result.cv_results_['params']\nfor mean, stdev, param in zip(means, stds, params):\n    print(\"%f (%f) with: %r\" % (mean, stdev, param))","bc863fa3":"model = KNeighborsClassifier()\nn_neighbors = range(1, 21, 2)\nweights = ['uniform', 'distance']\nmetric = ['euclidean', 'manhattan', 'minkowski']\n\ngrid = dict(n_neighbors=n_neighbors,weights=weights,metric=metric)\ncv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\ngrid_search = GridSearchCV(estimator=model, param_grid=grid, n_jobs=-1, cv=cv, scoring='accuracy',error_score=0)\ngrid_result = grid_search.fit(X_train, y_train)\n\nprint(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\nmeans = grid_result.cv_results_['mean_test_score']\nstds = grid_result.cv_results_['std_test_score']\nparams = grid_result.cv_results_['params']\nfor mean, stdev, param in zip(means, stds, params):\n    print(\"%f (%f) with: %r\" % (mean, stdev, param))","8efc5f9f":"model = SVC()\nkernel = ['poly', 'rbf', 'sigmoid']\nC = [50, 10, 1.0, 0.1, 0.01]\ngamma = ['scale']\n# define grid search\ngrid = dict(kernel=kernel,C=C,gamma=gamma)\ncv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\ngrid_search = GridSearchCV(estimator=model, param_grid=grid, n_jobs=-1, cv=cv, scoring='accuracy',error_score=0)\ngrid_result = grid_search.fit(X_train, y_train)\n# summarize results\nprint(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\nmeans = grid_result.cv_results_['mean_test_score']\nstds = grid_result.cv_results_['std_test_score']\nparams = grid_result.cv_results_['params']\nfor mean, stdev, param in zip(means, stds, params):\n    print(\"%f (%f) with: %r\" % (mean, stdev, param))","520ddd5e":"nb = GaussianNB()\nnb.fit(X_train , y_train)\n\nprint(\"Print Accuracy Of Naive Bayes Algorithm:\" , nb.score(X_test , y_test))","98de85af":"<a id = \"16\"><\/a><br>\n\n## Modeling","7f6ba8ee":"* As can be seen, there is an inverse relationship between age and having diabetes.","18a3bba9":"## Univariate Variable Analysis\n","1ed23822":"<a id = \"3\"><\/a><br>\n\n# Basic Data Analysis - Visualization","17a3ed3f":"<a id = \"21\"><\/a><br>\n\n### Naive Bayes Algorithm","e64b082c":"<a id = \"1\"><\/a><br>\n# Load And Check Data","c0468d76":"<a id = \"17\"><\/a><br>\n\n### Decision Tree Classifier","9f8d5ee2":"<a id = \"19\"><\/a><br>\n\n### Logistic Regression","4d932975":"<a id = \"18\"><\/a><br>\n\n### Random Tree Classifier","ea267b07":"* There is no categorical data in the data set.","cf74324d":"* According to the graphs above, as the number of conception increases, the probability of having diabetes increases.","87d218e1":"<a id = \"8\"><\/a><br>\n\n### Insulin - Outcome Relationship","35501382":"# Introduction\n\nThe objective of the dataset is to diagnostically predict whether or not a patient has diabetes, based on certain diagnostic measurements included in the dataset. Several constraints were placed on the selection of these instances from a larger database. In particular, all patients here are females at least 21 years old of Pima Indian heritage.\n\nContent:\n1. [Load and Check Data](#1)\n2. [Variable Description](#2)\n3. [Basic Data Analysis  - Visualization](#3)\n    * [Pregnancies - Outcome Relationship](#4)\n    \n    * [Glucose - Outcome Relationship](#5)\n  \n    * [BloodPressure - Outcome Relationship](#6)\n   \n    * [SkinThickness - Outcome\tRelationship](#7)\n    \n    * [Insulin - Outcome Relationship](#8)\n    \n    * [BMI - Outcome Relationship](#9)\n    \n    * [DiabetesPedigreeFunction - Outcome Relationship](#10)\n    \n    * [Age - Outcome Relationship](#11)\n    \n    \n4. [Outlier Detection](#12)\n5. [Missing Value](#13)\n7. [Feature Engineering](#14)\n    * [Normalization and Data Split](#15)\n8. [Modeling](#16)\n    * [Decision Tree Classifier](#17)\n    * [Random Forest Classifier](#18)\n    * [Logistic Regression](#19)\n    * [Support Vector Machine Algorithm](#20)\n    * [Naive Bayes Algorithm](#21)\n","f4c28f0b":"<a id = \"20\"><\/a><br>\n\n### Support Vector Machine Algorithm","7f38af72":"* According to these results, the best result is obtained with Random Forest Classifier with 77.95% success rate.","ba7f3a0e":"<a id = \"12\"><\/a><br>\n\n## Outlier Detection","e11d3fb0":"<a id = \"9\"><\/a><br>\n\n### BMI - Outcome Relationship","c1dadbd8":"<a id = \"5\"><\/a><br>\n\n### Glucose - Outcome Relationship","f9ddc826":"<a id = \"6\"><\/a><br>\n\n### BloodPressure - Outcome Relationship","3acbe1d2":"<a id = \"7\"><\/a><br>\n\n### SkinThickness - Outcome Relationship","cbf53190":"<a id = \"15\"><\/a><br>\n\n### Normalization and Data Split","b0eab059":"<a id = \"13\"><\/a><br>\n## Missing Value","70ce8480":"\n* The Outcome column is whether the person the program asks us to identify has diabetes.","e448a7d6":"<a id = \"11\"><\/a><br>\n\n### Age - Outcome Relationship","48fc174a":"<a id = \"14\"><\/a><br>\n## Feature Engineering","5ca728b5":"#### there is no missing data in the data set\n","3dfdc5e8":"<a id = \"10\"><\/a><br>\n\n### DiabetesPedigreeFunction - Outcome Relationship","a4e3d7b4":"* According to the graphs, as the amount of glucose in the blood increases, the probability of having diabetes increases.","c7704d7a":"<a id = \"4\"><\/a><br>\n\n### Pregnancies - OutCome Relationship","685896b0":"* There is a large positive correlation between the number of pregnancies and age.\n\n* There is a positive correlation of 0.47 between the amount of glucose in the blood and the likelihood of having Diabetes.\n\n* \"Pregnancies\", \"BMI\", \"DiabetesPedigreeFunction\" and \"Age\" values \u200b\u200bare also positively associated with Diabetes status.","7ff9c63b":"### What do the columns in the data set mean?\n\n1. Pregnancies: Number of times pregnant\n\n1. Glucose: Plasma glucose concentration a 2 hours in an oral glucose tolerance test\n\n1. BloodPressure:Diastolic blood pressure (mm Hg)\n\n1. SkinThickness: Triceps skin fold thickness (mm)\n\n1. Insulin:2-Hour serum insulin (mu U\/ml)\n\n1. BMI:Body mass index (weight in kg\/(height in m)^2)\n\n1. DiabetesPedigreeFunction: Diabetes pedigree function\n\n1. Age: Age\n\n1. Outcome: Class variable (0 or 1) 268 of 768 are 1, the others are 0\n\n\n\n\n\n\n","a00264bc":"<a id = \"2\"><\/a><br>\n\n# Variable Description"}}