{"cell_type":{"130603a2":"code","e3042286":"code","447e7cbf":"code","a3d5e7e4":"code","25a7763c":"code","d24214d4":"code","2950be28":"code","01f32d21":"code","1670c1c2":"code","edd0a533":"code","b1e222bd":"code","0029acee":"code","fbc91656":"code","4d03694c":"code","ada528da":"code","8ac2cbc8":"code","55c15126":"code","eaf9dd79":"code","eb683b28":"code","d1ea2610":"code","884da778":"code","52b75ed7":"code","18f8b3cf":"code","7cc0a202":"code","779f493d":"markdown","4c3a173b":"markdown","b0df1e01":"markdown","42c0adc8":"markdown"},"source":{"130603a2":"# \uc2dc\ud5d8\ud658\uacbd \uc138\ud305 (\ucf54\ub4dc \ubcc0\uacbd X, \uc2dc\ud5d8\ud658\uacbd\uacfc \uc720\uc0ac\ud558\uac8c \ud30c\uc77c\uc77d\uae30 \uad6c\ud604)\nimport pandas as pd\ndf = pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test = train_test_split(df, test_size=0.2, shuffle=True, random_state=2021)\ny_train = X_train['Outcome']\nX_train = X_train.drop(columns=['Outcome'])\ny_test = X_test['Outcome']\nX_test = X_test.drop(columns=['Outcome'])\n\nX_train.shape, y_train.shape, X_test.shape, y_test.shape","e3042286":"# \ub77c\uc774\ube0c\ub7ec\ub9ac\nimport pandas as pd","447e7cbf":"# \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30 (\uc0dd\ub7b5)\nX_train.shape, y_train.shape, X_test.shape","a3d5e7e4":"#EDA\nX_train.head()","25a7763c":"y_train.head()","d24214d4":"X_train.info()","2950be28":"X_train.describe()","01f32d21":"# Pregnancies, SkinThickness, Insulin, DiabetesPedigreeFunction\n# \uc774\uc0c1\uce58\uac00 \uc788\ub294 \uac83\uc73c\ub85c \ubcf4\uc784","1670c1c2":"#\uacb0\uce21\uce58\uac00 0\uc73c\ub85c \ud45c\uae30\ub41c \uac83 \ud3c9\uade0\uac12 \ucc98\ub9ac\n#for column in X_train.columns:\n#    zero_count = len(X_train.loc[X_train[column] == 0, column])\n#    print(column, zero_count)\n#    if(zero_count == 0):\n#        continue\n#    \n#    column_mean = X_train[column].mean()\n#    X_train[column] = X_train[column].apply(lambda x: column_mean if x == 0 else x)","edd0a533":"#X_train.describe()","b1e222bd":"def DropOutlierViaIQR(column):\n    iqr = X_train[column].quantile(0.75) - X_train[column].quantile(0.25)\n    condi_low = ((X_train[column].quantile(0.25) - 1.5*iqr) <= X_train[column])\n    condi_upp = (X_train[column] <= (X_train[column].quantile(0.75) + 1.5*iqr))\n    X_train[column] = X_train.loc[condi_low & condi_upp, column]","0029acee":"# \uc774\uc0c1\uce58 \uc81c\uac70\nfor column in X_train.columns:\n    DropOutlierViaIQR(column)","fbc91656":"X_train.dropna(axis=0, inplace=True)\nX_train.info()","4d03694c":"y_train = y_train.loc[X_train.index]","ada528da":"from sklearn.preprocessing import StandardScaler, MinMaxScaler\nscaler = MinMaxScaler()\n\nX_train_scaled = scaler.fit_transform(X_train)\nX_train_scaled = pd.DataFrame(X_train_scaled, columns=X_train.columns, index=X_train.index)\n\nX_test_scaled = scaler.fit_transform(X_test)\nX_test_scaled = pd.DataFrame(X_test_scaled, columns=X_test.columns, index=X_test.index)","8ac2cbc8":"from sklearn.model_selection import train_test_split\nX_train_train, X_train_val, y_train_train, y_train_val = train_test_split(X_train_scaled, y_train,\n                                                                          stratify=y_train,\n                                                                          test_size=0.2, random_state=42)","55c15126":"from xgboost import XGBClassifier\nxgb_cla = XGBClassifier()\nxgb_cla.fit(X_train_train, y_train_train)\ny_val_predict = xgb_cla.predict(X_train_val)","eaf9dd79":"xgb_cla.score(X_train_val, y_train_val)","eb683b28":"#from sklearn.metrics import confusion_matrix, classification_report\n#confusion_matrix(y_train_val, y_val_predict)\n#print(classification_report(y_train_val, y_val_predict))","d1ea2610":"#from sklearn.model_selection import GridSearchCV\n#dict_param_grid = {'eta':[0.1, 0.3, 0.5]}\n#grid_cv = GridSearchCV(estimator=XGBClassifier(), param_grid=dict_param_grid)\n#grid_cv.fit(X_train_train, y_train_train)","884da778":"#grid_cv.best_params_","52b75ed7":"y_predict = xgb_cla.predict(X_test_scaled)","18f8b3cf":"df_result = pd.DataFrame({'idx':y_test.index, 'Outcome':y_predict})\ndf_result.to_csv('result.csv', index=False)","7cc0a202":"round(xgb_cla.score(X_test_scaled, y_test) * 100, 2) \n# MinMaxScaler\uac00 74, StandardScaler\uac00 72\ub85c \uc774\uc5d0 \ub530\ub77c \uacb0\uacfc\uac12\uc774 \ubcc0\ud558\ub2c8 \uc774\ub3c4 \ud655\uc778\ud558\uba74 \uc88b\ub2e4","779f493d":"## \ub77c\uc774\ube0c\ub7ec\ub9ac \ubc0f \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30","4c3a173b":"## Start","b0df1e01":"## \ub2f9\ub1e8\ubcd1 \uc5ec\ubd80 \ud310\ub2e8\n- \uc774\uc0c1\uce58 \ucc98\ub9ac (Glucose, BloodPressure, SkinThickness, Insulin, BMI\uac00 0\uc778 \uac12)","42c0adc8":"## [\ucc38\uace0]\uc791\uc5c5\ud6152 \ubb38\uad6c\n- \ucd9c\ub825\uc744 \uc6d0\ud558\uc2e4 \uacbd\uc6b0 print() \ud568\uc218 \ud65c\uc6a9\n- \uc608\uc2dc) print(df.head())\n- getcwd(), chdir() \ub4f1 \uc791\uc5c5 \ud3f4\ub354 \uc124\uc815 \ubd88\ud544\uc694\n- \ud30c\uc77c \uacbd\ub85c \uc0c1 \ub0b4\ubd80 \ub4dc\ub77c\uc774\ube0c \uacbd\ub85c(C: \ub4f1) \uc811\uadfc \ubd88\uac00\n\n### \ub370\uc774\ud130 \ud30c\uc77c \uc77d\uae30 \uc608\uc81c\n- import pandas as pd\n- X_test = pd.read_csv(\"data\/X_test.csv\")\n- X_train = pd.read_csv(\"data\/X_train.csv\")\n- y_train = pd.read_csv(\"data\/y_train.csv\")\n\n### \uc0ac\uc6a9\uc790 \ucf54\ub529\n\n### \ub2f5\uc548 \uc81c\ucd9c \ucc38\uace0\n- \uc544\ub798 \ucf54\ub4dc \uc608\uce21\ubcc0\uc218\uc640 \uc218\ud5d8\ubc88\ud638\ub97c \uac1c\uc778\ubcc4\ub85c \ubcc0\uacbd\ud558\uc5ec \ud65c\uc6a9\n- pd.DataFrame({'cust_id': X_test.cust_id, 'gender': pred}).to_csv('003000000.csv', index=False)"}}