{"cell_type":{"7ba0505d":"code","05a3b198":"code","39aa36f0":"code","ded162b5":"code","1c4aa974":"code","98fd5bf3":"code","80d4b76c":"code","b128f83f":"code","a29c14d0":"code","285475ea":"code","73eab57a":"code","17d0b6ec":"code","edb48317":"code","33799433":"code","293f2733":"code","121d2caa":"code","f4a462a5":"code","8d2f35e2":"code","01588116":"code","ce085c05":"code","81398857":"code","5a973bf3":"code","d6a49d37":"code","d7e809b1":"code","5e8a8883":"code","0c06c63c":"code","6101b103":"code","71cfee1f":"code","eb78a285":"code","85d158dc":"code","da2ef76c":"code","909a4ec6":"code","bbb4dc5f":"code","996d502b":"code","82d915ab":"code","44d24683":"code","26c91b4f":"code","2fc1fb3e":"code","424b4395":"code","d658d075":"code","0bd4c0c4":"code","2e887cb8":"code","a27b4ce5":"code","ab50bea1":"code","92b1e406":"code","70fb63e4":"code","bf54bbc0":"code","7be34ddf":"code","849aa22d":"code","dcd5dec8":"code","297a8fda":"code","319ba089":"code","5374683e":"code","7c8a81c2":"code","182c5b1d":"code","5ce500a9":"code","7d317cbf":"code","7650b99b":"code","41a2cb07":"code","724beb85":"code","cfe62a66":"code","5f0d2775":"code","22faeaba":"code","68822df7":"code","12e0257a":"code","5e4d1faf":"code","ba1d62df":"code","b8c3d2f4":"code","9a8ccf34":"code","38546bf6":"code","c6b55a27":"code","ac7767d3":"code","9938f68b":"code","952192c9":"code","caa9bb53":"code","e54ffc45":"code","383ec0bb":"code","2b93c729":"code","969a09d7":"code","ed47546d":"code","dad2b5a3":"code","aea936d7":"code","c7370a5f":"code","2bc976a2":"code","237e0c52":"code","a0f2e6f3":"code","fb4aa439":"code","a1ec78e3":"code","821aa021":"code","04b33f71":"code","1f08d2ab":"code","6b23d80e":"code","62b0b724":"code","94c94574":"code","01b44f78":"code","23af91c3":"code","6e358bad":"code","d2f775f4":"code","79e6e91c":"code","fd968843":"code","ceec24c0":"code","d9453df1":"code","3d262fb6":"code","43c4a3e6":"code","a7fd3aae":"code","fba12f29":"code","6b9c8bea":"code","8175f6b1":"code","7313725f":"code","bf55e439":"code","ba801221":"code","45f324f6":"code","c9506285":"markdown","64324fa4":"markdown","b232da37":"markdown","840e400e":"markdown","6ed7bd20":"markdown","f4fa0bd7":"markdown","88dd5b3f":"markdown","98234849":"markdown","7f58e12a":"markdown","12289020":"markdown","a73c80e0":"markdown","6f619cb1":"markdown","f43b6655":"markdown","137eefdb":"markdown"},"source":{"7ba0505d":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib import rcParams\nimport os\npd.set_option('display.max_columns', 500)\n%matplotlib inline\ncolor = sns.color_palette()\nsns.set_style('darkgrid')\nprint(os.listdir(\"..\/input\"))\nrcParams['figure.figsize'] = 10, 6\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error\nlbl = LabelEncoder()\npd.set_option('display.max_columns', 200)\n\npd.set_option('display.max_rows', 200)","05a3b198":"path = \"..\/input\"\ntrain_df  = pd.read_csv(path+'\/application_train.csv')\ntest_df = pd.read_csv(path+'\/application_test.csv')\nsample_submission = pd.read_csv(path+'\/sample_submission.csv')","39aa36f0":"train_df.shape","ded162b5":"train_df.head(5)","1c4aa974":"#train_df = train_df.sample(frac=0.05, random_state=10)","98fd5bf3":"train_df.loc[train_df['TARGET'] == 0, ['TARGET']].count()","80d4b76c":"train_df.loc[train_df['TARGET'] == 1, ['TARGET']].count()","b128f83f":"train_df.describe()","a29c14d0":"train_df['NAME_CONTRACT_TYPE'].unique()","285475ea":"train_df[[\"NAME_CONTRACT_TYPE\", \"TARGET\"]].groupby(['NAME_CONTRACT_TYPE'], as_index=False).sum().sort_values(by='TARGET', ascending=False)","73eab57a":"train_df[[\"NAME_CONTRACT_TYPE\", \"TARGET\"]].groupby(['NAME_CONTRACT_TYPE'], as_index=False).sum().sort_values(by='TARGET', ascending=False).plot(kind='bar')","17d0b6ec":"train_df['CNT_CHILDREN'].unique()","edb48317":"train_df[[\"CNT_CHILDREN\", \"TARGET\"]].groupby(['CNT_CHILDREN'], as_index=False).sum().sort_values(by='TARGET', ascending=False)","33799433":"train_df['NAME_INCOME_TYPE'].unique()","293f2733":"train_df[[\"NAME_INCOME_TYPE\", \"TARGET\"]].groupby(['NAME_INCOME_TYPE'], as_index=False).sum().sort_values(by='TARGET', ascending=False)","121d2caa":"print(pd.crosstab(train_df['NAME_INCOME_TYPE'], train_df['TARGET'], normalize='index'))\nsns.countplot(x='NAME_INCOME_TYPE', hue='TARGET', data=train_df, palette='hls')\nplt.xticks(rotation=45)\nplt.show()","f4a462a5":"train_df[[\"NAME_FAMILY_STATUS\", \"TARGET\"]].groupby(['NAME_FAMILY_STATUS'], as_index=False).sum().sort_values(by='TARGET', ascending=False)","8d2f35e2":"print(pd.crosstab(train_df['NAME_FAMILY_STATUS'], train_df['TARGET'], normalize='index'))\nsns.countplot(x='NAME_FAMILY_STATUS', hue='TARGET', data=train_df, palette='hls')\nplt.xticks(rotation=45)\nplt.show()","01588116":"train_df['NAME_HOUSING_TYPE'].unique()","ce085c05":"train_df[[\"NAME_HOUSING_TYPE\", \"TARGET\"]].groupby(['NAME_HOUSING_TYPE'], as_index=False).sum().sort_values(by='TARGET', ascending=False)","81398857":"print(pd.crosstab(train_df['NAME_HOUSING_TYPE'], train_df['TARGET'], normalize='index'))\nsns.countplot(x='NAME_HOUSING_TYPE', hue='TARGET', data=train_df, palette='hls')\nplt.xticks(rotation=45)\nplt.show()","5a973bf3":"print(pd.crosstab(train_df['NAME_EDUCATION_TYPE'], train_df['TARGET'], normalize='index'))\nsns.countplot(x='NAME_EDUCATION_TYPE', hue='TARGET', data=train_df, palette='hls')\nplt.xticks(rotation=45)\nplt.show()","d6a49d37":"train_df['OCCUPATION_TYPE'].unique()","d7e809b1":"train_df[[\"OCCUPATION_TYPE\", \"TARGET\"]].groupby(['OCCUPATION_TYPE'], as_index=False).sum().sort_values(by='TARGET', ascending=False)","5e8a8883":"train_df['HOUSETYPE_MODE'].unique()","0c06c63c":"train_df[[\"HOUSETYPE_MODE\", \"TARGET\"]].groupby(['HOUSETYPE_MODE'], as_index=False).sum().sort_values(by='TARGET', ascending=False)","6101b103":"train_df['ORGANIZATION_TYPE'].unique()","71cfee1f":" #   a = pd.DataFrame(0, index=np.arange(len(train_df)), columns=['docs'])","eb78a285":"train_df['docs'] = pd.DataFrame(0, index=np.arange(len(train_df)), columns=['docs'])\nfor i in range(2, 21):\n    cols_name = 'FLAG_DOCUMENT_'+str(i)\n    #train_df[cols_name][0:5]\n    train_df['docs'] = train_df['docs']+train_df[cols_name]","85d158dc":"train_df.head(5)","da2ef76c":"train_df['AMT_INCOME_TOTAL'].apply(np.log).plot(kind='hist', bins=50) \nplt.show()","909a4ec6":"train_df['AMT_CREDIT'].apply(np.log).plot(kind='hist', bins=50) \nplt.show()","bbb4dc5f":"train_df['AMT_ANNUITY'].apply(np.log).plot(kind='hist', bins=50) \nplt.show()","996d502b":"train_df['AMT_GOODS_PRICE'].apply(np.log).plot(kind='hist', bins=50) \nplt.show()","82d915ab":"props = train_df.groupby(\"HOUSETYPE_MODE\")['TARGET'].value_counts(normalize=True).unstack()\nprops.plot(kind='bar', stacked='True', rot=45)\nplt.show()","44d24683":"props = train_df.groupby(\"OCCUPATION_TYPE\")['TARGET'].value_counts(normalize=True).unstack()\nprops.plot(kind='bar', stacked='True', rot=45,figsize=[12,6])\nplt.show()","26c91b4f":"props = train_df.groupby(\"NAME_INCOME_TYPE\")['TARGET'].value_counts(normalize=True).unstack()\nprops.plot(kind='bar', stacked='True', rot=45)\nplt.show()","2fc1fb3e":"props = train_df.groupby(\"NAME_FAMILY_STATUS\")['TARGET'].value_counts(normalize=True).unstack()\nprops.plot(kind='bar', stacked='True', rot=45)\nplt.show()","424b4395":"f, axes = plt.subplots(1, 3, figsize=(12, 6))\nsns.countplot(x='TARGET', data=train_df, ax=axes[0])\nsns.countplot(x='HOUSETYPE_MODE', hue='TARGET', data=train_df, ax=axes[1] )\nsns.countplot(x='NAME_FAMILY_STATUS', hue='TARGET', data=train_df, ax=axes[2])\n\nplt.tight_layout()","d658d075":"print(pd.crosstab(train_df['FLAG_MOBIL'], train_df['TARGET']))","0bd4c0c4":"print(pd.crosstab(train_df['FLAG_EMAIL'], train_df['TARGET']))\nsns.countplot(x='FLAG_EMAIL', hue='TARGET', data=train_df, palette='hls')","2e887cb8":"Mob_Loc = train_df.columns.get_loc('FLAG_MOBIL')\nEmail_Loc = train_df.columns.get_loc('FLAG_EMAIL')\n\ntrain_df.iloc[:,Mob_Loc:Email_Loc+1].head(5)","a27b4ce5":"print(pd.crosstab(train_df['FLAG_EMP_PHONE'], train_df['TARGET']))\nsns.countplot(x='FLAG_EMP_PHONE', hue='TARGET', data=train_df, palette='hls')","ab50bea1":"print(pd.crosstab(train_df['FLAG_WORK_PHONE'], train_df['TARGET']))\nsns.countplot(x='FLAG_WORK_PHONE', hue='TARGET', data=train_df, palette='hls')","92b1e406":"print(pd.crosstab(train_df['FLAG_CONT_MOBILE'], train_df['TARGET']))\nsns.countplot(x='FLAG_CONT_MOBILE', hue='TARGET', data=train_df, palette='hls')","70fb63e4":"print(pd.crosstab(train_df['FLAG_PHONE'], train_df['TARGET']))\nsns.countplot(x='FLAG_PHONE', hue='TARGET', data=train_df, palette='hls')","bf54bbc0":"del train_df['FLAG_MOBIL']\ndel test_df['FLAG_MOBIL']","7be34ddf":"del train_df['WEEKDAY_APPR_PROCESS_START']\ndel train_df['HOUR_APPR_PROCESS_START']\n\ndel test_df['WEEKDAY_APPR_PROCESS_START']\ndel test_df['HOUR_APPR_PROCESS_START']","849aa22d":"train_df.head(5)","dcd5dec8":"print(pd.crosstab(train_df['docs'], train_df['TARGET']))\nsns.countplot(x='docs', hue='TARGET', data=train_df, palette='hls')","297a8fda":"train_df['DAYS_BIRTH'] = np.ceil(train_df['DAYS_BIRTH']\/365)\ntrain_df['Age'] = train_df['DAYS_BIRTH'].abs()","319ba089":"test_df['DAYS_BIRTH'] = np.ceil(test_df['DAYS_BIRTH']\/365)\ntest_df['Age'] = test_df['DAYS_BIRTH'].abs()","5374683e":"train_df['DAYS_LAST_PHONE_CHANGE'] = np.ceil(train_df['DAYS_LAST_PHONE_CHANGE']\/365)\ntrain_df['Mob_change'] = train_df['DAYS_LAST_PHONE_CHANGE'].abs()\ntest_df['DAYS_LAST_PHONE_CHANGE'] = np.ceil(test_df['DAYS_LAST_PHONE_CHANGE']\/365)\ntest_df['Mob_change'] = test_df['DAYS_LAST_PHONE_CHANGE'].abs()","7c8a81c2":"del train_df['DAYS_BIRTH']","182c5b1d":"\ndel test_df['DAYS_BIRTH']","5ce500a9":"train_df.head(5)","7d317cbf":"age_target_zero = train_df[(train_df['Age'] > 0) & (train_df['TARGET'] == 0)]\n\nage_target_one = train_df[(train_df['Age'] > 0) & (train_df['TARGET'] == 1)]\n\nsns.distplot(age_target_zero['Age'], bins =24, color='g')\nsns.distplot(age_target_one['Age'], bins =24, color='r')","7650b99b":"g = sns.FacetGrid(train_df, col='TARGET', size=5)\ng = g.map(sns.distplot, 'Age')\nplt.show()","41a2cb07":"print(pd.crosstab(train_df['REGION_RATING_CLIENT'], train_df['TARGET']))\nsns.countplot(x='REGION_RATING_CLIENT', hue='TARGET', data=train_df)\nplt.show()","724beb85":"print(pd.crosstab(train_df['REGION_RATING_CLIENT_W_CITY'], train_df['TARGET']))\nsns.countplot(x='REGION_RATING_CLIENT_W_CITY', hue='TARGET', data=train_df)\nplt.show()","cfe62a66":"print(pd.crosstab(train_df['REG_REGION_NOT_LIVE_REGION'], train_df['TARGET']))\nsns.countplot(x='REG_REGION_NOT_LIVE_REGION', hue='TARGET', data=train_df)\nplt.show()","5f0d2775":"print(pd.crosstab(train_df['REG_REGION_NOT_WORK_REGION'], train_df['TARGET']))\nsns.countplot(x='REG_REGION_NOT_WORK_REGION', hue='TARGET', data=train_df)\nplt.show()","22faeaba":"train_df.head(5)","68822df7":"print(pd.crosstab(train_df['REG_CITY_NOT_LIVE_CITY'], train_df['TARGET']))\nsns.countplot(x='REG_CITY_NOT_LIVE_CITY', hue='TARGET', data=train_df)\nplt.show()","12e0257a":"print(pd.crosstab(train_df['REG_CITY_NOT_WORK_CITY'], train_df['TARGET']))\nsns.countplot(x='REG_CITY_NOT_WORK_CITY', hue='TARGET', data=train_df)\nplt.show()","5e4d1faf":"print(pd.crosstab(train_df['LIVE_CITY_NOT_WORK_CITY'], train_df['TARGET']))\nsns.countplot(x='LIVE_CITY_NOT_WORK_CITY', hue='TARGET', data=train_df)\nplt.show()","ba1d62df":"group = pd.DataFrame()\ngroup['Orgtype_count'] =train_df.groupby(['ORGANIZATION_TYPE'])['ORGANIZATION_TYPE'].count()\ngroup['Orgtype_index'] = group.index\n\ngroup_top = group.sort_values(by='Orgtype_count', ascending=False).head(15)\nplt.figure(figsize=(25, 10))\nsns.barplot(x='Orgtype_index', y='Orgtype_count', data=group_top)\nplt.xlabel('ORGANIZATION TYPE')\nplt.ylabel('Number of Organization')\nplt.xticks(rotation=45)\nplt.tight_layout()","b8c3d2f4":"f, axes = plt.subplots(3, 1, figsize=(12, 6))\nc1 = sns.distplot(train_df.loc[(train_df['EXT_SOURCE_1'] >0) & (train_df['TARGET'] == 1),['EXT_SOURCE_1']], kde = True, color='g', ax=axes[0],bins=50)\nc1a = sns.distplot(train_df.loc[(train_df['EXT_SOURCE_1'] >0)& (train_df['TARGET'] == 0),['EXT_SOURCE_1']], kde = True, color='r', ax=axes[0],bins=50)\n\nc2 = sns.distplot(train_df.loc[(train_df['EXT_SOURCE_2'] >0) & (train_df['TARGET'] == 1), ['EXT_SOURCE_2']], kde=True, color='g', ax=axes[1],bins=50)\nc2a = sns.distplot(train_df.loc[(train_df['EXT_SOURCE_2'] >0) & (train_df['TARGET'] == 0), ['EXT_SOURCE_2']], kde=True, color='r', ax=axes[1],bins=50)\n\nc3 = sns.distplot(train_df.loc[(train_df['EXT_SOURCE_3'] >0) & (train_df['TARGET'] == 1), ['EXT_SOURCE_3']], kde=True, color='g', ax=axes[2],bins=50)\nc3a = sns.distplot(train_df.loc[(train_df['EXT_SOURCE_3'] >0)& (train_df['TARGET'] == 0), ['EXT_SOURCE_3']], kde=True,  color='r', ax=axes[2],bins=50)","9a8ccf34":"train_df.head()","38546bf6":"f, axes = plt.subplots(16, 1, figsize=(12, 50))\nc1 = sns.distplot(train_df.loc[(train_df['APARTMENTS_AVG'] >0) & (train_df['TARGET'] == 1),['APARTMENTS_AVG']], color='g' ,kde = True, ax=axes[0],bins=50)\nc1a = sns.distplot(train_df.loc[(train_df['APARTMENTS_AVG'] >0) & (train_df['TARGET'] == 0),['APARTMENTS_AVG']], color='r', kde = True, ax=axes[0],bins=50)\n\n\nc2 = sns.distplot(train_df.loc[(train_df['BASEMENTAREA_AVG'] >0) & (train_df['TARGET'] == 1),['BASEMENTAREA_AVG']], kde=True, color='g', ax=axes[1],bins=50)\nc2a = sns.distplot(train_df.loc[(train_df['BASEMENTAREA_AVG'] >0) & (train_df['TARGET'] == 0),['BASEMENTAREA_AVG']], kde=True, color='r', ax=axes[1],bins=50)\n\nc3 = sns.distplot(train_df.loc[(train_df['YEARS_BEGINEXPLUATATION_AVG'] >0) & (train_df['TARGET'] == 1),['YEARS_BEGINEXPLUATATION_AVG']], color='g', kde=True, ax=axes[2],bins=50)\nc3a = sns.distplot(train_df.loc[(train_df['YEARS_BEGINEXPLUATATION_AVG'] >0) & (train_df['TARGET'] == 0),['YEARS_BEGINEXPLUATATION_AVG']], color='r', kde=True, ax=axes[2],bins=50)\n\nc4 = sns.distplot(train_df.loc[(train_df['YEARS_BUILD_AVG'] >0) & (train_df['TARGET'] == 1),['YEARS_BUILD_AVG']], kde=True,color='g', ax=axes[3],bins=50)\nc4a = sns.distplot(train_df.loc[(train_df['YEARS_BUILD_AVG'] >0) & (train_df['TARGET'] == 0),['YEARS_BUILD_AVG']], kde=True, color='r', ax=axes[3],bins=50)\n\nc5 = sns.distplot(train_df.loc[(train_df['COMMONAREA_AVG'] >0) & (train_df['TARGET'] == 1), ['COMMONAREA_AVG']], kde=True, color='g', ax=axes[4],bins=50)\nc5a = sns.distplot(train_df.loc[(train_df['COMMONAREA_AVG'] >0)& (train_df['TARGET'] == 0), ['COMMONAREA_AVG']], kde=True, color='r', ax=axes[4],bins=50)\n\nc6 = sns.distplot(train_df.loc[(train_df['ELEVATORS_AVG'] >0)& (train_df['TARGET'] == 1), ['ELEVATORS_AVG']], kde=True, color='g', ax=axes[5],bins=50)\nc6a = sns.distplot(train_df.loc[(train_df['ELEVATORS_AVG'] >0)& (train_df['TARGET'] == 0), ['ELEVATORS_AVG']], kde=True, color='r', ax=axes[5],bins=50)\n\nc7 = sns.distplot(train_df.loc[(train_df['ENTRANCES_AVG'] >0)& (train_df['TARGET'] == 1),['ENTRANCES_AVG']], kde=True, color='g', ax=axes[6],bins=50)\nc7a = sns.distplot(train_df.loc[(train_df['ENTRANCES_AVG'] >0)& (train_df['TARGET'] == 0),['ENTRANCES_AVG']], kde=True, color='r', ax=axes[6],bins=50)\n\nc8 = sns.distplot(train_df.loc[(train_df['FLOORSMAX_AVG'] >0)& (train_df['TARGET'] == 1),['FLOORSMAX_AVG']], kde=True, color='g', ax=axes[7],bins=50)\nc8a = sns.distplot(train_df.loc[(train_df['FLOORSMAX_AVG'] >0)& (train_df['TARGET'] == 0),['FLOORSMAX_AVG']], kde=True, color='r', ax=axes[7],bins=50)\n\nc9 = sns.distplot(train_df.loc[(train_df['FLOORSMIN_AVG'] >0)& (train_df['TARGET'] == 1),['FLOORSMIN_AVG']], kde=True, color='g', ax=axes[8],bins=50)\nc9a = sns.distplot(train_df.loc[(train_df['FLOORSMIN_AVG'] >0)& (train_df['TARGET'] == 0),['FLOORSMIN_AVG']], kde=True, color='r', ax=axes[8],bins=50)\n\nc10 = sns.distplot(train_df.loc[(train_df['LANDAREA_AVG'] >0)& (train_df['TARGET'] == 1),['LANDAREA_AVG']], kde=True, color='g', ax=axes[9],bins=50)\nc10a = sns.distplot(train_df.loc[(train_df['LANDAREA_AVG'] >0)& (train_df['TARGET'] == 0),['LANDAREA_AVG']], kde=True, color='r',  ax=axes[9],bins=50)\n\nc11 = sns.distplot(train_df.loc[(train_df['LIVINGAPARTMENTS_AVG'] >0)& (train_df['TARGET'] == 1),['LIVINGAPARTMENTS_AVG']], kde=True,color='g', ax=axes[10],bins=50)\nc11a = sns.distplot(train_df.loc[(train_df['LIVINGAPARTMENTS_AVG'] >0)& (train_df['TARGET'] == 0),['LIVINGAPARTMENTS_AVG']], kde=True,color='r', ax=axes[10],bins=50)\n\n\nc12 = sns.distplot(train_df.loc[(train_df['LIVINGAREA_AVG'] >0)& (train_df['TARGET'] == 1),['LIVINGAREA_AVG']], kde=True, color='g', ax=axes[11],bins=50)\nc12a = sns.distplot(train_df.loc[(train_df['LIVINGAREA_AVG'] >0)& (train_df['TARGET'] == 0),['LIVINGAREA_AVG']], kde=True, color='r', ax=axes[11],bins=50)\n\nc13 = sns.distplot(train_df.loc[(train_df['NONLIVINGAPARTMENTS_AVG'] >0)& (train_df['TARGET'] == 1),['NONLIVINGAPARTMENTS_AVG']], kde=True, color='g', ax=axes[12],bins=50)\nc13a = sns.distplot(train_df.loc[(train_df['NONLIVINGAPARTMENTS_AVG'] >0)& (train_df['TARGET'] == 0),['NONLIVINGAPARTMENTS_AVG']], kde=True, color='r', ax=axes[12],bins=50)\n\nc14 = sns.distplot(train_df.loc[(train_df['NONLIVINGAREA_AVG'] >0)& (train_df['TARGET'] == 1),['NONLIVINGAREA_AVG']], kde=True,color='g', ax=axes[13],bins=50)\nc14a = sns.distplot(train_df.loc[(train_df['NONLIVINGAREA_AVG'] >0)& (train_df['TARGET'] == 0),['NONLIVINGAREA_AVG']], kde=True,  color='r',ax=axes[13],bins=50)\n\nc15 = sns.distplot(train_df.loc[(train_df['LIVINGAPARTMENTS_AVG'] >0)& (train_df['TARGET'] == 1),['LIVINGAPARTMENTS_AVG']], kde=True,color='g', ax=axes[14],bins=50)\nc15a = sns.distplot(train_df.loc[(train_df['LIVINGAPARTMENTS_AVG'] >0)& (train_df['TARGET'] == 0),['LIVINGAPARTMENTS_AVG']], kde=True,  color='r',ax=axes[14],bins=50)\n\nc16 = sns.distplot(train_df.loc[(train_df['LIVINGAREA_AVG'] >0)& (train_df['TARGET'] == 1),['LIVINGAREA_AVG']], kde=True, color='g',ax=axes[15],bins=50)\nc16a = sns.distplot(train_df.loc[(train_df['LIVINGAREA_AVG'] >0)& (train_df['TARGET'] == 0),['LIVINGAREA_AVG']], kde=True,  color='r', ax=axes[15],bins=50)","c6b55a27":"train_df.loc[:,train_df.dtypes =='object'].columns","ac7767d3":"train_df['WALLSMATERIAL_MODE'].unique()","9938f68b":"train_df['EMERGENCYSTATE_MODE'].unique()","952192c9":"print(pd.crosstab(train_df['WALLSMATERIAL_MODE'], train_df['TARGET']))\nsns.countplot(x='WALLSMATERIAL_MODE', hue='TARGET', data=train_df)\nplt.xticks(rotation=45)\nplt.show()","caa9bb53":"print(pd.crosstab(train_df['EMERGENCYSTATE_MODE'], train_df['TARGET']))\nsns.countplot(x='EMERGENCYSTATE_MODE', hue='TARGET', data=train_df)\nplt.xticks(rotation=45)\nplt.show()","e54ffc45":"train_df.head(5)","383ec0bb":"null_values = pd.DataFrame({'col_names':pd.isnull(train_df).sum().index,'col_count':pd.isnull(train_df).sum().values}) \n","2b93c729":"print('Total {} columns hava a null values.'.format(null_values.loc[null_values['col_count'] > 0, ].shape[0]))","969a09d7":"null_values.loc[null_values['col_count'] > 0, ].sort_values(by='col_count', ascending=False)","ed47546d":"train_df.shape","dad2b5a3":"train_df['AMT_REQ_CREDIT_BUREAU_YEAR'].fillna(train_df['AMT_REQ_CREDIT_BUREAU_YEAR'].min(), inplace=True)\ntrain_df['AMT_REQ_CREDIT_BUREAU_QRT'].fillna(train_df['AMT_REQ_CREDIT_BUREAU_QRT'].min(), inplace=True)\ntrain_df['AMT_REQ_CREDIT_BUREAU_MON'].fillna(train_df['AMT_REQ_CREDIT_BUREAU_MON'].min(), inplace=True)\n\ntrain_df['AMT_REQ_CREDIT_BUREAU_WEEK'].fillna(train_df['AMT_REQ_CREDIT_BUREAU_WEEK'].min(), inplace=True)\ntrain_df['AMT_REQ_CREDIT_BUREAU_DAY'].fillna(train_df['AMT_REQ_CREDIT_BUREAU_DAY'].min(), inplace=True)\ntrain_df['AMT_REQ_CREDIT_BUREAU_HOUR'].fillna(train_df['AMT_REQ_CREDIT_BUREAU_HOUR'].min(), inplace=True)\n\n\ntrain_df['EXT_SOURCE_3'].fillna(train_df['EXT_SOURCE_3'].min(), inplace=True)\ntrain_df['TOTALAREA_MODE'].fillna(train_df['TOTALAREA_MODE'].min(), inplace=True)\ntrain_df['YEARS_BEGINEXPLUATATION_AVG'].fillna(train_df['YEARS_BEGINEXPLUATATION_AVG'].min(), inplace=True)\ntrain_df['YEARS_BEGINEXPLUATATION_MODE'].fillna(train_df['YEARS_BEGINEXPLUATATION_MODE'].min(), inplace=True)\n\ntrain_df['FLOORSMAX_AVG'].fillna(train_df['FLOORSMAX_AVG'].min(), inplace=True)\ntrain_df['FLOORSMAX_MODE'].fillna(train_df['FLOORSMAX_MODE'].min(), inplace=True)\ntrain_df['FLOORSMAX_MEDI'].fillna(train_df['FLOORSMAX_MEDI'].min(), inplace=True)\n\ntrain_df['LIVINGAREA_AVG'].fillna(train_df['LIVINGAREA_AVG'].min(), inplace=True)\ntrain_df['LIVINGAREA_MODE'].fillna(train_df['LIVINGAREA_MODE'].min(), inplace=True)\ntrain_df['LIVINGAREA_MEDI'].fillna(train_df['LIVINGAREA_MEDI'].min(), inplace=True)\n\ntrain_df['ENTRANCES_MODE'].fillna(train_df['ENTRANCES_MODE'].min(), inplace=True)\ntrain_df['ENTRANCES_MEDI'].fillna(train_df['ENTRANCES_MEDI'].min(), inplace=True)\ntrain_df['ENTRANCES_AVG'].fillna(train_df['ENTRANCES_AVG'].min(), inplace=True)\n\ntrain_df['APARTMENTS_AVG'].fillna(train_df['APARTMENTS_AVG'].min(), inplace=True)\ntrain_df['APARTMENTS_MEDI'].fillna(train_df['APARTMENTS_MEDI'].min(), inplace=True)\ntrain_df['APARTMENTS_MODE'].fillna(train_df['APARTMENTS_MODE'].min(), inplace=True)\n\ntrain_df['ELEVATORS_AVG'].fillna(train_df['ELEVATORS_AVG'].min(), inplace=True)\ntrain_df['ELEVATORS_MODE'].fillna(train_df['ELEVATORS_MODE'].min(), inplace=True)\ntrain_df['ELEVATORS_MEDI'].fillna(train_df['ELEVATORS_MEDI'].min(), inplace=True)\n\ntrain_df['NONLIVINGAREA_AVG'].fillna(train_df['NONLIVINGAREA_AVG'].min(), inplace=True)\ntrain_df['NONLIVINGAREA_MODE'].fillna(train_df['NONLIVINGAREA_MODE'].min(), inplace=True)\ntrain_df['NONLIVINGAREA_MEDI'].fillna(train_df['NONLIVINGAREA_MEDI'].min(), inplace=True)\n\ntrain_df['BASEMENTAREA_AVG'].fillna(train_df['BASEMENTAREA_AVG'].min(), inplace=True)\ntrain_df['BASEMENTAREA_MEDI'].fillna(train_df['BASEMENTAREA_MEDI'].min(), inplace=True)\ntrain_df['BASEMENTAREA_MODE'].fillna(train_df['BASEMENTAREA_MODE'].min(), inplace=True)\n\ntrain_df['LANDAREA_MODE'].fillna(train_df['LANDAREA_MODE'].min(), inplace=True)\ntrain_df['LANDAREA_AVG'].fillna(train_df['LANDAREA_AVG'].min(), inplace=True)\ntrain_df['LANDAREA_MEDI'].fillna(train_df['LANDAREA_MEDI'].min(), inplace=True)\n\n\ntrain_df['YEARS_BUILD_MEDI'].fillna(train_df['YEARS_BUILD_MEDI'].min(), inplace=True)\ntrain_df['YEARS_BUILD_AVG'].fillna(train_df['YEARS_BUILD_AVG'].min(), inplace=True)\ntrain_df['YEARS_BUILD_MODE'].fillna(train_df['YEARS_BUILD_MODE'].min(), inplace=True)\n\n\ntrain_df['FLOORSMIN_MODE'].fillna(train_df['FLOORSMIN_MODE'].min(), inplace=True)\ntrain_df['FLOORSMIN_AVG'].fillna(train_df['FLOORSMIN_AVG'].min(), inplace=True)\ntrain_df['FLOORSMIN_MEDI'].fillna(train_df['FLOORSMIN_MEDI'].min(), inplace=True)\n\n\ntrain_df['LIVINGAPARTMENTS_MODE'].fillna(train_df['LIVINGAPARTMENTS_MODE'].min(), inplace=True)\ntrain_df['LIVINGAPARTMENTS_AVG'].fillna(train_df['LIVINGAPARTMENTS_AVG'].min(), inplace=True)\ntrain_df['LIVINGAPARTMENTS_MEDI'].fillna(train_df['LIVINGAPARTMENTS_MEDI'].min(), inplace=True)\n\n\ntrain_df['NONLIVINGAPARTMENTS_MODE'].fillna(train_df['NONLIVINGAPARTMENTS_MODE'].min(), inplace=True)\ntrain_df['NONLIVINGAPARTMENTS_AVG'].fillna(train_df['NONLIVINGAPARTMENTS_AVG'].min(), inplace=True)\ntrain_df['NONLIVINGAPARTMENTS_MEDI'].fillna(train_df['NONLIVINGAPARTMENTS_MEDI'].min(), inplace=True)\n\ntrain_df['COMMONAREA_AVG'].fillna(train_df['COMMONAREA_AVG'].min(), inplace=True)\ntrain_df['COMMONAREA_MODE'].fillna(train_df['COMMONAREA_MODE'].min(), inplace=True)\ntrain_df['COMMONAREA_MEDI'].fillna(train_df['COMMONAREA_MEDI'].min(), inplace=True)\n\ntrain_df['OWN_CAR_AGE'].fillna(train_df['OWN_CAR_AGE'].min(), inplace=True)\ntrain_df['EXT_SOURCE_1'].fillna(train_df['EXT_SOURCE_1'].min(), inplace=True)\n\ntrain_df['YEARS_BEGINEXPLUATATION_MEDI'].fillna(train_df['YEARS_BEGINEXPLUATATION_MEDI'].min(), inplace=True)\n\ntrain_df['AMT_ANNUITY'].fillna(train_df['AMT_ANNUITY'].min(), inplace=True)\ntrain_df['CNT_FAM_MEMBERS'].fillna(train_df['CNT_FAM_MEMBERS'].min(), inplace=True)","aea936d7":"test_df['AMT_REQ_CREDIT_BUREAU_YEAR'].fillna(test_df['AMT_REQ_CREDIT_BUREAU_YEAR'].min(), inplace=True)\ntest_df['AMT_REQ_CREDIT_BUREAU_QRT'].fillna(test_df['AMT_REQ_CREDIT_BUREAU_QRT'].min(), inplace=True)\ntest_df['AMT_REQ_CREDIT_BUREAU_MON'].fillna(test_df['AMT_REQ_CREDIT_BUREAU_MON'].min(), inplace=True)\n\ntest_df['AMT_REQ_CREDIT_BUREAU_WEEK'].fillna(test_df['AMT_REQ_CREDIT_BUREAU_WEEK'].min(), inplace=True)\ntest_df['AMT_REQ_CREDIT_BUREAU_DAY'].fillna(test_df['AMT_REQ_CREDIT_BUREAU_DAY'].min(), inplace=True)\ntest_df['AMT_REQ_CREDIT_BUREAU_HOUR'].fillna(test_df['AMT_REQ_CREDIT_BUREAU_HOUR'].min(), inplace=True)\n\n\ntest_df['EXT_SOURCE_3'].fillna(test_df['EXT_SOURCE_3'].min(), inplace=True)\ntest_df['TOTALAREA_MODE'].fillna(test_df['TOTALAREA_MODE'].min(), inplace=True)\ntest_df['YEARS_BEGINEXPLUATATION_AVG'].fillna(test_df['YEARS_BEGINEXPLUATATION_AVG'].min(), inplace=True)\ntest_df['YEARS_BEGINEXPLUATATION_MODE'].fillna(test_df['YEARS_BEGINEXPLUATATION_MODE'].min(), inplace=True)\n\ntest_df['FLOORSMAX_AVG'].fillna(test_df['FLOORSMAX_AVG'].min(), inplace=True)\ntest_df['FLOORSMAX_MODE'].fillna(test_df['FLOORSMAX_MODE'].min(), inplace=True)\ntest_df['FLOORSMAX_MEDI'].fillna(test_df['FLOORSMAX_MEDI'].min(), inplace=True)\n\ntest_df['LIVINGAREA_AVG'].fillna(test_df['LIVINGAREA_AVG'].min(), inplace=True)\ntest_df['LIVINGAREA_MODE'].fillna(test_df['LIVINGAREA_MODE'].min(), inplace=True)\ntest_df['LIVINGAREA_MEDI'].fillna(test_df['LIVINGAREA_MEDI'].min(), inplace=True)\n\ntest_df['ENTRANCES_MODE'].fillna(test_df['ENTRANCES_MODE'].min(), inplace=True)\ntest_df['ENTRANCES_MEDI'].fillna(test_df['ENTRANCES_MEDI'].min(), inplace=True)\ntest_df['ENTRANCES_AVG'].fillna(test_df['ENTRANCES_AVG'].min(), inplace=True)\n\ntest_df['APARTMENTS_AVG'].fillna(test_df['APARTMENTS_AVG'].min(), inplace=True)\ntest_df['APARTMENTS_MEDI'].fillna(test_df['APARTMENTS_MEDI'].min(), inplace=True)\ntest_df['APARTMENTS_MODE'].fillna(test_df['APARTMENTS_MODE'].min(), inplace=True)\n\ntest_df['ELEVATORS_AVG'].fillna(test_df['ELEVATORS_AVG'].min(), inplace=True)\ntest_df['ELEVATORS_MODE'].fillna(test_df['ELEVATORS_MODE'].min(), inplace=True)\ntest_df['ELEVATORS_MEDI'].fillna(test_df['ELEVATORS_MEDI'].min(), inplace=True)\n\ntest_df['NONLIVINGAREA_AVG'].fillna(test_df['NONLIVINGAREA_AVG'].min(), inplace=True)\ntest_df['NONLIVINGAREA_MODE'].fillna(test_df['NONLIVINGAREA_MODE'].min(), inplace=True)\ntest_df['NONLIVINGAREA_MEDI'].fillna(test_df['NONLIVINGAREA_MEDI'].min(), inplace=True)\n\ntest_df['BASEMENTAREA_AVG'].fillna(test_df['BASEMENTAREA_AVG'].min(), inplace=True)\ntest_df['BASEMENTAREA_MEDI'].fillna(test_df['BASEMENTAREA_MEDI'].min(), inplace=True)\ntest_df['BASEMENTAREA_MODE'].fillna(test_df['BASEMENTAREA_MODE'].min(), inplace=True)\n\ntest_df['LANDAREA_MODE'].fillna(test_df['LANDAREA_MODE'].min(), inplace=True)\ntest_df['LANDAREA_AVG'].fillna(test_df['LANDAREA_AVG'].min(), inplace=True)\ntest_df['LANDAREA_MEDI'].fillna(test_df['LANDAREA_MEDI'].min(), inplace=True)\n\n\ntest_df['YEARS_BUILD_MEDI'].fillna(test_df['YEARS_BUILD_MEDI'].min(), inplace=True)\ntest_df['YEARS_BUILD_AVG'].fillna(test_df['YEARS_BUILD_AVG'].min(), inplace=True)\ntest_df['YEARS_BUILD_MODE'].fillna(test_df['YEARS_BUILD_MODE'].min(), inplace=True)\n\n\ntest_df['FLOORSMIN_MODE'].fillna(test_df['FLOORSMIN_MODE'].min(), inplace=True)\ntest_df['FLOORSMIN_AVG'].fillna(test_df['FLOORSMIN_AVG'].min(), inplace=True)\ntest_df['FLOORSMIN_MEDI'].fillna(test_df['FLOORSMIN_MEDI'].min(), inplace=True)\n\n\ntest_df['LIVINGAPARTMENTS_MODE'].fillna(test_df['LIVINGAPARTMENTS_MODE'].min(), inplace=True)\ntest_df['LIVINGAPARTMENTS_AVG'].fillna(test_df['LIVINGAPARTMENTS_AVG'].min(), inplace=True)\ntest_df['LIVINGAPARTMENTS_MEDI'].fillna(test_df['LIVINGAPARTMENTS_MEDI'].min(), inplace=True)\n\n\ntest_df['NONLIVINGAPARTMENTS_MODE'].fillna(test_df['NONLIVINGAPARTMENTS_MODE'].min(), inplace=True)\ntest_df['NONLIVINGAPARTMENTS_AVG'].fillna(test_df['NONLIVINGAPARTMENTS_AVG'].min(), inplace=True)\ntest_df['NONLIVINGAPARTMENTS_MEDI'].fillna(test_df['NONLIVINGAPARTMENTS_MEDI'].min(), inplace=True)\n\ntest_df['COMMONAREA_AVG'].fillna(test_df['COMMONAREA_AVG'].min(), inplace=True)\ntest_df['COMMONAREA_MODE'].fillna(test_df['COMMONAREA_MODE'].min(), inplace=True)\ntest_df['COMMONAREA_MEDI'].fillna(test_df['COMMONAREA_MEDI'].min(), inplace=True)\n\n\ntest_df['OWN_CAR_AGE'].fillna(test_df['OWN_CAR_AGE'].min(), inplace=True)\n\ntest_df['EXT_SOURCE_1'].fillna(test_df['EXT_SOURCE_1'].min(), inplace=True)\n\ntest_df['YEARS_BEGINEXPLUATATION_MEDI'].fillna(test_df['YEARS_BEGINEXPLUATATION_MEDI'].min(), inplace=True)\n\ntest_df['AMT_ANNUITY'].fillna(test_df['AMT_ANNUITY'].min(), inplace=True)\ntest_df['CNT_FAM_MEMBERS'].fillna(test_df['CNT_FAM_MEMBERS'].min(), inplace=True)","c7370a5f":"print(train_df['NAME_TYPE_SUITE'].mode()[0])\ntrain_df['NAME_TYPE_SUITE'].fillna(train_df['NAME_TYPE_SUITE'].mode()[0], inplace=True)\ntest_df['NAME_TYPE_SUITE'].fillna(train_df['NAME_TYPE_SUITE'].mode()[0], inplace=True)","2bc976a2":"print(train_df['OBS_30_CNT_SOCIAL_CIRCLE'].mode()[0])\ntrain_df['OBS_30_CNT_SOCIAL_CIRCLE'].fillna(train_df['OBS_30_CNT_SOCIAL_CIRCLE'].mode()[0], inplace=True)\ntest_df['OBS_30_CNT_SOCIAL_CIRCLE'].fillna(train_df['OBS_30_CNT_SOCIAL_CIRCLE'].mode()[0], inplace=True)","237e0c52":"print(train_df['DEF_30_CNT_SOCIAL_CIRCLE'].mode()[0])\ntrain_df['DEF_30_CNT_SOCIAL_CIRCLE'].fillna(train_df['DEF_30_CNT_SOCIAL_CIRCLE'].mode()[0], inplace=True)\ntest_df['DEF_30_CNT_SOCIAL_CIRCLE'].fillna(train_df['DEF_30_CNT_SOCIAL_CIRCLE'].mode()[0], inplace=True)","a0f2e6f3":"print(train_df['OBS_60_CNT_SOCIAL_CIRCLE'].mode()[0])\ntrain_df['OBS_60_CNT_SOCIAL_CIRCLE'].fillna(train_df['OBS_60_CNT_SOCIAL_CIRCLE'].mode()[0], inplace=True)\ntest_df['OBS_60_CNT_SOCIAL_CIRCLE'].fillna(train_df['OBS_60_CNT_SOCIAL_CIRCLE'].mode()[0], inplace=True)","fb4aa439":"print(train_df['DEF_60_CNT_SOCIAL_CIRCLE'].mode()[0])\ntrain_df['DEF_60_CNT_SOCIAL_CIRCLE'].fillna(train_df['DEF_60_CNT_SOCIAL_CIRCLE'].mode()[0], inplace=True)\ntest_df['DEF_60_CNT_SOCIAL_CIRCLE'].fillna(train_df['DEF_60_CNT_SOCIAL_CIRCLE'].mode()[0], inplace=True)","a1ec78e3":"print(train_df['EXT_SOURCE_2'].mode()[0])\ntrain_df['EXT_SOURCE_2'].fillna(train_df['EXT_SOURCE_2'].mode()[0], inplace=True)\ntest_df['EXT_SOURCE_2'].fillna(train_df['EXT_SOURCE_2'].mode()[0], inplace=True)","821aa021":"print(train_df['AMT_GOODS_PRICE'].mode()[0])\ntrain_df['AMT_GOODS_PRICE'].fillna(train_df['AMT_GOODS_PRICE'].mode()[0], inplace=True)\ntest_df['AMT_GOODS_PRICE'].fillna(train_df['AMT_GOODS_PRICE'].mode()[0], inplace=True)","04b33f71":"null_values = pd.DataFrame({'col_names':pd.isnull(train_df).sum().index,'col_count':pd.isnull(train_df).sum().values}) \nprint('Total {} columns hava a null values.'.format(null_values.loc[null_values['col_count'] > 0, ].shape[0]))","1f08d2ab":"null_values.loc[null_values['col_count'] > 0, ]","6b23d80e":"obj_col = train_df.loc[:, train_df.dtypes == object].columns","62b0b724":"for colname in obj_col.values:\n    train_df[colname]= lbl.fit_transform(list(train_df[colname].astype(str)))\n    test_df[colname]= lbl.fit_transform(list(test_df[colname].astype(str)))","94c94574":"train_df.head(10)","01b44f78":"null_values = pd.DataFrame({'col_names':pd.isnull(train_df).sum().index,'col_count':pd.isnull(train_df).sum().values}) \nprint('Total {} columns hava a null values.'.format(null_values.loc[null_values['col_count'] > 0, ].shape[0]))\n","23af91c3":"test_df['CNT_FAM_MEMBERS'].head()","6e358bad":"null_values.loc[null_values['col_count'] > 0, ]","d2f775f4":"from sklearn.model_selection import train_test_split, cross_val_score","79e6e91c":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.ensemble import GradientBoostingClassifier, RandomForestClassifier\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.metrics import mean_squared_error\nimport xgboost as xgb\nimport lightgbm as lgb","fd968843":"feature_col = ['NAME_CONTRACT_TYPE',\n               'CODE_GENDER',\n               'FLAG_OWN_CAR',\n               'FLAG_OWN_REALTY',\n               'CNT_CHILDREN',\n               'AMT_INCOME_TOTAL',\n               'AMT_INCOME_TOTAL',\n'AMT_CREDIT',\n'AMT_ANNUITY',\n'AMT_GOODS_PRICE',\n'NAME_TYPE_SUITE',\n'NAME_INCOME_TYPE',\n'NAME_EDUCATION_TYPE',\n'NAME_FAMILY_STATUS',\n'NAME_HOUSING_TYPE',\n'REGION_POPULATION_RELATIVE',\n'DAYS_EMPLOYED',\n'DAYS_REGISTRATION',\n'DAYS_ID_PUBLISH',\n'OWN_CAR_AGE',\n'FLAG_EMP_PHONE',\n'FLAG_WORK_PHONE',\n'FLAG_CONT_MOBILE',\n'FLAG_PHONE',\n'FLAG_EMAIL',\n'OCCUPATION_TYPE',\n'CNT_FAM_MEMBERS',\n'REGION_RATING_CLIENT',\n'REGION_RATING_CLIENT_W_CITY',\n'REG_REGION_NOT_LIVE_REGION',\n'REG_REGION_NOT_WORK_REGION',\n'LIVE_REGION_NOT_WORK_REGION',\n'REG_CITY_NOT_LIVE_CITY',\n'REG_CITY_NOT_WORK_CITY',\n'LIVE_CITY_NOT_WORK_CITY',\n'ORGANIZATION_TYPE',\n'EXT_SOURCE_1',\n'EXT_SOURCE_2',\n'EXT_SOURCE_3',\n'APARTMENTS_AVG',\n'BASEMENTAREA_AVG',\n'YEARS_BEGINEXPLUATATION_AVG',\n'YEARS_BUILD_AVG',\n'COMMONAREA_AVG',\n'ELEVATORS_AVG',\n'ENTRANCES_AVG',\n'FLOORSMAX_AVG',\n'FLOORSMIN_AVG',\n'LANDAREA_AVG',\n'LIVINGAPARTMENTS_AVG',\n'LIVINGAREA_AVG',\n'NONLIVINGAPARTMENTS_AVG',\n'NONLIVINGAREA_AVG',\n'APARTMENTS_MODE',\n'BASEMENTAREA_MODE',\n'YEARS_BEGINEXPLUATATION_MODE',\n'YEARS_BUILD_MODE',\n'COMMONAREA_MODE',\n'ELEVATORS_MODE',\n'ENTRANCES_MODE',\n'FLOORSMAX_MODE',\n'FLOORSMIN_MODE',\n'LANDAREA_MODE',\n'LIVINGAPARTMENTS_MODE',\n'LIVINGAREA_MODE',\n'NONLIVINGAPARTMENTS_MODE',\n'NONLIVINGAREA_MODE',\n'APARTMENTS_MEDI',\n'BASEMENTAREA_MEDI',\n'YEARS_BEGINEXPLUATATION_MEDI',\n'YEARS_BUILD_MEDI',\n'COMMONAREA_MEDI',\n'ELEVATORS_MEDI',\n'ENTRANCES_MEDI',\n'FLOORSMAX_MEDI',\n'FLOORSMIN_MEDI',\n'LANDAREA_MEDI',\n'LIVINGAPARTMENTS_MEDI',\n'LIVINGAREA_MEDI',\n'NONLIVINGAPARTMENTS_MEDI',\n'NONLIVINGAREA_MEDI',\n'FONDKAPREMONT_MODE',\n'HOUSETYPE_MODE',\n'TOTALAREA_MODE',\n'WALLSMATERIAL_MODE',\n'EMERGENCYSTATE_MODE',\n'OBS_30_CNT_SOCIAL_CIRCLE',\n'DEF_30_CNT_SOCIAL_CIRCLE',\n'OBS_60_CNT_SOCIAL_CIRCLE',\n'DEF_60_CNT_SOCIAL_CIRCLE',\n'DAYS_LAST_PHONE_CHANGE',\n'FLAG_DOCUMENT_2',\n'FLAG_DOCUMENT_3',\n'FLAG_DOCUMENT_4',\n'FLAG_DOCUMENT_5',\n'FLAG_DOCUMENT_6',\n'FLAG_DOCUMENT_7',\n'FLAG_DOCUMENT_8',\n'FLAG_DOCUMENT_9',\n'FLAG_DOCUMENT_10',\n'FLAG_DOCUMENT_11',\n'FLAG_DOCUMENT_12',\n'FLAG_DOCUMENT_13',\n'FLAG_DOCUMENT_14',\n'FLAG_DOCUMENT_15',\n'FLAG_DOCUMENT_16',\n'FLAG_DOCUMENT_17',\n'FLAG_DOCUMENT_18',\n'FLAG_DOCUMENT_19',\n'FLAG_DOCUMENT_20',\n'FLAG_DOCUMENT_21',\n'AMT_REQ_CREDIT_BUREAU_HOUR',\n'AMT_REQ_CREDIT_BUREAU_DAY',\n'AMT_REQ_CREDIT_BUREAU_WEEK',\n'AMT_REQ_CREDIT_BUREAU_MON',\n'AMT_REQ_CREDIT_BUREAU_QRT',\n'AMT_REQ_CREDIT_BUREAU_YEAR',\n'Age',\n'Mob_change']\nlabel_col = ['TARGET']","ceec24c0":"X_train, X_test, Y_train, Y_test = train_test_split(train_df[feature_col],train_df[label_col], test_size=0.2, random_state=52)","d9453df1":"model_name = []\nmodel_score =[]","3d262fb6":"X_train = np.array(X_train)\nX_test = np.array(X_test)\nY_train = np.array(Y_train)\nY_test = np.array(Y_test)","43c4a3e6":"'''linsvc = LinearSVC()\nlinsvc.fit(X_train, Y_train)\nlinsvc_score = round(linsvc.score(X_train, Y_train)*100, 2)\nmodel_name.append('LinearSVC')\nmodel_score.append(linsvc_score)\nlinsvc_score'''","a7fd3aae":"'''svc = SVC()\nsvc.fit(X_train,Y_train)\nsvc_score = round(svc.score(X_train,Y_train)*100, 2)\nmodel_name.append('SVC')\nmodel_score.append(svc_score)\nsvc_score'''","fba12f29":"'''kneighbors = KNeighborsClassifier()\nkneighbors.fit(X_train,Y_train)\nkneighbors_score = round(kneighbors.score(X_train,Y_train)*100, 2)\nmodel_name.append('KNeighborsClassifier')\nmodel_score.append(kneighbors_score)\nkneighbors_score'''","6b9c8bea":"randomforest = RandomForestClassifier()\nrandomforest.fit(X_train,Y_train)\nrandomforest_score = round(randomforest.score(X_train,Y_train)*100, 2)\nmodel_name.append('RandomForestClassifier')\nmodel_score.append(randomforest_score)\nrandomforest_score","8175f6b1":"'''gradient = GradientBoostingClassifier()\ngradient.fit(X_train,Y_train)\ngradient_score = round(gradient.score(X_train,Y_train)*100, 2)\nmodel_name.append('GradientBoostingClassifier')\nmodel_score.append(gradient_score)\ngradient_score'''","7313725f":"all_score = pd.DataFrame({'model_name':model_name, 'model_score':model_score})\nall_score","bf55e439":"predict_result = randomforest.predict(train_df[feature_col])","ba801221":"my_submission = pd.DataFrame({'SK_ID_CURR':train_df['SK_ID_CURR'], 'TARGET':predict_result})","45f324f6":"my_submission.to_csv('my_submission.csv', index=False)","c9506285":"We will Get find out how many columns data are object.","64324fa4":"After reading dataset I realize, I can add all document flag. Bank paper requirement is 1 to 20 documents. ","b232da37":"Most of application a <code> Business Entry Type 3 <\/code> then <code> XNA <\/code>\n","840e400e":"Most of application belong to Working and Commercial associate. 3rd Position is pensioner. I thinnk some pensioner have died before pay loan amount. I will try get find out there age. State servant also a bank corrupted.","6ed7bd20":"Interesting. Every applicant have a own mobile. I seems to be delete FLAG_MOBIL not effect in result.","f4fa0bd7":"### Conclusion:\nHave a many point but we can't say this type of user pay loan. If we give more time to optimize model our model predict better result. Task is challenging. My system speed is not very high so I have took a small sample. RandomForestClassifier\n","88dd5b3f":"After reading this dataset I did knew about data.\n<ol>\n    <li> It is one binary classification <\/li>\n    <li> Lots of missing values <\/li>\n    <li> Some data is not numeric <\/li>\n<\/ol>\n\nI will missing values fill in verious method and Object data type convert ot numeric data using <code> Label encoder <\/code>","98234849":"**library for ML**","7f58e12a":"Detailed exploration of financial data.","12289020":"1. Widow only 0.05% not pay loan amount. Civil marriage and single high for not pay loan amount. ","a73c80e0":"**Upload required library**","6f619cb1":"**Contents:**\n<ol>\n    <li> Introduction <\/li>\n    <li> Librarys include<\/li>\n    <li> Exploring dataset <\/li>\n    <li> Preparing feature <\/li>\n    <li> Train the model <\/li>\n    <li> Predicts <\/li>\n    <li> Submit result <\/li>\n    <li> Conclusion <\/li>\n    <\/ol>\n\n\n### Competition Description:\nTrain dataset have a many feature. \n\nIn this challenge, we predict a application how able to pay loan about.\n\n**Data Dicitionary **\n\nREG_CITY_NOT_LIVE_CITY: Work in city but not live in city.<br\/>\nREG_CITY_NOT_WORK_CITY: They live in city but not work in city<br\/>\nLIVE_CITY_NOT_WORK_CITY:Live in city but work in city.<br\/>\nNAME_CONTRACT_TYPE: Contract type.<\/br\/>\nCODE_GENDER:  Gender male or female.<br\/>\nFLAG_OWN_REALTY: Have a own realty.<br\/>\nCNT_CHILDREN: Number of childern.<\/br\/>\nAMT_INCOME_TOTAL: Total Income<br\/>\nAMT_CREDIT:All ready credit amount <br\/>\nAMT_ANNUITY:Income tax <br\/>\nAMT_GOODS_PRICE: Goods price <br\/>\nNAME_TYPE_SUITE<br\/>\nNAME_INCOME_TYPE <br\/>\nNAME_EDUCATION_TYPE: <br\/>\nNAME_FAMILY_STATUS<br\/>\nNAME_HOUSING_TYPE<br\/>\nREGION_POPULATION_RELATIVE<br\/>\nDAYS_BIRTH<br\/>\nDAYS_EMPLOYED<br\/>\nDAYS_EMPLOYED<br\/>\nDAYS_REGISTRATION<br\/>\nDAYS_ID_PUBLISH<br\/>\nOWN_CAR_AGE<br\/>\nFLAG_MOBIL<br\/>\nFLAG_EMP_PHONE <br\/>\nFLAG_WORK_PHONE <br\/>\nFLAG_CONT_MOBILE <br\/>\nFLAG_PHONE <br\/>\nFLAG_EMAIL <br\/>\nOCCUPATION_TYPE <br\/>\nCNT_FAM_MEMBERS <br\/>\nREGION_RATING_CLIENT<br\/>\nREGION_RATING_CLIENT_W_CITY<br\/>\nWEEKDAY_APPR_PROCESS_START<br\/>\nHOUR_APPR_PROCESS_START<br\/>\nREG_REGION_NOT_LIVE_REGION<br\/>\nREG_REGION_NOT_WORK_REGION<br\/>\nLIVE_REGION_NOT_WORK_REGION<br\/>\nREG_CITY_NOT_LIVE_CITY<br\/>\nREG_CITY_NOT_WORK_CITY<br\/>\nLIVE_CITY_NOT_WORK_CITY<br\/>\nORGANIZATION_TYPE<br\/>\nEXT_SOURCE_1<br\/>\nEXT_SOURCE_2<br\/>\nEXT_SOURCE_3<br\/>\nAPARTMENTS_AVG<br\/>\nBASEMENTAREA_AVG<br\/>\nYEARS_BEGINEXPLUATATION_AVG<br\/>\nYEARS_BUILD_AVG<br\/>\nCOMMONAREA_AVG\t<br\/>\nELEVATORS_AVG<br\/>\nENTRANCES_AVG<br\/>\nFLOORSMAX_AVG\t<br\/>\nFLOORSMIN_AVG<br\/>\nLANDAREA_AVG<br\/>\nLIVINGAPARTMENTS_AVG<br\/>\nLIVINGAREA_AVG<br\/>\nNONLIVINGAPARTMENTS_AVG\t<br\/>\nNONLIVINGAREA_AVG<br\/>\nAPARTMENTS_MODE<br\/>\nBASEMENTAREA_MODE<br\/>\nYEARS_BEGINEXPLUATATION_MODE<br\/>\nYEARS_BUILD_MODE<br\/>\nCOMMONAREA_MODE<br\/>\nELEVATORS_MODE<br\/>\nENTRANCES_MODE<br\/>\nFLOORSMAX_MODE<br\/>\nFLOORSMIN_MODE<br\/>\nLANDAREA_MODE<br\/>\nLIVINGAPARTMENTS_MODE<br\/>\nLIVINGAREA_MODE<br\/>\nNONLIVINGAPARTMENTS_MODE<br\/>\nNONLIVINGAREA_MODE<br\/>\nAPARTMENTS_MEDI<br\/>\nBASEMENTAREA_MEDI<br\/>\nYEARS_BEGINEXPLUATATION_MEDI<br\/>\nYEARS_BUILD_MEDI<br\/>\nCOMMONAREA_MEDI<br\/>\nELEVATORS_MEDI<br\/>\nENTRANCES_MEDI<br\/>\nFLOORSMAX_MEDI<br\/>\nFLOORSMIN_MEDI<br\/>\nLANDAREA_MEDI<br\/>\nLIVINGAPARTMENTS_MEDI<br\/>\nLIVINGAREA_MEDI<br\/>\nNONLIVINGAPARTMENTS_MEDI<br\/>\nNONLIVINGAREA_MEDI<br\/>\nFONDKAPREMONT_MODE<br\/>\nHOUSETYPE_MODE<br\/>\nTOTALAREA_MODE<br\/>\nWALLSMATERIAL_MODE<br\/>\nEMERGENCYSTATE_MODE<br\/>\nOBS_30_CNT_SOCIAL_CIRCLE<br\/>\nDEF_30_CNT_SOCIAL_CIRCLE<br\/>\nOBS_60_CNT_SOCIAL_CIRCLE<br\/>\nDEF_60_CNT_SOCIAL_CIRCLE<br\/>\nDAYS_LAST_PHONE_CHANGE<br\/>\nFLAG_DOCUMENT_2<br\/>\nFLAG_DOCUMENT_3<br\/>\nFLAG_DOCUMENT_4<br\/>\nFLAG_DOCUMENT_5<br\/>\nFLAG_DOCUMENT_6<br\/>\nFLAG_DOCUMENT_7<br\/>\nFLAG_DOCUMENT_8<br\/>\nFLAG_DOCUMENT_9<br\/>\nFLAG_DOCUMENT_10<br\/>\nFLAG_DOCUMENT_11<br\/>\nFLAG_DOCUMENT_12<br\/>\nFLAG_DOCUMENT_13<br\/>\nFLAG_DOCUMENT_14<br\/>\nFLAG_DOCUMENT_15<br\/>\nFLAG_DOCUMENT_16<br\/>\nFLAG_DOCUMENT_17<br\/>\nFLAG_DOCUMENT_18<br\/>\nFLAG_DOCUMENT_19<br\/>\nFLAG_DOCUMENT_20<br\/>\nFLAG_DOCUMENT_21<br\/>\nAMT_REQ_CREDIT_BUREAU_HOUR<br\/>\nAMT_REQ_CREDIT_BUREAU_DAY<br\/>\nAMT_REQ_CREDIT_BUREAU_WEEK<br\/>\nAMT_REQ_CREDIT_BUREAU_MON<br\/>\nAMT_REQ_CREDIT_BUREAU_QRT<br\/>\nAMT_REQ_CREDIT_BUREAU_YEAR<br\/>","f43b6655":"Only select useful columns.","137eefdb":"Finaly no null values and object datatype. We are ready to apply model. Here I will not do parameter tuning.  "}}