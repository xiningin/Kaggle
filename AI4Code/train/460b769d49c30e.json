{"cell_type":{"3bbf315c":"code","0e8c6e44":"code","840de7c0":"code","c9f609ff":"code","b5ae7d93":"code","98493709":"code","fb93e7d8":"code","eda7d5b4":"code","97e7bb5d":"code","5e89c94a":"code","b48fba58":"code","f1ef3d2b":"markdown","00f028b9":"markdown","43963930":"markdown","c60b2079":"markdown","27e45eee":"markdown","872f4ee9":"markdown","a4a3f7a3":"markdown","bde08b51":"markdown","5b6e72da":"markdown","3d15930a":"markdown"},"source":{"3bbf315c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n# import numpy as np # linear algebra\n# import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0e8c6e44":"import pydicom as dicom # dcm file\nimport matplotlib.pylab as plt # plot\nfrom matplotlib import patches # bounding box\nimport numpy as np # linear algebra\nimport pandas as pd # csv\nimport os # directory, folder, file\nimport threading\nprint(\"pydicom, matplotlib.pylab, pydicom, os, pandas, and threading successfully imported\")","840de7c0":"train_path = '..\/input\/siim-covid19-detection\/train'\ntest_path = '..\/input\/siim-covid19-detection\/test'\nimage_csv_path = '..\/input\/siim-covid19-detection\/train_image_level.csv'\nstudy_csv_path = '..\/input\/siim-covid19-detection\/train_study_level.csv'\nprint(\"Successfully assign paths to variables\")","c9f609ff":"study_df = pd.read_csv(study_csv_path)\nimage_df = pd.read_csv(image_csv_path)","b5ae7d93":"def displayChestScan(id):\n    ret = 0\n    for dirname, dirs, filenames in os.walk(train_path):\n        uid = dirname.split('\/')[-2]\n        if (uid == id):\n            for filename in filenames:\n                try:\n                    image_path = os.path.join(dirname, filename)\n                    ds = dicom.dcmread(image_path)\n                    fig, img = plt.subplots(1, 1)\n                    img.imshow(ds.pixel_array)\n                    rect = patches.Rectangle((10, 10), 100, 100, \n                                                linewidth = 2,\n                                                edgecolor = 'r',\n                                                facecolor = 'none')\n                    img.add_patch(rect)\n                    plt.show()\n                except Exception as e:\n                    print('[Error][displayChestScan]', e)\n                    plt.close()\n                    ret = -1\n            break\n    \n    return ret","98493709":"def displayChestScanInfo(id):\n    for idx, row in image_df.iterrows():\n        if (row['StudyInstanceUID'] == id):\n            print(row)\n            break\n    \n    return row","fb93e7d8":"def displayChestScanByPath(path):\n    ds = dicom.dcmread(path)\n    plt.imshow(ds.pixel_array)","eda7d5b4":"error_log = {}\nfor _, row in study_df.iterrows():\n    other_res = {row[key] for idx, key in enumerate(row.keys()) if (idx != 0 and idx != 1)} # 0: id, 1: Negative for Pneumonia\n    id = row['id'].split('_')[0]\n    neg_for_pnu = row['Negative for Pneumonia']\n    if (neg_for_pnu and 1 not in other_res):\n        ret = displayChestScan(id)\n        displayChestScanInfo(id)\n        \n        if (ret is 0):\n            break","97e7bb5d":"for _, row in study_df.iterrows():\n    other_res = {row[key] for idx, key in enumerate(row.keys()) if (idx != 0 and idx != 2)} # 0: id, 2: Typical Apperance\n    id = row['id'].split('_')[0]\n    typ_appr = row['Typical Appearance']\n    if (typ_appr and 1 not in other_res):\n        ret = displayChestScan(id)\n        displayChestScanInfo(id)\n        \n        if (ret is 0):\n            break","5e89c94a":"for _, row in study_df.iterrows():\n    other_res = {row[key] for idx, key in enumerate(row.keys()) if (idx != 0 and idx != 3)} # 0: id, 3: Indeterminate Appearance\n    id = row['id'].split('_')[0]\n    ind_appr = row['Indeterminate Appearance']\n    if (ind_appr and 1 not in other_res):\n        ret = displayChestScan(id)\n        displayChestScanInfo(id)\n        \n        if (ret is 0):\n            break","b48fba58":"for _, row in study_df.iterrows():\n    other_res = {row[key] for idx, key in enumerate(row.keys()) if (idx != 0 and idx != 4)} # 0: id, 3: Indeterminate Appearance\n    id = row['id'].split('_')[0]\n    ind_appr = row['Atypical Appearance']\n    if (ind_appr and 1 not in other_res):\n        ret = displayChestScan(id)\n        displayChestScanInfo(id)\n        \n        if (ret is 0):\n            break","f1ef3d2b":"# Display chest scan by a user-given path (utility function)","00f028b9":"# Import libraries","43963930":"# Negative for Pneumonia","c60b2079":"# Display chest scan's bounding boxes and label (utility function)","27e45eee":"# Indeterminate Appearance","872f4ee9":"# Atypical Appearance","a4a3f7a3":"# Typical Appearance","bde08b51":"# Define folder\/file paths","5b6e72da":"# Read image and study leve csv files and convert them to Pandas' DataFrame","3d15930a":"# Display a patient's chest scan (utility function)"}}