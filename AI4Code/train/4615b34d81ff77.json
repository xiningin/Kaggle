{"cell_type":{"7cdfa8f1":"code","a7688836":"code","f91c7862":"code","8a44ffdd":"code","6559add8":"code","51687adb":"code","d09fbe68":"code","ed3402ae":"code","2a9af90d":"code","c77ed1c3":"code","2aa29c54":"code","e626abe1":"code","a1781cc1":"code","3782e9a8":"code","4afadc10":"code","841f0906":"code","6837722c":"code","6e915574":"code","c806e034":"code","8a3746cc":"code","c169e40b":"code","92413b2f":"code","b5e9d598":"code","34b3ca95":"code","73d4a0e7":"code","0f810209":"code","5c963c5d":"code","85b64425":"code","06ab182d":"code","c7f18fc3":"code","8c9dc2ca":"code","1c21d00a":"code","24d4f3c6":"code","0b42714a":"code","d5fac956":"code","640cef20":"code","ca5e18a5":"code","f945b49c":"code","8b6f680f":"code","dfac3542":"code","2825df93":"code","db2f3d66":"code","f1f5ffd4":"code","30e1f288":"code","9ec5a0db":"code","64b27503":"code","aea8d2b6":"code","6ec66f43":"code","7835a77f":"code","ac748ffe":"code","1c1d614b":"code","969e9a9d":"code","2feb4fe8":"code","86e0bb8d":"code","99e56e35":"code","33624913":"code","503e734d":"code","0253a708":"code","d9086d1e":"code","dea6229a":"code","27fc42a5":"code","0e8f549b":"code","db3bff82":"code","89476301":"code","6f5a4a24":"code","3bf61b3f":"code","ddf601ce":"code","e8eaa507":"code","465b2c3e":"code","e319f24b":"code","0d211a28":"code","f92c3d06":"code","d8a2ca7c":"code","a23e71aa":"code","f3f2cace":"code","ae8340e4":"code","02a75fd1":"code","a6c050a8":"code","8d450a07":"code","0bdd9d49":"code","93a69028":"code","8c91bd49":"code","02162268":"code","5c4153e3":"code","ee2de95b":"code","2d799711":"code","3f695021":"code","0f514028":"code","de720949":"code","b7e71a3c":"code","14ceff59":"code","4b13eada":"code","26df44a4":"code","82806988":"code","06670060":"code","1901e811":"code","0b906358":"code","2cae9e9d":"code","9e5d98ba":"code","23be43a6":"code","208fa2c3":"code","ab81c62f":"code","27228304":"code","8947645f":"markdown","23c3fe14":"markdown","0160359f":"markdown","4e43b37b":"markdown","4180cca2":"markdown","abbfdcdc":"markdown","7eda72d1":"markdown","87e90954":"markdown","352dd161":"markdown","25bfd9f7":"markdown","1854f89e":"markdown","267e4a27":"markdown","1cb54d11":"markdown","7f98f52c":"markdown","e6b303b6":"markdown","3b13423c":"markdown","81a770d9":"markdown","71f7d719":"markdown","5064e5b3":"markdown","9c0f20a1":"markdown","f0cf3529":"markdown","8a9f8991":"markdown"},"source":{"7cdfa8f1":"#Import Libraries\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split,cross_val_score,RandomizedSearchCV\nimport xgboost as xgb\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom imblearn.under_sampling import OneSidedSelection\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import roc_curve, roc_auc_score, classification_report\npd.set_option('display.max_columns', None)\nplt.rcParams['figure.figsize']=(16, 8.27) #set graphs size to A4 dimensions\nsns.set_style('darkgrid')\nsns.set(font_scale = 1.4)","a7688836":"#import train and test set from UCI links\n\ntrain = pd.read_csv('http:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/adult\/adult.data', header = None)\n\ntest = pd.read_csv('http:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/adult\/adult.test' , skiprows = 1, header = None)\n\ncol_labels = ['age', 'workclass', 'fnlwgt', 'education', 'education_num','marital_status', 'occupation','relationship', \n              'race', 'sex', 'capital_gain', 'capital_loss', 'hours_per_week', 'native_country', 'wage_class']\ntrain.columns = col_labels\ntest.columns = col_labels","f91c7862":"train.info()","8a44ffdd":"train.head()","6559add8":"train.describe()","51687adb":"#find out numerical and categorical features for train set\n\nnumerical_features=[feature for feature in train.columns if train[feature].dtype!='O']\ncategorical_features=[feature for feature in  train.columns if  train[feature].dtype=='O' and feature!='wage_class']\n\nprint('categorical features: ''\\n',categorical_features)\nprint('\\n')\nprint('numerical features: ''\\n',numerical_features)","d09fbe68":"#Check for missing values\nfor feature in train.columns:\n    print(feature,':', train[feature].isnull().sum())","ed3402ae":"#Find out distinct values for each numerical feature\nfor feature in numerical_features:\n    print(feature,':', train[feature].nunique())","2a9af90d":"#Find out distinct values for each categorical feature\nfor feature in categorical_features:\n    print(feature,':', train[feature].nunique())","c77ed1c3":"#for each categorical value we calculate relative frequency of unique classes.\nfor feature in categorical_features:\n    freq=train[feature].value_counts('f').rename_axis(feature).reset_index(name='relative frequency')\n    print('\\n')\n    print(freq)","2aa29c54":"#Check for imbalanced target (In our case 76% are in class <=50K and 24% >50K)\ntrain['wage_class'].value_counts('f') ","e626abe1":"ax=sns.countplot(train['wage_class'],hue=train['wage_class'],edgecolor='k',palette='Set2')\nax.set_title('Wage Class Count')\nax.set_xlabel('Wage Class')\nplt.show()","a1781cc1":"ax=sns.countplot(train['marital_status'], hue=train['wage_class'],edgecolor='k',palette='Set2')\nax.set_title('Marital Status \/ Wage Class')\nax.set_xlabel('Marital Status')\nplt.show()","3782e9a8":"ax=sns.countplot(train['sex'], hue=train['wage_class'],edgecolor='k',palette='Set2')\nax.set_title('Sex \/ Wage Class')\nax.set_xlabel('Sex')\nplt.show()","4afadc10":"ax=sns.countplot(train['race'], hue=train['wage_class'],edgecolor='k',palette='Set2')\nax.set_title('Race \/ Wage Class')\nax.set_xlabel('Race')\nplt.show()","841f0906":"ax=sns.countplot(train['relationship'], hue=train['wage_class'],edgecolor='k',palette='Set2')\nax.set_title('Relationship Status \/ Wage Class')\nax.set_xlabel('Relationship')\nplt.show()","6837722c":"ax=sns.countplot(train['education'], hue=train['wage_class'],edgecolor='k',palette='Set2')\nax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha=\"right\")\nax.set_title('Education \/ Wage Class')\nax.set_xlabel('Education')\nplt.show()","6e915574":"ax=sns.countplot(train['occupation'], hue=train['wage_class'],edgecolor='k',palette='Set2')\nax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha=\"right\")\nax.set_title('Occupation \/ Wage Class')\nax.set_xlabel('Occupation')\nplt.show()","c806e034":"ax=sns.distplot(train['age'],hist_kws=dict(edgecolor=\"k\", linewidth=2),kde_kws={\"color\": \"#ce0d55\", \"lw\": 2})\nax.set_title('Age Distribution')\nax.set_xlabel('Age')\nplt.show()","8a3746cc":"ax=sns.distplot(train['hours_per_week'],hist_kws=dict(edgecolor=\"k\", linewidth=2),kde_kws={\"color\": \"#ce0d55\", \"lw\": 2})\nax.set_title('Hours\/Week Distribution')\nax.set_xlabel('Hours Per Week')\nplt.show()","c169e40b":"ax=sns.distplot(train['capital_loss'],bins=10,kde=False,hist_kws=dict(edgecolor=\"k\", linewidth=2))\nax.set_title('Capital Loss Histogram')\nax.set_xlabel('Capital Loss')\nplt.show()","92413b2f":"ax=sns.distplot(train['capital_gain'],bins=10,kde=False,hist_kws=dict(edgecolor=\"k\", linewidth=2))\nax.set_title('Capital Gain Histogram')\nax.set_xlabel('Capital Gain')\nplt.show()","b5e9d598":"#median age for each wage_class\nax=sns.barplot(train.groupby('wage_class')['age'].median().index,train.groupby('wage_class')['age'].median().values,\n               edgecolor='k', palette='Set2')\nax.set_ylabel('Age')\nax.set_xlabel('Wage Class')\nax.set_title('Median Age \/ Wage Class')\nplt.show()","34b3ca95":"corr_train=train.copy()\nfor feature in categorical_features:\n    corr_train.drop(feature,axis=1,inplace=True)\n\n    \nax=sns.heatmap(corr_train.corr(), cmap='RdYlGn',annot=True)\nax.set_title('Correlation Map')\nplt.show()","73d4a0e7":"test.info()","0f810209":"test.head()","5c963c5d":"train.describe()","85b64425":"#find out numerical and categorical features for test set\n\nnumerical_features_test=[feature for feature in test.columns if test[feature].dtype!='O']\ncategorical_features_test=[feature for feature in  test.columns if  test[feature].dtype=='O' and feature!='wage_class']\n\nprint('categorical features: ''\\n',categorical_features_test)\nprint('\\n')\nprint('numerical features: ''\\n',numerical_features_test)","06ab182d":"#Check for missing values\nfor feature in test.columns:\n    print(feature,':', test[feature].isnull().sum())","c7f18fc3":"#Find out distinct values for each numerical feature\nfor feature in numerical_features_test:\n    print(feature,':', test[feature].nunique())","8c9dc2ca":"#Find out distinct values for each categorical feature\nfor feature in categorical_features_test:\n    print(feature,':', test[feature].nunique())","1c21d00a":"#for each categorical value we calculate relative frequency of unique classes.\nfor feature in categorical_features_test:\n    freq_test=test[feature].value_counts('f').rename_axis(feature).reset_index(name='relative frequency')\n    print('\\n')\n    print(freq_test)","24d4f3c6":"#Check for imbalanced target (In our case approx 76% are in class <=50K and  approx 24% >50K)\ntest['wage_class'].value_counts('f') ","0b42714a":"ax=sns.countplot(test['wage_class'],hue=test['wage_class'], edgecolor='k',palette='Set2')\nax.set_title('Wage Class Count')\nax.set_xlabel('Wage Class')\nplt.show()","d5fac956":"ax=sns.countplot(test['marital_status'], hue=test['wage_class'],edgecolor='k', palette='Set2')\nax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha=\"right\")\nax.set_title('Marital Status \/ Wage Class')\nax.set_xlabel('Marital Status')\nplt.show()","640cef20":"ax=sns.countplot(test['sex'], hue=test['wage_class'],edgecolor='k', palette='Set2')\nax.set_title('Sex \/ Wage Class')\nax.set_xlabel('Sex')\nplt.show()","ca5e18a5":"ax=sns.countplot(test['race'], hue=test['wage_class'],edgecolor='k', palette='Set2')\nax.set_title('Race \/ Wage Class')\nax.set_xlabel('Race')\nplt.show()","f945b49c":"ax=sns.countplot(test['relationship'], hue=test['wage_class'],edgecolor='k', palette='Set2')\nax.set_title('Relationship Status \/ Wage Class')\nax.set_xlabel('Relationship')\nplt.show()","8b6f680f":"ax=sns.countplot(test['education'], hue=test['wage_class'],edgecolor='k', palette='Set2')\nax.set_title('Education \/ Wage Class')\nax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha=\"right\")\nax.set_xlabel('Education')\nplt.show()","dfac3542":"ax=sns.countplot(test['occupation'], hue=test['wage_class'],edgecolor='k', palette='Set2')\nax.set_title('Occupation \/ Wage Class')\nax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha=\"right\")\nax.set_xlabel('Occupation')\nplt.show()","2825df93":"ax=sns.distplot(test['age'],hist_kws=dict(edgecolor=\"k\", linewidth=2),kde_kws={\"color\": \"#ce0d55\", \"lw\": 2})\nax.set_title('Age Distribution')\nax.set_xlabel('Age')\nplt.show()","db2f3d66":"ax=sns.distplot(test['hours_per_week'],hist_kws=dict(edgecolor=\"k\", linewidth=2),kde_kws={\"color\": \"#ce0d55\", \"lw\": 2})\nax.set_title('Hours \/ Week Distribution')\nax.set_xlabel('Hours per Week')\nplt.show()","f1f5ffd4":"ax=sns.distplot(test['capital_loss'],bins=10,kde=False,hist_kws=dict(edgecolor=\"k\", linewidth=2))\nax.set_title('Capital Loss Histogram')\nax.set_xlabel('Capital Loss')\nplt.show()","30e1f288":"ax=sns.distplot(test['capital_gain'],bins=10,kde=False,hist_kws=dict(edgecolor=\"k\", linewidth=2))\nax.set_title('Capital Gain Histogram')\nax.set_xlabel('Capital Gain')\nplt.show()","9ec5a0db":"#median age for each wage_class\nax=sns.barplot(test.groupby('wage_class')['age'].median().index,test.groupby('wage_class')['age'].median().values,\n               edgecolor='k', palette='Set2')\nax.set_ylabel('Age')\nax.set_xlabel('Wage Class')\nax.set_title('Median Age \/ Wage Class')\nplt.show()","64b27503":"corr_test=test.copy()\nfor feature in categorical_features_test:\n    corr_test.drop(feature,axis=1,inplace=True)\n\n    \nax=sns.heatmap(corr_test.corr(), cmap='RdYlGn',annot=True)\nax.set_title('Correlation Map')\nplt.show()","aea8d2b6":"#convert <=50K and >50K to 0, 1 respectively\nencoder=LabelEncoder()\ntrain['wage_class']=encoder.fit_transform(train['wage_class'])","6ec66f43":"categorical_features=[feature for feature in  train.columns if  train[feature].dtype=='O' and feature!='wage_class']\nfor feature in categorical_features:\n    freq=train[feature].value_counts().rename_axis(feature).reset_index(name='frequency')\n    print('\\n')\n    print(freq)","7835a77f":"#transform country feature to be 1 if country is the United States. Otherwise is equal to 0\ntrain['native_country']=np.where(train['native_country']==' United-States',1,0)","ac748ffe":"#transform marital status and concatenate some classes to reduce distinct classes\ntrain['marital_status']=train['marital_status'].replace({' Married-civ-spouse': 'Married', ' Never-married': 'Single',  \n                                                        ' Separated':'Divorced', ' Married-spouse-absent' : 'Divorced', \n                                                         ' Divorced':'Divorced', \n                                                         ' Married-AF-spouse' :'Divorced', ' Widowed':'Widowed' })","1c1d614b":"#transform workclass feature to be 1 if the workclass is Private and 0 if doesn't\ntrain['workclass']=np.where(train['workclass']==' Private',1,0)","969e9a9d":"#transform workclass feature to be 1 if the Sex is Male and 0 if doesn't\ntrain['sex']=np.where(train['sex']==' Male',1,0)","2feb4fe8":"#transform workclass feature to be 1 if the Race is White and 0 if doesn't\ntrain['race']=np.where(train['race']==' White',1,0)","86e0bb8d":"#create ordered label for education \neducation_mapping={' Preschool':0,' 1st-4th':1,' 5th-6th':2,' 7th-8th':3,' 9th':4,' 10th':5,\n                   ' 11th':6,' 12th':7,' HS-grad':8,' Some-college':0,' Assoc-acdm':10,\n                   ' Assoc-voc':11, ' Bachelors':12, ' Prof-school':13, ' Masters':14,' Doctorate':15\n                   }\ntrain['education']=train['education'].map(education_mapping)","99e56e35":"relationship_ordered=train.groupby(['relationship'])['wage_class'].count().sort_values().index\nrelationship_ordered={k:i for i,k in enumerate(relationship_ordered,0)}\ntrain['relationship']=train['relationship'].map(relationship_ordered)  ","33624913":"occupation_ordered=train.groupby(['occupation'])['wage_class'].count().sort_values().index\noccupation_ordered={k:i for i,k in enumerate(occupation_ordered,0)}\ntrain['occupation']=train['occupation'].map(occupation_ordered)","503e734d":"marital_ordered=train.groupby(['marital_status'])['wage_class'].count().sort_values().index\nmarital_ordered={k:i for i,k in enumerate(marital_ordered,0)}\ntrain['marital_status']=train['marital_status'].map(marital_ordered)","0253a708":"train.head(10)","d9086d1e":"train.isnull().sum()","dea6229a":"train.drop('fnlwgt',axis=1,inplace=True) # it is not a useful feature for predicting the wage class","27fc42a5":"#scaling the train set with StandardScaler\nscaler=StandardScaler()\nscaled_features_train=scaler.fit_transform(train.drop('wage_class',axis=1))\nscaled_features_train=pd.DataFrame(scaled_features_train, columns=train.drop('wage_class',axis=1).columns)","0e8f549b":"#undersampling the train set\nunder=OneSidedSelection()\nX_train_res, y_train_res=under.fit_resample(scaled_features_train, train['wage_class'])\n\n\n#oversampling the train set\nsm=SMOTE()\nX_train_res, y_train_res= sm.fit_resample(X_train_res, y_train_res)\n\nX_train_res=pd.DataFrame(X_train_res, columns=train.drop('wage_class',axis=1).columns)\n\n\n\n#creating the final train \nfinal_train=pd.concat([X_train_res, y_train_res],axis=1)","db3bff82":"final_train.head(10)","89476301":"final_train.info()","6f5a4a24":"final_train['wage_class'].value_counts() #now train set is balanced","3bf61b3f":"test['wage_class']=np.where(test['wage_class']== ' >50K.',1,0)","ddf601ce":"test['wage_class'].value_counts()","e8eaa507":"#transform country feature to be 1 if country is the United States. Otherwise is equal to 0\ntest['native_country']=np.where(test['native_country']==' United-States',1,0)","465b2c3e":"#transform workclass feature to be 1 if the workclass is Private and 0 if doesn't\ntest['workclass']=np.where(test['workclass']==' Private',1,0)","e319f24b":"#transform workclass feature to be 1 if the Sex is Male and 0 if doesn't\ntest['sex']=np.where(test['sex']==' Male',1,0)","0d211a28":"test['race']=np.where(test['race']==' White',1,0)","f92c3d06":"test['education']=test['education'].map(education_mapping)","d8a2ca7c":"test['relationship']=test['relationship'].map(relationship_ordered) ","a23e71aa":"test['occupation']=test['occupation'].map(occupation_ordered)","f3f2cace":"#transform marital status and concatenate some classes to reduce distinct classes\ntest['marital_status']=test['marital_status'].replace({' Married-civ-spouse': 'Married', ' Never-married': 'Single',  \n                                                        ' Separated':'Divorced', ' Married-spouse-absent' : 'Divorced', \n                                                         ' Divorced':'Divorced', \n                                                         ' Married-AF-spouse' :'Divorced', ' Widowed':'Widowed' })","ae8340e4":"test['marital_status']=test['marital_status'].map(marital_ordered)","02a75fd1":"test.head(10)","a6c050a8":"test.isnull().sum()","8d450a07":"test.drop('fnlwgt',axis=1,inplace=True)","0bdd9d49":"scaled_features_test=scaler.transform(test.drop('wage_class',axis=1))\nscaled_features_test=pd.DataFrame(scaled_features_test, columns=test.drop('wage_class',axis=1).columns)\n\nfinal_test=pd.concat([scaled_features_test,test['wage_class']],axis=1)","93a69028":"final_test.head(10)","8c91bd49":"X=final_train.drop('wage_class',axis=1)\ny=final_train['wage_class']","02162268":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=0)","5c4153e3":"model=xgb.XGBClassifier()","ee2de95b":"model.fit(X_train, y_train)","2d799711":"feat_importances = pd.Series(model.feature_importances_, index=X_train.columns)\nfeat_importances=feat_importances.nlargest(X_train.shape[1])\nax=sns.barplot(feat_importances.index, feat_importances.values ,edgecolor='k', palette='Set2')\nax.set_ylabel('Feature Importance')\nax.set_xlabel('Features')\nax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha=\"right\")\nplt.show()","3f695021":"final_train.drop(['native_country','race','workclass'],axis=1,inplace=True)\nfinal_test.drop(['native_country','race','workclass'],axis=1,inplace=True)","0f514028":"xgb_classifier=xgb.XGBClassifier()\nscore_xgb=cross_val_score(xgb_classifier, X, y, cv=5, n_jobs=-1)","de720949":"rf=RandomForestClassifier()\nscore_rf=cross_val_score(rf, X, y, cv=5, n_jobs=-1)","b7e71a3c":"svc=SVC()\nscore_svc=cross_val_score(svc, X, y, cv=5, n_jobs=-1)","14ceff59":"logReg=LogisticRegression()\nscore_logReg=cross_val_score(logReg, X, y, cv=5, n_jobs=-1)","4b13eada":"knn=KNeighborsClassifier()\nscore_knn=cross_val_score(knn, X, y, cv=5, n_jobs=-1)","26df44a4":"adaboost=AdaBoostClassifier()\nscore_adaboost=cross_val_score(adaboost, X, y, cv=5, n_jobs=-1)","82806988":"scores=pd.DataFrame({'Model':['XGBoost','Random Forest','SVC','Logistic Regression','KNN','Adaboost'],\n                    'Accuracy':[score_xgb.mean(),score_rf.mean(),score_svc.mean(),score_logReg.mean(),score_knn.mean(),\n                             score_adaboost.mean()]})","06670060":"print(scores)","1901e811":"X_train=final_train.drop('wage_class',axis=1)\ny_train=final_train['wage_class']\n\nX_test=final_test.drop('wage_class',axis=1)\ny_test=final_test['wage_class']","0b906358":"xgb_classifier.fit(X_train,y_train)\ny_pred=xgb_classifier.predict(X_test)","2cae9e9d":"print(classification_report(y_test,y_pred))","9e5d98ba":"xgboost_auc=roc_auc_score(y_test,y_pred)\nr_probs = [0 for _ in range(len(y_test))]\nrandom_auc = roc_auc_score(y_test, r_probs)\nprint(xgboost_auc)","23be43a6":"probs=xgb_classifier.predict_proba(X_test)","208fa2c3":"probs=probs[:,1] #keep probabilities for one class","ab81c62f":"r_fpr, r_tpr, _=roc_curve(y_test,probs)\nx=np.arange(0,1.01,0.01)","27228304":"plt.plot(r_fpr, r_tpr, label='XGBoost (AUROC = %0.3f)' % xgboost_auc)\nplt.plot(x,x, linestyle='--', label='Random prediction (AUROC = %0.3f)' % random_auc)\nplt.legend()\nplt.title('ROC CURVE')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.show()","8947645f":"# Feature Selection","23c3fe14":"#### SVC","0160359f":"#### Random Forest","4e43b37b":"###### Test Set","4180cca2":"#### XGBoost","abbfdcdc":"Now for the test set we have to apply all the transformations that we did before for the train set","7eda72d1":"# INCOME CLASS PREDICTION USING MACHINE LEARING\n\nHello all, for this classification task I have used the Census Income Dataset (Both data and test set) from UCI <br>\n(https:\/\/archive.ics.uci.edu\/ml\/datasets\/census+income)","87e90954":"###### TEST SET","352dd161":"# Feature Engineering","25bfd9f7":"Let's get deeper and exploring the data","1854f89e":"At this point we are going to evaluate the model in the initial test set","267e4a27":"#### AdaBoost","1cb54d11":"# Model Selection","7f98f52c":"#### KNN","e6b303b6":"# Final Model Evaluation","3b13423c":"Now we have to follow the same procedure for the test set in order to assure that both train set and test set come from same distribution","81a770d9":"###### TRAIN SET","71f7d719":"###### Now let's do some graphs for test in order to find key relationships !!!","5064e5b3":"# Exploratory Data Analysis","9c0f20a1":"###### Now let's do some graphs for train set in order to find key relationships !!!","f0cf3529":"As we can see, Race, Workclass and Native Country are not important features and we will drop them","8a9f8991":"#### Logistic Regression"}}