{"cell_type":{"81db5d58":"code","866244d3":"code","95b4ba51":"code","77b7c09c":"code","bb04ddb9":"code","1adf6ee0":"code","dc53c8de":"code","0c3ad68a":"code","14dcd437":"code","49950d84":"code","e22df62e":"code","6adf0dda":"code","e741f042":"code","a951b20c":"code","303dbb8d":"code","7ca6f879":"code","9c6df127":"code","48d64d8b":"code","69152873":"code","bdf9e01d":"code","dd13bf2d":"code","9317712c":"code","d732794e":"code","b6b62c44":"markdown","09fc382d":"markdown","72f26afb":"markdown","46d8badd":"markdown","e375096e":"markdown","38f3e1cd":"markdown","cb07fa17":"markdown","a9b514c5":"markdown","752292dc":"markdown","c885009d":"markdown","eccdb799":"markdown","8eaa5a1c":"markdown","a143f54f":"markdown","763d8166":"markdown","dfb1e467":"markdown","43c76d02":"markdown","ddd9c5fa":"markdown","ff612712":"markdown","1bc74c23":"markdown","f03dcac4":"markdown","619fedaf":"markdown","ac45468f":"markdown"},"source":{"81db5d58":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","866244d3":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib\nimport matplotlib.ticker as ticker\nfrom matplotlib import pyplot as plt\nplt.style.use('seaborn')\nfrom matplotlib.pyplot import figure\n%matplotlib inline\nmatplotlib.rcParams['figure.figsize']=(12,8)\n\nfrom bokeh.plotting import figure, output_file, show\nfrom bokeh.models import (\n    ColumnDataSource,\n    HoverTool,\n    LinearColorMapper,\n    BasicTicker, LogTicker, ContinuousTicker, AdaptiveTicker,\n    PrintfTickFormatter,\n    ColorBar,\n    FactorRange\n)\nimport bokeh.palettes\nfrom bokeh.transform import factor_cmap\nfrom wordcloud import WordCloud, STOPWORDS\nfrom math import floor\nfrom bokeh.io import output_notebook\nfrom bokeh.models import NumeralTickFormatter\nfrom bokeh.resources import CDN\nfrom bokeh.resources import INLINE\nfrom bokeh.embed import file_html\nimport bokeh.io\nbokeh.io.output_notebook(INLINE)","95b4ba51":"df = pd.read_csv('..\/input\/movies\/movies.csv')\n# checking data types\ndf.dtypes\n# inflation.dtypes\n\n# data types look fine for all the columns","77b7c09c":"# adjusting budget and revenue for inflation\n\n# Still need to find an accurate inflation data\n\n# i = 0\n# while(i < len(df)):\n#     if(df.loc[i,'year'] < 2021):\n#         df.loc[i,'budget'] = inflation.loc[df.loc[i, 'year'], 'index']\n#     i = i+1","bb04ddb9":"# checking for missing data\ndf.isnull().sum()","1adf6ee0":"# Visualizing missing data\ncols = df.columns[:]\ncolours = ['#9fff8c', '#fc0303'] # Red is missing. green is not missing.\nsns.heatmap(df[cols].isnull(), cmap=sns.color_palette(colours))\n# Lots of missing data is visible for budget colomn and a little for rating and gross","dc53c8de":"# Missing data percentage\nfor col in df.columns:\n    pct_missing = np.mean(df[col].isnull())\n    print('{} - {}%'.format(col, round(pct_missing*100)))","0c3ad68a":"# For rating and gross, the amount of data missing isn't too high (1% and 2% respectively)\n# There by, delete all the rows with missing rating and\/or gross\n# Also remove very little amount of missing rows in other columns except for budget\ndf_less_missing = df.dropna(subset=['name', 'rating', 'genre', 'year', 'released', 'score', 'votes',\n       'director', 'writer', 'star', 'country', 'gross', 'company',\n       'runtime'])\n# Keep missing values in budget for now, since it's quite a lot (28%)\n\n# double checking with visualizing new data frame\ncols = df_less_missing.columns[:]\ncolours = ['#9fff8c', '#fc0303'] # Red is missing. green is not missing.\nsns.heatmap(df_less_missing[cols].isnull(), cmap=sns.color_palette(colours))","14dcd437":"# For Budget vs gross comparison later, prepare a dataframe with\n# missing rows removed for budget\ndf_no_missing = df_less_missing.dropna(subset=['budget'])","49950d84":"# checking for duplicates\nsum(df.duplicated())\n# No duplicate confirmed","e22df62e":"# budget vs Revenue (gross)\n\nplt.scatter(df_no_missing['budget']\/1000000, df_no_missing['gross']\/1000000, s=40, c='cyan',\n            edgecolor='black', linewidth=1, alpha=0.75)\n# plt.xscale('log')\n# plt.yscale('log')\nplt.title('Budget vs Revenue', fontsize=18)\nplt.xlabel('Budget (In Millions)', fontsize=15)\nplt.ylabel('Revenue (In Millions)', fontsize=15)\n# best fit line\nm = df_no_missing['gross'].mean()\/df_no_missing['budget'].mean()\nb = df_no_missing['gross'].mean() - (m*df_no_missing['budget'].mean())\nplt.plot(df_no_missing['budget']\/1000000, m*df_no_missing['budget']\/1000000 + b\/1000000, c='grey')\n\n# also can use seaborn\n# sns.regplot('budget', 'gross', data=df_no_missing, scatter_kws={'color':'blue'},\n#            line_kws={'color':'black'})\n# plt.title('Budget vs Revenue', fontsize=18)\n# plt.xlabel('Budget (In Millions)', fontsize=15)\n# plt.ylabel('Revenue (In Millions)', fontsize=15)","6adf0dda":"sns.set()\ng = sns.regplot('budget', 'score', data=df_no_missing, scatter_kws={'color':'blue'},\n           line_kws={'color':'black'})\nplt.title('Budget vs rating', fontsize=18)\nplt.xlabel('Budget', fontsize=15)\nplt.ylabel('Rating (out of 10)', fontsize=15)\n\nticks = g.get_xticks()\nxlabel = ['$' + '{:,.0f}'.format(x) for x in ticks]\ng.set_xticklabels(xlabel)","e741f042":"# sort out genre by movie counts\ngenre = df.groupby(['genre']).size().sort_values(ascending=False).reset_index()\ngenre.columns = ['genre', 'count']\n\n# group last 10 genres as 'others' since they each only has less than 50 counts.\nothers = genre.loc[list(range(8,19))]['count'].sum()\ngenre = genre.drop(list(range(8,19)))\ngenre.loc[8] = ['Others', others]\n\nlabels = genre['genre']\nsize = genre['count']\nplt.pie(size, labels = labels, explode = [.1,0,0,0,0,0,0,0,0], autopct='%1.1f%%', shadow = True)\nplt.show()","a951b20c":"# Analyzing movie's genre VS success (gross-budget)\n# + Movie market size over time by genre\n# line graph\ndf_no_missing['net'] = df_no_missing['gross'] - df_no_missing['budget']","303dbb8d":"# sort out genre by movie counts again\ngenre = df.groupby(['genre']).size().sort_values(ascending=False).reset_index()\ngenre.columns = ['genre', 'count']\n\n# setup dataframe to graph\ngenre_net = df_no_missing.groupby(['genre', 'year']).net.mean().reset_index()\n\n# drop genres with negligible amount of data points\nothers = genre.loc[list(range(8,15))]['genre'].reset_index().drop(columns=['index'])['genre'].values.tolist()\nindex = []\nfor i in others:\n    index.extend(genre_net[genre_net.genre == i].index)\ngenre_net = genre_net.drop(index)\n\n# It seems like there's an error in 'Crime' genre with 'Zodiac' movie, so remove it\ngenre_net[genre_net.genre == 'Crime'].max()\ngenre_net = genre_net.drop([238])\n\n# formatting for Bokeh\ngenre_net['net'] = genre_net['net']\/1000000\ndict_group_data = {'xs':[genre_net.loc[(genre_net['genre']==name),'year'].values \\\n                         for name in genre_net['genre'].unique()],\n                  'ys': [genre_net.loc[(genre_net[\"genre\"]==name),'net'].values\\\n                         for name in genre_net['genre'].unique()],\n                  'labels': genre_net['genre'].unique(),\n                  'color': bokeh.palettes.Category20[8]}\nsource = ColumnDataSource(dict_group_data)\n\nhover = HoverTool(tooltips=[\n    ('Genre', '@labels')\n])\n\np = figure(x_axis_label = 'Year', \n           y_axis_label = 'Net Profit (in million $)', \n           width = 1000,\n           tools=[hover, \"save\",\"pan\",\"box_zoom\",\"reset\",\"wheel_zoom\"]) \n\np.multi_line(xs= \"xs\", ys= \"ys\", line_color= \"color\", source = source, legend = \"labels\",line_width=3)\np.legend.location = \"top_left\"\n\np.title.text = \"Average net profit for each Genre across years\"\np.title.align = \"center\"\np.title.text_font_size = \"20px\"\n\nshow(p)","7ca6f879":"top_countries = df['country'].value_counts().head(14).reset_index().drop([0])\n\nsns.barplot(x = top_countries.index, y = top_countries['country'])\n\nplt.title('Countries vs Number of Movies Released', fontsize = 20)\nplt.xlabel('Country', fontsize = 15)\nplt.ylabel('Movies released', fontsize = 15)\n\nplt.xticks(list(range(13)), top_countries['index'], rotation = 30)\n\nplt.show()","9c6df127":"# some of the directors' names were recorded as 'Directors' (error), so \n# remove it from the dataset\ndf = df.drop(index = df[df['director'] == 'Directors'].index)","48d64d8b":"words = dict()\nexperience = df.groupby(['director']).size().sort_values(ascending=False).reset_index()\nexperience.columns = ['director', \"frequency\"]\nfor i in range(10):\n    words[experience['director'][i]] = experience[\"frequency\"][i]\ntone = 100 # define the color of the words\nf, ax = plt.subplots(figsize=(14, 6))\nwordcloud = WordCloud(width=550,height=300, background_color='white', \n                      max_words=1628,relative_scaling=0.7,\n                      normalize_plurals=False)\nwordcloud.generate_from_frequencies(words)\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis('off')\nplt.show()","69152873":"df['net'] = df['gross'] - df['budget']","bdf9e01d":"experiences = df.groupby(['director']).net.mean().sort_values(ascending=False).head(10).reset_index()\nexperiences.columns = ['director', 'net']\nfor i in range(10):\n    words[experiences['director'][i]] = experiences[\"net\"][i]\ntone = 100 # define the color of the words\nf, ax = plt.subplots(figsize=(14, 6))\nwordcloud = WordCloud(width=550,height=300, background_color='white', \n                      max_words=1628,relative_scaling=0.7,\n                      normalize_plurals=False)\nwordcloud.generate_from_frequencies(words)\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis('off')\nplt.show()","dd13bf2d":"#Top 10 Directors with the most average net profit from movies they made including the average\nexperiences.loc[10] = ['Average', df['net'].mean()]\n\nax = sns.barplot(x = experiences['director'], y = experiences['net'])\n\nplt.title('Directors vs Net Profit', fontsize = 20)\nplt.xlabel('Director', fontsize = 15)\nplt.ylabel('Net Profit', fontsize = 15)\n\nplt.xticks(list(range(11)), experiences['director'], rotation = 30)\nticks = ax.get_yticks()\nylabel = ['$' + '{:,.0f}'.format(x) for x in ticks]\nax.set_yticklabels(ylabel)\n\nplt.show()","9317712c":"# # Top 15 main actors who had the highest average net profit in the movies they were in as main actor\n# actor = df.groupby(['star']).net.mean().sort_values(ascending=False).head(15).reset_index()\n# actor.columns = ['actor', 'net']\n\n# # Average profit of the movies with top 15 actors\n# actor['net'].mean()\n\n# # Average profit of all movies\n# df['net'].mean()\n\n# # Adding average data points \n# actor.loc[15] = ['Average (Top 15 Actors)', actor['net'].mean()]\n# actor.loc[16] = ['Average (Of All Movies)', df['net'].mean()]\n# # Bar chart visualizing the numbers\n# ax = sns.barplot(x = actor['net'], y = actor['actor'])\n\n# plt.title('Actor vs Net Profit', fontsize = 20)\n# plt.xlabel('Net Profit', fontsize = 15)\n# plt.ylabel('Actor', fontsize = 15)\n\n# plt.yticks(list(range(17)), actor['actor'], rotation = 0)\n# ticks = ax.get_xticks()\n# xlabel = ['$' + '{:,.0f}'.format(x) for x in ticks]\n# ax.set_xticklabels(xlabel)\n\n# plt.show()","d732794e":"df[df['star'] == 'Donald Glover']\n# Donald Glover was the main (voice) actor for The Lion King, just one movie.\n# It appears that comparing Actor and average net profit of movies they were in isn't a good \n# comparison for the question.\n\n# So, lets compare overall sum of net profit (of the movies they were in)\n# Top 15 main actors - highest sum of net profit in the movies they were in as main actor\nactor = df.groupby(['star']).net.sum().sort_values(ascending=False).head(15).reset_index()\nactor.columns = ['actor', 'net']\n\n# profit of the movies with top 15 actors\nactor['net'].mean()\n\n# Average sum of profit of all actors\ndf.groupby(['star']).net.sum().sort_values(ascending=False).reset_index()['net'].mean()\n\n# Adding average data points \nactor.loc[15] = ['Average (Top 15 Actors)', actor['net'].mean()]\nactor.loc[16] = ['Average (Of All Movies)', df.groupby(['star']).net.sum().sort_values(ascending=False).reset_index()['net'].mean()]\n# Bar chart visualizing the numbers\nax = sns.barplot(x = actor['net'], y = actor['actor'])\n\nplt.title('Top Actors vs Net Profit', fontsize = 20)\nplt.xlabel('Net Profit', fontsize = 15)\nplt.ylabel('Actor', fontsize = 15)\n\nplt.yticks(list(range(17)), actor['actor'], rotation = 0)\nticks = ax.get_xticks()\nxlabel = ['$' + '{:,.0f}'.format(x) for x in ticks]\nax.set_xticklabels(xlabel)\n\nplt.show()","b6b62c44":"### Genre vs Success\nGenre of a movie could affect its success depending on what genre is trending\n***","09fc382d":"The graph above shows the positive correlation between budget and revenue of movies.\nGenerally, movies with bigger budget made more revenue","72f26afb":"## Data Cleaning","46d8badd":"### Dataset: Movie Industry (Version 2) dataset from Kaggle (scrapped from IMDb). \n\n### Attributes:\n\n    budget: the budget of a movie. Some movies don't have this, so it appears as 0\n    company: the production company\n    country: country of origin\n    director: the director\n    genre: main genre of the movie.\n    gross: revenue of the movie\n    name: name of the movie\n    rating: rating of the movie (R, PG, etc.)\n    released: release date (YYYY-MM-DD)\n    runtime: duration of the movie\n    score: IMDb user rating\n    votes: number of user votes\n    star: main actor\/actress\n    writer: writer of the movie\n    year: year of release","e375096e":"Next, lets see if the main actor of a movie affects the success of a movie.","38f3e1cd":"I used heatmaps to visualize missing values in the dataset for data cleaning","cb07fa17":"The graph shows that the ratings of movies got only slightly better as the budget increased; the positive correlation appears to quite weak (regression line looks nearly flat). Based on this graph, it's possible to presume that just spending more money won't make a good movie.","a9b514c5":"***","752292dc":"This bar graph shows number of foreign movies released in US by the country each movie is from. The visualization shows that foreign movie market is dominated by movies from the West (UK, France, Canada, etc). For the record, Japan, India, and Honkong movies were in the top 10, but the number was vastly small compared to the number of movies from UK or France.","c885009d":"### Main Actors","eccdb799":"### Foreign Movies","8eaa5a1c":"### Budget vs Success","a143f54f":"### Movie Directors - \nHighest Number of Movies Directed vs Highest Average Profit, and more","763d8166":"\u200b\n## __Essential Questions :__\n\n- What are some trends in the movie industry?\n    - Did movie become more\/less popular?\n    - Is movie getting less profitable?\n    \n    - How does the budget of a movie affect the success of the movie and its rating?\n    - Which genres are the most profitable\/popular?\n    - How many forign films were released in US and which countries are they from?\n    - Does a director's experience affect the success of a movie?\n    - How much do director and main actor matter for the success of a movie?","dfb1e467":"Next, lets compare each movie genre's average profit over time (1980~2020); the interactive graph was created using 'Bokeh' library.","43c76d02":"Now, lets check out if the budget of a movie affects its audiences' experience (rating).","ddd9c5fa":"The graph above shows that certain (famous) actors can generate more profit for the movie they are in","ff612712":"This graph clearly visualizes historical trend of movie genres (their net profit across the years). To note some of the abvious findings in the graph, Animation genre had relatively consistent increase in profit over the years; Adventure genre had some spikes in profit between 2011 to 2016 but started declining after 2016.\n***","1bc74c23":"## Data Visualization\n***","f03dcac4":"It appears that the top directors with the most experiences of directing movies are not the ones who made movies with the most profit. While at it, lets compare the average net profit of the movies the top directors made (and compare them with the average).","619fedaf":"***","ac45468f":"First, lets compare the number of movies created in each genre using a pie chart"}}