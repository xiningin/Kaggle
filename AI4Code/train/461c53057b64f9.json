{"cell_type":{"f727ed49":"code","1b079770":"code","a8037d98":"code","5a3c3d28":"code","02bb60e8":"code","be2940ff":"code","fcc85499":"code","057bb66b":"code","5a78bf3f":"code","c1b3f2f1":"code","30602f74":"code","2ee938a7":"code","bed1175b":"code","6434b668":"code","4c95f79f":"code","38a99c89":"code","659d9fae":"code","52dd70ac":"code","037f6a5c":"code","957cb24c":"code","2337fe13":"code","c0ab1d74":"code","b884c856":"code","7dea2077":"code","35861737":"code","324d6a7f":"code","b8ec634b":"code","0f44a71f":"code","42c135ce":"code","dd016e77":"code","7c4be611":"code","43520a64":"code","0b4f334b":"code","b2fdbdd3":"code","ff998682":"code","c1692b53":"code","67a54ff6":"code","82fdca34":"code","9fc1161c":"code","52ed77f6":"markdown","2fa8c3c2":"markdown","7170e62c":"markdown","0750e325":"markdown","a4b1305b":"markdown","658549c7":"markdown","6fa208a7":"markdown","6bbec296":"markdown","eb2f8dc1":"markdown","3c3d693f":"markdown","0e1d95ef":"markdown","d2d63764":"markdown","e715806a":"markdown"},"source":{"f727ed49":"import math\nimport numpy as np\nimport pandas as pd\nimport pandas_profiling\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error","1b079770":"pd.options.display.max_rows = 1000\npd.options.display.max_columns = 1000","a8037d98":"beers_df = pd.read_csv( '..\/input\/beer_reviews.csv' )","5a3c3d28":"beers_df.shape","02bb60e8":"beers_df[ 'review_time' ] = pd.to_datetime( beers_df[ 'review_time' ], unit = 's' )","be2940ff":"beers_df.head()","fcc85499":"beers_df.dtypes","057bb66b":"#pandas_profiling.ProfileReport( beers_df )","5a78bf3f":"# I consider reviews from 2002 because for previous years there are no much information.\nbeers_df = beers_df.loc[ beers_df[ 'review_time' ].dt.year >= 2002 ]","c1b3f2f1":"beers_df.shape","30602f74":"group_by_date = beers_df[ [ 'review_time' ] ].groupby( beers_df[ 'review_time' ].dt.date ).agg( [ 'count' ] )\nplt.figure( figsize = ( 20, 5 ) )\nplt.plot( group_by_date )\nplt.xlabel( 'Date' )\nplt.ylabel( 'Number of reviews' )\nplt.title( 'Number of Reviews per Day' )\nplt.show()","2ee938a7":"# Count of unique breweries => Integrity issues evidenced => Id is not considered for subsequent analysis\nprint( 'Unique breweries' )\nprint( 'By id:', beers_df[ 'brewery_id' ].nunique() )\nprint( 'By name:', beers_df[ 'brewery_name' ].nunique() )","bed1175b":"# Count of unique beers => Integrity issues evidenced => Id is not considered for subsequent analysis\nprint( 'Unique beers' )\nprint( 'By id:', beers_df[ 'beer_beerid' ].nunique() )\nprint( 'By name:', beers_df[ 'beer_name' ].nunique() )","6434b668":"# Count of unique users\nprint( 'Unique users:', beers_df[ 'review_profilename' ].nunique() )\nprint( 'Unique users with more than 1 review:', beers_df[ 'review_profilename' ].value_counts()[ beers_df[ 'review_profilename' ].value_counts() > 1 ].shape[ 0 ], '-' , str( round( beers_df[ 'review_profilename' ].value_counts()[ beers_df[ 'review_profilename' ].value_counts() > 1 ].shape[ 0 ] \/ beers_df[ 'review_profilename' ].nunique(), 2 ) * 100 ) + '%' )","4c95f79f":"# Reviews by user\nbeers_df[ 'review_profilename' ].value_counts().head()","38a99c89":"# A beer subset removing review information is created \ngrouped_beers_df = beers_df[ [ 'beer_name', 'brewery_name', 'beer_style', 'beer_abv' ] ].drop_duplicates()","659d9fae":"# Count of unique beers in grouped dataset => Integrity issues evidenced with respect to previous analysis => For beer identification, I will use these 4 keys\ngrouped_beers_df.shape","52dd70ac":"# Count of beers with the same name but different brewery, style or AVB%\ngrouped_beers_df.loc[ grouped_beers_df.duplicated( subset = [ 'beer_name' ], keep = False ) ].sort_values( by = 'beer_name'  ).shape","037f6a5c":"# Beers by brewery\ngrouped_beers_df[ 'brewery_name' ].value_counts( dropna = False ).head()","957cb24c":"# Beers by style\ngrouped_beers_df[ 'beer_style' ].value_counts( dropna = False ).head()","2337fe13":"plt.figure()\nplt.hist( grouped_beers_df[ 'beer_abv' ], bins = 50 )\nplt.xlabel( 'ABV%' )\nplt.ylabel( 'Frecuency' )\nplt.title( 'Histogram by ABV%' )\n#plt.yscale( 'log' )\nplt.show()","c0ab1d74":"# Pearson correlation\nsns.heatmap( beers_df[ [ 'review_overall', 'review_aroma', 'review_appearance', 'review_palate', 'review_taste', 'beer_abv' ] ].corr(), center = 0,  vmin = -1, vmax = 1 )\nplt.title( 'Pearson Correlation' )","b884c856":"# Spearman correlation\nsns.heatmap( beers_df[ [ 'review_overall', 'review_aroma', 'review_appearance', 'review_palate', 'review_taste', 'beer_abv' ] ].corr( method = 'spearman' ), center = 0,  vmin = -1, vmax = 1 )\nplt.title( 'Spearman Correlation' )","7dea2077":"# An new meassure is created by averaging review by factor\nbeers_df[ 'review_average' ] = round( ( ( beers_df[ 'review_overall' ] + beers_df[ 'review_aroma' ] + beers_df[ 'review_appearance' ] + beers_df[ 'review_palate' ] + beers_df[ 'review_taste' ] ) \/ 5 ) * 2 ) \/ 2","35861737":"# Groupping by different review factors for visualization purposes\ngroup_by_review_overall = beers_df[ 'review_overall' ].value_counts( dropna = False ).reset_index().rename( columns = { 'index' : 'review', 'review_overall' : 'overall' } ).sort_values( by = 'review' )\ngroup_by_review_aroma = beers_df[ 'review_aroma' ].value_counts( dropna = False ).reset_index().rename( columns = { 'index' : 'review', 'review_aroma' : 'aroma' } ).sort_values( by = 'review' )\ngroup_by_review_appearance = beers_df[ 'review_appearance' ].value_counts( dropna = False ).reset_index().rename( columns = { 'index' : 'review', 'review_appearance' : 'appearance' } ).sort_values( by = 'review' )\ngroup_by_review_palate = beers_df[ 'review_palate' ].value_counts( dropna = False ).reset_index().rename( columns = { 'index' : 'review', 'review_palate' : 'palate' } ).sort_values( by = 'review' )\ngroup_by_review_taste = beers_df[ 'review_taste' ].value_counts( dropna = False ).reset_index().rename( columns = { 'index' : 'review', 'review_taste' : 'taste' } ).sort_values( by = 'review' )\ngroup_by_review_average = beers_df[ 'review_average' ].value_counts( dropna = False ).reset_index().rename( columns = { 'index' : 'review', 'review_average' : 'average' } ).sort_values( by = 'review' )\n\ngroup_by_review_overall[ 'review' ] = group_by_review_overall[ 'review' ].astype( str )\ngroup_by_review_aroma[ 'review' ] = group_by_review_aroma[ 'review' ].astype( str )\ngroup_by_review_appearance[ 'review' ] = group_by_review_appearance[ 'review' ].astype( str )\ngroup_by_review_palate[ 'review' ] = group_by_review_palate[ 'review' ].astype( str )\ngroup_by_review_taste[ 'review' ] = group_by_review_taste[ 'review' ].astype( str )\ngroup_by_review_average[ 'review' ] = group_by_review_average[ 'review' ].astype( str )\n\ngroup_by_review = group_by_review_overall.merge( group_by_review_aroma, how = 'outer', on = [ 'review' ] )\ngroup_by_review = group_by_review.merge( group_by_review_appearance, how = 'outer', on = [ 'review' ] )\ngroup_by_review = group_by_review.merge( group_by_review_palate, how = 'outer', on = [ 'review' ] )\ngroup_by_review = group_by_review.merge( group_by_review_taste, how = 'outer', on = [ 'review' ] )\ngroup_by_review = group_by_review.merge( group_by_review_average, how = 'outer', on = [ 'review' ] )\ngroup_by_review = group_by_review.fillna( 0 )","324d6a7f":"cm = plt.cm.get_cmap( 'tab10' ).colors\nf, ( ( ax1, ax2, ax3 ), ( ax4, ax5, ax6 ) ) = plt.subplots( 2, 3, sharex = 'col', sharey = 'row', figsize = ( 17, 10 ) )\nax1.barh( group_by_review[ 'review' ], group_by_review[ 'overall' ], color = cm )\nax1.set_title( 'Review Overall' )\nax2.barh( group_by_review[ 'review' ], group_by_review[ 'aroma' ], color = cm )\nax2.set_title( 'Review Aroma' )\nax3.barh( group_by_review[ 'review' ], group_by_review[ 'appearance' ], color = cm )\nax3.set_title( 'Review Appearance' )\nax4.barh( group_by_review[ 'review' ], group_by_review[ 'palate' ], color = cm )\nax4.set_title( 'Review Palate' )\nax5.barh( group_by_review[ 'review' ], group_by_review[ 'taste' ], color = cm )\nax5.set_title( 'Review Taste' )\nax6.barh( group_by_review[ 'review' ], group_by_review[ 'average' ], color = cm )\nax6.set_title( 'Review Average' )\nf.suptitle( 'Distribution of Reviews by Value' )","b8ec634b":"# This is a python implementarion of the Lower bound of Wilson score confidence interval for a Bernoulli parameter\n# Implementation details: http:\/\/www.evanmiller.org\/how-not-to-sort-by-average-rating.html?fbclid=IwAR2RNIB8geL9V0V9ereqidgRMasdytDOoqlGfCKWOcrRHKsUHFzMb7Xkemw\n\n# pos: number of positive ratings\n# n: total number of ratings\ndef ci_lower_bound( pos, n ):\n    if n == 0:\n        return 0\n    z = 1.96 # For a IC of 0.95\n    phat = 1.0 * pos \/ n\n    return ( phat + ( z ** 2 ) \/ ( 2 * n ) - z * math.sqrt( ( phat * ( 1 - phat ) + ( z ** 2 ) \/ ( 4 * n ) ) \/ n ) ) \/ ( 1 + ( z ** 2 ) \/ n )","0f44a71f":"# Aggregation function for reviews\n# Positive reviews are defined as a constant fraction of their real value\n# Aggregation is performed using the Lower bound of Wilson score confidence interval for a Bernoulli parameter\ndef agg_reviews( reviews ):\n    pos = 0\n    for index, review in reviews[ reviews >= 3 ].iteritems():\n        pos += review \/ 5\n    #pos = ratings[ ratings >= 3 ].shape[ 0 ]\n    return ci_lower_bound( pos, reviews.shape[ 0 ] ) * 5","42c135ce":"# Grouping beers and aggregating reviews\ngrouped_beers_df = beers_df.groupby( [ 'beer_name', 'brewery_name', 'beer_style', 'beer_abv' ] ) \\\n    .agg( { 'review_overall' : agg_reviews, 'review_aroma' : agg_reviews, 'review_appearance' : agg_reviews, 'review_palate' : agg_reviews, 'review_taste' : agg_reviews, 'review_average' : agg_reviews, 'review_profilename' : 'count' } ).reset_index() \\\n    .rename( columns = { 'review_profilename' : 'number_of_reviews' } )","dd016e77":"# Count of unique beers\ngrouped_beers_df[ 'beer_name' ].nunique()","7c4be611":"# TOP 5 beers by number of reviews\ngrouped_beers_df.sort_values( by = 'number_of_reviews', ascending = False ).head()","43520a64":"# Beers with ABV% higher than 30\ngrouped_beers_df.loc[ grouped_beers_df[ 'beer_abv' ] > 30 ] \\\n    .sort_values( by = [ 'beer_abv' ], ascending = False )[ [ 'brewery_name', 'beer_name', 'beer_abv' ] ]","0b4f334b":"plt.figure( figsize = ( 7, 5 ) )\nplt.scatter( grouped_beers_df[ 'number_of_reviews' ], grouped_beers_df[ 'review_average' ], marker ='.', alpha = .5 )\nplt.xlabel( 'Number od Reviews' )\nplt.ylabel( 'Review Average' )\nplt.show()","b2fdbdd3":"grouped_beers_df.sort_values( by = 'review_average', ascending = False ).head( 3 )","ff998682":"# Defining the linear model\nlinear_model = LinearRegression( normalize = True )","c1692b53":"# Training and generating predictions for the model\nlinear_model.fit( X = beers_df[ [ 'review_aroma', 'review_appearance', 'review_palate', 'review_taste' ] ], y = beers_df[ 'review_overall' ] )\npreds = linear_model.predict( beers_df[ [ 'review_aroma', 'review_appearance', 'review_palate', 'review_taste' ] ] )","67a54ff6":"# Coeffifients for each feature (aroma, appearance, palate, taste)\nlinear_model.coef_","82fdca34":"# Validating the error in the model\n# Apparently, a linear model is enough to represent the phenomenon evidencing a global error of 0.42 when the range of possible values for the target is betwenn 0 and 5\n# Most sophisitcated validation schemas must be developed\nnp.sqrt( mean_squared_error( beers_df[ 'review_overall' ], preds ) )","9fc1161c":"grouped_beers_df.sort_values( by = [ 'review_aroma', 'review_appearance' ], ascending = False ).head( 10 ) \\\n    [ 'beer_style' ].unique().tolist()","52ed77f6":"These are the beer styles for the top 10 of beers with highest aroma and appearence reviews.","2fa8c3c2":"In terms of correlation (pearson or spearman), the ranking seems to be: taste, palate, aroma and appearance. \n\nA most sofisticated perspective can be training a linear regression model.","7170e62c":"Similar to results by correlation, the coefficients contributing more information to the model are the corresponding to taste and aroma features.","0750e325":"# If I tipically enjoy a beer due to its aroma and appearance, which beer style should I try?","a4b1305b":"# Which of the factors (aroma, taste, appearance, palate) are most important in determining the overall quality of a beer?","658549c7":"# Aggregating reviews","6fa208a7":"# If you had to pick 3 beers to recommend using only this data, which would you pick?","6bbec296":"These are the 3 beers with highest review average. As expected, these beers also have an important number of reviews.","eb2f8dc1":"# Data loading and exploratory analysis","3c3d693f":"Reviews after grouping are in function of individual reviews given by each user and number of reviews for that beer. Beers with many high individual ratings likely will have a high grouped review. ","0e1d95ef":"Data available in: https:\/\/www.kaggle.com\/rdoume\/beerreviews\n\nMethodology and experimentation schema based on: https:\/\/www.slideshare.net\/tanyacash\/strata-2017-nyc-how-to-hire-and-test-for-data-skills-a-onesizefitsall-interview-kit","d2d63764":"Schorschbr\u00e4u is the brewery producing beers with highest ABV%, followed by BrewDog and De Struise Brouwers.","e715806a":"# Which brewery produces the strongest beers by ABV%?"}}