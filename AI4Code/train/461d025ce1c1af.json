{"cell_type":{"b98a3563":"code","5f939f05":"code","c947b584":"code","147217b2":"code","11873c4e":"code","7e723c17":"code","bfaa3a98":"code","1fe3185e":"code","b257e47e":"code","5eb14895":"code","157ca63d":"code","686150a7":"code","e426e427":"code","aec07cb0":"code","bf1aaa20":"code","d3c203a9":"code","1645acf2":"code","138d7276":"code","d32c72e5":"code","9aa9ccb3":"code","80cca486":"code","afe070ff":"code","ea92ee34":"code","ff6e3d0e":"code","a3327215":"code","ebfdbd26":"code","86476290":"code","6e74fe56":"code","fe938593":"code","a998e979":"code","4ed3bbec":"code","4bc3e0cb":"code","1c2a65c4":"code","5038466c":"code","12c74da0":"code","aa9c3540":"code","88beb309":"code","21b8f5e1":"code","912eb629":"code","eaa5894d":"code","0d02e260":"code","edd37fe6":"code","683f849b":"code","df058806":"code","ecadc3ba":"code","79e06b81":"code","cc9949c0":"code","e85789d2":"code","3eae45d9":"code","01455725":"code","cac2212c":"code","75b7b0bd":"code","2513ff6a":"code","8d973966":"code","dc683454":"code","b4677f06":"code","08e23c6f":"code","31f6272c":"code","45da16af":"code","002bc464":"code","7e3b9a34":"code","d825e615":"code","318f9bb6":"code","21664940":"code","f905779d":"code","4440a58e":"code","ee37c8e7":"code","a81f3c6b":"code","59cafa2a":"code","87b5211e":"code","b95b0d97":"code","ba5297e0":"code","bec99757":"code","43136d07":"code","7632ca3d":"code","cfa4a4d3":"code","2107b5b5":"code","a6da7725":"code","8e3c0bfb":"code","38ca3464":"code","8d53fbab":"code","eb8451f7":"code","33081b40":"code","a7a9fdd7":"markdown","56d00a4a":"markdown","e464c972":"markdown","548fadf2":"markdown","0b506584":"markdown","4865340f":"markdown","a4791d57":"markdown","4d056f12":"markdown","5d8a0688":"markdown","57e95843":"markdown","54431424":"markdown","7e5c9e1b":"markdown","42e680f8":"markdown","b104cf56":"markdown","17c5c71d":"markdown","a9a96c1f":"markdown","96c69ff4":"markdown","93c97434":"markdown","2bef4f1c":"markdown","bccf4435":"markdown","3eddd7ea":"markdown","fd97181b":"markdown","1b5f4613":"markdown","024ea131":"markdown","62aa063e":"markdown","c69bfb21":"markdown","52519e23":"markdown","31d3f807":"markdown","3fef33ca":"markdown","b37a4feb":"markdown","f965cdc7":"markdown","d6eb50f1":"markdown","ccad8f94":"markdown","c84aa4a7":"markdown","5bbf2ead":"markdown","181a1497":"markdown","bb1783b8":"markdown","57ac20ec":"markdown","d421d10c":"markdown","9b2f76ce":"markdown","db4bd3a3":"markdown","f59c23ae":"markdown","460649ef":"markdown","dcbd7598":"markdown","901286d8":"markdown","b7e0830c":"markdown","aa7d7237":"markdown","99b0f25a":"markdown","a965b6a8":"markdown","1fb655cd":"markdown","b40e7032":"markdown","a5c65e69":"markdown"},"source":{"b98a3563":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5f939f05":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# machine learning\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_score","c947b584":"train=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest_df=test.copy() #used in prediction\n","147217b2":"train.head()","11873c4e":"#Feature info\ntrain.info()\nprint('-'*40)\ntest.info()","7e723c17":"print(train.isnull().sum())\ntest.isnull().sum()","bfaa3a98":"print(round(train['Cabin'].isnull().sum()\/train.shape[0]*100,2) , \n      \"% values of 'Cabin' feature is not filled in the train set \")\nprint(round(test['Cabin'].isnull().sum()\/test.shape[0]*100,2) , \n      \"% values of 'Cabin' feature is not filled in the test set \")","1fe3185e":"#Dropping \"Cabin\" feature from dataset\ntrain=train.drop('Cabin',axis=1)\ntest=test.drop('Cabin',axis=1)","b257e47e":"print(round(train['Age'].isnull().sum()\/train.shape[0]*100,2) , \n      \"% values of 'Age' feature is not filled in the train set \")\nprint(round(test['Age'].isnull().sum()\/test.shape[0]*100,2) , \n      \"% values of 'Age' feature is not filled in the test set \")","5eb14895":"#imputing for embarked in train set and fare in test set\ntrain['Embarked']=train['Embarked'].fillna(train['Embarked'].mode()[0])\ntest['Fare']=test['Fare'].fillna(train['Fare'].mean())","157ca63d":"train.columns #digging deep in to each and every features","686150a7":"train.describe()","e426e427":"#Survived feature analysis\ndata=pd.DataFrame(train['Survived'].value_counts())\nprint(data)\nsns.barplot(data.index,data['Survived'])\nplt.legend()\nplt.show()","aec07cb0":"#Passenger class feature analysis\ndata=pd.DataFrame(train['Pclass'].value_counts())\nprint(data)\nsns.barplot(data.index,data['Pclass'])\nplt.legend()\nplt.show()","bf1aaa20":"train['Name'][:5] #Title can be extracted from name which can help us in predicting survival","d3c203a9":"#Passenger's Sex feature analysis\ndata=pd.DataFrame(train['Sex'].value_counts())\nprint(data)\nsns.barplot(data.index,data['Sex'])\nplt.legend()\nplt.show()","1645acf2":"#Age feature analysis\nprint(\"Passengers with more than 60 years of age is\",len(train['Age'][train['Age']>60]))\ntrain['Age'].hist(bins=10)\n","138d7276":"# Sibsp Feature\nprint(len(train[train['SibSp']<1]),\" passengers are without siblings or spouses \")\nsns.distplot(train['SibSp'])","d32c72e5":"# Parch Feature\nprint(len(train[train['Parch']<1]),\" passengers are without Parents or child \")\n(train['Parch']).hist(bins=20)","9aa9ccb3":"print(len(train[(train['SibSp']==0) & (train['Parch']==0)]), \"of 891 are travelling single\")","80cca486":"# Fare feature\nsns.distplot(train['Fare'],bins=20) \nplt.show()                                #We have outliers\ntrain['Fare'].describe()","afe070ff":"train['Fare'].quantile(0.82) ","ea92ee34":"#Embarked feature\ndata=pd.DataFrame(train['Embarked'].value_counts())\nprint(data)\nsns.barplot(data.index,data['Embarked'])\nplt.show()\n","ff6e3d0e":"train.corr()","a3327215":"#Let's compare our features with the target variable Survived feature.\nsns.barplot(train['Survived'],train['Sex'])\n","ebfdbd26":"#Survived vs Embarked\nsns.barplot(train['Survived'],train['Embarked'])","86476290":"#Survived vs Pclass\nsns.barplot(train['Survived'],train['Pclass'])","6e74fe56":"#Survived vs Fare\nsns.barplot(train['Survived'],train['Fare'])","fe938593":"#Multivariate analysis\ns=sns.FacetGrid(train, col='Survived')\ns.map(plt.hist, 'Age', bins=20)","a998e979":"s=sns.FacetGrid(train, col='Survived')\ns.map(plt.hist, 'Age', bins=20)","4ed3bbec":"grid = sns.FacetGrid(train, col='Survived', row='Pclass')\ngrid.map(plt.hist, 'Age', alpha=.5, bins=20)\ngrid.add_legend();","4bc3e0cb":"sns.barplot(train['Pclass'],train['Survived'],hue=train['Sex'])","1c2a65c4":"\ntrain.pivot_table( index=['Pclass','Sex'], columns='Survived',values='Fare' ,aggfunc='count')\n\n","5038466c":"s = sns.FacetGrid(train, row='Embarked', col='Survived', size=2.2, aspect=1.6)\ns.map(sns.barplot, 'Sex', 'Fare', alpha=.5, ci=None)\ns.add_legend()","12c74da0":"train.head()","aa9c3540":"#Dropping useless features 'passengerId','Ticket'\ntrain=train.drop(['PassengerId','Ticket'],axis=1)\ntest=test.drop(['PassengerId','Ticket'],axis=1)\n","88beb309":"#we shall apply conversion to both train and test set\ncom = [train, test] #creating a list\n","21b8f5e1":"# Extracting title from Name feature\nfor df in com:\n    df['Title'] = df.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)","912eb629":"pd.crosstab(train['Title'], train['Sex'])","eaa5894d":"train['Title'].value_counts()","0d02e260":"#compressing title feature\nfor df in com:\n    df['Title'] = df['Title'].replace(['Lady', 'Countess','Capt', 'Col',\\\n \t'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n\n    df['Title'] = df['Title'].replace('Mlle', 'Miss')\n    df['Title'] = df['Title'].replace('Ms', 'Miss')\n    df['Title'] = df['Title'].replace('Mme', 'Mrs')","edd37fe6":"#title vs survived\nsns.barplot(train['Title'],train['Survived'])","683f849b":"# encoding title feature\ntitle_mapp = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Rare\": 5}\nfor df in com:\n    df['Title'] = df['Title'].map(title_mapp)\n    df['Title'] = df['Title'].fillna(0)","df058806":"#remove name feature \n\ntrain=train.drop('Name',axis=1)\ntest=test.drop('Name',axis=1)\n","ecadc3ba":"#Encoding Sex feature\ntrain['Sex']=train['Sex'].map({'female':1,'male':0}).astype(int)\ntest['Sex']=test['Sex'].map({'female':1,'male':0}).astype(int)\n\n","79e06b81":"#We will guess age with sex and Pclass features and impute the values\nguess_ages = np.zeros((2,3))\nguess_ages","cc9949c0":"com=[train,test]\nfor dataset in com:\n    for i in range(0, 2):\n        for j in range(0, 3):\n            guess_df = dataset[(dataset['Sex'] == i) & \\\n                                  (dataset['Pclass'] == j+1)]['Age'].dropna()\n\n            \n\n            age_guess = guess_df.median()\n\n            # Convert random age float to nearest .5 age\n            guess_ages[i,j] = int( age_guess\/0.5 + 0.5 ) * 0.5\n            \n    for i in range(0, 2):\n        for j in range(0, 3):\n            dataset.loc[ (dataset.Age.isnull()) & (dataset.Sex == i) & (dataset.Pclass == j+1),\\\n                    'Age'] = guess_ages[i,j]\n\n    dataset['Age'] = dataset['Age'].astype(int)\n\ntrain.head()","e85789d2":"test.info()","3eae45d9":"test.isnull().sum().sum()","01455725":"train['AgeBand'] = pd.cut(train['Age'], 4)\ntrain[['AgeBand', 'Survived']].groupby(['AgeBand'], as_index=False).mean().sort_values(by='AgeBand', ascending=True)","cac2212c":"com=[train,test]","75b7b0bd":"for dataset in com:    \n    dataset.loc[ dataset['Age'] <= 20, 'Age'] = 0\n    dataset.loc[(dataset['Age'] > 20) & (dataset['Age'] <= 40), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 40) & (dataset['Age'] <= 60), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 60) , 'Age'] = 3\n    \ntrain.head()","2513ff6a":"#dropping age band feature, we already imputed age bands to 'Age' feature\ntrain = train.drop(['AgeBand'], axis=1)","8d973966":" # Extracting family size\ncom = [train, test]\nfor dataset in com:\n    dataset['FamilySize'] = dataset['SibSp'] + dataset['Parch'] + 1\n\ntrain[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=False).mean().sort_values(by='Survived', ascending=False)","dc683454":"#We can create another feature called 'is alone'\ncom=[train, test]\nfor dataset in com:\n    dataset['IsAlone'] = 0\n    dataset.loc[dataset['FamilySize'] == 1, 'IsAlone'] = 1\n\ntrain[['IsAlone', 'Survived']].groupby(['IsAlone'], as_index=False).mean()","b4677f06":"# We can drop Parch,Sibsp and family size features in favor of \"is alone\"\ntrain = train.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)\ntest = test.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)\ncom = [train, test]\n","08e23c6f":"train.info()","31f6272c":"\ntest.info()","45da16af":"com=[train,test]\nfor dataset in com:\n    dataset['Embarked'] = dataset['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\n\ntrain.head()","002bc464":"#We can now create Fare band\ntrain['FareBand'] = pd.qcut(train['Fare'], 4)\ntrain[['FareBand', 'Survived']].groupby(['FareBand'], as_index=False).mean().sort_values(by='FareBand', ascending=True)","7e3b9a34":"com=[train, test]\nfor dataset in com:\n    dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] = 0\n    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2\n    dataset.loc[ dataset['Fare'] > 31, 'Fare'] = 3\n    dataset['Fare'] = dataset['Fare'].astype(int)\n\ntrain = train.drop(['FareBand'], axis=1)","d825e615":"train.head(5)","318f9bb6":"test.head(2)","21664940":"tr=train.copy()\nte=test.copy()","f905779d":"#Label encoding version\nX_train=train.drop('Survived',axis=1)\nY_train=train['Survived']\nX_test=test","4440a58e":"X_train.head(2)","ee37c8e7":"X_test.head(2)","a81f3c6b":"logreg=LogisticRegression()\nlogreg.fit(X_train, Y_train)\nY_pred_log = logreg.predict(X_test)\nacc=cross_val_score(logreg, X_train, Y_train, cv=5,scoring='accuracy')\nacc_log = round(acc.mean() * 100, 2)\n\nacc_log\n","59cafa2a":"svc = SVC()\nsvc.fit(X_train, Y_train)\nY_pred_svc = svc.predict(X_test)\nacc=cross_val_score(svc, X_train, Y_train, cv=5,scoring='accuracy')\nacc_svc = round(acc.mean() * 100, 2)\n\nacc_svc","87b5211e":"knn = KNeighborsClassifier(n_neighbors =6)\nknn.fit(X_train, Y_train)\nY_pred_knn = knn.predict(X_test)\nacc=cross_val_score(knn, X_train, Y_train, cv=5,scoring='accuracy')\nacc_knn = round(acc.mean() * 100, 2)\n\nacc_knn","b95b0d97":"gaussian = GaussianNB()\ngaussian.fit(X_train, Y_train)\nY_pred_gaussian = gaussian.predict(X_test)\nacc=cross_val_score(gaussian, X_train, Y_train, cv=5,scoring='accuracy')\nacc_gc = round(acc.mean() * 100, 2)\n\nacc_gc","ba5297e0":"decision_tree = DecisionTreeClassifier()\ndecision_tree.fit(X_train, Y_train)\nY_pred_DT = decision_tree.predict(X_test)\nacc=cross_val_score(decision_tree, X_train, Y_train, cv=5,scoring='accuracy')\nacc_dt = round(acc.mean() * 100, 2)\n\nacc_dt","bec99757":"gb=RandomForestClassifier()\nparam={\n    'n_estimators' :[150,300,500],\n    'max_depth':[7,20,30],\n    \n}\ngs=GridSearchCV(gb,param,cv=5,n_jobs=-1)\ncv_fit=gs.fit(X_train,Y_train)\nY_pred_RF=gs.predict(X_test)","43136d07":"acc_rf=gs.best_score_*100\nacc_rf","7632ca3d":"gb=GradientBoostingClassifier()\nparam={\n    'n_estimators' :[100,150],\n    'max_depth':[7,11,15],\n    'learning_rate':[0.1]\n}\ngs=GridSearchCV(gb,param,cv=5,n_jobs=-1)\ncv_fit=gs.fit(X_train,Y_train)\nY_pred_gb=cv_fit.predict(X_test)\n","cfa4a4d3":"gs.best_params_","2107b5b5":"acc_gb=gs.best_score_*100","a6da7725":"models = pd.DataFrame({\n    'Model': ['Support Vector Machines', 'KNN', 'Logistic Regression', \n              'Random Forest', 'Naive Bayes', \n               \n              'Decision Tree','Gradient Boosting classifier'],\n    'Score': [acc_svc, acc_knn, acc_log, \n              acc_rf, acc_gc,  \n              acc_dt,acc_gb]})\nmodels.sort_values(by='Score', ascending=False)","8e3c0bfb":"submission = pd.DataFrame({\n        \"PassengerId\": test_df[\"PassengerId\"],\n        \"Survived\": Y_pred_RF\n    })\n#submission.to_csv('Submission_RFo', index=False)","38ca3464":"random_forest = RandomForestClassifier(n_estimators=500,max_depth=30)\nrandom_forest.fit(X_train, Y_train)\nrandom_forest.score(X_train, Y_train)\nimportance = random_forest.feature_importances_","8d53fbab":"importance","eb8451f7":"test.columns.tolist()","33081b40":"pd.DataFrame(importance,test.columns.tolist())","a7a9fdd7":"Passengers from Cherbough mostly survived","56d00a4a":"## <font color='blue'>EDA<\/font>\n\n### Univariate analysis","e464c972":"### Gradient Boosting classifier","548fadf2":"Even mid age groups in Passenger class 1 survived.<br>\nSome of the low age groups in Passenger class 3 couldn't survive.<br>\n","0b506584":"## Workflow:\n1. [Data Preprocessing](#Data-Preprocessing)\n    * Importing necessary libraries\n    * Reading and exploring data\n    * Missing data analysis\n2. [EDA](#EDA)\n    * Univariate analysis\n    * Bivariate analysis\n    * Multivariate analysis\n3.  [Feature Engineering](#Feature-Engineering) \n    * Extracting Title from Name feature\n    * Extracting age bands from Age feature\n    * Creating new features\n    * Encoding and creating dummies for categorical features\n    * One hot encoding  \n4.  [Model Building and predicting](#Model-Building-and-predicting) \n    * Model building\n    * Model tuning\n    * Model selection \n    * Feature Importance calculation\n    \n    ","4865340f":"We can see mid-age people mostly died.<br>\nAge should be imputed and should band age groups.\n","a4791d57":"There are less passengers with titles other than Mr,Miss,Mrs,Master. So we can replace them to master","4d056f12":"We can convert age to age bands now","5d8a0688":"### Imputing age missing values and Extracting Age bands","57e95843":"## <font color ='blue'>Model Building and predicting<\/font>","54431424":"It is clear that there is high corelation between Pclass,Sex and survived.","7e5c9e1b":"Sex and Title feature plays a major role in predictions.","42e680f8":"549 (61%) of 891 passengers not survived.","b104cf56":"## <font color='blue'>Feature Engineering<\/font>","17c5c71d":"We still have null values is age feature. We use class imputation, We already saw age has a coreraltion between sex and Pclass. So we will use these two features to impute values for age.","a9a96c1f":"## Multivariate analysis","96c69ff4":"491(55%) of 891 passengers are third class passengers.","93c97434":"#### Reading and exploring data","2bef4f1c":"\n*     Infants (Age <=4) had high survival rate.\n*     Oldest passengers (Age = 80) survived.\n*     Large number of 15-25 year olds did not survive.\n*     Most passengers are in 15-35 age range.\n","bccf4435":"## Gaussian Naive Bayes\nIn machine learning, naive Bayes classifiers are a family of simple probabilistic classifiers based on applying Bayes' theorem with strong (naive) independence assumptions between the features. Naive Bayes classifiers are highly scalable, requiring a number of parameters linear in the number of variables (features) in a learning problem.","3eddd7ea":"We can see if the passenger is alone there is high rate of survival.","fd97181b":"### Missing data analysis","1b5f4613":"Nearly 72% of passengers embarked from Southampton","024ea131":"### Feature importance calculation","62aa063e":"Random Forest is the best model from the cross validation scores.","c69bfb21":"### Ensemble methods using gridsearch cv\n\nEnsemble methods use multiple learning algorithms to obtain better predictive performance than could be obtained from any of the constituent learning algorithms alone.","52519e23":"Logistic Regression is a useful model to run early in the workflow. Logistic regression measures the relationship between the categorical dependent variable (feature) and one or more independent variables (features) by estimating probabilities using a logistic function, which is the cumulative logistic distribution.","31d3f807":"Nearly 20% values of Age is missing in the train and test data. Imputing mean and median would not be a ideal imputation for age. FFill ,BFill would also not be a meanigful imputation. <br> After EDA,we can try to impute missing values for age with relations.\n","3fef33ca":"There are 11 columns in train set and 10 columns in test set (excluding survived target class). <br><br>\n**Numberical**:<br>\nAge,SibSp,Parch are discrete features of integer type. Fare is the only continuous feature in the dataset.<br>\n**Categorical**:<br>\nSex,Embarked,Survived are nominal categorical features. Pclass is the ordinal categorical feature in the dataset.<br>","b37a4feb":"First class passengers had a highest survival rate","f965cdc7":"Nearly 83% passengers spends less than 50 dollars","d6eb50f1":"### Creating new features","ccad8f94":"# <font color = red> Titanic: Machine Learning from disaster\n    \nThe competition : use machine learning to create a model that predicts which passengers survived the Titanic shipwreck. \n    \nIn this competition, we\u2019ll gain access to two similar datasets that include passenger information like name, age, gender, socio-economic class, etc. One dataset is titled `train.csv` and the other is titled `test.csv`.\n\nTrain.csv will contain the details of a subset of the passengers on board (891 to be exact) and importantly, will reveal whether they survived or not, also known as the \u201cground truth\u201d.\n\nThe `test.csv` dataset contains similar information but does not disclose the \u201cground truth\u201d for each passenger. It\u2019s your job to predict these outcomes.","c84aa4a7":"Imputing missing values for this high percentage would not be an effective imputation.\nIt is better to drop the feature 'Cabin'","5bbf2ead":"### Random forest\nThe next model Random Forests is one of the most popular. Random forests or random decision forests are an ensemble learning method for classification, regression and other tasks, that operate by constructing a multitude of decision trees (n_estimators=100) at training time and outputting the class that is the mode of the classes (classification) or mean prediction (regression) of the individual trees. ","181a1497":"One-Hot encoding categorical features","bb1783b8":"Highest paid customers mostly has the highest survival rate","57ac20ec":"We see most of the passengers are mid-aged passengers <br> we have just 22 passengers with more than 60 years of age.","d421d10c":"### Inferences from univariate analysis\n* 549 (61%) of 891 passengers not survived.\n* 491(55%) of 891 passengers are third class passengers.\n* 577(64%) are male passengers.\n* Most of the passengers are mid-aged passengers,we had just 22 passengers with more than 60 years of age.\n* 608  passengers are without siblings or spouses,678  passengers are without Parents or child.\n* 537 of 891 are travelling single.\n* Nearly 83% passengers spent less than 50 dollars.\n* Nearly 72% of passengers embarked from Southampton.\n ","9b2f76ce":"Passengers boarding from Cherbourg paid higher fare and also have higher survival rate. Obviously Female had higher survival rate in every embarked class.\n\n","db4bd3a3":"577(64%) are male passengers","f59c23ae":"### Decision Tree\nThis model uses a decision tree as a predictive model which maps features (tree branches) to conclusions about the target value (tree leaves). Tree models where the target variable can take a finite set of values are called classification trees; in these tree structures, leaves represent class labels and branches represent conjunctions of features that lead to those class labels. Decision trees where the target variable can take continuous values (typically real numbers) are called regression trees.","460649ef":"### Inferences from Multivariate analysis\n* There is clear corelation between sex and survived feature.\n* Passengers from Cherbough mostly survived.\n* Highest paid customers mostly has the highest survival rate.\n*     Infants (Age <=4) had high survival rate.\n*     Oldest passengers (Age = 80) survived.\n*     Large number of 15-25 year olds did not survive.\n*     Most passengers are in 15-35 age range.\n* Even mid age groups in Passenger class 1 survived.\n* Some of the low age groups in Passenger class 3 couldn't survive.\n* Passengers boarding from Cherbourg paid higher fare and also have higher survival rate. Obviously Female had higher survival rate in every embarked class.","dcbd7598":"## <font color ='blue'>Data Preprocessing<\/font>\n### Importing necessary libraries","901286d8":"### Extracting title from Names","b7e0830c":"Survival rate changes with Name titles...So this feature would be an useful feature to build models.","aa7d7237":"### Logistic regression","99b0f25a":"\nThere is clear corelation between sex and survived feature","a965b6a8":"## K-Nearest Neighbors\nIn pattern recognition, the k-Nearest Neighbors algorithm (or k-NN for short) is a non-parametric method used for classification and regression. A sample is classified by a majority vote of its neighbors, with the sample being assigned to the class most common among its k nearest neighbors (k is a positive integer, typically small). If k = 1, then the object is simply assigned to the class of that single nearest neighbor. ","1fb655cd":"We have many ML algorithims to choose from. Based on our problem is a classification problem, We can choose a classifier. We also want to identify the relation between the target variable and other features. We can first start with simple logistic regression and can build complex ensemble models.","b40e7032":"Creating 'Fare' Band","a5c65e69":"### Support vector machines\nNext we model using Support Vector Machines which are supervised learning models with associated learning algorithms that analyze data used for classification and regression analysis. Given a set of training samples, each marked as belonging to one or the other of two categories, an SVM training algorithm builds a model that assigns new test samples to one category or the other, making it a non-probabilistic binary linear classifier."}}