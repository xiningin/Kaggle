{"cell_type":{"4ee36218":"code","1c608352":"code","8892e3e9":"code","8dc56b36":"code","8b0c42e6":"code","de4b9d5a":"code","577db986":"code","b6ecae39":"code","3bbb7d7a":"code","8a8060f0":"code","33675edf":"code","820e4c4d":"code","26707e53":"code","fb7d3e36":"code","b8ffb981":"code","efa37adb":"code","4c2fba0c":"code","342e2937":"code","de7e79f5":"code","805735d5":"code","ed839feb":"code","ff8b3fdc":"code","53949ebf":"code","f1100559":"code","9824dd17":"code","3b256056":"code","e25ff396":"code","6f1412dc":"markdown","847d6490":"markdown","081b61e7":"markdown"},"source":{"4ee36218":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1c608352":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","8892e3e9":"df=pd.read_csv('..\/input\/brasilian-houses-to-rent\/houses_to_rent.csv')\ndf.head()","8dc56b36":"#checking the shape\ndf.shape","8b0c42e6":"#checking null values\ndf.isnull().sum()","de4b9d5a":"# as we can see 1st column is vague and needs to be dropped\ndf.drop(df.columns[0], axis=1, inplace=True)","577db986":"df.head()","b6ecae39":"# floor contains \"-\" which needs to be removed\ndf['floor'].replace(\"-\", 0, inplace=True)","3bbb7d7a":"# R$ to be removed from columns hoa, rent amount, property tax, fire insurance and total\nfor col in ['hoa', 'rent amount', 'property tax', 'fire insurance', 'total']:\n    df[col]= df[col].replace('R\\$', \"\", regex=True).replace(\",\", \"\", regex=True)","8a8060f0":"df.head()","33675edf":"# Now let's check the unique values in each of the columns\ndf.nunique()","820e4c4d":"# As it can be seen above, we removed R$ but need to change the data type to INT","26707e53":"df[['floor', 'hoa','rent amount', 'property tax', 'fire insurance', 'total']]=df[['floor','hoa','rent amount', 'property tax', 'fire insurance', 'total']].astype(int)","fb7d3e36":"# Let's remove \"Sem info\"\ndf.replace(\"Sem info\", 0, inplace=True)\ndf.replace(\"Incluso\", 0, inplace=True)","b8ffb981":"df.info()","efa37adb":"# Now Let's change the column values to dummy values\ndf=pd.get_dummies(df, drop_first=True)","4c2fba0c":"df.head()","342e2937":"# Let's split the data into X and y now\n\nX=df.drop('city', axis=1)\ny=df['city']","de7e79f5":"# Importing important libraries\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.metrics import classification_report, f1_score, accuracy_score\nfrom sklearn.preprocessing import MinMaxScaler","805735d5":"X_train, X_test, y_train, y_test=train_test_split(X, y, test_size=0.2, random_state=1)","ed839feb":"# Now let's apply transformations\nsc=MinMaxScaler()\nX_train_tx=sc.fit_transform(X_train)\nX_test_tx=sc.transform(X_test)","ff8b3fdc":"X_train_tx","53949ebf":"log_clf=LogisticRegression()\nrf_clf=RandomForestClassifier(n_estimators=100, random_state=1)\nsvm_clf=SVC()\nmlp_clf=MLPClassifier(max_iter=400, hidden_layer_sizes=(12, 12), activation='relu', solver='adam')","f1100559":"log_clf.fit(X_train_tx, y_train)\nrf_clf.fit(X_train_tx, y_train)\nsvm_clf.fit(X_train_tx, y_train)\nmlp_clf.fit(X_train_tx, y_train)","9824dd17":"# Predictions\ny_pred_log=log_clf.predict(X_test_tx)\ny_pred_rf=rf_clf.predict(X_test_tx)\ny_pred_svm=svm_clf.predict(X_test_tx)\ny_pred_nn_mlp=mlp_clf.predict(X_test_tx)","3b256056":"# Accuracy of all the models\nprint(\"The accuracy of Logistic Regression is\", log_clf.score(X_test_tx, y_test))\nprint(\"The accuracy of Random Forest is\", rf_clf.score(X_test_tx, y_test))\nprint(\"The accuracy of SVM is\", svm_clf.score(X_test_tx, y_test))\nprint(\"The accuracy of Neural Network MLP Classifier is\", mlp_clf.score(X_test_tx, y_test))","e25ff396":"# F1_score of all the models\nprint(\"The F1 Score of Logistic Regression is\", f1_score(y_pred_log, y_test))\nprint(\"The F1 Score of Random Forest is\", f1_score(y_pred_rf, y_test))\nprint(\"The F1 Score of SVM is\", f1_score(y_pred_svm, y_test))\nprint(\"The F1 Score of Neural Network MLP Classifier is\", f1_score(y_pred_nn_mlp, y_test))","6f1412dc":"> **Random forest performed the best even without hyperparameter optimization**","847d6490":"Importing libraries","081b61e7":"**DATA CLEANING**\n"}}