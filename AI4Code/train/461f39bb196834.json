{"cell_type":{"7b645356":"code","b5140a8f":"code","bc65db72":"code","00078d86":"code","01b96a0b":"code","72ab3ee2":"code","6c4c6ddb":"code","b0876739":"code","9fe1c933":"code","f3a135c4":"code","b0911eb6":"markdown","3a840307":"markdown","8a1b3165":"markdown","d846a86c":"markdown"},"source":{"7b645356":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b5140a8f":"#!pip install pytorch-lightning  ","bc65db72":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# Results.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf1 = pd.read_csv('\/kaggle\/input\/questionanswer-combination\/Results.csv', delimiter=',', nrows = nRowsRead)\ndf1.dataframeName = 'Results.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')\ndf1.head()","00078d86":"! nvidia-smi\n! pip install -qU torchtext \"git+https:\/\/github.com\/karthikrangasai\/lightning-flash.git@feature\/577_add_SQuADDataSource#egg=lightning-flash[text]\"\n! mkdir \/kaggle\/temp\n! pip list | grep lightning\n\n%matplotlib inline\n%reload_ext autoreload\n%autoreload 2\n\n#Code by Kartik Rangasai Sivaraman https:\/\/www.kaggle.com\/karthikrangasai\/hindi-and-tamil-q-a-with-lightning-flash\/data\n\n#Needs GPU on!","01b96a0b":"import torch\nimport pytorch_lightning\nimport flash\n\nfrom flash import Trainer\nfrom flash.core.data.utils import download_data\nfrom flash.text import QuestionAnsweringData, QuestionAnsweringTask","72ab3ee2":"#Code by Kartik Rangasai Sivaraman https:\/\/www.kaggle.com\/karthikrangasai\/hindi-and-tamil-q-a-with-lightning-flash\/data\n\nINPUT_DIR = \"\/kaggle\/input\/questionanswer-combination\"\nTEMP_PATH = \".\/\"\nINPUT_DATA_PATH = os.path.join(INPUT_DIR, \"Results.csv\")\nTRAIN_DATA_PATH = os.path.join(TEMP_PATH, \"_Results.csv\")\n#VAL_DATA_PATH = os.path.join(TEMP_PATH, \"_val.csv\")  # We don't have validation file\nBACKBONE = \"xlm-roberta-base\"","6c4c6ddb":"# To use once error is fixed\ndf = pd.read_csv(INPUT_DATA_PATH)\ndisplay(df.head())","b0876739":"##Code by Kartik Rangasai Sivaraman https:\/\/www.kaggle.com\/karthikrangasai\/hindi-and-tamil-q-a-with-lightning-flash\/data\n\n# 1. Create the DataModule\ndatamodule = QuestionAnsweringData.from_csv(\n    train_file=INPUT_DATA_PATH,\n    backbone=BACKBONE\n)\n","9fe1c933":"#Code by Kartik Rangasai Sivaraman https:\/\/www.kaggle.com\/karthikrangasai\/hindi-and-tamil-q-a-with-lightning-flash\/data\n\n# 2. Build the task\nmodel = QuestionAnsweringTask(\n    backbone=BACKBONE\n)","f3a135c4":"#Code by Kartik Rangasai Sivaraman https:\/\/www.kaggle.com\/karthikrangasai\/hindi-and-tamil-q-a-with-lightning-flash\/data\n#MisconfigurationException: You requested GPUs: [0]\n\n# 3. Create the trainer and finetune the model\ntrainer = Trainer(\n    fast_dev_run=True,\n    gpus=1,\n    max_epochs=10,\n    log_every_n_steps=5,\n    auto_lr_find=True,\n    auto_scale_batch_size='binsearch',\n)\ntrainer.finetune(model, datamodule=datamodule)","b0911eb6":"<center style=\"font-family:verdana;\"><h1 style=\"font-size:200%; padding: 10px; background: #6A5ACD;\"><b style=\"color:white;\">Pytorch Lightning<\/b><\/h1><\/center>\n\nLightning makes coding complex networks simple.\n\nSpend more time on research, less on engineering. It is fully flexible to fit any use case and built on pure PyTorch so there is no need to learn a new language. A quick refactor will allow you to:\n\nRun your code on any hardware, Performance & bottleneck profiler, Model checkpointing, 16-bit precision, Run distributed training, Logging, Metrics, Visualization, Early stopping, ... and many more!\n\nhttps:\/\/www.pytorchlightning.ai\/","3a840307":"#We should have dict type or \"answer_text\" AND \"answer_start\"\\n. Unfortunately we have only answer_text. ","8a1b3165":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcThzzk2pWbneJaCkcwjcko0FZ9Kbkpqo1ZCgg&usqp=CAU)askpython.com","d846a86c":"#Since I don't have both answer_text AND answer_start that is one of the reasons of my fail in training with Lightning."}}