{"cell_type":{"4a078bb3":"code","56f8345d":"code","0163ce87":"code","8521c0d4":"code","670d2804":"code","163ef4c0":"code","63e4c250":"code","f6dc1e3a":"code","1c121552":"code","d04f3b32":"code","77e1e924":"code","bbb49744":"code","746f1946":"markdown","3b350b7a":"markdown"},"source":{"4a078bb3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","56f8345d":"#import all libraries\n\nimport pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\n\n","0163ce87":"# read training data from CSV file \ntrain_df = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\nprint(train_df.shape)\nprint(train_df.head())","8521c0d4":"# read the test df\n\ntest_df = pd.read_csv('..\/input\/digit-recognizer\/test.csv')\nprint(test_df.shape)\nprint(test_df.head())","670d2804":"training_images = (train_df.iloc[:,1:].values).astype('float32') #pixel values\ntraining_labels = train_df.iloc[:, 0].values.astype('int32') #labels\ntesting_images = test_df.values.astype('float32') #pixel values","163ef4c0":"#Normalization\ntraining_images = training_images.reshape(42000, 28, 28, 1)\ntraining_images = training_images\/255.0\ntesting_images = testing_images.reshape(28000, 28, 28, 1)\ntesting_images = testing_images\/255.0","63e4c250":"# Encode labels to one hot vectors (ex : 2 -> [0,0,1,0,0,0,0,0,0,0])\nfrom keras.utils.np_utils import to_categorical\ntraining_labels = to_categorical(training_labels, num_classes = 10)","f6dc1e3a":"training_labels","1c121552":"model = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(32, (3,3), activation='relu',\n                          input_shape=(28,28,1)),\n    tf.keras.layers.Conv2D(32, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Conv2D(64, (3,3), activation='relu', padding='same'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(1024, activation='relu'),\n    #tf.keras.layers.Dense(512, activation='relu'),\n    tf.keras.layers.Dense(10, activation='softmax')\n])\n\n\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\nmodel.summary()","d04f3b32":"history = model.fit(training_images, training_labels, epochs=50, batch_size=128)","77e1e924":"# predict results\nresults = model.predict(testing_images)\n\n# select the indix with the maximum probability\nresults = np.argmax(results,axis = 1)\n\nresults = pd.Series(results,name=\"Label\")","bbb49744":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"Digit_recognizer_result.csv\",index=False)","746f1946":"### Load the data\n\n The train.csv file contains 42000 rows and 785 columns. Each row represents an image of a handwritten digit and a label with the value of this digit.\n \n The output variable is an integer from 0 to 9. This is a multiclass classification problem.\n\n","3b350b7a":"### Modelling\n"}}