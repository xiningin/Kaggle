{"cell_type":{"82b38842":"code","bba8ec68":"code","b9281305":"code","74ddda3f":"code","28f43d42":"code","7c8b0896":"code","d3d44f70":"code","73b3d661":"code","1e32a640":"code","dbe970bf":"code","2583d329":"code","d383779c":"code","7ac06766":"code","2771f3c0":"code","78f33d66":"code","1667073a":"code","2f816388":"code","701ae147":"code","c338380b":"code","c6ad8e4f":"code","5fcdd7fc":"code","387a5f11":"code","cf5bef8b":"code","183feb3a":"code","d8a9b40a":"code","0f92fa48":"code","cdf7d4e6":"code","c31011ff":"markdown","dddd86bd":"markdown","71baada5":"markdown","ef88e1ed":"markdown","fceb636d":"markdown","514a4677":"markdown","a48bbaae":"markdown","d961fa92":"markdown","c0ff93ff":"markdown","b57dbd55":"markdown","87667719":"markdown","e833396e":"markdown"},"source":{"82b38842":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","bba8ec68":"import numpy as np \nimport pandas as pd \nimport random\n\nimport matplotlib.pyplot as plt\n\nimport os\nimport zipfile\n\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf\nfrom tensorflow.keras.optimizers import RMSprop\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img","b9281305":"# Extracting the zip file\n\nlocal_zip = '\/kaggle\/input\/dogs-vs-cats\/train.zip'\nzip_ref = zipfile.ZipFile(local_zip, 'r')\nzip_ref.extractall('\/tmp')\nzip_ref.close()","74ddda3f":"base_dir = '\/tmp\/train'\nimg_names = os.listdir(os.path.join(base_dir))\nimg_names[:10]","28f43d42":"sample = random.choice(img_names)\nimage = load_img(\"\/tmp\/train\/\"+sample)\nplt.imshow(image)\nplt.show()","7c8b0896":"# Let's assign the label Dog and Cat for the images\n\nlabel = []\n\nfor i in img_names:\n    if(i.split(\".\")[0] == \"dog\"):\n        label.append(\"Dog\")\n    else:\n        label.append(\"Cat\")\n\nlabel[:10]","d3d44f70":"df = pd.DataFrame({\"Image\" : img_names, \"Label\" : label})\ndf.head()","73b3d661":"df.shape","1e32a640":"df.Label.value_counts().plot.bar(color = ['red','blue'])\nplt.show()","dbe970bf":"train_df, validate_df = train_test_split(df, test_size = 0.2)\ntrain_df = train_df.reset_index(drop = True)\nvalidate_df = validate_df.reset_index(drop = True)","2583d329":"model = tf.keras.models.Sequential([\n    \n    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3)),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    \n    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    \n    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    \n    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    \n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(512, activation='relu'),\n    \n    tf.keras.layers.Dense(1, activation='sigmoid')\n])","d383779c":"model.summary()","7ac06766":"model.compile(loss = 'binary_crossentropy',\n              optimizer = 'SGD',\n              metrics = ['accuracy'])","2771f3c0":"train_datagen = ImageDataGenerator(\n      rescale=1.\/255,\n      rotation_range=40,\n      width_shift_range=0.2,\n      height_shift_range=0.2,\n      shear_range=0.2,\n      zoom_range=0.2,\n      horizontal_flip=True,\n      fill_mode='nearest')\n\ntrain_generator = train_datagen.flow_from_dataframe(\n    train_df, \n    \"\/tmp\/train\/\", \n    x_col='Image',\n    y_col='Label',\n    target_size = (150, 150),\n    class_mode = 'binary',\n    batch_size = 20\n)","78f33d66":"validation_datagen = ImageDataGenerator(rescale=1.\/255)\n\nvalidation_generator = validation_datagen.flow_from_dataframe(\n    validate_df, \n    \"\/tmp\/train\/\", \n    x_col='Image',\n    y_col='Label',\n    target_size = (150, 150),\n    class_mode = 'binary',\n    batch_size = 20\n)","1667073a":"history = model.fit_generator(\n      train_generator,\n      steps_per_epoch = np.ceil(20000\/20),  # 20000 images = batch_size * steps\n      epochs = 10,\n      validation_data=validation_generator,\n      validation_steps = np.ceil(5000\/20),  # 5000 images = batch_size * steps\n      verbose = 1)","2f816388":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(len(acc))\n\nplt.figure(figsize=(7,7))\n\nplt.plot(epochs, acc, 'r', label='Training accuracy')\nplt.plot(epochs, val_acc, 'b', label='Validation accuracy')\nplt.title('Training and validation accuracy')\nplt.legend()\n\nplt.figure(figsize=(7,7))\n\nplt.plot(epochs, loss, 'r', label='Training Loss')\nplt.plot(epochs, val_loss, 'b', label='Validation Loss')\nplt.title('Training and validation loss')\nplt.legend()\n\nplt.show()","701ae147":"# Extracting the zip file\n\nlocal_zip = '\/kaggle\/input\/dogs-vs-cats\/test1.zip'\nzip_ref = zipfile.ZipFile(local_zip, 'r')\nzip_ref.extractall('\/tmp')\nzip_ref.close()\n\ntest_dir = '\/tmp\/test1\/'\ntest_img = os.listdir(os.path.join(test_dir))\ntest_img[:10]\n\ntest_df = pd.DataFrame({'Image': test_img})","c338380b":"test_gen = ImageDataGenerator(rescale=1.\/255)\n\ntest_generator = test_gen.flow_from_dataframe(\n    test_df, \n    \"\/tmp\/test1\/\", \n    x_col = 'Image',\n    y_col = None,\n    class_mode = None,\n    target_size = (150, 150),\n    batch_size = 20,\n    shuffle = False\n)","c6ad8e4f":"predict = model.predict_generator(test_generator, steps = np.ceil(12500\/20))","5fcdd7fc":"predict","387a5f11":"def label(predict):\n    if(predict > 0.5):\n        return \"Dog\"\n    else:\n        return \"Cat\"","cf5bef8b":"test_df['Label'] = predict\ntest_df['Label'] = test_df['Label'].apply(label)","183feb3a":"test_df.head()","d8a9b40a":"test_df.Label.value_counts()","0f92fa48":"test_df.Label.value_counts().plot.bar(color = ['red','blue'])\nplt.show()","cdf7d4e6":"v = random.randint(0, 12000)\n\nsample_test = test_df.iloc[v:(v+18)].reset_index(drop = True)\nsample_test.head()\n\nplt.figure(figsize=(12, 24))\nfor index, row in sample_test.iterrows():\n    filename = row['Image']\n    category = row['Label']\n    img = load_img(\"\/tmp\/test1\/\" + filename, target_size = (150, 150))\n    plt.subplot(6, 3, index + 1)\n    plt.imshow(img)\n    plt.xlabel(filename + ' ( ' + \"{}\".format(category) + ' )' )\nplt.tight_layout()\nplt.show()","c31011ff":"## Visualizing the training","dddd86bd":"### That's all Folks!!!","71baada5":"## Preparing the traning data","ef88e1ed":"Thus, this is a balanced dataset with equal no.of dogs and cats images","fceb636d":"To attain higher accuracy, number of epochs can be increased !!!","514a4677":"## 1. Importing necessary packages","a48bbaae":"### Validation Generator","d961fa92":"## Test Generator","c0ff93ff":"* **Conv Layer**: This layer will extract important features from image\n* **Pooling Laye**r: This layer reduce the spatial volume of input image after convolution by isolating the important features\n* **Hidden Layer**: It connect the network from a layer to another layer\n* **Output Layer**: It is the final layer with neurons equals to no.of classes","b57dbd55":"### Training Generator with Image Augmentation","87667719":"## Preparing the Test Data","e833396e":"## Building the model"}}