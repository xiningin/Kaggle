{"cell_type":{"80a5f3f4":"code","a7a8c016":"code","2144a933":"code","7ac9e2f6":"code","aa3a1d04":"code","42b5625a":"code","41e575df":"code","32b60bc9":"code","4e71b37f":"code","761fdd3b":"code","921e83c3":"code","805c6af9":"code","8c0e4447":"code","b393a26b":"code","3a96ce92":"code","ca3bffc8":"code","a77075a4":"code","5a0afdc0":"code","6d85e132":"code","5aabe42f":"code","5c794bb3":"code","21bae588":"code","8ded1e7e":"code","2bd30b17":"code","c49a0417":"code","14aaa335":"code","cd34f772":"code","30b23e51":"code","c4606f89":"code","fe365659":"code","bd2d1c50":"code","58a50cec":"code","b933d735":"code","ecdc3461":"code","bc8cdbe7":"code","2edd41a7":"code","9cc27716":"code","1f477ad3":"code","420201f8":"code","cc6ad0ab":"code","d80e0e1e":"code","b64acd5d":"code","64771388":"code","edc557d9":"code","ba0f1ea1":"code","11c83e39":"code","fc6c9208":"code","ac7d0caa":"code","6266d707":"code","f0b0ee9d":"code","f2455d22":"code","89ac65d0":"code","b9e53b7f":"code","936c2d11":"code","514fbf35":"code","6d550f21":"code","8b799eb5":"code","95347f09":"code","c8f93ceb":"code","1f91ae69":"code","50c8e85e":"code","77e3be9c":"code","b15ea2d4":"code","acb31856":"code","335b63f1":"code","fc3d3d64":"code","131d1bde":"code","61a15af5":"code","7c6c5652":"code","29bdebe3":"code","a780fa7b":"code","29b55629":"code","07398623":"code","bacaa391":"code","d089a041":"code","f12af172":"code","5f68bcda":"code","8702ec36":"code","280e8da1":"code","555305b6":"code","f94589fb":"code","5f6bbef1":"code","a7482f91":"code","88defa67":"code","00f21083":"code","831ab2f9":"code","c280dd1b":"code","8ea6d11b":"code","7a43bc30":"code","68fb0ff2":"code","c85b4d82":"code","f4d4700e":"code","407553a1":"code","4ea1b030":"code","44ece5de":"code","573612e6":"code","d07123f9":"code","a4e06503":"code","2c99c632":"code","94637aa9":"code","edd26077":"code","68e8f8fe":"code","f46f5936":"code","1e79a958":"code","2d9b2caa":"markdown","a60e80ec":"markdown","68d441fd":"markdown","8a5a7cbe":"markdown","8b948ce3":"markdown","15ea486b":"markdown","df314494":"markdown","46d48d52":"markdown","f6701c9b":"markdown","8d64cd9e":"markdown","9bcec098":"markdown","d8d761e3":"markdown","ec239720":"markdown","3cbb0b5f":"markdown","75e427cc":"markdown","46a882ab":"markdown","3ea20b9d":"markdown","282ed95f":"markdown","370b4aa9":"markdown","709640ae":"markdown","bcdb283d":"markdown","de88ab82":"markdown","6cd1d177":"markdown","60d21968":"markdown","36551c94":"markdown","ffd60fda":"markdown","e7587386":"markdown","21b87fde":"markdown","33a1bcba":"markdown","b5eb73ec":"markdown","7f1fda0a":"markdown","813768bf":"markdown","f400248b":"markdown","d65bbddf":"markdown","19adb7e6":"markdown","08d8e19f":"markdown","be3f9f0d":"markdown","4c3467ed":"markdown","979f69e4":"markdown","736f4865":"markdown","c8e5b3a7":"markdown"},"source":{"80a5f3f4":"import pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt  # data visulaisation libaries\nimport seaborn as sns  # data visulaisation libaries\nimport scipy.stats as stats # Statistical Library\nimport matplotlib.image as mpimg # for images","a7a8c016":"df=pd.read_csv(\"..\/input\/capstone-interest-rate-class\/train.csv\")","2144a933":"df.columns","7ac9e2f6":"df.isnull().sum()[df.isnull().sum()!=0]  # null values are present in these columns","aa3a1d04":"df.info()","42b5625a":"for i in df.columns:\n        print(i,pd.DataFrame(df[i].unique()))","41e575df":"df.drop('Loan_ID',axis=1,inplace = True)","32b60bc9":"df[\"Loan_Amount_Requested\"] = df[\"Loan_Amount_Requested\"].str.replace(\",\",\"\").astype(float)","4e71b37f":"df.info()","761fdd3b":"df.head(2)","921e83c3":"sns.barplot( x=df.Gender,\n    y=df.Interest_Rate,\n    hue=df.Interest_Rate,\n    data=df,)","805c6af9":"sns.boxplot( x=df.Purpose_Of_Loan,\n    y=df.Interest_Rate,\n    hue=df.Interest_Rate,\n    data=df,)","8c0e4447":"df.Purpose_Of_Loan.value_counts().plot(kind=\"bar\")","b393a26b":"df_fr_out = df[['Loan_Amount_Requested',\n       'Annual_Income', 'Debt_To_Income',\n        'Months_Since_Deliquency', 'Number_Open_Accounts',\n       'Total_Accounts']]\ndf_fr_out.boxplot(figsize=(12,8),rot=90)","3a96ce92":"o=df.Purpose_Of_Loan.value_counts()","ca3bffc8":"df.isnull().sum()[df.isnull().sum()!=0]","a77075a4":"df.describe()","5a0afdc0":"print(\"null values = \" , df.Annual_Income.isnull().sum())\n\nprint(\"Median of Annual Income = \" ,df.Annual_Income.median())\n\nprint(\"Max Annual income = \" ,df.Annual_Income.max())\n\nprint(\"Min Annual income = \" ,df.Annual_Income.min())","6d85e132":"df.Annual_Income.fillna(63000,inplace=True) ","5aabe42f":"df.head(2)","5c794bb3":"df.Home_Owner.value_counts()","21bae588":"pd.DataFrame(df.groupby(\"Home_Owner\")[\"Annual_Income\"].mean()).T ","8ded1e7e":"df.Home_Owner.fillna('None',inplace =True)","2bd30b17":"df.Length_Employed.value_counts()","c49a0417":"df.Length_Employed.fillna(\"< 1 year\",inplace=True)","14aaa335":"print(\"null values = \" , df.Months_Since_Deliquency.isnull().sum())\n\nprint(\"Median of Months_Since_Deliquency = \" ,df.Months_Since_Deliquency.median())\n\nprint(\"Max Months_Since_Deliquency  = \" ,df.Months_Since_Deliquency.max())\n\nprint(\"Min Months_Since_Deliquency = \" ,df.Months_Since_Deliquency.min())","cd34f772":"df.Months_Since_Deliquency.fillna(360,inplace =True)","30b23e51":"plt.figure(figsize =(10,4))\nplt.title('Annual Income Distribution')\n#plt.savefig('income_dist_outlier', dpi=300, bbox_inches='tight')\nsns.distplot(df.Annual_Income,bins=100,color='black')\nplt.show()","c4606f89":"df.Annual_Income=np.log(df.Annual_Income)\nplt.figure(figsize =(10,4))\nplt.title('Annual Income Distribution after Outlier Treatment')\n#plt.savefig('income_dist_outlier_after', dpi=300, bbox_inches='tight')\nsns.distplot(df.Annual_Income,bins=100,color='black')\nplt.show()","fe365659":"## run all above","bd2d1c50":"def ln_emp(x):\n    if x == '1 year':\n        x =1\n    elif x == '10+ years':\n        x = 11\n    elif x =='2 years':\n        x=2\n    elif x == '3 years':\n        x =3\n    elif x == '4 years':\n        x =4\n    elif x == '5 years':\n        x =5\n    elif x == '6 years':\n        x =6\n    elif x == '7 years':\n        x =7\n    elif x == '8 years':\n        x =8\n    elif x == '9 years':\n        x =9\n    elif x == '< 1 year':\n        x =0\n    return(x)\ndf.Length_Employed = df.Length_Employed.apply(ln_emp)","58a50cec":"def gndr(x):\n    if x == 'Male':\n        x = 1\n    elif x == 'Female':\n        x = 0\n    return(x)\ndf.Gender = df.Gender.apply(gndr)","b933d735":"def incm_ver(x):\n    if x == 'VERIFIED - income':\n        x = 10\n    elif x == 'VERIFIED - income source':\n        x = 5\n    elif x == 'not verified':\n        x = 0\n    return(x)\ndf.Income_Verified = df.Income_Verified.apply(incm_ver)\n    ","ecdc3461":"df.sample(2)","bc8cdbe7":"df[\"Number_Closed_Acc\"]=df[\"Total_Accounts\"]-df[\"Number_Open_Accounts\"]","2edd41a7":"df[\"close_to_total_ratio\"]=round(((df[\"Number_Closed_Acc\"]\/df[\"Total_Accounts\"])*100),2)","9cc27716":"df.Purpose_Of_Loan.unique()","1f477ad3":"def ln_pur(x):\n    if x == 'debt_consolidation':\n        x =\"Liability\"\n    elif x == 'house':\n        x =\"Asset\"\n    elif x =='small_business':\n        x=\"Asset\"\n    elif x == 'credit_card':\n        x =\"Liability\"\n    elif x == 'home_improvement':\n        x =\"Asset\"\n    elif x == 'wedding':\n        x =\"Liability\"\n    elif x == 'major_purchase':\n        x =\"Others\"\n    elif x == 'other':\n        x =\"Others\"\n    elif x == 'renewable_energy':\n        x =\"Asset\"\n    elif x == 'medical':\n        x =\"Liability\"\n    elif x == 'car':\n        x = \"Liability\"\n    elif x == 'moving':\n        x =\"Liability\"\n    elif x == 'educational':\n        x =\"Others\"\n    elif x == 'vacation':\n        x =\"Liability\"\n\n    return(x)\ndf['Purpose_Of_Loan'] = df['Purpose_Of_Loan'].apply(ln_pur)","420201f8":"df['Purpose_Of_Loan'].value_counts()","cc6ad0ab":"pd.DataFrame(df.groupby('Purpose_Of_Loan')[\"Interest_Rate\"].value_counts()).T","d80e0e1e":"df.head()","b64acd5d":"df.drop([\"Number_Closed_Acc\",\"Total_Accounts\"],axis=1,inplace=True)","64771388":"df.head(2)","edc557d9":"df = pd.get_dummies(df,drop_first=True)","ba0f1ea1":"df.info()","11c83e39":"df.describe().T[['mean','std','min','25%','50%','75%','max']]","fc6c9208":"df.describe().columns","ac7d0caa":"df[['Loan_Amount_Requested', 'Length_Employed', 'Annual_Income',\n        'Debt_To_Income', 'Inquiries_Last_6Mo',\n       'Months_Since_Deliquency', 'Number_Open_Accounts',\n        'close_to_total_ratio']].hist(figsize=(21,21),bins=30,)\nplt.title('Data distribution')\nplt.savefig('distribution.png', dpi=300, bbox_inches='tight')\nplt.show()","6266d707":"cor_mtx = df.corr()","f0b0ee9d":"plt.figure(figsize =(21,21))\nsns.heatmap(cor_mtx,vmin =-1,cmap='coolwarm',annot = True)\nplt.title('Relationship between variables')\nplt.savefig('heatmap.png', dpi=300, bbox_inches='tight')\nplt.show()","f2455d22":"df.info()","89ac65d0":"y=df[\"Interest_Rate\"]\nX=df.drop(\"Interest_Rate\",axis=1)","b9e53b7f":"def cte(x):\n    if x == 1:\n        x = 0\n    elif x == 2:\n        x = 0.5\n    elif x == 3:\n        x = 1\n\n    return(x)\ny_new = df['Interest_Rate'].apply(cte)","936c2d11":"y_new.value_counts()","514fbf35":"#df['Purpose_Of_Loan'].value_counts()","6d550f21":"import statsmodels.api as sm\n\nXc=sm.add_constant(X)\n\nmodel=sm.Logit(y_new,Xc).fit()\nresult=model.summary()\nresult","8b799eb5":"from statsmodels.stats.outliers_influence import variance_inflation_factor\nimport statsmodels.api as sm\nX_constant = sm.add_constant(X)\n\nvif = [variance_inflation_factor(X_constant.values, i) for i in range(X_constant.shape[1])]\npd.DataFrame({'vif': vif[1:]}, index=X.columns)","95347f09":"X.shape","c8f93ceb":"y=df[\"Interest_Rate\"]\nX=df.drop([\"Interest_Rate\",'Home_Owner_Other'],axis=1)","1f91ae69":"from sklearn.model_selection import train_test_split \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","50c8e85e":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\n\nX_train2 = X_train.copy(deep=True)\nX_test2 = X_test.copy(deep=True)\n\nX_trainMM = scaler.fit_transform(X_train)\nX_testMM = scaler.transform(X_test)","77e3be9c":"#1.","b15ea2d4":"from sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2","acb31856":"ordered_rank_feature = SelectKBest(score_func=chi2,k='all')\nordered_feature = ordered_rank_feature.fit(X,y)","335b63f1":"feature_ranks = pd.Series( ordered_feature.scores_ ,index=X.columns)\nplt.figure(figsize =(20,20))\nfeature_ranks.nlargest(16).plot(kind='bar')\nplt.show()","fc3d3d64":"#2.","131d1bde":"from sklearn.ensemble import RandomForestClassifier\nmodelRF = RandomForestClassifier()\nmodelRF.fit(X,y)","61a15af5":"feature_ranks = pd.Series(modelRF.feature_importances_,index=X.columns)\nplt.figure(figsize =(20,5))\nfeature_ranks.nlargest(16).plot(kind='bar',cmap='magma')\nplt.title('Feature Importance')\n#plt.savefig('feature importance.png', dpi=300, bbox_inches='tight')\nplt.show()","7c6c5652":"import scipy.stats as st\nprint('Xtrain :',np.round(st.ttest_ind(X_train,X)[1],2),'\\n'*2)\nprint('Xtest :',np.round(st.ttest_ind(X_test,X)[1],2),'\\n'*2)\nprint('Ytest :',np.round(st.ttest_ind(y_test,y)[1],2),'\\n'*2)\nprint('Ytrain :',np.round(st.ttest_ind(y_train,y)[1],2),'\\n'*2)","29bdebe3":"from imblearn.over_sampling import SMOTE\nsmote = SMOTE('auto')","a780fa7b":"sns.countplot(y)\nplt.title('Target Imbalance')\n#plt.savefig('target_imbalnce.png', dpi=300, bbox_inches='tight')\nplt.show()","29b55629":"X_sm, y_sm = smote.fit_sample(X_train,y_train)\nprint(X_sm.shape, y_sm.shape)","07398623":"sns.countplot(y_sm)\nplt.title('Target Imbalance')\n#plt.savefig('target_imbalnce.png', dpi=300, bbox_inches='tight')\nplt.show()","bacaa391":"X_sm.columns","d089a041":"from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, roc_auc_score","f12af172":"from sklearn.linear_model import LogisticRegression\nLR = LogisticRegression(random_state=0, solver='lbfgs', multi_class='multinomial') # since we have multiclass classification\nmodelLR = LR.fit(X_sm, y_sm)\ny_predLR = modelLR.predict(X_test)\n\nprint('Classification report','\\n',classification_report(y_test,y_predLR) )","5f68bcda":"kappa = cohen_kappa_score(pred_class,act_class,weights='quadratic')","8702ec36":"## AUC \nfrom sklearn.metrics import confusion_matrix , accuracy_score, classification_report,roc_auc_score, roc_curve","280e8da1":"# Using pycaret to find best model","555305b6":"from pycaret import classification\n# setup the environment \nclassification_setup = classification.setup(data= df, target='Interest_Rate')","f94589fb":"# comparing performance of different classification models\nclassification.compare_models(blacklist = ['rbfsvm'])","5f6bbef1":"from xgboost import XGBClassifier\nfrom sklearn.metrics import accuracy_score","a7482f91":"# fit model unbalanced training data\nmodel = XGBClassifier()\nmodel.fit(X_train, y_train)","88defa67":"# make predictions for test data\ny_pred = model.predict(X_test)","00f21083":"print(metrics.accuracy_score(y_test, y_pred))\nprint(metrics.f1_score(y_test, y_pred, average='weighted'))","831ab2f9":"######## now on balanced ##################","c280dd1b":"model = XGBClassifier()\nmodel.fit(X_sm, y_sm)\ny_pred = model.predict(X_test)\nprint(metrics.accuracy_score(y_test, y_pred))\nprint(metrics.f1_score(y_test, y_pred, average='weighted'))","8ea6d11b":"# Needs scaled features\n\nfrom sklearn.ensemble import GradientBoostingClassifier\ngbc = GradientBoostingClassifier()\ngbc.fit(X_trainMM, y_train)\n\ny_predG = gbc.predict(X_testMM)\nfrom sklearn import  metrics  \nprint(metrics.accuracy_score(y_test, y_predG))\nprint(metrics.f1_score(y_test, y_predG, average='weighted'))","7a43bc30":"cate_features_index = np.where(X.dtypes != float)[0]\ncate_features_index","68fb0ff2":"# First on imbalanced Dataset\nfrom catboost import Pool, CatBoostClassifier\n\nmodelCat = CatBoostClassifier()\n\nmodelCat.fit(X_train,y_train,cat_features=cate_features_index,eval_set=(X_test,y_test))\n","c85b4d82":"y_predF = modelCat.predict(X_test)\nfrom sklearn import  metrics  \nprint(metrics.accuracy_score(y_test, y_predF))\nprint(metrics.f1_score(y_test, y_predF, average='weighted'))","f4d4700e":"# Now on balanced dataset\n\nmodelCat = CatBoostClassifier()\nmodelCat.fit(X_sm,y_sm,cat_features=cate_features_index,eval_set=(X_test,y_test))\ny_predF = modelCat.predict(X_test)\nfrom sklearn import  metrics  \nprint(metrics.accuracy_score(y_test, y_predF))\nprint(metrics.f1_score(y_test, y_predF, average='weighted'))","407553a1":"# hence catboost on imbalanced dataset was better","4ea1b030":"## So far cat boost has the best accuracy, so we go forth with catboost for Hyper Parameter Tuning","44ece5de":"from sklearn.model_selection import RandomizedSearchCV\nfrom scipy.stats import uniform as sp_randFloat\nfrom scipy.stats import randint as sp_randInt","573612e6":"model = CatBoostClassifier()\nparameters = {'depth': sp_randInt(4, 10),'learning_rate': sp_randFloat(),'iterations': sp_randInt(10, 100)}\n\nrandm = RandomizedSearchCV(estimator=model, param_distributions = parameters, cv = 3, n_iter = 10)\nrandm.fit(X_train, y_train)\n\n    # Results from Random Search\n    \nprint(\"\\n The best estimator across ALL searched params:\\n\",randm.best_estimator_)\nprint(\"\\n The best score across ALL searched params:\\n\",randm.best_score_)\nprint(\"\\n The best parameters across ALL searched params:\\n\",randm.best_params_)","d07123f9":"from sklearn.model_selection import GridSearchCV\nfrom catboost import CatBoostClassifier\n\nmodel = CatBoostClassifier(loss_function='MultiClass')","a4e06503":"parameters = {'depth': [6,8,10],'learning_rate': [0.01,0.05,0.10],'iterations': [300,500]}\ngrid = GridSearchCV(estimator=model, param_grid = parameters, cv = 3)\ngrid.fit(X_train, y_train)    \n\n# Results from Grid Search    \n\nprint(\"\\n The best score across ALL searched params:\\n\",grid.best_score_)\nprint(\"\\n The best parameters across ALL searched params:\\n\",grid.best_params_)","2c99c632":"from sklearn.metrics import roc_auc_score\nfrom catboost import Pool, CatBoostClassifier\nfrom sklearn import  metrics","94637aa9":"modelCat = CatBoostClassifier(depth=8)\nmodelCat.fit(X_train,y_train,cat_features=cate_features_index,eval_set=(X_test,y_test))\ny_predF = modelCat.predict(X_test)\n","edd26077":"We will try to see auc roc score but it wont be possible because our problem is multiclass","68e8f8fe":"print(metrics.accuracy_score(y_test, y_predF))\nprint(metrics.f1_score(y_test, y_predF, average='weighted'))","f46f5936":"from sklearn.preprocessing import LabelBinarizer\ndef multiclass_roc_auc_score(y_test, y_pred, average=\"macro\"):\n    lb = LabelBinarizer()\n    lb.fit(y_test)\n    y_test = lb.transform(y_test)\n    y_pred = lb.transform(y_pred)\n    return roc_auc_score(y_test, y_pred, average=average)","1e79a958":"multiclass_roc_auc_score(y_test, y_predF)","2d9b2caa":"## gridsearchCV","a60e80ec":"## randomizedSearchCV","68d441fd":"## Feature selection\n1. using sklearn selectKbest\n2. using machine learning algorithm feature importance","8a5a7cbe":"blacklist rbfsvm <br>\n## CATboost , GBC and XGboost classifiers are the top3","8b948ce3":"#### Length_Employed","15ea486b":"# train test split","df314494":"# Data Cleaning ","46d48d52":"Importance of features","f6701c9b":"### One Hot Encoding ","8d64cd9e":"so now we separate each class vs other classes using binarizer and then finding the average of roc score","9bcec098":"### 1) Closed to total ratio\nIt will depict that out of total accounts(loan) how many percentage of accounts(loans) has been closed by the customer\nHigher the percentage better the customer.","d8d761e3":"## Importing Libraries","ec239720":"#### Months_Since_Deliquency","3cbb0b5f":"#### Dropping redundant columns","75e427cc":"#### Annual_Income(Numerical Colum)","46a882ab":"## Imputation of missing values\n\n","3ea20b9d":"# Statistics","282ed95f":"## Encoding","370b4aa9":"# balancing","709640ae":"## Feature Engineering","bcdb283d":"# GBC","de88ab82":"# CATBoost","6cd1d177":"### length employed will be handled during encoding","60d21968":"#### Reading train data set","36551c94":"#### Inferences from Univariate analysis\n    > Mostly 10+ Years of employed people have applied for the loan.\n    > Most of the loan applied people have mortgage ownership status of their property.\n    > Debt to income ratio values follow normal distribution\n    > Mostly male have applied for the loan more compared to females.\n    > Interest Rate of category 2 is being given more.","ffd60fda":"# Base Model","e7587386":"# Scaling\n1. we will scale and keep aside this scaled train + test sets as we dont plan <br>\nto use same scaled data on all algorithms","21b87fde":"## XGBoost","33a1bcba":"## outliers","b5eb73ec":"### 3) Category based on  Annual Growth [Conceptual]\nThis depicts that the growth which person has recieved over the years relative to others for comparing the customer segemntation. ","7f1fda0a":"Since logit only gives output from 0 - 1  hence we classify ","813768bf":"### 2) Asset or Liability\nFor colum **Purpose_Of_Loan** we have assign the purpose of loan as asset or liability. It will help in reducing the dimensionality and creating a better picture of asset and liability and for those whom we can't categories in liability and asset we have used Others.\n","f400248b":"img = mpimg.imread('image_1.png') \nplt.figure(figsize=(20,30))\nplt.imshow(img)","d65bbddf":"## Overall accuracy of 40%","19adb7e6":"\n\n1. **Mean\/Median** Imputation for ***Numerical*** Columns.\n\n2. **Mode** is used to impute the values where the col is ***categorical***.\n\n3. Find out a Pattern - There must be some pattern amongst the columns. Hence , Its wise to Exploit the patterna nd use it to your best.\n\n4. Build a ML model to fill the Missing Values.","08d8e19f":"### Basic Info of Data set","be3f9f0d":"## PYcaret","4c3467ed":"#### Home Owner\n\n\n\n","979f69e4":"Since higher the number better the customer therefore we'll use big number for it","736f4865":"Have you ever wondered how lenders use various factors such as credit score, annual income, the loan amount approved, tenure, debt-to-income ratio etc. and select your interest rates? \n\nThe process, defined as \u2018risk-based pricing\u2019, uses a sophisticated algorithm that leverages different determining factors of a loan applicant. Selection of significant factors will help develop a prediction algorithm which can estimate loan interest rates based on clients\u2019 information. On one hand, knowing the factors will help consumers and borrowers to increase their credit worthiness and place themselves in a better position to negotiate for getting a lower interest rate. On the other hand, this will help lending companies to get an immediate fixed interest rate estimation based on clients information. Here, your goal is to use a training dataset to predict the loan rate category (1 \/ 2 \/ 3) that will be assigned to each loan in our test set.\n\nYou can use any combination of the features in the dataset to make your loan rate category predictions. Some features will be easier to use than others.","c8e5b3a7":"# Final Accuracy : <br>\n# accuracy Score = 53.31 <br>\n# f1 score = 51.94"}}