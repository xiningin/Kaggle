{"cell_type":{"50bdbaf0":"code","d881bde6":"code","1cf48b5b":"code","634a3512":"code","f83cb06b":"code","8a74aaac":"code","608b7844":"code","0f5c00be":"code","14f66ab0":"code","ac574677":"code","2fe374f7":"code","9b7c7b40":"code","6fe99b93":"code","9ebb8f01":"code","3209650f":"code","2998c79b":"code","02195c34":"code","fe0055a9":"code","edca2685":"code","9fa37c5e":"code","e505c213":"code","9b6553ea":"code","fa4b7a76":"code","797e1aea":"code","5c2d6015":"code","151d8f2c":"code","3a58e38f":"code","e2c9d59f":"code","61a3730d":"code","33d40495":"code","ccf398ae":"code","aa09d4dc":"code","0bd255ed":"code","f11493a3":"code","8e1a8414":"code","487fc638":"code","8847e4e4":"code","9d5b50f8":"code","3b3cc08c":"code","ef22aac0":"code","c9a916de":"code","cc930fe4":"code","acc238fc":"code","d87a0f85":"markdown","21620b52":"markdown","c6c9ee1d":"markdown","447cae4d":"markdown","6dc5b0c0":"markdown","750036b4":"markdown","780f9801":"markdown","14423eeb":"markdown","6ecad99d":"markdown","6aba8e01":"markdown","705b39d4":"markdown","ab448e22":"markdown"},"source":{"50bdbaf0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d881bde6":"data=pd.read_csv(\"\/kaggle\/input\/student-performance-data-set\/student-por.csv\")\ndata.head()","1cf48b5b":"data[\"G_Total\"]=(data[\"G1\"]+data[\"G2\"]+data[\"G3\"])\/3","634a3512":"data.corr()","f83cb06b":"data.describe()","8a74aaac":"x=data.iloc[:,0:30]\ny=data[\"G_Total\"]","608b7844":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=42)","0f5c00be":"from sklearn import preprocessing\nle_mjob = preprocessing.LabelEncoder()\nx_train[\"Mjob\"]=le_mjob.fit_transform(x_train[\"Mjob\"])\nx_test[\"Mjob\"]=le_mjob.transform(x_test[\"Mjob\"])","14f66ab0":"le_fjob = preprocessing.LabelEncoder()\nx_train[\"Fjob\"]=le_fjob.fit_transform(x_train[\"Fjob\"])\nx_test[\"Fjob\"]=le_fjob.transform(x_test[\"Fjob\"])","ac574677":"x_train[[\"Fjob\",\"Mjob\"]].corr()","2fe374f7":"le_famsize = preprocessing.LabelEncoder()\nx_train[\"famsize\"]=le_famsize.fit_transform(x_train[\"famsize\"])\nx_test[\"famsize\"]=le_famsize.transform(x_test[\"famsize\"])","9b7c7b40":"X_train=x_train._get_numeric_data()\nX_test=x_test._get_numeric_data()","6fe99b93":"import xgboost as xgb\nxgbreg=xgb.XGBRegressor()\n\nfrom sklearn.model_selection import cross_val_score\ncross_val_score(xgbreg,X_train,y_train,cv=5,scoring=\"neg_mean_absolute_error\")","9ebb8f01":"y_train.describe()","3209650f":"xgbreg=xgb.XGBRegressor()\nxgbreg.fit(X_train,y_train)\nypred=xgbreg.predict(X_test)\n\nimport sklearn.metrics as metrik\nmetrik.mean_absolute_error(y_true=y_test,y_pred=ypred)","2998c79b":"from sklearn.feature_selection import SelectKBest,mutual_info_regression\nselek8=SelectKBest(mutual_info_regression, k=8)\n\nX8_train=selek8.fit_transform(X_train,y_train)\nX8_test=selek8.transform(X_test)\n\nxgbreg=xgb.XGBRegressor()\nxgbreg.fit(X8_train,y_train)\nypred=xgbreg.predict(X8_test)\n\nimport sklearn.metrics as metrik\nmetrik.mean_absolute_error(y_true=y_test,y_pred=ypred)","02195c34":"selek8.get_support()","fe0055a9":"from sklearn.feature_selection import SelectKBest,mutual_info_regression\nselek1=SelectKBest(mutual_info_regression, k=1)\n\nX1_train=selek1.fit_transform(X_train,y_train)\nX1_test=selek1.transform(X_test)\n\nxgbreg=xgb.XGBRegressor()\nxgbreg.fit(X1_train,y_train)\nypred=xgbreg.predict(X1_test)\n\nimport sklearn.metrics as metrik\nmetrik.mean_absolute_error(y_true=y_test,y_pred=ypred)","edca2685":"i=0\nfor column in  list(selek1.get_support()):\n    if column:\n        print(i)\n        break\n    i=i+1    ","9fa37c5e":"x_train.iloc[:,8:9]","e505c213":"X_new_train=X_train.drop(\"Mjob\",axis=1)\nX_new_test=X_test.drop(\"Mjob\",axis=1)\n\nxgbreg=xgb.XGBRegressor()\n\nfrom sklearn.model_selection import cross_val_score\ncross_val_score(xgbreg,X_new_train,y_train,cv=5,scoring=\"neg_mean_absolute_error\")","9b6553ea":"xgbreg=xgb.XGBRegressor()\nxgbreg.fit(X_new_train,y_train)\nypred=xgbreg.predict(X_new_test)\n\nimport sklearn.metrics as metrik\nmetrik.mean_absolute_error(y_true=y_test,y_pred=ypred)","fa4b7a76":"x_train.iloc[:,7:8]","797e1aea":"X_new_train=X_train.drop(\"Fedu\",axis=1)\nX_new_test=X_test.drop(\"Fedu\",axis=1)\n\nxgbreg=xgb.XGBRegressor()\n\nfrom sklearn.model_selection import cross_val_score\nprint(cross_val_score(xgbreg,X_new_train,y_train,cv=5,scoring=\"neg_mean_absolute_error\"))\n\nxgbreg=xgb.XGBRegressor()\nxgbreg.fit(X_new_train,y_train)\nypred=xgbreg.predict(X_new_test)\n\nimport sklearn.metrics as metrik\nprint(metrik.mean_absolute_error(y_true=y_test,y_pred=ypred))","5c2d6015":"X_new_train=X_train.drop([\"Fedu\",\"Mjob\"],axis=1)\nX_new_test=X_test.drop([\"Fedu\",\"Mjob\"],axis=1)\n\nxgbreg=xgb.XGBRegressor()\n\nfrom sklearn.model_selection import cross_val_score\nprint(cross_val_score(xgbreg,X_new_train,y_train,cv=5,scoring=\"neg_mean_absolute_error\"))\n\nxgbreg=xgb.XGBRegressor()\nxgbreg.fit(X_new_train,y_train)\nypred=xgbreg.predict(X_new_test)\n\nimport sklearn.metrics as metrik\nprint(metrik.mean_absolute_error(y_true=y_test,y_pred=ypred))","151d8f2c":"mjob_train=X_train[[\"Mjob\"]]\nmjob_test=X_test[[\"Mjob\"]]\n\nxgbreg=xgb.XGBRegressor()\n\nfrom sklearn.model_selection import cross_val_score\nprint(cross_val_score(xgbreg,mjob_train,y_train,cv=5,scoring=\"neg_mean_absolute_error\"))","3a58e38f":"xgbreg=xgb.XGBRegressor()\nxgbreg.fit(mjob_train,y_train)\nypred=xgbreg.predict(mjob_test)\n\nimport sklearn.metrics as metrik\nprint(metrik.mean_absolute_error(y_true=y_test,y_pred=ypred))","e2c9d59f":"set(ypred)","61a3730d":"from sklearn.decomposition import PCA\npca = PCA(n_components=8, svd_solver='full')\nX_train_pca=pca.fit_transform(X_train)\nX_test_pca=pca.transform(X_test)\nfrom sklearn.svm import SVR\nprint(cross_val_score(SVR(),X_train_pca,y_train,cv=5,scoring=\"neg_mean_absolute_error\"))","33d40495":"svr=SVR()\nsvr.fit(mjob_train,y_train)\nypred=svr.predict(mjob_test)\n\nimport sklearn.metrics as metrik\nprint(metrik.mean_absolute_error(y_true=y_test,y_pred=ypred))","ccf398ae":"pd.Series(ypred).describe()","aa09d4dc":"from sklearn.model_selection import StratifiedShuffleSplit\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV\nC_range = np.logspace(-2, 10, 4)\ngamma_range = np.logspace(-9, 3, 4)\nparam_grid = dict(gamma=gamma_range, C=C_range)\ngrid = GridSearchCV(SVR(kernel=\"rbf\"), param_grid=param_grid,n_jobs=5,scoring=\"neg_root_mean_squared_error\")\ngrid.fit(X_train_pca, y_train)\n\nprint(\"The best parameters are %s with a score of %0.2f\"\n      % (grid.best_params_, grid.best_score_))","0bd255ed":"svr_tuned=SVR(C=1000000.0,gamma=1e-05,kernel=\"rbf\")\nsvr_tuned.fit(mjob_train,y_train)\nypred=svr_tuned.predict(mjob_test)\n\nimport sklearn.metrics as metrik\nprint(metrik.mean_absolute_error(y_true=y_test,y_pred=ypred))","f11493a3":"from sklearn.model_selection import StratifiedShuffleSplit\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV\nC_range = np.logspace(-2, 10, 6)\ngamma_range = np.logspace(-9, 3, 6)\nparam_grid = dict(gamma=gamma_range, C=C_range)\ngrid = GridSearchCV(SVR(kernel=\"rbf\"), param_grid=param_grid,cv=3,n_jobs=5)\ngrid.fit(X_train_pca, y_train)\n\nprint(\"The best parameters are %s with a score of %0.2f\"\n      % (grid.best_params_, grid.best_score_))","8e1a8414":"svr_tuned=SVR(C=158489.3192461111,gamma=2.5118864315095823e-07,kernel=\"rbf\")\nsvr_tuned.fit(mjob_train,y_train)\nypred=svr_tuned.predict(mjob_test)\n\nimport sklearn.metrics as metrik\nprint(metrik.mean_absolute_error(y_true=y_test,y_pred=ypred))","487fc638":"pd.Series(ypred).describe()","8847e4e4":"pd.Series(y_test).describe()","9d5b50f8":"from sklearn.tree import DecisionTreeRegressor\ndtree=DecisionTreeRegressor()\nprint(cross_val_score(dtree,X_train,y_train,cv=5,scoring=\"neg_mean_absolute_error\"))","3b3cc08c":"dtree=DecisionTreeRegressor()\ndtree.fit(X_train,y_train)\nypred=dtree.predict(X_test)\n\nimport sklearn.metrics as metrik\nprint(metrik.mean_absolute_error(y_true=y_test,y_pred=ypred))","ef22aac0":"pd.Series(ypred).describe()","c9a916de":"criterion = [\"mse\", \"friedman_mse\", \"mae\"]\nmax_depth = [2,3,4,6,8,10,12,13]\nmax_features=[\"auto\",\"sqrt\",\"log2\"]\nparam_gird = dict(criterion=criterion,max_features=max_features,\n                      max_depth=max_depth)\n\ngrid = GridSearchCV(DecisionTreeRegressor(), param_grid=param_gird,cv=3,n_jobs=5,scoring=\"neg_root_mean_squared_error\")\ngrid.fit(X_train, y_train)\n\nprint(\"The best parameters are %s with a score of %0.2f\"\n      % (grid.best_params_, grid.best_score_))","cc930fe4":"dtree=DecisionTreeRegressor(criterion= \"mae\",max_depth= 2, max_features= 'auto')\ndtree.fit(X_train,y_train)\nypred=dtree.predict(X_test)\n\nimport sklearn.metrics as metrik\nprint(metrik.mean_absolute_error(y_true=y_test,y_pred=ypred))","acc238fc":"import pickle\n\nfilename = 'dtreemodel.pkl'\npickle.dump(dtree, open(filename, 'wb'))","d87a0f85":"Okay we simplified the model. Less COlumns maybe improve our model.","21620b52":"XGBRegressor model is works okay. It looks acceptable.","c6c9ee1d":"Okay drop the MJOB column","447cae4d":"OKay nothing change.","6dc5b0c0":"OKay examination needed and also hyperparamter tuning is needed. ","750036b4":"Similar value. XGBoost and SVR can't produce higher and lower values as expectedly.","780f9801":"Okay I don't want to use gender or school columns. ","14423eeb":"OKay PCA with SVM Maybe work better.","6ecad99d":"Can't goes to 1 or 18. Okay plain Decision Tree maybe work fine.","6aba8e01":"Mjob is highly correlated with Grades. \u0130t is double interesting.","705b39d4":"Mother job is not correlated with Father job. It is maybe a information. ","ab448e22":"OKay Decision Tree works better. Have 2s and up to 17. Didn't stuck in 10-12. **Best working model is Decision Tree.**"}}