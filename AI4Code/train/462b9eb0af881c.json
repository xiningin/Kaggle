{"cell_type":{"ed959b81":"code","19b3580f":"code","a3cdd957":"code","6ea5407d":"code","b71817dc":"code","1dddd1ff":"code","3c35b66a":"code","a017e9dd":"code","111b923a":"code","22f7999c":"code","825bc724":"code","2d79f015":"code","40c4fa6b":"code","1d7c7e83":"code","43ed88c0":"code","fabad62f":"code","1fb287f1":"code","200a0c4c":"code","d22dfdb4":"code","74e8040a":"code","b5451758":"code","af3ab1dc":"markdown","420a65fc":"markdown"},"source":{"ed959b81":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","19b3580f":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\n","a3cdd957":"import seaborn as sns\nimport matplotlib.pyplot as plt","6ea5407d":"train_data.info()","b71817dc":"train_data.isnull().sum()","1dddd1ff":"train_data[train_data['Embarked'].isnull()]","3c35b66a":"sns.histplot(train_data.Age, kde=True)\nplt.show()","a017e9dd":"g = sns.FacetGrid(train_data, col='Pclass')\ng.map(sns.histplot, \"Age\")","111b923a":"sns.barplot(x = train_data.Pclass, y = train_data.Survived)\nplt.show()","22f7999c":"sns.barplot(x = train_data.Sex, y = train_data.Survived)\nplt.show()","825bc724":"g = sns.FacetGrid(train_data, col='Pclass',row = 'Survived')\ng.map(sns.histplot, \"Age\")","2d79f015":"g = sns.FacetGrid(train_data, col='Pclass', row = 'Sex')\ng.map(sns.histplot, \"Age\")","40c4fa6b":"g = sns.FacetGrid(train_data, col='Embarked', row = 'Survived')\ng.map(sns.histplot, \"Pclass\")","1d7c7e83":"sns.scatterplot(x = train_data.Fare, y = train_data.Age)","43ed88c0":"sns.heatmap(train_data.corr(), annot=True, fmt=\".2f\")\nplt.show()","fabad62f":"train_data.groupby('Sex')['Age'].mean()","1fb287f1":"test_data.groupby('Sex')['Age'].mean()","200a0c4c":"train_data['Age']=train_data.groupby(\"Sex\")['Age'].transform(lambda x: x.fillna(x.mean()))\ntest_data['Age']=test_data.groupby(\"Sex\")['Age'].transform(lambda x: x.fillna(x.mean()))","d22dfdb4":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ntrain_data['Sex'] = le.fit_transform(train_data.Sex)\n\ntrain_data.head()","74e8040a":"test_data['Sex'] = le.fit_transform(test_data.Sex)\n\ntest_data.head()","b5451758":"from sklearn.ensemble import RandomForestClassifier\n\n\ny = train_data[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","af3ab1dc":"### Clear data","420a65fc":"### Data analysis"}}