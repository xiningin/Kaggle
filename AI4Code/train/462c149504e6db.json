{"cell_type":{"4de8c944":"code","9362e90a":"code","942d8e72":"code","b5bb4f8f":"code","7b6a8b24":"code","60a497b6":"code","774bcaed":"code","7423567c":"code","b24baf95":"code","7c210a91":"code","47822dcc":"code","5d45347c":"code","33604d1c":"code","ff881487":"code","2fa2fcbd":"code","071cdf64":"code","b78fe901":"code","44603732":"code","562f4ece":"code","96f90225":"code","0249cef7":"code","2fc405ac":"code","179390c4":"code","005b9f6e":"code","4bf372cd":"code","6e253269":"code","81e00906":"code","208c2d55":"code","f10e8d8c":"code","8da70de7":"code","f7773364":"code","797a3730":"markdown","6216a8d1":"markdown","c02296e3":"markdown","e048c840":"markdown","a5b23237":"markdown","9a390fb1":"markdown","250ab736":"markdown","04df4e07":"markdown","55d0a3cf":"markdown"},"source":{"4de8c944":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt \nimport seaborn as sns\nfrom sklearn.metrics import average_precision_score\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import classification_report,precision_recall_curve,confusion_matrix,accuracy_score,roc_curve,f1_score,auc\n%matplotlib inline","9362e90a":"df=pd.read_csv('\/kaggle\/input\/heart-disease-uci\/heart.csv')\ndf.head(5)","942d8e72":"df.describe()","b5bb4f8f":"df.info()","7b6a8b24":"plt.figure(figsize=(14,10))\nsns.heatmap(df.corr(),annot=True,fmt='.3f',linewidths=2)\nplt.show()","60a497b6":"df.hist(figsize = (10,10))","774bcaed":"a = pd.get_dummies(df['cp'], prefix = \"cp\")\nb = pd.get_dummies(df['thal'], prefix = \"thal\")\nc = pd.get_dummies(df['slope'], prefix = \"slope\")\n\n\nframes = [df, a, b, c]\ndf = pd.concat(frames, axis = 1)\ndf = df.drop(columns = ['cp', 'thal', 'slope'])\ndf.head()","7423567c":"df.columns","b24baf95":"# transform data to numeric to enable further analysis.\ndf = df.apply(pd.to_numeric)\ndf.dtypes","7c210a91":"x = df.drop(['target'], axis = 1)\ny = df.target.values","47822dcc":"from sklearn.model_selection import train_test_split\n# split data to train and test \nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.3,stratify=y, random_state = 42)","5d45347c":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nx_train = sc.fit_transform(x_train)\nx_test = sc.transform(x_test)","33604d1c":"# convert the data to categorical labels\n\nfrom keras.utils.np_utils import to_categorical\n\ny_train = to_categorical(y_train, num_classes=None)\ny_test = to_categorical(y_test, num_classes=None)\nprint (y_train.shape)","ff881487":"x_train.shape","2fa2fcbd":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.layers import Activation, Dropout, Flatten, Dense\nfrom keras import regularizers\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nimport warnings","071cdf64":"classifier = Sequential()\n# add input layer and hidden layer\nclassifier.add(Dense(\n    activation=\"relu\", input_dim=21, units=6,\n    kernel_initializer=\"normal\",kernel_regularizer=regularizers.l2(0.001)\n))\nclassifier.add(Dropout(0.2))\n\n# Adding the output layer\nclassifier.add(Dense(activation=\"softmax\", units=2))\nclassifier.save_weights(\"weights\")","b78fe901":"history = {}","44603732":"from keras.optimizers import SGD\nclassifier.load_weights(\"weights\")\nopt1 = SGD(lr=0.001)\nclassifier.compile(optimizer = opt1, loss = 'categorical_crossentropy', metrics = ['accuracy'])\nhistory['SGD'] = classifier.fit(x_train, y_train,validation_data=(x_test, y_test), batch_size = 16, epochs = 50)","562f4ece":"# Predicting the Test set results\nsgd_y_pred = classifier.predict(x_test)","96f90225":"sgd_cr = classification_report(y_test,sgd_y_pred.round())\nprint(sgd_cr)","0249cef7":"# Compiling the ANN\nfrom keras.optimizers import SGD\nclassifier.load_weights(\"weights\")\nopt2 = SGD(lr=0.001,momentum=0.9)\nclassifier.compile(optimizer = opt2, loss = 'categorical_crossentropy', metrics = ['accuracy'])\nhistory['momentum_SGD'] = classifier.fit(x_train, y_train,validation_data=(x_test, y_test), batch_size = 10, epochs = 50)","2fc405ac":"# Predicting the Test set results\nmsgd_y_pred = classifier.predict(x_test)","179390c4":"msgd_cr = classification_report(y_test,msgd_y_pred.round())\nprint(msgd_cr)","005b9f6e":"from keras.optimizers import Adam\nclassifier.load_weights(\"weights\")\nopt3 = Adam(lr=0.001)\nclassifier.compile(optimizer = opt3, loss = 'categorical_crossentropy', metrics = ['accuracy'])\nhistory['Adam'] = classifier.fit(x_train, y_train,validation_data=(x_test, y_test), batch_size = 10, epochs = 50)","4bf372cd":"# Predicting the Test set results\nadam_y_pred = classifier.predict(x_test)","6e253269":"adam_cr = classification_report(y_test,adam_y_pred.round())\nprint(adam_cr)","81e00906":"from keras.optimizers import RMSprop\n\nclassifier.load_weights(\"weights\")\nopt4 = RMSprop(lr=0.001,rho=0.9)\nclassifier.compile(optimizer = opt4 , loss = 'categorical_crossentropy', metrics = ['accuracy'])\nhistory['RMSprop'] = classifier.fit(x_train, y_train,validation_data=(x_test, y_test), batch_size = 10, epochs = 50)","208c2d55":"rms_y_pred = classifier.predict(x_test)","f10e8d8c":"rms_cr = classification_report(y_test,rms_y_pred.round())\nprint(rms_cr)","8da70de7":"plt.subplots(figsize=(13, 8))\n# plt.plot(history['RMSprop'].history['accuracy'])\nplt.plot(history['SGD'].history['loss'],label='SGD')\nplt.plot(history['momentum_SGD'].history['loss'],label='momentum_SGD')\nplt.plot(history['Adam'].history['loss'],label = 'Adam')\nplt.plot(history['RMSprop'].history['loss'],label = 'RMSprop')\nplt.title('Model loss')\nplt.ylabel('loss')\nplt.xlabel('Epoch')\nplt.legend()\nplt.show()","f7773364":"plt.subplots(figsize=(13, 8))\n# plt.plot(history['RMSprop'].history['accuracy'])\nplt.plot(history['SGD'].history['val_loss'],label='SGD')\nplt.plot(history['momentum_SGD'].history['val_loss'],label='momentum_SGD')\nplt.plot(history['Adam'].history['val_loss'],label = 'Adam')\nplt.plot(history['RMSprop'].history['val_loss'],label = 'RMSprop')\nplt.title('Model loss')\nplt.ylabel('Validation loss')\nplt.xlabel('Epoch')\nplt.legend()\nplt.show()","797a3730":"# Read Data","6216a8d1":"first we create dummy variables for categorial columns which  have more than two values, meaning `cp, thal and slope` and drop the original columns.","c02296e3":"## ADAM Optimizer","e048c840":"## RMSprop Optimizer","a5b23237":"## Momentum SGD Optimizer","9a390fb1":"# Neural Network \n## initialization","250ab736":"# Preprocessing","04df4e07":"There is no missing values in dataset","55d0a3cf":"## SGD Optimizer"}}