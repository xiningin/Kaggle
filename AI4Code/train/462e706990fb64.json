{"cell_type":{"9fcaff16":"code","eb9bc8cb":"code","db4848a8":"code","3b496dd5":"code","2fc16502":"code","612788ba":"code","f0c8cd3f":"code","b1292608":"code","e3dd0233":"code","e3015295":"code","8b3594af":"code","510674a9":"code","0bd714cf":"code","c44335a5":"code","cedfc2e2":"code","7eb153f9":"code","d7a9df0c":"code","635b676a":"code","57ae634b":"code","a14914a1":"code","38824d84":"code","6ea9d8fd":"code","6136e447":"code","abe6fced":"code","1b707469":"code","be69e3b1":"code","df52cbb9":"code","3d1921e2":"code","fe7bc01b":"code","3a387218":"code","8a86f098":"code","7afda825":"code","b96d6f9b":"code","2d740699":"code","fe9f32ea":"code","cc7e5b69":"code","0255d05a":"code","92611401":"code","d01b2437":"code","ff5cc13b":"code","95f903bc":"code","0885413f":"code","bc5b8c9d":"code","8c422b6e":"code","2a77e094":"code","2de23297":"code","3491744f":"code","9e7b8365":"code","2b833800":"code","c9845698":"code","b50380c7":"code","1701a33d":"code","d73e01ca":"code","edcb8cd1":"code","441310fb":"code","65e91059":"code","a5b0363b":"code","5ce53608":"code","88c63d76":"code","1fea7031":"code","db61ece2":"code","d4ef360d":"code","5b40d288":"code","69fcc074":"code","86478372":"code","59c78406":"markdown","db576ee8":"markdown","701cc194":"markdown","b9ae97f4":"markdown","cf6f8905":"markdown","163ae3b1":"markdown","91346549":"markdown","905dee46":"markdown","91e348d6":"markdown","a0167e87":"markdown","c355669c":"markdown","0bbbe83f":"markdown","c0b4f42b":"markdown","44e97017":"markdown","85ee9468":"markdown","350dd04d":"markdown","96ca0f36":"markdown","0d727eb8":"markdown","de352cbf":"markdown","2f89495c":"markdown","fe24c477":"markdown","fe10a154":"markdown","1e575683":"markdown","414251f8":"markdown","b2fb16af":"markdown","941207e3":"markdown","bd07a3fd":"markdown","17f693d3":"markdown","98d04dc0":"markdown","aae49fdd":"markdown","e547f0f7":"markdown"},"source":{"9fcaff16":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline\nplt.style.use('fivethirtyeight')\npd.set_option('display.max_columns', 50)\npd.set_option('display.max_rows', 50)\npd.set_option('display.float', '{:.4f}'.format)","eb9bc8cb":"data = pd.read_csv('\/kaggle\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')\ndata.head()","db4848a8":"data.describe()","3b496dd5":"data.info()","2fc16502":"data.customerID.nunique()","612788ba":"data.Churn.value_counts()","f0c8cd3f":"sns.countplot('Churn', data=data)","b1292608":"plt.figure(figsize=(15, 15))\n\nplt.subplot(3, 2, 1)\nsns.countplot('gender', data=data, hue='Churn')\n\nplt.subplot(3, 2, 2)\nsns.countplot('SeniorCitizen', data=data, hue='Churn')\n\nplt.subplot(3, 2, 3)\nsns.countplot('Partner', data=data, hue='Churn')\n\nplt.subplot(3, 2, 4)\nsns.countplot('Dependents', data=data, hue='Churn')\n\nplt.subplot(3, 2, 5)\nsns.countplot('PhoneService', data=data, hue='Churn')\n\nplt.subplot(3, 2, 6)\nsns.countplot('PaperlessBilling', data=data, hue='Churn')","e3dd0233":"data.tenure.value_counts()","e3015295":"data.tenure.max()","8b3594af":"data['TotalCharges'] = data.TotalCharges.replace(' ', np.nan)\ndata['TotalCharges'] = data.TotalCharges.astype(float)","510674a9":"data.TotalCharges.dtype","0bd714cf":"plt.figure(figsize=(14, 14))\n\nplt.subplot(3, 2, 1)\ndata[data.Churn == 'No'].tenure.hist(bins=35, alpha=0.6, label='Churn=No')\ndata[data.Churn == 'Yes'].tenure.hist(bins=35, alpha=0.6, label='Churn=Yes')\nplt.legend()\nplt.xlabel('Number of months with company')\n\nplt.subplot(3, 2, 2)\ndata[data.Churn == 'No'].tenure.value_counts().hist(bins=50, alpha=0.6, label='Churn=No')\ndata[data.Churn == 'Yes'].tenure.value_counts().hist(bins=50, alpha=0.6, label='Churn=Yes')\nplt.legend()\n\nplt.subplot(3, 2, 3)\ndata[data.Churn == 'No'].MonthlyCharges.hist(bins=35, alpha=0.6, label='Churn=No')\ndata[data.Churn == 'Yes'].MonthlyCharges.hist(bins=35, alpha=0.6, label='Churn=Yes')\nplt.xlabel('Monthly Payment')\nplt.legend()\n\nplt.subplot(3, 2, 4)\ndata[data.Churn == 'No'].TotalCharges.hist(bins=35, alpha=0.6, label='Churn=No')\ndata[data.Churn == 'Yes'].TotalCharges.hist(bins=35, alpha=0.6, label='Churn=Yes')\nplt.xlabel('Total Payment')\nplt.legend()","c44335a5":"plt.figure(figsize=(15, 15))\n\nplt.subplot(3, 2, 1)\nsns.countplot('OnlineBackup', data=data, hue='Churn')\n\nplt.subplot(3, 2, 2)\nsns.countplot('OnlineSecurity', data=data, hue='Churn')\n\nplt.subplot(3, 2, 3)\nsns.countplot('InternetService', data=data, hue='Churn')\n\nplt.subplot(3, 2, 4)\nsns.countplot('MultipleLines', data=data, hue='Churn')\n\nplt.subplot(3, 2, 5)\nsns.countplot('DeviceProtection', data=data, hue='Churn')\n\nplt.subplot(3, 2, 6)\nsns.countplot('TechSupport', data=data, hue='Churn')","cedfc2e2":"plt.figure(figsize=(15, 18))\n\nplt.subplot(3, 2, 1)\nsns.countplot('StreamingMovies', data=data, hue='Churn')\n\nplt.subplot(3, 2, 2)\nsns.countplot('StreamingTV', data=data, hue='Churn')\n\nplt.subplot(3, 2, 3)\ng = sns.countplot('PaymentMethod', data=data, hue='Churn')\ng.set_xticklabels(g.get_xticklabels(), rotation=45);\n\nplt.subplot(3, 2, 4)\ng = sns.countplot('Contract', data=data, hue='Churn')\ng.set_xticklabels(g.get_xticklabels(), rotation=45);","7eb153f9":"data.isna().sum()","d7a9df0c":"data['TotalCharges'] = data.TotalCharges.fillna(value=data.TotalCharges.median())","635b676a":"data.TotalCharges.median()","57ae634b":"columns = ['OnlineSecurity', 'OnlineBackup', 'DeviceProtection', \n           'TechSupport', 'StreamingTV', 'StreamingMovies']\nfor column in columns:\n    data[column] = data[column].replace({'No internet service':'No'})","a14914a1":"data.head()","38824d84":"binary_columns = [column for column in data.columns if data[column].nunique() == 2]\nlen(binary_columns)","6ea9d8fd":"columns = ['Partner', 'Dependents', 'PhoneService', 'OnlineSecurity', 'OnlineBackup',  \n           'DeviceProtection', 'TechSupport', 'StreamingTV', 'StreamingMovies', \n           'PaperlessBilling', 'Churn']\nfor col in columns:\n    data[col] = data[col].map({'Yes':1, 'No':0})\n    \ndata['gender'] = data.gender.map({'Male':1, 'Female':0})","6136e447":"for col in binary_columns:\n    print(data[col].unique())","abe6fced":"customerID = data.customerID\ndata.drop('customerID', axis=1, inplace=True)","1b707469":"def tenure_lab(period) :\n    \n    if period <= 12 :\n        return 1\n    elif (period > 12) & (period <= 24 ):\n        return 2\n    elif (period > 24) & (period <= 36) :\n        return 3\n    elif (period > 36) & (period <= 48) :\n        return 3\n    elif (period > 48) & (period <= 60) :\n        return 4\n    elif period > 60 :\n        return 5\n    \ndata['tenure'] = data.tenure.apply(tenure_lab)","be69e3b1":"data.tenure.value_counts()","df52cbb9":"dummy_col = ['MultipleLines', 'InternetService', 'Contract', 'PaymentMethod', 'tenure']\ndata_1 = pd.get_dummies(data, columns=dummy_col, drop_first=True, dtype='uint8')","3d1921e2":"data_1.head()","fe7bc01b":"plt.figure(figsize=(20, 18))\nsns.heatmap(data_1.corr(), annot=True)","3a387218":"data_1.drop('Churn', axis=1).corrwith(data.Churn).plot(kind='barh', figsize=(10, 7))","8a86f098":"print(data_1.shape)\n\n# Remove duplicate Features\ndata_1 = data_1.T.drop_duplicates()\ndata_1 = data_1.T\n\n# Remove Duplicate Rows\ndata_1.drop_duplicates(inplace=True)\n\nprint(data_1.shape)","7afda825":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\n\nX = data_1.drop('Churn', axis=1)\ny = data_1.Churn\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n\nscaler = MinMaxScaler()\nX_train_std = scaler.fit_transform(X_train)\nX_test_std = scaler.transform(X_test)\nX_std = scaler.transform(X)","b96d6f9b":"(y_test.value_counts()[0] \/ y_test.shape)[0]","2d740699":"from sklearn.metrics import confusion_matrix, accuracy_score, classification_report\n\ndef evaluate(model, X_train, X_test, y_train, y_test):\n    y_test_pred = model.predict(X_test)\n    y_train_pred = model.predict(X_train)\n\n    print(\"TRAINIG RESULTS: \\n===============================\")\n    clf_report = pd.DataFrame(classification_report(y_train, y_train_pred, output_dict=True))\n    print(f\"CONFUSION MATRIX:\\n{confusion_matrix(y_train, y_train_pred)}\")\n    print(f\"ACCURACY SCORE:\\n{accuracy_score(y_train, y_train_pred):.4f}\")\n    print(f\"CLASSIFICATION REPORT:\\n{clf_report}\")\n\n    print(\"TESTING RESULTS: \\n===============================\")\n    clf_report = pd.DataFrame(classification_report(y_test, y_test_pred, output_dict=True))\n    print(f\"CONFUSION MATRIX:\\n{confusion_matrix(y_test, y_test_pred)}\")\n    print(f\"ACCURACY SCORE:\\n{accuracy_score(y_test, y_test_pred):.4f}\")\n    print(f\"CLASSIFICATION REPORT:\\n{clf_report}\")","fe9f32ea":"from sklearn.linear_model import LogisticRegression\n\nlr_classifier = LogisticRegression(solver='liblinear', penalty='l1')\nlr_classifier.fit(X_train_std, y_train)\n\nevaluate(lr_classifier, X_train_std, X_test_std, y_train, y_test)","cc7e5b69":"from sklearn.model_selection import cross_val_score\n\nscores = cross_val_score(lr_classifier, X_std, y, cv=3, scoring='f1')\nprint(scores)\nprint(f\"Logistic Regression f1_score: {scores.mean() * 100:.2f}% +\/- ({scores.std() * 100:.2f})\")","0255d05a":"from sklearn.metrics import plot_confusion_matrix, plot_roc_curve\n\ndisp = plot_confusion_matrix(lr_classifier, X_test_std, y_test, \n                             cmap='Blues', values_format='d', \n                             display_labels=['Stay', 'Churn'])","92611401":"disp = plot_roc_curve(lr_classifier, X_test_std, y_test)","d01b2437":"stay = (y_train.value_counts()[0] \/ y_train.shape)[0]\nchurn = (y_train.value_counts()[1] \/ y_train.shape)[0]\n\nprint(f\"Staying Rate: {stay * 100:.2f}%\")\nprint(f\"Churning Rate: {churn * 100 :.2f}%\")","ff5cc13b":"from sklearn.ensemble import RandomForestClassifier\n\nrand_forest = RandomForestClassifier(n_estimators=1000)\nrand_forest.fit(X_train, y_train)\n\nevaluate(rand_forest, X_train, X_test, y_train, y_test)","95f903bc":"from sklearn.model_selection import GridSearchCV\n\nrf_clf = RandomForestClassifier(n_estimators=100)\n\nparam_grid = {'n_estimators':[550, 600, 650],\n              'max_depth':[3, 5, 7, 10, 15, None], \n              'min_samples_split':[2, 3, 10], \n              'min_samples_leaf':[1, 3, 5, 7, 10], \n              'criterion':[\"gini\", \"entropy\"]}\n\nrf_grid_cv = GridSearchCV(rf_clf, param_grid, scoring=\"f1\", n_jobs=-1, verbose=1, cv=3)\n# rf_grid_cv.fit(X_train, y_train)","0885413f":"# rf_grid_cv.best_estimator_","bc5b8c9d":"rf_clf = RandomForestClassifier(criterion='entropy',\n                                max_depth=10,\n                                min_samples_leaf=3, \n                                min_samples_split=3,\n                                n_estimators=600)\n\nrf_clf.fit(X_train, y_train)\nevaluate(rf_clf, X_train, X_test, y_train, y_test)","8c422b6e":"scores = cross_val_score(rf_clf, X, y, cv=3, scoring='f1')\nprint(scores)\nprint(f\"Random Forest F1_score: {scores.mean() * 100:.2f}% +\/- ({scores.std() * 100:.2f})\")","2a77e094":"disp = plot_confusion_matrix(rf_clf, X_test, y_test, \n                             cmap='Blues', values_format='d', \n                             display_labels=['Stay', 'Churn'])","2de23297":"disp = plot_roc_curve(lr_classifier, X_test_std, y_test)\nplot_roc_curve(rf_clf, X_test, y_test, ax=disp.ax_)","3491744f":"from sklearn.svm import SVC\n\nsvc = SVC(kernel='rbf')\nsvc.fit(X_train_std, y_train)\n\nevaluate(svc, X_train_std, X_test_std, y_train, y_test)","9e7b8365":"param_grid = {\n    'C':[0.001, 0.01, 0.1, 1, 10, 100],\n    'gamma':[1, 0.1, 0.01, 0.001],\n    'kernel':['rbf']\n}\n\ngrid_cv = GridSearchCV(SVC(), param_grid, verbose=1, cv=5, n_jobs=-1)\n# grid_cv.fit(X_train_std, y_train)","2b833800":"# grid_cv.best_estimator_","c9845698":"svc = SVC(C=10, gamma=0.01, kernel='rbf')\nsvc.fit(X_train_std, y_train)\nevaluate(svc, X_train_std, X_test_std, y_train, y_test)","b50380c7":"scores = cross_val_score(svc, X_std, y, cv=3, scoring='f1')\nprint(scores)\nprint(f\"Support Vector Machine f1_score: {scores.mean() * 100:.2f}% +\/- ({scores.std() * 100:.2f})\")","1701a33d":"disp = plot_confusion_matrix(svc, X_test_std, y_test, \n                             cmap='Blues', values_format='d', \n                             display_labels=['Stay', 'Churn'])","d73e01ca":"disp = plot_roc_curve(lr_classifier, X_test_std, y_test)\nplot_roc_curve(rf_clf, X_test, y_test, ax=disp.ax_)\nplot_roc_curve(svc, X_test_std, y_test, ax=disp.ax_)","edcb8cd1":"from xgboost import XGBClassifier\n\nxgb_clf = XGBClassifier()\nxgb_clf.fit(X_train, y_train)\nevaluate(xgb_clf, X_train, X_test, y_train, y_test)","441310fb":"hyperparameter_grid = {'n_estimators': [75, 90, 100, 125], \n                       'learning_rate' : [0.09, 0.1, 0.2], \n                       'base_score' : [0.15],\n                       'colsample_bytree':[0.85, 0.95, 1],\n                       'colsample_bylevel':[0.85, 0.95, 1],\n                       'colsample_bynode':[0.85, 0.95, 1],\n                      }\n\nxgb_clf = XGBClassifier()\nxgb_cv = GridSearchCV(estimator=xgb_clf, param_grid=hyperparameter_grid, cv=3, \n                      scoring='f1', n_jobs =-1, verbose=1)\n\n# xgb_cv.fit(X_train, y_train)","65e91059":"# xgb_cv.best_estimator_","a5b0363b":"xgb_clf = XGBClassifier(base_score=0.15, \n                        learning_rate=0.09, \n                        colsample_bylevel=0.85,\n                        colsample_bynode=0.85, \n                        colsample_bytree=0.95,\n                        n_estimators=100)\nxgb_clf.fit(X_train, y_train)\nevaluate(xgb_clf, X_train, X_test, y_train, y_test)","5ce53608":"scores = cross_val_score(xgb_clf, X, y, cv=3, scoring='f1')\nprint(scores)\nprint(f\"XGBoost F1_score: {scores.mean() * 100:.2f}% +\/- ({scores.std() * 100:.2f})\")","88c63d76":"disp = plot_confusion_matrix(xgb_clf, X_test, y_test, \n                             cmap='Blues', values_format='d', \n                             display_labels=['Stay', 'Churn'])","1fea7031":"disp = plot_roc_curve(lr_classifier, X_test_std, y_test)\nplot_roc_curve(rf_clf, X_test, y_test, ax=disp.ax_)\nplot_roc_curve(svc, X_test_std, y_test, ax=disp.ax_)\nplot_roc_curve(xgb_clf, X_test, y_test, ax=disp.ax_)","db61ece2":"def feature_imp(df, model):\n    fi = pd.DataFrame()\n    fi[\"feature\"] = df.columns\n    fi[\"importance\"] = model.feature_importances_\n    return fi.sort_values(by=\"importance\", ascending=False)","d4ef360d":"df = feature_imp(data_1.drop('Churn', axis=1), xgb_clf)\ndf.set_index('feature', inplace=True)\ndf.plot(kind='barh', figsize=(10, 6))\nplt.title('Feature Importance according to XGBoost')","5b40d288":"df = feature_imp(data_1.drop('Churn', axis=1), rf_clf)\ndf.set_index('feature', inplace=True)\ndf.plot(kind='barh', figsize=(10, 6))\nplt.title('Feature Importance according to Random Forest')","69fcc074":"from sklearn.feature_selection import RFE\n\nrfe = RFE(lr_classifier, n_features_to_select=1)\nrfe.fit(X_train, y_train)","86478372":"rfe_ranking = dict(zip(rfe.ranking_.tolist(), X_train.columns.tolist()))\nprint(rfe_ranking)","59c78406":"## 4. XGBoost Classifier","db576ee8":"## `Churn`: Target variable","701cc194":"### Cross Validation Score for Logistic Regression","b9ae97f4":"## Missing Values","cf6f8905":"## `tenure`, `MonthlyCharges`, `TotalCharges`\n- `tenure`: The number of months the customer has stayed with the company\n- `MonthlyCharges`: The amount charged to the customer monthly\n- `TotalCharges`: The total amount charged to the customer","163ae3b1":"## `gender`, `SeniorCitizen`, `Partner`, `Dependents`, `PhoneService`, `PaperlessBilling`\n- `gender`: Whether the customer is a male or a female\n- `SeniorCitizen`: Whether the customer is a senior citizen or not (1, 0)\n- `Partner`: Whether the customer has a partner or not (Yes, No)\n- `Dependents`: Whether the customer has dependents or not (Yes, No)\n- `PhoneService`: Whether the customer has a ohone service or not (Yes, No)\n- `PaperlessBilling`: Whether the customer has paperless billing or not (Yes, No)","91346549":"It seems that the gender column doesn't have a big effect on the Chur rate. \n- Churn: 50.73% Males, 49.26% Females\n- Not Churn: 50.24% Males, 49.75% Females","905dee46":"### Cross Validation Score For XGBoost","91e348d6":"The `customerID` is unique for each customers and will not be useful to our model.","a0167e87":"## `StreamingMovies`, `StreamingTV`, `PaymentMethod`, `Contract`\n- `StreamingMovies`: Whether the customer has streaming movies or not (Yes, No, No internet service)\n- `StreamingTV`: Whether the customer has streaming TV or not (Yes, No, No internet service)\n- `PaymentMethod`: The customer's payment method (Electronic check, Mailed check, Bank Transfer (automatic), Credit card (automatic))\n- `Contract`: The contract term of the customer (Month-to-month, One year, Two year)","c355669c":"## Binary Columns","0bbbe83f":"### Cross Validation Score for Support Vector Machine","c0b4f42b":"# Customer Churn in Telecom Companies\n![power_bi_report.JPG](attachment:power_bi_report.JPG)","44e97017":"## Feature Importance","85ee9468":"## 2. Random Forest Classifier","350dd04d":"## `customerID`\nwe are going to drop the customers ID","96ca0f36":"# 4. Model Building\n## Base line model\n\nWe an imbalanced problem here. If we predict that all our customers will not churn, we will have an accuracy of `73.84%`.","0d727eb8":"## Checking for duplicate rows and columns","de352cbf":"## Correlation Analysis","2f89495c":"# 3. Data Preprocessing","fe24c477":"## 3. Support Vector Machine","fe10a154":"### Cross Validation Score for Random Forest Classifier","1e575683":"## `OnlineSecurity`, `OnlineBackup`, `InternetService`, `DeviceProtection`, `TechSupport`, `StreamingTV`, `StreamingMovies`","414251f8":"The senior citizen are more likely to churn","b2fb16af":"# 1. Exploratory Data Analysis (EDA)","941207e3":"## `MultipleLines`, `InternetService`, `Contract`, `PaymentMethod`\nWe are going to transfer these columns into dummy variables","bd07a3fd":"## `OnlineSecurity`, `OnlineBackup`, `InternetService`, `MultipleLines`, `DeviceProtection`, `TechSupport`\n\n- `OnlineSecurity`: Whether the customer has online security or not (Yes, No, No internet service)\n- `OnlineBackup`: Whether the customer has online backup or not (Yes, No, No internet service)\n- `InternetService`: Customer's internet service provider (DSL, Fiber optic, No)\n- `MultipleLines`: Whether the customer has Multiple Lines or not (Yes, No, No phone service)\n- `DeviceProtection`: Whether the customer has device protection or not (Yes, No, No internet service)\n- `TechSupport`: Whether the customer has tech support or not (Yes, No, No internet service)","17f693d3":"## 1. Logistic Regression","98d04dc0":"## `tenure`","aae49fdd":"## `customerID`","e547f0f7":"# 2. Feature Engineering"}}