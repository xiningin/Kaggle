{"cell_type":{"44e8e8a8":"code","359f8eeb":"code","ab535eb6":"code","58f4b622":"code","d36e4f14":"code","998fe506":"code","a45f2574":"code","a74767dc":"code","96cc3a14":"code","e87fb039":"code","a9820b02":"code","8d451739":"code","0a9032d6":"code","185958b3":"code","ae7648b9":"code","94c7310e":"code","80a67a00":"code","6f571668":"code","7dfe039f":"code","dd46877e":"code","73a54583":"code","469af1b1":"code","84801907":"markdown","0b416635":"markdown","2dd03dff":"markdown","d7fea67f":"markdown","b16e5d62":"markdown","af47a4c4":"markdown","47d5f87a":"markdown"},"source":{"44e8e8a8":"import pandas as pd\nimport numpy as np\nimport scipy as sp\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom sklearn.preprocessing import MinMaxScaler\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt ","359f8eeb":"user = pd.read_csv(\"..\/input\/anime-recommendations-database\/rating.csv\")\nuser.head()","ab535eb6":"anime = pd.read_csv(\"..\/input\/anime-recommendations-database\/anime.csv\")\nanime.head()","58f4b622":"\n'''\n\u30e6\u30fc\u30b6\u30fc\u30c6\u30fc\u30d6\u30eb\u304c1\uff10\uff10\uff10\u672a\u6e80\u306e\u30e6\u30fc\u30b6\u30fc\u3092\u9664\u53bb\u3059\u308b\u3002\n'''\n\nuser_cnt = pd.DataFrame(user.user_id.value_counts().values, index=user.user_id.value_counts().index)\nuser_cnt = user_cnt.reset_index()\nuser_cnt.columns = [\"user_id\", \"cnt\"]\nuser = pd.merge(user, user_cnt, how=\"left\", on=\"user_id\")\nuser = user[user.cnt > 1000] # \u30e1\u30e2\u30ea\u4e0d\u8db3\u306e\u305f\u3081\nuser.drop(\"cnt\", axis=1, inplace=True)\nuser.head()","d36e4f14":"s = MinMaxScaler(feature_range=(-1.0, 1.0))\nuser[\"scaler_rating\"] = s.fit_transform(user[[\"rating\"]]).ravel()","998fe506":"# No scaler tables \npiv = user.pivot_table(index=[\"user_id\"], columns=[\"anime_id\"], values=[\"rating\"], fill_value=0.0)\npiv.head()","a45f2574":"# Scaler tables \nuser_anime_piv = user.pivot_table(index=[\"user_id\"], columns=[\"anime_id\"], values=[\"scaler_rating\"], fill_value=0.0)\nuser_anime_piv.head()","a74767dc":"\n'''\n\u6a19\u6e96\u5316\u3055\u308c\u305f\u30d4\u30dc\u30c3\u30c8\u30c6\u30fc\u30d6\u30eb\u304b\u3089\u305d\u308c\u305e\u308c\u306e\u5024\u3054\u3068\u306b\u985e\u4f3c\u5ea6\u306e\u7b97\u51fa\u3092\u3059\u308b\u3002\n* user_id x user_id \n* anime_id x anime_id \n'''\n\npiv_sparse = sp.sparse.csr_matrix(user_anime_piv.values)\nuser_similar = cosine_similarity(piv_sparse)\nanime_similar = cosine_similarity(piv_sparse.T)","96cc3a14":"col = [int(ii) for i, ii in user_anime_piv.columns]\nanime_similar = pd.DataFrame(anime_similar, \n                             columns=col, index=col)\nuser_similar = pd.DataFrame(user_similar, \n                             columns=user_anime_piv.index, index=user_anime_piv.index)\nuser_similar.head() # user_id x user_id ","e87fb039":"anime_similar.head() # anime_id x anime_id ","a9820b02":"\n'''\n\u30a2\u30cb\u30e1\u9593\u306e\u985e\u4f3c\u5ea6\n'''\n\ndef find_similar_anime(anime_name: str, n=10):\n    anime_id = anime[anime.name == anime_name][\"anime_id\"].values[0]\n    ser = anime_similar[int(anime_id)].sort_values(ascending=False)\n    sim_anime_list, similar_list = ser.index[1:n+1], ser.values[1:n+1]\n    df_list = []\n    for sim_anime, sim in zip(sim_anime_list, similar_list):\n        name = anime[anime.anime_id == sim_anime][\"name\"].values[0]\n        genre = anime[anime.anime_id == sim_anime][\"genre\"].values[0]\n        df_list.append({\"anime_id\": sim_anime, \"cosine_similar\": sim, \"name\": name, \"genre\": genre})\n    return pd.DataFrame(df_list).sort_values(\"cosine_similar\", ascending=False)\n\n'''\n\u30e6\u30fc\u30b6\u30fc\u9593\u306e\u985e\u4f3c\u5ea6\n'''\n\ndef find_similar_user(user_id: int, n=10):\n    ser = user_similar[int(user_id)].sort_values(ascending=False)[1:n+1]\n    df_list = []\n    for user_id_, sim in zip(ser.index, ser.values):\n        df_list.append({\"user_id\": user_id_, \"cosine_similar\": sim})\n    return pd.DataFrame(df_list).sort_values(\"cosine_similar\", ascending=False)\n    \n    \ndef show_cloud(genre, anime):\n    fig, axes = plt.subplots(1, 2, figsize=(15, 5))\n    ax = axes.ravel()\n    genre_cloud = WordCloud().generate_from_frequencies(genre)\n    anime_cloud = WordCloud().generate_from_frequencies(anime)\n    ax[0].imshow(anime_cloud)\n    ax[0].axis(\"off\")\n    ax[0].set_title(\"recommend Anime\")\n    ax[1].imshow(genre_cloud)\n    ax[1].axis(\"off\")\n    ax[1].set_title(\"recommend Genres\")\n    fig.savefig(\"img.png\")\n\n\n'''\n\u985e\u4f3c\u30e6\u30fc\u30b6\u30fcn\u540d\u304b\u3089\u8a55\u4fa1\u5024\u304c\u826f\u304b\u3063\u305f\u30c8\u30c3\u30d7n\u4f4d\u306e\u5404\u30a2\u30cb\u30e1\u3092\u30ab\u30a6\u30f3\u30c8\u3057\u3066\u3001\n\u3042\u308b\u7279\u5b9a\u306e\u30e6\u30fc\u30b6\u30fc\u3078\u306e\u63a8\u85a6\u3059\u308b\u30a2\u30cb\u30e1\u540d\u3068\u30b8\u30e3\u30f3\u30eb\u3092\u8fd4\u3059\u95a2\u6570\n'''\n\ndef find_similar_user_for_anime(user_id: int, n=10):\n    # \u4f3c\u3066\u3044\u308b\u30e6\u30fc\u30b6\u30fcID\u3092\u53d6\u5f97\n    sim_user_id = find_similar_user(user_id, n)[\"user_id\"]\n    animeaname2count, genre2count = {}, {}\n    # \u4f3c\u3066\u3044\u308b\u30e6\u30fc\u30b6\u30fc\u3054\u3068\u306b\u30eb\u30fc\u30d7\u3059\u308b\n    for user_id in sim_user_id:\n        # \u5404\u30e6\u30fc\u30b6\u30fc\u306e\u8a55\u4fa1\u306e\u9ad8\u3044\u30a2\u30cb\u30e1ID\n        for _, anime_id in user_anime_piv.loc[user_id, :].sort_values(ascending=False).index[:n]:\n            # \u30a2\u30cb\u30e1\u540d\u306e\u30ab\u30a6\u30f3\u30c8\n            anime_name = anime[anime.anime_id == anime_id][\"name\"].values[0]\n            anime_name = anime_name.strip()\n            if anime_name not in animeaname2count:\n                animeaname2count[anime_name] = 1\n            else:\n                animeaname2count[anime_name] += 1\n            # \u30b8\u30e3\u30f3\u30eb\u306e\u30ab\u30a6\u30f3\u30c8\n            genre_list = anime[anime.anime_id == anime_id][\"genre\"].values[0]\n            for genre in genre_list.split(\",\"):\n                genre = genre.strip()\n                if genre not in genre2count:\n                    genre2count[genre] = 1 \n                else:\n                    genre2count[genre] += 1 \n    show_cloud(genre2count, animeaname2count)\n    \n    \n'''\n\u63a8\u85a6\u3055\u308c\u305f\u30a2\u30cb\u30e1\u3092\u8996\u8074\u3057\u305f\u969b\u306b\u8a55\u4fa1\u3055\u308c\u308b\u5024\u306e\u4e88\u6e2c\n(\u30e6\u30fc\u30b6\u30fc\u9593\u306e\u985e\u4f3c\u5ea6*\u30a2\u30cb\u30e1\u8a55\u4fa1\u5024) \/ (\u985e\u4f3c\u5ea6)\n\u3064\u307e\u308a\u3001\u30e6\u30fc\u30b6\u30fc\u9593\u306e\u985e\u4f3c\u5ea6\u304c\u9ad8\u3044\u307b\u3069\u3001\u8a55\u4fa1\u3055\u308c\u308b\u5024\u3082\u540c\u3058\u306b\u306a\u308b\u3068\u4e88\u60f3\u3055\u308c\u308b\u3002\n'''\n\ndef predict_recommend_rating(user_id, n=10):\n    # \u4e0a\u306e\u95a2\u6570\u5316r\u30e6\u30fc\u30b6\u30fc\u9593\u306e\u985e\u4f3c\u5ea6\u3092\u53d6\u5f97\n    sim_users = find_similar_user(user_id, n)\n    sim_user_id = sim_users[\"user_id\"]\n    cosine_sim = sim_users[\"cosine_similar\"]\n    df_list = []\n    # \u5404\u30e6\u30fc\u30b6\u30fc\u304c\u6700\u3082\u9ad8\u3044\u8a55\u4fa1\u306e\u30a2\u30cb\u30e1\u304b\u3089\u3001\u6307\u6a19\u306b\u3088\u308a\u8a55\u4fa1\u4e88\u6e2c\u3059\u308b\n    for user_id, cos in zip(sim_user_id, cosine_sim):\n        # \u985e\u4f3c\u5ea6\u30e6\u30fc\u30b6\u30fc\u306b\u3088\u308b\u304a\u3059\u3059\u3081\u30a2\u30cb\u30e1\u5024\n        anime_id = piv.loc[user_id, :].sort_values(ascending=False).index[0][1]\n        anime_rating = piv.loc[user_id, :].sort_values(ascending=False).values[0]\n        anime_name = anime[anime.anime_id == anime_id][\"name\"].values[0]\n        # \u8a08\u7b97\u3059\u308b\n        predict_rating = (cos*anime_rating)\/cos\n        df_list.append({\"anime_id\": anime_id, \"name\": anime_name, \"predict_rating\": predict_rating})\n        \n    return pd.DataFrame(df_list).sort_values(\"predict_rating\", ascending=False).drop_duplicates()[:n]\n","8d451739":"random_user_id = np.random.choice(user_anime_piv.index, 3)","0a9032d6":"find_similar_anime(\"Steins;Gate\")","185958b3":"find_similar_user(random_user_id[0])","ae7648b9":"find_similar_user(random_user_id[1])","94c7310e":"find_similar_user(random_user_id[2])","80a67a00":"find_similar_user_for_anime(random_user_id[0])","6f571668":"find_similar_user_for_anime(random_user_id[1])","7dfe039f":"find_similar_user_for_anime(random_user_id[2])","dd46877e":"predict_recommend_rating(random_user_id[0])","73a54583":"predict_recommend_rating(random_user_id[1])","469af1b1":"predict_recommend_rating(random_user_id[2])","84801907":"### Recommend Anime Genres\n---","0b416635":"### Anime \n---","2dd03dff":"### User\n---","d7fea67f":"# \u63a8\u8ad6\u95a2\u6570\u306e\u69cb\u7bc9\n1. \u985e\u4f3cUser\u306e\u62bd\u51fa\n2. \u985e\u4f3cAnime\u306e\u62bd\u51fa\n3. \u304a\u3059\u3059\u3081\u3059\u308bAnime\u306e\u62bd\u51fa\n4. \u304a\u3059\u3059\u3081\u3055\u308c\u305fAnime\u3092\u8996\u8074\u3057\u305f\u969b\u306e\u8a55\u4fa1","b16e5d62":"### Predicted Rating\n---","af47a4c4":"# \u96c6\u8a08\u306b\u5fc5\u8981\u306a\u30c6\u30fc\u30d6\u30eb\u306e\u7528\u610f\n","47d5f87a":"# \u63a8\u85a6\u3059\u308b\u30d8\u30eb\u30d1\u30fc\u95a2\u6570"}}