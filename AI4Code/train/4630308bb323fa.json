{"cell_type":{"760d8175":"code","435a8a9d":"code","b44a4d3e":"code","4a4de7ca":"code","3c5c853f":"code","f1153ed2":"code","d030e4ea":"code","6152a45e":"code","9740d824":"code","cd2bdbf6":"code","3c8f05e0":"code","11a79695":"code","e9da3cab":"code","53029a2c":"code","b8913963":"code","f4ff14c3":"code","098d1e09":"code","c7df2393":"code","ec89cedc":"code","4201bf0f":"code","ea1e84b8":"code","c2d8fcd4":"code","cbef555e":"code","d436c638":"code","68e6ab5b":"code","e657c71a":"markdown","8059704e":"markdown","281f3597":"markdown","06065e01":"markdown","f35f256e":"markdown","769accc0":"markdown","60602ad4":"markdown","171fa87f":"markdown","f6523d12":"markdown","f69249d7":"markdown"},"source":{"760d8175":"import tensorflow as tf\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import BatchNormalization,Dropout,Dense,Flatten,Conv1D\nfrom tensorflow.keras.optimizers import Adam","435a8a9d":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline","b44a4d3e":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler","4a4de7ca":"df = pd.read_csv('..\/input\/creditcardfraud\/creditcard.csv')","3c5c853f":"df.head()","f1153ed2":"df.shape","d030e4ea":"df.info()","6152a45e":"df.Class.unique()","9740d824":"df.Class.value_counts()","cd2bdbf6":"nf = df[df.Class==0]\nf = df[df.Class==1]","3c8f05e0":"nf = nf.sample(738)","11a79695":"data = f.append(nf,ignore_index=True)","e9da3cab":"data.shape","53029a2c":"X = data.drop(['Class'],axis=1)\ny=data['Class']","b8913963":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,stratify=y)","f4ff14c3":"X_train.shape,X_test.shape","098d1e09":"scaler=StandardScaler()\nX_train=scaler.fit_transform(X_train)\nX_test=scaler.transform(X_test)","c7df2393":"y_train=y_train.to_numpy()\ny_test=y_test.to_numpy()","ec89cedc":"X_train=X_train.reshape(X_train.shape[0],X_train.shape[1],1)\nX_test=X_test.reshape(X_test.shape[0],X_test.shape[1],1)","4201bf0f":"model=Sequential()\nmodel.add(Conv1D(32,2,activation='relu',input_shape=X_train[0].shape))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv1D(64,2,activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.5))\n\nmodel.add(Flatten())\nmodel.add(Dense(64,activation='relu'))\nmodel.add(Dropout(0.5))\n\nmodel.add(Dense(1,activation='sigmoid'))","ea1e84b8":"model.summary()","c2d8fcd4":"model.compile(optimizer=Adam(learning_rate=0.0001),loss='binary_crossentropy',metrics=['accuracy'])","cbef555e":"history = model.fit(X_train,y_train,epochs=20,validation_data=(X_test,y_test))","d436c638":"def plotLearningCurve(history,epochs):\n  epochRange = range(1,epochs+1)\n  plt.plot(epochRange,history.history['accuracy'])\n  plt.plot(epochRange,history.history['val_accuracy'])\n  plt.title('Model Accuracy')\n  plt.xlabel('Epoch')\n  plt.ylabel('Accuracy')\n  plt.legend(['Train','Validation'],loc='upper left')\n  plt.show()\n\n  plt.plot(epochRange,history.history['loss'])\n  plt.plot(epochRange,history.history['val_loss'])\n  plt.title('Model Loss')\n  plt.xlabel('Epoch')\n  plt.ylabel('Loss')\n  plt.legend(['Train','Validation'],loc='upper left')\n  plt.show()","68e6ab5b":"plotLearningCurve(history,20)","e657c71a":"# CNN model","8059704e":"# Train-Test Split","281f3597":"# Importing Neccessary Libraries","06065e01":"# Reshaping the input to 3D.","f35f256e":"# Compiling and Fiting","769accc0":"# Uneven class distribution","60602ad4":"# Creating new dataframe","171fa87f":"# Extracting random entries of class-0\n# Total entries are 1.5* NO. of class-1 entries","f6523d12":"# Gathering the data and assessing the data","f69249d7":"# Applying StandardScaler to obtain all the features in similar range"}}