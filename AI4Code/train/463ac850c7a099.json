{"cell_type":{"6cab95ee":"code","8a6a3f63":"code","15c918ad":"code","b0d3459a":"code","d59d75b5":"code","021455b1":"code","d114ab0c":"code","3c39ca40":"code","3205fab3":"code","569d15cb":"code","5489f947":"code","54f59792":"code","f39d65b1":"code","606dbb4f":"code","8c614889":"code","20abbe8c":"code","80728fb5":"code","ff89ce87":"code","cdb1a93c":"code","fdcbd914":"code","c216b379":"code","6f31785c":"code","d33a1785":"code","f4e027ed":"code","5dba63a3":"code","19ed9d1e":"code","104e66d9":"code","23284633":"code","221d7cb5":"markdown","3f1b8602":"markdown","fe295228":"markdown"},"source":{"6cab95ee":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8a6a3f63":"## IMPORTING DATA \ncalories = pd.read_csv('..\/input\/calories-burned-predicition\/calories.csv')\nexercise = pd.read_csv('..\/input\/calories-burned-predicition\/exercise.csv')","15c918ad":"#LETS VISUALIZE THE DATA CONTENTS\ncalories.head()","b0d3459a":"exercise.head()","d59d75b5":"#Merging dataset..\ndf = pd.merge(exercise, calories, on = 'User_ID')\nprint(\"Data Merged\")","021455b1":"df.head()","d114ab0c":"import seaborn as sns\nimport matplotlib.pyplot as plt\n","3c39ca40":"import pandas_profiling as pp\npp.ProfileReport(df)\n## Great tool for rapid visualzation","3205fab3":"fig = plt.figure(figsize=(20, 15))\nsns.lmplot('Duration','Calories',data = df)\nprint(\"Correlation: \",df['Duration'].corr(df['Calories']))\nplt.show()","569d15cb":"sns.lmplot('Height','Weight',data = df)\nprint(\"Correlation: \",df['Height'].corr(df['Weight']))\nplt.show()\n","5489f947":"print(df['Gender'].value_counts())\nsns.countplot(df['Gender'])","54f59792":"sns.lmplot('Body_Temp','Calories',data = df)\nprint(\"Correlation: \",df['Body_Temp'].corr(df['Calories']))\nplt.show()\n","f39d65b1":"sns.pairplot(df)","606dbb4f":"sns.distplot((df['Calories']))","8c614889":"sns.distplot(df['Age'])","20abbe8c":"#Data wrangling","80728fb5":"df.isnull().sum()","ff89ce87":"#ADDING BMI Column\ndf['BMI'] = (df['Weight']*10000)\/(df['Height']**2)\ndf.head()","cdb1a93c":"df['Gender'] = df['Gender'].replace({'male':0,'female':1})\ndf.info()","fdcbd914":"#Deploying it to ML \nX  = df.drop(['User_ID','Calories'],1)\ny = df['Calories']","c216b379":"#we normalize the data to bring all the variables to the same range.\nfrom sklearn.preprocessing import MinMaxScaler\nmm = MinMaxScaler()\ncol = ['Age','Height','Weight','Duration','Heart_Rate','Body_Temp','BMI']\nfor i in col:\n    X[[i]] = mm.fit_transform(X[[i]])","6f31785c":"y = mm.fit_transform(y.values.reshape(-1,1))","d33a1785":"X.head()","f4e027ed":"y","5dba63a3":"from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\nln = LinearRegression()\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)\n","19ed9d1e":"ln.fit(X_train,y_train)\ntrain_preds = ln.predict(X_train)\nprint(mean_absolute_error(y_train,train_preds))","104e66d9":"test_preds = ln.predict(X_test)\nprint(mean_absolute_error(y_test,test_preds))","23284633":"print(ln.score(X_train,y_train))\nprint(ln.score(X_test,y_test))","221d7cb5":"Lets find the relation between each columns.","3f1b8602":"**OUR LINEAR REGRESSION MODEL WORKS FINE WITH NO OVERFITTING AT ALL.**","fe295228":"It contains the USER_ID and burned calories of each individual."}}