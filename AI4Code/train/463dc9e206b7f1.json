{"cell_type":{"db29c0c5":"code","fc30528b":"code","970bedc6":"code","f6532599":"code","f3458685":"code","9fd6ea68":"code","5335d8b1":"code","5de15f8a":"code","7e4945ba":"code","3a8b4018":"code","a34fd768":"code","dd9750d2":"code","bf4c230e":"code","6e2e895a":"code","f13847d4":"code","f29f1c25":"code","26c5c2bc":"code","48efdfe4":"code","95f001c4":"code","35c8de21":"code","c2734d64":"code","74dd0e45":"code","e6a23971":"code","86e1893e":"code","a93f13c5":"code","abd2feaf":"code","a62f7216":"code","66d67d12":"code","ef053268":"code","8d8cfccd":"code","f73b00dd":"code","39c9c924":"code","102117b2":"code","91cb874a":"code","81864b8a":"markdown","8d9b1706":"markdown","f4228400":"markdown","eecbbbb1":"markdown","1407ae91":"markdown","e76d7ace":"markdown","8e8fbb70":"markdown","0cdcb799":"markdown","1a5b8903":"markdown"},"source":{"db29c0c5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import accuracy_score,confusion_matrix,classification_report\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom xgboost import XGBClassifier\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fc30528b":"df = pd.read_csv('\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv')","970bedc6":"df.head()","f6532599":"df.info()","f3458685":"plt.figure(figsize=(12,8))\nsns.scatterplot(x='BMI',y='Glucose',data=df,palette='pastel')","9fd6ea68":"plt.figure(figsize=(12,8))\nsns.scatterplot(x='BMI',y='Age',data=df,palette='pastel')","5335d8b1":"plt.figure(figsize=(12,8))\nsns.scatterplot(x='BMI',y='Glucose',data=df,palette='pastel')","5de15f8a":"plt.figure(figsize=(12,8))\nsns.scatterplot(x='Insulin',y='Glucose',data=df,palette='pastel')","7e4945ba":"plt.figure(figsize=(12,8))\nsns.scatterplot(x='BloodPressure',y='Glucose',data=df,palette='pastel')","3a8b4018":"from scipy.stats import norm\nplt.figure(figsize=(12,7))\nsns.distplot(df['Glucose'],kde=True,fit=norm)","a34fd768":"plt.figure(figsize=(12,7))\nsns.distplot(df['BloodPressure'],kde=True,fit=norm)","dd9750d2":"plt.figure(figsize=(12,7))\nsns.distplot(df['Insulin'],kde=True,fit=norm)","bf4c230e":"plt.figure(figsize=(12,7))\nsns.distplot(df['Age'],kde=True,fit=norm)","6e2e895a":"plt.figure(figsize=(12,7))\nsns.distplot(df['BMI'],kde=True,fit=norm)","f13847d4":"plt.figure(figsize=(12,7))\nsns.distplot(df['DiabetesPedigreeFunction'],kde=True,fit=norm)","f29f1c25":"plt.figure(figsize=(12,7))\nsns.distplot(df['SkinThickness'],kde=True,fit=norm)","26c5c2bc":"df['Outcome'].value_counts()","48efdfe4":"plt.figure(figsize=(10,6))\nlabels=[0,1]\nsns.barplot(x=labels,y=df['Outcome'].value_counts(),palette='pastel')","95f001c4":"corr = df.corr()\nplt.figure(figsize=(12,6))\nsns.heatmap(corr,vmax=.3,annot=True,square=True)","35c8de21":"sns.pairplot(data=df,hue='Outcome',diag_kind='kde')\nplt.show()","c2734d64":"y_train = df['Outcome'].values","74dd0e45":"df = df.drop(columns=['Outcome'],axis=True)","e6a23971":"X_train,X_Test,y_train,y_test = train_test_split(df,y_train,test_size=0.2)","86e1893e":"log  = LogisticRegression(random_state=42,max_iter=150,verbose=1)\nres = log.fit(X_train,y_train)","a93f13c5":"res_p=log.predict(X_Test)","abd2feaf":"\ncm = confusion_matrix(y_test,res_p)\nprint(cm)\nprint(accuracy_score(y_test,res_p))\nprint(classification_report(y_test,res_p))","a62f7216":"svc = SVC(kernel='linear',random_state=42)\nfitt = svc.fit(X_train,y_train)\n","66d67d12":"res_s=svc.predict(X_Test)","ef053268":"cm = confusion_matrix(y_test,res_s)\nprint(cm)\nprint(accuracy_score(y_test,res_s))\nprint(classification_report(y_test,res_s))","8d8cfccd":"rf = RandomForestClassifier(max_depth=3,random_state=42,verbose=1)\n\nres = rf.fit(X_train,y_train)","f73b00dd":"res_f = rf.predict(X_Test)","39c9c924":"cm = confusion_matrix(y_test,res_f)\nprint(cm)\nprint(accuracy_score(y_test,res_f))\nprint(classification_report(y_test,res_f))","102117b2":"\nxg = XGBClassifier()\np =xg.fit(X_train,y_train)\n","91cb874a":"res_x = xg.predict(X_Test)\ncm = confusion_matrix(y_test,res_x)\nprint(cm)\nprint(accuracy_score(y_test,res_x))\nprint(classification_report(y_test,res_x))\n","81864b8a":"Data Preparation","8d9b1706":"Logistic Regression","f4228400":"# EDA","eecbbbb1":"Random Forest","1407ae91":"Splitting Data","e76d7ace":"# Fitting Models","8e8fbb70":"XGB Classifier","0cdcb799":"**Loading Data**","1a5b8903":"Support Vector Machines"}}