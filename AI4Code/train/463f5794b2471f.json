{"cell_type":{"9bdab5cc":"code","9e2230ea":"code","6bad37fb":"code","2b9f3792":"code","6ede0540":"code","65d3fd4e":"code","8ff6a5c3":"code","2217b11f":"code","9dacbe8a":"code","eff221e6":"code","a8ea8ed8":"code","04b8e986":"code","13da3d8e":"code","abe082ea":"code","280ea73c":"code","bec6080a":"code","08d993a4":"code","ef82628e":"code","5849f407":"code","a75545aa":"code","7b1b2e61":"code","28856db1":"code","8e1f72a9":"code","2840030c":"code","21758dd4":"code","321eb1fc":"code","a5e42692":"code","cbb694b1":"code","fb917513":"code","79f1be90":"code","86b6290e":"markdown","c78d14c1":"markdown"},"source":{"9bdab5cc":"# install slim version (default)\n!pip install pycaret","9e2230ea":"import pandas as pd\ndata=pd.read_csv('..\/input\/heart-disease-prediction\/heart_v2.csv')\ndata.head()","6bad37fb":"data.nunique()","2b9f3792":"data.skew()","6ede0540":"data.info()","65d3fd4e":"# initialize setup\nfrom pycaret.classification import *\ns = setup(data, target = 'heart disease',\n         normalize = True,\n          remove_multicollinearity = True,\n          combine_rare_levels = True,\n          ignore_low_variance = True,\n          fix_imbalance = True,\n          transformation = True\n         )","8ff6a5c3":"# check all the available models\nmodels()","2217b11f":"# train Xgboost Classifier\nxgboost = create_model('xgboost')","9dacbe8a":"print(xgboost)","eff221e6":"# train multiple models\nmultiple_models = [create_model(i) for i in ['dt', 'lr', 'xgboost']]","a8ea8ed8":"# check multiple_models\ntype(multiple_models), len(multiple_models)","04b8e986":"print(multiple_models)","13da3d8e":"# compare all models\nbest_model = compare_models()","abe082ea":"# check the best model\nprint(best_model)","280ea73c":"# predict on hold-out\npred_holdout = predict_model(best_model)","bec6080a":"# create copy of data drop target column\ndata2 = data.copy()\ndata2.drop('heart disease', axis=1, inplace=True)","08d993a4":"# generate predictions\npredictions = predict_model(best_model, data = data2)","ef82628e":"# install gplearn\n!pip install gplearn","5849f407":"# import untrained estimator\nfrom gplearn.genetic import SymbolicClassifier\nsc = SymbolicClassifier()","a75545aa":"# train using create_model\nsc_trained = create_model(sc)","7b1b2e61":"print(sc_trained)","28856db1":"# check hold-out score\npred_holdout_sc = predict_model(sc_trained)","8e1f72a9":"# install ngboost\n!pip install ngboost","2840030c":"# import untrained estimator\nfrom ngboost import NGBClassifier\nng = NGBClassifier()","21758dd4":"# train using create_model\nng_trained = create_model(ng)","321eb1fc":"print(ng_trained)","a5e42692":"# create custom estimator\nimport numpy as np\nfrom sklearn.base import BaseEstimator, ClassifierMixin\nfrom sklearn.utils.validation import check_X_y, check_array, check_is_fitted\nfrom sklearn.utils.multiclass import unique_labels\nfrom sklearn.metrics import euclidean_distances\nclass MyOwnModel(BaseEstimator, ClassifierMixin):\n\n    def __init__(self, demo_param='demo'):\n        self.demo_param = demo_param\n\n    def fit(self, X, y):\n\n        # Check that X and y have correct shape\n        X, y = check_X_y(X, y)\n        # Store the classes seen during fit\n        self.classes_ = unique_labels(y)\n\n        self.X_ = X\n        self.y_ = y\n        # Return the classifier\n        return self\n\n    def predict(self, X):\n\n        # Check is fit had been called\n        check_is_fitted(self)\n\n        # Input validation\n        X = check_array(X)\n\n        closest = np.argmin(euclidean_distances(X, self.X_), axis=1)\n        return self.y_[closest]","cbb694b1":"# import MyOwnModel class\nmom = MyOwnModel()","fb917513":"# train using create_model\nmom_trained = create_model(mom)","79f1be90":"# generate predictions on data\npredictions = predict_model(mom_trained, data=data)\npredictions","86b6290e":"# Available Models","c78d14c1":"# Model Training & Selection"}}