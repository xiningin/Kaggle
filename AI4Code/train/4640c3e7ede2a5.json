{"cell_type":{"7bbcb790":"code","970e329e":"code","d6f2f69b":"code","0180c6de":"code","db5eb701":"code","97365b79":"code","8af0387c":"code","b887e924":"code","41fd2a3a":"code","3f8bbc8f":"code","726bf806":"code","2122d1d9":"code","d0a52d5f":"code","62e2035e":"code","478f1509":"code","6f7583bf":"code","627c5c4b":"code","6eb9322c":"code","1edadbf7":"code","250c6109":"code","3f08634e":"code","dc9421ef":"code","6950fcbf":"code","5d692bdb":"code","c85c6ec8":"markdown","353806f4":"markdown","567eda92":"markdown","331ed96b":"markdown","1baa382b":"markdown","90eaf94c":"markdown"},"source":{"7bbcb790":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","970e329e":"#integer array\nnp.array([1,3,5,7,9])","d6f2f69b":"#all number return to float\nnp.array([1.1,3,5.1,7,9])","0180c6de":"#converting all values to the same type\nnp.array([1,3,5,7,9], dtype = 'float32')","db5eb701":"#nested lists result in multidimensional arrays\nnp.array([range(i,i+3) for i in [1,3,5]])\n","97365b79":"#Create a length-5 integer array filled with zeros\nnp.zeros(5, dtype = int)","8af0387c":"# Create a 4x6 floating-point array filled with 1s\nnp.ones((4,6), dtype=int)","b887e924":"# Create a 3x4 array filled with 3.14\nnp.full((3,4), 3.14)","41fd2a3a":"# Create an array filled with a linear sequence\n# Starting at 0, ending at 20, stepping by 2\n# (this is similar to the built-in range() function)\nnp.arange(0,20,2)","3f8bbc8f":"# Create an array of five values evenly spaced between 0 and 1\nnp.linspace(0,1,5)","726bf806":"# Create a 3x3 array of uniformly distributed\n# random values between 0 and 1\nnp.random.random((3,3))","2122d1d9":"# Create a 3x3 array of normally distributed random values\n# with mean 0 and standard deviation 1\nnp.random.normal(0,1,(3,3))","d0a52d5f":"# Create a 3x3 array of random integers in the interval [0, 10)\nnp.random.randint(0,10,(3,3))","62e2035e":"# Create a 3x3 identity matrix\nnp.eye(3)","478f1509":"# Create an uninitialized array of three integers\n# The values will be whatever happens to already exist at that\n# memory location\nnp.empty(3)","6f7583bf":"import numpy as np\nnp.random.seed(0) #seed for reproducibility\n\nx1 = np.random.randint(10, size=6) #one-dimensional array\nx2 = np.random.randint(10, size=(3,4)) #two-dimensional array\nx3 = np.random.randint(10, size=(3,4,6)) #three-dimensional array\n\nprint(x1)\nprint(\"-----\")\nprint(x2)\nprint(\"-----\")\nprint(x3)","627c5c4b":"#ndim: the number of dimensions\n#shape: the size of each dimension\n#size: the total size of the array\n#dtype: data type\n\nprint(\"x3 ndim: \", x3.ndim)\nprint(\"x3 shape: \", x3.shape)\nprint(\"x3 size: \", x3.size)\nprint(\"x3 dtype: \", x3.dtype)","6eb9322c":"x2","1edadbf7":"# two rows, three columns\nx2[:2,:3]","250c6109":"# all rows, every other column\nx2[:3,::2]","3f08634e":"x2[::-1,::-1]","dc9421ef":"grid = np.arange(1,10).reshape(3,3)\nprint(grid)","6950fcbf":"x = np.array([1,2,3])\n\n#row vector via reshape\nx.reshape((1,3))\n\n#row vector via newaxis\nx[np.newaxis, :]\n\n#column vector via reshape\nx.reshape((3,1))","5d692bdb":"#page:66","c85c6ec8":"Multidimensional subarrays","353806f4":"### Creating Arrays from Scratch","567eda92":"### Reshaping of Arrays","331ed96b":"### Numpy Array Attributes","1baa382b":"- List can have every type of data.\n- Array can have just same data.","90eaf94c":"# **NUMPY**"}}