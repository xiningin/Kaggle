{"cell_type":{"7bca6e19":"code","55bd555b":"code","cc223239":"code","3369d3d3":"code","e1c8db86":"code","769c9f05":"code","7b379dcb":"code","ab777bd4":"code","8e1a57ae":"code","dcd64e39":"code","bb87813f":"code","0b60f901":"code","634412a8":"code","13e6ddc6":"code","46d73a0a":"code","b7479744":"code","9c4d480d":"code","4d4a9cd3":"code","2800a434":"code","405808ad":"code","7949c756":"code","61b6656c":"code","a1ca6d4e":"code","0189cff5":"code","df71222b":"code","79fcd0c6":"code","86ce0945":"code","96ca0d34":"code","b705ac87":"code","c3735447":"code","a77316fd":"code","41bb4ce9":"code","8bbd7d0d":"code","6b3f9970":"code","f2a2085a":"code","5f42f5ad":"code","a2d0b646":"code","7bd335ec":"code","00987039":"code","734f1cf3":"code","74284841":"code","e064fc70":"code","5d003896":"markdown","e0989973":"markdown","02179abb":"markdown","a5da1dda":"markdown","3d8b2a57":"markdown","9bf1e3da":"markdown","9a317c43":"markdown","07e8c668":"markdown","96c8f17a":"markdown","a51ec850":"markdown","c3e00ea9":"markdown","ce6b3783":"markdown"},"source":{"7bca6e19":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","55bd555b":"import warnings\nwarnings.filterwarnings('always')\nwarnings.filterwarnings('ignore')\n\n# data visualisation and manipulation\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\nimport seaborn as sns\n \n#configure\n# sets matplotlib to inline and displays graphs below the corressponding cell.\n%matplotlib inline  \nstyle.use('fivethirtyeight')\nsns.set(style='whitegrid',color_codes=True)\n\n#model selection\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import accuracy_score,precision_score,recall_score,confusion_matrix,roc_curve,roc_auc_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.preprocessing import LabelEncoder\n#preprocess.\nfrom keras.preprocessing.image import ImageDataGenerator\n\n#dl libraraies\nfrom keras import backend as K\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.optimizers import Adam,SGD,Adagrad,Adadelta,RMSprop\nfrom keras.utils import to_categorical\nfrom keras.callbacks import ReduceLROnPlateau\n\n# specifically for cnn\nfrom keras.layers import Dropout, Flatten,Activation\nfrom keras.layers import Conv2D, MaxPooling2D, BatchNormalization\n \nimport tensorflow as tf\nimport random as rn\n\n# specifically for manipulating zipped images and getting numpy arrays of pixel values of images.\nimport cv2                  \nimport numpy as np  \nfrom tqdm import tqdm\nimport os                   \nfrom random import shuffle  \nfrom zipfile import ZipFile\nfrom PIL import Image\n\n#TL pecific modules\nfrom keras.applications.vgg16 import VGG16\nfrom keras.applications.vgg19 import VGG19","cc223239":"import os\nos.listdir('\/kaggle\/input\/flowers-recognition\/flowers')","3369d3d3":"os.listdir('..\/input\/flowers-recognition\/flowers\/flowers')","e1c8db86":"daisy_dir='..\/input\/flowers-recognition\/flowers\/flowers\/daisy'\ndandelion_dir='..\/input\/flowers-recognition\/flowers\/flowers\/dandelion'\nsunflower_dir='..\/input\/flowers-recognition\/flowers\/flowers\/sunflower'\ntulip_dir='..\/input\/flowers-recognition\/flowers\/flowers\/tulip'\nrose_dir='..\/input\/flowers-recognition\/flowers\/flowers\/rose'","769c9f05":"x = []\ny = []\nimg_size=(224,224)\ndef make_whole_dataset(directory,flower):\n    try:\n        for img in os.listdir(directory):\n            path = os.path.join(directory,img)\n            img_array = cv2.imread(path,cv2.IMREAD_COLOR)\n            img_array = cv2.resize(img_array,img_size)\n            x.append(np.array(img_array))\n            y.append(str(flower))\n    except:\n        None\n\n    print(\"flower {} has been added to Dataset Successfully\".format(flower))","7b379dcb":"make_whole_dataset(daisy_dir,\"Daisy\")\nmake_whole_dataset(rose_dir,\"Rose\")\nmake_whole_dataset(dandelion_dir,\"Dandelion\")\nmake_whole_dataset(sunflower_dir,\"Sunflower\")\nmake_whole_dataset(tulip_dir,\"Tulip\")","ab777bd4":"import random\nplt.style.use('ggplot')\nfig=plt.figure(figsize=(12,10))\nfig.set_size_inches(10,10)\nfor i in range(6):\n    plt.subplot(3,3,i+1)\n    sample = random.randint(0,len(y))\n    plt.imshow(x[sample])\n    plt.xlabel(\"Flower: {}\".format(y[sample]))\nplt.tight_layout()\n","8e1a57ae":"#ONe hot encoding\nle=LabelEncoder()\ny=le.fit_transform(y)\ny=to_categorical(y,5)","dcd64e39":"x=np.array(x)\nx=x\/255.0\ntrain_x,test_x,train_y,test_y=train_test_split(x,y,test_size=0.2,random_state=42)","bb87813f":"vgg=VGG16(input_shape=[224,224,3],weights='imagenet',include_top=False)","0b60f901":"vgg.summary()","634412a8":"for layers in vgg.layers[:16]:\n    layers.trainable=False","13e6ddc6":"from tensorflow.keras.layers import Input, Lambda, Dense, Flatten\nx = Flatten()(vgg.output)","46d73a0a":"from tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import Dense\nprediction = Dense(5, activation='softmax')(x)\n# create a model object\nmodel = Model(inputs=vgg.input, outputs=prediction)","b7479744":"model.summary()","9c4d480d":"model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])","4d4a9cd3":"train_datagen = ImageDataGenerator(rescale = 1.\/255,\n                                   shear_range = 0.2,\n                                   zoom_range = 0.2,\n                                   horizontal_flip = True)\n\ntest_datagen = ImageDataGenerator(rescale = 1.\/255)","2800a434":"# Make sure you provide the same target size as initialied for the image size\ntraining_set = train_datagen.flow_from_directory(,\n                                                 target_size = (224, 224),\n                                                 batch_size = 32,\n                                                 class_mode = 'categorical')","405808ad":"history=model.fit(train_x,train_y,epochs=25,validation_data=(test_x,test_y),batch_size=32)","7949c756":"score = model.evaluate(test_x,test_y)\n","61b6656c":"accuracy=history.history['accuracy']\nloss=history.history['loss']\nval_accuracy=history.history['val_accuracy']\nval_loss=history.history['val_loss']","a1ca6d4e":"epochs = range(len(accuracy))\nepochs","0189cff5":"plt.plot(epochs,accuracy,'r',label='training_accuracy')\nplt.plot(epochs,val_accuracy,'g',label='val_accuracy')\nplt.legend()\nplt.show()","df71222b":"pred=model.predict(test_x)","79fcd0c6":"pred[:10]","86ce0945":"pred=np.argmax(pred,axis=1)","96ca0d34":"pred[:10]","b705ac87":"base_model = VGG19(weights='imagenet',include_top=False, input_shape=(224,224,3))","c3735447":"base_model.summary()","a77316fd":"p=base_model.output\np=Flatten()(p)\np=Dense(500, activation='relu')(p)\np=Dropout(0.2)(p)\npredictions = Dense(5, activation='softmax')(p)\nmodel = Model(inputs=base_model.input, outputs=predictions)\n\n","41bb4ce9":"for layer in base_model.layers:\n    layer.trainable = False","8bbd7d0d":"model.summary()","6b3f9970":"model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","f2a2085a":"history=model.fit(train_x,train_y,epochs=25,validation_data=(test_x,test_y),batch_size=32)","5f42f5ad":"score = model.evaluate(test_x,test_y)","a2d0b646":"accuracy=history.history['accuracy']\nloss=history.history['loss']\nval_accuracy=history.history['val_accuracy']\nval_loss=history.history['val_loss']","7bd335ec":"plt.plot(epochs,accuracy,'r',label='training_accuracy')\nplt.plot(epochs,val_accuracy,'g',label='val_accuracy')\nplt.legend()\nplt.show()","00987039":"pred=model.predict(test_x)","734f1cf3":"pred[:10]","74284841":"predict=np.argmax(pred,axis=1)","e064fc70":"predict[:10]","5d003896":"fit the model without using data augmentation","e0989973":"Importing Vgg16 model","02179abb":"create a function to append all the images and their labels in 'x' and 'y'","a5da1dda":"Some of the flowers are:","3d8b2a57":"> Add the flatten layer ","9bf1e3da":"Import all the libraries","9a317c43":"Url for all rhe directory","07e8c668":"Data augmentation","96c8f17a":"**VGG19**","a51ec850":"Compile the model","c3e00ea9":"Add the dense layer","ce6b3783":"85% of accuracy using vgg16"}}