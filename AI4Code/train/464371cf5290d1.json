{"cell_type":{"8c6c1865":"code","4649b6ce":"code","18c0a978":"code","05e211fc":"code","f176c82d":"code","e59e0828":"code","171be14f":"code","f6409fc3":"code","aeda8792":"code","e03f8bf6":"code","a408d944":"code","ecb6e353":"markdown","722f9e58":"markdown","2ee07dfe":"markdown","9eb83a25":"markdown","db0bef68":"markdown"},"source":{"8c6c1865":"import os\nimport pandas as pd\nimport numpy as np\nimport math\nfrom PIL import Image\nimport matplotlib.pyplot as plt\n\nimport torch\nfrom torch.utils.data import Dataset\nfrom torchvision import transforms\n\nfrom torch.nn import Module\nfrom torch.optim import RMSprop\nfrom torch import nn","4649b6ce":"class MRIDataset(Dataset):\n    '''\n        Brain Tumor MRI Dataset\n    '''\n    def __init__(self, path, sub_path, batch_size=4, resolution=64, transform=None):\n        self.path = path\n        self.sub_path = sub_path\n        self.transform = transform\n        self.reso = resolution\n        self.batch_size = batch_size\n        self.categories = ['no_tumor', 'meningioma_tumor']\n        \n        if(sub_path == 'Training'):\n            self.df = self.get_dataset(path, 'Training', self.categories)\n            \n        if(sub_path == 'Testing'):\n            self.df = self.get_dataset(path, 'Testing', self.categories)\n            \n        idxes = [a for a in range(len(self.df))]\n        self.idx_batches = [idxes[i:i + batch_size] for i in range(0, len(idxes), batch_size)]\n        \n    def get_dataset(self, path, sub_path, categories):\n        no_tumor_path = path + sub_path + \"\/\" + categories[0] + \"\/\"\n        meningioma_path = path + sub_path + \"\/\" + categories[1] + \"\/\"\n\n        no_tumor_list = [os.path.abspath(os.path.join(no_tumor_path, p)) for p in os.listdir(no_tumor_path)]\n        no_tumor_labels = [0 for a in range(len(no_tumor_list))]\n\n        meningioma_list = [os.path.abspath(os.path.join(meningioma_path, p)) for p in os.listdir(meningioma_path)]\n        meningioma_labels = [1 for a in range(len(meningioma_list))]\n\n        paths = no_tumor_list + meningioma_list\n        labels = no_tumor_labels + meningioma_labels\n\n        df = pd.DataFrame.from_dict({'path':paths, 'label':labels})\n        df = df.sample(frac=1)\n\n        return df\n    \n    def normalize(self, x):\n        return x \/ 255.\n    \n    def __len__(self):\n        return len(self.idx_batches)\n    \n    def __getitem__(self, idx):\n        batch = self.idx_batches[idx]\n        size = (self.reso, self.reso)\n        \n        imgs = []\n        lbls = []\n        for i in batch:\n            img = Image.open(self.df.iloc[i].path).convert('LA').resize(size)\n            img = np.array(img)\n            \n            lbl = [self.df.iloc[i].label]\n            \n            imgs.append(img)\n            lbls.append(np.array(lbl))\n        \n        imgs = torch.tensor(imgs).type(torch.float32)\n        imgs = imgs.permute(0, 3, 1, 2)\n        \n        lbls = torch.tensor(lbls).type(torch.float32)\n        \n        # normalize images\n        imgs = self.normalize(imgs)\n            \n        return imgs, lbls","18c0a978":"path = '..\/input\/brain-tumor-classification-mri\/'\nsub_path = ['Testing', 'Training']","05e211fc":"ds_train = MRIDataset(path, sub_path[1], batch_size=8)\nds_test = MRIDataset(path, sub_path[0], batch_size=1)","f176c82d":"class BrainTumorModel(Module):\n    def __init__(self):\n        super(BrainTumorModel, self).__init__()\n        self.c0 = nn.Conv2d(2, 32, kernel_size=(3, 3))\n        self.r = nn.ReLU()\n        self.t = nn.Tanh()\n        self.m0 = nn.MaxPool2d(2, 2)\n        self.c1 = nn.Conv2d(32, 64, kernel_size=(3, 3))\n        self.m1 = nn.MaxPool2d(2, 2)\n        self.c2 = nn.Conv2d(64, 128, kernel_size=(3, 3))\n        self.m2 = nn.MaxPool2d(2, 2)\n        self.c3 = nn.Conv2d(128, 32, kernel_size=(3, 3))\n        self.m3 = nn.MaxPool2d(2, 2)\n        self.f = nn.Flatten()\n        self.dr = nn.Dropout(0.3)\n        self.l0 = nn.Linear(128, 64)\n        self.l1 = nn.Linear(64, 32)\n        self.l2 = nn.Linear(32, 16)\n        self.l3 = nn.Linear(16, 8)\n        self.l4 = nn.Linear(8, 1)\n        self.s = nn.Sigmoid()\n\n    \n    def forward(self, X):\n        X = self.c0(X)\n        X = self.r(X)\n        X = self.m0(X)\n        X = self.c1(X)\n        X = self.r(X)\n        X = self.m1(X)\n        X = self.c2(X)\n        X = self.r(X)\n        X = self.m2(X)\n        X = self.c3(X)\n        X = self.r(X)\n        X = self.m3(X)\n        X = self.f(X)\n        X = self.dr(X)\n        X = self.l0(X)\n        X = self.t(X)\n        X = self.l1(X)\n        X = self.t(X)\n        X = self.l2(X)\n        X = self.t(X)\n        X = self.l3(X)\n        X = self.t(X)\n        X = self.l4(X)\n        X = self.s(X)\n        \n        return X","e59e0828":"model = BrainTumorModel()\n\ncriterion = nn.BCELoss()\noptimizer = RMSprop(model.parameters(), lr=0.01, weight_decay=0.01, momentum=0.9)","171be14f":"imgs, lbls = ds_train[0]\nout = model(imgs)","f6409fc3":"mean_loss = []\n\nfor e in range(5):\n    \n    epoch_loss = []\n    \n    for idx in range(len(ds_train)):\n        optimizer.zero_grad()\n\n        imgs, lbls = ds_train[idx]\n        out = model(imgs)\n\n        loss = criterion(out, lbls)\n        epoch_loss.append(np.array(loss.item()))\n        \n        loss.backward()\n        optimizer.step()\n        \n    epoch_loss = np.array(epoch_loss)\n    mean_loss.append(np.mean(epoch_loss) \/ 100)\n    print('Epoch:{0:3d}, Mean_Loss:{1:1.3f}'.format(e+1, mean_loss[-1]))","aeda8792":"plt.plot(mean_loss)","e03f8bf6":"def accuracy(df):\n    wrong = 0\n    for idx in range(len(df)):\n        img, lbl = df[idx]\n        if(model(img).item() != lbl.item()):\n            wrong += 1\n\n    return round(wrong \/ len(df), 3)","a408d944":"print('-- Accuracy of the data test --')\nprint('-- Accuracy:{0:1.2f}'.format(accuracy(ds_test)))","ecb6e353":"# Dataset","722f9e58":"# Training","2ee07dfe":"# Model","9eb83a25":"# Analyze","db0bef68":"<h1 align='center' style='color:blue;border:1px dotted blue;'>Brain Tumor MRI Diagnosis using Pytorch<\/h1>"}}