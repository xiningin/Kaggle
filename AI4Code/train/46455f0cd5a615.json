{"cell_type":{"9692b976":"code","6327f9a0":"code","e9bf19e9":"code","24711ecf":"code","b58953e4":"code","3552b0dc":"code","d8742c69":"code","6ee3e862":"code","e3ad2310":"code","736b54c6":"code","58851189":"code","c052d054":"code","508f24f4":"code","e112a7d1":"code","27642274":"code","2bfa963d":"code","718a9a0b":"markdown","0deb8aa5":"markdown","c6e9c22b":"markdown","6c9d2a55":"markdown","400f6dd8":"markdown","29960984":"markdown","7a31cc39":"markdown","c5b35fe1":"markdown","88be5458":"markdown","273a01cf":"markdown","1dd1ab20":"markdown"},"source":{"9692b976":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","6327f9a0":"import os, sys","e9bf19e9":"default_dir = \"..\/input\/home-credit-default-risk\/\"","24711ecf":"def get_balance_data():\n    pos_dtype = {\n        'SK_ID_PREV':np.uint32, 'SK_ID_CURR':np.uint32, 'MONTHS_BALANCE':np.int32, 'SK_DPD':np.int32,\n        'SK_DPD_DEF':np.int32, 'CNT_INSTALMENT':np.float32,'CNT_INSTALMENT_FUTURE':np.float32\n    }\n    \n    install_dtype = {\n        'SK_ID_PREV':np.uint32, 'SK_ID_CURR':np.uint32, 'NUM_INSTALMENT_NUMBER':np.int32, 'NUM_INSTALMENT_VERSION':np.float32,\n        'DAYS_INSTALMENT':np.float32, 'DAYS_ENTRY_PAYMENT':np.float32, 'AMT_INSTALMENT':np.float32, 'AMT_PAYMENT':np.float32\n    }\n    \n    card_dtype = {\n        'SK_ID_PREV':np.uint32, 'SK_ID_CURR':np.uint32, 'MONTHS_BALANCE':np.int16,\n        'AMT_CREDIT_LIMIT_ACTUAL':np.int32, 'CNT_DRAWINGS_CURRENT':np.int32, 'SK_DPD':np.int32,'SK_DPD_DEF':np.int32,\n        'AMT_BALANCE':np.float32, 'AMT_DRAWINGS_ATM_CURRENT':np.float32, 'AMT_DRAWINGS_CURRENT':np.float32,\n        'AMT_DRAWINGS_OTHER_CURRENT':np.float32, 'AMT_DRAWINGS_POS_CURRENT':np.float32, 'AMT_INST_MIN_REGULARITY':np.float32,\n        'AMT_PAYMENT_CURRENT':np.float32, 'AMT_PAYMENT_TOTAL_CURRENT':np.float32, 'AMT_RECEIVABLE_PRINCIPAL':np.float32,\n        'AMT_RECIVABLE':np.float32, 'AMT_TOTAL_RECEIVABLE':np.float32, 'CNT_DRAWINGS_ATM_CURRENT':np.float32,\n        'CNT_DRAWINGS_OTHER_CURRENT':np.float32, 'CNT_DRAWINGS_POS_CURRENT':np.float32, 'CNT_INSTALMENT_MATURE_CUM':np.float32\n    }\n        \n    pos_bal = pd.read_csv(os.path.join(default_dir,'POS_CASH_balance.csv'), dtype=pos_dtype)\n    install = pd.read_csv(os.path.join(default_dir,'installments_payments.csv'), dtype=install_dtype)\n    card_bal = pd.read_csv(os.path.join(default_dir, 'credit_card_balance.csv'), dtype=card_dtype)\n    \n    return pos_bal, install, card_bal\n\npos_bal, install, card_bal = get_balance_data()","b58953e4":"pos_bal.shape, install.shape, card_bal.shape","3552b0dc":"from sklearn.model_selection import train_test_split\nfrom lightgbm import LGBMClassifier","d8742c69":"def get_apps_processed(apps):\n    \"\"\"\n    feature engineering for apps\n    \"\"\"\n\n    # 1.EXT_SOURCE_X FEATURE \n    apps['APPS_EXT_SOURCE_MEAN'] = apps[['EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3']].mean(axis = 1)\n    apps['APPS_EXT_SOURCE_STD'] = apps[['EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3']].std(axis=1)\n    apps['APPS_EXT_SOURCE_STD'] = apps['APPS_EXT_SOURCE_STD'].fillna(apps['APPS_EXT_SOURCE_STD'].mean())\n    \n    # AMT_CREDIT \ube44\uc728\ub85c Feature \uac00\uacf5\n    apps['APPS_ANNUITY_CREDIT_RATIO'] = apps['AMT_ANNUITY']\/apps['AMT_CREDIT']\n    apps['APPS_GOODS_CREDIT_RATIO'] = apps['AMT_GOODS_PRICE']\/apps['AMT_CREDIT']\n    \n    # AMT_INCOME_TOTAL \ube44\uc728\ub85c Feature \uac00\uacf5\n    apps['APPS_ANNUITY_INCOME_RATIO'] = apps['AMT_ANNUITY']\/apps['AMT_INCOME_TOTAL']\n    apps['APPS_CREDIT_INCOME_RATIO'] = apps['AMT_CREDIT']\/apps['AMT_INCOME_TOTAL']\n    apps['APPS_GOODS_INCOME_RATIO'] = apps['AMT_GOODS_PRICE']\/apps['AMT_INCOME_TOTAL']\n    apps['APPS_CNT_FAM_INCOME_RATIO'] = apps['AMT_INCOME_TOTAL']\/apps['CNT_FAM_MEMBERS']\n    \n    # DAYS_BIRTH, DAYS_EMPLOYED \ube44\uc728\ub85c Feature \uac00\uacf5\n    apps['APPS_EMPLOYED_BIRTH_RATIO'] = apps['DAYS_EMPLOYED']\/apps['DAYS_BIRTH']\n    apps['APPS_INCOME_EMPLOYED_RATIO'] = apps['AMT_INCOME_TOTAL']\/apps['DAYS_EMPLOYED']\n    apps['APPS_INCOME_BIRTH_RATIO'] = apps['AMT_INCOME_TOTAL']\/apps['DAYS_BIRTH']\n    apps['APPS_CAR_BIRTH_RATIO'] = apps['OWN_CAR_AGE'] \/ apps['DAYS_BIRTH']\n    apps['APPS_CAR_EMPLOYED_RATIO'] = apps['OWN_CAR_AGE'] \/ apps['DAYS_EMPLOYED']\n    \n    return apps\n\ndef get_prev_processed(prev):\n  \"\"\"\n  feature engineering \n  for previouse application credit history\n  \"\"\"\n  prev['PREV_CREDIT_DIFF'] = prev['AMT_APPLICATION'] - prev['AMT_CREDIT']\n  prev['PREV_GOODS_DIFF'] = prev['AMT_APPLICATION'] - prev['AMT_GOODS_PRICE']\n  prev['PREV_CREDIT_APPL_RATIO'] = prev['AMT_CREDIT']\/prev['AMT_APPLICATION']\n  # prev['PREV_ANNUITY_APPL_RATIO'] = prev['AMT_ANNUITY']\/prev['AMT_APPLICATION']\n  prev['PREV_GOODS_APPL_RATIO'] = prev['AMT_GOODS_PRICE']\/prev['AMT_APPLICATION']\n  \n  # Data Cleansing\n  prev['DAYS_FIRST_DRAWING'].replace(365243, np.nan, inplace= True)\n  prev['DAYS_FIRST_DUE'].replace(365243, np.nan, inplace= True)\n  prev['DAYS_LAST_DUE_1ST_VERSION'].replace(365243, np.nan, inplace= True)\n  prev['DAYS_LAST_DUE'].replace(365243, np.nan, inplace= True)\n  prev['DAYS_TERMINATION'].replace(365243, np.nan, inplace= True)\n\n  # substraction between DAYS_LAST_DUE_1ST_VERSION and DAYS_LAST_DUE\n  prev['PREV_DAYS_LAST_DUE_DIFF'] = prev['DAYS_LAST_DUE_1ST_VERSION'] - prev['DAYS_LAST_DUE']\n  \n  # 1.Calculate the interest rate\n  all_pay = prev['AMT_ANNUITY'] * prev['CNT_PAYMENT']\n  prev['PREV_INTERESTS_RATE'] = (all_pay\/prev['AMT_CREDIT'] - 1)\/prev['CNT_PAYMENT']\n      \n  return prev\n    \n    \ndef get_prev_amt_agg(prev):\n  \"\"\"\n  feature engineering for the previous credit appliction\n  \"\"\"\n  # \uc0c8\ub86d\uac8c \uc0dd\uc131\ub41c \ub300\ucd9c \uc2e0\uccad\uc561 \ub300\ube44 \ub2e4\ub978 \uae08\uc561 \ucc28\uc774 \ubc0f \ube44\uc728\ub85c aggregation \uc218\ud589. \n  agg_dict = {\n        # \uae30\uc874 \uceec\ub7fc aggregation. \n      'SK_ID_CURR':['count'],\n      'AMT_CREDIT':['mean', 'max', 'sum'],\n      'AMT_ANNUITY':['mean', 'max', 'sum'], \n      'AMT_APPLICATION':['mean', 'max', 'sum'],\n      'AMT_DOWN_PAYMENT':['mean', 'max', 'sum'],\n      'AMT_GOODS_PRICE':['mean', 'max', 'sum'],\n      'RATE_DOWN_PAYMENT': ['min', 'max', 'mean'],\n      'DAYS_DECISION': ['min', 'max', 'mean'],\n      'CNT_PAYMENT': ['mean', 'sum'],\n      # \uac00\uacf5 \uceec\ub7fc aggregation\n      'PREV_CREDIT_DIFF':['mean', 'max', 'sum'], \n      'PREV_CREDIT_APPL_RATIO':['mean', 'max'],\n      'PREV_GOODS_DIFF':['mean', 'max', 'sum'],\n      'PREV_GOODS_APPL_RATIO':['mean', 'max'],\n      'PREV_DAYS_LAST_DUE_DIFF':['mean', 'max', 'sum'],\n      'PREV_INTERESTS_RATE':['mean', 'max']\n  }\n\n  prev_group = prev.groupby('SK_ID_CURR')\n  prev_amt_agg = prev_group.agg(agg_dict)\n\n  # multi index \uceec\ub7fc\uc744 '_'\ub85c \uc5f0\uacb0\ud558\uc5ec \uceec\ub7fc\uba85 \ubcc0\uacbd\n  prev_amt_agg.columns = [\"PREV_\"+ \"_\".join(x).upper() for x in prev_amt_agg.columns.ravel()]\n  \n  return prev_amt_agg\n\ndef get_prev_refused_appr_agg(prev):\n  \"\"\"\n  PREV_APPROVED_COUNT : Credit application approved count\n  PREV_REFUSED_COUNT :  Credit application refused count\n  \"\"\"\n  prev_refused_appr_group = prev[prev['NAME_CONTRACT_STATUS'].isin(['Approved', 'Refused'])].groupby([ 'SK_ID_CURR', 'NAME_CONTRACT_STATUS'])\n  # unstack() \n  prev_refused_appr_agg = prev_refused_appr_group['SK_ID_CURR'].count().unstack()\n\n  # rename column \n  prev_refused_appr_agg.columns = ['PREV_APPROVED_COUNT', 'PREV_REFUSED_COUNT' ]\n  \n  # NaN\uac12\uc740 \ubaa8\ub450 0\uc73c\ub85c \ubcc0\uacbd. \n  prev_refused_appr_agg = prev_refused_appr_agg.fillna(0)\n  \n  return prev_refused_appr_agg\n\n#### DAYS_DECISION\uc774 -365\uc77c \uc774\uc804 \ub370\uc774\ud130 \uc138\ud2b8 \ucd94\uac00 \uac00\uacf5. \n\ndef get_prev_days365_agg(prev):\n  \"\"\"\n  DAYS_DESCISION means How many days have been take since the previous credit application made.\n  Somewhat this feature is important.\n  \"\"\"\n  cond_days365 = prev['DAYS_DECISION'] > -365\n  prev_days365_group = prev[cond_days365].groupby('SK_ID_CURR')\n  agg_dict = {\n        # \uae30\uc874 \uceec\ub7fc aggregation. \n      'SK_ID_CURR':['count'],\n      'AMT_CREDIT':['mean', 'max', 'sum'],\n      'AMT_ANNUITY':['mean', 'max', 'sum'], \n      'AMT_APPLICATION':['mean', 'max', 'sum'],\n      'AMT_DOWN_PAYMENT':['mean', 'max', 'sum'],\n      'AMT_GOODS_PRICE':['mean', 'max', 'sum'],\n      'RATE_DOWN_PAYMENT': ['min', 'max', 'mean'],\n      'DAYS_DECISION': ['min', 'max', 'mean'],\n      'CNT_PAYMENT': ['mean', 'sum'],\n      # \uac00\uacf5 \uceec\ub7fc aggregation\n      'PREV_CREDIT_DIFF':['mean', 'max', 'sum'], \n      'PREV_CREDIT_APPL_RATIO':['mean', 'max'],\n      'PREV_GOODS_DIFF':['mean', 'max', 'sum'],\n      'PREV_GOODS_APPL_RATIO':['mean', 'max'],\n      'PREV_DAYS_LAST_DUE_DIFF':['mean', 'max', 'sum'],\n      'PREV_INTERESTS_RATE':['mean', 'max']\n  }\n  \n  prev_days365_agg = prev_days365_group.agg(agg_dict)\n\n  # multi index \uceec\ub7fc\uc744 '_'\ub85c \uc5f0\uacb0\ud558\uc5ec \uceec\ub7fc\uba85 \ubcc0\uacbd\n  prev_days365_agg.columns = [\"PREV_D365_\"+ \"_\".join(x).upper() for x in prev_days365_agg.columns.ravel()]\n  \n  return prev_days365_agg\n    \ndef get_prev_agg(prev):\n    prev = get_prev_processed(prev)\n    prev_amt_agg = get_prev_amt_agg(prev)\n    prev_refused_appr_agg = get_prev_refused_appr_agg(prev)\n    prev_days365_agg = get_prev_days365_agg(prev)\n    \n    # prev_amt_agg\uc640 \uc870\uc778. \n    prev_agg = prev_amt_agg.merge(prev_refused_appr_agg, on='SK_ID_CURR', how='left')\n    prev_agg = prev_agg.merge(prev_days365_agg, on='SK_ID_CURR', how='left')\n    # SK_ID_CURR\ubcc4 \uacfc\uac70 \ub300\ucd9c\uac74\uc218 \ub300\ube44 APPROVED_COUNT \ubc0f REFUSED_COUNT \ube44\uc728 \uc0dd\uc131. \n    prev_agg['PREV_REFUSED_RATIO'] = prev_agg['PREV_REFUSED_COUNT']\/prev_agg['PREV_SK_ID_CURR_COUNT']\n    prev_agg['PREV_APPROVED_RATIO'] = prev_agg['PREV_APPROVED_COUNT']\/prev_agg['PREV_SK_ID_CURR_COUNT']\n    # 'PREV_REFUSED_COUNT', 'PREV_APPROVED_COUNT' \uceec\ub7fc drop \n    prev_agg = prev_agg.drop(['PREV_REFUSED_COUNT', 'PREV_APPROVED_COUNT'], axis=1)\n    \n    return prev_agg\n\n# bureau \ucc44\ubb34 \uc644\ub8cc \ub0a0\uc9dc \ubc0f \ub300\ucd9c \uae08\uc561 \ub300\ube44 \ucc44\ubb34 \uae08\uc561 \uad00\ub828 \uceec\ub7fc \uac00\uacf5.\ndef get_bureau_processed(bureau):\n    # \uc608\uc815 \ucc44\ubb34 \uc2dc\uc791 \ubc0f \uc644\ub8cc\uc77c\uacfc \uc2e4\uc81c \ucc44\ubb34 \uc644\ub8cc\uc77c\uac04\uc758 \ucc28\uc774 \ubc0f \ub0a0\uc9dc \ube44\uc728 \uac00\uacf5.  \n    bureau['BUREAU_ENDDATE_FACT_DIFF'] = bureau['DAYS_CREDIT_ENDDATE'] - bureau['DAYS_ENDDATE_FACT']\n    bureau['BUREAU_CREDIT_FACT_DIFF'] = bureau['DAYS_CREDIT'] - bureau['DAYS_ENDDATE_FACT']\n    bureau['BUREAU_CREDIT_ENDDATE_DIFF'] = bureau['DAYS_CREDIT'] - bureau['DAYS_CREDIT_ENDDATE']\n  \n    # \ucc44\ubb34 \uae08\uc561 \ub300\ube44\/\ub300\ucd9c \uae08\uc561 \ube44\uc728 \ubc0f \ucc28\uc774 \uac00\uacf5\n    bureau['BUREAU_CREDIT_DEBT_RATIO']=bureau['AMT_CREDIT_SUM_DEBT']\/bureau['AMT_CREDIT_SUM']\n    #bureau['BUREAU_CREDIT_DEBT_DIFF'] = bureau['AMT_CREDIT_SUM'] - bureau['AMT_CREDIT_SUM_DEBT']\n    bureau['BUREAU_CREDIT_DEBT_DIFF'] = bureau['AMT_CREDIT_SUM_DEBT'] - bureau['AMT_CREDIT_SUM']\n    \n    # \uc5f0\uccb4 \uc5ec\ubd80 \ubc0f 120\uc77c \uc774\uc0c1 \uc5f0\uccb4 \uc5ec\ubd80 \uac00\uacf5\n    bureau['BUREAU_IS_DPD'] = bureau['CREDIT_DAY_OVERDUE'].apply(lambda x: 1 if x > 0 else 0)\n    bureau['BUREAU_IS_DPD_OVER120'] = bureau['CREDIT_DAY_OVERDUE'].apply(lambda x: 1 if x >120 else 0)\n    \n    return bureau\n\n\ndef get_bureau_day_amt_agg(bureau):\n  '''\n  bureau \uc8fc\uc694 \uceec\ub7fc \ubc0f \uc55e\uc5d0\uc11c \ucc44\ubb34 \ubc0f \ub300\ucd9c\uae08\uc561 \uad00\ub828 \uceec\ub7fc\ub4e4\ub85c SK_ID_CURR \ub808\ubca8\uc758 aggregation \uceec\ub7fc \uc0dd\uc131 \n  '''      \n  bureau_agg_dict = {\n  'SK_ID_BUREAU':['count'],\n  'DAYS_CREDIT':['min', 'max', 'mean'],\n  'CREDIT_DAY_OVERDUE':['min', 'max', 'mean'],\n  'DAYS_CREDIT_ENDDATE':['min', 'max', 'mean'],\n  'DAYS_ENDDATE_FACT':['min', 'max', 'mean'],\n  'AMT_CREDIT_MAX_OVERDUE': ['max', 'mean'],\n  'AMT_CREDIT_SUM': ['max', 'mean', 'sum'],\n  'AMT_CREDIT_SUM_DEBT': ['max', 'mean', 'sum'],\n  'AMT_CREDIT_SUM_OVERDUE': ['max', 'mean', 'sum'],\n  'AMT_ANNUITY': ['max', 'mean', 'sum'],\n  # \ucd94\uac00 \uac00\uacf5 \uceec\ub7fc\n  'BUREAU_ENDDATE_FACT_DIFF':['min', 'max', 'mean'],\n  'BUREAU_CREDIT_FACT_DIFF':['min', 'max', 'mean'],\n  'BUREAU_CREDIT_ENDDATE_DIFF':['min', 'max', 'mean'],\n  'BUREAU_CREDIT_DEBT_RATIO':['min', 'max', 'mean'],\n  'BUREAU_CREDIT_DEBT_DIFF':['min', 'max', 'mean'],\n  'BUREAU_IS_DPD':['mean', 'sum'],\n  'BUREAU_IS_DPD_OVER120':['mean', 'sum']\n  }\n\n  bureau_grp = bureau.groupby('SK_ID_CURR')\n  bureau_day_amt_agg = bureau_grp.agg(bureau_agg_dict)\n  bureau_day_amt_agg.columns = ['BUREAU_'+('_').join(column).upper() for column in bureau_day_amt_agg.columns.ravel()]\n  # \uc870\uc778\uc744 \uc704\ud574 SK_ID_CURR\uc744 reset_index()\ub85c \uceec\ub7fc\ud654 \n  bureau_day_amt_agg = bureau_day_amt_agg.reset_index()\n  #print('bureau_day_amt_agg shape:', bureau_day_amt_agg.shape)\n  return bureau_day_amt_agg\n\n\ndef get_bureau_active_agg(bureau):\n  '''\n  Bureau\uc758 CREDIT_ACTIVE='Active' \uc778 \ub370\uc774\ud130\ub9cc filtering \ud6c4 \n  \uc8fc\uc694 \uceec\ub7fc \ubc0f \uc55e\uc5d0\uc11c \ucc44\ubb34 \ubc0f \ub300\ucd9c\uae08\uc561 \uad00\ub828 \uceec\ub7fc\ub4e4\ub85c SK_ID_CURR \ub808\ubca8\uc758 aggregation \uceec\ub7fc \uc0dd\uc131\n  '''\n  # CREDIT_ACTIVE='Active' \uc778 \ub370\uc774\ud130\ub9cc filtering\n  cond_active = bureau['CREDIT_ACTIVE'] == 'Active'\n  bureau_active_grp = bureau[cond_active].groupby(['SK_ID_CURR'])\n  bureau_agg_dict = {\n      'SK_ID_BUREAU':['count'],\n      'DAYS_CREDIT':['min', 'max', 'mean'],\n      'CREDIT_DAY_OVERDUE':['min', 'max', 'mean'],\n      'DAYS_CREDIT_ENDDATE':['min', 'max', 'mean'],\n      'DAYS_ENDDATE_FACT':['min', 'max', 'mean'],\n      'AMT_CREDIT_MAX_OVERDUE': ['max', 'mean'],\n      'AMT_CREDIT_SUM': ['max', 'mean', 'sum'],\n      'AMT_CREDIT_SUM_DEBT': ['max', 'mean', 'sum'],\n      'AMT_CREDIT_SUM_OVERDUE': ['max', 'mean', 'sum'],\n      'AMT_ANNUITY': ['max', 'mean', 'sum'],\n      # \ucd94\uac00 \uac00\uacf5 \uceec\ub7fc\n      'BUREAU_ENDDATE_FACT_DIFF':['min', 'max', 'mean'],\n      'BUREAU_CREDIT_FACT_DIFF':['min', 'max', 'mean'],\n      'BUREAU_CREDIT_ENDDATE_DIFF':['min', 'max', 'mean'],\n      'BUREAU_CREDIT_DEBT_RATIO':['min', 'max', 'mean'],\n      'BUREAU_CREDIT_DEBT_DIFF':['min', 'max', 'mean'],\n      'BUREAU_IS_DPD':['mean', 'sum'],\n      'BUREAU_IS_DPD_OVER120':['mean', 'sum']\n      }\n\n  bureau_active_agg = bureau_active_grp.agg(bureau_agg_dict)\n  bureau_active_agg.columns = ['BUREAU_ACT_'+('_').join(column).upper() for column in bureau_active_agg.columns.ravel()]\n  # \uc870\uc778\uc744 \uc704\ud574 SK_ID_CURR\uc744 reset_index()\ub85c \uceec\ub7fc\ud654 \n  bureau_active_agg = bureau_active_agg.reset_index()\n  #print('bureau_active_agg shape:', bureau_active_agg.shape)\n  return bureau_active_agg\n\n# BUREAU\uc758 DAYS_CREDIT \uac00 -750\ubcf4\ub2e4 \ucd5c\uadfc \ub370\uc774\ud130 \ubcc4\ub3c4 \uac00\uacf5. \ndef get_bureau_days750_agg(bureau):\n    cond_days750 = bureau['DAYS_CREDIT'] > -750\n    bureau_days750_group = bureau[cond_days750].groupby('SK_ID_CURR')\n    bureau_agg_dict = {\n        'SK_ID_BUREAU':['count'],\n        'DAYS_CREDIT':['min', 'max', 'mean'],\n        'CREDIT_DAY_OVERDUE':['min', 'max', 'mean'],\n        'DAYS_CREDIT_ENDDATE':['min', 'max', 'mean'],\n        'DAYS_ENDDATE_FACT':['min', 'max', 'mean'],\n        'AMT_CREDIT_MAX_OVERDUE': ['max', 'mean'],\n        'AMT_CREDIT_SUM': ['max', 'mean', 'sum'],\n        'AMT_CREDIT_SUM_DEBT': ['max', 'mean', 'sum'],\n        'AMT_CREDIT_SUM_OVERDUE': ['max', 'mean', 'sum'],\n        'AMT_ANNUITY': ['max', 'mean', 'sum'],\n        # \ucd94\uac00 \uac00\uacf5 \uceec\ub7fc\n        'BUREAU_ENDDATE_FACT_DIFF':['min', 'max', 'mean'],\n        'BUREAU_CREDIT_FACT_DIFF':['min', 'max', 'mean'],\n        'BUREAU_CREDIT_ENDDATE_DIFF':['min', 'max', 'mean'],\n        'BUREAU_CREDIT_DEBT_RATIO':['min', 'max', 'mean'],\n        'BUREAU_CREDIT_DEBT_DIFF':['min', 'max', 'mean'],\n        'BUREAU_IS_DPD':['mean', 'sum'],\n        'BUREAU_IS_DPD_OVER120':['mean', 'sum']\n        }\n\n    bureau_days750_agg = bureau_days750_group.agg(bureau_agg_dict)\n    bureau_days750_agg.columns = ['BUREAU_ACT_'+('_').join(column).upper() for column in bureau_days750_agg.columns.ravel()]\n    bureau_days750_agg = bureau_days750_agg.reset_index()\n    \n    return bureau_days750_agg\n\n\n# bureau_bal\uc744 SK_ID_CURR \ub808\ubca8\ub85c \uac74\uc218\uc640 MONTHS_BALANCE\uc758 aggregation \uac00\uacf5 \ndef get_bureau_bal_agg(bureau, bureau_bal):\n    # SK_ID_CURR\ub808\ubca8\ub85c Group by\ud558\uae30 \uc704\ud574 bureau\uc5d0\uc11c SK_ID_CURR \uceec\ub7fc\uc744 \uac00\uc838\uc624\ub294 \uc870\uc778 \uc218\ud589. \n    bureau_bal = bureau_bal.merge(bureau[['SK_ID_CURR', 'SK_ID_BUREAU']], on='SK_ID_BUREAU', how='left')\n    \n    # STATUS\uc5d0 \ub530\ub77c \uc6d4\ubcc4 \uc5f0\uccb4 \uc5ec\ubd80 \ubc0f 120\uc77c \uc774\uc0c1 \uc5f0\uccb4 \uc5ec\ubd80 \uc18d\uc131 \uac00\uacf5. \n    bureau_bal['BUREAU_BAL_IS_DPD'] = bureau_bal['STATUS'].apply(lambda x: 1 if x in['1','2','3','4','5']  else 0)\n    bureau_bal['BUREAU_BAL_IS_DPD_OVER120'] = bureau_bal['STATUS'].apply(lambda x: 1 if x =='5'  else 0)\n    bureau_bal_grp = bureau_bal.groupby('SK_ID_CURR')\n    # SK_ID_CURR \ub808\ubca8\ub85c \uac74\uc218\uc640 MONTHS_BALANCE\uc758 aggregation \uac00\uacf5 \n    bureau_bal_agg_dict = {\n        'SK_ID_CURR':['count'],\n        'MONTHS_BALANCE':['min', 'max', 'mean'],\n        'BUREAU_BAL_IS_DPD':['mean', 'sum'],\n        'BUREAU_BAL_IS_DPD_OVER120':['mean', 'sum']\n    }\n\n    bureau_bal_agg = bureau_bal_grp.agg(bureau_bal_agg_dict)\n    bureau_bal_agg.columns = [ 'BUREAU_BAL_'+('_').join(column).upper() for column in bureau_bal_agg.columns.ravel() ]\n    # \uc870\uc778\uc744 \uc704\ud574 SK_ID_CURR\uc744 reset_index()\ub85c \uceec\ub7fc\ud654 \n    bureau_bal_agg = bureau_bal_agg.reset_index()\n    #print('bureau_bal_agg shape:', bureau_bal_agg.shape)\n    return bureau_bal_agg\n    \n# \uac00\uacf5\ub41c bureau\uad00\ub828 aggregation \uceec\ub7fc\ub4e4\uc744 \ubaa8\ub450 \uacb0\ud569   \ndef get_bureau_agg(bureau, bureau_bal):\n    \n    bureau = get_bureau_processed(bureau)\n    bureau_day_amt_agg = get_bureau_day_amt_agg(bureau)\n    bureau_active_agg = get_bureau_active_agg(bureau)\n    bureau_days750_agg = get_bureau_days750_agg(bureau)\n    bureau_bal_agg = get_bureau_bal_agg(bureau, bureau_bal)\n    \n    # bureau_day_amt_agg\uc640 bureau_active_agg \uc870\uc778.  \n    bureau_agg = bureau_day_amt_agg.merge(bureau_active_agg, on='SK_ID_CURR', how='left')\n    # STATUS\uac00 ACTIVE IS_DPD RATIO\uad00\ub828 \ube44\uc728 \uc7ac\uac00\uacf5. \n    #bureau_agg['BUREAU_IS_DPD_RATIO'] = bureau_agg['BUREAU_BUREAU_IS_DPD_SUM']\/bureau_agg['BUREAU_SK_ID_BUREAU_COUNT']\n    #bureau_agg['BUREAU_IS_DPD_OVER120_RATIO'] = bureau_agg['BUREAU_BUREAU_IS_DPD_OVER120_SUM']\/bureau_agg['BUREAU_SK_ID_BUREAU_COUNT']\n    bureau_agg['BUREAU_ACT_IS_DPD_RATIO'] = bureau_agg['BUREAU_ACT_BUREAU_IS_DPD_SUM']\/bureau_agg['BUREAU_SK_ID_BUREAU_COUNT']\n    bureau_agg['BUREAU_ACT_IS_DPD_OVER120_RATIO'] = bureau_agg['BUREAU_ACT_BUREAU_IS_DPD_OVER120_SUM']\/bureau_agg['BUREAU_SK_ID_BUREAU_COUNT']\n    \n    # bureau_agg\uc640 bureau_bal_agg \uc870\uc778. \n    bureau_agg = bureau_agg.merge(bureau_bal_agg, on='SK_ID_CURR', how='left')\n    bureau_agg = bureau_agg.merge(bureau_days750_agg, on='SK_ID_CURR', how='left') \n    #bureau_bal_agg['BUREAU_BAL_IS_DPD_RATIO'] = bureau_bal_agg['BUREAU_BAL_BUREAU_BAL_IS_DPD_SUM']\/bureau_bal_agg['BUREAU_BAL_SK_ID_CURR_COUNT']\n    #bureau_bal_agg['BUREAU_BAL_IS_DPD_OVER120_RATIO'] = bureau_bal_agg['BUREAU_BAL_BUREAU_BAL_IS_DPD_OVER120_SUM']\/bureau_bal_agg['BUREAU_BAL_SK_ID_CURR_COUNT']\n\n    #print('bureau_agg shape:', bureau_agg.shape)\n    \n    return bureau_agg\n\ndef get_apps_all_with_prev_agg(apps, prev):\n    apps_all =  get_apps_processed(apps)\n    prev_agg = get_prev_agg(prev)\n    print('prev_agg shape:', prev_agg.shape)\n    print('apps_all before merge shape:', apps_all.shape)\n    apps_all = apps_all.merge(prev_agg, on='SK_ID_CURR', how='left')\n    print('apps_all after merge with prev_agg shape:', apps_all.shape)\n    \n    return apps_all\n\ndef get_apps_all_encoded(apps_all):\n    object_columns = apps_all.dtypes[apps_all.dtypes == 'object'].index.tolist()\n    for column in object_columns:\n        apps_all[column] = pd.factorize(apps_all[column])[0]\n    \n    return apps_all\n\ndef get_apps_all_train_test(apps_all):\n    apps_all_train = apps_all[~apps_all['TARGET'].isnull()]\n    apps_all_test = apps_all[apps_all['TARGET'].isnull()]\n\n    apps_all_test = apps_all_test.drop('TARGET', axis=1)\n    \n    return apps_all_train, apps_all_test\n    \ndef train_apps_all(apps_all_train):\n    ftr_app = apps_all_train.drop(['SK_ID_CURR', 'TARGET'], axis=1)\n    target_app = apps_all_train['TARGET']\n\n    train_x, valid_x, train_y, valid_y = train_test_split(ftr_app, target_app, test_size=0.3, random_state=2020)\n    print('train shape:', train_x.shape, 'valid shape:', valid_x.shape)\n    clf = LGBMClassifier(\n                nthread=4,\n                n_estimators=2000,\n                learning_rate=0.02,\n                max_depth = 11,\n                num_leaves=58,\n                colsample_bytree=0.613,\n                subsample=0.708,\n                max_bin=407,\n                reg_alpha=3.564,\n                reg_lambda=4.930,\n                min_child_weight= 6,\n                min_child_samples=165,\n                silent=-1,\n                verbose=-1,\n                )\n   \n    clf.fit(train_x, train_y, eval_set=[(train_x, train_y), (valid_x, valid_y)], eval_metric= 'auc', verbose= 100, \n                early_stopping_rounds= 200)\n    \n    return clf","6ee3e862":"def get_pos_bal_agg(pos_bal):\n    # \uc5f0\uccb4 \uc77c\uc790(SK_DPD)\uac00 0 \ubcf4\ub2e4 \ud070 \uacbd\uc6b0, 0~ 100 \uc0ac\uc774, 100\ubcf4\ub2e4 \ud070 \uacbd\uc6b0 \uc870\uc0ac \n    cond_over_0 = pos_bal['SK_DPD'] > 0\n    cond_100 = (pos_bal['SK_DPD'] < 100) & (pos_bal['SK_DPD'] > 0)\n    cond_over_100 = (pos_bal['SK_DPD'] >= 100)\n\n    # \uc5f0\uccb4\uc5ec\ubd80,  \uc5f0\uccb4\uc77c\uc218 0~ 120 \uc0ac\uc774 \uc5ec\ubd80, \uc5f0\uccb4 \uc77c\uc218 120\ubcf4\ub2e4 \ud070 \uc5ec\ubd80 \n    pos_bal['POS_IS_DPD'] = pos_bal['SK_DPD'].apply(lambda x: 1 if x > 0 else 0)\n    pos_bal['POS_IS_DPD_UNDER_120'] = pos_bal['SK_DPD'].apply(lambda x:1 if (x > 0) & (x <120) else 0 )\n    pos_bal['POS_IS_DPD_OVER_120'] = pos_bal['SK_DPD'].apply(lambda x:1 if x >= 120 else 0)\n\n    # \uae30\uc874 \uceec\ub7fc\uacfc \uc2e0\uaddc \uceec\ub7fc\uc73c\ub85c SK_ID_CURR \ub808\ubca8\ub85c \uc2e0\uaddc aggregation \uceec\ub7fc \uc0dd\uc131\n    pos_bal_grp = pos_bal.groupby('SK_ID_CURR')\n    pos_bal_agg_dict = {\n        'SK_ID_CURR':['count'], \n        'MONTHS_BALANCE':['min', 'mean', 'max'], \n        'SK_DPD':['min', 'max', 'mean', 'sum'],\n        'CNT_INSTALMENT':['min', 'max', 'mean', 'sum'],\n        'CNT_INSTALMENT_FUTURE':['min', 'max', 'mean', 'sum'],\n        # \ucd94\uac00 \uceec\ub7fc. \n        'POS_IS_DPD':['mean', 'sum'],\n        'POS_IS_DPD_UNDER_120':['mean', 'sum'],\n        'POS_IS_DPD_OVER_120':['mean', 'sum']\n    }\n\n    pos_bal_agg = pos_bal_grp.agg(pos_bal_agg_dict)\n    # \uceec\ub7fc\uba85 \ubcc0\uacbd \n    pos_bal_agg.columns = [('POS_')+('_').join(column).upper() for column in pos_bal_agg.columns.ravel()]\n    \n    # MONTHS_BALANCE\uac00 \ucd5c\uadfc(20\uac1c\uc6d4 \uc774\ud558)\uc778 \ub370\uc774\ud130 \uc138\ud2b8 \ubcc4\ub3c4 \uac00\uacf5. \n    cond_months = pos_bal['MONTHS_BALANCE'] > -20\n    pos_bal_m20_grp = pos_bal[cond_months].groupby('SK_ID_CURR')\n    pos_bal_m20_agg_dict = {\n        'SK_ID_CURR':['count'], \n        'MONTHS_BALANCE':['min', 'mean', 'max'], \n        'SK_DPD':['min', 'max', 'mean', 'sum'],\n        'CNT_INSTALMENT':['min', 'max', 'mean', 'sum'],\n        'CNT_INSTALMENT_FUTURE':['min', 'max', 'mean', 'sum'],\n        # \ucd94\uac00 \uceec\ub7fc. \n        'POS_IS_DPD':['mean', 'sum'],\n        'POS_IS_DPD_UNDER_120':['mean', 'sum'],\n        'POS_IS_DPD_OVER_120':['mean', 'sum']\n    }\n\n    pos_bal_m20_agg = pos_bal_m20_grp.agg(pos_bal_m20_agg_dict)\n    # \uceec\ub7fc \ubcc0\uacbd \n    pos_bal_m20_agg.columns = [('POS_M20')+('_').join(column).upper() for column in pos_bal_m20_agg.columns.ravel()]\n    pos_bal_agg = pos_bal_agg.merge(pos_bal_m20_agg, on='SK_ID_CURR', how='left')\n    \n    # SK_ID_CURR\uc744 reset_index()\ub97c \uc774\uc6a9\ud558\uc5ec \uceec\ub7fc\uc73c\ub85c \ubcc0\ud658\n    pos_bal_agg = pos_bal_agg.reset_index()\n    \n    \n    return pos_bal_agg\n\ndef get_install_agg(install):\n    # \uc608\uc815 \ub0a9\ubd80 \uae08\uc561 \ub300\ube44 \uc2e4\uc81c \ub0a9\ubd80 \uae08\uc561 \uad00\ub828 \ub370\uc774\ud130 \uac00\uacf5. \uc608\uc815 \ub0a9\ubd80 \uc77c\uc790 \ub300\ube44 \uc2e4\uc81c \ub0a9\ubd80 \uc77c\uc790 \ube44\uad50\ub97c DPD \uc77c\uc790 \uc0dd\uc131  \n    install['AMT_DIFF'] = install['AMT_INSTALMENT'] - install['AMT_PAYMENT']\n    install['AMT_RATIO'] =  (install['AMT_PAYMENT'] +1)\/ (install['AMT_INSTALMENT'] + 1)\n    install['SK_DPD'] = install['DAYS_ENTRY_PAYMENT'] - install['DAYS_INSTALMENT']\n\n    # \uc5f0\uccb4\uc5ec\ubd80,  \uc5f0\uccb4\uc77c\uc218 30~ 120 \uc0ac\uc774 \uc5ec\ubd80, \uc5f0\uccb4 \uc77c\uc218 100\ubcf4\ub2e4 \ud070 \uc5ec\ubd80 \ub370\uc774\ud130 \uac00\uacf5. \n    install['INS_IS_DPD'] = install['SK_DPD'].apply(lambda x: 1 if x > 0 else 0)\n    install['INS_IS_DPD_UNDER_120'] = install['SK_DPD'].apply(lambda x:1 if (x > 0) & (x <120) else 0 )\n    install['INS_IS_DPD_OVER_120'] = install['SK_DPD'].apply(lambda x:1 if x >= 120 else 0)\n\n    # \uae30\uc874 \uceec\ub7fc\uacfc \uc2e0\uaddc \uceec\ub7fc\uc73c\ub85c SK_ID_CURR \ub808\ubca8\ub85c \uc2e0\uaddc aggregation \uceec\ub7fc \uc0dd\uc131. \n    install_grp = install.groupby('SK_ID_CURR')\n\n    install_agg_dict = {\n        'SK_ID_CURR':['count'],\n        'NUM_INSTALMENT_VERSION':['nunique'], \n        'DAYS_ENTRY_PAYMENT':['mean', 'max', 'sum'],\n        'DAYS_INSTALMENT':['mean', 'max', 'sum'],\n        'AMT_INSTALMENT':['mean', 'max', 'sum'],\n        'AMT_PAYMENT':['mean', 'max','sum'],\n        #  \ucd94\uac00 \uceec\ub7fc\n        'AMT_DIFF':['mean','min', 'max','sum'],\n        'AMT_RATIO':['mean', 'max'],\n        'SK_DPD':['mean', 'min', 'max'],\n        'INS_IS_DPD':['mean', 'sum'],\n        'INS_IS_DPD_UNDER_120':['mean', 'sum'],\n        'INS_IS_DPD_OVER_120':['mean', 'sum']    \n    }\n\n    install_agg = install_grp.agg(install_agg_dict)\n    install_agg.columns = ['INS_'+('_').join(column).upper() for column in install_agg.columns.ravel()]\n\n    \n    # \uc2e4\uc81c \ub0a9\ubd80 \uc77c\uc790(DAYS_ENTRY_PAYMENT)\uac00 \ube44\uad50\uc801 \ucd5c\uadfc(1\ub144 \uc774\ub0b4) \ub370\uc774\ud130\ub9cc \ubcc4\ub3c4\ub85c \uac00\uacf5\n    cond_day = install['DAYS_ENTRY_PAYMENT'] >= -365\n    install_d365_grp = install[cond_day].groupby('SK_ID_CURR')\n    install_d365_agg_dict = {\n        'SK_ID_CURR':['count'],\n        'NUM_INSTALMENT_VERSION':['nunique'], \n        'DAYS_ENTRY_PAYMENT':['mean', 'max', 'sum'],\n        'DAYS_INSTALMENT':['mean', 'max', 'sum'],\n        'AMT_INSTALMENT':['mean', 'max', 'sum'],\n        'AMT_PAYMENT':['mean', 'max','sum'],\n        #  \ucd94\uac00 \uceec\ub7fc\n        'AMT_DIFF':['mean','min', 'max','sum'],\n        'AMT_RATIO':['mean', 'max'],\n        'SK_DPD':['mean', 'min', 'max'],\n        'INS_IS_DPD':['mean', 'sum'],\n        'INS_IS_DPD_UNDER_120':['mean', 'sum'],\n        'INS_IS_DPD_OVER_120':['mean', 'sum']    \n    }\n    \n    install_d365_agg = install_d365_grp.agg(install_d365_agg_dict)\n    install_d365_agg.columns = ['INS_D365'+('_').join(column).upper() for column in install_d365_agg.columns.ravel()]\n    \n    install_agg = install_agg.merge(install_d365_agg, on='SK_ID_CURR', how='left')\n    install_agg = install_agg.reset_index()\n    \n    return install_agg\n\ndef get_card_bal_agg(card_bal):\n    # \uc6d4\ubcc4 \uce74\ub4dc \ud5c8\uc6a9\ud55c\ub3c4\uc5d0 \ub530\ub978 \uc794\uace0\uc640 \uc778\ucd9c \uae08\uc561 \ube44\uc728 \n    card_bal['BALANCE_LIMIT_RATIO'] = card_bal['AMT_BALANCE']\/card_bal['AMT_CREDIT_LIMIT_ACTUAL']\n    card_bal['DRAWING_LIMIT_RATIO'] = card_bal['AMT_DRAWINGS_CURRENT'] \/ card_bal['AMT_CREDIT_LIMIT_ACTUAL']\n\n    # DPD\uc5d0 \ub530\ub978 \uac00\uacf5 \uceec\ub7fc \uc0dd\uc131.\n    card_bal['CARD_IS_DPD'] = card_bal['SK_DPD'].apply(lambda x: 1 if x > 0 else 0)\n    card_bal['CARD_IS_DPD_UNDER_120'] = card_bal['SK_DPD'].apply(lambda x:1 if (x > 0) & (x <120) else 0 )\n    card_bal['CARD_IS_DPD_OVER_120'] = card_bal['SK_DPD'].apply(lambda x:1 if x >= 120 else 0)\n\n    # \uae30\uc874 \uceec\ub7fc\uacfc \uac00\uacf5 \uceec\ub7fc\uc73c\ub85c SK_ID_CURR \ub808\ubca8\ub85c aggregation \uc2e0\uaddc \uceec\ub7fc \uc0dd\uc131. \n    card_bal_grp = card_bal.groupby('SK_ID_CURR')\n    card_bal_agg_dict = {\n        'SK_ID_CURR':['count'],\n         #'MONTHS_BALANCE':['min', 'max', 'mean'],\n        'AMT_BALANCE':['max'],\n        'AMT_CREDIT_LIMIT_ACTUAL':['max'],\n        'AMT_DRAWINGS_ATM_CURRENT': ['max', 'sum'],\n        'AMT_DRAWINGS_CURRENT': ['max', 'sum'],\n        'AMT_DRAWINGS_POS_CURRENT': ['max', 'sum'],\n        'AMT_INST_MIN_REGULARITY': ['max', 'mean'],\n        'AMT_PAYMENT_TOTAL_CURRENT': ['max','sum'],\n        'AMT_TOTAL_RECEIVABLE': ['max', 'mean'],\n        'CNT_DRAWINGS_ATM_CURRENT': ['max','sum'],\n        'CNT_DRAWINGS_CURRENT': ['max', 'mean', 'sum'],\n        'CNT_DRAWINGS_POS_CURRENT': ['mean'],\n        'SK_DPD': ['mean', 'max', 'sum'],\n        #  \ucd94\uac00 \uceec\ub7fc\n        'BALANCE_LIMIT_RATIO':['min','max'],\n        'DRAWING_LIMIT_RATIO':['min', 'max'],\n        'CARD_IS_DPD':['mean', 'sum'],\n        'CARD_IS_DPD_UNDER_120':['mean', 'sum'],\n        'CARD_IS_DPD_OVER_120':['mean', 'sum']    \n    }\n    card_bal_agg = card_bal_grp.agg(card_bal_agg_dict)\n    card_bal_agg.columns = ['CARD_'+('_').join(column).upper() for column in card_bal_agg.columns.ravel()]\n\n    card_bal_agg = card_bal_agg.reset_index()\n    \n    # MONTHS_BALANCE\uac00 \ube44\uad50\uc801 \ucd5c\uadfc \ub370\uc774\ud130( 3\uac1c\uc6d4 \uc774\ud558)\ub9cc \ubcc4\ub3c4\ub85c \uac00\uacf5.  \n    cond_month = card_bal.MONTHS_BALANCE >= -3\n    card_bal_m3_grp = card_bal[cond_month].groupby('SK_ID_CURR')\n    card_bal_m3_agg = card_bal_m3_grp.agg(card_bal_agg_dict)\n    card_bal_m3_agg.columns = ['CARD_M3'+('_').join(column).upper() for column in card_bal_m3_agg.columns.ravel()]\n    \n    card_bal_agg = card_bal_agg.merge(card_bal_m3_agg, on='SK_ID_CURR', how='left')\n    card_bal_agg = card_bal_agg.reset_index()\n    \n    return card_bal_agg","e3ad2310":"# apps\uc640 prev_agg, bureau_agg, pos_bal_agg, install_agg, card_bal_agg\ub97c \uac1c\ubcc4 \ud568\uc218 \ud638\ucd9c\ud558\uc5ec \uc0dd\uc131\ud6c4 \uc870\uc778 \uacb0\ud569\ndef get_apps_all_with_all_agg(apps, prev, bureau, bureau_bal, pos_bal, install, card_bal):\n  \"\"\"\n  Description :\n  1.Data preparation , aggregation \n  2.produce the finalized result\n  \"\"\"\n  apps_all =  get_apps_processed(apps)\n  prev_agg = get_prev_agg(prev)\n  bureau_agg = get_bureau_agg(bureau, bureau_bal)\n  pos_bal_agg = get_pos_bal_agg(pos_bal)\n  install_agg = get_install_agg(install)\n  card_bal_agg = get_card_bal_agg(card_bal)\n  print('prev_agg shape:', prev_agg.shape, 'bureau_agg shape:', bureau_agg.shape )\n  print('pos_bal_agg shape:', pos_bal_agg.shape, 'install_agg shape:', install_agg.shape, 'card_bal_agg shape:', card_bal_agg.shape)\n  print('apps_all before merge shape:', apps_all.shape)\n  \n  # Join with apps_all\n  apps_all = apps_all.merge(prev_agg, on='SK_ID_CURR', how='left')\n  apps_all = apps_all.merge(bureau_agg, on='SK_ID_CURR', how='left')\n  apps_all = apps_all.merge(pos_bal_agg, on='SK_ID_CURR', how='left')\n  apps_all = apps_all.merge(install_agg, on='SK_ID_CURR', how='left')\n  apps_all = apps_all.merge(card_bal_agg, on='SK_ID_CURR', how='left')\n    \n  print('apps_all after merge with all shape:', apps_all.shape)\n  \n  return apps_all","736b54c6":"def get_dataset():\n  \"\"\"\n  load datasets\n  1.app_train - train dataset \n  2.app_test - test datasets\n  3.apps - concatenated app_train, app_test\n  4.pos_bal - POS_CACHE\n  5.install - installments_payments\n  6.card_bal - Credit Card\n  \"\"\"\n  app_train = pd.read_csv(os.path.join(default_dir,'application_train.csv'))\n  app_test = pd.read_csv(os.path.join(default_dir,'application_test.csv'))\n  apps = pd.concat([app_train, app_test])\n  \n  prev = pd.read_csv(os.path.join(default_dir,'previous_application.csv'))\n  bureau = pd.read_csv(os.path.join(default_dir,'bureau.csv'))\n  bureau_bal = pd.read_csv(os.path.join(default_dir,'bureau_balance.csv'))\n  \n  pos_bal, install, card_bal = get_balance_data()\n      \n  return apps, prev, bureau, bureau_bal, pos_bal, install, card_bal","58851189":"apps, prev, bureau, bureau_bal, pos_bal, install, card_bal = get_dataset()","c052d054":"# application, previous, bureau, bureau_bal \uad00\ub828 \ub370\uc774\ud130\uc14b \uac00\uacf5 \ubc0f \ucde8\ud569. \napps_all = get_apps_all_with_all_agg(apps, prev, bureau, bureau_bal, pos_bal, install, card_bal)\n\n\n# Category \uceec\ub7fc\uc744 \ubaa8\ub450 Label \uc778\ucf54\ub529 \uc218\ud589. \napps_all = get_apps_all_encoded(apps_all)\n\n# \ud559\uc2b5\uacfc \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ub85c \ubd84\ub9ac. \napps_all_train, apps_all_test = get_apps_all_train_test(apps_all)\n\n#\ud559\uc2b5\uc218\ud589. \nclf = train_apps_all(apps_all_train)","508f24f4":"output_dir = \"..\/output\/kaggle\/working\/\"\npreds = clf.predict_proba(apps_all_test.drop(['SK_ID_CURR'], axis=1))[:, 1 ]\napps_all_test['TARGET'] = preds\n#apps_all_test[['SK_ID_CURR', 'TARGET']].to_csv(os.path.join(output_dir,'pos_install_credit_02.csv'), index=False)\napps_all_test[['SK_ID_CURR', 'TARGET']]","e112a7d1":"apps_all_test[['SK_ID_CURR', 'TARGET']].to_csv('submission.csv', index=False)","27642274":"from lightgbm import plot_importance","2bfa963d":"plot_importance(clf, figsize=(16, 32), max_num_features=100)","718a9a0b":"### Plot importance of features","0deb8aa5":"### EDA , Feature Engineering","c6e9c22b":"### reload the original *datasets*","6c9d2a55":"### column data type convert to reduce memory allocated size","400f6dd8":"### load dataset under colab","29960984":"#### aggregation for pos, install, credit card","7a31cc39":"### load package","c5b35fe1":"## data cleansing, EDA, model creation\n - POS_CASH_balance, installments_payments, credit_card_balance ","88be5458":"### CSV for Predicted result","273a01cf":"### Data preparation, encodeing, datasets split, fit","1dd1ab20":"### datasets concatenation and Join"}}