{"cell_type":{"45f87ab0":"code","351f785f":"code","a54dd9c4":"code","e7e9d856":"code","dc025251":"code","c073e5c4":"code","206f1535":"code","b5c74a72":"code","115e9eb7":"code","715bd31e":"code","3e0dc7ba":"code","0be6a77f":"code","397df6b4":"markdown"},"source":{"45f87ab0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         if 'gis_osm_buildings' in filename:\n#             print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","351f785f":"!pip install geopandas\n!pip install OSMPythonTools\n!pip install osmread","a54dd9c4":"from shapely.geometry import box\nimport geopandas as gp\nfrom OSMPythonTools.api import Api\n\nfrom tqdm import tqdm\nimport time\n# from tqdm.auto import tqdm  # for notebooks\n\n# Create new `pandas` methods which use `tqdm` progress\n# (can use tqdm_gui, optional kwargs, etc.)\ntqdm.pandas()","e7e9d856":"map_file_name = '\/kaggle\/input\/osm-central-region-of-russia\/central-fed-district-latest-free.shp'\n# \u0422\u0443\u0442 \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0441\u043b\u043e\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u044b \u0431\u0443\u0434\u0435\u0442\u0435 \u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432 \u043f\u0435\u0440\u0432\u0443\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c\nlayers = [\n    'gis_osm_places_free_1',\n]\n\n# \u0421\u0434\u0432\u0438\u0433 \u043e\u0442 \u0432\u0445\u043e\u0434\u043d\u043e\u0439 \u0442\u043e\u0447\u043a\u0438, \u0441 \u044d\u0442\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u0434\u0438\u0430\u043c\u0435\u0442\u0440 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0430 \u043e\u043a\u043e\u043b\u043e 1,27\u043a\u043c.\npoint_offset = 0.01\n\ndef get_neighbors(point):\n    p1 = np.array(point) - point_offset\n    p2 = np.array(point) + point_offset\n    bbox = box(p1[0], p2[0], p1[1], p2[1])\n    \n    osm_ids = []\n    for layer in layers:\n        maps = gp.read_file(\n            map_file_name,\n            layer=layer,\n            bbox=bbox,\n        )\n        maps['type'] = maps['geometry'].type\n        osm_ids.extend(\n            tuple(zip(\n                maps['osm_id'],\n                maps['type'],\n            ))\n        )\n    return osm_ids","dc025251":"train = pd.read_csv('..\/input\/cft-shift2022\/train.csv')\ntrain['coord'] = tuple(zip(train['latitude'], train['longitude']))\ntest = pd.read_csv('..\/input\/cft-shift2022\/test.csv')\ntest['coord'] = tuple(zip(test['latitude'], test['longitude']))","c073e5c4":"# \u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0431\u0435\u0440\u0443 10 \u0442\u043e\u0447\u0435\u043a\nsample_df = pd.concat([train, test], axis=0)\nsample_df['neighboring_osm_ids'] = sample_df['coord'].progress_apply(get_neighbors)\n# \u042f \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u043b \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u0443\u044e \u0441\u0435\u0442\u044c, \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u0442\u043e\u0447\u043a\u0435 \u0443 \u043c\u0435\u043d\u044f \u0432\u044b\u0442\u044f\u043d\u0443\u043b\u043e\u0441\u044c \u043e\u043a\u043e\u043b\u043e 20 000 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432\n# \u042d\u0442\u043e \u043c\u043d\u043e\u0433\u043e! \u0412 \u043f\u043e\u0445\u043e\u0436\u0438\u0445 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u044f \u0441\u0442\u043e\u0438\u0442 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0442\u044c \u043a\u043e\u043b-\u0432\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432\n# sample_df['neighboring_osm_ids'] = sample_df['neighboring_osm_ids'].str[:100]","206f1535":"def get_tags(osm_ids):\n    type_obj_map = {\n        'Point': 'node',\n        'MultiPolygon': 'way',\n        'Polygon': 'way',\n    }\n    tags = []\n    for osm_id, type_name in osm_ids:\n        type_obj = type_obj_map[type_name]\n        request = api.query(f'{type_obj}\/{osm_id}')\n        tags.append(request.tags())\n    return tags","b5c74a72":"# \u041d\u0430 \u043f\u0435\u0440\u0432\u044b\u0439 100 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043f\u043e\u0447\u0442\u0438 \u043c\u0433\u043d\u043e\u0432\u0435\u043d\u043d\u043e, \u043d\u0430 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0441 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0437\u0430\u0434\u0435\u0440\u0436\u043a\u0430, \u0433\u0434\u0435-\u0442\u043e 1 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\napi = Api()\nr = sample_df['neighboring_osm_ids'].progress_apply(get_tags)","115e9eb7":"from osmread import parse_file, elements\n\nmaps = parse_file('..\/input\/osm-central-region-of-russia\/central-fed-district-latest.osm.pbf')\nall_osm_ids = sample_df['neighboring_osm_ids'].map(lambda x: [i[0] for i in x])\nall_osm_ids = set([x for i in all_osm_ids.to_list() for x in i])","715bd31e":"# \u0411\u0423\u0414\u0415\u0422 \u0414\u041e\u041b\u0413\u041e \u0418\u0421\u041a\u0410\u0422\u042c\ndata = {}\nfor entity in maps:\n    if entity.id not in all_osm_ids:\n        continue\n    data[entity.id] = entity._asdict()\n    break","3e0dc7ba":"import fiona\nlayers = fiona.listlayers('\/kaggle\/input\/osm-central-region-of-russia\/central-fed-district-latest-free.shp')","0be6a77f":"layers","397df6b4":"## \u0421\u043f\u043e\u0441\u043e\u0431 \u21162"}}