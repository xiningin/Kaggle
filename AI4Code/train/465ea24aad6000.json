{"cell_type":{"3d78be3f":"code","9148d933":"code","7348c700":"code","06c23ddb":"code","ea7da5e2":"code","e730b8f3":"code","be10d938":"code","e5671ea8":"code","fd73494d":"markdown","167722b9":"markdown","9a43a3cb":"markdown","819f09dd":"markdown","8eb2596c":"markdown"},"source":{"3d78be3f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9148d933":"def create_user_movie_df():\n    \"\"\"\n         Converts Movie and Rating dataset to User * Movie format\n          and converts it to a new dataset with a rating number of more than 1000.\n         Returns\n         -------\n         User * Movie dataframe\n    \"\"\"\n    movie = pd.read_csv('..\/input\/movielens-20m-dataset\/movie.csv')\n    rating = pd.read_csv('..\/input\/movielens-20m-dataset\/rating.csv')\n    df = movie.merge(rating, how=\"left\", on=\"movieId\")\n    comment_counts = pd.DataFrame(df[\"title\"].value_counts())\n    rare_movies = comment_counts[comment_counts[\"title\"] <= 1000].index\n    common_movies = df[~df[\"title\"].isin(rare_movies)]\n    user_movie_df = common_movies.pivot_table(index=[\"userId\"], columns=[\"title\"], values=\"rating\")\n    return user_movie_df","7348c700":"def get_film(keyword, user_movie_df):\n    \"\"\"\n         Allows you to easily search when you don't remember the exact name of the movie\n\n         Parameters\n         ----------\n         keyword: str\n             Write the name of the movie as best you can remember.\n\n         user_movie_df: dataframe\n             dataset containing movie title\n\n         Returns\n         -------\n            Returns the list of movies containing the entered name\n    \"\"\"\n    return [col for col in user_movie_df.columns if keyword.upper() in col.upper()]\n","06c23ddb":"def item_based_recommender(movie_name, user_movie_df):\n    \"\"\"\n         Brings you 10 movies you might like\n         \n         Parameters\n         ----------\n         movie_name: str\n             the name of the movie you watched\n             \n         user_movie_df: dataframe\n             Dataset converted to User * Movie\n\n         Returns\n         -------\n             Returns the dataset containing the top 10 movies to like\n    \"\"\"\n    movie_name = user_movie_df[movie_name]\n    return user_movie_df.corrwith(movie_name).sort_values(ascending=False)[1:11]\n","ea7da5e2":"user_movie_df = create_user_movie_df()\nuser_movie_df.head()","e730b8f3":"user_movie_df.shape","be10d938":"get_film('sher', user_movie_df)","e5671ea8":"item_based_recommender(\"Sherlock Holmes (2009)\", user_movie_df)","fd73494d":"## Let's see all the movies that contain 'sher' in the movies name","167722b9":"![item based collaborative filtering](https:\/\/miro.medium.com\/max\/1838\/1*3ALliiz9hG79_2xopzgyrQ.png)\n\n## ITEM BASED COLLABORATIVE FILTERING\n\nThe fine line in item based collaborative filtering is as follows;\n\nOur dataset is about movies, and after we make our dataset (User * Movie),\n\nwe disable users and only movies that have a high correlation in rating\n\nbetween movies cooperate with each other and they are recommended. Once you understand that, everything is very simple\n\nHow Does? Let's examine together","9a43a3cb":"## Recommendation Top 10 Movies\n\nWe loved Sherlock Holmes (2009). Let's see what other movies we might like, our system will suggest us.","819f09dd":"Simple and successful, don't you think? I loved it. Now I'm going to watch a movie.\n\n## Let data be your best friend","8eb2596c":"## How many movies do we have?\n\n* There are 138493 users and 3159 movies in our user_movie_df dataset."}}