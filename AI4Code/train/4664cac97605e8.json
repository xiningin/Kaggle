{"cell_type":{"22ef02f6":"code","b6c670fd":"code","c978aaa0":"code","efa1381f":"code","e07f5da9":"code","4b3276ea":"code","fdef7b4c":"code","a1bdc599":"code","2406fd1c":"code","a0824785":"code","54ed3d70":"code","bd347047":"code","00da3aec":"code","84e61612":"code","c96f53b9":"code","a3f42eed":"code","225deac1":"code","ea7451c5":"code","93429281":"code","7a135c79":"code","8957682e":"code","b1340329":"code","e13d4986":"code","5dfe45d6":"code","e182a2f5":"code","139eb0d7":"code","32ceb5bf":"code","ef7032cd":"code","56197a99":"code","6f4e44ed":"code","43772836":"markdown","372dd55a":"markdown","5b628945":"markdown","4df65d31":"markdown","e46d7479":"markdown"},"source":{"22ef02f6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b6c670fd":"train_data = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('..\/input\/titanic\/test.csv')\n","c978aaa0":"def fill_mean(key,train,test):\n    train[key] = train[key].fillna(train[key].mean())\n    test[key]  = test[key].fillna(train[key].mean())\n    return train,test\n\n\n\n\ndef get_people_status(train_data):\n\n    train_data['Status'] = train_data.apply(lambda x:'Sir.' if 'Sir.' in x.Name else \n        (\n            'Mrs.' if 'Mrs. 'in x.Name\n            else(\n            'Mr.' if 'Mr. 'in x.Name\n                else\n                (\n            'Dr.' if 'Dr. 'in x.Name\n            else(\n\n            'Kid' if x.Age<=10\n            else(\n\n            'Common Woman' if x.Sex=='female'\n                else\n\n        'Nobody.'))))),axis=1)\n    \n    train_data=train_data.drop(columns=['Name'])\n    return train_data\n\n\ndef get_people_age_cat(train_data):\n\n    train_data['Age_Group'] = train_data.apply(lambda x:'Infant' if x.Age<3 else \n        (\n            'Small Children' if x.Age<12\n            else(\n            'Teenager' if x.Age<20\n                else\n                (\n            'Youth' if x.Age<30\n            else(\n\n            'Middle Age' if x.Age<=50\n            else\n            'Senior')))),axis=1)\n    \n    train_data=train_data.drop(columns=['Age'])\n    return train_data","efa1381f":"train_data.info()","e07f5da9":"test_data.info()","4b3276ea":"features = ['Age','Fare']\nfor key in features:\n    train_data,test_data = fill_mean(key,train_data,test_data)\n\ntrain_data['Cabin'] = train_data['Cabin'].fillna('No cabin')\ntest_data['Cabin'] = test_data['Cabin'].fillna('No cabin')\n","fdef7b4c":"train_data.Name.unique()","a1bdc599":"train_data['Cabin'].value_counts()","2406fd1c":"train_data['Cabin']= train_data['Cabin'].str.slice(0,1)\ntest_data['Cabin']= test_data['Cabin'].str.slice(0,1)","a0824785":"train_data = get_people_status(train_data)\ntest_data = get_people_status(test_data)\ntrain_data = get_people_age_cat(train_data)\ntest_data = get_people_age_cat(test_data)\n","54ed3d70":"import seaborn as sns\nimport matplotlib.pyplot as plt\nplt.subplots(figsize=(8,8))\nsns.countplot(train_data['Status'],hue=train_data['Survived'])","bd347047":"sns.heatmap(train_data.corr())","00da3aec":"train_data.corr()['Fare']","84e61612":"train_data = train_data.drop(columns=['PassengerId','Ticket','Fare'])\ntest_data = test_data.drop(columns=['Ticket','Fare'])","c96f53b9":"train_data","a3f42eed":"def split_columns(data):\n    categorical_col = data.select_dtypes(include=['object','category']).columns.tolist()\n    numerical_col = data.select_dtypes(include=['int64','float64']).columns.tolist()\n    return categorical_col,numerical_col\n    ","225deac1":"cat,num = split_columns(train_data)\ntest = cat\ntest.append('Pclass')\ntest.append('SibSp')","ea7451c5":"import matplotlib.pyplot as plt\nfig,axes=plt.subplots(3,3,figsize=(15,15))\ni=0;\nfor elem in cat:\n    #print(elem)\n    sns.countplot(x=train_data[elem], hue=train_data['Survived'], orient='v', ax=axes[int(i\/3),(i%3)]);\n    i=i+1\n    ","93429281":"import seaborn as sns\nsns.countplot(train_data['SibSp'],hue=train_data['Survived'])","7a135c79":"sns.countplot(train_data['Parch'],hue=train_data['Survived'])","8957682e":"sns.countplot(train_data['Pclass'],hue=train_data['Survived'])","b1340329":"train_data = pd.get_dummies(train_data)","e13d4986":"test_data = pd.get_dummies(test_data)","5dfe45d6":"train_data = train_data.drop(columns=['Status_Sir.','Cabin_T'])","e182a2f5":"X_test = test_data.drop(columns=['PassengerId'])\ny_train = train_data['Survived']\nX_train = train_data.drop(columns=['Survived'])","139eb0d7":"X_train","32ceb5bf":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\n# Create the parameter grid based on the results of random search \nparam_grid = {\n    'max_depth': [1,2,3,4,10,15],\n     'min_samples_leaf': [3, 5,10,20,30],\n     'min_samples_split': [4, 8, 10, 12],\n     'n_estimators': [3,5,10,15]\n}\n# Create a based model\nrf = RandomForestClassifier()\n# Instantiate the grid search model\ngrid_search = GridSearchCV(estimator = rf, param_grid = param_grid, \n                          cv = 3, n_jobs = -1, verbose = 2)\n\ngrid_search.fit(X_train, y_train)\ngrid_search.best_params_\n\n","ef7032cd":"rf =grid_search.best_estimator_\nrf.fit(X_train,y_train)\ny_pred = rf.predict(X_test)\n","56197a99":"y_pred","6f4e44ed":"output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': y_pred})\noutput.to_csv('results.csv', index=False)","43772836":"# EDA","372dd55a":"More important here is the Alphabet of the cabin so we can discard the numbers and group all A,B, C.. together","5b628945":"Age, Fare, Cabin columns have null values which needs to be addressed in the data","4df65d31":"# **Helper codes for Preprocessing**\n","e46d7479":"Even though name is useless, one can infer their title or status from this which is quite useful to determine the survival."}}