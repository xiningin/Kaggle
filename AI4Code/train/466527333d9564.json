{"cell_type":{"0bfbb8aa":"code","a0e1d09f":"code","3f015efe":"code","0e70750b":"code","9814a10f":"code","5c00bf9e":"code","f5e64c9c":"code","94dc5fd0":"code","2df7303a":"code","b971725c":"code","dfa29aa1":"code","043d85e8":"code","32489565":"code","da57f13c":"code","754e5b26":"code","e4c69375":"code","a4b530a6":"code","61ced840":"code","834ac131":"code","d5ccc773":"code","2f7339d8":"code","723c84f6":"code","1da17dfe":"code","2f85aa35":"code","efaea12d":"code","c3841b92":"code","dbb18ca3":"code","913f3584":"markdown","94c0f118":"markdown","f50f2b62":"markdown","fa8ff14a":"markdown","62868a71":"markdown","4156243f":"markdown","22330026":"markdown","2df1633c":"markdown","fb31682c":"markdown","eac28fa7":"markdown","1b655007":"markdown","32bf0a44":"markdown","67c7009f":"markdown","0b3ba7ff":"markdown","10a62d8b":"markdown"},"source":{"0bfbb8aa":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport sklearn\nfrom sklearn import metrics\nimport tensorflow as tf\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nimport numpy as np","a0e1d09f":"train = pd.read_csv(\"..\/input\/machine-learning-hebei-north-university\/train.csv\")\n\ntest = pd.read_csv(\"..\/input\/machine-learning-hebei-north-university\/test.csv\")","3f015efe":"def evaluate(model, x_val, y_val):\n    y_pred = model.predict(x_val)\n    r2 = metrics.r2_score(y_val, y_pred)\n    mse = metrics.mean_squared_error(y_val, y_pred)\n    mae = metrics.mean_absolute_error(y_val, y_pred)\n    msle = metrics.mean_squared_log_error(y_val, y_pred)\n    mape = np.mean(tf.keras.metrics.mean_absolute_percentage_error(y_val, y_pred).numpy())\n    rmse = np.sqrt(mse)\n    rmlse_score = rmlse(y_val, y_pred).numpy()\n    print(\"R2 Score:\", r2)\n    print(\"MSE:\", mse)\n    print(\"MAE:\", mae)\n    print(\"MSLE:\", msle)\n    print(\"MAPE\", mape)\n    print(\"RMSE:\", rmse)\n    print(\"RMLSE\", rmlse_score)\n    return {\"r2\": r2, \"mse\": mse, \"mae\": mae, \"msle\": msle, \"mape\": mape, \"rmse\": rmse, \"rmlse\": rmlse_score}","0e70750b":"def rmlse(y_true, y_pred):\n    return tf.sqrt(tf.reduce_mean(tf.square(tf.math.log(y_pred + 1) - tf.math.log(y_true + 1))))","9814a10f":"def submit(model, X, ids, file_path):\n    SalePrice = model.predict(X)\n    submission = pd.DataFrame({\"Id\": ids, \"SalePrice\": SalePrice.reshape(-1)})\n    submission.to_csv(file_path, index=False)","5c00bf9e":"train.head()","f5e64c9c":"train.shape","94dc5fd0":"train.info()","2df7303a":"train.describe()","b971725c":"correlation_scores = train.corr()\ncorrelation_scores\n","dfa29aa1":"train.corr()[\"SalePrice\"].sort_values(key = lambda x: abs(x), ascending=False)","043d85e8":"for data in [train, test]:\n    null_counts = data.isnull().sum()\n    null_counts[null_counts > 0]\n    null_columns = list(pd.DataFrame(null_counts[null_counts > 0]).index)\n    for column in null_columns:\n        if data[column].dtype == object:\n            data[column] = data[[column]].replace(np.NAN, \"Unknown\")\n        else:\n            data[column] = data[column].replace(np.NAN, data[column].mean())","32489565":"train_test = pd.get_dummies(pd.concat([train, test]))\n","da57f13c":"train_test.head()","754e5b26":"mean_value = train_test.mean()\nstd_value = train_test.std()\nmean_value.pop(\"SalePrice\")\nstd_value.pop(\"SalePrice\")\nprint(mean_value)\nprint(std_value)","e4c69375":"train_features = train_test.iloc[0: len(train)]\ntest_features = train_test.iloc[len(train):]\n_ = train_features.pop(\"Id\")\n_ = test_features.pop(\"SalePrice\")\ntest_ids = test_features.pop(\"Id\")","a4b530a6":"train_features, val_features = train_test_split(train_features, test_size=0.2, random_state=np.random.randint(1000))","61ced840":"train_features.corr()","834ac131":"thresold = 0.05\ncorrelated_scores = train_features.corr()[\"SalePrice\"]\ncorrelated_scores = correlated_scores[correlated_scores.abs() >= thresold]\ncorrelated_columns = list(correlated_scores.index)\ncorrelated_columns.remove(\"SalePrice\")\nprint(correlated_columns)","d5ccc773":"train_targets = train_features.pop(\"SalePrice\")\nval_targets = val_features.pop(\"SalePrice\")\n","2f7339d8":"categorical_columns = set(train.dtypes[train.dtypes==object].index)\n","723c84f6":"scale_strategies = [\"none\", \"standard_scale\", \"standard_scale_exclude_categorcial_features\"]\nscale_strategy = scale_strategies[2]\nif scale_strategy == scale_strategies[1]:\n    train_features = (train_features - mean_value) \/ std_value\n    val_features = (val_features - mean_value) \/ std_value\n    test_features = (test_features - mean_value) \/ std_value\nif scale_strategy == scale_strategies[2]:\n    for column in train_features.columns:\n        is_categorical_feature = False\n        components = column.split(\"_\")\n        if len(components) == 2 and components[0] in categorical_columns:\n            is_categorical_feature = True\n        if is_categorical_feature == False:\n            for features in [train_features, val_features, test_features]:\n                features.loc[:, column] = (features.loc[:, column] - mean_value[column]) \/ std_value[column]","1da17dfe":"train_features.head()","2f85aa35":"use_correlated_columns = True\nif use_correlated_columns:\n    train_features = train_features[correlated_columns]\n    val_features = val_features[correlated_columns]\n    test_features = test_features[correlated_columns]","efaea12d":"import catboost\nimport time\nimport sklearn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\nbegin = time.time()\nparameters = {\n    \"depth\": [4, 5, 6, 7, 8],\n    \"learning_rate\": [0.07, 0.08, 0.09, 0.10, 0.11, 0.12, 0.13, 0.14, 0.15],\n    \"iterations\": [200, 220, 240 ,260 ,280, 300, 500, 1000, 1500], \n}\ndef train_with_catboost(hyperparameters, X_train, X_val, y_train, y_val):\n    keys = hyperparameters.keys()\n    best_index = {key:0 for key in keys}\n    best_cat = None\n    best_score = 10e8\n    for (index, key) in enumerate(keys):\n        print(\"Find best parameter for %s\" %(key))\n        items = hyperparameters[key]\n        best_parameter = None\n        temp_best = 10e8\n        for (key_index, item) in enumerate(items):\n            iterations = hyperparameters[\"iterations\"][best_index[\"iterations\"]] if key != \"iterations\" else item\n            learning_rate = hyperparameters[\"learning_rate\"][best_index[\"learning_rate\"]] if key != \"learning_rate\" else item\n            depth = hyperparameters[\"depth\"][best_index[\"depth\"]] if key != \"depth\" else item\n            print(\"Training with iterations: %d learning_rate: %.2f depth:%d\"%(iterations, learning_rate, depth))\n            cat = catboost.CatBoostRegressor(\n                iterations = iterations, \n                learning_rate = learning_rate,\n                depth = depth\n            )\n            cat.fit(X_train, y_train, verbose=False)\n            result = evaluate(cat, X_val, y_val)\n            score = result[\"rmlse\"]\n            if score < temp_best:\n                temp_best = score\n                best_index[key] = key_index\n                best_parameter = item\n            if score < best_score:\n                best_score = score\n                best_cat = cat\n        print(\"Best Parameter for %s: \"%(key), best_parameter)\n    best_parameters = {\n        \"iterations\": hyperparameters[\"iterations\"][best_index[\"iterations\"]],\n        \"learning_rate\": hyperparameters[\"learning_rate\"][best_index[\"learning_rate\"]],\n        \"depth\": hyperparameters[\"depth\"][best_index[\"depth\"]]\n    }\n    return best_cat, best_score, best_parameters\nbest_cat, best_score, best_parameters = train_with_catboost(parameters, train_features, val_features, train_targets, val_targets)\nprint(\"Best RMLSE: \", best_score)\nprint(\"Best Parameters: \", best_parameters)\nelapsed = time.time() - begin \nprint(\"Elapsed time: \", elapsed)\nsubmit(best_cat, test_features, test_ids, \"submission_cat.csv\")","c3841b92":"from sklearn.model_selection import KFold\nX = pd.concat([train_features, val_features])\ny = pd.concat([train_targets, val_targets])\nfold = 1\nfor train_indices, valid_indices in KFold(n_splits=5, shuffle=True).split(X):\n    print(\"Training with Fold %d\" % (fold))\n    X_train = X.iloc[train_indices]\n    X_val = X.iloc[valid_indices]\n    y_train = y.iloc[train_indices]\n    y_val = y.iloc[valid_indices]\n    cat = catboost.CatBoostRegressor(\n        iterations = best_parameters[\"iterations\"], \n        learning_rate = best_parameters[\"learning_rate\"],\n        depth = best_parameters[\"depth\"]\n    )\n    cat.fit(X_train, y_train, verbose=False)\n    evaluate(cat, X_val, y_val)\n    submit(cat, test_features, test_ids, \"submission_cat_fold%d.csv\"%(fold))\n    fold += 1","dbb18ca3":"cat = catboost.CatBoostRegressor(\n    iterations = best_parameters[\"iterations\"], \n    learning_rate = best_parameters[\"learning_rate\"],\n    depth = best_parameters[\"depth\"]\n)\ncat.fit(X, y, verbose=False)\nsubmit(cat, test_features, test_ids, \"submission_cat_all_dataset.csv\")","913f3584":"\u5bf9\u623f\u4ef7\u5f71\u54cd\u6700\u5927\u7684\u76f8\u5173\u56e0\u7d20","94c0f118":"\u63a2\u7d22\u6027\u6570\u636e\u5206\u6790\u4e0e\u6570\u636e\u9884\u5904\u7406","f50f2b62":"\u8bad\u7ec3\u9a8c\u8bc1\uff1a\u8ba1\u7b97\u76f8\u5173\u7279\u5f81","fa8ff14a":"\u6a21\u578b\u5f00\u53d1\u4e0e\u8bc4\u4f30\n\n\u8d85\u53c2\u6570\u8c03\u8c10","62868a71":"Correlation scores \u76f8\u5173\u5206\u6570","4156243f":"\u7f3a\u5931\u503c\u63d2\u8865\n\n\u5bf9\u4e8e\u6570\u503c\u5217\uff0c\u6211\u5c06\u7528\u5b83\u4eec\u7684\u5e73\u5747\u503c\u66ff\u6362\u7f3a\u5c11\u7684\u503c\u3002\n\n\u5bf9\u4e8e\u5206\u7c7b\u5217\uff0c\u6211\u5c06\u7528\u672a\u77e5\u7c7b\u522b\u66ff\u6362\u7f3a\u5c11\u7684\u503c\u3002","22330026":"Statistic infos \u7edf\u8ba1\u4fe1\u606f","2df1633c":"Import Packages\n\nImport Datasets \u5bfc\u5165\u6570\u636e\u96c6","fb31682c":"\u5c06\u5206\u7c7b\u8981\u7d20\u8f6c\u6362\u4e3a\u6570\u5b57\u8981\u7d20","eac28fa7":"Submission","1b655007":"\u9a8c\u8bc1\u62c6\u5206","32bf0a44":"\u7279\u5f81\u7f29\u653e","67c7009f":"\u57fa\u4e8eK-Fold\u7b97\u6cd5\u7684\u6a21\u578b\u8bad\u7ec3","0b3ba7ff":"Common Functions Evaluation Function\n\n\u8bc4\u4ef7\u51fd\u6570","10a62d8b":"\u5747\u65b9\u6839\u5bf9\u6570\u8bef\u5dee"}}