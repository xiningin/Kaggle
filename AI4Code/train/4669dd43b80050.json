{"cell_type":{"9ef19cfb":"code","d7ec16df":"code","889924b3":"code","3b747135":"code","b1b6fd95":"code","9772d123":"code","c1fb888a":"code","5604b6c8":"code","fc39dc37":"code","338fd1a0":"code","eee57a9a":"code","d7d79c1c":"code","7bd6a63e":"code","b988d595":"code","f79b49ac":"code","532f2280":"markdown","b7b01b95":"markdown","ae78746c":"markdown","db7036e5":"markdown","a8926426":"markdown","8a166cc4":"markdown"},"source":{"9ef19cfb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d7ec16df":"import warnings\nwarnings.filterwarnings('ignore')\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\npd.set_option(\"display.max_columns\", 80)","889924b3":"bike = pd.read_csv('\/kaggle\/input\/bike-sharing-dataset\/day.csv')","3b747135":"bike.head()","b1b6fd95":"bike.shape","9772d123":"bike.isnull().sum()","c1fb888a":"bike.rename(columns={'holiday':'is_holiday',\n                        'workingday':'is_workingday',\n                        'weathersit':'weather_condition',\n                        'hum':'humidity',\n                        'mnth':'month',\n                        'cnt':'count',\n                        'yr':'year'},inplace=True)","5604b6c8":"bike.info()","fc39dc37":"bike['month'] = bike['month'].map({1:\"Jan\", 2:\"Feb\", 3:\"Mar\", 4:\"Apr\", 5:\"May\", 6:\"Jun\", 7:\"Jul\", 8:\"Aug\", \n                                   9:\"Sep\", 10:\"Oct\", 11:\"Nov\", 12:\"Dec\"})\n\nbike['weather_condition'] = bike['weather_condition'].map({1:\"Clear\", 2:\"Cloudy\", 3:\"Light Rain\", 4:\"Heavy Rain\"})\n\nbike['season'] = bike['season'].map({1:\"spring\", 2:\"summer\", 3:\"fall\", 4:\"winter\"})\n\ndmap = {1:'Mon',2:'Tue',3:'Wed',4:'Thu',5:'Fri',6:'Sat',0:'Sun'}\nbike['weekday'].astype('object')\nbike['weekday'] = bike['weekday'].map(dmap)\n\n","338fd1a0":"figure, ((ax1, ax2, ax3, ax4), (ax5, ax6, ax7, ax8)) = plt.subplots(nrows=2, ncols=4)\nfigure.set_size_inches(20, 10)\n\nsns.boxplot(data=bike, y='count', ax=ax1)\nsns.boxplot(data=bike, x='year', y='count', ax=ax2)\nsns.boxplot(data=bike, x='month', y='count', ax=ax3)\nsns.boxplot(data=bike, x='weekday', y='count', ax=ax4)\nsns.boxplot(data=bike, x='season', y='count', ax=ax5)\nsns.boxplot(data=bike, x='is_holiday', y='count', ax=ax6)\nsns.boxplot(data=bike, x='is_workingday', y='count', ax=ax7)\nsns.boxplot(data=bike, x='weather_condition', y='count', ax=ax8)\n","eee57a9a":"categorical_cols = ['year', 'month', 'weekday', 'season', 'is_holiday', 'is_workingday', 'weather_condition']\nplt.figure(figsize = (20, 10))\n\nfor i in enumerate(categorical_cols):\n    plt.subplot(2, 4, i[0]+1)\n    plt.tight_layout(pad=0.5)\n    sns.boxplot(x = i[1], y= 'count', data = bike)","d7d79c1c":"bike.drop(columns=['instant', 'dteday', 'temp', 'casual', 'registered'], inplace=True)","7bd6a63e":"\nplt.figure(figsize = (15, 5))\n\ncontinuous_cols = ['atemp', 'humidity', 'windspeed']\nfor i in enumerate(continuous_cols):\n    plt.title('Correlation between continuous variable & count')\n    plt.subplot(1, 3, i[0]+1)\n    plt.tight_layout(pad=0.5)\n    sns.regplot(x=i[1], y='count', data=bike)","b988d595":"import seaborn as sns\n\nsns.pairplot(data=bike, x_vars=['atemp', 'humidity', 'windspeed'], y_vars=['count'])","f79b49ac":"corr = bike[['atemp', 'humidity', 'windspeed', 'count']].corr()\nsns.heatmap(data=corr,\n           vmax=1.0,\n           vmin=-1.0,\n           annot=True)","532f2280":"Plotting the features compared to the count","b7b01b95":"From the above plots, it seems that atemp is positively correlated with count.\nHowever, the humidity and windspeed have slightly negative co-relation.","ae78746c":"Converting the column values to meaninful data","db7036e5":"Check NULL in the datasets","a8926426":"Renaming the columns to meaningful","8a166cc4":"Now remove the redundant features below and the reason to drop them.\n\ninstant- This is just a index for each observation.\n\ndteday - This represnt the date on which the observation is recorded. But it can be deduced using other featrues, ie, year, mont and weekday.\n\ntemp - It is the actual temperature of a particular day. We have atemp column which also tells about the feels-like temperature of that day.Both are highly correlated, as shown in the plot above. So I will keep atemp and drop temp.\n\nAlso drop casual and registered feature as these are kind of target variable because cnt = casual + registered."}}