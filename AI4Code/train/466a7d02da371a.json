{"cell_type":{"e2182721":"code","04351a47":"code","d47c494e":"code","9e214834":"code","18884ca1":"code","5f515fb2":"code","78200b73":"code","9382ffdf":"code","8395760e":"code","9b39669c":"markdown","4f67fd46":"markdown","ad3a2643":"markdown","ab0cf941":"markdown","5e07548d":"markdown"},"source":{"e2182721":"import numpy as np\nfrom scipy.spatial.distance import pdist, squareform\nfrom matplotlib import pyplot as plt\nfrom matplotlib.collections import LineCollection\nfrom math import sqrt\nimport random\n\nrandom.seed(1)\nnp.random.seed(1)\n\nN = 9\nX = np.random.rand(N,2)\nk = N-1","04351a47":"X_temp = np.copy(X)\nnum_lines = len(X_temp)-1\n\nlines = []\npoints = []\ndistance = []\n\nfor i in range(0, N-1):\n    distance.append(sqrt(((X_temp[i+1][0]-X_temp[0][0])**2)+((X_temp[i+1][1]-X_temp[0][1])**2)))\n    \n    # Store line coordinates\n    lines.append([X_temp[i][0], X_temp[i][1]])\n    lines.append([X_temp[i+1][0], X_temp[i+1][1]])\n    \nrandom_result = sum(distance)","d47c494e":"arr = np.asarray(lines)\n\n#line = LineCollection(X[0],X[1], color='black')\n\n# create line artists\nlines2 = LineCollection(arr.reshape((k, 2, 2)), color='black')\n\nfig, ax = plt.subplots(1,1,figsize = (8, 8))\nax.scatter(X[:,0], X[:,1], c = 'black')\n# ax.add_artist(LineCollection(np.array([X[0],X[1]]).reshape((1, 2, 2))))\nax.add_artist(lines2)\nplt.title(\"Random Route Distance = %1.3f\" % random_result, fontsize=25) \n\nplt.show()","9e214834":"X_temp = np.copy(X)\nnum_lines = len(X_temp)-1\n\nlines = []\npoints = []\nNN = []\n\n# For animation\nroute_frames = []\ntitle_frame = []\n\ni = 0\n\nwhile i < num_lines:\n    \n    for ii in range(0, len(X_temp)-1):\n        points.append(sqrt(((X_temp[ii+1][0]-X_temp[0][0])**2)+((X_temp[ii+1][1]-X_temp[0][1])**2)))\n            \n    NN.append(min(points))\n    \n    # copy element\n    move = X_temp[points.index(min(points))+1]\n    \n    # Store line coordinates\n    lines.append([X_temp[0][0], X_temp[0][1]])\n    lines.append([X_temp[points.index(min(points))+1][0], X_temp[points.index(min(points))+1][1]])\n    \n    # delete element\n    X_temp = np.delete(X_temp, points.index(min(points))+1, 0)\n    \n    # Delete first element\n    X_temp = np.delete(X_temp, 0, 0)\n    \n    # insert element\n    X_temp = np.insert(X_temp, 0, move,  axis=0)\n    \n    points = []\n        \n    i += 1\n    \nNN_result = sum(NN)","18884ca1":"arr = np.asarray(lines)\n\n#line = LineCollection(X[0],X[1], color='black')\n\n# create line artists\nlines2 = LineCollection(arr.reshape((k, 2, 2)), color='black')\n\nfig, ax = plt.subplots(1,1,figsize = (8, 8))\nax.scatter(X[:,0], X[:,1], c = 'black')\n# ax.add_artist(LineCollection(np.array([X[0],X[1]]).reshape((1, 2, 2))))\nax.add_artist(lines2)\nplt.title(\"Nearest Neighbor Distance =%1.3f\" % NN_result, fontsize=25)\n\nplt.show()","5f515fb2":"X_temp = np.copy(X)\nnum_lines = len(X_temp)-1\n\nlines = []\ndistance = []\n\nMCM_result = 999999999\n\nwhile MCM_result > NN_result:\n    np.random.shuffle(X_temp[1:,])\n    distance = []\n    lines = []\n    points = []\n    \n    for i in range(0, N-1):\n        distance.append(sqrt(((X_temp[i+1][0]-X_temp[i][0])**2)+((X_temp[i+1][1]-X_temp[i][1])**2)))\n\n        # Save point order\n        points.append([X_temp[i][0], X_temp[i][1]])\n        \n        # Store line coordinates\n        lines.append([X_temp[i][0], X_temp[i][1]])\n        lines.append([X_temp[i+1][0], X_temp[i+1][1]])\n    \n    # Save last point\n    points.append([X_temp[i+1][0], X_temp[i+1][1]])\n    \n    initial_GA_points = points\n        \n    MCM_result = sum(distance)","78200b73":"arr = np.asarray(lines)\n\n#line = LineCollection(X[0],X[1], color='black')\n\n# create line artists\nlines2 = LineCollection(arr.reshape((k, 2, 2)), color='black')\n\nfig, ax = plt.subplots(1,1,figsize = (8, 8))\nax.scatter(X[:,0], X[:,1], c = 'black')\n# ax.add_artist(LineCollection(np.array([X[0],X[1]]).reshape((1, 2, 2))))\nax.add_artist(lines2)\nplt.title(\"Brute Force Distance =%1.3f\" % MCM_result, fontsize=25)\n\nplt.show()","9382ffdf":"def draw(points):\n    \n    lines = []\n    \n    for i in range(0, N-1):\n     \n        # Store line coordinates\n        lines.append([points[i][0], points[i][1]])\n        lines.append([points[i+1][0], points[i+1][1]])\n        \n    arr = np.asarray(lines)\n\n    # create line artists\n    lines2 = LineCollection(arr.reshape((k, 2, 2)), color='black')\n\n    fig, ax = plt.subplots(1,1,figsize = (8, 8))\n    ax.scatter(X[:,0], X[:,1], c = 'black')\n    ax.add_artist(lines2)\n    plt.title(\"Genetic Algorithm Distance =%1.3f\" % GA_result, fontsize=25)\n\n    plt.show()\n    \n#################### Genetic Algorithm\n\n#points = initial_GA_points\n\nGA_distance = []\n\nfor i in range(0, len(points)-1):\n    GA_distance.append(sqrt(((points[i+1][0]-points[i][0])**2)+((points[i+1][1]-points[i][1])**2)))\n    \nGA_result = sum(GA_distance)\n\ndraw(points)\n        \nwhile MCM_result <= GA_result:\n    \n    x1,x2 = random.sample(range(1, N-1), 2)\n\n    restore = points\n\n    copy = points[x1]\n    points[x1]=points[x2]\n    points[x2]=copy\n    points\n    \n    for i in range(0, len(points)-1):\n        GA_distance.append(sqrt(((points[i+1][0]-points[i][0])**2)+((points[i+1][1]-points[i][1])**2)))\n    \n    new_GA_result = sum(GA_distance)\n        \n    if new_GA_result < GA_result:\n        GA_result = new_GA_result\n        #print(GA_result)\n        draw(points)\n        \n    else:\n        points = restore\n        #print(GA_result)\n\n    GA_distance = []","8395760e":"print('random_result:', random_result, '\\n',\n      'NN_result:', NN_result, '\\n',\n      'MCM_result:', MCM_result, '\\n',\n      'GA_result:', GA_result)","9b39669c":"# Brute Force Method (Random)","4f67fd46":"# Performance Comparison","ad3a2643":"# Genetic Algorithm","ab0cf941":"# Nearest Neighbor","5e07548d":"# Random Route (Dumbest Route)"}}