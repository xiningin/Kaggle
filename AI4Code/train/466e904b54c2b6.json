{"cell_type":{"4f993c00":"code","2251b27d":"code","9d525931":"code","3836636c":"code","aa1aea94":"code","5eb442b3":"code","c1379ce3":"code","cb903dff":"code","0aa7640b":"code","688ff763":"code","7b69d29f":"code","e94b3e1e":"code","6e80550b":"code","0f87410f":"code","cbdcbb39":"code","f4125b51":"code","7a4c2629":"code","83ca06d2":"code","0ba14d2c":"markdown","da5f0716":"markdown","11f94f2a":"markdown","da7eaa13":"markdown","8d82cfcf":"markdown"},"source":{"4f993c00":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport tensorflow as tf\nimport sklearn \nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2251b27d":"train = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\nprint(train.shape)\ntrain.head()","9d525931":"test= pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\nprint(test.shape)\ntest.head()","3836636c":"Y_train = train[\"label\"]\nX_train = train.drop(labels = [\"label\"],axis = 1) ","aa1aea94":"# Normalize the data\nX_train = X_train \/ 255.0\ntest = test \/ 255.0\nprint(\"x_train shape: \",X_train.shape)\nprint(\"test shape: \",test.shape)","5eb442b3":"# Reshape\nX_train = X_train.values.reshape(-1,28,28, 1)\ntest = test.values.reshape(-1,28,28, 1)\nprint(\"x_train shape: \",X_train.shape)\nprint(\"test shape: \",test.shape)","c1379ce3":"%matplotlib inline\n\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nfrom random import sample\n\ndef show_some_images(source, titles, s):\n    random_indexes = sample(range(1, 3500), 16)\n    print(random_indexes)\n\n    # Parameters for our graph; we'll output images in a 4x4 configuration\n    nrows = 4\n    ncols = 4\n\n    # Index for iterating over images\n\n\n    # Set up matplotlib fig, and size it to fit 4x4 pics\n    fig = plt.gcf()\n    fig.set_size_inches(ncols * 4, nrows * 4)\n\n\n\n    for i, img_index in enumerate(random_indexes):\n      # Set up subplot; subplot indices start at 1\n      sp = plt.subplot(nrows, ncols, i + 1)\n      sp.set_title(\"The \" + s + \" Value is \" + str(np.argmax(titles[img_index])))\n      sp.axis('Off') # Don't show axes (or gridlines)\n      img = source[img_index]\n      img = img.reshape((28, 28))\n\n      plt.imshow(img)\n\n\n    plt.show()","cb903dff":"show_some_images(X_train, Y_train, \"Actual\")","0aa7640b":"# Label Encoding \nfrom tensorflow.keras.utils import to_categorical # convert to one-hot-encoding\nY_train = to_categorical(Y_train, num_classes = 10)\nprint(Y_train[0])","688ff763":"import keras_preprocessing\ntraining_datagen = keras_preprocessing.image.ImageDataGenerator(\n      rotation_range=40,\n      width_shift_range=0.2,\n      height_shift_range=0.2,\n      shear_range=0.2,\n      zoom_range=0.2,\n      horizontal_flip=True,\n      fill_mode='nearest')\n\ntraining_datagen.fit(X_train)","7b69d29f":"X_train.shape[1:]","e94b3e1e":"def get_base_model():\n    model = tf.keras.models.Sequential([\n          tf.keras.layers.Conv2D(64, (3,3), activation='relu', input_shape=(28, 28, 1)),\n          tf.keras.layers.MaxPooling2D(2, 2),\n        \n          tf.keras.layers.Conv2D(128, (3,3), activation='relu'),\n          tf.keras.layers.MaxPooling2D(2, 2),\n          tf.keras.layers.Dropout(0.2),\n\n          tf.keras.layers.Conv2D(128, (3,3), activation='relu'),\n          tf.keras.layers.MaxPooling2D(2, 2),\n        \n          tf.keras.layers.Flatten(),\n          tf.keras.layers.Dense(512, activation='relu'),\n          tf.keras.layers.Dense(10, activation='softmax')\n    ])\n    \n    print(model.summary())\n    \n    return model","6e80550b":"model = get_base_model()\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","0f87410f":"epochs=20\nbatch_size=32\nhistory = model.fit(X_train, Y_train,\n                              epochs = epochs, verbose = 1, steps_per_epoch=X_train.shape[0] \/\/ batch_size)","cbdcbb39":"predictions = model.predict(test)\npredictions_numbers = np.argmax(predictions, axis=1)\npredictions_numbers","f4125b51":"show_some_images(test, predictions, \"Predicted\")","7a4c2629":"imageIds = np.arange(1,28001)\noutput = pd.DataFrame({'ImageId':imageIds, 'Label':predictions_numbers})\noutput.to_csv('output.csv', index=False)\nprint(output)","83ca06d2":"submission = pd.read_csv('\/kaggle\/input\/digit-recognizer\/sample_submission.csv')\nsubmission.head()","0ba14d2c":"Converted to categorical array","da5f0716":"## Data Augmentation","11f94f2a":"**Just a simple implementation of a neural network**","da7eaa13":"### LETS SEE SOME PREDICTIONS","8d82cfcf":"## Show Some Data"}}