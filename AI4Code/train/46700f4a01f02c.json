{"cell_type":{"35a97b3c":"code","ef569e71":"code","0c32a07b":"code","94d23081":"code","e107d6cb":"code","0f0271d2":"code","4f423790":"code","6ce33aed":"code","0faa9cb4":"code","229989eb":"code","a605d447":"code","2ce4f053":"code","c9597cc7":"code","8d48d9e3":"code","35715eb7":"code","c41aa5fc":"code","248b5508":"code","cbb36f78":"code","0c36e88a":"code","c13fcfc0":"code","6dcb86e6":"code","358e93e0":"code","03c31448":"code","165c4a9d":"code","6715f154":"code","fbc99904":"code","e95ec613":"code","b5ee6d3e":"code","8f7fa68f":"code","bc5d4407":"code","04bdb57a":"code","47127e44":"code","b3bb655c":"code","2f12a827":"code","0a041003":"code","72041cdf":"code","5bfa80bf":"code","b52f1cd3":"code","41843b22":"code","170ee464":"code","bf238e00":"code","d6e7a499":"code","8c2adc89":"code","b9cf0c0e":"code","4f66c47e":"code","c788c8c6":"code","d2f04f89":"code","99140dd5":"code","99ef4675":"code","b6ba9056":"code","9d996b4f":"code","fca159d4":"code","edc2e241":"code","b1d0c18a":"code","5f4159a4":"code","6586e8d3":"code","b6f0a62a":"code","de249810":"code","bba61784":"code","b198f2ad":"code","a557d7d6":"code","587b7d76":"code","aa4c2e0d":"code","d5ac4def":"code","0e07e177":"code","4bc58fc1":"code","5de93f5b":"code","91f45b1a":"code","037dc380":"code","f169e76d":"code","2ea5e3b6":"code","556a07e3":"code","11d3815a":"code","f2cadf75":"code","636afc33":"code","50bf03f1":"code","275cf9a6":"code","493a889e":"code","e1c3147b":"code","37adcfb2":"code","cf6ede53":"code","6731766a":"code","83052b9c":"code","ffef9354":"code","05886808":"code","7ad1b55e":"code","c3ccfa69":"code","fffb0b99":"code","028f3979":"code","e41eca18":"code","3d933861":"code","3f89dc35":"code","549fa70c":"code","64c614c1":"code","e1093fa7":"code","0c62cc6b":"code","dfaec436":"code","232d57be":"code","c2a55fdb":"code","b4ed3012":"code","a03ba205":"code","d5475111":"code","e722aedf":"code","0fdc9168":"code","1e933c6b":"code","2ac62363":"code","8031356d":"code","d7a8fcef":"code","f1a1761b":"code","627a3e28":"code","abe7fc64":"code","6287c8ec":"code","8fa564ba":"code","745f35ee":"code","486dc9ab":"code","f24bef30":"code","c068956e":"code","83365378":"code","48f036b4":"code","d7c04423":"code","46ee3518":"code","d4ad472e":"code","53af0347":"code","12e6e7b7":"code","1a3deedd":"code","3ed5f22d":"code","d5df817a":"code","90ba1cbc":"code","62073cfe":"code","bee0124e":"code","2ad98ad7":"code","74b163c1":"code","468dd709":"code","1eef8b6b":"code","8ff3f91d":"markdown","c9d72f8a":"markdown","3f2914c3":"markdown","0f1d0b21":"markdown","cef2aef3":"markdown","30b6ebca":"markdown","77967e9c":"markdown","a7edc93b":"markdown","f0d6db33":"markdown","3f9c0271":"markdown","ead0d4e5":"markdown","74e3be64":"markdown","a98b6e02":"markdown","4d9388c9":"markdown","25f074f6":"markdown","b954f04b":"markdown","088b08a8":"markdown","0e2713b0":"markdown","e3782063":"markdown","4eb20c1c":"markdown","9072aea0":"markdown","5e449e92":"markdown","fd41fe6f":"markdown","cf0d2f7a":"markdown"},"source":{"35a97b3c":"!pip install lime\n!pip install shap\n!pip install imblearn\n!pip install pydotplus\n!pip install IPython\n!pip install openpyxl","ef569e71":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport scipy.stats as s\nimport matplotlib.pyplot as plt\n#sns.set(style = 'whitegrid')\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.metrics import classification_report\n\nfrom sklearn.feature_selection import RFE\nfrom mlxtend.feature_selection import SequentialFeatureSelector as sfs\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.preprocessing import StandardScaler\n\nimport statsmodels.api as sm\n\nfrom sklearn.metrics import confusion_matrix,precision_score,f1_score,cohen_kappa_score,accuracy_score\n\nfrom sklearn.tree import DecisionTreeClassifier,export_graphviz\nfrom sklearn.metrics import plot_confusion_matrix,plot_roc_curve,roc_auc_score,roc_curve\n\nfrom sklearn.ensemble import RandomForestClassifier,AdaBoostClassifier,StackingClassifier\n\nfrom xgboost import XGBClassifier\n\nimport pydotplus\n\nfrom IPython.display import Image\n\nimport os\n#os.environ[\"PATH\"] += os.pathsep + 'C:\\Users\\Lenovo\\anaconda3\\Library\\bin'\n\nfrom sklearn.model_selection import GridSearchCV,RandomizedSearchCV, cross_val_score\n\nimport lime\nfrom lime import lime_tabular\n\n#import shap\n\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor","0c32a07b":"data = pd.read_excel('..\/input\/store-data\/storedata_total.xlsx')\ndata.head()","94d23081":"data.info()","e107d6cb":"data.describe()","0f0271d2":"data.isnull().sum()","4f423790":"plt.figure(figsize=(15,10))\nsns.heatmap(data.isnull(),cmap='binary',cbar=False,yticklabels=False);","6ce33aed":"data.fillna(method='bfill',inplace=True)","0faa9cb4":"data.isnull().sum()","229989eb":"first_ord = []\nfor i in range(0,len(data)):\n    if i in data[(data.firstorder == '1\/0\/00')].index:\n        first_ord.append(data.created[i])\n    else:\n        first_ord.append(data.firstorder[i])\ndata['firstorder'] = first_ord\n\nlast_ord = []\nfor i in range(0,len(data)):\n    if i in data[data.lastorder == '1\/0\/00'].index:\n        last_ord.append(data.firstorder[i])\n    else:\n        last_ord.append(data.lastorder[i])\ndata['lastorder'] = last_ord","a605d447":"data = pd.read_excel('..\/input\/cleaned-data\/Store_Data_after_EDA.xlsx')\n\n#data = data.drop(columns=['Unnamed: 0', 'index'],axis=1)\ndata.head()","2ce4f053":"data.retained.value_counts().plot(kind='bar')\nplt.show()","c9597cc7":"# The data is imbalanced.","8d48d9e3":"data['firstorder']= data.firstorder.astype('datetime64')\ndata['lastorder'] = data.lastorder.astype('datetime64')","35715eb7":"data.describe()","c41aa5fc":"data.info()","248b5508":"data.hist(bins=20,figsize=(15,10))\nplt.show()","cbb36f78":"data['create_first'] = data.firstorder - data.created\ndata['create_first'] = data['create_first']\/np.timedelta64(1,'D')\ndata['first_last'] = data.lastorder - data.firstorder\ndata['first_last'] = data['first_last']\/np.timedelta64(1,'D')","0c36e88a":"data.describe()","c13fcfc0":"data = data.drop(['ordfreq','custid'],axis=1)","6dcb86e6":"data = data.drop(['firstorder','lastorder','created'],axis=1)","358e93e0":"data.head()","03c31448":"inp = data.drop('retained',axis=1)\nout = data.retained\nfrom sklearn.model_selection import train_test_split\nxtrain,xtest,ytrain,ytest = train_test_split(inp,out,test_size=0.3,random_state=12)","165c4a9d":"plt.figure(figsize=(15,10))\nplt.subplot(2,3,1)\nsns.kdeplot(xtrain.esent,color='red');\nplt.subplot(2,3,2)\nsns.kdeplot(data.eclickrate,color='green')\nplt.subplot(2,3,3)\nsns.kdeplot(data.avgorder,color='black')\nplt.subplot(2,3,4)\nsns.kdeplot(data.eopenrate,color='blue')\nplt.show()","6715f154":"plt.figure(figsize=(15,10))\nplt.subplot(2,3,1)\nsns.boxplot(x = data.esent,color='red');\nplt.subplot(2,3,2)\nsns.boxplot(x = data.eclickrate,color='green')\nplt.subplot(2,3,3)\nsns.boxplot(x = data.avgorder,color='pink')\nplt.subplot(2,3,4)\nsns.boxplot(data.eopenrate,color='blue')\nplt.show()","fbc99904":"def impute(x):\n    for i in x.columns:\n        iqr = 1.5*(x[i].quantile(0.75) - x[i].quantile(0.25))\n        ul = x[i].quantile(0.75) + iqr\n        ll = x[i].quantile(0.25) - iqr\n        temp = []\n        for j in x[i].index:\n            if x[i][j] > ul or x[i][j] < ll :\n                temp.append(np.median(x[i]))\n            elif x[i][j] < 0:\n                temp.append(0)\n            else:\n                temp.append(x[i][j])\n        x[i]= temp\n    return x","e95ec613":"xtrain[['esent','eclickrate','avgorder','eopenrate']] = impute(xtrain[['esent','eclickrate','avgorder','eopenrate']])\nxtest[['esent','eclickrate','avgorder','eopenrate']] = impute(xtest[['esent','eclickrate','avgorder','eopenrate']])","b5ee6d3e":"plt.figure(figsize=(15,10))\nplt.subplot(2,3,1)\nsns.boxplot(x = xtrain.esent,color='red');\nplt.subplot(2,3,2)\nsns.boxplot(x = xtrain.eclickrate,color='green',whis=6)\nplt.subplot(2,3,3)\nsns.boxplot(x = xtrain.avgorder,color='pink',whis=3)\nplt.subplot(2,3,4)\nsns.boxplot(xtrain.eopenrate,color='blue')\nplt.show()","8f7fa68f":"plt.figure(figsize=(15,10))\nplt.subplot(2,3,1)\nsns.kdeplot(xtrain.esent,color='red');\nplt.subplot(2,3,2)\nsns.kdeplot(xtrain.eclickrate,color='green')\nplt.subplot(2,3,3)\nsns.kdeplot(xtrain.avgorder,color='black')\n#plt.subplot(2,3,4)\n#sns.kdeplot(xtrain.ordfreq,color='orange')\nplt.subplot(2,3,4)\nsns.kdeplot(xtrain.eopenrate,color='blue')\nplt.show()","bc5d4407":"xtrain.describe()","04bdb57a":"sns.scatterplot(x = data.create_first, y = data.retained)","47127e44":"sns.scatterplot(x = data.first_last, y = data.retained)","b3bb655c":"plt.figure(figsize=(15,7))\nsns.countplot(x = data.favday)\nplt.show()","2f12a827":"pd.crosstab(index=data.city,columns=data.retained).plot(kind='bar',figsize=(15,8))","0a041003":"plt.figure(figsize=(15,7))\nsns.countplot(x = data.city)\nplt.show()","72041cdf":"plt.figure(figsize=(15,7))\nsns.scatterplot(x= data.esent, y = data.eopenrate, hue= data.retained)\nplt.show()","5bfa80bf":"plt.figure(figsize=(15,7))\nsns.scatterplot(x= data.esent, y = data.eclickrate, hue= data.retained)\nplt.show()","b52f1cd3":"plt.figure(figsize=(15,7))\nsns.scatterplot(x= data.eclickrate, y = data.eopenrate, hue= data.retained)\nplt.show()","41843b22":"plt.figure(figsize=(15,10))\nsns.heatmap(data.corr(),annot=True,annot_kws={'size':20}, cmap = 'gist_earth');","170ee464":"xtrain.head()","bf238e00":"xtest.head()","d6e7a499":"xtrain['avgorder'] = s.boxcox(xtrain.avgorder+1)[0]\nxtrain['esent'] = s.boxcox(xtrain.esent+1)[0]\nxtrain['eopenrate'] = s.boxcox(xtrain.eopenrate+1)[0]\nxtrain['eclickrate'] = s.boxcox(xtrain.eclickrate+1)[0]\nxtrain['create_first'] = s.boxcox(abs(xtrain.create_first)+1)[0]\nxtrain['first_last'] = s.boxcox(xtrain.first_last+5)[0]","8c2adc89":"xtrain.head()","b9cf0c0e":"xtest['avgorder'] = s.boxcox(xtest.avgorder+1)[0]\nxtest['esent'] = s.boxcox(xtest.esent+1)[0]\nxtest['eopenrate'] = s.boxcox(xtest.eopenrate+1)[0]\nxtest['eclickrate'] = s.boxcox(xtest.eclickrate+1)[0]\nxtest['create_first'] = s.boxcox(abs(xtest.create_first)+1)[0]\nxtest['first_last'] = s.boxcox(xtest.first_last+5)[0]","4f66c47e":"xtest.head()","c788c8c6":"xtest.describe()","d2f04f89":"xtrain.describe()","99140dd5":"SS = StandardScaler()","99ef4675":"a = SS.fit_transform(xtrain[['eclickrate','eopenrate','eclickrate','avgorder','esent','create_first','first_last']])","b6ba9056":"xtrain['eclickrate'] = a[:,0]\nxtrain['eopenrate'] = a[:,1]\nxtrain['eclickrate'] = a[:,2]\nxtrain['avgorder'] = a[:,3]\nxtrain['esent'] = a[:,4]\nxtrain['create_first'] = a[:,5]\nxtrain['first_last'] = a[:,6]","9d996b4f":"xtrain.head()","fca159d4":"b = SS.transform(xtest[['eclickrate','eopenrate','eclickrate','avgorder','esent','create_first','first_last']])\nb","edc2e241":"xtest['eclickrate'] = b[:,0]\nxtest['eopenrate'] = b[:,1]\nxtest['eclickrate'] = b[:,2]\nxtest['avgorder'] = b[:,3]\nxtest['esent'] = b[:,4]\nxtest['create_first'] = b[:,5]\nxtest['first_last'] = b[:,6]","b1d0c18a":"xtest.head()","5f4159a4":"xtrain = pd.concat((xtrain.drop(columns=['city','favday'],axis=1),pd.get_dummies(xtrain[['favday','city']],drop_first=True)),\n                   axis=1)","6586e8d3":"xtrain.head()","b6f0a62a":"xtest.head()","de249810":"xtest = pd.concat((xtest.drop(columns=['city','favday'],axis=1),pd.get_dummies(xtest[['favday','city']],drop_first=True))\n                  ,axis=1)","bba61784":"xtest.head()","b198f2ad":"xtrain.to_csv('train.csv')","a557d7d6":"xtest.to_csv('test.csv')","587b7d76":"xtrain.shape","aa4c2e0d":"ytrain.shape","d5ac4def":"from imblearn.combine import SMOTEENN","0e07e177":"xtrain_bal,ytrain_bal = SMOTEENN().fit_resample(xtrain,ytrain)","4bc58fc1":"ytrain_bal.value_counts().plot(kind='bar')","5de93f5b":"print(xtrain_bal.shape)\nprint(ytrain_bal.shape)","91f45b1a":"log_reg = sm.Logit(ytrain_bal,xtrain_bal).fit()\nprint(log_reg.summary())","037dc380":"odds = pd.DataFrame((np.exp(log_reg.params)),index = xtrain.columns,columns=['ODDS'])\nodds","f169e76d":"ypred = log_reg.predict(xtest)\nypred = [1 if i > 0.5 else 0 for i in ypred]","2ea5e3b6":"print(classification_report(ytest,ypred))","556a07e3":"cp =classification_report(ytest,ypred).split()\ncp[5],cp[6],cp[7]","11d3815a":"metrics_df = pd.DataFrame([cp[5],cp[6],cp[7],round(accuracy_score(ytest,ypred),3),round(roc_auc_score(ytest,ypred),3)],\n                          index=['Churn_precision','Churn_recall','Churn_f1score','Accuracy','Roc_Auc_Score'],\n                         columns=['Base_model']).T\nmetrics_df","f2cadf75":"vif = [variance_inflation_factor(xtrain_bal.values,i) for i in range(xtrain_bal.shape[1])]","636afc33":"vif_df = pd.DataFrame({'Features':xtrain_bal.columns,'VIF':vif})\nvif_df.sort_values('VIF',ascending=False)","50bf03f1":"LR = LogisticRegression()","275cf9a6":"## RFE SElection\nrfe = RFE(estimator=LR).fit(xtrain_bal,ytrain_bal)\n\nfeature_ranking = pd.DataFrame([xtrain_bal.columns,rfe.ranking_],index=['Feature','Ranking']).T\nrfe_feat=feature_ranking[feature_ranking.Ranking==1]\nrfe_feat.Feature","493a889e":"feature_ranking.sort_values('Ranking').reset_index()","e1c3147b":"x = xtrain_bal[rfe_feat.Feature]\ny= ytrain_bal\n\nrfe_reg = sm.Logit(y,x).fit()\nprint(rfe_reg.summary())","37adcfb2":"rfe_ypred_test = rfe_reg.predict(xtest[rfe_feat.Feature])\nrfe_ypred_test = [1 if i > 0.5 else 0 for i in rfe_ypred_test]\ncm_1 = confusion_matrix(ytest,rfe_ypred_test)\nprint('Confusion Matrix:',cm_1)\nsns.heatmap(cm_1,annot=True,cbar=False,fmt='d');","cf6ede53":"print('RFE Feature selected Logistic Regression:')\nprint(classification_report(ytest,rfe_ypred_test))\nprint('Cohen Kappa Score:',round(cohen_kappa_score(ytest,rfe_ypred_test),2))\nprint('ROC AUC Score:',round(roc_auc_score(ytest,rfe_ypred_test),3))","6731766a":"# The model using rfe features selection gave best result than forward and backward selection techniques","83052b9c":"fpr,tpr,th = roc_curve(ytest,rfe_reg.predict(xtest[rfe_feat.Feature]))\nprint('ROC AUC Score:',round(roc_auc_score(ytest,rfe_ypred_test),3))\nplt.plot(fpr,tpr)\nplt.plot([0,1],[0,1],'r--')\nplt.show()","ffef9354":"log_rfe = LogisticRegression().fit(xtrain_bal[rfe_feat.Feature],ytrain_bal)","05886808":"lime_explainer = lime_tabular.LimeTabularExplainer(\n    training_data=np.array(xtrain[rfe_feat.Feature]),\n    feature_names=rfe_feat.Feature,\n    mode='classification'\n)\n\n\nlime_exp = lime_explainer.explain_instance(\n    data_row=xtest[rfe_feat.Feature].iloc[1],\n    predict_fn=log_rfe.predict_proba\n)\nlime_exp.show_in_notebook(show_table=True)","7ad1b55e":"cp = classification_report(ytest,rfe_ypred_test).split()\nmetrics_df1 = pd.DataFrame([cp[5],cp[6],cp[7],round(accuracy_score(ytest,rfe_ypred_test),3),round(roc_auc_score(ytest,rfe_ypred_test),3)],\n                          index=['Churn_precision','Churn_recall','Churn_f1score','Accuracy','Roc_Auc_Score'],\n                         columns=['Rfe_Features_model']).T\n\nmetrics_df2 = pd.concat([metrics_df,metrics_df1],axis=0)\nmetrics_df2","c3ccfa69":"dt = DecisionTreeClassifier()","fffb0b99":"params = {'max_depth':[3,4,5],\n    'min_samples_split':[2,3,4],\n    'min_samples_leaf':[1,2,3],\n    'max_leaf_nodes':[13,14,15]}\n\ndt_grid = GridSearchCV(dt,param_grid=params,scoring='accuracy',n_jobs=-1)\ndt_grid.fit(xtrain_bal,ytrain_bal)","028f3979":"dt_grid.best_params_","e41eca18":"tuned_mod = DecisionTreeClassifier(criterion= 'gini', max_depth =  4, max_leaf_nodes =  14, \n                                   min_samples_leaf =  1, min_samples_split =  2)","3d933861":"tuned_mod.fit(xtrain_bal,ytrain_bal)","3f89dc35":"ypred_tuned = tuned_mod.predict(xtest)","549fa70c":"feat_imp = pd.DataFrame({'Features':xtest.columns,'Importance':tuned_mod.feature_importances_}).sort_values('Importance',ascending=False)\nfeat_imp[feat_imp.Importance!=0]","64c614c1":"print('Decision Tree:')\nprint(classification_report(ytest,ypred_tuned))\nprint('Cohen Kappa Score:',round(cohen_kappa_score(ytest,ypred_tuned),3))\nprint('ROC AUC Score:',round(roc_auc_score(ytest,tuned_mod.predict_proba(xtest)[:,1]),2))","e1093fa7":"dot = export_graphviz(tuned_mod,feature_names=xtrain_bal.columns,class_names=['No','Yes'])\ngraph = pydotplus.graph_from_dot_data(dot)\nImage(graph.create_png())","0c62cc6b":"print('Cohen Kappa Score:',round(cohen_kappa_score(ytest,ypred_tuned),2))","dfaec436":"plot_roc_curve(estimator=tuned_mod,X= xtest,y= ytest)\nplt.plot([0,1],[0,1],'r--')\nplt.show()","232d57be":"lime_explainer = lime_tabular.LimeTabularExplainer(\n    training_data=np.array(xtrain_bal),\n    feature_names=xtrain.columns,\n    mode='classification'\n)\n\n\nlime_exp = lime_explainer.explain_instance(\n    data_row=xtest.iloc[1],\n    predict_fn=tuned_mod.predict_proba\n)\nlime_exp.show_in_notebook(show_table=True)","c2a55fdb":"cp = classification_report(ytest,ypred_tuned).split()\nmetrics_df3 = pd.DataFrame([cp[5],cp[6],cp[7],round(accuracy_score(ytest,ypred_tuned),3),round(roc_auc_score(ytest,ypred_tuned),3)],\n                          index=['Churn_precision','Churn_recall','Churn_f1score','Accuracy','Roc_Auc_Score'],\n                         columns=['Decision_Tree']).T\n\nmetrics_df2 = pd.concat([metrics_df2,metrics_df3],axis=0)\nmetrics_df2","b4ed3012":"rf = RandomForestClassifier(n_estimators=250)","a03ba205":"params = {'max_depth':np.arange(30,50,5)}","d5475111":"rf_grid = GridSearchCV(estimator=rf,param_grid=params,cv=5,n_jobs=-1)\nrf_grid.fit(xtrain_bal,ytrain_bal)","e722aedf":"rf_grid.best_params_","0fdc9168":"rf_tuned = RandomForestClassifier(n_estimators=250,max_depth=30).fit(xtrain_bal,ytrain_bal)","1e933c6b":"print('Random Forest:')\nrf_ypred = rf_tuned.predict(xtest)\nprint(classification_report(ytest,rf_ypred))\nprint(\"Cohen Kappa Score:\",round(cohen_kappa_score(rf_ypred,ytest),3))","2ac62363":"plot_roc_curve(estimator=rf_tuned, X = xtest, y = ytest)\nplt.plot([0,1],[0,1],'r--')\nplt.show()","8031356d":"lime_explainer = lime_tabular.LimeTabularExplainer(\n    training_data=np.array(xtrain_bal),\n    feature_names=xtrain.columns,\n    mode='classification'\n)\n\n\nlime_exp = lime_explainer.explain_instance(\n    data_row=xtest.iloc[1],\n    predict_fn=rf_tuned.predict_proba\n)\nlime_exp.show_in_notebook(show_table=True)","d7a8fcef":"cp = classification_report(ytest,rf_ypred).split()\nmetrics_df4 = pd.DataFrame([cp[5],cp[6],cp[7],round(accuracy_score(ytest,rf_ypred),3),round(roc_auc_score(ytest,rf_ypred),3)],\n                          index=['Churn_precision','Churn_recall','Churn_f1score','Accuracy','Roc_Auc_Score'],\n                         columns=['Random_Forest']).T\n\nmetrics_df2 = pd.concat([metrics_df2,metrics_df4],axis=0)\nmetrics_df2","f1a1761b":"adaboost = AdaBoostClassifier(base_estimator=DecisionTreeClassifier(),n_estimators=50)","627a3e28":"adaboost.fit(xtrain_bal,ytrain_bal)","abe7fc64":"ypred_prob = adaboost.predict_proba(xtest)[:,1]","6287c8ec":"ypred = adaboost.predict(xtest)\n","8fa564ba":"print('Adaboost:')\nprint(classification_report(ytest,ypred))\nprint('Cohen Kappa Score:',round(cohen_kappa_score(ytest,ypred),2))","745f35ee":"fpr,tpr,th = roc_curve(ytest,ypred_prob)","486dc9ab":"plot_roc_curve(estimator=adaboost,X=xtest,y=ytest)\nplt.plot([0,1],[0,1],'r--')\nplt.show()","f24bef30":"lime_explainer = lime_tabular.LimeTabularExplainer(\n    training_data=np.array(xtrain_bal),\n    feature_names=xtrain.columns,\n    mode='classification'\n)\n\n\nlime_exp = lime_explainer.explain_instance(\n    data_row=xtest.iloc[1],\n    predict_fn=adaboost.predict_proba\n)\nlime_exp.show_in_notebook(show_table=True)","c068956e":"cp = classification_report(ytest,ypred).split()\nmetrics_df5 = pd.DataFrame([cp[5],cp[6],cp[7],round(accuracy_score(ytest,ypred),3),round(roc_auc_score(ytest,ypred),3)],\n                          index=['Churn_precision','Churn_recall','Churn_f1score','Accuracy','Roc_Auc_Score'],\n                         columns=['AdaBoost']).T\n\nmetrics_df2 = pd.concat([metrics_df2,metrics_df5],axis=0)\nmetrics_df2","83365378":"xgb = XGBClassifier(gamma=1)","48f036b4":"xgb.fit(xtrain_bal,ytrain_bal)","d7c04423":"ypred =xgb.predict(xtest)\nypred_prob = xgb.predict_proba(xtest)[:,1]","46ee3518":"print('XG Boost')\nprint(classification_report(ytest,ypred))\nprint('COhen Kappa Score:',round(cohen_kappa_score(ytest,ypred),2))","d4ad472e":"fpr,tpr,th = roc_curve(ytest,ypred_prob)","53af0347":"plot_roc_curve(estimator=xgb,X=xtest,y=ytest)\nplt.plot([0,1],[0,1],'r--')\nplt.show()","12e6e7b7":"lime_explainer = lime_tabular.LimeTabularExplainer(\n    training_data=np.array(xtrain_bal),\n    feature_names=xtrain.columns,\n    mode='classification'\n)\n\n\nlime_exp = lime_explainer.explain_instance(\n    data_row=xtest.iloc[1],\n    predict_fn=xgb.predict_proba\n)\nlime_exp.show_in_notebook(show_table=True)","1a3deedd":"cp = classification_report(ytest,ypred).split()\nmetrics_df6 = pd.DataFrame([cp[5],cp[6],cp[7],round(accuracy_score(ytest,ypred),3),round(roc_auc_score(ytest,ypred),3)],\n                          index=['Churn_precision','Churn_recall','Churn_f1score','Accuracy','Roc_Auc_Score'],\n                         columns=['XGBoost']).T\n\nmetrics_df2 = pd.concat([metrics_df2,metrics_df6],axis=0)\nmetrics_df2","3ed5f22d":"base = [('dt',DecisionTreeClassifier()),('rf',RandomForestClassifier())]\nstack_mod = StackingClassifier(estimators=base,final_estimator=AdaBoostClassifier())\nstack_mod.fit(xtrain_bal,ytrain_bal)","d5df817a":"ypred = stack_mod.predict(xtest)","90ba1cbc":"print('Stacking:')\nprint(classification_report(ytest,ypred))\nprint('Cohen Kappa Score',round(cohen_kappa_score(ytest,ypred),2))","62073cfe":"plot_roc_curve(estimator=stack_mod,X=xtest,y=ytest)\nplt.plot([0,1],[0,1],'r--')","bee0124e":"sns.heatmap(confusion_matrix(ytest,ypred),annot=True,fmt='d',cbar=False,cmap='Blues')","2ad98ad7":"lime_explainer = lime_tabular.LimeTabularExplainer(\n    training_data=np.array(xtrain_bal),\n    feature_names=xtrain.columns,\n    mode='classification'\n)\n\n\nlime_exp = lime_explainer.explain_instance(\n    data_row=xtest.iloc[1],\n    predict_fn=stack_mod.predict_proba\n)\nlime_exp.show_in_notebook(show_table=True)","74b163c1":"cp = classification_report(ytest,ypred).split()\nmetrics_df7 = pd.DataFrame([cp[5],cp[6],cp[7],round(accuracy_score(ytest,ypred),3),round(roc_auc_score(ytest,ypred),3)],\n                          index=['Churn_precision','Churn_recall','Churn_f1score','Accuracy','Roc_Auc_Score'],\n                         columns=['Stacking_Reg']).T\n\nmetrics_df2 = pd.concat([metrics_df2,metrics_df7],axis=0)\nmetrics_df2","468dd709":"metrics_df2.style.background_gradient(cmap='Blues')","1eef8b6b":"metrics_df2.style.highlight_max()","8ff3f91d":"### Random Forest (Bagging)","c9d72f8a":"### Outlier Treatment","3f2914c3":"###### Hyperparameter Tuning","0f1d0b21":"#### 1.  LOGISTIC REGRESSION","cef2aef3":"## Boosting ","30b6ebca":"## Scaling","77967e9c":"### Test-Train Split","a7edc93b":"## Stacking","f0d6db33":"### Balancing the Data","3f9c0271":"## XG Boost","ead0d4e5":"### 1.Adaboost","74e3be64":"## Cleaning the Data","a98b6e02":"#### Full Model","4d9388c9":"## Machine Learning Modelling","25f074f6":"## VIF","b954f04b":"<a id=\"dtree\"> <\/a>\n## Decision Tree","088b08a8":"### Changing the columns into datetime","0e2713b0":"### Data information","e3782063":"## Data Visualization","4eb20c1c":"### Reading the cleaned data","9072aea0":"## One Hot Encoding","5e449e92":"### Feature Selection","fd41fe6f":"## Transformation","cf0d2f7a":"![image.png](attachment:image.png)"}}