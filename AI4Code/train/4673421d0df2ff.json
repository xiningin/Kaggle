{"cell_type":{"369bb417":"code","50c5a9d4":"code","272f2829":"code","752b5574":"code","9963db4c":"code","bfb1e5ae":"code","8a6f40f0":"code","b9b7fd83":"code","ad4eae5e":"code","b052baab":"code","4404e7d7":"code","ee009ba9":"code","e5810f9c":"code","ccdfa34a":"code","104ebb6c":"code","894839d3":"code","11cc494c":"code","c20aed34":"code","b6c7a8d3":"code","1551857f":"code","d167d81a":"markdown","a430fc36":"markdown","76870637":"markdown","27674400":"markdown","44f38002":"markdown","d253d851":"markdown","bba06a78":"markdown","1d160ed8":"markdown"},"source":{"369bb417":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","50c5a9d4":"datapath = '\/kaggle\/input\/credit-card-customers\/'\nfilename = 'BankChurners.csv'","272f2829":"df = pd.read_csv(datapath+filename)\ndf = df[df.columns[:-2]]\ndf = df.sample(frac=1.0, random_state=99)\nprint(df.shape)\ndf.head()","752b5574":"#!pip install featurewiz","9963db4c":"from featurewiz import featurewiz","bfb1e5ae":"target = 'Attrition_Flag'","8a6f40f0":"feats = featurewiz(df, target, corr_limit=0.7, verbose=0)\nlen(feats)","b9b7fd83":"from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor\n#RFC = RandomForestRegressor(n_estimators=200, bootstrap=True,\nRFC = RandomForestClassifier(n_estimators=200, bootstrap=True,\n                            oob_score=True, random_state=43)","ad4eae5e":"preds = [x for x in list(df) if x not in [target]]\nlen(preds)","b052baab":"from featurewiz import convert_all_object_columns_to_numeric\ndfx,_ = convert_all_object_columns_to_numeric(df)\ndfx.head()","4404e7d7":"X = dfx[preds]\ny_map = {'Existing Customer':0,'Attrited Customer':1}\ny = df[target].map(y_map).values","ee009ba9":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.1,random_state=99)\nprint(X_train.shape, y_train.shape)\n","e5810f9c":"X_train.head()","ccdfa34a":"from sklearn.model_selection import cross_val_score\nfull = cross_val_score(RFC, X_train, y_train, scoring='accuracy', cv=5, n_jobs=-1, verbose=0)\nprint('Average Cross Validation Accuracy using full set of variables = %0.1f%%' %(\n                        np.mean(full)*100))","104ebb6c":"from sklearn.metrics import balanced_accuracy_score\nprint('Balanced Accuracy on Held out Test Data:%0.1f%%' %(100*balanced_accuracy_score(y_test,RFC.fit(X_train,y_train).predict(X_test))))","894839d3":"#### Featurewiz returns the list of variables in the first part of it output\nfeats[0]","11cc494c":"X = dfx[feats[0]]\ny_map = {'Existing Customer':0,'Attrited Customer':1}\ny = df[target].map(y_map).values","c20aed34":"X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.1,random_state=99)\nprint(X_train.shape, y_train.shape)","b6c7a8d3":"reduced = cross_val_score(RFC, X_train, y_train, scoring='accuracy', cv=5, n_jobs=-1, verbose=0)\nprint('Average Cross Validation Accuracy using reduced set of variables = %0.1f%%' %(\n                        np.mean(reduced)*100))","1551857f":"from sklearn.metrics import balanced_accuracy_score\nprint('Balanced Accuracy on Held out Test Data:%0.1f%%' %(100*balanced_accuracy_score(y_test,RFC.fit(X_train,y_train).predict(X_test))))","d167d81a":"# You can install featurewiz two ways:\n1. It is available as a Utility Script in Kaggle Notebooks. Just go to File Menu on top and select \"Add Utility Script\" and find the \"featurewiz\" script from the list of scripts available in Kaggle.\n## In the above case, you will need to use \"from featurewiz_py import featurewiz\" since Kaggle names the script as featurewiz_py\n2. The second method is to \"pip install featurewiz\" and use it below ","a430fc36":"### Use install method if Kaggle allows internet access during a competition.","76870637":"# So with 30% fewer variables, you are able to achieve close to full-set accuracy. ","27674400":"# Remember that your test results can be improved by using more complex models or even better, simpler models with good hyper-parameter selection. That way you not only have fewer features but simpler models which means they are much more interpretable to managers and clients!","44f38002":"![image.png](attachment:image.png)","d253d851":"# Let's compare it to 15 variables from featurewiz","bba06a78":"# What is featurewiz?\nfeaturewiz is a new python library  to find the best features in your dataset if you give it the dataframe and the name of the target variable. It will do the following:\n1. Remove highly correlated features automatically (the limit is set to 0.70 but you can change it in the input argument)\n2. If multiple features are correlated to each other, which one to remove? In case of such clashes, it will remove the feature with the lower mutual information score\n3. Recursively do feature selection using XGBoost algorithm to find the best features using XGBoost","1d160ed8":"## So featurewiz selects 15 variables as worth using in a model. \nLet's see how the 15 features compares to the full 21 features that are in the data set"}}