{"cell_type":{"90eb630e":"code","fc44d0a9":"code","9ab86a44":"code","9425a8b8":"code","c728f320":"code","98805860":"code","48eaf3c7":"code","0d5f9efa":"code","5f4adc6d":"code","8fcdbf89":"code","38f84d23":"code","fd3c7f78":"code","1e94a50f":"code","3f8ff296":"code","123d0e01":"code","c18aef36":"code","46f4b87d":"code","0b7111ec":"code","f64b8069":"markdown","26b38ee0":"markdown","f5ac16a5":"markdown","331406ff":"markdown","c022b8aa":"markdown","39e516d8":"markdown","2c4fa1e0":"markdown"},"source":{"90eb630e":"!pip install catboost","fc44d0a9":"import os\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Model\nfrom catboost import CatBoostRegressor, Pool\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import mean_absolute_error","9ab86a44":"print(os.listdir(\"..\/input\"))","9425a8b8":"train = pd.read_csv('..\/input\/train.csv', dtype={'acoustic_data': np.int16,\n                                                 'time_to_failure': np.float64})\ntrain.head()","c728f320":"pd.options.display.precision = 15 # Hi\u1ec3n th\u1ecb 15 s\u1ed1 th\u1eadp ph\u00e2n\ntrain.head()","98805860":"train_chunk = pd.read_csv('..\/input\/train.csv', chunksize=150_000, iterator=True, dtype={'acoustic_data': np.int16,\n                                                                                          'time_to_failure': np.float64})","48eaf3c7":"def feature_engineering(df):\n    new_feat = []\n    new_feat.append(df.mean())\n    new_feat.append(df.std())\n    new_feat.append(df.min())\n    new_feat.append(df.max())\n    \n    return pd.Series(new_feat)","0d5f9efa":"# Feature Engineering\nX_train = pd.DataFrame()\ny_train = pd.Series()\n\nfor df in train_chunk:\n    fe = feature_engineering(df['acoustic_data'])\n    X_train = X_train.append(fe, ignore_index=True)\n    y_train = y_train.append(pd.Series(df['time_to_failure'].values[-1])) # L\u1ea5y gi\u00e1 tr\u1ecb cu\u1ed1i c\u00f9ng c\u1ee7a m\u1ed7i chunk","5f4adc6d":"# \u0110\u1eb7t t\u00ean cho c\u00e1c c\u1ed9t\ncolumns = ['mean', 'std', 'min', 'max']\nX_train.columns = columns\n\nX_train.head()","8fcdbf89":"y_train.head()","38f84d23":"scaler = StandardScaler()\nscaler.fit(X_train)\nX_train_scaled = scaler.transform(X_train)","fd3c7f78":"params = {'iterations': 10000,\n          'loss_function': 'MAE'}\n\ntrain_pool = Pool(X_train_scaled, y_train)\n\ncbr = CatBoostRegressor(**params)\ncbr.fit(X_train_scaled, y_train, eval_set=train_pool, silent=True)\n\ny_pred = cbr.predict(X_train_scaled)\nprint('Best score: ' + str((cbr.best_score_)))\nprint('MAE: {:.3f}'.format(mean_absolute_error(y_train.values, y_pred)))","1e94a50f":"submission = pd.read_csv('..\/input\/sample_submission.csv', index_col='seg_id') # \u0110\u1ecdc file sample_submission \u0111\u1ec3 l\u1ea5y form\n\nX_test = pd.DataFrame(columns=X_train.columns, dtype=np.float64, index=submission.index) # T\u1ea1o DF m\u1edbi cho X_test \u0111\u1ec3 th\u1ef1c hi\u1ec7n Feature Engineering t\u01b0\u01a1ng t\u1ef1 v\u1edbi train data","3f8ff296":"X_test.head()","123d0e01":"# Feature Engineering cho test data\nfor seg_id in X_test.index:\n    seg = pd.read_csv('..\/input\/test\/' + seg_id + '.csv')\n    \n    x = seg['acoustic_data'].values\n    \n    X_test.loc[seg_id, 'mean'] = x.mean()\n    X_test.loc[seg_id, 'std'] = x.std()\n    X_test.loc[seg_id, 'max'] = x.max()\n    X_test.loc[seg_id, 'min'] = x.min()","c18aef36":"X_test.head()","46f4b87d":"X_test_scaled = scaler.transform(X_test) # Scale feature \u1edf test data\n\nsubmission['time_to_failure'] = cbr.predict(X_test_scaled)\nsubmission.to_csv('submission.csv')","0b7111ec":"submission.head()","f64b8069":"<center><img src=\"https:\/\/i.imgur.com\/hBPv3fh.png\" width=\"650\"><\/center>\n<h1><center>Kaggle LANL Earthquake Prediction Modeling<\/center><\/h1>\n\n**Nhi\u1ec7m v\u1ee5**: D\u1ef1 \u0111o\u00e1n th\u1eddi gian s\u1eafp x\u1ea3y ra \u0111\u1ed9ng \u0111\u1ea5t d\u1ef1a v\u00e0o d\u00e3y acoustic_data thu \u0111\u01b0\u1ee3c trong m\u1ed7i file d\u1eef li\u1ec7u.\n\n**Model**: Project n\u00e0y s\u1eed d\u1ee5ng model CatBoostRegressor. Output c\u1ee7a project l\u00e0 m\u1ed9t continuous number -> Regression data.\n\n**CatBoost**: L\u00e0 model \u0111\u01b0\u1ee3c ph\u00e1t tri\u1ec3n b\u1edfi Yandex d\u1ef1a tr\u00ean c\u00f4ng th\u1ee9c Gradient Boosting thu\u1ed9c h\u1ecd Decision Tree. CatBoost c\u00f3 c\u00e1c \u01b0u \u0111i\u1ec3m:\n* Th\u1ec3 hi\u1ec7n t\u1ed1t m\u00e0 it c\u1ea7n ch\u1ec9nh parameters.\n* H\u1ed7 tr\u1ee3 c\u00e1c bi\u1ebfn categorical kh\u00f4ng ph\u1ea3i d\u1ea1ng s\u1ed1 --> Kh\u00f4ng c\u1ea7n dummies.\n* Scale v\u1edbi GPU.\n* \u0110\u1ed9 ch\u00ednh x\u00e1c cao, c\u00f3 th\u1ec3 gi\u1ea3m overfitting.\n* T\u1ed1c \u0111\u1ed9 d\u1ef1 \u0111o\u00e1n nhanh.\n\n[Ngu\u1ed3n](https:\/\/catboost.ai\/)","26b38ee0":"Do feature g\u1ed1c ch\u1ec9 c\u00f3 **acoustic_data**, ta c\u1ea7n s\u1eed d\u1ee5ng t\u1edbi k\u1ef9 thu\u1eadt Feature Engineering \u0111\u1ec3 t\u1ea1o th\u00eam c\u00e1c feature kh\u00e1c d\u1ef1a tr\u00ean feature g\u1ed1c, t\u1eeb \u0111\u00f3 t\u0103ng kh\u1ea3 n\u0103ng predict c\u1ee7a model. N\u00f3i c\u00e1ch kh\u00e1c, ta c\u00f3 th\u00eam nhi\u1ec1u d\u1eef ki\u1ec7n h\u01a1n \u0111\u1ec3 th\u1ef1c hi\u1ec7n vi\u1ec7c ph\u1ecfng \u0111o\u00e1n th\u1eddi gian s\u1eafp x\u1ea3y ra \u0111\u1ed9ng \u0111\u1ea5t.\n\n**\u00dd t\u01b0\u1edfng:** T\u1ea1o ra function `feature_engineering`, function s\u1ebd t\u1ea1o ra m\u1ed9t list g\u1ed3m mean, std, min, max c\u1ee7a c\u1ed9t acoustic_data (new_feat = \\[7.32, 0.16, -77, 109\\]). Sau \u0111\u00f3 bi\u1ebfn list n\u00e0y th\u00e0nh pd.Series \u0111\u1ec3 append v\u00e0o 1 pd.DataFrame, m\u1ed7i Series append v\u00e0o DataFrame s\u1ebd tr\u1edf th\u00e0nh 1 d\u00f2ng.","f5ac16a5":"Ti\u1ebfp theo, ch\u1ecdn model \u0111\u1ec3 train b\u1eb1ng feature \u0111\u00e3 scale. \u1ede \u0111\u00e2y s\u1eed d\u1ee5ng model CatBoostRegressor.","331406ff":"\u0110\u1ec3 \u00fd th\u1ea5y c\u1ed9t **time_to_failure** ch\u1ee9a c\u00e1c con s\u1ed1 gi\u1ed1ng nhau, tuy nhi\u00ean nhi\u1ec1u kh\u1ea3 n\u0103ng do s\u1ed1 \u0111\u01b0\u1ee3c l\u00e0m tr\u00f2n v\u00ec kh\u00e1c bi\u1ec7t n\u1eb1m \u1edf ph\u1ea7n th\u1eadp ph\u00e2n. C\u1ea7n \u0111\u1ec3 pandas hi\u1ec3n th\u1ecb ph\u1ea7n th\u1eadp ph\u00e2n nhi\u1ec1u h\u01a1n \u0111\u1ec3 x\u00e1c nh\u1eadn \u0111i\u1ec1u n\u00e0y.","c022b8aa":"# SUBMIT","39e516d8":"C\u00e1c feature \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng l\u00e0 c\u00e1c s\u1ed1 li\u00ean ti\u1ebfp v\u00e0 c\u00f3 s\u1ef1 kh\u00e1c bi\u1ec7t l\u1edbn v\u1ec1 gi\u00e1 tr\u1ecb c\u1ee7a ch\u00fang. V\u00ed d\u1ee5 nh\u01b0 gi\u00e1 tr\u1ecb c\u1ee7a feature **mean** c\u00f3 th\u1ec3 tr\u1ea3i t\u1eeb -10 \u0111\u1ebfn 10, trong khi \u0111\u00f3 gi\u00e1 tr\u1ecb c\u1ee7a feature **max** c\u00f3 th\u1ec3 tr\u1ea3i t\u1eeb 50 \u0111\u1ebfn 200. Do \u0111\u00f3, \u0111\u1ec3 c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng c\u00e1c feature n\u00e0y m\u1ed9t c\u00e1ch hi\u1ec7u qu\u1ea3, ch\u00fang ta c\u1ea7n s\u1eed d\u1ee5ng k\u1ef9 thu\u1eadt scale \u0111\u1ec3 c\u00e1c gi\u00e1 tr\u1ecb c\u1ee7a c\u00e1c feature ch\u1ec9 n\u1eb1m trong kho\u1ea3ng 0 \u0111\u1ebfn 1 ho\u1eb7c -1 \u0111\u1ebfn 1 (t\u00f9y theo k\u1ef9 thu\u1eadt scale).","2c4fa1e0":"M\u1ed7i file test ch\u1ee9a 150,000 d\u00f2ng acoustic_data, nhi\u1ec7m v\u1ee5 c\u1ee7a ch\u00fang ta l\u00e0 d\u1ef1 \u0111o\u00e1n time_to_failure t\u1ea1i d\u00f2ng cu\u1ed1i c\u00f9ng c\u1ee7a m\u1ed7i file test.\n\n<center><b>seg_004cd2<\/b><\/center>\n\n|      |acoustic_data|time_to_failure|\n|------|-------------|---------------|\n|  0   |      6      |               |\n|  1   |     16      |               |\n| ...  |     ...     |      ...      |\n|149998|151          |               |\n|149999|77           |    **3.26**   |\n\n<br>\n\n<center><b>submission<\/b><\/center>\n\n|          |time_to_failure|\n|----------|---------------|\n|seg_004cd2|    **3.26**   |\n|    ...   |      ...      |\n|seg_123ef7|      ...      |"}}