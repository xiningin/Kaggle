{"cell_type":{"a300592d":"code","083a0dd7":"code","ccb9cbbb":"code","1d630a71":"code","bcc1029a":"code","c914c2f1":"code","17677d9f":"code","0b7d858b":"code","e8a8e44f":"code","a8deea54":"code","f1279116":"code","4dac7a4d":"code","80d8f000":"code","41de6e19":"code","50a46705":"code","400abed3":"code","b2c1d03e":"code","42083c23":"code","e23ad27b":"code","a1be5035":"code","fe2fa1da":"code","24260a31":"code","e7fb6352":"code","43ff19c9":"code","82b0e9e5":"code","eb68a10a":"code","ffc739d2":"code","56c2cd8e":"code","1c0c414e":"code","894710c3":"code","c9bca726":"code","e33b5591":"code","085f7f1f":"code","2979ac5c":"code","191363fa":"code","a6a2d160":"code","970b6e3b":"code","7e26cb27":"code","ebf08e11":"code","5d6dd0bb":"code","9e05f5c0":"code","7371b261":"code","1d66252d":"code","68874a39":"code","9775abe7":"code","23b2e143":"code","f0ac2296":"code","68e6d371":"code","c4b494f6":"code","36dec0d5":"code","c64f24a9":"code","e5cdfda0":"code","a0febfe6":"code","6f379668":"code","19d4bc24":"code","4daf08eb":"code","16b4255e":"code","a0ff4825":"code","6a276f47":"code","100afe6b":"code","a75f56b1":"code","391b8a90":"code","0d2ca47e":"code","6796f90e":"code","ba4ab78f":"code","fed14888":"code","ee48a906":"code","82d67bfd":"code","5e29a67b":"code","cb3fa865":"code","441d24d2":"code","fef57a05":"code","de935fcb":"code","d2473363":"code","819be1ef":"code","c5ed9edf":"code","0cc73ded":"markdown","d3c308f3":"markdown","278713ab":"markdown","42a038e7":"markdown","b7349359":"markdown","069b7016":"markdown","a94783ea":"markdown","2669a9f5":"markdown","d8cb59cc":"markdown","509837d2":"markdown","3f3cc4cf":"markdown","99d5a23e":"markdown","7fabd640":"markdown","24aa1a89":"markdown","6b486218":"markdown","58977ac0":"markdown","9992d9ce":"markdown","8be43ed2":"markdown","03728f6a":"markdown","13978d04":"markdown","85b78300":"markdown","3d5999b4":"markdown","366ca1e2":"markdown","a26a20d8":"markdown","f65b01ea":"markdown","e2d796b9":"markdown"},"source":{"a300592d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","083a0dd7":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport statsmodels.api as sm\nfrom sklearn.linear_model import LinearRegression , Ridge , LogisticRegression\nfrom sklearn.preprocessing import LabelEncoder , PolynomialFeatures\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score , mean_squared_error\nfrom scipy import stats\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom imblearn.over_sampling import SMOTE\nfrom graphviz import Source\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import confusion_matrix , classification_report\nfrom mlxtend.plotting import plot_confusion_matrix\nfrom sklearn.model_selection import GridSearchCV\nimport warnings\nwarnings.filterwarnings('ignore')\nsns.set(style=\"darkgrid\")\nplt.style.use('fivethirtyeight')\n","ccb9cbbb":"# clustering\nfrom sklearn import preprocessing \nimport scipy.cluster.hierarchy as sch\nfrom sklearn.cluster import AgglomerativeClustering \n# standarization\nfrom sklearn.preprocessing import StandardScaler, normalize\n\nfrom sklearn.decomposition import PCA\nfrom sklearn.metrics import silhouette_score\nimport scipy.cluster.hierarchy as shc\n#plotly \nimport plotly.offline as py\nimport plotly.graph_objects as go\nfrom plotly.offline import init_notebook_mode, iplot\nfrom plotly import tools\ninit_notebook_mode(connected=True)\nimport plotly.figure_factory as ff\nimport plotly.express as px\n# Styling \nplt.style.use('fivethirtyeight')","1d630a71":"def dataset_overview(data):\n    \n    print(\"------------\")\n    print(data.head())\n    print(\"-----------\")\n    print(data.columns)\n    print(\"------------\")\n    print(\"Shape of the dataset\")\n    print(data.shape)\n    print(\"-------------\")\n    print(\"Null Value counts\")\n    print(data.isnull().sum())\n    print(\"-------------\")\n    print(\"dataset informaation\")\n    print(data.info())\n    print(\"---------------\")\n    plt.figure(figsize = (10,10))\n    print(sns.heatmap(data.corr(), annot = True, cmap = \"RdYlGn\"))","bcc1029a":"df=pd.read_csv('..\/input\/air-pollution-data\/USairpollution.csv')\ndf.head()","c914c2f1":"dataset_overview(df)","17677d9f":"def correlation_matrix(data):\n    corr = data.corr().round(2)\n\n    # Mask for the upper triangle\n    mask = np.zeros_like(corr, dtype=np.bool)\n    mask[np.triu_indices_from(mask)] = True\n\n    # Set figure size\n    f, ax = plt.subplots(figsize=(20, 20))\n\n    # Define custom colormap\n    cmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n    # Draw the heatmap\n    d=sns.heatmap(corr, mask=mask, cmap=cmap, vmin=-1, vmax=1, center=0,\n                square=True, linewidths=.5, cbar_kws={\"shrink\": .5}, annot=True)\n\n    plt.tight_layout()\n    return d","0b7d858b":"correlation_matrix(df)\n","e8a8e44f":"df.head()","a8deea54":"sns.scatterplot(x=df['SO2'], y=df['precip'])","f1279116":"sns.scatterplot(x=df['SO2'], y=df['wind'])","4dac7a4d":"sns.scatterplot(x=df['SO2'], y=df['popul'])","80d8f000":"sns.scatterplot(x=df['SO2'], y=df['temp'])","41de6e19":"sns.scatterplot(x=df['SO2'], y=df['manu'])","50a46705":"X=df[['SO2', 'popul']].values","400abed3":"# Using the elbow method to find the optimal number of clusters\nfrom sklearn.cluster import KMeans\nwcss = []\nfor i in range(1, 11):\n    kmeans = KMeans(n_clusters = i, init = 'k-means++', random_state = 42)\n    kmeans.fit(X)\n    # inertia method returns wcss for that model\n    wcss.append(kmeans.inertia_)","b2c1d03e":"plt.figure(figsize=(10,5))\nsns.lineplot(range(1, 11), wcss,marker='o',color='red')\nplt.title('The Elbow Method')\nplt.xlabel('Number of clusters')\nplt.ylabel('WCSS')\nplt.show()","42083c23":"from sklearn.preprocessing import MinMaxScaler\n","e23ad27b":"scaler = MinMaxScaler()\n","a1be5035":"df.columns","fe2fa1da":"col=['SO2', 'temp', 'manu', 'popul', 'wind', 'precip', 'predays']","24260a31":"X=df[col]","e7fb6352":"scaled = scaler.fit_transform(X)","43ff19c9":"wcss = []\nfor i in range(1, 11):\n    kmeans = KMeans(n_clusters = i, init = 'k-means++', random_state = 42)\n    kmeans.fit(scaled)\n    # inertia method returns wcss for that model\n    wcss.append(kmeans.inertia_)","82b0e9e5":"plt.figure(figsize=(10,5))\nsns.lineplot(range(1, 11), wcss,marker='o',color='red')\nplt.title('The Elbow Method')\nplt.xlabel('Number of clusters')\nplt.ylabel('WCSS')\nplt.show()","eb68a10a":"df.head()","ffc739d2":"col=['SO2', 'popul']","56c2cd8e":"plt.figure(1, figsize = (16 ,8))\ndendrogram = sch.dendrogram(sch.linkage(df[col], method  = \"ward\"))\n\nplt.title('Dendrogram')\nplt.xlabel('xxxxx')\nplt.ylabel('Euclidean distances')\nplt.xticks(rotation=90)\nplt.show()","1c0c414e":"df.head()","894710c3":"X=df.iloc[:,1:8]","c9bca726":"X.head()","e33b5591":"from sklearn.preprocessing import StandardScaler\nX_std=StandardScaler().fit_transform(X)","085f7f1f":"mean_vec=np.mean(X_std,axis=0)\ncov_mat=(X_std-mean_vec).T.dot((X_std-mean_vec))\/(X_std.shape[0]-1)\nprint(\"Covariance Matrix \\n%s\" %cov_mat)","2979ac5c":"print(\"Numpy Covariance matrix \\n%s\" %np.cov(X_std.T))","191363fa":"cov_mat=np.cov(X_std.T)\n\neig_vals, eig_vecs=np.linalg.eig(cov_mat)\n\nprint(\"Eigenvectors \\n%s\" %eig_vecs)\nprint(\"Eigenvelues \\n%s\" %eig_vals)","a6a2d160":"corr_mat1=np.corrcoef(X_std.T)\n\neig_vals, eig_vecs=np.linalg.eig(corr_mat1)\n\nprint(\"Eigenvectors \\n%s\" %eig_vecs)\nprint(\"Eigenvelues \\n%s\" %eig_vals)","970b6e3b":"u, s, v=np.linalg.svd(X_std.T)\nu\n","7e26cb27":"for ev in eig_vecs.T:\n    np.testing.assert_array_almost_equal(1.0, np.linalg.norm(ev))\nprint(\"Everithing is ok\")","ebf08e11":"# Make a list of (eigenvalue, eigenvector) tuples\neig_pairs = [(np.abs(eig_vals[i]), eig_vecs[:,i]) for i in range(len(eig_vals))]\n\n# Sort the (eigenvalue, eigenvector) tuples from high to low\neig_pairs.sort(key=lambda x: x[0], reverse=True)\n\n# Visually confirm that the list is correctly sorted by decreasing eigenvalues\nprint('Eigenvalues in descending order:')\nfor i in eig_pairs:\n    print(i[0])","5d6dd0bb":"tot = sum(eig_vals)\nvar_exp = [(i \/ tot)*100 for i in sorted(eig_vals, reverse=True)]\ncum_var_exp = np.cumsum(var_exp)","9e05f5c0":"with plt.style.context('seaborn-whitegrid'):\n    plt.figure(figsize=(10, 5))\n\n    plt.bar(range(7), var_exp, alpha=0.5, align='center',label='individual explained variance')\n    plt.step(range(7), cum_var_exp, where='mid',label='cumulative explained variance')\n    plt.ylabel('Explained variance ratio')\n    plt.xlabel('Principal components')\n    plt.legend(loc='best')\n    plt.tight_layout()","7371b261":"!pip install factor_analyzer","1d66252d":"# Import required libraries\nimport pandas as pd\nfrom sklearn.datasets import load_iris\nfrom factor_analyzer import FactorAnalyzer\nimport matplotlib.pyplot as plt","68874a39":"df.columns\n","9775abe7":"df.info()\n","23b2e143":"sns.pairplot(df)","f0ac2296":"!pip install pingouin\n","68e6d371":"#import necessary packages\nfrom pingouin import multivariate_normality\nimport pandas as pd\nimport numpy as np","c4b494f6":"x=df.iloc[0,1:8]","36dec0d5":"df.columns","c64f24a9":"X=df[['SO2', 'temp', 'manu', 'popul', 'wind', 'precip','predays']]","e5cdfda0":"X.head()","a0febfe6":"#pecolumnsrm the Henze-Zirkler Multivariate Normality Test\nmultivariate_normality(X, alpha=.05)","6f379668":"H=np.mean(X, axis=0)","19d4bc24":"print(H)","4daf08eb":"from sklearn.preprocessing import StandardScaler\nX_std=StandardScaler().fit_transform(X)","16b4255e":"mean_vec=np.mean(X_std,axis=0)\nprint(mean_vec)","a0ff4825":"cov_mat=(X_std-mean_vec).T.dot((X_std-mean_vec))\/(X_std.shape[0]-1)\nprint(\"Covariance Matrix \\n%s\" %cov_mat)","6a276f47":"!pip install factor-analyzer","100afe6b":"df=pd.read_csv('..\/input\/air-pollution-data\/USairpollution.csv')\ndf.head()","a75f56b1":"df.columns","391b8a90":"X=df[['SO2', 'temp', 'manu', 'popul', 'wind', 'precip','predays']]","0d2ca47e":"# Import required libraries\nimport pandas as pd\nfrom sklearn.datasets import load_iris\nfrom factor_analyzer import FactorAnalyzer\nimport matplotlib.pyplot as plt","6796f90e":"fa = FactorAnalyzer(rotation=None)","ba4ab78f":"fa.fit(X)","fed14888":"fa.loadings_","ee48a906":"fa.get_communalities()","82d67bfd":"fa = FactorAnalyzer(rotation=None)","5e29a67b":"fa.fit(X)","cb3fa865":"fa.get_factor_variance()","441d24d2":"fa.get_uniquenesses()","fef57a05":"#fa.analyze(X, 25, rotation=None)\n# Check Eigenvalues\nev, v = fa.get_eigenvalues()\nev","de935fcb":"# Create scree plot using matplotlib\n#plt.style.context('seaborn-whitegrid')\nplt.figure(figsize=(10, 5))\nplt.scatter(range(1,X.shape[1]+1),ev)\nplt.plot(range(1,X.shape[1]+1),ev)\nplt.title('Scree Plot')\nplt.xlabel('Factors')\nplt.ylabel('Eigenvalue')\nplt.grid()\nplt.show()","d2473363":"X.head()","819be1ef":"np.cov(X)","c5ed9edf":"mean_vec=np.mean(X, axis=0)\ncov_mat=(X-mean_vec).T.dot((X-mean_vec))\/(X.shape[0]-1)\ncov_mat","0cc73ded":"* The scree plot method draws a straight line for each factor and its eigenvalues. Number eigenvalues greater than one considered as the number of factors.\n* Here, you can see only for 3-factors eigenvalues are greater than one. It means we need to choose only 3 factors (or unobserved variables)","d3c308f3":"# Estimating mean and covariance matrix","278713ab":"# Sorting Eigenpairs","42a038e7":"# 1 Multivariate Plot","b7349359":"# Performing Factor Analysis","069b7016":"* Next, we perform an eigendecomposition on the covariance matrix","a94783ea":"# Adequacy Test\n* Bartlett\u2019s Test\n* Kaiser-Meyer-Olkin Test","2669a9f5":"# Explained Variance:","d8cb59cc":"# factor Analysis","509837d2":"# Bartlett\u2019s \n* of sphericity checks whether or not the observed variables intercorrelate at all using the observed correlation matrix against the identity matrix. If the test found statistically insignificant, you should not employ a factor analysis","3f3cc4cf":"# 3 Multivariate Normality test","99d5a23e":"# Optimum K ","7fabd640":"# Choosing the Number of Factors","24aa1a89":"# 2 Principal Component Analysis\n* Done","6b486218":"# Heirarchical method","58977ac0":"> In this Bartlett \u2019s test, the p-value is 0. The test was statistically significant, indicating that the observed correlation matrix is not an identity matrix","9992d9ce":"# Question 1 :","8be43ed2":"# Eigendecomposition of the raw data based on the correlation matrix","03728f6a":"# Singular Value Decomposition","13978d04":"* Total 74% cumulative Variance explained by the 3 factors","85b78300":"# Obs\n* 4 is optimum number of cluster","3d5999b4":"# The results of the test are as follows:\n* H-Z Test Statistic: 1.197216046866255\n* p-value: 2.8199961220014495e-10\n* Since the p-value of the test is less than our specified alpha value of .05, we fail to reject the null hypothesis. \n* We can say that the dataset doesn't follow multivariate normality.","366ca1e2":"# Conclusion\n* Here we can see that ","a26a20d8":"# Factor Analysis","f65b01ea":"# Kaiser-Meyer-Olkin (KMO):\n* Test measures the suitability of data for factor analysis. It determines the adequacy for each observed variable and for the complete model. KMO estimates the proportion of variance among all the observed variable. Lower proportion id more suitable for factor analysis. KMO values range between 0 and 1. Value of KMO less than 0.6 is considered inadequate.","e2d796b9":"# Factor Loading\n* Here We have factor loading as we have only 3 factors which are responsible."}}