{"cell_type":{"8ec7658c":"code","3815fa35":"code","8c2c6bfc":"code","4d11cabc":"code","a4a18076":"code","e78bd83d":"code","370548ac":"code","8b4f0f3c":"code","78d895ce":"code","063664d1":"code","38d08c29":"code","6c2b931b":"code","23460368":"code","c1b51b19":"code","bf7cb4b3":"code","57f11838":"code","fca9b525":"code","b79e370f":"code","68acf1d0":"code","73c3c247":"code","e99b2b9c":"code","241b9fc7":"code","f7edd726":"code","946332b4":"code","e0f7fc88":"code","fb140f1f":"code","c96e39b9":"code","c2e37475":"code","1be1ec70":"code","638210dc":"code","aa6036f0":"code","5daaa7b2":"code","06f3ffa1":"code","98da821a":"markdown","57ff7573":"markdown","fd2b0da1":"markdown","445468e0":"markdown"},"source":{"8ec7658c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3815fa35":"# import all of the important libraries in this kernel\nimport numpy as np\nimport pandas as pd\nimport plotly.graph_objects as go\nimport time\nimport datetime\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\nimport seaborn as sns\nimport lightgbm as lgb\ncmap = sns.color_palette()","8c2c6bfc":"# import the data to use in this kernel\ndf = pd.read_csv('..\/input\/g-research-crypto-forecasting\/train.csv')\nasset_details = pd.read_csv('..\/input\/g-research-crypto-forecasting\/asset_details.csv')\ndf_test = pd.read_csv('..\/input\/g-research-crypto-forecasting\/example_test.csv')","4d11cabc":"# casually checking the data\ndf.head(13)","a4a18076":"asset_details","e78bd83d":"df.isnull().sum()","370548ac":"#sort the asset_id data by using Weight as reference.\nasset_details = asset_details.sort_values('Weight',ascending=False)\nasset_details","8b4f0f3c":"asset_names_dict = {row[\"Asset_Name\"]:row[\"Asset_ID\"] for ind, row in asset_details.iterrows()}\nasset_names_dict","78d895ce":"def add_asset_name(stdata, join):\n    return stdata.merge(\n        join, how=\"left\",on=\"Asset_ID\"\n    )\n\ndf = add_asset_name(df,asset_details)","063664d1":"df['Real_Time'] = pd.to_datetime(df['timestamp'],unit='s')","38d08c29":"df.head(10)","6c2b931b":"(df['Asset_Name'].value_counts()\/df.shape[0])*100","23460368":"countpie = df['Asset_Name'].value_counts()\n\nfig = {\n  \"data\": [\n    {\n      \"values\": countpie.values,\n      \"labels\": countpie.index,\n      \"domain\": {\"x\": [0, .5]},\n      \"name\": \"Currency types\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .7,\n      \"type\": \"pie\"\n    },],\n  \"layout\": {\n        \"title\":\"Pie chart of all the Currency types ratio\",\n    }\n}\niplot(fig)","c1b51b19":"# This is what I normally write my plotly code but because the number of data is very big so it take too much time.\n# It might easier to write but it takes too much time to run the graph.\n\n#px.histogram(df, x=\"Asset_Name\", color=\"Asset_Name\")","bf7cb4b3":"# This is the better way to run a histogram plot by \"Sanskar Hasija\"\nasset_count= []\nfor i in range(14):\n    count = (df[\"Asset_ID\"]==i).sum()\n    asset_count.append(count)","57f11838":"# The output is basically the same as the code above but it run much more faster\nfig = px.histogram(x = asset_details.sort_values(\"Asset_ID\")[\"Asset_Name\"],\n                   y = asset_count , \n             color = asset_details.sort_values(\"Asset_ID\")[\"Asset_Name\"])\nfig.update_xaxes(title=\"Currency types\")\nfig.update_yaxes(title = \"Number of Rows\")\nfig.show()","fca9b525":"volumesum = df.groupby(['Asset_ID'])['Volume'].sum()\nvolumesum","b79e370f":"fig = px.histogram(x = asset_details.sort_values(\"Asset_ID\")[\"Asset_Name\"],\n                   y = volumesum, \n                   color = asset_details.sort_values(\"Asset_ID\")[\"Asset_Name\"])\nfig.update_xaxes(title=\"Currency types\")\nfig.update_yaxes(title = \"Sum of the volumes\")\nfig.update_layout(showlegend = True,\n    title = {\n        'text': 'Quantity of asset bought or sold based on USD',\n        'y':0.95,\n        'x':0.45,\n        'xanchor': 'center',\n        'yanchor': 'top'})\nfig.show()","68acf1d0":"assetindex = asset_details.sort_values(\"Asset_ID\")[\"Asset_Name\"].values\n","73c3c247":"assetindex","e99b2b9c":"plt.figure(figsize=(40,80))\ngs = gridspec.GridSpec(7, 2)\nfor i in range(14):\n    ax = plt.subplot(gs[i])\n    ax = sns.scatterplot(x='Close',y='Open',data=df[df['Asset_ID'] == i],color=cmap[i%10])\n    ax.set_xlabel('')\n    ax.set_title('Scatter plot of currency name: ' + assetindex[i] +' in USD')\nplt.show()\n","241b9fc7":"f = plt.figure(figsize=(15,30))\n\nfor ind, coin in enumerate(list(assetindex)):\n    coin_df = df[df[\"Asset_ID\"]==asset_names_dict[coin]].set_index(\"Real_Time\")\n    # fill missing values \n    ax = f.add_subplot(7,2,ind+1)\n    plt.plot(coin_df['Close'], label=coin, color=cmap[ind%10])\n    plt.legend()\n    plt.xlabel('Time')\n    plt.ylabel(coin)\n    plt.title(coin)\n\nplt.tight_layout()\nplt.show()","f7edd726":"all_assets_df = pd.DataFrame([])\nfor ind, coin in enumerate(list(assetindex)):\n    coin_df = df[df[\"Asset_ID\"]==asset_names_dict[coin]].set_index(\"Real_Time\")\n    # fill missing values\n    close_values = coin_df[\"Close\"].fillna(0)\n    close_values.name = coin\n    all_assets_df = all_assets_df.join(close_values, how=\"outer\")\n\n\ncorrmat = all_assets_df.corr()\nfig, ax = plt.subplots(figsize=(14, 14))\nsns.heatmap(corrmat, vmax=1., square=True, cmap=\"rocket_r\")\nplt.title(\"Cryptocurrency correlation map on actual price values\", fontsize=15)\nplt.show()","946332b4":"btctemp = df[df['Asset_Name']=='Bitcoin'].set_index(\"Real_Time\")\nbtctemp = btctemp.iloc[-2000:,] # I want only the lastest 2000 rows from the bottme\nbtctemp","e0f7fc88":"fig = go.Figure(data=[go.Candlestick(x=btctemp.index, open=btctemp['Open'], high=btctemp['High'], low=btctemp['Low'], close=btctemp['Close'])])\nfig.update_xaxes(title_text = 'Time',\n                             rangeslider_visible = True)\n\nfig.update_layout(\n     title = {\n        'text': ' Candelstick Chart: Bitcoin',\n        'y':0.90,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\n\nfig.update_yaxes(title_text = 'Price in USD', ticksuffix = '$')\n\n\n\n\nfig.show()","fb140f1f":"def crypto_df(AssetName,fdata=df):\n    currencydf = fdata[fdata['Asset_Name']== AssetName].set_index(\"Real_Time\")\n    currencydf = currencydf.iloc[-2000:,] # I want only the lastest 2000 rows from the bottme\n    return(currencydf)","c96e39b9":"ethtemp = crypto_df('Ethereum')","c2e37475":"def latestcandle(coindata,coinname):  \n        fig = go.Figure(data=[go.Candlestick(x=coindata.index, open=coindata['Open'], high=coindata['High'], low=coindata['Low'], close=coindata['Close'])])\n        fig.update_xaxes(title_text = 'Time',\n                                rangeslider_visible = True)\n\n        fig.update_layout(\n        title = {\n                'text': ' Candelstick Chart: {:}'.format(coinname),\n                'y':0.90,\n                'x':0.5,\n                'xanchor': 'center',\n                'yanchor': 'top'})\n\n        fig.update_yaxes(title_text = 'Price in USD', ticksuffix = '$')\n\n        fig.show()","1be1ec70":"latestcandle(ethtemp,'Ethereum')","638210dc":"def latestcandle(coinname,fdata=df):  \n        \n        currencydf = fdata[fdata['Asset_Name']== coinname].set_index(\"Real_Time\")\n        currencydf = currencydf.iloc[-2000:,] # I want only the lastest 2000 rows from the bottme\n        \n        fig = go.Figure(data=[go.Candlestick(x=currencydf.index, open=currencydf['Open'], high=currencydf['High'], low=currencydf['Low'], close=currencydf['Close'])])\n        fig.update_xaxes(title_text = 'Time',\n                                rangeslider_visible = True)\n\n        fig.update_layout(\n        title = {\n                'text': ' Candelstick Chart: {:}'.format(coinname),\n                'y':0.90,\n                'x':0.5,\n                'xanchor': 'center',\n                'yanchor': 'top'})\n\n        fig.update_yaxes(title_text = 'Price in USD', ticksuffix = '$')\n\n        fig.show()","aa6036f0":"latestcandle('Ethereum Classic') #just fill in the name of a coin so you could get the plot of those","5daaa7b2":"latestcandle('Litecoin')","06f3ffa1":"latestcandle('Dogecoin')\n","98da821a":"### **Use ML expertise to predict real crypto market data**","57ff7573":"#### Did it work?\nYes, it works. Cryptocurrency does not exist in physical form (like paper money) and is typically not issued by a central authority. Cryptocurrencies typically use decentralized control as opposed to a central bank digital currency (CBDC). When a cryptocurrency is minted or created prior to issuance or issued by a single issuer, it is generally considered centralized. When implemented with decentralized control, each cryptocurrency works through distributed ledger technology, typically a blockchain, that serves as a public financial transaction database.\n\n#### What did you not understand about this process?\nBy the help of G-Research, it is possible to know more about the Bitcoin. G-Research is Europe\u2019s leading quantitative finance research firm. We have long explored the extent of market prediction possibilities, making use of machine learning, big data, and some of the most advanced technology available.\n\n#### What else do you think you can try as part of this approach?\nTo remove this uncertainty and provide a level-playing field, technical indicators.\n","fd2b0da1":"#### What are you trying to do in this notebook?\nIn this competition, I'll use my machine learning expertise to forecast short term returns in 14 popular cryptocurrencies. As historic cryptocurrency prices are not confidential this will be a forecasting competition using the time series API. \nA cryptocurrency, crypto-currency, or crypto is a collection of binary data which is designed to work as a medium of exchange.\n\n#### Why are you trying it?\nThis dataset contains information on historic trades for several cryptoassets, such as Bitcoin and Ethereum. I'm just predict their future returns.\nCryptocurrencies are generally fiat currencies, as they are not backed by or convertible into a commodity.\n\nBitcoin, first released as open-source software in 2009, is the first decentralized cryptocurrency. Since the release of bitcoin, many other cryptocurrencies have been created.","445468e0":"#### If you have any feedback or comments please write it down the comment section below."}}