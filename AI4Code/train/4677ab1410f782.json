{"cell_type":{"c59c59ba":"code","248fcb07":"code","eecd72e7":"code","624ca1fb":"code","716e7b5f":"code","b472219c":"code","857d6140":"code","23c955eb":"code","f0513a01":"code","401207f1":"code","0c8155ac":"code","0c17384f":"code","e8cbe388":"code","6f54070b":"code","f7078027":"code","c073c9b8":"code","d9b0028d":"code","49223270":"code","71057c0e":"code","1201212b":"code","4cfc1940":"code","876b4301":"code","0619cdff":"markdown","b44c8a20":"markdown","121f995b":"markdown","ba870310":"markdown","738133e0":"markdown","d4cc4e2a":"markdown","afc599b0":"markdown","1c3e6380":"markdown","f23b189e":"markdown","e8e39577":"markdown","5713a012":"markdown","67213896":"markdown"},"source":{"c59c59ba":"import numpy as np \nimport pandas as pd \nfrom tqdm import tqdm_notebook as tqdm\nimport matplotlib.pyplot as plt\nimport math\nfrom numpy.linalg import svd\nimport ase\nfrom ase import Atoms\nimport ase.visualize\nimport warnings\nwarnings.filterwarnings('ignore')\n\ndef view(molecule):\n    # Select a molecule\n    mol = struct[struct['molecule_name'] == molecule]\n    \n    # Get atomic coordinates\n    xcart = mol.iloc[:, 3:].values\n    \n    # Get atomic symbols\n    symbols = mol.iloc[:, 2].values\n    \n    # Display molecule\n    system = Atoms(positions=xcart, symbols=symbols)\n    print('Molecule Name: %s.' %molecule)\n    return ase.visualize.view(system, viewer=\"x3d\")","248fcb07":"train = pd.read_csv('..\/input\/train.csv', nrows=500_000)\nstruct = pd.read_csv('..\/input\/structures.csv')","eecd72e7":"#quick PCA via singular value decomp - obtain principal eigenvector of molecule axis\ndef PCA_SVD(a):\n    a_mean = a.mean(axis=1)\n    #normalise\n    a = (a.T - a_mean.T).T\n    u, s, v = svd(a.T)\n    return(v[0])\n\n#obtain plane with minimum sum distance from nuclei\ndef get_plane(a):\n    a = np.reshape(a, (a.shape[0], -1))\n    centroid = a.mean(axis=1)\n    #normalise\n    x = a - centroid[:,np.newaxis]\n    m = np.dot(x, x.T) \n    return(centroid, svd(m)[0][:,-1])","624ca1fb":"size_list = []\nflatness = []\nbond_angle_plane = []\nbond_angle_axis = []\n\nmolecule_names = np.unique(train.molecule_name.values.flatten())\n\nfor i in tqdm(range(0, len(molecule_names))):\n    \n    mol = molecule_names[i]\n    #obtain structure and bond information for each molecule\n    temp_struct = struct.loc[struct.molecule_name==mol, :]\n    bonds = train.loc[train.molecule_name == mol, :]\n    \n    #number of constituent atoms\n    size = len(temp_struct)\n    size_list.extend(np.full(len(bonds), size))\n    \n    #nuclei coords\n    coords = np.column_stack([temp_struct.x.values,\n                                     temp_struct.y.values,\n                                     temp_struct.z.values]).T\n    \n    #principal axis of molecular alignment\n    axis_vector = PCA_SVD(coords)\n    \n    #obtain flatness metric and plane angles for binds if nuclei > 3\n    if size > 3:\n        \n        coords = coords - coords.mean()\n        #calculate best fitting 2D plane\n        ctr, norm = get_plane(coords) \n        \n        #calculate distances of each atom from plane\n        dists = np.zeros(size)\n        for j in range(0, size):\n            dists[j] = np.dot(norm, coords[:, j] - ctr)\n                        \n        #append mean distance to molecule list\n        dist = abs(dists).sum()\/len(dists)\n        flatness.extend(np.full(len(bonds), dist))   \n        \n        #obtain angle subtended by each atomic bind and plane\n        #print('There are {} bonds to calculate.'.format(len(bonds)))\n        for j in range(0, len(bonds)):\n            \n            #obtain atom index numbers for this bond\n            atom1 = bonds.atom_index_0.values[j]\n            atom2 = bonds.atom_index_1.values[j]\n            \n            #get 3D coords\n            atom1_coords = coords[:, atom1]\n            atom2_coords = coords[:, atom2]\n            \n            #bond vector\n            atom_vec = np.array([atom1_coords[0] - atom2_coords[0],\n                                 atom1_coords[1] - atom2_coords[1],\n                                 atom1_coords[2] - atom2_coords[2]])\n            \n            #angle subtended by bond vector and molecule plane\n            angle = np.dot(norm, atom_vec)\/(np.linalg.norm(norm)*np.linalg.norm(atom_vec))\n            axis_angle = np.dot(axis_vector, atom_vec)\/(np.linalg.norm(norm)*np.linalg.norm(atom_vec))\n            \n            #standardise to degrees <= 90\n            angle = math.degrees(np.arccos(angle))\n            axis_angle = math.degrees(np.arccos(axis_angle))\n\n            if angle > 90:\n                angle = 180 - angle\n            \n            if axis_angle > 90:\n                axis_angle = 180 - axis_angle\n                \n            #not needed but somewhat easier to visualise\n            angle = 90 - angle\n            axis_angle = 90 - axis_angle\n            bond_angle_plane.append(angle)\n            bond_angle_axis.append(axis_angle)\n               \n    else:\n        #for smaller molecules flatness and plane angle measurements are not informative\n        flatness.extend(np.full(len(bonds), np.nan))\n        bond_angle_plane.extend(np.full(len(bonds), np.nan))\n        \n        for j in range(0, len(bonds)):\n            \n            #obtain atom index numbers for this bond\n            atom1 = bonds.atom_index_0.values[j]\n            atom2 = bonds.atom_index_1.values[j]\n            \n            #get 3D coords\n            atom1_coords = coords[:, atom1]\n            atom2_coords = coords[:, atom2]\n            \n            #bond vector\n            atom_vec = np.array([atom1_coords[0] - atom2_coords[0],\n                                 atom1_coords[1] - atom2_coords[1],\n                                 atom1_coords[2] - atom2_coords[2]])\n            \n            #angle subtended by bond vector and molecule principal axis\n            axis_angle = np.dot(axis_vector, atom_vec)\/(np.linalg.norm(axis_vector)*np.linalg.norm(atom_vec))\n            \n            #standardise to degrees <= 90\n            axis_angle = math.degrees(np.arccos(axis_angle))\n                 \n            if axis_angle > 90:\n                axis_angle = 180 - axis_angle\n                \n            #not needed but somewhat easier to visualise\n            axis_angle = 90 - axis_angle\n            bond_angle_axis.append(axis_angle)\n  \n    \ntrain['num_atoms'] = np.asarray(size_list)\ntrain['flatness_metric'] = np.asarray(flatness)\ntrain['bond_angle_plane'] = np.asarray(bond_angle_plane)\ntrain['bond_angle_axis'] = np.asarray(bond_angle_axis)","716e7b5f":"train.sort_values('flatness_metric', ascending=False).head(3)","b472219c":"view('dsgdb9nsd_003491')","857d6140":"train.sort_values('flatness_metric').head(3)","23c955eb":"view('dsgdb9nsd_000050')","f0513a01":"train.sort_values('bond_angle_plane', ascending=False).head(3)","401207f1":"view('dsgdb9nsd_000014')","0c8155ac":"train.sort_values('bond_angle_plane').head(3)","0c17384f":"view('dsgdb9nsd_000023')","e8cbe388":"train.sort_values('bond_angle_axis', ascending=False).head(3)","6f54070b":"view('dsgdb9nsd_000009')","f7078027":"train.sort_values('bond_angle_axis').head(3)","c073c9b8":"view('dsgdb9nsd_000861')","d9b0028d":"fig, ax = plt.subplots(nrows=2, ncols=2, figsize = (18, 6))\ntrain.loc[train.type=='2JHH', :].plot(kind='scatter', x='flatness_metric', y='scalar_coupling_constant', color='b', figsize=(15, 6), s=0.5, ax=ax[0, 0])\nax[0, 0].xaxis.set_label_text(\"\")\nax[0, 0].set_title('2JHH')\ntrain.loc[train.type=='1JHN', :].plot(kind='scatter', x='flatness_metric', y='scalar_coupling_constant', color='b', figsize=(15, 6), s=0.5, ax=ax[0, 1])\nax[0, 1].xaxis.set_label_text(\"\")\nax[0, 1].set_title('1JHN')\ntrain.loc[train.type=='3JHC', :].plot(kind='scatter', x='flatness_metric', y='scalar_coupling_constant', color='b', figsize=(15, 6), s=0.5, ax=ax[1, 0])\nax[1, 0].xaxis.set_label_text(\"\")\nax[1, 0].set_title('3JHC')\ntrain.loc[train.type=='2JHC', :].plot(kind='scatter', x='flatness_metric', y='scalar_coupling_constant', color='b', figsize=(15, 6), s=0.5, ax=ax[1, 1])\nax[1, 1].xaxis.set_label_text(\"\")\nax[1, 1].set_title('2JHC')\nfig.text(0.5, 0.04, 'FLATNESS METRIC', ha='center', va='center')\nfig.text(0.06, 0.5, 'SCALAR COUPLING CONSTANT', ha='center', va='center', rotation='vertical')\nplt.show()","49223270":"fig, ax = plt.subplots(nrows=2, ncols=2, figsize = (18, 6))\ntrain.loc[train.type=='3JHH', :].plot(kind='scatter', x='flatness_metric', y='scalar_coupling_constant', color='b', figsize=(15, 6), s=0.5, ax=ax[0, 0])\nax[0, 0].xaxis.set_label_text(\"\")\nax[0, 0].yaxis.set_label_text(\"\")\nax[0, 0].set_title('3JHH')\ntrain.loc[train.type=='1JHC', :].plot(kind='scatter', x='flatness_metric', y='scalar_coupling_constant', color='b', figsize=(15, 6), s=0.5, ax=ax[0, 1])\nax[0, 1].xaxis.set_label_text(\"\")\nax[0, 1].yaxis.set_label_text(\"\")\nax[0, 1].set_title('1JHC')\ntrain.loc[train.type=='2JHN', :].plot(kind='scatter', x='flatness_metric', y='scalar_coupling_constant', color='b', figsize=(15, 6), s=0.5, ax=ax[1, 0])\nax[1, 0].xaxis.set_label_text(\"\")\nax[1, 0].yaxis.set_label_text(\"\")\nax[1, 0].set_title('2JHN')\ntrain.loc[train.type=='3JHN', :].plot(kind='scatter', x='flatness_metric', y='scalar_coupling_constant', color='b', figsize=(15, 6), s=0.5, ax=ax[1, 1])\nax[1, 1].xaxis.set_label_text(\"\")\nax[1, 1].yaxis.set_label_text(\"\")\nax[1, 1].set_title('3JHN')\nfig.text(0.5, 0.04, 'FLATNESS METRIC', ha='center', va='center')\nfig.text(0.06, 0.5, 'SCALAR COUPLING CONSTANT', ha='center', va='center', rotation='vertical')\nplt.show()","71057c0e":"fig, ax = plt.subplots(nrows=2, ncols=2, figsize = (18, 6))\ntrain.loc[train.type=='2JHH', :].plot(kind='scatter', x='bond_angle_plane', y='scalar_coupling_constant', color='b', figsize=(15, 6), s=0.5, ax=ax[0, 0])\nax[0, 0].xaxis.set_label_text(\"\")\nax[0, 0].yaxis.set_label_text(\"\")\nax[0, 0].set_title('2JHH')\ntrain.loc[train.type=='1JHN', :].plot(kind='scatter', x='bond_angle_plane', y='scalar_coupling_constant', color='b', figsize=(15, 6), s=0.5, ax=ax[0, 1])\nax[0, 1].xaxis.set_label_text(\"\")\nax[0, 1].yaxis.set_label_text(\"\")\nax[0, 1].set_title('1JHN')\ntrain.loc[train.type=='3JHC', :].plot(kind='scatter', x='bond_angle_plane', y='scalar_coupling_constant', color='b', figsize=(15, 6), s=0.5, ax=ax[1, 0])\nax[1, 0].xaxis.set_label_text(\"\")\nax[1, 0].yaxis.set_label_text(\"\")\nax[1, 0].set_title('3JHC')\ntrain.loc[train.type=='2JHC', :].plot(kind='scatter', x='bond_angle_plane', y='scalar_coupling_constant', color='b', figsize=(15, 6), s=0.5, ax=ax[1, 1])\nax[1, 1].xaxis.set_label_text(\"\")\nax[1, 1].yaxis.set_label_text(\"\")\nax[1, 1].set_title('2JHC')\nfig.text(0.5, 0.04, 'BOND ANGLE - PLANE', ha='center', va='center')\nfig.text(0.06, 0.5, 'SCALAR COUPLING CONSTANT', ha='center', va='center', rotation='vertical')\nplt.show()","1201212b":"fig, ax = plt.subplots(nrows=2, ncols=2, figsize = (18, 6))\ntrain.loc[train.type=='3JHH', :].plot(kind='scatter', x='bond_angle_plane', y='scalar_coupling_constant', color='b', figsize=(15, 6), s=0.5, ax=ax[0, 0])\nax[0, 0].xaxis.set_label_text(\"\")\nax[0, 0].yaxis.set_label_text(\"\")\nax[0, 0].set_title('3JHH')\ntrain.loc[train.type=='1JHC', :].plot(kind='scatter', x='bond_angle_plane', y='scalar_coupling_constant', color='b', figsize=(15, 6), s=0.5, ax=ax[0, 1])\nax[0, 1].xaxis.set_label_text(\"\")\nax[0, 1].yaxis.set_label_text(\"\")\nax[0, 1].set_title('1JHC')\ntrain.loc[train.type=='2JHN', :].plot(kind='scatter', x='bond_angle_plane', y='scalar_coupling_constant', color='b', figsize=(15, 6), s=0.5, ax=ax[1, 0])\nax[1, 0].xaxis.set_label_text(\"\")\nax[1, 0].yaxis.set_label_text(\"\")\nax[1, 0].set_title('2JHN')\ntrain.loc[train.type=='3JHN', :].plot(kind='scatter', x='bond_angle_plane', y='scalar_coupling_constant', color='b', figsize=(15, 6), s=0.5, ax=ax[1, 1])\nax[1, 1].xaxis.set_label_text(\"\")\nax[1, 1].yaxis.set_label_text(\"\")\nax[1, 1].set_title('3JHN')\nfig.text(0.5, 0.04, 'BOND ANGLE - PLANE', ha='center', va='center')\nfig.text(0.06, 0.5, 'SCALAR COUPLING CONSTANT', ha='center', va='center', rotation='vertical')\nplt.show()","4cfc1940":"fig, ax = plt.subplots(nrows=2, ncols=2, figsize = (18, 6))\ntrain.loc[train.type=='2JHH', :].plot(kind='scatter', x='bond_angle_axis', y='scalar_coupling_constant', color='b', figsize=(15, 6), s=0.5, ax=ax[0, 0])\nax[0, 0].xaxis.set_label_text(\"\")\nax[0, 0].yaxis.set_label_text(\"\")\nax[0, 0].set_title('2JHH')\ntrain.loc[train.type=='1JHN', :].plot(kind='scatter', x='bond_angle_axis', y='scalar_coupling_constant', color='b', figsize=(15, 6), s=0.5, ax=ax[0, 1])\nax[0, 1].xaxis.set_label_text(\"\")\nax[0, 1].yaxis.set_label_text(\"\")\nax[0, 1].set_title('1JHN')\ntrain.loc[train.type=='3JHC', :].plot(kind='scatter', x='bond_angle_axis', y='scalar_coupling_constant', color='b', figsize=(15, 6), s=0.5, ax=ax[1, 0])\nax[1, 0].xaxis.set_label_text(\"\")\nax[1, 0].yaxis.set_label_text(\"\")\nax[1, 0].set_title('3JHC')\ntrain.loc[train.type=='2JHC', :].plot(kind='scatter', x='bond_angle_axis', y='scalar_coupling_constant', color='b', figsize=(15, 6), s=0.5, ax=ax[1, 1])\nax[1, 1].xaxis.set_label_text(\"\")\nax[1, 1].yaxis.set_label_text(\"\")\nax[1, 1].set_title('2JHC')\nfig.text(0.5, 0.04, 'BOND ANGLE - AXIS', ha='center', va='center')\nfig.text(0.06, 0.5, 'SCALAR COUPLING CONSTANT', ha='center', va='center', rotation='vertical')\nplt.show()","876b4301":"fig, ax = plt.subplots(nrows=2, ncols=2, figsize = (18, 6))\ntrain.loc[train.type=='3JHH', :].plot(kind='scatter', x='bond_angle_axis', y='scalar_coupling_constant', color='b', figsize=(15, 6), s=0.5, ax=ax[0, 0])\nax[0, 0].xaxis.set_label_text(\"\")\nax[0, 0].yaxis.set_label_text(\"\")\nax[0, 0].set_title('3JHH')\ntrain.loc[train.type=='1JHC', :].plot(kind='scatter', x='bond_angle_axis', y='scalar_coupling_constant', color='b', figsize=(15, 6), s=0.5, ax=ax[0, 1])\nax[0, 1].xaxis.set_label_text(\"\")\nax[0, 1].yaxis.set_label_text(\"\")\nax[0, 1].set_title('1JHC')\ntrain.loc[train.type=='2JHN', :].plot(kind='scatter', x='bond_angle_axis', y='scalar_coupling_constant', color='b', figsize=(15, 6), s=0.5, ax=ax[1, 0])\nax[1, 0].xaxis.set_label_text(\"\")\nax[1, 0].yaxis.set_label_text(\"\")\nax[1, 0].set_title('2JHN')\ntrain.loc[train.type=='3JHN', :].plot(kind='scatter', x='bond_angle_axis', y='scalar_coupling_constant', color='b', figsize=(15, 6), s=0.5, ax=ax[1, 1])\nax[1, 1].xaxis.set_label_text(\"\")\nax[1, 1].yaxis.set_label_text(\"\")\nax[1, 1].set_title('3JHN')\nfig.text(0.5, 0.04, 'BOND ANGLE - AXIS', ha='center', va='center')\nfig.text(0.06, 0.5, 'SCALAR COUPLING CONSTANT', ha='center', va='center', rotation='vertical')\nplt.show()","0619cdff":"This is a very flat molecule and all its atomic bonds lie on its principal axis. If I'm not mistaken it looks like it belongs to the acetylene family. Now let's look at a molecule with a high angle between one of its bonds and its principal 1D axis.","b44c8a20":"These features look a lot stronger. 1JHC 2JHN and 3JHN bonds clearly show useful trends.\n\n## Bond Angle with Molecule Principle Axis","121f995b":"The hydrogen-nitrogen bond in this molecule lies almost exactly on the principal axis. PCA has in this case identifed one of two lines that could be thought of as the principal axis, and the method will have to be refined.","ba870310":"![](https:\/\/www.biotage.com\/uploads\/photos\/2013_web_banners5.jpg)\n\n\n# Molecular Geometry Feature Engineering\n---\n\nThe shape of molecules is principally related to the quantum mechanical properties of electron interactions. Electron interaction also mediates the strength of the nuclear coupling constant between bound atoms, so features derived from their 3D distribution may prove useful.\n\nThis kernel uses Singular Value Decomposition (SVD) to calculate the 2D plane of best fit for all molecules containing 4 or more atoms, and then calculates both the mean normalised distance of all atoms from this plane to provide a measure of 'flatness' for the molecule. The angles subtended by this plane and the atomic bonds in the molecule are then calculated.\n\nSome caution should be used with the latter feature. Molecules without a clear 2D plane of best fit - tetrahedral structures like methane for example - may yield angle measurements that are not informative. You may want to experiment and use a threshold of molecular 'flatness' above which angle measurements are discarded. I have calculated flatness in such a way that 0 represents a totally flat molecule. Molecules comprising 3 atoms or fewer are always flat so this measure is not informative for them; I have filled in these values with `np.nan`.\n\nThis kernel also performs a simple PCA with SVD to extract the principal axis of each molecule, along with the angle subtended by each bond with it. This can be done with molecules of at least 3 atoms. Again, molecules without a clear orientation may yield arbitrary results; however, this kernel contains plenty of ideas to get you started. These features take a long time to process, around 12 hours in total. I'm putting the finished file into a dataset so check in the comments section for a link if you don't want to engineer them yourself.\n\nI'll be using the visualisation library demonstrated in [this excellent kernel](https:\/\/www.kaggle.com\/borisdee\/how-to-easy-visualization-of-molecules) to show some feature examples. ","738133e0":"Most of the hydrogen-hydrogen bonds in this molecule lie orthogonal to the principal axis. Let's examine a molecule where the reverse is true.","d4cc4e2a":"This molecule has a complex shape that cannot easily be mapped to a 2D plane. Let's try one with a very low flatness metric.","afc599b0":"# EDA\n---\n## Flatness Metric","1c3e6380":"This molecule fits perfectly onto a 2D plane. Let's examine a bond with a high angle between itself and the plane of best fit.","f23b189e":"This molecule, which looks suspiciously like a poodle, is flat along the axis of its larger atoms - there's an idea for further feature engineering - but one of the hydrogen-hydrogen bonds is orthogonal to this. Will this affect its coupling constant relative to other H-H bonds? Let's look at an atom with a small angle between its 2D plane and one of its bonds. ","e8e39577":"# Feature Evaluation\n\nNow we can examine some of the results. Let's start with a molecule that has a high flatness metric. Recall that the higher this metric, the *less* flat a molecule is.","5713a012":"Again a mixed bag with a few areas that might benefit histogram splitting algorithms like LightGBM. 2JHH bonds for example show their lowest values with low bond-axis angle values. This is the weakest feature so far and I'll be working on improving it. There are undoubtedly many ways this approach can be extended with some more specific feature engineering but this kernel will hopefully be a useful primer to get you started.\n\nGood luck in the competition!","67213896":"The flatness metric in isolation clearly isn't a strong feature, and could probably be improved by removing hydrogen bonds from its calculation. There are some aspects that might be useful, for example 2JHH and 1JHC bonds with a low flatness metric don't display high scalar coupling constants. \n\n## Bond Angle with Molecule Plane"}}