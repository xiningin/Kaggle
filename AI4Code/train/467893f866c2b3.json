{"cell_type":{"5dc935c8":"code","a6b4a42d":"code","3794453a":"code","54a2f556":"code","8ca498fc":"code","69829edd":"code","68d936d4":"code","3e4b90ef":"code","40f9b4d5":"code","cb2990af":"code","78a583d0":"code","3dad92f9":"code","6a03ea6b":"code","e4224835":"code","69333730":"code","562bc4da":"code","fabdd808":"code","2a86a83c":"code","d604a000":"code","452f3ddc":"code","e5b8f4f4":"code","72dca834":"code","6127dbda":"code","37a791ea":"code","61e40292":"code","ca3b6639":"code","64d527d3":"code","69a93a07":"code","81217c4e":"code","aa610d65":"code","fd6128cb":"code","f1976263":"code","330b3df6":"code","20a2b67c":"code","d64534c6":"markdown","543f733a":"markdown","7d40e5b6":"markdown","1211260d":"markdown","f3eab3de":"markdown","3bd87cbb":"markdown","5ad0edba":"markdown"},"source":{"5dc935c8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a6b4a42d":"import matplotlib.pyplot as plt\ndata = {\n'year': [2010, 2011, 2012,\n2010, 2011, 2012,\n2010, 2011, 2012],\n'team': ['FCBarcelona', 'FCBarcelona', 'FCBarcelona',\n'RMadrid', 'RMadrid', 'RMadrid',\n'ValenciaCF', 'ValenciaCF', 'ValenciaCF'],\n'wins': [30, 28, 32, 29, 32, 26, 21, 17, 19],\n'draws': [6, 7, 4, 5, 4, 7, 8, 10, 8],\n'losses': [2, 3, 2, 4, 2, 5, 9, 11, 11]\n}\nfootball = pd.DataFrame(data, columns = ['year', 'team', 'wins', 'draws', 'losses'])\n","3794453a":"football","54a2f556":"edu = pd.read_csv('\/kaggle\/input\/ense3-lesson\/files\/ch02\/educ_figdp_1_Data.csv',\n                  na_values=':', usecols=['TIME', 'GEO', 'Value'])\nedu","8ca498fc":"edu.head() #look at the first elements to know the structure of the table ","69829edd":"edu.head(34)","68d936d4":"edu.tail() ","3e4b90ef":"edu.describe()","40f9b4d5":"edu['Value']","cb2990af":"edu[10:14]","78a583d0":"edu.iloc[90:94][['TIME','GEO']] ","3dad92f9":"edu[edu['Value'] > 6.5].tail()","6a03ea6b":"edu[edu[\"Value\"].isnull()].head()","e4224835":"edu.max(axis = 0)","69333730":"print ('Pandas max function:', edu['Value'].max())\nprint ('Python max function:', max(edu['Value']))","562bc4da":"s = edu[\"Value\"]\/100\ns.head()","fabdd808":"s = edu[\"Value\"].apply(np.sqrt)\ns.head()","2a86a83c":"s = edu[\"Value\"].apply(lambda d: d**2)\ns.head()","d604a000":"edu['ValueNorm'] = edu['Value']\/edu['Value'].max()\nedu.tail()","452f3ddc":"edu.drop('ValueNorm', axis = 1, inplace = True)\nedu.head()","e5b8f4f4":"edu = edu.append({\"TIME\": 2000, \"Value\": 5.00, \"GEO\": 'a'},\n                  ignore_index = True)\nedu.tail()","72dca834":"edu.drop(max(edu.index), axis = 0, inplace = True)\nedu.tail()","6127dbda":"eduDrop = edu[~edu[\"Value\"].isnull()].copy()\neduDrop.head()","37a791ea":"eduDrop = edu.dropna(how = 'any', subset = [\"Value\"])\neduDrop.head()","61e40292":"eduFilled = edu.fillna(value = {\"Value\": 0})\neduFilled.head()","ca3b6639":"edu.sort_values(by = 'Value', ascending = False,\n                inplace = True)\nedu.head()","64d527d3":"edu.sort_index(axis = 0, ascending = True, inplace = True)\nedu.head()","69a93a07":"group = edu[[\"GEO\", \"Value\"]].groupby('GEO').mean()\ngroup.head()","81217c4e":"filtered_data = edu[edu[\"TIME\"] > 2005]\npivedu = pd.pivot_table(filtered_data, values = 'Value',\n                        index = ['GEO'], columns = ['TIME'])\npivedu.head()","aa610d65":"pivedu.loc[['Spain','Portugal'], [2006,2011]]","fd6128cb":"pivedu = pivedu.drop(['Euro area (13 countries)',\n                      'Euro area (15 countries)',\n                      'Euro area (17 countries)',\n                      'Euro area (18 countries)',\n                      'European Union (25 countries)',\n                      'European Union (27 countries)',\n                      'European Union (28 countries)'\n                      ], axis=0)\npivedu = pivedu.rename(\n    index={'Germany (until 1990 former territory of the FRG)': 'Germany'})\npivedu = pivedu.dropna()\npivedu.rank(ascending=False, method='first').head()","f1976263":"totalSum = pivedu.sum(axis = 1)\n\ntotalSum.rank(ascending = False, method = 'dense').sort_values().head()","330b3df6":"totalSum = pivedu.sum(axis = 1).sort_values(ascending = False)\ntotalSum.plot(kind = 'bar', style = 'b', alpha = 0.4,\n              title = \"Total Values for Country\")","20a2b67c":"my_colors = ['b', 'r', 'g', 'y', 'm', 'c']\nax = pivedu.plot(kind='barh', stacked=True, color=my_colors, figsize=(12, 6))\nax.legend(loc='center left', bbox_to_anchor=(1, 0.5))\nplt.savefig('Value_Time_Country.png', dpi=300, bbox_inches='tight')","d64534c6":"1. There are 384 rows and 3 columns","543f733a":"3. Cela retourne les 5 derniers lignes du tableau.","7d40e5b6":"5. L'index retourne une certaine partie du tableau que l'on a s\u00e9lectionn\u00e9 gr\u00e2ce \u00e0 sa position. Le premier index est le num\u00e9ro de la premi\u00e8re ligne dont on veut regarder les valeurs de Temps et de G\u00e9ographie, et le deuxi\u00e8me index est le num\u00e9ro de la ligne apr\u00e8s la derni\u00e8re ligne qui l'on souhaite.","1211260d":"4. La fonction describe donne la somme totale des valeurs des colonnes o\u00f9 il y a des valeurs num\u00e9riques, ainsi que la moyenne, l'\u00e9cart type, le minimum, maximum, et les valeurs des quartiles.  ","f3eab3de":"7. Le param\u00e8tre ascending=False permet de classer les \u00e9lements par ordre d\u00e9croissant. ","3bd87cbb":"6. L'op\u00e9ration edu[\u2019Value\u2019] > 6.5 donne les lignes du tableau o\u00f9 la valeur de la colonne Value est sup\u00e9rieure \u00e0 6.5. Si on applique  indexedu[edu[\u2019Value\u2019] > 6.5], cela donne les index pour lesquels la condition est respect\u00e9e. C'est une s\u00e9rie car cela affiche une ligne avec plusieurs \u00e9lements.  ","5ad0edba":"2. Lorsque nous donnons un nombre n comme argument \u00e0 la m\u00e9thode head(), elle donne les n-1 premi\u00e8res lignes du tableau"}}