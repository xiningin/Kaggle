{"cell_type":{"6ec7a00e":"code","a45a1f10":"code","e992ffe6":"code","ab00b4f0":"code","6a9afba1":"code","ec245ad3":"code","2a561853":"code","c2a0802e":"code","08da15f4":"code","c8e9567a":"code","d1781102":"code","7d8faac5":"code","10434649":"code","50b545da":"code","414eae70":"code","01e2a0c7":"code","012d8788":"code","bef7ff3b":"code","ced6fdd1":"code","e9a055a5":"code","b1e95452":"code","8ec0f1d4":"code","092d6c45":"code","74778e5a":"code","88b8bbb5":"code","aa49fd42":"code","482cf871":"code","d642e01d":"code","c7661d1d":"code","796f7b4b":"code","68f6a8dd":"code","a6dc9610":"code","96620a45":"code","6c51862a":"code","a8e182cd":"code","fcefd9f7":"code","8b414870":"code","be95d824":"code","6f1e9b90":"code","6f71747a":"code","61c506df":"code","bfbfe317":"code","05b59ada":"code","7706044a":"code","805d837c":"code","9e0bdac4":"code","852c42d2":"code","fbd4a873":"code","6ade7777":"code","86566a21":"code","efa87d9d":"code","099ae4da":"code","0b6b9170":"code","a62917e5":"code","f1e36e60":"code","5e71230d":"code","e56f85d5":"code","62493286":"code","7c477c16":"code","509aa997":"code","3b0dbd33":"code","ff87e4b0":"code","942e2f05":"code","b0c83e00":"code","e872755b":"code","7f779e69":"code","e4ef1d3e":"code","a519a810":"code","8f368dad":"code","1f14c372":"code","9777b769":"code","93ca7349":"code","d42b79e0":"code","5bd08b3e":"code","f38a778b":"code","c560b3c4":"code","33259dc6":"code","831d7fab":"code","71e8a14a":"code","40c3fcab":"code","3a425f73":"code","4cdb4c72":"code","9242775a":"code","9d24f927":"code","a0c95bd2":"code","36916bca":"code","71d576d0":"code","ad5ea260":"code","16fefa7e":"code","dcb8bcc2":"code","8aea2b47":"code","b17414dc":"code","45d0757d":"code","7eab67c9":"code","f7e71253":"code","e0792026":"code","3b40056f":"code","48b0a6f3":"code","b0dbe62d":"code","89d131e0":"code","b199a584":"code","29359251":"code","c04ee70a":"code","70dc81a8":"code","433405db":"code","74c7321a":"code","065ffea5":"code","6a6970ae":"code","8b2046b5":"code","50f166f4":"code","68f7fa09":"code","ce03a0b5":"code","e47df319":"code","8e05c85d":"code","66510b54":"code","77d75242":"code","c665764e":"code","ccf07f86":"code","2676dfe7":"code","f2ac8c30":"code","7b9100b8":"code","7f8f6d81":"code","89dac587":"code","ff094cb6":"code","081bff47":"code","e3a25783":"code","282012c2":"code","9890b0af":"code","2775cfc6":"code","6fb31d04":"code","5f48e467":"code","2e0e1407":"code","fce2bbcb":"code","15aa0c49":"code","82523820":"code","9b3468f4":"code","825395b9":"code","6bbe2d64":"code","43fa72b4":"code","1154c67c":"code","bd1d211f":"code","5e70b2ac":"code","dc5fae66":"code","ff0dcb6e":"code","a3646940":"code","b2bebb5e":"code","172b3d2d":"code","eeb4cafe":"code","8fef323b":"code","afe683ff":"code","d70db21c":"code","82400f52":"code","a2dc609a":"code","2cee7714":"code","dddd3715":"code","3d14eb85":"code","c4721393":"code","50b3687e":"code","af67bf89":"code","56ad10df":"code","c062d26c":"code","74c6a01c":"code","790dd633":"code","d79e8da6":"code","edf70b1b":"code","70fede40":"code","d44cfc36":"code","70aaae08":"code","f0923818":"code","f33d304b":"code","bcc4e27e":"code","110a380f":"code","95a4c0c9":"code","6981c8ed":"code","f65dd05d":"code","63c797a6":"code","a4ebb02c":"code","ed8b8468":"code","b6d32289":"code","e8810e1f":"code","8c52f577":"code","f85c0128":"code","103f0b51":"code","49d8ada9":"code","cbcf3475":"code","43650b02":"code","784efa46":"code","60c66ea3":"code","9ed67d58":"code","469cb6b3":"code","1a9ddbfa":"code","fc1713db":"code","ed8b09f9":"code","7a0b03ad":"code","7232e8c6":"code","cb8f0f8a":"code","79bfa59d":"code","7acdee8e":"code","b66a4bf8":"code","72ad7ea9":"code","4858a245":"code","fce604c2":"code","10c1db53":"code","f6826cc1":"code","9172efa5":"code","efa6b7a3":"code","1e674ea1":"code","d9765997":"code","2881d114":"code","822a6904":"code","04a01e24":"code","912c8a70":"code","1b6d906f":"code","b526fafa":"code","3b956ecf":"code","1ade6149":"code","4272d6bc":"code","86b47981":"code","a00f9fd2":"code","eaded9f1":"code","ece4ac0b":"code","3efe460a":"code","c05ee86e":"code","5a845301":"code","f63a829d":"code","1df9c446":"code","99fc47db":"code","1b11fe50":"code","da39a0a4":"code","72ace8c8":"code","3dda0dbb":"code","02ec70e4":"code","24ec4534":"code","7c1e65bb":"code","8d11a5a4":"code","69ab6221":"code","c7561f47":"code","8225a408":"code","3dc9354c":"code","de1712dd":"code","7cad4e5f":"code","f4c0d4dc":"code","c10f22e6":"code","43886e6f":"code","db6b9c63":"code","5f8df52f":"code","5e938aea":"code","add21393":"code","7eff487b":"code","40ea889f":"code","f97cbe26":"code","d47e5e77":"code","552c06cd":"code","604a61f7":"code","81abe20a":"code","b6678525":"code","598f7e28":"code","183b6e8a":"code","d89ee655":"code","4121eda8":"code","8da1d286":"code","d3f76994":"code","a2929570":"code","9d8d60ec":"code","be0ab08c":"code","b246d6c8":"code","29455967":"code","897b39d4":"code","d72617cb":"code","f647e28f":"code","9e061a89":"code","1bda9db8":"code","2afba0b3":"code","56fcc4d9":"code","9147d353":"code","4f6e4068":"code","11ef8119":"code","033df7f0":"code","fabdcc9e":"code","44659949":"code","05022317":"code","b3d6a626":"code","12c2a745":"code","9fa2c3b5":"code","8f861b5f":"code","f8617efb":"code","b909d279":"code","c7f019c0":"code","b423a9a5":"code","2e3a4b37":"code","5de150a7":"code","32862a68":"code","e5005914":"code","8e1979ae":"code","583d0a36":"code","a055ca67":"code","bab87e68":"code","8bf731d0":"code","9dbf7c60":"code","56ca9f73":"code","15c118ad":"code","fb047977":"code","e6bd76b8":"code","e4273da6":"code","d7d8a54c":"code","2ee5e2c1":"code","4621bc4f":"code","47d2ea66":"code","8d546bb3":"code","1448c354":"code","43e269a5":"code","60ce3580":"code","648e5ec9":"code","86f09673":"code","b8805c7b":"code","0f49804a":"code","5b537d8b":"code","94a9d73f":"code","24e56fc6":"code","1deb031b":"code","8d7e2b0b":"code","70839e1f":"code","1a8669da":"code","a9707689":"code","3af631f0":"code","75bdc7da":"code","c82c9bd0":"code","313997b6":"code","51ad08dc":"code","b58a7e15":"code","136ab811":"code","fff2616b":"code","640953fd":"code","8438ce2a":"code","66ac260e":"code","1c295d52":"code","24665ceb":"code","2b649905":"code","2d196b53":"code","cd4047a0":"code","3515bc31":"code","a490e88f":"code","80769003":"code","b786e259":"code","73a8aa88":"code","7919573c":"code","61b05dc5":"code","3166ee1a":"code","cb6cc936":"code","c664eec4":"code","8c2db474":"code","97bc9600":"code","7933d1ba":"code","9821b934":"code","53e845d8":"code","ff108a16":"code","f62a9437":"code","d35f2681":"code","1b86930c":"code","6c55b926":"code","b0a7cb54":"code","9113084b":"code","6f6d8cb6":"code","2b29eaad":"code","67fb9d43":"code","7e60c6c9":"code","6725157a":"code","fc351f4b":"code","915510c9":"code","7e73637d":"code","e60ce683":"code","b34e7b1c":"code","d8b4940e":"code","8bf9ee25":"code","2e78cfb0":"code","18bd8746":"code","40f4bdfd":"code","c9f33495":"code","bf443d05":"code","ea811dd3":"code","ac27b231":"code","469b8b90":"code","3a31e433":"code","658b793f":"code","f80781fe":"code","993046fe":"code","56813092":"code","9ae6bb19":"code","6f78eae9":"code","0d5dffec":"code","2798dce2":"code","c1247837":"code","6c1423a8":"code","97550bd6":"code","a77d9e1f":"code","529c421b":"code","05c85620":"code","daf15bec":"code","0e5f1b64":"code","40d034c8":"code","3de2a492":"code","1f51148e":"code","99d7c019":"code","f3815c33":"code","7b5bafa7":"code","ed61ff0d":"code","5a9ae1c0":"code","9cff4475":"code","c0e5e66b":"code","dc35e726":"code","734b4fd2":"code","1006a8d8":"code","6623d11b":"code","5033f1d2":"code","115854ac":"code","b207ef56":"code","8a27b5db":"code","5064a184":"code","398c9df1":"code","301f7255":"code","b6429ebb":"code","3786833e":"code","427eb100":"code","da15304f":"code","d5237f00":"code","2ce9c2ae":"code","21fd7852":"code","237c5c33":"code","419ae23f":"code","661d9e4d":"code","56e40984":"code","4b51c836":"code","90f25bfb":"code","f8adf026":"code","b6f79c51":"code","512f0cd4":"code","dde6113e":"code","8aa52496":"code","9c1b5dc7":"code","38835ca0":"code","210cada0":"code","0d59abcc":"code","04b6575c":"code","9b4fe9e9":"code","1ea0d456":"code","e3ee9cea":"code","e1f87c93":"code","64e3f759":"code","b24da722":"code","1edc677a":"code","ce389e12":"code","9a56ee25":"code","75c3c54a":"code","8b33693b":"code","8cbcda7d":"code","2ad9e4b1":"code","efe42658":"code","96ea9cf4":"code","5e66f1d5":"code","ee6aaed7":"code","fc381135":"code","48006a57":"code","63be70a3":"code","fb040615":"code","d7b59f3c":"code","f7fbfa24":"code","81e94031":"code","47b67528":"code","da279fd0":"code","a307d64e":"code","136ecbb4":"code","d5008a8d":"code","cb84edb4":"code","bd9ec3e7":"code","4664153c":"code","a433365a":"code","be26d26e":"code","159fe2ef":"code","3bd62764":"code","fe1af1aa":"code","52f0524e":"code","a18b5e42":"code","5829e4ee":"code","35201120":"code","44e4f8ef":"code","be4f11bd":"code","86c764f9":"code","5be8771d":"code","c139425b":"code","c9d99110":"code","1dda253d":"code","aa4f3aed":"code","ac4e284f":"markdown","846db966":"markdown","5be8df9c":"markdown","9bd7b1e4":"markdown","440f560a":"markdown","40139a3c":"markdown","c07807d7":"markdown","7a9bd5c1":"markdown","8491132a":"markdown","48caed80":"markdown","fbedebc9":"markdown","5d94635f":"markdown","3e423680":"markdown","755a6ddf":"markdown","398b87f6":"markdown","b30e76fb":"markdown","f069c3e9":"markdown","35de4242":"markdown","2b82da65":"markdown","6135ef93":"markdown","f60c6969":"markdown","aa55e0a8":"markdown","6818b389":"markdown","3e5b5db4":"markdown","589831f6":"markdown","c4695027":"markdown","5f509eb8":"markdown","4eb06a0f":"markdown","367a90aa":"markdown","8e745ffb":"markdown","dd9f0ead":"markdown","d4629606":"markdown","0ce6ff74":"markdown","ca9ef630":"markdown","640be85b":"markdown","bb80ac5a":"markdown","8fcc3190":"markdown","f6878dda":"markdown","1de997d4":"markdown","64cab211":"markdown","a4fa2697":"markdown","e431ba48":"markdown","5a79ba20":"markdown","742945f3":"markdown","772bf56d":"markdown","aa163519":"markdown","d2fb90c8":"markdown","a41b732c":"markdown","1b7e78d0":"markdown","ff08f0a8":"markdown","68a8a390":"markdown","bf7134c1":"markdown","97ec5247":"markdown","8e63683c":"markdown","a1c492a8":"markdown","701f963f":"markdown","0ef775d7":"markdown","354b3b46":"markdown","0f319d1b":"markdown","11c048f4":"markdown","6e0a09f1":"markdown","237a331b":"markdown","5402fd7b":"markdown","02c75982":"markdown","167ddf17":"markdown","701da624":"markdown","532315ca":"markdown","06dc048c":"markdown","450e5344":"markdown","cea69ca5":"markdown","a1267348":"markdown","5d5e0e09":"markdown","cda23b93":"markdown","67173c94":"markdown","09be716e":"markdown","0c61f5cf":"markdown","a7ee91bd":"markdown","6c887cb5":"markdown","9cee3ddb":"markdown","b4c8ec40":"markdown","3a401aec":"markdown","19df73da":"markdown","863ebaaa":"markdown","805c3b76":"markdown","329948a2":"markdown","081a1c72":"markdown","b9e50491":"markdown","f3515324":"markdown","f7eb28e1":"markdown","dcf3f7f2":"markdown","277728a4":"markdown","cee7eb92":"markdown","9553e2fd":"markdown","c55660da":"markdown","71f97635":"markdown","34872664":"markdown","24cd52a2":"markdown","1211f0c8":"markdown","994a3142":"markdown","6f7904f2":"markdown","ed9a9402":"markdown","8ef83367":"markdown","409bc1b9":"markdown","9286260f":"markdown","61363464":"markdown","85fa14d5":"markdown","627858ba":"markdown","4dd7abe6":"markdown","70b30b04":"markdown","3a216d57":"markdown","c0adfe59":"markdown","4a5cb824":"markdown","53120d30":"markdown","01693471":"markdown","e4cbbcfa":"markdown","d3560348":"markdown","01174042":"markdown","2390b5ab":"markdown","6b63b19c":"markdown","2caec740":"markdown","7d9f7f96":"markdown","83dea141":"markdown","7ed5e274":"markdown","e4009179":"markdown","710bc7da":"markdown","99be0685":"markdown","08c069bb":"markdown","43947189":"markdown","10d62d1c":"markdown","fad336c7":"markdown","325ed4e6":"markdown","ae908945":"markdown","6a934542":"markdown","c9e7e3cb":"markdown","c37804f3":"markdown","da182c76":"markdown","0a7f6e30":"markdown","0c3c7e54":"markdown","53cae32c":"markdown","fc0089c9":"markdown","dbd37d94":"markdown","946dcc57":"markdown","61dfeed9":"markdown","6fd68ee5":"markdown","6d548cde":"markdown","58500e79":"markdown","9ab4fa55":"markdown","68fb3638":"markdown","32a6ea95":"markdown","4e193518":"markdown","0726f2e7":"markdown","06bcb275":"markdown","101756a5":"markdown","0fd7d25b":"markdown","4a027b4e":"markdown","ff72eb70":"markdown","1e6ddb83":"markdown","4da79530":"markdown","32ea33c2":"markdown","efde26d3":"markdown","9632711c":"markdown","9670df30":"markdown","3e6addb9":"markdown","03936099":"markdown","aad1d7a1":"markdown","758d214e":"markdown","bce84732":"markdown","38fde2d1":"markdown","5a087ec9":"markdown","739c2eea":"markdown","ea3441f2":"markdown","1e5a4b6a":"markdown","a57d1f0b":"markdown","130c319e":"markdown","499cbc32":"markdown","607f8dd7":"markdown","32025796":"markdown","34f48d1a":"markdown","ae2ce264":"markdown","1b7e6371":"markdown","07438085":"markdown","3ea3548a":"markdown","723d0237":"markdown","094485b9":"markdown","11df8f19":"markdown","7bdd4094":"markdown","10eb0d8a":"markdown","6d3bde72":"markdown","6ff393e9":"markdown","9e780bb3":"markdown","224c4f7b":"markdown","2fc15664":"markdown","9cb06a9f":"markdown","bf800769":"markdown","48df6c83":"markdown","de3fe9e6":"markdown","18510dde":"markdown","cdacc645":"markdown","974ce28a":"markdown","8d1b9e54":"markdown","8c02dc9e":"markdown","075c3f71":"markdown","c8ce7e46":"markdown","2ad805e1":"markdown","d506f5e6":"markdown","0d46ef5a":"markdown","a7372ac3":"markdown","7245a6c7":"markdown","5a52dc9d":"markdown","3134a8e4":"markdown","60b4b824":"markdown","0f444d3d":"markdown","5b9f6e25":"markdown","832b53a5":"markdown","e8dbdf7c":"markdown","c42c0a4e":"markdown","57760370":"markdown","8c17eaf5":"markdown","49e9b004":"markdown","4bf11895":"markdown","066fc1cd":"markdown","42254d66":"markdown","ff687e28":"markdown","0a152a30":"markdown","0f84abff":"markdown","0fe62ada":"markdown","3b42c3a1":"markdown","64670741":"markdown","ee492f4f":"markdown","b6693645":"markdown","ee789aca":"markdown","d869a77e":"markdown","c212fca3":"markdown","85d14bd9":"markdown","27ebb20d":"markdown","910b4f80":"markdown","b6eaee9a":"markdown","f4d00991":"markdown","d0c4360b":"markdown","7afe989f":"markdown","ea6342ce":"markdown","bd76fb89":"markdown","4df94e51":"markdown","c15b9451":"markdown","95e26939":"markdown","f55f2cec":"markdown","710f582f":"markdown","570aa5c1":"markdown","022e3234":"markdown","28584c9c":"markdown","85c2d9c8":"markdown","7ad84664":"markdown","4688aa28":"markdown","78cc18ee":"markdown","7c16c80d":"markdown","64a482cb":"markdown","89a72d4a":"markdown","babf01b3":"markdown","7b13ec1c":"markdown","a9ea38d1":"markdown","09749593":"markdown","7bf4b004":"markdown","730678d0":"markdown","48dabd1f":"markdown","1ac0bdc6":"markdown","9ef26494":"markdown","b505872f":"markdown","0d2c78ae":"markdown","9650098c":"markdown","6502f88a":"markdown","311786fe":"markdown","a288fff8":"markdown","3b5bb6fd":"markdown","e5af4249":"markdown","5dc78567":"markdown","ebdf6dad":"markdown","6c1da380":"markdown","9d4ecaae":"markdown","f490f41c":"markdown","a623d8e6":"markdown","692cfef6":"markdown","9ccb6f35":"markdown","266c1002":"markdown","2a492000":"markdown","5891c663":"markdown","95355546":"markdown","f0ecb840":"markdown","e499a0ec":"markdown","93668ba2":"markdown","93be4f3d":"markdown","a3780e91":"markdown","1a659c19":"markdown","3d8bfa24":"markdown","9f3f4c10":"markdown","834020ec":"markdown","d94a1c22":"markdown","e488f950":"markdown","2955c54f":"markdown","b88ab9a3":"markdown","cf44b0a6":"markdown","c456761d":"markdown","fe00e26f":"markdown","535ffab5":"markdown","da19ff6f":"markdown","c2a439b3":"markdown","66de56d8":"markdown","67331f30":"markdown","14149470":"markdown","2d39be1f":"markdown","613feef8":"markdown","73350261":"markdown","b8693cbc":"markdown","ffcc5d88":"markdown","afef4449":"markdown","3ab748c3":"markdown","d230ddc9":"markdown","2174cd6a":"markdown","f4b13084":"markdown","37772ff8":"markdown","a26db8a3":"markdown","532aa450":"markdown","feae3e8a":"markdown","2ea7495a":"markdown","6795f9f0":"markdown","0bb001be":"markdown","77928437":"markdown","a8a0241e":"markdown","024d835e":"markdown","a0560827":"markdown","f8023fb7":"markdown","1e7201da":"markdown","15800711":"markdown","ff597d08":"markdown","b9f0c5b6":"markdown","ec956b9f":"markdown","cb9e4d20":"markdown","f646e300":"markdown","7452be6e":"markdown","e5d97472":"markdown","52e3891d":"markdown","b7a2583b":"markdown","8752e55f":"markdown","03a08324":"markdown","614af306":"markdown","b5b53616":"markdown","a0066716":"markdown","75268ecc":"markdown","c526fa19":"markdown","dc1cd1f7":"markdown","757e6793":"markdown","c029051f":"markdown","9899a86f":"markdown","7b634e74":"markdown","481b4159":"markdown","2791cbe1":"markdown","433ca5a2":"markdown","82e2a4cd":"markdown","ee24dba7":"markdown","8a103558":"markdown","9f4f9835":"markdown","eaaeff5d":"markdown","aa515ef7":"markdown","284864df":"markdown","dae69799":"markdown","aead31be":"markdown","68d5583a":"markdown","cd2c1511":"markdown","2b48057f":"markdown"},"source":{"6ec7a00e":"print (\"Hello Python!\") \nprint (3)\n","a45a1f10":"print (\"\"\"Hong Gildong\n123 Ho, ABC Street,\nSamsung-dong, Gangnam-gu\nSeoul, Korea\"\"\")\n","e992ffe6":"print (\"Please enter your 4 digit code!\")\nmy_code = input() \n\nmy_code = input(\"Please enter your 4 digit code!\")","ab00b4f0":"print (\"What is your name?\") \nyour_name = input()\nprint (\"Welcome!\", your_name)","6a9afba1":"print (\"I love\" + \" \" + \"my car.\")\n\nprint (2+3)\n\nprint (\"2\" + \"3\") ","ec245ad3":"a = \"I was born in \"\nb= str(1999)\nprint (a + b)\n","2a561853":"a = 1234\nb= 5678\nc = \"1234\"\nd = \"5678\"\nprint (a + b)\nprint (c + d)","c2a0802e":"maker = \"CHEVROLET\"\nprint (maker[3])","08da15f4":"country = \"Korea\"\nprint (country[2])","c8e9567a":"word = \"ai2learn\"\nprint (word[2])\nprint (word[3])","d1781102":"maker = \"CHEVROLET\"\nprint (len(maker))\nprint (len(\"Hong Gildong\"))\na = 12345\nprint (len(str(a)))","7d8faac5":"maker = \"CHEVROLET\"\nprint (maker.lower())\nprint (maker.upper())","10434649":"maker = \"Mercedes\"\nyear = str(2020)\nmonth = \"June\"\n\nprint (len(maker))\nprint (maker.lower())\nprint (maker.upper())\nprint (month + \" \" + year)","50b545da":"first_add = 12345 + 56789\nfirst_sub = 543-321\nfirst_multi = 12 * 34\nfirst_div = 520\/24\nprint (first_add)\nprint (first_sub)\nprint (first_multi)\nprint (first_div)","414eae70":"rem1 = 15 % 2 \nrem2 = 133 % 7\nprint (rem1)\nprint (rem2)","01e2a0c7":"test1 = int(3.5)\ntest2 = float(3)\ntest3 = test1 + test2\ntest4 = str(3) +str(3.5)\n\nprint (test1)\nprint (test2)\nprint (test3)\nprint (test4)","012d8788":"gas_liter =5.5\nprice_per_liter = 3\nsum_price = gas_liter * price_per_liter\nprint (int(sum_price))\nprint (float(sum_price))","bef7ff3b":"testnumber1 = 1\ntestnumber2 = 2\ntestnumber3 = 3\n\na = testnumber3 > 2\nb = testnumber1< 2 \nc = testnumber1 == 1 \nd = testnumber1 != 2\ne = testnumber2 <= 2 \nf = testnumber2 >= 2\n\nprint (a)\nprint (b)\nprint (c)\nprint (d)\nprint (e)\nprint (f)\n","ced6fdd1":"situation1 = \"It is a new car!\"   \nsituation2 = \"It is a used car.\"\ncomment1 = \"Too expensive!!\"\ncomment2 = \"It is a good deal!\"\ncomment3 = \"It can give you headaches!\"\n\n\nanswer1 = situation1 + \" \" + comment1\nanswer2 = situation1 + \" \" + comment2\nanswer3 = situation2 + \" \" + comment3\nanswer4 = situation2 + \" \" + comment2\n\nprint (answer1)\nprint (answer2)\nprint (answer3) \nprint (answer4)\n","e9a055a5":"gas_tank = 10\n\nprint ( \"remaining gasoline\" )\n\ngas_used = 5\n\ngas_tank = gas_tank - gas_used\n\nprint (gas_tank)\n\n","b1e95452":"my_var = 1\nprint (my_var)\nmy_var = \"Hello\"\nprint (my_var)","8ec0f1d4":"name = \"John\"\nage  = 23 \n\nprint (\"My name is {}.\".format(name))\nprint (\"I am {}years old.\" .format(age))","092d6c45":"print('I want {0} or {1}'.format('BMW', 'Mercedes'))\nprint('I want {1} or {0}'.format('BMW', 'Mercedes'))","74778e5a":"print('My name is {0} and I am a {1} year old {2}.'.format('Joshua', 55, 'teacher'))","88b8bbb5":"my_speed = input(\"How fast are you going?\")\nint_speed = int(my_speed)\n\nif int_speed <= 50:\n   print (\"Go faster\")\n\nelse:\n  print (\"Slow down.\")\n","aa49fd42":"print (\"If the traffic light is red, enter 1. if the traffic light is blue or yellow, enter 2.\")\nt_code = int(input())\n\nif t_code == 1:\n  print (\"Stop the car.\")\nelse :\n    print (\"Go forward.\")","482cf871":"print (\"How much is the T-shirt?\")\nt_price = input()\nmy_price = int(t_price)\n\nif my_price  <= 30:\n  print (\"I can buy 2.\")\nelse :\n    print (\"Next time.\")\n","d642e01d":"print (\"If the traffic light is red, enter 1, if the traffic light is yellow, enter 2, and if the traffic light is green, enter 3.\")\nt_code = int(input())\n\nif t_code == 1:\n  print (\"Stop the car.\")\nelif t_code == 2:\n  print (\"Slow down.\")\nelse :\n    print (\"Go forward.\")","c7661d1d":"my_list1 = [1, 2, 3]\nmy_list2 = [\"KIA\", \"Chevrolet\", \"Ford\"]\nprint (my_list1)\nprint (my_list2)","796f7b4b":"my_list3 = [1, 2, 3, [\"KIA\", \"Chevrolet\", \"Ford\"] ]\nprint (len(my_list3))\nprint (my_list3[0]) #getting the first item\nprint (my_list3[3]) # getting the 4th item\n\n","68f6a8dd":"my_list = [1,2,3,4,5]\nprint (my_list[0:2]) #from the first item to the 2nd item 0,1,\/ \uccab\uc9f8\ubd80\ud130 3\uc9f8 \uc774\uc804\uae4c\uc9c0 \ucd9c\ub825\nprint (my_list[1:]) # #from the second item to the end \/ \ub458\uc9f8\ubd80\ud130 \ub05d\uae4c\uc9c0 \ucd9c\ub825","a6dc9610":"my_list = [1,2,3,4,5]\nmy_list[1] = 6\nprint (my_list)\n","96620a45":"my_list1 = [1,2,3,4,5]\nmy_list2 = [6,7,8,9]\nmy_list = my_list1 + my_list2\nprint (my_list)","6c51862a":"my_list1 = [1,2,3,4,5]\nmy_list = my_list1 *2\nprint (my_list)\n","a8e182cd":"my_list4 = []\nmy_list4.append(\"Ford\")\nprint (my_list4)\nprint (my_list4.count(\"Ford\"))\nprint (my_list4.index(\"Ford\"))\nmy_list4.append(\"BMW\")\nprint (my_list4)\n\nprint (my_list4.pop(0)) # pop method displays the item but remove it as well. pop\uc740 \uc544\uc774\ud15c\uc744 \ubcf4\uc5ec\uc8fc\uace0 \uc9c0\uc6b0\uae30 \ub54c\ubb38\uc5d0 \uc870\uc2ec\ud558\uc138\uc694.\nmy_list4.insert(1,\"Chevrolet\")\nprint (my_list4)\n","fcefd9f7":"list2 = [1,2,3,4,1,2,3,4]\nprint (list2.count(2))","8b414870":"list3 = [4,5,6,7,8,9]\nprint (list3.index(7))","be95d824":"list4 = [9,8,7,6,5,4]\nlist4.insert(3, 100)\nprint (list4)","6f1e9b90":"bizcard = {}\nbizcard[\"name\"] = \"Joshua\"\nbizcard[\"phone\"] = \"55512345678\"\nbizcard[\"company\"] = \"ai2learn\"\n\nprint (bizcard)\nprint (bizcard[\"phone\"])\n","6f71747a":"mydict = { 'model' : 'Camaro', 'maker': 'Chevrolet', 'year': 2020}\n\nprint (mydict.items())\nprint (mydict.keys()) \nprint (mydict.values())\n","61c506df":"mydict = { 'model' : 'Camaro', 'maker': 'Chevrolet', 'year': 2020}\nnewdict = mydict.copy()  \nprint (newdict)\nprint (mydict.get('model'))\nprint (mydict.clear())","bfbfe317":"mydict = { 'college' : 'Hankook', 'major': 'Computer Scinece', 'name': 'Hong'}\nnewdict = mydict.copy()  \nprint (newdict)\nprint (mydict.get('major'))\nprint (mydict.clear())\n","05b59ada":"dict1 = {'a':1, 'b':2, 'c':3}\nprint (dict1.items())","7706044a":"dict1 = {'a':1, 'b':2, 'c':3}\nprint (dict1.keys())","805d837c":"dict1 = {'a':1, 'b':2, 'c':3}\nprint (dict1.values())","9e0bdac4":"dict1 = {'a':1, 'b':2, 'c':3}\nprint (dict1.clear())\nprint (dict1)","852c42d2":"dict1 = {'a':1, 'b':2, 'c':3}\ndict2 = dict1.copy()\nprint (dict2)","fbd4a873":"dict1 = {'a':1, 'b':2, 'c':3}\nprint (dict1.get('b'))","6ade7777":"a = (1,2,3,4,5)\nb = (6,7,8,9)\n\nc = a+b\nprint (c)\n\nd = a*3\nprint (d)","86566a21":"a = ('Chevrolet', 'KIA', 'Mercedes')  \nprint (a[0]) \nprint (a[1:2]) \nprint (a[:2]) \nprint (a.count('KIA'))\nprint (a.index('Mercedes'))","efa87d9d":"a = {1,2,3,4,5} \nb = {5,6,7,8,9}\nc = a.intersection(b)   \nd = a.union(b)\ne = a.difference(b) \n\nprint (c)\nprint (d)\nprint (e)","099ae4da":"a = {1,2,3,4,5} \n\na.add(6)  # one item only\nprint (a)\n\na.update({7,8}) # multiple items\nprint (a)\n\na.remove(5)\nprint (a)","0b6b9170":"def wiper():\n    print ('When it is rainy, it is useful.')\n\nwiper()","a62917e5":"def mycal():\n   x = 3\n   print (x**3)\n\nmycal()","f1e36e60":"def my_function3(wish, country):\n   \tprint (wish + country)\n\nmy_function3(\"I would like to go to\", \" Korea.\")\nmy_function3(\"I would like to visit\", \" Spain.\")\nmy_function3(\"I would like to live in\", \" Australia.\")","5e71230d":"def my_function2(first_name):\n    print(first_name + \" Choi\")\n\nmy_function2(\"Joshua\") \nmy_function2(\"Rachel\") ","e56f85d5":"def my_function4(a,b):\n     print (a**2, b**3)\n\nmy_function4(1,2)\nmy_function4(3,4)\nmy_function4(5,6)","62493286":"def accelerator(speed):\n\tif speed > 80:\n\t\tprint (\"Slow down!\")\n\telse:\n\t\tprint (\"Go!\")\n\naccelerator(85)","7c477c16":"def water_vending_machine(temp,price):\n    if temp > 90:\n        print (\"The price for a bottle of cold water is {} dollars.\".format(price))\n    else:\n        print (\"The price for a bottle of cold water is {} dollars.\".format(price))\n\nwater_vending_machine(100,6)\nwater_vending_machine(80,5)","509aa997":"from random import randint\n\ndice_toss = randint(1, 6)\nprint (dice_toss)\n\nfrom datetime import datetime\n\ncurrent_time = datetime.now()\nc_year = current_time.year \nc_month = current_time.month\nc_day = current_time.day\nprint (c_year)\nprint (c_month)\nprint (c_day)\n","3b0dbd33":"import math               \n\nprint (math.ceil(0.5))           \nprint (math.floor(0.5))  \nprint (max([1, 2, 3]))\nprint (max('Chevrolet'))\nprint (min([1, 2, 3]))\nprint (min('Chevrolet'))","ff87e4b0":"from random import randint\n\ndice_toss = randint(1, 6)\n\nprint (dice_toss)","942e2f05":"from datetime import datetime\ncurrent_time = datetime.now()\n\ncurrent_year = current_time.year\ncurrent_month = current_time.month\ncurrent_day = current_time.day\n\nprint (\"{0:0=4d}-{1:0=02d}-{2:0=02d}\".format(current_year, current_month, current_day))","b0c83e00":"for i in range(5):\n\tprint ('car')\n\ntotal = 0\nn = 10      \nfor i in range(1, n + 1): \n\ttotal += i     \nprint (total)\n\nfor character in 'KOREA':\n\tprint (character)\n","e872755b":"for i in range(2, 5):\n\tprint (i**2, i**3)\nprint (\"That's it\")\n\nfor n in range(10, 0, -3):\n\tprint (n)\n\nfor n in range(10, 20, 3):\n\tprint (n)","7f779e69":"makers = ['KIA', 'Jaguar', 'BMW']\n\nfor i in range(len(makers)):\n    print(\"I love {}\".format(makers[i]))","e4ef1d3e":"for n in range(20, 0, -2):\n    print(n) ","a519a810":"i = 15\n\nwhile i > 0:\n    print (i ** 2)\n    i -= 2","8f368dad":"i = 1\n\nwhile i <= 3:\n\tprint (i)\n\ti += 1\nelse:\n    print (\"That's it.\")","1f14c372":"i = 5\nwhile i>0:\n   print (i**2)\n   i -= 1","9777b769":"i = 0\nwhile i <= 10:\n    print(i ** 3)\n    i += 1","93ca7349":"\ni = 0\n\nwhile i <= 5:\n\tprint (i)\n\tif i == 3:\n\t\tbreak\n\ti += 1\n\ni = 0\nwhile i <= 4:\n\ti += 1\n\tif i == 3:\n\t\tcontinue\n\telse:\n\t\tprint (i)\n","d42b79e0":"for num in range(1, 11):\n\tif num % 2 == 0:\n\t\tprint (num)\n\tcontinue\n\nfor num in range(1, 11):\n\tif num % 2 == 1:\n\t\tprint (num)\n\tcontinue","5bd08b3e":"my_sum = 0\ni = input(\"Enter any number\")\nn =int(i)\n\nwhile n != 0:\n    my_sum = my_sum + n\n    if my_sum >= 30:\n        print(\"My sum is {}\".format(my_sum))\n        break\n    n = int(input())\n","f38a778b":"for num in range(2, 10):\n    if num % 2 == 0:\n        print(\"Found an even number\", num)\n        continue\n    print(\"Found an odd number\", num)","c560b3c4":"test_list = [ 1, 2, 3, 4, 5, 6]\nf = open(\"test_list.txt\", \"w\")\n\nfor item in test_list:\n\tf.write(str(item) + \"\\n\")\n\tprint (str(item))\n\nf.close()","33259dc6":"test_list = [1,2,3]\nf = open(\"test_list.txt\",\"w\")\n\nfor item in test_list:\n\tf.write(str(item) + \"\\n\")\n\nfr =  open(\"test_list.txt\",\"r\")\nprint (fr.read())\n\nfrp = open(\"test_list.txt\",\"a\")\nfrp.write('4')\n\nfrp.close()\n","831d7fab":"test_list =  [\"John\", \"Tom\",\"Larry\"]\nf = open(\"test_list.txt\",\"w\")\nfor item in test_list:\n    f.write(str(item) + \"\\n\")\nprint(str(item))\nfrp = open(\"test_list.txt\", \"a\")\nfrp.write(\"Josh\")\nfrp.close()","71e8a14a":"import math, time, random, datetime\nimport numpy as np\nimport pandas as pd\nimport warnings\nwarnings.filterwarnings('ignore')","40c3fcab":"# from google.colab import files\n# uploaded = files.upload()","3a425f73":"# import io\n# sample = pd.read_csv(io.BytesIO(uploaded['train.csv']))","4cdb4c72":"sample = pd.read_csv('..\/input\/train.csv')","9242775a":"sample.head()","9d24f927":"sample.tail()","a0c95bd2":"sample.head(n=20)","36916bca":"sample.tail(n=10)","71d576d0":"sample","ad5ea260":"sample[11:21]","16fefa7e":"sample['Age'].head(n=20)","dcb8bcc2":"sample['Age'][11:21]","8aea2b47":"sample.Pclass.value_counts()","b17414dc":"sample['Sex'].replace(['male','female'],[1,2],inplace=True)\nsample.head(n=10)","45d0757d":"print('Oldest Passenger was of',sample['Age'].max(),'Years')\nprint('Youngest Passenger was of',sample['Age'].min(),'Years')\nprint('Average Age on the ship',int(sample['Age'].mean()),'Years')","7eab67c9":"sample['New']=0\nfor i in sample:\n    sample['New']=sample.Age\n\nsample.head()","f7e71253":"class Manager(object):\n    def __init__(self, model, color, year, mileage): \n       self.model = model\n       self.color = color\n       self.year = year\n       self.mileage = mileage\n\nmycar = Manager(\"Model: Camaro\", \"Color: Red\", \"Year: 2020\", \"Mileage: 12,345\")\n\nprint (mycar.model)\nprint (mycar.color)\nprint (mycar.year)\nprint (mycar.mileage)\n","e0792026":"class Car(object):\n\tdef __init__(self, name):\n\t\tself.name = name\n\nmycar = Car(\"Bumblebee\")\nprint (mycar.name)","3b40056f":"class Car(object):\n\tdef __init__(self, maker, color, style):\n\t\tself.maker = maker\n\t\tself.color = color\n\t\tself.style = style\n\n\tdef brake(self):\n\t\tprint (\"This is a {} with a good brake.\".format(self.maker))\n\n\tdef mirror(self):\n\t\tprint (\"This is {} style with no blind spot.\".format(self.style))\n\n\tdef wiper(self):\n\t\tprint (\"It is {} and comes with an excellent wiper.\".format(self.color))\n\n\nmine = Car(\"Chevy\", \"dark blue\", \"cool\")\n\nmine.brake()\nmine.mirror()\nmine.wiper()\n","48b0a6f3":"class Car(object):\n\tdef __init__(self, category, maker, year, color):\n\t\tself.category = category\n\t\tself.maker = maker\n\t\tself.year = year\n\t\tself.color = color\n\n\tdef display_mycar(self):\n\t\tprint ('MyCar: {}'.format(self.category))\n\t\tprint ('Maker: {}'.format(self.maker))\n\t\tprint ('Year: {}'.format(self.year))\n\t\tprint ('Color: {}'.format(self.color))\n\nclass Truck(Car):\n\tpass\n\nTruck_mine = Truck('Truck','Chevy', '2019', 'Red')\nTruck_mine.display_mycar()","b0dbe62d":"class Car(object):\n\tdef __init__(self, category, fuel):\n\t\tself.category = category\n\t\tself.fuel = fuel\n\n\tdef display_mycar(self):\n\t\tprint (\"My car is {0} and it requires {1} for fuel.\". format(self.category,self.fuel))\n\nmysportscar = Car(\"an old car\",\"gasoline\")\nmysportscar.display_mycar()","89d131e0":"class Car(object):\n\tdef __init__(self, category, fuel):\n\t\tself.category = category\n\t\tself.fuel = fuel\n\n\tdef display_mycar(self):\n\t\tprint (\"My car is {0} and it requires {1} for fuel.\". format(self.category,self.fuel))\n\nclass Ecar(Car):\n\tpass\n\nmyecar = Ecar(\"a new car\",\"electricity\") \nmyecar.display_mycar()\nmysportscar = Car(\"an old car\", \"gasoline\")\nmysportscar.display_mycar()","b199a584":"class Car(object):\n\tdef __init__(self, category, fuel):\n\t\tself.category = category\n\t\tself.fuel = fuel\n\n\tdef display_mycar(self):\n\t\tprint (\"My car is {0} and it requires {1} for fuel.\". format(self.category,self.fuel))\n\nclass Ecar(Car):\n\tdef display_mycar(self):\n\t\tprint (\"My car does not require fuel. and it only requires {}.\". format(self.fuel))\n\nmyecar = Ecar(\"a new car\",\"electricity\") \nmyecar.display_mycar()\nmysportscar = Car(\"an old car\", \"gasoline\")\nmysportscar.display_mycar()","29359251":"class Car(object):\n\tdef __init__(self, model):\n\t\tself.model = model\n\t\n\tdef calculate_mileage(self, ml):\n\t\tself.ml = ml\n\t\treturn ml * 0.1\n\nroad = Car('Sonata')\nprint (road.calculate_mileage(10))","c04ee70a":"class Car(object):\n\tdef __init__(self, model):\n\t\tself.model = model\n\n\tdef calculate_mileage(self, ml):\n\t\tself.ml = ml\n\t\treturn ml * 0.1\n\nclass Truck(Car):\n\tpass\n\n\nroad = Truck('road')\nprint (road.calculate_mileage(10))","70dc81a8":"class Car(object):\n\tdef __init__(self, model):\n\t\tself.model = model\n\n\tdef calculate_mileage(self, ml):\n\t\tself.ml = ml\n\t\treturn ml * 0.1\n\nclass Truck(Car):\n\tdef calculate_mileage(self, ml):\n\t\tself.ml = ml\n\t\treturn ml * 0.2\n\nroad = Truck('road')\nprint (road.calculate_mileage(10))","433405db":"class Car(object):\n\tdef __init__(self, model):\n\t\tself.model = model\n\n\tdef calculate_mileage(self, ml):\n\t\tself.ml = ml\n\t\treturn ml * 0.1\n\nclass Truck(Car):\n\tdef calculate_mileage(self, ml):\n\t\tself.ml = ml\n\t\treturn ml * 0.2\n\n\tdef highway_mileage(self, ml):\n\t\treturn super(Truck, self).calculate_mileage(ml)\n\nhighway = Truck('highway')\nprint (highway.highway_mileage(10))\n","74c7321a":"sample1 = lambda x,y,z: x+y+z\nprint (sample1(1,2,3))\n\nsample2 = lambda x,y,z: x*y*z\nprint (sample2(1,2,3))\n\nz = (lambda x,y: x+y) (10,20) \nprint (z)","065ffea5":"y = lambda x: x**3\nprint (y(7))\n\nz = (lambda x,y: x**3+y**3) (3,4) \nprint (z)\n\nz = (lambda x,y: x**3+y**3) \nprint (z(3,4))\n","6a6970ae":"for num in range(1, 3):\n\tif num % 2 == 0:\n\t\tprint (num)\n\t\tcontinue\nfor num in range(1, 3):\n\tif num % 2 == 1:\n\t\tprint (num)\n\t\tcontinue\n\n\nprint ((lambda x, y: x if x % 2 == 0 else y)(1,2))\nprint ((lambda x, y: x if x % 2 == 1 else y)(1,2))\n\nmylist = list(range(1, 3))\nprint (list(filter(lambda n:n % 2 == 0 , mylist)))\nprint (list(filter(lambda n:n % 2 == 1 , mylist)))\n","8b2046b5":"print (list(map(lambda x: x ** 2, [5,6,7,8,9])))\nprint (list(filter(lambda x: x < 3, range(11))))\n","50f166f4":"y = list(map(lambda x: x**3, (range(1,6))))\nprint (y)\n\nmylist =  [1, 2, 3]\nprint (map(lambda x: x**3, mylist))\n\nmylist =  [1, 2, 3]\nprint (list(filter(lambda x: x > 2, mylist)))\n\nmylist =  [-2, -1, 1, 2]\nprint (list(filter(lambda x: x > 0, mylist)))\n","68f7fa09":"a = ['BMW' ,'FORD', 'CHEVY']\nb = [2019,2020]\n\ncomb_car = [(c, y) for c in a for y in b]\n\nprint (comb_car)","ce03a0b5":"mylist = [1,2,3,\"a\",\"b\",4.0,5.0,True, False]\nnewlist1 = [i for i in mylist if type(i)==int]\nprint (newlist1)\n\nmylist = [1,2,3,\"a\",\"b\",4.0,5.0,True, False]\nnewlist2 = [i for i in mylist if type(i)==float]\nprint (newlist2)","e47df319":"mylist = [1,2,3,\"a\",\"b\",4.0,5.0,True, False]\nnewlist3 = [i for i in mylist if type(i)==str]\nprint (newlist3)\n\nmylist = [1,2,3,\"a\",\"b\",4.0,5.0,True, False]\nnewlist4 = [i for i in mylist if type(i)==bool]\nprint (newlist4)","8e05c85d":"cars = ['BMW', 'FORD', 'CHEVY', 'KIA']\nyears = [2019, 2020, 2018, 2019]\n\nyear_dict = {key: value for key, value in zip(cars, years)}\n\nprint (year_dict)\n","66510b54":"players = ['Curry', 'Harden', 'James', 'Davis', 'Jokic']\npositions =   ['PG', 'SG', 'SF', 'PF', 'C'] \n\nmydict1 = {key: value for key, value in zip(players,positions)}\nprint (mydict1)","77d75242":"import numpy as np","c665764e":"import numpy as np\nvar = np.array([1,2,3])\nprint (var)\n\nvar[1]","ccf07f86":"var = np.array([[1,2,3], [4,5,6]])\nprint (var)","2676dfe7":"var = np.array([[[1,2,3], [4,5,6]], [[1,2,3],[4,5,6]], [[1,2,3], [4,5,6]]])\nprint (var)","f2ac8c30":"var = np.array([1,2,3])\nprint (var.dtype)\n\n\nvar = np.array([1.0,2.0,3.0])\nprint (var.dtype)","7b9100b8":"import numpy as np\nvar = np.array([[[1,2,3]]])\nprint (var.ndim)\n\n\nvar = np.array([[[1,2,3], [4,5,6], [7,8,9]]])\nprint (var.ndim)","7f8f6d81":"var = np.array([[[1,2,3], [4,5,6]], [[1,2,3],[4,5,6]]])\nprint (var.shape)\n\n\nvar = np.array([[[1,2,3], [4,5,6], [7,8,9]]])\nprint (var.shape)\n\nvar = np.array([[1,2,3], [4,5,6]])\nprint (var.shape)","89dac587":"import numpy as np\nvar = np.array([[[1,2,3], [4,5,6]], [[1,2,3],[4,5,6]]])\nprint (var.size)","ff094cb6":"import numpy as np\nvar = np.array([1,2,3,4,5])\nprint (var[2])","081bff47":"import numpy as np\nvar = np.array([[1,2,3,4,5], [6,7,8,9,10]])\nprint (var[1,2])","e3a25783":"import numpy as np\n\nvar = np.array([[[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]])\nprint (var[0,2,3])","282012c2":"import numpy as np\nvar = np.array([[1,2,3,4,5], [6,7,8,9,10]])\nvar[1,1] = 100\nprint (var)","9890b0af":"import numpy as np\nprint (np.zeros(3))\nprint (np.zeros([2,3]))\nprint (np.zeros([3,3]))\n\nprint (np.ones(3))\nprint (np.ones([2,3]))\nprint (np.ones([3,3]))\n\nprint (np.full(3, 5))\nprint (np.full([2,3], 5))\nprint (np.full([3,3], 5))\n","2775cfc6":"np.random.rand(3,3)   # default : between 0 and 1\n\n","6fb31d04":"np.random.randint(0, 6, size =(3,3))","5f48e467":"import numpy as np\nprint (np.identity(3))","2e0e1407":"np.repeat(4,3, axis =0)","fce2bbcb":"var = np.array([[1,2,3]])\nrep = np.repeat(var,3, axis=0)\nprint (rep)","15aa0c49":"import numpy as np\n\na = np.array([[1,2,3],[1,2,3]])\nb = a.copy()\nprint (b)\n\nprint(np.empty((3,3), dtype=float, order='C'))\nprint (np.eye(3))\n","82523820":"a = np.eye(3)\nprint (a)\n        \nprint (np.zeros_like(a))\nprint (np.ones_like(a))\nprint (np.arange(0,20,4))","9b3468f4":"a = np.array([1,2,3])\nprint (a + 2) \nprint (a * 2)\nprint (a - 2)\nprint (a \/ 2)\nprint (a % 2)\n\nb = np.array([4,5,6,])\nprint (a + b)\nprint (a - b)\n\nprint (np.cos(a))\nprint (np.sin(a))","825395b9":"import numpy as np\nmyarray1 =np.ones((2,3))\nprint (myarray1)\n\nmyarray2 = np.full((3,2),3)\nprint (myarray2)\n\nprint (np.matmul(myarray1,myarray2))\n","6bbe2d64":"import random\nmyarray = np.random.rand(3,3)\nprint (myarray)\n\nprint (np.min(myarray, axis = 0)) \nprint (np.max(myarray, axis = 0)) \nprint (np.mean(myarray, axis = 0)) \n\nprint (np.min(myarray)) \nprint (np.max(myarray)) \nprint (np.mean(myarray)) \n\nprint (np.sum(myarray))\nprint (np.sum(myarray, axis =0))","43fa72b4":"a = np.array([[1,2,3],[4,5,6]]) # 2X3 array\nprint (a)\n\nb = a.reshape((3,2)) \nprint (b)","1154c67c":"a = np.array([1,2,3])\nb = np.array([4,5,6])\nc = np.array([7,8,9])\n\nnp.vstack([a,b,c])","bd1d211f":"a = np.array([1,2,3])\nb = np.array([4,5,6])\nc = np.array([7,8,9])\n\nnp.hstack([a,b,c])","5e70b2ac":"a = np.array([1,2,3])\nb = np.array([4,5,6])\nc = np.array([7,8,9])\n\nnp.vstack([b,a,c])","dc5fae66":"a = np.array([1,2,3])\nb = np.array([4,5,6])\nc = np.array([7,8,9])\n\nnp.hstack([c,a,b])","ff0dcb6e":"a = np.array([1,2,3])\nb = np.array([4,5,6])\nc = np.array([7,8,9])\n\nnp.vstack([a,a,a])","a3646940":"a = np.array([1,2,3])\nb = np.array([4,5,6])\nc = np.array([7,8,9])\n\nnp.hstack([a,a,a,b,b,c])","b2bebb5e":"import numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline","172b3d2d":"# Suppose our farm had the followings\ncabage = [4000, 4200, 3800, 3700, 4100]\nradish = [2300, 2400, 2200, 2300, 2400]\nyear = [2015, 2016, 2017, 2018, 2019]\n\ncabage","eeb4cafe":"plt.xlabel('Year')\nplt.ylabel('Quantity')\nplt.show","8fef323b":"plt.xlabel('Year')\nplt.ylabel('Qunatity')\nplt.xlim(2014,2020)\nplt.ylim(0,5000)\nplt.show","afe683ff":"plt.xlabel('Year')\nplt.ylabel('Quantity')\nplt.xlim(2014,2020)\nplt.ylim(0,5000)\ncabbage = [4000, 4200, 3800, 3700, 4100]\nradish = [2300, 2400, 2200, 2300, 2400]\nyear = [2015, 2016, 2017, 2018, 2019]\nplt.plot(year,cabbage)\nplt.plot(year,radish)\nplt.show","d70db21c":"import matplotlib.pyplot as plt\n\nplt.xlabel('Year')\nplt.ylabel('Qunatity')\nplt.xlim(2014,2020)\nplt.ylim(0,5000)\ncabbage = [4000, 4200, 3800, 3700, 4100]\nradish = [2300, 2400, 2200, 2300, 2400]\nyear = [2015, 2016, 2017, 2018, 2019]\nplt.scatter(year,cabbage)\nplt.scatter(year,radish)\nplt.show","82400f52":"import matplotlib.pyplot as plt\n\nplt.xlabel('Year')\nplt.ylabel('Quantity')\nplt.xlim(2014,2020)\nplt.ylim(0,5000)\ncabbage = [4000, 4200, 3800, 3700, 4100]\nradish = [2300, 2400, 2200, 2300, 2400]\nyear = [2015, 2016, 2017, 2018, 2019]\nplt.plot(year,cabbage, 'r', radish, 'g')\nplt.show","a2dc609a":"import matplotlib.pyplot as plt\n\nplt.xlabel('Year')\nplt.ylabel('Qunatity')\nplt.xlim(2014,2020)\nplt.ylim(0,5000)\ncabbage = [4000, 4200, 3800, 3700, 4100]\nradish = [2300, 2400, 2200, 2300, 2400]\nyear = [2015, 2016, 2017, 2018, 2019]\nplt.plot(year,cabbage, 'r', year, radish, 'g', linewidth = 5.0)\nplt.show","2cee7714":"import matplotlib.pyplot as plt\n\nplt.xlabel('Year')\nplt.ylabel('Quantity')\nplt.xlim(2014,2020)\nplt.ylim(0,5000)\ncabbage = [4000, 4200, 3800, 3700, 4100]\nradish = [2300, 2400, 2200, 2300, 2400]\nyear = [2015, 2016, 2017, 2018, 2019]\nplt.plot(year,cabbage, 'r', year, radish, 'g', linewidth = 5.0, linestyle = '--')\nplt.show","dddd3715":"axes = plt.subplots(1,2, figsize=(12,6))","3d14eb85":"ax = plt.subplots(2,2, figsize=(12,6))","c4721393":"fig1 = plt.figure(1, figsize=(12,6))\nsub1 = fig1.add_subplot(121)    # 121\uc740 1\ud589 2\uc5f4\uc758 1\ubc88\uc9f8\ub97c \ub098\ud0c0\ub0b4\uba70  121 indicates 1st row \/ 2nd column and the first one\nsub2 = fig1.add_subplot(122)    # 122\ub294 1\ud589 2\uc5f4\uc758 2\ubc88\uc9f8\ub97c \ub098\ud0c0\ub0b8\ub2e4.  122 indicates 1st row \/ 2nd column and the second one","50b3687e":"fig1 = plt.figure(1, figsize=(12,6))\nsub1 = fig1.add_subplot(121)    \nsub2 = fig1.add_subplot(122)   \n\nsub1.plot(year, cabbage)\nsub2.plot(year,radish)","af67bf89":"from matplotlib.ticker import MaxNLocator","56ad10df":"fig1 = plt.figure(1, figsize=(12,6))\n\n\nsub1 = fig1.add_subplot(121)    \nsub2 = fig1.add_subplot(122)   \n\nsub1.plot(year, cabbage)\nsub1.xaxis.set_major_locator(MaxNLocator(integer=True))\n\n\nsub2.plot(year,radish)\nsub2.xaxis.set_major_locator(MaxNLocator(integer=True))\n","c062d26c":"f,ax=plt.subplots(1,2,figsize=(12,6)) ","74c6a01c":"f,ax=plt.subplots(1,2,figsize=(12,6)) \nax[0].set_title('Cabbage Quantity')\nax[1].set_title('Radish Quantity')\n\nax[0].set_ylabel('Qty') \nax[0].set_xlabel('Year') \n\nax[1].set_ylabel('Qty') \nax[1].set_xlabel('Year')\n\nax[0].set_xlim(2014,2020) \nax[0].set_ylim(0,5000) \n\nax[1].set_xlim(2014,2020) \nax[1].set_ylim(0,5000) \n\nax[0].scatter(year, cabbage) \nax[1].scatter(year, radish) ","790dd633":"f,ax=plt.subplots(1,2,figsize=(15,6))\nsample['Survived'].value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%',ax=ax[0],shadow=True)\nax[0].set_title('Survived')\nax[0].set_ylabel('')\nsample['Pclass'].value_counts().plot.pie(explode=[0,0.0,0],autopct='%1.2f%%',ax=ax[1],shadow=True)\nax[1].set_title('Pclass')\nax[1].set_ylabel('')","d79e8da6":"import missingno\nmissingno.matrix(sample, figsize = (15,8))","edf70b1b":"import numpy as np\nimport pandas as pd\n","70fede40":"df_1 = pd.DataFrame({'AAA': [4, 5, 6, 7],\n   ...:                    'BBB': [10, 20, 30, 40],\n   ...:                    'CCC': [100, 50, -30, -50]})\n   ...: \n\ndf_1","d44cfc36":"pddf = pd.read_csv('..\/input\/train.csv') # pddf = data frame for pandas practice","70aaae08":"pddf.head()","f0923818":"pddf.tail()","f33d304b":"pddf.head(n=8)","bcc4e27e":"pddf.tail(n=8)","110a380f":"pddf","95a4c0c9":"pddf.columns","6981c8ed":"pddf['Pclass']","f65dd05d":"pddf['Name'][6:11]","63c797a6":"pddf[['Pclass', 'Survived']]","a4ebb02c":"pddf[['Pclass','Sex','Survived']]","ed8b8468":"pddf[['Pclass','Sex','Survived']][2:5]","b6d32289":"pddf.dtypes","e8810e1f":"pddf.index","8c52f577":"len(pddf)","f85c0128":"pddf.columns","103f0b51":"pddf.values","49d8ada9":"pddf.describe()","cbcf3475":"pddf.isnull().sum()","43650b02":"pddf.isnull().any()","784efa46":"pddf.isna().sum()","60c66ea3":"pddf.isna().any()","9ed67d58":"pddf.isna().any(axis = None)","469cb6b3":"pddf.sort_values('Age', ascending=False)","1a9ddbfa":"pddf.sort_values('Age', ascending=True)","fc1713db":"pddf.sort_values('Age', ascending=True)[3:10]","ed8b09f9":"pddf.sort_values('Age', ascending=False)[0:5]","7a0b03ad":"pddf.sort_values('Age', ascending=True)[0:5]","7232e8c6":"pddf.loc[9,['Name']]","cb8f0f8a":"pddf.iloc[11:21]","79bfa59d":"pddf.iloc[15]","7acdee8e":"pddf.iloc[11,4]","b66a4bf8":"pddf[pddf.Age >40]","72ad7ea9":"pddf[(pddf.Age >= 30) & (pddf.Sex == 'female')]","4858a245":"pddf[(pddf.Age > 50) & (pddf.Sex == 'female') & (pddf.Pclass == 1)][1:10]\n","fce604c2":"pddf.loc[pddf['Age']==32]","10c1db53":" pddf.loc[pddf.Age >= 65]","f6826cc1":"pddf.loc[(pddf['Age'] < 2) & (pddf['Sex'] == 'male'), 'Survived']","9172efa5":"pddf.loc[pddf['Age'] == 70]","efa6b7a3":"pddf.loc[(pddf['Sex'] == 'male') | (pddf['Age']>= 1)]","1e674ea1":"pddf.loc[(pddf['Age']== 17) & (pddf['Sex']== 'female') & (pddf['Pclass'] == 1)]","d9765997":"df1 = pddf.copy()\n\ndf1.head()","2881d114":"df1['Initial']=0\nfor i in df1:\n    df1['Initial']=df1.Name.str.extract('([A-Za-z]+)\\.')","822a6904":"df1.Initial.values","04a01e24":"# count the frequencies\nfrequencies = df1[\"Initial\"].value_counts(normalize = True)\nfrequencies","912c8a70":"# filter the smaller categories\nthreshold = 0.01\nsmall_categories = frequencies[frequencies < threshold].index\nsmall_categories","1b6d906f":"# replace the values\ndf1[\"Initial\"] = df1[\"Initial\"].replace(small_categories, \"Other\")\ndf1[\"Initial\"].value_counts(normalize = True)","b526fafa":"for i, row in df1.iterrows():\n  print (i, row)\n  if i == 3:\n    break","3b956ecf":"for i, row in df1.iterrows():\n  print (i, row['Initial'])\n  if i == 4:\n     break","1ade6149":"df1.loc[df1.Initial == 'Other', 'Name'] = 0\n\ndf1","4272d6bc":"df1['Agegroup'] = np.where(df1['Age'] > 45, 'high', 'low')\n\ndf1","86b47981":"df1.drop(columns=['Agegroup'])","a00f9fd2":"df1['total']=df1.iloc[:,0:2].sum(axis=1)\ndf1.head(n=10)","eaded9f1":"df1.reset_index().rename(columns={\"Initial\": \"Salutation\"})","ece4ac0b":"cols = list(df1.columns.values)\ndf2 = df1[cols[5:8]]\n\ndf2.head()","3efe460a":"df3 = df1[1:20]\n\ndf3","c05ee86e":"df4 = df1[21:30]\n\ndf4","5a845301":"df5 = pd.concat((df3,df4))\ndf5","f63a829d":"df1.head()","1df9c446":"df1.groupby(['Pclass','Age'])['Pclass'].count()","99fc47db":"df1.groupby('Pclass')['Age'].mean()","1b11fe50":"df1.groupby(['Pclass'])['Age'].mean().to_frame().style.background_gradient(cmap='summer_r')","da39a0a4":"pd.crosstab(df1.Age,df1.Pclass,margins=True).style.background_gradient(cmap='summer_r')","72ace8c8":"pd.crosstab(df1.Pclass,df1.Fare).T.style.background_gradient(cmap='summer_r') ","3dda0dbb":"df1['Age_Range']=pd.qcut(df1['Age'],10)\n\ndf1.Age_Range.values","02ec70e4":"import math, random, datetime\nimport numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","24ec4534":"sdf = pd.read_csv('..\/input\/train.csv')\nsdf.head()","7c1e65bb":"def del_col(a):\n    del sdf[a]\n    \ndel_col('PassengerId')\ndel_col('Name')\ndel_col('Sex')\ndel_col('Age')\ndel_col('Ticket')\ndel_col('Cabin')\ndel_col('Embarked')\n\nsdf.head()","8d11a5a4":"sdf.isnull().sum() ","69ab6221":"ax = sns.countplot(x=\"Pclass\", data=sdf)","c7561f47":"ax = sns.countplot(x=\"Pclass\", hue=\"Survived\", data=sdf)","8225a408":"ax = sns.countplot(x=\"Survived\", hue=\"Pclass\", data=sdf)","3dc9354c":"ax = sns.countplot(x=\"Survived\", data=sdf, palette=\"Set3\")","de1712dd":"ax = sns.countplot(x=\"Pclass\", data=sdf,\n...                    facecolor=(0, 0, 0, 0),\n...                    linewidth=5,\n...                    edgecolor=sns.color_palette(\"dark\", 3))","7cad4e5f":" g = sns.catplot(x=\"Pclass\", hue=\"Survived\", col=\"Survived\",\n...                 data=sdf, kind=\"count\",\n...                 height=4, aspect=.7);","f4c0d4dc":"ax = sns.lineplot(x=\"Pclass\", y=\"Fare\", data=sdf)","c10f22e6":"ax = sns.lineplot(x=\"Pclass\", y=\"Fare\", hue=\"Survived\",\n...                   data=sdf)","43886e6f":"ax = sns.lineplot(x=\"Pclass\", y=\"Fare\", hue=\"Survived\", style=\"Survived\", data=sdf)","db6b9c63":"ax = sns.lineplot(x=\"Pclass\", y=\"Fare\",\n...                   hue=\"Parch\", style=\"Survived\", data=sdf)","5f8df52f":"ax = sns.lineplot(x=\"Pclass\", y=\"Fare\",\n...                   hue=\"Survived\", style=\"Survived\",\n...                   markers=True, dashes=False, data=sdf)","5e938aea":"sns.boxplot(x=sdf['SibSp'])","add21393":"sns.boxplot(x=sdf['Fare'])","7eff487b":"sns.boxplot(x='Pclass', y='Fare', data=sdf)","40ea889f":"sns.boxplot(x='Pclass', y='Parch', data=sdf)","f97cbe26":"sns.boxplot(x='Pclass', y='Fare', data=sdf, hue='Survived', palette = 'husl')","d47e5e77":"sns.boxplot(x='Pclass', y='Fare', data=sdf, hue='Parch',  palette = 'coolwarm')","552c06cd":"sns.set_style(\"whitegrid\")\nsns.boxplot(x='Pclass', y='Fare', data=sdf, hue='Survived', palette = 'husl')","604a61f7":"sns.set_style(\"dark\")\nsns.boxplot(x='Pclass', y='Fare', data=sdf, hue='Survived', palette = 'husl')","81abe20a":"sns.set_style(\"white\")\nsns.boxplot(x='Pclass', y='Fare', data=sdf, hue='Survived', palette = 'husl')","b6678525":"sns.set_style(\"ticks\")\nsns.boxplot(x='Pclass', y='Fare', data=sdf, hue='Survived', palette = 'husl')","598f7e28":"sns.set_style(\"darkgrid\")\nsns.boxplot(x='Pclass', y='Fare', data=sdf, hue='Survived', palette = 'husl')","183b6e8a":"sns.barplot(\"Pclass\", \"Fare\", data=sdf)","d89ee655":"ax = sns.barplot(x=\"Pclass\", y=\"Fare\", hue=\"Survived\", data=sdf)","4121eda8":"from numpy import median\nax = sns.barplot(x=\"Pclass\", y=\"Fare\", data=sdf, estimator=median)","8da1d286":"ax = sns.barplot(x=\"Pclass\", y=\"Fare\", data=sdf, ci=68)","d3f76994":"ax = sns.scatterplot(x=\"Pclass\", y=\"Fare\", data=sdf)","a2929570":" ax = sns.scatterplot(x=\"Parch\", y=\"Fare\", hue=\"Survived\",\n...                      data=sdf)","9d8d60ec":"ax = sns.scatterplot(x=\"Parch\", y=\"Fare\",\n...                      hue=\"Survived\", style=\"Survived\", data=sdf)","be0ab08c":"ax = sns.scatterplot(x=\"Pclass\", y=\"Fare\", size=\"Fare\",\n...                      data=sdf)","b246d6c8":"ax = sns.scatterplot(x=\"SibSp\", y=\"Fare\",\n...                      hue=\"Pclass\", size=\"Survived\",\n...                      data=sdf)","29455967":"ax = sns.scatterplot(x=\"Pclass\", y=\"Fare\",\n...                      s=100, color=\".2\", marker=\"+\",\n...                      data=sdf)","897b39d4":"sns.set(style=\"ticks\", color_codes=True)\nsns.catplot(x=\"day\", y=\"total_bill\", data=tips)","d72617cb":"sns.catplot(x=\"day\", y=\"size\", data=tips)","f647e28f":"sns.catplot(x=\"day\", y=\"total_bill\", jitter=False, data=tips)","9e061a89":"sns.catplot(x=\"day\", y=\"total_bill\", kind=\"swarm\", data=tips)","1bda9db8":"sns.catplot(x=\"size\", y=\"total_bill\", kind=\"swarm\", data=tips.query(\"size <= 2\"))","2afba0b3":"sns.catplot(x=\"total_bill\", y=\"day\", hue=\"time\", kind=\"swarm\", data=tips);","56fcc4d9":"sns.catplot(x=\"day\", y=\"total_bill\", kind=\"box\", data=tips)","9147d353":"sns.catplot(x=\"day\", y=\"total_bill\", kind=\"swarm\", data=tips)","4f6e4068":"sns.catplot(x=\"day\", y=\"total_bill\", kind=\"swarm\", col = \"time\", data=tips)","11ef8119":"sns.catplot(x=\"day\", y=\"total_bill\", kind=\"box\", col = \"time\", data=tips)","033df7f0":"sns.catplot(x=\"day\", y=\"total_bill\", hue=\"smoker\", kind=\"box\", data=tips)","fabdcc9e":"sns.catplot(x=\"day\", y=\"total_bill\", kind=\"boxen\", data=tips)","44659949":"sns.catplot(x=\"day\", y=\"total_bill\", kind=\"violin\", data=tips)","05022317":"sns.catplot(x=\"day\", y=\"total_bill\", hue=\"sex\",\n            kind=\"violin\", inner=\"stick\", split=True,\n            palette=\"pastel\", data=tips)","b3d6a626":"g = sns.catplot(x=\"day\", y=\"total_bill\", kind=\"violin\", inner=None, data=tips)\nsns.swarmplot(x=\"day\", y=\"total_bill\", color=\"k\", size=3, data=tips, ax=g.ax);","12c2a745":"sns.catplot(x=\"smoker\", y=\"size\", kind=\"point\", data=tips)","9fa2c3b5":"sns.jointplot(x=\"total_bill\", y=\"tip\", data=tips, kind='scatter')","8f861b5f":"sns.jointplot(x=\"total_bill\", y=\"tip\", data=tips, kind='kde')","f8617efb":"sns.catplot('size','tip',hue='day',data=tips)","b909d279":"plt.figure(figsize=(12,6))\nsns.violinplot(\"size\",\"tip\", hue=\"day\", data=tips)","c7f019c0":"sns.distplot(tips[tips['size']>0].tip)","b423a9a5":"sns.heatmap(tips.corr(),annot=True,cmap='RdYlGn',linewidths=0.2)","2e3a4b37":"sns.relplot(x=\"total_bill\", y=\"tip\", data=tips)","5de150a7":"sns.relplot(x=\"total_bill\", y=\"tip\", hue=\"size\", data=tips)","32862a68":"sns.relplot(x=\"total_bill\", y=\"tip\", hue=\"size\", style=\"size\", data=tips)","e5005914":"sns.relplot(x=\"total_bill\", y=\"tip\", hue=\"smoker\", style=\"size\", data=tips)","8e1979ae":"sns.relplot(x=\"total_bill\", y=\"tip\", hue=\"smoker\", style=\"smoker\", size=\"size\", data=tips)","583d0a36":"sns.relplot(x=\"total_bill\", y=\"tip\",style=\"smoker\", size=\"size\", sizes=(15, 200), data=tips)","a055ca67":"sns.relplot(x=\"total_bill\", y=\"tip\", hue=\"smoker\", style=\"smoker\",size=\"size\", sizes=(15, 200), col=\"time\", data=tips)","bab87e68":"tips.head()","8bf731d0":"tips['sex'].replace(['Male','Female'],[1,2],inplace=True)","9dbf7c60":"tips['smoker'].replace(['Yes','No'],[1,2],inplace=True)","56ca9f73":"tips.day.value_counts()","15c118ad":"tips['day'].replace(['Sat','Sun', 'Thur', 'Fri'],[7, 1, 5, 6],inplace=True)","fb047977":"tips.time.value_counts()","e6bd76b8":"tips1 = tips.drop(columns=['weekend'])","e4273da6":"tips1.head()","d7d8a54c":"sns.pairplot(tips1)","2ee5e2c1":"g = sns.PairGrid(tips1)\ng.map_diag(sns.kdeplot)\ng.map_offdiag(sns.kdeplot, n_levels=6);","4621bc4f":"g = sns.FacetGrid(tips, col=\"time\")\ng.map(plt.hist, \"tip\")","47d2ea66":"g = sns.FacetGrid(tips, col=\"sex\", hue=\"smoker\")\ng.map(plt.scatter, \"total_bill\", \"tip\", alpha=.7)\ng.add_legend()","8d546bb3":"g = sns.FacetGrid(tips, row=\"smoker\", col=\"time\", margin_titles=True)\ng.map(sns.regplot, \"size\", \"total_bill\", color=\".3\", fit_reg=False, x_jitter=.1);","1448c354":"g = sns.FacetGrid(tips, col=\"day\", height=4, aspect=.5)\ng.map(sns.barplot, \"sex\", \"total_bill\");","43e269a5":"ordered_days = tips.day.value_counts().index\ng = sns.FacetGrid(tips, row=\"day\", row_order=ordered_days,\n                  height=1.7, aspect=4,)\ng.map(sns.distplot, \"total_bill\", hist=False, rug=True);","60ce3580":"g = sns.FacetGrid(tips, hue=\"sex\", palette=\"Set1\", height=5, hue_kws={\"marker\": [\"^\", \"v\"]})\ng.map(plt.scatter, \"total_bill\", \"tip\", s=100, linewidth=.5, edgecolor=\"white\")\ng.add_legend()","648e5ec9":"with sns.axes_style(\"white\"):\n    g = sns.FacetGrid(tips, row=\"sex\", col=\"smoker\", margin_titles=True, height=2.5)\ng.map(plt.scatter, \"total_bill\", \"tip\", color=\"#334488\", edgecolor=\"white\", lw=.5)\ng.set_axis_labels(\"Total bill (US Dollars)\", \"Tip\")\ng.set(xticks=[10, 30, 50], yticks=[2, 6, 10])\ng.fig.subplots_adjust(wspace=.02, hspace=.02)","86f09673":"g = sns.FacetGrid(tips, col=\"smoker\", margin_titles=True, height=4)\ng.map(plt.scatter, \"total_bill\", \"tip\", color=\"#338844\", edgecolor=\"white\", s=50, lw=1)\nfor ax in g.axes.flat:\n    ax.plot((0, 50), (0, .2 * 50), c=\".2\", ls=\"--\")\ng.set(xlim=(0, 60), ylim=(0, 14))","b8805c7b":"from scipy import stats\ndef quantile_plot(x, **kwargs):\n    qntls, xr = stats.probplot(x, fit=False)\n    plt.scatter(xr, qntls, **kwargs)\n\ng = sns.FacetGrid(tips, col=\"sex\", height=4)\ng.map(quantile_plot, \"total_bill\")","0f49804a":"def qqplot(x, y, **kwargs):\n    _, xr = stats.probplot(x, fit=False)\n    _, yr = stats.probplot(y, fit=False)\n    plt.scatter(xr, yr, **kwargs)\n\ng = sns.FacetGrid(tips, col=\"smoker\", height=4)\ng.map(qqplot, \"total_bill\", \"tip\")","5b537d8b":"g = sns.FacetGrid(tips, hue=\"time\", col=\"sex\", height=4)\ng.map(qqplot, \"total_bill\", \"tip\")\ng.add_legend()","94a9d73f":"g = sns.FacetGrid(tips, hue=\"time\", col=\"sex\", height=4,\n                  hue_kws={\"marker\": [\"s\", \"D\"]})\ng.map(qqplot, \"total_bill\", \"tip\", s=40, edgecolor=\"w\")\ng.add_legend()","24e56fc6":"def hexbin(x, y, color, **kwargs):\n    cmap = sns.light_palette(color, as_cmap=True)\n    plt.hexbin(x, y, gridsize=15, cmap=cmap, **kwargs)\n\nwith sns.axes_style(\"dark\"):\n    g = sns.FacetGrid(tips, hue=\"time\", col=\"time\", height=4)\ng.map(hexbin, \"total_bill\", \"tip\", extent=[0, 50, 0, 10])","1deb031b":"g = sns.PairGrid(tips1)\ng.map_upper(plt.scatter)\ng.map_lower(sns.kdeplot)\ng.map_diag(sns.kdeplot, lw=3, legend=False);","8d7e2b0b":"g = sns.PairGrid(tips, y_vars=[\"tip\"], x_vars=[\"total_bill\", \"size\"], height=4)\ng.map(sns.regplot, color=\".3\")\ng.set(ylim=(-1, 11), yticks=[0, 5, 10])","70839e1f":"g = sns.PairGrid(tips, hue=\"size\", palette=\"GnBu_d\")\ng.map(plt.scatter, s=50, edgecolor=\"white\")\ng.add_legend()","1a8669da":"sns.pairplot(tips1, hue=\"size\", height=2.5);","a9707689":"g = sns.pairplot(tips, hue=\"size\", palette=\"Set2\", diag_kind=\"kde\", height=2.5)","3af631f0":"import math, time, random, datetime","75bdc7da":"# They are for data manipulation\/ \uae30\ubcf8 \ub370\uc774\ud130 \uc815\ub9ac \ubc0f \ucc98\ub9ac\nimport pandas as pd\nimport numpy as np\n\n# For Visualization \/ \uc2dc\uac01\ud654\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nplt.style.use('seaborn-whitegrid')\nimport missingno\n\n# For preprocessing and ML algorithms \/ \uc804\ucc98\ub9ac \ubc0f \uba38\uc2e0 \ub7ec\ub2dd \uc54c\uace0\ub9ac\uc998\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.gaussian_process import GaussianProcessClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.ensemble import VotingClassifier\n\n# Tunning and Evaluation \/ \ubaa8\ub378 \ud29c\ub2dd \ubc0f \ud3c9\uac00\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn import model_selection\n\n# Ignore warnings \/ \uacbd\uace0 \uc81c\uac70 (Pandas often makes warnings)\nimport sys\nimport warnings\n\nimport warnings\nwarnings.filterwarnings('ignore')","c82c9bd0":"# This may be harder than expected for a firsttimer, but if the data was not delivered correctly from the copy, press \"+ Add Data\", load \"Titanic Data\" from \"Competition Data\", and click each file to check the path address.\n# \uc774 \uac83\uc774 \ucc98\uc74c\ud558\ub294 \uc0ac\ub78c\uc5d0\uac8c \uc608\uc0c1\ubcf4\ub2e4 \uc5b4\ub824\uc6b8 \uc218 \uc788\ub294\ub370 \ubcf5\uc0ac\ud55c \uac83\uc5d0\uc11c \ub370\uc774\ud130\uac00 \uc804\ub2ec\uc774 \uc798 \uc548 \ub418\uc5c8\ub2e4\uba74 \"+Add Data\" \ub204\ub974\uc2dc\uace0 'Competition Data'\uc5d0\uc11c \"Titanic Data\" \ubd88\ub7ec\uc628 \ud6c4 \ud30c\uc77c\uc744 \ucc0d\uc5b4\uc11c \uacbd\ub85c \uc8fc\uc18c \ud655\uc778\ud574\uc57c \ud568 \ntest = pd.read_csv('..\/input\/test.csv')\ntrain = pd.read_csv('..\/input\/train.csv')","313997b6":"# Separation \ubcd1\ud569 \uc900\ube44\nntrain = train.shape[0]\nntest = test.shape[0]\n\n# Secure the followings \uc544\ub798\ub294 \ub530\ub85c \uc798 \ubaa8\uc154 \ub461\ub2c8\ub2e4.\ny_train = train['Survived'].values\npassId = test['PassengerId']\n\n# Merge \ubcd1\ud568 \ud30c\uc77c \ub9cc\ub4e4\uae30\ndata = pd.concat((train, test))\n\n# Check if the shape is as expected \ub370\uc774\ud130 \ud589\uacfc \uc5f4\uc758 \ud06c\uae30\ub294\nprint(\"Data size is: {}\".format(data.shape))","51ad08dc":"data.head()","b58a7e15":"train.head()","136ab811":"data.describe()","fff2616b":"data.columns","640953fd":"data.columns[3]","8438ce2a":"missingno.matrix(data, figsize = (15,8))","66ac260e":"data.isnull().sum() #Check the sum of null values \ube44\uc5b4 \uc788\ub294 \uac12\ub4e4\uc744 \uccb4\ud06c\ud574 \ubcf8\ub2e4.","1c295d52":"data.Age.isnull().any()","24665ceb":"data.dtypes","2b649905":"train.head()","2d196b53":"# Co-relation \ub9e4\ud2b8\ub9ad\uc2a4\ncorr = data.corr()\n# \ub9c8\uc2a4\ud06c \uc14b\uc5c5\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n# \uadf8\ub798\ud504 \uc14b\uc5c5\nplt.figure(figsize=(14, 8))\n# \uadf8\ub798\ud504 \ud0c0\uc774\ud2c0\nplt.title('Overall Correlation of Titanic Features', fontsize=18)\n#  Co-relation \ub9e4\ud2b8\ub9ad\uc2a4 \ub7f0\uce6d\nsns.heatmap(corr, mask=mask, annot=False,cmap='RdYlGn', linewidths=0.2, annot_kws={'size':20})\nplt.show()","cd4047a0":"fig = plt.figure(figsize=(10,2))\nsns.countplot(y='Survived', data=train)\nprint(train.Survived.value_counts())","3515bc31":"f,ax=plt.subplots(1,2,figsize=(15,6))\ntrain['Survived'].value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%',ax=ax[0],shadow=True)\nax[0].set_title('Survived')\nax[0].set_ylabel('')\nsns.countplot('Survived',data=train,ax=ax[1])\nax[1].set_title('Survived')\nplt.show()","a490e88f":"def piecount(a):\n    f,ax=plt.subplots(1,2,figsize=(15,6))\n    train[a].value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%',ax=ax[0],shadow=True)\n    ax[0].set_title(a)\n    ax[0].set_ylabel('')\n    sns.countplot(a,data=train,ax=ax[1])\n    ax[1].set_title(a)\n    plt.show()\n\npiecount('Survived')","80769003":"def piecount3(a):\n      f,ax=plt.subplots(1,2,figsize=(15,6))\n      train[a].value_counts().plot.pie(explode=[0,0.0,0],autopct='%0.4f%%',ax=ax[1],shadow=True)\n      ax[1].set_title(a)\n      ax[1].set_ylabel('')\n      sns.countplot(a,data=train,ax=ax[0])\n      ax[0].set_title(a)\n      plt.show()\n\npiecount3(\"Pclass\")","b786e259":"train.groupby(['Pclass','Survived'])['Survived'].count()","73a8aa88":"pd.crosstab(train.Pclass,train.Survived,margins=True).style.background_gradient(cmap='summer_r')","7919573c":"f,ax=plt.subplots(1,2,figsize=(12,6))\ntrain[['Pclass','Survived']].groupby(['Pclass']).mean().plot.bar(ax=ax[0])\nax[0].set_title('Survived per Pcalss')\nsns.countplot('Pclass',hue='Survived',data=train,ax=ax[1])\nax[1].set_title('Pcalss Survived vs Not Survived')\nplt.show()","61b05dc5":"piecount3(\"Pclass\")","3166ee1a":"train.groupby('Pclass').Survived.mean()","cb6cc936":"data.Name.value_counts()","c664eec4":"temp = data.copy()\ntemp['Initial']=0\nfor i in train:\n    temp['Initial']=data.Name.str.extract('([A-Za-z]+)\\.')","8c2db474":"pd.crosstab(temp.Initial,temp.Sex).T.style.background_gradient(cmap='summer_r')","97bc9600":"def survpct(a):\n  return temp.groupby(a).Survived.mean()\n\nsurvpct('Initial')","7933d1ba":"pd.crosstab(temp.Initial,temp.Survived).T.style.background_gradient(cmap='summer_r')","9821b934":"def bag(a,b,c,d):\n  f,ax=plt.subplots(1,2,figsize=(20,8))\n  train[[a,b]].groupby([a]).mean().plot.bar(ax=ax[0])\n  ax[0].set_title(c)\n  sns.countplot(a,hue=b,data=train,ax=ax[1])\n  ax[1].set_title(d)\n  plt.show()\n\nbag('Sex','Survived','Survived per Sex','Sex Survived vs Not Survived')  ","53e845d8":"pd.crosstab([train.Sex,train.Survived],train.Pclass,margins=True).style.background_gradient(cmap='summer_r')","ff108a16":"print('Oldest Passenger was ',data['Age'].max(),'Years')\nprint('Youngest Passenger was ',data['Age'].min(),'Years')\nprint('Average Age on the ship was ',int(data['Age'].mean()),'Years')","f62a9437":"sns.swarmplot(x=train['Survived'], y=train['Age'])\nplt.xlabel(\"Survived\")\nplt.ylabel(\"Age\")\nplt.show()","d35f2681":"f,ax=plt.subplots(1,2,figsize=(18,8))\nsns.violinplot(\"Pclass\",\"Age\", hue=\"Survived\", data=train,split=True,ax=ax[0])\nax[0].set_title('Pclass and Age vs Survived')\nax[0].set_yticks(range(0,110,10))\nsns.violinplot(\"Sex\",\"Age\", hue=\"Survived\", data=train,split=True,ax=ax[1])\nax[1].set_title('Sex and Age vs Survived')\nax[1].set_yticks(range(0,110,10))\nplt.show()","1b86930c":"data.head()","6c55b926":"temp.groupby('Initial')['Age'].mean() #\uc774\ub2c8\uc15c \ubcc4 \ud3c9\uade0 \uc5f0\ub839 \uccb4\ud06c","b0a7cb54":"temp['Newage']=temp['Age']\n\ndef newage(k,n):\n  temp.loc[(temp.Age.isnull())&(temp.Initial==k),'Newage']= n\n      \nnewage('Capt',int(70.000000))\nnewage('Col',int(54.000000))\nnewage('Countess',int(33.000000))\nnewage('Don',int(40.000000))\nnewage('Dona',int(39.000000))\nnewage('Dr',int(43.571429))\nnewage('Jonkheer',int(38.000000))\nnewage('Lady',int(48.000000))\nnewage('Major',int(48.500000))\nnewage('Master',int(5.482642))\nnewage('Miss',int(21.774238))\nnewage('Mlle',int(24.000000))\nnewage('Mme',int(24.000000))\nnewage('Mr',int(32.252151))\nnewage('Mrs',int(36.994118))\nnewage('Ms',int(28.000000))\nnewage('Rev',int(41.250000))\nnewage('Sir',int(49.000000))\n\n","9113084b":"temp['Age'][70:80]","6f6d8cb6":"temp['Newage'][70:80]","2b29eaad":"survpct('Newage')\n","67fb9d43":"pd.crosstab(temp.Newage,temp.Survived,margins=True).style.background_gradient(cmap='summer_r')","7e60c6c9":"temp['Age_Range']=pd.qcut(temp['Newage'],10)\ndef groupmean(a,b):\n  return temp.groupby([a])[b].mean().to_frame().style.background_gradient(cmap='summer_r')\n\ngroupmean('Age_Range', 'Newage')","6725157a":"groupmean('Age_Range', 'Survived')","fc351f4b":"temp.head(10)","915510c9":"temp['Gender']= temp['Sex']\n\nfor n in range(1,4):\n  temp.loc[(temp['Sex'] == 'male') & (temp['Pclass'] == n),'Gender']= 'm'+str(n)\n  temp.loc[(temp['Sex'] == 'female') & (temp['Pclass'] == n),'Gender']= 'w'+str(n)\n\ntemp.loc[(temp['Gender'] == 'm3'),'Gender']= 'm2'\ntemp.loc[(temp['Gender'] == 'w3'),'Gender']= 'w2'\ntemp.loc[(temp['Age'] < 1.0),'Gender']= 'baby'\ntemp.loc[(temp['Age'] > 75.0),'Gender']= 'old'\n\n","7e73637d":"groupmean('Gender', 'Survived')","e60ce683":"temp['Agroup']=0\n\ntemp.loc[temp['Newage']<1.0,'Agroup']= 1\ntemp.loc[(temp['Newage']>=1.0)&(temp['Newage']<=3.0),'Agroup']= 2\ntemp.loc[(temp['Newage']>3.0)&(temp['Newage']<11.0),'Agroup']= 7\ntemp.loc[(temp['Newage']>=11.0)&(temp['Newage']<15.0),'Agroup']= 13\ntemp.loc[(temp['Newage']>=15.0)&(temp['Newage']<18.0),'Agroup']= 16\ntemp.loc[(temp['Newage']>=18.0)&(temp['Newage']<= 20.0),'Agroup']= 18\ntemp.loc[(temp['Newage']> 20.0)&(temp['Newage']<=22.0),'Agroup']= 21\ntemp.loc[(temp['Newage']>22.0)&(temp['Newage']<=26.0),'Agroup']= 24\ntemp.loc[(temp['Newage']>26.0)&(temp['Newage']<=30.0),'Agroup']= 28\ntemp.loc[(temp['Newage']>30.0)&(temp['Newage']<=32.0),'Agroup']= 31\ntemp.loc[(temp['Newage']>32.0)&(temp['Newage']<=34.0),'Agroup']= 33\ntemp.loc[(temp['Newage']>34.0)&(temp['Newage']<=38.0),'Agroup']= 36\ntemp.loc[(temp['Newage']>38.0)&(temp['Newage']<=52.0),'Agroup']= 45\ntemp.loc[(temp['Newage']>52.0)&(temp['Newage']<=75.0),'Agroup']= 60\ntemp.loc[temp['Newage']>75.0,'Agroup']= 78","b34e7b1c":"groupmean('Agroup', 'Survived')","d8b4940e":"groupmean('Agroup', 'Age')","8bf9ee25":"temp.head()","2e78cfb0":"temp['Alone']=0\n\ntemp.loc[(temp['SibSp']==0)& (temp['Parch']==0),'Alone']= 1","18bd8746":"temp.head(n=10)","40f4bdfd":"temp['Family']=0\n\nfor i in temp:\n  temp['Family'] = temp['Parch'] + temp['SibSp'] +1","c9f33495":"temp.head(20)","bf443d05":"survpct('Family')","ea811dd3":"bag('Parch','Survived','Survived per Parch','Parch Survived vs Not Survived') ","ac27b231":"pd.crosstab([temp.Family,temp.Survived],temp.Pclass,margins=True).style.background_gradient(cmap='summer_r')","469b8b90":"temp.Ticket.head(n=20)","3a31e433":"temp.Ticket.isnull().any()","658b793f":"temp['Initick'] = 0\nfor s in temp:\n    temp['Initick']=temp.Ticket.str.extract('^([A-Za-z]+)')\nfor s in temp:\n    temp.loc[(temp.Initick.isnull()),'Initick']='X'\ntemp.head()","f80781fe":"temp.groupby(['Initick'])['Survived'].mean().to_frame().style.background_gradient(cmap='summer_r')","993046fe":"def groupmean(a,b):\n  return temp.groupby([a])[b].mean().to_frame().style.background_gradient(cmap='summer_r')\n\ngroupmean('Initick', 'Survived')","56813092":"pd.crosstab([temp.Pclass,temp.Survived],temp.Initick == 'X',margins=True).style.background_gradient(cmap='summer_r')","9ae6bb19":"train['Tgroup'] = 0\n\ntemp['Tgroup'] = 0\n\ntemp.loc[(temp['Initick']=='X')& (temp['Pclass']==1),'Tgroup']= 1\ntemp.loc[(temp['Initick']=='X')& (temp['Pclass']==2),'Tgroup']= 2\ntemp.loc[(temp['Initick']=='X')& (temp['Pclass']==3),'Tgroup']= 3\ntemp.loc[(temp['Initick']=='Fa'),'Tgroup']= 3\ntemp.loc[(temp['Initick']=='SCO'),'Tgroup']= 4\ntemp.loc[(temp['Initick']=='A'),'Tgroup']= 5\ntemp.loc[(temp['Initick']=='CA'),'Tgroup']= 6\ntemp.loc[(temp['Initick']=='W'),'Tgroup']= 7\ntemp.loc[(temp['Initick']=='S'),'Tgroup']= 8\ntemp.loc[(temp['Initick']=='SOTON'),'Tgroup']= 9\ntemp.loc[(temp['Initick']=='LINE'),'Tgroup']= 10\ntemp.loc[(temp['Initick']=='STON'),'Tgroup']= 11\ntemp.loc[(temp['Initick']=='C'),'Tgroup']= 12\ntemp.loc[(temp['Initick']=='P'),'Tgroup']= 13\ntemp.loc[(temp['Initick']=='WE'),'Tgroup']= 14\ntemp.loc[(temp['Initick']=='SC'),'Tgroup']= 15\ntemp.loc[(temp['Initick']=='F'),'Tgroup']= 16\ntemp.loc[(temp['Initick']=='PP'),'Tgroup']= 17\ntemp.loc[(temp['Initick']=='PC'),'Tgroup']= 17\ntemp.loc[(temp['Initick']=='SO'),'Tgroup']= 18\ntemp.loc[(temp['Initick']=='SW'),'Tgroup']= 19\n","6f78eae9":"groupmean('Tgroup', 'Survived')","0d5dffec":"print('Highest Fare was:',temp['Fare'].max())\nprint('Lowest Fare was:',temp['Fare'].min())\nprint('Average Fare was:',temp['Fare'].mean())","2798dce2":"f,ax=plt.subplots(1,3,figsize=(20,8))\nsns.distplot(train[train['Pclass']==1].Fare,ax=ax[0])\nax[0].set_title('Fares in Pclass 1')\nsns.distplot(train[train['Pclass']==2].Fare,ax=ax[1])\nax[1].set_title('Fares in Pclass 2')\nsns.distplot(train[train['Pclass']==3].Fare,ax=ax[2])\nax[2].set_title('Fares in Pclass 3')\nplt.show()","c1247837":"temp['Fare_Range']=pd.qcut(train['Fare'],10)\ngroupmean('Fare_Range', 'Fare')","6c1423a8":"temp['Fgroup']=0\n\ntemp.loc[temp['Fare']<= 7.125,'Fgroup']=5.0\ntemp.loc[(temp['Fare']>7.125)&(temp['Fare']<=7.9),'Fgroup']= 7.5\ntemp.loc[(temp['Fare']>7.9)&(temp['Fare']<=8.03),'Fgroup']= 8.0\ntemp.loc[(temp['Fare']>8.03)&(temp['Fare']<10.5),'Fgroup']= 9.5\ntemp.loc[(temp['Fare']>=10.5)&(temp['Fare']<23.0),'Fgroup']= 16.0\ntemp.loc[(temp['Fare']>=23.0)&(temp['Fare']<=27.8),'Fgroup']= 25.5\ntemp.loc[(temp['Fare']>27.8)&(temp['Fare']<=51.0),'Fgroup']= 38.0\ntemp.loc[(temp['Fare']>51.0)&(temp['Fare']<=73.5),'Fgroup']= 62.0\ntemp.loc[temp['Fare']>73.5,'Fgroup']= 100.0","97550bd6":"temp.head()","a77d9e1f":"temp.Cabin.value_counts()","529c421b":"temp.Cabin.isnull().sum()","05c85620":"temp['Inicab'] = 0\nfor i in temp:\n    temp['Inicab']=temp.Cabin.str.extract('^([A-Za-z]+)')\n    temp.loc[((temp.Cabin.isnull()) & (temp.Pclass.values == 1 )),'Inicab']='X'\n    temp.loc[((temp.Cabin.isnull()) & (temp.Pclass.values == 2 )),'Inicab']='Y'\n    temp.loc[((temp.Cabin.isnull()) & (temp.Pclass.values == 3 )),'Inicab']='Z'\n","daf15bec":"temp.head(n=20)","0e5f1b64":"temp.Inicab.value_counts()","40d034c8":"temp['Inicab'].replace(['A','B', 'C', 'D', 'E', 'F', 'G','T', 'X', 'Y', 'Z'],[1,2,3,4,5,6,7,8,9,10,11],inplace=True)","3de2a492":"temp.head()","1f51148e":"pd.crosstab([temp.Embarked,temp.Pclass],[temp.Sex,temp.Survived],margins=True).style.background_gradient(cmap='summer_r')\n","99d7c019":"sns.factorplot('Embarked','Survived',data=temp)\nfig=plt.gcf()\nfig.set_size_inches(5,3)\nplt.show()","f3815c33":"f,ax=plt.subplots(2,2,figsize=(20,15))\nsns.countplot('Embarked',data=temp,ax=ax[0,0])\nax[0,0].set_title('No. Of Passengers Boarded')\nsns.countplot('Embarked',hue='Sex',data=temp,ax=ax[0,1])\nax[0,1].set_title('Male-Female Split for Embarked')\nsns.countplot('Embarked',hue='Survived',data=temp,ax=ax[1,0])\nax[1,0].set_title('Embarked vs Survived')\nsns.countplot('Embarked',hue='Pclass',data=temp,ax=ax[1,1])\nax[1,1].set_title('Embarked vs Pclass')\nplt.subplots_adjust(wspace=0.2,hspace=0.5)\nplt.show()","7b5bafa7":"temp.loc[(temp.Embarked.isnull())]","ed61ff0d":"temp.loc[(temp.Ticket == '113572')]","5a9ae1c0":"temp1 = pd.DataFrame()\ntemp1['Pclass'] =  temp['Pclass']\ntemp1['Embarked'] = temp['Embarked']\ntemp1['Ticket'] = temp['Ticket']\ntemp1.sort_values(['Ticket'], ascending = True)[55:80]","9cff4475":"temp.loc[(train.Embarked.isnull()),'Embarked']='S'","c0e5e66b":"temp.sort_values(['Ticket'], ascending = True)['Ticket'][55:60]","dc35e726":"temp.sort_values(['Ticket'], ascending = True)['Embarked'][55:60]","734b4fd2":"temp.head()","1006a8d8":"temp.groupby('Initial').Survived.mean()","6623d11b":"temp['Initial'].replace(['Capt', 'Col', 'Countess', 'Don', 'Dona' , 'Dr', 'Jonkheer', 'Lady', 'Major', 'Master',  'Miss'  ,'Mlle', 'Mme', 'Mr', 'Mrs', 'Ms', 'Rev', 'Sir'],['Sacrificed', 'Respected', 'Nobles', 'Mr', 'Mrs', 'Respected', 'Mr', 'Nobles', 'Respected', 'Kids', 'Miss', 'Nobles', 'Nobles', 'Mr', 'Mrs', 'Nobles', 'Sacrificed', 'Nobles'],inplace=True)","5033f1d2":"temp.groupby('Initial').Survived.mean()","115854ac":"temp['Initial'].replace(['Kids', 'Miss', 'Mr', 'Mrs', 'Nobles', 'Respected', 'Sacrificed'],[4,4,2,5,6,3,1],inplace=True)","b207ef56":"temp.groupby('Initial').Survived.mean()","8a27b5db":"temp.groupby('Embarked').Survived.mean()","5064a184":"temp[\"Embarked\"].replace(['C','Q', 'S'], [4,3,3], inplace =True )","398c9df1":"temp.groupby('Gender').Survived.mean()","301f7255":"temp[\"Gender\"].replace(['baby','m1', 'm2', 'old', 'w1', 'w2'], [6,3,2,6,6,4], inplace =True )","b6429ebb":"temp.head()","3786833e":"temp.groupby('Pclass').Survived.mean()","427eb100":"temp[\"Pclass\"].replace([1,2,3], [4,3,2], inplace =True )","da15304f":"temp.groupby('Inicab').Survived.mean()","d5237f00":"temp[\"Inicab\"].replace([1,2,3,4,5,6,7,8,9,10,11], [3,5,4,5,5,4,4,1,3,3,2], inplace =True )","2ce9c2ae":"temp.groupby('Fgroup').Survived.mean()","21fd7852":"temp[\"Fgroup\"].replace([0.0, 5.0, 7.5, 8.0, 9.5, 16.0, 25.5, 38.0, 62.0, 100.0], [3,1,2,3,2,3,3,3,4,5], inplace =True )","237c5c33":"temp.groupby('Tgroup').Survived.mean()","419ae23f":"temp[\"Tgroup\"].replace([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19], [3,4,3,2,1,1,1,1,2,2,2,3,3,4,4,4,4,4,6,6], inplace =True )","661d9e4d":"temp.groupby('Family').Survived.mean()","56e40984":"temp[\"Family\"].replace([1,2,3,4,5,6,7,8,11], [3,4,4,5,2,2,3,1,1], inplace =True )","4b51c836":"temp.groupby('Agroup').Survived.mean()","90f25bfb":"temp[\"Agroup\"].replace([1,2,7,13,16,18,21,24,28, 31, 33, 36, 45, 60, 78], [6,4,4,4,3,3,3,3,3,2,3,4,3,3,6], inplace =True )","f8adf026":"temp.head()","b6f79c51":"missingno.matrix(temp, figsize = (10,5))","512f0cd4":"df = pd.DataFrame()","dde6113e":"def sub(a,b):\n  df[a]=temp[b]\n\nsub('Pclass', 'Pclass')\nsub('Name', 'Initial')\nsub('Sex', 'Gender')\nsub('Age', 'Agroup')\nsub('Family', 'Family')\nsub('Ticket', 'Tgroup')\nsub('Fare', 'Fgroup')\nsub('Cabin', 'Inicab')\nsub('Embarked', 'Embarked')\n\n\ndf.head()","8aa52496":"df.isnull().sum()","9c1b5dc7":"len(df)","38835ca0":"df.head()","210cada0":"df['Max'] = 0\ndf['Max'] = df.apply(lambda x:x.max(), axis =1)\ndf","0d59abcc":"df['Mean'] = 0\ndf['Mean'] = df.apply(lambda x:x.mean(), axis =1)\ndf.head(n=20)","04b6575c":"df['Min'] = 6\ndf['Min'] = df.apply(lambda x:x.min(), axis =1)\ndf.head(n=30)","9b4fe9e9":"df['Probably'] = 0 # For people probably Survived\ndf.loc[(df['Max'] == 6),'Probably']= 1\n\ndf.head(n=20)","1ea0d456":"df['Likely'] = 0 # For people likely Survived\ndf.loc[(df['Min'] >= 3),'Likely']= 1\n\ndf.head(n=20)","e3ee9cea":"df['ProbablyNot'] = 0 # For people probably not Survived\ndf.loc[(df['Min'] == 1),'ProbablyNot']= 1\n\ndf.head(n=20)","e1f87c93":"df['NotLikely'] = 0 # For people not likely Survived\ndf.loc[(df['Max'] <= 3),'NotLikely']= 1\n\ndf.head(n=20)","64e3f759":"# Chances for someone in the middle\ndf['Midchance'] = 0 \ndf.loc[(df['Mean'] <= 2.3),'Midchance']= 1\ndf.loc[(df['Mean'] >= 3.3),'Midchance']= 4\ndf.loc[(df['Mean']>2.3)&(df['Mean']<3.3),'Midchance']= 2\ndf.loc[(df['Mean']>2.3)&(df['Mean']<3.3) & (df['Sex']==4),'Midchance']= 3\ndf.loc[(df['Mean']>2.3)&(df['Mean']<3.3) & (df['Name'] ==2),'Midchance']= 3\ndf.head(n=30)","b24da722":"df_enc = df.apply(LabelEncoder().fit_transform)\n                          \ndf_enc.head()","1edc677a":"train = df_enc[:ntrain]\ntest = df_enc[ntrain:]","ce389e12":"X_test = test\nX_train = train","9a56ee25":"scaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","75c3c54a":"X_train","8b33693b":"ran = RandomForestClassifier(random_state=1)\nknn = KNeighborsClassifier()\nlog = LogisticRegression()\nxgb = XGBClassifier()\ngbc = GradientBoostingClassifier()\nsvc = SVC(probability=True)\next = ExtraTreesClassifier()\nada = AdaBoostClassifier()\ngnb = GaussianNB()\ngpc = GaussianProcessClassifier()\nbag = BaggingClassifier()\n\n# Prepare lists\nmodels = [ran, knn, log, xgb, gbc, svc, ext, ada, gnb, gpc, bag]         \nscores = []\n\n# Sequentially fit and cross validate all models\nfor mod in models:\n    mod.fit(X_train, y_train)\n    acc = cross_val_score(mod, X_train, y_train, scoring = \"accuracy\", cv = 10)\n    scores.append(acc.mean())","8cbcda7d":"# \uacb0\uacfc \ud14c\uc774\ube14\uc744 \ub9cc\ub4ed\ub2c8\ub2e4.\nresults = pd.DataFrame({\n    'Model': ['Random Forest', 'K Nearest Neighbour', 'Logistic Regression', 'XGBoost', 'Gradient Boosting', 'SVC', 'Extra Trees', 'AdaBoost', 'Gaussian Naive Bayes', 'Gaussian Process', 'Bagging Classifier'],\n    'Score': scores})\n\nresult_df = results.sort_values(by='Score', ascending=False).reset_index(drop=True)\nresult_df.head(11)","2ad9e4b1":"# Plot results\nsns.barplot(x='Score', y = 'Model', data = result_df, color = 'c')\nplt.title('Machine Learning Algorithm Accuracy Score \\n')\nplt.xlabel('Accuracy Score (%)')\nplt.ylabel('Algorithm')\nplt.xlim(0.80, 0.84)","efe42658":"# \uc911\uc694\ub3c4\ub97c \ubcf4\ub294 \ud568\uc218\ub97c \ub9cc\ub4ed\ub2c8\ub2e4.\ndef importance_plotting(data, x, y, palette, title):\n    sns.set(style=\"whitegrid\")\n    ft = sns.PairGrid(data, y_vars=y, x_vars=x, size=5, aspect=1.5)\n    ft.map(sns.stripplot, orient='h', palette=palette, edgecolor=\"black\", size=15)\n    \n    for ax, title in zip(ft.axes.flat, titles):\n    # \uac01 \uadf8\ub798\ud504\ub9c8\ub2e4 \uc0c8\ub85c\uc6b4 \ud0c0\uc774\ud2c0\uc744 \uc90d\ub2c8\ub2e4.\n        ax.set(title=title)\n    # \uadf8\ub798\ud504\ub97c \ubc14\ub85c \uc138\uc6cc \ubd05\ub2c8\ub2e4.\n        ax.xaxis.grid(False)\n        ax.yaxis.grid(True)\n    plt.show()","96ea9cf4":"# \ub370\uc774\ud130 \ud504\ub808\uc784\uc5d0 \ud56d\ubaa9 \uc911\uc694\ub3c4\ub97c \ub123\uc2b5\ub2c8\ub2e4.\nfi = {'Features':train.columns.tolist(), 'Importance':xgb.feature_importances_}\nimportance = pd.DataFrame(fi, index=None).sort_values('Importance', ascending=False)","5e66f1d5":"# \uadf8\ub798\ud504 \uc81c\ubaa9\ntitles = ['The most important features in predicting survival on the Titanic: XGB']\n\n# \uadf8\ub798\ud504 \uadf8\ub9ac\uae30\nimportance_plotting(importance, 'Importance', 'Features', 'Reds_r', titles)","ee6aaed7":"# \uc911\uc694\ub3c4\ub97c \ub370\uc774\ud130\ud504\ub808\uc784\uc5d0 \ub123\uc2b5\ub2c8\ub2e4. Logistic regression\uc5d0\uc11c\ub294 \uc911\uc694\ub3c4\ubcf4\ub2e4 coefficients\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \n# \uc544\ub798\ub294 Features\ub77c\ub294 \uc5f4\uc5d0 \ud2b8\ub808\uc778\uc758 \uc5f4\ub4e4\uc758 \uc774\ub984\uc744 \ub9ac\uc2a4\ud2b8\ub85c \ub9cc\ub4e4\uc5b4\uc11c \ub123\uace0 Importance\uc5d0\ub294 Logistic regression\uc5d0\ub294 coefficient\ub97c \ubc14\uafb8\uc5b4 \ub123\uc5b4\ub77c\ub294 \ub118\ud30c\uc774 \uba85\ub839\uc785\ub2c8\ub2e4.(\uc989 \uac00\ub85c\ub97c \uc138\ub85c\ub85c)\nfi = {'Features':train.columns.tolist(), 'Importance':np.transpose(log.coef_[0])}\nimportance = pd.DataFrame(fi, index=None).sort_values('Importance', ascending=False)","fc381135":"importance.head()","48006a57":"# \uadf8\ub798\ud504 \ud0c0\uc774\ud2c0\ntitles = ['The most important features in predicting survival on the Titanic: Logistic Regression']\n\n# \uadf8\ub798\ud504 \uadf8\ub9ac\uae30\nimportance_plotting(importance, 'Importance', 'Features', 'Reds_r', titles)","63be70a3":"# 5\uac00\uc9c0 \ubaa8\ub378\uc5d0 \ub300\ud55c \ud56d\ubaa9 \uc911\uc694\ub3c4 \uc5bb\uae30\ngbc_imp = pd.DataFrame({'Feature':train.columns, 'gbc importance':gbc.feature_importances_})\nxgb_imp = pd.DataFrame({'Feature':train.columns, 'xgb importance':xgb.feature_importances_})\nran_imp = pd.DataFrame({'Feature':train.columns, 'ran importance':ran.feature_importances_})\next_imp = pd.DataFrame({'Feature':train.columns, 'ext importance':ext.feature_importances_})\nada_imp = pd.DataFrame({'Feature':train.columns, 'ada importance':ada.feature_importances_})\n\n# \uc774\ub97c \ud558\ub098\uc758 \ub370\uc774\ud130\ud504\ub808\uc784\uc73c\ub85c\nimportances = gbc_imp.merge(xgb_imp, on='Feature').merge(ran_imp, on='Feature').merge(ext_imp, on='Feature').merge(ada_imp, on='Feature')\n\n# \ud56d\ubaa9\ub2f9 \ud3c9\uade0 \uc911\uc694\ub3c4\nimportances['Average'] = importances.mean(axis=1)\n\n# \ub7ad\ud0b9 \uc815\ud558\uae30\nimportances = importances.sort_values(by='Average', ascending=False).reset_index(drop=True)\n\n# \ubcf4\uae30\nimportances","fb040615":"# \uc911\uc694\ub3c4\ub97c \ub2e4\uc2dc \ub370\uc774\ud130 \ud504\ub808\uc784\uc5d0 \ub123\uae30\nfi = {'Features':importances['Feature'], 'Importance':importances['Average']}\nimportance = pd.DataFrame(fi, index=None).sort_values('Importance', ascending=False)","d7b59f3c":"# \uadf8\ub798\ud504 \ud0c0\uc774\ud2c0\ntitles = ['The most important features in predicting survival on the Titanic: 5 model average']\n\n# \uadf8\ub798\ud504 \ubcf4\uae30\nimportance_plotting(importance, 'Importance', 'Features', 'Reds_r', titles)","f7fbfa24":"# \uc57d\ud55c \ub188 \ud0c8\ub77d, \ubcf8\ub798 \uc880 \ud0c8\ub77d\uc2dc\ud0a4\ub294\ub370 \ud0c8\ub77d\uc548 \uc2dc\ud0a4\uace0 #\uc73c\ub85c \ucc98\ub9ac\ud558\uace0 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n# train = train.drop(['Embarked', 'Pclass'], axis=1)\n# test = test.drop(['Embarked', 'Pclass'], axis=1)\n\n# \ubaa8\ub378\uc758 \ubcc0\uc218\ub97c \ub2e4\uc2dc \uc815\uc758\ud558\uace0\nX_train = train\nX_test = test\n\n# \ubc14\uafc9\ub2c8\ub2e4.\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","81e94031":"X_train","47b67528":"X_test","da279fd0":"# \ubaa8\ub378 \uc0ac\uc6a9\nran = RandomForestClassifier(random_state=1)\nknn = KNeighborsClassifier()\nlog = LogisticRegression()\nxgb = XGBClassifier(random_state=1)\ngbc = GradientBoostingClassifier(random_state=1)\nsvc = SVC(probability=True)\next = ExtraTreesClassifier(random_state=1)\nada = AdaBoostClassifier(random_state=1)\ngnb = GaussianNB()\ngpc = GaussianProcessClassifier()\nbag = BaggingClassifier(random_state=1)\n\n# \ub9ac\uc2a4\ud2b8\nmodels = [ran, knn, log, xgb, gbc, svc, ext, ada, gnb, gpc, bag]         \nscores_v2 = []\n\n# Fit & cross validate\nfor mod in models:\n    mod.fit(X_train, y_train)\n    acc = cross_val_score(mod, X_train, y_train, scoring = \"accuracy\", cv = 10)\n    scores_v2.append(acc.mean())","a307d64e":"# \ud14c\uc774\ube14 \ub9cc\ub4e4\uc5b4\uc11c \ubcf4\uae30\nresults = pd.DataFrame({\n    'Model': ['Random Forest', 'K Nearest Neighbour', 'Logistic Regression', 'XGBoost', 'Gradient Boosting', 'SVC', 'Extra Trees', 'AdaBoost', 'Gaussian Naive Bayes', 'Gaussian Process', 'Bagging Classifier'],\n    'Original Score': scores,\n    'Score with feature selection': scores_v2})\n\nresult_df = results.sort_values(by='Score with feature selection', ascending=False).reset_index(drop=True)\nresult_df.head(11)","136ecbb4":"# \uacb0\uacfc\nsns.barplot(x='Score with feature selection', y = 'Model', data = result_df, color = 'c')\nplt.title('Machine Learning Algorithm Accuracy Score \\n')\nplt.xlabel('Accuracy Score (%)')\nplt.ylabel('Algorithm')\nplt.xlim(0.75, 0.85)","d5008a8d":"# \ud30c\ub77c\ubbf8\ud130 \uc11c\uce58\nCs = [0.001, 0.01, 0.1, 1, 5, 10, 15, 20, 50, 100]\ngammas = [0.001, 0.01, 0.1, 1]\n\n# \ud30c\ub77c\ubbf8\ud130 \uadf8\ub9ac\ub4dc \uc14b\ud305\nhyperparams = {'C': Cs, 'gamma' : gammas}\n\n# \uad50\ucc28\uac80\uc99d\ngd=GridSearchCV(estimator = SVC(probability=True), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\n# \ubaa8\ub378 fiting \ubc0f \uacb0\uacfc\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","cb84edb4":"learning_rate = [0.0001, 0.0005, 0.001, 0.005, 0.01, 0.05, 0.1, 0.2]\nn_estimators = [100, 250, 500, 750, 1000, 1250, 1500]\n\nhyperparams = {'learning_rate': learning_rate, 'n_estimators': n_estimators}\n\ngd=GridSearchCV(estimator = GradientBoostingClassifier(), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","bd9ec3e7":"penalty = ['l1', 'l2']\nC = np.logspace(0, 4, 10)\n\nhyperparams = {'penalty': penalty, 'C': C}\n\ngd=GridSearchCV(estimator = LogisticRegression(), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","4664153c":"learning_rate = [0.0001, 0.0005, 0.001, 0.005, 0.01, 0.05, 0.1, 0.2]\nn_estimators = [10, 25, 50, 75, 100, 250, 500, 750, 1000]\n\nhyperparams = {'learning_rate': learning_rate, 'n_estimators': n_estimators}\n\ngd=GridSearchCV(estimator = XGBClassifier(), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","a433365a":"max_depth = [3, 4, 5, 6, 7, 8, 9, 10]\nmin_child_weight = [1, 2, 3, 4, 5, 6]\n\nhyperparams = {'max_depth': max_depth, 'min_child_weight': min_child_weight}\n\ngd=GridSearchCV(estimator = XGBClassifier(learning_rate=0.0001, n_estimators=10), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","be26d26e":"gamma = [i*0.1 for i in range(0,5)]\n\nhyperparams = {'gamma': gamma}\n\ngd=GridSearchCV(estimator = XGBClassifier(learning_rate=0.0001, n_estimators=10, max_depth=3, \n                                          min_child_weight=1), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","159fe2ef":"subsample = [0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1]\ncolsample_bytree = [0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1]\n    \nhyperparams = {'subsample': subsample, 'colsample_bytree': colsample_bytree}\n\ngd=GridSearchCV(estimator = XGBClassifier(learning_rate=0.0001, n_estimators=10, max_depth=3, \n                                          min_child_weight=1, gamma=0), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","3bd62764":"reg_alpha = [1e-5, 1e-2, 0.1, 1, 100]\n    \nhyperparams = {'reg_alpha': reg_alpha}\n\ngd=GridSearchCV(estimator = XGBClassifier(learning_rate=0.0001, n_estimators=10, max_depth=3, \n                                          min_child_weight=1, gamma=0, subsample=0.6, colsample_bytree=0.9),\n                                         param_grid = hyperparams, verbose=True, cv=5, scoring = \"accuracy\")\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","fe1af1aa":"n_restarts_optimizer = [0, 1, 2, 3]\nmax_iter_predict = [1, 2, 5, 10, 20, 35, 50, 100]\nwarm_start = [True, False]\n\nhyperparams = {'n_restarts_optimizer': n_restarts_optimizer, 'max_iter_predict': max_iter_predict, 'warm_start': warm_start}\n\ngd=GridSearchCV(estimator = GaussianProcessClassifier(), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","52f0524e":"n_estimators = [10, 25, 50, 75, 100, 125, 150, 200]\nlearning_rate = [0.001, 0.01, 0.1, 0.5, 1, 1.5, 2]\n\nhyperparams = {'n_estimators': n_estimators, 'learning_rate': learning_rate}\n\ngd=GridSearchCV(estimator = AdaBoostClassifier(), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","a18b5e42":"n_neighbors = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 16, 18, 20]\nalgorithm = ['auto']\nweights = ['uniform', 'distance']\nleaf_size = [1, 2, 3, 4, 5, 10, 15, 20, 25, 30]\n\nhyperparams = {'algorithm': algorithm, 'weights': weights, 'leaf_size': leaf_size, \n               'n_neighbors': n_neighbors}\n\ngd=GridSearchCV(estimator = KNeighborsClassifier(), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\n# Fitting model and return results\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","5829e4ee":"n_estimators = [10, 25, 50, 75, 100]\nmax_depth = [3, None]\nmax_features = [1, 3, 5, 7]\nmin_samples_split = [2, 4, 6, 8, 10]\nmin_samples_leaf = [2, 4, 6, 8, 10]\n\nhyperparams = {'n_estimators': n_estimators, 'max_depth': max_depth, 'max_features': max_features,\n               'min_samples_split': min_samples_split, 'min_samples_leaf': min_samples_leaf}\n\ngd=GridSearchCV(estimator = RandomForestClassifier(), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","35201120":"n_estimators = [10, 25, 50, 75, 100]\nmax_depth = [3, None]\nmax_features = [1, 3, 5, 7]\nmin_samples_split = [2, 4, 6, 8, 10]\nmin_samples_leaf = [2, 4, 6, 8, 10]\n\nhyperparams = {'n_estimators': n_estimators, 'max_depth': max_depth, 'max_features': max_features,\n               'min_samples_split': min_samples_split, 'min_samples_leaf': min_samples_leaf}\n\ngd=GridSearchCV(estimator = ExtraTreesClassifier(), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","44e4f8ef":"n_estimators = [10, 15, 20, 25, 50, 75, 100, 150]\nmax_samples = [1, 2, 3, 5, 7, 10, 15, 20, 25, 30, 50]\nmax_features = [1, 3, 5, 7]\n\nhyperparams = {'n_estimators': n_estimators, 'max_samples': max_samples, 'max_features': max_features}\n\ngd=GridSearchCV(estimator = BaggingClassifier(), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","be4f11bd":"# \ud29c\ub2dd \ubaa8\ub378 \uc2dc\uc791\n# sample\uc744 split\ud558\ub294 \uac83\uc740 \uc804\uccb4\ub370\uc774\ud130 80%\ub97c \ud2b8\ub808\uc778\uc14b\uc5d0 20%\ub294 \ud14c\uc2a4\ud2b8\uc14b\uc5d0 \uc90c  \nran = RandomForestClassifier(n_estimators=25,\n                             max_depth=3, \n                             max_features=3,\n                             min_samples_leaf=2, \n                             min_samples_split=8,  \n                             random_state=1)\n\nknn = KNeighborsClassifier(algorithm='auto', \n                           leaf_size=1, \n                           n_neighbors=5, \n                           weights='uniform')\n\nlog = LogisticRegression(C=2.7825594022071245,\n                         penalty='l2')\n\nxgb = XGBClassifier(learning_rate=0.0001, \n                    n_estimators=10,\n                    random_state=1)\n\ngbc = GradientBoostingClassifier(learning_rate=0.0005,\n                                 n_estimators=1250,\n                                 random_state=1)\n\nsvc = SVC(probability=True)\n\next = ExtraTreesClassifier(max_depth=None, \n                           max_features=3,\n                           min_samples_leaf=2, \n                           min_samples_split=8,\n                           n_estimators=10,\n                           random_state=1)\n\nada = AdaBoostClassifier(learning_rate=0.1, \n                         n_estimators=50,\n                         random_state=1)\n\ngpc = GaussianProcessClassifier()\n\nbag = BaggingClassifier(random_state=1)\n\n# \ub9ac\uc2a4\ud2b8\nmodels = [ran, knn, log, xgb, gbc, svc, ext, ada, gnb, gpc, bag]         \nscores_v3 = []\n\n# Fit & \uad50\ucc28 \uac80\uc99d\nfor mod in models:\n    mod.fit(X_train, y_train)\n    acc = cross_val_score(mod, X_train, y_train, scoring = \"accuracy\", cv = 10)\n    scores_v3.append(acc.mean())","86c764f9":"# \ub7ad\ud0b9 \ud14c\uc774\ube14 \uc0dd\uc131\nresults = pd.DataFrame({\n    'Model': ['Random Forest', 'K Nearest Neighbour', 'Logistic Regression', 'XGBoost', 'Gradient Boosting', 'SVC', 'Extra Trees', 'AdaBoost', 'Gaussian Naive Bayes', 'Gaussian Process', 'Bagging Classifier'],\n    'Original Score': scores,\n    'Score with feature selection': scores_v2,\n    'Score with tuned parameters': scores_v3})\n\nresult_df = results.sort_values(by='Score with tuned parameters', ascending=False).reset_index(drop=True)\nresult_df.head(11)","5be8771d":"# \uacb0\uacfc\nsns.barplot(x=None, y = None, data = result_df, color = 'c')\nplt.title('Machine Learning Algorithm Accuracy Score \\n')\nplt.xlabel('Accuracy Score (%)')\nplt.ylabel('Algorithm')\nplt.xlim(0.75, 0.86)","c139425b":"#\ud29c\ub2dd\ud55c \ud30c\ub77c\ubbf8\ud130\ub85c \ud558\ub4dc\ubcf4\ud305\ngrid_hard = VotingClassifier(estimators = [('Random Forest', ran), \n                                           ('Logistic Regression', log),\n                                           ('XGBoost', xgb),\n                                           ('Gradient Boosting', gbc),\n                                           ('Extra Trees', ext),\n                                           ('AdaBoost', ada),\n                                           ('Gaussian Process', gpc),\n                                           ('SVC', svc),\n                                           ('K Nearest Neighbour', knn),\n                                           ('Bagging Classifier', bag)], voting = 'hard')\n\ngrid_hard_cv = model_selection.cross_validate(grid_hard, X_train, y_train, cv = 10)\ngrid_hard.fit(X_train, y_train)\n\nprint(\"Hard voting on test set score mean: {:.2f}\". format(grid_hard_cv['test_score'].mean()*100))","c9d99110":"grid_soft = VotingClassifier(estimators = [('Random Forest', ran), \n                                           ('Logistic Regression', log),\n                                           ('XGBoost', xgb),\n                                           ('Gradient Boosting', gbc),\n                                           ('Extra Trees', ext),\n                                           ('AdaBoost', ada),\n                                           ('Gaussian Process', gpc),\n                                           ('SVC', svc),\n                                           ('K Nearest Neighbour', knn),\n                                           ('Bagging Classifier', bag)], voting = 'soft')\n\ngrid_soft_cv = model_selection.cross_validate(grid_soft, X_train, y_train, cv = 10)\ngrid_soft.fit(X_train, y_train)\n\nprint(\"Soft voting on test set score mean: {:.2f}\". format(grid_soft_cv['test_score'].mean()*100))","1dda253d":"# Final predictions\npredictions = grid_soft.predict(X_test)\n\nsubmission = pd.concat([pd.DataFrame(passId), pd.DataFrame(predictions)], axis = 'columns')\n\nsubmission.columns = [\"PassengerId\", \"Survived\"]\nsubmission.to_csv('titanic_submission.csv', header = True, index = False)","aa4f3aed":"# And we finally make a submission \uadf8\ub9ac\uace0 \uc6b0\ub9ac\ub294 \uc81c\ucd9c\uc744 \ud569\ub2c8\ub2e4.\n# Please make sure you \"commit\" (It take a few minutes) \/ commit\ubc84\ud134\uc744 \ub204\ub974\uc2dc\ub294 \uac83\uc744 \uc78a\uc9c0 \ub9c8\uc138\uc694 (\uba87 \ubd84 \uac78\ub9bd\ub2c8\ub2e4)\n# And then you will see the submission file on the top right hand side at Data>Output>Kaggle\/working \/ \uadf8\ub7fc \uc6b0\uce21 \uc0c1\ub2e8 \ub370\uc774\ud130 \uc544\uc6c3\ud48b\uc5d0\uc11c \uc81c\ucd9c\uc6a9 \uacb0\uacfc\ubb3c\uc774 \ub098\uc62c \uac83\uc785\ub2c8\ub2e4.\n","ac4e284f":"* \uc774\uc5b4\uc11c \ud314\ub808\ud2b8\ub97c \ubc14\uafb8\uc5b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* Let's change the palletts.\n* For more information see the link below.\n* \ud314\ub808\ud2b8 \uad00\ub828\ud574\uc11c\ub294 \uc6b0\uce21 \ub9c1\ud06c \ucc38\uc870 https:\/\/seaborn.pydata.org\/tutorial\/color_palettes.html","846db966":"* capt.\uc774 70\uc138\uc778 \uac83 \ubcf4\ub2c8 \ub300\uc704 \ucea1\ud2f4\uc774 \uc544\ub2c8\ub77c \uc120\uc7a5 \ucea1\ud2f4\uc778 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \n* Dona\ub294 Mrs\ub85c \ub123\uaca0\uc2b5\ub2c8\ub2e4.\n* \uc774\ub2c8\uc15c \ubcc4 \ud3c9\uade0 \uc5f0\ub839\uc744 \ube48\uce78\uc5d0 \ub123\ub3c4\ub85d \ud569\ub2c8\ub2e4.\n\n* Put Dona into Mrs.\n* Enter the average age for each initial in the blank.\n","5be8df9c":"* \uc138 \uac1c\uc758 \ubcc0\uc218\ub97c \uc11e\uc5b4 \ubcf4\uc5ec \uc90d\ub2c8\ub2e4.\n* Mix three variables together.","9bd7b1e4":"* \ud3ec\ud2b8 C\uc758 \uc0dd\uc874 \uac00\ub2a5\uc131\uc740 0.55 \uc815\ub3c4\uc774\uba70 S\ub294 \uac00\uc7a5 \ub0ae\uc2b5\ub2c8\ub2e4.","440f560a":"* \uadf8\ub9ac\uace0 Initial \ubcc4 \ud3c9\uade0 \uc5f0\ub839\uc744 \ubcf4\uace0 Age\uc5d0 \uc801\uc6a9 \uc2dc\ud0a4\ub294 \uac83\uc774 \uc88b\uc744 \uac83 \uac19\uc2b5\ub2c8\ub2e4.\n* And it is better to see the average age by Initial and apply it to Age.","40139a3c":"### Task 83 -  Categorical Data Plots \ubc94\uc8fc\ud615 \ub370\uc774\ud130 \ud50c\ub86f\n\n### \ubc94\uc8fc\ud615 \uc2a4\uce90\ud130\ud50c\ub86f","c07807d7":"* \ubc30\uc5d0 \uc788\ub358 \ub0a8\uc790\uc758 \uc218\ub294 \uc5ec\uc790\uc758 \uc218\ubcf4\ub2e4 \ud6e8\uc52c \ub9ce\uc2b5\ub2c8\ub2e4. \uc5ec\uc804\ud788 \uc0dd\uc874 \uc5ec\uc131 \uc218\ub294 \ub0a8\uc131 \uc218\uc758 \uac70\uc758 \ub450 \ubc30\uc785\ub2c8\ub2e4. ** \uc120\ubc15 \uc5ec\uc131\uc758 \uc0dd\uc874\uc728\uc740 \uc57d 75 % \uc778 \ubc18\uba74 \ub0a8\uc131\uc758 \uc0dd\uc874\uc728\uc740 \uc57d 18-19 %\uc785\ub2c8\ub2e4. **\n* The number of men on the ship is much more than the number of women. Still, the number of surviving women is almost twice that of men. ** The survival rate of ship women is about 75%, while the survival rate of men is about 18-19%. **","7a9bd5c1":"### Task 56 - import\n\n* matplotlib.pyplotlib\uc744 plt\ub85c\uc368 \uc784\ud3ec\ud2b8 \ud569\ub2c8\ub2e4\n* %matplotlib inline\uc740 \uadf8\ub798\ud504\ub97c \ubcf4\uae30 \uc704\ud55c \uba85\ub839\uc5b4\ub77c \uc0dd\uac01\ud558\uc2dc\uba74 \ub429\ub2c8\ub2e4. \n\n* import  - import matplotlib.pyplotlib as plt\n* % matplotlib inline can be thought of as a command for viewing graphs.","8491132a":"## Task 52 - Matrix\n\n* Let's take a look at the basics of matrix.\n* \ud589\ub82c\uc758 \uae30\ucd08\uc801\uc778 \ub0b4\uc6a9\uc744 \ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n* As you know myarray1 looks lie the below\n* \ud589\ub82c myarray1\uc774 \ub2e4\uc74c\uacfc \uac19\uace0\n\n            1.1.1\n\n            1.1,1\n\n* And myarray 2 is like below\n* myarray2\uac00 \ub2e4\uc74c\uacfc \uac19\ub2e4\uba74\n\n            3,3 3,3 3,3\n\n* if you multiply myarray1 X myarray 2, you have to multiply \u3131 shape. \nmy array1 X my array 2 \ud589\ub82c\uc744 \uacf1\ud558\uba74 \u3131 \uc790 \ubaa8\uc591\uc73c\ub85c \ud558\uc8e0\n\nTherefore, the number of columns in the first and the number of rows in the second must be the same.\n\ub530\ub77c\uc11c \uccab \ubc88\uc9f8 \uac83\uc758 \uc5f4\uc218\uc640 \ub450\ubc88\uc9f8 \uac83\uc758 \ud589\uc218\uac00 \uac19\uc544\uc57c \ud569\ub2c8\ub2e4.\n\n* Also if you directly multiply myarray1 * myarray2, it will cause an error.\n* myarray1 * myarray2 \ud558\uba74 \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud569\ub2c8\ub2e4.\n\n* So we have to use the matrix multiplication method - np.matmul(myarray1,myarray2)\n* matrix multiplication method\ub97c \uc368\uc11c np.matmul(myarray1,myarray2)\ub85c \ud558\uba74 \uacf1\ud574 \uc9d1\ub2c8\ub2e4.","48caed80":"* \ub3c4\ubb34\uc9c0 \uac10\uc774 \uc548 \uc7a1\ud788\ub294 \ubc30\uc5f4\uc785\ub2c8\ub2e4.\n* \ube48\uce78\uc774 \uc5c6\ub294\uc9c0 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n* It is an array that may not make any sense.\n* Let's see if there are any blanks.","fbedebc9":"*Querry\ub97c \ubcf4\ub0b4\uc11c \uac80\uc0c9\ud55c \uac83\uc744 \ub098\ud0c0\ub0bc \uc218\ub3c4 \uc788\ub2e4.","5d94635f":"* \uc0ac\ud68c\ub294 \ubd88\uacf5\ud3c9 \ud588\uc73c\ub098 \ucd5c\uc18c\ud55c \ub0a8\uc790\ub4e4\uc758 \uc2e0\uc0ac\ub3c4\ub294 \uc788\uc5c8\ub2e4\uace0 \ud560 \uc218 \uc788\uc744 \uac83 \uac19\uc2b5\ub2c8\ub2e4.\n* The society was unfair but gentlemenship worked there.","3e423680":"* \uc774\uc81c \ube48 \uac83\uc774 \ubb50\uac00 \uc788\ub294\uc9c0 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* See if there are missing values","755a6ddf":"* \ub450 \ubcc0\uc218 \uc0ac\uc774\uc5d0 \uac04\ub2e8\ud55c scatter plot\uc744 \uadf8\ub9bd\ub2c8\ub2e4.\n* Draw a simple scatter plot between two variables.","398b87f6":"* First 20 lines \ucc98\uc74c 20\uc904\uc744 \ubd05\ub2c8\ub2e4. ","b30e76fb":"* Check how many vales are there on the column Pclass\/ Pcalss\uc5f4\uc758 \uac12\uc774 \uba87 \uac1c\uc529 \uc788\ub294\uc9c0 \ubd05\ub2c8\ub2e4.","f069c3e9":"### Task 67 -  \ub370\uc774\ud130 \ud504\ub808\uc784 \uc778\ub371\uc2f1","35de4242":"* \uc774\ub97c \uc810\uc2ec\uc800\ub141\uc73c\ub85c \ub098\ub204\uc5b4\uc11c \ubcf4\uc790","2b82da65":"* loc(location) operator\ub97c \uc4f0\uba74 \uc5ed\uc2dc \ud2b9\uc815 \uc904\uc758 \ub0b4\uc6a9\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n* You can also use the * loc (location) operator to see, manipulate or replace the contents of a particular line.","6135ef93":"### Task 98 - Making ML models \/ \uba38\uc2e0\ub7ec\ub2dd \ubaa8\ub378 \ub9cc\ub4e4\uae30","f60c6969":"### TASK 35   -    Lambda & Functions\n\n\n(1) \tmap() function \n\n        list(map(lambda x: x ** 3, range(5)))\n\n\n(2) filter() function. \n\n        list(filter(lambda x: 3<x < 5, range(6)))\n","aa55e0a8":"### Task 47 - Replacing Items\n\n* This method will replace items inside arrays\n* Array\uc5d0\uc11c \ud2b9\uc815 \uc544\uc774\ud15c\uc744 \ubcc0\uacbd\ud569\ub2c8\ub2e4.\n\n* Sytnax\n\n\tvariable[position] = item\n\t","6818b389":"### #TASK 30  -   Creating and Accessing Methods \n\n* \uc774\uc81c\ub294 \ud074\ub798\uc2a4 \ub0b4\uc5d0 \uba54\uc18c\ub4dc\ub97c \ub9cc\ub4e4\uace0 \uc774\ub97c \uc0ac\uc6a9\ud558\ub294 \ubc95\uc744 \ubc30\uc6cc \ubd05\ub2c8\ub2e4. \uba54\uc18c\ub4dc\ub294 \ud074\ub798\uc2a4 \ub0b4\uc5d0 \ub0b4\uc7a5\ub41c \ud568\uc218 \uac19\uc740 \uac83\uc785\ub2c8\ub2e4. \uc6b0\ub9ac\uac00 \ud074\ub798\uc2a4\ub97c \ub9cc\ub4e4 \ub54c \uba54\uc18c\ub4dc\ub3c4 \uac19\uc774 \ub9cc\ub4e4\uace0 \uc774\ub97c \uc0ac\uc6a9\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \n* Now let's learn how to create methods within classes and use them. A method is like a function built into a class. When we create a class, we will also create a method and should be able to use it.\n","3e5b5db4":"* Seaborn\uc740 matplotlib\ub97c \uae30\ubc18\uc73c\ub85c \ud558\ub294 Python visualization Library\uc774\uba70, matplotlib\ubcf4\ub2e4 \uac04\ub2e8\ud558\uba74\uc11c \uc0c1\ub2f9\ud788 \uba4b\uc9c4 \ud1b5\uacc4 \ub370\uc774\ud130 \ube44\uc96c\uc5bc\ub77c\uc774\uc81c\uc774\uc158 \ub3c4\uad6c\uc785\ub2c8\ub2e4.\n* Seaborn is a Python visualization library based on matplotlib, which is a simpler and more sophisticated statistical data visualization tool than matplotlib.","589831f6":"### TASK 39 \u2013 Creating 3D Array\n\n* Let's practice 3X3 arrays\n* 3D array\ub97c \uc5f0\uc2b5\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n* Syntax\n\n        import numpy as np\n        var = np.array([[item111, item112.....], [item121, item122....]], [item211, item112.....], [item221, item122....]]])\n\n* It has a tripple square blocks [[[    ]]]","c4695027":"### TASK 32 - Overriding\n\n* Method overriding is redefining methods of a parent class in a child class. For example, there are times when a particular method has a specific function in the characteristics of a parent class, but in a child class everything else is the same, but this one needs to be different. This is when overriding is needed.\n* Method overriding \uc740 \ubd80\ubaa8 \ud074\ub798\uc2a4\uc758 \uba54\uc18c\ub4dc\ub97c \uc790\uc2dd \ud074\ub798\uc2a4\uc5d0\uc11c \ub2e4\uc2dc \uc815\uc758 \ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 \ubd80\ubaa8 \ud074\ub798\uc2a4\uc758 \ud2b9\uc9d5\uc5d0\uc11c \ud2b9\uc815 \uba54\uc18c\ub4dc\uac00 \ud2b9\uc815\ud55c \uae30\ub2a5\uc744 \ud558\ub294\ub370 \uc790\uc2dd \ud074\ub798\uc2a4\uc5d0\uc11c\ub294 \ub2e4\ub978 \uac83\uc740 \ub2e4 \uac19\uc73c\ub098 \uc774 \uac83\ub9cc\uc740 \ub2ec\ub77c\uc57c \ud560 \ub54c\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7f0 \ub54c overriding \uc774 \ud544\uc694\ud569\ub2c8\ub2e4.\n\n\n\n#### Step 1\n* In the example below, create a class called Car and use gasoline for fuel.\n* In sub class Ecar, it is an electric car, so let's override fuel with electricity.\n* First, Let's start with the mother class only.\n* \uc544\ub798\uc5d0\uc11c\ub294 Car \ub780 \ud074\ub798\uc2a4\ub97c \ub9cc\ub4e4\uace0 gasoline \uc744 \ub123\ub294\ub2e4\ub294 \uac83\uc73c\ub85c mother class \uc5d0 \uc815\ud574\uc8fc\uace0\n* sub class Ecar \uc5d0\uc11c\ub294 \uc804\uae30\ucc28 \uc774\ubbc0\ub85c electricity \ub97c \ub123\ub294\ub2e4\ub294 \uac83\uc73c\ub85c \uc624\ubc84\ub77c\uc774\ub529 \ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* \uc6b0\uc120 mother class \ub9cc \uc788\ub294 \uacbd\uc6b0\ub97c \ubd05\ub2c8\ub2e4.\n\n","5f509eb8":"### Task 86  - \ubcf5\ud569\ud615 2\ucc28\uc6d0 \uadf8\ub798\ud504\n*\uc6b0\ub9ac\ub294 barplot\uc774\ub098 boxplot\uc774 \ubcf5\ud569\ud615 \ub2e4\ucc28\uc6d0\uc5d0 \uc4f0\uc77c \uc218 \uc788\ub2e4\ub294 \uac83\uc744 \uc54c\uc558\ub2e4. \uc5ec\uae30\uc11c\ub294 catplot, violinplot, heatmap\uc5d0 \ub300\ud574\uc11c \ubcf4\uae30\ub85c \ud55c\ub2e4.\n\n","4eb06a0f":"#### Number of Rows (length) \ud589 \uc218 (\uae38\uc774 \ubcf4\uae30)\n\n* len(pddf)","367a90aa":"* \uc6b0\uc120 import\ud558\uba74\uc11c \uc2dc\uc791\ud569\ub2c8\ub2e4.\n* Import things first","8e745ffb":"### Task 58 - Lineplots \/ Line Plot \ub9cc\ub4e4\uae30\n\n* \ubc30\ucd94 \ubb34\uc6b0 \uc591\uc744 \ub123\uc5b4\uc11c \ucd9c\ub825\ud574 \ubd05\ub2c8\ub2e4.\n* Let's enter those data and diplay them\n\n####Plot output \/ \ud50c\ub86f \ucd9c\ub825","dd9f0ead":"* \ub9c8\ucc2c\uac00\uc9c0\ub85c \uc694\uae08\uc744 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* Let's take a look at Fare","d4629606":"* \ud2b9\uc815 \uac12\uc744 \uac00\uc9c4 \uac83\ub9cc \ud544\ud130\ub9c1\ub3c4 \uac00\ub2a5\ud569\ub2c8\ub2e4.\n* You can also filter only those with specific values.","0ce6ff74":"###  TASK 12    -    If Statement & Else Statement\n\n* if statement is to specify that if the condition is True, do something according to the following indented code.\n* else statement will do something different when the if condition is False.\n* if \ubb38\uc740 \uc870\uac74\uc774 \uc633\ub2e4\uba74 \ub2e4\uc74c\uc5d0 \uc624\ub294 \ub4e4\uc5ec \uc4f0\uae30 \ud55c \ucf54\ub4dc\uc5d0 \ub530\ub77c \ubb34\uc5b8\uac00\ub97c \ud558\ub77c\uace0 \uc9c0\uc815\ud558\ub294 \uac83\uc785\ub2c8\ub2e4.\n* else\ubb38 if \uc870\uac74\uc774 \uc77c\uce58\ud558\uc9c0 \uc54a\uc744 \ub54c \ub2e4\ub978 \uc791\uc5c5\uc744 \uc218\ud589\ud558\ub77c\uace0 \ud558\ub294 \ubb38\ubc95\uc785\ub2c8\ub2e4.\n\n\n##Sytnax\n\n\n        if condition:\n            body\n        else:\n            body\n","ca9ef630":"#### \"Name\" \ubd84\uc11d","640be85b":"### TASK 1\u2013 Print Statement\n\n* Sytnax (\ubb38\ubc95)\n\n        #  '#' \ub85c \uc2dc\uc791\ud558\ub294 \ub77c\uc778\uc740 \ucf54\ub529\uc5d0 \uc601\ud5a5\uc744 \ubbf8\uce58\uc9c0 \uc54a\uc73c\ubbc0\ub85c \uc8fc\uc11d\uc774\ub098 \uc124\uba85 \ub4f1\uc744 \ub123\uc744 \ub54c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \n        #  '#' means statements following your # won't be included as codes, so that it does not make any errors.\n        #  for strings you need either ' '  or \" \" but don't mix \" and ' together.  \uc791\uc740 \ub530\uc634\ud45c (' ')\ub098 \ud070 \ub530\uc634\ud45c (\" \") \ub458 \ubaa8\ub450 \uad1c\ucc2e\uc73c\ub098 \ub458\uc744 \uc11e\uc5ec\uc11c  (' \") \ub610\ub294 (\" ') \ud615\ud0dc\ub85c \uc0ac\uc6a9\ub418\uc9c0 \uc54a\ub3c4\ub85d \uc8fc\uc758\ud569\ub2c8\ub2e4. \n        \n         print  (\"string\")  # \uc2a4\ud2b8\ub9c1\uc774\ub780 \ubb38\uc790\ub97c \ub9d0\ud569\ub2c8\ub2e4 \/ string means alphabets and other characters.\n         print (number) \n\n \n* sample\n\n        print (\"Hello Python!\") \n        print (3)\n\n","bb80ac5a":"### Task 62 - Line Styles \/ \ub77c\uc778 \uc2a4\ud0c0\uc77c \ubc14\uafb8\uae30\n\n#### \uc774\uc81c \uadf8\ub798\ud504\uc758 \ub77c\uc778\uc758 \uc2a4\ud0c0\uc77c\uc744 \uc124\uc815\ud574 \uc90d\ub2c8\ub2e4 \/ Let's change the styles of lines\n\n* linestyles = ['-', '--', '-.', ':']\n\n\t\tplt.plot(year,cabbage, 'r', year, radish, 'g', linewidth = 5.0, linestyle = '--')\n\n* \ucd94\uac00\uc801\uc778 \uc2a4\ud0c0\uc77c \uc815\ubcf4\ub294 \uc5ec\uae30\uc11c \ud655\uc778\ud558\uc138\uc694  Please check other style information below\n[Line Style](https:\/\/matplotlib.org\/gallery\/lines_bars_and_markers\/line_styles_reference.html)\n\n\n\n\n        plt.xlabel('Year')\n        plt.ylabel('Quantity')\n        plt.xlim(2014,2020)\n        plt.ylim(0,5000)\n        cabbage = [4000, 4200, 3800, 3700, 4100]\n        radish = [2300, 2400, 2200, 2300, 2400]\n        year = [2015, 2016, 2017, 2018, 2019]\n        plt.plot(year,cabbage, 'r', year, radish, 'g', linewidth = 5.0, linestyle = '--')\n        plt.show\n","8fcc3190":"### Task 88 - Import Modules and Data \uc911\uc694 \ubaa8\ub4c8 \uc784\ud3ec\ud2b8 \ubc0f \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30\n\n* need to import first\n* \ud544\uc694\ud55c \uac83\ub4e4\uc744 \uc784\ud3ec\ud2b8 \uc880 \ud574\uc57c\uaca0\uc8e0.\n\n","f6878dda":"### Task 96 - Feature Engineering\n\n#### Age, Name & Sex\n\n* \uc774\ub984\ubd80\ud130 \uc2dc\uc791\ud558\uaca0\uc2b5\ub2c8\ub2e4.\n* Let's start with the name.","1de997d4":"* \ucc38\uace0 - \uacfc\uac70\uc5d0 ix \uba54\uc18c\ub4dc\uac00 loc\uacfc iloc \uae30\ub2a5 \ubaa8\ub450\ub97c \ucee4\ubc84\ud558\ub294 \uae30\ub2a5\uc744 \ud588\uc73c\ub098 \uc0c8\ub85c\uc6b4 \ubc84\uc804\uc5d0\uc11c\ub294 \uc548 \uc4f0\uc774\uace0 \uc788\uc2b5\ub2c8\ub2e4.\n* Note- In the past, the ix method covered both loc and iloc functionality but is not used in the new version.","64cab211":"#### qcut\n* The pandas documentation describes qcut as a \u201cQuantile-based discretization function.\u201d This basically means that qcut tries to divide up the underlying data into equal sized bins. The function defines the bins using percentiles based on the distribution of the data, not the actual numeric edges of the bins\n* qcut\uc744\u201cQuantile-based discretization function\u201d\uc73c\ub85c \uc124\uba85\ud569\ub2c8\ub2e4. \uc774\uac83\uc740 \uae30\ubcf8\uc801\uc73c\ub85c qcut\uc774 \uae30\ubcf8 \ub370\uc774\ud130\ub97c \ub3d9\uc77c\ud55c \ud06c\uae30\uc758 bin\uc73c\ub85c \ub098\ub204\ub824\uace0 \ud568\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uc774 \ud568\uc218\ub294 \ube48\uc758 \uc2e4\uc81c \uc22b\uc790 \uac00\uc7a5\uc790\ub9ac\uac00 \uc544\ub2c8\ub77c \ub370\uc774\ud130 \ubd84\ud3ec\uc5d0 \ub530\ub77c \ubc31\ubd84\uc704 \uc218\ub97c \uc0ac\uc6a9\ud558\uc5ec \ube48\uc744 \uc815\uc758\ud569\ub2c8\ub2e4.\npaendeo munseoneun qcut-eul\u201cQuantile-based discretization function\u201deulo ","a4fa2697":"*  \uc774 \uac83\ub3c4 \ud568\uc218\ub85c \ub9cc\ub4e4\uc5b4 \ub193\uc8e0","e431ba48":"### TASK 36  -   Dictionary Comprehension\n\n* Dictionary Comprehension, or DC lets you create a new dictionary based on the input sequence.\n* Dictionary Comprehension, \ub610\ub294 DC \ub294 \uc778\ud48b \uc2dc\ud000\uc2a4\uc5d0 \ub530\ub77c \uc0c8\ub85c\uc6b4 dictionary \ub97c \ub9cc\ub4e4\uac8c \ud569\ub2c8\ub2e4. \n\n\n* Syntax\n\n         newdict  = [key: value for key, value in input sequence]\n\n\n        new_dict = {key: value for key, value in zip(dict1, dict2)}","5a79ba20":"## TASK 38 \u2013 Creating 2D Array\n\n* Let's make a 2D array\n* it has double square blocks\n* [ [] ] \ub450 \uacb9\uc784\uc744 \uae30\uc5b5\ud558\uc138\uc694\n","742945f3":"* Box Plot\uc744 \uc6b0\uc120 \ubc30\uc6b0\uba70 \uac00\uc7a5 \uac04\ub2e8\ud55c \uc5f0\uc2b5\uc744 \ud55c \ud6c4 \ub2e4\uc591\ud55c \uc608\ub97c \uc811\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.\n* Boxplot\uc740 x\ucd95 y\ucd95\uc774 \uc2e4\uc218\uc774\ub4e0 \ubc94\uc8fc\uc774\ub4e0 \uc0c1\uad00\uc5c6\uc774 \ub2e4\ucc28\uc6d0\uc801\uc778 \ub370\uc774\ud130\ub97c \ubcf4\uc5ec \uc90d\ub2c8\ub2e4. (\ub2e4\ucc28\uc6d0 \ubcf5\ud569\ub370\uc774\ud130\uc6a9)\n* Box Plot\uc740 \ubcc0\uc218 \uac04 \ub610\ub294 \ubc94\uc8fc\ud615 \ubcc0\uc218 \uac04\uc758 \ube44\uad50\ub97c \uc6a9\uc774\ud558\uac8c\ud558\ub294 \ubc29\uc2dd\uc73c\ub85c \uc815\ub7c9\uc801 \ub370\uc774\ud130 \ubd84\ud3ec\ub97c \ubcf4\uc5ec\uc90d\ub2c8\ub2e4.\n* data\uc758 size\ub97c x\ucd95\uc73c\ub85c \ud574\uc11c Boxplot\uc744 \ubd05\ub2c8\ub2e4.\n\n* We will first learn the Box Plot, practice the simplest, and see various examples.\n* Boxplot shows multidimensional data whether the x-axis or y-axis is real or categorical. (For multidimensional composite data)\n* Box Plot shows quantitative data distribution in a way that facilitates comparisons between variables or categorical variables.\n* View the Boxplot with the size of the data as the x-axis.","772bf56d":"* \uc810\uc758 \ud06c\uae30\ub97c \ubcc0\uacbd\ud558\uc5ec \uc591\uc744 \ubcf4\uc5ec \uc90d\ub2c8\ub2e4.\n* Change the size of the dots to show the amount.","aa163519":"* \uc544\ub798\uc640 \uac19\uc774 \uc11c\ube0c\ud50c\ub86f\uc5d0 \ud0c0\uc774\ud2c0, x,y\ub77c\ubca8, x,y \uc218\uce58\ub97c \ub123\uace0 \ubcf8 \uc218\uce58\ub97c \ub123\ub294\ub2e4.\n* Enter the title, x, y labels, x, y values into the subplot as shown below.","d2fb90c8":"### Task 74 - Manupulation \/ \ubcc0\uacbd","a41b732c":"# Part 6 - Kaggle Titanic (Let's learn some machine learning stuff!)","1b7e78d0":"* 'score'\ub780 'accuracy'\ub97c \ub9d0\ud569\ub2c8\ub2e4. \uc989 \uc704\ub294 \uc6b0\ub9ac \ubaa8\ub378\uc744 \uac00\uc9c0\uace0 \uc54c\ub824\uc9c4 \ud2b8\ub808\uc778\uc758 \uc815\ud655\uc131\uc744 \ubcf8 \uac83\uc785\ub2c8\ub2e4.","ff08f0a8":"### Task 57 - Making Axis and Entering Labels \ucd95 \ub9cc\ub4e4\uace0 \ub77c\ubca8 \ub123\uae30\n\n* x, y \uc591 \ucd95\uc744 \ub9cc\ub4e4\uc5b4 \ubcf4\uc8e0\n* Let's amke  x and y axis","68a8a390":"* \uc704\uc640 \uac19\uc774 \ud30c\uc77c\uc744 \ub300\ub7b5 \ud655\uc778\ud574 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n* \uc544\ub798\uc5d0\uc11c\ub294 \uc911\uac04\uac12, \ud45c\uc900\ud3b8\ucc28 \ucd5c\uc18c\uac12 \ub4f1\uc744 \ud55c\ubc88 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* You can check the file as shown above.\n* Below we will look at the means and others like minimum standard deviation.","bf7134c1":"* You can index,replace, add. or delete items.","97ec5247":"### Task 77 -  Let's begin \/ \uc2dc\uc791\ud558\uae30","8e63683c":"* \uc774\ubc88\uc5d0\ub294 y\ucd95\uc5d0 Fare\uc744 \ub123\uace0 x\ucd95\uc5d0 Pclass\ub97c \ub123\uc5b4\ubcf4\uc8e0\n* Let's put Fare on the y axis and Pclass on the x axis.","a1c492a8":"        clear()     # This clears all the items \/ dictionary\uc758 \ubaa8\ub4e0 \uc694\uc18c\ub4e4\uc744 \uc5c6\uc564\ub2e4.\n        copy()      # This one copies and makes a duplicate \/ dictionary\uc758 \ubcf5\uc81c\ub41c \uac12\uc744 \ubc18\ud658\ud55c\ub2e4\n        get()       # This one will get a certain value from a certain key \/ \ud2b9\uc815 key\uc758 value\uac12\uc744 \ubc18\ud658\ud55c\ub2e4\n","701f963f":"### Task 15 List Methods","0ef775d7":"* Append","354b3b46":"### TASK 43 - Checkig Size\n\n* Size tells you how much memory NumPy takes up.\n* Size \ub294 \uc5bc\ub9c8\ub098 \ub9ce\uc740 \uba54\ubaa8\ub9ac\ub97c NumPy\uac00 \ucc28\uc9c0 \ud558\ub294\uc9c0\ub97c \uc54c\ub824 \uc90d\ub2c8\ub2e4.\n\n* Sytnax\n\n        variable.size\n","0f319d1b":"* \ubaa8\ub450 \ub2f7\uc73c\ub85c \ud558\uba74 \uc798 \uc548 \ubcf4\uc774\ub2c8 \uc138\ubaa8, \ub124\ubaa8 \ub4f1 \uc5ec\ub7ec \uc2a4\ud0c0\uc77c\uc744 \ub123\uc5b4 \uac15\uc870\ud560 \uc218\ub3c4 \uc788\ub2e4.","11c048f4":"* \uc774\ub984\uc740 \uc5b8\ub73b \ubcf4\uc544\uc11c \uac10\uc774 \uc548 \uc635\ub2c8\ub2e4. \uc911\uac04\uc5d0 \uc788\ub294 Mr. \uac19\uc740 \ud638\uce6d\uc744 \ubcfc\uae4c\uc694. \n* ['Initial']\uc774\ub780 \uc5f4\uc744 \uc0c8\ub85c \ub9cc\ub4e4\uc5b4\uc11c \uc5ec\uae30\uc5d0 Name\uc5d0\uc11c \ucd94\ucd9c\ud55c Regular Expression\uc744 \ub123\uc2b5\ub2c8\ub2e4.\n* \uc544\ub798\uc5d0\uc11c str.extract('([A-Za-z]+)\\.')\ubd80\ubd84\uc740 str\uc5d0\uc11c \ub300\ubb38\uc790 A~Z, \uc18c\ubb38\uc790 a~z \uc911\uc5d0 \\. \uba85\ub839\uc744 \ud1b5\ud574 .\uc73c\ub85c \ub05d\ub098\ub294 \ubd80\ubd84\uc744 \ucd94\ucd9c\ud574 \ub0b4\ub294 \uac83\uc785\ub2c8\ub2e4.  \n* ('^([A-Za-z]+)')\uc73c\ub85c \ud558\uba74 \ucc98\uc74c\uc5d0 \ub098\uc624\ub294 \ubb38\uc790 \ub369\uc5b4\ub9ac\uac00 \ub420 \uac83\uc774\uace0 +\ub97c \ube7c\uba74 \uccab \uc2a4\ud3a0\ub9c1 \ud55c\uce90\ub9ad\ud130\ub9cc \ucd94\ucd9c\ud569\ub2c8\ub2e4. \n\n* The name doesn't seem to have any meaning at first glance. \n* Create a new column called ['Initial'] and put the regular expressions extracted from Name.\n* The str.extract ('([A-Za-z] +) \\.') Part of the lower part of the str is the \\. Is to extract the part that ends with.\n* ('^ ([A-Za-z] +)') will be the first chunk of characters, and minus + will extract only the first spelled character.","6e0a09f1":"* \uc774\uc5b4\uc11c \uc774\ub97c \ub370\uc774\ud130\ud504\ub808\uc784\uc5d0 \uc784\ud3ec\ud2b8\ud558\uc5ec \ub370\uc774\ud130\uc14b\uc774 \ud310\ub2e4\uc2a4 \ub370\uc774\ud130\ud504\ub808\uc784\uc5d0 \uc784\ud3ec\ud2b8 \ub418\ub3c4\ub85d \ud569\ub2c8\ub2e4.\n\n* Import the data into the dataframe so the dataset is converted as a pandas dataframe.","237a331b":"* Gaussian Naive Bayes -  \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd\uc774 \uc548 \ub418\ub294 \ubaa8\ub378\uc774\ub2c8 \uae30\uc874 \uc810\uc218\ub370\ub85c","5402fd7b":"### Task 44 - Indexing - 1D Array\n\n* Indexing items\n* It is no different from the list.\n* As you know, the positions are in order of 0,1,2,3,4, .....\n* \uc544\uc774\ud15c\uc744 \uc778\ub371\uc2f1 \ud569\ub2c8\ub2e4.\n* \ub9ac\uc2a4\ud2b8\uc640 \ubcc4 \ub2e4\ub984\uc774 \uc5c6\uc2b5\ub2c8\ub2e4.\n* \uc544\uc2dc\ub2e4\uc2dc\ud53c \uc704\uce58\ub294 0,1,2,3,4,.....\uc21c\uc11c\ub85c \uac11\ub2c8\ub2e4 \n\n* Syntax\n\n\tvariable[position]\n\t\n","02c75982":"* 15\ud589\ub9cc \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* only the 15th line","167ddf17":"### Task 65 - Others","701da624":"### Task 76 - Other Useful Methods","532315ca":"#### As you see, they are between 0 and 1, we have to expand the. \ucd95\uc774 0\ubd80\ud130 1\uae4c\uc9c0\ub124\uc694. \ud655\uc7a5\ud574 \ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.\n* x: 2014- 2020    x\ucd95\uc740 2014\ubd80\ud130 2020\uae4c\uc9c0 \n* y: 0 - 5,0000    y\ucd95\uc740 0\ubd80\ud130 5\ucc9c\uae4c\uc9c0\ub85c \ub9cc\ub4e4\uc5b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","06dc048c":"#### Step 3\n\n* Now try overriding. (A truck needs $2 worth of gas per every 10 miles)\n* \uc774\uc81c \uc624\ubc84\ub77c\uc774\ub529\ud558\ub294 \uac83\uc744 \ud574\ubd05\ub2c8\ub2e4. (\ud2b8\ub7ed\uc740 10\ub9c8\uc77c\ub2f9 2\ub2ec\ub7ec \ub4e0\ub2e4) ","450e5344":"* 1\ub4f1\uae09 \uac1d\uc2e4\uc758 \uc0ac\ub78c\ub4e4\uc740 \uc0dd\uc874\uc790\uac00 \ub354 \ub9ce\uace0, 2\ub4f1\uae09\uc740 \uc0dd\uc874\uc790\uc5d0 \ube44\ud574 \uc0ac\ub9dd\uc790\uac00 \uc870\uae08 \ub354 \ub9ce\uc73c\ub098, 3\ub4f1\uae09\uc740 \uc0ac\ub9dd\uc790\uac00 3\ubc30 \uc774\uc0c1 \ub9ce\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n* The 1st class cabin has more survivors, the 2nd class has a few more deaths than the survivors, but the 3rd class has three times more deaths.","cea69ca5":"* \uc0dd\uc874 \uc22b\uc790\ub85c \ubd05\ub2c8\ub2e4.\n* by number","a1267348":"### TASK 10    -    Updating Variables\n\n* Variables can be changed by updating.\n* The last assignment is the final value.\n* \ubcc0\uc218\ub294 \uc5c5\ub370\uc774\ud2b8\ud558\uc5ec \ubcc0\uacbd\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \n* \ub9c8\uc9c0\ub9c9\uc73c\ub85c \ub300\uc785\ub418\ub294 \uac83\uc774 \ucd5c\uc885 \uac12\uc774 \ub429\ub2c8\ub2e4.\n\n\n##Sytax\n\n        x = 1\n        x = x + 1 # Updated to x = 2\n        print (x)  ","5d5e0e09":"* np.zeros_like # Create a zero matrix of the dimensions of an existing array.\n* np.ones_like # Create a matrix with 1s of the dimensions of an existing array.\n* np.arange (start point, end point, step) # For example, if tey ares 0, 5, 1, create an array by stepping up by 1 from 0 to 4\n\n* np.zeros_like\t# \uae30\uc874 array\uc758 \ucc28\uc6d0\uc744 \ubcf8 \ub72c 0 \ud589\ub82c\uc744 \ub9cc\ub4ed\ub2c8\ub2e4.\n* np.ones_like\t# \uae30\uc874 array\uc758 \ucc28\uc6d0\uc744 \ubcf8 \ub72c 1 \ud589\ub82c\uc744 \ub9cc\ub4ed\ub2c8\ub2e4.\n* np.arange(\uc2dc\uc791\uc810, \ub05d\uc810, \ub2e8\uacc4)\t# \uc608\ub97c \ub4e4\uc5b4 0, 5, 1\uc774\ub77c\uba74 0\ubd80\ud130 4\uae4c\uc9c0 1\uc529 \uc62c\ub77c\uac00\uba74\uc11c array \uc0dd\uc131","cda23b93":"* Whole frame \/ \uc804\uccb4\ub97c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.","67173c94":"* You can change orders\/  \uc21c\uc11c\ub97c \ubc14\uafb8\uc5b4\ub3c4 \ub429\ub2c8\ub2e4.","09be716e":"### TASK 17     -   Dictionary Methods\n\n\n* Syntax\n            bizcard.items()         # This one converts items in the dictionary to a form of list. \uc774 \uba54\uc368\ub4dc\ub294 dictionary \uc544\uc774\ud15c\ub4e4\uc744 list \ud615\uc2dd\uc73c\ub85c \ubcc0\ud658\ud574 \uc900\ub2e4.\n            bizcard.keys()          # This one converts keys in the dictionary to a form of list \uc774 \uba54\uc368\ub4dc\ub294 dictionary\uc758 key\ub97c  list \ud615\uc2dd\uc73c\ub85c \ubcc0\ud658\ud574 \uc900\ub2e4.\n            bizcard.values()        # This one converts values in the dictionary to a form of list.\uc774 \uba54\uc368\ub4dc\ub294 dictionary\uc758 value\ub97c  list \ud615\uc2dd\uc73c\ub85c \ubcc0\ud658\ud574 \uc900\ub2e4.\n","0c61f5cf":"* \uba38\uc2e0\ub7ec\ub2dd \ud234\uc740 \ube48\uce78\uc744 \uc544\uc8fc \uc2eb\uc5b4 \ud569\ub2c8\ub2e4.\n* \ub098\uc911\uc5d0 \uc774\ub97c \uc5b4\ub5bb\uac8c \ud560 \uac83\uc778\uc9c0 \uc880 \uc0dd\uac01\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* As you might guess, machine learning toold would not like Nans.\n* we will get back to that later on.","a7ee91bd":"* Pclass1\uc758 \uc2b9\uac1d \uc694\uae08\uc5d0\ub294 \ud070 \ubd84\ud3ec\uac00\uc788\ub294 \uac83\uc73c\ub85c \ubcf4\uc774\uba70 \ubd88\uc5f0\uc18d \uac12\uc73c\ub85c \ubcc0\ud658 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n* The passenger fare for Pclass1 seems to have a large distribution and can be converted to discrete values.","6c887cb5":"### Task 99 -  \ud56d\ubaa9 \uace0\ub974\uae30","9cee3ddb":"#### \"Ticket\"\ubd84\uc11d","b4c8ec40":"####Head or Tail\n\n* You can see the first five lines of the data frame with pddf.head().\n* pddf.tail() can see the last five lines\n* pddf.head(n = 10) gives you 10 lines. The same is true for tail.\n* Type pddf to show all. (If too long, skip the middle)\n\n* pddf.head()\ub85c \ud30c\uc77c\uc758 \uccab \ub2e4\uc12f \uc904\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n* pddf.tail()\uc740 \ub9c8\uc9c0\ub9c9 \ub2e4 \uc12f \uc904\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4\n* pddf.head(n=10) \uc73c\ub85c \ud558\uba74 10\uc904\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. tail\ub3c4 \ub9c8\ucc2c\uac00\uc9c0 \uc785\ub2c8\ub2e4.\n* pddf\ub9cc \ud0c0\uc774\ud504\ud558\uba74 \ubaa8\ub450 \ubcfc \uc218 \ubcf4\uc5ec \uc90d\ub2c8\ub2e4. (\ub108\ubb34 \uae38\uba74 \uc911\uac04 \uc0dd\ub7b5)","3a401aec":"* Contents\n1. Import Modules and Data\n2. Data Review\n3. Exploratory Data Analysis\n4. Feature Engineering\n5. Creating Machine Learning Models\n6. Prediction & Submission\n\n* \ubaa9\ucc28\n1. \uc911\uc694 \ubaa8\ub4c8 \uc784\ud3ec\ud2b8 \ubc0f \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30\n2. \ub370\uc774\ud130 Review\n3. Exploratory Data Analysis\n4. Feature Engineering\n5. \uba38\uc2e0\ub7ec\ub2dd \ubaa8\ub378 \ub9cc\ub4e4\uae30\n6. \ubaa8\ub378 \uc608\uce21 \ubc0f \uc81c\ucd9c","19df73da":"* The first 20 rows of \"Age\" Column\/ Age\uc5f4\uc758 \ucc98\uc74c 20\uc904\uc744 \ubd05\ub2c8\ub2e4.","863ebaaa":"* Extra Trees","805c3b76":"* \uc774\uc640 \uac19\uc774 \uc5ec\ub7ec \uc885\ub958\uc758 \ud50c\ub86f\uc744 matplotlib\uc744 \ud1b5\ud574\uc11c \ub9cc\ub4e4 \uc218 \uc788\uc73c\uba70, \ub354 \ub9ce\uc740 \uac83\uc774 \uc788\uc73c\ub098 \uc2e4\uc81c\ub85c \ub354 \uc88b\uc740 \ucc28\ud2b8\ub4e4\uc744 seaborn\uc744 \ud1b5\ud574\uc11c \ud560 \uc218 \uc788\uc73c\ubbc0\ub85c \uc5ec\uae30\uc11c \uae30\ubcf8\uc801\uc778 \uad50\uc721\uc73c\ub85c \ub05d\ub0b4\uace0 seaborn\uc73c\ub85c \uac00\ub294 \uac83\uc774 \ub098\uc744 \ub4ef \ud558\ub2e4.  \n* Seaborn\uc740 matplotlib\uacfc pandas \uae30\ubc18\uc73c\ub85c data visualization\uc744 \ud574\uc8fc\ub294 \ubaa8\ub4c8\uc774\ubbc0\ub85c Seaborn\uc73c\ub85c \uac70\uc758 \ubaa8\ub4e0 \uadf8\ub798\ud504\ub97c \uadf8\ub9b4 \uc218 \uc788\uc73c\ub098 \uc6b0\ub9ac\uac00 \uac00\uc7a5 \uae30\ubcf8\uc801\uc778 \uac83\uc740 matplotlib \uae30\ubc18\uc774\ubbc0\ub85c matplotlib\uc744 \ud574 \ubcf4\uc558\ub2e4.\n\n* You can make many kinds of plots through matplotlib like these, and there are many more but actually better charts can be done through seaborn, so it seems better to finish this basic training with matplotlib and move on to seaborn.\n* Seaborn is a module that performs data visualization based on matplotlib and pandas, so we can draw almost all graphs with Seaborn, but we did matplotlib because to understand seaborn better you have to know how matplotlib works.","329948a2":"### TASK 04     -   String Indexing\n\n\n##\ud559\uc2b5 \ub0b4\uc6a9\n* \uc774 \uacfc\uc5d0\uc11c\ub294 string \uc704\uce58\uc5d0 \uc811\uadfc\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6c1\ub2c8\ub2e4.\n* Indexing\uc774\ub780 \ud45c\ud604\uc744 \uc501\ub2c8\ub2e4.\n* Let us learn how to access the string position by indexing\n\n##Sytnax\n\n         stringvariable [position]\n\n \n* HYUNDAI\ub780 \ub2e8\uc5b4\uc5d0\ub294 \uc54c\ud30c\ubcb3\uc774 7\uc790\uac00 \uc788\uc2b5\ub2c8\ub2e4.\n* \uccab \ubc88\uc9f8 \uc704\uce58\ub294 1\uc774 \uc544\ub2cc '0'\uc73c\ub85c \uc0c9\uc778\ub418\ubbc0\ub85c \uc544\ub798 7 \uac1c\uc758 \ubb38\uc790\ub294 0, 1, 2, 3, 4, 5, 6 \uc758 \uc704\uce58\ub97c \uac16\uc2b5\ub2c8\ub2e4\n* The word 'YUNDAI' has seven letters.\n* The first position is indexed as '0' NOT 1, so the seven characters below have positions 0, 1, 2, 3, 4, 5, 6\n\n        H   Y   U   N   D   A   I\n        0   1   2   3   4   5   6\n\n\n* Sample\n\n        maker = \"CHEVROLET\"\n        print (maker[3])\n","081a1c72":"### Task 13 - Creating Arrays with Random Numbers\n\n\n* Create an arry with a random number.\n* \ub79c\ub364 \uc22b\uc790\ub85c \ub41c array\ub97c \uc0dd\uc131\ud574 \ubcf8\ub2e4.\n\n\n* Syntax\n\n\tnp.random.rand(shape)\t        #float\n\tnp.random.randint(shape)\t     #integer\n    \n\n* sample\n\n        # 3X3 random float\n         np.random.rand(3,3)\n        # 3X3 random integer\n         np.random.randint(min number, max number-1, size =(3,3))\n","b9e50491":"* Names of columns \/ \uc5f4 \uc774\ub984\uc744 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","f3515324":"* XGB Step 4","f7eb28e1":"#### Step 4\n\n* \ub9c8\uc9c0\ub9c9\uc73c\ub85c super \ub97c \uc0ac\uc6a9\ud558\uc5ec \uace0\uc18d\ub3c4\ub85c\uc5d0\uc11c\ub294 \ud2b8\ub7ed\ub3c4 1\ub2ec\ub7ec\ub9cc \ub4dc\ub294 \uac83\uc73c\ub85c \ubc14\uafc9\ub2c8\ub2e4. highway.milage \ub780 \ud568\uc218\ub97c \uc815\uc758 \ud558\ub294\ub370 return \uac12\uc744 (Truck \ud074\ub798\uc2a4\uc758 self\ub85c \ub418\uc5b4 \uc788\ub294) calculate.mileaage(km) \ub97c super \ud558\uc5ec \uc11c\ube0c \ud074\ub798\uc2a4\uc758 \uacf5\uc2dd \ub300\uc2e0 \ub9c8\ub354 \ud074\ub798\uc2a4\uc758 \uacf5\uc2dd\uc73c\ub85c \ubc14\uafb8\ub294 \uae30\ub2a5\uc758 \ud568\uc218\ub97c \uc0dd\uc131\ud558\ub294 \ud615\ud0dc\ub85c \ud569\ub2c8\ub2e4. \n* Finally, we use super and make our fuel cost\/ml to a $1 for a truck on the highway. We define a function called highway.milage, which creates a function that converts the return value (which is the self of the Truck class) into calculate.mileaage (ml) and replaces the formula of the subclass with the formula of the mother class.\n","dcf3f7f2":"* Co-relation \ub9e4\ud2b8\ub9ad\uc2a4\ub294 seaborn\uc5d0\uc11c \ubcc0\uc218 \uac04 \uc0c1\uad00 \uacc4\uc218\ub97c \ubcf4\uc5ec\uc8fc\ub294 \ud45c\uc785\ub2c8\ub2e4. \ud45c\uc758 \uac01 \uc140\uc740 \ub450 \ubcc0\uc218 \uac04\uc758 \uc0c1\uad00 \uad00\uacc4\ub97c \ubcf4\uc5ec\uc90d\ub2c8\ub2e4. \uc0c1\uad00 \ub9e4\ud2b8\ub9ad\uc2a4\ub294 \uace0\uae09 \ubd84\uc11d\uc5d0 \ub300\ud55c \uc785\ub825 \ubc0f \uace0\uae09 \ubd84\uc11d\uc5d0 \ub300\ud55c \uc9c4\ub2e8\uc73c\ub85c \ub370\uc774\ud130\ub97c \uc694\uc57d\ud558\ub294 \ub370 \uc0ac\uc6a9\ub429\ub2c8\ub2e4.\n\ucc38\uace0: https:\/\/seaborn.pydata.org\/examples\/many_pairwise_correlations.html\n\n* * Co-relation matrix is a table showing the correlation coefficient between variables in seaborn. Each cell in the table shows a correlation between two variables. Correlation matrices are used to summarize data as input to advanced analysis and as diagnostics for advanced analysis.\nNote: https:\/\/seaborn.pydata.org\/examples\/many_pairwise_correlations.html\n\n* \uc544\ub798 \ub9c8\uc2a4\ud06c \uc14b\uc5c5\uc740 0\ub85c \ud589\ub82c\uc744 \uc0c1\uad00 \ud589\ub82c\uacfc \uac19\uc740 \ubaa8\uc591\uc73c\ub85c \ub9cc\ub4e0 \ud6c4 \uc5ec\uae30\uc5d0 \ubd88\ub9ac\uc548 \uac12\uc744 \ub123\uace0 \uc774\ub97c \ub2e4\uc2dc True\ub9cc \ub9cc\ub4ed\ub2c8\ub2e4.\n* The mask setup below makes a matrix that looks like a correlation matrix with zeros, then puts a Boolean value into it and makes it true.\n\n* triu \ub294 \uc6b0\uce21 \uc0c1\ub2e8 \uc0bc\uac01\ud589\ub82c\uc744 \uc758\ubbf8 \n* triu means upper right triangle\n\n* annot= True\ub294 \uac01 \uc140\uc5d0 \uc22b\uc790\ub97c \ud45c\uc2dc\ud558\ub77c\ub294 \uac83\uc774\uace0, False\ub294 \ud558\uc9c0 \ub9d0\ub77c\ub294 \uac83\uc774\uad6c\uc694\n* annot = True means to display a number in each cell, False means oppposite.\nhttps:\/\/seaborn.pydata.org\/generated\/seaborn.heatmap.html\n\n* \uc774\uc5b4\uc11c \uc774\ub97c heatmap\uc73c\ub85c \ub7f0\uce6d\ud569\ub2c8\ub2e4.\n* Then launch it as a heatmap.","277728a4":"* \uc774\uc5b4\uc11c Family \uc218\ub97c \ub9cc\ub4e4\uc5b4 \ubd05\ub2c8\ub2e4.","cee7eb92":"### Task 103 - \ubaa8\ub378 \uc7ac \ud2b8\ub808\uc774\ub2dd","9553e2fd":"### Task 104 - Voting Classfier","c55660da":"* x by Pclass\n* x\ub97c \uadf8\ub8f9\ubcc4\ub85c \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n","71f97635":"* %\ub294 3\ub4f1\uce78\uc774 \ubc18\uc774 \ub118\uc73c\ub098 \uc704\uc758 \uadf8\ub798\ud504\uc5d0\uc11c \uc0dd\uc874\uc790\ub294 1\ub4f1\uc11d\uc774 \uac00\uc7a5 \ub9ce\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n* \uac01 \ud074\ub798\uc2a4 \ub2f9 \uc0dd\uc874\ub960\uc744 \ubcfc\uae4c\uc694?\n* Let's look at the survival rate for each class?","34872664":"#### 1\ub2e8\uacc4 \ubaa8\ub378\uc744 \ub9cc\ub4e4\uc5b4 \ubd05\ub2c8\ub2e4.\n\n* \uc790 \uc774\uc81c\ub294 11\uac1c\uc758 classifier\ub85c \ubaa8\ub378\uc744 \ub3cc\ub824 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. ","24cd52a2":"####pairplot","1211f0c8":"####Scipy \ud65c\uc6a9","994a3142":"* \ub3d9\uadf8\ub77c\ubbf8\uc758 \ud06c\uae30\ub97c \uc815\ud574\uc11c \ub2ec\ub9ac\ud560 \uc218\ub3c4 \uc788\ub2e4.","6f7904f2":"* learning_rate\ub294 \uac01 \ud2b8\ub9ac\uc758 \uae30\uc5ec\ub97c \uc904\uc774\ub294 \uc5ed\ud560\uc744 \ud569\ub2c8\ub2e4.\n* n_estimator\ub294 \uac01 \uacbd\uc6b0\uc758 \ud2b8\ub9ac \uc22b\uc790\uc785\ub2c8\ub2e4.","ed9a9402":"* hue\uc5d0 \ub2e4\ub978 \uc2a4\ud0c0\uc77c\ub85c \ub2e4\ub978 \ubc94\uc8fc\ub97c \ub123\uc5b4\uc11c \ubcfc \uc218\ub3c4 \uc788\ub2e4.","8ef83367":"* \uc774 \uac83\uc740 \ub0a8\uc131\/\uc5ec\uc131\uc744 1,2\ub85c \ub098\ub204\uba74 \ub420 \uac83 \uac19\uc740 \ubed4\ud574 \ubcf4\uc774\ub294 \uac83\uc774\uc9c0\ub9cc \uc880 \ub354 \uc0c8\ubd84\ud654\ud558\uba74 \uc88b\uc544 \ubcf4\uc785\ub2c8\ub2e4.\n* \uc608\ub97c \ub4e4\uc5b4 \uc544\uae30\ub4e4\uc740 \uc544\uae30\uc774\uc9c0, \ub0a8\uc790\uc778\uc9c0 \uc5ec\uc790\uc778\uc9c0 \uad6c\uba85\ubcf4\ud2b8 \ud0dc\uc6b8 \ub54c \uc548 \ubb3c\uc5b4 \ubcfc \uac83\uc774\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.\n* \uc624\ud788\ub824 (\ubd88\ud589\ud558\uac8c\ub3c4) \uadc0\uc871 \uc544\uae30\uc778\uc9c0 \uc11c\ubbfc\uc758 \uc544\uae30\uc778\uc9c0\ub294 \ud589\uacfc\ubd88\ud589\uc744 \uac00\ub97c \uc218 \uc788\uc2b5\ub2c8\ub2e4 \u3160\u3160\n* \uc0dd\uc874 Pclass\ubcc4\ub85c \uc131\ubcc4\uc744 \ubd05\ub2c8\ub2e4.\n* This seems obvious to divide males \/ females by 1,2, but it looks good if you break it down a bit.\n* For example, babies are just babies and would not be matter whether it is boy or girl.\n* (Unfortunately) whether you are a baby in a higher social class or one from a humble family, it might have mattered.\n* View gender by survival Pclass.","409bc1b9":"#### Family or Alone?\n\n\"SibSp\" + \"Parch\" \ubd84\uc11d\n\n* SibSp - \uc774 \ud56d\ubaa9\uc740 \ud0d1\uc2b9\uc790\uac00 \ud63c\uc790\uc778\uc9c0 \ub610\ub294 \uac00\uc871\uacfc \ud568\uaed8 \uc788\ub294\uc9c0\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4.\n\n*Sibling = \ud615\uc81c, \uc790\ub9e4, \uc758\ubd93 \ud615\uc81c, \uc774\ubcf5 \ub204\uc774\n\nSpouse = \ub0a8\ud3b8, \uc544\ub0b4\n\n* Parch\ub294 \ubd80\ubaa8\uc640 \ud568\uaed8 \ud0d4\ub294\uc9c0\ub97c \ubd05\ub2c8\ub2e4.\n\n* \uc774 \uadf8\ub8f9 \ub458\uc744 'Alone\"\uadf8\ub8f9\uacfc \"Family'\uadf8\ub8f9\uc73c\ub85c \ub098\ub215\ub2c8\ub2e4.\n\n#### Family or Alone?\n\n\"SibSp\" + \"Parch\" analysis\n\n* SibSp-This item indicates whether the occupant is alone or with a family.\n\n* Sibling = brother, sister, stepbrother, half sister\n\nSpouse = husband, wife\n\nParch sees if she rode with her parents.\n\n* Divide these two groups into 'Alone' and 'Family' groups.","9286260f":"#### Groupby\n\n* \uac00\uc7a5 \ub9ce\uc774 \uc4f0\uc774\ub294 \uba54\uc18c\ub4dc \uc911 \ud558\ub098\ub85c \ubb36\uc5b4\uc11c \uc791\uc5c5\uc744 \ud560 \ub54c \uc4f4\ub2e4.\n* one of the most commonly used methods when grouping data to see the results","61363464":"* \ubd88\ud589\ud788\ub3c4 \uc0ac\ub9dd\uc790\uac00 \ud6e8\uc52c \ub9ce\uc544 \ubcf4\uc785\ub2c8\ub2e4.\n* \uc804\uccb4 \uc0ac\ub9dd\uc790 \ube44\uc728\uc744 \uc880 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \n\n* Unfortunately, there are more deaths than \"survived\".\n* Let's take a look at the overall rate.","85fa14d5":"* where method","627858ba":"### TASK 28    -    Making a Class \n\n* A class is a large object that contains functions, variables, data, and so on. Let's create a class. We also study the concepts of self and _init_. The first letter of classes are capitalized to distinguish them from other modules.\n* \ud568\uc218, \ubcc0\uc218, data \ub4f1\uc744 \ud3ec\ud568\ud55c \ud070 \uc624\ube0c\uc81d\ud2b8 class\uac00 \uc788\uc2b5\ub2c8\ub2e4. \ud55c \ubc88 \ud074\ub798\uc2a4\ub97c \ub9cc\ub4e4\uc5b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uc5ec\uae30\uc11c self \ubc0f _init_\uc758 \uac1c\ub150\ub3c4 \uacf5\ubd80\ud569\ub2c8\ub2e4. \ud074\ub798\uc2a4\ub294 \ub2e4\ub978 \ubaa8\ub4c8\ub4e4\uacfc \uad6c\ubd84\ud558\uae30 \uc704\ud574 \ub300\ubb38\uc790\ub85c \ud45c\uae30\ud569\ub2c8\ub2e4. \n\n* An empty class.\n\n         class Car():\n\t\t    pass\n\n* The above class is an empty one. Let's add some elements here.\n* First we create a class \"Car\"\n* Use _init_ (initializer)\n* _init_ is an initializer, that is to say, it specifies something initially.\n* We use _init_ () to create a method, the first argument of which starts with \"self\".\n* \uc704\uc758 \ud074\ub798\uc2a4\ub294 \ube48 \ud074\ub798\uc2a4 \uc785\ub2c8\ub2e4. \uc5ec\uae30\uc5d0 \uc694\uc18c\ub4e4\uc744 \ubd99\uc5ec \ubd05\ub2c8\ub2e4.\n* \uc6b0\uc120 \ud074\ub798\uc2a4 \"Car\" \ub97c \ub9cc\ub4e4\uace0 \uc774 \uc548\uc5d0 object \ub4e4\uc774 \uc788\uc74c\uc744 \uc54c\ub9bd\ub2c8\ub2e4.\n* \uadf8\ub9ac\uace0 initializer \ub77c \ubd88\ub9ac\uc6b0\ub294 _init_\uc744 \ub123\uc2b5\ub2c8\ub2e4. \n* _init_ \uc740 initializer, \uc989 \ucd08\uae30\uc5d0 \ubb54\uac00 \uc815\ud574\uc8fc\ub294 \uc131\uc9c8\uc744 \uac00\uc9d1\ub2c8\ub2e4.\n* \uc6b0\ub9ac\ub294 \uba54\uc18c\ub4dc\ub97c \ub9cc\ub4e4 \ub54c  _init_() \uc744 \uc0ac\uc6a9\ud558\ub294\ub370, \uc774 \uac83\uc758 \uccab argument\ub294  \"self\" \ub85c \uc2dc\uc791\ud569\ub2c8\ub2e4.  \n\n\t    class Car(object): \n\t\t    def __init__(self):\n\n* We use \"self\" as the first argument. This has the effect of giving \"self\" to all other arguments that follow. This has the effect of declaring that the methods created here belong to this class.\n* \uc6b0\ub9ac\ub294 \"self\" \ub97c \ucd5c\ucd08\uc758 \uc778\uc790\ub85c \uc0ac\uc6a9\ud588\uc2b5\ub2c8\ub2e4. \uc774\ub294 \ub2e4\uc74c\uc5d0 \uc624\ub294 \ub2e4\ub978 argument \ubaa8\ub450\uc5d0\uac8c \"self\" \ub97c \ubd80\uc5ec\ud558\ub294 \ud6a8\uacfc\uac00 \uc788\uc2b5\ub2c8\ub2e4.  \uc774\ub294  \ub9c8\uce58 \uc5ec\uae30\uc11c \ub9cc\ub4e4\uc5b4\uc9c0\ub294 \ub9e4\uc18c\ub4dc\ub294 \uc774 \ud074\ub798\uc2a4\uc5d0 \uc18d\ud55c \uac83\uc774\ub77c \uc120\uc5b8\ud558\ub294 \ud6a8\uacfc\uac00 \uc788\uc2b5\ub2c8\ub2e4.\n\n\n* Car maintenance manager\n\n(1) Make a class, Manager \/ class Manager \ub97c \ub9cc\ub4ed\ub2c8\ub2e4. \n\n        class Manager():\n\n(2) def init(self, model, color, year, mileage) \n\n        def_init_(self, model, color, year, mileage):\n\n(3) \uc774\uc5b4\uc11c self \ub85c \uc815\uc758\ub41c \ubcc0\uc218\ub97c \ubcc0\uc218\ub791 \uc5f0\uacb0\ud574 \uc90d\ub2c8\ub2e4. Then connect the variables defined by self with the variables to use.\n\n        self.model = model\n        self.color = color\n        self. year =  year\n        self.mileage = mileage\n\n(4) \uc774\ub4e4\uc744 \ucd9c\ub825\ud560 \uc218 \uc788\uac8c argument \ub97c \uc90d\ub2c8\ub2e4. Give them arguments\n\n        mycar = Manager(\"Model: Camaro\", \"Color: Red\", \"Year: 2020\", \"Mileage: 12,345\")\n\n\n(5) \ucd9c\ub825\ud569\ub2c8\ub2e4. Print them\n\n        print (mycar.model)\n        print (mycar.color)\n        print (mycar.year)\n        print (mycar.mileage)\n","4dd7abe6":"#### groupby - count","70b30b04":"* Not like len(variable), upper or lower display  variable.lower() form.\n* The len() method just ask for an information of the length while lower and upper performs a function. \n* It is called \"Dot Notation\" \n* Yoor will see more of these forms later.\n* len\uacfc \ub2ec\ub9ac upper or lower\ub294 \ub2e4\ub978 \ud615\ud0dc\ub97c \ubcf4\uc785\ub2c8\ub2e4. \uc774\ub97c dot notaion\uc774\ub77c \ud558\uad6c\uc694 \ub098\uc911\uc5d0 \ub354 \uacf5\ubd80\ud569\ub2c8\ub2e4.\n* len () \uba54\uc18c\ub4dc\ub294 \uae38\uc774 \"\uc815\ubcf4\"\ub9cc\ub97c \uc694\uccad\ud558\ub294 \ubc18\uba74 lower \ubc0f upper\ub294 \uc5b4\ub5a0 \ub2c8\ub2a5\ub97c \uc218\ud589\ud55c\ub2e4\ub294 \uac1c\ub150\uc774\ub77c\ub294 \uac83\uc744 \uc77c\ub2e8 \uc0dd\uac01\ud558\uc2dc\uace0 \ub118\uc5b4 \uac00\uc9c0\uc694.","3a216d57":"* Check the files \/  \ud30c\uc77c\uc744 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","c0adfe59":"* You can repeat stacking \/ \ubc18\ubcf5\ud574\uc11c \uc313\uc544\ub3c4 \ub429\ub2c8\ub2e4.","4a5cb824":"* \uceec\ub7fc\uc758 \ub9ac\uc2a4\ud2b8\ub97c \ubd05\ub2c8\ub2e4.\n* View a list of column names.","53120d30":"* We can also use iloc to find the sum of the first second column of the entire row, like this: axis = 1 is the y axis ( and of course it is not a necessary, but we arel learning methods)\n* iloc\uc744 \uac00\uc9c0\uace0 \uc804\uccb4  \ud589\uc5d0 \ub300\ud574 \uccab\ubc88\uc9f8 \ub450\ubed4\uc9f8 \uc5f4\uc758 sum(\ud569)\uc744 \uad6c\ud55c\ub2e4\ub77c\uace0 \uc544\ub798\uc640 \uac19\uc774 \uba85\ub839\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. axis =1 \uc740 y\ucd95\uc785\ub2c8\ub2e4","01693471":"### TASK 05     -   String Methods\n\n* \uc138 \uac00\uc9c0 \uc720\ud615\uc758 \ub300\ud45c\uc801\uc778 string \uba54\uc18c\ub4dc\ub97c \ubc30\uc6cc\ubd05\ub2c8\ub2e4. \n* Let's learn three main types of string methods.\n\n        len()   lower()   upper() \n\n\n##Sytax\n\n         \tlen()  - length\n        \tlower() - lower case\n        \tupper() - upper case\n\n* Sample\n\n        maker = 'Mercedes'\n        len (maker) >> 8 \n        \n\n* \uc22b\uc790\uc758 \uae38\uc774\ub97c \uad6c\ud560 \uc218\ub294 \uc5c6\uc2b5\ub2c8\ub2e4.\n* Cannot get the length of a number\n* len(12345)--> error\n* A number may be big, NOT long\n* len(str(12345)) >>> 5\n\n\n* Sample \n\n\n        maker = \"CHEVROLET\"\n        print (len(maker))\n        print (len(\"Hong Gildong\")\n        a = 12345\n        print (len(str(a)))\n\n","e4cbbcfa":"* \ube48\uce78\uc774 \ubb34\ucc99 \ub9ce\uc2b5\ub2c8\ub2e4.\n* Lots of null values","d3560348":"#### \"Cabin\" \ubd84\uc11d","01174042":"* XGB Step 2","2390b5ab":"* \ud2f0\ucf13\uc5d0\uc11c \uc601\ubb38\uc788\ub294 \uac83\uacfc \uc22b\uc790\ub9cc \uc788\ub294 \uac83\uc744 \ub530\ubd05\ub2c8\ub2e4.(\uc22b\uc790\ub9cc \uc788\ub294 \uac83\uc740 X\ub85c \ud558\uaca0\uc2b5\ub2c8\ub2e4.)\n* See the tickets with letters or numbers only  (I'll use X for numbers only tickets).","6b63b19c":"* \uc774\uc81c \ub370\uc774\ud130 \ubd84\uc11d\uc744 \uc704\ud574 \uc0c8\ub85c\uc6b4 \ub370\uc774\ud130\ud504\ub808\uc784\uc744 \ub9cc\ub4ed\ub2c8\ub2e4.","2caec740":"### Task 54 - Reorganizing Arrays\n\n* Let's learn the reshape() method.\n* reshape() \uba54\uc18c\ub4dc\ub97c \ubc30\uc6c1\ub2c8\ub2e4.\n\n* Sample\n\n      a = np.array([[1,2,3],[4,5,6]]) # 2X3 array\n      print (a)\n\n      b = a.reshape((3,2))  # Cahnge it to 3X2 \/ 3X2\ub85c \ubcc0\uacbd\n      print (b)\n\n","7d9f7f96":"* Gradient Boosting Classifier","83dea141":"* \ud568\uc218\ub97c \ub9cc\ub4e4\uc5b4\uc11c train\ud30c\uc77c\uc744 \ubcf4\uc9c0\uc694\n* Let's see the graph Survived \/ Sex","7ed5e274":"* \ud06c\ub85c\uc2a4 \ud0ed\uc740 \ub2e4\uc2dc \uc2dd\uad6c \ub9ce\uc740 \ucabd\uc740 Pclass3\uc5d0 \uc788\uc74c\uc744 \ubcf4\uc5ec\uc90d\ub2c8\ub2e4.\n\n* \uc5ec\uae30\uc5d0\uc11c\ub3c4 \uacb0\uacfc\ub294 \ub9e4\uc6b0 \ube44\uc2b7\ud569\ub2c8\ub2e4. \ubd80\ubaa8\uc640 \ud568\uaed8 \ud0d1\uc2b9 \ud55c \uc2b9\uac1d\uc740 \uc0dd\uc874 \uac00\ub2a5\uc131\uc774 \ub354 \ub192\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \uc22b\uc790\uac00 \uc62c\ub77c \uac08\uc218\ub85d \uc904\uc5b4 \ub4ed\ub2c8\ub2e4.\n\n* \uc0dd\uc874 \uac00\ub2a5\uc131\uc740 \ubc30\uc5d0 1-3 \uba85\uc758 \ubd80\ubaa8\uac00\uc788\ub294 \ub204\uad70\uac00\uc5d0\uac8c \uc88b\uc2b5\ub2c8\ub2e4. \ud63c\uc790 \ub610\ud55c \uc0dd\uc874 \uac00\ub2a5\uc131\uc774 \ub0ae\uc740 \uac83\uc73c\ub85c \ud310\uba85\ub418\uace0 \uac00\uc871\uc774 4 \uba85\uc774\uc0c1 \uc788\uc73c\uba74 \uc0dd\uc874 \uac00\ub2a5\uc131\uc774 \uc904\uc5b4 \ub4ed\ub2c8\ub2e4. \uc774\ub294 \uc18c\uc218\uc758 \uac00\uc871\ub4e4\uc774 \uc788\ub294 \uadc0\uc871\uce35\uc774 \uc0dd\uc874\ud558\uace0, \ud63c\uc790\uac00 \ub9ce\uc740 \uc80a\uc740 \uc774\ub4e4\uc740 \uc591\ubcf4\ub97c \ud560 \uc218 \ubc16\uc5d0 \uc5c6\uace0, \uac00\uc871\uc774 \ub9ce\uc740 \uc0ac\ub78c\ub4e4(\ud2b9\ud788 \uadc0\uc871\uc774 \uc544\ub2cc 3\ub4f1\uce78 \uc0ac\ub78c\ub4e4)\uc740 \uc804\uc6d0\uc774 \ud0c0\uc9c0 \ubabb \ud558\uba74 \uc5b4\ub290 \ub204\uad6c\ub3c4 \ud0c8 \uc218\uac00 \uc5c6\ub294 \ube44\uadf9\uc801\uc778 \ub2f9\uc2dc \uc0c1\ud669\uc744 \ubcf4\uc5ec \uc90d\ub2c8\ub2e4.\n\n* Crosstab again shows that many family members are in Pclass3.\n\n* The results are very similar here. Passengers boarding with their parents are more likely to survive. But as the number goes up, it decreases.\n\n* Survivability is good for anyone with 1-3 parents on the ship. Alone also turns out to be less viable, and having four or more families reduces their chances of survival. This is a tragic time when aristocrats with a few families survive, many young people alone have to make concessions, and many families (especially non-noble people in third place) cannot ride anyone unless they are all burned. Show the situation.","e4009179":" Titanic EDA to Prediction\n\n* Titanic Challenge is a competition to predict the survival or death of a given passenger based on variables such as age, gender or passenger class.\n* The key to success in this challenge lies at \"classify well\".\n* Although my lines are not that great, but I will try to use as many descriptions as possible for beginners to undrstand better.\n* \ud0c0\uc774\ud0c0\ub2c9 \ucc4c\ub9b0\uc9c0\ub294 \ub098\uc774, \uc131\ubcc4 \ub610\ub294 \uc2b9\uac1d \ud074\ub798\uc2a4\uc640 \uac19\uc740 \ubcc0\uc218\ub97c \uae30\ubc18\uc73c\ub85c \uc8fc\uc5b4\uc9c4 \uc2b9\uac1d\uc758 \uc0dd\uc874 \ub610\ub294 \uc0ac\ub9dd\uc744 \uc608\uce21\ud558\ub294 \uacbd\uc7c1\uc785\ub2c8\ub2e4.\n* \uc774 \ucc4c\ub9b0\uc9c0\uc758 \uc911\uc694\uc131\uc740 \"\uc798 \ubd84\ub958\"\ud558\ub294\ub370 \uc788\uc2b5\ub2c8\ub2e4.\n* \ubd80\uc871\ud558\uc9c0\ub9cc \ucd08\ubcf4\uc790\ub4e4\uc744 \uc704\ud574 \uc794 \uc124\uba85\ub4e4\ub3c4 \ucd5c\ub300\ud55c \ub9ce\uc774 \ub123\uc5b4 \ubcf4\ub824\uace0 \ub178\ub825\ud569\ub2c8\ub2e4.\n\n","710bc7da":"### TASK 221 - Parameters and Arguments\n\n* Parameter(\ub9e4\uac1c\ubcc0\uc218)\ub294 \ubcc0\uc218\ub85c function\uc758 input \uc5ed\ud560\uc744 \ud558\ub294 \uac83\uc785\ub2c8\ub2e4.\n* \uadf8\ub9ac\uace0 Argument\ub294 \ud30c\ub77c\ubbf8\ud130\uc758 \uac12\uc73c\ub85c \ud568\uc218\uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \uc785\ub825\ub418\ub294 \uac12\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4.\n\n\n* Syntax\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 def functionname (parameter): # \ud30c\ub77c\ubbf8\ud130\ub97c \uc8fc\uace0 \ud568\uc218 \uc120\uc5b8 function declaration with a parameter\n                    Function Body          # \uae30\ub2a5 \uc8fc\uae30 Assign a function to your function\n                    \n            functionname(argument)        # \ud638\ucd9c\ud574\uc11c \uae30\ub2a5 \uc0ac\uc6a9\ud558\uae30 Call your function with an argument to perform","99be0685":"### Task 73 _ Iterrows\n\n* iterrows\ub97c \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n* \uc774\ub294 \uac01 \ub370\uc774\ud130 \ud504\ub808\uc784\uc758 \uc6d0\ud558\ub294 \ud589\uc758 \uc815\ubcf4\ub97c \ucc3e\uc544\uc900\ub2e4. \n\n* Let's look at iterrows.\n\n* This method finds the information in the desired row of each data frame.","08c069bb":"* \uc704\uc640 \uac19\uc774 \uac00\ub85c 2\uc5f4, \uc138\ub85c 1\ud589\uc778 \uc11c\ube0c \ud50c\ub86f\uc774 \ub9cc\ub4e4\uc5b4\uc84c\ub2e4.\n* 2 X 2 \ub85c \ub9cc\ub4e4\uc5b4 \ubcf4\uc790\n\n* A subplot is created with two columns and one row.\n* Let's make it 2 x 2","43947189":"* Penalty - L1 \uc744 \uc0ac\uc6a9\ud558\ub294 \ud68c\uadc0 \ubaa8\ub378\uc744 Lasso Regression\uc774\ub77c\uace0\ud558\uace0 L2\ub97c \uc0ac\uc6a9\ud558\ub294 \ubaa8\ub378\uc744 Ridge Regression\uc774\ub77c\uace0\ud569\ub2c8\ub2e4. \uc774 \ub458\uc758 \uc8fc\uc694 \ucc28\uc774\uc810\uc740 \ud398\ub110\ud2f0\uc785\ub2c8\ub2e4. \ub9bf\uc9c0 \ud68c\uadc0\ub294 \uc190\uc2e4 \ud568\uc218\uc5d0 \ud398\ub110\ud2f0 \ud56d\uc73c\ub85c \uacc4\uc218\uc758 \"\uc81c\uacf1 \ud06c\uae30\"\ub97c \ucd94\uac00\ud569\ub2c8\ub2e4. L2-norm\uc774 \uc624\ucc28\ub97c \uc81c\uacf1\ud558\uae30 \ub54c\ubb38\uc5d0 (\uc624\ub958> 1 \uc778 \uacbd\uc6b0 \ub85c\ud2b8\uac00 \uc99d\uac00 \ud568) \ubaa8\ub378\uc740 L1-norm\ubcf4\ub2e4 \ud6e8\uc52c \ud070 \uc624\ucc28 (e vs e ^ 2)\ub97c \ubcf4\uac8c\ub418\ubbc0\ub85c \ud6e8\uc52c \ub354 \ubbfc\uac10\ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c   \uc624\ub958\ub97c \ucd5c\uc18c\ud654\ud558\uae30 \uc704\ud574 \ubaa8\ub378\uc744 \uc870\uc815\ud574\uc90d\ub2c8\ub2e4.\n* C\ub294 estimator \uc785\ub2c8\ub2e4. logspace 1\ucc28\uc6d0 10\uac1c \ubc30\uc5f4\ub85c 0\uc5d0\uc11c 4\uae4c\uc9c0\ub97c estimator\ub85c \ub193\uc740 \uac83\uc785\ub2c8\ub2e4.","10d62d1c":"### Task 60 - Changing Colors \/ \uc0c9\uae54 \ubc14\uafb8\uae30\n\n#### plot\uc778 \uc0c1\ud0dc\uc5d0\uc11c \uc0c9\uae54\uc744 \ubc14\uafb8\uc5b4 \ubd05\ub2c8\ub2e4.\n#### Try changing the color of the plot.\n\n* 'b', 'g', 'r', 'c', 'm', 'y', 'k', 'w'\uc73c\ub85c \uceec\ub7ec\ub97c \ubc14\uafb8\uc5b4 \ubd05\ub2c8\ub2e4.\n* \uc774 \uc774\uc678\uc5d0\ub3c4 \uc22b\uc790\ub85c \uc9c0\uc815\ud560 \uc218\ub3c4 \uc788\uc73c\ub098 \uc5ec\uae30\uc11c\ub294 \uac04\ub2e8\ud788 \uc704\uc5d0 \ubaa9\ub85d\uc5d0 \uc788\ub294 \uac83\uc73c\ub85c\ub9cc \ud574\ubd05\ub2c8\ub2e4.\n* \ud50c\ub86f\uc744 \ud558\ub098\ub85c \ubb49\uce5c \ud6c4 \uceec\ub7ec\ub97c \uc90d\ub2c8\ub2e4.\n* Try changing the color to 'b', 'g', 'r', 'c', 'm', 'y', 'k' and 'w'.\n* You can also specify it as a number, but for now, let's just do it from the list above.\n* Put the plots together and give them color.\n\n\t\tplt.plot(year,cabbage, 'r', year, radish, 'g')\n\n* \ubc30\ucd94\ub294 red, \ubb34\uc6b0\ub294 green\uc73c\ub85c plot color\uac00 \ubcc0\ud569\ub2c8\ub2e4.\n* \ucd94\uac00\uc801\uc778 \uceec\ub7ec \uc815\ubcf4\ub294 \uc5ec\uae30\uc11c \ud655\uc778\ud558\uc138\uc694 \n* The cabbage is red, the radish is green, \/color changes.\n* See additional color information below\n[\uceec\ub7ec\uc815\ubcf4](https:\/\/matplotlib.org\/3.1.1\/tutorials\/colors\/colors.html)\n\n        plt.xlabel('Year')\n        plt.ylabel('Quantity')\n        plt.xlim(2014,2020)\n        plt.ylim(0,5000)\n        cabbage = [4000, 4200, 3800, 3700, 4100]\n        radish = [2300, 2400, 2200, 2300, 2400]\n        year = [2015, 2016, 2017, 2018, 2019]\n        plt.plot(year,cabbage, 'r', year, radish, 'g')\n        plt.show","fad336c7":"* x\ucd95 \uc5f0\ub3c4 \ubaa8\uc591\uc774 \ub2e4\ub974\ub2c8 \ub2e4\uc2dc \uc190\uc744 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* Tick \uc744 \ucc3e\uace0 \ud3ec\ub9f7\ud558\ub294\ub370 \ud544\uc694 \ubaa8\ub4c8\uc744 \uc784\ud3ec\ud2b8 \ud569\ub2c8\ub2e4.\n\n* The x-axis year shape is different, so let's try again.\n* Import the modules needed to find and format the tick.","325ed4e6":"* XGBoost Step 1","ae908945":"* sum \ub9d0\uace0 any\ub97c \uc4f0\uba74 \ud2b9\uc815 \ud589\uc5d0 \ube44\uc5b4 \uc788\ub294 \uac83\uc774 True(=\ube48 \uac83 \uc788\uc74c) False(= \ube48 \uac83 \uc5c6\uc74c)\ub97c \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \n* If you use any, then True = there are some empty slots and False = No empty slots.","6a934542":"* Let's run the methods of append(), count(), index(), insert(), and pop().\n* \ub9ac\uc2a4\ud2b8\uc758 \uba54\uc18c\ub4dc \uc911 append(), count(), index(), insert(), pop()\uc5d0  \ub300\ud574\uc11c \ud559\uc2b5\ud574 \ubd05\ub2c8\ub2e4.\n\n* Syntax\n\n        listname.append(item)  \n        listname.count(item)\n        listname.index(item)\n        listname.insert(position, item)\n        listname.pop(posititon)\n","c9e7e3cb":"### TASK 29      -      Instance \n\n* instance \ub294 \ud074\ub798\uc2a4\uc5d0 \uc758\ud574 \uc0dd\uc131\ub418\ub294 \uc624\ube0c\uc81d\ud2b8\ub85c \uac01 \uc778\uc2a4\ud134\uc2a4\ub294 \uace0\uc720\uc758 \uac12\uc744 \uac00\uc9d1\ub2c8\ub2e4. \n* An instance is an object created by the class, and each instance has its own value.\n* * If \"Basketball Player\" is your class, \"LeBrn James\" will be one of unique instances of your class.\n\n\n        class Car(object):\n\t\t    def __init__(self, name):\n\t\t\t    self.name = name\n\n\t    mycar = Car(\"Bumblebee\")\n    \tprint (mycar.name)\n","c37804f3":"* Replace male and female with 1 and 2.\/ male, female\uc744 1,2\ub85c \uad50\uccb4 \ud574\ubd05\ub2c8\ub2e4.","da182c76":"* \uc6b0\uc120 age\uc758 \ube48\uce78 \ubd80\ud130 \ud574\uacb0 \ud569\ub2c8\ub2e4.\n* First, resolve the issue of null values of age.","0a7f6e30":"### Task 63 -  Making Subplots \/ Subplot \ub9cc\ub4e4\uc5b4 \ubcf4\uae30","0c3c7e54":"### Task 95 -  Exploratory Data Analysis","53cae32c":"* \uc870\uac74 \ud544\ud130\ub9c1 -  \uc870\uac74\uc744 \uc8fc\uc5b4 \ud2b9\uc815 \ub0b4\uc6a9\uc744 \ucd94\ucd9c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n* Age> 40 \ub118\ub294 \uac83\uc744 \ucd94\ucd9c\ud574 \ubd05\ub2c8\ub2e4.","fc0089c9":"* \uc790, \uc774\uc81c \uba38\uc2e0 \ub7ec\ub2dd \ubaa8\ub378\uc744 \ub9cc\ub4e4\uc5b4 \ubcf4\uc9c0\uc694.\n* \uc6b0\uc120 \uc778\ucf54\ub529\ud55c \ud30c\uc77c\uc744 train\uacfc test\ub85c \uc544\uae4c \uad6c\ubd84\ud574 \ub193\uc740 \ud589\uc73c\ub85c \ucabc\uac2d\ub2c8\ub2e4\n\nNow let's create a machine learning model.\n* First, split the encoded file into the lines that were previously separated by train and test.","dbd37d94":"* \ud310\ub2e4\uc2a4\uc5d0\uc11c \ubc18\ubcf5\uc744 \ucc98\ub9ac\ud560 \ub54c \ud544\uc694\ud55c \ud568\uc218\ub4e4\uc774 \uc788\ub2e4.\n\n* \uc6b0\uc120 \uae30\ubcf8 \ub8e8\ud504 \ud615\uc2dd\uc744 \ubcf8\ub2e4. \n\nThere are some functions needed to handle iterations in Pandas.\n\nFirst look at the basic loop type.","946dcc57":"* Parch\ub97c hue\ub85c \ub123\uc5b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4\n> * Let's add Parch to the hue","61dfeed9":"#### Step 3\n\n* Finally we override the method.\n* \ub9c8\uc9c0\ub9c9\uc73c\ub85c \uc624\ubc84\ub77c\uc774\ub529 \ud574\ubd05\ub2c8\ub2e4.\n","6fd68ee5":"* \ub450 \uac1c\uc758 \ubcc0\uc218\uc5d0 \ub300\ud574 \uac01 \uae30 \ub2e4\ub978 \uc0c9\uae54\ub85c \uadf8\ub824 \ubd05\ub2c8\ub2e4. \n* Draw lines with two different colors for the two variables.","6d548cde":"* \ud30c\uc77c \uac01 \uc5f4\uc758 \uc0c1\uad00 \uad00\uacc4\ub97c \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* Let's take a look at the correlation of each column in the file.","58500e79":"### Task 94 - Data Review \n","9ab4fa55":"*  Fare\ub97c \uadf8\ub8f9\ud654 \uc2dc\ud0b5\ub2c8\ub2e4. Fgroup\uc774\ub77c\uace0 \uc774\ub984 \uc9d3\uaca0\uc2b5\ub2c8\ub2e4.\n* Group Fare with the name of Fgroup\n\n\n7.125 and below-> 5.0\n\n7.9 and below-> 7.5\n\n8.03 or less-> 8.0\n\nLess than 10.5-> 9.5\n\nLess than 23-> 16.0\n\n27.8 and below-> 25.5\n\n51 and below-> 38\n\n73.5 and below-> 62\n\nOver 73.5-> 100\n\n7.125\uc774\ud558 -> 5.0\n\n7.9 \uc774\ud558 --> 7.5\n\n8.03 \uc774\ud558  --> 8.0\n\n10.5 \ubbf8\ub9cc --> 9.5\n\n23 \ubbf8\ub9cc --> 16.0\n\n27.8 \uc774\ud558 --> 25.5\n\n51 \uc774\ud558 --> 38\n\n73.5 \uc774\ud558 --> 62\n\n73.5 \ucd08\uacfc --> 100\n","68fb3638":"#### \uad00\ucc30 :\n\n1) Pclass\uc5d0 \ub530\ub77c \uc5b4\ub9b0\uc774 \uc218\uac00 \uc99d\uac00\ud558\uace0 10 \uc138 \ubbf8\ub9cc\uc758 \uc5b4\ub9b0\uc774 (\uc989, \uc5b4\ub9b0\uc774)\uc758 \uc0dd\uc874\uc728\uc740 Pclass\uc5d0 \uc0c1\uad00\uc5c6\uc774 \uc591\ud638\ud574 \ubcf4\uc785\ub2c8\ub2e4.\n\n2) Pclass1\uc5d0\uc11c 20-50\uc138\uc758 Passeneger\uc758 \uc0dd\uc874 \uac00\ub2a5\uc131\uc740 \ub192\uace0 \uc5ec\uc131\uc5d0\uac8c\ub294 \ub354 \uc88b\uc2b5\ub2c8\ub2e4.\n\n3) \ub0a8\uc131\uc758 \uacbd\uc6b0 \uc0dd\uc874 \ud655\ub960\uc740 \ub098\uc774\uac00 \uc99d\uac00\ud568\uc5d0 \ub530\ub77c \uac10\uc18c\ud569\ub2c8\ub2e4.\n\n#### observe :\n\n1) The number of children increases with Pclass, and the survival rate for children under 10 years old (i.e. children) looks good regardless of Pclass.\n\n2) Passeneger, 20-50 years old, in Pclass1 has a higher chance of survival and is better for women.\n\n3) In men, the probability of survival decreases with age.","32a6ea95":"* \ud55c \uc904 \ub77c\uc778\ud504\ub86f\uc744 \uadf8\ub824 \ubd05\ub2c8\ub2e4. \uc5d0\ub7ec \ud3b8\ucc28\uac00 \uc74c\uc601\uc73c\ub85c \uac19\uc774 \ud45c\ud604\ub429\ub2c8\ub2e4.\n* Draw a single line plot. Error deviations are represented in shades.","4e193518":"####NumPy\ub294 \uc774 \uc815\ub3c4\ub97c \uc774\ud574\ud558\uba74 \uc77c\ubc18\uc801\uc778 \uc218\uc900\uc5d0\uc11c\ub294 \ucda9\ubd84\ud569\ub2c8\ub2e4. \uc6b0\ub9ac\uac00 \uc55e\uc73c\ub85c \uc4f8 \uac83 \ub4e4\uc740 \ub118\ud30c\uc774 \uae30\ubc18\uc73c\ub85c \uc6c0\uc9c1\uc774\uc9c0\ub9cc \uc9c0\uae08\uae4c\uc9c0 \ubc30\uc6b4 \uac83\uacfc\ub294 \ubaa8\uc591\uc774 \ub2e4\ub974\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \uc774\uc81c matplotlib\uc73c\ub85c \uc62e\uaca8 \uac11\ub2c8\ub2e4.","0726f2e7":"* Narrowing down ","06bcb275":"* Ticket\uc758 \ud615\ud0dc\ub97c \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* Let's look at the numbers of the ticket.","101756a5":"#### Removing Column \/ \uc5f4 \uc81c\uac70\n\n* \uc5f4 \ucd94\uac00\ub97c \ud574 \ubcf4\uc558\uc73c\ub2c8 \uc5f4 \uc81c\uac70\ub97c \ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* We've added a column, and now let's remove it.","0fd7d25b":"* Age\ub294 Continuous\ud55c \uac12\uc785\ub2c8\ub2e4.\n* \ube48\uce78\uc774 \ub9ce\uc544\uc11c \ube48\uce78\ucc98\ub9ac\uac00 \uacb0\uc815\uc801\uc778 \uc5ed\ud560\uc744 \ud560 \uac83 \uac19\uc2b5\ub2c8\ub2e4.\n\n* Age\uc758 \ucd5c\ub300, \ucd5c\uc18c, \uc911\uac04\uc744 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n* Age is a continuous value.\n* Because there are a lot of blanks, blank processing seems to play a decisive role.\n\n* Let's take a look at the maximum, minimum, and middle of Age.","4a027b4e":"* SVC","ff72eb70":"### Task 69 - Sorting","1e6ddb83":"* \uc704\uc5d0 \ub9cc\ub4e0 \ud568\uc218\ub97c \ud55c \ubc88 \uc368 \uba39\uc5b4 \ubcfc\uae4c\uc694?\n* Let's use a function we made above.","4da79530":"### TASK 07    -    Number Methods\n\n\n\n\n##Syntax\n\n        int(\uc22b\uc790)   # \uc815\uc218\ub85c \ud45c\ud604\ub41c\ub2e4\n        float(\uc22b\uc790) # \uc2e4\uc218\ub85c \ud45c\ud604\ub41c\ub2e4\n        str(\uc22b\uc790)   # \ubcf4\uc774\uae30\ub294 \uc22b\uc790\ub85c \ubcf4\uc774\uc9c0\ub9cc \ubb38\uc790\ub85c \uc778\uc2dd\ub41c\ub2e4.\n\n\n        int (number) # numbers without sub digits 1, 3, 100\n        float (number) # numsers with sub digits  1.0, 5.0  3.14\n        str (number) # Lokks like numbers but they are characters ...think of them as numbers on the athlets' uniform\n \n\n* sample\n \n        int_sample = 1\n        int_test = 2\n        int_minus = -3\n        float_sample = 1.0\n        float_test = 2.\n        float_minus = -3.5\n\n","32ea33c2":"* Facegrid\ub85c \ube44\uad50\ud558\uba70 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4","efde26d3":"* % dispalys remainder\/ \ub098\uba38\uc9c0\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4\n\n        15 % 2 = 1 \n        133 % 7 = 0","9632711c":"* \ud2b9\uc815 \uc870\uac74\uc744 \uac00\uc9c4 \uac83 \uc218\ub9cc \uac80\uc0c9\ud560 \uc218\ub3c4 \uc788\ub2e4\n* You can also search for only those with certain conditions","9670df30":"* \ud30c\uc77c \ubcc0\uacbd\uc744 \ub9c9\uae30 \uc704\ud574 \uc0ac\ubcf8\uc73c\ub85c \uc5f0\uc2b5\ud569\ub2c8\ub2e4.\n* Let's make a copy and do some work.","3e6addb9":"* The above shows the counts, means, and standard deviations of the columns with numeric data.\n* \uc704\ub97c \ubcf4\uc2dc\uba74 \uc22b\uc790\ub85c \ub41c \uc5f4\ub4e4\uc758 \uae38\uc774, \uc911\uac04 \uac12, \ud45c\uc900\ud3b8\ucc28 \ub4f1\uc774 \ub098\uc640 \uc788\uc2b5\ub2c8\ub2e4. ","03936099":"* Let me use the survival percentage as the number for each items","aad1d7a1":"### Task 55 - Stacking\n\n\n* let's learn the np.vstack () method\n* This is a method of vertically mounting another array on top of an existing array.\n* np.vstack() \uba54\uc18c\ub4dc\ub97c \ubc30\uc6c1\ub2c8\ub2e4.\n* \uc774\ub294 \uae30\uc874\uc758 \uc5b4\ub808\uc774 \uc704\uc5d0 \ub2e4\ub978 \uc5b4\ub808\uc774\ub97c vertically \uc62c\ub824\uc11c \ud569\ud558\ub294 \uba54\uc18c\ub4dc\uc785\ub2c8\ub2e4.\n\n* This is a method of horizontally mounting another array on top of an existing array.\n* np.hstack() \uba54\uc18c\ub4dc\ub97c \ubc30\uc6c1\ub2c8\ub2e4.\n* \uc774\ub294 \uae30\uc874\uc758 \uc5b4\ub808\uc774 \uc704\uc5d0 \ub2e4\ub978 \uc5b4\ub808\uc774\ub97c horizontally \uc62c\ub824\uc11c \ud569\ud558\ub294 \uba54\uc18c\ub4dc\uc785\ub2c8\ub2e4.\n\n* Syntax\n\n      np.vstack(Order)\n      np.hstack(Order)\n\n* Sample\n      a = np.array([1,2,3])\n      b = np.array([4,5,6])\n      c = np.array([7,8,9])\n\n      np.vstack([a,b,c])\n      np.hstack([a,b,c])\n","758d214e":"* Gaussian Process","bce84732":"### Task 78 - Counplot\n\n* countplot\uc740 \uc6b0\ub9ac\uac00 \ub9d0\ud558\ub294 \ub9c9\ub300\uadf8\ub798\ud504\ub85c \uc22b\uc790\ub97c \uc138\uc5b4\uc11c \uadf8 \uc22b\uc790\uc758 \uae38\uc774\ub9cc\ud07c \ubcf4\uc5ec\uc8fc\ub294 \uac00\uc7a5 \ub2e8\uc21c\ud55c \uadf8\ub798\ud504\uc785\ub2c8\ub2e4.\n* countplot is the simplest graph that counts a number in our bar graph and displays the length of that number.","38fde2d1":"#TASK 19 \u2013 Set\n\n\n\n* Set\uc740 dictionary\ucc98\ub7fc { }\uc73c\ub85c \ud45c\ud604\ub429\ub2c8\ub2e4. set \uc740 \uc544\uc774\ud15c\uc744 \ubcc0\uacbd\ud560 \uc218 \uc788\uc73c\ub098 \ubc18\ubcf5\ub418\ub294 \uc544\uc774\ud15c\uc774 \uc788\uc73c\uba74 \ubc84\ub9bd\ub2c8\ub2e4.\n* Set uses { } just like dictionary does.\n* While other types can have redundant items, a set cannot have any redundant items.\n\n* Syntax\n\n        mylist = [\u2018John\u2019, \u2018Tom, \u2018John\u2019, \u2018Josh\u2019, \u2018Peter\u2019]\n\n       If we make the above as a set it becomes \t\t\n\n        {\u2018John\u2019, \u2018Tom, \u2018Josh\u2019, \u2018Peter\u2019} \n\n\n        myset = set(mylist) \n        # {\u2018John\u2019, \u2018Tom,  \u2018Josh\u2019, \u2018Peter\u2019}\n\n* Just like sets in mathematics, you can get intersection, union nad difference of two sets.\n\n        c = a.intersection(b)   \t# c = a & b \uad50\uc9d1\ud569\n        d = a.union(b)              # d = a | b \ud569\uc9d1\ud569\n        e = a.difference(b) \t\t# e = a - b  \uc5ec\uc9d1\ud569\n","5a087ec9":"### Task 46 - Indexing - 3X3 Array\n\n* Index the item in a 3X3 Array.\n* Index the position from rows and columns. For example, if it is at the 3rd postion of the 2nd column and the first row, it can be indexed as [0,1,2].\n* 3X3 Array\uc5d0\uc11c \uc544\uc774\ud15c\uc744 \uc778\ub371\uc2f1 \ud569\ub2c8\ub2e4.\n* \ud589\uacfc \uc5f4\uc758 \uc704\uce58\ub97c \uc778\ub371\uc2f1\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 1\ud589\uc758 2\uc5f4 3\ubc88\uc9f8\uc774\uba74 [0,1,2]\ub85c \uc778\ub371\uc2f1\ud569\ub2c8\ub2e4.\n\n\n\n\tvariable[row, column, position]\n\t\n","739c2eea":"* And we have to switch objects to numerical values later on.\n* \ub098\uc911\uc5d0 \uc624\ube0c\uc81d\ud2b8\ub85c \ub41c \uac83\uc740 \ucef4\ud4e8\ud130\uac00 \ubd84\uc11d\ud558\uae30 \uc88b\uac8c \uc22b\uc790\ub85c \ubc14\uafb8\uc5b4 \uc8fc\uc5b4\uc57c \ud560 \uac83\uc785\ub2c8\ub2e4.","ea3441f2":"* Bagging Classifier","1e5a4b6a":"* Other color pallette \/ \ub2e4\ub978 \uceec\ub7ec \ud314\ub808\ud2b8\ub97c \uc0ac\uc6a9\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","a57d1f0b":"* * XGB Step 5","130c319e":"* Sorting\uc744 \ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* Age\ub97c \uac00\uc9c0\uace0 \uc624\ub984\ucc28\uc21c, \ub0b4\ub9bc\ucc28\uc21c\uc73c\ub85c \ud574\ubd05\ub2c8\ub2e4.\n* Let's sort samples.\n* Take Age to ascending or descending order.","499cbc32":"* \uadf8\ub8f9\ud654\ud558\uace0 \ub2e4\ub978 \uc0c9\uc0c1\uc73c\ub85c \uadf8\ub8f9\uc744 \ud45c\uc2dc\ud569\ub2c8\ub2e4.\n* Group and display groups in different colors.","607f8dd7":"## Part 1 Python\n\n","32025796":"### Task 49 - Methods for Creating Arrays\n\n* Learn the Identity Matrix.\n* Create a repeating Matrix.\n\n* Identity Matrix \ub97c \ubc30\uc6c1\ub2c8\ub2e4.\n* \ubc18\ubcf5\ud558\ub294 Matrix\ub97c \ub9cc\ub4e4\uc5b4 \ubd05\ub2c8\ub2e4.\n\n* Syntax\n\n        np.identity(3)\n        np.repeat(var, dim)\n\t\n","34f48d1a":"*vilolin\uc5d0\ub294 \ub2e4\uc591\ud55c \uc635\uc158\uc744 \uc904 \uc218 \uc788\ub2e4.","ae2ce264":"* \uac00\uc7a5 \ube44\uc2b7\ud55c \ubc88\ud638\ub97c \ucc3e\uc544 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* Let's find the similar numbers.","1b7e6371":"#### missing data \ubcf4\uae30\n* Let's look at the missing data.\n\n* This is important.\n* For example, if the age is missing, he or she might not survied and let the offcials know what their ages are?\n* Above all, wouldn't it be possible to analyze without data?\n\n\n#### \ube60\uc9c4 \ub370\uc774\ud130\ub97c \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n* \uc774\ub294 \uc911\uc694\ud569\ub2c8\ub2e4.\n* \uc608\ub97c \ub4e4\uc5b4 \ub098\uc774\uac00 \ube60\uc838 \uc788\uc73c\uba74 \uc0ac\ub9dd\uc790\uc77c \ud655\ub960\uc774 \ub192\uc744 \uc218\ub3c4 \uc788\uace0 \ub4f1 \ub4f1\n* \ubb34\uc5c7\ubcf4\ub2e4 \ub370\uc774\ud130\uac00 \uc5c6\uc73c\uba74 \ubd84\uc11d\uc744 \ud560 \uc218\uac00 \uc5c6\uaca0\uc9c0\uc694?\n","07438085":"### Task 68 - Viewing  dataframe information \/ \ub370\uc774\ud130\ud504\ub808\uc784 \uc815\ubcf4\ubcf4\uae30","3ea3548a":"### TASK 2     -     Methods\n\n\n* Syntax \n* Method\ub294 \uae30\ubcf8\uc801\uc73c\ub85c \ub0b4\uc7a5\ub41c \uae30\ub2a5(\ud568\uc218)\uc774\ub77c\uace0 \uc774\ud574\ub97c \ud558\uba74 \ub429\ub2c8\ub2e4. \n* input()\uc774\ub77c\ub294 \uc785\ub825\uc744 \uc704\ud55c method\ub97c \uc6b0\uc120 \ubc30\uc6cc\ubd05\ub2c8\ub2e4.\n\n\n        variable = input()               # A prompting signal would be displayed below \uc544\ub798 \uae5c\ube61 \uae5c\ube61 \uc785\ub825\n        variable = input(\u201cstatement\u201d)    # A prompting signal would be displayed right \uc6b0\uce21\uc5d0 \uae5c\ube61 \uae5c\ube61\n\n\n \n* Sample\n\n        print (\"Please enter your 4 digit code!\")\n        my_code = input() \n\n\n        my_code = input(\"Please enter your 4 digit code!\") \n\n","723d0237":"#### Label Encoding","094485b9":"\ud760...\uacf5\uc9dc\ud45c\ub3c4 \uc788\uc5c8\uad70\uc694","11df8f19":"### TASK 40 - Checkig Datatype\n\n* dtype tells you what kind of data it is (integer or float).\n* This is important because in general, floats should take up more memory and integers should use less memory.\n* dtype\uc740 \uc5b4\ub5a4 \uc885\ub958\uc758 \ub370\uc774\ud130\uc778\uc9c0 (integer\uc778\uc9c0 float\uc778\uc9c0 \ub4f1)\uc744 \uc54c\ub824 \uc90d\ub2c8\ub2e4.\n* \uc77c\ubc18\uc801\uc73c\ub85c float\uc774 \ub354 \ub9ce\uc740 \uba54\ubaa8\ub9ac\ub97c \uc7a1\uc544 \uba39\uace0, integer\ub3c4 \uac00\ub2a5\ud558\uba74 \uba54\ubaa8\ub9ac\ub97c \ub35c \uc4f0\ub3c4\ub85d \ud574\uc57c\uc9c0 \uacb0\uacfc\uac00 \ube60\ub974\uac8c \ub098\uc624\uae30 \ub54c\ubb38\uc5d0 \uc774\ub294 \uc911\uc694\ud569\ub2c8\ub2e4.\n\n* Syntax\n\n\tvariable.dtype\n\t","7bdd4094":"* \ud310\ub2e4\uc2a4\ub294 \uae30\ubcf8\uc801\uc73c\ub85c \ub370\uc774\ud130 \ud504\ub808\uc784\uc744 \uc870\uc791\ud558\ub294 \ud234\uc785\ub2c8\ub2e4.\n* \uc6b0\uc120 \uac00\uc7a5 \uae30\ubcf8\uc801\uc778 \ud615\uc2dd\uc744 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4\n* Pandas is basically a tool for manipulating data frames.\n* Let's look at a basic form first","10eb0d8a":"* StandardScaler\uc758 \uae30\ubcf8 \uac1c\ub150\uc740 \ubd84\ud3ec\uac00 \ud3c9\uade0\uac12 0\uc774\uace0 \ud45c\uc900 \ud3b8\ucc28\uac00 1\uc774\ub418\ub3c4\ub85d \ub370\uc774\ud130\ub97c \ubcc0\ud658\ud55c\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc2a4\ucf00\uc77c\ub7ec\ub97c \uc4f0\uc9c0 \uc54a\uc73c\uba74 \uc544\ub798\uc5d0\uc11c \uc54c\uace0\ub9ac\uc998\uc744 \uc4f8 \ub54c \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud558\uae30\ub3c4 \ud569\ub2c8\ub2e4. \n* \ucc38\uace0 MinMaxScaler: \uac01 \ud56d\ubaa9\uc744 \uc9c0\uc815\ub41c \ubc94\uc704\ub85c \uc870\uc815\ud558\uc5ec \ubcc0\ud658\ud569\ub2c8\ub2e4.\n* maxAbsScaler: \uac01 \ud56d\ubaa9\uc744 \ucd5c\ub300\uc808\ub300\uac12\uc73c\ub85c \uc870\uc815\ud558\uc5ec \ubcc0\ud658\ud569\ub2c8\ub2e4.\n* StandardScaler \ud3c9\uade0\uc744 \uc81c\uac70\ud558\uace0 \ub2e8\uc704 \ubd84\uc0b0\uc73c\ub85c \uc2a4\ucf00\uc77c\ub9c1\ud558\uc5ec \ud56d\ubaa9\uc744 \ud45c\uc900\ud654, \uc989 \ubaa8\ub4e0 \ud56d\ubaa9\ub4e4\uc774 \uac19\uc740 \uc2a4\ucf00\uc77c\uc744 \uac00\uc9c0\ub294 \uac83\uc785\ub2c8\ub2e4.\n* fit\uacfc transform \uba54\uc11c\ub4dc\ub294 fit \uba54\uc11c\ub4dc\ub85c \ub370\uc774\ud130 \ubcc0\ud658\uc744 \ud559\uc2b5\ud558\uace0, transform \uba54\uc11c\ub4dc\ub85c \uc2e4\uc81c \ub370\uc774\ud130\uc758 \uc2a4\ucf00\uc77c\uc744 \uc870\uc815\ud569\ub2c8\ub2e4. \n* \uc774\ub54c, fit \uba54\uc11c\ub4dc\ub294 \ud559\uc2b5\uc6a9 \ub370\uc774\ud130\uc5d0\ub9cc \uc801\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4. \uadf8 \ud6c4, transform \uba54\uc11c\ub4dc\ub97c \ud559\uc2b5\uc6a9 \ub370\uc774\ud130\uc640 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc5d0 \uc801\uc6a9\ud569\ub2c8\ub2e4.","6d3bde72":"## Part 2 NumPy\n\n#### Since most of our work for Kaggle will be done with pandas and numpy will be pretty much hidden, we are going to go over very basics of numpy only.\n#### \uc6b0\ub9ac\uac00 \uce90\uae00 \uc791\uc5c5\uc744 \ud560 \ub584\ub294 \ub118\ud30c\uc774\ub294 \uc0ac\uc2e4\uc0c1 \uc548 \ubcf4\uc774\uace0 \ud310\ub2e4\uc2a4\ub85c \uc791\uc5c5\uc744 \ud569\ub2c8\ub2e4. \ube44\ub85d \ub118\ud30c\uc774\uac00 \uc544\ub798\uc5d0\uc11c \ub2e4 \uc791\ub3d9\ud558\ub294 \uac83\uc774\uc9c0\ub9cc. \uadf8\ub798\uc11c \uc5ec\uae30\uc11c\ub294 \uc544\uc8fc \ubca0\uc774\uc9c1\ud55c \ub118\ud30c\uc774\ub9cc \ubcf4\uace0 \ub118\uc5b4 \uac00\uaca0\uc2b5\ub2c8\ub2e4.","6ff393e9":"* \uc704\uc758 \uac83\uc744 \uc544\ub798\uc640 \uac19\uc774 \ud568\uc218\ub85c \ub9cc\ub4e4\uaca0\uc2b5\ub2c8\ub2e4. (\ubb3c\ub860 \uc790\uc8fc \uc4f0\uc774\uc9c0\ub294 \uc54a\uaca0\uc9c0\ub9cc \uc5f0\uc2b5\uc774\ub2c8)\n* Let's make the above as a function. (it's not going to be used often, but it's a practice for making a function)","9e780bb3":"* Try running .head () to see the top five lines of the dataframe.\n* \ub370\uc774\ud130\ud504\ub808\uc784\uc758 \uc81c\uc77c \uc704 5\uc904\uc744 \ubcf4\ub294 .head() \uc2e4\ud589\ud574 \ubd05\ub2c8\ub2e4.","224c4f7b":"### Task 61 - Line Thickness \/ \ub77c\uc778 \ub450\uaed8 \ubc14\uafb8\uae30\n\n#### Let's change thickness of lines \uc774\uc81c \uadf8\ub798\ud504\uc758 \ub77c\uc778\uc758 \ub450\uaed8\ub97c \uc124\uc815\ud574 \uc90d\ub2c8\ub2e4\n\n* linewidth = 5.0 \uc774\ub7f0 \uc2dd\uc744 \uc6b0\uce21\uc5d0 \ub123\uc5b4 \ubd05\ub2c8\ub2e4.\n* linewidth = 5.0 \/ Try this on the right.\n\n\t\tplt.plot(year,cabbage, 'r', year, radish, 'g', linewidth = 5.0)\n\n\n\n\n        plt.xlabel('Year')\n        plt.ylabel('Quantity')\n        plt.xlim(2014,2020)\n        plt.ylim(0,5000)\n        cabbage = [4000, 4200, 3800, 3700, 4100]\n        radish = [2300, 2400, 2200, 2300, 2400]\n        year = [2015, 2016, 2017, 2018, 2019]\n        plt.plot(year,cabbage, 'r', year, radish, 'g', linewidth = 5.0)\n        plt.show\n","2fc15664":"### TASK 22  - Conditional Statements in Functions\n\n\n* Let's create a function that contains  a conditional statement. Let's put an if \u2013 elif-else statement inside a function.\n* \uc870\uac74\ubb38\uc774 \ub4e4\uc5b4\uac00\ub294 function\uc744 \ub9cc\ub4e4\uc5b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. if \u2013 elif - else \ubb38\uc744 \ud568\uc218 \uc548\uc5d0 \ub123\uc5b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n*Syntax\n\n        def functionname(parameters):\n\t\t    if condition:\n\t\t\t    return\n\t\t    elif condition:\n\t\t\t    return\n\t\t    else:\n\t\t\t    return\n      \t\n        functionname(arguments)\n","9cb06a9f":"#### \"Age\" \ubd84\uc11d","bf800769":"#### \"Pclass\" \ubd84\uc11d","48df6c83":"### Task 81 - Barplot\n\n* barplot\uc740 \uac01 \uc0ac\uac01\ud615\uc758 \ub192\uc774\ub97c \uac00\uc9c4 \uc22b\uc790 \ubcc0\uc218\uc5d0 \ub300\ud55c \uc911\uc2ec \uacbd\ud5a5\uc758 \ucd94\uc815\uce58\ub97c \ub098\ud0c0\ub0b4\uba70 \uc624\ucc28 \ub9c9\ub300(\uae4c\ub9cc \uc904 \uac19\uc774 \uc0dd\uae34 \uac83)\ub97c \uc0ac\uc6a9\ud558\uc5ec \ud574\ub2f9 \ucd94\uc815\uce58 \uc8fc\ubcc0\uc758 \ubd88\ud655\uc2e4\uc131\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4. \n* barplot is an estimate of the central tendency for a numeric variable with the height of each rectangle, and an error bar (like a black line) is used to represent the uncertainty around that estimate.","de3fe9e6":"#### my_speed = input(\"How fast are you going?\")\nint_speed = int(my_speed)\n\nif int_speed <= 50:\n   print (\"Go faster\")\nelif int_speed >= 80:\n   print (\"Slow down.\")\nelse:\n  print (\"Okay.\")\n","18510dde":"* qcut\uc73c\ub85c \ub098\uc774 \uadf8\ub8f9\uc744 \ub098\ub204\uc5b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* Let's split the age group with qcut.","cdacc645":"#### Missingno\n\n* Missingno is a chart that shows missing values intuitively.\n* Missingno\ub294 \uc9c1\uad00\uc801\uc73c\ub85c \ube48\uce78\ub4e4\uc744 \ubcf4\uc5ec \uc90d\ub2c8\ub2e4.","974ce28a":"* \ub2e4\uc2dc \ub3cc\uc544\uc640\uc11c Age\ub97c \uadf8\ub8f9\ud654 \uc2dc\ud0b5\ub2c8\ub2e4. Agroup\uc774\ub77c\uace0 \uc774\ub984 \uc9d3\uaca0\uc2b5\ub2c8\ub2e4.\n\n* 1\uc0b4 \ubbf8\ub9cc baby -1\n* 1\uc0b4 - 3\uc0b4 Toddler  2\n* 3\uc0b4 \ucd08\uacfc - 11\uc0b4 young kid  - 7\n* 11\uc0b4 \ucd08\uacfc - 15\ubbf8\ub9cc big kid  - 13\n* 15-17 \uc0b4 Boy\/Girl - 16\n* 17\uc774\uc0c1 20\ubbf8\ub9cc Youth - 18\n* 20- 22 Very Young - 21\n* 22- 26 Young man  -24\n* 26 - 30  - 28\n* 30 -32 Active  - 31\n* 32 -34 Manager  - 33\n* 34  - 38 Director  - 36\n* 38 - 52 Mid  - 45\n* 52-75 Old  - 63\n* 78\uc774\uc0c1 Senior  - 78\n\n* Come back and group Ages together. I'll call it Agroup.\n\n* Under 1 year old baby -1\n* 1 year old-3 years old Toddler 2\n* Over 3 years old-11 years old young kid-7\n* Over 11 years old-Under 15 big kid-13\n* 15-17 years old Boy \/ Girl-16\n* Over 17 Youth-18\n* 20- 22 Very Young-21\n* 22- 26 Young man -24\n* 26-30-28\n* 30 -32 Active-31\n* 32 -34 Manager-33\n* 34-38 Director-36\n* 38-52 Mid-45\n* 52-75 Old-63\n* Senior over 78","8d1b9e54":"* \uadf8\ub798\ub3c4 \uac00\uc7a5 \ub9ce\uc774 \uc4f0\uc774\ub294 \ubc29\ubc95\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.\n* The most common ways are below\n\nfigure\uc774\ub984 (\uc77c\ubc18\uc801\uc73c\ub85c f \uc815\ub3c4\ub9cc \uc500), axes(\uc77c\ubc18\uc801\uc73c\ub85c ax \uc815\ub3c4\ub9cc \uc500) = plt.subplots(\ud589\uc218, \uc5f4\uc218, figsize = (\uac00\ub85c\uc778\uce58, \uc138\ub85c\uc778\uce58)\n\nfigure name (typically just f), axes (typically ax only) = plt.subplots (rows, columns, figsize = (horizontal inches, vertical inches)\n\n* \uc544\ub798 \uc608\ub97c \ubcf4\uc2dc\uc9c0\uc694\n* Please see the below sample\n","8c02dc9e":"* multiple lines\n\n* When you print, you may print several lines rather than just one line. An example would be an address.\n* In this case, put three quotes at the beginning to tell the computer that multiple lines would start, and three quotes at the end to indicate that my lines are ending.\n* \ud504\ub9b0\ud2b8\ub97c \ud560 \ub54c \ud55c \uc904\uc774 \uc544\ub2c8\ub77c \uc5ec\ub7ec \uc904\uc758 \ubb38\uc7a5\uc744 \ud504\ub9b0\ud2b8\ub97c \ud558\ub294 \uacbd\uc6b0\uac00 \uc788\uc2b5\ub2c8\ub2e4.  \uc8fc\uc18c \uac19\uc740 \uacbd\uc6b0\uac00 \ub300\ud45c\uc801\uc778 \uc608\uc77c \uac83\uc785\ub2c8\ub2e4. \n* \uc774\ub54c\ub294 \ucc98\uc74c\uc5d0 \ub530\uc634\ud45c 3\uac1c\ub97c \ub123\uc5b4\uc11c \uc5ec\ub7ec \uc904\uc774 \uc2dc\uc791\ud55c\ub2e4\ub294 \uac83\uc744 \ucef4\ud4e8\ud130\uc5d0\uac8c \uc54c\ub9ac\uace0 \ub9c8\uc9c0\ub9c9\uc5d0 \ub530\uc634\ud45c 3\uac1c\ub97c \ub123\uc5b4\uc11c \ucd9c\ub825\ud560 \ub0b4\uc6a9\uc774 \ub05d\ub0ac\ub2e4\uace0 \uc54c\ub9ac\uba74 \ub429\ub2c8\ub2e4.\n* Sample\n\n        Hong Gildong\n        123 Ho, ABC Street,\n        Samsung-dong, Gangnam-gu\n        Seoul, Korea\n","075c3f71":"### Task 79 - Lineplot","c8ce7e46":"### Task 70- Locating \/ \ubd88\ub7ec\uc624\uae30 (loc & iloc)","2ad805e1":"* reset_index().rename \uba54\uc18c\ub4dc\ub294 \uceec\ub7fc\uc758 \ud5e4\ub4dc\ub97c \ubc14\uafc0 \uc218 \uc788\uac8c \ud574\uc90d\ub2c8\ub2e4.\nThe reset_index (). rename method allows you to change the head of a column.","d506f5e6":"* Logistic Regression","0d46ef5a":"* \ub9c8\ucee4\ub97c \uc0ac\uc6a9\ud574 \ubd05\ub2c8\ub2e4.\n* Let's try markers","a7372ac3":"* \ud30c\uc77c \ubd84\ub9ac \ubc0f \ubcd1\ud569 (File Separations and Merges)","7245a6c7":"### TASK 42 - Checkig Shape\n\n* Shape shows the shape of your matrix\n* Shape\uc740 \uc790\uc2e0\uc758 \ud589\ub82c\uc774 \uba87 X \uba87 \ud589\ub82c\uc778\uc9c0\ub97c \ubcf4\uc5ec \uc90d\ub2c8\ub2e4.\n\n\n* Syntax\n\n\t        variable.shape\n","5a52dc9d":"* \ud30c\uc774\uadf8\ub798\ud504\ub791 \uce74\uc6b4\ud2b8 \ud50c\ub86f\uc744 \uc11c\ube0c\ud50c\ub86f\uc73c\ub85c \uadf8\ub9bd\ub2c8\ub2e4.\n* \ud589\uc740 \ud558\ub098 \uc5f4\uc740 2\uac1c\uc758 \uc11c\ube0c \ud50c\ub86f\uc785\ub2c8\ub2e4. \uc0ac\uc774\uc988\ub294 \uac00\ub85c 15\uc778\uce58 \uc138\ub85c 6\uc778\uce58\n* 'Survived'\uc758 \uac12\uc744 \uce74\uc6b4\ud2b8\ud574\uc11c \ud30c\uc774\ud50c\ub86f\uc744 \ub9cc\ub4ed\ub2c8\ub2e4. \n* explode\ub294 \ud3ed\ubc1c\ud558\ub294 \uac83\uc774\ub2c8\uae4c 1\uc774\uba74 \ud280\uc5b4 \ub098\uac00\ub294 \uac83\uc778\ub370 0\uc744 \uc8fc\uba74 \ubd84\ub9ac\ub9cc \ub418\uace0 \ub3cc\ucd9c\uc740 \ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc774\uc5b4\uc11c 0, 1\uc778 \uac83\uc740 \uccab \ubc88\uc9f8 \uac83\uc740 \uc544\ub2c8\uace0 \ub450\ubc88 \uc9f8 \uac83\uc740 \ubd84\ub9ac\ub41c\ub2e4\ub294 \uc758\ubbf8\ub85c \uc0dd\uac01\ud558\uc2dc\uba74 \ub429\ub2c8\ub2e4.\n* autopercent\ub294 1.1\uc774 \ud45c\ud604\ud558\ub294 \ubd80\ubd84\uc740 \uc18c\uc218\uc810 \ud55c \uc790\ub9ac\uae4c\uc9c0 \ubcf4\uc5ec \uc8fc\ub77c\ub294 \uc758\ubbf8\uc785\ub2c8\ub2e4. \ub4a4\uc5d0 \uc810 \uc774\ud558\uac00 4\uba74 \ub458 \ub2e4 \uc18c\uc218\uc810 4\uc790\ub9ac\uc218 \uae4c\uc9c0 \ubcf4\uc5ec \uc90d\ub2c8\ub2e4.\n* ax[0]\uc740 \uccab\ubc88\uc9f8 \uce78\uc785\ub2c8\ub2e4.\n* set_title \uba54\uc18c\ub4dc\ub294 \uc11c\ube0c \ud50c\ub86f\uc758 \uc81c\ubaa9\uc744 \ubcf4\uc5ec \uc90d\ub2c8\ub2e4.   \n\n* Draw a pie chart and count plot in the subplot parts.\n* Two rows and  one column. Size : 15 inches wide by 6 inches high\n* Create a pieplot by counting the value of 'Survived'.\n* Explode means \"protrusion\", so if it's 1, it's popping out. 0 and 1 means that the second one is poping out.\n* Autopercent means 1.1 shows up to one decimal place. If there is 4 after the dot, both show up to four decimal places.\n* ax [0] is the first cell.\n* The set_title method displays the title of the subplot.","3134a8e4":"* \ub300\ud45c\uc801\uc778 \uc778\ucf54\ub529\uc5d0 Label Encoding\uc774 \uc788\ub294\ub370 \uc774\ub294 \uac01 \ud56d\ubaa9\uc758 \uac12\uc744 \uc11c\uc5f4\ud654 \uc2dc\ucf1c \uc8fc~\uc6b1 \uc904\uc138\uc6b4 \uac83\uc774\ub77c \uc0dd\uac01\ud558\uc2dc\uba74 \ub429\ub2c8\ub2e4.\n* \uadf8 \uc678\uc5d0 \uc790\uc8fc\uc4f0\ub294 One Hot Encoding \uac19\uc740 \uacbd\uc6b0 \uc5f4 \ub0b4\uc5d0\uc11c\uc758 \ud56d\ubaa9\uc744 \ub098\ub204\uc5b4\uc11c (\uc5f4\uc774 \uc8fc~\uc6b1 \ub298\uc5b4\ub098\uba70) \uc774\ub97c 0\uc774\ub0d0 1\uc774\ub0d0\ub85c \uad6c\ubd84\ud574 \ub193\uc740 \uac83\uc785\ub2c8\ub2e4.\n* A typical encoding is Label Encoding, which can be considered to be a very good order of the values of each item.\n* In addition, the one-of-a-kind One Hot Encoding is divided into 0 or 1 by dividing the items in the column (they increase in number).","60b4b824":"* \uc774\ub97c \ud2b8\ub808\uc778\uacfc \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ud50c\ub808\uc784\uc758 x\ucd95\uc73c\ub85c \uc815\uc758\ud569\ub2c8\ub2e4.","0f444d3d":"### Task 101 - \ud30c\uc77c \uc81c\ucd9c","5b9f6e25":"* Adaboost","832b53a5":"### Task 100 - \ubaa8\ub378 \uc7ac \ud2b8\ub808\uc774\ub2dd","e8dbdf7c":"* Read","c42c0a4e":"* Let's make another version with 3 features involved.","57760370":"* \ud074\ub798\uc2dc\ud30c\uc774\uc5b4\ub294 \ud2b9\uc815 \ub370\uc774\ud130 \ud3ec\uc778\ud2b8\uc5d0 (\ubc94\uc8fc) \ud074\ub798\uc2a4 \ub808\uc774\ube14\uc744 \ud560\ub2f9\ud558\ub294 \ub370 \uc0ac\uc6a9\ub418\ub294 \uc774\uc0b0 \uac12 \ud568\uc218\uc785\ub2c8\ub2e4.\n* Random Forest -\uacb0\uc815 \ud2b8\ub9ac(decision tree)\ub294 \ub9d0\uadf8\ub300\ub85c \uacb0\uc815\uc744 \ub0b4\ub9ac\uae30 \uc704\ud574 \uc0ac\uc6a9\ud558\ub294 \ud2b8\ub9ac\ub85c, \uacb0\uc815 \uacfc\uc815\uc744 \uac04\ub2e8\ud55c \ubb38\uc81c\ub4e4\ub85c \uc774\ub8e8\uc5b4\uc9c4 \uacc4\uce35 \uad6c\uc870\ub85c \ub098\ub208\ub2e4. \uac04\ub2e8\ud55c \ubb38\uc81c\uc5d0 \ub300\ud574\uc11c\ub294 \ub9e4\uac1c\ubcc0\uc218(\uc608: \ubaa8\ub4e0 \ub178\ub4dc\uc758 \ud14c\uc2a4\ud2b8 \ub9e4\uac1c\ubcc0\uc218, \uc885\ub2e8 \ub178\ub4dc\uc5d0\uc11c \ub9e4\uac1c\ubcc0\uc218 \ub4f1)\ub97c \uc0ac\uc6a9\uc790\uac00 \uc9c1\uc811 \uc124\uc815\ud560 \uc218 \uc788\uc9c0\ub9cc, \ubcf4\ub2e4 \ubcf5\uc7a1\ud55c \ubb38\uc81c\uc758 \uacbd\uc6b0 \ud559\uc2b5 \ub370\uc774\ud130\ub85c\ubd80\ud130 \ud2b8\ub9ac \uad6c\uc870\uc640 \ub9e4\uac1c\ubcc0\uc218\ub97c \ubaa8\ub450 \uc790\ub3d9\uc73c\ub85c \ud559\uc2b5\ud55c\ub2e4.\n\ub79c\ub364 \ud3ec\ub808\uc2a4\ud2b8\uc758 \uac00\uc7a5 \ud070 \ud2b9\uc9d5\uc740 \ub79c\ub364\uc131(randomness)\uc5d0 \uc758\ud574 \ud2b8\ub9ac\ub4e4\uc774 \uc11c\ub85c \uc870\uae08\uc529 \ub2e4\ub978 \ud2b9\uc131\uc744 \uac16\ub294\ub2e4\ub294 \uc810\uc774\ub2e4. \uc774 \ud2b9\uc131\uc740 \uac01 \ud2b8\ub9ac\ub4e4\uc758 \uc608\uce21(prediction)\ub4e4\uc774 \ube44\uc0c1\uad00\ud654(decorrelation) \ub418\uac8c\ud558\uba70, \uacb0\uacfc\uc801\uc73c\ub85c \uc77c\ubc18\ud654(generalization) \uc131\ub2a5\uc744 \ud5a5\uc0c1\uc2dc\ud0a8\ub2e4. \ub610\ud55c, \ub79c\ub364\ud654(randomization)\ub294 \ud3ec\ub808\uc2a4\ud2b8\uac00 \ub178\uc774\uc988\uac00 \ud3ec\ud568\ub41c \ub370\uc774\ud130\uc5d0 \ub300\ud574\uc11c\ub3c4 \uac15\uc778\ud558\uac8c \ub9cc\ub4e4\uc5b4 \uc900\ub2e4. \ub79c\ub364\ud654\ub294 \uac01 \ud2b8\ub9ac\ub4e4\uc758 \ud6c8\ub828 \uacfc\uc815\uc5d0\uc11c \uc9c4\ud589\ub418\uba70, \ub79c\ub364 \ud559\uc2b5 \ub370\uc774\ud130 \ucd94\ucd9c \ubc29\ubc95\uc744 \uc774\uc6a9\ud55c \uc559\uc0c1\ube14 \ud559\uc2b5\ubc95\uc778 \ubc30\uae45(bagging)\uacfc \ub79c\ub364 \ub178\ub4dc \ucd5c\uc801\ud654(randomized node optimization)\uac00 \uc790\uc8fc \uc0ac\uc6a9\ub41c\ub2e4. \uc774 \ub450 \uac00\uc9c0 \ubc29\ubc95\uc740 \uc11c\ub85c \ub3d9\uc2dc\uc5d0 \uc0ac\uc6a9\ub418\uc5b4 \ub79c\ub364\ud654 \ud2b9\uc131\uc744 \ub354\uc6b1 \uc99d\uc9c4 \uc2dc\ud0ac \uc218 \uc788\ub2e4.\n* randome_state =1\ub85c \ud558\ub294 \uac83\uc740 \uacc4\uc18d \uac19\uc740 \uacb0\uacfc\ub85c \ub098\uc624\uac8c\/ 0\uc73c\ub85c \ud558\uba74 \ub9e4\ubc88 \ub2ec\ub77c\uc9d0\n*  K-neighbors\ub294 \uc27d\uac8c \ud45c\ud604\ud558\uba74 K\uac1c\uc758 \uc774\uc6c3\uc744 \ucc3e\uc2b5\ub2c8\ub2e4.\uc774\uc6c3 \uc810\uc758 \uc778\uc811 \uc9c0\ud45c\uc640 \uac70\ub9ac\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\n* Logistic Regression - \uc885\uc18d \ubcc0\uc218\uc640 \ub3c5\ub9bd \ubcc0\uc218 \uc0ac\uc774\uc758 \uad00\uacc4\ub294 \ubbf8\ub798 \uc608\uce21 \ubaa8\ub378\uc5d0 \uc0ac\uc6a9\ub420 \uad6c\uccb4\uc801\uc778 \ud568\uc218\ub85c \ud45c\ud604\ub418\uba70 \ub3c5\ub9bd\uc801\uc778 \ubcc0\uc218\uc758 \uc120\ud615 \uc870\ud569\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc0ac\uac74\uc758 \uac00\ub2a5\uc131\uc744 \uc608\uce21\ud558\uae30 \uc704\ud574 \ud1b5\uacc4 \uae30\ubc95\uc785\ub2c8\ub2e4. \uc989 \ub3d9\uc804\uc758 \uc55e\ub4b7\uba74, \ub418\ub0d0 \uc548 \ub418\ub294\ub0d0 \uc774\ub7f0 \uc885\ub958\uc5d0 \uc8fc\ub85c \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \ud68c\uadc0\ub780 \ub9d0\uc774 \uc0dd\uacbd\ud558\uae30 \ub54c\ubb38\uc5d0 \uac04\ub2e8\ud788 \ub9d0\uc500 \ub4dc\ub9ac\uba74 \uc608\ub97c \ub4e4\uc5b4 \ud0c0\uc774\ud0c0\ub2c9\uc5d0\uc11c 1\ub4f1\uc11d \uc5ec\uc131\ubd80\ud130 \uad6c\uba85\ubcf4\ud2b8\uc5d0 \uba3c\uc800 \ud0dc\uc6e0\ub2e4\uba74 \ub8f0\uc5d0 \ub530\ub77c 1\ub4f1\uc11d \uc5ec\uc131\uc740 \ubaa8\ub450 \uc0b4\uc544\uc57c \ud558\ub294\ub370, \ud604\uc2e4 \uc138\uacc4\uc5d0\uc11c\ub294 \uaf2d \ucf00\uc774\ud2b8\uc708\uc2ac\ub81b\ucc98\ub7fc \ub514\uce74\ud504\ub9ac\uc624 \ub55c\uc5d0 \ub3c4\ub85c \ubc30\ub85c \ub3cc\uc544\uc624\uac70\ub098 \uc544\ub2c8\uba74 \uc2a4\uc2a4\ub85c \ud76c\uc0dd\uc744 \ud0dd\ud558\ub294 \ubd84\ub4e4 \uac19\uc740 \ud3c9\uade0\uac12\uc744 \ubc97\uc5b4\ub098\ub294 \uc77c\ub4e4\uc774 \uc0dd\uae30\uae30 \ub54c\ubb38\uc5d0 \ubcf8\ub798 \ubaa8\ub378\uacfc\uc758 \ucc28\uc774\uac00 \ubc1c\uc0dd\ud558\uac8c \ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7ec\ud55c \ucc28\ub4e4\uc774 \ud3c9\uade0\uc801\uc778 \uc218\uce58\ub85c \ub3cc\uc544\uc624\uac8c \ub9cc\ub4dc\ub294 \uac83\uc774 \ud68c\uadc0 \ubaa8\ub378\uc774\ub77c\uace0 \uc0dd\uac01\ud558\uc2dc\uba74 \ub429\ub2c8\ub2e4. \uc124\uba85\uc774 \ubd80\uc871\ud558\ub098 \ucd08\ubcf4\uc790\ub4e4\uc740 \uadf8 \uc815\ub3c4\ub9cc \uc774\ud574\ud558\uc2dc\uace0 \ub098\uc911\uc5d0 \uc880 \ub354 \uc774\ud574\ud558\uc2dc\ub294 \uac83\uc73c\ub85c \ud558\uace0 \ub118\uc5b4 \uac11\ub2c8\ub2e4.\n* XGB\ub294 \uc758\uc0ac\uacb0\uc815 \ud2b8\ub9ac\ub97c \ub9ce\uc774 \ub9cc\ub4e4\uc5b4 \uc774\uc758 \uc608\uce21\uac12\uc744 \ub354\ud574\uac00\uba70 \uacb0\uc815\ud558\ub294\ub370 \uc774\ub97c \uc704\ud574 \ub610 \uc794 \ud558\uc774\ud37c\ud30c\ub77c\ubbf8\ud130\ub97c \uc124\uc815\ud558\uac8c \ud558\uc5ec \uc880 \ub354 \uc131\ub2a5\uc744 \ub192\uc774\ub294 \ubd80\uc2a4\ud305 \uc54c\uace0\ub9ac\uc998\uc785\ub2c8\ub2e4.\n* \ucc38\uace0\ub85c \ubd80\uc2a4\ud305\uc740 \ubd84\ub958\ubb38\uc81c\uc5d0\uc11c \uc798 \ubabb \ubd84\ub958\ub41c \uac83\uc744 \uc7ac\ubd84\ub958\ud558\ub294 \uac83\uc744 \ubc18\ubcf5\ud558\uc5ec \uc608\uce21\ubaa8\ub378\uc744 \uac15\ud654 \uc2dc\ud0a4\ub294 \uac83\uc785\ub2c8\ub2e4. \n* \ub610\ud55c \ubc30\uae45\uc774\ub780 \uac83\uc740 \uc5ec\ub7ec\ubc88\uc758 \ubcf5\uc6d0 \uc0d8\ud50c\ub9c1\uc744 \ud1b5\ud574 \uc608\uce21 \ubaa8\ub378\uc758 \ubd84\uc0b0\uc744 \uc904\uc5ec \ubaa8\ub378\uc744 \uac15\ud654\uc2dc\ud0a4\ub294 \ubc29\ubc95\uc785\ub2c8\ub2e4.\n* \ub610\ud55c \ubcf4\ud305\uc774\ub780 \ub9d0\uc744 \ub9ce\uc774 \ub4e4\uc73c\uc2e4\ud150\ub370 \ubcf4\ud305\uc740 \ud558\ub4dc\ubcf4\ud305\uacfc \uc18c\ud504\ud2b8\ubcf4\ud305\uc774 \uc788\uc2b5\ub2c8\ub2e4. \ud558\ub4dc\ubcf4\ud305\uc740 \ub9d0 \uadf8\ub300\ub85c \ud22c\ud45c\ud55c\ub370\ub85c \uacb0\uacfc\ub97c \ub0b4\ub294 \uac83\uc774\uace0, \uc18c\ud504\ud2b8\ubcf4\ud305\uc740 \uac00\uc911\uce58\ub97c \uc870\uc808\ud558\uc5ec \uc720\uc5f0\ud558\uac8c \ud22c\ud45c\ud558\ub294 \ubc29\uc2dd\uc785\ub2c8\ub2e4.\n* GradientBoosting - \ub79c\ub364 \ud3ec\ub9ac\uc2a4\ud2b8\uac00 \ub9ce\uc740 \ud2b8\ub9ac\ub97c \ub9cc\ub4e4\uc5b4 \ub0b4\uc11c \ud574\uacb0\ud558\ub294 \ubc29\ubc95\uc744 \ud0dd\ud55c\ub2e4\uba74 GradientBoosting\uc740 \uc55e\uc5d0 \ud2b8\ub9ac\uc758 \uc624\ucc28\ub97c \uc904\uc5ec\uac00\uba70 \ubcf4\uc644\ud558\ub294 \ubc29\uc2dd\uc73c\ub85c \ud2b8\ub9ac\ub97c \ub9cc\ub4e4\uc5b4 \uac00\ub294 \ubc29\uc2dd\uc774\ub77c\uace0 \uc0dd\uac01\ud558\uc2dc\uba74 \ub429\ub2c8\ub2e4.\n* SV\u3161 - Support Vector machine\uc740 \ubd84\ub958 \ud560 \ub54c \ubb34\uc6b0 \uc790\ub974\ub4ef\uc774 \uc790\ub974\ub294 \uac83\uc774 \uc544\ub2c8\ub77c \ub9c8\uc9c4\uc758 \uacbd\uacc4\uc120\uc744 \uc8fc\uc5b4 \uc81c\ud55c \uc870\uac74\uc744 \ucd94\uac00\ud55c \uac83\uc774\ub77c \uc0dd\uac01\ud558\uc2dc\uba74 \ub429\ub2c8\ub2e4. \ub0a8\ubd81\ud55c\uc758 \uba85\ud655\ud55c \uacbd\uacc4\uc120 \ub300\uc2e0 \ube44\ubb34\uc7a5 \uc9c0\ub300 \uc0dd\uac01\ud558\uc2dc\uba74 \uc5b4\ub5a8\uc9c0....\n* ExtraTrees - \ub79c\ub364\ud3ec\ub9ac\uc2a4\ud2b8\uc5d0\uc11c \ud2b8\ub9ac\ub97c \ubb34\uc791\uc704\ub85c \ubd84\ud560\ud558\uc5ec \ub354 \ub9ce\uc740 \ud2b8\ub9ac\ub97c \ub9cc\ub4e0 \ubc29\uc2dd\uc774\ub77c \uc0dd\uac01\ud558\uc2dc\uba74 \ub429\ub2c8\ub2e4.\n* adaboost \uc54c\uace0\ub9ac\uc998\uc740 Adaptive Boost\uc758 \uc900\ub9d0\ub85c \ub370\uc774\ud130\ub97c \ub300\ucda9 \ubd84\ub958\ud574\uc11c \ub3cc\ub9b0 \ud6c4 \uc5ec\uae30\uc11c \ubd84\ub958\ud558\uc9c0 \ubabb \ud558\ub294 \uc624\ub958\ub4e4\uc5d0 \uac00\uc911\uce58\ub97c \uc8fc\uc5b4 \uc815\ud655\ub3c4\ub97c \ub192\uc774\ub294 \uac83\uc744 \uacc4\uc18d \ubc18\ubcf5\ud558\uc5ec \uc2e0\ub8b0\ub3c4\ub97c \ub192\uc778\ub2e4\uace0 \uc0dd\uac01\ud558\uc2dc\uba74 \ub429\ub2c8\ub2e4.\n* Gaussian Naive Bayes \uc54c\uace0\ub9ac\uc998\uc740 \ud2b9\uc218\ud55c \uc720\ud615\uc758 NB \uc54c\uace0\ub9ac\uc998\uc785\ub2c8\ub2e4. \uae30\ub2a5\uc5d0 \uc5f0\uc18d \uac12\uc774\uc788\uc744 \ub54c \ud2b9\ud788 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \ub610\ud55c \ubaa8\ub4e0 \uae30\ub2a5\uc774 \uac00\uc6b0\uc2a4 \ubd84\ud3ec, \uc989 \uc815\uaddc \ubd84\ud3ec\ub97c \ub530\ub974\uace0 \uc788\ub2e4\uace0 \uac00\uc815\ud569\ub2c8\ub2e4.Naive Bayes\ub294 \ud2b9\uc131\ub4e4 \uc0ac\uc774\uc758 \ub3c5\ub9bd\uc744 \uac00\uc815\ud558\ub294 \ubca0\uc774\uc988 \uc815\ub9ac\ub97c \uc801\uc6a9\ud55c \ud655\ub960 \ubd84\ub958 \ubc29\ubc95\uc774\ub2e4. \ubca0\uc774\uc988\uc815\ub9ac - \uc870\uac74\ubd80 \ud655\ub960\n* Gaussian process\ub294 \ud568\uc218\uc758 \ud655\ub960\uc801 \ubd84\ud3ec\ub97c modeling\ud558\ub294\ub370 \uc4f0\uc774\uba70.\uac01\uc790\uc758 joint Guassian distribution\uc744 \uac00\uc9c4 Gaussian \ub79c\ub364 \ubcc0\uc218\uc758 \uc9d1\ud569\uc774\ub2e4. \uc880 \ub354 \uc27d\uac8c \ub9d0\ud560 \uc218 \uc788\ub294 \uac83\uc744 \uc0dd\uac01\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* \ud06c\ub85c\uc2a4 \ubc38\ub9ac\ub370\uc774\uc158\uc740 \uacb0\uacfc \uac12\uc744 \uc774\ub9ac \ub3cc\ub824\ubcf4\uace0 \uc800\ub9ac \ub3cc\ub824 \ubcf4\uace0\ud574\uc11c \ud55c \uba74\uc5d0\uc11c \ub098\uc628 \uacb0\uacfc \uac12\uc774 \uc544\ub2c8\ub77c \ub2e4\uc591\ud55c \uacbd\uc6b0\ub97c \uacbd\ud5d8\ud558\uac8c \ud55c \uacb0\uacfc \uac12\uc744 \ubcf4\uc5ec\uc8fc\ub294 \uacfc\uc815\uc774\ub77c\uace0 \uc0dd\uac01\ud558\uc2dc\uba74 \ub429\ub2c8\ub2e4.\n\n\n","8c17eaf5":"* I will divide all into following 6 groups \n\nProbably Survived (90*% up) - 6\nLikely to survive (70-90%) -5\nGood chance (50-70%) - 4\nLess Chance (30-50%) - 3\nNot likely to survive (10%-30%) -2\nProbably Not survived (Lessthan 10%) - 1\n","49e9b004":"### Task 87 - \ud1b5\uacc4\uc801 \uad00\uacc4 \uc2dc\uac01\ud654\n\n###relplot \n\n* reiplot\uc740 \ub450 \uac1c\uc758 \ubcc0\uc218 \uc0ac\uc774\uc758 \ud1b5\uacc4\uc801 \uad00\uacc4\ub97c \ub098\ud0c0\ub0b4\uc900\ub2e4\n* replot\uc758 \uae30\ubcf8\uc740 scatterplot\uc774\ub2e4.","4bf11895":"### TASK 24      -      For Loop\n\n\n* \"for loop\" is used to run a finite loop within a certain range.\n* \ud30c\uc774\uc36c\uc5d0\ub294 for loop \uacfc while loop\uc774 \uc788\uc2b5\ub2c8\ub2e4. for\ub294 \uc5b4\ub5a4 \ubc95\uc704\ub0b4\uc5d0\uc11c \ud55c\uc815\ub41c \ub8e8\ud504\ub97c \ub3cc\ub9b4 \ub54c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \n\n* Sytnax\n\n         for variable in traget:\n\t\t        job description\n\n\n* Sample\n\n        a=[1,2,3,4,5]\n\n        for var in a:\n            print (var) \t","066fc1cd":"* \uac00\uc7a5 \uae30\ubcf8\uc801\uc778 boxplot\uc744 \ud574\ubcf4\uc558\uc73c\ub2c8 Style\uc744 \ud55c \ubc88 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* Now that we've done the most basic boxplot, let's take a look at the Styles\n\n####Style\n\n* seaborn style\uc744 \ub9cc\ub4e4\uc5b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n      set_style(\"whitegrid\")","42254d66":"* \uc606\uc73c\ub85c \ub215\ud600 \ubcfc\uae4c\uc694?","ff687e28":"* Rows from 11th to the 20th. 11\ubc88\uc9f8 \ud589\ubd80\ud130 20\ubc88\uc9f8 \ud589\uae4c\uc9c0\ub97c \ubd05\ub2c8\ub2e4. ","0a152a30":"###catplot\n* catplot\uc740 \ubc94\uc8fc\ud615 \ubcc0\uc218\uc640 \uc2e4\uc218\ud615 \ubcc0\uc218\ub97c 2\ucc28\uc6d0\uc801\uc73c\ub85c \ud55c\ub208\uc5d0 \ubcf4\uac8c \ud574\uc8fc\ub294 \uc7a5\uc810\uc744 \uac00\uc9c0\uace0 \uc788\ub2e4.","0f84abff":"### TASK 31    -      Inheritance\n\n* Inheritance between classes means that the child class inherits the properties of the parent class. For example, if you have a class called Car, you can create a subclass like Sedan, Truck, or SUV that is a child class that inherits the properties of \"Car Class\". You can use the properties and methods of the parent class in that class.\n* \ud074\ub798\uc2a4 \uac04\uc758 \uc0c1\uc18d(Inheritance)\ub294 \ubd80\ubaa8 \ud074\ub798\uc2a4\uc758 \uc18d\uc131\uc744 \uc790\uc2dd \ud074\ub798\uc2a4\uac00 \ubb3c\ub824 \ubc1b\uc74c\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 Car \ub77c\ub294 \ud074\ub798\uc2a4\uac00 \uc788\uc73c\uba74 \"Car Class\" \uc758 \uc18d\uc131\uc744 \uc0c1\uc18d\ubc1b\ub294 \uc790\uc2dd \ud074\ub798\uc2a4\uc778 Sedan, Truck \ub610\ub294 SUV \uc640 \uac19\uc740 \uc11c\ube0c \ud074\ub798\uc2a4\ub97c \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud574\ub2f9 \ud074\ub798\uc2a4\uc5d0\uc11c \ubd80\ubaa8 \ud074\ub798\uc2a4\uc758 \uc18d\uc131\uacfc \uba54\uc11c\ub4dc\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n","0fe62ada":"### Task 84 - \uae30\ud0c0 \ud50c\ub86f","3b42c3a1":"* Add a new column\n* \uc0c8 \uc5f4\uc744 \ucd94\uac00\ud574 \ubd05\ub2c8\ub2e4.","64670741":"#### Column heads \uc5f4 \ud5e4\ub4dc \ubcf4\uae30","ee492f4f":"* dataframe['\uc5f4\ud5e4\ub4dc'][\ud589\uc218\uc2dc\uc791:\ud589\uc218\ub05d]\n* dataframe ['Column Head'] [Row Start: Row End]","b6693645":"#### \"Embarked\" \ubd84\uc11d","ee789aca":"* \ud30c\uc774\uadf8\ub798\ud504\ub791 \uce74\uc6b4\ud2b8 \ud50c\ub86f\uc744 \uc11c\ube0c\ud50c\ub86f\uc73c\ub85c \uadf8\ub9bd\ub2c8\ub2e4.\n* \ud589\uc740 \ud558\ub098 \uc5f4\uc740 2\uac1c\uc758 \uc11c\ube0c \ud50c\ub86f\uc785\ub2c8\ub2e4. \uc0ac\uc774\uc988\ub294 \uac00\ub85c 15\uc778\uce58 \uc138\ub85c 6\uc778\uce58\n* 'Survived'\uc758 \uac12\uc744 \uce74\uc6b4\ud2b8\ud574\uc11c \ud30c\uc774\ud50c\ub86f\uc744 \ub9cc\ub4ed\ub2c8\ub2e4. \n* explode\ub294 \ud3ed\ubc1c\ud558\ub294 \uac83\uc774\ub2c8\uae4c 1\uc774\uba74 \ud280\uc5b4 \ub098\uac00\ub294 \uac83\uc778\ub370 0\uc744 \uc8fc\uba74 \ubd84\ub9ac\ub9cc \ub418\uace0 \ub3cc\ucd9c\uc740 \ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc774\uc5b4\uc11c 0, 1\uc778 \uac83\uc740 \uccab \ubc88\uc9f8 \uac83\uc740 \uc544\ub2c8\uace0 \ub450\ubc88 \uc9f8 \uac83\uc740 \ubd84\ub9ac\ub41c\ub2e4\ub294 \uc758\ubbf8\ub85c \uc0dd\uac01\ud558\uc2dc\uba74 \ub429\ub2c8\ub2e4.\n* autopercent\ub294 1.1\uc774 \ud45c\ud604\ud558\ub294 \ubd80\ubd84\uc740 \uc18c\uc218\uc810 \ud55c \uc790\ub9ac\uae4c\uc9c0 \ubcf4\uc5ec \uc8fc\ub77c\ub294 \uc758\ubbf8\uc785\ub2c8\ub2e4. \ub4a4\uc5d0 \uc810 \uc774\ud558\uac00 4\uba74 \ub458 \ub2e4 \uc18c\uc218\uc810 4\uc790\ub9ac\uc218 \uae4c\uc9c0 \ubcf4\uc5ec \uc90d\ub2c8\ub2e4.\n* ax[0]\uc740 \uccab\ubc88\uc9f8 \uce78\uc785\ub2c8\ub2e4.\n* set_title \uba54\uc18c\ub4dc\ub294 \uc11c\ube0c \ud50c\ub86f\uc758 \uc81c\ubaa9\uc744 \ubcf4\uc5ec \uc90d\ub2c8\ub2e4.   \n\n* Draw a pie chart and count plot in the subplot parts.\n* Two rows and  one column. Size : 15 inches wide by 6 inches high\n* Create a pieplot by counting the value of 'Survived'.\n* Explode means \"protrusion\", so if it's 1, it's popping out. 0 and 1 means that the second one is poping out.\n* Autopercent means 1.1 shows up to one decimal place. If there is 4 after the dot, both show up to four decimal places.\n* ax [0] is the first cell.\n* The set_title method displays the title of the subplot.","d869a77e":"### Task 101 - \ud558\uc774\ud37c\ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd","c212fca3":"* Colab","85d14bd9":"* Survived\ub294 \uc218\uc790\ub85c \uac12\uc744 \uc8fc\uc9c0\ub9cc Categorical Variable\uc778 \uc148\uc785\ub2c8\ub2e4.\n* \uc8fd\ub358\uc9c0 \uc0b4\ub358\uc9c0 \ub458 \uc911 \ud558\ub098\uc758 \uac12\uc744 \uc90d\ub2c8\ub2e4.\n\n* countplot\uc744 \uadf8\ub824 \ubd05\ub2c8\ub2e4.\n* \uc0ac\uc774\uc988\ub294 \uac00\ub85c 10\uc778\uce58 \uc138\ub85c 2\uc778\uce58\n* \uc0dd\uc874 \uc5ec\ubd80 0\uacfc 1\uc758 \uc22b\uc790\ub97c \uc138\uc5b4 \ubcf8 \ud6c4 \uadf8\ub9bc\uc744 \uadf8\ub9ac\ub3c4\ub85d \uba85\ub839\uc744 \ud558\ub294 \uac83\uc785\ub2c8\ub2e4.\n* pyplot(plt)\uc758 figure\ub77c\ub294 \uba54\uc18c\ub4dc\ub97c \uc368\uc11c \uadf8\ub9bc\ud310\uc758 \ud06c\uae30\ub97c \uc815\ud558\uace0, seaborn\uc758 \uce74\uc6b4\ud2b8\ud50c\ub86f\uc744 \uadf8\ub9ac\ub77c\ub294 \uac83\uc785\ub2c8\ub2e4.\n\n* \"Survived\" gives a number, but it's a categorical variable.\n* Either Survived or Not Survived\n\n* Draw a countplot.\n* Size is 10 inches wide by 2 inches long\n* Survival counts\n* Use pyplot (plt) figure method to size the paint and draw a seaborn count plot.","27ebb20d":"* \ub2e4\uc74c\uc5d0\ub294 \ud2b9\uc815 \uc5f4\ub9cc \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* Next we'll only see certain columns.","910b4f80":"* Lat 10 lines \/ \ub9c8\uc9c0\ub9c9 10\uc904\uc744 \ubd05\ub2c8\ub2e4.","b6eaee9a":"* 3\uc5f4\uc744 \ubcfc\uae4c\uc694?\n* 3 columns? ","f4d00991":"* hue\uc5d0 \ub2e4\ub978 \ub370\uc774\ud130\ub97c \ubd99\uc5ec \uc774\ub97c \ud655\uc778\ud560 \uc218 \uc788\ub2e4.","d0c4360b":"* Let's make a new column\n* Give the name of \"Initial\" to the new column, and give the value as alphabets followed by stop(.) such as Mr. \n\n* \uc0c8\ub85c\uc6b4 \uc5f4\uc744 \ud558\ub098 \ub123\uc5b4 \ubd05\ub2c8\ub2e4.\n* Initial\uc744 \ub9cc\ub4e4\uc5b4 \uac70\uae30\uc5d0 \uc774\ub984\uc5d0\uc11c \ub9c8\uce68\ud45c\uac00 \ub530\ub77c\uc624\ub294 \ubd80\ubd84\uc744 \ub123\uc2b5\ub2c8\ub2e4.","7afe989f":"### TASK 11      - String Format\n\n* We learned how to mix a string and a number.\n* Now we will learn how to format it by inserting it.\n\n* string\uacfc number\ub97c \uc11e\uc5b4\uc11c \ucd9c\ub825\ud560 \ub54c \uc6b0\ub9ac\ub294 \uc22b\uc790\ub97c \uc2a4\ud2b8\ub9c1\ud654 \uc2dc\ucf1c\uc11c \ubb38\uc7a5\uc744 \ub9cc\ub4e4\uc5c8\uc2b5\ub2c8\ub2e4. \n* \uc774\uc81c \uc774\ub97c \uc0bd\uc785\ud558\uc5ec \uc4f8 \uc218 \uc788\ub294 format \ubc95\uc744 \ubc30\uc6c1\ub2c8\ub2e4.\n\n\n##Sytnax (sample)\n\n        print  (\"I am {0}, and I love {1} \".format (\" Peter \",\" BMW\")\n        #  I am Peter, and I love BMW\n\n\n","ea6342ce":"### Task 66 - Let's begin \/ \uc2dc\uc791\ud558\uae30\n\n* \uc6b0\uc120 \ub118\ud30c\uc774\ub97c \uc784\ud3ec\ud2b8\ud558\uace0 \uc774\uc5b4\uc11c \ud310\ub2e4\uc2a4\ub97c \uc784\ud3ec\ud2b8\ud55c\ub2e4.\n* import stuffs","bd76fb89":"* \uc774\ub984\uc740 \uac70\uc758 \ubaa8\ub450 \ub2e4\ub97c \uac00\ub2a5\uc131\uc774 \ud07d\ub2c8\ub2e4. Family Name, First Name, Middle Name and even Dr. Capt, master and so on \ubaa8\ub450 \uac10\uc548\ud558\uba74...\n* \ubd84\ub958\ub97c \ud55c \ubc88 \ud574 \ubd05\ub2c8\ub2e4.\n* \ub9ac\uc2a4\ud2b8\ub97c \ud55c \ubc88 \uc8fc \uc6b1 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* The names are most likely different...all of them . Family Name, First Name, Middle Name and even Dr. Given Capt, Master and so on ...\n* Try to classify them.\n* Let's look at the list once.","4df94e51":"* \uc0dd\uc874\ub960\ub85c \ubd05\ub2c8\ub2e4.\n* by survival percentage","c15b9451":"## Part 5 Seaborn","95e26939":"![](http:\/\/)* \uc5ec\uae30\uc5d0 \ub0b4\uc6a9\uc744 \ub123\uc5b4 \ubcf8\ub2e4.\n* Let us put some numbers in there.","f55f2cec":"* Kaggle","710f582f":"* Pclass\ub294 \uac12\uc774 \uc22b\uc790\uc774\ub098 \uc11c\uc5f4\uc774 \uc815\ud574\uc9c4 Ordinal Feature\uc774\ub2e4. \n* Pclass is an \"Ordinal Feature\" whose values are numerical but sequenced.\n\nKey:1 = 1st, 2= 2nd, 3 = 3rd\n\n* \uac01 \ud074\ub798\uc2a4 \ub2f9 \uc0dd\uc874\uc790\ub97c \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* Let's look at the survivors for each class.","570aa5c1":"* Let's see the bottom five lines. \uc81c\uc77c \uc544\ub798 5\uc904\uc744 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","022e3234":"* \uad00\ucc30 :\n1) S\uc5d0\uc11c \ud0d1\uc2b9 \ucd5c\ub300. \ub300\ub2e4\uc218\ub294 Pclass3\n\n2) C\uc758 \uc2b9\uac1d\ub4e4\uc740 \ub9ce\uc740 \ube44\uc728\uc774 \uc0b4\uc544\ub0a8\uc558\uc2b5\ub2c8\ub2e4. \uadf8 \uc774\uc720\ub294 Pclass1 \ubc0f Pclass2 \uc2b9\uac1d\uc774 \ub9ce\uc544\uc11c \uc77c \uac83\uc785\ub2c8\ub2e4\n\n3) Embark S\ub294 \ub300\ubd80\ubd84\uc758 \ubd80\uc790\ub4e4\uc774 \ud0d1\uc2b9\ud55c \ud56d\uad6c\uc9c0\ub9cc \uc0dd\uc874 \uac00\ub2a5\uc131\uc740 \ub0ae\uc2b5\ub2c8\ub2e4. Pclass3\uc758 \uc2b9\uac1d\ub3c4 \ub9ce\uc558\uc2b5\ub2c8\ub2e4. \n\n4) \ud3ec\ud2b8 Q\ub294 \uc2b9\uac1d\uc758 \uac70\uc758 95 %\uac00 Pclass3\n\n* observation :\n\n1) Maximum boarding in S. The majority is Pclass3\n\n2) Passengers of C survived a large proportion. The reason would be due to the large number of Pclass1 and Pclass2 passengers\n\n3) Embark S is the port where most rich people board, but it is unlikely to survive. Lots of passengers in Pclass3.\n\n4) Port Q has almost 95% of passengers Pclass3","28584c9c":"### TASK 18       -     Tupple\n\n\n* tupple\uc774\ub780 \ubcc0\uacbd\ub418\uc9c0 \uc54a\uc740 \ub370\uc774\ud130\uc758 \uc9d1\ud569\uc73c\ub85c \ubcc0\uacbd\ub418\uc9c0 \ubabb \ud55c\ub2e4\ub294 \ud2b9\uc131 \ub54c\ubb38\uc5d0 \uba54\uc18c\ub4dc\uac00 \ubcc4\ub85c \uc5c6\uc2b5\ub2c8\ub2e4. tupple\uc740 \uc18c\uad04\ud638 ( )\ub85c \ud45c\ud604\ub429\ub2c8\ub2e4. \n* Tupple does not have many methods since tupple cannot be modified.\n\n* Then why would we use a tupple?\n* A tupple uses less storage.\n* A tupple is used when we do not want any data to be changed accidentally.\n* A tupple can be used as a key of a dictionary\n* ( ) is used to represent a tupple\n* If we make a variable \u201ca\u201d and say a = (5), it has an integer value, but what if I want to make tupple \u201ca\u201d with the same value? Then we use a comma to say it is a tupple. a = (5, )\n* \uadf8\ub7fc \uc65c tupple\uc744 \uc0ac\uc6a9\ud560\uae4c\uc694? \ub2e4\uc74c\uacfc \uac19\uc740 \uc774\uc720 \ub54c\ubb38\uc785\ub2c8\ub2e4.\n* tupple\uc740 \uc800\uc7a5 \uacf5\uac04\uc744 \uc801\uac8c \uc4f4\ub2e4.\n* tupple\uc740 \uc6b0\ub9ac\uac00 \uc6b0\uc5f0\ud558\uac8c \ub610\ub294 \uc2e4\uc218\ub85c \ub370\uc774\ud130\ub97c \ubc14\uafb8\uc5b4\uc11c\ub294 \uc548 \ub418\ub294 \uacf3\uc5d0\uc11c \uc0ac\uc6a9\ub41c\ub2e4.\n* \ub354\ud558\uc5ec \ud569\ud560 \uc218 \uc788\uace0 \uacf1\ud558\uc5ec \ubc18\ubcf5\uc774 \uac00\ub2a5\ud558\ub2e4. \n* \ud29c\ud50c\uc5d0 \uc6d0\uc18c\uac00 \ud558\ub098\uc778 \uacbd\uc6b0 integer\ub85c \uc624\uc778\ud560 \uc218 \uc788\uc5b4 (5,) \uc2dd\uc73c\ub85c \ud45c\uae30\ud568\n\n         mytupple = (item1, item2, item 3)\n","85c2d9c8":"* Fare\ub97c \uadf8\ub8f9\uc73c\ub85c \ub098\ub204\uc5b4 \ub193\uaca0\uc2b5\ub2c8\ub2e4.\n* qcut\uc744 \ud65c\uc6a9\ud558\uba74 \uc6d0\ud558\ub294 \uc870\uac01\uc73c\ub85c \ub370\uc774\ud130\ub97c \ub098\ub204\uc5b4 \uc90d\ub2c8\ub2e4.\n\n* I will divide the Fare into groups.\n* Use qcut to divide the data into the desired pieces.","7ad84664":"* Secure the shape of ntrain and ntest. (Preparation for later splitting from the merged one)\n* y_train is a known result.\n* Separate the passenger ID of the test as it will be added to the final result later.\n* Merge train and test to create a file called data. When you convert a string to a number, or group numbers by interval, it is easier for us to put them together to do it all at once.\n* ntrain\uacfc ntest\uc758 shape\uc744 \ud655\ubcf4\ud574\ub193\uc2b5\ub2c8\ub2e4. (\ubcd1\ud569 \ud55c \uac83\uc744 \ub098\uc911\uc5d0 \ub2e4\uc2dc \uac08\ub77c \ub193\uae30 \uc704\ud55c \uc900\ube44)\n* y_train\uc740 \uc54c\ub824\uc9c4 \uacb0\uacfc \uac12\uc774\ub2c8 \ub530\ub85c \ubaa8\uc154 \ub193\uace0\n* \ud14c\uc2a4\ud2b8\uc758 \uc2b9\uac1d \uc544\uc774\ub514\ub294 \ub098\uc911\uc5d0 \ucd5c\uc885 \uacb0\uacfc\uc5d0 \ub123\uc744 \uac83\uc774\uae30 \ub54c\ubb38\uc5d0 \ub530\ub85c \ub5bc\uc5b4 \ub193\uc2b5\ub2c8\ub2e4.\n* train\uacfc test\ub97c \ubcd1\ud569\ud558\uc5ec data \ub780 \ud30c\uc77c\uc744 \ub9cc\ub4ed\ub2c8\ub2e4. \ubb38\uc790\ub85c \ub41c \uac83\uc744 \uc22b\uc790\ub85c \ubc14\uafbc\ub2e4\ub4e0\uac00.\uc22b\uc790\ub97c \uc778\ud130\ubc1c \ubcc4\ub85c \uadf8\ub8f9\ud654 \ud55c\ub2e4\ub4e0\uac00 \ud560 \ub54c \ud55c\uaebc\ubc88\uc5d0 \ud558\uae30 \uc704\ud574 \ud569\ud574 \ub193\uc2b5\ub2c8\ub2e4. ","4688aa28":"### TASK 37\u2013 Creating 1D Array\n\n* Learning NumPy is almost the same as learning thins about Array.\n* First import and create a 1X3 array.\n* Dimension is determined by how many brackets it has\n* NumPy\ub97c \ubc30\uc6b0\ub294 \uac83\uc740 Array\ub97c \ubc30\uc6b0\ub294 \uac83\uacfc \uac70\uc758 \uac19\ub2e4\uace0 \uc0dd\uac01\ud558\uba74 \ub429\ub2c8\ub2e4.\n* \uc6b0\uc120 import\ub97c \ud558\uace0, 1X3 array\ub97c \ub9cc\ub4e4\uc5b4 \ubd05\ub2c8\ub2e4. \n* \ucc28\uc6d0\uc744 \uacb0\uc815\ud558\ub294 \uac83\uc740 [ ]\uc758 \uac2f\uc218\uc785\ub2c8\ub2e4.  \n\n[1,2,3] - 1D \n[[1,2,3]] - 2D - It looks the same but it could have other array in the same dimension\n[[[1,2,3]]] - 3D - It also looks the same but i could have other several arrays in the same dimension \n\n            ------------------------------------------------\n\n            [1,2,3]\n\n            ------------------------------------------------\n\n            [1,2,3] [    ]\n            [     ] [    ]\n\n            ------------------------------------------------\n\n            [1,2,3] [    ]\n            [     ] [    ]\n\n                            [     ] [    ]\n                            [     ] [    ]\n\n                                            [     ] [    ]\n                                            [     ] [    ]\n\n            -------------------------------------------------\n\n* Syntax 1D\n\n        import numpy as np\n        var = np.array([item1, item2.....])\n","78cc18ee":"#### NUMPY\n* Numpy\ub294 Python\uc758 \uacfc\ud559 \ucef4\ud4e8\ud305\uc744 \uc704\ud55c \ud575\uc2ec \ub77c\uc774\ube0c\ub7ec\ub9ac\uc785\ub2c8\ub2e4. \uace0\uc131\ub2a5 \ub2e4\ucc28\uc6d0 \ubc30\uc5f4 \uac1d\uccb4\uc640 \uc774\ub7ec\ud55c \ubc30\uc5f4 \uc791\uc5c5\uc744\uc704\ud55c \ub3c4\uad6c\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. \n* Numpy is the core library for scientific computation in Python. It provides high performance multidimensional array objects and tools for working with those arrays.\n\n#### Arrays (\ubc30\uc5f4)\n* You might have learned matrices in mathematics or linear algebra.\n* When we make a list, we use a fairly long binary code, but Numpy uses less and saves a lot of resources.\n* Numpy also has elements that make things faster in terms of memory arrangements, which we won't talk about here.\n* Let's take a look at an example to understand.\n* \uc6b0\ub9b0 \uc218\ud559\uc5d0\uc11c \ud589\ub82c\uc744 \ubc30\uc6e0\uc744 \uac83\uc785\ub2c8\ub2e4.\n* \uc6b0\ub9ac\uac00 \ub9ac\uc2a4\ud2b8\ub97c \uc4f8 \ub54c \ubc14\uc774\ub108\ub9ac \ucf54\ub4dc\ub85c \uc0c1\ub2f9\ud788 \uae34 \uac83\uc744 \uc0ac\uc6a9\ud558\ub294\ub370 Numpy\ub294 \uc801\uac8c \uc368\uc11c \uc790\uc6d0\uc744 \uc544\uaef4 \uc900\ub2e4\uace0 \uc0dd\uac01\ud558\uba74 \ub429\ub2c8\ub2e4. \n* \ub610\ud55c \uba54\ubaa8\ub9ac\uc758 \ubc30\uc5f4 \uc801\uc778 \uba74\uc5d0\uc11c\ub3c4 \ub354 \ube60\ub974\uac8c \ud560 \uc218 \uc788\ub294 \uc694\uc18c\ub97c \uac00\uc9c0\uace0 \uc788\ub294\ub370 \uc774 \uac83\uc740 \uc5ec\uae30\uc11c \uc774\uc57c\uae30 \ud558\uc9c0 \uc54a\ub3c4\ub85d \ud569\ub2c8\ub2e4.\n* \uc77c\ub2e8 \uc608\ub97c \ubcf4\uba74\uc11c \uc774\ud574\ud574 \ubd05\ub2c8\ub2e4.","7c16c80d":"### Task 50 - Methods for Creating Arrays\n\n* Learn the np.copy() method.\n* Learn the np.eye() method (the same as identity matrix)\n* Learn the np.empty() method.\n* Learn the np.like() method.\n\n* np.copy() \uba54\uc18c\ub4dc\ub97c \ubc30\uc6c1\ub2c8\ub2e4.\n* np.eye() \uba54\uc18c\ub4dc\ub97c \ubc30\uc6c1\ub2c8\ub2e4  (identity matrix\uc640 \uac19\uc74c) \n* np.empty() \uba54\uc18c\ub4dc\ub97c \ubc30\uc6c1\ub2c8\ub2e4.\n* np.like() \uba54\uc18c\ub4dc\ub97c \ubc30\uc6c1\ub2c8\ub2e4.\n\n","64a482cb":"* \uc774\ub97c \uae30\uc900\uc73c\ub85c Sex\ub85c \ub3cc\uc544\uac11\ub2c8\ub2e4\n* \uc131\ubcc4\uc5d0\uc11c \ub9c8\ubb34\ub9ac\ub97c \ud558\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4.\n* \uc131\ubcc4\uc744 \ub2e4\uc2dc \ubd05\ub2c8\ub2e4.\n\n* Return to \"Sex\" based on this\n* Did not finish 'Sex' part above\n* View 'Sex' again.","89a72d4a":"* box\uc758 outlier \ucc98\ub9ac\uac00 \ub208\uc5d0 \ub748\ub2e4.\n* \uc2a4\ubaa8\ucee4 \uae4c\uc9c0 \ub123\uc5b4\uc11c \ub450\uc904\ub85c \ubcf8\ub2e4.","babf01b3":"* \ub3d9\uadf8\ub77c\ubbf8\uc758 \ud06c\uae30\ub97c \ub2ec\ub9ac\ud560 \uc218\ub3c4 \uc788\ub2e4.","7b13ec1c":"### Task 71 - Filtering with Conditions \/ \uc870\uac74 \ud544\ud130\ub9c1","a9ea38d1":"### Task 64 - Titles for Subplots \/ Subplot\uc5d0 Title \ub123\uae30 \ub4f1","09749593":"* \uc624\ud788\ub824 \ud55c \ub208\uc5d0 \uc798 \ubcf4\ub824\uba74 swarm\uc73c\ub85c \ub193\uc544 \ube48\ub3c4\ub97c \ub354 \uc798 \ubcfc \uc218\ub3c4 \uc788\ub2e4.","7bf4b004":"* cabin \uc758 \uc704\uce58\uc5d0 \ub530\ub77c \ub2ec\ub77c\uc9c0\ub294 \uac83\uc774 \uc788\ub294\uc9c0 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* Let's see if there is anything that depends on the location of the cabin.","730678d0":"* \uc704\uc640 \uac19\uc774 4\uac1c\uac00 \uc0dd\uc131\ub418\uc5b4 \uc788\uc74c\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n* You can see 4 above, for them to be indexed it will be\n\n      0,0      0,1\n      \n      1,0      1,1 \n\n* \uc778\ub371\uc2f1 \uc704\uce58\ub294\n\n      0,0      0,1\n      \n      1,0      1,1 \n\n\ub77c\ub294 \uac83\uc744 \uc544\uc2e4 \uc218 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4.\n\n* \uc544\ub798\uc640 \uac19\uc774 subplot\uc744 \uc0dd\uc131\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4.\n* You can make subplots like the ones below","48dabd1f":"* Let's import math and learn about ceil, floor, max, min\n* \uc6b0\uc120 math module \uc744 import \ud574\uc57c \ud569\ub2c8\ub2e4\n* \ub2e4\uc74c 4\uac1c\uc758 \ud568\uc218\ub97c \ubc30\uc6cc \ubd05\ub2c8\ub2e4: ceil, floor, max, min\n\n        ceil()      # Returns an integer equal to or greater than the given number as the result.'\uc62c\ub9bc' \uc758 \uae30\ub2a5\uc744 \ud569\ub2c8\ub2e4. \uc8fc\uc5b4\uc9c4 \uc22b\uc790\ubcf4\ub2e4 \uac19\uac70\ub098 \ub354 \ud070 \uc815\uc218\ub97c \uacb0\uacfc \uac12\uc73c\ub85c \ubc1b\uc2b5\ub2c8\ub2e4.\n        floor()     # Returns an integer equal to or less than the given number as the result.'\ub0b4\ub9bc' \uc758 \uae30\ub2a5\uc744 \ud569\ub2c8\ub2e4. \uc8fc\uc5b4\uc9c4 \uc22b\uc790\ubcf4\ub2e4 \uac19\uac70\ub098 \ub354 \uc791\uc740 \uc815\uc218\ub97c \uacb0\uacfc \uac12\uc73c\ub85c \ubc1b\uc2b5\ub2c8\ub2e4.\n        max()       # Returns the largest value among the given numbers. If it is a string, displays the last one in the alphabetical order.\uc8fc\uc5b4\uc9c4 \uc22b\uc790 \uc911\uc5d0\uc11c \uac00\uc7a5 \ud070 \uac12\uc744 \ubcf4\uc5ec \uc90d\ub2c8\ub2e4. string \uc77c \uacbd\uc6b0 \uc54c\ud30c\ubcb3\uc5d0\uc11c \uac00\uc7a5 \ub2a6\uc740 \uc21c\uc11c\uc758 \uc54c\ud30c\ubcb3\uc744 \ubcf4\uc5ec \uc90d\ub2c8\ub2e4.\n        min()       # Returns the smallest of the given numbers, for a string, displays the first alphabet in the alphabetical order.\uc8fc\uc5b4\uc9c4 \uc22b\uc790 \uc911\uc5d0\uc11c \uac00\uc7a5 \uc791\uc740 \uac12\uc744 \ubcf4\uc5ec \uc90d\ub2c8\ub2e4. string \uc77c \uacbd\uc6b0 \uc54c\ud30c\ubcb3\uc5d0\uc11c \uac00\uc7a5 \ube60\ub978 \uc21c\uc11c\uc758 \uc54c\ud30c\ubcb3\uc744 \ubcf4\uc5ec \uc90d\ub2c8\ub2e4.\n","1ac0bdc6":"* Max, Min, & Mean","9ef26494":"### TASK 27     -        File I\/O\n\n* The below is a common way but here we use the different wayhere at Kaggle. We will learn the Kaggle way later on.\n\n        test_list = [\"KIA\", \"Porsche\", \"Maserati\"]\n        f = open(\"test.txt\", \"w\")\n        f.close()\n\n* We made a text file above, but we have not writtien any yet.\n* \ud558\uc9c0\ub9cc \uc544\uc9c1 \ub9ac\uc2a4\ud2b8\uc5d0 \uc788\ub294 \uc544\uc774\ud15c\uc774 test.txt \ud30c\uc77c\uc5d0 \uc4f0\uc5ec \uc9c4 \uac83\uc740 \uc544\ub2d9\ub2c8\ub2e4. \ub530\ub77c\uc11c for loop\ub97c \ud65c\uc6a9\ud558\uc5ec \ub9ac\uc2a4\ud2b8\uc5d0 \uc788\ub294 string item\ub4e4\uc774 \uc544\ub798\uc640 \uac19\uc740 \ubc29\ubc95\uc744 \ud1b5\ud574 \ud30c\uc77c\uc5d0 \uc785\ub825 \ub418\ub3c4\ub85d \ud569\ub2c8\ub2e4.\n\n        for value in test_list:\n\t\t    f.write(str(value))\n\n\n\n* \\n \uc744 \ub123\uc5b4\uc11c \uc904 \ubc14\uafb8\uae30\ub97c \ud558\uc5ec \uc138\ub85c\ub85c \ub098\uc624\ub3c4\ub85d \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n* You can use \\n to disply them vertically.\n","b505872f":"* train\ud30c\uc77c \uc21c\uc11c\ub300\ub85c \ub370\uc774\ud130 \ud30c\uc77c\uc758 \uc5f4\ub4e4\uc744 \ubd05\ub2c8\ub2e4.\nLet's view the columns of the data file in the order in the train file.","0d2c78ae":"### TASK 09   -       Variables\n\n\n##variable \n* \uc218\ud559\uc5d0\uc11c\ub294 Y = X + 2\uc640 \uac19\uc740 \uc2dd\uc744 \ubcfc \uc218 \uc788\uc73c\uba70 Y\uc640 X \uac12\uc740 \ubcc0\ud558\uc9c0\ub9cc 2\ub294 \ubcc0\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c X,Y\ub294 \ubcc0\uc218\uc785\ub2c8\ub2e4. \ud30c\uc774\uc36c\uc5d0\uc11c\uc758 \ubcc0\uc218\uc758 \uc4f0\uc784\uc0c8\ub97c \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* In mathematics, whe we  see something like Y = X + 2, where the values of Y and X change but 2 does not. So X and Y are variables and 2 is a constant. Let's look at the use sof variables in Python.\n\n##Syntax\n\n        variable = \"string\"     # \ubb38\uc790\ud615 \ubcc0\uc218\n        variable = 5            # \uc22b\uc790\ud615 \ubcc0\uc218\n        variable = input()      # \ud568\uc218\ud615 \ubcc0\uc218\n        variable = True         # \ubd88\ub9ac\uc548 \ubcc0\uc218\n        \n        variable = \"string\" # string variable\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0variable = 5 # numeric variable\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0variable = input () # functional variable\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0variable = True # Boolean variable\n\n * sample (adding string variables)\n \n        situation1 = \"It is a new car!\"   \n        situation2 = \"It is a used car.\"\n        comment1 = \"Too expensive!!\"\n        comment2 = \"It is a good deal!\"\n        comment3 = \"It can give you headaches!\"\n","9650098c":"* \ubcc4\ub85c \ub9c8\uc74c\uc5d0 \uc548 \ub4e4\uc5b4\uc11c Age Group\uc744 \uc81c\uac00 \ub098\ub204\uc5b4 \ubd05\ub2c8\ub2e4.\n\n* 1\uc0b4 \ubbf8\ub9cc baby -1\n* 1\uc0b4 - 3\uc0b4 Toddler  2\n* 3\uc0b4 \ucd08\uacfc - 11\uc0b4 young kid  - 7\n* 11\uc0b4 \ucd08\uacfc - 15\ubbf8\ub9cc big kid  - 13\n* 15-17 \uc0b4 Boy\/Girl - 16\n* 17\uc774\uc0c1 20\ubbf8\ub9cc Youth - 18\n* 20- 22 Very Young - 21\n* 22- 26 Young man  -24\n* 26 - 30  - 28\n* 30 -32 Active  - 31\n* 32 -34 Manager  - 33\n* 34  - 38 Director  - 36\n* 38 - 52 Mid  - 45\n* 52-79 Old  - 63\n* 80 \uc774\uc0c1 Senior  - 80\n\nI don't like the qcut outcome so I make my own Age Group.\n\n* Under 1 year old baby -1\n* 1 year old-3 years old Toddler 2\n* Over 3 years old-11 years old young kid-7\n* Over 11 years old-Under 15 big kid-13\n* 15-17 years old Boy \/ Girl-16\n* Over 17 Youth-18\n* 20- 22 Very Young-21\n* 22- 26 Young man -24\n* 26-30-28\n* 30 -32 Active-31\n* 32 -34 Manager-33\n* 34-38 Director-36\n* 38-52 Mid-45\n* 52-79 Old-63\n* Seniors over 80 -80","6502f88a":"* Let me use train file of the Titanic set we used above","311786fe":"### Task 45 - Indexing - 2D Array\n\n* Index items in a two-dimensional array.\n* Index the position of rows and columns. For example, if it is the 3rd column of the 2nd rows, index it as [1,2].\n* 2\ucc28\uc6d0 Array\uc5d0\uc11c \uc544\uc774\ud15c\uc744 \uc778\ub371\uc2f1 \ud569\ub2c8\ub2e4.\n* \ud589\uacfc \uc5f4\uc758 \uc704\uce58\ub97c \uc778\ub371\uc2f1\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 2\ud589\uc758 3\uc5f4\uc774\uba74 [1,2]\ub85c \uc778\ub371\uc2f1\ud569\ub2c8\ub2e4.\n\n* Syntax\n\n\tvariable[row, column]\n\t\n","a288fff8":"### TASK 3\u2013 Strings and Numbers\n\n\n##Syntax\n\n\n        \"string\"\n        3\n\n\n* string \uc5d0\ub294 \uc54c\ud30c\ubcb3, \uae30\ud638, \uacf5\ubc31 \ubc0f \uae30\ud0c0\uac00 \ud3ec\ud568\ub429\ub2c8\ub2e4.\n* string \uc740 \ud070 \ub530\uc634\ud45c (\" \") \ub610\ub294 \uc791\uc740 \ub530\uc634\ud45c (' ') \uc5d0 \ub123\uc5b4\uc11c \ud45c\ud604\uc744 \ud569\ub2c8\ub2e4.\n* \uc608\uc81c\uc640 \uac19\uc774 + \ub97c \uc0ac\uc6a9\ud558\uc5ec string\uc744 \ud569\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n* \ucef4\ud4e8\ud130\ub294 string\uacfc number\ub97c \ub2e4\ub974\uac8c \ucde8\uae09\ud569\ub2c8\ub2e4.\n* string contains alphabets, symbols, spaces, and others.\n* string is expressed in double quotes (\"\") or single quotes ('').\n* You can add strings using +, as in the example..\n* Computers treat strings and numbers differently.\n\n        \uc608\ub97c \ub4e4\uc5b4, 1 \uc740 \uc22b\uc790 1 \uc774\uc9c0\ub9cc \"1\" \uc740 \ubb38\uc790\uc5f4 \"1\" \uc785\ub2c8\ub2e4.\n        1 + 1 = 2 \uc774\uc9c0\ub9cc  \"1\" + \"1\" \uc740 \"11\" \uc785\ub2c8\ub2e4\n        \ub530\ub77c\uc11c 2 * 3 \uc740 6 \uc774\uc9c0\ub9cc \u20182\u2019 * 3 \uc740 \"222\" \uc785\ub2c8\ub2e4.\n        \n        For example, 1 is the number 1 but \"1\" is the string \"1\".\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 1 + 1 = 2 but \"1\" + \"1\" is \"11\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 So 2 * 3 is 6 but \u20182\u2019 * 3 is \u201c222\u201d.\n\n\n* You cannot add number + 'string' directly\n","3b5bb6fd":"#### \ud56d\ubaa9\uc758 \uc885\ub958 There are many types of features.\n\n#### \ubc94\uc8fc\ud615 \ud56d\ubaa9 (Categorical Features)\n\n\ubc94\uc8fc\ud615 \ubcc0\uc218\ub294 \ub458 \uc774\uc0c1\uc758 \uacb0\uacfc \uc694\uc18c\uac00 \uc788\ub294 \ubcc0\uc218\uc774\uba70 \ud574\ub2f9 \uae30\ub2a5\uc758 \uac01 \uac12\uc744 \ubc94\uc8fc\ubcc4\ub85c \ubd84\ub958 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 \uc131\ubcc4\uc740 \ub450 \uac00\uc9c0 \ubc94\uc8fc (\ub0a8\uc131\uacfc \uc5ec\uc131)\uc758 \ubc94\uc8fc \ud615 \ubcc0\uc218\uc785\ub2c8\ub2e4. ** \uc774\uc0b0\ud615 \ubcc0\uc218(discrete variable) = \ubc94\uc8fc\ud615 \ubcc0\uc218 (categorical variable) \uc758 \ud558\ub098\ub85c \uba85\ubaa9 \ubcc0\uc218 norminal variable **\ub77c\uace0\ub3c4\ud569\ub2c8\ub2e4.\n\nCategorical variables are variables that have more than one result element, and each value of that function can be classified by category. For example, gender is a categorical variable in two categories (male and female). ** Discrete variable = It is one kind of categorical variable, and is also known as nominal variable **.\n\n** \ub370\uc774\ud130 \uc14b\uc5d0\uc11c \uba85\ubaa9 \ud56d\ubaa9 : Sex, Embark ** \uc774\uba70 \uc6b0\ub9ac\ub294 Name, Ticket \ub4f1\uc744 \uc774\ub85c \ubcc0\ud658\ud574\uc57c \ud560 \uac83 \uac19\uc2b5\ub2c8\ub2e4.\n** The nominal items in the data set are: Sex, Embark ** and we have to convert Name, Ticket, etc to numbers.\n\nOrdinal Variable :\n\n\uc21c\uc704 \ubcc0\uc218\ub294 \ubc94\uc8fc \ud615\uc758 \ud558\ub098\uc9c0\ub9cc \uadf8 \ucc28\uc774\uc810\uc740 \uac12 \uc0ac\uc774\uc758 \uc0c1\ub300 \uc21c\uc11c(=\uc11c\uc5f4) \ub610\ub294 \uc815\ub82c\uc774 \uac00\ub2a5\ud558\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4. \n\nOrdinal variables are one of the categorical types, but the difference is the relative order (= sequence) or sorting between the values.\n\n** \ub370\uc774\ud130 \uc14b\uc5d0\uc11c \uc21c\uc704 \ud56d\ubaa9 : PClass ** \uc774\uba70 \uc6b0\ub9ac\ub294 Cabin\uc744 \uc774 \ubc94\uc8fc\ub85c \ubcc0\ud658\ud574\uc11c \uc0ac\uc6a9\ud574\uc57c \ud560 \uac83 \uac19\uc2b5\ub2c8\ub2e4.\n\n** Ordinal variables in the data set: PClass ** and we think we should convert Cabin to this category.\n\n#### \uc5f0\uc18d\ud615 \ud56d\ubaa9 (Continuous Features):\n\n\uc11c\ub85c \uc5f0\uc18d\ub41c \uac12\uc744 \uac00\uc9c4 \ubcc0\uc218\ub97c \uac00\uc9c4 \ud56d\ubaa9\uc774\uba70 \uc5ec\uae30\uc5d0\uc11c \uc6b0\ub9ac\ub294 \uc5f0\ub839\uc744 \ub300\ud45c\uc801\uc778 \uac83\uc73c\ub85c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \n\nThis is an item with variables with continuous values, age is one good sample  \n\n* Age, SipSp, Parch, Fare\ub294 interval variable\ub85c \ub9cc\ub4e4\uc5b4 \uc774\uc5d0 \uc801\uc6a9\ud574\uc57c \ud560 \uac83 \uac19\uc2b5\ub2c8\ub2e4.\n* Age, SipSp, Parch, and Fare should be catgorized to the interval variable.\n\n####Feature Information\n\n\n      Variable        Definition                Key\n\n      survival\t      Survival\t                0 = No, 1 = Yes\n\n      pclass\t      Ticket class\t            1 = 1st, 2 = 2nd, 3 = 3rd\n\n      sex\t          Sex\t\n\n      Age\t          Age in years\t\n\n      sibsp\t          # of siblings \/ spouses aboard the Titanic\t\n\n      parch\t          # of parents \/ children aboard the Titanic\t\n\n      ticket\t      Ticket number\t\n\n      fare\t          Passenger fare\t\n\n      cabin\t          Cabin number\t\n\n      embarked\t      Port of Embarkation\t     C = Cherbourg, Q = Queenstown, S = Southampton","e5af4249":"###Pointplots\n\n* \uc544\ub798\uc640 \uac19\uc774 \ud55c\ub208\uc5d0 \uc2a4\ubaa8\ucee4\uac00 \uc544\ub2cc \uc0ac\ub78c\ub4e4\uc758 \uc190\ub2d8 \uc0ac\uc774\uc988\uac00 \ud06c\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4","5dc78567":"### TASK 33 - Super\n\n* What do you need to redefine what is in the child class with a method of the parent class? What you need is a \u201csuper\u201d. The word \"super\" brings up the elements of the parent class in the child class. We look at this in four steps. super is expressed in the form of super (subclass name, self), mother class function (parameter).\n* \uc790\uc2dd \ud074\ub798\uc2a4\uc5d0 \uc788\ub294 \uac83\uc744 \ub2e4\uc2dc \ubd80\ubaa8 \ud074\ub798\uc2a4\uc758 \uba54\uc18c\ub4dc\ub85c \uc7ac\uc815\uc758 \ud558\ub824\uba74 \ubb50\uac00 \ud544\uc694\ud560\uae4c\uc694? \uc774\ub54c \ud544\uc694\ud55c \uac83\uc774 \u201csuper\u201d \uc785\ub2c8\ub2e4. \u201csuper\u201d \ub77c\ub294 \ub2e8\uc5b4\ub294 \uc790\uc2dd \ud2c0\ub798\uc2a4 \uc548\uc5d0\uc11c \ubd80\ubaa8 \ud074\ub798\uc2a4\uc758 \uc694\uc18c\ub4e4\uc744 \ubd88\ub7ec\uc635\ub2c8\ub2e4. \uc6b0\ub9ac\ub294 \uc774\ub97c 4\ub2e8\uacc4\uc5d0 \uac78\uccd0 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.  super\ub294 super(\uc11c\ube0c\ud074\ub798\uc2a4\uba85, self).\ub9c8\ub354\ud074\ub798\uc2a4\ud568\uc218(\ud30c\ub77c\ubbf8\ud130) \ud615\uc2dd\uc73c\ub85c \ud45c\ud604\ub429\ub2c8\ub2e4.\n\n\n\n#### Step 1\n* Let's just start with a mother class and suppose it cost about a dollar to go 10 miles. \n* mother class \ub9cc \uc788\ub294 \uac83\uc73c\ub85c \ud558\uace0 \uc138\ub2e8\uc774 10\ub9c8\uc77c\ub2f9 1\ub2ec\ub7ec\uc758 \uae30\ub984\uc744 \uc18c\ubaa8\ud558\ub294 \uac83\uc744 \ub9cc\ub4e4\uc5b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. ","ebdf6dad":"* \uc774\uc5b4\uc11c \uc6b0\ub9ac\uac00 \uc5f0\uc2b5\uc5d0\uc11c \uc4f8 \ud30c\uc77c\uc744 \uc784\ud3ec\ud2b8 \ud569\ub2c8\ub2e4.\n* Let's use our Titanic file ","6c1da380":"### TASK 16       -   Dictionary \n\n\n\n* While \u201clist\u201d is a set of items under a single variable name, \u201cdictionary\u201d is more like business card.\n* \"list\"\uac00 \ud558\ub098\uc758 variable\ub85c \uad00\ub9ac\ub418\ub294 \ubaa9\ub85d\uc774\ub77c\uba74 \"dictionary\" \ub294 \uc0ac\uc804\uc774\ub098 \uba85\ud568\uc5d0 \uc880 \ub354 \uac00\uae5d\ub2e4\uace0 \ubcf4\uba74 \ub418\uaca0\uc2b5\ub2c8\ub2e4. Dictionary\ub294 \ub300\uad04\ud638{ } \ub85c \ud45c\ud604\ub429\ub2c8\ub2e4. \n* { } is used to represent a dictionary.\n\n* Syntax\n\n         mydict = {key: value, key: value, key; value}\n\n* Sample\n\n        Name : Joshua\n        Phone : 55512345678\n        Company: ai2learn\n        \n* As you see, the \"Name\" part is called Key and the \"Joshua\" part is called value.\n* \uc5ec\uae30\uc11c \"Name\" \uc740 Key\ub77c \ubd80\ub974\uace0 \"Joshua\" \ub294 value\ub77c \ubd80\ub985\ub2c8\ub2e4.\n\n\n* Sample\n\n        bizcard['name'] = 'Joshua'\n        bizcard['phone'] = '55512345678'\n        bizcard['company'] = 'ai2learn'\n\n\n* Dictionary\ub3c4 key\ub098 value\uc758 \ubcc0\ub3d9\uc740 \ud5c8\uc6a9\ud558\ub098 key\uc758 \uacb9\uce68\uc740 \ud5c8\uc6a9 \uc548\ub428\n* Dictionary also allows key or value changes but not redundant keys","9d4ecaae":"####\uc5f4\uc758 \uac12 \uc5b4\ub808\uc774\ub85c \ubcf4\uae30\n\nView columns as an array of values\n\nKeep in mind that pandas sees our df as a matrix, not a table or table in Excel. Remember that it's based on NumPy. \n\n* \uba85\uc2ec\ud560 \ubd80\ubd84\uc740 pandas\uac00 \uc6b0\ub9ac\uac00 \uc4f0\ub294 df\ub97c \uc5d1\uc140\uc758 \ud45c\ub098 \ud14c\uc774\ube14\uc774 \uc544\ub2c8\ub77c \ud589\ub82c\ub85c \ubcf8\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4. NumPy \uae30\ubc18\uc774\ub780 \uac83\uc744 \uae30\uc5b5\ud558\uc2dc\uae30 \ubc14\ub78d\ub2c8\ub2e4. \ub530\ub77c\uc11c \ud45c\uc5d0\uc11c \ubd88\ub7ec \uc624\ub294 \uac83 \ucc98\ub7fc \ubd88\ub7ec \uc624\uc9c0 \ubabb \ud560 \ub54c\uac00 \ub9ce\uc73c\uba70 \uc774\ub7f0 \ub584\ub294 \ud574\ub2f9\ub418\ub294 \uba54\uc18c\ub4dc\ub97c \uc0ac\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4.","f490f41c":"* \uc774\uc81c \ubb38\uc790\ub85c \ub41c \ud56d\ubaa9\ub4e4 \uc218\uce58\ub85c \ubc14\uafb8\uc5b4 \ubd05\ub2c8\ub2e4.\n* Let's replcae the strings with numbers","a623d8e6":"### Task 80 -  Boxplot","692cfef6":"* \uc0c9\uae54\ub3c4 \ub2ec\ub9ac \ud558\uace0 \ub300\uc2dc \ub77c\uc778\uc73c\ub85c\ub3c4 \ubc14\uafb8\uc5b4 \ubd05\ub2c8\ub2e4. \n* Try ones with different colors and dash lines.","9ccb6f35":"### TASK 06   -     Arithmetic Operators\n\nEverybosy knows these\n\n        first_add = 12345 + 56789\n        first_sub = 543-321\n        first_multi = 12 * 34\n        first_div = 520\/24\n\n","266c1002":"* Colab File I\/O","2a492000":"* Gender\ub780 \uc5f4\uc744 \ub9cc\ub4e4\uc5b4 \uc5ec\uae30\uc5d0 \uadc0\uc871 \ub0a8, \uc77c\ubc18\ub0a8, \uadc0\uc871\ub140, \uc77c\ubc18\ub140, \ubca0\uc774\ube44, \ub178\uc778\uc744 \ub9cc\ub4ed\ub2c8\ub2e4.\n* \uc77c\ub2e8 \ud074\ub798\uc2a4\ub85c \ub0a8\ub140\ub97c \ub098\ub208 \ub2e4\uc74c \uc774\ub4e4\uc744 \ub2e4\uc2dc \uc7ac\ubd84\ub958 \ud569\ub2c8\ub2e4. \n\n* Create a column called Gender to create a noble man, a common man, a noble woman, a common woman, a baby, and an old man.\n* Divide men and women into classes and then reclassify them.","5891c663":"* \ube48 \ub370\uc774\ud130\uac00 \uc788\ub294\uc9c0 \ubd05\ub2c8\ub2e4.\n* Let's check if there are any null values","95355546":"### Task 48 - Creating Arrays with zeroes, ones and others\n\n\n* Create an array of all zeros, ones or a certain number.\n* \ubaa8\ub450 0\uc73c\ub85c\ub41c 1\ub85c\ub41c \ub610\ub294 \ub2e4\ub978 \uc22b\uc790\ub85c \ub41c Array\ub97c \ub9cc\ub4e4\uc5b4 \ubcf8\ub2e4.\n\n\n* Syntax\n\n\tnp.zeros(shape)\n\tnp.ones(shape)\n\tnp.full( (shape), number)\n","f0ecb840":"* \uadf8\ub798\uc11c \uc774\ubbf8 \ub2f5\uc774 \uc54c\ub824\uc838 \uc788\ub294 \ud2b8\ub808\uc778 \ud30c\uc77c\uc744 \ud574\ubcf4\ub2c8 ...\uc544 \uc774\uc815\ub3c4 \uc815\ud655\uc131\uc774 \uc788\uc5c8\uace0, \uac01 \uc218\uce58\ub4e4\uacfc \uacb0\uacfc\ub97c \ube44\uad50\ud574\ubcf4\ub2c8 \uc5b4\ub290 \ud56d\ubaa9\uc774 \uc815\ub2f5\uc5d0 \uc544\uc8fc \uc815\ud559\ud55c \uc778\ub371\uc2a4\uac00 \ub418\uace0 \uc5b4\ub290 \ud56d\ubaa9\uc740 \ubcc4\ub85c \uad00\uacc4 \uc5c6\ub354\ub77c...\uc774\ub7f0 \uac83\uc774\uc9c0\uc694","e499a0ec":"* \uc774\ubc88\uc5d0\ub294 Pclass\uc640 Survived 2\uc5f4\uc744 \ubd05\ub2c8\ub2e4.(\ub370\uc774\ud130 \ud504\ub808\uc784\uc774\ub77c [] \ub450 \uac1c\uac00 \ud544\uc694\ud569\ub2c8\ub2e4.)\n* This time, look at the two columns Pclass and Survived (this is a data frame and requires two [])","93668ba2":"* \uc774\ubc88\uc5d0\ub294 y\ucd95\uc5d0 Parch\ub97c \ub123\uace0 x\ucd95\uc5d0 Pclass\uc744 \ub123\uc5b4\ubcf4\uc8e0\n* Let's put the Parch on the y axis and the Pclass on the x axis.","93be4f3d":"#### groupby - mean","a3780e91":"* multi col filtering -","1a659c19":"###boxen\n\n* box\uc640 \uc720\uc0ac\ud558\ub098 \ud070 \ub370\uc774\ud130\uc5d0 \ub9ce\uc774 \uc4f0\uc774\ub294 boxen\uc73c\ub85c \ubcf8\ub2e4.","3d8bfa24":"* Scikit-Learn\uc5d0\uc11c\ub294 3\uac00\uc9c0 \ubaa8\ud615 \ucd5c\uc801\ud654 \ub3c4\uad6c\ub97c \uc9c0\uc6d0\ud558\ub294\ub370 \nvalidation_curve\/ GridSearchCV\/ ParameterGrid\uc774\ub2e4\n\nfit \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud558\uba74 grid search\uac00 \uc790\ub3d9\uc73c\ub85c \uc5ec\ub7ec\uac1c\uc758 \ub0b4\ubd80 \ubaa8\ud615\uc744 \uc0dd\uc131\ud558\uace0 \uc774\ub97c \ubaa8\ub450 \uc2e4\ud589\uc2dc\ucf1c\uc11c \ucd5c\uc801 \ud30c\ub77c\ubbf8\ud130\ub97c \ucc3e\ub294\ub2e4. \n* bestscore\ub294 \ucd5c\uace0 \uc810\uc218\uc774\uace0 best estimator\ub294 \ucd5c\uace0 \uc810\uc218\ub97c \ub0b8 \ud30c\ub77c\ubbf8\ud130\ub97c \uac00\uc9c4 \ubaa8\ud615\n* c\uac12\uacfc gamma\uac12\uc740 10\uc758 \ubc30\uc218\ub85c \uc77c\ubc18\uc801\uc73c\ub85c \ud55c\ub2e4.\n* \uac10\ub9c8 \ub9e4\uac1c \ubcc0\uc218\ub294 \ub2e8\uc77c \ud559\uc2b5 \uc608\uc81c\uc758 \uc601\ud5a5\uc774 \ub3c4\ub2ec\ud558\ub294 \uc815\ub3c4\ub97c \uc815\uc758\ud558\uba70 \ub0ae\uc740 \uac12\uc740 'far'\ub97c, \ub192\uc740 \uac12\uc740 'close'\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4. \uac10\ub9c8 \ub9e4\uac1c \ubcc0\uc218\ub294 \uc11c\ud3ec\ud2b8 \ubca1\ud130\ub85c \ubaa8\ub378\uc5d0 \uc758\ud574 \uc120\ud0dd\ub41c \uc0d8\ud50c\uc758 \uc601\ud5a5 \ubc18\uacbd\uc758 \uc5ed\uc73c\ub85c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n* C \ub9e4\uac1c \ubcc0\uc218\ub294 \uc758\uc0ac \uacb0\uc815 \ud45c\uba74\uc758 \ub2e8\uc21c\uc131\uc5d0 \ub300\ud55c \ud6c8\ub828 \uc608\uc81c\uc758 \uc624 \ubd84\ub958\ub97c \uc81c\uac70\ud569\ub2c8\ub2e4. C\uac00 \ub0ae\uc744\uc218\ub85d \uacb0\uc815 \ud45c\uba74\uc774 \ub9e4\ub044\ub7fd\uace0 \ub192\uc740 C\ub294 \ubaa8\ub378\uc774 \ub354 \ub9ce\uc740 \uc0d8\ud50c\uc744 \uc11c\ud3ec\ud2b8 \ubca1\ud130\ub85c \uc790\uc720\ub86d\uac8c \uc120\ud0dd\ud560 \uc218 \uc788\ub3c4\ub85d\ud558\uc5ec \ubaa8\ub4e0 \ud559\uc2b5 \uc608\uc81c\ub97c \uc62c\ubc14\ub974\uac8c \ubd84\ub958\ud558\ub294 \uac83\uc744 \ubaa9\ud45c\ub85c\ud569\ub2c8\ub2e4.\n* Verbose\ub294 \ubd88\ub9ac\uc548 \uac12\uc73c\ub85c True\ub85c \ub123\uc73c\uba74 \uaf2c\uce58 \uaf2c\uce58 \ub2e4 \uc54c\ub824\uc8fc\ub294\ub370, \ub300\uc2e0 \uc2dc\uac04\uc774 \uc880 \ub354 \uc624\ub798 \uac78\ub9bd\ub2c8\ub2e4.\n* cv =5\ub294 5 fold\ub85c \uad50\ucc28 \uac80\uc99d\ud55c\ub2e4\ub294 \ub73b\uc785\ub2c8\ub2e4.","9f3f4c10":"#### Step 2\n\n* Let the sub class inherit the mother (or parent) class\n* \uc774\uc5b4\uc11c \uc624\ubc84\ub77c\uc774\ub529 \ud558\uc9c0 \uc54a\uace0 inheritance \ub9cc \ud558\ub294 \uacbd\uc6b0\ub97c \ubcf4\uaca0\uc2b5\ub2c8\ub2e4\n","834020ec":"#### groupby - cmap","d94a1c22":"### TASK 20 - Making Functions\n\n* \ud568\uc218\ub294 \ubc18\ubcf5\ud574\uc11c \uc7ac\uc0ac\uc6a9 \ud560 \uc218 \uc788\ub294 '\uc218\ud559\uc801 \uacf5\uc2dd' \uac19\uc740 \uac83\uc774\ub77c \uc0dd\uac01\ud558\uba74 \ub429\ub2c8\ub2e4. \uadf8\ub7fc \ud568\uc218\ub97c \ud55c \ubc88 \ub9cc\ub4e4\uc5b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \n* You can think of a function as something like a mathematical formula that can be reused over and over again. So let's create a function.\n\n* Syntax\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 def functionname (): # \ud568\uc218 \uc120\uc5b8 function declaration\n                    Function Body # \uae30\ub2a5 \uc8fc\uae30 Assign a function to your function\n                    \n            functionname()        # \ud638\ucd9c\ud574\uc11c \uae30\ub2a5 \uc0ac\uc6a9\ud558\uae30 Call your function to perform\n\n ","e488f950":"### Task 100 - \ub9c8\uc9c0\ub9c9 \ubaa8\ub378 \uc608\uce21 ","2955c54f":"* \ube48\uce78\uc774 \ub450\uac1c \uc788\ub294\ub370 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* Let us see 2 null values","b88ab9a3":"* \uc544\ub798\uc640 \uac19\uc774 \ub4f1\uace0\uc120 \ubaa8\uc591\uc73c\ub85c \ubcfc \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4.","cf44b0a6":"#### Manipulate with conditions \/ \uc870\uac74\uc5d0\uc11c \ubcc0\uacbd\ud558\uae30\n\n* \uc6b0\uc120 \uc0c8\ub85c\uc6b4 \uc5f4\uc744 \ubcc0\uacbd\ud574 \ubd05\ub2c8\ub2e4.\n* Let's change things for ['Initial']\n\n","c456761d":"### Task 75- Making a new format \/ \uc0c8\ub85c\uc6b4 \ud3ec\ub9f7 \ub9cc\ub4e4\uae30","fe00e26f":"* test \uc5d0 \uc788\ub294 Dona\uc758 \ub098\uc774\ub97c \ubcf4\uace0 \uc5b4\ub514\uc5d0 \ub123\uc744\uc9c0 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* Ms. \ub294 \ud604\ub300\ucc98\ub7fc Miss + Mrs\ub97c \ud569\uce5c \ub9d0\uc774 \uc544\ub2c8\ub77c \ub2f9\uc2dc\uc5d0\ub294 \uadc0\uc871\ubbf8\ub9dd\uc778\uc744 \uc758\ubbf8\ud558\ub294 \uac83\uc774 \uc5c8\uc2b5\ub2c8\ub2e4. Mlle\ub098 Mme\ub4f1\ub3c4 \ub9c8\ub4dc\ubaa8\uc544\uc824\uacfc \ub9c8\ub2f4\uc758 \uc904\uc778\ub9d0\uc77c \uacbd\uc6b0\uc77c \uac83\uc785\ub2c8\ub2e4. \uadc0\uc871 \uc5ec\uc131\ub4e4\ub85c \ubcf4\uc544\uc57c\uaca0\uc8e0.\n\n* Let's look at Dona's age and decide to where to classify her.\n* Ms. did not mean Miss + Mrs combined like these days, at the time it meant widow. Also Mlle,  & Mme may be short for Mademoiselle and Madame. I should see them as women in a higher class.","535ffab5":"#### \uc5f4 \uc778\ub370\uc2a4 \ubcf4\uae30\n#### Column Index View\n\n* View the column index using column name.index.\n* The default value starts with 0 and goes up one at a time\n\n* \uc5f4\uc774\ub984.index\ub97c \ud1b5\ud574 \uc5f4 \uc778\ub371\uc2a4\ub97c \ubd05\ub2c8\ub2e4.\n* default\uac12\uc73c\ub85c 0\uc5d0\uc11c \uc2dc\uc791\ud558\uace0 \ub05d\ub098\ub294 \uc5f4\uc5d0\uc11c stop\ud558\uba70 \ud558\ub098\uc529 \uc62c\ub77c\uac11\ub2c8\ub2e4.","da19ff6f":"####\"Sex\" \ubd84\uc11d\n\n","c2a439b3":"* Random Forest","66de56d8":"### TASK 34      -      Lambda\n\n* \ud30c\uc774\uc36c\uc758 \ub78c\ub2e4(lambda) \ud568\uc218\ub294 \ub7f0\ud0c0\uc784\uc5d0 \uc0dd\uc131\ud574\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \uc775\uba85 \ud568\uc218 \uc785\ub2c8\ub2e4. \uc77c\ubc18\uc801\uc778 \ud568\uc218\uc640 \uac19\uc774\u00a0\uc815\uc758\ud574\ub450\uace0 \uc4f0\ub294 \uac83\uc774 \uc544\ub2c8\uace0 \ud544\uc694\ud55c \uacf3\uc5d0\uc11c \uac04\ub2e8\ud55c \uae30\ub2a5\uc744 \uc989\uc2dc \uc0ac\uc6a9\ud558\uace0 \ubc84\ub9b4 \uc218 \uc788\ub294 \ud568\uc218\uc785\ub2c8\ub2e4.\n* Python's lambda function is an anonymous function that can be created and used. It is not a function that you define and use like a normal function, but a simple function that can be used and discarded.\n\n* Sample 1 - calculation\n\n      \ta = 2        \n      \tb = 2\n      \tprint (a ** b)\n\n* A function\n\n      \tdef sample(a,b):\n         \t\t print(a ** b)\n\n      \tsample(2,2)\n\n\n* lambda\n\n      \ta = lambda x, y: x ** y\n      \tprint (a(2,2))\n\n\n* \uadf8\ub7fc \ub78c\ub2e4\ub85c \ub2e4 \ud558\uc9c0 \uc65c \uadc0\ucc2e\uac8c function \uc744 \ub9cc\ub4dc\ub290\ub0d0\uace0 \ud560 \uc218\ub3c4 \uc788\uaca0\uc73c\ub098 lambda \ub294 \uc784\uc2dc\ub85c\ub9cc \uc0ac\uc6a9\ub418\ub294 \ud55c\uacc4\uac00 \uc788\ub294 \ud568\uc218\uc785\ub2c8\ub2e4.\n* Then you may say we do all with lambda functions and why we bother creating functions? Because .....lambda has its limits and is used only temporarily.","67331f30":"#### Step 2\n\n* Now let's look at the truck inheriting just $ 1 per 10 miles in the subclass \"Truck\".\n* \uc774\uc81c \uc11c\ube0c \ud074\ub798\uc2a4\uc778 \ud2b8\ub7ed \ud074\ub798\uc2a4\uc5d0\uc11c \ud2b8\ub7ed\uc774 \uadf8\ub0e5 10 \ub9c8\uc77c\ub2f9 1\ub2ec\ub7ec\ub97c inheritance \ud558\ub294 \uac83\uc744 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. ","14149470":"### TASK 26    -   Break\/Continue\n\n\n* To break out of a for or while loop, use the break statement. If you just want to skip the condition without exiting the loop, use the continue statement.\n* for \ub098 while loop \uc5d0\uc11c \ube60\uc838\ub098\uc624\ub824\uba74 break \ubb38\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. loop \ub97c \ube60\uc838\ub098\uc624\uc9c0 \uc54a\uace0 \ud574\ub2f9 \uc870\uac74\ub9cc \uac74\ub108\ub6f0\uace0 \uc2f6\uc744 \ub54c\ub294 continue \ubb38\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \n\n\n* Break\n\n         \ti = 1\n\n\t        while i <= 10:\n\t\t        print (i)\n\t\t        if i == 4:\n\t\t\t        break\n\t\t        i += 1\n\n* For\n\n         \ti = 1\n\n\t        while i <= 5:\n\t\t        i += 1\n\t\t        if i == 4:\n\t\t\t        continue\n\t\n        \tprint (i)","2d39be1f":"###  TASK 14       -      List \n\n\n\n* Lists are represented in square brackets \u201c[]\u201d and are used to manage data with a single variable.\n* It can be changed and duplicated and so on, so it is used as a general list.\n* \ub9ac\uc2a4\ud2b8\ub294 \ub300\uad04\ud638 \u2018[ ]\u2019\ub85c \ud45c\ud604\ub418\uba70 \ub370\uc774\ud130\ub97c \ud558\ub098\uc758 \ubcc0\uc218\ub85c \uad00\ub9ac\ud560 \ub54c \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \n* \ubcc0\uacbd \uac00\ub2a5\ud558\uace0, \uc911\ubcf5\ub3c4 \uac00\ub2a5\ud558\uc5ec \uc77c\ubc18\uc801\uc778 \ubaa9\ub85d\uc73c\ub85c \uc0ac\uc6a9\ub41c\ub2e4.  \n\n\n* Syntax\n* \ub9ac\uc2a4\ud2b8\ub294 \uc544\ub798\uc640 \uac19\uc740 \uad6c\uc870\ub97c \uac00\uc9d1\ub2c8\ub2e4.\n\n         my_list = [1, 2, 3, \"a\", \"b\", \"c\"]\n\n* sample \n\n        my_list1 = [1, 2, 3] \n\n        my_list2 = [\"KIA\", \"Chevrolet\", \"Ford\"]\n\n        # A list can be an item of other lists.\n\n        my_list3 = [1, 2, 3, [\"KIA\", \"Chevrolet\", \"Ford\"]]\n","613feef8":"#### \"Surived\" \ubd84\uc11d\n\n* \ud55c \uc5f4\uc529 \uac80\ud1a0\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* We will look at the columns one by one\n\n* Survived -  ** Key: (0 - Not Survived, 1- Survived) **","73350261":"\n### TASK 23 -  Importing Modules\n\n\n* \"import\" allows you to call a ready-made module and use it. We learned about functions. Let's learn to call a ready-made-module.\n* Sytnax\n\n         from random import randint\n\n* Syntax\n\n         from datetime import datetime\n\n* Sample \n\n         toss = randint(0, 1) # Will return 0 or 1 \/ 0\uacfc 1 \ub458 \uc911 \ud558\ub098\ub97c \ud1a0\uc2a4 \uac12\uc73c\ub85c \uc90d\ub2c8\ub2e4.\n\n\n* datetime gives you the cutrrent time \n\n        current_time = datetime.now()   \t# current time \/ \ud604\uc7ac \uc2dc\uac04 \uac12\n        c_year = current_time.year      \t# current year\/ \ud604\uc7ac \uc2dc\uac04\uc5d0\uc11c \uc5f0\ub3c4 \uac12\n        c_month = current_time.month  \t    # current month\/ \ud604\uc7ac \uc2dc\uac04\uc5d0\uc11c \uc6d4 \uac12\n        c_day = current_time.day            # current day\/ \ud604\uc7ac \uc2dc\uac04\uc5d0\uc11c \uc77c \uac12\n\n","b8693cbc":"* Let's check the data types of each column.\n* \uac01 \uc5f4\uc758 \ub370\uc774\ud130 \ud0c0\uc785\uc744 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","ffcc5d88":"* Survival rates per Embarked ports\n* \uc2b9\uc120 \uc7a5\uc18c \ubcc4\ub85c \uc0dd\uc874 \ud655\ub960","afef4449":"* \uc55e \ub4a4\ub85c \ubaa8\ub450 S\uc774\uace0 Pclass\ub3c4 \ubaa8\ub450 1\uc778 \uac83\uc73c\ub85c \ubd10\uc11c S\uc77c \uac00\ub2a5\uc131\uc774 \ud07d\ub2c8\ub2e4.\n* It is most likely that it is S because both front and back are S and Pclass is all 1.","3ab748c3":"## Part 3 Matplotlib\n\n#### Just like numpy, matplolib will be hidden mostly under seaborn which we will use more for a Kaggle note, so we will go over the basic concepts of matplotlib only here.\n#### matplotlib\ub3c4 \ub9c8\ucc2c\uac00\uc9c0\ub85c \uc6b0\ub9ac\uac00 \uce90\uae00\uc5d0\uc11c \uc4f8 \uac83\uc740 seaborn\uc774\uba70, matplotlib\ub3c4 \uc77c\ubd80 \uc4f0\uc774\ub098 \ub300\ubd80\ubd84 \uc228\uaca8\uc838 \uc788\uc5b4\uc11c \uc5ec\uae30\uc11c\ub294 \uae30\ubcf8 \uac1c\ub150\ub9cc \ub2e4\ub8f9\ub2c8\ub2e4.\n\n\nMatplotlib\ub294 Python 2D \ud50c\ub85c\ud305 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc785\ub2c8\ub2e4. Matplotlib\uc740 Python \uc2a4\ud06c\ub9bd\ud2b8, Python \ubc0f IPython \uc258, Jupyter \ub178\ud2b8\ubd81 \ub4f1\uc5d0\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n","d230ddc9":"* \uc704\uc758 for \ub8e8\ud504\ub294 11 \uac00\uc9c0 \ubaa8\ub378\uc758 \uad50\ucc28 \uac80\uc99d \ub41c \uc810\uc218\ub97c list 'score'\ub85c \ub123\uc2b5\ub2c8\ub2e4. \uc774\uc81c \uc774 \ub370\uc774\ud130\ub97c \uba3c\uc800 \ud14c\uc774\ube14\ub85c \ub9cc\ub4e4\uace0 \uc774 \uadf8\ub798\ud504\ub97c \ud1b5\ud574 \uacb0\uacfc\ub97c \uc54c\uc544 \ubd05\ub2c8\ub2e4.","2174cd6a":"#### Let's see the description of the file  \/ describe \ubcf4\uae30","f4b13084":"* Adaboost","37772ff8":"### TASK 41 Checkig Dimensions\n\n* \uc790\uc2e0\uc758 array\uac00 \uba87 \ucc28\uc6d0\uc778\uc9c0 \ud655\uc778\ud574 \ubd05\ub2c8\ub2e4.\n* Find out how many dimensions your array has.\n\n* Syntax\n\n        variable.ndim\n","a26db8a3":"# Tutorial - From \"Hello Python\" to Titanic Challenge Submission (\ud30c\uc774\uc36c\uc744 1\ub3c4 \ubaa8\ub974\ub294 \ubd84\ub4e4\uc5d0\uac8c \uae30\ucd08\ubd80\ud130 \uce90\uae00 \ud0c0\uc774\ud0c0\ub2c9 \ucc4c\ub9b0\uc9c0 \ucc38\uac00\uae4c\uc9c0 Tutorial) \n## This is a tutorial for abolute beginners who do not even know basic Python Syntaxes.\n\n#### You are welcome to make a copy and edit. Please click upvote all the way down below.\n#### \ub3c4\uc6c0\uc774 \ub41c\ub2e4\uba74 \uc6b0\uce21 \uc0c1\ub2e8\uc5d0 Copy & Edit\uc744 \ub20c\ub7ec\uc11c \ubcf5\uc0ac\ud574 \uac00\uc154\ub3c4 \uc88b\uc2b5\ub2c8\ub2e4. \ub300\uc2e0 \uc544\ub798\uc5d0 Upvote (\uce90\uae00 \ubc84\uc804\uc758 \uc88b\uc544\uc694) \ub20c\ub7ec \uc8fc\uc138\uc694^^","532aa450":"### Task 53  -  Methods for Statistics\n\n* Let's learn how to find mean, minimum, maximum, etc.\n* \ud3c9\uade0, \ucd5c\uc18c, \ucd5c\ub300 \uac12 \ub4f1\uc744 \ucc3e\ub294 \uba54\uc18c\ub4dc\ub97c \ubc30\uc6cc \ubd05\ub2c8\ub2e4.\n\n* Syntax\n\n          # \ucd5c\uc18c\uac12\n          np.min(\uc5b4\ub808\uc774\ubcc0\uc218\uba85)\n          # \ucd5c\ub300\uac12\n          np.max(\uc5b4\ub808\uc774\ubcc0\uc218\uba85)\n          # \ud3c9\uade0\uac12\n          np.mean(\uc5b4\ub808\uc774\ubcc0\uc218\uba85)\n          # \ucc38\uc870\ub85c axis = 0\ub294 x\ucd95\ub9cc \uc788\ub294 \uac83, axis=1 \uc740 x,y\ucd95 axis=2\ub294 x,y,z\ucd95 \n\n           # Minimum value\n           np.min (array variable name)\n           # Max\n           np.max (array variable name)\n           # Average\n           np.mean (array variable name)\n           # Reference axis = 0 has only for one with x axis only, axis = 1 is for ones with x, y axis, and axis = 2 is for ones with x, y, z axis\n","feae3e8a":"* XGB Step 3","2ea7495a":"### Task 59 - Scattered Chart \/ Scattered Chart \ub9cc\ub4e4\uae30\n\n#### \ub77c\uc778\ucc28\ud2b8\ub97c \ud574\ubcf4\uc558\uc73c\ub2c8 scattered chart\ub85c \ub9cc\ub4e4\uc5b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* Let's move on to the scattered chart\n\n* plot \ub300\uc2e0\uc5d0 scatter\ub97c \ub123\uc2b5\ub2c8\ub2e4.\/ Swithc plot -> scatter\n\n\t\tplt.scatter(year,cabbage)\n\t\tplt.scatter(year,radish)\n\t\tplt.show","6795f9f0":"* \uae30\ubcf8 \ud30c\uc77c\uc758 \uc77c\ubd80 \uc5f4\ub9cc \ube7c\uc11c \ub2e4\ub978 \ub370\uc774\ud130\ud504\ub808\uc784\uc73c\ub85c \uc800\uc7a5\ud560 \uc218 \uc788\ub2e4.\n* You can save as a different dataframe by subtracting only a few columns from the base file","0bb001be":"* \uc0c9\uc0c1\uacfc \ub9c8\ucee4\ub97c \ubaa8\ub450 \ubcc0\uacbd\ud558\uc5ec \uadf8\ub8f9\ud654 \ubcc0\uc218\ub97c \ud45c\uc2dc\ud569\ub2c8\ub2e4.\n* Change both color and marker to show grouping variables.","77928437":"###violinplot\n\n*\uc5ed\uc2dc \uac19\uc740 \ub370\uc774\ud130\ub97c \ubc14\uc774\uc62c\ub9b0\ud50c\ub86f\uc73c\ub85c \ubcf8\ub2e4.","a8a0241e":"* \ub450 \uc0ac\ub78c\uc758 \ud2f0\ucf13 \ubc88\ud638\uac00 \uac19\uc2b5\ub2c8\ub2e4.\n* \ud639\uc2dc \uac19\uc740 \ud2f0\ucf13 \ubc88\ud638\uac00 \uc788\ub294 \ub2e4\ub978 \uc0ac\ub78c\uc774 \uc788\ub294\uc9c0 \ubd05\ub2c8\ub2e4.\n\n* Two people have the same ticket number.\n* See if anyone else has the same ticket number.","024d835e":"## Contents\nPart 1 Python\n\nPart 2 NumPy\n\nPart 3 Matplotlib\n\nPart 4 Pandas\n\nPart 5 Seaborn\n\nPart 6 Kaggle Titanic Challenge (with Scikit-learn) ","a0560827":"* 11\ud589\uc5d0\uc11c 20\ud589\uae4c\uc9c0 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* Let's look at rows 11 through 20.","f8023fb7":"* \ub450 \uac1c\uc774\uc0c1\uc73c\ub85c \ub098\ub204\uc5b4\uc11c \ubcfc \uc218\ub3c4 \uc788\ub2e4.","1e7201da":"### Task 51 -    Basic Arithmetics\n\n* Let's practice basic arithmetics.\n* You can add, subtract and multiply by element.\n* You can add and subtract two arrays.\n* You can also get the trigonometric values of each array.\n* \uae30\ubcf8\uc801\uc778 \uc218\ud559 \ud559\uc2b5\uc744 \ud574\ubd05\ub2c8\ub2e4.\n* \uc694\uc18c\ubcc4\ub85c \ub354\ud558\uae30 \ube7c\uae30 \uacf1\ud558\uae30 \ub4f1\uc774 \uac00\ub2a5\ud569\ub2c8\ub2e4.\n* \ub450 \uac1c\uc758 array\ub97c \ub354\ud574 \uc8fc\uace0 \ube84 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n* \uac01 array\uc758 \uc0bc\uac01\ud568\uc218 \uac12\ub3c4 \uad6c\ud560 \uc218 \uc788\ub2e4.","15800711":"* As you see there are lots of holes at \"Age' & \"Cabin\"\n* Let me check how many NANs are there.\n* \ubcf4\uc2dc\ub2e4\uc2dc\ud53c '\ub098\uc774'\uc640 '\uce90\ube48' \ubc88\ud638\uc5d0\uc11c \uad6c\uba4d\uc774 \ub9ce\uc2b5\ub2c8\ub2e4.\n* \ube48\uce78\uc758 \uc22b\uc790\ub97c \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","ff597d08":"#### Piechart\n* Pie charts are common ones we practiced with excel files.\n* \ud30c\uc774\ucc28\ud06c\ub294 \uc6b0\ub9ac\uac00 \uc5d1\uc140\ud558\uba74 \ub9ce\uc774 \ubcf4\ub294 \uac83\uc774\uc9c0\uc694\n* \ud0c0\uc774\ud0c0\ub2c9 \uc790\ub8cc\ub97c \uac00\uc9c0\uace0 \ud55c \ubc88 \ubd05\ub2c8\ub2e4.\n* Let's do it with Titanic data","b9f0c5b6":"####Data Type\ubcf4\uae30  \/ Viewing datatype\n\n* Data Type\uc740 \uc6b0\ub9ac\uac00 \ud558\ub294 \uc815\ub3c4\uc758 \ud30c\uc77c \ud06c\uae30\uc5d0\uc11c \uc911\uc694\ud558\uc9c0 \uc54a\uc73c\ub098 \uc544\uc8fc \ud070 \ub370\uc774\ud130\ub97c \ub2e4\ub8f0 \ub54c\ub294 \uc911\uc694\ud569\ub2c8\ub2e4.\n* Data Type is not important for the file sizes that we work on, but it is important when dealing with very large data.","ec956b9f":"## print (\"How much is the T-shirt?\")\nt_price = input()\nmy_price = int(t_price)\n\nif my_price  <= 20:\n  print (\"I can buy 2.\")\nelif my_price > 50:\n    print (\"Next time.\")\nelse:\n    print (\"Let me have one.\")","cb9e4d20":"* Matplotlib\uc5d0\uc11c \n* Think of figure as a canvas in which we can draw a plot.\n* You can think of plt.subplot as an order of dividing plots and displaying them.\n* plt.subplots (1,2, figsize = (12,6)) indicates subplots with one row, two columns and the total size is 12 inches by 6 inches.\n* If you draw 9 in 3X3, you can put 3,3 instead of 1,2 above.\n\n* Create a space for drawing with axes in the figure\n* You can put the y and x axes in the axix (axis).\n* Please check https:\/\/matplotlib.org\/3.1.1\/api\/axes_api.html#matplotlib-axes\n\nfigure\ub294 \uadf8\ub9bc\uc744 \uadf8\ub9ac\ub294 \uce94\ubc14\uc2a4\ub77c \uc0dd\uac01\ud558\uc2dc\uace0 \nplt.subplot\uc740 \uc774\ub97c \uad6c\ubd84\ud574\uc11c \ub098\ub204\ub294 \uac83\uc774\ub77c \uc0dd\uac01\ud558\uc2dc\uba74 \ub429\ub2c8\ub2e4.\nplt.subplots(1,2,figsize=(12,6))\uc774\ub77c\uace0 \ub418\uc5b4 \uc788\ub2e4\uba74\n\uc544\ub798 \uc11c\ube0c \ud50c\ub86f\uc744 1\ud589 2\uc5f4, \uc989 2\uac1c \uadf8\ub9ac\ub294 \uac83\uc774\uace0 \uc804\uccb4 \uc0ac\uc774\uc988\ub294 12\uc778\uce58 * 6\uc778\uce58\ub77c\uace0 \uc0dd\uac01\ud558\uc2dc\uba74 \ub429\ub2c8\ub2e4. \n3X3\uc73c\ub85c 9\uac1c\ub97c \uadf8\ub9b0\ub2e4\uba74 \uc704\uc758 1,2 \ub300\uc2e0 3,3,\uc744 \ub123\uc73c\uba74 \ub418\uaca0\uc9c0\uc694\n\n* figure\uc548\uc5d0 axes\ub85c \uadf8\ub9bc \uadf8\ub9ac\ub294 \uacf5\uac04\uc744 \ub9cc\ub4e4\uace0 \naxix (\ucd95)\uc5d0 y\uc640 x\ucd95\uc744 \ub123\uc73c\uba74 \ub429\ub2c8\ub2e4.","f646e300":"### TASK 36   -    List Comprehension\n\n* List comprehension or LC makes it easy to create lists.\n* Useful for creating new lists from existing list or repeatable objects.\n* List comprehension \ub610\ub294 LC\ub294 \ub9ac\uc2a4\ud2b8\ub97c \uc27d\uac8c \uc0dd\uc131\ud558\uac8c \ud574\uc90d\ub2c8\ub2e4.\n* \uae30\uc874 list \ub610\ub294 \ubc18\ubcf5 \uac00\ub2a5\ud55c \uac1d\uccb4\uc5d0\uc11c \uc0c8 list \ub97c \ub9cc\ub4e4 \ub54c \uc720\uc6a9\ud569\ub2c8\ub2e4. \n\n* Syntax. \n\n\t\tnewlist = [formula for elements in Sequence]\n \n\n    \teven_ten = [x * 2 for x in range(6)]\n    \tprint (even_ten)\n\n\n    \todd_ten = [x*2+1 for x in range(5)]\n    \tprint (odd_ten)","7452be6e":"* 11\ud589 5\uc5f4\uc744 \ubd05\ub2c8\ub2e4.\n* Row 11 \/ 5th Column","e5d97472":"### Task 82 - Scatterplot","52e3891d":"* loc\uc740 \ub808\uc774\ube14 (\uc608\ub97c \ub4e4\uc5b4 'Age' \ub610\ub294 'Age'\uc758 \uba87 \ud589)\uc744 \uae30\uc900\uc73c\ub85c \uac12\uc744 \ucc3e\uc744 \uc218 \uc788\uace0 \uc778\ud14c\uc800 \uac12\uc73c\ub85c\ub294 \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\n* \ubc18\uba74\uc5d0 iloc\uc740 integer position\uc5d0 \ub530\ub77c \uac12\uc744 \ucc3e\uc744 \uc218 \uc788\uace0 \ub808\uc774\ube14\ub85c\ub294 \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\n\n* loc can find a value based on a label (for example, a few rows of 'Name' or a certain row of 'Name')\n* On the other hand, iloc can find values by integer position and not by label.","b7a2583b":"#### \"Fare\" \ubd84\uc11d ","8752e55f":"### Task 97  - Change strings to numbers \/ string\uc744 \uc218\uce58\ub85c \ubc14\uafb8\uae30","03a08324":"* \ubbf8\ub514\uc5b8\uc744 \uc784\ud3ec\ud2b8\ud558\uc5ec \uacbd\ud5a5\uc744 \ubd05\ub2c8\ub2e4\n* Import medians to see trends","614af306":"## Part 4 -  Pandas\n\n* Pandas\ub294 \uc624\ud508 \uc18c\uc2a4 \ud30c\uc774\uc36c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub85c \uac04\ud3b8\ud558\uba74\uc11c\ub3c4 \ud30c\uc6cc\ud480\ud55c \ub370\uc774\ud130 \uad6c\uc131 \ubc0f \ubd84\uc11d \ud234\uc774\ub2e4.\n* \ub118\ud30c\uc774 \uae30\ubc18\uc5d0\uc11c \uc791\ub3d9\ud55c\ub2e4.\n* NumPy \uae30\ubc18\uc5d0\uc11c SciPy, Pandas, Matplotlib \ub4f1\uc774 \uc791\ub3d9\ub418\uace0 \uadf8 \uc704\uc5d0 SkLearn \ub4f1\uc774 \uc791\ub3d9\ub41c\ub2e4\uace0 \uc0dd\uac01\ud558\uc2dc\uba74 \ub429\ub2c8\ub2e4. \n\n* Pandas is an open source Python library that is a simple yet powerful data organization and analysis tool.\n* Works on Numpy.\n* You can think of SciPy, Pandas, Matplotlib, etc. on top of NumPy and SkLearn on top of all those.\n","b5b53616":"#### \ucd5c\ucd08 (Wild) Guess\n \n* \ud56d\ubaa9\uc744 \ubcf4\uba74 PClass \ub294 \uac1d\uc2e4\uc758 \ub808\ubca8\uc778 \uac83 \uac19\uc2b5\ub2c8\ub2e4. 1\uc774 \uc81c\uc77c \uc88b\uc740 \uacf3\uc774\uace0 3\uc774 \uc81c\uc77c \ub0ae\uc740 \uacf3\uc778 \uac83 \uac19\uc2b5\ub2c8\ub2e4.\n* \uc774\ub984\uc740 \ubcc4 \uc758\ubbf8\uac00 \uc5c6\uc744 \uc218\ub3c4 \uc788\uc73c\ub098 \uc911\uac04\uc5d0 Mr. Miss, Mrs \ub4f1\uc774 \uc544\ub2cc master, rev, capt \ub4f1\uc774 \ub098\uc624\ub294\ub370 \uc774\ub294 \uc758\ubbf8\uac00 \uc788\uc2b5\ub2c8\ub2e4.\n* Sex\ub294 \uc911\uc694\ud569\ub2c8\ub2e4. \ubcf4\ub098\ub9c8\ub098 \uc5ec\uc131\uacfc \uc544\uc774\ub4e4\uc744 \uc6b0\uc120\uc801\uc73c\ub85c \uad6c\uba85 \ubcf4\ud2b8\uc5d0 \ud0c0\uac8c \ud588\uc744 \uac83\uc774\ubbc0\ub85c \ub0a8\uc131\uc774\uba74 \uc0ac\ub9dd \ud655\ub960\uc774 \ud6e8\uc52c \ub192\uc9c0\uc694\n* Age\ub3c4 \uc911\uc694\ud569\ub2c8\ub2e4. \uc5b4\ub9b4 \uc218\ub85d \uad6c\uba85 \ubcf4\ud2b8\uc5d0 \ud0d4\uc744 \uac00\ub2a5\uc131\uc774 \ud06c\ub2c8\uae4c\uc694\n* SibSp\ub294 \ubc30\uc6b0\uc790\ub098 \ud615\uc81c\ub4e4\uacfc \uac19\uc774 \ud0c4 \uc989, \uac00\uc871\uc758 \uc22b\uc790\ub97c \ub098\ud0c0\ub0b4\ubbc0\ub85c \uac00\uc871\uc774 \uc788\ub294 \uc0ac\ub78c\uc758 \uc0dd\uc874 \ud655\ub960\uc740 \ucef8\uc744 \uac83\uc774\ub77c \uc0ac\ub8cc \ub429\ub2c8\ub2e4.\n* Parch \ub294 \ubd80\ubaa8, \uc544\uc774\ub4e4\uc774 \uac19\uc774 \ud0c4 \uacbd\uc6b0\ub2c8\uae4c, \uc5ed\uc2dc \uc0dd\uc874 \ud655\ub960\uc774 \uc880 \ub354 \ub192\uc744 \uac83\uc774\ub77c \uc0dd\uac01\ub429\ub2c8\ub2e4.\n* Ticket\uc740 \uc5b4\ub5bb\uac8c \uc758\ubbf8\ub97c \ub450\uc5b4\uc57c \ud560\uc9c0 \uc544\uc9c1 \ud30c\uc545\uc774 \uc548 \ub429\ub2c8\ub2e4. Fare\ub098 Cabin\uacfc \uc5f0\uad00\uc774 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4.\n* Fare\ub294 \ube44\uc300 \uc218\ub85d \uc0dd\uc874 \ud655\ub960\uc774 \ub192\uc744 \uac00\ub2a5\uc131\uc774 \ud074 \uac83\uc73c\ub85c \uc0dd\uac01\ub429\ub2c8\ub2e4.\n* Cabin\ub3c4 \uc815\ud574\uc9c4 \uce90\ube48\uc5d0\uc11c\uc758 \uc0dd\uc874\ub960\uc774 \ub354 \ub192\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. NaN\uc740 Not a number\ub780 \ub73b\uc778\ub370 \uc544\ub9c8\ub3c4 \ud06c\ub8e8\uc774\uc5c8\uac70\ub098 \uc815\ud655\ud55c \ubc29 \ubc30\uc815\uc774 \uc548 \ub41c \ub2e8\uccb4\ub85c \uc790\ub294 \uc0ac\ub78c\ub4e4\uc774 \uc544\ub2c8\uc5c8\ub098\ub294 \uc0dd\uac01\uc774 \ub4e4\uae30\ub3c4 \ud569\ub2c8\ub2e4.\n* Embarked\ub294 \uc5b4\ub514\uc11c \ud0d4\ub0d0\ub294 \uc774\uc57c\uae30\uc778\ub370, \ud070 \uc694\uc778\uc740 \uc544\ub2d0 \uac83\uc774\ub77c\ub294 \uac83\uc774 \ucd5c\ucd08 \ucd94\uce21\uc774\ub098 \ud604\ub300\uc640 \ub2ec\ub9ac \ubd80\uc790 \uc0ac\ub294 \ub3d9\ub124\ubd80\ud130 \ub178\ub3d9\uc790 \uc0ac\ub294 \ub3d9\ub124\uae4c\uc9c0 \uadf8 \ub2f9\uc2dc\uc5d0\ub294 \ud655\uc5f0\ud788 \ub2ec\ub790\uc744 \uacbd\uc6b0 \uc601\ud5a5\uc774 \uc788\uc744 \uac83\uc774\ub77c \uc0dd\uac01 \ub429\ub2c8\ub2e4.\n\n#### My initial wild guesses were\n* Looking at the items, PClass seems to be the level of the room. I think 1 is for the best ones and 3 is for the humble ones.\n* The name may not mean much, like Mr. Miss, Mrs, etc., but master, rev, capt, etc. may be meaningful.\n* Sex is important. It's likely that women and children would have been put on lifeboats first, so men, more likely, had slim chances.\n* Age is also important. The younger or the older you are, the more likely you are in a lifeboat.\n* SibSp, spouses or siblings, represents the number of family members, so the chances of survival of people with families may be high.\n* Parch - Ones with parents may be more likely to survive, as parents and children ride together.\n* I don't know how to make a ticket yet. It may be related to Fare or Cabin.\n* The more expensive the Fare, the higher the chances of survival.\n* Cabin - may have a higher survival rate if you are in a given cabin. NaN means Not a number, maybe  a crew or a group with no room assignments???\n* Embarked is where you take the ship, I guess it's not a big factor, but unlike these days, it may have some impact.","a0066716":"* jitter =False\ub85c \ub193\uc73c\uba74 \ud55c\uc904\ub85c \uc815\ub9ac\ud574\uc900\ub2e4.","75268ecc":"* \uc774\ub97c \uc131\ubcc4\ub85c \ubd05\ub2c8\ub2e4.\n* View it by gender.","c526fa19":"### TASK 13    -    If Statement, Elif Statement & Else Statement\n\n\n* while if-else is this or the rest, if-elif-else gives you a variety of options.\n* You can use several elifs.\n* if\u2013else\uac00 \uc774 \uac83 \uc544\ub2c8\uba74 \ub098\uba38\uc9c0 \uacbd\uc6b0\ub77c\uba74 if-elif-else\ub294 \ub2e4\uc591\ud55c \uc635\uc158\uc744 \uc90d\ub2c8\ub2e4.  \n* elif\uc740 \uc5ec\ub7ec \uac1c\uac00 \uac00\ub2a5\ud558\ubbc0\ub85c \ub2e4\uc591\ud55c \uc870\uac74\uc744 \ud45c\ud604\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\n\n* Syntax\n\n\n\n            if condition:\n                body\n            elif condition:\n                body\n            else\n                body\n\n\n ","dc1cd1f7":"### Task 56 - Data Input\n\n#### Since we are not going to do a lot here so let's use a simple one.\n####\uc5ec\uae30\uc11c\ub294 \ub300\ub2e8\ud55c \uac83\uc744 \ud560 \uac83\uc774 \uc544\ub2c8\ub77c \uc6d0\ub9ac\ub9cc \ubc30\uc6b0\ub2c8\uae4c \uac04\ub2e8\ud55c \uac83\uc73c\ub85c \ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n","757e6793":"* Mixing two types of themes \/ catplot()\uc744 \uc0ac\uc6a9\ud558\uc5ec countplot() \uacfc FacetGrid\ub97c \ud63c\ud569\ud558\uc5ec \ubd05\ub2c8\ub2e4. \n","c029051f":"Let me just use a few columns for this seaborn practice","9899a86f":"* hue \uc640 style\uc744 \uc8fc\uc5b4 \uc880 \ubc14\uafb8\uc5b4 \ubd05\ub2c8\ub2e4.\n* Let's change it by giving hue and style.","7b634e74":"* subplot sytax \/ subplot\uc758 \ubb38\ubc95\uc744 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n      axes = plt.subplots(number of rows, number of columns, figsize=(width in inches, height in inches))\n     ","481b4159":"* \ub2e4\ub978 \ud45c\uc2dc \uc0ac\uc6a9\n* other marks","2791cbe1":"* Cabin\uc5d0 \ube44\uc5b4 \uc788\ub294 \uac83\uc774 \ub9ce\uc544 \uc774\ub97c \ub2e4\ub978 \ubd84\ub958\ub85c \uc77c\ub2e8 \uc7a1\uace0\n\uae30\uc874 \uac83\uc740 \uc774\ub2c8\uc15c\ub85c \ubd84\ub958\ud569\ub2c8\ub2e4.\n* \ube48 \uac83\uc740 X\ub85c \uad6c\ubd84\ud558\ub824\ub294\ub370 \uc774 \ub610\ud55c 1,2,3 Pclass\uc640 \uc5f0\ub3d9\ub420 \uac83 \uac19\uc73c\ub2c8 \ube44\uc5b4\uc788\uace0 1\ub4f1\uae09\uc740 X, 2\ub4f1\uae09\uc740 Y, 3\ub4f1\uae09\uc740 Z\ub85c \ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\n* There are so many empty bins in the cabin,\n* Existing ones are classified as initials.\n* I want to classify the nulls as X, but this is also reclassified by Pclasses, so there will be X, Y and Z","433ca5a2":"* pairplot\uc740 \uc22b\uc790\ub9cc\uc744 \ub370\uc774\ud130\ub85c \ubc1b\uc544\ub4e4\uc774\uae30 \ub54c\ubb38\uc5d0 \ub370\uc774\ud130\ub97c \ubc14\uafb8\uc5b4\uc57c \ud55c\ub2e4.","82e2a4cd":"### Task 72 - loop","ee24dba7":"* In Python 2.x version\n\n        place_1 = \u201cparty\u201d \n        place_2 = \u201clibrary\u201d\n        \u201cWe should not have come to this %s, and we are supposed to be at the %s.\u201d %(place_1, place_2) ","8a103558":"*\uc544\ub798 box\uc640 swarm\uc744 \ube44\uad50\ud574 \ubcf4\uc790","9f4f9835":"### TASK 08    -    Boolean Operators\n\n\n* \ub370\uc774\ud130\ub97c True \ubc0f False\ub85c \ud45c\ud604\ud574\uc57c \ud558\ub294 \uacbd\uc6b0\uac00 \uc788\uc2b5\ub2c8\ub2e4.\n* \uc774\ub294 string, numbers\uc5d0 \uc774\uc5b4\uc11c \uc138\ubc88\uc9f8\ub85c \ubc30\uc6b8 \ub370\uc774\ud130 \ud0c0\uc785\uc785\ub2c8\ub2e4.\n* Sometimes data needs to be represented as True and False.\n* This is the third data type -  booleans, strings and numbers.\n\n\n##Sytnax\n\n          a >  b     a\ub294 b\ubcf4\ub2e4 \ud07c                   \n          a < b      a\ub294 b\ubcf4\ub2e4 \uc791\uc74c\n          a == b     a\uc640 b\uc740 \uac19\ub2e4                   \n          a != b    a\uc640 b\ub294 \uac19\uc9c0 \uc54a\uc74c\n          a <= b     a\ub294 b\ubcf4\ub2e4 \uc791\uac70\ub098 \uac19\uc74c      \n          a >= b     a\ub294 b\ubcf4\ub2e4 \ud06c\uac70\ub098 \uac19\uc74c\n\n          a> b a is greater than b\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 a <b a is less than b\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 a == b a and b are equal\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 a! = b a and b are not equal\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 a <= b a is less than or equal to b\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 a> = b a is greater than or equal to b\n\n ","eaaeff5d":"* \uc5d0\ub7ec \ubc14\ub97c \uc0ac\uc6a9\ud558\uc5ec \ud3c9\uade0\uc758 \ud45c\uc900 \uc624\ucc28\ub97c \ud45c\uc2dc\n* Use the error bar to display the standard error of the mean","aa515ef7":"### Task 85 - jointplot\n\n* \ud569\ud55c \ud50c\ub86f\uc744 \uadf8\ub9ac\uae30 \uc704\ud574\uc11c\ub294 jointplot \uba85\ub839\uc744 \uc0ac\uc6a9\ud55c\ub2e4. \n* \uc544\ub798\uc640 \uac19\uc774 total_bill\uacfc tip \uc0ac\uc774\uc758 \uad00\uacc4\ub97c scatterplot\uc73c\ub85c \ud615\uc0c1\ud654 \ud55c\ub2e4.\n\n\n      sns.jointplot(x=\"total_bill\", y=\"tip\", data=tips, kind='scatter')\n\n\n* scatter\ub9d0\uace0 kernel density plot\uc73c\ub85c \ub9cc\ub4e4\uc5b4 \uc9d1\uc911\ub3c4\ub97c \ubcfc \uc218\ub3c4 \uc788\ub2e4.\n\n      sns.jointplot(x=\"total_bill\", y=\"tip\", data=tips, kind='kde')","284864df":"* \ub450\uac1c\uc758 categorical variable\uc758 \uce74\uc6b4\ud2b8\ub97c \ubcf4\uc9c0\uc694\n* hue\uc5d0\ub294 sex\ub97c \ub123\uaca0\uc2b5\ub2c8\ub2e4.","dae69799":"* Now let's do something one at a time\n* Our goal is to pick a model from the train and find out who, in the test file, is likely to survive.\n\n* \uc774\uc81c \ud558\ub098\uc529 \ud6d3\uc5b4 \ubcf4\uba70 \uc791\uc5c5\uc744 \ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* \uc6b0\ub9ac\uc758 \ubaa9\ud45c\ub294 train\uc5d0\uc11c \ubaa8\ub378\uc744 \ubf51\uc544\uc11c test\uc5d0\uc11c \ub204\uac00 \uc0b4\uc544 \ub0a8\uc558\uc744 \ud655\ub960\uc774 \ud070\uac00\ub97c \ubf51\uc544 \ub0b4\ub294 \uac83\uc785\ub2c8\ub2e4.","aead31be":"* Other Theme \/ \ub2e4\ub978 \ud14c\ub9c8\ub97c \uc0ac\uc6a9\ud574 \ubcf4\uc8e0","68d5583a":"* Check if there are missing values \n* \ud639\uc2dc \ube48\uce78\uc774 \uc5c6\ub294\uc9c0 \ubd05\ub2c8\ub2e4.","cd2c1511":"* \uc55e\uc5d0\uc11c \uc0b4\ud3b4\ubcf8 \uac83\ucc98\ub7fc Age \ud56d\ubaa9\uc5d0\ub294 ** 177 ** null \uac12\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7ec\ud55c NaN \uac12\uc744 \ub300\uccb4\ud558\uae30 \uc704\ud574 \ub370\uc774\ud130 \uc9d1\ud569\uc758 \ud3c9\uade0 \uc218\uba85\uc744 \uc9c0\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n* \uadf8\ub7ec\ub098 \ubb38\uc81c\ub294 \ud3c9\uade0 \uc5f0\ub839\uc774 29 \uc138\ub97c 4\uc138 \uc544\uc774\uc5d0\uac8c \ud560\ub2f9 \ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. \uc2b9\uac1d\uc774 \uc5b4\ub5a4 \uc5f0\ub839\ub300\uc5d0 \uc788\ub294\uc9c0 \uc54c \uc218\uc788\ub294 \ubc29\ubc95\uc774 \uc788\uc744\uae4c\uc694? \uc774\ub984\uc5d0\uc11c \ud78c\ud2b8\ub97c \ucc3e\uc544 \ubd05\ub2c8\ub2e4.\n\n* As we saw earlier, the Age item has a ** 177 ** null values. To replace these NaN values, you can specify the average age of the dataset.\n\n* But the problem is that the average age is 29 years old can not be assigned this to a kid. Is there any other way ? Look for some hints in their names.\n","2b48057f":"### TASK 25     While \/ While - Else Loop\n\n* \"while loop\" \uc740 \uc870\uac74\uc774 False \uac00 \ub420 \ub54c\uae4c\uc9c0 \ubc18\ubcf5\ud560 \ub54c \uc4f0\uc774\ub294 \ub8e8\ud504\uc785\ub2c8\ub2e4. \n* \"while loop\" is looping until the condition is False.\n\n* Syntax\n\n         while condition:\n\t\t    body\n\n\n* i -= 1 \uc740 i = i \u2013 1 \uacfc \uac19\uc740 \ub73b\uc785\ub2c8\ub2e4.\n* i -= 1 means i = i \u2013 1\n\n"}}