{"cell_type":{"d418ca79":"code","4343f49e":"code","34a7cabe":"code","89b5dae9":"code","0ebe2219":"code","d70922fc":"code","d92b253a":"code","3b02993f":"code","d138148c":"code","709694cf":"code","09baf368":"code","ae2eed7b":"code","1df9aa05":"code","34a21818":"code","0b64fa1b":"code","56d67985":"code","3088b5e0":"code","514e2823":"code","0c64d510":"code","c335d471":"code","14face9d":"code","10c80cd5":"code","975f2a1f":"code","e506a4fe":"code","da82d2aa":"code","650e0d0f":"code","95383df7":"code","f6241f09":"code","657f6322":"code","43f8a5c0":"code","6cf1778b":"code","2ae3d4be":"code","082e9592":"code","2074f4db":"code","18564b1e":"code","b1f55e8c":"code","a68b390f":"code","d2b5e0bc":"code","a1f85fc0":"code","35422ece":"markdown","41edf161":"markdown"},"source":{"d418ca79":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.experimental import enable_hist_gradient_boosting\nfrom sklearn.ensemble import (RandomForestClassifier, \n                              VotingClassifier, \n                              GradientBoostingClassifier, \n                              HistGradientBoostingClassifier)\n\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\n\nimport warnings\nwarnings.filterwarnings('ignore')","4343f49e":"df = pd.read_csv(\"..\/input\/idao-2022-bootcamp-insomnia\/TRAIN.csv\")\ndf.head()","34a7cabe":"df.shape","89b5dae9":"df.isna().sum()","0ebe2219":"df.info()","d70922fc":"## calculating BMI\n\ndef get_bmi_feature(dataframe, is_height_cm=True):\n    \n    # if height feature in centimeter\n    if is_height_cm:\n        dataframe['height'] = dataframe['height'] \/ 100\n        \n    bmi = dataframe['weight'] \/ (dataframe['height'])**2\n    dataframe.drop(['height', 'weight'], 1, inplace=True)\n    dataframe.insert(2, 'bmi', bmi)\n    \n    return dataframe","d92b253a":"df = get_bmi_feature(df)","3b02993f":"df[['age', 'bmi', 'lbp', 'ubp']].hist(bins=20, ec='k', color='orange', figsize=(15, 10), grid=False)\nplt.show()","d138148c":"## removing all instances with blood pressure higher than 300 and less than 0\n\ndf = df.loc[~((df.ubp>300)|(df.lbp>300))]\n\ndf = df.loc[~((df.lbp<0)|(df.ubp<0))]\n\ndf.drop('id', 1, inplace=True)\n\ndf.describe().T","709694cf":"def bmi_categories(x):\n    \n    if x<18.5:\n        return \"Underweight\"\n    elif x<=24.9:\n        return \"Normal\"\n    elif x<=29.9:\n        return \"Overweight\"\n    else:\n        return \"Obesity\"","09baf368":"df.bmi = df.bmi.apply(bmi_categories)","ae2eed7b":"def get_final_data(dataframe):\n\n    gender_df = pd.get_dummies(dataframe['sex'], prefix=\"gender\", drop_first=True)\n    stress_df = pd.get_dummies(dataframe['stress'], prefix=\"stress\", drop_first=True)\n    doctor_df = pd.get_dummies(dataframe['doctor'], prefix=\"doctor\", drop_first=True)\n    bmi_df = pd.get_dummies(dataframe['bmi'], prefix='bmi', drop_first=True)\n\n    new_df = pd.concat([gender_df, bmi_df, stress_df, doctor_df], axis=1)\n\n    dataframe.drop(['sex', 'bmi', 'stress', 'doctor'], 1, inplace=True)\n\n    data = pd.concat([new_df, dataframe], axis=1)\n    return data\n","1df9aa05":"df = get_final_data(df)","34a21818":"df.head()","0b64fa1b":"X, y = df.drop('insomnia', 1).values, df.insomnia.values\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=42)\n\nX_train.shape, y_train.shape","56d67985":"scaler = StandardScaler()\nscaler.fit(X_train)\n\nX_train_scaled = scaler.transform(X_train)\nX_test_scaled = scaler.transform(X_test)","3088b5e0":"def show_model_results(model):\n    model.fit(X_train_scaled, y_train)\n    print(f\"{model.__class__.__name__:*^50}\\n\")\n    print(f\"Train Acc.: {model.score(X_train_scaled, y_train)*100:.4f}%\")\n    print(f\"Test Acc.: {metrics.accuracy_score(y_test, model.predict(X_test_scaled))*100:.4f}%\")\n    print(f\"Precision: {metrics.precision_score(y_test, model.predict(X_test_scaled)):.4f}\")\n    print(f\"Recall: {metrics.recall_score(y_test, model.predict(X_test_scaled)):.4f}\")\n    print(\"\\n*****Confusion Matrix*****\")\n    print(f\"{metrics.confusion_matrix(y_test, model.predict(X_test_scaled))}\")\n\n    plt.figure(figsize=(15,5))\n    ax1 = plt.subplot(121)\n    metrics.plot_precision_recall_curve(model, X_test_scaled, y_test, ax=ax1)\n    ax1.set_title(\"Precision-Recall Curve\")\n    ax2 = plt.subplot(122)\n    metrics.plot_roc_curve(model, X_test_scaled, y_test, ax=ax2)\n    ax2.set_title(\"ROC Curve\")\n    plt.show()","514e2823":"log_reg = LogisticRegression(random_state=42)\n\nshow_model_results(log_reg)","0c64d510":"random_forest = RandomForestClassifier(random_state=10)\n\nshow_model_results(random_forest)","c335d471":"gbrt_clf = GradientBoostingClassifier(random_state=42)\n\nshow_model_results(gbrt_clf)","14face9d":"hist_clf = HistGradientBoostingClassifier(random_state=42)\n\nshow_model_results(hist_clf)","10c80cd5":"xgb_clf = XGBClassifier()\n\nshow_model_results(xgb_clf)","975f2a1f":"lgbm_clf = LGBMClassifier(random_state=42)\n\nshow_model_results(lgbm_clf)","e506a4fe":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.layers import Dense, Dropout, BatchNormalization\nfrom tensorflow.keras.models import Sequential","da82d2aa":"X_train_scaled.shape","650e0d0f":"batch_size = 64\nbuffer = 1024\n\ntrain_ds = tf.data.Dataset.from_tensor_slices((X_train_scaled, y_train))\ntrain_ds = train_ds.shuffle(buffer).batch(batch_size).prefetch(1)\n\ntest_ds = tf.data.Dataset.from_tensor_slices((X_test_scaled, y_test))\ntest_ds = test_ds.batch(batch_size)","95383df7":"model = Sequential([\n    Dense(512, input_shape=(14,)),\n    BatchNormalization(),\n    keras.layers.ELU(),\n    Dense(256),\n    BatchNormalization(),\n    keras.layers.ELU(),\n    Dense(128),\n    BatchNormalization(),\n    keras.layers.ELU(),\n    Dense(64),\n    BatchNormalization(),\n    keras.layers.ELU(),\n    Dense(1, 'sigmoid')\n])\n\nmodel.summary()","f6241f09":"model.compile(optimizer='adam', loss=\"binary_crossentropy\", metrics=['accuracy'])\n\nhistory = model.fit(train_ds, epochs=10, validation_data=test_ds)","657f6322":"test_df = pd.read_csv(\"..\/input\/idao-2022-bootcamp-insomnia\/TEST.csv\")\ntest_df.shape","43f8a5c0":"test_df.isna().sum()","6cf1778b":"test_df.fillna(0, inplace=True)","2ae3d4be":"test_df.isna().sum().sum()","082e9592":"test_df = get_bmi_feature(test_df)","2074f4db":"ids = test_df.id\n\ntest_df.drop('id', 1, inplace=True)","18564b1e":"test_df.bmi = test_df.bmi.apply(bmi_categories)","b1f55e8c":"test_df = get_final_data(test_df)","a68b390f":"test_data_scaled = scaler.transform(test_df.values)","d2b5e0bc":"predictions = hist_clf.predict_proba(test_data_scaled).max(axis=1).round(1)","a1f85fc0":"submission_df = pd.DataFrame(data={'id':ids, 'insomnia':predictions})\n\nsubmission_df.to_csv(\"submission.csv\", index=False)","35422ece":"## Submission from Histogram Gradient Model","41edf161":"## Deep Learning Model"}}