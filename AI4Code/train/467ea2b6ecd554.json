{"cell_type":{"05495816":"code","993a35b9":"code","32c2eaef":"code","66580210":"code","a6013bc0":"code","93f26566":"code","50aa823f":"code","633463f5":"code","06335f01":"code","fa9241f3":"code","579abcce":"code","470f3956":"code","4cb2bae2":"markdown","0778cc3c":"markdown","a9aa4676":"markdown","b5b08fb8":"markdown","40494d19":"markdown","7f8ade55":"markdown","e03a9599":"markdown","41722d7e":"markdown"},"source":{"05495816":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","993a35b9":"data = pd.read_csv('..\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')","32c2eaef":"pd.set_option('display.max_columns', None)\ndata.head()","66580210":"data.shape","a6013bc0":"data.describe()","93f26566":"#Distribution of the target variable\nsns.set_style('darkgrid')\nplt.figure(figsize = (6,5))\ng = sns.countplot(x = 'Churn', data = data)\ni=0\nfor p in g.patches:\n    height = p.get_height()\n    g.text(p.get_x()+p.get_width()\/2., height + 0.1,\n    '{}'.format(height),ha=\"center\")\n    i += 1\ndisplay()","50aa823f":"#Visualizing Binary columns\ncols = ['gender','SeniorCitizen','Partner','Dependents','PhoneService','PaperlessBilling']\ntotal = len(data['Churn'])\nfig, axes = plt.subplots(ncols=3, nrows=2, figsize=(19,10), dpi= 60)\naxes = axes.flatten()\nfor i, ax in zip(cols, axes):\n    g = sns.countplot(x = i, data = data, ax = ax, hue = 'Churn')\n    g.set_ylabel('Percentage')\n    for p in g.patches:\n      height = p.get_height()\n      g.text(p.get_x()+p.get_width()\/2., height + 0.1,\n      '{:1.2f}'.format(height\/total),ha=\"center\")\ndisplay()","633463f5":"#Replacing spaces with null values in total charges column\ndata['TotalCharges'] = data[\"TotalCharges\"].replace(\" \",np.nan)\n\n#Dropping null values from total charges column which contain .15% missing data \ndata = data[data[\"TotalCharges\"].notnull()]\ndata = data.reset_index()[data.columns]\n\n#convert to float type\ndata[\"TotalCharges\"] = data[\"TotalCharges\"].astype(float)\n\n#replace 'No internet service' to No for the following columns\nreplace_cols = [ 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection',\n                'TechSupport','StreamingTV', 'StreamingMovies']\nfor i in replace_cols : \n    data[i]  = data[i].replace({'No internet service' : 'No'})\n\n#replace 'No internet service' to No for MultipleLines\n    data['MultipleLines']  = data['MultipleLines'].replace({'No phone service' : 'No'})\n    \n#replace values\ndata[\"SeniorCitizen\"] = data[\"SeniorCitizen\"].replace({1:\"Yes\",0:\"No\"})","06335f01":"#Visualizing Tenure\nplt.figure(figsize = (18,4))\nsns.countplot(x = 'tenure',data = data, hue = 'Churn')\nplt.show()","fa9241f3":"from sklearn.preprocessing import LabelEncoder\n\n#Make dummy variables for catigorical variables with >2 levels\ndummy_columns = [\"MultipleLines\",\"InternetService\",\"OnlineSecurity\",\n                 \"OnlineBackup\",\"DeviceProtection\",\"TechSupport\",\n                 \"StreamingTV\",\"StreamingMovies\",\"Contract\",\n                 \"PaymentMethod\"]\n\ndf = pd.get_dummies(data, columns = dummy_columns)\n\n#Encode catigorical variables with 2 levels\nenc = LabelEncoder()\nencode_columns = [\"Churn\",\"PaperlessBilling\",\"PhoneService\",\n                  \"gender\",\"Partner\",\"Dependents\",\"SeniorCitizen\"]\n\nfor col in encode_columns:\n    df[col] = enc.fit_transform(df[col])\n    \n#Remove customer ID column\ndel df[\"customerID\"]\n\n\n#Make TotalCharges column numeric, empty strings are zeros\ndf[\"TotalCharges\"] = pd.to_numeric(df[\"TotalCharges\"],errors = 'coerce').fillna(0)","579abcce":"from sklearn.model_selection import train_test_split\n\n#Split data into x and y\ny = df[[\"Churn\"]]\nx = df.drop(\"Churn\", axis=1)\n\n#Create test and training sets\nx_train, x_test, y_train, y_test = train_test_split(x,y, test_size= .2, random_state= 1)","470f3956":"from xgboost import XGBClassifier\nfrom xgboost import plot_importance\nfrom sklearn.metrics import accuracy_score\n\n#Build XGBoost model\nmodel = XGBClassifier()\nmodel.fit(x_train, y_train.values.ravel())\n\n\n#Predictions for test data\ny_pred = model.predict(x_test)\npredictions = [round(value) for value in y_pred]\n\n#Accuracy\naccuracy = accuracy_score(y_test, predictions)\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))\n\n#Feature importance\nfig, ax = plt.subplots(figsize=(10, 8))\nplot_importance(model, ax = ax)\nplt.show()","4cb2bae2":"# Data Understanding","0778cc3c":"# Build Base Model","a9aa4676":"# Exploratory Data Analysis","b5b08fb8":"Credits: https:\/\/www.kaggle.com\/pavanraj159\/telecom-customer-churn-prediction","40494d19":"Customer churn is when a customer, user, or subscriber \u201cbreaks up\u201d with a company and stops using its product or service. Sometimes referred to as attrition, nearly all companies experience churn. In this notebook lets predict behavior to retain customers. ","7f8ade55":"Each row represents a customer, each column contains customer\u2019s attributes described on the column Metadata.\n\nThe data set includes information about:\n\nCustomers who left within the last month \u2013 the column is called Churn\nServices that each customer has signed up for \u2013 phone, multiple lines, internet, online security, online backup, device protection, tech support, and streaming TV and movies\nCustomer account information \u2013 how long they\u2019ve been a customer, contract, payment method, paperless billing, monthly charges, and total charges\nDemographic info about customers \u2013 gender, age range, and if they have partners and dependents","e03a9599":"From the above plot we can infer that Churn rate is same for both the Gender. However if you are a senior citizen then the difference between number of churned customers and unchurned customers is more or less the same. Also, If a customer doesn't have a partner then they are more likely to churn compared to a customer with a partner. Likewise, if a customer doesn't have dependents then they are more likely to churn compared to a customer with a dependent.","41722d7e":"# Data Preparation\nCredits: https:\/\/www.kaggle.com\/graeme16161\/xgboost-tuned-with-random-search"}}