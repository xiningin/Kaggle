{"cell_type":{"42452553":"code","ca152f15":"code","fc8d05d3":"code","f47eb194":"code","8b8405b6":"code","cbba3e61":"code","6b03cb95":"code","919aeb33":"code","5443acb0":"code","141e74bd":"code","4287297b":"code","4beb14ae":"code","4c6aace1":"code","4e36e282":"code","de919d21":"code","52264630":"code","336a37fe":"code","2d80af9e":"code","994d401a":"code","bacc09ae":"code","9d5ac032":"code","32b80f01":"code","a89b3f7f":"code","83752e7a":"code","1f0825fd":"code","39b8f3f9":"code","b202032e":"code","6cbca251":"code","f943d3b5":"code","ee464ec3":"code","87fb9c44":"code","7c2b71ad":"code","e42230b5":"code","7e577139":"code","0de721ca":"code","db97c5f4":"code","72b73b0c":"code","65d71421":"code","e9189e93":"code","ecafc31c":"code","33603afb":"code","3c622bbf":"code","dda3bacf":"code","87f96b57":"code","9f2474ca":"code","ce80cdf7":"code","0b68cc1a":"code","ff5ea1f8":"code","631264d1":"code","00bc8cdb":"code","1fcd134a":"code","0723b8a3":"code","abea2cab":"code","2d0c3625":"code","79c262e9":"code","90a54705":"code","707f0400":"code","c839cd94":"markdown","812c544c":"markdown","95327157":"markdown","246a9c92":"markdown"},"source":{"42452553":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","ca152f15":"data = pd.read_csv(\"..\/input\/pokemon.csv\")\ndata.head() #first 5 data.head()=data.head(5)\n","fc8d05d3":"data.tail() #last 5 ","f47eb194":"data.columns","8b8405b6":"data.shape #800 rows*12 columns","cbba3e61":"data.info() ","6b03cb95":"print(data[\"Type 1\"].value_counts(dropna = False)) #counting pokemon types with value_counts method","919aeb33":"data.describe()       #only numeric values","5443acb0":"data.boxplot(column ='Attack' ,by = 'Legendary' ) #boxplot shows outlier, median,Q3,Q1\n","141e74bd":"data_new = data.head(5)\ndata_new","4287297b":"melted =pd.melt(frame=data_new ,id_vars =\"Name\",value_vars=[\"Attack\",\"Defense\"])  #frame=what data we want melt\nmelted","4beb14ae":"melted.pivot(index=\"Name\",columns=\"variable\",values=\"value\")  #pivoting data= reverse of melting","4c6aace1":"data1 = data.head()\ndata2 = data.tail()\nconc_data_row = pd.concat([data1,data2],axis = 0 ,ignore_index=True) #concatenating data=add data to data\nconc_data_row\n\n","4e36e282":"data1 = data['Attack'].head()\ndata2= data['Defense'].head()\nconc_data_col = pd.concat([data1,data2],axis =1) \nconc_data_col","de919d21":"data.dtypes","52264630":"data[\"Speed\"] = data[\"Speed\"].astype(\"float\")\ndata.dtypes","336a37fe":"data.info()","2d80af9e":"data[\"Type 2\"].value_counts(dropna=False) #dropna false= show me nan","994d401a":"data1=data\ndata1[\"Type 2\"].dropna(inplace=True)","bacc09ae":"assert data[\"Type 2\"].notnull().all()  ","9d5ac032":"country =[\"Spain\",\"France\"] #list1\npopulation =[\"11\",\"12\"]     #list2\nlist_label=[\"country\",\"population\"]\nlist_col= [country,population]\nzipped = list(zip(list_label,list_col)) #list1 add to list2 and create zipped\ndata_dict=dict(zipped) #convert to dictionary\ndf =pd.DataFrame(data_dict) \ndf","32b80f01":"df[\"capital\"] =[\"madrid\",\"paris\"]  #we added new column\ndf","a89b3f7f":"df[\"income\"] = 0\ndf","83752e7a":"data1 =data.loc[:,[\"Attack\",\"Defense\",\"Speed\"] ]\ndata1.plot()","1f0825fd":"data1.plot(subplots =True)\n","39b8f3f9":"data1.plot(kind= \"scatter\",x=\"Attack\", y=\"Defense\")","b202032e":"data1.plot(kind=\"hist\", y=\"Defense\", bins = 50, range=(0,250), normed=True)\n","6cbca251":"data.describe() ","f943d3b5":"time_list= [\"1992-03-08\",\"1992-04-12\"]\nprint(type(time_list[1]))\ndatetime_object = pd.to_datetime(time_list)\nprint(type(datetime_object))","ee464ec3":"date2 =data.head()\ndate_list =[\"1992-01-10\",\"1992-02-10\",\"1992-03-10\",\"1993-03-15\",\"1993-03-16\" ]\ndatetime_object = pd.to_datetime(date_list)\ndate2[\"date\"]=datetime_object                                      #time series data\ndate2=date2.set_index(\"date\")\ndate2","87fb9c44":"date2.loc[ \"1992-02-10\": \"1993-03-15\"]","7c2b71ad":"#??\ndata2.resample[\"M\"].mean()\ndata2.resample(\"M\").first().interpolate(\"linear\")\n","e42230b5":"data = pd.read_csv('..\/input\/pokemon.csv')\ndata = data.set_index(\"#\") #index start with 1\ndata.head()","7e577139":"data[\"HP\"][1]     ","0de721ca":"data.HP[1]","db97c5f4":"data.loc[1,[\"HP\"]]","72b73b0c":"data.head()[[\"Attack\",\"Defense\"]]","65d71421":"print(type(data[\"HP\"]))   #series\nprint(type(data[[\"HP\"]])) #data frame","e9189e93":"data.loc[1:10,\"HP\":\"Defense\"]  #slicing","ecafc31c":"data.loc[10:1:-1, \"HP\":\"Defense\"]   #reverse slicing","33603afb":"data.loc[1:10,\"Speed\":]   #from speed to end","3c622bbf":"boolean =data.HP>200\ndata[boolean]","dda3bacf":"first_filter = data.HP >150\nsecond_filter = data.Speed > 50\ndata[first_filter & second_filter]","87f96b57":"data.HP[data.Speed>150]","9f2474ca":"def div(n):\n    return n\/2\ndata.head().HP.apply(div)","ce80cdf7":"data[\"total_power\"] = data.Attack +data.Defense\ndata.head()","0b68cc1a":"datax = data.set_index[\"Type 1\",\"Type 2\"]\ndatax.head()","ff5ea1f8":"dict ={ \"treatment\":[\"A\",\"A\",\"B\",\"B\"] ,\"gender\":[\"F\",\"M\",\"F\",\"M\"] ,\"response\":[\"10\",\"45\",\"5\",\"9\"],\"age\" :[\"15\",\"4\",\"72\",\"25\"]}\ndf =pd.DataFrame(dict)\ndf","631264d1":"df.pivot(index=\"treatment\",columns=\"gender\",values=\"response\")     #pivoting data","00bc8cdb":"df1 =df.set_index([\"treatment\",\"gender\"])        #level0= treatment  ,level1= gender\ndf1","1fcd134a":"df1.unstack(level=0)","0723b8a3":"df1.unstack(level=1)","abea2cab":"df2 = df1.swaplevel(0,1)\ndf2                        # change inner and outer level index position","2d0c3625":"df\n","79c262e9":"pd.melt(df, id_vars=\"treatment\",value_vars=[\"age\",\"response\"])\n","90a54705":"df.groupby(\"treatment\").min()","707f0400":"df.groupby(\"treatment\")[[\"age\",\"response\"]].min()","c839cd94":"386 pokemons don't have type 2 info. in this data.","812c544c":"5 Basic data types :  object(str), boolean, int, float, categorical.","95327157":"Outlier are very high or low value from data. (O =Q1-1.5(Q3-Q1) )\nQ3 = 75%\nQ1 = 25%\nMedian = 50%\n","246a9c92":"**EDA:Explotary Data Analysis**"}}