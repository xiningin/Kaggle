{"cell_type":{"311b76a5":"code","f442ea49":"code","bf1ccff7":"code","78d2dfe9":"code","6b253563":"code","a5aabd14":"code","ab4963bf":"code","3e91d3a9":"code","8bfbbf46":"code","9f48efb7":"code","7ca480cc":"code","e637dc93":"code","3790bcc8":"code","5899557a":"code","a87be4f3":"code","0a5e0e34":"code","71c080fa":"code","2ba0bcfb":"code","24d5e9a2":"code","5e84d399":"code","080f1fce":"code","ae1c39f3":"code","fcb36ec6":"code","56984ef2":"code","734c49a9":"code","69c32544":"code","96694bba":"code","b4491b34":"code","6f620e47":"code","dd703cca":"code","49bbb4ce":"code","1adfece8":"markdown","b5048cf6":"markdown","5b05f005":"markdown","16010886":"markdown","961cd6c9":"markdown","f688d728":"markdown","6d565455":"markdown","c76b125c":"markdown","9fb74460":"markdown","e20653db":"markdown","5cff4964":"markdown","d7fe3ebe":"markdown","6e830f31":"markdown","9d1e550d":"markdown"},"source":{"311b76a5":"# \ubaa8\ub4c8 \ubd88\ub7ec\uc624\uae30\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","f442ea49":"# Pandas \ubaa8\ub4c8\ub85c \ud30c\uc77c \uc77d\uc5b4\uc624\uae30\npath = '\/kaggle\/input\/kakr-4th-competition\/' # input data \uacbd\ub85c\ntrain = pd.read_csv(path + 'train.csv')\ntest = pd.read_csv(path + 'test.csv')\nsubmission_sample = pd.read_csv(path + 'sample_submission.csv')","bf1ccff7":"# \ubcc4\ub3c4 \ubcc0\uc218\ub85c copy\ntrain_csv = train.copy()\ntest_csv = test.copy()\nsubmission_csv = submission_sample.copy()","78d2dfe9":"# \ub370\uc774\ud130 column \ud655\uc778\ntrain_csv.info()","6b253563":"# data \ud655\uc778\nprint(train_csv.head(10))","a5aabd14":"# Null data Check\nimport missingno as msno # null \ub370\uc774\ud130 \ud655\uc778 \ub77c\uc774\ube0c\ub7ec\ub9ac\n# https:\/\/github.com\/ResidentMario\/missingno\nmsno.matrix(train)","ab4963bf":"# id\ub294 index\uc640 \ub3d9\uc77c\ud558\uac8c \uae30\ub2a5\ud558\ubbc0\ub85c \uc77c\ub2e8 \uc81c\uac70\ndel train_csv['id']\ndel test_csv['id']","3e91d3a9":"print(train['education'].value_counts())\nprint(train['education_num'].value_counts())","8bfbbf46":"train_csv[['workclass','marital_status', 'occupation', 'relationship', 'race', 'sex', 'native_country', 'income']]","9f48efb7":"# income\uc740 >50K \uc544\ub2c8\uba74 <=50K\ub450\uac00\uc9c0\ub85c \uac08\ub9ac\ub2c8 1\/0\uc73c\ub85c mapping\ntrain_csv['income'] = train_csv['income'].map(lambda x : int(x == '>50K'))","7ca480cc":"# \ubc94\uc8fc\ud615 \ub370\uc774\ud130 \ubd84\uc11d\nprint(train_csv['workclass'].value_counts(), '\\n\\n')\nprint(train_csv['marital_status'].value_counts(), '\\n\\n')\nprint(train_csv['occupation'].value_counts(), '\\n\\n')\nprint(train_csv['relationship'].value_counts(), '\\n\\n')\nprint(train_csv['race'].value_counts(), '\\n\\n')\nprint(train_csv['native_country'].value_counts(), '\\n\\n')\nprint(train_csv['sex'].value_counts(), '\\n\\n')","e637dc93":"plt.figure(figsize = (25, 30))\nplt.subplot(7, 1, 1)\nsns.violinplot(data = train_csv, x = 'workclass', y = 'income').set_title('workclass vs income')\nplt.subplot(7, 1, 2)\nsns.violinplot(data = train_csv, x = 'marital_status', y = 'income').set_title('marital_status vs income')\nplt.subplot(7, 1, 3)\nsns.violinplot(data = train_csv, x = 'occupation', y = 'income').set_title('occupation vs income')\nplt.subplot(7, 1, 4)\nsns.violinplot(data = train_csv, x = 'relationship', y = 'income').set_title('relationship vs income')\nplt.subplot(7, 1, 5)\nsns.violinplot(data = train_csv, x = 'race', y = 'income').set_title('race vs income')\nplt.subplot(7, 1, 6)\nsns.violinplot(data = train_csv, x = 'sex', y = 'income').set_title('sex vs income')\nplt.subplot(7, 1, 7)\nsns.violinplot(data = train_csv, x = 'native_country', y = 'income').set_title('native_country vs income')\n#'workclass','marital_status', 'occupation', 'relationship', 'race', 'sex', 'native_country', 'income'","3790bcc8":"train_csv[['age', 'fnlwgt', 'education_num','capital_loss','capital_gain','hours_per_week', 'income']]","5899557a":"plt.figure(figsize = (25, 5))\nplt.subplot(1, 2, 1)\nsns.boxplot(data = train_csv, y = 'capital_gain', x = 'income')\nplt.subplot(1, 2, 2)\nsns.boxplot(data = train_csv, y = 'capital_loss', x = 'income')","a87be4f3":"print(train_csv['capital_gain'].describe(percentiles = [.97]), '\\n\\n')\nprint(train_csv['capital_loss'].describe(percentiles = [.9]))","0a5e0e34":"# \uc0c1\uad00\uacc4\uc218 \ube44\uad50\n\ncorr = train_csv.corr()\ncorr.style.background_gradient()\ncorr[['income']].style.background_gradient()\n# \uba54\uc18c\ub4dc \uc801\uc6a9\uc2dc \ub300\uad04\ud638 \ub450\uac1c\ub85c","71c080fa":"sns.boxplot(data = train_csv, x = 'income', y = 'fnlwgt')","2ba0bcfb":"# fnlwgt\uc758 \uacbd\uc6b0 \uc0dd\uac01\ubcf4\ub2e4 \uc720\uc758\ubbf8\ud55c \uac12 \ucc28\uc774\ub97c \uc8fc\uc9c0 \ubabb\ud558\ub294 \uac83\uc73c\ub85c \ubcf4\uc784. \uc81c\uac70\ud574\ubcf4\uae30\ub85c\ndel train_csv['fnlwgt']\ndel test_csv['fnlwgt']","24d5e9a2":"train_csv","5e84d399":"# education_num\ub9cc \ud65c\uc6a9\ud558\ub294 \uacbd\uc6b0\ndel train_csv['education']\ndel test_csv['education']","080f1fce":"# education\ub9cc \ud65c\uc6a9\ud558\ub294 \uacbd\uc6b0\n#del train_csv['education_num']\n#del test_csv['education_num']","ae1c39f3":"# \uacb0\uce21\uce58 - workclass, occupation, native_country\n# \uc21c\uc11c\ub300\ub85c \uc804\uccb4\uc758 \uc57d 5%, 5%, 1% \uc218\uc900\uc774\ubbc0\ub85c \ubc30\uc6e0\ub358 \ub300\ub85c \ucd5c\ube48\uac12\uc73c\ub85c \ubab0\uc544\uc8fc\uae30\ub85c\nnan_column = ['workclass', 'occupation', 'native_country']\nfor c in nan_column:\n    train_csv.loc[train_csv[c] == '?', c] = train_csv[c].mode()[0]\n    test_csv.loc[test_csv[c] == '?', c] = test_csv[c].mode()[0]","fcb36ec6":"# capital outlier \ucc98\ub9ac\ntrain_csv['capital_gain'] = train_csv['capital_gain'].map(lambda x : 8000 if x > 8000 else x)\ntrain_csv['capital_loss'] = train_csv['capital_loss'].map(lambda x : 2000 if x > 2000 else x)\n\ntest_csv['capital_gain'] = test_csv['capital_gain'].map(lambda x : 8000 if x > 8000 else x)\ntest_csv['capital_loss'] = test_csv['capital_loss'].map(lambda x : 2000 if x > 2000 else x)","56984ef2":"# \uc218\uce58\ud615 \ubcc0\uc218 scaling\n# age, education_num, capital_gain, capital_loss, hours_per_week\nfrom sklearn.preprocessing import StandardScaler\n\nnum_columns = ['age', 'education_num', 'capital_gain', 'capital_loss', 'hours_per_week']\n#num_columns = ['age', 'capital_gain', 'capital_loss', 'hours_per_week']\n\nscaler = StandardScaler()\ntrain_csv[num_columns] = scaler.fit_transform(train_csv[num_columns])\ntest_csv[num_columns] = scaler.fit_transform(test_csv[num_columns])","734c49a9":"# onehot encoding : 'workclass','marital_status', 'occupation', 'relationship', 'race', 'sex' + 'education'\n# label encoding : 'native country'\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder\n\nOHE = OneHotEncoder(sparse = False)\nLE = LabelEncoder()\n\ncategory_columns = ['workclass','marital_status', 'occupation', 'relationship', 'race', 'sex']\n#category_columns = ['workclass','marital_status', 'occupation', 'relationship', 'race', 'sex', 'education']\n\nOHE.fit(train_csv[category_columns])\ntemp_column = list()\n\nfor c in OHE.categories_:\n    temp_column += c.tolist()\n\nnew_train_csv = pd.DataFrame(OHE.transform(train_csv[category_columns]),\n                             columns = temp_column)\n\ntrain_csv = pd.concat([train_csv, new_train_csv], axis = 1)\ntrain_csv = train_csv.drop(columns = category_columns)\nworkclass_to_label = dict(zip(train_csv['native_country'].unique(), list(range(len(train_csv['native_country'].unique())))))\ntrain_csv['native_country'] = train_csv['native_country'].map(workclass_to_label)\ntrain_csv[['native_country']] = scaler.fit_transform(train_csv[['native_country']])","69c32544":"OHE.fit(test_csv[category_columns])\ntemp_column = list()\n\nfor c in OHE.categories_:\n    temp_column += c.tolist()\n\nnew_test_csv = pd.DataFrame(OHE.transform(test_csv[category_columns]),\n                             columns = temp_column)\n\ntest_csv = pd.concat([test_csv, new_test_csv], axis = 1)\ntest_csv = test_csv.drop(columns = category_columns)\nworkclass_to_label = dict(zip(test_csv['native_country'].unique(), list(range(len(test_csv['native_country'].unique())))))\ntest_csv['native_country'] = test_csv['native_country'].map(workclass_to_label)\ntest_csv[['native_country']] = scaler.fit_transform(test_csv[['native_country']])","96694bba":"# income \ubcc4\ub3c4\ub85c \ud560\ub2f9\nlabel = train_csv['income']\ndel train_csv['income']","b4491b34":"# \ubaa8\ub378 \uc0dd\uc131\nfrom lightgbm import LGBMClassifier\n# \uc774\ubc88 \ub300\ud68c\uc758 valuation : f1_score\ubc29\uc2dd\nfrom sklearn.metrics import f1_score\n# KFold : \ub370\uc774\ud130\ub97c \ub3d9\uc77c \ube44\uc728\ub85c \ub098\ub214\n# StratifiedKFold : \ub370\uc774\ud130\ub97c \ud074\ub798\uc2a4 \ube44\uc728\uc5d0 \ub9de\ucd94\uc5b4 \ub098\ub214\nfrom sklearn.model_selection import KFold, StratifiedKFold\n\nn_split = 5\nskf = StratifiedKFold(n_splits = n_split, shuffle = True)","6f620e47":"LGBMClassifier.fit?","dd703cca":"score = list()\noof_pred = np.zeros((test_csv.shape[0], )) # data \ud589 \uac1c\uc218\n\nfor i, (train_idx, val_idx) in enumerate(skf.split(train_csv, label)): # dataset\uc744 Stratified K-Fold \ubd84\ud560\n    # i : iteration\n    # train_idx, val_idx : skf.split\uc73c\ub85c \ubc18\ud658\ub41c fold data index\n    x_train, y_train = train_csv.iloc[train_idx, :], label[train_idx]\n    x_valid, y_valid = train_csv.iloc[val_idx, :], label[val_idx]\n    \n    # \ubaa8\ub378 \uc815\uc758\n    clf = LGBMClassifier(device = 'gpu',\n                        learning_rate = 0.01,\n                        n_estimators = 1000)\n    \n    # \ubaa8\ub378 \ud559\uc2b5\n    clf.fit(x_train, y_train,\n            eval_set = [[x_valid, y_valid]], \n            eval_metric = 'logloss',        \n            early_stopping_rounds = 1000,\n            verbose = 1000,)\n\n    # \ud6c8\ub828, \uac80\uc99d \ub370\uc774\ud130 Log Loss \ud655\uc778\n    train_f1_score = f1_score(y_train, clf.predict(x_train), average='micro')\n    val_f1_score = f1_score(y_valid, clf.predict(x_valid), average='micro')\n    print('{} Fold, train f1_score : {:.4f}4, validation f1_score : {:.4f}\\n'.format(i, train_f1_score, val_f1_score))\n    \n    score.append(val_f1_score)\n    \n    # out of fold \uc559\uc0c1\ube14 \uad6c\ud604\n    # \uc804\uccb4 \ud655\ub960\uc758 mean\uac12 \uacc4\uc0b0\uc744 \uc704\ud574 split\uc73c\ub85c \ub098\ub208 \ud6c4 \ud569\uc0b0\n    # predict_proba\uc5d0\ub294 0 \ud639\uc740 1\uc774 \uc800\uc7a5 - 1\ubc88 column\uac12\uc73c\ub85c '\ucc38'\uc778 \uacbd\uc6b0\ub97c \ucd94\ucd9c\ud574\ub0c4\n    oof_pred += clf.predict_proba(test_csv)[:, 1] \/ n_split\n     \n# \uad50\ucc28 \uac80\uc99d F1 Score \ud3c9\uade0 \uacc4\uc0b0\ud558\uae30\nprint('Cross Validation Score : {:.4f}'.format(np.mean(score)))","49bbb4ce":"submit = pd.read_csv(\"\/kaggle\/input\/kakr-4th-competition\/sample_submission.csv\")\nsubmit.loc[:, 'prediction'] = (oof_pred > 0.5).astype(int)\nsubmit.head()\nsubmit.to_csv('submission.csv', index=False)","1adfece8":"# \ud30c\uc77c \uc81c\ucd9c","b5048cf6":"# \ubaa8\ub378 \ub9cc\ub4e4\uae30","5b05f005":"# \ubb38\uc790\ud615 \ub370\uc774\ud130 \ubd84\uc11d","16010886":"- \uc815\uc218\ud615 \ub370\uc774\ud130\n    - id, age, fnlwgt, education_num, capital_gain, capal_loss, hours_per_week\n- \ubb38\uc790\uc5f4 \ub370\uc774\ud130\n    - workclass, education, marital_status, occupation, relationship, race, sex, native_country, income","961cd6c9":"|education||education_num||\n|:--|:--|:--|:--|\n|HS-grad       |  8433|9    | 8433|\n|Some-college  |  5800|10    |5800|\n|Bachelors     |  4344|13   | 4344|\n|Masters       |  1378|14   | 1378|\n|Assoc-voc     |  1096|11   | 1096|\n|11th          |   922|7    |  922|\n|Assoc-acdm    |   842|12   |  842|\n|10th          |   731|6    |  731|\n|7th-8th       |   505|4    |  505|\n|Prof-school   |   466|15   |  466|\n|9th           |   418|5    |  418|\n|12th          |   359|8    |  359|\n|Doctorate     |   316|16   |  316|\n|5th-6th       |   265|3     | 265|\n|1st-4th       |   134|2     | 134|\n|Preschool     |    40|1     |  40|\n\n- education \/ education_num\uc758 \uac1c\uc218 \ubd84\ud3ec\ub294 \uc644\ubcbd\ud788 \uc77c\uce58 (\ud559\ub825 \uc21c\uc73c\ub85c number \uc21c\uc11c\uac00 \ubd84\ud3ec\ub418\uc5c8\uc74c\uc744 \ud655\uc778 \uac00\ub2a5\n- \uc55e\uc758 \ub370\uc774\ud130\ub97c One hot encoding\ud560 \uc218\ub3c4 \uc788\uace0, \ub4a4\uc758 \ub370\uc774\ud130\ub85c label encoding\ud55c \ud6a8\uacfc\ub97c \uc5bb\uc744 \uc218\ub3c4 \uc788\uc744 \uac83\uc73c\ub85c \ubcf4\uc784","f688d728":"- capital \uad00\ub828 \uac12\ub4e4\uc740 0\ubc16\uc5d0 \uc548\ubcf4\uc774\ub294 \ud76c\ud55c\ud55c \uc0c1\ud0dc...","6d565455":"# \ub370\uc774\ud130 \uc804\ucc98\ub9ac","c76b125c":"# Null data Check","9fb74460":"- \ub300\uccb4\ub85c \ubb38\uc790\uc5f4 feature\ub97c \ubcf4\uba74 \ubd84\ud3ec \ubcc0\ud654\ub294 \ub098\ub984 \ube44\uc2b7\ud55c \ud3b8 (under 50K > 50K \ub85c \ub098\ud0c0\ub098\ub294 \ud3b8)\n- \uc758\uc678\ub85c \uc778\uc885\uc774 \ud06c\uac8c \uc601\ud5a5\uc744 \uc8fc\uc9c0\ub294 \uc54a\ub294 \uac83\uc73c\ub85c \ubcf4\uc778\ub2e4(under - over \ube44\uc911\uc774 \ube44\uc2b7\ud558\uac8c \ub098\ud0c0\ub0a8)\n- native country\uc758 \uc601\ud5a5\uc774 \ub2e4\uc18c \uc788\ub294 \uac83\uc73c\ub85c \ubcf4\uc774\ub294\ub370, \ubb38\uc81c\ub294 feature\ub2f9 \uc22b\uc790\uac00 \ub108\ubb34 \uc801\uac8c \ub098\ud0c0\ub0a8. \uc774\ub4e4\uc740 label encoding\uc744 \ud558\ub294 \uac83\uc774 \ub098\uc744 \ub4ef","e20653db":"# \uc22b\uc790\ud615 \ub370\uc774\ud130 \ubd84\uc11d","5cff4964":"- capital vs income \uadf8\ub798\ud504\ub97c \ube44\uad50\ud574\ubcf4\ub2c8 \uc0dd\uac01\ubcf4\ub2e4 \uadf9\ub2e8\uc801\uc73c\ub85c \uac08\ub9ac\ub294 \ub4ef\ud558\uc9c0\ub294 \uc54a\ub2e4.\n- outlier\uc758 \uacbd\uc6b0 \uc218\uac00 \ub9e4\uc6b0 \uc801\ub2e4 \ubcf4\ub2c8 \uacb0\uacfc\uc5d0 \uc720\uc758\ubbf8\ud55c \uc601\ud5a5\uc744 \uc8fc\ub294 \uac83 \uac19\uc9c0\ub294 \uc54a\uc74c...\n- describe\ub85c \ubcf8 \uacb0\uacfc capital_gain\uc758 \uacbd\uc6b0 97%\uac00 \uc57d 8000 \uc774\ub0b4, loss\uc758 \uacbd\uc6b0 \uc57d 2000 \uc774\ub0b4\ub85c \ub4e4\uc5b4\uc624\ub294 \uac83\uc744 \ubcfc \uc218 \uc788\ub2e4.\n- \uc774 \uc774\uc0c1\uc740 \uadf8\ub0e5 outlier\ub85c \ucc98\ub9ac\ud574\uc11c \ucd5c\ub300\uac12\uc73c\ub85c \ubc14\uafd4\ubc84\ub9ac\uae30\ub85c...","d7fe3ebe":"# \uad6c\uc131\uc694\uc18c \ubd84\uc11d","6e830f31":"- \uc131\uc740 \ub0a8\/\ub140\ub85c \ud655\uc2e4\ud788 \uac08\ub9ac\ub2c8 One Hot Encoding\uc744 \uc801\uc6a9\ud558\ub294\uac8c \ub354 \ub098\uc744\ub4ef.","9d1e550d":"- fnlwgt\ub294 \ud2b9\uc774\ud558\uac8c \ub2e4\ub978 \uc218\uce58\ud615 \ub370\uc774\ud130 \ub300\ube44 \ub9e4\uc6b0 \ub0ae\uc740 \uc0c1\uad00\uacc4\uc218\ub97c \ubcf4\uc774\ub294 \uac83\uc744 \ubcfc \uc218 \uc788\uc74c."}}