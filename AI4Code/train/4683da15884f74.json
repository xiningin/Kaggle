{"cell_type":{"07bc6387":"code","7cb0d344":"code","a94afe77":"code","d9585ba3":"code","81346125":"code","d988dd80":"code","b18b9bbd":"code","176191b9":"code","d01d082f":"code","ecd9df54":"code","34850d3d":"code","9c3ed0a9":"code","a2fe2b9e":"code","b86a05c2":"code","65170aad":"code","025377a2":"code","37fe7bff":"code","cd0bf2e7":"markdown","792b89de":"markdown","c4caa8dd":"markdown","0344a3a3":"markdown","868b96a5":"markdown","cd57e390":"markdown","106770ad":"markdown","731af158":"markdown","bffe8a32":"markdown"},"source":{"07bc6387":"import time\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom mlxtend.preprocessing import TransactionEncoder\nfrom mlxtend.frequent_patterns import apriori, association_rules, fpgrowth","7cb0d344":"# Load the dataset\ngroceries = pd.read_csv(\"..\/input\/groceries-dataset\/Groceries_dataset.csv\")","a94afe77":"groceries.shape","d9585ba3":"groceries.head()","81346125":"# Get all the transactions as a list of lists\nall_transactions = [transaction[1]['itemDescription'].tolist() for transaction in list(groceries.groupby(['Member_number', 'Date']))]","d988dd80":"# First 21st transactions in the transactional dataset\nlen(all_transactions)","b18b9bbd":"# Look at the 10 first transactions\nall_transactions[0:10]","176191b9":"# The following instructions transform the dataset into the required format \ntrans_encoder = TransactionEncoder() # Instanciate the encoder\ntrans_encoder_matrix = trans_encoder.fit(all_transactions).transform(all_transactions)\ntrans_encoder_matrix = pd.DataFrame(trans_encoder_matrix, columns=trans_encoder.columns_)","d01d082f":"trans_encoder_matrix.head()","ecd9df54":"frequent_itemsets = fpgrowth(trans_encoder_matrix, min_support=0.001, use_colnames=True)","34850d3d":"frequent_itemsets","9c3ed0a9":"rules = association_rules(frequent_itemsets, metric='confidence', min_threshold=0.02)","a2fe2b9e":"rules","b86a05c2":"def perform_rule_calculation(transact_items_matrix, rule_type=\"fpgrowth\", min_support=0.001):\n    \n    start_time = 0\n    total_execution = 0\n    \n    if(not rule_type==\"fpgrowth\"):\n        start_time = time.time()\n        rule_items = apriori(transact_items_matrix, \n                       min_support=min_support, \n                       use_colnames=True, low_memory=True)\n        total_execution = time.time() - start_time\n        print(\"Computed Apriori!\")\n        \n    else:\n        start_time = time.time()\n        rule_items = fpgrowth(transact_items_matrix, \n                       min_support=min_support, \n                       use_colnames=True)\n        total_execution = time.time() - start_time\n        print(\"Computed Fp Growth!\")\n    \n    return total_execution\n","65170aad":"n_range = range(1, 10, 1)\nlist_time_ap = []\nlist_time_fp = []\nfor n in n_range:\n    time_ap = 0\n    time_fp = 0\n    min_sup = float(n\/100)\n    time_ap = perform_rule_calculation(trans_encoder_matrix, rule_type=\"fpgrowth\", min_support=min_sup)\n    time_fp = perform_rule_calculation(trans_encoder_matrix, rule_type=\"aprior\", min_support=min_sup)\n    list_time_ap.append(time_ap)\n    list_time_fp.append(time_fp)","025377a2":"list_time_ap","37fe7bff":"import matplotlib.pyplot as plt\n\nplt.plot(n_range, list_time_ap, label='Apriori', color='green')\nplt.plot(n_range, list_time_fp, label='Fp_growth', color='red')\nplt.xlabel(\"Support (%)\")\nplt.ylabel(\"Run Time (seconds)\")\nplt.legend(loc=\"best\")\nplt.show()\n","cd0bf2e7":"**Generate Rules**","792b89de":"**Find Frequent itemsets**","c4caa8dd":"# Data Preparation","0344a3a3":"### Helper Functions","868b96a5":"### Useful Libraries","cd57e390":"* **support** tells how popular an item is based on the proportion of all transactions that are included. The popularity is met if it corresponds to the user-specified support thresold. For instance, a support threshold set to 0.2 (20%) means that the user wants all the items that occur together in at least 20% of all transactions.  \n* A High support thresold does not give much more item combination, so reducing the value might be helpful to see much more item combinations for marketing purpose.","106770ad":"**Compare Apriori vs Fp_growth**","731af158":"We need to transform the data into the following format, which is suitable to perform our association rules.  \n![image.png](attachment:image.png)","bffe8a32":"The Ones and Zeros in the matrix are boolean values, they could also be respectively replaced by True and False, where: \n* **True** means that the item exists in the transaction   \n* **False** means it does not  "}}