{"cell_type":{"165320d0":"code","e24d9b6e":"code","350126db":"code","23d5b8fd":"code","888e27eb":"code","34d8b8a3":"code","899941fb":"code","ff9db621":"code","435299f9":"markdown","a15e3c75":"markdown","5839f448":"markdown"},"source":{"165320d0":"import os\nimport cv2\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nfrom sklearn.cluster import KMeans","e24d9b6e":"img_path = '..\/input\/sample-image\/57583_000082_Sideline_Moment.jpg' \n\n# label player bbox manually: (xmin, ymin, xmax, ymax, class)\nbbox_list = [\n(157,289,190,367,'person_home'),\n(545,80,589,147,'person_home'),\n(439,278,478,322,'person_home'),\n(423,303,460,341,'person_home'),\n(384,311,421,352,'person_home'),\n(427,328,470,380,'person_home'),\n(388,352,426,400,'person_home'),\n(373,374,407,424,'person_home'),\n(325,388,362,427,'person_home'),\n(311,409,350,471,'person_home'),\n(330,418,381,493,'person_home'),\n(635,90,671,152,'person_visit'),\n(511,268,570,320,'person_visit'),\n(500,303,552,356,'person_visit'),\n(465,338,521,398,'person_visit'),\n(440,398,501,461,'person_visit'),\n(523,408,569,486,'person_visit'),\n(568,469,611,555,'person_visit'),\n(627,400,651,478,'person_visit'),\n(612,372,653,435,'person_visit'),\n(642,322,683,392,'person_visit'),\n(953,357,984,433,'person_visit'),\n]\n\n# turn a list of tuple to dataframe\nbbox_df = pd.DataFrame({'xmin':[bbox_list[i][0] for i in range(len(bbox_list))],\n'ymin':[bbox_list[i][1] for i in range(len(bbox_list))],\n'xmax':[bbox_list[i][2] for i in range(len(bbox_list))],\n'ymax':[bbox_list[i][3] for i in range(len(bbox_list))],\n'class':[bbox_list[i][4] for i in range(len(bbox_list))],\n})\n\nbbox_df","350126db":"def visualize_img_with_bbox(bbox_df, img_path):\n    fig = plt.figure(figsize=(15,100))\n    img = cv2.imread(img_path)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    font = cv2.FONT_HERSHEY_SIMPLEX\n    for i in range(len(bbox_df)):\n        xmin = bbox_df.iloc[i,0]\n        ymin = bbox_df.iloc[i,1]\n        xmax = bbox_df.iloc[i,2]\n        ymax = bbox_df.iloc[i,3]\n        cls = bbox_df.iloc[i,4]\n        cv2.rectangle(img, (xmin, ymin), (xmax, ymax), (255,0,0), 3)\n        cv2.putText(img, cls,(xmin + 2, ymin - 2), font, 0.5, (0,0,255), 2)\n    plt.axis('off')\n    plt.imshow(img)\n    plt.show()\n    \n# visualize the image with labeled bboxes\nvisualize_img_with_bbox(bbox_df, img_path)","23d5b8fd":"def anno_player_boxes(bbox_df, img_path):\n    img = cv2.imread(img_path)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    frame_list = []\n    for i in range(len(bbox_df)):\n        xmin = bbox_df.iloc[i,0]\n        ymin = bbox_df.iloc[i,1]\n        xmax = bbox_df.iloc[i,2]\n        ymax = bbox_df.iloc[i,3]\n        cls = bbox_df.iloc[i,4]\n        box = img[ymin: ymax, xmin: xmax]\n        box = cv2.resize(box, (40, 40))\n        frame_list.append(box)\n    return frame_list\n\n# cut out the player bbox\nframe_list = anno_player_boxes(bbox_df, img_path)\n\n# visualize\nplt.figure(figsize=(20, 18))\nfor i in range(len(frame_list)):\n    plt.subplot(int(len(frame_list)\/2), 11, i+1)\n    plt.imshow(frame_list[i])\n    plt.title('{}:{}'.format(bbox_list[i][4], i))\n    plt.axis('off')\nplt.show()","888e27eb":"def calculate(image, mask, hist_bin):\n    '''Compute the percentage of the color histogram along the given channel'''\n    hist = cv2.calcHist([image], [0], mask.astype(np.uint8), [hist_bin], [0.0, 255.0])\n    hist = hist.flatten()\n    return hist\/np.sum(hist)\n\ndef get_green_mask(imgRGB):\n    '''Get the mask of the green background'''\n    # REF: https:\/\/codereview.stackexchange.com\/questions\/184044\/processing-an-image-to-extract-green-screen-mask\/184059#184059\n    RED, GREEN, BLUE = (0, 1, 2) # Your numbers\n    height = imgRGB.shape[0]\n    width = imgRGB.shape[1]\n    empty_img = np.zeros((height, width, 3), np.uint8)\n\n    reds = imgRGB[:, :, RED]\n    greens = imgRGB[:, :, GREEN]\n    blues = imgRGB[:, :, BLUE]\n\n    mask = ((greens < 35) | (reds >= greens) | (blues >= greens)) * 1 # 1 \u4e3a\u4fdd\u7559 0 \u4e3a \u906e\u76d6\u6389\n    return mask\n\ndef classify_hist_with_split(image, hbin):\n    '''Get the hist. percentages among RGB channels and then average them'''\n    mask = get_green_mask(image)\n    sub_image = cv2.split(image)\n    hist_sum = np.zeros(hbin)\n    for im in sub_image:\n        hist = calculate(im, mask, hbin)\n        hist_sum += hist\n    hist_sum = hist_sum \/ 3\n    return hist_sum\n\ndef visualize_img_with_mask(image, mask):\n    '''Plot the RGB picture with the corresponding mask'''\n    plt.imshow(image * np.repeat(mask[:, :, np.newaxis], 3, -1))\n    plt.axis('off')\n    plt.show()    \n\ndef compare_color_hist(image1, image2, mask1, mask2, hist_bin):\n    '''PPlot the RGB picture with the corresponding mask'''\n    hist1 = calculate(image1, mask1, hist_bin)\n    hist2 = calculate(image2, mask2, hist_bin)\n    plt.plot(hist1, color = 'blue', label = 'player1')\n    plt.plot(hist2, color = 'purple', label = 'player2')\n    plt.legend()\n    plt.show()","34d8b8a3":"# Sample two players\nsample_img1 = frame_list[0] # player_home:0\nsample_img2 = frame_list[11] # player_visit:11\n\n# Get masks\nmask1 = get_green_mask(sample_img1)\nmask2 = get_green_mask(sample_img2)\n\n# Plot the RGB picture with the corresponding mask\nvisualize_img_with_mask(sample_img1, mask1)\nvisualize_img_with_mask(sample_img2, mask2)\n\n# Plot the RGB picture with the corresponding mask\ncompare_color_hist(sample_img1, sample_img2, mask1, mask2, 80)","899941fb":"# collect histograms of players\nframe_list = anno_player_boxes(bbox_df, img_path)\nhist_sums = []\nfor i in range(len(bbox_df)):\n    hist_sum = classify_hist_with_split(frame_list[i], 80)\n    hist_sums.append(hist_sum)\n    \n# Kmeans clustering\nkmeans = KMeans(n_clusters=2, random_state=0).fit(hist_sums)\nbbox_df['pred_cluster'] = kmeans.labels_\n\n# Evaluation\ncount = 0\nfor i in range(len(bbox_df)):\n    if (bbox_df['class'].iloc[i] == 'person_home' and bbox_df['pred_cluster'].iloc[i] == 1) or \\\n    (bbox_df['class'].iloc[i] == 'person_visit' and bbox_df['pred_cluster'].iloc[i] == 0):\n        count += 1\nprint('Accuracy\uff1a{:.2f}% ({}\/{})'.format(100 * count \/ len(bbox_df), count, len(bbox_df)))","ff9db621":"bbox_df","435299f9":"## Team Clustering based on Jersey Colour ","a15e3c75":"## **Extract Jersey Color for Team Clustering**\nI think the final winners' solutions must include various techniques which is ont only limited to the player tracking but also include rich player mapping method. Thus, I like the notebook which @coldfir3 shared to [detect jersey number using OCR](http:\/\/www.kaggle.com\/coldfir3\/jersey-number-detection-using-ocr). <br>\nHere, I share a demo notebook to **extract jersey color for team clustering** by using **Opencv**. Hope this notebook can inspire you to make fun with this competition.","5839f448":"## Extract Jersey Colour by Opencv"}}