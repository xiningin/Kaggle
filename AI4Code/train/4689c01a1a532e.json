{"cell_type":{"e85c6b4a":"code","c3882c68":"code","540c4419":"code","a307c806":"code","dc3860f5":"code","20715a9d":"code","1d9c142b":"code","fe4c6b54":"code","a9f74812":"code","f5c94381":"code","a3406a64":"code","2b3df1e3":"code","b5e2f249":"code","3bd7d6e0":"markdown","c314ef89":"markdown","211ea546":"markdown","c9c03c51":"markdown","317398b8":"markdown"},"source":{"e85c6b4a":"# ! pip install -q lightning-flash[tabular]\n# this is just temporal bypass till the improvemnt is merged and released\n! pip install -q 'https:\/\/github.com\/PyTorchLightning\/lightning-flash\/archive\/refs\/heads\/master.zip#egg=lightning-flash[tabular]'\n! pip install -q \"pandas\" --force-reinstall\n! pip list | grep -E \"lightning|torch|tab\"","c3882c68":"%matplotlib inline\n\nimport torch\nimport flash\nimport pandas as pd\nfrom flash.tabular import TabularClassificationData, TabularClassifier\n\nPATH_CSV_TRAIN = \"\/kaggle\/input\/tabular-playground-series-nov-2021\/train.csv\"\nPATH_CSV_TEST = \"\/kaggle\/input\/tabular-playground-series-nov-2021\/test.csv\"","540c4419":"df_train = pd.read_csv(PATH_CSV_TRAIN, index_col=\"id\")\ndisplay(df_train.head())\ndf_train[\"target\"].hist(bins=2)","a307c806":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n\ncorr = df_train.corr()\nplt.subplots(figsize=(15, 12))\nsns.heatmap(corr, vmax=0.9, square=True)","dc3860f5":"# drop the target column\ndel df_train[\"target\"]\n# get column types\ncol_types = dict(df_train.dtypes)\n_is_num = lambda x: x in (int, float)\n# separate them\ncols_numerical = [col for col, dtp in col_types.items() if _is_num(dtp)]\ncols_string = [col for col, dtp in col_types.items() if not _is_num(dtp)]\nprint(f\"NUMERICAL: {cols_numerical}\")\nprint(f\"CATEGORICAL: {cols_string}\")","20715a9d":"datamodule = TabularClassificationData.from_csv(\n    categorical_fields=None,\n    numerical_fields=cols_numerical,\n    target_fields=\"target\",\n    train_file=PATH_CSV_TRAIN,\n    val_split=0.2,\n    batch_size=512,\n)","1d9c142b":"model = TabularClassifier.from_data(\n    datamodule,\n    learning_rate=0.005,\n    optimizer=\"Adam\",\n    lr_scheduler=(\"StepLR\", {\"step_size\": 1000}),\n    n_a=64,\n    gamma=3.0,\n)","fe4c6b54":"from pytorch_lightning.loggers import CSVLogger\nfrom pytorch_lightning.callbacks import StochasticWeightAveraging\nfrom pytorch_lightning import seed_everything\n\nseed_everything(7)\nswa = StochasticWeightAveraging(swa_epoch_start=0.6)\nlogger = CSVLogger(save_dir='logs\/')\ntrainer = flash.Trainer(\n    max_epochs=20,\n    gpus=torch.cuda.device_count(),\n    logger=logger,\n    callbacks=[swa],\n    accumulate_grad_batches=12,\n    gradient_clip_val=0.1,\n#     auto_lr_find=True,\n)\n\n# ==============================\n\n# trainer.tune(model, datamodule=datamodule, lr_find_kwargs=dict(min_lr=1e-5, max_lr=0.1, num_training=65),)\n# print(f\"Learning Rate: {model.learning_rate}\")\n\n# ==============================\n\ntrainer.fit(model, datamodule=datamodule)","a9f74812":"metrics = pd.read_csv(f'{trainer.logger.log_dir}\/metrics.csv')\ndisplay(metrics.head())\nmetrics.set_index(\"step\", inplace=True)\ndel metrics[\"epoch\"]\nsns.relplot(data=metrics, kind=\"line\")\nplt.gca().set_ylim([0, 1.25])\nplt.gcf().set_size_inches(10, 5)","f5c94381":"df_test = pd.read_csv(PATH_CSV_TEST, index_col=\"id\")\ndisplay(df_test.head())","a3406a64":"from flash.core.classification import Probabilities\n\nmodel.output = Probabilities()\npredictions = model.predict(PATH_CSV_TEST)\nprint(predictions[0])","2b3df1e3":"import numpy as np\nassert len(df_test) == len(predictions)\n\ndf_test[\"target\"] = np.array(predictions)[:, -1]\ndf_test[\"target\"].hist(bins=20)\n\ndisplay(df_test.head())\ndf_test[[\"target\"]].to_csv(\"submission.csv\")","b5e2f249":"! head submission.csv","3bd7d6e0":"## 2. Build the task","c314ef89":"## 4. Generate predictions from a CSV","211ea546":"## 1. Create the DataModule","c9c03c51":"## 3. Create the trainer and train the model","317398b8":"# Playing tabular\ud83d\udccbdata with Lightning\u26a1Flash\n\nFlash makes complex AI recipes for over 15 tasks across 7 data domains accessible to all.\nIn a nutshell, Flash is the production grade research framework you always dreamed of but didn't have time to build.\n\nhttps:\/\/github.com\/PyTorchLightning\/lightning-flash"}}