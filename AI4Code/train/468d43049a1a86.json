{"cell_type":{"07d17c98":"code","98dce6f9":"code","44b8470f":"code","8880726b":"code","8da48ac4":"code","6c7f894f":"code","f65b30c5":"code","142531b4":"code","5796345a":"code","c4101dbb":"code","40eff2a8":"code","3c23a9b1":"code","8e8ded86":"code","d4578d8e":"code","1330bc5a":"code","4b9dfce5":"code","6001b019":"code","d97dc5ff":"markdown","15a4f252":"markdown","d979d7d2":"markdown","9bdf7da3":"markdown","1bef0b12":"markdown","a92bc142":"markdown","96377910":"markdown","2950dfdd":"markdown","45646cc9":"markdown","fab9822f":"markdown","cf2292ad":"markdown","0a25c3ba":"markdown","bd42752f":"markdown","e5580800":"markdown","bed231f7":"markdown","37ccd5ff":"markdown","b03c0aaa":"markdown","b1e66893":"markdown","338a3cb6":"markdown","8af5fbb6":"markdown","188ae438":"markdown","a15d7fbd":"markdown","c0c63786":"markdown","afd639f0":"markdown"},"source":{"07d17c98":"x=plt.imread('..\/input\/images-for-clustering\/gettyimages-982123216.jpg')\nplt.figure(figsize=(18,8))\nplt.imshow(x)\nplt.axis(\"off\")\nplt.show()","98dce6f9":"from skimage.color import rgb2gray\nimport numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom scipy import ndimage\nfrom PIL import Image\nfrom sklearn.cluster import KMeans\nfrom skimage.filters import sobel\nimport skimage\nimport warnings\nwarnings.filterwarnings(\"ignore\")","44b8470f":"image=Image.open('..\/input\/images-for-clustering\/the-snow-mountain-radhakrishnan-v-k.jpg')\nimage=image.resize((320,225))\nimage=np.array(image)\nplt.imshow(image)","8880726b":"# Making the gray scale of the image\ngray = rgb2gray(image)\nplt.imshow(gray, cmap='gray')","8da48ac4":"# What if we use the mean of the pixels in the whole image as threshold and kinda use it for segmentation\narr=gray.flatten()\nfor i in range(len(arr)):\n    if arr[i]>=arr.mean() :\n        arr[i]=1\n    else:\n        arr[i]=0\ngray_segmented=arr.reshape(gray.shape[0],gray.shape[1])","6c7f894f":"plt.imshow(gray_segmented,cmap='gray')","f65b30c5":"# What if we tune the above function more??\narr=gray.flatten()\nfor i in range(len(arr)):\n    if arr[i]>=arr.mean():\n        arr[i]=4\n    elif arr[i]>=0.75:\n        arr[i]=3\n    elif arr[i]>0.5 :\n        arr[i]=2\n    elif arr[i]>0.25:\n        arr[i]=1\n    else:\n        arr[i]=0\ngray_segmented_2=arr.reshape(gray.shape[0],gray.shape[1])\n    ","142531b4":"# There are 5 segments in the below image :)\nplt.figure(figsize=(18,8))\nplt.imshow(gray_segmented_2,cmap='pink')\nplt.axis(\"off\")\nplt.show()","5796345a":"imm=image[:,:,0]\nelevation_map = sobel(imm)\n\nfig, ax = plt.subplots(figsize=(18,8))\nax.imshow(elevation_map, cmap='gray', interpolation='nearest')\nax.axis('off')\nax.set_title('elevation_map')\nplt.show()","c4101dbb":"plt.hist(imm.flatten())\nplt.show()","40eff2a8":"markers = np.zeros_like(imm)\nmarkers[imm < 117] = 1\nmarkers[imm > 232] = 2\n\nfig, ax = plt.subplots(figsize=(8,4))\nax.imshow(markers, cmap='Spectral', interpolation='nearest')\nax.axis('off')\nax.set_title('markers')\n","3c23a9b1":"segmentation = skimage.segmentation.watershed(elevation_map, markers)\n\nfig, ax = plt.subplots(figsize=(10,5))\nax.imshow(segmentation, cmap='pink',interpolation='nearest')\nax.axis('off')\nax.set_title('segmentation')","8e8ded86":"from skimage.color import label2rgb\n\nsegmentation = ndi.binary_fill_holes(segmentation - 1)\nlabeled_mountains, _ = ndi.label(segmentation)\nimage_label_overlay = label2rgb(labeled_mountains, image=imm)\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(18, 8), sharex=True, sharey=True)\nax1.imshow(imm, cmap=plt.cm.gray, interpolation='nearest')\nax1.contour(segmentation, [0.5], linewidths=1.2, colors='y')\nax1.axis('off')\nax1.set_adjustable('box')\nax2.imshow(image_label_overlay, interpolation='nearest')\nax2.axis('off')\nax2.set_adjustable('box')\n\n","d4578d8e":"imm=Image.open('..\/input\/cat-and-dog\/training_set\/training_set\/dogs\/dog.1004.jpg')\n\nimm=np.array(imm)[:,:,0]\nelevation_map = sobel(imm)\nmarkers = np.zeros_like(imm)\nmarkers[imm < 78.6] = 1\nmarkers[imm > 103.8] = 2\nsegmentation = skimage.segmentation.watershed(elevation_map, markers)\n\nsegmentation = ndi.binary_fill_holes(segmentation - 1)\nlabeled_dog, _ = ndi.label(segmentation)\nimage_label_overlay = label2rgb(labeled_dog, image=imm)\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(18, 8), sharex=True, sharey=True)\nax1.imshow(imm, cmap=plt.cm.gray, interpolation='nearest')\nax1.contour(segmentation, [0.5], linewidths=1.2, colors='y')\nax1.axis('off')\nax1.set_adjustable('box')\nax2.imshow(image_label_overlay, interpolation='nearest')\nax2.axis('off')\nax2.set_adjustable('box')\n\n","1330bc5a":"# we are gonna use kernel laplace here to discover the edges in the image :)\nkernel_laplace = np.array([np.array([1, 1, 1]), np.array([1, -8, 1]), np.array([1, 1, 1])])\n\nout_l = ndimage.convolve(gray_segmented_2, kernel_laplace, mode='reflect')\narr=[]\nfor i in out_l.flatten():\n    if i == 0:\n        arr.append(0)\n    else:\n        arr.append(-100)\narr=np.array(arr)\narr=arr.reshape(out_l.shape[0],out_l.shape[1])\nplt.imshow(arr,cmap='gray', interpolation='nearest')","4b9dfce5":"im=image\/255\npic=im.reshape(im.shape[0]*im.shape[1],im.shape[2])","6001b019":"# Since we know 5 segments was looking great on the image we are gonna do 5 clusters here but you can try more too :)\nfig, ax = plt.subplots(2, 3, figsize=(16, 8))\ncount=1\nfor i in range(2):\n    for j in range(3):\n\n        kmeans = KMeans(n_clusters=count+1, random_state=0).fit(pic)\n        pic_print = kmeans.cluster_centers_[kmeans.labels_]\n        clustered_pic=pic_print.reshape(im.shape[0],im.shape[1],im.shape[2])\n        count+=1\n        ax[i][j].set_title('Cluster '+str(count))\n        ax[i][j].imshow(clustered_pic)\n        ax[i][j].set_axis_off()\nplt.show()","d97dc5ff":"## Segmentation and labelling together","15a4f252":"Let\u2019s understand image segmentation using a simple example. Consider the below above .\nWe can predict whether the image has dog or horse but can we tell the location of the dog in the image just by using the model . No we can't that's where the image segmentation comes in :)\nThis is a simple introductory file explaining 2 types of Image segmentation :\n* Region Based Segmentation \n* Edge Based Segmentation\n* Clustering Based Segmentation","d979d7d2":"Divides the pixels of the image into homogeneous clusters.","9bdf7da3":"# Edge Detection of an image : Segmentation using Edges","1bef0b12":"# Segmentation Using Clustering","a92bc142":"# Region based Segmentation of the image (2 Folds )","96377910":"## Filling the extreme parts of the image","2950dfdd":"# Region based Segmentaion of the image (5 Folds)","45646cc9":"Makes use of discontinuous local features of an image to detect edges and hence define a boundary of the object.","fab9822f":"# Importing the packages","cf2292ad":"# Another way to do Region Based Segmentation","0a25c3ba":"# Importing the images","bd42752f":"Separates the objects into different regions based on some threshold value(s).","e5580800":"![](https:\/\/media3.giphy.com\/media\/RMhbmeqWeOBQIiQkS4\/giphy.gif?cid=ecf05e474a2u4hggwv8kl1h399gi42nfm9vda5aulje3y4qn&rid=giphy.gif)","bed231f7":"We therefore try a region-based method using the watershed transform. First, we find an elevation map using the Sobel gradient of the image.\n\nThe Sobel operator performs a 2-D spatial gradient measurement on an image and so emphasizes regions of high spatial frequency that correspond to edges. Typically it is used to find the approximate absolute gradient magnitude at each point in an input grayscale image.","37ccd5ff":"![](https:\/\/d1m75rqqgidzqn.cloudfront.net\/wp-data\/2020\/01\/17162345\/clustering-algorithms-in-Machine-Learning.jpg)","b03c0aaa":"# Dark side of the image ??","b1e66893":"In this second image i hope you can see the segments in different colors getting labelled :)","338a3cb6":"# Trying it on a dog image :)","8af5fbb6":"# Hoping you can see the difference in segmentation for different clusters :)","188ae438":"## Getting the extreme parts of the image using histogram","a15d7fbd":"# Awesome right :)","c0c63786":"# What is Segmentation??","afd639f0":"![](https:\/\/i.pinimg.com\/originals\/09\/3e\/78\/093e7800f94474f3386f9ebd9a2393ae.gif)"}}