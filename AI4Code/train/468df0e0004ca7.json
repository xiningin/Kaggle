{"cell_type":{"e7a86080":"code","74e6614c":"code","7c96a251":"code","ddfa7290":"code","1ce20a04":"code","dbaf4616":"code","b4ea7160":"code","93f58a31":"code","605baf80":"code","1846db3b":"code","232f0738":"code","4ae95aab":"code","84777c67":"code","b978fc33":"code","8d661046":"code","baf6231d":"code","dac879d0":"code","b3d9ae95":"code","5811e020":"code","0be783ef":"code","7c245db3":"code","3118c4e8":"code","9cc355a0":"code","4e2d10d9":"code","7e528c5d":"code","81f0b7be":"code","49bb9783":"code","b02a8279":"code","f56ffc5f":"code","25320e37":"code","2d35f1b2":"code","4d42a657":"code","7117fc80":"code","da20d226":"code","d8196f86":"code","30880910":"code","07614da1":"code","b62b0f07":"code","efd4d593":"code","6f7b3d79":"code","027b6e2c":"code","d8e1d2e9":"code","78823cb0":"code","ef3547cd":"code","dbbf966d":"code","51916c76":"code","eae46340":"code","5a184ec6":"code","3d46eb59":"code","5750d142":"code","0dfd66a4":"code","7bb0b43d":"code","7588beb2":"code","4a8f3e85":"code","6e79543e":"code","a9402ba5":"code","2aef27b0":"code","544bd8b5":"code","38e38305":"code","283b1b68":"code","6d1fcc44":"code","aaf97c2e":"code","371c9720":"code","788e86a6":"code","21381a73":"code","9eef87a8":"code","eaa193d9":"code","33134dc1":"code","d4796612":"code","e848ca0c":"code","72ddc5e7":"code","d6380884":"code","66f49fc9":"code","4b0fd1ad":"code","d86f98d5":"code","7eecf29b":"code","28d827c8":"code","0223e5f2":"code","be063331":"code","022a6253":"code","3801f850":"code","d953dd69":"code","dedbd760":"code","a051ce5c":"code","3f938e34":"code","7681f948":"code","fb9a0f56":"code","e888f6ec":"code","d1fb0776":"code","834ec23f":"code","95aedd81":"code","459d8ec3":"code","1d100f4b":"code","e2458540":"code","267e3d6a":"code","175f6751":"code","e4abbec2":"code","e8f1250e":"code","939e9eb2":"code","d3d6191e":"code","67ca1a65":"code","8f7db9f5":"code","90e5ec42":"code","66bb9d08":"code","cc4041bd":"code","c62348e8":"code","b03a1be8":"code","ab45ab83":"code","7d54f9c6":"code","060fdd6a":"code","59abb3b8":"code","f303c67f":"code","96748bbf":"code","f581d1db":"code","7bac1976":"markdown","e50278b0":"markdown","351f4f47":"markdown","f495389f":"markdown","94b922a5":"markdown","f6f8f221":"markdown","30661fc3":"markdown","8a00a69c":"markdown","e90c70f4":"markdown","422d7bda":"markdown","6a5f25b9":"markdown","e4f177db":"markdown","66a27830":"markdown","76762523":"markdown","8e4f7bbe":"markdown","347f1129":"markdown","d2ff18bd":"markdown","f228a8f8":"markdown"},"source":{"e7a86080":"# First of all import all libraries I'll need.\n\nimport warnings\nwarnings.simplefilter(action='ignore')\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\nfrom sklearn.linear_model import LinearRegression, Ridge, RidgeCV, ElasticNet, Lasso, LassoCV\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.neighbors import LocalOutlierFactor\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import RobustScaler","74e6614c":"# I'll use Hitter dataset for this project.\n\ndf = pd.read_csv(\"..\/input\/hitters\/Hitters.csv\")","7c96a251":"df.head()","ddfa7290":"# You can see all columns detail above.\n\ndf.info()","1ce20a04":"# Let's look statistic info\n\ndf.describe().T","dbaf4616":"#Any NaN data?\n\ndf.isnull().sum()","b4ea7160":"#Correlation values more than 0.5 between features\n\ncorrelation_matrix = df.corr().round(2)\nthreshold=0.75\nfiltre=np.abs(correlation_matrix['Salary'])>0.50\ncorr_features=correlation_matrix.columns[filtre].tolist()\nsns.clustermap(df[corr_features].corr(),annot=True,fmt=\".2f\")\nplt.title('Correlation btw features')\nplt.show()","93f58a31":"# And look detail of \"Salary\" data\n\ndf[[\"Salary\"]].describe()","605baf80":"# Dropped NA named by \"df2\"\ndf1=df.copy()\ndf1=df1.dropna()\ndf1.shape","1846db3b":"# Transformation \ndf1=pd.get_dummies(df1,columns = ['League', 'Division', 'NewLeague'], drop_first = True)\ndf1.head()","232f0738":"# Outlier Detection\n\nclf=LocalOutlierFactor(n_neighbors=20, contamination=0.1)\nclf.fit_predict(df1)\ndf1_scores=clf.negative_outlier_factor_\ndf1_scores= np.sort(df1_scores)\ndf1_scores[0:20]","4ae95aab":"sns.boxplot(df1_scores);","84777c67":"threshold=np.sort(df1_scores)[10]\nprint(threshold)\ndf1=df1.loc[df1_scores > threshold]\ndf1=df1.reset_index(drop=True)","b978fc33":"df1.shape","8d661046":"# Standardization","baf6231d":"df1_X=df1.drop([\"Salary\",\"League_N\",\"Division_W\",\"NewLeague_N\"], axis=1)\ndf1_X.head()","dac879d0":"from sklearn.preprocessing import StandardScaler\nscaled_cols=StandardScaler().fit_transform(df1_X)\n\n\n\nscaled_cols=pd.DataFrame(scaled_cols, columns=df1_X.columns)\nscaled_cols.head()","b3d9ae95":"cat_df1=df1.loc[:, \"League_N\":\"NewLeague_N\"]\ncat_df1.head()","5811e020":"Salary=pd.DataFrame(df1[\"Salary\"])","0be783ef":"df2=pd.concat([Salary,scaled_cols, cat_df1], axis=1)\ndf2.head()","7c245db3":"df2.head()","3118c4e8":"# Filled NA with mean, normalized and drop high correlation columns.\n\ndf3=df.copy()\ndf3.corr()","9cc355a0":"# Mean of the Columns\n\ndf3['Year_lab'] = pd.cut(x=df['Years'], bins=[0, 3, 6, 10, 15, 19, 24])\ndf3.groupby(['League','Division', 'Year_lab']).agg({'Salary':'mean'})","4e2d10d9":"df3.loc[(df[\"Salary\"].isnull()) & (df3[\"League\"] == \"A\") & (df3['Division'] == 'E') & (df3['Years'] <= 3), \"Salary\"] = 112\ndf3.loc[(df[\"Salary\"].isnull()) & (df3[\"League\"] == \"A\") & (df3['Division'] == 'E') & (df3['Years'] > 3) & (df3['Years'] <= 6), \"Salary\"] = 656\ndf3.loc[(df[\"Salary\"].isnull()) & (df3[\"League\"] == \"A\") & (df3['Division'] == 'E') & (df3['Years'] > 6) & (df3['Years'] <= 10), \"Salary\"] = 853\ndf3.loc[(df[\"Salary\"].isnull()) & (df3[\"League\"] == \"A\") & (df3['Division'] == 'E') & (df3['Years'] > 10) & (df3['Years'] <= 15), \"Salary\"] = 816\ndf3.loc[(df[\"Salary\"].isnull()) & (df3[\"League\"] == \"A\") & (df3['Division'] == 'E') & (df3['Years'] > 15) & (df3['Years'] <= 19), \"Salary\"] = 665\n\ndf3.loc[(df[\"Salary\"].isnull()) & (df3[\"League\"] == \"A\") & (df3['Division'] == 'W') & (df3['Years'] <= 3), \"Salary\"] = 154\ndf3.loc[(df[\"Salary\"].isnull()) & (df3[\"League\"] == \"A\") & (df3['Division'] == 'W') & (df3['Years'] > 3) & (df3['Years'] <= 6), \"Salary\"] = 401\ndf3.loc[(df[\"Salary\"].isnull()) & (df3[\"League\"] == \"A\") & (df3['Division'] == 'W') & (df3['Years'] > 6) & (df3['Years'] <= 10), \"Salary\"] = 634\ndf3.loc[(df[\"Salary\"].isnull()) & (df3[\"League\"] == \"A\") & (df3['Division'] == 'W') & (df3['Years'] > 10) & (df3['Years'] <= 15), \"Salary\"] = 835\ndf3.loc[(df[\"Salary\"].isnull()) & (df3[\"League\"] == \"A\") & (df3['Division'] == 'W') & (df3['Years'] > 15) & (df3['Years'] <= 19), \"Salary\"] = 479\ndf3.loc[(df[\"Salary\"].isnull()) & (df3[\"League\"] == \"A\") & (df3['Division'] == 'W') & (df3['Years'] > 19), \"Salary\"] = 487\n\ndf3.loc[(df[\"Salary\"].isnull()) & (df3[\"League\"] == \"N\") & (df3['Division'] == 'E') & (df3['Years'] <= 3), \"Salary\"] = 248\ndf3.loc[(df[\"Salary\"].isnull()) & (df3[\"League\"] == \"N\") & (df3['Division'] == 'E') & (df3['Years'] > 3) & (df3['Years'] <= 6), \"Salary\"] = 501\ndf3.loc[(df[\"Salary\"].isnull()) & (df3[\"League\"] == \"N\") & (df3['Division'] == 'E') & (df3['Years'] > 6) & (df3['Years'] <= 10), \"Salary\"] = 824\ndf3.loc[(df[\"Salary\"].isnull()) & (df3[\"League\"] == \"N\") & (df3['Division'] == 'E') & (df3['Years'] > 10) & (df3['Years'] <= 15), \"Salary\"] = 894\ndf3.loc[(df[\"Salary\"].isnull()) & (df3[\"League\"] == \"N\") & (df3['Division'] == 'E') & (df3['Years'] > 15) & (df3['Years'] <= 19), \"Salary\"] = 662\n\ndf3.loc[(df[\"Salary\"].isnull()) & (df3[\"League\"] == \"N\") & (df3['Division'] == 'W') & (df3['Years'] <= 3), \"Salary\"] = 192\ndf3.loc[(df[\"Salary\"].isnull()) & (df3[\"League\"] == \"N\") & (df3['Division'] == 'W') & (df3['Years'] > 3) & (df3['Years'] <= 6), \"Salary\"] = 458\ndf3.loc[(df[\"Salary\"].isnull()) & (df3[\"League\"] == \"N\") & (df3['Division'] == 'W') & (df3['Years'] > 6) & (df3['Years'] <= 10), \"Salary\"] = 563\ndf3.loc[(df[\"Salary\"].isnull()) & (df3[\"League\"] == \"N\") & (df3['Division'] == 'W') & (df3['Years'] > 10) & (df3['Years'] <= 15), \"Salary\"] = 722\ndf3.loc[(df[\"Salary\"].isnull()) & (df3[\"League\"] == \"N\") & (df3['Division'] == 'W') & (df3['Years'] > 15) & (df3['Years'] <= 19), \"Salary\"] = 761\ndf3.loc[(df[\"Salary\"].isnull()) & (df3[\"League\"] == \"N\") & (df3['Division'] == 'W') & (df3['Years'] > 19), \"Salary\"] = 475","7e528c5d":"# Transformation \n\nle = LabelEncoder()\ndf3['League'] = le.fit_transform(df3['League'])\ndf3['Division'] = le.fit_transform(df3['Division'])\ndf3['NewLeague'] = le.fit_transform(df3['NewLeague'])\ndf3.head()","81f0b7be":"df3['Year_lab'] = le.fit_transform(df3['Year_lab'])\ndf3.head()","49bb9783":"df3.info()","b02a8279":"# Normalization\ndf3_X= df3.drop([\"Salary\",\"League\",\"Division\",\"NewLeague\"], axis=1)\n\nscaled_cols3=preprocessing.normalize(df3_X)\n\n\nscaled_cols3=pd.DataFrame(scaled_cols3, columns=df3_X.columns)\nscaled_cols3.head()","f56ffc5f":"cat_df3=pd.concat([df3.loc[:,\"League\":\"Division\"],df3.loc[:,\"NewLeague\":\"Year_lab\"]], axis=1)\ncat_df3.head()","25320e37":"df4= pd.concat([scaled_cols3,cat_df3,df3[\"Salary\"]], axis=1)\ndf4","2d35f1b2":"del df4[\"CHits\"]\ndel df4[\"CAtBat\"]","4d42a657":"df4.head()","7117fc80":"# Filled NA with mean, normalized\n\ndf5=df.copy()","da20d226":"df5['Year_lab'] = pd.cut(x=df['Years'], bins=[0, 3, 6, 10, 15, 19, 24])\ndf5.groupby(['League','Division', 'Year_lab']).agg({'Salary':'mean'})","d8196f86":"df5.loc[(df[\"Salary\"].isnull()) & (df5[\"League\"] == \"A\") & (df5['Division'] == 'E') & (df5['Years'] <= 3), \"Salary\"] = 112\ndf5.loc[(df[\"Salary\"].isnull()) & (df5[\"League\"] == \"A\") & (df5['Division'] == 'E') & (df5['Years'] > 3) & (df5['Years'] <= 6), \"Salary\"] = 656\ndf5.loc[(df[\"Salary\"].isnull()) & (df5[\"League\"] == \"A\") & (df5['Division'] == 'E') & (df5['Years'] > 6) & (df5['Years'] <= 10), \"Salary\"] = 853\ndf5.loc[(df[\"Salary\"].isnull()) & (df5[\"League\"] == \"A\") & (df5['Division'] == 'E') & (df5['Years'] > 10) & (df5['Years'] <= 15), \"Salary\"] = 816\ndf5.loc[(df[\"Salary\"].isnull()) & (df5[\"League\"] == \"A\") & (df5['Division'] == 'E') & (df5['Years'] > 15) & (df5['Years'] <= 19), \"Salary\"] = 665\n\ndf5.loc[(df[\"Salary\"].isnull()) & (df5[\"League\"] == \"A\") & (df5['Division'] == 'W') & (df5['Years'] <= 3), \"Salary\"] = 154\ndf5.loc[(df[\"Salary\"].isnull()) & (df5[\"League\"] == \"A\") & (df5['Division'] == 'W') & (df5['Years'] > 3) & (df5['Years'] <= 6), \"Salary\"] = 401\ndf5.loc[(df[\"Salary\"].isnull()) & (df5[\"League\"] == \"A\") & (df5['Division'] == 'W') & (df5['Years'] > 6) & (df5['Years'] <= 10), \"Salary\"] = 634\ndf5.loc[(df[\"Salary\"].isnull()) & (df5[\"League\"] == \"A\") & (df5['Division'] == 'W') & (df5['Years'] > 10) & (df5['Years'] <= 15), \"Salary\"] = 835\ndf5.loc[(df[\"Salary\"].isnull()) & (df5[\"League\"] == \"A\") & (df5['Division'] == 'W') & (df5['Years'] > 15) & (df5['Years'] <= 19), \"Salary\"] = 479\ndf5.loc[(df[\"Salary\"].isnull()) & (df5[\"League\"] == \"A\") & (df5['Division'] == 'W') & (df5['Years'] > 19), \"Salary\"] = 487\n\ndf5.loc[(df[\"Salary\"].isnull()) & (df5[\"League\"] == \"N\") & (df5['Division'] == 'E') & (df5['Years'] <= 3), \"Salary\"] = 248\ndf5.loc[(df[\"Salary\"].isnull()) & (df5[\"League\"] == \"N\") & (df5['Division'] == 'E') & (df5['Years'] > 3) & (df5['Years'] <= 6), \"Salary\"] = 501\ndf5.loc[(df[\"Salary\"].isnull()) & (df5[\"League\"] == \"N\") & (df5['Division'] == 'E') & (df5['Years'] > 6) & (df5['Years'] <= 10), \"Salary\"] = 824\ndf5.loc[(df[\"Salary\"].isnull()) & (df5[\"League\"] == \"N\") & (df5['Division'] == 'E') & (df5['Years'] > 10) & (df5['Years'] <= 15), \"Salary\"] = 894\ndf5.loc[(df[\"Salary\"].isnull()) & (df5[\"League\"] == \"N\") & (df5['Division'] == 'E') & (df5['Years'] > 15) & (df5['Years'] <= 19), \"Salary\"] = 662\n\ndf5.loc[(df[\"Salary\"].isnull()) & (df5[\"League\"] == \"N\") & (df5['Division'] == 'W') & (df5['Years'] <= 3), \"Salary\"] = 192\ndf5.loc[(df[\"Salary\"].isnull()) & (df5[\"League\"] == \"N\") & (df5['Division'] == 'W') & (df5['Years'] > 3) & (df5['Years'] <= 6), \"Salary\"] = 458\ndf5.loc[(df[\"Salary\"].isnull()) & (df5[\"League\"] == \"N\") & (df5['Division'] == 'W') & (df5['Years'] > 6) & (df5['Years'] <= 10), \"Salary\"] = 563\ndf5.loc[(df[\"Salary\"].isnull()) & (df5[\"League\"] == \"N\") & (df5['Division'] == 'W') & (df5['Years'] > 10) & (df5['Years'] <= 15), \"Salary\"] = 722\ndf5.loc[(df[\"Salary\"].isnull()) & (df5[\"League\"] == \"N\") & (df5['Division'] == 'W') & (df5['Years'] > 15) & (df5['Years'] <= 19), \"Salary\"] = 761\ndf5.loc[(df[\"Salary\"].isnull()) & (df5[\"League\"] == \"N\") & (df5['Division'] == 'W') & (df5['Years'] > 19), \"Salary\"] = 475","30880910":"# Transformation \n\nle = LabelEncoder()\ndf5['League'] = le.fit_transform(df5['League'])\ndf5['Division'] = le.fit_transform(df5['Division'])\ndf5['NewLeague'] = le.fit_transform(df5['NewLeague'])\ndf5.head()","07614da1":"df5['Year_lab'] = le.fit_transform(df5['Year_lab'])","b62b0f07":"# Normalization\ndf5_X= df5.drop([\"Salary\",\"League\",\"Division\",\"NewLeague\"], axis=1)\n\nscaled_cols5=preprocessing.normalize(df5_X)\n\n\nscaled_cols5=pd.DataFrame(scaled_cols5, columns=df5_X.columns)\nscaled_cols5.head()","efd4d593":"cat_df5=pd.concat([df5.loc[:,\"League\":\"Division\"],df5.loc[:,\"NewLeague\":\"Year_lab\"]], axis=1)\ncat_df5.head()","6f7b3d79":"df6= pd.concat([scaled_cols5,cat_df5,df5[\"Salary\"]], axis=1)\ndf6.head()","027b6e2c":"# Filled NA with medyan, normalized\n\ndf7=df.copy()","d8e1d2e9":"df7['Year_lab'] = pd.cut(x=df['Years'], bins=[0, 3, 6, 10, 15, 19, 24])\ndf7.groupby(['League','Division', 'Year_lab']).agg({'Salary':'median'})","78823cb0":"df7.loc[(df[\"Salary\"].isnull()) & (df7[\"League\"] == \"A\") & (df7['Division'] == 'E') & (df7['Years'] <= 3), \"Salary\"] = 90\ndf7.loc[(df[\"Salary\"].isnull()) & (df7[\"League\"] == \"A\") & (df7['Division'] == 'E') & (df7['Years'] > 3) & (df7['Years'] <= 6), \"Salary\"] = 562\ndf7.loc[(df[\"Salary\"].isnull()) & (df7[\"League\"] == \"A\") & (df7['Division'] == 'E') & (df7['Years'] > 6) & (df7['Years'] <= 10), \"Salary\"] = 673\ndf7.loc[(df[\"Salary\"].isnull()) & (df7[\"League\"] == \"A\") & (df7['Division'] == 'E') & (df7['Years'] > 10) & (df7['Years'] <= 15), \"Salary\"] = 700\ndf7.loc[(df[\"Salary\"].isnull()) & (df7[\"League\"] == \"A\") & (df7['Division'] == 'E') & (df7['Years'] > 15) & (df7['Years'] <= 19), \"Salary\"] = 655\n\ndf7.loc[(df[\"Salary\"].isnull()) & (df7[\"League\"] == \"A\") & (df7['Division'] == 'W') & (df7['Years'] <= 3), \"Salary\"] = 127\ndf7.loc[(df[\"Salary\"].isnull()) & (df7[\"League\"] == \"A\") & (df7['Division'] == 'W') & (df7['Years'] > 3) & (df7['Years'] <= 6), \"Salary\"] = 350\ndf7.loc[(df[\"Salary\"].isnull()) & (df7[\"League\"] == \"A\") & (df7['Division'] == 'W') & (df7['Years'] > 6) & (df7['Years'] <= 10), \"Salary\"] = 600\ndf7.loc[(df[\"Salary\"].isnull()) & (df7[\"League\"] == \"A\") & (df7['Division'] == 'W') & (df7['Years'] > 10) & (df7['Years'] <= 15), \"Salary\"] = 787\ndf7.loc[(df[\"Salary\"].isnull()) & (df7[\"League\"] == \"A\") & (df7['Division'] == 'W') & (df7['Years'] > 15) & (df7['Years'] <= 19), \"Salary\"] = 325\ndf7.loc[(df[\"Salary\"].isnull()) & (df7[\"League\"] == \"A\") & (df7['Division'] == 'W') & (df7['Years'] > 19), \"Salary\"] = 487\n\ndf7.loc[(df[\"Salary\"].isnull()) & (df7[\"League\"] == \"N\") & (df7['Division'] == 'E') & (df7['Years'] <= 3), \"Salary\"] = 132\ndf7.loc[(df[\"Salary\"].isnull()) & (df7[\"League\"] == \"N\") & (df7['Division'] == 'E') & (df7['Years'] > 3) & (df7['Years'] <= 6), \"Salary\"] = 348\ndf7.loc[(df[\"Salary\"].isnull()) & (df7[\"League\"] == \"N\") & (df7['Division'] == 'E') & (df7['Years'] > 6) & (df7['Years'] <= 10), \"Salary\"] = 750\ndf7.loc[(df[\"Salary\"].isnull()) & (df7[\"League\"] == \"N\") & (df7['Division'] == 'E') & (df7['Years'] > 10) & (df7['Years'] <= 15), \"Salary\"] = 600\ndf7.loc[(df[\"Salary\"].isnull()) & (df7[\"League\"] == \"N\") & (df7['Division'] == 'E') & (df7['Years'] > 15) & (df7['Years'] <= 19), \"Salary\"] = 662\n\ndf7.loc[(df[\"Salary\"].isnull()) & (df7[\"League\"] == \"N\") & (df7['Division'] == 'W') & (df7['Years'] <= 3), \"Salary\"] = 120\ndf7.loc[(df[\"Salary\"].isnull()) & (df7[\"League\"] == \"N\") & (df7['Division'] == 'W') & (df7['Years'] > 3) & (df7['Years'] <= 6), \"Salary\"] = 415\ndf7.loc[(df[\"Salary\"].isnull()) & (df7[\"League\"] == \"N\") & (df7['Division'] == 'W') & (df7['Years'] > 6) & (df7['Years'] <= 10), \"Salary\"] = 617\ndf7.loc[(df[\"Salary\"].isnull()) & (df7[\"League\"] == \"N\") & (df7['Division'] == 'W') & (df7['Years'] > 10) & (df7['Years'] <= 15), \"Salary\"] = 595\ndf7.loc[(df[\"Salary\"].isnull()) & (df7[\"League\"] == \"N\") & (df7['Division'] == 'W') & (df7['Years'] > 15) & (df7['Years'] <= 19), \"Salary\"] = 636\ndf7.loc[(df[\"Salary\"].isnull()) & (df7[\"League\"] == \"N\") & (df7['Division'] == 'W') & (df7['Years'] > 19), \"Salary\"] = 475","ef3547cd":"# Transformation \n\nle = LabelEncoder()\ndf7['League'] = le.fit_transform(df7['League'])\ndf7['Division'] = le.fit_transform(df7['Division'])\ndf7['NewLeague'] = le.fit_transform(df7['NewLeague'])\ndf7.head()","dbbf966d":"df7['Year_lab'] = le.fit_transform(df7['Year_lab'])","51916c76":"# Normalization\ndf7_X= df7.drop([\"Salary\",\"League\",\"Division\",\"NewLeague\"], axis=1)\n\nscaled_cols7=preprocessing.normalize(df7_X)\n\n\nscaled_cols7=pd.DataFrame(scaled_cols7, columns=df7_X.columns)\nscaled_cols7.head()","eae46340":"cat_df7=pd.concat([df7.loc[:,\"League\":\"Division\"],df7.loc[:,\"NewLeague\":\"Year_lab\"]], axis=1)\ncat_df7.head()","5a184ec6":"df8= pd.concat([scaled_cols7,cat_df7,df7[\"Salary\"]], axis=1)\ndf8.head()","3d46eb59":"# Drop NA and Outliers, log transformed\n# log transformation of the features which have multicorrelation above 0.8 between each other\n# named by \"df10\" ","5750d142":"df9= df1.copy()\nprint(df9.shape)\ndf9.head()","0dfd66a4":"# log transform the variables\ndf9['CRuns'] = np.log(df9['CRuns'])\ndf9['CHits'] = np.log(df9['CHits'])\ndf9['CAtBat'] = np.log(df9['CAtBat'])\ndf9['Years'] = np.log(df9['Years'])\ndf9['CRBI'] = np.log(df9['CRBI'])\ndf9['CWalks'] = np.log(df9['CWalks'])","7bb0b43d":"df9_X=df9.drop([\"Salary\",\"League_N\",\"Division_W\",\"NewLeague_N\"], axis=1)\ndf9_X.head()","7588beb2":"Rscaler = RobustScaler().fit(df9_X)\nscaled_cols9=Rscaler.transform(df9_X)\nscaled_cols9=pd.DataFrame(scaled_cols9, columns=df9_X.columns)\nscaled_cols9.head()","4a8f3e85":"df10=pd.concat([df9_X,df9.loc[:, \"League_N\": \"NewLeague_N\"], df9[\"Salary\"]], axis=1)\ndf10.head()","6e79543e":"cat_df9=df9.loc[:, \"League_N\":\"NewLeague_N\"]\ncat_df9.head()","a9402ba5":"df10.head()","2aef27b0":"# Filled NA with mean,normalized\n\ndf11=df.copy()","544bd8b5":"df11['Year_lab'] = pd.cut(x=df['Years'], bins=[0,24])\ndf11.groupby(['League','Division', 'Year_lab']).agg({'Salary':'mean'})","38e38305":"# Filled NA values with mean\n\ndf11.loc[(df11[\"Salary\"].isnull()) & (df11[\"League\"] == \"A\") & (df11['Division'] == 'E'),\"Salary\"] = 670.849559\ndf11.loc[(df11[\"Salary\"].isnull()) & (df11[\"League\"] == \"A\") & (df11['Division'] == 'W'),\"Salary\"] = 418.593901\ndf11.loc[(df11[\"Salary\"].isnull()) & (df11[\"League\"] == \"N\") & (df11['Division'] == 'E'),\"Salary\"] = 572.348131\ndf11.loc[(df11[\"Salary\"].isnull()) & (df11[\"League\"] == \"N\") & (df11['Division'] == 'W'),\"Salary\"] = 487.259270","283b1b68":"#Transformation\n\nle = LabelEncoder()\ndf11['League'] = le.fit_transform(df11['League'])\ndf11['Division'] = le.fit_transform(df11['Division'])\ndf11['NewLeague'] = le.fit_transform(df11['NewLeague'])","6d1fcc44":"# Normalization\ndf7_X= df7.drop([\"Salary\",\"League\",\"Division\",\"NewLeague\"], axis=1)\n\nscaled_cols7=preprocessing.normalize(df7_X)\n\n\nscaled_cols7=pd.DataFrame(scaled_cols7, columns=df7_X.columns)","aaf97c2e":"# Concatenate\n\ncat_df11=pd.concat([df11.loc[:,\"League\":\"Division\"],df11[\"NewLeague\"]], axis=1)\ncat_df11.head()","371c9720":"df12= pd.concat([scaled_cols7,cat_df7,df7[\"Salary\"]], axis=1)\ndf12.head()","788e86a6":"df12.shape","21381a73":"#Regression","9eef87a8":"y=df2[\"Salary\"]\nX=df2.drop(\"Salary\", axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\n\n\nlinreg = LinearRegression()\nmodel = linreg.fit(X_train,y_train)\ny_pred = model.predict(X_test)\ndf2_linreg_rmse = np.sqrt(mean_squared_error(y_test,y_pred))\ndf2_linreg_rmse","eaa193d9":"y=df4[\"Salary\"]\nX=df4.drop(\"Salary\", axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\n\n\nlinreg = LinearRegression()\nmodel = linreg.fit(X_train,y_train)\ny_pred = model.predict(X_test)\ndf4_linreg_rmse = np.sqrt(mean_squared_error(y_test,y_pred))\ndf4_linreg_rmse","33134dc1":"y=df6[\"Salary\"]\nX=df6.drop(\"Salary\", axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\n\n\nlinreg = LinearRegression()\nmodel = linreg.fit(X_train,y_train)\ny_pred = model.predict(X_test)\ndf6_linreg_rmse = np.sqrt(mean_squared_error(y_test,y_pred))\ndf6_linreg_rmse","d4796612":"y=df8[\"Salary\"]\nX=df8.drop(\"Salary\", axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\n\n\nlinreg = LinearRegression()\nmodel = linreg.fit(X_train,y_train)\ny_pred = model.predict(X_test)\ndf8_linreg_rmse = np.sqrt(mean_squared_error(y_test,y_pred))\ndf8_linreg_rmse","e848ca0c":"y=df10[\"Salary\"]\nX=df10.drop(\"Salary\", axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\n\n\nlinreg = LinearRegression()\nmodel = linreg.fit(X_train,y_train)\ny_pred = model.predict(X_test)\ndf10_linreg_rmse = np.sqrt(mean_squared_error(y_test,y_pred))\ndf10_linreg_rmse","72ddc5e7":"y=df12[\"Salary\"]\nX=df12.drop(\"Salary\", axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\n\n\nlinreg = LinearRegression()\nmodel = linreg.fit(X_train,y_train)\ny_pred = model.predict(X_test)\ndf12_linreg_rmse = np.sqrt(mean_squared_error(y_test,y_pred))\ndf12_linreg_rmse","d6380884":"#Ridge Regression","66f49fc9":"y=df2[\"Salary\"]\nX=df2.drop(\"Salary\", axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\n\n\nridreg = Ridge()\nmodel = ridreg.fit(X_train, y_train)\ny_pred = model.predict(X_test)\ndf2_ridreg_rmse = np.sqrt(mean_squared_error(y_test,y_pred))\ndf2_ridreg_rmse ","4b0fd1ad":"y=df4[\"Salary\"]\nX=df4.drop(\"Salary\", axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\n\n\nridreg = Ridge()\nmodel = ridreg.fit(X_train, y_train)\ny_pred = model.predict(X_test)\ndf4_ridreg_rmse = np.sqrt(mean_squared_error(y_test,y_pred))\ndf4_ridreg_rmse ","d86f98d5":"y=df6[\"Salary\"]\nX=df6.drop(\"Salary\", axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\n\n\nridreg = Ridge()\nmodel = ridreg.fit(X_train, y_train)\ny_pred = model.predict(X_test)\ndf6_ridreg_rmse = np.sqrt(mean_squared_error(y_test,y_pred))\ndf6_ridreg_rmse ","7eecf29b":"y=df8[\"Salary\"]\nX=df8.drop(\"Salary\", axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\n\n\nridreg = Ridge()\nmodel = ridreg.fit(X_train, y_train)\ny_pred = model.predict(X_test)\ndf8_ridreg_rmse = np.sqrt(mean_squared_error(y_test,y_pred))\ndf8_ridreg_rmse ","28d827c8":"y=df10[\"Salary\"]\nX=df10.drop(\"Salary\", axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\n\n\nridreg = Ridge()\nmodel = ridreg.fit(X_train, y_train)\ny_pred = model.predict(X_test)\ndf10_ridreg_rmse = np.sqrt(mean_squared_error(y_test,y_pred))\ndf10_ridreg_rmse ","0223e5f2":"y=df12[\"Salary\"]\nX=df12.drop(\"Salary\", axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\n\n\nridreg = Ridge()\nmodel = ridreg.fit(X_train, y_train)\ny_pred = model.predict(X_test)\ndf12_ridreg_rmse = np.sqrt(mean_squared_error(y_test,y_pred))\ndf12_ridreg_rmse ","be063331":"# Lasso Regression","022a6253":"y=df2[\"Salary\"]\nX=df2.drop(\"Salary\", axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\n\n\nlasreg = Lasso()\nmodel = lasreg.fit(X_train,y_train)\ny_pred = model.predict(X_test)\ndf2_lasreg_rmse = np.sqrt(mean_squared_error(y_test,y_pred))\ndf2_lasreg_rmse","3801f850":"y=df4[\"Salary\"]\nX=df4.drop(\"Salary\", axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\n\n\nlasreg = Lasso()\nmodel = lasreg.fit(X_train,y_train)\ny_pred = model.predict(X_test)\ndf4_lasreg_rmse = np.sqrt(mean_squared_error(y_test,y_pred))\ndf4_lasreg_rmse","d953dd69":"y=df6[\"Salary\"]\nX=df6.drop(\"Salary\", axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\n\n\nlasreg = Lasso()\nmodel = lasreg.fit(X_train,y_train)\ny_pred = model.predict(X_test)\ndf6_lasreg_rmse = np.sqrt(mean_squared_error(y_test,y_pred))\ndf6_lasreg_rmse","dedbd760":"y=df8[\"Salary\"]\nX=df8.drop(\"Salary\", axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\n\n\nlasreg = Lasso()\nmodel = lasreg.fit(X_train,y_train)\ny_pred = model.predict(X_test)\ndf8_lasreg_rmse = np.sqrt(mean_squared_error(y_test,y_pred))\ndf8_lasreg_rmse","a051ce5c":"y=df10[\"Salary\"]\nX=df10.drop(\"Salary\", axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\n\n\nlasreg = Lasso()\nmodel = lasreg.fit(X_train,y_train)\ny_pred = model.predict(X_test)\ndf10_lasreg_rmse = np.sqrt(mean_squared_error(y_test,y_pred))\ndf10_lasreg_rmse","3f938e34":"y=df12[\"Salary\"]\nX=df12.drop(\"Salary\", axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\n\n\nlasreg = Lasso()\nmodel = lasreg.fit(X_train,y_train)\ny_pred = model.predict(X_test)\ndf12_lasreg_rmse = np.sqrt(mean_squared_error(y_test,y_pred))\ndf12_lasreg_rmse","7681f948":"#Elastic Net Regression","fb9a0f56":"y=df2[\"Salary\"]\nX=df2.drop(\"Salary\", axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\n\n\nenet = ElasticNet()\nmodel = enet.fit(X_train,y_train)\ny_pred = model.predict(X_test)\ndf2_enet_rmse = np.sqrt(mean_squared_error(y_test,y_pred))\ndf2_enet_rmse","e888f6ec":"y=df4[\"Salary\"]\nX=df4.drop(\"Salary\", axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\n\n\nenet = ElasticNet()\nmodel = enet.fit(X_train,y_train)\ny_pred = model.predict(X_test)\ndf4_enet_rmse = np.sqrt(mean_squared_error(y_test,y_pred))\ndf4_enet_rmse","d1fb0776":"y=df6[\"Salary\"]\nX=df6.drop(\"Salary\", axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\n\n\nenet = ElasticNet()\nmodel = enet.fit(X_train,y_train)\ny_pred = model.predict(X_test)\ndf6_enet_rmse = np.sqrt(mean_squared_error(y_test,y_pred))\ndf6_enet_rmse","834ec23f":"y=df8[\"Salary\"]\nX=df8.drop(\"Salary\", axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\n\n\nenet = ElasticNet()\nmodel = enet.fit(X_train,y_train)\ny_pred = model.predict(X_test)\ndf8_enet_rmse = np.sqrt(mean_squared_error(y_test,y_pred))\ndf8_enet_rmse","95aedd81":"y=df10[\"Salary\"]\nX=df10.drop(\"Salary\", axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\n\n\nenet = ElasticNet()\nmodel = enet.fit(X_train,y_train)\ny_pred = model.predict(X_test)\ndf10_enet_rmse = np.sqrt(mean_squared_error(y_test,y_pred))\ndf10_enet_rmse","459d8ec3":"y=df12[\"Salary\"]\nX=df12.drop(\"Salary\", axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\n\n\nenet = ElasticNet()\nmodel = enet.fit(X_train,y_train)\ny_pred = model.predict(X_test)\ndf12_enet_rmse = np.sqrt(mean_squared_error(y_test,y_pred))\ndf12_enet_rmse","1d100f4b":"# Ridge Regression Model Tuning","e2458540":"y=df2[\"Salary\"]\nX=df2.drop(\"Salary\", axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\n\n\nalpha = [0.1,0.01,0.001,0.2,0.3,0.5,0.8,0.9,1]\nridreg_cv = RidgeCV(alphas = alpha, scoring = \"neg_mean_squared_error\", cv = 10, normalize = True)\nridreg_cv.fit(X_train, y_train)\nridreg_cv.alpha_\n\n#Final Model \nridreg_tuned = Ridge(alpha = ridreg_cv.alpha_).fit(X_train,y_train)\ny_pred = ridreg_tuned.predict(X_test)\ndf2_ridge_tuned_rmse = np.sqrt(mean_squared_error(y_test,y_pred))\ndf2_ridge_tuned_rmse","267e3d6a":"y=df4[\"Salary\"]\nX=df4.drop(\"Salary\", axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\n\n\nalpha = [0.1,0.01,0.001,0.2,0.3,0.5,0.8,0.9,1]\nridreg_cv = RidgeCV(alphas = alpha, scoring = \"neg_mean_squared_error\", cv = 10, normalize = True)\nridreg_cv.fit(X_train, y_train)\nridreg_cv.alpha_\n\n#Final Model \nridreg_tuned = Ridge(alpha = ridreg_cv.alpha_).fit(X_train,y_train)\ny_pred = ridreg_tuned.predict(X_test)\ndf4_ridge_tuned_rmse = np.sqrt(mean_squared_error(y_test,y_pred))\ndf4_ridge_tuned_rmse","175f6751":"y=df6[\"Salary\"]\nX=df6.drop(\"Salary\", axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\n\n\nalpha = [0.1,0.01,0.001,0.2,0.3,0.5,0.8,0.9,1]\nridreg_cv = RidgeCV(alphas = alpha, scoring = \"neg_mean_squared_error\", cv = 10, normalize = True)\nridreg_cv.fit(X_train, y_train)\nridreg_cv.alpha_\n\n#Final Model \nridreg_tuned = Ridge(alpha = ridreg_cv.alpha_).fit(X_train,y_train)\ny_pred = ridreg_tuned.predict(X_test)\ndf6_ridge_tuned_rmse = np.sqrt(mean_squared_error(y_test,y_pred))\ndf6_ridge_tuned_rmse","e4abbec2":"y=df8[\"Salary\"]\nX=df8.drop(\"Salary\", axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\n\n\nalpha = [0.1,0.01,0.001,0.2,0.3,0.5,0.8,0.9,1]\nridreg_cv = RidgeCV(alphas = alpha, scoring = \"neg_mean_squared_error\", cv = 10, normalize = True)\nridreg_cv.fit(X_train, y_train)\nridreg_cv.alpha_\n\n#Final Model \nridreg_tuned = Ridge(alpha = ridreg_cv.alpha_).fit(X_train,y_train)\ny_pred = ridreg_tuned.predict(X_test)\ndf8_ridge_tuned_rmse = np.sqrt(mean_squared_error(y_test,y_pred))\ndf8_ridge_tuned_rmse","e8f1250e":"y=df10[\"Salary\"]\nX=df10.drop(\"Salary\", axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\n\n\nalpha = [0.1,0.01,0.001,0.2,0.3,0.5,0.8,0.9,1]\nridreg_cv = RidgeCV(alphas = alpha, scoring = \"neg_mean_squared_error\", cv = 10, normalize = True)\nridreg_cv.fit(X_train, y_train)\nridreg_cv.alpha_\n\n#Final Model \nridreg_tuned = Ridge(alpha = ridreg_cv.alpha_).fit(X_train,y_train)\ny_pred = ridreg_tuned.predict(X_test)\ndf10_ridge_tuned_rmse = np.sqrt(mean_squared_error(y_test,y_pred))\ndf10_ridge_tuned_rmse","939e9eb2":"y=df12[\"Salary\"]\nX=df12.drop(\"Salary\", axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\n\n\nalpha = [0.1,0.01,0.001,0.2,0.3,0.5,0.8,0.9,1]\nridreg_cv = RidgeCV(alphas = alpha, scoring = \"neg_mean_squared_error\", cv = 10, normalize = True)\nridreg_cv.fit(X_train, y_train)\nridreg_cv.alpha_\n\n#Final Model \nridreg_tuned = Ridge(alpha = ridreg_cv.alpha_).fit(X_train,y_train)\ny_pred = ridreg_tuned.predict(X_test)\ndf12_ridge_tuned_rmse = np.sqrt(mean_squared_error(y_test,y_pred))\ndf12_ridge_tuned_rmse","d3d6191e":"#Lasso Regression Model Tuning","67ca1a65":"y=df2[\"Salary\"]\nX=df2.drop(\"Salary\", axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\n\nalpha = [0.1,0.01,0.001,0.2,0.3,0.5,0.8,0.9,1]\nlasso_cv = LassoCV(alphas = alpha, cv = 10, normalize = True)\nlasso_cv.fit(X_train, y_train)\nlasso_cv.alpha_\n\n#Final Model \nlasso_tuned = Lasso(alpha = lasso_cv.alpha_).fit(X_train,y_train)\ny_pred = lasso_tuned.predict(X_test)\ndf2_lasso_tuned_rmse = np.sqrt(mean_squared_error(y_test, y_pred))\ndf2_lasso_tuned_rmse","8f7db9f5":"y=df4[\"Salary\"]\nX=df4.drop(\"Salary\", axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\n\nalpha = [0.1,0.01,0.001,0.2,0.3,0.5,0.8,0.9,1]\nlasso_cv = LassoCV(alphas = alpha, cv = 10, normalize = True)\nlasso_cv.fit(X_train, y_train)\nlasso_cv.alpha_\n\n#Final Model \nlasso_tuned = Lasso(alpha = lasso_cv.alpha_).fit(X_train,y_train)\ny_pred = lasso_tuned.predict(X_test)\ndf4_lasso_tuned_rmse = np.sqrt(mean_squared_error(y_test, y_pred))\ndf4_lasso_tuned_rmse","90e5ec42":"y=df6[\"Salary\"]\nX=df6.drop(\"Salary\", axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\n\nalpha = [0.1,0.01,0.001,0.2,0.3,0.5,0.8,0.9,1]\nlasso_cv = LassoCV(alphas = alpha, cv = 10, normalize = True)\nlasso_cv.fit(X_train, y_train)\nlasso_cv.alpha_\n\n#Final Model \nlasso_tuned = Lasso(alpha = lasso_cv.alpha_).fit(X_train,y_train)\ny_pred = lasso_tuned.predict(X_test)\ndf6_lasso_tuned_rmse = np.sqrt(mean_squared_error(y_test, y_pred))\ndf6_lasso_tuned_rmse","66bb9d08":"y=df8[\"Salary\"]\nX=df8.drop(\"Salary\", axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\n\nalpha = [0.1,0.01,0.001,0.2,0.3,0.5,0.8,0.9,1]\nlasso_cv = LassoCV(alphas = alpha, cv = 10, normalize = True)\nlasso_cv.fit(X_train, y_train)\nlasso_cv.alpha_\n\n#Final Model \nlasso_tuned = Lasso(alpha = lasso_cv.alpha_).fit(X_train,y_train)\ny_pred = lasso_tuned.predict(X_test)\ndf8_lasso_tuned_rmse = np.sqrt(mean_squared_error(y_test, y_pred))\ndf8_lasso_tuned_rmse","cc4041bd":"y=df10[\"Salary\"]\nX=df10.drop(\"Salary\", axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\n\nalpha = [0.1,0.01,0.001,0.2,0.3,0.5,0.8,0.9,1]\nlasso_cv = LassoCV(alphas = alpha, cv = 10, normalize = True)\nlasso_cv.fit(X_train, y_train)\nlasso_cv.alpha_\n\n#Final Model \nlasso_tuned = Lasso(alpha = lasso_cv.alpha_).fit(X_train,y_train)\ny_pred = lasso_tuned.predict(X_test)\ndf10_lasso_tuned_rmse = np.sqrt(mean_squared_error(y_test, y_pred))\ndf10_lasso_tuned_rmse","c62348e8":"y=df12[\"Salary\"]\nX=df12.drop(\"Salary\", axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\n\nalpha = [0.1,0.01,0.001,0.2,0.3,0.5,0.8,0.9,1]\nlasso_cv = LassoCV(alphas = alpha, cv = 10, normalize = True)\nlasso_cv.fit(X_train, y_train)\nlasso_cv.alpha_\n\n#Final Model \nlasso_tuned = Lasso(alpha = lasso_cv.alpha_).fit(X_train,y_train)\ny_pred = lasso_tuned.predict(X_test)\ndf12_lasso_tuned_rmse = np.sqrt(mean_squared_error(y_test, y_pred))\ndf12_lasso_tuned_rmse","b03a1be8":"#Elastic Net Regression Model Tuning","ab45ab83":"y=df2[\"Salary\"]\nX=df2.drop(\"Salary\", axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\n\nenet_params = {\"l1_ratio\": [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1],\n              \"alpha\":[0.1,0.01,0.001,0.2,0.3,0.5,0.8,0.9,1]}\n\nenet_model = ElasticNet().fit(X_train,y_train)\nenet_cv = GridSearchCV(enet_model, enet_params, cv = 10).fit(X, y)\nenet_cv.best_params_\n\n#Final Model \nenet_tuned = ElasticNet(**enet_cv.best_params_).fit(X_train,y_train)\ny_pred = enet_tuned.predict(X_test)\ndf2_enet_tuned_rmse = np.sqrt(mean_squared_error(y_test,y_pred))\ndf2_enet_tuned_rmse ","7d54f9c6":"y=df4[\"Salary\"]\nX=df4.drop(\"Salary\", axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\n\nenet_params = {\"l1_ratio\": [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1],\n              \"alpha\":[0.1,0.01,0.001,0.2,0.3,0.5,0.8,0.9,1]}\n\nenet_model = ElasticNet().fit(X_train,y_train)\nenet_cv = GridSearchCV(enet_model, enet_params, cv = 10).fit(X, y)\nenet_cv.best_params_\n\n#Final Model \nenet_tuned = ElasticNet(**enet_cv.best_params_).fit(X_train,y_train)\ny_pred = enet_tuned.predict(X_test)\ndf4_enet_tuned_rmse = np.sqrt(mean_squared_error(y_test,y_pred))\ndf4_enet_tuned_rmse ","060fdd6a":"y=df6[\"Salary\"]\nX=df6.drop(\"Salary\", axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\n\nenet_params = {\"l1_ratio\": [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1],\n              \"alpha\":[0.1,0.01,0.001,0.2,0.3,0.5,0.8,0.9,1]}\n\nenet_model = ElasticNet().fit(X_train,y_train)\nenet_cv = GridSearchCV(enet_model, enet_params, cv = 10).fit(X, y)\nenet_cv.best_params_\n\n#Final Model \nenet_tuned = ElasticNet(**enet_cv.best_params_).fit(X_train,y_train)\ny_pred = enet_tuned.predict(X_test)\ndf6_enet_tuned_rmse = np.sqrt(mean_squared_error(y_test,y_pred))\ndf6_enet_tuned_rmse ","59abb3b8":"y=df8[\"Salary\"]\nX=df8.drop(\"Salary\", axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\n\nenet_params = {\"l1_ratio\": [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1],\n              \"alpha\":[0.1,0.01,0.001,0.2,0.3,0.5,0.8,0.9,1]}\n\nenet_model = ElasticNet().fit(X_train,y_train)\nenet_cv = GridSearchCV(enet_model, enet_params, cv = 10).fit(X, y)\nenet_cv.best_params_\n\n#Final Model \nenet_tuned = ElasticNet(**enet_cv.best_params_).fit(X_train,y_train)\ny_pred = enet_tuned.predict(X_test)\ndf8_enet_tuned_rmse = np.sqrt(mean_squared_error(y_test,y_pred))\ndf8_enet_tuned_rmse ","f303c67f":"y=df10[\"Salary\"]\nX=df10.drop(\"Salary\", axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\n\nenet_params = {\"l1_ratio\": [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1],\n              \"alpha\":[0.1,0.01,0.001,0.2,0.3,0.5,0.8,0.9,1]}\n\nenet_model = ElasticNet().fit(X_train,y_train)\nenet_cv = GridSearchCV(enet_model, enet_params, cv = 10).fit(X, y)\nenet_cv.best_params_\n\n#Final Model \nenet_tuned = ElasticNet(**enet_cv.best_params_).fit(X_train,y_train)\ny_pred = enet_tuned.predict(X_test)\ndf10_enet_tuned_rmse = np.sqrt(mean_squared_error(y_test,y_pred))\ndf10_enet_tuned_rmse ","96748bbf":"y=df12[\"Salary\"]\nX=df12.drop(\"Salary\", axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\n\nenet_params = {\"l1_ratio\": [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1],\n              \"alpha\":[0.1,0.01,0.001,0.2,0.3,0.5,0.8,0.9,1]}\n\nenet_model = ElasticNet().fit(X_train,y_train)\nenet_cv = GridSearchCV(enet_model, enet_params, cv = 10).fit(X, y)\nenet_cv.best_params_\n\n#Final Model \nenet_tuned = ElasticNet(**enet_cv.best_params_).fit(X_train,y_train)\ny_pred = enet_tuned.predict(X_test)\ndf12_enet_tuned_rmse = np.sqrt(mean_squared_error(y_test,y_pred))\ndf12_enet_tuned_rmse ","f581d1db":"basicresult_df = pd.DataFrame({\"CONDITIONS\":[\"df2: Drop NA and Outliers, normalized\",\"df4: Filled NA with mean(large group), normalized and drop high correlation datas.\",\"df6: Filled NA with mean(large group), normalized\",\"df8: Filled NA with median, normalized\",\"df10: Drop NA and Outliers, log transformed\",\"df12:Filled NA with mean(small group),normalized\"],\n                              \"LINEAR\":[df2_linreg_rmse,df4_linreg_rmse,df6_linreg_rmse,df8_linreg_rmse,df10_linreg_rmse,df12_linreg_rmse],\n                               \"RIDGE\":[df2_ridreg_rmse,df4_ridreg_rmse,df6_ridreg_rmse,df8_ridreg_rmse,df10_ridreg_rmse,df12_ridreg_rmse],\n                              \"RIDGE TUNED\":[df2_ridge_tuned_rmse,df4_ridge_tuned_rmse,df6_ridge_tuned_rmse,df8_ridge_tuned_rmse,df10_ridge_tuned_rmse,df12_ridge_tuned_rmse],\n                              \"LASSO\":[df2_lasreg_rmse,df4_lasreg_rmse,df6_lasreg_rmse,df8_lasreg_rmse,df10_lasreg_rmse,df12_lasreg_rmse],\n                              \"LASSO TUNED\":[df2_lasso_tuned_rmse,df4_lasso_tuned_rmse,df6_lasso_tuned_rmse,df8_lasso_tuned_rmse,df10_lasso_tuned_rmse,df12_lasso_tuned_rmse],                              \n                              \"ELASTIC NET\":[df2_enet_rmse,df4_enet_rmse,df6_enet_rmse,df8_enet_rmse,df10_enet_rmse,df12_enet_rmse],\n                              \"ELASTIC NET TUNED\":[df2_enet_tuned_rmse,df4_enet_tuned_rmse,df6_enet_tuned_rmse,df8_enet_tuned_rmse,df10_enet_tuned_rmse,df12_enet_tuned_rmse]\n                              })\n\nbasicresult_df","7bac1976":"Format\n\n- A data frame with 322 observations of major league players on the following 20 variables.\n- AtBat Number of times at bat in 1986\n- Hits Number of hits in 1986\n- HmRun Number of home runs in 1986\n- Runs Number of runs in 1986\n- RBI Number of runs batted in in 1986\n- Walks Number of walks in 1986\n- Years Number of years in the major leagues\n- CAtBat Number of times at bat during his career\n- CHits Number of hits during his career\n- CHmRun Number of home runs during his career\n- CRuns Number of runs during his career\n- CRBI Number of runs batted in during his career\n- CWalks Number of walks during his career\n- League A factor with levels A and N indicating player\u2019s league at the end of 1986\n- Division A factor with levels E and W indicating player\u2019s division at the end of 1986\n- PutOuts Number of put outs in 1986\n- Assists Number of assists in 1986\n- Errors Number of errors in 1986\n- Salary 1987 annual salary on opening day in thousands of dollars\n- NewLeague A factor with levels A and N indicating player\u2019s league at the beginning of 1987","e50278b0":"Also, you can see mean, min, max data for salary. I'll try different methods for the NaN data.","351f4f47":"![](https:\/\/iasbh.tmgrup.com.tr\/88c34e\/650\/344\/0\/35\/450\/273?u=http:\/\/i.sabah.com.tr\/sbh\/2017\/01\/30\/beyzbol-nedir-nasil-oynanir-1485764966753.jpg)","f495389f":"# Explore the Data","94b922a5":"> The aim of this study is to set up linear regression models for the Hitters data set and minimize the error scores in 6 different data sets that have undergone different preprocessing. The studies conducted are as follows:\n\n1. Import Hitters Data\n\n2. Exploraty Data Analysis\n\n - Structural information of the dataset was examined.\n \n - The types of variables in the dataset were examined.\n \n - Size information of the dataset was accessed.\n \n - The number of missing observations from which variable in the data set was accessed. It was observed that there were 59 missing observations only in \"Salary\" which was dependent variable.\n \n - Descriptive statistics of the data set were examined.\n \n\n3. In the Data Pre-Processing section;\n\n - For df2: NA values are dropped, Outliers are detected by LOF and dropped. Dummy variables were created. The X variables were normalized.\n\n - For df4: Filled NA values with mean (with classify), drop high correlation columns. Dummy variables were created. The X variables were normalized.\n\n - For df6: Filled NA values with mean (with classify). Dummy variables were created. The X variables were normalized.\n \n - For df8: Filled NA values with median (with classify). Dummy variables were created. The X variables were normalized.\n \n - For df10: NA values are dropped, Outliers are detected by LOF and dropped , Log transformed\n \n - For df12: Filled NA values with median (with smaller classify). Dummy variables were created. The X variables were normalized.\n\n\n4. During the Model Building phase;\n\n> By applying Linear, Ridge, Lasso, ElasticNet machine learning models, RMSE values representing the difference between real values and predicted values were calculated. Later, hyperparameter optimizations were applied for Ridge, Lasso and ElasticNet to further reduce the error value.\n\n\n5. Result \n\n> When the model created as a result of Elastic Net Hyperparameter optimization was applied to the df8 Data Frame, the lowest RMSE was obtained. (279)","f6f8f221":"- As you see 59 salary data is 'NaN', In my believe, this is huge for according all data.","30661fc3":"# Reports","8a00a69c":"## 1.Option","e90c70f4":"# Feature Engineering","422d7bda":"## 3.Option","6a5f25b9":"- Also, correlation between \"CHits\", \"CatBat\", \"CRuns\" and \"CRBI\" is high.","e4f177db":"# MODEL TUNING","66a27830":"## 2.Option","76762523":"## 6.Option","8e4f7bbe":"## 5.Option","347f1129":"# MODELING","d2ff18bd":"# Project Target:\n\nCreate Linear Regression Models for salary predict.\n\n# Steps:\n\n1. Explore the Data\n\n\n2. Data Preparation\n  - 1.Option : Drop NA and Outliers, normalized\n  - 2.Option : Filled NA with mean, normalized and drop high correlation datas.\n  - 3.Option : Filled NA with mean, normalized\n  - 4.Option : Filled NA with median, normalized\n  - 5.Option : Drop NA and Outliers, log transformed\n  - 6.Option : Filled NA with mean,normalized\n  \n  \n\n3. Create Salary Predict Models\n  - Linear Regression\n  - Ridge Regression Model\n  - Lasso Regression Model\n  - Elastic Net Regression Mode\n\n  \n\n4. Models Tuning\n\n5. Reports","f228a8f8":"## 4.Option"}}