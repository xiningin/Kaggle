{"cell_type":{"f0766308":"code","c0ba5cac":"code","65a73d3f":"code","a057e366":"code","d50f6b62":"code","c32e4025":"code","66d1df9c":"code","d1ceb73e":"code","d48d9c8d":"code","fe1dcc89":"code","ad5a725a":"code","7bdf750d":"code","79ab70dd":"code","833ec694":"code","98226395":"code","54c2e45e":"code","64bd8d32":"code","94120c85":"code","fe7221a6":"code","bb870833":"code","c0150fab":"code","54b72a6b":"markdown","790e5e26":"markdown","3a7423bb":"markdown","854b2adc":"markdown","ccca3761":"markdown","58c669aa":"markdown","c1a6c459":"markdown","27b96675":"markdown","f60cd456":"markdown"},"source":{"f0766308":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport nltk\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c0ba5cac":"def jaccard(str1, str2): \n    str1, str2 = str(str1), str(str2)\n    a = set(str1.lower().split()) \n    b = set(str2.lower().split())\n    c = a.intersection(b)\n    return float(len(c)) \/ (len(a) + len(b) - len(c))","65a73d3f":"train = pd.read_csv(\"\/kaggle\/input\/tweet-sentiment-extraction\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/tweet-sentiment-extraction\/test.csv\")\nsample_submission = pd.read_csv(\"\/kaggle\/input\/tweet-sentiment-extraction\/sample_submission.csv\")","a057e366":"train.head()","d50f6b62":"v1 = train.loc[train.sentiment=='neutral', 'text'].values.tolist()\nv2 = train.loc[train.sentiment=='neutral', 'selected_text'].values.tolist()\nnp.mean([jaccard(w1, w2) for w1, w2 in zip(v1, v2)])","c32e4025":"test.head()","66d1df9c":"sample_submission.head()","d1ceb73e":"isNeutral = test.loc[test['sentiment'] == 'neutral', 'textID'].values.tolist()\ndef get_selected_text_neutral(textID, df=test):\n    if textID in isNeutral:\n        return df.loc[df.textID==textID, 'text'].values.tolist()[0]\n    else:\n        return np.nan\ndef treat_neutral(sample_submission):\n    sample_submission['selected_text'] = sample_submission['textID'].apply(get_selected_text_neutral, df=test)\n    return sample_submission\nsample_submission = treat_neutral(sample_submission)\nsample_submission.head()","d48d9c8d":"from nltk import pos_tag, ngrams\n# nltk.download('sentiwordnet')\nfrom nltk.corpus import sentiwordnet as swn, wordnet as wn\nfrom nltk.tokenize import word_tokenize\nfrom nltk.stem import WordNetLemmatizer, PorterStemmer\nlemmatizer = WordNetLemmatizer()\nps = PorterStemmer()","fe1dcc89":"import string\nfiltre = [wn.NOUN, wn.ADJ, wn.ADV, wn.VERB]","ad5a725a":"def penn_to_wn(tag):\n    \"\"\"\n    Convert between the PennTreebank tags to simple Wordnet tags\n    \"\"\"\n    if tag.startswith('J'):\n        return wn.ADJ\n    elif tag.startswith('N'):\n        return wn.NOUN\n    elif tag.startswith('R'):\n        return wn.ADV\n    elif tag.startswith('V'):\n        return wn.VERB\n    else:\n        return None\n        \ndef get_sentiment(word, tag, verbose=0):\n    \"\"\" returns list of pos neg and objective score. But returns empty list if not present in senti wordnet. \"\"\"\n    wn_tag = penn_to_wn(tag)\n    if wn_tag not in filtre:\n        return []\n\n    lemma = lemmatizer.lemmatize(word, pos=wn_tag)\n    if verbose:\n        print(f'Lemmatizer : {lemma}')\n    if not lemma:\n        return []\n\n    synsets = wn.synsets(word, pos=wn_tag)\n    if verbose:\n        print(f'Synsets : {synsets}')\n    if not synsets:\n        return []\n\n    swn_synset_pos = []\n    swn_synset_neg = []\n    for synset in synsets:\n        swn_synset = swn.senti_synset(synset.name())\n        if verbose:\n            print(f'Pos score : {swn_synset.pos_score()}, Neg score : {swn_synset.neg_score()}')\n        swn_synset_pos.append(swn_synset.pos_score())\n        swn_synset_neg.append(swn_synset.neg_score())\n    return [np.mean(swn_synset_pos),np.mean(swn_synset_neg)]#,swn_synset.obj_score()\n\ndef robustify(text=''):\n    if type(text) != str:\n        try:\n            text = str(text)\n        except:\n            text = ''\n    return text\n\ndef score(text='', verbose=0):\n    text = robustify(text)\n    for dot in string.punctuation:\n        text = text.replace(dot,'')\n    tokenized_text = word_tokenize(text)\n    if verbose:\n        print(f'Tokenized text : {tokenized_text}')\n#     stemmed_text = [ps.stem(x) for x in tokenized_text]\n#     print(f'Stemmed text : {stemmed_text}')\n#     tags = pos_tag(stemmed_text)\n    tags = pos_tag(tokenized_text)\n    senti_val = [(x.lower(), get_sentiment(x.lower(),y, verbose)) for (x,y) in tags]\n    senti_val = list(filter(lambda x : len(x[1])>0, senti_val))\n    return senti_val","7bdf750d":"score('that`s great!! weee!! visitors!', verbose=1)","79ab70dd":"score('happy bday!', verbose=1)","833ec694":"score('Recession hit Veronique Branquinho', verbose=1)","98226395":"test['senti_val'] = test['text'].apply(score)","54c2e45e":"test.loc[test.sentiment != 'neutral'].head()","64bd8d32":"def treat_senti_val(sentiment, senti_val):\n    if sentiment == 'neutral':\n        return []\n    sent = 0 if sentiment=='positive' else 1\n    return [(t[0], t[1][sent]) for t in senti_val] # if t[1][sent]>0\ntest['senti_val'] = test.apply(lambda df: treat_senti_val(df.sentiment, df.senti_val), axis=1)\ntest.head(20)","94120c85":"def get_selected_text(text, senti_val):\n    if len(senti_val)==0:\n        return text\n    else:\n        return ' '.join([t[0] for t in senti_val if t[1]>0.1])\ntest['selected_text'] = test.apply(lambda df:get_selected_text(df['text'],df['senti_val']), axis=1)\ntest.head()","fe7221a6":"for i, row in test.loc[test.sentiment!='neutral'].iterrows():\n    sample_submission.loc[sample_submission.textID==row['textID'], 'selected_text'] = row['selected_text']","bb870833":"sample_submission.head()","c0150fab":"sample_submission.to_csv('submission.csv', index=False)","54b72a6b":"# An all-nltk basic approach","790e5e26":"As we say, let's first return the whole original text for all neutral labelled samples.","3a7423bb":"Let's load our data.","854b2adc":"Now, let's treat positive and negative texts with the help of nltk.","ccca3761":"In this notebook I will present an all-nltk very basic approach to the problem. It is not as well performing as neural-net based models, but it can ve a good starting point for beginners to grasp what is happening.","58c669aa":"Therefore, for the test, it seems a good strategy to return the text itself for neutral sentiment.","c1a6c459":"In case no sentiments have been returned, we will return the original text. Note that this code retreats the neutral case we have dealt with at the beginning.","27b96675":"The metrics used for evaluation is, as defined in the evaluation rules :","f60cd456":"We notice that for neutral sentiment, the selected text is nearly always the text itself. Let's check it :"}}