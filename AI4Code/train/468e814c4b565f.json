{"cell_type":{"5ba9ff39":"code","7eb139b6":"code","81c56162":"code","faa63dab":"code","a53f5e08":"markdown","ab84e688":"markdown","d12072f3":"markdown"},"source":{"5ba9ff39":"# Download the ch2better template image for display\n!wget https:\/\/github.com\/Chaogan-Yan\/DPABI\/raw\/master\/Templates\/ch2better.nii","7eb139b6":"\"\"\"\n    Load and display a subject's spatial map\n\"\"\"\n\nimport numpy as np # linear algebra\nimport nilearn as nl\nimport nilearn.plotting as nlplt\nimport nibabel as nib\nimport h5py\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nmask_filename = '..\/input\/fmri-mask\/fMRI_mask.nii'\nsubject_filename = '..\/input\/trends-assessment-prediction\/fMRI_train\/10004.mat'\nsmri_filename = 'ch2better.nii'\nmask_niimg = nl.image.load_img(mask_filename)\n\ndef load_subject(filename, mask_niimg):\n    \"\"\"\n    Load a subject saved in .mat format with\n        the version 7.3 flag. Return the subject\n        niimg, using a mask niimg as a template\n        for nifti headers.\n        \n    Args:\n        filename    <str>            the .mat filename for the subject data\n        mask_niimg  niimg object     the mask niimg object used for nifti headers\n    \"\"\"\n    subject_data = None\n    with h5py.File(subject_filename, 'r') as f:\n        subject_data = f['SM_feature'][()]\n    # It's necessary to reorient the axes, since h5py flips axis order\n    subject_data = np.moveaxis(subject_data, [0,1,2,3], [3,2,1,0])\n    subject_niimg = nl.image.new_img_like(mask_niimg, subject_data, affine=mask_niimg.affine, copy_header=True)\n    return subject_niimg\nsubject_niimg = load_subject(subject_filename, mask_niimg)\nprint(\"Image shape is %s\" % (str(subject_niimg.shape)))\nnum_components = subject_niimg.shape[-1]\nprint(\"Detected {num_components} spatial maps\".format(num_components=num_components))\n","81c56162":"nlplt.plot_prob_atlas(subject_niimg, bg_img=smri_filename, view_type='filled_contours', draw_cross=False, title='All %d spatial maps' % num_components, threshold='auto')","faa63dab":"grid_size = int(np.ceil(np.sqrt(num_components)))\nfig, axes = plt.subplots(grid_size, grid_size, figsize=(grid_size*10, grid_size*10))\n[axi.set_axis_off() for axi in axes.ravel()]\nrow = -1\nfor i, cur_img in enumerate(nl.image.iter_img(subject_niimg)):\n    col = i % grid_size\n    if col == 0:\n        row += 1\n    nlplt.plot_stat_map(cur_img, bg_img=smri_filename, title=\"IC %d\" % i, axes=axes[row, col], threshold=3, colorbar=False)","a53f5e08":"## Displaying all Components in a Probability Atlas\nFirst, we will display the 53 spatial maps in one complete atlas using the nilearn `plot_prob_atlas` function. These \nmaps will be overlaid on a structural MRI template. ","ab84e688":"# Loading and Exploring Spatial Maps\n\nIn this notebook, we show how to load and display subject spatial map information for fMRI spatial maps. \nIn general the spatial maps are saved as 4-D tensors\n\n$$\\mathcal{X}_i \\in \\mathbb{R}^{X \\times Y \\times Z \\times K}$$\n\nwhere $X$, $Y$, and $Z$ are the three spatial dimensions of the volume, and $K$ is the number of independent \ncomponents.\n\n## File Format\n\nThe subject spatial maps have been saved in `.mat` files using the `v7.3` flag, so they must be loaded as `h5py` datasets,\nand a nifti file must be used to set the headers for display purposes. We have included the `load_subject` function, which \ntakes a subject `.mat` filename, and the loaded nilearn image to use for setting the headers.","d12072f3":"## Displaying Individual Component Maps\n\nAdditionally, we can separately display each of the 53 maps to get a more complete view\nof individual component structure."}}