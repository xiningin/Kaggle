{"cell_type":{"6e8aea92":"code","f292173e":"code","4bd821ce":"code","6d78b9e9":"code","6ae6e9b3":"code","d25d2d1c":"code","4c619401":"code","94426abb":"code","c2c59746":"code","465ebe74":"code","fad61e85":"code","a1ebf33f":"code","b2606084":"code","e323e7e5":"code","fb2be592":"code","c0773376":"code","45d57459":"code","f53b6a72":"code","0e148f03":"code","06f8e4ad":"code","d79724ed":"code","45c2c0fd":"code","51a673fe":"code","a4a0d4bc":"code","4456a17d":"code","47197b50":"code","048b2e6c":"code","0705449d":"code","943c705a":"code","f3f2d8a2":"code","ef228f5c":"code","1b691272":"code","e825b1b2":"code","971acfae":"code","0871d2ec":"code","2c9545a0":"code","81aedcea":"code","bca12adf":"code","ff98dffc":"code","cd730ace":"code","43e6f80b":"code","0c3050b4":"code","55954672":"code","6094a7d2":"code","3e1fc90c":"code","084676f8":"code","ebda6853":"code","f992fdbb":"code","9316a4e0":"code","1beed2e9":"code","64140110":"code","cc7a82eb":"code","2c1a9ea4":"code","a7243dd8":"code","cd9151db":"code","60aeb9e0":"code","e13287ce":"code","a064df89":"code","c88efaac":"markdown","5246458f":"markdown","c108b02b":"markdown","502c8bfa":"markdown","042b49e4":"markdown","1590fe43":"markdown","c18a98ca":"markdown","4a7797be":"markdown","e5f687ce":"markdown","552ef327":"markdown","aa0d0eff":"markdown","74293eba":"markdown","64435af5":"markdown","d857149e":"markdown","d70996f1":"markdown","6a1bd20c":"markdown","68e8572e":"markdown","560997fc":"markdown","96bab9af":"markdown","2f1b25f4":"markdown","3620ba50":"markdown"},"source":{"6e8aea92":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f292173e":"FILEPATH = '\/kaggle\/input\/data-analyst-jobs\/DataAnalyst.csv'","4bd821ce":"df = pd.read_csv(FILEPATH)","6d78b9e9":"df.describe()","6ae6e9b3":"df.info()","d25d2d1c":"df.head()","4c619401":"df.isnull().any().any()","94426abb":"df.isnull().any()","c2c59746":"def get_missing_values(c_df):\n    \n    values = c_df.isnull().sum()\n    percentage = 100 * c_df.isnull().sum() \/ len(c_df)\n    table = pd.concat([values, percentage.round(2)], axis=1)\n    table.columns = ['No of missing values', '% of missing values']\n    \n    return table[table['No of missing values'] != 0].sort_values('% of missing values', ascending = False).style.background_gradient('Greens')","465ebe74":"get_missing_values(df)","fad61e85":"import missingno as miss","a1ebf33f":"miss.matrix(df)","b2606084":"miss.dendrogram(df)","e323e7e5":"miss.bar(df)","fb2be592":"df.isnull().sum()","c0773376":"df.isnull().sum().sum()","45d57459":"df.columns","f53b6a72":"# as `Unnamed: 0` doesn't do anything, re can remove them.\ndf = df.drop(['Unnamed: 0'], axis = 1)","0e148f03":"# Old company\ndf['Founded'].min()","06f8e4ad":"df['Founded'].drop_duplicates().nsmallest(5).iloc[-1]","d79724ed":"df['Founded'].drop_duplicates().nsmallest(10)","45c2c0fd":"df['Founded'].max()","51a673fe":"# New company\ndf['Founded'].drop_duplicates().nlargest(10)","a4a0d4bc":"# We can remove the company name as it is trivial\ndf.dropna(subset = [\"Company Name\"], inplace=True)","4456a17d":"df_companies = df['Company Name']","47197b50":"df_companies","048b2e6c":"# remove the rating `\\n3.2`\ndef clean_company_name(company_name):\n    \n    if('\\n' not in company_name):\n        return company_name\n    \n    company_name = company_name[0: company_name.index('\\n')]\n    \n    return company_name","0705449d":"df['Company Name'] = df['Company Name'].apply(clean_company_name)","943c705a":"df['Size'].unique()","f3f2d8a2":"df['Type of ownership'].unique()","ef228f5c":"# replace Type of ownership -1 to Unknown as -1 doesn't change anything\ndf = df.replace({'Type of ownership': '-1'}, {'Type of ownership': 'Unknown'})","1b691272":"df.sample(2)","e825b1b2":"df['Location_State'] = df['Location'].apply(lambda x: x.split(',')[1].strip())\ndf['Location_City'] = df['Location'].apply(lambda x: x.split(',')[0].strip())","971acfae":"df.sample(2)","0871d2ec":"# How many companies are here\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\ndef show_simple_bar_plot(col):\n\n    ax = sns.barplot(\n        x = df[col].value_counts().keys(), \n        y = df[col].value_counts().values\n    )\n    ax.set_xticklabels(ax.get_xticklabels(), rotation = 90)\n    plt.show()","2c9545a0":"show_simple_bar_plot('Type of ownership')","81aedcea":"# replace Size -1 to Unknown as -1 doesn't change anything\ndf = df.replace({'Size': '-1'}, {'Size': 'Unknown'})","bca12adf":"show_simple_bar_plot('Size')","ff98dffc":"# clean up salary column\ndef clean_salary(salary):\n    \n    if('(' not in salary):\n        return salary\n    \n    salary = salary[0: salary.index('(')]\n    \n    return salary","cd730ace":"df['Salary Estimate'] = df['Salary Estimate'].apply(clean_salary)","43e6f80b":"import re\n\ndef get_salary_min(salary):\n    \n    salary_parts = salary.split('\u2212')\n    \n    min_salary_part = salary_parts[0].strip()\n    \n    min_salary = int(re.search(r'\\d+', min_salary_part).group())\n    \n    return min_salary","0c3050b4":"def get_salary_max(salary):\n    \n    salary_parts = salary.split('-')\n    \n#     print(salary_parts)\n    \n    max_salary_part = salary_parts[1].strip()\n    \n    max_salary = int(re.search(r'\\d+', max_salary_part).group())\n    \n    return max_salary","55954672":"df['Salary Min'] = df['Salary Estimate'].apply(get_salary_min)\ndf['Salary Max'] = df['Salary Estimate'].apply(get_salary_max)","6094a7d2":"# Top 5 salaries\ndf['Salary Max'].drop_duplicates().nlargest(10)","3e1fc90c":"# Leasst 5 salaries\ndf['Salary Min'].drop_duplicates().nsmallest(10)","084676f8":"# Easy apply fix\ndf['Easy Apply'].unique()","ebda6853":"df = df.replace({'Easy Apply': 'True'}, {'Easy Apply': 1})\ndf = df.replace({'Easy Apply': '-1'}, {'Easy Apply': 0})","f992fdbb":"# show top industries for min, max salary\n\nimport plotly.express as px\nimport plotly.graph_objects as go\n\ndf_ownership = df.groupby('Location')[['Salary Max','Salary Min']].mean().sort_values(['Salary Max','Salary Min'], ascending = True).head(20)\n\nfig = go.Figure()\n\nfig.add_trace(go.Bar(x = df_ownership.index, y = df_ownership['Salary Min'], name = 'Min Salary', marker = dict(color = 'green')))\nfig.add_trace(go.Bar(x = df_ownership.index, y = df_ownership['Salary Max'], name = 'Max Salary', marker = dict(color = 'orange')))\n\nfig.update_layout(title = 'Top Industries and theri Salary Range', barmode = 'stack')\n\nfig.show()","9316a4e0":"fig = px.scatter(df, x = \"Salary Min\", y = \"Salary Max\",\n                 color = \"Salary Max\", color_continuous_scale = 'Inferno')\n\nfig.show()","1beed2e9":"df_salary_min_max = df[['Salary Max','Salary Min']]\n# df_salary_min_max\n\n\nfig = px.histogram(df_salary_min_max, x = \"Salary Min\")\nfig.show()","64140110":"df.sample(2)","cc7a82eb":"# Which user collected the most?\nstate_df = pd.DataFrame(df['Location_State'].value_counts().head(10)).reset_index()\n\nstate_df.style.background_gradient(cmap='YlGnBu', low=0, high=0, axis=0, subset=None)","2c1a9ea4":"state_fig = go.Figure(data=[go.Pie(labels=state_df['index'],\n                             values=state_df['Location_State'],\n                             hole=.7,\n                             title = 'Count by State',\n                             marker_colors = px.colors.sequential.Blues_r,\n                            )\n                     ])\nstate_fig.update_layout(title = 'Job Count % by State')\nstate_fig.show()","a7243dd8":"# Which user collected the most?\ncity_df = pd.DataFrame(df['Location_City'].value_counts().head(10)).reset_index()\n\ncity_df.style.background_gradient(cmap='YlGnBu', low=0, high=0, axis=0, subset=None)","cd9151db":"city_fig = go.Figure(data=[go.Pie(labels=city_df['index'],\n                             values=city_df['Location_City'],\n                             hole=.7,\n                             title = 'Count % by City',\n                             marker_colors = px.colors.sequential.Blues_r,\n                            )\n                     ])\ncity_fig.update_layout(title = 'Job Count % by Location City')\ncity_fig.show()","60aeb9e0":"df.sample(2)","e13287ce":"job_desc = ', '.join(df['Job Description'])","a064df89":"# Make a word cloud out of Job description\n\nfrom wordcloud import WordCloud, STOPWORDS\nfrom PIL import Image\n\nstopwords = set(STOPWORDS)\n\ndef transform_format(val):\n    if val == 0:\n        return 255\n    else:\n        return val\n\nmask_image = np.array(Image.open(\"..\/input\/pictures2\/man.png\"))\n\ntransformed_mask_image = np.ndarray((mask_image.shape[0], mask_image.shape[1]), np.int32)\n\nfor i in range(len(mask_image)):\n    transformed_mask_image[i] = list(map(transform_format, mask_image[i]))\n\nwc = WordCloud(background_color = \"white\", max_words = 1000, mask = transformed_mask_image,\n               stopwords = stopwords, contour_width = 0, contour_color = 'black')\n\nwc.generate(job_desc)\n\n# show\nplt.figure(figsize = [30, 20])\nplt.imshow(wc, interpolation = 'bilinear')\nplt.axis(\"off\")\nplt.show()","c88efaac":"## Plotly Time\n\nLet's play around with Plotly to visualize things better.","5246458f":"We will remove `Unnamed: 0` as it is not significant.","c108b02b":"**Observation:**\n\n* We can see that `Company - Private` has more jobs.\n* Not sure what to do with `Unknown`. Let's keep it as it is for now. We will fix them later.\n* Self-employed is the least in the jobs count.","502c8bfa":"## Job Desc - Word Cloud\n\nLet's create a word cloud out of job description in the dataset.","042b49e4":"As the company name comes with rating with newline, we can remove them. ","1590fe43":"### Clean up Location","c18a98ca":"### Understanding Founded column","4a7797be":"As we need the salary minimum and maximum to analyze and visualize better, we are going to create those 2 columns from the `Salary Estimation`.","e5f687ce":"## Data Extraction","552ef327":"**Final Notes:**\n\nI am adding things still. You can come back and check for more information.\n\nAlso, if you **like my notebook**, <font style=\"color:blue;size:14px;\">please upvote it<\/font> as it will motivate me to come up with better approach in the upcoming notebooks.","aa0d0eff":"## Plot Time","74293eba":"**Observation:**\n\n* Small to medium companies (51 - 200 employees) are more likely to hire data analysts. \n* Big companies (10000+ employees) are in the top second to hire Data analysts.","64435af5":"<font color=\"blue\" size=+1.5><b>Check out my other kernels<\/b><\/font>\n\n<table style=\"font-family: 'Trebuchet MS', Arial, Helvetica, sans-serif;border-collapse: collapse;width: 100%;\">\n  <tr>\n    <th style=\"border: 1px solid #ddd;padding: 8px; padding-top: 12px;padding-bottom: 12px;text-align: left;background-color: #2987E7;color: white;\">Notebook<\/th>\n    <th style=\"border: 1px solid #ddd;padding: 8px; padding-top: 12px;padding-bottom: 12px;text-align: left;background-color: #2987E7;color: white;\">Tags<\/th>\n  <\/tr>\n  <tr>\n    <td style=\"text-align: left\"><a href=\"https:\/\/www.kaggle.com\/rajacsp\/sof-questions-eda-and-visual\">SOF Questions - EDA and Visual<\/a> <\/td>\n    <td style=\"text-align: left\">Data Visual, Plotly<\/td>\n  <\/tr>\n  <tr>\n    <td style=\"background-color: #f2f2f2;text-align: left\"><a href=\"https:\/\/www.kaggle.com\/rajacsp\/netflix-visualization-plotly-plots-treemap\">Netflix - Visualization, Plotly, Plots, and Treemap<\/a> <\/td>\n    <td style=\"background-color: #f2f2f2;text-align: left\">Data Visual, Data Cleaning, Plotly<\/td>\n  <\/tr>\n  <tr>\n    <td style=\"text-align: left\"><a href=\"https:\/\/www.kaggle.com\/rajacsp\/prediction-with-various-algorithms\">Prediction with various Algorithms<\/a> <\/td>\n    <td style=\"text-align: left\">Random Forest, Logistic Regression<\/td>\n  <\/tr>\n  <tr>\n    <td style=\"background-color: #f2f2f2;text-align: left\"><a href=\"https:\/\/www.kaggle.com\/rajacsp\/eda-and-visualization\">EDA and Visualization<\/a> <\/td>\n    <td style=\"background-color: #f2f2f2;text-align: left\">Data Cleaning, Data Visual<\/td>\n  <\/tr>\n  <tr>\n    <td style=\"text-align: left\"><a href=\"https:\/\/www.kaggle.com\/rajacsp\/job-analysis-eda-visual\">Job Analysis - EDA and Visual<\/a> <\/td>\n    <td style=\"text-align: left\">Data Visual, EDA, Plotly<\/td>\n  <\/tr>   \n  <tr>\n    <td style=\"background-color: #f2f2f2;text-align: left\"><a href=\"https:\/\/www.kaggle.com\/rajacsp\/estonia-disaster-visualization\">Estonia Disaster - Visualization<\/a> <\/td>\n    <td style=\"background-color: #f2f2f2;text-align: left\">Data Visual, EDA, Data Cleaning<\/td>\n  <\/tr>\n    \n  <tr>\n    <td style=\"text-align: left\"><a href=\"https:\/\/www.kaggle.com\/rajacsp\/pandas-dundas-challenge-100\" >Pandas 100+ exercises collection<\/a><\/td>\n    <td style=\"text-align: left\">Pandas, Data Manipulation<\/td>\n  <\/tr>   \n  <tr>\n    <td style=\"background-color: #f2f2f2;text-align: left\"><a href=\"https:\/\/www.kaggle.com\/rajacsp\/prediction-with-various-algorithms\">Credit Card Fraud - Prediction with various algorithms<\/a><\/td>\n    <td style=\"background-color: #f2f2f2;text-align: left\">Various ML Algorithms<\/td>\n  <\/tr>  \n  <tr>\n    <td style=\"text-align: left\"><a href=\"https:\/\/www.kaggle.com\/rajacsp\/linear-equations-real-time\">Linear Equations - Real Time<\/a> <\/td>\n    <td style=\"text-align: left\">Linear Equation<\/td>\n  <\/tr>  \n<\/table>\n","d857149e":"### Clean Easy Apply Column","d70996f1":"## Null Visualization\n\nLet's do the visualization on the null values to understand our data better. I am using `missingno` for the null visualization.","6a1bd20c":"### Salary Column Cleanup","68e8572e":"**Observation:**\n\n* The data is almost not null. We can see only one entry missing in `Company Name`","560997fc":"### Clean up Company Name","96bab9af":"**Observation:**\n\n* Newark tops the list with the maximum salary range followed by Daly city California.\n* Stanford and San Francisco - California has the least in the salary category.","2f1b25f4":"**Observation:**\n\n* The above diagram shows the salary range very clearly.\n* There are some jobs which you get paid only 24K (wondering who would apply for thos jobs?).\n* Maximum salary is 190 which is very alluring.","3620ba50":"**Observation:**\n\n* The word cloud turned out nice!\n* Every one need `Experience` in the job application huh? Don't they accept Kaggle notebook experience?"}}