{"cell_type":{"0f3ed5fe":"code","d3fbc481":"code","58928c68":"code","7f86cafc":"code","98357498":"code","a5e23a21":"code","d90279cf":"code","f131a281":"code","faec4256":"code","24c1763d":"code","77287aa7":"code","ce5f68bb":"code","11a888ec":"code","22bfe64e":"code","3dcc91ff":"code","a2ff7321":"code","7ed735a1":"code","c15361ff":"code","d6a6ed62":"code","0ec68596":"code","a95a3764":"code","6a61a822":"code","aecdeb15":"code","5e06f6f0":"code","fb507e28":"code","78950bca":"code","63ae64c2":"code","aa3203ec":"code","c1ad99a7":"code","5418bbcd":"code","024ca5ba":"code","427b14e4":"code","62d1efe7":"code","1204b96f":"code","507624b5":"code","d1daea0b":"markdown","5bde90ef":"markdown","6236a24c":"markdown","10875f9e":"markdown","9a3ea6e7":"markdown","e50e16c6":"markdown","7e598cab":"markdown","c3e8138e":"markdown","a084e921":"markdown","d7729d2c":"markdown"},"source":{"0f3ed5fe":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\n# manipulating the default plot size\nplt.rcParams['figure.figsize'] = 10,12\n\nimport warnings\nwarnings.filterwarnings('ignore')","d3fbc481":"# for date and time opeations\nfrom datetime import datetime\n# for file and folder operations\nimport os\n# for regular expression opeations\nimport re\n# for listing files in a folder\nimport glob\n# for getting web contents\nimport requests \n# for scraping web contents\nfrom bs4 import BeautifulSoup","58928c68":"link = 'https:\/\/www.mohfw.gov.in'\nreq = requests.get(link)\nsoup = BeautifulSoup(req.content,\"html.parser\")","7f86cafc":"thead = soup.find_all('thead')[-1]\nhead = thead.find_all('tr')\ntbody = soup.find_all('tbody')[-1]\nbody = tbody.find_all('tr')","98357498":"head_rows = []\n# container for table body \/ contents\nbody_rows = []\n\n# loop through the head and append each row to head\nfor tr in head:\n    td = tr.find_all(['th', 'td'])\n    row = [i.text for i in td]\n    head_rows.append(row)\n# print(head_rows)\n\n# loop through the body and append each row to body\nfor tr in body:\n    td = tr.find_all(['th', 'td'])\n    row = [i.text for i in td]\n    body_rows.append(row)","a5e23a21":"df_bs = pd.DataFrame(body_rows[:len(body_rows)-6],columns=head_rows[0])\ndf_bs.drop('S. No.',axis = 1, inplace=True)","d90279cf":"df_bs.head(36)","f131a281":"df_India = df_bs.copy()\nnow = datetime.now()\ndf_India['Date'] = now.strftime(\"%m\/%d\/%Y\")\ndf_India['Date'] = pd.to_datetime(df_India['Date'],format = \"%m\/%d\/%Y\")\ndf_India.head(36)","faec4256":"df_India['Name of State \/ UT'] = df_India['Name of State \/ UT'].str.replace('#', '')\ndf_India['Deaths**'] = df_India['Deaths**'].str.replace('#', '')\n\ndf_India = df_India.rename(columns={'Active Cases*': 'Active'})   \ndf_India = df_India.rename(columns={'Total Confirmed cases*': 'Confirmed'})\ndf_India = df_India.rename(columns={'Cured\/Discharged\/Migrated*':'Cured'})\ndf_India = df_India.rename(columns={'Name of State \/ UT':'State\/UnionTerritory'})\ndf_India = df_India.rename(columns={'Name of State \/ UT':'State\/UnionTerritory'})\ndf_India = df_India.rename(columns={'Deaths ( more than 70% cases due to comorbidities )':'Deaths', \n                                      'Deaths**':'Deaths'})","24c1763d":"df_India.head(36)","77287aa7":"df_India['Date'] = pd.to_datetime(df_India['Date'])\ndf_India['State\/UnionTerritory'].replace('Chattisgarh', 'Chhattisgarh', inplace=True)\ndf_India['State\/UnionTerritory'].replace('Pondicherry', 'Puducherry', inplace=True) ","ce5f68bb":"# save file as a scv file\ndf_India.to_csv('COVID-19.csv', index=False)","11a888ec":"df= pd.read_csv('COVID-19.csv')\ndf_india = df.copy()\ndf","22bfe64e":"df_temp = df.drop(['Date'],axis=1)\ndf_temp.style.background_gradient(cmap='Reds')","3dcc91ff":"today = now.strftime(\"%Y\/%m\/%d\")\ntotal_activeCases = df['Active'].sum()\nprint(\"Total people who were Active as of \"+today+\" are: \", total_activeCases)\ntotal_cured = df['Cured'].sum()\nprint(\"Total people who were cured as of \"+today+\" are: \", total_cured)\ntotal_cases = df['Confirmed'].sum()\nprint(\"Total people who were detected COVID+ve as of \"+today+\" are: \", total_cases)\ntotal_death = df['Deaths'].sum()\nprint(\"Total people who died due to COVID19 as of \"+today+\" are: \",total_death)","a2ff7321":"tot_active = df.groupby('State\/UnionTerritory')['Active'].sum().sort_values(ascending=False).to_frame()\ntot_active.style.background_gradient(cmap='Reds')","7ed735a1":"total_activeCases = df['Active'].sum()\nprint(\"Total people who were Active as of \"+today+\" are: \", total_activeCases)","c15361ff":"confirmed_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv')\ndeaths_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv')\nrecovered_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv')\nlatest_data = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_daily_reports\/06-28-2020.csv')","d6a6ed62":"dates = list(confirmed_df.columns[4:])\ndates = list(pd.to_datetime(dates))\ndates_india = dates[8:]\ndf1 = confirmed_df.groupby('Country\/Region').sum().reset_index()\ndf2 = deaths_df.groupby('Country\/Region').sum().reset_index()\ndf3 = recovered_df.groupby('Country\/Region').sum().reset_index()","0ec68596":"k = df1[df1['Country\/Region']=='India'].loc[:,'1\/30\/20':]\nindia_confirmed = k.values.tolist()[0] \n\nk = df2[df2['Country\/Region']=='India'].loc[:,'1\/30\/20':]\nindia_deaths = k.values.tolist()[0] \n\nk = df3[df3['Country\/Region']=='India'].loc[:,'1\/30\/20':]\nindia_recovered = k.values.tolist()[0] ","a95a3764":"k = df1[df1['Country\/Region']=='Iran'].loc[:,'1\/30\/20':]\niran_confirmed = k.values.tolist()[0] \n\nk = df2[df2['Country\/Region']=='Iran'].loc[:,'1\/30\/20':]\niran_deaths = k.values.tolist()[0] \n\nk = df3[df3['Country\/Region']=='Iran'].loc[:,'1\/30\/20':]\niran_recovered = k.values.tolist()[0] ","6a61a822":"plt.figure(figsize= (15,10))\nplt.xticks(rotation = 90 ,fontsize = 11)\nplt.yticks(fontsize = 10)\nplt.xlabel(\"Dates\",fontsize = 20)\nplt.ylabel('Total cases',fontsize = 20)\nplt.title(\"Total Confirmed, Active, Death in India\" , fontsize = 20)\n\nax1 = plt.plot_date(y= india_confirmed,x= dates_india,label = 'Confirmed',linestyle ='-',color = 'b')\nax2 = plt.plot_date(y= india_recovered,x= dates_india,label = 'Recovered',linestyle ='-',color = 'g')\nax3 = plt.plot_date(y= india_deaths,x= dates_india,label = 'Death',linestyle ='-',color = 'r')\nplt.legend()","aecdeb15":"plt.figure(figsize= (15,10))\nplt.xticks(rotation = 90 ,fontsize = 11)\nplt.yticks(fontsize = 10)\nplt.xlabel(\"Dates\",fontsize = 20)\nplt.ylabel('Total cases',fontsize = 20)\nplt.title(\"Total Confirmed, Active, Death in Iran\" , fontsize = 20)\n\nax1 = plt.plot_date(y= iran_confirmed,x= dates_india,label = 'Confirmed',linestyle ='-',color = 'b')\nax2 = plt.plot_date(y= iran_recovered,x= dates_india,label = 'Recovered',linestyle ='-',color = 'g')\nax3 = plt.plot_date(y= iran_deaths,x= dates_india,label = 'Death',linestyle ='-',color = 'r')\nplt.legend()","5e06f6f0":"from matplotlib.ticker import MaxNLocator\ngrouped = confirmed_df.groupby('Country\/Region')\ndf2 = grouped.sum()\ncountry = 'India'\nMIN_CASES = 100\n\ndef make_plot(country):\n    \"\"\"Make the bar plot of case numbers and change in numbers line plot.\"\"\"\n\n    # Extract the Series corresponding to the case numbers for country.\n    c_df = df2.loc[country, df2.columns[3:]]\n    # Discard any columns with fewer than MIN_CASES.\n    c_df = c_df[c_df >= MIN_CASES].astype(int)\n    # Convet index to a proper datetime object\n    c_df.index = pd.to_datetime(c_df.index)\n    n = len(c_df)\n    if n == 0:\n        print('Too few data to plot: minimum number of cases is {}'\n                .format(MIN_CASES))\n        sys.exit(1)\n\n    fig = plt.Figure()\n\n    # Arrange the subplots on a grid: the top plot (case number change) is\n    # one quarter the height of the bar chart (total confirmed case numbers).\n    ax2 = plt.subplot2grid((4,1), (0,0))\n    ax1 = plt.subplot2grid((4,1), (1,0), rowspan=3)\n    ax1.bar(range(n), c_df.values)\n    # Force the x-axis to be in integers (whole number of days) in case\n    # Matplotlib chooses some non-integral number of days to label).\n    ax1.xaxis.set_major_locator(MaxNLocator(integer=True))\n\n    c_df_change = c_df.diff()\n    ax2.plot(range(n), c_df_change.values)\n    ax2.set_xticks([])\n\n    ax1.set_xlabel('Days since {} cases'.format(MIN_CASES))\n    ax1.set_ylabel('Confirmed cases, $N$')\n    ax2.set_ylabel('$\\Delta N$')\n\n    # Add a title reporting the latest number of cases available.\n    title = '{}\\n{} cases on {}'.format(country, c_df[-1],\n                c_df.index[-1].strftime('%d %B %Y'))\n    plt.suptitle(title)\n\nmake_plot(country)\nplt.show()","fb507e28":"from matplotlib.ticker import MaxNLocator\ngrouped = confirmed_df.groupby('Country\/Region')\ndf2 = grouped.sum()\ncountry = 'Iran'\nMIN_CASES = 100\n\ndef make_plot(country):\n    \"\"\"Make the bar plot of case numbers and change in numbers line plot.\"\"\"\n\n    # Extract the Series corresponding to the case numbers for country.\n    c_df = df2.loc[country, df2.columns[3:]]\n    # Discard any columns with fewer than MIN_CASES.\n    c_df = c_df[c_df >= MIN_CASES].astype(int)\n    # Convet index to a proper datetime object\n    c_df.index = pd.to_datetime(c_df.index)\n    n = len(c_df)\n    if n == 0:\n        print('Too few data to plot: minimum number of cases is {}'\n                .format(MIN_CASES))\n        sys.exit(1)\n\n    fig = plt.Figure()\n\n    # Arrange the subplots on a grid: the top plot (case number change) is\n    # one quarter the height of the bar chart (total confirmed case numbers).\n    ax2 = plt.subplot2grid((4,1), (0,0))\n    ax1 = plt.subplot2grid((4,1), (1,0), rowspan=3)\n    ax1.bar(range(n), c_df.values)\n    # Force the x-axis to be in integers (whole number of days) in case\n    # Matplotlib chooses some non-integral number of days to label).\n    ax1.xaxis.set_major_locator(MaxNLocator(integer=True))\n\n    c_df_change = c_df.diff()\n    ax2.plot(range(n), c_df_change.values)\n    ax2.set_xticks([])\n\n    ax1.set_xlabel('Days since {} cases'.format(MIN_CASES))\n    ax1.set_ylabel('Confirmed cases, $N$')\n    ax2.set_ylabel('$\\Delta N$')\n\n    # Add a title reporting the latest number of cases available.\n    title = '{}\\n{} cases on {}'.format(country, c_df[-1],\n                c_df.index[-1].strftime('%d %B %Y'))\n    plt.suptitle(title)\n\nmake_plot(country)\nplt.show()","78950bca":"!pip install Prophet","63ae64c2":"from fbprophet import Prophet\nfrom fbprophet.plot import  plot_plotly,add_changepoints_to_plot\n\ndates = list(confirmed_df.columns[4:])\ndates = list(pd.to_datetime(dates))\ndates_india = dates[8:]\n\nk = df1[df1['Country\/Region']=='India'].loc[:,'1\/30\/20':]\nindia_confirmed = k.values.tolist()[0]\nk = df1[df1['Country\/Region']=='Iran'].loc[:,'1\/30\/20':]\niran_confirmed = k.values.tolist()[0]\n\n# for India\ndata_india= pd.DataFrame(columns=['ds','y'])\ndata_india['ds'] = dates_india\ndata_india['y'] = india_confirmed\n\n# for Iran\ndata_iran= pd.DataFrame(columns=['ds','y'])\ndata_iran['ds'] = dates_india\ndata_iran['y'] = iran_confirmed","aa3203ec":"# Forcasting Comfirmed Cases for next 10 days for India\n\nprop = Prophet(interval_width=0.97)\nprop.fit(data_india)\nfuture_india = prop.make_future_dataframe(periods=10)\nfuture_india.tail(10)","c1ad99a7":"forecast = prop.predict(future_india)\nforecast[['ds','yhat','yhat_lower','yhat_upper']].tail()","5418bbcd":"confirmed_forecast_indiaPlot = prop.plot(forecast)","024ca5ba":"confirmed_forecast_indiaPlot =prop.plot_components(forecast)","427b14e4":"# Forcasting Comfirmed Cases for next 10 days for Iran\n\nprop = Prophet(interval_width=0.97)\nprop.fit(data_iran)\nfuture_iran = prop.make_future_dataframe(periods=10)\nfuture_iran.tail(10)","62d1efe7":"forecast = prop.predict(future_iran)\nforecast[['ds','yhat','yhat_lower','yhat_upper']].tail()","1204b96f":"confirmed_forecast_iranPlot = prop.plot(forecast)","507624b5":"confirmed_forecast_iranPlot =prop.plot_components(forecast)","d1daea0b":"# Conclusion\n\nThe trend of Covid-19 in India is not similar to Iran as we can see in the plots of India and Iran(includes total confirmed,deaths and recovered cases).\nIn India,we can see the Confirmed cases started rising between mid of April and then by the end of May month the curve  rised sharply and today total cases in india are around 582k.\nIn Iran,we can see the confirmed cases started rising from end of march, but now we can see there is some stabilty in confirmed cases as compared to India as total cases in Iran till now 227k.\nAlso we can see the confirmed line and recovered line in the iran plots are almost parallel as recovered cases in iran are around 188k.\n\nAlso in India plot, as the total number of cases are increasing the recovery rate is also increasing.\n\n\nUsing Forecasting Library Prophet we can predict the  total number of cases india after 10 days would be in range **648k-667k**.\nwhere as in Iran we can predict the  total number of cases after 10 days would be in range **250k-257k**.","5bde90ef":"# Find the total number of COVID-19 cases in India till date","6236a24c":"## Therefore Maharashtra is most Recent wiith Covid 19 Cases","10875f9e":"**What is the total number of active COVID-19 cases in India?**","9a3ea6e7":"#Which state is the most recent with COVID-19 case?","e50e16c6":"**Create multiple visualization and compare thespread of COVID-19 in India with Iran**","7e598cab":"# Visualization for India and Iran(Confirmed,Death,Recovered)","c3e8138e":"**Use Prophet to forecast the data for next 10 days with 97% confidence interval**","a084e921":"# Data Cleaning","d7729d2c":"# Importing Libraries"}}