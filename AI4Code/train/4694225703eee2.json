{"cell_type":{"9d65ef32":"code","040014ae":"code","d002feac":"code","df2c01c0":"code","9b5dc5b7":"code","4464f4d3":"code","17fbe716":"code","8bfb6fec":"code","039e6fbf":"code","130ad925":"code","a3152f62":"code","f2a77bd6":"code","20b869a9":"code","4ff24e85":"code","06a29d41":"code","b5353d6a":"code","c8bf124f":"code","78fa9a22":"code","674eb95d":"code","f60dd43c":"code","a669798c":"code","de2a207e":"code","25b51bd8":"markdown","1459a176":"markdown","3d2a84b4":"markdown"},"source":{"9d65ef32":"# Import the neccesarry libraries\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tensorflow import keras","040014ae":"# Read the dataset\ndf = pd.read_csv(\"..\/input\/heart-attack-analysis-prediction-dataset\/heart.csv\")\ndf['o2_sat'] = pd.read_csv(\"..\/input\/heart-attack-analysis-prediction-dataset\/o2Saturation.csv\")","d002feac":"df.info()","df2c01c0":"df.describe()","9b5dc5b7":"df.isnull().sum()","4464f4d3":"sns.pairplot(df)","17fbe716":"sns.heatmap(df)","8bfb6fec":"plt.figure(figsize=(16, 6))\n# Store heatmap object in a variable to easily access it when you want to include more features (such as title).\n# Set the range of values to be displayed on the colormap from -1 to 1, and set the annotation to True to display the correlation values on the heatmap.\nheatmap = sns.heatmap(df.corr(), vmin=-1, vmax=1, annot=True)","039e6fbf":"plt.figure(figsize=(8, 12))\nheatmap = sns.heatmap(df.corr()[['output']].sort_values(by='output', ascending=False), vmin=-1, vmax=1, annot=True, cmap='BrBG')\nheatmap.set_title('Features Correlating with Output', fontdict={'fontsize':18}, pad=16);","130ad925":"plt.figure(figsize=(8, 12))\nsns.histplot(df)","a3152f62":"df","f2a77bd6":"#split the categorical and binary value\n#but we check which one is binary columns\nfor i in df.columns:\n    if len(np.unique(df[i]))<=2:\n        display(i,np.unique(df[i]))\n","20b869a9":"#Drop the output Columns\nlabel = df.pop('output')\n\n# Binary Columns\nbin_cols = ['sex','fbs','exng']\n\n# Numerical Columns\nnum_cols = [x for x in df.columns if x not in bin_cols]\n","4ff24e85":"# Splitting the train and test data\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(df,label, test_size=0.2,random_state=42)","06a29d41":"#Preprocessing non-binary columns\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\ndf[num_cols] = sc.fit_transform(df[num_cols])","b5353d6a":"df","c8bf124f":"# KNN\nfrom sklearn.neighbors import KNeighborsClassifier\nknn_clf = KNeighborsClassifier()\nknn_clf.fit(X_train,y_train)","78fa9a22":"knn_pred = knn_clf.predict(X_test)","674eb95d":"from sklearn.metrics import confusion_matrix,accuracy_score\ndisplay(\n    confusion_matrix(y_test,knn_pred),\n    accuracy_score(y_test,knn_pred)\n)","f60dd43c":"# XGBoost\nfrom xgboost import XGBClassifier\nxgb_clf = XGBClassifier()\nxgb_clf.fit(X_train,y_train)","a669798c":"xgb_pred = xgb_clf.predict(X_test)","de2a207e":"display(\n    confusion_matrix(y_test,xgb_pred),\n    accuracy_score(y_test,xgb_pred)\n)","25b51bd8":"## Machine Learning Model","1459a176":"## Preprocess","3d2a84b4":"## EDA"}}