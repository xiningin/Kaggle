{"cell_type":{"a737d520":"code","e07d5bc6":"code","fd69055d":"code","fd158b6d":"code","adcdb776":"code","ad5b0078":"code","4208fcea":"code","08618bc6":"code","05098861":"code","98489d00":"code","60a7bf45":"code","9ca97a96":"code","b470426c":"code","98992d2d":"code","761389fe":"code","f9e1548d":"code","188e83f9":"code","4cd85b2a":"code","f230f566":"code","35fa479e":"markdown","f9326a51":"markdown","f508a17d":"markdown","c7ddf664":"markdown","2d009c74":"markdown","959d7afd":"markdown"},"source":{"a737d520":"import os\nimport random\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport tensorflow as tf\nimport tensorflow.keras as keras\nimport tensorflow.keras.layers as layers\nimport tensorflow.keras.regularizers as regularizers","e07d5bc6":"DATASET_PATH = \"..\/input\/fashionmnist\"\n\ntrain_csv = os.path.join(DATASET_PATH, \"fashion-mnist_train.csv\")\ntest_csv = os.path.join(DATASET_PATH, \"fashion-mnist_test.csv\")","fd69055d":"train_df = pd.read_csv(train_csv)\nprint(\"Number of entries:\", len(train_df))\ntrain_df.head()","fd158b6d":"test_df = pd.read_csv(test_csv)\nprint(\"Number of entries:\", len(test_df))\ntest_df.head()","adcdb776":"classes = {\n    0: 'T-shirt\/top',\n    1: 'Trouser',\n    2: 'Pullover',\n    3: 'Dress',\n    4: 'Coat',\n    5: 'Sandal',\n    6: 'Shirt',\n    7: 'Sneaker',\n    8: 'Bag',\n    9: 'Ankle Boot'\n}","ad5b0078":"train_labels = []\ntrain_imgs = []\nfor idx, row in train_df.iterrows():\n    label = row['label']\n    img = row.drop('label').values\n    img = np.array(img).reshape((28, 28))\n    \n    train_labels.append(label)\n    train_imgs.append(img)\n    \ntrain_imgs = tf.convert_to_tensor(train_imgs, tf.float32)\ntrain_labels = tf.convert_to_tensor(train_labels, tf.float32)","4208fcea":"test_labels = []\ntest_imgs = []\nfor idx, row in test_df.iterrows():\n    label = row['label']\n    img = row.drop('label').values\n    img = np.array(img).reshape((28, 28))\n    \n    test_labels.append(label)\n    test_imgs.append(img)\n    \ntest_imgs = tf.convert_to_tensor(test_imgs, tf.float32)\ntest_labels = tf.convert_to_tensor(test_labels, tf.float32)","08618bc6":"plt.figure(figsize=(10,10))\nfor i in range(30):\n    img = train_imgs[i]\n    label = train_labels[i].numpy()\n    label_name = classes[label]\n    plt.subplot(5,6,i+1)\n    plt.imshow(img, cmap='binary')\n    plt.xticks([])\n    plt.yticks([])\n    plt.title(label_name)","05098861":"plt.figure(figsize=(10,10))\nfor i in range(30):\n    img = test_imgs[i]\n    label = test_labels[i].numpy()\n    label_name = classes[label]\n    plt.subplot(5,6,i+1)\n    plt.imshow(img, cmap='binary')\n    plt.xticks([])\n    plt.yticks([])\n    plt.title(label_name)","98489d00":"model = keras.models.Sequential([\n    layers.experimental.preprocessing.Rescaling(1.\/255, input_shape=(28, 28, 1)),\n    # Layer 1\n    layers.Conv2D(64, 3, padding='same', activation='relu', kernel_regularizer=regularizers.L2(0.001)),\n    layers.Conv2D(64, 3, padding='same', activation='relu', kernel_regularizer=regularizers.L2(0.001)),\n    layers.MaxPooling2D(),\n    layers.Dropout(0.4),\n    # Layer 2\n    layers.Conv2D(128, 3, padding='same', activation='relu', kernel_regularizer=regularizers.L2(0.001)),\n    layers.Conv2D(128, 3, padding='same', activation='relu', kernel_regularizer=regularizers.L2(0.001)),\n    layers.MaxPooling2D(),\n    layers.Dropout(0.4),\n    # Layer 3\n    layers.Conv2D(256, 3, padding='same', activation='relu', kernel_regularizer=regularizers.L2(0.001)),\n    layers.Conv2D(256, 3, padding='same', activation='relu', kernel_regularizer=regularizers.L2(0.001)),\n    layers.MaxPooling2D(),\n    layers.Dropout(0.4),\n    # Layer 4\n    layers.Conv2D(512, 3, padding='same', activation='relu', kernel_regularizer=regularizers.L2(0.001)),\n    layers.Conv2D(512, 3, padding='same', activation='relu', kernel_regularizer=regularizers.L2(0.001)),\n    layers.MaxPooling2D(),\n    layers.Dropout(0.4),\n    # Full connected layer\n    layers.Flatten(),\n    layers.Dense(512, activation='relu'),\n    layers.Dense(10)\n])","60a7bf45":"model.compile(optimizer=keras.optimizers.Adam(learning_rate=0.0001),\n             loss=keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n             metrics=['accuracy'])","9ca97a96":"early_stopping = keras.callbacks.EarlyStopping(monitor='val_loss', patience=5)","b470426c":"history = model.fit(train_imgs, train_labels,\n                    validation_split=0.3,\n                    callbacks=[early_stopping],\n                    batch_size=32,\n                    epochs=100)","98992d2d":"acc = history.history['accuracy']\nloss = history.history['loss']\n\nval_loss = history.history['val_loss']\nval_acc = history.history['val_accuracy']","761389fe":"plt.figure(figsize=(15, 6))\n\nplt.subplot(1,2,1)\nplt.plot(acc, label='train acc')\nplt.plot(val_acc, label='val acc')\nplt.legend()\n\nplt.subplot(1,2,2)\nplt.plot(loss, label='train loss')\nplt.plot(val_loss, label='val loss')\nplt.legend()\n\nplt.show()","f9e1548d":"test_loss, test_acc = model.evaluate(test_imgs, test_labels, verbose=2)\nprint('\\nTest accuracy:', test_acc)","188e83f9":"probability_model = keras.Sequential([\n    model,\n    layers.Softmax()\n])","4cd85b2a":"predictions = probability_model.predict(test_imgs)","f230f566":"plt.figure(figsize=(15,15))\nfor i in range(30):\n    # Get predicted class and probability\n    predicted_class = np.argmax(predictions[i])\n    predicted_label = classes[predicted_class]\n    probability = np.round(np.max(predictions[i]) * 100)\n    \n    # Get true class\n    truth_class = test_labels[i].numpy()\n    truth_label = classes[truth_class]\n            \n    # Prepare display image and its title\n    title = \"{} {} \\n({})\".format(predicted_label, probability, truth_label)\n    img = test_imgs[i].numpy()\n\n    # Plot image\n    plt.subplot(5, 6, i+1)\n    plt.imshow(img, cmap='binary')\n    if (predicted_class == truth_class):\n        plt.xlabel(title, color='blue')\n    else:\n        plt.xlabel(title, color='red')\n    plt.xticks([])\n    plt.yticks([])\nplt.show()","35fa479e":"## Data visualization","f9326a51":"## Train\/evaluate model","f508a17d":"## Reading and preparing training data","c7ddf664":"### Train image","2d009c74":"### Test image","959d7afd":"## Make predictions"}}