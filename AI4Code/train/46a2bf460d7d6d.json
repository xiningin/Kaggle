{"cell_type":{"131d0666":"code","8f29e4df":"code","353bea1c":"code","12c8b8f9":"code","625778e0":"code","69372a9c":"code","17988ad9":"code","6dbc86de":"code","8496d60f":"code","8360f16e":"code","277c41c4":"code","8f24b137":"code","ff4fcc0d":"code","9065f0e7":"code","136a57a0":"code","649aabc4":"code","b83fa070":"code","ec71de60":"code","930c8919":"code","b91b14a1":"code","5a90f144":"code","3bafca79":"code","b3766d38":"code","4b606410":"code","2d1771e9":"code","9f6f2ec8":"code","59090e25":"code","e32eaff0":"code","1bcfbb16":"code","40f5348e":"markdown","82b678db":"markdown","1bc31e98":"markdown","cc39bb63":"markdown","e8b694b5":"markdown","93707959":"markdown","c87f4805":"markdown","c4ac3559":"markdown","e61e9201":"markdown","11b47413":"markdown","72214b7f":"markdown","9ab3bdbf":"markdown","3db04567":"markdown"},"source":{"131d0666":"!pip install -U git+https:\/\/github.com\/paoloripamonti\/face-recognition.git","8f29e4df":"from face_recognition import FaceRecognition\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, roc_curve, precision_recall_curve, roc_auc_score, accuracy_score\n\nimport matplotlib.pyplot as plt\nimport os\nimport glob\nimport pandas as pd\nimport random\nimport numpy as np\nimport cv2\nimport base64\nfrom tqdm import tqdm\nimport requests\nfrom pprint import pprint","353bea1c":"ROOT_Train =\"\/kaggle\/input\/masked-facerecognition\/AFDB_face_dataset\/AFDB_face_dataset\/\"\nROOT_Test = \"\/kaggle\/input\/masked-facerecognition\/AFDB_masked_face_dataset\/AFDB_masked_face_dataset\/\"","12c8b8f9":"train = []\nfor path in glob.iglob(os.path.join(ROOT_Train, \"**\", \"*.jpg\")):\n    person = path.split(\"\/\")[-2]\n    train.append({\"person\":person, \"path\": path})\n    \ntrain = pd.DataFrame(train)\ntrain = train.groupby(\"person\").filter(lambda x: len(x) > 5)\ntrain.head(10)","625778e0":"train.groupby(\"person\").count()[:50].plot(kind='bar', figsize=(20,5))","69372a9c":"print(\"number of person in train dataset : %s\" %(len(train.groupby(\"person\"))))\nprint(\"number of image in train dataset : %s\" %(len(train)))","17988ad9":"trainx, valid = train_test_split(train, test_size=0.1, random_state=42, shuffle=True)","6dbc86de":"print(\"number of person in train dataset : %s\" %(len(trainx.groupby(\"person\"))))\nprint(\"number of image in train dataset : %s\" %(len(trainx)))\nprint(\"number of person in validation dataset : %s\" %(len(valid.groupby(\"person\"))))\nprint(\"number of image in validation dataset : %s\" %(len(valid)))","8496d60f":"plt.figure(figsize=(20,10))\nfor i in range(10):\n    idx = random.randint(0, len(train))\n    img = plt.imread(train.path.iloc[idx])\n    plt.subplot(4, 5, i+1)\n    plt.imshow(img)\n    plt.title(train.person.iloc[idx])\n    plt.xticks([])\n    plt.yticks([])\nplt.tight_layout()\nplt.show()","8360f16e":"test = []\nfor path in glob.iglob(os.path.join(ROOT_Test, \"**\", \"*.jpg\")):\n    person = path.split(\"\/\")[-2]\n    test.append({\"person\":person, \"path\": path})\ntest = pd.DataFrame(test)\ntest = test.groupby(\"person\").filter(lambda x: len(x) > 0)\ntest.head(10)","277c41c4":"len(test.groupby(\"person\"))","8f24b137":"test.groupby(\"person\").count()[:50].plot(kind='bar', figsize=(20,5))","ff4fcc0d":"plt.figure(figsize=(20,10))\nfor i in range(10):\n    idx = random.randint(0, len(test))\n    img = plt.imread(test.path.iloc[idx])\n    plt.subplot(4, 5, i+1)\n    plt.imshow(img)\n    plt.title(test.person.iloc[idx])\n    plt.xticks([])\n    plt.yticks([])\nplt.tight_layout()\nplt.show()","9065f0e7":"print(\"Train:\",len(train))\nprint(\"Test:\",len(test))","136a57a0":"%%time\nfr = FaceRecognition()","649aabc4":"%%time\nfr.fit_from_dataframe(trainx) ","b83fa070":"fr.save('masked_unmasked_model.pkl')","ec71de60":"%%time\nvalid_test, valid_pred, valid_scores = [],[],[]\nfor idx in tqdm(range(len(valid))):\n    path = valid.path.iloc[idx]\n    result = fr.predict(path)\n    for prediction in result[\"predictions\"]:\n        valid_pred.append(prediction[\"person\"])\n        valid_scores.append(prediction[\"confidence\"])\n        valid_test.append(valid.person.iloc[idx])","930c8919":"%%time\ny_test, y_pred, y_scores = [],[],[]\nfor idx in tqdm(range(len(test))):\n    path = test.path.iloc[idx]\n    result = fr.predict(path)\n    for prediction in result[\"predictions\"]:\n        y_pred.append(prediction[\"person\"])\n        y_scores.append(prediction[\"confidence\"])\n        y_test.append(test.person.iloc[idx])","b91b14a1":"print(classification_report(y_test, y_pred))","5a90f144":"print(\"Train Accuracy: %f\" % accuracy_score(valid_test, valid_pred))","3bafca79":"print(\"Accuracy: %f\" % accuracy_score(y_test, y_pred))","b3766d38":"person = \"guojunchen\"\npath = test[test.person==person][\"path\"].iloc[0]\nimg = cv2.imread(path)\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n\nresult = fr.predict(path)\nfile_bytes = np.fromstring(base64.b64decode(result[\"frame\"]), np.uint8)\noutput = cv2.imdecode(file_bytes,1)\n\nplt.figure(figsize=(10,5))\nplt.subplot(1, 2, 1)\nplt.imshow(img)\nplt.title(person)\nplt.subplot(1, 2, 2)\nplt.imshow(output)\nprint(result[\"predictions\"][0][\"confidence\"])\nplt.title(\"%s (%f)\" % (result[\"predictions\"][0][\"person\"], result[\"predictions\"][0][\"confidence\"]))\nplt.tight_layout()\nplt.show()","4b606410":"person = y_test[12]\npath = test[test.person==person][\"path\"].iloc[0]\nimg = cv2.imread(path)\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n\nresult = fr.predict(path)\nfile_bytes = np.fromstring(base64.b64decode(result[\"frame\"]), np.uint8)\noutput = cv2.imdecode(file_bytes,1)\n\nplt.figure(figsize=(10,5))\nplt.subplot(1, 2, 1)\nplt.imshow(img)\nplt.title(person)\nplt.subplot(1, 2, 2)\nplt.imshow(output)\nprint(result[\"predictions\"][0][\"confidence\"])\nplt.title(\"%s (%f)\" % (result[\"predictions\"][0][\"person\"], result[\"predictions\"][0][\"confidence\"]))\nplt.tight_layout()\nplt.show()","2d1771e9":"person = y_test[3]\npath = test[test.person==person][\"path\"].iloc[0]\nimg = cv2.imread(path)\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n\nresult = fr.predict(path)\nfile_bytes = np.fromstring(base64.b64decode(result[\"frame\"]), np.uint8)\noutput = cv2.imdecode(file_bytes,1)\n\nplt.figure(figsize=(10,5))\nplt.subplot(1, 2, 1)\nplt.imshow(img)\nplt.title(person)\nplt.subplot(1, 2, 2)\nplt.imshow(output)\nplt.title(\"%s (%f)\" % (result[\"predictions\"][0][\"person\"], result[\"predictions\"][0][\"confidence\"]))\nplt.tight_layout()\nplt.show()","9f6f2ec8":"person = y_test[9]\npath = test[test.person==person][\"path\"].iloc[0]\nimg = cv2.imread(path)\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n\nresult = fr.predict(path)\nfile_bytes = np.fromstring(base64.b64decode(result[\"frame\"]), np.uint8)\noutput = cv2.imdecode(file_bytes,1)\n\nplt.figure(figsize=(10,5))\nplt.subplot(1, 2, 1)\nplt.imshow(img)\nplt.title(person)\nplt.subplot(1, 2, 2)\nplt.imshow(output)\nplt.title(\"%s (%f)\" % (result[\"predictions\"][0][\"person\"], result[\"predictions\"][0][\"confidence\"]))\nplt.tight_layout()\nplt.show()","59090e25":"person = y_test[20]\npath = test[test.person==person][\"path\"].iloc[0]\nimg = cv2.imread(path)\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n\nresult = fr.predict(path)\nfile_bytes = np.fromstring(base64.b64decode(result[\"frame\"]), np.uint8)\noutput = cv2.imdecode(file_bytes,1)\n\nplt.figure(figsize=(10,5))\nplt.subplot(1, 2, 1)\nplt.imshow(img)\nplt.title(person)\nplt.subplot(1, 2, 2)\nplt.imshow(output)\nplt.title(\"%s (%f)\" % (result[\"predictions\"][0][\"person\"], result[\"predictions\"][0][\"confidence\"]))\nplt.tight_layout()\nplt.show()","e32eaff0":"person = y_test[21]\npath = test[test.person==person][\"path\"].iloc[0]\nimg = cv2.imread(path)\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n\nresult = fr.predict(path)\nfile_bytes = np.fromstring(base64.b64decode(result[\"frame\"]), np.uint8)\noutput = cv2.imdecode(file_bytes,1)\n\nplt.figure(figsize=(10,5))\nplt.subplot(1, 2, 1)\nplt.imshow(img)\nplt.title(person)\nplt.subplot(1, 2, 2)\nplt.imshow(output)\nplt.title(\"%s (%f)\" % (result[\"predictions\"][0][\"person\"], result[\"predictions\"][0][\"confidence\"]))\nplt.tight_layout()\nplt.show()","1bcfbb16":"person = y_test[25]\npath = test[test.person==person][\"path\"].iloc[0]\nimg = cv2.imread(path)\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n\nresult = fr.predict(path)\nfile_bytes = np.fromstring(base64.b64decode(result[\"frame\"]), np.uint8)\noutput = cv2.imdecode(file_bytes,1)\n\nplt.figure(figsize=(10,5))\nplt.subplot(1, 2, 1)\nplt.imshow(img)\nplt.title(person)\nplt.subplot(1, 2, 2)\nplt.imshow(output)\nplt.title(\"%s (%f)\" % (result[\"predictions\"][0][\"person\"], result[\"predictions\"][0][\"confidence\"]))\nplt.tight_layout()\nplt.show()","40f5348e":"# Evaluate","82b678db":"### Size of train & test dataset","1bc31e98":"## Training Model","cc39bb63":"### Settings","e8b694b5":"# Save Model","93707959":"# Face Recognition\n\nSee: https:\/\/github.com\/paoloripamonti\/face-recognition.git","c87f4805":"# Read dataset","c4ac3559":"# Needed Libraries","e61e9201":"# Fit Face Recognition","11b47413":"## Test Dataset","72214b7f":"## Train Dataset","9ab3bdbf":"# Examples","3db04567":"## Initialize Model"}}