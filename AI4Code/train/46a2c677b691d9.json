{"cell_type":{"497e1bf4":"code","719a68e3":"code","4152a322":"code","9eb6f104":"code","0ef3c055":"code","0114e161":"code","910fabe2":"code","e3806be8":"code","a0d8c66b":"code","01d00018":"code","d3f9d62a":"code","8cb5e89c":"code","6ef82396":"markdown","52037b86":"markdown","1372f818":"markdown"},"source":{"497e1bf4":"from builtins import range\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\nimport time\nimport seaborn as sns\nimport numpy as np\nimport pandas as pd\nimport stumpy\nfrom IPython.core.display import display, HTML\nimport glob\nimport os\nimport gc\nfrom joblib import Parallel, delayed","719a68e3":"path_submissions = '\/'\ntarget_name = 'target'\nscores_folds = {}","4152a322":"def calc_wap(df):\n    wap = (df['bid_price1'] * df['ask_size1'] + df['ask_price1'] * df['bid_size1'])\/(df['bid_size1'] + df['ask_size1'])\n    return wap\n\ndef log_return(list_stock_prices):\n    return np.log(list_stock_prices).diff()\n\ndef realized_volatility(series_log_return):\n    return np.sqrt(np.sum(series_log_return**2))","9eb6f104":"book_example = pd.read_parquet('..\/input\/optiver-realized-volatility-prediction\/book_train.parquet\/stock_id=0')","0ef3c055":"book_example = pd.read_parquet('..\/input\/optiver-realized-volatility-prediction\/book_train.parquet\/stock_id=0')\ntrade_example =  pd.read_parquet('..\/input\/optiver-realized-volatility-prediction\/trade_train.parquet\/stock_id=0')\n\nstock_id = '0'\ntime_id = book_example.time_id.unique()\n\nbook_example = book_example[book_example['time_id'].isin(time_id)]\nbook_example.loc[:,'stock_id'] = stock_id\ntrade_example = trade_example[trade_example['time_id'].isin(time_id)]\ntrade_example.loc[:,'stock_id'] = stock_id\n\nbook_example['wap'] = calc_wap(book_example)\n\n#book_example.groupby('time_id', as_index=False).apply(lambda x: x.reset_index())['wap'].unstack(level=0).plot(legend=None)\n\nbook_example.loc[:,'log_return'] = log_return(book_example['wap'])\nbook_example = book_example[~book_example['log_return'].isnull()]\n\nbook_example = book_example.merge(trade_example, on=['seconds_in_bucket','time_id'],how='left', suffixes=('', '_y'))\nbook_example = book_example.loc[:, ~book_example.columns.str.endswith('_y')]","0114e161":"df = book_example","910fabe2":"rv = pd.DataFrame(book_example[['log_return','time_id']].groupby(['time_id']).agg(realized_volatility)).reset_index()\n\ntrain = pd.read_csv('..\/input\/optiver-realized-volatility-prediction\/train.csv', dtype = {'stock_id': np.int32, 'time_id': np.int32, 'target': np.float64})\ntrain.head()\n\ntrain_0 = train[train['stock_id']==0]\ndf_rv_train = train_0.merge(rv, on = ['time_id'], how = 'right')\n\ndf_rv_train['error'] = (df_rv_train['target'] - df_rv_train['log_return'])\ndf_rv_train['percentage_error'] = (df_rv_train['target'] - df_rv_train['log_return'])\/df_rv_train['target']","e3806be8":"from scipy import stats\nfrom scipy.special import gamma\n\n# code from : https:\/\/github.com\/BayerSe\/RealizedQuantities\/blob\/master\/main.py\n# do we care about constants ? \n\ntrading_seconds = 600\navg_sampling_frequency = 1\noriginal_sampling_frequency = 1\nM = trading_seconds \/ original_sampling_frequency\n\n\nmu_1 = np.sqrt((2 \/ np.pi))\nmu_43 = 2 ** (2 \/ 3) * gamma(7 \/ 6) * gamma(1 \/ 2) ** (-1)\n\ndef log_return(series_log_return):\n    series_log_return =  series_log_return[1:]\n    return np.log(series_log_return).diff()\n\n#Realized Variance (Andersen and Bollerslev, 1998) - realized vol without sqrt\ndef realized_variance(series_log_return):\n    series_log_return =  series_log_return[1:]\n    return np.sum(series_log_return**2)\n\n# Realized absolute variation (Forsberg and Ghysels, 2007)\n#rav = mu_1 ** (-1) * M ** (-.5) * realized_quantity(lambda x: x.abs().sum())\ndef realized_aboslute_variation(series_log_return):\n    series_log_return =  series_log_return[1:]\n    return np.sum(np.abs(series_log_return))\n\n# Realized bipower variation (Barndorff-Nielsen and Shephard; 2004, 2006)\n#bv = mu_1 ** (-2) * realized_quantity(lambda x: (x.abs() * x.shift(1).abs()).sum())\ndef realized_bipower_variation(series_log_return):\n    series_log_return =  series_log_return[1:]\n    return np.sum(np.abs(series_log_return)*np.abs(series_log_return.shift(1)))\n\n# Standardized tri-power quarticity (see e.g. Forsberg & Ghysels, 2007)\n#tq = M * mu_43 ** (-3) * realized_quantity(lambda x: (x.abs() ** (4 \/ 3) * x.shift(1).abs() ** (4 \/ 3) * x.shift(2).abs() ** (4 \/ 3)).sum())\ndef realized_tri_power_quarticity(series_log_return):\n    series_log_return =  series_log_return[1:]\n    return np.sum(np.abs(series_log_return) ** (4 \/ 3) * np.abs(series_log_return.shift(1)) ** (4 \/ 3) * np.abs(series_log_return).shift(2)** (4 \/ 3))\n\n# simple jump test\ndef is_jumping(series_log_return):\n    series_log_return =  series_log_return[1:]\n    rv = realized_variance(series_log_return)\n    bv = realized_aboslute_variation(series_log_return)\n    return np.max(rv-bv,0)\n\n# Statistical Jump test by Huang and Tauchen (2005) - see if the first test is usefull\n#j = (np.log(rv) - np.log(bv)) \/ ((mu_1 ** -4 + 2 * mu_1 ** -2 - 5) \/ (M * tq * bv ** -2)) ** 0.5\n#jump = j.abs() >= stats.norm.ppf(0.999)\n\n# Separate continuous and discontinuous parts of the quadratic variation\n#iv = pd.Series(0, index=index)\n#iv[jump] = bv[jump] ** 0.5\n#iv[~jump] = rv[~jump] ** 0.5\n\n#jv = pd.Series(0, index=index)\n#jv[jump] = rv[jump] ** 0.5 - bv[jump] ** 0.5\n#jv[jv < 0] = 0\n\n# Realized Semivariance (Barndorff-Nielsen, Kinnebrock and Shephard, 2010)\ndef realized_variance_m(series_log_return):\n    series_log_return =  series_log_return[1:]\n    return np.sum(series_log_return**2 * (series_log_return < 0))\n\ndef realized_variance_p(series_log_return):\n    series_log_return =  series_log_return[1:]\n    return np.sum(series_log_return**2 * (series_log_return > 0))\n\n# Signed jump variation (Patton and Sheppard, 2015)\ndef Signed_jump_variation(series_log_return):\n    series_log_return =  series_log_return[1:]\n    rv_p = realized_variance_p(series_log_return)\n    rv_m = realized_variance_m(series_log_return)\n    return rv_p - rv_m\n\ndef Signed_jump_variation_p(series_log_return):\n    series_log_return =  series_log_return[1:]\n    sjv = Signed_jump_variation(series_log_return)\n    return sjv * (sjv > 0)\n\ndef Signed_jump_variation_m(series_log_return):\n    series_log_return =  series_log_return[1:]\n    sjv = Signed_jump_variation(series_log_return)\n    return sjv * (sjv < 0)\n\n# Realized Skewness and Kurtosis  (see, e.g. Amaya, Christoffersen, Jacobs and Vasquez, 2015)\n#rm3 = realized_quantity(lambda x: (x ** 3).sum())\n#rm4 = realized_quantity(lambda x: (x ** 4).sum())\n#rs = np.sqrt(M) * rm3 \/ rv ** (3 \/ 2)\n#rk = M * rm4 \/ rv ** 2\n\ndef realized_skewness(series_log_return):\n    series_log_return =  series_log_return[1:]\n    return np.sum(series_log_return**3)\n\ndef realized_kurtosis(series_log_return):\n    series_log_return =  series_log_return[1:]\n    return np.sum(series_log_return**4)\n\n#shared in discussion\n\ndef realized_quarticity(series_log_return):\n    series_log_return =  series_log_return[1:]\n    return np.sum(series_log_return**4)*series_log_return.shape[0]\/3\n\ndef realized_quadpower_quarticity(series_log_return):\n    series_log_return =  series_log_return[1:]\n    series = series_log_return.rolling(window=4).apply(np.product, raw=True)\n    return (np.sum(series_log_return) * series_log_return.shape[0] * (np.pi**2))\/4\n\ndef realized_1(series_log_return):\n    series_log_return =  series_log_return[1:]\n    return np.sqrt(np.sum(series_log_return**4)\/(6*np.sum(series_log_return**2)))\n\ndef realized_2(series_log_return):\n    series_log_return =  series_log_return[1:]\n    return np.sqrt(((np.pi**2)*np.sum(series_log_return.rolling(window=4).apply(np.product, raw=True)))\/(8*np.sum(series_log_return**2)))","a0d8c66b":"all_vol_functions = [realized_variance,realized_aboslute_variation,realized_bipower_variation,realized_tri_power_quarticity,is_jumping,realized_variance_m,realized_variance_p,Signed_jump_variation,Signed_jump_variation_p,Signed_jump_variation_m,realized_skewness,realized_kurtosis,realized_quarticity,realized_quadpower_quarticity,realized_1, realized_2]","01d00018":"create_feature_dict_vol = {\n        'log_return': all_vol_functions,\n    }","d3f9d62a":"%%time\n\ndf_train_stock_0_vol = df.groupby('time_id').agg(create_feature_dict_vol)\ndf_train_stock_0_vol.columns = ['_'.join(col) for col in df_train_stock_0_vol.columns]\n\ndf_train_stock_0_400_vol = df[df['seconds_in_bucket'] >= 400].groupby('time_id').agg(create_feature_dict_vol)\ndf_train_stock_0_400_vol.columns = ['_'.join(col) for col in df_train_stock_0_400_vol.columns]\n\ndf_train_stock_0_vol_diff = df_train_stock_0_400_vol - df_train_stock_0_vol\n\ndf_train_stock_0_feat_na0_vol = df_train_stock_0_vol_diff.fillna(0)","8cb5e89c":"import random\n\nsns.set(rc={'figure.figsize':(24,8)})\nsns.set_style(style='white')\n\ncolumns = [columns for columns in df_train_stock_0_vol.columns if columns not in ['time_id','stock_id','seconds_in_bucket']]\n\nfor col in columns:\n    color = (random.random(), random.random(), random.random())\n    \n    fig, axs = plt.subplots(ncols=3)\n    \n    sns.regplot(x=df_train_stock_0_vol[col], y=df_rv_train['target'], color=color, order = 2, line_kws={\"color\": 'black'}, ax=axs[0]).set(ylim=(0, None),title= 'Variable v.s. target')\n    sns.regplot(x=df_train_stock_0_vol[col], y=df_rv_train['percentage_error'], color=color, order = 2, line_kws={\"color\": 'black'}, ax=axs[1]).set(title= 'Variable v.s. percenatge error')\n    sns.regplot(x=df_train_stock_0_vol_diff[col], y=df_rv_train['target'], color=color, order = 2, line_kws={\"color\": 'black'}, ax=axs[2]).set(ylim=(0, None),title= 'Variation v.s target')\n    \n    fig.suptitle(col+' v.s. target',size=30) \n    \n    plt.show()","6ef82396":"# Tools","52037b86":"# realised volatilities metrics","1372f818":"# Realized volatilities aggregation functions\n\nSome realized volatility aggregation functions. The functions that currently do not appears in other notebooks mostly come from this - well-documented - Git-Hub repo: (https:\/\/github.com\/BayerSe\/RealizedQuantities\/blob\/master\/main.py). I added the metrics that are discusses here(https:\/\/www.kaggle.com\/c\/optiver-realized-volatility-prediction\/discussion\/267096) and some idea from personnal experience. The idea is to study those metrics regarding the target, the relative error of the naive baseline prediction and the variation of the metrics (in the last 200 seconds) v.s. the target.\n\n# Other Feature Engineering Notebooks: \n\nThis notebook is part of a serie on basic Feature Engineering \/ visual variable selection notebooks:\n\n1) Base Features: https:\/\/www.kaggle.com\/lucasmorin\/feature-engineering-1-base-features\n\n2) Aggregation Functions: https:\/\/www.kaggle.com\/lucasmorin\/feature-engineering-2-aggregation-functions\n\n3) RV aggregation: https:\/\/www.kaggle.com\/lucasmorin\/feature-engineering-3-rv-aggregation\/"}}