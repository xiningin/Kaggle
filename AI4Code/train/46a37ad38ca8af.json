{"cell_type":{"c47137b7":"code","66f9ca6e":"code","b3eee2bc":"code","c59ea3d7":"code","3c533ac0":"code","80da1d40":"code","78fe7f02":"code","bb7ed47c":"markdown","36d3e997":"markdown","d5125bdb":"markdown","63086725":"markdown"},"source":{"c47137b7":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport scipy.sparse as scs # sparse matrix construction \nimport scipy.linalg as scl # linear algebra algorithms\nimport scipy.optimize as sco # for minimization use\nimport matplotlib.pylab as plt # for visualization\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","66f9ca6e":"# read the data in small1.csv, it only has 24 problems.\ndata = pd.read_csv(\"..\/input\/small1.csv\") \nprint('data set legnth:', len(data))\n\n# enumerate the first 5 data strings in quizzes\nprint(data[\"quizzes\"][0:5])\n\n# enumerate the first 5 corresponding solution strings.\nprint(data[\"solutions\"][0:5])\n\n# Each string is an 81-chartacter string of digits. '0' means empty slots in the problem.","b3eee2bc":"# Take a close look at one string in quizzes\n\nquiz = data[\"quizzes\"][9]\nprint(quiz, '\\ndata type is:', type(quiz))\n\n# we can turn it into a numpy array by the following\nnp.reshape([int(c) for c in quiz], (9,9))","c59ea3d7":"# In the following, the fixed_constraints are constructed from the board directly. \n# This part only needs to be constructed once. The output has been returned as a sparse matrix for efficiency.\n\ndef fixed_constraints(N=9):\n    rowC = np.zeros(N)\n    rowC[0] =1\n    rowR = np.zeros(N)\n    rowR[0] =1\n    row = scl.toeplitz(rowC, rowR)\n    ROW = np.kron(row, np.kron(np.ones((1,N)), np.eye(N)))\n    \n    colR = np.kron(np.ones((1,N)), rowC)\n    col  = scl.toeplitz(rowC, colR)\n    COL  = np.kron(col, np.eye(N))\n    \n    M = int(np.sqrt(N))\n    boxC = np.zeros(M)\n    boxC[0]=1\n    boxR = np.kron(np.ones((1, M)), boxC) \n    box = scl.toeplitz(boxC, boxR)\n    box = np.kron(np.eye(M), box)\n    BOX = np.kron(box, np.block([np.eye(N), np.eye(N) ,np.eye(N)]))\n    \n    cell = np.eye(N**2)\n    CELL = np.kron(cell, np.ones((1,N)))\n    \n    return scs.csr_matrix(np.block([[ROW],[COL],[BOX],[CELL]]))","3c533ac0":"# Take a look of the constraint matrix A0 with adding the clues.\nA0 = fixed_constraints()\n\n# The spy visualization of A0\nplt.spy(A0, markersize=0.2)","80da1d40":"# For the constraint from clues, we extract the nonzeros from the quiz string.\ndef clue_constraint(input_quiz, N=9):\n    m = np.reshape([int(c) for c in input_quiz], (N,N))\n    r, c = np.where(m.T)\n    v = np.array([m[c[d],r[d]] for d in range(len(r))])\n    \n    table = N * c + r\n    table = np.block([[table],[v-1]])\n    \n    # it is faster to use lil_matrix when changing the sparse structure.\n    CLUE = scs.lil_matrix((len(table.T), N**3))\n    for i in range(len(table.T)):\n        CLUE[i,table[0,i]*N + table[1,i]] = 1\n    # change back to csr_matrix.\n    CLUE = CLUE.tocsr() \n    \n    return CLUE","78fe7f02":"# get the constraint matrix from clue.\nA1 = clue_constraint(quiz)\n\n# Formulate the matrix A and vector B (B is all ones).\nA = scs.vstack((A0,A1))\nB = np.ones((np.size(A, 0)))","bb7ed47c":"In the following we consider the constrained optimization problem for Sudoku with the following objective function, such objective function is chosen as the so-called entropy. The entropy function $E(x) = -x\\log x$ has the property that it reaches the minimum on $x=0$ and $x=1$.\n\n$$\\min_{0\\le x_{ijk}\\le 1}\\quad \\sum_{i,j,k} E(x_{ijk})$$\n\nsubject to the linear constraints $A X = B$, where $X$ represents the vector of $x_{ijk}$. ","36d3e997":"First, let's have a look at the data itself. We take the smallest dataset in the ``input`` directory. ","d5125bdb":"After we have formulated the linear constraint $AX = B$, now we just search the minimimum for this nonlinear minimization problem. ","63086725":"![](http:\/\/)The project description is available on [Colab](https:\/\/colab.research.google.com\/drive\/1RNR3bkramHc2iVacBwHDR13IW78k7fWs)."}}