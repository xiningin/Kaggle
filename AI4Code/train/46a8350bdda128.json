{"cell_type":{"f42b05e5":"code","41bf24fe":"code","2f6b6856":"code","1cf46595":"code","98f976ce":"code","478e809b":"code","1d643724":"code","6fc3e23e":"code","4555458d":"code","af80f8ec":"code","2ea98416":"code","2aafa45e":"code","62633b76":"code","26310dc0":"code","9083d134":"code","843fa1d9":"code","26f14477":"code","4fa21af2":"code","5e9e0bc7":"code","37509a1c":"code","cdbf8756":"code","ebd0d3e2":"code","0eadae40":"code","9e01d207":"code","906313c3":"code","5a42a020":"code","192cf279":"code","48d8ebe5":"code","a63997ce":"code","6d63e749":"code","72bbbae7":"code","6b1f07da":"code","f64da893":"code","cb15f465":"code","553963a0":"code","49544e87":"code","c8dd9207":"code","36666541":"code","0af7c25f":"markdown","e3778446":"markdown","d85d5048":"markdown","582b3d05":"markdown","02a2f71c":"markdown","1d4a2358":"markdown","37c7b93a":"markdown"},"source":{"f42b05e5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","41bf24fe":"df_train=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf_test=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","2f6b6856":"df_train.head()","1cf46595":"#Converting categorical as all are ordinal:\nScore_map = {\"Ex\":5, \"Gd\":4, \"TA\":3, \"Fa\":2,\"Po\":1,\"NA\":0}\nBsmtFin_map = {\"GLQ\":5, \"ALQ\":4, \"BLQ\":3, \"Rec\":2, \"LwQ\":1, \"Unf\":1, \"NA\":0}\nBsmtEx_map= {\"Gd\":3, \"Av\":2, \"Mn\":1, \"No\":0, \"NA\":0}\ndf_train[\"BsmtFinType1\"] = df_train.BsmtFinType1.replace(BsmtFin_map)\ndf_train[\"BsmtFinType2\"] = df_train.BsmtFinType2.replace(BsmtFin_map)\ndf_train[\"BsmtExposure\"]=df_train.BsmtExposure.replace(BsmtEx_map)\ndf_train[\"BsmtQual\"]=df_train.BsmtQual.replace(Score_map)\ndf_train[\"BsmtCond\"]=df_train.BsmtCond.replace(Score_map)\ndf_test[\"BsmtFinType1\"]=df_test.BsmtFinType1.replace(BsmtFin_map)\ndf_test[\"BsmtFinType2\"]=df_test.BsmtFinType2.replace(BsmtFin_map)\ndf_test[\"BsmtExposure\"]=df_test.BsmtExposure.replace(BsmtEx_map)\ndf_test[\"BsmtQual\"]=df_test.BsmtQual.replace(Score_map)\ndf_test[\"BsmtCond\"]=df_test.BsmtCond.replace(Score_map)","98f976ce":"basement_new= df_train[['BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1'\n            , 'BsmtFinSF1', 'BsmtUnfSF', 'TotalBsmtSF','BsmtFinType2'\n            , 'BsmtFinSF2', 'BsmtFullBath', 'BsmtHalfBath','SalePrice']]","478e809b":"basement_new.head()","1d643724":"corrmat = basement_new.corr()\ntop_corr_features = corrmat.index\nplt.figure(figsize=(20,20))\n#plot heat map\ng=sns.heatmap(basement_new[top_corr_features].corr(),annot=True,cmap=\"RdYlGn\")","6fc3e23e":"Score_mapex = {\"Ex\":5, \"Gd\":4, \"TA\":3, \"Fa\":2,\"Po\":1}\ndf_train[\"ExterQual\"] = df_train.ExterQual.replace(Score_mapex)\ndf_train[\"ExterCond\"] = df_train.ExterCond.replace(Score_mapex)\ndf_train[\"HeatingQC\"] = df_train.HeatingQC.replace(Score_mapex)\ndf_train[\"KitchenQual\"] = df_train.KitchenQual.replace(Score_mapex)\ndf_test[\"ExterQual\"] = df_test.ExterQual.replace(Score_mapex)\ndf_test[\"ExterCond\"] = df_test.ExterCond.replace(Score_mapex)\ndf_test[\"HeatingQC\"] = df_test.HeatingQC.replace(Score_mapex)\ndf_test[\"KitchenQual\"] = df_test.KitchenQual.replace(Score_mapex)","4555458d":"cor2=df_train[['ExterQual','ExterCond','BsmtFullBath','BsmtHalfBath','FullBath'\n               ,'HalfBath','HeatingQC','KitchenQual','SalePrice']]\ncorrmat2 = cor2.corr()\ntop_corr_features = corrmat2.index\nplt.figure(figsize=(18,18))\n#plot heat map\ng=sns.heatmap(cor2[top_corr_features].corr(),annot=True,cmap=\"RdYlGn\")","af80f8ec":"Score_map = {\"Ex\":4, \"Gd\":3, \"TA\":2, \"Fa\":1,\"NaN\":0}\nScore_mappool = {\"Ex\":5, \"Gd\":4, \"TA\":3, \"Fa\":2,\"Po\":1,\"NaN\":0}\ndf_train[\"FireplaceQu\"] = df_train.FireplaceQu.replace(Score_map)\ndf_train[\"GarageQual\"] = df_train.GarageQual.replace(Score_map)\ndf_train[\"GarageCond\"] = df_train.GarageCond.replace(Score_map)\ndf_train[\"PoolQC\"] = df_train.GarageCond.replace(Score_mappool)\ndf_test[\"FireplaceQu\"] = df_test.FireplaceQu.replace(Score_map)\ndf_test[\"GarageQual\"] = df_test.GarageQual.replace(Score_map)\ndf_test[\"GarageCond\"] = df_test.GarageCond.replace(Score_map)\ndf_test[\"PoolQC\"] = df_test.GarageCond.replace(Score_mappool)","2ea98416":"cor3=df_train[['FireplaceQu','GarageQual','GarageCond','PoolQC','MiscVal'\n               ,'WoodDeckSF','OpenPorchSF','EnclosedPorch','3SsnPorch','ScreenPorch','PoolArea','SalePrice']]","2aafa45e":"cor3=cor3.fillna(0)\ncor3.head()","62633b76":"corrmat3 = cor3.corr()\ntop_corr_features = corrmat3.index\nplt.figure(figsize=(18,18))\n#plot heat map\ng=sns.heatmap(cor3[top_corr_features].corr(),annot=True,cmap=\"RdYlGn\")","26310dc0":"train=df_train[['OverallQual','BsmtQual','BsmtExposure','BsmtFinType1','BsmtFinSF1'\n                 ,'TotalBsmtSF','ExterQual','FullBath','HeatingQC','KitchenQual','WoodDeckSF','OpenPorchSF'\n                 ,'LotArea','YearBuilt','TotalBsmtSF','TotRmsAbvGrd','SalePrice']]\ntrain=train.fillna(0)\ntrain.isnull().sum().sort_values(ascending=False)","9083d134":"X = train.iloc[:, :-1].values\ny = train.iloc[:, -1].values","843fa1d9":"testfeat=df_test[['OverallQual','BsmtQual','BsmtExposure','BsmtFinType1','BsmtFinSF1'\n                 ,'TotalBsmtSF','ExterQual','FullBath','HeatingQC','KitchenQual','WoodDeckSF','OpenPorchSF'\n                 ,'LotArea','YearBuilt','TotalBsmtSF','TotRmsAbvGrd']]\ntestfeat=testfeat.fillna(0)","26f14477":"Xtestfeat=testfeat.iloc[:, :].values","4fa21af2":"y=y.reshape(len(y),1)","5e9e0bc7":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test= train_test_split(X,y,test_size=0.2,random_state=1)","37509a1c":"from sklearn.linear_model import LinearRegression\nlm= LinearRegression()\nlm.fit(X_train,y_train)","cdbf8756":"ypred=lm.predict(X_test)\nnp.set_printoptions(precision=2)\nprint(np.concatenate((ypred,y_test),1))","ebd0d3e2":"from sklearn.metrics import r2_score\nr2_score(y_test, ypred)","0eadae40":"from sklearn import metrics\nprint('MAE:', metrics.mean_absolute_error(y_test, ypred))\nprint('MSE:', metrics.mean_squared_error(y_test, ypred))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, ypred)))","9e01d207":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test= train_test_split(X,y,test_size=0.2,random_state=1)","906313c3":"from sklearn.preprocessing import StandardScaler\nsc_X = StandardScaler()\nsc_y = StandardScaler()\nX_train = sc_X.fit_transform(X_train)\ny_train = sc_y.fit_transform(y_train)","5a42a020":"from sklearn.svm import SVR\nSVregressor = SVR(kernel = 'rbf')\nSVregressor.fit(X_train, y_train)","192cf279":"y_predSVM =sc_y.inverse_transform(SVregressor.predict(sc_X.transform(X_test)))\nnp.set_printoptions(precision=2)\nprint(np.concatenate((y_predSVM.reshape(len(y_predSVM),1), y_test.reshape(len(y_test),1)),1))","48d8ebe5":"from sklearn.metrics import r2_score\nr2_score(y_test, y_predSVM)","a63997ce":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)","6d63e749":"from sklearn.tree import DecisionTreeRegressor\nDTregressor = DecisionTreeRegressor(random_state = 1)\nDTregressor.fit(X_train, y_train)","72bbbae7":"y_predDT = DTregressor.predict(X_test)\nnp.set_printoptions(precision=2)\nprint(np.concatenate((y_predDT.reshape(len(y_predDT),1), y_test.reshape(len(y_test),1)),1))","6b1f07da":"from sklearn.metrics import r2_score\nr2_score(y_test, y_predDT)","f64da893":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)","cb15f465":"from sklearn.ensemble import RandomForestRegressor\nRFregressor = RandomForestRegressor(n_estimators = 10, random_state = 0)\nRFregressor.fit(X_train, y_train)","553963a0":"RandomForestRegressor(n_estimators=10, random_state=0)\ny_predRF = RFregressor.predict(X_test)\nnp.set_printoptions(precision=2)\nprint(np.concatenate((y_predRF.reshape(len(y_predRF),1), y_test.reshape(len(y_test),1)),1))","49544e87":"from sklearn.metrics import r2_score\nr2_score(y_test, y_predRF)","c8dd9207":"testpredRFM = RFregressor.predict(Xtestfeat)\ntestpredRFM","36666541":"testpred=pd.DataFrame(testpredRFM)\nsub_df=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\ndatasets=pd.concat([sub_df['Id'],testpred],axis=1)\ndatasets.columns=['Id','SalePrice']\ndatasets.to_csv('NewSubmission.csv',index=False)","0af7c25f":"# Support Vector Regression","e3778446":"# Decision Tree Regression","d85d5048":"# Data Preprocessing\n## GOING ONE BY ONE","582b3d05":"### Since Random Forest Model has the best R2 Score","02a2f71c":"### Basement and Exterior","1d4a2358":"# Linear Regression","37c7b93a":"# Random Forest"}}