{"cell_type":{"6633a17b":"code","e61ca04a":"code","13d5f80f":"code","23c63af5":"code","7c337ba5":"code","798c4246":"code","afdb0648":"code","04af6edd":"code","b8f491a7":"code","e3b6943c":"code","e9daad3a":"code","e72c578e":"code","148fbb29":"code","1f1e173d":"code","4e41e7f5":"code","aa0f2f66":"code","fc7a0028":"code","ea7f25b4":"code","228ac6e6":"code","811936f3":"code","30eaf03b":"code","ef39a2aa":"code","9f68832e":"code","c992f6f7":"code","a76bc892":"code","0301b055":"code","492b65b5":"code","3fd88d22":"code","7c8852ee":"code","81519a65":"code","966d5f44":"code","dcbdcd93":"code","518ad9e8":"code","52b75191":"code","110872ad":"code","243e0843":"code","20461f46":"code","afd0e7eb":"code","049b008a":"code","33f6b04e":"code","2e259fe1":"markdown","40b871c7":"markdown","4d6727f9":"markdown","0892e74f":"markdown","0a4bc21d":"markdown","7c0c9149":"markdown","bb10d429":"markdown","c07a3164":"markdown","7ff7971f":"markdown","bc37f660":"markdown","a9115a0b":"markdown","95944b77":"markdown","8c4ea530":"markdown","e98e47df":"markdown","c831503d":"markdown","a370d870":"markdown","a7896db9":"markdown","38550a84":"markdown","1d4f291a":"markdown","f33ac678":"markdown","24c1a13e":"markdown","7501728a":"markdown","3740988a":"markdown","b97b0971":"markdown","7664b8b4":"markdown","c9bdca9b":"markdown","e1c06c85":"markdown","74869313":"markdown","df08d2db":"markdown","bc31aece":"markdown","2ef55422":"markdown","926a17c3":"markdown","c94f48a7":"markdown","7cfe5179":"markdown","e068b5b6":"markdown","6212229f":"markdown","f7efff43":"markdown","8d270cd4":"markdown","13d26efd":"markdown","347a4dc8":"markdown","b73d0f70":"markdown","1b676678":"markdown"},"source":{"6633a17b":"# importer la lib pandas pour le traitement sur le jeux de donn\u00e9es\nimport pandas as pd","e61ca04a":"# read the csv-formatted data file into a pandas dataframe\ndf=pd.read_csv('..\/input\/diabetes.csv')\n# get shape of data frame\nprint('Shape (n_rows,n_columns) of dataframe:',df.shape)\n# print top 5 rows (default) of the data frame\ndf.head()","13d5f80f":"df2=df[['Outcome','Pregnancies','Insulin']].head()\ndf2","23c63af5":"df3=df[['Age']].head()\ndf3","7c337ba5":"# Le premier \u00e9l\u00e9ment est le nombre de lignes, le second est celui de colonnes:\nprint(df[df.BMI>30].shape) \n# le premier \u00e9l\u00e9ment (nbr lignes) a pour indice 0, le second (nbr colonnes) 1.\nprint('The number of rows where BMI>30 = ',df[df.BMI>30].shape[0]) ","798c4246":"# A nouveau les 5 premiers enregistrements\ndf[df.BMI<10].head()","afdb0648":"# On peut observer le comportement par d\u00e9faut avec cette commande :\ndf.BMI>30","04af6edd":"# Votre code ici","b8f491a7":"# Votre code ici\n","e3b6943c":"# Nombre de cellules nulles (non renseign\u00e9es) par colonnes\ndf.isnull().sum()","e9daad3a":"# Nombre de cellules non nulles (donc renseign\u00e9es) par colonnes\ndf.notnull().sum()","e72c578e":"df.columns","148fbb29":"df.dtypes","1f1e173d":"df.describe()","4e41e7f5":"df.Outcome.value_counts()\n#df.Insulin.value_counts()","aa0f2f66":"# Il y a plein de mani\u00e8re d'\u00e9crire cette commande\ndf[df.Outcome==1].SkinThickness.mean()","fc7a0028":"# Ou\ndf[df[\"Outcome\"]==1].SkinThickness.mean()","ea7f25b4":"# Ou encore...\ndf[df[\"Outcome\"]==1][\"SkinThickness\"].mean()","228ac6e6":"# Et pour jouer : mais encore...\n","811936f3":"# get a plotting library\nimport matplotlib.pyplot as plt\n# make it interactive in the notebook (Only needed for that librairy)\n%matplotlib inline ","30eaf03b":"# plot Glucose vs BloodPressure and color points according to Outcome\nplt.figure()\nplt.scatter(df[df.Outcome==1].BloodPressure,df[df.Outcome==1].Glucose,label='Diabete',color='r', marker=\"o\",s=5)\nplt.scatter(df[df.Outcome==0].BloodPressure,df[df.Outcome==0].Glucose,label='No Diabete',color='b',marker=\"x\",s=5)\nplt.legend()\nplt.xlabel('BloodPressure')\nplt.ylabel('Glucose')","ef39a2aa":"# R\u00e9cup\u00e9ration du plus long nom de colonne\ndimension = max( [ len(c) for c in df.columns ] )\n\n# Pour chacune des colonnes (plus exactement : Pour chacun des noms de colonne)\nfor c in df.columns:\n    # Version basique : print('For column',c,' there are',df[df[c]==0][c].count(),'zero values.')\n    # ou d'une mani\u00e8re plus riche visuellement\n    print(\n        'Pour l\\'attribut {quoi!r:<{dim}} il y a {combien:>4} valeurs 0.' \n        .format(\n            quoi=c,\n            combien=df[df[c]==0][c].count(),\n            dim=dimension+2)\n    )\n","9f68832e":"# Pour chacun des attributs\nfor c in df.columns:\n    plt.figure()               # On construit un nouveau dessin\n    plt.hist(df[c],bins=15)    # On regroupe les valeurs de la colonne 'c' par plage de largeur 15\n    plt.xlabel(c)              # On donne le nom de l'attribut pour l'abscisse\n    plt.ylabel('Fr\u00e9quence')    # On nomme l'axe des ordonn\u00e9es \"Fr\u00e9quence\"\n    plt.show()                 # On demande l'affichage","c992f6f7":"# Exemple 1 : Visualisation de liaison entre Sucre et Pression art\u00e9rielle \n#             pour les patientes diab\u00e9tiques en utilisant un ScatterPlot\nplt.figure\nfor c in df.columns:\n    plt.scatter(\n        df[df.Outcome==1].BloodPressure,\n        df[df.Outcome==1].Glucose,\n        label='Diabete',\n        color='r',\n        s=3\n    )\n    plt.xlabel(\"Pression sanguine\")\n    plt.ylabel(\"Sucre\")","a76bc892":"# Exemple 2 : superposition des histogrammes de l'Age en fonction du diab\u00e8te\nplt.figure()\nplt.hist(df[df.Outcome==1]['Age'],bins=15,label='Diabetes',color='r',alpha=0.2)\nplt.hist(df[df.Outcome==0]['Age'],bins=15,label='No Diabetes',color='b',alpha=0.2)\nplt.xlabel('Age')\nplt.ylabel('Frequence')\nplt.legend()\nplt.show()","0301b055":"import numpy as np\n# create a new column in the data frame with the predicted outcome based on your split \n#   (here, Age<30 means outcome=0, otherwise outcome=1)\ndf['PredictedOutcome']=np.where(df.Age<100,0,1)\n# calculate accuracy\nN_correct=df[df.PredictedOutcome==df.Outcome].shape[0]\nN_total=df.shape[0]\naccuracy=N_correct\/N_total\nprint('number of correct examples =',N_correct)\nprint('number of examples in total =',N_total)\nprint('accuracy =',accuracy)","492b65b5":"# Votre code ici\n","3fd88d22":"# Retrait physique de la colonne _Insulin_ (axis=1 signifie par son nom)\ndonnees = df\ndonnees.drop('Insulin',axis=1,inplace=True)\n# o\u00f9 l'on voit bien que l'objet 'donnees' est bien le m\u00eame objet que 'df' !!!\ndf.columns\n","7c8852ee":"# Avec la fonction train_test_split de sklearn on peut facilement diviser notre dataframe\n# en ensembles train\/test \nimport sklearn\nfrom sklearn.model_selection import train_test_split\n# 0,3 pour pr\u00e9ciser que 30% seront pour l'ensemble de test et 70% pour l'entrainement\ntrain, test = train_test_split(donnees, test_size = 0.3, random_state = 0) \n\n# Visualisaton des ensembles\ntrain.describe()","81519a65":"# La biblioth\u00e8que numpy offre plusieurs fonctions tr\u00e8s utiles. Par exemple, elle nous permet de cr\u00e9er une nouvelle colonne dans notre\n# dataframe si une condition est satisfaite\nimport numpy as np\n\ndef imputeColumns(dataset):\n    \"\"\" Pour chacune des colonnes du dataset,\n        mise \u00e0 jour des valeurs \u00e0 zero par la moyenne de ses valeurs non nulles.\n    \"\"\"\n    # liste des colonnes qui seront trait\u00e9es\n    columnsToImpute=['Glucose', 'BloodPressure', 'SkinThickness','BMI']\n\n    for c in columnsToImpute:\n        avgOfCol=dataset[dataset[c]>0][[c]].mean()\n        dataset[c+'_imputed']=np.where(dataset[[c]]!=0,dataset[[c]],avgOfCol)\n#        dataset[c]=np.where(dataset[[c]]!=0,dataset[[c]],avgOfCol)\n\nimputeColumns(train)\nimputeColumns(test)\n# check that we've imputed the 0 values  \ntrain[['Glucose','Glucose_imputed']].head()","966d5f44":"# R\u00e9\u00e9crivez (par r\u00e9flexion et non copiage direct) ce code par vous-m\u00eame :\n","dcbdcd93":"# Construction des sous-ensembles Entr\u00e9e (X) et Sortie (Y) \nX_train = train[['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness','BMI', 'DiabetesPedigreeFunction', 'Age']]\nY_train = train[['Outcome']]\nX_test = test[['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'BMI', 'DiabetesPedigreeFunction', 'Age']]\nY_test = test[['Outcome']]\n\n# Exemple d'affichage\nX_train.columns\n","518ad9e8":"# Comparaison des statistiques des 2 ensembles Train et Test\n","52b75191":"Y_train.describe()","110872ad":"Y_test.describe()","243e0843":"from sklearn import tree\n\n# Create the classifier\nmon_arbre_de_decision = tree.DecisionTreeClassifier(random_state = 0)\n\n# Train the classifier on the training set\nmon_arbre_de_decision.fit(X_train, Y_train)\n\n# Evaluate the classifier on the testing set using classification accuracy\nmon_arbre_de_decision.score(X_test, Y_test)","20461f46":"import graphviz\nresultat_visuel = tree.export_graphviz(mon_arbre_de_decision, out_file=None)\ngraph = graphviz.Source(resultat_visuel)\ngraph\n                             \n#dot_data = export_graphviz(mon_arbre_de_decision, out_file=None)","afd0e7eb":"# Votre code ici","049b008a":"# Votre code ici","33f6b04e":"### Votre code ici\n# exemple = [[ 5,12,20.0, 12,5,123,1]]\n# mon_arbre_de_decision.predict(exemple)","2e259fe1":"### Savoir si notre jeux de donn\u00e9es poss\u00e8de des champs vides (non renseign\u00e9s) ?","40b871c7":"Nous allons voir un exemple de mise en oeuvre d'un classificateur 'arbre de d\u00e9cision' pour le probl\u00e8me du diab\u00e8te. L'objectif est de pr\u00e9dire sur la base de mesures diagnostiques si un patient est atteint de diab\u00e8te ou non.\n\nNous construisons un mod\u00e8le qui va faire des pr\u00e9dictions, nous devons donc trouver un moyen d'\u00e9valuer la qualit\u00e9 de ces pr\u00e9dictions . \u00c9tant donn\u00e9 que les pr\u00e9dictions par d\u00e9finition ne concernent que des donn\u00e9es in\u00e9dites, nous ne pouvons pas d\u00e9pendre des donn\u00e9es utilis\u00e9es pour \u00e9valuer le mod\u00e8le. Nous avons pour cela  diviser le jeu de donn\u00e9es en deux parties non crois\u00e9es.  \n_NB : nous utiliserons la biblioth\u00e8que http:\/\/scikit-learn.org\/stable\/_ ; en particulier [les arbres de d\u00e9cision](http:\/\/scikit-learn.org\/stable\/modules\/tree.html#tree)","4d6727f9":"Il existe de nombreuses mesures pour calculer la qualit\u00e9 d'un classificateur. (Vous pouvez faire une petite recherche sur le sujet et l'ajouter dans votre rapport - sinon, voir \u00e9tape 5).","0892e74f":"### Afficher le type de donn\u00e9es des colonnes ","0a4bc21d":"## \u00c9tape 5:\n# La classification avec les arbres de decision","7c0c9149":"# 3. Guide de r\u00e9alisation du Projet\nNous allons maintenant mettre en oeuvre le plan de r\u00e9alisation.\n\n## \u00c9tape 1 : Lecture des donn\u00e9es\n\nGr\u00e2ce \u00e0 la biblioth\u00e8que '_pandas_', nous pouvons manipuler notre jeux de donn\u00e9es : lire, \u00e9crire, stocker, visualiser, supprimer des lignes, des colonnes, cr\u00e9er des dataframes, etc.","bb10d429":"### S\u00e9lection des donn\u00e9es qui satisfont une condition, et calcul de leur nombre.\n","c07a3164":"## 2.\t\u00c0 PROPOS DU JEUX DE DONN\u00c9ES\nCet ensemble de donn\u00e9es provient d\u2019une extraction fournie par un Institut du diab\u00e8te. Vous pouvez le t\u00e9l\u00e9charger [d'ici](https:\/\/drive.google.com\/file\/d\/1lrROnXEB5b55IznkdDKKCK9rZgOCuETK\/view)\n , mais il est d\u00e9j\u00e0 pr\u00e9sent dans la partie _Data_ de ce Notebook.  \nL'objectif de cet ensemble est de construire un outil permettant de r\u00e9aliser un diagnostic positif ou n\u00e9gatif de la pr\u00e9sence d'un diab\u00e8te chez un patient. \nPlusieurs contraintes ont \u00e9t\u00e9 plac\u00e9es sur la s\u00e9lection de ces instances dans la base de donn\u00e9es d'origine (bien plus volumineuse). En particulier, tous les patients ici sont des femmes \u00e2g\u00e9es d'au moins 21 ans.\n\nLes ensembles de donn\u00e9es comprennent plusieurs variables pr\u00e9dictives m\u00e9dicales et la variable cible \u00ab _Outcome_ \u00bb dont la valeur _1_ signifie que la patiente est diab\u00e9tique et la valeur _0_ qu'il ne l'est pas.  \nLes variables pr\u00e9dictives comprennent le nombre de grossesses que le patient a eues, son IMC, son taux d'insuline, son \u00e2ge, etc.\n\nChaque ligne repr\u00e9sente un patient et les colonnes sont :\n-\t_Grossesses_ : nombre de fois o\u00f9 la patiente a d\u00e9j\u00e0 \u00e9t\u00e9 enceinte\n-\t_Glucose_ : concentration en glucose plasmatique 2 heures dans un test de tol\u00e9rance au glucose par voie orale\n-\t_BloodPressure_ : pression art\u00e9rielle diastolique (mm Hg)\n-\t_SkinThickness_ : \u00e9paisseur du pli cutan\u00e9 des triceps (mm)\n-\t_Insuline_ : insuline s\u00e9rique de 2 heures (mu U \/ ml)\n-\t_IMC_ : indice de masse corporelle (poids en kg \/ (taille en m) ^ 2)\n-\t_DiabetesPedigreeFunction_ : Fonction p\u00e9digr\u00e9e du diab\u00e8te\n-\t_Age_ : age (ans)\n-\t_Outcome_ : Variable de classe dont les \u00e9tats sont soit 1 (diab\u00e8te), soit 0 (non diab\u00e8te).","7ff7971f":"Pour certaines de ces colonnes, 0 a un sens, comme pour le nombre de grossesses (_Pregnancies_) ou  le r\u00e9sultat (_Outcome_). Mais pour d'autres colonnes, comme _BloodPressure_ ou _BMI_, z\u00e9ro n'a absolument aucun sens.  \nExaminons de plus pr\u00e8s les donn\u00e9es en dessinant un histogramme des valeurs pour chaque colonne.","bc37f660":"Remarquez qu'on peut constater que plus le taux de glucose est \u00e9lev\u00e9, plus l'enregistrement est associ\u00e9 \u00e0 un diab\u00e8te (r\u00e9sultat = 1, points rouges), tandis que plus il est bas, et plus il est associ\u00e9 \u00e0 l'absence du diab\u00e8te (r\u00e9sultat = 0, points bleus).\n\nNotez \u00e9galement qu'il y a un ensemble de points de valeur 0 pour _Glucose_ et un autre de valeur 0 pour _BloodPressure._ Cela n'a pas de sens physiologiquement (les patientes seraient mortes). Il semble dont que ces donn\u00e9es ont \u00e9t\u00e9 remplies avec 0 alors que la valeur aurait d\u00fb \u00eatre _NULL_.  \nV\u00e9rifions combien de z\u00e9ros apparaissent dans chaque colonne.","a9115a0b":"#### Retrait des donn\u00e9es non pertinentes ou incorrectes","95944b77":"\n## Mini projet 1\n# PR\u00c9DICTION DE DIAB\u00c8TE : Pr\u00e9paration des donn\u00e9es\n## 1.\tTRAVAIL \u00c0 R\u00c9ALISER\nDans le cadre de ce mini projet, vous allez r\u00e9aliser un programme complet s\u2019appuyant sur les techniques du Deep Learning et du Data Mining vues en cours, en suivant les \u00e9tapes de ce Notebook python.  \nPour ce faire, vous pouvez utiliser en local sur vos machines l'environnement _Jupyter Notebook_ distribu\u00e9 par _anaconda_, ou bien en ligne via [kaggle.com](http:\/\/kaggle.com).  \nIl nous permettra d'aborder les premiers traitements de donn\u00e9es n\u00e9cessaires dans tous les probl\u00e8mes issus du monde r\u00e9el.  \nL\u2019objectif fondamental est de pr\u00e9dire si oui ou non un patient est atteint du diab\u00e8te \u00e0 partir de certains attributs : \u00e2ge, nombre de grossesses, taux d\u2019insuline, etc.  \n\n_NB : la comp\u00e9tence \u00e0 utiliser la langage Python n'est pas l'objectif de ce travail, m\u00eame s'il va certainement vous permettre d'\u00e9voluer dans ce domaine. Nous vous conseillons la documentation officielle https:\/\/www.python.org\/ et en particulier la description de sa syntaxe. Vous pouvez ais\u00e9ment conna\u00eetre la version ex\u00e9cut\u00e9e par votre plateforme gr\u00e2ce \u00e0 la commande `print (sys.version)`_\n\n_Sujet cr\u00e9\u00e9 par Amine Chemchem_\n\n>### Plan de r\u00e9alisation\n>Votre travail suivra les \u00e9tapes suivantes qui sont fondamentales pour le traitement des donn\u00e9es :\n>1.\tEffectuer un pr\u00e9traitement pour uniformiser les donn\u00e9es trait\u00e9es ;\n>2. Visualiser les donn\u00e9es pour montrer le degr\u00e9 d\u2019influence d\u2019un attribut par rapport \u00e0 la classe finale. Ceci est facilement r\u00e9alisable gr\u00e2ce \u00e0 _matplot.pyplot_ et _pyplot scatter_. (Voir la suite de ce notebook).  \n>R\u00e9aliser plusieurs visualisations pour les variables de votre choix ;\n>3. Choisir les variables d\u2019entrainement par rapport \u00e0 la variable cible ;\n>4. D\u00e9couper votre jeu de donn\u00e9es en deux parties : entrainement et test ;\n>5.\tMettre en \u0153uvre l\u2019algorithme d\u2019apprentissage : arbre de d\u00e9cision. Calculer le taux de pr\u00e9cision (accuracy) et son temps d\u2019ex\u00e9cution. (Vous pouvez utiliser la biblioth\u00e8que python _sklearn_) ;\n>6. (2\u00e8me TD) Mettre en \u0153uvre l\u2019algorithme d\u2019apprentissage : KNN. Calculer le taux d'exactitude. <!-- (Sans utiliser la lib sklearn) -->;\n>7. ((2\u00e8me TD)) Faire des comparaisons entre les deux approches knn et arbre de d\u00e9cision en taux d\u2019accuracy ;\n>8. (Question bonus) Compl\u00e9tez votre \u00e9tude par des approches de votre choix telles que r\u00e9seaux de neurones, SVM, ou autre...\n\n>### Travail \u00e0 rendre\n>Un petit rapport reprenant vos remarques relatives aux codes propos\u00e9s dans le sujet, ainsi que vos codes et commentaires \u00e0 chacune des questions\n>Envoi \u00e0 mailto:eric.desjardin@univ-reims?Subject=DL\n","8c4ea530":"### Question 1.5\nQuel est le maximum du \"_BMI_\" lorsque la patiente n'est pas atteinte par le diab\u00e8te ?\n<!-- df[df[\"Outcome\"]==0].BMI.max() -->","e98e47df":"### Afficher la liste des colonnes","c831503d":"## \u00c9tape 3 :\n  La pr\u00e9paration des donn\u00e9es pour le traitement se divise en 2 sous-\u00e9tapes : \n  1. Correction de l'ensemble initial ;\n      - Nous avons remarqu\u00e9 que le colonne _Insuline_ \u00e9tait insuffisamment renseign\u00e9e et nous allons la retirer\n      - Certaines valeurs \u00e0 0 doivent(\/peuvent) \u00eatre remplac\u00e9es par la moyenne\n  1. Division de l'ensemble de donn\u00e9es en un ensemble d'entrainement et un ensemble de test (TRAIN\/TEST)\n","a370d870":"## Exercice 1\n### Question 1.1\n1. Faire une s\u00e9lection des donn\u00e9es pour lesquelles le glucose est sup\u00e9rieur \u00e0 90, _puis en_\n1. S\u00e9lectionner uniquement les colonnes: Outcome, BMI, and Age, _puis en_ \n1. S\u00e9lectionner uniquement les 8 premi\u00e8res lignes.\n\n<!-- df[df.Glucose>90][[\"Outcome\",\"BMI\",\"Age\"]].head(8) -->","a7896db9":"### Documentation Pandas\nConsulter le lien https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.html pour rechercher les informations sur les fonctionnalit\u00e9s pr\u00e9sentes dans le code ci-dessous :\n","38550a84":"#### Traitement des valeurs manquantes","1d4f291a":"### Question 2.1\nChoisir la colonne (l'attribut) qui, pour vous, maximise pour vous visuellement l'efficacit\u00e9 de la s\u00e9paration.  Vous expliciterez votre d\u00e9marche.\n\n### Question 2.2\nEn vous inspirant du code ci-dessous, o\u00f9 l'on fait l'hypoth\u00e8se que l'\u00e2ge est l'attribut discriminant avec un seuil \u00e0 30 ans, calculer le degr\u00e9 d'exactitude de votre classificateur ?\n_NB : Pour la documentation sur Numpy visitez le lien : https:\/\/docs.scipy.org\/doc\/numpy\/user\/quickstart.html_\n","f33ac678":"### Question 5.3 : \nProposer un nouvel \u00e9chantillon et \u00e9valuer sa classification (fonctionnalit\u00e9 `predict`)","24c1a13e":"\n\n#### Superposition d'histogrammes","7501728a":"### Question 1.4 \n\nDans ce jeux de donn\u00e9es, combien de personnes pr\u00e9sentant un diab\u00e8te ont une tension art\u00e9rielle sup\u00e9rieur \u00e0 70 ?\n<!-- \n  df[ (df.Outcome==1) & (df.BloodPressure>70)] . count()\n-->","3740988a":"## \u00c9tape 4:  \nExtraction des attributs d'entr\u00e8e , et l'attribut cible","b97b0971":"### EXERCISE 4 : V\u00e9rifier les ensembles d'apprentissage et de test\n\n### Question 4.1  : \nV\u00e9rifier succinctement que les deux ensembles ont des statistiques \u00e9quivalentes\n<!-- train.describe() -->\n<!-- test.describe() -->","7664b8b4":"### EXERCISE 2 : \n\nEn vous appuyant sur les 2 exemples de code ci-dessous, inspecter chacune des caract\u00e9ristiques. Vous recherchez en particulier une caract\u00e9ristique dont un seuil permettrait de scinder efficacement l'ensemble de enregistrements en 'Diab\u00e8te' et 'Non diab\u00e8te'.\n\n#### Visualisation des nuages de points\/graphes de dispersion.","c9bdca9b":"Premi\u00e8re analyse visuelle par des  diagrammes de dispersion (scatter plot)","e1c06c85":"\u00c0 partir de ces histogrammes, il semble que bon nombre de valeurs \u00e0 0 sont en effet des donn\u00e9es dont la valeur manquait et qui auraient d\u00fb \u00eatre \u00e9tiquet\u00e9es NULL. Elles devront \u00eatre prises en compte avant que nous formions un mod\u00e8le pour classer les donn\u00e9es.\n\nDe plus, nous pouvons remarquer que la colonne _Insuline_ n'a que 374 valeurs renseign\u00e9es (sur un total de 768 lignes), soit presque 50% des valeurs sont des 0.\n\nDans l'\u00e9tape 3 o\u00f9 nous traiterons les cas d'inconsistance des donn\u00e9es, nous supprimerons la colonne d'insuline, car beaucoup de ses valeurs sont manquantes.  Ensuite, nous remplacerons les z\u00e9ros dans les colonnes o\u00f9 z\u00e9ro n'a pas de sens. Nous ferons le choix d'utiliser la moyenne des valeurs non nulles dans chaque colonne pour remplacer ces valeurs nulles.\n\n_NB : il ne faudra pas oublier lors de l'analyse finale des r\u00e9sultats de v\u00e9rifier que ces hypoth\u00e8ses sont pertinentes (valides) sous peine d'avoir introduit des biais ou des erreurs importantes. Une connaissance experte du domaine est alors tr\u00e8s souvent n\u00e9cessaire._\n","74869313":"### Combien y a-t-il de diagnostics ?","df08d2db":"### Avoir un r\u00e9sum\u00e9 statistique de notre Dataframe","bc31aece":"Notez que le \"nombre\" de valeurs pour chaque colonne est le m\u00eame que le nombre de lignes dans le bloc de donn\u00e9es. Cela signifie qu'il n'y a pas de valeurs manquantes (NULL).","2ef55422":"### Quelle est la moyenne de l'\u00e9paisseur de la peau des patientes dont le diagnostic est le diab\u00e8te  ?","926a17c3":"### Question 1.2\n1. Faire une s\u00e9lection des enregistrements o\u00f9 le glucose est entre 90 et 130, _puis en_\n1. S\u00e9lectionner uniquement les colonnes: Outcome, BMI, and Age, _puis en_\n1. S\u00e9lectionner uniquement les 6 premi\u00e8res lignes.\n\n<!-- df[(df.Glucose>90)&(df.Glucose<130)][[\"Outcome\",\"BMI\",\"Age\"]].head(6) -->","c94f48a7":"#### Cr\u00e9ation des sous-ensemble d'entrainement et de test\nOn r\u00e9alise ce d\u00e9coupage avant le remplacement de valeur afin de pouvoir utiliser les statistiques de chacun de ces ensembles.\n","7cfe5179":"#### Visualisation de l'arbre","e068b5b6":"### Maintenant \u00e0 vous de jouer \nCompl\u00e9ter votre travail en suivant l \u00e9nonc\u00e9 des \u00e9tapes 6, 7 et 8 \u00e9nonc\u00e9es en introduction.","6212229f":" Nous utilisons l'ensemble d'entrainement pour construire notre mod\u00e8le pour les arbres de decision. Puis on va \u00e9valuer son score sur l'ensemble de test. ","f7efff43":"### EXERCISE 5 : Calcul d'indicateurs de classification\n\n### Question 5.1  : \nCalculer les pourcentages de couples VV, VF, FV, FF sur respectivement les ensembles de test et d'entrainement (d'apprentissage) o\u00f9 : \n- V(rai) et F(aux) repr\u00e9sente l'appartenance \u00e0 la classe \"est sujette au diab\u00e8te\", \n- La premi\u00e8re position correspond \u00e0 l'estimation et la deuxi\u00e8me \u00e0 la classe r\u00e9elle","8d270cd4":"### Question 5.2 : \nCalculer les indices de Jaccard <http:\/\/fr.wikipedia.org\/wiki\/Indice_et_distance_de_Jaccard> et de Dice <https:\/\/fr.wikipedia.org\/wiki\/Mesure_de_similarit%C3%A9>","13d26efd":"### S\u00e9lection d'une (ou plusieurs) colonne(s) comme un nouveau dataframe et affichage uniquement les 5 premi\u00e8res lignes.\n","347a4dc8":"## \u00c9tape  2 : Visualisation des donn\u00e9es\n\nLa visualisation des donn\u00e9es est une \u00e9tape tr\u00e8s importante dans l'analyse des donn\u00e9es.  \n_NB : Consultez ce lien pour la documentation de Matplot Scatter:   https:\/\/matplotlib.org\/gallery\/index.html_","b73d0f70":"## Manipuler le jeux de donn\u00e9es en utilisant quelques commandes de Pandas ","1b676678":"### Question 1.3\n1. S\u00e9lectionner les donn\u00e9es qui ont Outcome = 1 et Pregnancies>0, _puis_\n1. Se restreindre aux seules colonnes Glucose et BloodPressure, _puis_\n1. Se restreindre aux 3 premieres lignes du dataframe r\u00e9sultant.\n<!--\ndf[ (df.Outcome==1) & (df.Pregnancies>0) ] [ [\"Glucose\",\"BloodPressure\"] ] . head(3)\n-->"}}