{"cell_type":{"beb33955":"code","298a33f6":"code","6a5b6857":"code","ccc72584":"code","0a0a7611":"code","533f90f1":"code","33c421bd":"code","97d7a019":"code","6079bfce":"code","0cb5bf75":"code","184f5e88":"code","15756553":"code","161c2459":"code","f492046f":"code","e697a0c1":"code","be04f8fd":"code","62a196fc":"code","033aca9f":"code","e45f36cc":"code","d781a6f4":"code","dbc8cd7f":"code","4119e12e":"code","1fc486a2":"code","0bcabd9b":"code","ae8afb70":"code","973d9536":"code","04563fc1":"code","d2ef29f0":"code","2c2cca76":"code","07d26300":"code","7ff62f55":"code","c9fb8b6e":"code","4fe49708":"code","fe986d1d":"code","443ec3d8":"code","1b120bdc":"code","abd61659":"code","2df17467":"code","7999b83f":"code","4e069387":"code","6dd3ec54":"code","ea6096bb":"code","96d6cbd8":"code","d1c9b8d3":"code","50ef35e8":"code","13b27f5b":"code","5f99fe3e":"code","2f99ac2b":"code","6f8ad9c5":"code","d8ec58f9":"code","41020670":"code","6e471cb8":"code","fa2e9c06":"code","35d8dc3f":"code","450cc0a5":"code","1e6112e3":"code","5543c635":"code","615191a6":"code","4a8b326f":"code","80243b65":"code","1cc80ef7":"code","7c7bba21":"code","e6a27b37":"code","8998b6c2":"code","ec6dea54":"code","036ddf91":"code","89ef3717":"code","f21b2455":"code","daa8de50":"code","6a0d012c":"code","1a25944c":"code","cc1639d3":"code","a6f978ac":"code","a08459e0":"code","2663b3de":"code","024f0d68":"code","3a2bf93e":"code","d3e645c7":"code","705332f9":"markdown","92e67a2e":"markdown","f45e23d6":"markdown","5c6fd9ad":"markdown","38b24b3b":"markdown","429d24cb":"markdown","0c65c134":"markdown","025e2256":"markdown","cc659dba":"markdown","cda9f227":"markdown","900d328a":"markdown","18d6abb1":"markdown","4d325bc1":"markdown","168e84db":"markdown","71190345":"markdown","ff6363d8":"markdown","4c814e58":"markdown","8b2b33d1":"markdown","76066f49":"markdown","a083891a":"markdown","4e87f4fd":"markdown","3db07219":"markdown","a6d0b890":"markdown"},"source":{"beb33955":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","298a33f6":"%matplotlib inline\nimport pandas as pd","6a5b6857":"file = open('\/kaggle\/input\/ict-designing-experiments-2020\/files\/adult.data', 'r')","ccc72584":"def chr_int(a):\n    if a.isdigit():\n        return int(a)\n    else:\n        return 0\n                \ndata=[]\nfor line in file:\n     data1=line.split(', ')\n     if len(data1)==15:\n        data.append([chr_int(data1[0]),data1[1],chr_int(data1[2]),data1[3],chr_int(data1[4]),data1[5],data1[6],\\\n            data1[7],data1[8],data1[9],chr_int(data1[10]),chr_int(data1[11]),chr_int(data1[12]),data1[13],\\\n            data1[14]])","0a0a7611":"print (data[1:2])","533f90f1":"df = pd.DataFrame(data) #  Two-dimensional size-mutable, potentially heterogeneous tabular data structure with labeled axes \n\ndf.columns = ['age', 'type_employer', 'fnlwgt', 'education', \n                \"education_num\",\"marital\", \"occupation\", \"relationship\", \"race\",\"sex\",\n                \"capital_gain\", \"capital_loss\", \"hr_per_week\",\"country\",\"income\"]\ndf.head()","33c421bd":"df.tail()","97d7a019":"df.shape","6079bfce":"counts = df.groupby('country').size()\n","0cb5bf75":"print (counts) ","184f5e88":"counts = df.groupby('age').size() # grouping by age\nprint (counts)","15756553":"ml = df[(df.sex == 'Male')] # grouping by sex\nml.shape\n","161c2459":"ml1 = df[(df.sex == 'Male')&(df.income=='>50K\\n')]\nml1.shape","f492046f":"fm =df[(df.sex == 'Female')]\nfm.shape","e697a0c1":"fm1 =df[(df.sex == 'Female')&(df.income=='>50K\\n')]\nfm1.shape","be04f8fd":"df1=df[(df.income=='>50K\\n')]\n\nprint ('The rate of people with high income is: ', int(len(df1)\/float(len(df))*100), '%.' )\nprint ('The rate of men with high income is: ', int(len(ml1)\/float(len(ml))*100), '%.' )\nprint ('The rate of women with high income is: ', int(len(fm1)\/float(len(fm))*100), '%.' )","62a196fc":"print ('The average age of men is: ', ml['age'].mean(), '.' )\nprint ('The average age of women is: ', fm['age'].mean(), '.')","033aca9f":"print ('The average age of high-income men is: ', ml1['age'].mean(), '.' )\nprint ('The average age of high-income women is: ', fm1['age'].mean(), '.')","e45f36cc":"ml_mu = ml['age'].mean()\nfm_mu = fm['age'].mean()\nml_var = ml['age'].var()\nfm_var = fm['age'].var()\nml_std = ml['age'].std()\nfm_std = fm['age'].std()\n\nprint ('Statistics of age for men: mu:', ml_mu, 'var:', ml_var, 'std:', ml_std)\nprint ('Statistics of age for women: mu:', fm_mu, 'var:', fm_var, 'std:', fm_std)","d781a6f4":"ml_mu_hr = ml['hr_per_week'].mean()\nfm_mu_hr = fm['hr_per_week'].mean()\nml_var_hr = ml['hr_per_week'].var()\nfm_var_hr = fm['hr_per_week'].var()\nml_std_hr = ml['hr_per_week'].std()\nfm_std_hr = fm['hr_per_week'].std()\n\nprint ('Statistics of hours per week for men: mu:', ml_mu_hr, 'var:', ml_var_hr, 'std:', ml_std_hr)\nprint ('Statistics of hours per week for women: mu:', fm_mu_hr, 'var:', fm_var_hr, 'std:', fm_std_hr)","dbc8cd7f":"ml_median= ml['age'].median()\nfm_median= fm['age'].median()\n\nprint (\"Median age per men and women: \", ml_median, fm_median)","4119e12e":"ml_median_age= ml1['age'].median()\nfm_median_age= fm1['age'].median()\n\nprint (\"Median age per men and women with high-income: \", ml_median_age, fm_median_age)","1fc486a2":"ml_median_hr= ml['hr_per_week'].median()\nfm_median_hr= fm['hr_per_week'].median()\nprint (\"Median hours per week per men and women: \", ml_median_hr, fm_median_hr)","0bcabd9b":"import matplotlib.pyplot as plt","ae8afb70":"\nml_age=ml['age']\nml_age.hist(density=0, histtype='stepfilled', bins=20)","973d9536":"fm_age=fm['age']\nfm_age.hist(density=0, histtype='stepfilled', bins=10)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Female samples',fontsize=15)\nplt.show()","04563fc1":"import seaborn as sns\nfm_age.hist(density=0, histtype='stepfilled', alpha=.5, bins=20)   # default number of bins = 10\nml_age.hist(density=0, histtype='stepfilled', alpha=.5, color=sns.desaturate(\"indianred\", .75), bins=10)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Samples',fontsize=15)\nplt.show()","d2ef29f0":"fm_age.hist(density=1, histtype='stepfilled', alpha=.5, bins=20)   # default number of bins = 10\nml_age.hist(density=1, histtype='stepfilled', alpha=.5, color=sns.desaturate(\"indianred\", .75), bins=10)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('PMF',fontsize=15)\nplt.show()","2c2cca76":"\nml_age.hist(density=1, histtype='stepfilled', bins=20)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.show()","07d26300":"fm_age.hist(density=1, histtype='stepfilled', bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.show()","7ff62f55":"ml_age.hist(density=1, histtype='step', cumulative=True, linewidth=3.5, bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","c9fb8b6e":"fm_age.hist(density=1, histtype='step', cumulative=True, linewidth=3.5, bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","4fe49708":"ml_age.hist(bins=10, density=1, histtype='stepfilled', alpha=.5)   # default number of bins = 10\nfm_age.hist(bins=10, density=1, histtype='stepfilled', alpha=.5, color=sns.desaturate(\"indianred\", .75))\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.show()","fe986d1d":"ml_age.hist(density=1, histtype='step', cumulative=True,  linewidth=3.5, bins=20)\nfm_age.hist(density=1, histtype='step', cumulative=True,  linewidth=3.5, bins=20, color=sns.desaturate(\"indianred\", .75))\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","443ec3d8":"print (\"The mean sample difference is \", ml_age.mean() - fm_age.mean())","1b120bdc":"df['age'].median()","abd61659":"len(df[(df.income == '>50K\\n') & (df['age'] < df['age'].median() - 15)])","2df17467":"len(df[(df.income == '>50K\\n') & (df['age'] > df['age'].median() + 35)])","7999b83f":"df2 = df.drop(df.index[(df.income=='>50K\\n') & (df['age']>df['age'].median() +35) & (df['age'] > df['age'].median()-15)])\n\ndf2.shape","4e069387":"ml1_age=ml1['age']\nfm1_age=fm1['age']","6dd3ec54":"ml2_age = ml1_age.drop(ml1_age.index[(ml1_age >df['age'].median()+35) & (ml1_age>df['age'].median() - 15)])\n\nfm2_age = fm1_age.drop(fm1_age.index[(fm1_age > df['age'].median()+35) & (fm1_age > df['age'].median()- 15)])","ea6096bb":"mu2ml = ml2_age.mean()\nstd2ml = ml2_age.std()\nmd2ml = ml2_age.median()\n\n# Computing the mean, std, median, min and max for the high-income male population\n\nprint (\"Men statistics: Mean:\", mu2ml, \"Std:\", std2ml, \"Median:\", md2ml, \"Min:\", ml2_age.min(), \"Max:\",ml2_age.max())","96d6cbd8":"mu3ml = fm2_age.mean()\nstd3ml = fm2_age.std()\nmd3ml = fm2_age.median()\n\n# Computing the mean, std, median, min and max for the high-income female population\nprint (\"Women statistics: Mean:\", mu2ml, \"Std:\", std2ml, \"Median:\", md2ml, \"Min:\", fm2_age.min(), \"Max:\",fm2_age.max())","d1c9b8d3":"print ('The mean difference with outliers is: %4.2f.'% (ml_age.mean() - fm_age.mean()))\nprint (\"The mean difference without outliers is: %4.2f.\"% (ml2_age.mean() - fm2_age.mean()))","50ef35e8":"plt.figure(figsize=(13.4,5))\n\ndf.age[(df.income == '>50K\\n')].plot(alpha=.25, color='blue')\ndf2.age[(df2.income == '>50K\\n')].plot(alpha=.45,color='red')\n\nplt.ylabel('Age')\nplt.xlabel('Samples')","13b27f5b":"import numpy as np\n\ncountx,divisionx = np.histogram(ml2_age, normed=True)\ncounty,divisiony = np.histogram(fm2_age, normed=True)","5f99fe3e":"import matplotlib.pyplot as plt\n\nval = [(divisionx[i]+divisionx[i+1])\/2 for i in range(len(divisionx)-1)]\n\nplt.plot(val, countx-county,'o-')\nplt.title('Differences in promoting men vs. women')\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Differences',fontsize=15)\nplt.show()","2f99ac2b":"print (\"Remember:\\n We have the following mean values for men, women and the difference:\\nOriginally: \", ml_age.mean(), fm_age.mean(),  ml_age.mean()- fm_age.mean()) # The difference between the mean values of male and female populations.)\nprint (\"For high-income: \", ml1_age.mean(), fm1_age.mean(), ml1_age.mean()- fm1_age.mean()) # The difference between the mean values of male and female populations.)\nprint (\"After cleaning: \", ml2_age.mean(), fm2_age.mean(), ml2_age.mean()- fm2_age.mean()) # The difference between the mean values of male and female populations.)\n\nprint (\"\\nThe same for the median:\")\nprint (ml_age.median(), fm_age.median(), ml_age.median()- fm_age.median()) # The difference between the mean values of male and female populations.)\nprint (ml1_age.median(), fm1_age.median(), ml1_age.median()- fm1_age.median()) # The difference between the mean values of male and female populations.)\nprint (ml2_age.median(), fm2_age.median(), ml2_age.median()- fm2_age.median()), # The difference between the mean values of male and female populations.)","6f8ad9c5":"def skewness(x):\n    res=0\n    m=x.mean()\n    s=x.std()\n    for i in x:\n        res+=(i-m)*(i-m)*(i-m)\n    res\/=(len(x)*s*s*s)\n    return res\n\nprint (\"The skewness of the male population is:\", skewness(ml2_age))\nprint (\"The skewness of the female population is:\", skewness(fm2_age))","d8ec58f9":"def pearson(x):\n    return 3*(x.mean()-x.median())\/x.std()\n\nprint (\"The Pearson's coefficient of the male population is:\", pearson(ml2_age))\nprint (\"The Pearson's coefficient of the female population is:\", pearson(fm2_age))","41020670":"print (\"Men grouped in 3 categories:\")\nprint (\"Young:\",int(round(100*len(ml2_age[ml2_age<41])\/float(len(ml2_age.index)))),\"%.\")\nprint (\"Elder:\", int(round(100*len(ml2_age[ml2_age >44])\/float(len(ml2_age.index)))),\"%.\")\nprint (\"Average age:\", int(round(100*len(ml2_age[(ml2_age>40) & (ml2_age< 45)])\/float(len(ml2_age.index)))),\"%.\")","6e471cb8":"print (\"Women grouped in 3 categories:\")\nprint (\"Young:\",int(round(100*len(fm2_age[fm2_age <41])\/float(len(fm2_age.index)))),\"%.\")\nprint (\"Elder:\", int(round(100*len(fm2_age[fm2_age >44])\/float(len(fm2_age.index)))),\"%.\")\nprint (\"Average age:\", int(round(100*len(fm2_age[(fm2_age>40) & (fm2_age< 45)])\/float(len(fm2_age.index)))),\"%.\")","fa2e9c06":"print (\"The male mean:\", ml2_age.mean())\nprint (\"The female mean:\", fm2_age.mean())","35d8dc3f":"ml2_young = len(ml2_age[(ml2_age<41)])\/float(len(ml2_age.index))\nfm2_young  = len(fm2_age[(fm2_age<41)])\/float(len(fm2_age.index))\nprint (\"The relative risk of female early promotion is: \", 100*(1-ml2_young\/fm2_young))","450cc0a5":"ml2_elder = len(ml2_age[(ml2_age>44)])\/float(len(ml2_age.index))\nfm2_elder  = len(fm2_age[(fm2_age>44)])\/float(len(fm2_age.index))\nprint (\"The relative risk of male late promotion is: \", 100*ml2_elder\/fm2_elder)","1e6112e3":"l = 3\nx=np.arange(0,2.5,0.1)\ny= 1- np.exp(-l*x)\n\nplt.plot(x,y,'-')\nplt.title('Exponential CDF: $\\lambda$ =%.2f'% l ,fontsize=15)\nplt.xlabel('x',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","5543c635":"from __future__ import division\nimport scipy.stats as stats\n\nl = 3\nx=np.arange(0,2.5,0.1)\ny= l * np.exp(-l*x)\n\nplt.plot(x,y,'-')\nplt.title('Exponential PDF: $\\lambda$ =%.2f'% l, fontsize=15)\nplt.xlabel('x', fontsize=15)\nplt.ylabel('PDF', fontsize=15)\nplt.show()","615191a6":"l = 0.25\n\nx=np.arange(0,25,0.1)\ny= l * np.exp(-l*x)\n\nplt.plot(x,y,'-')\nplt.title('Exponential: $\\lambda$ =%.2f' %l ,fontsize=15)\nplt.xlabel('x',fontsize=15)\nplt.ylabel('PDF',fontsize=15)\nplt.show()","4a8b326f":"#Gaussian Distribution\nu=6 # mean\ns=2 # standard deviation\n\nx=np.arange(0,15,0.1)\n\ny=(1\/(np.sqrt(2*np.pi*s*s)))*np.exp(-(((x-u)**2)\/(2*s*s)))\n\nplt.plot(x,y,'-')\nplt.title('Gaussian PDF: $\\mu$=%.1f, $\\sigma$=%.1f'%(u,s),fontsize=15)\nplt.xlabel('x',fontsize=15)\nplt.ylabel('Probability density',fontsize=15)\nplt.show()","80243b65":"fig, ax = plt.subplots(1, 4, sharey=True, squeeze=True, figsize=(14, 5))\nx = np.linspace(0, 1, 100)\nfor i in range(4):\n    f = np.mean(np.random.random((10000, i+1)), 1)\n    m, s = np.mean(f), np.std(f, ddof=1)\n    fn = (1\/(s*np.sqrt(2*np.pi)))*np.exp(-(x-m)**2\/(2*s**2))  # normal pdf            \n    ax[i].hist(f, 40, density=True, color=[0, 0.2, .8, .6]) \n    ax[i].set_title('n=%d' %(i+1))\n    ax[i].plot(x, fn, color=[1, 0, 0, .6], linewidth=5)\nplt.suptitle('Demonstration of the central limit theorem for a uniform distribution', y=1.05)\nplt.show()","1cc80ef7":"from scipy.stats.distributions import norm\n\n# Some random data\ny = np.random.random(15) * 10\nx = np.linspace(0, 10, 100)\n\nx1 = np.random.normal(-1, 2, 15) # parameters: (loc=0.0, scale=1.0, size=None)\nx2 = np.random.normal(6, 3, 10)\ny = np.r_[x1, x2] # r_ Translates slice objects to concatenation along the first axis.\nx = np.linspace(min(y), max(y), 100)\n\n# Smoothing parameter\ns = 0.4\n\n# Calculate the kernels\nkernels = np.transpose([norm.pdf(x, yi, s) for yi in y])\n\nplt.plot(x, kernels, 'k:')\nplt.plot(x, kernels.sum(1), 'r')\nplt.plot(y, np.zeros(len(y)), 'go', ms=10)","7c7bba21":"from scipy.stats import kde\n\nx1 = np.random.normal(-1, 0.5, 15)\n\n# parameters: (loc=0.0, scale=1.0, size=None)\n\nx2 = np.random.normal(6, 1, 10)\ny = np.r_[x1, x2]\n\n# r_ Translates slice objects to concatenation along the first axis.\n\nx = np.linspace(min(y), max(y), 100)\ns = 0.4   # Smoothing parameter\n\nkernels = np.transpose([norm.pdf(x, yi, s) for yi in y])\n\n# Calculate the kernels\ndensity = kde.gaussian_kde(y)\n\nplt.plot(x, kernels, 'k:')\nplt.plot(x, kernels.sum(1), 'r')\nplt.plot(y, np.zeros(len(y)), 'bo', ms=10)","e6a27b37":"xgrid = np.linspace(x.min(), x.max(), 200)\nplt.hist(y, bins=28, density=True)\nplt.plot(xgrid, density(xgrid), 'r-')","8998b6c2":"# Create a bi-modal distribution with a mixture of Normals.\n\nx1 = np.random.normal(-1, 2, 15) # parameters: (loc=0.0, scale=1.0, size=None)\nx2 = np.random.normal(6, 3, 10)\n\n# Append by row\nx = np.r_[x1, x2]\n\n# r_ Translates slice objects to concatenation along the first axis.\nplt.hist(x, bins=18, density=True)","ec6dea54":"density = kde.gaussian_kde(x)\nxgrid = np.linspace(x.min(), x.max(), 200)\nplt.hist(x, bins=18, density=True)\nplt.plot(xgrid, density(xgrid), 'r-')","036ddf91":"x = np.random.normal(0.0, 1.0, 10000)\na = plt.hist(x,50,density='True')","89ef3717":"print ('The empirical mean of the sample is ', x.mean())","f21b2455":"NTs=200\nmu=0.0\nvar=1.0\nerr = 0.0\nNPs=1000\nfor i in range(NTs):\n    x = np.random.normal(mu, var, NPs)\n    err += (x.mean()-mu)**2\n\nprint ('MSE: ', err\/NTs)","daa8de50":"def Cov(X, Y):\n    def _get_dvis(V):\n        return [v - np.mean(V) for v in V]\n    dxis = _get_dvis(X)\n    dyis = _get_dvis(Y)\n    return np.sum([x * y for x, y in zip(dxis, dyis)])\/len(X)\n\n\nX = [5, -1, 3.3, 2.7, 12.2]\nX= np.array(X)\nY = [10, 12, 8, 9, 11]\n\nprint (\"Cov(X, X) = %.2f\" % Cov(X, X))\nprint (\"Var(X) = %.2f\" % np.var(X))\n\nprint (\"Cov(X, Y) = %.2f\" % Cov(X, Y))","6a0d012c":"MAXN=100\nMAXN=40\n\nX=np.array([[1,9],[3, 2], [5,3],[5.5,4],[6,4],[6.5,4],[7,3.5],[7.5,3.8],[8,4],\n[8.5,4],[9,4.5],[9.5,7],[10,9],[10.5,11],[11,11.5],[11.5,12],[12,12],[12.5,12],[13,10]])","1a25944c":"plt.subplot(1,2,1)\nplt.scatter(X[:,0],X[:,1],color='b',s=120, linewidths=2,zorder=10)\nplt.xlabel('Economic growth(T)',fontsize=15)\nplt.ylabel('Stock market returns(T)',fontsize=15)\nplt.gcf().set_size_inches((20,6))","cc1639d3":"X=np.array([[1,8],[2, 7], [3,6],[4,8],[5,8],[6,7],[7,7],[8,5],[9,5],[10,6],[11,4],[12,5],[13,3],[14,2],[15,2],[16,1]])\n\nplt.subplot(1,2,1)\nplt.scatter(X[:,0],X[:,1],color='b',s=120, linewidths=2,zorder=10)\nplt.xlabel('World Oil Production(T)',fontsize=15)\nplt.ylabel('Gasoline prices(T)',fontsize=15)\nplt.gcf().set_size_inches((20,6))","a6f978ac":"def Corr(X, Y):\n    assert len(X) == len(Y)\n    return Cov(X, Y) \/ np.prod([np.std(V) for V in [X, Y]])\n\nprint (\"Corr(X, X) = %.5f\" % Corr(X, X))\n\nY=np.random.random(len(X))\n\nprint (\"Corr(X, Y) = %.5f\" % Corr(X, Y))","a08459e0":"def list2rank(l):\n    #l is a list of numbers\n    # returns a list of 1-based index; mean when multiple instances\n    return [np.mean([i+1 for i, sorted_el in enumerate(sorted(l)) if sorted_el == el]) for el in l]\n\nl = [7, 1, 2, 5]\nprint (\"ranks: \", list2rank(l))\n\ndef spearmanRank(X, Y):\n    # X and Y are same-length lists\n    print (list2rank(X) )\n    print (list2rank(Y))\n    return Corr(list2rank(X), list2rank(Y))\n\nX = [10, 20, 30, 40, 1000]\nY = [-70, -1000, -50, -10, -20]\nplt.plot(X,'ro')\nplt.plot(Y,'go')\n\nprint (\"Pearson rank coefficient: %.2f\" % Corr(X, Y))\nprint (\"Spearman rank coefficient: %.2f\" % spearmanRank(X, Y))","2663b3de":"X=np.array([[10.0, 8.04,10.0, 9.14, 10.0, 7.46, 8.0, 6.58],\n[8.0,6.95, 8.0, 8.14, 8.0, 6.77, 8.0, 5.76],\n[13.0,7.58,13.0,8.74,13.0,12.74,8.0,7.71],\n[9.0,8.81,9.0,8.77,9.0,7.11,8.0,8.84],\n[11.0,8.33,11.0,9.26,11.0,7.81,8.0,8.47],\n[14.0,9.96,14.0,8.10,14.0,8.84,8.0,7.04],\n[6.0,7.24,6.0,6.13,6.0,6.08,8.0,5.25],\n[4.0,4.26,4.0,3.10,4.0,5.39,19.0,12.50],\n[12.0,10.84,12.0,9.13,12.0,8.15,8.0,5.56],\n[7.0,4.82,7.0,7.26,7.0,6.42,8.0,7.91],\n[5.0,5.68,5.0,4.74,5.0,5.73,8.0,6.89]])","024f0d68":"plt.subplot(2,2,1)\nplt.scatter(X[:,0],X[:,1],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)","3a2bf93e":"plt.subplot(2,2,2)\nplt.scatter(X[:,2],X[:,3],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)\nplt.subplot(2,2,3)\nplt.scatter(X[:,4],X[:,5],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)","d3e645c7":"plt.subplot(2,2,4)\nplt.scatter(X[:,6],X[:,7],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)\nplt.gcf().set_size_inches((10,10))","705332f9":"*2. Describe an explain the result.\nWe saved(attached) the data in variable \"df' and showed the 5 first persons (head) without any condition, just how they are listed in the csv file.","92e67a2e":"*16 and 17. Show the graphics and an explain the result.*\nGraph shows the cumulative probibility to find a man (woman for Q.17) at certain age or under","f45e23d6":"*8. Describe an explain the result.*\nThe average age of men is slightly higher than women, including both, higher income and normal\/medium income.","5c6fd9ad":"*Q18. Show the graphics and an explain the result. *\nGraph shows the comparison entre the probability to find both genders at certain age","38b24b3b":"The discussion:\nfrom the data, I could find the same assumption which are presented in the pdf file of HO2.","429d24cb":"*6. What is the age of the most represented people?*\nIs 36yrs old, with almost ~900 employees","0c65c134":"*1. What is the obtained result? What did you ask for in the previous command? Explain.**\nThe obtained result is the information of one specific employe, with 15 attributes (columns) description. In the csv file each row represents one person with 15 different attributes. We called it from csv to be read here and presented as it is presented now.","025e2256":"*9. Describe an explain the result.*\nIt is shown the mean, variance and standard deviation, first part for the \"age\" and second part for the \"hours per week\".","cc659dba":"*13. Show the graphics and an explain the result.*\nIt shows the normalized value for each frequency of age, for men and women","cda9f227":"###### *4. Describe an explain the result.*\nThere are 32,561 persons in this database, each of them with 15 attributes.","900d328a":"*10. Show the graphics and an explain the result.\nGraphic shows the number of employees regarding age. we can see that there are still people less than 90yrs old showing in the graph. Almost 2500 people at age 32-34 are the most emplyed ones.\n","18d6abb1":"*22.What does the figure shows?*\nThe black curves show the normal kernels standard deviations. The red curve shows the sum of kernels to show the kernels density estimate.","4d325bc1":"*5. How many items are there for USA? and for Mexico?*\nUS - 29170. And Mexico - 643.","168e84db":"*7. Describe an explain the result.*\nIt is obivous from the results that the number of women whom has high income is 1\/3 comparing to men.","71190345":"*12. Show the graphics and an explain the result.*\nThe graph shows comparison of the frequency of age, for men and women","ff6363d8":"*Q19. Show the graphics and an explain the result.*\nGraph shows the cumulative probibility comparison to find a woman\/man at certain age or under","4c814e58":"*11. Show the graphics and an explain the result.*\nCompared to man, the women are more employed in younger age. We can see that the number of women employees at 20-25yrs is higher than men.","8b2b33d1":"*14 and 15. Show the graphics and an explain the result.*\nThe probibility to find a man (woman for Q.15) with a certain age for each sample","76066f49":"*20. Explain the result.*\nI don't know how to explain it. It is just that the result indicates the difference between the average age of women and men.","a083891a":"*3. Describe and explain the result. Compare with the previous one.\nIt is the same as previous one, just showing the last 5 persons in the csv file.","4e87f4fd":"*23. What do you obtained as result?*\nThe MSE for this sample of data is 0.001153...\nI think it shows how far the average estimated value is from the true value.","3db07219":"*10. Describe an explain the result.*\nHere we can see just the median age for two cases (normal and high income), and the median hours per week per men and women. Also, it is a good example showing us why to use median, not only mean value all the time for comparison. Median value is the value in the middle of different numbers, splitting them in the middle.","a6d0b890":"*21. Explain the result.*\nSkewness refers to asymmetry in a normal distribution, in a set of data. If the curve is shifted to the left or to the right, it is said to be skewed. Negatively-skewed distributions are also known as left-skewed distributions, which in our case we don't have it. Skewness means the distribution varies from the normal distribution (in our case: little higher for women than men, the concentration of young women is higher compared to men).The results show the deviations from the normal distribution of the mean age for both genders."}}