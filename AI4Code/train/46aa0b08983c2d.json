{"cell_type":{"48288488":"code","3df47796":"code","3a4a83da":"code","97e152c8":"code","d9105653":"code","a46fd149":"code","71b1c0c6":"code","3bcde127":"code","b0654170":"code","099bb4e9":"code","c6306a14":"code","5a8a0cbb":"code","b7604909":"code","604033e4":"code","001db683":"code","2b5e3046":"code","8ff7213b":"code","a61a2de6":"code","9641af75":"code","b830db7a":"code","bcb663fd":"code","fdbcfcf5":"code","4049fd2f":"code","53271e2c":"code","586e5cd0":"code","095d457d":"markdown","b31c8f01":"markdown","9b3ab857":"markdown","9f1f2499":"markdown","b4ccb0c8":"markdown","9a08c931":"markdown","820665c9":"markdown","75540ed8":"markdown","05f35f59":"markdown","34420d51":"markdown","c30f808d":"markdown","45b2184e":"markdown","be3ad9a1":"markdown","a860b8bc":"markdown","1259568b":"markdown","c5f4aefd":"markdown","ce4683a7":"markdown","d50278b9":"markdown"},"source":{"48288488":"from keras.datasets import cifar10\nfrom sklearn.model_selection import train_test_split\n\n(X_train, y_train), (X_test, y_test) = cifar10.load_data()\n\n# X_train, X_test, y_train, y_test = train_test_split(X_train, \n#                                                   y_train, \n#                                                   test_size=0.15, \n#                                                   stratify=np.array(y_train), \n#                                                   random_state=42)\n\nprint('Training set has {m} examples, each example has width = {width} and height = {height}'\n.format(m=X_train.shape[0], width=X_train.shape[1], height=X_train.shape[2]))\nprint('Test set has {m} examples, each example has width = {width} and height = {height}'\n.format(m=X_test.shape[0], width=X_test.shape[1], height=X_test.shape[2]))","3df47796":"import numpy as np\nimport matplotlib.pyplot as plt\nimport random","3a4a83da":"# visualizing a random sample\nrandom_sample_idx = np.random.randint(0, X_train.shape[0])\npixels, label = X_train[random_sample_idx, :], y_train[random_sample_idx]\nplt.title('Label is {label}'.format(label=label))\nplt.imshow(pixels)\nplt.show()","97e152c8":"fig = plt.figure(figsize=(10, 10))\nrows = 10\ncolumns = 10\ncnt = 0\nfor i in range(0, 10):\n  label_idx = random.sample(sorted(np.where(y_train == i)[0]), 10)\n  img = X_train[label_idx, :]\n  for j in range(0, 10):\n    cnt += 1\n    fig.add_subplot(rows, columns, cnt)\n    plt.imshow(img[j])\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid=False\nplt.show()","d9105653":"classes_dict = {0: 'airplane',\n                1: 'automobile',\n                2: 'bird',\n                3: 'cat',\n                4: 'deer',\n                5: 'dog',\n                6: 'frog',\n                7: 'horse',\n                8: 'ship',\n                9: 'truck'}\nvalues, counts = np.unique(y_train, return_counts=True)\nclasses = [classes_dict[value] for value in values]\nplt.bar(classes, counts)\nplt.xticks(rotation=45)","a46fd149":"values, counts = np.unique(y_test, return_counts=True)\nclasses = [classes_dict[value] for value in values]\nplt.bar(classes, counts)\nplt.xticks(rotation=45)","71b1c0c6":"# normalizing images\nX_train_scaled = X_train \/ 255.0\nX_test_scaled = X_test \/ 255.0","3bcde127":"import tensorflow as tf\ny_train_ohe = np.array(tf.one_hot(y_train, depth=len(np.unique(y_train)))).reshape(50000, 10)\ny_train_ohe.shape\ny_test_ohe = np.array(tf.one_hot(y_test, depth=len(np.unique(y_test)))).reshape(10000, 10)","b0654170":"# creating a model and training\nfrom keras import layers\nfrom keras import models\n\ndef setup_model():\n\n  model = models.Sequential()\n\n  model.add(layers.Conv2D(128, (3, 3), activation='relu', input_shape=(32, 32, 3), padding='same'))\n  # model.add(layers.MaxPooling2D((2, 2)))\n  model.add(layers.BatchNormalization())\n  model.add(layers.Dropout(0.3))\n\n  model.add(layers.Conv2D(128, (3, 3), activation='relu', padding='same'))\n  model.add(layers.MaxPooling2D((2, 2)))\n  model.add(layers.BatchNormalization())\n  model.add(layers.Dropout(0.3))\n\n  model.add(layers.Conv2D(64, (3, 3), activation='relu', padding='same'))\n  # model.add(layers.MaxPooling2D((2, 2)))\n  model.add(layers.BatchNormalization())\n  model.add(layers.Dropout(0.3))\n\n  model.add(layers.Conv2D(64, (3, 3), activation='relu', padding='same'))\n  model.add(layers.MaxPooling2D((2, 2)))\n  model.add(layers.BatchNormalization())\n  model.add(layers.Dropout(0.3))\n\n  model.add(layers.Conv2D(32, (3, 3), activation='relu', padding='same'))\n  # model.add(layers.MaxPooling2D((2, 2)))\n  model.add(layers.BatchNormalization())\n  model.add(layers.Dropout(0.3))\n\n  model.add(layers.Conv2D(32, (3, 3), activation='relu', padding='same'))\n  # model.add(layers.MaxPooling2D((2, 2)))\n  model.add(layers.BatchNormalization())\n  model.add(layers.Dropout(0.3))\n\n  model.add(layers.Flatten())\n  model.add(layers.Dense(64, activation='relu'))\n  model.add(layers.Dense(10, activation='softmax'))\n\n  return model\n\nmodel = setup_model()\n\nmodel.summary()","099bb4e9":"# fitting the model to training data\nmodel.compile(optimizer='adam', loss='categorical_crossentropy',\n              metrics=['accuracy'])\nhistory = model.fit(X_train_scaled, y_train_ohe, batch_size=32, epochs=20)","c6306a14":"test_loss, test_acc = model.evaluate(X_test_scaled, y_test_ohe)","5a8a0cbb":"# Add image data generator\nfrom keras.preprocessing.image import ImageDataGenerator\n\ntrain_datagen = ImageDataGenerator(\n    rescale = 1.\/255,\n    rotation_range = 40\n    # width_shift_range = 0.2,\n    # height_shift_range = 0.2,\n    # shear_range = 0.2,\n    # zoom_range = 0.2,\n    # horizontal_flip = True,\n)\n\ntest_datagen = ImageDataGenerator(rescale = 1.\/255)\n\ntrain_datagen = train_datagen.flow(X_train, y_train_ohe, batch_size = 32)\nvalidation_datagen = test_datagen.flow(X_test, y_test_ohe, batch_size = 32)","b7604909":"model = setup_model()\n\nmodel.compile(optimizer='adam', loss='categorical_crossentropy',\n              metrics=['accuracy'])\nhistory = model.fit(train_datagen, batch_size = 32, epochs = 20,\n                    steps_per_epoch = X_train.shape[0] \/\/ 32,\n                    validation_data = validation_datagen)","604033e4":"from PIL import Image\n\nX_train = np.array([np.array(Image.fromarray(x).resize((48, 48))) for x in X_train])\nX_test = np.array([np.array(Image.fromarray(x).resize((48, 48))) for x in X_test])","001db683":"# New datagenerator with resized inputs\nfrom keras.preprocessing.image import ImageDataGenerator\n\ntrain_datagen = ImageDataGenerator(\n    rescale = 1.\/255,\n    # rotation_range = 40\n    # width_shift_range = 0.2,\n    # height_shift_range = 0.2,\n    # shear_range = 0.2,\n    # zoom_range = 0.2,\n    # horizontal_flip = True,\n)\n\ntest_datagen = ImageDataGenerator(rescale = 1.\/255)\n\ntrain_datagen.fit(X_train)\ntrain_datagen = train_datagen.flow(X_train, y_train_ohe, batch_size = 32)\n\ntest_datagen.fit(X_test)\nvalidation_datagen = test_datagen.flow(X_test, y_test_ohe, batch_size = 32)","2b5e3046":"from keras.applications import VGG16\nfrom keras import Model\nfrom keras import optimizers\n\ndef setup_vgg_model(fine_tune):\n\n  conv_base = VGG16(\n      include_top = False,\n      weights = 'imagenet',\n      input_shape = (48, 48, 3)\n  )\n\n  conv_base.trainable = True\n\n  if fine_tune > 0:\n    for layer in conv_base.layers[:-fine_tune]:\n      layer.trainable = False\n  else:\n    for layer in conv_base.layers:\n      layer.trainable = False\n\n  last = conv_base.get_layer('block3_pool').output\n  x = layers.GlobalAveragePooling2D()(last)\n  x = layers.BatchNormalization()(x)\n  x = layers.Dense(256, activation='relu')(x)\n  x = layers.Dense(256, activation='relu')(x)\n  x = layers.Dropout(0.6)(x)\n  pred = layers.Dense(10, activation='softmax')(x)\n  \n  model = Model(conv_base.input, pred)\n\n  model.compile(optimizer=optimizers.Adam(lr = 1e-4), loss='categorical_crossentropy',\n                metrics=['accuracy'])\n  \n  return model","8ff7213b":"vgg_model = setup_vgg_model(fine_tune = 0)\nvgg_model.summary()","a61a2de6":"vgg_history = vgg_model.fit(train_datagen, batch_size = 32, epochs = 40,\n                    steps_per_epoch = X_train.shape[0] \/\/ 32,\n                    validation_data = validation_datagen,\n                    validation_steps = X_test.shape[0] \/\/ 32)","9641af75":"vgg_model = setup_vgg_model(fine_tune = 10)\nvgg_model.summary()","b830db7a":"vgg_ft_history = vgg_model.fit(train_datagen, batch_size = 32, epochs = 40,\n                    steps_per_epoch = X_train.shape[0] \/\/ 32,\n                    validation_data = validation_datagen,\n                    validation_steps = X_test.shape[0] \/\/ 32)","bcb663fd":"from keras.applications.resnet import ResNet50\n\ndef setup_resnet50_model(fine_tune):\n\n  conv_base = ResNet50(\n      include_top = False,\n      weights = 'imagenet',\n      input_shape = (48, 48, 3)\n  )\n\n  conv_base.trainable = True\n\n  if fine_tune > 0:\n    for layer in conv_base.layers[:-fine_tune]:\n      layer.trainable = False\n  else:\n    for layer in conv_base.layers:\n      layer.trainable = False\n\n  last = conv_base.get_layer('conv5_block3_out').output\n  x = layers.GlobalAveragePooling2D()(last)\n  x = layers.BatchNormalization()(x)\n  x = layers.Dense(256, activation='relu')(x)\n  x = layers.Dense(256, activation='relu')(x)\n  x = layers.Dropout(0.6)(x)\n  pred = layers.Dense(10, activation='softmax')(x)\n  \n  model = Model(conv_base.input, pred)\n\n  model.compile(optimizer=optimizers.Adam(lr = 1e-4), loss='categorical_crossentropy',\n                metrics=['accuracy'])\n  \n  return model","fdbcfcf5":"resnet50_model = setup_resnet50_model(fine_tune = 0)\nresnet50_model.summary()","4049fd2f":"resnet50_history = resnet50_model.fit(train_datagen, batch_size = 32, epochs = 40,\n                    steps_per_epoch = X_train.shape[0] \/\/ 32,\n                    validation_data = validation_datagen,\n                    validation_steps = X_test.shape[0] \/\/ 32)","53271e2c":"resnet50_model = setup_resnet50_model(fine_tune = 25)\nresnet50_model.summary()","586e5cd0":"resnet50_ft_history = resnet50_model.fit(train_datagen, batch_size = 32, epochs = 40,\n                    steps_per_epoch = X_train.shape[0] \/\/ 32,\n                    validation_data = validation_datagen,\n                    validation_steps = X_test.shape[0] \/\/ 32)","095d457d":"## Scenario 1: Feature Extraction and Training a Dense Layer ","b31c8f01":"# ResNet-50\n## Scenario 1: Feature Extraction and Training a Dense Model","9b3ab857":"# Transfer Learning - Using VGG-16 & ResNet50 with different scenarios","9f1f2499":"## Class one-hot encoding","b4ccb0c8":"# Data Preprocessing","9a08c931":"## Image Visualization","820665c9":"## Scenario 2: Fine Tuning","75540ed8":"## Image Normalization","05f35f59":"## Class Distribution Visualization","34420d51":"## Fitting the Model","c30f808d":"## Scenario 2: Fine Tuning","45b2184e":"# VGG-16","be3ad9a1":"# Importing Dataset","a860b8bc":"# Data Augmentation","1259568b":"## Matching VGG-16 minimum input","c5f4aefd":"## Setting up the model","ce4683a7":"# Data Visualization","d50278b9":"# Modeling"}}