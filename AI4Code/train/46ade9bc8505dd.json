{"cell_type":{"6f08f4eb":"code","9c7a3c10":"code","52881d05":"code","cb788451":"code","cc0ef7b0":"code","21b4ceee":"code","c40c1cd6":"code","417c81bd":"code","67db8627":"code","418045f2":"code","00162e2c":"code","3afff0aa":"code","7604ff3f":"code","1331fbfe":"code","18715d24":"code","7dacabc0":"code","8c5a3a35":"code","a6e47eae":"code","64b72ad1":"code","46b75c93":"code","91928c9e":"code","7e3aaa9e":"code","f473fc6b":"code","47490ece":"code","aecbcdfc":"code","a8dcf966":"code","09dfd817":"code","d5e3b57a":"code","076e5eb2":"code","ab5cdf59":"code","8a74d2d3":"code","4c0b4c7a":"code","d75fc0ed":"code","3e1832df":"code","00f97065":"code","a4718051":"code","b2ea6e8f":"code","0dc187ef":"code","3986a2e6":"code","24c0b187":"code","55caf0e7":"markdown","74a03f1f":"markdown","f80b17fd":"markdown","64e3c6c6":"markdown","4b322862":"markdown","792ebe61":"markdown","3648430f":"markdown","087e5fcd":"markdown","1026b170":"markdown","b2005e26":"markdown"},"source":{"6f08f4eb":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.cluster import KMeans\nfrom pyclustering.cluster.xmeans import xmeans, kmeans_plusplus_initializer\nfrom pyclustering.utils import draw_clusters","9c7a3c10":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv(\"..\/input\/test.csv\")","52881d05":"#\u30c7\u30fc\u30bf\u6570\u3001\u578b\u306e\u78ba\u8a8d\ntrain.info()","cb788451":"# \u6b20\u640d\u5024NaN\u306e\u78ba\u8a8d\ntrain.isnull().sum()","cc0ef7b0":"test.isnull().sum()","21b4ceee":"train.head()","c40c1cd6":"test.head()","417c81bd":"# Cabin\u306e\u4e2d\u8eab\u3092\u78ba\u8a8d\ntrain[\"Cabin\"].value_counts()","67db8627":"# Embarked\u306e\u4e2d\u8eab\u3092\u78ba\u8a8d\ntrain[\"Embarked\"].value_counts()","418045f2":"# Ticket\u306e\u4e2d\u8eab\u3092\u78ba\u8a8d\ntrain[\"Ticket\"].value_counts()","00162e2c":"# Age\u306e\u7a74\u57cb\u3081(\u4e2d\u592e\u5024)\ntrain[\"Age\"] = train[\"Age\"].fillna(train[\"Age\"].median())\ntest[\"Age\"] = test[\"Age\"].fillna(test[\"Age\"].median())\n# Cabin\u306f\u6b20\u640d\u5024\u304c\u591a\u3044\u305f\u3081\u524a\u9664\ntrain.drop(\"Cabin\", axis=1, inplace=True)\ntest.drop(\"Cabin\", axis=1, inplace=True)\n# Embarked\u306f\u6700\u983b\u5024\u3067\u3042\u308bS\u3092\u4ee3\u5165\ntrain[\"Embarked\"] = train[\"Embarked\"].fillna(\"S\")\n# Fare\u306e\u7a74\u57cb\u3081(\u4e2d\u592e\u5024)\ntest[\"Fare\"] = test[\"Fare\"].fillna(test[\"Fare\"].median())","3afff0aa":"train.head()","7604ff3f":"print(f'[train]Nmae\u306e\u30e6\u30cb\u30fc\u30af\u306a\u8981\u7d20: {train[\"Name\"].nunique()}')\nprint(f'[test]Nmae\u306e\u30e6\u30cb\u30fc\u30af\u306a\u8981\u7d20: {test[\"Name\"].nunique()}')\nprint(f'[train]Sex\u306e\u30e6\u30cb\u30fc\u30af\u306a\u8981\u7d20: {train[\"Sex\"].nunique()}')\nprint(f'[test]Sex\u306e\u30e6\u30cb\u30fc\u30af\u306a\u8981\u7d20: {test[\"Sex\"].nunique()}')\nprint(f'[train]Ticket\u306e\u30e6\u30cb\u30fc\u30af\u306a\u8981\u7d20: {train[\"Ticket\"].nunique()}')\nprint(f'[test]Ticket\u306e\u30e6\u30cb\u30fc\u30af\u306a\u8981\u7d20: {test[\"Ticket\"].nunique()}')\nprint(f'[train]Embarked\u306e\u30e6\u30cb\u30fc\u30af\u306a\u8981\u7d20: {train[\"Embarked\"].nunique()}')\nprint(f'[test]Embarked\u306e\u30e6\u30cb\u30fc\u30af\u306a\u8981\u7d20: {test[\"Embarked\"].nunique()}')","1331fbfe":"# Name\u306f\u4eca\u56de\u6271\u308f\u306a\u3044(\u82d7\u5b57\u304b\u3089\u5bb6\u65cf\u3067\u3042\u308b\u3053\u3068\u3092\u5224\u5225\u3059\u308b\u3088\u3046\u306a\u30ab\u30fc\u30cd\u30eb\u3082\u3042\u308b)\ntrain.drop(\"Name\", axis=1, inplace=True)\ntest.drop(\"Name\", axis=1, inplace=True)\n\n# ticket\u306f\u30e6\u30cb\u30fc\u30af\u306a\u8981\u7d20\u304c\u591a\u3044\u305f\u3081(\u5927\u5909\u3060\u304b\u3089)\u524a\u9664\ntrain.drop(\"Ticket\", axis=1, inplace=True)\ntest.drop(\"Ticket\", axis=1, inplace=True)\n\n# Name\u4ee5\u5916\u306f\u5168\u3066One-Hot Encoding\u3067\u51e6\u7406\u3059\u308b\ntrain = train.join(pd.get_dummies(train[\"Sex\"],prefix=\"sex\"))\ntest = test.join(pd.get_dummies(test[\"Sex\"],prefix=\"sex\"))\n\ntrain = train.join(pd.get_dummies(train[\"Embarked\"],prefix=\"emberk\"))\ntest = test.join(pd.get_dummies(test[\"Embarked\"],prefix=\"emberk\"))\n\n# \u4f7f\u7528\u5f8c\u306e\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570\u306e\u524a\u9664\ntrain.drop([\"Sex\", \"Embarked\"], axis=1, inplace=True)\ntest.drop([\"Sex\", \"Embarked\"], axis=1, inplace=True)","18715d24":"train[\"tmp\"] = \"train\"\ntest[\"tmp\"] = \"test\"","7dacabc0":"#\u3000\u5909\u6570\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306b\u4e00\u6642\u7684\u306btrain\u3068test\u3092\u7d50\u5408\nconb = pd.concat([train.drop([\"Survived\",\"PassengerId\"],axis=1),test.drop(\"PassengerId\",axis=1)])","8c5a3a35":"# \u30c7\u30fc\u30bf\u51e6\u7406\u306e\u305f\u3081\u306bpandas\u304b\u3089np.array\u306b\u5909\u63db\nconb_array = np.array(conb[conb.columns[1]].tolist())\nfor i in range(len(conb.columns)):\n    if i <= 1:\n        continue\n    if conb.columns[i]==\"tmp\":\n        continue\n    conb_array = np.vstack((conb_array,conb[conb.columns[i]]))\nconb_array = conb_array.T","a6e47eae":"conb_array","64b72ad1":"# \u30af\u30e9\u30b9\u30bf\u6570\u306e\u8a08\u7b97\ninitial_centers = kmeans_plusplus_initializer(conb_array, 2).initialize()\ninstances = xmeans(conb_array, initial_centers, ccore=True)\ninstances.process()\nclusters = instances.get_clusters()","46b75c93":"# \u5404\u30af\u30e9\u30b9\u30bf\u306e\u4e2d\u5fc3\u306e\u6570\u3092\u6c42\u3081\u308b\ncenters = []\nconb_array = np.array(conb_array)\nfor cluster in clusters:\n    c = conb_array[cluster, :]\n    centers.append(np.mean(c, axis=0))\n    \ncluster_point = len(centers)","91928c9e":"# X-means\u306b\u3088\u308b\u6700\u9069\u306a\u30af\u30e9\u30b9\u30bf\u6570\ncluster_point","7e3aaa9e":"pred = KMeans(n_clusters=cluster_point).fit_predict(conb_array)","f473fc6b":"conb[\"cluster\"] = pred","47490ece":"train[\"cluster\"] = conb[conb[\"tmp\"]==\"train\"][\"cluster\"]\ntest[\"cluster\"] = conb[conb[\"tmp\"]==\"test\"][\"cluster\"]\ntrain.drop(\"tmp\",axis=1,inplace=True)\ntest.drop(\"tmp\",axis=1,inplace=True)","aecbcdfc":"train.head()","a8dcf966":"# sklearn.ensemble\u306e\u4e2d\u304b\u3089Classifier\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import VotingClassifier","09dfd817":"# \u76ee\u7684\u5909\u6570\u3068\u8aac\u660e\u5909\u6570\u3092\u5206\u89e3\u3059\u308b\nX_train = train.drop(\"Survived\", axis=1)\ny_train = train[\"Survived\"].values","d5e3b57a":"# AdaBoostClassifier\u3067\u306e\u5b66\u7fd2\nada_clf = AdaBoostClassifier()\nada_clf = ada_clf.fit(X_train, y_train)","076e5eb2":"# AdaBoostClassifier\u3067\u306e\u63a8\u8ad6\nada_pred = ada_clf.predict(test)","ab5cdf59":"bag_clf = BaggingClassifier()\nbag_clf = bag_clf.fit(X_train, y_train)","8a74d2d3":"bag_pred = bag_clf.predict(test)","4c0b4c7a":"et_clf = ExtraTreesClassifier()\net_clf = et_clf.fit(X_train, y_train)","d75fc0ed":"et_pred = et_clf.predict(test)","3e1832df":"gb_clf = GradientBoostingClassifier()\nba_clf = gb_clf.fit(X_train, y_train)","00f97065":"gb_pred = gb_clf.predict(test)","a4718051":"rf_clf = RandomForestClassifier()\nrf_clf = rf_clf.fit(X_train, y_train)","b2ea6e8f":"rf_pred = rf_clf.predict(test)","0dc187ef":"vote_clf = VotingClassifier(estimators=[('rf', RandomForestClassifier()),\n                                        ('gb',GradientBoostingClassifier()),\n                                        ('et',ExtraTreesClassifier()),\n                                        ('bag',BaggingClassifier()),\n                                        ('ada',AdaBoostClassifier())\n                                        ])\nvote_clf = vote_clf.fit(X_train, y_train)","3986a2e6":"vote_pred = vote_clf.predict(test)","24c0b187":"vote_submit = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": vote_pred\n    })\nvote_submit.to_csv(\"vote.csv\", index=False)","55caf0e7":"## GradientBoostingClassifier","74a03f1f":"## \u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570\u306e\u51e6\u7406","f80b17fd":"## AdaBoostClassifier","64e3c6c6":"## RandomForestClassifier","4b322862":"## \u6b20\u640d\u5024\u306e\u51e6\u7406","792ebe61":"## VotingClassifier","3648430f":"## BaggingClassifier","087e5fcd":"# 1.\u30c7\u30fc\u30bf\u51e6\u7406","1026b170":"## ExtraTreesClassifier","b2005e26":"# 2.\u5b66\u7fd2\u90e8"}}