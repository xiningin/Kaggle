{"cell_type":{"4e154964":"code","175a5078":"code","19726f1b":"code","c4f5ed04":"code","a35aa253":"code","e012b5a7":"code","8f95f22f":"code","c7c18236":"code","2c03836b":"markdown","6b88c99e":"markdown","fe063687":"markdown","6e04100d":"markdown","a72e7fa6":"markdown","a2ed8b49":"markdown","510f8e75":"markdown","ec31e323":"markdown","1c2d5c6c":"markdown","3544f976":"markdown"},"source":{"4e154964":"import numpy as np\nimport pandas as pd\n\n@np.vectorize\ndef generate_result(p,tp_rate, fp_rate):  \n    # Generate ground truth of infection\n    is_infected = np.random.binomial(p = p, n = 1)\n    \n    # Generate Test Result\n    prob_of_positive_test = {0: fp_rate, 1: tp_rate}[is_infected]\n    shows_infection = np.random.binomial(p = prob_of_positive_test, n = 1)\n    \n    return is_infected, shows_infection\n\nnp.random.seed(5)\ngenerate_result([0.01, 0.05, 0.1], tp_rate = 0.9, fp_rate = 0.1)","175a5078":"n = 100_000\npopulation = np.repeat(0.05, n)\n\nnp.random.seed(5)\nis_infected, positive_test = generate_result(population, tp_rate = 0.9, fp_rate = 0.1)\nresult = pd.DataFrame({'p': population, 'is_infected': is_infected, 'positive_test_result': positive_test})\nresult.head()","19726f1b":"def calculate_stats(df):\n    true_positive = (df.is_infected.eq(1) & df.positive_test_result.eq(1)).sum()\n    positive_tests = df.positive_test_result.eq(1).sum()\n    infections = df.is_infected.eq(1).sum()\n    \n    precision = true_positive\/positive_tests\n    recall = true_positive\/infections\n    \n    return pd.Series([precision, recall])\n\nprecision, recall = calculate_stats(result)\nprint(f\"Precision = {precision:0.3f}, Recall = {recall:0.3f}\")","c4f5ed04":"(pd.DataFrame(\n        {'True_Positive': [0, 0.9, 1], \n         'False_Positive': [0, 0.1, 1]}\n    )\n     .plot\n     .line(x = 'False_Positive', y = 'True_Positive', label = 'Test Result ROC')\n)","a35aa253":"n = 100_000\np_values = np.arange(start = 0.1, stop = 0.95, step = 0.05)\npopulation = np.repeat(p_values, n)\n\nnp.random.seed(5)\nis_infected, positive_test = generate_result(population, tp_rate = 0.9, fp_rate = 0.1)\n\nstats = (\n    pd.DataFrame({'Infection_Rate': population, 'is_infected': is_infected, 'positive_test_result': positive_test})\n     .groupby('Infection_Rate')\n     .apply(calculate_stats)\n)\n\nstats.columns = ['precision', 'recall']\n\nstats.plot.line();","e012b5a7":"n = 100_000\ntp_values = np.arange(start = 0.1, stop = 0.95, step = 0.05)\npopulation = np.repeat(tp_values, n)\n\nnp.random.seed(5)\nis_infected, positive_test = generate_result(p = 0.05, tp_rate = population, fp_rate = 0.1)\n\nstats = (\n    pd.DataFrame({'True Positive Rate': population, 'is_infected': is_infected, 'positive_test_result': positive_test})\n     .groupby('True Positive Rate')\n     .apply(calculate_stats)\n)\n\nstats.columns = ['precision', 'recall']\n\nstats.plot.line();","8f95f22f":"n = 100_000\nfp_values = np.arange(start = 0.1, stop = 0.95, step = 0.05)\npopulation = np.repeat(fp_values, n)\n\nnp.random.seed(5)\nis_infected, positive_test = generate_result(p = 0.05, tp_rate = 0.9, fp_rate = population)\n\nstats = (\n    pd.DataFrame({'False Positive Rate': population, 'is_infected': is_infected, 'positive_test_result': positive_test})\n     .groupby('False Positive Rate')\n     .apply(calculate_stats)\n)\n\nstats.columns = ['precision', 'recall']\n\nstats.plot.line();","c7c18236":"p_infected_and_tests_positive = sum(result.is_infected.eq(1) & result.positive_test_result.eq(1))\/result.is_infected.count()\np_tests_positive = result.positive_test_result.eq(1).sum()\/result.is_infected.count()\n\nprint(f\"Probability of Actually Infected Given Positive Test: {p_infected_and_tests_positive\/p_tests_positive:0.3f}\")","2c03836b":"# Probability Someone is Actually Infected\n\nFinally, let's calculate the probability someone is really infected given that they have a positive test.\n\nThis is equivalent to calculating the precision of the test, and that is why we get the same result.","6b88c99e":"As you'll see, the precision on this test is really low (0.323) which mean that only about 1\/3 of people who get a positive result are really infected.\n\nAt first this may seem like a shocking result, but when you consider that only 5% of people are infected, and 10% of people are not infected will have positive result, there are just a ton of false positives!","fe063687":"# ROC Curve\nBelow is an example ROC under the assumption of 90% true positive, and 10% false positive","6e04100d":"# Building A Simulation\nFirst let's write a function that can simulate for an individual if they are infected, and if they show a positive\/negative value on their test\n\nThis function takes a \"p\" (probability of being infected), and simulates infections\/test results.","a72e7fa6":"The result is two arrays. The first array encodes if the person is infected, and the second array encodes if they have a positive test result\n\nIn the example above, no one is infected, but the first person generated a false positive.","a2ed8b49":"# How True Positive Rate Effects Precision\/Recall\n\nBelow we simulate different True Positive rates, and their impact on Precision\/Recall.\n\nAs you'll see, there is a positive linear relationship between both stats, and the accuracy of the test.","510f8e75":"This notebook walks through an example of why the sensitivity and specificity of a test are important to consider, not just the result of true or false.","ec31e323":"## Simulating a Population\n\nNow let's take 100,000 people, and simulate infections with p = 0.05","1c2d5c6c":"## How Infection Rates Effect Precision\/Recall\n\nBelow we simulate infections and tests at vastly different infection rates.\n\nAs you'll see, precision is effected quite a bit by the infection rate, but recall is not really effected at all.","3544f976":"# How False Positive Rate Effects Precision\/Recall\n\nBelow we simulate different False Positive rates, and their impact on Precision\/Recall.\n\nAs you'll see, there is a negative relationship for precision, but no real impact on recall."}}