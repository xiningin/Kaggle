{"cell_type":{"3a012fbe":"code","1c616b45":"code","cf56d46d":"code","10b29fcd":"code","e8871033":"code","e7b995fd":"code","73219c73":"code","38e80346":"code","6780ee7c":"code","9b4a2917":"code","149a7cd6":"code","5fc4b0d7":"code","c03086eb":"code","62a1b874":"code","f873cc02":"code","a7474e3d":"code","213fd22c":"code","8a750003":"code","69da8d5d":"code","45892bae":"code","2d42c4fe":"code","1bfa0f67":"code","91d75fdc":"code","d15df64b":"code","cdf8fc35":"code","52534125":"code","acb2e355":"code","6c6ec233":"code","67ae2fd1":"code","4c0b8527":"code","80978cff":"code","1cd91a11":"code","9cd988fd":"code","32362b1f":"code","c2a821b2":"code","1ec02dc8":"code","602e093d":"code","386ef1b1":"code","52ac655c":"code","5532c492":"code","993b687a":"code","a5f0fc70":"code","671d1d14":"code","2edecc0e":"code","67b14a39":"code","e364495d":"code","1a4959e5":"code","fc357bf9":"code","154b42a8":"code","460ddd60":"code","7e16ffcf":"code","8a36ed03":"code","b1716d7e":"code","039f6496":"code","edd6ac9d":"code","2264ad99":"code","80f6787c":"code","ec17fb56":"code","cf675d11":"code","97b218e7":"code","33d78008":"code","28162f12":"code","a93785fa":"code","bad66f54":"code","239a3d8f":"code","9158f644":"code","6b40f379":"code","5f85e079":"code","aae82448":"code","8a4a61b4":"code","e5771d2d":"code","188e328f":"code","cb768136":"code","e9496afd":"code","46e5bcc5":"code","f2162ab4":"code","526cff02":"code","7946befb":"code","52628721":"code","0531f0f7":"code","341612d3":"code","d19202bd":"code","9e20e907":"code","5b547d71":"code","6f16cbf2":"code","cc09dffc":"code","d020614e":"code","9075c5f6":"code","d1f33137":"code","fc0ebc4f":"code","4185838a":"code","8ae88b9b":"code","3bc81c91":"code","3d64479a":"code","794c0990":"code","481a404e":"code","77556a86":"code","18762e71":"code","022a1500":"code","538c8934":"code","2ea8e30a":"code","acbb24e8":"code","b9514922":"code","686aee5a":"code","41dabb5e":"code","16dd3d17":"code","e6e32b0c":"code","ce131556":"code","063187dd":"markdown","4d20ebdd":"markdown","c224b9b1":"markdown","5a657cbf":"markdown","f0f498e4":"markdown","2399a3c0":"markdown","12e868e6":"markdown","a1f9ab7e":"markdown","b5717cc6":"markdown","4453017d":"markdown","e5aaa839":"markdown","9f36731d":"markdown","63b7aa0c":"markdown","2b0d2f6f":"markdown","3f02bf24":"markdown","08337f18":"markdown","f0b9b77c":"markdown","03f2f6c5":"markdown","518ad9b0":"markdown","7965c410":"markdown","633c95c6":"markdown","916e1ea1":"markdown","cb9aa5ea":"markdown","0a5da324":"markdown","535623e0":"markdown","57f84111":"markdown","efde5444":"markdown","910cee36":"markdown","5510e9d2":"markdown","7ce15935":"markdown","8e1590c2":"markdown","1fdf8d29":"markdown","e382ae6c":"markdown","aabd6cc2":"markdown","93df46b8":"markdown","c730cd47":"markdown","980343ec":"markdown","6d61dbb2":"markdown","557d8829":"markdown","70b4b2fb":"markdown","b0c12290":"markdown","f6117381":"markdown","6ec20175":"markdown","db3227dd":"markdown","5ae37653":"markdown","99b50e8e":"markdown","a43ff87c":"markdown","202b5f99":"markdown"},"source":{"3a012fbe":"import numpy as np # \u00e1lgebra Linear\nimport pandas as pd # processamento de dados, E \/ S de arquivo CSV (por exemplo, pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns","1c616b45":"from subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))","cf56d46d":"data = pd.read_csv('..\/input\/pokemon.csv')","10b29fcd":"data.info()","e8871033":"data.corr()","e7b995fd":"# Vamos visualizar a correla\u00e7\u00e3o dos dados\nf,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","73219c73":"data.head(10)","38e80346":"# obter as colunas do nosso data set\ndata.columns","6780ee7c":"# Gr\u00e1fico de linha\n# color = cor, label = r\u00f3tulo, linewidth = largura da linha, alpha = opacidade, grid = grade, \n# linestyle = estilo da linha\ndata.Speed.plot(kind = 'line', color = 'g',label = 'Speed',linewidth=1,alpha = 0.5,grid = True,linestyle = ':')\ndata.Defense.plot(color = 'r',label = 'Defense',linewidth=1, alpha = 0.5,grid = True,linestyle = '-.')\nplt.legend(loc='upper right')     # legend = puts label into plot\nplt.xlabel('x axis')              # label = name of label\nplt.ylabel('y axis')\nplt.title('Line Plot')            # title = title of plot\nplt.show()","9b4a2917":"# Gr\u00e1fico de dispers\u00e3o\n# x = ataque, y = defesa\ndata.plot(kind='scatter', x='Attack', y='Defense',alpha = 0.5,color = 'red')\nplt.xlabel('Ataque')              # R\u00f3tulos\nplt.ylabel('Defesa')\nplt.title('Dispers\u00e3o de Ataque e Defesa') # Titulo do gr\u00e1fico","149a7cd6":"# Histograma\n# caixas = n\u00famero de barras na figura\ndata.Speed.plot(kind = 'hist',bins = 50,figsize = (12,12))\nplt.show()","5fc4b0d7":"# clf() = limpa novamente, voc\u00ea pode iniciar um novo\ndata.Speed.plot(kind = 'hist',bins = 50)\nplt.clf()\n# N\u00e3o podemos ver o gr\u00e1fico devido a clf()","c03086eb":"#criar dicion\u00e1rio  e procurar suas chaves e valores\ndictionary = {'espanha' : 'madrid','usa' : 'vegas'}\nprint(dictionary.keys())\nprint(dictionary.values())","62a1b874":"# As chaves devem ser objetos imut\u00e1veis, como string, booleano, float, n\u00famero inteiro ou tubos\n# A lista n\u00e3o \u00e9 imut\u00e1vel\n# Chaves s\u00e3o \u00fanicas\ndictionary['espanha'] = \"barcelona\"    # atualizar entrada existente\nprint(dictionary)\ndictionary['fran\u00e7a'] = \"paris\"       # Adicionar nova entrada\nprint(dictionary)\ndel dictionary['espanha']              # remover entrada com a chave 'espanha'\nprint (dictionary)\nprint('fran\u00e7a' in dictionary)        # verifique incluir ou n\u00e3o\ndictionary.clear()                   # remova todas as entradas no dict\nprint(dictionary)","f873cc02":"# Para executar todo o c\u00f3digo, voc\u00ea precisa comentar esta linha\n# del dictionary             \nprint(dictionary)       # d\u00e1 erro porque o dicion\u00e1rio \u00e9 deletado","a7474e3d":"# carregar dataset com read_csv()\ndata = pd.read_csv('..\/input\/pokemon.csv')","213fd22c":"series = data['Defense']        # data['Defense'] = series\nprint(type(series))\ndata_frame = data[['Defense']]  # data[['Defense']] = data frame\nprint(type(data_frame))","8a750003":"# Operador de compara\u00e7\u00e3o\nprint(3 > 2)\nprint(3!=2)\n\n# Boolean operators\nprint(True and False)\nprint(True or False)","69da8d5d":"# 1 - Filtrando o quadro de dados do Pandas\nx = data['Defense']>200\n# Existem apenas 3 pokemons com maior valor de defesa do que 200\ndata[x]","45892bae":"# 2 - Filtrando pandas com *logical_and*\n# Existem apenas 2 pokemons com maior valor de defesa que 2oo e maior valor de ataque que 100\ndata[np.logical_and(data['Defense']>200, data['Attack']>100 )]","2d42c4fe":"# Isso tamb\u00e9m \u00e9 o mesmo da linha de c\u00f3digo anterior. Portanto, tamb\u00e9m podemos usar '&' para filtrar.\ndata[(data['Defense']>200) & (data['Attack']>100)]","1bfa0f67":"# Permane\u00e7a em loop se a condi\u00e7\u00e3o (i n\u00e3o for igual a 5) for verdadeira\ni = 0\nwhile i != 5 :\n    print('i \u00e9: ',i)\n    i +=1 \nprint(i,' \u00e9 igual a 5')","91d75fdc":"# Permane\u00e7a em loop se a condi\u00e7\u00e3o (i n\u00e3o for igual a 5) for verdadeira\nlis = [1,2,3,4,5]\nfor i in lis:\n    print('i \u00e9: ',i)\nprint('')\n\n# Para dicion\u00e1rios\n# Podemos usar o loop for para obter a chave e o valor do dicion\u00e1rio. \ndictionary = {'espanha':'madrid','fran\u00e7a':'paris'}\nfor key,value in dictionary.items():\n    print(key,\" : \",value)\nprint('')\n\n# no pandas, podemos alcan\u00e7ar \u00edndice e valor\nfor index,value in data[['Attack']][0:1].iterrows():\n    print(index,\" : \",value)","d15df64b":"# exemplo do que aprendemos acima\ndef tuble_ex():\n    \"\"\" retorno definido t tuble\"\"\"\n    t = (1,2,3)\n    return t\na,b,c = tuble_ex()\nprint(a,b,c)","cdf8fc35":"# veja o que sai na impress\u00e3o\n\nx = 2\ndef f():\n    x = 3\n    return x\nprint(x)      # x = 2 ecopo global\nprint(f())    # x = 3 escopo local","52534125":"# E se n\u00e3o houver escopo local\nx = 5\ndef f():\n    y = 2*x        # n\u00e3o h\u00e1 escopo local x\n    return y\nprint(f())         # usa escopo global x\n# Primeiro escopo local pesquisado, depois escopo global pesquisado, \n# se dois deles n\u00e3o puderem ser encontrados por \u00faltimo, \u00e9 contru\u00eddo no escopo pesquisado.","acb2e355":"# Como podemos aprender o que \u00e9 constru\u00eddo no escopo\nimport builtins\ndir(builtins)","6c6ec233":"# fun\u00e7\u00e3o aninhada\ndef square():\n    \"\"\" retornar quadrado de valor \"\"\"\n    def add():\n        \"\"\" adicione duas vari\u00e1veis locais \"\"\"\n        x = 2\n        y = 3\n        z = x + y\n        return z\n    return add()**2\nprint(square())  ","67ae2fd1":"# argumentos padr\u00e3o\ndef f(a, b = 1, c = 2):\n    y = a + b + c\n    return y\nprint(f(5))\n\n# e se quisermos mudar argumentos padr\u00e3o\nprint(f(5,4,3))","4c0b8527":"# argumentos flex\u00edveis * args\ndef f(*args):\n    for i in args:\n        print(i)\nf(1)\nprint(\"\")\nf(1,2,3,4)\n\n# argumentos flex\u00edveis ** kwargs que \u00e9 dicion\u00e1rio\ndef f(**kwargs):\n    \"\"\" imprime a chave e valor do dicion\u00e1rio\"\"\"\n    for key, value in kwargs.items(): \n        print(key, \" \", value)\nf(country = 'espanha', capital = 'madrid', population = 123456)","80978cff":"# fun\u00e7\u00e3o lambda\nsquare = lambda x: x**2     # onde x \u00e9 o nome do argumento\nprint(square(4))\n\ntot = lambda x,y,z: x+y+z   # onde x, y, z s\u00e3o nomes de argumentos\nprint(tot(1,2,3))","1cd91a11":"number_list = [1,2,3]\ny = map(lambda x:x**2,number_list)\nprint(list(y))","9cd988fd":"# Exemplo de Itera\u00e7\u00e3o\nname = \"nelson\"\nit = iter(name)\nprint(next(it))    # imprime a pr\u00f3xima itera\u00e7\u00e3o\nprint(*it)","32362b1f":"list1 = [1,2,3,4]\nlist2 = [5,6,7,8]\nz = zip(list1,list2)\nprint(z)\nz_list = list(z)\nprint(z_list)","c2a821b2":"un_zip = zip(*z_list)\nun_list1,un_list2 = list(un_zip) # unzip returns tuble\nprint(un_list1)\nprint(un_list2)\nprint(type(un_list2))","1ec02dc8":"# Exemplo de compreens\u00e3o de lista\nnum1 = [1,2,3]\nnum2 = [i + 1 for i in num1 ]\nprint(num2)","602e093d":"# Condicionais em iter\u00e1vel\nnum1 = [5,10,15]\nnum2 = [i**2 if i == 10 else i-5 if i < 7 else i+5 for i in num1]\nprint(num2)","386ef1b1":"# vamos retornar pokemon csv e fazer mais um exemplo de compreens\u00e3o de lista\n# vamos classificar os pokemons com velocidade alta ou baixa. Nosso limite \u00e9 a velocidade m\u00e9dia.\nthreshold = sum(data.Speed)\/len(data.Speed)\ndata[\"speed_level\"] = [\"high\" if i > threshold else \"low\" for i in data.Speed]\ndata.loc[:10,[\"speed_level\",\"Speed\"]] # we will learn loc more detailed later","52ac655c":"data = pd.read_csv('..\/input\/pokemon.csv')\ndata.head()  #  mostra as primeiras 5 linhas","5532c492":"# tail mostra as \u00faltimas 5 linhas\ndata.tail()","993b687a":"# columns fornece nomes de colunas dos recursos\ndata.columns","a5f0fc70":"# shape fornece o n\u00famero de linhas e colunas em tupla\ndata.shape","671d1d14":"# info: fornece tipos de dados como quadro de dados, n\u00famero de amostra ou linha, n\u00famero de recurso ou coluna, \n# tipos de recurso e uso de mem\u00f3ria\ndata.info()","2edecc0e":"# Por exemplo, vamos ver a frequ\u00eancia dos tipos de pokemom\nprint(data['Type 1'].value_counts(dropna =False)) \n# se houver valores nan que tamb\u00e9m ser\u00e3o contados\n# Como pode ser visto abaixo, existem 112 pokemon de \u00e1gua ou 70 pokemon de grama","67b14a39":"# Por exemplo, o max HP \u00e9 255 ou a min defense \u00e9 5\ndata.describe() #ignora entradas nulas","e364495d":"# Por exemplo: compare o ataque de pokemons lend\u00e1rios ou n\u00e3o\n# A linha preta no topo \u00e9 m\u00e1xima\n# A linha azul na parte superior \u00e9 de 75%\n# Linha vermelha \u00e9 mediana (50%)\n# A linha azul na parte inferior \u00e9 de 25%\n# A linha preta na parte inferior \u00e9 m\u00ednima\n# N\u00e3o h\u00e1 outliers\ndata.boxplot(column='Attack',by = 'Legendary')","1a4959e5":"# Em primeiro lugar, crio novos dados a partir de dados de pokemons para explicar facilmente o melt().\ndata_new = data.head()    # Coloco apenas 5 linhas em novos dados\ndata_new","fc357bf9":"# usando o melt()\n# id_vars = o que n\u00e3o queremos no melt()\n# value_vars = o que queremos no melt()\nmelted = pd.melt(frame=data_new,id_vars = 'Name', value_vars= ['Attack','Defense'])\nmelted","154b42a8":"# Index \u00e9 nome\n# Eu quero fazer com que as colunas sejam vari\u00e1veis\n# Finalmente, os valores nas colunas s\u00e3o valor\nmelted.pivot(index = 'Name', columns = 'variable',values='value')","460ddd60":"# Em primeiro lugar, vamos criar 2 dataframes\ndata1 = data.head()\ndata2= data.tail()\nconc_data_row = pd.concat([data1,data2],axis =0,ignore_index =True)\n# axis = 0: adiciona dataframes na linha\nconc_data_row","7e16ffcf":"data1 = data['Attack'].head()\ndata2= data['Defense'].head()\nconc_data_col = pd.concat([data1,data2],axis =1) # axis = 0: adiciona dataframes na linha\nconc_data_col","8a36ed03":"data.dtypes","b1716d7e":"# vamos converter o objeto (str) em categ\u00f3rico e int em flutuante.\ndata['Type 1'] = data['Type 1'].astype('category')\ndata['Speed'] = data['Speed'].astype('float')","039f6496":"# Como voc\u00ea pode ver, o Tipo 1 \u00e9 convertido de objeto em categ\u00f3rico\n# E Speed, \u00e9 convertido de int para float\ndata.dtypes","edd6ac9d":"# Vamos analisar se os dados de pokemon t\u00eam valor nan\n# Como voc\u00ea pode ver, existem 800 entradas. No entanto, o Tipo 2 \n# possui 414 objetos n\u00e3o nulos e, portanto, 386 objetos nulos\ndata.info()","2264ad99":"# Vamos verificar o Tipo 2\ndata[\"Type 2\"].value_counts(dropna =False)\n# Como voc\u00ea pode ver, h\u00e1 386 valores NAN","80f6787c":"# Vamos apagar os valores NaN\ndata1=data\n# tamb\u00e9m usaremos dados para preencher o valor que falta, ent\u00e3o eu os atribuo \u00e0 vari\u00e1vel data1\ndata1[\"Type 2\"].dropna(inplace = True)\n# inplace = True significa que n\u00e3o o atribu\u00edmos a uma nova vari\u00e1vel.\n# Altera\u00e7\u00f5es atribu\u00eddas automaticamente aos dados\n# Ent\u00e3o funciona?","ec17fb56":"# Permite verificar com declara\u00e7\u00e3o assert\n# Declara\u00e7\u00e3o de afirma\u00e7\u00e3o (Assert statement):\nassert 1==1 # n\u00e3o retorna nada porque \u00e9 verdade","cf675d11":"# Para executar todo o c\u00f3digo, precisamos comentar esta linha\n# assert 1 == 2 # erro de retorno porque \u00e9 falso\nassert  data['Type 2'].notnull().all()\n# n\u00e3o retorna nada porque apagamos os valores nan","97b218e7":"data[\"Type 2\"].fillna('empty',inplace = True)","33d78008":"assert  data['Type 2'].notnull().all()\n# n\u00e3o retorna nada porque n\u00e3o temos valores nan","28162f12":"# dataframe a partir de um dicion\u00e1rio\ncountry = [\"Espanha\",\"Fran\u00e7a\"]\npopulation = [\"11\",\"12\"]\nlist_label = [\"pa\u00eds\",\"popula\u00e7\u00e3o\"]\nlist_col = [country,population]\nzipped = list(zip(list_label,list_col))\ndata_dict = dict(zipped)\ndf = pd.DataFrame(data_dict)\ndf","a93785fa":"# adicionar novas colunas\ndf[\"capital\"] = [\"madrid\",\"paris\"]\ndf","bad66f54":"# Broadcasting\ndf[\"renda\"] = 0 #Broadcasting na coluna inteira\ndf","239a3d8f":"# Plotando todos os dados - fica bastante confuso\ndata1 = data.loc[:,[\"Attack\",\"Defense\",\"Speed\"]]\ndata1.plot()","9158f644":"# Aplicando subplots para ficar mais claro e f\u00e1cil de analisar\ndata1.plot(subplots = True)\nplt.show()","6b40f379":"# scatter plot  \ndata1.plot(kind = \"scatter\",x=\"Attack\",y = \"Defense\")\nplt.show()","5f85e079":"# hist plot  \ndata1.plot(kind = \"hist\",y = \"Defense\",bins = 50,range= (0,250),normed = True)","aae82448":"# subplot do histograma com n\u00e3o cumulativo e cumulativo\nfig, axes = plt.subplots(nrows=2,ncols=1)\ndata1.plot(kind = \"hist\",y = \"Defense\",bins = 50,range= (0,250),normed = True,ax = axes[0])\ndata1.plot(kind = \"hist\",y = \"Defense\",bins = 50,range= (0,250),normed = True,ax = axes[1],cumulative = True)\nplt.savefig('grafico.png')\nplt","8a4a61b4":"data.describe()","e5771d2d":"time_list = [\"1992-03-08\",\"1992-04-12\"]\nprint(type(time_list[1])) # Como voc\u00ea pode ver, a data \u00e9 string\n# no entanto, queremos que seja um objeto datetime \ndatetime_object = pd.to_datetime(time_list)\nprint(type(datetime_object))","188e328f":"# fechar aviso (warnings)\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Para praticar, vamos pegar os dados do pokemon e adicionar uma lista de hor\u00e1rios\ndata2 = data.head()\ndate_list = [\"10\/01\/1992\",\"10\/02\/1992\",\"10\/03\/1992\",\"15\/03\/1993\",\"16\/03\/1993\"]\ndatetime_object = pd.to_datetime(date_list)\ndata2[\"date\"] = datetime_object\n# vamos fazer a data como \u00edndice\ndata2= data2.set_index(\"date\")\ndata2 ","cb768136":"# Agora podemos selecionar de acordo com nosso \u00edndice de datas\nprint(data2.loc[\"16\/03\/1993\"])\nprint(data2.loc[\"10\/03\/1992\":\"16\/03\/1993\"])","e9496afd":"# Usaremos o data2 que criamos na parte anterior\ndata2.resample(\"A\").mean()","46e5bcc5":"# Vamos usar Resampling com o m\u00eas\ndata2.resample(\"M\").mean()\n# Como voc\u00ea pode ver, existem muitas nan porque o data2 n\u00e3o inclui todos os meses","f2162ab4":"# Na vida real (os dados s\u00e3o reais. N\u00e3o criados por n\u00f3s como o data2), \n# podemos resolver esse problema com interpola\u00e7\u00e3o (interpolate)\n# Podemos interpolar a partir do primeiro valor\ndata2.resample(\"M\").first().interpolate(\"linear\")","526cff02":"# leitura de dados\ndata = pd.read_csv('..\/input\/pokemon.csv')\ndata= data.set_index(\"#\")\ndata.head()","7946befb":"# indexa\u00e7\u00e3o usando colchetes\ndata[\"HP\"][1]","52628721":"# usando atributo de coluna e r\u00f3tulo de linha\ndata.HP[1]","0531f0f7":"# usando loc accessor\ndata.loc[1,[\"HP\"]]","341612d3":"# Selecionando apenas algumas colunas\ndata[[\"HP\",\"Attack\"]]","d19202bd":"# Diferen\u00e7a entre fatiar (slicing) colunas: s\u00e9ries e dataframes\nprint(type(data[\"HP\"]))     # series\nprint(type(data[[\"HP\"]]))   # data frames","9e20e907":"# Fatiando (slicing) e indexando s\u00e9ries\ndata.loc[1:10,\"HP\":\"Defense\"]   # 10 e \"Defense\" s\u00e3o inclusivas","5b547d71":"# Reverse slicing \ndata.loc[10:1:-1,\"HP\":\"Defense\"] ","6f16cbf2":"# De um lugar at\u00e9 ao fim\ndata.loc[1:10,\"Speed\":] ","cc09dffc":"# Criando s\u00e9ries boleanas\nboolean = data.HP > 200\ndata[boolean]","d020614e":"# combinando filtros\nfirst_filter = data.HP > 150\nsecond_filter = data.Speed > 35\ndata[first_filter & second_filter]","9075c5f6":"# Filtrando colunas com base em outras\ndata.HP[data.Speed<15]","d1f33137":"# Fun\u00e7\u00f5es simples de python\ndef div(n):\n    return n\/2\ndata.HP.apply(div)","fc0ebc4f":"# Ou podemos usar a fun\u00e7\u00e3o lambda\ndata.HP.apply(lambda n : n\/2)","4185838a":"# Definindo Coluna Usando Outras Colunas\ndata[\"total_power\"] = data.Attack + data.Defense\ndata.head()","8ae88b9b":"# nosso nome de \u00edndice \u00e9 este:\nprint(data.index.name)\n# vamos alterar o nome\ndata.index.name = \"index_name\"\ndata.head()","3bc81c91":"# Substituir \u00edndice\n# se queremos modificar o \u00edndice, precisamos mudar todos eles.\ndata.head()\n# primeira copie nossos dados para data3 e depois altere o \u00edndice \ndata3 = data.copy()\n# vamos fazer com que o \u00edndice comece a partir de 100. N\u00e3o \u00e9 uma mudan\u00e7a not\u00e1vel, mas \u00e9 apenas um exemplo\ndata3.index = range(100,900,1)\ndata3.head()","3d64479a":"# permite ler o dataframe mais uma vez para come\u00e7ar do in\u00edcio\ndata = pd.read_csv('..\/input\/pokemon.csv')\ndata.head()\n# Como voc\u00ea pode ver, existe um \u00edndice. No entanto, queremos definir uma ou mais colunas para serem indexadas","794c0990":"# Definir \u00edndice: tipo 1 \u00e9 externo Tipo 2 \u00e9 \u00edndice interno\ndata1 = data.set_index([\"Type 1\",\"Type 2\"]) \ndata1.head(100)\n# data1.loc[\"Fire\",\"Flying\"] # como usar \u00edndices","481a404e":"dic = {\"tratamento\":[\"A\",\"A\",\"B\",\"B\"],\"g\u00eanero\":[\"F\",\"M\",\"F\",\"M\"],\"resposta\":[10,45,5,9],\"idade\":[15,4,72,65]}\ndf = pd.DataFrame(dic)\ndf","77556a86":"# pivoting\ndf.pivot(index=\"tratamento\",columns = \"g\u00eanero\",values=\"resposta\")","18762e71":"df1 = df.set_index([\"tratamento\",\"g\u00eanero\"])\ndf1\n# vamos desempilhar","022a1500":"# n\u00edvel determina \u00edndices\ndf1.unstack(level=0)","538c8934":"df1.unstack(level=1)","2ea8e30a":"# alterar a posi\u00e7\u00e3o do \u00edndice de n\u00edvel interno e externo\ndf2 = df1.swaplevel(0,1)\ndf2","acbb24e8":"df","b9514922":"# df.pivot(index=\"tratamento\",columns = \"g\u00eanero\",values=\"resposta\")\npd.melt(df,id_vars=\"tratamento\",value_vars=[\"idade\",\"resposta\"])","686aee5a":"# vamos usar o dataframe df\ndf","41dabb5e":"# de acordo com o tratamento, use outras caracter\u00edsticas\ndf.groupby(\"tratamento\").mean()   # m\u00e9dia \u00e9 o m\u00e9todo de agrega\u00e7\u00e3o \/ redu\u00e7\u00e3o\n# existem outros m\u00e9todos como sum, std, max ou min","16dd3d17":"# s\u00f3 podemos escolher um dos recursos\ndf.groupby(\"tratamento\").idade.max() ","e6e32b0c":"# Ou podemos escolher v\u00e1rios recursos\ndf.groupby(\"tratamento\")[[\"idade\",\"resposta\"]].min() ","ce131556":"df.info()\n# como voc\u00ea pode ver, o g\u00eanero \u00e9 objeto\n# No entanto, se usarmos groupby, podemos converter dados categ\u00f3ricos.\n# Como os dados categ\u00f3ricos usam menos mem\u00f3ria, acelere opera\u00e7\u00f5es como agrupar\n#df [\"g\u00eanero\"] = df [\"g\u00eanero\"]. astype (\"categoria\")\n#df [\"tratamento\"] = df [\"tratamento\"]. astype (\"categoria\")\n# df.info ()","063187dd":"> **COMPREENS\u00c3O DA LISTA**\n\n**Um dos t\u00f3picos mais importantes deste artigo**\n\nUsamos a compreens\u00e3o da lista para an\u00e1lise de dados frequentemente.\ncompreens\u00e3o da lista: recolhimento de loops para criar listas em uma \u00fanica linha\nEx: num1 = [1,2,3] e queremos torn\u00e1-lo num2 = [2,3,4]. Isso pode ser feito com o loop for. No entanto, \u00e9 desnecessariamente longo. Podemos torn\u00e1-lo um c\u00f3digo de linha que \u00e9 a compreens\u00e3o da lista.","4d20ebdd":"> **REAMOSTRAGEM DE S\u00c9RIE TEMPORAL COM PANDAS**\n\n* Resampling: m\u00e9todo estat\u00edstico em diferentes intervalos de tempo\n    * Precisa de string para especificar a frequ\u00eancia como \"M\" = m\u00eas ou \"A\" = ano\n* Downsampling: reduza as linhas de data e hora para uma frequ\u00eancia mais lenta, como de di\u00e1ria para semanal\n* Upsampling: aumente as linhas de data e hora para uma frequ\u00eancia mais r\u00e1pida, como diariamente para a cada hora\n* Interpolate: interpole valores de acordo com diferentes m\u00e9todos, como \"linear\", \"tempo\" ou \u00edndice \"","c224b9b1":"> **INDEXA\u00c7\u00c3O DE S\u00c9RIES TEMPORAIS COM PANDAS**\n\ndatetime = objeto\nparse_dates(boolean): Transforme a data no formato ISO 8601 (aaaa-mm-dd hh: mm: ss)","5a657cbf":"> **AN\u00c1LISE VISUAL DE DADOS EXPLORAT\u00d3RIOS**\n\nBox Plot (gr\u00e1ficos de caix): visualizA estat\u00edsticas b\u00e1sicas, como outliers, min \/ max ou quartis","f0f498e4":"> **SLICING (fatiando) DATA FRAME**\n\n* Diferen\u00e7a entre selecionar colunas\n    * S\u00e9ries e Dataframes\n* Indexando e fatiando (slicing) s\u00e9ries\n* Corte reverso (Reverse Slicing)\n* De algum lugar at\u00e9 fim","2399a3c0":"> zip(): listas de zip","12e868e6":"* [i + 1 for i in num1]: lista de compreens\u00e3o\n* i +1: sintaxe de compreens\u00e3o da lista\n* for i in num1: simntaxe do loop for\n* i: iterador\n* num1: objeto iter\u00e1vel","a1f9ab7e":"> **TIPOS DE DADOS**\n\nExistem 5 tipos de dados b\u00e1sicos: objeto (string), booleab, n\u00famero inteiro, float e categ\u00f3rico.\nPodemos criar tipos de dados de convers\u00e3o como str para categ\u00f3rico ou int para flutuantes\nPor que a categoria \u00e9 importante:\n* tornar o quadro de dados menor na mem\u00f3ria\n* pode ser utilizado para analises especialmente para sklear (aprenderemos mais adiante)","b5717cc6":"> **INDEXA\u00c7\u00c3O DE OBJETOS E ROTULOS DE DADOS**\n\n* \u00edndice: sequ\u00eancia do r\u00f3tulo","4453017d":"> **CATEGORIAS E GROUP BY**","e5aaa839":"> **TRANSFORMANDO DADOS**\n\n* Fun\u00e7\u00f5es simples de python\n* Fun\u00e7\u00e3o Lambda: para aplicar a fun\u00e7\u00e3o python arbitr\u00e1ria a todos os elementos\n* Definindo Coluna Usando Outras Colunas","9f36731d":"> **FUN\u00c7\u00d5ES AN\u00d4NIMAS**\n\nComo a fun\u00e7\u00e3o lambda, mas pode levar mais de um argumento.\n* map(func, seq): aplica uma fun\u00e7\u00e3o a todos os itens em uma lista","63b7aa0c":"Os arquivos de dados de entrada est\u00e3o dispon\u00edveis no diret\u00f3rio \"..\/input\/\".\nPor exemplo, executar isso (clicando em executar ou pressionando Shift + Enter) listar\u00e1 os arquivos no diret\u00f3rio de entrada","2b0d2f6f":"> **EMPILHAMENTO E DESEMPILHAMENTO DE DATAFRAME**\n\n* lidar com \u00edndices de r\u00f3tulos m\u00faltiplos\n* n\u00edvel (level): posi\u00e7\u00e3o do \u00edndice n\u00e3o empilhado\n* swaplevel: altera a posi\u00e7\u00e3o do \u00edndice de n\u00edvel interno e externo","3f02bf24":"> **PANDAS FOUNDATION**\n\n**REVIS\u00c3O DO PANDAS**\n\nComo voc\u00ea percebeu, eu n\u00e3o dou todas as id\u00e9ias ao mesmo tempo. Embora aprendamos algumas no\u00e7\u00f5es b\u00e1sicas de pandas, vamos nos aprofundar aos poucos nospandas.\n\n* coluna \u00fanica(single column) = s\u00e9rie (series)\n* NaN = n\u00e3o \u00e9 um n\u00famero\n* dataframe.values = numpy\n\n\n**CONSTRUIR DATA FRAMES**\n\n* Podemos construir quadros de dados a partir do csv como fizemos anteriormente.\n* Tamb\u00e9m podemos construir dataframe a partir de dicion\u00e1rios\n    * m\u00e9todo zip(): Esta fun\u00e7\u00e3o retorna uma lista de tuplas, em que a i-\u00e9sima tupla cont\u00e9m o i-\u00e9simo elemento de cada uma das seq\u00fc\u00eancias de argumentos ou iter\u00e1veis.\n* Adicionando nova coluna\n* Transmiss\u00e3o (Broadcasting): crie uma nova coluna e atribua um valor a toda a coluna","08337f18":"> **DADOS PIVOTANTES \/ PIVOTAR DADOS**\n\n\u00c9 o oposto do melt()\n\nRetorne o DataFrame reformulado, organizado pelos valores de \u00edndice \/ coluna fornecidos.\n\nRemodele os dados (produza uma tabela din\u00e2mica) com base nos valores da coluna. Usa valores exclusivos de \u00edndices \/ colunas especificados para formar eixos do DataFrame resultante. Esta fun\u00e7\u00e3o n\u00e3o suporta agrega\u00e7\u00e3o de dados, v\u00e1rios valores resultar\u00e3o em um MultiIndex nas colunas","f0b9b77c":"> **ARGUMENTOS PADR\u00c3O E FLEX\u00cdVEIS**\n\n* Exemplo de argumento padr\u00e3o: def f (a, b = 1):\n    * \"\" \"b = 1 \u00e9 o argumento padr\u00e3o\" \"\"\n* Exemplo de argumento flex\u00edvel: def f (* args):\n    * \"\"\" args can be one or more\"\"\"\n* def f(** kwargs)\n    * \"\"\" kwargs is a dictionary\"\"\"\n\n> Vamos escrever algum c\u00f3digo para praticar","03f2f6c5":"> **MANIPULAR QUADROS DE DADOS COM PANDAS**\n\n**INDEXAR DATAFRAMES**\n* Indexando usando colchetes\n* Usando atributo de coluna e r\u00f3tulo de linha\n* Usando loc accessor\n* Selecionando apenas algumas colunas\n","518ad9b0":"> **FILTRANDO DATA FRAMES**\n\nCriando s\u00e9ries booleanas Combinando filtros Filtrando outras colunas com base","7965c410":"**CIENTISTA DE DADOS**\n> Neste tutorial, explico apenas o que voc\u00ea precisa iniciar sua caminhada em ci\u00eancia de Dados, utilizaremos um dataset bem conhecido no universo de data science, que \u00e9 o dos Pokemons, muito utilziado para fins acad\u00eamicos, como \u00e9 este caso.\n\n**O cientista de dados precisa ter as seguintes habilidades:**\n\n1. Ferramentas b\u00e1sicas: como python, R ou SQL. Voc\u00ea n\u00e3o precisa saber tudo. O que voc\u00ea s\u00f3 precisa \u00e9 aprender a usar python.\n2. Estat\u00edstica B\u00e1sica: Como m\u00e9dia, mediana ou desvio padr\u00e3o. Se voc\u00ea conhece estat\u00edsticas b\u00e1sicas, pode usar o python facilmente.\n3. Data Munging\/Wrangling: trabalhando com dados confusos e dif\u00edceis. Como uma data inconsistente e formata\u00e7\u00e3o de string. O Python \u00e9 uma ajuda preciosa\n4. Visualiza\u00e7\u00e3o de dados: o t\u00edtulo \u00e9 realmente explicativo. Visualizaremos os dados com python, como matplot e seaborn.\n5. Aprendizado de m\u00e1quina (Machine Learning): voc\u00ea n\u00e3o precisa entender matem\u00e1tica por tr\u00e1s da t\u00e9cnica de aprendizado de m\u00e1quina. Voc\u00ea s\u00f3 precisa entender o b\u00e1sico do aprendizado de m\u00e1quina e aprender como implement\u00e1-lo enquanto estiver usando o python.","633c95c6":"> **LIMPEZA DE DADOS**\n\nDADOS DE DIAGN\u00d3STICO PARA LIMPEZA\n\nPrecisamos diagnosticar e limpar dados antes de explorar.\n\nDados impuros:\n* Inconsist\u00eancia no nome da coluna, como letra mai\u00fascula ou espa\u00e7o entre as palavras\n* valores faltando\n* tipos\/linguagens diferentes\n\nUsaremos m\u00e9todos de head, tail, columns, shape e metodos de  informa\u00e7\u00e3o para diagnosticar dados","916e1ea1":"> **O que voc\u00ea aprendeu at\u00e9 agora**\n* Fun\u00e7\u00e3o definida pelo usu\u00e1rio\n* Escopo\n* Fun\u00e7\u00f5es Aninhadas\n* Argumentos padr\u00e3o e flex\u00edveis\n* Fun\u00e7\u00e3o Lambda\n* Fun\u00e7\u00e3o An\u00f4nima\n* Iteratores\n* Compreens\u00e3o de Listas","cb9aa5ea":"> **FUN\u00c7\u00d5ES ANINHADAS**\n\n* fun\u00e7\u00e3o dentro da fun\u00e7\u00e3o.\n* Existe uma regra LEGB que busca o escopo local, incluindo a fun\u00e7\u00e3o, escopos globais e internos, respectivamente.","0a5da324":"> **ITERADORES**\n\n* Iter\u00e1vel \u00e9 um objeto que pode retornar um iterador\n* Iter\u00e1vel: um objeto com um m\u00e9todo iter() associado\n    * exemplo: lista, strings e dicion\u00e1rios\n* Iterador: produz o pr\u00f3ximo valor com o m\u00e9todo next()","535623e0":"> **MELTING DATA FRAMES**\n* o posto de pivotar dataframes\n","57f84111":"Ap\u00f3s a an\u00e1lise de correla\u00e7\u00e3o dos dados, podemos obter um resumo do nosso data set","efde5444":"> **DADOS ORDIN\u00c1RIOS**\n\nOrganizamos os dados com melt(). \nEsta fun\u00e7\u00e3o \u00e9 \u00fatil para \"massagear\" um DataFrame em um formato em que uma ou mais colunas s\u00e3o vari\u00e1veis identificadoras (id_vars), enquanto todas as outras colunas, consideradas vari\u00e1veis medidas (value_vars), s\u00e3o \"n\u00e3o din\u00e2micas\" para o eixo da linha, deixando apenas dois n\u00e3o identificadores colunas, 'vari\u00e1vel' e 'valor'.","910cee36":"> **AN\u00c1LISE VISUAL DE DADOS EXPLORAT\u00d3RIOS**\n\n* Plot (plotagem)\n* Subplot (sub plotagem)\n* Histograma:\n    * caixas(bins): n\u00famero de caixas\n    * range (tuble): valores m\u00ednimo e m\u00e1ximo de caixas\n    * normed(booleano): normalize ou n\u00e3o\ncumulativo (booleano): computa distribui\u00e7\u00e3o cumulativa","5510e9d2":"Antes de continuar com os pandas, precisamos aprender l\u00f3gica, controlar o fluxo e a filtragem.\nOperador de compara\u00e7\u00e3o: ==, <,>, <=\nOperadores booleanos: and, or, not\n\n**Filtrando pandas**","7ce15935":"> **CONCATENANDO DADOS \/ DADOS CONCATENANTES**\n\nPodemos concatenar dois dataframes","8e1590c2":"> **PIVOTANDO DATAFRAMES**\n\n* pivoting: ferramenta de remodela\u00e7\u00e3o","1fdf8d29":"**At\u00e9 aqui voc\u00ea aprendeu:**\n\n* Diagnosticar dados para limpeza\n* An\u00e1lise explorat\u00f3ria de dados\n* An\u00e1lise visual explorat\u00f3ria dos dados\n* Dados organizados\n* Dados din\u00e2micos\n* Concatenando dados\n* Tipos de dados\n* Dados ausentes e testes com assert","e382ae6c":"**PANDAS**\n\nO que precisamos saber sobre pandas?\n* CSV: valores separados por v\u00edrgula","aabd6cc2":"> **WHILE e FOR LOOPS**\n\nVamos aprender mais b\u00e1sico enquanto e para loops","93df46b8":"> **FUN\u00c7\u00c3O LAMBDA**\n\nFun\u00e7\u00f5es lambda nada mais s\u00e3o do que fun\u00e7\u00f5es an\u00f4nimas. Enquanto fun\u00e7\u00f5es normais podem ser criada utilizando def como prefixo, as fun\u00e7\u00f5es lambda s\u00e3o criadas utilizando lambda.\nVale notar que as fun\u00e7\u00f5es lambda n\u00e3o utilizam a keyword return pois o retorno dentro de lambda \u00e9 impl\u00edcito.\n\n> **Mas para que servem essas fun\u00e7\u00f5es lambda?**\n\nFun\u00e7\u00f5es lambda funcionam da mesma forma que fun\u00e7\u00f5es convencionais e, em geral, a escolha de adotar ou n\u00e3o seu uso \u00e9 exclusivamente baseada em estilo de c\u00f3digo.\n\n1. Maneira mais r\u00e1pida de escrever a fun\u00e7\u00e3o","c730cd47":"> **INDEXA\u00c7\u00c3O HIER\u00c1RQUICA**\n\n* Definindo e configurando a indexa\u00e7\u00e3o","980343ec":"**DICION\u00c1RIO**\n\nPor que precisamos de dicion\u00e1rio?\n* Possui 'chave' e 'valor'\n* Mais r\u00e1pido que as listas\n    * O que \u00e9 chave e valor. Exemplo:\n    * dictionary = {'espanha': 'madrid'}\n* Key \u00e9 a Espanha.\n* Valores \u00e9 madrid.\n\n> **\u00c9 t\u00e3o f\u00e1cil!**\nVamos praticar algumas outras propriedades como keys(), values(), atualizar, adicionar, verificar, remover chave, remover todas as entradas e remover dicion\u00e1rio.","6d61dbb2":"Com Declara\u00e7\u00e3o de afirma\u00e7\u00e3o (Assert statement), podemos verificar muita coisa. \n* Por exemplo\n    * assert data.columns [1] == 'Name'\n    * assert data.Speed.dtypes == np.int","557d8829":"**1. INTRODU\u00c7\u00c3O AO PYTHON**\n\n**MATPLOTLIB**\nMatplot \u00e9 uma biblioteca python que nos ajuda a plotar dados. Os gr\u00e1ficos mais f\u00e1ceis e b\u00e1sicos s\u00e3o gr\u00e1ficos de linha, dispers\u00e3o e histograma.\n* O gr\u00e1fico de linhas \u00e9 melhor quando o eixo x \u00e9 o tempo.\n* A dispers\u00e3o \u00e9 melhor quando h\u00e1 correla\u00e7\u00e3o entre duas vari\u00e1veis\n* O histograma \u00e9 melhor quando precisamos ver a distribui\u00e7\u00e3o dos dados num\u00e9ricos.\n* Personaliza\u00e7\u00e3o: cores, r\u00f3tulos, espessura da linha, t\u00edtulo, opacidade, grade, tamanho, marcas do eixo e estilo de linha","70b4b2fb":"Podemos criar uma das colunas como \u00edndice. Na verdade, eu fiz isso no in\u00edcio da manipula\u00e7\u00e3o do dataframe com a se\u00e7\u00e3o pandas\nFoi assim:\n* data = data.set_index (\"#\")\n    * tamb\u00e9m voc\u00ea pode usar\n        * data.index = data [\"#\"]","b0c12290":"> **FALTA DE DADOS E TESTE COM ASSERT**\n\nSe encontrarmos dados ausentes, o que podemos fazer:\n* deixe como est\u00e1\n* apague-os com dropna()\n* preencha os espa\u00e7os vazios com fillna()\n\nDeclara\u00e7\u00e3o de afirma\u00e7\u00e3o: verifique se voc\u00ea pode ativar ou desativar quando terminar o teste do programa","f6117381":"Necessitamos de analisar nossos dados antes de iniciar qualquer processo de ML ","6ec20175":"> At\u00e9 aqui voc\u00ea aprendeu:\n\n* como importar arquivo csv\n* plotar gr\u00e1ficos de linha, dispers\u00e3o e histograma\n* recursos b\u00e1sicos do dicion\u00e1rio\n* recursos b\u00e1sicos dos pandas, como a filtragem, que na verdade \u00e9 algo sempre usado em ci\u00eancia de dados\n* While e for loops","db3227dd":"> **AN\u00c1LISE EXPLORAT\u00d3RIA DE DADOS**\n\nvalue_counts(): contagem de frequ\u00eancia\noutliers: o valor que \u00e9 consideravelmente mais alto ou mais baixo do restante dos dados\n* Digamos que o valor de 75% seja Q3 e o valor de 25% seja Q1.\n* Os outliers s\u00e3o menores que Q1 - 1,5 (Q3-Q1) e maiores que Q3 + 1,5 (Q3-Q1). (Q3-Q1) = IQR\n    Usaremos o m\u00e9todo descrevem (). O m\u00e9todo Descrever inclui:\n    * count: n\u00famero de entradas\n    * mean: m\u00e9dia de entradas\n    * std: desvio padr\u00e3o\n    * min: entrada m\u00ednima\n    * 25%: primeiro quartil\n    * 50%: mediana ou segundo quartil\n    * 75%: terceiro quartil\n    * max: entrada m\u00e1xima\n\n**O que \u00e9 quartil?**\n\n* exemplo: 1,4,5,6,8,9,11,12,13,14,15,16,17\n* A mediana \u00e9 o n\u00famero que est\u00e1 no meio da sequ\u00eancia. Nesse caso, seria 11.\n* O quartil inferior \u00e9 a mediana entre o menor n\u00famero e a mediana, ou seja, entre 1 e 11, que \u00e9 6.\n* No quartil superior, voc\u00ea encontra a mediana entre a mediana e o maior n\u00famero, ou seja, entre 11 e 17, que ser\u00e1 14 de acordo com a pergunta acima.","5ae37653":"> **AN\u00c1LISE ESTAT\u00cdSTICA DE DADOS EXPLORAT\u00d3RIOS**\n\nEu j\u00e1 expliquei isso em partes anteriores. No entanto, vamos olhar mais uma vez.\n* count: n\u00famero de entradas\n* mean: m\u00e9dia de entradas\n* std: desvio padr\u00e3o\n* min: entrada m\u00ednima\n* 25%: primeiro quantil\n* 50%: mediana ou segundo quantil\n* 75%: terceiro quantil\n* max: entrada m\u00e1xima","99b50e8e":"**Conte\u00fado do Tutorial**\n\n1. Introdu\u00e7\u00e3o ao Python\n    * Matplotlib\n    * Dicion\u00e1rios\n    * Pandas\n    * L\u00f3gica, controle de fluxo e filtragem\n    * Estruturas de dados em loop\n\n2. Caixa de ferramentas de ci\u00eancia de dados do Python:\n    * Fun\u00e7\u00e3o definida pelo usu\u00e1rio\n    * Escopo\n    * Fun\u00e7\u00e3o aninhada\n    * Argumentos padr\u00e3o e flex\u00edveis\n    * Fun\u00e7\u00e3o Lambda\n    * Fun\u00e7\u00e3o an\u00f4nima\n    * Iteradores\n    * Compreens\u00e3o de lista\n\n3. Higieniza\u00e7\u00e3o de Dados\n    * Diagnosticar dados para limpeza\n    * An\u00e1lise explorat\u00f3ria de dados\n    * An\u00e1lise visual explorat\u00f3ria dos dados\n    * Dados organizados\n    * Dados din\u00e2micos\n    * Concatenando dados\n    * Tipos de dados\n    * Dados ausentes e testes com afirma\u00e7\u00f5es\n\n4. Fun\u00e7\u00e3o do Pandas\n    * Revis\u00e3o do pandas\n    * Construindo quadros de dados a partir do zero\n    * An\u00e1lise visual explorat\u00f3ria dos dados\n    * An\u00e1lise estat\u00edstica explorat\u00f3ria dos dados\n    * Indexa\u00e7\u00e3o de s\u00e9ries temporais com pandas\n    * Reamostragem de s\u00e9ries temporais com pandas\n\n5. Manipulando Data Frames com o Pandas\n    * Indexando data frames\n    * Cortando data frames\n    * Filtrando data frames\n    * Transformando data frames\n    * Objetos de \u00edndice e dados rotulados\n    * Indexa\u00e7\u00e3o hier\u00e1rquica\n    * Data frames din\u00e2micos\n    * Empilhamento e desempilhar data frames\n    * Unpivot data frames\n    * Categorias e grupos\n\n6. Visualiza\u00e7\u00e3o de Dados\n    * Seaborn\n    * Bokeh\n\n7. Pensamento Estat\u00edstico\n\n8. Machine Learning (Aprendizado de M\u00e1quina)\n    * Aprendizado Supervisionado\n        * EDA (An\u00e1lise Explorat\u00f3ria de Dados)\n        * K-Nearest Neighbors (KNN)\n        * Regress\u00e3o\n        * Cross Validation (CV) - Valida\u00e7\u00e3o Cruzada\n        * ROC Curve (Curva ROC - Caracter\u00edstica de Opera\u00e7\u00e3o do Receptor) \n        * Ajuste do hiperpar\u00e2metro\n        * Pr\u00e9-Processamento de Dados\n    * Aprendizado N\u00e3o Supervisionado\n        * Kmeans Clustering (Clusteriza\u00e7\u00e3o Kmeans)\n        * Avalia\u00e7\u00e3o de Clustering\n        * Estandardiza\u00e7\u00e3o\n        * Hierarquia\n        * T - Distributed Stochastic Neighbor Embedding (T - SNE)\n        * An\u00e1lise de Componentes Principais (PCA)\n    \n9.  Aprendizado Profundo (Deep Learning)\n\n10. Predi\u00e7\u00e3o de S\u00e9ries Temporais\n\n11. Deep Learning com Pytorch\n    * Artificial Neural Network (Redes Neurais Artificiais)\n    * Convolutional Neural Network (Redes Neurais Convulsionais) \n    * Recurrent Neural Network (Redes Neurais Recorrentes)","a43ff87c":"> 2. FERRAMENTA DE CI\u00caNCIA DE DADOS PYTHON\n\n**FUN\u00c7\u00c3O DEFINIDA PELO USU\u00c1RIO**\n\nO que precisamos saber sobre fun\u00e7\u00f5es:\n* docstrings: documenta\u00e7\u00e3o para fun\u00e7\u00f5es. \n    * exemplo: para f():\n    * \"\" \"Esta \u00e9 a documenta\u00e7\u00e3o para a documenta\u00e7\u00e3o da fun\u00e7\u00e3o f\" \"\"\n* tuble: sequ\u00eancia de objetos python imut\u00e1veis.\n    n\u00e3o \u00e9 poss\u00edvel modificar valores\n    tuble usa par\u00eanteses como tuble = (1,2,3)\n    descompacte o tuble em v\u00e1rias vari\u00e1veis como a, b, c = tuble","202b5f99":"> **ESCOPO**\n\nO que precisamos saber sobre o escopo:\n* global: corpo principal definido no script\n* local: definido em uma fun\u00e7\u00e3o\n* escopo incorporado: nomes no m\u00f3dulo de escopo incorporado predefinido, como print, len\n\nVamos fazer alguns exemplos b\u00e1sicos"}}