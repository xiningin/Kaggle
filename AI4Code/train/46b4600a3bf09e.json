{"cell_type":{"1918930c":"code","d211e919":"code","e350d8fc":"code","8cbb85a5":"code","2a033beb":"code","8227a4ad":"code","69e589e7":"code","58d8bd7b":"markdown","34c32816":"markdown","2aca2d4c":"markdown"},"source":{"1918930c":"import plotly.express as px\nimport pandas as pd \ndf = pd.read_csv(\"..\/input\/spam-url-prediction\/url_spam_classification.csv\")\ndf.head()","d211e919":"vc = df['is_spam'].value_counts().to_frame().reset_index().head(15)\nfig = px.bar(x=vc[\"is_spam\"][::-1], y=vc[\"index\"][::-1], orientation='h', color=vc['index'])\nfig.update_layout(title = \"Spam URL Distributions\", xaxis_title=\"Num URLs\", yaxis_title = \"\", width=600, plot_bgcolor=\"#fff\", showlegend = False)\nfig.show()","e350d8fc":"df['len_url'] = df['url'].apply(lambda x : len(x))\ndf['contains_subscribe'] = df['url'].apply(lambda x : 1 if \"subscribe\" in x else 0)\ndf['contains_hash'] = df['url'].apply(lambda x : 1 if \"#\" in x else 0)\ndf['num_digits'] = df['url'].apply(lambda x : len(\"\".join(_ for _ in x if _.isdigit())) )\ndf['non_https'] = df['url'].apply(lambda x : 1 if \"https\" in x else 0)\ndf['num_words'] = df['url'].apply(lambda x : len(x.split(\"\/\")))\ndf.head()","8cbb85a5":"fig = px.histogram(df, x=\"len_url\", color=\"is_spam\")\nfig.update_layout(title = \"URLs length by Spam \/ Non Spam\", xaxis_title=\"URL Length\", yaxis_title = \"\", plot_bgcolor=\"#fff\", showlegend = False)\nfig.show()","2a033beb":"fig = px.histogram(df, x=\"num_digits\", color=\"is_spam\")\nfig.update_layout(title = \"URLs Digit Counts by Spam \/ Non Spam\", xaxis_title=\"Number of Digits\", yaxis_title = \"\", plot_bgcolor=\"#fff\", showlegend = False)\nfig.show()","8227a4ad":"fig = px.histogram(df, x=\"num_words\", color=\"is_spam\")\nfig.update_layout(title = \"URLs Number of Words by Spam \/ Non Spam\", xaxis_title=\"Num Words\", yaxis_title = \"\", plot_bgcolor=\"#fff\", showlegend = False)\nfig.show()","69e589e7":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.pipeline import Pipeline\nimport matplotlib.pyplot as plt \nfrom sklearn.metrics import roc_auc_score, roc_curve\n\ntarget = 'is_spam'\nfeatures = [f for f in df.columns if f not in [\"url\", target]]\nX_train, X_test, y_train, y_test = train_test_split(df[features], df[target], test_size=0.2, random_state=0)\n\nsc = MinMaxScaler()\nclf = LogisticRegression()\npipe_lr = Pipeline([('scaler', sc), ('clf', clf)])\npipe_lr.fit(X_train, y_train)\n\ntest_probas = pipe_lr.predict_proba(X_test)[:,1]\n\nplt.figure(figsize=(10,8))\nfpr, tpr, tresholds = roc_curve(y_test, test_probas)\nplt.plot(fpr, tpr)\nplt.title('ROC Curve')\nplt.xlabel('FPR')\nplt.ylabel('TPR')\n\nprint('ROC-AUC-score: ', roc_auc_score(y_test, test_probas))","58d8bd7b":"Thanks for viewing, check the dataset here - https:\/\/www.kaggle.com\/shivamb\/spam-url-prediction","34c32816":"## Spam URL Classification: Getting Started\n\nView Dataset Here - https:\/\/www.kaggle.com\/shivamb\/spam-url-prediction","2aca2d4c":"Let's create a few features"}}