{"cell_type":{"f5fb0a6d":"code","2f071f1d":"code","e109701d":"code","5a677bb6":"code","5abbee2a":"code","16251f84":"code","f6f12762":"code","13041948":"code","618db4f3":"code","5dc298a4":"code","4ee4161a":"code","272cfce8":"code","425d9fc9":"code","2b471c72":"code","42293ffa":"code","17dbdba4":"code","6c0aa7b1":"code","461d3e65":"code","5be227de":"code","7dd2be6d":"code","82e7c276":"code","83e649ce":"code","6cd49aca":"code","7190e40b":"code","e634fdd1":"code","2556e951":"code","de6b6779":"code","628e9ad2":"code","bb746477":"code","7dedb6c7":"code","8da044fc":"markdown","ec7fcbaf":"markdown","edccb32a":"markdown","85cc9521":"markdown","c92cec21":"markdown","e82b7061":"markdown","b44a0347":"markdown","88d554f8":"markdown"},"source":{"f5fb0a6d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2f071f1d":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\n%matplotlib inline","e109701d":"# Set index_col=0 -> for using the first column as the index.\ndf = pd.read_csv('..\/input\/classifieddata\/Classified Data',index_col = 0)","5a677bb6":"df.head()","5abbee2a":"from sklearn.preprocessing import StandardScaler","16251f84":"scaler = StandardScaler()","f6f12762":"# TARGET CLASS -> Dependent Feature \n# standard scaler -> is used on independent feature.\nscaler.fit(df.drop('TARGET CLASS',axis=1))","13041948":"scaled_features = scaler.transform(df.drop('TARGET CLASS',axis=1))","618db4f3":"df1 = pd.DataFrame(scaled_features,columns=df.columns[:-1])","5dc298a4":"df1.head()","4ee4161a":"import seaborn as sns","272cfce8":"sns.pairplot(df,hue='TARGET CLASS')","425d9fc9":"from sklearn.model_selection import train_test_split","2b471c72":"X_train, X_test, y_train, y_test = train_test_split(scaled_features,df['TARGET CLASS'],test_size=0.30)","42293ffa":"from sklearn.neighbors import KNeighborsClassifier","17dbdba4":"knn = KNeighborsClassifier(n_neighbors=1)","6c0aa7b1":"knn.fit(X_train,y_train)","461d3e65":"pred = knn.predict(X_test)","5be227de":"from sklearn.metrics import classification_report,confusion_matrix","7dd2be6d":"print(confusion_matrix(y_test,pred))","82e7c276":"print(classification_report(y_test,pred))","83e649ce":"from sklearn.model_selection import cross_val_score","6cd49aca":"accuracy_rate = []\n\nfor i in range(1,40):\n    knn = KNeighborsClassifier(n_neighbors=i)\n    score=cross_val_score(knn,df1,df['TARGET CLASS'],cv=10)\n    accuracy_rate.append(score.mean())","7190e40b":"error_rate = []\n\nfor i in range(1,40):\n    knn = KNeighborsClassifier(n_neighbors=i)\n    score=cross_val_score(knn,df1,df['TARGET CLASS'],cv=10)\n    error_rate.append(1-score.mean())","e634fdd1":"error_rate = []\n\nfor i in range(1,40):\n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train,y_train)\n    pred_i = knn.predict(X_test)\n    error_rate.append(np.mean(pred_i != y_test))","2556e951":"plt.figure(figsize=(10,6))\nplt.plot(range(1,40),error_rate,color='blue', linestyle='dashed', marker='o',markerfacecolor='red', markersize=10)\nplt.title('Error Rate vs. K Value')\nplt.xlabel('K')\nplt.ylabel('Error Rate')","de6b6779":"plt.figure(figsize=(10,6))\nplt.plot(range(1,40),accuracy_rate,color='blue', linestyle='dashed', marker='o',\n         markerfacecolor='red', markersize=10)\nplt.title('Error Rate vs. K Value')\nplt.xlabel('K')\nplt.ylabel('Error Rate')","628e9ad2":"knn = KNeighborsClassifier(n_neighbors=1)","bb746477":"knn.fit(X_train,y_train)\npred = knn.predict(X_test)\nprint('WITH K=1')\nprint('\\n')\nprint(confusion_matrix(y_test,pred))\nprint('\\n')\nprint(classification_report(y_test,pred))","7dedb6c7":"knn = KNeighborsClassifier(n_neighbors=23)\n\nknn.fit(X_train,y_train)\npred = knn.predict(X_test)\n\nprint('WITH K=23')\nprint('\\n')\nprint(confusion_matrix(y_test,pred))\nprint('\\n')\nprint(classification_report(y_test,pred))","8da044fc":"# CHOOSING K-VALUE:","ec7fcbaf":"# IMPORT LIBRARIES:","edccb32a":"# TRAIN TEST SPLIT:","85cc9521":"# PREDICTION AND EVALUATIONS:","c92cec21":"# STANDARDIZE THE VARIABLE:","e82b7061":"# USING KNN:","b44a0347":"# PAIR PLOT:","88d554f8":"# GET DATA:"}}