{"cell_type":{"dde14977":"code","f974f771":"code","f1c8eaf6":"code","9dcff846":"code","9306e85e":"code","2f6cec10":"code","d96d3dfc":"code","06ac7cfb":"code","8d4a3d46":"code","60e5ba71":"code","71ed1444":"code","99275898":"code","08977849":"code","68a87ee9":"code","d10a6047":"code","fd7d4956":"code","9d6e5b77":"code","86098db4":"code","9e696ca5":"code","5b748780":"code","44bb8290":"code","d8b1e921":"code","f45b8095":"code","331a342b":"code","99d35ce6":"code","51c9ebc5":"code","d4cd2c26":"code","b4fa9bdc":"code","37d02da9":"code","0befbd6d":"code","4f7868a1":"code","c59acd89":"code","cfd20338":"code","055ec53d":"code","8642a5b9":"code","ce147740":"code","6257f449":"code","e6e71c41":"code","b19f8732":"code","7ccf9679":"code","69099afb":"code","9cc708bf":"markdown","5620166f":"markdown","7ef16898":"markdown","bd3bfb34":"markdown","d674dc3b":"markdown","d402b389":"markdown","e7bd6196":"markdown","d91d78ac":"markdown","4a610642":"markdown","674260eb":"markdown","da25a6dc":"markdown","152556ab":"markdown","f8d9de06":"markdown","266bc842":"markdown","7a31685a":"markdown","44e170af":"markdown","c6026f63":"markdown","93110afc":"markdown"},"source":{"dde14977":"import torch\nimport pandas as pd\nfrom tqdm.notebook import tqdm","f974f771":"df = pd.read_csv(\n    \"..\/input\/smile-twitter-emotion-dataset\/smile-annotations-final.csv\", \n    names = ['id', 'text', 'category']\n)\ndf.set_index('id', inplace = True)","f1c8eaf6":"df.head()","9dcff846":"df.category.value_counts()","9306e85e":"df = df[~df.category.str.contains('\\|')]","2f6cec10":"df = df[df.category != 'nocode']","d96d3dfc":"df.category.value_counts()","06ac7cfb":"possible_labels = df.category.unique()","8d4a3d46":"label_dict = {}\nfor index, possible_label in enumerate(possible_labels):\n    label_dict[possible_label] = index","60e5ba71":"df['label'] = df.category.replace(label_dict)","71ed1444":"df.head()","99275898":"from sklearn.model_selection import train_test_split","08977849":"X_train, X_val, y_train, y_val = train_test_split(\n    df.index.values, \n    df.label.values, \n    test_size = 0.15, \n    random_state = 17, \n    stratify = df.label.values\n)","68a87ee9":"df['data_type'] = ['not_set']*df.shape[0]","d10a6047":"df.loc[X_train, 'data_type'] = 'train'\ndf.loc[X_val, 'data_type'] = 'val'","fd7d4956":"df.groupby(['category', 'label', 'data_type']).count()","9d6e5b77":"from transformers import BertTokenizer\nfrom torch.utils.data import TensorDataset","86098db4":"tokenizer = BertTokenizer.from_pretrained(\n    'bert-base-uncased', \n    do_lower_case = True\n)","9e696ca5":"encoded_data_train = tokenizer.batch_encode_plus(\n    df[df.data_type == 'train'].text.values, \n    add_special_tokens = True, \n    return_attention_mask = True, \n    pad_to_max_length = True, \n    max_length = 256, \n    return_tensors = 'pt'\n)\n\nencoded_data_val = tokenizer.batch_encode_plus(\n    df[df.data_type == 'val'].text.values, \n    add_special_tokens = True, \n    return_attention_mask = True, \n    pad_to_max_length = True, \n    max_length = 256, \n    return_tensors = 'pt'\n)\n\n\ninput_ids_train = encoded_data_train['input_ids']\nattention_masks_train = encoded_data_train['attention_mask']\nlabels_train = torch.tensor(df[df.data_type == 'train'].label.values)\n\ninput_ids_val = encoded_data_val['input_ids']\nattention_masks_val = encoded_data_val['attention_mask']\nlabels_val = torch.tensor(df[df.data_type == 'val'].label.values)","5b748780":"dataset_train = TensorDataset(input_ids_train, attention_masks_train, labels_train)\ndataset_val = TensorDataset(input_ids_val, attention_masks_val, labels_val)","44bb8290":"len(dataset_train)","d8b1e921":"len(dataset_val)","f45b8095":"from transformers import BertForSequenceClassification","331a342b":"model = BertForSequenceClassification.from_pretrained(\n    \"bert-base-uncased\",\n    num_labels = len(label_dict),\n    output_attentions = False,\n    output_hidden_states = False\n)","99d35ce6":"from torch.utils.data import DataLoader, RandomSampler, SequentialSampler","51c9ebc5":"batch_size = 32\n\ndataloader_train = DataLoader(\n    dataset_train, \n    sampler = RandomSampler(dataset_train), \n    batch_size = batch_size\n)\n\ndataloader_validation = DataLoader(\n    dataset_val, \n    sampler = SequentialSampler(dataset_val), \n    batch_size = batch_size\n)","d4cd2c26":"from transformers import AdamW, get_linear_schedule_with_warmup","b4fa9bdc":"optimizer = AdamW(\n    model.parameters(),\n    lr = 1e-5, \n    eps = 1e-8\n)","37d02da9":"epochs = 3\n\nscheduler = get_linear_schedule_with_warmup(\n    optimizer, \n    num_warmup_steps = 0,\n    num_training_steps = len(dataloader_train)*epochs\n)","0befbd6d":"import numpy as np","4f7868a1":"from sklearn.metrics import f1_score","c59acd89":"def f1_score_func(preds, labels):\n    preds_flat = np.argmax(preds, axis = 1).flatten()\n    labels_flat = labels.flatten()\n    return f1_score(labels_flat, preds_flat, average = 'weighted')","cfd20338":"def accuracy_per_class(preds, labels):\n    label_dict_inverse = {v: k for k, v in label_dict.items()}\n    \n    preds_flat = np.argmax(preds, axis = 1).flatten()\n    labels_flat = labels.flatten()\n\n    for label in np.unique(labels_flat):\n        y_preds = preds_flat[labels_flat == label]\n        y_true = labels_flat[labels_flat == label]\n        print(f'Class: {label_dict_inverse[label]}')\n        print(f'Accuracy: {len(y_preds[y_preds == label])}\/{len(y_true)}\\n')","055ec53d":"import random\n\nseed_val = 17\nrandom.seed(seed_val)\nnp.random.seed(seed_val)\ntorch.manual_seed(seed_val)\ntorch.cuda.manual_seed_all(seed_val)","8642a5b9":"device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\nmodel.to(device)\n\nprint(device)","ce147740":"def evaluate(dataloader_val):\n\n    model.eval()\n    \n    loss_val_total = 0\n    predictions, true_vals = [], []\n    \n    for batch in dataloader_val:\n        \n        batch = tuple(b.to(device) for b in batch)\n        \n        inputs = {\n            'input_ids': batch[0],\n            'attention_mask': batch[1],\n            'labels': batch[2],\n        }\n\n        with torch.no_grad():        \n            outputs = model(**inputs)\n            \n        loss = outputs[0]\n        logits = outputs[1]\n        loss_val_total += loss.item()\n\n        logits = logits.detach().cpu().numpy()\n        label_ids = inputs['labels'].cpu().numpy()\n        predictions.append(logits)\n        true_vals.append(label_ids)\n    \n    loss_val_avg = loss_val_total\/len(dataloader_val) \n    \n    predictions = np.concatenate(predictions, axis = 0)\n    true_vals = np.concatenate(true_vals, axis = 0)\n            \n    return loss_val_avg, predictions, true_vals","6257f449":"for epoch in tqdm(range(1, epochs+1)):\n    \n    model.train()\n    \n    loss_train_total = 0\n\n    progress_bar = tqdm(dataloader_train, desc = 'Epoch {:1d}'.format(epoch), leave = False, disable = False)\n    for batch in progress_bar:\n\n        model.zero_grad()\n        \n        batch = tuple(b.to(device) for b in batch)\n        \n        inputs = {\n            'input_ids': batch[0],\n            'attention_mask': batch[1],\n            'labels': batch[2],\n        }       \n\n        outputs = model(**inputs)\n        \n        loss = outputs[0]\n        loss_train_total += loss.item()\n        loss.backward()\n\n        torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)\n\n        optimizer.step()\n        scheduler.step()\n        \n        progress_bar.set_postfix({'training_loss': '{:.3f}'.format(loss.item()\/len(batch))})\n         \n        \n    torch.save(model.state_dict(), f'finetuned_BERT_epoch_{epoch}.model')\n        \n    tqdm.write(f'\\nEpoch {epoch}')\n    \n    loss_train_avg = loss_train_total\/len(dataloader_train)            \n    tqdm.write(f'Training loss: {loss_train_avg}')\n    \n    val_loss, predictions, true_vals = evaluate(dataloader_validation)\n    val_f1 = f1_score_func(predictions, true_vals)\n    tqdm.write(f'Validation loss: {val_loss}')\n    tqdm.write(f'F1 Score (Weighted): {val_f1}')","e6e71c41":"model = BertForSequenceClassification.from_pretrained(\n    \"bert-base-uncased\",\n    num_labels = len(label_dict),\n    output_attentions = False,\n    output_hidden_states = False\n)\n\nmodel.to(device)","b19f8732":"model.load_state_dict(\n    torch.load(\n        \"..\/input\/finetuned-bert-demo\/finetuned_bert_epoch_1_gpu_trained.model\", \n        map_location = torch.device('cpu')\n    )\n)","7ccf9679":"_, predictions, true_vals = evaluate(dataloader_validation)","69099afb":"accuracy_per_class(predictions, true_vals)","9cc708bf":"## Exploratory Data Analysis and Preprocessing","5620166f":"## Setting Up Optimiser and Scheduler","7ef16898":"### Project Outline","bd3bfb34":"## Loading Tokenizer and Encoding our Data","d674dc3b":"Approach adapted from an older version of HuggingFace's `run_glue.py` script. Accessible [here](https:\/\/github.com\/huggingface\/transformers\/blob\/5bfcd0485ece086ebcbed2d008813037968a9e58\/examples\/run_glue.py#L128).","d402b389":"## Creating Data Loaders","e7bd6196":"# Sentiment Analysis with Deep Learning using BERT","d91d78ac":"### Prerequisites","4a610642":"Accuracy metric approach originally used in accuracy function in [this tutorial](https:\/\/mccormickml.com\/2019\/07\/22\/BERT-fine-tuning\/#41-bertforsequenceclassification).","674260eb":"## Defining our Performance Metrics","da25a6dc":"## Training\/Validation Split","152556ab":"- Intermediate-level knowledge of Python 3 (NumPy and Pandas preferably, but not required)\n- Exposure to PyTorch usage\n- Basic understanding of Deep Learning and Language Models (BERT specifically)","f8d9de06":"## Introduction","266bc842":"## Setting up BERT Pretrained Model","7a31685a":"## Creating our Training Loop","44e170af":"We will use the SMILE Twitter dataset.\n\n_Wang, Bo; Tsakalidis, Adam; Liakata, Maria; Zubiaga, Arkaitz; Procter, Rob; Jensen, Eric (2016): SMILE Twitter Emotion dataset. figshare. Dataset. https:\/\/doi.org\/10.6084\/m9.figshare.3187909.v2_","c6026f63":"### What is BERT\n\nBERT is a large-scale transformer-based Language Model that can be finetuned for a variety of tasks.\n\nFor more information, the original paper can be found [here](https:\/\/arxiv.org\/abs\/1810.04805). \n\n[HuggingFace documentation](https:\/\/huggingface.co\/transformers\/model_doc\/bert.html)\n\n[Bert documentation](https:\/\/characters.fandom.com\/wiki\/Bert_(Sesame_Street))","93110afc":"**Task 1**: Introduction (this section)\n\n**Task 2**: Exploratory Data Analysis and Preprocessing\n\n**Task 3**: Training\/Validation Split\n\n**Task 4**: Loading Tokenizer and Encoding our Data\n\n**Task 5**: Setting up BERT Pretrained Model\n\n**Task 6**: Creating Data Loaders\n\n**Task 7**: Setting Up Optimizer and Scheduler\n\n**Task 8**: Defining our Performance Metrics\n\n**Task 9**: Creating our Training Loop"}}