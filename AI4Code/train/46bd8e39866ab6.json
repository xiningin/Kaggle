{"cell_type":{"b675f474":"code","53afd073":"code","96f9b6e7":"code","76682406":"code","93fa905f":"code","8d2ccdf1":"code","845e4b8b":"code","ba239518":"code","67f51601":"code","aecde31c":"code","395351ea":"code","6ac80e87":"code","1b76f5e7":"code","e09ae50f":"code","4d76d2b3":"code","6bb0bba7":"code","79aabde2":"code","4938ed05":"code","a3a71d94":"code","134e7dc9":"code","03e9a0fc":"code","780cb186":"code","13c1ba1d":"code","58da2155":"code","97a73669":"code","9bab3405":"code","18a48017":"code","ac30c356":"code","b4a6aa1e":"code","32f26ead":"code","c04f6c68":"code","b52e8f30":"code","2ca02c19":"code","06b4aafe":"code","4db4b8ff":"code","e9846ba1":"code","fab45ddd":"code","f40a13d5":"code","5880a598":"code","194b51d2":"code","c3bb1976":"code","9bcade72":"code","5d020eec":"code","328a5ef4":"code","d254e6fa":"code","8f8406b5":"code","9d23904f":"code","59c50a65":"code","c29634ff":"code","dd854c55":"code","8c60b419":"code","3533d385":"code","8459c06a":"code","5af88685":"code","22a9e089":"code","3082cd0e":"code","82eb5dbb":"markdown","142f3775":"markdown","be3af526":"markdown","e7247433":"markdown","39a25746":"markdown","4ed36e2c":"markdown","984e02d9":"markdown","f9267819":"markdown","22d08557":"markdown","bdbc07b2":"markdown","7f2f0a45":"markdown","dcb071de":"markdown","bef1a29c":"markdown","e6ec19b7":"markdown","0d228256":"markdown","f45de346":"markdown","9c67e330":"markdown","e0c6660a":"markdown","06641184":"markdown","770f12df":"markdown","c0214493":"markdown","c0f23d6b":"markdown","7e152f73":"markdown","d8ef647a":"markdown","1b03caf9":"markdown","f9124165":"markdown","002e7cee":"markdown","4e894077":"markdown","4c4dc179":"markdown","3a2a1601":"markdown","f4cfa94b":"markdown","bd310582":"markdown"},"source":{"b675f474":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","53afd073":"# Importing some tools\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","96f9b6e7":"df_train = pd.read_csv('..\/input\/job-salary-prediction\/Train_rev1.zip', compression='zip', header=0, sep=',', quotechar='\"')","76682406":"df_train.head()","93fa905f":"df_train.tail()","8d2ccdf1":"df_train.describe()","845e4b8b":"df_train.info()","ba239518":"df_train.isna().sum()","67f51601":"for label,content in df_train.items():\n    if pd.api.types.is_string_dtype(content):\n        print(label)","aecde31c":"for label,content in df_train.items():\n    if pd.api.types.is_numeric_dtype(content):\n        print(label)","395351ea":"for label, content in df_train.items():\n    if pd.api.types.is_string_dtype(content):\n        df_train[label] = content.astype(\"category\").cat.as_ordered()","6ac80e87":"for label,content in df_train.items():\n    if not pd.api.types.is_numeric_dtype(content):\n        # Add binary column to indicate whether sample had missing value\n        df_train[label+\"is_missing\"]=pd.isnull(content)\n        # Turn categories into numbers and add+1\n        df_train[label] = pd.Categorical(content).codes+1","1b76f5e7":"df_train.isna().sum()","e09ae50f":"ms = df_train[\"SalaryNormalized\"][:10].plot.barh(figsize=(16,10))","4d76d2b3":"df_train[\"SalaryNormalized\"].hist()","6bb0bba7":"df_copy = df_train.copy()","79aabde2":"df_copy.head()","4938ed05":"df_copy.tail()","a3a71d94":"X = df_copy.drop(columns=[\"SalaryNormalized\"],axis=1)\ny = df_copy[\"SalaryNormalized\"]","134e7dc9":"from sklearn.model_selection import train_test_split","03e9a0fc":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.25,random_state=0)","780cb186":"from sklearn.ensemble import RandomForestRegressor","13c1ba1d":"model = RandomForestRegressor(n_jobs=-1)","58da2155":"model.fit(X_train,y_train)","97a73669":"from sklearn.metrics import mean_absolute_error","9bab3405":"y_pred = model.predict(X_test)","18a48017":"mae_rand_forest = mean_absolute_error(y_test,y_pred)","ac30c356":"mae_rand_forest","b4a6aa1e":"from sklearn.model_selection import RandomizedSearchCV","32f26ead":"np.random.seed(42)\ngrid = {\n    \"n_estimators\":np.arange(10,100,10),\n    \"max_depth\":[None,3,5,10],\n    \"min_samples_split\":np.arange(2,20,2),\n    \"min_samples_leaf\":np.arange(1,20,2),\n    \"max_features\": [0.5,1,\"sqrt\",\"auto\"],\n    \"max_samples\":[10000,12000,15000,20000]\n}","c04f6c68":"rs_model = RandomizedSearchCV(\nRandomForestRegressor(n_jobs=-1,\n                     random_state=42),\n                    param_distributions = grid,\n                     n_iter=5,\n                    cv=5,\n                    verbose=True)","b52e8f30":"rs_model.fit(X_train,y_train)","2ca02c19":"rs_model.best_params_","06b4aafe":"y_preds_rs = rs_model.predict(X_test)","4db4b8ff":"mae_hyp = mean_absolute_error(y_test,y_preds_rs)","e9846ba1":"mae_hyp,mae_rand_forest","fab45ddd":"df_test = pd.read_csv('..\/input\/job-salary-prediction\/Test_rev1.zip', compression='zip', header=0, sep=',', quotechar='\"')","f40a13d5":"df_test.isna().sum()","5880a598":"df_test.head()","194b51d2":"for label,content in df_test.items():\n    if pd.api.types.is_string_dtype(content):\n        print(label)","c3bb1976":"for label,content in df_test.items():\n    if pd.api.types.is_numeric_dtype(content):\n        print(label)","9bcade72":"for label, content in df_test.items():\n    if pd.api.types.is_string_dtype(content):\n        df_test[label] = content.astype(\"category\").cat.as_ordered()","5d020eec":"for label,content in df_test.items():\n    if not pd.api.types.is_numeric_dtype(content):\n        # Add binary column to indicate whether sample had missing value\n        df_test[label+\"is_missing\"]=pd.isnull(content)\n        # Turn categories into numbers and add+1\n        df_test[label] = pd.Categorical(content).codes+1","328a5ef4":"X_test.shape,y_test.shape  ","d254e6fa":"set(X_train.columns)-set(df_test.columns)","8f8406b5":"df_test[\"SalaryRaw\"] = False\ndf_test[\"SalaryRawis_missing\"] = False","9d23904f":"X_train.shape,df_test.shape","59c50a65":"y_preds = model.predict(df_test)","c29634ff":"df_preds = pd.DataFrame()","dd854c55":"df_preds[\"Id\"] = df_test[\"Id\"]\ndf_preds[\"SalaryNormalized\"] = y_preds","8c60b419":"df_preds.head()","3533d385":"df_preds.to_csv(\".\/\/Submission.csv\",index=False)","8459c06a":"model.feature_importances_","5af88685":"def plot_features(columns, importances, n=20):\n    df = (pd.DataFrame({\"features\": columns,\n                        \"feature_importances\": importances})\n          .sort_values(\"feature_importances\", ascending=False)\n          .reset_index(drop=True))\n    \n    # Plot the dataframe\n    fig, ax = plt.subplots()\n    ax.barh(df[\"features\"][:n], df[\"feature_importances\"][:20])\n    ax.set_ylabel(\"Features\")\n    ax.set_xlabel(\"Feature importance\")\n    ax.invert_yaxis()","22a9e089":"plot_features(X_train.columns,model.feature_importances_)","3082cd0e":"df_copy[\"SalaryRaw\"].value_counts()","82eb5dbb":"# Now Filling missing values","142f3775":"# This will turn all of the string value into category values","be3af526":"# Now build Model","e7247433":"# Helper function for plotting feature importance","39a25746":"# Now Check for numerical label","4ed36e2c":"# Now Fit RandomizedSearchCV Model","984e02d9":"# Now copy the train set dataset","f9267819":"# Make predictions","22d08557":"# Now Check Missing Values in Dataset","bdbc07b2":"# Now Make predictions","7f2f0a45":"# Now Reshape X_train & df_test","dcb071de":"# Now Fit The Model","bef1a29c":"# Format predictions into the same format Kaggle is after","e6ec19b7":"# Now Importing test data","0d228256":"# Now Check for string label ","f45de346":"# Evaluation of this model\nEvaluate model using mean absolute error","9c67e330":"# Now Data Visualization Part","e0c6660a":"# Now Filling missing values on test Dataset","06641184":"# This will turn all of the string value into category values","770f12df":"# Now Plot The Data","c0214493":"# Evaluation of the model\nEvaluate model using mean absolute error","c0f23d6b":"# Now Check for string label","7e152f73":"# Now Check missing values","d8ef647a":"# Load data","1b03caf9":"# Now Call Train Test Split","f9124165":"# Now Some Hyerparameter tuning with RandomizedSearchCV","002e7cee":"# Now Some EDA Part (Data Exploration)","4e894077":"# Now Check for numerical label","4c4dc179":"# Now Split the data into X and y","3a2a1601":"# Now Check for missing values on df_test dataset","f4cfa94b":"# Now Find feature importance of our best model","bd310582":"# NowChoose the best performance on the model"}}