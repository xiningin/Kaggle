{"cell_type":{"36b527f8":"code","c6e04619":"code","f98bd675":"code","ebbfc867":"code","a8dc0d60":"code","0835185f":"code","c3b2bc84":"code","0c5e08cd":"code","f78c73b3":"code","52b6f8a8":"code","76517d8b":"code","5bc4e469":"code","20b1220e":"code","67c59136":"code","c2b51d97":"code","93e717a2":"code","25786691":"code","6083ff13":"code","d58edff6":"code","295513f0":"code","494af82a":"code","52272507":"code","eaddc7ef":"code","e1b64568":"markdown","aed08017":"markdown","59f92b6e":"markdown","720b9ca6":"markdown","d4320b2f":"markdown","f1407a84":"markdown","34b5036b":"markdown","b4b4275f":"markdown","2a5ee211":"markdown","51e57d52":"markdown"},"source":{"36b527f8":"# \ub370\uc774\ud130 \ubd84\uc11d \ub77c\uc774\ube0c\ub7ec\ub9ac\nimport numpy as np\nimport pandas as pd\n\n# \uc2dc\uac01\ud654 \ub77c\uc774\ube0c\ub7ec\ub9ac\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n# \ubaa8\ub378\ub9c1 \ub77c\uc774\ube0c\ub7ec\ub9ac\nfrom sklearn.model_selection import KFold\nfrom lightgbm import LGBMClassifier\nfrom category_encoders.ordinal import OrdinalEncoder\n\n# \uae30\ud0c0 \ub77c\uc774\ube0c\ub7ec\ub9ac\nfrom tqdm import tqdm_notebook, tqdm\nfrom datetime import datetime\nimport warnings\nimport random\nimport gc\nimport os\n\nwarnings.filterwarnings(\"ignore\", category=RuntimeWarning)        \nsns.set_style(\"whitegrid\")\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","c6e04619":"train = pd.read_csv('\/kaggle\/input\/kakr-4th-competition\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/kakr-4th-competition\/test.csv')\nsample_submission = pd.read_csv('\/kaggle\/input\/kakr-4th-competition\/sample_submission.csv')","f98bd675":"plt.figure(figsize = (16,8))\nsns.countplot('age', hue = 'income', data = train)\nplt.show()","ebbfc867":"#\ud2b9\uc815 \uceec\ub7fc\uc5d0\uc11c \ud2b9\uc815\ud56d\ubaa9\uac12\uc758 \uc218\uc775\uc774 \ub192\uc740 \uc0ac\ub78c\uc758 \uc218 \/ \ud2b9\uc815\uceec\ub7fc\uc5d0\uc11c \ud2b9\uc815\ud56d\ubaa9\uac12 \ucd1d \uc0ac\ub78c\uc758 \uc218 => \uc218\uc785\uc774 \ub192\uc740 \uc0ac\ub78c\uc758 \ube44\uc728\ndef portion_income(column):\n    train[column] = train[column].astype('str')\n    col_lst = train[column].unique().tolist()\n    df = train[[column,'income']]\n\n    for x in tqdm_notebook(col_lst):\n        locals()[\"high\" + '_' + x] = df[(df[column] == x) & (df.income == \">50K\")]\n        locals()[\"low\" + '_' + x]  = df[(df[column] == x) & (df.income == \"<=50K\")]\n    col_name = []\n    col_name_value = []\n    for x in tqdm_notebook(col_lst):\n        col_name.append(x)\n        col_name_value.append(len(locals()[\"high\" + '_' + x]) \/ (len(locals()[\"high\" + '_' + x]) + len(locals()[\"low\" + '_' + x])))\n        #print(x , len(locals()[\"high\" + '_' + x]) \/ (len(locals()[\"high\" + '_' + x]) + len(locals()[\"low\" + '_' + x])))\n    data = pd.DataFrame({\"name\" : col_name, \"value\" : col_name_value }).sort_values(by = 'value', ascending = False)\n    data.columns = [column, '{}_income_up_portion'.format(column)]\n\n    return data\n\ndef preprocessing(train, test):\n    # drop columns \n    train.drop(['id'], axis=1, inplace=True)\n    test.drop(['id'], axis=1, inplace=True)\n    \n    # Work_Portion\n    workclass = portion_income('workclass')\n    pd.merge(train, workclass, on = 'workclass', how = 'left')\n    pd.merge(test, workclass, on = 'workclass', how = 'left')\n    \n    # y\ubcc0\uc218 \uc774\uc9c4\ud654\n    train['income'] = train['income'].apply(lambda x: 1 if x == '>50K' else 0)\n    \n    # y\ubcc0\uc218 \uc124\uc815\n    y = train['income']\n    X = train.drop(['income'], axis=1)\n    \n    print(X.shape, y.shape)\n    \n    return X, y, test","a8dc0d60":"X, y, test = preprocessing(train, test)","0835185f":"X = pd.get_dummies(X, drop_first = True, columns = ['education'])\ntest = pd.get_dummies(test, drop_first = True, columns = ['education'])\nprint(X.shape, test.shape)","c3b2bc84":"# \ub77c\ubca8 \uc778\ucf54\ub354 \uc0dd\uc131\nLE_encoder = OrdinalEncoder(list(X.columns))\n\n# train, test \ub370\uc774\ud130\uc5d0 \uc778\ucf54\ub529 \uc801\uc6a9\nX = LE_encoder.fit_transform(X, y)\ntest = LE_encoder.transform(test)","0c5e08cd":"NFOLDS = 5\nfolds = KFold(n_splits=NFOLDS)\n\ncolumns = X.columns\nsplits = folds.split(X, y)\ny_preds = np.zeros(test.shape[0])\n\nfeature_importances = pd.DataFrame()\nfeature_importances['feature'] = columns","f78c73b3":"model = LGBMClassifier(objective='binary', verbose=400, random_state=91)\n\n\nfor fold_n, (train_index, valid_index) in enumerate(splits):\n    print('Fold: ', fold_n+1)\n    X_train, X_valid = X.iloc[train_index], X.iloc[valid_index]\n    y_train, y_valid = y.iloc[train_index], y.iloc[valid_index]\n\n    evals = [(X_train, y_train), (X_valid, y_valid)]\n    model.fit(X_train, y_train, eval_metric='f1', eval_set=evals, verbose=True)\n    \n    feature_importances[f'fold_{fold_n + 1}'] = model.feature_importances_\n        \n    y_preds += model.predict(test).astype(int) \/ NFOLDS\n    \n    del X_train, X_valid, y_train, y_valid\n    gc.collect()","52b6f8a8":"sample_submission['prediction'] = y_preds\n\nfor ix, row in sample_submission.iterrows():\n    if row['prediction'] > 0.5:\n        sample_submission.loc[ix, 'prediction'] = 1\n    else:\n        sample_submission.loc[ix, 'prediction'] = 0\n\nsample_submission = sample_submission.astype({\"prediction\": int})\n#sample_submission.to_csv('.\/submission\/restored3.csv', index=False)","76517d8b":"train = pd.read_csv('\/kaggle\/input\/kakr-4th-competition\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/kakr-4th-competition\/test.csv')","5bc4e469":"sample_submission['prediction'].value_counts()","20b1220e":"test['income'] = sample_submission['prediction']","67c59136":"train.drop(['id'], axis = 1, inplace = True)\ntest.drop(['id'], axis = 1, inplace = True)","c2b51d97":"columns = train.columns.tolist()","93e717a2":"ans = pd.DataFrame()\nfor col in columns:\n    for value in train[col].value_counts().index.tolist():\n        if (train[train[col] == value]['income'].nunique() == 1) &\\\n        (train[train[col] == value]['income'].value_counts().values[0] >= 2):\n            count = train[train[col] == value]['income'].value_counts().values[0]\n            income = train[train[col] == value]['income'].value_counts().index[0]\n            ans = ans.append(pd.DataFrame({'column' : [col], 'value' : [value],\\\n                                          'income' : [income], 'count' : [count]}))          \nans = ans.reset_index(drop = True)\n# income \uc81c\uac70\nans.drop([3040, 3041], axis = 0, inplace = True)\n# income \ubcc0\uc218 \ub77c\ubca8\ub9c1\nans['income'] = ans['income'].apply(lambda x: 0 if x == '<=50K' else 1)\n\n","25786691":"ans['column'].value_counts()","6083ff13":"del_fnlwgt = ans[ans['column'] != 'fnlwgt']\ndel_fnlwgt['column'].value_counts()","d58edff6":"del_fnlwgt.sample(6)","295513f0":"print('<\ud6c4\ucc98\ub9ac \uc804>\\n', test['income'].value_counts())\nfor x in del_fnlwgt.iterrows():\n    col = x[1]['column']\n    value = x[1]['value'] \n    income = x[1]['income']\n    test.loc[test[col] == value, 'income'] = income\nprint('<\ud6c4\ucc98\ub9ac \ud6c4>\\n', test['income'].value_counts())","494af82a":"sample_submission['prediction'] = test['income']","52272507":"sample_submission['prediction'].value_counts()","eaddc7ef":"sample_submission.to_csv('submission.csv', index = False)","e1b64568":"# \ub178\ud2b8\ubd81","aed08017":"## \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30","59f92b6e":"# \ud6c4\ucc98\ub9ac \uc6a9 \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30","720b9ca6":"## \uc778\ucf54\ub529\n- \uceec\ub7fc\ub2f9 Class \uac1c\uc218 - 1 \uc635\uc158 \ucc3e\uae30","d4320b2f":"# \ud6c4\ucc98\ub9ac","f1407a84":"# \ud328\ud0a4\uc9c0 \ubd88\ub7ec\uc624\uae30","34b5036b":"## ans\uc5d0\uc11c fnlwgt\ub97c \uc81c\uac70\ud55c \uacbd\uc6b0","b4b4275f":"## income class\uac00 1\uac1c\uc774\uba74\uc11c row\uac00 2\uac1c \uc774\uc0c1\uc778 \uacbd\uc6b0","2a5ee211":"## \uc800\uc7a5","51e57d52":"## \uc804\ucc98\ub9ac"}}