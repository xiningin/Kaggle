{"cell_type":{"d511168a":"code","8b6b525e":"code","02f827a5":"code","72a4fd66":"code","5460804d":"code","37da88e5":"code","2b35df6d":"code","c2784177":"code","a07460f3":"code","72f67f70":"code","b8fdb149":"markdown","4f2d8d87":"markdown","ea0a02b7":"markdown","9884fc66":"markdown","1768cc72":"markdown","35b528f6":"markdown","58d4c8b4":"markdown","4093041e":"markdown","3755c078":"markdown","53c6302c":"markdown","7f515e03":"markdown","5bb308f9":"markdown","c293cb17":"markdown","449056ba":"markdown"},"source":{"d511168a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8b6b525e":"import librosa\nx , sr = librosa.load('\/kaggle\/input\/rfcx-species-audio-detection\/test\/f401344d9.flac')\nprint(type(x), type(sr))","02f827a5":"import IPython.display as ipd\nipd.Audio('\/kaggle\/input\/rfcx-species-audio-detection\/test\/f401344d9.flac')","72a4fd66":"#display waveform\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport librosa.display\nplt.figure(figsize=(14, 5))\nlibrosa.display.waveplot(x, sr=sr)","5460804d":"#display Spectrogram\nX = librosa.stft(x)\nXdb = librosa.amplitude_to_db(abs(X))\nplt.figure(figsize=(14, 5))\nlibrosa.display.specshow(Xdb, sr=sr, x_axis='time', y_axis='hz') \n#If to pring log of frequencies  \n#librosa.display.specshow(Xdb, sr=sr, x_axis='time', y_axis='log')\nplt.colorbar()","37da88e5":"x, sr = librosa.load(audio_path)\n#Plot the signal:\nplt.figure(figsize=(14, 5))\nlibrosa.display.waveplot(x, sr=sr)","2b35df6d":"# Zooming in\nn0 = 9000\nn1 = 9100\nplt.figure(figsize=(14, 5))\nplt.plot(x[n0:n1])\nplt.grid()","c2784177":"#spectral centroid -- centre of mass -- weighted mean of the frequencies present in the sound\nimport sklearn\nspectral_centroids = librosa.feature.spectral_centroid(x, sr=sr)[0]\nspectral_centroids.shape\n# Computing the time variable for visualization\nframes = range(len(spectral_centroids))\nt = librosa.frames_to_time(frames)\n# Normalising the spectral centroid for visualisation\ndef normalize(x, axis=0):\n    return sklearn.preprocessing.minmax_scale(x, axis=axis)\n#Plotting the Spectral Centroid along the waveform\nlibrosa.display.waveplot(x, sr=sr, alpha=0.4)\nplt.plot(t, normalize(spectral_centroids), color='r')","a07460f3":"spectral_rolloff = librosa.feature.spectral_rolloff(x, sr=sr)[0]\nlibrosa.display.waveplot(x, sr=sr, alpha=0.4)\nplt.plot(t, normalize(spectral_rolloff), color='r')","72f67f70":"mfccs = librosa.feature.mfcc(x, sr=sr)\nprint(mfccs.shape)\n#Displaying  the MFCCs:\nlibrosa.display.specshow(mfccs, sr=sr, x_axis='time')","b8fdb149":"### Spectogram","4f2d8d87":"### MFCC \u2014 Mel-Frequency Cepstral Coefficients\nThe mel frequency cepstral coefficients (MFCCs) of a signal are a small set of features (usually about 10\u201320) which concisely describe the overall shape of a spectral envelope.","ea0a02b7":"### Spectral Centroid\nIt indicates where the \u201dcentre of mass\u201d for a sound is located and is calculated as the weighted mean of the frequencies present in the sound.","9884fc66":"### Zooming in:\nHere we will zoom or print spectrum for 100 array columns only.","1768cc72":"### Zero Crossing Rate\nThe zero crossing rate is the rate of sign-changes along a signal, i.e., the rate at which the signal changes from positive to negative or back. This feature has been used heavily in both speech recognition and music information retrieval.","35b528f6":"> Extraction of features is a very important part in analyzing and finding relations between different things. The data provided of audio cannot be understood by the models directly to convert them into an understandable format feature extraction is used. It is a process that explains most of the data but in an understandable way. Feature extraction is required for classification, prediction and recommendation algorithms.","58d4c8b4":"### Loading an audio","4093041e":"### Spectral Rolloff\nSpectral rolloff is the frequency below which a specified percentage of the total spectral energy, e.g. 85%, lies.","3755c078":"**Now, we have extracted the features of music signals. We can use this feature extracted in various use cases such as classification into different genres.**","53c6302c":"### Playing sample audio","7f515e03":"<img src=\"https:\/\/miro.medium.com\/max\/759\/1*7sKM9aECRmuoqTadCYVw9A.jpeg\"\n     alt=\"Feature Extraction - Species Audio Detection\"\n     style=\"float: center;\" \/>","5bb308f9":"# Feature Extraction","c293cb17":"<center> <h1>Feature Extraction - Species Audio Detection<\/h1> <\/center>","449056ba":"To be Continued..!!"}}