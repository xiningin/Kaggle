{"cell_type":{"0cc31695":"code","80f9d9d7":"code","c6ded5ce":"code","cf17c784":"code","50c4dda0":"code","a1c811d6":"code","a115c15c":"code","a7e87175":"code","55937d89":"code","aea29ced":"code","14067196":"code","85e97926":"code","295571dd":"code","2cd0395c":"code","4ff68e48":"code","6c8b02da":"markdown","7b0ec256":"markdown","1ef00622":"markdown","2e3712fe":"markdown"},"source":{"0cc31695":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","80f9d9d7":"mushroom = pd.read_csv('\/kaggle\/input\/mushroom-classification\/mushrooms.csv')\nmushroom.head()","c6ded5ce":"mushroom.describe()","cf17c784":"#Information of mushroom dataset\nmushroom.info()\n#No missing data","50c4dda0":"print('The classes of the mushroom dataset are ', np.unique(mushroom['class']))","a1c811d6":"print('The shape of the mushroom dataset is', mushroom.shape)","a115c15c":"def mushroom_graph(name, ax):\n    mushroom[name].value_counts().plot(kind='bar', ax=ax, \n                                              color='coral')\n    ax.set_alpha(0.8)\n    ax.set_title(name.replace('-',' '),fontsize=15)\n\n    # create a list to collect the plt.patches data\n    totals = []\n\n    for i in ax.patches:\n        totals.append(i.get_height())\n    \n    total = sum(totals)\n\n    for i in ax.patches:\n    # get_x pulls left or right; get_height pushes up or down\n        ax.text(i.get_x()-.03, i.get_height()+20, \\\n                str(round((i.get_height()\/total)*100, 2))+'%', fontsize=10,\n                    color='dimgrey')\n    \n\nfig1, ax1 = plt.subplots(4,2,figsize=(17,16))\nmushroom_graph('cap-color', ax1[0,0])\nmushroom_graph('cap-shape', ax1[0,1])\nmushroom_graph('stalk-color-below-ring', ax1[1,0])\nmushroom_graph('odor', ax1[1,1])\nmushroom_graph('stalk-surface-below-ring', ax1[2,0])\nmushroom_graph('gill-size', ax1[2,1])\nmushroom_graph('population', ax1[3,0])\nmushroom_graph('veil-color', ax1[3,1])","a7e87175":"#create X and y variable\n\ny = mushroom['class']\nX = mushroom.drop('class', axis=1)","55937d89":"#Using get_dummies method, transform the X varible\nX = pd.get_dummies(X)","aea29ced":"from sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\ny = le.fit_transform(y)","14067196":"#Split the dataset into train and test set\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state=1, stratify = y)\n","85e97926":"X_train.shape, X_test.shape, y_train.shape, y_test.shape ","295571dd":"from sklearn.linear_model import LogisticRegression\n\nlr = LogisticRegression(random_state=1)\nlr.fit(X_train, y_train)","2cd0395c":"y_pred = lr.predict(X_test)","4ff68e48":"from sklearn.metrics import accuracy_score\n\nprint('Accuracy score is %.2f' % accuracy_score(y_test, y_pred))","6c8b02da":"### Logistic Regression","7b0ec256":"The 'e' is for edible.\nThe 'p' is for posionous","1ef00622":"### Visualization","2e3712fe":"### Modelling."}}