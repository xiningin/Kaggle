{"cell_type":{"36d670f7":"code","f922d156":"code","e2ff299e":"code","2a510a8c":"code","989f5b28":"code","fe9477c1":"code","b79919e9":"code","a1f8327d":"code","bf8aaeaa":"code","71f7af28":"code","30f34210":"code","2aca57b0":"code","46efc002":"code","74311f5e":"code","90cffabd":"code","71e7769d":"code","8603cb74":"code","6f4b1124":"code","31563058":"code","3e4c9596":"code","d5b5260f":"code","94413873":"code","12a5fde4":"code","1d5b7fe3":"code","c120aa40":"code","9d5527c4":"code","5e11c269":"code","1a462e50":"code","66554bcc":"code","505d40de":"code","21bb651a":"code","e4e7cab2":"code","2d4aed77":"code","c28babe4":"code","b3a6185c":"code","0d705057":"code","35ddddfd":"code","dfe97379":"code","dcb7b3f8":"code","4693bf73":"code","61fba60b":"code","acd371be":"code","79aa756f":"code","5f85e245":"code","9192e14e":"code","e4300dae":"code","bdc9cc04":"code","5e3e8b84":"markdown","704fbbcf":"markdown","bb31a891":"markdown","cddb3ae0":"markdown","6a309031":"markdown","a6a849fc":"markdown"},"source":{"36d670f7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f922d156":"import seaborn as sns\nfrom sklearn.metrics import mean_squared_error,classification_report,f1_score,confusion_matrix,accuracy_score\n\nimport xgboost as xgb\nimport lightgbm as lgb\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nfrom sklearn.model_selection import StratifiedKFold, cross_validate, learning_curve,train_test_split,GridSearchCV, cross_val_score, RandomizedSearchCV, RepeatedStratifiedKFold\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.neighbors import LocalOutlierFactor, KNeighborsClassifier\n\nfrom sklearn.preprocessing import LabelEncoder\n\nfrom warnings import filterwarnings\nfilterwarnings(\"ignore\")","e2ff299e":"df = pd.read_csv(\"..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv\")\ndf.head()","2a510a8c":"df.shape","989f5b28":"df.isnull().sum()","fe9477c1":"df.info()","b79919e9":"df.describe().T","a1f8327d":"df.drop(\"id\",axis=1,inplace=True)\ndf.head(2)","bf8aaeaa":"df.gender.value_counts()","71f7af28":"df.drop(df[df[\"gender\"]==\"Other\"].index,axis=0,inplace=True)","30f34210":"df.gender.value_counts()","2aca57b0":"sns.distplot(df.age);","46efc002":"sns.distplot(df.bmi);","74311f5e":"sns.distplot(df.avg_glucose_level);","90cffabd":"df.head()","71e7769d":"df.hypertension.value_counts()","8603cb74":"df.heart_disease.value_counts()","6f4b1124":"df.ever_married.value_counts()","31563058":"df.work_type.value_counts()","3e4c9596":"df.Residence_type.value_counts()","d5b5260f":"df.smoking_status.value_counts()","94413873":"df.isnull().sum()","12a5fde4":"df.stroke.value_counts()","1d5b7fe3":"df.bmi.mean()","c120aa40":"df.bmi.fillna(df.bmi.mean(),inplace=True)","9d5527c4":"df.isnull().sum()","5e11c269":"df.head(2)","1a462e50":"le = LabelEncoder()\ndf[\"gender\"] = le.fit_transform(df[\"gender\"])\ndf[\"ever_married\"] = le.fit_transform(df[\"ever_married\"])\ndf[\"work_type\"] = le.fit_transform(df[\"work_type\"])\ndf[\"Residence_type\"] = le.fit_transform(df[\"Residence_type\"])\ndf[\"smoking_status\"] = le.fit_transform(df[\"smoking_status\"])","66554bcc":"df.head()","505d40de":"log_model = LogisticRegression()\n\ngbc_model = GradientBoostingClassifier(random_state=14)\n\nrfc_model = RandomForestClassifier(criterion='gini', n_estimators=999,max_depth=4, random_state=14)\n\nlgb_model = lgb.LGBMClassifier(num_iterations=550, learning_rate=0.01055,max_depth=3, random_state=14)\n\nxgb_model = xgb.XGBClassifier(objective=\"binary:hinge\")\n\ngnb_model = GaussianNB()\n\nmlpc_model = MLPClassifier(random_state=14)\n\nsvc_model = SVC(probability=True)\n\nknn_model = KNeighborsClassifier(n_neighbors=19,leaf_size=20)","21bb651a":"models = [log_model, gbc_model, rfc_model, lgb_model, xgb_model, gnb_model, mlpc_model, svc_model,knn_model]\nmodel_names = [\"LogisticRegression\",\"GradientBoostingClassifier\",\"RandomForestClassifier\",\"LGBMClassifier\",\"XGBClassifier\",\"GaussianNB\",\"MLPClassifier\",\"SVC\",\"KNeighborsClassifier\"]\n\nx = df.drop('stroke', axis=1)\ny = df['stroke']\n\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.20,random_state=42)","e4e7cab2":"print(\"TRAIN SCORE\\n\\n\")\nprint(\"-----------------------------------------\")\nfor i in range(len(models)):\n    model = models[i].fit(x_train,y_train)\n    print(model_names[i],\"Score = %\",model.score(x_train,y_train)*100)","2d4aed77":"print(\"TEST SCORE\\n\\n\")\nprint(\"-----------------------------------------\")\nfor i in range(len(models)):\n    model = models[i].fit(x_train,y_train)\n    print(model_names[i],\"Score = %\",model.score(x_test,y_test)*100)","c28babe4":"light_params = {\"n_estimators\":[100,500,1000,2000],\n         \"subsample\":[0.6,0.8,1.0],\n         \"max_depth\":[3,4,5,6,7],\n         \"learning_rate\":[0.1,0.01,0.02,0.05],\n         \"min_child_samples\":[2,5,10,20]}","b3a6185c":"random_search = RandomizedSearchCV(lgb_model, light_params, cv=10, random_state=1, n_jobs=-1, verbose=2 ).fit(x_train,y_train)\nrandom_search.best_params_","0d705057":"light_tuned = lgb.LGBMClassifier(n_estimators = 100,\n                         subsample= 0.8, \n                         max_depth=3 , \n                         learning_rate=0.01, \n                         min_child_samples= 2).fit(x_train,y_train)\nprint(\"LGBMClassifier\",\"Score = %\",light_tuned.score(x_test,y_test))\nprint(\"LGBMClassifier\",\"F1 Score = %\",f1_score(y_test,light_tuned.predict(x_test))*100)","35ddddfd":"knn_params = {\"n_neighbors\":np.arange(1,50),\n         \"leaf_size\":[20,30,50,100,1000,2000]}","dfe97379":"random_search = RandomizedSearchCV(knn_model, knn_params, cv=10, random_state=1, n_jobs=-1, verbose=2 ).fit(x_train,y_train)\nrandom_search.best_params_","dcb7b3f8":"knn_tuned = KNeighborsClassifier(n_neighbors = 24, \n                                 leaf_size= 2000).fit(x_train,y_train)\nprint(\"KNeighborsClassifier\",\"Score = %\",knn_tuned.score(x_test,y_test))\nprint(\"KNeighborsClassifier\",\"F1 Score = %\",f1_score(y_test,knn_tuned.predict(x_test))*100)","4693bf73":"mlpc_params = {\"alpha\":[0.1,0.2,0.02,0.01,0.005,0.0001,0.00001],\n         \"hidden_layer_sizes\":[(10,20,30),(10,10,10),(100,100,100),(100,100),(3,5),(5,3),(10,10)],\n         \"solver\":[\"lbfgs\",\"sgd\",\"adam\"],\n         \"activation\":[\"relu\",\"logistic\"]}","61fba60b":"random_search = RandomizedSearchCV(mlpc_model, mlpc_params, cv=10, random_state=1, n_jobs=-1, verbose=2 ).fit(x_train,y_train)\nrandom_search.best_params_","acd371be":"mlpc_tuned = MLPClassifier(alpha = 0.0001, \n                          hidden_layer_sizes= (5,3),\n                          solver=\"sgd\" ,\n                          activation= \"logistic\").fit(x_train,y_train)\nprint(\"MLPClassifier\",\"Score = %\",mlpc_tuned.score(x_test,y_test))\nprint(\"MLPClassifier\",\"F1 Score = %\",f1_score(y_test,mlpc_tuned.predict(x_test))*100)","79aa756f":"r_forest_params = {\"max_depth\":[2,3,5,8,10,20],\n         \"max_features\":[2,5,8],\n         \"n_estimators\":[10,100,500,1000,2000],\n         \"min_samples_split\":[2,5,10,20]}","5f85e245":"random_search = RandomizedSearchCV(rfc_model, r_forest_params, cv=10, random_state=1, n_jobs=-1, verbose=2 ).fit(x_train,y_train)\nrandom_search.best_params_","9192e14e":"rfc_tuned = RandomForestClassifier(n_estimators = 100, \n                          max_depth= 20,\n                          max_features= 2,\n                          min_samples_split= 2).fit(x_train,y_train)\nprint(\"RandomForestClassifier\",\"Score = %\",rfc_tuned.score(x_test,y_test))\nprint(\"RandomForestClassifier\",\"F1 Score = %\",f1_score(y_test,rfc_tuned.predict(x_test))*100)","e4300dae":"print(\"Tuned Scores\\n\\n\")\nprint(\"-----------------------------------------\")\nprint(\"LGBMClassifier\",\"Score = %\",light_tuned.score(x_test,y_test))\nprint(\"KNeighborsClassifier\",\"Score = %\",knn_tuned.score(x_test,y_test))\nprint(\"MLPClassifier\",\"Score = %\",mlpc_tuned.score(x_test,y_test))\nprint(\"RandomForestClassifier\",\"Score = %\",rfc_tuned.score(x_test,y_test))","bdc9cc04":"print(\"Tuned F1 Scores\\n\\n\")\nprint(\"-----------------------------------------\")\nprint(\"LGBMClassifier\",\"F1 Score = %\",f1_score(y_test,light_tuned.predict(x_test))*100)\nprint(\"KNeighborsClassifier\",\"F1 Score = %\",f1_score(y_test,knn_tuned.predict(x_test))*100)\nprint(\"MLPClassifier\",\"F1 Score = %\",f1_score(y_test,mlpc_tuned.predict(x_test))*100)\nprint(\"RandomForestClassifier\",\"F1 Score = %\",f1_score(y_test,rfc_tuned.predict(x_test))*100)","5e3e8b84":"# LGBMClassifier","704fbbcf":"# MLPClassifier","bb31a891":"# KNeighborsClassifier","cddb3ae0":"# RandomForestClassifier","6a309031":"## --------------------------------------------------------------------------------------------------------------------------------","a6a849fc":"# Model"}}