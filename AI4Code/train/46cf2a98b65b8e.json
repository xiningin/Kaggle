{"cell_type":{"b412f5b7":"code","1f12692b":"code","900ab234":"code","362ce84c":"code","5c3118ce":"code","c1efe8bb":"code","e5dcaacd":"code","01a30578":"code","687e19d0":"code","23630c72":"code","73ee0fa6":"code","e425102b":"code","8792ff50":"code","259e99d6":"code","aa040b9e":"code","1ebcdf14":"code","8a96c2c2":"code","203eea9c":"code","3668ea72":"code","705c8086":"code","ba740124":"code","e28ff214":"code","f6eeef0e":"code","e48b58d7":"code","cad4c513":"code","57b3f14b":"code","718489cc":"code","c3c36d05":"code","4c7a1c8f":"markdown","362c50b7":"markdown","8d8e6aa0":"markdown","ebe74985":"markdown","1c507433":"markdown","559480c1":"markdown","17c5856f":"markdown","e0879f5e":"markdown","d0dfcc7e":"markdown","da899e75":"markdown","4164eade":"markdown","5c0f2abf":"markdown","e81a8d69":"markdown","9e986ba6":"markdown"},"source":{"b412f5b7":"import pandas as pd\nimport math\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import Imputer\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import precision_score","1f12692b":"train_data_path = '..\/input\/train.csv'\ntest_data_path = '..\/input\/test.csv'\n\ntrain = pd.read_csv(train_data_path)\ntest = pd.read_csv(test_data_path)","900ab234":"train.isnull().any()","362ce84c":"def fill_age(data_frame, class_group):\n    '''\n        Update the age column with then mean age by column group.\n    '''\n    df_grouped_pclass = data_frame.groupby(by=class_group);\n    mean_age_by_pclass = df_grouped_pclass.Age.mean()\n    \n    df_out_1 = data_frame.copy();\n\n    for index in mean_age_by_pclass.index:    \n        df_out_1 = data_frame[data_frame.Age.isnull() & (data_frame.Pclass==index)];\n        df_out_1 = df_out_1.Age.fillna(math.floor(mean_age_by_pclass.iloc[index-1]));\n        data_frame.update(df_out_1);   \n","5c3118ce":"fill_age(train, 'Pclass');\nprint('Row number of null: {}'.format(train.Age.isnull().sum()));","c1efe8bb":"train[train['Fare']==0].count().any()","e5dcaacd":"def update_fare_column(data_frame):\n    df_grouped_pclass = data_frame.groupby(by='Pclass');\n    mean_fare_by_pclass = df_grouped_pclass.Fare.mean();\n    df_out_1 = data_frame.copy();\n\n    for index in mean_fare_by_pclass.index:    \n        df_out_1 = data_frame[((data_frame.Fare==0) | data_frame.Fare.isnull()) & (data_frame.Pclass==index)];\n        df_out_1.Fare.replace(to_replace=[0, np.nan], value=math.floor(mean_fare_by_pclass.iloc[int(index)-1]), inplace=True);    \n        data_frame.update(df_out_1);","01a30578":"update_fare_column(train)\ntrain[train['Fare']==0].count().any()","687e19d0":"import operator\nimport random\n\n\ndef GetIntervals(data_frame):\n    \"\"\"\n     - Return a dictionary of dictionary (intervals).\n     \n     - The key to the most external dictionary is the passenger's class of boarding;\n       its value is a dictionary where the key is the place of embarkation and the \n       value is the percentage of shipments made in this place.\n     \n     Ex: {1: {'Q': 0.0022497187851518562, 'C': 0.09561304836895389, 'S': 0.14285714285714285} }\n    \"\"\"\n    group_class_embark = data_frame.groupby(by=['Pclass', 'Embarked']);\n    keys_class_embark = group_class_embark.groups.keys();\n    total_embarked = data_frame.Embarked.count();\n    \n    intervals = {}\n    clean_sub_intervals = {}    \n\n    for k in keys_class_embark:\n        if np.nan not in k:        \n            if k[0] not in intervals:        \n                intervals[k[0]] = {}\n\n            intervals[k[0]][k[1]] = \\\n                group_class_embark.get_group(k).Embarked.count() \/ total_embarked;\n\n    for k, v in intervals.items():\n        intervals[k] = dict(sorted(v.items(), key=operator.itemgetter(1)));\n    \n    return intervals\n\n\ndef GetEmbarked(intervals, Pclass):\n    \"\"\"\n     - Intervals is a dictionary made by: GetIntervals()\n     - Pclass is a shipping class\n     \n     - Given the dictionary of shipment probabilities per class and class, \n       a value between 0 and 1 is randomly generated to select the place of shipment of the class.\n     \n     - Return: shipping place\n    \"\"\"    \n    n = random.random();\n    sub_intervals = intervals[Pclass];\n    Embarked = list(sub_intervals.keys())[-1];\n        \n    for k, v in sub_intervals.items():        \n        if n <= v:            \n            Embarked = k\n            break\n        \n    return Embarked\n\ndef UpdateNullEmbarked(data_frame):\n    \"\"\"\n    - Returns dataframe where the records that have the null shipment column are \n      updated according to probability of shipment per class;\n    \"\"\"\n    null_embarked = data_frame[data_frame.Embarked.isnull()];\n\n    for index, row in null_embarked.iterrows():        \n        null_embarked.at[index, 'Embarked'] = GetEmbarked(GetIntervals(data_frame), row.Pclass);\n\n    return null_embarked","23630c72":"train.update(UpdateNullEmbarked(train))\nprint('Null embarked: ', train.Embarked.isnull().sum())","73ee0fa6":"train.info()","e425102b":"def update_column_sex(data_frame):\n    data_frame.update(train.Sex.apply(lambda x: 1 if x == 'male' else 2));    ","8792ff50":"def update_survived_column_type(data_frame):\n    data_frame.Survived = data_frame.Survived.astype(int);","259e99d6":"def update_age_column_type(data_frame):\n    data_frame.Age = data_frame.Age.astype(int);","aa040b9e":"def update_columns_type(data_frame):    \n    data_frame.Pclass = data_frame.Pclass.astype(int);\n    data_frame.Sex = data_frame.Sex.astype(int);    \n    data_frame.update(data_frame.Embarked.apply(lambda x: ord(x)));\n    data_frame.Embarked = data_frame.Embarked.astype(int);\n    ","1ebcdf14":"update_column_sex(train);\nupdate_survived_column_type(train);\nupdate_age_column_type(train)\nupdate_columns_type(train);\ntrain.info()\ntrain.head()","8a96c2c2":"def getDictSuvived(dataframe):\n    \"\"\"\n    - Returns a dictionary where each key is the index of each row of the dataframe\n      passed by parameter and the value is the value of each column        \n    \"\"\"\n    dict_dataframe = {}    \n        \n    for x, y in dataframe.items():\n        dict_dataframe[x] = y;\n        \n    return dict_dataframe","203eea9c":"%matplotlib inline\nimport matplotlib.pyplot as plt\n\n# Survived by class\ndict_survived = getDictSuvived(train[train.Survived == 1].groupby(by='Pclass').count()['PassengerId']);\ndict_not_survived = getDictSuvived(train[train.Survived == 0].groupby(by='Pclass').count()['PassengerId']);\n\nplt.bar(list(dict_survived.keys()), list(dict_survived.values()), .8, alpha=0.5, color='g', label='Survived');\nplt.bar(list(dict_not_survived.keys()), list(dict_not_survived.values()), .5, alpha=0.5, color='b', label='Not survived');\nplt.xticks(np.arange(3) + 1, ('1\u00ba Class', '2\u00ba Class', '3\u00ba Class'));\nplt.legend();","3668ea72":"SibSp_dict_survived = getDictSuvived(train[train.Survived == 1].groupby(by='Pclass').sum()['SibSp']);\nSibSp_dict_not_survived = getDictSuvived(train[train.Survived == 0].groupby(by='Pclass').sum()['SibSp']);\n\nplt.bar(list(SibSp_dict_survived.keys()), list(SibSp_dict_survived.values()), .8, alpha=0.5, color='g', label='Survived');\nplt.bar(list(SibSp_dict_not_survived.keys()), list(SibSp_dict_not_survived.values()), .5, alpha=0.5, color='b', label='Not survived');\nplt.xticks(np.arange(3) + 1, ('1\u00ba C. Siblings', '2\u00ba C. Siblings', '3\u00ba C. Siblings'));\nplt.legend();","705c8086":"parch_dict_survived = getDictSuvived(train[train.Survived == 1].groupby(by='Pclass').sum()['Parch']);\nparch_dict_not_survived = getDictSuvived(train[train.Survived == 0].groupby(by='Pclass').sum()['Parch']);\n\nplt.bar(list(parch_dict_survived.keys()), list(parch_dict_survived.values()), .8, alpha=0.5, color='g', label='Survived');\nplt.bar(list(parch_dict_not_survived.keys()), list(parch_dict_not_survived.values()), .5, alpha=0.5, color='b', label='Not survived');\nplt.xticks(np.arange(3) + 1, ('1\u00ba C. Parents', '2\u00ba C. Parents', '3\u00ba C. Parents'));\nplt.legend();","ba740124":"survided_male = train[(train.Survived == 1) & (train.Sex == 1)]\nsurvided_female = train[(train.Survived == 1) & (train.Sex == 2)]\n\nmale_dict_survived = getDictSuvived(survided_male.groupby(by='Pclass').count()['Sex']);\nfemale_dict_survived = getDictSuvived(survided_female.groupby(by='Pclass').count()['Sex']);\n\nplt.bar(list(male_dict_survived.keys()), list(male_dict_survived.values()), .8, alpha=0.5, color='g', label='Male survived');\nplt.bar(list(female_dict_survived.keys()), list(female_dict_survived.values()), .5, alpha=0.5, color='b', label='Female survived');\nplt.xticks(np.arange(3) + 1, ('1\u00ba Class', '2\u00ba Class', '3\u00ba Class'));\nplt.legend();","e28ff214":"train.head()","f6eeef0e":"random_seed = 10\ntarget = 'Survived'\npredictors = ['Pclass', 'Sex', 'Fare', 'Embarked']\n\nY = train[target]\nX = train[predictors]\nX_test = test[predictors]\nId_test = test['PassengerId']\n\nX_train, X_val, y_train, y_val = train_test_split(X, Y, random_state=random_seed)","e48b58d7":"def get_cross_val_score(max_leaf_nodes, train_X, val_X, train_y, val_y):\n    model = RandomForestClassifier(max_leaf_nodes=max_leaf_nodes, random_state=2)    \n    return cross_val_score(model ,train_X, train_y, cv=5).mean()   \n","cad4c513":"candidates_max_leaf_nodes = list(range(2,600, 10))\nmax_leaf_nodes_value_predicted = []\n\nfor max_leaf_nodes in candidates_max_leaf_nodes:\n    my_mae = get_cross_val_score(max_leaf_nodes, X_train, X_val, y_train, y_val)\n    max_leaf_nodes_value_predicted.append(my_mae)    \n    \nmax_leaf_nodes_index = max_leaf_nodes_value_predicted.index(max(max_leaf_nodes_value_predicted));\nmax_leaf_nodes = candidates_max_leaf_nodes[max_leaf_nodes_index];\n\nprint('Best max leaf nodes: {}'.format(max_leaf_nodes));\nprint('Score: {}'.format(max(max_leaf_nodes_value_predicted)));\nprint('');","57b3f14b":"def training_accuracy(max_leaf_nodes, train_X, val_X, train_y, val_y):    \n    model = RandomForestClassifier(max_leaf_nodes=max_leaf_nodes, random_state=2)\n    model.fit(train_X, train_y)    \n    return [model, model.score(train_X, train_y)]\n\nmodel, accuracy = training_accuracy(max_leaf_nodes, X_train, X_val, y_train, y_val)\nprint(\"Training accuracy {:.5f}\".format(accuracy));\n\ndef test_accuracy(model, val_X, val_y):\n    predictions = model.predict(val_X)    \n    return [predictions, precision_score(val_y, predictions)]   \n\npredictions, accuracy = test_accuracy(model, X_val, y_val);\nprint(\"Test accuracy {:.5f}\".format(accuracy));","718489cc":"update_fare_column(X_test);\nX_test.update(UpdateNullEmbarked(X_test))\nupdate_column_sex(X_test);\nupdate_columns_type(X_test);","c3c36d05":"predictions = model.predict(X_test);\ndt = pd.DataFrame({\"PassengerId\": Id_test, \"Survived\": predictions})\ndt.to_csv(\"submit.csv\", index = False)","4c7a1c8f":"* **The above histogram gives an overview of the ratio of deaths and survivors per shipment class.**","362c50b7":"### Update emabarked values from class type","8d8e6aa0":"### Create train and test data","ebe74985":"### Update columns type ","1c507433":"### The graphs below reinforce the importance of social class for survival in this event. Since it is easily visible the higher number of deaths in the third class regardless of the presence of relatives (parents, children, spouses).","559480c1":"### Accuracy","17c5856f":"### Load data","e0879f5e":"### Update values of Fare column with mean value by embarked class","d0dfcc7e":"* ### Update the age column with the mean age by column group.","da899e75":"### Data cleaning ","4164eade":"### The sex of the crew member was shown to be a fundamental factor for survival in all classes of boarding.","5c0f2abf":"### Graphical analysis","e81a8d69":"### Prediction\n\n\n","9e986ba6":"### Max leaf nodes selecting"}}