{"cell_type":{"ea1f5a45":"code","1b3919d1":"code","55764f94":"code","6a02f205":"code","953d0de8":"code","a48ffaa1":"code","fc0eab38":"code","d8319c1f":"code","01994746":"code","df29afe2":"code","17b36266":"code","9d816753":"code","d4f33af9":"code","950f8f11":"code","5e78223a":"code","c9812982":"code","0b0628fe":"code","25f832bf":"code","d1cd59f0":"code","0d1f9c6d":"code","b440bf1b":"code","d7d0a91f":"code","70ca9c56":"code","80e9393a":"code","4f5304bb":"code","5b235133":"code","f814abfc":"code","4e5a3f4f":"code","c7088b47":"code","d25d0e92":"code","587556c0":"code","29d174ab":"code","47374e34":"code","4bc540c3":"code","e671c5f7":"code","66cb82fd":"code","69ffab40":"code","e5587175":"code","1ed816f8":"code","fb5ec2f6":"code","3bb992ce":"code","7bccdd91":"code","4c18e2f4":"code","02b12310":"code","7de888d6":"code","716cc8c8":"code","8203a48d":"code","72860978":"code","025a77b9":"code","eacbcf74":"code","ccf48225":"code","9ae52074":"code","285998c3":"code","01cfc59a":"code","e644961f":"markdown","e64f6103":"markdown","e5c87c37":"markdown","ce40a2d0":"markdown","fc333d67":"markdown","cabb0525":"markdown","051f6cb3":"markdown","9301fb91":"markdown","eabb4e77":"markdown","d9de15a0":"markdown","122f029a":"markdown","c79f436c":"markdown","0444bc32":"markdown","074ecddc":"markdown"},"source":{"ea1f5a45":"# \uc2dc\ud5d8\ud658\uacbd \uc138\ud305 (\ucf54\ub4dc \ubcc0\uacbd X)\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\n\ndef exam_data_load(df, target, id_name=\"\", null_name=\"\"):\n    if id_name == \"\":\n        df = df.reset_index().rename(columns={\"index\": \"id\"})\n        id_name = 'id'\n    else:\n        id_name = id_name\n    \n    if null_name != \"\":\n        df[df == null_name] = np.nan\n    \n    X_train, X_test = train_test_split(df, test_size=0.2, shuffle=True, random_state=2021)\n    y_train = X_train[[id_name, target]]\n    X_train = X_train.drop(columns=[id_name, target])\n    y_test = X_test[[id_name, target]]\n    X_test = X_test.drop(columns=[id_name, target])\n    return X_train, X_test, y_train, y_test \n    \ndf = pd.read_csv(\"..\/input\/adult-census-income\/adult.csv\")\nX_train, X_test, y_train, y_test = exam_data_load(df, target='income', null_name='?')\n\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","1b3919d1":"X_train.reset_index(drop=True)\nX_test.reset_index(drop=True)\ny_train.reset_index(drop=True)\ny_test.reset_index(drop=True)","55764f94":"# \uc2dc\ud5d8\ud658\uacbd\uc5d0\uc11c\ub294 \uc544\ub798\uc640 \uac19\uc774 \uc81c\uacf5\ub428\n# import pandas as pd\n# X_test = pd.read_csv(\"data\/X_test.csv\")\n# X_train = pd.read_csv(\"data\/X_train.csv\")\n# y_train = pd.read_csv(\"data\/y_train.csv\")","6a02f205":"import sklearn\nfrom sklearn import *\n\nfrom sklearn.ensemble import AdaBoostClassifier, ExtraTreesClassifier, GradientBoostingClassifier, RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import roc_auc_score, accuracy_score\nfrom sklearn.model_selection import GridSearchCV, train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nimport xgboost as xg\nfrom xgboost import XGBClassifier, XGBRFClassifier","953d0de8":"X_train.head()","a48ffaa1":"X_test.head()","fc0eab38":"X_train.info()","d8319c1f":"X_test.info()","01994746":"X_train['native.country'] = X_train['native.country'].fillna(X_train['native.country'].mode()[0])\nX_test['native.country'] = X_test['native.country'].fillna(X_train['native.country'].mode()[0])\n\nX_train['workclass'] = X_train['workclass'].fillna(X_train['workclass'].mode()[0])\nX_test['workclass'] = X_test['workclass'].fillna(X_train['workclass'].mode()[0])","df29afe2":"for i in range(len(X_train['sex'].value_counts().index)):\n    for j in range(len(X_train['education.num'].value_counts().index)):\n            \n            if len(X_train.loc[(X_train['sex']==X_train['sex'].value_counts().index[i])&(\n                X_train['education.num']==X_train['education.num'].value_counts().index[j])&(\n                X_train['occupation'].isna()),'occupation']) != 0:\n                \n                X_train.loc[(X_train['sex']==X_train['sex'].value_counts().index[i])&(\n                    X_train['education.num']==X_train['education.num'].value_counts().index[j])&(\n                    X_train['occupation'].isna()),'occupation'] = X_train.loc[(X_train['sex']==X_train['sex'].value_counts().index[i])&(\n                        X_train['education.num']==X_train['education.num'].value_counts().index[j])&(\n                        X_train['occupation'].notna()),'occupation'].mode()[0]\n\n                X_test.loc[(X_test['sex']==X_train['sex'].value_counts().index[i])&(\n                    X_test['education.num']==X_train['education.num'].value_counts().index[j])&(\n                    X_test['occupation'].isna()),'occupation'] = X_train.loc[(X_train['sex']==X_train['sex'].value_counts().index[i])&(\n                        X_train['education.num']==X_train['education.num'].value_counts().index[j])&(\n                        X_train['occupation'].notna()),'occupation'].mode()[0]","17b36266":"X_train.describe()","9d816753":"X_test.describe()","d4f33af9":"X_train.boxplot()","950f8f11":"X_test.boxplot()","5e78223a":"y_train.income.value_counts() #\ubd84\ub958\ubb38\uc81c","c9812982":"obj=[1,3,5,6,7,8,9,13]\nfor i in range(len(obj)):\n    print(X_train.iloc[:,obj[i]].name, ':',len(X_train.iloc[:,obj[i]].value_counts().index))\n    print(X_test.iloc[:,obj[i]].name, ':',len(X_test.iloc[:,obj[i]].value_counts().index))","0b0628fe":"obj=[8,9]\nfor i in range(len(obj)):\n    X_train = pd.concat([X_train,pd.get_dummies(X_train.iloc[:,obj[i]]).iloc[:,:-1]],axis=1)\n    X_test = pd.concat([X_test,pd.get_dummies(X_test.iloc[:,obj[i]]).iloc[:,:-1]],axis=1)","25f832bf":"le = preprocessing.LabelEncoder()\n\nobj=[1,3,5,6,7,13]\nfor i in range(len(obj)):\n    le.fit(X_train.iloc[:,obj[i]])\n    X_train.iloc[:,obj[i]]=le.transform(X_train.iloc[:,obj[i]])\n    X_test.iloc[:,obj[i]]=le.transform(X_test.iloc[:,obj[i]])","d1cd59f0":"drop=['sex','race']\nfor i in range(len(drop)):\n    X_train.drop(drop[i], axis=1, inplace=True)\n    X_test.drop(drop[i], axis=1, inplace=True)","0d1f9c6d":"scaler = StandardScaler()\nscaler.fit(X_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","b440bf1b":"y_train.iloc[:,1] = pd.get_dummies(y_train.iloc[:,1]).iloc[:,0]\ny_test.iloc[:,1] = pd.get_dummies(y_test.iloc[:,1]).iloc[:,0]","d7d0a91f":"X_tra, X_val, y_tra, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=42)","70ca9c56":"model_list = [AdaBoostClassifier(random_state=0), ExtraTreesClassifier(random_state=0), GradientBoostingClassifier(random_state=0), \n              RandomForestClassifier(random_state=0), LogisticRegression(random_state=0), KNeighborsClassifier(), \n              DecisionTreeClassifier(random_state=0), SVC(random_state=0), XGBClassifier(random_state=0), XGBRFClassifier(random_state=0)]\n\nfor i in range(len(model_list)):\n    clf = model_list[i]\n    clf.fit(X_tra, y_tra.iloc[:,1])\n    print(model_list[i],\":\",roc_auc_score(y_val.iloc[:,1], clf.predict(X_val)))","80e9393a":"parameters = {'n_estimators':[100, 300, 500], 'learning_rate':[0.1,0.5,0.01,0.05]}\nclf = GridSearchCV(AdaBoostClassifier(random_state=0) , parameters, scoring = 'roc_auc')\nclf.fit(X_train, y_train.iloc[:,1])\nprint(clf.best_score_)\nprint(clf.best_params_)","4f5304bb":"parameters = {'n_estimators':[100, 300, 500], 'max_depth':[5, 10, 15]}\nclf = GridSearchCV(ExtraTreesClassifier(random_state=0) , parameters, scoring = 'roc_auc')\nclf.fit(X_train, y_train.iloc[:,1])\nprint(clf.best_score_)\nprint(clf.best_params_)","5b235133":"parameters = {'n_estimators':[100, 300, 500], 'max_depth':[5, 10, 15]}\nclf = GridSearchCV(GradientBoostingClassifier(random_state=0) , parameters, scoring = 'roc_auc')\nclf.fit(X_train, y_train.iloc[:,1])\nprint(clf.best_score_)\nprint(clf.best_params_)","f814abfc":"parameters = {'n_estimators':[100, 300, 500], 'max_depth':[5, 10, 15]}\nclf = GridSearchCV(RandomForestClassifier(random_state=0) , parameters, scoring = 'roc_auc')\nclf.fit(X_train, y_train.iloc[:,1])\nprint(clf.best_score_)\nprint(clf.best_params_)","4e5a3f4f":"parameters = {'n_estimators':[100, 300, 500], 'max_depth':[5, 10, 15]}\nclf = GridSearchCV(XGBClassifier(random_state=0) , parameters, scoring = 'roc_auc')\nclf.fit(X_train, y_train.iloc[:,1])\nprint(clf.best_score_)\nprint(clf.best_params_)","c7088b47":"clf = XGBClassifier(random_state=0, max_depth= 5, n_estimators= 100)\nclf.fit(X_train, y_train.iloc[:,1])\npred = y_test.copy()\npred.iloc[:,1] = clf.predict(X_test)","d25d0e92":"roc_auc_score(y_test.iloc[:,1], pred.iloc[:,1])","587556c0":"accuracy_score(y_test.iloc[:,1], pred.iloc[:,1])","29d174ab":"#pred.to_csv('11111.csv')","47374e34":"# \uc2dc\ud5d8\ud658\uacbd \uc138\ud305 (\ucf54\ub4dc \ubcc0\uacbd X)\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\n\ndef exam_data_load(df, target, id_name=\"\", null_name=\"\"):\n    if id_name == \"\":\n        df = df.reset_index().rename(columns={\"index\": \"id\"})\n        id_name = 'id'\n    else:\n        id_name = id_name\n    \n    if null_name != \"\":\n        df[df == null_name] = np.nan\n    \n    X_train, X_test = train_test_split(df, test_size=0.2, shuffle=True, random_state=2021)\n    y_train = X_train[[id_name, target]]\n    X_train = X_train.drop(columns=[id_name, target])\n    y_test = X_test[[id_name, target]]\n    X_test = X_test.drop(columns=[id_name, target])\n    return X_train, X_test, y_train, y_test \n    \ndf = pd.read_csv(\"..\/input\/adult-census-income\/adult.csv\")\nX_train, X_test, y_train, y_test = exam_data_load(df, target='income', null_name='?')\n\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","4bc540c3":"import pandas as pd\nimport numpy as np","e671c5f7":"# \ub370\uc774\ud130 \ud06c\uae30 \ud655\uc778\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","66cb82fd":"# \ub370\uc774\ud130 \ud655\uc778\nX_train.head()","69ffab40":"# \ud0c0\uac9f \uc218 \ud655\uc778\ny_train['income'].value_counts()","e5587175":"# type\ud655\uc778\nX_train.info()","1ed816f8":"# \ud53c\ucc98 \uad6c\ubd84\n# Numeric features\nnumeric_features = [\n                    'age',\n                    'fnlwgt', \n                    'education.num',\n                    'capital.gain', \n                    'capital.loss', \n                    'hours.per.week',                     \n                   ]\n\n# Categorical features\ncat_features = [\n                 'workclass',              \n                 'education',            \n                 'marital.status', \n                 'occupation', \n                 'relationship', \n                 'race', \n                 'sex',\n                 'native.country'\n]","fb5ec2f6":"X_train[numeric_features].describe()","3bb992ce":"X_train[cat_features].describe()","7bccdd91":"X_train.isnull().sum()","4c18e2f4":"X_test.isnull().sum()","02b12310":"X_train['workclass'].value_counts()","7de888d6":"X_train['occupation'].value_counts()","716cc8c8":"X_train['native.country'].value_counts()","8203a48d":"def data_fillna(df):\n    df['workclass'] = df['workclass'].fillna(df['workclass'].mode()[0])\n    df['occupation'] = df['occupation'].fillna(\"null\")\n    df['native.country'] = df[\"native.country\"].fillna(df['native.country'].mode()[0])\n    return df\n\nX_train = data_fillna(X_train)\nX_test = data_fillna(X_test)\n\nX_train.isnull().sum()","72860978":"# \ub77c\ubca8\uc778\ucf54\ub529\nfrom sklearn.preprocessing import LabelEncoder\n\nall_df = pd.concat([X_train.assign(ind=\"train\"), X_test.assign(ind=\"test\")])\nle = LabelEncoder()\nall_df[cat_features] = all_df[cat_features].apply(le.fit_transform)\n\nX_train = all_df[all_df['ind'] == 'train']\nX_train = X_train.drop('ind',axis=1)\nX_train\n\nX_test = all_df[all_df['ind'] == 'test']\nX_test = X_test.drop('ind',axis=1)\nX_test","025a77b9":"# \uc2a4\ucf00\uc77c\ub9c1\nfrom sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\nX_train[numeric_features] = scaler.fit_transform(X_train[numeric_features])\nX_test[numeric_features] = scaler.transform(X_test[numeric_features])\nX_train","eacbcf74":"# target\uac12 \ubcc0\uacbd\ny = (y_train['income'] != '<=50K').astype(int)\ny[:5]","ccf48225":"# \ud559\uc2b5\uc6a9 \ub370\uc774\ud130\uc640 \uac80\uc99d\uc6a9 \ub370\uc774\ud130\ub85c \uad6c\ubd84\nfrom sklearn.model_selection import train_test_split\nX_tr, X_val, y_tr, y_val = train_test_split(X_train, y, test_size=0.15, random_state=2021)\nX_tr.shape, X_val.shape, y_tr.shape, y_val.shape","9ae52074":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\n\nmodel = DecisionTreeClassifier(random_state = 2022)\nmodel.fit(X_tr, y_tr)\npred = model.predict(X_val)\nprint('accuracy score:', (accuracy_score(y_val, pred)))","285998c3":"from sklearn.ensemble import RandomForestClassifier\n\nmodel = RandomForestClassifier(random_state = 2022)\nmodel.fit(X_tr, y_tr)\npred = model.predict(X_val)\nprint('accuracy score:', (accuracy_score(y_val, pred)))","01cfc59a":"y_test = (y_test['income'] != '<=50K').astype(int)\npred = model.predict(X_test)\n\nfrom sklearn.metrics import accuracy_score\nprint('accuracy score:', (accuracy_score(y_test, pred)))","e644961f":"\uacb0\uce21\uce58 \uc874\uc7ac \ubcc0\uc218 : workclass, occupation, native.country","e64f6103":"## \ucc44\uc810 (\uc218\ud5d8\uc790\ub294 \ud655\uc778 \ubd88\uac00)","e5c87c37":"## \ubaa8\ub378 & \ud3c9\uac00","ce40a2d0":"- AdaBoostClassifier(random_state=0) : 0.7700388997799624\n- ExtraTreesClassifier(random_state=0) : 0.7754486284544025\n- GradientBoostingClassifier(random_state=0) : 0.7763274813405913\n- RandomForestClassifier(random_state=0) : 0.7805701355411675\n- XGBClassifier() : 0.7974811622261895\n\n\uc704\uc758 \ubaa8\ub378 \uad6c\uccb4\ud654","fc333d67":"## EDA","cabb0525":"# \uc131\uc778 \uc778\uad6c\uc870\uc0ac \uc18c\ub4dd \uc608\uce21\n\n- age: \ub098\uc774\n- workclass: \uace0\uc6a9 \ud615\ud0dc\n- fnlwgt: \uc0ac\ub78c\uc758 \ub300\ud45c\uc131\uc744 \ub098\ud0c0\ub0b4\ub294 \uac00\uc911\uce58(final weight)\n- education: \uad50\uc721 \uc218\uc900\n- education.num: \uad50\uc721 \uc218\uc900 \uc218\uce58\n- marital.status: \uacb0\ud63c \uc0c1\ud0dc\n- occupation: \uc5c5\uc885\n- relationship: \uac00\uc871 \uad00\uacc4\n- race: \uc778\uc885\n- sex: \uc131\ubcc4\n- capital.gain: \uc591\ub3c4 \uc18c\ub4dd\n- capital.loss: \uc591\ub3c4 \uc190\uc2e4\n- hours.per.week: \uc8fc\ub2f9 \uadfc\ubb34 \uc2dc\uac04\n- native.country: \uad6d\uc801\n- income: \uc218\uc775 (\uc608\uce21\ud574\uc57c \ud558\ub294 \uac12)","051f6cb3":"## \uacb0\uce21\uce58 \ucc98\ub9ac","9301fb91":"## \uac80\uc99d\uc6a9 \ub370\uc774\ud130 \ubd84\ub9ac","eabb4e77":"\ucd5c\uc885\ubaa8\ub378","d9de15a0":"## \ub77c\uc774\ube0c\ub7ec\ub9ac \ubd88\ub7ec\uc624\uae30","122f029a":"## \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30(\uc0dd\ub7b5)","c79f436c":"# \uc0ac\uc6a9\uc790 \ucf54\ub529","0444bc32":"- \uacb0\uce21\uce58\ub294 \ucd5c\ube48\uac12\uacfc \ucc28\uc774\uac00 \ud06c\uba74 \ucd5c\ube48\uac12\uc73c\ub85c \uac12\uc774 \ube44\uc2b7\ud558\uba74 \ubcc4\ub3c4\uc758 \uac12\uc73c\ub85c \ub300\uccb4\ud568","074ecddc":"## \ud53c\ucc98\uc5d4\uc9c0\ub2c8\uc5b4\ub9c1"}}