{"cell_type":{"4cf272f1":"code","2b4d6a0d":"code","25f9fb27":"code","8c14c8aa":"code","e42abeaf":"code","3aa68e37":"code","895648b6":"code","aad2507a":"code","81df0f0c":"code","cd4e3c3e":"code","d832914c":"code","7d97084e":"code","52ad823f":"code","4042de51":"code","d28188ec":"code","62a606d2":"code","45b563c8":"code","81c617a9":"code","be3e751c":"code","116e5bef":"code","ca8f5f4c":"markdown","e9aefea7":"markdown","1b3e09fb":"markdown","b7626674":"markdown","30cd9b34":"markdown","614725e3":"markdown","0d05e4df":"markdown","3fe399b4":"markdown","16b94f42":"markdown","cc6e0e81":"markdown","8d0718f2":"markdown","35cbb740":"markdown","4bdb87e2":"markdown","a5fbb272":"markdown","b4886442":"markdown"},"source":{"4cf272f1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n#for data visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt \n\nfrom scipy import stats\n\n","2b4d6a0d":"#load the dataset\n\niris = pd.read_csv(\"\/kaggle\/input\/iris\/Iris.csv\") #load the dataset\n","25f9fb27":"# find dimensions of the dataset\niris.shape  #150 rows and 6 columns","8c14c8aa":"# get the column names\ncolumns = list(iris)\niris.columns\n","e42abeaf":"#Dislpay a sample of the dataset\n\niris.head()","3aa68e37":"# Get the count for each class\niris['Species'].value_counts() #50 each for each class . Total 3 classes.","895648b6":"# Method 1 : Pandas.DataFrame.info(self, verbose=None, buf=None, max_cols=None, memory_usage=None, null_counts=None)\n# This method prints information about a DataFrame including the index dtype and column dtypes, non-null values and memory usage.\n# Returns None.The memory_usage parameter allows deep introspection mode, specially useful for big DataFrames and fine-tune memory optimization:\n\niris.info(memory_usage='deep') #No missing values found.","aad2507a":"#dropping the Id column as it is unecessary, axis=1 specifies that it should be column wise, inplace =1 means the changes should be reflected into the dataframe\niris.drop('Id',axis=1,inplace=True) ","81df0f0c":"# Method 2 : Pandas.DataFrame.describe(self, percentiles=None, include=None, exclude=None)\n# Generate descriptive statistics that summarize the central tendency, dispersion and \n# shape of a dataset\u2019s distribution, excluding NaN values.\n\niris.describe()","cd4e3c3e":"fig, ax =plt.subplots(1,4,figsize=(20,6))\n\n    \nsns.distplot(iris.SepalLengthCm,ax=ax[0])\nsns.distplot(iris.SepalWidthCm,ax=ax[1])\nsns.distplot(iris.PetalLengthCm,ax=ax[2])\nsns.distplot(iris.PetalWidthCm,ax=ax[3])\n\nfig.show()\n","d832914c":"sns.distplot(iris.SepalLengthCm, kde=True, fit=stats.norm);","7d97084e":"sns.boxplot(x=\"Species\", y=\"SepalLengthCm\", data=iris)","52ad823f":"sns.violinplot(x=\"Species\",y=\"SepalLengthCm\",data = iris)\nplt.title(\"Violin plot for SepalLengthCm and Species\")\nplt.show()\n","4042de51":"ax = sns.swarmplot(x=\"SepalLengthCm\", y=\"Species\", data=iris)","d28188ec":"g = sns.FacetGrid(iris, col=\"Species\")\ng.map(plt.hist, \"SepalLengthCm\");","62a606d2":"sns.FacetGrid(data=iris,hue=\"Species\",height=5).map(plt.scatter,\"SepalLengthCm\",\"SepalWidthCm\").add_legend()","45b563c8":"with sns.axes_style(\"white\"):\n    sns.jointplot(x=\"SepalLengthCm\", y=\"SepalWidthCm\", kind=\"hex\", color=\"k\",data=iris);","81c617a9":"sns.jointplot(x=\"SepalLengthCm\", y=\"SepalWidthCm\", data=iris, kind=\"kde\");\n","be3e751c":"plt.figure(figsize=(8,6)) \nsns.heatmap(iris.corr(),annot=True,cmap=\"YlGnBu\") #draws  heatmap with input as the correlation matrix calculted by(iris.corr())\nplt.show()  ","116e5bef":"g = sns.pairplot(iris, hue=\"Species\", palette=\"husl\")","ca8f5f4c":"#### 2.1.4 Swarm plot\nA categorical scatterplot with non-overlapping points. It is a good complement to a box or violin plot in cases where you want to show all observations along with some representation of the underlying distribution.","e9aefea7":"### 2.3 Plotting bivariate distributions\n\n#### 2.3.1 scatterplots\nThe most familiar way to visualize a bivariate distribution is a scatterplot, where each observation is shown with point at the x and y values.","1b3e09fb":"### Loading the data","b7626674":"SepalLength and SepalWidth have low negative correlation. PetalLength and PetalWidth have high positive correlation. Correlation metrics helps us to choose features for machine learning models.","30cd9b34":"#### 2.3.3 Kernel density estimation Contour plot\n<b> KDE <\/b> can be also used to visualize a bivariate distribution. In seaborn, this kind of plot is shown with a contour plot. <b>Contour plots <\/b> are a way to show 3d surface on a 2d plane. it graphs two predictor variable on x and y axis; and response variable Z as contours.","614725e3":"This is my first Kaggle kernel - An implementation of very basic data analysis tasks with  iris database. ","0d05e4df":"We can also use distplot() to fit a parametric distribution to a dataset and visually evaluate how closely it corresponds to the observed data. (fit = stats.norm \/ normal distribution) ","3fe399b4":"#### 2.1.2 Boxplot\nA boxplot is a standardized way of displaying the distribution of data based on a five number summary (\u201cminimum\u201d, first quartile (Q1), median, third quartile (Q3), and \u201cmaximum\u201d). It helps us to identify the outliers and what their values are. It can also tell  whether the data is symmetrical, how tightly your data is grouped, and if and how your data is skewed.","16b94f42":"## 2 Data inspection : Visualization\n\nWhen dealing with a set of data, often the first thing you\u2019ll want to do is get a sense for how the variables are distributed. Visualization helps us to identify and analyse the distributions more easily and effectively.\n\n### 2.1 Plotting Univariate distributions\n#### 2.1.1 Distplot\n\nThe most convenient way to take a quick look at a univariate distribution in seaborn is the distplot() function. By default, this will draw a histogram and fit a kernel density estimate (KDE).\n\nA  <b> histogram <\/b> helps you discover, and show, the underlying frequency distribution (shape) of a set of continuous data.A <b> KDE <\/b> , on the other hand,is a fundamental data smoothing problem and provides a smooth curve to show the shape of the data under observation.\n","cc6e0e81":"#### 2.3.2 Hexbin plot\n\nThe bivariate analogue of a histogram is known as a \u201chexbin\u201d plot, because it shows the counts of observations that fall within hexagonal bins. This plot works best with relatively large dataset.","8d0718f2":"### 2.2 Building structured multi-plot grids using FacetGrid class\n\nThe FacetGrid class is useful to visualize the distribution of a variable or the relationship between multiple variables separately within subsets of your dataset. A FacetGrid can be drawn with up to three dimensions: row, col, and hue. ","35cbb740":"The first step in any data analysis process is data cleaning.The objective of data cleaning is to refine the input data into a quality data.Incorrect or inconsistent data can lead to false conclusions. \n\nHigh quality data needs to pass a set of quality criterias such as : Validity, Accuracy, Completeness, Consistency and Uniformity. To ensure that the given dataset pass these crieterias , we follow a sequence of procedures that are iteratively refined, as follows : Inspection, Cleaning, Verifying and reporting.\n\n## 1. Data Inspection : Data profiling\nA summary statistics about the data, called data profiling is really helpful to give a general idea about the quality of the data. Pandas library provide different methods for this purpose. ","4bdb87e2":"#### 2.1.3 Violin Plot\nViolin Plot is a method to visualize the distribution of numerical data of different variables. It is similar to Box Plot but with a rotated plot on each side, giving more information about the density estimate on the y-axis.The advantage of a violin plot is that it can show nuances in the distribution that aren\u2019t noticeable in a boxplot. On the other hand, the boxplot more clearly shows the outliers in the data.","a5fbb272":"#### 2.3.4 Heat map\nHeat map is used to find out the correlation between different features in the dataset.","b4886442":"### 2.3.5 Pair Plot\nPlot pairwise relationships in a dataset.They are scatterplots created by pairing all combinations of features."}}