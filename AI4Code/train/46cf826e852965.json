{"cell_type":{"cf06f07c":"code","890c3948":"code","2eed8c8b":"code","31f23367":"code","f87c0937":"code","8be57c11":"code","461de52b":"code","215884df":"code","f14277b8":"code","f5d789ad":"code","780daf3a":"code","c0af6116":"code","11b1ed1e":"code","3066a0ab":"code","f4c314cf":"code","af822d19":"code","79de4300":"code","6c4928f8":"code","9da0bc4c":"code","c5c4917c":"code","4ab6eafe":"markdown","4d4e448f":"markdown","34af31e5":"markdown","09fdd90c":"markdown","d48903b5":"markdown"},"source":{"cf06f07c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom IPython.display import Image\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\nimport warnings\ndef ignore_warn(*args, **kwargs):\n    pass\nwarnings.warn = ignore_warn\n\n# Any results you write to the current directory are saved as output.","890c3948":"train_df = pd.read_json('..\/input\/whats-cooking-kernels-only\/train.json')\ntest_df = pd.read_json('..\/input\/whats-cooking-kernels-only\/test.json')","2eed8c8b":"train_df['cuisine'].value_counts()","31f23367":"plt.figure(figsize=(20,10))\nsns.countplot(train_df['cuisine'])","f87c0937":"all_data = pd.concat([train_df.drop(['cuisine'], axis=1), test_df], axis=0)","8be57c11":"all_data.columns, all_data.shape","461de52b":"#Just get all ingredients\nall_ingredients = np.concatenate([data for data in all_data['ingredients']])\nall_ingredients = pd.Series(all_ingredients)","215884df":"for data in all_ingredients.unique():\n    all_data[data] = all_data['ingredients'].apply(lambda x: 1 if data in x else 0)","f14277b8":"all_data.shape","f5d789ad":"X = all_data[:39774]\nX_test = all_data[39774:]","780daf3a":"X.drop(['id', 'ingredients'], axis=1, inplace=True)\nX_test.drop(['id', 'ingredients'], axis=1, inplace=True)","c0af6116":"y = train_df['cuisine']","11b1ed1e":"clf = LogisticRegression(random_state=0, solver='lbfgs',multi_class='multinomial')\nscores = cross_val_score(clf, X, y, cv=5)\nprint('Cross validation mean scores %.3f' %scores.mean())","3066a0ab":"tf = TfidfVectorizer(binary=True)\nX_train_text = list(train_df['ingredients'].apply(lambda x: ' '.join(x)))\nX = tf.fit_transform(X_train_text)","f4c314cf":"X.shape","af822d19":"scores = cross_val_score(clf, X, y, cv=5)\nprint('Cross validation mean scores %.3f' %scores.mean())","79de4300":"from IPython.display import Image\nImage(\"..\/input\/sklearn-algorithm-cheat-sheet\/ml_map.png\")","6c4928f8":"model = SVC(C=100, kernel='rbf', \n            gamma=1, \n            coef0=1, \n            shrinking=True, \n            tol=0.001, \n            probability=False,\n            cache_size=200,\n            class_weight=None,\n            verbose=False,\n            max_iter=-1,\n            decision_function_shape=None,\n            random_state=None)","9da0bc4c":"scores = cross_val_score(model, X, y, cv=5)\nprint('Cross validation mean scores %.3f' %scores.mean())","c5c4917c":"# predict_result = clf.predict(X_test)\n# submit_result = pd.concat([test_df['id'], pd.Series(predict_result)], axis=1)\n# submit_result.columns=['id', 'cuisine']\n# submit_result.to_csv('sample_submission.csv', index=False)","4ab6eafe":"**As sklearn algorithm cheat-sheet, SVC may be the first choice for this situation. Now let's try it.**","4d4e448f":"**From above cross validation result, we can see that tf-idf extract more informations from text and with few features.**","34af31e5":"**Generate sparse matrix for all unique ingredients, like tokenize the text**","09fdd90c":"From Above result, We can see that with properties feature extraction and properties algorithm can help your scores!","d48903b5":"**Now Let's try tf-idf to extract text features**"}}