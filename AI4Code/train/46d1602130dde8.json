{"cell_type":{"bb17e5e8":"code","d67133e1":"code","bbd4a82a":"code","68078e50":"code","54f8aaad":"code","4eedcc3c":"code","239fd8c7":"code","223d5979":"code","49bb2d56":"code","2af035c0":"code","0dd076ff":"code","b5520284":"code","ae359c07":"code","ff4b80aa":"code","58f224b8":"code","84630566":"code","3aa349b0":"code","8bb7b9f6":"code","fa5a0caf":"code","1b2c8b31":"code","e656f85e":"code","10abe69c":"code","4266132e":"code","97b3460f":"markdown","7dfa8ab6":"markdown","6a80508a":"markdown","1021bba8":"markdown","b9eaed9c":"markdown","5ac4f8ca":"markdown"},"source":{"bb17e5e8":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport missingno as msno \nimport matplotlib.pyplot as plt\n%matplotlib inline","d67133e1":"train=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","bbd4a82a":"print(\"train size : \",train.shape)\nprint(\"test size : \",test.shape)","68078e50":"train.info()","54f8aaad":"test.info()\ncust_id=test['Id']","4eedcc3c":"msno.matrix(train)","239fd8c7":"#missing data column(train)\na=[]\nfor x in train.columns:\n    if train[x].isnull().sum()>0:\n        a.append(x)","223d5979":"for x in a:\n    print(x,\": \",train[x].unique(),\"\\n\")\n    print(\"missing count : \",train[x].isnull().sum(),\"\\n\")","49bb2d56":"#missing data \n#LotFrontage,MasVnrArea : mean\n#rst : if missings are to many(minimum 300), drop else mode\nfor i in a:\n    if train[i].dtypes=='object':\n        if train[i].isnull().sum()<300:\n            train[i].fillna(value=train[i].mode()[0],inplace=True)\n        else:\n            train.drop(i,axis=1,inplace=True)\n    elif i=='GarageYrBlt':\n        train[i].fillna(value=train[i].mode()[0],inplace=True)\n    else:\n        train[i].fillna(np.mean(train[i]),inplace=True)","2af035c0":"#GarageYrBlt Dtype change\ntrain['GarageYrBlt']=train['GarageYrBlt'].astype(int)","0dd076ff":"#id column drop\ntrain.drop(['Id'],axis=1,inplace=True)","b5520284":"#missing data column(test)\nb=[]\nfor y in test.columns:\n    if test[y].isnull().sum()>0:\n        b.append(y)\n\nfor y in b:\n    print(y,\": \",test[y].unique(),\"\\n\")\n    print(\"missing count : \",test[y].isnull().sum(),\"\\n\")","ae359c07":"for i in b:\n    if (test[i].dtypes=='object')|(test[i].isnull().sum()<5):\n        if test[i].isnull().sum()<300:\n            test[i].fillna(value=test[i].mode()[0],inplace=True)\n        else:\n            test.drop(i,axis=1,inplace=True)\n    elif i=='GarageYrBlt':\n        test[i].fillna(value=test[i].mode()[0],inplace=True)\n    else:\n        test[i].fillna(np.mean(test[i]),inplace=True)","ff4b80aa":"test.drop(['Id'],axis=1,inplace=True)","58f224b8":"#EDA(target variable)\nfig,(ax1,ax2)=plt.subplots(2,1)\nfig.set_size_inches(30,20)\nsns.distplot(train['SalePrice'],ax=ax1)\nsns.distplot(np.log1p(train['SalePrice']),ax=ax2)\n\ntrain['SalePrice']=np.log1p(train['SalePrice'])","84630566":"#EDA & DIMENTION REDUCTION\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\n\ntrain2=train.copy()\n\n#TRAIN DATA ENCODER\nfor i in train.columns:\n    if train[i].dtypes=='object':\n        train[i]=LabelEncoder().fit_transform(train[i])\n\n        \n#TEST DATA ENCODER\nfor i in test.columns:\n    if test[i].dtypes=='object':\n        test[i]=LabelEncoder().fit_transform(test[i])\n        \nobject=train.iloc[:,:-1]\ncor=object.corr()\n\nmask=np.zeros_like(cor, dtype=np.bool)\nmask[np.triu_indices_from(mask)]=True\n\nfigure, ax=plt.subplots()\nfigure.set_size_inches(20,10)\nsns.heatmap(cor,mask=mask,vmin=-1,vmax=1,square=True)","3aa349b0":"std=StandardScaler().fit_transform(object)\npca=PCA()\npca.fit_transform(std)\n\ncompname=\"principal component\"\nvariance=pd.DataFrame(pca.explained_variance_,index=[compname+\" \"+str(i) for i in range(1,train.shape[1])],columns=[\"PCA explained variance\"])\nvarratio=pd.DataFrame(pca.explained_variance_ratio_,index=[compname+\" \"+str(i) for i in range(1,train.shape[1])],columns=[\"PCA explained variance_ratio\"])\ncumratio=pd.DataFrame(pca.explained_variance_ratio_.cumsum(),index=[compname+\" \"+str(i) for i in range(1,train.shape[1])],columns=[\"Cum Ratio\"])\n\npcasum=pd.concat([variance,varratio,cumratio],axis=1)\nprint(pcasum)\nprint(\"PCA explained variance >= 1 count : \",pcasum[pcasum['PCA explained variance']>=1].shape[0])\nplt.figure(figsize=(20,10))\nplt.plot(pca.explained_variance_,color='red')\nplt.title(\"Scree Plot\")\nplt.show()\n","8bb7b9f6":"#24 comp\ntrainpca=pca.fit_transform(std)[:,:24]","fa5a0caf":"#TEST PCA\nstdtest=StandardScaler().fit_transform(test)\npcatest=PCA(n_components=24)\npcatest=pcatest.fit_transform(stdtest)","1b2c8b31":"from xgboost import XGBRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import GridSearchCV","e656f85e":"X_train=trainpca\ny_train=train2['SalePrice'].values\nX_test=pcatest\n\n#LINEAR REGRESSION(NO PARAMETER)\nmodel=LinearRegression().fit(X_train,y_train)\npred=model.predict(X_test)\nlinearsol=np.round(pred,2)\n\n#XGBOOST REGRESSOR\ndef print_best_params(model,params):\n    gridmodel=GridSearchCV(model,param_grid=params,scoring='neg_mean_squared_error',cv=5)\n    gridmodel.fit(X_train,y_train)\n    print('{0} \ubaa8\ub378 \ucd5c\uc801\uc758 \ud30c\ub77c\ubbf8\ud130 : {1}'.format(model.__class__.__name__,gridmodel.best_params_))\nmodel2=XGBRegressor(n_estimators=1000,learning_rate=0.05,colsample_bytree=0.5,subsample=0.8)\nprint(print_best_params(model2,{'n_estimators':[1,50,100,300,500,800,1000]}))","10abe69c":"#XGBOOST REGRESSOR(PARAMETER=1000)\nmodel2.fit(X_train,y_train)\npred2=np.round(model2.predict(X_test),2)","4266132e":"submit=pd.DataFrame({\"Id\":cust_id,\"SalePrice\":pred2})\nsubmit.to_csv(\"house price prediction.csv\",index=False)","97b3460f":"As a result of correlation analysis between independent variables (excluding nominal variables), it was found that correlations exist between variables, and principal component analysis was performed to reduce dimensionality. Of the 74 principal components, only the principal components with a variance explained by PCA of 1 or more were selected to determine the number of principal components, and 65% of the total could be explained.","7dfa8ab6":"*****DATA PREPROCESSING*****","6a80508a":"*****DATA MODELING*****","1021bba8":"*****SOLUTION*****","b9eaed9c":"SalePrice - the property's sale price in dollars. This is the target variable that you're trying to predict.(target)\nMSSubClass: The building class\nMSZoning: The general zoning classification\nLotFrontage: Linear feet of street connected to property\nLotArea: Lot size in square feet\nStreet: Type of road access\nAlley: Type of alley access\nLotShape: General shape of property\nLandContour: Flatness of the property\nUtilities: Type of utilities available\nLotConfig: Lot configuration\nLandSlope: Slope of property\nNeighborhood: Physical locations within Ames city limits\nCondition1: Proximity to main road or railroad\nCondition2: Proximity to main road or railroad (if a second is present)\nBldgType: Type of dwelling\nHouseStyle: Style of dwelling\nOverallQual: Overall material and finish quality\nOverallCond: Overall condition rating\nYearBuilt: Original construction date\nYearRemodAdd: Remodel date\nRoofStyle: Type of roof\nRoofMatl: Roof material\nExterior1st: Exterior covering on house\nExterior2nd: Exterior covering on house (if more than one material)\nMasVnrType: Masonry veneer type\nMasVnrArea: Masonry veneer area in square feet\nExterQual: Exterior material quality\nExterCond: Present condition of the material on the exterior\nFoundation: Type of foundation\nBsmtQual: Height of the basement\nBsmtCond: General condition of the basement\nBsmtExposure: Walkout or garden level basement walls\nBsmtFinType1: Quality of basement finished area\nBsmtFinSF1: Type 1 finished square feet\nBsmtFinType2: Quality of second finished area (if present)\nBsmtFinSF2: Type 2 finished square feet\nBsmtUnfSF: Unfinished square feet of basement area\nTotalBsmtSF: Total square feet of basement area\nHeating: Type of heating\nHeatingQC: Heating quality and condition\nCentralAir: Central air conditioning\nElectrical: Electrical system\n1stFlrSF: First Floor square feet\n2ndFlrSF: Second floor square feet\nLowQualFinSF: Low quality finished square feet (all floors)\nGrLivArea: Above grade (ground) living area square feet\nBsmtFullBath: Basement full bathrooms\nBsmtHalfBath: Basement half bathrooms\nFullBath: Full bathrooms above grade\nHalfBath: Half baths above grade\nBedroom: Number of bedrooms above basement level\nKitchen: Number of kitchens\nKitchenQual: Kitchen quality\nTotRmsAbvGrd: Total rooms above grade (does not include bathrooms)\nFunctional: Home functionality rating\nFireplaces: Number of fireplaces\nFireplaceQu: Fireplace quality\nGarageType: Garage location\nGarageYrBlt: Year garage was built\nGarageFinish: Interior finish of the garage\nGarageCars: Size of garage in car capacity\nGarageArea: Size of garage in square feet\nGarageQual: Garage quality\nGarageCond: Garage condition\nPavedDrive: Paved driveway\nWoodDeckSF: Wood deck area in square feet\nOpenPorchSF: Open porch area in square feet\nEnclosedPorch: Enclosed porch area in square feet\n3SsnPorch: Three season porch area in square feet\nScreenPorch: Screen porch area in square feet\nPoolArea: Pool area in square feet\nPoolQC: Pool quality\nFence: Fence quality\nMiscFeature: Miscellaneous feature not covered in other categories\nMiscVal: $Value of miscellaneous feature\nMoSold: Month Sold\nYrSold: Year Sold\nSaleType: Type of sale\nSaleCondition: Condition of sale","5ac4f8ca":"*****EXPLORATORY DATA ANALYSIS*****"}}