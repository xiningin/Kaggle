{"cell_type":{"428f65a7":"code","c2ede923":"code","df4f4062":"code","47a3936e":"code","e180b73e":"code","db6d0012":"code","229e0cdd":"code","538101a8":"code","16263128":"code","1a49dd33":"code","70083588":"code","f4a2a4fd":"code","122208e8":"code","f60d7c90":"code","76d5fe30":"code","7cae7ee4":"code","ff07cd0d":"code","252b73b7":"code","7b6a03dc":"code","1adb17f8":"code","de4ec47b":"code","ce5c1a1d":"code","b932f898":"code","1ad52003":"code","f73fc564":"code","083affc2":"code","ed4e1952":"code","9087eee3":"code","ebd8dada":"code","03fa6c98":"code","cd5cdf4b":"code","c9332b21":"code","50c3e69b":"code","0beb4301":"code","07b7562c":"code","236792bf":"code","7375ba63":"code","66f018ac":"code","5f790cac":"code","fcc2c88a":"code","c56bb39b":"code","30abac4a":"code","bf7931b4":"code","31645f4b":"code","83912d91":"code","c67f7b00":"code","3ecf9b41":"code","d198b6cd":"code","c0c9eb89":"markdown","4af01b78":"markdown","3a596ff1":"markdown","72ae83fb":"markdown","737a6795":"markdown"},"source":{"428f65a7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c2ede923":"import seaborn as sns\nimport matplotlib.pyplot as plt","df4f4062":"df = pd.read_csv('\/kaggle\/input\/ramen-ratings\/ramen-ratings.csv')","47a3936e":"df.head()","e180b73e":"df = df.drop(columns=['Top Ten'])","db6d0012":"df.isnull().sum()","229e0cdd":"df = df.dropna()","538101a8":"df.isnull().sum()","16263128":"df.describe()","1a49dd33":"x = df.drop(columns=['Style'])\nx","70083588":"y = df['Style']\ny","f4a2a4fd":"import matplotlib.pyplot as plt\n# create figure and axis\nfig, ax = plt.subplots()\n# plot histogram\nax.hist(df['Style'])\n# set title and labels\nax.set_title('Style of Presenting')\nax.set_xlabel('Types')\nax.set_ylabel('Frequency')","122208e8":"from sklearn import preprocessing \nlabel_encoder = preprocessing.LabelEncoder()  \nx= x.apply(label_encoder.fit_transform)\nx","f60d7c90":"y= label_encoder.fit_transform(y)\ny","76d5fe30":"sns.jointplot(x=x['Brand'], y=x['Stars'], kind=\"kde\")","7cae7ee4":"plt.figure(figsize=(12,6))\nsns.boxplot(x=\"Country\", y=\"Brand\", data=x)","ff07cd0d":"features=['Style', 'Country'] # Subplot for count plot\nfig=plt.subplots(figsize=(25,20))\nfor i, j in enumerate(features):\n    plt.subplot(4, 2, i+1)\n    plt.subplots_adjust(hspace = 1.0)\n    sns.countplot(x=j,data = df)\n    plt.xticks(rotation=90)\n    plt.title(\"Ramen\")\n    \nplt.show()","252b73b7":"import seaborn as sns\nsns.kdeplot(data=x['Country'], shade=True)","7b6a03dc":"from sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split","1adb17f8":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=4)","de4ec47b":"# data normalization with sklearn\nfrom sklearn.preprocessing import MinMaxScaler\n\n# fit scaler on training data\nnorm = MinMaxScaler().fit(x_train)\n\n# transform training data\nX_train_norm = norm.transform(x_train)\n\n\n# transform testing dataabs\nX_test_norm = norm.transform(x_test)\n","ce5c1a1d":"# fit scaler on training data\nnorm = MinMaxScaler().fit(x_train)\n\n# transform training data\nX_train_norm = norm.transform(x_train)\nprint(\"Scaled Train Data: \\n\\n\")\nprint(X_train_norm)","b932f898":"# transform testing dataabs\nX_test_norm = norm.transform(x_test)\nprint(\"\\n\\nScaled Test Data: \\n\\n\")\nprint(X_test_norm)","1ad52003":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score","f73fc564":"from sklearn.tree import DecisionTreeClassifier\n# Create Decision Tree classifer object\nclf = DecisionTreeClassifier()\n# Train Decision Tree Classifer\nclf.fit(X_train_norm,y_train)","083affc2":"#Predict the response for test dataset\ny_pred = clf.predict(X_test_norm)\n\n\nprint(\"Accuracy:\",accuracy_score(y_test, y_pred))","ed4e1952":"from sklearn.neighbors import KNeighborsClassifier  \nclassifier= KNeighborsClassifier(n_neighbors=5, metric='minkowski', p=2 )  \nclassifier.fit(X_train_norm, y_train)  ","9087eee3":"y_pred= classifier.predict(X_test_norm)  \n#Creating the Confusion matrix  \nfrom sklearn.metrics import confusion_matrix  \nconfusion_matrix(y_test, y_pred) ","ebd8dada":"print(accuracy_score(y_test, y_pred))","03fa6c98":"from sklearn.cluster import KMeans\nkmeans = KMeans(n_clusters=4, n_init = 10, random_state=251)\nkmeans.fit(x)","cd5cdf4b":"centroids = kmeans.cluster_centers_\ncentroid_df = pd.DataFrame(centroids, columns = list(x) )","c9332b21":"centroid_df = pd.DataFrame(centroids, columns = list(x) )\ndf_labels = pd.DataFrame(kmeans.labels_ , columns = list(['labels']))","50c3e69b":"snail_df_labeled = x.join(df_labels)","0beb4301":"df_analysis = (snail_df_labeled.groupby(['labels'] , axis=0)).head(4177) \ndf_analysis.head()","07b7562c":"df_analysis.isnull().sum()","236792bf":"df_analysis = df_analysis.dropna()","7375ba63":"df_analysis.isnull().sum()","66f018ac":"from sklearn.model_selection import train_test_split  \n\nX= df_analysis.drop('labels',axis =1)\ny= df_analysis['labels']\n\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=1)","5f790cac":"from sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state = 0)\nclassifier.fit(X_train,y_train)","fcc2c88a":"# predict Model\ny_pred = classifier.predict(X_test)\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import classification_report\ncm = confusion_matrix(y_true=y_test,y_pred=y_pred)\nprint('Confusion Matrix \\n',cm)\naccuracy_score(y_test,y_pred)","c56bb39b":"# DTfrom sklearn.tree import DecisionTreeClassifier\nclassifier = DecisionTreeClassifier(criterion = 'gini',random_state = 0)\nclassifier.fit(X_train,y_train)\ny_pred = classifier.predict(X_test)\ncm = confusion_matrix(y_true=y_test,y_pred=y_pred)\nprint('Confusion Matrix \\n',cm)\nprint(accuracy_score(y_test,y_pred))","30abac4a":"rclf = RandomForestClassifier(n_estimators= 100)\nrclf.fit(X_train,y_train)\ny_pred = rclf.predict(X_test)\ncm = confusion_matrix(y_true=y_test,y_pred=y_pred)\nprint('Confusion Matrix \\n',cm)\nprint(accuracy_score(y_test,y_pred))","bf7931b4":"classifier = KNeighborsClassifier(n_neighbors= 5)\nclassifier.fit(X_train,y_train)","31645f4b":"y_pred = classifier.predict(X_test)\ncm = confusion_matrix(y_true=y_test,y_pred=y_pred)\nprint('Confusion Matrix \\n',cm)\nprint(accuracy_score(y_test,y_pred))","83912d91":"model = GaussianNB()\nmodel.fit(X_train,y_train)\npredicted = model.predict(X_test)\nprint('Predicted Value',predicted)","c67f7b00":"cm = confusion_matrix(y_true=y_test,y_pred=predicted)\nprint('Confusion Matrix \\n',cm)\nprint(accuracy_score(y_test,predicted))","3ecf9b41":"df.plot()","d198b6cd":"df.plot.bar()","c0c9eb89":"# Joint Plot","4af01b78":"Label encoding to convert string to numeric type","3a596ff1":"# Bar Plot","72ae83fb":"# Box Plot","737a6795":"# Count Plot"}}