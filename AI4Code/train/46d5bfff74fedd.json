{"cell_type":{"b946ce57":"code","318c7bf0":"code","d8805ab9":"code","49849f64":"code","83618f2c":"code","4913a756":"code","e1bd5302":"markdown","25dc7076":"markdown","c955b01b":"markdown","516b7fab":"markdown"},"source":{"b946ce57":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","318c7bf0":"!pip install kaggle-environments --upgrade -q","d8805ab9":"from kaggle_environments import make\n","49849f64":"%%writefile epsilon_greedy_0.py\n\nimport math\n\nlast_bandit = -1\ntotal_reward = 0\n\nsums_of_reward = None\nnumbers_of_selections = None\n\ndef agent(observation, configuration):    \n    global sums_of_reward, numbers_of_selections, last_bandit, total_reward\n\n    if observation.step == 0:\n        numbers_of_selections = [0] * configuration[\"banditCount\"]\n        sums_of_reward = [0] * configuration[\"banditCount\"]\n\n    if last_bandit > -1:\n        reward = observation.reward - total_reward\n        sums_of_reward[last_bandit] += reward\n        total_reward += reward\n\n    bandit = 0\n    max_upper_bound = 0\n    for i in range(0, configuration.banditCount):\n        if (numbers_of_selections[i] > 0):\n            upper_bound = sums_of_reward[i] \/ numbers_of_selections[i]\n        else:\n            upper_bound = 1e400\n        if upper_bound > max_upper_bound and last_bandit != i:\n            max_upper_bound = upper_bound\n            bandit = i\n            last_bandit = bandit\n\n    numbers_of_selections[bandit] += 1\n\n    if bandit is None:\n        bandit = 0\n\n    return bandit","83618f2c":"%%writefile epsilon_greedy_decaying.py\n\n#decay_rates = [0.99, 0.98, 0.97, 0.96, 0.95]\n\nlast_bandit = -1\ntotal_reward = 0\n\nsums_of_reward = None\nnumbers_of_selections = None\n    \ndef agent(observation, configuration):    \n    global sums_of_reward, numbers_of_selections, last_bandit, total_reward\n\n    if observation.step == 0:\n        numbers_of_selections = [0] * configuration[\"banditCount\"]\n        sums_of_reward = [0] * configuration[\"banditCount\"]\n\n    if last_bandit > -1:\n        reward = observation.reward - total_reward\n        sums_of_reward[last_bandit] += reward\n        total_reward += reward\n\n    eps_2 = 0\n\n    bandit = 0\n    max_upper_bound = 0\n    for i in range(0, configuration.banditCount):\n        if (numbers_of_selections[i] > 0):\n            eps_2 += 1\n            decay = 0.99*(0.001*eps_2) ** numbers_of_selections[i]\n            upper_bound = decay * sums_of_reward[i] \/ numbers_of_selections[i]\n        else:\n            upper_bound = 1e400\n        if upper_bound > max_upper_bound and last_bandit != i:\n            max_upper_bound = upper_bound\n            bandit = i\n            last_bandit = bandit\n\n    numbers_of_selections[bandit] += 1\n\n    if bandit is None:\n        bandit = 0\n\n    return bandit\n\n\n    ","4913a756":"env = make(\"mab\", debug=True)\nenv.run([\"..\/input\/santa-2020\/submission.py\", \"epsilon_greedy_decaying.py\"])\nenv.render(mode=\"ipython\", width=800, height=500)","e1bd5302":"# Preparing environment","25dc7076":"## Reference Notebook\n\nI took some sample from amazing notebooks, \n\n[Santa 2020: epsilon-greedy starter](https:\/\/www.kaggle.com\/xhlulu\/santa-2020-epsilon-greedy-starter)\n\n[Santa 2020 Starter](https:\/\/www.kaggle.com\/isaienkov\/santa-2020-starter)\n\nThe purpose is to figure out the decay value. ","c955b01b":"# Various Decay","516b7fab":"# Decay = 0"}}