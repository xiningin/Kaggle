{"cell_type":{"29df7738":"code","08eafd9f":"code","a00f748e":"code","cde4b978":"code","b0dfe54c":"code","b540b9c1":"code","df41aa9d":"code","1d0fb24e":"code","83975465":"code","ad7a80bb":"code","4a999c38":"code","5fb81090":"code","cddc9858":"code","dfcc21f0":"code","bcf4af04":"code","0364c748":"code","c4c308b5":"code","d58992f0":"code","583a7449":"code","e0624725":"code","5566e180":"code","a90163fc":"code","8cee8fd1":"code","2f6b2e0f":"code","88f156db":"code","c8b6588e":"code","2f76fa52":"code","5302c519":"code","db24e695":"code","9061c4fa":"code","e6015435":"code","53952968":"code","030a2b54":"code","759e951f":"code","1c08ddc4":"code","d0c37800":"code","582962b2":"code","cd5ab949":"code","264fed8f":"code","15b2c819":"code","ecda49c4":"markdown","9eb1d810":"markdown","ea488c3f":"markdown","4f347928":"markdown","bbfa3f5b":"markdown","f5ada5da":"markdown","fa1f647e":"markdown","101e1af3":"markdown","ceed9117":"markdown"},"source":{"29df7738":"!pip install autoviz\n!pip install xlrd","08eafd9f":"import os\nimport numpy as np\nimport pandas as pd\nimport scipy.stats as stats\n\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\n\nimport seaborn as sns \nsns.set_style(\"darkgrid\")\n\nfrom autoviz.AutoViz_Class import AutoViz_Class\nAV = AutoViz_Class()\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import  mean_squared_log_error\nfrom catboost import CatBoostRegressor\n\n\n\n%matplotlib inline","a00f748e":"dataset_path = '..\/input\/seoul-bike-rental-ai-pro-iti\/train.csv'\ndf = pd.read_csv(dataset_path)","cde4b978":"df.head()","b0dfe54c":"df.describe().T","b540b9c1":"df = df.drop_duplicates()\ndf.shape","df41aa9d":"df.isna().sum()","1d0fb24e":"df.info()","83975465":"\ndf['Date'] = pd.to_datetime(df['Date'],dayfirst = True)\n\ndf['Month']= df['Date'].dt.month\ndf['Day_of_week'] = df['Date'].dt.dayofweek\ndf['Week_of_year'] = df['Date'].dt.weekofyear\n\ndf = df[df['y'] != 0]","ad7a80bb":"df.shape","4a999c38":"df.head()","5fb81090":"fig = AV.AutoViz(dataset_path);","cddc9858":"fig = sns.distplot(df['y']);","dfcc21f0":"fig = sns.barplot(x=\"Hour\", y=\"y\", data=df);","bcf4af04":"df.columns","0364c748":"# Encoding\n\ndf = pd.get_dummies(df, columns=[\"Seasons\"])\n\ndf['Holiday']=np.where(df['Holiday'] == 'No Holiday', 0, df['Holiday'])\ndf['Holiday']=np.where(df['Holiday'] == 'Holiday', 1, df['Holiday']).astype(int)\n\ndf['Functioning Day']=np.where(df['Functioning Day'] == 'No', 0, df['Functioning Day'])\ndf['Functioning Day']=np.where(df['Functioning Day'] == 'Yes', 1, df['Functioning Day']).astype(int)\n\ndf['Rush_hour']= df['Hour'].apply(lambda x : 1 if (9<x<19) else(0))\ndf['Weekend'] = df['Day_of_week'].apply(lambda x : 1 if (x<5) else(0))","c4c308b5":"# Lag Features\n\ndf['Humidity(%)_lag_1'] = df['Humidity(%)'].shift(-1)\ndf['Humidity(%)_lag_2'] = df['Humidity(%)'].shift(-2)\ndf['Humidity(%)_lag_3'] = df['Humidity(%)'].shift(1)\ndf['Humidity(%)_lag_4'] = df['Humidity(%)'].shift(2)\n\n\ndf['Wind speed (m\/s)_lag_1'] = df['Wind speed (m\/s)'].shift(-1)\ndf['Wind speed (m\/s)_lag_2'] = df['Wind speed (m\/s)'].shift(-2)\ndf['Wind speed (m\/s)_lag_3'] = df['Wind speed (m\/s)'].shift(1)\ndf['Wind speed (m\/s)_lag_4'] = df['Wind speed (m\/s)'].shift(2)\n\ndf['Rainfall(mm)_lag_1'] = df['Rainfall(mm)'].shift(-1)\ndf['Rainfall(mm)_lag_2'] = df['Rainfall(mm)'].shift(-2)\ndf['Rainfall(mm)_lag_3'] = df['Rainfall(mm)'].shift(1)\ndf['Rainfall(mm)_lag_4'] = df['Rainfall(mm)'].shift(2)\n\ndf['Solar Radiation (MJ\/m2)_lag_1'] = df['Solar Radiation (MJ\/m2)'].shift(-1)\ndf['Solar Radiation (MJ\/m2)_lag_2'] = df['Solar Radiation (MJ\/m2)'].shift(-2)\ndf['Solar Radiation (MJ\/m2)_lag_3'] = df['Solar Radiation (MJ\/m2)'].shift(1)\ndf['Solar Radiation (MJ\/m2)_lag_4'] = df['Solar Radiation (MJ\/m2)'].shift(2)\n\ndf['Temperature(\ufffdC)_lag_1'] = df['Temperature(\ufffdC)'].shift(-1)\ndf['Temperature(\ufffdC)_lag_2'] = df['Temperature(\ufffdC)'].shift(-2)\ndf['Temperature(\ufffdC)_lag_3'] = df['Temperature(\ufffdC)'].shift(1)\ndf['Temperature(\ufffdC)_lag_4'] = df['Temperature(\ufffdC)'].shift(2)\n\n\n# Rolling Window\n\ndf['Humidity(%)_rolling_mean'] = df['Humidity(%)'].rolling(window=5).mean()\ndf['Wind speed (m\/s)_rolling_mean'] = df['Wind speed (m\/s)'].rolling(window=5).mean()\ndf['Rainfall(mm)_rolling_mean'] = df['Rainfall(mm)'].rolling(window=5).mean()\ndf['Solar Radiation (MJ\/m2)_rolling_mean'] = df['Solar Radiation (MJ\/m2)'].rolling(window=5).mean()\ndf['Temperature(\ufffdC)_rolling_mean'] = df['Temperature(\ufffdC)'].rolling(window=5).mean()","d58992f0":"del df['ID']\ndel df['Date']","583a7449":"df.columns","e0624725":"X = df.drop(['y','Dew point temperature(\ufffdC)','Functioning Day','Snowfall (cm)'], axis=1)\nY = df['y']\n\n\nX_train, X_val, y_train, y_val = train_test_split(X, Y, test_size = .1, random_state = 0)\n","5566e180":"#  Transformations\n\n\n\nX_train[\"Rainfall(mm)\"] = X_train[\"Rainfall(mm)\"].apply(np.log1p)\nX_val[\"Rainfall(mm)\"] = X_val[\"Rainfall(mm)\"].apply(np.log1p)\n\n\n\ny_train = np.log(y_train)\ny_val = np.log(y_val)","a90163fc":"print(X_train.shape)\nprint(X_val.shape)\nprint(y_train.shape)\nprint(y_val.shape)","8cee8fd1":"hyper_params = {\n    'random_state': 0,\n    'bootstrap_type': 'Bayesian',\n    'depth': 4,\n    'n_estimators': 1500,\n    'learning_rate':.13455,\n    'loss_function': 'RMSE',\n}\n\n","2f6b2e0f":"cb = CatBoostRegressor(**hyper_params)\n\nmodel=cb.fit(X_train, y_train, verbose=0)","88f156db":"# validation\nX_val_pred = model.predict(X_val)\n\nrmsle = np.sqrt(mean_squared_log_error(np.exp(y_val), np.exp(X_val_pred)))\nprint('RMSLE: %.3f' % rmsle)","c8b6588e":"# Prediction Plot\n\nplt.figure(figsize=(20,10))\nplt.plot(range(50),np.exp(y_val)[0:50], color = \"blue\")\nplt.plot(range(50),np.exp(X_val_pred)[0:50], color = \"red\")\nplt.legend([\"Actual\",\"prediction\"]) \nplt.title(\"Predicted vs True Value\")\nplt.xlabel(\"Record number\")\nplt.ylabel('target')\nplt.show()","2f76fa52":"sns.scatterplot(data=y_val, x=np.exp(X_val_pred), y=np.exp(y_val));","5302c519":"dataset_path2 = '..\/input\/seoul-bike-rental-ai-pro-iti\/test.csv'\ndf2 = pd.read_csv(dataset_path2)","db24e695":"df2.head()","9061c4fa":"df2['Date'] = pd.to_datetime(df2['Date'],dayfirst = True)\n\ndf2['Month']= df2['Date'].dt.month\ndf2['Day_of_week'] = df2['Date'].dt.dayofweek\ndf2['Week_of_year'] = df2['Date'].dt.weekofyear\n\n","e6015435":"df2['Humidity(%)_lag_1'] = df2['Humidity(%)'].shift(-1)\ndf2['Humidity(%)_lag_2'] = df2['Humidity(%)'].shift(-2)\ndf2['Humidity(%)_lag_3'] = df2['Humidity(%)'].shift(1)\ndf2['Humidity(%)_lag_4'] = df2['Humidity(%)'].shift(2)\n\n\n\ndf2['Wind speed (m\/s)_lag_1'] = df2['Wind speed (m\/s)'].shift(-1)\ndf2['Wind speed (m\/s)_lag_2'] = df2['Wind speed (m\/s)'].shift(-2)\ndf2['Wind speed (m\/s)_lag_3'] = df2['Wind speed (m\/s)'].shift(1)\ndf2['Wind speed (m\/s)_lag_4'] = df2['Wind speed (m\/s)'].shift(2)\n\n\ndf2['Rainfall(mm)_lag_1'] = df2['Rainfall(mm)'].shift(-1)\ndf2['Rainfall(mm)_lag_2'] = df2['Rainfall(mm)'].shift(-2)\ndf2['Rainfall(mm)_lag_3'] = df2['Rainfall(mm)'].shift(1)\ndf2['Rainfall(mm)_lag_4'] = df2['Rainfall(mm)'].shift(2)\n\ndf2['Solar Radiation (MJ\/m2)_lag_1'] = df2['Solar Radiation (MJ\/m2)'].shift(-1)\ndf2['Solar Radiation (MJ\/m2)_lag_2'] = df2['Solar Radiation (MJ\/m2)'].shift(-2)\ndf2['Solar Radiation (MJ\/m2)_lag_3'] = df2['Solar Radiation (MJ\/m2)'].shift(1)\ndf2['Solar Radiation (MJ\/m2)_lag_4'] = df2['Solar Radiation (MJ\/m2)'].shift(2)\n\ndf2['Temperature(\ufffdC)_lag_1'] = df2['Temperature(\ufffdC)'].shift(-1)\ndf2['Temperature(\ufffdC)_lag_2'] = df2['Temperature(\ufffdC)'].shift(-2)\ndf2['Temperature(\ufffdC)_lag_3'] = df2['Temperature(\ufffdC)'].shift(1)\ndf2['Temperature(\ufffdC)_lag_4'] = df2['Temperature(\ufffdC)'].shift(2)\n\n\ndf2['Humidity(%)_rolling_mean'] = df2['Humidity(%)'].rolling(window=5).mean()\ndf2['Wind speed (m\/s)_rolling_mean'] = df2['Wind speed (m\/s)'].rolling(window=5).mean()\ndf2['Rainfall(mm)_rolling_mean'] = df2['Rainfall(mm)'].rolling(window=5).mean()\ndf2['Solar Radiation (MJ\/m2)_rolling_mean'] = df2['Solar Radiation (MJ\/m2)'].rolling(window=5).mean()\ndf2['Temperature(\ufffdC)_rolling_mean'] = df2['Temperature(\ufffdC)'].rolling(window=5).mean()","53952968":"# Encoding\n\ndf2 = pd.get_dummies(df2, columns=[\"Seasons\"])\n\ndf2['Holiday']=np.where(df2['Holiday'] == 'No Holiday', 0, df2['Holiday'])\ndf2['Holiday']=np.where(df2['Holiday'] == 'Holiday', 1, df2['Holiday']).astype(int)\n\ndf2['Functioning Day']=np.where(df2['Functioning Day'] == 'No', 0, df2['Functioning Day'])\ndf2['Functioning Day']=np.where(df2['Functioning Day'] == 'Yes', 1, df2['Functioning Day']).astype(int)\n\n\ndf2['Rush_hour']= df2['Hour'].apply(lambda x : 1 if (9<x<19) else(0))\ndf2['Weekend'] = df2['Day_of_week'].apply(lambda x : 1 if (x<5) else(0))\n","030a2b54":"del df2['Date']","759e951f":"df2.columns","1c08ddc4":"X_test = df2.drop(['ID','Functioning Day','Snowfall (cm)','Dew point temperature(\ufffdC)'], axis=1)","d0c37800":"X_test.shape","582962b2":"y_test = model.predict(X_test)","cd5ab949":"df2['y'] = y_test\n\ndf2['y'] = np.exp((df2['y'])).astype(int)","264fed8f":"func_val_list = df2['Functioning Day'].tolist()\n\ndf2['y'] = df2['y'].mul(func_val_list, axis=0)","15b2c819":"df2[['ID', 'y']].to_csv('\/kaggle\/working\/submission.csv', index=False)","ecda49c4":"# Data Analysis","9eb1d810":"# Install packages: ","ea488c3f":"# Data Splitting","4f347928":"# Model Training","bbfa3f5b":"# Data Visualisation:","f5ada5da":"# Model Testing","fa1f647e":"# Submission File Generation","101e1af3":"# Data Manipulating:","ceed9117":"# Import the libraries"}}