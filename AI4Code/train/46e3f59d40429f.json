{"cell_type":{"6a6db078":"code","84d60702":"code","0dc1f5d8":"code","0deab7f2":"code","3c02aea9":"code","9fe21429":"code","0ca09a9e":"code","d191bb4a":"code","874af082":"code","43b84ac7":"code","642d0a84":"code","e2263d9a":"code","39070245":"code","6dbbb84c":"code","326d89f7":"code","558e7704":"code","4bd8e9cd":"code","41062578":"code","6950a3c6":"code","a2531f0b":"code","35716646":"code","245a46d9":"code","46b2d2ce":"code","1e06f1c2":"code","3412cd88":"code","fe85ff80":"code","074dbf10":"code","ff24c02e":"code","39fc72c3":"code","e8684bb0":"code","bea37c16":"code","fc365549":"code","41bb6bea":"code","8386c320":"code","aab4a8b3":"code","107cea85":"code","4641393b":"code","68939367":"code","ddf0633b":"code","0cfc8e90":"code","06f01bce":"code","48897ec5":"code","bf1a71ce":"code","4d0aac3b":"code","0e344815":"code","6f791e14":"code","5889e19d":"markdown","197b7190":"markdown","3e28259c":"markdown","cc5a5291":"markdown"},"source":{"6a6db078":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","84d60702":"#libraries\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom keras import layers,models","0dc1f5d8":"df_train = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')","0deab7f2":"df_train.shape","3c02aea9":"df_test.head()","9fe21429":"labels = df_train['label']\ndata = df_train.drop(columns=['label'])","0ca09a9e":"print(data.shape,labels.shape,df_test.shape)","d191bb4a":"#reshaping the train and test data\ndata = data.values.reshape(-1,28,28,1)\ndf_test = df_test.values.reshape(-1,28,28,1)","874af082":"print(data.shape,df_test.shape)","43b84ac7":"#normalizing the data\ndata = data\/255.0\ndf_test = df_test\/255.0","642d0a84":"#visualize some of data\n\nplt.figure(figsize=(10,10))\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.imshow(data[i])\n    plt.xlabel(\"NUmber is {}\".format(labels[i]))","e2263d9a":"labels.value_counts().plot(kind='bar');","39070245":"#train_test_split\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(data,labels,random_state=42,test_size=0.2)","6dbbb84c":"print(x_train.shape,y_train.shape)","326d89f7":"y_train.dtype","558e7704":"model = models.Sequential([\n    #cnn \n    layers.Conv2D(32,(3,3),activation='relu',input_shape=(28,28,1)),\n    layers.MaxPooling2D((2,2)),\n    \n    layers.Conv2D(64,(3,3),activation='relu'),\n    layers.MaxPooling2D((2,2)),\n    \n    layers.Conv2D(128,(3,3),activation='relu'),\n    layers.MaxPooling2D((2,2)),\n    \n    #dense layers\n    layers.Flatten(),\n    \n    layers.Dense(256,activation='relu'),\n    layers.Dropout(0.5),\n    \n    layers.Dense(128,activation='relu'),\n    layers.Dropout(0.5),\n    \n    layers.Dense(64,activation='relu'),\n    layers.Dropout(0.5),\n    \n    layers.Dense(10,activation='softmax')\n])","4bd8e9cd":"#complie the model\nmodel.compile(loss='sparse_categorical_crossentropy',optimizer='adam',metrics=['accuracy'])","41062578":"model.summary()","6950a3c6":"#callback \/ early stopping\ncallback = tf.keras.callbacks.EarlyStopping(monitor='val_accuracy',patience=3)","a2531f0b":"#training the model\nhist = model.fit(x_train,y_train,epochs=15,validation_split=0.1,callbacks=[callback])","35716646":"#testing the model\nmodel.evaluate(x_test,y_test)","245a46d9":"#visualize the models accuray\nplt.plot(hist.history['accuracy'])\nplt.plot(hist.history['val_accuracy'])\nplt.title(\"Model Accuracy\")\nplt.ylabel(\"Accuracy\")\nplt.xlabel(\"Epoch\")\nplt.legend(['Train','Val'],loc='upper left')\nplt.show()","46b2d2ce":"#visualize models loss\nplt.plot(hist.history['loss'])\nplt.plot(hist.history['val_loss'])\nplt.title(\"Model Lossy\")\nplt.ylabel(\"Loss\")\nplt.xlabel(\"Epoch\")\nplt.legend(['Train','Val'],loc='upper right')\nplt.show()","1e06f1c2":"#classification report \nfrom sklearn.metrics import classification_report,confusion_matrix\n\ntest_pred = model.predict(x_test)\ntest_pred = [np.argmax(i) for i in test_pred]\n\nprint(classification_report(test_pred,y_test))","3412cd88":"#confusion matrix\nprint(confusion_matrix(test_pred,y_test))","fe85ff80":"test_pred[:10]","074dbf10":"y_test = np.array(y_test,'int32')","ff24c02e":"plt.figure(figsize=(15,10))\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.imshow(x_test[i])\n    plt.xlabel(\"Actual: {}\".format(y_test[i]))\n    plt.ylabel(\"Predicted: {}\".format(test_pred[i]))","39fc72c3":"final_pred = model.predict(df_test)","e8684bb0":"final_pred = [np.argmax(i) for i in final_pred]","bea37c16":"final_pred[:10]","fc365549":"submission_format = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/sample_submission.csv\")\nsubmission_format.head()","41bb6bea":"len(submission_format.ImageId)","8386c320":"submission_format.ImageId.nunique()","aab4a8b3":"final_pred = pd.DataFrame(final_pred)\nfinal_pred.columns =['Label']","107cea85":"final = pd.concat([pd.Series(range(1,28001),name=\"ImageId\"),final_pred],axis=1)","4641393b":"final.head()","68939367":"from PIL import Image\nfrom PIL.Image import open","ddf0633b":"img = plt.imread('..\/input\/six-number\/6.jpg')\nplt.imshow(img);","0cfc8e90":"img = np.asarray(img)\nimg.shape","06f01bce":"x_test[1].shape","48897ec5":"from skimage.transform import resize\nresized_img=resize(img,(28,28,1))","bf1a71ce":"plt.imshow(resized_img);","4d0aac3b":"pred_man = model.predict(np.array([resized_img]))","0e344815":"pred_man","6f791e14":"np.argmax(pred_man)","5889e19d":"### Final test data","197b7190":"### using an outside image","3e28259c":"> Some plots","cc5a5291":"## Model"}}