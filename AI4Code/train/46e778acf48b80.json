{"cell_type":{"e791f317":"code","0b1329c6":"code","da59ade4":"code","db3b9dec":"code","4bd5dcff":"code","c21db199":"code","ade23a2e":"code","359fedba":"code","ace6e480":"code","770338eb":"code","f05ac1c2":"code","0d8bd395":"code","8bff43ca":"code","7e6abd40":"code","4a8de04d":"code","9a4a56ce":"code","6c1c40c2":"code","e0e51fa6":"code","63c4333d":"markdown"},"source":{"e791f317":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport matplotlib.pyplot as plt\n\nfrom IPython.display import clear_output\nfrom time import sleep\nimport os\n\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","0b1329c6":"train_dir = \"..\/input\/training\/training.csv\"\ntest_dir = \"..\/input\/test\/test.csv\"\nlook_dir = \"..\/input\/IdLookupTable.csv\"\ntrain_data = pd.read_csv(train_dir)\ntest_data = pd.read_csv(test_dir)\nlookup_data = pd.read_csv(look_dir)\nlookup_data.head()","da59ade4":"train_data.head().T","db3b9dec":"train_data.isnull().any().value_counts()","4bd5dcff":"train_data.fillna(method = \"ffill\",inplace = True)","c21db199":"train_data.isnull().any().value_counts()","ade23a2e":"imag = []\nfor i in range(7049):\n    img = train_data[\"Image\"][i].split(' ')\n    img = ['0' if x == ' ' else x for x in img]\n    imag.append(img)","359fedba":"#reshape it into float\nimage_list = np.array(imag, dtype = 'float')\nX_train = image_list.reshape(-1,96,96)","ace6e480":"plt.imshow(X_train[0],cmap = 'gray')\nplt.show()","770338eb":"#now lets separate labels\ntraining = train_data.drop('Image',axis = 1)\ny_train = []\nfor i in range(7049):\n    y = training.iloc[i,:]\n    y_train.append(y)\ny_train = np.array(y_train,dtype = 'float') ","f05ac1c2":"from keras.models import Sequential\nfrom keras.layers import Dense, Activation,Flatten,Dropout\n\nmodel = Sequential([Flatten(input_shape=(96,96)),\n                         Dense(128, activation=\"relu\"),\n                         Dropout(0.1),\n                         Dense(64, activation=\"relu\"),\n                         Dense(30)\n                         ])\nmodel.compile(optimizer = 'adam',loss = 'mse',metrics=['mae','accuracy'])","0d8bd395":"\n\nmodel.fit(X_train,y_train,epochs = 500,batch_size = 128,validation_split = 0.2)\n\n","8bff43ca":"#now lets prepare out test data\ntimage  = []\nfor j in range(1783):\n    imgi = test_data['Image'][j].split(' ')\n    imgi = ['0' if x == '' else x for x in imgi]\n    timage.append(imgi)\ntimage = np.array(timage,dtype = 'float')","7e6abd40":"X_test = timage.reshape(-1,96,96)\nplt.imshow(X_test[0])\nplt.show()","4a8de04d":"#lets Predict our result\ny_pred = model.predict(X_test)","9a4a56ce":"df = pd.DataFrame(y_pred)\ndf.columns = train_data.columns[0:30]\ndf = df.T\ndf.head()","6c1c40c2":"\n\nsub = lookup_data\n\nfor i in range(sub.shape[0]):\n    row = sub.loc[i,'FeatureName']\n    col = sub.loc[i,'ImageId'] - 1\n    sub.loc[i,'Location'] = df.loc[row, col]\nsub = sub.drop(['ImageId', 'FeatureName'],axis=1)\nsub.head()\n\n\n","e0e51fa6":"sub.to_csv('facial_2.csv',index=False)","63c4333d":"Check for the missing values"}}