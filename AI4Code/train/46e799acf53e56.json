{"cell_type":{"f1aa15c1":"code","59dbf20e":"code","ec10dfea":"code","722693f5":"code","e94ee44f":"code","9d04e41c":"code","5ba1640e":"code","8ea458ae":"code","581f5b3b":"code","a65e0297":"code","fd472a88":"code","a628d872":"code","7e798840":"code","002cad8c":"code","7d8d0451":"code","9916c5ff":"code","64518c5c":"code","38a3faa7":"code","2c631740":"code","7599295a":"code","c1d730ba":"code","e947eeb8":"code","ea9b28d0":"code","6fdf20fa":"code","e6789a35":"code","4be74bd1":"code","7866f29d":"code","714ac8b5":"code","bd4ff651":"code","4fea0094":"markdown","c621e978":"markdown","bfaa270c":"markdown","cad48614":"markdown","108515da":"markdown","4eac0fd2":"markdown","4501d9e0":"markdown","b327ed61":"markdown","235f12d7":"markdown","1771d3cd":"markdown","c127deda":"markdown","14b2f766":"markdown","201c77be":"markdown","b3bc4f3a":"markdown"},"source":{"f1aa15c1":"!pip install pyjanitor","59dbf20e":"import pandas as pd\nimport numpy as np\nimport janitor\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nimport plotly.io as pio\nimport missingno as msno\nimport warnings\nwarnings.filterwarnings(action='ignore')\npio.renderers.default = 'kaggle'\n\nfilepath = '\/kaggle\/input\/cvdcvd-vd\/Social_Network_Ads.csv'\ndef get_ads_data(filepath=filepath):\n    \"\"\"\n    :returns: DataFrame Pandas Object\n    \"\"\"\n    dataframe = pd.read_csv(filepath)\n    dataframe = dataframe \\\n        .clean_names() \\\n        .remove_empty() \\\n        .rename_column('estimatedsalary', 'estimated_salary')\n    \n    return dataframe\n\n\n# plot template\npio.templates.default = 'plotly_white'\ncolors = [\"#2b2d42\",\n    \"#8d99ae\",\"#edf2f4\",\n    \"#ef233c\",\"#d90429\"]\n\n# load dataframe\nads_df = get_ads_data()","ec10dfea":"# view dataframe\nads_df.head()","722693f5":"def get_age_groups():\n    \n    # pandas cut\n    age_cat = pd.cut(ads_df['age'], bins=6,\n        retbins=True)\n\n    # get cut as array\n    age_cat = np.asarray(age_cat)[0]\n    \n    # add bins to dataframe\n    age_bins = age_cat.astype('string')\n    age_bins.name = 'age_group'\n    age_df_added_bin = pd.concat([ads_df, age_bins], axis=1)\n    \n    # clean age group\n    age_group = age_df_added_bin['age_group']\\\n        .astype('string')\\\n        .str.strip('(]')\\\n        .str.split(',', expand=True)\\\n        .rename(columns={0: 'from', 1: 'to'})\n\n    # round values\n    age_group['from'] = round(\n        age_group['from'].astype('float'), 0)\n    age_group['to'] = round(\n        age_group['to'].astype('float'), 0)\n\n    # change type to int -> object\n    age_group['from'] = age_group['from'].astype('int')\n    age_group['to'] = age_group['to'].astype('int')\n    age_group['from'] = age_group['from'].astype('string')\n    age_group['to'] = age_group['to'].astype('string')\n    age_group = age_group['from'] + ' to ' + age_group['to']\n    \n    # concat\n    age_group = pd.concat([ads_df, age_group], axis=1)\n    age_group = age_group.rename(columns={0: 'age_group'})\n    \n    return age_group","e94ee44f":"# use function to get age groups\nads_df = get_age_groups()","9d04e41c":"# check missing data\nmsno.bar(ads_df, figsize=(9,6), color=colors[3]);","5ba1640e":"# check for duplicated data\nprint(\"Are the observations in the data unique?\", ads_df.user_id.is_unique)\n\n# summary statistics for feature age and estimated salary\nprint(\"Summary Stat:\")\nads_df[['age', 'estimated_salary']].describe().T","8ea458ae":"def plot_ages(dataframe):\n    \"\"\"\n    :returns: Plotly Bar for Age\n    \"\"\"\n    plot_ages_data = dataframe.age_group\\\n    .value_counts()\\\n    .reset_index()\\\n    .sort_naturally('index')\n    \n    title = '<b>Ad-Clicks<\/b><br> Age Group'\n    # set color\n    age_color = [colors[2]] * 6\n    age_color[2] = colors[4]\n    \n    # create figure\n    fig = go.Figure()\n    fig.add_trace(go.Bar(\n        x=plot_ages_data['index'],\n        y=plot_ages_data['age_group'],\n        text=plot_ages_data['age_group']))\n    \n    # tweak layout\n    fig.update_traces(marker_color=age_color, \n        marker=dict(line=dict(color='black')))\n    fig.update_yaxes(visible=False)\n    fig.update_xaxes(title='<b>Age Group<\/b>')\n    fig.update_layout(width=780, margin={\n        'pad': 10}, title=title)\n    show_figure = fig.show()\n    \n    return show_figure\n\nplot_ages(ads_df)","581f5b3b":"def plot_gender():\n    gender_counts = ads_df.gender.value_counts()\n    title = '<b>Ad Clicks<\/b><br> by Gender'\n    \n    fig = go.Figure()\n    fig.add_trace(go.Bar(\n        x=gender_counts.index,\n        y=gender_counts.values,\n        text=gender_counts.values,\n        textposition='outside'))\n    \n    fig_color = [colors[3], colors[2]]\n    # tweak layout\n    fig.update_traces(marker_color=fig_color, \n        marker=dict(line=dict(color='black')))\n    fig.update_yaxes(visible=False)\n    fig.update_xaxes(title='<b>Gender<\/b>')\n    fig.update_layout(width=780, margin={\n        'pad': 10}, title=title)\n    \n    fig.add_hline(y=196, line_dash='dot')\n    show_figure = fig.show()\n    \n    return show_figure\n\nplot_gender()","a65e0297":"def plot_salary_gender():\n    \"\"\"\n    :returns: Plotly Box Plot for Salary and Gender\n    \"\"\"\n    title = '<b>Salary | Gender<\/b>'\n    \n    male_salary = ads_df[ads_df.gender == 'Male']['estimated_salary']\n    female_salary = ads_df[ads_df.gender == 'Female']['estimated_salary']\n    \n    # create figure\n    fig = go.Figure()\n    \n    # add male trace\n    fig.add_trace(go.Box(\n        x=male_salary,\n        name='Male',\n        marker_color=colors[1]))\n    \n    # add female trace\n    fig.add_trace(go.Box(\n        x=female_salary,\n        name='Female',\n        marker_color=colors[4]))\n    \n    # tweak layout\n    fig.update_yaxes(visible=False)\n    fig.update_xaxes(title='<b>Annual Income ($)<\/b>')\n    fig.update_layout(width=780, margin={\n        'pad': 10}, title=title)\n    fig.update_traces(boxpoints='all')\n    show_figure = fig.show()\n    \n    return show_figure\n\nplot_salary_gender()","fd472a88":"def plot_salary_age(dataframe):\n    \"\"\"\n    :returns: Plotly Box Plot for Salary and Age\n    \"\"\"\n    dataframe = dataframe.sort_naturally('age_group')\n    \n    # create plot using express\n    title = '<b>Salary | Age<\/b>'\n    age_salary_plot = px.box(\n        dataframe, \n        y='age_group', \n        x='estimated_salary')\n    \n    # tweak layout\n    age_salary_plot\\\n        .update_xaxes(title='<b>Annual Income($)<\/b>')\\\n        .update_yaxes(title='<b>Age Group<\/b>')\\\n        .update_layout(title=title, width=780)\\\n        .update_traces(marker_color=colors[4])\n    \n    show_figure = age_salary_plot.show()\n    \n    return show_figure\n\nplot_salary_age(ads_df)","a628d872":"# drop user key\nads_df = ads_df.drop(columns='user_id')\n\n# seperate features\ndef get_features():\n    \"\"\"\n    returns: \n        feature(DataFrame), \n        class_feature(Series)\n    \"\"\"\n    feature = ads_df.loc[:, 'gender':'purchased'].\\\n        drop(columns='purchased')\n\n    feature = pd.concat(\n        [feature, ads_df['age_group']],\n        axis=1)\n    \n    class_feature = ads_df['purchased']\n    return feature, class_feature\n\nfeature, class_feature = get_features()\n\n# get class feature counts\nclass_counts = class_feature.value_counts()\nclass_counts.index = ['Did not Purchase', 'Purchased']\n\n# filter class\npurchased = ads_df[ads_df.purchased == 1]\nnot_purchased = ads_df[ads_df.purchased != 1]","7e798840":"def plot_big_numbers():\n    ad_clicks = class_counts.sum()\n    did_not_purchase = class_counts['Did not Purchase']\n    purchased = class_counts.Purchased\n    ratio_user_purchase = round(\n    class_counts.Purchased \/ class_counts['Did not Purchase'] * 100, 2)\n    \n    title='<b>What is the Ad-click Conversion Rate?<\/b>'\n    fig = go.Figure()\n    fig.add_annotation(\n            text='Ad-Clicks', \n            x=0,y=1,\n            showarrow=False)\\\n        .add_annotation(\n            text='Did not Purchase',\n            y=1,\n            showarrow=False)\\\n        .add_annotation(\n            text='Purchased',\n            x=5, y=1,\n            showarrow=False)\\\n        .add_annotation(\n            text=f'<b>{ad_clicks}<\/b>',\n            x=0,\n            font=dict(size=45, color=colors[1]),\n            showarrow=False)\\\n        .add_annotation(\n            text=f'{did_not_purchase}',\n            font=dict(size=45, color=colors[1]),\n            showarrow=False)\\\n        .add_annotation(\n            text=f'<b>{purchased}<\/b>',\n            x=5,\n            font=dict(size=45, color=colors[1]),\n            showarrow=False)\n    \n    # conversion number\n    fig.add_annotation(\n        text=f'<b>{ratio_user_purchase}%<\/b>',\n        font=dict(size=50, color=colors[4]), y=3)\n    fig.add_annotation(\n        text='<b>Conversion Rate<\/b>', \n        font=dict(size=14, color=colors[4]),\n        y=3,\n        x=2.2,\n        showarrow=False)\n    \n    fig.update_yaxes(visible=False)\n    fig.update_xaxes(visible=False)\n    fig.update_layout(title=title, width=780)\n    show_figure = fig.show()\n    \n    return show_figure\n\nplot_big_numbers()","002cad8c":"def plot_class_age():\n    \"\"\"\n    :returns: Plotly Bar Plot for Class Label and Age\n    \"\"\"\n    title = \"<b>Which Age Group<\/b>: Purchase our Product?\"\n    # create base index for xaxes\n    base_index = ads_df.age_group.value_counts()\\\n        .reset_index()\\\n        .sort_naturally('index')\\\n        .set_index('index').index\n    \n    # no purchase count\n    not_p_counts = not_purchased.age_group.value_counts()\\\n        .reset_index().sort_naturally('index')\n    \n    # purchase count\n    p_counts = purchased.age_group.value_counts()\\\n        .reset_index().sort_naturally('index')\n    \n    # create figure\n    fig = go.Figure()\n    # add traces\n    fig.add_trace(go.Bar(\n        x=base_index,\n        y=not_p_counts.age_group,\n        name='Did not Purchased',\n        marker_color=colors[2]))\n\n    fig.add_trace(go.Bar(\n        x=base_index,\n        y=p_counts.age_group,\n        name='Purchased',\n        marker_color=colors[3]))\n    \n    # tweak layout\n    fig.update_traces(\n        marker=dict(line=dict(color='black')))\n    fig.update_yaxes(visible=False)\n    fig.update_xaxes(title='<b>Age Group<\/b>')\n    fig.update_layout(width=780, margin={\n        'pad': 10}, title=title)\n    \n    show_figure = fig.show()\n    return show_figure\n\nplot_class_age()","7d8d0451":"def plot_purchase_power():\n    \"\"\"\n    :returns: Plotly Scatter Plot Purchase Power\n    \"\"\"\n    title = \"\"\" <b>Purchasing Power<\/b><br> of Individuals who purchased our products\"\"\"\n    \n    # get median salary\n    purchase_power = purchased.\\\n        groupby('age_group')['estimated_salary'].median()\n\n    # create figure\n    fig = go.Figure()\n    # add trace\n    fig.add_trace(go.Scatter(\n        x=purchase_power.index,\n        y=purchase_power.values,\n        mode='markers',\n        marker=dict(size=purchase_power.values\/2000,\n            line_width=0.8, color=purchase_power.values,\n            line_color='black', opacity=1, colorscale=np.flip(colors))))\n    \n    fig.update_xaxes(title='<b>Age Group<\/b>')\n    fig.update_yaxes(title='<b>Annual Income($)<\/b>')\n    fig.update_layout(width=780, margin={\n        'pad': 10}, title=title)\n    \n    return fig.show()\n\nplot_purchase_power()","9916c5ff":"def plot_corr_mat():\n    \"\"\"\n    :returns: Plotly annotated heatmap, correlation.\n    \"\"\"\n    title = '<b>Feature Correlation<\/b>'\n    \n    # create correlation table\n    array_corr = np.asarray(ads_df.corr())\n\n    # custom cmap\n    cmaps = [\"590d22\",\n        \"800f2f\",\"a4133c\",\"c9184a\",\n        \"ff4d6d\",\"ff758f\",\"ff8fa3\",\n        \"ffb3c1\",\"ffccd5\",\"fff0f3\"]\n    cmaps = ['#' + hex_colors for hex_colors in cmaps]\n\n    # get text names \n    text_names = list(ads_df.select_dtypes('int').\\\n        columns)\n\n    # create annotated_plot\n    fig = ff.create_annotated_heatmap(\n        z=np.round(array_corr, 2),\n        x=text_names,\n        y=text_names,\n        colorscale=cmaps)\n\n    # tweak layout\n    fig.update_layout(width=780, margin={\n        'pad': 10}, title=title)\n\n    show_figure = fig.show()\n    return show_figure\n\nplot_corr_mat()","64518c5c":"def scatter_class_label(dep_var, plt_title)-> go.Figure:\n    \"\"\"\n    :returns: Scatter Plotly Figure of Dependent Var\n    \"\"\"\n    title = plt_title\n    fig = px.scatter(ads_df, x=dep_var, y='purchased')\n    fig.update_layout(title=title, width=780)\n    fig.update_traces(marker_color=colors[4])\n    show_figure = fig.show()\n    \n    return show_figure    ","38a3faa7":"scatter_class_label('age', '<b>Age<\/b> and Purchased')","2c631740":"scatter_class_label('estimated_salary', '<b>Age<\/b> and Purchased')","7599295a":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix\nads_df = ads_df.iloc[:, :4]","c1d730ba":"# pandas get dummies\nads_df = pd.get_dummies(ads_df)\n\n# re-arrange dataframe\nads_df = ads_df[['gender_Female', 'gender_Male', 'age', 'estimated_salary', 'purchased']]\n\n# label dependent variables\nx_columns = ['x_' + columns for columns in ads_df.columns]\nads_df.columns = x_columns\n\n# label independent variable\nads_df = ads_df.rename(columns={'x_purchased': 'y_purchased'})","e947eeb8":"X = ads_df.loc[:, :'x_estimated_salary']\ny = ads_df['y_purchased']","ea9b28d0":"preview = pd.concat([y, X], axis=1)\npreview.sample(15, random_state=10).style.background_gradient(subset=['y_purchased'], cmap='Pastel1_r')","6fdf20fa":"# Split our data\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8, random_state=50)","e6789a35":"print(f\"\"\"\n    Train Test Split Output:\n    {'-' *  50}\n    Training Data: {X_train.size} \n    Test Data: {X_test.size}\n    y_Training Data: {y_train.size}\n    y_Test Data: {y_test.size}\n    \"\"\")","4be74bd1":"from sklearn.preprocessing import StandardScaler\n\nscale = StandardScaler()\nX_train = scale.fit_transform(X_train)\nX_test = scale.transform(X_test)","7866f29d":"# create logistic regression model\nlr = LogisticRegression(max_iter=1000).fit(X_train, y_train)\npred = lr.predict(X_test)\nprint(f'logistic model prediction_score: {lr.score(X_train, y_train)}')","714ac8b5":"def plot_confusion_matrix(y_test, pred)-> go.Figure:\n    \"\"\"\n    :returns: Plotly Confusion Matrix Heatmap\n    \"\"\"\n    title = '<b>Logistic Regression Model |<\/b><br>Confusion Matrix'\n    \n    # call confusion matrix function\n    cm = confusion_matrix(y_test, pred)\n    \n    # use custom cmaps\n    cmaps = [\"590d22\",\n        \"800f2f\",\"a4133c\",\"c9184a\",\n        \"ff4d6d\",\"ff758f\",\"ff8fa3\",\n        \"ffb3c1\",\"ffccd5\",\"fff0f3\"]\n    cmaps = ['#' + hex_colors for hex_colors in cmaps]\n    \n    # create column names\n    axes_cols = [\n        ['Positive', 'Negative'],\n        ['Positive', 'Negative']]\n    \n    # create figure\n    fig = ff.create_annotated_heatmap(\n        cm, x=axes_cols[1],\n        y=axes_cols[0],\n        colorscale=np.flip(cmaps))\n    \n    # tweak layout\n    fig.update_layout(\n        title=title,\n        height=700,\n        width=780,\n        margin=dict(pad=10))\n    fig.update_xaxes(title='Predicted')\n    fig.update_yaxes(title='Actual')\n    \n    show_figure = fig.show()\n    return show_figure","bd4ff651":"    plot_confusion_matrix(y_test, pred)","4fea0094":"## Train-Test Split","c621e978":"# <font color='#ef233c'>Salary<\/font> \/ Gender\n\n---","bfaa270c":"# <font color='#ef233c'> Ads <\/font> Data Analysis\n\n---","cad48614":"## Standardized Data","108515da":"# <font color='#ef233c'>Model<\/font> Building | Logistic Regression","4eac0fd2":"# <font color='#ef233c'>Ad-Click<\/font> | Purchased : Statistical Analysis","4501d9e0":"# <font color='#ef233c'>Age<\/font> Group\n\n---\n\n**Age Group Binning**\n(18 to 25] which is 18 > age = 25","b327ed61":"# <font color='#ef233c'>Ad-Click<\/font> | Purchased : Conversion Rate\n\n---","235f12d7":"# <font color='#ef233c'>Class Label<\/font> | Purchased\n\n---\n","1771d3cd":"## Encoding","c127deda":"# <font color='#ef233c'>Ad-Click<\/font> | Purchased : Purchasing Power\n\n---","14b2f766":"# <font color='#ef233c'>Gender<\/font> Clicks\n\n---","201c77be":"## Logistic Regression Model","b3bc4f3a":"# <font color='#ef233c'>Salary<\/font> \/ Age Group\n\n---"}}