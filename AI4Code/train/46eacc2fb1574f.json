{"cell_type":{"88fd689c":"code","2c641665":"code","29419b2a":"code","0c7dc27f":"code","c1883d51":"code","49cbe163":"code","32cb7e70":"code","0a54aeb4":"code","8e09925d":"markdown","66263e85":"markdown","4f74b6b7":"markdown","1b86abc6":"markdown","fc94f4f4":"markdown","bf974f8c":"markdown","25dd18c0":"markdown","a432c12d":"markdown","15abf4a7":"markdown"},"source":{"88fd689c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","2c641665":"from clustergrammer2 import net","29419b2a":"# generate random matrix\nnum_rows = 1000\nnum_cols = 1000\nnp.random.seed(seed=100)\nmat = np.random.rand(num_rows, num_cols)\n\n# make row and col labels\nrows = range(num_rows)\ncols = range(num_cols)\nrows = [str(i) for i in rows]\ncols = [str(i) for i in cols]\n\n# make dataframe \ndf = pd.DataFrame(data=mat, columns=cols, index=rows)","0c7dc27f":"df[df < 0.9] = 0\nsdf = df.to_sparse(fill_value=0)\nsdf.density","c1883d51":"net.load_df(df)\nnet.cluster()\nnet.widget()","49cbe163":"net.load_df(sdf)\nnet.cluster()\nnet.widget()","32cb7e70":"df.info()","0a54aeb4":"sdf.info()","8e09925d":"### Set to 90% sparse","66263e85":"It appears that Clustergrammer2 is able to work seamlessly with the sparse DataFrame.","4f74b6b7":"# Sparse Data Structures\nThis notebook is experimenting with some sparse data structures, e.g. the sparse Pandas DataFrame https:\/\/pandas.pydata.org\/pandas-docs\/stable\/user_guide\/sparse.html. \n\n### Sparse Pandas DataFrame\n\"The sparse objects exist for memory efficiency reasons. Suppose you had a large, mostly NA DataFrame [sdf]\"\n\n\"This sparse object takes up much less memory on disk (pickled) and in the Python interpreter. Functionally, their behavior should be nearly identical to their dense counterparts.\"\n\nBelow, we will test constructing a sparse Pandas DataFrame and try visualizing it using Clustergrammer - it appears to work.\n\n### Scipy Sparse Matrices to Sparse DataFrame\nIt seems that you can transfer from scipy sparse matrix to sparse Pandas DataFrame easily: \"Pandas supports creating sparse dataframes directly from scipy.sparse matrices.\".\n","1b86abc6":"# To Do\n* Compare size of Scipy sparse matrix with equivalent Pandas DataFrame\n* Find more examples, e.g. https:\/\/stackoverflow.com\/questions\/33457626\/huge-sparse-dataframe-to-scipy-sparse-matrix-without-dense-transform","fc94f4f4":"### Generate DataFrame with random data and make sparse\n-----------------------------------------------------\nNote that the index and column names are set to strings so that Clustergrammer can work with them.","bf974f8c":"### Visualize the Dense DataFrame using Clustergrammer2\n------------------------------","25dd18c0":"### Getting DataFrame Sizes\n\nhttps:\/\/stackoverflow.com\/questions\/18089667\/how-to-estimate-how-much-memory-a-pandas-dataframe-will-need","a432c12d":"### Visualize the Sparse DataFrame using Clustergrammer2\n------------------------------","15abf4a7":"### Import Libraries\n----------------------------"}}