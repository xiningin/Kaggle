{"cell_type":{"d712b649":"code","39873580":"code","7a770f0e":"code","1415075d":"code","02347d82":"code","2b2c5837":"code","bc96ca84":"code","862e3996":"markdown","944cea49":"markdown"},"source":{"d712b649":"import pandas as pd\nimport sklearn","39873580":"adult_teste = pd.read_csv(\"\/kaggle\/input\/adult-pmr3508\/train_data.csv\",\n        names=[\n        \"Id\",\"Age\", \"Workclass\", \"fnlwgt\", \"Education\", \"Education-Num\", \"Martial Status\",\n        \"Occupation\", \"Relationship\", \"Race\", \"Sex\", \"Capital Gain\", \"Capital Loss\",\n        \"Hours per week\", \"Country\", \"Target\"],\n        sep=r'\\s*,\\s*',\n        engine='python',\n        na_values=\"?\",\n        skiprows=[0])\n\nadult_treino = pd.read_csv(\"\/kaggle\/input\/adult-pmr3508\/train_data.csv\",\n        names=[\n        \"Id\",\"Age\", \"Workclass\", \"fnlwgt\", \"Education\", \"Education-Num\", \"Martial Status\",\n        \"Occupation\", \"Relationship\", \"Race\", \"Sex\", \"Capital Gain\", \"Capital Loss\",\n        \"Hours per week\", \"Country\", \"Target\"],\n        sep=r'\\s*,\\s*',\n        engine='python',\n        na_values=\"?\", \n        skiprows=[0])\n\nadult_treino","7a770f0e":"\n\npais_rpc = ['United-States', 6, 'Cambodia', 3, 'England', 5, 'Puerto-Rico', 5, 'Canada', 5,\n    'Germany', 6, 'Outlying-US(Guam-USVI-etc)', 5, 'India', 3, 'Japan', 6, 'Greece', 5,\n    'South', 4, 'China', 3, 'Cuba', 4, 'Iran', 4, 'Honduras', 3, 'Philippines', 3, 'Italy', 5,\n    'Poland', 4, 'Jamaica', 4, 'Vietnam', 3, 'Mexico', 4.5, 'Portugal', 5, 'Ireland', 5,\n    'France', 5, 'Dominican-Republic', 4, 'Laos', 3, 'Ecuador', 4, 'Taiwan', 5, 'Haiti', 3,\n    'Columbia', 4, 'Hungary', 4, 'Guatemala', 4, 'Nicaragua', 3, 'Scotland', 5, 'Thailand', 4,\n    'Yugoslavia', 4, 'El-Salvador', 4, 'Trinadad&Tobago', 4, 'Peru', 4, 'Hong', 5,\n    'Holand-Netherlands', 5]\n\nraca = ['White', 0, 'Asian-Pac-Islander',  1, 'Amer-Indian-Eskimo', 1, 'Other', 2, 'Black', 2]\n\nclasse = ['Private', 7, 'Self-emp-not-inc', 5, 'Self-emp-inc', 5, 'Federal-gov', 6, 'Local-gov', 4, 'State-gov', 5,\n    'Without-pay', -5, 'Never-worked', -5]\n\nrelacao= ['Wife', 4, 'Own-child', 5,'Husband', 3,'Not-in-family', 1,'Other-relative', 2,'Unmarried', 0]\n\nocupacao=['Tech-support', 2,'Craft-repair', 2,'Other-service', 2,'Sales', 3,'Exec-managerial', 5,'Prof-specialty', 5,\n   'Handlers-cleaners', 2,'Machine-op-inspct', 2,'Adm-clerical', 4,'Farming-fishing', 1,'Transport-moving', 2,\n   'Priv-house-serv', 2,'Protective-serv', 4,'Armed-Forces', 5]\n\nstatus = ['Married-civ-spouse', 4,'Divorced', 1,'Never-married', 0,'Separated', 2,'Widowed', 6,\n          'Married-spouse-absent', 3,'Married-AF-spouse', 5]\n\nadult_treino=adult_treino.replace(['Male', 'Female'],[1, 0])\nadult_treino=adult_treino.replace(['<=50K', '>50K'],[1, 0])\n\nadult_teste=adult_teste.replace(['Male', 'Female'],[1, 0])\nadult_teste=adult_teste.replace(['<=50K', '>50K'],[1, 0])\n\n\n\ndef substitui(lista):\n    l_old=[]\n    l_new=[]\n    for i in range(len(lista)):\n        if i%2 == 0:\n            l_old.append(lista[i])\n        else:\n            l_new.append(lista[i])\n        i+=1\n    return(l_old, l_new)\n\nlista_rel, lista_num_rel = substitui(relacao)\nadult_treino = adult_treino.replace(lista_rel, lista_num_rel)\nadult_teste = adult_teste.replace(lista_rel, lista_num_rel)\n   \nlista_paises, lista_rpc=substitui(pais_rpc)\nadult_treino = adult_treino.replace(lista_paises, lista_rpc)\nadult_teste = adult_teste.replace(lista_paises, lista_rpc)\n\nlista_raca, lista_num_raca=substitui(raca)\nadult_treino = adult_treino.replace(lista_raca, lista_num_raca)\nadult_teste = adult_teste.replace(lista_raca, lista_num_raca)\n\nlista_classe, lista_num_classe=substitui(classe)\nadult_treino=adult_treino.replace(lista_classe,lista_num_classe)\nadult_teste=adult_teste.replace(lista_classe,lista_num_classe)\n\nlista_ocup, lista_num_ocup=substitui(ocupacao)\nadult_treino=adult_treino.replace(lista_ocup, lista_num_ocup)\nadult_teste=adult_teste.replace(lista_ocup, lista_num_ocup)\n\nlista_status, lista_num_status=substitui(status)\nadult_treino=adult_treino.replace(lista_status, lista_num_status)\nadult_teste=adult_teste.replace(lista_status, lista_num_status)\n\nadult_treino.mean(axis = 0, skipna = True)\nadult_teste.mean(axis = 0, skipna = True)\n\n","1415075d":"dados_treino=adult_treino.drop('Education', axis=1)\ndados_teste=adult_teste.drop('Education', axis=1)\ndados_treino=dados_treino.drop('Id', axis=1)\ndados_teste=dados_teste.drop('Id', axis=1)\ndados_treino=dados_treino.drop(0, axis=0)\ndados_teste=dados_teste.drop(0, axis=0)\ndados_treino.dropna(inplace=True)\ndados_teste.dropna(inplace=True)\n\ndados_treino['Workclass'].fillna(6.433653, inplace = True)\ndados_treino['Occupation'].fillna(3.176476, inplace = True)\ndados_treino['Country'].fillna(5.848349, inplace = True)\ndados_treino.isnull().sum(axis = 0)\ndados_treino.drop_duplicates(inplace=True)\n\ndados_teste['Workclass'].fillna(6.433653, inplace = True)\ndados_teste['Occupation'].fillna(3.176476, inplace = True)\ndados_teste['Country'].fillna(5.848349, inplace = True)\ndados_teste.isnull().sum(axis = 0)\ndados_teste.drop_duplicates(inplace=True)\n\ndados_treino.dropna(inplace=True)\ndados_teste.dropna(inplace=True)\n\n\ndados_treino\n","02347d82":"# KNN\n\n\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import accuracy_score\n\n\nXtreino = dados_treino[[\"Age\", \"Workclass\", \"Education-Num\", \"Martial Status\",\n        \"Occupation\",\"Race\",\"Sex\", \"Capital Gain\", \"Capital Loss\",\n        \"Hours per week\", \"Country\"]]\nYtreino= dados_treino.Target\nXteste = dados_teste[[\"Age\", \"Workclass\", \"Education-Num\", \"Martial Status\",\n        \"Occupation\",\"Race\", \"Sex\", \"Capital Gain\", \"Capital Loss\",\n        \"Hours per week\", \"Country\"]]\nYteste=dados_teste.Target\n\n\nknn = KNeighborsClassifier(n_neighbors=25, p=1)\nknn.fit(Xtreino,Ytreino)\nscores = cross_val_score(knn, Xtreino, Ytreino, cv=10)\nscores\nYtestePred = knn.predict(Xteste)\naccuracy_score(Yteste,YtestePred)","2b2c5837":"# REDES NEURAIS\n\nfrom sklearn.neural_network import MLPClassifier\n\nmlp = MLPClassifier(solver=\"adam\", alpha=0.0001, hidden_layer_sizes=(5,),\n                   random_state=1, learning_rate='constant', learning_rate_init=0.01,\n                   max_iter=50, activation='logistic', momentum=0.9,verbose=True,\n                   tol=0.0001)\n\nmlp.fit(Xtreino, Ytreino)\nsaidas = mlp.predict(Xteste)\n\n\nprint(\"Score: \", (saidas ==Yteste ).sum()\/len(Xteste))\n\n\n","bc96ca84":"# SVM\n\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.svm import SVC\n\nsvmClassifier = SVC()\nsvmClassifier.fit(Xtreino,Ytreino)\nprediction = svmClassifier.predict(Xteste)\nprint(confusion_matrix(Yteste, prediction))\n\nprint(classification_report(Yteste, prediction))\nprint('Score =',round(accuracy_score(Yteste, prediction), 2))\n\n","862e3996":"adult","944cea49":"Os dados foram tratados olhando a base e substituindo (usando uma fun\u00e7\u00e3o escrita por mim) valores qualitativos por numeros. Exemplo: os numeros associados a pa\u00edses, foram baseados no PIB.\nOs classificadores utilizados foram: KNN, rede neural e SVM.\n\n**KNN**: na primeira entrega meu KNN ficou incompleto. Fiz a atividade semanas antes da entrega, mas na hora de passar para o kaggle, encontrei dificuldade. Agora, entendendo melhor o kaggle, tive tempo de fazer direitinho aquilo que queria e consegui um algor\u00edtmo bom. \n\n**Redes neurais**: Confesso que fiquei surpreso com o desempenho, esperava muito mais. Acredito que o fato de eu n\u00e3o ter mudado valores default da fun\u00e7\u00e3o MLPClassifier ajudou a ter esse baixo desempenho, talvez, \"brincar\" um pouco mais com esses parametros aumentaria o score.\n\n**SVM**: O svm obteve o melhor score, mas demora muito para gerar os resultados, mais que os outros classificadores e isso torna ele invi\u00e1vel para uma base estupidamente grande"}}