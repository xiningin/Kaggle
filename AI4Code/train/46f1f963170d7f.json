{"cell_type":{"11eb59d7":"code","cdbe8976":"code","bd226984":"code","9f23af39":"code","0a6b0cdb":"code","139158dc":"code","2d872189":"code","ef4c521f":"code","6643f183":"code","30076c96":"code","b25fd3ad":"code","74899a73":"code","b2520631":"code","06941e50":"code","0afe8908":"code","7090b692":"code","72528954":"code","e7312168":"code","4bcd2dfe":"code","6e11d8f1":"code","1ad63f07":"code","3456a111":"code","86df2531":"code","4f81c8dc":"code","254a7668":"code","8e87691e":"code","49f2e958":"code","d84ed1eb":"code","59cb746e":"code","df19b95a":"code","51dc70c4":"code","f20775dd":"code","6c52e89c":"code","240b1adc":"code","440d7ee0":"markdown","7425f876":"markdown","efb8db67":"markdown","c9bf7e38":"markdown","df9e3390":"markdown","14166f7f":"markdown","262620d4":"markdown","f289a5ac":"markdown","558f0ca9":"markdown","2ae488c9":"markdown","069cbf56":"markdown","ac691156":"markdown","bb1db9ad":"markdown","73307d68":"markdown","12f7061e":"markdown","c8505867":"markdown","47a2ea26":"markdown","bec56d29":"markdown","0febd12a":"markdown","663aaa51":"markdown","e60ebe63":"markdown","4ee87467":"markdown","f77be2a9":"markdown","d309b5f8":"markdown","0a7d9402":"markdown","f479bdfc":"markdown"},"source":{"11eb59d7":"from IPython.display import HTML\nf = open(\"..\/input\/notebookassets\/blue.css\").read()\nHTML(f\"<style>{f}<\/style>\")","cdbe8976":"! pip install -q rich\n! pip install -q dabl\n! echo \"Done Installing.\"","bd226984":"import numpy as np\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nimport random\n\nfrom rich.progress import track\nfrom rich import print\n\nimport dabl\n\nwarnings.simplefilter(\"ignore\")\npd.set_option('display.max_columns', 500)\npd.set_option('display.max_rows', 500)\n\nsns.set_style(\"darkgrid\")\nmatplotlib.rcParams['font.size'] = 14\nmatplotlib.rcParams['figure.figsize'] = (9, 5)\nmatplotlib.rcParams['figure.facecolor'] = '#00000000'\n\ncmap = plt.get_cmap('tab20b')\ncolors = [cmap(i) for i in np.linspace(0, 1, 15)]\n\nhfont = {'fontname':'DejaVu Sans', 'fontsize': 15}\nshfont = {'fontname':'DejaVu Sans', 'fontsize': 13}","9f23af39":"data = pd.read_csv(\"..\/input\/heart-disease-uci\/heart.csv\")\ndata.head()","0a6b0cdb":"data.info()","139158dc":"data.describe()","2d872189":"print(f\"[black]There are: [\/black][bold red]{data.isna().sum().max()}[\/bold red][black] maximum [\/black][red]NULL[\/red][black] values in the dataset[\/black]\")","ef4c521f":"plt.figure(figsize=(9, 8))\nsns.histplot(data['age'], color='#7b00ff', kde=True)\nplt.title(f\"Distribution of Ages [ \u03bc : {data['age'].mean():.2f}, \u03c3 : {data['age'].std():.2f} ]\")\nplt.xlabel(\"Age\")\nplt.show()","6643f183":"labels = ['Male', 'Female']\nvalues = data['sex'].value_counts().tolist()\npie_colors = ['#0008ff', '#e833c6']\n\nplt.figure(figsize=(9, 8))\nplt.pie(x=values, labels=labels, autopct=\"%1.2f%%\", colors=pie_colors, textprops=shfont)\nplt.title(\"Gender Distribution\", **hfont)\nplt.show()","30076c96":"labels = data['cp'].value_counts().index.tolist()\nvalues = data['cp'].value_counts().tolist()\npie_colors = ['#1c1f7a', '#1117b2', '#0008ff', '#5e63f2']\n\nplt.figure(figsize=(9, 8))\n\n_, _, ats = plt.pie(x=values, labels=labels, autopct=\"%1.2f%%\", colors=pie_colors, textprops=shfont, startangle=90)\nfor at in ats:\n    at.set_color('white')\n    \nplt.title(\"Chest Pain Type\", **hfont)\nplt.show()","b25fd3ad":"plt.figure(figsize=(9, 8))\nsns.histplot(data['trestbps'], color='#3662db', kde=True)\nplt.title(f\"Distribution of Resting BP [ \u03bc : {data['trestbps'].mean():.2f}, \u03c3 : {data['trestbps'].std():.2f} ]\")\nplt.xlabel(\"Resting BP\")\nplt.show()","74899a73":"plt.figure(figsize=(9, 8))\nsns.histplot(data['chol'], color='#25058c', kde=True)\nplt.title(f\"Distribution of Cholestrol [ \u03bc : {data['chol'].mean():.2f}, \u03c3 : {data['chol'].std():.2f} ]\")\nplt.xlabel(\"Cholestrol Level\")\nplt.show()","b2520631":"labels = ['fbs < 120 mg\/dl', 'fbs > 120 mg\/dl']\nvalues = data['fbs'].value_counts().tolist()\npie_colors = ['#d893ed', '#d363f2']\n\nplt.figure(figsize=(9, 8))\n\n_, _, ats = plt.pie(x=values, labels=labels, autopct=\"%1.2f%%\", colors=pie_colors, textprops=shfont, startangle=90)\nfor at in ats:\n    at.set_color('white')\n    \nplt.title(\"Fasting Blood Sugar\", **hfont)\nplt.show()","06941e50":"labels = data['restecg'].value_counts().index.tolist()\nvalues = data['restecg'].value_counts().tolist()\n# pie_colors = ['#d893ed', '#d363f2']\n\nplt.figure(figsize=(9, 8))\n\n_, _, ats = plt.pie(x=values, labels=labels, autopct=\"%1.2f%%\", colors=colors, explode=[0, 0, 0], textprops=shfont)\nfor at in ats:\n    at.set_color('white')\n    \nplt.title(\"Resting ECG Result Distribution\", **hfont)\nplt.show()","0afe8908":"plt.figure(figsize=(9, 8))\nsns.histplot(data['thalach'], color='#9f69ea', kde=True)\nplt.title(f\"Max. Heart Rate Achieved [ \u03bc : {data['thalach'].mean():.2f}, \u03c3 : {data['thalach'].std():.2f} ]\")\nplt.xlabel(\"Maximum Heart Rate\")\nplt.show()","7090b692":"labels = ['Angina Not Recorded', 'Angina Recorded']\nvalues = data['exang'].value_counts().tolist()\n\nplt.figure(figsize=(9, 8))\n\n_, _, ats = plt.pie(x=values, labels=labels, autopct=\"%1.2f%%\", colors=['#7faaef', '#0061ff'], textprops=shfont)\nfor at in ats:\n    at.set_color('white')\n    \nplt.title(\"Presence of Exercise Induced Angina\", **hfont)\nplt.show()","72528954":"plt.figure(figsize=(9, 8))\nsns.histplot(data['oldpeak'], color='#0026ff', kde=True)\nplt.title(f\"ST Depression [ \u03bc : {data['oldpeak'].mean():.2f}, \u03c3 : {data['oldpeak'].std():.2f} ]\")\nplt.xlabel(\"ST Depression\")\nplt.show()","e7312168":"plt.figure(figsize=(9, 8))\nsns.countplot(data['ca'], color='#c85ff4')\nplt.title(f\"Number of Major Vessels [ \u03bc : {data['ca'].mean():.2f}, \u03c3 : {data['ca'].std():.2f} ]\")\nplt.xlabel(\"Number of Major Vessels\")\nplt.ylabel(\"Count\")\nplt.show()","4bcd2dfe":"plt.figure(figsize=(9, 8))\nsns.countplot(data['thal'], color='aqua')\nplt.title(f\"THAL [ \u03bc : {data['thal'].mean():.2f}, \u03c3 : {data['thal'].std():.2f} ]\")\nplt.xlabel(\"THAL Result\")\nplt.ylabel(\"Count\")\nplt.show()","6e11d8f1":"labels = ['Cardiovascular Event Present', 'Cardiovascular Event Not Present']\nvalues = data['target'].value_counts().tolist()\npie_colors = ['#25c9ea', '#5e77f2']\n\nplt.figure(figsize=(9, 8))\n\n_, _, ats = plt.pie(x=values, labels=labels, autopct=\"%1.2f%%\", colors=pie_colors, textprops=shfont)\nfor at in ats:\n    at.set_color('white')\n    \nplt.title(\"Target Value Distribution\", **hfont)\nplt.show()","1ad63f07":"data_temp = data.copy(deep=True)\ndata_temp['sex'] = data['sex'].map({1: 'Male', 0: 'Female'})\n\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(9, 5))\nsns.boxplot(x='sex', y='age', data=data_temp, ax=ax[0], palette='tab20b')\nax[0].set_title(\"Box Plot of Age vs Sex\")\nax[0].set_xlabel(\"Sex\")\nax[0].set_ylabel(\"Age\")\n\nsns.violinplot(x='sex', y='age', data=data_temp, ax=ax[1], palette='tab20b_r')\nax[1].set_title(\"Violin Plot of Age vs Sex\")\nax[1].set_xlabel(\"Sex\")\nax[1].set_ylabel(\"Age\")\n\nplt.show()","3456a111":"plt.figure(figsize=(7, 7))\nsns.kdeplot(x=data['trestbps'], y=data['chol'], shade=True, color='blue')\nplt.xlabel(\"Resting BP\")\nplt.ylabel(\"Cholestrol Level\")\nplt.title(\"KDE Plot between Cholestrol and Resting BP\")\n\nplt.show()","86df2531":"print(\"[red bold]Joint-Plot between Resting BP and Cholestrol[\/red bold]\")\nsns.jointplot(x=data['trestbps'], y=data['chol'], color='darkblue', kind='kde')\nplt.show()","4f81c8dc":"print(\"[red bold]Joint-Plot between Cholestrol and Age Separated by Gender[\/red bold]\")\nsns.jointplot(x='age', y='chol', data=data_temp, color='purple', hue='sex', size=8)\nplt.show()","254a7668":"avg_male_age = data_temp[data_temp['sex'] == 'Male']['age'].mean()\navg_female_age = data_temp[data_temp['sex'] == 'Female']['age'].mean()\n\nplt.figure(figsize=(16, 6))\n\n# Draw KDE Plots\nsns.kdeplot(data_temp.loc[data_temp['sex'] == 'Male', 'age'], label = 'Male', shade=True, color='darkred')\nsns.kdeplot(data_temp.loc[data_temp['sex'] == 'Female', 'age'], label = 'Female', shade=True, color='darkblue')\n\n# Draw Verticals Lines showing averages of both\nplt.axvline(avg_male_age, color='aqua', linestyle='-', linewidth=1)\nmin_ylim, max_ylim = plt.ylim()\nplt.text(avg_male_age-14, max_ylim*0.93, 'Avg. Male Age: {} yrs'.format(int(avg_male_age)))\n\nplt.axvline(avg_female_age, color='magenta', linestyle='-', linewidth=1)\nmin_ylim, max_ylim = plt.ylim()\nplt.text(avg_female_age*1.05, max_ylim*0.93, 'Avg. Female Age: {} yrs'.format(int(avg_female_age)))\n\nplt.title(\"Age-Gender KDE Plot\")\nplt.xlabel(\"Age\")\nplt.legend()\nplt.show()","8e87691e":"print(\"[red bold]Joint-Plot between Oldpeak and Cholestrol Levels[\/red bold]\")\nsns.jointplot(x=data['oldpeak'], y=data['chol'], color='magenta', kind='kde')\nplt.show()","49f2e958":"data_temp['target'] = data_temp['target'].astype(int).map({0: 'No Problem', 1:'Problem'})\n\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(9, 5))\nsns.boxplot(x='target', y='age', data=data_temp, ax=ax[0], palette='tab20')\nax[0].set_title(\"Box Plot of Age vs Target\")\nax[0].set_xlabel(\"Target\")\nax[0].set_ylabel(\"Age\")\n\nsns.violinplot(x='target', y='age', data=data_temp, ax=ax[1], palette='tab20b')\nax[1].set_title(\"Violin Plot of Age vs Target\")\nax[1].set_xlabel(\"Target\")\nax[1].set_ylabel(\"Age\")\n\nplt.show()","d84ed1eb":"plt.style.use(\"classic\")\ndabl.plot(data, target_col='target')","59cb746e":"# Now let's split the data\nfeats = data.drop(['target'], axis=1).values\nfeats = (feats - feats.mean()) \/ feats.std()\ntargets = data['target'].values\n\ntrainX = feats[:290]\ntrainY = targets[:290]\n\nvalidX = feats[290:]\nvalidY = targets[290:]\n\nprint(f\"[black]Training Data Shapes:[\/black] {trainX.shape, trainY.shape}\")\nprint(f\"[black]Validation Data Shapes:[\/black] {validX.shape, validY.shape}\")","df19b95a":"class LogisticRegression:\n    \"\"\"\n    This is the Logistic Regression Model Class.\n    \"\"\"\n    def __init__(self, learning_rate, num_iters, fit_intercept = True, verbose = True):\n        self.learning_rate = learning_rate\n        self.num_iters = num_iters\n        self.fit_intercept = fit_intercept\n        self.verbose = verbose\n    \n    def __repr__(self):\n        return f\"[black]LogisticRegression Object with [lr: {self.learning_rate}, num_iters: {self.num_iters}][\/black]\"\n    \n    def __add_intercept(self, X):\n        intercept = np.ones((X.shape[0],1))\n        return np.concatenate((intercept,X),axis=1)\n    \n    def __sigmoid(self,z):\n        return 1\/(1+np.exp(-z))\n    \n    def __loss(self, h, y):\n        return (-y * np.log(h) - (1-y) * np.log(1-h)).mean()\n  \n    def fit(self, X, y):\n        if self.fit_intercept:\n            X = self.__add_intercept(X)\n        self.theta = np.random.rand(X.shape[1])  \n        for i in track(range(self.num_iters), description=f\"[bold red]Training...\"):\n            z = np.dot(X,self.theta)\n            h = self.__sigmoid(z)\n            gradient = np.dot(X.T,(h-y))\/y.size\n\n            self.theta -= self.learning_rate * gradient\n\n            z = np.dot(X,self.theta)\n            h = self.__sigmoid(z)\n            loss = self.__loss(h,y)\n            \n            if i==0:\n                print(f\"[black]Initial loss:[\/black]   {loss}\")\n            if i == self.num_iters - 1:\n                print(f\"[black]Final loss:     [\/black]{loss}\")\n            \n        return self.theta\n    \n    def predict_probability(self,X):\n        if self.fit_intercept:\n            X = self.__add_intercept(X)\n        return self.__sigmoid(np.dot(X,self.theta))\n    \n    def predict(self,X):\n        return (self.predict_probability(X).round())","51dc70c4":"model = LogisticRegression(learning_rate = 0.1, num_iters=150000, verbose=True)\nprint(model)","f20775dd":"# Train the model\nmodel_weights = model.fit(trainX, trainY)","6c52e89c":"preds = model.predict(validX)\nprint(f\"[black]Validation Accuracy:[\/black] {(validY == preds).mean()*100:.2f} %\")","240b1adc":"print(\"[bold green]UNDER WORK! MORE CONTENT TO BE ADDED SOON![\/bold green]\")","440d7ee0":"### Number of Major Vessels (ca)\n\nThis represents the number of major vessels in the patient's body covered by flourosopy.\n\nThis variable is continuous but the values are discrete and in the range (0-4)","7425f876":"## Imports libraries and Data \ud83d\udcda","efb8db67":"#### Check Null Values in the Data","c9bf7e38":"### Age vs Gender Kernel Density Estimation Plot","df9e3390":"### Fasting Blood Sugar (fbs) \ud83c\udf6f\n\nThis represents if fasting blood sugar level in a patient is > 120 mg\/dl.\nThis is a continuous variable.","14166f7f":"### Sex \u2640\u2642\n\nThis is the Gender Column, the values here are categorical (0: Female, 1: Male)","262620d4":"### Relationship between Age and Cholestrol\n\nLet's now visualize the relationship between Age and Cholestrol levels.","f289a5ac":"### Resting ECG (restecg) \ud83d\udc93\n\nThis represents Resting Electrocardiographic Results of a patient.\nThis variable is Categorical.","558f0ca9":"### 1. Logistic Regression from Scratch\n\nBelow code is Logistic Regression from Scratch using only numpy.\n\nIt's not supposed to perform better, but I am just doing it for the concept of it.","2ae488c9":"## Modelling \ud83d\udcf3\n\nLet's now do some basic modelling and see how they perform on this data.","069cbf56":"### Relationship Between Resting BP and Cholestrol\n\nNow let's turn towards Resting Blood Pressure and Cholestrol Levels.","ac691156":"### Chest Pain Type (cp) \n\nThis represents the class (or type) of Chest Pain that the patient has experienced or is experiencing.\nThis variable is also categorical. It has 4 categories.","bb1db9ad":"### Age Column \ud83d\udc74\n\n\nLet's analyze the age column and later we'll see how it differs in conjunction to other variables.","73307d68":"### DABL Plot\n\nLet's now use DABL to see different plots.","12f7061e":"### Maximum Heart Rate (thalach)\n\nThis represents maximum heart rate achieved by the patient.\n\nThis is a continuous Variable.","c8505867":"### Target\n\nThis is out target variable and it represents if the patient suffered a heart attack (1) or didn't suffer a heart attack (0)\n\nThis is categorical and has only 2 possible values.","47a2ea26":"### Thal\n\nSome values to their conditions: 3 = normal; 6 = fixed defect; 7 = reversable defect\n\nThis variable is continuous but the values are discrete and in the range (0-3)","bec56d29":"### Cholestrol (chol)\n\nThis represents the value of cholestrol present in the patient's system.\n\nThis variable is continuous.","0febd12a":"### Oldpeak vs Cholestrol Levels","663aaa51":"### Resting Blood Pressure (trestbps) \ud83c\udd8e\n\nThis represents the blood pressure of the patient while he\/she was in a state of rest.\nThis variable is a a continuous one.","e60ebe63":"### Target vs Age Columns in Box plot and Violin Plot","4ee87467":"## Exploratory Data Analysis \ud83d\udcc8\n\nLet's start with Exploratory Data Analysis on this dataset and see what it has to offer!","f77be2a9":"### Exercise Induced Angina (exang)\n\nThis represents if Angina (which is a type of pain that occurs when not enough blood flows to heart muscles) is present.\n\nThis is a Categorical Variable.","d309b5f8":"### Age vs Sex\n\nLet's see the relationship between Age and Sex using different plots.","0a7d9402":"# The Definitive EDA + Modelling Notebook on Heart Disease Data\n\n![](https:\/\/media.giphy.com\/media\/3o6ZtrvsFui01kCPCg\/source.gif)\n\n\n**If you have trouble understanding something, please comment down below!**","f479bdfc":"### Old Peak (oldpeak)\n\nThis represents the ST depression induced by exercise relative to rest.\n\nThis variable is continuous."}}