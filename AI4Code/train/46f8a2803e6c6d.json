{"cell_type":{"45d77487":"code","41056f9e":"code","0dc9a9ee":"code","2d6c23e0":"code","7c719c13":"code","97faef85":"code","eb894ffb":"code","e2834e5e":"code","39702e0a":"code","95de5182":"code","5f88d414":"code","3a93e83c":"code","75fc092a":"code","c7d33809":"code","ee1c461f":"code","8fea27a5":"code","446fbe0e":"code","c8f62147":"code","284fafa5":"code","d848b944":"code","2e7d2e38":"code","ac7c2e41":"markdown","4954d9c9":"markdown","a689818a":"markdown"},"source":{"45d77487":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","41056f9e":"!pip install lightgbm","0dc9a9ee":"train_data = pd.read_csv(\"..\/input\/tabular-playground-series-jul-2021\/train.csv\" ) # reading the train data to a data frame \ntest_data = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/test.csv' ) # reading the test data into a data frame \nsample_submission = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/sample_submission.csv') # reading the test data into a data frame\nprint(\" data imported keep going....\")","2d6c23e0":"for c in train_data.columns:\n    col_type = train_data[c].dtype\n    if col_type == 'object' or col_type.name == 'category':\n        train_data[c] = train_data[c].astype('category')\n\nfor c in test_data.columns:\n    col_type = test_data[c].dtype\n    if col_type == 'object' or col_type.name == 'category':\n        test_data[c] = test_data[c].astype('category')","7c719c13":"train_data['date_time_new'] = train_data['date_time']\ntest_data['date_time_new'] = test_data['date_time']","97faef85":"# coverting category columns to datetime\ntrain_data['date_time'] = pd.to_datetime(train_data['date_time'])\ntest_data['date_time'] = pd.to_datetime(test_data['date_time'])","eb894ffb":"\ntrain_data[\"quarter\"] = train_data[\"date_time\"].dt.quarter\ntrain_data['month'] = train_data['date_time'].dt.month\n# train_data[\"is_winter\"] = train_data[\"month\"].isin([1, 2, 12])\n# train_data[\"is_sprint\"] = train_data[\"month\"].isin([3, 4, 5])\n# train_data[\"is_summer\"] = train_data[\"month\"].isin([6, 7, 8])\n# train_data[\"is_autumn\"] = train_data[\"month\"].isin([9, 10, 11])\ntrain_data['hour'] = train_data['date_time'].dt.hour\ntrain_data[\"working_hours\"] =  train_data[\"hour\"].isin(np.arange(8, 21, 1)).astype(\"int\")\ntrain_data[\"is_weekend\"] = (train_data[\"date_time\"].dt.dayofweek >= 5).astype(\"int\")\n\ntrain_data['SMC'] = (train_data['absolute_humidity'] * 100) \/ train_data['relative_humidity']\ntrain_data['Dew_Point'] = 243.12*(np.log(train_data['relative_humidity'] * 0.01) + \n                          (17.62 * train_data['deg_C'])\/(243.12+train_data['deg_C']))\/(17.62-(np.log(train_data['relative_humidity'] * 0.01)+17.62*train_data['deg_C']\/(243.12+train_data['deg_C'])))\n\n# lag features\ntrain_data[\"dt-6\"] = train_data[\"deg_C\"] - train_data[\"deg_C\"].shift(periods=6, fill_value=0)\ntrain_data[\"dt-3\"] = train_data[\"deg_C\"] - train_data[\"deg_C\"].shift(periods=3, fill_value=0)\ntrain_data[\"dt-2\"] = train_data[\"deg_C\"] - train_data[\"deg_C\"].shift(periods=2, fill_value=0)\n\ntrain_data[\"abshum-6\"] = train_data[\"absolute_humidity\"] - train_data[\"absolute_humidity\"].shift(periods=6, fill_value=0)\ntrain_data[\"abshum-3\"] = train_data[\"absolute_humidity\"] - train_data[\"absolute_humidity\"].shift(periods=3, fill_value=0)\n###\n\n\n# convert datetime to seconds \ntrain_data['time'] = train_data['date_time'].astype('datetime64[ns]').astype(np.int64)\/\/10**9\n\n# day of week\ntrain_data['day_of_week']=train_data['date_time'].dt.dayofweek\n\n\n","e2834e5e":"test_data[\"quarter\"] = test_data[\"date_time\"].dt.quarter\ntest_data['month'] = test_data['date_time'].dt.month\n# test_data[\"is_winter\"] = test_data[\"month\"].isin([1, 2, 12])\n# test_data[\"is_sprint\"] = test_data[\"month\"].isin([3, 4, 5])\n# test_data[\"is_summer\"] = test_data[\"month\"].isin([6, 7, 8])\n# test_data[\"is_autumn\"] = test_data[\"month\"].isin([9, 10, 11])\ntest_data['hour'] = test_data['date_time'].dt.hour\ntest_data[\"working_hours\"] =  test_data[\"hour\"].isin(np.arange(8, 21, 1)).astype(\"int\")\ntest_data[\"is_weekend\"] = (test_data[\"date_time\"].dt.dayofweek >= 5).astype(\"int\")\ntest_data['SMC'] = (test_data['absolute_humidity'] * 100) \/ test_data['relative_humidity']\ntest_data['Dew_Point'] = 243.12*(np.log(test_data['relative_humidity'] * 0.01) + \n                          (17.62 * test_data['deg_C'])\/(243.12+test_data['deg_C']))\/(17.62-(np.log(test_data['relative_humidity'] * 0.01)+17.62*test_data['deg_C']\/(243.12+test_data['deg_C'])))\n\n# lag features\ntest_data[\"dt-6\"] = test_data[\"deg_C\"] - test_data[\"deg_C\"].shift(periods=6, fill_value=0)\ntest_data[\"dt-3\"] = test_data[\"deg_C\"] - test_data[\"deg_C\"].shift(periods=3, fill_value=0)\ntest_data[\"dt-2\"] = test_data[\"deg_C\"] - test_data[\"deg_C\"].shift(periods=2, fill_value=0)\n\ntest_data[\"abshum-6\"] = test_data[\"absolute_humidity\"] - test_data[\"absolute_humidity\"].shift(periods=6, fill_value=0)\ntest_data[\"abshum-3\"] = test_data[\"absolute_humidity\"] - test_data[\"absolute_humidity\"].shift(periods=3, fill_value=0)\n###############\n\n# convert datetime to seconds \ntest_data['time'] = test_data['date_time'].astype('datetime64[ns]').astype(np.int64)\/\/10**9\n\n# day of week\ntest_data['day_of_week']=test_data['date_time'].dt.dayofweek\n\n","39702e0a":"\ntrain_data.drop(['date_time'],axis=1,inplace =True)\ntest_data.drop(['date_time'],axis=1,inplace =True)","95de5182":"print(train_data.shape)\nprint(test_data.shape)\n\ntargets = ['target_carbon_monoxide','target_benzene','target_nitrogen_oxides']\n\ny = train_data.loc[:,targets]\n\ntrain_data.drop(labels = targets,inplace=True,axis=1)","5f88d414":"y1 = np.array(y.loc[:, list(y.columns)[0] ] )# first column for prediction\n\ny2 = np.array(y.loc[:, list(y.columns)[1] ]) # second column for prediction\n\ny3 = np.array(y.loc[:, list(y.columns)[2] ]) # third column for prediction","3a93e83c":"cat_cols = train_data.select_dtypes('category').columns.tolist()\ncat_cols","75fc092a":"import math\nfrom tqdm.notebook import tqdm_notebook\nfrom sklearn.metrics import mean_squared_log_error as msle","c7d33809":"iterations =  50\n_pred_1 = 0\nrmsle_1 = []","ee1c461f":"from sklearn.model_selection import StratifiedKFold ,KFold\nfrom lightgbm import LGBMRegressor\nfrom sklearn.model_selection import train_test_split\n\nfor i in tqdm_notebook(range(iterations)):\n    random_state = np.random.randint(0,2000)\n    X_train, X_valid, y_train, y_valid = train_test_split(train_data, y1 , test_size=0.2, random_state=random_state)\n    lgbm = LGBMRegressor(random_state=random_state)\n    lgbm.fit(X_train,y_train)\n    valid_preds = lgbm.predict(X_valid)\n    \n    # MSLE cannot predict values if predicted values is less than zero just making sure we dont get neagitives\n    if np.any(valid_preds<0):\n        valid_preds = np.array([0 if i < 0 else i for i in valid_preds])\n    _pred_1 += lgbm.predict(test_data)\/iterations\n    rmsle_error = math.sqrt(msle(y_valid,valid_preds))\n    rmsle_1.append(rmsle_error)\n    print(f'Iteration {i} : Random State = {random_state}, RMSLE Loss = {rmsle_error}')\nprint(f'Average RMSLE Loss = {sum(rmsle_1)\/len(rmsle_1)}')","8fea27a5":"iterations =  50 \n_pred_2 = 0\nrmsle_2 = []\n\nfor i in tqdm_notebook(range(iterations)):\n    random_state = np.random.randint(0,2000)\n    X_train, X_valid, y_train, y_valid = train_test_split(train_data, y2 , test_size=0.2, random_state=random_state)\n    lgbm = LGBMRegressor(random_state=random_state)\n    lgbm.fit(X_train,y_train)\n    valid_preds = lgbm.predict(X_valid)\n    if np.any(valid_preds<0):\n        valid_preds = np.array([0 if i < 0 else i for i in valid_preds])\n    _pred_2 += lgbm.predict(test_data)\/iterations\n    rmsle_error = math.sqrt(msle(y_valid,valid_preds))\n    rmsle_2.append(rmsle_error)\n    print(f'Iteration {i} : Random State = {random_state}, RMSLE Loss = {rmsle_error}')\nprint(f'Average RMSLE Loss = {sum(rmsle_2)\/len(rmsle_2)}')","446fbe0e":"iterations =50\n_pred_3 = 0\nrmsle_3 = []\n\nfor i in tqdm_notebook(range(iterations)):\n    random_state = np.random.randint(0,2000)\n    X_train, X_valid, y_train, y_valid = train_test_split(train_data, y3 , test_size=0.2, random_state=random_state)\n    lgbm = LGBMRegressor(random_state=random_state)\n    lgbm.fit(X_train,y_train)\n    valid_preds = lgbm.predict(X_valid)\n    if np.any(valid_preds<0):\n        valid_preds = np.array([0 if i < 0 else i for i in valid_preds])\n    _pred_3 += lgbm.predict(test_data)\/iterations\n    rmsle_error = math.sqrt(msle(y_valid,valid_preds))\n    rmsle_3.append(rmsle_error)\n    print(f'Iteration {i} : Random State = {random_state}, RMSLE Loss = {rmsle_error}')\nprint(f'Average RMSLE Loss = {sum(rmsle_3)\/len(rmsle_3)}')","c8f62147":"test_sub = np.vstack([_pred_1,_pred_2,_pred_3]).T","284fafa5":"test_sub.shape","d848b944":"sample_submission[sample_submission.columns[1:]] = test_sub\nsample_submission.head()","2e7d2e38":"sample_submission.to_csv('submission.csv',index=False)","ac7c2e41":"##### **We again copied datetime to date_time_new because LightGBm accepts Categorical columns in category type**\n#####  **and then dropped date_time** columns","4954d9c9":"### Making a copy of Datetime column in new column because datetime now is categorical format the way LIGHTGBM accepts it","a689818a":"### The Features I have commented have dropped our score found that they are not useful from [here](https:\/\/www.kaggle.com\/c\/tabular-playground-series-jul-2021\/discussion\/250931) "}}