{"cell_type":{"2bd5e499":"code","0c8f1f85":"code","bfc97c95":"code","d95f0d7e":"code","117a3c6e":"code","b42e2047":"code","3075b9fe":"code","3ee414ae":"code","0d48a5c5":"code","93ec4fd4":"code","a2bed73f":"code","e6c6b9de":"code","1b1ae536":"code","ea79787d":"code","4ea0f8d4":"code","d66d5e49":"code","9af99e41":"code","6f0bc9d9":"code","a7bafad6":"code","db3d126e":"code","384d4a40":"code","79c79cdf":"code","73e221ef":"code","20a5393d":"markdown","72eae0db":"markdown","d21534ed":"markdown","069466cc":"markdown","f7d338e4":"markdown","3d7e00e1":"markdown","afae43c7":"markdown","ee29c9f1":"markdown","89fc946d":"markdown","ab316398":"markdown","1c70077e":"markdown","f90eddbf":"markdown","f8d21256":"markdown","55374bf5":"markdown","b9ade02e":"markdown","c100a3ff":"markdown","a13bcb7c":"markdown","0e9a9d1e":"markdown","5d207147":"markdown","25cb4382":"markdown","4fda622e":"markdown","50e4127e":"markdown","b59dff06":"markdown","feb5dfb1":"markdown","1f27aaf8":"markdown"},"source":{"2bd5e499":"import numpy as np\nimport pandas as pd\nimport os\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nplt.style.use(\"fivethirtyeight\")\n\n# Time series analysis\nfrom statsmodels.graphics.tsaplots import plot_acf\n\n# Normality test\nfrom scipy import stats\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","0c8f1f85":"path = \"\/kaggle\/input\/agricultural-raw-material-prices-19902020\/\"\n\ndata = pd.read_csv(os.path.join(path, \"agricultural_raw_material.csv\"))","bfc97c95":"# columns name change, no space\ncol_name = ['Month', 'Coarse_wool_Price', 'Coarse_wool_price_%_Change', 'Copra_Price',\n       'Copra_price_%_Change', 'Cotton_Price', 'Cotton_price_%_Change',\n       'Fine_wool_Price', 'Fine_wool_price_%_Change', 'Hard_log_Price',\n       'Hard_log_price_%_Change', 'Hard_sawnwood_Price',\n       'Hard_sawnwood_price_%_Change', 'Hide_Price', 'Hide_price_%_change',\n       'Plywood_Price', 'Plywood_price_%_Change', 'Rubber_Price',\n       'Rubber_price_%_Change', 'Softlog_Price', 'Softlog_price_%_Change',\n       'Soft_sawnwood_Price', 'Soft_sawnwood_price_%_Change',\n       'Wood_pulp_Price', 'Wood_pulp_price_%_Change']\n\ndata.columns = col_name","d95f0d7e":"# split year and month from string data\ndata[\"year\"] = [int(s.split(\"-\")[1]) for s in data[\"Month\"]]\ndata[\"month\"] = [str(s.split(\"-\")[0]) for s in data[\"Month\"]]\n\n# year are changed to thousand year\ndata[\"year\"] = [2000 + i if i < 89 else 1900 + i for i in data[\"year\"]]\n\n# month are changed to int from string\nmapping = {\"Apr\":4, \"May\":5, \"Jun\":6, \"Jul\":7, \"Aug\":8, \"Sep\":9, \"Oct\":10, \"Nov\":11, \"Dec\":12, \"Jan\":1, \"Feb\":2, \"Mar\":3}\ndata[\"month\"] = data[\"month\"].map(mapping).astype(\"int16\")\ndata.drop(\"Month\", axis=1, inplace=True)\n\n# create datetime column and set index \ndata[\"date\"] = [str(y) + '\/' + str(m) for y,m in zip(data[\"year\"], data[\"month\"])]\ndata[\"date_dt\"] = pd.to_datetime(data[\"date\"])\ndata.set_index(\"date_dt\", inplace=True)\ndata.drop(\"date\", axis=1, inplace=True)","117a3c6e":"# dtype df\ndtype_df = pd.DataFrame({\"columns\":data.dtypes.index,\n             \"dtype\":[str(s) for s in data.dtypes.values]})\nstr_col = dtype_df[dtype_df[\"dtype\"]==\"object\"][\"columns\"].values\nstr_col","b42e2047":"# roop process\nfor c in str_col:\n    list_1 = []\n    list_2 = []\n    list_3 = []\n    # change '-' to '0'\n    for s in data[c]:\n        if s == '-':\n            res = '0'\n            list_1.append(res)\n        else:\n            res = s\n            list_1.append(res)\n\n    # replace ',' to ''\n    for s in list_1:\n        if ',' in str(s):\n            res = s.replace(\",\", \"\")\n            list_2.append(res)\n        else:\n            res = s\n            list_2.append(res)\n    \n    # replace '%' to '' and change to float\n    for s in list_2:\n        if '%' in str(s):\n            res = float(s.replace(\"%\", \"\"))\n            list_3.append(res)\n        else:\n            res = float(s)\n            list_3.append(res)\n\n    data[c] = list_3\n    del list_1, list_2, list_3","3075b9fe":"# data chenge to light\n# create dtype dataframe\ndtype_df_2 = pd.DataFrame({\"columns\":data.dtypes.index,\n             \"dtype\":[str(s) for s in data.dtypes.values]})\n\n# Chenge to dtype\nfloat_col = dtype_df_2[dtype_df_2[\"dtype\"] == \"float64\"][\"columns\"].values\nint_col = dtype_df_2[dtype_df_2[\"dtype\"] == \"int64\"][\"columns\"].values\n\ndata[float_col] = data[float_col].astype(\"float32\")\ndata[int_col] = data[int_col].astype(\"int16\")","3ee414ae":"data.info()","0d48a5c5":"day_col = ['year', 'month']\ndata_col = ['Coarse_wool_Price', 'Copra_Price', 'Cotton_Price', 'Fine_wool_Price',\n            'Hard_log_Price', 'Hard_sawnwood_Price', 'Hide_Price', 'Plywood_Price',\n            'Rubber_Price', 'Softlog_Price', 'Soft_sawnwood_Price', 'Wood_pulp_Price']\nratio_col = ['Coarse_wool_price_%_Change', 'Copra_price_%_Change', 'Cotton_price_%_Change', 'Fine_wool_price_%_Change', \n             'Hard_log_price_%_Change', 'Hard_sawnwood_price_%_Change', 'Hide_price_%_change', 'Plywood_price_%_Change', \n             'Rubber_price_%_Change', 'Softlog_price_%_Change', 'Soft_sawnwood_price_%_Change', 'Wood_pulp_price_%_Change']","93ec4fd4":"# barplot\ndef bar_plot(df, data_col, day_col, groupby_col='year', value_label=\"price\"):\n    df_ = df[data_col+day_col]\n    ave = df_.groupby(groupby_col)[data_col].mean()\n    \n    fig, ax = plt.subplots(4, 3, figsize=(30, 24))\n    plt.subplots_adjust(hspace=0.4)\n    for i in range(0,4):\n        for j in range(0,3):\n            ax[i,j].bar(ave.index, ave.iloc[:,i*3+j])\n            ax[i,j].set_xlabel(groupby_col)\n            ax[i,j].set_ylabel(value_label)\n            ax[i,j].set_title(data_col[i*3+j])\n\n    plt.show()\n    \n# time series plot\ndef timeseries_plot(df, data_col, value_label=\"price\"):\n    df_ = df[data_col]\n    \n\n    fig, ax = plt.subplots(4, 3, figsize=(30, 24))\n    plt.subplots_adjust(hspace=0.4)\n    for i in range(0,4):\n        for j in range(0,3):\n            ax[i,j].plot(df_[data_col[i*3+j]].index, df_[data_col[i*3+j]], label=\"month price\")\n            ax[i,j].plot(df_[data_col[i*3+j]].rolling(12).mean().index, df_[data_col[i*3+j]].rolling(12).mean(), label=\"Rolling mean 12 month\")\n            ax[i,j].set_xlabel(\"date\")\n            ax[i,j].set_ylabel(\"price\")\n            ax[i,j].set_title(data_col[i*3+j])\n            ax[i,j].legend()\n\n    plt.show()   \n    \n# Auto correlation plot\ndef autocorrelation_plot(df, data_col, lags=24):\n    df_ = df[data_col]\n\n    fig, ax = plt.subplots(4, 3, figsize=(30, 24))\n    plt.subplots_adjust(hspace=0.4)\n    for i in range(0,4):\n        for j in range(0,3):\n            plot_acf(df_[data_col[i*3+j]].dropna(), lags=lags, ax=ax[i,j])\n            ax[i,j].set_xlabel(\"lags\")\n            ax[i,j].set_ylabel(\"ACF\")\n            ax[i,j].set_title(data_col[i*3+j])\n\n    plt.show()\n    \n# Distribution plot and test of normalize\ndef dist_plot(df, ratio_col):\n    df_ = df[ratio_col]\n\n    fig, ax = plt.subplots(4, 3, figsize=(30, 24))\n    plt.subplots_adjust(hspace=0.4)\n    for i in range(0,4):\n        for j in range(0,3):\n            sns.distplot(df_[ratio_col[i*3+j]].dropna(), ax=ax[i,j])\n            ax[i,j].set_xlabel(\"percentage\")\n            ax[i,j].set_ylabel(\"frequency\")\n            ax[i,j].set_title(data_col[i*3+j])\n\n    plt.show()\n    \n# Distribution plot and test of normalize\ndef prob_plot(df, ratio_col):\n    df_ = df[ratio_col]\n\n    fig, ax = plt.subplots(4, 3, figsize=(30, 24))\n    plt.subplots_adjust(hspace=0.4)\n    for i in range(0,4):\n        for j in range(0,3):\n            stats.probplot(df_[ratio_col[i*3+j]].dropna(), plot=ax[i,j])\n            ax[i,j].set_xlabel(\"percentage\")\n            ax[i,j].set_ylabel(\"frequency\")\n            ax[i,j].set_title(data_col[i*3+j])\n\n    plt.show()","a2bed73f":"plt.figure(figsize=(8,8))\nhm = sns.heatmap(data[data_col].corr(), vmax=1, vmin=-1, cmap=\"bwr\", square=True)","e6c6b9de":"sns.pairplot(data[data_col])","1b1ae536":"bar_plot(data, data_col, day_col, groupby_col='year', value_label=\"price\")","ea79787d":"bar_plot(data, data_col, day_col, groupby_col='month', value_label=\"price\")","4ea0f8d4":"timeseries_plot(data, data_col, value_label=\"price\")","d66d5e49":"autocorrelation_plot(data, data_col, lags=24)","9af99e41":"plt.figure(figsize=(8,8))\nhm = sns.heatmap(data[ratio_col].corr(), vmax=1, vmin=-1, cmap=\"bwr\", square=True)","6f0bc9d9":"bar_plot(data, ratio_col, day_col, groupby_col='year', value_label=\"price_change_ratio(%)\")","a7bafad6":"bar_plot(data, ratio_col, day_col, groupby_col='month', value_label=\"price_change_ratio(%)\")","db3d126e":"timeseries_plot(data, ratio_col, value_label=\"price_change_ratio(%)\")","384d4a40":"autocorrelation_plot(data, ratio_col, lags=24)","79c79cdf":"dist_plot(data, ratio_col)","73e221ef":"prob_plot(data, ratio_col)","20a5393d":"Correlation by heatmap","72eae0db":"Yearly average percentage","d21534ed":"### Change data type to light","069466cc":"### Price data","f7d338e4":"## Libraries","3d7e00e1":"### data type dataframe","afae43c7":"Check by plotting","ee29c9f1":"# Exploratory data analysis","89fc946d":"I will share the results of the data analysis that for my reference.","ab316398":"### Fuctions for data visualization","1c70077e":"Auto correlation plot of time series data","f90eddbf":"### Datetime columns","f8d21256":"Time series plot","55374bf5":"Yearly average price","b9ade02e":"Randomize check by distplot and prob plot for Normality test","c100a3ff":"Auto correlation plot of time series percentage data","a13bcb7c":"### Pecentage price changing data","0e9a9d1e":"Thank you for providing us with a useful dataset.","5d207147":"Time series plot","25cb4382":"# Data cleaning","4fda622e":"Correlation by heatmap","50e4127e":"Monthly average price","b59dff06":"# Data loading","feb5dfb1":"### Cleaning, for change to numerical","1f27aaf8":"Monthly average percentage"}}