{"cell_type":{"543104c7":"code","e29478d0":"code","c2789830":"code","8cf3e1d4":"code","b1875a2f":"code","ea986054":"code","b539b8e2":"code","678fc725":"code","62689bfe":"code","ae529592":"code","20352a1e":"code","7e56aeb4":"code","5be1b00a":"code","d8dd28be":"markdown","49428070":"markdown","a5793556":"markdown","087f0004":"markdown","84dee376":"markdown","ebc8969c":"markdown","2c2a19bb":"markdown","e7cee058":"markdown","10f67332":"markdown","7f22bb7e":"markdown"},"source":{"543104c7":"from PIL import Image \nimport numpy as np   #Use numpy to convert images to arrays\n\n# Read image \nimg = Image.open(\"..\/input\/natural-images\/natural_images\/cat\/cat_0004.jpg\") #Not a numpy array\nprint(type(img))\n#not a numpy array\n\n# Output Images \n#This displays the image on an external viewer (usually Preview on macOS, xv on Unix, and the Paint program on Windows)\nimg.show() \n\n#You can get some details about the image using the object's attributes.\n# prints format of image \nprint(img.format) \n  \n# The pixel format used by the image. Typical values are \"1\", \"L\", \"RGB\", or \"CMYK.\"\n# prints mode of image \nprint(img.mode) \n\n# Image size, in pixels. The size is given as a 2-tuple (width, height).\nprint(img.size) \n\n#Changing Image Type\nimg.save('new_image.png')#Pillow sees the file extension has been specified as PNG and so it converts it to PNG before saving it to file.\n# the same as\n#if you're using non-standard extensions, then you should always specify the format\nimage.save('new_image.png', 'PNG')\n\n#PIL is not by default numpy array but can convert PIL image to numpy array. \nimg1 = np.asarray(img)\nprint(type(img1))\n","e29478d0":"# resize image\nprint(img.size)\nnew_image = img.resize((400, 400))\n#resize return new image, original one not changed\n#change an image size if given parameters that are larger than the original image\nprint(new_image.size)\n# new image width and height exactly match the passed in value.\n#the images returned by this function aren't ideal, because the function doesn't account for the image's \n#Aspect Ratio, so you might end up with an image that either looks stretched or squished.\n\n#to keep aspect ratios ,with two-integer tuple argument representing the maximum width and maximum height.\n#thumbnail change the original image\n# not change an image size if given parameters that are larger than the original image\n#will result in an image that keeps its size\nimg.thumbnail((400, 400))\nprint(img.size)\n","c2789830":"# image cropping\n#When an image is cropped, a rectangular region inside the image is selected and retained \n#while everything else outside the region is removed\nbox = (200, 300, 700, 600)\ncropped_image = img.crop(box)\n\n#The Python Imaging Library uses a coordinate system that starts with (0, 0) in the upper left corner. \n#The first two values of the box tuple specify the upper left starting position of the crop box.\n#The third and fourth values specify the distance in pixels from this starting position towards the \n#right and bottom direction","8cf3e1d4":"#rotate image\nimage_rot_90 = img.rotate(90)\n#the rotated image keeps the dimensions of the original image.\n#the image will be cut and\/or padded to fit the original dimensions.\n\n#Flipping Images\n#flip images to get their mirror version\nimage_flip = img.transpose(Image.FLIP_LEFT_RIGHT)\n\n#Color Transforms\n#Converting between modes\ngreyscale_image = image.convert('L')\n\n#Image enhancements\n#Pillow allows to enhance an image by adjusting its contrast, color, brightness, and sharpness.\nfrom PIL import Image, ImageEnhance\ncontrast = ImageEnhance.Contrast(img)\ncontrast.enhance(1.5).save('contrast.jpg')\n#adjust the image contrast by a factor of 1.5\n\nbrightness = ImageEnhance.Brightness(img)\n#A factor of 0.0 would produce a black image\nbrightness.enhance(1.5).save('brightness.jpg')\n\n#sharpness = ImageEnhance.Sharpness(image)\n#An enhancement factor of 0.0 would produce a blurred image, and a factor of 2.0 would give a sharpened image.\nsharpness.enhance(1.5).save('sharpness.jpg')\n","b1875a2f":"import matplotlib.image as mpimg \nimport matplotlib.pyplot as plt \n\nimg = mpimg.imread(\"..\/input\/natural-images\/natural_images\/airplane\/airplane_0000.jpg\")  #this is a numpy array\nprint(type(img))\nprint(img)\n\nprint(img.shape)\n\nplt.imshow(img)\nplt.colorbar()   #Puts a color bar next to the image. \n","ea986054":"from skimage import io, img_as_float, img_as_ubyte\nimport numpy as np\nimport matplotlib.pyplot as plt \n\n\n#read image \nimage = io.imread(\"..\/input\/natural-images\/natural_images\/cat\/cat_0003.jpg\")\nprint(image.shape)\nprint(image)\nplt.imshow(image)\n\n\n#read image as values between 0 and 1\nimage_float = img_as_float(io.imread(\"..\/input\/natural-images\/natural_images\/cat\/cat_0001.jpg\"))\n#or\n#image_float = img_as_float(image)\nprint(image_float)\nplt.imshow(image_float)\nplt.colorbar()\n\n#image2 = io.imread(\"images\/test_image.jpg\").astype(np.float)\n#avoid using astype as it violates assumptions about dtype range.\n#for example float should range from 0 to 1 (or -1 to 1) but if you use \n#astype to convert to float, the values do not lie between 0 and 1. \n\n\n#print(image2)\n#image8byte = img_as_ubyte(image)\n#print(image8byte)","b539b8e2":"import cv2\nimport matplotlib.pyplot as plt\n# cv2.IMREAD_COLOR : Loads a color image. Any transparency of image will be neglected. It is the default flag.\n# cv2.IMREAD_GRAYSCALE : Loads image in grayscale mode\n# cv2.IMREAD_UNCHANGED : Loads image as such including alpha channel\n#Instead of these three flags, can simply pass integers 1, 0 or -1 respectively.\n\ngrey_img = cv2.imread(\"..\/input\/natural-images\/natural_images\/cat\/cat_0003.jpg\", 0)\ncolor_img = cv2.imread(\"..\/input\/natural-images\/natural_images\/cat\/cat_0003.jpg\", 1)\n\n#images opened using cv2 are numpy arrays\nprint(type(grey_img)) \nprint(type(color_img)) \n\n# Use the function cv2.imshow() to display an image in a window. \n# First argument is the window name which is a string. second argument is our image. \n\n#cv2.imshow(\"pic\", grey_img)\n#cv2.imshow(\"color pic\", color_img)\n\n# Maintain output window until \n# user presses a key or 1000 ms (1s)\n#cv2.waitKey(0)          \n\n#destroys all windows created\n#cv2.destroyAllWindows() \n\n#OpenCV imread, imwrite and imshow all work with the BGR order, not RGB\n#but there is no need to change the order when you read an image with \n#cv2.imread and then want to show it with cv2.imshow\n#if you use matplotlib, it uses RGB. \n\nimport matplotlib.pyplot as plt\nplt.imshow(color_img)  \n\n#OpenCV represents RGB images as multi-dimensional NumPy arrays, but as BGR.\n\n#we can convert the images from BGR to RGB\nplt.imshow(cv2.cvtColor(color_img, cv2.COLOR_BGR2RGB))\n\n#We can also change color spaces from RGB to HSV..\nplt.imshow(cv2.cvtColor(color_img, cv2.COLOR_BGR2HSV))","678fc725":"import czifile\n\nimg = czifile.imread('images\/test_image.czi')\nprint(img.shape)\n\n\nimport czifile\nfrom skimage import io\n\nimg = czifile.imread('images\/Osteosarcoma_01.czi')\nprint(img.shape)\nimg1=img[0, 0, :, :, :, 0]\nprint(img1.shape)\nimg2=img1[2,:,:]\nio.imshow(img2)","62689bfe":"from apeer_ometiff_library import io  #Use apeer.com free platform for image processing in the cloud\n\n(pic2, omexml) = io.read_ometiff(\"images\/test_image.ome.tif\")  #Unwrap image and embedded xml metadata\nprint (pic2.shape)   #to verify the shape of the array\nprint(pic2)\n\nprint(omexml)","ae529592":"import os\nfrom distutils.dir_util import copy_tree\n# copy subdirectory example\nfromDirectory = \"..\/input\/natural-images\/natural_images\/car\"\ntoDirectory = \".\/car\"\n\ncopy_tree(fromDirectory, toDirectory)\n\n# remove directory not empty\nimport shutil\nshutil.rmtree('.\/airplane')\n\n# make dir\n# but raise fileexistserror if it's exist\nnew_directory='.\/newdir'\nos.mkdir(new_directory)\n\n# safe directory creation\ntry:\n    os.stat(new_directory)\nexcept:\n    os.mkdir(new_directory)\n    \n# or\nif not os.path.exists(new_directory):\n    os.mkdir(new_directory)\n    \n#or\n\nfrom pathlib import Path\nPath(new_directory).mkdir(parents=True, exist_ok=True)\n\n#os.mkdir need parent directory to be exist\nif not os.path.exists(\".\/my\/directory\"):\n    os.mkdir(\".\/my\/directory\")\n    \n# when not sure the parent exist\n#create parents if not exist\nfrom pathlib import Path\nPath(\".\/my\/directory\").mkdir(parents=True, exist_ok=True)\n\n#or \nif not os.path.exists(\".\/my\/directory2\"):\n    os.makedirs(\".\/my\/directory2\")\n\n#or\nos.makedirs(\".\/path\/to\/directory\", exist_ok=True)  # succeeds even if directory exists.\n\nimport distutils.dir_util\n#creates the nested directory, and does nothing if the directory already exists\ndistutils.dir_util.mkpath(\".\/my\/directory\")","20352a1e":"#path is dir\nos.path.isdir('..\/input\/natural-images\/natural_images')#dir\nos.path.isdir('..\/input\/natural-images\/natural_images\/car\/car_0000.jpg')#not dir","7e56aeb4":"import os\nfrom distutils.dir_util import copy_tree\nimport shutil\n\n#copy file from directory to onther directory\nfiles=['car_0000.jpg','car_0001.jpg','car_0002.jpg']\nfor file in files:\n    filepath = \"..\/input\/natural-images\/natural_images\/car\/\"+file\n    newfilepath = \".\/\"\n    shutil.copy(filepath, newfilepath)\n\n#rename file\nnew_name='car_new_name.jpg'\nos.rename(\".\/car_0000.jpg\", \".\/\"+new_name)\n\n#move file from directory to another directory\nos.makedirs('.\/images', exist_ok=True)\nshutil.move(\".\/car_new_name.jpg\", \".\/images\/car_new_name.jpg\")\n\n#replace files\nos.replace(\".\/car_0001.jpg\", \".\/car_0002.jpg\")\n\n\n# Return a list containing the names of the entries in the directory given by path. \n#The list is in arbitrary order. It does not include the special entries '.' and '..' even if they are present in the directory.\n# return files and directories\nos.listdir('.\/')\n\n#to get files and directories separated\nroot,dirs,files=next(os.walk('.\/'))\nprint(root)\nprint(dirs)\nprint(files)","5be1b00a":"### Reading multiple images from a folder\n#The glob module finds all the path names \n#matching a specified pattern according to the rules used by the Unix shell\n#The glob.glob returns the list of files with their full path \n\n#import the library opencv\nimport cv2\nimport glob\n\n#select the path\npath = \"images\/test_images\/aeroplane\/*.*\"\nfor file in glob.glob(path):\n    print(file)     #just stop here to see all file names printed\n    a= cv2.imread(file)  #now, we can read each file since we have the full path\n    print(a)  #print numpy arrays for each file","d8dd28be":"# Reading czi files\n* install \n<pre>pip install czifile<\/pre> \n* to import the package \n<pre>import czifile<\/pre>\n* can read images for time series \n* images of type 5d\n* [for more info](https:\/\/pypi.org\/project\/czifile\/) \n","49428070":"# Content\n* Reading Images\n>* Pillow Library\n>* MatplotLib\n>* scikit image\n>* openCV\n* Deal with files & folders\n>* copy subdirectory\n>* remove directory not empty\n>* make dir\n>* safe directory creation\n>* when not sure the parent exist\n>* path is dir\n>* copy file from directory to onther directory\n>* rename file\n>* move file from directory to another directory\n>* replace files\n>* list the names of the entries in the directory\n>* to get files and directories separated","a5793556":"# Deal with files & folders\n# Read files in directory","087f0004":"# scikit image\n* to install scikit-image, \n<pre>pip install scikit-image <\/pre>\n* to import the package you need to use \n<pre>import skimage<\/pre>\n* scikit image is an image processing library that includes algorithms for segmentation, geometric transformation, color space manipulation, analysis, filtering, feature detection, and more.\n* A very good package for traditional machine learning, using Random forest or SVM","84dee376":"# openCV\n* install open CV : \n<pre>pip install opencv-python<\/pre>\n* to import the package \n<pre>import cv2<\/pre>\n* openCV is a library of programming functions mainly aimed at computer vision.\n* Very good for images and videos, especially real time videos.\n* It is used extensively for facial recognition, object recognition, motion tracking,\n* optical character recognition, segmentation, and even for artificial neural netwroks. \n* can import images in color, grey scale or unchanged usingindividual commands \n","ebc8969c":"<h2>Reading & Processing Images<\/h2>\nMany applications use digital images, and with this, there is usually a need to process the images used. If you are building your application with Python and need to add image processing features to it, there are various libraries you could use. \n<p>Some popular ones in Python are <\/p>\n<pre>PIL\nmatplotlib\nskimage\nopenCV\nother libraries to open propriatery images like czi, OME-TIFF<\/pre>","2c2a19bb":"# References\n* https:\/\/auth0.com\/blog\/image-processing-in-python-with-pillow\/\n* https:\/\/www.youtube.com\/playlist?list=PLZsOBAyNTZwYx-7GylDo3LSYpSompzsqW","e7cee058":"## Matplotlib\n* Matplotlib is a plotting library for the Python programming language\n* Pyplot is a Matplotlib module which provides a MATLAB-like interface\n* Pyplot is commonly used not just to generate plots and graphs but also to visualize images.\n* because visualizing images is nothing but plotting data in 2D. \n* to install matplotlib, \n<pre>pip\npip install matplotlib \nanaconda\nit comes with conda installation no need to reinstall it if no problems exist with it\nconda install -c conda-forge matplotlib<\/pre\n* to import the package you need to use import matplotlib","10f67332":"# Pillow Library\n* Pillow is a fork of the Python Imaging Library (PIL). \n* PIL is a library that offers several standard procedures for manipulating images. \n* It's a powerful library but hasn't been updated since 2009 and doesn't support Python 3. \n* Pillow builds on this, adding more features and support for Python 3. \n* has tools for image manipulation and processing, it enables you to: \n>* load image\n>* crop images \n>* resize images \n>* do some sort of a basic filtering \n>* supports a range of image file formats such as PNG, JPEG, PPM, GIF, TIFF, and BMP\n* for a basic image handling image processing pillow is an excellent\n\n* but for advanced tasks let's say you want to do object detection like computer vision for example or use machine learning there are other other packages like psychic image OpenCV scikit-learn so there are other packages dedicated for that task\n\n## Install\nPillow and PIL cannot co-exist in the same environment, so in case you have PIL installed, uninstall it first before proceeding\n<pre>pip\npython3 -m pip install --upgrade Pillow\nanaconda\nconda install -c anaconda pillow<\/pre>\n* For more on what you can do with the Image class, [check out the documentation](https:\/\/pillow.readthedocs.io\/en\/stable\/reference\/Image.html).","7f22bb7e":"# Reading OME-TIFF using apeer_ometiff_library\n* OME-TIFF has tiff and metada (as XML) embedded\n* Image is a 5D array\n* install the package\n<pre>pip install apeer-ometiff-library first <\/pre>\n* import the package\n<pre>import apeer_ometiff_library<\/pre>"}}