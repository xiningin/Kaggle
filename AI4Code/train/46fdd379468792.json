{"cell_type":{"0dfefd51":"code","376e3409":"code","999f854b":"code","a08571d6":"code","94013ee4":"code","86963f54":"code","b1cc4c1b":"code","197e1bf5":"code","7f499357":"code","44605f82":"code","031d2f89":"code","e7b1b60a":"code","6b4d1294":"code","e3df958c":"code","0e8fd9b9":"code","3e3e29f3":"code","d9703e87":"code","5c6120a1":"code","109505ac":"code","5fbe7f25":"code","832f3ba2":"code","e8cf0c10":"code","335d302e":"code","c6b637af":"code","515a9537":"code","e03d9673":"code","9cfea7b9":"code","15e4637d":"code","6c1690a1":"code","fabee198":"code","d6e87361":"code","e1499d51":"code","cdb18770":"code","d65e9a07":"code","710519db":"code","be82a3dc":"code","86189a55":"code","88d1777e":"code","1c1aacf6":"code","1d1f4073":"code","4eda42c8":"code","1a819383":"code","191ad684":"code","9d056021":"code","5bd01c45":"code","9e240d75":"code","82520c67":"code","1d5ad90b":"code","e9d1a905":"code","4516cf4b":"code","db8d48a5":"code","ef6b7c77":"code","56bd1f94":"code","c2e7eea2":"code","52a1c014":"code","8672d02a":"code","0be7742a":"code","74af22a0":"code","f9b62f97":"code","761a0433":"code","17a1e619":"code","8a0a7d48":"code","26e692c1":"code","1ddc6183":"code","84124813":"markdown","be861ea8":"markdown","883dcc98":"markdown","411c9e30":"markdown","dabd031b":"markdown","85d00826":"markdown","ba24c1c8":"markdown","469fd4be":"markdown","69d67617":"markdown","d863970a":"markdown","4979dfe9":"markdown","4893b938":"markdown","baa04af8":"markdown"},"source":{"0dfefd51":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","376e3409":"import os\nimport random\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline\nsns.set_style(\"whitegrid\")\nplt.style.use(\"fivethirtyeight\")\n\n\nfrom transformers import pipeline\n","999f854b":"#pip install rich","a08571d6":"train_data=pd.read_csv(\"..\/input\/chaii-hindi-and-tamil-question-answering\/train.csv\")","94013ee4":"test_data=pd.read_csv(\"..\/input\/chaii-hindi-and-tamil-question-answering\/test.csv\")","86963f54":"train_data.head()","b1cc4c1b":"train_data.info()","197e1bf5":"test_data.info()","7f499357":"train_data.shape","44605f82":"train_data.language.value_counts()","031d2f89":"train_data['question'].apply(lambda x:len(str(x).split())).max()","e7b1b60a":"train_data['answer_text'].apply(lambda x:len(str(x).split())).max()","6b4d1294":"train_data[\"ques_length\"]=train_data['question'].apply(lambda x:len(str(x).split()))","e3df958c":"train_data[\"ans_length\"]=train_data['answer_text'].apply(lambda x:len(str(x).split()))","0e8fd9b9":"train_data.head()","3e3e29f3":"train_data.groupby('language').describe()","d9703e87":"plt.figure(figsize=(12, 8))\n\ntrain_data[train_data.language=='tamil'].ques_length.plot(bins=15, kind='hist', color='blue', \n                                       label='Tamil Questions', alpha=0.6)\ntrain_data[train_data.language=='hindi'].ques_length.plot(bins=35,kind='hist', color='red', \n                                       label='Hindi Questions', alpha=0.6)\nplt.legend()\nplt.xlabel(\"Question Length\")","5c6120a1":"plt.figure(figsize=(12, 8))\n\ntrain_data[train_data.language=='tamil'].ans_length.plot(bins=35, kind='hist', color='blue', \n                                       label='Tamil Questions', alpha=0.6)\ntrain_data[train_data.language=='hindi'].ans_length.plot(bins=35,kind='hist', color='red', \n                                       label='Hindi Questions', alpha=0.6)\nplt.legend()\nplt.xlabel(\"Answer Length\")","109505ac":"train_data['language'].value_counts().index.tolist()","5fbe7f25":"test_data.head()","832f3ba2":"import transformers\nmodel_checkpoint = '..\/input\/xlm-roberta-squad2\/deepset\/xlm-roberta-large-squad2'\nbatch_size = 4\nfrom transformers import AutoTokenizer\n    \ntokenizer = AutoTokenizer.from_pretrained(model_checkpoint)","e8cf0c10":"train_data['num_tokens_context'] = train_data['context'].apply(lambda t: len(tokenizer(t)['input_ids']))","335d302e":"train_data['num_tokens_context'].hist()\n","c6b637af":"max_length = 384 # The maximum length of a feature (question and context)\ndoc_stride = 128 # The authorized overlap between two part of the context when splitting it is needed.","515a9537":"pad_on_right = tokenizer.padding_side == \"right\"","e03d9673":"def prepare_train_features(examples):\n    # Some of the questions have lots of whitespace on the left, which is not useful and will make the\n    # truncation of the context fail (the tokenized question will take a lots of space). So we remove that\n    # left whitespace\n    examples[\"question\"] = [q.lstrip() for q in examples[\"question\"]]\n\n    # Tokenize our examples with truncation and padding, but keep the overflows using a stride. This results\n    # in one example possible giving several features when a context is long, each of those features having a\n    # context that overlaps a bit the context of the previous feature.\n    tokenized_examples = tokenizer(\n        examples[\"question\" if pad_on_right else \"context\"],\n        examples[\"context\" if pad_on_right else \"question\"],\n        truncation=\"only_second\" if pad_on_right else \"only_first\",\n        max_length=max_length,\n        stride=doc_stride,\n        return_overflowing_tokens=True,\n        return_offsets_mapping=True,\n        padding=\"max_length\",\n    )\n\n    # Since one example might give us several features if it has a long context, we need a map from a feature to\n    # its corresponding example. This key gives us just that.\n    sample_mapping = tokenized_examples.pop(\"overflow_to_sample_mapping\")\n    # The offset mappings will give us a map from token to character position in the original context. This will\n    # help us compute the start_positions and end_positions.\n    offset_mapping = tokenized_examples.pop(\"offset_mapping\")\n\n    # Let's label those examples!\n    tokenized_examples[\"start_positions\"] = []\n    tokenized_examples[\"end_positions\"] = []\n\n    for i, offsets in enumerate(offset_mapping):\n        # We will label impossible answers with the index of the CLS token.\n        input_ids = tokenized_examples[\"input_ids\"][i]\n        cls_index = input_ids.index(tokenizer.cls_token_id)\n\n        # Grab the sequence corresponding to that example (to know what is the context and what is the question).\n        sequence_ids = tokenized_examples.sequence_ids(i)\n\n        # One example can give several spans, this is the index of the example containing this span of text.\n        sample_index = sample_mapping[i]\n        answers = examples[\"answers\"][sample_index]\n        # If no answers are given, set the cls_index as answer.\n        if len(answers[\"answer_start\"]) == 0:\n            tokenized_examples[\"start_positions\"].append(cls_index)\n            tokenized_examples[\"end_positions\"].append(cls_index)\n        else:\n            # Start\/end character index of the answer in the text.\n            start_char = answers[\"answer_start\"][0]\n            end_char = start_char + len(answers[\"text\"][0])\n\n            # Start token index of the current span in the text.\n            token_start_index = 0\n            while sequence_ids[token_start_index] != (1 if pad_on_right else 0):\n                token_start_index += 1\n\n            # End token index of the current span in the text.\n            token_end_index = len(input_ids) - 1\n            while sequence_ids[token_end_index] != (1 if pad_on_right else 0):\n                token_end_index -= 1\n\n            # Detect if the answer is out of the span (in which case this feature is labeled with the CLS index).\n            if not (offsets[token_start_index][0] <= start_char and offsets[token_end_index][1] >= end_char):\n                tokenized_examples[\"start_positions\"].append(cls_index)\n                tokenized_examples[\"end_positions\"].append(cls_index)\n            else:\n                # Otherwise move the token_start_index and token_end_index to the two ends of the answer.\n                # Note: we could go after the last offset if the answer is the last word (edge case).\n                while token_start_index < len(offsets) and offsets[token_start_index][0] <= start_char:\n                    token_start_index += 1\n                tokenized_examples[\"start_positions\"].append(token_start_index - 1)\n                while offsets[token_end_index][1] >= end_char:\n                    token_end_index -= 1\n                tokenized_examples[\"end_positions\"].append(token_end_index + 1)\n\n    return tokenized_examples","9cfea7b9":"!pip uninstall fsspec -qq -y\n!pip install --no-index --find-links ..\/input\/hf-datasets\/wheels datasets -qq","15e4637d":"from datasets import Dataset","6c1690a1":"def convert_answers(r):\n    start = r[0]\n    text = r[1]\n    return {\n        'answer_start': [start],\n        'text': [text]\n    }","fabee198":"train_data = train_data.sample(frac=1, random_state=42)\ntrain_data['answers'] = train_data[['answer_start', 'answer_text']].apply(convert_answers, axis=1)","d6e87361":"df_train = train_data[:-64].reset_index(drop=True)\ndf_valid = train_data[-64:].reset_index(drop=True)","e1499d51":"train_dataset = Dataset.from_pandas(df_train)\nvalid_dataset = Dataset.from_pandas(df_valid)","cdb18770":"train_dataset[0]","d65e9a07":"tokenized_train_ds = train_dataset.map(prepare_train_features, batched=True, remove_columns=train_dataset.column_names)\ntokenized_valid_ds = valid_dataset.map(prepare_train_features, batched=True, remove_columns=train_dataset.column_names)","710519db":"from transformers import AutoModelForQuestionAnswering, TrainingArguments, Trainer\n\nmodel = AutoModelForQuestionAnswering.from_pretrained(model_checkpoint)","be82a3dc":"%env WANDB_DISABLED=True","86189a55":"args = TrainingArguments(\n    f\"chaii-qa\",\n    evaluation_strategy = \"epoch\",\n    save_strategy = \"epoch\",\n    learning_rate=3e-5,\n    warmup_ratio=0.1,\n    gradient_accumulation_steps=8,\n    per_device_train_batch_size=batch_size,\n    per_device_eval_batch_size=batch_size,\n    num_train_epochs=1,\n    weight_decay=0.01,\n)","88d1777e":"from transformers import default_data_collator\n\ndata_collator = default_data_collator","1c1aacf6":"trainer = Trainer(\n    model,\n    args,\n    train_dataset=tokenized_train_ds,\n    eval_dataset=tokenized_valid_ds,\n    data_collator=data_collator,\n    tokenizer=tokenizer,\n)","1d1f4073":"trainer.train()","4eda42c8":"trainer.save_model(\"chaii-bert-trained\")","1a819383":"def prepare_validation_features(examples):\n    # Some of the questions have lots of whitespace on the left, which is not useful and will make the\n    # truncation of the context fail (the tokenized question will take a lots of space). So we remove that\n    # left whitespace\n    examples[\"question\"] = [q.lstrip() for q in examples[\"question\"]]\n\n    # Tokenize our examples with truncation and maybe padding, but keep the overflows using a stride. This results\n    # in one example possible giving several features when a context is long, each of those features having a\n    # context that overlaps a bit the context of the previous feature.\n    tokenized_examples = tokenizer(\n        examples[\"question\" if pad_on_right else \"context\"],\n        examples[\"context\" if pad_on_right else \"question\"],\n        truncation=\"only_second\" if pad_on_right else \"only_first\",\n        max_length=max_length,\n        stride=doc_stride,\n        return_overflowing_tokens=True,\n        return_offsets_mapping=True,\n        padding=\"max_length\",\n    )\n\n    # Since one example might give us several features if it has a long context, we need a map from a feature to\n    # its corresponding example. This key gives us just that.\n    sample_mapping = tokenized_examples.pop(\"overflow_to_sample_mapping\")\n\n    # We keep the example_id that gave us this feature and we will store the offset mappings.\n    tokenized_examples[\"example_id\"] = []\n\n    for i in range(len(tokenized_examples[\"input_ids\"])):\n        # Grab the sequence corresponding to that example (to know what is the context and what is the question).\n        sequence_ids = tokenized_examples.sequence_ids(i)\n        context_index = 1 if pad_on_right else 0\n\n        # One example can give several spans, this is the index of the example containing this span of text.\n        sample_index = sample_mapping[i]\n        tokenized_examples[\"example_id\"].append(examples[\"id\"][sample_index])\n\n        # Set to None the offset_mapping that are not part of the context so it's easy to determine if a token\n        # position is part of the context or not.\n        tokenized_examples[\"offset_mapping\"][i] = [\n            (o if sequence_ids[k] == context_index else None)\n            for k, o in enumerate(tokenized_examples[\"offset_mapping\"][i])\n        ]\n\n    return tokenized_examples","191ad684":"validation_features = valid_dataset.map(\n    prepare_validation_features,\n    batched=True,\n    remove_columns=valid_dataset.column_names\n)","9d056021":"len(validation_features)","5bd01c45":"validation_features","9e240d75":"valid_feats_small = validation_features.map(lambda example: example, remove_columns=['example_id', 'offset_mapping'])\nvalid_feats_small","82520c67":"raw_predictions = trainer.predict(valid_feats_small)","1d5ad90b":"max_answer_length = 30","e9d1a905":"import collections\n\nexamples = valid_dataset\nfeatures = validation_features\n\nexample_id_to_index = {k: i for i, k in enumerate(examples[\"id\"])}\nfeatures_per_example = collections.defaultdict(list)\nfor i, feature in enumerate(features):\n    features_per_example[example_id_to_index[feature[\"example_id\"]]].append(i)","4516cf4b":"from tqdm.auto import tqdm\n\ndef postprocess_qa_predictions(examples, features, raw_predictions, n_best_size = 20, max_answer_length = 30):\n    all_start_logits, all_end_logits = raw_predictions\n    # Build a map example to its corresponding features.\n    example_id_to_index = {k: i for i, k in enumerate(examples[\"id\"])}\n    features_per_example = collections.defaultdict(list)\n    for i, feature in enumerate(features):\n        features_per_example[example_id_to_index[feature[\"example_id\"]]].append(i)\n\n    # The dictionaries we have to fill.\n    predictions = collections.OrderedDict()\n\n    # Logging.\n    print(f\"Post-processing {len(examples)} example predictions split into {len(features)} features.\")\n\n    # Let's loop over all the examples!\n    for example_index, example in enumerate(tqdm(examples)):\n        # Those are the indices of the features associated to the current example.\n        feature_indices = features_per_example[example_index]\n\n        min_null_score = None # Only used if squad_v2 is True.\n        valid_answers = []\n        \n        context = example[\"context\"]\n        # Looping through all the features associated to the current example.\n        for feature_index in feature_indices:\n            # We grab the predictions of the model for this feature.\n            start_logits = all_start_logits[feature_index]\n            end_logits = all_end_logits[feature_index]\n            # This is what will allow us to map some the positions in our logits to span of texts in the original\n            # context.\n            offset_mapping = features[feature_index][\"offset_mapping\"]\n\n            # Update minimum null prediction.\n            cls_index = features[feature_index][\"input_ids\"].index(tokenizer.cls_token_id)\n            feature_null_score = start_logits[cls_index] + end_logits[cls_index]\n            if min_null_score is None or min_null_score < feature_null_score:\n                min_null_score = feature_null_score\n\n            # Go through all possibilities for the `n_best_size` greater start and end logits.\n            start_indexes = np.argsort(start_logits)[-1 : -n_best_size - 1 : -1].tolist()\n            end_indexes = np.argsort(end_logits)[-1 : -n_best_size - 1 : -1].tolist()\n            for start_index in start_indexes:\n                for end_index in end_indexes:\n                    # Don't consider out-of-scope answers, either because the indices are out of bounds or correspond\n                    # to part of the input_ids that are not in the context.\n                    if (\n                        start_index >= len(offset_mapping)\n                        or end_index >= len(offset_mapping)\n                        or offset_mapping[start_index] is None\n                        or offset_mapping[end_index] is None\n                    ):\n                        continue\n                    # Don't consider answers with a length that is either < 0 or > max_answer_length.\n                    if end_index < start_index or end_index - start_index + 1 > max_answer_length:\n                        continue\n\n                    start_char = offset_mapping[start_index][0]\n                    end_char = offset_mapping[end_index][1]\n                    valid_answers.append(\n                        {\n                            \"score\": start_logits[start_index] + end_logits[end_index],\n                            \"text\": context[start_char: end_char]\n                        }\n                    )\n        \n        if len(valid_answers) > 0:\n            best_answer = sorted(valid_answers, key=lambda x: x[\"score\"], reverse=True)[0]\n        else:\n            # In the very rare edge case we have not a single non-null prediction, we create a fake prediction to avoid\n            # failure.\n            best_answer = {\"text\": \"\", \"score\": 0.0}\n        \n        # Let's pick our final answer: the best one or the null answer (only for squad_v2)\n        predictions[example[\"id\"]] = best_answer[\"text\"]\n\n    return predictions","db8d48a5":"final_predictions = postprocess_qa_predictions(valid_dataset, validation_features, raw_predictions.predictions)","ef6b7c77":"references = [{\"id\": ex[\"id\"], \"answer\": ex[\"answers\"]['text'][0]} for ex in valid_dataset]","56bd1f94":"def jaccard(row): \n    str1 = row[0]\n    str2 = row[1]\n    a = set(str1.lower().split()) \n    b = set(str2.lower().split())\n    c = a.intersection(b)\n    return float(len(c)) \/ (len(a) + len(b) - len(c))","c2e7eea2":"res = pd.DataFrame(references)\nres['prediction'] = res['id'].apply(lambda r: final_predictions[r])\nres['jaccard'] = res[['answer', 'prediction']].apply(jaccard, axis=1)\nres","52a1c014":"res.jaccard.mean()","8672d02a":"test_dataset = Dataset.from_pandas(test_data)","0be7742a":"test_features = test_dataset.map(\n    prepare_validation_features,\n    batched=True,\n    remove_columns=test_dataset.column_names\n)","74af22a0":"test_feats_small = test_features.map(lambda example: example, remove_columns=['example_id', 'offset_mapping'])\ntest_feats_small","f9b62f97":"test_predictions = trainer.predict(test_feats_small)","761a0433":"test_features.set_format(type=test_features.format[\"type\"], columns=list(test_features.features.keys()))","17a1e619":"final_test_predictions = postprocess_qa_predictions(test_dataset, test_features, test_predictions.predictions)","8a0a7d48":"sub = pd.read_csv('..\/input\/chaii-hindi-and-tamil-question-answering\/sample_submission.csv')\nsub.head(1)","26e692c1":"sub['PredictionString'] = sub['id'].apply(lambda r: final_test_predictions[r])\nsub.head()","1ddc6183":"sub.to_csv('submission.csv', index=False)","84124813":"**Checking the test data**","be861ea8":"**Checking the maximum length of the question text**","883dcc98":"# Impoting necessary library for visualization","411c9e30":"# Importing the testing csv file","dabd031b":"**Creating new column of question length**","85d00826":"# Importing the training csv file","ba24c1c8":"**Checking the maximum length of the answer text**","469fd4be":"**Creating new column of answer length**","69d67617":"**Plotting question lengths to check their frequencies**","d863970a":"**Plotting answer lengths to check their frequencies**","4979dfe9":"# \ud83d\udd0d Exploratory Data Analysis (EDA)","4893b938":"**Checking the distribution of the language**","baa04af8":"**Checking the shape of the data**"}}