{"cell_type":{"1cfb04b6":"code","f2145b70":"code","8b1cee77":"code","3c4aab5f":"code","27f1a1e9":"code","3bd494e1":"code","34700705":"code","5a408824":"code","4c9743ec":"code","cb2df2b7":"code","b77beab7":"code","b0693a13":"code","40bd22ea":"code","18d0a12f":"code","e363982d":"code","9829db49":"markdown","17ed6a73":"markdown","6998f4a7":"markdown"},"source":{"1cfb04b6":"!pip install -U lightautoml","f2145b70":"import traceback\nimport numpy as np\nimport pandas as pd\nimport datatable as dt\nimport gresearch_crypto\n\npath = \"..\/input\/g-research-crypto-forecasting\/\"\ndf_train = pd.read_csv(path + \"train.csv\")\ndf_test = pd.read_csv(path + \"example_test.csv\")\ndf_asset_details = pd.read_csv(path + \"asset_details.csv\")\ndf_supp_train = pd.read_csv(path + \"supplemental_train.csv\")","8b1cee77":"df_train.head()","3c4aab5f":"df_asset_details","27f1a1e9":"def hlco_ratio(df): return (df['High'] - df['Low'])\/(df['Close'] - df['Open'])\ndef upper_shadow(df): return df['High'] - np.maximum(df['Close'], df['Open'])\ndef lower_shadow(df): return np.minimum(df['Close'], df['Open']) - df['Low']\n\ndef get_features(df):\n    df_feat = df[['Count', 'Open', 'High', 'Low', 'Close', 'Volume', 'VWAP', 'Target', 'Asset_ID', 'timestamp']].copy()\n    df_feat['Upper_Shadow'] = upper_shadow(df_feat)\n    df_feat['Lower_Shadow'] = lower_shadow(df_feat)\n    df_feat['hlco_ration'] = hlco_ratio(df_feat)\n    return df_feat\n","3bd494e1":"df_train.replace([np.inf, -np.inf], np.nan, inplace=True)\ndf_train = df_train.dropna(how=\"any\")\n\ntrain_data = get_features(df_train)\ntrain_data = df_train.sample(frac = 0.8)\nvalid_data = df_train.drop(train_data.index)","34700705":"valid_data.head()","5a408824":"btc_data.head()","4c9743ec":"from lightautoml.automl.presets.tabular_presets import TabularAutoML\nfrom lightautoml.tasks import Task\nfrom scipy.spatial.distance import correlation\nimport scipy\n\nautoml = {}\n\ndef metric(y_true, y_pred):\n    print(np.std(y_pred))\n    if np.std(y_pred) == 0.:\n        return 0\n    p = scipy.stats.pearsonr(y_true, y_pred)[0]\n    print(f'pearson {p}')\n    return p\n\nfor asset_id, asset_name in zip(df_asset_details['Asset_ID'], df_asset_details['Asset_Name']):\n    automl[asset_id] = TabularAutoML(\n        task = Task(\n            name = 'reg')\n    #     general_params = {'nested_cv': False},\n    )\n\n    btc_data = train_data[train_data['Asset_ID'] == asset_id]\n\n    oof_pred = automl[asset_id].fit_predict(\n        btc_data,\n        roles = {'target': 'Target', 'drop': ['timestamp', 'Asset_ID']},\n        valid_data = valid_data[valid_data['Asset_ID'] == asset_id]\n    )\n# test_pred = automl[asset_id].predict(valid_data)","cb2df2b7":"# from lightautoml.automl.presets.tabular_presets import TabularAutoML\n# from lightautoml.tasks import Task\n# from scipy.spatial.distance import correlation\n\n# automl = {}\n\n# for asset_id, asset_name in zip(df_asset_details['Asset_ID'], df_asset_details['Asset_Name']):\n#     automl[asset_id] = TabularAutoML(\n#         task = Task(\n#             name = 'reg',\n#             general_params = {'nested_cv': False, 'use_algos': [['linear_l2', 'lgb', 'lgb_tuned']]},\n#             metric = lambda y_true, y_pred: correlation(y_true, (y_pred > 0.5)*1))\n#     )\n#     oof_pred = automl[asset_id].fit_predict(\n#         train_data[train_data['Asset_ID'] == asset_id],\n#         roles = {'target': 'Target', 'drop': ['timestamp', 'Asset_ID']}\n#     )\n#     test_pred = automl[asset_id].predict(valid_data)","b77beab7":"# valid_target = valid_data[\"Target\"].to_numpy()\n# preds = [n.data[0] for n in test_pred]","b0693a13":"# import matplotlib.pyplot as plt\n# plt.figure(figsize=(12,6))\n# plt.plot(valid_target)\n# plt.plot(preds)\n# plt.show()","40bd22ea":"x_test = valid_data.iloc[2].drop('Target')\ny_pred = automl[1].predict(pd.DataFrame([x_test]))[0].data[0]\nprint(x_test)\nprint(y_pred)","18d0a12f":"corr = np.corrcoef(preds, valid_target)\nprint('Test score for BTC: ', f\"{corr[0,1]:.4f}\")\nimport scipy\ncorr_p = scipy.stats.pearsonr(preds, valid_target)\ncorr_p[0]","e363982d":"env = gresearch_crypto.make_env()\niter_test = env.iter_test()\n\nfor i, (df_test, df_pred) in enumerate(iter_test):\n    for j , row in df_test.iterrows():        \n        if automl[row['Asset_ID']] is not None:\n            try:\n                model = automl[row['Asset_ID']]\n                x_test = get_features(row)\n                y_pred = model.predict(pd.DataFrame([x_test]))[0].data[0]\n                df_pred.loc[df_pred['row_id'] == row['row_id'], 'Target'] = y_pred\n            except:\n                df_pred.loc[df_pred['row_id'] == row['row_id'], 'Target'] = 0\n                traceback.print_exc()\n        else: \n            df_pred.loc[df_pred['row_id'] == row['row_id'], 'Target'] = 0        \n    env.predict(df_pred)","9829db49":"# Results Submission","17ed6a73":"## Score your model","6998f4a7":"Here I tried to use Light AutoML library developed by Sber. But as competition rules prohibits use of internet, we can't use it in submission.\nSo play with it and see what results you can get!"}}