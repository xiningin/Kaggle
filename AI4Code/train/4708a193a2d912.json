{"cell_type":{"ff905cd0":"code","a5a1e32d":"code","fc1014f7":"code","d69e014b":"code","ea412809":"code","0b7929a4":"code","a3e5a506":"code","f0daa0b7":"code","9dbefb97":"code","bfc0a1d9":"code","0c63664f":"code","cfe7aada":"code","7ab79fc2":"code","7d21bdd1":"code","488d5810":"code","56ad07da":"code","afe1ba04":"code","b0c31e15":"code","8b3210a6":"code","191c2b76":"code","962225a3":"code","162d4fe8":"code","41ce9bd3":"code","90f7f582":"code","c5cfe1b6":"code","9ef6485e":"code","6dac53e7":"code","24f4d0c5":"code","1bdb0f44":"code","730fb8a5":"code","cf69a080":"code","0b0282c3":"code","5f714b10":"code","7cbc2435":"code","54e4f21b":"code","5dd1a5ec":"code","48ac138e":"code","1596a187":"code","d3b65a20":"code","6ded4513":"markdown","ab1d12dd":"markdown","479c2152":"markdown","e706b1ac":"markdown","ec592a26":"markdown","c35a3332":"markdown","0a0a9e52":"markdown","6c759904":"markdown","1efd67dc":"markdown","878522cb":"markdown","413cea4a":"markdown"},"source":{"ff905cd0":"import numpy as np \nimport pandas as pd\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom fbprophet.plot import plot_plotly\nimport plotly.offline as py\nimport folium \nfrom folium.plugins import HeatMap\nfrom fbprophet import Prophet","a5a1e32d":"confirmed_df = pd.read_csv('..\/input\/covid19-dataset-by-university-of-kalyani\/COVID19_INDIA_STATEWISE_TIME_SERIES_CONFIRMED.csv')\ndeath_df = pd.read_csv('..\/input\/covid19-dataset-by-university-of-kalyani\/COVID19_INDIA_STATEWISE_TIME_SERIES_DEATH.csv')\nrecover_df = pd.read_csv('..\/input\/covid19-dataset-by-university-of-kalyani\/COVID19_INDIA_STATEWISE_TIME_SERIES_RECOVERY.csv')","fc1014f7":"confirmed_df.head()","d69e014b":"death_df.head()","ea412809":"recover_df.head()","0b7929a4":"date = '5\/31\/2020'\ntotal_confirmed_cases = confirmed_df.loc[38, date]\ntotal_death_cases = death_df.loc[38, date]\ntotal_recover_cases = recover_df.loc[38, date]\ntotal_active_cases = total_confirmed_cases - total_death_cases - total_recover_cases","a3e5a506":"fig = go.Figure(data=[go.Pie(labels=['Active Cases','Cured','Death'],\n                             values= [total_active_cases,total_recover_cases,total_death_cases], pull=[0.15, 0.15, 0.15])])\nfig.update_traces(hoverinfo='label+percent', textinfo='value', textfont_size=12,marker=dict(colors=['#09c5f2', '#09f259', '#f23209'], line=dict(color='#FFFFFF', width=3)))\nfig.update_layout(\n    title_text=\"Current Situation in India till 31\/05\/2020\")\nfig.show()","f0daa0b7":"recent_df = confirmed_df.loc[: , [\"STATE\/UT\", date]]\nrecent_df = recent_df[ :-1]\nrecent_df = recent_df.sort_values(by=[date], ascending=False)\nfig = px.bar(recent_df, y=\"STATE\/UT\", x=date, color=\"STATE\/UT\", labels={'31\/05\/2020':'No of cases'}, height=800, orientation='h')\nfig.update_layout(title='Total Number of Confirmed Cases in India Till 31st May')\nfig.show()","9dbefb97":"dead_df = death_df.loc[: , [\"STATE\/UT\", date]]\ndead_df = dead_df[ :-1]\ndead_df = dead_df.sort_values(by=[date], ascending=False)\nfig = px.bar(dead_df, y=\"STATE\/UT\", x=date, color=\"STATE\/UT\", labels={'31\/05\/2020':'No of cases'}, height=800, orientation='h')\nfig.update_layout(title='Total Number of Death Cases in India Till 31st May')\nfig.show()","bfc0a1d9":"cured_df = recover_df.loc[: , [\"STATE\/UT\", date]]\ncured_df = cured_df[ :-1]\ncured_df = cured_df.sort_values(by=[date], ascending=False)\nfig = px.bar(cured_df, y=\"STATE\/UT\", x=date, color=\"STATE\/UT\", labels={'31\/05\/2020':'No of cases'}, height=800, orientation='h')\nfig.update_layout(title='Total Number of Recovered Cases in India Till 31st May')\nfig.show()","0c63664f":"fig = go.Figure(data=[go.Pie(labels=recent_df[\"STATE\/UT\"],\n                             values= recent_df[date], hole=.3, pull= .2)])\nfig.update_traces(hoverinfo='label+percent', textinfo='percent', textfont_size=15)\nfig.update_traces(textposition='inside')\nfig.update_layout(\n    title_text=\"Percentage of Confirmed cases across India\")\nfig.show()","cfe7aada":"fig = go.Figure(data=[go.Pie(labels=dead_df[\"STATE\/UT\"],\n                             values= dead_df[date], hole=.3, pull= .2)])\nfig.update_traces(hoverinfo='label+percent', textinfo='percent', textfont_size=15)\nfig.update_traces(textposition='inside')\nfig.update_layout(\n    title_text=\"Percentage of Death cases across India\")\nfig.show()","7ab79fc2":"fig = go.Figure(data=[go.Pie(labels=cured_df[\"STATE\/UT\"],\n                             values= cured_df[date], hole=.3, pull= .2)])\nfig.update_traces(hoverinfo='label+percent', textinfo='percent', textfont_size=15)\nfig.update_traces(textposition='inside')\nfig.update_layout(\n    title_text=\"Percentage of Recovered cases across India\")\nfig.show()","7d21bdd1":"total_confirm = confirmed_df[38:]\ntotal_confirm = total_confirm.drop(['STATE\/UT', 'CODE', 'LATITUDE', 'LONGITUDE', 'PER CAPITA INCOME (INR)', 'POPULATION', 'AVERAGE TEMPERATURE (\u00b0C)'], axis=1)\n\ntotal_death = death_df[38:]\ntotal_death = total_death.drop(['STATE\/UT', 'CODE', 'LATITUDE', 'LONGITUDE', 'PER CAPITA INCOME (INR) ',\n       'POPULATION', 'AVERAGE TEMPERATURE (\u00b0C)'], axis=1)\n\ntotal_recover = recover_df[38:]\ntotal_recover = total_recover.drop(['STATE\/UT', 'CODE', 'LATITUDE', 'LONGITUDE', 'PER CAPITA INCOME (INR)', 'POPULATION', 'AVERAGE TEMPERATURE (\u00b0C)'], axis=1)\n\ntotal_active = total_confirm - total_death - total_recover\n\nfig = go.Figure(data=[\n    go.Bar(name='Death Cases', x=list(total_death.columns), y=list(total_death.iloc[0]), marker_color='#f20909'),\n    go.Bar(name='Recovered Cases', x=list(total_recover.columns), y=list(total_recover.iloc[0]), marker_color='#1df209'),\n    go.Bar(name='Active Cases', x=list(total_active.columns), y=list(total_active.iloc[0]), marker_color='#f2852e')\n])\n# Change the bar mode\nfig.update_layout(barmode='stack')\n# fig.update_layout(uniformtext_minsize=12)\nfig.update_layout(title_text='Cases of Covid-19 in India in last 4 months')\nfig.update_layout(plot_bgcolor='rgb(275, 270, 273)')\nfig.show()","488d5810":"total_confirm = confirmed_df[38:]\ntotal_confirm = total_confirm.drop(['STATE\/UT', 'CODE', 'LATITUDE', 'LONGITUDE', 'PER CAPITA INCOME (INR)', 'POPULATION', 'AVERAGE TEMPERATURE (\u00b0C)'], axis=1)\ntotal_confirm = total_confirm.to_dict(orient='records')\ntotal_confirm = total_confirm[0]\ntotal_confirm_list = []\nfor key, value in total_confirm.items():\n    temp = [key,value]\n    total_confirm_list.append(temp)\n\nnew_list = []\nnew_list.append(total_confirm_list[0])\nfor x in range(1, len(total_confirm_list)):\n  val = total_confirm_list[x][1] - total_confirm_list[x-1][1]\n  new_list.append([total_confirm_list[x][0], val])\n\nnew_dict = [{}]\nfor x in new_list:\n  key = x[0]\n  value = x[1]\n  new_dict[0][key] = value\n\nconfirm_case_daily = pd.DataFrame.from_dict(new_dict)\n\ntotal_death = death_df[38:]\ntotal_death = total_death.drop(['STATE\/UT', 'CODE', 'LATITUDE', 'LONGITUDE', 'PER CAPITA INCOME (INR) ', 'POPULATION', 'AVERAGE TEMPERATURE (\u00b0C)'], axis=1)\ntotal_death = total_death.to_dict(orient='records')\ntotal_death = total_death[0]\ntotal_death_list = []\nfor key, value in total_death.items():\n    temp = [key,value]\n    total_death_list.append(temp)\n\nnew_list = []\nnew_list.append(total_death_list[0])\nfor x in range(1, len(total_death_list)):\n  val = total_death_list[x][1] - total_death_list[x-1][1]\n  new_list.append([total_death_list[x][0], val])\n\nnew_dict = [{}]\nfor x in new_list:\n  key = x[0]\n  value = x[1]\n  new_dict[0][key] = value\n\ndeath_case_daily = pd.DataFrame.from_dict(new_dict)\n\ntotal_recover = recover_df[38:]\ntotal_recover = total_recover.drop(['STATE\/UT', 'CODE', 'LATITUDE', 'LONGITUDE', 'PER CAPITA INCOME (INR)', 'POPULATION', 'AVERAGE TEMPERATURE (\u00b0C)'], axis=1)\ntotal_recover = total_recover.to_dict(orient='records')\ntotal_recover = total_recover[0]\ntotal_recover_list = []\nfor key, value in total_recover.items():\n    temp = [key,value]\n    total_recover_list.append(temp)\n\nnew_list = []\nnew_list.append(total_recover_list[0])\nfor x in range(1, len(total_recover_list)):\n  val = total_recover_list[x][1] - total_recover_list[x-1][1]\n  new_list.append([total_recover_list[x][0], val])\n\nnew_dict = [{}]\nfor x in new_list:\n  key = x[0]\n  value = x[1]\n  new_dict[0][key] = value\n\nrecovered_case_daily = pd.DataFrame.from_dict(new_dict)","56ad07da":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=death_case_daily.columns, y=death_case_daily.iloc[0], name=\"Death\", line=dict(color=\"#f20909\")))\nfig.add_trace(go.Scatter(x=recovered_case_daily.columns, y=recovered_case_daily.iloc[0], name=\"Recovered\" ,line=dict(color=\"#1df209\")))\nfig.add_trace(go.Scatter(x=confirm_case_daily.columns, y=confirm_case_daily.iloc[0], name=\"Confirmed\", line=dict(color=\"#f2852e\")))\nfig.update_layout(plot_bgcolor='rgb(275, 270, 273)')\nfig.update_layout(title='Covid-19 Confirmed, Death and Recovered cases in India on daily basis.',\n                   xaxis_title='Date',\n                   yaxis_title='Daily Count')\nfig.show()","afe1ba04":"data = confirmed_df.loc[0:37, ['STATE\/UT', date]]\ndata.columns = ['STATE\/UT','confirmed']\ndata = pd.concat([data, death_df.loc[0:37, date]], axis=1)\ndata.columns = ['STATE\/UT','confirmed', \"death\"]\nvalue = data\ndef f(x):\n  if x[2] == 0:\n    val = 0\n  else:    \n    val = x[2] \/ x[1] * 1000\n  return val\n\ndata = pd.concat([data, value.apply(f, axis=1)], axis=1)\ndata.columns = ['STATE\/UT','confirmed', \"death\", \"Mortality Rate\"]\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=data['STATE\/UT'], y=data['Mortality Rate'],mode='lines+markers',marker_color='red'))\nfig.update_layout(title_text = 'Mortality Rate across India')\nfig.update_layout(plot_bgcolor='rgb(275, 270, 273)')\nfig.show()","b0c31e15":"data = confirmed_df.loc[0:37, ['STATE\/UT', date]]\ndata.columns = ['STATE\/UT','confirmed']\ndata = pd.concat([data, recover_df.loc[0:37, date]], axis=1)\ndata.columns = ['STATE\/UT','confirmed', \"recover\"]\nvalue = data\ndef f(x):\n  if x[2] == 0:\n    val = 0\n  else:    \n    val = x[2] \/ x[1] * 100\n  return val\n\ndata = pd.concat([data, value.apply(f, axis=1)], axis=1)\ndata.columns = ['STATE\/UT','confirmed', \"recover\", \"Recovery Rate\"]\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=data['STATE\/UT'], y=data['Recovery Rate'],mode='lines+markers',marker_color='green'))\nfig.update_layout(title_text = 'Recovery Rate across India')\nfig.update_layout(plot_bgcolor='rgb(275, 270, 273)')\nfig.show()","8b3210a6":"map_data = confirmed_df[['LATITUDE', 'LONGITUDE', date]]\nmap_data = map_data[0:38]\naffected_area = folium.Map(location=[20.5937, 78.9629], width='60', height='90', zoom_start=5, max_zoom=8, min_zoom=5, tiles = \"Stamen Terrain\")\nHeatMap(data=map_data.groupby(['LATITUDE','LONGITUDE']).sum().reset_index().values.tolist(),\n        radius=30, max_zoom=16).add_to(affected_area)\naffected_area","191c2b76":"testing_center = pd.read_csv('..\/input\/covid19-in-india\/ICMRTestingLabs.csv')\ntesting_center.head(10)","962225a3":"import requests\nfrom urllib.parse import quote\nlocation = []\nfor address in testing_center[\"city\"]:\n  try:\n    address = quote(address)\n    r = requests.get(f'https:\/\/api.mapbox.com\/geocoding\/v5\/mapbox.places\/{address}.json?access_token={Enter your Mapbox API}&limit=1')\n    location.append(r.json()['features'][0]['geometry']['coordinates'])\n    continue\n  except:\n    location.append(float(\"NaN\"))\n\ntesting_center[\"location\"] = location \ntesting_center","162d4fe8":"testing_center = testing_center.dropna()\nmap = folium.Map(location=[20.5937, 78.9629], width='60', height='90', zoom_start=5, max_zoom=8, min_zoom=5, tiles = \"OpenStreetMap\")\nfor address in testing_center[\"location\"]:\n  address = address[::-1]\n  try:\n    folium.Marker(address).add_to(map)\n    continue\n  except:\n    continue\nmap","41ce9bd3":"data = pd.read_csv('..\/input\/coviddataset2020\/covid.csv',index_col=\"location\")\ndata = data.loc[\"India\"]\ndata = data.iloc[1:121, 1:4]\ndata['date']= pd.to_datetime(data['date'])\ndata = data.set_index('date')\ndf_India = data.groupby(pd.Grouper(freq='M')).max()\ndf_India = df_India.reset_index() \ndf_India['month'] = df_India['date'].dt.strftime('%b')\ndel df_India['new_cases']\ndel df_India['date']","90f7f582":"d1 = df_India.iloc[1]['total_cases']\nd2 = df_India.iloc[2]['total_cases']\nw1 = 10\nw2 = 990\nalpha = 0.2\n\npredict_India = df_India.copy()\n\ndef TC_prediction():\n    \n    #weighted average first\n    n1 = d1*w1\n    n2 = d2*w2\n    w_avg = n1+n2\n    w_avg = w_avg\/1000\n    f1 = w_avg\n    #forecasting \n    f2 = alpha*n1+(1-alpha)*f1\n    f3 = alpha*n2+(1-alpha)*f2\n    f3 = int(f3)\n    print(\"Total number of possible cases in April might have been\",f3,\"lacks if there was no lockdown or social distancing practice in India.\")\n    predict_India.at[3,'total_cases']= f3\n\nTC_prediction()","c5cfe1b6":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=df_India.month, y=df_India.total_cases, name=\"Cases in India\", line=dict(color=\"#f2852e\")))\nfig.add_trace(go.Scatter(x=predict_India.month, y=predict_India.total_cases, name=\"Predicted cases in India\" ,line=dict(color=\"#f20909\")))\n\nfig.update_layout(plot_bgcolor='rgb(275, 270, 273)')\nfig.update_layout(title='Prediction of cases in India if there was no Lockdown',\n                   xaxis_title='Month',\n                   yaxis_title='Total Count')\nfig.show()","9ef6485e":"pre_lockdown = confirmed_df.iloc[38:,7:-68]\nphase1 = confirmed_df.iloc[38:,7:-47]\nphase2 = confirmed_df.iloc[38:,7:-28]\nphase3 = confirmed_df.iloc[38:,7:-14]\nphase4 = confirmed_df.iloc[38:,7:]","6dac53e7":"pre_lockdown = pre_lockdown.T\nphase1 = phase1.T\nphase2 = phase2.T\nphase3 = phase3.T\nphase4 = phase4.T","24f4d0c5":"pre_lockdown = pre_lockdown.reset_index()\nphase1 = phase1.reset_index()\nphase2 = phase2.reset_index()\nphase3 = phase3.reset_index()\nphase4 = phase4.reset_index()","1bdb0f44":"pre_lockdown.columns = ['ds', 'y']\nphase1.columns = ['ds', 'y']\nphase2.columns = ['ds', 'y']\nphase3.columns = ['ds', 'y']\nphase4.columns = ['ds', 'y']","730fb8a5":"prophet_basic = Prophet()\nprophet_basic.fit(pre_lockdown)\nfuture= prophet_basic.make_future_dataframe(periods=80)\nforecast=prophet_basic.predict(future)\nfig = plot_plotly(prophet_basic, forecast)\npy.iplot(fig)","cf69a080":"prophet_basic = Prophet()\nprophet_basic.fit(phase1)\nfuture= prophet_basic.make_future_dataframe(periods=89)\nforecast=prophet_basic.predict(future)\nfig = plot_plotly(prophet_basic, forecast)\npy.iplot(fig)","0b0282c3":"prophet_basic = Prophet()\nprophet_basic.fit(phase2)\nfuture= prophet_basic.make_future_dataframe(periods=40)\nforecast=prophet_basic.predict(future)\nfig = plot_plotly(prophet_basic, forecast)\npy.iplot(fig)","5f714b10":"prophet_basic = Prophet()\nprophet_basic.fit(phase3)\nfuture= prophet_basic.make_future_dataframe(periods=26)\nforecast=prophet_basic.predict(future)\nfig = plot_plotly(prophet_basic, forecast)\npy.iplot(fig)","7cbc2435":"prophet_basic = Prophet(daily_seasonality=True)\nprophet_basic.fit(phase4)\nfuture= prophet_basic.make_future_dataframe(periods=12)\nforecast=prophet_basic.predict(future)\nfig = plot_plotly(prophet_basic, forecast)\npy.iplot(fig)","54e4f21b":"from fbprophet import Prophet\nseason = pd.DataFrame({\n  'holiday': 'festivals',\n  'ds': pd.to_datetime(['2020-04-24']),\n  'lower_window': 0,\n  'upper_window': 30,\n})\n\npro_holiday= Prophet(holidays=season)\npro_holiday.fit(phase4)\nfuture_data = pro_holiday.make_future_dataframe(periods=12)\n\nforecast_data = pro_holiday.predict(future_data)\n\nfig = plot_plotly(pro_holiday, forecast_data)\npy.iplot(fig)","5dd1a5ec":"recover = recover_df.iloc[38:,7:]\nrecover = recover.T\nrecover = recover.reset_index()\nrecover.columns = ['ds', 'y']\nrecover","48ac138e":"prophet_basic = Prophet()\nprophet_basic.fit(recover)\nfuture= prophet_basic.make_future_dataframe(periods=12)\nforecast=prophet_basic.predict(future)\n# fig1 =prophet_basic.plot(forecast)\nfig = plot_plotly(prophet_basic, forecast)\npy.iplot(fig)","1596a187":"death = death_df.iloc[38:,7:]\ndeath = death.T\ndeath = death.reset_index()\ndeath.columns = ['ds', 'y']\ndeath","d3b65a20":"prophet_basic = Prophet()\nprophet_basic.fit(death)\nfuture= prophet_basic.make_future_dataframe(periods=12)\nforecast=prophet_basic.predict(future)\n# fig1 =prophet_basic.plot(forecast)\nfig = plot_plotly(prophet_basic, forecast)\npy.iplot(fig)","6ded4513":"**Pre-Lockdown**","ab1d12dd":"# Predicting Cases if there was no Lockdown in India -","479c2152":"**After Phase - 3**","e706b1ac":"**After Phase - 4**","ec592a26":"# Analysing the present condition in India -","c35a3332":"# Predicting Death Cases in India -","0a0a9e52":"# Predicting New Cases in India -","6c759904":"**After Phase - 2**","1efd67dc":"**After Phase - 1**","878522cb":"# Predicting Recovery Cases in India -","413cea4a":"**After Phase - 4 (Taking festivals into consideration)**"}}