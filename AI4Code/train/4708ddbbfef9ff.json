{"cell_type":{"550d249a":"code","aba0f7ad":"code","e6467410":"code","9217c324":"code","c64392c0":"code","aa166ca4":"code","34c7f77c":"code","e7506879":"code","33deed54":"code","de1b49b4":"code","d94af1e1":"code","0e863629":"code","97aaec40":"code","45727538":"code","6b8e1067":"code","f7e1c1c7":"code","d0848f72":"code","dc9989bd":"code","82994bcd":"code","f9b2d632":"code","ef10e155":"code","75e46b99":"code","4929e89b":"code","70718527":"code","85fa1361":"code","3cb92572":"code","d9aa4eaf":"code","103f9b03":"code","088bd997":"markdown","4f9c0fd3":"markdown","052d6b42":"markdown","75abcea9":"markdown","3d4b883e":"markdown"},"source":{"550d249a":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')","aba0f7ad":"df= pd.read_csv('..\/input\/hr-analytics-job-change-of-data-scientists\/aug_train.csv')\ndf.head()","e6467410":"df.shape","9217c324":"df.info()","c64392c0":"df.describe()","aa166ca4":"df.isna().sum()","34c7f77c":"for i in df.columns:\n    print('Uniques values in {} are: {}\\n'.format(i, df[i].unique()))\n    print((df[i].value_counts(normalize= True).head(10)*100).round(2))\n    print('-'*100)","e7506879":"# Missing Values\n\ndf.gender= df.gender.fillna('Unknow')\ndf.enrolled_university= df.enrolled_university.fillna('no_enrollment')\ndf.education_level= df.education_level.fillna('Graduate')\ndf.major_discipline= df.major_discipline.fillna('STEM')\ndf.experience= df.experience.fillna('20')\ndf.company_size= df.company_size.fillna('50-99')\ndf.company_type= df.company_type.fillna('Pvt Ltd')\ndf.last_new_job= df.last_new_job.fillna('1')","33deed54":"df.isna().sum()","de1b49b4":"sns.set_style('darkgrid')\nsns.set_palette('YlOrRd')\n\nplt.figure(figsize= (12,7))\ndf_target= df.target.value_counts()\nplt.pie(df_target, labels= df_target.index, autopct= '%.1f%%', startangle= 90, explode= [0.05, 0.05], shadow = True )\nplt.legend(['Not looking for job change', 'Looking for a job change'])\nplt.title('Target', fontsize= 16)\n\nplt.show()","d94af1e1":"lista= ['gender', 'relevent_experience', 'enrolled_university', 'education_level', \n       'major_discipline', 'experience', 'company_size','company_type','last_new_job','company_type']\n\nplt.figure(figsize= (20,35))\n\nn=1\nfor i in lista:\n    plt.subplot(5,2,n)\n    sns.countplot(x= i, hue= 'target', data= df)\n    plt.title(\"Countplot of {}  by {}\".format( i, 'target'), fontsize= 16)\n    plt.legend(['Not looking for job change', 'Looking for a job change'])\n    n +=1\n","0e863629":"plt.figure(figsize= (15, 15))\n\nplt.subplot(2,2,1)\ndf_gender= df.gender.value_counts()\nplt.pie(df_gender, labels= df_gender.index, autopct= '%.1f%%', startangle= 90, \n        explode= [0.05, 0.05, 0.05, 0.1], shadow = True )\nplt.title('Gender', fontsize= 16)\n\nplt.subplot(2,2,2)\ndf_relevent_experience= df.relevent_experience.value_counts()\nplt.pie(df_relevent_experience, labels= df_relevent_experience.index, autopct= '%.1f%%', startangle= 90,\n        explode= [0.05, 0.05], shadow = True )\nplt.title('Relevent Experience', fontsize= 16)\n\nplt.subplot(2,2,3)\ndf_education_level= df.education_level.value_counts()\nplt.pie(df_education_level, labels= df_education_level.index, autopct= '%.1f%%', startangle= 90, \n        explode= [0.05, 0.05, 0.05, 0.05, 0.2], shadow = True )\nplt.title('Education Level', fontsize= 16)\n\nplt.subplot(2,2,4)\ndf_company_type= df.company_type.value_counts()\nplt.pie(df_company_type, labels= df_company_type.index, autopct= '%.1f%%', startangle= 90, \n        explode= [0.05, 0.05, 0.05, 0.05, 0.2, 0.3], shadow = True )\nplt.title('Company Type', fontsize= 16)\n\nplt.show()","97aaec40":"plt.figure(figsize= (15,5))\nsns.histplot(x= df.training_hours, kde= True, color= 'r')\nplt.title('Training Hours', fontsize= 16)\nplt.show()","45727538":"plt.figure(figsize= (15,5))\nsns.histplot(x= df.city_development_index, kde= True, color= 'r', bins= 60)\nplt.title('City Development Index', fontsize= 16)\nplt.show()","6b8e1067":"def gender_to_numeric(x):\n    if x=='Unknow': return 3\n    if x=='Female': return 2\n    if x=='Male':   return 1\n    if x=='Other':   return 0\n    \ndef rel_experience(x):\n    if x=='Has relevent experience': return 1\n    if x=='No relevent experience':   return 0\n    \ndef enrollment(x):\n    if x=='no_enrollment'   : return 0\n    if x=='Full time course':   return 1 \n    if x=='Part time course':   return 2 \n    \ndef edu_level(x):\n    if x=='Graduate'       :   return 0\n    if x=='Masters'        :   return 1 \n    if x=='High School'    :   return 2 \n    if x=='Phd'            :   return 3 \n    if x=='Primary School' :   return 4 \n    \ndef major(x):\n    if x=='STEM'                   :   return 0\n    if x=='Business Degree'        :   return 1 \n    if x=='Arts'                   :   return 2 \n    if x=='Humanities'             :   return 3 \n    if x=='No Major'               :   return 4 \n    if x=='Other'                  :   return 5 \n    \ndef experience(x):\n    if x=='<1'      :   return 0\n    if x=='1'       :   return 1 \n    if x=='2'       :   return 2 \n    if x=='3'       :   return 3 \n    if x=='4'       :   return 4 \n    if x=='5'       :   return 5\n    if x=='6'       :   return 6\n    if x=='7'       :   return 7\n    if x=='8'       :   return 8 \n    if x=='9'       :   return 9 \n    if x=='10'      :   return 10 \n    if x=='11'      :   return 11\n    if x=='12'      :   return 12\n    if x=='13'      :   return 13 \n    if x=='14'      :   return 14 \n    if x=='15'      :   return 15 \n    if x=='16'      :   return 16\n    if x=='17'      :   return 17\n    if x=='18'      :   return 18\n    if x=='19'      :   return 19 \n    if x=='20'      :   return 20 \n    if x=='>20'     :   return 21 \n    \ndef company_t(x):\n    if x=='Pvt Ltd'               :   return 0\n    if x=='Funded Startup'        :   return 1 \n    if x=='Early Stage Startup'   :   return 2 \n    if x=='Other'                 :   return 3 \n    if x=='Public Sector'         :   return 4 \n    if x=='NGO'                   :   return 5 \n    \ndef company_s(x):\n    if x=='<10'          :   return 0\n    if x=='10\/49'        :   return 1 \n    if x=='100-500'      :   return 2 \n    if x=='1000-4999'    :   return 3 \n    if x=='10000+'       :   return 4 \n    if x=='50-99'        :   return 5 \n    if x=='500-999'      :   return 6 \n    if x=='5000-9999'    :   return 7\n    \ndef last_job(x):\n    if x=='never'        :   return 0\n    if x=='1'            :   return 1 \n    if x=='2'            :   return 2 \n    if x=='3'            :   return 3 \n    if x=='4'            :   return 4 \n    if x=='>4'           :   return 5 \n    \ndef city(x):\n    if x=='city_103'         : return  0\n    if x=='city_40'          : return  1\n    if x=='city_21'          : return  2\n    if x=='city_115'         : return  3\n    if x=='city_162'         : return  4\n    if x=='city_176'         : return  5\n    if x=='city_160'         : return  6\n    if x=='city_46'          : return  7\n    if x=='city_61'          : return  8\n    if x=='city_114'         : return  9\n    if x=='city_13'          : return  10\n    if x=='city_159'         : return  11\n    if x=='city_102'         : return  12\n    if x=='city_67'          : return  13\n    if x=='city_100'         : return  14\n    if x=='city_16'          : return  15\n    if x=='city_71'          : return  16\n    if x=='city_104'         : return  17\n    if x=='city_64'          : return  18\n    if x=='city_101'         : return  19\n    if x=='city_83'          : return  20\n    if x=='city_105'         : return  21\n    if x=='city_73'          : return  22\n    if x=='city_75'          : return  23\n    if x=='city_41'          : return  24\n    if x=='city_11'          : return  25\n    if x=='city_93'          : return  26\n    if x=='city_90'          : return  27\n    if x=='city_36'          : return  28\n    if x=='city_20'          : return  29\n    if x=='city_57'          : return  30\n    if x=='city_152'         : return  31\n    if x=='city_19'          : return  32\n    if x=='city_65'          : return  33\n    if x=='city_74'          : return  34\n    if x=='city_173'         : return  35\n    if x=='city_136'         : return  36\n    if x=='city_98'          : return  37\n    if x=='city_97'          : return  38\n    if x=='city_50'          : return  39\n    if x=='city_138'         : return  40\n    if x=='city_82'          : return  41\n    if x=='city_157'         : return  42\n    if x=='city_89'          : return  43\n    if x=='city_150'         : return  44\n    if x=='city_70'          : return  45\n    if x=='city_175'         : return  46\n    if x=='city_94'          : return  47\n    if x=='city_28'          : return  48\n    if x=='city_59'          : return  49\n    if x=='city_165'         : return  50\n    if x=='city_145'         : return  51\n    if x=='city_142'         : return  52\n    if x=='city_26'          : return  53\n    if x=='city_12'          : return  54\n    if x=='city_37'          : return  55\n    if x=='city_43'          : return  56\n    if x=='city_116'         : return  57\n    if x=='city_23'          : return  58\n    if x=='city_99'          : return  59\n    if x=='city_149'         : return  60\n    if x=='city_10'          : return  61\n    if x=='city_45'          : return  62\n    if x=='city_80'          : return  63\n    if x=='city_128'         : return  64\n    if x=='city_158'         : return  65\n    if x=='city_123'         : return  66\n    if x=='city_7'           : return  67\n    if x=='city_72'          : return  68\n    if x=='city_106'         : return  69\n    if x=='city_143'         : return  70\n    if x=='city_78'          : return  71\n    if x=='city_109'         : return  72\n    if x=='city_24'          : return  73\n    if x=='city_134'         : return  74\n    if x=='city_48'          : return  75\n    if x=='city_144'         : return  76\n    if x=='city_91'          : return  77\n    if x=='city_146'         : return  78\n    if x=='city_133'         : return  79\n    if x=='city_126'         : return  80\n    if x=='city_118'         : return  81\n    if x=='city_9'           : return  82\n    if x=='city_167'         : return  83\n    if x=='city_27'          : return  84\n    if x=='city_84'          : return  85\n    if x=='city_54'          : return  86\n    if x=='city_39'          : return  87\n    if x=='city_79'          : return  88\n    if x=='city_76'          : return  89\n    if x=='city_77'          : return  90\n    if x=='city_81'          : return  91\n    if x=='city_131'         : return  92\n    if x=='city_44'          : return  93\n    if x=='city_117'         : return  94\n    if x=='city_155'         : return  95\n    if x=='city_33'          : return  96\n    if x=='city_141'         : return  97\n    if x=='city_127'         : return  98\n    if x=='city_62'          : return  99\n    if x=='city_53'          : return  100\n    if x=='city_25'          : return  101\n    if x=='city_2'           : return  102\n    if x=='city_69'          : return  103\n    if x=='city_120'         : return  104\n    if x=='city_111'         : return  105\n    if x=='city_30'          : return  106\n    if x=='city_1'           : return  107\n    if x=='city_140'         : return  108\n    if x=='city_179'         : return  109\n    if x=='city_55'          : return  110\n    if x=='city_14'          : return  111\n    if x=='city_42'          : return  112\n    if x=='city_107'         : return  113\n    if x=='city_18'          : return  114\n    if x=='city_139'         : return  115\n    if x=='city_180'         : return  116\n    if x=='city_166'         : return  117\n    if x=='city_121'         : return  118\n    if x=='city_129'         : return  119\n    if x=='city_8'           : return  120\n    if x=='city_31'          : return  121\n    if x=='city_171'         : return  122","f7e1c1c7":"df['gender'] = df['gender'].apply(gender_to_numeric)\ndf['relevent_experience'] = df['relevent_experience'].apply(rel_experience)\ndf['enrolled_university'] = df['enrolled_university'].apply(enrollment)\ndf['education_level'] = df['education_level'].apply(edu_level)\ndf['major_discipline'] = df['major_discipline'].apply(major)\ndf['experience'] = df['experience'].apply(experience)\ndf['company_type'] = df['company_type'].apply(company_t)\ndf['company_size'] = df['company_size'].apply(company_s)\ndf['last_new_job'] = df['last_new_job'].apply(last_job)\ndf['city'] = df['city'].apply(city)","d0848f72":"df.head()","dc9989bd":"for i in df.columns:\n    print('Unique values {} are {}\\n'.format(i, df[i].unique()))\n    print('-'*100)","82994bcd":"df.dtypes","f9b2d632":"corr= df.corr()\n\nplt.figure(figsize= (12,12))\nsns.heatmap(corr, annot= True, linewidths= 1, cmap= 'YlOrRd')\nplt.title('Correlation Matrix', fontsize= 16)\n\nplt.show()","ef10e155":"from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, ConfusionMatrixDisplay\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV, KFold\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import AdaBoostClassifier, RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier","75e46b99":"seed= 123\nnp.random.seed(seed)\n\nx= df.drop(columns= 'target')\ny= df.target\n\nx_train, x_test, y_train, y_test= train_test_split(x, y, test_size= 0.3, stratify= y)","4929e89b":"pipelines= []\n\npipelines.append(('AdaBoost', Pipeline([('Scaler', StandardScaler()),('AdaBoost', AdaBoostClassifier())])))\npipelines.append(('RandomForest', Pipeline([('Scaler', StandardScaler()),('RandomForest', RandomForestClassifier(max_depth= 3))])))\npipelines.append(('DecisionTree', Pipeline([('Scaler', StandardScaler()),('DecisionTree', DecisionTreeClassifier(max_depth= 3))])))\npipelines.append(('Logistic', Pipeline([('Scaler', StandardScaler()),('Logistic', LogisticRegression())])))\npipelines.append(('KNeighbors', Pipeline([('Scaler', StandardScaler()),('KNeighbors', KNeighborsClassifier())])))\npipelines","70718527":"np.random.seed(seed)\n\nresults= []\nnames= []\n\nfor name, model in pipelines:\n    kfold= KFold(n_splits= 10, shuffle= True)\n    cv_results= cross_val_score(estimator= model, X= x_train, y= y_train, scoring= 'accuracy', cv= kfold)*100\n    results.append(cv_results)\n    names.append(name)\n    mean= cv_results.mean()\n    std= cv_results.std()\n    print('{:15} : Average Accuracy {:.2f}% - Std {:.2f}%'.format(\n        name, mean, std))","85fa1361":"plt.figure(figsize= (10,5))\nplt.boxplot(results, labels= names)\nplt.title('Models Comparison', fontsize= 16)","3cb92572":"np.random.seed(seed)\n\ncriterion_values= ['gini', 'entropy']\nsplitter_values= ['best', 'random']\nmax_depth_values= [2,3,4,5,6]\nparams_values= dict(criterion= criterion_values, splitter= splitter_values, max_depth= max_depth_values)\n\nmodel= DecisionTreeClassifier()\nkfold= KFold(n_splits= 10, shuffle= True)\ngrid= GridSearchCV(estimator= model, param_grid= params_values, scoring= 'accuracy', cv= kfold)\ngrid_results= grid.fit(x_train, y_train)\nprint('BEST: Accuracy {:.2f}% - Params {}'.format(grid_results.best_score_*100, grid_results.best_params_))\n\nmeans= grid_results.cv_results_['mean_test_score']\nstds= grid_results.cv_results_['std_test_score']\nparams= grid_results.cv_results_['params']\nfor mean, std, param in zip(means, stds, params):\n    print('Average Accuracy {:.2f}% - Std {:.2f}% - Params {}'.format(mean*100, std*100, param))\n","d9aa4eaf":"np.random.seed(seed)\n\nmodel= DecisionTreeClassifier(criterion= 'entropy', max_depth= 3, splitter= 'best')\nmodel.fit(x_train, y_train)\ny_pred= model.predict(x_test)","103f9b03":"print(\"Classification Report:\\n\", classification_report(y_test, y_pred, digits=4))\n\nprint(\"Accuracy: {:.2f}%\\n\".format(accuracy_score(y_test, y_pred)*100))\n\n# Confusion Matrix \nplt.figure(figsize= (20,7))\n\n# Normal\nplt.subplot(1,2,1)\ncm= confusion_matrix(y_test, y_pred)\nlabels= ['Not looking for job change', 'Looking for a job change']\nsns.heatmap(cm, annot= True, linewidths= 2, fmt= 'd')\nplt.title('Confusion Matrix - Normal', fontsize= 14)\n\n\n# Percent\nplt.subplot(1,2,2)\ncmp= confusion_matrix(y_test, y_pred, normalize= 'true')\nxlabels= ['Predicted Not looking for job change', 'Predicted Looking for a job change']\nylabels= ['Not looking for job change', 'Looking for a job change']\nsns.heatmap(cmp, annot= True, linewidths= 2, fmt= '.2g', xticklabels= xlabels, yticklabels= ylabels)\nplt.title('Confusion Matrix - Percent', fontsize= 14)\n\nplt.show()","088bd997":"## Machine Learning\n\n### Train Data","4f9c0fd3":"## Transforming Data","052d6b42":"## HR Analytics: Job Change of Data Scientists","75abcea9":"## Data Visualization","3d4b883e":"## Importing and  Data Analysis"}}