{"cell_type":{"106631dc":"code","a17b6e34":"code","cafe6b9c":"code","7de46be0":"code","d795d3f8":"code","2ebba52d":"code","953e94f1":"code","56f4f60b":"code","8a6a6bcd":"code","464dc092":"code","e3a405f0":"code","5b6742c2":"code","c376ecb3":"code","8ae8ae1b":"code","1ce40217":"code","68ae89b0":"code","55ad6e3c":"code","5c816790":"code","7902658e":"code","8f63db9e":"code","a96bcb5f":"code","46e52370":"code","b96f91fb":"code","a2c2566d":"markdown","a5afd880":"markdown","1dcd6398":"markdown","864f26b6":"markdown","542f5677":"markdown","00967737":"markdown","e9122278":"markdown","c7a1e169":"markdown","2fafd645":"markdown","4430ee7c":"markdown","6a7aa79a":"markdown","0719275d":"markdown","a5753206":"markdown"},"source":{"106631dc":"!pip install yfinance\n!pip install pandas\n!pip install requests\n!pip install bs4\n!pip install plotly\n","a17b6e34":"import yfinance as yf\nimport pandas as pd\nimport requests\nfrom bs4 import BeautifulSoup\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots","cafe6b9c":"def make_graph(stock_data, revenue_data, stock):\n    fig = make_subplots(rows=2, cols=1, shared_xaxes=True, subplot_titles=(\"Historical Share Price\", \"Historical Revenue\"), vertical_spacing = .3)\n    stock_data_specific = stock_data[stock_data.Date <= '2021--06-14']\n    revenue_data_specific = revenue_data[revenue_data.Date <= '2021-04-30']\n    fig.add_trace(go.Scatter(x=pd.to_datetime(stock_data_specific.Date, infer_datetime_format=True), y=stock_data_specific.Close.astype(\"float\"), name=\"Share Price\"), row=1, col=1)\n    fig.add_trace(go.Scatter(x=pd.to_datetime(revenue_data_specific.Date, infer_datetime_format=True), y=revenue_data_specific.Revenue.astype(\"float\"), name=\"Revenue\"), row=2, col=1)\n    fig.update_xaxes(title_text=\"Date\", row=1, col=1)\n    fig.update_xaxes(title_text=\"Date\", row=2, col=1)\n    fig.update_yaxes(title_text=\"Price ($US)\", row=1, col=1)\n    fig.update_yaxes(title_text=\"Revenue ($US Millions)\", row=2, col=1)\n    fig.update_layout(showlegend=False,\n    height=900,\n    title=stock,\n    xaxis_rangeslider_visible=True)\n    fig.show()","7de46be0":"tesla = yf.Ticker(\"TSLA\")","d795d3f8":"tesla_share_price_data = tesla.history(period=\"max\")\ntesla_data = pd.DataFrame(tesla_share_price_data)","2ebba52d":"tesla_data.reset_index(inplace = True)\ntesla_data.head()","953e94f1":"url = \"https:\/\/www.macrotrends.net\/stocks\/charts\/TSLA\/tesla\/revenue\"\nhtml_data = requests.get(url)         ","56f4f60b":"htmlcontent = html_data.text         \nsoup = BeautifulSoup(htmlcontent, \"html5lib\")\nsoup1 = soup.find_all(\"tbody\")","8a6a6bcd":"tables = soup.find_all('table')\ntesla_revenue = pd.DataFrame(columns=[\"Date\", \"Revenue\"])\nfor row in soup1[1].find_all(\"tr\"):\n    col = row.find_all(\"td\")\n    date = col[0].text\n    revenue = col[1].text\n    tesla_revenue = tesla_revenue.append({\"Date\":date, \"Revenue\":revenue}, ignore_index=True)","464dc092":"tesla_revenue[\"Revenue\"] = tesla_revenue['Revenue'].str.replace(',|\\$',\"\")","e3a405f0":"tesla_revenue.dropna(inplace=True)\n\ntesla_revenue = tesla_revenue[tesla_revenue['Revenue'] != \"\"]","5b6742c2":"tesla_revenue.head()","c376ecb3":"tesla_revenue.tail()","8ae8ae1b":"gamestop = yf.Ticker(\"GME\")","1ce40217":"gamestop_share_price_data = gamestop.history(period=\"max\")\ngamestop_data = pd.DataFrame(gamestop_share_price_data)","68ae89b0":"gamestop_data.reset_index(inplace = True)\ngamestop_data.head()","55ad6e3c":"url = \"https:\/\/www.macrotrends.net\/stocks\/charts\/GME\/gamestop\/revenue\"\nhtml_data = requests.get(url)         ","5c816790":"htmlcontent = html_data.text         \nsoup = BeautifulSoup(htmlcontent, \"html5lib\")\nsoup1 = soup.find_all(\"tbody\")","7902658e":"tables = soup.find_all('table')\ngme_revenue = pd.DataFrame(columns=[\"Date\", \"Revenue\"])\nfor row in soup1[1].find_all(\"tr\"):\n    col = row.find_all(\"td\")\n    date = col[0].text\n    revenue = col[1].text\n    gme_revenue = gme_revenue.append({\"Date\":date, \"Revenue\":revenue}, ignore_index=True)\ngme_revenue[\"Revenue\"] = gme_revenue['Revenue'].str.replace(',|\\$',\"\")\ngme_revenue.dropna(inplace=True)\ngme_revenue = gme_revenue[gme_revenue['Revenue'] != \"\"]","8f63db9e":"gme_revenue.head()","a96bcb5f":"gme_revenue.tail()","46e52370":"make_graph(tesla_data, tesla_revenue, 'Tesla')","b96f91fb":"make_graph(gamestop_data, gme_revenue, 'Gamestop')\n","a2c2566d":" By using beautiful soup I have extracted the table with `Tesla Quarterly Revenue` and store it into a dataframe named `tesla_revenue`. Where the dataframe have columns named `Date` and `Revenue`.\n","a5afd880":"Used the `make_graph` function to graph the Tesla Stock Data. Note the graph will only show data upto June 2021.\n","1dcd6398":"The stock is Tesla and its ticker symbol is `TSLA`.\n","864f26b6":"I have defined the function `make_graph`. It takes a dataframe with stock data (dataframe must contain Date and Close columns), a dataframe with revenue data (dataframe must contain Date and Revenue columns), and the name of the stock.\n","542f5677":"By using beautiful soup I have extracted the table with `GameStop Quarterly Revenue` and stored it into a dataframe named `gme_revenue`. The dataframe should have columns `Date` and `Revenue`.","00967737":"Using the ticker object and the function `history` extracted the stock information and saved it in a dataframe named `tesla_data` and Set the `period` parameter to `max` so we get information for the maximum amount of time.\n","e9122278":"The stock is GameStop and its ticker symbol is `GME`.\n","c7a1e169":"Used the `requests` library to download the webpage https:\/\/www.macrotrends.net\/stocks\/charts\/TSLA\/tesla\/revenue and then Saved the text of the response as a variable named `html_data`.\n","2fafd645":"Parsed the html data using `beautiful_soup`.\n","4430ee7c":"Use the `make_graph` function to graph the GameStop Stock Data. Note the graph will only show data upto June 2021.\n","6a7aa79a":"I have used the `requests` library to download the webpage https:\/\/www.macrotrends.net\/stocks\/charts\/GME\/gamestop\/revenue and saved the text of the response as a variable named `html_data`.\n","0719275d":"By using the ticker object and the function `history` I have extracted stock information and save it in a dataframe named `gamestop_data` and set the `period` parameter to `max` so we get information for the maximum amount of time.\n","a5753206":"Parsed the html data using `beautiful_soup`.\n"}}